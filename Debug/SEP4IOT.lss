
SEP4IOT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000666  00800200  00006968  000069fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006968  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000012c3  00800866  00800866  00007062  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00007062  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000070c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000ca0  00000000  00000000  00007100  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000fb5d  00000000  00000000  00007da0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004147  00000000  00000000  000178fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000077a6  00000000  00000000  0001ba44  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002b30  00000000  00000000  000231ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000483b  00000000  00000000  00025d1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000e02a  00000000  00000000  0002a557  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000c68  00000000  00000000  00038581  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	50 c2       	rjmp	.+1184   	; 0x4a2 <__ctors_end>
       2:	00 00       	nop
       4:	6f c2       	rjmp	.+1246   	; 0x4e4 <__bad_interrupt>
       6:	00 00       	nop
       8:	6d c2       	rjmp	.+1242   	; 0x4e4 <__bad_interrupt>
       a:	00 00       	nop
       c:	6b c2       	rjmp	.+1238   	; 0x4e4 <__bad_interrupt>
       e:	00 00       	nop
      10:	69 c2       	rjmp	.+1234   	; 0x4e4 <__bad_interrupt>
      12:	00 00       	nop
      14:	67 c2       	rjmp	.+1230   	; 0x4e4 <__bad_interrupt>
      16:	00 00       	nop
      18:	65 c2       	rjmp	.+1226   	; 0x4e4 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	63 c2       	rjmp	.+1222   	; 0x4e4 <__bad_interrupt>
      1e:	00 00       	nop
      20:	61 c2       	rjmp	.+1218   	; 0x4e4 <__bad_interrupt>
      22:	00 00       	nop
      24:	5f c2       	rjmp	.+1214   	; 0x4e4 <__bad_interrupt>
      26:	00 00       	nop
      28:	5d c2       	rjmp	.+1210   	; 0x4e4 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	5b c2       	rjmp	.+1206   	; 0x4e4 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 06 0e 	jmp	0x1c0c	; 0x1c0c <__vector_12>
      34:	57 c2       	rjmp	.+1198   	; 0x4e4 <__bad_interrupt>
      36:	00 00       	nop
      38:	55 c2       	rjmp	.+1194   	; 0x4e4 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	53 c2       	rjmp	.+1190   	; 0x4e4 <__bad_interrupt>
      3e:	00 00       	nop
      40:	51 c2       	rjmp	.+1186   	; 0x4e4 <__bad_interrupt>
      42:	00 00       	nop
      44:	4f c2       	rjmp	.+1182   	; 0x4e4 <__bad_interrupt>
      46:	00 00       	nop
      48:	4d c2       	rjmp	.+1178   	; 0x4e4 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	4b c2       	rjmp	.+1174   	; 0x4e4 <__bad_interrupt>
      4e:	00 00       	nop
      50:	49 c2       	rjmp	.+1170   	; 0x4e4 <__bad_interrupt>
      52:	00 00       	nop
      54:	47 c2       	rjmp	.+1166   	; 0x4e4 <__bad_interrupt>
      56:	00 00       	nop
      58:	45 c2       	rjmp	.+1162   	; 0x4e4 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	43 c2       	rjmp	.+1158   	; 0x4e4 <__bad_interrupt>
      5e:	00 00       	nop
      60:	41 c2       	rjmp	.+1154   	; 0x4e4 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 cd 28 	jmp	0x519a	; 0x519a <__vector_25>
      68:	0c 94 1f 29 	jmp	0x523e	; 0x523e <__vector_26>
      6c:	3b c2       	rjmp	.+1142   	; 0x4e4 <__bad_interrupt>
      6e:	00 00       	nop
      70:	39 c2       	rjmp	.+1138   	; 0x4e4 <__bad_interrupt>
      72:	00 00       	nop
      74:	37 c2       	rjmp	.+1134   	; 0x4e4 <__bad_interrupt>
      76:	00 00       	nop
      78:	35 c2       	rjmp	.+1130   	; 0x4e4 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	33 c2       	rjmp	.+1126   	; 0x4e4 <__bad_interrupt>
      7e:	00 00       	nop
      80:	31 c2       	rjmp	.+1122   	; 0x4e4 <__bad_interrupt>
      82:	00 00       	nop
      84:	2f c2       	rjmp	.+1118   	; 0x4e4 <__bad_interrupt>
      86:	00 00       	nop
      88:	2d c2       	rjmp	.+1114   	; 0x4e4 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	2b c2       	rjmp	.+1110   	; 0x4e4 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 63 29 	jmp	0x52c6	; 0x52c6 <__vector_36>
      94:	0c 94 b5 29 	jmp	0x536a	; 0x536a <__vector_37>
      98:	25 c2       	rjmp	.+1098   	; 0x4e4 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 4d 2c 	jmp	0x589a	; 0x589a <__vector_39>
      a0:	21 c2       	rjmp	.+1090   	; 0x4e4 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	1f c2       	rjmp	.+1086   	; 0x4e4 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	1d c2       	rjmp	.+1082   	; 0x4e4 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	1b c2       	rjmp	.+1078   	; 0x4e4 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	19 c2       	rjmp	.+1074   	; 0x4e4 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	17 c2       	rjmp	.+1070   	; 0x4e4 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	15 c2       	rjmp	.+1066   	; 0x4e4 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	13 c2       	rjmp	.+1062   	; 0x4e4 <__bad_interrupt>
      be:	00 00       	nop
      c0:	11 c2       	rjmp	.+1058   	; 0x4e4 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	0f c2       	rjmp	.+1054   	; 0x4e4 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	0d c2       	rjmp	.+1050   	; 0x4e4 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 f9 29 	jmp	0x53f2	; 0x53f2 <__vector_51>
      d0:	0c 94 4b 2a 	jmp	0x5496	; 0x5496 <__vector_52>
      d4:	07 c2       	rjmp	.+1038   	; 0x4e4 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 8f 2a 	jmp	0x551e	; 0x551e <__vector_54>
      dc:	0c 94 e1 2a 	jmp	0x55c2	; 0x55c2 <__vector_55>
      e0:	01 c2       	rjmp	.+1026   	; 0x4e4 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	c6 01       	movw	r24, r12
      e6:	c6 01       	movw	r24, r12
      e8:	c6 01       	movw	r24, r12
      ea:	00 02       	muls	r16, r16
      ec:	08 02       	muls	r16, r24
      ee:	1e 02       	muls	r17, r30
      f0:	c6 01       	movw	r24, r12
      f2:	c6 01       	movw	r24, r12
      f4:	00 02       	muls	r16, r16
      f6:	08 02       	muls	r16, r24
      f8:	6f 2c       	mov	r6, r15
      fa:	df 2c       	mov	r13, r15
      fc:	df 2c       	mov	r13, r15
      fe:	df 2c       	mov	r13, r15
     100:	df 2c       	mov	r13, r15
     102:	df 2c       	mov	r13, r15
     104:	df 2c       	mov	r13, r15
     106:	df 2c       	mov	r13, r15
     108:	6f 2c       	mov	r6, r15
     10a:	df 2c       	mov	r13, r15
     10c:	df 2c       	mov	r13, r15
     10e:	df 2c       	mov	r13, r15
     110:	df 2c       	mov	r13, r15
     112:	df 2c       	mov	r13, r15
     114:	df 2c       	mov	r13, r15
     116:	df 2c       	mov	r13, r15
     118:	71 2c       	mov	r7, r1
     11a:	df 2c       	mov	r13, r15
     11c:	df 2c       	mov	r13, r15
     11e:	df 2c       	mov	r13, r15
     120:	df 2c       	mov	r13, r15
     122:	df 2c       	mov	r13, r15
     124:	df 2c       	mov	r13, r15
     126:	df 2c       	mov	r13, r15
     128:	df 2c       	mov	r13, r15
     12a:	df 2c       	mov	r13, r15
     12c:	df 2c       	mov	r13, r15
     12e:	df 2c       	mov	r13, r15
     130:	df 2c       	mov	r13, r15
     132:	df 2c       	mov	r13, r15
     134:	df 2c       	mov	r13, r15
     136:	df 2c       	mov	r13, r15
     138:	71 2c       	mov	r7, r1
     13a:	df 2c       	mov	r13, r15
     13c:	df 2c       	mov	r13, r15
     13e:	df 2c       	mov	r13, r15
     140:	df 2c       	mov	r13, r15
     142:	df 2c       	mov	r13, r15
     144:	df 2c       	mov	r13, r15
     146:	df 2c       	mov	r13, r15
     148:	df 2c       	mov	r13, r15
     14a:	df 2c       	mov	r13, r15
     14c:	df 2c       	mov	r13, r15
     14e:	df 2c       	mov	r13, r15
     150:	df 2c       	mov	r13, r15
     152:	df 2c       	mov	r13, r15
     154:	df 2c       	mov	r13, r15
     156:	df 2c       	mov	r13, r15
     158:	db 2c       	mov	r13, r11
     15a:	df 2c       	mov	r13, r15
     15c:	df 2c       	mov	r13, r15
     15e:	df 2c       	mov	r13, r15
     160:	df 2c       	mov	r13, r15
     162:	df 2c       	mov	r13, r15
     164:	df 2c       	mov	r13, r15
     166:	df 2c       	mov	r13, r15
     168:	a6 2c       	mov	r10, r6
     16a:	df 2c       	mov	r13, r15
     16c:	df 2c       	mov	r13, r15
     16e:	df 2c       	mov	r13, r15
     170:	df 2c       	mov	r13, r15
     172:	df 2c       	mov	r13, r15
     174:	df 2c       	mov	r13, r15
     176:	df 2c       	mov	r13, r15
     178:	df 2c       	mov	r13, r15
     17a:	df 2c       	mov	r13, r15
     17c:	df 2c       	mov	r13, r15
     17e:	df 2c       	mov	r13, r15
     180:	df 2c       	mov	r13, r15
     182:	df 2c       	mov	r13, r15
     184:	df 2c       	mov	r13, r15
     186:	df 2c       	mov	r13, r15
     188:	9a 2c       	mov	r9, r10
     18a:	df 2c       	mov	r13, r15
     18c:	df 2c       	mov	r13, r15
     18e:	df 2c       	mov	r13, r15
     190:	df 2c       	mov	r13, r15
     192:	df 2c       	mov	r13, r15
     194:	df 2c       	mov	r13, r15
     196:	df 2c       	mov	r13, r15
     198:	be 2c       	mov	r11, r14

0000019a <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     19a:	0d e0       	ldi	r16, 0x0D	; 13
     19c:	19 e1       	ldi	r17, 0x19	; 25
     19e:	0f 2e       	mov	r0, r31
     1a0:	fd e3       	ldi	r31, 0x3D	; 61
     1a2:	ef 2e       	mov	r14, r31
     1a4:	f9 e1       	ldi	r31, 0x19	; 25
     1a6:	ff 2e       	mov	r15, r31
     1a8:	f0 2d       	mov	r31, r0
     1aa:	80 91 0c 19 	lds	r24, 0x190C	; 0x80190c <uxDeletedTasksWaitingCleanUp>
     1ae:	88 23       	and	r24, r24
     1b0:	29 f1       	breq	.+74     	; 0x1fc <prvIdleTask+0x62>
     1b2:	0f b6       	in	r0, 0x3f	; 63
     1b4:	f8 94       	cli
     1b6:	0f 92       	push	r0
     1b8:	d8 01       	movw	r26, r16
     1ba:	17 96       	adiw	r26, 0x07	; 7
     1bc:	ed 91       	ld	r30, X+
     1be:	fc 91       	ld	r31, X
     1c0:	18 97       	sbiw	r26, 0x08	; 8
     1c2:	c0 85       	ldd	r28, Z+8	; 0x08
     1c4:	d1 85       	ldd	r29, Z+9	; 0x09
     1c6:	ce 01       	movw	r24, r28
     1c8:	02 96       	adiw	r24, 0x02	; 2
     1ca:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <uxListRemove>
     1ce:	80 91 00 19 	lds	r24, 0x1900	; 0x801900 <uxCurrentNumberOfTasks>
     1d2:	81 50       	subi	r24, 0x01	; 1
     1d4:	80 93 00 19 	sts	0x1900, r24	; 0x801900 <uxCurrentNumberOfTasks>
     1d8:	80 91 0c 19 	lds	r24, 0x190C	; 0x80190c <uxDeletedTasksWaitingCleanUp>
     1dc:	81 50       	subi	r24, 0x01	; 1
     1de:	80 93 0c 19 	sts	0x190C, r24	; 0x80190c <uxDeletedTasksWaitingCleanUp>
     1e2:	0f 90       	pop	r0
     1e4:	0f be       	out	0x3f, r0	; 63
     1e6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     1e8:	9c 8d       	ldd	r25, Y+28	; 0x1c
     1ea:	0e 94 c7 0b 	call	0x178e	; 0x178e <vPortFree>
     1ee:	ce 01       	movw	r24, r28
     1f0:	0e 94 c7 0b 	call	0x178e	; 0x178e <vPortFree>
     1f4:	80 91 0c 19 	lds	r24, 0x190C	; 0x80190c <uxDeletedTasksWaitingCleanUp>
     1f8:	81 11       	cpse	r24, r1
     1fa:	db cf       	rjmp	.-74     	; 0x1b2 <prvIdleTask+0x18>
     1fc:	f7 01       	movw	r30, r14
     1fe:	80 81       	ld	r24, Z
     200:	82 30       	cpi	r24, 0x02	; 2
     202:	10 f0       	brcs	.+4      	; 0x208 <prvIdleTask+0x6e>
     204:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <vPortYield>
     208:	0e 94 58 1e 	call	0x3cb0	; 0x3cb0 <vApplicationIdleHook>
     20c:	ce cf       	rjmp	.-100    	; 0x1aa <prvIdleTask+0x10>

0000020e <prvTimerTask>:
            pxNewTimer->ucStatus = 0x00;
            prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
        }

        return pxNewTimer;
    }
     20e:	cf 93       	push	r28
     210:	df 93       	push	r29
     212:	cd b7       	in	r28, 0x3d	; 61
     214:	de b7       	in	r29, 0x3e	; 62
     216:	60 97       	sbiw	r28, 0x10	; 16
     218:	0f b6       	in	r0, 0x3f	; 63
     21a:	f8 94       	cli
     21c:	de bf       	out	0x3e, r29	; 62
     21e:	0f be       	out	0x3f, r0	; 63
     220:	cd bf       	out	0x3d, r28	; 61
     222:	ce 01       	movw	r24, r28
     224:	01 96       	adiw	r24, 0x01	; 1
     226:	9a 87       	std	Y+10, r25	; 0x0a
     228:	89 87       	std	Y+9, r24	; 0x09
     22a:	81 2c       	mov	r8, r1
     22c:	91 2c       	mov	r9, r1
     22e:	a1 2c       	mov	r10, r1
     230:	b1 2c       	mov	r11, r1
     232:	69 84       	ldd	r6, Y+9	; 0x09
     234:	7a 84       	ldd	r7, Y+10	; 0x0a
     236:	e0 91 75 19 	lds	r30, 0x1975	; 0x801975 <pxCurrentTimerList>
     23a:	f0 91 76 19 	lds	r31, 0x1976	; 0x801976 <pxCurrentTimerList+0x1>
     23e:	80 81       	ld	r24, Z
     240:	88 23       	and	r24, r24
     242:	09 f4       	brne	.+2      	; 0x246 <prvTimerTask+0x38>
     244:	14 c1       	rjmp	.+552    	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
     246:	07 80       	ldd	r0, Z+7	; 0x07
     248:	f0 85       	ldd	r31, Z+8	; 0x08
     24a:	e0 2d       	mov	r30, r0
     24c:	20 80       	ld	r2, Z
     24e:	31 80       	ldd	r3, Z+1	; 0x01
     250:	42 80       	ldd	r4, Z+2	; 0x02
     252:	53 80       	ldd	r5, Z+3	; 0x03
     254:	0e 94 9d 16 	call	0x2d3a	; 0x2d3a <vTaskSuspendAll>
     258:	ce 01       	movw	r24, r28
     25a:	01 96       	adiw	r24, 0x01	; 1
     25c:	0e 94 c2 1d 	call	0x3b84	; 0x3b84 <prvSampleTimeNow>
     260:	6b 87       	std	Y+11, r22	; 0x0b
     262:	7c 87       	std	Y+12, r23	; 0x0c
     264:	8d 87       	std	Y+13, r24	; 0x0d
     266:	9e 87       	std	Y+14, r25	; 0x0e
     268:	89 81       	ldd	r24, Y+1	; 0x01
     26a:	81 11       	cpse	r24, r1
     26c:	67 c0       	rjmp	.+206    	; 0x33c <prvTimerTask+0x12e>
     26e:	8b 85       	ldd	r24, Y+11	; 0x0b
     270:	9c 85       	ldd	r25, Y+12	; 0x0c
     272:	ad 85       	ldd	r26, Y+13	; 0x0d
     274:	be 85       	ldd	r27, Y+14	; 0x0e
     276:	82 15       	cp	r24, r2
     278:	93 05       	cpc	r25, r3
     27a:	a4 05       	cpc	r26, r4
     27c:	b5 05       	cpc	r27, r5
     27e:	08 f4       	brcc	.+2      	; 0x282 <prvTimerTask+0x74>
     280:	45 c0       	rjmp	.+138    	; 0x30c <prvTimerTask+0xfe>
     282:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <xTaskResumeAll>
     286:	e0 91 75 19 	lds	r30, 0x1975	; 0x801975 <pxCurrentTimerList>
     28a:	f0 91 76 19 	lds	r31, 0x1976	; 0x801976 <pxCurrentTimerList+0x1>
     28e:	07 80       	ldd	r0, Z+7	; 0x07
     290:	f0 85       	ldd	r31, Z+8	; 0x08
     292:	e0 2d       	mov	r30, r0
     294:	a0 85       	ldd	r26, Z+8	; 0x08
     296:	b1 85       	ldd	r27, Z+9	; 0x09
     298:	b8 8b       	std	Y+16, r27	; 0x10
     29a:	af 87       	std	Y+15, r26	; 0x0f
     29c:	cd 01       	movw	r24, r26
     29e:	02 96       	adiw	r24, 0x02	; 2
     2a0:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <uxListRemove>
     2a4:	ef 85       	ldd	r30, Y+15	; 0x0f
     2a6:	f8 89       	ldd	r31, Y+16	; 0x10
     2a8:	87 89       	ldd	r24, Z+23	; 0x17
     2aa:	82 ff       	sbrs	r24, 2
     2ac:	21 c0       	rjmp	.+66     	; 0x2f0 <prvTimerTask+0xe2>
     2ae:	46 85       	ldd	r20, Z+14	; 0x0e
     2b0:	57 85       	ldd	r21, Z+15	; 0x0f
     2b2:	60 89       	ldd	r22, Z+16	; 0x10
     2b4:	71 89       	ldd	r23, Z+17	; 0x11
     2b6:	42 0d       	add	r20, r2
     2b8:	53 1d       	adc	r21, r3
     2ba:	64 1d       	adc	r22, r4
     2bc:	75 1d       	adc	r23, r5
     2be:	72 01       	movw	r14, r4
     2c0:	61 01       	movw	r12, r2
     2c2:	0b 85       	ldd	r16, Y+11	; 0x0b
     2c4:	1c 85       	ldd	r17, Y+12	; 0x0c
     2c6:	2d 85       	ldd	r18, Y+13	; 0x0d
     2c8:	3e 85       	ldd	r19, Y+14	; 0x0e
     2ca:	cf 01       	movw	r24, r30
     2cc:	0e 94 d1 1c 	call	0x39a2	; 0x39a2 <prvInsertTimerInActiveList>
     2d0:	88 23       	and	r24, r24
     2d2:	99 f0       	breq	.+38     	; 0x2fa <prvTimerTask+0xec>
     2d4:	c8 2c       	mov	r12, r8
     2d6:	d9 2c       	mov	r13, r9
     2d8:	ea 2c       	mov	r14, r10
     2da:	fb 2c       	mov	r15, r11
     2dc:	00 e0       	ldi	r16, 0x00	; 0
     2de:	10 e0       	ldi	r17, 0x00	; 0
     2e0:	a2 01       	movw	r20, r4
     2e2:	91 01       	movw	r18, r2
     2e4:	60 e0       	ldi	r22, 0x00	; 0
     2e6:	8f 85       	ldd	r24, Y+15	; 0x0f
     2e8:	98 89       	ldd	r25, Y+16	; 0x10
     2ea:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <xTimerGenericCommand>
     2ee:	05 c0       	rjmp	.+10     	; 0x2fa <prvTimerTask+0xec>
     2f0:	8e 7f       	andi	r24, 0xFE	; 254
     2f2:	af 85       	ldd	r26, Y+15	; 0x0f
     2f4:	b8 89       	ldd	r27, Y+16	; 0x10
     2f6:	57 96       	adiw	r26, 0x17	; 23
     2f8:	8c 93       	st	X, r24
     2fa:	af 85       	ldd	r26, Y+15	; 0x0f
     2fc:	b8 89       	ldd	r27, Y+16	; 0x10
     2fe:	54 96       	adiw	r26, 0x14	; 20
     300:	ed 91       	ld	r30, X+
     302:	fc 91       	ld	r31, X
     304:	55 97       	sbiw	r26, 0x15	; 21
     306:	cd 01       	movw	r24, r26
     308:	19 95       	eicall
     30a:	a2 c0       	rjmp	.+324    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     30c:	20 e0       	ldi	r18, 0x00	; 0
     30e:	b2 01       	movw	r22, r4
     310:	a1 01       	movw	r20, r2
     312:	8b 85       	ldd	r24, Y+11	; 0x0b
     314:	9c 85       	ldd	r25, Y+12	; 0x0c
     316:	ad 85       	ldd	r26, Y+13	; 0x0d
     318:	be 85       	ldd	r27, Y+14	; 0x0e
     31a:	48 1b       	sub	r20, r24
     31c:	59 0b       	sbc	r21, r25
     31e:	6a 0b       	sbc	r22, r26
     320:	7b 0b       	sbc	r23, r27
     322:	80 91 71 19 	lds	r24, 0x1971	; 0x801971 <xTimerQueue>
     326:	90 91 72 19 	lds	r25, 0x1972	; 0x801972 <xTimerQueue+0x1>
     32a:	0e 94 a2 11 	call	0x2344	; 0x2344 <vQueueWaitForMessageRestricted>
     32e:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <xTaskResumeAll>
     332:	81 11       	cpse	r24, r1
     334:	8d c0       	rjmp	.+282    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     336:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <vPortYield>
     33a:	8a c0       	rjmp	.+276    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     33c:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <xTaskResumeAll>
     340:	87 c0       	rjmp	.+270    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     342:	89 81       	ldd	r24, Y+1	; 0x01
     344:	88 23       	and	r24, r24
     346:	0c f4       	brge	.+2      	; 0x34a <prvTimerTask+0x13c>
     348:	83 c0       	rjmp	.+262    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     34a:	4e 80       	ldd	r4, Y+6	; 0x06
     34c:	5f 80       	ldd	r5, Y+7	; 0x07
     34e:	d2 01       	movw	r26, r4
     350:	1c 96       	adiw	r26, 0x0c	; 12
     352:	8d 91       	ld	r24, X+
     354:	9c 91       	ld	r25, X
     356:	1d 97       	sbiw	r26, 0x0d	; 13
     358:	89 2b       	or	r24, r25
     35a:	21 f0       	breq	.+8      	; 0x364 <prvTimerTask+0x156>
     35c:	c2 01       	movw	r24, r4
     35e:	02 96       	adiw	r24, 0x02	; 2
     360:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <uxListRemove>
     364:	ce 01       	movw	r24, r28
     366:	08 96       	adiw	r24, 0x08	; 8
     368:	0e 94 c2 1d 	call	0x3b84	; 0x3b84 <prvSampleTimeNow>
     36c:	8b 01       	movw	r16, r22
     36e:	9c 01       	movw	r18, r24
     370:	e9 81       	ldd	r30, Y+1	; 0x01
     372:	0e 2e       	mov	r0, r30
     374:	00 0c       	add	r0, r0
     376:	ff 0b       	sbc	r31, r31
     378:	ea 30       	cpi	r30, 0x0A	; 10
     37a:	f1 05       	cpc	r31, r1
     37c:	08 f0       	brcs	.+2      	; 0x380 <prvTimerTask+0x172>
     37e:	68 c0       	rjmp	.+208    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     380:	88 27       	eor	r24, r24
     382:	ee 58       	subi	r30, 0x8E	; 142
     384:	ff 4f       	sbci	r31, 0xFF	; 255
     386:	8f 4f       	sbci	r24, 0xFF	; 255
     388:	0c 94 4a 2f 	jmp	0x5e94	; 0x5e94 <__tablejump2__>
     38c:	f2 01       	movw	r30, r4
     38e:	87 89       	ldd	r24, Z+23	; 0x17
     390:	81 60       	ori	r24, 0x01	; 1
     392:	87 8b       	std	Z+23, r24	; 0x17
     394:	ca 80       	ldd	r12, Y+2	; 0x02
     396:	db 80       	ldd	r13, Y+3	; 0x03
     398:	ec 80       	ldd	r14, Y+4	; 0x04
     39a:	fd 80       	ldd	r15, Y+5	; 0x05
     39c:	46 85       	ldd	r20, Z+14	; 0x0e
     39e:	57 85       	ldd	r21, Z+15	; 0x0f
     3a0:	60 89       	ldd	r22, Z+16	; 0x10
     3a2:	71 89       	ldd	r23, Z+17	; 0x11
     3a4:	4c 0d       	add	r20, r12
     3a6:	5d 1d       	adc	r21, r13
     3a8:	6e 1d       	adc	r22, r14
     3aa:	7f 1d       	adc	r23, r15
     3ac:	c2 01       	movw	r24, r4
     3ae:	0e 94 d1 1c 	call	0x39a2	; 0x39a2 <prvInsertTimerInActiveList>
     3b2:	88 23       	and	r24, r24
     3b4:	09 f4       	brne	.+2      	; 0x3b8 <prvTimerTask+0x1aa>
     3b6:	4c c0       	rjmp	.+152    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     3b8:	d2 01       	movw	r26, r4
     3ba:	54 96       	adiw	r26, 0x14	; 20
     3bc:	ed 91       	ld	r30, X+
     3be:	fc 91       	ld	r31, X
     3c0:	55 97       	sbiw	r26, 0x15	; 21
     3c2:	c2 01       	movw	r24, r4
     3c4:	19 95       	eicall
     3c6:	f2 01       	movw	r30, r4
     3c8:	87 89       	ldd	r24, Z+23	; 0x17
     3ca:	82 ff       	sbrs	r24, 2
     3cc:	41 c0       	rjmp	.+130    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     3ce:	4a 81       	ldd	r20, Y+2	; 0x02
     3d0:	5b 81       	ldd	r21, Y+3	; 0x03
     3d2:	6c 81       	ldd	r22, Y+4	; 0x04
     3d4:	7d 81       	ldd	r23, Y+5	; 0x05
     3d6:	86 85       	ldd	r24, Z+14	; 0x0e
     3d8:	97 85       	ldd	r25, Z+15	; 0x0f
     3da:	a0 89       	ldd	r26, Z+16	; 0x10
     3dc:	b1 89       	ldd	r27, Z+17	; 0x11
     3de:	9a 01       	movw	r18, r20
     3e0:	ab 01       	movw	r20, r22
     3e2:	28 0f       	add	r18, r24
     3e4:	39 1f       	adc	r19, r25
     3e6:	4a 1f       	adc	r20, r26
     3e8:	5b 1f       	adc	r21, r27
     3ea:	c8 2c       	mov	r12, r8
     3ec:	d9 2c       	mov	r13, r9
     3ee:	ea 2c       	mov	r14, r10
     3f0:	fb 2c       	mov	r15, r11
     3f2:	00 e0       	ldi	r16, 0x00	; 0
     3f4:	10 e0       	ldi	r17, 0x00	; 0
     3f6:	60 e0       	ldi	r22, 0x00	; 0
     3f8:	c2 01       	movw	r24, r4
     3fa:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <xTimerGenericCommand>
     3fe:	28 c0       	rjmp	.+80     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     400:	d2 01       	movw	r26, r4
     402:	57 96       	adiw	r26, 0x17	; 23
     404:	8c 91       	ld	r24, X
     406:	57 97       	sbiw	r26, 0x17	; 23
     408:	8e 7f       	andi	r24, 0xFE	; 254
     40a:	57 96       	adiw	r26, 0x17	; 23
     40c:	8c 93       	st	X, r24
     40e:	20 c0       	rjmp	.+64     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     410:	f2 01       	movw	r30, r4
     412:	87 89       	ldd	r24, Z+23	; 0x17
     414:	81 60       	ori	r24, 0x01	; 1
     416:	87 8b       	std	Z+23, r24	; 0x17
     418:	4a 81       	ldd	r20, Y+2	; 0x02
     41a:	5b 81       	ldd	r21, Y+3	; 0x03
     41c:	6c 81       	ldd	r22, Y+4	; 0x04
     41e:	7d 81       	ldd	r23, Y+5	; 0x05
     420:	46 87       	std	Z+14, r20	; 0x0e
     422:	57 87       	std	Z+15, r21	; 0x0f
     424:	60 8b       	std	Z+16, r22	; 0x10
     426:	71 8b       	std	Z+17, r23	; 0x11
     428:	40 0f       	add	r20, r16
     42a:	51 1f       	adc	r21, r17
     42c:	62 1f       	adc	r22, r18
     42e:	73 1f       	adc	r23, r19
     430:	68 01       	movw	r12, r16
     432:	79 01       	movw	r14, r18
     434:	c2 01       	movw	r24, r4
     436:	0e 94 d1 1c 	call	0x39a2	; 0x39a2 <prvInsertTimerInActiveList>
     43a:	0a c0       	rjmp	.+20     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     43c:	f2 01       	movw	r30, r4
     43e:	87 89       	ldd	r24, Z+23	; 0x17
     440:	81 fd       	sbrc	r24, 1
     442:	04 c0       	rjmp	.+8      	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
     444:	c2 01       	movw	r24, r4
     446:	0e 94 c7 0b 	call	0x178e	; 0x178e <vPortFree>
     44a:	02 c0       	rjmp	.+4      	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     44c:	8e 7f       	andi	r24, 0xFE	; 254
     44e:	87 8b       	std	Z+23, r24	; 0x17
     450:	28 2d       	mov	r18, r8
     452:	39 2d       	mov	r19, r9
     454:	4a 2d       	mov	r20, r10
     456:	5b 2d       	mov	r21, r11
     458:	66 2d       	mov	r22, r6
     45a:	77 2d       	mov	r23, r7
     45c:	80 91 71 19 	lds	r24, 0x1971	; 0x801971 <xTimerQueue>
     460:	90 91 72 19 	lds	r25, 0x1972	; 0x801972 <xTimerQueue+0x1>
     464:	0e 94 3e 10 	call	0x207c	; 0x207c <xQueueReceive>
     468:	81 11       	cpse	r24, r1
     46a:	6b cf       	rjmp	.-298    	; 0x342 <prvTimerTask+0x134>
     46c:	e4 ce       	rjmp	.-568    	; 0x236 <prvTimerTask+0x28>
     46e:	0e 94 9d 16 	call	0x2d3a	; 0x2d3a <vTaskSuspendAll>
     472:	ce 01       	movw	r24, r28
     474:	01 96       	adiw	r24, 0x01	; 1
     476:	0e 94 c2 1d 	call	0x3b84	; 0x3b84 <prvSampleTimeNow>
     47a:	6b 87       	std	Y+11, r22	; 0x0b
     47c:	7c 87       	std	Y+12, r23	; 0x0c
     47e:	8d 87       	std	Y+13, r24	; 0x0d
     480:	9e 87       	std	Y+14, r25	; 0x0e
     482:	89 81       	ldd	r24, Y+1	; 0x01
     484:	81 11       	cpse	r24, r1
     486:	5a cf       	rjmp	.-332    	; 0x33c <prvTimerTask+0x12e>
     488:	e0 91 73 19 	lds	r30, 0x1973	; 0x801973 <pxOverflowTimerList>
     48c:	f0 91 74 19 	lds	r31, 0x1974	; 0x801974 <pxOverflowTimerList+0x1>
     490:	80 81       	ld	r24, Z
     492:	21 e0       	ldi	r18, 0x01	; 1
     494:	81 11       	cpse	r24, r1
     496:	20 e0       	ldi	r18, 0x00	; 0
     498:	28 2c       	mov	r2, r8
     49a:	39 2c       	mov	r3, r9
     49c:	4a 2c       	mov	r4, r10
     49e:	5b 2c       	mov	r5, r11
     4a0:	36 cf       	rjmp	.-404    	; 0x30e <prvTimerTask+0x100>

000004a2 <__ctors_end>:
     4a2:	11 24       	eor	r1, r1
     4a4:	1f be       	out	0x3f, r1	; 63
     4a6:	cf ef       	ldi	r28, 0xFF	; 255
     4a8:	d1 e2       	ldi	r29, 0x21	; 33
     4aa:	de bf       	out	0x3e, r29	; 62
     4ac:	cd bf       	out	0x3d, r28	; 61
     4ae:	00 e0       	ldi	r16, 0x00	; 0
     4b0:	0c bf       	out	0x3c, r16	; 60

000004b2 <__do_copy_data>:
     4b2:	18 e0       	ldi	r17, 0x08	; 8
     4b4:	a0 e0       	ldi	r26, 0x00	; 0
     4b6:	b2 e0       	ldi	r27, 0x02	; 2
     4b8:	e8 e6       	ldi	r30, 0x68	; 104
     4ba:	f9 e6       	ldi	r31, 0x69	; 105
     4bc:	00 e0       	ldi	r16, 0x00	; 0
     4be:	0b bf       	out	0x3b, r16	; 59
     4c0:	02 c0       	rjmp	.+4      	; 0x4c6 <__do_copy_data+0x14>
     4c2:	07 90       	elpm	r0, Z+
     4c4:	0d 92       	st	X+, r0
     4c6:	a6 36       	cpi	r26, 0x66	; 102
     4c8:	b1 07       	cpc	r27, r17
     4ca:	d9 f7       	brne	.-10     	; 0x4c2 <__do_copy_data+0x10>

000004cc <__do_clear_bss>:
     4cc:	2b e1       	ldi	r18, 0x1B	; 27
     4ce:	a6 e6       	ldi	r26, 0x66	; 102
     4d0:	b8 e0       	ldi	r27, 0x08	; 8
     4d2:	01 c0       	rjmp	.+2      	; 0x4d6 <.do_clear_bss_start>

000004d4 <.do_clear_bss_loop>:
     4d4:	1d 92       	st	X+, r1

000004d6 <.do_clear_bss_start>:
     4d6:	a9 32       	cpi	r26, 0x29	; 41
     4d8:	b2 07       	cpc	r27, r18
     4da:	e1 f7       	brne	.-8      	; 0x4d4 <.do_clear_bss_loop>
     4dc:	0e 94 46 1f 	call	0x3e8c	; 0x3e8c <main>
     4e0:	0c 94 b2 34 	jmp	0x6964	; 0x6964 <_exit>

000004e4 <__bad_interrupt>:
     4e4:	8d cd       	rjmp	.-1254   	; 0x0 <__vectors>

000004e6 <co2Reader_create>:
		return;

	//delete will clear the allocated memory to the task + we need to remove everything else
	vTaskDelete(self->handleTask);
	vPortFree(self);
}
     4e6:	2f 92       	push	r2
     4e8:	3f 92       	push	r3
     4ea:	4f 92       	push	r4
     4ec:	5f 92       	push	r5
     4ee:	6f 92       	push	r6
     4f0:	7f 92       	push	r7
     4f2:	8f 92       	push	r8
     4f4:	9f 92       	push	r9
     4f6:	af 92       	push	r10
     4f8:	bf 92       	push	r11
     4fa:	cf 92       	push	r12
     4fc:	df 92       	push	r13
     4fe:	ef 92       	push	r14
     500:	ff 92       	push	r15
     502:	0f 93       	push	r16
     504:	1f 93       	push	r17
     506:	cf 93       	push	r28
     508:	df 93       	push	r29
     50a:	88 2e       	mov	r8, r24
     50c:	96 2e       	mov	r9, r22
     50e:	1a 01       	movw	r2, r20
     510:	28 01       	movw	r4, r16
     512:	39 01       	movw	r6, r18
     514:	87 01       	movw	r16, r14
     516:	64 e0       	ldi	r22, 0x04	; 4
     518:	70 e0       	ldi	r23, 0x00	; 0
     51a:	81 e0       	ldi	r24, 0x01	; 1
     51c:	90 e0       	ldi	r25, 0x00	; 0
     51e:	0e 94 66 2f 	call	0x5ecc	; 0x5ecc <calloc>
     522:	ec 01       	movw	r28, r24
     524:	00 97       	sbiw	r24, 0x00	; 0
     526:	79 f1       	breq	.+94     	; 0x586 <co2Reader_create+0xa0>
     528:	fc 01       	movw	r30, r24
     52a:	11 92       	st	Z+, r1
     52c:	11 92       	st	Z+, r1
     52e:	7f 01       	movw	r14, r30
     530:	30 92 71 08 	sts	0x0871, r3	; 0x800871 <_startMeasureEventGroup+0x1>
     534:	20 92 70 08 	sts	0x0870, r2	; 0x800870 <_startMeasureEventGroup>
     538:	40 92 6c 08 	sts	0x086C, r4	; 0x80086c <_startMeasureBit>
     53c:	50 92 6d 08 	sts	0x086D, r5	; 0x80086d <_startMeasureBit+0x1>
     540:	60 92 6e 08 	sts	0x086E, r6	; 0x80086e <_startMeasureBit+0x2>
     544:	70 92 6f 08 	sts	0x086F, r7	; 0x80086f <_startMeasureBit+0x3>
     548:	10 93 6b 08 	sts	0x086B, r17	; 0x80086b <_readyEventGroup+0x1>
     54c:	00 93 6a 08 	sts	0x086A, r16	; 0x80086a <_readyEventGroup>
     550:	a0 92 66 08 	sts	0x0866, r10	; 0x800866 <__data_end>
     554:	b0 92 67 08 	sts	0x0867, r11	; 0x800867 <__data_end+0x1>
     558:	c0 92 68 08 	sts	0x0868, r12	; 0x800868 <__data_end+0x2>
     55c:	d0 92 69 08 	sts	0x0869, r13	; 0x800869 <__data_end+0x3>
     560:	60 e0       	ldi	r22, 0x00	; 0
     562:	70 e0       	ldi	r23, 0x00	; 0
     564:	83 e0       	ldi	r24, 0x03	; 3
     566:	0e 94 04 27 	call	0x4e08	; 0x4e08 <mh_z19_create>
     56a:	49 2d       	mov	r20, r9
     56c:	50 e0       	ldi	r21, 0x00	; 0
     56e:	08 2d       	mov	r16, r8
     570:	9e 01       	movw	r18, r28
     572:	62 e7       	ldi	r22, 0x72	; 114
     574:	72 e0       	ldi	r23, 0x02	; 2
     576:	8b e2       	ldi	r24, 0x2B	; 43
     578:	93 e0       	ldi	r25, 0x03	; 3
     57a:	0e 94 42 15 	call	0x2a84	; 0x2a84 <xTaskCreate>
     57e:	8c e7       	ldi	r24, 0x7C	; 124
     580:	92 e0       	ldi	r25, 0x02	; 2
     582:	0e 94 6c 31 	call	0x62d8	; 0x62d8 <puts>
     586:	ce 01       	movw	r24, r28
     588:	df 91       	pop	r29
     58a:	cf 91       	pop	r28
     58c:	1f 91       	pop	r17
     58e:	0f 91       	pop	r16
     590:	ff 90       	pop	r15
     592:	ef 90       	pop	r14
     594:	df 90       	pop	r13
     596:	cf 90       	pop	r12
     598:	bf 90       	pop	r11
     59a:	af 90       	pop	r10
     59c:	9f 90       	pop	r9
     59e:	8f 90       	pop	r8
     5a0:	7f 90       	pop	r7
     5a2:	6f 90       	pop	r6
     5a4:	5f 90       	pop	r5
     5a6:	4f 90       	pop	r4
     5a8:	3f 90       	pop	r3
     5aa:	2f 90       	pop	r2
     5ac:	08 95       	ret

000005ae <co2Reader_measure>:

//actual task, methods devided so that it is possible to test


void co2Reader_measure(co2reader_t self) {
     5ae:	cf 92       	push	r12
     5b0:	df 92       	push	r13
     5b2:	ef 92       	push	r14
     5b4:	ff 92       	push	r15
     5b6:	0f 93       	push	r16
     5b8:	1f 93       	push	r17
     5ba:	cf 93       	push	r28
     5bc:	df 93       	push	r29
     5be:	ec 01       	movw	r28, r24
	
	EventBits_t uxBits = xEventGroupWaitBits(_startMeasureEventGroup, //eventGroup
     5c0:	40 91 6c 08 	lds	r20, 0x086C	; 0x80086c <_startMeasureBit>
     5c4:	50 91 6d 08 	lds	r21, 0x086D	; 0x80086d <_startMeasureBit+0x1>
     5c8:	60 91 6e 08 	lds	r22, 0x086E	; 0x80086e <_startMeasureBit+0x2>
     5cc:	70 91 6f 08 	lds	r23, 0x086F	; 0x80086f <_startMeasureBit+0x3>
     5d0:	cc 24       	eor	r12, r12
     5d2:	ca 94       	dec	r12
     5d4:	dc 2c       	mov	r13, r12
     5d6:	76 01       	movw	r14, r12
     5d8:	01 e0       	ldi	r16, 0x01	; 1
     5da:	21 e0       	ldi	r18, 0x01	; 1
     5dc:	80 91 70 08 	lds	r24, 0x0870	; 0x800870 <_startMeasureEventGroup>
     5e0:	90 91 71 08 	lds	r25, 0x0871	; 0x800871 <_startMeasureEventGroup+0x1>
     5e4:	75 d6       	rcall	.+3306   	; 0x12d0 <xEventGroupWaitBits>
	_startMeasureBit, //bits it is interested in
	pdTRUE, //clears the bits
	pdTRUE, //waits for both bits to be set
	portMAX_DELAY); //wait

	if ((uxBits & (_startMeasureBit)) == (_startMeasureBit)) {
     5e6:	00 91 6c 08 	lds	r16, 0x086C	; 0x80086c <_startMeasureBit>
     5ea:	10 91 6d 08 	lds	r17, 0x086D	; 0x80086d <_startMeasureBit+0x1>
     5ee:	20 91 6e 08 	lds	r18, 0x086E	; 0x80086e <_startMeasureBit+0x2>
     5f2:	30 91 6f 08 	lds	r19, 0x086F	; 0x80086f <_startMeasureBit+0x3>
     5f6:	dc 01       	movw	r26, r24
     5f8:	cb 01       	movw	r24, r22
     5fa:	80 23       	and	r24, r16
     5fc:	91 23       	and	r25, r17
     5fe:	a2 23       	and	r26, r18
     600:	b3 23       	and	r27, r19
     602:	08 17       	cp	r16, r24
     604:	19 07       	cpc	r17, r25
     606:	2a 07       	cpc	r18, r26
     608:	3b 07       	cpc	r19, r27
     60a:	e1 f4       	brne	.+56     	; 0x644 <co2Reader_measure+0x96>

		mh_z19_take_meassuring();
     60c:	0e 94 32 27 	call	0x4e64	; 0x4e64 <mh_z19_take_meassuring>
		vTaskDelay(6);
     610:	66 e0       	ldi	r22, 0x06	; 6
     612:	70 e0       	ldi	r23, 0x00	; 0
     614:	80 e0       	ldi	r24, 0x00	; 0
     616:	90 e0       	ldi	r25, 0x00	; 0
     618:	0e 94 02 18 	call	0x3004	; 0x3004 <vTaskDelay>
		mh_z19_get_co2_ppm(&self->value);
     61c:	ce 01       	movw	r24, r28
     61e:	0e 94 61 27 	call	0x4ec2	; 0x4ec2 <mh_z19_get_co2_ppm>
		//printf("new co2 done bit set %u", self->value);
		
		//set done bit so that device knows measurement is done
		xEventGroupSetBits(_readyEventGroup, _readyBit);
     622:	40 91 66 08 	lds	r20, 0x0866	; 0x800866 <__data_end>
     626:	50 91 67 08 	lds	r21, 0x0867	; 0x800867 <__data_end+0x1>
     62a:	60 91 68 08 	lds	r22, 0x0868	; 0x800868 <__data_end+0x2>
     62e:	70 91 69 08 	lds	r23, 0x0869	; 0x800869 <__data_end+0x3>
     632:	80 91 6a 08 	lds	r24, 0x086A	; 0x80086a <_readyEventGroup>
     636:	90 91 6b 08 	lds	r25, 0x086B	; 0x80086b <_readyEventGroup+0x1>
     63a:	0a d7       	rcall	.+3604   	; 0x1450 <xEventGroupSetBits>
		printf("co2 done bit set\n");
     63c:	83 e8       	ldi	r24, 0x83	; 131
     63e:	92 e0       	ldi	r25, 0x02	; 2
     640:	0e 94 6c 31 	call	0x62d8	; 0x62d8 <puts>
	}
}
     644:	df 91       	pop	r29
     646:	cf 91       	pop	r28
     648:	1f 91       	pop	r17
     64a:	0f 91       	pop	r16
     64c:	ff 90       	pop	r15
     64e:	ef 90       	pop	r14
     650:	df 90       	pop	r13
     652:	cf 90       	pop	r12
     654:	08 95       	ret

00000656 <co2Reader_executeTask>:
typedef struct co2reader {
	uint16_t value;
	TaskHandle_t handleTask;
}co2reader;

void co2Reader_executeTask(void* self) {
     656:	ec 01       	movw	r28, r24
	for (;;) {
		co2Reader_measure((co2reader_t)self);
     658:	ce 01       	movw	r24, r28
     65a:	a9 df       	rcall	.-174    	; 0x5ae <co2Reader_measure>
     65c:	fd cf       	rjmp	.-6      	; 0x658 <co2Reader_executeTask+0x2>

0000065e <co2Reader_getCO2>:
	}
}

uint16_t co2Reader_getCO2(co2reader_t self) {
	return self->value;
}
     65e:	fc 01       	movw	r30, r24
     660:	80 81       	ld	r24, Z
     662:	91 81       	ldd	r25, Z+1	; 0x01
     664:	08 95       	ret

00000666 <configuration_create>:
//it is created only once, before starting the scheduler + will never be destroyed
	_working = calloc(1, sizeof(bool));
	_ventilation = calloc(1, sizeof(bool));

	//by default, device should work, not to ventilate
	_working = true;
     666:	21 e0       	ldi	r18, 0x01	; 1
     668:	20 93 75 08 	sts	0x0875, r18	; 0x800875 <_working>
	_ventilation = false;
     66c:	10 92 74 08 	sts	0x0874, r1	; 0x800874 <_ventilation>

	_semaphore = semaphore;
     670:	90 93 73 08 	sts	0x0873, r25	; 0x800873 <_semaphore+0x1>
     674:	80 93 72 08 	sts	0x0872, r24	; 0x800872 <_semaphore>
     678:	08 95       	ret

0000067a <configuration_setWorking>:
}

//if the semaphore is initialized, take it and give it back, if not, just do the work 
void configuration_setWorking(bool value) {
     67a:	0f 93       	push	r16
     67c:	cf 93       	push	r28
	if (_semaphore != NULL) {
     67e:	20 91 72 08 	lds	r18, 0x0872	; 0x800872 <_semaphore>
     682:	30 91 73 08 	lds	r19, 0x0873	; 0x800873 <_semaphore+0x1>
     686:	21 15       	cp	r18, r1
     688:	31 05       	cpc	r19, r1
     68a:	b1 f0       	breq	.+44     	; 0x6b8 <configuration_setWorking+0x3e>
     68c:	c8 2f       	mov	r28, r24
		xSemaphoreTake(_semaphore, portMAX_DELAY);
     68e:	4f ef       	ldi	r20, 0xFF	; 255
     690:	5f ef       	ldi	r21, 0xFF	; 255
     692:	ba 01       	movw	r22, r20
     694:	c9 01       	movw	r24, r18
     696:	0e 94 d6 10 	call	0x21ac	; 0x21ac <xQueueSemaphoreTake>
		_working = value;
     69a:	c0 93 75 08 	sts	0x0875, r28	; 0x800875 <_working>
		xSemaphoreGive(_semaphore);
     69e:	00 e0       	ldi	r16, 0x00	; 0
     6a0:	20 e0       	ldi	r18, 0x00	; 0
     6a2:	30 e0       	ldi	r19, 0x00	; 0
     6a4:	a9 01       	movw	r20, r18
     6a6:	60 e0       	ldi	r22, 0x00	; 0
     6a8:	70 e0       	ldi	r23, 0x00	; 0
     6aa:	80 91 72 08 	lds	r24, 0x0872	; 0x800872 <_semaphore>
     6ae:	90 91 73 08 	lds	r25, 0x0873	; 0x800873 <_semaphore+0x1>
     6b2:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <xQueueGenericSend>
     6b6:	02 c0       	rjmp	.+4      	; 0x6bc <configuration_setWorking+0x42>
	}
	else _working = value;
     6b8:	80 93 75 08 	sts	0x0875, r24	; 0x800875 <_working>
}
     6bc:	cf 91       	pop	r28
     6be:	0f 91       	pop	r16
     6c0:	08 95       	ret

000006c2 <configuration_getWorking>:

void configuration_getWorking(bool* working) {
     6c2:	0f 93       	push	r16
     6c4:	cf 93       	push	r28
     6c6:	df 93       	push	r29
	if (_semaphore != NULL) {
     6c8:	20 91 72 08 	lds	r18, 0x0872	; 0x800872 <_semaphore>
     6cc:	30 91 73 08 	lds	r19, 0x0873	; 0x800873 <_semaphore+0x1>
     6d0:	21 15       	cp	r18, r1
     6d2:	31 05       	cpc	r19, r1
     6d4:	b9 f0       	breq	.+46     	; 0x704 <configuration_getWorking+0x42>
     6d6:	ec 01       	movw	r28, r24
		xSemaphoreTake(_semaphore, portMAX_DELAY);
     6d8:	4f ef       	ldi	r20, 0xFF	; 255
     6da:	5f ef       	ldi	r21, 0xFF	; 255
     6dc:	ba 01       	movw	r22, r20
     6de:	c9 01       	movw	r24, r18
     6e0:	0e 94 d6 10 	call	0x21ac	; 0x21ac <xQueueSemaphoreTake>
		*working = _working;
     6e4:	80 91 75 08 	lds	r24, 0x0875	; 0x800875 <_working>
     6e8:	88 83       	st	Y, r24
		xSemaphoreGive(_semaphore);
     6ea:	00 e0       	ldi	r16, 0x00	; 0
     6ec:	20 e0       	ldi	r18, 0x00	; 0
     6ee:	30 e0       	ldi	r19, 0x00	; 0
     6f0:	a9 01       	movw	r20, r18
     6f2:	60 e0       	ldi	r22, 0x00	; 0
     6f4:	70 e0       	ldi	r23, 0x00	; 0
     6f6:	80 91 72 08 	lds	r24, 0x0872	; 0x800872 <_semaphore>
     6fa:	90 91 73 08 	lds	r25, 0x0873	; 0x800873 <_semaphore+0x1>
     6fe:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <xQueueGenericSend>
     702:	04 c0       	rjmp	.+8      	; 0x70c <configuration_getWorking+0x4a>
	}
	else *working = _working;
     704:	20 91 75 08 	lds	r18, 0x0875	; 0x800875 <_working>
     708:	fc 01       	movw	r30, r24
     70a:	20 83       	st	Z, r18
}
     70c:	df 91       	pop	r29
     70e:	cf 91       	pop	r28
     710:	0f 91       	pop	r16
     712:	08 95       	ret

00000714 <configuration_setVentilation>:

void configuration_setVentilation(bool value) {
     714:	0f 93       	push	r16
     716:	cf 93       	push	r28
	if (_semaphore != NULL) {
     718:	20 91 72 08 	lds	r18, 0x0872	; 0x800872 <_semaphore>
     71c:	30 91 73 08 	lds	r19, 0x0873	; 0x800873 <_semaphore+0x1>
     720:	21 15       	cp	r18, r1
     722:	31 05       	cpc	r19, r1
     724:	b1 f0       	breq	.+44     	; 0x752 <configuration_setVentilation+0x3e>
     726:	c8 2f       	mov	r28, r24
		xSemaphoreTake(_semaphore, portMAX_DELAY);
     728:	4f ef       	ldi	r20, 0xFF	; 255
     72a:	5f ef       	ldi	r21, 0xFF	; 255
     72c:	ba 01       	movw	r22, r20
     72e:	c9 01       	movw	r24, r18
     730:	0e 94 d6 10 	call	0x21ac	; 0x21ac <xQueueSemaphoreTake>
		_ventilation = value;
     734:	c0 93 74 08 	sts	0x0874, r28	; 0x800874 <_ventilation>
		xSemaphoreGive(_semaphore);
     738:	00 e0       	ldi	r16, 0x00	; 0
     73a:	20 e0       	ldi	r18, 0x00	; 0
     73c:	30 e0       	ldi	r19, 0x00	; 0
     73e:	a9 01       	movw	r20, r18
     740:	60 e0       	ldi	r22, 0x00	; 0
     742:	70 e0       	ldi	r23, 0x00	; 0
     744:	80 91 72 08 	lds	r24, 0x0872	; 0x800872 <_semaphore>
     748:	90 91 73 08 	lds	r25, 0x0873	; 0x800873 <_semaphore+0x1>
     74c:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <xQueueGenericSend>
     750:	02 c0       	rjmp	.+4      	; 0x756 <configuration_setVentilation+0x42>
	}
	else _ventilation = value;
     752:	80 93 74 08 	sts	0x0874, r24	; 0x800874 <_ventilation>
}
     756:	cf 91       	pop	r28
     758:	0f 91       	pop	r16
     75a:	08 95       	ret

0000075c <configuration_getVentilation>:

void configuration_getVentilation(bool* ventilation) {
     75c:	0f 93       	push	r16
     75e:	cf 93       	push	r28
     760:	df 93       	push	r29
	if (_semaphore != NULL) {
     762:	20 91 72 08 	lds	r18, 0x0872	; 0x800872 <_semaphore>
     766:	30 91 73 08 	lds	r19, 0x0873	; 0x800873 <_semaphore+0x1>
     76a:	21 15       	cp	r18, r1
     76c:	31 05       	cpc	r19, r1
     76e:	b9 f0       	breq	.+46     	; 0x79e <configuration_getVentilation+0x42>
     770:	ec 01       	movw	r28, r24
		xSemaphoreTake(_semaphore, portMAX_DELAY);
     772:	4f ef       	ldi	r20, 0xFF	; 255
     774:	5f ef       	ldi	r21, 0xFF	; 255
     776:	ba 01       	movw	r22, r20
     778:	c9 01       	movw	r24, r18
     77a:	0e 94 d6 10 	call	0x21ac	; 0x21ac <xQueueSemaphoreTake>
		*ventilation = _ventilation;
     77e:	80 91 74 08 	lds	r24, 0x0874	; 0x800874 <_ventilation>
     782:	88 83       	st	Y, r24
		xSemaphoreGive(_semaphore);
     784:	00 e0       	ldi	r16, 0x00	; 0
     786:	20 e0       	ldi	r18, 0x00	; 0
     788:	30 e0       	ldi	r19, 0x00	; 0
     78a:	a9 01       	movw	r20, r18
     78c:	60 e0       	ldi	r22, 0x00	; 0
     78e:	70 e0       	ldi	r23, 0x00	; 0
     790:	80 91 72 08 	lds	r24, 0x0872	; 0x800872 <_semaphore>
     794:	90 91 73 08 	lds	r25, 0x0873	; 0x800873 <_semaphore+0x1>
     798:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <xQueueGenericSend>
     79c:	04 c0       	rjmp	.+8      	; 0x7a6 <configuration_getVentilation+0x4a>
	}
	else *ventilation = _ventilation;
     79e:	20 91 74 08 	lds	r18, 0x0874	; 0x800874 <_ventilation>
     7a2:	fc 01       	movw	r30, r24
     7a4:	20 83       	st	Z, r18
     7a6:	df 91       	pop	r29
     7a8:	cf 91       	pop	r28
     7aa:	0f 91       	pop	r16
     7ac:	08 95       	ret

000007ae <currentCondition_create>:
	if (self != NULL)
	self->soundData = value;
}

void currentCondition_destroy(currentCondition_t self) {
	vPortFree(self);
     7ae:	68 e0       	ldi	r22, 0x08	; 8
     7b0:	70 e0       	ldi	r23, 0x00	; 0
     7b2:	81 e0       	ldi	r24, 0x01	; 1
     7b4:	90 e0       	ldi	r25, 0x00	; 0
     7b6:	0e 94 66 2f 	call	0x5ecc	; 0x5ecc <calloc>
     7ba:	00 97       	sbiw	r24, 0x00	; 0
     7bc:	49 f0       	breq	.+18     	; 0x7d0 <currentCondition_create+0x22>
     7be:	fc 01       	movw	r30, r24
     7c0:	13 82       	std	Z+3, r1	; 0x03
     7c2:	12 82       	std	Z+2, r1	; 0x02
     7c4:	15 82       	std	Z+5, r1	; 0x05
     7c6:	14 82       	std	Z+4, r1	; 0x04
     7c8:	11 82       	std	Z+1, r1	; 0x01
     7ca:	10 82       	st	Z, r1
     7cc:	17 82       	std	Z+7, r1	; 0x07
     7ce:	16 82       	std	Z+6, r1	; 0x06
     7d0:	08 95       	ret

000007d2 <currentCondition_setCO2>:
     7d2:	00 97       	sbiw	r24, 0x00	; 0
     7d4:	19 f0       	breq	.+6      	; 0x7dc <currentCondition_setCO2+0xa>
     7d6:	fc 01       	movw	r30, r24
     7d8:	71 83       	std	Z+1, r23	; 0x01
     7da:	60 83       	st	Z, r22
     7dc:	08 95       	ret

000007de <currentCondition_setHumidity>:
     7de:	00 97       	sbiw	r24, 0x00	; 0
     7e0:	19 f0       	breq	.+6      	; 0x7e8 <currentCondition_setHumidity+0xa>
     7e2:	fc 01       	movw	r30, r24
     7e4:	75 83       	std	Z+5, r23	; 0x05
     7e6:	64 83       	std	Z+4, r22	; 0x04
     7e8:	08 95       	ret

000007ea <currentCondition_setTemperature>:
     7ea:	00 97       	sbiw	r24, 0x00	; 0
     7ec:	19 f0       	breq	.+6      	; 0x7f4 <currentCondition_setTemperature+0xa>
     7ee:	fc 01       	movw	r30, r24
     7f0:	73 83       	std	Z+3, r23	; 0x03
     7f2:	62 83       	std	Z+2, r22	; 0x02
     7f4:	08 95       	ret

000007f6 <currentCondition_setSound>:
     7f6:	00 97       	sbiw	r24, 0x00	; 0
     7f8:	19 f0       	breq	.+6      	; 0x800 <currentCondition_setSound+0xa>
     7fa:	fc 01       	movw	r30, r24
     7fc:	77 83       	std	Z+7, r23	; 0x07
     7fe:	66 83       	std	Z+6, r22	; 0x06
     800:	08 95       	ret

00000802 <getcurrentConditionPayload>:
}
lora_payload_t getcurrentConditionPayload(currentCondition_t self)
{
     802:	fc 01       	movw	r30, r24
     804:	db 01       	movw	r26, r22
	lora_payload_t payload;
	payload.port_no = 1;
	payload.len = 8;
	
	int16_t tempData = self->temperatureData;
     806:	12 96       	adiw	r26, 0x02	; 2
     808:	6c 91       	ld	r22, X
     80a:	12 97       	sbiw	r26, 0x02	; 2
     80c:	13 96       	adiw	r26, 0x03	; 3
     80e:	7c 91       	ld	r23, X
     810:	13 97       	sbiw	r26, 0x03	; 3
	
	payload.bytes[0] = tempData >> 8;
	payload.bytes[1] = tempData & 0xFF;

	payload.bytes[2] = self->humidityData >> 8;
     812:	14 96       	adiw	r26, 0x04	; 4
     814:	4c 91       	ld	r20, X
     816:	14 97       	sbiw	r26, 0x04	; 4
     818:	15 96       	adiw	r26, 0x05	; 5
     81a:	5c 91       	ld	r21, X
     81c:	15 97       	sbiw	r26, 0x05	; 5
	payload.bytes[3] = self->humidityData & 0xFF;
	
	payload.bytes[4] = self->co2Data >> 8;
     81e:	2c 91       	ld	r18, X
     820:	11 96       	adiw	r26, 0x01	; 1
     822:	3c 91       	ld	r19, X
     824:	11 97       	sbiw	r26, 0x01	; 1
	payload.bytes[5] = self->co2Data & 0xFF;
	
	payload.bytes[6] = self->soundData >> 8;
     826:	16 96       	adiw	r26, 0x06	; 6
     828:	8c 91       	ld	r24, X
     82a:	16 97       	sbiw	r26, 0x06	; 6
     82c:	17 96       	adiw	r26, 0x07	; 7
     82e:	9c 91       	ld	r25, X
	payload.bytes[7] = self->soundData & 0xFF;
	
	return payload;
     830:	a1 e0       	ldi	r26, 0x01	; 1
     832:	a0 83       	st	Z, r26
     834:	a8 e0       	ldi	r26, 0x08	; 8
     836:	a1 83       	std	Z+1, r26	; 0x01
     838:	72 83       	std	Z+2, r23	; 0x02
     83a:	63 83       	std	Z+3, r22	; 0x03
     83c:	54 83       	std	Z+4, r21	; 0x04
     83e:	45 83       	std	Z+5, r20	; 0x05
     840:	36 83       	std	Z+6, r19	; 0x06
     842:	27 83       	std	Z+7, r18	; 0x07
     844:	90 87       	std	Z+8, r25	; 0x08
     846:	81 87       	std	Z+9, r24	; 0x09
	
}
     848:	cf 01       	movw	r24, r30
     84a:	08 95       	ret

0000084c <getSimplePayload>:
	
	uint16_t one = 0;
	payload.bytes[0] = one >> 8;
	payload.bytes[1] = one & 0xFF;
	
	return payload;
     84c:	21 e0       	ldi	r18, 0x01	; 1
     84e:	fc 01       	movw	r30, r24
     850:	20 83       	st	Z, r18
     852:	22 e0       	ldi	r18, 0x02	; 2
     854:	21 83       	std	Z+1, r18	; 0x01
     856:	12 82       	std	Z+2, r1	; 0x02
     858:	13 82       	std	Z+3, r1	; 0x03
     85a:	08 95       	ret

0000085c <device_create>:
		//vTaskDelay(5000);
	}
}

device_t device_create(UBaseType_t priority, UBaseType_t stack, EventGroupHandle_t startMeasureEventGroup, EventBits_t startMeasureBit,
EventGroupHandle_t readyEventGroup, EventBits_t readyBit, co2reader_t co2Reader, humAndTempReader_t humAndTempReader,soundReader_t soundReader, MessageBufferHandle_t uplinkMessageBuffer){
     85c:	2f 92       	push	r2
     85e:	3f 92       	push	r3
     860:	4f 92       	push	r4
     862:	5f 92       	push	r5
     864:	6f 92       	push	r6
     866:	7f 92       	push	r7
     868:	8f 92       	push	r8
     86a:	9f 92       	push	r9
     86c:	af 92       	push	r10
     86e:	bf 92       	push	r11
     870:	cf 92       	push	r12
     872:	df 92       	push	r13
     874:	ef 92       	push	r14
     876:	ff 92       	push	r15
     878:	0f 93       	push	r16
     87a:	1f 93       	push	r17
     87c:	cf 93       	push	r28
     87e:	df 93       	push	r29
     880:	00 d0       	rcall	.+0      	; 0x882 <device_create+0x26>
     882:	1f 92       	push	r1
     884:	cd b7       	in	r28, 0x3d	; 61
     886:	de b7       	in	r29, 0x3e	; 62
     888:	28 2e       	mov	r2, r24
     88a:	36 2e       	mov	r3, r22
     88c:	5c 83       	std	Y+4, r21	; 0x04
     88e:	4b 83       	std	Y+3, r20	; 0x03
     890:	28 01       	movw	r4, r16
     892:	39 01       	movw	r6, r18

	device_t _new_device = calloc(1, sizeof(device));
     894:	6a e0       	ldi	r22, 0x0A	; 10
     896:	70 e0       	ldi	r23, 0x00	; 0
     898:	81 e0       	ldi	r24, 0x01	; 1
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	0e 94 66 2f 	call	0x5ecc	; 0x5ecc <calloc>
     8a0:	9a 83       	std	Y+2, r25	; 0x02
     8a2:	89 83       	std	Y+1, r24	; 0x01
	if (_new_device == NULL)
     8a4:	00 97       	sbiw	r24, 0x00	; 0
     8a6:	09 f4       	brne	.+2      	; 0x8aa <device_create+0x4e>
     8a8:	42 c0       	rjmp	.+132    	; 0x92e <device_create+0xd2>
		return NULL;

	_new_device->co2reader = co2Reader;
     8aa:	fc 01       	movw	r30, r24
     8ac:	91 82       	std	Z+1, r9	; 0x01
     8ae:	80 82       	st	Z, r8
	_new_device->humAndTempReader = humAndTempReader;
     8b0:	8a 8d       	ldd	r24, Y+26	; 0x1a
     8b2:	9b 8d       	ldd	r25, Y+27	; 0x1b
     8b4:	93 83       	std	Z+3, r25	; 0x03
     8b6:	82 83       	std	Z+2, r24	; 0x02
	_new_device->soundReader=soundReader;
     8b8:	8c 8d       	ldd	r24, Y+28	; 0x1c
     8ba:	9d 8d       	ldd	r25, Y+29	; 0x1d
     8bc:	95 83       	std	Z+5, r25	; 0x05
     8be:	84 83       	std	Z+4, r24	; 0x04
	_new_device->currentCondition = currentCondition_create();
     8c0:	76 df       	rcall	.-276    	; 0x7ae <currentCondition_create>
     8c2:	e9 81       	ldd	r30, Y+1	; 0x01
     8c4:	fa 81       	ldd	r31, Y+2	; 0x02
     8c6:	97 83       	std	Z+7, r25	; 0x07
     8c8:	86 83       	std	Z+6, r24	; 0x06

	_startMeasureEventGroup = startMeasureEventGroup;
     8ca:	8b 81       	ldd	r24, Y+3	; 0x03
     8cc:	9c 81       	ldd	r25, Y+4	; 0x04
     8ce:	90 93 99 08 	sts	0x0899, r25	; 0x800899 <_startMeasureEventGroup+0x1>
     8d2:	80 93 98 08 	sts	0x0898, r24	; 0x800898 <_startMeasureEventGroup>
	_startMeasureBit = startMeasureBit;
     8d6:	40 92 94 08 	sts	0x0894, r4	; 0x800894 <_startMeasureBit>
     8da:	50 92 95 08 	sts	0x0895, r5	; 0x800895 <_startMeasureBit+0x1>
     8de:	60 92 96 08 	sts	0x0896, r6	; 0x800896 <_startMeasureBit+0x2>
     8e2:	70 92 97 08 	sts	0x0897, r7	; 0x800897 <_startMeasureBit+0x3>

	_readyEventGroup = readyEventGroup;
     8e6:	f0 92 93 08 	sts	0x0893, r15	; 0x800893 <_readyEventGroup+0x1>
     8ea:	e0 92 92 08 	sts	0x0892, r14	; 0x800892 <_readyEventGroup>
	_readyBit = readyBit;
     8ee:	a0 92 8e 08 	sts	0x088E, r10	; 0x80088e <_readyBit>
     8f2:	b0 92 8f 08 	sts	0x088F, r11	; 0x80088f <_readyBit+0x1>
     8f6:	c0 92 90 08 	sts	0x0890, r12	; 0x800890 <_readyBit+0x2>
     8fa:	d0 92 91 08 	sts	0x0891, r13	; 0x800891 <_readyBit+0x3>
	
	_uplinkmessageBuffer=uplinkMessageBuffer;
     8fe:	8e 8d       	ldd	r24, Y+30	; 0x1e
     900:	9f 8d       	ldd	r25, Y+31	; 0x1f
     902:	90 93 8d 08 	sts	0x088D, r25	; 0x80088d <_uplinkmessageBuffer+0x1>
     906:	80 93 8c 08 	sts	0x088C, r24	; 0x80088c <_uplinkmessageBuffer>

	xTaskCreate(
     90a:	43 2d       	mov	r20, r3
     90c:	50 e0       	ldi	r21, 0x00	; 0
     90e:	7f 01       	movw	r14, r30
     910:	98 e0       	ldi	r25, 0x08	; 8
     912:	e9 0e       	add	r14, r25
     914:	f1 1c       	adc	r15, r1
     916:	02 2d       	mov	r16, r2
     918:	9f 01       	movw	r18, r30
     91a:	64 e9       	ldi	r22, 0x94	; 148
     91c:	72 e0       	ldi	r23, 0x02	; 2
     91e:	84 ec       	ldi	r24, 0xC4	; 196
     920:	95 e0       	ldi	r25, 0x05	; 5
     922:	0e 94 42 15 	call	0x2a84	; 0x2a84 <xTaskCreate>
		_new_device,
		priority,
		&_new_device->handleTask
	);

	printf("device up\n");
     926:	8b e9       	ldi	r24, 0x9B	; 155
     928:	92 e0       	ldi	r25, 0x02	; 2
     92a:	0e 94 6c 31 	call	0x62d8	; 0x62d8 <puts>

	return _new_device;
}
     92e:	89 81       	ldd	r24, Y+1	; 0x01
     930:	9a 81       	ldd	r25, Y+2	; 0x02
     932:	0f 90       	pop	r0
     934:	0f 90       	pop	r0
     936:	0f 90       	pop	r0
     938:	0f 90       	pop	r0
     93a:	df 91       	pop	r29
     93c:	cf 91       	pop	r28
     93e:	1f 91       	pop	r17
     940:	0f 91       	pop	r16
     942:	ff 90       	pop	r15
     944:	ef 90       	pop	r14
     946:	df 90       	pop	r13
     948:	cf 90       	pop	r12
     94a:	bf 90       	pop	r11
     94c:	af 90       	pop	r10
     94e:	9f 90       	pop	r9
     950:	8f 90       	pop	r8
     952:	7f 90       	pop	r7
     954:	6f 90       	pop	r6
     956:	5f 90       	pop	r5
     958:	4f 90       	pop	r4
     95a:	3f 90       	pop	r3
     95c:	2f 90       	pop	r2
     95e:	08 95       	ret

00000960 <device_startMeasuring>:




void device_startMeasuring(device_t self) {
     960:	af 92       	push	r10
     962:	bf 92       	push	r11
     964:	cf 92       	push	r12
     966:	df 92       	push	r13
     968:	ef 92       	push	r14
     96a:	ff 92       	push	r15
     96c:	0f 93       	push	r16
     96e:	1f 93       	push	r17
     970:	cf 93       	push	r28
     972:	df 93       	push	r29
     974:	cd b7       	in	r28, 0x3d	; 61
     976:	de b7       	in	r29, 0x3e	; 62
     978:	66 97       	sbiw	r28, 0x16	; 22
     97a:	0f b6       	in	r0, 0x3f	; 63
     97c:	f8 94       	cli
     97e:	de bf       	out	0x3e, r29	; 62
     980:	0f be       	out	0x3f, r0	; 63
     982:	cd bf       	out	0x3d, r28	; 61
     984:	5c 01       	movw	r10, r24
	//we should first check if device is on, get that from lora and add new eventBit 
	
	bool* works = pvPortMalloc(sizeof(bool));
     986:	81 e0       	ldi	r24, 0x01	; 1
     988:	90 e0       	ldi	r25, 0x00	; 0
     98a:	48 d6       	rcall	.+3216   	; 0x161c <pvPortMalloc>
     98c:	8c 01       	movw	r16, r24
	configuration_getWorking(works);
     98e:	99 de       	rcall	.-718    	; 0x6c2 <configuration_getWorking>
     990:	f8 01       	movw	r30, r16
	if (*works == true)
     992:	80 81       	ld	r24, Z
     994:	88 23       	and	r24, r24
     996:	09 f4       	brne	.+2      	; 0x99a <device_startMeasuring+0x3a>
     998:	c4 c0       	rjmp	.+392    	; 0xb22 <device_startMeasuring+0x1c2>
     99a:	81 e0       	ldi	r24, 0x01	; 1
	{

		bool* ventilate = pvPortMalloc(sizeof(bool));
     99c:	90 e0       	ldi	r25, 0x00	; 0
     99e:	3e d6       	rcall	.+3196   	; 0x161c <pvPortMalloc>
     9a0:	8c 01       	movw	r16, r24
		configuration_getVentilation(ventilate);
     9a2:	dc de       	rcall	.-584    	; 0x75c <configuration_getVentilation>
     9a4:	f8 01       	movw	r30, r16
		if(*ventilate == true)
     9a6:	80 81       	ld	r24, Z
     9a8:	88 23       	and	r24, r24
		{
			servo_open();
     9aa:	11 f0       	breq	.+4      	; 0x9b0 <device_startMeasuring+0x50>
     9ac:	7b d2       	rcall	.+1270   	; 0xea4 <servo_open>
     9ae:	01 c0       	rjmp	.+2      	; 0x9b2 <device_startMeasuring+0x52>
		} 
		else
		{
			servo_close();
     9b0:	7e d2       	rcall	.+1276   	; 0xeae <servo_close>
     9b2:	40 91 94 08 	lds	r20, 0x0894	; 0x800894 <_startMeasureBit>
		}

	////tell sensors to start meassuring 
	xEventGroupSetBits(_startMeasureEventGroup, _startMeasureBit);
     9b6:	50 91 95 08 	lds	r21, 0x0895	; 0x800895 <_startMeasureBit+0x1>
     9ba:	60 91 96 08 	lds	r22, 0x0896	; 0x800896 <_startMeasureBit+0x2>
     9be:	70 91 97 08 	lds	r23, 0x0897	; 0x800897 <_startMeasureBit+0x3>
     9c2:	80 91 98 08 	lds	r24, 0x0898	; 0x800898 <_startMeasureEventGroup>
     9c6:	90 91 99 08 	lds	r25, 0x0899	; 0x800899 <_startMeasureEventGroup+0x1>
     9ca:	42 d5       	rcall	.+2692   	; 0x1450 <xEventGroupSetBits>
     9cc:	85 ea       	ldi	r24, 0xA5	; 165
	printf("device has set bits\n");
     9ce:	92 e0       	ldi	r25, 0x02	; 2
     9d0:	0e 94 6c 31 	call	0x62d8	; 0x62d8 <puts>
     9d4:	40 91 8e 08 	lds	r20, 0x088E	; 0x80088e <_readyBit>

	//wait for sensors to read data
	EventBits_t uxBits = xEventGroupWaitBits(_readyEventGroup, //eventGroup it is interested in
     9d8:	50 91 8f 08 	lds	r21, 0x088F	; 0x80088f <_readyBit+0x1>
     9dc:	60 91 90 08 	lds	r22, 0x0890	; 0x800890 <_readyBit+0x2>
     9e0:	70 91 91 08 	lds	r23, 0x0891	; 0x800891 <_readyBit+0x3>
     9e4:	cc 24       	eor	r12, r12
     9e6:	ca 94       	dec	r12
     9e8:	dc 2c       	mov	r13, r12
     9ea:	76 01       	movw	r14, r12
     9ec:	01 e0       	ldi	r16, 0x01	; 1
     9ee:	21 e0       	ldi	r18, 0x01	; 1
     9f0:	80 91 92 08 	lds	r24, 0x0892	; 0x800892 <_readyEventGroup>
     9f4:	90 91 93 08 	lds	r25, 0x0893	; 0x800893 <_readyEventGroup+0x1>
     9f8:	6b d4       	rcall	.+2262   	; 0x12d0 <xEventGroupWaitBits>
     9fa:	00 91 8e 08 	lds	r16, 0x088E	; 0x80088e <_readyBit>
		_readyBit, //bits it is interested in
		pdTRUE, //clears the bits 
		pdTRUE, //waits for both bits to be set
		portMAX_DELAY); //waits forever if needed
	
	if ((uxBits & (_readyBit)) == (_readyBit)) {
     9fe:	10 91 8f 08 	lds	r17, 0x088F	; 0x80088f <_readyBit+0x1>
     a02:	20 91 90 08 	lds	r18, 0x0890	; 0x800890 <_readyBit+0x2>
     a06:	30 91 91 08 	lds	r19, 0x0891	; 0x800891 <_readyBit+0x3>
     a0a:	dc 01       	movw	r26, r24
     a0c:	cb 01       	movw	r24, r22
     a0e:	80 23       	and	r24, r16
     a10:	91 23       	and	r25, r17
     a12:	a2 23       	and	r26, r18
     a14:	b3 23       	and	r27, r19
     a16:	08 17       	cp	r16, r24
     a18:	19 07       	cpc	r17, r25
     a1a:	2a 07       	cpc	r18, r26
     a1c:	3b 07       	cpc	r19, r27
     a1e:	09 f0       	breq	.+2      	; 0xa22 <device_startMeasuring+0xc2>
     a20:	a2 c0       	rjmp	.+324    	; 0xb66 <device_startMeasuring+0x206>
		currentCondition_setCO2(self->currentCondition,co2Reader_getCO2(self->co2reader));
     a22:	f5 01       	movw	r30, r10
     a24:	80 81       	ld	r24, Z
     a26:	91 81       	ldd	r25, Z+1	; 0x01
     a28:	1a de       	rcall	.-972    	; 0x65e <co2Reader_getCO2>
     a2a:	bc 01       	movw	r22, r24
     a2c:	f5 01       	movw	r30, r10
     a2e:	86 81       	ldd	r24, Z+6	; 0x06
     a30:	97 81       	ldd	r25, Z+7	; 0x07
     a32:	cf de       	rcall	.-610    	; 0x7d2 <currentCondition_setCO2>
		
		currentCondition_setSound(self->currentCondition,soundReader_getSound(self->soundReader));
     a34:	f5 01       	movw	r30, r10
     a36:	84 81       	ldd	r24, Z+4	; 0x04
     a38:	95 81       	ldd	r25, Z+5	; 0x05
     a3a:	f2 d2       	rcall	.+1508   	; 0x1020 <soundReader_getSound>
     a3c:	bc 01       	movw	r22, r24
     a3e:	f5 01       	movw	r30, r10
     a40:	86 81       	ldd	r24, Z+6	; 0x06
     a42:	97 81       	ldd	r25, Z+7	; 0x07
     a44:	d8 de       	rcall	.-592    	; 0x7f6 <currentCondition_setSound>
		
		currentCondition_setTemperature(self->currentCondition,humAndTempReader_getTemperature(self->humAndTempReader));
     a46:	f5 01       	movw	r30, r10
     a48:	82 81       	ldd	r24, Z+2	; 0x02
     a4a:	93 81       	ldd	r25, Z+3	; 0x03
     a4c:	24 d2       	rcall	.+1096   	; 0xe96 <humAndTempReader_getTemperature>
     a4e:	bc 01       	movw	r22, r24
     a50:	f5 01       	movw	r30, r10
     a52:	86 81       	ldd	r24, Z+6	; 0x06
     a54:	97 81       	ldd	r25, Z+7	; 0x07
     a56:	c9 de       	rcall	.-622    	; 0x7ea <currentCondition_setTemperature>
		
		currentCondition_setHumidity(self->currentCondition,humAndTempReader_getHumidity(self->humAndTempReader));
     a58:	f5 01       	movw	r30, r10
     a5a:	82 81       	ldd	r24, Z+2	; 0x02
     a5c:	93 81       	ldd	r25, Z+3	; 0x03
     a5e:	17 d2       	rcall	.+1070   	; 0xe8e <humAndTempReader_getHumidity>
     a60:	bc 01       	movw	r22, r24
     a62:	f5 01       	movw	r30, r10
     a64:	86 81       	ldd	r24, Z+6	; 0x06
     a66:	97 81       	ldd	r25, Z+7	; 0x07
     a68:	ba de       	rcall	.-652    	; 0x7de <currentCondition_setHumidity>
     a6a:	89 eb       	ldi	r24, 0xB9	; 185
		
		printf("device got done bit\n");
     a6c:	92 e0       	ldi	r25, 0x02	; 2
     a6e:	0e 94 6c 31 	call	0x62d8	; 0x62d8 <puts>
		
		printf("CO2 is: %u\n", co2Reader_getCO2(self->co2reader));
     a72:	f5 01       	movw	r30, r10
     a74:	80 81       	ld	r24, Z
     a76:	91 81       	ldd	r25, Z+1	; 0x01
     a78:	f2 dd       	rcall	.-1052   	; 0x65e <co2Reader_getCO2>
     a7a:	9f 93       	push	r25
     a7c:	8f 93       	push	r24
     a7e:	8d ec       	ldi	r24, 0xCD	; 205
     a80:	92 e0       	ldi	r25, 0x02	; 2
     a82:	9f 93       	push	r25
     a84:	8f 93       	push	r24
     a86:	0e 94 59 31 	call	0x62b2	; 0x62b2 <printf>
		printf("Temperature is: %d\n", humAndTempReader_getTemperature(self->humAndTempReader));
     a8a:	f5 01       	movw	r30, r10
     a8c:	82 81       	ldd	r24, Z+2	; 0x02
     a8e:	93 81       	ldd	r25, Z+3	; 0x03
     a90:	02 d2       	rcall	.+1028   	; 0xe96 <humAndTempReader_getTemperature>
     a92:	9f 93       	push	r25
     a94:	8f 93       	push	r24
     a96:	89 ed       	ldi	r24, 0xD9	; 217
     a98:	92 e0       	ldi	r25, 0x02	; 2
     a9a:	9f 93       	push	r25
     a9c:	8f 93       	push	r24
     a9e:	0e 94 59 31 	call	0x62b2	; 0x62b2 <printf>
		printf("Humidity is: %u\n", humAndTempReader_getHumidity(self->humAndTempReader));
     aa2:	f5 01       	movw	r30, r10
     aa4:	82 81       	ldd	r24, Z+2	; 0x02
     aa6:	93 81       	ldd	r25, Z+3	; 0x03
     aa8:	f2 d1       	rcall	.+996    	; 0xe8e <humAndTempReader_getHumidity>
     aaa:	9f 93       	push	r25
     aac:	8f 93       	push	r24
     aae:	8d ee       	ldi	r24, 0xED	; 237
     ab0:	92 e0       	ldi	r25, 0x02	; 2
     ab2:	9f 93       	push	r25
     ab4:	8f 93       	push	r24
     ab6:	0e 94 59 31 	call	0x62b2	; 0x62b2 <printf>
		printf("Sound is: %u\n", soundReader_getSound(self->soundReader));
     aba:	f5 01       	movw	r30, r10
     abc:	84 81       	ldd	r24, Z+4	; 0x04
     abe:	95 81       	ldd	r25, Z+5	; 0x05
     ac0:	af d2       	rcall	.+1374   	; 0x1020 <soundReader_getSound>
     ac2:	9f 93       	push	r25
     ac4:	8f 93       	push	r24
     ac6:	8e ef       	ldi	r24, 0xFE	; 254
     ac8:	92 e0       	ldi	r25, 0x02	; 2
     aca:	9f 93       	push	r25
     acc:	8f 93       	push	r24
     ace:	0e 94 59 31 	call	0x62b2	; 0x62b2 <printf>
     ad2:	f5 01       	movw	r30, r10
		
		/*Perhaps loraPayload is not a good idea to be here*/
		_uplink_payload = getcurrentConditionPayload(self->currentCondition);
     ad4:	66 81       	ldd	r22, Z+6	; 0x06
     ad6:	77 81       	ldd	r23, Z+7	; 0x07
     ad8:	ce 01       	movw	r24, r28
     ada:	01 96       	adiw	r24, 0x01	; 1
     adc:	92 de       	rcall	.-732    	; 0x802 <getcurrentConditionPayload>
     ade:	86 e1       	ldi	r24, 0x16	; 22
     ae0:	fe 01       	movw	r30, r28
     ae2:	31 96       	adiw	r30, 0x01	; 1
     ae4:	a6 e7       	ldi	r26, 0x76	; 118
     ae6:	b8 e0       	ldi	r27, 0x08	; 8
     ae8:	01 90       	ld	r0, Z+
     aea:	0d 92       	st	X+, r0
     aec:	8a 95       	dec	r24
     aee:	e1 f7       	brne	.-8      	; 0xae8 <device_startMeasuring+0x188>
     af0:	0f ef       	ldi	r16, 0xFF	; 255
     af2:	1f ef       	ldi	r17, 0xFF	; 255
		
		xMessageBufferSend(_uplinkmessageBuffer,(void*) &_uplink_payload,sizeof(_uplink_payload),portMAX_DELAY);
     af4:	98 01       	movw	r18, r16
     af6:	46 e1       	ldi	r20, 0x16	; 22
     af8:	50 e0       	ldi	r21, 0x00	; 0
     afa:	66 e7       	ldi	r22, 0x76	; 118
     afc:	78 e0       	ldi	r23, 0x08	; 8
     afe:	80 91 8c 08 	lds	r24, 0x088C	; 0x80088c <_uplinkmessageBuffer>
     b02:	90 91 8d 08 	lds	r25, 0x088D	; 0x80088d <_uplinkmessageBuffer+0x1>
     b06:	0e 94 12 13 	call	0x2624	; 0x2624 <xStreamBufferSend>
     b0a:	60 ed       	ldi	r22, 0xD0	; 208
     b0c:	77 e0       	ldi	r23, 0x07	; 7
		vTaskDelay(2000);
     b0e:	80 e0       	ldi	r24, 0x00	; 0
     b10:	90 e0       	ldi	r25, 0x00	; 0
     b12:	0e 94 02 18 	call	0x3004	; 0x3004 <vTaskDelay>
     b16:	0f b6       	in	r0, 0x3f	; 63
     b18:	f8 94       	cli
     b1a:	de bf       	out	0x3e, r29	; 62
     b1c:	0f be       	out	0x3f, r0	; 63
     b1e:	cd bf       	out	0x3d, r28	; 61
     b20:	22 c0       	rjmp	.+68     	; 0xb66 <device_startMeasuring+0x206>
     b22:	68 e8       	ldi	r22, 0x88	; 136
	//if the device is not on, wait a bit and check if anything is changed
	}
	else
	{
		//put 30 000 for 5 mins
		vTaskDelay(5000);
     b24:	73 e1       	ldi	r23, 0x13	; 19
     b26:	80 e0       	ldi	r24, 0x00	; 0
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	0e 94 02 18 	call	0x3004	; 0x3004 <vTaskDelay>
     b2e:	f5 01       	movw	r30, r10
		_uplink_payload = getSimplePayload(self->currentCondition);
     b30:	66 81       	ldd	r22, Z+6	; 0x06
     b32:	77 81       	ldd	r23, Z+7	; 0x07
     b34:	ce 01       	movw	r24, r28
     b36:	01 96       	adiw	r24, 0x01	; 1
     b38:	89 de       	rcall	.-750    	; 0x84c <getSimplePayload>
     b3a:	86 e1       	ldi	r24, 0x16	; 22
     b3c:	fe 01       	movw	r30, r28
     b3e:	31 96       	adiw	r30, 0x01	; 1
     b40:	a6 e7       	ldi	r26, 0x76	; 118
     b42:	b8 e0       	ldi	r27, 0x08	; 8
     b44:	01 90       	ld	r0, Z+
     b46:	0d 92       	st	X+, r0
     b48:	8a 95       	dec	r24
     b4a:	e1 f7       	brne	.-8      	; 0xb44 <device_startMeasuring+0x1e4>
     b4c:	0f ef       	ldi	r16, 0xFF	; 255
     b4e:	1f ef       	ldi	r17, 0xFF	; 255
		xMessageBufferSend(_uplinkmessageBuffer,(void*) &_uplink_payload,sizeof(_uplink_payload),portMAX_DELAY);
     b50:	98 01       	movw	r18, r16
     b52:	46 e1       	ldi	r20, 0x16	; 22
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	66 e7       	ldi	r22, 0x76	; 118
     b58:	78 e0       	ldi	r23, 0x08	; 8
     b5a:	80 91 8c 08 	lds	r24, 0x088C	; 0x80088c <_uplinkmessageBuffer>
     b5e:	90 91 8d 08 	lds	r25, 0x088D	; 0x80088d <_uplinkmessageBuffer+0x1>
     b62:	0e 94 12 13 	call	0x2624	; 0x2624 <xStreamBufferSend>
     b66:	66 96       	adiw	r28, 0x16	; 22
     b68:	0f b6       	in	r0, 0x3f	; 63
	} 
}
     b6a:	f8 94       	cli
     b6c:	de bf       	out	0x3e, r29	; 62
     b6e:	0f be       	out	0x3f, r0	; 63
     b70:	cd bf       	out	0x3d, r28	; 61
     b72:	df 91       	pop	r29
     b74:	cf 91       	pop	r28
     b76:	1f 91       	pop	r17
     b78:	0f 91       	pop	r16
     b7a:	ff 90       	pop	r15
     b7c:	ef 90       	pop	r14
     b7e:	df 90       	pop	r13
     b80:	cf 90       	pop	r12
     b82:	bf 90       	pop	r11
     b84:	af 90       	pop	r10
     b86:	08 95       	ret

00000b88 <device_executeTask>:
     b88:	ec 01       	movw	r28, r24
     b8a:	ce 01       	movw	r24, r28

//devided so we can test
void device_executeTask(void* self) {
	for (;;)
	{
		device_startMeasuring((device_t)self);
     b8c:	e9 de       	rcall	.-558    	; 0x960 <device_startMeasuring>
     b8e:	fd cf       	rjmp	.-6      	; 0xb8a <device_executeTask+0x2>

00000b90 <lora_DownLinkHandler_create>:
		
	}
}

void lora_DownLinkHandler_create(UBaseType_t lora_handler_task_priority, MessageBufferHandle_t xMessageBuffer)
{
     b90:	ef 92       	push	r14
     b92:	ff 92       	push	r15
     b94:	0f 93       	push	r16
     b96:	9b 01       	movw	r18, r22
	
	//_isSet=isSet;
	xTaskCreate(
     b98:	e1 2c       	mov	r14, r1
     b9a:	f1 2c       	mov	r15, r1
     b9c:	08 2f       	mov	r16, r24
     b9e:	48 e8       	ldi	r20, 0x88	; 136
     ba0:	51 e0       	ldi	r21, 0x01	; 1
     ba2:	6c e0       	ldi	r22, 0x0C	; 12
     ba4:	73 e0       	ldi	r23, 0x03	; 3
     ba6:	82 e7       	ldi	r24, 0x72	; 114
     ba8:	96 e0       	ldi	r25, 0x06	; 6
     baa:	0e 94 42 15 	call	0x2a84	; 0x2a84 <xTaskCreate>
	,  configMINIMAL_STACK_SIZE+200  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  xMessageBuffer
	,  lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
	
}
     bae:	0f 91       	pop	r16
     bb0:	ff 90       	pop	r15
     bb2:	ef 90       	pop	r14
     bb4:	08 95       	ret

00000bb6 <lora_DownLinkHandler_task>:


	void lora_DownLinkHandler_task(MessageBufferHandle_t xMessageBuffer)
	{
     bb6:	0f 93       	push	r16
     bb8:	1f 93       	push	r17
     bba:	cf 93       	push	r28
     bbc:	df 93       	push	r29
				
		//size_t xBytesReceived;
		//xBytesReceived = 
		xMessageBufferReceive(xMessageBuffer,(void*) &_downlink_payload,sizeof(lora_payload_t),portMAX_DELAY);
     bbe:	0f ef       	ldi	r16, 0xFF	; 255
     bc0:	1f ef       	ldi	r17, 0xFF	; 255
     bc2:	98 01       	movw	r18, r16
     bc4:	46 e1       	ldi	r20, 0x16	; 22
     bc6:	50 e0       	ldi	r21, 0x00	; 0
     bc8:	6a e9       	ldi	r22, 0x9A	; 154
     bca:	78 e0       	ldi	r23, 0x08	; 8
     bcc:	0e 94 ff 13 	call	0x27fe	; 0x27fe <xStreamBufferReceive>
		printf("PayLoad bytes are: %d, %d\n Payload lenght is %d\n", _downlink_payload.bytes[0] ,_downlink_payload.bytes[1],_downlink_payload.len);
     bd0:	ca e9       	ldi	r28, 0x9A	; 154
     bd2:	d8 e0       	ldi	r29, 0x08	; 8
     bd4:	89 81       	ldd	r24, Y+1	; 0x01
     bd6:	1f 92       	push	r1
     bd8:	8f 93       	push	r24
     bda:	8b 81       	ldd	r24, Y+3	; 0x03
     bdc:	1f 92       	push	r1
     bde:	8f 93       	push	r24
     be0:	8a 81       	ldd	r24, Y+2	; 0x02
     be2:	1f 92       	push	r1
     be4:	8f 93       	push	r24
     be6:	85 e1       	ldi	r24, 0x15	; 21
     be8:	93 e0       	ldi	r25, 0x03	; 3
     bea:	9f 93       	push	r25
     bec:	8f 93       	push	r24
     bee:	0e 94 59 31 	call	0x62b2	; 0x62b2 <printf>
		
		//Two bytes eg. 44/33
		if(_downlink_payload.len==2)
     bf2:	8d b7       	in	r24, 0x3d	; 61
     bf4:	9e b7       	in	r25, 0x3e	; 62
     bf6:	08 96       	adiw	r24, 0x08	; 8
     bf8:	0f b6       	in	r0, 0x3f	; 63
     bfa:	f8 94       	cli
     bfc:	9e bf       	out	0x3e, r25	; 62
     bfe:	0f be       	out	0x3f, r0	; 63
     c00:	8d bf       	out	0x3d, r24	; 61
     c02:	89 81       	ldd	r24, Y+1	; 0x01
     c04:	82 30       	cpi	r24, 0x02	; 2
     c06:	09 f0       	breq	.+2      	; 0xc0a <lora_DownLinkHandler_task+0x54>
     c08:	68 c0       	rjmp	.+208    	; 0xcda <lora_DownLinkHandler_task+0x124>
		{
			uint8_t command = _downlink_payload.bytes[0] + _downlink_payload.bytes[1];
     c0a:	fe 01       	movw	r30, r28
     c0c:	ca 81       	ldd	r28, Y+2	; 0x02
     c0e:	83 81       	ldd	r24, Z+3	; 0x03
     c10:	c8 0f       	add	r28, r24
			bool* value = pvPortMalloc(sizeof(bool));
     c12:	81 e0       	ldi	r24, 0x01	; 1
     c14:	90 e0       	ldi	r25, 0x00	; 0
     c16:	02 d5       	rcall	.+2564   	; 0x161c <pvPortMalloc>
     c18:	8c 01       	movw	r16, r24
			
		
			switch(command)
     c1a:	c5 37       	cpi	r28, 0x75	; 117
     c1c:	e9 f0       	breq	.+58     	; 0xc58 <lora_DownLinkHandler_task+0xa2>
     c1e:	18 f4       	brcc	.+6      	; 0xc26 <lora_DownLinkHandler_task+0x70>
     c20:	c4 37       	cpi	r28, 0x74	; 116
     c22:	39 f0       	breq	.+14     	; 0xc32 <lora_DownLinkHandler_task+0x7c>
     c24:	52 c0       	rjmp	.+164    	; 0xcca <lora_DownLinkHandler_task+0x114>
     c26:	c6 38       	cpi	r28, 0x86	; 134
     c28:	51 f1       	breq	.+84     	; 0xc7e <lora_DownLinkHandler_task+0xc8>
     c2a:	c7 38       	cpi	r28, 0x87	; 135
     c2c:	09 f4       	brne	.+2      	; 0xc30 <lora_DownLinkHandler_task+0x7a>
     c2e:	3a c0       	rjmp	.+116    	; 0xca4 <lora_DownLinkHandler_task+0xee>
     c30:	4c c0       	rjmp	.+152    	; 0xcca <lora_DownLinkHandler_task+0x114>
			{
			//D0
			case 0x74:
				configuration_setWorking(false);
     c32:	80 e0       	ldi	r24, 0x00	; 0
     c34:	22 dd       	rcall	.-1468   	; 0x67a <configuration_setWorking>
				configuration_getWorking(value);
     c36:	c8 01       	movw	r24, r16
     c38:	44 dd       	rcall	.-1400   	; 0x6c2 <configuration_getWorking>
     c3a:	f8 01       	movw	r30, r16
				printf("The bool for device is set to %d",*value);
     c3c:	80 81       	ld	r24, Z
     c3e:	1f 92       	push	r1
     c40:	8f 93       	push	r24
     c42:	86 e4       	ldi	r24, 0x46	; 70
     c44:	93 e0       	ldi	r25, 0x03	; 3
     c46:	9f 93       	push	r25
     c48:	8f 93       	push	r24
     c4a:	0e 94 59 31 	call	0x62b2	; 0x62b2 <printf>
     c4e:	0f 90       	pop	r0
				break;
     c50:	0f 90       	pop	r0
     c52:	0f 90       	pop	r0
     c54:	0f 90       	pop	r0
     c56:	41 c0       	rjmp	.+130    	; 0xcda <lora_DownLinkHandler_task+0x124>
			//D1
			case 0x75 :
				configuration_setWorking(true);
     c58:	81 e0       	ldi	r24, 0x01	; 1
     c5a:	0f dd       	rcall	.-1506   	; 0x67a <configuration_setWorking>
				configuration_getWorking(value);
     c5c:	c8 01       	movw	r24, r16
     c5e:	31 dd       	rcall	.-1438   	; 0x6c2 <configuration_getWorking>
     c60:	f8 01       	movw	r30, r16
				printf("The bool for device is set to %d",*value);
     c62:	80 81       	ld	r24, Z
     c64:	1f 92       	push	r1
     c66:	8f 93       	push	r24
     c68:	86 e4       	ldi	r24, 0x46	; 70
     c6a:	93 e0       	ldi	r25, 0x03	; 3
     c6c:	9f 93       	push	r25
     c6e:	8f 93       	push	r24
     c70:	0e 94 59 31 	call	0x62b2	; 0x62b2 <printf>
     c74:	0f 90       	pop	r0
				break;
     c76:	0f 90       	pop	r0
     c78:	0f 90       	pop	r0
     c7a:	0f 90       	pop	r0
			//V0
			case 0x86:
				configuration_setVentilation(false);
     c7c:	2e c0       	rjmp	.+92     	; 0xcda <lora_DownLinkHandler_task+0x124>
     c7e:	80 e0       	ldi	r24, 0x00	; 0
     c80:	49 dd       	rcall	.-1390   	; 0x714 <configuration_setVentilation>
				configuration_getVentilation(value);
     c82:	c8 01       	movw	r24, r16
     c84:	6b dd       	rcall	.-1322   	; 0x75c <configuration_getVentilation>
     c86:	f8 01       	movw	r30, r16
				printf("The bool for ventilation is set to %d",*value);
     c88:	80 81       	ld	r24, Z
     c8a:	1f 92       	push	r1
     c8c:	8f 93       	push	r24
     c8e:	87 e6       	ldi	r24, 0x67	; 103
     c90:	93 e0       	ldi	r25, 0x03	; 3
     c92:	9f 93       	push	r25
     c94:	8f 93       	push	r24
     c96:	0e 94 59 31 	call	0x62b2	; 0x62b2 <printf>
			break;
     c9a:	0f 90       	pop	r0
     c9c:	0f 90       	pop	r0
     c9e:	0f 90       	pop	r0
     ca0:	0f 90       	pop	r0
			//V1
			case 0x87:
				configuration_setVentilation(true);
     ca2:	1b c0       	rjmp	.+54     	; 0xcda <lora_DownLinkHandler_task+0x124>
     ca4:	81 e0       	ldi	r24, 0x01	; 1
     ca6:	36 dd       	rcall	.-1428   	; 0x714 <configuration_setVentilation>
				configuration_getVentilation(value);
     ca8:	c8 01       	movw	r24, r16
     caa:	58 dd       	rcall	.-1360   	; 0x75c <configuration_getVentilation>
     cac:	f8 01       	movw	r30, r16
				printf("The bool for ventilation is set to %d",*value);
     cae:	80 81       	ld	r24, Z
     cb0:	1f 92       	push	r1
     cb2:	8f 93       	push	r24
     cb4:	87 e6       	ldi	r24, 0x67	; 103
     cb6:	93 e0       	ldi	r25, 0x03	; 3
     cb8:	9f 93       	push	r25
     cba:	8f 93       	push	r24
     cbc:	0e 94 59 31 	call	0x62b2	; 0x62b2 <printf>
     cc0:	0f 90       	pop	r0
				break;
     cc2:	0f 90       	pop	r0
     cc4:	0f 90       	pop	r0
     cc6:	0f 90       	pop	r0
     cc8:	08 c0       	rjmp	.+16     	; 0xcda <lora_DownLinkHandler_task+0x124>
     cca:	8d e8       	ldi	r24, 0x8D	; 141
			default:
				printf("Invalid command");
     ccc:	93 e0       	ldi	r25, 0x03	; 3
     cce:	9f 93       	push	r25
     cd0:	8f 93       	push	r24
     cd2:	0e 94 59 31 	call	0x62b2	; 0x62b2 <printf>
     cd6:	0f 90       	pop	r0
				break;
     cd8:	0f 90       	pop	r0
     cda:	df 91       	pop	r29
		}
	}
						
}
     cdc:	cf 91       	pop	r28
     cde:	1f 91       	pop	r17
     ce0:	0f 91       	pop	r16
     ce2:	08 95       	ret

00000ce4 <lora_DownLinkHandler_startTask>:
     ce4:	ec 01       	movw	r28, r24
//int16_t temperature_setting; // Temperature

void lora_DownLinkHandler_startTask(void* xMessageBuffer){
	for(;;)
	{
		lora_DownLinkHandler_task((MessageBufferHandle_t)xMessageBuffer);
     ce6:	ce 01       	movw	r24, r28
     ce8:	66 df       	rcall	.-308    	; 0xbb6 <lora_DownLinkHandler_task>
     cea:	fd cf       	rjmp	.-6      	; 0xce6 <lora_DownLinkHandler_startTask+0x2>

00000cec <humAndTempReader_create>:
void humAndTempReader_destroy(humAndTempReader_t self) {
	if (self == NULL)
	return;

	//delete will clear the allocated memory to the task + we need to remove everything else
	vTaskDelete(self->handleTask);
     cec:	2f 92       	push	r2
     cee:	3f 92       	push	r3
     cf0:	4f 92       	push	r4
     cf2:	5f 92       	push	r5
     cf4:	6f 92       	push	r6
     cf6:	7f 92       	push	r7
     cf8:	8f 92       	push	r8
     cfa:	9f 92       	push	r9
     cfc:	af 92       	push	r10
     cfe:	bf 92       	push	r11
     d00:	cf 92       	push	r12
     d02:	df 92       	push	r13
     d04:	ef 92       	push	r14
     d06:	ff 92       	push	r15
     d08:	0f 93       	push	r16
     d0a:	1f 93       	push	r17
     d0c:	cf 93       	push	r28
     d0e:	df 93       	push	r29
     d10:	88 2e       	mov	r8, r24
     d12:	96 2e       	mov	r9, r22
     d14:	1a 01       	movw	r2, r20
     d16:	28 01       	movw	r4, r16
     d18:	39 01       	movw	r6, r18
     d1a:	66 e0       	ldi	r22, 0x06	; 6
     d1c:	70 e0       	ldi	r23, 0x00	; 0
     d1e:	81 e0       	ldi	r24, 0x01	; 1
     d20:	90 e0       	ldi	r25, 0x00	; 0
     d22:	0e 94 66 2f 	call	0x5ecc	; 0x5ecc <calloc>
     d26:	ec 01       	movw	r28, r24
     d28:	00 97       	sbiw	r24, 0x00	; 0
     d2a:	71 f1       	breq	.+92     	; 0xd88 <humAndTempReader_create+0x9c>
     d2c:	19 82       	std	Y+1, r1	; 0x01
     d2e:	18 82       	st	Y, r1
     d30:	1b 82       	std	Y+3, r1	; 0x03
     d32:	1a 82       	std	Y+2, r1	; 0x02
     d34:	30 92 bb 08 	sts	0x08BB, r3	; 0x8008bb <_startMeasureEventGroup+0x1>
     d38:	20 92 ba 08 	sts	0x08BA, r2	; 0x8008ba <_startMeasureEventGroup>
     d3c:	40 92 b6 08 	sts	0x08B6, r4	; 0x8008b6 <_startMeasureBit>
     d40:	50 92 b7 08 	sts	0x08B7, r5	; 0x8008b7 <_startMeasureBit+0x1>
     d44:	60 92 b8 08 	sts	0x08B8, r6	; 0x8008b8 <_startMeasureBit+0x2>
     d48:	70 92 b9 08 	sts	0x08B9, r7	; 0x8008b9 <_startMeasureBit+0x3>
     d4c:	f0 92 b5 08 	sts	0x08B5, r15	; 0x8008b5 <_readyEventGroup+0x1>
     d50:	e0 92 b4 08 	sts	0x08B4, r14	; 0x8008b4 <_readyEventGroup>
     d54:	a0 92 b0 08 	sts	0x08B0, r10	; 0x8008b0 <_readyBit>
     d58:	b0 92 b1 08 	sts	0x08B1, r11	; 0x8008b1 <_readyBit+0x1>
     d5c:	c0 92 b2 08 	sts	0x08B2, r12	; 0x8008b2 <_readyBit+0x2>
     d60:	d0 92 b3 08 	sts	0x08B3, r13	; 0x8008b3 <_readyBit+0x3>
     d64:	49 2d       	mov	r20, r9
     d66:	50 e0       	ldi	r21, 0x00	; 0
     d68:	7c 01       	movw	r14, r24
     d6a:	84 e0       	ldi	r24, 0x04	; 4
     d6c:	e8 0e       	add	r14, r24
     d6e:	f1 1c       	adc	r15, r1
     d70:	08 2d       	mov	r16, r8
     d72:	9e 01       	movw	r18, r28
     d74:	6d e9       	ldi	r22, 0x9D	; 157
     d76:	73 e0       	ldi	r23, 0x03	; 3
     d78:	83 e4       	ldi	r24, 0x43	; 67
     d7a:	97 e0       	ldi	r25, 0x07	; 7
     d7c:	0e 94 42 15 	call	0x2a84	; 0x2a84 <xTaskCreate>
     d80:	8e ea       	ldi	r24, 0xAE	; 174
     d82:	93 e0       	ldi	r25, 0x03	; 3
     d84:	0e 94 6c 31 	call	0x62d8	; 0x62d8 <puts>
     d88:	ce 01       	movw	r24, r28
     d8a:	df 91       	pop	r29
     d8c:	cf 91       	pop	r28
     d8e:	1f 91       	pop	r17
     d90:	0f 91       	pop	r16
     d92:	ff 90       	pop	r15
     d94:	ef 90       	pop	r14
     d96:	df 90       	pop	r13
     d98:	cf 90       	pop	r12
     d9a:	bf 90       	pop	r11
     d9c:	af 90       	pop	r10
     d9e:	9f 90       	pop	r9
     da0:	8f 90       	pop	r8
     da2:	7f 90       	pop	r7
     da4:	6f 90       	pop	r6
     da6:	5f 90       	pop	r5
     da8:	4f 90       	pop	r4
     daa:	3f 90       	pop	r3
     dac:	2f 90       	pop	r2
     dae:	08 95       	ret

00000db0 <humAndTempReader_measure>:
	//free(self);
}



void humAndTempReader_measure(humAndTempReader_t self) {//dummy
     db0:	cf 92       	push	r12
     db2:	df 92       	push	r13
     db4:	ef 92       	push	r14
     db6:	ff 92       	push	r15
     db8:	0f 93       	push	r16
     dba:	1f 93       	push	r17
     dbc:	cf 93       	push	r28
     dbe:	df 93       	push	r29
     dc0:	ec 01       	movw	r28, r24
	EventBits_t uxBits = xEventGroupWaitBits(_startMeasureEventGroup, //eventGroup
     dc2:	40 91 b6 08 	lds	r20, 0x08B6	; 0x8008b6 <_startMeasureBit>
     dc6:	50 91 b7 08 	lds	r21, 0x08B7	; 0x8008b7 <_startMeasureBit+0x1>
     dca:	60 91 b8 08 	lds	r22, 0x08B8	; 0x8008b8 <_startMeasureBit+0x2>
     dce:	70 91 b9 08 	lds	r23, 0x08B9	; 0x8008b9 <_startMeasureBit+0x3>
     dd2:	cc 24       	eor	r12, r12
     dd4:	ca 94       	dec	r12
     dd6:	dc 2c       	mov	r13, r12
     dd8:	76 01       	movw	r14, r12
     dda:	01 e0       	ldi	r16, 0x01	; 1
     ddc:	21 e0       	ldi	r18, 0x01	; 1
     dde:	80 91 ba 08 	lds	r24, 0x08BA	; 0x8008ba <_startMeasureEventGroup>
     de2:	90 91 bb 08 	lds	r25, 0x08BB	; 0x8008bb <_startMeasureEventGroup+0x1>
     de6:	74 d2       	rcall	.+1256   	; 0x12d0 <xEventGroupWaitBits>
	_startMeasureBit, //bits it is interested i
	pdTRUE, //clears the bits
	pdTRUE, //waits for both bits to be set
	portMAX_DELAY); //wait

	if ((uxBits & (_startMeasureBit)) == (_startMeasureBit)) {
     de8:	00 91 b6 08 	lds	r16, 0x08B6	; 0x8008b6 <_startMeasureBit>
     dec:	10 91 b7 08 	lds	r17, 0x08B7	; 0x8008b7 <_startMeasureBit+0x1>
     df0:	20 91 b8 08 	lds	r18, 0x08B8	; 0x8008b8 <_startMeasureBit+0x2>
     df4:	30 91 b9 08 	lds	r19, 0x08B9	; 0x8008b9 <_startMeasureBit+0x3>
     df8:	dc 01       	movw	r26, r24
     dfa:	cb 01       	movw	r24, r22
     dfc:	80 23       	and	r24, r16
     dfe:	91 23       	and	r25, r17
     e00:	a2 23       	and	r26, r18
     e02:	b3 23       	and	r27, r19
     e04:	08 17       	cp	r16, r24
     e06:	19 07       	cpc	r17, r25
     e08:	2a 07       	cpc	r18, r26
     e0a:	3b 07       	cpc	r19, r27
     e0c:	99 f5       	brne	.+102    	; 0xe74 <humAndTempReader_measure+0xc4>
		hih8120Wakeup();
     e0e:	0e 94 c9 1f 	call	0x3f92	; 0x3f92 <hih8120Wakeup>
		vTaskDelay(50);
     e12:	62 e3       	ldi	r22, 0x32	; 50
     e14:	70 e0       	ldi	r23, 0x00	; 0
     e16:	80 e0       	ldi	r24, 0x00	; 0
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	0e 94 02 18 	call	0x3004	; 0x3004 <vTaskDelay>
		hih8120Meassure();
     e1e:	0e 94 de 1f 	call	0x3fbc	; 0x3fbc <hih8120Meassure>
		vTaskDelay(5);
     e22:	65 e0       	ldi	r22, 0x05	; 5
     e24:	70 e0       	ldi	r23, 0x00	; 0
     e26:	80 e0       	ldi	r24, 0x00	; 0
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	0e 94 02 18 	call	0x3004	; 0x3004 <vTaskDelay>
		if(hih8120IsReady())
     e2e:	0e 94 c6 1f 	call	0x3f8c	; 0x3f8c <hih8120IsReady>
     e32:	88 23       	and	r24, r24
     e34:	61 f0       	breq	.+24     	; 0xe4e <humAndTempReader_measure+0x9e>
		{
			self->humidity = hih8120GetHumidityPercent_x10();
     e36:	0e 94 04 20 	call	0x4008	; 0x4008 <hih8120GetHumidityPercent_x10>
     e3a:	99 83       	std	Y+1, r25	; 0x01
     e3c:	88 83       	st	Y, r24
			self->temperature = hih8120GetTemperature_x10();
     e3e:	0e 94 2a 20 	call	0x4054	; 0x4054 <hih8120GetTemperature_x10>
     e42:	9b 83       	std	Y+3, r25	; 0x03
     e44:	8a 83       	std	Y+2, r24	; 0x02
			printf("humidity and temperature done bit set\n");
     e46:	8d ec       	ldi	r24, 0xCD	; 205
     e48:	93 e0       	ldi	r25, 0x03	; 3
     e4a:	0e 94 6c 31 	call	0x62d8	; 0x62d8 <puts>
			
		}
		
		vTaskDelay(1000);
     e4e:	68 ee       	ldi	r22, 0xE8	; 232
     e50:	73 e0       	ldi	r23, 0x03	; 3
     e52:	80 e0       	ldi	r24, 0x00	; 0
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	0e 94 02 18 	call	0x3004	; 0x3004 <vTaskDelay>
		//set done bit so that device knows meassurement is done
		xEventGroupSetBits(_readyEventGroup, _readyBit);
     e5a:	40 91 b0 08 	lds	r20, 0x08B0	; 0x8008b0 <_readyBit>
     e5e:	50 91 b1 08 	lds	r21, 0x08B1	; 0x8008b1 <_readyBit+0x1>
     e62:	60 91 b2 08 	lds	r22, 0x08B2	; 0x8008b2 <_readyBit+0x2>
     e66:	70 91 b3 08 	lds	r23, 0x08B3	; 0x8008b3 <_readyBit+0x3>
     e6a:	80 91 b4 08 	lds	r24, 0x08B4	; 0x8008b4 <_readyEventGroup>
     e6e:	90 91 b5 08 	lds	r25, 0x08B5	; 0x8008b5 <_readyEventGroup+0x1>
     e72:	ee d2       	rcall	.+1500   	; 0x1450 <xEventGroupSetBits>
	}
}
     e74:	df 91       	pop	r29
     e76:	cf 91       	pop	r28
     e78:	1f 91       	pop	r17
     e7a:	0f 91       	pop	r16
     e7c:	ff 90       	pop	r15
     e7e:	ef 90       	pop	r14
     e80:	df 90       	pop	r13
     e82:	cf 90       	pop	r12
     e84:	08 95       	ret

00000e86 <humAndTempReader_executeTask>:
	int16_t temperature;
	TaskHandle_t handleTask;
}humidityAndTemperature;

//actual task, methods devided so that it is possible to test
void humAndTempReader_executeTask(void* self) {
     e86:	ec 01       	movw	r28, r24
	for (;;) {
		humAndTempReader_measure((humAndTempReader_t)self);
     e88:	ce 01       	movw	r24, r28
     e8a:	92 df       	rcall	.-220    	; 0xdb0 <humAndTempReader_measure>
     e8c:	fd cf       	rjmp	.-6      	; 0xe88 <humAndTempReader_executeTask+0x2>

00000e8e <humAndTempReader_getHumidity>:
	}
}

uint16_t humAndTempReader_getHumidity(humAndTempReader_t self){
	return self->humidity;
}
     e8e:	fc 01       	movw	r30, r24
     e90:	80 81       	ld	r24, Z
     e92:	91 81       	ldd	r25, Z+1	; 0x01
     e94:	08 95       	ret

00000e96 <humAndTempReader_getTemperature>:

int16_t humAndTempReader_getTemperature(humAndTempReader_t self){
	return self->temperature;
}
     e96:	fc 01       	movw	r30, r24
     e98:	82 81       	ldd	r24, Z+2	; 0x02
     e9a:	93 81       	ldd	r25, Z+3	; 0x03
     e9c:	08 95       	ret

00000e9e <servo_initialise>:
#include "Servo.h"


void servo_initialise()
{
	rcServoCreate();		
     e9e:	0c 94 8a 27 	jmp	0x4f14	; 0x4f14 <rcServoCreate>
     ea2:	08 95       	ret

00000ea4 <servo_open>:
	//printf("Servo is up\n");
}

void servo_open()
{
	rcServoSet(0, 100);
     ea4:	64 e6       	ldi	r22, 0x64	; 100
     ea6:	80 e0       	ldi	r24, 0x00	; 0
     ea8:	0c 94 72 27 	jmp	0x4ee4	; 0x4ee4 <rcServoSet>
     eac:	08 95       	ret

00000eae <servo_close>:
}
void servo_close()
{
	rcServoSet(0, -100);
     eae:	6c e9       	ldi	r22, 0x9C	; 156
     eb0:	80 e0       	ldi	r24, 0x00	; 0
     eb2:	0c 94 72 27 	jmp	0x4ee4	; 0x4ee4 <rcServoSet>
     eb6:	08 95       	ret

00000eb8 <soundReader_create>:
}



//	RETURN TO DESTROY METHODS
void soundReader_destroy(soundReader_t self) {
     eb8:	2f 92       	push	r2
     eba:	3f 92       	push	r3
     ebc:	4f 92       	push	r4
     ebe:	5f 92       	push	r5
     ec0:	6f 92       	push	r6
     ec2:	7f 92       	push	r7
     ec4:	8f 92       	push	r8
     ec6:	9f 92       	push	r9
     ec8:	af 92       	push	r10
     eca:	bf 92       	push	r11
     ecc:	cf 92       	push	r12
     ece:	df 92       	push	r13
     ed0:	ef 92       	push	r14
     ed2:	ff 92       	push	r15
     ed4:	0f 93       	push	r16
     ed6:	1f 93       	push	r17
     ed8:	cf 93       	push	r28
     eda:	df 93       	push	r29
     edc:	88 2e       	mov	r8, r24
     ede:	96 2e       	mov	r9, r22
     ee0:	1a 01       	movw	r2, r20
     ee2:	28 01       	movw	r4, r16
     ee4:	39 01       	movw	r6, r18
     ee6:	64 e0       	ldi	r22, 0x04	; 4
     ee8:	70 e0       	ldi	r23, 0x00	; 0
     eea:	81 e0       	ldi	r24, 0x01	; 1
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	0e 94 66 2f 	call	0x5ecc	; 0x5ecc <calloc>
     ef2:	ec 01       	movw	r28, r24
     ef4:	00 97       	sbiw	r24, 0x00	; 0
     ef6:	51 f1       	breq	.+84     	; 0xf4c <soundReader_create+0x94>
     ef8:	fc 01       	movw	r30, r24
     efa:	11 92       	st	Z+, r1
     efc:	11 92       	st	Z+, r1
     efe:	30 92 c7 08 	sts	0x08C7, r3	; 0x8008c7 <_startMeasureEventGroup+0x1>
     f02:	20 92 c6 08 	sts	0x08C6, r2	; 0x8008c6 <_startMeasureEventGroup>
     f06:	40 92 c2 08 	sts	0x08C2, r4	; 0x8008c2 <_startMeasureBit>
     f0a:	50 92 c3 08 	sts	0x08C3, r5	; 0x8008c3 <_startMeasureBit+0x1>
     f0e:	60 92 c4 08 	sts	0x08C4, r6	; 0x8008c4 <_startMeasureBit+0x2>
     f12:	70 92 c5 08 	sts	0x08C5, r7	; 0x8008c5 <_startMeasureBit+0x3>
     f16:	f0 92 c1 08 	sts	0x08C1, r15	; 0x8008c1 <_readyEventGroup+0x1>
     f1a:	e0 92 c0 08 	sts	0x08C0, r14	; 0x8008c0 <_readyEventGroup>
     f1e:	a0 92 bc 08 	sts	0x08BC, r10	; 0x8008bc <_readyBit>
     f22:	b0 92 bd 08 	sts	0x08BD, r11	; 0x8008bd <_readyBit+0x1>
     f26:	c0 92 be 08 	sts	0x08BE, r12	; 0x8008be <_readyBit+0x2>
     f2a:	d0 92 bf 08 	sts	0x08BF, r13	; 0x8008bf <_readyBit+0x3>
     f2e:	49 2d       	mov	r20, r9
     f30:	50 e0       	ldi	r21, 0x00	; 0
     f32:	7f 01       	movw	r14, r30
     f34:	08 2d       	mov	r16, r8
     f36:	9c 01       	movw	r18, r24
     f38:	63 ef       	ldi	r22, 0xF3	; 243
     f3a:	73 e0       	ldi	r23, 0x03	; 3
     f3c:	8c e0       	ldi	r24, 0x0C	; 12
     f3e:	98 e0       	ldi	r25, 0x08	; 8
     f40:	0e 94 42 15 	call	0x2a84	; 0x2a84 <xTaskCreate>
     f44:	8f ef       	ldi	r24, 0xFF	; 255
     f46:	93 e0       	ldi	r25, 0x03	; 3
     f48:	0e 94 6c 31 	call	0x62d8	; 0x62d8 <puts>
     f4c:	ce 01       	movw	r24, r28
     f4e:	df 91       	pop	r29
     f50:	cf 91       	pop	r28
     f52:	1f 91       	pop	r17
     f54:	0f 91       	pop	r16
     f56:	ff 90       	pop	r15
     f58:	ef 90       	pop	r14
     f5a:	df 90       	pop	r13
     f5c:	cf 90       	pop	r12
     f5e:	bf 90       	pop	r11
     f60:	af 90       	pop	r10
     f62:	9f 90       	pop	r9
     f64:	8f 90       	pop	r8
     f66:	7f 90       	pop	r7
     f68:	6f 90       	pop	r6
     f6a:	5f 90       	pop	r5
     f6c:	4f 90       	pop	r4
     f6e:	3f 90       	pop	r3
     f70:	2f 90       	pop	r2
     f72:	08 95       	ret

00000f74 <soundReader_measure>:
}

//actual task, methods devided so that it is possible to test


void soundReader_measure(soundReader_t self) {
     f74:	cf 92       	push	r12
     f76:	df 92       	push	r13
     f78:	ef 92       	push	r14
     f7a:	ff 92       	push	r15
     f7c:	0f 93       	push	r16
     f7e:	1f 93       	push	r17
     f80:	cf 93       	push	r28
     f82:	df 93       	push	r29
     f84:	ec 01       	movw	r28, r24
	
	EventBits_t uxBits = xEventGroupWaitBits(_startMeasureEventGroup, //eventGroup
     f86:	40 91 c2 08 	lds	r20, 0x08C2	; 0x8008c2 <_startMeasureBit>
     f8a:	50 91 c3 08 	lds	r21, 0x08C3	; 0x8008c3 <_startMeasureBit+0x1>
     f8e:	60 91 c4 08 	lds	r22, 0x08C4	; 0x8008c4 <_startMeasureBit+0x2>
     f92:	70 91 c5 08 	lds	r23, 0x08C5	; 0x8008c5 <_startMeasureBit+0x3>
     f96:	cc 24       	eor	r12, r12
     f98:	ca 94       	dec	r12
     f9a:	dc 2c       	mov	r13, r12
     f9c:	76 01       	movw	r14, r12
     f9e:	01 e0       	ldi	r16, 0x01	; 1
     fa0:	21 e0       	ldi	r18, 0x01	; 1
     fa2:	80 91 c6 08 	lds	r24, 0x08C6	; 0x8008c6 <_startMeasureEventGroup>
     fa6:	90 91 c7 08 	lds	r25, 0x08C7	; 0x8008c7 <_startMeasureEventGroup+0x1>
     faa:	92 d1       	rcall	.+804    	; 0x12d0 <xEventGroupWaitBits>
	_startMeasureBit, //bits it is interested in
	pdTRUE, //clears the bits
	pdTRUE, //waits for both bits to be set
	portMAX_DELAY); //wait

	if ((uxBits & (_startMeasureBit)) == (_startMeasureBit)) {
     fac:	00 91 c2 08 	lds	r16, 0x08C2	; 0x8008c2 <_startMeasureBit>
     fb0:	10 91 c3 08 	lds	r17, 0x08C3	; 0x8008c3 <_startMeasureBit+0x1>
     fb4:	20 91 c4 08 	lds	r18, 0x08C4	; 0x8008c4 <_startMeasureBit+0x2>
     fb8:	30 91 c5 08 	lds	r19, 0x08C5	; 0x8008c5 <_startMeasureBit+0x3>
     fbc:	dc 01       	movw	r26, r24
     fbe:	cb 01       	movw	r24, r22
     fc0:	80 23       	and	r24, r16
     fc2:	91 23       	and	r25, r17
     fc4:	a2 23       	and	r26, r18
     fc6:	b3 23       	and	r27, r19
     fc8:	08 17       	cp	r16, r24
     fca:	19 07       	cpc	r17, r25
     fcc:	2a 07       	cpc	r18, r26
     fce:	3b 07       	cpc	r19, r27
     fd0:	d1 f4       	brne	.+52     	; 0x1006 <soundReader_measure+0x92>

		
		//srand(time(NULL));
		self->value = rand()%105 + 15;
     fd2:	0e 94 e8 30 	call	0x61d0	; 0x61d0 <rand>
     fd6:	69 e6       	ldi	r22, 0x69	; 105
     fd8:	70 e0       	ldi	r23, 0x00	; 0
     fda:	0e 94 15 2f 	call	0x5e2a	; 0x5e2a <__divmodhi4>
     fde:	0f 96       	adiw	r24, 0x0f	; 15
     fe0:	99 83       	std	Y+1, r25	; 0x01
     fe2:	88 83       	st	Y, r24
		
		
		//set done bit so that device knows measurement is done
		xEventGroupSetBits(_readyEventGroup, _readyBit);
     fe4:	40 91 bc 08 	lds	r20, 0x08BC	; 0x8008bc <_readyBit>
     fe8:	50 91 bd 08 	lds	r21, 0x08BD	; 0x8008bd <_readyBit+0x1>
     fec:	60 91 be 08 	lds	r22, 0x08BE	; 0x8008be <_readyBit+0x2>
     ff0:	70 91 bf 08 	lds	r23, 0x08BF	; 0x8008bf <_readyBit+0x3>
     ff4:	80 91 c0 08 	lds	r24, 0x08C0	; 0x8008c0 <_readyEventGroup>
     ff8:	90 91 c1 08 	lds	r25, 0x08C1	; 0x8008c1 <_readyEventGroup+0x1>
     ffc:	29 d2       	rcall	.+1106   	; 0x1450 <xEventGroupSetBits>
		printf("SoundReader done bit set\n");
     ffe:	8e e0       	ldi	r24, 0x0E	; 14
    1000:	94 e0       	ldi	r25, 0x04	; 4
    1002:	0e 94 6c 31 	call	0x62d8	; 0x62d8 <puts>
	}
}
    1006:	df 91       	pop	r29
    1008:	cf 91       	pop	r28
    100a:	1f 91       	pop	r17
    100c:	0f 91       	pop	r16
    100e:	ff 90       	pop	r15
    1010:	ef 90       	pop	r14
    1012:	df 90       	pop	r13
    1014:	cf 90       	pop	r12
    1016:	08 95       	ret

00001018 <soundReader_executeTask>:
	TaskHandle_t handleTask;
}soundReader;



void soundReader_executeTask(void* self) {
    1018:	ec 01       	movw	r28, r24
	for (;;) {
		soundReader_measure((soundReader_t)self);
    101a:	ce 01       	movw	r24, r28
    101c:	ab df       	rcall	.-170    	; 0xf74 <soundReader_measure>
    101e:	fd cf       	rjmp	.-6      	; 0x101a <soundReader_executeTask+0x2>

00001020 <soundReader_getSound>:
	}
}

uint16_t soundReader_getSound(soundReader_t self) {
	return self->value;
}
    1020:	fc 01       	movw	r30, r24
    1022:	80 81       	ld	r24, Z
    1024:	91 81       	ldd	r25, Z+1	; 0x01
    1026:	08 95       	ret

00001028 <lora_UpLinkHandler_create>:
	}
}


void lora_UpLinkHandler_create(UBaseType_t lora_handler_task_priority, MessageBufferHandle_t xMessageBuffer)
{
    1028:	ef 92       	push	r14
    102a:	ff 92       	push	r15
    102c:	0f 93       	push	r16
    102e:	9b 01       	movw	r18, r22
	_buffer = xMessageBuffer;
	
	
	
	xTaskCreate(
    1030:	e1 2c       	mov	r14, r1
    1032:	f1 2c       	mov	r15, r1
    1034:	08 2f       	mov	r16, r24
    1036:	48 e8       	ldi	r20, 0x88	; 136
    1038:	51 e0       	ldi	r21, 0x01	; 1
    103a:	67 e2       	ldi	r22, 0x27	; 39
    103c:	74 e0       	ldi	r23, 0x04	; 4
    103e:	8b e3       	ldi	r24, 0x3B	; 59
    1040:	99 e0       	ldi	r25, 0x09	; 9
    1042:	0e 94 42 15 	call	0x2a84	; 0x2a84 <xTaskCreate>
	,  (const portCHAR *)"LRUpHand"  // A name just for humans
	,  configMINIMAL_STACK_SIZE+200  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  xMessageBuffer
	,  lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}
    1046:	0f 91       	pop	r16
    1048:	ff 90       	pop	r15
    104a:	ef 90       	pop	r14
    104c:	08 95       	ret

0000104e <lora_UpLinkHandler_task>:
	
	/*Receives message from message buffer shared between it and the application responsible for gathering the data
	--> Should be called every 5 minutes from application
	*/
	void lora_UpLinkHandler_task(MessageBufferHandle_t xMessageBuffer)
	{	
    104e:	df 92       	push	r13
    1050:	ef 92       	push	r14
    1052:	ff 92       	push	r15
    1054:	0f 93       	push	r16
    1056:	1f 93       	push	r17
    1058:	cf 93       	push	r28
    105a:	df 93       	push	r29
    105c:	7c 01       	movw	r14, r24
		size_t xBytesToSend;
		char rxData[50];
		if (!isSet)
    105e:	80 91 c8 08 	lds	r24, 0x08C8	; 0x8008c8 <isSet>
    1062:	81 11       	cpse	r24, r1
    1064:	cf c0       	rjmp	.+414    	; 0x1204 <lora_UpLinkHandler_task+0x1b6>
		{
			// Hardware reset of LoRaWAN transceiver
			lora_driver_reset_rn2483(1);
    1066:	81 e0       	ldi	r24, 0x01	; 1
    1068:	0e 94 4a 23 	call	0x4694	; 0x4694 <lora_driver_reset_rn2483>
			vTaskDelay(2);
    106c:	62 e0       	ldi	r22, 0x02	; 2
    106e:	70 e0       	ldi	r23, 0x00	; 0
    1070:	80 e0       	ldi	r24, 0x00	; 0
    1072:	90 e0       	ldi	r25, 0x00	; 0
    1074:	0e 94 02 18 	call	0x3004	; 0x3004 <vTaskDelay>
			lora_driver_reset_rn2483(0);
    1078:	80 e0       	ldi	r24, 0x00	; 0
    107a:	0e 94 4a 23 	call	0x4694	; 0x4694 <lora_driver_reset_rn2483>
			// Give it a chance to wakeup
			vTaskDelay(150);
    107e:	66 e9       	ldi	r22, 0x96	; 150
    1080:	70 e0       	ldi	r23, 0x00	; 0
    1082:	80 e0       	ldi	r24, 0x00	; 0
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	0e 94 02 18 	call	0x3004	; 0x3004 <vTaskDelay>

			lora_driver_flush_buffers(); // get rid of first version string from module after reset!
    108a:	0e 94 00 23 	call	0x4600	; 0x4600 <lora_driver_flush_buffers>


static void _lora_setup(void)
{
	e_LoRa_return_code_t rc;
	led_slow_blink(led_ST2); // OPTIONAL: Led the green led blink slowly while we are setting up LoRa
    108e:	81 e0       	ldi	r24, 0x01	; 1
    1090:	0e 94 58 21 	call	0x42b0	; 0x42b0 <led_slow_blink>
	//The below code is required to be executed only once due to the fact that these MAC settings
	// can be stored inside of the tranciever
	//START ON ONE TIME USE CODE

	// Factory reset the transceiver
	printf("FactoryReset >%s<\n", lora_driver_map_return_code_to_text(lora_driver_rn2483_factory_reset()));
    1094:	0e 94 5e 23 	call	0x46bc	; 0x46bc <lora_driver_rn2483_factory_reset>
    1098:	0e 94 db 25 	call	0x4bb6	; 0x4bb6 <lora_driver_map_return_code_to_text>
    109c:	9f 93       	push	r25
    109e:	8f 93       	push	r24
    10a0:	80 e3       	ldi	r24, 0x30	; 48
    10a2:	94 e0       	ldi	r25, 0x04	; 4
    10a4:	9f 93       	push	r25
    10a6:	8f 93       	push	r24
    10a8:	0e 94 59 31 	call	0x62b2	; 0x62b2 <printf>
	
	// Configure to EU868 LoRaWAN standards
	printf("Configure to EU868 >%s<\n", lora_driver_map_return_code_to_text(lora_driver_configure_to_eu868()));
    10ac:	0e 94 dc 24 	call	0x49b8	; 0x49b8 <lora_driver_configure_to_eu868>
    10b0:	0e 94 db 25 	call	0x4bb6	; 0x4bb6 <lora_driver_map_return_code_to_text>
    10b4:	9f 93       	push	r25
    10b6:	8f 93       	push	r24
    10b8:	83 e4       	ldi	r24, 0x43	; 67
    10ba:	94 e0       	ldi	r25, 0x04	; 4
    10bc:	9f 93       	push	r25
    10be:	8f 93       	push	r24
    10c0:	0e 94 59 31 	call	0x62b2	; 0x62b2 <printf>

	// Get the transceivers HW EUI
	rc = lora_driver_get_rn2483_hweui(_out_buf);
    10c4:	8f ed       	ldi	r24, 0xDF	; 223
    10c6:	98 e0       	ldi	r25, 0x08	; 8
    10c8:	0e 94 70 23 	call	0x46e0	; 0x46e0 <lora_driver_get_rn2483_hweui>
	printf("Get HWEUI >%s<: %s\n",lora_driver_map_return_code_to_text(rc), _out_buf);
    10cc:	0e 94 db 25 	call	0x4bb6	; 0x4bb6 <lora_driver_map_return_code_to_text>
    10d0:	cf ed       	ldi	r28, 0xDF	; 223
    10d2:	d8 e0       	ldi	r29, 0x08	; 8
    10d4:	df 93       	push	r29
    10d6:	cf 93       	push	r28
    10d8:	9f 93       	push	r25
    10da:	8f 93       	push	r24
    10dc:	8c e5       	ldi	r24, 0x5C	; 92
    10de:	94 e0       	ldi	r25, 0x04	; 4
    10e0:	9f 93       	push	r25
    10e2:	8f 93       	push	r24
    10e4:	0e 94 59 31 	call	0x62b2	; 0x62b2 <printf>

	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_map_return_code_to_text(lora_driver_set_device_identifier(_out_buf)));
    10e8:	ce 01       	movw	r24, r28
    10ea:	0e 94 8c 23 	call	0x4718	; 0x4718 <lora_driver_set_device_identifier>
    10ee:	0e 94 db 25 	call	0x4bb6	; 0x4bb6 <lora_driver_map_return_code_to_text>
    10f2:	9f 93       	push	r25
    10f4:	8f 93       	push	r24
    10f6:	df 93       	push	r29
    10f8:	cf 93       	push	r28
    10fa:	80 e7       	ldi	r24, 0x70	; 112
    10fc:	94 e0       	ldi	r25, 0x04	; 4
    10fe:	9f 93       	push	r25
    1100:	8f 93       	push	r24
    1102:	0e 94 59 31 	call	0x62b2	; 0x62b2 <printf>

	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_map_return_code_to_text(lora_driver_set_otaa_identity(LORA_appEUI,LORA_appKEY,_out_buf)));
    1106:	ae 01       	movw	r20, r28
    1108:	65 e8       	ldi	r22, 0x85	; 133
    110a:	74 e0       	ldi	r23, 0x04	; 4
    110c:	86 ea       	ldi	r24, 0xA6	; 166
    110e:	94 e0       	ldi	r25, 0x04	; 4
    1110:	0e 94 ba 25 	call	0x4b74	; 0x4b74 <lora_driver_set_otaa_identity>
    1114:	0e 94 db 25 	call	0x4bb6	; 0x4bb6 <lora_driver_map_return_code_to_text>
    1118:	9f 93       	push	r25
    111a:	8f 93       	push	r24
    111c:	df 93       	push	r29
    111e:	cf 93       	push	r28
    1120:	85 e8       	ldi	r24, 0x85	; 133
    1122:	94 e0       	ldi	r25, 0x04	; 4
    1124:	9f 93       	push	r25
    1126:	8f 93       	push	r24
    1128:	86 ea       	ldi	r24, 0xA6	; 166
    112a:	94 e0       	ldi	r25, 0x04	; 4
    112c:	9f 93       	push	r25
    112e:	8f 93       	push	r24
    1130:	87 eb       	ldi	r24, 0xB7	; 183
    1132:	94 e0       	ldi	r25, 0x04	; 4
    1134:	9f 93       	push	r25
    1136:	8f 93       	push	r24
    1138:	0e 94 59 31 	call	0x62b2	; 0x62b2 <printf>

	// Save all the MAC settings in the transceiver
	printf("Save mac >%s<\n",lora_driver_map_return_code_to_text(lora_driver_save_mac()));
    113c:	0e 94 bf 23 	call	0x477e	; 0x477e <lora_driver_save_mac>
    1140:	0e 94 db 25 	call	0x4bb6	; 0x4bb6 <lora_driver_map_return_code_to_text>
    1144:	9f 93       	push	r25
    1146:	8f 93       	push	r24
    1148:	8d ee       	ldi	r24, 0xED	; 237
    114a:	94 e0       	ldi	r25, 0x04	; 4
    114c:	9f 93       	push	r25
    114e:	8f 93       	push	r24
    1150:	0e 94 59 31 	call	0x62b2	; 0x62b2 <printf>

	//END OF ONE TIME USE CODE
	
	
	// Enable Adaptive Data Rate
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_map_return_code_to_text(lora_driver_set_adaptive_data_rate(LoRa_ON)));
    1154:	8d b7       	in	r24, 0x3d	; 61
    1156:	9e b7       	in	r25, 0x3e	; 62
    1158:	82 96       	adiw	r24, 0x22	; 34
    115a:	0f b6       	in	r0, 0x3f	; 63
    115c:	f8 94       	cli
    115e:	9e bf       	out	0x3e, r25	; 62
    1160:	0f be       	out	0x3f, r0	; 63
    1162:	8d bf       	out	0x3d, r24	; 61
    1164:	81 e0       	ldi	r24, 0x01	; 1
    1166:	0e 94 b9 24 	call	0x4972	; 0x4972 <lora_driver_set_adaptive_data_rate>
    116a:	0e 94 db 25 	call	0x4bb6	; 0x4bb6 <lora_driver_map_return_code_to_text>
    116e:	9f 93       	push	r25
    1170:	8f 93       	push	r24
    1172:	8c ef       	ldi	r24, 0xFC	; 252
    1174:	94 e0       	ldi	r25, 0x04	; 4
    1176:	9f 93       	push	r25
    1178:	8f 93       	push	r24
    117a:	0e 94 59 31 	call	0x62b2	; 0x62b2 <printf>

	// Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	printf("Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_map_return_code_to_text(lora_driver_set_receive_delay(500)));
    117e:	84 ef       	ldi	r24, 0xF4	; 244
    1180:	91 e0       	ldi	r25, 0x01	; 1
    1182:	0e 94 c4 24 	call	0x4988	; 0x4988 <lora_driver_set_receive_delay>
    1186:	0e 94 db 25 	call	0x4bb6	; 0x4bb6 <lora_driver_map_return_code_to_text>
    118a:	9f 93       	push	r25
    118c:	8f 93       	push	r24
    118e:	81 e0       	ldi	r24, 0x01	; 1
    1190:	8f 93       	push	r24
    1192:	84 ef       	ldi	r24, 0xF4	; 244
    1194:	8f 93       	push	r24
    1196:	8d e1       	ldi	r24, 0x1D	; 29
    1198:	95 e0       	ldi	r25, 0x05	; 5
    119a:	9f 93       	push	r25
    119c:	8f 93       	push	r24
    119e:	0e 94 59 31 	call	0x62b2	; 0x62b2 <printf>
    11a2:	8d b7       	in	r24, 0x3d	; 61
    11a4:	9e b7       	in	r25, 0x3e	; 62
    11a6:	0a 96       	adiw	r24, 0x0a	; 10
    11a8:	0f b6       	in	r0, 0x3f	; 63
    11aa:	f8 94       	cli
    11ac:	9e bf       	out	0x3e, r25	; 62
    11ae:	0f be       	out	0x3f, r0	; 63
    11b0:	8d bf       	out	0x3d, r24	; 61
    11b2:	ca e0       	ldi	r28, 0x0A	; 10
    11b4:	d0 e0       	ldi	r29, 0x00	; 0
	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
	
	do {
		rc = lora_driver_join(LoRa_OTAA);
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_map_return_code_to_text(rc));
    11b6:	0d e3       	ldi	r16, 0x3D	; 61
    11b8:	15 e0       	ldi	r17, 0x05	; 5

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
	
	do {
		rc = lora_driver_join(LoRa_OTAA);
    11ba:	80 e0       	ldi	r24, 0x00	; 0
    11bc:	0e 94 c5 23 	call	0x478a	; 0x478a <lora_driver_join>
    11c0:	d8 2e       	mov	r13, r24
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_map_return_code_to_text(rc));
    11c2:	0e 94 db 25 	call	0x4bb6	; 0x4bb6 <lora_driver_map_return_code_to_text>
    11c6:	9f 93       	push	r25
    11c8:	8f 93       	push	r24
    11ca:	df 93       	push	r29
    11cc:	cf 93       	push	r28
    11ce:	1f 93       	push	r17
    11d0:	0f 93       	push	r16
    11d2:	0e 94 59 31 	call	0x62b2	; 0x62b2 <printf>

		if ( rc != LoRa_ACCEPTED)
    11d6:	0f 90       	pop	r0
    11d8:	0f 90       	pop	r0
    11da:	0f 90       	pop	r0
    11dc:	0f 90       	pop	r0
    11de:	0f 90       	pop	r0
    11e0:	0f 90       	pop	r0
    11e2:	88 e0       	ldi	r24, 0x08	; 8
    11e4:	d8 16       	cp	r13, r24
    11e6:	89 f1       	breq	.+98     	; 0x124a <lora_UpLinkHandler_task+0x1fc>
		{
			// Make the red led pulse to tell something went wrong
			led_long_puls(led_ST1); // OPTIONAL
    11e8:	80 e0       	ldi	r24, 0x00	; 0
    11ea:	0e 94 c4 21 	call	0x4388	; 0x4388 <led_long_puls>
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
    11ee:	66 e3       	ldi	r22, 0x36	; 54
    11f0:	71 e0       	ldi	r23, 0x01	; 1
    11f2:	80 e0       	ldi	r24, 0x00	; 0
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	0e 94 02 18 	call	0x3004	; 0x3004 <vTaskDelay>
    11fa:	21 97       	sbiw	r28, 0x01	; 1
		}
		else
		{
			break;
		}
	} while (--maxJoinTriesLeft);
    11fc:	f1 f6       	brne	.-68     	; 0x11ba <lora_UpLinkHandler_task+0x16c>
    11fe:	2c c0       	rjmp	.+88     	; 0x1258 <lora_UpLinkHandler_task+0x20a>
		led_fast_blink(led_ST1); // OPTIONAL

		// Lets stay here
		while (1)
		{
			taskYIELD();
    1200:	3f d4       	rcall	.+2174   	; 0x1a80 <vPortYield>
    1202:	fe cf       	rjmp	.-4      	; 0x1200 <lora_UpLinkHandler_task+0x1b2>
			isSet=true;
		}
		

		
		xBytesToSend = xMessageBufferReceive(xMessageBuffer, (void*) &_uplink_payload,
    1204:	00 e0       	ldi	r16, 0x00	; 0
    1206:	10 e0       	ldi	r17, 0x00	; 0
    1208:	98 01       	movw	r18, r16
    120a:	42 e3       	ldi	r20, 0x32	; 50
    120c:	50 e0       	ldi	r21, 0x00	; 0
    120e:	69 ec       	ldi	r22, 0xC9	; 201
    1210:	78 e0       	ldi	r23, 0x08	; 8
    1212:	c7 01       	movw	r24, r14
    1214:	0e 94 ff 13 	call	0x27fe	; 0x27fe <xStreamBufferReceive>
		sizeof(rxData),0);
		if(xBytesToSend >= sizeof(uint8_t)*2)
    1218:	02 97       	sbiw	r24, 0x02	; 2
    121a:	28 f1       	brcs	.+74     	; 0x1266 <lora_UpLinkHandler_task+0x218>
			//_uplink_payload = (_uplink_payload) &rxData;
			
			/**< Status led ST4 (BLUE)*/
			//Makes the led light up in a short period.
			
			led_short_puls(led_ST4);
    121c:	83 e0       	ldi	r24, 0x03	; 3
    121e:	0e 94 d6 21 	call	0x43ac	; 0x43ac <led_short_puls>
			//printf("The temperature2 in upLink is: %d\n", _uplink_payload.bytes[1]);
			//printf("The humidity in upLink is: %u\n", _uplink_payload.bytes[2]);
			//printf("The humidity2 in upLink is: %u\n", _uplink_payload.bytes[3]);
			
			
			printf("Upload Message >%s<\n", lora_driver_map_return_code_to_text(lora_driver_sent_upload_message(false, &_uplink_payload)));
    1222:	69 ec       	ldi	r22, 0xC9	; 201
    1224:	78 e0       	ldi	r23, 0x08	; 8
    1226:	80 e0       	ldi	r24, 0x00	; 0
    1228:	0e 94 ee 23 	call	0x47dc	; 0x47dc <lora_driver_sent_upload_message>
    122c:	0e 94 db 25 	call	0x4bb6	; 0x4bb6 <lora_driver_map_return_code_to_text>
    1230:	9f 93       	push	r25
    1232:	8f 93       	push	r24
    1234:	8d e5       	ldi	r24, 0x5D	; 93
    1236:	95 e0       	ldi	r25, 0x05	; 5
    1238:	9f 93       	push	r25
    123a:	8f 93       	push	r24
    123c:	0e 94 59 31 	call	0x62b2	; 0x62b2 <printf>
    1240:	0f 90       	pop	r0
    1242:	0f 90       	pop	r0
    1244:	0f 90       	pop	r0
    1246:	0f 90       	pop	r0
		}
	}
    1248:	0e c0       	rjmp	.+28     	; 0x1266 <lora_UpLinkHandler_task+0x218>

	if (rc == LoRa_ACCEPTED)
	{
		// Connected to LoRaWAN :-)
		// Make the green led steady
		led_led_on(led_ST2); // OPTIONAL
    124a:	81 e0       	ldi	r24, 0x01	; 1
    124c:	0e 94 a6 21 	call	0x434c	; 0x434c <led_led_on>
			vTaskDelay(150);

			lora_driver_flush_buffers(); // get rid of first version string from module after reset!

			_lora_setup();
			isSet=true;
    1250:	81 e0       	ldi	r24, 0x01	; 1
    1252:	80 93 c8 08 	sts	0x08C8, r24	; 0x8008c8 <isSet>
    1256:	d6 cf       	rjmp	.-84     	; 0x1204 <lora_UpLinkHandler_task+0x1b6>
	}
	else
	{
		// Something went wrong
		// Turn off the green led
		led_led_off(led_ST2); // OPTIONAL
    1258:	81 e0       	ldi	r24, 0x01	; 1
    125a:	0e 94 b5 21 	call	0x436a	; 0x436a <led_led_off>
		// Make the red led blink fast to tell something went wrong
		led_fast_blink(led_ST1); // OPTIONAL
    125e:	80 e0       	ldi	r24, 0x00	; 0
    1260:	0e 94 7f 21 	call	0x42fe	; 0x42fe <led_fast_blink>
    1264:	cd cf       	rjmp	.-102    	; 0x1200 <lora_UpLinkHandler_task+0x1b2>
			//printf("The humidity2 in upLink is: %u\n", _uplink_payload.bytes[3]);
			
			
			printf("Upload Message >%s<\n", lora_driver_map_return_code_to_text(lora_driver_sent_upload_message(false, &_uplink_payload)));
		}
	}
    1266:	df 91       	pop	r29
    1268:	cf 91       	pop	r28
    126a:	1f 91       	pop	r17
    126c:	0f 91       	pop	r16
    126e:	ff 90       	pop	r15
    1270:	ef 90       	pop	r14
    1272:	df 90       	pop	r13
    1274:	08 95       	ret

00001276 <lora_UpLinkHandler_startTask>:
static bool isSet=false;

/*Check for the parameters*/


void lora_UpLinkHandler_startTask(void* xMessageBuffer){
    1276:	ec 01       	movw	r28, r24
	for(;;)
	{
		lora_UpLinkHandler_task((MessageBufferHandle_t)xMessageBuffer);
    1278:	ce 01       	movw	r24, r28
    127a:	e9 de       	rcall	.-558    	; 0x104e <lora_UpLinkHandler_task>
		vTaskDelay(3000);
    127c:	68 eb       	ldi	r22, 0xB8	; 184
    127e:	7b e0       	ldi	r23, 0x0B	; 11
    1280:	80 e0       	ldi	r24, 0x00	; 0
    1282:	90 e0       	ldi	r25, 0x00	; 0
    1284:	0e 94 02 18 	call	0x3004	; 0x3004 <vTaskDelay>
    1288:	f7 cf       	rjmp	.-18     	; 0x1278 <lora_UpLinkHandler_startTask+0x2>

0000128a <task_switch_in>:
	void task_switch_in(uint8_t task_no) {
		 #ifdef HAL_DEFS_H_

		 #else
		 // Used on VIA MEGA Shield rev. 2.0.0
		 PORTK &= 0b11110000;
    128a:	e8 e0       	ldi	r30, 0x08	; 8
    128c:	f1 e0       	ldi	r31, 0x01	; 1
    128e:	90 81       	ld	r25, Z
    1290:	90 7f       	andi	r25, 0xF0	; 240
    1292:	90 83       	st	Z, r25
		 PORTK |= (task_no & 0b00001111);
    1294:	90 81       	ld	r25, Z
    1296:	8f 70       	andi	r24, 0x0F	; 15
    1298:	98 2b       	or	r25, r24
    129a:	90 83       	st	Z, r25
    129c:	08 95       	ret

0000129e <task_switch_out>:
	void task_switch_out(uint8_t task_no) {
		#ifdef HAL_DEFS_H_

		#else
		// Used on VIA MEGA Shield rev. 2.0.0
		PORTK &= 0b11110000;
    129e:	e8 e0       	ldi	r30, 0x08	; 8
    12a0:	f1 e0       	ldi	r31, 0x01	; 1
    12a2:	80 81       	ld	r24, Z
    12a4:	80 7f       	andi	r24, 0xF0	; 240
    12a6:	80 83       	st	Z, r24
    12a8:	08 95       	ret

000012aa <xEventGroupCreate>:
        uxReturn = pxEventBits->uxEventBits;
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
    12aa:	cf 93       	push	r28
    12ac:	df 93       	push	r29
    12ae:	80 e1       	ldi	r24, 0x10	; 16
    12b0:	90 e0       	ldi	r25, 0x00	; 0
    12b2:	b4 d1       	rcall	.+872    	; 0x161c <pvPortMalloc>
    12b4:	ec 01       	movw	r28, r24
    12b6:	00 97       	sbiw	r24, 0x00	; 0
    12b8:	39 f0       	breq	.+14     	; 0x12c8 <xEventGroupCreate+0x1e>
    12ba:	fc 01       	movw	r30, r24
    12bc:	11 92       	st	Z+, r1
    12be:	11 92       	st	Z+, r1
    12c0:	11 92       	st	Z+, r1
    12c2:	11 92       	st	Z+, r1
    12c4:	cf 01       	movw	r24, r30
    12c6:	94 d2       	rcall	.+1320   	; 0x17f0 <vListInitialise>
    12c8:	ce 01       	movw	r24, r28
    12ca:	df 91       	pop	r29
    12cc:	cf 91       	pop	r28
    12ce:	08 95       	ret

000012d0 <xEventGroupWaitBits>:
    12d0:	2f 92       	push	r2
    12d2:	3f 92       	push	r3
    12d4:	4f 92       	push	r4
    12d6:	5f 92       	push	r5
    12d8:	6f 92       	push	r6
    12da:	7f 92       	push	r7
    12dc:	8f 92       	push	r8
    12de:	9f 92       	push	r9
    12e0:	af 92       	push	r10
    12e2:	bf 92       	push	r11
    12e4:	cf 92       	push	r12
    12e6:	df 92       	push	r13
    12e8:	ef 92       	push	r14
    12ea:	ff 92       	push	r15
    12ec:	0f 93       	push	r16
    12ee:	1f 93       	push	r17
    12f0:	cf 93       	push	r28
    12f2:	df 93       	push	r29
    12f4:	ec 01       	movw	r28, r24
    12f6:	4a 01       	movw	r8, r20
    12f8:	5b 01       	movw	r10, r22
    12fa:	62 2e       	mov	r6, r18
    12fc:	70 2e       	mov	r7, r16
    12fe:	0e 94 9d 16 	call	0x2d3a	; 0x2d3a <vTaskSuspendAll>
    1302:	28 80       	ld	r2, Y
    1304:	39 80       	ldd	r3, Y+1	; 0x01
    1306:	4a 80       	ldd	r4, Y+2	; 0x02
    1308:	5b 80       	ldd	r5, Y+3	; 0x03
    130a:	01 11       	cpse	r16, r1
    130c:	0d c0       	rjmp	.+26     	; 0x1328 <xEventGroupWaitBits+0x58>
    130e:	81 e0       	ldi	r24, 0x01	; 1
    1310:	b2 01       	movw	r22, r4
    1312:	a1 01       	movw	r20, r2
    1314:	48 21       	and	r20, r8
    1316:	59 21       	and	r21, r9
    1318:	6a 21       	and	r22, r10
    131a:	7b 21       	and	r23, r11
    131c:	45 2b       	or	r20, r21
    131e:	46 2b       	or	r20, r22
    1320:	47 2b       	or	r20, r23
    1322:	79 f4       	brne	.+30     	; 0x1342 <xEventGroupWaitBits+0x72>
    1324:	80 e0       	ldi	r24, 0x00	; 0
    1326:	0d c0       	rjmp	.+26     	; 0x1342 <xEventGroupWaitBits+0x72>
    1328:	81 e0       	ldi	r24, 0x01	; 1
    132a:	b2 01       	movw	r22, r4
    132c:	a1 01       	movw	r20, r2
    132e:	48 21       	and	r20, r8
    1330:	59 21       	and	r21, r9
    1332:	6a 21       	and	r22, r10
    1334:	7b 21       	and	r23, r11
    1336:	48 15       	cp	r20, r8
    1338:	59 05       	cpc	r21, r9
    133a:	6a 05       	cpc	r22, r10
    133c:	7b 05       	cpc	r23, r11
    133e:	09 f0       	breq	.+2      	; 0x1342 <xEventGroupWaitBits+0x72>
    1340:	80 e0       	ldi	r24, 0x00	; 0
    1342:	88 23       	and	r24, r24
    1344:	81 f0       	breq	.+32     	; 0x1366 <xEventGroupWaitBits+0x96>
    1346:	66 20       	and	r6, r6
    1348:	09 f4       	brne	.+2      	; 0x134c <xEventGroupWaitBits+0x7c>
    134a:	6b c0       	rjmp	.+214    	; 0x1422 <xEventGroupWaitBits+0x152>
    134c:	80 94       	com	r8
    134e:	90 94       	com	r9
    1350:	a0 94       	com	r10
    1352:	b0 94       	com	r11
    1354:	82 20       	and	r8, r2
    1356:	93 20       	and	r9, r3
    1358:	a4 20       	and	r10, r4
    135a:	b5 20       	and	r11, r5
    135c:	88 82       	st	Y, r8
    135e:	99 82       	std	Y+1, r9	; 0x01
    1360:	aa 82       	std	Y+2, r10	; 0x02
    1362:	bb 82       	std	Y+3, r11	; 0x03
    1364:	5e c0       	rjmp	.+188    	; 0x1422 <xEventGroupWaitBits+0x152>
    1366:	c1 14       	cp	r12, r1
    1368:	d1 04       	cpc	r13, r1
    136a:	e1 04       	cpc	r14, r1
    136c:	f1 04       	cpc	r15, r1
    136e:	09 f4       	brne	.+2      	; 0x1372 <xEventGroupWaitBits+0xa2>
    1370:	58 c0       	rjmp	.+176    	; 0x1422 <xEventGroupWaitBits+0x152>
    1372:	66 20       	and	r6, r6
    1374:	29 f0       	breq	.+10     	; 0x1380 <xEventGroupWaitBits+0xb0>
    1376:	40 e0       	ldi	r20, 0x00	; 0
    1378:	50 e0       	ldi	r21, 0x00	; 0
    137a:	60 e0       	ldi	r22, 0x00	; 0
    137c:	71 e0       	ldi	r23, 0x01	; 1
    137e:	03 c0       	rjmp	.+6      	; 0x1386 <xEventGroupWaitBits+0xb6>
    1380:	40 e0       	ldi	r20, 0x00	; 0
    1382:	50 e0       	ldi	r21, 0x00	; 0
    1384:	ba 01       	movw	r22, r20
    1386:	71 10       	cpse	r7, r1
    1388:	74 60       	ori	r23, 0x04	; 4
    138a:	48 29       	or	r20, r8
    138c:	59 29       	or	r21, r9
    138e:	6a 29       	or	r22, r10
    1390:	7b 29       	or	r23, r11
    1392:	97 01       	movw	r18, r14
    1394:	86 01       	movw	r16, r12
    1396:	ce 01       	movw	r24, r28
    1398:	04 96       	adiw	r24, 0x04	; 4
    139a:	0e 94 b1 18 	call	0x3162	; 0x3162 <vTaskPlaceOnUnorderedEventList>
    139e:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <xTaskResumeAll>
    13a2:	81 11       	cpse	r24, r1
    13a4:	01 c0       	rjmp	.+2      	; 0x13a8 <xEventGroupWaitBits+0xd8>
    13a6:	6c d3       	rcall	.+1752   	; 0x1a80 <vPortYield>
    13a8:	0e 94 f8 1a 	call	0x35f0	; 0x35f0 <uxTaskResetEventItemValue>
    13ac:	91 fd       	sbrc	r25, 1
    13ae:	35 c0       	rjmp	.+106    	; 0x141a <xEventGroupWaitBits+0x14a>
    13b0:	0f b6       	in	r0, 0x3f	; 63
    13b2:	f8 94       	cli
    13b4:	0f 92       	push	r0
    13b6:	68 81       	ld	r22, Y
    13b8:	79 81       	ldd	r23, Y+1	; 0x01
    13ba:	8a 81       	ldd	r24, Y+2	; 0x02
    13bc:	9b 81       	ldd	r25, Y+3	; 0x03
    13be:	71 10       	cpse	r7, r1
    13c0:	0d c0       	rjmp	.+26     	; 0x13dc <xEventGroupWaitBits+0x10c>
    13c2:	21 e0       	ldi	r18, 0x01	; 1
    13c4:	75 01       	movw	r14, r10
    13c6:	64 01       	movw	r12, r8
    13c8:	c6 22       	and	r12, r22
    13ca:	d7 22       	and	r13, r23
    13cc:	e8 22       	and	r14, r24
    13ce:	f9 22       	and	r15, r25
    13d0:	cd 28       	or	r12, r13
    13d2:	ce 28       	or	r12, r14
    13d4:	cf 28       	or	r12, r15
    13d6:	79 f4       	brne	.+30     	; 0x13f6 <xEventGroupWaitBits+0x126>
    13d8:	20 e0       	ldi	r18, 0x00	; 0
    13da:	0d c0       	rjmp	.+26     	; 0x13f6 <xEventGroupWaitBits+0x126>
    13dc:	21 e0       	ldi	r18, 0x01	; 1
    13de:	75 01       	movw	r14, r10
    13e0:	64 01       	movw	r12, r8
    13e2:	c6 22       	and	r12, r22
    13e4:	d7 22       	and	r13, r23
    13e6:	e8 22       	and	r14, r24
    13e8:	f9 22       	and	r15, r25
    13ea:	c8 14       	cp	r12, r8
    13ec:	d9 04       	cpc	r13, r9
    13ee:	ea 04       	cpc	r14, r10
    13f0:	fb 04       	cpc	r15, r11
    13f2:	09 f0       	breq	.+2      	; 0x13f6 <xEventGroupWaitBits+0x126>
    13f4:	20 e0       	ldi	r18, 0x00	; 0
    13f6:	22 23       	and	r18, r18
    13f8:	71 f0       	breq	.+28     	; 0x1416 <xEventGroupWaitBits+0x146>
    13fa:	66 20       	and	r6, r6
    13fc:	61 f0       	breq	.+24     	; 0x1416 <xEventGroupWaitBits+0x146>
    13fe:	80 94       	com	r8
    1400:	90 94       	com	r9
    1402:	a0 94       	com	r10
    1404:	b0 94       	com	r11
    1406:	86 22       	and	r8, r22
    1408:	97 22       	and	r9, r23
    140a:	a8 22       	and	r10, r24
    140c:	b9 22       	and	r11, r25
    140e:	88 82       	st	Y, r8
    1410:	99 82       	std	Y+1, r9	; 0x01
    1412:	aa 82       	std	Y+2, r10	; 0x02
    1414:	bb 82       	std	Y+3, r11	; 0x03
    1416:	0f 90       	pop	r0
    1418:	0f be       	out	0x3f, r0	; 63
    141a:	1b 01       	movw	r2, r22
    141c:	2c 01       	movw	r4, r24
    141e:	55 24       	eor	r5, r5
    1420:	02 c0       	rjmp	.+4      	; 0x1426 <xEventGroupWaitBits+0x156>
    1422:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <xTaskResumeAll>
    1426:	c2 01       	movw	r24, r4
    1428:	b1 01       	movw	r22, r2
    142a:	df 91       	pop	r29
    142c:	cf 91       	pop	r28
    142e:	1f 91       	pop	r17
    1430:	0f 91       	pop	r16
    1432:	ff 90       	pop	r15
    1434:	ef 90       	pop	r14
    1436:	df 90       	pop	r13
    1438:	cf 90       	pop	r12
    143a:	bf 90       	pop	r11
    143c:	af 90       	pop	r10
    143e:	9f 90       	pop	r9
    1440:	8f 90       	pop	r8
    1442:	7f 90       	pop	r7
    1444:	6f 90       	pop	r6
    1446:	5f 90       	pop	r5
    1448:	4f 90       	pop	r4
    144a:	3f 90       	pop	r3
    144c:	2f 90       	pop	r2
    144e:	08 95       	ret

00001450 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
    1450:	4f 92       	push	r4
    1452:	5f 92       	push	r5
    1454:	6f 92       	push	r6
    1456:	7f 92       	push	r7
    1458:	8f 92       	push	r8
    145a:	9f 92       	push	r9
    145c:	af 92       	push	r10
    145e:	bf 92       	push	r11
    1460:	cf 92       	push	r12
    1462:	df 92       	push	r13
    1464:	ef 92       	push	r14
    1466:	ff 92       	push	r15
    1468:	0f 93       	push	r16
    146a:	1f 93       	push	r17
    146c:	cf 93       	push	r28
    146e:	df 93       	push	r29
    1470:	ec 01       	movw	r28, r24
    1472:	6a 01       	movw	r12, r20
    1474:	7b 01       	movw	r14, r22
    itself. */
    configASSERT( xEventGroup );
    configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

    pxList = &( pxEventBits->xTasksWaitingForBits );
    pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1476:	8c 01       	movw	r16, r24
    1478:	09 5f       	subi	r16, 0xF9	; 249
    147a:	1f 4f       	sbci	r17, 0xFF	; 255
    vTaskSuspendAll();
    147c:	0e 94 9d 16 	call	0x2d3a	; 0x2d3a <vTaskSuspendAll>
    {
        traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

        pxListItem = listGET_HEAD_ENTRY( pxList );
    1480:	eb 85       	ldd	r30, Y+11	; 0x0b
    1482:	fc 85       	ldd	r31, Y+12	; 0x0c

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;
    1484:	88 81       	ld	r24, Y
    1486:	99 81       	ldd	r25, Y+1	; 0x01
    1488:	aa 81       	ldd	r26, Y+2	; 0x02
    148a:	bb 81       	ldd	r27, Y+3	; 0x03
    148c:	c8 2a       	or	r12, r24
    148e:	d9 2a       	or	r13, r25
    1490:	ea 2a       	or	r14, r26
    1492:	fb 2a       	or	r15, r27
    1494:	c8 82       	st	Y, r12
    1496:	d9 82       	std	Y+1, r13	; 0x01
    1498:	ea 82       	std	Y+2, r14	; 0x02
    149a:	fb 82       	std	Y+3, r15	; 0x03

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
    149c:	0e 17       	cp	r16, r30
    149e:	1f 07       	cpc	r17, r31
    14a0:	09 f4       	brne	.+2      	; 0x14a4 <xEventGroupSetBits+0x54>
    14a2:	45 c0       	rjmp	.+138    	; 0x152e <xEventGroupSetBits+0xde>
    14a4:	c1 2c       	mov	r12, r1
    14a6:	d1 2c       	mov	r13, r1
    14a8:	76 01       	movw	r14, r12
            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
                {
                    xMatchFound = pdTRUE;
    14aa:	99 24       	eor	r9, r9
    14ac:	93 94       	inc	r9
    14ae:	81 2c       	mov	r8, r1
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
    14b0:	a4 80       	ldd	r10, Z+4	; 0x04
    14b2:	b5 80       	ldd	r11, Z+5	; 0x05
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
    14b4:	80 81       	ld	r24, Z
    14b6:	91 81       	ldd	r25, Z+1	; 0x01
    14b8:	a2 81       	ldd	r26, Z+2	; 0x02
    14ba:	b3 81       	ldd	r27, Z+3	; 0x03
            xMatchFound = pdFALSE;

            /* Split the bits waited for from the control bits. */
            uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
            uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
    14bc:	ac 01       	movw	r20, r24
    14be:	bd 01       	movw	r22, r26
    14c0:	77 27       	eor	r23, r23

            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
    14c2:	b2 fd       	sbrc	r27, 2
    14c4:	0f c0       	rjmp	.+30     	; 0x14e4 <xEventGroupSetBits+0x94>
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
                {
                    xMatchFound = pdTRUE;
    14c6:	48 80       	ld	r4, Y
    14c8:	59 80       	ldd	r5, Y+1	; 0x01
    14ca:	6a 80       	ldd	r6, Y+2	; 0x02
    14cc:	7b 80       	ldd	r7, Y+3	; 0x03
    14ce:	44 22       	and	r4, r20
    14d0:	55 22       	and	r5, r21
    14d2:	66 22       	and	r6, r22
    14d4:	77 22       	and	r7, r23
    14d6:	29 2d       	mov	r18, r9
    14d8:	45 28       	or	r4, r5
    14da:	46 28       	or	r4, r6
    14dc:	47 28       	or	r4, r7
    14de:	89 f4       	brne	.+34     	; 0x1502 <xEventGroupSetBits+0xb2>
    14e0:	28 2d       	mov	r18, r8
    14e2:	0f c0       	rjmp	.+30     	; 0x1502 <xEventGroupSetBits+0xb2>
    14e4:	48 80       	ld	r4, Y
    14e6:	59 80       	ldd	r5, Y+1	; 0x01
    14e8:	6a 80       	ldd	r6, Y+2	; 0x02
    14ea:	7b 80       	ldd	r7, Y+3	; 0x03
    14ec:	44 22       	and	r4, r20
    14ee:	55 22       	and	r5, r21
    14f0:	66 22       	and	r6, r22
    14f2:	77 22       	and	r7, r23
    14f4:	29 2d       	mov	r18, r9
    14f6:	44 16       	cp	r4, r20
    14f8:	55 06       	cpc	r5, r21
    14fa:	66 06       	cpc	r6, r22
    14fc:	77 06       	cpc	r7, r23
    14fe:	09 f0       	breq	.+2      	; 0x1502 <xEventGroupSetBits+0xb2>
    1500:	28 2d       	mov	r18, r8
            else
            {
                /* Need all bits to be set, but not all the bits were set. */
            }

            if( xMatchFound != pdFALSE )
    1502:	22 23       	and	r18, r18
    1504:	71 f0       	breq	.+28     	; 0x1522 <xEventGroupSetBits+0xd2>
            {
                /* The bits match.  Should the bits be cleared on exit? */
                if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
    1506:	b0 ff       	sbrs	r27, 0
    1508:	04 c0       	rjmp	.+8      	; 0x1512 <xEventGroupSetBits+0xc2>
                {
                    uxBitsToClear |= uxBitsWaitedFor;
    150a:	c4 2a       	or	r12, r20
    150c:	d5 2a       	or	r13, r21
    150e:	e6 2a       	or	r14, r22
    1510:	f7 2a       	or	r15, r23
                /* Store the actual event flag value in the task's event list
                item before removing the task from the event list.  The
                eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                that is was unblocked due to its required bits matching, rather
                than because it timed out. */
                vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
    1512:	48 81       	ld	r20, Y
    1514:	59 81       	ldd	r21, Y+1	; 0x01
    1516:	6a 81       	ldd	r22, Y+2	; 0x02
    1518:	7b 81       	ldd	r23, Y+3	; 0x03
    151a:	72 60       	ori	r23, 0x02	; 2
    151c:	cf 01       	movw	r24, r30
    151e:	0e 94 37 19 	call	0x326e	; 0x326e <vTaskRemoveFromUnorderedEventList>
    1522:	ea 2d       	mov	r30, r10
    1524:	fb 2d       	mov	r31, r11

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
    1526:	0e 17       	cp	r16, r30
    1528:	1f 07       	cpc	r17, r31
    152a:	11 f6       	brne	.-124    	; 0x14b0 <xEventGroupSetBits+0x60>
    152c:	03 c0       	rjmp	.+6      	; 0x1534 <xEventGroupSetBits+0xe4>
EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
    152e:	c1 2c       	mov	r12, r1
    1530:	d1 2c       	mov	r13, r1
    1532:	76 01       	movw	r14, r12
            pxListItem = pxNext;
        }

        /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
        bit was set in the control word. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
    1534:	c0 94       	com	r12
    1536:	d0 94       	com	r13
    1538:	e0 94       	com	r14
    153a:	f0 94       	com	r15
    153c:	88 81       	ld	r24, Y
    153e:	99 81       	ldd	r25, Y+1	; 0x01
    1540:	aa 81       	ldd	r26, Y+2	; 0x02
    1542:	bb 81       	ldd	r27, Y+3	; 0x03
    1544:	c8 22       	and	r12, r24
    1546:	d9 22       	and	r13, r25
    1548:	ea 22       	and	r14, r26
    154a:	fb 22       	and	r15, r27
    154c:	c8 82       	st	Y, r12
    154e:	d9 82       	std	Y+1, r13	; 0x01
    1550:	ea 82       	std	Y+2, r14	; 0x02
    1552:	fb 82       	std	Y+3, r15	; 0x03
    }
    ( void ) xTaskResumeAll();
    1554:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <xTaskResumeAll>

    return pxEventBits->uxEventBits;
    1558:	68 81       	ld	r22, Y
    155a:	79 81       	ldd	r23, Y+1	; 0x01
    155c:	8a 81       	ldd	r24, Y+2	; 0x02
    155e:	9b 81       	ldd	r25, Y+3	; 0x03
}
    1560:	df 91       	pop	r29
    1562:	cf 91       	pop	r28
    1564:	1f 91       	pop	r17
    1566:	0f 91       	pop	r16
    1568:	ff 90       	pop	r15
    156a:	ef 90       	pop	r14
    156c:	df 90       	pop	r13
    156e:	cf 90       	pop	r12
    1570:	bf 90       	pop	r11
    1572:	af 90       	pop	r10
    1574:	9f 90       	pop	r9
    1576:	8f 90       	pop	r8
    1578:	7f 90       	pop	r7
    157a:	6f 90       	pop	r6
    157c:	5f 90       	pop	r5
    157e:	4f 90       	pop	r4
    1580:	08 95       	ret

00001582 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
    1582:	cf 93       	push	r28
    1584:	df 93       	push	r29
    1586:	dc 01       	movw	r26, r24
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
    1588:	eb e4       	ldi	r30, 0x4B	; 75
    158a:	f9 e0       	ldi	r31, 0x09	; 9
    158c:	01 c0       	rjmp	.+2      	; 0x1590 <prvInsertBlockIntoFreeList+0xe>
    158e:	f9 01       	movw	r30, r18
    1590:	20 81       	ld	r18, Z
    1592:	31 81       	ldd	r19, Z+1	; 0x01
    1594:	2a 17       	cp	r18, r26
    1596:	3b 07       	cpc	r19, r27
    1598:	d0 f3       	brcs	.-12     	; 0x158e <prvInsertBlockIntoFreeList+0xc>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
    159a:	82 81       	ldd	r24, Z+2	; 0x02
    159c:	93 81       	ldd	r25, Z+3	; 0x03
    159e:	af 01       	movw	r20, r30
    15a0:	48 0f       	add	r20, r24
    15a2:	59 1f       	adc	r21, r25
    15a4:	a4 17       	cp	r26, r20
    15a6:	b5 07       	cpc	r27, r21
    15a8:	49 f4       	brne	.+18     	; 0x15bc <prvInsertBlockIntoFreeList+0x3a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
    15aa:	12 96       	adiw	r26, 0x02	; 2
    15ac:	4d 91       	ld	r20, X+
    15ae:	5c 91       	ld	r21, X
    15b0:	13 97       	sbiw	r26, 0x03	; 3
    15b2:	84 0f       	add	r24, r20
    15b4:	95 1f       	adc	r25, r21
    15b6:	93 83       	std	Z+3, r25	; 0x03
    15b8:	82 83       	std	Z+2, r24	; 0x02
    15ba:	df 01       	movw	r26, r30
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
    15bc:	12 96       	adiw	r26, 0x02	; 2
    15be:	8d 91       	ld	r24, X+
    15c0:	9c 91       	ld	r25, X
    15c2:	13 97       	sbiw	r26, 0x03	; 3
    15c4:	ed 01       	movw	r28, r26
    15c6:	c8 0f       	add	r28, r24
    15c8:	d9 1f       	adc	r29, r25
    15ca:	2c 17       	cp	r18, r28
    15cc:	3d 07       	cpc	r19, r29
    15ce:	d9 f4       	brne	.+54     	; 0x1606 <prvInsertBlockIntoFreeList+0x84>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
    15d0:	20 91 49 09 	lds	r18, 0x0949	; 0x800949 <pxEnd>
    15d4:	30 91 4a 09 	lds	r19, 0x094A	; 0x80094a <pxEnd+0x1>
    15d8:	c2 17       	cp	r28, r18
    15da:	d3 07       	cpc	r29, r19
    15dc:	81 f0       	breq	.+32     	; 0x15fe <prvInsertBlockIntoFreeList+0x7c>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
    15de:	2a 81       	ldd	r18, Y+2	; 0x02
    15e0:	3b 81       	ldd	r19, Y+3	; 0x03
    15e2:	82 0f       	add	r24, r18
    15e4:	93 1f       	adc	r25, r19
    15e6:	13 96       	adiw	r26, 0x03	; 3
    15e8:	9c 93       	st	X, r25
    15ea:	8e 93       	st	-X, r24
    15ec:	12 97       	sbiw	r26, 0x02	; 2
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
    15ee:	c0 81       	ld	r28, Z
    15f0:	d1 81       	ldd	r29, Z+1	; 0x01
    15f2:	88 81       	ld	r24, Y
    15f4:	99 81       	ldd	r25, Y+1	; 0x01
    15f6:	11 96       	adiw	r26, 0x01	; 1
    15f8:	9c 93       	st	X, r25
    15fa:	8e 93       	st	-X, r24
    15fc:	07 c0       	rjmp	.+14     	; 0x160c <prvInsertBlockIntoFreeList+0x8a>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
    15fe:	11 96       	adiw	r26, 0x01	; 1
    1600:	dc 93       	st	X, r29
    1602:	ce 93       	st	-X, r28
    1604:	03 c0       	rjmp	.+6      	; 0x160c <prvInsertBlockIntoFreeList+0x8a>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
    1606:	11 96       	adiw	r26, 0x01	; 1
    1608:	3c 93       	st	X, r19
    160a:	2e 93       	st	-X, r18

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
    160c:	ae 17       	cp	r26, r30
    160e:	bf 07       	cpc	r27, r31
    1610:	11 f0       	breq	.+4      	; 0x1616 <prvInsertBlockIntoFreeList+0x94>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
    1612:	b1 83       	std	Z+1, r27	; 0x01
    1614:	a0 83       	st	Z, r26
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    1616:	df 91       	pop	r29
    1618:	cf 91       	pop	r28
    161a:	08 95       	ret

0000161c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    161c:	cf 92       	push	r12
    161e:	df 92       	push	r13
    1620:	ef 92       	push	r14
    1622:	ff 92       	push	r15
    1624:	0f 93       	push	r16
    1626:	1f 93       	push	r17
    1628:	cf 93       	push	r28
    162a:	df 93       	push	r29
    162c:	ec 01       	movw	r28, r24
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
    162e:	0e 94 9d 16 	call	0x2d3a	; 0x2d3a <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
    1632:	80 91 49 09 	lds	r24, 0x0949	; 0x800949 <pxEnd>
    1636:	90 91 4a 09 	lds	r25, 0x094A	; 0x80094a <pxEnd+0x1>
    163a:	89 2b       	or	r24, r25
    163c:	41 f5       	brne	.+80     	; 0x168e <pvPortMalloc+0x72>

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
    163e:	eb e4       	ldi	r30, 0x4B	; 75
    1640:	f9 e0       	ldi	r31, 0x09	; 9
    1642:	af e4       	ldi	r26, 0x4F	; 79
    1644:	b9 e0       	ldi	r27, 0x09	; 9
    1646:	b1 83       	std	Z+1, r27	; 0x01
    1648:	a0 83       	st	Z, r26
	xStart.xBlockSize = ( size_t ) 0;
    164a:	13 82       	std	Z+3, r1	; 0x03
    164c:	12 82       	std	Z+2, r1	; 0x02
	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
	uxAddress -= xHeapStructSize;
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
	pxEnd = ( void * ) uxAddress;
    164e:	eb ee       	ldi	r30, 0xEB	; 235
    1650:	f8 e1       	ldi	r31, 0x18	; 24
    1652:	f0 93 4a 09 	sts	0x094A, r31	; 0x80094a <pxEnd+0x1>
    1656:	e0 93 49 09 	sts	0x0949, r30	; 0x800949 <pxEnd>
	pxEnd->xBlockSize = 0;
    165a:	13 82       	std	Z+3, r1	; 0x03
    165c:	12 82       	std	Z+2, r1	; 0x02
	pxEnd->pxNextFreeBlock = NULL;
    165e:	11 82       	std	Z+1, r1	; 0x01
    1660:	10 82       	st	Z, r1

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
    1662:	8c e9       	ldi	r24, 0x9C	; 156
    1664:	9f e0       	ldi	r25, 0x0F	; 15
    1666:	13 96       	adiw	r26, 0x03	; 3
    1668:	9c 93       	st	X, r25
    166a:	8e 93       	st	-X, r24
    166c:	12 97       	sbiw	r26, 0x02	; 2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
    166e:	ed 93       	st	X+, r30
    1670:	fc 93       	st	X, r31

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
    1672:	90 93 46 09 	sts	0x0946, r25	; 0x800946 <xMinimumEverFreeBytesRemaining+0x1>
    1676:	80 93 45 09 	sts	0x0945, r24	; 0x800945 <xMinimumEverFreeBytesRemaining>
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
    167a:	90 93 48 09 	sts	0x0948, r25	; 0x800948 <xFreeBytesRemaining+0x1>
    167e:	80 93 47 09 	sts	0x0947, r24	; 0x800947 <xFreeBytesRemaining>

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
    1682:	80 e0       	ldi	r24, 0x00	; 0
    1684:	90 e8       	ldi	r25, 0x80	; 128
    1686:	90 93 44 09 	sts	0x0944, r25	; 0x800944 <xBlockAllocatedBit+0x1>
    168a:	80 93 43 09 	sts	0x0943, r24	; 0x800943 <xBlockAllocatedBit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
    168e:	e0 90 43 09 	lds	r14, 0x0943	; 0x800943 <xBlockAllocatedBit>
    1692:	f0 90 44 09 	lds	r15, 0x0944	; 0x800944 <xBlockAllocatedBit+0x1>
    1696:	c7 01       	movw	r24, r14
    1698:	8c 23       	and	r24, r28
    169a:	9d 23       	and	r25, r29
    169c:	89 2b       	or	r24, r25
    169e:	09 f0       	breq	.+2      	; 0x16a2 <pvPortMalloc+0x86>
    16a0:	66 c0       	rjmp	.+204    	; 0x176e <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
    16a2:	20 97       	sbiw	r28, 0x00	; 0
    16a4:	09 f4       	brne	.+2      	; 0x16a8 <pvPortMalloc+0x8c>
    16a6:	66 c0       	rjmp	.+204    	; 0x1774 <pvPortMalloc+0x158>
			{
				xWantedSize += xHeapStructSize;
    16a8:	ae 01       	movw	r20, r28
    16aa:	4c 5f       	subi	r20, 0xFC	; 252
    16ac:	5f 4f       	sbci	r21, 0xFF	; 255
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
    16ae:	09 f4       	brne	.+2      	; 0x16b2 <pvPortMalloc+0x96>
    16b0:	5e c0       	rjmp	.+188    	; 0x176e <pvPortMalloc+0x152>
    16b2:	00 91 47 09 	lds	r16, 0x0947	; 0x800947 <xFreeBytesRemaining>
    16b6:	10 91 48 09 	lds	r17, 0x0948	; 0x800948 <xFreeBytesRemaining+0x1>
    16ba:	04 17       	cp	r16, r20
    16bc:	15 07       	cpc	r17, r21
    16be:	08 f4       	brcc	.+2      	; 0x16c2 <pvPortMalloc+0xa6>
    16c0:	56 c0       	rjmp	.+172    	; 0x176e <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
    16c2:	c0 91 4b 09 	lds	r28, 0x094B	; 0x80094b <xStart>
    16c6:	d0 91 4c 09 	lds	r29, 0x094C	; 0x80094c <xStart+0x1>

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
    16ca:	eb e4       	ldi	r30, 0x4B	; 75
    16cc:	f9 e0       	ldi	r31, 0x09	; 9
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    16ce:	02 c0       	rjmp	.+4      	; 0x16d4 <pvPortMalloc+0xb8>
    16d0:	fe 01       	movw	r30, r28
				{
					pxPreviousBlock = pxBlock;
					pxBlock = pxBlock->pxNextFreeBlock;
    16d2:	e9 01       	movw	r28, r18
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    16d4:	2a 81       	ldd	r18, Y+2	; 0x02
    16d6:	3b 81       	ldd	r19, Y+3	; 0x03
    16d8:	24 17       	cp	r18, r20
    16da:	35 07       	cpc	r19, r21
    16dc:	28 f4       	brcc	.+10     	; 0x16e8 <pvPortMalloc+0xcc>
    16de:	28 81       	ld	r18, Y
    16e0:	39 81       	ldd	r19, Y+1	; 0x01
    16e2:	21 15       	cp	r18, r1
    16e4:	31 05       	cpc	r19, r1
    16e6:	a1 f7       	brne	.-24     	; 0x16d0 <pvPortMalloc+0xb4>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
    16e8:	80 91 49 09 	lds	r24, 0x0949	; 0x800949 <pxEnd>
    16ec:	90 91 4a 09 	lds	r25, 0x094A	; 0x80094a <pxEnd+0x1>
    16f0:	c8 17       	cp	r28, r24
    16f2:	d9 07       	cpc	r29, r25
    16f4:	e1 f1       	breq	.+120    	; 0x176e <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
    16f6:	c0 80       	ld	r12, Z
    16f8:	d1 80       	ldd	r13, Z+1	; 0x01
    16fa:	84 e0       	ldi	r24, 0x04	; 4
    16fc:	c8 0e       	add	r12, r24
    16fe:	d1 1c       	adc	r13, r1

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    1700:	88 81       	ld	r24, Y
    1702:	99 81       	ldd	r25, Y+1	; 0x01
    1704:	91 83       	std	Z+1, r25	; 0x01
    1706:	80 83       	st	Z, r24

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    1708:	2a 81       	ldd	r18, Y+2	; 0x02
    170a:	3b 81       	ldd	r19, Y+3	; 0x03
    170c:	24 1b       	sub	r18, r20
    170e:	35 0b       	sbc	r19, r21
    1710:	29 30       	cpi	r18, 0x09	; 9
    1712:	31 05       	cpc	r19, r1
    1714:	48 f0       	brcs	.+18     	; 0x1728 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
    1716:	ce 01       	movw	r24, r28
    1718:	84 0f       	add	r24, r20
    171a:	95 1f       	adc	r25, r21
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    171c:	fc 01       	movw	r30, r24
    171e:	33 83       	std	Z+3, r19	; 0x03
    1720:	22 83       	std	Z+2, r18	; 0x02
						pxBlock->xBlockSize = xWantedSize;
    1722:	5b 83       	std	Y+3, r21	; 0x03
    1724:	4a 83       	std	Y+2, r20	; 0x02

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
    1726:	2d df       	rcall	.-422    	; 0x1582 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
    1728:	8a 81       	ldd	r24, Y+2	; 0x02
    172a:	9b 81       	ldd	r25, Y+3	; 0x03
    172c:	08 1b       	sub	r16, r24
    172e:	19 0b       	sbc	r17, r25
    1730:	10 93 48 09 	sts	0x0948, r17	; 0x800948 <xFreeBytesRemaining+0x1>
    1734:	00 93 47 09 	sts	0x0947, r16	; 0x800947 <xFreeBytesRemaining>

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
    1738:	20 91 45 09 	lds	r18, 0x0945	; 0x800945 <xMinimumEverFreeBytesRemaining>
    173c:	30 91 46 09 	lds	r19, 0x0946	; 0x800946 <xMinimumEverFreeBytesRemaining+0x1>
    1740:	02 17       	cp	r16, r18
    1742:	13 07       	cpc	r17, r19
    1744:	20 f4       	brcc	.+8      	; 0x174e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
    1746:	10 93 46 09 	sts	0x0946, r17	; 0x800946 <xMinimumEverFreeBytesRemaining+0x1>
    174a:	00 93 45 09 	sts	0x0945, r16	; 0x800945 <xMinimumEverFreeBytesRemaining>
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
    174e:	e8 2a       	or	r14, r24
    1750:	f9 2a       	or	r15, r25
    1752:	fb 82       	std	Y+3, r15	; 0x03
    1754:	ea 82       	std	Y+2, r14	; 0x02
					pxBlock->pxNextFreeBlock = NULL;
    1756:	19 82       	std	Y+1, r1	; 0x01
    1758:	18 82       	st	Y, r1
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    175a:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
    175e:	c1 14       	cp	r12, r1
    1760:	d1 04       	cpc	r13, r1
    1762:	59 f4       	brne	.+22     	; 0x177a <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
    1764:	0e 94 59 1e 	call	0x3cb2	; 0x3cb2 <vApplicationMallocFailedHook>
    1768:	c1 2c       	mov	r12, r1
    176a:	d1 2c       	mov	r13, r1
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
    176c:	06 c0       	rjmp	.+12     	; 0x177a <pvPortMalloc+0x15e>
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    176e:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <xTaskResumeAll>
    1772:	f8 cf       	rjmp	.-16     	; 0x1764 <pvPortMalloc+0x148>
    1774:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <xTaskResumeAll>
    1778:	f5 cf       	rjmp	.-22     	; 0x1764 <pvPortMalloc+0x148>
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
}
    177a:	c6 01       	movw	r24, r12
    177c:	df 91       	pop	r29
    177e:	cf 91       	pop	r28
    1780:	1f 91       	pop	r17
    1782:	0f 91       	pop	r16
    1784:	ff 90       	pop	r15
    1786:	ef 90       	pop	r14
    1788:	df 90       	pop	r13
    178a:	cf 90       	pop	r12
    178c:	08 95       	ret

0000178e <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    178e:	cf 93       	push	r28
    1790:	df 93       	push	r29
uint8_t *puc = ( uint8_t * ) pv;
BlockLink_t *pxLink;

	if( pv != NULL )
    1792:	00 97       	sbiw	r24, 0x00	; 0
    1794:	51 f1       	breq	.+84     	; 0x17ea <vPortFree+0x5c>

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
		configASSERT( pxLink->pxNextFreeBlock == NULL );

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
    1796:	fc 01       	movw	r30, r24
    1798:	34 97       	sbiw	r30, 0x04	; 4
    179a:	22 81       	ldd	r18, Z+2	; 0x02
    179c:	33 81       	ldd	r19, Z+3	; 0x03
    179e:	40 91 43 09 	lds	r20, 0x0943	; 0x800943 <xBlockAllocatedBit>
    17a2:	50 91 44 09 	lds	r21, 0x0944	; 0x800944 <xBlockAllocatedBit+0x1>
    17a6:	b9 01       	movw	r22, r18
    17a8:	64 23       	and	r22, r20
    17aa:	75 23       	and	r23, r21
    17ac:	67 2b       	or	r22, r23
    17ae:	e9 f0       	breq	.+58     	; 0x17ea <vPortFree+0x5c>
		{
			if( pxLink->pxNextFreeBlock == NULL )
    17b0:	60 81       	ld	r22, Z
    17b2:	71 81       	ldd	r23, Z+1	; 0x01
    17b4:	67 2b       	or	r22, r23
    17b6:	c9 f4       	brne	.+50     	; 0x17ea <vPortFree+0x5c>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
    17b8:	ef 01       	movw	r28, r30
    17ba:	40 95       	com	r20
    17bc:	50 95       	com	r21
    17be:	24 23       	and	r18, r20
    17c0:	35 23       	and	r19, r21
    17c2:	33 83       	std	Z+3, r19	; 0x03
    17c4:	22 83       	std	Z+2, r18	; 0x02

				vTaskSuspendAll();
    17c6:	0e 94 9d 16 	call	0x2d3a	; 0x2d3a <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
    17ca:	20 91 47 09 	lds	r18, 0x0947	; 0x800947 <xFreeBytesRemaining>
    17ce:	30 91 48 09 	lds	r19, 0x0948	; 0x800948 <xFreeBytesRemaining+0x1>
    17d2:	8a 81       	ldd	r24, Y+2	; 0x02
    17d4:	9b 81       	ldd	r25, Y+3	; 0x03
    17d6:	82 0f       	add	r24, r18
    17d8:	93 1f       	adc	r25, r19
    17da:	90 93 48 09 	sts	0x0948, r25	; 0x800948 <xFreeBytesRemaining+0x1>
    17de:	80 93 47 09 	sts	0x0947, r24	; 0x800947 <xFreeBytesRemaining>
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
    17e2:	ce 01       	movw	r24, r28
    17e4:	ce de       	rcall	.-612    	; 0x1582 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
    17e6:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
    17ea:	df 91       	pop	r29
    17ec:	cf 91       	pop	r28
    17ee:	08 95       	ret

000017f0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    17f0:	fc 01       	movw	r30, r24
    /* The list structure contains a list item which is used to mark the
    end of the list.  To initialise the list the list end is inserted
    as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );            /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    17f2:	03 96       	adiw	r24, 0x03	; 3
    17f4:	92 83       	std	Z+2, r25	; 0x02
    17f6:	81 83       	std	Z+1, r24	; 0x01

    /* The list end value is the highest possible value in the list to
    ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
    17f8:	4f ef       	ldi	r20, 0xFF	; 255
    17fa:	5f ef       	ldi	r21, 0xFF	; 255
    17fc:	ba 01       	movw	r22, r20
    17fe:	43 83       	std	Z+3, r20	; 0x03
    1800:	54 83       	std	Z+4, r21	; 0x04
    1802:	65 83       	std	Z+5, r22	; 0x05
    1804:	76 83       	std	Z+6, r23	; 0x06

    /* The list end next and previous pointers point to itself so we know
    when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );    /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1806:	90 87       	std	Z+8, r25	; 0x08
    1808:	87 83       	std	Z+7, r24	; 0x07
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    180a:	92 87       	std	Z+10, r25	; 0x0a
    180c:	81 87       	std	Z+9, r24	; 0x09

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    180e:	10 82       	st	Z, r1
    1810:	08 95       	ret

00001812 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
    1812:	fc 01       	movw	r30, r24
    1814:	13 86       	std	Z+11, r1	; 0x0b
    1816:	12 86       	std	Z+10, r1	; 0x0a
    1818:	08 95       	ret

0000181a <vListInsertEnd>:
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    181a:	cf 93       	push	r28
    181c:	df 93       	push	r29
    181e:	9c 01       	movw	r18, r24
    1820:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
    1822:	dc 01       	movw	r26, r24
    1824:	11 96       	adiw	r26, 0x01	; 1
    1826:	cd 91       	ld	r28, X+
    1828:	dc 91       	ld	r29, X
    182a:	12 97       	sbiw	r26, 0x02	; 2
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
    makes the new list item the last item to be removed by a call to
    listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
    182c:	d5 83       	std	Z+5, r29	; 0x05
    182e:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    1830:	8e 81       	ldd	r24, Y+6	; 0x06
    1832:	9f 81       	ldd	r25, Y+7	; 0x07
    1834:	97 83       	std	Z+7, r25	; 0x07
    1836:	86 83       	std	Z+6, r24	; 0x06

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
    1838:	8e 81       	ldd	r24, Y+6	; 0x06
    183a:	9f 81       	ldd	r25, Y+7	; 0x07
    183c:	dc 01       	movw	r26, r24
    183e:	15 96       	adiw	r26, 0x05	; 5
    1840:	7c 93       	st	X, r23
    1842:	6e 93       	st	-X, r22
    1844:	14 97       	sbiw	r26, 0x04	; 4
    pxIndex->pxPrevious = pxNewListItem;
    1846:	7f 83       	std	Y+7, r23	; 0x07
    1848:	6e 83       	std	Y+6, r22	; 0x06

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
    184a:	33 87       	std	Z+11, r19	; 0x0b
    184c:	22 87       	std	Z+10, r18	; 0x0a

    ( pxList->uxNumberOfItems )++;
    184e:	f9 01       	movw	r30, r18
    1850:	80 81       	ld	r24, Z
    1852:	8f 5f       	subi	r24, 0xFF	; 255
    1854:	80 83       	st	Z, r24
}
    1856:	df 91       	pop	r29
    1858:	cf 91       	pop	r28
    185a:	08 95       	ret

0000185c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    185c:	0f 93       	push	r16
    185e:	1f 93       	push	r17
    1860:	cf 93       	push	r28
    1862:	df 93       	push	r29
    1864:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    1866:	08 81       	ld	r16, Y
    1868:	19 81       	ldd	r17, Y+1	; 0x01
    186a:	2a 81       	ldd	r18, Y+2	; 0x02
    186c:	3b 81       	ldd	r19, Y+3	; 0x03
    new list item should be placed after it.  This ensures that TCBs which are
    stored in ready lists (all of which have the same xItemValue value) get a
    share of the CPU.  However, if the xItemValue is the same as the back marker
    the iteration loop below will not end.  Therefore the value is checked
    first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
    186e:	0f 3f       	cpi	r16, 0xFF	; 255
    1870:	4f ef       	ldi	r20, 0xFF	; 255
    1872:	14 07       	cpc	r17, r20
    1874:	24 07       	cpc	r18, r20
    1876:	34 07       	cpc	r19, r20
    1878:	21 f4       	brne	.+8      	; 0x1882 <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
    187a:	fc 01       	movw	r30, r24
    187c:	a1 85       	ldd	r26, Z+9	; 0x09
    187e:	b2 85       	ldd	r27, Z+10	; 0x0a
    1880:	11 c0       	rjmp	.+34     	; 0x18a4 <vListInsert+0x48>
            4) Using a queue or semaphore before it has been initialised or
               before the scheduler has been started (are interrupts firing
               before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
    1882:	dc 01       	movw	r26, r24
    1884:	13 96       	adiw	r26, 0x03	; 3
    1886:	01 c0       	rjmp	.+2      	; 0x188a <vListInsert+0x2e>
    1888:	df 01       	movw	r26, r30
    188a:	14 96       	adiw	r26, 0x04	; 4
    188c:	ed 91       	ld	r30, X+
    188e:	fc 91       	ld	r31, X
    1890:	15 97       	sbiw	r26, 0x05	; 5
    1892:	40 81       	ld	r20, Z
    1894:	51 81       	ldd	r21, Z+1	; 0x01
    1896:	62 81       	ldd	r22, Z+2	; 0x02
    1898:	73 81       	ldd	r23, Z+3	; 0x03
    189a:	04 17       	cp	r16, r20
    189c:	15 07       	cpc	r17, r21
    189e:	26 07       	cpc	r18, r22
    18a0:	37 07       	cpc	r19, r23
    18a2:	90 f7       	brcc	.-28     	; 0x1888 <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
            insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
    18a4:	14 96       	adiw	r26, 0x04	; 4
    18a6:	ed 91       	ld	r30, X+
    18a8:	fc 91       	ld	r31, X
    18aa:	15 97       	sbiw	r26, 0x05	; 5
    18ac:	fd 83       	std	Y+5, r31	; 0x05
    18ae:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    18b0:	d7 83       	std	Z+7, r29	; 0x07
    18b2:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
    18b4:	bf 83       	std	Y+7, r27	; 0x07
    18b6:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
    18b8:	15 96       	adiw	r26, 0x05	; 5
    18ba:	dc 93       	st	X, r29
    18bc:	ce 93       	st	-X, r28
    18be:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
    item later. */
    pxNewListItem->pxContainer = pxList;
    18c0:	9b 87       	std	Y+11, r25	; 0x0b
    18c2:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
    18c4:	fc 01       	movw	r30, r24
    18c6:	20 81       	ld	r18, Z
    18c8:	2f 5f       	subi	r18, 0xFF	; 255
    18ca:	20 83       	st	Z, r18
}
    18cc:	df 91       	pop	r29
    18ce:	cf 91       	pop	r28
    18d0:	1f 91       	pop	r17
    18d2:	0f 91       	pop	r16
    18d4:	08 95       	ret

000018d6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    18d6:	cf 93       	push	r28
    18d8:	df 93       	push	r29
    18da:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
    18dc:	a2 85       	ldd	r26, Z+10	; 0x0a
    18de:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    18e0:	c4 81       	ldd	r28, Z+4	; 0x04
    18e2:	d5 81       	ldd	r29, Z+5	; 0x05
    18e4:	86 81       	ldd	r24, Z+6	; 0x06
    18e6:	97 81       	ldd	r25, Z+7	; 0x07
    18e8:	9f 83       	std	Y+7, r25	; 0x07
    18ea:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    18ec:	c6 81       	ldd	r28, Z+6	; 0x06
    18ee:	d7 81       	ldd	r29, Z+7	; 0x07
    18f0:	84 81       	ldd	r24, Z+4	; 0x04
    18f2:	95 81       	ldd	r25, Z+5	; 0x05
    18f4:	9d 83       	std	Y+5, r25	; 0x05
    18f6:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
    18f8:	11 96       	adiw	r26, 0x01	; 1
    18fa:	8d 91       	ld	r24, X+
    18fc:	9c 91       	ld	r25, X
    18fe:	12 97       	sbiw	r26, 0x02	; 2
    1900:	e8 17       	cp	r30, r24
    1902:	f9 07       	cpc	r31, r25
    1904:	31 f4       	brne	.+12     	; 0x1912 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
    1906:	86 81       	ldd	r24, Z+6	; 0x06
    1908:	97 81       	ldd	r25, Z+7	; 0x07
    190a:	12 96       	adiw	r26, 0x02	; 2
    190c:	9c 93       	st	X, r25
    190e:	8e 93       	st	-X, r24
    1910:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
    1912:	13 86       	std	Z+11, r1	; 0x0b
    1914:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
    1916:	8c 91       	ld	r24, X
    1918:	81 50       	subi	r24, 0x01	; 1
    191a:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
    191c:	8c 91       	ld	r24, X
}
    191e:	df 91       	pop	r29
    1920:	cf 91       	pop	r28
    1922:	08 95       	ret

00001924 <pxPortInitialiseStack>:
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    1924:	31 e1       	ldi	r19, 0x11	; 17
    1926:	fc 01       	movw	r30, r24
    1928:	30 83       	st	Z, r19
    192a:	31 97       	sbiw	r30, 0x01	; 1
    192c:	22 e2       	ldi	r18, 0x22	; 34
    192e:	20 83       	st	Z, r18
    1930:	31 97       	sbiw	r30, 0x01	; 1
    1932:	a3 e3       	ldi	r26, 0x33	; 51
    1934:	a0 83       	st	Z, r26
    1936:	31 97       	sbiw	r30, 0x01	; 1
    1938:	60 83       	st	Z, r22
    193a:	31 97       	sbiw	r30, 0x01	; 1
    193c:	70 83       	st	Z, r23
    193e:	31 97       	sbiw	r30, 0x01	; 1
    1940:	10 82       	st	Z, r1
    1942:	31 97       	sbiw	r30, 0x01	; 1
    1944:	10 82       	st	Z, r1
    1946:	31 97       	sbiw	r30, 0x01	; 1
    1948:	60 e8       	ldi	r22, 0x80	; 128
    194a:	60 83       	st	Z, r22
    194c:	31 97       	sbiw	r30, 0x01	; 1
    194e:	10 82       	st	Z, r1
    1950:	31 97       	sbiw	r30, 0x01	; 1
    1952:	10 82       	st	Z, r1
    1954:	31 97       	sbiw	r30, 0x01	; 1
    1956:	10 82       	st	Z, r1
    1958:	31 97       	sbiw	r30, 0x01	; 1
    195a:	62 e0       	ldi	r22, 0x02	; 2
    195c:	60 83       	st	Z, r22
    195e:	31 97       	sbiw	r30, 0x01	; 1
    1960:	63 e0       	ldi	r22, 0x03	; 3
    1962:	60 83       	st	Z, r22
    1964:	31 97       	sbiw	r30, 0x01	; 1
    1966:	64 e0       	ldi	r22, 0x04	; 4
    1968:	60 83       	st	Z, r22
    196a:	31 97       	sbiw	r30, 0x01	; 1
    196c:	65 e0       	ldi	r22, 0x05	; 5
    196e:	60 83       	st	Z, r22
    1970:	31 97       	sbiw	r30, 0x01	; 1
    1972:	66 e0       	ldi	r22, 0x06	; 6
    1974:	60 83       	st	Z, r22
    1976:	31 97       	sbiw	r30, 0x01	; 1
    1978:	67 e0       	ldi	r22, 0x07	; 7
    197a:	60 83       	st	Z, r22
    197c:	31 97       	sbiw	r30, 0x01	; 1
    197e:	68 e0       	ldi	r22, 0x08	; 8
    1980:	60 83       	st	Z, r22
    1982:	31 97       	sbiw	r30, 0x01	; 1
    1984:	69 e0       	ldi	r22, 0x09	; 9
    1986:	60 83       	st	Z, r22
    1988:	31 97       	sbiw	r30, 0x01	; 1
    198a:	60 e1       	ldi	r22, 0x10	; 16
    198c:	60 83       	st	Z, r22
    198e:	31 97       	sbiw	r30, 0x01	; 1
    1990:	30 83       	st	Z, r19
    1992:	31 97       	sbiw	r30, 0x01	; 1
    1994:	32 e1       	ldi	r19, 0x12	; 18
    1996:	30 83       	st	Z, r19
    1998:	31 97       	sbiw	r30, 0x01	; 1
    199a:	33 e1       	ldi	r19, 0x13	; 19
    199c:	30 83       	st	Z, r19
    199e:	31 97       	sbiw	r30, 0x01	; 1
    19a0:	34 e1       	ldi	r19, 0x14	; 20
    19a2:	30 83       	st	Z, r19
    19a4:	31 97       	sbiw	r30, 0x01	; 1
    19a6:	35 e1       	ldi	r19, 0x15	; 21
    19a8:	30 83       	st	Z, r19
    19aa:	31 97       	sbiw	r30, 0x01	; 1
    19ac:	36 e1       	ldi	r19, 0x16	; 22
    19ae:	30 83       	st	Z, r19
    19b0:	31 97       	sbiw	r30, 0x01	; 1
    19b2:	37 e1       	ldi	r19, 0x17	; 23
    19b4:	30 83       	st	Z, r19
    19b6:	31 97       	sbiw	r30, 0x01	; 1
    19b8:	38 e1       	ldi	r19, 0x18	; 24
    19ba:	30 83       	st	Z, r19
    19bc:	31 97       	sbiw	r30, 0x01	; 1
    19be:	39 e1       	ldi	r19, 0x19	; 25
    19c0:	30 83       	st	Z, r19
    19c2:	31 97       	sbiw	r30, 0x01	; 1
    19c4:	30 e2       	ldi	r19, 0x20	; 32
    19c6:	30 83       	st	Z, r19
    19c8:	31 97       	sbiw	r30, 0x01	; 1
    19ca:	31 e2       	ldi	r19, 0x21	; 33
    19cc:	30 83       	st	Z, r19
    19ce:	31 97       	sbiw	r30, 0x01	; 1
    19d0:	20 83       	st	Z, r18
    19d2:	31 97       	sbiw	r30, 0x01	; 1
    19d4:	23 e2       	ldi	r18, 0x23	; 35
    19d6:	20 83       	st	Z, r18
    19d8:	31 97       	sbiw	r30, 0x01	; 1
    19da:	40 83       	st	Z, r20
    19dc:	31 97       	sbiw	r30, 0x01	; 1
    19de:	50 83       	st	Z, r21
    19e0:	31 97       	sbiw	r30, 0x01	; 1
    19e2:	26 e2       	ldi	r18, 0x26	; 38
    19e4:	20 83       	st	Z, r18
    19e6:	31 97       	sbiw	r30, 0x01	; 1
    19e8:	27 e2       	ldi	r18, 0x27	; 39
    19ea:	20 83       	st	Z, r18
    19ec:	31 97       	sbiw	r30, 0x01	; 1
    19ee:	28 e2       	ldi	r18, 0x28	; 40
    19f0:	20 83       	st	Z, r18
    19f2:	31 97       	sbiw	r30, 0x01	; 1
    19f4:	29 e2       	ldi	r18, 0x29	; 41
    19f6:	20 83       	st	Z, r18
    19f8:	31 97       	sbiw	r30, 0x01	; 1
    19fa:	20 e3       	ldi	r18, 0x30	; 48
    19fc:	20 83       	st	Z, r18
    19fe:	31 97       	sbiw	r30, 0x01	; 1
    1a00:	21 e3       	ldi	r18, 0x31	; 49
    1a02:	20 83       	st	Z, r18
    1a04:	89 97       	sbiw	r24, 0x29	; 41
    1a06:	08 95       	ret

00001a08 <xPortStartScheduler>:
    1a08:	a8 95       	wdr
    1a0a:	90 ec       	ldi	r25, 0xC0	; 192
    1a0c:	88 e1       	ldi	r24, 0x18	; 24
    1a0e:	0f b6       	in	r0, 0x3f	; 63
    1a10:	f8 94       	cli
    1a12:	a8 95       	wdr
    1a14:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    1a18:	0f be       	out	0x3f, r0	; 63
    1a1a:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    1a1e:	a0 91 69 19 	lds	r26, 0x1969	; 0x801969 <pxCurrentTCB>
    1a22:	b0 91 6a 19 	lds	r27, 0x196A	; 0x80196a <pxCurrentTCB+0x1>
    1a26:	cd 91       	ld	r28, X+
    1a28:	cd bf       	out	0x3d, r28	; 61
    1a2a:	dd 91       	ld	r29, X+
    1a2c:	de bf       	out	0x3e, r29	; 62
    1a2e:	ff 91       	pop	r31
    1a30:	ef 91       	pop	r30
    1a32:	df 91       	pop	r29
    1a34:	cf 91       	pop	r28
    1a36:	bf 91       	pop	r27
    1a38:	af 91       	pop	r26
    1a3a:	9f 91       	pop	r25
    1a3c:	8f 91       	pop	r24
    1a3e:	7f 91       	pop	r23
    1a40:	6f 91       	pop	r22
    1a42:	5f 91       	pop	r21
    1a44:	4f 91       	pop	r20
    1a46:	3f 91       	pop	r19
    1a48:	2f 91       	pop	r18
    1a4a:	1f 91       	pop	r17
    1a4c:	0f 91       	pop	r16
    1a4e:	ff 90       	pop	r15
    1a50:	ef 90       	pop	r14
    1a52:	df 90       	pop	r13
    1a54:	cf 90       	pop	r12
    1a56:	bf 90       	pop	r11
    1a58:	af 90       	pop	r10
    1a5a:	9f 90       	pop	r9
    1a5c:	8f 90       	pop	r8
    1a5e:	7f 90       	pop	r7
    1a60:	6f 90       	pop	r6
    1a62:	5f 90       	pop	r5
    1a64:	4f 90       	pop	r4
    1a66:	3f 90       	pop	r3
    1a68:	2f 90       	pop	r2
    1a6a:	1f 90       	pop	r1
    1a6c:	0f 90       	pop	r0
    1a6e:	0c be       	out	0x3c, r0	; 60
    1a70:	0f 90       	pop	r0
    1a72:	0b be       	out	0x3b, r0	; 59
    1a74:	0f 90       	pop	r0
    1a76:	0f be       	out	0x3f, r0	; 63
    1a78:	0f 90       	pop	r0
    1a7a:	08 95       	ret
    1a7c:	81 e0       	ldi	r24, 0x01	; 1
    1a7e:	08 95       	ret

00001a80 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYield( void )
{
    portSAVE_CONTEXT();
    1a80:	0f 92       	push	r0
    1a82:	0f b6       	in	r0, 0x3f	; 63
    1a84:	f8 94       	cli
    1a86:	0f 92       	push	r0
    1a88:	0b b6       	in	r0, 0x3b	; 59
    1a8a:	0f 92       	push	r0
    1a8c:	0c b6       	in	r0, 0x3c	; 60
    1a8e:	0f 92       	push	r0
    1a90:	1f 92       	push	r1
    1a92:	11 24       	eor	r1, r1
    1a94:	2f 92       	push	r2
    1a96:	3f 92       	push	r3
    1a98:	4f 92       	push	r4
    1a9a:	5f 92       	push	r5
    1a9c:	6f 92       	push	r6
    1a9e:	7f 92       	push	r7
    1aa0:	8f 92       	push	r8
    1aa2:	9f 92       	push	r9
    1aa4:	af 92       	push	r10
    1aa6:	bf 92       	push	r11
    1aa8:	cf 92       	push	r12
    1aaa:	df 92       	push	r13
    1aac:	ef 92       	push	r14
    1aae:	ff 92       	push	r15
    1ab0:	0f 93       	push	r16
    1ab2:	1f 93       	push	r17
    1ab4:	2f 93       	push	r18
    1ab6:	3f 93       	push	r19
    1ab8:	4f 93       	push	r20
    1aba:	5f 93       	push	r21
    1abc:	6f 93       	push	r22
    1abe:	7f 93       	push	r23
    1ac0:	8f 93       	push	r24
    1ac2:	9f 93       	push	r25
    1ac4:	af 93       	push	r26
    1ac6:	bf 93       	push	r27
    1ac8:	cf 93       	push	r28
    1aca:	df 93       	push	r29
    1acc:	ef 93       	push	r30
    1ace:	ff 93       	push	r31
    1ad0:	a0 91 69 19 	lds	r26, 0x1969	; 0x801969 <pxCurrentTCB>
    1ad4:	b0 91 6a 19 	lds	r27, 0x196A	; 0x80196a <pxCurrentTCB+0x1>
    1ad8:	0d b6       	in	r0, 0x3d	; 61
    1ada:	0d 92       	st	X+, r0
    1adc:	0e b6       	in	r0, 0x3e	; 62
    1ade:	0d 92       	st	X+, r0
    vTaskSwitchContext();
    1ae0:	0e 94 1b 18 	call	0x3036	; 0x3036 <vTaskSwitchContext>
    portRESTORE_CONTEXT();
    1ae4:	a0 91 69 19 	lds	r26, 0x1969	; 0x801969 <pxCurrentTCB>
    1ae8:	b0 91 6a 19 	lds	r27, 0x196A	; 0x80196a <pxCurrentTCB+0x1>
    1aec:	cd 91       	ld	r28, X+
    1aee:	cd bf       	out	0x3d, r28	; 61
    1af0:	dd 91       	ld	r29, X+
    1af2:	de bf       	out	0x3e, r29	; 62
    1af4:	ff 91       	pop	r31
    1af6:	ef 91       	pop	r30
    1af8:	df 91       	pop	r29
    1afa:	cf 91       	pop	r28
    1afc:	bf 91       	pop	r27
    1afe:	af 91       	pop	r26
    1b00:	9f 91       	pop	r25
    1b02:	8f 91       	pop	r24
    1b04:	7f 91       	pop	r23
    1b06:	6f 91       	pop	r22
    1b08:	5f 91       	pop	r21
    1b0a:	4f 91       	pop	r20
    1b0c:	3f 91       	pop	r19
    1b0e:	2f 91       	pop	r18
    1b10:	1f 91       	pop	r17
    1b12:	0f 91       	pop	r16
    1b14:	ff 90       	pop	r15
    1b16:	ef 90       	pop	r14
    1b18:	df 90       	pop	r13
    1b1a:	cf 90       	pop	r12
    1b1c:	bf 90       	pop	r11
    1b1e:	af 90       	pop	r10
    1b20:	9f 90       	pop	r9
    1b22:	8f 90       	pop	r8
    1b24:	7f 90       	pop	r7
    1b26:	6f 90       	pop	r6
    1b28:	5f 90       	pop	r5
    1b2a:	4f 90       	pop	r4
    1b2c:	3f 90       	pop	r3
    1b2e:	2f 90       	pop	r2
    1b30:	1f 90       	pop	r1
    1b32:	0f 90       	pop	r0
    1b34:	0c be       	out	0x3c, r0	; 60
    1b36:	0f 90       	pop	r0
    1b38:	0b be       	out	0x3b, r0	; 59
    1b3a:	0f 90       	pop	r0
    1b3c:	0f be       	out	0x3f, r0	; 63
    1b3e:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
    1b40:	08 95       	ret

00001b42 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
    1b42:	0f 92       	push	r0
    1b44:	0f b6       	in	r0, 0x3f	; 63
    1b46:	f8 94       	cli
    1b48:	0f 92       	push	r0
    1b4a:	0b b6       	in	r0, 0x3b	; 59
    1b4c:	0f 92       	push	r0
    1b4e:	0c b6       	in	r0, 0x3c	; 60
    1b50:	0f 92       	push	r0
    1b52:	1f 92       	push	r1
    1b54:	11 24       	eor	r1, r1
    1b56:	2f 92       	push	r2
    1b58:	3f 92       	push	r3
    1b5a:	4f 92       	push	r4
    1b5c:	5f 92       	push	r5
    1b5e:	6f 92       	push	r6
    1b60:	7f 92       	push	r7
    1b62:	8f 92       	push	r8
    1b64:	9f 92       	push	r9
    1b66:	af 92       	push	r10
    1b68:	bf 92       	push	r11
    1b6a:	cf 92       	push	r12
    1b6c:	df 92       	push	r13
    1b6e:	ef 92       	push	r14
    1b70:	ff 92       	push	r15
    1b72:	0f 93       	push	r16
    1b74:	1f 93       	push	r17
    1b76:	2f 93       	push	r18
    1b78:	3f 93       	push	r19
    1b7a:	4f 93       	push	r20
    1b7c:	5f 93       	push	r21
    1b7e:	6f 93       	push	r22
    1b80:	7f 93       	push	r23
    1b82:	8f 93       	push	r24
    1b84:	9f 93       	push	r25
    1b86:	af 93       	push	r26
    1b88:	bf 93       	push	r27
    1b8a:	cf 93       	push	r28
    1b8c:	df 93       	push	r29
    1b8e:	ef 93       	push	r30
    1b90:	ff 93       	push	r31
    1b92:	a0 91 69 19 	lds	r26, 0x1969	; 0x801969 <pxCurrentTCB>
    1b96:	b0 91 6a 19 	lds	r27, 0x196A	; 0x80196a <pxCurrentTCB+0x1>
    1b9a:	0d b6       	in	r0, 0x3d	; 61
    1b9c:	0d 92       	st	X+, r0
    1b9e:	0e b6       	in	r0, 0x3e	; 62
    1ba0:	0d 92       	st	X+, r0

    sleep_reset();        //     reset the sleep_mode() faster than sleep_disable();
    1ba2:	13 be       	out	0x33, r1	; 51

    if( xTaskIncrementTick() != pdFALSE )
    1ba4:	0e 94 b1 16 	call	0x2d62	; 0x2d62 <xTaskIncrementTick>
    1ba8:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
    1baa:	0e 94 1b 18 	call	0x3036	; 0x3036 <vTaskSwitchContext>
    }

    portRESTORE_CONTEXT();
    1bae:	a0 91 69 19 	lds	r26, 0x1969	; 0x801969 <pxCurrentTCB>
    1bb2:	b0 91 6a 19 	lds	r27, 0x196A	; 0x80196a <pxCurrentTCB+0x1>
    1bb6:	cd 91       	ld	r28, X+
    1bb8:	cd bf       	out	0x3d, r28	; 61
    1bba:	dd 91       	ld	r29, X+
    1bbc:	de bf       	out	0x3e, r29	; 62
    1bbe:	ff 91       	pop	r31
    1bc0:	ef 91       	pop	r30
    1bc2:	df 91       	pop	r29
    1bc4:	cf 91       	pop	r28
    1bc6:	bf 91       	pop	r27
    1bc8:	af 91       	pop	r26
    1bca:	9f 91       	pop	r25
    1bcc:	8f 91       	pop	r24
    1bce:	7f 91       	pop	r23
    1bd0:	6f 91       	pop	r22
    1bd2:	5f 91       	pop	r21
    1bd4:	4f 91       	pop	r20
    1bd6:	3f 91       	pop	r19
    1bd8:	2f 91       	pop	r18
    1bda:	1f 91       	pop	r17
    1bdc:	0f 91       	pop	r16
    1bde:	ff 90       	pop	r15
    1be0:	ef 90       	pop	r14
    1be2:	df 90       	pop	r13
    1be4:	cf 90       	pop	r12
    1be6:	bf 90       	pop	r11
    1be8:	af 90       	pop	r10
    1bea:	9f 90       	pop	r9
    1bec:	8f 90       	pop	r8
    1bee:	7f 90       	pop	r7
    1bf0:	6f 90       	pop	r6
    1bf2:	5f 90       	pop	r5
    1bf4:	4f 90       	pop	r4
    1bf6:	3f 90       	pop	r3
    1bf8:	2f 90       	pop	r2
    1bfa:	1f 90       	pop	r1
    1bfc:	0f 90       	pop	r0
    1bfe:	0c be       	out	0x3c, r0	; 60
    1c00:	0f 90       	pop	r0
    1c02:	0b be       	out	0x3b, r0	; 59
    1c04:	0f 90       	pop	r0
    1c06:	0f be       	out	0x3f, r0	; 63
    1c08:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
    1c0a:	08 95       	ret

00001c0c <__vector_12>:
     */
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
//  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
    1c0c:	9a df       	rcall	.-204    	; 0x1b42 <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
    1c0e:	18 95       	reti

00001c10 <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    1c10:	0f b6       	in	r0, 0x3f	; 63
    1c12:	f8 94       	cli
    1c14:	0f 92       	push	r0
    1c16:	fc 01       	movw	r30, r24
    1c18:	96 8d       	ldd	r25, Z+30	; 0x1e
    1c1a:	0f 90       	pop	r0
    1c1c:	0f be       	out	0x3f, r0	; 63
    1c1e:	81 e0       	ldi	r24, 0x01	; 1
    1c20:	91 11       	cpse	r25, r1
    1c22:	80 e0       	ldi	r24, 0x00	; 0
    1c24:	08 95       	ret

00001c26 <prvCopyDataToQueue>:
    1c26:	0f 93       	push	r16
    1c28:	1f 93       	push	r17
    1c2a:	cf 93       	push	r28
    1c2c:	df 93       	push	r29
    1c2e:	ec 01       	movw	r28, r24
    1c30:	04 2f       	mov	r16, r20
    1c32:	1e 8d       	ldd	r17, Y+30	; 0x1e
    1c34:	48 a1       	ldd	r20, Y+32	; 0x20
    1c36:	41 11       	cpse	r20, r1
    1c38:	0c c0       	rjmp	.+24     	; 0x1c52 <prvCopyDataToQueue+0x2c>
    1c3a:	88 81       	ld	r24, Y
    1c3c:	99 81       	ldd	r25, Y+1	; 0x01
    1c3e:	89 2b       	or	r24, r25
    1c40:	09 f0       	breq	.+2      	; 0x1c44 <prvCopyDataToQueue+0x1e>
    1c42:	42 c0       	rjmp	.+132    	; 0x1cc8 <prvCopyDataToQueue+0xa2>
    1c44:	8c 81       	ldd	r24, Y+4	; 0x04
    1c46:	9d 81       	ldd	r25, Y+5	; 0x05
    1c48:	0e 94 6c 1a 	call	0x34d8	; 0x34d8 <xTaskPriorityDisinherit>
    1c4c:	1d 82       	std	Y+5, r1	; 0x05
    1c4e:	1c 82       	std	Y+4, r1	; 0x04
    1c50:	42 c0       	rjmp	.+132    	; 0x1cd6 <prvCopyDataToQueue+0xb0>
    1c52:	01 11       	cpse	r16, r1
    1c54:	17 c0       	rjmp	.+46     	; 0x1c84 <prvCopyDataToQueue+0x5e>
    1c56:	50 e0       	ldi	r21, 0x00	; 0
    1c58:	8a 81       	ldd	r24, Y+2	; 0x02
    1c5a:	9b 81       	ldd	r25, Y+3	; 0x03
    1c5c:	0e 94 fa 30 	call	0x61f4	; 0x61f4 <memcpy>
    1c60:	28 a1       	ldd	r18, Y+32	; 0x20
    1c62:	8a 81       	ldd	r24, Y+2	; 0x02
    1c64:	9b 81       	ldd	r25, Y+3	; 0x03
    1c66:	82 0f       	add	r24, r18
    1c68:	91 1d       	adc	r25, r1
    1c6a:	9b 83       	std	Y+3, r25	; 0x03
    1c6c:	8a 83       	std	Y+2, r24	; 0x02
    1c6e:	2c 81       	ldd	r18, Y+4	; 0x04
    1c70:	3d 81       	ldd	r19, Y+5	; 0x05
    1c72:	82 17       	cp	r24, r18
    1c74:	93 07       	cpc	r25, r19
    1c76:	50 f1       	brcs	.+84     	; 0x1ccc <prvCopyDataToQueue+0xa6>
    1c78:	88 81       	ld	r24, Y
    1c7a:	99 81       	ldd	r25, Y+1	; 0x01
    1c7c:	9b 83       	std	Y+3, r25	; 0x03
    1c7e:	8a 83       	std	Y+2, r24	; 0x02
    1c80:	80 e0       	ldi	r24, 0x00	; 0
    1c82:	29 c0       	rjmp	.+82     	; 0x1cd6 <prvCopyDataToQueue+0xb0>
    1c84:	50 e0       	ldi	r21, 0x00	; 0
    1c86:	8e 81       	ldd	r24, Y+6	; 0x06
    1c88:	9f 81       	ldd	r25, Y+7	; 0x07
    1c8a:	0e 94 fa 30 	call	0x61f4	; 0x61f4 <memcpy>
    1c8e:	88 a1       	ldd	r24, Y+32	; 0x20
    1c90:	90 e0       	ldi	r25, 0x00	; 0
    1c92:	91 95       	neg	r25
    1c94:	81 95       	neg	r24
    1c96:	91 09       	sbc	r25, r1
    1c98:	2e 81       	ldd	r18, Y+6	; 0x06
    1c9a:	3f 81       	ldd	r19, Y+7	; 0x07
    1c9c:	28 0f       	add	r18, r24
    1c9e:	39 1f       	adc	r19, r25
    1ca0:	3f 83       	std	Y+7, r19	; 0x07
    1ca2:	2e 83       	std	Y+6, r18	; 0x06
    1ca4:	48 81       	ld	r20, Y
    1ca6:	59 81       	ldd	r21, Y+1	; 0x01
    1ca8:	24 17       	cp	r18, r20
    1caa:	35 07       	cpc	r19, r21
    1cac:	30 f4       	brcc	.+12     	; 0x1cba <prvCopyDataToQueue+0x94>
    1cae:	2c 81       	ldd	r18, Y+4	; 0x04
    1cb0:	3d 81       	ldd	r19, Y+5	; 0x05
    1cb2:	82 0f       	add	r24, r18
    1cb4:	93 1f       	adc	r25, r19
    1cb6:	9f 83       	std	Y+7, r25	; 0x07
    1cb8:	8e 83       	std	Y+6, r24	; 0x06
    1cba:	02 30       	cpi	r16, 0x02	; 2
    1cbc:	49 f4       	brne	.+18     	; 0x1cd0 <prvCopyDataToQueue+0xaa>
    1cbe:	11 23       	and	r17, r17
    1cc0:	49 f0       	breq	.+18     	; 0x1cd4 <prvCopyDataToQueue+0xae>
    1cc2:	11 50       	subi	r17, 0x01	; 1
    1cc4:	80 e0       	ldi	r24, 0x00	; 0
    1cc6:	07 c0       	rjmp	.+14     	; 0x1cd6 <prvCopyDataToQueue+0xb0>
    1cc8:	80 e0       	ldi	r24, 0x00	; 0
    1cca:	05 c0       	rjmp	.+10     	; 0x1cd6 <prvCopyDataToQueue+0xb0>
    1ccc:	80 e0       	ldi	r24, 0x00	; 0
    1cce:	03 c0       	rjmp	.+6      	; 0x1cd6 <prvCopyDataToQueue+0xb0>
    1cd0:	80 e0       	ldi	r24, 0x00	; 0
    1cd2:	01 c0       	rjmp	.+2      	; 0x1cd6 <prvCopyDataToQueue+0xb0>
    1cd4:	80 e0       	ldi	r24, 0x00	; 0
    1cd6:	1f 5f       	subi	r17, 0xFF	; 255
    1cd8:	1e 8f       	std	Y+30, r17	; 0x1e
    1cda:	df 91       	pop	r29
    1cdc:	cf 91       	pop	r28
    1cde:	1f 91       	pop	r17
    1ce0:	0f 91       	pop	r16
    1ce2:	08 95       	ret

00001ce4 <prvCopyDataFromQueue>:
    1ce4:	fc 01       	movw	r30, r24
    1ce6:	40 a1       	ldd	r20, Z+32	; 0x20
    1ce8:	44 23       	and	r20, r20
    1cea:	a9 f0       	breq	.+42     	; 0x1d16 <prvCopyDataFromQueue+0x32>
    1cec:	50 e0       	ldi	r21, 0x00	; 0
    1cee:	26 81       	ldd	r18, Z+6	; 0x06
    1cf0:	37 81       	ldd	r19, Z+7	; 0x07
    1cf2:	24 0f       	add	r18, r20
    1cf4:	35 1f       	adc	r19, r21
    1cf6:	37 83       	std	Z+7, r19	; 0x07
    1cf8:	26 83       	std	Z+6, r18	; 0x06
    1cfa:	84 81       	ldd	r24, Z+4	; 0x04
    1cfc:	95 81       	ldd	r25, Z+5	; 0x05
    1cfe:	28 17       	cp	r18, r24
    1d00:	39 07       	cpc	r19, r25
    1d02:	20 f0       	brcs	.+8      	; 0x1d0c <prvCopyDataFromQueue+0x28>
    1d04:	80 81       	ld	r24, Z
    1d06:	91 81       	ldd	r25, Z+1	; 0x01
    1d08:	97 83       	std	Z+7, r25	; 0x07
    1d0a:	86 83       	std	Z+6, r24	; 0x06
    1d0c:	cb 01       	movw	r24, r22
    1d0e:	66 81       	ldd	r22, Z+6	; 0x06
    1d10:	77 81       	ldd	r23, Z+7	; 0x07
    1d12:	0c 94 fa 30 	jmp	0x61f4	; 0x61f4 <memcpy>
    1d16:	08 95       	ret

00001d18 <prvUnlockQueue>:
    1d18:	ef 92       	push	r14
    1d1a:	ff 92       	push	r15
    1d1c:	0f 93       	push	r16
    1d1e:	1f 93       	push	r17
    1d20:	cf 93       	push	r28
    1d22:	8c 01       	movw	r16, r24
    1d24:	0f b6       	in	r0, 0x3f	; 63
    1d26:	f8 94       	cli
    1d28:	0f 92       	push	r0
    1d2a:	fc 01       	movw	r30, r24
    1d2c:	c2 a1       	ldd	r28, Z+34	; 0x22
    1d2e:	1c 16       	cp	r1, r28
    1d30:	ac f4       	brge	.+42     	; 0x1d5c <prvUnlockQueue+0x44>
    1d32:	83 89       	ldd	r24, Z+19	; 0x13
    1d34:	81 11       	cpse	r24, r1
    1d36:	06 c0       	rjmp	.+12     	; 0x1d44 <prvUnlockQueue+0x2c>
    1d38:	11 c0       	rjmp	.+34     	; 0x1d5c <prvUnlockQueue+0x44>
    1d3a:	f8 01       	movw	r30, r16
    1d3c:	83 89       	ldd	r24, Z+19	; 0x13
    1d3e:	81 11       	cpse	r24, r1
    1d40:	05 c0       	rjmp	.+10     	; 0x1d4c <prvUnlockQueue+0x34>
    1d42:	0c c0       	rjmp	.+24     	; 0x1d5c <prvUnlockQueue+0x44>
    1d44:	78 01       	movw	r14, r16
    1d46:	f3 e1       	ldi	r31, 0x13	; 19
    1d48:	ef 0e       	add	r14, r31
    1d4a:	f1 1c       	adc	r15, r1
    1d4c:	c7 01       	movw	r24, r14
    1d4e:	0e 94 f5 18 	call	0x31ea	; 0x31ea <xTaskRemoveFromEventList>
    1d52:	81 11       	cpse	r24, r1
    1d54:	0e 94 e7 19 	call	0x33ce	; 0x33ce <vTaskMissedYield>
    1d58:	c1 50       	subi	r28, 0x01	; 1
    1d5a:	79 f7       	brne	.-34     	; 0x1d3a <prvUnlockQueue+0x22>
    1d5c:	8f ef       	ldi	r24, 0xFF	; 255
    1d5e:	f8 01       	movw	r30, r16
    1d60:	82 a3       	std	Z+34, r24	; 0x22
    1d62:	0f 90       	pop	r0
    1d64:	0f be       	out	0x3f, r0	; 63
    1d66:	0f b6       	in	r0, 0x3f	; 63
    1d68:	f8 94       	cli
    1d6a:	0f 92       	push	r0
    1d6c:	c1 a1       	ldd	r28, Z+33	; 0x21
    1d6e:	1c 16       	cp	r1, r28
    1d70:	ac f4       	brge	.+42     	; 0x1d9c <prvUnlockQueue+0x84>
    1d72:	80 85       	ldd	r24, Z+8	; 0x08
    1d74:	81 11       	cpse	r24, r1
    1d76:	06 c0       	rjmp	.+12     	; 0x1d84 <prvUnlockQueue+0x6c>
    1d78:	11 c0       	rjmp	.+34     	; 0x1d9c <prvUnlockQueue+0x84>
    1d7a:	f8 01       	movw	r30, r16
    1d7c:	80 85       	ldd	r24, Z+8	; 0x08
    1d7e:	81 11       	cpse	r24, r1
    1d80:	05 c0       	rjmp	.+10     	; 0x1d8c <prvUnlockQueue+0x74>
    1d82:	0c c0       	rjmp	.+24     	; 0x1d9c <prvUnlockQueue+0x84>
    1d84:	78 01       	movw	r14, r16
    1d86:	f8 e0       	ldi	r31, 0x08	; 8
    1d88:	ef 0e       	add	r14, r31
    1d8a:	f1 1c       	adc	r15, r1
    1d8c:	c7 01       	movw	r24, r14
    1d8e:	0e 94 f5 18 	call	0x31ea	; 0x31ea <xTaskRemoveFromEventList>
    1d92:	81 11       	cpse	r24, r1
    1d94:	0e 94 e7 19 	call	0x33ce	; 0x33ce <vTaskMissedYield>
    1d98:	c1 50       	subi	r28, 0x01	; 1
    1d9a:	79 f7       	brne	.-34     	; 0x1d7a <prvUnlockQueue+0x62>
    1d9c:	8f ef       	ldi	r24, 0xFF	; 255
    1d9e:	f8 01       	movw	r30, r16
    1da0:	81 a3       	std	Z+33, r24	; 0x21
    1da2:	0f 90       	pop	r0
    1da4:	0f be       	out	0x3f, r0	; 63
    1da6:	cf 91       	pop	r28
    1da8:	1f 91       	pop	r17
    1daa:	0f 91       	pop	r16
    1dac:	ff 90       	pop	r15
    1dae:	ef 90       	pop	r14
    1db0:	08 95       	ret

00001db2 <xQueueGenericReset>:
    1db2:	cf 93       	push	r28
    1db4:	df 93       	push	r29
    1db6:	ec 01       	movw	r28, r24
    1db8:	0f b6       	in	r0, 0x3f	; 63
    1dba:	f8 94       	cli
    1dbc:	0f 92       	push	r0
    1dbe:	e8 81       	ld	r30, Y
    1dc0:	f9 81       	ldd	r31, Y+1	; 0x01
    1dc2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1dc4:	28 a1       	ldd	r18, Y+32	; 0x20
    1dc6:	90 e0       	ldi	r25, 0x00	; 0
    1dc8:	30 e0       	ldi	r19, 0x00	; 0
    1dca:	82 9f       	mul	r24, r18
    1dcc:	a0 01       	movw	r20, r0
    1dce:	83 9f       	mul	r24, r19
    1dd0:	50 0d       	add	r21, r0
    1dd2:	92 9f       	mul	r25, r18
    1dd4:	50 0d       	add	r21, r0
    1dd6:	11 24       	eor	r1, r1
    1dd8:	4e 0f       	add	r20, r30
    1dda:	5f 1f       	adc	r21, r31
    1ddc:	5d 83       	std	Y+5, r21	; 0x05
    1dde:	4c 83       	std	Y+4, r20	; 0x04
    1de0:	1e 8e       	std	Y+30, r1	; 0x1e
    1de2:	fb 83       	std	Y+3, r31	; 0x03
    1de4:	ea 83       	std	Y+2, r30	; 0x02
    1de6:	01 97       	sbiw	r24, 0x01	; 1
    1de8:	82 9f       	mul	r24, r18
    1dea:	a0 01       	movw	r20, r0
    1dec:	83 9f       	mul	r24, r19
    1dee:	50 0d       	add	r21, r0
    1df0:	92 9f       	mul	r25, r18
    1df2:	50 0d       	add	r21, r0
    1df4:	11 24       	eor	r1, r1
    1df6:	cf 01       	movw	r24, r30
    1df8:	84 0f       	add	r24, r20
    1dfa:	95 1f       	adc	r25, r21
    1dfc:	9f 83       	std	Y+7, r25	; 0x07
    1dfe:	8e 83       	std	Y+6, r24	; 0x06
    1e00:	8f ef       	ldi	r24, 0xFF	; 255
    1e02:	89 a3       	std	Y+33, r24	; 0x21
    1e04:	8a a3       	std	Y+34, r24	; 0x22
    1e06:	61 11       	cpse	r22, r1
    1e08:	0b c0       	rjmp	.+22     	; 0x1e20 <xQueueGenericReset+0x6e>
    1e0a:	88 85       	ldd	r24, Y+8	; 0x08
    1e0c:	88 23       	and	r24, r24
    1e0e:	71 f0       	breq	.+28     	; 0x1e2c <xQueueGenericReset+0x7a>
    1e10:	ce 01       	movw	r24, r28
    1e12:	08 96       	adiw	r24, 0x08	; 8
    1e14:	0e 94 f5 18 	call	0x31ea	; 0x31ea <xTaskRemoveFromEventList>
    1e18:	88 23       	and	r24, r24
    1e1a:	41 f0       	breq	.+16     	; 0x1e2c <xQueueGenericReset+0x7a>
    1e1c:	31 de       	rcall	.-926    	; 0x1a80 <vPortYield>
    1e1e:	06 c0       	rjmp	.+12     	; 0x1e2c <xQueueGenericReset+0x7a>
    1e20:	ce 01       	movw	r24, r28
    1e22:	08 96       	adiw	r24, 0x08	; 8
    1e24:	e5 dc       	rcall	.-1590   	; 0x17f0 <vListInitialise>
    1e26:	ce 01       	movw	r24, r28
    1e28:	43 96       	adiw	r24, 0x13	; 19
    1e2a:	e2 dc       	rcall	.-1596   	; 0x17f0 <vListInitialise>
    1e2c:	0f 90       	pop	r0
    1e2e:	0f be       	out	0x3f, r0	; 63
    1e30:	81 e0       	ldi	r24, 0x01	; 1
    1e32:	df 91       	pop	r29
    1e34:	cf 91       	pop	r28
    1e36:	08 95       	ret

00001e38 <xQueueGenericCreate>:
    1e38:	ff 92       	push	r15
    1e3a:	0f 93       	push	r16
    1e3c:	1f 93       	push	r17
    1e3e:	cf 93       	push	r28
    1e40:	df 93       	push	r29
    1e42:	08 2f       	mov	r16, r24
    1e44:	16 2f       	mov	r17, r22
    1e46:	f4 2e       	mov	r15, r20
    1e48:	66 23       	and	r22, r22
    1e4a:	b9 f0       	breq	.+46     	; 0x1e7a <xQueueGenericCreate+0x42>
    1e4c:	86 9f       	mul	r24, r22
    1e4e:	c0 01       	movw	r24, r0
    1e50:	11 24       	eor	r1, r1
    1e52:	85 96       	adiw	r24, 0x25	; 37
    1e54:	e3 db       	rcall	.-2106   	; 0x161c <pvPortMalloc>
    1e56:	ec 01       	movw	r28, r24
    1e58:	00 97       	sbiw	r24, 0x00	; 0
    1e5a:	41 f4       	brne	.+16     	; 0x1e6c <xQueueGenericCreate+0x34>
    1e5c:	14 c0       	rjmp	.+40     	; 0x1e86 <xQueueGenericCreate+0x4e>
    1e5e:	0f 8f       	std	Y+31, r16	; 0x1f
    1e60:	18 a3       	std	Y+32, r17	; 0x20
    1e62:	61 e0       	ldi	r22, 0x01	; 1
    1e64:	ce 01       	movw	r24, r28
    1e66:	a5 df       	rcall	.-182    	; 0x1db2 <xQueueGenericReset>
    1e68:	fc a2       	std	Y+36, r15	; 0x24
    1e6a:	0d c0       	rjmp	.+26     	; 0x1e86 <xQueueGenericCreate+0x4e>
    1e6c:	85 96       	adiw	r24, 0x25	; 37
    1e6e:	99 83       	std	Y+1, r25	; 0x01
    1e70:	88 83       	st	Y, r24
    1e72:	f5 cf       	rjmp	.-22     	; 0x1e5e <xQueueGenericCreate+0x26>
    1e74:	d9 83       	std	Y+1, r29	; 0x01
    1e76:	c8 83       	st	Y, r28
    1e78:	f2 cf       	rjmp	.-28     	; 0x1e5e <xQueueGenericCreate+0x26>
    1e7a:	85 e2       	ldi	r24, 0x25	; 37
    1e7c:	90 e0       	ldi	r25, 0x00	; 0
    1e7e:	ce db       	rcall	.-2148   	; 0x161c <pvPortMalloc>
    1e80:	ec 01       	movw	r28, r24
    1e82:	89 2b       	or	r24, r25
    1e84:	b9 f7       	brne	.-18     	; 0x1e74 <xQueueGenericCreate+0x3c>
    1e86:	ce 01       	movw	r24, r28
    1e88:	df 91       	pop	r29
    1e8a:	cf 91       	pop	r28
    1e8c:	1f 91       	pop	r17
    1e8e:	0f 91       	pop	r16
    1e90:	ff 90       	pop	r15
    1e92:	08 95       	ret

00001e94 <xQueueGenericSend>:
    1e94:	9f 92       	push	r9
    1e96:	af 92       	push	r10
    1e98:	bf 92       	push	r11
    1e9a:	cf 92       	push	r12
    1e9c:	df 92       	push	r13
    1e9e:	ef 92       	push	r14
    1ea0:	ff 92       	push	r15
    1ea2:	0f 93       	push	r16
    1ea4:	1f 93       	push	r17
    1ea6:	cf 93       	push	r28
    1ea8:	df 93       	push	r29
    1eaa:	cd b7       	in	r28, 0x3d	; 61
    1eac:	de b7       	in	r29, 0x3e	; 62
    1eae:	29 97       	sbiw	r28, 0x09	; 9
    1eb0:	0f b6       	in	r0, 0x3f	; 63
    1eb2:	f8 94       	cli
    1eb4:	de bf       	out	0x3e, r29	; 62
    1eb6:	0f be       	out	0x3f, r0	; 63
    1eb8:	cd bf       	out	0x3d, r28	; 61
    1eba:	7c 01       	movw	r14, r24
    1ebc:	5b 01       	movw	r10, r22
    1ebe:	2e 83       	std	Y+6, r18	; 0x06
    1ec0:	3f 83       	std	Y+7, r19	; 0x07
    1ec2:	48 87       	std	Y+8, r20	; 0x08
    1ec4:	59 87       	std	Y+9, r21	; 0x09
    1ec6:	10 e0       	ldi	r17, 0x00	; 0
    1ec8:	99 24       	eor	r9, r9
    1eca:	93 94       	inc	r9
    1ecc:	6c 01       	movw	r12, r24
    1ece:	88 e0       	ldi	r24, 0x08	; 8
    1ed0:	c8 0e       	add	r12, r24
    1ed2:	d1 1c       	adc	r13, r1
    1ed4:	0f b6       	in	r0, 0x3f	; 63
    1ed6:	f8 94       	cli
    1ed8:	0f 92       	push	r0
    1eda:	f7 01       	movw	r30, r14
    1edc:	96 8d       	ldd	r25, Z+30	; 0x1e
    1ede:	87 8d       	ldd	r24, Z+31	; 0x1f
    1ee0:	98 17       	cp	r25, r24
    1ee2:	10 f0       	brcs	.+4      	; 0x1ee8 <xQueueGenericSend+0x54>
    1ee4:	02 30       	cpi	r16, 0x02	; 2
    1ee6:	b1 f4       	brne	.+44     	; 0x1f14 <xQueueGenericSend+0x80>
    1ee8:	40 2f       	mov	r20, r16
    1eea:	b5 01       	movw	r22, r10
    1eec:	c7 01       	movw	r24, r14
    1eee:	9b de       	rcall	.-714    	; 0x1c26 <prvCopyDataToQueue>
    1ef0:	f7 01       	movw	r30, r14
    1ef2:	93 89       	ldd	r25, Z+19	; 0x13
    1ef4:	99 23       	and	r25, r25
    1ef6:	41 f0       	breq	.+16     	; 0x1f08 <xQueueGenericSend+0x74>
    1ef8:	c7 01       	movw	r24, r14
    1efa:	43 96       	adiw	r24, 0x13	; 19
    1efc:	0e 94 f5 18 	call	0x31ea	; 0x31ea <xTaskRemoveFromEventList>
    1f00:	88 23       	and	r24, r24
    1f02:	21 f0       	breq	.+8      	; 0x1f0c <xQueueGenericSend+0x78>
    1f04:	bd dd       	rcall	.-1158   	; 0x1a80 <vPortYield>
    1f06:	02 c0       	rjmp	.+4      	; 0x1f0c <xQueueGenericSend+0x78>
    1f08:	81 11       	cpse	r24, r1
    1f0a:	ba dd       	rcall	.-1164   	; 0x1a80 <vPortYield>
    1f0c:	0f 90       	pop	r0
    1f0e:	0f be       	out	0x3f, r0	; 63
    1f10:	81 e0       	ldi	r24, 0x01	; 1
    1f12:	4e c0       	rjmp	.+156    	; 0x1fb0 <xQueueGenericSend+0x11c>
    1f14:	8e 81       	ldd	r24, Y+6	; 0x06
    1f16:	9f 81       	ldd	r25, Y+7	; 0x07
    1f18:	a8 85       	ldd	r26, Y+8	; 0x08
    1f1a:	b9 85       	ldd	r27, Y+9	; 0x09
    1f1c:	89 2b       	or	r24, r25
    1f1e:	8a 2b       	or	r24, r26
    1f20:	8b 2b       	or	r24, r27
    1f22:	21 f4       	brne	.+8      	; 0x1f2c <xQueueGenericSend+0x98>
    1f24:	0f 90       	pop	r0
    1f26:	0f be       	out	0x3f, r0	; 63
    1f28:	80 e0       	ldi	r24, 0x00	; 0
    1f2a:	42 c0       	rjmp	.+132    	; 0x1fb0 <xQueueGenericSend+0x11c>
    1f2c:	11 11       	cpse	r17, r1
    1f2e:	05 c0       	rjmp	.+10     	; 0x1f3a <xQueueGenericSend+0xa6>
    1f30:	ce 01       	movw	r24, r28
    1f32:	01 96       	adiw	r24, 0x01	; 1
    1f34:	0e 94 81 19 	call	0x3302	; 0x3302 <vTaskInternalSetTimeOutState>
    1f38:	19 2d       	mov	r17, r9
    1f3a:	0f 90       	pop	r0
    1f3c:	0f be       	out	0x3f, r0	; 63
    1f3e:	fd d6       	rcall	.+3578   	; 0x2d3a <vTaskSuspendAll>
    1f40:	0f b6       	in	r0, 0x3f	; 63
    1f42:	f8 94       	cli
    1f44:	0f 92       	push	r0
    1f46:	f7 01       	movw	r30, r14
    1f48:	81 a1       	ldd	r24, Z+33	; 0x21
    1f4a:	8f 3f       	cpi	r24, 0xFF	; 255
    1f4c:	09 f4       	brne	.+2      	; 0x1f50 <xQueueGenericSend+0xbc>
    1f4e:	11 a2       	std	Z+33, r1	; 0x21
    1f50:	f7 01       	movw	r30, r14
    1f52:	82 a1       	ldd	r24, Z+34	; 0x22
    1f54:	8f 3f       	cpi	r24, 0xFF	; 255
    1f56:	09 f4       	brne	.+2      	; 0x1f5a <xQueueGenericSend+0xc6>
    1f58:	12 a2       	std	Z+34, r1	; 0x22
    1f5a:	0f 90       	pop	r0
    1f5c:	0f be       	out	0x3f, r0	; 63
    1f5e:	be 01       	movw	r22, r28
    1f60:	6a 5f       	subi	r22, 0xFA	; 250
    1f62:	7f 4f       	sbci	r23, 0xFF	; 255
    1f64:	ce 01       	movw	r24, r28
    1f66:	01 96       	adiw	r24, 0x01	; 1
    1f68:	0e 94 92 19 	call	0x3324	; 0x3324 <xTaskCheckForTimeOut>
    1f6c:	81 11       	cpse	r24, r1
    1f6e:	1c c0       	rjmp	.+56     	; 0x1fa8 <xQueueGenericSend+0x114>
    1f70:	0f b6       	in	r0, 0x3f	; 63
    1f72:	f8 94       	cli
    1f74:	0f 92       	push	r0
    1f76:	f7 01       	movw	r30, r14
    1f78:	96 8d       	ldd	r25, Z+30	; 0x1e
    1f7a:	87 8d       	ldd	r24, Z+31	; 0x1f
    1f7c:	0f 90       	pop	r0
    1f7e:	0f be       	out	0x3f, r0	; 63
    1f80:	98 13       	cpse	r25, r24
    1f82:	0e c0       	rjmp	.+28     	; 0x1fa0 <xQueueGenericSend+0x10c>
    1f84:	4e 81       	ldd	r20, Y+6	; 0x06
    1f86:	5f 81       	ldd	r21, Y+7	; 0x07
    1f88:	68 85       	ldd	r22, Y+8	; 0x08
    1f8a:	79 85       	ldd	r23, Y+9	; 0x09
    1f8c:	c6 01       	movw	r24, r12
    1f8e:	0e 94 9a 18 	call	0x3134	; 0x3134 <vTaskPlaceOnEventList>
    1f92:	c7 01       	movw	r24, r14
    1f94:	c1 de       	rcall	.-638    	; 0x1d18 <prvUnlockQueue>
    1f96:	ba d7       	rcall	.+3956   	; 0x2f0c <xTaskResumeAll>
    1f98:	81 11       	cpse	r24, r1
    1f9a:	9c cf       	rjmp	.-200    	; 0x1ed4 <xQueueGenericSend+0x40>
    1f9c:	71 dd       	rcall	.-1310   	; 0x1a80 <vPortYield>
    1f9e:	9a cf       	rjmp	.-204    	; 0x1ed4 <xQueueGenericSend+0x40>
    1fa0:	c7 01       	movw	r24, r14
    1fa2:	ba de       	rcall	.-652    	; 0x1d18 <prvUnlockQueue>
    1fa4:	b3 d7       	rcall	.+3942   	; 0x2f0c <xTaskResumeAll>
    1fa6:	96 cf       	rjmp	.-212    	; 0x1ed4 <xQueueGenericSend+0x40>
    1fa8:	c7 01       	movw	r24, r14
    1faa:	b6 de       	rcall	.-660    	; 0x1d18 <prvUnlockQueue>
    1fac:	af d7       	rcall	.+3934   	; 0x2f0c <xTaskResumeAll>
    1fae:	80 e0       	ldi	r24, 0x00	; 0
    1fb0:	29 96       	adiw	r28, 0x09	; 9
    1fb2:	0f b6       	in	r0, 0x3f	; 63
    1fb4:	f8 94       	cli
    1fb6:	de bf       	out	0x3e, r29	; 62
    1fb8:	0f be       	out	0x3f, r0	; 63
    1fba:	cd bf       	out	0x3d, r28	; 61
    1fbc:	df 91       	pop	r29
    1fbe:	cf 91       	pop	r28
    1fc0:	1f 91       	pop	r17
    1fc2:	0f 91       	pop	r16
    1fc4:	ff 90       	pop	r15
    1fc6:	ef 90       	pop	r14
    1fc8:	df 90       	pop	r13
    1fca:	cf 90       	pop	r12
    1fcc:	bf 90       	pop	r11
    1fce:	af 90       	pop	r10
    1fd0:	9f 90       	pop	r9
    1fd2:	08 95       	ret

00001fd4 <xQueueCreateMutex>:
    1fd4:	0f 93       	push	r16
    1fd6:	cf 93       	push	r28
    1fd8:	df 93       	push	r29
    1fda:	48 2f       	mov	r20, r24
    1fdc:	60 e0       	ldi	r22, 0x00	; 0
    1fde:	81 e0       	ldi	r24, 0x01	; 1
    1fe0:	2b df       	rcall	.-426    	; 0x1e38 <xQueueGenericCreate>
    1fe2:	ec 01       	movw	r28, r24
    1fe4:	00 97       	sbiw	r24, 0x00	; 0
    1fe6:	61 f0       	breq	.+24     	; 0x2000 <xQueueCreateMutex+0x2c>
    1fe8:	1d 82       	std	Y+5, r1	; 0x05
    1fea:	1c 82       	std	Y+4, r1	; 0x04
    1fec:	19 82       	std	Y+1, r1	; 0x01
    1fee:	18 82       	st	Y, r1
    1ff0:	1e 82       	std	Y+6, r1	; 0x06
    1ff2:	00 e0       	ldi	r16, 0x00	; 0
    1ff4:	20 e0       	ldi	r18, 0x00	; 0
    1ff6:	30 e0       	ldi	r19, 0x00	; 0
    1ff8:	a9 01       	movw	r20, r18
    1ffa:	60 e0       	ldi	r22, 0x00	; 0
    1ffc:	70 e0       	ldi	r23, 0x00	; 0
    1ffe:	4a df       	rcall	.-364    	; 0x1e94 <xQueueGenericSend>
    2000:	ce 01       	movw	r24, r28
    2002:	df 91       	pop	r29
    2004:	cf 91       	pop	r28
    2006:	0f 91       	pop	r16
    2008:	08 95       	ret

0000200a <xQueueGenericSendFromISR>:
    200a:	ef 92       	push	r14
    200c:	ff 92       	push	r15
    200e:	0f 93       	push	r16
    2010:	1f 93       	push	r17
    2012:	cf 93       	push	r28
    2014:	df 93       	push	r29
    2016:	8a 01       	movw	r16, r20
    2018:	fc 01       	movw	r30, r24
    201a:	56 8d       	ldd	r21, Z+30	; 0x1e
    201c:	37 8d       	ldd	r19, Z+31	; 0x1f
    201e:	53 17       	cp	r21, r19
    2020:	10 f0       	brcs	.+4      	; 0x2026 <xQueueGenericSendFromISR+0x1c>
    2022:	22 30       	cpi	r18, 0x02	; 2
    2024:	e9 f4       	brne	.+58     	; 0x2060 <xQueueGenericSendFromISR+0x56>
    2026:	42 2f       	mov	r20, r18
    2028:	78 01       	movw	r14, r16
    202a:	ec 01       	movw	r28, r24
    202c:	1a a1       	ldd	r17, Y+34	; 0x22
    202e:	fb dd       	rcall	.-1034   	; 0x1c26 <prvCopyDataToQueue>
    2030:	1f 3f       	cpi	r17, 0xFF	; 255
    2032:	81 f4       	brne	.+32     	; 0x2054 <xQueueGenericSendFromISR+0x4a>
    2034:	8b 89       	ldd	r24, Y+19	; 0x13
    2036:	88 23       	and	r24, r24
    2038:	a9 f0       	breq	.+42     	; 0x2064 <xQueueGenericSendFromISR+0x5a>
    203a:	ce 01       	movw	r24, r28
    203c:	43 96       	adiw	r24, 0x13	; 19
    203e:	0e 94 f5 18 	call	0x31ea	; 0x31ea <xTaskRemoveFromEventList>
    2042:	88 23       	and	r24, r24
    2044:	89 f0       	breq	.+34     	; 0x2068 <xQueueGenericSendFromISR+0x5e>
    2046:	e1 14       	cp	r14, r1
    2048:	f1 04       	cpc	r15, r1
    204a:	81 f0       	breq	.+32     	; 0x206c <xQueueGenericSendFromISR+0x62>
    204c:	81 e0       	ldi	r24, 0x01	; 1
    204e:	f7 01       	movw	r30, r14
    2050:	80 83       	st	Z, r24
    2052:	0d c0       	rjmp	.+26     	; 0x206e <xQueueGenericSendFromISR+0x64>
    2054:	ff 24       	eor	r15, r15
    2056:	f3 94       	inc	r15
    2058:	f1 0e       	add	r15, r17
    205a:	fa a2       	std	Y+34, r15	; 0x22
    205c:	81 e0       	ldi	r24, 0x01	; 1
    205e:	07 c0       	rjmp	.+14     	; 0x206e <xQueueGenericSendFromISR+0x64>
    2060:	80 e0       	ldi	r24, 0x00	; 0
    2062:	05 c0       	rjmp	.+10     	; 0x206e <xQueueGenericSendFromISR+0x64>
    2064:	81 e0       	ldi	r24, 0x01	; 1
    2066:	03 c0       	rjmp	.+6      	; 0x206e <xQueueGenericSendFromISR+0x64>
    2068:	81 e0       	ldi	r24, 0x01	; 1
    206a:	01 c0       	rjmp	.+2      	; 0x206e <xQueueGenericSendFromISR+0x64>
    206c:	81 e0       	ldi	r24, 0x01	; 1
    206e:	df 91       	pop	r29
    2070:	cf 91       	pop	r28
    2072:	1f 91       	pop	r17
    2074:	0f 91       	pop	r16
    2076:	ff 90       	pop	r15
    2078:	ef 90       	pop	r14
    207a:	08 95       	ret

0000207c <xQueueReceive>:
    207c:	9f 92       	push	r9
    207e:	af 92       	push	r10
    2080:	bf 92       	push	r11
    2082:	cf 92       	push	r12
    2084:	df 92       	push	r13
    2086:	ef 92       	push	r14
    2088:	ff 92       	push	r15
    208a:	0f 93       	push	r16
    208c:	1f 93       	push	r17
    208e:	cf 93       	push	r28
    2090:	df 93       	push	r29
    2092:	cd b7       	in	r28, 0x3d	; 61
    2094:	de b7       	in	r29, 0x3e	; 62
    2096:	29 97       	sbiw	r28, 0x09	; 9
    2098:	0f b6       	in	r0, 0x3f	; 63
    209a:	f8 94       	cli
    209c:	de bf       	out	0x3e, r29	; 62
    209e:	0f be       	out	0x3f, r0	; 63
    20a0:	cd bf       	out	0x3d, r28	; 61
    20a2:	8c 01       	movw	r16, r24
    20a4:	5b 01       	movw	r10, r22
    20a6:	2e 83       	std	Y+6, r18	; 0x06
    20a8:	3f 83       	std	Y+7, r19	; 0x07
    20aa:	48 87       	std	Y+8, r20	; 0x08
    20ac:	59 87       	std	Y+9, r21	; 0x09
    20ae:	e1 2c       	mov	r14, r1
    20b0:	99 24       	eor	r9, r9
    20b2:	93 94       	inc	r9
    20b4:	6c 01       	movw	r12, r24
    20b6:	83 e1       	ldi	r24, 0x13	; 19
    20b8:	c8 0e       	add	r12, r24
    20ba:	d1 1c       	adc	r13, r1
    20bc:	0f b6       	in	r0, 0x3f	; 63
    20be:	f8 94       	cli
    20c0:	0f 92       	push	r0
    20c2:	f8 01       	movw	r30, r16
    20c4:	f6 8c       	ldd	r15, Z+30	; 0x1e
    20c6:	ff 20       	and	r15, r15
    20c8:	99 f0       	breq	.+38     	; 0x20f0 <xQueueReceive+0x74>
    20ca:	b5 01       	movw	r22, r10
    20cc:	c8 01       	movw	r24, r16
    20ce:	0a de       	rcall	.-1004   	; 0x1ce4 <prvCopyDataFromQueue>
    20d0:	fa 94       	dec	r15
    20d2:	f8 01       	movw	r30, r16
    20d4:	f6 8e       	std	Z+30, r15	; 0x1e
    20d6:	80 85       	ldd	r24, Z+8	; 0x08
    20d8:	88 23       	and	r24, r24
    20da:	31 f0       	breq	.+12     	; 0x20e8 <xQueueReceive+0x6c>
    20dc:	c8 01       	movw	r24, r16
    20de:	08 96       	adiw	r24, 0x08	; 8
    20e0:	0e 94 f5 18 	call	0x31ea	; 0x31ea <xTaskRemoveFromEventList>
    20e4:	81 11       	cpse	r24, r1
    20e6:	cc dc       	rcall	.-1640   	; 0x1a80 <vPortYield>
    20e8:	0f 90       	pop	r0
    20ea:	0f be       	out	0x3f, r0	; 63
    20ec:	81 e0       	ldi	r24, 0x01	; 1
    20ee:	4c c0       	rjmp	.+152    	; 0x2188 <xQueueReceive+0x10c>
    20f0:	8e 81       	ldd	r24, Y+6	; 0x06
    20f2:	9f 81       	ldd	r25, Y+7	; 0x07
    20f4:	a8 85       	ldd	r26, Y+8	; 0x08
    20f6:	b9 85       	ldd	r27, Y+9	; 0x09
    20f8:	89 2b       	or	r24, r25
    20fa:	8a 2b       	or	r24, r26
    20fc:	8b 2b       	or	r24, r27
    20fe:	21 f4       	brne	.+8      	; 0x2108 <xQueueReceive+0x8c>
    2100:	0f 90       	pop	r0
    2102:	0f be       	out	0x3f, r0	; 63
    2104:	80 e0       	ldi	r24, 0x00	; 0
    2106:	40 c0       	rjmp	.+128    	; 0x2188 <xQueueReceive+0x10c>
    2108:	e1 10       	cpse	r14, r1
    210a:	05 c0       	rjmp	.+10     	; 0x2116 <xQueueReceive+0x9a>
    210c:	ce 01       	movw	r24, r28
    210e:	01 96       	adiw	r24, 0x01	; 1
    2110:	0e 94 81 19 	call	0x3302	; 0x3302 <vTaskInternalSetTimeOutState>
    2114:	e9 2c       	mov	r14, r9
    2116:	0f 90       	pop	r0
    2118:	0f be       	out	0x3f, r0	; 63
    211a:	0f d6       	rcall	.+3102   	; 0x2d3a <vTaskSuspendAll>
    211c:	0f b6       	in	r0, 0x3f	; 63
    211e:	f8 94       	cli
    2120:	0f 92       	push	r0
    2122:	f8 01       	movw	r30, r16
    2124:	81 a1       	ldd	r24, Z+33	; 0x21
    2126:	8f 3f       	cpi	r24, 0xFF	; 255
    2128:	09 f4       	brne	.+2      	; 0x212c <xQueueReceive+0xb0>
    212a:	11 a2       	std	Z+33, r1	; 0x21
    212c:	f8 01       	movw	r30, r16
    212e:	82 a1       	ldd	r24, Z+34	; 0x22
    2130:	8f 3f       	cpi	r24, 0xFF	; 255
    2132:	09 f4       	brne	.+2      	; 0x2136 <xQueueReceive+0xba>
    2134:	12 a2       	std	Z+34, r1	; 0x22
    2136:	0f 90       	pop	r0
    2138:	0f be       	out	0x3f, r0	; 63
    213a:	be 01       	movw	r22, r28
    213c:	6a 5f       	subi	r22, 0xFA	; 250
    213e:	7f 4f       	sbci	r23, 0xFF	; 255
    2140:	ce 01       	movw	r24, r28
    2142:	01 96       	adiw	r24, 0x01	; 1
    2144:	0e 94 92 19 	call	0x3324	; 0x3324 <xTaskCheckForTimeOut>
    2148:	81 11       	cpse	r24, r1
    214a:	15 c0       	rjmp	.+42     	; 0x2176 <xQueueReceive+0xfa>
    214c:	c8 01       	movw	r24, r16
    214e:	60 dd       	rcall	.-1344   	; 0x1c10 <prvIsQueueEmpty>
    2150:	88 23       	and	r24, r24
    2152:	69 f0       	breq	.+26     	; 0x216e <xQueueReceive+0xf2>
    2154:	4e 81       	ldd	r20, Y+6	; 0x06
    2156:	5f 81       	ldd	r21, Y+7	; 0x07
    2158:	68 85       	ldd	r22, Y+8	; 0x08
    215a:	79 85       	ldd	r23, Y+9	; 0x09
    215c:	c6 01       	movw	r24, r12
    215e:	ea d7       	rcall	.+4052   	; 0x3134 <vTaskPlaceOnEventList>
    2160:	c8 01       	movw	r24, r16
    2162:	da dd       	rcall	.-1100   	; 0x1d18 <prvUnlockQueue>
    2164:	d3 d6       	rcall	.+3494   	; 0x2f0c <xTaskResumeAll>
    2166:	81 11       	cpse	r24, r1
    2168:	a9 cf       	rjmp	.-174    	; 0x20bc <xQueueReceive+0x40>
    216a:	8a dc       	rcall	.-1772   	; 0x1a80 <vPortYield>
    216c:	a7 cf       	rjmp	.-178    	; 0x20bc <xQueueReceive+0x40>
    216e:	c8 01       	movw	r24, r16
    2170:	d3 dd       	rcall	.-1114   	; 0x1d18 <prvUnlockQueue>
    2172:	cc d6       	rcall	.+3480   	; 0x2f0c <xTaskResumeAll>
    2174:	a3 cf       	rjmp	.-186    	; 0x20bc <xQueueReceive+0x40>
    2176:	c8 01       	movw	r24, r16
    2178:	cf dd       	rcall	.-1122   	; 0x1d18 <prvUnlockQueue>
    217a:	c8 d6       	rcall	.+3472   	; 0x2f0c <xTaskResumeAll>
    217c:	c8 01       	movw	r24, r16
    217e:	48 dd       	rcall	.-1392   	; 0x1c10 <prvIsQueueEmpty>
    2180:	88 23       	and	r24, r24
    2182:	09 f4       	brne	.+2      	; 0x2186 <xQueueReceive+0x10a>
    2184:	9b cf       	rjmp	.-202    	; 0x20bc <xQueueReceive+0x40>
    2186:	80 e0       	ldi	r24, 0x00	; 0
    2188:	29 96       	adiw	r28, 0x09	; 9
    218a:	0f b6       	in	r0, 0x3f	; 63
    218c:	f8 94       	cli
    218e:	de bf       	out	0x3e, r29	; 62
    2190:	0f be       	out	0x3f, r0	; 63
    2192:	cd bf       	out	0x3d, r28	; 61
    2194:	df 91       	pop	r29
    2196:	cf 91       	pop	r28
    2198:	1f 91       	pop	r17
    219a:	0f 91       	pop	r16
    219c:	ff 90       	pop	r15
    219e:	ef 90       	pop	r14
    21a0:	df 90       	pop	r13
    21a2:	cf 90       	pop	r12
    21a4:	bf 90       	pop	r11
    21a6:	af 90       	pop	r10
    21a8:	9f 90       	pop	r9
    21aa:	08 95       	ret

000021ac <xQueueSemaphoreTake>:
    21ac:	bf 92       	push	r11
    21ae:	cf 92       	push	r12
    21b0:	df 92       	push	r13
    21b2:	ef 92       	push	r14
    21b4:	ff 92       	push	r15
    21b6:	0f 93       	push	r16
    21b8:	1f 93       	push	r17
    21ba:	cf 93       	push	r28
    21bc:	df 93       	push	r29
    21be:	cd b7       	in	r28, 0x3d	; 61
    21c0:	de b7       	in	r29, 0x3e	; 62
    21c2:	29 97       	sbiw	r28, 0x09	; 9
    21c4:	0f b6       	in	r0, 0x3f	; 63
    21c6:	f8 94       	cli
    21c8:	de bf       	out	0x3e, r29	; 62
    21ca:	0f be       	out	0x3f, r0	; 63
    21cc:	cd bf       	out	0x3d, r28	; 61
    21ce:	8c 01       	movw	r16, r24
    21d0:	4e 83       	std	Y+6, r20	; 0x06
    21d2:	5f 83       	std	Y+7, r21	; 0x07
    21d4:	68 87       	std	Y+8, r22	; 0x08
    21d6:	79 87       	std	Y+9, r23	; 0x09
    21d8:	b1 2c       	mov	r11, r1
    21da:	d1 2c       	mov	r13, r1
    21dc:	cc 24       	eor	r12, r12
    21de:	c3 94       	inc	r12
    21e0:	7c 01       	movw	r14, r24
    21e2:	83 e1       	ldi	r24, 0x13	; 19
    21e4:	e8 0e       	add	r14, r24
    21e6:	f1 1c       	adc	r15, r1
    21e8:	0f b6       	in	r0, 0x3f	; 63
    21ea:	f8 94       	cli
    21ec:	0f 92       	push	r0
    21ee:	d8 01       	movw	r26, r16
    21f0:	5e 96       	adiw	r26, 0x1e	; 30
    21f2:	8c 91       	ld	r24, X
    21f4:	5e 97       	sbiw	r26, 0x1e	; 30
    21f6:	88 23       	and	r24, r24
    21f8:	d9 f0       	breq	.+54     	; 0x2230 <__stack+0x31>
    21fa:	81 50       	subi	r24, 0x01	; 1
    21fc:	5e 96       	adiw	r26, 0x1e	; 30
    21fe:	8c 93       	st	X, r24
    2200:	5e 97       	sbiw	r26, 0x1e	; 30
    2202:	8d 91       	ld	r24, X+
    2204:	9c 91       	ld	r25, X
    2206:	89 2b       	or	r24, r25
    2208:	29 f4       	brne	.+10     	; 0x2214 <__stack+0x15>
    220a:	0e 94 20 1b 	call	0x3640	; 0x3640 <pvTaskIncrementMutexHeldCount>
    220e:	f8 01       	movw	r30, r16
    2210:	95 83       	std	Z+5, r25	; 0x05
    2212:	84 83       	std	Z+4, r24	; 0x04
    2214:	d8 01       	movw	r26, r16
    2216:	18 96       	adiw	r26, 0x08	; 8
    2218:	8c 91       	ld	r24, X
    221a:	88 23       	and	r24, r24
    221c:	29 f0       	breq	.+10     	; 0x2228 <__stack+0x29>
    221e:	c8 01       	movw	r24, r16
    2220:	08 96       	adiw	r24, 0x08	; 8
    2222:	e3 d7       	rcall	.+4038   	; 0x31ea <xTaskRemoveFromEventList>
    2224:	81 11       	cpse	r24, r1
    2226:	2c dc       	rcall	.-1960   	; 0x1a80 <vPortYield>
    2228:	0f 90       	pop	r0
    222a:	0f be       	out	0x3f, r0	; 63
    222c:	81 e0       	ldi	r24, 0x01	; 1
    222e:	7a c0       	rjmp	.+244    	; 0x2324 <__stack+0x125>
    2230:	8e 81       	ldd	r24, Y+6	; 0x06
    2232:	9f 81       	ldd	r25, Y+7	; 0x07
    2234:	a8 85       	ldd	r26, Y+8	; 0x08
    2236:	b9 85       	ldd	r27, Y+9	; 0x09
    2238:	89 2b       	or	r24, r25
    223a:	8a 2b       	or	r24, r26
    223c:	8b 2b       	or	r24, r27
    223e:	21 f4       	brne	.+8      	; 0x2248 <__stack+0x49>
    2240:	0f 90       	pop	r0
    2242:	0f be       	out	0x3f, r0	; 63
    2244:	80 e0       	ldi	r24, 0x00	; 0
    2246:	6e c0       	rjmp	.+220    	; 0x2324 <__stack+0x125>
    2248:	d1 10       	cpse	r13, r1
    224a:	05 c0       	rjmp	.+10     	; 0x2256 <__stack+0x57>
    224c:	ce 01       	movw	r24, r28
    224e:	01 96       	adiw	r24, 0x01	; 1
    2250:	0e 94 81 19 	call	0x3302	; 0x3302 <vTaskInternalSetTimeOutState>
    2254:	dc 2c       	mov	r13, r12
    2256:	0f 90       	pop	r0
    2258:	0f be       	out	0x3f, r0	; 63
    225a:	6f d5       	rcall	.+2782   	; 0x2d3a <vTaskSuspendAll>
    225c:	0f b6       	in	r0, 0x3f	; 63
    225e:	f8 94       	cli
    2260:	0f 92       	push	r0
    2262:	f8 01       	movw	r30, r16
    2264:	81 a1       	ldd	r24, Z+33	; 0x21
    2266:	8f 3f       	cpi	r24, 0xFF	; 255
    2268:	09 f4       	brne	.+2      	; 0x226c <__stack+0x6d>
    226a:	11 a2       	std	Z+33, r1	; 0x21
    226c:	d8 01       	movw	r26, r16
    226e:	92 96       	adiw	r26, 0x22	; 34
    2270:	8c 91       	ld	r24, X
    2272:	92 97       	sbiw	r26, 0x22	; 34
    2274:	8f 3f       	cpi	r24, 0xFF	; 255
    2276:	11 f4       	brne	.+4      	; 0x227c <__stack+0x7d>
    2278:	92 96       	adiw	r26, 0x22	; 34
    227a:	1c 92       	st	X, r1
    227c:	0f 90       	pop	r0
    227e:	0f be       	out	0x3f, r0	; 63
    2280:	be 01       	movw	r22, r28
    2282:	6a 5f       	subi	r22, 0xFA	; 250
    2284:	7f 4f       	sbci	r23, 0xFF	; 255
    2286:	ce 01       	movw	r24, r28
    2288:	01 96       	adiw	r24, 0x01	; 1
    228a:	0e 94 92 19 	call	0x3324	; 0x3324 <xTaskCheckForTimeOut>
    228e:	81 11       	cpse	r24, r1
    2290:	24 c0       	rjmp	.+72     	; 0x22da <__stack+0xdb>
    2292:	c8 01       	movw	r24, r16
    2294:	bd dc       	rcall	.-1670   	; 0x1c10 <prvIsQueueEmpty>
    2296:	88 23       	and	r24, r24
    2298:	e1 f0       	breq	.+56     	; 0x22d2 <__stack+0xd3>
    229a:	f8 01       	movw	r30, r16
    229c:	80 81       	ld	r24, Z
    229e:	91 81       	ldd	r25, Z+1	; 0x01
    22a0:	89 2b       	or	r24, r25
    22a2:	51 f4       	brne	.+20     	; 0x22b8 <__stack+0xb9>
    22a4:	0f b6       	in	r0, 0x3f	; 63
    22a6:	f8 94       	cli
    22a8:	0f 92       	push	r0
    22aa:	84 81       	ldd	r24, Z+4	; 0x04
    22ac:	95 81       	ldd	r25, Z+5	; 0x05
    22ae:	0e 94 fe 19 	call	0x33fc	; 0x33fc <xTaskPriorityInherit>
    22b2:	b8 2e       	mov	r11, r24
    22b4:	0f 90       	pop	r0
    22b6:	0f be       	out	0x3f, r0	; 63
    22b8:	4e 81       	ldd	r20, Y+6	; 0x06
    22ba:	5f 81       	ldd	r21, Y+7	; 0x07
    22bc:	68 85       	ldd	r22, Y+8	; 0x08
    22be:	79 85       	ldd	r23, Y+9	; 0x09
    22c0:	c7 01       	movw	r24, r14
    22c2:	38 d7       	rcall	.+3696   	; 0x3134 <vTaskPlaceOnEventList>
    22c4:	c8 01       	movw	r24, r16
    22c6:	28 dd       	rcall	.-1456   	; 0x1d18 <prvUnlockQueue>
    22c8:	21 d6       	rcall	.+3138   	; 0x2f0c <xTaskResumeAll>
    22ca:	81 11       	cpse	r24, r1
    22cc:	8d cf       	rjmp	.-230    	; 0x21e8 <xQueueSemaphoreTake+0x3c>
    22ce:	d8 db       	rcall	.-2128   	; 0x1a80 <vPortYield>
    22d0:	8b cf       	rjmp	.-234    	; 0x21e8 <xQueueSemaphoreTake+0x3c>
    22d2:	c8 01       	movw	r24, r16
    22d4:	21 dd       	rcall	.-1470   	; 0x1d18 <prvUnlockQueue>
    22d6:	1a d6       	rcall	.+3124   	; 0x2f0c <xTaskResumeAll>
    22d8:	87 cf       	rjmp	.-242    	; 0x21e8 <xQueueSemaphoreTake+0x3c>
    22da:	c8 01       	movw	r24, r16
    22dc:	1d dd       	rcall	.-1478   	; 0x1d18 <prvUnlockQueue>
    22de:	16 d6       	rcall	.+3116   	; 0x2f0c <xTaskResumeAll>
    22e0:	c8 01       	movw	r24, r16
    22e2:	96 dc       	rcall	.-1748   	; 0x1c10 <prvIsQueueEmpty>
    22e4:	88 23       	and	r24, r24
    22e6:	09 f4       	brne	.+2      	; 0x22ea <__stack+0xeb>
    22e8:	7f cf       	rjmp	.-258    	; 0x21e8 <xQueueSemaphoreTake+0x3c>
    22ea:	bb 20       	and	r11, r11
    22ec:	d1 f0       	breq	.+52     	; 0x2322 <__stack+0x123>
    22ee:	0f b6       	in	r0, 0x3f	; 63
    22f0:	f8 94       	cli
    22f2:	0f 92       	push	r0
    22f4:	f8 01       	movw	r30, r16
    22f6:	83 89       	ldd	r24, Z+19	; 0x13
    22f8:	88 23       	and	r24, r24
    22fa:	39 f0       	breq	.+14     	; 0x230a <__stack+0x10b>
    22fc:	02 8c       	ldd	r0, Z+26	; 0x1a
    22fe:	f3 8d       	ldd	r31, Z+27	; 0x1b
    2300:	e0 2d       	mov	r30, r0
    2302:	80 81       	ld	r24, Z
    2304:	64 e0       	ldi	r22, 0x04	; 4
    2306:	68 1b       	sub	r22, r24
    2308:	01 c0       	rjmp	.+2      	; 0x230c <__stack+0x10d>
    230a:	60 e0       	ldi	r22, 0x00	; 0
    230c:	d8 01       	movw	r26, r16
    230e:	14 96       	adiw	r26, 0x04	; 4
    2310:	8d 91       	ld	r24, X+
    2312:	9c 91       	ld	r25, X
    2314:	15 97       	sbiw	r26, 0x05	; 5
    2316:	0e 94 ac 1a 	call	0x3558	; 0x3558 <vTaskPriorityDisinheritAfterTimeout>
    231a:	0f 90       	pop	r0
    231c:	0f be       	out	0x3f, r0	; 63
    231e:	80 e0       	ldi	r24, 0x00	; 0
    2320:	01 c0       	rjmp	.+2      	; 0x2324 <__stack+0x125>
    2322:	80 e0       	ldi	r24, 0x00	; 0
    2324:	29 96       	adiw	r28, 0x09	; 9
    2326:	0f b6       	in	r0, 0x3f	; 63
    2328:	f8 94       	cli
    232a:	de bf       	out	0x3e, r29	; 62
    232c:	0f be       	out	0x3f, r0	; 63
    232e:	cd bf       	out	0x3d, r28	; 61
    2330:	df 91       	pop	r29
    2332:	cf 91       	pop	r28
    2334:	1f 91       	pop	r17
    2336:	0f 91       	pop	r16
    2338:	ff 90       	pop	r15
    233a:	ef 90       	pop	r14
    233c:	df 90       	pop	r13
    233e:	cf 90       	pop	r12
    2340:	bf 90       	pop	r11
    2342:	08 95       	ret

00002344 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
    {
    2344:	cf 93       	push	r28
    2346:	df 93       	push	r29
    2348:	ec 01       	movw	r28, r24
        will not actually cause the task to block, just place it on a blocked
        list.  It will not block until the scheduler is unlocked - at which
        time a yield will be performed.  If an item is added to the queue while
        the queue is locked, and the calling task blocks on the queue, then the
        calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    234a:	0f b6       	in	r0, 0x3f	; 63
    234c:	f8 94       	cli
    234e:	0f 92       	push	r0
    2350:	89 a1       	ldd	r24, Y+33	; 0x21
    2352:	8f 3f       	cpi	r24, 0xFF	; 255
    2354:	09 f4       	brne	.+2      	; 0x2358 <vQueueWaitForMessageRestricted+0x14>
    2356:	19 a2       	std	Y+33, r1	; 0x21
    2358:	8a a1       	ldd	r24, Y+34	; 0x22
    235a:	8f 3f       	cpi	r24, 0xFF	; 255
    235c:	09 f4       	brne	.+2      	; 0x2360 <vQueueWaitForMessageRestricted+0x1c>
    235e:	1a a2       	std	Y+34, r1	; 0x22
    2360:	0f 90       	pop	r0
    2362:	0f be       	out	0x3f, r0	; 63
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    2364:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2366:	81 11       	cpse	r24, r1
    2368:	03 c0       	rjmp	.+6      	; 0x2370 <vQueueWaitForMessageRestricted+0x2c>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    236a:	ce 01       	movw	r24, r28
    236c:	43 96       	adiw	r24, 0x13	; 19
    236e:	1d d7       	rcall	.+3642   	; 0x31aa <vTaskPlaceOnEventListRestricted>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
        prvUnlockQueue( pxQueue );
    2370:	ce 01       	movw	r24, r28
    2372:	d2 dc       	rcall	.-1628   	; 0x1d18 <prvUnlockQueue>
    }
    2374:	df 91       	pop	r29
    2376:	cf 91       	pop	r28
    2378:	08 95       	ret

0000237a <prvBytesInBuffer>:

    configASSERT( pxStreamBuffer );

    xReturn = prvBytesInBuffer( pxStreamBuffer );
    return xReturn;
}
    237a:	fc 01       	movw	r30, r24
    237c:	44 81       	ldd	r20, Z+4	; 0x04
    237e:	55 81       	ldd	r21, Z+5	; 0x05
    2380:	22 81       	ldd	r18, Z+2	; 0x02
    2382:	33 81       	ldd	r19, Z+3	; 0x03
    2384:	24 0f       	add	r18, r20
    2386:	35 1f       	adc	r19, r21
    2388:	80 81       	ld	r24, Z
    238a:	91 81       	ldd	r25, Z+1	; 0x01
    238c:	b9 01       	movw	r22, r18
    238e:	68 1b       	sub	r22, r24
    2390:	79 0b       	sbc	r23, r25
    2392:	cb 01       	movw	r24, r22
    2394:	64 17       	cp	r22, r20
    2396:	75 07       	cpc	r23, r21
    2398:	10 f0       	brcs	.+4      	; 0x239e <prvBytesInBuffer+0x24>
    239a:	84 1b       	sub	r24, r20
    239c:	95 0b       	sbc	r25, r21
    239e:	08 95       	ret

000023a0 <prvWriteBytesToBuffer>:
    23a0:	af 92       	push	r10
    23a2:	bf 92       	push	r11
    23a4:	cf 92       	push	r12
    23a6:	df 92       	push	r13
    23a8:	ef 92       	push	r14
    23aa:	ff 92       	push	r15
    23ac:	0f 93       	push	r16
    23ae:	1f 93       	push	r17
    23b0:	cf 93       	push	r28
    23b2:	df 93       	push	r29
    23b4:	6c 01       	movw	r12, r24
    23b6:	5b 01       	movw	r10, r22
    23b8:	7a 01       	movw	r14, r20
    23ba:	fc 01       	movw	r30, r24
    23bc:	c2 81       	ldd	r28, Z+2	; 0x02
    23be:	d3 81       	ldd	r29, Z+3	; 0x03
    23c0:	04 81       	ldd	r16, Z+4	; 0x04
    23c2:	15 81       	ldd	r17, Z+5	; 0x05
    23c4:	0c 1b       	sub	r16, r28
    23c6:	1d 0b       	sbc	r17, r29
    23c8:	40 17       	cp	r20, r16
    23ca:	51 07       	cpc	r21, r17
    23cc:	08 f4       	brcc	.+2      	; 0x23d0 <prvWriteBytesToBuffer+0x30>
    23ce:	8a 01       	movw	r16, r20
    23d0:	f6 01       	movw	r30, r12
    23d2:	84 85       	ldd	r24, Z+12	; 0x0c
    23d4:	95 85       	ldd	r25, Z+13	; 0x0d
    23d6:	a8 01       	movw	r20, r16
    23d8:	b5 01       	movw	r22, r10
    23da:	8c 0f       	add	r24, r28
    23dc:	9d 1f       	adc	r25, r29
    23de:	0e 94 fa 30 	call	0x61f4	; 0x61f4 <memcpy>
    23e2:	0e 15       	cp	r16, r14
    23e4:	1f 05       	cpc	r17, r15
    23e6:	58 f4       	brcc	.+22     	; 0x23fe <prvWriteBytesToBuffer+0x5e>
    23e8:	a7 01       	movw	r20, r14
    23ea:	40 1b       	sub	r20, r16
    23ec:	51 0b       	sbc	r21, r17
    23ee:	b5 01       	movw	r22, r10
    23f0:	60 0f       	add	r22, r16
    23f2:	71 1f       	adc	r23, r17
    23f4:	f6 01       	movw	r30, r12
    23f6:	84 85       	ldd	r24, Z+12	; 0x0c
    23f8:	95 85       	ldd	r25, Z+13	; 0x0d
    23fa:	0e 94 fa 30 	call	0x61f4	; 0x61f4 <memcpy>
    23fe:	ce 01       	movw	r24, r28
    2400:	8e 0d       	add	r24, r14
    2402:	9f 1d       	adc	r25, r15
    2404:	f6 01       	movw	r30, r12
    2406:	24 81       	ldd	r18, Z+4	; 0x04
    2408:	35 81       	ldd	r19, Z+5	; 0x05
    240a:	82 17       	cp	r24, r18
    240c:	93 07       	cpc	r25, r19
    240e:	10 f0       	brcs	.+4      	; 0x2414 <prvWriteBytesToBuffer+0x74>
    2410:	82 1b       	sub	r24, r18
    2412:	93 0b       	sbc	r25, r19
    2414:	f6 01       	movw	r30, r12
    2416:	93 83       	std	Z+3, r25	; 0x03
    2418:	82 83       	std	Z+2, r24	; 0x02
    241a:	c7 01       	movw	r24, r14
    241c:	df 91       	pop	r29
    241e:	cf 91       	pop	r28
    2420:	1f 91       	pop	r17
    2422:	0f 91       	pop	r16
    2424:	ff 90       	pop	r15
    2426:	ef 90       	pop	r14
    2428:	df 90       	pop	r13
    242a:	cf 90       	pop	r12
    242c:	bf 90       	pop	r11
    242e:	af 90       	pop	r10
    2430:	08 95       	ret

00002432 <prvWriteMessageToBuffer>:
    2432:	cf 92       	push	r12
    2434:	df 92       	push	r13
    2436:	ef 92       	push	r14
    2438:	ff 92       	push	r15
    243a:	0f 93       	push	r16
    243c:	1f 93       	push	r17
    243e:	cf 93       	push	r28
    2440:	df 93       	push	r29
    2442:	1f 92       	push	r1
    2444:	1f 92       	push	r1
    2446:	cd b7       	in	r28, 0x3d	; 61
    2448:	de b7       	in	r29, 0x3e	; 62
    244a:	5a 83       	std	Y+2, r21	; 0x02
    244c:	49 83       	std	Y+1, r20	; 0x01
    244e:	21 15       	cp	r18, r1
    2450:	31 05       	cpc	r19, r1
    2452:	c9 f0       	breq	.+50     	; 0x2486 <prvWriteMessageToBuffer+0x54>
    2454:	6b 01       	movw	r12, r22
    2456:	7c 01       	movw	r14, r24
    2458:	fc 01       	movw	r30, r24
    245a:	86 85       	ldd	r24, Z+14	; 0x0e
    245c:	80 fd       	sbrc	r24, 0
    245e:	08 c0       	rjmp	.+16     	; 0x2470 <prvWriteMessageToBuffer+0x3e>
    2460:	ca 01       	movw	r24, r20
    2462:	24 17       	cp	r18, r20
    2464:	35 07       	cpc	r19, r21
    2466:	08 f4       	brcc	.+2      	; 0x246a <prvWriteMessageToBuffer+0x38>
    2468:	c9 01       	movw	r24, r18
    246a:	9a 83       	std	Y+2, r25	; 0x02
    246c:	89 83       	std	Y+1, r24	; 0x01
    246e:	11 c0       	rjmp	.+34     	; 0x2492 <prvWriteMessageToBuffer+0x60>
    2470:	20 17       	cp	r18, r16
    2472:	31 07       	cpc	r19, r17
    2474:	58 f0       	brcs	.+22     	; 0x248c <prvWriteMessageToBuffer+0x5a>
    2476:	42 e0       	ldi	r20, 0x02	; 2
    2478:	50 e0       	ldi	r21, 0x00	; 0
    247a:	be 01       	movw	r22, r28
    247c:	6f 5f       	subi	r22, 0xFF	; 255
    247e:	7f 4f       	sbci	r23, 0xFF	; 255
    2480:	c7 01       	movw	r24, r14
    2482:	8e df       	rcall	.-228    	; 0x23a0 <prvWriteBytesToBuffer>
    2484:	06 c0       	rjmp	.+12     	; 0x2492 <prvWriteMessageToBuffer+0x60>
    2486:	80 e0       	ldi	r24, 0x00	; 0
    2488:	90 e0       	ldi	r25, 0x00	; 0
    248a:	08 c0       	rjmp	.+16     	; 0x249c <prvWriteMessageToBuffer+0x6a>
    248c:	80 e0       	ldi	r24, 0x00	; 0
    248e:	90 e0       	ldi	r25, 0x00	; 0
    2490:	05 c0       	rjmp	.+10     	; 0x249c <prvWriteMessageToBuffer+0x6a>
    2492:	49 81       	ldd	r20, Y+1	; 0x01
    2494:	5a 81       	ldd	r21, Y+2	; 0x02
    2496:	b6 01       	movw	r22, r12
    2498:	c7 01       	movw	r24, r14
    249a:	82 df       	rcall	.-252    	; 0x23a0 <prvWriteBytesToBuffer>
    249c:	0f 90       	pop	r0
    249e:	0f 90       	pop	r0
    24a0:	df 91       	pop	r29
    24a2:	cf 91       	pop	r28
    24a4:	1f 91       	pop	r17
    24a6:	0f 91       	pop	r16
    24a8:	ff 90       	pop	r15
    24aa:	ef 90       	pop	r14
    24ac:	df 90       	pop	r13
    24ae:	cf 90       	pop	r12
    24b0:	08 95       	ret

000024b2 <prvReadBytesFromBuffer>:
    24b2:	af 92       	push	r10
    24b4:	bf 92       	push	r11
    24b6:	cf 92       	push	r12
    24b8:	df 92       	push	r13
    24ba:	ef 92       	push	r14
    24bc:	ff 92       	push	r15
    24be:	0f 93       	push	r16
    24c0:	1f 93       	push	r17
    24c2:	cf 93       	push	r28
    24c4:	df 93       	push	r29
    24c6:	7c 01       	movw	r14, r24
    24c8:	5b 01       	movw	r10, r22
    24ca:	e9 01       	movw	r28, r18
    24cc:	42 17       	cp	r20, r18
    24ce:	53 07       	cpc	r21, r19
    24d0:	08 f4       	brcc	.+2      	; 0x24d4 <prvReadBytesFromBuffer+0x22>
    24d2:	ea 01       	movw	r28, r20
    24d4:	20 97       	sbiw	r28, 0x00	; 0
    24d6:	79 f1       	breq	.+94     	; 0x2536 <prvReadBytesFromBuffer+0x84>
    24d8:	f7 01       	movw	r30, r14
    24da:	00 81       	ld	r16, Z
    24dc:	11 81       	ldd	r17, Z+1	; 0x01
    24de:	c4 80       	ldd	r12, Z+4	; 0x04
    24e0:	d5 80       	ldd	r13, Z+5	; 0x05
    24e2:	c0 1a       	sub	r12, r16
    24e4:	d1 0a       	sbc	r13, r17
    24e6:	cc 15       	cp	r28, r12
    24e8:	dd 05       	cpc	r29, r13
    24ea:	08 f4       	brcc	.+2      	; 0x24ee <prvReadBytesFromBuffer+0x3c>
    24ec:	6e 01       	movw	r12, r28
    24ee:	f7 01       	movw	r30, r14
    24f0:	64 85       	ldd	r22, Z+12	; 0x0c
    24f2:	75 85       	ldd	r23, Z+13	; 0x0d
    24f4:	60 0f       	add	r22, r16
    24f6:	71 1f       	adc	r23, r17
    24f8:	a6 01       	movw	r20, r12
    24fa:	c5 01       	movw	r24, r10
    24fc:	0e 94 fa 30 	call	0x61f4	; 0x61f4 <memcpy>
    2500:	cc 16       	cp	r12, r28
    2502:	dd 06       	cpc	r13, r29
    2504:	58 f4       	brcc	.+22     	; 0x251c <prvReadBytesFromBuffer+0x6a>
    2506:	ae 01       	movw	r20, r28
    2508:	4c 19       	sub	r20, r12
    250a:	5d 09       	sbc	r21, r13
    250c:	f7 01       	movw	r30, r14
    250e:	64 85       	ldd	r22, Z+12	; 0x0c
    2510:	75 85       	ldd	r23, Z+13	; 0x0d
    2512:	c5 01       	movw	r24, r10
    2514:	8c 0d       	add	r24, r12
    2516:	9d 1d       	adc	r25, r13
    2518:	0e 94 fa 30 	call	0x61f4	; 0x61f4 <memcpy>
    251c:	0c 0f       	add	r16, r28
    251e:	1d 1f       	adc	r17, r29
    2520:	f7 01       	movw	r30, r14
    2522:	84 81       	ldd	r24, Z+4	; 0x04
    2524:	95 81       	ldd	r25, Z+5	; 0x05
    2526:	08 17       	cp	r16, r24
    2528:	19 07       	cpc	r17, r25
    252a:	10 f0       	brcs	.+4      	; 0x2530 <prvReadBytesFromBuffer+0x7e>
    252c:	08 1b       	sub	r16, r24
    252e:	19 0b       	sbc	r17, r25
    2530:	f7 01       	movw	r30, r14
    2532:	11 83       	std	Z+1, r17	; 0x01
    2534:	00 83       	st	Z, r16
    2536:	ce 01       	movw	r24, r28
    2538:	df 91       	pop	r29
    253a:	cf 91       	pop	r28
    253c:	1f 91       	pop	r17
    253e:	0f 91       	pop	r16
    2540:	ff 90       	pop	r15
    2542:	ef 90       	pop	r14
    2544:	df 90       	pop	r13
    2546:	cf 90       	pop	r12
    2548:	bf 90       	pop	r11
    254a:	af 90       	pop	r10
    254c:	08 95       	ret

0000254e <xStreamBufferGenericCreate>:
    254e:	ef 92       	push	r14
    2550:	ff 92       	push	r15
    2552:	1f 93       	push	r17
    2554:	cf 93       	push	r28
    2556:	df 93       	push	r29
    2558:	eb 01       	movw	r28, r22
    255a:	11 e0       	ldi	r17, 0x01	; 1
    255c:	41 30       	cpi	r20, 0x01	; 1
    255e:	09 f0       	breq	.+2      	; 0x2562 <xStreamBufferGenericCreate+0x14>
    2560:	10 e0       	ldi	r17, 0x00	; 0
    2562:	20 97       	sbiw	r28, 0x00	; 0
    2564:	11 f4       	brne	.+4      	; 0x256a <xStreamBufferGenericCreate+0x1c>
    2566:	c1 e0       	ldi	r28, 0x01	; 1
    2568:	d0 e0       	ldi	r29, 0x00	; 0
    256a:	7c 01       	movw	r14, r24
    256c:	2f ef       	ldi	r18, 0xFF	; 255
    256e:	e2 1a       	sub	r14, r18
    2570:	f2 0a       	sbc	r15, r18
    2572:	41 96       	adiw	r24, 0x11	; 17
    2574:	53 d8       	rcall	.-3930   	; 0x161c <pvPortMalloc>
    2576:	00 97       	sbiw	r24, 0x00	; 0
    2578:	81 f0       	breq	.+32     	; 0x259a <xStreamBufferGenericCreate+0x4c>
    257a:	20 e1       	ldi	r18, 0x10	; 16
    257c:	fc 01       	movw	r30, r24
    257e:	11 92       	st	Z+, r1
    2580:	2a 95       	dec	r18
    2582:	e9 f7       	brne	.-6      	; 0x257e <xStreamBufferGenericCreate+0x30>
    2584:	9c 01       	movw	r18, r24
    2586:	20 5f       	subi	r18, 0xF0	; 240
    2588:	3f 4f       	sbci	r19, 0xFF	; 255
    258a:	fc 01       	movw	r30, r24
    258c:	35 87       	std	Z+13, r19	; 0x0d
    258e:	24 87       	std	Z+12, r18	; 0x0c
    2590:	f5 82       	std	Z+5, r15	; 0x05
    2592:	e4 82       	std	Z+4, r14	; 0x04
    2594:	d7 83       	std	Z+7, r29	; 0x07
    2596:	c6 83       	std	Z+6, r28	; 0x06
    2598:	16 87       	std	Z+14, r17	; 0x0e
    259a:	df 91       	pop	r29
    259c:	cf 91       	pop	r28
    259e:	1f 91       	pop	r17
    25a0:	ff 90       	pop	r15
    25a2:	ef 90       	pop	r14
    25a4:	08 95       	ret

000025a6 <xStreamBufferReset>:
    25a6:	cf 93       	push	r28
    25a8:	df 93       	push	r29
    25aa:	fc 01       	movw	r30, r24
    25ac:	27 85       	ldd	r18, Z+15	; 0x0f
    25ae:	0f b6       	in	r0, 0x3f	; 63
    25b0:	f8 94       	cli
    25b2:	0f 92       	push	r0
    25b4:	80 85       	ldd	r24, Z+8	; 0x08
    25b6:	91 85       	ldd	r25, Z+9	; 0x09
    25b8:	89 2b       	or	r24, r25
    25ba:	d1 f4       	brne	.+52     	; 0x25f0 <xStreamBufferReset+0x4a>
    25bc:	82 85       	ldd	r24, Z+10	; 0x0a
    25be:	93 85       	ldd	r25, Z+11	; 0x0b
    25c0:	89 2b       	or	r24, r25
    25c2:	c1 f4       	brne	.+48     	; 0x25f4 <xStreamBufferReset+0x4e>
    25c4:	86 85       	ldd	r24, Z+14	; 0x0e
    25c6:	46 81       	ldd	r20, Z+6	; 0x06
    25c8:	57 81       	ldd	r21, Z+7	; 0x07
    25ca:	64 81       	ldd	r22, Z+4	; 0x04
    25cc:	75 81       	ldd	r23, Z+5	; 0x05
    25ce:	a4 85       	ldd	r26, Z+12	; 0x0c
    25d0:	b5 85       	ldd	r27, Z+13	; 0x0d
    25d2:	90 e1       	ldi	r25, 0x10	; 16
    25d4:	ef 01       	movw	r28, r30
    25d6:	19 92       	st	Y+, r1
    25d8:	9a 95       	dec	r25
    25da:	e9 f7       	brne	.-6      	; 0x25d6 <xStreamBufferReset+0x30>
    25dc:	b5 87       	std	Z+13, r27	; 0x0d
    25de:	a4 87       	std	Z+12, r26	; 0x0c
    25e0:	75 83       	std	Z+5, r23	; 0x05
    25e2:	64 83       	std	Z+4, r22	; 0x04
    25e4:	57 83       	std	Z+7, r21	; 0x07
    25e6:	46 83       	std	Z+6, r20	; 0x06
    25e8:	86 87       	std	Z+14, r24	; 0x0e
    25ea:	27 87       	std	Z+15, r18	; 0x0f
    25ec:	81 e0       	ldi	r24, 0x01	; 1
    25ee:	03 c0       	rjmp	.+6      	; 0x25f6 <xStreamBufferReset+0x50>
    25f0:	80 e0       	ldi	r24, 0x00	; 0
    25f2:	01 c0       	rjmp	.+2      	; 0x25f6 <xStreamBufferReset+0x50>
    25f4:	80 e0       	ldi	r24, 0x00	; 0
    25f6:	0f 90       	pop	r0
    25f8:	0f be       	out	0x3f, r0	; 63
    25fa:	df 91       	pop	r29
    25fc:	cf 91       	pop	r28
    25fe:	08 95       	ret

00002600 <xStreamBufferSpacesAvailable>:
    2600:	fc 01       	movw	r30, r24
    2602:	24 81       	ldd	r18, Z+4	; 0x04
    2604:	35 81       	ldd	r19, Z+5	; 0x05
    2606:	80 81       	ld	r24, Z
    2608:	91 81       	ldd	r25, Z+1	; 0x01
    260a:	42 81       	ldd	r20, Z+2	; 0x02
    260c:	53 81       	ldd	r21, Z+3	; 0x03
    260e:	82 0f       	add	r24, r18
    2610:	93 1f       	adc	r25, r19
    2612:	01 97       	sbiw	r24, 0x01	; 1
    2614:	84 1b       	sub	r24, r20
    2616:	95 0b       	sbc	r25, r21
    2618:	82 17       	cp	r24, r18
    261a:	93 07       	cpc	r25, r19
    261c:	10 f0       	brcs	.+4      	; 0x2622 <xStreamBufferSpacesAvailable+0x22>
    261e:	82 1b       	sub	r24, r18
    2620:	93 0b       	sbc	r25, r19
    2622:	08 95       	ret

00002624 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void *pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    2624:	2f 92       	push	r2
    2626:	3f 92       	push	r3
    2628:	4f 92       	push	r4
    262a:	5f 92       	push	r5
    262c:	6f 92       	push	r6
    262e:	7f 92       	push	r7
    2630:	8f 92       	push	r8
    2632:	9f 92       	push	r9
    2634:	af 92       	push	r10
    2636:	bf 92       	push	r11
    2638:	cf 92       	push	r12
    263a:	df 92       	push	r13
    263c:	ef 92       	push	r14
    263e:	ff 92       	push	r15
    2640:	0f 93       	push	r16
    2642:	1f 93       	push	r17
    2644:	cf 93       	push	r28
    2646:	df 93       	push	r29
    2648:	cd b7       	in	r28, 0x3d	; 61
    264a:	de b7       	in	r29, 0x3e	; 62
    264c:	29 97       	sbiw	r28, 0x09	; 9
    264e:	0f b6       	in	r0, 0x3f	; 63
    2650:	f8 94       	cli
    2652:	de bf       	out	0x3e, r29	; 62
    2654:	0f be       	out	0x3f, r0	; 63
    2656:	cd bf       	out	0x3d, r28	; 61
    2658:	5c 01       	movw	r10, r24
    265a:	1b 01       	movw	r2, r22
    265c:	2a 01       	movw	r4, r20
    265e:	0e 83       	std	Y+6, r16	; 0x06
    2660:	1f 83       	std	Y+7, r17	; 0x07
    2662:	28 87       	std	Y+8, r18	; 0x08
    2664:	39 87       	std	Y+9, r19	; 0x09

    /* This send function is used to write to both message buffers and stream
    buffers.  If this is a message buffer then the space needed must be
    increased by the amount of bytes needed to store the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    2666:	fc 01       	movw	r30, r24
    2668:	86 85       	ldd	r24, Z+14	; 0x0e
    266a:	80 ff       	sbrs	r24, 0
    266c:	05 c0       	rjmp	.+10     	; 0x2678 <xStreamBufferSend+0x54>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    266e:	3a 01       	movw	r6, r20
    2670:	f2 e0       	ldi	r31, 0x02	; 2
    2672:	6f 0e       	add	r6, r31
    2674:	71 1c       	adc	r7, r1
    2676:	01 c0       	rjmp	.+2      	; 0x267a <xStreamBufferSend+0x56>
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReturn, xSpace = 0;
size_t xRequiredSpace = xDataLengthBytes;
    2678:	3a 01       	movw	r6, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    267a:	8e 81       	ldd	r24, Y+6	; 0x06
    267c:	9f 81       	ldd	r25, Y+7	; 0x07
    267e:	a8 85       	ldd	r26, Y+8	; 0x08
    2680:	b9 85       	ldd	r27, Y+9	; 0x09
    2682:	89 2b       	or	r24, r25
    2684:	8a 2b       	or	r24, r26
    2686:	8b 2b       	or	r24, r27
    2688:	09 f4       	brne	.+2      	; 0x268c <xStreamBufferSend+0x68>
    268a:	34 c0       	rjmp	.+104    	; 0x26f4 <xStreamBufferSend+0xd0>
    {
        vTaskSetTimeOutState( &xTimeOut );
    268c:	ce 01       	movw	r24, r28
    268e:	01 96       	adiw	r24, 0x01	; 1
    2690:	22 d6       	rcall	.+3140   	; 0x32d6 <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
            buffer. */
            taskENTER_CRITICAL();
    2692:	0f b6       	in	r0, 0x3f	; 63
    2694:	f8 94       	cli
    2696:	0f 92       	push	r0
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    2698:	c5 01       	movw	r24, r10
    269a:	b2 df       	rcall	.-156    	; 0x2600 <xStreamBufferSpacesAvailable>
    269c:	4c 01       	movw	r8, r24

                if( xSpace < xRequiredSpace )
    269e:	86 15       	cp	r24, r6
    26a0:	97 05       	cpc	r25, r7
    26a2:	18 f5       	brcc	.+70     	; 0x26ea <xStreamBufferSend+0xc6>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClear( NULL );
    26a4:	80 e0       	ldi	r24, 0x00	; 0
    26a6:	90 e0       	ldi	r25, 0x00	; 0
    26a8:	0e 94 bd 1c 	call	0x397a	; 0x397a <xTaskNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    26ac:	94 d6       	rcall	.+3368   	; 0x33d6 <xTaskGetCurrentTaskHandle>
    26ae:	f5 01       	movw	r30, r10
    26b0:	93 87       	std	Z+11, r25	; 0x0b
    26b2:	82 87       	std	Z+10, r24	; 0x0a
                {
                    taskEXIT_CRITICAL();
                    break;
                }
            }
            taskEXIT_CRITICAL();
    26b4:	0f 90       	pop	r0
    26b6:	0f be       	out	0x3f, r0	; 63

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    26b8:	ce 80       	ldd	r12, Y+6	; 0x06
    26ba:	df 80       	ldd	r13, Y+7	; 0x07
    26bc:	e8 84       	ldd	r14, Y+8	; 0x08
    26be:	f9 84       	ldd	r15, Y+9	; 0x09
    26c0:	00 e0       	ldi	r16, 0x00	; 0
    26c2:	10 e0       	ldi	r17, 0x00	; 0
    26c4:	20 e0       	ldi	r18, 0x00	; 0
    26c6:	30 e0       	ldi	r19, 0x00	; 0
    26c8:	a9 01       	movw	r20, r18
    26ca:	60 e0       	ldi	r22, 0x00	; 0
    26cc:	70 e0       	ldi	r23, 0x00	; 0
    26ce:	cb 01       	movw	r24, r22
    26d0:	c9 d7       	rcall	.+3986   	; 0x3664 <xTaskNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
    26d2:	f5 01       	movw	r30, r10
    26d4:	13 86       	std	Z+11, r1	; 0x0b
    26d6:	12 86       	std	Z+10, r1	; 0x0a

        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    26d8:	be 01       	movw	r22, r28
    26da:	6a 5f       	subi	r22, 0xFA	; 250
    26dc:	7f 4f       	sbci	r23, 0xFF	; 255
    26de:	ce 01       	movw	r24, r28
    26e0:	01 96       	adiw	r24, 0x01	; 1
    26e2:	20 d6       	rcall	.+3136   	; 0x3324 <xTaskCheckForTimeOut>
    26e4:	88 23       	and	r24, r24
    26e6:	a9 f2       	breq	.-86     	; 0x2692 <xStreamBufferSend+0x6e>
    26e8:	02 c0       	rjmp	.+4      	; 0x26ee <xStreamBufferSend+0xca>
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
                }
                else
                {
                    taskEXIT_CRITICAL();
    26ea:	0f 90       	pop	r0
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
    26ec:	0f be       	out	0x3f, r0	; 63
    26ee:	81 14       	cp	r8, r1
    26f0:	91 04       	cpc	r9, r1
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    26f2:	19 f4       	brne	.+6      	; 0x26fa <xStreamBufferSend+0xd6>
    26f4:	c5 01       	movw	r24, r10
    26f6:	84 df       	rcall	.-248    	; 0x2600 <xStreamBufferSpacesAvailable>
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    26f8:	4c 01       	movw	r8, r24
    26fa:	83 01       	movw	r16, r6
    26fc:	94 01       	movw	r18, r8
    26fe:	a2 01       	movw	r20, r4
    2700:	b1 01       	movw	r22, r2
    2702:	c5 01       	movw	r24, r10
    2704:	96 de       	rcall	.-724    	; 0x2432 <prvWriteMessageToBuffer>

    if( xReturn > ( size_t ) 0 )
    2706:	7c 01       	movw	r14, r24
    2708:	89 2b       	or	r24, r25
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    270a:	e1 f0       	breq	.+56     	; 0x2744 <xStreamBufferSend+0x120>
    270c:	c5 01       	movw	r24, r10
    270e:	35 de       	rcall	.-918    	; 0x237a <prvBytesInBuffer>
    2710:	f5 01       	movw	r30, r10
    2712:	26 81       	ldd	r18, Z+6	; 0x06
    2714:	37 81       	ldd	r19, Z+7	; 0x07
    2716:	82 17       	cp	r24, r18
    2718:	93 07       	cpc	r25, r19
        {
            sbSEND_COMPLETED( pxStreamBuffer );
    271a:	a0 f0       	brcs	.+40     	; 0x2744 <xStreamBufferSend+0x120>
    271c:	0e d3       	rcall	.+1564   	; 0x2d3a <vTaskSuspendAll>
    271e:	f5 01       	movw	r30, r10
    2720:	80 85       	ldd	r24, Z+8	; 0x08
    2722:	91 85       	ldd	r25, Z+9	; 0x09
    2724:	89 2b       	or	r24, r25
    2726:	69 f0       	breq	.+26     	; 0x2742 <xStreamBufferSend+0x11e>
    2728:	80 85       	ldd	r24, Z+8	; 0x08
    272a:	91 85       	ldd	r25, Z+9	; 0x09
    272c:	00 e0       	ldi	r16, 0x00	; 0
    272e:	10 e0       	ldi	r17, 0x00	; 0
    2730:	20 e0       	ldi	r18, 0x00	; 0
    2732:	40 e0       	ldi	r20, 0x00	; 0
    2734:	50 e0       	ldi	r21, 0x00	; 0
    2736:	ba 01       	movw	r22, r20
    2738:	0e 94 bc 1b 	call	0x3778	; 0x3778 <xTaskGenericNotify>
    273c:	f5 01       	movw	r30, r10
    273e:	11 86       	std	Z+9, r1	; 0x09
    2740:	10 86       	std	Z+8, r1	; 0x08
    2742:	e4 d3       	rcall	.+1992   	; 0x2f0c <xTaskResumeAll>
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    2744:	c7 01       	movw	r24, r14
    2746:	29 96       	adiw	r28, 0x09	; 9
    2748:	0f b6       	in	r0, 0x3f	; 63
    274a:	f8 94       	cli
    274c:	de bf       	out	0x3e, r29	; 62
    274e:	0f be       	out	0x3f, r0	; 63
    2750:	cd bf       	out	0x3d, r28	; 61
    2752:	df 91       	pop	r29
    2754:	cf 91       	pop	r28
    2756:	1f 91       	pop	r17
    2758:	0f 91       	pop	r16
    275a:	ff 90       	pop	r15
    275c:	ef 90       	pop	r14
    275e:	df 90       	pop	r13
    2760:	cf 90       	pop	r12
    2762:	bf 90       	pop	r11
    2764:	af 90       	pop	r10
    2766:	9f 90       	pop	r9
    2768:	8f 90       	pop	r8
    276a:	7f 90       	pop	r7
    276c:	6f 90       	pop	r6
    276e:	5f 90       	pop	r5
    2770:	4f 90       	pop	r4
    2772:	3f 90       	pop	r3
    2774:	2f 90       	pop	r2
    2776:	08 95       	ret

00002778 <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void *pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    2778:	af 92       	push	r10
    277a:	bf 92       	push	r11
    277c:	cf 92       	push	r12
    277e:	df 92       	push	r13
    2780:	ef 92       	push	r14
    2782:	ff 92       	push	r15
    2784:	0f 93       	push	r16
    2786:	1f 93       	push	r17
    2788:	cf 93       	push	r28
    278a:	df 93       	push	r29
    278c:	ec 01       	movw	r28, r24
    278e:	5b 01       	movw	r10, r22
    2790:	6a 01       	movw	r12, r20
    2792:	79 01       	movw	r14, r18

    /* This send function is used to write to both message buffers and stream
    buffers.  If this is a message buffer then the space needed must be
    increased by the amount of bytes needed to store the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    2794:	8e 85       	ldd	r24, Y+14	; 0x0e
    2796:	80 ff       	sbrs	r24, 0
    2798:	04 c0       	rjmp	.+8      	; 0x27a2 <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    279a:	8a 01       	movw	r16, r20
    279c:	0e 5f       	subi	r16, 0xFE	; 254
    279e:	1f 4f       	sbci	r17, 0xFF	; 255
    27a0:	01 c0       	rjmp	.+2      	; 0x27a4 <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReturn, xSpace;
size_t xRequiredSpace = xDataLengthBytes;
    27a2:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    27a4:	ce 01       	movw	r24, r28
    27a6:	2c df       	rcall	.-424    	; 0x2600 <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    27a8:	9c 01       	movw	r18, r24
    27aa:	a6 01       	movw	r20, r12
    27ac:	b5 01       	movw	r22, r10
    27ae:	ce 01       	movw	r24, r28
    27b0:	40 de       	rcall	.-896    	; 0x2432 <prvWriteMessageToBuffer>
    27b2:	6c 01       	movw	r12, r24

    if( xReturn > ( size_t ) 0 )
    27b4:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    27b6:	b9 f0       	breq	.+46     	; 0x27e6 <xStreamBufferSendFromISR+0x6e>
    27b8:	ce 01       	movw	r24, r28
    27ba:	df dd       	rcall	.-1090   	; 0x237a <prvBytesInBuffer>
    27bc:	2e 81       	ldd	r18, Y+6	; 0x06
    27be:	3f 81       	ldd	r19, Y+7	; 0x07
    27c0:	82 17       	cp	r24, r18
    27c2:	93 07       	cpc	r25, r19
    27c4:	80 f0       	brcs	.+32     	; 0x27e6 <xStreamBufferSendFromISR+0x6e>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    27c6:	88 85       	ldd	r24, Y+8	; 0x08
    27c8:	99 85       	ldd	r25, Y+9	; 0x09
    27ca:	89 2b       	or	r24, r25
    27cc:	61 f0       	breq	.+24     	; 0x27e6 <xStreamBufferSendFromISR+0x6e>
    27ce:	88 85       	ldd	r24, Y+8	; 0x08
    27d0:	99 85       	ldd	r25, Y+9	; 0x09
    27d2:	00 e0       	ldi	r16, 0x00	; 0
    27d4:	10 e0       	ldi	r17, 0x00	; 0
    27d6:	20 e0       	ldi	r18, 0x00	; 0
    27d8:	40 e0       	ldi	r20, 0x00	; 0
    27da:	50 e0       	ldi	r21, 0x00	; 0
    27dc:	ba 01       	movw	r22, r20
    27de:	0e 94 34 1c 	call	0x3868	; 0x3868 <xTaskGenericNotifyFromISR>
    27e2:	19 86       	std	Y+9, r1	; 0x09
    27e4:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    27e6:	c6 01       	movw	r24, r12
    27e8:	df 91       	pop	r29
    27ea:	cf 91       	pop	r28
    27ec:	1f 91       	pop	r17
    27ee:	0f 91       	pop	r16
    27f0:	ff 90       	pop	r15
    27f2:	ef 90       	pop	r14
    27f4:	df 90       	pop	r13
    27f6:	cf 90       	pop	r12
    27f8:	bf 90       	pop	r11
    27fa:	af 90       	pop	r10
    27fc:	08 95       	ret

000027fe <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void *pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    27fe:	4f 92       	push	r4
    2800:	5f 92       	push	r5
    2802:	6f 92       	push	r6
    2804:	7f 92       	push	r7
    2806:	8f 92       	push	r8
    2808:	9f 92       	push	r9
    280a:	af 92       	push	r10
    280c:	bf 92       	push	r11
    280e:	cf 92       	push	r12
    2810:	df 92       	push	r13
    2812:	ef 92       	push	r14
    2814:	ff 92       	push	r15
    2816:	0f 93       	push	r16
    2818:	1f 93       	push	r17
    281a:	cf 93       	push	r28
    281c:	df 93       	push	r29
    281e:	1f 92       	push	r1
    2820:	1f 92       	push	r1
    2822:	cd b7       	in	r28, 0x3d	; 61
    2824:	de b7       	in	r29, 0x3e	; 62
    2826:	5c 01       	movw	r10, r24
    2828:	2b 01       	movw	r4, r22
    282a:	3a 01       	movw	r6, r20
    282c:	68 01       	movw	r12, r16
    282e:	79 01       	movw	r14, r18
    /* This receive function is used by both message buffers, which store
    discrete messages, and stream buffers, which store a continuous stream of
    bytes.  Discrete messages include an additional
    sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    2830:	fc 01       	movw	r30, r24
    2832:	86 85       	ldd	r24, Z+14	; 0x0e
    2834:	80 fd       	sbrc	r24, 0
    2836:	03 c0       	rjmp	.+6      	; 0x283e <xStreamBufferReceive+0x40>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    2838:	81 2c       	mov	r8, r1
    283a:	91 2c       	mov	r9, r1
    283c:	04 c0       	rjmp	.+8      	; 0x2846 <xStreamBufferReceive+0x48>
    bytes.  Discrete messages include an additional
    sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    283e:	68 94       	set
    2840:	88 24       	eor	r8, r8
    2842:	81 f8       	bld	r8, 1
    2844:	91 2c       	mov	r9, r1
    else
    {
        xBytesToStoreMessageLength = 0;
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    2846:	c1 14       	cp	r12, r1
    2848:	d1 04       	cpc	r13, r1
    284a:	e1 04       	cpc	r14, r1
    284c:	f1 04       	cpc	r15, r1
    284e:	31 f1       	breq	.+76     	; 0x289c <xStreamBufferReceive+0x9e>
    {
        /* Checking if there is data and clearing the notification state must be
        performed atomically. */
        taskENTER_CRITICAL();
    2850:	0f b6       	in	r0, 0x3f	; 63
    2852:	f8 94       	cli
    2854:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    2856:	c5 01       	movw	r24, r10
    2858:	90 dd       	rcall	.-1248   	; 0x237a <prvBytesInBuffer>
    285a:	8c 01       	movw	r16, r24
            /* If this function was invoked by a message buffer read then
            xBytesToStoreMessageLength holds the number of bytes used to hold
            the length of the next discrete message.  If this function was
            invoked by a stream buffer read then xBytesToStoreMessageLength will
            be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    285c:	88 16       	cp	r8, r24
    285e:	99 06       	cpc	r9, r25
    2860:	40 f0       	brcs	.+16     	; 0x2872 <xStreamBufferReceive+0x74>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    2862:	80 e0       	ldi	r24, 0x00	; 0
    2864:	90 e0       	ldi	r25, 0x00	; 0
    2866:	0e 94 bd 1c 	call	0x397a	; 0x397a <xTaskNotifyStateClear>

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    286a:	b5 d5       	rcall	.+2922   	; 0x33d6 <xTaskGetCurrentTaskHandle>
    286c:	f5 01       	movw	r30, r10
    286e:	91 87       	std	Z+9, r25	; 0x09
    2870:	80 87       	std	Z+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    2872:	0f 90       	pop	r0
    2874:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    2876:	80 16       	cp	r8, r16
    2878:	91 06       	cpc	r9, r17
    287a:	b0 f0       	brcs	.+44     	; 0x28a8 <xStreamBufferReceive+0xaa>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    287c:	00 e0       	ldi	r16, 0x00	; 0
    287e:	10 e0       	ldi	r17, 0x00	; 0
    2880:	20 e0       	ldi	r18, 0x00	; 0
    2882:	30 e0       	ldi	r19, 0x00	; 0
    2884:	a9 01       	movw	r20, r18
    2886:	60 e0       	ldi	r22, 0x00	; 0
    2888:	70 e0       	ldi	r23, 0x00	; 0
    288a:	cb 01       	movw	r24, r22
    288c:	eb d6       	rcall	.+3542   	; 0x3664 <xTaskNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    288e:	f5 01       	movw	r30, r10
    2890:	11 86       	std	Z+9, r1	; 0x09

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    2892:	10 86       	std	Z+8, r1	; 0x08
    2894:	c5 01       	movw	r24, r10
    2896:	71 dd       	rcall	.-1310   	; 0x237a <prvBytesInBuffer>
    2898:	8c 01       	movw	r16, r24
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    289a:	03 c0       	rjmp	.+6      	; 0x28a2 <xStreamBufferReceive+0xa4>
    289c:	c5 01       	movw	r24, r10
    289e:	6d dd       	rcall	.-1318   	; 0x237a <prvBytesInBuffer>
    28a0:	8c 01       	movw	r16, r24
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
    holds the number of bytes used to store the message length) or a stream of
    bytes (where xBytesToStoreMessageLength is zero), the number of bytes
    available must be greater than xBytesToStoreMessageLength to be able to
    read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    28a2:	80 16       	cp	r8, r16
    28a4:	91 06       	cpc	r9, r17
    28a6:	b8 f5       	brcc	.+110    	; 0x2916 <xStreamBufferReceive+0x118>
                                        size_t xBytesToStoreMessageLength )
{
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

    if( xBytesToStoreMessageLength != ( size_t ) 0 )
    28a8:	81 14       	cp	r8, r1
    28aa:	91 04       	cpc	r9, r1
    28ac:	c1 f0       	breq	.+48     	; 0x28de <xStreamBufferReceive+0xe0>
    {
        /* A discrete message is being received.  First receive the length
        of the message.  A copy of the tail is stored so the buffer can be
        returned to its prior state if the length of the message is too
        large for the provided buffer. */
        xOriginalTail = pxStreamBuffer->xTail;
    28ae:	f5 01       	movw	r30, r10
    28b0:	e0 80       	ld	r14, Z
    28b2:	f1 80       	ldd	r15, Z+1	; 0x01
        ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
    28b4:	98 01       	movw	r18, r16
    28b6:	a4 01       	movw	r20, r8
    28b8:	be 01       	movw	r22, r28
    28ba:	6f 5f       	subi	r22, 0xFF	; 255
    28bc:	7f 4f       	sbci	r23, 0xFF	; 255
    28be:	c5 01       	movw	r24, r10
    28c0:	f8 dd       	rcall	.-1040   	; 0x24b2 <prvReadBytesFromBuffer>
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
    28c2:	89 81       	ldd	r24, Y+1	; 0x01
    28c4:	9a 81       	ldd	r25, Y+2	; 0x02

        /* Reduce the number of bytes available by the number of bytes just
        read out. */
        xBytesAvailable -= xBytesToStoreMessageLength;
    28c6:	08 19       	sub	r16, r8
    28c8:	19 09       	sbc	r17, r9

        /* Check there is enough space in the buffer provided by the
        user. */
        if( xNextMessageLength > xBufferLengthBytes )
    28ca:	68 16       	cp	r6, r24
    28cc:	79 06       	cpc	r7, r25
    28ce:	30 f4       	brcc	.+12     	; 0x28dc <xStreamBufferReceive+0xde>
        {
            /* The user has provided insufficient space to read the message
            so return the buffer to its previous state (so the length of
            the message is in the buffer again). */
            pxStreamBuffer->xTail = xOriginalTail;
    28d0:	f5 01       	movw	r30, r10
    28d2:	f1 82       	std	Z+1, r15	; 0x01
    28d4:	e0 82       	st	Z, r14
            xNextMessageLength = 0;
    28d6:	61 2c       	mov	r6, r1
    28d8:	71 2c       	mov	r7, r1
        of the message.  A copy of the tail is stored so the buffer can be
        returned to its prior state if the length of the message is too
        large for the provided buffer. */
        xOriginalTail = pxStreamBuffer->xTail;
        ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
    28da:	01 c0       	rjmp	.+2      	; 0x28de <xStreamBufferReceive+0xe0>
        message), so read as many bytes as possible. */
        xNextMessageLength = xBufferLengthBytes;
    }

    /* Read the actual data. */
    xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
    28dc:	3c 01       	movw	r6, r24
    28de:	98 01       	movw	r18, r16
    28e0:	a3 01       	movw	r20, r6
    28e2:	b2 01       	movw	r22, r4
    28e4:	c5 01       	movw	r24, r10
    28e6:	e5 dd       	rcall	.-1078   	; 0x24b2 <prvReadBytesFromBuffer>
    if( xBytesAvailable > xBytesToStoreMessageLength )
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    28e8:	7c 01       	movw	r14, r24
    28ea:	89 2b       	or	r24, r25
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    28ec:	b1 f0       	breq	.+44     	; 0x291a <xStreamBufferReceive+0x11c>
    28ee:	25 d2       	rcall	.+1098   	; 0x2d3a <vTaskSuspendAll>
    28f0:	f5 01       	movw	r30, r10
    28f2:	82 85       	ldd	r24, Z+10	; 0x0a
    28f4:	93 85       	ldd	r25, Z+11	; 0x0b
    28f6:	89 2b       	or	r24, r25
    28f8:	61 f0       	breq	.+24     	; 0x2912 <xStreamBufferReceive+0x114>
    28fa:	82 85       	ldd	r24, Z+10	; 0x0a
    28fc:	93 85       	ldd	r25, Z+11	; 0x0b
    28fe:	00 e0       	ldi	r16, 0x00	; 0
    2900:	10 e0       	ldi	r17, 0x00	; 0
    2902:	20 e0       	ldi	r18, 0x00	; 0
    2904:	40 e0       	ldi	r20, 0x00	; 0
    2906:	50 e0       	ldi	r21, 0x00	; 0
    2908:	ba 01       	movw	r22, r20
    290a:	36 d7       	rcall	.+3692   	; 0x3778 <xTaskGenericNotify>
    290c:	f5 01       	movw	r30, r10
    290e:	13 86       	std	Z+11, r1	; 0x0b
    2910:	12 86       	std	Z+10, r1	; 0x0a
    2912:	fc d2       	rcall	.+1528   	; 0x2f0c <xTaskResumeAll>
    2914:	02 c0       	rjmp	.+4      	; 0x291a <xStreamBufferReceive+0x11c>
                             void *pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    2916:	e1 2c       	mov	r14, r1
    2918:	f1 2c       	mov	r15, r1
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    291a:	c7 01       	movw	r24, r14
    291c:	0f 90       	pop	r0
    291e:	0f 90       	pop	r0
    2920:	df 91       	pop	r29
    2922:	cf 91       	pop	r28
    2924:	1f 91       	pop	r17
    2926:	0f 91       	pop	r16
    2928:	ff 90       	pop	r15
    292a:	ef 90       	pop	r14
    292c:	df 90       	pop	r13
    292e:	cf 90       	pop	r12
    2930:	bf 90       	pop	r11
    2932:	af 90       	pop	r10
    2934:	9f 90       	pop	r9
    2936:	8f 90       	pop	r8
    2938:	7f 90       	pop	r7
    293a:	6f 90       	pop	r6
    293c:	5f 90       	pop	r5
    293e:	4f 90       	pop	r4
    2940:	08 95       	ret

00002942 <prvResetNextTaskUnblockTime>:
    2942:	e0 91 25 19 	lds	r30, 0x1925	; 0x801925 <pxDelayedTaskList>
    2946:	f0 91 26 19 	lds	r31, 0x1926	; 0x801926 <pxDelayedTaskList+0x1>
    294a:	80 81       	ld	r24, Z
    294c:	81 11       	cpse	r24, r1
    294e:	0c c0       	rjmp	.+24     	; 0x2968 <prvResetNextTaskUnblockTime+0x26>
    2950:	8f ef       	ldi	r24, 0xFF	; 255
    2952:	9f ef       	ldi	r25, 0xFF	; 255
    2954:	dc 01       	movw	r26, r24
    2956:	80 93 f2 18 	sts	0x18F2, r24	; 0x8018f2 <xNextTaskUnblockTime>
    295a:	90 93 f3 18 	sts	0x18F3, r25	; 0x8018f3 <xNextTaskUnblockTime+0x1>
    295e:	a0 93 f4 18 	sts	0x18F4, r26	; 0x8018f4 <xNextTaskUnblockTime+0x2>
    2962:	b0 93 f5 18 	sts	0x18F5, r27	; 0x8018f5 <xNextTaskUnblockTime+0x3>
    2966:	08 95       	ret
    2968:	e0 91 25 19 	lds	r30, 0x1925	; 0x801925 <pxDelayedTaskList>
    296c:	f0 91 26 19 	lds	r31, 0x1926	; 0x801926 <pxDelayedTaskList+0x1>
    2970:	07 80       	ldd	r0, Z+7	; 0x07
    2972:	f0 85       	ldd	r31, Z+8	; 0x08
    2974:	e0 2d       	mov	r30, r0
    2976:	00 84       	ldd	r0, Z+8	; 0x08
    2978:	f1 85       	ldd	r31, Z+9	; 0x09
    297a:	e0 2d       	mov	r30, r0
    297c:	82 81       	ldd	r24, Z+2	; 0x02
    297e:	93 81       	ldd	r25, Z+3	; 0x03
    2980:	a4 81       	ldd	r26, Z+4	; 0x04
    2982:	b5 81       	ldd	r27, Z+5	; 0x05
    2984:	80 93 f2 18 	sts	0x18F2, r24	; 0x8018f2 <xNextTaskUnblockTime>
    2988:	90 93 f3 18 	sts	0x18F3, r25	; 0x8018f3 <xNextTaskUnblockTime+0x1>
    298c:	a0 93 f4 18 	sts	0x18F4, r26	; 0x8018f4 <xNextTaskUnblockTime+0x2>
    2990:	b0 93 f5 18 	sts	0x18F5, r27	; 0x8018f5 <xNextTaskUnblockTime+0x3>
    2994:	08 95       	ret

00002996 <prvAddCurrentTaskToDelayedList>:
    2996:	8f 92       	push	r8
    2998:	9f 92       	push	r9
    299a:	af 92       	push	r10
    299c:	bf 92       	push	r11
    299e:	cf 92       	push	r12
    29a0:	df 92       	push	r13
    29a2:	ef 92       	push	r14
    29a4:	ff 92       	push	r15
    29a6:	cf 93       	push	r28
    29a8:	6b 01       	movw	r12, r22
    29aa:	7c 01       	movw	r14, r24
    29ac:	c4 2f       	mov	r28, r20
    29ae:	80 90 fc 18 	lds	r8, 0x18FC	; 0x8018fc <xTickCount>
    29b2:	90 90 fd 18 	lds	r9, 0x18FD	; 0x8018fd <xTickCount+0x1>
    29b6:	a0 90 fe 18 	lds	r10, 0x18FE	; 0x8018fe <xTickCount+0x2>
    29ba:	b0 90 ff 18 	lds	r11, 0x18FF	; 0x8018ff <xTickCount+0x3>
    29be:	80 91 69 19 	lds	r24, 0x1969	; 0x801969 <pxCurrentTCB>
    29c2:	90 91 6a 19 	lds	r25, 0x196A	; 0x80196a <pxCurrentTCB+0x1>
    29c6:	02 96       	adiw	r24, 0x02	; 2
    29c8:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <uxListRemove>
    29cc:	8f ef       	ldi	r24, 0xFF	; 255
    29ce:	c8 16       	cp	r12, r24
    29d0:	d8 06       	cpc	r13, r24
    29d2:	e8 06       	cpc	r14, r24
    29d4:	f8 06       	cpc	r15, r24
    29d6:	69 f4       	brne	.+26     	; 0x29f2 <prvAddCurrentTaskToDelayedList+0x5c>
    29d8:	cc 23       	and	r28, r28
    29da:	59 f0       	breq	.+22     	; 0x29f2 <prvAddCurrentTaskToDelayedList+0x5c>
    29dc:	60 91 69 19 	lds	r22, 0x1969	; 0x801969 <pxCurrentTCB>
    29e0:	70 91 6a 19 	lds	r23, 0x196A	; 0x80196a <pxCurrentTCB+0x1>
    29e4:	6e 5f       	subi	r22, 0xFE	; 254
    29e6:	7f 4f       	sbci	r23, 0xFF	; 255
    29e8:	81 e0       	ldi	r24, 0x01	; 1
    29ea:	99 e1       	ldi	r25, 0x19	; 25
    29ec:	0e 94 0d 0c 	call	0x181a	; 0x181a <vListInsertEnd>
    29f0:	3f c0       	rjmp	.+126    	; 0x2a70 <prvAddCurrentTaskToDelayedList+0xda>
    29f2:	c8 0c       	add	r12, r8
    29f4:	d9 1c       	adc	r13, r9
    29f6:	ea 1c       	adc	r14, r10
    29f8:	fb 1c       	adc	r15, r11
    29fa:	e0 91 69 19 	lds	r30, 0x1969	; 0x801969 <pxCurrentTCB>
    29fe:	f0 91 6a 19 	lds	r31, 0x196A	; 0x80196a <pxCurrentTCB+0x1>
    2a02:	c2 82       	std	Z+2, r12	; 0x02
    2a04:	d3 82       	std	Z+3, r13	; 0x03
    2a06:	e4 82       	std	Z+4, r14	; 0x04
    2a08:	f5 82       	std	Z+5, r15	; 0x05
    2a0a:	c8 14       	cp	r12, r8
    2a0c:	d9 04       	cpc	r13, r9
    2a0e:	ea 04       	cpc	r14, r10
    2a10:	fb 04       	cpc	r15, r11
    2a12:	68 f4       	brcc	.+26     	; 0x2a2e <prvAddCurrentTaskToDelayedList+0x98>
    2a14:	60 91 69 19 	lds	r22, 0x1969	; 0x801969 <pxCurrentTCB>
    2a18:	70 91 6a 19 	lds	r23, 0x196A	; 0x80196a <pxCurrentTCB+0x1>
    2a1c:	80 91 23 19 	lds	r24, 0x1923	; 0x801923 <pxOverflowDelayedTaskList>
    2a20:	90 91 24 19 	lds	r25, 0x1924	; 0x801924 <pxOverflowDelayedTaskList+0x1>
    2a24:	6e 5f       	subi	r22, 0xFE	; 254
    2a26:	7f 4f       	sbci	r23, 0xFF	; 255
    2a28:	0e 94 2e 0c 	call	0x185c	; 0x185c <vListInsert>
    2a2c:	21 c0       	rjmp	.+66     	; 0x2a70 <prvAddCurrentTaskToDelayedList+0xda>
    2a2e:	60 91 69 19 	lds	r22, 0x1969	; 0x801969 <pxCurrentTCB>
    2a32:	70 91 6a 19 	lds	r23, 0x196A	; 0x80196a <pxCurrentTCB+0x1>
    2a36:	80 91 25 19 	lds	r24, 0x1925	; 0x801925 <pxDelayedTaskList>
    2a3a:	90 91 26 19 	lds	r25, 0x1926	; 0x801926 <pxDelayedTaskList+0x1>
    2a3e:	6e 5f       	subi	r22, 0xFE	; 254
    2a40:	7f 4f       	sbci	r23, 0xFF	; 255
    2a42:	0e 94 2e 0c 	call	0x185c	; 0x185c <vListInsert>
    2a46:	80 91 f2 18 	lds	r24, 0x18F2	; 0x8018f2 <xNextTaskUnblockTime>
    2a4a:	90 91 f3 18 	lds	r25, 0x18F3	; 0x8018f3 <xNextTaskUnblockTime+0x1>
    2a4e:	a0 91 f4 18 	lds	r26, 0x18F4	; 0x8018f4 <xNextTaskUnblockTime+0x2>
    2a52:	b0 91 f5 18 	lds	r27, 0x18F5	; 0x8018f5 <xNextTaskUnblockTime+0x3>
    2a56:	c8 16       	cp	r12, r24
    2a58:	d9 06       	cpc	r13, r25
    2a5a:	ea 06       	cpc	r14, r26
    2a5c:	fb 06       	cpc	r15, r27
    2a5e:	40 f4       	brcc	.+16     	; 0x2a70 <prvAddCurrentTaskToDelayedList+0xda>
    2a60:	c0 92 f2 18 	sts	0x18F2, r12	; 0x8018f2 <xNextTaskUnblockTime>
    2a64:	d0 92 f3 18 	sts	0x18F3, r13	; 0x8018f3 <xNextTaskUnblockTime+0x1>
    2a68:	e0 92 f4 18 	sts	0x18F4, r14	; 0x8018f4 <xNextTaskUnblockTime+0x2>
    2a6c:	f0 92 f5 18 	sts	0x18F5, r15	; 0x8018f5 <xNextTaskUnblockTime+0x3>
    2a70:	cf 91       	pop	r28
    2a72:	ff 90       	pop	r15
    2a74:	ef 90       	pop	r14
    2a76:	df 90       	pop	r13
    2a78:	cf 90       	pop	r12
    2a7a:	bf 90       	pop	r11
    2a7c:	af 90       	pop	r10
    2a7e:	9f 90       	pop	r9
    2a80:	8f 90       	pop	r8
    2a82:	08 95       	ret

00002a84 <xTaskCreate>:
    2a84:	4f 92       	push	r4
    2a86:	5f 92       	push	r5
    2a88:	6f 92       	push	r6
    2a8a:	7f 92       	push	r7
    2a8c:	8f 92       	push	r8
    2a8e:	9f 92       	push	r9
    2a90:	af 92       	push	r10
    2a92:	bf 92       	push	r11
    2a94:	cf 92       	push	r12
    2a96:	df 92       	push	r13
    2a98:	ef 92       	push	r14
    2a9a:	ff 92       	push	r15
    2a9c:	0f 93       	push	r16
    2a9e:	cf 93       	push	r28
    2aa0:	df 93       	push	r29
    2aa2:	4c 01       	movw	r8, r24
    2aa4:	6b 01       	movw	r12, r22
    2aa6:	5a 01       	movw	r10, r20
    2aa8:	29 01       	movw	r4, r18
    2aaa:	ca 01       	movw	r24, r20
    2aac:	0e 94 0e 0b 	call	0x161c	; 0x161c <pvPortMalloc>
    2ab0:	3c 01       	movw	r6, r24
    2ab2:	89 2b       	or	r24, r25
    2ab4:	09 f4       	brne	.+2      	; 0x2ab8 <xTaskCreate+0x34>
    2ab6:	f4 c0       	rjmp	.+488    	; 0x2ca0 <xTaskCreate+0x21c>
    2ab8:	80 e3       	ldi	r24, 0x30	; 48
    2aba:	90 e0       	ldi	r25, 0x00	; 0
    2abc:	0e 94 0e 0b 	call	0x161c	; 0x161c <pvPortMalloc>
    2ac0:	ec 01       	movw	r28, r24
    2ac2:	89 2b       	or	r24, r25
    2ac4:	99 f0       	breq	.+38     	; 0x2aec <xTaskCreate+0x68>
    2ac6:	7c 8e       	std	Y+28, r7	; 0x1c
    2ac8:	6b 8e       	std	Y+27, r6	; 0x1b
    2aca:	a5 01       	movw	r20, r10
    2acc:	65 ea       	ldi	r22, 0xA5	; 165
    2ace:	70 e0       	ldi	r23, 0x00	; 0
    2ad0:	c3 01       	movw	r24, r6
    2ad2:	0e 94 03 31 	call	0x6206	; 0x6206 <memset>
    2ad6:	21 e0       	ldi	r18, 0x01	; 1
    2ad8:	a2 1a       	sub	r10, r18
    2ada:	b1 08       	sbc	r11, r1
    2adc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ade:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ae0:	a8 0e       	add	r10, r24
    2ae2:	b9 1e       	adc	r11, r25
    2ae4:	c1 14       	cp	r12, r1
    2ae6:	d1 04       	cpc	r13, r1
    2ae8:	29 f4       	brne	.+10     	; 0x2af4 <xTaskCreate+0x70>
    2aea:	20 c0       	rjmp	.+64     	; 0x2b2c <xTaskCreate+0xa8>
    2aec:	c3 01       	movw	r24, r6
    2aee:	0e 94 c7 0b 	call	0x178e	; 0x178e <vPortFree>
    2af2:	d6 c0       	rjmp	.+428    	; 0x2ca0 <xTaskCreate+0x21c>
    2af4:	d6 01       	movw	r26, r12
    2af6:	8c 91       	ld	r24, X
    2af8:	8d 8f       	std	Y+29, r24	; 0x1d
    2afa:	8c 91       	ld	r24, X
    2afc:	88 23       	and	r24, r24
    2afe:	a1 f0       	breq	.+40     	; 0x2b28 <xTaskCreate+0xa4>
    2b00:	ae 01       	movw	r20, r28
    2b02:	42 5e       	subi	r20, 0xE2	; 226
    2b04:	5f 4f       	sbci	r21, 0xFF	; 255
    2b06:	f6 01       	movw	r30, r12
    2b08:	31 96       	adiw	r30, 0x01	; 1
    2b0a:	b8 e0       	ldi	r27, 0x08	; 8
    2b0c:	cb 0e       	add	r12, r27
    2b0e:	d1 1c       	adc	r13, r1
    2b10:	cf 01       	movw	r24, r30
    2b12:	21 91       	ld	r18, Z+
    2b14:	da 01       	movw	r26, r20
    2b16:	2d 93       	st	X+, r18
    2b18:	ad 01       	movw	r20, r26
    2b1a:	dc 01       	movw	r26, r24
    2b1c:	8c 91       	ld	r24, X
    2b1e:	88 23       	and	r24, r24
    2b20:	19 f0       	breq	.+6      	; 0x2b28 <xTaskCreate+0xa4>
    2b22:	ec 15       	cp	r30, r12
    2b24:	fd 05       	cpc	r31, r13
    2b26:	a1 f7       	brne	.-24     	; 0x2b10 <xTaskCreate+0x8c>
    2b28:	1c a2       	std	Y+36, r1	; 0x24
    2b2a:	01 c0       	rjmp	.+2      	; 0x2b2e <xTaskCreate+0xaa>
    2b2c:	1d 8e       	std	Y+29, r1	; 0x1d
    2b2e:	04 30       	cpi	r16, 0x04	; 4
    2b30:	08 f0       	brcs	.+2      	; 0x2b34 <xTaskCreate+0xb0>
    2b32:	03 e0       	ldi	r16, 0x03	; 3
    2b34:	0a 8f       	std	Y+26, r16	; 0x1a
    2b36:	0f a3       	std	Y+39, r16	; 0x27
    2b38:	18 a6       	std	Y+40, r1	; 0x28
    2b3a:	6e 01       	movw	r12, r28
    2b3c:	b2 e0       	ldi	r27, 0x02	; 2
    2b3e:	cb 0e       	add	r12, r27
    2b40:	d1 1c       	adc	r13, r1
    2b42:	c6 01       	movw	r24, r12
    2b44:	0e 94 09 0c 	call	0x1812	; 0x1812 <vListInitialiseItem>
    2b48:	ce 01       	movw	r24, r28
    2b4a:	0e 96       	adiw	r24, 0x0e	; 14
    2b4c:	0e 94 09 0c 	call	0x1812	; 0x1812 <vListInitialiseItem>
    2b50:	db 87       	std	Y+11, r29	; 0x0b
    2b52:	ca 87       	std	Y+10, r28	; 0x0a
    2b54:	84 e0       	ldi	r24, 0x04	; 4
    2b56:	90 e0       	ldi	r25, 0x00	; 0
    2b58:	a0 e0       	ldi	r26, 0x00	; 0
    2b5a:	b0 e0       	ldi	r27, 0x00	; 0
    2b5c:	80 1b       	sub	r24, r16
    2b5e:	91 09       	sbc	r25, r1
    2b60:	a1 09       	sbc	r26, r1
    2b62:	b1 09       	sbc	r27, r1
    2b64:	8e 87       	std	Y+14, r24	; 0x0e
    2b66:	9f 87       	std	Y+15, r25	; 0x0f
    2b68:	a8 8b       	std	Y+16, r26	; 0x10
    2b6a:	b9 8b       	std	Y+17, r27	; 0x11
    2b6c:	df 8b       	std	Y+23, r29	; 0x17
    2b6e:	ce 8b       	std	Y+22, r28	; 0x16
    2b70:	1a a6       	std	Y+42, r1	; 0x2a
    2b72:	19 a6       	std	Y+41, r1	; 0x29
    2b74:	1b a6       	std	Y+43, r1	; 0x2b
    2b76:	1c a6       	std	Y+44, r1	; 0x2c
    2b78:	1d a6       	std	Y+45, r1	; 0x2d
    2b7a:	1e a6       	std	Y+46, r1	; 0x2e
    2b7c:	1f a6       	std	Y+47, r1	; 0x2f
    2b7e:	a2 01       	movw	r20, r4
    2b80:	b4 01       	movw	r22, r8
    2b82:	c5 01       	movw	r24, r10
    2b84:	0e 94 92 0c 	call	0x1924	; 0x1924 <pxPortInitialiseStack>
    2b88:	99 83       	std	Y+1, r25	; 0x01
    2b8a:	88 83       	st	Y, r24
    2b8c:	e1 14       	cp	r14, r1
    2b8e:	f1 04       	cpc	r15, r1
    2b90:	19 f0       	breq	.+6      	; 0x2b98 <xTaskCreate+0x114>
    2b92:	f7 01       	movw	r30, r14
    2b94:	d1 83       	std	Z+1, r29	; 0x01
    2b96:	c0 83       	st	Z, r28
    2b98:	0f b6       	in	r0, 0x3f	; 63
    2b9a:	f8 94       	cli
    2b9c:	0f 92       	push	r0
    2b9e:	80 91 00 19 	lds	r24, 0x1900	; 0x801900 <uxCurrentNumberOfTasks>
    2ba2:	8f 5f       	subi	r24, 0xFF	; 255
    2ba4:	80 93 00 19 	sts	0x1900, r24	; 0x801900 <uxCurrentNumberOfTasks>
    2ba8:	80 91 69 19 	lds	r24, 0x1969	; 0x801969 <pxCurrentTCB>
    2bac:	90 91 6a 19 	lds	r25, 0x196A	; 0x80196a <pxCurrentTCB+0x1>
    2bb0:	89 2b       	or	r24, r25
    2bb2:	d1 f5       	brne	.+116    	; 0x2c28 <xTaskCreate+0x1a4>
    2bb4:	d0 93 6a 19 	sts	0x196A, r29	; 0x80196a <pxCurrentTCB+0x1>
    2bb8:	c0 93 69 19 	sts	0x1969, r28	; 0x801969 <pxCurrentTCB>
    2bbc:	80 91 00 19 	lds	r24, 0x1900	; 0x801900 <uxCurrentNumberOfTasks>
    2bc0:	81 30       	cpi	r24, 0x01	; 1
    2bc2:	09 f0       	breq	.+2      	; 0x2bc6 <xTaskCreate+0x142>
    2bc4:	41 c0       	rjmp	.+130    	; 0x2c48 <xTaskCreate+0x1c4>
    2bc6:	8d e3       	ldi	r24, 0x3D	; 61
    2bc8:	99 e1       	ldi	r25, 0x19	; 25
    2bca:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <vListInitialise>
    2bce:	88 e4       	ldi	r24, 0x48	; 72
    2bd0:	99 e1       	ldi	r25, 0x19	; 25
    2bd2:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <vListInitialise>
    2bd6:	83 e5       	ldi	r24, 0x53	; 83
    2bd8:	99 e1       	ldi	r25, 0x19	; 25
    2bda:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <vListInitialise>
    2bde:	8e e5       	ldi	r24, 0x5E	; 94
    2be0:	99 e1       	ldi	r25, 0x19	; 25
    2be2:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <vListInitialise>
    2be6:	82 e3       	ldi	r24, 0x32	; 50
    2be8:	99 e1       	ldi	r25, 0x19	; 25
    2bea:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <vListInitialise>
    2bee:	87 e2       	ldi	r24, 0x27	; 39
    2bf0:	99 e1       	ldi	r25, 0x19	; 25
    2bf2:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <vListInitialise>
    2bf6:	88 e1       	ldi	r24, 0x18	; 24
    2bf8:	99 e1       	ldi	r25, 0x19	; 25
    2bfa:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <vListInitialise>
    2bfe:	8d e0       	ldi	r24, 0x0D	; 13
    2c00:	99 e1       	ldi	r25, 0x19	; 25
    2c02:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <vListInitialise>
    2c06:	81 e0       	ldi	r24, 0x01	; 1
    2c08:	99 e1       	ldi	r25, 0x19	; 25
    2c0a:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <vListInitialise>
    2c0e:	82 e3       	ldi	r24, 0x32	; 50
    2c10:	99 e1       	ldi	r25, 0x19	; 25
    2c12:	90 93 26 19 	sts	0x1926, r25	; 0x801926 <pxDelayedTaskList+0x1>
    2c16:	80 93 25 19 	sts	0x1925, r24	; 0x801925 <pxDelayedTaskList>
    2c1a:	87 e2       	ldi	r24, 0x27	; 39
    2c1c:	99 e1       	ldi	r25, 0x19	; 25
    2c1e:	90 93 24 19 	sts	0x1924, r25	; 0x801924 <pxOverflowDelayedTaskList+0x1>
    2c22:	80 93 23 19 	sts	0x1923, r24	; 0x801923 <pxOverflowDelayedTaskList>
    2c26:	10 c0       	rjmp	.+32     	; 0x2c48 <xTaskCreate+0x1c4>
    2c28:	80 91 fa 18 	lds	r24, 0x18FA	; 0x8018fa <xSchedulerRunning>
    2c2c:	81 11       	cpse	r24, r1
    2c2e:	0c c0       	rjmp	.+24     	; 0x2c48 <xTaskCreate+0x1c4>
    2c30:	e0 91 69 19 	lds	r30, 0x1969	; 0x801969 <pxCurrentTCB>
    2c34:	f0 91 6a 19 	lds	r31, 0x196A	; 0x80196a <pxCurrentTCB+0x1>
    2c38:	92 8d       	ldd	r25, Z+26	; 0x1a
    2c3a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2c3c:	89 17       	cp	r24, r25
    2c3e:	20 f0       	brcs	.+8      	; 0x2c48 <xTaskCreate+0x1c4>
    2c40:	d0 93 6a 19 	sts	0x196A, r29	; 0x80196a <pxCurrentTCB+0x1>
    2c44:	c0 93 69 19 	sts	0x1969, r28	; 0x801969 <pxCurrentTCB>
    2c48:	80 91 f6 18 	lds	r24, 0x18F6	; 0x8018f6 <uxTaskNumber>
    2c4c:	8f 5f       	subi	r24, 0xFF	; 255
    2c4e:	80 93 f6 18 	sts	0x18F6, r24	; 0x8018f6 <uxTaskNumber>
    2c52:	8d a3       	std	Y+37, r24	; 0x25
    2c54:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2c56:	90 91 fb 18 	lds	r25, 0x18FB	; 0x8018fb <uxTopReadyPriority>
    2c5a:	98 17       	cp	r25, r24
    2c5c:	10 f4       	brcc	.+4      	; 0x2c62 <xTaskCreate+0x1de>
    2c5e:	80 93 fb 18 	sts	0x18FB, r24	; 0x8018fb <uxTopReadyPriority>
    2c62:	fb e0       	ldi	r31, 0x0B	; 11
    2c64:	8f 9f       	mul	r24, r31
    2c66:	c0 01       	movw	r24, r0
    2c68:	11 24       	eor	r1, r1
    2c6a:	b6 01       	movw	r22, r12
    2c6c:	83 5c       	subi	r24, 0xC3	; 195
    2c6e:	96 4e       	sbci	r25, 0xE6	; 230
    2c70:	0e 94 0d 0c 	call	0x181a	; 0x181a <vListInsertEnd>
    2c74:	0f 90       	pop	r0
    2c76:	0f be       	out	0x3f, r0	; 63
    2c78:	80 91 fa 18 	lds	r24, 0x18FA	; 0x8018fa <xSchedulerRunning>
    2c7c:	88 23       	and	r24, r24
    2c7e:	61 f0       	breq	.+24     	; 0x2c98 <xTaskCreate+0x214>
    2c80:	e0 91 69 19 	lds	r30, 0x1969	; 0x801969 <pxCurrentTCB>
    2c84:	f0 91 6a 19 	lds	r31, 0x196A	; 0x80196a <pxCurrentTCB+0x1>
    2c88:	92 8d       	ldd	r25, Z+26	; 0x1a
    2c8a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2c8c:	98 17       	cp	r25, r24
    2c8e:	30 f4       	brcc	.+12     	; 0x2c9c <xTaskCreate+0x218>
    2c90:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <vPortYield>
    2c94:	81 e0       	ldi	r24, 0x01	; 1
    2c96:	05 c0       	rjmp	.+10     	; 0x2ca2 <xTaskCreate+0x21e>
    2c98:	81 e0       	ldi	r24, 0x01	; 1
    2c9a:	03 c0       	rjmp	.+6      	; 0x2ca2 <xTaskCreate+0x21e>
    2c9c:	81 e0       	ldi	r24, 0x01	; 1
    2c9e:	01 c0       	rjmp	.+2      	; 0x2ca2 <xTaskCreate+0x21e>
    2ca0:	8f ef       	ldi	r24, 0xFF	; 255
    2ca2:	df 91       	pop	r29
    2ca4:	cf 91       	pop	r28
    2ca6:	0f 91       	pop	r16
    2ca8:	ff 90       	pop	r15
    2caa:	ef 90       	pop	r14
    2cac:	df 90       	pop	r13
    2cae:	cf 90       	pop	r12
    2cb0:	bf 90       	pop	r11
    2cb2:	af 90       	pop	r10
    2cb4:	9f 90       	pop	r9
    2cb6:	8f 90       	pop	r8
    2cb8:	7f 90       	pop	r7
    2cba:	6f 90       	pop	r6
    2cbc:	5f 90       	pop	r5
    2cbe:	4f 90       	pop	r4
    2cc0:	08 95       	ret

00002cc2 <vTaskStartScheduler>:
    2cc2:	ef 92       	push	r14
    2cc4:	ff 92       	push	r15
    2cc6:	0f 93       	push	r16
    2cc8:	0f 2e       	mov	r0, r31
    2cca:	f0 ef       	ldi	r31, 0xF0	; 240
    2ccc:	ef 2e       	mov	r14, r31
    2cce:	f8 e1       	ldi	r31, 0x18	; 24
    2cd0:	ff 2e       	mov	r15, r31
    2cd2:	f0 2d       	mov	r31, r0
    2cd4:	00 e0       	ldi	r16, 0x00	; 0
    2cd6:	20 e0       	ldi	r18, 0x00	; 0
    2cd8:	30 e0       	ldi	r19, 0x00	; 0
    2cda:	40 ec       	ldi	r20, 0xC0	; 192
    2cdc:	50 e0       	ldi	r21, 0x00	; 0
    2cde:	62 e7       	ldi	r22, 0x72	; 114
    2ce0:	75 e0       	ldi	r23, 0x05	; 5
    2ce2:	8d ec       	ldi	r24, 0xCD	; 205
    2ce4:	90 e0       	ldi	r25, 0x00	; 0
    2ce6:	ce de       	rcall	.-612    	; 0x2a84 <xTaskCreate>
    2ce8:	81 30       	cpi	r24, 0x01	; 1
    2cea:	19 f5       	brne	.+70     	; 0x2d32 <vTaskStartScheduler+0x70>
    2cec:	cc d6       	rcall	.+3480   	; 0x3a86 <xTimerCreateTimerTask>
    2cee:	81 30       	cpi	r24, 0x01	; 1
    2cf0:	01 f5       	brne	.+64     	; 0x2d32 <vTaskStartScheduler+0x70>
    2cf2:	f8 94       	cli
    2cf4:	8f ef       	ldi	r24, 0xFF	; 255
    2cf6:	9f ef       	ldi	r25, 0xFF	; 255
    2cf8:	dc 01       	movw	r26, r24
    2cfa:	80 93 f2 18 	sts	0x18F2, r24	; 0x8018f2 <xNextTaskUnblockTime>
    2cfe:	90 93 f3 18 	sts	0x18F3, r25	; 0x8018f3 <xNextTaskUnblockTime+0x1>
    2d02:	a0 93 f4 18 	sts	0x18F4, r26	; 0x8018f4 <xNextTaskUnblockTime+0x2>
    2d06:	b0 93 f5 18 	sts	0x18F5, r27	; 0x8018f5 <xNextTaskUnblockTime+0x3>
    2d0a:	81 e0       	ldi	r24, 0x01	; 1
    2d0c:	80 93 fa 18 	sts	0x18FA, r24	; 0x8018fa <xSchedulerRunning>
    2d10:	10 92 fc 18 	sts	0x18FC, r1	; 0x8018fc <xTickCount>
    2d14:	10 92 fd 18 	sts	0x18FD, r1	; 0x8018fd <xTickCount+0x1>
    2d18:	10 92 fe 18 	sts	0x18FE, r1	; 0x8018fe <xTickCount+0x2>
    2d1c:	10 92 ff 18 	sts	0x18FF, r1	; 0x8018ff <xTickCount+0x3>
    2d20:	e0 91 69 19 	lds	r30, 0x1969	; 0x801969 <pxCurrentTCB>
    2d24:	f0 91 6a 19 	lds	r31, 0x196A	; 0x80196a <pxCurrentTCB+0x1>
    2d28:	81 a5       	ldd	r24, Z+41	; 0x29
    2d2a:	0e 94 45 09 	call	0x128a	; 0x128a <task_switch_in>
    2d2e:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <xPortStartScheduler>
    2d32:	0f 91       	pop	r16
    2d34:	ff 90       	pop	r15
    2d36:	ef 90       	pop	r14
    2d38:	08 95       	ret

00002d3a <vTaskSuspendAll>:
    2d3a:	80 91 ef 18 	lds	r24, 0x18EF	; 0x8018ef <uxSchedulerSuspended>
    2d3e:	8f 5f       	subi	r24, 0xFF	; 255
    2d40:	80 93 ef 18 	sts	0x18EF, r24	; 0x8018ef <uxSchedulerSuspended>
    2d44:	08 95       	ret

00002d46 <xTaskGetTickCount>:
    2d46:	0f b6       	in	r0, 0x3f	; 63
    2d48:	f8 94       	cli
    2d4a:	0f 92       	push	r0
    2d4c:	60 91 fc 18 	lds	r22, 0x18FC	; 0x8018fc <xTickCount>
    2d50:	70 91 fd 18 	lds	r23, 0x18FD	; 0x8018fd <xTickCount+0x1>
    2d54:	80 91 fe 18 	lds	r24, 0x18FE	; 0x8018fe <xTickCount+0x2>
    2d58:	90 91 ff 18 	lds	r25, 0x18FF	; 0x8018ff <xTickCount+0x3>
    2d5c:	0f 90       	pop	r0
    2d5e:	0f be       	out	0x3f, r0	; 63
    2d60:	08 95       	ret

00002d62 <xTaskIncrementTick>:
    2d62:	9f 92       	push	r9
    2d64:	af 92       	push	r10
    2d66:	bf 92       	push	r11
    2d68:	cf 92       	push	r12
    2d6a:	df 92       	push	r13
    2d6c:	ef 92       	push	r14
    2d6e:	ff 92       	push	r15
    2d70:	0f 93       	push	r16
    2d72:	1f 93       	push	r17
    2d74:	cf 93       	push	r28
    2d76:	df 93       	push	r29
    2d78:	80 91 ef 18 	lds	r24, 0x18EF	; 0x8018ef <uxSchedulerSuspended>
    2d7c:	81 11       	cpse	r24, r1
    2d7e:	ad c0       	rjmp	.+346    	; 0x2eda <xTaskIncrementTick+0x178>
    2d80:	c0 90 fc 18 	lds	r12, 0x18FC	; 0x8018fc <xTickCount>
    2d84:	d0 90 fd 18 	lds	r13, 0x18FD	; 0x8018fd <xTickCount+0x1>
    2d88:	e0 90 fe 18 	lds	r14, 0x18FE	; 0x8018fe <xTickCount+0x2>
    2d8c:	f0 90 ff 18 	lds	r15, 0x18FF	; 0x8018ff <xTickCount+0x3>
    2d90:	8f ef       	ldi	r24, 0xFF	; 255
    2d92:	c8 1a       	sub	r12, r24
    2d94:	d8 0a       	sbc	r13, r24
    2d96:	e8 0a       	sbc	r14, r24
    2d98:	f8 0a       	sbc	r15, r24
    2d9a:	c0 92 fc 18 	sts	0x18FC, r12	; 0x8018fc <xTickCount>
    2d9e:	d0 92 fd 18 	sts	0x18FD, r13	; 0x8018fd <xTickCount+0x1>
    2da2:	e0 92 fe 18 	sts	0x18FE, r14	; 0x8018fe <xTickCount+0x2>
    2da6:	f0 92 ff 18 	sts	0x18FF, r15	; 0x8018ff <xTickCount+0x3>
    2daa:	c1 14       	cp	r12, r1
    2dac:	d1 04       	cpc	r13, r1
    2dae:	e1 04       	cpc	r14, r1
    2db0:	f1 04       	cpc	r15, r1
    2db2:	b1 f4       	brne	.+44     	; 0x2de0 <xTaskIncrementTick+0x7e>
    2db4:	80 91 25 19 	lds	r24, 0x1925	; 0x801925 <pxDelayedTaskList>
    2db8:	90 91 26 19 	lds	r25, 0x1926	; 0x801926 <pxDelayedTaskList+0x1>
    2dbc:	20 91 23 19 	lds	r18, 0x1923	; 0x801923 <pxOverflowDelayedTaskList>
    2dc0:	30 91 24 19 	lds	r19, 0x1924	; 0x801924 <pxOverflowDelayedTaskList+0x1>
    2dc4:	30 93 26 19 	sts	0x1926, r19	; 0x801926 <pxDelayedTaskList+0x1>
    2dc8:	20 93 25 19 	sts	0x1925, r18	; 0x801925 <pxDelayedTaskList>
    2dcc:	90 93 24 19 	sts	0x1924, r25	; 0x801924 <pxOverflowDelayedTaskList+0x1>
    2dd0:	80 93 23 19 	sts	0x1923, r24	; 0x801923 <pxOverflowDelayedTaskList>
    2dd4:	80 91 f7 18 	lds	r24, 0x18F7	; 0x8018f7 <xNumOfOverflows>
    2dd8:	8f 5f       	subi	r24, 0xFF	; 255
    2dda:	80 93 f7 18 	sts	0x18F7, r24	; 0x8018f7 <xNumOfOverflows>
    2dde:	b1 dd       	rcall	.-1182   	; 0x2942 <prvResetNextTaskUnblockTime>
    2de0:	80 91 f2 18 	lds	r24, 0x18F2	; 0x8018f2 <xNextTaskUnblockTime>
    2de4:	90 91 f3 18 	lds	r25, 0x18F3	; 0x8018f3 <xNextTaskUnblockTime+0x1>
    2de8:	a0 91 f4 18 	lds	r26, 0x18F4	; 0x8018f4 <xNextTaskUnblockTime+0x2>
    2dec:	b0 91 f5 18 	lds	r27, 0x18F5	; 0x8018f5 <xNextTaskUnblockTime+0x3>
    2df0:	c8 16       	cp	r12, r24
    2df2:	d9 06       	cpc	r13, r25
    2df4:	ea 06       	cpc	r14, r26
    2df6:	fb 06       	cpc	r15, r27
    2df8:	10 f4       	brcc	.+4      	; 0x2dfe <xTaskIncrementTick+0x9c>
    2dfa:	b1 2c       	mov	r11, r1
    2dfc:	5d c0       	rjmp	.+186    	; 0x2eb8 <xTaskIncrementTick+0x156>
    2dfe:	b1 2c       	mov	r11, r1
    2e00:	0f 2e       	mov	r0, r31
    2e02:	fb e0       	ldi	r31, 0x0B	; 11
    2e04:	af 2e       	mov	r10, r31
    2e06:	f0 2d       	mov	r31, r0
    2e08:	99 24       	eor	r9, r9
    2e0a:	93 94       	inc	r9
    2e0c:	e0 91 25 19 	lds	r30, 0x1925	; 0x801925 <pxDelayedTaskList>
    2e10:	f0 91 26 19 	lds	r31, 0x1926	; 0x801926 <pxDelayedTaskList+0x1>
    2e14:	80 81       	ld	r24, Z
    2e16:	81 11       	cpse	r24, r1
    2e18:	0c c0       	rjmp	.+24     	; 0x2e32 <xTaskIncrementTick+0xd0>
    2e1a:	8f ef       	ldi	r24, 0xFF	; 255
    2e1c:	9f ef       	ldi	r25, 0xFF	; 255
    2e1e:	dc 01       	movw	r26, r24
    2e20:	80 93 f2 18 	sts	0x18F2, r24	; 0x8018f2 <xNextTaskUnblockTime>
    2e24:	90 93 f3 18 	sts	0x18F3, r25	; 0x8018f3 <xNextTaskUnblockTime+0x1>
    2e28:	a0 93 f4 18 	sts	0x18F4, r26	; 0x8018f4 <xNextTaskUnblockTime+0x2>
    2e2c:	b0 93 f5 18 	sts	0x18F5, r27	; 0x8018f5 <xNextTaskUnblockTime+0x3>
    2e30:	43 c0       	rjmp	.+134    	; 0x2eb8 <xTaskIncrementTick+0x156>
    2e32:	e0 91 25 19 	lds	r30, 0x1925	; 0x801925 <pxDelayedTaskList>
    2e36:	f0 91 26 19 	lds	r31, 0x1926	; 0x801926 <pxDelayedTaskList+0x1>
    2e3a:	07 80       	ldd	r0, Z+7	; 0x07
    2e3c:	f0 85       	ldd	r31, Z+8	; 0x08
    2e3e:	e0 2d       	mov	r30, r0
    2e40:	c0 85       	ldd	r28, Z+8	; 0x08
    2e42:	d1 85       	ldd	r29, Z+9	; 0x09
    2e44:	8a 81       	ldd	r24, Y+2	; 0x02
    2e46:	9b 81       	ldd	r25, Y+3	; 0x03
    2e48:	ac 81       	ldd	r26, Y+4	; 0x04
    2e4a:	bd 81       	ldd	r27, Y+5	; 0x05
    2e4c:	c8 16       	cp	r12, r24
    2e4e:	d9 06       	cpc	r13, r25
    2e50:	ea 06       	cpc	r14, r26
    2e52:	fb 06       	cpc	r15, r27
    2e54:	48 f4       	brcc	.+18     	; 0x2e68 <xTaskIncrementTick+0x106>
    2e56:	80 93 f2 18 	sts	0x18F2, r24	; 0x8018f2 <xNextTaskUnblockTime>
    2e5a:	90 93 f3 18 	sts	0x18F3, r25	; 0x8018f3 <xNextTaskUnblockTime+0x1>
    2e5e:	a0 93 f4 18 	sts	0x18F4, r26	; 0x8018f4 <xNextTaskUnblockTime+0x2>
    2e62:	b0 93 f5 18 	sts	0x18F5, r27	; 0x8018f5 <xNextTaskUnblockTime+0x3>
    2e66:	28 c0       	rjmp	.+80     	; 0x2eb8 <xTaskIncrementTick+0x156>
    2e68:	8e 01       	movw	r16, r28
    2e6a:	0e 5f       	subi	r16, 0xFE	; 254
    2e6c:	1f 4f       	sbci	r17, 0xFF	; 255
    2e6e:	c8 01       	movw	r24, r16
    2e70:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <uxListRemove>
    2e74:	88 8d       	ldd	r24, Y+24	; 0x18
    2e76:	99 8d       	ldd	r25, Y+25	; 0x19
    2e78:	89 2b       	or	r24, r25
    2e7a:	21 f0       	breq	.+8      	; 0x2e84 <xTaskIncrementTick+0x122>
    2e7c:	ce 01       	movw	r24, r28
    2e7e:	0e 96       	adiw	r24, 0x0e	; 14
    2e80:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <uxListRemove>
    2e84:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2e86:	90 91 fb 18 	lds	r25, 0x18FB	; 0x8018fb <uxTopReadyPriority>
    2e8a:	98 17       	cp	r25, r24
    2e8c:	10 f4       	brcc	.+4      	; 0x2e92 <xTaskIncrementTick+0x130>
    2e8e:	80 93 fb 18 	sts	0x18FB, r24	; 0x8018fb <uxTopReadyPriority>
    2e92:	a8 9e       	mul	r10, r24
    2e94:	c0 01       	movw	r24, r0
    2e96:	11 24       	eor	r1, r1
    2e98:	b8 01       	movw	r22, r16
    2e9a:	83 5c       	subi	r24, 0xC3	; 195
    2e9c:	96 4e       	sbci	r25, 0xE6	; 230
    2e9e:	0e 94 0d 0c 	call	0x181a	; 0x181a <vListInsertEnd>
    2ea2:	e0 91 69 19 	lds	r30, 0x1969	; 0x801969 <pxCurrentTCB>
    2ea6:	f0 91 6a 19 	lds	r31, 0x196A	; 0x80196a <pxCurrentTCB+0x1>
    2eaa:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2eac:	82 8d       	ldd	r24, Z+26	; 0x1a
    2eae:	98 17       	cp	r25, r24
    2eb0:	08 f4       	brcc	.+2      	; 0x2eb4 <xTaskIncrementTick+0x152>
    2eb2:	ac cf       	rjmp	.-168    	; 0x2e0c <xTaskIncrementTick+0xaa>
    2eb4:	b9 2c       	mov	r11, r9
    2eb6:	aa cf       	rjmp	.-172    	; 0x2e0c <xTaskIncrementTick+0xaa>
    2eb8:	e0 91 69 19 	lds	r30, 0x1969	; 0x801969 <pxCurrentTCB>
    2ebc:	f0 91 6a 19 	lds	r31, 0x196A	; 0x80196a <pxCurrentTCB+0x1>
    2ec0:	e2 8d       	ldd	r30, Z+26	; 0x1a
    2ec2:	8b e0       	ldi	r24, 0x0B	; 11
    2ec4:	e8 9f       	mul	r30, r24
    2ec6:	f0 01       	movw	r30, r0
    2ec8:	11 24       	eor	r1, r1
    2eca:	e3 5c       	subi	r30, 0xC3	; 195
    2ecc:	f6 4e       	sbci	r31, 0xE6	; 230
    2ece:	80 81       	ld	r24, Z
    2ed0:	82 30       	cpi	r24, 0x02	; 2
    2ed2:	48 f0       	brcs	.+18     	; 0x2ee6 <xTaskIncrementTick+0x184>
    2ed4:	bb 24       	eor	r11, r11
    2ed6:	b3 94       	inc	r11
    2ed8:	06 c0       	rjmp	.+12     	; 0x2ee6 <xTaskIncrementTick+0x184>
    2eda:	80 91 f9 18 	lds	r24, 0x18F9	; 0x8018f9 <uxPendedTicks>
    2ede:	8f 5f       	subi	r24, 0xFF	; 255
    2ee0:	80 93 f9 18 	sts	0x18F9, r24	; 0x8018f9 <uxPendedTicks>
    2ee4:	b1 2c       	mov	r11, r1
    2ee6:	80 91 f8 18 	lds	r24, 0x18F8	; 0x8018f8 <xYieldPending>
    2eea:	88 23       	and	r24, r24
    2eec:	11 f0       	breq	.+4      	; 0x2ef2 <xTaskIncrementTick+0x190>
    2eee:	bb 24       	eor	r11, r11
    2ef0:	b3 94       	inc	r11
    2ef2:	8b 2d       	mov	r24, r11
    2ef4:	df 91       	pop	r29
    2ef6:	cf 91       	pop	r28
    2ef8:	1f 91       	pop	r17
    2efa:	0f 91       	pop	r16
    2efc:	ff 90       	pop	r15
    2efe:	ef 90       	pop	r14
    2f00:	df 90       	pop	r13
    2f02:	cf 90       	pop	r12
    2f04:	bf 90       	pop	r11
    2f06:	af 90       	pop	r10
    2f08:	9f 90       	pop	r9
    2f0a:	08 95       	ret

00002f0c <xTaskResumeAll>:
    2f0c:	cf 92       	push	r12
    2f0e:	df 92       	push	r13
    2f10:	ef 92       	push	r14
    2f12:	ff 92       	push	r15
    2f14:	0f 93       	push	r16
    2f16:	1f 93       	push	r17
    2f18:	cf 93       	push	r28
    2f1a:	df 93       	push	r29
    2f1c:	0f b6       	in	r0, 0x3f	; 63
    2f1e:	f8 94       	cli
    2f20:	0f 92       	push	r0
    2f22:	80 91 ef 18 	lds	r24, 0x18EF	; 0x8018ef <uxSchedulerSuspended>
    2f26:	81 50       	subi	r24, 0x01	; 1
    2f28:	80 93 ef 18 	sts	0x18EF, r24	; 0x8018ef <uxSchedulerSuspended>
    2f2c:	80 91 ef 18 	lds	r24, 0x18EF	; 0x8018ef <uxSchedulerSuspended>
    2f30:	81 11       	cpse	r24, r1
    2f32:	5a c0       	rjmp	.+180    	; 0x2fe8 <xTaskResumeAll+0xdc>
    2f34:	80 91 00 19 	lds	r24, 0x1900	; 0x801900 <uxCurrentNumberOfTasks>
    2f38:	81 11       	cpse	r24, r1
    2f3a:	2c c0       	rjmp	.+88     	; 0x2f94 <xTaskResumeAll+0x88>
    2f3c:	58 c0       	rjmp	.+176    	; 0x2fee <xTaskResumeAll+0xe2>
    2f3e:	d7 01       	movw	r26, r14
    2f40:	17 96       	adiw	r26, 0x07	; 7
    2f42:	ed 91       	ld	r30, X+
    2f44:	fc 91       	ld	r31, X
    2f46:	18 97       	sbiw	r26, 0x08	; 8
    2f48:	c0 85       	ldd	r28, Z+8	; 0x08
    2f4a:	d1 85       	ldd	r29, Z+9	; 0x09
    2f4c:	ce 01       	movw	r24, r28
    2f4e:	0e 96       	adiw	r24, 0x0e	; 14
    2f50:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <uxListRemove>
    2f54:	8e 01       	movw	r16, r28
    2f56:	0e 5f       	subi	r16, 0xFE	; 254
    2f58:	1f 4f       	sbci	r17, 0xFF	; 255
    2f5a:	c8 01       	movw	r24, r16
    2f5c:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <uxListRemove>
    2f60:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2f62:	90 91 fb 18 	lds	r25, 0x18FB	; 0x8018fb <uxTopReadyPriority>
    2f66:	98 17       	cp	r25, r24
    2f68:	10 f4       	brcc	.+4      	; 0x2f6e <xTaskResumeAll+0x62>
    2f6a:	80 93 fb 18 	sts	0x18FB, r24	; 0x8018fb <uxTopReadyPriority>
    2f6e:	d8 9e       	mul	r13, r24
    2f70:	c0 01       	movw	r24, r0
    2f72:	11 24       	eor	r1, r1
    2f74:	b8 01       	movw	r22, r16
    2f76:	83 5c       	subi	r24, 0xC3	; 195
    2f78:	96 4e       	sbci	r25, 0xE6	; 230
    2f7a:	0e 94 0d 0c 	call	0x181a	; 0x181a <vListInsertEnd>
    2f7e:	e0 91 69 19 	lds	r30, 0x1969	; 0x801969 <pxCurrentTCB>
    2f82:	f0 91 6a 19 	lds	r31, 0x196A	; 0x80196a <pxCurrentTCB+0x1>
    2f86:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2f88:	82 8d       	ldd	r24, Z+26	; 0x1a
    2f8a:	98 17       	cp	r25, r24
    2f8c:	88 f0       	brcs	.+34     	; 0x2fb0 <xTaskResumeAll+0xa4>
    2f8e:	c0 92 f8 18 	sts	0x18F8, r12	; 0x8018f8 <xYieldPending>
    2f92:	0e c0       	rjmp	.+28     	; 0x2fb0 <xTaskResumeAll+0xa4>
    2f94:	c0 e0       	ldi	r28, 0x00	; 0
    2f96:	d0 e0       	ldi	r29, 0x00	; 0
    2f98:	0f 2e       	mov	r0, r31
    2f9a:	f8 e1       	ldi	r31, 0x18	; 24
    2f9c:	ef 2e       	mov	r14, r31
    2f9e:	f9 e1       	ldi	r31, 0x19	; 25
    2fa0:	ff 2e       	mov	r15, r31
    2fa2:	f0 2d       	mov	r31, r0
    2fa4:	0f 2e       	mov	r0, r31
    2fa6:	fb e0       	ldi	r31, 0x0B	; 11
    2fa8:	df 2e       	mov	r13, r31
    2faa:	f0 2d       	mov	r31, r0
    2fac:	cc 24       	eor	r12, r12
    2fae:	c3 94       	inc	r12
    2fb0:	f7 01       	movw	r30, r14
    2fb2:	80 81       	ld	r24, Z
    2fb4:	81 11       	cpse	r24, r1
    2fb6:	c3 cf       	rjmp	.-122    	; 0x2f3e <xTaskResumeAll+0x32>
    2fb8:	cd 2b       	or	r28, r29
    2fba:	09 f0       	breq	.+2      	; 0x2fbe <xTaskResumeAll+0xb2>
    2fbc:	c2 dc       	rcall	.-1660   	; 0x2942 <prvResetNextTaskUnblockTime>
    2fbe:	c0 91 f9 18 	lds	r28, 0x18F9	; 0x8018f9 <uxPendedTicks>
    2fc2:	cc 23       	and	r28, r28
    2fc4:	49 f0       	breq	.+18     	; 0x2fd8 <xTaskResumeAll+0xcc>
    2fc6:	d1 e0       	ldi	r29, 0x01	; 1
    2fc8:	cc de       	rcall	.-616    	; 0x2d62 <xTaskIncrementTick>
    2fca:	81 11       	cpse	r24, r1
    2fcc:	d0 93 f8 18 	sts	0x18F8, r29	; 0x8018f8 <xYieldPending>
    2fd0:	c1 50       	subi	r28, 0x01	; 1
    2fd2:	d1 f7       	brne	.-12     	; 0x2fc8 <xTaskResumeAll+0xbc>
    2fd4:	10 92 f9 18 	sts	0x18F9, r1	; 0x8018f9 <uxPendedTicks>
    2fd8:	80 91 f8 18 	lds	r24, 0x18F8	; 0x8018f8 <xYieldPending>
    2fdc:	88 23       	and	r24, r24
    2fde:	31 f0       	breq	.+12     	; 0x2fec <xTaskResumeAll+0xe0>
    2fe0:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <vPortYield>
    2fe4:	81 e0       	ldi	r24, 0x01	; 1
    2fe6:	03 c0       	rjmp	.+6      	; 0x2fee <xTaskResumeAll+0xe2>
    2fe8:	80 e0       	ldi	r24, 0x00	; 0
    2fea:	01 c0       	rjmp	.+2      	; 0x2fee <xTaskResumeAll+0xe2>
    2fec:	80 e0       	ldi	r24, 0x00	; 0
    2fee:	0f 90       	pop	r0
    2ff0:	0f be       	out	0x3f, r0	; 63
    2ff2:	df 91       	pop	r29
    2ff4:	cf 91       	pop	r28
    2ff6:	1f 91       	pop	r17
    2ff8:	0f 91       	pop	r16
    2ffa:	ff 90       	pop	r15
    2ffc:	ef 90       	pop	r14
    2ffe:	df 90       	pop	r13
    3000:	cf 90       	pop	r12
    3002:	08 95       	ret

00003004 <vTaskDelay>:
    3004:	cf 92       	push	r12
    3006:	df 92       	push	r13
    3008:	ef 92       	push	r14
    300a:	ff 92       	push	r15
    300c:	6b 01       	movw	r12, r22
    300e:	7c 01       	movw	r14, r24
    3010:	67 2b       	or	r22, r23
    3012:	68 2b       	or	r22, r24
    3014:	69 2b       	or	r22, r25
    3016:	41 f0       	breq	.+16     	; 0x3028 <vTaskDelay+0x24>
    3018:	90 de       	rcall	.-736    	; 0x2d3a <vTaskSuspendAll>
    301a:	40 e0       	ldi	r20, 0x00	; 0
    301c:	c7 01       	movw	r24, r14
    301e:	b6 01       	movw	r22, r12
    3020:	ba dc       	rcall	.-1676   	; 0x2996 <prvAddCurrentTaskToDelayedList>
    3022:	74 df       	rcall	.-280    	; 0x2f0c <xTaskResumeAll>
    3024:	81 11       	cpse	r24, r1
    3026:	02 c0       	rjmp	.+4      	; 0x302c <vTaskDelay+0x28>
    3028:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <vPortYield>
    302c:	ff 90       	pop	r15
    302e:	ef 90       	pop	r14
    3030:	df 90       	pop	r13
    3032:	cf 90       	pop	r12
    3034:	08 95       	ret

00003036 <vTaskSwitchContext>:
    3036:	80 91 ef 18 	lds	r24, 0x18EF	; 0x8018ef <uxSchedulerSuspended>
    303a:	88 23       	and	r24, r24
    303c:	21 f0       	breq	.+8      	; 0x3046 <vTaskSwitchContext+0x10>
    303e:	81 e0       	ldi	r24, 0x01	; 1
    3040:	80 93 f8 18 	sts	0x18F8, r24	; 0x8018f8 <xYieldPending>
    3044:	08 95       	ret
    3046:	10 92 f8 18 	sts	0x18F8, r1	; 0x8018f8 <xYieldPending>
    304a:	e0 91 69 19 	lds	r30, 0x1969	; 0x801969 <pxCurrentTCB>
    304e:	f0 91 6a 19 	lds	r31, 0x196A	; 0x80196a <pxCurrentTCB+0x1>
    3052:	81 a5       	ldd	r24, Z+41	; 0x29
    3054:	0e 94 4f 09 	call	0x129e	; 0x129e <task_switch_out>
    3058:	a0 91 69 19 	lds	r26, 0x1969	; 0x801969 <pxCurrentTCB>
    305c:	b0 91 6a 19 	lds	r27, 0x196A	; 0x80196a <pxCurrentTCB+0x1>
    3060:	e0 91 69 19 	lds	r30, 0x1969	; 0x801969 <pxCurrentTCB>
    3064:	f0 91 6a 19 	lds	r31, 0x196A	; 0x80196a <pxCurrentTCB+0x1>
    3068:	2d 91       	ld	r18, X+
    306a:	3c 91       	ld	r19, X
    306c:	83 8d       	ldd	r24, Z+27	; 0x1b
    306e:	94 8d       	ldd	r25, Z+28	; 0x1c
    3070:	82 17       	cp	r24, r18
    3072:	93 07       	cpc	r25, r19
    3074:	58 f0       	brcs	.+22     	; 0x308c <vTaskSwitchContext+0x56>
    3076:	60 91 69 19 	lds	r22, 0x1969	; 0x801969 <pxCurrentTCB>
    307a:	70 91 6a 19 	lds	r23, 0x196A	; 0x80196a <pxCurrentTCB+0x1>
    307e:	80 91 69 19 	lds	r24, 0x1969	; 0x801969 <pxCurrentTCB>
    3082:	90 91 6a 19 	lds	r25, 0x196A	; 0x80196a <pxCurrentTCB+0x1>
    3086:	63 5e       	subi	r22, 0xE3	; 227
    3088:	7f 4f       	sbci	r23, 0xFF	; 255
    308a:	20 d6       	rcall	.+3136   	; 0x3ccc <vApplicationStackOverflowHook>
    308c:	80 91 fb 18 	lds	r24, 0x18FB	; 0x8018fb <uxTopReadyPriority>
    3090:	28 2f       	mov	r18, r24
    3092:	30 e0       	ldi	r19, 0x00	; 0
    3094:	9b e0       	ldi	r25, 0x0B	; 11
    3096:	89 9f       	mul	r24, r25
    3098:	f0 01       	movw	r30, r0
    309a:	11 24       	eor	r1, r1
    309c:	e3 5c       	subi	r30, 0xC3	; 195
    309e:	f6 4e       	sbci	r31, 0xE6	; 230
    30a0:	90 81       	ld	r25, Z
    30a2:	91 11       	cpse	r25, r1
    30a4:	0e c0       	rjmp	.+28     	; 0x30c2 <vTaskSwitchContext+0x8c>
    30a6:	4b e0       	ldi	r20, 0x0B	; 11
    30a8:	81 50       	subi	r24, 0x01	; 1
    30aa:	28 2f       	mov	r18, r24
    30ac:	30 e0       	ldi	r19, 0x00	; 0
    30ae:	42 9f       	mul	r20, r18
    30b0:	f0 01       	movw	r30, r0
    30b2:	43 9f       	mul	r20, r19
    30b4:	f0 0d       	add	r31, r0
    30b6:	11 24       	eor	r1, r1
    30b8:	e3 5c       	subi	r30, 0xC3	; 195
    30ba:	f6 4e       	sbci	r31, 0xE6	; 230
    30bc:	90 81       	ld	r25, Z
    30be:	99 23       	and	r25, r25
    30c0:	99 f3       	breq	.-26     	; 0x30a8 <vTaskSwitchContext+0x72>
    30c2:	9b e0       	ldi	r25, 0x0B	; 11
    30c4:	92 9f       	mul	r25, r18
    30c6:	a0 01       	movw	r20, r0
    30c8:	93 9f       	mul	r25, r19
    30ca:	50 0d       	add	r21, r0
    30cc:	11 24       	eor	r1, r1
    30ce:	da 01       	movw	r26, r20
    30d0:	a3 5c       	subi	r26, 0xC3	; 195
    30d2:	b6 4e       	sbci	r27, 0xE6	; 230
    30d4:	11 96       	adiw	r26, 0x01	; 1
    30d6:	ed 91       	ld	r30, X+
    30d8:	fc 91       	ld	r31, X
    30da:	12 97       	sbiw	r26, 0x02	; 2
    30dc:	04 80       	ldd	r0, Z+4	; 0x04
    30de:	f5 81       	ldd	r31, Z+5	; 0x05
    30e0:	e0 2d       	mov	r30, r0
    30e2:	12 96       	adiw	r26, 0x02	; 2
    30e4:	fc 93       	st	X, r31
    30e6:	ee 93       	st	-X, r30
    30e8:	11 97       	sbiw	r26, 0x01	; 1
    30ea:	40 5c       	subi	r20, 0xC0	; 192
    30ec:	56 4e       	sbci	r21, 0xE6	; 230
    30ee:	e4 17       	cp	r30, r20
    30f0:	f5 07       	cpc	r31, r21
    30f2:	29 f4       	brne	.+10     	; 0x30fe <vTaskSwitchContext+0xc8>
    30f4:	44 81       	ldd	r20, Z+4	; 0x04
    30f6:	55 81       	ldd	r21, Z+5	; 0x05
    30f8:	fd 01       	movw	r30, r26
    30fa:	52 83       	std	Z+2, r21	; 0x02
    30fc:	41 83       	std	Z+1, r20	; 0x01
    30fe:	9b e0       	ldi	r25, 0x0B	; 11
    3100:	92 9f       	mul	r25, r18
    3102:	f0 01       	movw	r30, r0
    3104:	93 9f       	mul	r25, r19
    3106:	f0 0d       	add	r31, r0
    3108:	11 24       	eor	r1, r1
    310a:	e3 5c       	subi	r30, 0xC3	; 195
    310c:	f6 4e       	sbci	r31, 0xE6	; 230
    310e:	01 80       	ldd	r0, Z+1	; 0x01
    3110:	f2 81       	ldd	r31, Z+2	; 0x02
    3112:	e0 2d       	mov	r30, r0
    3114:	20 85       	ldd	r18, Z+8	; 0x08
    3116:	31 85       	ldd	r19, Z+9	; 0x09
    3118:	30 93 6a 19 	sts	0x196A, r19	; 0x80196a <pxCurrentTCB+0x1>
    311c:	20 93 69 19 	sts	0x1969, r18	; 0x801969 <pxCurrentTCB>
    3120:	80 93 fb 18 	sts	0x18FB, r24	; 0x8018fb <uxTopReadyPriority>
    3124:	e0 91 69 19 	lds	r30, 0x1969	; 0x801969 <pxCurrentTCB>
    3128:	f0 91 6a 19 	lds	r31, 0x196A	; 0x80196a <pxCurrentTCB+0x1>
    312c:	81 a5       	ldd	r24, Z+41	; 0x29
    312e:	0c 94 45 09 	jmp	0x128a	; 0x128a <task_switch_in>
    3132:	08 95       	ret

00003134 <vTaskPlaceOnEventList>:
    3134:	cf 92       	push	r12
    3136:	df 92       	push	r13
    3138:	ef 92       	push	r14
    313a:	ff 92       	push	r15
    313c:	6a 01       	movw	r12, r20
    313e:	7b 01       	movw	r14, r22
    3140:	60 91 69 19 	lds	r22, 0x1969	; 0x801969 <pxCurrentTCB>
    3144:	70 91 6a 19 	lds	r23, 0x196A	; 0x80196a <pxCurrentTCB+0x1>
    3148:	62 5f       	subi	r22, 0xF2	; 242
    314a:	7f 4f       	sbci	r23, 0xFF	; 255
    314c:	0e 94 2e 0c 	call	0x185c	; 0x185c <vListInsert>
    3150:	41 e0       	ldi	r20, 0x01	; 1
    3152:	c7 01       	movw	r24, r14
    3154:	b6 01       	movw	r22, r12
    3156:	1f dc       	rcall	.-1986   	; 0x2996 <prvAddCurrentTaskToDelayedList>
    3158:	ff 90       	pop	r15
    315a:	ef 90       	pop	r14
    315c:	df 90       	pop	r13
    315e:	cf 90       	pop	r12
    3160:	08 95       	ret

00003162 <vTaskPlaceOnUnorderedEventList>:
    3162:	cf 92       	push	r12
    3164:	df 92       	push	r13
    3166:	ef 92       	push	r14
    3168:	ff 92       	push	r15
    316a:	0f 93       	push	r16
    316c:	1f 93       	push	r17
    316e:	68 01       	movw	r12, r16
    3170:	79 01       	movw	r14, r18
    3172:	e0 91 69 19 	lds	r30, 0x1969	; 0x801969 <pxCurrentTCB>
    3176:	f0 91 6a 19 	lds	r31, 0x196A	; 0x80196a <pxCurrentTCB+0x1>
    317a:	70 68       	ori	r23, 0x80	; 128
    317c:	46 87       	std	Z+14, r20	; 0x0e
    317e:	57 87       	std	Z+15, r21	; 0x0f
    3180:	60 8b       	std	Z+16, r22	; 0x10
    3182:	71 8b       	std	Z+17, r23	; 0x11
    3184:	60 91 69 19 	lds	r22, 0x1969	; 0x801969 <pxCurrentTCB>
    3188:	70 91 6a 19 	lds	r23, 0x196A	; 0x80196a <pxCurrentTCB+0x1>
    318c:	62 5f       	subi	r22, 0xF2	; 242
    318e:	7f 4f       	sbci	r23, 0xFF	; 255
    3190:	0e 94 0d 0c 	call	0x181a	; 0x181a <vListInsertEnd>
    3194:	41 e0       	ldi	r20, 0x01	; 1
    3196:	c7 01       	movw	r24, r14
    3198:	b6 01       	movw	r22, r12
    319a:	fd db       	rcall	.-2054   	; 0x2996 <prvAddCurrentTaskToDelayedList>
    319c:	1f 91       	pop	r17
    319e:	0f 91       	pop	r16
    31a0:	ff 90       	pop	r15
    31a2:	ef 90       	pop	r14
    31a4:	df 90       	pop	r13
    31a6:	cf 90       	pop	r12
    31a8:	08 95       	ret

000031aa <vTaskPlaceOnEventListRestricted>:
    31aa:	cf 92       	push	r12
    31ac:	df 92       	push	r13
    31ae:	ef 92       	push	r14
    31b0:	ff 92       	push	r15
    31b2:	cf 93       	push	r28
    31b4:	6a 01       	movw	r12, r20
    31b6:	7b 01       	movw	r14, r22
    31b8:	c2 2f       	mov	r28, r18
    31ba:	60 91 69 19 	lds	r22, 0x1969	; 0x801969 <pxCurrentTCB>
    31be:	70 91 6a 19 	lds	r23, 0x196A	; 0x80196a <pxCurrentTCB+0x1>
    31c2:	62 5f       	subi	r22, 0xF2	; 242
    31c4:	7f 4f       	sbci	r23, 0xFF	; 255
    31c6:	0e 94 0d 0c 	call	0x181a	; 0x181a <vListInsertEnd>
    31ca:	cc 23       	and	r28, r28
    31cc:	21 f0       	breq	.+8      	; 0x31d6 <vTaskPlaceOnEventListRestricted+0x2c>
    31ce:	cc 24       	eor	r12, r12
    31d0:	ca 94       	dec	r12
    31d2:	dc 2c       	mov	r13, r12
    31d4:	76 01       	movw	r14, r12
    31d6:	4c 2f       	mov	r20, r28
    31d8:	c7 01       	movw	r24, r14
    31da:	b6 01       	movw	r22, r12
    31dc:	dc db       	rcall	.-2120   	; 0x2996 <prvAddCurrentTaskToDelayedList>
    31de:	cf 91       	pop	r28
    31e0:	ff 90       	pop	r15
    31e2:	ef 90       	pop	r14
    31e4:	df 90       	pop	r13
    31e6:	cf 90       	pop	r12
    31e8:	08 95       	ret

000031ea <xTaskRemoveFromEventList>:
    31ea:	0f 93       	push	r16
    31ec:	1f 93       	push	r17
    31ee:	cf 93       	push	r28
    31f0:	df 93       	push	r29
    31f2:	dc 01       	movw	r26, r24
    31f4:	17 96       	adiw	r26, 0x07	; 7
    31f6:	ed 91       	ld	r30, X+
    31f8:	fc 91       	ld	r31, X
    31fa:	18 97       	sbiw	r26, 0x08	; 8
    31fc:	c0 85       	ldd	r28, Z+8	; 0x08
    31fe:	d1 85       	ldd	r29, Z+9	; 0x09
    3200:	8e 01       	movw	r16, r28
    3202:	02 5f       	subi	r16, 0xF2	; 242
    3204:	1f 4f       	sbci	r17, 0xFF	; 255
    3206:	c8 01       	movw	r24, r16
    3208:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <uxListRemove>
    320c:	80 91 ef 18 	lds	r24, 0x18EF	; 0x8018ef <uxSchedulerSuspended>
    3210:	81 11       	cpse	r24, r1
    3212:	16 c0       	rjmp	.+44     	; 0x3240 <xTaskRemoveFromEventList+0x56>
    3214:	0c 50       	subi	r16, 0x0C	; 12
    3216:	11 09       	sbc	r17, r1
    3218:	c8 01       	movw	r24, r16
    321a:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <uxListRemove>
    321e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3220:	90 91 fb 18 	lds	r25, 0x18FB	; 0x8018fb <uxTopReadyPriority>
    3224:	98 17       	cp	r25, r24
    3226:	10 f4       	brcc	.+4      	; 0x322c <xTaskRemoveFromEventList+0x42>
    3228:	80 93 fb 18 	sts	0x18FB, r24	; 0x8018fb <uxTopReadyPriority>
    322c:	bb e0       	ldi	r27, 0x0B	; 11
    322e:	8b 9f       	mul	r24, r27
    3230:	c0 01       	movw	r24, r0
    3232:	11 24       	eor	r1, r1
    3234:	b8 01       	movw	r22, r16
    3236:	83 5c       	subi	r24, 0xC3	; 195
    3238:	96 4e       	sbci	r25, 0xE6	; 230
    323a:	0e 94 0d 0c 	call	0x181a	; 0x181a <vListInsertEnd>
    323e:	05 c0       	rjmp	.+10     	; 0x324a <xTaskRemoveFromEventList+0x60>
    3240:	b8 01       	movw	r22, r16
    3242:	88 e1       	ldi	r24, 0x18	; 24
    3244:	99 e1       	ldi	r25, 0x19	; 25
    3246:	0e 94 0d 0c 	call	0x181a	; 0x181a <vListInsertEnd>
    324a:	e0 91 69 19 	lds	r30, 0x1969	; 0x801969 <pxCurrentTCB>
    324e:	f0 91 6a 19 	lds	r31, 0x196A	; 0x80196a <pxCurrentTCB+0x1>
    3252:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3254:	82 8d       	ldd	r24, Z+26	; 0x1a
    3256:	89 17       	cp	r24, r25
    3258:	20 f4       	brcc	.+8      	; 0x3262 <xTaskRemoveFromEventList+0x78>
    325a:	81 e0       	ldi	r24, 0x01	; 1
    325c:	80 93 f8 18 	sts	0x18F8, r24	; 0x8018f8 <xYieldPending>
    3260:	01 c0       	rjmp	.+2      	; 0x3264 <xTaskRemoveFromEventList+0x7a>
    3262:	80 e0       	ldi	r24, 0x00	; 0
    3264:	df 91       	pop	r29
    3266:	cf 91       	pop	r28
    3268:	1f 91       	pop	r17
    326a:	0f 91       	pop	r16
    326c:	08 95       	ret

0000326e <vTaskRemoveFromUnorderedEventList>:
    326e:	0f 93       	push	r16
    3270:	1f 93       	push	r17
    3272:	cf 93       	push	r28
    3274:	df 93       	push	r29
    3276:	70 68       	ori	r23, 0x80	; 128
    3278:	fc 01       	movw	r30, r24
    327a:	40 83       	st	Z, r20
    327c:	51 83       	std	Z+1, r21	; 0x01
    327e:	62 83       	std	Z+2, r22	; 0x02
    3280:	73 83       	std	Z+3, r23	; 0x03
    3282:	c0 85       	ldd	r28, Z+8	; 0x08
    3284:	d1 85       	ldd	r29, Z+9	; 0x09
    3286:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <uxListRemove>
    328a:	8e 01       	movw	r16, r28
    328c:	0e 5f       	subi	r16, 0xFE	; 254
    328e:	1f 4f       	sbci	r17, 0xFF	; 255
    3290:	c8 01       	movw	r24, r16
    3292:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <uxListRemove>
    3296:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3298:	90 91 fb 18 	lds	r25, 0x18FB	; 0x8018fb <uxTopReadyPriority>
    329c:	98 17       	cp	r25, r24
    329e:	10 f4       	brcc	.+4      	; 0x32a4 <vTaskRemoveFromUnorderedEventList+0x36>
    32a0:	80 93 fb 18 	sts	0x18FB, r24	; 0x8018fb <uxTopReadyPriority>
    32a4:	fb e0       	ldi	r31, 0x0B	; 11
    32a6:	8f 9f       	mul	r24, r31
    32a8:	c0 01       	movw	r24, r0
    32aa:	11 24       	eor	r1, r1
    32ac:	b8 01       	movw	r22, r16
    32ae:	83 5c       	subi	r24, 0xC3	; 195
    32b0:	96 4e       	sbci	r25, 0xE6	; 230
    32b2:	0e 94 0d 0c 	call	0x181a	; 0x181a <vListInsertEnd>
    32b6:	e0 91 69 19 	lds	r30, 0x1969	; 0x801969 <pxCurrentTCB>
    32ba:	f0 91 6a 19 	lds	r31, 0x196A	; 0x80196a <pxCurrentTCB+0x1>
    32be:	9a 8d       	ldd	r25, Y+26	; 0x1a
    32c0:	82 8d       	ldd	r24, Z+26	; 0x1a
    32c2:	89 17       	cp	r24, r25
    32c4:	18 f4       	brcc	.+6      	; 0x32cc <vTaskRemoveFromUnorderedEventList+0x5e>
    32c6:	81 e0       	ldi	r24, 0x01	; 1
    32c8:	80 93 f8 18 	sts	0x18F8, r24	; 0x8018f8 <xYieldPending>
    32cc:	df 91       	pop	r29
    32ce:	cf 91       	pop	r28
    32d0:	1f 91       	pop	r17
    32d2:	0f 91       	pop	r16
    32d4:	08 95       	ret

000032d6 <vTaskSetTimeOutState>:
    32d6:	0f b6       	in	r0, 0x3f	; 63
    32d8:	f8 94       	cli
    32da:	0f 92       	push	r0
    32dc:	20 91 f7 18 	lds	r18, 0x18F7	; 0x8018f7 <xNumOfOverflows>
    32e0:	fc 01       	movw	r30, r24
    32e2:	20 83       	st	Z, r18
    32e4:	40 91 fc 18 	lds	r20, 0x18FC	; 0x8018fc <xTickCount>
    32e8:	50 91 fd 18 	lds	r21, 0x18FD	; 0x8018fd <xTickCount+0x1>
    32ec:	60 91 fe 18 	lds	r22, 0x18FE	; 0x8018fe <xTickCount+0x2>
    32f0:	70 91 ff 18 	lds	r23, 0x18FF	; 0x8018ff <xTickCount+0x3>
    32f4:	41 83       	std	Z+1, r20	; 0x01
    32f6:	52 83       	std	Z+2, r21	; 0x02
    32f8:	63 83       	std	Z+3, r22	; 0x03
    32fa:	74 83       	std	Z+4, r23	; 0x04
    32fc:	0f 90       	pop	r0
    32fe:	0f be       	out	0x3f, r0	; 63
    3300:	08 95       	ret

00003302 <vTaskInternalSetTimeOutState>:
    3302:	20 91 f7 18 	lds	r18, 0x18F7	; 0x8018f7 <xNumOfOverflows>
    3306:	fc 01       	movw	r30, r24
    3308:	20 83       	st	Z, r18
    330a:	40 91 fc 18 	lds	r20, 0x18FC	; 0x8018fc <xTickCount>
    330e:	50 91 fd 18 	lds	r21, 0x18FD	; 0x8018fd <xTickCount+0x1>
    3312:	60 91 fe 18 	lds	r22, 0x18FE	; 0x8018fe <xTickCount+0x2>
    3316:	70 91 ff 18 	lds	r23, 0x18FF	; 0x8018ff <xTickCount+0x3>
    331a:	41 83       	std	Z+1, r20	; 0x01
    331c:	52 83       	std	Z+2, r21	; 0x02
    331e:	63 83       	std	Z+3, r22	; 0x03
    3320:	74 83       	std	Z+4, r23	; 0x04
    3322:	08 95       	ret

00003324 <xTaskCheckForTimeOut>:
    3324:	cf 92       	push	r12
    3326:	df 92       	push	r13
    3328:	ef 92       	push	r14
    332a:	ff 92       	push	r15
    332c:	0f 93       	push	r16
    332e:	1f 93       	push	r17
    3330:	cf 93       	push	r28
    3332:	df 93       	push	r29
    3334:	fb 01       	movw	r30, r22
    3336:	0f b6       	in	r0, 0x3f	; 63
    3338:	f8 94       	cli
    333a:	0f 92       	push	r0
    333c:	40 91 fc 18 	lds	r20, 0x18FC	; 0x8018fc <xTickCount>
    3340:	50 91 fd 18 	lds	r21, 0x18FD	; 0x8018fd <xTickCount+0x1>
    3344:	60 91 fe 18 	lds	r22, 0x18FE	; 0x8018fe <xTickCount+0x2>
    3348:	70 91 ff 18 	lds	r23, 0x18FF	; 0x8018ff <xTickCount+0x3>
    334c:	00 81       	ld	r16, Z
    334e:	11 81       	ldd	r17, Z+1	; 0x01
    3350:	22 81       	ldd	r18, Z+2	; 0x02
    3352:	33 81       	ldd	r19, Z+3	; 0x03
    3354:	0f 3f       	cpi	r16, 0xFF	; 255
    3356:	af ef       	ldi	r26, 0xFF	; 255
    3358:	1a 07       	cpc	r17, r26
    335a:	2a 07       	cpc	r18, r26
    335c:	3a 07       	cpc	r19, r26
    335e:	49 f1       	breq	.+82     	; 0x33b2 <xTaskCheckForTimeOut+0x8e>
    3360:	ec 01       	movw	r28, r24
    3362:	c9 80       	ldd	r12, Y+1	; 0x01
    3364:	da 80       	ldd	r13, Y+2	; 0x02
    3366:	eb 80       	ldd	r14, Y+3	; 0x03
    3368:	fc 80       	ldd	r15, Y+4	; 0x04
    336a:	a0 91 f7 18 	lds	r26, 0x18F7	; 0x8018f7 <xNumOfOverflows>
    336e:	b8 81       	ld	r27, Y
    3370:	ba 17       	cp	r27, r26
    3372:	29 f0       	breq	.+10     	; 0x337e <xTaskCheckForTimeOut+0x5a>
    3374:	4c 15       	cp	r20, r12
    3376:	5d 05       	cpc	r21, r13
    3378:	6e 05       	cpc	r22, r14
    337a:	7f 05       	cpc	r23, r15
    337c:	e0 f4       	brcc	.+56     	; 0x33b6 <xTaskCheckForTimeOut+0x92>
    337e:	4c 19       	sub	r20, r12
    3380:	5d 09       	sbc	r21, r13
    3382:	6e 09       	sbc	r22, r14
    3384:	7f 09       	sbc	r23, r15
    3386:	40 17       	cp	r20, r16
    3388:	51 07       	cpc	r21, r17
    338a:	62 07       	cpc	r22, r18
    338c:	73 07       	cpc	r23, r19
    338e:	58 f4       	brcc	.+22     	; 0x33a6 <xTaskCheckForTimeOut+0x82>
    3390:	04 1b       	sub	r16, r20
    3392:	15 0b       	sbc	r17, r21
    3394:	26 0b       	sbc	r18, r22
    3396:	37 0b       	sbc	r19, r23
    3398:	00 83       	st	Z, r16
    339a:	11 83       	std	Z+1, r17	; 0x01
    339c:	22 83       	std	Z+2, r18	; 0x02
    339e:	33 83       	std	Z+3, r19	; 0x03
    33a0:	b0 df       	rcall	.-160    	; 0x3302 <vTaskInternalSetTimeOutState>
    33a2:	80 e0       	ldi	r24, 0x00	; 0
    33a4:	09 c0       	rjmp	.+18     	; 0x33b8 <xTaskCheckForTimeOut+0x94>
    33a6:	10 82       	st	Z, r1
    33a8:	11 82       	std	Z+1, r1	; 0x01
    33aa:	12 82       	std	Z+2, r1	; 0x02
    33ac:	13 82       	std	Z+3, r1	; 0x03
    33ae:	81 e0       	ldi	r24, 0x01	; 1
    33b0:	03 c0       	rjmp	.+6      	; 0x33b8 <xTaskCheckForTimeOut+0x94>
    33b2:	80 e0       	ldi	r24, 0x00	; 0
    33b4:	01 c0       	rjmp	.+2      	; 0x33b8 <xTaskCheckForTimeOut+0x94>
    33b6:	81 e0       	ldi	r24, 0x01	; 1
    33b8:	0f 90       	pop	r0
    33ba:	0f be       	out	0x3f, r0	; 63
    33bc:	df 91       	pop	r29
    33be:	cf 91       	pop	r28
    33c0:	1f 91       	pop	r17
    33c2:	0f 91       	pop	r16
    33c4:	ff 90       	pop	r15
    33c6:	ef 90       	pop	r14
    33c8:	df 90       	pop	r13
    33ca:	cf 90       	pop	r12
    33cc:	08 95       	ret

000033ce <vTaskMissedYield>:
    33ce:	81 e0       	ldi	r24, 0x01	; 1
    33d0:	80 93 f8 18 	sts	0x18F8, r24	; 0x8018f8 <xYieldPending>
    33d4:	08 95       	ret

000033d6 <xTaskGetCurrentTaskHandle>:
    33d6:	80 91 69 19 	lds	r24, 0x1969	; 0x801969 <pxCurrentTCB>
    33da:	90 91 6a 19 	lds	r25, 0x196A	; 0x80196a <pxCurrentTCB+0x1>
    33de:	08 95       	ret

000033e0 <xTaskGetSchedulerState>:
    33e0:	80 91 fa 18 	lds	r24, 0x18FA	; 0x8018fa <xSchedulerRunning>
    33e4:	88 23       	and	r24, r24
    33e6:	31 f0       	breq	.+12     	; 0x33f4 <xTaskGetSchedulerState+0x14>
    33e8:	80 91 ef 18 	lds	r24, 0x18EF	; 0x8018ef <uxSchedulerSuspended>
    33ec:	88 23       	and	r24, r24
    33ee:	21 f0       	breq	.+8      	; 0x33f8 <xTaskGetSchedulerState+0x18>
    33f0:	80 e0       	ldi	r24, 0x00	; 0
    33f2:	08 95       	ret
    33f4:	81 e0       	ldi	r24, 0x01	; 1
    33f6:	08 95       	ret
    33f8:	82 e0       	ldi	r24, 0x02	; 2
    33fa:	08 95       	ret

000033fc <xTaskPriorityInherit>:
    33fc:	0f 93       	push	r16
    33fe:	1f 93       	push	r17
    3400:	cf 93       	push	r28
    3402:	df 93       	push	r29
    3404:	fc 01       	movw	r30, r24
    3406:	89 2b       	or	r24, r25
    3408:	09 f4       	brne	.+2      	; 0x340c <xTaskPriorityInherit+0x10>
    340a:	60 c0       	rjmp	.+192    	; 0x34cc <xTaskPriorityInherit+0xd0>
    340c:	82 8d       	ldd	r24, Z+26	; 0x1a
    340e:	a0 91 69 19 	lds	r26, 0x1969	; 0x801969 <pxCurrentTCB>
    3412:	b0 91 6a 19 	lds	r27, 0x196A	; 0x80196a <pxCurrentTCB+0x1>
    3416:	5a 96       	adiw	r26, 0x1a	; 26
    3418:	9c 91       	ld	r25, X
    341a:	89 17       	cp	r24, r25
    341c:	08 f0       	brcs	.+2      	; 0x3420 <xTaskPriorityInherit+0x24>
    341e:	4a c0       	rjmp	.+148    	; 0x34b4 <xTaskPriorityInherit+0xb8>
    3420:	46 85       	ldd	r20, Z+14	; 0x0e
    3422:	57 85       	ldd	r21, Z+15	; 0x0f
    3424:	60 89       	ldd	r22, Z+16	; 0x10
    3426:	71 89       	ldd	r23, Z+17	; 0x11
    3428:	77 23       	and	r23, r23
    342a:	94 f0       	brlt	.+36     	; 0x3450 <xTaskPriorityInherit+0x54>
    342c:	a0 91 69 19 	lds	r26, 0x1969	; 0x801969 <pxCurrentTCB>
    3430:	b0 91 6a 19 	lds	r27, 0x196A	; 0x80196a <pxCurrentTCB+0x1>
    3434:	5a 96       	adiw	r26, 0x1a	; 26
    3436:	9c 91       	ld	r25, X
    3438:	44 e0       	ldi	r20, 0x04	; 4
    343a:	50 e0       	ldi	r21, 0x00	; 0
    343c:	60 e0       	ldi	r22, 0x00	; 0
    343e:	70 e0       	ldi	r23, 0x00	; 0
    3440:	49 1b       	sub	r20, r25
    3442:	51 09       	sbc	r21, r1
    3444:	61 09       	sbc	r22, r1
    3446:	71 09       	sbc	r23, r1
    3448:	46 87       	std	Z+14, r20	; 0x0e
    344a:	57 87       	std	Z+15, r21	; 0x0f
    344c:	60 8b       	std	Z+16, r22	; 0x10
    344e:	71 8b       	std	Z+17, r23	; 0x11
    3450:	2b e0       	ldi	r18, 0x0B	; 11
    3452:	82 9f       	mul	r24, r18
    3454:	c0 01       	movw	r24, r0
    3456:	11 24       	eor	r1, r1
    3458:	83 5c       	subi	r24, 0xC3	; 195
    345a:	96 4e       	sbci	r25, 0xE6	; 230
    345c:	24 85       	ldd	r18, Z+12	; 0x0c
    345e:	35 85       	ldd	r19, Z+13	; 0x0d
    3460:	28 17       	cp	r18, r24
    3462:	39 07       	cpc	r19, r25
    3464:	f1 f4       	brne	.+60     	; 0x34a2 <xTaskPriorityInherit+0xa6>
    3466:	8f 01       	movw	r16, r30
    3468:	ef 01       	movw	r28, r30
    346a:	22 96       	adiw	r28, 0x02	; 2
    346c:	ce 01       	movw	r24, r28
    346e:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <uxListRemove>
    3472:	e0 91 69 19 	lds	r30, 0x1969	; 0x801969 <pxCurrentTCB>
    3476:	f0 91 6a 19 	lds	r31, 0x196A	; 0x80196a <pxCurrentTCB+0x1>
    347a:	82 8d       	ldd	r24, Z+26	; 0x1a
    347c:	f8 01       	movw	r30, r16
    347e:	82 8f       	std	Z+26, r24	; 0x1a
    3480:	90 91 fb 18 	lds	r25, 0x18FB	; 0x8018fb <uxTopReadyPriority>
    3484:	98 17       	cp	r25, r24
    3486:	10 f4       	brcc	.+4      	; 0x348c <xTaskPriorityInherit+0x90>
    3488:	80 93 fb 18 	sts	0x18FB, r24	; 0x8018fb <uxTopReadyPriority>
    348c:	fb e0       	ldi	r31, 0x0B	; 11
    348e:	8f 9f       	mul	r24, r31
    3490:	c0 01       	movw	r24, r0
    3492:	11 24       	eor	r1, r1
    3494:	be 01       	movw	r22, r28
    3496:	83 5c       	subi	r24, 0xC3	; 195
    3498:	96 4e       	sbci	r25, 0xE6	; 230
    349a:	0e 94 0d 0c 	call	0x181a	; 0x181a <vListInsertEnd>
    349e:	81 e0       	ldi	r24, 0x01	; 1
    34a0:	16 c0       	rjmp	.+44     	; 0x34ce <xTaskPriorityInherit+0xd2>
    34a2:	a0 91 69 19 	lds	r26, 0x1969	; 0x801969 <pxCurrentTCB>
    34a6:	b0 91 6a 19 	lds	r27, 0x196A	; 0x80196a <pxCurrentTCB+0x1>
    34aa:	5a 96       	adiw	r26, 0x1a	; 26
    34ac:	8c 91       	ld	r24, X
    34ae:	82 8f       	std	Z+26, r24	; 0x1a
    34b0:	81 e0       	ldi	r24, 0x01	; 1
    34b2:	0d c0       	rjmp	.+26     	; 0x34ce <xTaskPriorityInherit+0xd2>
    34b4:	a0 91 69 19 	lds	r26, 0x1969	; 0x801969 <pxCurrentTCB>
    34b8:	b0 91 6a 19 	lds	r27, 0x196A	; 0x80196a <pxCurrentTCB+0x1>
    34bc:	81 e0       	ldi	r24, 0x01	; 1
    34be:	27 a1       	ldd	r18, Z+39	; 0x27
    34c0:	5a 96       	adiw	r26, 0x1a	; 26
    34c2:	9c 91       	ld	r25, X
    34c4:	29 17       	cp	r18, r25
    34c6:	18 f0       	brcs	.+6      	; 0x34ce <xTaskPriorityInherit+0xd2>
    34c8:	80 e0       	ldi	r24, 0x00	; 0
    34ca:	01 c0       	rjmp	.+2      	; 0x34ce <xTaskPriorityInherit+0xd2>
    34cc:	80 e0       	ldi	r24, 0x00	; 0
    34ce:	df 91       	pop	r29
    34d0:	cf 91       	pop	r28
    34d2:	1f 91       	pop	r17
    34d4:	0f 91       	pop	r16
    34d6:	08 95       	ret

000034d8 <xTaskPriorityDisinherit>:
    34d8:	0f 93       	push	r16
    34da:	1f 93       	push	r17
    34dc:	cf 93       	push	r28
    34de:	df 93       	push	r29
    34e0:	fc 01       	movw	r30, r24
    34e2:	89 2b       	or	r24, r25
    34e4:	79 f1       	breq	.+94     	; 0x3544 <xTaskPriorityDisinherit+0x6c>
    34e6:	80 a5       	ldd	r24, Z+40	; 0x28
    34e8:	81 50       	subi	r24, 0x01	; 1
    34ea:	80 a7       	std	Z+40, r24	; 0x28
    34ec:	22 8d       	ldd	r18, Z+26	; 0x1a
    34ee:	97 a1       	ldd	r25, Z+39	; 0x27
    34f0:	29 17       	cp	r18, r25
    34f2:	51 f1       	breq	.+84     	; 0x3548 <xTaskPriorityDisinherit+0x70>
    34f4:	81 11       	cpse	r24, r1
    34f6:	2a c0       	rjmp	.+84     	; 0x354c <xTaskPriorityDisinherit+0x74>
    34f8:	ef 01       	movw	r28, r30
    34fa:	8f 01       	movw	r16, r30
    34fc:	0e 5f       	subi	r16, 0xFE	; 254
    34fe:	1f 4f       	sbci	r17, 0xFF	; 255
    3500:	c8 01       	movw	r24, r16
    3502:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <uxListRemove>
    3506:	8f a1       	ldd	r24, Y+39	; 0x27
    3508:	8a 8f       	std	Y+26, r24	; 0x1a
    350a:	44 e0       	ldi	r20, 0x04	; 4
    350c:	50 e0       	ldi	r21, 0x00	; 0
    350e:	60 e0       	ldi	r22, 0x00	; 0
    3510:	70 e0       	ldi	r23, 0x00	; 0
    3512:	48 1b       	sub	r20, r24
    3514:	51 09       	sbc	r21, r1
    3516:	61 09       	sbc	r22, r1
    3518:	71 09       	sbc	r23, r1
    351a:	4e 87       	std	Y+14, r20	; 0x0e
    351c:	5f 87       	std	Y+15, r21	; 0x0f
    351e:	68 8b       	std	Y+16, r22	; 0x10
    3520:	79 8b       	std	Y+17, r23	; 0x11
    3522:	90 91 fb 18 	lds	r25, 0x18FB	; 0x8018fb <uxTopReadyPriority>
    3526:	98 17       	cp	r25, r24
    3528:	10 f4       	brcc	.+4      	; 0x352e <xTaskPriorityDisinherit+0x56>
    352a:	80 93 fb 18 	sts	0x18FB, r24	; 0x8018fb <uxTopReadyPriority>
    352e:	2b e0       	ldi	r18, 0x0B	; 11
    3530:	82 9f       	mul	r24, r18
    3532:	c0 01       	movw	r24, r0
    3534:	11 24       	eor	r1, r1
    3536:	b8 01       	movw	r22, r16
    3538:	83 5c       	subi	r24, 0xC3	; 195
    353a:	96 4e       	sbci	r25, 0xE6	; 230
    353c:	0e 94 0d 0c 	call	0x181a	; 0x181a <vListInsertEnd>
    3540:	81 e0       	ldi	r24, 0x01	; 1
    3542:	05 c0       	rjmp	.+10     	; 0x354e <xTaskPriorityDisinherit+0x76>
    3544:	80 e0       	ldi	r24, 0x00	; 0
    3546:	03 c0       	rjmp	.+6      	; 0x354e <xTaskPriorityDisinherit+0x76>
    3548:	80 e0       	ldi	r24, 0x00	; 0
    354a:	01 c0       	rjmp	.+2      	; 0x354e <xTaskPriorityDisinherit+0x76>
    354c:	80 e0       	ldi	r24, 0x00	; 0
    354e:	df 91       	pop	r29
    3550:	cf 91       	pop	r28
    3552:	1f 91       	pop	r17
    3554:	0f 91       	pop	r16
    3556:	08 95       	ret

00003558 <vTaskPriorityDisinheritAfterTimeout>:
    3558:	0f 93       	push	r16
    355a:	1f 93       	push	r17
    355c:	cf 93       	push	r28
    355e:	df 93       	push	r29
    3560:	fc 01       	movw	r30, r24
    3562:	89 2b       	or	r24, r25
    3564:	09 f4       	brne	.+2      	; 0x3568 <vTaskPriorityDisinheritAfterTimeout+0x10>
    3566:	3f c0       	rjmp	.+126    	; 0x35e6 <vTaskPriorityDisinheritAfterTimeout+0x8e>
    3568:	87 a1       	ldd	r24, Z+39	; 0x27
    356a:	86 17       	cp	r24, r22
    356c:	08 f4       	brcc	.+2      	; 0x3570 <vTaskPriorityDisinheritAfterTimeout+0x18>
    356e:	86 2f       	mov	r24, r22
    3570:	92 8d       	ldd	r25, Z+26	; 0x1a
    3572:	98 17       	cp	r25, r24
    3574:	c1 f1       	breq	.+112    	; 0x35e6 <vTaskPriorityDisinheritAfterTimeout+0x8e>
    3576:	20 a5       	ldd	r18, Z+40	; 0x28
    3578:	21 30       	cpi	r18, 0x01	; 1
    357a:	a9 f5       	brne	.+106    	; 0x35e6 <vTaskPriorityDisinheritAfterTimeout+0x8e>
    357c:	82 8f       	std	Z+26, r24	; 0x1a
    357e:	46 85       	ldd	r20, Z+14	; 0x0e
    3580:	57 85       	ldd	r21, Z+15	; 0x0f
    3582:	60 89       	ldd	r22, Z+16	; 0x10
    3584:	71 89       	ldd	r23, Z+17	; 0x11
    3586:	77 23       	and	r23, r23
    3588:	64 f0       	brlt	.+24     	; 0x35a2 <vTaskPriorityDisinheritAfterTimeout+0x4a>
    358a:	44 e0       	ldi	r20, 0x04	; 4
    358c:	50 e0       	ldi	r21, 0x00	; 0
    358e:	60 e0       	ldi	r22, 0x00	; 0
    3590:	70 e0       	ldi	r23, 0x00	; 0
    3592:	48 1b       	sub	r20, r24
    3594:	51 09       	sbc	r21, r1
    3596:	61 09       	sbc	r22, r1
    3598:	71 09       	sbc	r23, r1
    359a:	46 87       	std	Z+14, r20	; 0x0e
    359c:	57 87       	std	Z+15, r21	; 0x0f
    359e:	60 8b       	std	Z+16, r22	; 0x10
    35a0:	71 8b       	std	Z+17, r23	; 0x11
    35a2:	2b e0       	ldi	r18, 0x0B	; 11
    35a4:	92 9f       	mul	r25, r18
    35a6:	c0 01       	movw	r24, r0
    35a8:	11 24       	eor	r1, r1
    35aa:	83 5c       	subi	r24, 0xC3	; 195
    35ac:	96 4e       	sbci	r25, 0xE6	; 230
    35ae:	24 85       	ldd	r18, Z+12	; 0x0c
    35b0:	35 85       	ldd	r19, Z+13	; 0x0d
    35b2:	28 17       	cp	r18, r24
    35b4:	39 07       	cpc	r19, r25
    35b6:	b9 f4       	brne	.+46     	; 0x35e6 <vTaskPriorityDisinheritAfterTimeout+0x8e>
    35b8:	ef 01       	movw	r28, r30
    35ba:	8f 01       	movw	r16, r30
    35bc:	0e 5f       	subi	r16, 0xFE	; 254
    35be:	1f 4f       	sbci	r17, 0xFF	; 255
    35c0:	c8 01       	movw	r24, r16
    35c2:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <uxListRemove>
    35c6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    35c8:	90 91 fb 18 	lds	r25, 0x18FB	; 0x8018fb <uxTopReadyPriority>
    35cc:	98 17       	cp	r25, r24
    35ce:	10 f4       	brcc	.+4      	; 0x35d4 <vTaskPriorityDisinheritAfterTimeout+0x7c>
    35d0:	80 93 fb 18 	sts	0x18FB, r24	; 0x8018fb <uxTopReadyPriority>
    35d4:	2b e0       	ldi	r18, 0x0B	; 11
    35d6:	82 9f       	mul	r24, r18
    35d8:	c0 01       	movw	r24, r0
    35da:	11 24       	eor	r1, r1
    35dc:	b8 01       	movw	r22, r16
    35de:	83 5c       	subi	r24, 0xC3	; 195
    35e0:	96 4e       	sbci	r25, 0xE6	; 230
    35e2:	0e 94 0d 0c 	call	0x181a	; 0x181a <vListInsertEnd>
    35e6:	df 91       	pop	r29
    35e8:	cf 91       	pop	r28
    35ea:	1f 91       	pop	r17
    35ec:	0f 91       	pop	r16
    35ee:	08 95       	ret

000035f0 <uxTaskResetEventItemValue>:
    35f0:	cf 92       	push	r12
    35f2:	df 92       	push	r13
    35f4:	ef 92       	push	r14
    35f6:	ff 92       	push	r15
    35f8:	e0 91 69 19 	lds	r30, 0x1969	; 0x801969 <pxCurrentTCB>
    35fc:	f0 91 6a 19 	lds	r31, 0x196A	; 0x80196a <pxCurrentTCB+0x1>
    3600:	66 85       	ldd	r22, Z+14	; 0x0e
    3602:	77 85       	ldd	r23, Z+15	; 0x0f
    3604:	80 89       	ldd	r24, Z+16	; 0x10
    3606:	91 89       	ldd	r25, Z+17	; 0x11
    3608:	e0 91 69 19 	lds	r30, 0x1969	; 0x801969 <pxCurrentTCB>
    360c:	f0 91 6a 19 	lds	r31, 0x196A	; 0x80196a <pxCurrentTCB+0x1>
    3610:	a0 91 69 19 	lds	r26, 0x1969	; 0x801969 <pxCurrentTCB>
    3614:	b0 91 6a 19 	lds	r27, 0x196A	; 0x80196a <pxCurrentTCB+0x1>
    3618:	5a 96       	adiw	r26, 0x1a	; 26
    361a:	2c 91       	ld	r18, X
    361c:	c1 2c       	mov	r12, r1
    361e:	d1 2c       	mov	r13, r1
    3620:	76 01       	movw	r14, r12
    3622:	68 94       	set
    3624:	c2 f8       	bld	r12, 2
    3626:	c2 1a       	sub	r12, r18
    3628:	d1 08       	sbc	r13, r1
    362a:	e1 08       	sbc	r14, r1
    362c:	f1 08       	sbc	r15, r1
    362e:	c6 86       	std	Z+14, r12	; 0x0e
    3630:	d7 86       	std	Z+15, r13	; 0x0f
    3632:	e0 8a       	std	Z+16, r14	; 0x10
    3634:	f1 8a       	std	Z+17, r15	; 0x11
    3636:	ff 90       	pop	r15
    3638:	ef 90       	pop	r14
    363a:	df 90       	pop	r13
    363c:	cf 90       	pop	r12
    363e:	08 95       	ret

00003640 <pvTaskIncrementMutexHeldCount>:
    3640:	80 91 69 19 	lds	r24, 0x1969	; 0x801969 <pxCurrentTCB>
    3644:	90 91 6a 19 	lds	r25, 0x196A	; 0x80196a <pxCurrentTCB+0x1>
    3648:	89 2b       	or	r24, r25
    364a:	39 f0       	breq	.+14     	; 0x365a <pvTaskIncrementMutexHeldCount+0x1a>
    364c:	e0 91 69 19 	lds	r30, 0x1969	; 0x801969 <pxCurrentTCB>
    3650:	f0 91 6a 19 	lds	r31, 0x196A	; 0x80196a <pxCurrentTCB+0x1>
    3654:	80 a5       	ldd	r24, Z+40	; 0x28
    3656:	8f 5f       	subi	r24, 0xFF	; 255
    3658:	80 a7       	std	Z+40, r24	; 0x28
    365a:	80 91 69 19 	lds	r24, 0x1969	; 0x801969 <pxCurrentTCB>
    365e:	90 91 6a 19 	lds	r25, 0x196A	; 0x80196a <pxCurrentTCB+0x1>
    3662:	08 95       	ret

00003664 <xTaskNotifyWait>:
    3664:	4f 92       	push	r4
    3666:	5f 92       	push	r5
    3668:	6f 92       	push	r6
    366a:	7f 92       	push	r7
    366c:	8f 92       	push	r8
    366e:	9f 92       	push	r9
    3670:	af 92       	push	r10
    3672:	bf 92       	push	r11
    3674:	cf 92       	push	r12
    3676:	df 92       	push	r13
    3678:	ef 92       	push	r14
    367a:	ff 92       	push	r15
    367c:	0f 93       	push	r16
    367e:	1f 93       	push	r17
    3680:	49 01       	movw	r8, r18
    3682:	5a 01       	movw	r10, r20
    3684:	0f b6       	in	r0, 0x3f	; 63
    3686:	f8 94       	cli
    3688:	0f 92       	push	r0
    368a:	e0 91 69 19 	lds	r30, 0x1969	; 0x801969 <pxCurrentTCB>
    368e:	f0 91 6a 19 	lds	r31, 0x196A	; 0x80196a <pxCurrentTCB+0x1>
    3692:	27 a5       	ldd	r18, Z+47	; 0x2f
    3694:	22 30       	cpi	r18, 0x02	; 2
    3696:	39 f1       	breq	.+78     	; 0x36e6 <xTaskNotifyWait+0x82>
    3698:	e0 91 69 19 	lds	r30, 0x1969	; 0x801969 <pxCurrentTCB>
    369c:	f0 91 6a 19 	lds	r31, 0x196A	; 0x80196a <pxCurrentTCB+0x1>
    36a0:	43 a4       	ldd	r4, Z+43	; 0x2b
    36a2:	54 a4       	ldd	r5, Z+44	; 0x2c
    36a4:	65 a4       	ldd	r6, Z+45	; 0x2d
    36a6:	76 a4       	ldd	r7, Z+46	; 0x2e
    36a8:	dc 01       	movw	r26, r24
    36aa:	cb 01       	movw	r24, r22
    36ac:	80 95       	com	r24
    36ae:	90 95       	com	r25
    36b0:	a0 95       	com	r26
    36b2:	b0 95       	com	r27
    36b4:	84 21       	and	r24, r4
    36b6:	95 21       	and	r25, r5
    36b8:	a6 21       	and	r26, r6
    36ba:	b7 21       	and	r27, r7
    36bc:	83 a7       	std	Z+43, r24	; 0x2b
    36be:	94 a7       	std	Z+44, r25	; 0x2c
    36c0:	a5 a7       	std	Z+45, r26	; 0x2d
    36c2:	b6 a7       	std	Z+46, r27	; 0x2e
    36c4:	e0 91 69 19 	lds	r30, 0x1969	; 0x801969 <pxCurrentTCB>
    36c8:	f0 91 6a 19 	lds	r31, 0x196A	; 0x80196a <pxCurrentTCB+0x1>
    36cc:	81 e0       	ldi	r24, 0x01	; 1
    36ce:	87 a7       	std	Z+47, r24	; 0x2f
    36d0:	c1 14       	cp	r12, r1
    36d2:	d1 04       	cpc	r13, r1
    36d4:	e1 04       	cpc	r14, r1
    36d6:	f1 04       	cpc	r15, r1
    36d8:	31 f0       	breq	.+12     	; 0x36e6 <xTaskNotifyWait+0x82>
    36da:	41 e0       	ldi	r20, 0x01	; 1
    36dc:	c7 01       	movw	r24, r14
    36de:	b6 01       	movw	r22, r12
    36e0:	5a d9       	rcall	.-3404   	; 0x2996 <prvAddCurrentTaskToDelayedList>
    36e2:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <vPortYield>
    36e6:	0f 90       	pop	r0
    36e8:	0f be       	out	0x3f, r0	; 63
    36ea:	0f b6       	in	r0, 0x3f	; 63
    36ec:	f8 94       	cli
    36ee:	0f 92       	push	r0
    36f0:	01 15       	cp	r16, r1
    36f2:	11 05       	cpc	r17, r1
    36f4:	69 f0       	breq	.+26     	; 0x3710 <xTaskNotifyWait+0xac>
    36f6:	e0 91 69 19 	lds	r30, 0x1969	; 0x801969 <pxCurrentTCB>
    36fa:	f0 91 6a 19 	lds	r31, 0x196A	; 0x80196a <pxCurrentTCB+0x1>
    36fe:	83 a5       	ldd	r24, Z+43	; 0x2b
    3700:	94 a5       	ldd	r25, Z+44	; 0x2c
    3702:	a5 a5       	ldd	r26, Z+45	; 0x2d
    3704:	b6 a5       	ldd	r27, Z+46	; 0x2e
    3706:	f8 01       	movw	r30, r16
    3708:	80 83       	st	Z, r24
    370a:	91 83       	std	Z+1, r25	; 0x01
    370c:	a2 83       	std	Z+2, r26	; 0x02
    370e:	b3 83       	std	Z+3, r27	; 0x03
    3710:	e0 91 69 19 	lds	r30, 0x1969	; 0x801969 <pxCurrentTCB>
    3714:	f0 91 6a 19 	lds	r31, 0x196A	; 0x80196a <pxCurrentTCB+0x1>
    3718:	87 a5       	ldd	r24, Z+47	; 0x2f
    371a:	82 30       	cpi	r24, 0x02	; 2
    371c:	b1 f4       	brne	.+44     	; 0x374a <xTaskNotifyWait+0xe6>
    371e:	e0 91 69 19 	lds	r30, 0x1969	; 0x801969 <pxCurrentTCB>
    3722:	f0 91 6a 19 	lds	r31, 0x196A	; 0x80196a <pxCurrentTCB+0x1>
    3726:	83 a5       	ldd	r24, Z+43	; 0x2b
    3728:	94 a5       	ldd	r25, Z+44	; 0x2c
    372a:	a5 a5       	ldd	r26, Z+45	; 0x2d
    372c:	b6 a5       	ldd	r27, Z+46	; 0x2e
    372e:	80 94       	com	r8
    3730:	90 94       	com	r9
    3732:	a0 94       	com	r10
    3734:	b0 94       	com	r11
    3736:	88 22       	and	r8, r24
    3738:	99 22       	and	r9, r25
    373a:	aa 22       	and	r10, r26
    373c:	bb 22       	and	r11, r27
    373e:	83 a6       	std	Z+43, r8	; 0x2b
    3740:	94 a6       	std	Z+44, r9	; 0x2c
    3742:	a5 a6       	std	Z+45, r10	; 0x2d
    3744:	b6 a6       	std	Z+46, r11	; 0x2e
    3746:	81 e0       	ldi	r24, 0x01	; 1
    3748:	01 c0       	rjmp	.+2      	; 0x374c <xTaskNotifyWait+0xe8>
    374a:	80 e0       	ldi	r24, 0x00	; 0
    374c:	e0 91 69 19 	lds	r30, 0x1969	; 0x801969 <pxCurrentTCB>
    3750:	f0 91 6a 19 	lds	r31, 0x196A	; 0x80196a <pxCurrentTCB+0x1>
    3754:	17 a6       	std	Z+47, r1	; 0x2f
    3756:	0f 90       	pop	r0
    3758:	0f be       	out	0x3f, r0	; 63
    375a:	1f 91       	pop	r17
    375c:	0f 91       	pop	r16
    375e:	ff 90       	pop	r15
    3760:	ef 90       	pop	r14
    3762:	df 90       	pop	r13
    3764:	cf 90       	pop	r12
    3766:	bf 90       	pop	r11
    3768:	af 90       	pop	r10
    376a:	9f 90       	pop	r9
    376c:	8f 90       	pop	r8
    376e:	7f 90       	pop	r7
    3770:	6f 90       	pop	r6
    3772:	5f 90       	pop	r5
    3774:	4f 90       	pop	r4
    3776:	08 95       	ret

00003778 <xTaskGenericNotify>:
    3778:	0f 93       	push	r16
    377a:	1f 93       	push	r17
    377c:	cf 93       	push	r28
    377e:	df 93       	push	r29
    3780:	fc 01       	movw	r30, r24
    3782:	0f b6       	in	r0, 0x3f	; 63
    3784:	f8 94       	cli
    3786:	0f 92       	push	r0
    3788:	01 15       	cp	r16, r1
    378a:	11 05       	cpc	r17, r1
    378c:	49 f0       	breq	.+18     	; 0x37a0 <xTaskGenericNotify+0x28>
    378e:	83 a5       	ldd	r24, Z+43	; 0x2b
    3790:	94 a5       	ldd	r25, Z+44	; 0x2c
    3792:	a5 a5       	ldd	r26, Z+45	; 0x2d
    3794:	b6 a5       	ldd	r27, Z+46	; 0x2e
    3796:	e8 01       	movw	r28, r16
    3798:	88 83       	st	Y, r24
    379a:	99 83       	std	Y+1, r25	; 0x01
    379c:	aa 83       	std	Y+2, r26	; 0x02
    379e:	bb 83       	std	Y+3, r27	; 0x03
    37a0:	87 a5       	ldd	r24, Z+47	; 0x2f
    37a2:	92 e0       	ldi	r25, 0x02	; 2
    37a4:	97 a7       	std	Z+47, r25	; 0x2f
    37a6:	22 30       	cpi	r18, 0x02	; 2
    37a8:	b1 f0       	breq	.+44     	; 0x37d6 <xTaskGenericNotify+0x5e>
    37aa:	18 f4       	brcc	.+6      	; 0x37b2 <xTaskGenericNotify+0x3a>
    37ac:	21 30       	cpi	r18, 0x01	; 1
    37ae:	31 f0       	breq	.+12     	; 0x37bc <xTaskGenericNotify+0x44>
    37b0:	2a c0       	rjmp	.+84     	; 0x3806 <xTaskGenericNotify+0x8e>
    37b2:	23 30       	cpi	r18, 0x03	; 3
    37b4:	e9 f0       	breq	.+58     	; 0x37f0 <xTaskGenericNotify+0x78>
    37b6:	24 30       	cpi	r18, 0x04	; 4
    37b8:	01 f1       	breq	.+64     	; 0x37fa <xTaskGenericNotify+0x82>
    37ba:	25 c0       	rjmp	.+74     	; 0x3806 <xTaskGenericNotify+0x8e>
    37bc:	03 a5       	ldd	r16, Z+43	; 0x2b
    37be:	14 a5       	ldd	r17, Z+44	; 0x2c
    37c0:	25 a5       	ldd	r18, Z+45	; 0x2d
    37c2:	36 a5       	ldd	r19, Z+46	; 0x2e
    37c4:	40 2b       	or	r20, r16
    37c6:	51 2b       	or	r21, r17
    37c8:	62 2b       	or	r22, r18
    37ca:	73 2b       	or	r23, r19
    37cc:	43 a7       	std	Z+43, r20	; 0x2b
    37ce:	54 a7       	std	Z+44, r21	; 0x2c
    37d0:	65 a7       	std	Z+45, r22	; 0x2d
    37d2:	76 a7       	std	Z+46, r23	; 0x2e
    37d4:	18 c0       	rjmp	.+48     	; 0x3806 <xTaskGenericNotify+0x8e>
    37d6:	43 a5       	ldd	r20, Z+43	; 0x2b
    37d8:	54 a5       	ldd	r21, Z+44	; 0x2c
    37da:	65 a5       	ldd	r22, Z+45	; 0x2d
    37dc:	76 a5       	ldd	r23, Z+46	; 0x2e
    37de:	4f 5f       	subi	r20, 0xFF	; 255
    37e0:	5f 4f       	sbci	r21, 0xFF	; 255
    37e2:	6f 4f       	sbci	r22, 0xFF	; 255
    37e4:	7f 4f       	sbci	r23, 0xFF	; 255
    37e6:	43 a7       	std	Z+43, r20	; 0x2b
    37e8:	54 a7       	std	Z+44, r21	; 0x2c
    37ea:	65 a7       	std	Z+45, r22	; 0x2d
    37ec:	76 a7       	std	Z+46, r23	; 0x2e
    37ee:	0b c0       	rjmp	.+22     	; 0x3806 <xTaskGenericNotify+0x8e>
    37f0:	43 a7       	std	Z+43, r20	; 0x2b
    37f2:	54 a7       	std	Z+44, r21	; 0x2c
    37f4:	65 a7       	std	Z+45, r22	; 0x2d
    37f6:	76 a7       	std	Z+46, r23	; 0x2e
    37f8:	06 c0       	rjmp	.+12     	; 0x3806 <xTaskGenericNotify+0x8e>
    37fa:	82 30       	cpi	r24, 0x02	; 2
    37fc:	49 f1       	breq	.+82     	; 0x3850 <xTaskGenericNotify+0xd8>
    37fe:	43 a7       	std	Z+43, r20	; 0x2b
    3800:	54 a7       	std	Z+44, r21	; 0x2c
    3802:	65 a7       	std	Z+45, r22	; 0x2d
    3804:	76 a7       	std	Z+46, r23	; 0x2e
    3806:	81 30       	cpi	r24, 0x01	; 1
    3808:	29 f5       	brne	.+74     	; 0x3854 <xTaskGenericNotify+0xdc>
    380a:	ef 01       	movw	r28, r30
    380c:	8f 01       	movw	r16, r30
    380e:	0e 5f       	subi	r16, 0xFE	; 254
    3810:	1f 4f       	sbci	r17, 0xFF	; 255
    3812:	c8 01       	movw	r24, r16
    3814:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <uxListRemove>
    3818:	8a 8d       	ldd	r24, Y+26	; 0x1a
    381a:	90 91 fb 18 	lds	r25, 0x18FB	; 0x8018fb <uxTopReadyPriority>
    381e:	98 17       	cp	r25, r24
    3820:	10 f4       	brcc	.+4      	; 0x3826 <xTaskGenericNotify+0xae>
    3822:	80 93 fb 18 	sts	0x18FB, r24	; 0x8018fb <uxTopReadyPriority>
    3826:	2b e0       	ldi	r18, 0x0B	; 11
    3828:	82 9f       	mul	r24, r18
    382a:	c0 01       	movw	r24, r0
    382c:	11 24       	eor	r1, r1
    382e:	b8 01       	movw	r22, r16
    3830:	83 5c       	subi	r24, 0xC3	; 195
    3832:	96 4e       	sbci	r25, 0xE6	; 230
    3834:	0e 94 0d 0c 	call	0x181a	; 0x181a <vListInsertEnd>
    3838:	e0 91 69 19 	lds	r30, 0x1969	; 0x801969 <pxCurrentTCB>
    383c:	f0 91 6a 19 	lds	r31, 0x196A	; 0x80196a <pxCurrentTCB+0x1>
    3840:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3842:	82 8d       	ldd	r24, Z+26	; 0x1a
    3844:	89 17       	cp	r24, r25
    3846:	40 f4       	brcc	.+16     	; 0x3858 <xTaskGenericNotify+0xe0>
    3848:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <vPortYield>
    384c:	81 e0       	ldi	r24, 0x01	; 1
    384e:	05 c0       	rjmp	.+10     	; 0x385a <xTaskGenericNotify+0xe2>
    3850:	80 e0       	ldi	r24, 0x00	; 0
    3852:	03 c0       	rjmp	.+6      	; 0x385a <xTaskGenericNotify+0xe2>
    3854:	81 e0       	ldi	r24, 0x01	; 1
    3856:	01 c0       	rjmp	.+2      	; 0x385a <xTaskGenericNotify+0xe2>
    3858:	81 e0       	ldi	r24, 0x01	; 1
    385a:	0f 90       	pop	r0
    385c:	0f be       	out	0x3f, r0	; 63
    385e:	df 91       	pop	r29
    3860:	cf 91       	pop	r28
    3862:	1f 91       	pop	r17
    3864:	0f 91       	pop	r16
    3866:	08 95       	ret

00003868 <xTaskGenericNotifyFromISR>:
    3868:	ef 92       	push	r14
    386a:	ff 92       	push	r15
    386c:	0f 93       	push	r16
    386e:	1f 93       	push	r17
    3870:	cf 93       	push	r28
    3872:	df 93       	push	r29
    3874:	fc 01       	movw	r30, r24
    3876:	01 15       	cp	r16, r1
    3878:	11 05       	cpc	r17, r1
    387a:	49 f0       	breq	.+18     	; 0x388e <xTaskGenericNotifyFromISR+0x26>
    387c:	83 a5       	ldd	r24, Z+43	; 0x2b
    387e:	94 a5       	ldd	r25, Z+44	; 0x2c
    3880:	a5 a5       	ldd	r26, Z+45	; 0x2d
    3882:	b6 a5       	ldd	r27, Z+46	; 0x2e
    3884:	e8 01       	movw	r28, r16
    3886:	88 83       	st	Y, r24
    3888:	99 83       	std	Y+1, r25	; 0x01
    388a:	aa 83       	std	Y+2, r26	; 0x02
    388c:	bb 83       	std	Y+3, r27	; 0x03
    388e:	87 a5       	ldd	r24, Z+47	; 0x2f
    3890:	92 e0       	ldi	r25, 0x02	; 2
    3892:	97 a7       	std	Z+47, r25	; 0x2f
    3894:	22 30       	cpi	r18, 0x02	; 2
    3896:	b1 f0       	breq	.+44     	; 0x38c4 <xTaskGenericNotifyFromISR+0x5c>
    3898:	18 f4       	brcc	.+6      	; 0x38a0 <xTaskGenericNotifyFromISR+0x38>
    389a:	21 30       	cpi	r18, 0x01	; 1
    389c:	31 f0       	breq	.+12     	; 0x38aa <xTaskGenericNotifyFromISR+0x42>
    389e:	2a c0       	rjmp	.+84     	; 0x38f4 <xTaskGenericNotifyFromISR+0x8c>
    38a0:	23 30       	cpi	r18, 0x03	; 3
    38a2:	e9 f0       	breq	.+58     	; 0x38de <xTaskGenericNotifyFromISR+0x76>
    38a4:	24 30       	cpi	r18, 0x04	; 4
    38a6:	01 f1       	breq	.+64     	; 0x38e8 <xTaskGenericNotifyFromISR+0x80>
    38a8:	25 c0       	rjmp	.+74     	; 0x38f4 <xTaskGenericNotifyFromISR+0x8c>
    38aa:	03 a5       	ldd	r16, Z+43	; 0x2b
    38ac:	14 a5       	ldd	r17, Z+44	; 0x2c
    38ae:	25 a5       	ldd	r18, Z+45	; 0x2d
    38b0:	36 a5       	ldd	r19, Z+46	; 0x2e
    38b2:	40 2b       	or	r20, r16
    38b4:	51 2b       	or	r21, r17
    38b6:	62 2b       	or	r22, r18
    38b8:	73 2b       	or	r23, r19
    38ba:	43 a7       	std	Z+43, r20	; 0x2b
    38bc:	54 a7       	std	Z+44, r21	; 0x2c
    38be:	65 a7       	std	Z+45, r22	; 0x2d
    38c0:	76 a7       	std	Z+46, r23	; 0x2e
    38c2:	18 c0       	rjmp	.+48     	; 0x38f4 <xTaskGenericNotifyFromISR+0x8c>
    38c4:	43 a5       	ldd	r20, Z+43	; 0x2b
    38c6:	54 a5       	ldd	r21, Z+44	; 0x2c
    38c8:	65 a5       	ldd	r22, Z+45	; 0x2d
    38ca:	76 a5       	ldd	r23, Z+46	; 0x2e
    38cc:	4f 5f       	subi	r20, 0xFF	; 255
    38ce:	5f 4f       	sbci	r21, 0xFF	; 255
    38d0:	6f 4f       	sbci	r22, 0xFF	; 255
    38d2:	7f 4f       	sbci	r23, 0xFF	; 255
    38d4:	43 a7       	std	Z+43, r20	; 0x2b
    38d6:	54 a7       	std	Z+44, r21	; 0x2c
    38d8:	65 a7       	std	Z+45, r22	; 0x2d
    38da:	76 a7       	std	Z+46, r23	; 0x2e
    38dc:	0b c0       	rjmp	.+22     	; 0x38f4 <xTaskGenericNotifyFromISR+0x8c>
    38de:	43 a7       	std	Z+43, r20	; 0x2b
    38e0:	54 a7       	std	Z+44, r21	; 0x2c
    38e2:	65 a7       	std	Z+45, r22	; 0x2d
    38e4:	76 a7       	std	Z+46, r23	; 0x2e
    38e6:	06 c0       	rjmp	.+12     	; 0x38f4 <xTaskGenericNotifyFromISR+0x8c>
    38e8:	82 30       	cpi	r24, 0x02	; 2
    38ea:	d9 f1       	breq	.+118    	; 0x3962 <xTaskGenericNotifyFromISR+0xfa>
    38ec:	43 a7       	std	Z+43, r20	; 0x2b
    38ee:	54 a7       	std	Z+44, r21	; 0x2c
    38f0:	65 a7       	std	Z+45, r22	; 0x2d
    38f2:	76 a7       	std	Z+46, r23	; 0x2e
    38f4:	81 30       	cpi	r24, 0x01	; 1
    38f6:	b9 f5       	brne	.+110    	; 0x3966 <xTaskGenericNotifyFromISR+0xfe>
    38f8:	ef 01       	movw	r28, r30
    38fa:	80 91 ef 18 	lds	r24, 0x18EF	; 0x8018ef <uxSchedulerSuspended>
    38fe:	81 11       	cpse	r24, r1
    3900:	17 c0       	rjmp	.+46     	; 0x3930 <xTaskGenericNotifyFromISR+0xc8>
    3902:	8f 01       	movw	r16, r30
    3904:	0e 5f       	subi	r16, 0xFE	; 254
    3906:	1f 4f       	sbci	r17, 0xFF	; 255
    3908:	c8 01       	movw	r24, r16
    390a:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <uxListRemove>
    390e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3910:	90 91 fb 18 	lds	r25, 0x18FB	; 0x8018fb <uxTopReadyPriority>
    3914:	98 17       	cp	r25, r24
    3916:	10 f4       	brcc	.+4      	; 0x391c <xTaskGenericNotifyFromISR+0xb4>
    3918:	80 93 fb 18 	sts	0x18FB, r24	; 0x8018fb <uxTopReadyPriority>
    391c:	eb e0       	ldi	r30, 0x0B	; 11
    391e:	8e 9f       	mul	r24, r30
    3920:	c0 01       	movw	r24, r0
    3922:	11 24       	eor	r1, r1
    3924:	b8 01       	movw	r22, r16
    3926:	83 5c       	subi	r24, 0xC3	; 195
    3928:	96 4e       	sbci	r25, 0xE6	; 230
    392a:	0e 94 0d 0c 	call	0x181a	; 0x181a <vListInsertEnd>
    392e:	07 c0       	rjmp	.+14     	; 0x393e <xTaskGenericNotifyFromISR+0xd6>
    3930:	bf 01       	movw	r22, r30
    3932:	62 5f       	subi	r22, 0xF2	; 242
    3934:	7f 4f       	sbci	r23, 0xFF	; 255
    3936:	88 e1       	ldi	r24, 0x18	; 24
    3938:	99 e1       	ldi	r25, 0x19	; 25
    393a:	0e 94 0d 0c 	call	0x181a	; 0x181a <vListInsertEnd>
    393e:	e0 91 69 19 	lds	r30, 0x1969	; 0x801969 <pxCurrentTCB>
    3942:	f0 91 6a 19 	lds	r31, 0x196A	; 0x80196a <pxCurrentTCB+0x1>
    3946:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3948:	82 8d       	ldd	r24, Z+26	; 0x1a
    394a:	89 17       	cp	r24, r25
    394c:	70 f4       	brcc	.+28     	; 0x396a <xTaskGenericNotifyFromISR+0x102>
    394e:	e1 14       	cp	r14, r1
    3950:	f1 04       	cpc	r15, r1
    3952:	19 f0       	breq	.+6      	; 0x395a <xTaskGenericNotifyFromISR+0xf2>
    3954:	81 e0       	ldi	r24, 0x01	; 1
    3956:	e7 01       	movw	r28, r14
    3958:	88 83       	st	Y, r24
    395a:	81 e0       	ldi	r24, 0x01	; 1
    395c:	80 93 f8 18 	sts	0x18F8, r24	; 0x8018f8 <xYieldPending>
    3960:	05 c0       	rjmp	.+10     	; 0x396c <xTaskGenericNotifyFromISR+0x104>
    3962:	80 e0       	ldi	r24, 0x00	; 0
    3964:	03 c0       	rjmp	.+6      	; 0x396c <xTaskGenericNotifyFromISR+0x104>
    3966:	81 e0       	ldi	r24, 0x01	; 1
    3968:	01 c0       	rjmp	.+2      	; 0x396c <xTaskGenericNotifyFromISR+0x104>
    396a:	81 e0       	ldi	r24, 0x01	; 1
    396c:	df 91       	pop	r29
    396e:	cf 91       	pop	r28
    3970:	1f 91       	pop	r17
    3972:	0f 91       	pop	r16
    3974:	ff 90       	pop	r15
    3976:	ef 90       	pop	r14
    3978:	08 95       	ret

0000397a <xTaskNotifyStateClear>:
    TCB_t *pxTCB;
    BaseType_t xReturn;

        /* If null is passed in here then it is the calling task that is having
        its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    397a:	00 97       	sbiw	r24, 0x00	; 0
    397c:	21 f4       	brne	.+8      	; 0x3986 <xTaskNotifyStateClear+0xc>
    397e:	80 91 69 19 	lds	r24, 0x1969	; 0x801969 <pxCurrentTCB>
    3982:	90 91 6a 19 	lds	r25, 0x196A	; 0x80196a <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    3986:	0f b6       	in	r0, 0x3f	; 63
    3988:	f8 94       	cli
    398a:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
    398c:	fc 01       	movw	r30, r24
    398e:	27 a5       	ldd	r18, Z+47	; 0x2f
    3990:	22 30       	cpi	r18, 0x02	; 2
    3992:	19 f4       	brne	.+6      	; 0x399a <xTaskNotifyStateClear+0x20>
            {
                pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    3994:	17 a6       	std	Z+47, r1	; 0x2f
                xReturn = pdPASS;
    3996:	81 e0       	ldi	r24, 0x01	; 1
    3998:	01 c0       	rjmp	.+2      	; 0x399c <xTaskNotifyStateClear+0x22>
            }
            else
            {
                xReturn = pdFAIL;
    399a:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    399c:	0f 90       	pop	r0
    399e:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    39a0:	08 95       	ret

000039a2 <prvInsertTimerInActiveList>:
    39a2:	cf 92       	push	r12
    39a4:	df 92       	push	r13
    39a6:	ef 92       	push	r14
    39a8:	ff 92       	push	r15
    39aa:	0f 93       	push	r16
    39ac:	1f 93       	push	r17
    39ae:	fc 01       	movw	r30, r24
    39b0:	42 83       	std	Z+2, r20	; 0x02
    39b2:	53 83       	std	Z+3, r21	; 0x03
    39b4:	64 83       	std	Z+4, r22	; 0x04
    39b6:	75 83       	std	Z+5, r23	; 0x05
    39b8:	93 87       	std	Z+11, r25	; 0x0b
    39ba:	82 87       	std	Z+10, r24	; 0x0a
    39bc:	04 17       	cp	r16, r20
    39be:	15 07       	cpc	r17, r21
    39c0:	26 07       	cpc	r18, r22
    39c2:	37 07       	cpc	r19, r23
    39c4:	c0 f0       	brcs	.+48     	; 0x39f6 <prvInsertTimerInActiveList+0x54>
    39c6:	0c 19       	sub	r16, r12
    39c8:	1d 09       	sbc	r17, r13
    39ca:	2e 09       	sbc	r18, r14
    39cc:	3f 09       	sbc	r19, r15
    39ce:	86 85       	ldd	r24, Z+14	; 0x0e
    39d0:	97 85       	ldd	r25, Z+15	; 0x0f
    39d2:	a0 89       	ldd	r26, Z+16	; 0x10
    39d4:	b1 89       	ldd	r27, Z+17	; 0x11
    39d6:	08 17       	cp	r16, r24
    39d8:	19 07       	cpc	r17, r25
    39da:	2a 07       	cpc	r18, r26
    39dc:	3b 07       	cpc	r19, r27
    39de:	00 f5       	brcc	.+64     	; 0x3a20 <prvInsertTimerInActiveList+0x7e>
    39e0:	bf 01       	movw	r22, r30
    39e2:	6e 5f       	subi	r22, 0xFE	; 254
    39e4:	7f 4f       	sbci	r23, 0xFF	; 255
    39e6:	80 91 73 19 	lds	r24, 0x1973	; 0x801973 <pxOverflowTimerList>
    39ea:	90 91 74 19 	lds	r25, 0x1974	; 0x801974 <pxOverflowTimerList+0x1>
    39ee:	0e 94 2e 0c 	call	0x185c	; 0x185c <vListInsert>
    39f2:	80 e0       	ldi	r24, 0x00	; 0
    39f4:	18 c0       	rjmp	.+48     	; 0x3a26 <prvInsertTimerInActiveList+0x84>
    39f6:	0c 15       	cp	r16, r12
    39f8:	1d 05       	cpc	r17, r13
    39fa:	2e 05       	cpc	r18, r14
    39fc:	3f 05       	cpc	r19, r15
    39fe:	28 f4       	brcc	.+10     	; 0x3a0a <prvInsertTimerInActiveList+0x68>
    3a00:	4c 15       	cp	r20, r12
    3a02:	5d 05       	cpc	r21, r13
    3a04:	6e 05       	cpc	r22, r14
    3a06:	7f 05       	cpc	r23, r15
    3a08:	68 f4       	brcc	.+26     	; 0x3a24 <prvInsertTimerInActiveList+0x82>
    3a0a:	bf 01       	movw	r22, r30
    3a0c:	6e 5f       	subi	r22, 0xFE	; 254
    3a0e:	7f 4f       	sbci	r23, 0xFF	; 255
    3a10:	80 91 75 19 	lds	r24, 0x1975	; 0x801975 <pxCurrentTimerList>
    3a14:	90 91 76 19 	lds	r25, 0x1976	; 0x801976 <pxCurrentTimerList+0x1>
    3a18:	0e 94 2e 0c 	call	0x185c	; 0x185c <vListInsert>
    3a1c:	80 e0       	ldi	r24, 0x00	; 0
    3a1e:	03 c0       	rjmp	.+6      	; 0x3a26 <prvInsertTimerInActiveList+0x84>
    3a20:	81 e0       	ldi	r24, 0x01	; 1
    3a22:	01 c0       	rjmp	.+2      	; 0x3a26 <prvInsertTimerInActiveList+0x84>
    3a24:	81 e0       	ldi	r24, 0x01	; 1
    3a26:	1f 91       	pop	r17
    3a28:	0f 91       	pop	r16
    3a2a:	ff 90       	pop	r15
    3a2c:	ef 90       	pop	r14
    3a2e:	df 90       	pop	r13
    3a30:	cf 90       	pop	r12
    3a32:	08 95       	ret

00003a34 <prvCheckForValidListAndQueue>:
    3a34:	0f b6       	in	r0, 0x3f	; 63
    3a36:	f8 94       	cli
    3a38:	0f 92       	push	r0
    3a3a:	80 91 71 19 	lds	r24, 0x1971	; 0x801971 <xTimerQueue>
    3a3e:	90 91 72 19 	lds	r25, 0x1972	; 0x801972 <xTimerQueue+0x1>
    3a42:	89 2b       	or	r24, r25
    3a44:	e9 f4       	brne	.+58     	; 0x3a80 <prvCheckForValidListAndQueue+0x4c>
    3a46:	82 e8       	ldi	r24, 0x82	; 130
    3a48:	99 e1       	ldi	r25, 0x19	; 25
    3a4a:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <vListInitialise>
    3a4e:	87 e7       	ldi	r24, 0x77	; 119
    3a50:	99 e1       	ldi	r25, 0x19	; 25
    3a52:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <vListInitialise>
    3a56:	82 e8       	ldi	r24, 0x82	; 130
    3a58:	99 e1       	ldi	r25, 0x19	; 25
    3a5a:	90 93 76 19 	sts	0x1976, r25	; 0x801976 <pxCurrentTimerList+0x1>
    3a5e:	80 93 75 19 	sts	0x1975, r24	; 0x801975 <pxCurrentTimerList>
    3a62:	87 e7       	ldi	r24, 0x77	; 119
    3a64:	99 e1       	ldi	r25, 0x19	; 25
    3a66:	90 93 74 19 	sts	0x1974, r25	; 0x801974 <pxOverflowTimerList+0x1>
    3a6a:	80 93 73 19 	sts	0x1973, r24	; 0x801973 <pxOverflowTimerList>
    3a6e:	40 e0       	ldi	r20, 0x00	; 0
    3a70:	67 e0       	ldi	r22, 0x07	; 7
    3a72:	8a e0       	ldi	r24, 0x0A	; 10
    3a74:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <xQueueGenericCreate>
    3a78:	90 93 72 19 	sts	0x1972, r25	; 0x801972 <xTimerQueue+0x1>
    3a7c:	80 93 71 19 	sts	0x1971, r24	; 0x801971 <xTimerQueue>
    3a80:	0f 90       	pop	r0
    3a82:	0f be       	out	0x3f, r0	; 63
    3a84:	08 95       	ret

00003a86 <xTimerCreateTimerTask>:
    3a86:	ef 92       	push	r14
    3a88:	ff 92       	push	r15
    3a8a:	0f 93       	push	r16
    3a8c:	d3 df       	rcall	.-90     	; 0x3a34 <prvCheckForValidListAndQueue>
    3a8e:	80 91 71 19 	lds	r24, 0x1971	; 0x801971 <xTimerQueue>
    3a92:	90 91 72 19 	lds	r25, 0x1972	; 0x801972 <xTimerQueue+0x1>
    3a96:	89 2b       	or	r24, r25
    3a98:	91 f0       	breq	.+36     	; 0x3abe <xTimerCreateTimerTask+0x38>
    3a9a:	0f 2e       	mov	r0, r31
    3a9c:	ff e6       	ldi	r31, 0x6F	; 111
    3a9e:	ef 2e       	mov	r14, r31
    3aa0:	f9 e1       	ldi	r31, 0x19	; 25
    3aa2:	ff 2e       	mov	r15, r31
    3aa4:	f0 2d       	mov	r31, r0
    3aa6:	03 e0       	ldi	r16, 0x03	; 3
    3aa8:	20 e0       	ldi	r18, 0x00	; 0
    3aaa:	30 e0       	ldi	r19, 0x00	; 0
    3aac:	45 e5       	ldi	r20, 0x55	; 85
    3aae:	50 e0       	ldi	r21, 0x00	; 0
    3ab0:	67 e7       	ldi	r22, 0x77	; 119
    3ab2:	75 e0       	ldi	r23, 0x05	; 5
    3ab4:	87 e0       	ldi	r24, 0x07	; 7
    3ab6:	91 e0       	ldi	r25, 0x01	; 1
    3ab8:	0e 94 42 15 	call	0x2a84	; 0x2a84 <xTaskCreate>
    3abc:	01 c0       	rjmp	.+2      	; 0x3ac0 <xTimerCreateTimerTask+0x3a>
    3abe:	80 e0       	ldi	r24, 0x00	; 0
    3ac0:	0f 91       	pop	r16
    3ac2:	ff 90       	pop	r15
    3ac4:	ef 90       	pop	r14
    3ac6:	08 95       	ret

00003ac8 <xTimerGenericCommand>:
    }
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    3ac8:	8f 92       	push	r8
    3aca:	9f 92       	push	r9
    3acc:	af 92       	push	r10
    3ace:	bf 92       	push	r11
    3ad0:	cf 92       	push	r12
    3ad2:	df 92       	push	r13
    3ad4:	ef 92       	push	r14
    3ad6:	ff 92       	push	r15
    3ad8:	0f 93       	push	r16
    3ada:	1f 93       	push	r17
    3adc:	cf 93       	push	r28
    3ade:	df 93       	push	r29
    3ae0:	cd b7       	in	r28, 0x3d	; 61
    3ae2:	de b7       	in	r29, 0x3e	; 62
    3ae4:	27 97       	sbiw	r28, 0x07	; 7
    3ae6:	0f b6       	in	r0, 0x3f	; 63
    3ae8:	f8 94       	cli
    3aea:	de bf       	out	0x3e, r29	; 62
    3aec:	0f be       	out	0x3f, r0	; 63
    3aee:	cd bf       	out	0x3d, r28	; 61

    configASSERT( xTimer );

    /* Send a message to the timer service task to perform a particular action
    on a particular timer definition. */
    if( xTimerQueue != NULL )
    3af0:	e0 91 71 19 	lds	r30, 0x1971	; 0x801971 <xTimerQueue>
    3af4:	f0 91 72 19 	lds	r31, 0x1972	; 0x801972 <xTimerQueue+0x1>
    3af8:	30 97       	sbiw	r30, 0x00	; 0
    3afa:	81 f1       	breq	.+96     	; 0x3b5c <xTimerGenericCommand+0x94>
    {
        /* Send a command to the timer service task to start the xTimer timer. */
        xMessage.xMessageID = xCommandID;
    3afc:	69 83       	std	Y+1, r22	; 0x01
        xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    3afe:	2a 83       	std	Y+2, r18	; 0x02
    3b00:	3b 83       	std	Y+3, r19	; 0x03
    3b02:	4c 83       	std	Y+4, r20	; 0x04
    3b04:	5d 83       	std	Y+5, r21	; 0x05
        xMessage.u.xTimerParameters.pxTimer = xTimer;
    3b06:	9f 83       	std	Y+7, r25	; 0x07
    3b08:	8e 83       	std	Y+6, r24	; 0x06

        if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    3b0a:	66 30       	cpi	r22, 0x06	; 6
    3b0c:	f4 f4       	brge	.+60     	; 0x3b4a <xTimerGenericCommand+0x82>
        {
            if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    3b0e:	68 dc       	rcall	.-1840   	; 0x33e0 <xTaskGetSchedulerState>
    3b10:	82 30       	cpi	r24, 0x02	; 2
    3b12:	69 f4       	brne	.+26     	; 0x3b2e <xTimerGenericCommand+0x66>
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    3b14:	00 e0       	ldi	r16, 0x00	; 0
    3b16:	a7 01       	movw	r20, r14
    3b18:	96 01       	movw	r18, r12
    3b1a:	be 01       	movw	r22, r28
    3b1c:	6f 5f       	subi	r22, 0xFF	; 255
    3b1e:	7f 4f       	sbci	r23, 0xFF	; 255
    3b20:	80 91 71 19 	lds	r24, 0x1971	; 0x801971 <xTimerQueue>
    3b24:	90 91 72 19 	lds	r25, 0x1972	; 0x801972 <xTimerQueue+0x1>
    3b28:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <xQueueGenericSend>
    3b2c:	18 c0       	rjmp	.+48     	; 0x3b5e <xTimerGenericCommand+0x96>
            }
            else
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    3b2e:	00 e0       	ldi	r16, 0x00	; 0
    3b30:	20 e0       	ldi	r18, 0x00	; 0
    3b32:	30 e0       	ldi	r19, 0x00	; 0
    3b34:	a9 01       	movw	r20, r18
    3b36:	be 01       	movw	r22, r28
    3b38:	6f 5f       	subi	r22, 0xFF	; 255
    3b3a:	7f 4f       	sbci	r23, 0xFF	; 255
    3b3c:	80 91 71 19 	lds	r24, 0x1971	; 0x801971 <xTimerQueue>
    3b40:	90 91 72 19 	lds	r25, 0x1972	; 0x801972 <xTimerQueue+0x1>
    3b44:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <xQueueGenericSend>
    3b48:	0a c0       	rjmp	.+20     	; 0x3b5e <xTimerGenericCommand+0x96>
            }
        }
        else
        {
            xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    3b4a:	20 e0       	ldi	r18, 0x00	; 0
    3b4c:	a8 01       	movw	r20, r16
    3b4e:	be 01       	movw	r22, r28
    3b50:	6f 5f       	subi	r22, 0xFF	; 255
    3b52:	7f 4f       	sbci	r23, 0xFF	; 255
    3b54:	cf 01       	movw	r24, r30
    3b56:	0e 94 05 10 	call	0x200a	; 0x200a <xQueueGenericSendFromISR>
    3b5a:	01 c0       	rjmp	.+2      	; 0x3b5e <xTimerGenericCommand+0x96>
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
    3b5c:	80 e0       	ldi	r24, 0x00	; 0
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xReturn;
}
    3b5e:	27 96       	adiw	r28, 0x07	; 7
    3b60:	0f b6       	in	r0, 0x3f	; 63
    3b62:	f8 94       	cli
    3b64:	de bf       	out	0x3e, r29	; 62
    3b66:	0f be       	out	0x3f, r0	; 63
    3b68:	cd bf       	out	0x3d, r28	; 61
    3b6a:	df 91       	pop	r29
    3b6c:	cf 91       	pop	r28
    3b6e:	1f 91       	pop	r17
    3b70:	0f 91       	pop	r16
    3b72:	ff 90       	pop	r15
    3b74:	ef 90       	pop	r14
    3b76:	df 90       	pop	r13
    3b78:	cf 90       	pop	r12
    3b7a:	bf 90       	pop	r11
    3b7c:	af 90       	pop	r10
    3b7e:	9f 90       	pop	r9
    3b80:	8f 90       	pop	r8
    3b82:	08 95       	ret

00003b84 <prvSampleTimeNow>:
    return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    3b84:	2f 92       	push	r2
    3b86:	3f 92       	push	r3
    3b88:	4f 92       	push	r4
    3b8a:	5f 92       	push	r5
    3b8c:	6f 92       	push	r6
    3b8e:	7f 92       	push	r7
    3b90:	8f 92       	push	r8
    3b92:	9f 92       	push	r9
    3b94:	af 92       	push	r10
    3b96:	bf 92       	push	r11
    3b98:	cf 92       	push	r12
    3b9a:	df 92       	push	r13
    3b9c:	ef 92       	push	r14
    3b9e:	ff 92       	push	r15
    3ba0:	0f 93       	push	r16
    3ba2:	1f 93       	push	r17
    3ba4:	cf 93       	push	r28
    3ba6:	df 93       	push	r29
    3ba8:	1c 01       	movw	r2, r24
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

    xTimeNow = xTaskGetTickCount();
    3baa:	cd d8       	rcall	.-3686   	; 0x2d46 <xTaskGetTickCount>
    3bac:	2b 01       	movw	r4, r22
    3bae:	3c 01       	movw	r6, r24

    if( xTimeNow < xLastTime )
    3bb0:	80 91 6b 19 	lds	r24, 0x196B	; 0x80196b <xLastTime.2432>
    3bb4:	90 91 6c 19 	lds	r25, 0x196C	; 0x80196c <xLastTime.2432+0x1>
    3bb8:	a0 91 6d 19 	lds	r26, 0x196D	; 0x80196d <xLastTime.2432+0x2>
    3bbc:	b0 91 6e 19 	lds	r27, 0x196E	; 0x80196e <xLastTime.2432+0x3>
    3bc0:	48 16       	cp	r4, r24
    3bc2:	59 06       	cpc	r5, r25
    3bc4:	6a 06       	cpc	r6, r26
    3bc6:	7b 06       	cpc	r7, r27
    3bc8:	08 f0       	brcs	.+2      	; 0x3bcc <prvSampleTimeNow+0x48>
    3bca:	53 c0       	rjmp	.+166    	; 0x3c72 <prvSampleTimeNow+0xee>
    3bcc:	3b c0       	rjmp	.+118    	; 0x3c44 <prvSampleTimeNow+0xc0>
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    {
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    3bce:	07 80       	ldd	r0, Z+7	; 0x07
    3bd0:	f0 85       	ldd	r31, Z+8	; 0x08
    3bd2:	e0 2d       	mov	r30, r0
    3bd4:	80 80       	ld	r8, Z
    3bd6:	91 80       	ldd	r9, Z+1	; 0x01
    3bd8:	a2 80       	ldd	r10, Z+2	; 0x02
    3bda:	b3 80       	ldd	r11, Z+3	; 0x03

        /* Remove the timer from the list. */
        pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    3bdc:	c0 85       	ldd	r28, Z+8	; 0x08
    3bde:	d1 85       	ldd	r29, Z+9	; 0x09
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3be0:	8e 01       	movw	r16, r28
    3be2:	0e 5f       	subi	r16, 0xFE	; 254
    3be4:	1f 4f       	sbci	r17, 0xFF	; 255
    3be6:	c8 01       	movw	r24, r16
    3be8:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* Execute its callback, then send a command to restart the timer if
        it is an auto-reload timer.  It cannot be restarted here as the lists
        have not yet been switched. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3bec:	ec 89       	ldd	r30, Y+20	; 0x14
    3bee:	fd 89       	ldd	r31, Y+21	; 0x15
    3bf0:	ce 01       	movw	r24, r28
    3bf2:	19 95       	eicall

        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    3bf4:	8f 89       	ldd	r24, Y+23	; 0x17
    3bf6:	82 ff       	sbrs	r24, 2
    3bf8:	25 c0       	rjmp	.+74     	; 0x3c44 <prvSampleTimeNow+0xc0>
            the timer going into the same timer list then it has already expired
            and the timer should be re-inserted into the current list so it is
            processed again within this loop.  Otherwise a command should be sent
            to restart the timer to ensure it is only inserted into a list after
            the lists have been swapped. */
            xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    3bfa:	8e 85       	ldd	r24, Y+14	; 0x0e
    3bfc:	9f 85       	ldd	r25, Y+15	; 0x0f
    3bfe:	a8 89       	ldd	r26, Y+16	; 0x10
    3c00:	b9 89       	ldd	r27, Y+17	; 0x11
    3c02:	88 0d       	add	r24, r8
    3c04:	99 1d       	adc	r25, r9
    3c06:	aa 1d       	adc	r26, r10
    3c08:	bb 1d       	adc	r27, r11
            if( xReloadTime > xNextExpireTime )
    3c0a:	88 16       	cp	r8, r24
    3c0c:	99 06       	cpc	r9, r25
    3c0e:	aa 06       	cpc	r10, r26
    3c10:	bb 06       	cpc	r11, r27
    3c12:	70 f4       	brcc	.+28     	; 0x3c30 <prvSampleTimeNow+0xac>
            {
                listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    3c14:	8a 83       	std	Y+2, r24	; 0x02
    3c16:	9b 83       	std	Y+3, r25	; 0x03
    3c18:	ac 83       	std	Y+4, r26	; 0x04
    3c1a:	bd 83       	std	Y+5, r27	; 0x05
                listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    3c1c:	db 87       	std	Y+11, r29	; 0x0b
    3c1e:	ca 87       	std	Y+10, r28	; 0x0a
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    3c20:	b8 01       	movw	r22, r16
    3c22:	80 91 75 19 	lds	r24, 0x1975	; 0x801975 <pxCurrentTimerList>
    3c26:	90 91 76 19 	lds	r25, 0x1976	; 0x801976 <pxCurrentTimerList+0x1>
    3c2a:	0e 94 2e 0c 	call	0x185c	; 0x185c <vListInsert>
    3c2e:	0a c0       	rjmp	.+20     	; 0x3c44 <prvSampleTimeNow+0xc0>
            }
            else
            {
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    3c30:	c1 2c       	mov	r12, r1
    3c32:	d1 2c       	mov	r13, r1
    3c34:	76 01       	movw	r14, r12
    3c36:	00 e0       	ldi	r16, 0x00	; 0
    3c38:	10 e0       	ldi	r17, 0x00	; 0
    3c3a:	a5 01       	movw	r20, r10
    3c3c:	94 01       	movw	r18, r8
    3c3e:	60 e0       	ldi	r22, 0x00	; 0
    3c40:	ce 01       	movw	r24, r28
    3c42:	42 df       	rcall	.-380    	; 0x3ac8 <xTimerGenericCommand>

    /* The tick count has overflowed.  The timer lists must be switched.
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    3c44:	e0 91 75 19 	lds	r30, 0x1975	; 0x801975 <pxCurrentTimerList>
    3c48:	f0 91 76 19 	lds	r31, 0x1976	; 0x801976 <pxCurrentTimerList+0x1>
    3c4c:	80 81       	ld	r24, Z
    3c4e:	81 11       	cpse	r24, r1
    3c50:	be cf       	rjmp	.-132    	; 0x3bce <prvSampleTimeNow+0x4a>
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxTemp = pxCurrentTimerList;
    pxCurrentTimerList = pxOverflowTimerList;
    3c52:	80 91 73 19 	lds	r24, 0x1973	; 0x801973 <pxOverflowTimerList>
    3c56:	90 91 74 19 	lds	r25, 0x1974	; 0x801974 <pxOverflowTimerList+0x1>
    3c5a:	90 93 76 19 	sts	0x1976, r25	; 0x801976 <pxCurrentTimerList+0x1>
    3c5e:	80 93 75 19 	sts	0x1975, r24	; 0x801975 <pxCurrentTimerList>
    pxOverflowTimerList = pxTemp;
    3c62:	f0 93 74 19 	sts	0x1974, r31	; 0x801974 <pxOverflowTimerList+0x1>
    3c66:	e0 93 73 19 	sts	0x1973, r30	; 0x801973 <pxOverflowTimerList>
    xTimeNow = xTaskGetTickCount();

    if( xTimeNow < xLastTime )
    {
        prvSwitchTimerLists();
        *pxTimerListsWereSwitched = pdTRUE;
    3c6a:	81 e0       	ldi	r24, 0x01	; 1
    3c6c:	f1 01       	movw	r30, r2
    3c6e:	80 83       	st	Z, r24
    3c70:	02 c0       	rjmp	.+4      	; 0x3c76 <prvSampleTimeNow+0xf2>
    }
    else
    {
        *pxTimerListsWereSwitched = pdFALSE;
    3c72:	f1 01       	movw	r30, r2
    3c74:	10 82       	st	Z, r1
    }

    xLastTime = xTimeNow;
    3c76:	40 92 6b 19 	sts	0x196B, r4	; 0x80196b <xLastTime.2432>
    3c7a:	50 92 6c 19 	sts	0x196C, r5	; 0x80196c <xLastTime.2432+0x1>
    3c7e:	60 92 6d 19 	sts	0x196D, r6	; 0x80196d <xLastTime.2432+0x2>
    3c82:	70 92 6e 19 	sts	0x196E, r7	; 0x80196e <xLastTime.2432+0x3>

    return xTimeNow;
}
    3c86:	c3 01       	movw	r24, r6
    3c88:	b2 01       	movw	r22, r4
    3c8a:	df 91       	pop	r29
    3c8c:	cf 91       	pop	r28
    3c8e:	1f 91       	pop	r17
    3c90:	0f 91       	pop	r16
    3c92:	ff 90       	pop	r15
    3c94:	ef 90       	pop	r14
    3c96:	df 90       	pop	r13
    3c98:	cf 90       	pop	r12
    3c9a:	bf 90       	pop	r11
    3c9c:	af 90       	pop	r10
    3c9e:	9f 90       	pop	r9
    3ca0:	8f 90       	pop	r8
    3ca2:	7f 90       	pop	r7
    3ca4:	6f 90       	pop	r6
    3ca6:	5f 90       	pop	r5
    3ca8:	4f 90       	pop	r4
    3caa:	3f 90       	pop	r3
    3cac:	2f 90       	pop	r2
    3cae:	08 95       	ret

00003cb0 <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    3cb0:	08 95       	ret

00003cb2 <vApplicationMallocFailedHook>:
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    3cb2:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    3cb4:	2f 9a       	sbi	0x05, 7	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3cb6:	2f ef       	ldi	r18, 0xFF	; 255
    3cb8:	80 e7       	ldi	r24, 0x70	; 112
    3cba:	92 e0       	ldi	r25, 0x02	; 2
    3cbc:	21 50       	subi	r18, 0x01	; 1
    3cbe:	80 40       	sbci	r24, 0x00	; 0
    3cc0:	90 40       	sbci	r25, 0x00	; 0
    3cc2:	e1 f7       	brne	.-8      	; 0x3cbc <vApplicationMallocFailedHook+0xa>
    3cc4:	00 c0       	rjmp	.+0      	; 0x3cc6 <vApplicationMallocFailedHook+0x14>
    3cc6:	00 00       	nop
    for(;;)
    {
        _delay_ms(50);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED fast blink.
    3cc8:	1f 9a       	sbi	0x03, 7	; 3
    3cca:	f5 cf       	rjmp	.-22     	; 0x3cb6 <vApplicationMallocFailedHook+0x4>

00003ccc <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook( TaskHandle_t xTask, portCHAR *pcTaskName ) __attribute__((weak));

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)), portCHAR *pcTaskName __attribute__((unused))  )
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    3ccc:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    3cce:	2f 9a       	sbi	0x05, 7	; 5
    3cd0:	2f ef       	ldi	r18, 0xFF	; 255
    3cd2:	87 ea       	ldi	r24, 0xA7	; 167
    3cd4:	91 e6       	ldi	r25, 0x61	; 97
    3cd6:	21 50       	subi	r18, 0x01	; 1
    3cd8:	80 40       	sbci	r24, 0x00	; 0
    3cda:	90 40       	sbci	r25, 0x00	; 0
    3cdc:	e1 f7       	brne	.-8      	; 0x3cd6 <vApplicationStackOverflowHook+0xa>
    3cde:	00 c0       	rjmp	.+0      	; 0x3ce0 <vApplicationStackOverflowHook+0x14>
    3ce0:	00 00       	nop
    for(;;)
    {
        _delay_ms(2000);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED slow blink.
    3ce2:	1f 9a       	sbi	0x03, 7	; 3
    3ce4:	f5 cf       	rjmp	.-22     	; 0x3cd0 <vApplicationStackOverflowHook+0x4>

00003ce6 <create_tasks_and_semaphores>:
// Prototype for LoRaWAN handler
void lora_handler_create(UBaseType_t lora_handler_task_priority);

/*-----------------------------------------------------------*/
void create_tasks_and_semaphores(void)
{
    3ce6:	8f 92       	push	r8
    3ce8:	9f 92       	push	r9
    3cea:	af 92       	push	r10
    3cec:	bf 92       	push	r11
    3cee:	cf 92       	push	r12
    3cf0:	df 92       	push	r13
    3cf2:	ef 92       	push	r14
    3cf4:	ff 92       	push	r15
    3cf6:	0f 93       	push	r16
    3cf8:	1f 93       	push	r17
    3cfa:	cf 93       	push	r28
    3cfc:	df 93       	push	r29
	//xMessageBuffer = xMessageBufferCreate(100);
	//_semaphore = xSemaphoreCreateMutex();
	
	//_downlinkMessagebuffer = xMessageBufferCreate(sizeof(lora_payload_t)*2);
	
	configuration_create(_semaphore);
    3cfe:	80 91 eb 1a 	lds	r24, 0x1AEB	; 0x801aeb <_semaphore>
    3d02:	90 91 ec 1a 	lds	r25, 0x1AEC	; 0x801aec <_semaphore+0x1>
    3d06:	0e 94 33 03 	call	0x666	; 0x666 <configuration_create>
	
	
	
	humAndTempReader_t humidityAndTemperature = humAndTempReader_create(TASK_HUMIDITY_SENSOR_PRIORITY, HUMIDITY_TASK_STACK, 
    3d0a:	e0 90 ef 1a 	lds	r14, 0x1AEF	; 0x801aef <readyEventGroup>
    3d0e:	f0 90 f0 1a 	lds	r15, 0x1AF0	; 0x801af0 <readyEventGroup+0x1>
    3d12:	40 91 07 1b 	lds	r20, 0x1B07	; 0x801b07 <startMeasureEventGroup>
    3d16:	50 91 08 1b 	lds	r21, 0x1B08	; 0x801b08 <startMeasureEventGroup+0x1>
    3d1a:	a1 2c       	mov	r10, r1
    3d1c:	b1 2c       	mov	r11, r1
    3d1e:	65 01       	movw	r12, r10
    3d20:	68 94       	set
    3d22:	a4 f8       	bld	r10, 4
    3d24:	01 e0       	ldi	r16, 0x01	; 1
    3d26:	10 e0       	ldi	r17, 0x00	; 0
    3d28:	20 e0       	ldi	r18, 0x00	; 0
    3d2a:	30 e0       	ldi	r19, 0x00	; 0
    3d2c:	60 ec       	ldi	r22, 0xC0	; 192
    3d2e:	82 e0       	ldi	r24, 0x02	; 2
    3d30:	0e 94 76 06 	call	0xcec	; 0xcec <humAndTempReader_create>
    3d34:	c8 2f       	mov	r28, r24
    3d36:	d9 2f       	mov	r29, r25
	startMeasureEventGroup, BIT_MEASURE_HUMIDITY, readyEventGroup, BIT_DONE_MEASURE_HUMIDITY);
	
	co2reader_t co2reader = co2Reader_create(TASK_CO2_SENSOR_PRIORITY, CO2_TASK_STACK, startMeasureEventGroup, BIT_MEASURE_CO2,
    3d38:	e0 90 ef 1a 	lds	r14, 0x1AEF	; 0x801aef <readyEventGroup>
    3d3c:	f0 90 f0 1a 	lds	r15, 0x1AF0	; 0x801af0 <readyEventGroup+0x1>
    3d40:	40 91 07 1b 	lds	r20, 0x1B07	; 0x801b07 <startMeasureEventGroup>
    3d44:	50 91 08 1b 	lds	r21, 0x1B08	; 0x801b08 <startMeasureEventGroup+0x1>
    3d48:	a1 2c       	mov	r10, r1
    3d4a:	b1 2c       	mov	r11, r1
    3d4c:	65 01       	movw	r12, r10
    3d4e:	68 94       	set
    3d50:	a5 f8       	bld	r10, 5
    3d52:	08 e0       	ldi	r16, 0x08	; 8
    3d54:	10 e0       	ldi	r17, 0x00	; 0
    3d56:	20 e0       	ldi	r18, 0x00	; 0
    3d58:	30 e0       	ldi	r19, 0x00	; 0
    3d5a:	60 ec       	ldi	r22, 0xC0	; 192
    3d5c:	82 e0       	ldi	r24, 0x02	; 2
    3d5e:	0e 94 73 02 	call	0x4e6	; 0x4e6 <co2Reader_create>
    3d62:	4c 01       	movw	r8, r24
	//readyEventGroup, BIT_DONE_MEASURE_CO2);
	
	//co2_t newCO2 = co2_create(TASK_SOUND_SENSOR_PRIORITY, SOUND_TASK_STACK, startMeasureEventGroup,BIT_MEASURE_CO2,
	//readyEventGroup, BIT_DONE_MEASURE_SOUND);
	
	soundReader_t soundReader = soundReader_create(TASK_SOUND_SENSOR_PRIORITY, SOUND_TASK_STACK, startMeasureEventGroup, BIT_MEASURE_SOUND,
    3d64:	e0 90 ef 1a 	lds	r14, 0x1AEF	; 0x801aef <readyEventGroup>
    3d68:	f0 90 f0 1a 	lds	r15, 0x1AF0	; 0x801af0 <readyEventGroup+0x1>
    3d6c:	40 91 07 1b 	lds	r20, 0x1B07	; 0x801b07 <startMeasureEventGroup>
    3d70:	50 91 08 1b 	lds	r21, 0x1B08	; 0x801b08 <startMeasureEventGroup+0x1>
    3d74:	a1 2c       	mov	r10, r1
    3d76:	b1 2c       	mov	r11, r1
    3d78:	65 01       	movw	r12, r10
    3d7a:	68 94       	set
    3d7c:	a6 f8       	bld	r10, 6
    3d7e:	04 e0       	ldi	r16, 0x04	; 4
    3d80:	10 e0       	ldi	r17, 0x00	; 0
    3d82:	20 e0       	ldi	r18, 0x00	; 0
    3d84:	30 e0       	ldi	r19, 0x00	; 0
    3d86:	60 ec       	ldi	r22, 0xC0	; 192
    3d88:	82 e0       	ldi	r24, 0x02	; 2
    3d8a:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <soundReader_create>
    3d8e:	18 2f       	mov	r17, r24
    3d90:	09 2f       	mov	r16, r25
	readyEventGroup, BIT_DONE_MEASURE_SOUND);	
	//soundReader_t soundReader = NULL;
	
	servo_initialise();
    3d92:	0e 94 4f 07 	call	0xe9e	; 0xe9e <servo_initialise>
	
	device_create(TASK_DEVICE_PRIORITY, DEVICE_TASK_STACK, startMeasureEventGroup, ALL_BIT_MEASURE,
    3d96:	e0 90 ef 1a 	lds	r14, 0x1AEF	; 0x801aef <readyEventGroup>
    3d9a:	f0 90 f0 1a 	lds	r15, 0x1AF0	; 0x801af0 <readyEventGroup+0x1>
    3d9e:	40 91 07 1b 	lds	r20, 0x1B07	; 0x801b07 <startMeasureEventGroup>
    3da2:	50 91 08 1b 	lds	r21, 0x1B08	; 0x801b08 <startMeasureEventGroup+0x1>
    3da6:	80 91 ea 1a 	lds	r24, 0x1AEA	; 0x801aea <xMessageBuffer+0x1>
    3daa:	8f 93       	push	r24
    3dac:	80 91 e9 1a 	lds	r24, 0x1AE9	; 0x801ae9 <xMessageBuffer>
    3db0:	8f 93       	push	r24
    3db2:	0f 93       	push	r16
    3db4:	1f 93       	push	r17
    3db6:	df 93       	push	r29
    3db8:	cf 93       	push	r28
    3dba:	0f 2e       	mov	r0, r31
    3dbc:	f0 e7       	ldi	r31, 0x70	; 112
    3dbe:	af 2e       	mov	r10, r31
    3dc0:	b1 2c       	mov	r11, r1
    3dc2:	c1 2c       	mov	r12, r1
    3dc4:	d1 2c       	mov	r13, r1
    3dc6:	f0 2d       	mov	r31, r0
    3dc8:	0d e0       	ldi	r16, 0x0D	; 13
    3dca:	10 e0       	ldi	r17, 0x00	; 0
    3dcc:	20 e0       	ldi	r18, 0x00	; 0
    3dce:	30 e0       	ldi	r19, 0x00	; 0
    3dd0:	60 ec       	ldi	r22, 0xC0	; 192
    3dd2:	84 e0       	ldi	r24, 0x04	; 4
    3dd4:	0e 94 2e 04 	call	0x85c	; 0x85c <device_create>
	readyEventGroup, ALL_BIT_DONE_MEASURE, co2reader, humidityAndTemperature,soundReader, xMessageBuffer);
	
	lora_UpLinkHandler_create(TASK_LORA_DRIVER_PRIORITY,xMessageBuffer);
    3dd8:	60 91 e9 1a 	lds	r22, 0x1AE9	; 0x801ae9 <xMessageBuffer>
    3ddc:	70 91 ea 1a 	lds	r23, 0x1AEA	; 0x801aea <xMessageBuffer+0x1>
    3de0:	81 e0       	ldi	r24, 0x01	; 1
    3de2:	0e 94 14 08 	call	0x1028	; 0x1028 <lora_UpLinkHandler_create>
	lora_DownLinkHandler_create(TASK_LORA_DRIVER_PRIORITYDOWN,_downlinkMessagebuffer);
    3de6:	60 91 ed 1a 	lds	r22, 0x1AED	; 0x801aed <_downlinkMessagebuffer>
    3dea:	70 91 ee 1a 	lds	r23, 0x1AEE	; 0x801aee <_downlinkMessagebuffer+0x1>
    3dee:	81 e0       	ldi	r24, 0x01	; 1
    3df0:	0e 94 c8 05 	call	0xb90	; 0xb90 <lora_DownLinkHandler_create>
}
    3df4:	0f 90       	pop	r0
    3df6:	0f 90       	pop	r0
    3df8:	0f 90       	pop	r0
    3dfa:	0f 90       	pop	r0
    3dfc:	0f 90       	pop	r0
    3dfe:	0f 90       	pop	r0
    3e00:	df 91       	pop	r29
    3e02:	cf 91       	pop	r28
    3e04:	1f 91       	pop	r17
    3e06:	0f 91       	pop	r16
    3e08:	ff 90       	pop	r15
    3e0a:	ef 90       	pop	r14
    3e0c:	df 90       	pop	r13
    3e0e:	cf 90       	pop	r12
    3e10:	bf 90       	pop	r11
    3e12:	af 90       	pop	r10
    3e14:	9f 90       	pop	r9
    3e16:	8f 90       	pop	r8
    3e18:	08 95       	ret

00003e1a <initialiseSystem>:

/*-----------------------------------------------------------*/
void initialiseSystem()
{
	startMeasureEventGroup = xEventGroupCreate();
    3e1a:	0e 94 55 09 	call	0x12aa	; 0x12aa <xEventGroupCreate>
    3e1e:	90 93 08 1b 	sts	0x1B08, r25	; 0x801b08 <startMeasureEventGroup+0x1>
    3e22:	80 93 07 1b 	sts	0x1B07, r24	; 0x801b07 <startMeasureEventGroup>
	readyEventGroup = xEventGroupCreate();
    3e26:	0e 94 55 09 	call	0x12aa	; 0x12aa <xEventGroupCreate>
    3e2a:	90 93 f0 1a 	sts	0x1AF0, r25	; 0x801af0 <readyEventGroup+0x1>
    3e2e:	80 93 ef 1a 	sts	0x1AEF, r24	; 0x801aef <readyEventGroup>

	xMessageBuffer = xMessageBufferCreate(100);
    3e32:	41 e0       	ldi	r20, 0x01	; 1
    3e34:	60 e0       	ldi	r22, 0x00	; 0
    3e36:	70 e0       	ldi	r23, 0x00	; 0
    3e38:	84 e6       	ldi	r24, 0x64	; 100
    3e3a:	90 e0       	ldi	r25, 0x00	; 0
    3e3c:	0e 94 a7 12 	call	0x254e	; 0x254e <xStreamBufferGenericCreate>
    3e40:	90 93 ea 1a 	sts	0x1AEA, r25	; 0x801aea <xMessageBuffer+0x1>
    3e44:	80 93 e9 1a 	sts	0x1AE9, r24	; 0x801ae9 <xMessageBuffer>
	_semaphore = xSemaphoreCreateMutex();
    3e48:	81 e0       	ldi	r24, 0x01	; 1
    3e4a:	0e 94 ea 0f 	call	0x1fd4	; 0x1fd4 <xQueueCreateMutex>
    3e4e:	90 93 ec 1a 	sts	0x1AEC, r25	; 0x801aec <_semaphore+0x1>
    3e52:	80 93 eb 1a 	sts	0x1AEB, r24	; 0x801aeb <_semaphore>
	_downlinkMessagebuffer = xMessageBufferCreate(sizeof(lora_payload_t)*2);
    3e56:	41 e0       	ldi	r20, 0x01	; 1
    3e58:	60 e0       	ldi	r22, 0x00	; 0
    3e5a:	70 e0       	ldi	r23, 0x00	; 0
    3e5c:	8c e2       	ldi	r24, 0x2C	; 44
    3e5e:	90 e0       	ldi	r25, 0x00	; 0
    3e60:	0e 94 a7 12 	call	0x254e	; 0x254e <xStreamBufferGenericCreate>
    3e64:	90 93 ee 1a 	sts	0x1AEE, r25	; 0x801aee <_downlinkMessagebuffer+0x1>
    3e68:	80 93 ed 1a 	sts	0x1AED, r24	; 0x801aed <_downlinkMessagebuffer>
	// Set output ports for leds used in the example
	DDRA |= _BV(DDA0) | _BV(DDA7);
    3e6c:	81 b1       	in	r24, 0x01	; 1
    3e6e:	81 68       	ori	r24, 0x81	; 129
    3e70:	81 b9       	out	0x01, r24	; 1
	//// Initialise the trace-driver to be used together with the R2R-Network
	//trace_init();
	// Make it possible to use stdio on COM port 0 (USB) on Arduino board - Setting 57600,8,N,1
	stdioCreate(ser_USART0);
    3e72:	80 e0       	ldi	r24, 0x00	; 0
    3e74:	0e 94 43 2b 	call	0x5686	; 0x5686 <stdioCreate>
	
	
	
	// vvvvvvvvvvvvvvvvv BELOW IS LoRaWAN initialisation vvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
	// Initialise the HAL layer and use 5 for LED driver priority
	hal_create(5);
    3e78:	85 e0       	ldi	r24, 0x05	; 5
    3e7a:	11 d0       	rcall	.+34     	; 0x3e9e <hal_create>
	// Initialise the LoRaWAN driver with a down-link buffer
	
	
	lora_driver_create(LORA_USART, _downlinkMessagebuffer);
    3e7c:	60 91 ed 1a 	lds	r22, 0x1AED	; 0x801aed <_downlinkMessagebuffer>
    3e80:	70 91 ee 1a 	lds	r23, 0x1AEE	; 0x801aee <_downlinkMessagebuffer+0x1>
    3e84:	81 e0       	ldi	r24, 0x01	; 1
	// Create LoRaWAN task and start it up with priority 3 
	
	hih8120Create();
    3e86:	c3 d3       	rcall	.+1926   	; 0x460e <lora_driver_create>
    3e88:	69 c0       	rjmp	.+210    	; 0x3f5c <hih8120Create>
    3e8a:	08 95       	ret

00003e8c <main>:
	
}
/*-----------------------------------------------------------*/
int main(void)
{
	initialiseSystem(); // Must be done as the very first thing!!
    3e8c:	c6 df       	rcall	.-116    	; 0x3e1a <initialiseSystem>
	create_tasks_and_semaphores();
    3e8e:	2b df       	rcall	.-426    	; 0x3ce6 <create_tasks_and_semaphores>
    3e90:	8f e7       	ldi	r24, 0x7F	; 127
	printf("Program Started!!\n");
    3e92:	95 e0       	ldi	r25, 0x05	; 5
    3e94:	0e 94 6c 31 	call	0x62d8	; 0x62d8 <puts>
    3e98:	0e 94 61 16 	call	0x2cc2	; 0x2cc2 <vTaskStartScheduler>
	vTaskStartScheduler(); // Initialise and run the freeRTOS scheduler. Execution should never return from here.
    3e9c:	ff cf       	rjmp	.-2      	; 0x3e9c <main+0x10>

00003e9e <hal_create>:
    3e9e:	e9 e0       	ldi	r30, 0x09	; 9
    3ea0:	fb e1       	ldi	r31, 0x1B	; 27
    3ea2:	2c e5       	ldi	r18, 0x5C	; 92
    3ea4:	36 e2       	ldi	r19, 0x26	; 38
    3ea6:	31 83       	std	Z+1, r19	; 0x01
    3ea8:	20 83       	st	Z, r18
    3eaa:	2f e5       	ldi	r18, 0x5F	; 95
    3eac:	36 e2       	ldi	r19, 0x26	; 38
    3eae:	33 83       	std	Z+3, r19	; 0x03
    3eb0:	22 83       	std	Z+2, r18	; 0x02
    3eb2:	2a e6       	ldi	r18, 0x6A	; 106
    3eb4:	36 e2       	ldi	r19, 0x26	; 38
    3eb6:	35 83       	std	Z+5, r19	; 0x05
    3eb8:	24 83       	std	Z+4, r18	; 0x04
    3eba:	2e e6       	ldi	r18, 0x6E	; 110
    3ebc:	36 e2       	ldi	r19, 0x26	; 38
    3ebe:	37 83       	std	Z+7, r19	; 0x07
    3ec0:	26 83       	std	Z+6, r18	; 0x06
    3ec2:	24 e7       	ldi	r18, 0x74	; 116
    3ec4:	36 e2       	ldi	r19, 0x26	; 38
    3ec6:	31 87       	std	Z+9, r19	; 0x09
    3ec8:	20 87       	std	Z+8, r18	; 0x08
    3eca:	20 e8       	ldi	r18, 0x80	; 128
    3ecc:	36 e2       	ldi	r19, 0x26	; 38
    3ece:	33 87       	std	Z+11, r19	; 0x0b
    3ed0:	22 87       	std	Z+10, r18	; 0x0a
    3ed2:	25 e8       	ldi	r18, 0x85	; 133
    3ed4:	36 e2       	ldi	r19, 0x26	; 38
    3ed6:	35 87       	std	Z+13, r19	; 0x0d
    3ed8:	24 87       	std	Z+12, r18	; 0x0c
    3eda:	21 e9       	ldi	r18, 0x91	; 145
    3edc:	36 e2       	ldi	r19, 0x26	; 38
    3ede:	37 87       	std	Z+15, r19	; 0x0f
    3ee0:	26 87       	std	Z+14, r18	; 0x0e
    3ee2:	21 e7       	ldi	r18, 0x71	; 113
    3ee4:	36 e2       	ldi	r19, 0x26	; 38
    3ee6:	31 8b       	std	Z+17, r19	; 0x11
    3ee8:	20 8b       	std	Z+16, r18	; 0x10
    3eea:	26 e9       	ldi	r18, 0x96	; 150
    3eec:	36 e2       	ldi	r19, 0x26	; 38
    3eee:	33 8b       	std	Z+19, r19	; 0x13
    3ef0:	22 8b       	std	Z+18, r18	; 0x12
    3ef2:	23 ea       	ldi	r18, 0xA3	; 163
    3ef4:	36 e2       	ldi	r19, 0x26	; 38
    3ef6:	35 8b       	std	Z+21, r19	; 0x15
    3ef8:	24 8b       	std	Z+20, r18	; 0x14
    3efa:	68 2f       	mov	r22, r24
    3efc:	cf 01       	movw	r24, r30
    3efe:	53 c1       	rjmp	.+678    	; 0x41a6 <led_create>
    3f00:	08 95       	ret

00003f02 <_hihTwiCallback>:
    3f02:	65 30       	cpi	r22, 0x05	; 5
    3f04:	f1 f4       	brne	.+60     	; 0x3f42 <_hihTwiCallback+0x40>
    3f06:	fa 01       	movw	r30, r20
    3f08:	80 81       	ld	r24, Z
    3f0a:	8f 73       	andi	r24, 0x3F	; 63
    3f0c:	90 e0       	ldi	r25, 0x00	; 0
    3f0e:	98 2f       	mov	r25, r24
    3f10:	88 27       	eor	r24, r24
    3f12:	21 81       	ldd	r18, Z+1	; 0x01
    3f14:	82 2b       	or	r24, r18
    3f16:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <_hum+0x1>
    3f1a:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <_hum>
    3f1e:	82 81       	ldd	r24, Z+2	; 0x02
    3f20:	f0 e4       	ldi	r31, 0x40	; 64
    3f22:	8f 9f       	mul	r24, r31
    3f24:	c0 01       	movw	r24, r0
    3f26:	11 24       	eor	r1, r1
    3f28:	fa 01       	movw	r30, r20
    3f2a:	23 81       	ldd	r18, Z+3	; 0x03
    3f2c:	26 95       	lsr	r18
    3f2e:	26 95       	lsr	r18
    3f30:	82 2b       	or	r24, r18
    3f32:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <_temp+0x1>
    3f36:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <_temp>
    3f3a:	81 e0       	ldi	r24, 0x01	; 1
    3f3c:	80 93 8d 19 	sts	0x198D, r24	; 0x80198d <_measuringIsReady>
    3f40:	08 95       	ret
    3f42:	64 30       	cpi	r22, 0x04	; 4
    3f44:	51 f0       	breq	.+20     	; 0x3f5a <_hihTwiCallback+0x58>
    3f46:	80 e0       	ldi	r24, 0x00	; 0
    3f48:	90 e4       	ldi	r25, 0x40	; 64
    3f4a:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <_temp+0x1>
    3f4e:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <_temp>
    3f52:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <_hum+0x1>
    3f56:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <_hum>
    3f5a:	08 95       	ret

00003f5c <hih8120Create>:
    3f5c:	0f 93       	push	r16
    3f5e:	1f 93       	push	r17
    3f60:	01 e8       	ldi	r16, 0x81	; 129
    3f62:	1f e1       	ldi	r17, 0x1F	; 31
    3f64:	20 e0       	ldi	r18, 0x00	; 0
    3f66:	34 e2       	ldi	r19, 0x24	; 36
    3f68:	44 ef       	ldi	r20, 0xF4	; 244
    3f6a:	50 e0       	ldi	r21, 0x00	; 0
    3f6c:	60 e0       	ldi	r22, 0x00	; 0
    3f6e:	87 e2       	ldi	r24, 0x27	; 39
    3f70:	0e 94 7d 2b 	call	0x56fa	; 0x56fa <twiCreate>
    3f74:	90 93 8f 19 	sts	0x198F, r25	; 0x80198f <_hih8120Handler+0x1>
    3f78:	80 93 8e 19 	sts	0x198E, r24	; 0x80198e <_hih8120Handler>
    3f7c:	21 e0       	ldi	r18, 0x01	; 1
    3f7e:	89 2b       	or	r24, r25
    3f80:	09 f0       	breq	.+2      	; 0x3f84 <hih8120Create+0x28>
    3f82:	20 e0       	ldi	r18, 0x00	; 0
    3f84:	82 2f       	mov	r24, r18
    3f86:	1f 91       	pop	r17
    3f88:	0f 91       	pop	r16
    3f8a:	08 95       	ret

00003f8c <hih8120IsReady>:
    3f8c:	80 91 8d 19 	lds	r24, 0x198D	; 0x80198d <_measuringIsReady>
    3f90:	08 95       	ret

00003f92 <hih8120Wakeup>:
    3f92:	80 91 8e 19 	lds	r24, 0x198E	; 0x80198e <_hih8120Handler>
    3f96:	90 91 8f 19 	lds	r25, 0x198F	; 0x80198f <_hih8120Handler+0x1>
    3f9a:	00 97       	sbiw	r24, 0x00	; 0
    3f9c:	59 f0       	breq	.+22     	; 0x3fb4 <hih8120Wakeup+0x22>
    3f9e:	40 e0       	ldi	r20, 0x00	; 0
    3fa0:	60 e0       	ldi	r22, 0x00	; 0
    3fa2:	70 e0       	ldi	r23, 0x00	; 0
    3fa4:	0e 94 ce 2b 	call	0x579c	; 0x579c <twiTransmit>
    3fa8:	84 30       	cpi	r24, 0x04	; 4
    3faa:	31 f4       	brne	.+12     	; 0x3fb8 <hih8120Wakeup+0x26>
    3fac:	10 92 8d 19 	sts	0x198D, r1	; 0x80198d <_measuringIsReady>
    3fb0:	80 e0       	ldi	r24, 0x00	; 0
    3fb2:	08 95       	ret
    3fb4:	82 e0       	ldi	r24, 0x02	; 2
    3fb6:	08 95       	ret
    3fb8:	83 e0       	ldi	r24, 0x03	; 3
    3fba:	08 95       	ret

00003fbc <hih8120Meassure>:
    3fbc:	80 91 8e 19 	lds	r24, 0x198E	; 0x80198e <_hih8120Handler>
    3fc0:	90 91 8f 19 	lds	r25, 0x198F	; 0x80198f <_hih8120Handler+0x1>
    3fc4:	00 97       	sbiw	r24, 0x00	; 0
    3fc6:	39 f0       	breq	.+14     	; 0x3fd6 <hih8120Meassure+0x1a>
    3fc8:	64 e0       	ldi	r22, 0x04	; 4
    3fca:	0e 94 1a 2c 	call	0x5834	; 0x5834 <twiReceive>
    3fce:	85 30       	cpi	r24, 0x05	; 5
    3fd0:	21 f0       	breq	.+8      	; 0x3fda <hih8120Meassure+0x1e>
    3fd2:	83 e0       	ldi	r24, 0x03	; 3
    3fd4:	08 95       	ret
    3fd6:	82 e0       	ldi	r24, 0x02	; 2
    3fd8:	08 95       	ret
    3fda:	80 e0       	ldi	r24, 0x00	; 0
    3fdc:	08 95       	ret

00003fde <hih8120GetHumidity>:
    3fde:	60 91 0c 02 	lds	r22, 0x020C	; 0x80020c <_hum>
    3fe2:	70 91 0d 02 	lds	r23, 0x020D	; 0x80020d <_hum+0x1>
    3fe6:	80 e0       	ldi	r24, 0x00	; 0
    3fe8:	90 e0       	ldi	r25, 0x00	; 0
    3fea:	0e 94 24 2e 	call	0x5c48	; 0x5c48 <__floatunsisf>
    3fee:	20 e0       	ldi	r18, 0x00	; 0
    3ff0:	30 e0       	ldi	r19, 0x00	; 0
    3ff2:	48 ec       	ldi	r20, 0xC8	; 200
    3ff4:	52 e4       	ldi	r21, 0x42	; 66
    3ff6:	0e 94 b2 2e 	call	0x5d64	; 0x5d64 <__mulsf3>
    3ffa:	20 e0       	ldi	r18, 0x00	; 0
    3ffc:	38 ef       	ldi	r19, 0xF8	; 248
    3ffe:	4f e7       	ldi	r20, 0x7F	; 127
    4000:	56 e4       	ldi	r21, 0x46	; 70
    4002:	0c 94 8b 2d 	jmp	0x5b16	; 0x5b16 <__divsf3>
    4006:	08 95       	ret

00004008 <hih8120GetHumidityPercent_x10>:
    4008:	ea df       	rcall	.-44     	; 0x3fde <hih8120GetHumidity>
    400a:	20 e0       	ldi	r18, 0x00	; 0
    400c:	30 e0       	ldi	r19, 0x00	; 0
    400e:	40 e2       	ldi	r20, 0x20	; 32
    4010:	51 e4       	ldi	r21, 0x41	; 65
    4012:	0e 94 b2 2e 	call	0x5d64	; 0x5d64 <__mulsf3>
    4016:	0e 94 f8 2d 	call	0x5bf0	; 0x5bf0 <__fixunssfsi>
    401a:	cb 01       	movw	r24, r22
    401c:	08 95       	ret

0000401e <hih8120GetTemperature>:
    401e:	60 91 0a 02 	lds	r22, 0x020A	; 0x80020a <_temp>
    4022:	70 91 0b 02 	lds	r23, 0x020B	; 0x80020b <_temp+0x1>
    4026:	80 e0       	ldi	r24, 0x00	; 0
    4028:	90 e0       	ldi	r25, 0x00	; 0
    402a:	0e 94 24 2e 	call	0x5c48	; 0x5c48 <__floatunsisf>
    402e:	20 e0       	ldi	r18, 0x00	; 0
    4030:	30 e0       	ldi	r19, 0x00	; 0
    4032:	45 e2       	ldi	r20, 0x25	; 37
    4034:	53 e4       	ldi	r21, 0x43	; 67
    4036:	0e 94 b2 2e 	call	0x5d64	; 0x5d64 <__mulsf3>
    403a:	20 e0       	ldi	r18, 0x00	; 0
    403c:	38 ef       	ldi	r19, 0xF8	; 248
    403e:	4f e7       	ldi	r20, 0x7F	; 127
    4040:	56 e4       	ldi	r21, 0x46	; 70
    4042:	0e 94 8b 2d 	call	0x5b16	; 0x5b16 <__divsf3>
    4046:	20 e0       	ldi	r18, 0x00	; 0
    4048:	30 e0       	ldi	r19, 0x00	; 0
    404a:	40 e2       	ldi	r20, 0x20	; 32
    404c:	52 e4       	ldi	r21, 0x42	; 66
    404e:	0c 94 26 2d 	jmp	0x5a4c	; 0x5a4c <__subsf3>
    4052:	08 95       	ret

00004054 <hih8120GetTemperature_x10>:
    4054:	e4 df       	rcall	.-56     	; 0x401e <hih8120GetTemperature>
    4056:	20 e0       	ldi	r18, 0x00	; 0
    4058:	30 e0       	ldi	r19, 0x00	; 0
    405a:	40 e2       	ldi	r20, 0x20	; 32
    405c:	51 e4       	ldi	r21, 0x41	; 65
    405e:	0e 94 b2 2e 	call	0x5d64	; 0x5d64 <__mulsf3>
    4062:	0e 94 f3 2d 	call	0x5be6	; 0x5be6 <__fixsfsi>
    4066:	cb 01       	movw	r24, r22
    4068:	08 95       	ret

0000406a <_turn_off>:
    406a:	cf 93       	push	r28
    406c:	df 93       	push	r29
    406e:	90 e0       	ldi	r25, 0x00	; 0
    4070:	fc 01       	movw	r30, r24
    4072:	ee 0f       	add	r30, r30
    4074:	ff 1f       	adc	r31, r31
    4076:	e8 0f       	add	r30, r24
    4078:	f9 1f       	adc	r31, r25
    407a:	ee 0f       	add	r30, r30
    407c:	ff 1f       	adc	r31, r31
    407e:	e0 57       	subi	r30, 0x70	; 112
    4080:	f6 4e       	sbci	r31, 0xE6	; 230
    4082:	23 81       	ldd	r18, Z+3	; 0x03
    4084:	21 11       	cpse	r18, r1
    4086:	0a c0       	rjmp	.+20     	; 0x409c <_turn_off+0x32>
    4088:	ef 01       	movw	r28, r30
    408a:	e0 91 11 1b 	lds	r30, 0x1B11	; 0x801b11 <register_access+0x8>
    408e:	f0 91 12 1b 	lds	r31, 0x1B12	; 0x801b12 <register_access+0x9>
    4092:	6a 81       	ldd	r22, Y+2	; 0x02
    4094:	88 81       	ld	r24, Y
    4096:	99 81       	ldd	r25, Y+1	; 0x01
    4098:	19 95       	eicall
    409a:	12 c0       	rjmp	.+36     	; 0x40c0 <_turn_off+0x56>
    409c:	dc 01       	movw	r26, r24
    409e:	aa 0f       	add	r26, r26
    40a0:	bb 1f       	adc	r27, r27
    40a2:	ed 01       	movw	r28, r26
    40a4:	c8 0f       	add	r28, r24
    40a6:	d9 1f       	adc	r29, r25
    40a8:	cc 0f       	add	r28, r28
    40aa:	dd 1f       	adc	r29, r29
    40ac:	c0 57       	subi	r28, 0x70	; 112
    40ae:	d6 4e       	sbci	r29, 0xE6	; 230
    40b0:	e0 91 1b 1b 	lds	r30, 0x1B1B	; 0x801b1b <register_access+0x12>
    40b4:	f0 91 1c 1b 	lds	r31, 0x1B1C	; 0x801b1c <register_access+0x13>
    40b8:	6a 81       	ldd	r22, Y+2	; 0x02
    40ba:	88 81       	ld	r24, Y
    40bc:	99 81       	ldd	r25, Y+1	; 0x01
    40be:	19 95       	eicall
    40c0:	df 91       	pop	r29
    40c2:	cf 91       	pop	r28
    40c4:	08 95       	ret

000040c6 <_turn_on>:
    40c6:	cf 93       	push	r28
    40c8:	df 93       	push	r29
    40ca:	90 e0       	ldi	r25, 0x00	; 0
    40cc:	fc 01       	movw	r30, r24
    40ce:	ee 0f       	add	r30, r30
    40d0:	ff 1f       	adc	r31, r31
    40d2:	e8 0f       	add	r30, r24
    40d4:	f9 1f       	adc	r31, r25
    40d6:	ee 0f       	add	r30, r30
    40d8:	ff 1f       	adc	r31, r31
    40da:	e0 57       	subi	r30, 0x70	; 112
    40dc:	f6 4e       	sbci	r31, 0xE6	; 230
    40de:	23 81       	ldd	r18, Z+3	; 0x03
    40e0:	21 11       	cpse	r18, r1
    40e2:	0a c0       	rjmp	.+20     	; 0x40f8 <_turn_on+0x32>
    40e4:	ef 01       	movw	r28, r30
    40e6:	e0 91 1b 1b 	lds	r30, 0x1B1B	; 0x801b1b <register_access+0x12>
    40ea:	f0 91 1c 1b 	lds	r31, 0x1B1C	; 0x801b1c <register_access+0x13>
    40ee:	6a 81       	ldd	r22, Y+2	; 0x02
    40f0:	88 81       	ld	r24, Y
    40f2:	99 81       	ldd	r25, Y+1	; 0x01
    40f4:	19 95       	eicall
    40f6:	12 c0       	rjmp	.+36     	; 0x411c <_turn_on+0x56>
    40f8:	dc 01       	movw	r26, r24
    40fa:	aa 0f       	add	r26, r26
    40fc:	bb 1f       	adc	r27, r27
    40fe:	ed 01       	movw	r28, r26
    4100:	c8 0f       	add	r28, r24
    4102:	d9 1f       	adc	r29, r25
    4104:	cc 0f       	add	r28, r28
    4106:	dd 1f       	adc	r29, r29
    4108:	c0 57       	subi	r28, 0x70	; 112
    410a:	d6 4e       	sbci	r29, 0xE6	; 230
    410c:	e0 91 11 1b 	lds	r30, 0x1B11	; 0x801b11 <register_access+0x8>
    4110:	f0 91 12 1b 	lds	r31, 0x1B12	; 0x801b12 <register_access+0x9>
    4114:	6a 81       	ldd	r22, Y+2	; 0x02
    4116:	88 81       	ld	r24, Y
    4118:	99 81       	ldd	r25, Y+1	; 0x01
    411a:	19 95       	eicall
    411c:	df 91       	pop	r29
    411e:	cf 91       	pop	r28
    4120:	08 95       	ret

00004122 <_hal_led_task>:
    4122:	0f 2e       	mov	r0, r31
    4124:	f9 e0       	ldi	r31, 0x09	; 9
    4126:	cf 2e       	mov	r12, r31
    4128:	fb e1       	ldi	r31, 0x1B	; 27
    412a:	df 2e       	mov	r13, r31
    412c:	f0 2d       	mov	r31, r0
    412e:	04 e0       	ldi	r16, 0x04	; 4
    4130:	c0 e9       	ldi	r28, 0x90	; 144
    4132:	d9 e1       	ldi	r29, 0x19	; 25
    4134:	10 e0       	ldi	r17, 0x00	; 0
    4136:	8c 81       	ldd	r24, Y+4	; 0x04
    4138:	81 30       	cpi	r24, 0x01	; 1
    413a:	69 f0       	breq	.+26     	; 0x4156 <_hal_led_task+0x34>
    413c:	e8 f0       	brcs	.+58     	; 0x4178 <_hal_led_task+0x56>
    413e:	82 30       	cpi	r24, 0x02	; 2
    4140:	39 f5       	brne	.+78     	; 0x4190 <_hal_led_task+0x6e>
    4142:	d6 01       	movw	r26, r12
    4144:	1c 96       	adiw	r26, 0x0c	; 12
    4146:	ed 91       	ld	r30, X+
    4148:	fc 91       	ld	r31, X
    414a:	1d 97       	sbiw	r26, 0x0d	; 13
    414c:	6a 81       	ldd	r22, Y+2	; 0x02
    414e:	88 81       	ld	r24, Y
    4150:	99 81       	ldd	r25, Y+1	; 0x01
    4152:	19 95       	eicall
    4154:	1d c0       	rjmp	.+58     	; 0x4190 <_hal_led_task+0x6e>
    4156:	8d 81       	ldd	r24, Y+5	; 0x05
    4158:	8f 5f       	subi	r24, 0xFF	; 255
    415a:	8a 30       	cpi	r24, 0x0A	; 10
    415c:	10 f4       	brcc	.+4      	; 0x4162 <_hal_led_task+0x40>
    415e:	8d 83       	std	Y+5, r24	; 0x05
    4160:	17 c0       	rjmp	.+46     	; 0x4190 <_hal_led_task+0x6e>
    4162:	1d 82       	std	Y+5, r1	; 0x05
    4164:	d6 01       	movw	r26, r12
    4166:	1c 96       	adiw	r26, 0x0c	; 12
    4168:	ed 91       	ld	r30, X+
    416a:	fc 91       	ld	r31, X
    416c:	1d 97       	sbiw	r26, 0x0d	; 13
    416e:	6a 81       	ldd	r22, Y+2	; 0x02
    4170:	88 81       	ld	r24, Y
    4172:	99 81       	ldd	r25, Y+1	; 0x01
    4174:	19 95       	eicall
    4176:	0c c0       	rjmp	.+24     	; 0x4190 <_hal_led_task+0x6e>
    4178:	8d 81       	ldd	r24, Y+5	; 0x05
    417a:	88 23       	and	r24, r24
    417c:	31 f0       	breq	.+12     	; 0x418a <_hal_led_task+0x68>
    417e:	81 2f       	mov	r24, r17
    4180:	a2 df       	rcall	.-188    	; 0x40c6 <_turn_on>
    4182:	8d 81       	ldd	r24, Y+5	; 0x05
    4184:	81 50       	subi	r24, 0x01	; 1
    4186:	8d 83       	std	Y+5, r24	; 0x05
    4188:	03 c0       	rjmp	.+6      	; 0x4190 <_hal_led_task+0x6e>
    418a:	0c 83       	std	Y+4, r16	; 0x04
    418c:	81 2f       	mov	r24, r17
    418e:	6d df       	rcall	.-294    	; 0x406a <_turn_off>
    4190:	1f 5f       	subi	r17, 0xFF	; 255
    4192:	26 96       	adiw	r28, 0x06	; 6
    4194:	14 30       	cpi	r17, 0x04	; 4
    4196:	79 f6       	brne	.-98     	; 0x4136 <_hal_led_task+0x14>
    4198:	65 e0       	ldi	r22, 0x05	; 5
    419a:	70 e0       	ldi	r23, 0x00	; 0
    419c:	80 e0       	ldi	r24, 0x00	; 0
    419e:	90 e0       	ldi	r25, 0x00	; 0
    41a0:	0e 94 02 18 	call	0x3004	; 0x3004 <vTaskDelay>
    41a4:	c5 cf       	rjmp	.-118    	; 0x4130 <_hal_led_task+0xe>

000041a6 <led_create>:
    41a6:	cf 92       	push	r12
    41a8:	df 92       	push	r13
    41aa:	ef 92       	push	r14
    41ac:	ff 92       	push	r15
    41ae:	0f 93       	push	r16
    41b0:	1f 93       	push	r17
    41b2:	cf 93       	push	r28
    41b4:	df 93       	push	r29
    41b6:	06 2f       	mov	r16, r22
    41b8:	0f 2e       	mov	r0, r31
    41ba:	f9 e0       	ldi	r31, 0x09	; 9
    41bc:	ef 2e       	mov	r14, r31
    41be:	fb e1       	ldi	r31, 0x1B	; 27
    41c0:	ff 2e       	mov	r15, r31
    41c2:	f0 2d       	mov	r31, r0
    41c4:	d7 01       	movw	r26, r14
    41c6:	18 96       	adiw	r26, 0x08	; 8
    41c8:	ed 91       	ld	r30, X+
    41ca:	fc 91       	ld	r31, X
    41cc:	19 97       	sbiw	r26, 0x09	; 9
    41ce:	66 e0       	ldi	r22, 0x06	; 6
    41d0:	87 e2       	ldi	r24, 0x27	; 39
    41d2:	90 e0       	ldi	r25, 0x00	; 0
    41d4:	19 95       	eicall
    41d6:	c0 e9       	ldi	r28, 0x90	; 144
    41d8:	d9 e1       	ldi	r29, 0x19	; 25
    41da:	0f 2e       	mov	r0, r31
    41dc:	f8 e2       	ldi	r31, 0x28	; 40
    41de:	cf 2e       	mov	r12, r31
    41e0:	d1 2c       	mov	r13, r1
    41e2:	f0 2d       	mov	r31, r0
    41e4:	d9 82       	std	Y+1, r13	; 0x01
    41e6:	c8 82       	st	Y, r12
    41e8:	86 e0       	ldi	r24, 0x06	; 6
    41ea:	8a 83       	std	Y+2, r24	; 0x02
    41ec:	1b 82       	std	Y+3, r1	; 0x03
    41ee:	14 e0       	ldi	r17, 0x04	; 4
    41f0:	1c 83       	std	Y+4, r17	; 0x04
    41f2:	80 e0       	ldi	r24, 0x00	; 0
    41f4:	3a df       	rcall	.-396    	; 0x406a <_turn_off>
    41f6:	d7 01       	movw	r26, r14
    41f8:	18 96       	adiw	r26, 0x08	; 8
    41fa:	ed 91       	ld	r30, X+
    41fc:	fc 91       	ld	r31, X
    41fe:	19 97       	sbiw	r26, 0x09	; 9
    4200:	67 e0       	ldi	r22, 0x07	; 7
    4202:	87 e2       	ldi	r24, 0x27	; 39
    4204:	90 e0       	ldi	r25, 0x00	; 0
    4206:	19 95       	eicall
    4208:	df 82       	std	Y+7, r13	; 0x07
    420a:	ce 82       	std	Y+6, r12	; 0x06
    420c:	87 e0       	ldi	r24, 0x07	; 7
    420e:	88 87       	std	Y+8, r24	; 0x08
    4210:	19 86       	std	Y+9, r1	; 0x09
    4212:	1a 87       	std	Y+10, r17	; 0x0a
    4214:	81 e0       	ldi	r24, 0x01	; 1
    4216:	29 df       	rcall	.-430    	; 0x406a <_turn_off>
    4218:	d7 01       	movw	r26, r14
    421a:	18 96       	adiw	r26, 0x08	; 8
    421c:	ed 91       	ld	r30, X+
    421e:	fc 91       	ld	r31, X
    4220:	19 97       	sbiw	r26, 0x09	; 9
    4222:	65 e0       	ldi	r22, 0x05	; 5
    4224:	83 e3       	ldi	r24, 0x33	; 51
    4226:	90 e0       	ldi	r25, 0x00	; 0
    4228:	19 95       	eicall
    422a:	d7 01       	movw	r26, r14
    422c:	18 96       	adiw	r26, 0x08	; 8
    422e:	ed 91       	ld	r30, X+
    4230:	fc 91       	ld	r31, X
    4232:	19 97       	sbiw	r26, 0x09	; 9
    4234:	61 e0       	ldi	r22, 0x01	; 1
    4236:	84 e3       	ldi	r24, 0x34	; 52
    4238:	90 e0       	ldi	r25, 0x00	; 0
    423a:	19 95       	eicall
    423c:	84 e3       	ldi	r24, 0x34	; 52
    423e:	90 e0       	ldi	r25, 0x00	; 0
    4240:	9d 87       	std	Y+13, r25	; 0x0d
    4242:	8c 87       	std	Y+12, r24	; 0x0c
    4244:	85 e0       	ldi	r24, 0x05	; 5
    4246:	8e 87       	std	Y+14, r24	; 0x0e
    4248:	1f 86       	std	Y+15, r1	; 0x0f
    424a:	18 8b       	std	Y+16, r17	; 0x10
    424c:	82 e0       	ldi	r24, 0x02	; 2
    424e:	0d df       	rcall	.-486    	; 0x406a <_turn_off>
    4250:	d7 01       	movw	r26, r14
    4252:	18 96       	adiw	r26, 0x08	; 8
    4254:	ed 91       	ld	r30, X+
    4256:	fc 91       	ld	r31, X
    4258:	19 97       	sbiw	r26, 0x09	; 9
    425a:	64 e0       	ldi	r22, 0x04	; 4
    425c:	81 e0       	ldi	r24, 0x01	; 1
    425e:	91 e0       	ldi	r25, 0x01	; 1
    4260:	19 95       	eicall
    4262:	d7 01       	movw	r26, r14
    4264:	18 96       	adiw	r26, 0x08	; 8
    4266:	ed 91       	ld	r30, X+
    4268:	fc 91       	ld	r31, X
    426a:	19 97       	sbiw	r26, 0x09	; 9
    426c:	61 e0       	ldi	r22, 0x01	; 1
    426e:	82 e0       	ldi	r24, 0x02	; 2
    4270:	91 e0       	ldi	r25, 0x01	; 1
    4272:	19 95       	eicall
    4274:	82 e0       	ldi	r24, 0x02	; 2
    4276:	91 e0       	ldi	r25, 0x01	; 1
    4278:	9b 8b       	std	Y+19, r25	; 0x13
    427a:	8a 8b       	std	Y+18, r24	; 0x12
    427c:	1c 8b       	std	Y+20, r17	; 0x14
    427e:	1d 8a       	std	Y+21, r1	; 0x15
    4280:	1e 8b       	std	Y+22, r17	; 0x16
    4282:	83 e0       	ldi	r24, 0x03	; 3
    4284:	f2 de       	rcall	.-540    	; 0x406a <_turn_off>
    4286:	e1 2c       	mov	r14, r1
    4288:	f1 2c       	mov	r15, r1
    428a:	20 e0       	ldi	r18, 0x00	; 0
    428c:	30 e0       	ldi	r19, 0x00	; 0
    428e:	40 ec       	ldi	r20, 0xC0	; 192
    4290:	50 e0       	ldi	r21, 0x00	; 0
    4292:	61 e9       	ldi	r22, 0x91	; 145
    4294:	75 e0       	ldi	r23, 0x05	; 5
    4296:	81 e9       	ldi	r24, 0x91	; 145
    4298:	90 e2       	ldi	r25, 0x20	; 32
    429a:	0e 94 42 15 	call	0x2a84	; 0x2a84 <xTaskCreate>
    429e:	df 91       	pop	r29
    42a0:	cf 91       	pop	r28
    42a2:	1f 91       	pop	r17
    42a4:	0f 91       	pop	r16
    42a6:	ff 90       	pop	r15
    42a8:	ef 90       	pop	r14
    42aa:	df 90       	pop	r13
    42ac:	cf 90       	pop	r12
    42ae:	08 95       	ret

000042b0 <led_slow_blink>:
    42b0:	0f 93       	push	r16
    42b2:	1f 93       	push	r17
    42b4:	cf 93       	push	r28
    42b6:	df 93       	push	r29
    42b8:	c8 2f       	mov	r28, r24
    42ba:	d0 e0       	ldi	r29, 0x00	; 0
    42bc:	8e 01       	movw	r16, r28
    42be:	00 0f       	add	r16, r16
    42c0:	11 1f       	adc	r17, r17
    42c2:	d8 01       	movw	r26, r16
    42c4:	ac 0f       	add	r26, r28
    42c6:	bd 1f       	adc	r27, r29
    42c8:	aa 0f       	add	r26, r26
    42ca:	bb 1f       	adc	r27, r27
    42cc:	a0 57       	subi	r26, 0x70	; 112
    42ce:	b6 4e       	sbci	r27, 0xE6	; 230
    42d0:	e0 91 15 1b 	lds	r30, 0x1B15	; 0x801b15 <register_access+0xc>
    42d4:	f0 91 16 1b 	lds	r31, 0x1B16	; 0x801b16 <register_access+0xd>
    42d8:	12 96       	adiw	r26, 0x02	; 2
    42da:	6c 91       	ld	r22, X
    42dc:	12 97       	sbiw	r26, 0x02	; 2
    42de:	8d 91       	ld	r24, X+
    42e0:	9c 91       	ld	r25, X
    42e2:	19 95       	eicall
    42e4:	c0 0f       	add	r28, r16
    42e6:	d1 1f       	adc	r29, r17
    42e8:	cc 0f       	add	r28, r28
    42ea:	dd 1f       	adc	r29, r29
    42ec:	c0 57       	subi	r28, 0x70	; 112
    42ee:	d6 4e       	sbci	r29, 0xE6	; 230
    42f0:	81 e0       	ldi	r24, 0x01	; 1
    42f2:	8c 83       	std	Y+4, r24	; 0x04
    42f4:	df 91       	pop	r29
    42f6:	cf 91       	pop	r28
    42f8:	1f 91       	pop	r17
    42fa:	0f 91       	pop	r16
    42fc:	08 95       	ret

000042fe <led_fast_blink>:
    42fe:	0f 93       	push	r16
    4300:	1f 93       	push	r17
    4302:	cf 93       	push	r28
    4304:	df 93       	push	r29
    4306:	c8 2f       	mov	r28, r24
    4308:	d0 e0       	ldi	r29, 0x00	; 0
    430a:	8e 01       	movw	r16, r28
    430c:	00 0f       	add	r16, r16
    430e:	11 1f       	adc	r17, r17
    4310:	d8 01       	movw	r26, r16
    4312:	ac 0f       	add	r26, r28
    4314:	bd 1f       	adc	r27, r29
    4316:	aa 0f       	add	r26, r26
    4318:	bb 1f       	adc	r27, r27
    431a:	a0 57       	subi	r26, 0x70	; 112
    431c:	b6 4e       	sbci	r27, 0xE6	; 230
    431e:	e0 91 15 1b 	lds	r30, 0x1B15	; 0x801b15 <register_access+0xc>
    4322:	f0 91 16 1b 	lds	r31, 0x1B16	; 0x801b16 <register_access+0xd>
    4326:	12 96       	adiw	r26, 0x02	; 2
    4328:	6c 91       	ld	r22, X
    432a:	12 97       	sbiw	r26, 0x02	; 2
    432c:	8d 91       	ld	r24, X+
    432e:	9c 91       	ld	r25, X
    4330:	19 95       	eicall
    4332:	c0 0f       	add	r28, r16
    4334:	d1 1f       	adc	r29, r17
    4336:	cc 0f       	add	r28, r28
    4338:	dd 1f       	adc	r29, r29
    433a:	c0 57       	subi	r28, 0x70	; 112
    433c:	d6 4e       	sbci	r29, 0xE6	; 230
    433e:	82 e0       	ldi	r24, 0x02	; 2
    4340:	8c 83       	std	Y+4, r24	; 0x04
    4342:	df 91       	pop	r29
    4344:	cf 91       	pop	r28
    4346:	1f 91       	pop	r17
    4348:	0f 91       	pop	r16
    434a:	08 95       	ret

0000434c <led_led_on>:
    434c:	28 2f       	mov	r18, r24
    434e:	30 e0       	ldi	r19, 0x00	; 0
    4350:	f9 01       	movw	r30, r18
    4352:	ee 0f       	add	r30, r30
    4354:	ff 1f       	adc	r31, r31
    4356:	e2 0f       	add	r30, r18
    4358:	f3 1f       	adc	r31, r19
    435a:	ee 0f       	add	r30, r30
    435c:	ff 1f       	adc	r31, r31
    435e:	e0 57       	subi	r30, 0x70	; 112
    4360:	f6 4e       	sbci	r31, 0xE6	; 230
    4362:	93 e0       	ldi	r25, 0x03	; 3
    4364:	94 83       	std	Z+4, r25	; 0x04
    4366:	af ce       	rjmp	.-674    	; 0x40c6 <_turn_on>
    4368:	08 95       	ret

0000436a <led_led_off>:
    436a:	28 2f       	mov	r18, r24
    436c:	30 e0       	ldi	r19, 0x00	; 0
    436e:	f9 01       	movw	r30, r18
    4370:	ee 0f       	add	r30, r30
    4372:	ff 1f       	adc	r31, r31
    4374:	e2 0f       	add	r30, r18
    4376:	f3 1f       	adc	r31, r19
    4378:	ee 0f       	add	r30, r30
    437a:	ff 1f       	adc	r31, r31
    437c:	e0 57       	subi	r30, 0x70	; 112
    437e:	f6 4e       	sbci	r31, 0xE6	; 230
    4380:	94 e0       	ldi	r25, 0x04	; 4
    4382:	94 83       	std	Z+4, r25	; 0x04
    4384:	72 ce       	rjmp	.-796    	; 0x406a <_turn_off>
    4386:	08 95       	ret

00004388 <led_long_puls>:
    4388:	90 e0       	ldi	r25, 0x00	; 0
    438a:	fc 01       	movw	r30, r24
    438c:	ee 0f       	add	r30, r30
    438e:	ff 1f       	adc	r31, r31
    4390:	df 01       	movw	r26, r30
    4392:	a8 0f       	add	r26, r24
    4394:	b9 1f       	adc	r27, r25
    4396:	aa 0f       	add	r26, r26
    4398:	bb 1f       	adc	r27, r27
    439a:	a0 57       	subi	r26, 0x70	; 112
    439c:	b6 4e       	sbci	r27, 0xE6	; 230
    439e:	24 e0       	ldi	r18, 0x04	; 4
    43a0:	15 96       	adiw	r26, 0x05	; 5
    43a2:	2c 93       	st	X, r18
    43a4:	15 97       	sbiw	r26, 0x05	; 5
    43a6:	fd 01       	movw	r30, r26
    43a8:	14 82       	std	Z+4, r1	; 0x04
    43aa:	08 95       	ret

000043ac <led_short_puls>:
    43ac:	90 e0       	ldi	r25, 0x00	; 0
    43ae:	fc 01       	movw	r30, r24
    43b0:	ee 0f       	add	r30, r30
    43b2:	ff 1f       	adc	r31, r31
    43b4:	df 01       	movw	r26, r30
    43b6:	a8 0f       	add	r26, r24
    43b8:	b9 1f       	adc	r27, r25
    43ba:	aa 0f       	add	r26, r26
    43bc:	bb 1f       	adc	r27, r27
    43be:	a0 57       	subi	r26, 0x70	; 112
    43c0:	b6 4e       	sbci	r27, 0xE6	; 230
    43c2:	21 e0       	ldi	r18, 0x01	; 1
    43c4:	15 96       	adiw	r26, 0x05	; 5
    43c6:	2c 93       	st	X, r18
    43c8:	15 97       	sbiw	r26, 0x05	; 5
    43ca:	fd 01       	movw	r30, r26
    43cc:	14 82       	std	Z+4, r1	; 0x04
    43ce:	08 95       	ret

000043d0 <_serial_call_back>:
    43d0:	0f 93       	push	r16
    43d2:	1f 93       	push	r17
    43d4:	cf 93       	push	r28
    43d6:	df 93       	push	r29
    43d8:	1f 92       	push	r1
    43da:	1f 92       	push	r1
    43dc:	cd b7       	in	r28, 0x3d	; 61
    43de:	de b7       	in	r29, 0x3e	; 62
    43e0:	8c 01       	movw	r16, r24
    43e2:	19 82       	std	Y+1, r1	; 0x01
    43e4:	2d c0       	rjmp	.+90     	; 0x4440 <_serial_call_back+0x70>
    43e6:	e0 91 0c 1a 	lds	r30, 0x1A0C	; 0x801a0c <rec_buf_inp.2947>
    43ea:	ec 32       	cpi	r30, 0x2C	; 44
    43ec:	50 f4       	brcc	.+20     	; 0x4402 <_serial_call_back+0x32>
    43ee:	81 e0       	ldi	r24, 0x01	; 1
    43f0:	8e 0f       	add	r24, r30
    43f2:	80 93 0c 1a 	sts	0x1A0C, r24	; 0x801a0c <rec_buf_inp.2947>
    43f6:	f0 e0       	ldi	r31, 0x00	; 0
    43f8:	e2 5c       	subi	r30, 0xC2	; 194
    43fa:	f5 4e       	sbci	r31, 0xE5	; 229
    43fc:	8a 81       	ldd	r24, Y+2	; 0x02
    43fe:	80 83       	st	Z, r24
    4400:	02 c0       	rjmp	.+4      	; 0x4406 <_serial_call_back+0x36>
    4402:	10 92 0c 1a 	sts	0x1A0C, r1	; 0x801a0c <rec_buf_inp.2947>
    4406:	8a 81       	ldd	r24, Y+2	; 0x02
    4408:	8a 30       	cpi	r24, 0x0A	; 10
    440a:	d1 f4       	brne	.+52     	; 0x4440 <_serial_call_back+0x70>
    440c:	40 91 0c 1a 	lds	r20, 0x1A0C	; 0x801a0c <rec_buf_inp.2947>
    4410:	50 e0       	ldi	r21, 0x00	; 0
    4412:	fa 01       	movw	r30, r20
    4414:	e4 5c       	subi	r30, 0xC4	; 196
    4416:	f5 4e       	sbci	r31, 0xE5	; 229
    4418:	10 82       	st	Z, r1
    441a:	41 50       	subi	r20, 0x01	; 1
    441c:	51 09       	sbc	r21, r1
    441e:	9e 01       	movw	r18, r28
    4420:	2f 5f       	subi	r18, 0xFF	; 255
    4422:	3f 4f       	sbci	r19, 0xFF	; 255
    4424:	6e e3       	ldi	r22, 0x3E	; 62
    4426:	7a e1       	ldi	r23, 0x1A	; 26
    4428:	80 91 0f 1a 	lds	r24, 0x1A0F	; 0x801a0f <_serial_reply_buffer_handle>
    442c:	90 91 10 1a 	lds	r25, 0x1A10	; 0x801a10 <_serial_reply_buffer_handle+0x1>
    4430:	0e 94 bc 13 	call	0x2778	; 0x2778 <xStreamBufferSendFromISR>
    4434:	89 81       	ldd	r24, Y+1	; 0x01
    4436:	81 11       	cpse	r24, r1
    4438:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <vPortYield>
    443c:	10 92 0c 1a 	sts	0x1A0C, r1	; 0x801a0c <rec_buf_inp.2947>
    4440:	be 01       	movw	r22, r28
    4442:	6e 5f       	subi	r22, 0xFE	; 254
    4444:	7f 4f       	sbci	r23, 0xFF	; 255
    4446:	c8 01       	movw	r24, r16
    4448:	8c d6       	rcall	.+3352   	; 0x5162 <serial_get_byte>
    444a:	88 23       	and	r24, r24
    444c:	61 f2       	breq	.-104    	; 0x43e6 <_serial_call_back+0x16>
    444e:	0f 90       	pop	r0
    4450:	0f 90       	pop	r0
    4452:	df 91       	pop	r29
    4454:	cf 91       	pop	r28
    4456:	1f 91       	pop	r17
    4458:	0f 91       	pop	r16
    445a:	08 95       	ret

0000445c <_upload_message>:
    445c:	0f 93       	push	r16
    445e:	1f 93       	push	r17
    4460:	cf 93       	push	r28
    4462:	df 93       	push	r29
    4464:	8c 01       	movw	r16, r24
    4466:	eb 01       	movw	r28, r22
    4468:	80 91 0f 1a 	lds	r24, 0x1A0F	; 0x801a0f <_serial_reply_buffer_handle>
    446c:	90 91 10 1a 	lds	r25, 0x1A10	; 0x801a10 <_serial_reply_buffer_handle+0x1>
    4470:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <xStreamBufferReset>
    4474:	b8 01       	movw	r22, r16
    4476:	88 ea       	ldi	r24, 0xA8	; 168
    4478:	99 e1       	ldi	r25, 0x19	; 25
    447a:	0e 94 3a 31 	call	0x6274	; 0x6274 <strcpy>
    447e:	20 97       	sbiw	r28, 0x00	; 0
    4480:	79 f0       	breq	.+30     	; 0x44a0 <_upload_message+0x44>
    4482:	e8 ea       	ldi	r30, 0xA8	; 168
    4484:	f9 e1       	ldi	r31, 0x19	; 25
    4486:	01 90       	ld	r0, Z+
    4488:	00 20       	and	r0, r0
    448a:	e9 f7       	brne	.-6      	; 0x4486 <_upload_message+0x2a>
    448c:	31 97       	sbiw	r30, 0x01	; 1
    448e:	80 e2       	ldi	r24, 0x20	; 32
    4490:	90 e0       	ldi	r25, 0x00	; 0
    4492:	91 83       	std	Z+1, r25	; 0x01
    4494:	80 83       	st	Z, r24
    4496:	be 01       	movw	r22, r28
    4498:	88 ea       	ldi	r24, 0xA8	; 168
    449a:	99 e1       	ldi	r25, 0x19	; 25
    449c:	0e 94 2f 31 	call	0x625e	; 0x625e <strcat>
    44a0:	e8 ea       	ldi	r30, 0xA8	; 168
    44a2:	f9 e1       	ldi	r31, 0x19	; 25
    44a4:	df 01       	movw	r26, r30
    44a6:	0d 90       	ld	r0, X+
    44a8:	00 20       	and	r0, r0
    44aa:	e9 f7       	brne	.-6      	; 0x44a6 <_upload_message+0x4a>
    44ac:	11 97       	sbiw	r26, 0x01	; 1
    44ae:	8d e0       	ldi	r24, 0x0D	; 13
    44b0:	9a e0       	ldi	r25, 0x0A	; 10
    44b2:	11 96       	adiw	r26, 0x01	; 1
    44b4:	9c 93       	st	X, r25
    44b6:	8e 93       	st	-X, r24
    44b8:	12 96       	adiw	r26, 0x02	; 2
    44ba:	1c 92       	st	X, r1
    44bc:	01 90       	ld	r0, Z+
    44be:	00 20       	and	r0, r0
    44c0:	e9 f7       	brne	.-6      	; 0x44bc <_upload_message+0x60>
    44c2:	31 97       	sbiw	r30, 0x01	; 1
    44c4:	e8 5a       	subi	r30, 0xA8	; 168
    44c6:	f9 41       	sbci	r31, 0x19	; 25
    44c8:	ae 2f       	mov	r26, r30
    44ca:	88 ea       	ldi	r24, 0xA8	; 168
    44cc:	99 e1       	ldi	r25, 0x19	; 25
    44ce:	ac 01       	movw	r20, r24
    44d0:	6a 2f       	mov	r22, r26
    44d2:	80 91 11 1a 	lds	r24, 0x1A11	; 0x801a11 <_rn2483_serial>
    44d6:	90 91 12 1a 	lds	r25, 0x1A12	; 0x801a12 <_rn2483_serial+0x1>
    44da:	f3 d5       	rcall	.+3046   	; 0x50c2 <serial_send_bytes>
    44dc:	81 11       	cpse	r24, r1
    44de:	11 c0       	rjmp	.+34     	; 0x4502 <_upload_message+0xa6>
    44e0:	08 e2       	ldi	r16, 0x28	; 40
    44e2:	15 e0       	ldi	r17, 0x05	; 5
    44e4:	20 e0       	ldi	r18, 0x00	; 0
    44e6:	30 e0       	ldi	r19, 0x00	; 0
    44e8:	4d e2       	ldi	r20, 0x2D	; 45
    44ea:	50 e0       	ldi	r21, 0x00	; 0
    44ec:	68 e9       	ldi	r22, 0x98	; 152
    44ee:	7a e1       	ldi	r23, 0x1A	; 26
    44f0:	80 91 0f 1a 	lds	r24, 0x1A0F	; 0x801a0f <_serial_reply_buffer_handle>
    44f4:	90 91 10 1a 	lds	r25, 0x1A10	; 0x801a10 <_serial_reply_buffer_handle+0x1>
    44f8:	0e 94 ff 13 	call	0x27fe	; 0x27fe <xStreamBufferReceive>
    44fc:	88 e9       	ldi	r24, 0x98	; 152
    44fe:	9a e1       	ldi	r25, 0x1A	; 26
    4500:	02 c0       	rjmp	.+4      	; 0x4506 <_upload_message+0xaa>
    4502:	80 e0       	ldi	r24, 0x00	; 0
    4504:	90 e0       	ldi	r25, 0x00	; 0
    4506:	df 91       	pop	r29
    4508:	cf 91       	pop	r28
    450a:	1f 91       	pop	r17
    450c:	0f 91       	pop	r16
    450e:	08 95       	ret

00004510 <_reply2return_code>:
    4510:	2f 92       	push	r2
    4512:	3f 92       	push	r3
    4514:	4f 92       	push	r4
    4516:	5f 92       	push	r5
    4518:	6f 92       	push	r6
    451a:	7f 92       	push	r7
    451c:	8f 92       	push	r8
    451e:	9f 92       	push	r9
    4520:	af 92       	push	r10
    4522:	bf 92       	push	r11
    4524:	cf 92       	push	r12
    4526:	df 92       	push	r13
    4528:	ef 92       	push	r14
    452a:	ff 92       	push	r15
    452c:	0f 93       	push	r16
    452e:	1f 93       	push	r17
    4530:	cf 93       	push	r28
    4532:	df 93       	push	r29
    4534:	5c 01       	movw	r10, r24
    4536:	fc 01       	movw	r30, r24
    4538:	01 90       	ld	r0, Z+
    453a:	00 20       	and	r0, r0
    453c:	e9 f7       	brne	.-6      	; 0x4538 <_reply2return_code+0x28>
    453e:	31 97       	sbiw	r30, 0x01	; 1
    4540:	6f 01       	movw	r12, r30
    4542:	c8 1a       	sub	r12, r24
    4544:	d9 0a       	sbc	r13, r25
    4546:	5c 2c       	mov	r5, r12
    4548:	0f 2e       	mov	r0, r31
    454a:	f2 e3       	ldi	r31, 0x32	; 50
    454c:	8f 2e       	mov	r8, r31
    454e:	f8 e0       	ldi	r31, 0x08	; 8
    4550:	9f 2e       	mov	r9, r31
    4552:	f0 2d       	mov	r31, r0
    4554:	e1 2c       	mov	r14, r1
    4556:	f1 2c       	mov	r15, r1
    4558:	4c 2c       	mov	r4, r12
    455a:	37 01       	movw	r6, r14
    455c:	f4 01       	movw	r30, r8
    455e:	01 81       	ldd	r16, Z+1	; 0x01
    4560:	12 81       	ldd	r17, Z+2	; 0x02
    4562:	e8 01       	movw	r28, r16
    4564:	09 90       	ld	r0, Y+
    4566:	00 20       	and	r0, r0
    4568:	e9 f7       	brne	.-6      	; 0x4564 <_reply2return_code+0x54>
    456a:	21 97       	sbiw	r28, 0x01	; 1
    456c:	c0 1b       	sub	r28, r16
    456e:	d1 0b       	sbc	r29, r17
    4570:	3c 2e       	mov	r3, r28
    4572:	f9 e0       	ldi	r31, 0x09	; 9
    4574:	cf 16       	cp	r12, r31
    4576:	d1 04       	cpc	r13, r1
    4578:	58 f0       	brcs	.+22     	; 0x4590 <_reply2return_code+0x80>
    457a:	f4 01       	movw	r30, r8
    457c:	20 80       	ld	r2, Z
    457e:	fe e0       	ldi	r31, 0x0E	; 14
    4580:	2f 12       	cpse	r2, r31
    4582:	06 c0       	rjmp	.+12     	; 0x4590 <_reply2return_code+0x80>
    4584:	b8 01       	movw	r22, r16
    4586:	c5 01       	movw	r24, r10
    4588:	0e 94 0a 31 	call	0x6214	; 0x6214 <strcasestr>
    458c:	89 2b       	or	r24, r25
    458e:	09 f5       	brne	.+66     	; 0x45d2 <_reply2return_code+0xc2>
    4590:	44 2d       	mov	r20, r4
    4592:	35 14       	cp	r3, r5
    4594:	08 f4       	brcc	.+2      	; 0x4598 <_reply2return_code+0x88>
    4596:	4c 2f       	mov	r20, r28
    4598:	50 e0       	ldi	r21, 0x00	; 0
    459a:	b8 01       	movw	r22, r16
    459c:	c5 01       	movw	r24, r10
    459e:	0e 94 41 31 	call	0x6282	; 0x6282 <strncasecmp>
    45a2:	89 2b       	or	r24, r25
    45a4:	49 f4       	brne	.+18     	; 0x45b8 <_reply2return_code+0xa8>
    45a6:	f3 01       	movw	r30, r6
    45a8:	ee 0f       	add	r30, r30
    45aa:	ff 1f       	adc	r31, r31
    45ac:	e6 0d       	add	r30, r6
    45ae:	f7 1d       	adc	r31, r7
    45b0:	ee 5c       	subi	r30, 0xCE	; 206
    45b2:	f7 4f       	sbci	r31, 0xF7	; 247
    45b4:	20 80       	ld	r2, Z
    45b6:	0d c0       	rjmp	.+26     	; 0x45d2 <_reply2return_code+0xc2>
    45b8:	8f ef       	ldi	r24, 0xFF	; 255
    45ba:	e8 1a       	sub	r14, r24
    45bc:	f8 0a       	sbc	r15, r24
    45be:	e3 e0       	ldi	r30, 0x03	; 3
    45c0:	8e 0e       	add	r8, r30
    45c2:	91 1c       	adc	r9, r1
    45c4:	f1 e1       	ldi	r31, 0x11	; 17
    45c6:	ef 16       	cp	r14, r31
    45c8:	f1 04       	cpc	r15, r1
    45ca:	39 f6       	brne	.-114    	; 0x455a <_reply2return_code+0x4a>
    45cc:	68 94       	set
    45ce:	22 24       	eor	r2, r2
    45d0:	24 f8       	bld	r2, 4
    45d2:	82 2d       	mov	r24, r2
    45d4:	df 91       	pop	r29
    45d6:	cf 91       	pop	r28
    45d8:	1f 91       	pop	r17
    45da:	0f 91       	pop	r16
    45dc:	ff 90       	pop	r15
    45de:	ef 90       	pop	r14
    45e0:	df 90       	pop	r13
    45e2:	cf 90       	pop	r12
    45e4:	bf 90       	pop	r11
    45e6:	af 90       	pop	r10
    45e8:	9f 90       	pop	r9
    45ea:	8f 90       	pop	r8
    45ec:	7f 90       	pop	r7
    45ee:	6f 90       	pop	r6
    45f0:	5f 90       	pop	r5
    45f2:	4f 90       	pop	r4
    45f4:	3f 90       	pop	r3
    45f6:	2f 90       	pop	r2
    45f8:	08 95       	ret

000045fa <_upload_message_rc>:
    45fa:	30 df       	rcall	.-416    	; 0x445c <_upload_message>
    45fc:	89 cf       	rjmp	.-238    	; 0x4510 <_reply2return_code>
    45fe:	08 95       	ret

00004600 <lora_driver_flush_buffers>:
    4600:	80 91 0f 1a 	lds	r24, 0x1A0F	; 0x801a0f <_serial_reply_buffer_handle>
    4604:	90 91 10 1a 	lds	r25, 0x1A10	; 0x801a10 <_serial_reply_buffer_handle+0x1>
    4608:	0c 94 d3 12 	jmp	0x25a6	; 0x25a6 <xStreamBufferReset>
    460c:	08 95       	ret

0000460e <lora_driver_create>:
    460e:	8f 92       	push	r8
    4610:	9f 92       	push	r9
    4612:	af 92       	push	r10
    4614:	cf 92       	push	r12
    4616:	ef 92       	push	r14
    4618:	0f 93       	push	r16
    461a:	1f 93       	push	r17
    461c:	cf 93       	push	r28
    461e:	c8 2f       	mov	r28, r24
    4620:	8b 01       	movw	r16, r22
    4622:	41 e0       	ldi	r20, 0x01	; 1
    4624:	60 e0       	ldi	r22, 0x00	; 0
    4626:	70 e0       	ldi	r23, 0x00	; 0
    4628:	88 ec       	ldi	r24, 0xC8	; 200
    462a:	90 e0       	ldi	r25, 0x00	; 0
    462c:	0e 94 a7 12 	call	0x254e	; 0x254e <xStreamBufferGenericCreate>
    4630:	90 93 10 1a 	sts	0x1A10, r25	; 0x801a10 <_serial_reply_buffer_handle+0x1>
    4634:	80 93 0f 1a 	sts	0x1A0F, r24	; 0x801a0f <_serial_reply_buffer_handle>
    4638:	10 93 0e 1a 	sts	0x1A0E, r17	; 0x801a0e <_downlinkMessageBuffer+0x1>
    463c:	00 93 0d 1a 	sts	0x1A0D, r16	; 0x801a0d <_downlinkMessageBuffer>
    4640:	0f 2e       	mov	r0, r31
    4642:	f8 ee       	ldi	r31, 0xE8	; 232
    4644:	8f 2e       	mov	r8, r31
    4646:	f1 e2       	ldi	r31, 0x21	; 33
    4648:	9f 2e       	mov	r9, r31
    464a:	f0 2d       	mov	r31, r0
    464c:	68 94       	set
    464e:	aa 24       	eor	r10, r10
    4650:	a6 f8       	bld	r10, 6
    4652:	68 94       	set
    4654:	cc 24       	eor	r12, r12
    4656:	c6 f8       	bld	r12, 6
    4658:	e1 2c       	mov	r14, r1
    465a:	00 e0       	ldi	r16, 0x00	; 0
    465c:	23 e0       	ldi	r18, 0x03	; 3
    465e:	40 e0       	ldi	r20, 0x00	; 0
    4660:	51 ee       	ldi	r21, 0xE1	; 225
    4662:	60 e0       	ldi	r22, 0x00	; 0
    4664:	70 e0       	ldi	r23, 0x00	; 0
    4666:	8c 2f       	mov	r24, r28
    4668:	71 d4       	rcall	.+2274   	; 0x4f4c <serial_new_instance>
    466a:	90 93 12 1a 	sts	0x1A12, r25	; 0x801a12 <_rn2483_serial+0x1>
    466e:	80 93 11 1a 	sts	0x1A11, r24	; 0x801a11 <_rn2483_serial>
    4672:	e0 91 11 1b 	lds	r30, 0x1B11	; 0x801b11 <register_access+0x8>
    4676:	f0 91 12 1b 	lds	r31, 0x1B12	; 0x801b12 <register_access+0x9>
    467a:	64 e0       	ldi	r22, 0x04	; 4
    467c:	87 e0       	ldi	r24, 0x07	; 7
    467e:	91 e0       	ldi	r25, 0x01	; 1
    4680:	19 95       	eicall
    4682:	cf 91       	pop	r28
    4684:	1f 91       	pop	r17
    4686:	0f 91       	pop	r16
    4688:	ef 90       	pop	r14
    468a:	cf 90       	pop	r12
    468c:	af 90       	pop	r10
    468e:	9f 90       	pop	r9
    4690:	8f 90       	pop	r8
    4692:	08 95       	ret

00004694 <lora_driver_reset_rn2483>:
    4694:	88 23       	and	r24, r24
    4696:	49 f0       	breq	.+18     	; 0x46aa <lora_driver_reset_rn2483+0x16>
    4698:	e0 91 1b 1b 	lds	r30, 0x1B1B	; 0x801b1b <register_access+0x12>
    469c:	f0 91 1c 1b 	lds	r31, 0x1B1C	; 0x801b1c <register_access+0x13>
    46a0:	64 e0       	ldi	r22, 0x04	; 4
    46a2:	88 e0       	ldi	r24, 0x08	; 8
    46a4:	91 e0       	ldi	r25, 0x01	; 1
    46a6:	19 95       	eicall
    46a8:	08 95       	ret
    46aa:	e0 91 11 1b 	lds	r30, 0x1B11	; 0x801b11 <register_access+0x8>
    46ae:	f0 91 12 1b 	lds	r31, 0x1B12	; 0x801b12 <register_access+0x9>
    46b2:	64 e0       	ldi	r22, 0x04	; 4
    46b4:	88 e0       	ldi	r24, 0x08	; 8
    46b6:	91 e0       	ldi	r25, 0x01	; 1
    46b8:	19 95       	eicall
    46ba:	08 95       	ret

000046bc <lora_driver_rn2483_factory_reset>:
    46bc:	60 e0       	ldi	r22, 0x00	; 0
    46be:	70 e0       	ldi	r23, 0x00	; 0
    46c0:	88 eb       	ldi	r24, 0xB8	; 184
    46c2:	95 e0       	ldi	r25, 0x05	; 5
    46c4:	cb de       	rcall	.-618    	; 0x445c <_upload_message>
    46c6:	e8 e9       	ldi	r30, 0x98	; 152
    46c8:	fa e1       	ldi	r31, 0x1A	; 26
    46ca:	01 90       	ld	r0, Z+
    46cc:	00 20       	and	r0, r0
    46ce:	e9 f7       	brne	.-6      	; 0x46ca <lora_driver_rn2483_factory_reset+0xe>
    46d0:	31 97       	sbiw	r30, 0x01	; 1
    46d2:	e8 59       	subi	r30, 0x98	; 152
    46d4:	fa 41       	sbci	r31, 0x1A	; 26
    46d6:	81 e0       	ldi	r24, 0x01	; 1
    46d8:	75 97       	sbiw	r30, 0x15	; 21
    46da:	08 f0       	brcs	.+2      	; 0x46de <lora_driver_rn2483_factory_reset+0x22>
    46dc:	80 e0       	ldi	r24, 0x00	; 0
    46de:	08 95       	ret

000046e0 <lora_driver_get_rn2483_hweui>:
    46e0:	cf 93       	push	r28
    46e2:	df 93       	push	r29
    46e4:	ec 01       	movw	r28, r24
    46e6:	60 e0       	ldi	r22, 0x00	; 0
    46e8:	70 e0       	ldi	r23, 0x00	; 0
    46ea:	89 ec       	ldi	r24, 0xC9	; 201
    46ec:	95 e0       	ldi	r25, 0x05	; 5
    46ee:	b6 de       	rcall	.-660    	; 0x445c <_upload_message>
    46f0:	e8 e9       	ldi	r30, 0x98	; 152
    46f2:	fa e1       	ldi	r31, 0x1A	; 26
    46f4:	01 90       	ld	r0, Z+
    46f6:	00 20       	and	r0, r0
    46f8:	e9 f7       	brne	.-6      	; 0x46f4 <lora_driver_get_rn2483_hweui+0x14>
    46fa:	e9 5a       	subi	r30, 0xA9	; 169
    46fc:	fa 41       	sbci	r31, 0x1A	; 26
    46fe:	39 f4       	brne	.+14     	; 0x470e <lora_driver_get_rn2483_hweui+0x2e>
    4700:	68 e9       	ldi	r22, 0x98	; 152
    4702:	7a e1       	ldi	r23, 0x1A	; 26
    4704:	ce 01       	movw	r24, r28
    4706:	0e 94 3a 31 	call	0x6274	; 0x6274 <strcpy>
    470a:	80 e0       	ldi	r24, 0x00	; 0
    470c:	02 c0       	rjmp	.+4      	; 0x4712 <lora_driver_get_rn2483_hweui+0x32>
    470e:	18 82       	st	Y, r1
    4710:	81 e0       	ldi	r24, 0x01	; 1
    4712:	df 91       	pop	r29
    4714:	cf 91       	pop	r28
    4716:	08 95       	ret

00004718 <lora_driver_set_device_identifier>:
    4718:	fc 01       	movw	r30, r24
    471a:	01 90       	ld	r0, Z+
    471c:	00 20       	and	r0, r0
    471e:	e9 f7       	brne	.-6      	; 0x471a <lora_driver_set_device_identifier+0x2>
    4720:	9f 01       	movw	r18, r30
    4722:	21 51       	subi	r18, 0x11	; 17
    4724:	31 09       	sbc	r19, r1
    4726:	28 17       	cp	r18, r24
    4728:	39 07       	cpc	r19, r25
    472a:	29 f4       	brne	.+10     	; 0x4736 <lora_driver_set_device_identifier+0x1e>
    472c:	bc 01       	movw	r22, r24
    472e:	87 ef       	ldi	r24, 0xF7	; 247
    4730:	95 e0       	ldi	r25, 0x05	; 5
    4732:	63 cf       	rjmp	.-314    	; 0x45fa <_upload_message_rc>
    4734:	08 95       	ret
    4736:	89 e0       	ldi	r24, 0x09	; 9
    4738:	08 95       	ret

0000473a <lora_driver_set_application_identifier>:
    473a:	fc 01       	movw	r30, r24
    473c:	01 90       	ld	r0, Z+
    473e:	00 20       	and	r0, r0
    4740:	e9 f7       	brne	.-6      	; 0x473c <lora_driver_set_application_identifier+0x2>
    4742:	9f 01       	movw	r18, r30
    4744:	21 51       	subi	r18, 0x11	; 17
    4746:	31 09       	sbc	r19, r1
    4748:	28 17       	cp	r18, r24
    474a:	39 07       	cpc	r19, r25
    474c:	29 f4       	brne	.+10     	; 0x4758 <lora_driver_set_application_identifier+0x1e>
    474e:	bc 01       	movw	r22, r24
    4750:	86 e0       	ldi	r24, 0x06	; 6
    4752:	96 e0       	ldi	r25, 0x06	; 6
    4754:	52 cf       	rjmp	.-348    	; 0x45fa <_upload_message_rc>
    4756:	08 95       	ret
    4758:	89 e0       	ldi	r24, 0x09	; 9
    475a:	08 95       	ret

0000475c <lora_driver_set_application_key>:
    475c:	fc 01       	movw	r30, r24
    475e:	01 90       	ld	r0, Z+
    4760:	00 20       	and	r0, r0
    4762:	e9 f7       	brne	.-6      	; 0x475e <lora_driver_set_application_key+0x2>
    4764:	9f 01       	movw	r18, r30
    4766:	21 52       	subi	r18, 0x21	; 33
    4768:	31 09       	sbc	r19, r1
    476a:	28 17       	cp	r18, r24
    476c:	39 07       	cpc	r19, r25
    476e:	29 f4       	brne	.+10     	; 0x477a <lora_driver_set_application_key+0x1e>
    4770:	bc 01       	movw	r22, r24
    4772:	85 e1       	ldi	r24, 0x15	; 21
    4774:	96 e0       	ldi	r25, 0x06	; 6
    4776:	41 cf       	rjmp	.-382    	; 0x45fa <_upload_message_rc>
    4778:	08 95       	ret
    477a:	89 e0       	ldi	r24, 0x09	; 9
    477c:	08 95       	ret

0000477e <lora_driver_save_mac>:
    477e:	60 e0       	ldi	r22, 0x00	; 0
    4780:	70 e0       	ldi	r23, 0x00	; 0
    4782:	84 e5       	ldi	r24, 0x54	; 84
    4784:	96 e0       	ldi	r25, 0x06	; 6
    4786:	39 cf       	rjmp	.-398    	; 0x45fa <_upload_message_rc>
    4788:	08 95       	ret

0000478a <lora_driver_join>:
    478a:	0f 93       	push	r16
    478c:	1f 93       	push	r17
    478e:	e8 2f       	mov	r30, r24
    4790:	f0 e0       	ldi	r31, 0x00	; 0
    4792:	ee 0f       	add	r30, r30
    4794:	ff 1f       	adc	r31, r31
    4796:	e2 5d       	subi	r30, 0xD2	; 210
    4798:	f7 4f       	sbci	r31, 0xF7	; 247
    479a:	60 81       	ld	r22, Z
    479c:	71 81       	ldd	r23, Z+1	; 0x01
    479e:	8d e5       	ldi	r24, 0x5D	; 93
    47a0:	96 e0       	ldi	r25, 0x06	; 6
    47a2:	2b df       	rcall	.-426    	; 0x45fa <_upload_message_rc>
    47a4:	81 11       	cpse	r24, r1
    47a6:	14 c0       	rjmp	.+40     	; 0x47d0 <lora_driver_join+0x46>
    47a8:	08 e2       	ldi	r16, 0x28	; 40
    47aa:	15 e0       	ldi	r17, 0x05	; 5
    47ac:	20 e0       	ldi	r18, 0x00	; 0
    47ae:	30 e0       	ldi	r19, 0x00	; 0
    47b0:	4d e2       	ldi	r20, 0x2D	; 45
    47b2:	50 e0       	ldi	r21, 0x00	; 0
    47b4:	68 e9       	ldi	r22, 0x98	; 152
    47b6:	7a e1       	ldi	r23, 0x1A	; 26
    47b8:	80 91 0f 1a 	lds	r24, 0x1A0F	; 0x801a0f <_serial_reply_buffer_handle>
    47bc:	90 91 10 1a 	lds	r25, 0x1A10	; 0x801a10 <_serial_reply_buffer_handle+0x1>
    47c0:	0e 94 ff 13 	call	0x27fe	; 0x27fe <xStreamBufferReceive>
    47c4:	88 23       	and	r24, r24
    47c6:	21 f0       	breq	.+8      	; 0x47d0 <lora_driver_join+0x46>
    47c8:	88 e9       	ldi	r24, 0x98	; 152
    47ca:	9a e1       	ldi	r25, 0x1A	; 26
    47cc:	a1 de       	rcall	.-702    	; 0x4510 <_reply2return_code>
    47ce:	03 c0       	rjmp	.+6      	; 0x47d6 <lora_driver_join+0x4c>
    47d0:	88 e9       	ldi	r24, 0x98	; 152
    47d2:	9a e1       	ldi	r25, 0x1A	; 26
    47d4:	9d de       	rcall	.-710    	; 0x4510 <_reply2return_code>
    47d6:	1f 91       	pop	r17
    47d8:	0f 91       	pop	r16
    47da:	08 95       	ret

000047dc <lora_driver_sent_upload_message>:
    47dc:	0f 93       	push	r16
    47de:	1f 93       	push	r17
    47e0:	cf 93       	push	r28
    47e2:	df 93       	push	r29
    47e4:	1f 92       	push	r1
    47e6:	cd b7       	in	r28, 0x3d	; 61
    47e8:	de b7       	in	r29, 0x3e	; 62
    47ea:	db 01       	movw	r26, r22
    47ec:	11 96       	adiw	r26, 0x01	; 1
    47ee:	9c 91       	ld	r25, X
    47f0:	11 97       	sbiw	r26, 0x01	; 1
    47f2:	95 31       	cpi	r25, 0x15	; 21
    47f4:	08 f0       	brcs	.+2      	; 0x47f8 <lora_driver_sent_upload_message+0x1c>
    47f6:	b4 c0       	rjmp	.+360    	; 0x4960 <lora_driver_sent_upload_message+0x184>
    47f8:	99 23       	and	r25, r25
    47fa:	81 f1       	breq	.+96     	; 0x485c <lora_driver_sent_upload_message+0x80>
    47fc:	60 e0       	ldi	r22, 0x00	; 0
    47fe:	70 e0       	ldi	r23, 0x00	; 0
    4800:	27 2f       	mov	r18, r23
    4802:	30 e0       	ldi	r19, 0x00	; 0
    4804:	46 2f       	mov	r20, r22
    4806:	50 e0       	ldi	r21, 0x00	; 0
    4808:	fd 01       	movw	r30, r26
    480a:	e4 0f       	add	r30, r20
    480c:	f5 1f       	adc	r31, r21
    480e:	92 81       	ldd	r25, Z+2	; 0x02
    4810:	92 95       	swap	r25
    4812:	9f 70       	andi	r25, 0x0F	; 15
    4814:	9a 30       	cpi	r25, 0x0A	; 10
    4816:	10 f0       	brcs	.+4      	; 0x481c <lora_driver_sent_upload_message+0x40>
    4818:	99 5c       	subi	r25, 0xC9	; 201
    481a:	01 c0       	rjmp	.+2      	; 0x481e <lora_driver_sent_upload_message+0x42>
    481c:	90 5d       	subi	r25, 0xD0	; 208
    481e:	f9 01       	movw	r30, r18
    4820:	e7 5d       	subi	r30, 0xD7	; 215
    4822:	f5 4e       	sbci	r31, 0xE5	; 229
    4824:	90 83       	st	Z, r25
    4826:	2f 5f       	subi	r18, 0xFF	; 255
    4828:	3f 4f       	sbci	r19, 0xFF	; 255
    482a:	fd 01       	movw	r30, r26
    482c:	e4 0f       	add	r30, r20
    482e:	f5 1f       	adc	r31, r21
    4830:	92 81       	ldd	r25, Z+2	; 0x02
    4832:	9f 70       	andi	r25, 0x0F	; 15
    4834:	49 2f       	mov	r20, r25
    4836:	50 e0       	ldi	r21, 0x00	; 0
    4838:	4a 30       	cpi	r20, 0x0A	; 10
    483a:	51 05       	cpc	r21, r1
    483c:	14 f0       	brlt	.+4      	; 0x4842 <lora_driver_sent_upload_message+0x66>
    483e:	99 5c       	subi	r25, 0xC9	; 201
    4840:	01 c0       	rjmp	.+2      	; 0x4844 <lora_driver_sent_upload_message+0x68>
    4842:	90 5d       	subi	r25, 0xD0	; 208
    4844:	f9 01       	movw	r30, r18
    4846:	e7 5d       	subi	r30, 0xD7	; 215
    4848:	f5 4e       	sbci	r31, 0xE5	; 229
    484a:	90 83       	st	Z, r25
    484c:	7e 5f       	subi	r23, 0xFE	; 254
    484e:	6f 5f       	subi	r22, 0xFF	; 255
    4850:	11 96       	adiw	r26, 0x01	; 1
    4852:	9c 91       	ld	r25, X
    4854:	11 97       	sbiw	r26, 0x01	; 1
    4856:	69 17       	cp	r22, r25
    4858:	98 f2       	brcs	.-90     	; 0x4800 <lora_driver_sent_upload_message+0x24>
    485a:	01 c0       	rjmp	.+2      	; 0x485e <lora_driver_sent_upload_message+0x82>
    485c:	70 e0       	ldi	r23, 0x00	; 0
    485e:	e7 2f       	mov	r30, r23
    4860:	f0 e0       	ldi	r31, 0x00	; 0
    4862:	e7 5d       	subi	r30, 0xD7	; 215
    4864:	f5 4e       	sbci	r31, 0xE5	; 229
    4866:	10 82       	st	Z, r1
    4868:	4c 91       	ld	r20, X
    486a:	81 11       	cpse	r24, r1
    486c:	03 c0       	rjmp	.+6      	; 0x4874 <lora_driver_sent_upload_message+0x98>
    486e:	86 e6       	ldi	r24, 0x66	; 102
    4870:	96 e0       	ldi	r25, 0x06	; 6
    4872:	02 c0       	rjmp	.+4      	; 0x4878 <lora_driver_sent_upload_message+0x9c>
    4874:	88 e6       	ldi	r24, 0x68	; 104
    4876:	96 e0       	ldi	r25, 0x06	; 6
    4878:	29 e2       	ldi	r18, 0x29	; 41
    487a:	3a e1       	ldi	r19, 0x1A	; 26
    487c:	3f 93       	push	r19
    487e:	2f 93       	push	r18
    4880:	1f 92       	push	r1
    4882:	4f 93       	push	r20
    4884:	9f 93       	push	r25
    4886:	8f 93       	push	r24
    4888:	8c e6       	ldi	r24, 0x6C	; 108
    488a:	96 e0       	ldi	r25, 0x06	; 6
    488c:	9f 93       	push	r25
    488e:	8f 93       	push	r24
    4890:	8b e6       	ldi	r24, 0x6B	; 107
    4892:	9a e1       	ldi	r25, 0x1A	; 26
    4894:	9f 93       	push	r25
    4896:	8f 93       	push	r24
    4898:	0e 94 9c 31 	call	0x6338	; 0x6338 <sprintf>
    489c:	60 e0       	ldi	r22, 0x00	; 0
    489e:	70 e0       	ldi	r23, 0x00	; 0
    48a0:	8b e6       	ldi	r24, 0x6B	; 107
    48a2:	9a e1       	ldi	r25, 0x1A	; 26
    48a4:	aa de       	rcall	.-684    	; 0x45fa <_upload_message_rc>
    48a6:	0f b6       	in	r0, 0x3f	; 63
    48a8:	f8 94       	cli
    48aa:	de bf       	out	0x3e, r29	; 62
    48ac:	0f be       	out	0x3f, r0	; 63
    48ae:	cd bf       	out	0x3d, r28	; 61
    48b0:	81 11       	cpse	r24, r1
    48b2:	59 c0       	rjmp	.+178    	; 0x4966 <lora_driver_sent_upload_message+0x18a>
    48b4:	08 e2       	ldi	r16, 0x28	; 40
    48b6:	15 e0       	ldi	r17, 0x05	; 5
    48b8:	20 e0       	ldi	r18, 0x00	; 0
    48ba:	30 e0       	ldi	r19, 0x00	; 0
    48bc:	4d e2       	ldi	r20, 0x2D	; 45
    48be:	50 e0       	ldi	r21, 0x00	; 0
    48c0:	68 e9       	ldi	r22, 0x98	; 152
    48c2:	7a e1       	ldi	r23, 0x1A	; 26
    48c4:	80 91 0f 1a 	lds	r24, 0x1A0F	; 0x801a0f <_serial_reply_buffer_handle>
    48c8:	90 91 10 1a 	lds	r25, 0x1A10	; 0x801a10 <_serial_reply_buffer_handle+0x1>
    48cc:	0e 94 ff 13 	call	0x27fe	; 0x27fe <xStreamBufferReceive>
    48d0:	88 23       	and	r24, r24
    48d2:	09 f4       	brne	.+2      	; 0x48d6 <lora_driver_sent_upload_message+0xfa>
    48d4:	47 c0       	rjmp	.+142    	; 0x4964 <lora_driver_sent_upload_message+0x188>
    48d6:	88 e9       	ldi	r24, 0x98	; 152
    48d8:	9a e1       	ldi	r25, 0x1A	; 26
    48da:	1a de       	rcall	.-972    	; 0x4510 <_reply2return_code>
    48dc:	8e 30       	cpi	r24, 0x0E	; 14
    48de:	09 f0       	breq	.+2      	; 0x48e2 <lora_driver_sent_upload_message+0x106>
    48e0:	42 c0       	rjmp	.+132    	; 0x4966 <lora_driver_sent_upload_message+0x18a>
    48e2:	87 e0       	ldi	r24, 0x07	; 7
    48e4:	89 83       	std	Y+1, r24	; 0x01
    48e6:	80 91 0d 1a 	lds	r24, 0x1A0D	; 0x801a0d <_downlinkMessageBuffer>
    48ea:	90 91 0e 1a 	lds	r25, 0x1A0E	; 0x801a0e <_downlinkMessageBuffer+0x1>
    48ee:	89 2b       	or	r24, r25
    48f0:	a9 f1       	breq	.+106    	; 0x495c <lora_driver_sent_upload_message+0x180>
    48f2:	be 01       	movw	r22, r28
    48f4:	6f 5f       	subi	r22, 0xFF	; 255
    48f6:	7f 4f       	sbci	r23, 0xFF	; 255
    48f8:	88 e9       	ldi	r24, 0x98	; 152
    48fa:	9a e1       	ldi	r25, 0x1A	; 26
    48fc:	68 d1       	rcall	.+720    	; 0x4bce <decode_port_no>
    48fe:	80 93 13 1a 	sts	0x1A13, r24	; 0x801a13 <_downlink_payload>
    4902:	e9 81       	ldd	r30, Y+1	; 0x01
    4904:	f0 e0       	ldi	r31, 0x00	; 0
    4906:	e8 56       	subi	r30, 0x68	; 104
    4908:	f5 4e       	sbci	r31, 0xE5	; 229
    490a:	df 01       	movw	r26, r30
    490c:	0d 90       	ld	r0, X+
    490e:	00 20       	and	r0, r0
    4910:	e9 f7       	brne	.-6      	; 0x490c <lora_driver_sent_upload_message+0x130>
    4912:	11 97       	sbiw	r26, 0x01	; 1
    4914:	ae 1b       	sub	r26, r30
    4916:	bf 0b       	sbc	r27, r31
    4918:	aa 23       	and	r26, r26
    491a:	91 f0       	breq	.+36     	; 0x4940 <lora_driver_sent_upload_message+0x164>
    491c:	bb 27       	eor	r27, r27
    491e:	cd 01       	movw	r24, r26
    4920:	01 97       	sbiw	r24, 0x01	; 1
    4922:	9c 01       	movw	r18, r24
    4924:	12 f4       	brpl	.+4      	; 0x492a <lora_driver_sent_upload_message+0x14e>
    4926:	2f 5f       	subi	r18, 0xFF	; 255
    4928:	3f 4f       	sbci	r19, 0xFF	; 255
    492a:	35 95       	asr	r19
    492c:	27 95       	ror	r18
    492e:	20 93 14 1a 	sts	0x1A14, r18	; 0x801a14 <_downlink_payload+0x1>
    4932:	af 01       	movw	r20, r30
    4934:	4f 5f       	subi	r20, 0xFF	; 255
    4936:	5f 4f       	sbci	r21, 0xFF	; 255
    4938:	64 e1       	ldi	r22, 0x14	; 20
    493a:	85 e1       	ldi	r24, 0x15	; 21
    493c:	9a e1       	ldi	r25, 0x1A	; 26
    493e:	73 d1       	rcall	.+742    	; 0x4c26 <decode_hexadecimal_string_bytes>
    4940:	01 e0       	ldi	r16, 0x01	; 1
    4942:	10 e0       	ldi	r17, 0x00	; 0
    4944:	20 e0       	ldi	r18, 0x00	; 0
    4946:	30 e0       	ldi	r19, 0x00	; 0
    4948:	46 e1       	ldi	r20, 0x16	; 22
    494a:	50 e0       	ldi	r21, 0x00	; 0
    494c:	63 e1       	ldi	r22, 0x13	; 19
    494e:	7a e1       	ldi	r23, 0x1A	; 26
    4950:	80 91 0d 1a 	lds	r24, 0x1A0D	; 0x801a0d <_downlinkMessageBuffer>
    4954:	90 91 0e 1a 	lds	r25, 0x1A0E	; 0x801a0e <_downlinkMessageBuffer+0x1>
    4958:	0e 94 12 13 	call	0x2624	; 0x2624 <xStreamBufferSend>
    495c:	8e e0       	ldi	r24, 0x0E	; 14
    495e:	03 c0       	rjmp	.+6      	; 0x4966 <lora_driver_sent_upload_message+0x18a>
    4960:	84 e1       	ldi	r24, 0x14	; 20
    4962:	01 c0       	rjmp	.+2      	; 0x4966 <lora_driver_sent_upload_message+0x18a>
    4964:	80 e0       	ldi	r24, 0x00	; 0
    4966:	0f 90       	pop	r0
    4968:	df 91       	pop	r29
    496a:	cf 91       	pop	r28
    496c:	1f 91       	pop	r17
    496e:	0f 91       	pop	r16
    4970:	08 95       	ret

00004972 <lora_driver_set_adaptive_data_rate>:
    4972:	81 30       	cpi	r24, 0x01	; 1
    4974:	19 f0       	breq	.+6      	; 0x497c <lora_driver_set_adaptive_data_rate+0xa>
    4976:	6c e7       	ldi	r22, 0x7C	; 124
    4978:	76 e0       	ldi	r23, 0x06	; 6
    497a:	02 c0       	rjmp	.+4      	; 0x4980 <lora_driver_set_adaptive_data_rate+0xe>
    497c:	65 e5       	ldi	r22, 0x55	; 85
    497e:	77 e0       	ldi	r23, 0x07	; 7
    4980:	80 e8       	ldi	r24, 0x80	; 128
    4982:	96 e0       	ldi	r25, 0x06	; 6
    4984:	3a ce       	rjmp	.-908    	; 0x45fa <_upload_message_rc>
    4986:	08 95       	ret

00004988 <lora_driver_set_receive_delay>:
    4988:	9f 93       	push	r25
    498a:	8f 93       	push	r24
    498c:	81 eb       	ldi	r24, 0xB1	; 177
    498e:	96 e0       	ldi	r25, 0x06	; 6
    4990:	9f 93       	push	r25
    4992:	8f 93       	push	r24
    4994:	8b e6       	ldi	r24, 0x6B	; 107
    4996:	9a e1       	ldi	r25, 0x1A	; 26
    4998:	9f 93       	push	r25
    499a:	8f 93       	push	r24
    499c:	0e 94 9c 31 	call	0x6338	; 0x6338 <sprintf>
    49a0:	60 e0       	ldi	r22, 0x00	; 0
    49a2:	70 e0       	ldi	r23, 0x00	; 0
    49a4:	8b e6       	ldi	r24, 0x6B	; 107
    49a6:	9a e1       	ldi	r25, 0x1A	; 26
    49a8:	28 de       	rcall	.-944    	; 0x45fa <_upload_message_rc>
    49aa:	0f 90       	pop	r0
    49ac:	0f 90       	pop	r0
    49ae:	0f 90       	pop	r0
    49b0:	0f 90       	pop	r0
    49b2:	0f 90       	pop	r0
    49b4:	0f 90       	pop	r0
    49b6:	08 95       	ret

000049b8 <lora_driver_configure_to_eu868>:
    49b8:	2f 92       	push	r2
    49ba:	3f 92       	push	r3
    49bc:	4f 92       	push	r4
    49be:	5f 92       	push	r5
    49c0:	6f 92       	push	r6
    49c2:	7f 92       	push	r7
    49c4:	8f 92       	push	r8
    49c6:	9f 92       	push	r9
    49c8:	af 92       	push	r10
    49ca:	bf 92       	push	r11
    49cc:	cf 92       	push	r12
    49ce:	df 92       	push	r13
    49d0:	ef 92       	push	r14
    49d2:	ff 92       	push	r15
    49d4:	0f 93       	push	r16
    49d6:	1f 93       	push	r17
    49d8:	cf 93       	push	r28
    49da:	df 93       	push	r29
    49dc:	cd b7       	in	r28, 0x3d	; 61
    49de:	de b7       	in	r29, 0x3e	; 62
    49e0:	a0 97       	sbiw	r28, 0x20	; 32
    49e2:	0f b6       	in	r0, 0x3f	; 63
    49e4:	f8 94       	cli
    49e6:	de bf       	out	0x3e, r29	; 62
    49e8:	0f be       	out	0x3f, r0	; 63
    49ea:	cd bf       	out	0x3d, r28	; 61
    49ec:	6e ed       	ldi	r22, 0xDE	; 222
    49ee:	76 e0       	ldi	r23, 0x06	; 6
    49f0:	8a ee       	ldi	r24, 0xEA	; 234
    49f2:	96 e0       	ldi	r25, 0x06	; 6
    49f4:	33 dd       	rcall	.-1434   	; 0x445c <_upload_message>
    49f6:	8c dd       	rcall	.-1256   	; 0x4510 <_reply2return_code>
    49f8:	81 11       	cpse	r24, r1
    49fa:	a3 c0       	rjmp	.+326    	; 0x4b42 <lora_driver_configure_to_eu868+0x18a>
    49fc:	80 e2       	ldi	r24, 0x20	; 32
    49fe:	e5 e2       	ldi	r30, 0x25	; 37
    4a00:	f2 e0       	ldi	r31, 0x02	; 2
    4a02:	de 01       	movw	r26, r28
    4a04:	11 96       	adiw	r26, 0x01	; 1
    4a06:	01 90       	ld	r0, Z+
    4a08:	0d 92       	st	X+, r0
    4a0a:	8a 95       	dec	r24
    4a0c:	e1 f7       	brne	.-8      	; 0x4a06 <lora_driver_configure_to_eu868+0x4e>
    4a0e:	9e 01       	movw	r18, r28
    4a10:	2f 5f       	subi	r18, 0xFF	; 255
    4a12:	3f 4f       	sbci	r19, 0xFF	; 255
    4a14:	69 01       	movw	r12, r18
    4a16:	e1 2c       	mov	r14, r1
    4a18:	f1 2c       	mov	r15, r1
    4a1a:	0f 2e       	mov	r0, r31
    4a1c:	f6 ef       	ldi	r31, 0xF6	; 246
    4a1e:	af 2e       	mov	r10, r31
    4a20:	f6 e0       	ldi	r31, 0x06	; 6
    4a22:	bf 2e       	mov	r11, r31
    4a24:	f0 2d       	mov	r31, r0
    4a26:	0b e6       	ldi	r16, 0x6B	; 107
    4a28:	1a e1       	ldi	r17, 0x1A	; 26
    4a2a:	0f 2e       	mov	r0, r31
    4a2c:	ff e0       	ldi	r31, 0x0F	; 15
    4a2e:	4f 2e       	mov	r4, r31
    4a30:	f7 e0       	ldi	r31, 0x07	; 7
    4a32:	5f 2e       	mov	r5, r31
    4a34:	f0 2d       	mov	r31, r0
    4a36:	0f 2e       	mov	r0, r31
    4a38:	f6 e2       	ldi	r31, 0x26	; 38
    4a3a:	8f 2e       	mov	r8, r31
    4a3c:	f7 e0       	ldi	r31, 0x07	; 7
    4a3e:	9f 2e       	mov	r9, r31
    4a40:	f0 2d       	mov	r31, r0
    4a42:	0f 2e       	mov	r0, r31
    4a44:	f0 e4       	ldi	r31, 0x40	; 64
    4a46:	6f 2e       	mov	r6, r31
    4a48:	f7 e0       	ldi	r31, 0x07	; 7
    4a4a:	7f 2e       	mov	r7, r31
    4a4c:	f0 2d       	mov	r31, r0
    4a4e:	3e 2c       	mov	r3, r14
    4a50:	2f 2c       	mov	r2, r15
    4a52:	ff 92       	push	r15
    4a54:	ef 92       	push	r14
    4a56:	bf 92       	push	r11
    4a58:	af 92       	push	r10
    4a5a:	1f 93       	push	r17
    4a5c:	0f 93       	push	r16
    4a5e:	0e 94 9c 31 	call	0x6338	; 0x6338 <sprintf>
    4a62:	60 e0       	ldi	r22, 0x00	; 0
    4a64:	70 e0       	ldi	r23, 0x00	; 0
    4a66:	c8 01       	movw	r24, r16
    4a68:	f9 dc       	rcall	.-1550   	; 0x445c <_upload_message>
    4a6a:	52 dd       	rcall	.-1372   	; 0x4510 <_reply2return_code>
    4a6c:	0f 90       	pop	r0
    4a6e:	0f 90       	pop	r0
    4a70:	0f 90       	pop	r0
    4a72:	0f 90       	pop	r0
    4a74:	0f 90       	pop	r0
    4a76:	0f 90       	pop	r0
    4a78:	81 11       	cpse	r24, r1
    4a7a:	63 c0       	rjmp	.+198    	; 0x4b42 <lora_driver_configure_to_eu868+0x18a>
    4a7c:	32 e0       	ldi	r19, 0x02	; 2
    4a7e:	3e 15       	cp	r19, r14
    4a80:	e8 f4       	brcc	.+58     	; 0x4abc <lora_driver_configure_to_eu868+0x104>
    4a82:	f6 01       	movw	r30, r12
    4a84:	83 81       	ldd	r24, Z+3	; 0x03
    4a86:	8f 93       	push	r24
    4a88:	82 81       	ldd	r24, Z+2	; 0x02
    4a8a:	8f 93       	push	r24
    4a8c:	81 81       	ldd	r24, Z+1	; 0x01
    4a8e:	8f 93       	push	r24
    4a90:	80 81       	ld	r24, Z
    4a92:	8f 93       	push	r24
    4a94:	ff 92       	push	r15
    4a96:	ef 92       	push	r14
    4a98:	5f 92       	push	r5
    4a9a:	4f 92       	push	r4
    4a9c:	1f 93       	push	r17
    4a9e:	0f 93       	push	r16
    4aa0:	0e 94 9c 31 	call	0x6338	; 0x6338 <sprintf>
    4aa4:	60 e0       	ldi	r22, 0x00	; 0
    4aa6:	70 e0       	ldi	r23, 0x00	; 0
    4aa8:	c8 01       	movw	r24, r16
    4aaa:	d8 dc       	rcall	.-1616   	; 0x445c <_upload_message>
    4aac:	31 dd       	rcall	.-1438   	; 0x4510 <_reply2return_code>
    4aae:	0f b6       	in	r0, 0x3f	; 63
    4ab0:	f8 94       	cli
    4ab2:	de bf       	out	0x3e, r29	; 62
    4ab4:	0f be       	out	0x3f, r0	; 63
    4ab6:	cd bf       	out	0x3d, r28	; 61
    4ab8:	81 11       	cpse	r24, r1
    4aba:	43 c0       	rjmp	.+134    	; 0x4b42 <lora_driver_configure_to_eu868+0x18a>
    4abc:	2f 92       	push	r2
    4abe:	3f 92       	push	r3
    4ac0:	9f 92       	push	r9
    4ac2:	8f 92       	push	r8
    4ac4:	1f 93       	push	r17
    4ac6:	0f 93       	push	r16
    4ac8:	0e 94 9c 31 	call	0x6338	; 0x6338 <sprintf>
    4acc:	60 e0       	ldi	r22, 0x00	; 0
    4ace:	70 e0       	ldi	r23, 0x00	; 0
    4ad0:	c8 01       	movw	r24, r16
    4ad2:	c4 dc       	rcall	.-1656   	; 0x445c <_upload_message>
    4ad4:	1d dd       	rcall	.-1478   	; 0x4510 <_reply2return_code>
    4ad6:	0f 90       	pop	r0
    4ad8:	0f 90       	pop	r0
    4ada:	0f 90       	pop	r0
    4adc:	0f 90       	pop	r0
    4ade:	0f 90       	pop	r0
    4ae0:	0f 90       	pop	r0
    4ae2:	81 11       	cpse	r24, r1
    4ae4:	2e c0       	rjmp	.+92     	; 0x4b42 <lora_driver_configure_to_eu868+0x18a>
    4ae6:	2f 92       	push	r2
    4ae8:	3f 92       	push	r3
    4aea:	7f 92       	push	r7
    4aec:	6f 92       	push	r6
    4aee:	1f 93       	push	r17
    4af0:	0f 93       	push	r16
    4af2:	0e 94 9c 31 	call	0x6338	; 0x6338 <sprintf>
    4af6:	60 e0       	ldi	r22, 0x00	; 0
    4af8:	70 e0       	ldi	r23, 0x00	; 0
    4afa:	c8 01       	movw	r24, r16
    4afc:	af dc       	rcall	.-1698   	; 0x445c <_upload_message>
    4afe:	08 dd       	rcall	.-1520   	; 0x4510 <_reply2return_code>
    4b00:	0f 90       	pop	r0
    4b02:	0f 90       	pop	r0
    4b04:	0f 90       	pop	r0
    4b06:	0f 90       	pop	r0
    4b08:	0f 90       	pop	r0
    4b0a:	0f 90       	pop	r0
    4b0c:	81 11       	cpse	r24, r1
    4b0e:	19 c0       	rjmp	.+50     	; 0x4b42 <lora_driver_configure_to_eu868+0x18a>
    4b10:	3f ef       	ldi	r19, 0xFF	; 255
    4b12:	e3 1a       	sub	r14, r19
    4b14:	f3 0a       	sbc	r15, r19
    4b16:	84 e0       	ldi	r24, 0x04	; 4
    4b18:	c8 0e       	add	r12, r24
    4b1a:	d1 1c       	adc	r13, r1
    4b1c:	98 e0       	ldi	r25, 0x08	; 8
    4b1e:	e9 16       	cp	r14, r25
    4b20:	f1 04       	cpc	r15, r1
    4b22:	09 f0       	breq	.+2      	; 0x4b26 <lora_driver_configure_to_eu868+0x16e>
    4b24:	94 cf       	rjmp	.-216    	; 0x4a4e <lora_driver_configure_to_eu868+0x96>
    4b26:	60 e0       	ldi	r22, 0x00	; 0
    4b28:	70 e0       	ldi	r23, 0x00	; 0
    4b2a:	88 e5       	ldi	r24, 0x58	; 88
    4b2c:	97 e0       	ldi	r25, 0x07	; 7
    4b2e:	96 dc       	rcall	.-1748   	; 0x445c <_upload_message>
    4b30:	ef dc       	rcall	.-1570   	; 0x4510 <_reply2return_code>
    4b32:	81 11       	cpse	r24, r1
    4b34:	06 c0       	rjmp	.+12     	; 0x4b42 <lora_driver_configure_to_eu868+0x18a>
    4b36:	60 e0       	ldi	r22, 0x00	; 0
    4b38:	70 e0       	ldi	r23, 0x00	; 0
    4b3a:	89 e6       	ldi	r24, 0x69	; 105
    4b3c:	97 e0       	ldi	r25, 0x07	; 7
    4b3e:	8e dc       	rcall	.-1764   	; 0x445c <_upload_message>
    4b40:	e7 dc       	rcall	.-1586   	; 0x4510 <_reply2return_code>
    4b42:	a0 96       	adiw	r28, 0x20	; 32
    4b44:	0f b6       	in	r0, 0x3f	; 63
    4b46:	f8 94       	cli
    4b48:	de bf       	out	0x3e, r29	; 62
    4b4a:	0f be       	out	0x3f, r0	; 63
    4b4c:	cd bf       	out	0x3d, r28	; 61
    4b4e:	df 91       	pop	r29
    4b50:	cf 91       	pop	r28
    4b52:	1f 91       	pop	r17
    4b54:	0f 91       	pop	r16
    4b56:	ff 90       	pop	r15
    4b58:	ef 90       	pop	r14
    4b5a:	df 90       	pop	r13
    4b5c:	cf 90       	pop	r12
    4b5e:	bf 90       	pop	r11
    4b60:	af 90       	pop	r10
    4b62:	9f 90       	pop	r9
    4b64:	8f 90       	pop	r8
    4b66:	7f 90       	pop	r7
    4b68:	6f 90       	pop	r6
    4b6a:	5f 90       	pop	r5
    4b6c:	4f 90       	pop	r4
    4b6e:	3f 90       	pop	r3
    4b70:	2f 90       	pop	r2
    4b72:	08 95       	ret

00004b74 <lora_driver_set_otaa_identity>:
    4b74:	ef 92       	push	r14
    4b76:	ff 92       	push	r15
    4b78:	0f 93       	push	r16
    4b7a:	1f 93       	push	r17
    4b7c:	cf 93       	push	r28
    4b7e:	df 93       	push	r29
    4b80:	ec 01       	movw	r28, r24
    4b82:	8b 01       	movw	r16, r22
    4b84:	7a 01       	movw	r14, r20
    4b86:	81 e0       	ldi	r24, 0x01	; 1
    4b88:	f4 de       	rcall	.-536    	; 0x4972 <lora_driver_set_adaptive_data_rate>
    4b8a:	81 11       	cpse	r24, r1
    4b8c:	0d c0       	rjmp	.+26     	; 0x4ba8 <lora_driver_set_otaa_identity+0x34>
    4b8e:	ce 01       	movw	r24, r28
    4b90:	d4 dd       	rcall	.-1112   	; 0x473a <lora_driver_set_application_identifier>
    4b92:	81 11       	cpse	r24, r1
    4b94:	09 c0       	rjmp	.+18     	; 0x4ba8 <lora_driver_set_otaa_identity+0x34>
    4b96:	c8 01       	movw	r24, r16
    4b98:	e1 dd       	rcall	.-1086   	; 0x475c <lora_driver_set_application_key>
    4b9a:	81 11       	cpse	r24, r1
    4b9c:	05 c0       	rjmp	.+10     	; 0x4ba8 <lora_driver_set_otaa_identity+0x34>
    4b9e:	c7 01       	movw	r24, r14
    4ba0:	bb dd       	rcall	.-1162   	; 0x4718 <lora_driver_set_device_identifier>
    4ba2:	81 11       	cpse	r24, r1
    4ba4:	01 c0       	rjmp	.+2      	; 0x4ba8 <lora_driver_set_otaa_identity+0x34>
    4ba6:	eb dd       	rcall	.-1066   	; 0x477e <lora_driver_save_mac>
    4ba8:	df 91       	pop	r29
    4baa:	cf 91       	pop	r28
    4bac:	1f 91       	pop	r17
    4bae:	0f 91       	pop	r16
    4bb0:	ff 90       	pop	r15
    4bb2:	ef 90       	pop	r14
    4bb4:	08 95       	ret

00004bb6 <lora_driver_map_return_code_to_text>:
    4bb6:	90 e0       	ldi	r25, 0x00	; 0
    4bb8:	fc 01       	movw	r30, r24
    4bba:	ee 0f       	add	r30, r30
    4bbc:	ff 1f       	adc	r31, r31
    4bbe:	8e 0f       	add	r24, r30
    4bc0:	9f 1f       	adc	r25, r31
    4bc2:	fc 01       	movw	r30, r24
    4bc4:	ee 5c       	subi	r30, 0xCE	; 206
    4bc6:	f7 4f       	sbci	r31, 0xF7	; 247
    4bc8:	81 81       	ldd	r24, Z+1	; 0x01
    4bca:	92 81       	ldd	r25, Z+2	; 0x02
    4bcc:	08 95       	ret

00004bce <decode_port_no>:
    4bce:	dc 01       	movw	r26, r24
    4bd0:	00 97       	sbiw	r24, 0x00	; 0
    4bd2:	29 f1       	breq	.+74     	; 0x4c1e <decode_port_no+0x50>
    4bd4:	fb 01       	movw	r30, r22
    4bd6:	20 81       	ld	r18, Z
    4bd8:	fc 01       	movw	r30, r24
    4bda:	01 90       	ld	r0, Z+
    4bdc:	00 20       	and	r0, r0
    4bde:	e9 f7       	brne	.-6      	; 0x4bda <decode_port_no+0xc>
    4be0:	31 97       	sbiw	r30, 0x01	; 1
    4be2:	e8 1b       	sub	r30, r24
    4be4:	f9 0b       	sbc	r31, r25
    4be6:	82 2f       	mov	r24, r18
    4be8:	90 e0       	ldi	r25, 0x00	; 0
    4bea:	e8 17       	cp	r30, r24
    4bec:	f9 07       	cpc	r31, r25
    4bee:	c8 f0       	brcs	.+50     	; 0x4c22 <decode_port_no+0x54>
    4bf0:	80 e0       	ldi	r24, 0x00	; 0
    4bf2:	08 c0       	rjmp	.+16     	; 0x4c04 <decode_port_no+0x36>
    4bf4:	88 0f       	add	r24, r24
    4bf6:	38 2f       	mov	r19, r24
    4bf8:	33 0f       	add	r19, r19
    4bfa:	33 0f       	add	r19, r19
    4bfc:	83 0f       	add	r24, r19
    4bfe:	80 53       	subi	r24, 0x30	; 48
    4c00:	89 0f       	add	r24, r25
    4c02:	2f 5f       	subi	r18, 0xFF	; 255
    4c04:	fd 01       	movw	r30, r26
    4c06:	e2 0f       	add	r30, r18
    4c08:	f1 1d       	adc	r31, r1
    4c0a:	90 81       	ld	r25, Z
    4c0c:	30 ed       	ldi	r19, 0xD0	; 208
    4c0e:	39 0f       	add	r19, r25
    4c10:	3a 30       	cpi	r19, 0x0A	; 10
    4c12:	10 f4       	brcc	.+4      	; 0x4c18 <decode_port_no+0x4a>
    4c14:	91 11       	cpse	r25, r1
    4c16:	ee cf       	rjmp	.-36     	; 0x4bf4 <decode_port_no+0x26>
    4c18:	fb 01       	movw	r30, r22
    4c1a:	20 83       	st	Z, r18
    4c1c:	08 95       	ret
    4c1e:	80 e0       	ldi	r24, 0x00	; 0
    4c20:	08 95       	ret
    4c22:	80 e0       	ldi	r24, 0x00	; 0
    4c24:	08 95       	ret

00004c26 <decode_hexadecimal_string_bytes>:
    4c26:	0f 93       	push	r16
    4c28:	1f 93       	push	r17
    4c2a:	cf 93       	push	r28
    4c2c:	df 93       	push	r29
    4c2e:	dc 01       	movw	r26, r24
    4c30:	ea 01       	movw	r28, r20
    4c32:	20 97       	sbiw	r28, 0x00	; 0
    4c34:	e1 f1       	breq	.+120    	; 0x4cae <decode_hexadecimal_string_bytes+0x88>
    4c36:	fa 01       	movw	r30, r20
    4c38:	01 90       	ld	r0, Z+
    4c3a:	00 20       	and	r0, r0
    4c3c:	e9 f7       	brne	.-6      	; 0x4c38 <decode_hexadecimal_string_bytes+0x12>
    4c3e:	31 97       	sbiw	r30, 0x01	; 1
    4c40:	e4 1b       	sub	r30, r20
    4c42:	f5 0b       	sbc	r31, r21
    4c44:	32 97       	sbiw	r30, 0x02	; 2
    4c46:	10 f5       	brcc	.+68     	; 0x4c8c <decode_hexadecimal_string_bytes+0x66>
    4c48:	32 c0       	rjmp	.+100    	; 0x4cae <decode_hexadecimal_string_bytes+0x88>
    4c4a:	8d 01       	movw	r16, r26
    4c4c:	04 0f       	add	r16, r20
    4c4e:	15 1f       	adc	r17, r21
    4c50:	30 e0       	ldi	r19, 0x00	; 0
    4c52:	ae 01       	movw	r20, r28
    4c54:	42 0f       	add	r20, r18
    4c56:	53 1f       	adc	r21, r19
    4c58:	fa 01       	movw	r30, r20
    4c5a:	90 81       	ld	r25, Z
    4c5c:	91 34       	cpi	r25, 0x41	; 65
    4c5e:	28 f0       	brcs	.+10     	; 0x4c6a <decode_hexadecimal_string_bytes+0x44>
    4c60:	97 53       	subi	r25, 0x37	; 55
    4c62:	59 2f       	mov	r21, r25
    4c64:	52 95       	swap	r21
    4c66:	50 7f       	andi	r21, 0xF0	; 240
    4c68:	03 c0       	rjmp	.+6      	; 0x4c70 <decode_hexadecimal_string_bytes+0x4a>
    4c6a:	59 2f       	mov	r21, r25
    4c6c:	52 95       	swap	r21
    4c6e:	50 7f       	andi	r21, 0xF0	; 240
    4c70:	2c 0f       	add	r18, r28
    4c72:	3d 1f       	adc	r19, r29
    4c74:	f9 01       	movw	r30, r18
    4c76:	91 81       	ldd	r25, Z+1	; 0x01
    4c78:	91 34       	cpi	r25, 0x41	; 65
    4c7a:	10 f0       	brcs	.+4      	; 0x4c80 <decode_hexadecimal_string_bytes+0x5a>
    4c7c:	97 53       	subi	r25, 0x37	; 55
    4c7e:	01 c0       	rjmp	.+2      	; 0x4c82 <decode_hexadecimal_string_bytes+0x5c>
    4c80:	90 53       	subi	r25, 0x30	; 48
    4c82:	95 0f       	add	r25, r21
    4c84:	f8 01       	movw	r30, r16
    4c86:	90 83       	st	Z, r25
    4c88:	8f 5f       	subi	r24, 0xFF	; 255
    4c8a:	01 c0       	rjmp	.+2      	; 0x4c8e <decode_hexadecimal_string_bytes+0x68>
    4c8c:	80 e0       	ldi	r24, 0x00	; 0
    4c8e:	28 2f       	mov	r18, r24
    4c90:	22 0f       	add	r18, r18
    4c92:	48 2f       	mov	r20, r24
    4c94:	50 e0       	ldi	r21, 0x00	; 0
    4c96:	fe 01       	movw	r30, r28
    4c98:	01 90       	ld	r0, Z+
    4c9a:	00 20       	and	r0, r0
    4c9c:	e9 f7       	brne	.-6      	; 0x4c98 <decode_hexadecimal_string_bytes+0x72>
    4c9e:	31 97       	sbiw	r30, 0x01	; 1
    4ca0:	ec 1b       	sub	r30, r28
    4ca2:	fd 0b       	sbc	r31, r29
    4ca4:	4e 17       	cp	r20, r30
    4ca6:	5f 07       	cpc	r21, r31
    4ca8:	10 f4       	brcc	.+4      	; 0x4cae <decode_hexadecimal_string_bytes+0x88>
    4caa:	86 13       	cpse	r24, r22
    4cac:	ce cf       	rjmp	.-100    	; 0x4c4a <decode_hexadecimal_string_bytes+0x24>
    4cae:	df 91       	pop	r29
    4cb0:	cf 91       	pop	r28
    4cb2:	1f 91       	pop	r17
    4cb4:	0f 91       	pop	r16
    4cb6:	08 95       	ret

00004cb8 <reg_read_register>:
    4cb8:	fc 01       	movw	r30, r24
    4cba:	80 81       	ld	r24, Z
    4cbc:	08 95       	ret

00004cbe <reg_read_bit>:
    4cbe:	fc 01       	movw	r30, r24
    4cc0:	20 81       	ld	r18, Z
    4cc2:	81 e0       	ldi	r24, 0x01	; 1
    4cc4:	90 e0       	ldi	r25, 0x00	; 0
    4cc6:	02 c0       	rjmp	.+4      	; 0x4ccc <reg_read_bit+0xe>
    4cc8:	88 0f       	add	r24, r24
    4cca:	99 1f       	adc	r25, r25
    4ccc:	6a 95       	dec	r22
    4cce:	e2 f7       	brpl	.-8      	; 0x4cc8 <reg_read_bit+0xa>
    4cd0:	82 23       	and	r24, r18
    4cd2:	08 95       	ret

00004cd4 <reg_read_bits>:
    4cd4:	fc 01       	movw	r30, r24
    4cd6:	80 81       	ld	r24, Z
    4cd8:	86 23       	and	r24, r22
    4cda:	08 95       	ret

00004cdc <reg_set_register>:
    4cdc:	fc 01       	movw	r30, r24
    4cde:	60 83       	st	Z, r22
    4ce0:	08 95       	ret

00004ce2 <reg_clear_register>:
    4ce2:	fc 01       	movw	r30, r24
    4ce4:	10 82       	st	Z, r1
    4ce6:	08 95       	ret

00004ce8 <reg_set_bit>:
    4ce8:	fc 01       	movw	r30, r24
    4cea:	40 81       	ld	r20, Z
    4cec:	21 e0       	ldi	r18, 0x01	; 1
    4cee:	30 e0       	ldi	r19, 0x00	; 0
    4cf0:	02 c0       	rjmp	.+4      	; 0x4cf6 <reg_set_bit+0xe>
    4cf2:	22 0f       	add	r18, r18
    4cf4:	33 1f       	adc	r19, r19
    4cf6:	6a 95       	dec	r22
    4cf8:	e2 f7       	brpl	.-8      	; 0x4cf2 <reg_set_bit+0xa>
    4cfa:	24 2b       	or	r18, r20
    4cfc:	20 83       	st	Z, r18
    4cfe:	08 95       	ret

00004d00 <reg_set_bits>:
    4d00:	fc 01       	movw	r30, r24
    4d02:	20 81       	ld	r18, Z
    4d04:	62 2b       	or	r22, r18
    4d06:	60 83       	st	Z, r22
    4d08:	08 95       	ret

00004d0a <reg_toggle_bit>:
    4d0a:	fc 01       	movw	r30, r24
    4d0c:	40 81       	ld	r20, Z
    4d0e:	21 e0       	ldi	r18, 0x01	; 1
    4d10:	30 e0       	ldi	r19, 0x00	; 0
    4d12:	02 c0       	rjmp	.+4      	; 0x4d18 <reg_toggle_bit+0xe>
    4d14:	22 0f       	add	r18, r18
    4d16:	33 1f       	adc	r19, r19
    4d18:	6a 95       	dec	r22
    4d1a:	e2 f7       	brpl	.-8      	; 0x4d14 <reg_toggle_bit+0xa>
    4d1c:	24 27       	eor	r18, r20
    4d1e:	20 83       	st	Z, r18
    4d20:	08 95       	ret

00004d22 <reg_toggle_bits>:
    4d22:	fc 01       	movw	r30, r24
    4d24:	20 81       	ld	r18, Z
    4d26:	62 27       	eor	r22, r18
    4d28:	60 83       	st	Z, r22
    4d2a:	08 95       	ret

00004d2c <reg_clear_bit>:
    4d2c:	fc 01       	movw	r30, r24
    4d2e:	90 81       	ld	r25, Z
    4d30:	21 e0       	ldi	r18, 0x01	; 1
    4d32:	30 e0       	ldi	r19, 0x00	; 0
    4d34:	02 c0       	rjmp	.+4      	; 0x4d3a <reg_clear_bit+0xe>
    4d36:	22 0f       	add	r18, r18
    4d38:	33 1f       	adc	r19, r19
    4d3a:	6a 95       	dec	r22
    4d3c:	e2 f7       	brpl	.-8      	; 0x4d36 <reg_clear_bit+0xa>
    4d3e:	20 95       	com	r18
    4d40:	29 23       	and	r18, r25
    4d42:	20 83       	st	Z, r18
    4d44:	08 95       	ret

00004d46 <reg_clear_bits>:
    4d46:	fc 01       	movw	r30, r24
    4d48:	90 81       	ld	r25, Z
    4d4a:	60 95       	com	r22
    4d4c:	69 23       	and	r22, r25
    4d4e:	60 83       	st	Z, r22
    4d50:	08 95       	ret

00004d52 <_serial_call_back>:
    4d52:	80 91 c8 1a 	lds	r24, 0x1AC8	; 0x801ac8 <crc_sum.1941>
    4d56:	86 0f       	add	r24, r22
    4d58:	80 93 c8 1a 	sts	0x1AC8, r24	; 0x801ac8 <crc_sum.1941>
    4d5c:	90 91 cb 1a 	lds	r25, 0x1ACB	; 0x801acb <_mh_state>
    4d60:	91 30       	cpi	r25, 0x01	; 1
    4d62:	79 f0       	breq	.+30     	; 0x4d82 <_serial_call_back+0x30>
    4d64:	28 f0       	brcs	.+10     	; 0x4d70 <_serial_call_back+0x1e>
    4d66:	92 30       	cpi	r25, 0x02	; 2
    4d68:	a9 f0       	breq	.+42     	; 0x4d94 <_serial_call_back+0x42>
    4d6a:	93 30       	cpi	r25, 0x03	; 3
    4d6c:	19 f1       	breq	.+70     	; 0x4db4 <_serial_call_back+0x62>
    4d6e:	08 95       	ret
    4d70:	6f 3f       	cpi	r22, 0xFF	; 255
    4d72:	09 f0       	breq	.+2      	; 0x4d76 <_serial_call_back+0x24>
    4d74:	48 c0       	rjmp	.+144    	; 0x4e06 <_serial_call_back+0xb4>
    4d76:	10 92 c8 1a 	sts	0x1AC8, r1	; 0x801ac8 <crc_sum.1941>
    4d7a:	81 e0       	ldi	r24, 0x01	; 1
    4d7c:	80 93 cb 1a 	sts	0x1ACB, r24	; 0x801acb <_mh_state>
    4d80:	08 95       	ret
    4d82:	66 38       	cpi	r22, 0x86	; 134
    4d84:	09 f0       	breq	.+2      	; 0x4d88 <_serial_call_back+0x36>
    4d86:	3f c0       	rjmp	.+126    	; 0x4e06 <_serial_call_back+0xb4>
    4d88:	10 92 c7 1a 	sts	0x1AC7, r1	; 0x801ac7 <inDex.1939>
    4d8c:	82 e0       	ldi	r24, 0x02	; 2
    4d8e:	80 93 cb 1a 	sts	0x1ACB, r24	; 0x801acb <_mh_state>
    4d92:	08 95       	ret
    4d94:	e0 91 c7 1a 	lds	r30, 0x1AC7	; 0x801ac7 <inDex.1939>
    4d98:	81 e0       	ldi	r24, 0x01	; 1
    4d9a:	8e 0f       	add	r24, r30
    4d9c:	80 93 c7 1a 	sts	0x1AC7, r24	; 0x801ac7 <inDex.1939>
    4da0:	f0 e0       	ldi	r31, 0x00	; 0
    4da2:	eb 53       	subi	r30, 0x3B	; 59
    4da4:	f5 4e       	sbci	r31, 0xE5	; 229
    4da6:	60 83       	st	Z, r22
    4da8:	82 30       	cpi	r24, 0x02	; 2
    4daa:	69 f5       	brne	.+90     	; 0x4e06 <_serial_call_back+0xb4>
    4dac:	83 e0       	ldi	r24, 0x03	; 3
    4dae:	80 93 cb 1a 	sts	0x1ACB, r24	; 0x801acb <_mh_state>
    4db2:	08 95       	ret
    4db4:	90 91 c7 1a 	lds	r25, 0x1AC7	; 0x801ac7 <inDex.1939>
    4db8:	21 e0       	ldi	r18, 0x01	; 1
    4dba:	29 0f       	add	r18, r25
    4dbc:	20 93 c7 1a 	sts	0x1AC7, r18	; 0x801ac7 <inDex.1939>
    4dc0:	96 30       	cpi	r25, 0x06	; 6
    4dc2:	09 f5       	brne	.+66     	; 0x4e06 <_serial_call_back+0xb4>
    4dc4:	81 11       	cpse	r24, r1
    4dc6:	0e c0       	rjmp	.+28     	; 0x4de4 <_serial_call_back+0x92>
    4dc8:	e5 ec       	ldi	r30, 0xC5	; 197
    4dca:	fa e1       	ldi	r31, 0x1A	; 26
    4dcc:	80 81       	ld	r24, Z
    4dce:	90 e0       	ldi	r25, 0x00	; 0
    4dd0:	98 2f       	mov	r25, r24
    4dd2:	88 27       	eor	r24, r24
    4dd4:	21 81       	ldd	r18, Z+1	; 0x01
    4dd6:	82 0f       	add	r24, r18
    4dd8:	91 1d       	adc	r25, r1
    4dda:	90 93 cd 1a 	sts	0x1ACD, r25	; 0x801acd <_ppm+0x1>
    4dde:	80 93 cc 1a 	sts	0x1ACC, r24	; 0x801acc <_ppm>
    4de2:	04 c0       	rjmp	.+8      	; 0x4dec <_serial_call_back+0x9a>
    4de4:	10 92 cd 1a 	sts	0x1ACD, r1	; 0x801acd <_ppm+0x1>
    4de8:	10 92 cc 1a 	sts	0x1ACC, r1	; 0x801acc <_ppm>
    4dec:	10 92 cb 1a 	sts	0x1ACB, r1	; 0x801acb <_mh_state>
    4df0:	e0 91 c9 1a 	lds	r30, 0x1AC9	; 0x801ac9 <_app_call_back>
    4df4:	f0 91 ca 1a 	lds	r31, 0x1ACA	; 0x801aca <_app_call_back+0x1>
    4df8:	30 97       	sbiw	r30, 0x00	; 0
    4dfa:	29 f0       	breq	.+10     	; 0x4e06 <_serial_call_back+0xb4>
    4dfc:	80 91 cc 1a 	lds	r24, 0x1ACC	; 0x801acc <_ppm>
    4e00:	90 91 cd 1a 	lds	r25, 0x1ACD	; 0x801acd <_ppm+0x1>
    4e04:	19 95       	eicall
    4e06:	08 95       	ret

00004e08 <mh_z19_create>:
    4e08:	8f 92       	push	r8
    4e0a:	9f 92       	push	r9
    4e0c:	af 92       	push	r10
    4e0e:	cf 92       	push	r12
    4e10:	ef 92       	push	r14
    4e12:	0f 93       	push	r16
    4e14:	cf 93       	push	r28
    4e16:	df 93       	push	r29
    4e18:	eb 01       	movw	r28, r22
    4e1a:	0f 2e       	mov	r0, r31
    4e1c:	f9 ea       	ldi	r31, 0xA9	; 169
    4e1e:	8f 2e       	mov	r8, r31
    4e20:	f6 e2       	ldi	r31, 0x26	; 38
    4e22:	9f 2e       	mov	r9, r31
    4e24:	f0 2d       	mov	r31, r0
    4e26:	68 94       	set
    4e28:	aa 24       	eor	r10, r10
    4e2a:	a4 f8       	bld	r10, 4
    4e2c:	68 94       	set
    4e2e:	cc 24       	eor	r12, r12
    4e30:	c4 f8       	bld	r12, 4
    4e32:	e1 2c       	mov	r14, r1
    4e34:	00 e0       	ldi	r16, 0x00	; 0
    4e36:	23 e0       	ldi	r18, 0x03	; 3
    4e38:	40 e8       	ldi	r20, 0x80	; 128
    4e3a:	55 e2       	ldi	r21, 0x25	; 37
    4e3c:	60 e0       	ldi	r22, 0x00	; 0
    4e3e:	70 e0       	ldi	r23, 0x00	; 0
    4e40:	85 d0       	rcall	.+266    	; 0x4f4c <serial_new_instance>
    4e42:	90 93 cf 1a 	sts	0x1ACF, r25	; 0x801acf <_serial+0x1>
    4e46:	80 93 ce 1a 	sts	0x1ACE, r24	; 0x801ace <_serial>
    4e4a:	d0 93 ca 1a 	sts	0x1ACA, r29	; 0x801aca <_app_call_back+0x1>
    4e4e:	c0 93 c9 1a 	sts	0x1AC9, r28	; 0x801ac9 <_app_call_back>
    4e52:	df 91       	pop	r29
    4e54:	cf 91       	pop	r28
    4e56:	0f 91       	pop	r16
    4e58:	ef 90       	pop	r14
    4e5a:	cf 90       	pop	r12
    4e5c:	af 90       	pop	r10
    4e5e:	9f 90       	pop	r9
    4e60:	8f 90       	pop	r8
    4e62:	08 95       	ret

00004e64 <mh_z19_take_meassuring>:
    4e64:	cf 93       	push	r28
    4e66:	df 93       	push	r29
    4e68:	cd b7       	in	r28, 0x3d	; 61
    4e6a:	de b7       	in	r29, 0x3e	; 62
    4e6c:	29 97       	sbiw	r28, 0x09	; 9
    4e6e:	0f b6       	in	r0, 0x3f	; 63
    4e70:	f8 94       	cli
    4e72:	de bf       	out	0x3e, r29	; 62
    4e74:	0f be       	out	0x3f, r0	; 63
    4e76:	cd bf       	out	0x3d, r28	; 61
    4e78:	89 e0       	ldi	r24, 0x09	; 9
    4e7a:	e5 e4       	ldi	r30, 0x45	; 69
    4e7c:	f2 e0       	ldi	r31, 0x02	; 2
    4e7e:	9e 01       	movw	r18, r28
    4e80:	2f 5f       	subi	r18, 0xFF	; 255
    4e82:	3f 4f       	sbci	r19, 0xFF	; 255
    4e84:	d9 01       	movw	r26, r18
    4e86:	01 90       	ld	r0, Z+
    4e88:	0d 92       	st	X+, r0
    4e8a:	8a 95       	dec	r24
    4e8c:	e1 f7       	brne	.-8      	; 0x4e86 <mh_z19_take_meassuring+0x22>
    4e8e:	10 92 cd 1a 	sts	0x1ACD, r1	; 0x801acd <_ppm+0x1>
    4e92:	10 92 cc 1a 	sts	0x1ACC, r1	; 0x801acc <_ppm>
    4e96:	80 91 ce 1a 	lds	r24, 0x1ACE	; 0x801ace <_serial>
    4e9a:	90 91 cf 1a 	lds	r25, 0x1ACF	; 0x801acf <_serial+0x1>
    4e9e:	00 97       	sbiw	r24, 0x00	; 0
    4ea0:	31 f0       	breq	.+12     	; 0x4eae <mh_z19_take_meassuring+0x4a>
    4ea2:	42 2f       	mov	r20, r18
    4ea4:	53 2f       	mov	r21, r19
    4ea6:	69 e0       	ldi	r22, 0x09	; 9
    4ea8:	0c d1       	rcall	.+536    	; 0x50c2 <serial_send_bytes>
    4eaa:	80 e0       	ldi	r24, 0x00	; 0
    4eac:	01 c0       	rjmp	.+2      	; 0x4eb0 <mh_z19_take_meassuring+0x4c>
    4eae:	82 e0       	ldi	r24, 0x02	; 2
    4eb0:	29 96       	adiw	r28, 0x09	; 9
    4eb2:	0f b6       	in	r0, 0x3f	; 63
    4eb4:	f8 94       	cli
    4eb6:	de bf       	out	0x3e, r29	; 62
    4eb8:	0f be       	out	0x3f, r0	; 63
    4eba:	cd bf       	out	0x3d, r28	; 61
    4ebc:	df 91       	pop	r29
    4ebe:	cf 91       	pop	r28
    4ec0:	08 95       	ret

00004ec2 <mh_z19_get_co2_ppm>:
    4ec2:	20 91 cc 1a 	lds	r18, 0x1ACC	; 0x801acc <_ppm>
    4ec6:	30 91 cd 1a 	lds	r19, 0x1ACD	; 0x801acd <_ppm+0x1>
    4eca:	21 15       	cp	r18, r1
    4ecc:	31 05       	cpc	r19, r1
    4ece:	29 f4       	brne	.+10     	; 0x4eda <mh_z19_get_co2_ppm+0x18>
    4ed0:	fc 01       	movw	r30, r24
    4ed2:	11 82       	std	Z+1, r1	; 0x01
    4ed4:	10 82       	st	Z, r1
    4ed6:	81 e0       	ldi	r24, 0x01	; 1
    4ed8:	08 95       	ret
    4eda:	fc 01       	movw	r30, r24
    4edc:	31 83       	std	Z+1, r19	; 0x01
    4ede:	20 83       	st	Z, r18
    4ee0:	80 e0       	ldi	r24, 0x00	; 0
    4ee2:	08 95       	ret

00004ee4 <rcServoSet>:
    4ee4:	65 36       	cpi	r22, 0x65	; 101
    4ee6:	0c f0       	brlt	.+2      	; 0x4eea <rcServoSet+0x6>
    4ee8:	64 e6       	ldi	r22, 0x64	; 100
    4eea:	6c 39       	cpi	r22, 0x9C	; 156
    4eec:	0c f4       	brge	.+2      	; 0x4ef0 <rcServoSet+0xc>
    4eee:	6c e9       	ldi	r22, 0x9C	; 156
    4ef0:	96 ef       	ldi	r25, 0xF6	; 246
    4ef2:	69 02       	muls	r22, r25
    4ef4:	b0 01       	movw	r22, r0
    4ef6:	11 24       	eor	r1, r1
    4ef8:	68 54       	subi	r22, 0x48	; 72
    4efa:	74 4f       	sbci	r23, 0xF4	; 244
    4efc:	81 11       	cpse	r24, r1
    4efe:	05 c0       	rjmp	.+10     	; 0x4f0a <rcServoSet+0x26>
    4f00:	70 93 29 01 	sts	0x0129, r23	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
    4f04:	60 93 28 01 	sts	0x0128, r22	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
    4f08:	08 95       	ret
    4f0a:	70 93 2b 01 	sts	0x012B, r23	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
    4f0e:	60 93 2a 01 	sts	0x012A, r22	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
    4f12:	08 95       	ret

00004f14 <rcServoCreate>:
    4f14:	ea e0       	ldi	r30, 0x0A	; 10
    4f16:	f1 e0       	ldi	r31, 0x01	; 1
    4f18:	80 81       	ld	r24, Z
    4f1a:	88 61       	ori	r24, 0x18	; 24
    4f1c:	80 83       	st	Z, r24
    4f1e:	8f e3       	ldi	r24, 0x3F	; 63
    4f20:	9c e9       	ldi	r25, 0x9C	; 156
    4f22:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__TEXT_REGION_LENGTH__+0x700127>
    4f26:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__TEXT_REGION_LENGTH__+0x700126>
    4f2a:	60 e0       	ldi	r22, 0x00	; 0
    4f2c:	80 e0       	ldi	r24, 0x00	; 0
    4f2e:	da df       	rcall	.-76     	; 0x4ee4 <rcServoSet>
    4f30:	60 e0       	ldi	r22, 0x00	; 0
    4f32:	81 e0       	ldi	r24, 0x01	; 1
    4f34:	d7 df       	rcall	.-82     	; 0x4ee4 <rcServoSet>
    4f36:	e0 e2       	ldi	r30, 0x20	; 32
    4f38:	f1 e0       	ldi	r31, 0x01	; 1
    4f3a:	80 81       	ld	r24, Z
    4f3c:	82 6a       	ori	r24, 0xA2	; 162
    4f3e:	80 83       	st	Z, r24
    4f40:	e1 e2       	ldi	r30, 0x21	; 33
    4f42:	f1 e0       	ldi	r31, 0x01	; 1
    4f44:	80 81       	ld	r24, Z
    4f46:	8a 61       	ori	r24, 0x1A	; 26
    4f48:	80 83       	st	Z, r24
    4f4a:	08 95       	ret

00004f4c <serial_new_instance>:
    4f4c:	2f 92       	push	r2
    4f4e:	3f 92       	push	r3
    4f50:	4f 92       	push	r4
    4f52:	5f 92       	push	r5
    4f54:	6f 92       	push	r6
    4f56:	7f 92       	push	r7
    4f58:	8f 92       	push	r8
    4f5a:	9f 92       	push	r9
    4f5c:	af 92       	push	r10
    4f5e:	cf 92       	push	r12
    4f60:	ef 92       	push	r14
    4f62:	ff 92       	push	r15
    4f64:	0f 93       	push	r16
    4f66:	1f 93       	push	r17
    4f68:	cf 93       	push	r28
    4f6a:	df 93       	push	r29
    4f6c:	cd b7       	in	r28, 0x3d	; 61
    4f6e:	de b7       	in	r29, 0x3e	; 62
    4f70:	f8 2e       	mov	r15, r24
    4f72:	2a 01       	movw	r4, r20
    4f74:	3b 01       	movw	r6, r22
    4f76:	88 e0       	ldi	r24, 0x08	; 8
    4f78:	90 e0       	ldi	r25, 0x00	; 0
    4f7a:	c2 d7       	rcall	.+3972   	; 0x5f00 <malloc>
    4f7c:	8c 01       	movw	r16, r24
    4f7e:	8f 2d       	mov	r24, r15
    4f80:	90 e0       	ldi	r25, 0x00	; 0
    4f82:	88 0f       	add	r24, r24
    4f84:	99 1f       	adc	r25, r25
    4f86:	fc 01       	movw	r30, r24
    4f88:	e0 53       	subi	r30, 0x30	; 48
    4f8a:	f5 4e       	sbci	r31, 0xE5	; 229
    4f8c:	11 83       	std	Z+1, r17	; 0x01
    4f8e:	00 83       	st	Z, r16
    4f90:	fc 01       	movw	r30, r24
    4f92:	e2 5f       	subi	r30, 0xF2	; 242
    4f94:	fd 4f       	sbci	r31, 0xFD	; 253
    4f96:	80 81       	ld	r24, Z
    4f98:	91 81       	ldd	r25, Z+1	; 0x01
    4f9a:	d8 01       	movw	r26, r16
    4f9c:	8d 93       	st	X+, r24
    4f9e:	9c 93       	st	X, r25
    4fa0:	6c 2d       	mov	r22, r12
    4fa2:	70 e0       	ldi	r23, 0x00	; 0
    4fa4:	84 e0       	ldi	r24, 0x04	; 4
    4fa6:	90 e0       	ldi	r25, 0x00	; 0
    4fa8:	91 d7       	rcall	.+3874   	; 0x5ecc <calloc>
    4faa:	1c 01       	movw	r2, r24
    4fac:	61 e0       	ldi	r22, 0x01	; 1
    4fae:	70 e0       	ldi	r23, 0x00	; 0
    4fb0:	86 e0       	ldi	r24, 0x06	; 6
    4fb2:	90 e0       	ldi	r25, 0x00	; 0
    4fb4:	8b d7       	rcall	.+3862   	; 0x5ecc <calloc>
    4fb6:	7c 01       	movw	r14, r24
    4fb8:	4c 2d       	mov	r20, r12
    4fba:	b1 01       	movw	r22, r2
    4fbc:	2b d5       	rcall	.+2646   	; 0x5a14 <fifo_init>
    4fbe:	f8 01       	movw	r30, r16
    4fc0:	f5 82       	std	Z+5, r15	; 0x05
    4fc2:	e4 82       	std	Z+4, r14	; 0x04
    4fc4:	6a 2d       	mov	r22, r10
    4fc6:	70 e0       	ldi	r23, 0x00	; 0
    4fc8:	84 e0       	ldi	r24, 0x04	; 4
    4fca:	90 e0       	ldi	r25, 0x00	; 0
    4fcc:	7f d7       	rcall	.+3838   	; 0x5ecc <calloc>
    4fce:	1c 01       	movw	r2, r24
    4fd0:	61 e0       	ldi	r22, 0x01	; 1
    4fd2:	70 e0       	ldi	r23, 0x00	; 0
    4fd4:	86 e0       	ldi	r24, 0x06	; 6
    4fd6:	90 e0       	ldi	r25, 0x00	; 0
    4fd8:	79 d7       	rcall	.+3826   	; 0x5ecc <calloc>
    4fda:	7c 01       	movw	r14, r24
    4fdc:	4a 2d       	mov	r20, r10
    4fde:	b1 01       	movw	r22, r2
    4fe0:	19 d5       	rcall	.+2610   	; 0x5a14 <fifo_init>
    4fe2:	d8 01       	movw	r26, r16
    4fe4:	13 96       	adiw	r26, 0x03	; 3
    4fe6:	fc 92       	st	X, r15
    4fe8:	ee 92       	st	-X, r14
    4fea:	12 97       	sbiw	r26, 0x02	; 2
    4fec:	17 96       	adiw	r26, 0x07	; 7
    4fee:	9c 92       	st	X, r9
    4ff0:	8e 92       	st	-X, r8
    4ff2:	16 97       	sbiw	r26, 0x06	; 6
    4ff4:	ff b6       	in	r15, 0x3f	; 63
    4ff6:	f8 94       	cli
    4ff8:	ed 91       	ld	r30, X+
    4ffa:	fc 91       	ld	r31, X
    4ffc:	11 97       	sbiw	r26, 0x01	; 1
    4ffe:	36 97       	sbiw	r30, 0x06	; 6
    5000:	80 81       	ld	r24, Z
    5002:	82 60       	ori	r24, 0x02	; 2
    5004:	80 83       	st	Z, r24
    5006:	8d 90       	ld	r8, X+
    5008:	9c 90       	ld	r9, X
    500a:	c3 01       	movw	r24, r6
    500c:	b2 01       	movw	r22, r4
    500e:	1c d6       	rcall	.+3128   	; 0x5c48 <__floatunsisf>
    5010:	20 e0       	ldi	r18, 0x00	; 0
    5012:	30 e0       	ldi	r19, 0x00	; 0
    5014:	40 e0       	ldi	r20, 0x00	; 0
    5016:	51 e4       	ldi	r21, 0x41	; 65
    5018:	a5 d6       	rcall	.+3402   	; 0x5d64 <__mulsf3>
    501a:	9b 01       	movw	r18, r22
    501c:	ac 01       	movw	r20, r24
    501e:	60 e0       	ldi	r22, 0x00	; 0
    5020:	74 e2       	ldi	r23, 0x24	; 36
    5022:	84 e7       	ldi	r24, 0x74	; 116
    5024:	9b e4       	ldi	r25, 0x4B	; 75
    5026:	77 d5       	rcall	.+2798   	; 0x5b16 <__divsf3>
    5028:	20 e0       	ldi	r18, 0x00	; 0
    502a:	30 e0       	ldi	r19, 0x00	; 0
    502c:	40 e8       	ldi	r20, 0x80	; 128
    502e:	5f e3       	ldi	r21, 0x3F	; 63
    5030:	0d d5       	rcall	.+2586   	; 0x5a4c <__subsf3>
    5032:	de d5       	rcall	.+3004   	; 0x5bf0 <__fixunssfsi>
    5034:	f4 01       	movw	r30, r8
    5036:	32 97       	sbiw	r30, 0x02	; 2
    5038:	60 83       	st	Z, r22
    503a:	d8 01       	movw	r26, r16
    503c:	ed 91       	ld	r30, X+
    503e:	fc 91       	ld	r31, X
    5040:	11 97       	sbiw	r26, 0x01	; 1
    5042:	35 97       	sbiw	r30, 0x05	; 5
    5044:	88 e9       	ldi	r24, 0x98	; 152
    5046:	80 83       	st	Z, r24
    5048:	ed 91       	ld	r30, X+
    504a:	fc 91       	ld	r31, X
    504c:	34 97       	sbiw	r30, 0x04	; 4
    504e:	86 e0       	ldi	r24, 0x06	; 6
    5050:	80 83       	st	Z, r24
    5052:	ff be       	out	0x3f, r15	; 63
    5054:	c8 01       	movw	r24, r16
    5056:	df 91       	pop	r29
    5058:	cf 91       	pop	r28
    505a:	1f 91       	pop	r17
    505c:	0f 91       	pop	r16
    505e:	ff 90       	pop	r15
    5060:	ef 90       	pop	r14
    5062:	cf 90       	pop	r12
    5064:	af 90       	pop	r10
    5066:	9f 90       	pop	r9
    5068:	8f 90       	pop	r8
    506a:	7f 90       	pop	r7
    506c:	6f 90       	pop	r6
    506e:	5f 90       	pop	r5
    5070:	4f 90       	pop	r4
    5072:	3f 90       	pop	r3
    5074:	2f 90       	pop	r2
    5076:	08 95       	ret

00005078 <serial_send_byte>:
    5078:	cf 93       	push	r28
    507a:	df 93       	push	r29
    507c:	ec 01       	movw	r28, r24
    507e:	ea 81       	ldd	r30, Y+2	; 0x02
    5080:	fb 81       	ldd	r31, Y+3	; 0x03
    5082:	93 81       	ldd	r25, Z+3	; 0x03
    5084:	82 81       	ldd	r24, Z+2	; 0x02
    5086:	25 81       	ldd	r18, Z+5	; 0x05
    5088:	98 1b       	sub	r25, r24
    508a:	92 23       	and	r25, r18
    508c:	84 81       	ldd	r24, Z+4	; 0x04
    508e:	98 17       	cp	r25, r24
    5090:	a1 f0       	breq	.+40     	; 0x50ba <serial_send_byte+0x42>
    5092:	93 81       	ldd	r25, Z+3	; 0x03
    5094:	26 95       	lsr	r18
    5096:	29 23       	and	r18, r25
    5098:	a0 81       	ld	r26, Z
    509a:	b1 81       	ldd	r27, Z+1	; 0x01
    509c:	a2 0f       	add	r26, r18
    509e:	b1 1d       	adc	r27, r1
    50a0:	6c 93       	st	X, r22
    50a2:	9f 5f       	subi	r25, 0xFF	; 255
    50a4:	25 81       	ldd	r18, Z+5	; 0x05
    50a6:	92 23       	and	r25, r18
    50a8:	93 83       	std	Z+3, r25	; 0x03
    50aa:	e8 81       	ld	r30, Y
    50ac:	f9 81       	ldd	r31, Y+1	; 0x01
    50ae:	35 97       	sbiw	r30, 0x05	; 5
    50b0:	80 81       	ld	r24, Z
    50b2:	80 62       	ori	r24, 0x20	; 32
    50b4:	80 83       	st	Z, r24
    50b6:	80 e0       	ldi	r24, 0x00	; 0
    50b8:	01 c0       	rjmp	.+2      	; 0x50bc <serial_send_byte+0x44>
    50ba:	82 e0       	ldi	r24, 0x02	; 2
    50bc:	df 91       	pop	r29
    50be:	cf 91       	pop	r28
    50c0:	08 95       	ret

000050c2 <serial_send_bytes>:
    50c2:	ef 92       	push	r14
    50c4:	ff 92       	push	r15
    50c6:	0f 93       	push	r16
    50c8:	1f 93       	push	r17
    50ca:	cf 93       	push	r28
    50cc:	df 93       	push	r29
    50ce:	7c 01       	movw	r14, r24
    50d0:	dc 01       	movw	r26, r24
    50d2:	12 96       	adiw	r26, 0x02	; 2
    50d4:	ed 91       	ld	r30, X+
    50d6:	fc 91       	ld	r31, X
    50d8:	13 97       	sbiw	r26, 0x03	; 3
    50da:	93 81       	ldd	r25, Z+3	; 0x03
    50dc:	82 81       	ldd	r24, Z+2	; 0x02
    50de:	98 1b       	sub	r25, r24
    50e0:	85 81       	ldd	r24, Z+5	; 0x05
    50e2:	98 23       	and	r25, r24
    50e4:	84 81       	ldd	r24, Z+4	; 0x04
    50e6:	89 1b       	sub	r24, r25
    50e8:	86 17       	cp	r24, r22
    50ea:	98 f1       	brcs	.+102    	; 0x5152 <serial_send_bytes+0x90>
    50ec:	66 23       	and	r22, r22
    50ee:	41 f1       	breq	.+80     	; 0x5140 <serial_send_bytes+0x7e>
    50f0:	84 2f       	mov	r24, r20
    50f2:	95 2f       	mov	r25, r21
    50f4:	dc 01       	movw	r26, r24
    50f6:	61 50       	subi	r22, 0x01	; 1
    50f8:	46 2f       	mov	r20, r22
    50fa:	50 e0       	ldi	r21, 0x00	; 0
    50fc:	4f 5f       	subi	r20, 0xFF	; 255
    50fe:	5f 4f       	sbci	r21, 0xFF	; 255
    5100:	48 0f       	add	r20, r24
    5102:	59 1f       	adc	r21, r25
    5104:	e7 01       	movw	r28, r14
    5106:	ea 81       	ldd	r30, Y+2	; 0x02
    5108:	fb 81       	ldd	r31, Y+3	; 0x03
    510a:	93 81       	ldd	r25, Z+3	; 0x03
    510c:	82 81       	ldd	r24, Z+2	; 0x02
    510e:	25 81       	ldd	r18, Z+5	; 0x05
    5110:	98 1b       	sub	r25, r24
    5112:	92 23       	and	r25, r18
    5114:	84 81       	ldd	r24, Z+4	; 0x04
    5116:	98 17       	cp	r25, r24
    5118:	79 f0       	breq	.+30     	; 0x5138 <serial_send_bytes+0x76>
    511a:	8c 91       	ld	r24, X
    511c:	93 81       	ldd	r25, Z+3	; 0x03
    511e:	26 95       	lsr	r18
    5120:	29 23       	and	r18, r25
    5122:	60 81       	ld	r22, Z
    5124:	71 81       	ldd	r23, Z+1	; 0x01
    5126:	8b 01       	movw	r16, r22
    5128:	02 0f       	add	r16, r18
    512a:	11 1d       	adc	r17, r1
    512c:	e8 01       	movw	r28, r16
    512e:	88 83       	st	Y, r24
    5130:	9f 5f       	subi	r25, 0xFF	; 255
    5132:	85 81       	ldd	r24, Z+5	; 0x05
    5134:	98 23       	and	r25, r24
    5136:	93 83       	std	Z+3, r25	; 0x03
    5138:	11 96       	adiw	r26, 0x01	; 1
    513a:	a4 17       	cp	r26, r20
    513c:	b5 07       	cpc	r27, r21
    513e:	11 f7       	brne	.-60     	; 0x5104 <serial_send_bytes+0x42>
    5140:	d7 01       	movw	r26, r14
    5142:	ed 91       	ld	r30, X+
    5144:	fc 91       	ld	r31, X
    5146:	35 97       	sbiw	r30, 0x05	; 5
    5148:	80 81       	ld	r24, Z
    514a:	80 62       	ori	r24, 0x20	; 32
    514c:	80 83       	st	Z, r24
    514e:	80 e0       	ldi	r24, 0x00	; 0
    5150:	01 c0       	rjmp	.+2      	; 0x5154 <serial_send_bytes+0x92>
    5152:	82 e0       	ldi	r24, 0x02	; 2
    5154:	df 91       	pop	r29
    5156:	cf 91       	pop	r28
    5158:	1f 91       	pop	r17
    515a:	0f 91       	pop	r16
    515c:	ff 90       	pop	r15
    515e:	ef 90       	pop	r14
    5160:	08 95       	ret

00005162 <serial_get_byte>:
    5162:	dc 01       	movw	r26, r24
    5164:	14 96       	adiw	r26, 0x04	; 4
    5166:	ed 91       	ld	r30, X+
    5168:	fc 91       	ld	r31, X
    516a:	15 97       	sbiw	r26, 0x05	; 5
    516c:	93 81       	ldd	r25, Z+3	; 0x03
    516e:	82 81       	ldd	r24, Z+2	; 0x02
    5170:	98 17       	cp	r25, r24
    5172:	89 f0       	breq	.+34     	; 0x5196 <serial_get_byte+0x34>
    5174:	92 81       	ldd	r25, Z+2	; 0x02
    5176:	85 81       	ldd	r24, Z+5	; 0x05
    5178:	86 95       	lsr	r24
    517a:	89 23       	and	r24, r25
    517c:	a0 81       	ld	r26, Z
    517e:	b1 81       	ldd	r27, Z+1	; 0x01
    5180:	a8 0f       	add	r26, r24
    5182:	b1 1d       	adc	r27, r1
    5184:	8c 91       	ld	r24, X
    5186:	db 01       	movw	r26, r22
    5188:	8c 93       	st	X, r24
    518a:	9f 5f       	subi	r25, 0xFF	; 255
    518c:	85 81       	ldd	r24, Z+5	; 0x05
    518e:	98 23       	and	r25, r24
    5190:	92 83       	std	Z+2, r25	; 0x02
    5192:	80 e0       	ldi	r24, 0x00	; 0
    5194:	08 95       	ret
    5196:	83 e0       	ldi	r24, 0x03	; 3
    5198:	08 95       	ret

0000519a <__vector_25>:
    519a:	1f 92       	push	r1
    519c:	0f 92       	push	r0
    519e:	0f b6       	in	r0, 0x3f	; 63
    51a0:	0f 92       	push	r0
    51a2:	11 24       	eor	r1, r1
    51a4:	0b b6       	in	r0, 0x3b	; 59
    51a6:	0f 92       	push	r0
    51a8:	2f 93       	push	r18
    51aa:	3f 93       	push	r19
    51ac:	4f 93       	push	r20
    51ae:	5f 93       	push	r21
    51b0:	6f 93       	push	r22
    51b2:	7f 93       	push	r23
    51b4:	8f 93       	push	r24
    51b6:	9f 93       	push	r25
    51b8:	af 93       	push	r26
    51ba:	bf 93       	push	r27
    51bc:	cf 93       	push	r28
    51be:	df 93       	push	r29
    51c0:	ef 93       	push	r30
    51c2:	ff 93       	push	r31
    51c4:	a0 91 d0 1a 	lds	r26, 0x1AD0	; 0x801ad0 <_ser_handle>
    51c8:	b0 91 d1 1a 	lds	r27, 0x1AD1	; 0x801ad1 <_ser_handle+0x1>
    51cc:	10 97       	sbiw	r26, 0x00	; 0
    51ce:	11 f1       	breq	.+68     	; 0x5214 <__vector_25+0x7a>
    51d0:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    51d4:	14 96       	adiw	r26, 0x04	; 4
    51d6:	ed 91       	ld	r30, X+
    51d8:	fc 91       	ld	r31, X
    51da:	15 97       	sbiw	r26, 0x05	; 5
    51dc:	93 81       	ldd	r25, Z+3	; 0x03
    51de:	82 81       	ldd	r24, Z+2	; 0x02
    51e0:	25 81       	ldd	r18, Z+5	; 0x05
    51e2:	98 1b       	sub	r25, r24
    51e4:	92 23       	and	r25, r18
    51e6:	84 81       	ldd	r24, Z+4	; 0x04
    51e8:	98 17       	cp	r25, r24
    51ea:	61 f0       	breq	.+24     	; 0x5204 <__vector_25+0x6a>
    51ec:	83 81       	ldd	r24, Z+3	; 0x03
    51ee:	26 95       	lsr	r18
    51f0:	28 23       	and	r18, r24
    51f2:	c0 81       	ld	r28, Z
    51f4:	d1 81       	ldd	r29, Z+1	; 0x01
    51f6:	c2 0f       	add	r28, r18
    51f8:	d1 1d       	adc	r29, r1
    51fa:	68 83       	st	Y, r22
    51fc:	8f 5f       	subi	r24, 0xFF	; 255
    51fe:	95 81       	ldd	r25, Z+5	; 0x05
    5200:	89 23       	and	r24, r25
    5202:	83 83       	std	Z+3, r24	; 0x03
    5204:	16 96       	adiw	r26, 0x06	; 6
    5206:	ed 91       	ld	r30, X+
    5208:	fc 91       	ld	r31, X
    520a:	17 97       	sbiw	r26, 0x07	; 7
    520c:	30 97       	sbiw	r30, 0x00	; 0
    520e:	11 f0       	breq	.+4      	; 0x5214 <__vector_25+0x7a>
    5210:	cd 01       	movw	r24, r26
    5212:	19 95       	eicall
    5214:	ff 91       	pop	r31
    5216:	ef 91       	pop	r30
    5218:	df 91       	pop	r29
    521a:	cf 91       	pop	r28
    521c:	bf 91       	pop	r27
    521e:	af 91       	pop	r26
    5220:	9f 91       	pop	r25
    5222:	8f 91       	pop	r24
    5224:	7f 91       	pop	r23
    5226:	6f 91       	pop	r22
    5228:	5f 91       	pop	r21
    522a:	4f 91       	pop	r20
    522c:	3f 91       	pop	r19
    522e:	2f 91       	pop	r18
    5230:	0f 90       	pop	r0
    5232:	0b be       	out	0x3b, r0	; 59
    5234:	0f 90       	pop	r0
    5236:	0f be       	out	0x3f, r0	; 63
    5238:	0f 90       	pop	r0
    523a:	1f 90       	pop	r1
    523c:	18 95       	reti

0000523e <__vector_26>:
    523e:	1f 92       	push	r1
    5240:	0f 92       	push	r0
    5242:	0f b6       	in	r0, 0x3f	; 63
    5244:	0f 92       	push	r0
    5246:	11 24       	eor	r1, r1
    5248:	0b b6       	in	r0, 0x3b	; 59
    524a:	0f 92       	push	r0
    524c:	2f 93       	push	r18
    524e:	8f 93       	push	r24
    5250:	9f 93       	push	r25
    5252:	af 93       	push	r26
    5254:	bf 93       	push	r27
    5256:	ef 93       	push	r30
    5258:	ff 93       	push	r31
    525a:	e0 91 d0 1a 	lds	r30, 0x1AD0	; 0x801ad0 <_ser_handle>
    525e:	f0 91 d1 1a 	lds	r31, 0x1AD1	; 0x801ad1 <_ser_handle+0x1>
    5262:	30 97       	sbiw	r30, 0x00	; 0
    5264:	b9 f0       	breq	.+46     	; 0x5294 <__vector_26+0x56>
    5266:	02 80       	ldd	r0, Z+2	; 0x02
    5268:	f3 81       	ldd	r31, Z+3	; 0x03
    526a:	e0 2d       	mov	r30, r0
    526c:	93 81       	ldd	r25, Z+3	; 0x03
    526e:	82 81       	ldd	r24, Z+2	; 0x02
    5270:	98 17       	cp	r25, r24
    5272:	b1 f0       	breq	.+44     	; 0x52a0 <__vector_26+0x62>
    5274:	92 81       	ldd	r25, Z+2	; 0x02
    5276:	85 81       	ldd	r24, Z+5	; 0x05
    5278:	28 2f       	mov	r18, r24
    527a:	26 95       	lsr	r18
    527c:	29 23       	and	r18, r25
    527e:	a0 81       	ld	r26, Z
    5280:	b1 81       	ldd	r27, Z+1	; 0x01
    5282:	a2 0f       	add	r26, r18
    5284:	b1 1d       	adc	r27, r1
    5286:	2c 91       	ld	r18, X
    5288:	9f 5f       	subi	r25, 0xFF	; 255
    528a:	89 23       	and	r24, r25
    528c:	82 83       	std	Z+2, r24	; 0x02
    528e:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    5292:	0b c0       	rjmp	.+22     	; 0x52aa <__vector_26+0x6c>
    5294:	e1 ec       	ldi	r30, 0xC1	; 193
    5296:	f0 e0       	ldi	r31, 0x00	; 0
    5298:	80 81       	ld	r24, Z
    529a:	8f 7d       	andi	r24, 0xDF	; 223
    529c:	80 83       	st	Z, r24
    529e:	05 c0       	rjmp	.+10     	; 0x52aa <__vector_26+0x6c>
    52a0:	e1 ec       	ldi	r30, 0xC1	; 193
    52a2:	f0 e0       	ldi	r31, 0x00	; 0
    52a4:	80 81       	ld	r24, Z
    52a6:	8f 7d       	andi	r24, 0xDF	; 223
    52a8:	80 83       	st	Z, r24
    52aa:	ff 91       	pop	r31
    52ac:	ef 91       	pop	r30
    52ae:	bf 91       	pop	r27
    52b0:	af 91       	pop	r26
    52b2:	9f 91       	pop	r25
    52b4:	8f 91       	pop	r24
    52b6:	2f 91       	pop	r18
    52b8:	0f 90       	pop	r0
    52ba:	0b be       	out	0x3b, r0	; 59
    52bc:	0f 90       	pop	r0
    52be:	0f be       	out	0x3f, r0	; 63
    52c0:	0f 90       	pop	r0
    52c2:	1f 90       	pop	r1
    52c4:	18 95       	reti

000052c6 <__vector_36>:
    52c6:	1f 92       	push	r1
    52c8:	0f 92       	push	r0
    52ca:	0f b6       	in	r0, 0x3f	; 63
    52cc:	0f 92       	push	r0
    52ce:	11 24       	eor	r1, r1
    52d0:	0b b6       	in	r0, 0x3b	; 59
    52d2:	0f 92       	push	r0
    52d4:	2f 93       	push	r18
    52d6:	3f 93       	push	r19
    52d8:	4f 93       	push	r20
    52da:	5f 93       	push	r21
    52dc:	6f 93       	push	r22
    52de:	7f 93       	push	r23
    52e0:	8f 93       	push	r24
    52e2:	9f 93       	push	r25
    52e4:	af 93       	push	r26
    52e6:	bf 93       	push	r27
    52e8:	cf 93       	push	r28
    52ea:	df 93       	push	r29
    52ec:	ef 93       	push	r30
    52ee:	ff 93       	push	r31
    52f0:	a0 91 d2 1a 	lds	r26, 0x1AD2	; 0x801ad2 <_ser_handle+0x2>
    52f4:	b0 91 d3 1a 	lds	r27, 0x1AD3	; 0x801ad3 <_ser_handle+0x3>
    52f8:	10 97       	sbiw	r26, 0x00	; 0
    52fa:	11 f1       	breq	.+68     	; 0x5340 <__vector_36+0x7a>
    52fc:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    5300:	14 96       	adiw	r26, 0x04	; 4
    5302:	ed 91       	ld	r30, X+
    5304:	fc 91       	ld	r31, X
    5306:	15 97       	sbiw	r26, 0x05	; 5
    5308:	93 81       	ldd	r25, Z+3	; 0x03
    530a:	82 81       	ldd	r24, Z+2	; 0x02
    530c:	25 81       	ldd	r18, Z+5	; 0x05
    530e:	98 1b       	sub	r25, r24
    5310:	92 23       	and	r25, r18
    5312:	84 81       	ldd	r24, Z+4	; 0x04
    5314:	98 17       	cp	r25, r24
    5316:	61 f0       	breq	.+24     	; 0x5330 <__vector_36+0x6a>
    5318:	83 81       	ldd	r24, Z+3	; 0x03
    531a:	26 95       	lsr	r18
    531c:	28 23       	and	r18, r24
    531e:	c0 81       	ld	r28, Z
    5320:	d1 81       	ldd	r29, Z+1	; 0x01
    5322:	c2 0f       	add	r28, r18
    5324:	d1 1d       	adc	r29, r1
    5326:	68 83       	st	Y, r22
    5328:	8f 5f       	subi	r24, 0xFF	; 255
    532a:	95 81       	ldd	r25, Z+5	; 0x05
    532c:	89 23       	and	r24, r25
    532e:	83 83       	std	Z+3, r24	; 0x03
    5330:	16 96       	adiw	r26, 0x06	; 6
    5332:	ed 91       	ld	r30, X+
    5334:	fc 91       	ld	r31, X
    5336:	17 97       	sbiw	r26, 0x07	; 7
    5338:	30 97       	sbiw	r30, 0x00	; 0
    533a:	11 f0       	breq	.+4      	; 0x5340 <__vector_36+0x7a>
    533c:	cd 01       	movw	r24, r26
    533e:	19 95       	eicall
    5340:	ff 91       	pop	r31
    5342:	ef 91       	pop	r30
    5344:	df 91       	pop	r29
    5346:	cf 91       	pop	r28
    5348:	bf 91       	pop	r27
    534a:	af 91       	pop	r26
    534c:	9f 91       	pop	r25
    534e:	8f 91       	pop	r24
    5350:	7f 91       	pop	r23
    5352:	6f 91       	pop	r22
    5354:	5f 91       	pop	r21
    5356:	4f 91       	pop	r20
    5358:	3f 91       	pop	r19
    535a:	2f 91       	pop	r18
    535c:	0f 90       	pop	r0
    535e:	0b be       	out	0x3b, r0	; 59
    5360:	0f 90       	pop	r0
    5362:	0f be       	out	0x3f, r0	; 63
    5364:	0f 90       	pop	r0
    5366:	1f 90       	pop	r1
    5368:	18 95       	reti

0000536a <__vector_37>:
    536a:	1f 92       	push	r1
    536c:	0f 92       	push	r0
    536e:	0f b6       	in	r0, 0x3f	; 63
    5370:	0f 92       	push	r0
    5372:	11 24       	eor	r1, r1
    5374:	0b b6       	in	r0, 0x3b	; 59
    5376:	0f 92       	push	r0
    5378:	2f 93       	push	r18
    537a:	8f 93       	push	r24
    537c:	9f 93       	push	r25
    537e:	af 93       	push	r26
    5380:	bf 93       	push	r27
    5382:	ef 93       	push	r30
    5384:	ff 93       	push	r31
    5386:	e0 91 d2 1a 	lds	r30, 0x1AD2	; 0x801ad2 <_ser_handle+0x2>
    538a:	f0 91 d3 1a 	lds	r31, 0x1AD3	; 0x801ad3 <_ser_handle+0x3>
    538e:	30 97       	sbiw	r30, 0x00	; 0
    5390:	b9 f0       	breq	.+46     	; 0x53c0 <__vector_37+0x56>
    5392:	02 80       	ldd	r0, Z+2	; 0x02
    5394:	f3 81       	ldd	r31, Z+3	; 0x03
    5396:	e0 2d       	mov	r30, r0
    5398:	93 81       	ldd	r25, Z+3	; 0x03
    539a:	82 81       	ldd	r24, Z+2	; 0x02
    539c:	98 17       	cp	r25, r24
    539e:	b1 f0       	breq	.+44     	; 0x53cc <__vector_37+0x62>
    53a0:	92 81       	ldd	r25, Z+2	; 0x02
    53a2:	85 81       	ldd	r24, Z+5	; 0x05
    53a4:	28 2f       	mov	r18, r24
    53a6:	26 95       	lsr	r18
    53a8:	29 23       	and	r18, r25
    53aa:	a0 81       	ld	r26, Z
    53ac:	b1 81       	ldd	r27, Z+1	; 0x01
    53ae:	a2 0f       	add	r26, r18
    53b0:	b1 1d       	adc	r27, r1
    53b2:	2c 91       	ld	r18, X
    53b4:	9f 5f       	subi	r25, 0xFF	; 255
    53b6:	89 23       	and	r24, r25
    53b8:	82 83       	std	Z+2, r24	; 0x02
    53ba:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    53be:	0b c0       	rjmp	.+22     	; 0x53d6 <__vector_37+0x6c>
    53c0:	e9 ec       	ldi	r30, 0xC9	; 201
    53c2:	f0 e0       	ldi	r31, 0x00	; 0
    53c4:	80 81       	ld	r24, Z
    53c6:	8f 7d       	andi	r24, 0xDF	; 223
    53c8:	80 83       	st	Z, r24
    53ca:	05 c0       	rjmp	.+10     	; 0x53d6 <__vector_37+0x6c>
    53cc:	e9 ec       	ldi	r30, 0xC9	; 201
    53ce:	f0 e0       	ldi	r31, 0x00	; 0
    53d0:	80 81       	ld	r24, Z
    53d2:	8f 7d       	andi	r24, 0xDF	; 223
    53d4:	80 83       	st	Z, r24
    53d6:	ff 91       	pop	r31
    53d8:	ef 91       	pop	r30
    53da:	bf 91       	pop	r27
    53dc:	af 91       	pop	r26
    53de:	9f 91       	pop	r25
    53e0:	8f 91       	pop	r24
    53e2:	2f 91       	pop	r18
    53e4:	0f 90       	pop	r0
    53e6:	0b be       	out	0x3b, r0	; 59
    53e8:	0f 90       	pop	r0
    53ea:	0f be       	out	0x3f, r0	; 63
    53ec:	0f 90       	pop	r0
    53ee:	1f 90       	pop	r1
    53f0:	18 95       	reti

000053f2 <__vector_51>:
    53f2:	1f 92       	push	r1
    53f4:	0f 92       	push	r0
    53f6:	0f b6       	in	r0, 0x3f	; 63
    53f8:	0f 92       	push	r0
    53fa:	11 24       	eor	r1, r1
    53fc:	0b b6       	in	r0, 0x3b	; 59
    53fe:	0f 92       	push	r0
    5400:	2f 93       	push	r18
    5402:	3f 93       	push	r19
    5404:	4f 93       	push	r20
    5406:	5f 93       	push	r21
    5408:	6f 93       	push	r22
    540a:	7f 93       	push	r23
    540c:	8f 93       	push	r24
    540e:	9f 93       	push	r25
    5410:	af 93       	push	r26
    5412:	bf 93       	push	r27
    5414:	cf 93       	push	r28
    5416:	df 93       	push	r29
    5418:	ef 93       	push	r30
    541a:	ff 93       	push	r31
    541c:	a0 91 d4 1a 	lds	r26, 0x1AD4	; 0x801ad4 <_ser_handle+0x4>
    5420:	b0 91 d5 1a 	lds	r27, 0x1AD5	; 0x801ad5 <_ser_handle+0x5>
    5424:	10 97       	sbiw	r26, 0x00	; 0
    5426:	11 f1       	breq	.+68     	; 0x546c <__vector_51+0x7a>
    5428:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    542c:	14 96       	adiw	r26, 0x04	; 4
    542e:	ed 91       	ld	r30, X+
    5430:	fc 91       	ld	r31, X
    5432:	15 97       	sbiw	r26, 0x05	; 5
    5434:	93 81       	ldd	r25, Z+3	; 0x03
    5436:	82 81       	ldd	r24, Z+2	; 0x02
    5438:	25 81       	ldd	r18, Z+5	; 0x05
    543a:	98 1b       	sub	r25, r24
    543c:	92 23       	and	r25, r18
    543e:	84 81       	ldd	r24, Z+4	; 0x04
    5440:	98 17       	cp	r25, r24
    5442:	61 f0       	breq	.+24     	; 0x545c <__vector_51+0x6a>
    5444:	83 81       	ldd	r24, Z+3	; 0x03
    5446:	26 95       	lsr	r18
    5448:	28 23       	and	r18, r24
    544a:	c0 81       	ld	r28, Z
    544c:	d1 81       	ldd	r29, Z+1	; 0x01
    544e:	c2 0f       	add	r28, r18
    5450:	d1 1d       	adc	r29, r1
    5452:	68 83       	st	Y, r22
    5454:	8f 5f       	subi	r24, 0xFF	; 255
    5456:	95 81       	ldd	r25, Z+5	; 0x05
    5458:	89 23       	and	r24, r25
    545a:	83 83       	std	Z+3, r24	; 0x03
    545c:	16 96       	adiw	r26, 0x06	; 6
    545e:	ed 91       	ld	r30, X+
    5460:	fc 91       	ld	r31, X
    5462:	17 97       	sbiw	r26, 0x07	; 7
    5464:	30 97       	sbiw	r30, 0x00	; 0
    5466:	11 f0       	breq	.+4      	; 0x546c <__vector_51+0x7a>
    5468:	cd 01       	movw	r24, r26
    546a:	19 95       	eicall
    546c:	ff 91       	pop	r31
    546e:	ef 91       	pop	r30
    5470:	df 91       	pop	r29
    5472:	cf 91       	pop	r28
    5474:	bf 91       	pop	r27
    5476:	af 91       	pop	r26
    5478:	9f 91       	pop	r25
    547a:	8f 91       	pop	r24
    547c:	7f 91       	pop	r23
    547e:	6f 91       	pop	r22
    5480:	5f 91       	pop	r21
    5482:	4f 91       	pop	r20
    5484:	3f 91       	pop	r19
    5486:	2f 91       	pop	r18
    5488:	0f 90       	pop	r0
    548a:	0b be       	out	0x3b, r0	; 59
    548c:	0f 90       	pop	r0
    548e:	0f be       	out	0x3f, r0	; 63
    5490:	0f 90       	pop	r0
    5492:	1f 90       	pop	r1
    5494:	18 95       	reti

00005496 <__vector_52>:
    5496:	1f 92       	push	r1
    5498:	0f 92       	push	r0
    549a:	0f b6       	in	r0, 0x3f	; 63
    549c:	0f 92       	push	r0
    549e:	11 24       	eor	r1, r1
    54a0:	0b b6       	in	r0, 0x3b	; 59
    54a2:	0f 92       	push	r0
    54a4:	2f 93       	push	r18
    54a6:	8f 93       	push	r24
    54a8:	9f 93       	push	r25
    54aa:	af 93       	push	r26
    54ac:	bf 93       	push	r27
    54ae:	ef 93       	push	r30
    54b0:	ff 93       	push	r31
    54b2:	e0 91 d4 1a 	lds	r30, 0x1AD4	; 0x801ad4 <_ser_handle+0x4>
    54b6:	f0 91 d5 1a 	lds	r31, 0x1AD5	; 0x801ad5 <_ser_handle+0x5>
    54ba:	30 97       	sbiw	r30, 0x00	; 0
    54bc:	b9 f0       	breq	.+46     	; 0x54ec <__vector_52+0x56>
    54be:	02 80       	ldd	r0, Z+2	; 0x02
    54c0:	f3 81       	ldd	r31, Z+3	; 0x03
    54c2:	e0 2d       	mov	r30, r0
    54c4:	93 81       	ldd	r25, Z+3	; 0x03
    54c6:	82 81       	ldd	r24, Z+2	; 0x02
    54c8:	98 17       	cp	r25, r24
    54ca:	b1 f0       	breq	.+44     	; 0x54f8 <__vector_52+0x62>
    54cc:	92 81       	ldd	r25, Z+2	; 0x02
    54ce:	85 81       	ldd	r24, Z+5	; 0x05
    54d0:	28 2f       	mov	r18, r24
    54d2:	26 95       	lsr	r18
    54d4:	29 23       	and	r18, r25
    54d6:	a0 81       	ld	r26, Z
    54d8:	b1 81       	ldd	r27, Z+1	; 0x01
    54da:	a2 0f       	add	r26, r18
    54dc:	b1 1d       	adc	r27, r1
    54de:	2c 91       	ld	r18, X
    54e0:	9f 5f       	subi	r25, 0xFF	; 255
    54e2:	89 23       	and	r24, r25
    54e4:	82 83       	std	Z+2, r24	; 0x02
    54e6:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    54ea:	0b c0       	rjmp	.+22     	; 0x5502 <__vector_52+0x6c>
    54ec:	e1 ed       	ldi	r30, 0xD1	; 209
    54ee:	f0 e0       	ldi	r31, 0x00	; 0
    54f0:	80 81       	ld	r24, Z
    54f2:	8f 7d       	andi	r24, 0xDF	; 223
    54f4:	80 83       	st	Z, r24
    54f6:	05 c0       	rjmp	.+10     	; 0x5502 <__vector_52+0x6c>
    54f8:	e1 ed       	ldi	r30, 0xD1	; 209
    54fa:	f0 e0       	ldi	r31, 0x00	; 0
    54fc:	80 81       	ld	r24, Z
    54fe:	8f 7d       	andi	r24, 0xDF	; 223
    5500:	80 83       	st	Z, r24
    5502:	ff 91       	pop	r31
    5504:	ef 91       	pop	r30
    5506:	bf 91       	pop	r27
    5508:	af 91       	pop	r26
    550a:	9f 91       	pop	r25
    550c:	8f 91       	pop	r24
    550e:	2f 91       	pop	r18
    5510:	0f 90       	pop	r0
    5512:	0b be       	out	0x3b, r0	; 59
    5514:	0f 90       	pop	r0
    5516:	0f be       	out	0x3f, r0	; 63
    5518:	0f 90       	pop	r0
    551a:	1f 90       	pop	r1
    551c:	18 95       	reti

0000551e <__vector_54>:
    551e:	1f 92       	push	r1
    5520:	0f 92       	push	r0
    5522:	0f b6       	in	r0, 0x3f	; 63
    5524:	0f 92       	push	r0
    5526:	11 24       	eor	r1, r1
    5528:	0b b6       	in	r0, 0x3b	; 59
    552a:	0f 92       	push	r0
    552c:	2f 93       	push	r18
    552e:	3f 93       	push	r19
    5530:	4f 93       	push	r20
    5532:	5f 93       	push	r21
    5534:	6f 93       	push	r22
    5536:	7f 93       	push	r23
    5538:	8f 93       	push	r24
    553a:	9f 93       	push	r25
    553c:	af 93       	push	r26
    553e:	bf 93       	push	r27
    5540:	cf 93       	push	r28
    5542:	df 93       	push	r29
    5544:	ef 93       	push	r30
    5546:	ff 93       	push	r31
    5548:	a0 91 d6 1a 	lds	r26, 0x1AD6	; 0x801ad6 <_ser_handle+0x6>
    554c:	b0 91 d7 1a 	lds	r27, 0x1AD7	; 0x801ad7 <_ser_handle+0x7>
    5550:	10 97       	sbiw	r26, 0x00	; 0
    5552:	11 f1       	breq	.+68     	; 0x5598 <__vector_54+0x7a>
    5554:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    5558:	14 96       	adiw	r26, 0x04	; 4
    555a:	ed 91       	ld	r30, X+
    555c:	fc 91       	ld	r31, X
    555e:	15 97       	sbiw	r26, 0x05	; 5
    5560:	93 81       	ldd	r25, Z+3	; 0x03
    5562:	82 81       	ldd	r24, Z+2	; 0x02
    5564:	25 81       	ldd	r18, Z+5	; 0x05
    5566:	98 1b       	sub	r25, r24
    5568:	92 23       	and	r25, r18
    556a:	84 81       	ldd	r24, Z+4	; 0x04
    556c:	98 17       	cp	r25, r24
    556e:	61 f0       	breq	.+24     	; 0x5588 <__vector_54+0x6a>
    5570:	83 81       	ldd	r24, Z+3	; 0x03
    5572:	26 95       	lsr	r18
    5574:	28 23       	and	r18, r24
    5576:	c0 81       	ld	r28, Z
    5578:	d1 81       	ldd	r29, Z+1	; 0x01
    557a:	c2 0f       	add	r28, r18
    557c:	d1 1d       	adc	r29, r1
    557e:	68 83       	st	Y, r22
    5580:	8f 5f       	subi	r24, 0xFF	; 255
    5582:	95 81       	ldd	r25, Z+5	; 0x05
    5584:	89 23       	and	r24, r25
    5586:	83 83       	std	Z+3, r24	; 0x03
    5588:	16 96       	adiw	r26, 0x06	; 6
    558a:	ed 91       	ld	r30, X+
    558c:	fc 91       	ld	r31, X
    558e:	17 97       	sbiw	r26, 0x07	; 7
    5590:	30 97       	sbiw	r30, 0x00	; 0
    5592:	11 f0       	breq	.+4      	; 0x5598 <__vector_54+0x7a>
    5594:	cd 01       	movw	r24, r26
    5596:	19 95       	eicall
    5598:	ff 91       	pop	r31
    559a:	ef 91       	pop	r30
    559c:	df 91       	pop	r29
    559e:	cf 91       	pop	r28
    55a0:	bf 91       	pop	r27
    55a2:	af 91       	pop	r26
    55a4:	9f 91       	pop	r25
    55a6:	8f 91       	pop	r24
    55a8:	7f 91       	pop	r23
    55aa:	6f 91       	pop	r22
    55ac:	5f 91       	pop	r21
    55ae:	4f 91       	pop	r20
    55b0:	3f 91       	pop	r19
    55b2:	2f 91       	pop	r18
    55b4:	0f 90       	pop	r0
    55b6:	0b be       	out	0x3b, r0	; 59
    55b8:	0f 90       	pop	r0
    55ba:	0f be       	out	0x3f, r0	; 63
    55bc:	0f 90       	pop	r0
    55be:	1f 90       	pop	r1
    55c0:	18 95       	reti

000055c2 <__vector_55>:
    55c2:	1f 92       	push	r1
    55c4:	0f 92       	push	r0
    55c6:	0f b6       	in	r0, 0x3f	; 63
    55c8:	0f 92       	push	r0
    55ca:	11 24       	eor	r1, r1
    55cc:	0b b6       	in	r0, 0x3b	; 59
    55ce:	0f 92       	push	r0
    55d0:	2f 93       	push	r18
    55d2:	8f 93       	push	r24
    55d4:	9f 93       	push	r25
    55d6:	af 93       	push	r26
    55d8:	bf 93       	push	r27
    55da:	ef 93       	push	r30
    55dc:	ff 93       	push	r31
    55de:	e0 91 d6 1a 	lds	r30, 0x1AD6	; 0x801ad6 <_ser_handle+0x6>
    55e2:	f0 91 d7 1a 	lds	r31, 0x1AD7	; 0x801ad7 <_ser_handle+0x7>
    55e6:	30 97       	sbiw	r30, 0x00	; 0
    55e8:	b9 f0       	breq	.+46     	; 0x5618 <__vector_55+0x56>
    55ea:	02 80       	ldd	r0, Z+2	; 0x02
    55ec:	f3 81       	ldd	r31, Z+3	; 0x03
    55ee:	e0 2d       	mov	r30, r0
    55f0:	93 81       	ldd	r25, Z+3	; 0x03
    55f2:	82 81       	ldd	r24, Z+2	; 0x02
    55f4:	98 17       	cp	r25, r24
    55f6:	b1 f0       	breq	.+44     	; 0x5624 <__vector_55+0x62>
    55f8:	92 81       	ldd	r25, Z+2	; 0x02
    55fa:	85 81       	ldd	r24, Z+5	; 0x05
    55fc:	28 2f       	mov	r18, r24
    55fe:	26 95       	lsr	r18
    5600:	29 23       	and	r18, r25
    5602:	a0 81       	ld	r26, Z
    5604:	b1 81       	ldd	r27, Z+1	; 0x01
    5606:	a2 0f       	add	r26, r18
    5608:	b1 1d       	adc	r27, r1
    560a:	2c 91       	ld	r18, X
    560c:	9f 5f       	subi	r25, 0xFF	; 255
    560e:	89 23       	and	r24, r25
    5610:	82 83       	std	Z+2, r24	; 0x02
    5612:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    5616:	0b c0       	rjmp	.+22     	; 0x562e <__vector_55+0x6c>
    5618:	e1 e3       	ldi	r30, 0x31	; 49
    561a:	f1 e0       	ldi	r31, 0x01	; 1
    561c:	80 81       	ld	r24, Z
    561e:	8f 7d       	andi	r24, 0xDF	; 223
    5620:	80 83       	st	Z, r24
    5622:	05 c0       	rjmp	.+10     	; 0x562e <__vector_55+0x6c>
    5624:	e1 e3       	ldi	r30, 0x31	; 49
    5626:	f1 e0       	ldi	r31, 0x01	; 1
    5628:	80 81       	ld	r24, Z
    562a:	8f 7d       	andi	r24, 0xDF	; 223
    562c:	80 83       	st	Z, r24
    562e:	ff 91       	pop	r31
    5630:	ef 91       	pop	r30
    5632:	bf 91       	pop	r27
    5634:	af 91       	pop	r26
    5636:	9f 91       	pop	r25
    5638:	8f 91       	pop	r24
    563a:	2f 91       	pop	r18
    563c:	0f 90       	pop	r0
    563e:	0b be       	out	0x3b, r0	; 59
    5640:	0f 90       	pop	r0
    5642:	0f be       	out	0x3f, r0	; 63
    5644:	0f 90       	pop	r0
    5646:	1f 90       	pop	r1
    5648:	18 95       	reti

0000564a <usart_getchar>:
    564a:	cf 93       	push	r28
    564c:	df 93       	push	r29
    564e:	1f 92       	push	r1
    5650:	cd b7       	in	r28, 0x3d	; 61
    5652:	de b7       	in	r29, 0x3e	; 62
    5654:	be 01       	movw	r22, r28
    5656:	6f 5f       	subi	r22, 0xFF	; 255
    5658:	7f 4f       	sbci	r23, 0xFF	; 255
    565a:	80 91 d8 1a 	lds	r24, 0x1AD8	; 0x801ad8 <_com_serial_instance>
    565e:	90 91 d9 1a 	lds	r25, 0x1AD9	; 0x801ad9 <_com_serial_instance+0x1>
    5662:	7f dd       	rcall	.-1282   	; 0x5162 <serial_get_byte>
    5664:	81 11       	cpse	r24, r1
    5666:	f6 cf       	rjmp	.-20     	; 0x5654 <usart_getchar+0xa>
    5668:	89 81       	ldd	r24, Y+1	; 0x01
    566a:	90 e0       	ldi	r25, 0x00	; 0
    566c:	0f 90       	pop	r0
    566e:	df 91       	pop	r29
    5670:	cf 91       	pop	r28
    5672:	08 95       	ret

00005674 <usart_putchar>:
    5674:	68 2f       	mov	r22, r24
    5676:	80 91 d8 1a 	lds	r24, 0x1AD8	; 0x801ad8 <_com_serial_instance>
    567a:	90 91 d9 1a 	lds	r25, 0x1AD9	; 0x801ad9 <_com_serial_instance+0x1>
    567e:	fc dc       	rcall	.-1544   	; 0x5078 <serial_send_byte>
    5680:	80 e0       	ldi	r24, 0x00	; 0
    5682:	90 e0       	ldi	r25, 0x00	; 0
    5684:	08 95       	ret

00005686 <stdioCreate>:
    5686:	8f 92       	push	r8
    5688:	9f 92       	push	r9
    568a:	af 92       	push	r10
    568c:	cf 92       	push	r12
    568e:	ef 92       	push	r14
    5690:	0f 93       	push	r16
    5692:	81 2c       	mov	r8, r1
    5694:	91 2c       	mov	r9, r1
    5696:	68 94       	set
    5698:	aa 24       	eor	r10, r10
    569a:	a7 f8       	bld	r10, 7
    569c:	68 94       	set
    569e:	cc 24       	eor	r12, r12
    56a0:	c7 f8       	bld	r12, 7
    56a2:	e1 2c       	mov	r14, r1
    56a4:	00 e0       	ldi	r16, 0x00	; 0
    56a6:	23 e0       	ldi	r18, 0x03	; 3
    56a8:	40 e0       	ldi	r20, 0x00	; 0
    56aa:	51 ee       	ldi	r21, 0xE1	; 225
    56ac:	60 e0       	ldi	r22, 0x00	; 0
    56ae:	70 e0       	ldi	r23, 0x00	; 0
    56b0:	4d dc       	rcall	.-1894   	; 0x4f4c <serial_new_instance>
    56b2:	90 93 d9 1a 	sts	0x1AD9, r25	; 0x801ad9 <_com_serial_instance+0x1>
    56b6:	80 93 d8 1a 	sts	0x1AD8, r24	; 0x801ad8 <_com_serial_instance>
    56ba:	e3 e2       	ldi	r30, 0x23	; 35
    56bc:	fb e1       	ldi	r31, 0x1B	; 27
    56be:	86 e1       	ldi	r24, 0x16	; 22
    56c0:	92 e0       	ldi	r25, 0x02	; 2
    56c2:	91 83       	std	Z+1, r25	; 0x01
    56c4:	80 83       	st	Z, r24
    56c6:	93 83       	std	Z+3, r25	; 0x03
    56c8:	82 83       	std	Z+2, r24	; 0x02
    56ca:	0f 91       	pop	r16
    56cc:	ef 90       	pop	r14
    56ce:	cf 90       	pop	r12
    56d0:	af 90       	pop	r10
    56d2:	9f 90       	pop	r9
    56d4:	8f 90       	pop	r8
    56d6:	08 95       	ret

000056d8 <_initTwiInterface>:
    56d8:	80 91 e8 1a 	lds	r24, 0x1AE8	; 0x801ae8 <_twiIsInitiated>
    56dc:	81 11       	cpse	r24, r1
    56de:	0c c0       	rjmp	.+24     	; 0x56f8 <_initTwiInterface+0x20>
    56e0:	8c e0       	ldi	r24, 0x0C	; 12
    56e2:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    56e6:	8f ef       	ldi	r24, 0xFF	; 255
    56e8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    56ec:	84 e0       	ldi	r24, 0x04	; 4
    56ee:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    56f2:	81 e0       	ldi	r24, 0x01	; 1
    56f4:	80 93 e8 1a 	sts	0x1AE8, r24	; 0x801ae8 <_twiIsInitiated>
    56f8:	08 95       	ret

000056fa <twiCreate>:
    56fa:	af 92       	push	r10
    56fc:	bf 92       	push	r11
    56fe:	cf 92       	push	r12
    5700:	df 92       	push	r13
    5702:	ef 92       	push	r14
    5704:	ff 92       	push	r15
    5706:	0f 93       	push	r16
    5708:	1f 93       	push	r17
    570a:	cf 93       	push	r28
    570c:	df 93       	push	r29
    570e:	a8 2e       	mov	r10, r24
    5710:	b6 2e       	mov	r11, r22
    5712:	69 01       	movw	r12, r18
    5714:	7a 01       	movw	r14, r20
    5716:	84 e0       	ldi	r24, 0x04	; 4
    5718:	90 e0       	ldi	r25, 0x00	; 0
    571a:	f2 d3       	rcall	.+2020   	; 0x5f00 <malloc>
    571c:	ec 01       	movw	r28, r24
    571e:	89 2b       	or	r24, r25
    5720:	61 f1       	breq	.+88     	; 0x577a <twiCreate+0x80>
    5722:	a8 82       	st	Y, r10
    5724:	81 e0       	ldi	r24, 0x01	; 1
    5726:	b8 12       	cpse	r11, r24
    5728:	12 c0       	rjmp	.+36     	; 0x574e <twiCreate+0x54>
    572a:	c7 01       	movw	r24, r14
    572c:	b6 01       	movw	r22, r12
    572e:	20 ea       	ldi	r18, 0xA0	; 160
    5730:	36 e8       	ldi	r19, 0x86	; 134
    5732:	41 e0       	ldi	r20, 0x01	; 1
    5734:	50 e0       	ldi	r21, 0x00	; 0
    5736:	8c d3       	rcall	.+1816   	; 0x5e50 <__udivmodsi4>
    5738:	da 01       	movw	r26, r20
    573a:	c9 01       	movw	r24, r18
    573c:	40 97       	sbiw	r24, 0x10	; 16
    573e:	a1 09       	sbc	r26, r1
    5740:	b1 09       	sbc	r27, r1
    5742:	b6 95       	lsr	r27
    5744:	a7 95       	ror	r26
    5746:	97 95       	ror	r25
    5748:	87 95       	ror	r24
    574a:	89 83       	std	Y+1, r24	; 0x01
    574c:	11 c0       	rjmp	.+34     	; 0x5770 <twiCreate+0x76>
    574e:	c7 01       	movw	r24, r14
    5750:	b6 01       	movw	r22, r12
    5752:	20 e8       	ldi	r18, 0x80	; 128
    5754:	3a e1       	ldi	r19, 0x1A	; 26
    5756:	46 e0       	ldi	r20, 0x06	; 6
    5758:	50 e0       	ldi	r21, 0x00	; 0
    575a:	7a d3       	rcall	.+1780   	; 0x5e50 <__udivmodsi4>
    575c:	da 01       	movw	r26, r20
    575e:	c9 01       	movw	r24, r18
    5760:	40 97       	sbiw	r24, 0x10	; 16
    5762:	a1 09       	sbc	r26, r1
    5764:	b1 09       	sbc	r27, r1
    5766:	b6 95       	lsr	r27
    5768:	a7 95       	ror	r26
    576a:	97 95       	ror	r25
    576c:	87 95       	ror	r24
    576e:	89 83       	std	Y+1, r24	; 0x01
    5770:	1b 83       	std	Y+3, r17	; 0x03
    5772:	0a 83       	std	Y+2, r16	; 0x02
    5774:	8c 2f       	mov	r24, r28
    5776:	9d 2f       	mov	r25, r29
    5778:	02 c0       	rjmp	.+4      	; 0x577e <twiCreate+0x84>
    577a:	80 e0       	ldi	r24, 0x00	; 0
    577c:	90 e0       	ldi	r25, 0x00	; 0
    577e:	df 91       	pop	r29
    5780:	cf 91       	pop	r28
    5782:	1f 91       	pop	r17
    5784:	0f 91       	pop	r16
    5786:	ff 90       	pop	r15
    5788:	ef 90       	pop	r14
    578a:	df 90       	pop	r13
    578c:	cf 90       	pop	r12
    578e:	bf 90       	pop	r11
    5790:	af 90       	pop	r10
    5792:	08 95       	ret

00005794 <twiIsBusy>:
    5794:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    5798:	81 70       	andi	r24, 0x01	; 1
    579a:	08 95       	ret

0000579c <twiTransmit>:
    579c:	ff 92       	push	r15
    579e:	0f 93       	push	r16
    57a0:	1f 93       	push	r17
    57a2:	cf 93       	push	r28
    57a4:	df 93       	push	r29
    57a6:	00 97       	sbiw	r24, 0x00	; 0
    57a8:	d1 f1       	breq	.+116    	; 0x581e <twiTransmit+0x82>
    57aa:	4a 30       	cpi	r20, 0x0A	; 10
    57ac:	d0 f5       	brcc	.+116    	; 0x5822 <twiTransmit+0x86>
    57ae:	f4 2e       	mov	r15, r20
    57b0:	8b 01       	movw	r16, r22
    57b2:	ec 01       	movw	r28, r24
    57b4:	ef df       	rcall	.-34     	; 0x5794 <twiIsBusy>
    57b6:	81 11       	cpse	r24, r1
    57b8:	36 c0       	rjmp	.+108    	; 0x5826 <twiTransmit+0x8a>
    57ba:	80 91 db 1a 	lds	r24, 0x1ADB	; 0x801adb <_twiCurrentHandler>
    57be:	90 91 dc 1a 	lds	r25, 0x1ADC	; 0x801adc <_twiCurrentHandler+0x1>
    57c2:	c8 17       	cp	r28, r24
    57c4:	d9 07       	cpc	r29, r25
    57c6:	41 f0       	breq	.+16     	; 0x57d8 <twiTransmit+0x3c>
    57c8:	87 df       	rcall	.-242    	; 0x56d8 <_initTwiInterface>
    57ca:	89 81       	ldd	r24, Y+1	; 0x01
    57cc:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    57d0:	d0 93 dc 1a 	sts	0x1ADC, r29	; 0x801adc <_twiCurrentHandler+0x1>
    57d4:	c0 93 db 1a 	sts	0x1ADB, r28	; 0x801adb <_twiCurrentHandler>
    57d8:	81 e0       	ldi	r24, 0x01	; 1
    57da:	8f 0d       	add	r24, r15
    57dc:	80 93 dd 1a 	sts	0x1ADD, r24	; 0x801add <_twiMessageLen>
    57e0:	88 81       	ld	r24, Y
    57e2:	88 0f       	add	r24, r24
    57e4:	80 93 de 1a 	sts	0x1ADE, r24	; 0x801ade <_twiMessageBuffer>
    57e8:	ff 20       	and	r15, r15
    57ea:	89 f0       	breq	.+34     	; 0x580e <twiTransmit+0x72>
    57ec:	f8 01       	movw	r30, r16
    57ee:	af ed       	ldi	r26, 0xDF	; 223
    57f0:	ba e1       	ldi	r27, 0x1A	; 26
    57f2:	4f ef       	ldi	r20, 0xFF	; 255
    57f4:	4f 0d       	add	r20, r15
    57f6:	64 2f       	mov	r22, r20
    57f8:	70 e0       	ldi	r23, 0x00	; 0
    57fa:	cb 01       	movw	r24, r22
    57fc:	01 96       	adiw	r24, 0x01	; 1
    57fe:	b8 01       	movw	r22, r16
    5800:	68 0f       	add	r22, r24
    5802:	79 1f       	adc	r23, r25
    5804:	81 91       	ld	r24, Z+
    5806:	8d 93       	st	X+, r24
    5808:	e6 17       	cp	r30, r22
    580a:	f7 07       	cpc	r31, r23
    580c:	d9 f7       	brne	.-10     	; 0x5804 <twiTransmit+0x68>
    580e:	88 ef       	ldi	r24, 0xF8	; 248
    5810:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <_twiCurrentState>
    5814:	85 ea       	ldi	r24, 0xA5	; 165
    5816:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    581a:	84 e0       	ldi	r24, 0x04	; 4
    581c:	05 c0       	rjmp	.+10     	; 0x5828 <twiTransmit+0x8c>
    581e:	86 e0       	ldi	r24, 0x06	; 6
    5820:	03 c0       	rjmp	.+6      	; 0x5828 <twiTransmit+0x8c>
    5822:	87 e0       	ldi	r24, 0x07	; 7
    5824:	01 c0       	rjmp	.+2      	; 0x5828 <twiTransmit+0x8c>
    5826:	82 e0       	ldi	r24, 0x02	; 2
    5828:	df 91       	pop	r29
    582a:	cf 91       	pop	r28
    582c:	1f 91       	pop	r17
    582e:	0f 91       	pop	r16
    5830:	ff 90       	pop	r15
    5832:	08 95       	ret

00005834 <twiReceive>:
    5834:	1f 93       	push	r17
    5836:	cf 93       	push	r28
    5838:	df 93       	push	r29
    583a:	00 97       	sbiw	r24, 0x00	; 0
    583c:	29 f1       	breq	.+74     	; 0x5888 <twiReceive+0x54>
    583e:	6b 30       	cpi	r22, 0x0B	; 11
    5840:	28 f5       	brcc	.+74     	; 0x588c <twiReceive+0x58>
    5842:	16 2f       	mov	r17, r22
    5844:	ec 01       	movw	r28, r24
    5846:	a6 df       	rcall	.-180    	; 0x5794 <twiIsBusy>
    5848:	81 11       	cpse	r24, r1
    584a:	22 c0       	rjmp	.+68     	; 0x5890 <twiReceive+0x5c>
    584c:	80 91 db 1a 	lds	r24, 0x1ADB	; 0x801adb <_twiCurrentHandler>
    5850:	90 91 dc 1a 	lds	r25, 0x1ADC	; 0x801adc <_twiCurrentHandler+0x1>
    5854:	c8 17       	cp	r28, r24
    5856:	d9 07       	cpc	r29, r25
    5858:	41 f0       	breq	.+16     	; 0x586a <twiReceive+0x36>
    585a:	3e df       	rcall	.-388    	; 0x56d8 <_initTwiInterface>
    585c:	89 81       	ldd	r24, Y+1	; 0x01
    585e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    5862:	d0 93 dc 1a 	sts	0x1ADC, r29	; 0x801adc <_twiCurrentHandler+0x1>
    5866:	c0 93 db 1a 	sts	0x1ADB, r28	; 0x801adb <_twiCurrentHandler>
    586a:	10 93 dd 1a 	sts	0x1ADD, r17	; 0x801add <_twiMessageLen>
    586e:	88 81       	ld	r24, Y
    5870:	88 0f       	add	r24, r24
    5872:	81 60       	ori	r24, 0x01	; 1
    5874:	80 93 de 1a 	sts	0x1ADE, r24	; 0x801ade <_twiMessageBuffer>
    5878:	88 ef       	ldi	r24, 0xF8	; 248
    587a:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <_twiCurrentState>
    587e:	85 ea       	ldi	r24, 0xA5	; 165
    5880:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    5884:	85 e0       	ldi	r24, 0x05	; 5
    5886:	05 c0       	rjmp	.+10     	; 0x5892 <twiReceive+0x5e>
    5888:	86 e0       	ldi	r24, 0x06	; 6
    588a:	03 c0       	rjmp	.+6      	; 0x5892 <twiReceive+0x5e>
    588c:	87 e0       	ldi	r24, 0x07	; 7
    588e:	01 c0       	rjmp	.+2      	; 0x5892 <twiReceive+0x5e>
    5890:	82 e0       	ldi	r24, 0x02	; 2
    5892:	df 91       	pop	r29
    5894:	cf 91       	pop	r28
    5896:	1f 91       	pop	r17
    5898:	08 95       	ret

0000589a <__vector_39>:
    589a:	1f 92       	push	r1
    589c:	0f 92       	push	r0
    589e:	0f b6       	in	r0, 0x3f	; 63
    58a0:	0f 92       	push	r0
    58a2:	11 24       	eor	r1, r1
    58a4:	0b b6       	in	r0, 0x3b	; 59
    58a6:	0f 92       	push	r0
    58a8:	2f 93       	push	r18
    58aa:	3f 93       	push	r19
    58ac:	4f 93       	push	r20
    58ae:	5f 93       	push	r21
    58b0:	6f 93       	push	r22
    58b2:	7f 93       	push	r23
    58b4:	8f 93       	push	r24
    58b6:	9f 93       	push	r25
    58b8:	af 93       	push	r26
    58ba:	bf 93       	push	r27
    58bc:	ef 93       	push	r30
    58be:	ff 93       	push	r31
    58c0:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    58c4:	8e 2f       	mov	r24, r30
    58c6:	90 e0       	ldi	r25, 0x00	; 0
    58c8:	fc 01       	movw	r30, r24
    58ca:	38 97       	sbiw	r30, 0x08	; 8
    58cc:	e1 35       	cpi	r30, 0x51	; 81
    58ce:	f1 05       	cpc	r31, r1
    58d0:	08 f0       	brcs	.+2      	; 0x58d4 <__vector_39+0x3a>
    58d2:	75 c0       	rjmp	.+234    	; 0x59be <__vector_39+0x124>
    58d4:	88 27       	eor	r24, r24
    58d6:	e4 58       	subi	r30, 0x84	; 132
    58d8:	ff 4f       	sbci	r31, 0xFF	; 255
    58da:	8f 4f       	sbci	r24, 0xFF	; 255
    58dc:	db c2       	rjmp	.+1462   	; 0x5e94 <__tablejump2__>
    58de:	10 92 da 1a 	sts	0x1ADA, r1	; 0x801ada <_index.1885>
    58e2:	e0 91 da 1a 	lds	r30, 0x1ADA	; 0x801ada <_index.1885>
    58e6:	80 91 dd 1a 	lds	r24, 0x1ADD	; 0x801add <_twiMessageLen>
    58ea:	e8 17       	cp	r30, r24
    58ec:	70 f4       	brcc	.+28     	; 0x590a <__vector_39+0x70>
    58ee:	81 e0       	ldi	r24, 0x01	; 1
    58f0:	8e 0f       	add	r24, r30
    58f2:	80 93 da 1a 	sts	0x1ADA, r24	; 0x801ada <_index.1885>
    58f6:	f0 e0       	ldi	r31, 0x00	; 0
    58f8:	e2 52       	subi	r30, 0x22	; 34
    58fa:	f5 4e       	sbci	r31, 0xE5	; 229
    58fc:	80 81       	ld	r24, Z
    58fe:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    5902:	85 e8       	ldi	r24, 0x85	; 133
    5904:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    5908:	72 c0       	rjmp	.+228    	; 0x59ee <__vector_39+0x154>
    590a:	84 e9       	ldi	r24, 0x94	; 148
    590c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    5910:	80 91 db 1a 	lds	r24, 0x1ADB	; 0x801adb <_twiCurrentHandler>
    5914:	90 91 dc 1a 	lds	r25, 0x1ADC	; 0x801adc <_twiCurrentHandler+0x1>
    5918:	dc 01       	movw	r26, r24
    591a:	12 96       	adiw	r26, 0x02	; 2
    591c:	ed 91       	ld	r30, X+
    591e:	fc 91       	ld	r31, X
    5920:	13 97       	sbiw	r26, 0x03	; 3
    5922:	30 97       	sbiw	r30, 0x00	; 0
    5924:	09 f4       	brne	.+2      	; 0x5928 <__vector_39+0x8e>
    5926:	63 c0       	rjmp	.+198    	; 0x59ee <__vector_39+0x154>
    5928:	20 e0       	ldi	r18, 0x00	; 0
    592a:	40 e0       	ldi	r20, 0x00	; 0
    592c:	50 e0       	ldi	r21, 0x00	; 0
    592e:	64 e0       	ldi	r22, 0x04	; 4
    5930:	19 95       	eicall
    5932:	5d c0       	rjmp	.+186    	; 0x59ee <__vector_39+0x154>
    5934:	e0 91 da 1a 	lds	r30, 0x1ADA	; 0x801ada <_index.1885>
    5938:	81 e0       	ldi	r24, 0x01	; 1
    593a:	8e 0f       	add	r24, r30
    593c:	80 93 da 1a 	sts	0x1ADA, r24	; 0x801ada <_index.1885>
    5940:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    5944:	f0 e0       	ldi	r31, 0x00	; 0
    5946:	e2 52       	subi	r30, 0x22	; 34
    5948:	f5 4e       	sbci	r31, 0xE5	; 229
    594a:	80 83       	st	Z, r24
    594c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    5950:	80 34       	cpi	r24, 0x40	; 64
    5952:	11 f4       	brne	.+4      	; 0x5958 <__vector_39+0xbe>
    5954:	10 92 da 1a 	sts	0x1ADA, r1	; 0x801ada <_index.1885>
    5958:	20 91 da 1a 	lds	r18, 0x1ADA	; 0x801ada <_index.1885>
    595c:	30 e0       	ldi	r19, 0x00	; 0
    595e:	80 91 dd 1a 	lds	r24, 0x1ADD	; 0x801add <_twiMessageLen>
    5962:	90 e0       	ldi	r25, 0x00	; 0
    5964:	01 97       	sbiw	r24, 0x01	; 1
    5966:	28 17       	cp	r18, r24
    5968:	39 07       	cpc	r19, r25
    596a:	24 f4       	brge	.+8      	; 0x5974 <__vector_39+0xda>
    596c:	85 ec       	ldi	r24, 0xC5	; 197
    596e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    5972:	3d c0       	rjmp	.+122    	; 0x59ee <__vector_39+0x154>
    5974:	85 e8       	ldi	r24, 0x85	; 133
    5976:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    597a:	39 c0       	rjmp	.+114    	; 0x59ee <__vector_39+0x154>
    597c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    5980:	e0 91 da 1a 	lds	r30, 0x1ADA	; 0x801ada <_index.1885>
    5984:	f0 e0       	ldi	r31, 0x00	; 0
    5986:	e2 52       	subi	r30, 0x22	; 34
    5988:	f5 4e       	sbci	r31, 0xE5	; 229
    598a:	80 83       	st	Z, r24
    598c:	84 e9       	ldi	r24, 0x94	; 148
    598e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    5992:	80 91 db 1a 	lds	r24, 0x1ADB	; 0x801adb <_twiCurrentHandler>
    5996:	90 91 dc 1a 	lds	r25, 0x1ADC	; 0x801adc <_twiCurrentHandler+0x1>
    599a:	dc 01       	movw	r26, r24
    599c:	12 96       	adiw	r26, 0x02	; 2
    599e:	ed 91       	ld	r30, X+
    59a0:	fc 91       	ld	r31, X
    59a2:	13 97       	sbiw	r26, 0x03	; 3
    59a4:	30 97       	sbiw	r30, 0x00	; 0
    59a6:	19 f1       	breq	.+70     	; 0x59ee <__vector_39+0x154>
    59a8:	20 91 dd 1a 	lds	r18, 0x1ADD	; 0x801add <_twiMessageLen>
    59ac:	4e ed       	ldi	r20, 0xDE	; 222
    59ae:	5a e1       	ldi	r21, 0x1A	; 26
    59b0:	65 e0       	ldi	r22, 0x05	; 5
    59b2:	19 95       	eicall
    59b4:	1c c0       	rjmp	.+56     	; 0x59ee <__vector_39+0x154>
    59b6:	85 ea       	ldi	r24, 0xA5	; 165
    59b8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    59bc:	18 c0       	rjmp	.+48     	; 0x59ee <__vector_39+0x154>
    59be:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    59c2:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <_twiCurrentState>
    59c6:	84 e0       	ldi	r24, 0x04	; 4
    59c8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    59cc:	80 91 db 1a 	lds	r24, 0x1ADB	; 0x801adb <_twiCurrentHandler>
    59d0:	90 91 dc 1a 	lds	r25, 0x1ADC	; 0x801adc <_twiCurrentHandler+0x1>
    59d4:	dc 01       	movw	r26, r24
    59d6:	12 96       	adiw	r26, 0x02	; 2
    59d8:	ed 91       	ld	r30, X+
    59da:	fc 91       	ld	r31, X
    59dc:	13 97       	sbiw	r26, 0x03	; 3
    59de:	30 97       	sbiw	r30, 0x00	; 0
    59e0:	31 f0       	breq	.+12     	; 0x59ee <__vector_39+0x154>
    59e2:	20 e0       	ldi	r18, 0x00	; 0
    59e4:	40 e0       	ldi	r20, 0x00	; 0
    59e6:	50 e0       	ldi	r21, 0x00	; 0
    59e8:	60 91 24 02 	lds	r22, 0x0224	; 0x800224 <_twiCurrentState>
    59ec:	19 95       	eicall
    59ee:	ff 91       	pop	r31
    59f0:	ef 91       	pop	r30
    59f2:	bf 91       	pop	r27
    59f4:	af 91       	pop	r26
    59f6:	9f 91       	pop	r25
    59f8:	8f 91       	pop	r24
    59fa:	7f 91       	pop	r23
    59fc:	6f 91       	pop	r22
    59fe:	5f 91       	pop	r21
    5a00:	4f 91       	pop	r20
    5a02:	3f 91       	pop	r19
    5a04:	2f 91       	pop	r18
    5a06:	0f 90       	pop	r0
    5a08:	0b be       	out	0x3b, r0	; 59
    5a0a:	0f 90       	pop	r0
    5a0c:	0f be       	out	0x3f, r0	; 63
    5a0e:	0f 90       	pop	r0
    5a10:	1f 90       	pop	r1
    5a12:	18 95       	reti

00005a14 <fifo_init>:
    5a14:	fc 01       	movw	r30, r24
    5a16:	41 11       	cpse	r20, r1
    5a18:	01 c0       	rjmp	.+2      	; 0x5a1c <fifo_init+0x8>
    5a1a:	e8 d3       	rcall	.+2000   	; 0x61ec <abort>
    5a1c:	84 2f       	mov	r24, r20
    5a1e:	90 e0       	ldi	r25, 0x00	; 0
    5a20:	9c 01       	movw	r18, r24
    5a22:	21 50       	subi	r18, 0x01	; 1
    5a24:	31 09       	sbc	r19, r1
    5a26:	82 23       	and	r24, r18
    5a28:	93 23       	and	r25, r19
    5a2a:	89 2b       	or	r24, r25
    5a2c:	09 f0       	breq	.+2      	; 0x5a30 <fifo_init+0x1c>
    5a2e:	de d3       	rcall	.+1980   	; 0x61ec <abort>
    5a30:	41 38       	cpi	r20, 0x81	; 129
    5a32:	08 f0       	brcs	.+2      	; 0x5a36 <fifo_init+0x22>
    5a34:	db d3       	rcall	.+1974   	; 0x61ec <abort>
    5a36:	12 82       	std	Z+2, r1	; 0x02
    5a38:	13 82       	std	Z+3, r1	; 0x03
    5a3a:	44 83       	std	Z+4, r20	; 0x04
    5a3c:	44 0f       	add	r20, r20
    5a3e:	41 50       	subi	r20, 0x01	; 1
    5a40:	45 83       	std	Z+5, r20	; 0x05
    5a42:	71 83       	std	Z+1, r23	; 0x01
    5a44:	60 83       	st	Z, r22
    5a46:	80 e0       	ldi	r24, 0x00	; 0
    5a48:	90 e0       	ldi	r25, 0x00	; 0
    5a4a:	08 95       	ret

00005a4c <__subsf3>:
    5a4c:	50 58       	subi	r21, 0x80	; 128

00005a4e <__addsf3>:
    5a4e:	bb 27       	eor	r27, r27
    5a50:	aa 27       	eor	r26, r26
    5a52:	0e d0       	rcall	.+28     	; 0x5a70 <__addsf3x>
    5a54:	4d c1       	rjmp	.+666    	; 0x5cf0 <__fp_round>
    5a56:	3e d1       	rcall	.+636    	; 0x5cd4 <__fp_pscA>
    5a58:	30 f0       	brcs	.+12     	; 0x5a66 <__addsf3+0x18>
    5a5a:	43 d1       	rcall	.+646    	; 0x5ce2 <__fp_pscB>
    5a5c:	20 f0       	brcs	.+8      	; 0x5a66 <__addsf3+0x18>
    5a5e:	31 f4       	brne	.+12     	; 0x5a6c <__addsf3+0x1e>
    5a60:	9f 3f       	cpi	r25, 0xFF	; 255
    5a62:	11 f4       	brne	.+4      	; 0x5a68 <__addsf3+0x1a>
    5a64:	1e f4       	brtc	.+6      	; 0x5a6c <__addsf3+0x1e>
    5a66:	33 c1       	rjmp	.+614    	; 0x5cce <__fp_nan>
    5a68:	0e f4       	brtc	.+2      	; 0x5a6c <__addsf3+0x1e>
    5a6a:	e0 95       	com	r30
    5a6c:	e7 fb       	bst	r30, 7
    5a6e:	29 c1       	rjmp	.+594    	; 0x5cc2 <__fp_inf>

00005a70 <__addsf3x>:
    5a70:	e9 2f       	mov	r30, r25
    5a72:	4f d1       	rcall	.+670    	; 0x5d12 <__fp_split3>
    5a74:	80 f3       	brcs	.-32     	; 0x5a56 <__addsf3+0x8>
    5a76:	ba 17       	cp	r27, r26
    5a78:	62 07       	cpc	r22, r18
    5a7a:	73 07       	cpc	r23, r19
    5a7c:	84 07       	cpc	r24, r20
    5a7e:	95 07       	cpc	r25, r21
    5a80:	18 f0       	brcs	.+6      	; 0x5a88 <__addsf3x+0x18>
    5a82:	71 f4       	brne	.+28     	; 0x5aa0 <__addsf3x+0x30>
    5a84:	9e f5       	brtc	.+102    	; 0x5aec <__addsf3x+0x7c>
    5a86:	67 c1       	rjmp	.+718    	; 0x5d56 <__fp_zero>
    5a88:	0e f4       	brtc	.+2      	; 0x5a8c <__addsf3x+0x1c>
    5a8a:	e0 95       	com	r30
    5a8c:	0b 2e       	mov	r0, r27
    5a8e:	ba 2f       	mov	r27, r26
    5a90:	a0 2d       	mov	r26, r0
    5a92:	0b 01       	movw	r0, r22
    5a94:	b9 01       	movw	r22, r18
    5a96:	90 01       	movw	r18, r0
    5a98:	0c 01       	movw	r0, r24
    5a9a:	ca 01       	movw	r24, r20
    5a9c:	a0 01       	movw	r20, r0
    5a9e:	11 24       	eor	r1, r1
    5aa0:	ff 27       	eor	r31, r31
    5aa2:	59 1b       	sub	r21, r25
    5aa4:	99 f0       	breq	.+38     	; 0x5acc <__addsf3x+0x5c>
    5aa6:	59 3f       	cpi	r21, 0xF9	; 249
    5aa8:	50 f4       	brcc	.+20     	; 0x5abe <__addsf3x+0x4e>
    5aaa:	50 3e       	cpi	r21, 0xE0	; 224
    5aac:	68 f1       	brcs	.+90     	; 0x5b08 <__addsf3x+0x98>
    5aae:	1a 16       	cp	r1, r26
    5ab0:	f0 40       	sbci	r31, 0x00	; 0
    5ab2:	a2 2f       	mov	r26, r18
    5ab4:	23 2f       	mov	r18, r19
    5ab6:	34 2f       	mov	r19, r20
    5ab8:	44 27       	eor	r20, r20
    5aba:	58 5f       	subi	r21, 0xF8	; 248
    5abc:	f3 cf       	rjmp	.-26     	; 0x5aa4 <__addsf3x+0x34>
    5abe:	46 95       	lsr	r20
    5ac0:	37 95       	ror	r19
    5ac2:	27 95       	ror	r18
    5ac4:	a7 95       	ror	r26
    5ac6:	f0 40       	sbci	r31, 0x00	; 0
    5ac8:	53 95       	inc	r21
    5aca:	c9 f7       	brne	.-14     	; 0x5abe <__addsf3x+0x4e>
    5acc:	7e f4       	brtc	.+30     	; 0x5aec <__addsf3x+0x7c>
    5ace:	1f 16       	cp	r1, r31
    5ad0:	ba 0b       	sbc	r27, r26
    5ad2:	62 0b       	sbc	r22, r18
    5ad4:	73 0b       	sbc	r23, r19
    5ad6:	84 0b       	sbc	r24, r20
    5ad8:	ba f0       	brmi	.+46     	; 0x5b08 <__addsf3x+0x98>
    5ada:	91 50       	subi	r25, 0x01	; 1
    5adc:	a1 f0       	breq	.+40     	; 0x5b06 <__addsf3x+0x96>
    5ade:	ff 0f       	add	r31, r31
    5ae0:	bb 1f       	adc	r27, r27
    5ae2:	66 1f       	adc	r22, r22
    5ae4:	77 1f       	adc	r23, r23
    5ae6:	88 1f       	adc	r24, r24
    5ae8:	c2 f7       	brpl	.-16     	; 0x5ada <__addsf3x+0x6a>
    5aea:	0e c0       	rjmp	.+28     	; 0x5b08 <__addsf3x+0x98>
    5aec:	ba 0f       	add	r27, r26
    5aee:	62 1f       	adc	r22, r18
    5af0:	73 1f       	adc	r23, r19
    5af2:	84 1f       	adc	r24, r20
    5af4:	48 f4       	brcc	.+18     	; 0x5b08 <__addsf3x+0x98>
    5af6:	87 95       	ror	r24
    5af8:	77 95       	ror	r23
    5afa:	67 95       	ror	r22
    5afc:	b7 95       	ror	r27
    5afe:	f7 95       	ror	r31
    5b00:	9e 3f       	cpi	r25, 0xFE	; 254
    5b02:	08 f0       	brcs	.+2      	; 0x5b06 <__addsf3x+0x96>
    5b04:	b3 cf       	rjmp	.-154    	; 0x5a6c <__addsf3+0x1e>
    5b06:	93 95       	inc	r25
    5b08:	88 0f       	add	r24, r24
    5b0a:	08 f0       	brcs	.+2      	; 0x5b0e <__addsf3x+0x9e>
    5b0c:	99 27       	eor	r25, r25
    5b0e:	ee 0f       	add	r30, r30
    5b10:	97 95       	ror	r25
    5b12:	87 95       	ror	r24
    5b14:	08 95       	ret

00005b16 <__divsf3>:
    5b16:	0c d0       	rcall	.+24     	; 0x5b30 <__divsf3x>
    5b18:	eb c0       	rjmp	.+470    	; 0x5cf0 <__fp_round>
    5b1a:	e3 d0       	rcall	.+454    	; 0x5ce2 <__fp_pscB>
    5b1c:	40 f0       	brcs	.+16     	; 0x5b2e <__divsf3+0x18>
    5b1e:	da d0       	rcall	.+436    	; 0x5cd4 <__fp_pscA>
    5b20:	30 f0       	brcs	.+12     	; 0x5b2e <__divsf3+0x18>
    5b22:	21 f4       	brne	.+8      	; 0x5b2c <__divsf3+0x16>
    5b24:	5f 3f       	cpi	r21, 0xFF	; 255
    5b26:	19 f0       	breq	.+6      	; 0x5b2e <__divsf3+0x18>
    5b28:	cc c0       	rjmp	.+408    	; 0x5cc2 <__fp_inf>
    5b2a:	51 11       	cpse	r21, r1
    5b2c:	15 c1       	rjmp	.+554    	; 0x5d58 <__fp_szero>
    5b2e:	cf c0       	rjmp	.+414    	; 0x5cce <__fp_nan>

00005b30 <__divsf3x>:
    5b30:	f0 d0       	rcall	.+480    	; 0x5d12 <__fp_split3>
    5b32:	98 f3       	brcs	.-26     	; 0x5b1a <__divsf3+0x4>

00005b34 <__divsf3_pse>:
    5b34:	99 23       	and	r25, r25
    5b36:	c9 f3       	breq	.-14     	; 0x5b2a <__divsf3+0x14>
    5b38:	55 23       	and	r21, r21
    5b3a:	b1 f3       	breq	.-20     	; 0x5b28 <__divsf3+0x12>
    5b3c:	95 1b       	sub	r25, r21
    5b3e:	55 0b       	sbc	r21, r21
    5b40:	bb 27       	eor	r27, r27
    5b42:	aa 27       	eor	r26, r26
    5b44:	62 17       	cp	r22, r18
    5b46:	73 07       	cpc	r23, r19
    5b48:	84 07       	cpc	r24, r20
    5b4a:	38 f0       	brcs	.+14     	; 0x5b5a <__divsf3_pse+0x26>
    5b4c:	9f 5f       	subi	r25, 0xFF	; 255
    5b4e:	5f 4f       	sbci	r21, 0xFF	; 255
    5b50:	22 0f       	add	r18, r18
    5b52:	33 1f       	adc	r19, r19
    5b54:	44 1f       	adc	r20, r20
    5b56:	aa 1f       	adc	r26, r26
    5b58:	a9 f3       	breq	.-22     	; 0x5b44 <__divsf3_pse+0x10>
    5b5a:	33 d0       	rcall	.+102    	; 0x5bc2 <__divsf3_pse+0x8e>
    5b5c:	0e 2e       	mov	r0, r30
    5b5e:	3a f0       	brmi	.+14     	; 0x5b6e <__divsf3_pse+0x3a>
    5b60:	e0 e8       	ldi	r30, 0x80	; 128
    5b62:	30 d0       	rcall	.+96     	; 0x5bc4 <__divsf3_pse+0x90>
    5b64:	91 50       	subi	r25, 0x01	; 1
    5b66:	50 40       	sbci	r21, 0x00	; 0
    5b68:	e6 95       	lsr	r30
    5b6a:	00 1c       	adc	r0, r0
    5b6c:	ca f7       	brpl	.-14     	; 0x5b60 <__divsf3_pse+0x2c>
    5b6e:	29 d0       	rcall	.+82     	; 0x5bc2 <__divsf3_pse+0x8e>
    5b70:	fe 2f       	mov	r31, r30
    5b72:	27 d0       	rcall	.+78     	; 0x5bc2 <__divsf3_pse+0x8e>
    5b74:	66 0f       	add	r22, r22
    5b76:	77 1f       	adc	r23, r23
    5b78:	88 1f       	adc	r24, r24
    5b7a:	bb 1f       	adc	r27, r27
    5b7c:	26 17       	cp	r18, r22
    5b7e:	37 07       	cpc	r19, r23
    5b80:	48 07       	cpc	r20, r24
    5b82:	ab 07       	cpc	r26, r27
    5b84:	b0 e8       	ldi	r27, 0x80	; 128
    5b86:	09 f0       	breq	.+2      	; 0x5b8a <__divsf3_pse+0x56>
    5b88:	bb 0b       	sbc	r27, r27
    5b8a:	80 2d       	mov	r24, r0
    5b8c:	bf 01       	movw	r22, r30
    5b8e:	ff 27       	eor	r31, r31
    5b90:	93 58       	subi	r25, 0x83	; 131
    5b92:	5f 4f       	sbci	r21, 0xFF	; 255
    5b94:	2a f0       	brmi	.+10     	; 0x5ba0 <__divsf3_pse+0x6c>
    5b96:	9e 3f       	cpi	r25, 0xFE	; 254
    5b98:	51 05       	cpc	r21, r1
    5b9a:	68 f0       	brcs	.+26     	; 0x5bb6 <__divsf3_pse+0x82>
    5b9c:	92 c0       	rjmp	.+292    	; 0x5cc2 <__fp_inf>
    5b9e:	dc c0       	rjmp	.+440    	; 0x5d58 <__fp_szero>
    5ba0:	5f 3f       	cpi	r21, 0xFF	; 255
    5ba2:	ec f3       	brlt	.-6      	; 0x5b9e <__divsf3_pse+0x6a>
    5ba4:	98 3e       	cpi	r25, 0xE8	; 232
    5ba6:	dc f3       	brlt	.-10     	; 0x5b9e <__divsf3_pse+0x6a>
    5ba8:	86 95       	lsr	r24
    5baa:	77 95       	ror	r23
    5bac:	67 95       	ror	r22
    5bae:	b7 95       	ror	r27
    5bb0:	f7 95       	ror	r31
    5bb2:	9f 5f       	subi	r25, 0xFF	; 255
    5bb4:	c9 f7       	brne	.-14     	; 0x5ba8 <__divsf3_pse+0x74>
    5bb6:	88 0f       	add	r24, r24
    5bb8:	91 1d       	adc	r25, r1
    5bba:	96 95       	lsr	r25
    5bbc:	87 95       	ror	r24
    5bbe:	97 f9       	bld	r25, 7
    5bc0:	08 95       	ret
    5bc2:	e1 e0       	ldi	r30, 0x01	; 1
    5bc4:	66 0f       	add	r22, r22
    5bc6:	77 1f       	adc	r23, r23
    5bc8:	88 1f       	adc	r24, r24
    5bca:	bb 1f       	adc	r27, r27
    5bcc:	62 17       	cp	r22, r18
    5bce:	73 07       	cpc	r23, r19
    5bd0:	84 07       	cpc	r24, r20
    5bd2:	ba 07       	cpc	r27, r26
    5bd4:	20 f0       	brcs	.+8      	; 0x5bde <__divsf3_pse+0xaa>
    5bd6:	62 1b       	sub	r22, r18
    5bd8:	73 0b       	sbc	r23, r19
    5bda:	84 0b       	sbc	r24, r20
    5bdc:	ba 0b       	sbc	r27, r26
    5bde:	ee 1f       	adc	r30, r30
    5be0:	88 f7       	brcc	.-30     	; 0x5bc4 <__divsf3_pse+0x90>
    5be2:	e0 95       	com	r30
    5be4:	08 95       	ret

00005be6 <__fixsfsi>:
    5be6:	04 d0       	rcall	.+8      	; 0x5bf0 <__fixunssfsi>
    5be8:	68 94       	set
    5bea:	b1 11       	cpse	r27, r1
    5bec:	b5 c0       	rjmp	.+362    	; 0x5d58 <__fp_szero>
    5bee:	08 95       	ret

00005bf0 <__fixunssfsi>:
    5bf0:	98 d0       	rcall	.+304    	; 0x5d22 <__fp_splitA>
    5bf2:	88 f0       	brcs	.+34     	; 0x5c16 <__fixunssfsi+0x26>
    5bf4:	9f 57       	subi	r25, 0x7F	; 127
    5bf6:	90 f0       	brcs	.+36     	; 0x5c1c <__fixunssfsi+0x2c>
    5bf8:	b9 2f       	mov	r27, r25
    5bfa:	99 27       	eor	r25, r25
    5bfc:	b7 51       	subi	r27, 0x17	; 23
    5bfe:	a0 f0       	brcs	.+40     	; 0x5c28 <__fixunssfsi+0x38>
    5c00:	d1 f0       	breq	.+52     	; 0x5c36 <__fixunssfsi+0x46>
    5c02:	66 0f       	add	r22, r22
    5c04:	77 1f       	adc	r23, r23
    5c06:	88 1f       	adc	r24, r24
    5c08:	99 1f       	adc	r25, r25
    5c0a:	1a f0       	brmi	.+6      	; 0x5c12 <__fixunssfsi+0x22>
    5c0c:	ba 95       	dec	r27
    5c0e:	c9 f7       	brne	.-14     	; 0x5c02 <__fixunssfsi+0x12>
    5c10:	12 c0       	rjmp	.+36     	; 0x5c36 <__fixunssfsi+0x46>
    5c12:	b1 30       	cpi	r27, 0x01	; 1
    5c14:	81 f0       	breq	.+32     	; 0x5c36 <__fixunssfsi+0x46>
    5c16:	9f d0       	rcall	.+318    	; 0x5d56 <__fp_zero>
    5c18:	b1 e0       	ldi	r27, 0x01	; 1
    5c1a:	08 95       	ret
    5c1c:	9c c0       	rjmp	.+312    	; 0x5d56 <__fp_zero>
    5c1e:	67 2f       	mov	r22, r23
    5c20:	78 2f       	mov	r23, r24
    5c22:	88 27       	eor	r24, r24
    5c24:	b8 5f       	subi	r27, 0xF8	; 248
    5c26:	39 f0       	breq	.+14     	; 0x5c36 <__fixunssfsi+0x46>
    5c28:	b9 3f       	cpi	r27, 0xF9	; 249
    5c2a:	cc f3       	brlt	.-14     	; 0x5c1e <__fixunssfsi+0x2e>
    5c2c:	86 95       	lsr	r24
    5c2e:	77 95       	ror	r23
    5c30:	67 95       	ror	r22
    5c32:	b3 95       	inc	r27
    5c34:	d9 f7       	brne	.-10     	; 0x5c2c <__fixunssfsi+0x3c>
    5c36:	3e f4       	brtc	.+14     	; 0x5c46 <__fixunssfsi+0x56>
    5c38:	90 95       	com	r25
    5c3a:	80 95       	com	r24
    5c3c:	70 95       	com	r23
    5c3e:	61 95       	neg	r22
    5c40:	7f 4f       	sbci	r23, 0xFF	; 255
    5c42:	8f 4f       	sbci	r24, 0xFF	; 255
    5c44:	9f 4f       	sbci	r25, 0xFF	; 255
    5c46:	08 95       	ret

00005c48 <__floatunsisf>:
    5c48:	e8 94       	clt
    5c4a:	09 c0       	rjmp	.+18     	; 0x5c5e <__floatsisf+0x12>

00005c4c <__floatsisf>:
    5c4c:	97 fb       	bst	r25, 7
    5c4e:	3e f4       	brtc	.+14     	; 0x5c5e <__floatsisf+0x12>
    5c50:	90 95       	com	r25
    5c52:	80 95       	com	r24
    5c54:	70 95       	com	r23
    5c56:	61 95       	neg	r22
    5c58:	7f 4f       	sbci	r23, 0xFF	; 255
    5c5a:	8f 4f       	sbci	r24, 0xFF	; 255
    5c5c:	9f 4f       	sbci	r25, 0xFF	; 255
    5c5e:	99 23       	and	r25, r25
    5c60:	a9 f0       	breq	.+42     	; 0x5c8c <__floatsisf+0x40>
    5c62:	f9 2f       	mov	r31, r25
    5c64:	96 e9       	ldi	r25, 0x96	; 150
    5c66:	bb 27       	eor	r27, r27
    5c68:	93 95       	inc	r25
    5c6a:	f6 95       	lsr	r31
    5c6c:	87 95       	ror	r24
    5c6e:	77 95       	ror	r23
    5c70:	67 95       	ror	r22
    5c72:	b7 95       	ror	r27
    5c74:	f1 11       	cpse	r31, r1
    5c76:	f8 cf       	rjmp	.-16     	; 0x5c68 <__floatsisf+0x1c>
    5c78:	fa f4       	brpl	.+62     	; 0x5cb8 <__floatsisf+0x6c>
    5c7a:	bb 0f       	add	r27, r27
    5c7c:	11 f4       	brne	.+4      	; 0x5c82 <__floatsisf+0x36>
    5c7e:	60 ff       	sbrs	r22, 0
    5c80:	1b c0       	rjmp	.+54     	; 0x5cb8 <__floatsisf+0x6c>
    5c82:	6f 5f       	subi	r22, 0xFF	; 255
    5c84:	7f 4f       	sbci	r23, 0xFF	; 255
    5c86:	8f 4f       	sbci	r24, 0xFF	; 255
    5c88:	9f 4f       	sbci	r25, 0xFF	; 255
    5c8a:	16 c0       	rjmp	.+44     	; 0x5cb8 <__floatsisf+0x6c>
    5c8c:	88 23       	and	r24, r24
    5c8e:	11 f0       	breq	.+4      	; 0x5c94 <__floatsisf+0x48>
    5c90:	96 e9       	ldi	r25, 0x96	; 150
    5c92:	11 c0       	rjmp	.+34     	; 0x5cb6 <__floatsisf+0x6a>
    5c94:	77 23       	and	r23, r23
    5c96:	21 f0       	breq	.+8      	; 0x5ca0 <__floatsisf+0x54>
    5c98:	9e e8       	ldi	r25, 0x8E	; 142
    5c9a:	87 2f       	mov	r24, r23
    5c9c:	76 2f       	mov	r23, r22
    5c9e:	05 c0       	rjmp	.+10     	; 0x5caa <__floatsisf+0x5e>
    5ca0:	66 23       	and	r22, r22
    5ca2:	71 f0       	breq	.+28     	; 0x5cc0 <__floatsisf+0x74>
    5ca4:	96 e8       	ldi	r25, 0x86	; 134
    5ca6:	86 2f       	mov	r24, r22
    5ca8:	70 e0       	ldi	r23, 0x00	; 0
    5caa:	60 e0       	ldi	r22, 0x00	; 0
    5cac:	2a f0       	brmi	.+10     	; 0x5cb8 <__floatsisf+0x6c>
    5cae:	9a 95       	dec	r25
    5cb0:	66 0f       	add	r22, r22
    5cb2:	77 1f       	adc	r23, r23
    5cb4:	88 1f       	adc	r24, r24
    5cb6:	da f7       	brpl	.-10     	; 0x5cae <__floatsisf+0x62>
    5cb8:	88 0f       	add	r24, r24
    5cba:	96 95       	lsr	r25
    5cbc:	87 95       	ror	r24
    5cbe:	97 f9       	bld	r25, 7
    5cc0:	08 95       	ret

00005cc2 <__fp_inf>:
    5cc2:	97 f9       	bld	r25, 7
    5cc4:	9f 67       	ori	r25, 0x7F	; 127
    5cc6:	80 e8       	ldi	r24, 0x80	; 128
    5cc8:	70 e0       	ldi	r23, 0x00	; 0
    5cca:	60 e0       	ldi	r22, 0x00	; 0
    5ccc:	08 95       	ret

00005cce <__fp_nan>:
    5cce:	9f ef       	ldi	r25, 0xFF	; 255
    5cd0:	80 ec       	ldi	r24, 0xC0	; 192
    5cd2:	08 95       	ret

00005cd4 <__fp_pscA>:
    5cd4:	00 24       	eor	r0, r0
    5cd6:	0a 94       	dec	r0
    5cd8:	16 16       	cp	r1, r22
    5cda:	17 06       	cpc	r1, r23
    5cdc:	18 06       	cpc	r1, r24
    5cde:	09 06       	cpc	r0, r25
    5ce0:	08 95       	ret

00005ce2 <__fp_pscB>:
    5ce2:	00 24       	eor	r0, r0
    5ce4:	0a 94       	dec	r0
    5ce6:	12 16       	cp	r1, r18
    5ce8:	13 06       	cpc	r1, r19
    5cea:	14 06       	cpc	r1, r20
    5cec:	05 06       	cpc	r0, r21
    5cee:	08 95       	ret

00005cf0 <__fp_round>:
    5cf0:	09 2e       	mov	r0, r25
    5cf2:	03 94       	inc	r0
    5cf4:	00 0c       	add	r0, r0
    5cf6:	11 f4       	brne	.+4      	; 0x5cfc <__fp_round+0xc>
    5cf8:	88 23       	and	r24, r24
    5cfa:	52 f0       	brmi	.+20     	; 0x5d10 <__fp_round+0x20>
    5cfc:	bb 0f       	add	r27, r27
    5cfe:	40 f4       	brcc	.+16     	; 0x5d10 <__fp_round+0x20>
    5d00:	bf 2b       	or	r27, r31
    5d02:	11 f4       	brne	.+4      	; 0x5d08 <__fp_round+0x18>
    5d04:	60 ff       	sbrs	r22, 0
    5d06:	04 c0       	rjmp	.+8      	; 0x5d10 <__fp_round+0x20>
    5d08:	6f 5f       	subi	r22, 0xFF	; 255
    5d0a:	7f 4f       	sbci	r23, 0xFF	; 255
    5d0c:	8f 4f       	sbci	r24, 0xFF	; 255
    5d0e:	9f 4f       	sbci	r25, 0xFF	; 255
    5d10:	08 95       	ret

00005d12 <__fp_split3>:
    5d12:	57 fd       	sbrc	r21, 7
    5d14:	90 58       	subi	r25, 0x80	; 128
    5d16:	44 0f       	add	r20, r20
    5d18:	55 1f       	adc	r21, r21
    5d1a:	59 f0       	breq	.+22     	; 0x5d32 <__fp_splitA+0x10>
    5d1c:	5f 3f       	cpi	r21, 0xFF	; 255
    5d1e:	71 f0       	breq	.+28     	; 0x5d3c <__fp_splitA+0x1a>
    5d20:	47 95       	ror	r20

00005d22 <__fp_splitA>:
    5d22:	88 0f       	add	r24, r24
    5d24:	97 fb       	bst	r25, 7
    5d26:	99 1f       	adc	r25, r25
    5d28:	61 f0       	breq	.+24     	; 0x5d42 <__fp_splitA+0x20>
    5d2a:	9f 3f       	cpi	r25, 0xFF	; 255
    5d2c:	79 f0       	breq	.+30     	; 0x5d4c <__fp_splitA+0x2a>
    5d2e:	87 95       	ror	r24
    5d30:	08 95       	ret
    5d32:	12 16       	cp	r1, r18
    5d34:	13 06       	cpc	r1, r19
    5d36:	14 06       	cpc	r1, r20
    5d38:	55 1f       	adc	r21, r21
    5d3a:	f2 cf       	rjmp	.-28     	; 0x5d20 <__fp_split3+0xe>
    5d3c:	46 95       	lsr	r20
    5d3e:	f1 df       	rcall	.-30     	; 0x5d22 <__fp_splitA>
    5d40:	08 c0       	rjmp	.+16     	; 0x5d52 <__fp_splitA+0x30>
    5d42:	16 16       	cp	r1, r22
    5d44:	17 06       	cpc	r1, r23
    5d46:	18 06       	cpc	r1, r24
    5d48:	99 1f       	adc	r25, r25
    5d4a:	f1 cf       	rjmp	.-30     	; 0x5d2e <__fp_splitA+0xc>
    5d4c:	86 95       	lsr	r24
    5d4e:	71 05       	cpc	r23, r1
    5d50:	61 05       	cpc	r22, r1
    5d52:	08 94       	sec
    5d54:	08 95       	ret

00005d56 <__fp_zero>:
    5d56:	e8 94       	clt

00005d58 <__fp_szero>:
    5d58:	bb 27       	eor	r27, r27
    5d5a:	66 27       	eor	r22, r22
    5d5c:	77 27       	eor	r23, r23
    5d5e:	cb 01       	movw	r24, r22
    5d60:	97 f9       	bld	r25, 7
    5d62:	08 95       	ret

00005d64 <__mulsf3>:
    5d64:	0b d0       	rcall	.+22     	; 0x5d7c <__mulsf3x>
    5d66:	c4 cf       	rjmp	.-120    	; 0x5cf0 <__fp_round>
    5d68:	b5 df       	rcall	.-150    	; 0x5cd4 <__fp_pscA>
    5d6a:	28 f0       	brcs	.+10     	; 0x5d76 <__mulsf3+0x12>
    5d6c:	ba df       	rcall	.-140    	; 0x5ce2 <__fp_pscB>
    5d6e:	18 f0       	brcs	.+6      	; 0x5d76 <__mulsf3+0x12>
    5d70:	95 23       	and	r25, r21
    5d72:	09 f0       	breq	.+2      	; 0x5d76 <__mulsf3+0x12>
    5d74:	a6 cf       	rjmp	.-180    	; 0x5cc2 <__fp_inf>
    5d76:	ab cf       	rjmp	.-170    	; 0x5cce <__fp_nan>
    5d78:	11 24       	eor	r1, r1
    5d7a:	ee cf       	rjmp	.-36     	; 0x5d58 <__fp_szero>

00005d7c <__mulsf3x>:
    5d7c:	ca df       	rcall	.-108    	; 0x5d12 <__fp_split3>
    5d7e:	a0 f3       	brcs	.-24     	; 0x5d68 <__mulsf3+0x4>

00005d80 <__mulsf3_pse>:
    5d80:	95 9f       	mul	r25, r21
    5d82:	d1 f3       	breq	.-12     	; 0x5d78 <__mulsf3+0x14>
    5d84:	95 0f       	add	r25, r21
    5d86:	50 e0       	ldi	r21, 0x00	; 0
    5d88:	55 1f       	adc	r21, r21
    5d8a:	62 9f       	mul	r22, r18
    5d8c:	f0 01       	movw	r30, r0
    5d8e:	72 9f       	mul	r23, r18
    5d90:	bb 27       	eor	r27, r27
    5d92:	f0 0d       	add	r31, r0
    5d94:	b1 1d       	adc	r27, r1
    5d96:	63 9f       	mul	r22, r19
    5d98:	aa 27       	eor	r26, r26
    5d9a:	f0 0d       	add	r31, r0
    5d9c:	b1 1d       	adc	r27, r1
    5d9e:	aa 1f       	adc	r26, r26
    5da0:	64 9f       	mul	r22, r20
    5da2:	66 27       	eor	r22, r22
    5da4:	b0 0d       	add	r27, r0
    5da6:	a1 1d       	adc	r26, r1
    5da8:	66 1f       	adc	r22, r22
    5daa:	82 9f       	mul	r24, r18
    5dac:	22 27       	eor	r18, r18
    5dae:	b0 0d       	add	r27, r0
    5db0:	a1 1d       	adc	r26, r1
    5db2:	62 1f       	adc	r22, r18
    5db4:	73 9f       	mul	r23, r19
    5db6:	b0 0d       	add	r27, r0
    5db8:	a1 1d       	adc	r26, r1
    5dba:	62 1f       	adc	r22, r18
    5dbc:	83 9f       	mul	r24, r19
    5dbe:	a0 0d       	add	r26, r0
    5dc0:	61 1d       	adc	r22, r1
    5dc2:	22 1f       	adc	r18, r18
    5dc4:	74 9f       	mul	r23, r20
    5dc6:	33 27       	eor	r19, r19
    5dc8:	a0 0d       	add	r26, r0
    5dca:	61 1d       	adc	r22, r1
    5dcc:	23 1f       	adc	r18, r19
    5dce:	84 9f       	mul	r24, r20
    5dd0:	60 0d       	add	r22, r0
    5dd2:	21 1d       	adc	r18, r1
    5dd4:	82 2f       	mov	r24, r18
    5dd6:	76 2f       	mov	r23, r22
    5dd8:	6a 2f       	mov	r22, r26
    5dda:	11 24       	eor	r1, r1
    5ddc:	9f 57       	subi	r25, 0x7F	; 127
    5dde:	50 40       	sbci	r21, 0x00	; 0
    5de0:	8a f0       	brmi	.+34     	; 0x5e04 <__mulsf3_pse+0x84>
    5de2:	e1 f0       	breq	.+56     	; 0x5e1c <__mulsf3_pse+0x9c>
    5de4:	88 23       	and	r24, r24
    5de6:	4a f0       	brmi	.+18     	; 0x5dfa <__mulsf3_pse+0x7a>
    5de8:	ee 0f       	add	r30, r30
    5dea:	ff 1f       	adc	r31, r31
    5dec:	bb 1f       	adc	r27, r27
    5dee:	66 1f       	adc	r22, r22
    5df0:	77 1f       	adc	r23, r23
    5df2:	88 1f       	adc	r24, r24
    5df4:	91 50       	subi	r25, 0x01	; 1
    5df6:	50 40       	sbci	r21, 0x00	; 0
    5df8:	a9 f7       	brne	.-22     	; 0x5de4 <__mulsf3_pse+0x64>
    5dfa:	9e 3f       	cpi	r25, 0xFE	; 254
    5dfc:	51 05       	cpc	r21, r1
    5dfe:	70 f0       	brcs	.+28     	; 0x5e1c <__mulsf3_pse+0x9c>
    5e00:	60 cf       	rjmp	.-320    	; 0x5cc2 <__fp_inf>
    5e02:	aa cf       	rjmp	.-172    	; 0x5d58 <__fp_szero>
    5e04:	5f 3f       	cpi	r21, 0xFF	; 255
    5e06:	ec f3       	brlt	.-6      	; 0x5e02 <__mulsf3_pse+0x82>
    5e08:	98 3e       	cpi	r25, 0xE8	; 232
    5e0a:	dc f3       	brlt	.-10     	; 0x5e02 <__mulsf3_pse+0x82>
    5e0c:	86 95       	lsr	r24
    5e0e:	77 95       	ror	r23
    5e10:	67 95       	ror	r22
    5e12:	b7 95       	ror	r27
    5e14:	f7 95       	ror	r31
    5e16:	e7 95       	ror	r30
    5e18:	9f 5f       	subi	r25, 0xFF	; 255
    5e1a:	c1 f7       	brne	.-16     	; 0x5e0c <__mulsf3_pse+0x8c>
    5e1c:	fe 2b       	or	r31, r30
    5e1e:	88 0f       	add	r24, r24
    5e20:	91 1d       	adc	r25, r1
    5e22:	96 95       	lsr	r25
    5e24:	87 95       	ror	r24
    5e26:	97 f9       	bld	r25, 7
    5e28:	08 95       	ret

00005e2a <__divmodhi4>:
    5e2a:	97 fb       	bst	r25, 7
    5e2c:	07 2e       	mov	r0, r23
    5e2e:	16 f4       	brtc	.+4      	; 0x5e34 <__divmodhi4+0xa>
    5e30:	00 94       	com	r0
    5e32:	06 d0       	rcall	.+12     	; 0x5e40 <__divmodhi4_neg1>
    5e34:	77 fd       	sbrc	r23, 7
    5e36:	08 d0       	rcall	.+16     	; 0x5e48 <__divmodhi4_neg2>
    5e38:	35 d0       	rcall	.+106    	; 0x5ea4 <__udivmodhi4>
    5e3a:	07 fc       	sbrc	r0, 7
    5e3c:	05 d0       	rcall	.+10     	; 0x5e48 <__divmodhi4_neg2>
    5e3e:	3e f4       	brtc	.+14     	; 0x5e4e <__divmodhi4_exit>

00005e40 <__divmodhi4_neg1>:
    5e40:	90 95       	com	r25
    5e42:	81 95       	neg	r24
    5e44:	9f 4f       	sbci	r25, 0xFF	; 255
    5e46:	08 95       	ret

00005e48 <__divmodhi4_neg2>:
    5e48:	70 95       	com	r23
    5e4a:	61 95       	neg	r22
    5e4c:	7f 4f       	sbci	r23, 0xFF	; 255

00005e4e <__divmodhi4_exit>:
    5e4e:	08 95       	ret

00005e50 <__udivmodsi4>:
    5e50:	a1 e2       	ldi	r26, 0x21	; 33
    5e52:	1a 2e       	mov	r1, r26
    5e54:	aa 1b       	sub	r26, r26
    5e56:	bb 1b       	sub	r27, r27
    5e58:	fd 01       	movw	r30, r26
    5e5a:	0d c0       	rjmp	.+26     	; 0x5e76 <__udivmodsi4_ep>

00005e5c <__udivmodsi4_loop>:
    5e5c:	aa 1f       	adc	r26, r26
    5e5e:	bb 1f       	adc	r27, r27
    5e60:	ee 1f       	adc	r30, r30
    5e62:	ff 1f       	adc	r31, r31
    5e64:	a2 17       	cp	r26, r18
    5e66:	b3 07       	cpc	r27, r19
    5e68:	e4 07       	cpc	r30, r20
    5e6a:	f5 07       	cpc	r31, r21
    5e6c:	20 f0       	brcs	.+8      	; 0x5e76 <__udivmodsi4_ep>
    5e6e:	a2 1b       	sub	r26, r18
    5e70:	b3 0b       	sbc	r27, r19
    5e72:	e4 0b       	sbc	r30, r20
    5e74:	f5 0b       	sbc	r31, r21

00005e76 <__udivmodsi4_ep>:
    5e76:	66 1f       	adc	r22, r22
    5e78:	77 1f       	adc	r23, r23
    5e7a:	88 1f       	adc	r24, r24
    5e7c:	99 1f       	adc	r25, r25
    5e7e:	1a 94       	dec	r1
    5e80:	69 f7       	brne	.-38     	; 0x5e5c <__udivmodsi4_loop>
    5e82:	60 95       	com	r22
    5e84:	70 95       	com	r23
    5e86:	80 95       	com	r24
    5e88:	90 95       	com	r25
    5e8a:	9b 01       	movw	r18, r22
    5e8c:	ac 01       	movw	r20, r24
    5e8e:	bd 01       	movw	r22, r26
    5e90:	cf 01       	movw	r24, r30
    5e92:	08 95       	ret

00005e94 <__tablejump2__>:
    5e94:	ee 0f       	add	r30, r30
    5e96:	ff 1f       	adc	r31, r31
    5e98:	88 1f       	adc	r24, r24
    5e9a:	8b bf       	out	0x3b, r24	; 59
    5e9c:	07 90       	elpm	r0, Z+
    5e9e:	f6 91       	elpm	r31, Z
    5ea0:	e0 2d       	mov	r30, r0
    5ea2:	19 94       	eijmp

00005ea4 <__udivmodhi4>:
    5ea4:	aa 1b       	sub	r26, r26
    5ea6:	bb 1b       	sub	r27, r27
    5ea8:	51 e1       	ldi	r21, 0x11	; 17
    5eaa:	07 c0       	rjmp	.+14     	; 0x5eba <__udivmodhi4_ep>

00005eac <__udivmodhi4_loop>:
    5eac:	aa 1f       	adc	r26, r26
    5eae:	bb 1f       	adc	r27, r27
    5eb0:	a6 17       	cp	r26, r22
    5eb2:	b7 07       	cpc	r27, r23
    5eb4:	10 f0       	brcs	.+4      	; 0x5eba <__udivmodhi4_ep>
    5eb6:	a6 1b       	sub	r26, r22
    5eb8:	b7 0b       	sbc	r27, r23

00005eba <__udivmodhi4_ep>:
    5eba:	88 1f       	adc	r24, r24
    5ebc:	99 1f       	adc	r25, r25
    5ebe:	5a 95       	dec	r21
    5ec0:	a9 f7       	brne	.-22     	; 0x5eac <__udivmodhi4_loop>
    5ec2:	80 95       	com	r24
    5ec4:	90 95       	com	r25
    5ec6:	bc 01       	movw	r22, r24
    5ec8:	cd 01       	movw	r24, r26
    5eca:	08 95       	ret

00005ecc <calloc>:
    5ecc:	0f 93       	push	r16
    5ece:	1f 93       	push	r17
    5ed0:	cf 93       	push	r28
    5ed2:	df 93       	push	r29
    5ed4:	86 9f       	mul	r24, r22
    5ed6:	80 01       	movw	r16, r0
    5ed8:	87 9f       	mul	r24, r23
    5eda:	10 0d       	add	r17, r0
    5edc:	96 9f       	mul	r25, r22
    5ede:	10 0d       	add	r17, r0
    5ee0:	11 24       	eor	r1, r1
    5ee2:	c8 01       	movw	r24, r16
    5ee4:	0d d0       	rcall	.+26     	; 0x5f00 <malloc>
    5ee6:	ec 01       	movw	r28, r24
    5ee8:	00 97       	sbiw	r24, 0x00	; 0
    5eea:	21 f0       	breq	.+8      	; 0x5ef4 <calloc+0x28>
    5eec:	a8 01       	movw	r20, r16
    5eee:	60 e0       	ldi	r22, 0x00	; 0
    5ef0:	70 e0       	ldi	r23, 0x00	; 0
    5ef2:	89 d1       	rcall	.+786    	; 0x6206 <memset>
    5ef4:	ce 01       	movw	r24, r28
    5ef6:	df 91       	pop	r29
    5ef8:	cf 91       	pop	r28
    5efa:	1f 91       	pop	r17
    5efc:	0f 91       	pop	r16
    5efe:	08 95       	ret

00005f00 <malloc>:
    5f00:	0f 93       	push	r16
    5f02:	1f 93       	push	r17
    5f04:	cf 93       	push	r28
    5f06:	df 93       	push	r29
    5f08:	82 30       	cpi	r24, 0x02	; 2
    5f0a:	91 05       	cpc	r25, r1
    5f0c:	10 f4       	brcc	.+4      	; 0x5f12 <malloc+0x12>
    5f0e:	82 e0       	ldi	r24, 0x02	; 2
    5f10:	90 e0       	ldi	r25, 0x00	; 0
    5f12:	e0 91 21 1b 	lds	r30, 0x1B21	; 0x801b21 <__flp>
    5f16:	f0 91 22 1b 	lds	r31, 0x1B22	; 0x801b22 <__flp+0x1>
    5f1a:	20 e0       	ldi	r18, 0x00	; 0
    5f1c:	30 e0       	ldi	r19, 0x00	; 0
    5f1e:	a0 e0       	ldi	r26, 0x00	; 0
    5f20:	b0 e0       	ldi	r27, 0x00	; 0
    5f22:	30 97       	sbiw	r30, 0x00	; 0
    5f24:	19 f1       	breq	.+70     	; 0x5f6c <malloc+0x6c>
    5f26:	40 81       	ld	r20, Z
    5f28:	51 81       	ldd	r21, Z+1	; 0x01
    5f2a:	02 81       	ldd	r16, Z+2	; 0x02
    5f2c:	13 81       	ldd	r17, Z+3	; 0x03
    5f2e:	48 17       	cp	r20, r24
    5f30:	59 07       	cpc	r21, r25
    5f32:	c8 f0       	brcs	.+50     	; 0x5f66 <malloc+0x66>
    5f34:	84 17       	cp	r24, r20
    5f36:	95 07       	cpc	r25, r21
    5f38:	69 f4       	brne	.+26     	; 0x5f54 <malloc+0x54>
    5f3a:	10 97       	sbiw	r26, 0x00	; 0
    5f3c:	31 f0       	breq	.+12     	; 0x5f4a <malloc+0x4a>
    5f3e:	12 96       	adiw	r26, 0x02	; 2
    5f40:	0c 93       	st	X, r16
    5f42:	12 97       	sbiw	r26, 0x02	; 2
    5f44:	13 96       	adiw	r26, 0x03	; 3
    5f46:	1c 93       	st	X, r17
    5f48:	27 c0       	rjmp	.+78     	; 0x5f98 <malloc+0x98>
    5f4a:	00 93 21 1b 	sts	0x1B21, r16	; 0x801b21 <__flp>
    5f4e:	10 93 22 1b 	sts	0x1B22, r17	; 0x801b22 <__flp+0x1>
    5f52:	22 c0       	rjmp	.+68     	; 0x5f98 <malloc+0x98>
    5f54:	21 15       	cp	r18, r1
    5f56:	31 05       	cpc	r19, r1
    5f58:	19 f0       	breq	.+6      	; 0x5f60 <malloc+0x60>
    5f5a:	42 17       	cp	r20, r18
    5f5c:	53 07       	cpc	r21, r19
    5f5e:	18 f4       	brcc	.+6      	; 0x5f66 <malloc+0x66>
    5f60:	9a 01       	movw	r18, r20
    5f62:	bd 01       	movw	r22, r26
    5f64:	ef 01       	movw	r28, r30
    5f66:	df 01       	movw	r26, r30
    5f68:	f8 01       	movw	r30, r16
    5f6a:	db cf       	rjmp	.-74     	; 0x5f22 <malloc+0x22>
    5f6c:	21 15       	cp	r18, r1
    5f6e:	31 05       	cpc	r19, r1
    5f70:	f9 f0       	breq	.+62     	; 0x5fb0 <malloc+0xb0>
    5f72:	28 1b       	sub	r18, r24
    5f74:	39 0b       	sbc	r19, r25
    5f76:	24 30       	cpi	r18, 0x04	; 4
    5f78:	31 05       	cpc	r19, r1
    5f7a:	80 f4       	brcc	.+32     	; 0x5f9c <malloc+0x9c>
    5f7c:	8a 81       	ldd	r24, Y+2	; 0x02
    5f7e:	9b 81       	ldd	r25, Y+3	; 0x03
    5f80:	61 15       	cp	r22, r1
    5f82:	71 05       	cpc	r23, r1
    5f84:	21 f0       	breq	.+8      	; 0x5f8e <malloc+0x8e>
    5f86:	fb 01       	movw	r30, r22
    5f88:	93 83       	std	Z+3, r25	; 0x03
    5f8a:	82 83       	std	Z+2, r24	; 0x02
    5f8c:	04 c0       	rjmp	.+8      	; 0x5f96 <malloc+0x96>
    5f8e:	90 93 22 1b 	sts	0x1B22, r25	; 0x801b22 <__flp+0x1>
    5f92:	80 93 21 1b 	sts	0x1B21, r24	; 0x801b21 <__flp>
    5f96:	fe 01       	movw	r30, r28
    5f98:	32 96       	adiw	r30, 0x02	; 2
    5f9a:	44 c0       	rjmp	.+136    	; 0x6024 <malloc+0x124>
    5f9c:	fe 01       	movw	r30, r28
    5f9e:	e2 0f       	add	r30, r18
    5fa0:	f3 1f       	adc	r31, r19
    5fa2:	81 93       	st	Z+, r24
    5fa4:	91 93       	st	Z+, r25
    5fa6:	22 50       	subi	r18, 0x02	; 2
    5fa8:	31 09       	sbc	r19, r1
    5faa:	39 83       	std	Y+1, r19	; 0x01
    5fac:	28 83       	st	Y, r18
    5fae:	3a c0       	rjmp	.+116    	; 0x6024 <malloc+0x124>
    5fb0:	20 91 1f 1b 	lds	r18, 0x1B1F	; 0x801b1f <__brkval>
    5fb4:	30 91 20 1b 	lds	r19, 0x1B20	; 0x801b20 <__brkval+0x1>
    5fb8:	23 2b       	or	r18, r19
    5fba:	41 f4       	brne	.+16     	; 0x5fcc <malloc+0xcc>
    5fbc:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    5fc0:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    5fc4:	30 93 20 1b 	sts	0x1B20, r19	; 0x801b20 <__brkval+0x1>
    5fc8:	20 93 1f 1b 	sts	0x1B1F, r18	; 0x801b1f <__brkval>
    5fcc:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    5fd0:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    5fd4:	21 15       	cp	r18, r1
    5fd6:	31 05       	cpc	r19, r1
    5fd8:	41 f4       	brne	.+16     	; 0x5fea <malloc+0xea>
    5fda:	2d b7       	in	r18, 0x3d	; 61
    5fdc:	3e b7       	in	r19, 0x3e	; 62
    5fde:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    5fe2:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    5fe6:	24 1b       	sub	r18, r20
    5fe8:	35 0b       	sbc	r19, r21
    5fea:	e0 91 1f 1b 	lds	r30, 0x1B1F	; 0x801b1f <__brkval>
    5fee:	f0 91 20 1b 	lds	r31, 0x1B20	; 0x801b20 <__brkval+0x1>
    5ff2:	e2 17       	cp	r30, r18
    5ff4:	f3 07       	cpc	r31, r19
    5ff6:	a0 f4       	brcc	.+40     	; 0x6020 <malloc+0x120>
    5ff8:	2e 1b       	sub	r18, r30
    5ffa:	3f 0b       	sbc	r19, r31
    5ffc:	28 17       	cp	r18, r24
    5ffe:	39 07       	cpc	r19, r25
    6000:	78 f0       	brcs	.+30     	; 0x6020 <malloc+0x120>
    6002:	ac 01       	movw	r20, r24
    6004:	4e 5f       	subi	r20, 0xFE	; 254
    6006:	5f 4f       	sbci	r21, 0xFF	; 255
    6008:	24 17       	cp	r18, r20
    600a:	35 07       	cpc	r19, r21
    600c:	48 f0       	brcs	.+18     	; 0x6020 <malloc+0x120>
    600e:	4e 0f       	add	r20, r30
    6010:	5f 1f       	adc	r21, r31
    6012:	50 93 20 1b 	sts	0x1B20, r21	; 0x801b20 <__brkval+0x1>
    6016:	40 93 1f 1b 	sts	0x1B1F, r20	; 0x801b1f <__brkval>
    601a:	81 93       	st	Z+, r24
    601c:	91 93       	st	Z+, r25
    601e:	02 c0       	rjmp	.+4      	; 0x6024 <malloc+0x124>
    6020:	e0 e0       	ldi	r30, 0x00	; 0
    6022:	f0 e0       	ldi	r31, 0x00	; 0
    6024:	cf 01       	movw	r24, r30
    6026:	df 91       	pop	r29
    6028:	cf 91       	pop	r28
    602a:	1f 91       	pop	r17
    602c:	0f 91       	pop	r16
    602e:	08 95       	ret

00006030 <free>:
    6030:	cf 93       	push	r28
    6032:	df 93       	push	r29
    6034:	00 97       	sbiw	r24, 0x00	; 0
    6036:	09 f4       	brne	.+2      	; 0x603a <free+0xa>
    6038:	81 c0       	rjmp	.+258    	; 0x613c <free+0x10c>
    603a:	fc 01       	movw	r30, r24
    603c:	32 97       	sbiw	r30, 0x02	; 2
    603e:	13 82       	std	Z+3, r1	; 0x03
    6040:	12 82       	std	Z+2, r1	; 0x02
    6042:	a0 91 21 1b 	lds	r26, 0x1B21	; 0x801b21 <__flp>
    6046:	b0 91 22 1b 	lds	r27, 0x1B22	; 0x801b22 <__flp+0x1>
    604a:	10 97       	sbiw	r26, 0x00	; 0
    604c:	81 f4       	brne	.+32     	; 0x606e <free+0x3e>
    604e:	20 81       	ld	r18, Z
    6050:	31 81       	ldd	r19, Z+1	; 0x01
    6052:	82 0f       	add	r24, r18
    6054:	93 1f       	adc	r25, r19
    6056:	20 91 1f 1b 	lds	r18, 0x1B1F	; 0x801b1f <__brkval>
    605a:	30 91 20 1b 	lds	r19, 0x1B20	; 0x801b20 <__brkval+0x1>
    605e:	28 17       	cp	r18, r24
    6060:	39 07       	cpc	r19, r25
    6062:	51 f5       	brne	.+84     	; 0x60b8 <free+0x88>
    6064:	f0 93 20 1b 	sts	0x1B20, r31	; 0x801b20 <__brkval+0x1>
    6068:	e0 93 1f 1b 	sts	0x1B1F, r30	; 0x801b1f <__brkval>
    606c:	67 c0       	rjmp	.+206    	; 0x613c <free+0x10c>
    606e:	ed 01       	movw	r28, r26
    6070:	20 e0       	ldi	r18, 0x00	; 0
    6072:	30 e0       	ldi	r19, 0x00	; 0
    6074:	ce 17       	cp	r28, r30
    6076:	df 07       	cpc	r29, r31
    6078:	40 f4       	brcc	.+16     	; 0x608a <free+0x5a>
    607a:	4a 81       	ldd	r20, Y+2	; 0x02
    607c:	5b 81       	ldd	r21, Y+3	; 0x03
    607e:	9e 01       	movw	r18, r28
    6080:	41 15       	cp	r20, r1
    6082:	51 05       	cpc	r21, r1
    6084:	f1 f0       	breq	.+60     	; 0x60c2 <free+0x92>
    6086:	ea 01       	movw	r28, r20
    6088:	f5 cf       	rjmp	.-22     	; 0x6074 <free+0x44>
    608a:	d3 83       	std	Z+3, r29	; 0x03
    608c:	c2 83       	std	Z+2, r28	; 0x02
    608e:	40 81       	ld	r20, Z
    6090:	51 81       	ldd	r21, Z+1	; 0x01
    6092:	84 0f       	add	r24, r20
    6094:	95 1f       	adc	r25, r21
    6096:	c8 17       	cp	r28, r24
    6098:	d9 07       	cpc	r29, r25
    609a:	59 f4       	brne	.+22     	; 0x60b2 <free+0x82>
    609c:	88 81       	ld	r24, Y
    609e:	99 81       	ldd	r25, Y+1	; 0x01
    60a0:	84 0f       	add	r24, r20
    60a2:	95 1f       	adc	r25, r21
    60a4:	02 96       	adiw	r24, 0x02	; 2
    60a6:	91 83       	std	Z+1, r25	; 0x01
    60a8:	80 83       	st	Z, r24
    60aa:	8a 81       	ldd	r24, Y+2	; 0x02
    60ac:	9b 81       	ldd	r25, Y+3	; 0x03
    60ae:	93 83       	std	Z+3, r25	; 0x03
    60b0:	82 83       	std	Z+2, r24	; 0x02
    60b2:	21 15       	cp	r18, r1
    60b4:	31 05       	cpc	r19, r1
    60b6:	29 f4       	brne	.+10     	; 0x60c2 <free+0x92>
    60b8:	f0 93 22 1b 	sts	0x1B22, r31	; 0x801b22 <__flp+0x1>
    60bc:	e0 93 21 1b 	sts	0x1B21, r30	; 0x801b21 <__flp>
    60c0:	3d c0       	rjmp	.+122    	; 0x613c <free+0x10c>
    60c2:	e9 01       	movw	r28, r18
    60c4:	fb 83       	std	Y+3, r31	; 0x03
    60c6:	ea 83       	std	Y+2, r30	; 0x02
    60c8:	49 91       	ld	r20, Y+
    60ca:	59 91       	ld	r21, Y+
    60cc:	c4 0f       	add	r28, r20
    60ce:	d5 1f       	adc	r29, r21
    60d0:	ec 17       	cp	r30, r28
    60d2:	fd 07       	cpc	r31, r29
    60d4:	61 f4       	brne	.+24     	; 0x60ee <free+0xbe>
    60d6:	80 81       	ld	r24, Z
    60d8:	91 81       	ldd	r25, Z+1	; 0x01
    60da:	84 0f       	add	r24, r20
    60dc:	95 1f       	adc	r25, r21
    60de:	02 96       	adiw	r24, 0x02	; 2
    60e0:	e9 01       	movw	r28, r18
    60e2:	99 83       	std	Y+1, r25	; 0x01
    60e4:	88 83       	st	Y, r24
    60e6:	82 81       	ldd	r24, Z+2	; 0x02
    60e8:	93 81       	ldd	r25, Z+3	; 0x03
    60ea:	9b 83       	std	Y+3, r25	; 0x03
    60ec:	8a 83       	std	Y+2, r24	; 0x02
    60ee:	e0 e0       	ldi	r30, 0x00	; 0
    60f0:	f0 e0       	ldi	r31, 0x00	; 0
    60f2:	12 96       	adiw	r26, 0x02	; 2
    60f4:	8d 91       	ld	r24, X+
    60f6:	9c 91       	ld	r25, X
    60f8:	13 97       	sbiw	r26, 0x03	; 3
    60fa:	00 97       	sbiw	r24, 0x00	; 0
    60fc:	19 f0       	breq	.+6      	; 0x6104 <free+0xd4>
    60fe:	fd 01       	movw	r30, r26
    6100:	dc 01       	movw	r26, r24
    6102:	f7 cf       	rjmp	.-18     	; 0x60f2 <free+0xc2>
    6104:	8d 91       	ld	r24, X+
    6106:	9c 91       	ld	r25, X
    6108:	11 97       	sbiw	r26, 0x01	; 1
    610a:	9d 01       	movw	r18, r26
    610c:	2e 5f       	subi	r18, 0xFE	; 254
    610e:	3f 4f       	sbci	r19, 0xFF	; 255
    6110:	82 0f       	add	r24, r18
    6112:	93 1f       	adc	r25, r19
    6114:	20 91 1f 1b 	lds	r18, 0x1B1F	; 0x801b1f <__brkval>
    6118:	30 91 20 1b 	lds	r19, 0x1B20	; 0x801b20 <__brkval+0x1>
    611c:	28 17       	cp	r18, r24
    611e:	39 07       	cpc	r19, r25
    6120:	69 f4       	brne	.+26     	; 0x613c <free+0x10c>
    6122:	30 97       	sbiw	r30, 0x00	; 0
    6124:	29 f4       	brne	.+10     	; 0x6130 <free+0x100>
    6126:	10 92 22 1b 	sts	0x1B22, r1	; 0x801b22 <__flp+0x1>
    612a:	10 92 21 1b 	sts	0x1B21, r1	; 0x801b21 <__flp>
    612e:	02 c0       	rjmp	.+4      	; 0x6134 <free+0x104>
    6130:	13 82       	std	Z+3, r1	; 0x03
    6132:	12 82       	std	Z+2, r1	; 0x02
    6134:	b0 93 20 1b 	sts	0x1B20, r27	; 0x801b20 <__brkval+0x1>
    6138:	a0 93 1f 1b 	sts	0x1B1F, r26	; 0x801b1f <__brkval>
    613c:	df 91       	pop	r29
    613e:	cf 91       	pop	r28
    6140:	08 95       	ret

00006142 <do_rand>:
    6142:	8f 92       	push	r8
    6144:	9f 92       	push	r9
    6146:	af 92       	push	r10
    6148:	bf 92       	push	r11
    614a:	cf 92       	push	r12
    614c:	df 92       	push	r13
    614e:	ef 92       	push	r14
    6150:	ff 92       	push	r15
    6152:	cf 93       	push	r28
    6154:	df 93       	push	r29
    6156:	ec 01       	movw	r28, r24
    6158:	68 81       	ld	r22, Y
    615a:	79 81       	ldd	r23, Y+1	; 0x01
    615c:	8a 81       	ldd	r24, Y+2	; 0x02
    615e:	9b 81       	ldd	r25, Y+3	; 0x03
    6160:	61 15       	cp	r22, r1
    6162:	71 05       	cpc	r23, r1
    6164:	81 05       	cpc	r24, r1
    6166:	91 05       	cpc	r25, r1
    6168:	21 f4       	brne	.+8      	; 0x6172 <do_rand+0x30>
    616a:	64 e2       	ldi	r22, 0x24	; 36
    616c:	79 ed       	ldi	r23, 0xD9	; 217
    616e:	8b e5       	ldi	r24, 0x5B	; 91
    6170:	97 e0       	ldi	r25, 0x07	; 7
    6172:	2d e1       	ldi	r18, 0x1D	; 29
    6174:	33 ef       	ldi	r19, 0xF3	; 243
    6176:	41 e0       	ldi	r20, 0x01	; 1
    6178:	50 e0       	ldi	r21, 0x00	; 0
    617a:	b9 d3       	rcall	.+1906   	; 0x68ee <__divmodsi4>
    617c:	49 01       	movw	r8, r18
    617e:	5a 01       	movw	r10, r20
    6180:	9b 01       	movw	r18, r22
    6182:	ac 01       	movw	r20, r24
    6184:	a7 ea       	ldi	r26, 0xA7	; 167
    6186:	b1 e4       	ldi	r27, 0x41	; 65
    6188:	ce d3       	rcall	.+1948   	; 0x6926 <__muluhisi3>
    618a:	6b 01       	movw	r12, r22
    618c:	7c 01       	movw	r14, r24
    618e:	ac ee       	ldi	r26, 0xEC	; 236
    6190:	b4 ef       	ldi	r27, 0xF4	; 244
    6192:	a5 01       	movw	r20, r10
    6194:	94 01       	movw	r18, r8
    6196:	d3 d3       	rcall	.+1958   	; 0x693e <__mulohisi3>
    6198:	dc 01       	movw	r26, r24
    619a:	cb 01       	movw	r24, r22
    619c:	8c 0d       	add	r24, r12
    619e:	9d 1d       	adc	r25, r13
    61a0:	ae 1d       	adc	r26, r14
    61a2:	bf 1d       	adc	r27, r15
    61a4:	b7 ff       	sbrs	r27, 7
    61a6:	03 c0       	rjmp	.+6      	; 0x61ae <do_rand+0x6c>
    61a8:	01 97       	sbiw	r24, 0x01	; 1
    61aa:	a1 09       	sbc	r26, r1
    61ac:	b0 48       	sbci	r27, 0x80	; 128
    61ae:	88 83       	st	Y, r24
    61b0:	99 83       	std	Y+1, r25	; 0x01
    61b2:	aa 83       	std	Y+2, r26	; 0x02
    61b4:	bb 83       	std	Y+3, r27	; 0x03
    61b6:	9f 77       	andi	r25, 0x7F	; 127
    61b8:	df 91       	pop	r29
    61ba:	cf 91       	pop	r28
    61bc:	ff 90       	pop	r15
    61be:	ef 90       	pop	r14
    61c0:	df 90       	pop	r13
    61c2:	cf 90       	pop	r12
    61c4:	bf 90       	pop	r11
    61c6:	af 90       	pop	r10
    61c8:	9f 90       	pop	r9
    61ca:	8f 90       	pop	r8
    61cc:	08 95       	ret

000061ce <rand_r>:
    61ce:	b9 cf       	rjmp	.-142    	; 0x6142 <do_rand>

000061d0 <rand>:
    61d0:	86 e0       	ldi	r24, 0x06	; 6
    61d2:	92 e0       	ldi	r25, 0x02	; 2
    61d4:	b6 cf       	rjmp	.-148    	; 0x6142 <do_rand>

000061d6 <srand>:
    61d6:	a0 e0       	ldi	r26, 0x00	; 0
    61d8:	b0 e0       	ldi	r27, 0x00	; 0
    61da:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <next>
    61de:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <next+0x1>
    61e2:	a0 93 08 02 	sts	0x0208, r26	; 0x800208 <next+0x2>
    61e6:	b0 93 09 02 	sts	0x0209, r27	; 0x800209 <next+0x3>
    61ea:	08 95       	ret

000061ec <abort>:
    61ec:	81 e0       	ldi	r24, 0x01	; 1
    61ee:	90 e0       	ldi	r25, 0x00	; 0
    61f0:	f8 94       	cli
    61f2:	b8 c3       	rjmp	.+1904   	; 0x6964 <_exit>

000061f4 <memcpy>:
    61f4:	fb 01       	movw	r30, r22
    61f6:	dc 01       	movw	r26, r24
    61f8:	02 c0       	rjmp	.+4      	; 0x61fe <memcpy+0xa>
    61fa:	01 90       	ld	r0, Z+
    61fc:	0d 92       	st	X+, r0
    61fe:	41 50       	subi	r20, 0x01	; 1
    6200:	50 40       	sbci	r21, 0x00	; 0
    6202:	d8 f7       	brcc	.-10     	; 0x61fa <memcpy+0x6>
    6204:	08 95       	ret

00006206 <memset>:
    6206:	dc 01       	movw	r26, r24
    6208:	01 c0       	rjmp	.+2      	; 0x620c <memset+0x6>
    620a:	6d 93       	st	X+, r22
    620c:	41 50       	subi	r20, 0x01	; 1
    620e:	50 40       	sbci	r21, 0x00	; 0
    6210:	e0 f7       	brcc	.-8      	; 0x620a <memset+0x4>
    6212:	08 95       	ret

00006214 <strcasestr>:
    6214:	fb 01       	movw	r30, r22
    6216:	51 91       	ld	r21, Z+
    6218:	55 23       	and	r21, r21
    621a:	b1 f0       	breq	.+44     	; 0x6248 <strcasestr+0x34>
    621c:	bf 01       	movw	r22, r30
    621e:	dc 01       	movw	r26, r24
    6220:	05 2e       	mov	r0, r21
    6222:	4d 91       	ld	r20, X+
    6224:	44 23       	and	r20, r20
    6226:	69 f0       	breq	.+26     	; 0x6242 <strcasestr+0x2e>
    6228:	10 d0       	rcall	.+32     	; 0x624a <strcasestr+0x36>
    622a:	d9 f7       	brne	.-10     	; 0x6222 <strcasestr+0xe>
    622c:	cd 01       	movw	r24, r26
    622e:	01 90       	ld	r0, Z+
    6230:	00 20       	and	r0, r0
    6232:	49 f0       	breq	.+18     	; 0x6246 <strcasestr+0x32>
    6234:	4d 91       	ld	r20, X+
    6236:	41 11       	cpse	r20, r1
    6238:	08 d0       	rcall	.+16     	; 0x624a <strcasestr+0x36>
    623a:	c9 f3       	breq	.-14     	; 0x622e <strcasestr+0x1a>
    623c:	fb 01       	movw	r30, r22
    623e:	41 11       	cpse	r20, r1
    6240:	ee cf       	rjmp	.-36     	; 0x621e <strcasestr+0xa>
    6242:	81 e0       	ldi	r24, 0x01	; 1
    6244:	90 e0       	ldi	r25, 0x00	; 0
    6246:	01 97       	sbiw	r24, 0x01	; 1
    6248:	08 95       	ret
    624a:	40 25       	eor	r20, r0
    624c:	39 f0       	breq	.+14     	; 0x625c <strcasestr+0x48>
    624e:	40 32       	cpi	r20, 0x20	; 32
    6250:	29 f4       	brne	.+10     	; 0x625c <strcasestr+0x48>
    6252:	40 29       	or	r20, r0
    6254:	4b 57       	subi	r20, 0x7B	; 123
    6256:	46 5e       	subi	r20, 0xE6	; 230
    6258:	08 f0       	brcs	.+2      	; 0x625c <strcasestr+0x48>
    625a:	18 94       	sez
    625c:	08 95       	ret

0000625e <strcat>:
    625e:	fb 01       	movw	r30, r22
    6260:	dc 01       	movw	r26, r24
    6262:	0d 90       	ld	r0, X+
    6264:	00 20       	and	r0, r0
    6266:	e9 f7       	brne	.-6      	; 0x6262 <strcat+0x4>
    6268:	11 97       	sbiw	r26, 0x01	; 1
    626a:	01 90       	ld	r0, Z+
    626c:	0d 92       	st	X+, r0
    626e:	00 20       	and	r0, r0
    6270:	e1 f7       	brne	.-8      	; 0x626a <strcat+0xc>
    6272:	08 95       	ret

00006274 <strcpy>:
    6274:	fb 01       	movw	r30, r22
    6276:	dc 01       	movw	r26, r24
    6278:	01 90       	ld	r0, Z+
    627a:	0d 92       	st	X+, r0
    627c:	00 20       	and	r0, r0
    627e:	e1 f7       	brne	.-8      	; 0x6278 <strcpy+0x4>
    6280:	08 95       	ret

00006282 <strncasecmp>:
    6282:	fb 01       	movw	r30, r22
    6284:	dc 01       	movw	r26, r24
    6286:	41 50       	subi	r20, 0x01	; 1
    6288:	50 40       	sbci	r21, 0x00	; 0
    628a:	88 f0       	brcs	.+34     	; 0x62ae <strncasecmp+0x2c>
    628c:	8d 91       	ld	r24, X+
    628e:	81 34       	cpi	r24, 0x41	; 65
    6290:	1c f0       	brlt	.+6      	; 0x6298 <strncasecmp+0x16>
    6292:	8b 35       	cpi	r24, 0x5B	; 91
    6294:	0c f4       	brge	.+2      	; 0x6298 <strncasecmp+0x16>
    6296:	80 5e       	subi	r24, 0xE0	; 224
    6298:	61 91       	ld	r22, Z+
    629a:	61 34       	cpi	r22, 0x41	; 65
    629c:	1c f0       	brlt	.+6      	; 0x62a4 <strncasecmp+0x22>
    629e:	6b 35       	cpi	r22, 0x5B	; 91
    62a0:	0c f4       	brge	.+2      	; 0x62a4 <strncasecmp+0x22>
    62a2:	60 5e       	subi	r22, 0xE0	; 224
    62a4:	86 1b       	sub	r24, r22
    62a6:	61 11       	cpse	r22, r1
    62a8:	71 f3       	breq	.-36     	; 0x6286 <strncasecmp+0x4>
    62aa:	99 0b       	sbc	r25, r25
    62ac:	08 95       	ret
    62ae:	88 1b       	sub	r24, r24
    62b0:	fc cf       	rjmp	.-8      	; 0x62aa <strncasecmp+0x28>

000062b2 <printf>:
    62b2:	cf 93       	push	r28
    62b4:	df 93       	push	r29
    62b6:	cd b7       	in	r28, 0x3d	; 61
    62b8:	de b7       	in	r29, 0x3e	; 62
    62ba:	ae 01       	movw	r20, r28
    62bc:	4a 5f       	subi	r20, 0xFA	; 250
    62be:	5f 4f       	sbci	r21, 0xFF	; 255
    62c0:	fa 01       	movw	r30, r20
    62c2:	61 91       	ld	r22, Z+
    62c4:	71 91       	ld	r23, Z+
    62c6:	af 01       	movw	r20, r30
    62c8:	80 91 25 1b 	lds	r24, 0x1B25	; 0x801b25 <__iob+0x2>
    62cc:	90 91 26 1b 	lds	r25, 0x1B26	; 0x801b26 <__iob+0x3>
    62d0:	61 d0       	rcall	.+194    	; 0x6394 <vfprintf>
    62d2:	df 91       	pop	r29
    62d4:	cf 91       	pop	r28
    62d6:	08 95       	ret

000062d8 <puts>:
    62d8:	0f 93       	push	r16
    62da:	1f 93       	push	r17
    62dc:	cf 93       	push	r28
    62de:	df 93       	push	r29
    62e0:	e0 91 25 1b 	lds	r30, 0x1B25	; 0x801b25 <__iob+0x2>
    62e4:	f0 91 26 1b 	lds	r31, 0x1B26	; 0x801b26 <__iob+0x3>
    62e8:	23 81       	ldd	r18, Z+3	; 0x03
    62ea:	21 ff       	sbrs	r18, 1
    62ec:	1b c0       	rjmp	.+54     	; 0x6324 <puts+0x4c>
    62ee:	8c 01       	movw	r16, r24
    62f0:	d0 e0       	ldi	r29, 0x00	; 0
    62f2:	c0 e0       	ldi	r28, 0x00	; 0
    62f4:	f8 01       	movw	r30, r16
    62f6:	81 91       	ld	r24, Z+
    62f8:	8f 01       	movw	r16, r30
    62fa:	60 91 25 1b 	lds	r22, 0x1B25	; 0x801b25 <__iob+0x2>
    62fe:	70 91 26 1b 	lds	r23, 0x1B26	; 0x801b26 <__iob+0x3>
    6302:	db 01       	movw	r26, r22
    6304:	18 96       	adiw	r26, 0x08	; 8
    6306:	ed 91       	ld	r30, X+
    6308:	fc 91       	ld	r31, X
    630a:	19 97       	sbiw	r26, 0x09	; 9
    630c:	88 23       	and	r24, r24
    630e:	31 f0       	breq	.+12     	; 0x631c <puts+0x44>
    6310:	19 95       	eicall
    6312:	89 2b       	or	r24, r25
    6314:	79 f3       	breq	.-34     	; 0x62f4 <puts+0x1c>
    6316:	df ef       	ldi	r29, 0xFF	; 255
    6318:	cf ef       	ldi	r28, 0xFF	; 255
    631a:	ec cf       	rjmp	.-40     	; 0x62f4 <puts+0x1c>
    631c:	8a e0       	ldi	r24, 0x0A	; 10
    631e:	19 95       	eicall
    6320:	89 2b       	or	r24, r25
    6322:	19 f0       	breq	.+6      	; 0x632a <puts+0x52>
    6324:	8f ef       	ldi	r24, 0xFF	; 255
    6326:	9f ef       	ldi	r25, 0xFF	; 255
    6328:	02 c0       	rjmp	.+4      	; 0x632e <puts+0x56>
    632a:	8d 2f       	mov	r24, r29
    632c:	9c 2f       	mov	r25, r28
    632e:	df 91       	pop	r29
    6330:	cf 91       	pop	r28
    6332:	1f 91       	pop	r17
    6334:	0f 91       	pop	r16
    6336:	08 95       	ret

00006338 <sprintf>:
    6338:	0f 93       	push	r16
    633a:	1f 93       	push	r17
    633c:	cf 93       	push	r28
    633e:	df 93       	push	r29
    6340:	cd b7       	in	r28, 0x3d	; 61
    6342:	de b7       	in	r29, 0x3e	; 62
    6344:	2e 97       	sbiw	r28, 0x0e	; 14
    6346:	0f b6       	in	r0, 0x3f	; 63
    6348:	f8 94       	cli
    634a:	de bf       	out	0x3e, r29	; 62
    634c:	0f be       	out	0x3f, r0	; 63
    634e:	cd bf       	out	0x3d, r28	; 61
    6350:	0e 89       	ldd	r16, Y+22	; 0x16
    6352:	1f 89       	ldd	r17, Y+23	; 0x17
    6354:	86 e0       	ldi	r24, 0x06	; 6
    6356:	8c 83       	std	Y+4, r24	; 0x04
    6358:	1a 83       	std	Y+2, r17	; 0x02
    635a:	09 83       	std	Y+1, r16	; 0x01
    635c:	8f ef       	ldi	r24, 0xFF	; 255
    635e:	9f e7       	ldi	r25, 0x7F	; 127
    6360:	9e 83       	std	Y+6, r25	; 0x06
    6362:	8d 83       	std	Y+5, r24	; 0x05
    6364:	ae 01       	movw	r20, r28
    6366:	46 5e       	subi	r20, 0xE6	; 230
    6368:	5f 4f       	sbci	r21, 0xFF	; 255
    636a:	68 8d       	ldd	r22, Y+24	; 0x18
    636c:	79 8d       	ldd	r23, Y+25	; 0x19
    636e:	ce 01       	movw	r24, r28
    6370:	01 96       	adiw	r24, 0x01	; 1
    6372:	10 d0       	rcall	.+32     	; 0x6394 <vfprintf>
    6374:	ef 81       	ldd	r30, Y+7	; 0x07
    6376:	f8 85       	ldd	r31, Y+8	; 0x08
    6378:	e0 0f       	add	r30, r16
    637a:	f1 1f       	adc	r31, r17
    637c:	10 82       	st	Z, r1
    637e:	2e 96       	adiw	r28, 0x0e	; 14
    6380:	0f b6       	in	r0, 0x3f	; 63
    6382:	f8 94       	cli
    6384:	de bf       	out	0x3e, r29	; 62
    6386:	0f be       	out	0x3f, r0	; 63
    6388:	cd bf       	out	0x3d, r28	; 61
    638a:	df 91       	pop	r29
    638c:	cf 91       	pop	r28
    638e:	1f 91       	pop	r17
    6390:	0f 91       	pop	r16
    6392:	08 95       	ret

00006394 <vfprintf>:
    6394:	2f 92       	push	r2
    6396:	3f 92       	push	r3
    6398:	4f 92       	push	r4
    639a:	5f 92       	push	r5
    639c:	6f 92       	push	r6
    639e:	7f 92       	push	r7
    63a0:	8f 92       	push	r8
    63a2:	9f 92       	push	r9
    63a4:	af 92       	push	r10
    63a6:	bf 92       	push	r11
    63a8:	cf 92       	push	r12
    63aa:	df 92       	push	r13
    63ac:	ef 92       	push	r14
    63ae:	ff 92       	push	r15
    63b0:	0f 93       	push	r16
    63b2:	1f 93       	push	r17
    63b4:	cf 93       	push	r28
    63b6:	df 93       	push	r29
    63b8:	cd b7       	in	r28, 0x3d	; 61
    63ba:	de b7       	in	r29, 0x3e	; 62
    63bc:	2b 97       	sbiw	r28, 0x0b	; 11
    63be:	0f b6       	in	r0, 0x3f	; 63
    63c0:	f8 94       	cli
    63c2:	de bf       	out	0x3e, r29	; 62
    63c4:	0f be       	out	0x3f, r0	; 63
    63c6:	cd bf       	out	0x3d, r28	; 61
    63c8:	6c 01       	movw	r12, r24
    63ca:	7b 01       	movw	r14, r22
    63cc:	8a 01       	movw	r16, r20
    63ce:	fc 01       	movw	r30, r24
    63d0:	17 82       	std	Z+7, r1	; 0x07
    63d2:	16 82       	std	Z+6, r1	; 0x06
    63d4:	83 81       	ldd	r24, Z+3	; 0x03
    63d6:	81 ff       	sbrs	r24, 1
    63d8:	bf c1       	rjmp	.+894    	; 0x6758 <vfprintf+0x3c4>
    63da:	ce 01       	movw	r24, r28
    63dc:	01 96       	adiw	r24, 0x01	; 1
    63de:	3c 01       	movw	r6, r24
    63e0:	f6 01       	movw	r30, r12
    63e2:	93 81       	ldd	r25, Z+3	; 0x03
    63e4:	f7 01       	movw	r30, r14
    63e6:	93 fd       	sbrc	r25, 3
    63e8:	85 91       	lpm	r24, Z+
    63ea:	93 ff       	sbrs	r25, 3
    63ec:	81 91       	ld	r24, Z+
    63ee:	7f 01       	movw	r14, r30
    63f0:	88 23       	and	r24, r24
    63f2:	09 f4       	brne	.+2      	; 0x63f6 <vfprintf+0x62>
    63f4:	ad c1       	rjmp	.+858    	; 0x6750 <vfprintf+0x3bc>
    63f6:	85 32       	cpi	r24, 0x25	; 37
    63f8:	39 f4       	brne	.+14     	; 0x6408 <vfprintf+0x74>
    63fa:	93 fd       	sbrc	r25, 3
    63fc:	85 91       	lpm	r24, Z+
    63fe:	93 ff       	sbrs	r25, 3
    6400:	81 91       	ld	r24, Z+
    6402:	7f 01       	movw	r14, r30
    6404:	85 32       	cpi	r24, 0x25	; 37
    6406:	21 f4       	brne	.+8      	; 0x6410 <vfprintf+0x7c>
    6408:	b6 01       	movw	r22, r12
    640a:	90 e0       	ldi	r25, 0x00	; 0
    640c:	d6 d1       	rcall	.+940    	; 0x67ba <fputc>
    640e:	e8 cf       	rjmp	.-48     	; 0x63e0 <vfprintf+0x4c>
    6410:	91 2c       	mov	r9, r1
    6412:	21 2c       	mov	r2, r1
    6414:	31 2c       	mov	r3, r1
    6416:	ff e1       	ldi	r31, 0x1F	; 31
    6418:	f3 15       	cp	r31, r3
    641a:	d8 f0       	brcs	.+54     	; 0x6452 <vfprintf+0xbe>
    641c:	8b 32       	cpi	r24, 0x2B	; 43
    641e:	79 f0       	breq	.+30     	; 0x643e <vfprintf+0xaa>
    6420:	38 f4       	brcc	.+14     	; 0x6430 <vfprintf+0x9c>
    6422:	80 32       	cpi	r24, 0x20	; 32
    6424:	79 f0       	breq	.+30     	; 0x6444 <vfprintf+0xb0>
    6426:	83 32       	cpi	r24, 0x23	; 35
    6428:	a1 f4       	brne	.+40     	; 0x6452 <vfprintf+0xbe>
    642a:	23 2d       	mov	r18, r3
    642c:	20 61       	ori	r18, 0x10	; 16
    642e:	1d c0       	rjmp	.+58     	; 0x646a <vfprintf+0xd6>
    6430:	8d 32       	cpi	r24, 0x2D	; 45
    6432:	61 f0       	breq	.+24     	; 0x644c <vfprintf+0xb8>
    6434:	80 33       	cpi	r24, 0x30	; 48
    6436:	69 f4       	brne	.+26     	; 0x6452 <vfprintf+0xbe>
    6438:	23 2d       	mov	r18, r3
    643a:	21 60       	ori	r18, 0x01	; 1
    643c:	16 c0       	rjmp	.+44     	; 0x646a <vfprintf+0xd6>
    643e:	83 2d       	mov	r24, r3
    6440:	82 60       	ori	r24, 0x02	; 2
    6442:	38 2e       	mov	r3, r24
    6444:	e3 2d       	mov	r30, r3
    6446:	e4 60       	ori	r30, 0x04	; 4
    6448:	3e 2e       	mov	r3, r30
    644a:	2a c0       	rjmp	.+84     	; 0x64a0 <vfprintf+0x10c>
    644c:	f3 2d       	mov	r31, r3
    644e:	f8 60       	ori	r31, 0x08	; 8
    6450:	1d c0       	rjmp	.+58     	; 0x648c <vfprintf+0xf8>
    6452:	37 fc       	sbrc	r3, 7
    6454:	2d c0       	rjmp	.+90     	; 0x64b0 <vfprintf+0x11c>
    6456:	20 ed       	ldi	r18, 0xD0	; 208
    6458:	28 0f       	add	r18, r24
    645a:	2a 30       	cpi	r18, 0x0A	; 10
    645c:	40 f0       	brcs	.+16     	; 0x646e <vfprintf+0xda>
    645e:	8e 32       	cpi	r24, 0x2E	; 46
    6460:	b9 f4       	brne	.+46     	; 0x6490 <vfprintf+0xfc>
    6462:	36 fc       	sbrc	r3, 6
    6464:	75 c1       	rjmp	.+746    	; 0x6750 <vfprintf+0x3bc>
    6466:	23 2d       	mov	r18, r3
    6468:	20 64       	ori	r18, 0x40	; 64
    646a:	32 2e       	mov	r3, r18
    646c:	19 c0       	rjmp	.+50     	; 0x64a0 <vfprintf+0x10c>
    646e:	36 fe       	sbrs	r3, 6
    6470:	06 c0       	rjmp	.+12     	; 0x647e <vfprintf+0xea>
    6472:	8a e0       	ldi	r24, 0x0A	; 10
    6474:	98 9e       	mul	r9, r24
    6476:	20 0d       	add	r18, r0
    6478:	11 24       	eor	r1, r1
    647a:	92 2e       	mov	r9, r18
    647c:	11 c0       	rjmp	.+34     	; 0x64a0 <vfprintf+0x10c>
    647e:	ea e0       	ldi	r30, 0x0A	; 10
    6480:	2e 9e       	mul	r2, r30
    6482:	20 0d       	add	r18, r0
    6484:	11 24       	eor	r1, r1
    6486:	22 2e       	mov	r2, r18
    6488:	f3 2d       	mov	r31, r3
    648a:	f0 62       	ori	r31, 0x20	; 32
    648c:	3f 2e       	mov	r3, r31
    648e:	08 c0       	rjmp	.+16     	; 0x64a0 <vfprintf+0x10c>
    6490:	8c 36       	cpi	r24, 0x6C	; 108
    6492:	21 f4       	brne	.+8      	; 0x649c <vfprintf+0x108>
    6494:	83 2d       	mov	r24, r3
    6496:	80 68       	ori	r24, 0x80	; 128
    6498:	38 2e       	mov	r3, r24
    649a:	02 c0       	rjmp	.+4      	; 0x64a0 <vfprintf+0x10c>
    649c:	88 36       	cpi	r24, 0x68	; 104
    649e:	41 f4       	brne	.+16     	; 0x64b0 <vfprintf+0x11c>
    64a0:	f7 01       	movw	r30, r14
    64a2:	93 fd       	sbrc	r25, 3
    64a4:	85 91       	lpm	r24, Z+
    64a6:	93 ff       	sbrs	r25, 3
    64a8:	81 91       	ld	r24, Z+
    64aa:	7f 01       	movw	r14, r30
    64ac:	81 11       	cpse	r24, r1
    64ae:	b3 cf       	rjmp	.-154    	; 0x6416 <vfprintf+0x82>
    64b0:	98 2f       	mov	r25, r24
    64b2:	9f 7d       	andi	r25, 0xDF	; 223
    64b4:	95 54       	subi	r25, 0x45	; 69
    64b6:	93 30       	cpi	r25, 0x03	; 3
    64b8:	28 f4       	brcc	.+10     	; 0x64c4 <vfprintf+0x130>
    64ba:	0c 5f       	subi	r16, 0xFC	; 252
    64bc:	1f 4f       	sbci	r17, 0xFF	; 255
    64be:	9f e3       	ldi	r25, 0x3F	; 63
    64c0:	99 83       	std	Y+1, r25	; 0x01
    64c2:	0d c0       	rjmp	.+26     	; 0x64de <vfprintf+0x14a>
    64c4:	83 36       	cpi	r24, 0x63	; 99
    64c6:	31 f0       	breq	.+12     	; 0x64d4 <vfprintf+0x140>
    64c8:	83 37       	cpi	r24, 0x73	; 115
    64ca:	71 f0       	breq	.+28     	; 0x64e8 <vfprintf+0x154>
    64cc:	83 35       	cpi	r24, 0x53	; 83
    64ce:	09 f0       	breq	.+2      	; 0x64d2 <vfprintf+0x13e>
    64d0:	55 c0       	rjmp	.+170    	; 0x657c <vfprintf+0x1e8>
    64d2:	20 c0       	rjmp	.+64     	; 0x6514 <vfprintf+0x180>
    64d4:	f8 01       	movw	r30, r16
    64d6:	80 81       	ld	r24, Z
    64d8:	89 83       	std	Y+1, r24	; 0x01
    64da:	0e 5f       	subi	r16, 0xFE	; 254
    64dc:	1f 4f       	sbci	r17, 0xFF	; 255
    64de:	88 24       	eor	r8, r8
    64e0:	83 94       	inc	r8
    64e2:	91 2c       	mov	r9, r1
    64e4:	53 01       	movw	r10, r6
    64e6:	12 c0       	rjmp	.+36     	; 0x650c <vfprintf+0x178>
    64e8:	28 01       	movw	r4, r16
    64ea:	f2 e0       	ldi	r31, 0x02	; 2
    64ec:	4f 0e       	add	r4, r31
    64ee:	51 1c       	adc	r5, r1
    64f0:	f8 01       	movw	r30, r16
    64f2:	a0 80       	ld	r10, Z
    64f4:	b1 80       	ldd	r11, Z+1	; 0x01
    64f6:	36 fe       	sbrs	r3, 6
    64f8:	03 c0       	rjmp	.+6      	; 0x6500 <vfprintf+0x16c>
    64fa:	69 2d       	mov	r22, r9
    64fc:	70 e0       	ldi	r23, 0x00	; 0
    64fe:	02 c0       	rjmp	.+4      	; 0x6504 <vfprintf+0x170>
    6500:	6f ef       	ldi	r22, 0xFF	; 255
    6502:	7f ef       	ldi	r23, 0xFF	; 255
    6504:	c5 01       	movw	r24, r10
    6506:	4e d1       	rcall	.+668    	; 0x67a4 <strnlen>
    6508:	4c 01       	movw	r8, r24
    650a:	82 01       	movw	r16, r4
    650c:	f3 2d       	mov	r31, r3
    650e:	ff 77       	andi	r31, 0x7F	; 127
    6510:	3f 2e       	mov	r3, r31
    6512:	15 c0       	rjmp	.+42     	; 0x653e <vfprintf+0x1aa>
    6514:	28 01       	movw	r4, r16
    6516:	22 e0       	ldi	r18, 0x02	; 2
    6518:	42 0e       	add	r4, r18
    651a:	51 1c       	adc	r5, r1
    651c:	f8 01       	movw	r30, r16
    651e:	a0 80       	ld	r10, Z
    6520:	b1 80       	ldd	r11, Z+1	; 0x01
    6522:	36 fe       	sbrs	r3, 6
    6524:	03 c0       	rjmp	.+6      	; 0x652c <vfprintf+0x198>
    6526:	69 2d       	mov	r22, r9
    6528:	70 e0       	ldi	r23, 0x00	; 0
    652a:	02 c0       	rjmp	.+4      	; 0x6530 <vfprintf+0x19c>
    652c:	6f ef       	ldi	r22, 0xFF	; 255
    652e:	7f ef       	ldi	r23, 0xFF	; 255
    6530:	c5 01       	movw	r24, r10
    6532:	2d d1       	rcall	.+602    	; 0x678e <strnlen_P>
    6534:	4c 01       	movw	r8, r24
    6536:	f3 2d       	mov	r31, r3
    6538:	f0 68       	ori	r31, 0x80	; 128
    653a:	3f 2e       	mov	r3, r31
    653c:	82 01       	movw	r16, r4
    653e:	33 fc       	sbrc	r3, 3
    6540:	19 c0       	rjmp	.+50     	; 0x6574 <vfprintf+0x1e0>
    6542:	82 2d       	mov	r24, r2
    6544:	90 e0       	ldi	r25, 0x00	; 0
    6546:	88 16       	cp	r8, r24
    6548:	99 06       	cpc	r9, r25
    654a:	a0 f4       	brcc	.+40     	; 0x6574 <vfprintf+0x1e0>
    654c:	b6 01       	movw	r22, r12
    654e:	80 e2       	ldi	r24, 0x20	; 32
    6550:	90 e0       	ldi	r25, 0x00	; 0
    6552:	33 d1       	rcall	.+614    	; 0x67ba <fputc>
    6554:	2a 94       	dec	r2
    6556:	f5 cf       	rjmp	.-22     	; 0x6542 <vfprintf+0x1ae>
    6558:	f5 01       	movw	r30, r10
    655a:	37 fc       	sbrc	r3, 7
    655c:	85 91       	lpm	r24, Z+
    655e:	37 fe       	sbrs	r3, 7
    6560:	81 91       	ld	r24, Z+
    6562:	5f 01       	movw	r10, r30
    6564:	b6 01       	movw	r22, r12
    6566:	90 e0       	ldi	r25, 0x00	; 0
    6568:	28 d1       	rcall	.+592    	; 0x67ba <fputc>
    656a:	21 10       	cpse	r2, r1
    656c:	2a 94       	dec	r2
    656e:	21 e0       	ldi	r18, 0x01	; 1
    6570:	82 1a       	sub	r8, r18
    6572:	91 08       	sbc	r9, r1
    6574:	81 14       	cp	r8, r1
    6576:	91 04       	cpc	r9, r1
    6578:	79 f7       	brne	.-34     	; 0x6558 <vfprintf+0x1c4>
    657a:	e1 c0       	rjmp	.+450    	; 0x673e <vfprintf+0x3aa>
    657c:	84 36       	cpi	r24, 0x64	; 100
    657e:	11 f0       	breq	.+4      	; 0x6584 <vfprintf+0x1f0>
    6580:	89 36       	cpi	r24, 0x69	; 105
    6582:	39 f5       	brne	.+78     	; 0x65d2 <vfprintf+0x23e>
    6584:	f8 01       	movw	r30, r16
    6586:	37 fe       	sbrs	r3, 7
    6588:	07 c0       	rjmp	.+14     	; 0x6598 <vfprintf+0x204>
    658a:	60 81       	ld	r22, Z
    658c:	71 81       	ldd	r23, Z+1	; 0x01
    658e:	82 81       	ldd	r24, Z+2	; 0x02
    6590:	93 81       	ldd	r25, Z+3	; 0x03
    6592:	0c 5f       	subi	r16, 0xFC	; 252
    6594:	1f 4f       	sbci	r17, 0xFF	; 255
    6596:	08 c0       	rjmp	.+16     	; 0x65a8 <vfprintf+0x214>
    6598:	60 81       	ld	r22, Z
    659a:	71 81       	ldd	r23, Z+1	; 0x01
    659c:	07 2e       	mov	r0, r23
    659e:	00 0c       	add	r0, r0
    65a0:	88 0b       	sbc	r24, r24
    65a2:	99 0b       	sbc	r25, r25
    65a4:	0e 5f       	subi	r16, 0xFE	; 254
    65a6:	1f 4f       	sbci	r17, 0xFF	; 255
    65a8:	f3 2d       	mov	r31, r3
    65aa:	ff 76       	andi	r31, 0x6F	; 111
    65ac:	3f 2e       	mov	r3, r31
    65ae:	97 ff       	sbrs	r25, 7
    65b0:	09 c0       	rjmp	.+18     	; 0x65c4 <vfprintf+0x230>
    65b2:	90 95       	com	r25
    65b4:	80 95       	com	r24
    65b6:	70 95       	com	r23
    65b8:	61 95       	neg	r22
    65ba:	7f 4f       	sbci	r23, 0xFF	; 255
    65bc:	8f 4f       	sbci	r24, 0xFF	; 255
    65be:	9f 4f       	sbci	r25, 0xFF	; 255
    65c0:	f0 68       	ori	r31, 0x80	; 128
    65c2:	3f 2e       	mov	r3, r31
    65c4:	2a e0       	ldi	r18, 0x0A	; 10
    65c6:	30 e0       	ldi	r19, 0x00	; 0
    65c8:	a3 01       	movw	r20, r6
    65ca:	33 d1       	rcall	.+614    	; 0x6832 <__ultoa_invert>
    65cc:	88 2e       	mov	r8, r24
    65ce:	86 18       	sub	r8, r6
    65d0:	44 c0       	rjmp	.+136    	; 0x665a <vfprintf+0x2c6>
    65d2:	85 37       	cpi	r24, 0x75	; 117
    65d4:	31 f4       	brne	.+12     	; 0x65e2 <vfprintf+0x24e>
    65d6:	23 2d       	mov	r18, r3
    65d8:	2f 7e       	andi	r18, 0xEF	; 239
    65da:	b2 2e       	mov	r11, r18
    65dc:	2a e0       	ldi	r18, 0x0A	; 10
    65de:	30 e0       	ldi	r19, 0x00	; 0
    65e0:	25 c0       	rjmp	.+74     	; 0x662c <vfprintf+0x298>
    65e2:	93 2d       	mov	r25, r3
    65e4:	99 7f       	andi	r25, 0xF9	; 249
    65e6:	b9 2e       	mov	r11, r25
    65e8:	8f 36       	cpi	r24, 0x6F	; 111
    65ea:	c1 f0       	breq	.+48     	; 0x661c <vfprintf+0x288>
    65ec:	18 f4       	brcc	.+6      	; 0x65f4 <vfprintf+0x260>
    65ee:	88 35       	cpi	r24, 0x58	; 88
    65f0:	79 f0       	breq	.+30     	; 0x6610 <vfprintf+0x27c>
    65f2:	ae c0       	rjmp	.+348    	; 0x6750 <vfprintf+0x3bc>
    65f4:	80 37       	cpi	r24, 0x70	; 112
    65f6:	19 f0       	breq	.+6      	; 0x65fe <vfprintf+0x26a>
    65f8:	88 37       	cpi	r24, 0x78	; 120
    65fa:	21 f0       	breq	.+8      	; 0x6604 <vfprintf+0x270>
    65fc:	a9 c0       	rjmp	.+338    	; 0x6750 <vfprintf+0x3bc>
    65fe:	e9 2f       	mov	r30, r25
    6600:	e0 61       	ori	r30, 0x10	; 16
    6602:	be 2e       	mov	r11, r30
    6604:	b4 fe       	sbrs	r11, 4
    6606:	0d c0       	rjmp	.+26     	; 0x6622 <vfprintf+0x28e>
    6608:	fb 2d       	mov	r31, r11
    660a:	f4 60       	ori	r31, 0x04	; 4
    660c:	bf 2e       	mov	r11, r31
    660e:	09 c0       	rjmp	.+18     	; 0x6622 <vfprintf+0x28e>
    6610:	34 fe       	sbrs	r3, 4
    6612:	0a c0       	rjmp	.+20     	; 0x6628 <vfprintf+0x294>
    6614:	29 2f       	mov	r18, r25
    6616:	26 60       	ori	r18, 0x06	; 6
    6618:	b2 2e       	mov	r11, r18
    661a:	06 c0       	rjmp	.+12     	; 0x6628 <vfprintf+0x294>
    661c:	28 e0       	ldi	r18, 0x08	; 8
    661e:	30 e0       	ldi	r19, 0x00	; 0
    6620:	05 c0       	rjmp	.+10     	; 0x662c <vfprintf+0x298>
    6622:	20 e1       	ldi	r18, 0x10	; 16
    6624:	30 e0       	ldi	r19, 0x00	; 0
    6626:	02 c0       	rjmp	.+4      	; 0x662c <vfprintf+0x298>
    6628:	20 e1       	ldi	r18, 0x10	; 16
    662a:	32 e0       	ldi	r19, 0x02	; 2
    662c:	f8 01       	movw	r30, r16
    662e:	b7 fe       	sbrs	r11, 7
    6630:	07 c0       	rjmp	.+14     	; 0x6640 <vfprintf+0x2ac>
    6632:	60 81       	ld	r22, Z
    6634:	71 81       	ldd	r23, Z+1	; 0x01
    6636:	82 81       	ldd	r24, Z+2	; 0x02
    6638:	93 81       	ldd	r25, Z+3	; 0x03
    663a:	0c 5f       	subi	r16, 0xFC	; 252
    663c:	1f 4f       	sbci	r17, 0xFF	; 255
    663e:	06 c0       	rjmp	.+12     	; 0x664c <vfprintf+0x2b8>
    6640:	60 81       	ld	r22, Z
    6642:	71 81       	ldd	r23, Z+1	; 0x01
    6644:	80 e0       	ldi	r24, 0x00	; 0
    6646:	90 e0       	ldi	r25, 0x00	; 0
    6648:	0e 5f       	subi	r16, 0xFE	; 254
    664a:	1f 4f       	sbci	r17, 0xFF	; 255
    664c:	a3 01       	movw	r20, r6
    664e:	f1 d0       	rcall	.+482    	; 0x6832 <__ultoa_invert>
    6650:	88 2e       	mov	r8, r24
    6652:	86 18       	sub	r8, r6
    6654:	fb 2d       	mov	r31, r11
    6656:	ff 77       	andi	r31, 0x7F	; 127
    6658:	3f 2e       	mov	r3, r31
    665a:	36 fe       	sbrs	r3, 6
    665c:	0d c0       	rjmp	.+26     	; 0x6678 <vfprintf+0x2e4>
    665e:	23 2d       	mov	r18, r3
    6660:	2e 7f       	andi	r18, 0xFE	; 254
    6662:	a2 2e       	mov	r10, r18
    6664:	89 14       	cp	r8, r9
    6666:	58 f4       	brcc	.+22     	; 0x667e <vfprintf+0x2ea>
    6668:	34 fe       	sbrs	r3, 4
    666a:	0b c0       	rjmp	.+22     	; 0x6682 <vfprintf+0x2ee>
    666c:	32 fc       	sbrc	r3, 2
    666e:	09 c0       	rjmp	.+18     	; 0x6682 <vfprintf+0x2ee>
    6670:	83 2d       	mov	r24, r3
    6672:	8e 7e       	andi	r24, 0xEE	; 238
    6674:	a8 2e       	mov	r10, r24
    6676:	05 c0       	rjmp	.+10     	; 0x6682 <vfprintf+0x2ee>
    6678:	b8 2c       	mov	r11, r8
    667a:	a3 2c       	mov	r10, r3
    667c:	03 c0       	rjmp	.+6      	; 0x6684 <vfprintf+0x2f0>
    667e:	b8 2c       	mov	r11, r8
    6680:	01 c0       	rjmp	.+2      	; 0x6684 <vfprintf+0x2f0>
    6682:	b9 2c       	mov	r11, r9
    6684:	a4 fe       	sbrs	r10, 4
    6686:	0f c0       	rjmp	.+30     	; 0x66a6 <vfprintf+0x312>
    6688:	fe 01       	movw	r30, r28
    668a:	e8 0d       	add	r30, r8
    668c:	f1 1d       	adc	r31, r1
    668e:	80 81       	ld	r24, Z
    6690:	80 33       	cpi	r24, 0x30	; 48
    6692:	21 f4       	brne	.+8      	; 0x669c <vfprintf+0x308>
    6694:	9a 2d       	mov	r25, r10
    6696:	99 7e       	andi	r25, 0xE9	; 233
    6698:	a9 2e       	mov	r10, r25
    669a:	09 c0       	rjmp	.+18     	; 0x66ae <vfprintf+0x31a>
    669c:	a2 fe       	sbrs	r10, 2
    669e:	06 c0       	rjmp	.+12     	; 0x66ac <vfprintf+0x318>
    66a0:	b3 94       	inc	r11
    66a2:	b3 94       	inc	r11
    66a4:	04 c0       	rjmp	.+8      	; 0x66ae <vfprintf+0x31a>
    66a6:	8a 2d       	mov	r24, r10
    66a8:	86 78       	andi	r24, 0x86	; 134
    66aa:	09 f0       	breq	.+2      	; 0x66ae <vfprintf+0x31a>
    66ac:	b3 94       	inc	r11
    66ae:	a3 fc       	sbrc	r10, 3
    66b0:	10 c0       	rjmp	.+32     	; 0x66d2 <vfprintf+0x33e>
    66b2:	a0 fe       	sbrs	r10, 0
    66b4:	06 c0       	rjmp	.+12     	; 0x66c2 <vfprintf+0x32e>
    66b6:	b2 14       	cp	r11, r2
    66b8:	80 f4       	brcc	.+32     	; 0x66da <vfprintf+0x346>
    66ba:	28 0c       	add	r2, r8
    66bc:	92 2c       	mov	r9, r2
    66be:	9b 18       	sub	r9, r11
    66c0:	0d c0       	rjmp	.+26     	; 0x66dc <vfprintf+0x348>
    66c2:	b2 14       	cp	r11, r2
    66c4:	58 f4       	brcc	.+22     	; 0x66dc <vfprintf+0x348>
    66c6:	b6 01       	movw	r22, r12
    66c8:	80 e2       	ldi	r24, 0x20	; 32
    66ca:	90 e0       	ldi	r25, 0x00	; 0
    66cc:	76 d0       	rcall	.+236    	; 0x67ba <fputc>
    66ce:	b3 94       	inc	r11
    66d0:	f8 cf       	rjmp	.-16     	; 0x66c2 <vfprintf+0x32e>
    66d2:	b2 14       	cp	r11, r2
    66d4:	18 f4       	brcc	.+6      	; 0x66dc <vfprintf+0x348>
    66d6:	2b 18       	sub	r2, r11
    66d8:	02 c0       	rjmp	.+4      	; 0x66de <vfprintf+0x34a>
    66da:	98 2c       	mov	r9, r8
    66dc:	21 2c       	mov	r2, r1
    66de:	a4 fe       	sbrs	r10, 4
    66e0:	0f c0       	rjmp	.+30     	; 0x6700 <vfprintf+0x36c>
    66e2:	b6 01       	movw	r22, r12
    66e4:	80 e3       	ldi	r24, 0x30	; 48
    66e6:	90 e0       	ldi	r25, 0x00	; 0
    66e8:	68 d0       	rcall	.+208    	; 0x67ba <fputc>
    66ea:	a2 fe       	sbrs	r10, 2
    66ec:	16 c0       	rjmp	.+44     	; 0x671a <vfprintf+0x386>
    66ee:	a1 fc       	sbrc	r10, 1
    66f0:	03 c0       	rjmp	.+6      	; 0x66f8 <vfprintf+0x364>
    66f2:	88 e7       	ldi	r24, 0x78	; 120
    66f4:	90 e0       	ldi	r25, 0x00	; 0
    66f6:	02 c0       	rjmp	.+4      	; 0x66fc <vfprintf+0x368>
    66f8:	88 e5       	ldi	r24, 0x58	; 88
    66fa:	90 e0       	ldi	r25, 0x00	; 0
    66fc:	b6 01       	movw	r22, r12
    66fe:	0c c0       	rjmp	.+24     	; 0x6718 <vfprintf+0x384>
    6700:	8a 2d       	mov	r24, r10
    6702:	86 78       	andi	r24, 0x86	; 134
    6704:	51 f0       	breq	.+20     	; 0x671a <vfprintf+0x386>
    6706:	a1 fe       	sbrs	r10, 1
    6708:	02 c0       	rjmp	.+4      	; 0x670e <vfprintf+0x37a>
    670a:	8b e2       	ldi	r24, 0x2B	; 43
    670c:	01 c0       	rjmp	.+2      	; 0x6710 <vfprintf+0x37c>
    670e:	80 e2       	ldi	r24, 0x20	; 32
    6710:	a7 fc       	sbrc	r10, 7
    6712:	8d e2       	ldi	r24, 0x2D	; 45
    6714:	b6 01       	movw	r22, r12
    6716:	90 e0       	ldi	r25, 0x00	; 0
    6718:	50 d0       	rcall	.+160    	; 0x67ba <fputc>
    671a:	89 14       	cp	r8, r9
    671c:	30 f4       	brcc	.+12     	; 0x672a <vfprintf+0x396>
    671e:	b6 01       	movw	r22, r12
    6720:	80 e3       	ldi	r24, 0x30	; 48
    6722:	90 e0       	ldi	r25, 0x00	; 0
    6724:	4a d0       	rcall	.+148    	; 0x67ba <fputc>
    6726:	9a 94       	dec	r9
    6728:	f8 cf       	rjmp	.-16     	; 0x671a <vfprintf+0x386>
    672a:	8a 94       	dec	r8
    672c:	f3 01       	movw	r30, r6
    672e:	e8 0d       	add	r30, r8
    6730:	f1 1d       	adc	r31, r1
    6732:	80 81       	ld	r24, Z
    6734:	b6 01       	movw	r22, r12
    6736:	90 e0       	ldi	r25, 0x00	; 0
    6738:	40 d0       	rcall	.+128    	; 0x67ba <fputc>
    673a:	81 10       	cpse	r8, r1
    673c:	f6 cf       	rjmp	.-20     	; 0x672a <vfprintf+0x396>
    673e:	22 20       	and	r2, r2
    6740:	09 f4       	brne	.+2      	; 0x6744 <vfprintf+0x3b0>
    6742:	4e ce       	rjmp	.-868    	; 0x63e0 <vfprintf+0x4c>
    6744:	b6 01       	movw	r22, r12
    6746:	80 e2       	ldi	r24, 0x20	; 32
    6748:	90 e0       	ldi	r25, 0x00	; 0
    674a:	37 d0       	rcall	.+110    	; 0x67ba <fputc>
    674c:	2a 94       	dec	r2
    674e:	f7 cf       	rjmp	.-18     	; 0x673e <vfprintf+0x3aa>
    6750:	f6 01       	movw	r30, r12
    6752:	86 81       	ldd	r24, Z+6	; 0x06
    6754:	97 81       	ldd	r25, Z+7	; 0x07
    6756:	02 c0       	rjmp	.+4      	; 0x675c <vfprintf+0x3c8>
    6758:	8f ef       	ldi	r24, 0xFF	; 255
    675a:	9f ef       	ldi	r25, 0xFF	; 255
    675c:	2b 96       	adiw	r28, 0x0b	; 11
    675e:	0f b6       	in	r0, 0x3f	; 63
    6760:	f8 94       	cli
    6762:	de bf       	out	0x3e, r29	; 62
    6764:	0f be       	out	0x3f, r0	; 63
    6766:	cd bf       	out	0x3d, r28	; 61
    6768:	df 91       	pop	r29
    676a:	cf 91       	pop	r28
    676c:	1f 91       	pop	r17
    676e:	0f 91       	pop	r16
    6770:	ff 90       	pop	r15
    6772:	ef 90       	pop	r14
    6774:	df 90       	pop	r13
    6776:	cf 90       	pop	r12
    6778:	bf 90       	pop	r11
    677a:	af 90       	pop	r10
    677c:	9f 90       	pop	r9
    677e:	8f 90       	pop	r8
    6780:	7f 90       	pop	r7
    6782:	6f 90       	pop	r6
    6784:	5f 90       	pop	r5
    6786:	4f 90       	pop	r4
    6788:	3f 90       	pop	r3
    678a:	2f 90       	pop	r2
    678c:	08 95       	ret

0000678e <strnlen_P>:
    678e:	fc 01       	movw	r30, r24
    6790:	05 90       	lpm	r0, Z+
    6792:	61 50       	subi	r22, 0x01	; 1
    6794:	70 40       	sbci	r23, 0x00	; 0
    6796:	01 10       	cpse	r0, r1
    6798:	d8 f7       	brcc	.-10     	; 0x6790 <strnlen_P+0x2>
    679a:	80 95       	com	r24
    679c:	90 95       	com	r25
    679e:	8e 0f       	add	r24, r30
    67a0:	9f 1f       	adc	r25, r31
    67a2:	08 95       	ret

000067a4 <strnlen>:
    67a4:	fc 01       	movw	r30, r24
    67a6:	61 50       	subi	r22, 0x01	; 1
    67a8:	70 40       	sbci	r23, 0x00	; 0
    67aa:	01 90       	ld	r0, Z+
    67ac:	01 10       	cpse	r0, r1
    67ae:	d8 f7       	brcc	.-10     	; 0x67a6 <strnlen+0x2>
    67b0:	80 95       	com	r24
    67b2:	90 95       	com	r25
    67b4:	8e 0f       	add	r24, r30
    67b6:	9f 1f       	adc	r25, r31
    67b8:	08 95       	ret

000067ba <fputc>:
    67ba:	0f 93       	push	r16
    67bc:	1f 93       	push	r17
    67be:	cf 93       	push	r28
    67c0:	df 93       	push	r29
    67c2:	fb 01       	movw	r30, r22
    67c4:	23 81       	ldd	r18, Z+3	; 0x03
    67c6:	21 fd       	sbrc	r18, 1
    67c8:	03 c0       	rjmp	.+6      	; 0x67d0 <fputc+0x16>
    67ca:	8f ef       	ldi	r24, 0xFF	; 255
    67cc:	9f ef       	ldi	r25, 0xFF	; 255
    67ce:	2c c0       	rjmp	.+88     	; 0x6828 <fputc+0x6e>
    67d0:	22 ff       	sbrs	r18, 2
    67d2:	16 c0       	rjmp	.+44     	; 0x6800 <fputc+0x46>
    67d4:	46 81       	ldd	r20, Z+6	; 0x06
    67d6:	57 81       	ldd	r21, Z+7	; 0x07
    67d8:	24 81       	ldd	r18, Z+4	; 0x04
    67da:	35 81       	ldd	r19, Z+5	; 0x05
    67dc:	42 17       	cp	r20, r18
    67de:	53 07       	cpc	r21, r19
    67e0:	44 f4       	brge	.+16     	; 0x67f2 <fputc+0x38>
    67e2:	a0 81       	ld	r26, Z
    67e4:	b1 81       	ldd	r27, Z+1	; 0x01
    67e6:	9d 01       	movw	r18, r26
    67e8:	2f 5f       	subi	r18, 0xFF	; 255
    67ea:	3f 4f       	sbci	r19, 0xFF	; 255
    67ec:	31 83       	std	Z+1, r19	; 0x01
    67ee:	20 83       	st	Z, r18
    67f0:	8c 93       	st	X, r24
    67f2:	26 81       	ldd	r18, Z+6	; 0x06
    67f4:	37 81       	ldd	r19, Z+7	; 0x07
    67f6:	2f 5f       	subi	r18, 0xFF	; 255
    67f8:	3f 4f       	sbci	r19, 0xFF	; 255
    67fa:	37 83       	std	Z+7, r19	; 0x07
    67fc:	26 83       	std	Z+6, r18	; 0x06
    67fe:	14 c0       	rjmp	.+40     	; 0x6828 <fputc+0x6e>
    6800:	8b 01       	movw	r16, r22
    6802:	ec 01       	movw	r28, r24
    6804:	fb 01       	movw	r30, r22
    6806:	00 84       	ldd	r0, Z+8	; 0x08
    6808:	f1 85       	ldd	r31, Z+9	; 0x09
    680a:	e0 2d       	mov	r30, r0
    680c:	19 95       	eicall
    680e:	89 2b       	or	r24, r25
    6810:	e1 f6       	brne	.-72     	; 0x67ca <fputc+0x10>
    6812:	d8 01       	movw	r26, r16
    6814:	16 96       	adiw	r26, 0x06	; 6
    6816:	8d 91       	ld	r24, X+
    6818:	9c 91       	ld	r25, X
    681a:	17 97       	sbiw	r26, 0x07	; 7
    681c:	01 96       	adiw	r24, 0x01	; 1
    681e:	17 96       	adiw	r26, 0x07	; 7
    6820:	9c 93       	st	X, r25
    6822:	8e 93       	st	-X, r24
    6824:	16 97       	sbiw	r26, 0x06	; 6
    6826:	ce 01       	movw	r24, r28
    6828:	df 91       	pop	r29
    682a:	cf 91       	pop	r28
    682c:	1f 91       	pop	r17
    682e:	0f 91       	pop	r16
    6830:	08 95       	ret

00006832 <__ultoa_invert>:
    6832:	fa 01       	movw	r30, r20
    6834:	aa 27       	eor	r26, r26
    6836:	28 30       	cpi	r18, 0x08	; 8
    6838:	51 f1       	breq	.+84     	; 0x688e <__ultoa_invert+0x5c>
    683a:	20 31       	cpi	r18, 0x10	; 16
    683c:	81 f1       	breq	.+96     	; 0x689e <__ultoa_invert+0x6c>
    683e:	e8 94       	clt
    6840:	6f 93       	push	r22
    6842:	6e 7f       	andi	r22, 0xFE	; 254
    6844:	6e 5f       	subi	r22, 0xFE	; 254
    6846:	7f 4f       	sbci	r23, 0xFF	; 255
    6848:	8f 4f       	sbci	r24, 0xFF	; 255
    684a:	9f 4f       	sbci	r25, 0xFF	; 255
    684c:	af 4f       	sbci	r26, 0xFF	; 255
    684e:	b1 e0       	ldi	r27, 0x01	; 1
    6850:	3e d0       	rcall	.+124    	; 0x68ce <__ultoa_invert+0x9c>
    6852:	b4 e0       	ldi	r27, 0x04	; 4
    6854:	3c d0       	rcall	.+120    	; 0x68ce <__ultoa_invert+0x9c>
    6856:	67 0f       	add	r22, r23
    6858:	78 1f       	adc	r23, r24
    685a:	89 1f       	adc	r24, r25
    685c:	9a 1f       	adc	r25, r26
    685e:	a1 1d       	adc	r26, r1
    6860:	68 0f       	add	r22, r24
    6862:	79 1f       	adc	r23, r25
    6864:	8a 1f       	adc	r24, r26
    6866:	91 1d       	adc	r25, r1
    6868:	a1 1d       	adc	r26, r1
    686a:	6a 0f       	add	r22, r26
    686c:	71 1d       	adc	r23, r1
    686e:	81 1d       	adc	r24, r1
    6870:	91 1d       	adc	r25, r1
    6872:	a1 1d       	adc	r26, r1
    6874:	20 d0       	rcall	.+64     	; 0x68b6 <__ultoa_invert+0x84>
    6876:	09 f4       	brne	.+2      	; 0x687a <__ultoa_invert+0x48>
    6878:	68 94       	set
    687a:	3f 91       	pop	r19
    687c:	2a e0       	ldi	r18, 0x0A	; 10
    687e:	26 9f       	mul	r18, r22
    6880:	11 24       	eor	r1, r1
    6882:	30 19       	sub	r19, r0
    6884:	30 5d       	subi	r19, 0xD0	; 208
    6886:	31 93       	st	Z+, r19
    6888:	de f6       	brtc	.-74     	; 0x6840 <__ultoa_invert+0xe>
    688a:	cf 01       	movw	r24, r30
    688c:	08 95       	ret
    688e:	46 2f       	mov	r20, r22
    6890:	47 70       	andi	r20, 0x07	; 7
    6892:	40 5d       	subi	r20, 0xD0	; 208
    6894:	41 93       	st	Z+, r20
    6896:	b3 e0       	ldi	r27, 0x03	; 3
    6898:	0f d0       	rcall	.+30     	; 0x68b8 <__ultoa_invert+0x86>
    689a:	c9 f7       	brne	.-14     	; 0x688e <__ultoa_invert+0x5c>
    689c:	f6 cf       	rjmp	.-20     	; 0x688a <__ultoa_invert+0x58>
    689e:	46 2f       	mov	r20, r22
    68a0:	4f 70       	andi	r20, 0x0F	; 15
    68a2:	40 5d       	subi	r20, 0xD0	; 208
    68a4:	4a 33       	cpi	r20, 0x3A	; 58
    68a6:	18 f0       	brcs	.+6      	; 0x68ae <__ultoa_invert+0x7c>
    68a8:	49 5d       	subi	r20, 0xD9	; 217
    68aa:	31 fd       	sbrc	r19, 1
    68ac:	40 52       	subi	r20, 0x20	; 32
    68ae:	41 93       	st	Z+, r20
    68b0:	02 d0       	rcall	.+4      	; 0x68b6 <__ultoa_invert+0x84>
    68b2:	a9 f7       	brne	.-22     	; 0x689e <__ultoa_invert+0x6c>
    68b4:	ea cf       	rjmp	.-44     	; 0x688a <__ultoa_invert+0x58>
    68b6:	b4 e0       	ldi	r27, 0x04	; 4
    68b8:	a6 95       	lsr	r26
    68ba:	97 95       	ror	r25
    68bc:	87 95       	ror	r24
    68be:	77 95       	ror	r23
    68c0:	67 95       	ror	r22
    68c2:	ba 95       	dec	r27
    68c4:	c9 f7       	brne	.-14     	; 0x68b8 <__ultoa_invert+0x86>
    68c6:	00 97       	sbiw	r24, 0x00	; 0
    68c8:	61 05       	cpc	r22, r1
    68ca:	71 05       	cpc	r23, r1
    68cc:	08 95       	ret
    68ce:	9b 01       	movw	r18, r22
    68d0:	ac 01       	movw	r20, r24
    68d2:	0a 2e       	mov	r0, r26
    68d4:	06 94       	lsr	r0
    68d6:	57 95       	ror	r21
    68d8:	47 95       	ror	r20
    68da:	37 95       	ror	r19
    68dc:	27 95       	ror	r18
    68de:	ba 95       	dec	r27
    68e0:	c9 f7       	brne	.-14     	; 0x68d4 <__ultoa_invert+0xa2>
    68e2:	62 0f       	add	r22, r18
    68e4:	73 1f       	adc	r23, r19
    68e6:	84 1f       	adc	r24, r20
    68e8:	95 1f       	adc	r25, r21
    68ea:	a0 1d       	adc	r26, r0
    68ec:	08 95       	ret

000068ee <__divmodsi4>:
    68ee:	05 2e       	mov	r0, r21
    68f0:	97 fb       	bst	r25, 7
    68f2:	16 f4       	brtc	.+4      	; 0x68f8 <__divmodsi4+0xa>
    68f4:	00 94       	com	r0
    68f6:	0f d0       	rcall	.+30     	; 0x6916 <__negsi2>
    68f8:	57 fd       	sbrc	r21, 7
    68fa:	05 d0       	rcall	.+10     	; 0x6906 <__divmodsi4_neg2>
    68fc:	a9 da       	rcall	.-2734   	; 0x5e50 <__udivmodsi4>
    68fe:	07 fc       	sbrc	r0, 7
    6900:	02 d0       	rcall	.+4      	; 0x6906 <__divmodsi4_neg2>
    6902:	46 f4       	brtc	.+16     	; 0x6914 <__divmodsi4_exit>
    6904:	08 c0       	rjmp	.+16     	; 0x6916 <__negsi2>

00006906 <__divmodsi4_neg2>:
    6906:	50 95       	com	r21
    6908:	40 95       	com	r20
    690a:	30 95       	com	r19
    690c:	21 95       	neg	r18
    690e:	3f 4f       	sbci	r19, 0xFF	; 255
    6910:	4f 4f       	sbci	r20, 0xFF	; 255
    6912:	5f 4f       	sbci	r21, 0xFF	; 255

00006914 <__divmodsi4_exit>:
    6914:	08 95       	ret

00006916 <__negsi2>:
    6916:	90 95       	com	r25
    6918:	80 95       	com	r24
    691a:	70 95       	com	r23
    691c:	61 95       	neg	r22
    691e:	7f 4f       	sbci	r23, 0xFF	; 255
    6920:	8f 4f       	sbci	r24, 0xFF	; 255
    6922:	9f 4f       	sbci	r25, 0xFF	; 255
    6924:	08 95       	ret

00006926 <__muluhisi3>:
    6926:	0f d0       	rcall	.+30     	; 0x6946 <__umulhisi3>
    6928:	a5 9f       	mul	r26, r21
    692a:	90 0d       	add	r25, r0
    692c:	b4 9f       	mul	r27, r20
    692e:	90 0d       	add	r25, r0
    6930:	a4 9f       	mul	r26, r20
    6932:	80 0d       	add	r24, r0
    6934:	91 1d       	adc	r25, r1
    6936:	11 24       	eor	r1, r1
    6938:	08 95       	ret

0000693a <__mulshisi3>:
    693a:	b7 ff       	sbrs	r27, 7
    693c:	f4 cf       	rjmp	.-24     	; 0x6926 <__muluhisi3>

0000693e <__mulohisi3>:
    693e:	f3 df       	rcall	.-26     	; 0x6926 <__muluhisi3>
    6940:	82 1b       	sub	r24, r18
    6942:	93 0b       	sbc	r25, r19
    6944:	08 95       	ret

00006946 <__umulhisi3>:
    6946:	a2 9f       	mul	r26, r18
    6948:	b0 01       	movw	r22, r0
    694a:	b3 9f       	mul	r27, r19
    694c:	c0 01       	movw	r24, r0
    694e:	a3 9f       	mul	r26, r19
    6950:	70 0d       	add	r23, r0
    6952:	81 1d       	adc	r24, r1
    6954:	11 24       	eor	r1, r1
    6956:	91 1d       	adc	r25, r1
    6958:	b2 9f       	mul	r27, r18
    695a:	70 0d       	add	r23, r0
    695c:	81 1d       	adc	r24, r1
    695e:	11 24       	eor	r1, r1
    6960:	91 1d       	adc	r25, r1
    6962:	08 95       	ret

00006964 <_exit>:
    6964:	f8 94       	cli

00006966 <__stop_program>:
    6966:	ff cf       	rjmp	.-2      	; 0x6966 <__stop_program>
