
SEP4IOT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000005fe  00800200  000061ae  00006242  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000061ae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00001294  008007fe  008007fe  00006840  2**0
                  ALLOC
  3 .comment      0000008c  00000000  00000000  00006840  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000068cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000bb8  00000000  00000000  0000690c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000e900  00000000  00000000  000074c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003b69  00000000  00000000  00015dc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00006f30  00000000  00000000  0001992d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000028a4  00000000  00000000  00020860  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004585  00000000  00000000  00023104  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000d6ba  00000000  00000000  00027689  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000bd0  00000000  00000000  00034d43  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	4f c2       	rjmp	.+1182   	; 0x4a0 <__ctors_end>
       2:	00 00       	nop
       4:	6e c2       	rjmp	.+1244   	; 0x4e2 <__bad_interrupt>
       6:	00 00       	nop
       8:	6c c2       	rjmp	.+1240   	; 0x4e2 <__bad_interrupt>
       a:	00 00       	nop
       c:	6a c2       	rjmp	.+1236   	; 0x4e2 <__bad_interrupt>
       e:	00 00       	nop
      10:	68 c2       	rjmp	.+1232   	; 0x4e2 <__bad_interrupt>
      12:	00 00       	nop
      14:	66 c2       	rjmp	.+1228   	; 0x4e2 <__bad_interrupt>
      16:	00 00       	nop
      18:	64 c2       	rjmp	.+1224   	; 0x4e2 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	62 c2       	rjmp	.+1220   	; 0x4e2 <__bad_interrupt>
      1e:	00 00       	nop
      20:	60 c2       	rjmp	.+1216   	; 0x4e2 <__bad_interrupt>
      22:	00 00       	nop
      24:	5e c2       	rjmp	.+1212   	; 0x4e2 <__bad_interrupt>
      26:	00 00       	nop
      28:	5c c2       	rjmp	.+1208   	; 0x4e2 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	5a c2       	rjmp	.+1204   	; 0x4e2 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 17 0c 	jmp	0x182e	; 0x182e <__vector_12>
      34:	56 c2       	rjmp	.+1196   	; 0x4e2 <__bad_interrupt>
      36:	00 00       	nop
      38:	54 c2       	rjmp	.+1192   	; 0x4e2 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	52 c2       	rjmp	.+1188   	; 0x4e2 <__bad_interrupt>
      3e:	00 00       	nop
      40:	50 c2       	rjmp	.+1184   	; 0x4e2 <__bad_interrupt>
      42:	00 00       	nop
      44:	4e c2       	rjmp	.+1180   	; 0x4e2 <__bad_interrupt>
      46:	00 00       	nop
      48:	4c c2       	rjmp	.+1176   	; 0x4e2 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	4a c2       	rjmp	.+1172   	; 0x4e2 <__bad_interrupt>
      4e:	00 00       	nop
      50:	48 c2       	rjmp	.+1168   	; 0x4e2 <__bad_interrupt>
      52:	00 00       	nop
      54:	46 c2       	rjmp	.+1164   	; 0x4e2 <__bad_interrupt>
      56:	00 00       	nop
      58:	44 c2       	rjmp	.+1160   	; 0x4e2 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	42 c2       	rjmp	.+1156   	; 0x4e2 <__bad_interrupt>
      5e:	00 00       	nop
      60:	40 c2       	rjmp	.+1152   	; 0x4e2 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 a7 25 	jmp	0x4b4e	; 0x4b4e <__vector_25>
      68:	0c 94 f9 25 	jmp	0x4bf2	; 0x4bf2 <__vector_26>
      6c:	3a c2       	rjmp	.+1140   	; 0x4e2 <__bad_interrupt>
      6e:	00 00       	nop
      70:	38 c2       	rjmp	.+1136   	; 0x4e2 <__bad_interrupt>
      72:	00 00       	nop
      74:	36 c2       	rjmp	.+1132   	; 0x4e2 <__bad_interrupt>
      76:	00 00       	nop
      78:	34 c2       	rjmp	.+1128   	; 0x4e2 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	32 c2       	rjmp	.+1124   	; 0x4e2 <__bad_interrupt>
      7e:	00 00       	nop
      80:	30 c2       	rjmp	.+1120   	; 0x4e2 <__bad_interrupt>
      82:	00 00       	nop
      84:	2e c2       	rjmp	.+1116   	; 0x4e2 <__bad_interrupt>
      86:	00 00       	nop
      88:	2c c2       	rjmp	.+1112   	; 0x4e2 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	2a c2       	rjmp	.+1108   	; 0x4e2 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 3d 26 	jmp	0x4c7a	; 0x4c7a <__vector_36>
      94:	0c 94 8f 26 	jmp	0x4d1e	; 0x4d1e <__vector_37>
      98:	24 c2       	rjmp	.+1096   	; 0x4e2 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 27 29 	jmp	0x524e	; 0x524e <__vector_39>
      a0:	20 c2       	rjmp	.+1088   	; 0x4e2 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	1e c2       	rjmp	.+1084   	; 0x4e2 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	1c c2       	rjmp	.+1080   	; 0x4e2 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	1a c2       	rjmp	.+1076   	; 0x4e2 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	18 c2       	rjmp	.+1072   	; 0x4e2 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	16 c2       	rjmp	.+1068   	; 0x4e2 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	14 c2       	rjmp	.+1064   	; 0x4e2 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	12 c2       	rjmp	.+1060   	; 0x4e2 <__bad_interrupt>
      be:	00 00       	nop
      c0:	10 c2       	rjmp	.+1056   	; 0x4e2 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	0e c2       	rjmp	.+1052   	; 0x4e2 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	0c c2       	rjmp	.+1048   	; 0x4e2 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 d3 26 	jmp	0x4da6	; 0x4da6 <__vector_51>
      d0:	0c 94 25 27 	jmp	0x4e4a	; 0x4e4a <__vector_52>
      d4:	06 c2       	rjmp	.+1036   	; 0x4e2 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 69 27 	jmp	0x4ed2	; 0x4ed2 <__vector_54>
      dc:	0c 94 bb 27 	jmp	0x4f76	; 0x4f76 <__vector_55>
      e0:	00 c2       	rjmp	.+1024   	; 0x4e2 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	c6 01       	movw	r24, r12
      e6:	c6 01       	movw	r24, r12
      e8:	c6 01       	movw	r24, r12
      ea:	00 02       	muls	r16, r16
      ec:	08 02       	muls	r16, r24
      ee:	1e 02       	muls	r17, r30
      f0:	c6 01       	movw	r24, r12
      f2:	c6 01       	movw	r24, r12
      f4:	00 02       	muls	r16, r16
      f6:	08 02       	muls	r16, r24
      f8:	49 29       	or	r20, r9
      fa:	b9 29       	or	r27, r9
      fc:	b9 29       	or	r27, r9
      fe:	b9 29       	or	r27, r9
     100:	b9 29       	or	r27, r9
     102:	b9 29       	or	r27, r9
     104:	b9 29       	or	r27, r9
     106:	b9 29       	or	r27, r9
     108:	49 29       	or	r20, r9
     10a:	b9 29       	or	r27, r9
     10c:	b9 29       	or	r27, r9
     10e:	b9 29       	or	r27, r9
     110:	b9 29       	or	r27, r9
     112:	b9 29       	or	r27, r9
     114:	b9 29       	or	r27, r9
     116:	b9 29       	or	r27, r9
     118:	4b 29       	or	r20, r11
     11a:	b9 29       	or	r27, r9
     11c:	b9 29       	or	r27, r9
     11e:	b9 29       	or	r27, r9
     120:	b9 29       	or	r27, r9
     122:	b9 29       	or	r27, r9
     124:	b9 29       	or	r27, r9
     126:	b9 29       	or	r27, r9
     128:	b9 29       	or	r27, r9
     12a:	b9 29       	or	r27, r9
     12c:	b9 29       	or	r27, r9
     12e:	b9 29       	or	r27, r9
     130:	b9 29       	or	r27, r9
     132:	b9 29       	or	r27, r9
     134:	b9 29       	or	r27, r9
     136:	b9 29       	or	r27, r9
     138:	4b 29       	or	r20, r11
     13a:	b9 29       	or	r27, r9
     13c:	b9 29       	or	r27, r9
     13e:	b9 29       	or	r27, r9
     140:	b9 29       	or	r27, r9
     142:	b9 29       	or	r27, r9
     144:	b9 29       	or	r27, r9
     146:	b9 29       	or	r27, r9
     148:	b9 29       	or	r27, r9
     14a:	b9 29       	or	r27, r9
     14c:	b9 29       	or	r27, r9
     14e:	b9 29       	or	r27, r9
     150:	b9 29       	or	r27, r9
     152:	b9 29       	or	r27, r9
     154:	b9 29       	or	r27, r9
     156:	b9 29       	or	r27, r9
     158:	b5 29       	or	r27, r5
     15a:	b9 29       	or	r27, r9
     15c:	b9 29       	or	r27, r9
     15e:	b9 29       	or	r27, r9
     160:	b9 29       	or	r27, r9
     162:	b9 29       	or	r27, r9
     164:	b9 29       	or	r27, r9
     166:	b9 29       	or	r27, r9
     168:	80 29       	or	r24, r0
     16a:	b9 29       	or	r27, r9
     16c:	b9 29       	or	r27, r9
     16e:	b9 29       	or	r27, r9
     170:	b9 29       	or	r27, r9
     172:	b9 29       	or	r27, r9
     174:	b9 29       	or	r27, r9
     176:	b9 29       	or	r27, r9
     178:	b9 29       	or	r27, r9
     17a:	b9 29       	or	r27, r9
     17c:	b9 29       	or	r27, r9
     17e:	b9 29       	or	r27, r9
     180:	b9 29       	or	r27, r9
     182:	b9 29       	or	r27, r9
     184:	b9 29       	or	r27, r9
     186:	b9 29       	or	r27, r9
     188:	74 29       	or	r23, r4
     18a:	b9 29       	or	r27, r9
     18c:	b9 29       	or	r27, r9
     18e:	b9 29       	or	r27, r9
     190:	b9 29       	or	r27, r9
     192:	b9 29       	or	r27, r9
     194:	b9 29       	or	r27, r9
     196:	b9 29       	or	r27, r9
     198:	98 29       	or	r25, r8

0000019a <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     19a:	03 e8       	ldi	r16, 0x83	; 131
     19c:	18 e1       	ldi	r17, 0x18	; 24
     19e:	0f 2e       	mov	r0, r31
     1a0:	f3 eb       	ldi	r31, 0xB3	; 179
     1a2:	ef 2e       	mov	r14, r31
     1a4:	f8 e1       	ldi	r31, 0x18	; 24
     1a6:	ff 2e       	mov	r15, r31
     1a8:	f0 2d       	mov	r31, r0
     1aa:	80 91 82 18 	lds	r24, 0x1882	; 0x801882 <uxDeletedTasksWaitingCleanUp>
     1ae:	88 23       	and	r24, r24
     1b0:	29 f1       	breq	.+74     	; 0x1fc <prvIdleTask+0x62>
     1b2:	0f b6       	in	r0, 0x3f	; 63
     1b4:	f8 94       	cli
     1b6:	0f 92       	push	r0
     1b8:	d8 01       	movw	r26, r16
     1ba:	17 96       	adiw	r26, 0x07	; 7
     1bc:	ed 91       	ld	r30, X+
     1be:	fc 91       	ld	r31, X
     1c0:	18 97       	sbiw	r26, 0x08	; 8
     1c2:	c0 85       	ldd	r28, Z+8	; 0x08
     1c4:	d1 85       	ldd	r29, Z+9	; 0x09
     1c6:	ce 01       	movw	r24, r28
     1c8:	02 96       	adiw	r24, 0x02	; 2
     1ca:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <uxListRemove>
     1ce:	80 91 76 18 	lds	r24, 0x1876	; 0x801876 <uxCurrentNumberOfTasks>
     1d2:	81 50       	subi	r24, 0x01	; 1
     1d4:	80 93 76 18 	sts	0x1876, r24	; 0x801876 <uxCurrentNumberOfTasks>
     1d8:	80 91 82 18 	lds	r24, 0x1882	; 0x801882 <uxDeletedTasksWaitingCleanUp>
     1dc:	81 50       	subi	r24, 0x01	; 1
     1de:	80 93 82 18 	sts	0x1882, r24	; 0x801882 <uxDeletedTasksWaitingCleanUp>
     1e2:	0f 90       	pop	r0
     1e4:	0f be       	out	0x3f, r0	; 63
     1e6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     1e8:	9c 8d       	ldd	r25, Y+28	; 0x1c
     1ea:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <vPortFree>
     1ee:	ce 01       	movw	r24, r28
     1f0:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <vPortFree>
     1f4:	80 91 82 18 	lds	r24, 0x1882	; 0x801882 <uxDeletedTasksWaitingCleanUp>
     1f8:	81 11       	cpse	r24, r1
     1fa:	db cf       	rjmp	.-74     	; 0x1b2 <prvIdleTask+0x18>
     1fc:	f7 01       	movw	r30, r14
     1fe:	80 81       	ld	r24, Z
     200:	82 30       	cpi	r24, 0x02	; 2
     202:	10 f0       	brcs	.+4      	; 0x208 <prvIdleTask+0x6e>
     204:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <vPortYield>
     208:	0e 94 69 1c 	call	0x38d2	; 0x38d2 <vApplicationIdleHook>
     20c:	ce cf       	rjmp	.-100    	; 0x1aa <prvIdleTask+0x10>

0000020e <prvTimerTask>:
            pxNewTimer->ucStatus = 0x00;
            prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
        }

        return pxNewTimer;
    }
     20e:	cf 93       	push	r28
     210:	df 93       	push	r29
     212:	cd b7       	in	r28, 0x3d	; 61
     214:	de b7       	in	r29, 0x3e	; 62
     216:	60 97       	sbiw	r28, 0x10	; 16
     218:	0f b6       	in	r0, 0x3f	; 63
     21a:	f8 94       	cli
     21c:	de bf       	out	0x3e, r29	; 62
     21e:	0f be       	out	0x3f, r0	; 63
     220:	cd bf       	out	0x3d, r28	; 61
     222:	ce 01       	movw	r24, r28
     224:	01 96       	adiw	r24, 0x01	; 1
     226:	9a 87       	std	Y+10, r25	; 0x0a
     228:	89 87       	std	Y+9, r24	; 0x09
     22a:	81 2c       	mov	r8, r1
     22c:	91 2c       	mov	r9, r1
     22e:	a1 2c       	mov	r10, r1
     230:	b1 2c       	mov	r11, r1
     232:	69 84       	ldd	r6, Y+9	; 0x09
     234:	7a 84       	ldd	r7, Y+10	; 0x0a
     236:	e0 91 eb 18 	lds	r30, 0x18EB	; 0x8018eb <pxCurrentTimerList>
     23a:	f0 91 ec 18 	lds	r31, 0x18EC	; 0x8018ec <pxCurrentTimerList+0x1>
     23e:	80 81       	ld	r24, Z
     240:	88 23       	and	r24, r24
     242:	09 f4       	brne	.+2      	; 0x246 <prvTimerTask+0x38>
     244:	13 c1       	rjmp	.+550    	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
     246:	07 80       	ldd	r0, Z+7	; 0x07
     248:	f0 85       	ldd	r31, Z+8	; 0x08
     24a:	e0 2d       	mov	r30, r0
     24c:	20 80       	ld	r2, Z
     24e:	31 80       	ldd	r3, Z+1	; 0x01
     250:	42 80       	ldd	r4, Z+2	; 0x02
     252:	53 80       	ldd	r5, Z+3	; 0x03
     254:	0e 94 ae 14 	call	0x295c	; 0x295c <vTaskSuspendAll>
     258:	ce 01       	movw	r24, r28
     25a:	01 96       	adiw	r24, 0x01	; 1
     25c:	0e 94 d3 1b 	call	0x37a6	; 0x37a6 <prvSampleTimeNow>
     260:	6b 87       	std	Y+11, r22	; 0x0b
     262:	7c 87       	std	Y+12, r23	; 0x0c
     264:	8d 87       	std	Y+13, r24	; 0x0d
     266:	9e 87       	std	Y+14, r25	; 0x0e
     268:	89 81       	ldd	r24, Y+1	; 0x01
     26a:	81 11       	cpse	r24, r1
     26c:	67 c0       	rjmp	.+206    	; 0x33c <prvTimerTask+0x12e>
     26e:	8b 85       	ldd	r24, Y+11	; 0x0b
     270:	9c 85       	ldd	r25, Y+12	; 0x0c
     272:	ad 85       	ldd	r26, Y+13	; 0x0d
     274:	be 85       	ldd	r27, Y+14	; 0x0e
     276:	82 15       	cp	r24, r2
     278:	93 05       	cpc	r25, r3
     27a:	a4 05       	cpc	r26, r4
     27c:	b5 05       	cpc	r27, r5
     27e:	08 f4       	brcc	.+2      	; 0x282 <prvTimerTask+0x74>
     280:	45 c0       	rjmp	.+138    	; 0x30c <prvTimerTask+0xfe>
     282:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <xTaskResumeAll>
     286:	e0 91 eb 18 	lds	r30, 0x18EB	; 0x8018eb <pxCurrentTimerList>
     28a:	f0 91 ec 18 	lds	r31, 0x18EC	; 0x8018ec <pxCurrentTimerList+0x1>
     28e:	07 80       	ldd	r0, Z+7	; 0x07
     290:	f0 85       	ldd	r31, Z+8	; 0x08
     292:	e0 2d       	mov	r30, r0
     294:	a0 85       	ldd	r26, Z+8	; 0x08
     296:	b1 85       	ldd	r27, Z+9	; 0x09
     298:	b8 8b       	std	Y+16, r27	; 0x10
     29a:	af 87       	std	Y+15, r26	; 0x0f
     29c:	cd 01       	movw	r24, r26
     29e:	02 96       	adiw	r24, 0x02	; 2
     2a0:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <uxListRemove>
     2a4:	ef 85       	ldd	r30, Y+15	; 0x0f
     2a6:	f8 89       	ldd	r31, Y+16	; 0x10
     2a8:	87 89       	ldd	r24, Z+23	; 0x17
     2aa:	82 ff       	sbrs	r24, 2
     2ac:	21 c0       	rjmp	.+66     	; 0x2f0 <prvTimerTask+0xe2>
     2ae:	46 85       	ldd	r20, Z+14	; 0x0e
     2b0:	57 85       	ldd	r21, Z+15	; 0x0f
     2b2:	60 89       	ldd	r22, Z+16	; 0x10
     2b4:	71 89       	ldd	r23, Z+17	; 0x11
     2b6:	42 0d       	add	r20, r2
     2b8:	53 1d       	adc	r21, r3
     2ba:	64 1d       	adc	r22, r4
     2bc:	75 1d       	adc	r23, r5
     2be:	72 01       	movw	r14, r4
     2c0:	61 01       	movw	r12, r2
     2c2:	0b 85       	ldd	r16, Y+11	; 0x0b
     2c4:	1c 85       	ldd	r17, Y+12	; 0x0c
     2c6:	2d 85       	ldd	r18, Y+13	; 0x0d
     2c8:	3e 85       	ldd	r19, Y+14	; 0x0e
     2ca:	cf 01       	movw	r24, r30
     2cc:	0e 94 e2 1a 	call	0x35c4	; 0x35c4 <prvInsertTimerInActiveList>
     2d0:	88 23       	and	r24, r24
     2d2:	99 f0       	breq	.+38     	; 0x2fa <prvTimerTask+0xec>
     2d4:	c8 2c       	mov	r12, r8
     2d6:	d9 2c       	mov	r13, r9
     2d8:	ea 2c       	mov	r14, r10
     2da:	fb 2c       	mov	r15, r11
     2dc:	00 e0       	ldi	r16, 0x00	; 0
     2de:	10 e0       	ldi	r17, 0x00	; 0
     2e0:	a2 01       	movw	r20, r4
     2e2:	91 01       	movw	r18, r2
     2e4:	60 e0       	ldi	r22, 0x00	; 0
     2e6:	8f 85       	ldd	r24, Y+15	; 0x0f
     2e8:	98 89       	ldd	r25, Y+16	; 0x10
     2ea:	0e 94 75 1b 	call	0x36ea	; 0x36ea <xTimerGenericCommand>
     2ee:	05 c0       	rjmp	.+10     	; 0x2fa <prvTimerTask+0xec>
     2f0:	8e 7f       	andi	r24, 0xFE	; 254
     2f2:	af 85       	ldd	r26, Y+15	; 0x0f
     2f4:	b8 89       	ldd	r27, Y+16	; 0x10
     2f6:	57 96       	adiw	r26, 0x17	; 23
     2f8:	8c 93       	st	X, r24
     2fa:	af 85       	ldd	r26, Y+15	; 0x0f
     2fc:	b8 89       	ldd	r27, Y+16	; 0x10
     2fe:	54 96       	adiw	r26, 0x14	; 20
     300:	ed 91       	ld	r30, X+
     302:	fc 91       	ld	r31, X
     304:	55 97       	sbiw	r26, 0x15	; 21
     306:	cd 01       	movw	r24, r26
     308:	19 95       	eicall
     30a:	a1 c0       	rjmp	.+322    	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     30c:	20 e0       	ldi	r18, 0x00	; 0
     30e:	b2 01       	movw	r22, r4
     310:	a1 01       	movw	r20, r2
     312:	8b 85       	ldd	r24, Y+11	; 0x0b
     314:	9c 85       	ldd	r25, Y+12	; 0x0c
     316:	ad 85       	ldd	r26, Y+13	; 0x0d
     318:	be 85       	ldd	r27, Y+14	; 0x0e
     31a:	48 1b       	sub	r20, r24
     31c:	59 0b       	sbc	r21, r25
     31e:	6a 0b       	sbc	r22, r26
     320:	7b 0b       	sbc	r23, r27
     322:	80 91 e7 18 	lds	r24, 0x18E7	; 0x8018e7 <xTimerQueue>
     326:	90 91 e8 18 	lds	r25, 0x18E8	; 0x8018e8 <xTimerQueue+0x1>
     32a:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <vQueueWaitForMessageRestricted>
     32e:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <xTaskResumeAll>
     332:	81 11       	cpse	r24, r1
     334:	8c c0       	rjmp	.+280    	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     336:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <vPortYield>
     33a:	89 c0       	rjmp	.+274    	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     33c:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <xTaskResumeAll>
     340:	86 c0       	rjmp	.+268    	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     342:	89 81       	ldd	r24, Y+1	; 0x01
     344:	88 23       	and	r24, r24
     346:	0c f4       	brge	.+2      	; 0x34a <prvTimerTask+0x13c>
     348:	82 c0       	rjmp	.+260    	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     34a:	4e 80       	ldd	r4, Y+6	; 0x06
     34c:	5f 80       	ldd	r5, Y+7	; 0x07
     34e:	d2 01       	movw	r26, r4
     350:	1c 96       	adiw	r26, 0x0c	; 12
     352:	8d 91       	ld	r24, X+
     354:	9c 91       	ld	r25, X
     356:	1d 97       	sbiw	r26, 0x0d	; 13
     358:	89 2b       	or	r24, r25
     35a:	21 f0       	breq	.+8      	; 0x364 <prvTimerTask+0x156>
     35c:	c2 01       	movw	r24, r4
     35e:	02 96       	adiw	r24, 0x02	; 2
     360:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <uxListRemove>
     364:	ce 01       	movw	r24, r28
     366:	08 96       	adiw	r24, 0x08	; 8
     368:	0e 94 d3 1b 	call	0x37a6	; 0x37a6 <prvSampleTimeNow>
     36c:	8b 01       	movw	r16, r22
     36e:	9c 01       	movw	r18, r24
     370:	e9 81       	ldd	r30, Y+1	; 0x01
     372:	0e 2e       	mov	r0, r30
     374:	00 0c       	add	r0, r0
     376:	ff 0b       	sbc	r31, r31
     378:	ea 30       	cpi	r30, 0x0A	; 10
     37a:	f1 05       	cpc	r31, r1
     37c:	08 f0       	brcs	.+2      	; 0x380 <prvTimerTask+0x172>
     37e:	67 c0       	rjmp	.+206    	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     380:	88 27       	eor	r24, r24
     382:	ee 58       	subi	r30, 0x8E	; 142
     384:	ff 4f       	sbci	r31, 0xFF	; 255
     386:	8f 4f       	sbci	r24, 0xFF	; 255
     388:	0c 94 11 2c 	jmp	0x5822	; 0x5822 <__tablejump2__>
     38c:	f2 01       	movw	r30, r4
     38e:	87 89       	ldd	r24, Z+23	; 0x17
     390:	81 60       	ori	r24, 0x01	; 1
     392:	87 8b       	std	Z+23, r24	; 0x17
     394:	ca 80       	ldd	r12, Y+2	; 0x02
     396:	db 80       	ldd	r13, Y+3	; 0x03
     398:	ec 80       	ldd	r14, Y+4	; 0x04
     39a:	fd 80       	ldd	r15, Y+5	; 0x05
     39c:	46 85       	ldd	r20, Z+14	; 0x0e
     39e:	57 85       	ldd	r21, Z+15	; 0x0f
     3a0:	60 89       	ldd	r22, Z+16	; 0x10
     3a2:	71 89       	ldd	r23, Z+17	; 0x11
     3a4:	4c 0d       	add	r20, r12
     3a6:	5d 1d       	adc	r21, r13
     3a8:	6e 1d       	adc	r22, r14
     3aa:	7f 1d       	adc	r23, r15
     3ac:	c2 01       	movw	r24, r4
     3ae:	0e 94 e2 1a 	call	0x35c4	; 0x35c4 <prvInsertTimerInActiveList>
     3b2:	88 23       	and	r24, r24
     3b4:	09 f4       	brne	.+2      	; 0x3b8 <prvTimerTask+0x1aa>
     3b6:	4b c0       	rjmp	.+150    	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     3b8:	d2 01       	movw	r26, r4
     3ba:	54 96       	adiw	r26, 0x14	; 20
     3bc:	ed 91       	ld	r30, X+
     3be:	fc 91       	ld	r31, X
     3c0:	55 97       	sbiw	r26, 0x15	; 21
     3c2:	c2 01       	movw	r24, r4
     3c4:	19 95       	eicall
     3c6:	f2 01       	movw	r30, r4
     3c8:	87 89       	ldd	r24, Z+23	; 0x17
     3ca:	82 ff       	sbrs	r24, 2
     3cc:	40 c0       	rjmp	.+128    	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     3ce:	4a 81       	ldd	r20, Y+2	; 0x02
     3d0:	5b 81       	ldd	r21, Y+3	; 0x03
     3d2:	6c 81       	ldd	r22, Y+4	; 0x04
     3d4:	7d 81       	ldd	r23, Y+5	; 0x05
     3d6:	86 85       	ldd	r24, Z+14	; 0x0e
     3d8:	97 85       	ldd	r25, Z+15	; 0x0f
     3da:	a0 89       	ldd	r26, Z+16	; 0x10
     3dc:	b1 89       	ldd	r27, Z+17	; 0x11
     3de:	9a 01       	movw	r18, r20
     3e0:	ab 01       	movw	r20, r22
     3e2:	28 0f       	add	r18, r24
     3e4:	39 1f       	adc	r19, r25
     3e6:	4a 1f       	adc	r20, r26
     3e8:	5b 1f       	adc	r21, r27
     3ea:	c8 2c       	mov	r12, r8
     3ec:	d9 2c       	mov	r13, r9
     3ee:	ea 2c       	mov	r14, r10
     3f0:	fb 2c       	mov	r15, r11
     3f2:	00 e0       	ldi	r16, 0x00	; 0
     3f4:	10 e0       	ldi	r17, 0x00	; 0
     3f6:	60 e0       	ldi	r22, 0x00	; 0
     3f8:	c2 01       	movw	r24, r4
     3fa:	0e 94 75 1b 	call	0x36ea	; 0x36ea <xTimerGenericCommand>
     3fe:	27 c0       	rjmp	.+78     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     400:	d2 01       	movw	r26, r4
     402:	57 96       	adiw	r26, 0x17	; 23
     404:	8c 91       	ld	r24, X
     406:	57 97       	sbiw	r26, 0x17	; 23
     408:	8e 7f       	andi	r24, 0xFE	; 254
     40a:	57 96       	adiw	r26, 0x17	; 23
     40c:	8c 93       	st	X, r24
     40e:	1f c0       	rjmp	.+62     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     410:	f2 01       	movw	r30, r4
     412:	87 89       	ldd	r24, Z+23	; 0x17
     414:	81 60       	ori	r24, 0x01	; 1
     416:	87 8b       	std	Z+23, r24	; 0x17
     418:	4a 81       	ldd	r20, Y+2	; 0x02
     41a:	5b 81       	ldd	r21, Y+3	; 0x03
     41c:	6c 81       	ldd	r22, Y+4	; 0x04
     41e:	7d 81       	ldd	r23, Y+5	; 0x05
     420:	46 87       	std	Z+14, r20	; 0x0e
     422:	57 87       	std	Z+15, r21	; 0x0f
     424:	60 8b       	std	Z+16, r22	; 0x10
     426:	71 8b       	std	Z+17, r23	; 0x11
     428:	40 0f       	add	r20, r16
     42a:	51 1f       	adc	r21, r17
     42c:	62 1f       	adc	r22, r18
     42e:	73 1f       	adc	r23, r19
     430:	68 01       	movw	r12, r16
     432:	79 01       	movw	r14, r18
     434:	c2 01       	movw	r24, r4
     436:	0e 94 e2 1a 	call	0x35c4	; 0x35c4 <prvInsertTimerInActiveList>
     43a:	09 c0       	rjmp	.+18     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     43c:	f2 01       	movw	r30, r4
     43e:	87 89       	ldd	r24, Z+23	; 0x17
     440:	81 fd       	sbrc	r24, 1
     442:	03 c0       	rjmp	.+6      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
     444:	c2 01       	movw	r24, r4
     446:	b4 d7       	rcall	.+3944   	; 0x13b0 <vPortFree>
     448:	02 c0       	rjmp	.+4      	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     44a:	8e 7f       	andi	r24, 0xFE	; 254
     44c:	87 8b       	std	Z+23, r24	; 0x17
     44e:	28 2d       	mov	r18, r8
     450:	39 2d       	mov	r19, r9
     452:	4a 2d       	mov	r20, r10
     454:	5b 2d       	mov	r21, r11
     456:	66 2d       	mov	r22, r6
     458:	77 2d       	mov	r23, r7
     45a:	80 91 e7 18 	lds	r24, 0x18E7	; 0x8018e7 <xTimerQueue>
     45e:	90 91 e8 18 	lds	r25, 0x18E8	; 0x8018e8 <xTimerQueue+0x1>
     462:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <xQueueReceive>
     466:	81 11       	cpse	r24, r1
     468:	6c cf       	rjmp	.-296    	; 0x342 <prvTimerTask+0x134>
     46a:	e5 ce       	rjmp	.-566    	; 0x236 <prvTimerTask+0x28>
     46c:	0e 94 ae 14 	call	0x295c	; 0x295c <vTaskSuspendAll>
     470:	ce 01       	movw	r24, r28
     472:	01 96       	adiw	r24, 0x01	; 1
     474:	0e 94 d3 1b 	call	0x37a6	; 0x37a6 <prvSampleTimeNow>
     478:	6b 87       	std	Y+11, r22	; 0x0b
     47a:	7c 87       	std	Y+12, r23	; 0x0c
     47c:	8d 87       	std	Y+13, r24	; 0x0d
     47e:	9e 87       	std	Y+14, r25	; 0x0e
     480:	89 81       	ldd	r24, Y+1	; 0x01
     482:	81 11       	cpse	r24, r1
     484:	5b cf       	rjmp	.-330    	; 0x33c <prvTimerTask+0x12e>
     486:	e0 91 e9 18 	lds	r30, 0x18E9	; 0x8018e9 <pxOverflowTimerList>
     48a:	f0 91 ea 18 	lds	r31, 0x18EA	; 0x8018ea <pxOverflowTimerList+0x1>
     48e:	80 81       	ld	r24, Z
     490:	21 e0       	ldi	r18, 0x01	; 1
     492:	81 11       	cpse	r24, r1
     494:	20 e0       	ldi	r18, 0x00	; 0
     496:	28 2c       	mov	r2, r8
     498:	39 2c       	mov	r3, r9
     49a:	4a 2c       	mov	r4, r10
     49c:	5b 2c       	mov	r5, r11
     49e:	37 cf       	rjmp	.-402    	; 0x30e <prvTimerTask+0x100>

000004a0 <__ctors_end>:
     4a0:	11 24       	eor	r1, r1
     4a2:	1f be       	out	0x3f, r1	; 63
     4a4:	cf ef       	ldi	r28, 0xFF	; 255
     4a6:	d1 e2       	ldi	r29, 0x21	; 33
     4a8:	de bf       	out	0x3e, r29	; 62
     4aa:	cd bf       	out	0x3d, r28	; 61
     4ac:	00 e0       	ldi	r16, 0x00	; 0
     4ae:	0c bf       	out	0x3c, r16	; 60

000004b0 <__do_copy_data>:
     4b0:	17 e0       	ldi	r17, 0x07	; 7
     4b2:	a0 e0       	ldi	r26, 0x00	; 0
     4b4:	b2 e0       	ldi	r27, 0x02	; 2
     4b6:	ee ea       	ldi	r30, 0xAE	; 174
     4b8:	f1 e6       	ldi	r31, 0x61	; 97
     4ba:	00 e0       	ldi	r16, 0x00	; 0
     4bc:	0b bf       	out	0x3b, r16	; 59
     4be:	02 c0       	rjmp	.+4      	; 0x4c4 <__do_copy_data+0x14>
     4c0:	07 90       	elpm	r0, Z+
     4c2:	0d 92       	st	X+, r0
     4c4:	ae 3f       	cpi	r26, 0xFE	; 254
     4c6:	b1 07       	cpc	r27, r17
     4c8:	d9 f7       	brne	.-10     	; 0x4c0 <__do_copy_data+0x10>

000004ca <__do_clear_bss>:
     4ca:	2a e1       	ldi	r18, 0x1A	; 26
     4cc:	ae ef       	ldi	r26, 0xFE	; 254
     4ce:	b7 e0       	ldi	r27, 0x07	; 7
     4d0:	01 c0       	rjmp	.+2      	; 0x4d4 <.do_clear_bss_start>

000004d2 <.do_clear_bss_loop>:
     4d2:	1d 92       	st	X+, r1

000004d4 <.do_clear_bss_start>:
     4d4:	a2 39       	cpi	r26, 0x92	; 146
     4d6:	b2 07       	cpc	r27, r18
     4d8:	e1 f7       	brne	.-8      	; 0x4d2 <.do_clear_bss_loop>
     4da:	0e 94 1d 1d 	call	0x3a3a	; 0x3a3a <main>
     4de:	0c 94 d5 30 	jmp	0x61aa	; 0x61aa <_exit>

000004e2 <__bad_interrupt>:
     4e2:	8e cd       	rjmp	.-1252   	; 0x0 <__vectors>

000004e4 <co2Reader_create>:

	return _new_reader;
}

//	RETURN TO DESTROY METHODS
void co2Reader_destroy(co2reader_t self) {
     4e4:	2f 92       	push	r2
     4e6:	3f 92       	push	r3
     4e8:	4f 92       	push	r4
     4ea:	5f 92       	push	r5
     4ec:	6f 92       	push	r6
     4ee:	7f 92       	push	r7
     4f0:	8f 92       	push	r8
     4f2:	9f 92       	push	r9
     4f4:	af 92       	push	r10
     4f6:	bf 92       	push	r11
     4f8:	cf 92       	push	r12
     4fa:	df 92       	push	r13
     4fc:	ef 92       	push	r14
     4fe:	ff 92       	push	r15
     500:	0f 93       	push	r16
     502:	1f 93       	push	r17
     504:	cf 93       	push	r28
     506:	df 93       	push	r29
     508:	88 2e       	mov	r8, r24
     50a:	96 2e       	mov	r9, r22
     50c:	1a 01       	movw	r2, r20
     50e:	28 01       	movw	r4, r16
     510:	39 01       	movw	r6, r18
     512:	61 e0       	ldi	r22, 0x01	; 1
     514:	70 e0       	ldi	r23, 0x00	; 0
     516:	83 e0       	ldi	r24, 0x03	; 3
     518:	90 e0       	ldi	r25, 0x00	; 0
     51a:	0e 94 19 2c 	call	0x5832	; 0x5832 <calloc>
     51e:	ec 01       	movw	r28, r24
     520:	00 97       	sbiw	r24, 0x00	; 0
     522:	69 f1       	breq	.+90     	; 0x57e <co2Reader_create+0x9a>
     524:	fc 01       	movw	r30, r24
     526:	11 92       	st	Z+, r1
     528:	30 92 09 08 	sts	0x0809, r3	; 0x800809 <_startMeasureEventGroup+0x1>
     52c:	20 92 08 08 	sts	0x0808, r2	; 0x800808 <_startMeasureEventGroup>
     530:	40 92 04 08 	sts	0x0804, r4	; 0x800804 <_startMeasureBit>
     534:	50 92 05 08 	sts	0x0805, r5	; 0x800805 <_startMeasureBit+0x1>
     538:	60 92 06 08 	sts	0x0806, r6	; 0x800806 <_startMeasureBit+0x2>
     53c:	70 92 07 08 	sts	0x0807, r7	; 0x800807 <_startMeasureBit+0x3>
     540:	f0 92 03 08 	sts	0x0803, r15	; 0x800803 <_readyEventGroup+0x1>
     544:	e0 92 02 08 	sts	0x0802, r14	; 0x800802 <_readyEventGroup>
     548:	a0 92 fe 07 	sts	0x07FE, r10	; 0x8007fe <__data_end>
     54c:	b0 92 ff 07 	sts	0x07FF, r11	; 0x8007ff <__data_end+0x1>
     550:	c0 92 00 08 	sts	0x0800, r12	; 0x800800 <__data_end+0x2>
     554:	d0 92 01 08 	sts	0x0801, r13	; 0x800801 <__data_end+0x3>
     558:	49 2d       	mov	r20, r9
     55a:	50 e0       	ldi	r21, 0x00	; 0
     55c:	7f 01       	movw	r14, r30
     55e:	08 2d       	mov	r16, r8
     560:	9c 01       	movw	r18, r24
     562:	61 e4       	ldi	r22, 0x41	; 65
     564:	72 e0       	ldi	r23, 0x02	; 2
     566:	89 e2       	ldi	r24, 0x29	; 41
     568:	93 e0       	ldi	r25, 0x03	; 3
     56a:	0e 94 53 13 	call	0x26a6	; 0x26a6 <xTaskCreate>
     56e:	8b e4       	ldi	r24, 0x4B	; 75
     570:	92 e0       	ldi	r25, 0x02	; 2
     572:	9f 93       	push	r25
     574:	8f 93       	push	r24
     576:	0e 94 b7 2d 	call	0x5b6e	; 0x5b6e <printf>
     57a:	0f 90       	pop	r0
     57c:	0f 90       	pop	r0
     57e:	ce 01       	movw	r24, r28
     580:	df 91       	pop	r29
     582:	cf 91       	pop	r28
     584:	1f 91       	pop	r17
     586:	0f 91       	pop	r16
     588:	ff 90       	pop	r15
     58a:	ef 90       	pop	r14
     58c:	df 90       	pop	r13
     58e:	cf 90       	pop	r12
     590:	bf 90       	pop	r11
     592:	af 90       	pop	r10
     594:	9f 90       	pop	r9
     596:	8f 90       	pop	r8
     598:	7f 90       	pop	r7
     59a:	6f 90       	pop	r6
     59c:	5f 90       	pop	r5
     59e:	4f 90       	pop	r4
     5a0:	3f 90       	pop	r3
     5a2:	2f 90       	pop	r2
     5a4:	08 95       	ret

000005a6 <co2Reader_measure>:
	for (;;) {
		co2Reader_measure(self);
	}
}

void co2Reader_measure(co2reader_t self) {//dummy
     5a6:	cf 92       	push	r12
     5a8:	df 92       	push	r13
     5aa:	ef 92       	push	r14
     5ac:	ff 92       	push	r15
     5ae:	0f 93       	push	r16
     5b0:	1f 93       	push	r17
     5b2:	cf 93       	push	r28
     5b4:	df 93       	push	r29
     5b6:	ec 01       	movw	r28, r24
	EventBits_t uxBits = xEventGroupWaitBits(_startMeasureEventGroup, //eventGroup
     5b8:	40 91 04 08 	lds	r20, 0x0804	; 0x800804 <_startMeasureBit>
     5bc:	50 91 05 08 	lds	r21, 0x0805	; 0x800805 <_startMeasureBit+0x1>
     5c0:	60 91 06 08 	lds	r22, 0x0806	; 0x800806 <_startMeasureBit+0x2>
     5c4:	70 91 07 08 	lds	r23, 0x0807	; 0x800807 <_startMeasureBit+0x3>
     5c8:	cc 24       	eor	r12, r12
     5ca:	ca 94       	dec	r12
     5cc:	dc 2c       	mov	r13, r12
     5ce:	76 01       	movw	r14, r12
     5d0:	01 e0       	ldi	r16, 0x01	; 1
     5d2:	21 e0       	ldi	r18, 0x01	; 1
     5d4:	80 91 08 08 	lds	r24, 0x0808	; 0x800808 <_startMeasureEventGroup>
     5d8:	90 91 09 08 	lds	r25, 0x0809	; 0x800809 <_startMeasureEventGroup+0x1>
     5dc:	8a d4       	rcall	.+2324   	; 0xef2 <xEventGroupWaitBits>
	_startMeasureBit, //bits it is interested in
	pdTRUE, //clears the bits
	pdTRUE, //waits for both bits to be set
	portMAX_DELAY); //wait

	if ((uxBits & (_startMeasureBit)) == (_startMeasureBit)) {
     5de:	00 91 04 08 	lds	r16, 0x0804	; 0x800804 <_startMeasureBit>
     5e2:	10 91 05 08 	lds	r17, 0x0805	; 0x800805 <_startMeasureBit+0x1>
     5e6:	20 91 06 08 	lds	r18, 0x0806	; 0x800806 <_startMeasureBit+0x2>
     5ea:	30 91 07 08 	lds	r19, 0x0807	; 0x800807 <_startMeasureBit+0x3>
     5ee:	dc 01       	movw	r26, r24
     5f0:	cb 01       	movw	r24, r22
     5f2:	80 23       	and	r24, r16
     5f4:	91 23       	and	r25, r17
     5f6:	a2 23       	and	r26, r18
     5f8:	b3 23       	and	r27, r19
     5fa:	08 17       	cp	r16, r24
     5fc:	19 07       	cpc	r17, r25
     5fe:	2a 07       	cpc	r18, r26
     600:	3b 07       	cpc	r19, r27
     602:	f1 f4       	brne	.+60     	; 0x640 <co2Reader_measure+0x9a>
		uint8_t no = self->value;
     604:	88 81       	ld	r24, Y
		no++;
		self->value = no;
     606:	8f 5f       	subi	r24, 0xFF	; 255
     608:	88 83       	st	Y, r24
		printf("co2 done bit set");
     60a:	82 e5       	ldi	r24, 0x52	; 82
     60c:	92 e0       	ldi	r25, 0x02	; 2
     60e:	9f 93       	push	r25
     610:	8f 93       	push	r24
     612:	0e 94 b7 2d 	call	0x5b6e	; 0x5b6e <printf>

		vTaskDelay(2500); //pretend it takes some time
     616:	64 ec       	ldi	r22, 0xC4	; 196
     618:	79 e0       	ldi	r23, 0x09	; 9
     61a:	80 e0       	ldi	r24, 0x00	; 0
     61c:	90 e0       	ldi	r25, 0x00	; 0
     61e:	0e 94 13 16 	call	0x2c26	; 0x2c26 <vTaskDelay>

		//set done bit so that device knows meassurement is done
		xEventGroupSetBits(_readyEventGroup, _readyBit);
     622:	40 91 fe 07 	lds	r20, 0x07FE	; 0x8007fe <__data_end>
     626:	50 91 ff 07 	lds	r21, 0x07FF	; 0x8007ff <__data_end+0x1>
     62a:	60 91 00 08 	lds	r22, 0x0800	; 0x800800 <__data_end+0x2>
     62e:	70 91 01 08 	lds	r23, 0x0801	; 0x800801 <__data_end+0x3>
     632:	80 91 02 08 	lds	r24, 0x0802	; 0x800802 <_readyEventGroup>
     636:	90 91 03 08 	lds	r25, 0x0803	; 0x800803 <_readyEventGroup+0x1>
     63a:	1b d5       	rcall	.+2614   	; 0x1072 <xEventGroupSetBits>
     63c:	0f 90       	pop	r0
     63e:	0f 90       	pop	r0
	}
}
     640:	df 91       	pop	r29
     642:	cf 91       	pop	r28
     644:	1f 91       	pop	r17
     646:	0f 91       	pop	r16
     648:	ff 90       	pop	r15
     64a:	ef 90       	pop	r14
     64c:	df 90       	pop	r13
     64e:	cf 90       	pop	r12
     650:	08 95       	ret

00000652 <co2Reader_executeTask>:
	//free(self->value);
	//free(self);
}

//actual task, methods devided so that it is possible to test
void co2Reader_executeTask(co2reader_t self) {
     652:	ec 01       	movw	r28, r24
	for (;;) {
		co2Reader_measure(self);
     654:	ce 01       	movw	r24, r28
     656:	a7 df       	rcall	.-178    	; 0x5a6 <co2Reader_measure>
     658:	fd cf       	rjmp	.-6      	; 0x654 <co2Reader_executeTask+0x2>

0000065a <co2Reader_getCO2>:
	}
}

uint8_t co2Reader_getCO2(co2reader_t self) {
	return self->value;
     65a:	fc 01       	movw	r30, r24
     65c:	80 81       	ld	r24, Z
     65e:	08 95       	ret

00000660 <configuration_create>:
	xSemaphoreTake(_semaphore, portMAX_DELAY);
		_working=value;
	xSemaphoreGive(_semaphore);
	}
	else _working=value;
}
     660:	81 e0       	ldi	r24, 0x01	; 1
     662:	80 93 0d 08 	sts	0x080D, r24	; 0x80080d <_working>
     666:	10 92 0c 08 	sts	0x080C, r1	; 0x80080c <_ventilation>
     66a:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <xQueueCreateMutex>
     66e:	90 93 0b 08 	sts	0x080B, r25	; 0x80080b <_semaphore+0x1>
     672:	80 93 0a 08 	sts	0x080A, r24	; 0x80080a <_semaphore>
     676:	08 95       	ret

00000678 <configuration_getWorking>:

bool configuration_getWorking(void) {
	if(_semaphore!=NULL){
     678:	80 91 0a 08 	lds	r24, 0x080A	; 0x80080a <_semaphore>
     67c:	90 91 0b 08 	lds	r25, 0x080B	; 0x80080b <_semaphore+0x1>
     680:	00 97       	sbiw	r24, 0x00	; 0
     682:	41 f0       	breq	.+16     	; 0x694 <configuration_getWorking+0x1c>
		xSemaphoreTake(_semaphore, portMAX_DELAY);
     684:	4f ef       	ldi	r20, 0xFF	; 255
     686:	5f ef       	ldi	r21, 0xFF	; 255
     688:	ba 01       	movw	r22, r20
     68a:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <xQueueSemaphoreTake>
			return _working;
     68e:	80 91 0d 08 	lds	r24, 0x080D	; 0x80080d <_working>
     692:	08 95       	ret
		xSemaphoreGive(_semaphore);
	}
	else return _working;
     694:	80 91 0d 08 	lds	r24, 0x080D	; 0x80080d <_working>
}
     698:	08 95       	ret

0000069a <currentCondition_create>:
	//free(self->co2Data);
	//free(self->temperatureData);
	//free(self->humidityData);
	//free(self->soundData);
	//free(self);
	vPortFree(self->humidityData);//maybe use this
     69a:	61 e0       	ldi	r22, 0x01	; 1
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	88 e0       	ldi	r24, 0x08	; 8
     6a0:	90 e0       	ldi	r25, 0x00	; 0
     6a2:	0e 94 19 2c 	call	0x5832	; 0x5832 <calloc>
     6a6:	00 97       	sbiw	r24, 0x00	; 0
     6a8:	39 f0       	breq	.+14     	; 0x6b8 <currentCondition_create+0x1e>
     6aa:	fc 01       	movw	r30, r24
     6ac:	13 82       	std	Z+3, r1	; 0x03
     6ae:	12 82       	std	Z+2, r1	; 0x02
     6b0:	15 82       	std	Z+5, r1	; 0x05
     6b2:	14 82       	std	Z+4, r1	; 0x04
     6b4:	11 82       	std	Z+1, r1	; 0x01
     6b6:	10 82       	st	Z, r1
     6b8:	08 95       	ret

000006ba <currentCondition_setCO2>:
     6ba:	00 97       	sbiw	r24, 0x00	; 0
     6bc:	19 f0       	breq	.+6      	; 0x6c4 <currentCondition_setCO2+0xa>
     6be:	fc 01       	movw	r30, r24
     6c0:	71 83       	std	Z+1, r23	; 0x01
     6c2:	60 83       	st	Z, r22
     6c4:	08 95       	ret

000006c6 <currentCondition_setHumidity>:
     6c6:	00 97       	sbiw	r24, 0x00	; 0
     6c8:	19 f0       	breq	.+6      	; 0x6d0 <currentCondition_setHumidity+0xa>
     6ca:	fc 01       	movw	r30, r24
     6cc:	75 83       	std	Z+5, r23	; 0x05
     6ce:	64 83       	std	Z+4, r22	; 0x04
     6d0:	08 95       	ret

000006d2 <currentCondition_setTemperature>:
     6d2:	00 97       	sbiw	r24, 0x00	; 0
     6d4:	19 f0       	breq	.+6      	; 0x6dc <currentCondition_setTemperature+0xa>
     6d6:	fc 01       	movw	r30, r24
     6d8:	73 83       	std	Z+3, r23	; 0x03
     6da:	62 83       	std	Z+2, r22	; 0x02
     6dc:	08 95       	ret

000006de <getcurrentConditionPayload>:
}
lora_payload_t getcurrentConditionPayload(currentCondition_t self)
{
     6de:	fc 01       	movw	r30, r24
     6e0:	db 01       	movw	r26, r22
	lora_payload_t payload;
	payload.port_no = 1;
	payload.len = 4;
	
	payload.bytes[0] = self->temperatureData >> 8;
     6e2:	12 96       	adiw	r26, 0x02	; 2
     6e4:	2c 91       	ld	r18, X
     6e6:	12 97       	sbiw	r26, 0x02	; 2
     6e8:	13 96       	adiw	r26, 0x03	; 3
     6ea:	3c 91       	ld	r19, X
     6ec:	13 97       	sbiw	r26, 0x03	; 3
	payload.bytes[1] = self->temperatureData & 0xFF;

	payload.bytes[2] = self->humidityData >> 8;
     6ee:	14 96       	adiw	r26, 0x04	; 4
     6f0:	8c 91       	ld	r24, X
     6f2:	14 97       	sbiw	r26, 0x04	; 4
     6f4:	15 96       	adiw	r26, 0x05	; 5
     6f6:	9c 91       	ld	r25, X
	payload.bytes[3] = self->humidityData & 0xFF;
	return payload;
     6f8:	41 e0       	ldi	r20, 0x01	; 1
     6fa:	40 83       	st	Z, r20
     6fc:	44 e0       	ldi	r20, 0x04	; 4
     6fe:	41 83       	std	Z+1, r20	; 0x01
     700:	32 83       	std	Z+2, r19	; 0x02
     702:	23 83       	std	Z+3, r18	; 0x03
     704:	94 83       	std	Z+4, r25	; 0x04
     706:	85 83       	std	Z+5, r24	; 0x05
	
     708:	cf 01       	movw	r24, r30
     70a:	08 95       	ret

0000070c <device_create>:
	//free(self);*/
//}

currentCondition_t device_getCurrentCondition(device_t self) {
	return self->currentCondition;
}
     70c:	2f 92       	push	r2
     70e:	3f 92       	push	r3
     710:	4f 92       	push	r4
     712:	5f 92       	push	r5
     714:	6f 92       	push	r6
     716:	7f 92       	push	r7
     718:	8f 92       	push	r8
     71a:	9f 92       	push	r9
     71c:	af 92       	push	r10
     71e:	bf 92       	push	r11
     720:	cf 92       	push	r12
     722:	df 92       	push	r13
     724:	ef 92       	push	r14
     726:	ff 92       	push	r15
     728:	0f 93       	push	r16
     72a:	1f 93       	push	r17
     72c:	cf 93       	push	r28
     72e:	df 93       	push	r29
     730:	00 d0       	rcall	.+0      	; 0x732 <device_create+0x26>
     732:	1f 92       	push	r1
     734:	cd b7       	in	r28, 0x3d	; 61
     736:	de b7       	in	r29, 0x3e	; 62
     738:	28 2e       	mov	r2, r24
     73a:	36 2e       	mov	r3, r22
     73c:	5c 83       	std	Y+4, r21	; 0x04
     73e:	4b 83       	std	Y+3, r20	; 0x03
     740:	28 01       	movw	r4, r16
     742:	39 01       	movw	r6, r18
     744:	61 e0       	ldi	r22, 0x01	; 1
     746:	70 e0       	ldi	r23, 0x00	; 0
     748:	88 e0       	ldi	r24, 0x08	; 8
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	0e 94 19 2c 	call	0x5832	; 0x5832 <calloc>
     750:	9a 83       	std	Y+2, r25	; 0x02
     752:	89 83       	std	Y+1, r24	; 0x01
     754:	00 97       	sbiw	r24, 0x00	; 0
     756:	09 f4       	brne	.+2      	; 0x75a <device_create+0x4e>
     758:	42 c0       	rjmp	.+132    	; 0x7de <device_create+0xd2>
     75a:	fc 01       	movw	r30, r24
     75c:	91 82       	std	Z+1, r9	; 0x01
     75e:	80 82       	st	Z, r8
     760:	8a 8d       	ldd	r24, Y+26	; 0x1a
     762:	9b 8d       	ldd	r25, Y+27	; 0x1b
     764:	93 83       	std	Z+3, r25	; 0x03
     766:	82 83       	std	Z+2, r24	; 0x02
     768:	98 df       	rcall	.-208    	; 0x69a <currentCondition_create>
     76a:	e9 81       	ldd	r30, Y+1	; 0x01
     76c:	fa 81       	ldd	r31, Y+2	; 0x02
     76e:	95 83       	std	Z+5, r25	; 0x05
     770:	84 83       	std	Z+4, r24	; 0x04
     772:	8b 81       	ldd	r24, Y+3	; 0x03
     774:	9c 81       	ldd	r25, Y+4	; 0x04
     776:	90 93 31 08 	sts	0x0831, r25	; 0x800831 <_startMeasureEventGroup+0x1>
     77a:	80 93 30 08 	sts	0x0830, r24	; 0x800830 <_startMeasureEventGroup>
     77e:	40 92 2c 08 	sts	0x082C, r4	; 0x80082c <_startMeasureBit>
     782:	50 92 2d 08 	sts	0x082D, r5	; 0x80082d <_startMeasureBit+0x1>
     786:	60 92 2e 08 	sts	0x082E, r6	; 0x80082e <_startMeasureBit+0x2>
     78a:	70 92 2f 08 	sts	0x082F, r7	; 0x80082f <_startMeasureBit+0x3>
     78e:	f0 92 2b 08 	sts	0x082B, r15	; 0x80082b <_readyEventGroup+0x1>
     792:	e0 92 2a 08 	sts	0x082A, r14	; 0x80082a <_readyEventGroup>
     796:	a0 92 26 08 	sts	0x0826, r10	; 0x800826 <_readyBit>
     79a:	b0 92 27 08 	sts	0x0827, r11	; 0x800827 <_readyBit+0x1>
     79e:	c0 92 28 08 	sts	0x0828, r12	; 0x800828 <_readyBit+0x2>
     7a2:	d0 92 29 08 	sts	0x0829, r13	; 0x800829 <_readyBit+0x3>
     7a6:	8c 8d       	ldd	r24, Y+28	; 0x1c
     7a8:	9d 8d       	ldd	r25, Y+29	; 0x1d
     7aa:	90 93 25 08 	sts	0x0825, r25	; 0x800825 <_uplinkmessageBuffer+0x1>
     7ae:	80 93 24 08 	sts	0x0824, r24	; 0x800824 <_uplinkmessageBuffer>
     7b2:	43 2d       	mov	r20, r3
     7b4:	50 e0       	ldi	r21, 0x00	; 0
     7b6:	7f 01       	movw	r14, r30
     7b8:	96 e0       	ldi	r25, 0x06	; 6
     7ba:	e9 0e       	add	r14, r25
     7bc:	f1 1c       	adc	r15, r1
     7be:	02 2d       	mov	r16, r2
     7c0:	9f 01       	movw	r18, r30
     7c2:	63 e6       	ldi	r22, 0x63	; 99
     7c4:	72 e0       	ldi	r23, 0x02	; 2
     7c6:	85 ef       	ldi	r24, 0xF5	; 245
     7c8:	94 e0       	ldi	r25, 0x04	; 4
     7ca:	0e 94 53 13 	call	0x26a6	; 0x26a6 <xTaskCreate>
     7ce:	8a e6       	ldi	r24, 0x6A	; 106
     7d0:	92 e0       	ldi	r25, 0x02	; 2
     7d2:	9f 93       	push	r25
     7d4:	8f 93       	push	r24
     7d6:	0e 94 b7 2d 	call	0x5b6e	; 0x5b6e <printf>
     7da:	0f 90       	pop	r0
     7dc:	0f 90       	pop	r0
     7de:	89 81       	ldd	r24, Y+1	; 0x01
     7e0:	9a 81       	ldd	r25, Y+2	; 0x02
     7e2:	0f 90       	pop	r0
     7e4:	0f 90       	pop	r0
     7e6:	0f 90       	pop	r0
     7e8:	0f 90       	pop	r0
     7ea:	df 91       	pop	r29
     7ec:	cf 91       	pop	r28
     7ee:	1f 91       	pop	r17
     7f0:	0f 91       	pop	r16
     7f2:	ff 90       	pop	r15
     7f4:	ef 90       	pop	r14
     7f6:	df 90       	pop	r13
     7f8:	cf 90       	pop	r12
     7fa:	bf 90       	pop	r11
     7fc:	af 90       	pop	r10
     7fe:	9f 90       	pop	r9
     800:	8f 90       	pop	r8
     802:	7f 90       	pop	r7
     804:	6f 90       	pop	r6
     806:	5f 90       	pop	r5
     808:	4f 90       	pop	r4
     80a:	3f 90       	pop	r3
     80c:	2f 90       	pop	r2
     80e:	08 95       	ret

00000810 <device_setHumidityToCurrent>:

void device_setHumidityToCurrent(device_t self, uint16_t value)
{
	currentCondition_setHumidity(self->currentCondition,value);
     810:	fc 01       	movw	r30, r24
     812:	84 81       	ldd	r24, Z+4	; 0x04
     814:	95 81       	ldd	r25, Z+5	; 0x05
     816:	57 cf       	rjmp	.-338    	; 0x6c6 <currentCondition_setHumidity>
     818:	08 95       	ret

0000081a <device_getHumidityData>:
}


uint16_t device_getHumidityData(device_t self)
{
	if (self->humAndTempReader!=NULL)
     81a:	fc 01       	movw	r30, r24
     81c:	82 81       	ldd	r24, Z+2	; 0x02
     81e:	93 81       	ldd	r25, Z+3	; 0x03
     820:	00 97       	sbiw	r24, 0x00	; 0
     822:	11 f0       	breq	.+4      	; 0x828 <device_getHumidityData+0xe>
	{
		return humAndTempReader_getHumidity(self->humAndTempReader);
     824:	d2 c1       	rjmp	.+932    	; 0xbca <humAndTempReader_getHumidity>
     826:	08 95       	ret
	}
	else
	return -1;
     828:	8f ef       	ldi	r24, 0xFF	; 255
     82a:	9f ef       	ldi	r25, 0xFF	; 255
}
     82c:	08 95       	ret

0000082e <device_setCO2ToCurrent>:

void device_setCO2ToCurrent(device_t self, uint16_t value) {
	currentCondition_setCO2(self->currentCondition, value);
     82e:	fc 01       	movw	r30, r24
     830:	84 81       	ldd	r24, Z+4	; 0x04
     832:	95 81       	ldd	r25, Z+5	; 0x05
     834:	42 cf       	rjmp	.-380    	; 0x6ba <currentCondition_setCO2>
     836:	08 95       	ret

00000838 <device_getCO2Data>:
}

uint16_t device_getCO2Data(device_t self) {
	if (self->co2reader != NULL)
     838:	fc 01       	movw	r30, r24
     83a:	80 81       	ld	r24, Z
     83c:	91 81       	ldd	r25, Z+1	; 0x01
     83e:	00 97       	sbiw	r24, 0x00	; 0
     840:	19 f0       	breq	.+6      	; 0x848 <device_getCO2Data+0x10>
		return co2Reader_getCO2(self->co2reader);
     842:	0b df       	rcall	.-490    	; 0x65a <co2Reader_getCO2>
     844:	90 e0       	ldi	r25, 0x00	; 0
     846:	08 95       	ret
	else return -1;
     848:	8f ef       	ldi	r24, 0xFF	; 255
     84a:	9f ef       	ldi	r25, 0xFF	; 255
}
     84c:	08 95       	ret

0000084e <device_setTemperatureToCurrent>:

void device_setTemperatureToCurrent(device_t self, int16_t value)
{
	
	currentCondition_setTemperature(self->currentCondition,value);
     84e:	fc 01       	movw	r30, r24
     850:	84 81       	ldd	r24, Z+4	; 0x04
     852:	95 81       	ldd	r25, Z+5	; 0x05
     854:	3e cf       	rjmp	.-388    	; 0x6d2 <currentCondition_setTemperature>
     856:	08 95       	ret

00000858 <device_getTemperatureData>:
}


int16_t device_getTemperatureData(device_t self)
{
	if (self->humAndTempReader!=NULL)
     858:	fc 01       	movw	r30, r24
     85a:	82 81       	ldd	r24, Z+2	; 0x02
     85c:	93 81       	ldd	r25, Z+3	; 0x03
     85e:	00 97       	sbiw	r24, 0x00	; 0
     860:	11 f0       	breq	.+4      	; 0x866 <device_getTemperatureData+0xe>
	{
		return humAndTempReader_getTemperature(self->humAndTempReader);
     862:	b7 c1       	rjmp	.+878    	; 0xbd2 <humAndTempReader_getTemperature>
     864:	08 95       	ret
	}
	else
	return -1;
     866:	8f ef       	ldi	r24, 0xFF	; 255
     868:	9f ef       	ldi	r25, 0xFF	; 255
	
     86a:	08 95       	ret

0000086c <device_startMeasuring>:
void device_executeTask(device_t self) {
	for (;;)
		device_startMeasuring(self);
}

void device_startMeasuring(device_t self) {
     86c:	af 92       	push	r10
     86e:	bf 92       	push	r11
     870:	cf 92       	push	r12
     872:	df 92       	push	r13
     874:	ef 92       	push	r14
     876:	ff 92       	push	r15
     878:	0f 93       	push	r16
     87a:	1f 93       	push	r17
     87c:	cf 93       	push	r28
     87e:	df 93       	push	r29
     880:	cd b7       	in	r28, 0x3d	; 61
     882:	de b7       	in	r29, 0x3e	; 62
     884:	66 97       	sbiw	r28, 0x16	; 22
     886:	0f b6       	in	r0, 0x3f	; 63
     888:	f8 94       	cli
     88a:	de bf       	out	0x3e, r29	; 62
     88c:	0f be       	out	0x3f, r0	; 63
     88e:	cd bf       	out	0x3d, r28	; 61
     890:	5c 01       	movw	r10, r24
	//we should first check if device is on, get that from lora and add new eventBit 
	if(configuration_getWorking()==true){
     892:	f2 de       	rcall	.-540    	; 0x678 <configuration_getWorking>
     894:	01 97       	sbiw	r24, 0x01	; 1
     896:	09 f0       	breq	.+2      	; 0x89a <device_startMeasuring+0x2e>
     898:	97 c0       	rjmp	.+302    	; 0x9c8 <device_startMeasuring+0x15c>

	//if ventilation needed -> ventilate 

	//tell sensors to start meassuring 
	xEventGroupSetBits(_startMeasureEventGroup, _startMeasureBit);
     89a:	40 91 2c 08 	lds	r20, 0x082C	; 0x80082c <_startMeasureBit>
     89e:	50 91 2d 08 	lds	r21, 0x082D	; 0x80082d <_startMeasureBit+0x1>
     8a2:	60 91 2e 08 	lds	r22, 0x082E	; 0x80082e <_startMeasureBit+0x2>
     8a6:	70 91 2f 08 	lds	r23, 0x082F	; 0x80082f <_startMeasureBit+0x3>
     8aa:	80 91 30 08 	lds	r24, 0x0830	; 0x800830 <_startMeasureEventGroup>
     8ae:	90 91 31 08 	lds	r25, 0x0831	; 0x800831 <_startMeasureEventGroup+0x1>
     8b2:	df d3       	rcall	.+1982   	; 0x1072 <xEventGroupSetBits>
	printf("device has set bits");
     8b4:	84 e7       	ldi	r24, 0x74	; 116
     8b6:	92 e0       	ldi	r25, 0x02	; 2
     8b8:	9f 93       	push	r25
     8ba:	8f 93       	push	r24
     8bc:	0e 94 b7 2d 	call	0x5b6e	; 0x5b6e <printf>

	//wait for sensors to read data
	EventBits_t uxBits = xEventGroupWaitBits(_readyEventGroup, //eventGroup it is interested in
     8c0:	40 91 26 08 	lds	r20, 0x0826	; 0x800826 <_readyBit>
     8c4:	50 91 27 08 	lds	r21, 0x0827	; 0x800827 <_readyBit+0x1>
     8c8:	60 91 28 08 	lds	r22, 0x0828	; 0x800828 <_readyBit+0x2>
     8cc:	70 91 29 08 	lds	r23, 0x0829	; 0x800829 <_readyBit+0x3>
     8d0:	cc 24       	eor	r12, r12
     8d2:	ca 94       	dec	r12
     8d4:	dc 2c       	mov	r13, r12
     8d6:	76 01       	movw	r14, r12
     8d8:	01 e0       	ldi	r16, 0x01	; 1
     8da:	21 e0       	ldi	r18, 0x01	; 1
     8dc:	80 91 2a 08 	lds	r24, 0x082A	; 0x80082a <_readyEventGroup>
     8e0:	90 91 2b 08 	lds	r25, 0x082B	; 0x80082b <_readyEventGroup+0x1>
     8e4:	06 d3       	rcall	.+1548   	; 0xef2 <xEventGroupWaitBits>
		_readyBit, //bits it is interested in
		pdTRUE, //clears the bits 
		pdTRUE, //waits for both bits to be set
		portMAX_DELAY); //waits forever if needed

	if ((uxBits & (_readyBit)) == (_readyBit)) {
     8e6:	00 91 26 08 	lds	r16, 0x0826	; 0x800826 <_readyBit>
     8ea:	10 91 27 08 	lds	r17, 0x0827	; 0x800827 <_readyBit+0x1>
     8ee:	20 91 28 08 	lds	r18, 0x0828	; 0x800828 <_readyBit+0x2>
     8f2:	30 91 29 08 	lds	r19, 0x0829	; 0x800829 <_readyBit+0x3>
     8f6:	dc 01       	movw	r26, r24
     8f8:	cb 01       	movw	r24, r22
     8fa:	80 23       	and	r24, r16
     8fc:	91 23       	and	r25, r17
     8fe:	a2 23       	and	r26, r18
     900:	b3 23       	and	r27, r19
     902:	0f 90       	pop	r0
     904:	0f 90       	pop	r0
     906:	08 17       	cp	r16, r24
     908:	19 07       	cpc	r17, r25
     90a:	2a 07       	cpc	r18, r26
     90c:	3b 07       	cpc	r19, r27
     90e:	09 f0       	breq	.+2      	; 0x912 <device_startMeasuring+0xa6>
		device_setCO2ToCurrent(self, device_getCO2Data(self));
     910:	55 c0       	rjmp	.+170    	; 0x9bc <device_startMeasuring+0x150>
     912:	c5 01       	movw	r24, r10
     914:	91 df       	rcall	.-222    	; 0x838 <device_getCO2Data>
     916:	bc 01       	movw	r22, r24
     918:	c5 01       	movw	r24, r10
		device_setTemperatureToCurrent(self, device_getTemperatureData(self));
     91a:	89 df       	rcall	.-238    	; 0x82e <device_setCO2ToCurrent>
     91c:	c5 01       	movw	r24, r10
     91e:	9c df       	rcall	.-200    	; 0x858 <device_getTemperatureData>
     920:	bc 01       	movw	r22, r24
     922:	c5 01       	movw	r24, r10
		device_setHumidityToCurrent(self, device_getHumidityData(self));
     924:	94 df       	rcall	.-216    	; 0x84e <device_setTemperatureToCurrent>
     926:	c5 01       	movw	r24, r10
     928:	78 df       	rcall	.-272    	; 0x81a <device_getHumidityData>
     92a:	bc 01       	movw	r22, r24
     92c:	c5 01       	movw	r24, r10
     92e:	70 df       	rcall	.-288    	; 0x810 <device_setHumidityToCurrent>
		
		printf("device got done bit\n");
     930:	88 e8       	ldi	r24, 0x88	; 136
     932:	92 e0       	ldi	r25, 0x02	; 2
     934:	0e 94 ca 2d 	call	0x5b94	; 0x5b94 <puts>
		
		printf("CO2 is: %u\n", co2Reader_getCO2(self->co2reader));
     938:	f5 01       	movw	r30, r10
     93a:	80 81       	ld	r24, Z
     93c:	91 81       	ldd	r25, Z+1	; 0x01
     93e:	8d de       	rcall	.-742    	; 0x65a <co2Reader_getCO2>
     940:	1f 92       	push	r1
     942:	8f 93       	push	r24
     944:	8c e9       	ldi	r24, 0x9C	; 156
     946:	92 e0       	ldi	r25, 0x02	; 2
     948:	9f 93       	push	r25
     94a:	8f 93       	push	r24
     94c:	0e 94 b7 2d 	call	0x5b6e	; 0x5b6e <printf>
		printf("Temperature is: %d\n", device_getTemperatureData(self));
     950:	c5 01       	movw	r24, r10
     952:	82 df       	rcall	.-252    	; 0x858 <device_getTemperatureData>
     954:	9f 93       	push	r25
     956:	8f 93       	push	r24
     958:	88 ea       	ldi	r24, 0xA8	; 168
     95a:	92 e0       	ldi	r25, 0x02	; 2
     95c:	9f 93       	push	r25
     95e:	8f 93       	push	r24
     960:	0e 94 b7 2d 	call	0x5b6e	; 0x5b6e <printf>
		printf("Humidity is: %u\n", device_getHumidityData(self));
     964:	c5 01       	movw	r24, r10
     966:	59 df       	rcall	.-334    	; 0x81a <device_getHumidityData>
     968:	9f 93       	push	r25
     96a:	8f 93       	push	r24
     96c:	8c eb       	ldi	r24, 0xBC	; 188
     96e:	92 e0       	ldi	r25, 0x02	; 2
     970:	9f 93       	push	r25
     972:	8f 93       	push	r24
     974:	0e 94 b7 2d 	call	0x5b6e	; 0x5b6e <printf>
		
		/*Perhaps loraPayload is not a good idea to be here*/
		_uplink_payload = getcurrentConditionPayload(self->currentCondition);
     978:	f5 01       	movw	r30, r10
     97a:	64 81       	ldd	r22, Z+4	; 0x04
     97c:	75 81       	ldd	r23, Z+5	; 0x05
     97e:	ce 01       	movw	r24, r28
     980:	01 96       	adiw	r24, 0x01	; 1
     982:	ad de       	rcall	.-678    	; 0x6de <getcurrentConditionPayload>
     984:	86 e1       	ldi	r24, 0x16	; 22
     986:	fe 01       	movw	r30, r28
     988:	31 96       	adiw	r30, 0x01	; 1
     98a:	ae e0       	ldi	r26, 0x0E	; 14
     98c:	b8 e0       	ldi	r27, 0x08	; 8
     98e:	01 90       	ld	r0, Z+
     990:	0d 92       	st	X+, r0
     992:	8a 95       	dec	r24
     994:	e1 f7       	brne	.-8      	; 0x98e <device_startMeasuring+0x122>
     996:	0f ef       	ldi	r16, 0xFF	; 255
			//printf("The temperature in device is: %d\n", _uplink_payload.bytes[0]);
			//printf("The temperature2 in device is: %d\n", _uplink_payload.bytes[1]);
			//printf("The humidity in device is: %u\n", _uplink_payload.bytes[2]);
			//printf("The humidity2 in device is: %u\n", _uplink_payload.bytes[3]);
			
			xMessageBufferSend(_uplinkmessageBuffer,(void*) &_uplink_payload,sizeof(_uplink_payload),portMAX_DELAY);
     998:	1f ef       	ldi	r17, 0xFF	; 255
     99a:	98 01       	movw	r18, r16
     99c:	46 e1       	ldi	r20, 0x16	; 22
     99e:	50 e0       	ldi	r21, 0x00	; 0
     9a0:	6e e0       	ldi	r22, 0x0E	; 14
     9a2:	78 e0       	ldi	r23, 0x08	; 8
     9a4:	80 91 24 08 	lds	r24, 0x0824	; 0x800824 <_uplinkmessageBuffer>
     9a8:	90 91 25 08 	lds	r25, 0x0825	; 0x800825 <_uplinkmessageBuffer+0x1>
     9ac:	0e 94 23 11 	call	0x2246	; 0x2246 <xStreamBufferSend>
     9b0:	0f b6       	in	r0, 0x3f	; 63
     9b2:	f8 94       	cli
     9b4:	de bf       	out	0x3e, r29	; 62
     9b6:	0f be       	out	0x3f, r0	; 63
     9b8:	cd bf       	out	0x3d, r28	; 61
     9ba:	06 c0       	rjmp	.+12     	; 0x9c8 <device_startMeasuring+0x15c>
     9bc:	68 e8       	ldi	r22, 0x88	; 136
		//}
		//else printf("Error when making loraPayload");
		}
		//if the device is not on, wait a bit and check if anything is changed
		else vTaskDelay(5000);
     9be:	73 e1       	ldi	r23, 0x13	; 19
     9c0:	80 e0       	ldi	r24, 0x00	; 0
     9c2:	90 e0       	ldi	r25, 0x00	; 0
     9c4:	0e 94 13 16 	call	0x2c26	; 0x2c26 <vTaskDelay>
     9c8:	66 96       	adiw	r28, 0x16	; 22
		
	}
}
     9ca:	0f b6       	in	r0, 0x3f	; 63
     9cc:	f8 94       	cli
     9ce:	de bf       	out	0x3e, r29	; 62
     9d0:	0f be       	out	0x3f, r0	; 63
     9d2:	cd bf       	out	0x3d, r28	; 61
     9d4:	df 91       	pop	r29
     9d6:	cf 91       	pop	r28
     9d8:	1f 91       	pop	r17
     9da:	0f 91       	pop	r16
     9dc:	ff 90       	pop	r15
     9de:	ef 90       	pop	r14
     9e0:	df 90       	pop	r13
     9e2:	cf 90       	pop	r12
     9e4:	bf 90       	pop	r11
     9e6:	af 90       	pop	r10
     9e8:	08 95       	ret

000009ea <device_executeTask>:
     9ea:	ec 01       	movw	r28, r24
}

//devided so we can test
void device_executeTask(device_t self) {
	for (;;)
		device_startMeasuring(self);
     9ec:	ce 01       	movw	r24, r28
     9ee:	3e df       	rcall	.-388    	; 0x86c <device_startMeasuring>
     9f0:	fd cf       	rjmp	.-6      	; 0x9ec <device_executeTask+0x2>

000009f2 <humAndTempReader_create>:
void humAndTempReader_destroy(humAndTempReader_t self) {
	if (self == NULL)
	return;

	//delete will clear the allocated memory to the task + we need to remove everything else
	vTaskDelete(self->handleTask);
     9f2:	2f 92       	push	r2
     9f4:	3f 92       	push	r3
     9f6:	4f 92       	push	r4
     9f8:	5f 92       	push	r5
     9fa:	6f 92       	push	r6
     9fc:	7f 92       	push	r7
     9fe:	8f 92       	push	r8
     a00:	9f 92       	push	r9
     a02:	af 92       	push	r10
     a04:	bf 92       	push	r11
     a06:	cf 92       	push	r12
     a08:	df 92       	push	r13
     a0a:	ef 92       	push	r14
     a0c:	ff 92       	push	r15
     a0e:	0f 93       	push	r16
     a10:	1f 93       	push	r17
     a12:	cf 93       	push	r28
     a14:	df 93       	push	r29
     a16:	88 2e       	mov	r8, r24
     a18:	96 2e       	mov	r9, r22
     a1a:	1a 01       	movw	r2, r20
     a1c:	28 01       	movw	r4, r16
     a1e:	39 01       	movw	r6, r18
     a20:	61 e0       	ldi	r22, 0x01	; 1
     a22:	70 e0       	ldi	r23, 0x00	; 0
     a24:	86 e0       	ldi	r24, 0x06	; 6
     a26:	90 e0       	ldi	r25, 0x00	; 0
     a28:	0e 94 19 2c 	call	0x5832	; 0x5832 <calloc>
     a2c:	ec 01       	movw	r28, r24
     a2e:	00 97       	sbiw	r24, 0x00	; 0
     a30:	91 f1       	breq	.+100    	; 0xa96 <humAndTempReader_create+0xa4>
     a32:	19 82       	std	Y+1, r1	; 0x01
     a34:	18 82       	st	Y, r1
     a36:	1b 82       	std	Y+3, r1	; 0x03
     a38:	1a 82       	std	Y+2, r1	; 0x02
     a3a:	30 92 3d 08 	sts	0x083D, r3	; 0x80083d <_startMeasureEventGroup+0x1>
     a3e:	20 92 3c 08 	sts	0x083C, r2	; 0x80083c <_startMeasureEventGroup>
     a42:	40 92 38 08 	sts	0x0838, r4	; 0x800838 <_startMeasureBit>
     a46:	50 92 39 08 	sts	0x0839, r5	; 0x800839 <_startMeasureBit+0x1>
     a4a:	60 92 3a 08 	sts	0x083A, r6	; 0x80083a <_startMeasureBit+0x2>
     a4e:	70 92 3b 08 	sts	0x083B, r7	; 0x80083b <_startMeasureBit+0x3>
     a52:	f0 92 37 08 	sts	0x0837, r15	; 0x800837 <_readyEventGroup+0x1>
     a56:	e0 92 36 08 	sts	0x0836, r14	; 0x800836 <_readyEventGroup>
     a5a:	a0 92 32 08 	sts	0x0832, r10	; 0x800832 <_readyBit>
     a5e:	b0 92 33 08 	sts	0x0833, r11	; 0x800833 <_readyBit+0x1>
     a62:	c0 92 34 08 	sts	0x0834, r12	; 0x800834 <_readyBit+0x2>
     a66:	d0 92 35 08 	sts	0x0835, r13	; 0x800835 <_readyBit+0x3>
     a6a:	49 2d       	mov	r20, r9
     a6c:	50 e0       	ldi	r21, 0x00	; 0
     a6e:	7c 01       	movw	r14, r24
     a70:	84 e0       	ldi	r24, 0x04	; 4
     a72:	e8 0e       	add	r14, r24
     a74:	f1 1c       	adc	r15, r1
     a76:	08 2d       	mov	r16, r8
     a78:	9e 01       	movw	r18, r28
     a7a:	6d ec       	ldi	r22, 0xCD	; 205
     a7c:	72 e0       	ldi	r23, 0x02	; 2
     a7e:	81 ee       	ldi	r24, 0xE1	; 225
     a80:	95 e0       	ldi	r25, 0x05	; 5
     a82:	0e 94 53 13 	call	0x26a6	; 0x26a6 <xTaskCreate>
     a86:	8e ed       	ldi	r24, 0xDE	; 222
     a88:	92 e0       	ldi	r25, 0x02	; 2
     a8a:	9f 93       	push	r25
     a8c:	8f 93       	push	r24
     a8e:	0e 94 b7 2d 	call	0x5b6e	; 0x5b6e <printf>
     a92:	0f 90       	pop	r0
     a94:	0f 90       	pop	r0
     a96:	ce 01       	movw	r24, r28
     a98:	df 91       	pop	r29
     a9a:	cf 91       	pop	r28
     a9c:	1f 91       	pop	r17
     a9e:	0f 91       	pop	r16
     aa0:	ff 90       	pop	r15
     aa2:	ef 90       	pop	r14
     aa4:	df 90       	pop	r13
     aa6:	cf 90       	pop	r12
     aa8:	bf 90       	pop	r11
     aaa:	af 90       	pop	r10
     aac:	9f 90       	pop	r9
     aae:	8f 90       	pop	r8
     ab0:	7f 90       	pop	r7
     ab2:	6f 90       	pop	r6
     ab4:	5f 90       	pop	r5
     ab6:	4f 90       	pop	r4
     ab8:	3f 90       	pop	r3
     aba:	2f 90       	pop	r2
     abc:	08 95       	ret

00000abe <humAndTempReader_measure>:
	for (;;) {
		humAndTempReader_measure(self);
	}
}

void humAndTempReader_measure(humAndTempReader_t self) {//dummy
     abe:	cf 92       	push	r12
     ac0:	df 92       	push	r13
     ac2:	ef 92       	push	r14
     ac4:	ff 92       	push	r15
     ac6:	0f 93       	push	r16
     ac8:	1f 93       	push	r17
     aca:	cf 93       	push	r28
     acc:	df 93       	push	r29
     ace:	ec 01       	movw	r28, r24
	EventBits_t uxBits = xEventGroupWaitBits(_startMeasureEventGroup, //eventGroup
     ad0:	40 91 38 08 	lds	r20, 0x0838	; 0x800838 <_startMeasureBit>
     ad4:	50 91 39 08 	lds	r21, 0x0839	; 0x800839 <_startMeasureBit+0x1>
     ad8:	60 91 3a 08 	lds	r22, 0x083A	; 0x80083a <_startMeasureBit+0x2>
     adc:	70 91 3b 08 	lds	r23, 0x083B	; 0x80083b <_startMeasureBit+0x3>
     ae0:	cc 24       	eor	r12, r12
     ae2:	ca 94       	dec	r12
     ae4:	dc 2c       	mov	r13, r12
     ae6:	76 01       	movw	r14, r12
     ae8:	01 e0       	ldi	r16, 0x01	; 1
     aea:	21 e0       	ldi	r18, 0x01	; 1
     aec:	80 91 3c 08 	lds	r24, 0x083C	; 0x80083c <_startMeasureEventGroup>
     af0:	90 91 3d 08 	lds	r25, 0x083D	; 0x80083d <_startMeasureEventGroup+0x1>
     af4:	fe d1       	rcall	.+1020   	; 0xef2 <xEventGroupWaitBits>
	_startMeasureBit, //bits it is interested i
	pdTRUE, //clears the bits
	pdTRUE, //waits for both bits to be set
	portMAX_DELAY); //wait

	if ((uxBits & (_startMeasureBit)) == (_startMeasureBit)) {
     af6:	00 91 38 08 	lds	r16, 0x0838	; 0x800838 <_startMeasureBit>
     afa:	10 91 39 08 	lds	r17, 0x0839	; 0x800839 <_startMeasureBit+0x1>
     afe:	20 91 3a 08 	lds	r18, 0x083A	; 0x80083a <_startMeasureBit+0x2>
     b02:	30 91 3b 08 	lds	r19, 0x083B	; 0x80083b <_startMeasureBit+0x3>
     b06:	dc 01       	movw	r26, r24
     b08:	cb 01       	movw	r24, r22
     b0a:	80 23       	and	r24, r16
     b0c:	91 23       	and	r25, r17
     b0e:	a2 23       	and	r26, r18
     b10:	b3 23       	and	r27, r19
     b12:	08 17       	cp	r16, r24
     b14:	19 07       	cpc	r17, r25
     b16:	2a 07       	cpc	r18, r26
     b18:	3b 07       	cpc	r19, r27
     b1a:	09 f0       	breq	.+2      	; 0xb1e <humAndTempReader_measure+0x60>
     b1c:	49 c0       	rjmp	.+146    	; 0xbb0 <humAndTempReader_measure+0xf2>
		hih8120Wakeup();
     b1e:	0e 94 a0 1d 	call	0x3b40	; 0x3b40 <hih8120Wakeup>
		vTaskDelay(50);
     b22:	62 e3       	ldi	r22, 0x32	; 50
     b24:	70 e0       	ldi	r23, 0x00	; 0
     b26:	80 e0       	ldi	r24, 0x00	; 0
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	0e 94 13 16 	call	0x2c26	; 0x2c26 <vTaskDelay>
		hih8120Meassure();
     b2e:	0e 94 b5 1d 	call	0x3b6a	; 0x3b6a <hih8120Meassure>
		vTaskDelay(5);
     b32:	65 e0       	ldi	r22, 0x05	; 5
     b34:	70 e0       	ldi	r23, 0x00	; 0
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	0e 94 13 16 	call	0x2c26	; 0x2c26 <vTaskDelay>
		if(hih8120IsReady())
     b3e:	0e 94 9d 1d 	call	0x3b3a	; 0x3b3a <hih8120IsReady>
     b42:	88 23       	and	r24, r24
     b44:	41 f1       	breq	.+80     	; 0xb96 <humAndTempReader_measure+0xd8>
		{
			self->humidity = hih8120GetHumidityPercent_x10();
     b46:	0e 94 db 1d 	call	0x3bb6	; 0x3bb6 <hih8120GetHumidityPercent_x10>
     b4a:	99 83       	std	Y+1, r25	; 0x01
     b4c:	88 83       	st	Y, r24
			self->temperature = hih8120GetTemperature_x10();
     b4e:	0e 94 01 1e 	call	0x3c02	; 0x3c02 <hih8120GetTemperature_x10>
     b52:	9b 83       	std	Y+3, r25	; 0x03
     b54:	8a 83       	std	Y+2, r24	; 0x02
			printf("humidity and temperature done bit set\n");
     b56:	8d ef       	ldi	r24, 0xFD	; 253
     b58:	92 e0       	ldi	r25, 0x02	; 2
     b5a:	0e 94 ca 2d 	call	0x5b94	; 0x5b94 <puts>
			printf("Humidity: %u\n", self->humidity);
     b5e:	89 81       	ldd	r24, Y+1	; 0x01
     b60:	8f 93       	push	r24
     b62:	88 81       	ld	r24, Y
     b64:	8f 93       	push	r24
     b66:	83 e2       	ldi	r24, 0x23	; 35
     b68:	93 e0       	ldi	r25, 0x03	; 3
     b6a:	9f 93       	push	r25
     b6c:	8f 93       	push	r24
     b6e:	0e 94 b7 2d 	call	0x5b6e	; 0x5b6e <printf>
			printf("TEMP: %d\n", self->temperature);
     b72:	8b 81       	ldd	r24, Y+3	; 0x03
     b74:	8f 93       	push	r24
     b76:	8a 81       	ldd	r24, Y+2	; 0x02
     b78:	8f 93       	push	r24
     b7a:	81 e3       	ldi	r24, 0x31	; 49
     b7c:	93 e0       	ldi	r25, 0x03	; 3
     b7e:	9f 93       	push	r25
     b80:	8f 93       	push	r24
     b82:	0e 94 b7 2d 	call	0x5b6e	; 0x5b6e <printf>
     b86:	8d b7       	in	r24, 0x3d	; 61
     b88:	9e b7       	in	r25, 0x3e	; 62
     b8a:	08 96       	adiw	r24, 0x08	; 8
     b8c:	0f b6       	in	r0, 0x3f	; 63
     b8e:	f8 94       	cli
     b90:	9e bf       	out	0x3e, r25	; 62
     b92:	0f be       	out	0x3f, r0	; 63
     b94:	8d bf       	out	0x3d, r24	; 61
		}
		//set done bit so that device knows meassurement is done
		xEventGroupSetBits(_readyEventGroup, _readyBit);
     b96:	40 91 32 08 	lds	r20, 0x0832	; 0x800832 <_readyBit>
     b9a:	50 91 33 08 	lds	r21, 0x0833	; 0x800833 <_readyBit+0x1>
     b9e:	60 91 34 08 	lds	r22, 0x0834	; 0x800834 <_readyBit+0x2>
     ba2:	70 91 35 08 	lds	r23, 0x0835	; 0x800835 <_readyBit+0x3>
     ba6:	80 91 36 08 	lds	r24, 0x0836	; 0x800836 <_readyEventGroup>
     baa:	90 91 37 08 	lds	r25, 0x0837	; 0x800837 <_readyEventGroup+0x1>
     bae:	61 d2       	rcall	.+1218   	; 0x1072 <xEventGroupSetBits>
	}
}
     bb0:	df 91       	pop	r29
     bb2:	cf 91       	pop	r28
     bb4:	1f 91       	pop	r17
     bb6:	0f 91       	pop	r16
     bb8:	ff 90       	pop	r15
     bba:	ef 90       	pop	r14
     bbc:	df 90       	pop	r13
     bbe:	cf 90       	pop	r12
     bc0:	08 95       	ret

00000bc2 <humAndTempReader_executeTask>:
	//free(self->temperature);
	//free(self);
}

//actual task, methods devided so that it is possible to test
void humAndTempReader_executeTask(humAndTempReader_t self) {
     bc2:	ec 01       	movw	r28, r24
	for (;;) {
		humAndTempReader_measure(self);
     bc4:	ce 01       	movw	r24, r28
     bc6:	7b df       	rcall	.-266    	; 0xabe <humAndTempReader_measure>
     bc8:	fd cf       	rjmp	.-6      	; 0xbc4 <humAndTempReader_executeTask+0x2>

00000bca <humAndTempReader_getHumidity>:
	}
}

uint16_t humAndTempReader_getHumidity(humAndTempReader_t self){
	return self->humidity;
}
     bca:	fc 01       	movw	r30, r24
     bcc:	80 81       	ld	r24, Z
     bce:	91 81       	ldd	r25, Z+1	; 0x01
     bd0:	08 95       	ret

00000bd2 <humAndTempReader_getTemperature>:

int16_t humAndTempReader_getTemperature(humAndTempReader_t self){
	return self->temperature;
}
     bd2:	fc 01       	movw	r30, r24
     bd4:	82 81       	ldd	r24, Z+2	; 0x02
     bd6:	93 81       	ldd	r25, Z+3	; 0x03
     bd8:	08 95       	ret

00000bda <lora_UpLinkHandler_create>:
/*Check for the parameters*/



void lora_UpLinkHandler_create(UBaseType_t lora_handler_task_priority, MessageBufferHandle_t xMessageBuffer)
{
     bda:	ef 92       	push	r14
     bdc:	ff 92       	push	r15
     bde:	0f 93       	push	r16
     be0:	9b 01       	movw	r18, r22
	_buffer = xMessageBuffer;
	
	
	
	xTaskCreate(
     be2:	e1 2c       	mov	r14, r1
     be4:	f1 2c       	mov	r15, r1
     be6:	08 2f       	mov	r16, r24
     be8:	48 e8       	ldi	r20, 0x88	; 136
     bea:	51 e0       	ldi	r21, 0x01	; 1
     bec:	6b e3       	ldi	r22, 0x3B	; 59
     bee:	73 e0       	ldi	r23, 0x03	; 3
     bf0:	86 e4       	ldi	r24, 0x46	; 70
     bf2:	97 e0       	ldi	r25, 0x07	; 7
     bf4:	0e 94 53 13 	call	0x26a6	; 0x26a6 <xTaskCreate>
	,  (const portCHAR *)"LRUpHand"  // A name just for humans
	,  configMINIMAL_STACK_SIZE+200  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  xMessageBuffer
	,  lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}
     bf8:	0f 91       	pop	r16
     bfa:	ff 90       	pop	r15
     bfc:	ef 90       	pop	r14
     bfe:	08 95       	ret

00000c00 <lora_UpLinkHandler_task>:
	
	/*Receives message from message buffer shared between it and the application responsible for gathering the data
	--> Should be called every 5 minutes from application
	*/
	void lora_UpLinkHandler_task(MessageBufferHandle_t xMessageBuffer)
	{	
     c00:	df 92       	push	r13
     c02:	ef 92       	push	r14
     c04:	ff 92       	push	r15
     c06:	0f 93       	push	r16
     c08:	1f 93       	push	r17
     c0a:	cf 93       	push	r28
     c0c:	df 93       	push	r29
     c0e:	7c 01       	movw	r14, r24
		size_t xBytesToSend;
		char rxData[50];
		if (!isSet)
     c10:	80 91 3e 08 	lds	r24, 0x083E	; 0x80083e <isSet>
     c14:	81 11       	cpse	r24, r1
     c16:	d0 c0       	rjmp	.+416    	; 0xdb8 <lora_UpLinkHandler_task+0x1b8>
		{
			// Hardware reset of LoRaWAN transceiver
			lora_driver_reset_rn2483(1);
     c18:	81 e0       	ldi	r24, 0x01	; 1
     c1a:	0e 94 21 21 	call	0x4242	; 0x4242 <lora_driver_reset_rn2483>
			vTaskDelay(2);
     c1e:	62 e0       	ldi	r22, 0x02	; 2
     c20:	70 e0       	ldi	r23, 0x00	; 0
     c22:	80 e0       	ldi	r24, 0x00	; 0
     c24:	90 e0       	ldi	r25, 0x00	; 0
     c26:	0e 94 13 16 	call	0x2c26	; 0x2c26 <vTaskDelay>
			lora_driver_reset_rn2483(0);
     c2a:	80 e0       	ldi	r24, 0x00	; 0
     c2c:	0e 94 21 21 	call	0x4242	; 0x4242 <lora_driver_reset_rn2483>
			// Give it a chance to wakeup
			vTaskDelay(150);
     c30:	66 e9       	ldi	r22, 0x96	; 150
     c32:	70 e0       	ldi	r23, 0x00	; 0
     c34:	80 e0       	ldi	r24, 0x00	; 0
     c36:	90 e0       	ldi	r25, 0x00	; 0
     c38:	0e 94 13 16 	call	0x2c26	; 0x2c26 <vTaskDelay>

			lora_driver_flush_buffers(); // get rid of first version string from module after reset!
     c3c:	0e 94 d7 20 	call	0x41ae	; 0x41ae <lora_driver_flush_buffers>


static void _lora_setup(void)
{
	e_LoRa_return_code_t rc;
	led_slow_blink(led_ST2); // OPTIONAL: Led the green led blink slowly while we are setting up LoRa
     c40:	81 e0       	ldi	r24, 0x01	; 1
     c42:	0e 94 2f 1f 	call	0x3e5e	; 0x3e5e <led_slow_blink>
	//The below code is required to be executed only once due to the fact that these MAC settings
	// can be stored inside of the tranciever
	//START ON ONE TIME USE CODE

	// Factory reset the transceiver
	printf("FactoryReset >%s<\n", lora_driver_map_return_code_to_text(lora_driver_rn2483_factory_reset()));
     c46:	0e 94 35 21 	call	0x426a	; 0x426a <lora_driver_rn2483_factory_reset>
     c4a:	0e 94 b2 23 	call	0x4764	; 0x4764 <lora_driver_map_return_code_to_text>
     c4e:	9f 93       	push	r25
     c50:	8f 93       	push	r24
     c52:	84 e4       	ldi	r24, 0x44	; 68
     c54:	93 e0       	ldi	r25, 0x03	; 3
     c56:	9f 93       	push	r25
     c58:	8f 93       	push	r24
     c5a:	0e 94 b7 2d 	call	0x5b6e	; 0x5b6e <printf>
	
	// Configure to EU868 LoRaWAN standards
	printf("Configure to EU868 >%s<\n", lora_driver_map_return_code_to_text(lora_driver_configure_to_eu868()));
     c5e:	0e 94 b3 22 	call	0x4566	; 0x4566 <lora_driver_configure_to_eu868>
     c62:	0e 94 b2 23 	call	0x4764	; 0x4764 <lora_driver_map_return_code_to_text>
     c66:	9f 93       	push	r25
     c68:	8f 93       	push	r24
     c6a:	87 e5       	ldi	r24, 0x57	; 87
     c6c:	93 e0       	ldi	r25, 0x03	; 3
     c6e:	9f 93       	push	r25
     c70:	8f 93       	push	r24
     c72:	0e 94 b7 2d 	call	0x5b6e	; 0x5b6e <printf>

	// Get the transceivers HW EUI
	rc = lora_driver_get_rn2483_hweui(_out_buf);
     c76:	85 e5       	ldi	r24, 0x55	; 85
     c78:	98 e0       	ldi	r25, 0x08	; 8
     c7a:	0e 94 47 21 	call	0x428e	; 0x428e <lora_driver_get_rn2483_hweui>
	printf("Get HWEUI >%s<: %s\n",lora_driver_map_return_code_to_text(rc), _out_buf);
     c7e:	0e 94 b2 23 	call	0x4764	; 0x4764 <lora_driver_map_return_code_to_text>
     c82:	c5 e5       	ldi	r28, 0x55	; 85
     c84:	d8 e0       	ldi	r29, 0x08	; 8
     c86:	df 93       	push	r29
     c88:	cf 93       	push	r28
     c8a:	9f 93       	push	r25
     c8c:	8f 93       	push	r24
     c8e:	80 e7       	ldi	r24, 0x70	; 112
     c90:	93 e0       	ldi	r25, 0x03	; 3
     c92:	9f 93       	push	r25
     c94:	8f 93       	push	r24
     c96:	0e 94 b7 2d 	call	0x5b6e	; 0x5b6e <printf>

	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_map_return_code_to_text(lora_driver_set_device_identifier(_out_buf)));
     c9a:	ce 01       	movw	r24, r28
     c9c:	0e 94 63 21 	call	0x42c6	; 0x42c6 <lora_driver_set_device_identifier>
     ca0:	0e 94 b2 23 	call	0x4764	; 0x4764 <lora_driver_map_return_code_to_text>
     ca4:	9f 93       	push	r25
     ca6:	8f 93       	push	r24
     ca8:	df 93       	push	r29
     caa:	cf 93       	push	r28
     cac:	84 e8       	ldi	r24, 0x84	; 132
     cae:	93 e0       	ldi	r25, 0x03	; 3
     cb0:	9f 93       	push	r25
     cb2:	8f 93       	push	r24
     cb4:	0e 94 b7 2d 	call	0x5b6e	; 0x5b6e <printf>

	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_map_return_code_to_text(lora_driver_set_otaa_identity(LORA_appEUI,LORA_appKEY,_out_buf)));
     cb8:	ae 01       	movw	r20, r28
     cba:	69 e9       	ldi	r22, 0x99	; 153
     cbc:	73 e0       	ldi	r23, 0x03	; 3
     cbe:	8a eb       	ldi	r24, 0xBA	; 186
     cc0:	93 e0       	ldi	r25, 0x03	; 3
     cc2:	0e 94 91 23 	call	0x4722	; 0x4722 <lora_driver_set_otaa_identity>
     cc6:	0e 94 b2 23 	call	0x4764	; 0x4764 <lora_driver_map_return_code_to_text>
     cca:	9f 93       	push	r25
     ccc:	8f 93       	push	r24
     cce:	df 93       	push	r29
     cd0:	cf 93       	push	r28
     cd2:	89 e9       	ldi	r24, 0x99	; 153
     cd4:	93 e0       	ldi	r25, 0x03	; 3
     cd6:	9f 93       	push	r25
     cd8:	8f 93       	push	r24
     cda:	8a eb       	ldi	r24, 0xBA	; 186
     cdc:	93 e0       	ldi	r25, 0x03	; 3
     cde:	9f 93       	push	r25
     ce0:	8f 93       	push	r24
     ce2:	8b ec       	ldi	r24, 0xCB	; 203
     ce4:	93 e0       	ldi	r25, 0x03	; 3
     ce6:	9f 93       	push	r25
     ce8:	8f 93       	push	r24
     cea:	0e 94 b7 2d 	call	0x5b6e	; 0x5b6e <printf>

	// Save all the MAC settings in the transceiver
	printf("Save mac >%s<\n",lora_driver_map_return_code_to_text(lora_driver_save_mac()));
     cee:	0e 94 96 21 	call	0x432c	; 0x432c <lora_driver_save_mac>
     cf2:	0e 94 b2 23 	call	0x4764	; 0x4764 <lora_driver_map_return_code_to_text>
     cf6:	9f 93       	push	r25
     cf8:	8f 93       	push	r24
     cfa:	81 e0       	ldi	r24, 0x01	; 1
     cfc:	94 e0       	ldi	r25, 0x04	; 4
     cfe:	9f 93       	push	r25
     d00:	8f 93       	push	r24
     d02:	0e 94 b7 2d 	call	0x5b6e	; 0x5b6e <printf>

	//END OF ONE TIME USE CODE
	
	
	// Enable Adaptive Data Rate
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_map_return_code_to_text(lora_driver_set_adaptive_data_rate(LoRa_ON)));
     d06:	8d b7       	in	r24, 0x3d	; 61
     d08:	9e b7       	in	r25, 0x3e	; 62
     d0a:	82 96       	adiw	r24, 0x22	; 34
     d0c:	0f b6       	in	r0, 0x3f	; 63
     d0e:	f8 94       	cli
     d10:	9e bf       	out	0x3e, r25	; 62
     d12:	0f be       	out	0x3f, r0	; 63
     d14:	8d bf       	out	0x3d, r24	; 61
     d16:	81 e0       	ldi	r24, 0x01	; 1
     d18:	0e 94 90 22 	call	0x4520	; 0x4520 <lora_driver_set_adaptive_data_rate>
     d1c:	0e 94 b2 23 	call	0x4764	; 0x4764 <lora_driver_map_return_code_to_text>
     d20:	9f 93       	push	r25
     d22:	8f 93       	push	r24
     d24:	80 e1       	ldi	r24, 0x10	; 16
     d26:	94 e0       	ldi	r25, 0x04	; 4
     d28:	9f 93       	push	r25
     d2a:	8f 93       	push	r24
     d2c:	0e 94 b7 2d 	call	0x5b6e	; 0x5b6e <printf>

	// Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	printf("Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_map_return_code_to_text(lora_driver_set_receive_delay(500)));
     d30:	84 ef       	ldi	r24, 0xF4	; 244
     d32:	91 e0       	ldi	r25, 0x01	; 1
     d34:	0e 94 9b 22 	call	0x4536	; 0x4536 <lora_driver_set_receive_delay>
     d38:	0e 94 b2 23 	call	0x4764	; 0x4764 <lora_driver_map_return_code_to_text>
     d3c:	9f 93       	push	r25
     d3e:	8f 93       	push	r24
     d40:	81 e0       	ldi	r24, 0x01	; 1
     d42:	8f 93       	push	r24
     d44:	84 ef       	ldi	r24, 0xF4	; 244
     d46:	8f 93       	push	r24
     d48:	81 e3       	ldi	r24, 0x31	; 49
     d4a:	94 e0       	ldi	r25, 0x04	; 4
     d4c:	9f 93       	push	r25
     d4e:	8f 93       	push	r24
     d50:	0e 94 b7 2d 	call	0x5b6e	; 0x5b6e <printf>
     d54:	8d b7       	in	r24, 0x3d	; 61
     d56:	9e b7       	in	r25, 0x3e	; 62
     d58:	0a 96       	adiw	r24, 0x0a	; 10
     d5a:	0f b6       	in	r0, 0x3f	; 63
     d5c:	f8 94       	cli
     d5e:	9e bf       	out	0x3e, r25	; 62
     d60:	0f be       	out	0x3f, r0	; 63
     d62:	8d bf       	out	0x3d, r24	; 61
     d64:	ca e0       	ldi	r28, 0x0A	; 10
     d66:	d0 e0       	ldi	r29, 0x00	; 0
	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
	
	do {
		rc = lora_driver_join(LoRa_OTAA);
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_map_return_code_to_text(rc));
     d68:	01 e5       	ldi	r16, 0x51	; 81
     d6a:	14 e0       	ldi	r17, 0x04	; 4

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
	
	do {
		rc = lora_driver_join(LoRa_OTAA);
     d6c:	80 e0       	ldi	r24, 0x00	; 0
     d6e:	0e 94 9c 21 	call	0x4338	; 0x4338 <lora_driver_join>
     d72:	d8 2e       	mov	r13, r24
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_map_return_code_to_text(rc));
     d74:	0e 94 b2 23 	call	0x4764	; 0x4764 <lora_driver_map_return_code_to_text>
     d78:	9f 93       	push	r25
     d7a:	8f 93       	push	r24
     d7c:	df 93       	push	r29
     d7e:	cf 93       	push	r28
     d80:	1f 93       	push	r17
     d82:	0f 93       	push	r16
     d84:	0e 94 b7 2d 	call	0x5b6e	; 0x5b6e <printf>

		if ( rc != LoRa_ACCEPTED)
     d88:	0f 90       	pop	r0
     d8a:	0f 90       	pop	r0
     d8c:	0f 90       	pop	r0
     d8e:	0f 90       	pop	r0
     d90:	0f 90       	pop	r0
     d92:	0f 90       	pop	r0
     d94:	88 e0       	ldi	r24, 0x08	; 8
     d96:	d8 16       	cp	r13, r24
     d98:	09 f4       	brne	.+2      	; 0xd9c <lora_UpLinkHandler_task+0x19c>
     d9a:	62 c0       	rjmp	.+196    	; 0xe60 <lora_UpLinkHandler_task+0x260>
		{
			// Make the red led pulse to tell something went wrong
			led_long_puls(led_ST1); // OPTIONAL
     d9c:	80 e0       	ldi	r24, 0x00	; 0
     d9e:	0e 94 9b 1f 	call	0x3f36	; 0x3f36 <led_long_puls>
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
     da2:	66 e3       	ldi	r22, 0x36	; 54
     da4:	71 e0       	ldi	r23, 0x01	; 1
     da6:	80 e0       	ldi	r24, 0x00	; 0
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	0e 94 13 16 	call	0x2c26	; 0x2c26 <vTaskDelay>
     dae:	21 97       	sbiw	r28, 0x01	; 1
		}
		else
		{
			break;
		}
	} while (--maxJoinTriesLeft);
     db0:	e9 f6       	brne	.-70     	; 0xd6c <lora_UpLinkHandler_task+0x16c>
     db2:	5d c0       	rjmp	.+186    	; 0xe6e <lora_UpLinkHandler_task+0x26e>
		led_fast_blink(led_ST1); // OPTIONAL

		// Lets stay here
		while (1)
		{
			taskYIELD();
     db4:	76 d4       	rcall	.+2284   	; 0x16a2 <vPortYield>
     db6:	fe cf       	rjmp	.-4      	; 0xdb4 <lora_UpLinkHandler_task+0x1b4>
			isSet=true;
		}
		

		
		xBytesToSend = xMessageBufferReceive(xMessageBuffer, (void*) &_uplink_payload,
     db8:	00 e0       	ldi	r16, 0x00	; 0
     dba:	10 e0       	ldi	r17, 0x00	; 0
     dbc:	98 01       	movw	r18, r16
     dbe:	42 e3       	ldi	r20, 0x32	; 50
     dc0:	50 e0       	ldi	r21, 0x00	; 0
     dc2:	6f e3       	ldi	r22, 0x3F	; 63
     dc4:	78 e0       	ldi	r23, 0x08	; 8
     dc6:	c7 01       	movw	r24, r14
     dc8:	0e 94 10 12 	call	0x2420	; 0x2420 <xStreamBufferReceive>
		sizeof(rxData),0);
		if(xBytesToSend >= sizeof(uint8_t)*2)
     dcc:	02 97       	sbiw	r24, 0x02	; 2
     dce:	08 f4       	brcc	.+2      	; 0xdd2 <lora_UpLinkHandler_task+0x1d2>
     dd0:	40 c0       	rjmp	.+128    	; 0xe52 <lora_UpLinkHandler_task+0x252>
			//_uplink_payload = (_uplink_payload) &rxData;
			
			/**< Status led ST4 (BLUE)*/
			//Makes the led light up in a short period.
			
			led_short_puls(led_ST4);
     dd2:	83 e0       	ldi	r24, 0x03	; 3
     dd4:	0e 94 ad 1f 	call	0x3f5a	; 0x3f5a <led_short_puls>
			//_uplink_payload.port_no = 1;
			//_uplink_payload.len = 4;
			
			printf("The temperature in upLink is: %d\n", _uplink_payload.bytes[0]);
     dd8:	cf e3       	ldi	r28, 0x3F	; 63
     dda:	d8 e0       	ldi	r29, 0x08	; 8
     ddc:	8a 81       	ldd	r24, Y+2	; 0x02
     dde:	1f 92       	push	r1
     de0:	8f 93       	push	r24
     de2:	81 e7       	ldi	r24, 0x71	; 113
     de4:	94 e0       	ldi	r25, 0x04	; 4
     de6:	9f 93       	push	r25
     de8:	8f 93       	push	r24
     dea:	0e 94 b7 2d 	call	0x5b6e	; 0x5b6e <printf>
			printf("The temperature2 in upLink is: %d\n", _uplink_payload.bytes[1]);
     dee:	8b 81       	ldd	r24, Y+3	; 0x03
     df0:	1f 92       	push	r1
     df2:	8f 93       	push	r24
     df4:	83 e9       	ldi	r24, 0x93	; 147
     df6:	94 e0       	ldi	r25, 0x04	; 4
     df8:	9f 93       	push	r25
     dfa:	8f 93       	push	r24
     dfc:	0e 94 b7 2d 	call	0x5b6e	; 0x5b6e <printf>
			printf("The humidity in upLink is: %u\n", _uplink_payload.bytes[2]);
     e00:	8c 81       	ldd	r24, Y+4	; 0x04
     e02:	1f 92       	push	r1
     e04:	8f 93       	push	r24
     e06:	86 eb       	ldi	r24, 0xB6	; 182
     e08:	94 e0       	ldi	r25, 0x04	; 4
     e0a:	9f 93       	push	r25
     e0c:	8f 93       	push	r24
     e0e:	0e 94 b7 2d 	call	0x5b6e	; 0x5b6e <printf>
			printf("The humidity2 in upLink is: %u\n", _uplink_payload.bytes[3]);
     e12:	8d 81       	ldd	r24, Y+5	; 0x05
     e14:	1f 92       	push	r1
     e16:	8f 93       	push	r24
     e18:	85 ed       	ldi	r24, 0xD5	; 213
     e1a:	94 e0       	ldi	r25, 0x04	; 4
     e1c:	9f 93       	push	r25
     e1e:	8f 93       	push	r24
     e20:	0e 94 b7 2d 	call	0x5b6e	; 0x5b6e <printf>
			
			
			printf("Upload Message >%s<\n", lora_driver_map_return_code_to_text(lora_driver_sent_upload_message(false, &_uplink_payload)));
     e24:	be 01       	movw	r22, r28
     e26:	80 e0       	ldi	r24, 0x00	; 0
     e28:	0e 94 c5 21 	call	0x438a	; 0x438a <lora_driver_sent_upload_message>
     e2c:	0e 94 b2 23 	call	0x4764	; 0x4764 <lora_driver_map_return_code_to_text>
     e30:	9f 93       	push	r25
     e32:	8f 93       	push	r24
     e34:	85 ef       	ldi	r24, 0xF5	; 245
     e36:	94 e0       	ldi	r25, 0x04	; 4
     e38:	9f 93       	push	r25
     e3a:	8f 93       	push	r24
     e3c:	0e 94 b7 2d 	call	0x5b6e	; 0x5b6e <printf>
     e40:	8d b7       	in	r24, 0x3d	; 61
     e42:	9e b7       	in	r25, 0x3e	; 62
     e44:	44 96       	adiw	r24, 0x14	; 20
     e46:	0f b6       	in	r0, 0x3f	; 63
     e48:	f8 94       	cli
     e4a:	9e bf       	out	0x3e, r25	; 62
     e4c:	0f be       	out	0x3f, r0	; 63
     e4e:	8d bf       	out	0x3d, r24	; 61
     e50:	15 c0       	rjmp	.+42     	; 0xe7c <lora_UpLinkHandler_task+0x27c>
		}
		else
		{
			vTaskDelay(2000);
     e52:	60 ed       	ldi	r22, 0xD0	; 208
     e54:	77 e0       	ldi	r23, 0x07	; 7
     e56:	80 e0       	ldi	r24, 0x00	; 0
     e58:	90 e0       	ldi	r25, 0x00	; 0
     e5a:	0e 94 13 16 	call	0x2c26	; 0x2c26 <vTaskDelay>
		}
	}
     e5e:	0e c0       	rjmp	.+28     	; 0xe7c <lora_UpLinkHandler_task+0x27c>

	if (rc == LoRa_ACCEPTED)
	{
		// Connected to LoRaWAN :-)
		// Make the green led steady
		led_led_on(led_ST2); // OPTIONAL
     e60:	81 e0       	ldi	r24, 0x01	; 1
     e62:	0e 94 7d 1f 	call	0x3efa	; 0x3efa <led_led_on>
			vTaskDelay(150);

			lora_driver_flush_buffers(); // get rid of first version string from module after reset!

			_lora_setup();
			isSet=true;
     e66:	81 e0       	ldi	r24, 0x01	; 1
     e68:	80 93 3e 08 	sts	0x083E, r24	; 0x80083e <isSet>
     e6c:	a5 cf       	rjmp	.-182    	; 0xdb8 <lora_UpLinkHandler_task+0x1b8>
	}
	else
	{
		// Something went wrong
		// Turn off the green led
		led_led_off(led_ST2); // OPTIONAL
     e6e:	81 e0       	ldi	r24, 0x01	; 1
     e70:	0e 94 8c 1f 	call	0x3f18	; 0x3f18 <led_led_off>
		// Make the red led blink fast to tell something went wrong
		led_fast_blink(led_ST1); // OPTIONAL
     e74:	80 e0       	ldi	r24, 0x00	; 0
     e76:	0e 94 56 1f 	call	0x3eac	; 0x3eac <led_fast_blink>
     e7a:	9c cf       	rjmp	.-200    	; 0xdb4 <lora_UpLinkHandler_task+0x1b4>
		}
		else
		{
			vTaskDelay(2000);
		}
	}
     e7c:	df 91       	pop	r29
     e7e:	cf 91       	pop	r28
     e80:	1f 91       	pop	r17
     e82:	0f 91       	pop	r16
     e84:	ff 90       	pop	r15
     e86:	ef 90       	pop	r14
     e88:	df 90       	pop	r13
     e8a:	08 95       	ret

00000e8c <lora_UpLinkHandler_startTask>:
	
	void lora_UpLinkHandler_startTask(MessageBufferHandle_t xMessageBuffer){
     e8c:	ec 01       	movw	r28, r24
		for(;;)
		{
			lora_UpLinkHandler_task(xMessageBuffer);
     e8e:	ce 01       	movw	r24, r28
     e90:	b7 de       	rcall	.-658    	; 0xc00 <lora_UpLinkHandler_task>
			vTaskDelay(3000);
     e92:	68 eb       	ldi	r22, 0xB8	; 184
     e94:	7b e0       	ldi	r23, 0x0B	; 11
     e96:	80 e0       	ldi	r24, 0x00	; 0
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	0e 94 13 16 	call	0x2c26	; 0x2c26 <vTaskDelay>
     e9e:	f7 cf       	rjmp	.-18     	; 0xe8e <lora_UpLinkHandler_startTask+0x2>

00000ea0 <trace_init>:
	 #if (configUSE_TRACE_FACILITY == 1)
	 #ifdef HAL_DEFS_H_

	 #else
		// Used on VIA MEGA Shield rev. 2.0.0
		DDRK |= _BV(DDK0) | _BV(DDK1) | _BV(DDK2) | _BV(DDK3);
     ea0:	e7 e0       	ldi	r30, 0x07	; 7
     ea2:	f1 e0       	ldi	r31, 0x01	; 1
     ea4:	80 81       	ld	r24, Z
     ea6:	8f 60       	ori	r24, 0x0F	; 15
     ea8:	80 83       	st	Z, r24
     eaa:	08 95       	ret

00000eac <task_switch_in>:
	void task_switch_in(uint8_t task_no) {
		 #ifdef HAL_DEFS_H_

		 #else
		 // Used on VIA MEGA Shield rev. 2.0.0
		 PORTK &= 0b11110000;
     eac:	e8 e0       	ldi	r30, 0x08	; 8
     eae:	f1 e0       	ldi	r31, 0x01	; 1
     eb0:	90 81       	ld	r25, Z
     eb2:	90 7f       	andi	r25, 0xF0	; 240
     eb4:	90 83       	st	Z, r25
		 PORTK |= (task_no & 0b00001111);
     eb6:	90 81       	ld	r25, Z
     eb8:	8f 70       	andi	r24, 0x0F	; 15
     eba:	98 2b       	or	r25, r24
     ebc:	90 83       	st	Z, r25
     ebe:	08 95       	ret

00000ec0 <task_switch_out>:
	void task_switch_out(uint8_t task_no) {
		#ifdef HAL_DEFS_H_

		#else
		// Used on VIA MEGA Shield rev. 2.0.0
		PORTK &= 0b11110000;
     ec0:	e8 e0       	ldi	r30, 0x08	; 8
     ec2:	f1 e0       	ldi	r31, 0x01	; 1
     ec4:	80 81       	ld	r24, Z
     ec6:	80 7f       	andi	r24, 0xF0	; 240
     ec8:	80 83       	st	Z, r24
     eca:	08 95       	ret

00000ecc <xEventGroupCreate>:
        uxReturn = pxEventBits->uxEventBits;
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
     ecc:	cf 93       	push	r28
     ece:	df 93       	push	r29
     ed0:	80 e1       	ldi	r24, 0x10	; 16
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	b4 d1       	rcall	.+872    	; 0x123e <pvPortMalloc>
     ed6:	ec 01       	movw	r28, r24
     ed8:	00 97       	sbiw	r24, 0x00	; 0
     eda:	39 f0       	breq	.+14     	; 0xeea <xEventGroupCreate+0x1e>
     edc:	fc 01       	movw	r30, r24
     ede:	11 92       	st	Z+, r1
     ee0:	11 92       	st	Z+, r1
     ee2:	11 92       	st	Z+, r1
     ee4:	11 92       	st	Z+, r1
     ee6:	cf 01       	movw	r24, r30
     ee8:	94 d2       	rcall	.+1320   	; 0x1412 <vListInitialise>
     eea:	ce 01       	movw	r24, r28
     eec:	df 91       	pop	r29
     eee:	cf 91       	pop	r28
     ef0:	08 95       	ret

00000ef2 <xEventGroupWaitBits>:
     ef2:	2f 92       	push	r2
     ef4:	3f 92       	push	r3
     ef6:	4f 92       	push	r4
     ef8:	5f 92       	push	r5
     efa:	6f 92       	push	r6
     efc:	7f 92       	push	r7
     efe:	8f 92       	push	r8
     f00:	9f 92       	push	r9
     f02:	af 92       	push	r10
     f04:	bf 92       	push	r11
     f06:	cf 92       	push	r12
     f08:	df 92       	push	r13
     f0a:	ef 92       	push	r14
     f0c:	ff 92       	push	r15
     f0e:	0f 93       	push	r16
     f10:	1f 93       	push	r17
     f12:	cf 93       	push	r28
     f14:	df 93       	push	r29
     f16:	ec 01       	movw	r28, r24
     f18:	4a 01       	movw	r8, r20
     f1a:	5b 01       	movw	r10, r22
     f1c:	62 2e       	mov	r6, r18
     f1e:	70 2e       	mov	r7, r16
     f20:	0e 94 ae 14 	call	0x295c	; 0x295c <vTaskSuspendAll>
     f24:	28 80       	ld	r2, Y
     f26:	39 80       	ldd	r3, Y+1	; 0x01
     f28:	4a 80       	ldd	r4, Y+2	; 0x02
     f2a:	5b 80       	ldd	r5, Y+3	; 0x03
     f2c:	01 11       	cpse	r16, r1
     f2e:	0d c0       	rjmp	.+26     	; 0xf4a <xEventGroupWaitBits+0x58>
     f30:	81 e0       	ldi	r24, 0x01	; 1
     f32:	b2 01       	movw	r22, r4
     f34:	a1 01       	movw	r20, r2
     f36:	48 21       	and	r20, r8
     f38:	59 21       	and	r21, r9
     f3a:	6a 21       	and	r22, r10
     f3c:	7b 21       	and	r23, r11
     f3e:	45 2b       	or	r20, r21
     f40:	46 2b       	or	r20, r22
     f42:	47 2b       	or	r20, r23
     f44:	79 f4       	brne	.+30     	; 0xf64 <xEventGroupWaitBits+0x72>
     f46:	80 e0       	ldi	r24, 0x00	; 0
     f48:	0d c0       	rjmp	.+26     	; 0xf64 <xEventGroupWaitBits+0x72>
     f4a:	81 e0       	ldi	r24, 0x01	; 1
     f4c:	b2 01       	movw	r22, r4
     f4e:	a1 01       	movw	r20, r2
     f50:	48 21       	and	r20, r8
     f52:	59 21       	and	r21, r9
     f54:	6a 21       	and	r22, r10
     f56:	7b 21       	and	r23, r11
     f58:	48 15       	cp	r20, r8
     f5a:	59 05       	cpc	r21, r9
     f5c:	6a 05       	cpc	r22, r10
     f5e:	7b 05       	cpc	r23, r11
     f60:	09 f0       	breq	.+2      	; 0xf64 <xEventGroupWaitBits+0x72>
     f62:	80 e0       	ldi	r24, 0x00	; 0
     f64:	88 23       	and	r24, r24
     f66:	81 f0       	breq	.+32     	; 0xf88 <xEventGroupWaitBits+0x96>
     f68:	66 20       	and	r6, r6
     f6a:	09 f4       	brne	.+2      	; 0xf6e <xEventGroupWaitBits+0x7c>
     f6c:	6b c0       	rjmp	.+214    	; 0x1044 <xEventGroupWaitBits+0x152>
     f6e:	80 94       	com	r8
     f70:	90 94       	com	r9
     f72:	a0 94       	com	r10
     f74:	b0 94       	com	r11
     f76:	82 20       	and	r8, r2
     f78:	93 20       	and	r9, r3
     f7a:	a4 20       	and	r10, r4
     f7c:	b5 20       	and	r11, r5
     f7e:	88 82       	st	Y, r8
     f80:	99 82       	std	Y+1, r9	; 0x01
     f82:	aa 82       	std	Y+2, r10	; 0x02
     f84:	bb 82       	std	Y+3, r11	; 0x03
     f86:	5e c0       	rjmp	.+188    	; 0x1044 <xEventGroupWaitBits+0x152>
     f88:	c1 14       	cp	r12, r1
     f8a:	d1 04       	cpc	r13, r1
     f8c:	e1 04       	cpc	r14, r1
     f8e:	f1 04       	cpc	r15, r1
     f90:	09 f4       	brne	.+2      	; 0xf94 <xEventGroupWaitBits+0xa2>
     f92:	58 c0       	rjmp	.+176    	; 0x1044 <xEventGroupWaitBits+0x152>
     f94:	66 20       	and	r6, r6
     f96:	29 f0       	breq	.+10     	; 0xfa2 <xEventGroupWaitBits+0xb0>
     f98:	40 e0       	ldi	r20, 0x00	; 0
     f9a:	50 e0       	ldi	r21, 0x00	; 0
     f9c:	60 e0       	ldi	r22, 0x00	; 0
     f9e:	71 e0       	ldi	r23, 0x01	; 1
     fa0:	03 c0       	rjmp	.+6      	; 0xfa8 <xEventGroupWaitBits+0xb6>
     fa2:	40 e0       	ldi	r20, 0x00	; 0
     fa4:	50 e0       	ldi	r21, 0x00	; 0
     fa6:	ba 01       	movw	r22, r20
     fa8:	71 10       	cpse	r7, r1
     faa:	74 60       	ori	r23, 0x04	; 4
     fac:	48 29       	or	r20, r8
     fae:	59 29       	or	r21, r9
     fb0:	6a 29       	or	r22, r10
     fb2:	7b 29       	or	r23, r11
     fb4:	97 01       	movw	r18, r14
     fb6:	86 01       	movw	r16, r12
     fb8:	ce 01       	movw	r24, r28
     fba:	04 96       	adiw	r24, 0x04	; 4
     fbc:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <vTaskPlaceOnUnorderedEventList>
     fc0:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <xTaskResumeAll>
     fc4:	81 11       	cpse	r24, r1
     fc6:	01 c0       	rjmp	.+2      	; 0xfca <xEventGroupWaitBits+0xd8>
     fc8:	6c d3       	rcall	.+1752   	; 0x16a2 <vPortYield>
     fca:	0e 94 09 19 	call	0x3212	; 0x3212 <uxTaskResetEventItemValue>
     fce:	91 fd       	sbrc	r25, 1
     fd0:	35 c0       	rjmp	.+106    	; 0x103c <xEventGroupWaitBits+0x14a>
     fd2:	0f b6       	in	r0, 0x3f	; 63
     fd4:	f8 94       	cli
     fd6:	0f 92       	push	r0
     fd8:	68 81       	ld	r22, Y
     fda:	79 81       	ldd	r23, Y+1	; 0x01
     fdc:	8a 81       	ldd	r24, Y+2	; 0x02
     fde:	9b 81       	ldd	r25, Y+3	; 0x03
     fe0:	71 10       	cpse	r7, r1
     fe2:	0d c0       	rjmp	.+26     	; 0xffe <xEventGroupWaitBits+0x10c>
     fe4:	21 e0       	ldi	r18, 0x01	; 1
     fe6:	75 01       	movw	r14, r10
     fe8:	64 01       	movw	r12, r8
     fea:	c6 22       	and	r12, r22
     fec:	d7 22       	and	r13, r23
     fee:	e8 22       	and	r14, r24
     ff0:	f9 22       	and	r15, r25
     ff2:	cd 28       	or	r12, r13
     ff4:	ce 28       	or	r12, r14
     ff6:	cf 28       	or	r12, r15
     ff8:	79 f4       	brne	.+30     	; 0x1018 <xEventGroupWaitBits+0x126>
     ffa:	20 e0       	ldi	r18, 0x00	; 0
     ffc:	0d c0       	rjmp	.+26     	; 0x1018 <xEventGroupWaitBits+0x126>
     ffe:	21 e0       	ldi	r18, 0x01	; 1
    1000:	75 01       	movw	r14, r10
    1002:	64 01       	movw	r12, r8
    1004:	c6 22       	and	r12, r22
    1006:	d7 22       	and	r13, r23
    1008:	e8 22       	and	r14, r24
    100a:	f9 22       	and	r15, r25
    100c:	c8 14       	cp	r12, r8
    100e:	d9 04       	cpc	r13, r9
    1010:	ea 04       	cpc	r14, r10
    1012:	fb 04       	cpc	r15, r11
    1014:	09 f0       	breq	.+2      	; 0x1018 <xEventGroupWaitBits+0x126>
    1016:	20 e0       	ldi	r18, 0x00	; 0
    1018:	22 23       	and	r18, r18
    101a:	71 f0       	breq	.+28     	; 0x1038 <xEventGroupWaitBits+0x146>
    101c:	66 20       	and	r6, r6
    101e:	61 f0       	breq	.+24     	; 0x1038 <xEventGroupWaitBits+0x146>
    1020:	80 94       	com	r8
    1022:	90 94       	com	r9
    1024:	a0 94       	com	r10
    1026:	b0 94       	com	r11
    1028:	86 22       	and	r8, r22
    102a:	97 22       	and	r9, r23
    102c:	a8 22       	and	r10, r24
    102e:	b9 22       	and	r11, r25
    1030:	88 82       	st	Y, r8
    1032:	99 82       	std	Y+1, r9	; 0x01
    1034:	aa 82       	std	Y+2, r10	; 0x02
    1036:	bb 82       	std	Y+3, r11	; 0x03
    1038:	0f 90       	pop	r0
    103a:	0f be       	out	0x3f, r0	; 63
    103c:	1b 01       	movw	r2, r22
    103e:	2c 01       	movw	r4, r24
    1040:	55 24       	eor	r5, r5
    1042:	02 c0       	rjmp	.+4      	; 0x1048 <xEventGroupWaitBits+0x156>
    1044:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <xTaskResumeAll>
    1048:	c2 01       	movw	r24, r4
    104a:	b1 01       	movw	r22, r2
    104c:	df 91       	pop	r29
    104e:	cf 91       	pop	r28
    1050:	1f 91       	pop	r17
    1052:	0f 91       	pop	r16
    1054:	ff 90       	pop	r15
    1056:	ef 90       	pop	r14
    1058:	df 90       	pop	r13
    105a:	cf 90       	pop	r12
    105c:	bf 90       	pop	r11
    105e:	af 90       	pop	r10
    1060:	9f 90       	pop	r9
    1062:	8f 90       	pop	r8
    1064:	7f 90       	pop	r7
    1066:	6f 90       	pop	r6
    1068:	5f 90       	pop	r5
    106a:	4f 90       	pop	r4
    106c:	3f 90       	pop	r3
    106e:	2f 90       	pop	r2
    1070:	08 95       	ret

00001072 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
    1072:	4f 92       	push	r4
    1074:	5f 92       	push	r5
    1076:	6f 92       	push	r6
    1078:	7f 92       	push	r7
    107a:	8f 92       	push	r8
    107c:	9f 92       	push	r9
    107e:	af 92       	push	r10
    1080:	bf 92       	push	r11
    1082:	cf 92       	push	r12
    1084:	df 92       	push	r13
    1086:	ef 92       	push	r14
    1088:	ff 92       	push	r15
    108a:	0f 93       	push	r16
    108c:	1f 93       	push	r17
    108e:	cf 93       	push	r28
    1090:	df 93       	push	r29
    1092:	ec 01       	movw	r28, r24
    1094:	6a 01       	movw	r12, r20
    1096:	7b 01       	movw	r14, r22
    itself. */
    configASSERT( xEventGroup );
    configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

    pxList = &( pxEventBits->xTasksWaitingForBits );
    pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1098:	8c 01       	movw	r16, r24
    109a:	09 5f       	subi	r16, 0xF9	; 249
    109c:	1f 4f       	sbci	r17, 0xFF	; 255
    vTaskSuspendAll();
    109e:	0e 94 ae 14 	call	0x295c	; 0x295c <vTaskSuspendAll>
    {
        traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

        pxListItem = listGET_HEAD_ENTRY( pxList );
    10a2:	eb 85       	ldd	r30, Y+11	; 0x0b
    10a4:	fc 85       	ldd	r31, Y+12	; 0x0c

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;
    10a6:	88 81       	ld	r24, Y
    10a8:	99 81       	ldd	r25, Y+1	; 0x01
    10aa:	aa 81       	ldd	r26, Y+2	; 0x02
    10ac:	bb 81       	ldd	r27, Y+3	; 0x03
    10ae:	c8 2a       	or	r12, r24
    10b0:	d9 2a       	or	r13, r25
    10b2:	ea 2a       	or	r14, r26
    10b4:	fb 2a       	or	r15, r27
    10b6:	c8 82       	st	Y, r12
    10b8:	d9 82       	std	Y+1, r13	; 0x01
    10ba:	ea 82       	std	Y+2, r14	; 0x02
    10bc:	fb 82       	std	Y+3, r15	; 0x03

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
    10be:	0e 17       	cp	r16, r30
    10c0:	1f 07       	cpc	r17, r31
    10c2:	09 f4       	brne	.+2      	; 0x10c6 <xEventGroupSetBits+0x54>
    10c4:	45 c0       	rjmp	.+138    	; 0x1150 <xEventGroupSetBits+0xde>
    10c6:	c1 2c       	mov	r12, r1
    10c8:	d1 2c       	mov	r13, r1
    10ca:	76 01       	movw	r14, r12
            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
                {
                    xMatchFound = pdTRUE;
    10cc:	99 24       	eor	r9, r9
    10ce:	93 94       	inc	r9
    10d0:	81 2c       	mov	r8, r1
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
    10d2:	a4 80       	ldd	r10, Z+4	; 0x04
    10d4:	b5 80       	ldd	r11, Z+5	; 0x05
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
    10d6:	80 81       	ld	r24, Z
    10d8:	91 81       	ldd	r25, Z+1	; 0x01
    10da:	a2 81       	ldd	r26, Z+2	; 0x02
    10dc:	b3 81       	ldd	r27, Z+3	; 0x03
            xMatchFound = pdFALSE;

            /* Split the bits waited for from the control bits. */
            uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
            uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
    10de:	ac 01       	movw	r20, r24
    10e0:	bd 01       	movw	r22, r26
    10e2:	77 27       	eor	r23, r23

            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
    10e4:	b2 fd       	sbrc	r27, 2
    10e6:	0f c0       	rjmp	.+30     	; 0x1106 <xEventGroupSetBits+0x94>
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
                {
                    xMatchFound = pdTRUE;
    10e8:	48 80       	ld	r4, Y
    10ea:	59 80       	ldd	r5, Y+1	; 0x01
    10ec:	6a 80       	ldd	r6, Y+2	; 0x02
    10ee:	7b 80       	ldd	r7, Y+3	; 0x03
    10f0:	44 22       	and	r4, r20
    10f2:	55 22       	and	r5, r21
    10f4:	66 22       	and	r6, r22
    10f6:	77 22       	and	r7, r23
    10f8:	29 2d       	mov	r18, r9
    10fa:	45 28       	or	r4, r5
    10fc:	46 28       	or	r4, r6
    10fe:	47 28       	or	r4, r7
    1100:	89 f4       	brne	.+34     	; 0x1124 <xEventGroupSetBits+0xb2>
    1102:	28 2d       	mov	r18, r8
    1104:	0f c0       	rjmp	.+30     	; 0x1124 <xEventGroupSetBits+0xb2>
    1106:	48 80       	ld	r4, Y
    1108:	59 80       	ldd	r5, Y+1	; 0x01
    110a:	6a 80       	ldd	r6, Y+2	; 0x02
    110c:	7b 80       	ldd	r7, Y+3	; 0x03
    110e:	44 22       	and	r4, r20
    1110:	55 22       	and	r5, r21
    1112:	66 22       	and	r6, r22
    1114:	77 22       	and	r7, r23
    1116:	29 2d       	mov	r18, r9
    1118:	44 16       	cp	r4, r20
    111a:	55 06       	cpc	r5, r21
    111c:	66 06       	cpc	r6, r22
    111e:	77 06       	cpc	r7, r23
    1120:	09 f0       	breq	.+2      	; 0x1124 <xEventGroupSetBits+0xb2>
    1122:	28 2d       	mov	r18, r8
            else
            {
                /* Need all bits to be set, but not all the bits were set. */
            }

            if( xMatchFound != pdFALSE )
    1124:	22 23       	and	r18, r18
    1126:	71 f0       	breq	.+28     	; 0x1144 <xEventGroupSetBits+0xd2>
            {
                /* The bits match.  Should the bits be cleared on exit? */
                if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
    1128:	b0 ff       	sbrs	r27, 0
    112a:	04 c0       	rjmp	.+8      	; 0x1134 <xEventGroupSetBits+0xc2>
                {
                    uxBitsToClear |= uxBitsWaitedFor;
    112c:	c4 2a       	or	r12, r20
    112e:	d5 2a       	or	r13, r21
    1130:	e6 2a       	or	r14, r22
    1132:	f7 2a       	or	r15, r23
                /* Store the actual event flag value in the task's event list
                item before removing the task from the event list.  The
                eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                that is was unblocked due to its required bits matching, rather
                than because it timed out. */
                vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
    1134:	48 81       	ld	r20, Y
    1136:	59 81       	ldd	r21, Y+1	; 0x01
    1138:	6a 81       	ldd	r22, Y+2	; 0x02
    113a:	7b 81       	ldd	r23, Y+3	; 0x03
    113c:	72 60       	ori	r23, 0x02	; 2
    113e:	cf 01       	movw	r24, r30
    1140:	0e 94 48 17 	call	0x2e90	; 0x2e90 <vTaskRemoveFromUnorderedEventList>
    1144:	ea 2d       	mov	r30, r10
    1146:	fb 2d       	mov	r31, r11

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
    1148:	0e 17       	cp	r16, r30
    114a:	1f 07       	cpc	r17, r31
    114c:	11 f6       	brne	.-124    	; 0x10d2 <xEventGroupSetBits+0x60>
    114e:	03 c0       	rjmp	.+6      	; 0x1156 <xEventGroupSetBits+0xe4>
EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
    1150:	c1 2c       	mov	r12, r1
    1152:	d1 2c       	mov	r13, r1
    1154:	76 01       	movw	r14, r12
            pxListItem = pxNext;
        }

        /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
        bit was set in the control word. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
    1156:	c0 94       	com	r12
    1158:	d0 94       	com	r13
    115a:	e0 94       	com	r14
    115c:	f0 94       	com	r15
    115e:	88 81       	ld	r24, Y
    1160:	99 81       	ldd	r25, Y+1	; 0x01
    1162:	aa 81       	ldd	r26, Y+2	; 0x02
    1164:	bb 81       	ldd	r27, Y+3	; 0x03
    1166:	c8 22       	and	r12, r24
    1168:	d9 22       	and	r13, r25
    116a:	ea 22       	and	r14, r26
    116c:	fb 22       	and	r15, r27
    116e:	c8 82       	st	Y, r12
    1170:	d9 82       	std	Y+1, r13	; 0x01
    1172:	ea 82       	std	Y+2, r14	; 0x02
    1174:	fb 82       	std	Y+3, r15	; 0x03
    }
    ( void ) xTaskResumeAll();
    1176:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <xTaskResumeAll>

    return pxEventBits->uxEventBits;
    117a:	68 81       	ld	r22, Y
    117c:	79 81       	ldd	r23, Y+1	; 0x01
    117e:	8a 81       	ldd	r24, Y+2	; 0x02
    1180:	9b 81       	ldd	r25, Y+3	; 0x03
}
    1182:	df 91       	pop	r29
    1184:	cf 91       	pop	r28
    1186:	1f 91       	pop	r17
    1188:	0f 91       	pop	r16
    118a:	ff 90       	pop	r15
    118c:	ef 90       	pop	r14
    118e:	df 90       	pop	r13
    1190:	cf 90       	pop	r12
    1192:	bf 90       	pop	r11
    1194:	af 90       	pop	r10
    1196:	9f 90       	pop	r9
    1198:	8f 90       	pop	r8
    119a:	7f 90       	pop	r7
    119c:	6f 90       	pop	r6
    119e:	5f 90       	pop	r5
    11a0:	4f 90       	pop	r4
    11a2:	08 95       	ret

000011a4 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
    11a4:	cf 93       	push	r28
    11a6:	df 93       	push	r29
    11a8:	dc 01       	movw	r26, r24
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
    11aa:	e1 ec       	ldi	r30, 0xC1	; 193
    11ac:	f8 e0       	ldi	r31, 0x08	; 8
    11ae:	01 c0       	rjmp	.+2      	; 0x11b2 <prvInsertBlockIntoFreeList+0xe>
    11b0:	f9 01       	movw	r30, r18
    11b2:	20 81       	ld	r18, Z
    11b4:	31 81       	ldd	r19, Z+1	; 0x01
    11b6:	2a 17       	cp	r18, r26
    11b8:	3b 07       	cpc	r19, r27
    11ba:	d0 f3       	brcs	.-12     	; 0x11b0 <prvInsertBlockIntoFreeList+0xc>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
    11bc:	82 81       	ldd	r24, Z+2	; 0x02
    11be:	93 81       	ldd	r25, Z+3	; 0x03
    11c0:	af 01       	movw	r20, r30
    11c2:	48 0f       	add	r20, r24
    11c4:	59 1f       	adc	r21, r25
    11c6:	a4 17       	cp	r26, r20
    11c8:	b5 07       	cpc	r27, r21
    11ca:	49 f4       	brne	.+18     	; 0x11de <prvInsertBlockIntoFreeList+0x3a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
    11cc:	12 96       	adiw	r26, 0x02	; 2
    11ce:	4d 91       	ld	r20, X+
    11d0:	5c 91       	ld	r21, X
    11d2:	13 97       	sbiw	r26, 0x03	; 3
    11d4:	84 0f       	add	r24, r20
    11d6:	95 1f       	adc	r25, r21
    11d8:	93 83       	std	Z+3, r25	; 0x03
    11da:	82 83       	std	Z+2, r24	; 0x02
    11dc:	df 01       	movw	r26, r30
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
    11de:	12 96       	adiw	r26, 0x02	; 2
    11e0:	8d 91       	ld	r24, X+
    11e2:	9c 91       	ld	r25, X
    11e4:	13 97       	sbiw	r26, 0x03	; 3
    11e6:	ed 01       	movw	r28, r26
    11e8:	c8 0f       	add	r28, r24
    11ea:	d9 1f       	adc	r29, r25
    11ec:	2c 17       	cp	r18, r28
    11ee:	3d 07       	cpc	r19, r29
    11f0:	d9 f4       	brne	.+54     	; 0x1228 <prvInsertBlockIntoFreeList+0x84>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
    11f2:	20 91 bf 08 	lds	r18, 0x08BF	; 0x8008bf <pxEnd>
    11f6:	30 91 c0 08 	lds	r19, 0x08C0	; 0x8008c0 <pxEnd+0x1>
    11fa:	c2 17       	cp	r28, r18
    11fc:	d3 07       	cpc	r29, r19
    11fe:	81 f0       	breq	.+32     	; 0x1220 <prvInsertBlockIntoFreeList+0x7c>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
    1200:	2a 81       	ldd	r18, Y+2	; 0x02
    1202:	3b 81       	ldd	r19, Y+3	; 0x03
    1204:	82 0f       	add	r24, r18
    1206:	93 1f       	adc	r25, r19
    1208:	13 96       	adiw	r26, 0x03	; 3
    120a:	9c 93       	st	X, r25
    120c:	8e 93       	st	-X, r24
    120e:	12 97       	sbiw	r26, 0x02	; 2
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
    1210:	c0 81       	ld	r28, Z
    1212:	d1 81       	ldd	r29, Z+1	; 0x01
    1214:	88 81       	ld	r24, Y
    1216:	99 81       	ldd	r25, Y+1	; 0x01
    1218:	11 96       	adiw	r26, 0x01	; 1
    121a:	9c 93       	st	X, r25
    121c:	8e 93       	st	-X, r24
    121e:	07 c0       	rjmp	.+14     	; 0x122e <prvInsertBlockIntoFreeList+0x8a>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
    1220:	11 96       	adiw	r26, 0x01	; 1
    1222:	dc 93       	st	X, r29
    1224:	ce 93       	st	-X, r28
    1226:	03 c0       	rjmp	.+6      	; 0x122e <prvInsertBlockIntoFreeList+0x8a>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
    1228:	11 96       	adiw	r26, 0x01	; 1
    122a:	3c 93       	st	X, r19
    122c:	2e 93       	st	-X, r18

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
    122e:	ae 17       	cp	r26, r30
    1230:	bf 07       	cpc	r27, r31
    1232:	11 f0       	breq	.+4      	; 0x1238 <prvInsertBlockIntoFreeList+0x94>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
    1234:	b1 83       	std	Z+1, r27	; 0x01
    1236:	a0 83       	st	Z, r26
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    1238:	df 91       	pop	r29
    123a:	cf 91       	pop	r28
    123c:	08 95       	ret

0000123e <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    123e:	cf 92       	push	r12
    1240:	df 92       	push	r13
    1242:	ef 92       	push	r14
    1244:	ff 92       	push	r15
    1246:	0f 93       	push	r16
    1248:	1f 93       	push	r17
    124a:	cf 93       	push	r28
    124c:	df 93       	push	r29
    124e:	ec 01       	movw	r28, r24
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
    1250:	0e 94 ae 14 	call	0x295c	; 0x295c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
    1254:	80 91 bf 08 	lds	r24, 0x08BF	; 0x8008bf <pxEnd>
    1258:	90 91 c0 08 	lds	r25, 0x08C0	; 0x8008c0 <pxEnd+0x1>
    125c:	89 2b       	or	r24, r25
    125e:	41 f5       	brne	.+80     	; 0x12b0 <pvPortMalloc+0x72>

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
    1260:	e1 ec       	ldi	r30, 0xC1	; 193
    1262:	f8 e0       	ldi	r31, 0x08	; 8
    1264:	a5 ec       	ldi	r26, 0xC5	; 197
    1266:	b8 e0       	ldi	r27, 0x08	; 8
    1268:	b1 83       	std	Z+1, r27	; 0x01
    126a:	a0 83       	st	Z, r26
	xStart.xBlockSize = ( size_t ) 0;
    126c:	13 82       	std	Z+3, r1	; 0x03
    126e:	12 82       	std	Z+2, r1	; 0x02
	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
	uxAddress -= xHeapStructSize;
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
	pxEnd = ( void * ) uxAddress;
    1270:	e1 e6       	ldi	r30, 0x61	; 97
    1272:	f8 e1       	ldi	r31, 0x18	; 24
    1274:	f0 93 c0 08 	sts	0x08C0, r31	; 0x8008c0 <pxEnd+0x1>
    1278:	e0 93 bf 08 	sts	0x08BF, r30	; 0x8008bf <pxEnd>
	pxEnd->xBlockSize = 0;
    127c:	13 82       	std	Z+3, r1	; 0x03
    127e:	12 82       	std	Z+2, r1	; 0x02
	pxEnd->pxNextFreeBlock = NULL;
    1280:	11 82       	std	Z+1, r1	; 0x01
    1282:	10 82       	st	Z, r1

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
    1284:	8c e9       	ldi	r24, 0x9C	; 156
    1286:	9f e0       	ldi	r25, 0x0F	; 15
    1288:	13 96       	adiw	r26, 0x03	; 3
    128a:	9c 93       	st	X, r25
    128c:	8e 93       	st	-X, r24
    128e:	12 97       	sbiw	r26, 0x02	; 2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
    1290:	ed 93       	st	X+, r30
    1292:	fc 93       	st	X, r31

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
    1294:	90 93 bc 08 	sts	0x08BC, r25	; 0x8008bc <xMinimumEverFreeBytesRemaining+0x1>
    1298:	80 93 bb 08 	sts	0x08BB, r24	; 0x8008bb <xMinimumEverFreeBytesRemaining>
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
    129c:	90 93 be 08 	sts	0x08BE, r25	; 0x8008be <xFreeBytesRemaining+0x1>
    12a0:	80 93 bd 08 	sts	0x08BD, r24	; 0x8008bd <xFreeBytesRemaining>

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
    12a4:	80 e0       	ldi	r24, 0x00	; 0
    12a6:	90 e8       	ldi	r25, 0x80	; 128
    12a8:	90 93 ba 08 	sts	0x08BA, r25	; 0x8008ba <xBlockAllocatedBit+0x1>
    12ac:	80 93 b9 08 	sts	0x08B9, r24	; 0x8008b9 <xBlockAllocatedBit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
    12b0:	e0 90 b9 08 	lds	r14, 0x08B9	; 0x8008b9 <xBlockAllocatedBit>
    12b4:	f0 90 ba 08 	lds	r15, 0x08BA	; 0x8008ba <xBlockAllocatedBit+0x1>
    12b8:	c7 01       	movw	r24, r14
    12ba:	8c 23       	and	r24, r28
    12bc:	9d 23       	and	r25, r29
    12be:	89 2b       	or	r24, r25
    12c0:	09 f0       	breq	.+2      	; 0x12c4 <pvPortMalloc+0x86>
    12c2:	66 c0       	rjmp	.+204    	; 0x1390 <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
    12c4:	20 97       	sbiw	r28, 0x00	; 0
    12c6:	09 f4       	brne	.+2      	; 0x12ca <pvPortMalloc+0x8c>
    12c8:	66 c0       	rjmp	.+204    	; 0x1396 <pvPortMalloc+0x158>
			{
				xWantedSize += xHeapStructSize;
    12ca:	ae 01       	movw	r20, r28
    12cc:	4c 5f       	subi	r20, 0xFC	; 252
    12ce:	5f 4f       	sbci	r21, 0xFF	; 255
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
    12d0:	09 f4       	brne	.+2      	; 0x12d4 <pvPortMalloc+0x96>
    12d2:	5e c0       	rjmp	.+188    	; 0x1390 <pvPortMalloc+0x152>
    12d4:	00 91 bd 08 	lds	r16, 0x08BD	; 0x8008bd <xFreeBytesRemaining>
    12d8:	10 91 be 08 	lds	r17, 0x08BE	; 0x8008be <xFreeBytesRemaining+0x1>
    12dc:	04 17       	cp	r16, r20
    12de:	15 07       	cpc	r17, r21
    12e0:	08 f4       	brcc	.+2      	; 0x12e4 <pvPortMalloc+0xa6>
    12e2:	56 c0       	rjmp	.+172    	; 0x1390 <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
    12e4:	c0 91 c1 08 	lds	r28, 0x08C1	; 0x8008c1 <xStart>
    12e8:	d0 91 c2 08 	lds	r29, 0x08C2	; 0x8008c2 <xStart+0x1>

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
    12ec:	e1 ec       	ldi	r30, 0xC1	; 193
    12ee:	f8 e0       	ldi	r31, 0x08	; 8
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    12f0:	02 c0       	rjmp	.+4      	; 0x12f6 <pvPortMalloc+0xb8>
    12f2:	fe 01       	movw	r30, r28
				{
					pxPreviousBlock = pxBlock;
					pxBlock = pxBlock->pxNextFreeBlock;
    12f4:	e9 01       	movw	r28, r18
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    12f6:	2a 81       	ldd	r18, Y+2	; 0x02
    12f8:	3b 81       	ldd	r19, Y+3	; 0x03
    12fa:	24 17       	cp	r18, r20
    12fc:	35 07       	cpc	r19, r21
    12fe:	28 f4       	brcc	.+10     	; 0x130a <pvPortMalloc+0xcc>
    1300:	28 81       	ld	r18, Y
    1302:	39 81       	ldd	r19, Y+1	; 0x01
    1304:	21 15       	cp	r18, r1
    1306:	31 05       	cpc	r19, r1
    1308:	a1 f7       	brne	.-24     	; 0x12f2 <pvPortMalloc+0xb4>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
    130a:	80 91 bf 08 	lds	r24, 0x08BF	; 0x8008bf <pxEnd>
    130e:	90 91 c0 08 	lds	r25, 0x08C0	; 0x8008c0 <pxEnd+0x1>
    1312:	c8 17       	cp	r28, r24
    1314:	d9 07       	cpc	r29, r25
    1316:	e1 f1       	breq	.+120    	; 0x1390 <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
    1318:	c0 80       	ld	r12, Z
    131a:	d1 80       	ldd	r13, Z+1	; 0x01
    131c:	84 e0       	ldi	r24, 0x04	; 4
    131e:	c8 0e       	add	r12, r24
    1320:	d1 1c       	adc	r13, r1

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    1322:	88 81       	ld	r24, Y
    1324:	99 81       	ldd	r25, Y+1	; 0x01
    1326:	91 83       	std	Z+1, r25	; 0x01
    1328:	80 83       	st	Z, r24

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    132a:	2a 81       	ldd	r18, Y+2	; 0x02
    132c:	3b 81       	ldd	r19, Y+3	; 0x03
    132e:	24 1b       	sub	r18, r20
    1330:	35 0b       	sbc	r19, r21
    1332:	29 30       	cpi	r18, 0x09	; 9
    1334:	31 05       	cpc	r19, r1
    1336:	48 f0       	brcs	.+18     	; 0x134a <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
    1338:	ce 01       	movw	r24, r28
    133a:	84 0f       	add	r24, r20
    133c:	95 1f       	adc	r25, r21
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    133e:	fc 01       	movw	r30, r24
    1340:	33 83       	std	Z+3, r19	; 0x03
    1342:	22 83       	std	Z+2, r18	; 0x02
						pxBlock->xBlockSize = xWantedSize;
    1344:	5b 83       	std	Y+3, r21	; 0x03
    1346:	4a 83       	std	Y+2, r20	; 0x02

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
    1348:	2d df       	rcall	.-422    	; 0x11a4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
    134a:	8a 81       	ldd	r24, Y+2	; 0x02
    134c:	9b 81       	ldd	r25, Y+3	; 0x03
    134e:	08 1b       	sub	r16, r24
    1350:	19 0b       	sbc	r17, r25
    1352:	10 93 be 08 	sts	0x08BE, r17	; 0x8008be <xFreeBytesRemaining+0x1>
    1356:	00 93 bd 08 	sts	0x08BD, r16	; 0x8008bd <xFreeBytesRemaining>

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
    135a:	20 91 bb 08 	lds	r18, 0x08BB	; 0x8008bb <xMinimumEverFreeBytesRemaining>
    135e:	30 91 bc 08 	lds	r19, 0x08BC	; 0x8008bc <xMinimumEverFreeBytesRemaining+0x1>
    1362:	02 17       	cp	r16, r18
    1364:	13 07       	cpc	r17, r19
    1366:	20 f4       	brcc	.+8      	; 0x1370 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
    1368:	10 93 bc 08 	sts	0x08BC, r17	; 0x8008bc <xMinimumEverFreeBytesRemaining+0x1>
    136c:	00 93 bb 08 	sts	0x08BB, r16	; 0x8008bb <xMinimumEverFreeBytesRemaining>
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
    1370:	e8 2a       	or	r14, r24
    1372:	f9 2a       	or	r15, r25
    1374:	fb 82       	std	Y+3, r15	; 0x03
    1376:	ea 82       	std	Y+2, r14	; 0x02
					pxBlock->pxNextFreeBlock = NULL;
    1378:	19 82       	std	Y+1, r1	; 0x01
    137a:	18 82       	st	Y, r1
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    137c:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
    1380:	c1 14       	cp	r12, r1
    1382:	d1 04       	cpc	r13, r1
    1384:	59 f4       	brne	.+22     	; 0x139c <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
    1386:	0e 94 6a 1c 	call	0x38d4	; 0x38d4 <vApplicationMallocFailedHook>
    138a:	c1 2c       	mov	r12, r1
    138c:	d1 2c       	mov	r13, r1
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
    138e:	06 c0       	rjmp	.+12     	; 0x139c <pvPortMalloc+0x15e>
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    1390:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <xTaskResumeAll>
    1394:	f8 cf       	rjmp	.-16     	; 0x1386 <pvPortMalloc+0x148>
    1396:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <xTaskResumeAll>
    139a:	f5 cf       	rjmp	.-22     	; 0x1386 <pvPortMalloc+0x148>
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
}
    139c:	c6 01       	movw	r24, r12
    139e:	df 91       	pop	r29
    13a0:	cf 91       	pop	r28
    13a2:	1f 91       	pop	r17
    13a4:	0f 91       	pop	r16
    13a6:	ff 90       	pop	r15
    13a8:	ef 90       	pop	r14
    13aa:	df 90       	pop	r13
    13ac:	cf 90       	pop	r12
    13ae:	08 95       	ret

000013b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    13b0:	cf 93       	push	r28
    13b2:	df 93       	push	r29
uint8_t *puc = ( uint8_t * ) pv;
BlockLink_t *pxLink;

	if( pv != NULL )
    13b4:	00 97       	sbiw	r24, 0x00	; 0
    13b6:	51 f1       	breq	.+84     	; 0x140c <vPortFree+0x5c>

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
		configASSERT( pxLink->pxNextFreeBlock == NULL );

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
    13b8:	fc 01       	movw	r30, r24
    13ba:	34 97       	sbiw	r30, 0x04	; 4
    13bc:	22 81       	ldd	r18, Z+2	; 0x02
    13be:	33 81       	ldd	r19, Z+3	; 0x03
    13c0:	40 91 b9 08 	lds	r20, 0x08B9	; 0x8008b9 <xBlockAllocatedBit>
    13c4:	50 91 ba 08 	lds	r21, 0x08BA	; 0x8008ba <xBlockAllocatedBit+0x1>
    13c8:	b9 01       	movw	r22, r18
    13ca:	64 23       	and	r22, r20
    13cc:	75 23       	and	r23, r21
    13ce:	67 2b       	or	r22, r23
    13d0:	e9 f0       	breq	.+58     	; 0x140c <vPortFree+0x5c>
		{
			if( pxLink->pxNextFreeBlock == NULL )
    13d2:	60 81       	ld	r22, Z
    13d4:	71 81       	ldd	r23, Z+1	; 0x01
    13d6:	67 2b       	or	r22, r23
    13d8:	c9 f4       	brne	.+50     	; 0x140c <vPortFree+0x5c>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
    13da:	ef 01       	movw	r28, r30
    13dc:	40 95       	com	r20
    13de:	50 95       	com	r21
    13e0:	24 23       	and	r18, r20
    13e2:	35 23       	and	r19, r21
    13e4:	33 83       	std	Z+3, r19	; 0x03
    13e6:	22 83       	std	Z+2, r18	; 0x02

				vTaskSuspendAll();
    13e8:	0e 94 ae 14 	call	0x295c	; 0x295c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
    13ec:	20 91 bd 08 	lds	r18, 0x08BD	; 0x8008bd <xFreeBytesRemaining>
    13f0:	30 91 be 08 	lds	r19, 0x08BE	; 0x8008be <xFreeBytesRemaining+0x1>
    13f4:	8a 81       	ldd	r24, Y+2	; 0x02
    13f6:	9b 81       	ldd	r25, Y+3	; 0x03
    13f8:	82 0f       	add	r24, r18
    13fa:	93 1f       	adc	r25, r19
    13fc:	90 93 be 08 	sts	0x08BE, r25	; 0x8008be <xFreeBytesRemaining+0x1>
    1400:	80 93 bd 08 	sts	0x08BD, r24	; 0x8008bd <xFreeBytesRemaining>
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
    1404:	ce 01       	movw	r24, r28
    1406:	ce de       	rcall	.-612    	; 0x11a4 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
    1408:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
    140c:	df 91       	pop	r29
    140e:	cf 91       	pop	r28
    1410:	08 95       	ret

00001412 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    1412:	fc 01       	movw	r30, r24
    /* The list structure contains a list item which is used to mark the
    end of the list.  To initialise the list the list end is inserted
    as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );            /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1414:	03 96       	adiw	r24, 0x03	; 3
    1416:	92 83       	std	Z+2, r25	; 0x02
    1418:	81 83       	std	Z+1, r24	; 0x01

    /* The list end value is the highest possible value in the list to
    ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
    141a:	4f ef       	ldi	r20, 0xFF	; 255
    141c:	5f ef       	ldi	r21, 0xFF	; 255
    141e:	ba 01       	movw	r22, r20
    1420:	43 83       	std	Z+3, r20	; 0x03
    1422:	54 83       	std	Z+4, r21	; 0x04
    1424:	65 83       	std	Z+5, r22	; 0x05
    1426:	76 83       	std	Z+6, r23	; 0x06

    /* The list end next and previous pointers point to itself so we know
    when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );    /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1428:	90 87       	std	Z+8, r25	; 0x08
    142a:	87 83       	std	Z+7, r24	; 0x07
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    142c:	92 87       	std	Z+10, r25	; 0x0a
    142e:	81 87       	std	Z+9, r24	; 0x09

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    1430:	10 82       	st	Z, r1
    1432:	08 95       	ret

00001434 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
    1434:	fc 01       	movw	r30, r24
    1436:	13 86       	std	Z+11, r1	; 0x0b
    1438:	12 86       	std	Z+10, r1	; 0x0a
    143a:	08 95       	ret

0000143c <vListInsertEnd>:
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    143c:	cf 93       	push	r28
    143e:	df 93       	push	r29
    1440:	9c 01       	movw	r18, r24
    1442:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
    1444:	dc 01       	movw	r26, r24
    1446:	11 96       	adiw	r26, 0x01	; 1
    1448:	cd 91       	ld	r28, X+
    144a:	dc 91       	ld	r29, X
    144c:	12 97       	sbiw	r26, 0x02	; 2
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
    makes the new list item the last item to be removed by a call to
    listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
    144e:	d5 83       	std	Z+5, r29	; 0x05
    1450:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    1452:	8e 81       	ldd	r24, Y+6	; 0x06
    1454:	9f 81       	ldd	r25, Y+7	; 0x07
    1456:	97 83       	std	Z+7, r25	; 0x07
    1458:	86 83       	std	Z+6, r24	; 0x06

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
    145a:	8e 81       	ldd	r24, Y+6	; 0x06
    145c:	9f 81       	ldd	r25, Y+7	; 0x07
    145e:	dc 01       	movw	r26, r24
    1460:	15 96       	adiw	r26, 0x05	; 5
    1462:	7c 93       	st	X, r23
    1464:	6e 93       	st	-X, r22
    1466:	14 97       	sbiw	r26, 0x04	; 4
    pxIndex->pxPrevious = pxNewListItem;
    1468:	7f 83       	std	Y+7, r23	; 0x07
    146a:	6e 83       	std	Y+6, r22	; 0x06

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
    146c:	33 87       	std	Z+11, r19	; 0x0b
    146e:	22 87       	std	Z+10, r18	; 0x0a

    ( pxList->uxNumberOfItems )++;
    1470:	f9 01       	movw	r30, r18
    1472:	80 81       	ld	r24, Z
    1474:	8f 5f       	subi	r24, 0xFF	; 255
    1476:	80 83       	st	Z, r24
}
    1478:	df 91       	pop	r29
    147a:	cf 91       	pop	r28
    147c:	08 95       	ret

0000147e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    147e:	0f 93       	push	r16
    1480:	1f 93       	push	r17
    1482:	cf 93       	push	r28
    1484:	df 93       	push	r29
    1486:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    1488:	08 81       	ld	r16, Y
    148a:	19 81       	ldd	r17, Y+1	; 0x01
    148c:	2a 81       	ldd	r18, Y+2	; 0x02
    148e:	3b 81       	ldd	r19, Y+3	; 0x03
    new list item should be placed after it.  This ensures that TCBs which are
    stored in ready lists (all of which have the same xItemValue value) get a
    share of the CPU.  However, if the xItemValue is the same as the back marker
    the iteration loop below will not end.  Therefore the value is checked
    first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
    1490:	0f 3f       	cpi	r16, 0xFF	; 255
    1492:	4f ef       	ldi	r20, 0xFF	; 255
    1494:	14 07       	cpc	r17, r20
    1496:	24 07       	cpc	r18, r20
    1498:	34 07       	cpc	r19, r20
    149a:	21 f4       	brne	.+8      	; 0x14a4 <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
    149c:	fc 01       	movw	r30, r24
    149e:	a1 85       	ldd	r26, Z+9	; 0x09
    14a0:	b2 85       	ldd	r27, Z+10	; 0x0a
    14a2:	11 c0       	rjmp	.+34     	; 0x14c6 <vListInsert+0x48>
            4) Using a queue or semaphore before it has been initialised or
               before the scheduler has been started (are interrupts firing
               before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
    14a4:	dc 01       	movw	r26, r24
    14a6:	13 96       	adiw	r26, 0x03	; 3
    14a8:	01 c0       	rjmp	.+2      	; 0x14ac <vListInsert+0x2e>
    14aa:	df 01       	movw	r26, r30
    14ac:	14 96       	adiw	r26, 0x04	; 4
    14ae:	ed 91       	ld	r30, X+
    14b0:	fc 91       	ld	r31, X
    14b2:	15 97       	sbiw	r26, 0x05	; 5
    14b4:	40 81       	ld	r20, Z
    14b6:	51 81       	ldd	r21, Z+1	; 0x01
    14b8:	62 81       	ldd	r22, Z+2	; 0x02
    14ba:	73 81       	ldd	r23, Z+3	; 0x03
    14bc:	04 17       	cp	r16, r20
    14be:	15 07       	cpc	r17, r21
    14c0:	26 07       	cpc	r18, r22
    14c2:	37 07       	cpc	r19, r23
    14c4:	90 f7       	brcc	.-28     	; 0x14aa <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
            insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
    14c6:	14 96       	adiw	r26, 0x04	; 4
    14c8:	ed 91       	ld	r30, X+
    14ca:	fc 91       	ld	r31, X
    14cc:	15 97       	sbiw	r26, 0x05	; 5
    14ce:	fd 83       	std	Y+5, r31	; 0x05
    14d0:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    14d2:	d7 83       	std	Z+7, r29	; 0x07
    14d4:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
    14d6:	bf 83       	std	Y+7, r27	; 0x07
    14d8:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
    14da:	15 96       	adiw	r26, 0x05	; 5
    14dc:	dc 93       	st	X, r29
    14de:	ce 93       	st	-X, r28
    14e0:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
    item later. */
    pxNewListItem->pxContainer = pxList;
    14e2:	9b 87       	std	Y+11, r25	; 0x0b
    14e4:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
    14e6:	fc 01       	movw	r30, r24
    14e8:	20 81       	ld	r18, Z
    14ea:	2f 5f       	subi	r18, 0xFF	; 255
    14ec:	20 83       	st	Z, r18
}
    14ee:	df 91       	pop	r29
    14f0:	cf 91       	pop	r28
    14f2:	1f 91       	pop	r17
    14f4:	0f 91       	pop	r16
    14f6:	08 95       	ret

000014f8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    14f8:	cf 93       	push	r28
    14fa:	df 93       	push	r29
    14fc:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
    14fe:	a2 85       	ldd	r26, Z+10	; 0x0a
    1500:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    1502:	c4 81       	ldd	r28, Z+4	; 0x04
    1504:	d5 81       	ldd	r29, Z+5	; 0x05
    1506:	86 81       	ldd	r24, Z+6	; 0x06
    1508:	97 81       	ldd	r25, Z+7	; 0x07
    150a:	9f 83       	std	Y+7, r25	; 0x07
    150c:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    150e:	c6 81       	ldd	r28, Z+6	; 0x06
    1510:	d7 81       	ldd	r29, Z+7	; 0x07
    1512:	84 81       	ldd	r24, Z+4	; 0x04
    1514:	95 81       	ldd	r25, Z+5	; 0x05
    1516:	9d 83       	std	Y+5, r25	; 0x05
    1518:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
    151a:	11 96       	adiw	r26, 0x01	; 1
    151c:	8d 91       	ld	r24, X+
    151e:	9c 91       	ld	r25, X
    1520:	12 97       	sbiw	r26, 0x02	; 2
    1522:	e8 17       	cp	r30, r24
    1524:	f9 07       	cpc	r31, r25
    1526:	31 f4       	brne	.+12     	; 0x1534 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
    1528:	86 81       	ldd	r24, Z+6	; 0x06
    152a:	97 81       	ldd	r25, Z+7	; 0x07
    152c:	12 96       	adiw	r26, 0x02	; 2
    152e:	9c 93       	st	X, r25
    1530:	8e 93       	st	-X, r24
    1532:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
    1534:	13 86       	std	Z+11, r1	; 0x0b
    1536:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
    1538:	8c 91       	ld	r24, X
    153a:	81 50       	subi	r24, 0x01	; 1
    153c:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
    153e:	8c 91       	ld	r24, X
}
    1540:	df 91       	pop	r29
    1542:	cf 91       	pop	r28
    1544:	08 95       	ret

00001546 <pxPortInitialiseStack>:
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    1546:	31 e1       	ldi	r19, 0x11	; 17
    1548:	fc 01       	movw	r30, r24
    154a:	30 83       	st	Z, r19
    154c:	31 97       	sbiw	r30, 0x01	; 1
    154e:	22 e2       	ldi	r18, 0x22	; 34
    1550:	20 83       	st	Z, r18
    1552:	31 97       	sbiw	r30, 0x01	; 1
    1554:	a3 e3       	ldi	r26, 0x33	; 51
    1556:	a0 83       	st	Z, r26
    1558:	31 97       	sbiw	r30, 0x01	; 1
    155a:	60 83       	st	Z, r22
    155c:	31 97       	sbiw	r30, 0x01	; 1
    155e:	70 83       	st	Z, r23
    1560:	31 97       	sbiw	r30, 0x01	; 1
    1562:	10 82       	st	Z, r1
    1564:	31 97       	sbiw	r30, 0x01	; 1
    1566:	10 82       	st	Z, r1
    1568:	31 97       	sbiw	r30, 0x01	; 1
    156a:	60 e8       	ldi	r22, 0x80	; 128
    156c:	60 83       	st	Z, r22
    156e:	31 97       	sbiw	r30, 0x01	; 1
    1570:	10 82       	st	Z, r1
    1572:	31 97       	sbiw	r30, 0x01	; 1
    1574:	10 82       	st	Z, r1
    1576:	31 97       	sbiw	r30, 0x01	; 1
    1578:	10 82       	st	Z, r1
    157a:	31 97       	sbiw	r30, 0x01	; 1
    157c:	62 e0       	ldi	r22, 0x02	; 2
    157e:	60 83       	st	Z, r22
    1580:	31 97       	sbiw	r30, 0x01	; 1
    1582:	63 e0       	ldi	r22, 0x03	; 3
    1584:	60 83       	st	Z, r22
    1586:	31 97       	sbiw	r30, 0x01	; 1
    1588:	64 e0       	ldi	r22, 0x04	; 4
    158a:	60 83       	st	Z, r22
    158c:	31 97       	sbiw	r30, 0x01	; 1
    158e:	65 e0       	ldi	r22, 0x05	; 5
    1590:	60 83       	st	Z, r22
    1592:	31 97       	sbiw	r30, 0x01	; 1
    1594:	66 e0       	ldi	r22, 0x06	; 6
    1596:	60 83       	st	Z, r22
    1598:	31 97       	sbiw	r30, 0x01	; 1
    159a:	67 e0       	ldi	r22, 0x07	; 7
    159c:	60 83       	st	Z, r22
    159e:	31 97       	sbiw	r30, 0x01	; 1
    15a0:	68 e0       	ldi	r22, 0x08	; 8
    15a2:	60 83       	st	Z, r22
    15a4:	31 97       	sbiw	r30, 0x01	; 1
    15a6:	69 e0       	ldi	r22, 0x09	; 9
    15a8:	60 83       	st	Z, r22
    15aa:	31 97       	sbiw	r30, 0x01	; 1
    15ac:	60 e1       	ldi	r22, 0x10	; 16
    15ae:	60 83       	st	Z, r22
    15b0:	31 97       	sbiw	r30, 0x01	; 1
    15b2:	30 83       	st	Z, r19
    15b4:	31 97       	sbiw	r30, 0x01	; 1
    15b6:	32 e1       	ldi	r19, 0x12	; 18
    15b8:	30 83       	st	Z, r19
    15ba:	31 97       	sbiw	r30, 0x01	; 1
    15bc:	33 e1       	ldi	r19, 0x13	; 19
    15be:	30 83       	st	Z, r19
    15c0:	31 97       	sbiw	r30, 0x01	; 1
    15c2:	34 e1       	ldi	r19, 0x14	; 20
    15c4:	30 83       	st	Z, r19
    15c6:	31 97       	sbiw	r30, 0x01	; 1
    15c8:	35 e1       	ldi	r19, 0x15	; 21
    15ca:	30 83       	st	Z, r19
    15cc:	31 97       	sbiw	r30, 0x01	; 1
    15ce:	36 e1       	ldi	r19, 0x16	; 22
    15d0:	30 83       	st	Z, r19
    15d2:	31 97       	sbiw	r30, 0x01	; 1
    15d4:	37 e1       	ldi	r19, 0x17	; 23
    15d6:	30 83       	st	Z, r19
    15d8:	31 97       	sbiw	r30, 0x01	; 1
    15da:	38 e1       	ldi	r19, 0x18	; 24
    15dc:	30 83       	st	Z, r19
    15de:	31 97       	sbiw	r30, 0x01	; 1
    15e0:	39 e1       	ldi	r19, 0x19	; 25
    15e2:	30 83       	st	Z, r19
    15e4:	31 97       	sbiw	r30, 0x01	; 1
    15e6:	30 e2       	ldi	r19, 0x20	; 32
    15e8:	30 83       	st	Z, r19
    15ea:	31 97       	sbiw	r30, 0x01	; 1
    15ec:	31 e2       	ldi	r19, 0x21	; 33
    15ee:	30 83       	st	Z, r19
    15f0:	31 97       	sbiw	r30, 0x01	; 1
    15f2:	20 83       	st	Z, r18
    15f4:	31 97       	sbiw	r30, 0x01	; 1
    15f6:	23 e2       	ldi	r18, 0x23	; 35
    15f8:	20 83       	st	Z, r18
    15fa:	31 97       	sbiw	r30, 0x01	; 1
    15fc:	40 83       	st	Z, r20
    15fe:	31 97       	sbiw	r30, 0x01	; 1
    1600:	50 83       	st	Z, r21
    1602:	31 97       	sbiw	r30, 0x01	; 1
    1604:	26 e2       	ldi	r18, 0x26	; 38
    1606:	20 83       	st	Z, r18
    1608:	31 97       	sbiw	r30, 0x01	; 1
    160a:	27 e2       	ldi	r18, 0x27	; 39
    160c:	20 83       	st	Z, r18
    160e:	31 97       	sbiw	r30, 0x01	; 1
    1610:	28 e2       	ldi	r18, 0x28	; 40
    1612:	20 83       	st	Z, r18
    1614:	31 97       	sbiw	r30, 0x01	; 1
    1616:	29 e2       	ldi	r18, 0x29	; 41
    1618:	20 83       	st	Z, r18
    161a:	31 97       	sbiw	r30, 0x01	; 1
    161c:	20 e3       	ldi	r18, 0x30	; 48
    161e:	20 83       	st	Z, r18
    1620:	31 97       	sbiw	r30, 0x01	; 1
    1622:	21 e3       	ldi	r18, 0x31	; 49
    1624:	20 83       	st	Z, r18
    1626:	89 97       	sbiw	r24, 0x29	; 41
    1628:	08 95       	ret

0000162a <xPortStartScheduler>:
    162a:	a8 95       	wdr
    162c:	90 ec       	ldi	r25, 0xC0	; 192
    162e:	88 e1       	ldi	r24, 0x18	; 24
    1630:	0f b6       	in	r0, 0x3f	; 63
    1632:	f8 94       	cli
    1634:	a8 95       	wdr
    1636:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    163a:	0f be       	out	0x3f, r0	; 63
    163c:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    1640:	a0 91 df 18 	lds	r26, 0x18DF	; 0x8018df <pxCurrentTCB>
    1644:	b0 91 e0 18 	lds	r27, 0x18E0	; 0x8018e0 <pxCurrentTCB+0x1>
    1648:	cd 91       	ld	r28, X+
    164a:	cd bf       	out	0x3d, r28	; 61
    164c:	dd 91       	ld	r29, X+
    164e:	de bf       	out	0x3e, r29	; 62
    1650:	ff 91       	pop	r31
    1652:	ef 91       	pop	r30
    1654:	df 91       	pop	r29
    1656:	cf 91       	pop	r28
    1658:	bf 91       	pop	r27
    165a:	af 91       	pop	r26
    165c:	9f 91       	pop	r25
    165e:	8f 91       	pop	r24
    1660:	7f 91       	pop	r23
    1662:	6f 91       	pop	r22
    1664:	5f 91       	pop	r21
    1666:	4f 91       	pop	r20
    1668:	3f 91       	pop	r19
    166a:	2f 91       	pop	r18
    166c:	1f 91       	pop	r17
    166e:	0f 91       	pop	r16
    1670:	ff 90       	pop	r15
    1672:	ef 90       	pop	r14
    1674:	df 90       	pop	r13
    1676:	cf 90       	pop	r12
    1678:	bf 90       	pop	r11
    167a:	af 90       	pop	r10
    167c:	9f 90       	pop	r9
    167e:	8f 90       	pop	r8
    1680:	7f 90       	pop	r7
    1682:	6f 90       	pop	r6
    1684:	5f 90       	pop	r5
    1686:	4f 90       	pop	r4
    1688:	3f 90       	pop	r3
    168a:	2f 90       	pop	r2
    168c:	1f 90       	pop	r1
    168e:	0f 90       	pop	r0
    1690:	0c be       	out	0x3c, r0	; 60
    1692:	0f 90       	pop	r0
    1694:	0b be       	out	0x3b, r0	; 59
    1696:	0f 90       	pop	r0
    1698:	0f be       	out	0x3f, r0	; 63
    169a:	0f 90       	pop	r0
    169c:	08 95       	ret
    169e:	81 e0       	ldi	r24, 0x01	; 1
    16a0:	08 95       	ret

000016a2 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYield( void )
{
    portSAVE_CONTEXT();
    16a2:	0f 92       	push	r0
    16a4:	0f b6       	in	r0, 0x3f	; 63
    16a6:	f8 94       	cli
    16a8:	0f 92       	push	r0
    16aa:	0b b6       	in	r0, 0x3b	; 59
    16ac:	0f 92       	push	r0
    16ae:	0c b6       	in	r0, 0x3c	; 60
    16b0:	0f 92       	push	r0
    16b2:	1f 92       	push	r1
    16b4:	11 24       	eor	r1, r1
    16b6:	2f 92       	push	r2
    16b8:	3f 92       	push	r3
    16ba:	4f 92       	push	r4
    16bc:	5f 92       	push	r5
    16be:	6f 92       	push	r6
    16c0:	7f 92       	push	r7
    16c2:	8f 92       	push	r8
    16c4:	9f 92       	push	r9
    16c6:	af 92       	push	r10
    16c8:	bf 92       	push	r11
    16ca:	cf 92       	push	r12
    16cc:	df 92       	push	r13
    16ce:	ef 92       	push	r14
    16d0:	ff 92       	push	r15
    16d2:	0f 93       	push	r16
    16d4:	1f 93       	push	r17
    16d6:	2f 93       	push	r18
    16d8:	3f 93       	push	r19
    16da:	4f 93       	push	r20
    16dc:	5f 93       	push	r21
    16de:	6f 93       	push	r22
    16e0:	7f 93       	push	r23
    16e2:	8f 93       	push	r24
    16e4:	9f 93       	push	r25
    16e6:	af 93       	push	r26
    16e8:	bf 93       	push	r27
    16ea:	cf 93       	push	r28
    16ec:	df 93       	push	r29
    16ee:	ef 93       	push	r30
    16f0:	ff 93       	push	r31
    16f2:	a0 91 df 18 	lds	r26, 0x18DF	; 0x8018df <pxCurrentTCB>
    16f6:	b0 91 e0 18 	lds	r27, 0x18E0	; 0x8018e0 <pxCurrentTCB+0x1>
    16fa:	0d b6       	in	r0, 0x3d	; 61
    16fc:	0d 92       	st	X+, r0
    16fe:	0e b6       	in	r0, 0x3e	; 62
    1700:	0d 92       	st	X+, r0
    vTaskSwitchContext();
    1702:	0e 94 2c 16 	call	0x2c58	; 0x2c58 <vTaskSwitchContext>
    portRESTORE_CONTEXT();
    1706:	a0 91 df 18 	lds	r26, 0x18DF	; 0x8018df <pxCurrentTCB>
    170a:	b0 91 e0 18 	lds	r27, 0x18E0	; 0x8018e0 <pxCurrentTCB+0x1>
    170e:	cd 91       	ld	r28, X+
    1710:	cd bf       	out	0x3d, r28	; 61
    1712:	dd 91       	ld	r29, X+
    1714:	de bf       	out	0x3e, r29	; 62
    1716:	ff 91       	pop	r31
    1718:	ef 91       	pop	r30
    171a:	df 91       	pop	r29
    171c:	cf 91       	pop	r28
    171e:	bf 91       	pop	r27
    1720:	af 91       	pop	r26
    1722:	9f 91       	pop	r25
    1724:	8f 91       	pop	r24
    1726:	7f 91       	pop	r23
    1728:	6f 91       	pop	r22
    172a:	5f 91       	pop	r21
    172c:	4f 91       	pop	r20
    172e:	3f 91       	pop	r19
    1730:	2f 91       	pop	r18
    1732:	1f 91       	pop	r17
    1734:	0f 91       	pop	r16
    1736:	ff 90       	pop	r15
    1738:	ef 90       	pop	r14
    173a:	df 90       	pop	r13
    173c:	cf 90       	pop	r12
    173e:	bf 90       	pop	r11
    1740:	af 90       	pop	r10
    1742:	9f 90       	pop	r9
    1744:	8f 90       	pop	r8
    1746:	7f 90       	pop	r7
    1748:	6f 90       	pop	r6
    174a:	5f 90       	pop	r5
    174c:	4f 90       	pop	r4
    174e:	3f 90       	pop	r3
    1750:	2f 90       	pop	r2
    1752:	1f 90       	pop	r1
    1754:	0f 90       	pop	r0
    1756:	0c be       	out	0x3c, r0	; 60
    1758:	0f 90       	pop	r0
    175a:	0b be       	out	0x3b, r0	; 59
    175c:	0f 90       	pop	r0
    175e:	0f be       	out	0x3f, r0	; 63
    1760:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
    1762:	08 95       	ret

00001764 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
    1764:	0f 92       	push	r0
    1766:	0f b6       	in	r0, 0x3f	; 63
    1768:	f8 94       	cli
    176a:	0f 92       	push	r0
    176c:	0b b6       	in	r0, 0x3b	; 59
    176e:	0f 92       	push	r0
    1770:	0c b6       	in	r0, 0x3c	; 60
    1772:	0f 92       	push	r0
    1774:	1f 92       	push	r1
    1776:	11 24       	eor	r1, r1
    1778:	2f 92       	push	r2
    177a:	3f 92       	push	r3
    177c:	4f 92       	push	r4
    177e:	5f 92       	push	r5
    1780:	6f 92       	push	r6
    1782:	7f 92       	push	r7
    1784:	8f 92       	push	r8
    1786:	9f 92       	push	r9
    1788:	af 92       	push	r10
    178a:	bf 92       	push	r11
    178c:	cf 92       	push	r12
    178e:	df 92       	push	r13
    1790:	ef 92       	push	r14
    1792:	ff 92       	push	r15
    1794:	0f 93       	push	r16
    1796:	1f 93       	push	r17
    1798:	2f 93       	push	r18
    179a:	3f 93       	push	r19
    179c:	4f 93       	push	r20
    179e:	5f 93       	push	r21
    17a0:	6f 93       	push	r22
    17a2:	7f 93       	push	r23
    17a4:	8f 93       	push	r24
    17a6:	9f 93       	push	r25
    17a8:	af 93       	push	r26
    17aa:	bf 93       	push	r27
    17ac:	cf 93       	push	r28
    17ae:	df 93       	push	r29
    17b0:	ef 93       	push	r30
    17b2:	ff 93       	push	r31
    17b4:	a0 91 df 18 	lds	r26, 0x18DF	; 0x8018df <pxCurrentTCB>
    17b8:	b0 91 e0 18 	lds	r27, 0x18E0	; 0x8018e0 <pxCurrentTCB+0x1>
    17bc:	0d b6       	in	r0, 0x3d	; 61
    17be:	0d 92       	st	X+, r0
    17c0:	0e b6       	in	r0, 0x3e	; 62
    17c2:	0d 92       	st	X+, r0

    sleep_reset();        //     reset the sleep_mode() faster than sleep_disable();
    17c4:	13 be       	out	0x33, r1	; 51

    if( xTaskIncrementTick() != pdFALSE )
    17c6:	0e 94 c2 14 	call	0x2984	; 0x2984 <xTaskIncrementTick>
    17ca:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
    17cc:	0e 94 2c 16 	call	0x2c58	; 0x2c58 <vTaskSwitchContext>
    }

    portRESTORE_CONTEXT();
    17d0:	a0 91 df 18 	lds	r26, 0x18DF	; 0x8018df <pxCurrentTCB>
    17d4:	b0 91 e0 18 	lds	r27, 0x18E0	; 0x8018e0 <pxCurrentTCB+0x1>
    17d8:	cd 91       	ld	r28, X+
    17da:	cd bf       	out	0x3d, r28	; 61
    17dc:	dd 91       	ld	r29, X+
    17de:	de bf       	out	0x3e, r29	; 62
    17e0:	ff 91       	pop	r31
    17e2:	ef 91       	pop	r30
    17e4:	df 91       	pop	r29
    17e6:	cf 91       	pop	r28
    17e8:	bf 91       	pop	r27
    17ea:	af 91       	pop	r26
    17ec:	9f 91       	pop	r25
    17ee:	8f 91       	pop	r24
    17f0:	7f 91       	pop	r23
    17f2:	6f 91       	pop	r22
    17f4:	5f 91       	pop	r21
    17f6:	4f 91       	pop	r20
    17f8:	3f 91       	pop	r19
    17fa:	2f 91       	pop	r18
    17fc:	1f 91       	pop	r17
    17fe:	0f 91       	pop	r16
    1800:	ff 90       	pop	r15
    1802:	ef 90       	pop	r14
    1804:	df 90       	pop	r13
    1806:	cf 90       	pop	r12
    1808:	bf 90       	pop	r11
    180a:	af 90       	pop	r10
    180c:	9f 90       	pop	r9
    180e:	8f 90       	pop	r8
    1810:	7f 90       	pop	r7
    1812:	6f 90       	pop	r6
    1814:	5f 90       	pop	r5
    1816:	4f 90       	pop	r4
    1818:	3f 90       	pop	r3
    181a:	2f 90       	pop	r2
    181c:	1f 90       	pop	r1
    181e:	0f 90       	pop	r0
    1820:	0c be       	out	0x3c, r0	; 60
    1822:	0f 90       	pop	r0
    1824:	0b be       	out	0x3b, r0	; 59
    1826:	0f 90       	pop	r0
    1828:	0f be       	out	0x3f, r0	; 63
    182a:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
    182c:	08 95       	ret

0000182e <__vector_12>:
     */
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
//  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
    182e:	9a df       	rcall	.-204    	; 0x1764 <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
    1830:	18 95       	reti

00001832 <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    1832:	0f b6       	in	r0, 0x3f	; 63
    1834:	f8 94       	cli
    1836:	0f 92       	push	r0
    1838:	fc 01       	movw	r30, r24
    183a:	96 8d       	ldd	r25, Z+30	; 0x1e
    183c:	0f 90       	pop	r0
    183e:	0f be       	out	0x3f, r0	; 63
    1840:	81 e0       	ldi	r24, 0x01	; 1
    1842:	91 11       	cpse	r25, r1
    1844:	80 e0       	ldi	r24, 0x00	; 0
    1846:	08 95       	ret

00001848 <prvCopyDataToQueue>:
    1848:	0f 93       	push	r16
    184a:	1f 93       	push	r17
    184c:	cf 93       	push	r28
    184e:	df 93       	push	r29
    1850:	ec 01       	movw	r28, r24
    1852:	04 2f       	mov	r16, r20
    1854:	1e 8d       	ldd	r17, Y+30	; 0x1e
    1856:	48 a1       	ldd	r20, Y+32	; 0x20
    1858:	41 11       	cpse	r20, r1
    185a:	0c c0       	rjmp	.+24     	; 0x1874 <prvCopyDataToQueue+0x2c>
    185c:	88 81       	ld	r24, Y
    185e:	99 81       	ldd	r25, Y+1	; 0x01
    1860:	89 2b       	or	r24, r25
    1862:	09 f0       	breq	.+2      	; 0x1866 <prvCopyDataToQueue+0x1e>
    1864:	42 c0       	rjmp	.+132    	; 0x18ea <prvCopyDataToQueue+0xa2>
    1866:	8c 81       	ldd	r24, Y+4	; 0x04
    1868:	9d 81       	ldd	r25, Y+5	; 0x05
    186a:	0e 94 7d 18 	call	0x30fa	; 0x30fa <xTaskPriorityDisinherit>
    186e:	1d 82       	std	Y+5, r1	; 0x05
    1870:	1c 82       	std	Y+4, r1	; 0x04
    1872:	42 c0       	rjmp	.+132    	; 0x18f8 <prvCopyDataToQueue+0xb0>
    1874:	01 11       	cpse	r16, r1
    1876:	17 c0       	rjmp	.+46     	; 0x18a6 <prvCopyDataToQueue+0x5e>
    1878:	50 e0       	ldi	r21, 0x00	; 0
    187a:	8a 81       	ldd	r24, Y+2	; 0x02
    187c:	9b 81       	ldd	r25, Y+3	; 0x03
    187e:	0e 94 58 2d 	call	0x5ab0	; 0x5ab0 <memcpy>
    1882:	28 a1       	ldd	r18, Y+32	; 0x20
    1884:	8a 81       	ldd	r24, Y+2	; 0x02
    1886:	9b 81       	ldd	r25, Y+3	; 0x03
    1888:	82 0f       	add	r24, r18
    188a:	91 1d       	adc	r25, r1
    188c:	9b 83       	std	Y+3, r25	; 0x03
    188e:	8a 83       	std	Y+2, r24	; 0x02
    1890:	2c 81       	ldd	r18, Y+4	; 0x04
    1892:	3d 81       	ldd	r19, Y+5	; 0x05
    1894:	82 17       	cp	r24, r18
    1896:	93 07       	cpc	r25, r19
    1898:	50 f1       	brcs	.+84     	; 0x18ee <prvCopyDataToQueue+0xa6>
    189a:	88 81       	ld	r24, Y
    189c:	99 81       	ldd	r25, Y+1	; 0x01
    189e:	9b 83       	std	Y+3, r25	; 0x03
    18a0:	8a 83       	std	Y+2, r24	; 0x02
    18a2:	80 e0       	ldi	r24, 0x00	; 0
    18a4:	29 c0       	rjmp	.+82     	; 0x18f8 <prvCopyDataToQueue+0xb0>
    18a6:	50 e0       	ldi	r21, 0x00	; 0
    18a8:	8e 81       	ldd	r24, Y+6	; 0x06
    18aa:	9f 81       	ldd	r25, Y+7	; 0x07
    18ac:	0e 94 58 2d 	call	0x5ab0	; 0x5ab0 <memcpy>
    18b0:	88 a1       	ldd	r24, Y+32	; 0x20
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	91 95       	neg	r25
    18b6:	81 95       	neg	r24
    18b8:	91 09       	sbc	r25, r1
    18ba:	2e 81       	ldd	r18, Y+6	; 0x06
    18bc:	3f 81       	ldd	r19, Y+7	; 0x07
    18be:	28 0f       	add	r18, r24
    18c0:	39 1f       	adc	r19, r25
    18c2:	3f 83       	std	Y+7, r19	; 0x07
    18c4:	2e 83       	std	Y+6, r18	; 0x06
    18c6:	48 81       	ld	r20, Y
    18c8:	59 81       	ldd	r21, Y+1	; 0x01
    18ca:	24 17       	cp	r18, r20
    18cc:	35 07       	cpc	r19, r21
    18ce:	30 f4       	brcc	.+12     	; 0x18dc <prvCopyDataToQueue+0x94>
    18d0:	2c 81       	ldd	r18, Y+4	; 0x04
    18d2:	3d 81       	ldd	r19, Y+5	; 0x05
    18d4:	82 0f       	add	r24, r18
    18d6:	93 1f       	adc	r25, r19
    18d8:	9f 83       	std	Y+7, r25	; 0x07
    18da:	8e 83       	std	Y+6, r24	; 0x06
    18dc:	02 30       	cpi	r16, 0x02	; 2
    18de:	49 f4       	brne	.+18     	; 0x18f2 <prvCopyDataToQueue+0xaa>
    18e0:	11 23       	and	r17, r17
    18e2:	49 f0       	breq	.+18     	; 0x18f6 <prvCopyDataToQueue+0xae>
    18e4:	11 50       	subi	r17, 0x01	; 1
    18e6:	80 e0       	ldi	r24, 0x00	; 0
    18e8:	07 c0       	rjmp	.+14     	; 0x18f8 <prvCopyDataToQueue+0xb0>
    18ea:	80 e0       	ldi	r24, 0x00	; 0
    18ec:	05 c0       	rjmp	.+10     	; 0x18f8 <prvCopyDataToQueue+0xb0>
    18ee:	80 e0       	ldi	r24, 0x00	; 0
    18f0:	03 c0       	rjmp	.+6      	; 0x18f8 <prvCopyDataToQueue+0xb0>
    18f2:	80 e0       	ldi	r24, 0x00	; 0
    18f4:	01 c0       	rjmp	.+2      	; 0x18f8 <prvCopyDataToQueue+0xb0>
    18f6:	80 e0       	ldi	r24, 0x00	; 0
    18f8:	1f 5f       	subi	r17, 0xFF	; 255
    18fa:	1e 8f       	std	Y+30, r17	; 0x1e
    18fc:	df 91       	pop	r29
    18fe:	cf 91       	pop	r28
    1900:	1f 91       	pop	r17
    1902:	0f 91       	pop	r16
    1904:	08 95       	ret

00001906 <prvCopyDataFromQueue>:
    1906:	fc 01       	movw	r30, r24
    1908:	40 a1       	ldd	r20, Z+32	; 0x20
    190a:	44 23       	and	r20, r20
    190c:	a9 f0       	breq	.+42     	; 0x1938 <prvCopyDataFromQueue+0x32>
    190e:	50 e0       	ldi	r21, 0x00	; 0
    1910:	26 81       	ldd	r18, Z+6	; 0x06
    1912:	37 81       	ldd	r19, Z+7	; 0x07
    1914:	24 0f       	add	r18, r20
    1916:	35 1f       	adc	r19, r21
    1918:	37 83       	std	Z+7, r19	; 0x07
    191a:	26 83       	std	Z+6, r18	; 0x06
    191c:	84 81       	ldd	r24, Z+4	; 0x04
    191e:	95 81       	ldd	r25, Z+5	; 0x05
    1920:	28 17       	cp	r18, r24
    1922:	39 07       	cpc	r19, r25
    1924:	20 f0       	brcs	.+8      	; 0x192e <prvCopyDataFromQueue+0x28>
    1926:	80 81       	ld	r24, Z
    1928:	91 81       	ldd	r25, Z+1	; 0x01
    192a:	97 83       	std	Z+7, r25	; 0x07
    192c:	86 83       	std	Z+6, r24	; 0x06
    192e:	cb 01       	movw	r24, r22
    1930:	66 81       	ldd	r22, Z+6	; 0x06
    1932:	77 81       	ldd	r23, Z+7	; 0x07
    1934:	0c 94 58 2d 	jmp	0x5ab0	; 0x5ab0 <memcpy>
    1938:	08 95       	ret

0000193a <prvUnlockQueue>:
    193a:	ef 92       	push	r14
    193c:	ff 92       	push	r15
    193e:	0f 93       	push	r16
    1940:	1f 93       	push	r17
    1942:	cf 93       	push	r28
    1944:	8c 01       	movw	r16, r24
    1946:	0f b6       	in	r0, 0x3f	; 63
    1948:	f8 94       	cli
    194a:	0f 92       	push	r0
    194c:	fc 01       	movw	r30, r24
    194e:	c2 a1       	ldd	r28, Z+34	; 0x22
    1950:	1c 16       	cp	r1, r28
    1952:	ac f4       	brge	.+42     	; 0x197e <prvUnlockQueue+0x44>
    1954:	83 89       	ldd	r24, Z+19	; 0x13
    1956:	81 11       	cpse	r24, r1
    1958:	06 c0       	rjmp	.+12     	; 0x1966 <prvUnlockQueue+0x2c>
    195a:	11 c0       	rjmp	.+34     	; 0x197e <prvUnlockQueue+0x44>
    195c:	f8 01       	movw	r30, r16
    195e:	83 89       	ldd	r24, Z+19	; 0x13
    1960:	81 11       	cpse	r24, r1
    1962:	05 c0       	rjmp	.+10     	; 0x196e <prvUnlockQueue+0x34>
    1964:	0c c0       	rjmp	.+24     	; 0x197e <prvUnlockQueue+0x44>
    1966:	78 01       	movw	r14, r16
    1968:	f3 e1       	ldi	r31, 0x13	; 19
    196a:	ef 0e       	add	r14, r31
    196c:	f1 1c       	adc	r15, r1
    196e:	c7 01       	movw	r24, r14
    1970:	0e 94 06 17 	call	0x2e0c	; 0x2e0c <xTaskRemoveFromEventList>
    1974:	81 11       	cpse	r24, r1
    1976:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <vTaskMissedYield>
    197a:	c1 50       	subi	r28, 0x01	; 1
    197c:	79 f7       	brne	.-34     	; 0x195c <prvUnlockQueue+0x22>
    197e:	8f ef       	ldi	r24, 0xFF	; 255
    1980:	f8 01       	movw	r30, r16
    1982:	82 a3       	std	Z+34, r24	; 0x22
    1984:	0f 90       	pop	r0
    1986:	0f be       	out	0x3f, r0	; 63
    1988:	0f b6       	in	r0, 0x3f	; 63
    198a:	f8 94       	cli
    198c:	0f 92       	push	r0
    198e:	c1 a1       	ldd	r28, Z+33	; 0x21
    1990:	1c 16       	cp	r1, r28
    1992:	ac f4       	brge	.+42     	; 0x19be <prvUnlockQueue+0x84>
    1994:	80 85       	ldd	r24, Z+8	; 0x08
    1996:	81 11       	cpse	r24, r1
    1998:	06 c0       	rjmp	.+12     	; 0x19a6 <prvUnlockQueue+0x6c>
    199a:	11 c0       	rjmp	.+34     	; 0x19be <prvUnlockQueue+0x84>
    199c:	f8 01       	movw	r30, r16
    199e:	80 85       	ldd	r24, Z+8	; 0x08
    19a0:	81 11       	cpse	r24, r1
    19a2:	05 c0       	rjmp	.+10     	; 0x19ae <prvUnlockQueue+0x74>
    19a4:	0c c0       	rjmp	.+24     	; 0x19be <prvUnlockQueue+0x84>
    19a6:	78 01       	movw	r14, r16
    19a8:	f8 e0       	ldi	r31, 0x08	; 8
    19aa:	ef 0e       	add	r14, r31
    19ac:	f1 1c       	adc	r15, r1
    19ae:	c7 01       	movw	r24, r14
    19b0:	0e 94 06 17 	call	0x2e0c	; 0x2e0c <xTaskRemoveFromEventList>
    19b4:	81 11       	cpse	r24, r1
    19b6:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <vTaskMissedYield>
    19ba:	c1 50       	subi	r28, 0x01	; 1
    19bc:	79 f7       	brne	.-34     	; 0x199c <prvUnlockQueue+0x62>
    19be:	8f ef       	ldi	r24, 0xFF	; 255
    19c0:	f8 01       	movw	r30, r16
    19c2:	81 a3       	std	Z+33, r24	; 0x21
    19c4:	0f 90       	pop	r0
    19c6:	0f be       	out	0x3f, r0	; 63
    19c8:	cf 91       	pop	r28
    19ca:	1f 91       	pop	r17
    19cc:	0f 91       	pop	r16
    19ce:	ff 90       	pop	r15
    19d0:	ef 90       	pop	r14
    19d2:	08 95       	ret

000019d4 <xQueueGenericReset>:
    19d4:	cf 93       	push	r28
    19d6:	df 93       	push	r29
    19d8:	ec 01       	movw	r28, r24
    19da:	0f b6       	in	r0, 0x3f	; 63
    19dc:	f8 94       	cli
    19de:	0f 92       	push	r0
    19e0:	e8 81       	ld	r30, Y
    19e2:	f9 81       	ldd	r31, Y+1	; 0x01
    19e4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    19e6:	28 a1       	ldd	r18, Y+32	; 0x20
    19e8:	90 e0       	ldi	r25, 0x00	; 0
    19ea:	30 e0       	ldi	r19, 0x00	; 0
    19ec:	82 9f       	mul	r24, r18
    19ee:	a0 01       	movw	r20, r0
    19f0:	83 9f       	mul	r24, r19
    19f2:	50 0d       	add	r21, r0
    19f4:	92 9f       	mul	r25, r18
    19f6:	50 0d       	add	r21, r0
    19f8:	11 24       	eor	r1, r1
    19fa:	4e 0f       	add	r20, r30
    19fc:	5f 1f       	adc	r21, r31
    19fe:	5d 83       	std	Y+5, r21	; 0x05
    1a00:	4c 83       	std	Y+4, r20	; 0x04
    1a02:	1e 8e       	std	Y+30, r1	; 0x1e
    1a04:	fb 83       	std	Y+3, r31	; 0x03
    1a06:	ea 83       	std	Y+2, r30	; 0x02
    1a08:	01 97       	sbiw	r24, 0x01	; 1
    1a0a:	82 9f       	mul	r24, r18
    1a0c:	a0 01       	movw	r20, r0
    1a0e:	83 9f       	mul	r24, r19
    1a10:	50 0d       	add	r21, r0
    1a12:	92 9f       	mul	r25, r18
    1a14:	50 0d       	add	r21, r0
    1a16:	11 24       	eor	r1, r1
    1a18:	cf 01       	movw	r24, r30
    1a1a:	84 0f       	add	r24, r20
    1a1c:	95 1f       	adc	r25, r21
    1a1e:	9f 83       	std	Y+7, r25	; 0x07
    1a20:	8e 83       	std	Y+6, r24	; 0x06
    1a22:	8f ef       	ldi	r24, 0xFF	; 255
    1a24:	89 a3       	std	Y+33, r24	; 0x21
    1a26:	8a a3       	std	Y+34, r24	; 0x22
    1a28:	61 11       	cpse	r22, r1
    1a2a:	0b c0       	rjmp	.+22     	; 0x1a42 <xQueueGenericReset+0x6e>
    1a2c:	88 85       	ldd	r24, Y+8	; 0x08
    1a2e:	88 23       	and	r24, r24
    1a30:	71 f0       	breq	.+28     	; 0x1a4e <xQueueGenericReset+0x7a>
    1a32:	ce 01       	movw	r24, r28
    1a34:	08 96       	adiw	r24, 0x08	; 8
    1a36:	0e 94 06 17 	call	0x2e0c	; 0x2e0c <xTaskRemoveFromEventList>
    1a3a:	88 23       	and	r24, r24
    1a3c:	41 f0       	breq	.+16     	; 0x1a4e <xQueueGenericReset+0x7a>
    1a3e:	31 de       	rcall	.-926    	; 0x16a2 <vPortYield>
    1a40:	06 c0       	rjmp	.+12     	; 0x1a4e <xQueueGenericReset+0x7a>
    1a42:	ce 01       	movw	r24, r28
    1a44:	08 96       	adiw	r24, 0x08	; 8
    1a46:	e5 dc       	rcall	.-1590   	; 0x1412 <vListInitialise>
    1a48:	ce 01       	movw	r24, r28
    1a4a:	43 96       	adiw	r24, 0x13	; 19
    1a4c:	e2 dc       	rcall	.-1596   	; 0x1412 <vListInitialise>
    1a4e:	0f 90       	pop	r0
    1a50:	0f be       	out	0x3f, r0	; 63
    1a52:	81 e0       	ldi	r24, 0x01	; 1
    1a54:	df 91       	pop	r29
    1a56:	cf 91       	pop	r28
    1a58:	08 95       	ret

00001a5a <xQueueGenericCreate>:
    1a5a:	ff 92       	push	r15
    1a5c:	0f 93       	push	r16
    1a5e:	1f 93       	push	r17
    1a60:	cf 93       	push	r28
    1a62:	df 93       	push	r29
    1a64:	08 2f       	mov	r16, r24
    1a66:	16 2f       	mov	r17, r22
    1a68:	f4 2e       	mov	r15, r20
    1a6a:	66 23       	and	r22, r22
    1a6c:	b9 f0       	breq	.+46     	; 0x1a9c <xQueueGenericCreate+0x42>
    1a6e:	86 9f       	mul	r24, r22
    1a70:	c0 01       	movw	r24, r0
    1a72:	11 24       	eor	r1, r1
    1a74:	85 96       	adiw	r24, 0x25	; 37
    1a76:	e3 db       	rcall	.-2106   	; 0x123e <pvPortMalloc>
    1a78:	ec 01       	movw	r28, r24
    1a7a:	00 97       	sbiw	r24, 0x00	; 0
    1a7c:	41 f4       	brne	.+16     	; 0x1a8e <xQueueGenericCreate+0x34>
    1a7e:	14 c0       	rjmp	.+40     	; 0x1aa8 <xQueueGenericCreate+0x4e>
    1a80:	0f 8f       	std	Y+31, r16	; 0x1f
    1a82:	18 a3       	std	Y+32, r17	; 0x20
    1a84:	61 e0       	ldi	r22, 0x01	; 1
    1a86:	ce 01       	movw	r24, r28
    1a88:	a5 df       	rcall	.-182    	; 0x19d4 <xQueueGenericReset>
    1a8a:	fc a2       	std	Y+36, r15	; 0x24
    1a8c:	0d c0       	rjmp	.+26     	; 0x1aa8 <xQueueGenericCreate+0x4e>
    1a8e:	85 96       	adiw	r24, 0x25	; 37
    1a90:	99 83       	std	Y+1, r25	; 0x01
    1a92:	88 83       	st	Y, r24
    1a94:	f5 cf       	rjmp	.-22     	; 0x1a80 <xQueueGenericCreate+0x26>
    1a96:	d9 83       	std	Y+1, r29	; 0x01
    1a98:	c8 83       	st	Y, r28
    1a9a:	f2 cf       	rjmp	.-28     	; 0x1a80 <xQueueGenericCreate+0x26>
    1a9c:	85 e2       	ldi	r24, 0x25	; 37
    1a9e:	90 e0       	ldi	r25, 0x00	; 0
    1aa0:	ce db       	rcall	.-2148   	; 0x123e <pvPortMalloc>
    1aa2:	ec 01       	movw	r28, r24
    1aa4:	89 2b       	or	r24, r25
    1aa6:	b9 f7       	brne	.-18     	; 0x1a96 <xQueueGenericCreate+0x3c>
    1aa8:	ce 01       	movw	r24, r28
    1aaa:	df 91       	pop	r29
    1aac:	cf 91       	pop	r28
    1aae:	1f 91       	pop	r17
    1ab0:	0f 91       	pop	r16
    1ab2:	ff 90       	pop	r15
    1ab4:	08 95       	ret

00001ab6 <xQueueGenericSend>:
    1ab6:	9f 92       	push	r9
    1ab8:	af 92       	push	r10
    1aba:	bf 92       	push	r11
    1abc:	cf 92       	push	r12
    1abe:	df 92       	push	r13
    1ac0:	ef 92       	push	r14
    1ac2:	ff 92       	push	r15
    1ac4:	0f 93       	push	r16
    1ac6:	1f 93       	push	r17
    1ac8:	cf 93       	push	r28
    1aca:	df 93       	push	r29
    1acc:	cd b7       	in	r28, 0x3d	; 61
    1ace:	de b7       	in	r29, 0x3e	; 62
    1ad0:	29 97       	sbiw	r28, 0x09	; 9
    1ad2:	0f b6       	in	r0, 0x3f	; 63
    1ad4:	f8 94       	cli
    1ad6:	de bf       	out	0x3e, r29	; 62
    1ad8:	0f be       	out	0x3f, r0	; 63
    1ada:	cd bf       	out	0x3d, r28	; 61
    1adc:	7c 01       	movw	r14, r24
    1ade:	5b 01       	movw	r10, r22
    1ae0:	2e 83       	std	Y+6, r18	; 0x06
    1ae2:	3f 83       	std	Y+7, r19	; 0x07
    1ae4:	48 87       	std	Y+8, r20	; 0x08
    1ae6:	59 87       	std	Y+9, r21	; 0x09
    1ae8:	10 e0       	ldi	r17, 0x00	; 0
    1aea:	99 24       	eor	r9, r9
    1aec:	93 94       	inc	r9
    1aee:	6c 01       	movw	r12, r24
    1af0:	88 e0       	ldi	r24, 0x08	; 8
    1af2:	c8 0e       	add	r12, r24
    1af4:	d1 1c       	adc	r13, r1
    1af6:	0f b6       	in	r0, 0x3f	; 63
    1af8:	f8 94       	cli
    1afa:	0f 92       	push	r0
    1afc:	f7 01       	movw	r30, r14
    1afe:	96 8d       	ldd	r25, Z+30	; 0x1e
    1b00:	87 8d       	ldd	r24, Z+31	; 0x1f
    1b02:	98 17       	cp	r25, r24
    1b04:	10 f0       	brcs	.+4      	; 0x1b0a <xQueueGenericSend+0x54>
    1b06:	02 30       	cpi	r16, 0x02	; 2
    1b08:	b1 f4       	brne	.+44     	; 0x1b36 <xQueueGenericSend+0x80>
    1b0a:	40 2f       	mov	r20, r16
    1b0c:	b5 01       	movw	r22, r10
    1b0e:	c7 01       	movw	r24, r14
    1b10:	9b de       	rcall	.-714    	; 0x1848 <prvCopyDataToQueue>
    1b12:	f7 01       	movw	r30, r14
    1b14:	93 89       	ldd	r25, Z+19	; 0x13
    1b16:	99 23       	and	r25, r25
    1b18:	41 f0       	breq	.+16     	; 0x1b2a <xQueueGenericSend+0x74>
    1b1a:	c7 01       	movw	r24, r14
    1b1c:	43 96       	adiw	r24, 0x13	; 19
    1b1e:	0e 94 06 17 	call	0x2e0c	; 0x2e0c <xTaskRemoveFromEventList>
    1b22:	88 23       	and	r24, r24
    1b24:	21 f0       	breq	.+8      	; 0x1b2e <xQueueGenericSend+0x78>
    1b26:	bd dd       	rcall	.-1158   	; 0x16a2 <vPortYield>
    1b28:	02 c0       	rjmp	.+4      	; 0x1b2e <xQueueGenericSend+0x78>
    1b2a:	81 11       	cpse	r24, r1
    1b2c:	ba dd       	rcall	.-1164   	; 0x16a2 <vPortYield>
    1b2e:	0f 90       	pop	r0
    1b30:	0f be       	out	0x3f, r0	; 63
    1b32:	81 e0       	ldi	r24, 0x01	; 1
    1b34:	4e c0       	rjmp	.+156    	; 0x1bd2 <xQueueGenericSend+0x11c>
    1b36:	8e 81       	ldd	r24, Y+6	; 0x06
    1b38:	9f 81       	ldd	r25, Y+7	; 0x07
    1b3a:	a8 85       	ldd	r26, Y+8	; 0x08
    1b3c:	b9 85       	ldd	r27, Y+9	; 0x09
    1b3e:	89 2b       	or	r24, r25
    1b40:	8a 2b       	or	r24, r26
    1b42:	8b 2b       	or	r24, r27
    1b44:	21 f4       	brne	.+8      	; 0x1b4e <xQueueGenericSend+0x98>
    1b46:	0f 90       	pop	r0
    1b48:	0f be       	out	0x3f, r0	; 63
    1b4a:	80 e0       	ldi	r24, 0x00	; 0
    1b4c:	42 c0       	rjmp	.+132    	; 0x1bd2 <xQueueGenericSend+0x11c>
    1b4e:	11 11       	cpse	r17, r1
    1b50:	05 c0       	rjmp	.+10     	; 0x1b5c <xQueueGenericSend+0xa6>
    1b52:	ce 01       	movw	r24, r28
    1b54:	01 96       	adiw	r24, 0x01	; 1
    1b56:	0e 94 92 17 	call	0x2f24	; 0x2f24 <vTaskInternalSetTimeOutState>
    1b5a:	19 2d       	mov	r17, r9
    1b5c:	0f 90       	pop	r0
    1b5e:	0f be       	out	0x3f, r0	; 63
    1b60:	fd d6       	rcall	.+3578   	; 0x295c <vTaskSuspendAll>
    1b62:	0f b6       	in	r0, 0x3f	; 63
    1b64:	f8 94       	cli
    1b66:	0f 92       	push	r0
    1b68:	f7 01       	movw	r30, r14
    1b6a:	81 a1       	ldd	r24, Z+33	; 0x21
    1b6c:	8f 3f       	cpi	r24, 0xFF	; 255
    1b6e:	09 f4       	brne	.+2      	; 0x1b72 <xQueueGenericSend+0xbc>
    1b70:	11 a2       	std	Z+33, r1	; 0x21
    1b72:	f7 01       	movw	r30, r14
    1b74:	82 a1       	ldd	r24, Z+34	; 0x22
    1b76:	8f 3f       	cpi	r24, 0xFF	; 255
    1b78:	09 f4       	brne	.+2      	; 0x1b7c <xQueueGenericSend+0xc6>
    1b7a:	12 a2       	std	Z+34, r1	; 0x22
    1b7c:	0f 90       	pop	r0
    1b7e:	0f be       	out	0x3f, r0	; 63
    1b80:	be 01       	movw	r22, r28
    1b82:	6a 5f       	subi	r22, 0xFA	; 250
    1b84:	7f 4f       	sbci	r23, 0xFF	; 255
    1b86:	ce 01       	movw	r24, r28
    1b88:	01 96       	adiw	r24, 0x01	; 1
    1b8a:	0e 94 a3 17 	call	0x2f46	; 0x2f46 <xTaskCheckForTimeOut>
    1b8e:	81 11       	cpse	r24, r1
    1b90:	1c c0       	rjmp	.+56     	; 0x1bca <xQueueGenericSend+0x114>
    1b92:	0f b6       	in	r0, 0x3f	; 63
    1b94:	f8 94       	cli
    1b96:	0f 92       	push	r0
    1b98:	f7 01       	movw	r30, r14
    1b9a:	96 8d       	ldd	r25, Z+30	; 0x1e
    1b9c:	87 8d       	ldd	r24, Z+31	; 0x1f
    1b9e:	0f 90       	pop	r0
    1ba0:	0f be       	out	0x3f, r0	; 63
    1ba2:	98 13       	cpse	r25, r24
    1ba4:	0e c0       	rjmp	.+28     	; 0x1bc2 <xQueueGenericSend+0x10c>
    1ba6:	4e 81       	ldd	r20, Y+6	; 0x06
    1ba8:	5f 81       	ldd	r21, Y+7	; 0x07
    1baa:	68 85       	ldd	r22, Y+8	; 0x08
    1bac:	79 85       	ldd	r23, Y+9	; 0x09
    1bae:	c6 01       	movw	r24, r12
    1bb0:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <vTaskPlaceOnEventList>
    1bb4:	c7 01       	movw	r24, r14
    1bb6:	c1 de       	rcall	.-638    	; 0x193a <prvUnlockQueue>
    1bb8:	ba d7       	rcall	.+3956   	; 0x2b2e <xTaskResumeAll>
    1bba:	81 11       	cpse	r24, r1
    1bbc:	9c cf       	rjmp	.-200    	; 0x1af6 <xQueueGenericSend+0x40>
    1bbe:	71 dd       	rcall	.-1310   	; 0x16a2 <vPortYield>
    1bc0:	9a cf       	rjmp	.-204    	; 0x1af6 <xQueueGenericSend+0x40>
    1bc2:	c7 01       	movw	r24, r14
    1bc4:	ba de       	rcall	.-652    	; 0x193a <prvUnlockQueue>
    1bc6:	b3 d7       	rcall	.+3942   	; 0x2b2e <xTaskResumeAll>
    1bc8:	96 cf       	rjmp	.-212    	; 0x1af6 <xQueueGenericSend+0x40>
    1bca:	c7 01       	movw	r24, r14
    1bcc:	b6 de       	rcall	.-660    	; 0x193a <prvUnlockQueue>
    1bce:	af d7       	rcall	.+3934   	; 0x2b2e <xTaskResumeAll>
    1bd0:	80 e0       	ldi	r24, 0x00	; 0
    1bd2:	29 96       	adiw	r28, 0x09	; 9
    1bd4:	0f b6       	in	r0, 0x3f	; 63
    1bd6:	f8 94       	cli
    1bd8:	de bf       	out	0x3e, r29	; 62
    1bda:	0f be       	out	0x3f, r0	; 63
    1bdc:	cd bf       	out	0x3d, r28	; 61
    1bde:	df 91       	pop	r29
    1be0:	cf 91       	pop	r28
    1be2:	1f 91       	pop	r17
    1be4:	0f 91       	pop	r16
    1be6:	ff 90       	pop	r15
    1be8:	ef 90       	pop	r14
    1bea:	df 90       	pop	r13
    1bec:	cf 90       	pop	r12
    1bee:	bf 90       	pop	r11
    1bf0:	af 90       	pop	r10
    1bf2:	9f 90       	pop	r9
    1bf4:	08 95       	ret

00001bf6 <xQueueCreateMutex>:
    1bf6:	0f 93       	push	r16
    1bf8:	cf 93       	push	r28
    1bfa:	df 93       	push	r29
    1bfc:	48 2f       	mov	r20, r24
    1bfe:	60 e0       	ldi	r22, 0x00	; 0
    1c00:	81 e0       	ldi	r24, 0x01	; 1
    1c02:	2b df       	rcall	.-426    	; 0x1a5a <xQueueGenericCreate>
    1c04:	ec 01       	movw	r28, r24
    1c06:	00 97       	sbiw	r24, 0x00	; 0
    1c08:	61 f0       	breq	.+24     	; 0x1c22 <xQueueCreateMutex+0x2c>
    1c0a:	1d 82       	std	Y+5, r1	; 0x05
    1c0c:	1c 82       	std	Y+4, r1	; 0x04
    1c0e:	19 82       	std	Y+1, r1	; 0x01
    1c10:	18 82       	st	Y, r1
    1c12:	1e 82       	std	Y+6, r1	; 0x06
    1c14:	00 e0       	ldi	r16, 0x00	; 0
    1c16:	20 e0       	ldi	r18, 0x00	; 0
    1c18:	30 e0       	ldi	r19, 0x00	; 0
    1c1a:	a9 01       	movw	r20, r18
    1c1c:	60 e0       	ldi	r22, 0x00	; 0
    1c1e:	70 e0       	ldi	r23, 0x00	; 0
    1c20:	4a df       	rcall	.-364    	; 0x1ab6 <xQueueGenericSend>
    1c22:	ce 01       	movw	r24, r28
    1c24:	df 91       	pop	r29
    1c26:	cf 91       	pop	r28
    1c28:	0f 91       	pop	r16
    1c2a:	08 95       	ret

00001c2c <xQueueGenericSendFromISR>:
    1c2c:	ef 92       	push	r14
    1c2e:	ff 92       	push	r15
    1c30:	0f 93       	push	r16
    1c32:	1f 93       	push	r17
    1c34:	cf 93       	push	r28
    1c36:	df 93       	push	r29
    1c38:	8a 01       	movw	r16, r20
    1c3a:	fc 01       	movw	r30, r24
    1c3c:	56 8d       	ldd	r21, Z+30	; 0x1e
    1c3e:	37 8d       	ldd	r19, Z+31	; 0x1f
    1c40:	53 17       	cp	r21, r19
    1c42:	10 f0       	brcs	.+4      	; 0x1c48 <xQueueGenericSendFromISR+0x1c>
    1c44:	22 30       	cpi	r18, 0x02	; 2
    1c46:	e9 f4       	brne	.+58     	; 0x1c82 <xQueueGenericSendFromISR+0x56>
    1c48:	42 2f       	mov	r20, r18
    1c4a:	78 01       	movw	r14, r16
    1c4c:	ec 01       	movw	r28, r24
    1c4e:	1a a1       	ldd	r17, Y+34	; 0x22
    1c50:	fb dd       	rcall	.-1034   	; 0x1848 <prvCopyDataToQueue>
    1c52:	1f 3f       	cpi	r17, 0xFF	; 255
    1c54:	81 f4       	brne	.+32     	; 0x1c76 <xQueueGenericSendFromISR+0x4a>
    1c56:	8b 89       	ldd	r24, Y+19	; 0x13
    1c58:	88 23       	and	r24, r24
    1c5a:	a9 f0       	breq	.+42     	; 0x1c86 <xQueueGenericSendFromISR+0x5a>
    1c5c:	ce 01       	movw	r24, r28
    1c5e:	43 96       	adiw	r24, 0x13	; 19
    1c60:	0e 94 06 17 	call	0x2e0c	; 0x2e0c <xTaskRemoveFromEventList>
    1c64:	88 23       	and	r24, r24
    1c66:	89 f0       	breq	.+34     	; 0x1c8a <xQueueGenericSendFromISR+0x5e>
    1c68:	e1 14       	cp	r14, r1
    1c6a:	f1 04       	cpc	r15, r1
    1c6c:	81 f0       	breq	.+32     	; 0x1c8e <xQueueGenericSendFromISR+0x62>
    1c6e:	81 e0       	ldi	r24, 0x01	; 1
    1c70:	f7 01       	movw	r30, r14
    1c72:	80 83       	st	Z, r24
    1c74:	0d c0       	rjmp	.+26     	; 0x1c90 <xQueueGenericSendFromISR+0x64>
    1c76:	ff 24       	eor	r15, r15
    1c78:	f3 94       	inc	r15
    1c7a:	f1 0e       	add	r15, r17
    1c7c:	fa a2       	std	Y+34, r15	; 0x22
    1c7e:	81 e0       	ldi	r24, 0x01	; 1
    1c80:	07 c0       	rjmp	.+14     	; 0x1c90 <xQueueGenericSendFromISR+0x64>
    1c82:	80 e0       	ldi	r24, 0x00	; 0
    1c84:	05 c0       	rjmp	.+10     	; 0x1c90 <xQueueGenericSendFromISR+0x64>
    1c86:	81 e0       	ldi	r24, 0x01	; 1
    1c88:	03 c0       	rjmp	.+6      	; 0x1c90 <xQueueGenericSendFromISR+0x64>
    1c8a:	81 e0       	ldi	r24, 0x01	; 1
    1c8c:	01 c0       	rjmp	.+2      	; 0x1c90 <xQueueGenericSendFromISR+0x64>
    1c8e:	81 e0       	ldi	r24, 0x01	; 1
    1c90:	df 91       	pop	r29
    1c92:	cf 91       	pop	r28
    1c94:	1f 91       	pop	r17
    1c96:	0f 91       	pop	r16
    1c98:	ff 90       	pop	r15
    1c9a:	ef 90       	pop	r14
    1c9c:	08 95       	ret

00001c9e <xQueueReceive>:
    1c9e:	9f 92       	push	r9
    1ca0:	af 92       	push	r10
    1ca2:	bf 92       	push	r11
    1ca4:	cf 92       	push	r12
    1ca6:	df 92       	push	r13
    1ca8:	ef 92       	push	r14
    1caa:	ff 92       	push	r15
    1cac:	0f 93       	push	r16
    1cae:	1f 93       	push	r17
    1cb0:	cf 93       	push	r28
    1cb2:	df 93       	push	r29
    1cb4:	cd b7       	in	r28, 0x3d	; 61
    1cb6:	de b7       	in	r29, 0x3e	; 62
    1cb8:	29 97       	sbiw	r28, 0x09	; 9
    1cba:	0f b6       	in	r0, 0x3f	; 63
    1cbc:	f8 94       	cli
    1cbe:	de bf       	out	0x3e, r29	; 62
    1cc0:	0f be       	out	0x3f, r0	; 63
    1cc2:	cd bf       	out	0x3d, r28	; 61
    1cc4:	8c 01       	movw	r16, r24
    1cc6:	5b 01       	movw	r10, r22
    1cc8:	2e 83       	std	Y+6, r18	; 0x06
    1cca:	3f 83       	std	Y+7, r19	; 0x07
    1ccc:	48 87       	std	Y+8, r20	; 0x08
    1cce:	59 87       	std	Y+9, r21	; 0x09
    1cd0:	e1 2c       	mov	r14, r1
    1cd2:	99 24       	eor	r9, r9
    1cd4:	93 94       	inc	r9
    1cd6:	6c 01       	movw	r12, r24
    1cd8:	83 e1       	ldi	r24, 0x13	; 19
    1cda:	c8 0e       	add	r12, r24
    1cdc:	d1 1c       	adc	r13, r1
    1cde:	0f b6       	in	r0, 0x3f	; 63
    1ce0:	f8 94       	cli
    1ce2:	0f 92       	push	r0
    1ce4:	f8 01       	movw	r30, r16
    1ce6:	f6 8c       	ldd	r15, Z+30	; 0x1e
    1ce8:	ff 20       	and	r15, r15
    1cea:	99 f0       	breq	.+38     	; 0x1d12 <xQueueReceive+0x74>
    1cec:	b5 01       	movw	r22, r10
    1cee:	c8 01       	movw	r24, r16
    1cf0:	0a de       	rcall	.-1004   	; 0x1906 <prvCopyDataFromQueue>
    1cf2:	fa 94       	dec	r15
    1cf4:	f8 01       	movw	r30, r16
    1cf6:	f6 8e       	std	Z+30, r15	; 0x1e
    1cf8:	80 85       	ldd	r24, Z+8	; 0x08
    1cfa:	88 23       	and	r24, r24
    1cfc:	31 f0       	breq	.+12     	; 0x1d0a <xQueueReceive+0x6c>
    1cfe:	c8 01       	movw	r24, r16
    1d00:	08 96       	adiw	r24, 0x08	; 8
    1d02:	0e 94 06 17 	call	0x2e0c	; 0x2e0c <xTaskRemoveFromEventList>
    1d06:	81 11       	cpse	r24, r1
    1d08:	cc dc       	rcall	.-1640   	; 0x16a2 <vPortYield>
    1d0a:	0f 90       	pop	r0
    1d0c:	0f be       	out	0x3f, r0	; 63
    1d0e:	81 e0       	ldi	r24, 0x01	; 1
    1d10:	4c c0       	rjmp	.+152    	; 0x1daa <xQueueReceive+0x10c>
    1d12:	8e 81       	ldd	r24, Y+6	; 0x06
    1d14:	9f 81       	ldd	r25, Y+7	; 0x07
    1d16:	a8 85       	ldd	r26, Y+8	; 0x08
    1d18:	b9 85       	ldd	r27, Y+9	; 0x09
    1d1a:	89 2b       	or	r24, r25
    1d1c:	8a 2b       	or	r24, r26
    1d1e:	8b 2b       	or	r24, r27
    1d20:	21 f4       	brne	.+8      	; 0x1d2a <xQueueReceive+0x8c>
    1d22:	0f 90       	pop	r0
    1d24:	0f be       	out	0x3f, r0	; 63
    1d26:	80 e0       	ldi	r24, 0x00	; 0
    1d28:	40 c0       	rjmp	.+128    	; 0x1daa <xQueueReceive+0x10c>
    1d2a:	e1 10       	cpse	r14, r1
    1d2c:	05 c0       	rjmp	.+10     	; 0x1d38 <xQueueReceive+0x9a>
    1d2e:	ce 01       	movw	r24, r28
    1d30:	01 96       	adiw	r24, 0x01	; 1
    1d32:	0e 94 92 17 	call	0x2f24	; 0x2f24 <vTaskInternalSetTimeOutState>
    1d36:	e9 2c       	mov	r14, r9
    1d38:	0f 90       	pop	r0
    1d3a:	0f be       	out	0x3f, r0	; 63
    1d3c:	0f d6       	rcall	.+3102   	; 0x295c <vTaskSuspendAll>
    1d3e:	0f b6       	in	r0, 0x3f	; 63
    1d40:	f8 94       	cli
    1d42:	0f 92       	push	r0
    1d44:	f8 01       	movw	r30, r16
    1d46:	81 a1       	ldd	r24, Z+33	; 0x21
    1d48:	8f 3f       	cpi	r24, 0xFF	; 255
    1d4a:	09 f4       	brne	.+2      	; 0x1d4e <xQueueReceive+0xb0>
    1d4c:	11 a2       	std	Z+33, r1	; 0x21
    1d4e:	f8 01       	movw	r30, r16
    1d50:	82 a1       	ldd	r24, Z+34	; 0x22
    1d52:	8f 3f       	cpi	r24, 0xFF	; 255
    1d54:	09 f4       	brne	.+2      	; 0x1d58 <xQueueReceive+0xba>
    1d56:	12 a2       	std	Z+34, r1	; 0x22
    1d58:	0f 90       	pop	r0
    1d5a:	0f be       	out	0x3f, r0	; 63
    1d5c:	be 01       	movw	r22, r28
    1d5e:	6a 5f       	subi	r22, 0xFA	; 250
    1d60:	7f 4f       	sbci	r23, 0xFF	; 255
    1d62:	ce 01       	movw	r24, r28
    1d64:	01 96       	adiw	r24, 0x01	; 1
    1d66:	0e 94 a3 17 	call	0x2f46	; 0x2f46 <xTaskCheckForTimeOut>
    1d6a:	81 11       	cpse	r24, r1
    1d6c:	15 c0       	rjmp	.+42     	; 0x1d98 <xQueueReceive+0xfa>
    1d6e:	c8 01       	movw	r24, r16
    1d70:	60 dd       	rcall	.-1344   	; 0x1832 <prvIsQueueEmpty>
    1d72:	88 23       	and	r24, r24
    1d74:	69 f0       	breq	.+26     	; 0x1d90 <xQueueReceive+0xf2>
    1d76:	4e 81       	ldd	r20, Y+6	; 0x06
    1d78:	5f 81       	ldd	r21, Y+7	; 0x07
    1d7a:	68 85       	ldd	r22, Y+8	; 0x08
    1d7c:	79 85       	ldd	r23, Y+9	; 0x09
    1d7e:	c6 01       	movw	r24, r12
    1d80:	ea d7       	rcall	.+4052   	; 0x2d56 <vTaskPlaceOnEventList>
    1d82:	c8 01       	movw	r24, r16
    1d84:	da dd       	rcall	.-1100   	; 0x193a <prvUnlockQueue>
    1d86:	d3 d6       	rcall	.+3494   	; 0x2b2e <xTaskResumeAll>
    1d88:	81 11       	cpse	r24, r1
    1d8a:	a9 cf       	rjmp	.-174    	; 0x1cde <xQueueReceive+0x40>
    1d8c:	8a dc       	rcall	.-1772   	; 0x16a2 <vPortYield>
    1d8e:	a7 cf       	rjmp	.-178    	; 0x1cde <xQueueReceive+0x40>
    1d90:	c8 01       	movw	r24, r16
    1d92:	d3 dd       	rcall	.-1114   	; 0x193a <prvUnlockQueue>
    1d94:	cc d6       	rcall	.+3480   	; 0x2b2e <xTaskResumeAll>
    1d96:	a3 cf       	rjmp	.-186    	; 0x1cde <xQueueReceive+0x40>
    1d98:	c8 01       	movw	r24, r16
    1d9a:	cf dd       	rcall	.-1122   	; 0x193a <prvUnlockQueue>
    1d9c:	c8 d6       	rcall	.+3472   	; 0x2b2e <xTaskResumeAll>
    1d9e:	c8 01       	movw	r24, r16
    1da0:	48 dd       	rcall	.-1392   	; 0x1832 <prvIsQueueEmpty>
    1da2:	88 23       	and	r24, r24
    1da4:	09 f4       	brne	.+2      	; 0x1da8 <xQueueReceive+0x10a>
    1da6:	9b cf       	rjmp	.-202    	; 0x1cde <xQueueReceive+0x40>
    1da8:	80 e0       	ldi	r24, 0x00	; 0
    1daa:	29 96       	adiw	r28, 0x09	; 9
    1dac:	0f b6       	in	r0, 0x3f	; 63
    1dae:	f8 94       	cli
    1db0:	de bf       	out	0x3e, r29	; 62
    1db2:	0f be       	out	0x3f, r0	; 63
    1db4:	cd bf       	out	0x3d, r28	; 61
    1db6:	df 91       	pop	r29
    1db8:	cf 91       	pop	r28
    1dba:	1f 91       	pop	r17
    1dbc:	0f 91       	pop	r16
    1dbe:	ff 90       	pop	r15
    1dc0:	ef 90       	pop	r14
    1dc2:	df 90       	pop	r13
    1dc4:	cf 90       	pop	r12
    1dc6:	bf 90       	pop	r11
    1dc8:	af 90       	pop	r10
    1dca:	9f 90       	pop	r9
    1dcc:	08 95       	ret

00001dce <xQueueSemaphoreTake>:
    1dce:	bf 92       	push	r11
    1dd0:	cf 92       	push	r12
    1dd2:	df 92       	push	r13
    1dd4:	ef 92       	push	r14
    1dd6:	ff 92       	push	r15
    1dd8:	0f 93       	push	r16
    1dda:	1f 93       	push	r17
    1ddc:	cf 93       	push	r28
    1dde:	df 93       	push	r29
    1de0:	cd b7       	in	r28, 0x3d	; 61
    1de2:	de b7       	in	r29, 0x3e	; 62
    1de4:	29 97       	sbiw	r28, 0x09	; 9
    1de6:	0f b6       	in	r0, 0x3f	; 63
    1de8:	f8 94       	cli
    1dea:	de bf       	out	0x3e, r29	; 62
    1dec:	0f be       	out	0x3f, r0	; 63
    1dee:	cd bf       	out	0x3d, r28	; 61
    1df0:	8c 01       	movw	r16, r24
    1df2:	4e 83       	std	Y+6, r20	; 0x06
    1df4:	5f 83       	std	Y+7, r21	; 0x07
    1df6:	68 87       	std	Y+8, r22	; 0x08
    1df8:	79 87       	std	Y+9, r23	; 0x09
    1dfa:	b1 2c       	mov	r11, r1
    1dfc:	d1 2c       	mov	r13, r1
    1dfe:	cc 24       	eor	r12, r12
    1e00:	c3 94       	inc	r12
    1e02:	7c 01       	movw	r14, r24
    1e04:	83 e1       	ldi	r24, 0x13	; 19
    1e06:	e8 0e       	add	r14, r24
    1e08:	f1 1c       	adc	r15, r1
    1e0a:	0f b6       	in	r0, 0x3f	; 63
    1e0c:	f8 94       	cli
    1e0e:	0f 92       	push	r0
    1e10:	d8 01       	movw	r26, r16
    1e12:	5e 96       	adiw	r26, 0x1e	; 30
    1e14:	8c 91       	ld	r24, X
    1e16:	5e 97       	sbiw	r26, 0x1e	; 30
    1e18:	88 23       	and	r24, r24
    1e1a:	d9 f0       	breq	.+54     	; 0x1e52 <xQueueSemaphoreTake+0x84>
    1e1c:	81 50       	subi	r24, 0x01	; 1
    1e1e:	5e 96       	adiw	r26, 0x1e	; 30
    1e20:	8c 93       	st	X, r24
    1e22:	5e 97       	sbiw	r26, 0x1e	; 30
    1e24:	8d 91       	ld	r24, X+
    1e26:	9c 91       	ld	r25, X
    1e28:	89 2b       	or	r24, r25
    1e2a:	29 f4       	brne	.+10     	; 0x1e36 <xQueueSemaphoreTake+0x68>
    1e2c:	0e 94 31 19 	call	0x3262	; 0x3262 <pvTaskIncrementMutexHeldCount>
    1e30:	f8 01       	movw	r30, r16
    1e32:	95 83       	std	Z+5, r25	; 0x05
    1e34:	84 83       	std	Z+4, r24	; 0x04
    1e36:	d8 01       	movw	r26, r16
    1e38:	18 96       	adiw	r26, 0x08	; 8
    1e3a:	8c 91       	ld	r24, X
    1e3c:	88 23       	and	r24, r24
    1e3e:	29 f0       	breq	.+10     	; 0x1e4a <xQueueSemaphoreTake+0x7c>
    1e40:	c8 01       	movw	r24, r16
    1e42:	08 96       	adiw	r24, 0x08	; 8
    1e44:	e3 d7       	rcall	.+4038   	; 0x2e0c <xTaskRemoveFromEventList>
    1e46:	81 11       	cpse	r24, r1
    1e48:	2c dc       	rcall	.-1960   	; 0x16a2 <vPortYield>
    1e4a:	0f 90       	pop	r0
    1e4c:	0f be       	out	0x3f, r0	; 63
    1e4e:	81 e0       	ldi	r24, 0x01	; 1
    1e50:	7a c0       	rjmp	.+244    	; 0x1f46 <xQueueSemaphoreTake+0x178>
    1e52:	8e 81       	ldd	r24, Y+6	; 0x06
    1e54:	9f 81       	ldd	r25, Y+7	; 0x07
    1e56:	a8 85       	ldd	r26, Y+8	; 0x08
    1e58:	b9 85       	ldd	r27, Y+9	; 0x09
    1e5a:	89 2b       	or	r24, r25
    1e5c:	8a 2b       	or	r24, r26
    1e5e:	8b 2b       	or	r24, r27
    1e60:	21 f4       	brne	.+8      	; 0x1e6a <xQueueSemaphoreTake+0x9c>
    1e62:	0f 90       	pop	r0
    1e64:	0f be       	out	0x3f, r0	; 63
    1e66:	80 e0       	ldi	r24, 0x00	; 0
    1e68:	6e c0       	rjmp	.+220    	; 0x1f46 <xQueueSemaphoreTake+0x178>
    1e6a:	d1 10       	cpse	r13, r1
    1e6c:	05 c0       	rjmp	.+10     	; 0x1e78 <xQueueSemaphoreTake+0xaa>
    1e6e:	ce 01       	movw	r24, r28
    1e70:	01 96       	adiw	r24, 0x01	; 1
    1e72:	0e 94 92 17 	call	0x2f24	; 0x2f24 <vTaskInternalSetTimeOutState>
    1e76:	dc 2c       	mov	r13, r12
    1e78:	0f 90       	pop	r0
    1e7a:	0f be       	out	0x3f, r0	; 63
    1e7c:	6f d5       	rcall	.+2782   	; 0x295c <vTaskSuspendAll>
    1e7e:	0f b6       	in	r0, 0x3f	; 63
    1e80:	f8 94       	cli
    1e82:	0f 92       	push	r0
    1e84:	f8 01       	movw	r30, r16
    1e86:	81 a1       	ldd	r24, Z+33	; 0x21
    1e88:	8f 3f       	cpi	r24, 0xFF	; 255
    1e8a:	09 f4       	brne	.+2      	; 0x1e8e <xQueueSemaphoreTake+0xc0>
    1e8c:	11 a2       	std	Z+33, r1	; 0x21
    1e8e:	d8 01       	movw	r26, r16
    1e90:	92 96       	adiw	r26, 0x22	; 34
    1e92:	8c 91       	ld	r24, X
    1e94:	92 97       	sbiw	r26, 0x22	; 34
    1e96:	8f 3f       	cpi	r24, 0xFF	; 255
    1e98:	11 f4       	brne	.+4      	; 0x1e9e <xQueueSemaphoreTake+0xd0>
    1e9a:	92 96       	adiw	r26, 0x22	; 34
    1e9c:	1c 92       	st	X, r1
    1e9e:	0f 90       	pop	r0
    1ea0:	0f be       	out	0x3f, r0	; 63
    1ea2:	be 01       	movw	r22, r28
    1ea4:	6a 5f       	subi	r22, 0xFA	; 250
    1ea6:	7f 4f       	sbci	r23, 0xFF	; 255
    1ea8:	ce 01       	movw	r24, r28
    1eaa:	01 96       	adiw	r24, 0x01	; 1
    1eac:	0e 94 a3 17 	call	0x2f46	; 0x2f46 <xTaskCheckForTimeOut>
    1eb0:	81 11       	cpse	r24, r1
    1eb2:	24 c0       	rjmp	.+72     	; 0x1efc <xQueueSemaphoreTake+0x12e>
    1eb4:	c8 01       	movw	r24, r16
    1eb6:	bd dc       	rcall	.-1670   	; 0x1832 <prvIsQueueEmpty>
    1eb8:	88 23       	and	r24, r24
    1eba:	e1 f0       	breq	.+56     	; 0x1ef4 <xQueueSemaphoreTake+0x126>
    1ebc:	f8 01       	movw	r30, r16
    1ebe:	80 81       	ld	r24, Z
    1ec0:	91 81       	ldd	r25, Z+1	; 0x01
    1ec2:	89 2b       	or	r24, r25
    1ec4:	51 f4       	brne	.+20     	; 0x1eda <xQueueSemaphoreTake+0x10c>
    1ec6:	0f b6       	in	r0, 0x3f	; 63
    1ec8:	f8 94       	cli
    1eca:	0f 92       	push	r0
    1ecc:	84 81       	ldd	r24, Z+4	; 0x04
    1ece:	95 81       	ldd	r25, Z+5	; 0x05
    1ed0:	0e 94 0f 18 	call	0x301e	; 0x301e <xTaskPriorityInherit>
    1ed4:	b8 2e       	mov	r11, r24
    1ed6:	0f 90       	pop	r0
    1ed8:	0f be       	out	0x3f, r0	; 63
    1eda:	4e 81       	ldd	r20, Y+6	; 0x06
    1edc:	5f 81       	ldd	r21, Y+7	; 0x07
    1ede:	68 85       	ldd	r22, Y+8	; 0x08
    1ee0:	79 85       	ldd	r23, Y+9	; 0x09
    1ee2:	c7 01       	movw	r24, r14
    1ee4:	38 d7       	rcall	.+3696   	; 0x2d56 <vTaskPlaceOnEventList>
    1ee6:	c8 01       	movw	r24, r16
    1ee8:	28 dd       	rcall	.-1456   	; 0x193a <prvUnlockQueue>
    1eea:	21 d6       	rcall	.+3138   	; 0x2b2e <xTaskResumeAll>
    1eec:	81 11       	cpse	r24, r1
    1eee:	8d cf       	rjmp	.-230    	; 0x1e0a <xQueueSemaphoreTake+0x3c>
    1ef0:	d8 db       	rcall	.-2128   	; 0x16a2 <vPortYield>
    1ef2:	8b cf       	rjmp	.-234    	; 0x1e0a <xQueueSemaphoreTake+0x3c>
    1ef4:	c8 01       	movw	r24, r16
    1ef6:	21 dd       	rcall	.-1470   	; 0x193a <prvUnlockQueue>
    1ef8:	1a d6       	rcall	.+3124   	; 0x2b2e <xTaskResumeAll>
    1efa:	87 cf       	rjmp	.-242    	; 0x1e0a <xQueueSemaphoreTake+0x3c>
    1efc:	c8 01       	movw	r24, r16
    1efe:	1d dd       	rcall	.-1478   	; 0x193a <prvUnlockQueue>
    1f00:	16 d6       	rcall	.+3116   	; 0x2b2e <xTaskResumeAll>
    1f02:	c8 01       	movw	r24, r16
    1f04:	96 dc       	rcall	.-1748   	; 0x1832 <prvIsQueueEmpty>
    1f06:	88 23       	and	r24, r24
    1f08:	09 f4       	brne	.+2      	; 0x1f0c <xQueueSemaphoreTake+0x13e>
    1f0a:	7f cf       	rjmp	.-258    	; 0x1e0a <xQueueSemaphoreTake+0x3c>
    1f0c:	bb 20       	and	r11, r11
    1f0e:	d1 f0       	breq	.+52     	; 0x1f44 <xQueueSemaphoreTake+0x176>
    1f10:	0f b6       	in	r0, 0x3f	; 63
    1f12:	f8 94       	cli
    1f14:	0f 92       	push	r0
    1f16:	f8 01       	movw	r30, r16
    1f18:	83 89       	ldd	r24, Z+19	; 0x13
    1f1a:	88 23       	and	r24, r24
    1f1c:	39 f0       	breq	.+14     	; 0x1f2c <xQueueSemaphoreTake+0x15e>
    1f1e:	02 8c       	ldd	r0, Z+26	; 0x1a
    1f20:	f3 8d       	ldd	r31, Z+27	; 0x1b
    1f22:	e0 2d       	mov	r30, r0
    1f24:	80 81       	ld	r24, Z
    1f26:	64 e0       	ldi	r22, 0x04	; 4
    1f28:	68 1b       	sub	r22, r24
    1f2a:	01 c0       	rjmp	.+2      	; 0x1f2e <xQueueSemaphoreTake+0x160>
    1f2c:	60 e0       	ldi	r22, 0x00	; 0
    1f2e:	d8 01       	movw	r26, r16
    1f30:	14 96       	adiw	r26, 0x04	; 4
    1f32:	8d 91       	ld	r24, X+
    1f34:	9c 91       	ld	r25, X
    1f36:	15 97       	sbiw	r26, 0x05	; 5
    1f38:	0e 94 bd 18 	call	0x317a	; 0x317a <vTaskPriorityDisinheritAfterTimeout>
    1f3c:	0f 90       	pop	r0
    1f3e:	0f be       	out	0x3f, r0	; 63
    1f40:	80 e0       	ldi	r24, 0x00	; 0
    1f42:	01 c0       	rjmp	.+2      	; 0x1f46 <xQueueSemaphoreTake+0x178>
    1f44:	80 e0       	ldi	r24, 0x00	; 0
    1f46:	29 96       	adiw	r28, 0x09	; 9
    1f48:	0f b6       	in	r0, 0x3f	; 63
    1f4a:	f8 94       	cli
    1f4c:	de bf       	out	0x3e, r29	; 62
    1f4e:	0f be       	out	0x3f, r0	; 63
    1f50:	cd bf       	out	0x3d, r28	; 61
    1f52:	df 91       	pop	r29
    1f54:	cf 91       	pop	r28
    1f56:	1f 91       	pop	r17
    1f58:	0f 91       	pop	r16
    1f5a:	ff 90       	pop	r15
    1f5c:	ef 90       	pop	r14
    1f5e:	df 90       	pop	r13
    1f60:	cf 90       	pop	r12
    1f62:	bf 90       	pop	r11
    1f64:	08 95       	ret

00001f66 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
    {
    1f66:	cf 93       	push	r28
    1f68:	df 93       	push	r29
    1f6a:	ec 01       	movw	r28, r24
        will not actually cause the task to block, just place it on a blocked
        list.  It will not block until the scheduler is unlocked - at which
        time a yield will be performed.  If an item is added to the queue while
        the queue is locked, and the calling task blocks on the queue, then the
        calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    1f6c:	0f b6       	in	r0, 0x3f	; 63
    1f6e:	f8 94       	cli
    1f70:	0f 92       	push	r0
    1f72:	89 a1       	ldd	r24, Y+33	; 0x21
    1f74:	8f 3f       	cpi	r24, 0xFF	; 255
    1f76:	09 f4       	brne	.+2      	; 0x1f7a <vQueueWaitForMessageRestricted+0x14>
    1f78:	19 a2       	std	Y+33, r1	; 0x21
    1f7a:	8a a1       	ldd	r24, Y+34	; 0x22
    1f7c:	8f 3f       	cpi	r24, 0xFF	; 255
    1f7e:	09 f4       	brne	.+2      	; 0x1f82 <vQueueWaitForMessageRestricted+0x1c>
    1f80:	1a a2       	std	Y+34, r1	; 0x22
    1f82:	0f 90       	pop	r0
    1f84:	0f be       	out	0x3f, r0	; 63
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    1f86:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1f88:	81 11       	cpse	r24, r1
    1f8a:	03 c0       	rjmp	.+6      	; 0x1f92 <vQueueWaitForMessageRestricted+0x2c>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    1f8c:	ce 01       	movw	r24, r28
    1f8e:	43 96       	adiw	r24, 0x13	; 19
    1f90:	1d d7       	rcall	.+3642   	; 0x2dcc <vTaskPlaceOnEventListRestricted>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
        prvUnlockQueue( pxQueue );
    1f92:	ce 01       	movw	r24, r28
    1f94:	d2 dc       	rcall	.-1628   	; 0x193a <prvUnlockQueue>
    }
    1f96:	df 91       	pop	r29
    1f98:	cf 91       	pop	r28
    1f9a:	08 95       	ret

00001f9c <prvBytesInBuffer>:

    configASSERT( pxStreamBuffer );

    xReturn = prvBytesInBuffer( pxStreamBuffer );
    return xReturn;
}
    1f9c:	fc 01       	movw	r30, r24
    1f9e:	44 81       	ldd	r20, Z+4	; 0x04
    1fa0:	55 81       	ldd	r21, Z+5	; 0x05
    1fa2:	22 81       	ldd	r18, Z+2	; 0x02
    1fa4:	33 81       	ldd	r19, Z+3	; 0x03
    1fa6:	24 0f       	add	r18, r20
    1fa8:	35 1f       	adc	r19, r21
    1faa:	80 81       	ld	r24, Z
    1fac:	91 81       	ldd	r25, Z+1	; 0x01
    1fae:	b9 01       	movw	r22, r18
    1fb0:	68 1b       	sub	r22, r24
    1fb2:	79 0b       	sbc	r23, r25
    1fb4:	cb 01       	movw	r24, r22
    1fb6:	64 17       	cp	r22, r20
    1fb8:	75 07       	cpc	r23, r21
    1fba:	10 f0       	brcs	.+4      	; 0x1fc0 <prvBytesInBuffer+0x24>
    1fbc:	84 1b       	sub	r24, r20
    1fbe:	95 0b       	sbc	r25, r21
    1fc0:	08 95       	ret

00001fc2 <prvWriteBytesToBuffer>:
    1fc2:	af 92       	push	r10
    1fc4:	bf 92       	push	r11
    1fc6:	cf 92       	push	r12
    1fc8:	df 92       	push	r13
    1fca:	ef 92       	push	r14
    1fcc:	ff 92       	push	r15
    1fce:	0f 93       	push	r16
    1fd0:	1f 93       	push	r17
    1fd2:	cf 93       	push	r28
    1fd4:	df 93       	push	r29
    1fd6:	6c 01       	movw	r12, r24
    1fd8:	5b 01       	movw	r10, r22
    1fda:	7a 01       	movw	r14, r20
    1fdc:	fc 01       	movw	r30, r24
    1fde:	c2 81       	ldd	r28, Z+2	; 0x02
    1fe0:	d3 81       	ldd	r29, Z+3	; 0x03
    1fe2:	04 81       	ldd	r16, Z+4	; 0x04
    1fe4:	15 81       	ldd	r17, Z+5	; 0x05
    1fe6:	0c 1b       	sub	r16, r28
    1fe8:	1d 0b       	sbc	r17, r29
    1fea:	40 17       	cp	r20, r16
    1fec:	51 07       	cpc	r21, r17
    1fee:	08 f4       	brcc	.+2      	; 0x1ff2 <prvWriteBytesToBuffer+0x30>
    1ff0:	8a 01       	movw	r16, r20
    1ff2:	f6 01       	movw	r30, r12
    1ff4:	84 85       	ldd	r24, Z+12	; 0x0c
    1ff6:	95 85       	ldd	r25, Z+13	; 0x0d
    1ff8:	a8 01       	movw	r20, r16
    1ffa:	b5 01       	movw	r22, r10
    1ffc:	8c 0f       	add	r24, r28
    1ffe:	9d 1f       	adc	r25, r29
    2000:	0e 94 58 2d 	call	0x5ab0	; 0x5ab0 <memcpy>
    2004:	0e 15       	cp	r16, r14
    2006:	1f 05       	cpc	r17, r15
    2008:	58 f4       	brcc	.+22     	; 0x2020 <prvWriteBytesToBuffer+0x5e>
    200a:	a7 01       	movw	r20, r14
    200c:	40 1b       	sub	r20, r16
    200e:	51 0b       	sbc	r21, r17
    2010:	b5 01       	movw	r22, r10
    2012:	60 0f       	add	r22, r16
    2014:	71 1f       	adc	r23, r17
    2016:	f6 01       	movw	r30, r12
    2018:	84 85       	ldd	r24, Z+12	; 0x0c
    201a:	95 85       	ldd	r25, Z+13	; 0x0d
    201c:	0e 94 58 2d 	call	0x5ab0	; 0x5ab0 <memcpy>
    2020:	ce 01       	movw	r24, r28
    2022:	8e 0d       	add	r24, r14
    2024:	9f 1d       	adc	r25, r15
    2026:	f6 01       	movw	r30, r12
    2028:	24 81       	ldd	r18, Z+4	; 0x04
    202a:	35 81       	ldd	r19, Z+5	; 0x05
    202c:	82 17       	cp	r24, r18
    202e:	93 07       	cpc	r25, r19
    2030:	10 f0       	brcs	.+4      	; 0x2036 <prvWriteBytesToBuffer+0x74>
    2032:	82 1b       	sub	r24, r18
    2034:	93 0b       	sbc	r25, r19
    2036:	f6 01       	movw	r30, r12
    2038:	93 83       	std	Z+3, r25	; 0x03
    203a:	82 83       	std	Z+2, r24	; 0x02
    203c:	c7 01       	movw	r24, r14
    203e:	df 91       	pop	r29
    2040:	cf 91       	pop	r28
    2042:	1f 91       	pop	r17
    2044:	0f 91       	pop	r16
    2046:	ff 90       	pop	r15
    2048:	ef 90       	pop	r14
    204a:	df 90       	pop	r13
    204c:	cf 90       	pop	r12
    204e:	bf 90       	pop	r11
    2050:	af 90       	pop	r10
    2052:	08 95       	ret

00002054 <prvWriteMessageToBuffer>:
    2054:	cf 92       	push	r12
    2056:	df 92       	push	r13
    2058:	ef 92       	push	r14
    205a:	ff 92       	push	r15
    205c:	0f 93       	push	r16
    205e:	1f 93       	push	r17
    2060:	cf 93       	push	r28
    2062:	df 93       	push	r29
    2064:	1f 92       	push	r1
    2066:	1f 92       	push	r1
    2068:	cd b7       	in	r28, 0x3d	; 61
    206a:	de b7       	in	r29, 0x3e	; 62
    206c:	5a 83       	std	Y+2, r21	; 0x02
    206e:	49 83       	std	Y+1, r20	; 0x01
    2070:	21 15       	cp	r18, r1
    2072:	31 05       	cpc	r19, r1
    2074:	c9 f0       	breq	.+50     	; 0x20a8 <prvWriteMessageToBuffer+0x54>
    2076:	6b 01       	movw	r12, r22
    2078:	7c 01       	movw	r14, r24
    207a:	fc 01       	movw	r30, r24
    207c:	86 85       	ldd	r24, Z+14	; 0x0e
    207e:	80 fd       	sbrc	r24, 0
    2080:	08 c0       	rjmp	.+16     	; 0x2092 <prvWriteMessageToBuffer+0x3e>
    2082:	ca 01       	movw	r24, r20
    2084:	24 17       	cp	r18, r20
    2086:	35 07       	cpc	r19, r21
    2088:	08 f4       	brcc	.+2      	; 0x208c <prvWriteMessageToBuffer+0x38>
    208a:	c9 01       	movw	r24, r18
    208c:	9a 83       	std	Y+2, r25	; 0x02
    208e:	89 83       	std	Y+1, r24	; 0x01
    2090:	11 c0       	rjmp	.+34     	; 0x20b4 <prvWriteMessageToBuffer+0x60>
    2092:	20 17       	cp	r18, r16
    2094:	31 07       	cpc	r19, r17
    2096:	58 f0       	brcs	.+22     	; 0x20ae <prvWriteMessageToBuffer+0x5a>
    2098:	42 e0       	ldi	r20, 0x02	; 2
    209a:	50 e0       	ldi	r21, 0x00	; 0
    209c:	be 01       	movw	r22, r28
    209e:	6f 5f       	subi	r22, 0xFF	; 255
    20a0:	7f 4f       	sbci	r23, 0xFF	; 255
    20a2:	c7 01       	movw	r24, r14
    20a4:	8e df       	rcall	.-228    	; 0x1fc2 <prvWriteBytesToBuffer>
    20a6:	06 c0       	rjmp	.+12     	; 0x20b4 <prvWriteMessageToBuffer+0x60>
    20a8:	80 e0       	ldi	r24, 0x00	; 0
    20aa:	90 e0       	ldi	r25, 0x00	; 0
    20ac:	08 c0       	rjmp	.+16     	; 0x20be <prvWriteMessageToBuffer+0x6a>
    20ae:	80 e0       	ldi	r24, 0x00	; 0
    20b0:	90 e0       	ldi	r25, 0x00	; 0
    20b2:	05 c0       	rjmp	.+10     	; 0x20be <prvWriteMessageToBuffer+0x6a>
    20b4:	49 81       	ldd	r20, Y+1	; 0x01
    20b6:	5a 81       	ldd	r21, Y+2	; 0x02
    20b8:	b6 01       	movw	r22, r12
    20ba:	c7 01       	movw	r24, r14
    20bc:	82 df       	rcall	.-252    	; 0x1fc2 <prvWriteBytesToBuffer>
    20be:	0f 90       	pop	r0
    20c0:	0f 90       	pop	r0
    20c2:	df 91       	pop	r29
    20c4:	cf 91       	pop	r28
    20c6:	1f 91       	pop	r17
    20c8:	0f 91       	pop	r16
    20ca:	ff 90       	pop	r15
    20cc:	ef 90       	pop	r14
    20ce:	df 90       	pop	r13
    20d0:	cf 90       	pop	r12
    20d2:	08 95       	ret

000020d4 <prvReadBytesFromBuffer>:
    20d4:	af 92       	push	r10
    20d6:	bf 92       	push	r11
    20d8:	cf 92       	push	r12
    20da:	df 92       	push	r13
    20dc:	ef 92       	push	r14
    20de:	ff 92       	push	r15
    20e0:	0f 93       	push	r16
    20e2:	1f 93       	push	r17
    20e4:	cf 93       	push	r28
    20e6:	df 93       	push	r29
    20e8:	7c 01       	movw	r14, r24
    20ea:	5b 01       	movw	r10, r22
    20ec:	e9 01       	movw	r28, r18
    20ee:	42 17       	cp	r20, r18
    20f0:	53 07       	cpc	r21, r19
    20f2:	08 f4       	brcc	.+2      	; 0x20f6 <prvReadBytesFromBuffer+0x22>
    20f4:	ea 01       	movw	r28, r20
    20f6:	20 97       	sbiw	r28, 0x00	; 0
    20f8:	79 f1       	breq	.+94     	; 0x2158 <prvReadBytesFromBuffer+0x84>
    20fa:	f7 01       	movw	r30, r14
    20fc:	00 81       	ld	r16, Z
    20fe:	11 81       	ldd	r17, Z+1	; 0x01
    2100:	c4 80       	ldd	r12, Z+4	; 0x04
    2102:	d5 80       	ldd	r13, Z+5	; 0x05
    2104:	c0 1a       	sub	r12, r16
    2106:	d1 0a       	sbc	r13, r17
    2108:	cc 15       	cp	r28, r12
    210a:	dd 05       	cpc	r29, r13
    210c:	08 f4       	brcc	.+2      	; 0x2110 <prvReadBytesFromBuffer+0x3c>
    210e:	6e 01       	movw	r12, r28
    2110:	f7 01       	movw	r30, r14
    2112:	64 85       	ldd	r22, Z+12	; 0x0c
    2114:	75 85       	ldd	r23, Z+13	; 0x0d
    2116:	60 0f       	add	r22, r16
    2118:	71 1f       	adc	r23, r17
    211a:	a6 01       	movw	r20, r12
    211c:	c5 01       	movw	r24, r10
    211e:	0e 94 58 2d 	call	0x5ab0	; 0x5ab0 <memcpy>
    2122:	cc 16       	cp	r12, r28
    2124:	dd 06       	cpc	r13, r29
    2126:	58 f4       	brcc	.+22     	; 0x213e <prvReadBytesFromBuffer+0x6a>
    2128:	ae 01       	movw	r20, r28
    212a:	4c 19       	sub	r20, r12
    212c:	5d 09       	sbc	r21, r13
    212e:	f7 01       	movw	r30, r14
    2130:	64 85       	ldd	r22, Z+12	; 0x0c
    2132:	75 85       	ldd	r23, Z+13	; 0x0d
    2134:	c5 01       	movw	r24, r10
    2136:	8c 0d       	add	r24, r12
    2138:	9d 1d       	adc	r25, r13
    213a:	0e 94 58 2d 	call	0x5ab0	; 0x5ab0 <memcpy>
    213e:	0c 0f       	add	r16, r28
    2140:	1d 1f       	adc	r17, r29
    2142:	f7 01       	movw	r30, r14
    2144:	84 81       	ldd	r24, Z+4	; 0x04
    2146:	95 81       	ldd	r25, Z+5	; 0x05
    2148:	08 17       	cp	r16, r24
    214a:	19 07       	cpc	r17, r25
    214c:	10 f0       	brcs	.+4      	; 0x2152 <prvReadBytesFromBuffer+0x7e>
    214e:	08 1b       	sub	r16, r24
    2150:	19 0b       	sbc	r17, r25
    2152:	f7 01       	movw	r30, r14
    2154:	11 83       	std	Z+1, r17	; 0x01
    2156:	00 83       	st	Z, r16
    2158:	ce 01       	movw	r24, r28
    215a:	df 91       	pop	r29
    215c:	cf 91       	pop	r28
    215e:	1f 91       	pop	r17
    2160:	0f 91       	pop	r16
    2162:	ff 90       	pop	r15
    2164:	ef 90       	pop	r14
    2166:	df 90       	pop	r13
    2168:	cf 90       	pop	r12
    216a:	bf 90       	pop	r11
    216c:	af 90       	pop	r10
    216e:	08 95       	ret

00002170 <xStreamBufferGenericCreate>:
    2170:	ef 92       	push	r14
    2172:	ff 92       	push	r15
    2174:	1f 93       	push	r17
    2176:	cf 93       	push	r28
    2178:	df 93       	push	r29
    217a:	eb 01       	movw	r28, r22
    217c:	11 e0       	ldi	r17, 0x01	; 1
    217e:	41 30       	cpi	r20, 0x01	; 1
    2180:	09 f0       	breq	.+2      	; 0x2184 <xStreamBufferGenericCreate+0x14>
    2182:	10 e0       	ldi	r17, 0x00	; 0
    2184:	20 97       	sbiw	r28, 0x00	; 0
    2186:	11 f4       	brne	.+4      	; 0x218c <xStreamBufferGenericCreate+0x1c>
    2188:	c1 e0       	ldi	r28, 0x01	; 1
    218a:	d0 e0       	ldi	r29, 0x00	; 0
    218c:	7c 01       	movw	r14, r24
    218e:	2f ef       	ldi	r18, 0xFF	; 255
    2190:	e2 1a       	sub	r14, r18
    2192:	f2 0a       	sbc	r15, r18
    2194:	41 96       	adiw	r24, 0x11	; 17
    2196:	53 d8       	rcall	.-3930   	; 0x123e <pvPortMalloc>
    2198:	00 97       	sbiw	r24, 0x00	; 0
    219a:	81 f0       	breq	.+32     	; 0x21bc <xStreamBufferGenericCreate+0x4c>
    219c:	20 e1       	ldi	r18, 0x10	; 16
    219e:	fc 01       	movw	r30, r24
    21a0:	11 92       	st	Z+, r1
    21a2:	2a 95       	dec	r18
    21a4:	e9 f7       	brne	.-6      	; 0x21a0 <xStreamBufferGenericCreate+0x30>
    21a6:	9c 01       	movw	r18, r24
    21a8:	20 5f       	subi	r18, 0xF0	; 240
    21aa:	3f 4f       	sbci	r19, 0xFF	; 255
    21ac:	fc 01       	movw	r30, r24
    21ae:	35 87       	std	Z+13, r19	; 0x0d
    21b0:	24 87       	std	Z+12, r18	; 0x0c
    21b2:	f5 82       	std	Z+5, r15	; 0x05
    21b4:	e4 82       	std	Z+4, r14	; 0x04
    21b6:	d7 83       	std	Z+7, r29	; 0x07
    21b8:	c6 83       	std	Z+6, r28	; 0x06
    21ba:	16 87       	std	Z+14, r17	; 0x0e
    21bc:	df 91       	pop	r29
    21be:	cf 91       	pop	r28
    21c0:	1f 91       	pop	r17
    21c2:	ff 90       	pop	r15
    21c4:	ef 90       	pop	r14
    21c6:	08 95       	ret

000021c8 <xStreamBufferReset>:
    21c8:	cf 93       	push	r28
    21ca:	df 93       	push	r29
    21cc:	fc 01       	movw	r30, r24
    21ce:	27 85       	ldd	r18, Z+15	; 0x0f
    21d0:	0f b6       	in	r0, 0x3f	; 63
    21d2:	f8 94       	cli
    21d4:	0f 92       	push	r0
    21d6:	80 85       	ldd	r24, Z+8	; 0x08
    21d8:	91 85       	ldd	r25, Z+9	; 0x09
    21da:	89 2b       	or	r24, r25
    21dc:	d1 f4       	brne	.+52     	; 0x2212 <__stack+0x13>
    21de:	82 85       	ldd	r24, Z+10	; 0x0a
    21e0:	93 85       	ldd	r25, Z+11	; 0x0b
    21e2:	89 2b       	or	r24, r25
    21e4:	c1 f4       	brne	.+48     	; 0x2216 <__stack+0x17>
    21e6:	86 85       	ldd	r24, Z+14	; 0x0e
    21e8:	46 81       	ldd	r20, Z+6	; 0x06
    21ea:	57 81       	ldd	r21, Z+7	; 0x07
    21ec:	64 81       	ldd	r22, Z+4	; 0x04
    21ee:	75 81       	ldd	r23, Z+5	; 0x05
    21f0:	a4 85       	ldd	r26, Z+12	; 0x0c
    21f2:	b5 85       	ldd	r27, Z+13	; 0x0d
    21f4:	90 e1       	ldi	r25, 0x10	; 16
    21f6:	ef 01       	movw	r28, r30
    21f8:	19 92       	st	Y+, r1
    21fa:	9a 95       	dec	r25
    21fc:	e9 f7       	brne	.-6      	; 0x21f8 <xStreamBufferReset+0x30>
    21fe:	b5 87       	std	Z+13, r27	; 0x0d
    2200:	a4 87       	std	Z+12, r26	; 0x0c
    2202:	75 83       	std	Z+5, r23	; 0x05
    2204:	64 83       	std	Z+4, r22	; 0x04
    2206:	57 83       	std	Z+7, r21	; 0x07
    2208:	46 83       	std	Z+6, r20	; 0x06
    220a:	86 87       	std	Z+14, r24	; 0x0e
    220c:	27 87       	std	Z+15, r18	; 0x0f
    220e:	81 e0       	ldi	r24, 0x01	; 1
    2210:	03 c0       	rjmp	.+6      	; 0x2218 <__stack+0x19>
    2212:	80 e0       	ldi	r24, 0x00	; 0
    2214:	01 c0       	rjmp	.+2      	; 0x2218 <__stack+0x19>
    2216:	80 e0       	ldi	r24, 0x00	; 0
    2218:	0f 90       	pop	r0
    221a:	0f be       	out	0x3f, r0	; 63
    221c:	df 91       	pop	r29
    221e:	cf 91       	pop	r28
    2220:	08 95       	ret

00002222 <xStreamBufferSpacesAvailable>:
    2222:	fc 01       	movw	r30, r24
    2224:	24 81       	ldd	r18, Z+4	; 0x04
    2226:	35 81       	ldd	r19, Z+5	; 0x05
    2228:	80 81       	ld	r24, Z
    222a:	91 81       	ldd	r25, Z+1	; 0x01
    222c:	42 81       	ldd	r20, Z+2	; 0x02
    222e:	53 81       	ldd	r21, Z+3	; 0x03
    2230:	82 0f       	add	r24, r18
    2232:	93 1f       	adc	r25, r19
    2234:	01 97       	sbiw	r24, 0x01	; 1
    2236:	84 1b       	sub	r24, r20
    2238:	95 0b       	sbc	r25, r21
    223a:	82 17       	cp	r24, r18
    223c:	93 07       	cpc	r25, r19
    223e:	10 f0       	brcs	.+4      	; 0x2244 <xStreamBufferSpacesAvailable+0x22>
    2240:	82 1b       	sub	r24, r18
    2242:	93 0b       	sbc	r25, r19
    2244:	08 95       	ret

00002246 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void *pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    2246:	2f 92       	push	r2
    2248:	3f 92       	push	r3
    224a:	4f 92       	push	r4
    224c:	5f 92       	push	r5
    224e:	6f 92       	push	r6
    2250:	7f 92       	push	r7
    2252:	8f 92       	push	r8
    2254:	9f 92       	push	r9
    2256:	af 92       	push	r10
    2258:	bf 92       	push	r11
    225a:	cf 92       	push	r12
    225c:	df 92       	push	r13
    225e:	ef 92       	push	r14
    2260:	ff 92       	push	r15
    2262:	0f 93       	push	r16
    2264:	1f 93       	push	r17
    2266:	cf 93       	push	r28
    2268:	df 93       	push	r29
    226a:	cd b7       	in	r28, 0x3d	; 61
    226c:	de b7       	in	r29, 0x3e	; 62
    226e:	29 97       	sbiw	r28, 0x09	; 9
    2270:	0f b6       	in	r0, 0x3f	; 63
    2272:	f8 94       	cli
    2274:	de bf       	out	0x3e, r29	; 62
    2276:	0f be       	out	0x3f, r0	; 63
    2278:	cd bf       	out	0x3d, r28	; 61
    227a:	5c 01       	movw	r10, r24
    227c:	1b 01       	movw	r2, r22
    227e:	2a 01       	movw	r4, r20
    2280:	0e 83       	std	Y+6, r16	; 0x06
    2282:	1f 83       	std	Y+7, r17	; 0x07
    2284:	28 87       	std	Y+8, r18	; 0x08
    2286:	39 87       	std	Y+9, r19	; 0x09

    /* This send function is used to write to both message buffers and stream
    buffers.  If this is a message buffer then the space needed must be
    increased by the amount of bytes needed to store the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    2288:	fc 01       	movw	r30, r24
    228a:	86 85       	ldd	r24, Z+14	; 0x0e
    228c:	80 ff       	sbrs	r24, 0
    228e:	05 c0       	rjmp	.+10     	; 0x229a <xStreamBufferSend+0x54>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    2290:	3a 01       	movw	r6, r20
    2292:	f2 e0       	ldi	r31, 0x02	; 2
    2294:	6f 0e       	add	r6, r31
    2296:	71 1c       	adc	r7, r1
    2298:	01 c0       	rjmp	.+2      	; 0x229c <xStreamBufferSend+0x56>
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReturn, xSpace = 0;
size_t xRequiredSpace = xDataLengthBytes;
    229a:	3a 01       	movw	r6, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    229c:	8e 81       	ldd	r24, Y+6	; 0x06
    229e:	9f 81       	ldd	r25, Y+7	; 0x07
    22a0:	a8 85       	ldd	r26, Y+8	; 0x08
    22a2:	b9 85       	ldd	r27, Y+9	; 0x09
    22a4:	89 2b       	or	r24, r25
    22a6:	8a 2b       	or	r24, r26
    22a8:	8b 2b       	or	r24, r27
    22aa:	09 f4       	brne	.+2      	; 0x22ae <xStreamBufferSend+0x68>
    22ac:	34 c0       	rjmp	.+104    	; 0x2316 <xStreamBufferSend+0xd0>
    {
        vTaskSetTimeOutState( &xTimeOut );
    22ae:	ce 01       	movw	r24, r28
    22b0:	01 96       	adiw	r24, 0x01	; 1
    22b2:	22 d6       	rcall	.+3140   	; 0x2ef8 <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
            buffer. */
            taskENTER_CRITICAL();
    22b4:	0f b6       	in	r0, 0x3f	; 63
    22b6:	f8 94       	cli
    22b8:	0f 92       	push	r0
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    22ba:	c5 01       	movw	r24, r10
    22bc:	b2 df       	rcall	.-156    	; 0x2222 <xStreamBufferSpacesAvailable>
    22be:	4c 01       	movw	r8, r24

                if( xSpace < xRequiredSpace )
    22c0:	86 15       	cp	r24, r6
    22c2:	97 05       	cpc	r25, r7
    22c4:	18 f5       	brcc	.+70     	; 0x230c <xStreamBufferSend+0xc6>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClear( NULL );
    22c6:	80 e0       	ldi	r24, 0x00	; 0
    22c8:	90 e0       	ldi	r25, 0x00	; 0
    22ca:	0e 94 ce 1a 	call	0x359c	; 0x359c <xTaskNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    22ce:	94 d6       	rcall	.+3368   	; 0x2ff8 <xTaskGetCurrentTaskHandle>
    22d0:	f5 01       	movw	r30, r10
    22d2:	93 87       	std	Z+11, r25	; 0x0b
    22d4:	82 87       	std	Z+10, r24	; 0x0a
                {
                    taskEXIT_CRITICAL();
                    break;
                }
            }
            taskEXIT_CRITICAL();
    22d6:	0f 90       	pop	r0
    22d8:	0f be       	out	0x3f, r0	; 63

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    22da:	ce 80       	ldd	r12, Y+6	; 0x06
    22dc:	df 80       	ldd	r13, Y+7	; 0x07
    22de:	e8 84       	ldd	r14, Y+8	; 0x08
    22e0:	f9 84       	ldd	r15, Y+9	; 0x09
    22e2:	00 e0       	ldi	r16, 0x00	; 0
    22e4:	10 e0       	ldi	r17, 0x00	; 0
    22e6:	20 e0       	ldi	r18, 0x00	; 0
    22e8:	30 e0       	ldi	r19, 0x00	; 0
    22ea:	a9 01       	movw	r20, r18
    22ec:	60 e0       	ldi	r22, 0x00	; 0
    22ee:	70 e0       	ldi	r23, 0x00	; 0
    22f0:	cb 01       	movw	r24, r22
    22f2:	c9 d7       	rcall	.+3986   	; 0x3286 <xTaskNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
    22f4:	f5 01       	movw	r30, r10
    22f6:	13 86       	std	Z+11, r1	; 0x0b
    22f8:	12 86       	std	Z+10, r1	; 0x0a

        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    22fa:	be 01       	movw	r22, r28
    22fc:	6a 5f       	subi	r22, 0xFA	; 250
    22fe:	7f 4f       	sbci	r23, 0xFF	; 255
    2300:	ce 01       	movw	r24, r28
    2302:	01 96       	adiw	r24, 0x01	; 1
    2304:	20 d6       	rcall	.+3136   	; 0x2f46 <xTaskCheckForTimeOut>
    2306:	88 23       	and	r24, r24
    2308:	a9 f2       	breq	.-86     	; 0x22b4 <xStreamBufferSend+0x6e>
    230a:	02 c0       	rjmp	.+4      	; 0x2310 <xStreamBufferSend+0xca>
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
                }
                else
                {
                    taskEXIT_CRITICAL();
    230c:	0f 90       	pop	r0
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
    230e:	0f be       	out	0x3f, r0	; 63
    2310:	81 14       	cp	r8, r1
    2312:	91 04       	cpc	r9, r1
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    2314:	19 f4       	brne	.+6      	; 0x231c <xStreamBufferSend+0xd6>
    2316:	c5 01       	movw	r24, r10
    2318:	84 df       	rcall	.-248    	; 0x2222 <xStreamBufferSpacesAvailable>
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    231a:	4c 01       	movw	r8, r24
    231c:	83 01       	movw	r16, r6
    231e:	94 01       	movw	r18, r8
    2320:	a2 01       	movw	r20, r4
    2322:	b1 01       	movw	r22, r2
    2324:	c5 01       	movw	r24, r10
    2326:	96 de       	rcall	.-724    	; 0x2054 <prvWriteMessageToBuffer>

    if( xReturn > ( size_t ) 0 )
    2328:	7c 01       	movw	r14, r24
    232a:	89 2b       	or	r24, r25
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    232c:	e1 f0       	breq	.+56     	; 0x2366 <xStreamBufferSend+0x120>
    232e:	c5 01       	movw	r24, r10
    2330:	35 de       	rcall	.-918    	; 0x1f9c <prvBytesInBuffer>
    2332:	f5 01       	movw	r30, r10
    2334:	26 81       	ldd	r18, Z+6	; 0x06
    2336:	37 81       	ldd	r19, Z+7	; 0x07
    2338:	82 17       	cp	r24, r18
    233a:	93 07       	cpc	r25, r19
        {
            sbSEND_COMPLETED( pxStreamBuffer );
    233c:	a0 f0       	brcs	.+40     	; 0x2366 <xStreamBufferSend+0x120>
    233e:	0e d3       	rcall	.+1564   	; 0x295c <vTaskSuspendAll>
    2340:	f5 01       	movw	r30, r10
    2342:	80 85       	ldd	r24, Z+8	; 0x08
    2344:	91 85       	ldd	r25, Z+9	; 0x09
    2346:	89 2b       	or	r24, r25
    2348:	69 f0       	breq	.+26     	; 0x2364 <xStreamBufferSend+0x11e>
    234a:	80 85       	ldd	r24, Z+8	; 0x08
    234c:	91 85       	ldd	r25, Z+9	; 0x09
    234e:	00 e0       	ldi	r16, 0x00	; 0
    2350:	10 e0       	ldi	r17, 0x00	; 0
    2352:	20 e0       	ldi	r18, 0x00	; 0
    2354:	40 e0       	ldi	r20, 0x00	; 0
    2356:	50 e0       	ldi	r21, 0x00	; 0
    2358:	ba 01       	movw	r22, r20
    235a:	0e 94 cd 19 	call	0x339a	; 0x339a <xTaskGenericNotify>
    235e:	f5 01       	movw	r30, r10
    2360:	11 86       	std	Z+9, r1	; 0x09
    2362:	10 86       	std	Z+8, r1	; 0x08
    2364:	e4 d3       	rcall	.+1992   	; 0x2b2e <xTaskResumeAll>
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    2366:	c7 01       	movw	r24, r14
    2368:	29 96       	adiw	r28, 0x09	; 9
    236a:	0f b6       	in	r0, 0x3f	; 63
    236c:	f8 94       	cli
    236e:	de bf       	out	0x3e, r29	; 62
    2370:	0f be       	out	0x3f, r0	; 63
    2372:	cd bf       	out	0x3d, r28	; 61
    2374:	df 91       	pop	r29
    2376:	cf 91       	pop	r28
    2378:	1f 91       	pop	r17
    237a:	0f 91       	pop	r16
    237c:	ff 90       	pop	r15
    237e:	ef 90       	pop	r14
    2380:	df 90       	pop	r13
    2382:	cf 90       	pop	r12
    2384:	bf 90       	pop	r11
    2386:	af 90       	pop	r10
    2388:	9f 90       	pop	r9
    238a:	8f 90       	pop	r8
    238c:	7f 90       	pop	r7
    238e:	6f 90       	pop	r6
    2390:	5f 90       	pop	r5
    2392:	4f 90       	pop	r4
    2394:	3f 90       	pop	r3
    2396:	2f 90       	pop	r2
    2398:	08 95       	ret

0000239a <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void *pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    239a:	af 92       	push	r10
    239c:	bf 92       	push	r11
    239e:	cf 92       	push	r12
    23a0:	df 92       	push	r13
    23a2:	ef 92       	push	r14
    23a4:	ff 92       	push	r15
    23a6:	0f 93       	push	r16
    23a8:	1f 93       	push	r17
    23aa:	cf 93       	push	r28
    23ac:	df 93       	push	r29
    23ae:	ec 01       	movw	r28, r24
    23b0:	5b 01       	movw	r10, r22
    23b2:	6a 01       	movw	r12, r20
    23b4:	79 01       	movw	r14, r18

    /* This send function is used to write to both message buffers and stream
    buffers.  If this is a message buffer then the space needed must be
    increased by the amount of bytes needed to store the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    23b6:	8e 85       	ldd	r24, Y+14	; 0x0e
    23b8:	80 ff       	sbrs	r24, 0
    23ba:	04 c0       	rjmp	.+8      	; 0x23c4 <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    23bc:	8a 01       	movw	r16, r20
    23be:	0e 5f       	subi	r16, 0xFE	; 254
    23c0:	1f 4f       	sbci	r17, 0xFF	; 255
    23c2:	01 c0       	rjmp	.+2      	; 0x23c6 <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReturn, xSpace;
size_t xRequiredSpace = xDataLengthBytes;
    23c4:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    23c6:	ce 01       	movw	r24, r28
    23c8:	2c df       	rcall	.-424    	; 0x2222 <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    23ca:	9c 01       	movw	r18, r24
    23cc:	a6 01       	movw	r20, r12
    23ce:	b5 01       	movw	r22, r10
    23d0:	ce 01       	movw	r24, r28
    23d2:	40 de       	rcall	.-896    	; 0x2054 <prvWriteMessageToBuffer>
    23d4:	6c 01       	movw	r12, r24

    if( xReturn > ( size_t ) 0 )
    23d6:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    23d8:	b9 f0       	breq	.+46     	; 0x2408 <xStreamBufferSendFromISR+0x6e>
    23da:	ce 01       	movw	r24, r28
    23dc:	df dd       	rcall	.-1090   	; 0x1f9c <prvBytesInBuffer>
    23de:	2e 81       	ldd	r18, Y+6	; 0x06
    23e0:	3f 81       	ldd	r19, Y+7	; 0x07
    23e2:	82 17       	cp	r24, r18
    23e4:	93 07       	cpc	r25, r19
    23e6:	80 f0       	brcs	.+32     	; 0x2408 <xStreamBufferSendFromISR+0x6e>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    23e8:	88 85       	ldd	r24, Y+8	; 0x08
    23ea:	99 85       	ldd	r25, Y+9	; 0x09
    23ec:	89 2b       	or	r24, r25
    23ee:	61 f0       	breq	.+24     	; 0x2408 <xStreamBufferSendFromISR+0x6e>
    23f0:	88 85       	ldd	r24, Y+8	; 0x08
    23f2:	99 85       	ldd	r25, Y+9	; 0x09
    23f4:	00 e0       	ldi	r16, 0x00	; 0
    23f6:	10 e0       	ldi	r17, 0x00	; 0
    23f8:	20 e0       	ldi	r18, 0x00	; 0
    23fa:	40 e0       	ldi	r20, 0x00	; 0
    23fc:	50 e0       	ldi	r21, 0x00	; 0
    23fe:	ba 01       	movw	r22, r20
    2400:	0e 94 45 1a 	call	0x348a	; 0x348a <xTaskGenericNotifyFromISR>
    2404:	19 86       	std	Y+9, r1	; 0x09
    2406:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    2408:	c6 01       	movw	r24, r12
    240a:	df 91       	pop	r29
    240c:	cf 91       	pop	r28
    240e:	1f 91       	pop	r17
    2410:	0f 91       	pop	r16
    2412:	ff 90       	pop	r15
    2414:	ef 90       	pop	r14
    2416:	df 90       	pop	r13
    2418:	cf 90       	pop	r12
    241a:	bf 90       	pop	r11
    241c:	af 90       	pop	r10
    241e:	08 95       	ret

00002420 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void *pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    2420:	4f 92       	push	r4
    2422:	5f 92       	push	r5
    2424:	6f 92       	push	r6
    2426:	7f 92       	push	r7
    2428:	8f 92       	push	r8
    242a:	9f 92       	push	r9
    242c:	af 92       	push	r10
    242e:	bf 92       	push	r11
    2430:	cf 92       	push	r12
    2432:	df 92       	push	r13
    2434:	ef 92       	push	r14
    2436:	ff 92       	push	r15
    2438:	0f 93       	push	r16
    243a:	1f 93       	push	r17
    243c:	cf 93       	push	r28
    243e:	df 93       	push	r29
    2440:	1f 92       	push	r1
    2442:	1f 92       	push	r1
    2444:	cd b7       	in	r28, 0x3d	; 61
    2446:	de b7       	in	r29, 0x3e	; 62
    2448:	5c 01       	movw	r10, r24
    244a:	2b 01       	movw	r4, r22
    244c:	3a 01       	movw	r6, r20
    244e:	68 01       	movw	r12, r16
    2450:	79 01       	movw	r14, r18
    /* This receive function is used by both message buffers, which store
    discrete messages, and stream buffers, which store a continuous stream of
    bytes.  Discrete messages include an additional
    sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    2452:	fc 01       	movw	r30, r24
    2454:	86 85       	ldd	r24, Z+14	; 0x0e
    2456:	80 fd       	sbrc	r24, 0
    2458:	03 c0       	rjmp	.+6      	; 0x2460 <xStreamBufferReceive+0x40>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    245a:	81 2c       	mov	r8, r1
    245c:	91 2c       	mov	r9, r1
    245e:	04 c0       	rjmp	.+8      	; 0x2468 <xStreamBufferReceive+0x48>
    bytes.  Discrete messages include an additional
    sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    2460:	68 94       	set
    2462:	88 24       	eor	r8, r8
    2464:	81 f8       	bld	r8, 1
    2466:	91 2c       	mov	r9, r1
    else
    {
        xBytesToStoreMessageLength = 0;
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    2468:	c1 14       	cp	r12, r1
    246a:	d1 04       	cpc	r13, r1
    246c:	e1 04       	cpc	r14, r1
    246e:	f1 04       	cpc	r15, r1
    2470:	31 f1       	breq	.+76     	; 0x24be <xStreamBufferReceive+0x9e>
    {
        /* Checking if there is data and clearing the notification state must be
        performed atomically. */
        taskENTER_CRITICAL();
    2472:	0f b6       	in	r0, 0x3f	; 63
    2474:	f8 94       	cli
    2476:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    2478:	c5 01       	movw	r24, r10
    247a:	90 dd       	rcall	.-1248   	; 0x1f9c <prvBytesInBuffer>
    247c:	8c 01       	movw	r16, r24
            /* If this function was invoked by a message buffer read then
            xBytesToStoreMessageLength holds the number of bytes used to hold
            the length of the next discrete message.  If this function was
            invoked by a stream buffer read then xBytesToStoreMessageLength will
            be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    247e:	88 16       	cp	r8, r24
    2480:	99 06       	cpc	r9, r25
    2482:	40 f0       	brcs	.+16     	; 0x2494 <xStreamBufferReceive+0x74>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    2484:	80 e0       	ldi	r24, 0x00	; 0
    2486:	90 e0       	ldi	r25, 0x00	; 0
    2488:	0e 94 ce 1a 	call	0x359c	; 0x359c <xTaskNotifyStateClear>

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    248c:	b5 d5       	rcall	.+2922   	; 0x2ff8 <xTaskGetCurrentTaskHandle>
    248e:	f5 01       	movw	r30, r10
    2490:	91 87       	std	Z+9, r25	; 0x09
    2492:	80 87       	std	Z+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    2494:	0f 90       	pop	r0
    2496:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    2498:	80 16       	cp	r8, r16
    249a:	91 06       	cpc	r9, r17
    249c:	b0 f0       	brcs	.+44     	; 0x24ca <xStreamBufferReceive+0xaa>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    249e:	00 e0       	ldi	r16, 0x00	; 0
    24a0:	10 e0       	ldi	r17, 0x00	; 0
    24a2:	20 e0       	ldi	r18, 0x00	; 0
    24a4:	30 e0       	ldi	r19, 0x00	; 0
    24a6:	a9 01       	movw	r20, r18
    24a8:	60 e0       	ldi	r22, 0x00	; 0
    24aa:	70 e0       	ldi	r23, 0x00	; 0
    24ac:	cb 01       	movw	r24, r22
    24ae:	eb d6       	rcall	.+3542   	; 0x3286 <xTaskNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    24b0:	f5 01       	movw	r30, r10
    24b2:	11 86       	std	Z+9, r1	; 0x09

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    24b4:	10 86       	std	Z+8, r1	; 0x08
    24b6:	c5 01       	movw	r24, r10
    24b8:	71 dd       	rcall	.-1310   	; 0x1f9c <prvBytesInBuffer>
    24ba:	8c 01       	movw	r16, r24
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    24bc:	03 c0       	rjmp	.+6      	; 0x24c4 <xStreamBufferReceive+0xa4>
    24be:	c5 01       	movw	r24, r10
    24c0:	6d dd       	rcall	.-1318   	; 0x1f9c <prvBytesInBuffer>
    24c2:	8c 01       	movw	r16, r24
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
    holds the number of bytes used to store the message length) or a stream of
    bytes (where xBytesToStoreMessageLength is zero), the number of bytes
    available must be greater than xBytesToStoreMessageLength to be able to
    read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    24c4:	80 16       	cp	r8, r16
    24c6:	91 06       	cpc	r9, r17
    24c8:	b8 f5       	brcc	.+110    	; 0x2538 <xStreamBufferReceive+0x118>
                                        size_t xBytesToStoreMessageLength )
{
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

    if( xBytesToStoreMessageLength != ( size_t ) 0 )
    24ca:	81 14       	cp	r8, r1
    24cc:	91 04       	cpc	r9, r1
    24ce:	c1 f0       	breq	.+48     	; 0x2500 <xStreamBufferReceive+0xe0>
    {
        /* A discrete message is being received.  First receive the length
        of the message.  A copy of the tail is stored so the buffer can be
        returned to its prior state if the length of the message is too
        large for the provided buffer. */
        xOriginalTail = pxStreamBuffer->xTail;
    24d0:	f5 01       	movw	r30, r10
    24d2:	e0 80       	ld	r14, Z
    24d4:	f1 80       	ldd	r15, Z+1	; 0x01
        ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
    24d6:	98 01       	movw	r18, r16
    24d8:	a4 01       	movw	r20, r8
    24da:	be 01       	movw	r22, r28
    24dc:	6f 5f       	subi	r22, 0xFF	; 255
    24de:	7f 4f       	sbci	r23, 0xFF	; 255
    24e0:	c5 01       	movw	r24, r10
    24e2:	f8 dd       	rcall	.-1040   	; 0x20d4 <prvReadBytesFromBuffer>
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
    24e4:	89 81       	ldd	r24, Y+1	; 0x01
    24e6:	9a 81       	ldd	r25, Y+2	; 0x02

        /* Reduce the number of bytes available by the number of bytes just
        read out. */
        xBytesAvailable -= xBytesToStoreMessageLength;
    24e8:	08 19       	sub	r16, r8
    24ea:	19 09       	sbc	r17, r9

        /* Check there is enough space in the buffer provided by the
        user. */
        if( xNextMessageLength > xBufferLengthBytes )
    24ec:	68 16       	cp	r6, r24
    24ee:	79 06       	cpc	r7, r25
    24f0:	30 f4       	brcc	.+12     	; 0x24fe <xStreamBufferReceive+0xde>
        {
            /* The user has provided insufficient space to read the message
            so return the buffer to its previous state (so the length of
            the message is in the buffer again). */
            pxStreamBuffer->xTail = xOriginalTail;
    24f2:	f5 01       	movw	r30, r10
    24f4:	f1 82       	std	Z+1, r15	; 0x01
    24f6:	e0 82       	st	Z, r14
            xNextMessageLength = 0;
    24f8:	61 2c       	mov	r6, r1
    24fa:	71 2c       	mov	r7, r1
        of the message.  A copy of the tail is stored so the buffer can be
        returned to its prior state if the length of the message is too
        large for the provided buffer. */
        xOriginalTail = pxStreamBuffer->xTail;
        ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
    24fc:	01 c0       	rjmp	.+2      	; 0x2500 <xStreamBufferReceive+0xe0>
        message), so read as many bytes as possible. */
        xNextMessageLength = xBufferLengthBytes;
    }

    /* Read the actual data. */
    xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
    24fe:	3c 01       	movw	r6, r24
    2500:	98 01       	movw	r18, r16
    2502:	a3 01       	movw	r20, r6
    2504:	b2 01       	movw	r22, r4
    2506:	c5 01       	movw	r24, r10
    2508:	e5 dd       	rcall	.-1078   	; 0x20d4 <prvReadBytesFromBuffer>
    if( xBytesAvailable > xBytesToStoreMessageLength )
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    250a:	7c 01       	movw	r14, r24
    250c:	89 2b       	or	r24, r25
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    250e:	b1 f0       	breq	.+44     	; 0x253c <xStreamBufferReceive+0x11c>
    2510:	25 d2       	rcall	.+1098   	; 0x295c <vTaskSuspendAll>
    2512:	f5 01       	movw	r30, r10
    2514:	82 85       	ldd	r24, Z+10	; 0x0a
    2516:	93 85       	ldd	r25, Z+11	; 0x0b
    2518:	89 2b       	or	r24, r25
    251a:	61 f0       	breq	.+24     	; 0x2534 <xStreamBufferReceive+0x114>
    251c:	82 85       	ldd	r24, Z+10	; 0x0a
    251e:	93 85       	ldd	r25, Z+11	; 0x0b
    2520:	00 e0       	ldi	r16, 0x00	; 0
    2522:	10 e0       	ldi	r17, 0x00	; 0
    2524:	20 e0       	ldi	r18, 0x00	; 0
    2526:	40 e0       	ldi	r20, 0x00	; 0
    2528:	50 e0       	ldi	r21, 0x00	; 0
    252a:	ba 01       	movw	r22, r20
    252c:	36 d7       	rcall	.+3692   	; 0x339a <xTaskGenericNotify>
    252e:	f5 01       	movw	r30, r10
    2530:	13 86       	std	Z+11, r1	; 0x0b
    2532:	12 86       	std	Z+10, r1	; 0x0a
    2534:	fc d2       	rcall	.+1528   	; 0x2b2e <xTaskResumeAll>
    2536:	02 c0       	rjmp	.+4      	; 0x253c <xStreamBufferReceive+0x11c>
                             void *pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    2538:	e1 2c       	mov	r14, r1
    253a:	f1 2c       	mov	r15, r1
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    253c:	c7 01       	movw	r24, r14
    253e:	0f 90       	pop	r0
    2540:	0f 90       	pop	r0
    2542:	df 91       	pop	r29
    2544:	cf 91       	pop	r28
    2546:	1f 91       	pop	r17
    2548:	0f 91       	pop	r16
    254a:	ff 90       	pop	r15
    254c:	ef 90       	pop	r14
    254e:	df 90       	pop	r13
    2550:	cf 90       	pop	r12
    2552:	bf 90       	pop	r11
    2554:	af 90       	pop	r10
    2556:	9f 90       	pop	r9
    2558:	8f 90       	pop	r8
    255a:	7f 90       	pop	r7
    255c:	6f 90       	pop	r6
    255e:	5f 90       	pop	r5
    2560:	4f 90       	pop	r4
    2562:	08 95       	ret

00002564 <prvResetNextTaskUnblockTime>:
    2564:	e0 91 9b 18 	lds	r30, 0x189B	; 0x80189b <pxDelayedTaskList>
    2568:	f0 91 9c 18 	lds	r31, 0x189C	; 0x80189c <pxDelayedTaskList+0x1>
    256c:	80 81       	ld	r24, Z
    256e:	81 11       	cpse	r24, r1
    2570:	0c c0       	rjmp	.+24     	; 0x258a <prvResetNextTaskUnblockTime+0x26>
    2572:	8f ef       	ldi	r24, 0xFF	; 255
    2574:	9f ef       	ldi	r25, 0xFF	; 255
    2576:	dc 01       	movw	r26, r24
    2578:	80 93 68 18 	sts	0x1868, r24	; 0x801868 <xNextTaskUnblockTime>
    257c:	90 93 69 18 	sts	0x1869, r25	; 0x801869 <xNextTaskUnblockTime+0x1>
    2580:	a0 93 6a 18 	sts	0x186A, r26	; 0x80186a <xNextTaskUnblockTime+0x2>
    2584:	b0 93 6b 18 	sts	0x186B, r27	; 0x80186b <xNextTaskUnblockTime+0x3>
    2588:	08 95       	ret
    258a:	e0 91 9b 18 	lds	r30, 0x189B	; 0x80189b <pxDelayedTaskList>
    258e:	f0 91 9c 18 	lds	r31, 0x189C	; 0x80189c <pxDelayedTaskList+0x1>
    2592:	07 80       	ldd	r0, Z+7	; 0x07
    2594:	f0 85       	ldd	r31, Z+8	; 0x08
    2596:	e0 2d       	mov	r30, r0
    2598:	00 84       	ldd	r0, Z+8	; 0x08
    259a:	f1 85       	ldd	r31, Z+9	; 0x09
    259c:	e0 2d       	mov	r30, r0
    259e:	82 81       	ldd	r24, Z+2	; 0x02
    25a0:	93 81       	ldd	r25, Z+3	; 0x03
    25a2:	a4 81       	ldd	r26, Z+4	; 0x04
    25a4:	b5 81       	ldd	r27, Z+5	; 0x05
    25a6:	80 93 68 18 	sts	0x1868, r24	; 0x801868 <xNextTaskUnblockTime>
    25aa:	90 93 69 18 	sts	0x1869, r25	; 0x801869 <xNextTaskUnblockTime+0x1>
    25ae:	a0 93 6a 18 	sts	0x186A, r26	; 0x80186a <xNextTaskUnblockTime+0x2>
    25b2:	b0 93 6b 18 	sts	0x186B, r27	; 0x80186b <xNextTaskUnblockTime+0x3>
    25b6:	08 95       	ret

000025b8 <prvAddCurrentTaskToDelayedList>:
    25b8:	8f 92       	push	r8
    25ba:	9f 92       	push	r9
    25bc:	af 92       	push	r10
    25be:	bf 92       	push	r11
    25c0:	cf 92       	push	r12
    25c2:	df 92       	push	r13
    25c4:	ef 92       	push	r14
    25c6:	ff 92       	push	r15
    25c8:	cf 93       	push	r28
    25ca:	6b 01       	movw	r12, r22
    25cc:	7c 01       	movw	r14, r24
    25ce:	c4 2f       	mov	r28, r20
    25d0:	80 90 72 18 	lds	r8, 0x1872	; 0x801872 <xTickCount>
    25d4:	90 90 73 18 	lds	r9, 0x1873	; 0x801873 <xTickCount+0x1>
    25d8:	a0 90 74 18 	lds	r10, 0x1874	; 0x801874 <xTickCount+0x2>
    25dc:	b0 90 75 18 	lds	r11, 0x1875	; 0x801875 <xTickCount+0x3>
    25e0:	80 91 df 18 	lds	r24, 0x18DF	; 0x8018df <pxCurrentTCB>
    25e4:	90 91 e0 18 	lds	r25, 0x18E0	; 0x8018e0 <pxCurrentTCB+0x1>
    25e8:	02 96       	adiw	r24, 0x02	; 2
    25ea:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <uxListRemove>
    25ee:	8f ef       	ldi	r24, 0xFF	; 255
    25f0:	c8 16       	cp	r12, r24
    25f2:	d8 06       	cpc	r13, r24
    25f4:	e8 06       	cpc	r14, r24
    25f6:	f8 06       	cpc	r15, r24
    25f8:	69 f4       	brne	.+26     	; 0x2614 <prvAddCurrentTaskToDelayedList+0x5c>
    25fa:	cc 23       	and	r28, r28
    25fc:	59 f0       	breq	.+22     	; 0x2614 <prvAddCurrentTaskToDelayedList+0x5c>
    25fe:	60 91 df 18 	lds	r22, 0x18DF	; 0x8018df <pxCurrentTCB>
    2602:	70 91 e0 18 	lds	r23, 0x18E0	; 0x8018e0 <pxCurrentTCB+0x1>
    2606:	6e 5f       	subi	r22, 0xFE	; 254
    2608:	7f 4f       	sbci	r23, 0xFF	; 255
    260a:	87 e7       	ldi	r24, 0x77	; 119
    260c:	98 e1       	ldi	r25, 0x18	; 24
    260e:	0e 94 1e 0a 	call	0x143c	; 0x143c <vListInsertEnd>
    2612:	3f c0       	rjmp	.+126    	; 0x2692 <prvAddCurrentTaskToDelayedList+0xda>
    2614:	c8 0c       	add	r12, r8
    2616:	d9 1c       	adc	r13, r9
    2618:	ea 1c       	adc	r14, r10
    261a:	fb 1c       	adc	r15, r11
    261c:	e0 91 df 18 	lds	r30, 0x18DF	; 0x8018df <pxCurrentTCB>
    2620:	f0 91 e0 18 	lds	r31, 0x18E0	; 0x8018e0 <pxCurrentTCB+0x1>
    2624:	c2 82       	std	Z+2, r12	; 0x02
    2626:	d3 82       	std	Z+3, r13	; 0x03
    2628:	e4 82       	std	Z+4, r14	; 0x04
    262a:	f5 82       	std	Z+5, r15	; 0x05
    262c:	c8 14       	cp	r12, r8
    262e:	d9 04       	cpc	r13, r9
    2630:	ea 04       	cpc	r14, r10
    2632:	fb 04       	cpc	r15, r11
    2634:	68 f4       	brcc	.+26     	; 0x2650 <prvAddCurrentTaskToDelayedList+0x98>
    2636:	60 91 df 18 	lds	r22, 0x18DF	; 0x8018df <pxCurrentTCB>
    263a:	70 91 e0 18 	lds	r23, 0x18E0	; 0x8018e0 <pxCurrentTCB+0x1>
    263e:	80 91 99 18 	lds	r24, 0x1899	; 0x801899 <pxOverflowDelayedTaskList>
    2642:	90 91 9a 18 	lds	r25, 0x189A	; 0x80189a <pxOverflowDelayedTaskList+0x1>
    2646:	6e 5f       	subi	r22, 0xFE	; 254
    2648:	7f 4f       	sbci	r23, 0xFF	; 255
    264a:	0e 94 3f 0a 	call	0x147e	; 0x147e <vListInsert>
    264e:	21 c0       	rjmp	.+66     	; 0x2692 <prvAddCurrentTaskToDelayedList+0xda>
    2650:	60 91 df 18 	lds	r22, 0x18DF	; 0x8018df <pxCurrentTCB>
    2654:	70 91 e0 18 	lds	r23, 0x18E0	; 0x8018e0 <pxCurrentTCB+0x1>
    2658:	80 91 9b 18 	lds	r24, 0x189B	; 0x80189b <pxDelayedTaskList>
    265c:	90 91 9c 18 	lds	r25, 0x189C	; 0x80189c <pxDelayedTaskList+0x1>
    2660:	6e 5f       	subi	r22, 0xFE	; 254
    2662:	7f 4f       	sbci	r23, 0xFF	; 255
    2664:	0e 94 3f 0a 	call	0x147e	; 0x147e <vListInsert>
    2668:	80 91 68 18 	lds	r24, 0x1868	; 0x801868 <xNextTaskUnblockTime>
    266c:	90 91 69 18 	lds	r25, 0x1869	; 0x801869 <xNextTaskUnblockTime+0x1>
    2670:	a0 91 6a 18 	lds	r26, 0x186A	; 0x80186a <xNextTaskUnblockTime+0x2>
    2674:	b0 91 6b 18 	lds	r27, 0x186B	; 0x80186b <xNextTaskUnblockTime+0x3>
    2678:	c8 16       	cp	r12, r24
    267a:	d9 06       	cpc	r13, r25
    267c:	ea 06       	cpc	r14, r26
    267e:	fb 06       	cpc	r15, r27
    2680:	40 f4       	brcc	.+16     	; 0x2692 <prvAddCurrentTaskToDelayedList+0xda>
    2682:	c0 92 68 18 	sts	0x1868, r12	; 0x801868 <xNextTaskUnblockTime>
    2686:	d0 92 69 18 	sts	0x1869, r13	; 0x801869 <xNextTaskUnblockTime+0x1>
    268a:	e0 92 6a 18 	sts	0x186A, r14	; 0x80186a <xNextTaskUnblockTime+0x2>
    268e:	f0 92 6b 18 	sts	0x186B, r15	; 0x80186b <xNextTaskUnblockTime+0x3>
    2692:	cf 91       	pop	r28
    2694:	ff 90       	pop	r15
    2696:	ef 90       	pop	r14
    2698:	df 90       	pop	r13
    269a:	cf 90       	pop	r12
    269c:	bf 90       	pop	r11
    269e:	af 90       	pop	r10
    26a0:	9f 90       	pop	r9
    26a2:	8f 90       	pop	r8
    26a4:	08 95       	ret

000026a6 <xTaskCreate>:
    26a6:	4f 92       	push	r4
    26a8:	5f 92       	push	r5
    26aa:	6f 92       	push	r6
    26ac:	7f 92       	push	r7
    26ae:	8f 92       	push	r8
    26b0:	9f 92       	push	r9
    26b2:	af 92       	push	r10
    26b4:	bf 92       	push	r11
    26b6:	cf 92       	push	r12
    26b8:	df 92       	push	r13
    26ba:	ef 92       	push	r14
    26bc:	ff 92       	push	r15
    26be:	0f 93       	push	r16
    26c0:	cf 93       	push	r28
    26c2:	df 93       	push	r29
    26c4:	4c 01       	movw	r8, r24
    26c6:	6b 01       	movw	r12, r22
    26c8:	5a 01       	movw	r10, r20
    26ca:	29 01       	movw	r4, r18
    26cc:	ca 01       	movw	r24, r20
    26ce:	0e 94 1f 09 	call	0x123e	; 0x123e <pvPortMalloc>
    26d2:	3c 01       	movw	r6, r24
    26d4:	89 2b       	or	r24, r25
    26d6:	09 f4       	brne	.+2      	; 0x26da <xTaskCreate+0x34>
    26d8:	f4 c0       	rjmp	.+488    	; 0x28c2 <xTaskCreate+0x21c>
    26da:	80 e3       	ldi	r24, 0x30	; 48
    26dc:	90 e0       	ldi	r25, 0x00	; 0
    26de:	0e 94 1f 09 	call	0x123e	; 0x123e <pvPortMalloc>
    26e2:	ec 01       	movw	r28, r24
    26e4:	89 2b       	or	r24, r25
    26e6:	99 f0       	breq	.+38     	; 0x270e <xTaskCreate+0x68>
    26e8:	7c 8e       	std	Y+28, r7	; 0x1c
    26ea:	6b 8e       	std	Y+27, r6	; 0x1b
    26ec:	a5 01       	movw	r20, r10
    26ee:	65 ea       	ldi	r22, 0xA5	; 165
    26f0:	70 e0       	ldi	r23, 0x00	; 0
    26f2:	c3 01       	movw	r24, r6
    26f4:	0e 94 61 2d 	call	0x5ac2	; 0x5ac2 <memset>
    26f8:	21 e0       	ldi	r18, 0x01	; 1
    26fa:	a2 1a       	sub	r10, r18
    26fc:	b1 08       	sbc	r11, r1
    26fe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2700:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2702:	a8 0e       	add	r10, r24
    2704:	b9 1e       	adc	r11, r25
    2706:	c1 14       	cp	r12, r1
    2708:	d1 04       	cpc	r13, r1
    270a:	29 f4       	brne	.+10     	; 0x2716 <xTaskCreate+0x70>
    270c:	20 c0       	rjmp	.+64     	; 0x274e <xTaskCreate+0xa8>
    270e:	c3 01       	movw	r24, r6
    2710:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <vPortFree>
    2714:	d6 c0       	rjmp	.+428    	; 0x28c2 <xTaskCreate+0x21c>
    2716:	d6 01       	movw	r26, r12
    2718:	8c 91       	ld	r24, X
    271a:	8d 8f       	std	Y+29, r24	; 0x1d
    271c:	8c 91       	ld	r24, X
    271e:	88 23       	and	r24, r24
    2720:	a1 f0       	breq	.+40     	; 0x274a <xTaskCreate+0xa4>
    2722:	ae 01       	movw	r20, r28
    2724:	42 5e       	subi	r20, 0xE2	; 226
    2726:	5f 4f       	sbci	r21, 0xFF	; 255
    2728:	f6 01       	movw	r30, r12
    272a:	31 96       	adiw	r30, 0x01	; 1
    272c:	b8 e0       	ldi	r27, 0x08	; 8
    272e:	cb 0e       	add	r12, r27
    2730:	d1 1c       	adc	r13, r1
    2732:	cf 01       	movw	r24, r30
    2734:	21 91       	ld	r18, Z+
    2736:	da 01       	movw	r26, r20
    2738:	2d 93       	st	X+, r18
    273a:	ad 01       	movw	r20, r26
    273c:	dc 01       	movw	r26, r24
    273e:	8c 91       	ld	r24, X
    2740:	88 23       	and	r24, r24
    2742:	19 f0       	breq	.+6      	; 0x274a <xTaskCreate+0xa4>
    2744:	ec 15       	cp	r30, r12
    2746:	fd 05       	cpc	r31, r13
    2748:	a1 f7       	brne	.-24     	; 0x2732 <xTaskCreate+0x8c>
    274a:	1c a2       	std	Y+36, r1	; 0x24
    274c:	01 c0       	rjmp	.+2      	; 0x2750 <xTaskCreate+0xaa>
    274e:	1d 8e       	std	Y+29, r1	; 0x1d
    2750:	04 30       	cpi	r16, 0x04	; 4
    2752:	08 f0       	brcs	.+2      	; 0x2756 <xTaskCreate+0xb0>
    2754:	03 e0       	ldi	r16, 0x03	; 3
    2756:	0a 8f       	std	Y+26, r16	; 0x1a
    2758:	0f a3       	std	Y+39, r16	; 0x27
    275a:	18 a6       	std	Y+40, r1	; 0x28
    275c:	6e 01       	movw	r12, r28
    275e:	b2 e0       	ldi	r27, 0x02	; 2
    2760:	cb 0e       	add	r12, r27
    2762:	d1 1c       	adc	r13, r1
    2764:	c6 01       	movw	r24, r12
    2766:	0e 94 1a 0a 	call	0x1434	; 0x1434 <vListInitialiseItem>
    276a:	ce 01       	movw	r24, r28
    276c:	0e 96       	adiw	r24, 0x0e	; 14
    276e:	0e 94 1a 0a 	call	0x1434	; 0x1434 <vListInitialiseItem>
    2772:	db 87       	std	Y+11, r29	; 0x0b
    2774:	ca 87       	std	Y+10, r28	; 0x0a
    2776:	84 e0       	ldi	r24, 0x04	; 4
    2778:	90 e0       	ldi	r25, 0x00	; 0
    277a:	a0 e0       	ldi	r26, 0x00	; 0
    277c:	b0 e0       	ldi	r27, 0x00	; 0
    277e:	80 1b       	sub	r24, r16
    2780:	91 09       	sbc	r25, r1
    2782:	a1 09       	sbc	r26, r1
    2784:	b1 09       	sbc	r27, r1
    2786:	8e 87       	std	Y+14, r24	; 0x0e
    2788:	9f 87       	std	Y+15, r25	; 0x0f
    278a:	a8 8b       	std	Y+16, r26	; 0x10
    278c:	b9 8b       	std	Y+17, r27	; 0x11
    278e:	df 8b       	std	Y+23, r29	; 0x17
    2790:	ce 8b       	std	Y+22, r28	; 0x16
    2792:	1a a6       	std	Y+42, r1	; 0x2a
    2794:	19 a6       	std	Y+41, r1	; 0x29
    2796:	1b a6       	std	Y+43, r1	; 0x2b
    2798:	1c a6       	std	Y+44, r1	; 0x2c
    279a:	1d a6       	std	Y+45, r1	; 0x2d
    279c:	1e a6       	std	Y+46, r1	; 0x2e
    279e:	1f a6       	std	Y+47, r1	; 0x2f
    27a0:	a2 01       	movw	r20, r4
    27a2:	b4 01       	movw	r22, r8
    27a4:	c5 01       	movw	r24, r10
    27a6:	0e 94 a3 0a 	call	0x1546	; 0x1546 <pxPortInitialiseStack>
    27aa:	99 83       	std	Y+1, r25	; 0x01
    27ac:	88 83       	st	Y, r24
    27ae:	e1 14       	cp	r14, r1
    27b0:	f1 04       	cpc	r15, r1
    27b2:	19 f0       	breq	.+6      	; 0x27ba <xTaskCreate+0x114>
    27b4:	f7 01       	movw	r30, r14
    27b6:	d1 83       	std	Z+1, r29	; 0x01
    27b8:	c0 83       	st	Z, r28
    27ba:	0f b6       	in	r0, 0x3f	; 63
    27bc:	f8 94       	cli
    27be:	0f 92       	push	r0
    27c0:	80 91 76 18 	lds	r24, 0x1876	; 0x801876 <uxCurrentNumberOfTasks>
    27c4:	8f 5f       	subi	r24, 0xFF	; 255
    27c6:	80 93 76 18 	sts	0x1876, r24	; 0x801876 <uxCurrentNumberOfTasks>
    27ca:	80 91 df 18 	lds	r24, 0x18DF	; 0x8018df <pxCurrentTCB>
    27ce:	90 91 e0 18 	lds	r25, 0x18E0	; 0x8018e0 <pxCurrentTCB+0x1>
    27d2:	89 2b       	or	r24, r25
    27d4:	d1 f5       	brne	.+116    	; 0x284a <xTaskCreate+0x1a4>
    27d6:	d0 93 e0 18 	sts	0x18E0, r29	; 0x8018e0 <pxCurrentTCB+0x1>
    27da:	c0 93 df 18 	sts	0x18DF, r28	; 0x8018df <pxCurrentTCB>
    27de:	80 91 76 18 	lds	r24, 0x1876	; 0x801876 <uxCurrentNumberOfTasks>
    27e2:	81 30       	cpi	r24, 0x01	; 1
    27e4:	09 f0       	breq	.+2      	; 0x27e8 <xTaskCreate+0x142>
    27e6:	41 c0       	rjmp	.+130    	; 0x286a <xTaskCreate+0x1c4>
    27e8:	83 eb       	ldi	r24, 0xB3	; 179
    27ea:	98 e1       	ldi	r25, 0x18	; 24
    27ec:	0e 94 09 0a 	call	0x1412	; 0x1412 <vListInitialise>
    27f0:	8e eb       	ldi	r24, 0xBE	; 190
    27f2:	98 e1       	ldi	r25, 0x18	; 24
    27f4:	0e 94 09 0a 	call	0x1412	; 0x1412 <vListInitialise>
    27f8:	89 ec       	ldi	r24, 0xC9	; 201
    27fa:	98 e1       	ldi	r25, 0x18	; 24
    27fc:	0e 94 09 0a 	call	0x1412	; 0x1412 <vListInitialise>
    2800:	84 ed       	ldi	r24, 0xD4	; 212
    2802:	98 e1       	ldi	r25, 0x18	; 24
    2804:	0e 94 09 0a 	call	0x1412	; 0x1412 <vListInitialise>
    2808:	88 ea       	ldi	r24, 0xA8	; 168
    280a:	98 e1       	ldi	r25, 0x18	; 24
    280c:	0e 94 09 0a 	call	0x1412	; 0x1412 <vListInitialise>
    2810:	8d e9       	ldi	r24, 0x9D	; 157
    2812:	98 e1       	ldi	r25, 0x18	; 24
    2814:	0e 94 09 0a 	call	0x1412	; 0x1412 <vListInitialise>
    2818:	8e e8       	ldi	r24, 0x8E	; 142
    281a:	98 e1       	ldi	r25, 0x18	; 24
    281c:	0e 94 09 0a 	call	0x1412	; 0x1412 <vListInitialise>
    2820:	83 e8       	ldi	r24, 0x83	; 131
    2822:	98 e1       	ldi	r25, 0x18	; 24
    2824:	0e 94 09 0a 	call	0x1412	; 0x1412 <vListInitialise>
    2828:	87 e7       	ldi	r24, 0x77	; 119
    282a:	98 e1       	ldi	r25, 0x18	; 24
    282c:	0e 94 09 0a 	call	0x1412	; 0x1412 <vListInitialise>
    2830:	88 ea       	ldi	r24, 0xA8	; 168
    2832:	98 e1       	ldi	r25, 0x18	; 24
    2834:	90 93 9c 18 	sts	0x189C, r25	; 0x80189c <pxDelayedTaskList+0x1>
    2838:	80 93 9b 18 	sts	0x189B, r24	; 0x80189b <pxDelayedTaskList>
    283c:	8d e9       	ldi	r24, 0x9D	; 157
    283e:	98 e1       	ldi	r25, 0x18	; 24
    2840:	90 93 9a 18 	sts	0x189A, r25	; 0x80189a <pxOverflowDelayedTaskList+0x1>
    2844:	80 93 99 18 	sts	0x1899, r24	; 0x801899 <pxOverflowDelayedTaskList>
    2848:	10 c0       	rjmp	.+32     	; 0x286a <xTaskCreate+0x1c4>
    284a:	80 91 70 18 	lds	r24, 0x1870	; 0x801870 <xSchedulerRunning>
    284e:	81 11       	cpse	r24, r1
    2850:	0c c0       	rjmp	.+24     	; 0x286a <xTaskCreate+0x1c4>
    2852:	e0 91 df 18 	lds	r30, 0x18DF	; 0x8018df <pxCurrentTCB>
    2856:	f0 91 e0 18 	lds	r31, 0x18E0	; 0x8018e0 <pxCurrentTCB+0x1>
    285a:	92 8d       	ldd	r25, Z+26	; 0x1a
    285c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    285e:	89 17       	cp	r24, r25
    2860:	20 f0       	brcs	.+8      	; 0x286a <xTaskCreate+0x1c4>
    2862:	d0 93 e0 18 	sts	0x18E0, r29	; 0x8018e0 <pxCurrentTCB+0x1>
    2866:	c0 93 df 18 	sts	0x18DF, r28	; 0x8018df <pxCurrentTCB>
    286a:	80 91 6c 18 	lds	r24, 0x186C	; 0x80186c <uxTaskNumber>
    286e:	8f 5f       	subi	r24, 0xFF	; 255
    2870:	80 93 6c 18 	sts	0x186C, r24	; 0x80186c <uxTaskNumber>
    2874:	8d a3       	std	Y+37, r24	; 0x25
    2876:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2878:	90 91 71 18 	lds	r25, 0x1871	; 0x801871 <uxTopReadyPriority>
    287c:	98 17       	cp	r25, r24
    287e:	10 f4       	brcc	.+4      	; 0x2884 <xTaskCreate+0x1de>
    2880:	80 93 71 18 	sts	0x1871, r24	; 0x801871 <uxTopReadyPriority>
    2884:	fb e0       	ldi	r31, 0x0B	; 11
    2886:	8f 9f       	mul	r24, r31
    2888:	c0 01       	movw	r24, r0
    288a:	11 24       	eor	r1, r1
    288c:	b6 01       	movw	r22, r12
    288e:	8d 54       	subi	r24, 0x4D	; 77
    2890:	97 4e       	sbci	r25, 0xE7	; 231
    2892:	0e 94 1e 0a 	call	0x143c	; 0x143c <vListInsertEnd>
    2896:	0f 90       	pop	r0
    2898:	0f be       	out	0x3f, r0	; 63
    289a:	80 91 70 18 	lds	r24, 0x1870	; 0x801870 <xSchedulerRunning>
    289e:	88 23       	and	r24, r24
    28a0:	61 f0       	breq	.+24     	; 0x28ba <xTaskCreate+0x214>
    28a2:	e0 91 df 18 	lds	r30, 0x18DF	; 0x8018df <pxCurrentTCB>
    28a6:	f0 91 e0 18 	lds	r31, 0x18E0	; 0x8018e0 <pxCurrentTCB+0x1>
    28aa:	92 8d       	ldd	r25, Z+26	; 0x1a
    28ac:	8a 8d       	ldd	r24, Y+26	; 0x1a
    28ae:	98 17       	cp	r25, r24
    28b0:	30 f4       	brcc	.+12     	; 0x28be <xTaskCreate+0x218>
    28b2:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <vPortYield>
    28b6:	81 e0       	ldi	r24, 0x01	; 1
    28b8:	05 c0       	rjmp	.+10     	; 0x28c4 <xTaskCreate+0x21e>
    28ba:	81 e0       	ldi	r24, 0x01	; 1
    28bc:	03 c0       	rjmp	.+6      	; 0x28c4 <xTaskCreate+0x21e>
    28be:	81 e0       	ldi	r24, 0x01	; 1
    28c0:	01 c0       	rjmp	.+2      	; 0x28c4 <xTaskCreate+0x21e>
    28c2:	8f ef       	ldi	r24, 0xFF	; 255
    28c4:	df 91       	pop	r29
    28c6:	cf 91       	pop	r28
    28c8:	0f 91       	pop	r16
    28ca:	ff 90       	pop	r15
    28cc:	ef 90       	pop	r14
    28ce:	df 90       	pop	r13
    28d0:	cf 90       	pop	r12
    28d2:	bf 90       	pop	r11
    28d4:	af 90       	pop	r10
    28d6:	9f 90       	pop	r9
    28d8:	8f 90       	pop	r8
    28da:	7f 90       	pop	r7
    28dc:	6f 90       	pop	r6
    28de:	5f 90       	pop	r5
    28e0:	4f 90       	pop	r4
    28e2:	08 95       	ret

000028e4 <vTaskStartScheduler>:
    28e4:	ef 92       	push	r14
    28e6:	ff 92       	push	r15
    28e8:	0f 93       	push	r16
    28ea:	0f 2e       	mov	r0, r31
    28ec:	f6 e6       	ldi	r31, 0x66	; 102
    28ee:	ef 2e       	mov	r14, r31
    28f0:	f8 e1       	ldi	r31, 0x18	; 24
    28f2:	ff 2e       	mov	r15, r31
    28f4:	f0 2d       	mov	r31, r0
    28f6:	00 e0       	ldi	r16, 0x00	; 0
    28f8:	20 e0       	ldi	r18, 0x00	; 0
    28fa:	30 e0       	ldi	r19, 0x00	; 0
    28fc:	40 ec       	ldi	r20, 0xC0	; 192
    28fe:	50 e0       	ldi	r21, 0x00	; 0
    2900:	6a e0       	ldi	r22, 0x0A	; 10
    2902:	75 e0       	ldi	r23, 0x05	; 5
    2904:	8d ec       	ldi	r24, 0xCD	; 205
    2906:	90 e0       	ldi	r25, 0x00	; 0
    2908:	ce de       	rcall	.-612    	; 0x26a6 <xTaskCreate>
    290a:	81 30       	cpi	r24, 0x01	; 1
    290c:	19 f5       	brne	.+70     	; 0x2954 <vTaskStartScheduler+0x70>
    290e:	cc d6       	rcall	.+3480   	; 0x36a8 <xTimerCreateTimerTask>
    2910:	81 30       	cpi	r24, 0x01	; 1
    2912:	01 f5       	brne	.+64     	; 0x2954 <vTaskStartScheduler+0x70>
    2914:	f8 94       	cli
    2916:	8f ef       	ldi	r24, 0xFF	; 255
    2918:	9f ef       	ldi	r25, 0xFF	; 255
    291a:	dc 01       	movw	r26, r24
    291c:	80 93 68 18 	sts	0x1868, r24	; 0x801868 <xNextTaskUnblockTime>
    2920:	90 93 69 18 	sts	0x1869, r25	; 0x801869 <xNextTaskUnblockTime+0x1>
    2924:	a0 93 6a 18 	sts	0x186A, r26	; 0x80186a <xNextTaskUnblockTime+0x2>
    2928:	b0 93 6b 18 	sts	0x186B, r27	; 0x80186b <xNextTaskUnblockTime+0x3>
    292c:	81 e0       	ldi	r24, 0x01	; 1
    292e:	80 93 70 18 	sts	0x1870, r24	; 0x801870 <xSchedulerRunning>
    2932:	10 92 72 18 	sts	0x1872, r1	; 0x801872 <xTickCount>
    2936:	10 92 73 18 	sts	0x1873, r1	; 0x801873 <xTickCount+0x1>
    293a:	10 92 74 18 	sts	0x1874, r1	; 0x801874 <xTickCount+0x2>
    293e:	10 92 75 18 	sts	0x1875, r1	; 0x801875 <xTickCount+0x3>
    2942:	e0 91 df 18 	lds	r30, 0x18DF	; 0x8018df <pxCurrentTCB>
    2946:	f0 91 e0 18 	lds	r31, 0x18E0	; 0x8018e0 <pxCurrentTCB+0x1>
    294a:	81 a5       	ldd	r24, Z+41	; 0x29
    294c:	0e 94 56 07 	call	0xeac	; 0xeac <task_switch_in>
    2950:	0e 94 15 0b 	call	0x162a	; 0x162a <xPortStartScheduler>
    2954:	0f 91       	pop	r16
    2956:	ff 90       	pop	r15
    2958:	ef 90       	pop	r14
    295a:	08 95       	ret

0000295c <vTaskSuspendAll>:
    295c:	80 91 65 18 	lds	r24, 0x1865	; 0x801865 <uxSchedulerSuspended>
    2960:	8f 5f       	subi	r24, 0xFF	; 255
    2962:	80 93 65 18 	sts	0x1865, r24	; 0x801865 <uxSchedulerSuspended>
    2966:	08 95       	ret

00002968 <xTaskGetTickCount>:
    2968:	0f b6       	in	r0, 0x3f	; 63
    296a:	f8 94       	cli
    296c:	0f 92       	push	r0
    296e:	60 91 72 18 	lds	r22, 0x1872	; 0x801872 <xTickCount>
    2972:	70 91 73 18 	lds	r23, 0x1873	; 0x801873 <xTickCount+0x1>
    2976:	80 91 74 18 	lds	r24, 0x1874	; 0x801874 <xTickCount+0x2>
    297a:	90 91 75 18 	lds	r25, 0x1875	; 0x801875 <xTickCount+0x3>
    297e:	0f 90       	pop	r0
    2980:	0f be       	out	0x3f, r0	; 63
    2982:	08 95       	ret

00002984 <xTaskIncrementTick>:
    2984:	9f 92       	push	r9
    2986:	af 92       	push	r10
    2988:	bf 92       	push	r11
    298a:	cf 92       	push	r12
    298c:	df 92       	push	r13
    298e:	ef 92       	push	r14
    2990:	ff 92       	push	r15
    2992:	0f 93       	push	r16
    2994:	1f 93       	push	r17
    2996:	cf 93       	push	r28
    2998:	df 93       	push	r29
    299a:	80 91 65 18 	lds	r24, 0x1865	; 0x801865 <uxSchedulerSuspended>
    299e:	81 11       	cpse	r24, r1
    29a0:	ad c0       	rjmp	.+346    	; 0x2afc <xTaskIncrementTick+0x178>
    29a2:	c0 90 72 18 	lds	r12, 0x1872	; 0x801872 <xTickCount>
    29a6:	d0 90 73 18 	lds	r13, 0x1873	; 0x801873 <xTickCount+0x1>
    29aa:	e0 90 74 18 	lds	r14, 0x1874	; 0x801874 <xTickCount+0x2>
    29ae:	f0 90 75 18 	lds	r15, 0x1875	; 0x801875 <xTickCount+0x3>
    29b2:	8f ef       	ldi	r24, 0xFF	; 255
    29b4:	c8 1a       	sub	r12, r24
    29b6:	d8 0a       	sbc	r13, r24
    29b8:	e8 0a       	sbc	r14, r24
    29ba:	f8 0a       	sbc	r15, r24
    29bc:	c0 92 72 18 	sts	0x1872, r12	; 0x801872 <xTickCount>
    29c0:	d0 92 73 18 	sts	0x1873, r13	; 0x801873 <xTickCount+0x1>
    29c4:	e0 92 74 18 	sts	0x1874, r14	; 0x801874 <xTickCount+0x2>
    29c8:	f0 92 75 18 	sts	0x1875, r15	; 0x801875 <xTickCount+0x3>
    29cc:	c1 14       	cp	r12, r1
    29ce:	d1 04       	cpc	r13, r1
    29d0:	e1 04       	cpc	r14, r1
    29d2:	f1 04       	cpc	r15, r1
    29d4:	b1 f4       	brne	.+44     	; 0x2a02 <xTaskIncrementTick+0x7e>
    29d6:	80 91 9b 18 	lds	r24, 0x189B	; 0x80189b <pxDelayedTaskList>
    29da:	90 91 9c 18 	lds	r25, 0x189C	; 0x80189c <pxDelayedTaskList+0x1>
    29de:	20 91 99 18 	lds	r18, 0x1899	; 0x801899 <pxOverflowDelayedTaskList>
    29e2:	30 91 9a 18 	lds	r19, 0x189A	; 0x80189a <pxOverflowDelayedTaskList+0x1>
    29e6:	30 93 9c 18 	sts	0x189C, r19	; 0x80189c <pxDelayedTaskList+0x1>
    29ea:	20 93 9b 18 	sts	0x189B, r18	; 0x80189b <pxDelayedTaskList>
    29ee:	90 93 9a 18 	sts	0x189A, r25	; 0x80189a <pxOverflowDelayedTaskList+0x1>
    29f2:	80 93 99 18 	sts	0x1899, r24	; 0x801899 <pxOverflowDelayedTaskList>
    29f6:	80 91 6d 18 	lds	r24, 0x186D	; 0x80186d <xNumOfOverflows>
    29fa:	8f 5f       	subi	r24, 0xFF	; 255
    29fc:	80 93 6d 18 	sts	0x186D, r24	; 0x80186d <xNumOfOverflows>
    2a00:	b1 dd       	rcall	.-1182   	; 0x2564 <prvResetNextTaskUnblockTime>
    2a02:	80 91 68 18 	lds	r24, 0x1868	; 0x801868 <xNextTaskUnblockTime>
    2a06:	90 91 69 18 	lds	r25, 0x1869	; 0x801869 <xNextTaskUnblockTime+0x1>
    2a0a:	a0 91 6a 18 	lds	r26, 0x186A	; 0x80186a <xNextTaskUnblockTime+0x2>
    2a0e:	b0 91 6b 18 	lds	r27, 0x186B	; 0x80186b <xNextTaskUnblockTime+0x3>
    2a12:	c8 16       	cp	r12, r24
    2a14:	d9 06       	cpc	r13, r25
    2a16:	ea 06       	cpc	r14, r26
    2a18:	fb 06       	cpc	r15, r27
    2a1a:	10 f4       	brcc	.+4      	; 0x2a20 <xTaskIncrementTick+0x9c>
    2a1c:	b1 2c       	mov	r11, r1
    2a1e:	5d c0       	rjmp	.+186    	; 0x2ada <xTaskIncrementTick+0x156>
    2a20:	b1 2c       	mov	r11, r1
    2a22:	0f 2e       	mov	r0, r31
    2a24:	fb e0       	ldi	r31, 0x0B	; 11
    2a26:	af 2e       	mov	r10, r31
    2a28:	f0 2d       	mov	r31, r0
    2a2a:	99 24       	eor	r9, r9
    2a2c:	93 94       	inc	r9
    2a2e:	e0 91 9b 18 	lds	r30, 0x189B	; 0x80189b <pxDelayedTaskList>
    2a32:	f0 91 9c 18 	lds	r31, 0x189C	; 0x80189c <pxDelayedTaskList+0x1>
    2a36:	80 81       	ld	r24, Z
    2a38:	81 11       	cpse	r24, r1
    2a3a:	0c c0       	rjmp	.+24     	; 0x2a54 <xTaskIncrementTick+0xd0>
    2a3c:	8f ef       	ldi	r24, 0xFF	; 255
    2a3e:	9f ef       	ldi	r25, 0xFF	; 255
    2a40:	dc 01       	movw	r26, r24
    2a42:	80 93 68 18 	sts	0x1868, r24	; 0x801868 <xNextTaskUnblockTime>
    2a46:	90 93 69 18 	sts	0x1869, r25	; 0x801869 <xNextTaskUnblockTime+0x1>
    2a4a:	a0 93 6a 18 	sts	0x186A, r26	; 0x80186a <xNextTaskUnblockTime+0x2>
    2a4e:	b0 93 6b 18 	sts	0x186B, r27	; 0x80186b <xNextTaskUnblockTime+0x3>
    2a52:	43 c0       	rjmp	.+134    	; 0x2ada <xTaskIncrementTick+0x156>
    2a54:	e0 91 9b 18 	lds	r30, 0x189B	; 0x80189b <pxDelayedTaskList>
    2a58:	f0 91 9c 18 	lds	r31, 0x189C	; 0x80189c <pxDelayedTaskList+0x1>
    2a5c:	07 80       	ldd	r0, Z+7	; 0x07
    2a5e:	f0 85       	ldd	r31, Z+8	; 0x08
    2a60:	e0 2d       	mov	r30, r0
    2a62:	c0 85       	ldd	r28, Z+8	; 0x08
    2a64:	d1 85       	ldd	r29, Z+9	; 0x09
    2a66:	8a 81       	ldd	r24, Y+2	; 0x02
    2a68:	9b 81       	ldd	r25, Y+3	; 0x03
    2a6a:	ac 81       	ldd	r26, Y+4	; 0x04
    2a6c:	bd 81       	ldd	r27, Y+5	; 0x05
    2a6e:	c8 16       	cp	r12, r24
    2a70:	d9 06       	cpc	r13, r25
    2a72:	ea 06       	cpc	r14, r26
    2a74:	fb 06       	cpc	r15, r27
    2a76:	48 f4       	brcc	.+18     	; 0x2a8a <xTaskIncrementTick+0x106>
    2a78:	80 93 68 18 	sts	0x1868, r24	; 0x801868 <xNextTaskUnblockTime>
    2a7c:	90 93 69 18 	sts	0x1869, r25	; 0x801869 <xNextTaskUnblockTime+0x1>
    2a80:	a0 93 6a 18 	sts	0x186A, r26	; 0x80186a <xNextTaskUnblockTime+0x2>
    2a84:	b0 93 6b 18 	sts	0x186B, r27	; 0x80186b <xNextTaskUnblockTime+0x3>
    2a88:	28 c0       	rjmp	.+80     	; 0x2ada <xTaskIncrementTick+0x156>
    2a8a:	8e 01       	movw	r16, r28
    2a8c:	0e 5f       	subi	r16, 0xFE	; 254
    2a8e:	1f 4f       	sbci	r17, 0xFF	; 255
    2a90:	c8 01       	movw	r24, r16
    2a92:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <uxListRemove>
    2a96:	88 8d       	ldd	r24, Y+24	; 0x18
    2a98:	99 8d       	ldd	r25, Y+25	; 0x19
    2a9a:	89 2b       	or	r24, r25
    2a9c:	21 f0       	breq	.+8      	; 0x2aa6 <xTaskIncrementTick+0x122>
    2a9e:	ce 01       	movw	r24, r28
    2aa0:	0e 96       	adiw	r24, 0x0e	; 14
    2aa2:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <uxListRemove>
    2aa6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2aa8:	90 91 71 18 	lds	r25, 0x1871	; 0x801871 <uxTopReadyPriority>
    2aac:	98 17       	cp	r25, r24
    2aae:	10 f4       	brcc	.+4      	; 0x2ab4 <xTaskIncrementTick+0x130>
    2ab0:	80 93 71 18 	sts	0x1871, r24	; 0x801871 <uxTopReadyPriority>
    2ab4:	a8 9e       	mul	r10, r24
    2ab6:	c0 01       	movw	r24, r0
    2ab8:	11 24       	eor	r1, r1
    2aba:	b8 01       	movw	r22, r16
    2abc:	8d 54       	subi	r24, 0x4D	; 77
    2abe:	97 4e       	sbci	r25, 0xE7	; 231
    2ac0:	0e 94 1e 0a 	call	0x143c	; 0x143c <vListInsertEnd>
    2ac4:	e0 91 df 18 	lds	r30, 0x18DF	; 0x8018df <pxCurrentTCB>
    2ac8:	f0 91 e0 18 	lds	r31, 0x18E0	; 0x8018e0 <pxCurrentTCB+0x1>
    2acc:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2ace:	82 8d       	ldd	r24, Z+26	; 0x1a
    2ad0:	98 17       	cp	r25, r24
    2ad2:	08 f4       	brcc	.+2      	; 0x2ad6 <xTaskIncrementTick+0x152>
    2ad4:	ac cf       	rjmp	.-168    	; 0x2a2e <xTaskIncrementTick+0xaa>
    2ad6:	b9 2c       	mov	r11, r9
    2ad8:	aa cf       	rjmp	.-172    	; 0x2a2e <xTaskIncrementTick+0xaa>
    2ada:	e0 91 df 18 	lds	r30, 0x18DF	; 0x8018df <pxCurrentTCB>
    2ade:	f0 91 e0 18 	lds	r31, 0x18E0	; 0x8018e0 <pxCurrentTCB+0x1>
    2ae2:	e2 8d       	ldd	r30, Z+26	; 0x1a
    2ae4:	8b e0       	ldi	r24, 0x0B	; 11
    2ae6:	e8 9f       	mul	r30, r24
    2ae8:	f0 01       	movw	r30, r0
    2aea:	11 24       	eor	r1, r1
    2aec:	ed 54       	subi	r30, 0x4D	; 77
    2aee:	f7 4e       	sbci	r31, 0xE7	; 231
    2af0:	80 81       	ld	r24, Z
    2af2:	82 30       	cpi	r24, 0x02	; 2
    2af4:	48 f0       	brcs	.+18     	; 0x2b08 <xTaskIncrementTick+0x184>
    2af6:	bb 24       	eor	r11, r11
    2af8:	b3 94       	inc	r11
    2afa:	06 c0       	rjmp	.+12     	; 0x2b08 <xTaskIncrementTick+0x184>
    2afc:	80 91 6f 18 	lds	r24, 0x186F	; 0x80186f <uxPendedTicks>
    2b00:	8f 5f       	subi	r24, 0xFF	; 255
    2b02:	80 93 6f 18 	sts	0x186F, r24	; 0x80186f <uxPendedTicks>
    2b06:	b1 2c       	mov	r11, r1
    2b08:	80 91 6e 18 	lds	r24, 0x186E	; 0x80186e <xYieldPending>
    2b0c:	88 23       	and	r24, r24
    2b0e:	11 f0       	breq	.+4      	; 0x2b14 <xTaskIncrementTick+0x190>
    2b10:	bb 24       	eor	r11, r11
    2b12:	b3 94       	inc	r11
    2b14:	8b 2d       	mov	r24, r11
    2b16:	df 91       	pop	r29
    2b18:	cf 91       	pop	r28
    2b1a:	1f 91       	pop	r17
    2b1c:	0f 91       	pop	r16
    2b1e:	ff 90       	pop	r15
    2b20:	ef 90       	pop	r14
    2b22:	df 90       	pop	r13
    2b24:	cf 90       	pop	r12
    2b26:	bf 90       	pop	r11
    2b28:	af 90       	pop	r10
    2b2a:	9f 90       	pop	r9
    2b2c:	08 95       	ret

00002b2e <xTaskResumeAll>:
    2b2e:	cf 92       	push	r12
    2b30:	df 92       	push	r13
    2b32:	ef 92       	push	r14
    2b34:	ff 92       	push	r15
    2b36:	0f 93       	push	r16
    2b38:	1f 93       	push	r17
    2b3a:	cf 93       	push	r28
    2b3c:	df 93       	push	r29
    2b3e:	0f b6       	in	r0, 0x3f	; 63
    2b40:	f8 94       	cli
    2b42:	0f 92       	push	r0
    2b44:	80 91 65 18 	lds	r24, 0x1865	; 0x801865 <uxSchedulerSuspended>
    2b48:	81 50       	subi	r24, 0x01	; 1
    2b4a:	80 93 65 18 	sts	0x1865, r24	; 0x801865 <uxSchedulerSuspended>
    2b4e:	80 91 65 18 	lds	r24, 0x1865	; 0x801865 <uxSchedulerSuspended>
    2b52:	81 11       	cpse	r24, r1
    2b54:	5a c0       	rjmp	.+180    	; 0x2c0a <xTaskResumeAll+0xdc>
    2b56:	80 91 76 18 	lds	r24, 0x1876	; 0x801876 <uxCurrentNumberOfTasks>
    2b5a:	81 11       	cpse	r24, r1
    2b5c:	2c c0       	rjmp	.+88     	; 0x2bb6 <xTaskResumeAll+0x88>
    2b5e:	58 c0       	rjmp	.+176    	; 0x2c10 <xTaskResumeAll+0xe2>
    2b60:	d7 01       	movw	r26, r14
    2b62:	17 96       	adiw	r26, 0x07	; 7
    2b64:	ed 91       	ld	r30, X+
    2b66:	fc 91       	ld	r31, X
    2b68:	18 97       	sbiw	r26, 0x08	; 8
    2b6a:	c0 85       	ldd	r28, Z+8	; 0x08
    2b6c:	d1 85       	ldd	r29, Z+9	; 0x09
    2b6e:	ce 01       	movw	r24, r28
    2b70:	0e 96       	adiw	r24, 0x0e	; 14
    2b72:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <uxListRemove>
    2b76:	8e 01       	movw	r16, r28
    2b78:	0e 5f       	subi	r16, 0xFE	; 254
    2b7a:	1f 4f       	sbci	r17, 0xFF	; 255
    2b7c:	c8 01       	movw	r24, r16
    2b7e:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <uxListRemove>
    2b82:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2b84:	90 91 71 18 	lds	r25, 0x1871	; 0x801871 <uxTopReadyPriority>
    2b88:	98 17       	cp	r25, r24
    2b8a:	10 f4       	brcc	.+4      	; 0x2b90 <xTaskResumeAll+0x62>
    2b8c:	80 93 71 18 	sts	0x1871, r24	; 0x801871 <uxTopReadyPriority>
    2b90:	d8 9e       	mul	r13, r24
    2b92:	c0 01       	movw	r24, r0
    2b94:	11 24       	eor	r1, r1
    2b96:	b8 01       	movw	r22, r16
    2b98:	8d 54       	subi	r24, 0x4D	; 77
    2b9a:	97 4e       	sbci	r25, 0xE7	; 231
    2b9c:	0e 94 1e 0a 	call	0x143c	; 0x143c <vListInsertEnd>
    2ba0:	e0 91 df 18 	lds	r30, 0x18DF	; 0x8018df <pxCurrentTCB>
    2ba4:	f0 91 e0 18 	lds	r31, 0x18E0	; 0x8018e0 <pxCurrentTCB+0x1>
    2ba8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2baa:	82 8d       	ldd	r24, Z+26	; 0x1a
    2bac:	98 17       	cp	r25, r24
    2bae:	88 f0       	brcs	.+34     	; 0x2bd2 <xTaskResumeAll+0xa4>
    2bb0:	c0 92 6e 18 	sts	0x186E, r12	; 0x80186e <xYieldPending>
    2bb4:	0e c0       	rjmp	.+28     	; 0x2bd2 <xTaskResumeAll+0xa4>
    2bb6:	c0 e0       	ldi	r28, 0x00	; 0
    2bb8:	d0 e0       	ldi	r29, 0x00	; 0
    2bba:	0f 2e       	mov	r0, r31
    2bbc:	fe e8       	ldi	r31, 0x8E	; 142
    2bbe:	ef 2e       	mov	r14, r31
    2bc0:	f8 e1       	ldi	r31, 0x18	; 24
    2bc2:	ff 2e       	mov	r15, r31
    2bc4:	f0 2d       	mov	r31, r0
    2bc6:	0f 2e       	mov	r0, r31
    2bc8:	fb e0       	ldi	r31, 0x0B	; 11
    2bca:	df 2e       	mov	r13, r31
    2bcc:	f0 2d       	mov	r31, r0
    2bce:	cc 24       	eor	r12, r12
    2bd0:	c3 94       	inc	r12
    2bd2:	f7 01       	movw	r30, r14
    2bd4:	80 81       	ld	r24, Z
    2bd6:	81 11       	cpse	r24, r1
    2bd8:	c3 cf       	rjmp	.-122    	; 0x2b60 <xTaskResumeAll+0x32>
    2bda:	cd 2b       	or	r28, r29
    2bdc:	09 f0       	breq	.+2      	; 0x2be0 <xTaskResumeAll+0xb2>
    2bde:	c2 dc       	rcall	.-1660   	; 0x2564 <prvResetNextTaskUnblockTime>
    2be0:	c0 91 6f 18 	lds	r28, 0x186F	; 0x80186f <uxPendedTicks>
    2be4:	cc 23       	and	r28, r28
    2be6:	49 f0       	breq	.+18     	; 0x2bfa <xTaskResumeAll+0xcc>
    2be8:	d1 e0       	ldi	r29, 0x01	; 1
    2bea:	cc de       	rcall	.-616    	; 0x2984 <xTaskIncrementTick>
    2bec:	81 11       	cpse	r24, r1
    2bee:	d0 93 6e 18 	sts	0x186E, r29	; 0x80186e <xYieldPending>
    2bf2:	c1 50       	subi	r28, 0x01	; 1
    2bf4:	d1 f7       	brne	.-12     	; 0x2bea <xTaskResumeAll+0xbc>
    2bf6:	10 92 6f 18 	sts	0x186F, r1	; 0x80186f <uxPendedTicks>
    2bfa:	80 91 6e 18 	lds	r24, 0x186E	; 0x80186e <xYieldPending>
    2bfe:	88 23       	and	r24, r24
    2c00:	31 f0       	breq	.+12     	; 0x2c0e <xTaskResumeAll+0xe0>
    2c02:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <vPortYield>
    2c06:	81 e0       	ldi	r24, 0x01	; 1
    2c08:	03 c0       	rjmp	.+6      	; 0x2c10 <xTaskResumeAll+0xe2>
    2c0a:	80 e0       	ldi	r24, 0x00	; 0
    2c0c:	01 c0       	rjmp	.+2      	; 0x2c10 <xTaskResumeAll+0xe2>
    2c0e:	80 e0       	ldi	r24, 0x00	; 0
    2c10:	0f 90       	pop	r0
    2c12:	0f be       	out	0x3f, r0	; 63
    2c14:	df 91       	pop	r29
    2c16:	cf 91       	pop	r28
    2c18:	1f 91       	pop	r17
    2c1a:	0f 91       	pop	r16
    2c1c:	ff 90       	pop	r15
    2c1e:	ef 90       	pop	r14
    2c20:	df 90       	pop	r13
    2c22:	cf 90       	pop	r12
    2c24:	08 95       	ret

00002c26 <vTaskDelay>:
    2c26:	cf 92       	push	r12
    2c28:	df 92       	push	r13
    2c2a:	ef 92       	push	r14
    2c2c:	ff 92       	push	r15
    2c2e:	6b 01       	movw	r12, r22
    2c30:	7c 01       	movw	r14, r24
    2c32:	67 2b       	or	r22, r23
    2c34:	68 2b       	or	r22, r24
    2c36:	69 2b       	or	r22, r25
    2c38:	41 f0       	breq	.+16     	; 0x2c4a <vTaskDelay+0x24>
    2c3a:	90 de       	rcall	.-736    	; 0x295c <vTaskSuspendAll>
    2c3c:	40 e0       	ldi	r20, 0x00	; 0
    2c3e:	c7 01       	movw	r24, r14
    2c40:	b6 01       	movw	r22, r12
    2c42:	ba dc       	rcall	.-1676   	; 0x25b8 <prvAddCurrentTaskToDelayedList>
    2c44:	74 df       	rcall	.-280    	; 0x2b2e <xTaskResumeAll>
    2c46:	81 11       	cpse	r24, r1
    2c48:	02 c0       	rjmp	.+4      	; 0x2c4e <vTaskDelay+0x28>
    2c4a:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <vPortYield>
    2c4e:	ff 90       	pop	r15
    2c50:	ef 90       	pop	r14
    2c52:	df 90       	pop	r13
    2c54:	cf 90       	pop	r12
    2c56:	08 95       	ret

00002c58 <vTaskSwitchContext>:
    2c58:	80 91 65 18 	lds	r24, 0x1865	; 0x801865 <uxSchedulerSuspended>
    2c5c:	88 23       	and	r24, r24
    2c5e:	21 f0       	breq	.+8      	; 0x2c68 <vTaskSwitchContext+0x10>
    2c60:	81 e0       	ldi	r24, 0x01	; 1
    2c62:	80 93 6e 18 	sts	0x186E, r24	; 0x80186e <xYieldPending>
    2c66:	08 95       	ret
    2c68:	10 92 6e 18 	sts	0x186E, r1	; 0x80186e <xYieldPending>
    2c6c:	e0 91 df 18 	lds	r30, 0x18DF	; 0x8018df <pxCurrentTCB>
    2c70:	f0 91 e0 18 	lds	r31, 0x18E0	; 0x8018e0 <pxCurrentTCB+0x1>
    2c74:	81 a5       	ldd	r24, Z+41	; 0x29
    2c76:	0e 94 60 07 	call	0xec0	; 0xec0 <task_switch_out>
    2c7a:	a0 91 df 18 	lds	r26, 0x18DF	; 0x8018df <pxCurrentTCB>
    2c7e:	b0 91 e0 18 	lds	r27, 0x18E0	; 0x8018e0 <pxCurrentTCB+0x1>
    2c82:	e0 91 df 18 	lds	r30, 0x18DF	; 0x8018df <pxCurrentTCB>
    2c86:	f0 91 e0 18 	lds	r31, 0x18E0	; 0x8018e0 <pxCurrentTCB+0x1>
    2c8a:	2d 91       	ld	r18, X+
    2c8c:	3c 91       	ld	r19, X
    2c8e:	83 8d       	ldd	r24, Z+27	; 0x1b
    2c90:	94 8d       	ldd	r25, Z+28	; 0x1c
    2c92:	82 17       	cp	r24, r18
    2c94:	93 07       	cpc	r25, r19
    2c96:	58 f0       	brcs	.+22     	; 0x2cae <vTaskSwitchContext+0x56>
    2c98:	60 91 df 18 	lds	r22, 0x18DF	; 0x8018df <pxCurrentTCB>
    2c9c:	70 91 e0 18 	lds	r23, 0x18E0	; 0x8018e0 <pxCurrentTCB+0x1>
    2ca0:	80 91 df 18 	lds	r24, 0x18DF	; 0x8018df <pxCurrentTCB>
    2ca4:	90 91 e0 18 	lds	r25, 0x18E0	; 0x8018e0 <pxCurrentTCB+0x1>
    2ca8:	63 5e       	subi	r22, 0xE3	; 227
    2caa:	7f 4f       	sbci	r23, 0xFF	; 255
    2cac:	20 d6       	rcall	.+3136   	; 0x38ee <vApplicationStackOverflowHook>
    2cae:	80 91 71 18 	lds	r24, 0x1871	; 0x801871 <uxTopReadyPriority>
    2cb2:	28 2f       	mov	r18, r24
    2cb4:	30 e0       	ldi	r19, 0x00	; 0
    2cb6:	9b e0       	ldi	r25, 0x0B	; 11
    2cb8:	89 9f       	mul	r24, r25
    2cba:	f0 01       	movw	r30, r0
    2cbc:	11 24       	eor	r1, r1
    2cbe:	ed 54       	subi	r30, 0x4D	; 77
    2cc0:	f7 4e       	sbci	r31, 0xE7	; 231
    2cc2:	90 81       	ld	r25, Z
    2cc4:	91 11       	cpse	r25, r1
    2cc6:	0e c0       	rjmp	.+28     	; 0x2ce4 <vTaskSwitchContext+0x8c>
    2cc8:	4b e0       	ldi	r20, 0x0B	; 11
    2cca:	81 50       	subi	r24, 0x01	; 1
    2ccc:	28 2f       	mov	r18, r24
    2cce:	30 e0       	ldi	r19, 0x00	; 0
    2cd0:	42 9f       	mul	r20, r18
    2cd2:	f0 01       	movw	r30, r0
    2cd4:	43 9f       	mul	r20, r19
    2cd6:	f0 0d       	add	r31, r0
    2cd8:	11 24       	eor	r1, r1
    2cda:	ed 54       	subi	r30, 0x4D	; 77
    2cdc:	f7 4e       	sbci	r31, 0xE7	; 231
    2cde:	90 81       	ld	r25, Z
    2ce0:	99 23       	and	r25, r25
    2ce2:	99 f3       	breq	.-26     	; 0x2cca <vTaskSwitchContext+0x72>
    2ce4:	9b e0       	ldi	r25, 0x0B	; 11
    2ce6:	92 9f       	mul	r25, r18
    2ce8:	a0 01       	movw	r20, r0
    2cea:	93 9f       	mul	r25, r19
    2cec:	50 0d       	add	r21, r0
    2cee:	11 24       	eor	r1, r1
    2cf0:	da 01       	movw	r26, r20
    2cf2:	ad 54       	subi	r26, 0x4D	; 77
    2cf4:	b7 4e       	sbci	r27, 0xE7	; 231
    2cf6:	11 96       	adiw	r26, 0x01	; 1
    2cf8:	ed 91       	ld	r30, X+
    2cfa:	fc 91       	ld	r31, X
    2cfc:	12 97       	sbiw	r26, 0x02	; 2
    2cfe:	04 80       	ldd	r0, Z+4	; 0x04
    2d00:	f5 81       	ldd	r31, Z+5	; 0x05
    2d02:	e0 2d       	mov	r30, r0
    2d04:	12 96       	adiw	r26, 0x02	; 2
    2d06:	fc 93       	st	X, r31
    2d08:	ee 93       	st	-X, r30
    2d0a:	11 97       	sbiw	r26, 0x01	; 1
    2d0c:	4a 54       	subi	r20, 0x4A	; 74
    2d0e:	57 4e       	sbci	r21, 0xE7	; 231
    2d10:	e4 17       	cp	r30, r20
    2d12:	f5 07       	cpc	r31, r21
    2d14:	29 f4       	brne	.+10     	; 0x2d20 <vTaskSwitchContext+0xc8>
    2d16:	44 81       	ldd	r20, Z+4	; 0x04
    2d18:	55 81       	ldd	r21, Z+5	; 0x05
    2d1a:	fd 01       	movw	r30, r26
    2d1c:	52 83       	std	Z+2, r21	; 0x02
    2d1e:	41 83       	std	Z+1, r20	; 0x01
    2d20:	9b e0       	ldi	r25, 0x0B	; 11
    2d22:	92 9f       	mul	r25, r18
    2d24:	f0 01       	movw	r30, r0
    2d26:	93 9f       	mul	r25, r19
    2d28:	f0 0d       	add	r31, r0
    2d2a:	11 24       	eor	r1, r1
    2d2c:	ed 54       	subi	r30, 0x4D	; 77
    2d2e:	f7 4e       	sbci	r31, 0xE7	; 231
    2d30:	01 80       	ldd	r0, Z+1	; 0x01
    2d32:	f2 81       	ldd	r31, Z+2	; 0x02
    2d34:	e0 2d       	mov	r30, r0
    2d36:	20 85       	ldd	r18, Z+8	; 0x08
    2d38:	31 85       	ldd	r19, Z+9	; 0x09
    2d3a:	30 93 e0 18 	sts	0x18E0, r19	; 0x8018e0 <pxCurrentTCB+0x1>
    2d3e:	20 93 df 18 	sts	0x18DF, r18	; 0x8018df <pxCurrentTCB>
    2d42:	80 93 71 18 	sts	0x1871, r24	; 0x801871 <uxTopReadyPriority>
    2d46:	e0 91 df 18 	lds	r30, 0x18DF	; 0x8018df <pxCurrentTCB>
    2d4a:	f0 91 e0 18 	lds	r31, 0x18E0	; 0x8018e0 <pxCurrentTCB+0x1>
    2d4e:	81 a5       	ldd	r24, Z+41	; 0x29
    2d50:	0c 94 56 07 	jmp	0xeac	; 0xeac <task_switch_in>
    2d54:	08 95       	ret

00002d56 <vTaskPlaceOnEventList>:
    2d56:	cf 92       	push	r12
    2d58:	df 92       	push	r13
    2d5a:	ef 92       	push	r14
    2d5c:	ff 92       	push	r15
    2d5e:	6a 01       	movw	r12, r20
    2d60:	7b 01       	movw	r14, r22
    2d62:	60 91 df 18 	lds	r22, 0x18DF	; 0x8018df <pxCurrentTCB>
    2d66:	70 91 e0 18 	lds	r23, 0x18E0	; 0x8018e0 <pxCurrentTCB+0x1>
    2d6a:	62 5f       	subi	r22, 0xF2	; 242
    2d6c:	7f 4f       	sbci	r23, 0xFF	; 255
    2d6e:	0e 94 3f 0a 	call	0x147e	; 0x147e <vListInsert>
    2d72:	41 e0       	ldi	r20, 0x01	; 1
    2d74:	c7 01       	movw	r24, r14
    2d76:	b6 01       	movw	r22, r12
    2d78:	1f dc       	rcall	.-1986   	; 0x25b8 <prvAddCurrentTaskToDelayedList>
    2d7a:	ff 90       	pop	r15
    2d7c:	ef 90       	pop	r14
    2d7e:	df 90       	pop	r13
    2d80:	cf 90       	pop	r12
    2d82:	08 95       	ret

00002d84 <vTaskPlaceOnUnorderedEventList>:
    2d84:	cf 92       	push	r12
    2d86:	df 92       	push	r13
    2d88:	ef 92       	push	r14
    2d8a:	ff 92       	push	r15
    2d8c:	0f 93       	push	r16
    2d8e:	1f 93       	push	r17
    2d90:	68 01       	movw	r12, r16
    2d92:	79 01       	movw	r14, r18
    2d94:	e0 91 df 18 	lds	r30, 0x18DF	; 0x8018df <pxCurrentTCB>
    2d98:	f0 91 e0 18 	lds	r31, 0x18E0	; 0x8018e0 <pxCurrentTCB+0x1>
    2d9c:	70 68       	ori	r23, 0x80	; 128
    2d9e:	46 87       	std	Z+14, r20	; 0x0e
    2da0:	57 87       	std	Z+15, r21	; 0x0f
    2da2:	60 8b       	std	Z+16, r22	; 0x10
    2da4:	71 8b       	std	Z+17, r23	; 0x11
    2da6:	60 91 df 18 	lds	r22, 0x18DF	; 0x8018df <pxCurrentTCB>
    2daa:	70 91 e0 18 	lds	r23, 0x18E0	; 0x8018e0 <pxCurrentTCB+0x1>
    2dae:	62 5f       	subi	r22, 0xF2	; 242
    2db0:	7f 4f       	sbci	r23, 0xFF	; 255
    2db2:	0e 94 1e 0a 	call	0x143c	; 0x143c <vListInsertEnd>
    2db6:	41 e0       	ldi	r20, 0x01	; 1
    2db8:	c7 01       	movw	r24, r14
    2dba:	b6 01       	movw	r22, r12
    2dbc:	fd db       	rcall	.-2054   	; 0x25b8 <prvAddCurrentTaskToDelayedList>
    2dbe:	1f 91       	pop	r17
    2dc0:	0f 91       	pop	r16
    2dc2:	ff 90       	pop	r15
    2dc4:	ef 90       	pop	r14
    2dc6:	df 90       	pop	r13
    2dc8:	cf 90       	pop	r12
    2dca:	08 95       	ret

00002dcc <vTaskPlaceOnEventListRestricted>:
    2dcc:	cf 92       	push	r12
    2dce:	df 92       	push	r13
    2dd0:	ef 92       	push	r14
    2dd2:	ff 92       	push	r15
    2dd4:	cf 93       	push	r28
    2dd6:	6a 01       	movw	r12, r20
    2dd8:	7b 01       	movw	r14, r22
    2dda:	c2 2f       	mov	r28, r18
    2ddc:	60 91 df 18 	lds	r22, 0x18DF	; 0x8018df <pxCurrentTCB>
    2de0:	70 91 e0 18 	lds	r23, 0x18E0	; 0x8018e0 <pxCurrentTCB+0x1>
    2de4:	62 5f       	subi	r22, 0xF2	; 242
    2de6:	7f 4f       	sbci	r23, 0xFF	; 255
    2de8:	0e 94 1e 0a 	call	0x143c	; 0x143c <vListInsertEnd>
    2dec:	cc 23       	and	r28, r28
    2dee:	21 f0       	breq	.+8      	; 0x2df8 <vTaskPlaceOnEventListRestricted+0x2c>
    2df0:	cc 24       	eor	r12, r12
    2df2:	ca 94       	dec	r12
    2df4:	dc 2c       	mov	r13, r12
    2df6:	76 01       	movw	r14, r12
    2df8:	4c 2f       	mov	r20, r28
    2dfa:	c7 01       	movw	r24, r14
    2dfc:	b6 01       	movw	r22, r12
    2dfe:	dc db       	rcall	.-2120   	; 0x25b8 <prvAddCurrentTaskToDelayedList>
    2e00:	cf 91       	pop	r28
    2e02:	ff 90       	pop	r15
    2e04:	ef 90       	pop	r14
    2e06:	df 90       	pop	r13
    2e08:	cf 90       	pop	r12
    2e0a:	08 95       	ret

00002e0c <xTaskRemoveFromEventList>:
    2e0c:	0f 93       	push	r16
    2e0e:	1f 93       	push	r17
    2e10:	cf 93       	push	r28
    2e12:	df 93       	push	r29
    2e14:	dc 01       	movw	r26, r24
    2e16:	17 96       	adiw	r26, 0x07	; 7
    2e18:	ed 91       	ld	r30, X+
    2e1a:	fc 91       	ld	r31, X
    2e1c:	18 97       	sbiw	r26, 0x08	; 8
    2e1e:	c0 85       	ldd	r28, Z+8	; 0x08
    2e20:	d1 85       	ldd	r29, Z+9	; 0x09
    2e22:	8e 01       	movw	r16, r28
    2e24:	02 5f       	subi	r16, 0xF2	; 242
    2e26:	1f 4f       	sbci	r17, 0xFF	; 255
    2e28:	c8 01       	movw	r24, r16
    2e2a:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <uxListRemove>
    2e2e:	80 91 65 18 	lds	r24, 0x1865	; 0x801865 <uxSchedulerSuspended>
    2e32:	81 11       	cpse	r24, r1
    2e34:	16 c0       	rjmp	.+44     	; 0x2e62 <xTaskRemoveFromEventList+0x56>
    2e36:	0c 50       	subi	r16, 0x0C	; 12
    2e38:	11 09       	sbc	r17, r1
    2e3a:	c8 01       	movw	r24, r16
    2e3c:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <uxListRemove>
    2e40:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2e42:	90 91 71 18 	lds	r25, 0x1871	; 0x801871 <uxTopReadyPriority>
    2e46:	98 17       	cp	r25, r24
    2e48:	10 f4       	brcc	.+4      	; 0x2e4e <xTaskRemoveFromEventList+0x42>
    2e4a:	80 93 71 18 	sts	0x1871, r24	; 0x801871 <uxTopReadyPriority>
    2e4e:	bb e0       	ldi	r27, 0x0B	; 11
    2e50:	8b 9f       	mul	r24, r27
    2e52:	c0 01       	movw	r24, r0
    2e54:	11 24       	eor	r1, r1
    2e56:	b8 01       	movw	r22, r16
    2e58:	8d 54       	subi	r24, 0x4D	; 77
    2e5a:	97 4e       	sbci	r25, 0xE7	; 231
    2e5c:	0e 94 1e 0a 	call	0x143c	; 0x143c <vListInsertEnd>
    2e60:	05 c0       	rjmp	.+10     	; 0x2e6c <xTaskRemoveFromEventList+0x60>
    2e62:	b8 01       	movw	r22, r16
    2e64:	8e e8       	ldi	r24, 0x8E	; 142
    2e66:	98 e1       	ldi	r25, 0x18	; 24
    2e68:	0e 94 1e 0a 	call	0x143c	; 0x143c <vListInsertEnd>
    2e6c:	e0 91 df 18 	lds	r30, 0x18DF	; 0x8018df <pxCurrentTCB>
    2e70:	f0 91 e0 18 	lds	r31, 0x18E0	; 0x8018e0 <pxCurrentTCB+0x1>
    2e74:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2e76:	82 8d       	ldd	r24, Z+26	; 0x1a
    2e78:	89 17       	cp	r24, r25
    2e7a:	20 f4       	brcc	.+8      	; 0x2e84 <xTaskRemoveFromEventList+0x78>
    2e7c:	81 e0       	ldi	r24, 0x01	; 1
    2e7e:	80 93 6e 18 	sts	0x186E, r24	; 0x80186e <xYieldPending>
    2e82:	01 c0       	rjmp	.+2      	; 0x2e86 <xTaskRemoveFromEventList+0x7a>
    2e84:	80 e0       	ldi	r24, 0x00	; 0
    2e86:	df 91       	pop	r29
    2e88:	cf 91       	pop	r28
    2e8a:	1f 91       	pop	r17
    2e8c:	0f 91       	pop	r16
    2e8e:	08 95       	ret

00002e90 <vTaskRemoveFromUnorderedEventList>:
    2e90:	0f 93       	push	r16
    2e92:	1f 93       	push	r17
    2e94:	cf 93       	push	r28
    2e96:	df 93       	push	r29
    2e98:	70 68       	ori	r23, 0x80	; 128
    2e9a:	fc 01       	movw	r30, r24
    2e9c:	40 83       	st	Z, r20
    2e9e:	51 83       	std	Z+1, r21	; 0x01
    2ea0:	62 83       	std	Z+2, r22	; 0x02
    2ea2:	73 83       	std	Z+3, r23	; 0x03
    2ea4:	c0 85       	ldd	r28, Z+8	; 0x08
    2ea6:	d1 85       	ldd	r29, Z+9	; 0x09
    2ea8:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <uxListRemove>
    2eac:	8e 01       	movw	r16, r28
    2eae:	0e 5f       	subi	r16, 0xFE	; 254
    2eb0:	1f 4f       	sbci	r17, 0xFF	; 255
    2eb2:	c8 01       	movw	r24, r16
    2eb4:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <uxListRemove>
    2eb8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2eba:	90 91 71 18 	lds	r25, 0x1871	; 0x801871 <uxTopReadyPriority>
    2ebe:	98 17       	cp	r25, r24
    2ec0:	10 f4       	brcc	.+4      	; 0x2ec6 <vTaskRemoveFromUnorderedEventList+0x36>
    2ec2:	80 93 71 18 	sts	0x1871, r24	; 0x801871 <uxTopReadyPriority>
    2ec6:	fb e0       	ldi	r31, 0x0B	; 11
    2ec8:	8f 9f       	mul	r24, r31
    2eca:	c0 01       	movw	r24, r0
    2ecc:	11 24       	eor	r1, r1
    2ece:	b8 01       	movw	r22, r16
    2ed0:	8d 54       	subi	r24, 0x4D	; 77
    2ed2:	97 4e       	sbci	r25, 0xE7	; 231
    2ed4:	0e 94 1e 0a 	call	0x143c	; 0x143c <vListInsertEnd>
    2ed8:	e0 91 df 18 	lds	r30, 0x18DF	; 0x8018df <pxCurrentTCB>
    2edc:	f0 91 e0 18 	lds	r31, 0x18E0	; 0x8018e0 <pxCurrentTCB+0x1>
    2ee0:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2ee2:	82 8d       	ldd	r24, Z+26	; 0x1a
    2ee4:	89 17       	cp	r24, r25
    2ee6:	18 f4       	brcc	.+6      	; 0x2eee <vTaskRemoveFromUnorderedEventList+0x5e>
    2ee8:	81 e0       	ldi	r24, 0x01	; 1
    2eea:	80 93 6e 18 	sts	0x186E, r24	; 0x80186e <xYieldPending>
    2eee:	df 91       	pop	r29
    2ef0:	cf 91       	pop	r28
    2ef2:	1f 91       	pop	r17
    2ef4:	0f 91       	pop	r16
    2ef6:	08 95       	ret

00002ef8 <vTaskSetTimeOutState>:
    2ef8:	0f b6       	in	r0, 0x3f	; 63
    2efa:	f8 94       	cli
    2efc:	0f 92       	push	r0
    2efe:	20 91 6d 18 	lds	r18, 0x186D	; 0x80186d <xNumOfOverflows>
    2f02:	fc 01       	movw	r30, r24
    2f04:	20 83       	st	Z, r18
    2f06:	40 91 72 18 	lds	r20, 0x1872	; 0x801872 <xTickCount>
    2f0a:	50 91 73 18 	lds	r21, 0x1873	; 0x801873 <xTickCount+0x1>
    2f0e:	60 91 74 18 	lds	r22, 0x1874	; 0x801874 <xTickCount+0x2>
    2f12:	70 91 75 18 	lds	r23, 0x1875	; 0x801875 <xTickCount+0x3>
    2f16:	41 83       	std	Z+1, r20	; 0x01
    2f18:	52 83       	std	Z+2, r21	; 0x02
    2f1a:	63 83       	std	Z+3, r22	; 0x03
    2f1c:	74 83       	std	Z+4, r23	; 0x04
    2f1e:	0f 90       	pop	r0
    2f20:	0f be       	out	0x3f, r0	; 63
    2f22:	08 95       	ret

00002f24 <vTaskInternalSetTimeOutState>:
    2f24:	20 91 6d 18 	lds	r18, 0x186D	; 0x80186d <xNumOfOverflows>
    2f28:	fc 01       	movw	r30, r24
    2f2a:	20 83       	st	Z, r18
    2f2c:	40 91 72 18 	lds	r20, 0x1872	; 0x801872 <xTickCount>
    2f30:	50 91 73 18 	lds	r21, 0x1873	; 0x801873 <xTickCount+0x1>
    2f34:	60 91 74 18 	lds	r22, 0x1874	; 0x801874 <xTickCount+0x2>
    2f38:	70 91 75 18 	lds	r23, 0x1875	; 0x801875 <xTickCount+0x3>
    2f3c:	41 83       	std	Z+1, r20	; 0x01
    2f3e:	52 83       	std	Z+2, r21	; 0x02
    2f40:	63 83       	std	Z+3, r22	; 0x03
    2f42:	74 83       	std	Z+4, r23	; 0x04
    2f44:	08 95       	ret

00002f46 <xTaskCheckForTimeOut>:
    2f46:	cf 92       	push	r12
    2f48:	df 92       	push	r13
    2f4a:	ef 92       	push	r14
    2f4c:	ff 92       	push	r15
    2f4e:	0f 93       	push	r16
    2f50:	1f 93       	push	r17
    2f52:	cf 93       	push	r28
    2f54:	df 93       	push	r29
    2f56:	fb 01       	movw	r30, r22
    2f58:	0f b6       	in	r0, 0x3f	; 63
    2f5a:	f8 94       	cli
    2f5c:	0f 92       	push	r0
    2f5e:	40 91 72 18 	lds	r20, 0x1872	; 0x801872 <xTickCount>
    2f62:	50 91 73 18 	lds	r21, 0x1873	; 0x801873 <xTickCount+0x1>
    2f66:	60 91 74 18 	lds	r22, 0x1874	; 0x801874 <xTickCount+0x2>
    2f6a:	70 91 75 18 	lds	r23, 0x1875	; 0x801875 <xTickCount+0x3>
    2f6e:	00 81       	ld	r16, Z
    2f70:	11 81       	ldd	r17, Z+1	; 0x01
    2f72:	22 81       	ldd	r18, Z+2	; 0x02
    2f74:	33 81       	ldd	r19, Z+3	; 0x03
    2f76:	0f 3f       	cpi	r16, 0xFF	; 255
    2f78:	af ef       	ldi	r26, 0xFF	; 255
    2f7a:	1a 07       	cpc	r17, r26
    2f7c:	2a 07       	cpc	r18, r26
    2f7e:	3a 07       	cpc	r19, r26
    2f80:	49 f1       	breq	.+82     	; 0x2fd4 <xTaskCheckForTimeOut+0x8e>
    2f82:	ec 01       	movw	r28, r24
    2f84:	c9 80       	ldd	r12, Y+1	; 0x01
    2f86:	da 80       	ldd	r13, Y+2	; 0x02
    2f88:	eb 80       	ldd	r14, Y+3	; 0x03
    2f8a:	fc 80       	ldd	r15, Y+4	; 0x04
    2f8c:	a0 91 6d 18 	lds	r26, 0x186D	; 0x80186d <xNumOfOverflows>
    2f90:	b8 81       	ld	r27, Y
    2f92:	ba 17       	cp	r27, r26
    2f94:	29 f0       	breq	.+10     	; 0x2fa0 <xTaskCheckForTimeOut+0x5a>
    2f96:	4c 15       	cp	r20, r12
    2f98:	5d 05       	cpc	r21, r13
    2f9a:	6e 05       	cpc	r22, r14
    2f9c:	7f 05       	cpc	r23, r15
    2f9e:	e0 f4       	brcc	.+56     	; 0x2fd8 <xTaskCheckForTimeOut+0x92>
    2fa0:	4c 19       	sub	r20, r12
    2fa2:	5d 09       	sbc	r21, r13
    2fa4:	6e 09       	sbc	r22, r14
    2fa6:	7f 09       	sbc	r23, r15
    2fa8:	40 17       	cp	r20, r16
    2faa:	51 07       	cpc	r21, r17
    2fac:	62 07       	cpc	r22, r18
    2fae:	73 07       	cpc	r23, r19
    2fb0:	58 f4       	brcc	.+22     	; 0x2fc8 <xTaskCheckForTimeOut+0x82>
    2fb2:	04 1b       	sub	r16, r20
    2fb4:	15 0b       	sbc	r17, r21
    2fb6:	26 0b       	sbc	r18, r22
    2fb8:	37 0b       	sbc	r19, r23
    2fba:	00 83       	st	Z, r16
    2fbc:	11 83       	std	Z+1, r17	; 0x01
    2fbe:	22 83       	std	Z+2, r18	; 0x02
    2fc0:	33 83       	std	Z+3, r19	; 0x03
    2fc2:	b0 df       	rcall	.-160    	; 0x2f24 <vTaskInternalSetTimeOutState>
    2fc4:	80 e0       	ldi	r24, 0x00	; 0
    2fc6:	09 c0       	rjmp	.+18     	; 0x2fda <xTaskCheckForTimeOut+0x94>
    2fc8:	10 82       	st	Z, r1
    2fca:	11 82       	std	Z+1, r1	; 0x01
    2fcc:	12 82       	std	Z+2, r1	; 0x02
    2fce:	13 82       	std	Z+3, r1	; 0x03
    2fd0:	81 e0       	ldi	r24, 0x01	; 1
    2fd2:	03 c0       	rjmp	.+6      	; 0x2fda <xTaskCheckForTimeOut+0x94>
    2fd4:	80 e0       	ldi	r24, 0x00	; 0
    2fd6:	01 c0       	rjmp	.+2      	; 0x2fda <xTaskCheckForTimeOut+0x94>
    2fd8:	81 e0       	ldi	r24, 0x01	; 1
    2fda:	0f 90       	pop	r0
    2fdc:	0f be       	out	0x3f, r0	; 63
    2fde:	df 91       	pop	r29
    2fe0:	cf 91       	pop	r28
    2fe2:	1f 91       	pop	r17
    2fe4:	0f 91       	pop	r16
    2fe6:	ff 90       	pop	r15
    2fe8:	ef 90       	pop	r14
    2fea:	df 90       	pop	r13
    2fec:	cf 90       	pop	r12
    2fee:	08 95       	ret

00002ff0 <vTaskMissedYield>:
    2ff0:	81 e0       	ldi	r24, 0x01	; 1
    2ff2:	80 93 6e 18 	sts	0x186E, r24	; 0x80186e <xYieldPending>
    2ff6:	08 95       	ret

00002ff8 <xTaskGetCurrentTaskHandle>:
    2ff8:	80 91 df 18 	lds	r24, 0x18DF	; 0x8018df <pxCurrentTCB>
    2ffc:	90 91 e0 18 	lds	r25, 0x18E0	; 0x8018e0 <pxCurrentTCB+0x1>
    3000:	08 95       	ret

00003002 <xTaskGetSchedulerState>:
    3002:	80 91 70 18 	lds	r24, 0x1870	; 0x801870 <xSchedulerRunning>
    3006:	88 23       	and	r24, r24
    3008:	31 f0       	breq	.+12     	; 0x3016 <xTaskGetSchedulerState+0x14>
    300a:	80 91 65 18 	lds	r24, 0x1865	; 0x801865 <uxSchedulerSuspended>
    300e:	88 23       	and	r24, r24
    3010:	21 f0       	breq	.+8      	; 0x301a <xTaskGetSchedulerState+0x18>
    3012:	80 e0       	ldi	r24, 0x00	; 0
    3014:	08 95       	ret
    3016:	81 e0       	ldi	r24, 0x01	; 1
    3018:	08 95       	ret
    301a:	82 e0       	ldi	r24, 0x02	; 2
    301c:	08 95       	ret

0000301e <xTaskPriorityInherit>:
    301e:	0f 93       	push	r16
    3020:	1f 93       	push	r17
    3022:	cf 93       	push	r28
    3024:	df 93       	push	r29
    3026:	fc 01       	movw	r30, r24
    3028:	89 2b       	or	r24, r25
    302a:	09 f4       	brne	.+2      	; 0x302e <xTaskPriorityInherit+0x10>
    302c:	60 c0       	rjmp	.+192    	; 0x30ee <xTaskPriorityInherit+0xd0>
    302e:	82 8d       	ldd	r24, Z+26	; 0x1a
    3030:	a0 91 df 18 	lds	r26, 0x18DF	; 0x8018df <pxCurrentTCB>
    3034:	b0 91 e0 18 	lds	r27, 0x18E0	; 0x8018e0 <pxCurrentTCB+0x1>
    3038:	5a 96       	adiw	r26, 0x1a	; 26
    303a:	9c 91       	ld	r25, X
    303c:	89 17       	cp	r24, r25
    303e:	08 f0       	brcs	.+2      	; 0x3042 <xTaskPriorityInherit+0x24>
    3040:	4a c0       	rjmp	.+148    	; 0x30d6 <xTaskPriorityInherit+0xb8>
    3042:	46 85       	ldd	r20, Z+14	; 0x0e
    3044:	57 85       	ldd	r21, Z+15	; 0x0f
    3046:	60 89       	ldd	r22, Z+16	; 0x10
    3048:	71 89       	ldd	r23, Z+17	; 0x11
    304a:	77 23       	and	r23, r23
    304c:	94 f0       	brlt	.+36     	; 0x3072 <xTaskPriorityInherit+0x54>
    304e:	a0 91 df 18 	lds	r26, 0x18DF	; 0x8018df <pxCurrentTCB>
    3052:	b0 91 e0 18 	lds	r27, 0x18E0	; 0x8018e0 <pxCurrentTCB+0x1>
    3056:	5a 96       	adiw	r26, 0x1a	; 26
    3058:	9c 91       	ld	r25, X
    305a:	44 e0       	ldi	r20, 0x04	; 4
    305c:	50 e0       	ldi	r21, 0x00	; 0
    305e:	60 e0       	ldi	r22, 0x00	; 0
    3060:	70 e0       	ldi	r23, 0x00	; 0
    3062:	49 1b       	sub	r20, r25
    3064:	51 09       	sbc	r21, r1
    3066:	61 09       	sbc	r22, r1
    3068:	71 09       	sbc	r23, r1
    306a:	46 87       	std	Z+14, r20	; 0x0e
    306c:	57 87       	std	Z+15, r21	; 0x0f
    306e:	60 8b       	std	Z+16, r22	; 0x10
    3070:	71 8b       	std	Z+17, r23	; 0x11
    3072:	2b e0       	ldi	r18, 0x0B	; 11
    3074:	82 9f       	mul	r24, r18
    3076:	c0 01       	movw	r24, r0
    3078:	11 24       	eor	r1, r1
    307a:	8d 54       	subi	r24, 0x4D	; 77
    307c:	97 4e       	sbci	r25, 0xE7	; 231
    307e:	24 85       	ldd	r18, Z+12	; 0x0c
    3080:	35 85       	ldd	r19, Z+13	; 0x0d
    3082:	28 17       	cp	r18, r24
    3084:	39 07       	cpc	r19, r25
    3086:	f1 f4       	brne	.+60     	; 0x30c4 <xTaskPriorityInherit+0xa6>
    3088:	8f 01       	movw	r16, r30
    308a:	ef 01       	movw	r28, r30
    308c:	22 96       	adiw	r28, 0x02	; 2
    308e:	ce 01       	movw	r24, r28
    3090:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <uxListRemove>
    3094:	e0 91 df 18 	lds	r30, 0x18DF	; 0x8018df <pxCurrentTCB>
    3098:	f0 91 e0 18 	lds	r31, 0x18E0	; 0x8018e0 <pxCurrentTCB+0x1>
    309c:	82 8d       	ldd	r24, Z+26	; 0x1a
    309e:	f8 01       	movw	r30, r16
    30a0:	82 8f       	std	Z+26, r24	; 0x1a
    30a2:	90 91 71 18 	lds	r25, 0x1871	; 0x801871 <uxTopReadyPriority>
    30a6:	98 17       	cp	r25, r24
    30a8:	10 f4       	brcc	.+4      	; 0x30ae <xTaskPriorityInherit+0x90>
    30aa:	80 93 71 18 	sts	0x1871, r24	; 0x801871 <uxTopReadyPriority>
    30ae:	fb e0       	ldi	r31, 0x0B	; 11
    30b0:	8f 9f       	mul	r24, r31
    30b2:	c0 01       	movw	r24, r0
    30b4:	11 24       	eor	r1, r1
    30b6:	be 01       	movw	r22, r28
    30b8:	8d 54       	subi	r24, 0x4D	; 77
    30ba:	97 4e       	sbci	r25, 0xE7	; 231
    30bc:	0e 94 1e 0a 	call	0x143c	; 0x143c <vListInsertEnd>
    30c0:	81 e0       	ldi	r24, 0x01	; 1
    30c2:	16 c0       	rjmp	.+44     	; 0x30f0 <xTaskPriorityInherit+0xd2>
    30c4:	a0 91 df 18 	lds	r26, 0x18DF	; 0x8018df <pxCurrentTCB>
    30c8:	b0 91 e0 18 	lds	r27, 0x18E0	; 0x8018e0 <pxCurrentTCB+0x1>
    30cc:	5a 96       	adiw	r26, 0x1a	; 26
    30ce:	8c 91       	ld	r24, X
    30d0:	82 8f       	std	Z+26, r24	; 0x1a
    30d2:	81 e0       	ldi	r24, 0x01	; 1
    30d4:	0d c0       	rjmp	.+26     	; 0x30f0 <xTaskPriorityInherit+0xd2>
    30d6:	a0 91 df 18 	lds	r26, 0x18DF	; 0x8018df <pxCurrentTCB>
    30da:	b0 91 e0 18 	lds	r27, 0x18E0	; 0x8018e0 <pxCurrentTCB+0x1>
    30de:	81 e0       	ldi	r24, 0x01	; 1
    30e0:	27 a1       	ldd	r18, Z+39	; 0x27
    30e2:	5a 96       	adiw	r26, 0x1a	; 26
    30e4:	9c 91       	ld	r25, X
    30e6:	29 17       	cp	r18, r25
    30e8:	18 f0       	brcs	.+6      	; 0x30f0 <xTaskPriorityInherit+0xd2>
    30ea:	80 e0       	ldi	r24, 0x00	; 0
    30ec:	01 c0       	rjmp	.+2      	; 0x30f0 <xTaskPriorityInherit+0xd2>
    30ee:	80 e0       	ldi	r24, 0x00	; 0
    30f0:	df 91       	pop	r29
    30f2:	cf 91       	pop	r28
    30f4:	1f 91       	pop	r17
    30f6:	0f 91       	pop	r16
    30f8:	08 95       	ret

000030fa <xTaskPriorityDisinherit>:
    30fa:	0f 93       	push	r16
    30fc:	1f 93       	push	r17
    30fe:	cf 93       	push	r28
    3100:	df 93       	push	r29
    3102:	fc 01       	movw	r30, r24
    3104:	89 2b       	or	r24, r25
    3106:	79 f1       	breq	.+94     	; 0x3166 <xTaskPriorityDisinherit+0x6c>
    3108:	80 a5       	ldd	r24, Z+40	; 0x28
    310a:	81 50       	subi	r24, 0x01	; 1
    310c:	80 a7       	std	Z+40, r24	; 0x28
    310e:	22 8d       	ldd	r18, Z+26	; 0x1a
    3110:	97 a1       	ldd	r25, Z+39	; 0x27
    3112:	29 17       	cp	r18, r25
    3114:	51 f1       	breq	.+84     	; 0x316a <xTaskPriorityDisinherit+0x70>
    3116:	81 11       	cpse	r24, r1
    3118:	2a c0       	rjmp	.+84     	; 0x316e <xTaskPriorityDisinherit+0x74>
    311a:	ef 01       	movw	r28, r30
    311c:	8f 01       	movw	r16, r30
    311e:	0e 5f       	subi	r16, 0xFE	; 254
    3120:	1f 4f       	sbci	r17, 0xFF	; 255
    3122:	c8 01       	movw	r24, r16
    3124:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <uxListRemove>
    3128:	8f a1       	ldd	r24, Y+39	; 0x27
    312a:	8a 8f       	std	Y+26, r24	; 0x1a
    312c:	44 e0       	ldi	r20, 0x04	; 4
    312e:	50 e0       	ldi	r21, 0x00	; 0
    3130:	60 e0       	ldi	r22, 0x00	; 0
    3132:	70 e0       	ldi	r23, 0x00	; 0
    3134:	48 1b       	sub	r20, r24
    3136:	51 09       	sbc	r21, r1
    3138:	61 09       	sbc	r22, r1
    313a:	71 09       	sbc	r23, r1
    313c:	4e 87       	std	Y+14, r20	; 0x0e
    313e:	5f 87       	std	Y+15, r21	; 0x0f
    3140:	68 8b       	std	Y+16, r22	; 0x10
    3142:	79 8b       	std	Y+17, r23	; 0x11
    3144:	90 91 71 18 	lds	r25, 0x1871	; 0x801871 <uxTopReadyPriority>
    3148:	98 17       	cp	r25, r24
    314a:	10 f4       	brcc	.+4      	; 0x3150 <xTaskPriorityDisinherit+0x56>
    314c:	80 93 71 18 	sts	0x1871, r24	; 0x801871 <uxTopReadyPriority>
    3150:	2b e0       	ldi	r18, 0x0B	; 11
    3152:	82 9f       	mul	r24, r18
    3154:	c0 01       	movw	r24, r0
    3156:	11 24       	eor	r1, r1
    3158:	b8 01       	movw	r22, r16
    315a:	8d 54       	subi	r24, 0x4D	; 77
    315c:	97 4e       	sbci	r25, 0xE7	; 231
    315e:	0e 94 1e 0a 	call	0x143c	; 0x143c <vListInsertEnd>
    3162:	81 e0       	ldi	r24, 0x01	; 1
    3164:	05 c0       	rjmp	.+10     	; 0x3170 <xTaskPriorityDisinherit+0x76>
    3166:	80 e0       	ldi	r24, 0x00	; 0
    3168:	03 c0       	rjmp	.+6      	; 0x3170 <xTaskPriorityDisinherit+0x76>
    316a:	80 e0       	ldi	r24, 0x00	; 0
    316c:	01 c0       	rjmp	.+2      	; 0x3170 <xTaskPriorityDisinherit+0x76>
    316e:	80 e0       	ldi	r24, 0x00	; 0
    3170:	df 91       	pop	r29
    3172:	cf 91       	pop	r28
    3174:	1f 91       	pop	r17
    3176:	0f 91       	pop	r16
    3178:	08 95       	ret

0000317a <vTaskPriorityDisinheritAfterTimeout>:
    317a:	0f 93       	push	r16
    317c:	1f 93       	push	r17
    317e:	cf 93       	push	r28
    3180:	df 93       	push	r29
    3182:	fc 01       	movw	r30, r24
    3184:	89 2b       	or	r24, r25
    3186:	09 f4       	brne	.+2      	; 0x318a <vTaskPriorityDisinheritAfterTimeout+0x10>
    3188:	3f c0       	rjmp	.+126    	; 0x3208 <vTaskPriorityDisinheritAfterTimeout+0x8e>
    318a:	87 a1       	ldd	r24, Z+39	; 0x27
    318c:	86 17       	cp	r24, r22
    318e:	08 f4       	brcc	.+2      	; 0x3192 <vTaskPriorityDisinheritAfterTimeout+0x18>
    3190:	86 2f       	mov	r24, r22
    3192:	92 8d       	ldd	r25, Z+26	; 0x1a
    3194:	98 17       	cp	r25, r24
    3196:	c1 f1       	breq	.+112    	; 0x3208 <vTaskPriorityDisinheritAfterTimeout+0x8e>
    3198:	20 a5       	ldd	r18, Z+40	; 0x28
    319a:	21 30       	cpi	r18, 0x01	; 1
    319c:	a9 f5       	brne	.+106    	; 0x3208 <vTaskPriorityDisinheritAfterTimeout+0x8e>
    319e:	82 8f       	std	Z+26, r24	; 0x1a
    31a0:	46 85       	ldd	r20, Z+14	; 0x0e
    31a2:	57 85       	ldd	r21, Z+15	; 0x0f
    31a4:	60 89       	ldd	r22, Z+16	; 0x10
    31a6:	71 89       	ldd	r23, Z+17	; 0x11
    31a8:	77 23       	and	r23, r23
    31aa:	64 f0       	brlt	.+24     	; 0x31c4 <vTaskPriorityDisinheritAfterTimeout+0x4a>
    31ac:	44 e0       	ldi	r20, 0x04	; 4
    31ae:	50 e0       	ldi	r21, 0x00	; 0
    31b0:	60 e0       	ldi	r22, 0x00	; 0
    31b2:	70 e0       	ldi	r23, 0x00	; 0
    31b4:	48 1b       	sub	r20, r24
    31b6:	51 09       	sbc	r21, r1
    31b8:	61 09       	sbc	r22, r1
    31ba:	71 09       	sbc	r23, r1
    31bc:	46 87       	std	Z+14, r20	; 0x0e
    31be:	57 87       	std	Z+15, r21	; 0x0f
    31c0:	60 8b       	std	Z+16, r22	; 0x10
    31c2:	71 8b       	std	Z+17, r23	; 0x11
    31c4:	2b e0       	ldi	r18, 0x0B	; 11
    31c6:	92 9f       	mul	r25, r18
    31c8:	c0 01       	movw	r24, r0
    31ca:	11 24       	eor	r1, r1
    31cc:	8d 54       	subi	r24, 0x4D	; 77
    31ce:	97 4e       	sbci	r25, 0xE7	; 231
    31d0:	24 85       	ldd	r18, Z+12	; 0x0c
    31d2:	35 85       	ldd	r19, Z+13	; 0x0d
    31d4:	28 17       	cp	r18, r24
    31d6:	39 07       	cpc	r19, r25
    31d8:	b9 f4       	brne	.+46     	; 0x3208 <vTaskPriorityDisinheritAfterTimeout+0x8e>
    31da:	ef 01       	movw	r28, r30
    31dc:	8f 01       	movw	r16, r30
    31de:	0e 5f       	subi	r16, 0xFE	; 254
    31e0:	1f 4f       	sbci	r17, 0xFF	; 255
    31e2:	c8 01       	movw	r24, r16
    31e4:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <uxListRemove>
    31e8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    31ea:	90 91 71 18 	lds	r25, 0x1871	; 0x801871 <uxTopReadyPriority>
    31ee:	98 17       	cp	r25, r24
    31f0:	10 f4       	brcc	.+4      	; 0x31f6 <vTaskPriorityDisinheritAfterTimeout+0x7c>
    31f2:	80 93 71 18 	sts	0x1871, r24	; 0x801871 <uxTopReadyPriority>
    31f6:	2b e0       	ldi	r18, 0x0B	; 11
    31f8:	82 9f       	mul	r24, r18
    31fa:	c0 01       	movw	r24, r0
    31fc:	11 24       	eor	r1, r1
    31fe:	b8 01       	movw	r22, r16
    3200:	8d 54       	subi	r24, 0x4D	; 77
    3202:	97 4e       	sbci	r25, 0xE7	; 231
    3204:	0e 94 1e 0a 	call	0x143c	; 0x143c <vListInsertEnd>
    3208:	df 91       	pop	r29
    320a:	cf 91       	pop	r28
    320c:	1f 91       	pop	r17
    320e:	0f 91       	pop	r16
    3210:	08 95       	ret

00003212 <uxTaskResetEventItemValue>:
    3212:	cf 92       	push	r12
    3214:	df 92       	push	r13
    3216:	ef 92       	push	r14
    3218:	ff 92       	push	r15
    321a:	e0 91 df 18 	lds	r30, 0x18DF	; 0x8018df <pxCurrentTCB>
    321e:	f0 91 e0 18 	lds	r31, 0x18E0	; 0x8018e0 <pxCurrentTCB+0x1>
    3222:	66 85       	ldd	r22, Z+14	; 0x0e
    3224:	77 85       	ldd	r23, Z+15	; 0x0f
    3226:	80 89       	ldd	r24, Z+16	; 0x10
    3228:	91 89       	ldd	r25, Z+17	; 0x11
    322a:	e0 91 df 18 	lds	r30, 0x18DF	; 0x8018df <pxCurrentTCB>
    322e:	f0 91 e0 18 	lds	r31, 0x18E0	; 0x8018e0 <pxCurrentTCB+0x1>
    3232:	a0 91 df 18 	lds	r26, 0x18DF	; 0x8018df <pxCurrentTCB>
    3236:	b0 91 e0 18 	lds	r27, 0x18E0	; 0x8018e0 <pxCurrentTCB+0x1>
    323a:	5a 96       	adiw	r26, 0x1a	; 26
    323c:	2c 91       	ld	r18, X
    323e:	c1 2c       	mov	r12, r1
    3240:	d1 2c       	mov	r13, r1
    3242:	76 01       	movw	r14, r12
    3244:	68 94       	set
    3246:	c2 f8       	bld	r12, 2
    3248:	c2 1a       	sub	r12, r18
    324a:	d1 08       	sbc	r13, r1
    324c:	e1 08       	sbc	r14, r1
    324e:	f1 08       	sbc	r15, r1
    3250:	c6 86       	std	Z+14, r12	; 0x0e
    3252:	d7 86       	std	Z+15, r13	; 0x0f
    3254:	e0 8a       	std	Z+16, r14	; 0x10
    3256:	f1 8a       	std	Z+17, r15	; 0x11
    3258:	ff 90       	pop	r15
    325a:	ef 90       	pop	r14
    325c:	df 90       	pop	r13
    325e:	cf 90       	pop	r12
    3260:	08 95       	ret

00003262 <pvTaskIncrementMutexHeldCount>:
    3262:	80 91 df 18 	lds	r24, 0x18DF	; 0x8018df <pxCurrentTCB>
    3266:	90 91 e0 18 	lds	r25, 0x18E0	; 0x8018e0 <pxCurrentTCB+0x1>
    326a:	89 2b       	or	r24, r25
    326c:	39 f0       	breq	.+14     	; 0x327c <pvTaskIncrementMutexHeldCount+0x1a>
    326e:	e0 91 df 18 	lds	r30, 0x18DF	; 0x8018df <pxCurrentTCB>
    3272:	f0 91 e0 18 	lds	r31, 0x18E0	; 0x8018e0 <pxCurrentTCB+0x1>
    3276:	80 a5       	ldd	r24, Z+40	; 0x28
    3278:	8f 5f       	subi	r24, 0xFF	; 255
    327a:	80 a7       	std	Z+40, r24	; 0x28
    327c:	80 91 df 18 	lds	r24, 0x18DF	; 0x8018df <pxCurrentTCB>
    3280:	90 91 e0 18 	lds	r25, 0x18E0	; 0x8018e0 <pxCurrentTCB+0x1>
    3284:	08 95       	ret

00003286 <xTaskNotifyWait>:
    3286:	4f 92       	push	r4
    3288:	5f 92       	push	r5
    328a:	6f 92       	push	r6
    328c:	7f 92       	push	r7
    328e:	8f 92       	push	r8
    3290:	9f 92       	push	r9
    3292:	af 92       	push	r10
    3294:	bf 92       	push	r11
    3296:	cf 92       	push	r12
    3298:	df 92       	push	r13
    329a:	ef 92       	push	r14
    329c:	ff 92       	push	r15
    329e:	0f 93       	push	r16
    32a0:	1f 93       	push	r17
    32a2:	49 01       	movw	r8, r18
    32a4:	5a 01       	movw	r10, r20
    32a6:	0f b6       	in	r0, 0x3f	; 63
    32a8:	f8 94       	cli
    32aa:	0f 92       	push	r0
    32ac:	e0 91 df 18 	lds	r30, 0x18DF	; 0x8018df <pxCurrentTCB>
    32b0:	f0 91 e0 18 	lds	r31, 0x18E0	; 0x8018e0 <pxCurrentTCB+0x1>
    32b4:	27 a5       	ldd	r18, Z+47	; 0x2f
    32b6:	22 30       	cpi	r18, 0x02	; 2
    32b8:	39 f1       	breq	.+78     	; 0x3308 <xTaskNotifyWait+0x82>
    32ba:	e0 91 df 18 	lds	r30, 0x18DF	; 0x8018df <pxCurrentTCB>
    32be:	f0 91 e0 18 	lds	r31, 0x18E0	; 0x8018e0 <pxCurrentTCB+0x1>
    32c2:	43 a4       	ldd	r4, Z+43	; 0x2b
    32c4:	54 a4       	ldd	r5, Z+44	; 0x2c
    32c6:	65 a4       	ldd	r6, Z+45	; 0x2d
    32c8:	76 a4       	ldd	r7, Z+46	; 0x2e
    32ca:	dc 01       	movw	r26, r24
    32cc:	cb 01       	movw	r24, r22
    32ce:	80 95       	com	r24
    32d0:	90 95       	com	r25
    32d2:	a0 95       	com	r26
    32d4:	b0 95       	com	r27
    32d6:	84 21       	and	r24, r4
    32d8:	95 21       	and	r25, r5
    32da:	a6 21       	and	r26, r6
    32dc:	b7 21       	and	r27, r7
    32de:	83 a7       	std	Z+43, r24	; 0x2b
    32e0:	94 a7       	std	Z+44, r25	; 0x2c
    32e2:	a5 a7       	std	Z+45, r26	; 0x2d
    32e4:	b6 a7       	std	Z+46, r27	; 0x2e
    32e6:	e0 91 df 18 	lds	r30, 0x18DF	; 0x8018df <pxCurrentTCB>
    32ea:	f0 91 e0 18 	lds	r31, 0x18E0	; 0x8018e0 <pxCurrentTCB+0x1>
    32ee:	81 e0       	ldi	r24, 0x01	; 1
    32f0:	87 a7       	std	Z+47, r24	; 0x2f
    32f2:	c1 14       	cp	r12, r1
    32f4:	d1 04       	cpc	r13, r1
    32f6:	e1 04       	cpc	r14, r1
    32f8:	f1 04       	cpc	r15, r1
    32fa:	31 f0       	breq	.+12     	; 0x3308 <xTaskNotifyWait+0x82>
    32fc:	41 e0       	ldi	r20, 0x01	; 1
    32fe:	c7 01       	movw	r24, r14
    3300:	b6 01       	movw	r22, r12
    3302:	5a d9       	rcall	.-3404   	; 0x25b8 <prvAddCurrentTaskToDelayedList>
    3304:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <vPortYield>
    3308:	0f 90       	pop	r0
    330a:	0f be       	out	0x3f, r0	; 63
    330c:	0f b6       	in	r0, 0x3f	; 63
    330e:	f8 94       	cli
    3310:	0f 92       	push	r0
    3312:	01 15       	cp	r16, r1
    3314:	11 05       	cpc	r17, r1
    3316:	69 f0       	breq	.+26     	; 0x3332 <xTaskNotifyWait+0xac>
    3318:	e0 91 df 18 	lds	r30, 0x18DF	; 0x8018df <pxCurrentTCB>
    331c:	f0 91 e0 18 	lds	r31, 0x18E0	; 0x8018e0 <pxCurrentTCB+0x1>
    3320:	83 a5       	ldd	r24, Z+43	; 0x2b
    3322:	94 a5       	ldd	r25, Z+44	; 0x2c
    3324:	a5 a5       	ldd	r26, Z+45	; 0x2d
    3326:	b6 a5       	ldd	r27, Z+46	; 0x2e
    3328:	f8 01       	movw	r30, r16
    332a:	80 83       	st	Z, r24
    332c:	91 83       	std	Z+1, r25	; 0x01
    332e:	a2 83       	std	Z+2, r26	; 0x02
    3330:	b3 83       	std	Z+3, r27	; 0x03
    3332:	e0 91 df 18 	lds	r30, 0x18DF	; 0x8018df <pxCurrentTCB>
    3336:	f0 91 e0 18 	lds	r31, 0x18E0	; 0x8018e0 <pxCurrentTCB+0x1>
    333a:	87 a5       	ldd	r24, Z+47	; 0x2f
    333c:	82 30       	cpi	r24, 0x02	; 2
    333e:	b1 f4       	brne	.+44     	; 0x336c <xTaskNotifyWait+0xe6>
    3340:	e0 91 df 18 	lds	r30, 0x18DF	; 0x8018df <pxCurrentTCB>
    3344:	f0 91 e0 18 	lds	r31, 0x18E0	; 0x8018e0 <pxCurrentTCB+0x1>
    3348:	83 a5       	ldd	r24, Z+43	; 0x2b
    334a:	94 a5       	ldd	r25, Z+44	; 0x2c
    334c:	a5 a5       	ldd	r26, Z+45	; 0x2d
    334e:	b6 a5       	ldd	r27, Z+46	; 0x2e
    3350:	80 94       	com	r8
    3352:	90 94       	com	r9
    3354:	a0 94       	com	r10
    3356:	b0 94       	com	r11
    3358:	88 22       	and	r8, r24
    335a:	99 22       	and	r9, r25
    335c:	aa 22       	and	r10, r26
    335e:	bb 22       	and	r11, r27
    3360:	83 a6       	std	Z+43, r8	; 0x2b
    3362:	94 a6       	std	Z+44, r9	; 0x2c
    3364:	a5 a6       	std	Z+45, r10	; 0x2d
    3366:	b6 a6       	std	Z+46, r11	; 0x2e
    3368:	81 e0       	ldi	r24, 0x01	; 1
    336a:	01 c0       	rjmp	.+2      	; 0x336e <xTaskNotifyWait+0xe8>
    336c:	80 e0       	ldi	r24, 0x00	; 0
    336e:	e0 91 df 18 	lds	r30, 0x18DF	; 0x8018df <pxCurrentTCB>
    3372:	f0 91 e0 18 	lds	r31, 0x18E0	; 0x8018e0 <pxCurrentTCB+0x1>
    3376:	17 a6       	std	Z+47, r1	; 0x2f
    3378:	0f 90       	pop	r0
    337a:	0f be       	out	0x3f, r0	; 63
    337c:	1f 91       	pop	r17
    337e:	0f 91       	pop	r16
    3380:	ff 90       	pop	r15
    3382:	ef 90       	pop	r14
    3384:	df 90       	pop	r13
    3386:	cf 90       	pop	r12
    3388:	bf 90       	pop	r11
    338a:	af 90       	pop	r10
    338c:	9f 90       	pop	r9
    338e:	8f 90       	pop	r8
    3390:	7f 90       	pop	r7
    3392:	6f 90       	pop	r6
    3394:	5f 90       	pop	r5
    3396:	4f 90       	pop	r4
    3398:	08 95       	ret

0000339a <xTaskGenericNotify>:
    339a:	0f 93       	push	r16
    339c:	1f 93       	push	r17
    339e:	cf 93       	push	r28
    33a0:	df 93       	push	r29
    33a2:	fc 01       	movw	r30, r24
    33a4:	0f b6       	in	r0, 0x3f	; 63
    33a6:	f8 94       	cli
    33a8:	0f 92       	push	r0
    33aa:	01 15       	cp	r16, r1
    33ac:	11 05       	cpc	r17, r1
    33ae:	49 f0       	breq	.+18     	; 0x33c2 <xTaskGenericNotify+0x28>
    33b0:	83 a5       	ldd	r24, Z+43	; 0x2b
    33b2:	94 a5       	ldd	r25, Z+44	; 0x2c
    33b4:	a5 a5       	ldd	r26, Z+45	; 0x2d
    33b6:	b6 a5       	ldd	r27, Z+46	; 0x2e
    33b8:	e8 01       	movw	r28, r16
    33ba:	88 83       	st	Y, r24
    33bc:	99 83       	std	Y+1, r25	; 0x01
    33be:	aa 83       	std	Y+2, r26	; 0x02
    33c0:	bb 83       	std	Y+3, r27	; 0x03
    33c2:	87 a5       	ldd	r24, Z+47	; 0x2f
    33c4:	92 e0       	ldi	r25, 0x02	; 2
    33c6:	97 a7       	std	Z+47, r25	; 0x2f
    33c8:	22 30       	cpi	r18, 0x02	; 2
    33ca:	b1 f0       	breq	.+44     	; 0x33f8 <xTaskGenericNotify+0x5e>
    33cc:	18 f4       	brcc	.+6      	; 0x33d4 <xTaskGenericNotify+0x3a>
    33ce:	21 30       	cpi	r18, 0x01	; 1
    33d0:	31 f0       	breq	.+12     	; 0x33de <xTaskGenericNotify+0x44>
    33d2:	2a c0       	rjmp	.+84     	; 0x3428 <xTaskGenericNotify+0x8e>
    33d4:	23 30       	cpi	r18, 0x03	; 3
    33d6:	e9 f0       	breq	.+58     	; 0x3412 <xTaskGenericNotify+0x78>
    33d8:	24 30       	cpi	r18, 0x04	; 4
    33da:	01 f1       	breq	.+64     	; 0x341c <xTaskGenericNotify+0x82>
    33dc:	25 c0       	rjmp	.+74     	; 0x3428 <xTaskGenericNotify+0x8e>
    33de:	03 a5       	ldd	r16, Z+43	; 0x2b
    33e0:	14 a5       	ldd	r17, Z+44	; 0x2c
    33e2:	25 a5       	ldd	r18, Z+45	; 0x2d
    33e4:	36 a5       	ldd	r19, Z+46	; 0x2e
    33e6:	40 2b       	or	r20, r16
    33e8:	51 2b       	or	r21, r17
    33ea:	62 2b       	or	r22, r18
    33ec:	73 2b       	or	r23, r19
    33ee:	43 a7       	std	Z+43, r20	; 0x2b
    33f0:	54 a7       	std	Z+44, r21	; 0x2c
    33f2:	65 a7       	std	Z+45, r22	; 0x2d
    33f4:	76 a7       	std	Z+46, r23	; 0x2e
    33f6:	18 c0       	rjmp	.+48     	; 0x3428 <xTaskGenericNotify+0x8e>
    33f8:	43 a5       	ldd	r20, Z+43	; 0x2b
    33fa:	54 a5       	ldd	r21, Z+44	; 0x2c
    33fc:	65 a5       	ldd	r22, Z+45	; 0x2d
    33fe:	76 a5       	ldd	r23, Z+46	; 0x2e
    3400:	4f 5f       	subi	r20, 0xFF	; 255
    3402:	5f 4f       	sbci	r21, 0xFF	; 255
    3404:	6f 4f       	sbci	r22, 0xFF	; 255
    3406:	7f 4f       	sbci	r23, 0xFF	; 255
    3408:	43 a7       	std	Z+43, r20	; 0x2b
    340a:	54 a7       	std	Z+44, r21	; 0x2c
    340c:	65 a7       	std	Z+45, r22	; 0x2d
    340e:	76 a7       	std	Z+46, r23	; 0x2e
    3410:	0b c0       	rjmp	.+22     	; 0x3428 <xTaskGenericNotify+0x8e>
    3412:	43 a7       	std	Z+43, r20	; 0x2b
    3414:	54 a7       	std	Z+44, r21	; 0x2c
    3416:	65 a7       	std	Z+45, r22	; 0x2d
    3418:	76 a7       	std	Z+46, r23	; 0x2e
    341a:	06 c0       	rjmp	.+12     	; 0x3428 <xTaskGenericNotify+0x8e>
    341c:	82 30       	cpi	r24, 0x02	; 2
    341e:	49 f1       	breq	.+82     	; 0x3472 <xTaskGenericNotify+0xd8>
    3420:	43 a7       	std	Z+43, r20	; 0x2b
    3422:	54 a7       	std	Z+44, r21	; 0x2c
    3424:	65 a7       	std	Z+45, r22	; 0x2d
    3426:	76 a7       	std	Z+46, r23	; 0x2e
    3428:	81 30       	cpi	r24, 0x01	; 1
    342a:	29 f5       	brne	.+74     	; 0x3476 <xTaskGenericNotify+0xdc>
    342c:	ef 01       	movw	r28, r30
    342e:	8f 01       	movw	r16, r30
    3430:	0e 5f       	subi	r16, 0xFE	; 254
    3432:	1f 4f       	sbci	r17, 0xFF	; 255
    3434:	c8 01       	movw	r24, r16
    3436:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <uxListRemove>
    343a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    343c:	90 91 71 18 	lds	r25, 0x1871	; 0x801871 <uxTopReadyPriority>
    3440:	98 17       	cp	r25, r24
    3442:	10 f4       	brcc	.+4      	; 0x3448 <xTaskGenericNotify+0xae>
    3444:	80 93 71 18 	sts	0x1871, r24	; 0x801871 <uxTopReadyPriority>
    3448:	2b e0       	ldi	r18, 0x0B	; 11
    344a:	82 9f       	mul	r24, r18
    344c:	c0 01       	movw	r24, r0
    344e:	11 24       	eor	r1, r1
    3450:	b8 01       	movw	r22, r16
    3452:	8d 54       	subi	r24, 0x4D	; 77
    3454:	97 4e       	sbci	r25, 0xE7	; 231
    3456:	0e 94 1e 0a 	call	0x143c	; 0x143c <vListInsertEnd>
    345a:	e0 91 df 18 	lds	r30, 0x18DF	; 0x8018df <pxCurrentTCB>
    345e:	f0 91 e0 18 	lds	r31, 0x18E0	; 0x8018e0 <pxCurrentTCB+0x1>
    3462:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3464:	82 8d       	ldd	r24, Z+26	; 0x1a
    3466:	89 17       	cp	r24, r25
    3468:	40 f4       	brcc	.+16     	; 0x347a <xTaskGenericNotify+0xe0>
    346a:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <vPortYield>
    346e:	81 e0       	ldi	r24, 0x01	; 1
    3470:	05 c0       	rjmp	.+10     	; 0x347c <xTaskGenericNotify+0xe2>
    3472:	80 e0       	ldi	r24, 0x00	; 0
    3474:	03 c0       	rjmp	.+6      	; 0x347c <xTaskGenericNotify+0xe2>
    3476:	81 e0       	ldi	r24, 0x01	; 1
    3478:	01 c0       	rjmp	.+2      	; 0x347c <xTaskGenericNotify+0xe2>
    347a:	81 e0       	ldi	r24, 0x01	; 1
    347c:	0f 90       	pop	r0
    347e:	0f be       	out	0x3f, r0	; 63
    3480:	df 91       	pop	r29
    3482:	cf 91       	pop	r28
    3484:	1f 91       	pop	r17
    3486:	0f 91       	pop	r16
    3488:	08 95       	ret

0000348a <xTaskGenericNotifyFromISR>:
    348a:	ef 92       	push	r14
    348c:	ff 92       	push	r15
    348e:	0f 93       	push	r16
    3490:	1f 93       	push	r17
    3492:	cf 93       	push	r28
    3494:	df 93       	push	r29
    3496:	fc 01       	movw	r30, r24
    3498:	01 15       	cp	r16, r1
    349a:	11 05       	cpc	r17, r1
    349c:	49 f0       	breq	.+18     	; 0x34b0 <xTaskGenericNotifyFromISR+0x26>
    349e:	83 a5       	ldd	r24, Z+43	; 0x2b
    34a0:	94 a5       	ldd	r25, Z+44	; 0x2c
    34a2:	a5 a5       	ldd	r26, Z+45	; 0x2d
    34a4:	b6 a5       	ldd	r27, Z+46	; 0x2e
    34a6:	e8 01       	movw	r28, r16
    34a8:	88 83       	st	Y, r24
    34aa:	99 83       	std	Y+1, r25	; 0x01
    34ac:	aa 83       	std	Y+2, r26	; 0x02
    34ae:	bb 83       	std	Y+3, r27	; 0x03
    34b0:	87 a5       	ldd	r24, Z+47	; 0x2f
    34b2:	92 e0       	ldi	r25, 0x02	; 2
    34b4:	97 a7       	std	Z+47, r25	; 0x2f
    34b6:	22 30       	cpi	r18, 0x02	; 2
    34b8:	b1 f0       	breq	.+44     	; 0x34e6 <xTaskGenericNotifyFromISR+0x5c>
    34ba:	18 f4       	brcc	.+6      	; 0x34c2 <xTaskGenericNotifyFromISR+0x38>
    34bc:	21 30       	cpi	r18, 0x01	; 1
    34be:	31 f0       	breq	.+12     	; 0x34cc <xTaskGenericNotifyFromISR+0x42>
    34c0:	2a c0       	rjmp	.+84     	; 0x3516 <xTaskGenericNotifyFromISR+0x8c>
    34c2:	23 30       	cpi	r18, 0x03	; 3
    34c4:	e9 f0       	breq	.+58     	; 0x3500 <xTaskGenericNotifyFromISR+0x76>
    34c6:	24 30       	cpi	r18, 0x04	; 4
    34c8:	01 f1       	breq	.+64     	; 0x350a <xTaskGenericNotifyFromISR+0x80>
    34ca:	25 c0       	rjmp	.+74     	; 0x3516 <xTaskGenericNotifyFromISR+0x8c>
    34cc:	03 a5       	ldd	r16, Z+43	; 0x2b
    34ce:	14 a5       	ldd	r17, Z+44	; 0x2c
    34d0:	25 a5       	ldd	r18, Z+45	; 0x2d
    34d2:	36 a5       	ldd	r19, Z+46	; 0x2e
    34d4:	40 2b       	or	r20, r16
    34d6:	51 2b       	or	r21, r17
    34d8:	62 2b       	or	r22, r18
    34da:	73 2b       	or	r23, r19
    34dc:	43 a7       	std	Z+43, r20	; 0x2b
    34de:	54 a7       	std	Z+44, r21	; 0x2c
    34e0:	65 a7       	std	Z+45, r22	; 0x2d
    34e2:	76 a7       	std	Z+46, r23	; 0x2e
    34e4:	18 c0       	rjmp	.+48     	; 0x3516 <xTaskGenericNotifyFromISR+0x8c>
    34e6:	43 a5       	ldd	r20, Z+43	; 0x2b
    34e8:	54 a5       	ldd	r21, Z+44	; 0x2c
    34ea:	65 a5       	ldd	r22, Z+45	; 0x2d
    34ec:	76 a5       	ldd	r23, Z+46	; 0x2e
    34ee:	4f 5f       	subi	r20, 0xFF	; 255
    34f0:	5f 4f       	sbci	r21, 0xFF	; 255
    34f2:	6f 4f       	sbci	r22, 0xFF	; 255
    34f4:	7f 4f       	sbci	r23, 0xFF	; 255
    34f6:	43 a7       	std	Z+43, r20	; 0x2b
    34f8:	54 a7       	std	Z+44, r21	; 0x2c
    34fa:	65 a7       	std	Z+45, r22	; 0x2d
    34fc:	76 a7       	std	Z+46, r23	; 0x2e
    34fe:	0b c0       	rjmp	.+22     	; 0x3516 <xTaskGenericNotifyFromISR+0x8c>
    3500:	43 a7       	std	Z+43, r20	; 0x2b
    3502:	54 a7       	std	Z+44, r21	; 0x2c
    3504:	65 a7       	std	Z+45, r22	; 0x2d
    3506:	76 a7       	std	Z+46, r23	; 0x2e
    3508:	06 c0       	rjmp	.+12     	; 0x3516 <xTaskGenericNotifyFromISR+0x8c>
    350a:	82 30       	cpi	r24, 0x02	; 2
    350c:	d9 f1       	breq	.+118    	; 0x3584 <xTaskGenericNotifyFromISR+0xfa>
    350e:	43 a7       	std	Z+43, r20	; 0x2b
    3510:	54 a7       	std	Z+44, r21	; 0x2c
    3512:	65 a7       	std	Z+45, r22	; 0x2d
    3514:	76 a7       	std	Z+46, r23	; 0x2e
    3516:	81 30       	cpi	r24, 0x01	; 1
    3518:	b9 f5       	brne	.+110    	; 0x3588 <xTaskGenericNotifyFromISR+0xfe>
    351a:	ef 01       	movw	r28, r30
    351c:	80 91 65 18 	lds	r24, 0x1865	; 0x801865 <uxSchedulerSuspended>
    3520:	81 11       	cpse	r24, r1
    3522:	17 c0       	rjmp	.+46     	; 0x3552 <xTaskGenericNotifyFromISR+0xc8>
    3524:	8f 01       	movw	r16, r30
    3526:	0e 5f       	subi	r16, 0xFE	; 254
    3528:	1f 4f       	sbci	r17, 0xFF	; 255
    352a:	c8 01       	movw	r24, r16
    352c:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <uxListRemove>
    3530:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3532:	90 91 71 18 	lds	r25, 0x1871	; 0x801871 <uxTopReadyPriority>
    3536:	98 17       	cp	r25, r24
    3538:	10 f4       	brcc	.+4      	; 0x353e <xTaskGenericNotifyFromISR+0xb4>
    353a:	80 93 71 18 	sts	0x1871, r24	; 0x801871 <uxTopReadyPriority>
    353e:	eb e0       	ldi	r30, 0x0B	; 11
    3540:	8e 9f       	mul	r24, r30
    3542:	c0 01       	movw	r24, r0
    3544:	11 24       	eor	r1, r1
    3546:	b8 01       	movw	r22, r16
    3548:	8d 54       	subi	r24, 0x4D	; 77
    354a:	97 4e       	sbci	r25, 0xE7	; 231
    354c:	0e 94 1e 0a 	call	0x143c	; 0x143c <vListInsertEnd>
    3550:	07 c0       	rjmp	.+14     	; 0x3560 <xTaskGenericNotifyFromISR+0xd6>
    3552:	bf 01       	movw	r22, r30
    3554:	62 5f       	subi	r22, 0xF2	; 242
    3556:	7f 4f       	sbci	r23, 0xFF	; 255
    3558:	8e e8       	ldi	r24, 0x8E	; 142
    355a:	98 e1       	ldi	r25, 0x18	; 24
    355c:	0e 94 1e 0a 	call	0x143c	; 0x143c <vListInsertEnd>
    3560:	e0 91 df 18 	lds	r30, 0x18DF	; 0x8018df <pxCurrentTCB>
    3564:	f0 91 e0 18 	lds	r31, 0x18E0	; 0x8018e0 <pxCurrentTCB+0x1>
    3568:	9a 8d       	ldd	r25, Y+26	; 0x1a
    356a:	82 8d       	ldd	r24, Z+26	; 0x1a
    356c:	89 17       	cp	r24, r25
    356e:	70 f4       	brcc	.+28     	; 0x358c <xTaskGenericNotifyFromISR+0x102>
    3570:	e1 14       	cp	r14, r1
    3572:	f1 04       	cpc	r15, r1
    3574:	19 f0       	breq	.+6      	; 0x357c <xTaskGenericNotifyFromISR+0xf2>
    3576:	81 e0       	ldi	r24, 0x01	; 1
    3578:	e7 01       	movw	r28, r14
    357a:	88 83       	st	Y, r24
    357c:	81 e0       	ldi	r24, 0x01	; 1
    357e:	80 93 6e 18 	sts	0x186E, r24	; 0x80186e <xYieldPending>
    3582:	05 c0       	rjmp	.+10     	; 0x358e <xTaskGenericNotifyFromISR+0x104>
    3584:	80 e0       	ldi	r24, 0x00	; 0
    3586:	03 c0       	rjmp	.+6      	; 0x358e <xTaskGenericNotifyFromISR+0x104>
    3588:	81 e0       	ldi	r24, 0x01	; 1
    358a:	01 c0       	rjmp	.+2      	; 0x358e <xTaskGenericNotifyFromISR+0x104>
    358c:	81 e0       	ldi	r24, 0x01	; 1
    358e:	df 91       	pop	r29
    3590:	cf 91       	pop	r28
    3592:	1f 91       	pop	r17
    3594:	0f 91       	pop	r16
    3596:	ff 90       	pop	r15
    3598:	ef 90       	pop	r14
    359a:	08 95       	ret

0000359c <xTaskNotifyStateClear>:
    TCB_t *pxTCB;
    BaseType_t xReturn;

        /* If null is passed in here then it is the calling task that is having
        its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    359c:	00 97       	sbiw	r24, 0x00	; 0
    359e:	21 f4       	brne	.+8      	; 0x35a8 <xTaskNotifyStateClear+0xc>
    35a0:	80 91 df 18 	lds	r24, 0x18DF	; 0x8018df <pxCurrentTCB>
    35a4:	90 91 e0 18 	lds	r25, 0x18E0	; 0x8018e0 <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    35a8:	0f b6       	in	r0, 0x3f	; 63
    35aa:	f8 94       	cli
    35ac:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
    35ae:	fc 01       	movw	r30, r24
    35b0:	27 a5       	ldd	r18, Z+47	; 0x2f
    35b2:	22 30       	cpi	r18, 0x02	; 2
    35b4:	19 f4       	brne	.+6      	; 0x35bc <xTaskNotifyStateClear+0x20>
            {
                pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    35b6:	17 a6       	std	Z+47, r1	; 0x2f
                xReturn = pdPASS;
    35b8:	81 e0       	ldi	r24, 0x01	; 1
    35ba:	01 c0       	rjmp	.+2      	; 0x35be <xTaskNotifyStateClear+0x22>
            }
            else
            {
                xReturn = pdFAIL;
    35bc:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    35be:	0f 90       	pop	r0
    35c0:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    35c2:	08 95       	ret

000035c4 <prvInsertTimerInActiveList>:
    35c4:	cf 92       	push	r12
    35c6:	df 92       	push	r13
    35c8:	ef 92       	push	r14
    35ca:	ff 92       	push	r15
    35cc:	0f 93       	push	r16
    35ce:	1f 93       	push	r17
    35d0:	fc 01       	movw	r30, r24
    35d2:	42 83       	std	Z+2, r20	; 0x02
    35d4:	53 83       	std	Z+3, r21	; 0x03
    35d6:	64 83       	std	Z+4, r22	; 0x04
    35d8:	75 83       	std	Z+5, r23	; 0x05
    35da:	93 87       	std	Z+11, r25	; 0x0b
    35dc:	82 87       	std	Z+10, r24	; 0x0a
    35de:	04 17       	cp	r16, r20
    35e0:	15 07       	cpc	r17, r21
    35e2:	26 07       	cpc	r18, r22
    35e4:	37 07       	cpc	r19, r23
    35e6:	c0 f0       	brcs	.+48     	; 0x3618 <prvInsertTimerInActiveList+0x54>
    35e8:	0c 19       	sub	r16, r12
    35ea:	1d 09       	sbc	r17, r13
    35ec:	2e 09       	sbc	r18, r14
    35ee:	3f 09       	sbc	r19, r15
    35f0:	86 85       	ldd	r24, Z+14	; 0x0e
    35f2:	97 85       	ldd	r25, Z+15	; 0x0f
    35f4:	a0 89       	ldd	r26, Z+16	; 0x10
    35f6:	b1 89       	ldd	r27, Z+17	; 0x11
    35f8:	08 17       	cp	r16, r24
    35fa:	19 07       	cpc	r17, r25
    35fc:	2a 07       	cpc	r18, r26
    35fe:	3b 07       	cpc	r19, r27
    3600:	00 f5       	brcc	.+64     	; 0x3642 <prvInsertTimerInActiveList+0x7e>
    3602:	bf 01       	movw	r22, r30
    3604:	6e 5f       	subi	r22, 0xFE	; 254
    3606:	7f 4f       	sbci	r23, 0xFF	; 255
    3608:	80 91 e9 18 	lds	r24, 0x18E9	; 0x8018e9 <pxOverflowTimerList>
    360c:	90 91 ea 18 	lds	r25, 0x18EA	; 0x8018ea <pxOverflowTimerList+0x1>
    3610:	0e 94 3f 0a 	call	0x147e	; 0x147e <vListInsert>
    3614:	80 e0       	ldi	r24, 0x00	; 0
    3616:	18 c0       	rjmp	.+48     	; 0x3648 <prvInsertTimerInActiveList+0x84>
    3618:	0c 15       	cp	r16, r12
    361a:	1d 05       	cpc	r17, r13
    361c:	2e 05       	cpc	r18, r14
    361e:	3f 05       	cpc	r19, r15
    3620:	28 f4       	brcc	.+10     	; 0x362c <prvInsertTimerInActiveList+0x68>
    3622:	4c 15       	cp	r20, r12
    3624:	5d 05       	cpc	r21, r13
    3626:	6e 05       	cpc	r22, r14
    3628:	7f 05       	cpc	r23, r15
    362a:	68 f4       	brcc	.+26     	; 0x3646 <prvInsertTimerInActiveList+0x82>
    362c:	bf 01       	movw	r22, r30
    362e:	6e 5f       	subi	r22, 0xFE	; 254
    3630:	7f 4f       	sbci	r23, 0xFF	; 255
    3632:	80 91 eb 18 	lds	r24, 0x18EB	; 0x8018eb <pxCurrentTimerList>
    3636:	90 91 ec 18 	lds	r25, 0x18EC	; 0x8018ec <pxCurrentTimerList+0x1>
    363a:	0e 94 3f 0a 	call	0x147e	; 0x147e <vListInsert>
    363e:	80 e0       	ldi	r24, 0x00	; 0
    3640:	03 c0       	rjmp	.+6      	; 0x3648 <prvInsertTimerInActiveList+0x84>
    3642:	81 e0       	ldi	r24, 0x01	; 1
    3644:	01 c0       	rjmp	.+2      	; 0x3648 <prvInsertTimerInActiveList+0x84>
    3646:	81 e0       	ldi	r24, 0x01	; 1
    3648:	1f 91       	pop	r17
    364a:	0f 91       	pop	r16
    364c:	ff 90       	pop	r15
    364e:	ef 90       	pop	r14
    3650:	df 90       	pop	r13
    3652:	cf 90       	pop	r12
    3654:	08 95       	ret

00003656 <prvCheckForValidListAndQueue>:
    3656:	0f b6       	in	r0, 0x3f	; 63
    3658:	f8 94       	cli
    365a:	0f 92       	push	r0
    365c:	80 91 e7 18 	lds	r24, 0x18E7	; 0x8018e7 <xTimerQueue>
    3660:	90 91 e8 18 	lds	r25, 0x18E8	; 0x8018e8 <xTimerQueue+0x1>
    3664:	89 2b       	or	r24, r25
    3666:	e9 f4       	brne	.+58     	; 0x36a2 <prvCheckForValidListAndQueue+0x4c>
    3668:	88 ef       	ldi	r24, 0xF8	; 248
    366a:	98 e1       	ldi	r25, 0x18	; 24
    366c:	0e 94 09 0a 	call	0x1412	; 0x1412 <vListInitialise>
    3670:	8d ee       	ldi	r24, 0xED	; 237
    3672:	98 e1       	ldi	r25, 0x18	; 24
    3674:	0e 94 09 0a 	call	0x1412	; 0x1412 <vListInitialise>
    3678:	88 ef       	ldi	r24, 0xF8	; 248
    367a:	98 e1       	ldi	r25, 0x18	; 24
    367c:	90 93 ec 18 	sts	0x18EC, r25	; 0x8018ec <pxCurrentTimerList+0x1>
    3680:	80 93 eb 18 	sts	0x18EB, r24	; 0x8018eb <pxCurrentTimerList>
    3684:	8d ee       	ldi	r24, 0xED	; 237
    3686:	98 e1       	ldi	r25, 0x18	; 24
    3688:	90 93 ea 18 	sts	0x18EA, r25	; 0x8018ea <pxOverflowTimerList+0x1>
    368c:	80 93 e9 18 	sts	0x18E9, r24	; 0x8018e9 <pxOverflowTimerList>
    3690:	40 e0       	ldi	r20, 0x00	; 0
    3692:	67 e0       	ldi	r22, 0x07	; 7
    3694:	8a e0       	ldi	r24, 0x0A	; 10
    3696:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <xQueueGenericCreate>
    369a:	90 93 e8 18 	sts	0x18E8, r25	; 0x8018e8 <xTimerQueue+0x1>
    369e:	80 93 e7 18 	sts	0x18E7, r24	; 0x8018e7 <xTimerQueue>
    36a2:	0f 90       	pop	r0
    36a4:	0f be       	out	0x3f, r0	; 63
    36a6:	08 95       	ret

000036a8 <xTimerCreateTimerTask>:
    36a8:	ef 92       	push	r14
    36aa:	ff 92       	push	r15
    36ac:	0f 93       	push	r16
    36ae:	d3 df       	rcall	.-90     	; 0x3656 <prvCheckForValidListAndQueue>
    36b0:	80 91 e7 18 	lds	r24, 0x18E7	; 0x8018e7 <xTimerQueue>
    36b4:	90 91 e8 18 	lds	r25, 0x18E8	; 0x8018e8 <xTimerQueue+0x1>
    36b8:	89 2b       	or	r24, r25
    36ba:	91 f0       	breq	.+36     	; 0x36e0 <xTimerCreateTimerTask+0x38>
    36bc:	0f 2e       	mov	r0, r31
    36be:	f5 ee       	ldi	r31, 0xE5	; 229
    36c0:	ef 2e       	mov	r14, r31
    36c2:	f8 e1       	ldi	r31, 0x18	; 24
    36c4:	ff 2e       	mov	r15, r31
    36c6:	f0 2d       	mov	r31, r0
    36c8:	03 e0       	ldi	r16, 0x03	; 3
    36ca:	20 e0       	ldi	r18, 0x00	; 0
    36cc:	30 e0       	ldi	r19, 0x00	; 0
    36ce:	45 e5       	ldi	r20, 0x55	; 85
    36d0:	50 e0       	ldi	r21, 0x00	; 0
    36d2:	6f e0       	ldi	r22, 0x0F	; 15
    36d4:	75 e0       	ldi	r23, 0x05	; 5
    36d6:	87 e0       	ldi	r24, 0x07	; 7
    36d8:	91 e0       	ldi	r25, 0x01	; 1
    36da:	0e 94 53 13 	call	0x26a6	; 0x26a6 <xTaskCreate>
    36de:	01 c0       	rjmp	.+2      	; 0x36e2 <xTimerCreateTimerTask+0x3a>
    36e0:	80 e0       	ldi	r24, 0x00	; 0
    36e2:	0f 91       	pop	r16
    36e4:	ff 90       	pop	r15
    36e6:	ef 90       	pop	r14
    36e8:	08 95       	ret

000036ea <xTimerGenericCommand>:
    }
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    36ea:	8f 92       	push	r8
    36ec:	9f 92       	push	r9
    36ee:	af 92       	push	r10
    36f0:	bf 92       	push	r11
    36f2:	cf 92       	push	r12
    36f4:	df 92       	push	r13
    36f6:	ef 92       	push	r14
    36f8:	ff 92       	push	r15
    36fa:	0f 93       	push	r16
    36fc:	1f 93       	push	r17
    36fe:	cf 93       	push	r28
    3700:	df 93       	push	r29
    3702:	cd b7       	in	r28, 0x3d	; 61
    3704:	de b7       	in	r29, 0x3e	; 62
    3706:	27 97       	sbiw	r28, 0x07	; 7
    3708:	0f b6       	in	r0, 0x3f	; 63
    370a:	f8 94       	cli
    370c:	de bf       	out	0x3e, r29	; 62
    370e:	0f be       	out	0x3f, r0	; 63
    3710:	cd bf       	out	0x3d, r28	; 61

    configASSERT( xTimer );

    /* Send a message to the timer service task to perform a particular action
    on a particular timer definition. */
    if( xTimerQueue != NULL )
    3712:	e0 91 e7 18 	lds	r30, 0x18E7	; 0x8018e7 <xTimerQueue>
    3716:	f0 91 e8 18 	lds	r31, 0x18E8	; 0x8018e8 <xTimerQueue+0x1>
    371a:	30 97       	sbiw	r30, 0x00	; 0
    371c:	81 f1       	breq	.+96     	; 0x377e <xTimerGenericCommand+0x94>
    {
        /* Send a command to the timer service task to start the xTimer timer. */
        xMessage.xMessageID = xCommandID;
    371e:	69 83       	std	Y+1, r22	; 0x01
        xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    3720:	2a 83       	std	Y+2, r18	; 0x02
    3722:	3b 83       	std	Y+3, r19	; 0x03
    3724:	4c 83       	std	Y+4, r20	; 0x04
    3726:	5d 83       	std	Y+5, r21	; 0x05
        xMessage.u.xTimerParameters.pxTimer = xTimer;
    3728:	9f 83       	std	Y+7, r25	; 0x07
    372a:	8e 83       	std	Y+6, r24	; 0x06

        if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    372c:	66 30       	cpi	r22, 0x06	; 6
    372e:	f4 f4       	brge	.+60     	; 0x376c <xTimerGenericCommand+0x82>
        {
            if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    3730:	68 dc       	rcall	.-1840   	; 0x3002 <xTaskGetSchedulerState>
    3732:	82 30       	cpi	r24, 0x02	; 2
    3734:	69 f4       	brne	.+26     	; 0x3750 <xTimerGenericCommand+0x66>
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    3736:	00 e0       	ldi	r16, 0x00	; 0
    3738:	a7 01       	movw	r20, r14
    373a:	96 01       	movw	r18, r12
    373c:	be 01       	movw	r22, r28
    373e:	6f 5f       	subi	r22, 0xFF	; 255
    3740:	7f 4f       	sbci	r23, 0xFF	; 255
    3742:	80 91 e7 18 	lds	r24, 0x18E7	; 0x8018e7 <xTimerQueue>
    3746:	90 91 e8 18 	lds	r25, 0x18E8	; 0x8018e8 <xTimerQueue+0x1>
    374a:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <xQueueGenericSend>
    374e:	18 c0       	rjmp	.+48     	; 0x3780 <xTimerGenericCommand+0x96>
            }
            else
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    3750:	00 e0       	ldi	r16, 0x00	; 0
    3752:	20 e0       	ldi	r18, 0x00	; 0
    3754:	30 e0       	ldi	r19, 0x00	; 0
    3756:	a9 01       	movw	r20, r18
    3758:	be 01       	movw	r22, r28
    375a:	6f 5f       	subi	r22, 0xFF	; 255
    375c:	7f 4f       	sbci	r23, 0xFF	; 255
    375e:	80 91 e7 18 	lds	r24, 0x18E7	; 0x8018e7 <xTimerQueue>
    3762:	90 91 e8 18 	lds	r25, 0x18E8	; 0x8018e8 <xTimerQueue+0x1>
    3766:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <xQueueGenericSend>
    376a:	0a c0       	rjmp	.+20     	; 0x3780 <xTimerGenericCommand+0x96>
            }
        }
        else
        {
            xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    376c:	20 e0       	ldi	r18, 0x00	; 0
    376e:	a8 01       	movw	r20, r16
    3770:	be 01       	movw	r22, r28
    3772:	6f 5f       	subi	r22, 0xFF	; 255
    3774:	7f 4f       	sbci	r23, 0xFF	; 255
    3776:	cf 01       	movw	r24, r30
    3778:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <xQueueGenericSendFromISR>
    377c:	01 c0       	rjmp	.+2      	; 0x3780 <xTimerGenericCommand+0x96>
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
    377e:	80 e0       	ldi	r24, 0x00	; 0
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xReturn;
}
    3780:	27 96       	adiw	r28, 0x07	; 7
    3782:	0f b6       	in	r0, 0x3f	; 63
    3784:	f8 94       	cli
    3786:	de bf       	out	0x3e, r29	; 62
    3788:	0f be       	out	0x3f, r0	; 63
    378a:	cd bf       	out	0x3d, r28	; 61
    378c:	df 91       	pop	r29
    378e:	cf 91       	pop	r28
    3790:	1f 91       	pop	r17
    3792:	0f 91       	pop	r16
    3794:	ff 90       	pop	r15
    3796:	ef 90       	pop	r14
    3798:	df 90       	pop	r13
    379a:	cf 90       	pop	r12
    379c:	bf 90       	pop	r11
    379e:	af 90       	pop	r10
    37a0:	9f 90       	pop	r9
    37a2:	8f 90       	pop	r8
    37a4:	08 95       	ret

000037a6 <prvSampleTimeNow>:
    return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    37a6:	2f 92       	push	r2
    37a8:	3f 92       	push	r3
    37aa:	4f 92       	push	r4
    37ac:	5f 92       	push	r5
    37ae:	6f 92       	push	r6
    37b0:	7f 92       	push	r7
    37b2:	8f 92       	push	r8
    37b4:	9f 92       	push	r9
    37b6:	af 92       	push	r10
    37b8:	bf 92       	push	r11
    37ba:	cf 92       	push	r12
    37bc:	df 92       	push	r13
    37be:	ef 92       	push	r14
    37c0:	ff 92       	push	r15
    37c2:	0f 93       	push	r16
    37c4:	1f 93       	push	r17
    37c6:	cf 93       	push	r28
    37c8:	df 93       	push	r29
    37ca:	1c 01       	movw	r2, r24
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

    xTimeNow = xTaskGetTickCount();
    37cc:	cd d8       	rcall	.-3686   	; 0x2968 <xTaskGetTickCount>
    37ce:	2b 01       	movw	r4, r22
    37d0:	3c 01       	movw	r6, r24

    if( xTimeNow < xLastTime )
    37d2:	80 91 e1 18 	lds	r24, 0x18E1	; 0x8018e1 <xLastTime.2432>
    37d6:	90 91 e2 18 	lds	r25, 0x18E2	; 0x8018e2 <xLastTime.2432+0x1>
    37da:	a0 91 e3 18 	lds	r26, 0x18E3	; 0x8018e3 <xLastTime.2432+0x2>
    37de:	b0 91 e4 18 	lds	r27, 0x18E4	; 0x8018e4 <xLastTime.2432+0x3>
    37e2:	48 16       	cp	r4, r24
    37e4:	59 06       	cpc	r5, r25
    37e6:	6a 06       	cpc	r6, r26
    37e8:	7b 06       	cpc	r7, r27
    37ea:	08 f0       	brcs	.+2      	; 0x37ee <prvSampleTimeNow+0x48>
    37ec:	53 c0       	rjmp	.+166    	; 0x3894 <prvSampleTimeNow+0xee>
    37ee:	3b c0       	rjmp	.+118    	; 0x3866 <prvSampleTimeNow+0xc0>
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    {
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    37f0:	07 80       	ldd	r0, Z+7	; 0x07
    37f2:	f0 85       	ldd	r31, Z+8	; 0x08
    37f4:	e0 2d       	mov	r30, r0
    37f6:	80 80       	ld	r8, Z
    37f8:	91 80       	ldd	r9, Z+1	; 0x01
    37fa:	a2 80       	ldd	r10, Z+2	; 0x02
    37fc:	b3 80       	ldd	r11, Z+3	; 0x03

        /* Remove the timer from the list. */
        pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    37fe:	c0 85       	ldd	r28, Z+8	; 0x08
    3800:	d1 85       	ldd	r29, Z+9	; 0x09
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3802:	8e 01       	movw	r16, r28
    3804:	0e 5f       	subi	r16, 0xFE	; 254
    3806:	1f 4f       	sbci	r17, 0xFF	; 255
    3808:	c8 01       	movw	r24, r16
    380a:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* Execute its callback, then send a command to restart the timer if
        it is an auto-reload timer.  It cannot be restarted here as the lists
        have not yet been switched. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    380e:	ec 89       	ldd	r30, Y+20	; 0x14
    3810:	fd 89       	ldd	r31, Y+21	; 0x15
    3812:	ce 01       	movw	r24, r28
    3814:	19 95       	eicall

        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    3816:	8f 89       	ldd	r24, Y+23	; 0x17
    3818:	82 ff       	sbrs	r24, 2
    381a:	25 c0       	rjmp	.+74     	; 0x3866 <prvSampleTimeNow+0xc0>
            the timer going into the same timer list then it has already expired
            and the timer should be re-inserted into the current list so it is
            processed again within this loop.  Otherwise a command should be sent
            to restart the timer to ensure it is only inserted into a list after
            the lists have been swapped. */
            xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    381c:	8e 85       	ldd	r24, Y+14	; 0x0e
    381e:	9f 85       	ldd	r25, Y+15	; 0x0f
    3820:	a8 89       	ldd	r26, Y+16	; 0x10
    3822:	b9 89       	ldd	r27, Y+17	; 0x11
    3824:	88 0d       	add	r24, r8
    3826:	99 1d       	adc	r25, r9
    3828:	aa 1d       	adc	r26, r10
    382a:	bb 1d       	adc	r27, r11
            if( xReloadTime > xNextExpireTime )
    382c:	88 16       	cp	r8, r24
    382e:	99 06       	cpc	r9, r25
    3830:	aa 06       	cpc	r10, r26
    3832:	bb 06       	cpc	r11, r27
    3834:	70 f4       	brcc	.+28     	; 0x3852 <prvSampleTimeNow+0xac>
            {
                listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    3836:	8a 83       	std	Y+2, r24	; 0x02
    3838:	9b 83       	std	Y+3, r25	; 0x03
    383a:	ac 83       	std	Y+4, r26	; 0x04
    383c:	bd 83       	std	Y+5, r27	; 0x05
                listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    383e:	db 87       	std	Y+11, r29	; 0x0b
    3840:	ca 87       	std	Y+10, r28	; 0x0a
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    3842:	b8 01       	movw	r22, r16
    3844:	80 91 eb 18 	lds	r24, 0x18EB	; 0x8018eb <pxCurrentTimerList>
    3848:	90 91 ec 18 	lds	r25, 0x18EC	; 0x8018ec <pxCurrentTimerList+0x1>
    384c:	0e 94 3f 0a 	call	0x147e	; 0x147e <vListInsert>
    3850:	0a c0       	rjmp	.+20     	; 0x3866 <prvSampleTimeNow+0xc0>
            }
            else
            {
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    3852:	c1 2c       	mov	r12, r1
    3854:	d1 2c       	mov	r13, r1
    3856:	76 01       	movw	r14, r12
    3858:	00 e0       	ldi	r16, 0x00	; 0
    385a:	10 e0       	ldi	r17, 0x00	; 0
    385c:	a5 01       	movw	r20, r10
    385e:	94 01       	movw	r18, r8
    3860:	60 e0       	ldi	r22, 0x00	; 0
    3862:	ce 01       	movw	r24, r28
    3864:	42 df       	rcall	.-380    	; 0x36ea <xTimerGenericCommand>

    /* The tick count has overflowed.  The timer lists must be switched.
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    3866:	e0 91 eb 18 	lds	r30, 0x18EB	; 0x8018eb <pxCurrentTimerList>
    386a:	f0 91 ec 18 	lds	r31, 0x18EC	; 0x8018ec <pxCurrentTimerList+0x1>
    386e:	80 81       	ld	r24, Z
    3870:	81 11       	cpse	r24, r1
    3872:	be cf       	rjmp	.-132    	; 0x37f0 <prvSampleTimeNow+0x4a>
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxTemp = pxCurrentTimerList;
    pxCurrentTimerList = pxOverflowTimerList;
    3874:	80 91 e9 18 	lds	r24, 0x18E9	; 0x8018e9 <pxOverflowTimerList>
    3878:	90 91 ea 18 	lds	r25, 0x18EA	; 0x8018ea <pxOverflowTimerList+0x1>
    387c:	90 93 ec 18 	sts	0x18EC, r25	; 0x8018ec <pxCurrentTimerList+0x1>
    3880:	80 93 eb 18 	sts	0x18EB, r24	; 0x8018eb <pxCurrentTimerList>
    pxOverflowTimerList = pxTemp;
    3884:	f0 93 ea 18 	sts	0x18EA, r31	; 0x8018ea <pxOverflowTimerList+0x1>
    3888:	e0 93 e9 18 	sts	0x18E9, r30	; 0x8018e9 <pxOverflowTimerList>
    xTimeNow = xTaskGetTickCount();

    if( xTimeNow < xLastTime )
    {
        prvSwitchTimerLists();
        *pxTimerListsWereSwitched = pdTRUE;
    388c:	81 e0       	ldi	r24, 0x01	; 1
    388e:	f1 01       	movw	r30, r2
    3890:	80 83       	st	Z, r24
    3892:	02 c0       	rjmp	.+4      	; 0x3898 <prvSampleTimeNow+0xf2>
    }
    else
    {
        *pxTimerListsWereSwitched = pdFALSE;
    3894:	f1 01       	movw	r30, r2
    3896:	10 82       	st	Z, r1
    }

    xLastTime = xTimeNow;
    3898:	40 92 e1 18 	sts	0x18E1, r4	; 0x8018e1 <xLastTime.2432>
    389c:	50 92 e2 18 	sts	0x18E2, r5	; 0x8018e2 <xLastTime.2432+0x1>
    38a0:	60 92 e3 18 	sts	0x18E3, r6	; 0x8018e3 <xLastTime.2432+0x2>
    38a4:	70 92 e4 18 	sts	0x18E4, r7	; 0x8018e4 <xLastTime.2432+0x3>

    return xTimeNow;
}
    38a8:	c3 01       	movw	r24, r6
    38aa:	b2 01       	movw	r22, r4
    38ac:	df 91       	pop	r29
    38ae:	cf 91       	pop	r28
    38b0:	1f 91       	pop	r17
    38b2:	0f 91       	pop	r16
    38b4:	ff 90       	pop	r15
    38b6:	ef 90       	pop	r14
    38b8:	df 90       	pop	r13
    38ba:	cf 90       	pop	r12
    38bc:	bf 90       	pop	r11
    38be:	af 90       	pop	r10
    38c0:	9f 90       	pop	r9
    38c2:	8f 90       	pop	r8
    38c4:	7f 90       	pop	r7
    38c6:	6f 90       	pop	r6
    38c8:	5f 90       	pop	r5
    38ca:	4f 90       	pop	r4
    38cc:	3f 90       	pop	r3
    38ce:	2f 90       	pop	r2
    38d0:	08 95       	ret

000038d2 <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    38d2:	08 95       	ret

000038d4 <vApplicationMallocFailedHook>:
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    38d4:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    38d6:	2f 9a       	sbi	0x05, 7	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    38d8:	2f ef       	ldi	r18, 0xFF	; 255
    38da:	80 e7       	ldi	r24, 0x70	; 112
    38dc:	92 e0       	ldi	r25, 0x02	; 2
    38de:	21 50       	subi	r18, 0x01	; 1
    38e0:	80 40       	sbci	r24, 0x00	; 0
    38e2:	90 40       	sbci	r25, 0x00	; 0
    38e4:	e1 f7       	brne	.-8      	; 0x38de <vApplicationMallocFailedHook+0xa>
    38e6:	00 c0       	rjmp	.+0      	; 0x38e8 <vApplicationMallocFailedHook+0x14>
    38e8:	00 00       	nop
    for(;;)
    {
        _delay_ms(50);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED fast blink.
    38ea:	1f 9a       	sbi	0x03, 7	; 3
    38ec:	f5 cf       	rjmp	.-22     	; 0x38d8 <vApplicationMallocFailedHook+0x4>

000038ee <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook( TaskHandle_t xTask, portCHAR *pcTaskName ) __attribute__((weak));

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)), portCHAR *pcTaskName __attribute__((unused))  )
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    38ee:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    38f0:	2f 9a       	sbi	0x05, 7	; 5
    38f2:	2f ef       	ldi	r18, 0xFF	; 255
    38f4:	87 ea       	ldi	r24, 0xA7	; 167
    38f6:	91 e6       	ldi	r25, 0x61	; 97
    38f8:	21 50       	subi	r18, 0x01	; 1
    38fa:	80 40       	sbci	r24, 0x00	; 0
    38fc:	90 40       	sbci	r25, 0x00	; 0
    38fe:	e1 f7       	brne	.-8      	; 0x38f8 <vApplicationStackOverflowHook+0xa>
    3900:	00 c0       	rjmp	.+0      	; 0x3902 <vApplicationStackOverflowHook+0x14>
    3902:	00 00       	nop
    for(;;)
    {
        _delay_ms(2000);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED slow blink.
    3904:	1f 9a       	sbi	0x03, 7	; 3
    3906:	f5 cf       	rjmp	.-22     	; 0x38f2 <vApplicationStackOverflowHook+0x4>

00003908 <create_tasks_and_semaphores>:
	hih8120Create();
	
}

void doStuff()
{
    3908:	8f 92       	push	r8
    390a:	9f 92       	push	r9
    390c:	af 92       	push	r10
    390e:	bf 92       	push	r11
    3910:	cf 92       	push	r12
    3912:	df 92       	push	r13
    3914:	ef 92       	push	r14
    3916:	ff 92       	push	r15
    3918:	0f 93       	push	r16
    391a:	1f 93       	push	r17
    391c:	cf 93       	push	r28
    391e:	df 93       	push	r29
    3920:	0e 94 66 07 	call	0xecc	; 0xecc <xEventGroupCreate>
    3924:	90 93 71 1a 	sts	0x1A71, r25	; 0x801a71 <startMeasureEventGroup+0x1>
    3928:	80 93 70 1a 	sts	0x1A70, r24	; 0x801a70 <startMeasureEventGroup>
    392c:	0e 94 66 07 	call	0xecc	; 0xecc <xEventGroupCreate>
    3930:	90 93 57 1a 	sts	0x1A57, r25	; 0x801a57 <readyEventGroup+0x1>
    3934:	80 93 56 1a 	sts	0x1A56, r24	; 0x801a56 <readyEventGroup>
    3938:	41 e0       	ldi	r20, 0x01	; 1
    393a:	60 e0       	ldi	r22, 0x00	; 0
    393c:	70 e0       	ldi	r23, 0x00	; 0
    393e:	84 e6       	ldi	r24, 0x64	; 100
    3940:	90 e0       	ldi	r25, 0x00	; 0
    3942:	0e 94 b8 10 	call	0x2170	; 0x2170 <xStreamBufferGenericCreate>
    3946:	90 93 55 1a 	sts	0x1A55, r25	; 0x801a55 <xMessageBuffer+0x1>
    394a:	80 93 54 1a 	sts	0x1A54, r24	; 0x801a54 <xMessageBuffer>
    394e:	0e 94 30 03 	call	0x660	; 0x660 <configuration_create>
    3952:	60 91 54 1a 	lds	r22, 0x1A54	; 0x801a54 <xMessageBuffer>
    3956:	70 91 55 1a 	lds	r23, 0x1A55	; 0x801a55 <xMessageBuffer+0x1>
    395a:	81 e0       	ldi	r24, 0x01	; 1
    395c:	0e 94 ed 05 	call	0xbda	; 0xbda <lora_UpLinkHandler_create>
    3960:	e0 90 56 1a 	lds	r14, 0x1A56	; 0x801a56 <readyEventGroup>
    3964:	f0 90 57 1a 	lds	r15, 0x1A57	; 0x801a57 <readyEventGroup+0x1>
    3968:	40 91 70 1a 	lds	r20, 0x1A70	; 0x801a70 <startMeasureEventGroup>
    396c:	50 91 71 1a 	lds	r21, 0x1A71	; 0x801a71 <startMeasureEventGroup+0x1>
    3970:	a1 2c       	mov	r10, r1
    3972:	b1 2c       	mov	r11, r1
    3974:	65 01       	movw	r12, r10
    3976:	68 94       	set
    3978:	a4 f8       	bld	r10, 4
    397a:	01 e0       	ldi	r16, 0x01	; 1
    397c:	10 e0       	ldi	r17, 0x00	; 0
    397e:	20 e0       	ldi	r18, 0x00	; 0
    3980:	30 e0       	ldi	r19, 0x00	; 0
    3982:	60 ec       	ldi	r22, 0xC0	; 192
    3984:	81 e0       	ldi	r24, 0x01	; 1
    3986:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <humAndTempReader_create>
    398a:	c8 2f       	mov	r28, r24
    398c:	d9 2f       	mov	r29, r25
    398e:	e0 90 56 1a 	lds	r14, 0x1A56	; 0x801a56 <readyEventGroup>
    3992:	f0 90 57 1a 	lds	r15, 0x1A57	; 0x801a57 <readyEventGroup+0x1>
    3996:	40 91 70 1a 	lds	r20, 0x1A70	; 0x801a70 <startMeasureEventGroup>
    399a:	50 91 71 1a 	lds	r21, 0x1A71	; 0x801a71 <startMeasureEventGroup+0x1>
    399e:	a1 2c       	mov	r10, r1
    39a0:	b1 2c       	mov	r11, r1
    39a2:	65 01       	movw	r12, r10
    39a4:	68 94       	set
    39a6:	a5 f8       	bld	r10, 5
    39a8:	02 e0       	ldi	r16, 0x02	; 2
    39aa:	10 e0       	ldi	r17, 0x00	; 0
    39ac:	20 e0       	ldi	r18, 0x00	; 0
    39ae:	30 e0       	ldi	r19, 0x00	; 0
    39b0:	60 ec       	ldi	r22, 0xC0	; 192
    39b2:	81 e0       	ldi	r24, 0x01	; 1
    39b4:	0e 94 72 02 	call	0x4e4	; 0x4e4 <co2Reader_create>
    39b8:	e0 90 56 1a 	lds	r14, 0x1A56	; 0x801a56 <readyEventGroup>
    39bc:	f0 90 57 1a 	lds	r15, 0x1A57	; 0x801a57 <readyEventGroup+0x1>
    39c0:	40 91 70 1a 	lds	r20, 0x1A70	; 0x801a70 <startMeasureEventGroup>
    39c4:	50 91 71 1a 	lds	r21, 0x1A71	; 0x801a71 <startMeasureEventGroup+0x1>
    39c8:	20 91 55 1a 	lds	r18, 0x1A55	; 0x801a55 <xMessageBuffer+0x1>
    39cc:	2f 93       	push	r18
    39ce:	20 91 54 1a 	lds	r18, 0x1A54	; 0x801a54 <xMessageBuffer>
    39d2:	2f 93       	push	r18
    39d4:	df 93       	push	r29
    39d6:	cf 93       	push	r28
    39d8:	4c 01       	movw	r8, r24
    39da:	0f 2e       	mov	r0, r31
    39dc:	f0 e3       	ldi	r31, 0x30	; 48
    39de:	af 2e       	mov	r10, r31
    39e0:	b1 2c       	mov	r11, r1
    39e2:	c1 2c       	mov	r12, r1
    39e4:	d1 2c       	mov	r13, r1
    39e6:	f0 2d       	mov	r31, r0
    39e8:	03 e0       	ldi	r16, 0x03	; 3
    39ea:	10 e0       	ldi	r17, 0x00	; 0
    39ec:	20 e0       	ldi	r18, 0x00	; 0
    39ee:	30 e0       	ldi	r19, 0x00	; 0
    39f0:	60 ec       	ldi	r22, 0xC0	; 192
    39f2:	82 e0       	ldi	r24, 0x02	; 2
    39f4:	0e 94 86 03 	call	0x70c	; 0x70c <device_create>
    39f8:	0f 90       	pop	r0
    39fa:	0f 90       	pop	r0
    39fc:	0f 90       	pop	r0
    39fe:	0f 90       	pop	r0
    3a00:	df 91       	pop	r29
    3a02:	cf 91       	pop	r28
    3a04:	1f 91       	pop	r17
    3a06:	0f 91       	pop	r16
    3a08:	ff 90       	pop	r15
    3a0a:	ef 90       	pop	r14
    3a0c:	df 90       	pop	r13
    3a0e:	cf 90       	pop	r12
    3a10:	bf 90       	pop	r11
    3a12:	af 90       	pop	r10
    3a14:	9f 90       	pop	r9
    3a16:	8f 90       	pop	r8
    3a18:	08 95       	ret

00003a1a <initialiseSystem>:
    3a1a:	81 b1       	in	r24, 0x01	; 1
    3a1c:	81 68       	ori	r24, 0x81	; 129
    3a1e:	81 b9       	out	0x01, r24	; 1
    3a20:	0e 94 50 07 	call	0xea0	; 0xea0 <trace_init>
    3a24:	80 e0       	ldi	r24, 0x00	; 0
    3a26:	0e 94 1d 28 	call	0x503a	; 0x503a <stdioCreate>
    3a2a:	85 e0       	ldi	r24, 0x05	; 5
    3a2c:	0f d0       	rcall	.+30     	; 0x3a4c <hal_create>
    3a2e:	60 e0       	ldi	r22, 0x00	; 0
    3a30:	70 e0       	ldi	r23, 0x00	; 0
    3a32:	81 e0       	ldi	r24, 0x01	; 1
    3a34:	c3 d3       	rcall	.+1926   	; 0x41bc <lora_driver_create>
    3a36:	69 c0       	rjmp	.+210    	; 0x3b0a <hih8120Create>
    3a38:	08 95       	ret

00003a3a <main>:
	//bytesToSend=xMessageBufferSend(xMessageBuffer,(void*) &payload,sizeof(payload),portMAX_DELAY);
}
/*-----------------------------------------------------------*/
int main(void)
{
	initialiseSystem(); // Must be done as the very first thing!!
    3a3a:	ef df       	rcall	.-34     	; 0x3a1a <initialiseSystem>
	printf("Program Started!!\n");
    3a3c:	87 e1       	ldi	r24, 0x17	; 23
    3a3e:	95 e0       	ldi	r25, 0x05	; 5
    3a40:	0e 94 ca 2d 	call	0x5b94	; 0x5b94 <puts>
	create_tasks_and_semaphores();
    3a44:	61 df       	rcall	.-318    	; 0x3908 <create_tasks_and_semaphores>
	vTaskStartScheduler(); // Initialise and run the freeRTOS scheduler. Execution should never return from here.
    3a46:	0e 94 72 14 	call	0x28e4	; 0x28e4 <vTaskStartScheduler>
    3a4a:	ff cf       	rjmp	.-2      	; 0x3a4a <main+0x10>

00003a4c <hal_create>:
    3a4c:	e2 e7       	ldi	r30, 0x72	; 114
    3a4e:	fa e1       	ldi	r31, 0x1A	; 26
    3a50:	23 e3       	ldi	r18, 0x33	; 51
    3a52:	34 e2       	ldi	r19, 0x24	; 36
    3a54:	31 83       	std	Z+1, r19	; 0x01
    3a56:	20 83       	st	Z, r18
    3a58:	26 e3       	ldi	r18, 0x36	; 54
    3a5a:	34 e2       	ldi	r19, 0x24	; 36
    3a5c:	33 83       	std	Z+3, r19	; 0x03
    3a5e:	22 83       	std	Z+2, r18	; 0x02
    3a60:	21 e4       	ldi	r18, 0x41	; 65
    3a62:	34 e2       	ldi	r19, 0x24	; 36
    3a64:	35 83       	std	Z+5, r19	; 0x05
    3a66:	24 83       	std	Z+4, r18	; 0x04
    3a68:	25 e4       	ldi	r18, 0x45	; 69
    3a6a:	34 e2       	ldi	r19, 0x24	; 36
    3a6c:	37 83       	std	Z+7, r19	; 0x07
    3a6e:	26 83       	std	Z+6, r18	; 0x06
    3a70:	2b e4       	ldi	r18, 0x4B	; 75
    3a72:	34 e2       	ldi	r19, 0x24	; 36
    3a74:	31 87       	std	Z+9, r19	; 0x09
    3a76:	20 87       	std	Z+8, r18	; 0x08
    3a78:	27 e5       	ldi	r18, 0x57	; 87
    3a7a:	34 e2       	ldi	r19, 0x24	; 36
    3a7c:	33 87       	std	Z+11, r19	; 0x0b
    3a7e:	22 87       	std	Z+10, r18	; 0x0a
    3a80:	2c e5       	ldi	r18, 0x5C	; 92
    3a82:	34 e2       	ldi	r19, 0x24	; 36
    3a84:	35 87       	std	Z+13, r19	; 0x0d
    3a86:	24 87       	std	Z+12, r18	; 0x0c
    3a88:	28 e6       	ldi	r18, 0x68	; 104
    3a8a:	34 e2       	ldi	r19, 0x24	; 36
    3a8c:	37 87       	std	Z+15, r19	; 0x0f
    3a8e:	26 87       	std	Z+14, r18	; 0x0e
    3a90:	28 e4       	ldi	r18, 0x48	; 72
    3a92:	34 e2       	ldi	r19, 0x24	; 36
    3a94:	31 8b       	std	Z+17, r19	; 0x11
    3a96:	20 8b       	std	Z+16, r18	; 0x10
    3a98:	2d e6       	ldi	r18, 0x6D	; 109
    3a9a:	34 e2       	ldi	r19, 0x24	; 36
    3a9c:	33 8b       	std	Z+19, r19	; 0x13
    3a9e:	22 8b       	std	Z+18, r18	; 0x12
    3aa0:	2a e7       	ldi	r18, 0x7A	; 122
    3aa2:	34 e2       	ldi	r19, 0x24	; 36
    3aa4:	35 8b       	std	Z+21, r19	; 0x15
    3aa6:	24 8b       	std	Z+20, r18	; 0x14
    3aa8:	68 2f       	mov	r22, r24
    3aaa:	cf 01       	movw	r24, r30
    3aac:	53 c1       	rjmp	.+678    	; 0x3d54 <led_create>
    3aae:	08 95       	ret

00003ab0 <_hihTwiCallback>:
    3ab0:	65 30       	cpi	r22, 0x05	; 5
    3ab2:	f1 f4       	brne	.+60     	; 0x3af0 <_hihTwiCallback+0x40>
    3ab4:	fa 01       	movw	r30, r20
    3ab6:	80 81       	ld	r24, Z
    3ab8:	8f 73       	andi	r24, 0x3F	; 63
    3aba:	90 e0       	ldi	r25, 0x00	; 0
    3abc:	98 2f       	mov	r25, r24
    3abe:	88 27       	eor	r24, r24
    3ac0:	21 81       	ldd	r18, Z+1	; 0x01
    3ac2:	82 2b       	or	r24, r18
    3ac4:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <_hum+0x1>
    3ac8:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <_hum>
    3acc:	82 81       	ldd	r24, Z+2	; 0x02
    3ace:	f0 e4       	ldi	r31, 0x40	; 64
    3ad0:	8f 9f       	mul	r24, r31
    3ad2:	c0 01       	movw	r24, r0
    3ad4:	11 24       	eor	r1, r1
    3ad6:	fa 01       	movw	r30, r20
    3ad8:	23 81       	ldd	r18, Z+3	; 0x03
    3ada:	26 95       	lsr	r18
    3adc:	26 95       	lsr	r18
    3ade:	82 2b       	or	r24, r18
    3ae0:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <_temp+0x1>
    3ae4:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <_temp>
    3ae8:	81 e0       	ldi	r24, 0x01	; 1
    3aea:	80 93 03 19 	sts	0x1903, r24	; 0x801903 <_measuringIsReady>
    3aee:	08 95       	ret
    3af0:	64 30       	cpi	r22, 0x04	; 4
    3af2:	51 f0       	breq	.+20     	; 0x3b08 <_hihTwiCallback+0x58>
    3af4:	80 e0       	ldi	r24, 0x00	; 0
    3af6:	90 e4       	ldi	r25, 0x40	; 64
    3af8:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <_temp+0x1>
    3afc:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <_temp>
    3b00:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <_hum+0x1>
    3b04:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <_hum>
    3b08:	08 95       	ret

00003b0a <hih8120Create>:
    3b0a:	0f 93       	push	r16
    3b0c:	1f 93       	push	r17
    3b0e:	08 e5       	ldi	r16, 0x58	; 88
    3b10:	1d e1       	ldi	r17, 0x1D	; 29
    3b12:	20 e0       	ldi	r18, 0x00	; 0
    3b14:	34 e2       	ldi	r19, 0x24	; 36
    3b16:	44 ef       	ldi	r20, 0xF4	; 244
    3b18:	50 e0       	ldi	r21, 0x00	; 0
    3b1a:	60 e0       	ldi	r22, 0x00	; 0
    3b1c:	87 e2       	ldi	r24, 0x27	; 39
    3b1e:	0e 94 57 28 	call	0x50ae	; 0x50ae <twiCreate>
    3b22:	90 93 05 19 	sts	0x1905, r25	; 0x801905 <_hih8120Handler+0x1>
    3b26:	80 93 04 19 	sts	0x1904, r24	; 0x801904 <_hih8120Handler>
    3b2a:	21 e0       	ldi	r18, 0x01	; 1
    3b2c:	89 2b       	or	r24, r25
    3b2e:	09 f0       	breq	.+2      	; 0x3b32 <hih8120Create+0x28>
    3b30:	20 e0       	ldi	r18, 0x00	; 0
    3b32:	82 2f       	mov	r24, r18
    3b34:	1f 91       	pop	r17
    3b36:	0f 91       	pop	r16
    3b38:	08 95       	ret

00003b3a <hih8120IsReady>:
    3b3a:	80 91 03 19 	lds	r24, 0x1903	; 0x801903 <_measuringIsReady>
    3b3e:	08 95       	ret

00003b40 <hih8120Wakeup>:
    3b40:	80 91 04 19 	lds	r24, 0x1904	; 0x801904 <_hih8120Handler>
    3b44:	90 91 05 19 	lds	r25, 0x1905	; 0x801905 <_hih8120Handler+0x1>
    3b48:	00 97       	sbiw	r24, 0x00	; 0
    3b4a:	59 f0       	breq	.+22     	; 0x3b62 <hih8120Wakeup+0x22>
    3b4c:	40 e0       	ldi	r20, 0x00	; 0
    3b4e:	60 e0       	ldi	r22, 0x00	; 0
    3b50:	70 e0       	ldi	r23, 0x00	; 0
    3b52:	0e 94 a8 28 	call	0x5150	; 0x5150 <twiTransmit>
    3b56:	84 30       	cpi	r24, 0x04	; 4
    3b58:	31 f4       	brne	.+12     	; 0x3b66 <hih8120Wakeup+0x26>
    3b5a:	10 92 03 19 	sts	0x1903, r1	; 0x801903 <_measuringIsReady>
    3b5e:	80 e0       	ldi	r24, 0x00	; 0
    3b60:	08 95       	ret
    3b62:	82 e0       	ldi	r24, 0x02	; 2
    3b64:	08 95       	ret
    3b66:	83 e0       	ldi	r24, 0x03	; 3
    3b68:	08 95       	ret

00003b6a <hih8120Meassure>:
    3b6a:	80 91 04 19 	lds	r24, 0x1904	; 0x801904 <_hih8120Handler>
    3b6e:	90 91 05 19 	lds	r25, 0x1905	; 0x801905 <_hih8120Handler+0x1>
    3b72:	00 97       	sbiw	r24, 0x00	; 0
    3b74:	39 f0       	breq	.+14     	; 0x3b84 <hih8120Meassure+0x1a>
    3b76:	64 e0       	ldi	r22, 0x04	; 4
    3b78:	0e 94 f4 28 	call	0x51e8	; 0x51e8 <twiReceive>
    3b7c:	85 30       	cpi	r24, 0x05	; 5
    3b7e:	21 f0       	breq	.+8      	; 0x3b88 <hih8120Meassure+0x1e>
    3b80:	83 e0       	ldi	r24, 0x03	; 3
    3b82:	08 95       	ret
    3b84:	82 e0       	ldi	r24, 0x02	; 2
    3b86:	08 95       	ret
    3b88:	80 e0       	ldi	r24, 0x00	; 0
    3b8a:	08 95       	ret

00003b8c <hih8120GetHumidity>:
    3b8c:	60 91 08 02 	lds	r22, 0x0208	; 0x800208 <_hum>
    3b90:	70 91 09 02 	lds	r23, 0x0209	; 0x800209 <_hum+0x1>
    3b94:	80 e0       	ldi	r24, 0x00	; 0
    3b96:	90 e0       	ldi	r25, 0x00	; 0
    3b98:	0e 94 fe 2a 	call	0x55fc	; 0x55fc <__floatunsisf>
    3b9c:	20 e0       	ldi	r18, 0x00	; 0
    3b9e:	30 e0       	ldi	r19, 0x00	; 0
    3ba0:	48 ec       	ldi	r20, 0xC8	; 200
    3ba2:	52 e4       	ldi	r21, 0x42	; 66
    3ba4:	0e 94 8c 2b 	call	0x5718	; 0x5718 <__mulsf3>
    3ba8:	20 e0       	ldi	r18, 0x00	; 0
    3baa:	38 ef       	ldi	r19, 0xF8	; 248
    3bac:	4f e7       	ldi	r20, 0x7F	; 127
    3bae:	56 e4       	ldi	r21, 0x46	; 70
    3bb0:	0c 94 65 2a 	jmp	0x54ca	; 0x54ca <__divsf3>
    3bb4:	08 95       	ret

00003bb6 <hih8120GetHumidityPercent_x10>:
    3bb6:	ea df       	rcall	.-44     	; 0x3b8c <hih8120GetHumidity>
    3bb8:	20 e0       	ldi	r18, 0x00	; 0
    3bba:	30 e0       	ldi	r19, 0x00	; 0
    3bbc:	40 e2       	ldi	r20, 0x20	; 32
    3bbe:	51 e4       	ldi	r21, 0x41	; 65
    3bc0:	0e 94 8c 2b 	call	0x5718	; 0x5718 <__mulsf3>
    3bc4:	0e 94 d2 2a 	call	0x55a4	; 0x55a4 <__fixunssfsi>
    3bc8:	cb 01       	movw	r24, r22
    3bca:	08 95       	ret

00003bcc <hih8120GetTemperature>:
    3bcc:	60 91 06 02 	lds	r22, 0x0206	; 0x800206 <_temp>
    3bd0:	70 91 07 02 	lds	r23, 0x0207	; 0x800207 <_temp+0x1>
    3bd4:	80 e0       	ldi	r24, 0x00	; 0
    3bd6:	90 e0       	ldi	r25, 0x00	; 0
    3bd8:	0e 94 fe 2a 	call	0x55fc	; 0x55fc <__floatunsisf>
    3bdc:	20 e0       	ldi	r18, 0x00	; 0
    3bde:	30 e0       	ldi	r19, 0x00	; 0
    3be0:	45 e2       	ldi	r20, 0x25	; 37
    3be2:	53 e4       	ldi	r21, 0x43	; 67
    3be4:	0e 94 8c 2b 	call	0x5718	; 0x5718 <__mulsf3>
    3be8:	20 e0       	ldi	r18, 0x00	; 0
    3bea:	38 ef       	ldi	r19, 0xF8	; 248
    3bec:	4f e7       	ldi	r20, 0x7F	; 127
    3bee:	56 e4       	ldi	r21, 0x46	; 70
    3bf0:	0e 94 65 2a 	call	0x54ca	; 0x54ca <__divsf3>
    3bf4:	20 e0       	ldi	r18, 0x00	; 0
    3bf6:	30 e0       	ldi	r19, 0x00	; 0
    3bf8:	40 e2       	ldi	r20, 0x20	; 32
    3bfa:	52 e4       	ldi	r21, 0x42	; 66
    3bfc:	0c 94 00 2a 	jmp	0x5400	; 0x5400 <__subsf3>
    3c00:	08 95       	ret

00003c02 <hih8120GetTemperature_x10>:
    3c02:	e4 df       	rcall	.-56     	; 0x3bcc <hih8120GetTemperature>
    3c04:	20 e0       	ldi	r18, 0x00	; 0
    3c06:	30 e0       	ldi	r19, 0x00	; 0
    3c08:	40 e2       	ldi	r20, 0x20	; 32
    3c0a:	51 e4       	ldi	r21, 0x41	; 65
    3c0c:	0e 94 8c 2b 	call	0x5718	; 0x5718 <__mulsf3>
    3c10:	0e 94 cd 2a 	call	0x559a	; 0x559a <__fixsfsi>
    3c14:	cb 01       	movw	r24, r22
    3c16:	08 95       	ret

00003c18 <_turn_off>:
    3c18:	cf 93       	push	r28
    3c1a:	df 93       	push	r29
    3c1c:	90 e0       	ldi	r25, 0x00	; 0
    3c1e:	fc 01       	movw	r30, r24
    3c20:	ee 0f       	add	r30, r30
    3c22:	ff 1f       	adc	r31, r31
    3c24:	e8 0f       	add	r30, r24
    3c26:	f9 1f       	adc	r31, r25
    3c28:	ee 0f       	add	r30, r30
    3c2a:	ff 1f       	adc	r31, r31
    3c2c:	ea 5f       	subi	r30, 0xFA	; 250
    3c2e:	f6 4e       	sbci	r31, 0xE6	; 230
    3c30:	23 81       	ldd	r18, Z+3	; 0x03
    3c32:	21 11       	cpse	r18, r1
    3c34:	0a c0       	rjmp	.+20     	; 0x3c4a <_turn_off+0x32>
    3c36:	ef 01       	movw	r28, r30
    3c38:	e0 91 7a 1a 	lds	r30, 0x1A7A	; 0x801a7a <register_access+0x8>
    3c3c:	f0 91 7b 1a 	lds	r31, 0x1A7B	; 0x801a7b <register_access+0x9>
    3c40:	6a 81       	ldd	r22, Y+2	; 0x02
    3c42:	88 81       	ld	r24, Y
    3c44:	99 81       	ldd	r25, Y+1	; 0x01
    3c46:	19 95       	eicall
    3c48:	12 c0       	rjmp	.+36     	; 0x3c6e <_turn_off+0x56>
    3c4a:	dc 01       	movw	r26, r24
    3c4c:	aa 0f       	add	r26, r26
    3c4e:	bb 1f       	adc	r27, r27
    3c50:	ed 01       	movw	r28, r26
    3c52:	c8 0f       	add	r28, r24
    3c54:	d9 1f       	adc	r29, r25
    3c56:	cc 0f       	add	r28, r28
    3c58:	dd 1f       	adc	r29, r29
    3c5a:	ca 5f       	subi	r28, 0xFA	; 250
    3c5c:	d6 4e       	sbci	r29, 0xE6	; 230
    3c5e:	e0 91 84 1a 	lds	r30, 0x1A84	; 0x801a84 <register_access+0x12>
    3c62:	f0 91 85 1a 	lds	r31, 0x1A85	; 0x801a85 <register_access+0x13>
    3c66:	6a 81       	ldd	r22, Y+2	; 0x02
    3c68:	88 81       	ld	r24, Y
    3c6a:	99 81       	ldd	r25, Y+1	; 0x01
    3c6c:	19 95       	eicall
    3c6e:	df 91       	pop	r29
    3c70:	cf 91       	pop	r28
    3c72:	08 95       	ret

00003c74 <_turn_on>:
    3c74:	cf 93       	push	r28
    3c76:	df 93       	push	r29
    3c78:	90 e0       	ldi	r25, 0x00	; 0
    3c7a:	fc 01       	movw	r30, r24
    3c7c:	ee 0f       	add	r30, r30
    3c7e:	ff 1f       	adc	r31, r31
    3c80:	e8 0f       	add	r30, r24
    3c82:	f9 1f       	adc	r31, r25
    3c84:	ee 0f       	add	r30, r30
    3c86:	ff 1f       	adc	r31, r31
    3c88:	ea 5f       	subi	r30, 0xFA	; 250
    3c8a:	f6 4e       	sbci	r31, 0xE6	; 230
    3c8c:	23 81       	ldd	r18, Z+3	; 0x03
    3c8e:	21 11       	cpse	r18, r1
    3c90:	0a c0       	rjmp	.+20     	; 0x3ca6 <_turn_on+0x32>
    3c92:	ef 01       	movw	r28, r30
    3c94:	e0 91 84 1a 	lds	r30, 0x1A84	; 0x801a84 <register_access+0x12>
    3c98:	f0 91 85 1a 	lds	r31, 0x1A85	; 0x801a85 <register_access+0x13>
    3c9c:	6a 81       	ldd	r22, Y+2	; 0x02
    3c9e:	88 81       	ld	r24, Y
    3ca0:	99 81       	ldd	r25, Y+1	; 0x01
    3ca2:	19 95       	eicall
    3ca4:	12 c0       	rjmp	.+36     	; 0x3cca <_turn_on+0x56>
    3ca6:	dc 01       	movw	r26, r24
    3ca8:	aa 0f       	add	r26, r26
    3caa:	bb 1f       	adc	r27, r27
    3cac:	ed 01       	movw	r28, r26
    3cae:	c8 0f       	add	r28, r24
    3cb0:	d9 1f       	adc	r29, r25
    3cb2:	cc 0f       	add	r28, r28
    3cb4:	dd 1f       	adc	r29, r29
    3cb6:	ca 5f       	subi	r28, 0xFA	; 250
    3cb8:	d6 4e       	sbci	r29, 0xE6	; 230
    3cba:	e0 91 7a 1a 	lds	r30, 0x1A7A	; 0x801a7a <register_access+0x8>
    3cbe:	f0 91 7b 1a 	lds	r31, 0x1A7B	; 0x801a7b <register_access+0x9>
    3cc2:	6a 81       	ldd	r22, Y+2	; 0x02
    3cc4:	88 81       	ld	r24, Y
    3cc6:	99 81       	ldd	r25, Y+1	; 0x01
    3cc8:	19 95       	eicall
    3cca:	df 91       	pop	r29
    3ccc:	cf 91       	pop	r28
    3cce:	08 95       	ret

00003cd0 <_hal_led_task>:
    3cd0:	0f 2e       	mov	r0, r31
    3cd2:	f2 e7       	ldi	r31, 0x72	; 114
    3cd4:	cf 2e       	mov	r12, r31
    3cd6:	fa e1       	ldi	r31, 0x1A	; 26
    3cd8:	df 2e       	mov	r13, r31
    3cda:	f0 2d       	mov	r31, r0
    3cdc:	04 e0       	ldi	r16, 0x04	; 4
    3cde:	c6 e0       	ldi	r28, 0x06	; 6
    3ce0:	d9 e1       	ldi	r29, 0x19	; 25
    3ce2:	10 e0       	ldi	r17, 0x00	; 0
    3ce4:	8c 81       	ldd	r24, Y+4	; 0x04
    3ce6:	81 30       	cpi	r24, 0x01	; 1
    3ce8:	69 f0       	breq	.+26     	; 0x3d04 <_hal_led_task+0x34>
    3cea:	e8 f0       	brcs	.+58     	; 0x3d26 <_hal_led_task+0x56>
    3cec:	82 30       	cpi	r24, 0x02	; 2
    3cee:	39 f5       	brne	.+78     	; 0x3d3e <_hal_led_task+0x6e>
    3cf0:	d6 01       	movw	r26, r12
    3cf2:	1c 96       	adiw	r26, 0x0c	; 12
    3cf4:	ed 91       	ld	r30, X+
    3cf6:	fc 91       	ld	r31, X
    3cf8:	1d 97       	sbiw	r26, 0x0d	; 13
    3cfa:	6a 81       	ldd	r22, Y+2	; 0x02
    3cfc:	88 81       	ld	r24, Y
    3cfe:	99 81       	ldd	r25, Y+1	; 0x01
    3d00:	19 95       	eicall
    3d02:	1d c0       	rjmp	.+58     	; 0x3d3e <_hal_led_task+0x6e>
    3d04:	8d 81       	ldd	r24, Y+5	; 0x05
    3d06:	8f 5f       	subi	r24, 0xFF	; 255
    3d08:	8a 30       	cpi	r24, 0x0A	; 10
    3d0a:	10 f4       	brcc	.+4      	; 0x3d10 <_hal_led_task+0x40>
    3d0c:	8d 83       	std	Y+5, r24	; 0x05
    3d0e:	17 c0       	rjmp	.+46     	; 0x3d3e <_hal_led_task+0x6e>
    3d10:	1d 82       	std	Y+5, r1	; 0x05
    3d12:	d6 01       	movw	r26, r12
    3d14:	1c 96       	adiw	r26, 0x0c	; 12
    3d16:	ed 91       	ld	r30, X+
    3d18:	fc 91       	ld	r31, X
    3d1a:	1d 97       	sbiw	r26, 0x0d	; 13
    3d1c:	6a 81       	ldd	r22, Y+2	; 0x02
    3d1e:	88 81       	ld	r24, Y
    3d20:	99 81       	ldd	r25, Y+1	; 0x01
    3d22:	19 95       	eicall
    3d24:	0c c0       	rjmp	.+24     	; 0x3d3e <_hal_led_task+0x6e>
    3d26:	8d 81       	ldd	r24, Y+5	; 0x05
    3d28:	88 23       	and	r24, r24
    3d2a:	31 f0       	breq	.+12     	; 0x3d38 <_hal_led_task+0x68>
    3d2c:	81 2f       	mov	r24, r17
    3d2e:	a2 df       	rcall	.-188    	; 0x3c74 <_turn_on>
    3d30:	8d 81       	ldd	r24, Y+5	; 0x05
    3d32:	81 50       	subi	r24, 0x01	; 1
    3d34:	8d 83       	std	Y+5, r24	; 0x05
    3d36:	03 c0       	rjmp	.+6      	; 0x3d3e <_hal_led_task+0x6e>
    3d38:	0c 83       	std	Y+4, r16	; 0x04
    3d3a:	81 2f       	mov	r24, r17
    3d3c:	6d df       	rcall	.-294    	; 0x3c18 <_turn_off>
    3d3e:	1f 5f       	subi	r17, 0xFF	; 255
    3d40:	26 96       	adiw	r28, 0x06	; 6
    3d42:	14 30       	cpi	r17, 0x04	; 4
    3d44:	79 f6       	brne	.-98     	; 0x3ce4 <_hal_led_task+0x14>
    3d46:	65 e0       	ldi	r22, 0x05	; 5
    3d48:	70 e0       	ldi	r23, 0x00	; 0
    3d4a:	80 e0       	ldi	r24, 0x00	; 0
    3d4c:	90 e0       	ldi	r25, 0x00	; 0
    3d4e:	0e 94 13 16 	call	0x2c26	; 0x2c26 <vTaskDelay>
    3d52:	c5 cf       	rjmp	.-118    	; 0x3cde <_hal_led_task+0xe>

00003d54 <led_create>:
    3d54:	cf 92       	push	r12
    3d56:	df 92       	push	r13
    3d58:	ef 92       	push	r14
    3d5a:	ff 92       	push	r15
    3d5c:	0f 93       	push	r16
    3d5e:	1f 93       	push	r17
    3d60:	cf 93       	push	r28
    3d62:	df 93       	push	r29
    3d64:	06 2f       	mov	r16, r22
    3d66:	0f 2e       	mov	r0, r31
    3d68:	f2 e7       	ldi	r31, 0x72	; 114
    3d6a:	ef 2e       	mov	r14, r31
    3d6c:	fa e1       	ldi	r31, 0x1A	; 26
    3d6e:	ff 2e       	mov	r15, r31
    3d70:	f0 2d       	mov	r31, r0
    3d72:	d7 01       	movw	r26, r14
    3d74:	18 96       	adiw	r26, 0x08	; 8
    3d76:	ed 91       	ld	r30, X+
    3d78:	fc 91       	ld	r31, X
    3d7a:	19 97       	sbiw	r26, 0x09	; 9
    3d7c:	66 e0       	ldi	r22, 0x06	; 6
    3d7e:	87 e2       	ldi	r24, 0x27	; 39
    3d80:	90 e0       	ldi	r25, 0x00	; 0
    3d82:	19 95       	eicall
    3d84:	c6 e0       	ldi	r28, 0x06	; 6
    3d86:	d9 e1       	ldi	r29, 0x19	; 25
    3d88:	0f 2e       	mov	r0, r31
    3d8a:	f8 e2       	ldi	r31, 0x28	; 40
    3d8c:	cf 2e       	mov	r12, r31
    3d8e:	d1 2c       	mov	r13, r1
    3d90:	f0 2d       	mov	r31, r0
    3d92:	d9 82       	std	Y+1, r13	; 0x01
    3d94:	c8 82       	st	Y, r12
    3d96:	86 e0       	ldi	r24, 0x06	; 6
    3d98:	8a 83       	std	Y+2, r24	; 0x02
    3d9a:	1b 82       	std	Y+3, r1	; 0x03
    3d9c:	14 e0       	ldi	r17, 0x04	; 4
    3d9e:	1c 83       	std	Y+4, r17	; 0x04
    3da0:	80 e0       	ldi	r24, 0x00	; 0
    3da2:	3a df       	rcall	.-396    	; 0x3c18 <_turn_off>
    3da4:	d7 01       	movw	r26, r14
    3da6:	18 96       	adiw	r26, 0x08	; 8
    3da8:	ed 91       	ld	r30, X+
    3daa:	fc 91       	ld	r31, X
    3dac:	19 97       	sbiw	r26, 0x09	; 9
    3dae:	67 e0       	ldi	r22, 0x07	; 7
    3db0:	87 e2       	ldi	r24, 0x27	; 39
    3db2:	90 e0       	ldi	r25, 0x00	; 0
    3db4:	19 95       	eicall
    3db6:	df 82       	std	Y+7, r13	; 0x07
    3db8:	ce 82       	std	Y+6, r12	; 0x06
    3dba:	87 e0       	ldi	r24, 0x07	; 7
    3dbc:	88 87       	std	Y+8, r24	; 0x08
    3dbe:	19 86       	std	Y+9, r1	; 0x09
    3dc0:	1a 87       	std	Y+10, r17	; 0x0a
    3dc2:	81 e0       	ldi	r24, 0x01	; 1
    3dc4:	29 df       	rcall	.-430    	; 0x3c18 <_turn_off>
    3dc6:	d7 01       	movw	r26, r14
    3dc8:	18 96       	adiw	r26, 0x08	; 8
    3dca:	ed 91       	ld	r30, X+
    3dcc:	fc 91       	ld	r31, X
    3dce:	19 97       	sbiw	r26, 0x09	; 9
    3dd0:	65 e0       	ldi	r22, 0x05	; 5
    3dd2:	83 e3       	ldi	r24, 0x33	; 51
    3dd4:	90 e0       	ldi	r25, 0x00	; 0
    3dd6:	19 95       	eicall
    3dd8:	d7 01       	movw	r26, r14
    3dda:	18 96       	adiw	r26, 0x08	; 8
    3ddc:	ed 91       	ld	r30, X+
    3dde:	fc 91       	ld	r31, X
    3de0:	19 97       	sbiw	r26, 0x09	; 9
    3de2:	61 e0       	ldi	r22, 0x01	; 1
    3de4:	84 e3       	ldi	r24, 0x34	; 52
    3de6:	90 e0       	ldi	r25, 0x00	; 0
    3de8:	19 95       	eicall
    3dea:	84 e3       	ldi	r24, 0x34	; 52
    3dec:	90 e0       	ldi	r25, 0x00	; 0
    3dee:	9d 87       	std	Y+13, r25	; 0x0d
    3df0:	8c 87       	std	Y+12, r24	; 0x0c
    3df2:	85 e0       	ldi	r24, 0x05	; 5
    3df4:	8e 87       	std	Y+14, r24	; 0x0e
    3df6:	1f 86       	std	Y+15, r1	; 0x0f
    3df8:	18 8b       	std	Y+16, r17	; 0x10
    3dfa:	82 e0       	ldi	r24, 0x02	; 2
    3dfc:	0d df       	rcall	.-486    	; 0x3c18 <_turn_off>
    3dfe:	d7 01       	movw	r26, r14
    3e00:	18 96       	adiw	r26, 0x08	; 8
    3e02:	ed 91       	ld	r30, X+
    3e04:	fc 91       	ld	r31, X
    3e06:	19 97       	sbiw	r26, 0x09	; 9
    3e08:	64 e0       	ldi	r22, 0x04	; 4
    3e0a:	81 e0       	ldi	r24, 0x01	; 1
    3e0c:	91 e0       	ldi	r25, 0x01	; 1
    3e0e:	19 95       	eicall
    3e10:	d7 01       	movw	r26, r14
    3e12:	18 96       	adiw	r26, 0x08	; 8
    3e14:	ed 91       	ld	r30, X+
    3e16:	fc 91       	ld	r31, X
    3e18:	19 97       	sbiw	r26, 0x09	; 9
    3e1a:	61 e0       	ldi	r22, 0x01	; 1
    3e1c:	82 e0       	ldi	r24, 0x02	; 2
    3e1e:	91 e0       	ldi	r25, 0x01	; 1
    3e20:	19 95       	eicall
    3e22:	82 e0       	ldi	r24, 0x02	; 2
    3e24:	91 e0       	ldi	r25, 0x01	; 1
    3e26:	9b 8b       	std	Y+19, r25	; 0x13
    3e28:	8a 8b       	std	Y+18, r24	; 0x12
    3e2a:	1c 8b       	std	Y+20, r17	; 0x14
    3e2c:	1d 8a       	std	Y+21, r1	; 0x15
    3e2e:	1e 8b       	std	Y+22, r17	; 0x16
    3e30:	83 e0       	ldi	r24, 0x03	; 3
    3e32:	f2 de       	rcall	.-540    	; 0x3c18 <_turn_off>
    3e34:	e1 2c       	mov	r14, r1
    3e36:	f1 2c       	mov	r15, r1
    3e38:	20 e0       	ldi	r18, 0x00	; 0
    3e3a:	30 e0       	ldi	r19, 0x00	; 0
    3e3c:	40 ec       	ldi	r20, 0xC0	; 192
    3e3e:	50 e0       	ldi	r21, 0x00	; 0
    3e40:	69 e2       	ldi	r22, 0x29	; 41
    3e42:	75 e0       	ldi	r23, 0x05	; 5
    3e44:	88 e6       	ldi	r24, 0x68	; 104
    3e46:	9e e1       	ldi	r25, 0x1E	; 30
    3e48:	0e 94 53 13 	call	0x26a6	; 0x26a6 <xTaskCreate>
    3e4c:	df 91       	pop	r29
    3e4e:	cf 91       	pop	r28
    3e50:	1f 91       	pop	r17
    3e52:	0f 91       	pop	r16
    3e54:	ff 90       	pop	r15
    3e56:	ef 90       	pop	r14
    3e58:	df 90       	pop	r13
    3e5a:	cf 90       	pop	r12
    3e5c:	08 95       	ret

00003e5e <led_slow_blink>:
    3e5e:	0f 93       	push	r16
    3e60:	1f 93       	push	r17
    3e62:	cf 93       	push	r28
    3e64:	df 93       	push	r29
    3e66:	c8 2f       	mov	r28, r24
    3e68:	d0 e0       	ldi	r29, 0x00	; 0
    3e6a:	8e 01       	movw	r16, r28
    3e6c:	00 0f       	add	r16, r16
    3e6e:	11 1f       	adc	r17, r17
    3e70:	d8 01       	movw	r26, r16
    3e72:	ac 0f       	add	r26, r28
    3e74:	bd 1f       	adc	r27, r29
    3e76:	aa 0f       	add	r26, r26
    3e78:	bb 1f       	adc	r27, r27
    3e7a:	aa 5f       	subi	r26, 0xFA	; 250
    3e7c:	b6 4e       	sbci	r27, 0xE6	; 230
    3e7e:	e0 91 7e 1a 	lds	r30, 0x1A7E	; 0x801a7e <register_access+0xc>
    3e82:	f0 91 7f 1a 	lds	r31, 0x1A7F	; 0x801a7f <register_access+0xd>
    3e86:	12 96       	adiw	r26, 0x02	; 2
    3e88:	6c 91       	ld	r22, X
    3e8a:	12 97       	sbiw	r26, 0x02	; 2
    3e8c:	8d 91       	ld	r24, X+
    3e8e:	9c 91       	ld	r25, X
    3e90:	19 95       	eicall
    3e92:	c0 0f       	add	r28, r16
    3e94:	d1 1f       	adc	r29, r17
    3e96:	cc 0f       	add	r28, r28
    3e98:	dd 1f       	adc	r29, r29
    3e9a:	ca 5f       	subi	r28, 0xFA	; 250
    3e9c:	d6 4e       	sbci	r29, 0xE6	; 230
    3e9e:	81 e0       	ldi	r24, 0x01	; 1
    3ea0:	8c 83       	std	Y+4, r24	; 0x04
    3ea2:	df 91       	pop	r29
    3ea4:	cf 91       	pop	r28
    3ea6:	1f 91       	pop	r17
    3ea8:	0f 91       	pop	r16
    3eaa:	08 95       	ret

00003eac <led_fast_blink>:
    3eac:	0f 93       	push	r16
    3eae:	1f 93       	push	r17
    3eb0:	cf 93       	push	r28
    3eb2:	df 93       	push	r29
    3eb4:	c8 2f       	mov	r28, r24
    3eb6:	d0 e0       	ldi	r29, 0x00	; 0
    3eb8:	8e 01       	movw	r16, r28
    3eba:	00 0f       	add	r16, r16
    3ebc:	11 1f       	adc	r17, r17
    3ebe:	d8 01       	movw	r26, r16
    3ec0:	ac 0f       	add	r26, r28
    3ec2:	bd 1f       	adc	r27, r29
    3ec4:	aa 0f       	add	r26, r26
    3ec6:	bb 1f       	adc	r27, r27
    3ec8:	aa 5f       	subi	r26, 0xFA	; 250
    3eca:	b6 4e       	sbci	r27, 0xE6	; 230
    3ecc:	e0 91 7e 1a 	lds	r30, 0x1A7E	; 0x801a7e <register_access+0xc>
    3ed0:	f0 91 7f 1a 	lds	r31, 0x1A7F	; 0x801a7f <register_access+0xd>
    3ed4:	12 96       	adiw	r26, 0x02	; 2
    3ed6:	6c 91       	ld	r22, X
    3ed8:	12 97       	sbiw	r26, 0x02	; 2
    3eda:	8d 91       	ld	r24, X+
    3edc:	9c 91       	ld	r25, X
    3ede:	19 95       	eicall
    3ee0:	c0 0f       	add	r28, r16
    3ee2:	d1 1f       	adc	r29, r17
    3ee4:	cc 0f       	add	r28, r28
    3ee6:	dd 1f       	adc	r29, r29
    3ee8:	ca 5f       	subi	r28, 0xFA	; 250
    3eea:	d6 4e       	sbci	r29, 0xE6	; 230
    3eec:	82 e0       	ldi	r24, 0x02	; 2
    3eee:	8c 83       	std	Y+4, r24	; 0x04
    3ef0:	df 91       	pop	r29
    3ef2:	cf 91       	pop	r28
    3ef4:	1f 91       	pop	r17
    3ef6:	0f 91       	pop	r16
    3ef8:	08 95       	ret

00003efa <led_led_on>:
    3efa:	28 2f       	mov	r18, r24
    3efc:	30 e0       	ldi	r19, 0x00	; 0
    3efe:	f9 01       	movw	r30, r18
    3f00:	ee 0f       	add	r30, r30
    3f02:	ff 1f       	adc	r31, r31
    3f04:	e2 0f       	add	r30, r18
    3f06:	f3 1f       	adc	r31, r19
    3f08:	ee 0f       	add	r30, r30
    3f0a:	ff 1f       	adc	r31, r31
    3f0c:	ea 5f       	subi	r30, 0xFA	; 250
    3f0e:	f6 4e       	sbci	r31, 0xE6	; 230
    3f10:	93 e0       	ldi	r25, 0x03	; 3
    3f12:	94 83       	std	Z+4, r25	; 0x04
    3f14:	af ce       	rjmp	.-674    	; 0x3c74 <_turn_on>
    3f16:	08 95       	ret

00003f18 <led_led_off>:
    3f18:	28 2f       	mov	r18, r24
    3f1a:	30 e0       	ldi	r19, 0x00	; 0
    3f1c:	f9 01       	movw	r30, r18
    3f1e:	ee 0f       	add	r30, r30
    3f20:	ff 1f       	adc	r31, r31
    3f22:	e2 0f       	add	r30, r18
    3f24:	f3 1f       	adc	r31, r19
    3f26:	ee 0f       	add	r30, r30
    3f28:	ff 1f       	adc	r31, r31
    3f2a:	ea 5f       	subi	r30, 0xFA	; 250
    3f2c:	f6 4e       	sbci	r31, 0xE6	; 230
    3f2e:	94 e0       	ldi	r25, 0x04	; 4
    3f30:	94 83       	std	Z+4, r25	; 0x04
    3f32:	72 ce       	rjmp	.-796    	; 0x3c18 <_turn_off>
    3f34:	08 95       	ret

00003f36 <led_long_puls>:
    3f36:	90 e0       	ldi	r25, 0x00	; 0
    3f38:	fc 01       	movw	r30, r24
    3f3a:	ee 0f       	add	r30, r30
    3f3c:	ff 1f       	adc	r31, r31
    3f3e:	df 01       	movw	r26, r30
    3f40:	a8 0f       	add	r26, r24
    3f42:	b9 1f       	adc	r27, r25
    3f44:	aa 0f       	add	r26, r26
    3f46:	bb 1f       	adc	r27, r27
    3f48:	aa 5f       	subi	r26, 0xFA	; 250
    3f4a:	b6 4e       	sbci	r27, 0xE6	; 230
    3f4c:	24 e0       	ldi	r18, 0x04	; 4
    3f4e:	15 96       	adiw	r26, 0x05	; 5
    3f50:	2c 93       	st	X, r18
    3f52:	15 97       	sbiw	r26, 0x05	; 5
    3f54:	fd 01       	movw	r30, r26
    3f56:	14 82       	std	Z+4, r1	; 0x04
    3f58:	08 95       	ret

00003f5a <led_short_puls>:
    3f5a:	90 e0       	ldi	r25, 0x00	; 0
    3f5c:	fc 01       	movw	r30, r24
    3f5e:	ee 0f       	add	r30, r30
    3f60:	ff 1f       	adc	r31, r31
    3f62:	df 01       	movw	r26, r30
    3f64:	a8 0f       	add	r26, r24
    3f66:	b9 1f       	adc	r27, r25
    3f68:	aa 0f       	add	r26, r26
    3f6a:	bb 1f       	adc	r27, r27
    3f6c:	aa 5f       	subi	r26, 0xFA	; 250
    3f6e:	b6 4e       	sbci	r27, 0xE6	; 230
    3f70:	21 e0       	ldi	r18, 0x01	; 1
    3f72:	15 96       	adiw	r26, 0x05	; 5
    3f74:	2c 93       	st	X, r18
    3f76:	15 97       	sbiw	r26, 0x05	; 5
    3f78:	fd 01       	movw	r30, r26
    3f7a:	14 82       	std	Z+4, r1	; 0x04
    3f7c:	08 95       	ret

00003f7e <_serial_call_back>:
    3f7e:	0f 93       	push	r16
    3f80:	1f 93       	push	r17
    3f82:	cf 93       	push	r28
    3f84:	df 93       	push	r29
    3f86:	1f 92       	push	r1
    3f88:	1f 92       	push	r1
    3f8a:	cd b7       	in	r28, 0x3d	; 61
    3f8c:	de b7       	in	r29, 0x3e	; 62
    3f8e:	8c 01       	movw	r16, r24
    3f90:	19 82       	std	Y+1, r1	; 0x01
    3f92:	2d c0       	rjmp	.+90     	; 0x3fee <_serial_call_back+0x70>
    3f94:	e0 91 82 19 	lds	r30, 0x1982	; 0x801982 <rec_buf_inp.2947>
    3f98:	ec 32       	cpi	r30, 0x2C	; 44
    3f9a:	50 f4       	brcc	.+20     	; 0x3fb0 <_serial_call_back+0x32>
    3f9c:	81 e0       	ldi	r24, 0x01	; 1
    3f9e:	8e 0f       	add	r24, r30
    3fa0:	80 93 82 19 	sts	0x1982, r24	; 0x801982 <rec_buf_inp.2947>
    3fa4:	f0 e0       	ldi	r31, 0x00	; 0
    3fa6:	ec 54       	subi	r30, 0x4C	; 76
    3fa8:	f6 4e       	sbci	r31, 0xE6	; 230
    3faa:	8a 81       	ldd	r24, Y+2	; 0x02
    3fac:	80 83       	st	Z, r24
    3fae:	02 c0       	rjmp	.+4      	; 0x3fb4 <_serial_call_back+0x36>
    3fb0:	10 92 82 19 	sts	0x1982, r1	; 0x801982 <rec_buf_inp.2947>
    3fb4:	8a 81       	ldd	r24, Y+2	; 0x02
    3fb6:	8a 30       	cpi	r24, 0x0A	; 10
    3fb8:	d1 f4       	brne	.+52     	; 0x3fee <_serial_call_back+0x70>
    3fba:	40 91 82 19 	lds	r20, 0x1982	; 0x801982 <rec_buf_inp.2947>
    3fbe:	50 e0       	ldi	r21, 0x00	; 0
    3fc0:	fa 01       	movw	r30, r20
    3fc2:	ee 54       	subi	r30, 0x4E	; 78
    3fc4:	f6 4e       	sbci	r31, 0xE6	; 230
    3fc6:	10 82       	st	Z, r1
    3fc8:	41 50       	subi	r20, 0x01	; 1
    3fca:	51 09       	sbc	r21, r1
    3fcc:	9e 01       	movw	r18, r28
    3fce:	2f 5f       	subi	r18, 0xFF	; 255
    3fd0:	3f 4f       	sbci	r19, 0xFF	; 255
    3fd2:	64 eb       	ldi	r22, 0xB4	; 180
    3fd4:	79 e1       	ldi	r23, 0x19	; 25
    3fd6:	80 91 85 19 	lds	r24, 0x1985	; 0x801985 <_serial_reply_buffer_handle>
    3fda:	90 91 86 19 	lds	r25, 0x1986	; 0x801986 <_serial_reply_buffer_handle+0x1>
    3fde:	0e 94 cd 11 	call	0x239a	; 0x239a <xStreamBufferSendFromISR>
    3fe2:	89 81       	ldd	r24, Y+1	; 0x01
    3fe4:	81 11       	cpse	r24, r1
    3fe6:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <vPortYield>
    3fea:	10 92 82 19 	sts	0x1982, r1	; 0x801982 <rec_buf_inp.2947>
    3fee:	be 01       	movw	r22, r28
    3ff0:	6e 5f       	subi	r22, 0xFE	; 254
    3ff2:	7f 4f       	sbci	r23, 0xFF	; 255
    3ff4:	c8 01       	movw	r24, r16
    3ff6:	8f d5       	rcall	.+2846   	; 0x4b16 <serial_get_byte>
    3ff8:	88 23       	and	r24, r24
    3ffa:	61 f2       	breq	.-104    	; 0x3f94 <_serial_call_back+0x16>
    3ffc:	0f 90       	pop	r0
    3ffe:	0f 90       	pop	r0
    4000:	df 91       	pop	r29
    4002:	cf 91       	pop	r28
    4004:	1f 91       	pop	r17
    4006:	0f 91       	pop	r16
    4008:	08 95       	ret

0000400a <_upload_message>:
    400a:	0f 93       	push	r16
    400c:	1f 93       	push	r17
    400e:	cf 93       	push	r28
    4010:	df 93       	push	r29
    4012:	8c 01       	movw	r16, r24
    4014:	eb 01       	movw	r28, r22
    4016:	80 91 85 19 	lds	r24, 0x1985	; 0x801985 <_serial_reply_buffer_handle>
    401a:	90 91 86 19 	lds	r25, 0x1986	; 0x801986 <_serial_reply_buffer_handle+0x1>
    401e:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <xStreamBufferReset>
    4022:	b8 01       	movw	r22, r16
    4024:	8e e1       	ldi	r24, 0x1E	; 30
    4026:	99 e1       	ldi	r25, 0x19	; 25
    4028:	0e 94 98 2d 	call	0x5b30	; 0x5b30 <strcpy>
    402c:	20 97       	sbiw	r28, 0x00	; 0
    402e:	79 f0       	breq	.+30     	; 0x404e <_upload_message+0x44>
    4030:	ee e1       	ldi	r30, 0x1E	; 30
    4032:	f9 e1       	ldi	r31, 0x19	; 25
    4034:	01 90       	ld	r0, Z+
    4036:	00 20       	and	r0, r0
    4038:	e9 f7       	brne	.-6      	; 0x4034 <_upload_message+0x2a>
    403a:	31 97       	sbiw	r30, 0x01	; 1
    403c:	80 e2       	ldi	r24, 0x20	; 32
    403e:	90 e0       	ldi	r25, 0x00	; 0
    4040:	91 83       	std	Z+1, r25	; 0x01
    4042:	80 83       	st	Z, r24
    4044:	be 01       	movw	r22, r28
    4046:	8e e1       	ldi	r24, 0x1E	; 30
    4048:	99 e1       	ldi	r25, 0x19	; 25
    404a:	0e 94 8d 2d 	call	0x5b1a	; 0x5b1a <strcat>
    404e:	ee e1       	ldi	r30, 0x1E	; 30
    4050:	f9 e1       	ldi	r31, 0x19	; 25
    4052:	df 01       	movw	r26, r30
    4054:	0d 90       	ld	r0, X+
    4056:	00 20       	and	r0, r0
    4058:	e9 f7       	brne	.-6      	; 0x4054 <_upload_message+0x4a>
    405a:	11 97       	sbiw	r26, 0x01	; 1
    405c:	8d e0       	ldi	r24, 0x0D	; 13
    405e:	9a e0       	ldi	r25, 0x0A	; 10
    4060:	11 96       	adiw	r26, 0x01	; 1
    4062:	9c 93       	st	X, r25
    4064:	8e 93       	st	-X, r24
    4066:	12 96       	adiw	r26, 0x02	; 2
    4068:	1c 92       	st	X, r1
    406a:	01 90       	ld	r0, Z+
    406c:	00 20       	and	r0, r0
    406e:	e9 f7       	brne	.-6      	; 0x406a <_upload_message+0x60>
    4070:	31 97       	sbiw	r30, 0x01	; 1
    4072:	ee 51       	subi	r30, 0x1E	; 30
    4074:	f9 41       	sbci	r31, 0x19	; 25
    4076:	ae 2f       	mov	r26, r30
    4078:	8e e1       	ldi	r24, 0x1E	; 30
    407a:	99 e1       	ldi	r25, 0x19	; 25
    407c:	ac 01       	movw	r20, r24
    407e:	6a 2f       	mov	r22, r26
    4080:	80 91 87 19 	lds	r24, 0x1987	; 0x801987 <_rn2483_serial>
    4084:	90 91 88 19 	lds	r25, 0x1988	; 0x801988 <_rn2483_serial+0x1>
    4088:	f6 d4       	rcall	.+2540   	; 0x4a76 <serial_send_bytes>
    408a:	81 11       	cpse	r24, r1
    408c:	11 c0       	rjmp	.+34     	; 0x40b0 <_upload_message+0xa6>
    408e:	08 e2       	ldi	r16, 0x28	; 40
    4090:	15 e0       	ldi	r17, 0x05	; 5
    4092:	20 e0       	ldi	r18, 0x00	; 0
    4094:	30 e0       	ldi	r19, 0x00	; 0
    4096:	4d e2       	ldi	r20, 0x2D	; 45
    4098:	50 e0       	ldi	r21, 0x00	; 0
    409a:	6e e0       	ldi	r22, 0x0E	; 14
    409c:	7a e1       	ldi	r23, 0x1A	; 26
    409e:	80 91 85 19 	lds	r24, 0x1985	; 0x801985 <_serial_reply_buffer_handle>
    40a2:	90 91 86 19 	lds	r25, 0x1986	; 0x801986 <_serial_reply_buffer_handle+0x1>
    40a6:	0e 94 10 12 	call	0x2420	; 0x2420 <xStreamBufferReceive>
    40aa:	8e e0       	ldi	r24, 0x0E	; 14
    40ac:	9a e1       	ldi	r25, 0x1A	; 26
    40ae:	02 c0       	rjmp	.+4      	; 0x40b4 <_upload_message+0xaa>
    40b0:	80 e0       	ldi	r24, 0x00	; 0
    40b2:	90 e0       	ldi	r25, 0x00	; 0
    40b4:	df 91       	pop	r29
    40b6:	cf 91       	pop	r28
    40b8:	1f 91       	pop	r17
    40ba:	0f 91       	pop	r16
    40bc:	08 95       	ret

000040be <_reply2return_code>:
    40be:	2f 92       	push	r2
    40c0:	3f 92       	push	r3
    40c2:	4f 92       	push	r4
    40c4:	5f 92       	push	r5
    40c6:	6f 92       	push	r6
    40c8:	7f 92       	push	r7
    40ca:	8f 92       	push	r8
    40cc:	9f 92       	push	r9
    40ce:	af 92       	push	r10
    40d0:	bf 92       	push	r11
    40d2:	cf 92       	push	r12
    40d4:	df 92       	push	r13
    40d6:	ef 92       	push	r14
    40d8:	ff 92       	push	r15
    40da:	0f 93       	push	r16
    40dc:	1f 93       	push	r17
    40de:	cf 93       	push	r28
    40e0:	df 93       	push	r29
    40e2:	5c 01       	movw	r10, r24
    40e4:	fc 01       	movw	r30, r24
    40e6:	01 90       	ld	r0, Z+
    40e8:	00 20       	and	r0, r0
    40ea:	e9 f7       	brne	.-6      	; 0x40e6 <_reply2return_code+0x28>
    40ec:	31 97       	sbiw	r30, 0x01	; 1
    40ee:	6f 01       	movw	r12, r30
    40f0:	c8 1a       	sub	r12, r24
    40f2:	d9 0a       	sbc	r13, r25
    40f4:	5c 2c       	mov	r5, r12
    40f6:	0f 2e       	mov	r0, r31
    40f8:	fa ec       	ldi	r31, 0xCA	; 202
    40fa:	8f 2e       	mov	r8, r31
    40fc:	f7 e0       	ldi	r31, 0x07	; 7
    40fe:	9f 2e       	mov	r9, r31
    4100:	f0 2d       	mov	r31, r0
    4102:	e1 2c       	mov	r14, r1
    4104:	f1 2c       	mov	r15, r1
    4106:	4c 2c       	mov	r4, r12
    4108:	37 01       	movw	r6, r14
    410a:	f4 01       	movw	r30, r8
    410c:	01 81       	ldd	r16, Z+1	; 0x01
    410e:	12 81       	ldd	r17, Z+2	; 0x02
    4110:	e8 01       	movw	r28, r16
    4112:	09 90       	ld	r0, Y+
    4114:	00 20       	and	r0, r0
    4116:	e9 f7       	brne	.-6      	; 0x4112 <_reply2return_code+0x54>
    4118:	21 97       	sbiw	r28, 0x01	; 1
    411a:	c0 1b       	sub	r28, r16
    411c:	d1 0b       	sbc	r29, r17
    411e:	3c 2e       	mov	r3, r28
    4120:	f9 e0       	ldi	r31, 0x09	; 9
    4122:	cf 16       	cp	r12, r31
    4124:	d1 04       	cpc	r13, r1
    4126:	58 f0       	brcs	.+22     	; 0x413e <_reply2return_code+0x80>
    4128:	f4 01       	movw	r30, r8
    412a:	20 80       	ld	r2, Z
    412c:	fe e0       	ldi	r31, 0x0E	; 14
    412e:	2f 12       	cpse	r2, r31
    4130:	06 c0       	rjmp	.+12     	; 0x413e <_reply2return_code+0x80>
    4132:	b8 01       	movw	r22, r16
    4134:	c5 01       	movw	r24, r10
    4136:	0e 94 68 2d 	call	0x5ad0	; 0x5ad0 <strcasestr>
    413a:	89 2b       	or	r24, r25
    413c:	09 f5       	brne	.+66     	; 0x4180 <_reply2return_code+0xc2>
    413e:	44 2d       	mov	r20, r4
    4140:	35 14       	cp	r3, r5
    4142:	08 f4       	brcc	.+2      	; 0x4146 <_reply2return_code+0x88>
    4144:	4c 2f       	mov	r20, r28
    4146:	50 e0       	ldi	r21, 0x00	; 0
    4148:	b8 01       	movw	r22, r16
    414a:	c5 01       	movw	r24, r10
    414c:	0e 94 9f 2d 	call	0x5b3e	; 0x5b3e <strncasecmp>
    4150:	89 2b       	or	r24, r25
    4152:	49 f4       	brne	.+18     	; 0x4166 <_reply2return_code+0xa8>
    4154:	f3 01       	movw	r30, r6
    4156:	ee 0f       	add	r30, r30
    4158:	ff 1f       	adc	r31, r31
    415a:	e6 0d       	add	r30, r6
    415c:	f7 1d       	adc	r31, r7
    415e:	e6 53       	subi	r30, 0x36	; 54
    4160:	f8 4f       	sbci	r31, 0xF8	; 248
    4162:	20 80       	ld	r2, Z
    4164:	0d c0       	rjmp	.+26     	; 0x4180 <_reply2return_code+0xc2>
    4166:	8f ef       	ldi	r24, 0xFF	; 255
    4168:	e8 1a       	sub	r14, r24
    416a:	f8 0a       	sbc	r15, r24
    416c:	e3 e0       	ldi	r30, 0x03	; 3
    416e:	8e 0e       	add	r8, r30
    4170:	91 1c       	adc	r9, r1
    4172:	f1 e1       	ldi	r31, 0x11	; 17
    4174:	ef 16       	cp	r14, r31
    4176:	f1 04       	cpc	r15, r1
    4178:	39 f6       	brne	.-114    	; 0x4108 <_reply2return_code+0x4a>
    417a:	68 94       	set
    417c:	22 24       	eor	r2, r2
    417e:	24 f8       	bld	r2, 4
    4180:	82 2d       	mov	r24, r2
    4182:	df 91       	pop	r29
    4184:	cf 91       	pop	r28
    4186:	1f 91       	pop	r17
    4188:	0f 91       	pop	r16
    418a:	ff 90       	pop	r15
    418c:	ef 90       	pop	r14
    418e:	df 90       	pop	r13
    4190:	cf 90       	pop	r12
    4192:	bf 90       	pop	r11
    4194:	af 90       	pop	r10
    4196:	9f 90       	pop	r9
    4198:	8f 90       	pop	r8
    419a:	7f 90       	pop	r7
    419c:	6f 90       	pop	r6
    419e:	5f 90       	pop	r5
    41a0:	4f 90       	pop	r4
    41a2:	3f 90       	pop	r3
    41a4:	2f 90       	pop	r2
    41a6:	08 95       	ret

000041a8 <_upload_message_rc>:
    41a8:	30 df       	rcall	.-416    	; 0x400a <_upload_message>
    41aa:	89 cf       	rjmp	.-238    	; 0x40be <_reply2return_code>
    41ac:	08 95       	ret

000041ae <lora_driver_flush_buffers>:
    41ae:	80 91 85 19 	lds	r24, 0x1985	; 0x801985 <_serial_reply_buffer_handle>
    41b2:	90 91 86 19 	lds	r25, 0x1986	; 0x801986 <_serial_reply_buffer_handle+0x1>
    41b6:	0c 94 e4 10 	jmp	0x21c8	; 0x21c8 <xStreamBufferReset>
    41ba:	08 95       	ret

000041bc <lora_driver_create>:
    41bc:	8f 92       	push	r8
    41be:	9f 92       	push	r9
    41c0:	af 92       	push	r10
    41c2:	cf 92       	push	r12
    41c4:	ef 92       	push	r14
    41c6:	0f 93       	push	r16
    41c8:	1f 93       	push	r17
    41ca:	cf 93       	push	r28
    41cc:	c8 2f       	mov	r28, r24
    41ce:	8b 01       	movw	r16, r22
    41d0:	41 e0       	ldi	r20, 0x01	; 1
    41d2:	60 e0       	ldi	r22, 0x00	; 0
    41d4:	70 e0       	ldi	r23, 0x00	; 0
    41d6:	88 ec       	ldi	r24, 0xC8	; 200
    41d8:	90 e0       	ldi	r25, 0x00	; 0
    41da:	0e 94 b8 10 	call	0x2170	; 0x2170 <xStreamBufferGenericCreate>
    41de:	90 93 86 19 	sts	0x1986, r25	; 0x801986 <_serial_reply_buffer_handle+0x1>
    41e2:	80 93 85 19 	sts	0x1985, r24	; 0x801985 <_serial_reply_buffer_handle>
    41e6:	10 93 84 19 	sts	0x1984, r17	; 0x801984 <_downlinkMessageBuffer+0x1>
    41ea:	00 93 83 19 	sts	0x1983, r16	; 0x801983 <_downlinkMessageBuffer>
    41ee:	0f 2e       	mov	r0, r31
    41f0:	ff eb       	ldi	r31, 0xBF	; 191
    41f2:	8f 2e       	mov	r8, r31
    41f4:	ff e1       	ldi	r31, 0x1F	; 31
    41f6:	9f 2e       	mov	r9, r31
    41f8:	f0 2d       	mov	r31, r0
    41fa:	68 94       	set
    41fc:	aa 24       	eor	r10, r10
    41fe:	a6 f8       	bld	r10, 6
    4200:	68 94       	set
    4202:	cc 24       	eor	r12, r12
    4204:	c6 f8       	bld	r12, 6
    4206:	e1 2c       	mov	r14, r1
    4208:	00 e0       	ldi	r16, 0x00	; 0
    420a:	23 e0       	ldi	r18, 0x03	; 3
    420c:	40 e0       	ldi	r20, 0x00	; 0
    420e:	51 ee       	ldi	r21, 0xE1	; 225
    4210:	60 e0       	ldi	r22, 0x00	; 0
    4212:	70 e0       	ldi	r23, 0x00	; 0
    4214:	8c 2f       	mov	r24, r28
    4216:	74 d3       	rcall	.+1768   	; 0x4900 <serial_new_instance>
    4218:	90 93 88 19 	sts	0x1988, r25	; 0x801988 <_rn2483_serial+0x1>
    421c:	80 93 87 19 	sts	0x1987, r24	; 0x801987 <_rn2483_serial>
    4220:	e0 91 7a 1a 	lds	r30, 0x1A7A	; 0x801a7a <register_access+0x8>
    4224:	f0 91 7b 1a 	lds	r31, 0x1A7B	; 0x801a7b <register_access+0x9>
    4228:	64 e0       	ldi	r22, 0x04	; 4
    422a:	87 e0       	ldi	r24, 0x07	; 7
    422c:	91 e0       	ldi	r25, 0x01	; 1
    422e:	19 95       	eicall
    4230:	cf 91       	pop	r28
    4232:	1f 91       	pop	r17
    4234:	0f 91       	pop	r16
    4236:	ef 90       	pop	r14
    4238:	cf 90       	pop	r12
    423a:	af 90       	pop	r10
    423c:	9f 90       	pop	r9
    423e:	8f 90       	pop	r8
    4240:	08 95       	ret

00004242 <lora_driver_reset_rn2483>:
    4242:	88 23       	and	r24, r24
    4244:	49 f0       	breq	.+18     	; 0x4258 <lora_driver_reset_rn2483+0x16>
    4246:	e0 91 84 1a 	lds	r30, 0x1A84	; 0x801a84 <register_access+0x12>
    424a:	f0 91 85 1a 	lds	r31, 0x1A85	; 0x801a85 <register_access+0x13>
    424e:	64 e0       	ldi	r22, 0x04	; 4
    4250:	88 e0       	ldi	r24, 0x08	; 8
    4252:	91 e0       	ldi	r25, 0x01	; 1
    4254:	19 95       	eicall
    4256:	08 95       	ret
    4258:	e0 91 7a 1a 	lds	r30, 0x1A7A	; 0x801a7a <register_access+0x8>
    425c:	f0 91 7b 1a 	lds	r31, 0x1A7B	; 0x801a7b <register_access+0x9>
    4260:	64 e0       	ldi	r22, 0x04	; 4
    4262:	88 e0       	ldi	r24, 0x08	; 8
    4264:	91 e0       	ldi	r25, 0x01	; 1
    4266:	19 95       	eicall
    4268:	08 95       	ret

0000426a <lora_driver_rn2483_factory_reset>:
    426a:	60 e0       	ldi	r22, 0x00	; 0
    426c:	70 e0       	ldi	r23, 0x00	; 0
    426e:	80 e5       	ldi	r24, 0x50	; 80
    4270:	95 e0       	ldi	r25, 0x05	; 5
    4272:	cb de       	rcall	.-618    	; 0x400a <_upload_message>
    4274:	ee e0       	ldi	r30, 0x0E	; 14
    4276:	fa e1       	ldi	r31, 0x1A	; 26
    4278:	01 90       	ld	r0, Z+
    427a:	00 20       	and	r0, r0
    427c:	e9 f7       	brne	.-6      	; 0x4278 <lora_driver_rn2483_factory_reset+0xe>
    427e:	31 97       	sbiw	r30, 0x01	; 1
    4280:	ee 50       	subi	r30, 0x0E	; 14
    4282:	fa 41       	sbci	r31, 0x1A	; 26
    4284:	81 e0       	ldi	r24, 0x01	; 1
    4286:	75 97       	sbiw	r30, 0x15	; 21
    4288:	08 f0       	brcs	.+2      	; 0x428c <lora_driver_rn2483_factory_reset+0x22>
    428a:	80 e0       	ldi	r24, 0x00	; 0
    428c:	08 95       	ret

0000428e <lora_driver_get_rn2483_hweui>:
    428e:	cf 93       	push	r28
    4290:	df 93       	push	r29
    4292:	ec 01       	movw	r28, r24
    4294:	60 e0       	ldi	r22, 0x00	; 0
    4296:	70 e0       	ldi	r23, 0x00	; 0
    4298:	81 e6       	ldi	r24, 0x61	; 97
    429a:	95 e0       	ldi	r25, 0x05	; 5
    429c:	b6 de       	rcall	.-660    	; 0x400a <_upload_message>
    429e:	ee e0       	ldi	r30, 0x0E	; 14
    42a0:	fa e1       	ldi	r31, 0x1A	; 26
    42a2:	01 90       	ld	r0, Z+
    42a4:	00 20       	and	r0, r0
    42a6:	e9 f7       	brne	.-6      	; 0x42a2 <lora_driver_get_rn2483_hweui+0x14>
    42a8:	ef 51       	subi	r30, 0x1F	; 31
    42aa:	fa 41       	sbci	r31, 0x1A	; 26
    42ac:	39 f4       	brne	.+14     	; 0x42bc <lora_driver_get_rn2483_hweui+0x2e>
    42ae:	6e e0       	ldi	r22, 0x0E	; 14
    42b0:	7a e1       	ldi	r23, 0x1A	; 26
    42b2:	ce 01       	movw	r24, r28
    42b4:	0e 94 98 2d 	call	0x5b30	; 0x5b30 <strcpy>
    42b8:	80 e0       	ldi	r24, 0x00	; 0
    42ba:	02 c0       	rjmp	.+4      	; 0x42c0 <lora_driver_get_rn2483_hweui+0x32>
    42bc:	18 82       	st	Y, r1
    42be:	81 e0       	ldi	r24, 0x01	; 1
    42c0:	df 91       	pop	r29
    42c2:	cf 91       	pop	r28
    42c4:	08 95       	ret

000042c6 <lora_driver_set_device_identifier>:
    42c6:	fc 01       	movw	r30, r24
    42c8:	01 90       	ld	r0, Z+
    42ca:	00 20       	and	r0, r0
    42cc:	e9 f7       	brne	.-6      	; 0x42c8 <lora_driver_set_device_identifier+0x2>
    42ce:	9f 01       	movw	r18, r30
    42d0:	21 51       	subi	r18, 0x11	; 17
    42d2:	31 09       	sbc	r19, r1
    42d4:	28 17       	cp	r18, r24
    42d6:	39 07       	cpc	r19, r25
    42d8:	29 f4       	brne	.+10     	; 0x42e4 <lora_driver_set_device_identifier+0x1e>
    42da:	bc 01       	movw	r22, r24
    42dc:	8f e8       	ldi	r24, 0x8F	; 143
    42de:	95 e0       	ldi	r25, 0x05	; 5
    42e0:	63 cf       	rjmp	.-314    	; 0x41a8 <_upload_message_rc>
    42e2:	08 95       	ret
    42e4:	89 e0       	ldi	r24, 0x09	; 9
    42e6:	08 95       	ret

000042e8 <lora_driver_set_application_identifier>:
    42e8:	fc 01       	movw	r30, r24
    42ea:	01 90       	ld	r0, Z+
    42ec:	00 20       	and	r0, r0
    42ee:	e9 f7       	brne	.-6      	; 0x42ea <lora_driver_set_application_identifier+0x2>
    42f0:	9f 01       	movw	r18, r30
    42f2:	21 51       	subi	r18, 0x11	; 17
    42f4:	31 09       	sbc	r19, r1
    42f6:	28 17       	cp	r18, r24
    42f8:	39 07       	cpc	r19, r25
    42fa:	29 f4       	brne	.+10     	; 0x4306 <lora_driver_set_application_identifier+0x1e>
    42fc:	bc 01       	movw	r22, r24
    42fe:	8e e9       	ldi	r24, 0x9E	; 158
    4300:	95 e0       	ldi	r25, 0x05	; 5
    4302:	52 cf       	rjmp	.-348    	; 0x41a8 <_upload_message_rc>
    4304:	08 95       	ret
    4306:	89 e0       	ldi	r24, 0x09	; 9
    4308:	08 95       	ret

0000430a <lora_driver_set_application_key>:
    430a:	fc 01       	movw	r30, r24
    430c:	01 90       	ld	r0, Z+
    430e:	00 20       	and	r0, r0
    4310:	e9 f7       	brne	.-6      	; 0x430c <lora_driver_set_application_key+0x2>
    4312:	9f 01       	movw	r18, r30
    4314:	21 52       	subi	r18, 0x21	; 33
    4316:	31 09       	sbc	r19, r1
    4318:	28 17       	cp	r18, r24
    431a:	39 07       	cpc	r19, r25
    431c:	29 f4       	brne	.+10     	; 0x4328 <lora_driver_set_application_key+0x1e>
    431e:	bc 01       	movw	r22, r24
    4320:	8d ea       	ldi	r24, 0xAD	; 173
    4322:	95 e0       	ldi	r25, 0x05	; 5
    4324:	41 cf       	rjmp	.-382    	; 0x41a8 <_upload_message_rc>
    4326:	08 95       	ret
    4328:	89 e0       	ldi	r24, 0x09	; 9
    432a:	08 95       	ret

0000432c <lora_driver_save_mac>:
    432c:	60 e0       	ldi	r22, 0x00	; 0
    432e:	70 e0       	ldi	r23, 0x00	; 0
    4330:	8c ee       	ldi	r24, 0xEC	; 236
    4332:	95 e0       	ldi	r25, 0x05	; 5
    4334:	39 cf       	rjmp	.-398    	; 0x41a8 <_upload_message_rc>
    4336:	08 95       	ret

00004338 <lora_driver_join>:
    4338:	0f 93       	push	r16
    433a:	1f 93       	push	r17
    433c:	e8 2f       	mov	r30, r24
    433e:	f0 e0       	ldi	r31, 0x00	; 0
    4340:	ee 0f       	add	r30, r30
    4342:	ff 1f       	adc	r31, r31
    4344:	ea 53       	subi	r30, 0x3A	; 58
    4346:	f8 4f       	sbci	r31, 0xF8	; 248
    4348:	60 81       	ld	r22, Z
    434a:	71 81       	ldd	r23, Z+1	; 0x01
    434c:	85 ef       	ldi	r24, 0xF5	; 245
    434e:	95 e0       	ldi	r25, 0x05	; 5
    4350:	2b df       	rcall	.-426    	; 0x41a8 <_upload_message_rc>
    4352:	81 11       	cpse	r24, r1
    4354:	14 c0       	rjmp	.+40     	; 0x437e <lora_driver_join+0x46>
    4356:	08 e2       	ldi	r16, 0x28	; 40
    4358:	15 e0       	ldi	r17, 0x05	; 5
    435a:	20 e0       	ldi	r18, 0x00	; 0
    435c:	30 e0       	ldi	r19, 0x00	; 0
    435e:	4d e2       	ldi	r20, 0x2D	; 45
    4360:	50 e0       	ldi	r21, 0x00	; 0
    4362:	6e e0       	ldi	r22, 0x0E	; 14
    4364:	7a e1       	ldi	r23, 0x1A	; 26
    4366:	80 91 85 19 	lds	r24, 0x1985	; 0x801985 <_serial_reply_buffer_handle>
    436a:	90 91 86 19 	lds	r25, 0x1986	; 0x801986 <_serial_reply_buffer_handle+0x1>
    436e:	0e 94 10 12 	call	0x2420	; 0x2420 <xStreamBufferReceive>
    4372:	88 23       	and	r24, r24
    4374:	21 f0       	breq	.+8      	; 0x437e <lora_driver_join+0x46>
    4376:	8e e0       	ldi	r24, 0x0E	; 14
    4378:	9a e1       	ldi	r25, 0x1A	; 26
    437a:	a1 de       	rcall	.-702    	; 0x40be <_reply2return_code>
    437c:	03 c0       	rjmp	.+6      	; 0x4384 <lora_driver_join+0x4c>
    437e:	8e e0       	ldi	r24, 0x0E	; 14
    4380:	9a e1       	ldi	r25, 0x1A	; 26
    4382:	9d de       	rcall	.-710    	; 0x40be <_reply2return_code>
    4384:	1f 91       	pop	r17
    4386:	0f 91       	pop	r16
    4388:	08 95       	ret

0000438a <lora_driver_sent_upload_message>:
    438a:	0f 93       	push	r16
    438c:	1f 93       	push	r17
    438e:	cf 93       	push	r28
    4390:	df 93       	push	r29
    4392:	1f 92       	push	r1
    4394:	cd b7       	in	r28, 0x3d	; 61
    4396:	de b7       	in	r29, 0x3e	; 62
    4398:	db 01       	movw	r26, r22
    439a:	11 96       	adiw	r26, 0x01	; 1
    439c:	9c 91       	ld	r25, X
    439e:	11 97       	sbiw	r26, 0x01	; 1
    43a0:	95 31       	cpi	r25, 0x15	; 21
    43a2:	08 f0       	brcs	.+2      	; 0x43a6 <lora_driver_sent_upload_message+0x1c>
    43a4:	b4 c0       	rjmp	.+360    	; 0x450e <lora_driver_sent_upload_message+0x184>
    43a6:	99 23       	and	r25, r25
    43a8:	81 f1       	breq	.+96     	; 0x440a <lora_driver_sent_upload_message+0x80>
    43aa:	60 e0       	ldi	r22, 0x00	; 0
    43ac:	70 e0       	ldi	r23, 0x00	; 0
    43ae:	27 2f       	mov	r18, r23
    43b0:	30 e0       	ldi	r19, 0x00	; 0
    43b2:	46 2f       	mov	r20, r22
    43b4:	50 e0       	ldi	r21, 0x00	; 0
    43b6:	fd 01       	movw	r30, r26
    43b8:	e4 0f       	add	r30, r20
    43ba:	f5 1f       	adc	r31, r21
    43bc:	92 81       	ldd	r25, Z+2	; 0x02
    43be:	92 95       	swap	r25
    43c0:	9f 70       	andi	r25, 0x0F	; 15
    43c2:	9a 30       	cpi	r25, 0x0A	; 10
    43c4:	10 f0       	brcs	.+4      	; 0x43ca <lora_driver_sent_upload_message+0x40>
    43c6:	99 5c       	subi	r25, 0xC9	; 201
    43c8:	01 c0       	rjmp	.+2      	; 0x43cc <lora_driver_sent_upload_message+0x42>
    43ca:	90 5d       	subi	r25, 0xD0	; 208
    43cc:	f9 01       	movw	r30, r18
    43ce:	e1 56       	subi	r30, 0x61	; 97
    43d0:	f6 4e       	sbci	r31, 0xE6	; 230
    43d2:	90 83       	st	Z, r25
    43d4:	2f 5f       	subi	r18, 0xFF	; 255
    43d6:	3f 4f       	sbci	r19, 0xFF	; 255
    43d8:	fd 01       	movw	r30, r26
    43da:	e4 0f       	add	r30, r20
    43dc:	f5 1f       	adc	r31, r21
    43de:	92 81       	ldd	r25, Z+2	; 0x02
    43e0:	9f 70       	andi	r25, 0x0F	; 15
    43e2:	49 2f       	mov	r20, r25
    43e4:	50 e0       	ldi	r21, 0x00	; 0
    43e6:	4a 30       	cpi	r20, 0x0A	; 10
    43e8:	51 05       	cpc	r21, r1
    43ea:	14 f0       	brlt	.+4      	; 0x43f0 <lora_driver_sent_upload_message+0x66>
    43ec:	99 5c       	subi	r25, 0xC9	; 201
    43ee:	01 c0       	rjmp	.+2      	; 0x43f2 <lora_driver_sent_upload_message+0x68>
    43f0:	90 5d       	subi	r25, 0xD0	; 208
    43f2:	f9 01       	movw	r30, r18
    43f4:	e1 56       	subi	r30, 0x61	; 97
    43f6:	f6 4e       	sbci	r31, 0xE6	; 230
    43f8:	90 83       	st	Z, r25
    43fa:	7e 5f       	subi	r23, 0xFE	; 254
    43fc:	6f 5f       	subi	r22, 0xFF	; 255
    43fe:	11 96       	adiw	r26, 0x01	; 1
    4400:	9c 91       	ld	r25, X
    4402:	11 97       	sbiw	r26, 0x01	; 1
    4404:	69 17       	cp	r22, r25
    4406:	98 f2       	brcs	.-90     	; 0x43ae <lora_driver_sent_upload_message+0x24>
    4408:	01 c0       	rjmp	.+2      	; 0x440c <lora_driver_sent_upload_message+0x82>
    440a:	70 e0       	ldi	r23, 0x00	; 0
    440c:	e7 2f       	mov	r30, r23
    440e:	f0 e0       	ldi	r31, 0x00	; 0
    4410:	e1 56       	subi	r30, 0x61	; 97
    4412:	f6 4e       	sbci	r31, 0xE6	; 230
    4414:	10 82       	st	Z, r1
    4416:	4c 91       	ld	r20, X
    4418:	81 11       	cpse	r24, r1
    441a:	03 c0       	rjmp	.+6      	; 0x4422 <lora_driver_sent_upload_message+0x98>
    441c:	8e ef       	ldi	r24, 0xFE	; 254
    441e:	95 e0       	ldi	r25, 0x05	; 5
    4420:	02 c0       	rjmp	.+4      	; 0x4426 <lora_driver_sent_upload_message+0x9c>
    4422:	80 e0       	ldi	r24, 0x00	; 0
    4424:	96 e0       	ldi	r25, 0x06	; 6
    4426:	2f e9       	ldi	r18, 0x9F	; 159
    4428:	39 e1       	ldi	r19, 0x19	; 25
    442a:	3f 93       	push	r19
    442c:	2f 93       	push	r18
    442e:	1f 92       	push	r1
    4430:	4f 93       	push	r20
    4432:	9f 93       	push	r25
    4434:	8f 93       	push	r24
    4436:	84 e0       	ldi	r24, 0x04	; 4
    4438:	96 e0       	ldi	r25, 0x06	; 6
    443a:	9f 93       	push	r25
    443c:	8f 93       	push	r24
    443e:	81 ee       	ldi	r24, 0xE1	; 225
    4440:	99 e1       	ldi	r25, 0x19	; 25
    4442:	9f 93       	push	r25
    4444:	8f 93       	push	r24
    4446:	0e 94 fa 2d 	call	0x5bf4	; 0x5bf4 <sprintf>
    444a:	60 e0       	ldi	r22, 0x00	; 0
    444c:	70 e0       	ldi	r23, 0x00	; 0
    444e:	81 ee       	ldi	r24, 0xE1	; 225
    4450:	99 e1       	ldi	r25, 0x19	; 25
    4452:	aa de       	rcall	.-684    	; 0x41a8 <_upload_message_rc>
    4454:	0f b6       	in	r0, 0x3f	; 63
    4456:	f8 94       	cli
    4458:	de bf       	out	0x3e, r29	; 62
    445a:	0f be       	out	0x3f, r0	; 63
    445c:	cd bf       	out	0x3d, r28	; 61
    445e:	81 11       	cpse	r24, r1
    4460:	59 c0       	rjmp	.+178    	; 0x4514 <lora_driver_sent_upload_message+0x18a>
    4462:	08 e2       	ldi	r16, 0x28	; 40
    4464:	15 e0       	ldi	r17, 0x05	; 5
    4466:	20 e0       	ldi	r18, 0x00	; 0
    4468:	30 e0       	ldi	r19, 0x00	; 0
    446a:	4d e2       	ldi	r20, 0x2D	; 45
    446c:	50 e0       	ldi	r21, 0x00	; 0
    446e:	6e e0       	ldi	r22, 0x0E	; 14
    4470:	7a e1       	ldi	r23, 0x1A	; 26
    4472:	80 91 85 19 	lds	r24, 0x1985	; 0x801985 <_serial_reply_buffer_handle>
    4476:	90 91 86 19 	lds	r25, 0x1986	; 0x801986 <_serial_reply_buffer_handle+0x1>
    447a:	0e 94 10 12 	call	0x2420	; 0x2420 <xStreamBufferReceive>
    447e:	88 23       	and	r24, r24
    4480:	09 f4       	brne	.+2      	; 0x4484 <lora_driver_sent_upload_message+0xfa>
    4482:	47 c0       	rjmp	.+142    	; 0x4512 <lora_driver_sent_upload_message+0x188>
    4484:	8e e0       	ldi	r24, 0x0E	; 14
    4486:	9a e1       	ldi	r25, 0x1A	; 26
    4488:	1a de       	rcall	.-972    	; 0x40be <_reply2return_code>
    448a:	8e 30       	cpi	r24, 0x0E	; 14
    448c:	09 f0       	breq	.+2      	; 0x4490 <lora_driver_sent_upload_message+0x106>
    448e:	42 c0       	rjmp	.+132    	; 0x4514 <lora_driver_sent_upload_message+0x18a>
    4490:	87 e0       	ldi	r24, 0x07	; 7
    4492:	89 83       	std	Y+1, r24	; 0x01
    4494:	80 91 83 19 	lds	r24, 0x1983	; 0x801983 <_downlinkMessageBuffer>
    4498:	90 91 84 19 	lds	r25, 0x1984	; 0x801984 <_downlinkMessageBuffer+0x1>
    449c:	89 2b       	or	r24, r25
    449e:	a9 f1       	breq	.+106    	; 0x450a <lora_driver_sent_upload_message+0x180>
    44a0:	be 01       	movw	r22, r28
    44a2:	6f 5f       	subi	r22, 0xFF	; 255
    44a4:	7f 4f       	sbci	r23, 0xFF	; 255
    44a6:	8e e0       	ldi	r24, 0x0E	; 14
    44a8:	9a e1       	ldi	r25, 0x1A	; 26
    44aa:	68 d1       	rcall	.+720    	; 0x477c <decode_port_no>
    44ac:	80 93 89 19 	sts	0x1989, r24	; 0x801989 <_downlink_payload>
    44b0:	e9 81       	ldd	r30, Y+1	; 0x01
    44b2:	f0 e0       	ldi	r31, 0x00	; 0
    44b4:	e2 5f       	subi	r30, 0xF2	; 242
    44b6:	f5 4e       	sbci	r31, 0xE5	; 229
    44b8:	df 01       	movw	r26, r30
    44ba:	0d 90       	ld	r0, X+
    44bc:	00 20       	and	r0, r0
    44be:	e9 f7       	brne	.-6      	; 0x44ba <lora_driver_sent_upload_message+0x130>
    44c0:	11 97       	sbiw	r26, 0x01	; 1
    44c2:	ae 1b       	sub	r26, r30
    44c4:	bf 0b       	sbc	r27, r31
    44c6:	aa 23       	and	r26, r26
    44c8:	91 f0       	breq	.+36     	; 0x44ee <lora_driver_sent_upload_message+0x164>
    44ca:	bb 27       	eor	r27, r27
    44cc:	cd 01       	movw	r24, r26
    44ce:	01 97       	sbiw	r24, 0x01	; 1
    44d0:	9c 01       	movw	r18, r24
    44d2:	12 f4       	brpl	.+4      	; 0x44d8 <lora_driver_sent_upload_message+0x14e>
    44d4:	2f 5f       	subi	r18, 0xFF	; 255
    44d6:	3f 4f       	sbci	r19, 0xFF	; 255
    44d8:	35 95       	asr	r19
    44da:	27 95       	ror	r18
    44dc:	20 93 8a 19 	sts	0x198A, r18	; 0x80198a <_downlink_payload+0x1>
    44e0:	af 01       	movw	r20, r30
    44e2:	4f 5f       	subi	r20, 0xFF	; 255
    44e4:	5f 4f       	sbci	r21, 0xFF	; 255
    44e6:	64 e1       	ldi	r22, 0x14	; 20
    44e8:	8b e8       	ldi	r24, 0x8B	; 139
    44ea:	99 e1       	ldi	r25, 0x19	; 25
    44ec:	73 d1       	rcall	.+742    	; 0x47d4 <decode_hexadecimal_string_bytes>
    44ee:	01 e0       	ldi	r16, 0x01	; 1
    44f0:	10 e0       	ldi	r17, 0x00	; 0
    44f2:	20 e0       	ldi	r18, 0x00	; 0
    44f4:	30 e0       	ldi	r19, 0x00	; 0
    44f6:	46 e1       	ldi	r20, 0x16	; 22
    44f8:	50 e0       	ldi	r21, 0x00	; 0
    44fa:	69 e8       	ldi	r22, 0x89	; 137
    44fc:	79 e1       	ldi	r23, 0x19	; 25
    44fe:	80 91 83 19 	lds	r24, 0x1983	; 0x801983 <_downlinkMessageBuffer>
    4502:	90 91 84 19 	lds	r25, 0x1984	; 0x801984 <_downlinkMessageBuffer+0x1>
    4506:	0e 94 23 11 	call	0x2246	; 0x2246 <xStreamBufferSend>
    450a:	8e e0       	ldi	r24, 0x0E	; 14
    450c:	03 c0       	rjmp	.+6      	; 0x4514 <lora_driver_sent_upload_message+0x18a>
    450e:	84 e1       	ldi	r24, 0x14	; 20
    4510:	01 c0       	rjmp	.+2      	; 0x4514 <lora_driver_sent_upload_message+0x18a>
    4512:	80 e0       	ldi	r24, 0x00	; 0
    4514:	0f 90       	pop	r0
    4516:	df 91       	pop	r29
    4518:	cf 91       	pop	r28
    451a:	1f 91       	pop	r17
    451c:	0f 91       	pop	r16
    451e:	08 95       	ret

00004520 <lora_driver_set_adaptive_data_rate>:
    4520:	81 30       	cpi	r24, 0x01	; 1
    4522:	19 f0       	breq	.+6      	; 0x452a <lora_driver_set_adaptive_data_rate+0xa>
    4524:	64 e1       	ldi	r22, 0x14	; 20
    4526:	76 e0       	ldi	r23, 0x06	; 6
    4528:	02 c0       	rjmp	.+4      	; 0x452e <lora_driver_set_adaptive_data_rate+0xe>
    452a:	6d ee       	ldi	r22, 0xED	; 237
    452c:	76 e0       	ldi	r23, 0x06	; 6
    452e:	88 e1       	ldi	r24, 0x18	; 24
    4530:	96 e0       	ldi	r25, 0x06	; 6
    4532:	3a ce       	rjmp	.-908    	; 0x41a8 <_upload_message_rc>
    4534:	08 95       	ret

00004536 <lora_driver_set_receive_delay>:
    4536:	9f 93       	push	r25
    4538:	8f 93       	push	r24
    453a:	89 e4       	ldi	r24, 0x49	; 73
    453c:	96 e0       	ldi	r25, 0x06	; 6
    453e:	9f 93       	push	r25
    4540:	8f 93       	push	r24
    4542:	81 ee       	ldi	r24, 0xE1	; 225
    4544:	99 e1       	ldi	r25, 0x19	; 25
    4546:	9f 93       	push	r25
    4548:	8f 93       	push	r24
    454a:	0e 94 fa 2d 	call	0x5bf4	; 0x5bf4 <sprintf>
    454e:	60 e0       	ldi	r22, 0x00	; 0
    4550:	70 e0       	ldi	r23, 0x00	; 0
    4552:	81 ee       	ldi	r24, 0xE1	; 225
    4554:	99 e1       	ldi	r25, 0x19	; 25
    4556:	28 de       	rcall	.-944    	; 0x41a8 <_upload_message_rc>
    4558:	0f 90       	pop	r0
    455a:	0f 90       	pop	r0
    455c:	0f 90       	pop	r0
    455e:	0f 90       	pop	r0
    4560:	0f 90       	pop	r0
    4562:	0f 90       	pop	r0
    4564:	08 95       	ret

00004566 <lora_driver_configure_to_eu868>:
    4566:	2f 92       	push	r2
    4568:	3f 92       	push	r3
    456a:	4f 92       	push	r4
    456c:	5f 92       	push	r5
    456e:	6f 92       	push	r6
    4570:	7f 92       	push	r7
    4572:	8f 92       	push	r8
    4574:	9f 92       	push	r9
    4576:	af 92       	push	r10
    4578:	bf 92       	push	r11
    457a:	cf 92       	push	r12
    457c:	df 92       	push	r13
    457e:	ef 92       	push	r14
    4580:	ff 92       	push	r15
    4582:	0f 93       	push	r16
    4584:	1f 93       	push	r17
    4586:	cf 93       	push	r28
    4588:	df 93       	push	r29
    458a:	cd b7       	in	r28, 0x3d	; 61
    458c:	de b7       	in	r29, 0x3e	; 62
    458e:	a0 97       	sbiw	r28, 0x20	; 32
    4590:	0f b6       	in	r0, 0x3f	; 63
    4592:	f8 94       	cli
    4594:	de bf       	out	0x3e, r29	; 62
    4596:	0f be       	out	0x3f, r0	; 63
    4598:	cd bf       	out	0x3d, r28	; 61
    459a:	66 e7       	ldi	r22, 0x76	; 118
    459c:	76 e0       	ldi	r23, 0x06	; 6
    459e:	82 e8       	ldi	r24, 0x82	; 130
    45a0:	96 e0       	ldi	r25, 0x06	; 6
    45a2:	33 dd       	rcall	.-1434   	; 0x400a <_upload_message>
    45a4:	8c dd       	rcall	.-1256   	; 0x40be <_reply2return_code>
    45a6:	81 11       	cpse	r24, r1
    45a8:	a3 c0       	rjmp	.+326    	; 0x46f0 <lora_driver_configure_to_eu868+0x18a>
    45aa:	80 e2       	ldi	r24, 0x20	; 32
    45ac:	e1 e2       	ldi	r30, 0x21	; 33
    45ae:	f2 e0       	ldi	r31, 0x02	; 2
    45b0:	de 01       	movw	r26, r28
    45b2:	11 96       	adiw	r26, 0x01	; 1
    45b4:	01 90       	ld	r0, Z+
    45b6:	0d 92       	st	X+, r0
    45b8:	8a 95       	dec	r24
    45ba:	e1 f7       	brne	.-8      	; 0x45b4 <lora_driver_configure_to_eu868+0x4e>
    45bc:	9e 01       	movw	r18, r28
    45be:	2f 5f       	subi	r18, 0xFF	; 255
    45c0:	3f 4f       	sbci	r19, 0xFF	; 255
    45c2:	69 01       	movw	r12, r18
    45c4:	e1 2c       	mov	r14, r1
    45c6:	f1 2c       	mov	r15, r1
    45c8:	0f 2e       	mov	r0, r31
    45ca:	fe e8       	ldi	r31, 0x8E	; 142
    45cc:	af 2e       	mov	r10, r31
    45ce:	f6 e0       	ldi	r31, 0x06	; 6
    45d0:	bf 2e       	mov	r11, r31
    45d2:	f0 2d       	mov	r31, r0
    45d4:	01 ee       	ldi	r16, 0xE1	; 225
    45d6:	19 e1       	ldi	r17, 0x19	; 25
    45d8:	0f 2e       	mov	r0, r31
    45da:	f7 ea       	ldi	r31, 0xA7	; 167
    45dc:	4f 2e       	mov	r4, r31
    45de:	f6 e0       	ldi	r31, 0x06	; 6
    45e0:	5f 2e       	mov	r5, r31
    45e2:	f0 2d       	mov	r31, r0
    45e4:	0f 2e       	mov	r0, r31
    45e6:	fe eb       	ldi	r31, 0xBE	; 190
    45e8:	8f 2e       	mov	r8, r31
    45ea:	f6 e0       	ldi	r31, 0x06	; 6
    45ec:	9f 2e       	mov	r9, r31
    45ee:	f0 2d       	mov	r31, r0
    45f0:	0f 2e       	mov	r0, r31
    45f2:	f8 ed       	ldi	r31, 0xD8	; 216
    45f4:	6f 2e       	mov	r6, r31
    45f6:	f6 e0       	ldi	r31, 0x06	; 6
    45f8:	7f 2e       	mov	r7, r31
    45fa:	f0 2d       	mov	r31, r0
    45fc:	3e 2c       	mov	r3, r14
    45fe:	2f 2c       	mov	r2, r15
    4600:	ff 92       	push	r15
    4602:	ef 92       	push	r14
    4604:	bf 92       	push	r11
    4606:	af 92       	push	r10
    4608:	1f 93       	push	r17
    460a:	0f 93       	push	r16
    460c:	0e 94 fa 2d 	call	0x5bf4	; 0x5bf4 <sprintf>
    4610:	60 e0       	ldi	r22, 0x00	; 0
    4612:	70 e0       	ldi	r23, 0x00	; 0
    4614:	c8 01       	movw	r24, r16
    4616:	f9 dc       	rcall	.-1550   	; 0x400a <_upload_message>
    4618:	52 dd       	rcall	.-1372   	; 0x40be <_reply2return_code>
    461a:	0f 90       	pop	r0
    461c:	0f 90       	pop	r0
    461e:	0f 90       	pop	r0
    4620:	0f 90       	pop	r0
    4622:	0f 90       	pop	r0
    4624:	0f 90       	pop	r0
    4626:	81 11       	cpse	r24, r1
    4628:	63 c0       	rjmp	.+198    	; 0x46f0 <lora_driver_configure_to_eu868+0x18a>
    462a:	32 e0       	ldi	r19, 0x02	; 2
    462c:	3e 15       	cp	r19, r14
    462e:	e8 f4       	brcc	.+58     	; 0x466a <lora_driver_configure_to_eu868+0x104>
    4630:	f6 01       	movw	r30, r12
    4632:	83 81       	ldd	r24, Z+3	; 0x03
    4634:	8f 93       	push	r24
    4636:	82 81       	ldd	r24, Z+2	; 0x02
    4638:	8f 93       	push	r24
    463a:	81 81       	ldd	r24, Z+1	; 0x01
    463c:	8f 93       	push	r24
    463e:	80 81       	ld	r24, Z
    4640:	8f 93       	push	r24
    4642:	ff 92       	push	r15
    4644:	ef 92       	push	r14
    4646:	5f 92       	push	r5
    4648:	4f 92       	push	r4
    464a:	1f 93       	push	r17
    464c:	0f 93       	push	r16
    464e:	0e 94 fa 2d 	call	0x5bf4	; 0x5bf4 <sprintf>
    4652:	60 e0       	ldi	r22, 0x00	; 0
    4654:	70 e0       	ldi	r23, 0x00	; 0
    4656:	c8 01       	movw	r24, r16
    4658:	d8 dc       	rcall	.-1616   	; 0x400a <_upload_message>
    465a:	31 dd       	rcall	.-1438   	; 0x40be <_reply2return_code>
    465c:	0f b6       	in	r0, 0x3f	; 63
    465e:	f8 94       	cli
    4660:	de bf       	out	0x3e, r29	; 62
    4662:	0f be       	out	0x3f, r0	; 63
    4664:	cd bf       	out	0x3d, r28	; 61
    4666:	81 11       	cpse	r24, r1
    4668:	43 c0       	rjmp	.+134    	; 0x46f0 <lora_driver_configure_to_eu868+0x18a>
    466a:	2f 92       	push	r2
    466c:	3f 92       	push	r3
    466e:	9f 92       	push	r9
    4670:	8f 92       	push	r8
    4672:	1f 93       	push	r17
    4674:	0f 93       	push	r16
    4676:	0e 94 fa 2d 	call	0x5bf4	; 0x5bf4 <sprintf>
    467a:	60 e0       	ldi	r22, 0x00	; 0
    467c:	70 e0       	ldi	r23, 0x00	; 0
    467e:	c8 01       	movw	r24, r16
    4680:	c4 dc       	rcall	.-1656   	; 0x400a <_upload_message>
    4682:	1d dd       	rcall	.-1478   	; 0x40be <_reply2return_code>
    4684:	0f 90       	pop	r0
    4686:	0f 90       	pop	r0
    4688:	0f 90       	pop	r0
    468a:	0f 90       	pop	r0
    468c:	0f 90       	pop	r0
    468e:	0f 90       	pop	r0
    4690:	81 11       	cpse	r24, r1
    4692:	2e c0       	rjmp	.+92     	; 0x46f0 <lora_driver_configure_to_eu868+0x18a>
    4694:	2f 92       	push	r2
    4696:	3f 92       	push	r3
    4698:	7f 92       	push	r7
    469a:	6f 92       	push	r6
    469c:	1f 93       	push	r17
    469e:	0f 93       	push	r16
    46a0:	0e 94 fa 2d 	call	0x5bf4	; 0x5bf4 <sprintf>
    46a4:	60 e0       	ldi	r22, 0x00	; 0
    46a6:	70 e0       	ldi	r23, 0x00	; 0
    46a8:	c8 01       	movw	r24, r16
    46aa:	af dc       	rcall	.-1698   	; 0x400a <_upload_message>
    46ac:	08 dd       	rcall	.-1520   	; 0x40be <_reply2return_code>
    46ae:	0f 90       	pop	r0
    46b0:	0f 90       	pop	r0
    46b2:	0f 90       	pop	r0
    46b4:	0f 90       	pop	r0
    46b6:	0f 90       	pop	r0
    46b8:	0f 90       	pop	r0
    46ba:	81 11       	cpse	r24, r1
    46bc:	19 c0       	rjmp	.+50     	; 0x46f0 <lora_driver_configure_to_eu868+0x18a>
    46be:	3f ef       	ldi	r19, 0xFF	; 255
    46c0:	e3 1a       	sub	r14, r19
    46c2:	f3 0a       	sbc	r15, r19
    46c4:	84 e0       	ldi	r24, 0x04	; 4
    46c6:	c8 0e       	add	r12, r24
    46c8:	d1 1c       	adc	r13, r1
    46ca:	98 e0       	ldi	r25, 0x08	; 8
    46cc:	e9 16       	cp	r14, r25
    46ce:	f1 04       	cpc	r15, r1
    46d0:	09 f0       	breq	.+2      	; 0x46d4 <lora_driver_configure_to_eu868+0x16e>
    46d2:	94 cf       	rjmp	.-216    	; 0x45fc <lora_driver_configure_to_eu868+0x96>
    46d4:	60 e0       	ldi	r22, 0x00	; 0
    46d6:	70 e0       	ldi	r23, 0x00	; 0
    46d8:	80 ef       	ldi	r24, 0xF0	; 240
    46da:	96 e0       	ldi	r25, 0x06	; 6
    46dc:	96 dc       	rcall	.-1748   	; 0x400a <_upload_message>
    46de:	ef dc       	rcall	.-1570   	; 0x40be <_reply2return_code>
    46e0:	81 11       	cpse	r24, r1
    46e2:	06 c0       	rjmp	.+12     	; 0x46f0 <lora_driver_configure_to_eu868+0x18a>
    46e4:	60 e0       	ldi	r22, 0x00	; 0
    46e6:	70 e0       	ldi	r23, 0x00	; 0
    46e8:	81 e0       	ldi	r24, 0x01	; 1
    46ea:	97 e0       	ldi	r25, 0x07	; 7
    46ec:	8e dc       	rcall	.-1764   	; 0x400a <_upload_message>
    46ee:	e7 dc       	rcall	.-1586   	; 0x40be <_reply2return_code>
    46f0:	a0 96       	adiw	r28, 0x20	; 32
    46f2:	0f b6       	in	r0, 0x3f	; 63
    46f4:	f8 94       	cli
    46f6:	de bf       	out	0x3e, r29	; 62
    46f8:	0f be       	out	0x3f, r0	; 63
    46fa:	cd bf       	out	0x3d, r28	; 61
    46fc:	df 91       	pop	r29
    46fe:	cf 91       	pop	r28
    4700:	1f 91       	pop	r17
    4702:	0f 91       	pop	r16
    4704:	ff 90       	pop	r15
    4706:	ef 90       	pop	r14
    4708:	df 90       	pop	r13
    470a:	cf 90       	pop	r12
    470c:	bf 90       	pop	r11
    470e:	af 90       	pop	r10
    4710:	9f 90       	pop	r9
    4712:	8f 90       	pop	r8
    4714:	7f 90       	pop	r7
    4716:	6f 90       	pop	r6
    4718:	5f 90       	pop	r5
    471a:	4f 90       	pop	r4
    471c:	3f 90       	pop	r3
    471e:	2f 90       	pop	r2
    4720:	08 95       	ret

00004722 <lora_driver_set_otaa_identity>:
    4722:	ef 92       	push	r14
    4724:	ff 92       	push	r15
    4726:	0f 93       	push	r16
    4728:	1f 93       	push	r17
    472a:	cf 93       	push	r28
    472c:	df 93       	push	r29
    472e:	ec 01       	movw	r28, r24
    4730:	8b 01       	movw	r16, r22
    4732:	7a 01       	movw	r14, r20
    4734:	81 e0       	ldi	r24, 0x01	; 1
    4736:	f4 de       	rcall	.-536    	; 0x4520 <lora_driver_set_adaptive_data_rate>
    4738:	81 11       	cpse	r24, r1
    473a:	0d c0       	rjmp	.+26     	; 0x4756 <lora_driver_set_otaa_identity+0x34>
    473c:	ce 01       	movw	r24, r28
    473e:	d4 dd       	rcall	.-1112   	; 0x42e8 <lora_driver_set_application_identifier>
    4740:	81 11       	cpse	r24, r1
    4742:	09 c0       	rjmp	.+18     	; 0x4756 <lora_driver_set_otaa_identity+0x34>
    4744:	c8 01       	movw	r24, r16
    4746:	e1 dd       	rcall	.-1086   	; 0x430a <lora_driver_set_application_key>
    4748:	81 11       	cpse	r24, r1
    474a:	05 c0       	rjmp	.+10     	; 0x4756 <lora_driver_set_otaa_identity+0x34>
    474c:	c7 01       	movw	r24, r14
    474e:	bb dd       	rcall	.-1162   	; 0x42c6 <lora_driver_set_device_identifier>
    4750:	81 11       	cpse	r24, r1
    4752:	01 c0       	rjmp	.+2      	; 0x4756 <lora_driver_set_otaa_identity+0x34>
    4754:	eb dd       	rcall	.-1066   	; 0x432c <lora_driver_save_mac>
    4756:	df 91       	pop	r29
    4758:	cf 91       	pop	r28
    475a:	1f 91       	pop	r17
    475c:	0f 91       	pop	r16
    475e:	ff 90       	pop	r15
    4760:	ef 90       	pop	r14
    4762:	08 95       	ret

00004764 <lora_driver_map_return_code_to_text>:
    4764:	90 e0       	ldi	r25, 0x00	; 0
    4766:	fc 01       	movw	r30, r24
    4768:	ee 0f       	add	r30, r30
    476a:	ff 1f       	adc	r31, r31
    476c:	8e 0f       	add	r24, r30
    476e:	9f 1f       	adc	r25, r31
    4770:	fc 01       	movw	r30, r24
    4772:	e6 53       	subi	r30, 0x36	; 54
    4774:	f8 4f       	sbci	r31, 0xF8	; 248
    4776:	81 81       	ldd	r24, Z+1	; 0x01
    4778:	92 81       	ldd	r25, Z+2	; 0x02
    477a:	08 95       	ret

0000477c <decode_port_no>:
    477c:	dc 01       	movw	r26, r24
    477e:	00 97       	sbiw	r24, 0x00	; 0
    4780:	29 f1       	breq	.+74     	; 0x47cc <decode_port_no+0x50>
    4782:	fb 01       	movw	r30, r22
    4784:	20 81       	ld	r18, Z
    4786:	fc 01       	movw	r30, r24
    4788:	01 90       	ld	r0, Z+
    478a:	00 20       	and	r0, r0
    478c:	e9 f7       	brne	.-6      	; 0x4788 <decode_port_no+0xc>
    478e:	31 97       	sbiw	r30, 0x01	; 1
    4790:	e8 1b       	sub	r30, r24
    4792:	f9 0b       	sbc	r31, r25
    4794:	82 2f       	mov	r24, r18
    4796:	90 e0       	ldi	r25, 0x00	; 0
    4798:	e8 17       	cp	r30, r24
    479a:	f9 07       	cpc	r31, r25
    479c:	c8 f0       	brcs	.+50     	; 0x47d0 <decode_port_no+0x54>
    479e:	80 e0       	ldi	r24, 0x00	; 0
    47a0:	08 c0       	rjmp	.+16     	; 0x47b2 <decode_port_no+0x36>
    47a2:	88 0f       	add	r24, r24
    47a4:	38 2f       	mov	r19, r24
    47a6:	33 0f       	add	r19, r19
    47a8:	33 0f       	add	r19, r19
    47aa:	83 0f       	add	r24, r19
    47ac:	80 53       	subi	r24, 0x30	; 48
    47ae:	89 0f       	add	r24, r25
    47b0:	2f 5f       	subi	r18, 0xFF	; 255
    47b2:	fd 01       	movw	r30, r26
    47b4:	e2 0f       	add	r30, r18
    47b6:	f1 1d       	adc	r31, r1
    47b8:	90 81       	ld	r25, Z
    47ba:	30 ed       	ldi	r19, 0xD0	; 208
    47bc:	39 0f       	add	r19, r25
    47be:	3a 30       	cpi	r19, 0x0A	; 10
    47c0:	10 f4       	brcc	.+4      	; 0x47c6 <decode_port_no+0x4a>
    47c2:	91 11       	cpse	r25, r1
    47c4:	ee cf       	rjmp	.-36     	; 0x47a2 <decode_port_no+0x26>
    47c6:	fb 01       	movw	r30, r22
    47c8:	20 83       	st	Z, r18
    47ca:	08 95       	ret
    47cc:	80 e0       	ldi	r24, 0x00	; 0
    47ce:	08 95       	ret
    47d0:	80 e0       	ldi	r24, 0x00	; 0
    47d2:	08 95       	ret

000047d4 <decode_hexadecimal_string_bytes>:
    47d4:	0f 93       	push	r16
    47d6:	1f 93       	push	r17
    47d8:	cf 93       	push	r28
    47da:	df 93       	push	r29
    47dc:	dc 01       	movw	r26, r24
    47de:	ea 01       	movw	r28, r20
    47e0:	20 97       	sbiw	r28, 0x00	; 0
    47e2:	e1 f1       	breq	.+120    	; 0x485c <decode_hexadecimal_string_bytes+0x88>
    47e4:	fa 01       	movw	r30, r20
    47e6:	01 90       	ld	r0, Z+
    47e8:	00 20       	and	r0, r0
    47ea:	e9 f7       	brne	.-6      	; 0x47e6 <decode_hexadecimal_string_bytes+0x12>
    47ec:	31 97       	sbiw	r30, 0x01	; 1
    47ee:	e4 1b       	sub	r30, r20
    47f0:	f5 0b       	sbc	r31, r21
    47f2:	32 97       	sbiw	r30, 0x02	; 2
    47f4:	10 f5       	brcc	.+68     	; 0x483a <decode_hexadecimal_string_bytes+0x66>
    47f6:	32 c0       	rjmp	.+100    	; 0x485c <decode_hexadecimal_string_bytes+0x88>
    47f8:	8d 01       	movw	r16, r26
    47fa:	04 0f       	add	r16, r20
    47fc:	15 1f       	adc	r17, r21
    47fe:	30 e0       	ldi	r19, 0x00	; 0
    4800:	ae 01       	movw	r20, r28
    4802:	42 0f       	add	r20, r18
    4804:	53 1f       	adc	r21, r19
    4806:	fa 01       	movw	r30, r20
    4808:	90 81       	ld	r25, Z
    480a:	91 34       	cpi	r25, 0x41	; 65
    480c:	28 f0       	brcs	.+10     	; 0x4818 <decode_hexadecimal_string_bytes+0x44>
    480e:	97 53       	subi	r25, 0x37	; 55
    4810:	59 2f       	mov	r21, r25
    4812:	52 95       	swap	r21
    4814:	50 7f       	andi	r21, 0xF0	; 240
    4816:	03 c0       	rjmp	.+6      	; 0x481e <decode_hexadecimal_string_bytes+0x4a>
    4818:	59 2f       	mov	r21, r25
    481a:	52 95       	swap	r21
    481c:	50 7f       	andi	r21, 0xF0	; 240
    481e:	2c 0f       	add	r18, r28
    4820:	3d 1f       	adc	r19, r29
    4822:	f9 01       	movw	r30, r18
    4824:	91 81       	ldd	r25, Z+1	; 0x01
    4826:	91 34       	cpi	r25, 0x41	; 65
    4828:	10 f0       	brcs	.+4      	; 0x482e <decode_hexadecimal_string_bytes+0x5a>
    482a:	97 53       	subi	r25, 0x37	; 55
    482c:	01 c0       	rjmp	.+2      	; 0x4830 <decode_hexadecimal_string_bytes+0x5c>
    482e:	90 53       	subi	r25, 0x30	; 48
    4830:	95 0f       	add	r25, r21
    4832:	f8 01       	movw	r30, r16
    4834:	90 83       	st	Z, r25
    4836:	8f 5f       	subi	r24, 0xFF	; 255
    4838:	01 c0       	rjmp	.+2      	; 0x483c <decode_hexadecimal_string_bytes+0x68>
    483a:	80 e0       	ldi	r24, 0x00	; 0
    483c:	28 2f       	mov	r18, r24
    483e:	22 0f       	add	r18, r18
    4840:	48 2f       	mov	r20, r24
    4842:	50 e0       	ldi	r21, 0x00	; 0
    4844:	fe 01       	movw	r30, r28
    4846:	01 90       	ld	r0, Z+
    4848:	00 20       	and	r0, r0
    484a:	e9 f7       	brne	.-6      	; 0x4846 <decode_hexadecimal_string_bytes+0x72>
    484c:	31 97       	sbiw	r30, 0x01	; 1
    484e:	ec 1b       	sub	r30, r28
    4850:	fd 0b       	sbc	r31, r29
    4852:	4e 17       	cp	r20, r30
    4854:	5f 07       	cpc	r21, r31
    4856:	10 f4       	brcc	.+4      	; 0x485c <decode_hexadecimal_string_bytes+0x88>
    4858:	86 13       	cpse	r24, r22
    485a:	ce cf       	rjmp	.-100    	; 0x47f8 <decode_hexadecimal_string_bytes+0x24>
    485c:	df 91       	pop	r29
    485e:	cf 91       	pop	r28
    4860:	1f 91       	pop	r17
    4862:	0f 91       	pop	r16
    4864:	08 95       	ret

00004866 <reg_read_register>:
    4866:	fc 01       	movw	r30, r24
    4868:	80 81       	ld	r24, Z
    486a:	08 95       	ret

0000486c <reg_read_bit>:
    486c:	fc 01       	movw	r30, r24
    486e:	20 81       	ld	r18, Z
    4870:	81 e0       	ldi	r24, 0x01	; 1
    4872:	90 e0       	ldi	r25, 0x00	; 0
    4874:	02 c0       	rjmp	.+4      	; 0x487a <reg_read_bit+0xe>
    4876:	88 0f       	add	r24, r24
    4878:	99 1f       	adc	r25, r25
    487a:	6a 95       	dec	r22
    487c:	e2 f7       	brpl	.-8      	; 0x4876 <reg_read_bit+0xa>
    487e:	82 23       	and	r24, r18
    4880:	08 95       	ret

00004882 <reg_read_bits>:
    4882:	fc 01       	movw	r30, r24
    4884:	80 81       	ld	r24, Z
    4886:	86 23       	and	r24, r22
    4888:	08 95       	ret

0000488a <reg_set_register>:
    488a:	fc 01       	movw	r30, r24
    488c:	60 83       	st	Z, r22
    488e:	08 95       	ret

00004890 <reg_clear_register>:
    4890:	fc 01       	movw	r30, r24
    4892:	10 82       	st	Z, r1
    4894:	08 95       	ret

00004896 <reg_set_bit>:
    4896:	fc 01       	movw	r30, r24
    4898:	40 81       	ld	r20, Z
    489a:	21 e0       	ldi	r18, 0x01	; 1
    489c:	30 e0       	ldi	r19, 0x00	; 0
    489e:	02 c0       	rjmp	.+4      	; 0x48a4 <reg_set_bit+0xe>
    48a0:	22 0f       	add	r18, r18
    48a2:	33 1f       	adc	r19, r19
    48a4:	6a 95       	dec	r22
    48a6:	e2 f7       	brpl	.-8      	; 0x48a0 <reg_set_bit+0xa>
    48a8:	24 2b       	or	r18, r20
    48aa:	20 83       	st	Z, r18
    48ac:	08 95       	ret

000048ae <reg_set_bits>:
    48ae:	fc 01       	movw	r30, r24
    48b0:	20 81       	ld	r18, Z
    48b2:	62 2b       	or	r22, r18
    48b4:	60 83       	st	Z, r22
    48b6:	08 95       	ret

000048b8 <reg_toggle_bit>:
    48b8:	fc 01       	movw	r30, r24
    48ba:	40 81       	ld	r20, Z
    48bc:	21 e0       	ldi	r18, 0x01	; 1
    48be:	30 e0       	ldi	r19, 0x00	; 0
    48c0:	02 c0       	rjmp	.+4      	; 0x48c6 <reg_toggle_bit+0xe>
    48c2:	22 0f       	add	r18, r18
    48c4:	33 1f       	adc	r19, r19
    48c6:	6a 95       	dec	r22
    48c8:	e2 f7       	brpl	.-8      	; 0x48c2 <reg_toggle_bit+0xa>
    48ca:	24 27       	eor	r18, r20
    48cc:	20 83       	st	Z, r18
    48ce:	08 95       	ret

000048d0 <reg_toggle_bits>:
    48d0:	fc 01       	movw	r30, r24
    48d2:	20 81       	ld	r18, Z
    48d4:	62 27       	eor	r22, r18
    48d6:	60 83       	st	Z, r22
    48d8:	08 95       	ret

000048da <reg_clear_bit>:
    48da:	fc 01       	movw	r30, r24
    48dc:	90 81       	ld	r25, Z
    48de:	21 e0       	ldi	r18, 0x01	; 1
    48e0:	30 e0       	ldi	r19, 0x00	; 0
    48e2:	02 c0       	rjmp	.+4      	; 0x48e8 <reg_clear_bit+0xe>
    48e4:	22 0f       	add	r18, r18
    48e6:	33 1f       	adc	r19, r19
    48e8:	6a 95       	dec	r22
    48ea:	e2 f7       	brpl	.-8      	; 0x48e4 <reg_clear_bit+0xa>
    48ec:	20 95       	com	r18
    48ee:	29 23       	and	r18, r25
    48f0:	20 83       	st	Z, r18
    48f2:	08 95       	ret

000048f4 <reg_clear_bits>:
    48f4:	fc 01       	movw	r30, r24
    48f6:	90 81       	ld	r25, Z
    48f8:	60 95       	com	r22
    48fa:	69 23       	and	r22, r25
    48fc:	60 83       	st	Z, r22
    48fe:	08 95       	ret

00004900 <serial_new_instance>:
    4900:	2f 92       	push	r2
    4902:	3f 92       	push	r3
    4904:	4f 92       	push	r4
    4906:	5f 92       	push	r5
    4908:	6f 92       	push	r6
    490a:	7f 92       	push	r7
    490c:	8f 92       	push	r8
    490e:	9f 92       	push	r9
    4910:	af 92       	push	r10
    4912:	cf 92       	push	r12
    4914:	ef 92       	push	r14
    4916:	ff 92       	push	r15
    4918:	0f 93       	push	r16
    491a:	1f 93       	push	r17
    491c:	cf 93       	push	r28
    491e:	df 93       	push	r29
    4920:	cd b7       	in	r28, 0x3d	; 61
    4922:	de b7       	in	r29, 0x3e	; 62
    4924:	f8 2e       	mov	r15, r24
    4926:	2a 01       	movw	r4, r20
    4928:	3b 01       	movw	r6, r22
    492a:	88 e0       	ldi	r24, 0x08	; 8
    492c:	90 e0       	ldi	r25, 0x00	; 0
    492e:	9b d7       	rcall	.+3894   	; 0x5866 <malloc>
    4930:	8c 01       	movw	r16, r24
    4932:	8f 2d       	mov	r24, r15
    4934:	90 e0       	ldi	r25, 0x00	; 0
    4936:	88 0f       	add	r24, r24
    4938:	99 1f       	adc	r25, r25
    493a:	fc 01       	movw	r30, r24
    493c:	e5 5c       	subi	r30, 0xC5	; 197
    493e:	f5 4e       	sbci	r31, 0xE5	; 229
    4940:	11 83       	std	Z+1, r17	; 0x01
    4942:	00 83       	st	Z, r16
    4944:	fc 01       	movw	r30, r24
    4946:	e6 5f       	subi	r30, 0xF6	; 246
    4948:	fd 4f       	sbci	r31, 0xFD	; 253
    494a:	80 81       	ld	r24, Z
    494c:	91 81       	ldd	r25, Z+1	; 0x01
    494e:	d8 01       	movw	r26, r16
    4950:	8d 93       	st	X+, r24
    4952:	9c 93       	st	X, r25
    4954:	6c 2d       	mov	r22, r12
    4956:	70 e0       	ldi	r23, 0x00	; 0
    4958:	84 e0       	ldi	r24, 0x04	; 4
    495a:	90 e0       	ldi	r25, 0x00	; 0
    495c:	6a d7       	rcall	.+3796   	; 0x5832 <calloc>
    495e:	1c 01       	movw	r2, r24
    4960:	61 e0       	ldi	r22, 0x01	; 1
    4962:	70 e0       	ldi	r23, 0x00	; 0
    4964:	86 e0       	ldi	r24, 0x06	; 6
    4966:	90 e0       	ldi	r25, 0x00	; 0
    4968:	64 d7       	rcall	.+3784   	; 0x5832 <calloc>
    496a:	7c 01       	movw	r14, r24
    496c:	4c 2d       	mov	r20, r12
    496e:	b1 01       	movw	r22, r2
    4970:	2b d5       	rcall	.+2646   	; 0x53c8 <fifo_init>
    4972:	f8 01       	movw	r30, r16
    4974:	f5 82       	std	Z+5, r15	; 0x05
    4976:	e4 82       	std	Z+4, r14	; 0x04
    4978:	6a 2d       	mov	r22, r10
    497a:	70 e0       	ldi	r23, 0x00	; 0
    497c:	84 e0       	ldi	r24, 0x04	; 4
    497e:	90 e0       	ldi	r25, 0x00	; 0
    4980:	58 d7       	rcall	.+3760   	; 0x5832 <calloc>
    4982:	1c 01       	movw	r2, r24
    4984:	61 e0       	ldi	r22, 0x01	; 1
    4986:	70 e0       	ldi	r23, 0x00	; 0
    4988:	86 e0       	ldi	r24, 0x06	; 6
    498a:	90 e0       	ldi	r25, 0x00	; 0
    498c:	52 d7       	rcall	.+3748   	; 0x5832 <calloc>
    498e:	7c 01       	movw	r14, r24
    4990:	4a 2d       	mov	r20, r10
    4992:	b1 01       	movw	r22, r2
    4994:	19 d5       	rcall	.+2610   	; 0x53c8 <fifo_init>
    4996:	d8 01       	movw	r26, r16
    4998:	13 96       	adiw	r26, 0x03	; 3
    499a:	fc 92       	st	X, r15
    499c:	ee 92       	st	-X, r14
    499e:	12 97       	sbiw	r26, 0x02	; 2
    49a0:	17 96       	adiw	r26, 0x07	; 7
    49a2:	9c 92       	st	X, r9
    49a4:	8e 92       	st	-X, r8
    49a6:	16 97       	sbiw	r26, 0x06	; 6
    49a8:	ff b6       	in	r15, 0x3f	; 63
    49aa:	f8 94       	cli
    49ac:	ed 91       	ld	r30, X+
    49ae:	fc 91       	ld	r31, X
    49b0:	11 97       	sbiw	r26, 0x01	; 1
    49b2:	36 97       	sbiw	r30, 0x06	; 6
    49b4:	80 81       	ld	r24, Z
    49b6:	82 60       	ori	r24, 0x02	; 2
    49b8:	80 83       	st	Z, r24
    49ba:	8d 90       	ld	r8, X+
    49bc:	9c 90       	ld	r9, X
    49be:	c3 01       	movw	r24, r6
    49c0:	b2 01       	movw	r22, r4
    49c2:	1c d6       	rcall	.+3128   	; 0x55fc <__floatunsisf>
    49c4:	20 e0       	ldi	r18, 0x00	; 0
    49c6:	30 e0       	ldi	r19, 0x00	; 0
    49c8:	40 e0       	ldi	r20, 0x00	; 0
    49ca:	51 e4       	ldi	r21, 0x41	; 65
    49cc:	a5 d6       	rcall	.+3402   	; 0x5718 <__mulsf3>
    49ce:	9b 01       	movw	r18, r22
    49d0:	ac 01       	movw	r20, r24
    49d2:	60 e0       	ldi	r22, 0x00	; 0
    49d4:	74 e2       	ldi	r23, 0x24	; 36
    49d6:	84 e7       	ldi	r24, 0x74	; 116
    49d8:	9b e4       	ldi	r25, 0x4B	; 75
    49da:	77 d5       	rcall	.+2798   	; 0x54ca <__divsf3>
    49dc:	20 e0       	ldi	r18, 0x00	; 0
    49de:	30 e0       	ldi	r19, 0x00	; 0
    49e0:	40 e8       	ldi	r20, 0x80	; 128
    49e2:	5f e3       	ldi	r21, 0x3F	; 63
    49e4:	0d d5       	rcall	.+2586   	; 0x5400 <__subsf3>
    49e6:	de d5       	rcall	.+3004   	; 0x55a4 <__fixunssfsi>
    49e8:	f4 01       	movw	r30, r8
    49ea:	32 97       	sbiw	r30, 0x02	; 2
    49ec:	60 83       	st	Z, r22
    49ee:	d8 01       	movw	r26, r16
    49f0:	ed 91       	ld	r30, X+
    49f2:	fc 91       	ld	r31, X
    49f4:	11 97       	sbiw	r26, 0x01	; 1
    49f6:	35 97       	sbiw	r30, 0x05	; 5
    49f8:	88 e9       	ldi	r24, 0x98	; 152
    49fa:	80 83       	st	Z, r24
    49fc:	ed 91       	ld	r30, X+
    49fe:	fc 91       	ld	r31, X
    4a00:	34 97       	sbiw	r30, 0x04	; 4
    4a02:	86 e0       	ldi	r24, 0x06	; 6
    4a04:	80 83       	st	Z, r24
    4a06:	ff be       	out	0x3f, r15	; 63
    4a08:	c8 01       	movw	r24, r16
    4a0a:	df 91       	pop	r29
    4a0c:	cf 91       	pop	r28
    4a0e:	1f 91       	pop	r17
    4a10:	0f 91       	pop	r16
    4a12:	ff 90       	pop	r15
    4a14:	ef 90       	pop	r14
    4a16:	cf 90       	pop	r12
    4a18:	af 90       	pop	r10
    4a1a:	9f 90       	pop	r9
    4a1c:	8f 90       	pop	r8
    4a1e:	7f 90       	pop	r7
    4a20:	6f 90       	pop	r6
    4a22:	5f 90       	pop	r5
    4a24:	4f 90       	pop	r4
    4a26:	3f 90       	pop	r3
    4a28:	2f 90       	pop	r2
    4a2a:	08 95       	ret

00004a2c <serial_send_byte>:
    4a2c:	cf 93       	push	r28
    4a2e:	df 93       	push	r29
    4a30:	ec 01       	movw	r28, r24
    4a32:	ea 81       	ldd	r30, Y+2	; 0x02
    4a34:	fb 81       	ldd	r31, Y+3	; 0x03
    4a36:	93 81       	ldd	r25, Z+3	; 0x03
    4a38:	82 81       	ldd	r24, Z+2	; 0x02
    4a3a:	25 81       	ldd	r18, Z+5	; 0x05
    4a3c:	98 1b       	sub	r25, r24
    4a3e:	92 23       	and	r25, r18
    4a40:	84 81       	ldd	r24, Z+4	; 0x04
    4a42:	98 17       	cp	r25, r24
    4a44:	a1 f0       	breq	.+40     	; 0x4a6e <serial_send_byte+0x42>
    4a46:	93 81       	ldd	r25, Z+3	; 0x03
    4a48:	26 95       	lsr	r18
    4a4a:	29 23       	and	r18, r25
    4a4c:	a0 81       	ld	r26, Z
    4a4e:	b1 81       	ldd	r27, Z+1	; 0x01
    4a50:	a2 0f       	add	r26, r18
    4a52:	b1 1d       	adc	r27, r1
    4a54:	6c 93       	st	X, r22
    4a56:	9f 5f       	subi	r25, 0xFF	; 255
    4a58:	25 81       	ldd	r18, Z+5	; 0x05
    4a5a:	92 23       	and	r25, r18
    4a5c:	93 83       	std	Z+3, r25	; 0x03
    4a5e:	e8 81       	ld	r30, Y
    4a60:	f9 81       	ldd	r31, Y+1	; 0x01
    4a62:	35 97       	sbiw	r30, 0x05	; 5
    4a64:	80 81       	ld	r24, Z
    4a66:	80 62       	ori	r24, 0x20	; 32
    4a68:	80 83       	st	Z, r24
    4a6a:	80 e0       	ldi	r24, 0x00	; 0
    4a6c:	01 c0       	rjmp	.+2      	; 0x4a70 <serial_send_byte+0x44>
    4a6e:	82 e0       	ldi	r24, 0x02	; 2
    4a70:	df 91       	pop	r29
    4a72:	cf 91       	pop	r28
    4a74:	08 95       	ret

00004a76 <serial_send_bytes>:
    4a76:	ef 92       	push	r14
    4a78:	ff 92       	push	r15
    4a7a:	0f 93       	push	r16
    4a7c:	1f 93       	push	r17
    4a7e:	cf 93       	push	r28
    4a80:	df 93       	push	r29
    4a82:	7c 01       	movw	r14, r24
    4a84:	dc 01       	movw	r26, r24
    4a86:	12 96       	adiw	r26, 0x02	; 2
    4a88:	ed 91       	ld	r30, X+
    4a8a:	fc 91       	ld	r31, X
    4a8c:	13 97       	sbiw	r26, 0x03	; 3
    4a8e:	93 81       	ldd	r25, Z+3	; 0x03
    4a90:	82 81       	ldd	r24, Z+2	; 0x02
    4a92:	98 1b       	sub	r25, r24
    4a94:	85 81       	ldd	r24, Z+5	; 0x05
    4a96:	98 23       	and	r25, r24
    4a98:	84 81       	ldd	r24, Z+4	; 0x04
    4a9a:	89 1b       	sub	r24, r25
    4a9c:	86 17       	cp	r24, r22
    4a9e:	98 f1       	brcs	.+102    	; 0x4b06 <serial_send_bytes+0x90>
    4aa0:	66 23       	and	r22, r22
    4aa2:	41 f1       	breq	.+80     	; 0x4af4 <serial_send_bytes+0x7e>
    4aa4:	84 2f       	mov	r24, r20
    4aa6:	95 2f       	mov	r25, r21
    4aa8:	dc 01       	movw	r26, r24
    4aaa:	61 50       	subi	r22, 0x01	; 1
    4aac:	46 2f       	mov	r20, r22
    4aae:	50 e0       	ldi	r21, 0x00	; 0
    4ab0:	4f 5f       	subi	r20, 0xFF	; 255
    4ab2:	5f 4f       	sbci	r21, 0xFF	; 255
    4ab4:	48 0f       	add	r20, r24
    4ab6:	59 1f       	adc	r21, r25
    4ab8:	e7 01       	movw	r28, r14
    4aba:	ea 81       	ldd	r30, Y+2	; 0x02
    4abc:	fb 81       	ldd	r31, Y+3	; 0x03
    4abe:	93 81       	ldd	r25, Z+3	; 0x03
    4ac0:	82 81       	ldd	r24, Z+2	; 0x02
    4ac2:	25 81       	ldd	r18, Z+5	; 0x05
    4ac4:	98 1b       	sub	r25, r24
    4ac6:	92 23       	and	r25, r18
    4ac8:	84 81       	ldd	r24, Z+4	; 0x04
    4aca:	98 17       	cp	r25, r24
    4acc:	79 f0       	breq	.+30     	; 0x4aec <serial_send_bytes+0x76>
    4ace:	8c 91       	ld	r24, X
    4ad0:	93 81       	ldd	r25, Z+3	; 0x03
    4ad2:	26 95       	lsr	r18
    4ad4:	29 23       	and	r18, r25
    4ad6:	60 81       	ld	r22, Z
    4ad8:	71 81       	ldd	r23, Z+1	; 0x01
    4ada:	8b 01       	movw	r16, r22
    4adc:	02 0f       	add	r16, r18
    4ade:	11 1d       	adc	r17, r1
    4ae0:	e8 01       	movw	r28, r16
    4ae2:	88 83       	st	Y, r24
    4ae4:	9f 5f       	subi	r25, 0xFF	; 255
    4ae6:	85 81       	ldd	r24, Z+5	; 0x05
    4ae8:	98 23       	and	r25, r24
    4aea:	93 83       	std	Z+3, r25	; 0x03
    4aec:	11 96       	adiw	r26, 0x01	; 1
    4aee:	a4 17       	cp	r26, r20
    4af0:	b5 07       	cpc	r27, r21
    4af2:	11 f7       	brne	.-60     	; 0x4ab8 <serial_send_bytes+0x42>
    4af4:	d7 01       	movw	r26, r14
    4af6:	ed 91       	ld	r30, X+
    4af8:	fc 91       	ld	r31, X
    4afa:	35 97       	sbiw	r30, 0x05	; 5
    4afc:	80 81       	ld	r24, Z
    4afe:	80 62       	ori	r24, 0x20	; 32
    4b00:	80 83       	st	Z, r24
    4b02:	80 e0       	ldi	r24, 0x00	; 0
    4b04:	01 c0       	rjmp	.+2      	; 0x4b08 <serial_send_bytes+0x92>
    4b06:	82 e0       	ldi	r24, 0x02	; 2
    4b08:	df 91       	pop	r29
    4b0a:	cf 91       	pop	r28
    4b0c:	1f 91       	pop	r17
    4b0e:	0f 91       	pop	r16
    4b10:	ff 90       	pop	r15
    4b12:	ef 90       	pop	r14
    4b14:	08 95       	ret

00004b16 <serial_get_byte>:
    4b16:	dc 01       	movw	r26, r24
    4b18:	14 96       	adiw	r26, 0x04	; 4
    4b1a:	ed 91       	ld	r30, X+
    4b1c:	fc 91       	ld	r31, X
    4b1e:	15 97       	sbiw	r26, 0x05	; 5
    4b20:	93 81       	ldd	r25, Z+3	; 0x03
    4b22:	82 81       	ldd	r24, Z+2	; 0x02
    4b24:	98 17       	cp	r25, r24
    4b26:	89 f0       	breq	.+34     	; 0x4b4a <serial_get_byte+0x34>
    4b28:	92 81       	ldd	r25, Z+2	; 0x02
    4b2a:	85 81       	ldd	r24, Z+5	; 0x05
    4b2c:	86 95       	lsr	r24
    4b2e:	89 23       	and	r24, r25
    4b30:	a0 81       	ld	r26, Z
    4b32:	b1 81       	ldd	r27, Z+1	; 0x01
    4b34:	a8 0f       	add	r26, r24
    4b36:	b1 1d       	adc	r27, r1
    4b38:	8c 91       	ld	r24, X
    4b3a:	db 01       	movw	r26, r22
    4b3c:	8c 93       	st	X, r24
    4b3e:	9f 5f       	subi	r25, 0xFF	; 255
    4b40:	85 81       	ldd	r24, Z+5	; 0x05
    4b42:	98 23       	and	r25, r24
    4b44:	92 83       	std	Z+2, r25	; 0x02
    4b46:	80 e0       	ldi	r24, 0x00	; 0
    4b48:	08 95       	ret
    4b4a:	83 e0       	ldi	r24, 0x03	; 3
    4b4c:	08 95       	ret

00004b4e <__vector_25>:
    4b4e:	1f 92       	push	r1
    4b50:	0f 92       	push	r0
    4b52:	0f b6       	in	r0, 0x3f	; 63
    4b54:	0f 92       	push	r0
    4b56:	11 24       	eor	r1, r1
    4b58:	0b b6       	in	r0, 0x3b	; 59
    4b5a:	0f 92       	push	r0
    4b5c:	2f 93       	push	r18
    4b5e:	3f 93       	push	r19
    4b60:	4f 93       	push	r20
    4b62:	5f 93       	push	r21
    4b64:	6f 93       	push	r22
    4b66:	7f 93       	push	r23
    4b68:	8f 93       	push	r24
    4b6a:	9f 93       	push	r25
    4b6c:	af 93       	push	r26
    4b6e:	bf 93       	push	r27
    4b70:	cf 93       	push	r28
    4b72:	df 93       	push	r29
    4b74:	ef 93       	push	r30
    4b76:	ff 93       	push	r31
    4b78:	a0 91 3b 1a 	lds	r26, 0x1A3B	; 0x801a3b <_ser_handle>
    4b7c:	b0 91 3c 1a 	lds	r27, 0x1A3C	; 0x801a3c <_ser_handle+0x1>
    4b80:	10 97       	sbiw	r26, 0x00	; 0
    4b82:	11 f1       	breq	.+68     	; 0x4bc8 <__vector_25+0x7a>
    4b84:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    4b88:	14 96       	adiw	r26, 0x04	; 4
    4b8a:	ed 91       	ld	r30, X+
    4b8c:	fc 91       	ld	r31, X
    4b8e:	15 97       	sbiw	r26, 0x05	; 5
    4b90:	93 81       	ldd	r25, Z+3	; 0x03
    4b92:	82 81       	ldd	r24, Z+2	; 0x02
    4b94:	25 81       	ldd	r18, Z+5	; 0x05
    4b96:	98 1b       	sub	r25, r24
    4b98:	92 23       	and	r25, r18
    4b9a:	84 81       	ldd	r24, Z+4	; 0x04
    4b9c:	98 17       	cp	r25, r24
    4b9e:	61 f0       	breq	.+24     	; 0x4bb8 <__vector_25+0x6a>
    4ba0:	83 81       	ldd	r24, Z+3	; 0x03
    4ba2:	26 95       	lsr	r18
    4ba4:	28 23       	and	r18, r24
    4ba6:	c0 81       	ld	r28, Z
    4ba8:	d1 81       	ldd	r29, Z+1	; 0x01
    4baa:	c2 0f       	add	r28, r18
    4bac:	d1 1d       	adc	r29, r1
    4bae:	68 83       	st	Y, r22
    4bb0:	8f 5f       	subi	r24, 0xFF	; 255
    4bb2:	95 81       	ldd	r25, Z+5	; 0x05
    4bb4:	89 23       	and	r24, r25
    4bb6:	83 83       	std	Z+3, r24	; 0x03
    4bb8:	16 96       	adiw	r26, 0x06	; 6
    4bba:	ed 91       	ld	r30, X+
    4bbc:	fc 91       	ld	r31, X
    4bbe:	17 97       	sbiw	r26, 0x07	; 7
    4bc0:	30 97       	sbiw	r30, 0x00	; 0
    4bc2:	11 f0       	breq	.+4      	; 0x4bc8 <__vector_25+0x7a>
    4bc4:	cd 01       	movw	r24, r26
    4bc6:	19 95       	eicall
    4bc8:	ff 91       	pop	r31
    4bca:	ef 91       	pop	r30
    4bcc:	df 91       	pop	r29
    4bce:	cf 91       	pop	r28
    4bd0:	bf 91       	pop	r27
    4bd2:	af 91       	pop	r26
    4bd4:	9f 91       	pop	r25
    4bd6:	8f 91       	pop	r24
    4bd8:	7f 91       	pop	r23
    4bda:	6f 91       	pop	r22
    4bdc:	5f 91       	pop	r21
    4bde:	4f 91       	pop	r20
    4be0:	3f 91       	pop	r19
    4be2:	2f 91       	pop	r18
    4be4:	0f 90       	pop	r0
    4be6:	0b be       	out	0x3b, r0	; 59
    4be8:	0f 90       	pop	r0
    4bea:	0f be       	out	0x3f, r0	; 63
    4bec:	0f 90       	pop	r0
    4bee:	1f 90       	pop	r1
    4bf0:	18 95       	reti

00004bf2 <__vector_26>:
    4bf2:	1f 92       	push	r1
    4bf4:	0f 92       	push	r0
    4bf6:	0f b6       	in	r0, 0x3f	; 63
    4bf8:	0f 92       	push	r0
    4bfa:	11 24       	eor	r1, r1
    4bfc:	0b b6       	in	r0, 0x3b	; 59
    4bfe:	0f 92       	push	r0
    4c00:	2f 93       	push	r18
    4c02:	8f 93       	push	r24
    4c04:	9f 93       	push	r25
    4c06:	af 93       	push	r26
    4c08:	bf 93       	push	r27
    4c0a:	ef 93       	push	r30
    4c0c:	ff 93       	push	r31
    4c0e:	e0 91 3b 1a 	lds	r30, 0x1A3B	; 0x801a3b <_ser_handle>
    4c12:	f0 91 3c 1a 	lds	r31, 0x1A3C	; 0x801a3c <_ser_handle+0x1>
    4c16:	30 97       	sbiw	r30, 0x00	; 0
    4c18:	b9 f0       	breq	.+46     	; 0x4c48 <__vector_26+0x56>
    4c1a:	02 80       	ldd	r0, Z+2	; 0x02
    4c1c:	f3 81       	ldd	r31, Z+3	; 0x03
    4c1e:	e0 2d       	mov	r30, r0
    4c20:	93 81       	ldd	r25, Z+3	; 0x03
    4c22:	82 81       	ldd	r24, Z+2	; 0x02
    4c24:	98 17       	cp	r25, r24
    4c26:	b1 f0       	breq	.+44     	; 0x4c54 <__vector_26+0x62>
    4c28:	92 81       	ldd	r25, Z+2	; 0x02
    4c2a:	85 81       	ldd	r24, Z+5	; 0x05
    4c2c:	28 2f       	mov	r18, r24
    4c2e:	26 95       	lsr	r18
    4c30:	29 23       	and	r18, r25
    4c32:	a0 81       	ld	r26, Z
    4c34:	b1 81       	ldd	r27, Z+1	; 0x01
    4c36:	a2 0f       	add	r26, r18
    4c38:	b1 1d       	adc	r27, r1
    4c3a:	2c 91       	ld	r18, X
    4c3c:	9f 5f       	subi	r25, 0xFF	; 255
    4c3e:	89 23       	and	r24, r25
    4c40:	82 83       	std	Z+2, r24	; 0x02
    4c42:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    4c46:	0b c0       	rjmp	.+22     	; 0x4c5e <__vector_26+0x6c>
    4c48:	e1 ec       	ldi	r30, 0xC1	; 193
    4c4a:	f0 e0       	ldi	r31, 0x00	; 0
    4c4c:	80 81       	ld	r24, Z
    4c4e:	8f 7d       	andi	r24, 0xDF	; 223
    4c50:	80 83       	st	Z, r24
    4c52:	05 c0       	rjmp	.+10     	; 0x4c5e <__vector_26+0x6c>
    4c54:	e1 ec       	ldi	r30, 0xC1	; 193
    4c56:	f0 e0       	ldi	r31, 0x00	; 0
    4c58:	80 81       	ld	r24, Z
    4c5a:	8f 7d       	andi	r24, 0xDF	; 223
    4c5c:	80 83       	st	Z, r24
    4c5e:	ff 91       	pop	r31
    4c60:	ef 91       	pop	r30
    4c62:	bf 91       	pop	r27
    4c64:	af 91       	pop	r26
    4c66:	9f 91       	pop	r25
    4c68:	8f 91       	pop	r24
    4c6a:	2f 91       	pop	r18
    4c6c:	0f 90       	pop	r0
    4c6e:	0b be       	out	0x3b, r0	; 59
    4c70:	0f 90       	pop	r0
    4c72:	0f be       	out	0x3f, r0	; 63
    4c74:	0f 90       	pop	r0
    4c76:	1f 90       	pop	r1
    4c78:	18 95       	reti

00004c7a <__vector_36>:
    4c7a:	1f 92       	push	r1
    4c7c:	0f 92       	push	r0
    4c7e:	0f b6       	in	r0, 0x3f	; 63
    4c80:	0f 92       	push	r0
    4c82:	11 24       	eor	r1, r1
    4c84:	0b b6       	in	r0, 0x3b	; 59
    4c86:	0f 92       	push	r0
    4c88:	2f 93       	push	r18
    4c8a:	3f 93       	push	r19
    4c8c:	4f 93       	push	r20
    4c8e:	5f 93       	push	r21
    4c90:	6f 93       	push	r22
    4c92:	7f 93       	push	r23
    4c94:	8f 93       	push	r24
    4c96:	9f 93       	push	r25
    4c98:	af 93       	push	r26
    4c9a:	bf 93       	push	r27
    4c9c:	cf 93       	push	r28
    4c9e:	df 93       	push	r29
    4ca0:	ef 93       	push	r30
    4ca2:	ff 93       	push	r31
    4ca4:	a0 91 3d 1a 	lds	r26, 0x1A3D	; 0x801a3d <_ser_handle+0x2>
    4ca8:	b0 91 3e 1a 	lds	r27, 0x1A3E	; 0x801a3e <_ser_handle+0x3>
    4cac:	10 97       	sbiw	r26, 0x00	; 0
    4cae:	11 f1       	breq	.+68     	; 0x4cf4 <__vector_36+0x7a>
    4cb0:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    4cb4:	14 96       	adiw	r26, 0x04	; 4
    4cb6:	ed 91       	ld	r30, X+
    4cb8:	fc 91       	ld	r31, X
    4cba:	15 97       	sbiw	r26, 0x05	; 5
    4cbc:	93 81       	ldd	r25, Z+3	; 0x03
    4cbe:	82 81       	ldd	r24, Z+2	; 0x02
    4cc0:	25 81       	ldd	r18, Z+5	; 0x05
    4cc2:	98 1b       	sub	r25, r24
    4cc4:	92 23       	and	r25, r18
    4cc6:	84 81       	ldd	r24, Z+4	; 0x04
    4cc8:	98 17       	cp	r25, r24
    4cca:	61 f0       	breq	.+24     	; 0x4ce4 <__vector_36+0x6a>
    4ccc:	83 81       	ldd	r24, Z+3	; 0x03
    4cce:	26 95       	lsr	r18
    4cd0:	28 23       	and	r18, r24
    4cd2:	c0 81       	ld	r28, Z
    4cd4:	d1 81       	ldd	r29, Z+1	; 0x01
    4cd6:	c2 0f       	add	r28, r18
    4cd8:	d1 1d       	adc	r29, r1
    4cda:	68 83       	st	Y, r22
    4cdc:	8f 5f       	subi	r24, 0xFF	; 255
    4cde:	95 81       	ldd	r25, Z+5	; 0x05
    4ce0:	89 23       	and	r24, r25
    4ce2:	83 83       	std	Z+3, r24	; 0x03
    4ce4:	16 96       	adiw	r26, 0x06	; 6
    4ce6:	ed 91       	ld	r30, X+
    4ce8:	fc 91       	ld	r31, X
    4cea:	17 97       	sbiw	r26, 0x07	; 7
    4cec:	30 97       	sbiw	r30, 0x00	; 0
    4cee:	11 f0       	breq	.+4      	; 0x4cf4 <__vector_36+0x7a>
    4cf0:	cd 01       	movw	r24, r26
    4cf2:	19 95       	eicall
    4cf4:	ff 91       	pop	r31
    4cf6:	ef 91       	pop	r30
    4cf8:	df 91       	pop	r29
    4cfa:	cf 91       	pop	r28
    4cfc:	bf 91       	pop	r27
    4cfe:	af 91       	pop	r26
    4d00:	9f 91       	pop	r25
    4d02:	8f 91       	pop	r24
    4d04:	7f 91       	pop	r23
    4d06:	6f 91       	pop	r22
    4d08:	5f 91       	pop	r21
    4d0a:	4f 91       	pop	r20
    4d0c:	3f 91       	pop	r19
    4d0e:	2f 91       	pop	r18
    4d10:	0f 90       	pop	r0
    4d12:	0b be       	out	0x3b, r0	; 59
    4d14:	0f 90       	pop	r0
    4d16:	0f be       	out	0x3f, r0	; 63
    4d18:	0f 90       	pop	r0
    4d1a:	1f 90       	pop	r1
    4d1c:	18 95       	reti

00004d1e <__vector_37>:
    4d1e:	1f 92       	push	r1
    4d20:	0f 92       	push	r0
    4d22:	0f b6       	in	r0, 0x3f	; 63
    4d24:	0f 92       	push	r0
    4d26:	11 24       	eor	r1, r1
    4d28:	0b b6       	in	r0, 0x3b	; 59
    4d2a:	0f 92       	push	r0
    4d2c:	2f 93       	push	r18
    4d2e:	8f 93       	push	r24
    4d30:	9f 93       	push	r25
    4d32:	af 93       	push	r26
    4d34:	bf 93       	push	r27
    4d36:	ef 93       	push	r30
    4d38:	ff 93       	push	r31
    4d3a:	e0 91 3d 1a 	lds	r30, 0x1A3D	; 0x801a3d <_ser_handle+0x2>
    4d3e:	f0 91 3e 1a 	lds	r31, 0x1A3E	; 0x801a3e <_ser_handle+0x3>
    4d42:	30 97       	sbiw	r30, 0x00	; 0
    4d44:	b9 f0       	breq	.+46     	; 0x4d74 <__vector_37+0x56>
    4d46:	02 80       	ldd	r0, Z+2	; 0x02
    4d48:	f3 81       	ldd	r31, Z+3	; 0x03
    4d4a:	e0 2d       	mov	r30, r0
    4d4c:	93 81       	ldd	r25, Z+3	; 0x03
    4d4e:	82 81       	ldd	r24, Z+2	; 0x02
    4d50:	98 17       	cp	r25, r24
    4d52:	b1 f0       	breq	.+44     	; 0x4d80 <__vector_37+0x62>
    4d54:	92 81       	ldd	r25, Z+2	; 0x02
    4d56:	85 81       	ldd	r24, Z+5	; 0x05
    4d58:	28 2f       	mov	r18, r24
    4d5a:	26 95       	lsr	r18
    4d5c:	29 23       	and	r18, r25
    4d5e:	a0 81       	ld	r26, Z
    4d60:	b1 81       	ldd	r27, Z+1	; 0x01
    4d62:	a2 0f       	add	r26, r18
    4d64:	b1 1d       	adc	r27, r1
    4d66:	2c 91       	ld	r18, X
    4d68:	9f 5f       	subi	r25, 0xFF	; 255
    4d6a:	89 23       	and	r24, r25
    4d6c:	82 83       	std	Z+2, r24	; 0x02
    4d6e:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    4d72:	0b c0       	rjmp	.+22     	; 0x4d8a <__vector_37+0x6c>
    4d74:	e9 ec       	ldi	r30, 0xC9	; 201
    4d76:	f0 e0       	ldi	r31, 0x00	; 0
    4d78:	80 81       	ld	r24, Z
    4d7a:	8f 7d       	andi	r24, 0xDF	; 223
    4d7c:	80 83       	st	Z, r24
    4d7e:	05 c0       	rjmp	.+10     	; 0x4d8a <__vector_37+0x6c>
    4d80:	e9 ec       	ldi	r30, 0xC9	; 201
    4d82:	f0 e0       	ldi	r31, 0x00	; 0
    4d84:	80 81       	ld	r24, Z
    4d86:	8f 7d       	andi	r24, 0xDF	; 223
    4d88:	80 83       	st	Z, r24
    4d8a:	ff 91       	pop	r31
    4d8c:	ef 91       	pop	r30
    4d8e:	bf 91       	pop	r27
    4d90:	af 91       	pop	r26
    4d92:	9f 91       	pop	r25
    4d94:	8f 91       	pop	r24
    4d96:	2f 91       	pop	r18
    4d98:	0f 90       	pop	r0
    4d9a:	0b be       	out	0x3b, r0	; 59
    4d9c:	0f 90       	pop	r0
    4d9e:	0f be       	out	0x3f, r0	; 63
    4da0:	0f 90       	pop	r0
    4da2:	1f 90       	pop	r1
    4da4:	18 95       	reti

00004da6 <__vector_51>:
    4da6:	1f 92       	push	r1
    4da8:	0f 92       	push	r0
    4daa:	0f b6       	in	r0, 0x3f	; 63
    4dac:	0f 92       	push	r0
    4dae:	11 24       	eor	r1, r1
    4db0:	0b b6       	in	r0, 0x3b	; 59
    4db2:	0f 92       	push	r0
    4db4:	2f 93       	push	r18
    4db6:	3f 93       	push	r19
    4db8:	4f 93       	push	r20
    4dba:	5f 93       	push	r21
    4dbc:	6f 93       	push	r22
    4dbe:	7f 93       	push	r23
    4dc0:	8f 93       	push	r24
    4dc2:	9f 93       	push	r25
    4dc4:	af 93       	push	r26
    4dc6:	bf 93       	push	r27
    4dc8:	cf 93       	push	r28
    4dca:	df 93       	push	r29
    4dcc:	ef 93       	push	r30
    4dce:	ff 93       	push	r31
    4dd0:	a0 91 3f 1a 	lds	r26, 0x1A3F	; 0x801a3f <_ser_handle+0x4>
    4dd4:	b0 91 40 1a 	lds	r27, 0x1A40	; 0x801a40 <_ser_handle+0x5>
    4dd8:	10 97       	sbiw	r26, 0x00	; 0
    4dda:	11 f1       	breq	.+68     	; 0x4e20 <__vector_51+0x7a>
    4ddc:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    4de0:	14 96       	adiw	r26, 0x04	; 4
    4de2:	ed 91       	ld	r30, X+
    4de4:	fc 91       	ld	r31, X
    4de6:	15 97       	sbiw	r26, 0x05	; 5
    4de8:	93 81       	ldd	r25, Z+3	; 0x03
    4dea:	82 81       	ldd	r24, Z+2	; 0x02
    4dec:	25 81       	ldd	r18, Z+5	; 0x05
    4dee:	98 1b       	sub	r25, r24
    4df0:	92 23       	and	r25, r18
    4df2:	84 81       	ldd	r24, Z+4	; 0x04
    4df4:	98 17       	cp	r25, r24
    4df6:	61 f0       	breq	.+24     	; 0x4e10 <__vector_51+0x6a>
    4df8:	83 81       	ldd	r24, Z+3	; 0x03
    4dfa:	26 95       	lsr	r18
    4dfc:	28 23       	and	r18, r24
    4dfe:	c0 81       	ld	r28, Z
    4e00:	d1 81       	ldd	r29, Z+1	; 0x01
    4e02:	c2 0f       	add	r28, r18
    4e04:	d1 1d       	adc	r29, r1
    4e06:	68 83       	st	Y, r22
    4e08:	8f 5f       	subi	r24, 0xFF	; 255
    4e0a:	95 81       	ldd	r25, Z+5	; 0x05
    4e0c:	89 23       	and	r24, r25
    4e0e:	83 83       	std	Z+3, r24	; 0x03
    4e10:	16 96       	adiw	r26, 0x06	; 6
    4e12:	ed 91       	ld	r30, X+
    4e14:	fc 91       	ld	r31, X
    4e16:	17 97       	sbiw	r26, 0x07	; 7
    4e18:	30 97       	sbiw	r30, 0x00	; 0
    4e1a:	11 f0       	breq	.+4      	; 0x4e20 <__vector_51+0x7a>
    4e1c:	cd 01       	movw	r24, r26
    4e1e:	19 95       	eicall
    4e20:	ff 91       	pop	r31
    4e22:	ef 91       	pop	r30
    4e24:	df 91       	pop	r29
    4e26:	cf 91       	pop	r28
    4e28:	bf 91       	pop	r27
    4e2a:	af 91       	pop	r26
    4e2c:	9f 91       	pop	r25
    4e2e:	8f 91       	pop	r24
    4e30:	7f 91       	pop	r23
    4e32:	6f 91       	pop	r22
    4e34:	5f 91       	pop	r21
    4e36:	4f 91       	pop	r20
    4e38:	3f 91       	pop	r19
    4e3a:	2f 91       	pop	r18
    4e3c:	0f 90       	pop	r0
    4e3e:	0b be       	out	0x3b, r0	; 59
    4e40:	0f 90       	pop	r0
    4e42:	0f be       	out	0x3f, r0	; 63
    4e44:	0f 90       	pop	r0
    4e46:	1f 90       	pop	r1
    4e48:	18 95       	reti

00004e4a <__vector_52>:
    4e4a:	1f 92       	push	r1
    4e4c:	0f 92       	push	r0
    4e4e:	0f b6       	in	r0, 0x3f	; 63
    4e50:	0f 92       	push	r0
    4e52:	11 24       	eor	r1, r1
    4e54:	0b b6       	in	r0, 0x3b	; 59
    4e56:	0f 92       	push	r0
    4e58:	2f 93       	push	r18
    4e5a:	8f 93       	push	r24
    4e5c:	9f 93       	push	r25
    4e5e:	af 93       	push	r26
    4e60:	bf 93       	push	r27
    4e62:	ef 93       	push	r30
    4e64:	ff 93       	push	r31
    4e66:	e0 91 3f 1a 	lds	r30, 0x1A3F	; 0x801a3f <_ser_handle+0x4>
    4e6a:	f0 91 40 1a 	lds	r31, 0x1A40	; 0x801a40 <_ser_handle+0x5>
    4e6e:	30 97       	sbiw	r30, 0x00	; 0
    4e70:	b9 f0       	breq	.+46     	; 0x4ea0 <__vector_52+0x56>
    4e72:	02 80       	ldd	r0, Z+2	; 0x02
    4e74:	f3 81       	ldd	r31, Z+3	; 0x03
    4e76:	e0 2d       	mov	r30, r0
    4e78:	93 81       	ldd	r25, Z+3	; 0x03
    4e7a:	82 81       	ldd	r24, Z+2	; 0x02
    4e7c:	98 17       	cp	r25, r24
    4e7e:	b1 f0       	breq	.+44     	; 0x4eac <__vector_52+0x62>
    4e80:	92 81       	ldd	r25, Z+2	; 0x02
    4e82:	85 81       	ldd	r24, Z+5	; 0x05
    4e84:	28 2f       	mov	r18, r24
    4e86:	26 95       	lsr	r18
    4e88:	29 23       	and	r18, r25
    4e8a:	a0 81       	ld	r26, Z
    4e8c:	b1 81       	ldd	r27, Z+1	; 0x01
    4e8e:	a2 0f       	add	r26, r18
    4e90:	b1 1d       	adc	r27, r1
    4e92:	2c 91       	ld	r18, X
    4e94:	9f 5f       	subi	r25, 0xFF	; 255
    4e96:	89 23       	and	r24, r25
    4e98:	82 83       	std	Z+2, r24	; 0x02
    4e9a:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    4e9e:	0b c0       	rjmp	.+22     	; 0x4eb6 <__vector_52+0x6c>
    4ea0:	e1 ed       	ldi	r30, 0xD1	; 209
    4ea2:	f0 e0       	ldi	r31, 0x00	; 0
    4ea4:	80 81       	ld	r24, Z
    4ea6:	8f 7d       	andi	r24, 0xDF	; 223
    4ea8:	80 83       	st	Z, r24
    4eaa:	05 c0       	rjmp	.+10     	; 0x4eb6 <__vector_52+0x6c>
    4eac:	e1 ed       	ldi	r30, 0xD1	; 209
    4eae:	f0 e0       	ldi	r31, 0x00	; 0
    4eb0:	80 81       	ld	r24, Z
    4eb2:	8f 7d       	andi	r24, 0xDF	; 223
    4eb4:	80 83       	st	Z, r24
    4eb6:	ff 91       	pop	r31
    4eb8:	ef 91       	pop	r30
    4eba:	bf 91       	pop	r27
    4ebc:	af 91       	pop	r26
    4ebe:	9f 91       	pop	r25
    4ec0:	8f 91       	pop	r24
    4ec2:	2f 91       	pop	r18
    4ec4:	0f 90       	pop	r0
    4ec6:	0b be       	out	0x3b, r0	; 59
    4ec8:	0f 90       	pop	r0
    4eca:	0f be       	out	0x3f, r0	; 63
    4ecc:	0f 90       	pop	r0
    4ece:	1f 90       	pop	r1
    4ed0:	18 95       	reti

00004ed2 <__vector_54>:
    4ed2:	1f 92       	push	r1
    4ed4:	0f 92       	push	r0
    4ed6:	0f b6       	in	r0, 0x3f	; 63
    4ed8:	0f 92       	push	r0
    4eda:	11 24       	eor	r1, r1
    4edc:	0b b6       	in	r0, 0x3b	; 59
    4ede:	0f 92       	push	r0
    4ee0:	2f 93       	push	r18
    4ee2:	3f 93       	push	r19
    4ee4:	4f 93       	push	r20
    4ee6:	5f 93       	push	r21
    4ee8:	6f 93       	push	r22
    4eea:	7f 93       	push	r23
    4eec:	8f 93       	push	r24
    4eee:	9f 93       	push	r25
    4ef0:	af 93       	push	r26
    4ef2:	bf 93       	push	r27
    4ef4:	cf 93       	push	r28
    4ef6:	df 93       	push	r29
    4ef8:	ef 93       	push	r30
    4efa:	ff 93       	push	r31
    4efc:	a0 91 41 1a 	lds	r26, 0x1A41	; 0x801a41 <_ser_handle+0x6>
    4f00:	b0 91 42 1a 	lds	r27, 0x1A42	; 0x801a42 <_ser_handle+0x7>
    4f04:	10 97       	sbiw	r26, 0x00	; 0
    4f06:	11 f1       	breq	.+68     	; 0x4f4c <__vector_54+0x7a>
    4f08:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    4f0c:	14 96       	adiw	r26, 0x04	; 4
    4f0e:	ed 91       	ld	r30, X+
    4f10:	fc 91       	ld	r31, X
    4f12:	15 97       	sbiw	r26, 0x05	; 5
    4f14:	93 81       	ldd	r25, Z+3	; 0x03
    4f16:	82 81       	ldd	r24, Z+2	; 0x02
    4f18:	25 81       	ldd	r18, Z+5	; 0x05
    4f1a:	98 1b       	sub	r25, r24
    4f1c:	92 23       	and	r25, r18
    4f1e:	84 81       	ldd	r24, Z+4	; 0x04
    4f20:	98 17       	cp	r25, r24
    4f22:	61 f0       	breq	.+24     	; 0x4f3c <__vector_54+0x6a>
    4f24:	83 81       	ldd	r24, Z+3	; 0x03
    4f26:	26 95       	lsr	r18
    4f28:	28 23       	and	r18, r24
    4f2a:	c0 81       	ld	r28, Z
    4f2c:	d1 81       	ldd	r29, Z+1	; 0x01
    4f2e:	c2 0f       	add	r28, r18
    4f30:	d1 1d       	adc	r29, r1
    4f32:	68 83       	st	Y, r22
    4f34:	8f 5f       	subi	r24, 0xFF	; 255
    4f36:	95 81       	ldd	r25, Z+5	; 0x05
    4f38:	89 23       	and	r24, r25
    4f3a:	83 83       	std	Z+3, r24	; 0x03
    4f3c:	16 96       	adiw	r26, 0x06	; 6
    4f3e:	ed 91       	ld	r30, X+
    4f40:	fc 91       	ld	r31, X
    4f42:	17 97       	sbiw	r26, 0x07	; 7
    4f44:	30 97       	sbiw	r30, 0x00	; 0
    4f46:	11 f0       	breq	.+4      	; 0x4f4c <__vector_54+0x7a>
    4f48:	cd 01       	movw	r24, r26
    4f4a:	19 95       	eicall
    4f4c:	ff 91       	pop	r31
    4f4e:	ef 91       	pop	r30
    4f50:	df 91       	pop	r29
    4f52:	cf 91       	pop	r28
    4f54:	bf 91       	pop	r27
    4f56:	af 91       	pop	r26
    4f58:	9f 91       	pop	r25
    4f5a:	8f 91       	pop	r24
    4f5c:	7f 91       	pop	r23
    4f5e:	6f 91       	pop	r22
    4f60:	5f 91       	pop	r21
    4f62:	4f 91       	pop	r20
    4f64:	3f 91       	pop	r19
    4f66:	2f 91       	pop	r18
    4f68:	0f 90       	pop	r0
    4f6a:	0b be       	out	0x3b, r0	; 59
    4f6c:	0f 90       	pop	r0
    4f6e:	0f be       	out	0x3f, r0	; 63
    4f70:	0f 90       	pop	r0
    4f72:	1f 90       	pop	r1
    4f74:	18 95       	reti

00004f76 <__vector_55>:
    4f76:	1f 92       	push	r1
    4f78:	0f 92       	push	r0
    4f7a:	0f b6       	in	r0, 0x3f	; 63
    4f7c:	0f 92       	push	r0
    4f7e:	11 24       	eor	r1, r1
    4f80:	0b b6       	in	r0, 0x3b	; 59
    4f82:	0f 92       	push	r0
    4f84:	2f 93       	push	r18
    4f86:	8f 93       	push	r24
    4f88:	9f 93       	push	r25
    4f8a:	af 93       	push	r26
    4f8c:	bf 93       	push	r27
    4f8e:	ef 93       	push	r30
    4f90:	ff 93       	push	r31
    4f92:	e0 91 41 1a 	lds	r30, 0x1A41	; 0x801a41 <_ser_handle+0x6>
    4f96:	f0 91 42 1a 	lds	r31, 0x1A42	; 0x801a42 <_ser_handle+0x7>
    4f9a:	30 97       	sbiw	r30, 0x00	; 0
    4f9c:	b9 f0       	breq	.+46     	; 0x4fcc <__vector_55+0x56>
    4f9e:	02 80       	ldd	r0, Z+2	; 0x02
    4fa0:	f3 81       	ldd	r31, Z+3	; 0x03
    4fa2:	e0 2d       	mov	r30, r0
    4fa4:	93 81       	ldd	r25, Z+3	; 0x03
    4fa6:	82 81       	ldd	r24, Z+2	; 0x02
    4fa8:	98 17       	cp	r25, r24
    4faa:	b1 f0       	breq	.+44     	; 0x4fd8 <__vector_55+0x62>
    4fac:	92 81       	ldd	r25, Z+2	; 0x02
    4fae:	85 81       	ldd	r24, Z+5	; 0x05
    4fb0:	28 2f       	mov	r18, r24
    4fb2:	26 95       	lsr	r18
    4fb4:	29 23       	and	r18, r25
    4fb6:	a0 81       	ld	r26, Z
    4fb8:	b1 81       	ldd	r27, Z+1	; 0x01
    4fba:	a2 0f       	add	r26, r18
    4fbc:	b1 1d       	adc	r27, r1
    4fbe:	2c 91       	ld	r18, X
    4fc0:	9f 5f       	subi	r25, 0xFF	; 255
    4fc2:	89 23       	and	r24, r25
    4fc4:	82 83       	std	Z+2, r24	; 0x02
    4fc6:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    4fca:	0b c0       	rjmp	.+22     	; 0x4fe2 <__vector_55+0x6c>
    4fcc:	e1 e3       	ldi	r30, 0x31	; 49
    4fce:	f1 e0       	ldi	r31, 0x01	; 1
    4fd0:	80 81       	ld	r24, Z
    4fd2:	8f 7d       	andi	r24, 0xDF	; 223
    4fd4:	80 83       	st	Z, r24
    4fd6:	05 c0       	rjmp	.+10     	; 0x4fe2 <__vector_55+0x6c>
    4fd8:	e1 e3       	ldi	r30, 0x31	; 49
    4fda:	f1 e0       	ldi	r31, 0x01	; 1
    4fdc:	80 81       	ld	r24, Z
    4fde:	8f 7d       	andi	r24, 0xDF	; 223
    4fe0:	80 83       	st	Z, r24
    4fe2:	ff 91       	pop	r31
    4fe4:	ef 91       	pop	r30
    4fe6:	bf 91       	pop	r27
    4fe8:	af 91       	pop	r26
    4fea:	9f 91       	pop	r25
    4fec:	8f 91       	pop	r24
    4fee:	2f 91       	pop	r18
    4ff0:	0f 90       	pop	r0
    4ff2:	0b be       	out	0x3b, r0	; 59
    4ff4:	0f 90       	pop	r0
    4ff6:	0f be       	out	0x3f, r0	; 63
    4ff8:	0f 90       	pop	r0
    4ffa:	1f 90       	pop	r1
    4ffc:	18 95       	reti

00004ffe <usart_getchar>:
    4ffe:	cf 93       	push	r28
    5000:	df 93       	push	r29
    5002:	1f 92       	push	r1
    5004:	cd b7       	in	r28, 0x3d	; 61
    5006:	de b7       	in	r29, 0x3e	; 62
    5008:	be 01       	movw	r22, r28
    500a:	6f 5f       	subi	r22, 0xFF	; 255
    500c:	7f 4f       	sbci	r23, 0xFF	; 255
    500e:	80 91 43 1a 	lds	r24, 0x1A43	; 0x801a43 <_com_serial_instance>
    5012:	90 91 44 1a 	lds	r25, 0x1A44	; 0x801a44 <_com_serial_instance+0x1>
    5016:	7f dd       	rcall	.-1282   	; 0x4b16 <serial_get_byte>
    5018:	81 11       	cpse	r24, r1
    501a:	f6 cf       	rjmp	.-20     	; 0x5008 <usart_getchar+0xa>
    501c:	89 81       	ldd	r24, Y+1	; 0x01
    501e:	90 e0       	ldi	r25, 0x00	; 0
    5020:	0f 90       	pop	r0
    5022:	df 91       	pop	r29
    5024:	cf 91       	pop	r28
    5026:	08 95       	ret

00005028 <usart_putchar>:
    5028:	68 2f       	mov	r22, r24
    502a:	80 91 43 1a 	lds	r24, 0x1A43	; 0x801a43 <_com_serial_instance>
    502e:	90 91 44 1a 	lds	r25, 0x1A44	; 0x801a44 <_com_serial_instance+0x1>
    5032:	fc dc       	rcall	.-1544   	; 0x4a2c <serial_send_byte>
    5034:	80 e0       	ldi	r24, 0x00	; 0
    5036:	90 e0       	ldi	r25, 0x00	; 0
    5038:	08 95       	ret

0000503a <stdioCreate>:
    503a:	8f 92       	push	r8
    503c:	9f 92       	push	r9
    503e:	af 92       	push	r10
    5040:	cf 92       	push	r12
    5042:	ef 92       	push	r14
    5044:	0f 93       	push	r16
    5046:	81 2c       	mov	r8, r1
    5048:	91 2c       	mov	r9, r1
    504a:	68 94       	set
    504c:	aa 24       	eor	r10, r10
    504e:	a7 f8       	bld	r10, 7
    5050:	68 94       	set
    5052:	cc 24       	eor	r12, r12
    5054:	c7 f8       	bld	r12, 7
    5056:	e1 2c       	mov	r14, r1
    5058:	00 e0       	ldi	r16, 0x00	; 0
    505a:	23 e0       	ldi	r18, 0x03	; 3
    505c:	40 e0       	ldi	r20, 0x00	; 0
    505e:	51 ee       	ldi	r21, 0xE1	; 225
    5060:	60 e0       	ldi	r22, 0x00	; 0
    5062:	70 e0       	ldi	r23, 0x00	; 0
    5064:	4d dc       	rcall	.-1894   	; 0x4900 <serial_new_instance>
    5066:	90 93 44 1a 	sts	0x1A44, r25	; 0x801a44 <_com_serial_instance+0x1>
    506a:	80 93 43 1a 	sts	0x1A43, r24	; 0x801a43 <_com_serial_instance>
    506e:	ec e8       	ldi	r30, 0x8C	; 140
    5070:	fa e1       	ldi	r31, 0x1A	; 26
    5072:	82 e1       	ldi	r24, 0x12	; 18
    5074:	92 e0       	ldi	r25, 0x02	; 2
    5076:	91 83       	std	Z+1, r25	; 0x01
    5078:	80 83       	st	Z, r24
    507a:	93 83       	std	Z+3, r25	; 0x03
    507c:	82 83       	std	Z+2, r24	; 0x02
    507e:	0f 91       	pop	r16
    5080:	ef 90       	pop	r14
    5082:	cf 90       	pop	r12
    5084:	af 90       	pop	r10
    5086:	9f 90       	pop	r9
    5088:	8f 90       	pop	r8
    508a:	08 95       	ret

0000508c <_initTwiInterface>:
    508c:	80 91 53 1a 	lds	r24, 0x1A53	; 0x801a53 <_twiIsInitiated>
    5090:	81 11       	cpse	r24, r1
    5092:	0c c0       	rjmp	.+24     	; 0x50ac <_initTwiInterface+0x20>
    5094:	8c e0       	ldi	r24, 0x0C	; 12
    5096:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    509a:	8f ef       	ldi	r24, 0xFF	; 255
    509c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    50a0:	84 e0       	ldi	r24, 0x04	; 4
    50a2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    50a6:	81 e0       	ldi	r24, 0x01	; 1
    50a8:	80 93 53 1a 	sts	0x1A53, r24	; 0x801a53 <_twiIsInitiated>
    50ac:	08 95       	ret

000050ae <twiCreate>:
    50ae:	af 92       	push	r10
    50b0:	bf 92       	push	r11
    50b2:	cf 92       	push	r12
    50b4:	df 92       	push	r13
    50b6:	ef 92       	push	r14
    50b8:	ff 92       	push	r15
    50ba:	0f 93       	push	r16
    50bc:	1f 93       	push	r17
    50be:	cf 93       	push	r28
    50c0:	df 93       	push	r29
    50c2:	a8 2e       	mov	r10, r24
    50c4:	b6 2e       	mov	r11, r22
    50c6:	69 01       	movw	r12, r18
    50c8:	7a 01       	movw	r14, r20
    50ca:	84 e0       	ldi	r24, 0x04	; 4
    50cc:	90 e0       	ldi	r25, 0x00	; 0
    50ce:	cb d3       	rcall	.+1942   	; 0x5866 <malloc>
    50d0:	ec 01       	movw	r28, r24
    50d2:	89 2b       	or	r24, r25
    50d4:	61 f1       	breq	.+88     	; 0x512e <twiCreate+0x80>
    50d6:	a8 82       	st	Y, r10
    50d8:	81 e0       	ldi	r24, 0x01	; 1
    50da:	b8 12       	cpse	r11, r24
    50dc:	12 c0       	rjmp	.+36     	; 0x5102 <twiCreate+0x54>
    50de:	c7 01       	movw	r24, r14
    50e0:	b6 01       	movw	r22, r12
    50e2:	20 ea       	ldi	r18, 0xA0	; 160
    50e4:	36 e8       	ldi	r19, 0x86	; 134
    50e6:	41 e0       	ldi	r20, 0x01	; 1
    50e8:	50 e0       	ldi	r21, 0x00	; 0
    50ea:	79 d3       	rcall	.+1778   	; 0x57de <__udivmodsi4>
    50ec:	da 01       	movw	r26, r20
    50ee:	c9 01       	movw	r24, r18
    50f0:	40 97       	sbiw	r24, 0x10	; 16
    50f2:	a1 09       	sbc	r26, r1
    50f4:	b1 09       	sbc	r27, r1
    50f6:	b6 95       	lsr	r27
    50f8:	a7 95       	ror	r26
    50fa:	97 95       	ror	r25
    50fc:	87 95       	ror	r24
    50fe:	89 83       	std	Y+1, r24	; 0x01
    5100:	11 c0       	rjmp	.+34     	; 0x5124 <twiCreate+0x76>
    5102:	c7 01       	movw	r24, r14
    5104:	b6 01       	movw	r22, r12
    5106:	20 e8       	ldi	r18, 0x80	; 128
    5108:	3a e1       	ldi	r19, 0x1A	; 26
    510a:	46 e0       	ldi	r20, 0x06	; 6
    510c:	50 e0       	ldi	r21, 0x00	; 0
    510e:	67 d3       	rcall	.+1742   	; 0x57de <__udivmodsi4>
    5110:	da 01       	movw	r26, r20
    5112:	c9 01       	movw	r24, r18
    5114:	40 97       	sbiw	r24, 0x10	; 16
    5116:	a1 09       	sbc	r26, r1
    5118:	b1 09       	sbc	r27, r1
    511a:	b6 95       	lsr	r27
    511c:	a7 95       	ror	r26
    511e:	97 95       	ror	r25
    5120:	87 95       	ror	r24
    5122:	89 83       	std	Y+1, r24	; 0x01
    5124:	1b 83       	std	Y+3, r17	; 0x03
    5126:	0a 83       	std	Y+2, r16	; 0x02
    5128:	8c 2f       	mov	r24, r28
    512a:	9d 2f       	mov	r25, r29
    512c:	02 c0       	rjmp	.+4      	; 0x5132 <twiCreate+0x84>
    512e:	80 e0       	ldi	r24, 0x00	; 0
    5130:	90 e0       	ldi	r25, 0x00	; 0
    5132:	df 91       	pop	r29
    5134:	cf 91       	pop	r28
    5136:	1f 91       	pop	r17
    5138:	0f 91       	pop	r16
    513a:	ff 90       	pop	r15
    513c:	ef 90       	pop	r14
    513e:	df 90       	pop	r13
    5140:	cf 90       	pop	r12
    5142:	bf 90       	pop	r11
    5144:	af 90       	pop	r10
    5146:	08 95       	ret

00005148 <twiIsBusy>:
    5148:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    514c:	81 70       	andi	r24, 0x01	; 1
    514e:	08 95       	ret

00005150 <twiTransmit>:
    5150:	ff 92       	push	r15
    5152:	0f 93       	push	r16
    5154:	1f 93       	push	r17
    5156:	cf 93       	push	r28
    5158:	df 93       	push	r29
    515a:	00 97       	sbiw	r24, 0x00	; 0
    515c:	d1 f1       	breq	.+116    	; 0x51d2 <twiTransmit+0x82>
    515e:	4a 30       	cpi	r20, 0x0A	; 10
    5160:	d0 f5       	brcc	.+116    	; 0x51d6 <twiTransmit+0x86>
    5162:	f4 2e       	mov	r15, r20
    5164:	8b 01       	movw	r16, r22
    5166:	ec 01       	movw	r28, r24
    5168:	ef df       	rcall	.-34     	; 0x5148 <twiIsBusy>
    516a:	81 11       	cpse	r24, r1
    516c:	36 c0       	rjmp	.+108    	; 0x51da <twiTransmit+0x8a>
    516e:	80 91 46 1a 	lds	r24, 0x1A46	; 0x801a46 <_twiCurrentHandler>
    5172:	90 91 47 1a 	lds	r25, 0x1A47	; 0x801a47 <_twiCurrentHandler+0x1>
    5176:	c8 17       	cp	r28, r24
    5178:	d9 07       	cpc	r29, r25
    517a:	41 f0       	breq	.+16     	; 0x518c <twiTransmit+0x3c>
    517c:	87 df       	rcall	.-242    	; 0x508c <_initTwiInterface>
    517e:	89 81       	ldd	r24, Y+1	; 0x01
    5180:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    5184:	d0 93 47 1a 	sts	0x1A47, r29	; 0x801a47 <_twiCurrentHandler+0x1>
    5188:	c0 93 46 1a 	sts	0x1A46, r28	; 0x801a46 <_twiCurrentHandler>
    518c:	81 e0       	ldi	r24, 0x01	; 1
    518e:	8f 0d       	add	r24, r15
    5190:	80 93 48 1a 	sts	0x1A48, r24	; 0x801a48 <_twiMessageLen>
    5194:	88 81       	ld	r24, Y
    5196:	88 0f       	add	r24, r24
    5198:	80 93 49 1a 	sts	0x1A49, r24	; 0x801a49 <_twiMessageBuffer>
    519c:	ff 20       	and	r15, r15
    519e:	89 f0       	breq	.+34     	; 0x51c2 <twiTransmit+0x72>
    51a0:	f8 01       	movw	r30, r16
    51a2:	aa e4       	ldi	r26, 0x4A	; 74
    51a4:	ba e1       	ldi	r27, 0x1A	; 26
    51a6:	4f ef       	ldi	r20, 0xFF	; 255
    51a8:	4f 0d       	add	r20, r15
    51aa:	64 2f       	mov	r22, r20
    51ac:	70 e0       	ldi	r23, 0x00	; 0
    51ae:	cb 01       	movw	r24, r22
    51b0:	01 96       	adiw	r24, 0x01	; 1
    51b2:	b8 01       	movw	r22, r16
    51b4:	68 0f       	add	r22, r24
    51b6:	79 1f       	adc	r23, r25
    51b8:	81 91       	ld	r24, Z+
    51ba:	8d 93       	st	X+, r24
    51bc:	e6 17       	cp	r30, r22
    51be:	f7 07       	cpc	r31, r23
    51c0:	d9 f7       	brne	.-10     	; 0x51b8 <twiTransmit+0x68>
    51c2:	88 ef       	ldi	r24, 0xF8	; 248
    51c4:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <_twiCurrentState>
    51c8:	85 ea       	ldi	r24, 0xA5	; 165
    51ca:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    51ce:	84 e0       	ldi	r24, 0x04	; 4
    51d0:	05 c0       	rjmp	.+10     	; 0x51dc <twiTransmit+0x8c>
    51d2:	86 e0       	ldi	r24, 0x06	; 6
    51d4:	03 c0       	rjmp	.+6      	; 0x51dc <twiTransmit+0x8c>
    51d6:	87 e0       	ldi	r24, 0x07	; 7
    51d8:	01 c0       	rjmp	.+2      	; 0x51dc <twiTransmit+0x8c>
    51da:	82 e0       	ldi	r24, 0x02	; 2
    51dc:	df 91       	pop	r29
    51de:	cf 91       	pop	r28
    51e0:	1f 91       	pop	r17
    51e2:	0f 91       	pop	r16
    51e4:	ff 90       	pop	r15
    51e6:	08 95       	ret

000051e8 <twiReceive>:
    51e8:	1f 93       	push	r17
    51ea:	cf 93       	push	r28
    51ec:	df 93       	push	r29
    51ee:	00 97       	sbiw	r24, 0x00	; 0
    51f0:	29 f1       	breq	.+74     	; 0x523c <twiReceive+0x54>
    51f2:	6b 30       	cpi	r22, 0x0B	; 11
    51f4:	28 f5       	brcc	.+74     	; 0x5240 <twiReceive+0x58>
    51f6:	16 2f       	mov	r17, r22
    51f8:	ec 01       	movw	r28, r24
    51fa:	a6 df       	rcall	.-180    	; 0x5148 <twiIsBusy>
    51fc:	81 11       	cpse	r24, r1
    51fe:	22 c0       	rjmp	.+68     	; 0x5244 <twiReceive+0x5c>
    5200:	80 91 46 1a 	lds	r24, 0x1A46	; 0x801a46 <_twiCurrentHandler>
    5204:	90 91 47 1a 	lds	r25, 0x1A47	; 0x801a47 <_twiCurrentHandler+0x1>
    5208:	c8 17       	cp	r28, r24
    520a:	d9 07       	cpc	r29, r25
    520c:	41 f0       	breq	.+16     	; 0x521e <twiReceive+0x36>
    520e:	3e df       	rcall	.-388    	; 0x508c <_initTwiInterface>
    5210:	89 81       	ldd	r24, Y+1	; 0x01
    5212:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    5216:	d0 93 47 1a 	sts	0x1A47, r29	; 0x801a47 <_twiCurrentHandler+0x1>
    521a:	c0 93 46 1a 	sts	0x1A46, r28	; 0x801a46 <_twiCurrentHandler>
    521e:	10 93 48 1a 	sts	0x1A48, r17	; 0x801a48 <_twiMessageLen>
    5222:	88 81       	ld	r24, Y
    5224:	88 0f       	add	r24, r24
    5226:	81 60       	ori	r24, 0x01	; 1
    5228:	80 93 49 1a 	sts	0x1A49, r24	; 0x801a49 <_twiMessageBuffer>
    522c:	88 ef       	ldi	r24, 0xF8	; 248
    522e:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <_twiCurrentState>
    5232:	85 ea       	ldi	r24, 0xA5	; 165
    5234:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    5238:	85 e0       	ldi	r24, 0x05	; 5
    523a:	05 c0       	rjmp	.+10     	; 0x5246 <twiReceive+0x5e>
    523c:	86 e0       	ldi	r24, 0x06	; 6
    523e:	03 c0       	rjmp	.+6      	; 0x5246 <twiReceive+0x5e>
    5240:	87 e0       	ldi	r24, 0x07	; 7
    5242:	01 c0       	rjmp	.+2      	; 0x5246 <twiReceive+0x5e>
    5244:	82 e0       	ldi	r24, 0x02	; 2
    5246:	df 91       	pop	r29
    5248:	cf 91       	pop	r28
    524a:	1f 91       	pop	r17
    524c:	08 95       	ret

0000524e <__vector_39>:
    524e:	1f 92       	push	r1
    5250:	0f 92       	push	r0
    5252:	0f b6       	in	r0, 0x3f	; 63
    5254:	0f 92       	push	r0
    5256:	11 24       	eor	r1, r1
    5258:	0b b6       	in	r0, 0x3b	; 59
    525a:	0f 92       	push	r0
    525c:	2f 93       	push	r18
    525e:	3f 93       	push	r19
    5260:	4f 93       	push	r20
    5262:	5f 93       	push	r21
    5264:	6f 93       	push	r22
    5266:	7f 93       	push	r23
    5268:	8f 93       	push	r24
    526a:	9f 93       	push	r25
    526c:	af 93       	push	r26
    526e:	bf 93       	push	r27
    5270:	ef 93       	push	r30
    5272:	ff 93       	push	r31
    5274:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    5278:	8e 2f       	mov	r24, r30
    527a:	90 e0       	ldi	r25, 0x00	; 0
    527c:	fc 01       	movw	r30, r24
    527e:	38 97       	sbiw	r30, 0x08	; 8
    5280:	e1 35       	cpi	r30, 0x51	; 81
    5282:	f1 05       	cpc	r31, r1
    5284:	08 f0       	brcs	.+2      	; 0x5288 <__vector_39+0x3a>
    5286:	75 c0       	rjmp	.+234    	; 0x5372 <__vector_39+0x124>
    5288:	88 27       	eor	r24, r24
    528a:	e4 58       	subi	r30, 0x84	; 132
    528c:	ff 4f       	sbci	r31, 0xFF	; 255
    528e:	8f 4f       	sbci	r24, 0xFF	; 255
    5290:	c8 c2       	rjmp	.+1424   	; 0x5822 <__tablejump2__>
    5292:	10 92 45 1a 	sts	0x1A45, r1	; 0x801a45 <_index.1885>
    5296:	e0 91 45 1a 	lds	r30, 0x1A45	; 0x801a45 <_index.1885>
    529a:	80 91 48 1a 	lds	r24, 0x1A48	; 0x801a48 <_twiMessageLen>
    529e:	e8 17       	cp	r30, r24
    52a0:	70 f4       	brcc	.+28     	; 0x52be <__vector_39+0x70>
    52a2:	81 e0       	ldi	r24, 0x01	; 1
    52a4:	8e 0f       	add	r24, r30
    52a6:	80 93 45 1a 	sts	0x1A45, r24	; 0x801a45 <_index.1885>
    52aa:	f0 e0       	ldi	r31, 0x00	; 0
    52ac:	e7 5b       	subi	r30, 0xB7	; 183
    52ae:	f5 4e       	sbci	r31, 0xE5	; 229
    52b0:	80 81       	ld	r24, Z
    52b2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    52b6:	85 e8       	ldi	r24, 0x85	; 133
    52b8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    52bc:	72 c0       	rjmp	.+228    	; 0x53a2 <__vector_39+0x154>
    52be:	84 e9       	ldi	r24, 0x94	; 148
    52c0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    52c4:	80 91 46 1a 	lds	r24, 0x1A46	; 0x801a46 <_twiCurrentHandler>
    52c8:	90 91 47 1a 	lds	r25, 0x1A47	; 0x801a47 <_twiCurrentHandler+0x1>
    52cc:	dc 01       	movw	r26, r24
    52ce:	12 96       	adiw	r26, 0x02	; 2
    52d0:	ed 91       	ld	r30, X+
    52d2:	fc 91       	ld	r31, X
    52d4:	13 97       	sbiw	r26, 0x03	; 3
    52d6:	30 97       	sbiw	r30, 0x00	; 0
    52d8:	09 f4       	brne	.+2      	; 0x52dc <__vector_39+0x8e>
    52da:	63 c0       	rjmp	.+198    	; 0x53a2 <__vector_39+0x154>
    52dc:	20 e0       	ldi	r18, 0x00	; 0
    52de:	40 e0       	ldi	r20, 0x00	; 0
    52e0:	50 e0       	ldi	r21, 0x00	; 0
    52e2:	64 e0       	ldi	r22, 0x04	; 4
    52e4:	19 95       	eicall
    52e6:	5d c0       	rjmp	.+186    	; 0x53a2 <__vector_39+0x154>
    52e8:	e0 91 45 1a 	lds	r30, 0x1A45	; 0x801a45 <_index.1885>
    52ec:	81 e0       	ldi	r24, 0x01	; 1
    52ee:	8e 0f       	add	r24, r30
    52f0:	80 93 45 1a 	sts	0x1A45, r24	; 0x801a45 <_index.1885>
    52f4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    52f8:	f0 e0       	ldi	r31, 0x00	; 0
    52fa:	e7 5b       	subi	r30, 0xB7	; 183
    52fc:	f5 4e       	sbci	r31, 0xE5	; 229
    52fe:	80 83       	st	Z, r24
    5300:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    5304:	80 34       	cpi	r24, 0x40	; 64
    5306:	11 f4       	brne	.+4      	; 0x530c <__vector_39+0xbe>
    5308:	10 92 45 1a 	sts	0x1A45, r1	; 0x801a45 <_index.1885>
    530c:	20 91 45 1a 	lds	r18, 0x1A45	; 0x801a45 <_index.1885>
    5310:	30 e0       	ldi	r19, 0x00	; 0
    5312:	80 91 48 1a 	lds	r24, 0x1A48	; 0x801a48 <_twiMessageLen>
    5316:	90 e0       	ldi	r25, 0x00	; 0
    5318:	01 97       	sbiw	r24, 0x01	; 1
    531a:	28 17       	cp	r18, r24
    531c:	39 07       	cpc	r19, r25
    531e:	24 f4       	brge	.+8      	; 0x5328 <__vector_39+0xda>
    5320:	85 ec       	ldi	r24, 0xC5	; 197
    5322:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    5326:	3d c0       	rjmp	.+122    	; 0x53a2 <__vector_39+0x154>
    5328:	85 e8       	ldi	r24, 0x85	; 133
    532a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    532e:	39 c0       	rjmp	.+114    	; 0x53a2 <__vector_39+0x154>
    5330:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    5334:	e0 91 45 1a 	lds	r30, 0x1A45	; 0x801a45 <_index.1885>
    5338:	f0 e0       	ldi	r31, 0x00	; 0
    533a:	e7 5b       	subi	r30, 0xB7	; 183
    533c:	f5 4e       	sbci	r31, 0xE5	; 229
    533e:	80 83       	st	Z, r24
    5340:	84 e9       	ldi	r24, 0x94	; 148
    5342:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    5346:	80 91 46 1a 	lds	r24, 0x1A46	; 0x801a46 <_twiCurrentHandler>
    534a:	90 91 47 1a 	lds	r25, 0x1A47	; 0x801a47 <_twiCurrentHandler+0x1>
    534e:	dc 01       	movw	r26, r24
    5350:	12 96       	adiw	r26, 0x02	; 2
    5352:	ed 91       	ld	r30, X+
    5354:	fc 91       	ld	r31, X
    5356:	13 97       	sbiw	r26, 0x03	; 3
    5358:	30 97       	sbiw	r30, 0x00	; 0
    535a:	19 f1       	breq	.+70     	; 0x53a2 <__vector_39+0x154>
    535c:	20 91 48 1a 	lds	r18, 0x1A48	; 0x801a48 <_twiMessageLen>
    5360:	49 e4       	ldi	r20, 0x49	; 73
    5362:	5a e1       	ldi	r21, 0x1A	; 26
    5364:	65 e0       	ldi	r22, 0x05	; 5
    5366:	19 95       	eicall
    5368:	1c c0       	rjmp	.+56     	; 0x53a2 <__vector_39+0x154>
    536a:	85 ea       	ldi	r24, 0xA5	; 165
    536c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    5370:	18 c0       	rjmp	.+48     	; 0x53a2 <__vector_39+0x154>
    5372:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    5376:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <_twiCurrentState>
    537a:	84 e0       	ldi	r24, 0x04	; 4
    537c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    5380:	80 91 46 1a 	lds	r24, 0x1A46	; 0x801a46 <_twiCurrentHandler>
    5384:	90 91 47 1a 	lds	r25, 0x1A47	; 0x801a47 <_twiCurrentHandler+0x1>
    5388:	dc 01       	movw	r26, r24
    538a:	12 96       	adiw	r26, 0x02	; 2
    538c:	ed 91       	ld	r30, X+
    538e:	fc 91       	ld	r31, X
    5390:	13 97       	sbiw	r26, 0x03	; 3
    5392:	30 97       	sbiw	r30, 0x00	; 0
    5394:	31 f0       	breq	.+12     	; 0x53a2 <__vector_39+0x154>
    5396:	20 e0       	ldi	r18, 0x00	; 0
    5398:	40 e0       	ldi	r20, 0x00	; 0
    539a:	50 e0       	ldi	r21, 0x00	; 0
    539c:	60 91 20 02 	lds	r22, 0x0220	; 0x800220 <_twiCurrentState>
    53a0:	19 95       	eicall
    53a2:	ff 91       	pop	r31
    53a4:	ef 91       	pop	r30
    53a6:	bf 91       	pop	r27
    53a8:	af 91       	pop	r26
    53aa:	9f 91       	pop	r25
    53ac:	8f 91       	pop	r24
    53ae:	7f 91       	pop	r23
    53b0:	6f 91       	pop	r22
    53b2:	5f 91       	pop	r21
    53b4:	4f 91       	pop	r20
    53b6:	3f 91       	pop	r19
    53b8:	2f 91       	pop	r18
    53ba:	0f 90       	pop	r0
    53bc:	0b be       	out	0x3b, r0	; 59
    53be:	0f 90       	pop	r0
    53c0:	0f be       	out	0x3f, r0	; 63
    53c2:	0f 90       	pop	r0
    53c4:	1f 90       	pop	r1
    53c6:	18 95       	reti

000053c8 <fifo_init>:
    53c8:	fc 01       	movw	r30, r24
    53ca:	41 11       	cpse	r20, r1
    53cc:	01 c0       	rjmp	.+2      	; 0x53d0 <fifo_init+0x8>
    53ce:	6c d3       	rcall	.+1752   	; 0x5aa8 <abort>
    53d0:	84 2f       	mov	r24, r20
    53d2:	90 e0       	ldi	r25, 0x00	; 0
    53d4:	9c 01       	movw	r18, r24
    53d6:	21 50       	subi	r18, 0x01	; 1
    53d8:	31 09       	sbc	r19, r1
    53da:	82 23       	and	r24, r18
    53dc:	93 23       	and	r25, r19
    53de:	89 2b       	or	r24, r25
    53e0:	09 f0       	breq	.+2      	; 0x53e4 <fifo_init+0x1c>
    53e2:	62 d3       	rcall	.+1732   	; 0x5aa8 <abort>
    53e4:	41 38       	cpi	r20, 0x81	; 129
    53e6:	08 f0       	brcs	.+2      	; 0x53ea <fifo_init+0x22>
    53e8:	5f d3       	rcall	.+1726   	; 0x5aa8 <abort>
    53ea:	12 82       	std	Z+2, r1	; 0x02
    53ec:	13 82       	std	Z+3, r1	; 0x03
    53ee:	44 83       	std	Z+4, r20	; 0x04
    53f0:	44 0f       	add	r20, r20
    53f2:	41 50       	subi	r20, 0x01	; 1
    53f4:	45 83       	std	Z+5, r20	; 0x05
    53f6:	71 83       	std	Z+1, r23	; 0x01
    53f8:	60 83       	st	Z, r22
    53fa:	80 e0       	ldi	r24, 0x00	; 0
    53fc:	90 e0       	ldi	r25, 0x00	; 0
    53fe:	08 95       	ret

00005400 <__subsf3>:
    5400:	50 58       	subi	r21, 0x80	; 128

00005402 <__addsf3>:
    5402:	bb 27       	eor	r27, r27
    5404:	aa 27       	eor	r26, r26
    5406:	0e d0       	rcall	.+28     	; 0x5424 <__addsf3x>
    5408:	4d c1       	rjmp	.+666    	; 0x56a4 <__fp_round>
    540a:	3e d1       	rcall	.+636    	; 0x5688 <__fp_pscA>
    540c:	30 f0       	brcs	.+12     	; 0x541a <__addsf3+0x18>
    540e:	43 d1       	rcall	.+646    	; 0x5696 <__fp_pscB>
    5410:	20 f0       	brcs	.+8      	; 0x541a <__addsf3+0x18>
    5412:	31 f4       	brne	.+12     	; 0x5420 <__addsf3+0x1e>
    5414:	9f 3f       	cpi	r25, 0xFF	; 255
    5416:	11 f4       	brne	.+4      	; 0x541c <__addsf3+0x1a>
    5418:	1e f4       	brtc	.+6      	; 0x5420 <__addsf3+0x1e>
    541a:	33 c1       	rjmp	.+614    	; 0x5682 <__fp_nan>
    541c:	0e f4       	brtc	.+2      	; 0x5420 <__addsf3+0x1e>
    541e:	e0 95       	com	r30
    5420:	e7 fb       	bst	r30, 7
    5422:	29 c1       	rjmp	.+594    	; 0x5676 <__fp_inf>

00005424 <__addsf3x>:
    5424:	e9 2f       	mov	r30, r25
    5426:	4f d1       	rcall	.+670    	; 0x56c6 <__fp_split3>
    5428:	80 f3       	brcs	.-32     	; 0x540a <__addsf3+0x8>
    542a:	ba 17       	cp	r27, r26
    542c:	62 07       	cpc	r22, r18
    542e:	73 07       	cpc	r23, r19
    5430:	84 07       	cpc	r24, r20
    5432:	95 07       	cpc	r25, r21
    5434:	18 f0       	brcs	.+6      	; 0x543c <__addsf3x+0x18>
    5436:	71 f4       	brne	.+28     	; 0x5454 <__addsf3x+0x30>
    5438:	9e f5       	brtc	.+102    	; 0x54a0 <__addsf3x+0x7c>
    543a:	67 c1       	rjmp	.+718    	; 0x570a <__fp_zero>
    543c:	0e f4       	brtc	.+2      	; 0x5440 <__addsf3x+0x1c>
    543e:	e0 95       	com	r30
    5440:	0b 2e       	mov	r0, r27
    5442:	ba 2f       	mov	r27, r26
    5444:	a0 2d       	mov	r26, r0
    5446:	0b 01       	movw	r0, r22
    5448:	b9 01       	movw	r22, r18
    544a:	90 01       	movw	r18, r0
    544c:	0c 01       	movw	r0, r24
    544e:	ca 01       	movw	r24, r20
    5450:	a0 01       	movw	r20, r0
    5452:	11 24       	eor	r1, r1
    5454:	ff 27       	eor	r31, r31
    5456:	59 1b       	sub	r21, r25
    5458:	99 f0       	breq	.+38     	; 0x5480 <__addsf3x+0x5c>
    545a:	59 3f       	cpi	r21, 0xF9	; 249
    545c:	50 f4       	brcc	.+20     	; 0x5472 <__addsf3x+0x4e>
    545e:	50 3e       	cpi	r21, 0xE0	; 224
    5460:	68 f1       	brcs	.+90     	; 0x54bc <__addsf3x+0x98>
    5462:	1a 16       	cp	r1, r26
    5464:	f0 40       	sbci	r31, 0x00	; 0
    5466:	a2 2f       	mov	r26, r18
    5468:	23 2f       	mov	r18, r19
    546a:	34 2f       	mov	r19, r20
    546c:	44 27       	eor	r20, r20
    546e:	58 5f       	subi	r21, 0xF8	; 248
    5470:	f3 cf       	rjmp	.-26     	; 0x5458 <__addsf3x+0x34>
    5472:	46 95       	lsr	r20
    5474:	37 95       	ror	r19
    5476:	27 95       	ror	r18
    5478:	a7 95       	ror	r26
    547a:	f0 40       	sbci	r31, 0x00	; 0
    547c:	53 95       	inc	r21
    547e:	c9 f7       	brne	.-14     	; 0x5472 <__addsf3x+0x4e>
    5480:	7e f4       	brtc	.+30     	; 0x54a0 <__addsf3x+0x7c>
    5482:	1f 16       	cp	r1, r31
    5484:	ba 0b       	sbc	r27, r26
    5486:	62 0b       	sbc	r22, r18
    5488:	73 0b       	sbc	r23, r19
    548a:	84 0b       	sbc	r24, r20
    548c:	ba f0       	brmi	.+46     	; 0x54bc <__addsf3x+0x98>
    548e:	91 50       	subi	r25, 0x01	; 1
    5490:	a1 f0       	breq	.+40     	; 0x54ba <__addsf3x+0x96>
    5492:	ff 0f       	add	r31, r31
    5494:	bb 1f       	adc	r27, r27
    5496:	66 1f       	adc	r22, r22
    5498:	77 1f       	adc	r23, r23
    549a:	88 1f       	adc	r24, r24
    549c:	c2 f7       	brpl	.-16     	; 0x548e <__addsf3x+0x6a>
    549e:	0e c0       	rjmp	.+28     	; 0x54bc <__addsf3x+0x98>
    54a0:	ba 0f       	add	r27, r26
    54a2:	62 1f       	adc	r22, r18
    54a4:	73 1f       	adc	r23, r19
    54a6:	84 1f       	adc	r24, r20
    54a8:	48 f4       	brcc	.+18     	; 0x54bc <__addsf3x+0x98>
    54aa:	87 95       	ror	r24
    54ac:	77 95       	ror	r23
    54ae:	67 95       	ror	r22
    54b0:	b7 95       	ror	r27
    54b2:	f7 95       	ror	r31
    54b4:	9e 3f       	cpi	r25, 0xFE	; 254
    54b6:	08 f0       	brcs	.+2      	; 0x54ba <__addsf3x+0x96>
    54b8:	b3 cf       	rjmp	.-154    	; 0x5420 <__addsf3+0x1e>
    54ba:	93 95       	inc	r25
    54bc:	88 0f       	add	r24, r24
    54be:	08 f0       	brcs	.+2      	; 0x54c2 <__addsf3x+0x9e>
    54c0:	99 27       	eor	r25, r25
    54c2:	ee 0f       	add	r30, r30
    54c4:	97 95       	ror	r25
    54c6:	87 95       	ror	r24
    54c8:	08 95       	ret

000054ca <__divsf3>:
    54ca:	0c d0       	rcall	.+24     	; 0x54e4 <__divsf3x>
    54cc:	eb c0       	rjmp	.+470    	; 0x56a4 <__fp_round>
    54ce:	e3 d0       	rcall	.+454    	; 0x5696 <__fp_pscB>
    54d0:	40 f0       	brcs	.+16     	; 0x54e2 <__divsf3+0x18>
    54d2:	da d0       	rcall	.+436    	; 0x5688 <__fp_pscA>
    54d4:	30 f0       	brcs	.+12     	; 0x54e2 <__divsf3+0x18>
    54d6:	21 f4       	brne	.+8      	; 0x54e0 <__divsf3+0x16>
    54d8:	5f 3f       	cpi	r21, 0xFF	; 255
    54da:	19 f0       	breq	.+6      	; 0x54e2 <__divsf3+0x18>
    54dc:	cc c0       	rjmp	.+408    	; 0x5676 <__fp_inf>
    54de:	51 11       	cpse	r21, r1
    54e0:	15 c1       	rjmp	.+554    	; 0x570c <__fp_szero>
    54e2:	cf c0       	rjmp	.+414    	; 0x5682 <__fp_nan>

000054e4 <__divsf3x>:
    54e4:	f0 d0       	rcall	.+480    	; 0x56c6 <__fp_split3>
    54e6:	98 f3       	brcs	.-26     	; 0x54ce <__divsf3+0x4>

000054e8 <__divsf3_pse>:
    54e8:	99 23       	and	r25, r25
    54ea:	c9 f3       	breq	.-14     	; 0x54de <__divsf3+0x14>
    54ec:	55 23       	and	r21, r21
    54ee:	b1 f3       	breq	.-20     	; 0x54dc <__divsf3+0x12>
    54f0:	95 1b       	sub	r25, r21
    54f2:	55 0b       	sbc	r21, r21
    54f4:	bb 27       	eor	r27, r27
    54f6:	aa 27       	eor	r26, r26
    54f8:	62 17       	cp	r22, r18
    54fa:	73 07       	cpc	r23, r19
    54fc:	84 07       	cpc	r24, r20
    54fe:	38 f0       	brcs	.+14     	; 0x550e <__divsf3_pse+0x26>
    5500:	9f 5f       	subi	r25, 0xFF	; 255
    5502:	5f 4f       	sbci	r21, 0xFF	; 255
    5504:	22 0f       	add	r18, r18
    5506:	33 1f       	adc	r19, r19
    5508:	44 1f       	adc	r20, r20
    550a:	aa 1f       	adc	r26, r26
    550c:	a9 f3       	breq	.-22     	; 0x54f8 <__divsf3_pse+0x10>
    550e:	33 d0       	rcall	.+102    	; 0x5576 <__divsf3_pse+0x8e>
    5510:	0e 2e       	mov	r0, r30
    5512:	3a f0       	brmi	.+14     	; 0x5522 <__divsf3_pse+0x3a>
    5514:	e0 e8       	ldi	r30, 0x80	; 128
    5516:	30 d0       	rcall	.+96     	; 0x5578 <__divsf3_pse+0x90>
    5518:	91 50       	subi	r25, 0x01	; 1
    551a:	50 40       	sbci	r21, 0x00	; 0
    551c:	e6 95       	lsr	r30
    551e:	00 1c       	adc	r0, r0
    5520:	ca f7       	brpl	.-14     	; 0x5514 <__divsf3_pse+0x2c>
    5522:	29 d0       	rcall	.+82     	; 0x5576 <__divsf3_pse+0x8e>
    5524:	fe 2f       	mov	r31, r30
    5526:	27 d0       	rcall	.+78     	; 0x5576 <__divsf3_pse+0x8e>
    5528:	66 0f       	add	r22, r22
    552a:	77 1f       	adc	r23, r23
    552c:	88 1f       	adc	r24, r24
    552e:	bb 1f       	adc	r27, r27
    5530:	26 17       	cp	r18, r22
    5532:	37 07       	cpc	r19, r23
    5534:	48 07       	cpc	r20, r24
    5536:	ab 07       	cpc	r26, r27
    5538:	b0 e8       	ldi	r27, 0x80	; 128
    553a:	09 f0       	breq	.+2      	; 0x553e <__divsf3_pse+0x56>
    553c:	bb 0b       	sbc	r27, r27
    553e:	80 2d       	mov	r24, r0
    5540:	bf 01       	movw	r22, r30
    5542:	ff 27       	eor	r31, r31
    5544:	93 58       	subi	r25, 0x83	; 131
    5546:	5f 4f       	sbci	r21, 0xFF	; 255
    5548:	2a f0       	brmi	.+10     	; 0x5554 <__divsf3_pse+0x6c>
    554a:	9e 3f       	cpi	r25, 0xFE	; 254
    554c:	51 05       	cpc	r21, r1
    554e:	68 f0       	brcs	.+26     	; 0x556a <__divsf3_pse+0x82>
    5550:	92 c0       	rjmp	.+292    	; 0x5676 <__fp_inf>
    5552:	dc c0       	rjmp	.+440    	; 0x570c <__fp_szero>
    5554:	5f 3f       	cpi	r21, 0xFF	; 255
    5556:	ec f3       	brlt	.-6      	; 0x5552 <__divsf3_pse+0x6a>
    5558:	98 3e       	cpi	r25, 0xE8	; 232
    555a:	dc f3       	brlt	.-10     	; 0x5552 <__divsf3_pse+0x6a>
    555c:	86 95       	lsr	r24
    555e:	77 95       	ror	r23
    5560:	67 95       	ror	r22
    5562:	b7 95       	ror	r27
    5564:	f7 95       	ror	r31
    5566:	9f 5f       	subi	r25, 0xFF	; 255
    5568:	c9 f7       	brne	.-14     	; 0x555c <__divsf3_pse+0x74>
    556a:	88 0f       	add	r24, r24
    556c:	91 1d       	adc	r25, r1
    556e:	96 95       	lsr	r25
    5570:	87 95       	ror	r24
    5572:	97 f9       	bld	r25, 7
    5574:	08 95       	ret
    5576:	e1 e0       	ldi	r30, 0x01	; 1
    5578:	66 0f       	add	r22, r22
    557a:	77 1f       	adc	r23, r23
    557c:	88 1f       	adc	r24, r24
    557e:	bb 1f       	adc	r27, r27
    5580:	62 17       	cp	r22, r18
    5582:	73 07       	cpc	r23, r19
    5584:	84 07       	cpc	r24, r20
    5586:	ba 07       	cpc	r27, r26
    5588:	20 f0       	brcs	.+8      	; 0x5592 <__divsf3_pse+0xaa>
    558a:	62 1b       	sub	r22, r18
    558c:	73 0b       	sbc	r23, r19
    558e:	84 0b       	sbc	r24, r20
    5590:	ba 0b       	sbc	r27, r26
    5592:	ee 1f       	adc	r30, r30
    5594:	88 f7       	brcc	.-30     	; 0x5578 <__divsf3_pse+0x90>
    5596:	e0 95       	com	r30
    5598:	08 95       	ret

0000559a <__fixsfsi>:
    559a:	04 d0       	rcall	.+8      	; 0x55a4 <__fixunssfsi>
    559c:	68 94       	set
    559e:	b1 11       	cpse	r27, r1
    55a0:	b5 c0       	rjmp	.+362    	; 0x570c <__fp_szero>
    55a2:	08 95       	ret

000055a4 <__fixunssfsi>:
    55a4:	98 d0       	rcall	.+304    	; 0x56d6 <__fp_splitA>
    55a6:	88 f0       	brcs	.+34     	; 0x55ca <__fixunssfsi+0x26>
    55a8:	9f 57       	subi	r25, 0x7F	; 127
    55aa:	90 f0       	brcs	.+36     	; 0x55d0 <__fixunssfsi+0x2c>
    55ac:	b9 2f       	mov	r27, r25
    55ae:	99 27       	eor	r25, r25
    55b0:	b7 51       	subi	r27, 0x17	; 23
    55b2:	a0 f0       	brcs	.+40     	; 0x55dc <__fixunssfsi+0x38>
    55b4:	d1 f0       	breq	.+52     	; 0x55ea <__fixunssfsi+0x46>
    55b6:	66 0f       	add	r22, r22
    55b8:	77 1f       	adc	r23, r23
    55ba:	88 1f       	adc	r24, r24
    55bc:	99 1f       	adc	r25, r25
    55be:	1a f0       	brmi	.+6      	; 0x55c6 <__fixunssfsi+0x22>
    55c0:	ba 95       	dec	r27
    55c2:	c9 f7       	brne	.-14     	; 0x55b6 <__fixunssfsi+0x12>
    55c4:	12 c0       	rjmp	.+36     	; 0x55ea <__fixunssfsi+0x46>
    55c6:	b1 30       	cpi	r27, 0x01	; 1
    55c8:	81 f0       	breq	.+32     	; 0x55ea <__fixunssfsi+0x46>
    55ca:	9f d0       	rcall	.+318    	; 0x570a <__fp_zero>
    55cc:	b1 e0       	ldi	r27, 0x01	; 1
    55ce:	08 95       	ret
    55d0:	9c c0       	rjmp	.+312    	; 0x570a <__fp_zero>
    55d2:	67 2f       	mov	r22, r23
    55d4:	78 2f       	mov	r23, r24
    55d6:	88 27       	eor	r24, r24
    55d8:	b8 5f       	subi	r27, 0xF8	; 248
    55da:	39 f0       	breq	.+14     	; 0x55ea <__fixunssfsi+0x46>
    55dc:	b9 3f       	cpi	r27, 0xF9	; 249
    55de:	cc f3       	brlt	.-14     	; 0x55d2 <__fixunssfsi+0x2e>
    55e0:	86 95       	lsr	r24
    55e2:	77 95       	ror	r23
    55e4:	67 95       	ror	r22
    55e6:	b3 95       	inc	r27
    55e8:	d9 f7       	brne	.-10     	; 0x55e0 <__fixunssfsi+0x3c>
    55ea:	3e f4       	brtc	.+14     	; 0x55fa <__fixunssfsi+0x56>
    55ec:	90 95       	com	r25
    55ee:	80 95       	com	r24
    55f0:	70 95       	com	r23
    55f2:	61 95       	neg	r22
    55f4:	7f 4f       	sbci	r23, 0xFF	; 255
    55f6:	8f 4f       	sbci	r24, 0xFF	; 255
    55f8:	9f 4f       	sbci	r25, 0xFF	; 255
    55fa:	08 95       	ret

000055fc <__floatunsisf>:
    55fc:	e8 94       	clt
    55fe:	09 c0       	rjmp	.+18     	; 0x5612 <__floatsisf+0x12>

00005600 <__floatsisf>:
    5600:	97 fb       	bst	r25, 7
    5602:	3e f4       	brtc	.+14     	; 0x5612 <__floatsisf+0x12>
    5604:	90 95       	com	r25
    5606:	80 95       	com	r24
    5608:	70 95       	com	r23
    560a:	61 95       	neg	r22
    560c:	7f 4f       	sbci	r23, 0xFF	; 255
    560e:	8f 4f       	sbci	r24, 0xFF	; 255
    5610:	9f 4f       	sbci	r25, 0xFF	; 255
    5612:	99 23       	and	r25, r25
    5614:	a9 f0       	breq	.+42     	; 0x5640 <__floatsisf+0x40>
    5616:	f9 2f       	mov	r31, r25
    5618:	96 e9       	ldi	r25, 0x96	; 150
    561a:	bb 27       	eor	r27, r27
    561c:	93 95       	inc	r25
    561e:	f6 95       	lsr	r31
    5620:	87 95       	ror	r24
    5622:	77 95       	ror	r23
    5624:	67 95       	ror	r22
    5626:	b7 95       	ror	r27
    5628:	f1 11       	cpse	r31, r1
    562a:	f8 cf       	rjmp	.-16     	; 0x561c <__floatsisf+0x1c>
    562c:	fa f4       	brpl	.+62     	; 0x566c <__floatsisf+0x6c>
    562e:	bb 0f       	add	r27, r27
    5630:	11 f4       	brne	.+4      	; 0x5636 <__floatsisf+0x36>
    5632:	60 ff       	sbrs	r22, 0
    5634:	1b c0       	rjmp	.+54     	; 0x566c <__floatsisf+0x6c>
    5636:	6f 5f       	subi	r22, 0xFF	; 255
    5638:	7f 4f       	sbci	r23, 0xFF	; 255
    563a:	8f 4f       	sbci	r24, 0xFF	; 255
    563c:	9f 4f       	sbci	r25, 0xFF	; 255
    563e:	16 c0       	rjmp	.+44     	; 0x566c <__floatsisf+0x6c>
    5640:	88 23       	and	r24, r24
    5642:	11 f0       	breq	.+4      	; 0x5648 <__floatsisf+0x48>
    5644:	96 e9       	ldi	r25, 0x96	; 150
    5646:	11 c0       	rjmp	.+34     	; 0x566a <__floatsisf+0x6a>
    5648:	77 23       	and	r23, r23
    564a:	21 f0       	breq	.+8      	; 0x5654 <__floatsisf+0x54>
    564c:	9e e8       	ldi	r25, 0x8E	; 142
    564e:	87 2f       	mov	r24, r23
    5650:	76 2f       	mov	r23, r22
    5652:	05 c0       	rjmp	.+10     	; 0x565e <__floatsisf+0x5e>
    5654:	66 23       	and	r22, r22
    5656:	71 f0       	breq	.+28     	; 0x5674 <__floatsisf+0x74>
    5658:	96 e8       	ldi	r25, 0x86	; 134
    565a:	86 2f       	mov	r24, r22
    565c:	70 e0       	ldi	r23, 0x00	; 0
    565e:	60 e0       	ldi	r22, 0x00	; 0
    5660:	2a f0       	brmi	.+10     	; 0x566c <__floatsisf+0x6c>
    5662:	9a 95       	dec	r25
    5664:	66 0f       	add	r22, r22
    5666:	77 1f       	adc	r23, r23
    5668:	88 1f       	adc	r24, r24
    566a:	da f7       	brpl	.-10     	; 0x5662 <__floatsisf+0x62>
    566c:	88 0f       	add	r24, r24
    566e:	96 95       	lsr	r25
    5670:	87 95       	ror	r24
    5672:	97 f9       	bld	r25, 7
    5674:	08 95       	ret

00005676 <__fp_inf>:
    5676:	97 f9       	bld	r25, 7
    5678:	9f 67       	ori	r25, 0x7F	; 127
    567a:	80 e8       	ldi	r24, 0x80	; 128
    567c:	70 e0       	ldi	r23, 0x00	; 0
    567e:	60 e0       	ldi	r22, 0x00	; 0
    5680:	08 95       	ret

00005682 <__fp_nan>:
    5682:	9f ef       	ldi	r25, 0xFF	; 255
    5684:	80 ec       	ldi	r24, 0xC0	; 192
    5686:	08 95       	ret

00005688 <__fp_pscA>:
    5688:	00 24       	eor	r0, r0
    568a:	0a 94       	dec	r0
    568c:	16 16       	cp	r1, r22
    568e:	17 06       	cpc	r1, r23
    5690:	18 06       	cpc	r1, r24
    5692:	09 06       	cpc	r0, r25
    5694:	08 95       	ret

00005696 <__fp_pscB>:
    5696:	00 24       	eor	r0, r0
    5698:	0a 94       	dec	r0
    569a:	12 16       	cp	r1, r18
    569c:	13 06       	cpc	r1, r19
    569e:	14 06       	cpc	r1, r20
    56a0:	05 06       	cpc	r0, r21
    56a2:	08 95       	ret

000056a4 <__fp_round>:
    56a4:	09 2e       	mov	r0, r25
    56a6:	03 94       	inc	r0
    56a8:	00 0c       	add	r0, r0
    56aa:	11 f4       	brne	.+4      	; 0x56b0 <__fp_round+0xc>
    56ac:	88 23       	and	r24, r24
    56ae:	52 f0       	brmi	.+20     	; 0x56c4 <__fp_round+0x20>
    56b0:	bb 0f       	add	r27, r27
    56b2:	40 f4       	brcc	.+16     	; 0x56c4 <__fp_round+0x20>
    56b4:	bf 2b       	or	r27, r31
    56b6:	11 f4       	brne	.+4      	; 0x56bc <__fp_round+0x18>
    56b8:	60 ff       	sbrs	r22, 0
    56ba:	04 c0       	rjmp	.+8      	; 0x56c4 <__fp_round+0x20>
    56bc:	6f 5f       	subi	r22, 0xFF	; 255
    56be:	7f 4f       	sbci	r23, 0xFF	; 255
    56c0:	8f 4f       	sbci	r24, 0xFF	; 255
    56c2:	9f 4f       	sbci	r25, 0xFF	; 255
    56c4:	08 95       	ret

000056c6 <__fp_split3>:
    56c6:	57 fd       	sbrc	r21, 7
    56c8:	90 58       	subi	r25, 0x80	; 128
    56ca:	44 0f       	add	r20, r20
    56cc:	55 1f       	adc	r21, r21
    56ce:	59 f0       	breq	.+22     	; 0x56e6 <__fp_splitA+0x10>
    56d0:	5f 3f       	cpi	r21, 0xFF	; 255
    56d2:	71 f0       	breq	.+28     	; 0x56f0 <__fp_splitA+0x1a>
    56d4:	47 95       	ror	r20

000056d6 <__fp_splitA>:
    56d6:	88 0f       	add	r24, r24
    56d8:	97 fb       	bst	r25, 7
    56da:	99 1f       	adc	r25, r25
    56dc:	61 f0       	breq	.+24     	; 0x56f6 <__fp_splitA+0x20>
    56de:	9f 3f       	cpi	r25, 0xFF	; 255
    56e0:	79 f0       	breq	.+30     	; 0x5700 <__fp_splitA+0x2a>
    56e2:	87 95       	ror	r24
    56e4:	08 95       	ret
    56e6:	12 16       	cp	r1, r18
    56e8:	13 06       	cpc	r1, r19
    56ea:	14 06       	cpc	r1, r20
    56ec:	55 1f       	adc	r21, r21
    56ee:	f2 cf       	rjmp	.-28     	; 0x56d4 <__fp_split3+0xe>
    56f0:	46 95       	lsr	r20
    56f2:	f1 df       	rcall	.-30     	; 0x56d6 <__fp_splitA>
    56f4:	08 c0       	rjmp	.+16     	; 0x5706 <__fp_splitA+0x30>
    56f6:	16 16       	cp	r1, r22
    56f8:	17 06       	cpc	r1, r23
    56fa:	18 06       	cpc	r1, r24
    56fc:	99 1f       	adc	r25, r25
    56fe:	f1 cf       	rjmp	.-30     	; 0x56e2 <__fp_splitA+0xc>
    5700:	86 95       	lsr	r24
    5702:	71 05       	cpc	r23, r1
    5704:	61 05       	cpc	r22, r1
    5706:	08 94       	sec
    5708:	08 95       	ret

0000570a <__fp_zero>:
    570a:	e8 94       	clt

0000570c <__fp_szero>:
    570c:	bb 27       	eor	r27, r27
    570e:	66 27       	eor	r22, r22
    5710:	77 27       	eor	r23, r23
    5712:	cb 01       	movw	r24, r22
    5714:	97 f9       	bld	r25, 7
    5716:	08 95       	ret

00005718 <__mulsf3>:
    5718:	0b d0       	rcall	.+22     	; 0x5730 <__mulsf3x>
    571a:	c4 cf       	rjmp	.-120    	; 0x56a4 <__fp_round>
    571c:	b5 df       	rcall	.-150    	; 0x5688 <__fp_pscA>
    571e:	28 f0       	brcs	.+10     	; 0x572a <__mulsf3+0x12>
    5720:	ba df       	rcall	.-140    	; 0x5696 <__fp_pscB>
    5722:	18 f0       	brcs	.+6      	; 0x572a <__mulsf3+0x12>
    5724:	95 23       	and	r25, r21
    5726:	09 f0       	breq	.+2      	; 0x572a <__mulsf3+0x12>
    5728:	a6 cf       	rjmp	.-180    	; 0x5676 <__fp_inf>
    572a:	ab cf       	rjmp	.-170    	; 0x5682 <__fp_nan>
    572c:	11 24       	eor	r1, r1
    572e:	ee cf       	rjmp	.-36     	; 0x570c <__fp_szero>

00005730 <__mulsf3x>:
    5730:	ca df       	rcall	.-108    	; 0x56c6 <__fp_split3>
    5732:	a0 f3       	brcs	.-24     	; 0x571c <__mulsf3+0x4>

00005734 <__mulsf3_pse>:
    5734:	95 9f       	mul	r25, r21
    5736:	d1 f3       	breq	.-12     	; 0x572c <__mulsf3+0x14>
    5738:	95 0f       	add	r25, r21
    573a:	50 e0       	ldi	r21, 0x00	; 0
    573c:	55 1f       	adc	r21, r21
    573e:	62 9f       	mul	r22, r18
    5740:	f0 01       	movw	r30, r0
    5742:	72 9f       	mul	r23, r18
    5744:	bb 27       	eor	r27, r27
    5746:	f0 0d       	add	r31, r0
    5748:	b1 1d       	adc	r27, r1
    574a:	63 9f       	mul	r22, r19
    574c:	aa 27       	eor	r26, r26
    574e:	f0 0d       	add	r31, r0
    5750:	b1 1d       	adc	r27, r1
    5752:	aa 1f       	adc	r26, r26
    5754:	64 9f       	mul	r22, r20
    5756:	66 27       	eor	r22, r22
    5758:	b0 0d       	add	r27, r0
    575a:	a1 1d       	adc	r26, r1
    575c:	66 1f       	adc	r22, r22
    575e:	82 9f       	mul	r24, r18
    5760:	22 27       	eor	r18, r18
    5762:	b0 0d       	add	r27, r0
    5764:	a1 1d       	adc	r26, r1
    5766:	62 1f       	adc	r22, r18
    5768:	73 9f       	mul	r23, r19
    576a:	b0 0d       	add	r27, r0
    576c:	a1 1d       	adc	r26, r1
    576e:	62 1f       	adc	r22, r18
    5770:	83 9f       	mul	r24, r19
    5772:	a0 0d       	add	r26, r0
    5774:	61 1d       	adc	r22, r1
    5776:	22 1f       	adc	r18, r18
    5778:	74 9f       	mul	r23, r20
    577a:	33 27       	eor	r19, r19
    577c:	a0 0d       	add	r26, r0
    577e:	61 1d       	adc	r22, r1
    5780:	23 1f       	adc	r18, r19
    5782:	84 9f       	mul	r24, r20
    5784:	60 0d       	add	r22, r0
    5786:	21 1d       	adc	r18, r1
    5788:	82 2f       	mov	r24, r18
    578a:	76 2f       	mov	r23, r22
    578c:	6a 2f       	mov	r22, r26
    578e:	11 24       	eor	r1, r1
    5790:	9f 57       	subi	r25, 0x7F	; 127
    5792:	50 40       	sbci	r21, 0x00	; 0
    5794:	8a f0       	brmi	.+34     	; 0x57b8 <__mulsf3_pse+0x84>
    5796:	e1 f0       	breq	.+56     	; 0x57d0 <__mulsf3_pse+0x9c>
    5798:	88 23       	and	r24, r24
    579a:	4a f0       	brmi	.+18     	; 0x57ae <__mulsf3_pse+0x7a>
    579c:	ee 0f       	add	r30, r30
    579e:	ff 1f       	adc	r31, r31
    57a0:	bb 1f       	adc	r27, r27
    57a2:	66 1f       	adc	r22, r22
    57a4:	77 1f       	adc	r23, r23
    57a6:	88 1f       	adc	r24, r24
    57a8:	91 50       	subi	r25, 0x01	; 1
    57aa:	50 40       	sbci	r21, 0x00	; 0
    57ac:	a9 f7       	brne	.-22     	; 0x5798 <__mulsf3_pse+0x64>
    57ae:	9e 3f       	cpi	r25, 0xFE	; 254
    57b0:	51 05       	cpc	r21, r1
    57b2:	70 f0       	brcs	.+28     	; 0x57d0 <__mulsf3_pse+0x9c>
    57b4:	60 cf       	rjmp	.-320    	; 0x5676 <__fp_inf>
    57b6:	aa cf       	rjmp	.-172    	; 0x570c <__fp_szero>
    57b8:	5f 3f       	cpi	r21, 0xFF	; 255
    57ba:	ec f3       	brlt	.-6      	; 0x57b6 <__mulsf3_pse+0x82>
    57bc:	98 3e       	cpi	r25, 0xE8	; 232
    57be:	dc f3       	brlt	.-10     	; 0x57b6 <__mulsf3_pse+0x82>
    57c0:	86 95       	lsr	r24
    57c2:	77 95       	ror	r23
    57c4:	67 95       	ror	r22
    57c6:	b7 95       	ror	r27
    57c8:	f7 95       	ror	r31
    57ca:	e7 95       	ror	r30
    57cc:	9f 5f       	subi	r25, 0xFF	; 255
    57ce:	c1 f7       	brne	.-16     	; 0x57c0 <__mulsf3_pse+0x8c>
    57d0:	fe 2b       	or	r31, r30
    57d2:	88 0f       	add	r24, r24
    57d4:	91 1d       	adc	r25, r1
    57d6:	96 95       	lsr	r25
    57d8:	87 95       	ror	r24
    57da:	97 f9       	bld	r25, 7
    57dc:	08 95       	ret

000057de <__udivmodsi4>:
    57de:	a1 e2       	ldi	r26, 0x21	; 33
    57e0:	1a 2e       	mov	r1, r26
    57e2:	aa 1b       	sub	r26, r26
    57e4:	bb 1b       	sub	r27, r27
    57e6:	fd 01       	movw	r30, r26
    57e8:	0d c0       	rjmp	.+26     	; 0x5804 <__udivmodsi4_ep>

000057ea <__udivmodsi4_loop>:
    57ea:	aa 1f       	adc	r26, r26
    57ec:	bb 1f       	adc	r27, r27
    57ee:	ee 1f       	adc	r30, r30
    57f0:	ff 1f       	adc	r31, r31
    57f2:	a2 17       	cp	r26, r18
    57f4:	b3 07       	cpc	r27, r19
    57f6:	e4 07       	cpc	r30, r20
    57f8:	f5 07       	cpc	r31, r21
    57fa:	20 f0       	brcs	.+8      	; 0x5804 <__udivmodsi4_ep>
    57fc:	a2 1b       	sub	r26, r18
    57fe:	b3 0b       	sbc	r27, r19
    5800:	e4 0b       	sbc	r30, r20
    5802:	f5 0b       	sbc	r31, r21

00005804 <__udivmodsi4_ep>:
    5804:	66 1f       	adc	r22, r22
    5806:	77 1f       	adc	r23, r23
    5808:	88 1f       	adc	r24, r24
    580a:	99 1f       	adc	r25, r25
    580c:	1a 94       	dec	r1
    580e:	69 f7       	brne	.-38     	; 0x57ea <__udivmodsi4_loop>
    5810:	60 95       	com	r22
    5812:	70 95       	com	r23
    5814:	80 95       	com	r24
    5816:	90 95       	com	r25
    5818:	9b 01       	movw	r18, r22
    581a:	ac 01       	movw	r20, r24
    581c:	bd 01       	movw	r22, r26
    581e:	cf 01       	movw	r24, r30
    5820:	08 95       	ret

00005822 <__tablejump2__>:
    5822:	ee 0f       	add	r30, r30
    5824:	ff 1f       	adc	r31, r31
    5826:	88 1f       	adc	r24, r24
    5828:	8b bf       	out	0x3b, r24	; 59
    582a:	07 90       	elpm	r0, Z+
    582c:	f6 91       	elpm	r31, Z
    582e:	e0 2d       	mov	r30, r0
    5830:	19 94       	eijmp

00005832 <calloc>:
    5832:	0f 93       	push	r16
    5834:	1f 93       	push	r17
    5836:	cf 93       	push	r28
    5838:	df 93       	push	r29
    583a:	86 9f       	mul	r24, r22
    583c:	80 01       	movw	r16, r0
    583e:	87 9f       	mul	r24, r23
    5840:	10 0d       	add	r17, r0
    5842:	96 9f       	mul	r25, r22
    5844:	10 0d       	add	r17, r0
    5846:	11 24       	eor	r1, r1
    5848:	c8 01       	movw	r24, r16
    584a:	0d d0       	rcall	.+26     	; 0x5866 <malloc>
    584c:	ec 01       	movw	r28, r24
    584e:	00 97       	sbiw	r24, 0x00	; 0
    5850:	21 f0       	breq	.+8      	; 0x585a <calloc+0x28>
    5852:	a8 01       	movw	r20, r16
    5854:	60 e0       	ldi	r22, 0x00	; 0
    5856:	70 e0       	ldi	r23, 0x00	; 0
    5858:	34 d1       	rcall	.+616    	; 0x5ac2 <memset>
    585a:	ce 01       	movw	r24, r28
    585c:	df 91       	pop	r29
    585e:	cf 91       	pop	r28
    5860:	1f 91       	pop	r17
    5862:	0f 91       	pop	r16
    5864:	08 95       	ret

00005866 <malloc>:
    5866:	0f 93       	push	r16
    5868:	1f 93       	push	r17
    586a:	cf 93       	push	r28
    586c:	df 93       	push	r29
    586e:	82 30       	cpi	r24, 0x02	; 2
    5870:	91 05       	cpc	r25, r1
    5872:	10 f4       	brcc	.+4      	; 0x5878 <malloc+0x12>
    5874:	82 e0       	ldi	r24, 0x02	; 2
    5876:	90 e0       	ldi	r25, 0x00	; 0
    5878:	e0 91 8a 1a 	lds	r30, 0x1A8A	; 0x801a8a <__flp>
    587c:	f0 91 8b 1a 	lds	r31, 0x1A8B	; 0x801a8b <__flp+0x1>
    5880:	20 e0       	ldi	r18, 0x00	; 0
    5882:	30 e0       	ldi	r19, 0x00	; 0
    5884:	a0 e0       	ldi	r26, 0x00	; 0
    5886:	b0 e0       	ldi	r27, 0x00	; 0
    5888:	30 97       	sbiw	r30, 0x00	; 0
    588a:	19 f1       	breq	.+70     	; 0x58d2 <malloc+0x6c>
    588c:	40 81       	ld	r20, Z
    588e:	51 81       	ldd	r21, Z+1	; 0x01
    5890:	02 81       	ldd	r16, Z+2	; 0x02
    5892:	13 81       	ldd	r17, Z+3	; 0x03
    5894:	48 17       	cp	r20, r24
    5896:	59 07       	cpc	r21, r25
    5898:	c8 f0       	brcs	.+50     	; 0x58cc <malloc+0x66>
    589a:	84 17       	cp	r24, r20
    589c:	95 07       	cpc	r25, r21
    589e:	69 f4       	brne	.+26     	; 0x58ba <malloc+0x54>
    58a0:	10 97       	sbiw	r26, 0x00	; 0
    58a2:	31 f0       	breq	.+12     	; 0x58b0 <malloc+0x4a>
    58a4:	12 96       	adiw	r26, 0x02	; 2
    58a6:	0c 93       	st	X, r16
    58a8:	12 97       	sbiw	r26, 0x02	; 2
    58aa:	13 96       	adiw	r26, 0x03	; 3
    58ac:	1c 93       	st	X, r17
    58ae:	27 c0       	rjmp	.+78     	; 0x58fe <malloc+0x98>
    58b0:	00 93 8a 1a 	sts	0x1A8A, r16	; 0x801a8a <__flp>
    58b4:	10 93 8b 1a 	sts	0x1A8B, r17	; 0x801a8b <__flp+0x1>
    58b8:	22 c0       	rjmp	.+68     	; 0x58fe <malloc+0x98>
    58ba:	21 15       	cp	r18, r1
    58bc:	31 05       	cpc	r19, r1
    58be:	19 f0       	breq	.+6      	; 0x58c6 <malloc+0x60>
    58c0:	42 17       	cp	r20, r18
    58c2:	53 07       	cpc	r21, r19
    58c4:	18 f4       	brcc	.+6      	; 0x58cc <malloc+0x66>
    58c6:	9a 01       	movw	r18, r20
    58c8:	bd 01       	movw	r22, r26
    58ca:	ef 01       	movw	r28, r30
    58cc:	df 01       	movw	r26, r30
    58ce:	f8 01       	movw	r30, r16
    58d0:	db cf       	rjmp	.-74     	; 0x5888 <malloc+0x22>
    58d2:	21 15       	cp	r18, r1
    58d4:	31 05       	cpc	r19, r1
    58d6:	f9 f0       	breq	.+62     	; 0x5916 <malloc+0xb0>
    58d8:	28 1b       	sub	r18, r24
    58da:	39 0b       	sbc	r19, r25
    58dc:	24 30       	cpi	r18, 0x04	; 4
    58de:	31 05       	cpc	r19, r1
    58e0:	80 f4       	brcc	.+32     	; 0x5902 <malloc+0x9c>
    58e2:	8a 81       	ldd	r24, Y+2	; 0x02
    58e4:	9b 81       	ldd	r25, Y+3	; 0x03
    58e6:	61 15       	cp	r22, r1
    58e8:	71 05       	cpc	r23, r1
    58ea:	21 f0       	breq	.+8      	; 0x58f4 <malloc+0x8e>
    58ec:	fb 01       	movw	r30, r22
    58ee:	93 83       	std	Z+3, r25	; 0x03
    58f0:	82 83       	std	Z+2, r24	; 0x02
    58f2:	04 c0       	rjmp	.+8      	; 0x58fc <malloc+0x96>
    58f4:	90 93 8b 1a 	sts	0x1A8B, r25	; 0x801a8b <__flp+0x1>
    58f8:	80 93 8a 1a 	sts	0x1A8A, r24	; 0x801a8a <__flp>
    58fc:	fe 01       	movw	r30, r28
    58fe:	32 96       	adiw	r30, 0x02	; 2
    5900:	44 c0       	rjmp	.+136    	; 0x598a <malloc+0x124>
    5902:	fe 01       	movw	r30, r28
    5904:	e2 0f       	add	r30, r18
    5906:	f3 1f       	adc	r31, r19
    5908:	81 93       	st	Z+, r24
    590a:	91 93       	st	Z+, r25
    590c:	22 50       	subi	r18, 0x02	; 2
    590e:	31 09       	sbc	r19, r1
    5910:	39 83       	std	Y+1, r19	; 0x01
    5912:	28 83       	st	Y, r18
    5914:	3a c0       	rjmp	.+116    	; 0x598a <malloc+0x124>
    5916:	20 91 88 1a 	lds	r18, 0x1A88	; 0x801a88 <__brkval>
    591a:	30 91 89 1a 	lds	r19, 0x1A89	; 0x801a89 <__brkval+0x1>
    591e:	23 2b       	or	r18, r19
    5920:	41 f4       	brne	.+16     	; 0x5932 <malloc+0xcc>
    5922:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    5926:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    592a:	30 93 89 1a 	sts	0x1A89, r19	; 0x801a89 <__brkval+0x1>
    592e:	20 93 88 1a 	sts	0x1A88, r18	; 0x801a88 <__brkval>
    5932:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    5936:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    593a:	21 15       	cp	r18, r1
    593c:	31 05       	cpc	r19, r1
    593e:	41 f4       	brne	.+16     	; 0x5950 <malloc+0xea>
    5940:	2d b7       	in	r18, 0x3d	; 61
    5942:	3e b7       	in	r19, 0x3e	; 62
    5944:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    5948:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    594c:	24 1b       	sub	r18, r20
    594e:	35 0b       	sbc	r19, r21
    5950:	e0 91 88 1a 	lds	r30, 0x1A88	; 0x801a88 <__brkval>
    5954:	f0 91 89 1a 	lds	r31, 0x1A89	; 0x801a89 <__brkval+0x1>
    5958:	e2 17       	cp	r30, r18
    595a:	f3 07       	cpc	r31, r19
    595c:	a0 f4       	brcc	.+40     	; 0x5986 <malloc+0x120>
    595e:	2e 1b       	sub	r18, r30
    5960:	3f 0b       	sbc	r19, r31
    5962:	28 17       	cp	r18, r24
    5964:	39 07       	cpc	r19, r25
    5966:	78 f0       	brcs	.+30     	; 0x5986 <malloc+0x120>
    5968:	ac 01       	movw	r20, r24
    596a:	4e 5f       	subi	r20, 0xFE	; 254
    596c:	5f 4f       	sbci	r21, 0xFF	; 255
    596e:	24 17       	cp	r18, r20
    5970:	35 07       	cpc	r19, r21
    5972:	48 f0       	brcs	.+18     	; 0x5986 <malloc+0x120>
    5974:	4e 0f       	add	r20, r30
    5976:	5f 1f       	adc	r21, r31
    5978:	50 93 89 1a 	sts	0x1A89, r21	; 0x801a89 <__brkval+0x1>
    597c:	40 93 88 1a 	sts	0x1A88, r20	; 0x801a88 <__brkval>
    5980:	81 93       	st	Z+, r24
    5982:	91 93       	st	Z+, r25
    5984:	02 c0       	rjmp	.+4      	; 0x598a <malloc+0x124>
    5986:	e0 e0       	ldi	r30, 0x00	; 0
    5988:	f0 e0       	ldi	r31, 0x00	; 0
    598a:	cf 01       	movw	r24, r30
    598c:	df 91       	pop	r29
    598e:	cf 91       	pop	r28
    5990:	1f 91       	pop	r17
    5992:	0f 91       	pop	r16
    5994:	08 95       	ret

00005996 <free>:
    5996:	cf 93       	push	r28
    5998:	df 93       	push	r29
    599a:	00 97       	sbiw	r24, 0x00	; 0
    599c:	09 f4       	brne	.+2      	; 0x59a0 <free+0xa>
    599e:	81 c0       	rjmp	.+258    	; 0x5aa2 <free+0x10c>
    59a0:	fc 01       	movw	r30, r24
    59a2:	32 97       	sbiw	r30, 0x02	; 2
    59a4:	13 82       	std	Z+3, r1	; 0x03
    59a6:	12 82       	std	Z+2, r1	; 0x02
    59a8:	a0 91 8a 1a 	lds	r26, 0x1A8A	; 0x801a8a <__flp>
    59ac:	b0 91 8b 1a 	lds	r27, 0x1A8B	; 0x801a8b <__flp+0x1>
    59b0:	10 97       	sbiw	r26, 0x00	; 0
    59b2:	81 f4       	brne	.+32     	; 0x59d4 <free+0x3e>
    59b4:	20 81       	ld	r18, Z
    59b6:	31 81       	ldd	r19, Z+1	; 0x01
    59b8:	82 0f       	add	r24, r18
    59ba:	93 1f       	adc	r25, r19
    59bc:	20 91 88 1a 	lds	r18, 0x1A88	; 0x801a88 <__brkval>
    59c0:	30 91 89 1a 	lds	r19, 0x1A89	; 0x801a89 <__brkval+0x1>
    59c4:	28 17       	cp	r18, r24
    59c6:	39 07       	cpc	r19, r25
    59c8:	51 f5       	brne	.+84     	; 0x5a1e <free+0x88>
    59ca:	f0 93 89 1a 	sts	0x1A89, r31	; 0x801a89 <__brkval+0x1>
    59ce:	e0 93 88 1a 	sts	0x1A88, r30	; 0x801a88 <__brkval>
    59d2:	67 c0       	rjmp	.+206    	; 0x5aa2 <free+0x10c>
    59d4:	ed 01       	movw	r28, r26
    59d6:	20 e0       	ldi	r18, 0x00	; 0
    59d8:	30 e0       	ldi	r19, 0x00	; 0
    59da:	ce 17       	cp	r28, r30
    59dc:	df 07       	cpc	r29, r31
    59de:	40 f4       	brcc	.+16     	; 0x59f0 <free+0x5a>
    59e0:	4a 81       	ldd	r20, Y+2	; 0x02
    59e2:	5b 81       	ldd	r21, Y+3	; 0x03
    59e4:	9e 01       	movw	r18, r28
    59e6:	41 15       	cp	r20, r1
    59e8:	51 05       	cpc	r21, r1
    59ea:	f1 f0       	breq	.+60     	; 0x5a28 <free+0x92>
    59ec:	ea 01       	movw	r28, r20
    59ee:	f5 cf       	rjmp	.-22     	; 0x59da <free+0x44>
    59f0:	d3 83       	std	Z+3, r29	; 0x03
    59f2:	c2 83       	std	Z+2, r28	; 0x02
    59f4:	40 81       	ld	r20, Z
    59f6:	51 81       	ldd	r21, Z+1	; 0x01
    59f8:	84 0f       	add	r24, r20
    59fa:	95 1f       	adc	r25, r21
    59fc:	c8 17       	cp	r28, r24
    59fe:	d9 07       	cpc	r29, r25
    5a00:	59 f4       	brne	.+22     	; 0x5a18 <free+0x82>
    5a02:	88 81       	ld	r24, Y
    5a04:	99 81       	ldd	r25, Y+1	; 0x01
    5a06:	84 0f       	add	r24, r20
    5a08:	95 1f       	adc	r25, r21
    5a0a:	02 96       	adiw	r24, 0x02	; 2
    5a0c:	91 83       	std	Z+1, r25	; 0x01
    5a0e:	80 83       	st	Z, r24
    5a10:	8a 81       	ldd	r24, Y+2	; 0x02
    5a12:	9b 81       	ldd	r25, Y+3	; 0x03
    5a14:	93 83       	std	Z+3, r25	; 0x03
    5a16:	82 83       	std	Z+2, r24	; 0x02
    5a18:	21 15       	cp	r18, r1
    5a1a:	31 05       	cpc	r19, r1
    5a1c:	29 f4       	brne	.+10     	; 0x5a28 <free+0x92>
    5a1e:	f0 93 8b 1a 	sts	0x1A8B, r31	; 0x801a8b <__flp+0x1>
    5a22:	e0 93 8a 1a 	sts	0x1A8A, r30	; 0x801a8a <__flp>
    5a26:	3d c0       	rjmp	.+122    	; 0x5aa2 <free+0x10c>
    5a28:	e9 01       	movw	r28, r18
    5a2a:	fb 83       	std	Y+3, r31	; 0x03
    5a2c:	ea 83       	std	Y+2, r30	; 0x02
    5a2e:	49 91       	ld	r20, Y+
    5a30:	59 91       	ld	r21, Y+
    5a32:	c4 0f       	add	r28, r20
    5a34:	d5 1f       	adc	r29, r21
    5a36:	ec 17       	cp	r30, r28
    5a38:	fd 07       	cpc	r31, r29
    5a3a:	61 f4       	brne	.+24     	; 0x5a54 <free+0xbe>
    5a3c:	80 81       	ld	r24, Z
    5a3e:	91 81       	ldd	r25, Z+1	; 0x01
    5a40:	84 0f       	add	r24, r20
    5a42:	95 1f       	adc	r25, r21
    5a44:	02 96       	adiw	r24, 0x02	; 2
    5a46:	e9 01       	movw	r28, r18
    5a48:	99 83       	std	Y+1, r25	; 0x01
    5a4a:	88 83       	st	Y, r24
    5a4c:	82 81       	ldd	r24, Z+2	; 0x02
    5a4e:	93 81       	ldd	r25, Z+3	; 0x03
    5a50:	9b 83       	std	Y+3, r25	; 0x03
    5a52:	8a 83       	std	Y+2, r24	; 0x02
    5a54:	e0 e0       	ldi	r30, 0x00	; 0
    5a56:	f0 e0       	ldi	r31, 0x00	; 0
    5a58:	12 96       	adiw	r26, 0x02	; 2
    5a5a:	8d 91       	ld	r24, X+
    5a5c:	9c 91       	ld	r25, X
    5a5e:	13 97       	sbiw	r26, 0x03	; 3
    5a60:	00 97       	sbiw	r24, 0x00	; 0
    5a62:	19 f0       	breq	.+6      	; 0x5a6a <free+0xd4>
    5a64:	fd 01       	movw	r30, r26
    5a66:	dc 01       	movw	r26, r24
    5a68:	f7 cf       	rjmp	.-18     	; 0x5a58 <free+0xc2>
    5a6a:	8d 91       	ld	r24, X+
    5a6c:	9c 91       	ld	r25, X
    5a6e:	11 97       	sbiw	r26, 0x01	; 1
    5a70:	9d 01       	movw	r18, r26
    5a72:	2e 5f       	subi	r18, 0xFE	; 254
    5a74:	3f 4f       	sbci	r19, 0xFF	; 255
    5a76:	82 0f       	add	r24, r18
    5a78:	93 1f       	adc	r25, r19
    5a7a:	20 91 88 1a 	lds	r18, 0x1A88	; 0x801a88 <__brkval>
    5a7e:	30 91 89 1a 	lds	r19, 0x1A89	; 0x801a89 <__brkval+0x1>
    5a82:	28 17       	cp	r18, r24
    5a84:	39 07       	cpc	r19, r25
    5a86:	69 f4       	brne	.+26     	; 0x5aa2 <free+0x10c>
    5a88:	30 97       	sbiw	r30, 0x00	; 0
    5a8a:	29 f4       	brne	.+10     	; 0x5a96 <free+0x100>
    5a8c:	10 92 8b 1a 	sts	0x1A8B, r1	; 0x801a8b <__flp+0x1>
    5a90:	10 92 8a 1a 	sts	0x1A8A, r1	; 0x801a8a <__flp>
    5a94:	02 c0       	rjmp	.+4      	; 0x5a9a <free+0x104>
    5a96:	13 82       	std	Z+3, r1	; 0x03
    5a98:	12 82       	std	Z+2, r1	; 0x02
    5a9a:	b0 93 89 1a 	sts	0x1A89, r27	; 0x801a89 <__brkval+0x1>
    5a9e:	a0 93 88 1a 	sts	0x1A88, r26	; 0x801a88 <__brkval>
    5aa2:	df 91       	pop	r29
    5aa4:	cf 91       	pop	r28
    5aa6:	08 95       	ret

00005aa8 <abort>:
    5aa8:	81 e0       	ldi	r24, 0x01	; 1
    5aaa:	90 e0       	ldi	r25, 0x00	; 0
    5aac:	f8 94       	cli
    5aae:	7d c3       	rjmp	.+1786   	; 0x61aa <_exit>

00005ab0 <memcpy>:
    5ab0:	fb 01       	movw	r30, r22
    5ab2:	dc 01       	movw	r26, r24
    5ab4:	02 c0       	rjmp	.+4      	; 0x5aba <memcpy+0xa>
    5ab6:	01 90       	ld	r0, Z+
    5ab8:	0d 92       	st	X+, r0
    5aba:	41 50       	subi	r20, 0x01	; 1
    5abc:	50 40       	sbci	r21, 0x00	; 0
    5abe:	d8 f7       	brcc	.-10     	; 0x5ab6 <memcpy+0x6>
    5ac0:	08 95       	ret

00005ac2 <memset>:
    5ac2:	dc 01       	movw	r26, r24
    5ac4:	01 c0       	rjmp	.+2      	; 0x5ac8 <memset+0x6>
    5ac6:	6d 93       	st	X+, r22
    5ac8:	41 50       	subi	r20, 0x01	; 1
    5aca:	50 40       	sbci	r21, 0x00	; 0
    5acc:	e0 f7       	brcc	.-8      	; 0x5ac6 <memset+0x4>
    5ace:	08 95       	ret

00005ad0 <strcasestr>:
    5ad0:	fb 01       	movw	r30, r22
    5ad2:	51 91       	ld	r21, Z+
    5ad4:	55 23       	and	r21, r21
    5ad6:	b1 f0       	breq	.+44     	; 0x5b04 <strcasestr+0x34>
    5ad8:	bf 01       	movw	r22, r30
    5ada:	dc 01       	movw	r26, r24
    5adc:	05 2e       	mov	r0, r21
    5ade:	4d 91       	ld	r20, X+
    5ae0:	44 23       	and	r20, r20
    5ae2:	69 f0       	breq	.+26     	; 0x5afe <strcasestr+0x2e>
    5ae4:	10 d0       	rcall	.+32     	; 0x5b06 <strcasestr+0x36>
    5ae6:	d9 f7       	brne	.-10     	; 0x5ade <strcasestr+0xe>
    5ae8:	cd 01       	movw	r24, r26
    5aea:	01 90       	ld	r0, Z+
    5aec:	00 20       	and	r0, r0
    5aee:	49 f0       	breq	.+18     	; 0x5b02 <strcasestr+0x32>
    5af0:	4d 91       	ld	r20, X+
    5af2:	41 11       	cpse	r20, r1
    5af4:	08 d0       	rcall	.+16     	; 0x5b06 <strcasestr+0x36>
    5af6:	c9 f3       	breq	.-14     	; 0x5aea <strcasestr+0x1a>
    5af8:	fb 01       	movw	r30, r22
    5afa:	41 11       	cpse	r20, r1
    5afc:	ee cf       	rjmp	.-36     	; 0x5ada <strcasestr+0xa>
    5afe:	81 e0       	ldi	r24, 0x01	; 1
    5b00:	90 e0       	ldi	r25, 0x00	; 0
    5b02:	01 97       	sbiw	r24, 0x01	; 1
    5b04:	08 95       	ret
    5b06:	40 25       	eor	r20, r0
    5b08:	39 f0       	breq	.+14     	; 0x5b18 <strcasestr+0x48>
    5b0a:	40 32       	cpi	r20, 0x20	; 32
    5b0c:	29 f4       	brne	.+10     	; 0x5b18 <strcasestr+0x48>
    5b0e:	40 29       	or	r20, r0
    5b10:	4b 57       	subi	r20, 0x7B	; 123
    5b12:	46 5e       	subi	r20, 0xE6	; 230
    5b14:	08 f0       	brcs	.+2      	; 0x5b18 <strcasestr+0x48>
    5b16:	18 94       	sez
    5b18:	08 95       	ret

00005b1a <strcat>:
    5b1a:	fb 01       	movw	r30, r22
    5b1c:	dc 01       	movw	r26, r24
    5b1e:	0d 90       	ld	r0, X+
    5b20:	00 20       	and	r0, r0
    5b22:	e9 f7       	brne	.-6      	; 0x5b1e <strcat+0x4>
    5b24:	11 97       	sbiw	r26, 0x01	; 1
    5b26:	01 90       	ld	r0, Z+
    5b28:	0d 92       	st	X+, r0
    5b2a:	00 20       	and	r0, r0
    5b2c:	e1 f7       	brne	.-8      	; 0x5b26 <strcat+0xc>
    5b2e:	08 95       	ret

00005b30 <strcpy>:
    5b30:	fb 01       	movw	r30, r22
    5b32:	dc 01       	movw	r26, r24
    5b34:	01 90       	ld	r0, Z+
    5b36:	0d 92       	st	X+, r0
    5b38:	00 20       	and	r0, r0
    5b3a:	e1 f7       	brne	.-8      	; 0x5b34 <strcpy+0x4>
    5b3c:	08 95       	ret

00005b3e <strncasecmp>:
    5b3e:	fb 01       	movw	r30, r22
    5b40:	dc 01       	movw	r26, r24
    5b42:	41 50       	subi	r20, 0x01	; 1
    5b44:	50 40       	sbci	r21, 0x00	; 0
    5b46:	88 f0       	brcs	.+34     	; 0x5b6a <strncasecmp+0x2c>
    5b48:	8d 91       	ld	r24, X+
    5b4a:	81 34       	cpi	r24, 0x41	; 65
    5b4c:	1c f0       	brlt	.+6      	; 0x5b54 <strncasecmp+0x16>
    5b4e:	8b 35       	cpi	r24, 0x5B	; 91
    5b50:	0c f4       	brge	.+2      	; 0x5b54 <strncasecmp+0x16>
    5b52:	80 5e       	subi	r24, 0xE0	; 224
    5b54:	61 91       	ld	r22, Z+
    5b56:	61 34       	cpi	r22, 0x41	; 65
    5b58:	1c f0       	brlt	.+6      	; 0x5b60 <strncasecmp+0x22>
    5b5a:	6b 35       	cpi	r22, 0x5B	; 91
    5b5c:	0c f4       	brge	.+2      	; 0x5b60 <strncasecmp+0x22>
    5b5e:	60 5e       	subi	r22, 0xE0	; 224
    5b60:	86 1b       	sub	r24, r22
    5b62:	61 11       	cpse	r22, r1
    5b64:	71 f3       	breq	.-36     	; 0x5b42 <strncasecmp+0x4>
    5b66:	99 0b       	sbc	r25, r25
    5b68:	08 95       	ret
    5b6a:	88 1b       	sub	r24, r24
    5b6c:	fc cf       	rjmp	.-8      	; 0x5b66 <strncasecmp+0x28>

00005b6e <printf>:
    5b6e:	cf 93       	push	r28
    5b70:	df 93       	push	r29
    5b72:	cd b7       	in	r28, 0x3d	; 61
    5b74:	de b7       	in	r29, 0x3e	; 62
    5b76:	ae 01       	movw	r20, r28
    5b78:	4a 5f       	subi	r20, 0xFA	; 250
    5b7a:	5f 4f       	sbci	r21, 0xFF	; 255
    5b7c:	fa 01       	movw	r30, r20
    5b7e:	61 91       	ld	r22, Z+
    5b80:	71 91       	ld	r23, Z+
    5b82:	af 01       	movw	r20, r30
    5b84:	80 91 8e 1a 	lds	r24, 0x1A8E	; 0x801a8e <__iob+0x2>
    5b88:	90 91 8f 1a 	lds	r25, 0x1A8F	; 0x801a8f <__iob+0x3>
    5b8c:	61 d0       	rcall	.+194    	; 0x5c50 <vfprintf>
    5b8e:	df 91       	pop	r29
    5b90:	cf 91       	pop	r28
    5b92:	08 95       	ret

00005b94 <puts>:
    5b94:	0f 93       	push	r16
    5b96:	1f 93       	push	r17
    5b98:	cf 93       	push	r28
    5b9a:	df 93       	push	r29
    5b9c:	e0 91 8e 1a 	lds	r30, 0x1A8E	; 0x801a8e <__iob+0x2>
    5ba0:	f0 91 8f 1a 	lds	r31, 0x1A8F	; 0x801a8f <__iob+0x3>
    5ba4:	23 81       	ldd	r18, Z+3	; 0x03
    5ba6:	21 ff       	sbrs	r18, 1
    5ba8:	1b c0       	rjmp	.+54     	; 0x5be0 <puts+0x4c>
    5baa:	8c 01       	movw	r16, r24
    5bac:	d0 e0       	ldi	r29, 0x00	; 0
    5bae:	c0 e0       	ldi	r28, 0x00	; 0
    5bb0:	f8 01       	movw	r30, r16
    5bb2:	81 91       	ld	r24, Z+
    5bb4:	8f 01       	movw	r16, r30
    5bb6:	60 91 8e 1a 	lds	r22, 0x1A8E	; 0x801a8e <__iob+0x2>
    5bba:	70 91 8f 1a 	lds	r23, 0x1A8F	; 0x801a8f <__iob+0x3>
    5bbe:	db 01       	movw	r26, r22
    5bc0:	18 96       	adiw	r26, 0x08	; 8
    5bc2:	ed 91       	ld	r30, X+
    5bc4:	fc 91       	ld	r31, X
    5bc6:	19 97       	sbiw	r26, 0x09	; 9
    5bc8:	88 23       	and	r24, r24
    5bca:	31 f0       	breq	.+12     	; 0x5bd8 <puts+0x44>
    5bcc:	19 95       	eicall
    5bce:	89 2b       	or	r24, r25
    5bd0:	79 f3       	breq	.-34     	; 0x5bb0 <puts+0x1c>
    5bd2:	df ef       	ldi	r29, 0xFF	; 255
    5bd4:	cf ef       	ldi	r28, 0xFF	; 255
    5bd6:	ec cf       	rjmp	.-40     	; 0x5bb0 <puts+0x1c>
    5bd8:	8a e0       	ldi	r24, 0x0A	; 10
    5bda:	19 95       	eicall
    5bdc:	89 2b       	or	r24, r25
    5bde:	19 f0       	breq	.+6      	; 0x5be6 <puts+0x52>
    5be0:	8f ef       	ldi	r24, 0xFF	; 255
    5be2:	9f ef       	ldi	r25, 0xFF	; 255
    5be4:	02 c0       	rjmp	.+4      	; 0x5bea <puts+0x56>
    5be6:	8d 2f       	mov	r24, r29
    5be8:	9c 2f       	mov	r25, r28
    5bea:	df 91       	pop	r29
    5bec:	cf 91       	pop	r28
    5bee:	1f 91       	pop	r17
    5bf0:	0f 91       	pop	r16
    5bf2:	08 95       	ret

00005bf4 <sprintf>:
    5bf4:	0f 93       	push	r16
    5bf6:	1f 93       	push	r17
    5bf8:	cf 93       	push	r28
    5bfa:	df 93       	push	r29
    5bfc:	cd b7       	in	r28, 0x3d	; 61
    5bfe:	de b7       	in	r29, 0x3e	; 62
    5c00:	2e 97       	sbiw	r28, 0x0e	; 14
    5c02:	0f b6       	in	r0, 0x3f	; 63
    5c04:	f8 94       	cli
    5c06:	de bf       	out	0x3e, r29	; 62
    5c08:	0f be       	out	0x3f, r0	; 63
    5c0a:	cd bf       	out	0x3d, r28	; 61
    5c0c:	0e 89       	ldd	r16, Y+22	; 0x16
    5c0e:	1f 89       	ldd	r17, Y+23	; 0x17
    5c10:	86 e0       	ldi	r24, 0x06	; 6
    5c12:	8c 83       	std	Y+4, r24	; 0x04
    5c14:	1a 83       	std	Y+2, r17	; 0x02
    5c16:	09 83       	std	Y+1, r16	; 0x01
    5c18:	8f ef       	ldi	r24, 0xFF	; 255
    5c1a:	9f e7       	ldi	r25, 0x7F	; 127
    5c1c:	9e 83       	std	Y+6, r25	; 0x06
    5c1e:	8d 83       	std	Y+5, r24	; 0x05
    5c20:	ae 01       	movw	r20, r28
    5c22:	46 5e       	subi	r20, 0xE6	; 230
    5c24:	5f 4f       	sbci	r21, 0xFF	; 255
    5c26:	68 8d       	ldd	r22, Y+24	; 0x18
    5c28:	79 8d       	ldd	r23, Y+25	; 0x19
    5c2a:	ce 01       	movw	r24, r28
    5c2c:	01 96       	adiw	r24, 0x01	; 1
    5c2e:	10 d0       	rcall	.+32     	; 0x5c50 <vfprintf>
    5c30:	ef 81       	ldd	r30, Y+7	; 0x07
    5c32:	f8 85       	ldd	r31, Y+8	; 0x08
    5c34:	e0 0f       	add	r30, r16
    5c36:	f1 1f       	adc	r31, r17
    5c38:	10 82       	st	Z, r1
    5c3a:	2e 96       	adiw	r28, 0x0e	; 14
    5c3c:	0f b6       	in	r0, 0x3f	; 63
    5c3e:	f8 94       	cli
    5c40:	de bf       	out	0x3e, r29	; 62
    5c42:	0f be       	out	0x3f, r0	; 63
    5c44:	cd bf       	out	0x3d, r28	; 61
    5c46:	df 91       	pop	r29
    5c48:	cf 91       	pop	r28
    5c4a:	1f 91       	pop	r17
    5c4c:	0f 91       	pop	r16
    5c4e:	08 95       	ret

00005c50 <vfprintf>:
    5c50:	2f 92       	push	r2
    5c52:	3f 92       	push	r3
    5c54:	4f 92       	push	r4
    5c56:	5f 92       	push	r5
    5c58:	6f 92       	push	r6
    5c5a:	7f 92       	push	r7
    5c5c:	8f 92       	push	r8
    5c5e:	9f 92       	push	r9
    5c60:	af 92       	push	r10
    5c62:	bf 92       	push	r11
    5c64:	cf 92       	push	r12
    5c66:	df 92       	push	r13
    5c68:	ef 92       	push	r14
    5c6a:	ff 92       	push	r15
    5c6c:	0f 93       	push	r16
    5c6e:	1f 93       	push	r17
    5c70:	cf 93       	push	r28
    5c72:	df 93       	push	r29
    5c74:	cd b7       	in	r28, 0x3d	; 61
    5c76:	de b7       	in	r29, 0x3e	; 62
    5c78:	2b 97       	sbiw	r28, 0x0b	; 11
    5c7a:	0f b6       	in	r0, 0x3f	; 63
    5c7c:	f8 94       	cli
    5c7e:	de bf       	out	0x3e, r29	; 62
    5c80:	0f be       	out	0x3f, r0	; 63
    5c82:	cd bf       	out	0x3d, r28	; 61
    5c84:	6c 01       	movw	r12, r24
    5c86:	7b 01       	movw	r14, r22
    5c88:	8a 01       	movw	r16, r20
    5c8a:	fc 01       	movw	r30, r24
    5c8c:	17 82       	std	Z+7, r1	; 0x07
    5c8e:	16 82       	std	Z+6, r1	; 0x06
    5c90:	83 81       	ldd	r24, Z+3	; 0x03
    5c92:	81 ff       	sbrs	r24, 1
    5c94:	bf c1       	rjmp	.+894    	; 0x6014 <vfprintf+0x3c4>
    5c96:	ce 01       	movw	r24, r28
    5c98:	01 96       	adiw	r24, 0x01	; 1
    5c9a:	3c 01       	movw	r6, r24
    5c9c:	f6 01       	movw	r30, r12
    5c9e:	93 81       	ldd	r25, Z+3	; 0x03
    5ca0:	f7 01       	movw	r30, r14
    5ca2:	93 fd       	sbrc	r25, 3
    5ca4:	85 91       	lpm	r24, Z+
    5ca6:	93 ff       	sbrs	r25, 3
    5ca8:	81 91       	ld	r24, Z+
    5caa:	7f 01       	movw	r14, r30
    5cac:	88 23       	and	r24, r24
    5cae:	09 f4       	brne	.+2      	; 0x5cb2 <vfprintf+0x62>
    5cb0:	ad c1       	rjmp	.+858    	; 0x600c <vfprintf+0x3bc>
    5cb2:	85 32       	cpi	r24, 0x25	; 37
    5cb4:	39 f4       	brne	.+14     	; 0x5cc4 <vfprintf+0x74>
    5cb6:	93 fd       	sbrc	r25, 3
    5cb8:	85 91       	lpm	r24, Z+
    5cba:	93 ff       	sbrs	r25, 3
    5cbc:	81 91       	ld	r24, Z+
    5cbe:	7f 01       	movw	r14, r30
    5cc0:	85 32       	cpi	r24, 0x25	; 37
    5cc2:	21 f4       	brne	.+8      	; 0x5ccc <vfprintf+0x7c>
    5cc4:	b6 01       	movw	r22, r12
    5cc6:	90 e0       	ldi	r25, 0x00	; 0
    5cc8:	d6 d1       	rcall	.+940    	; 0x6076 <fputc>
    5cca:	e8 cf       	rjmp	.-48     	; 0x5c9c <vfprintf+0x4c>
    5ccc:	91 2c       	mov	r9, r1
    5cce:	21 2c       	mov	r2, r1
    5cd0:	31 2c       	mov	r3, r1
    5cd2:	ff e1       	ldi	r31, 0x1F	; 31
    5cd4:	f3 15       	cp	r31, r3
    5cd6:	d8 f0       	brcs	.+54     	; 0x5d0e <vfprintf+0xbe>
    5cd8:	8b 32       	cpi	r24, 0x2B	; 43
    5cda:	79 f0       	breq	.+30     	; 0x5cfa <vfprintf+0xaa>
    5cdc:	38 f4       	brcc	.+14     	; 0x5cec <vfprintf+0x9c>
    5cde:	80 32       	cpi	r24, 0x20	; 32
    5ce0:	79 f0       	breq	.+30     	; 0x5d00 <vfprintf+0xb0>
    5ce2:	83 32       	cpi	r24, 0x23	; 35
    5ce4:	a1 f4       	brne	.+40     	; 0x5d0e <vfprintf+0xbe>
    5ce6:	23 2d       	mov	r18, r3
    5ce8:	20 61       	ori	r18, 0x10	; 16
    5cea:	1d c0       	rjmp	.+58     	; 0x5d26 <vfprintf+0xd6>
    5cec:	8d 32       	cpi	r24, 0x2D	; 45
    5cee:	61 f0       	breq	.+24     	; 0x5d08 <vfprintf+0xb8>
    5cf0:	80 33       	cpi	r24, 0x30	; 48
    5cf2:	69 f4       	brne	.+26     	; 0x5d0e <vfprintf+0xbe>
    5cf4:	23 2d       	mov	r18, r3
    5cf6:	21 60       	ori	r18, 0x01	; 1
    5cf8:	16 c0       	rjmp	.+44     	; 0x5d26 <vfprintf+0xd6>
    5cfa:	83 2d       	mov	r24, r3
    5cfc:	82 60       	ori	r24, 0x02	; 2
    5cfe:	38 2e       	mov	r3, r24
    5d00:	e3 2d       	mov	r30, r3
    5d02:	e4 60       	ori	r30, 0x04	; 4
    5d04:	3e 2e       	mov	r3, r30
    5d06:	2a c0       	rjmp	.+84     	; 0x5d5c <vfprintf+0x10c>
    5d08:	f3 2d       	mov	r31, r3
    5d0a:	f8 60       	ori	r31, 0x08	; 8
    5d0c:	1d c0       	rjmp	.+58     	; 0x5d48 <vfprintf+0xf8>
    5d0e:	37 fc       	sbrc	r3, 7
    5d10:	2d c0       	rjmp	.+90     	; 0x5d6c <vfprintf+0x11c>
    5d12:	20 ed       	ldi	r18, 0xD0	; 208
    5d14:	28 0f       	add	r18, r24
    5d16:	2a 30       	cpi	r18, 0x0A	; 10
    5d18:	40 f0       	brcs	.+16     	; 0x5d2a <vfprintf+0xda>
    5d1a:	8e 32       	cpi	r24, 0x2E	; 46
    5d1c:	b9 f4       	brne	.+46     	; 0x5d4c <vfprintf+0xfc>
    5d1e:	36 fc       	sbrc	r3, 6
    5d20:	75 c1       	rjmp	.+746    	; 0x600c <vfprintf+0x3bc>
    5d22:	23 2d       	mov	r18, r3
    5d24:	20 64       	ori	r18, 0x40	; 64
    5d26:	32 2e       	mov	r3, r18
    5d28:	19 c0       	rjmp	.+50     	; 0x5d5c <vfprintf+0x10c>
    5d2a:	36 fe       	sbrs	r3, 6
    5d2c:	06 c0       	rjmp	.+12     	; 0x5d3a <vfprintf+0xea>
    5d2e:	8a e0       	ldi	r24, 0x0A	; 10
    5d30:	98 9e       	mul	r9, r24
    5d32:	20 0d       	add	r18, r0
    5d34:	11 24       	eor	r1, r1
    5d36:	92 2e       	mov	r9, r18
    5d38:	11 c0       	rjmp	.+34     	; 0x5d5c <vfprintf+0x10c>
    5d3a:	ea e0       	ldi	r30, 0x0A	; 10
    5d3c:	2e 9e       	mul	r2, r30
    5d3e:	20 0d       	add	r18, r0
    5d40:	11 24       	eor	r1, r1
    5d42:	22 2e       	mov	r2, r18
    5d44:	f3 2d       	mov	r31, r3
    5d46:	f0 62       	ori	r31, 0x20	; 32
    5d48:	3f 2e       	mov	r3, r31
    5d4a:	08 c0       	rjmp	.+16     	; 0x5d5c <vfprintf+0x10c>
    5d4c:	8c 36       	cpi	r24, 0x6C	; 108
    5d4e:	21 f4       	brne	.+8      	; 0x5d58 <vfprintf+0x108>
    5d50:	83 2d       	mov	r24, r3
    5d52:	80 68       	ori	r24, 0x80	; 128
    5d54:	38 2e       	mov	r3, r24
    5d56:	02 c0       	rjmp	.+4      	; 0x5d5c <vfprintf+0x10c>
    5d58:	88 36       	cpi	r24, 0x68	; 104
    5d5a:	41 f4       	brne	.+16     	; 0x5d6c <vfprintf+0x11c>
    5d5c:	f7 01       	movw	r30, r14
    5d5e:	93 fd       	sbrc	r25, 3
    5d60:	85 91       	lpm	r24, Z+
    5d62:	93 ff       	sbrs	r25, 3
    5d64:	81 91       	ld	r24, Z+
    5d66:	7f 01       	movw	r14, r30
    5d68:	81 11       	cpse	r24, r1
    5d6a:	b3 cf       	rjmp	.-154    	; 0x5cd2 <vfprintf+0x82>
    5d6c:	98 2f       	mov	r25, r24
    5d6e:	9f 7d       	andi	r25, 0xDF	; 223
    5d70:	95 54       	subi	r25, 0x45	; 69
    5d72:	93 30       	cpi	r25, 0x03	; 3
    5d74:	28 f4       	brcc	.+10     	; 0x5d80 <vfprintf+0x130>
    5d76:	0c 5f       	subi	r16, 0xFC	; 252
    5d78:	1f 4f       	sbci	r17, 0xFF	; 255
    5d7a:	9f e3       	ldi	r25, 0x3F	; 63
    5d7c:	99 83       	std	Y+1, r25	; 0x01
    5d7e:	0d c0       	rjmp	.+26     	; 0x5d9a <vfprintf+0x14a>
    5d80:	83 36       	cpi	r24, 0x63	; 99
    5d82:	31 f0       	breq	.+12     	; 0x5d90 <vfprintf+0x140>
    5d84:	83 37       	cpi	r24, 0x73	; 115
    5d86:	71 f0       	breq	.+28     	; 0x5da4 <vfprintf+0x154>
    5d88:	83 35       	cpi	r24, 0x53	; 83
    5d8a:	09 f0       	breq	.+2      	; 0x5d8e <vfprintf+0x13e>
    5d8c:	55 c0       	rjmp	.+170    	; 0x5e38 <vfprintf+0x1e8>
    5d8e:	20 c0       	rjmp	.+64     	; 0x5dd0 <vfprintf+0x180>
    5d90:	f8 01       	movw	r30, r16
    5d92:	80 81       	ld	r24, Z
    5d94:	89 83       	std	Y+1, r24	; 0x01
    5d96:	0e 5f       	subi	r16, 0xFE	; 254
    5d98:	1f 4f       	sbci	r17, 0xFF	; 255
    5d9a:	88 24       	eor	r8, r8
    5d9c:	83 94       	inc	r8
    5d9e:	91 2c       	mov	r9, r1
    5da0:	53 01       	movw	r10, r6
    5da2:	12 c0       	rjmp	.+36     	; 0x5dc8 <vfprintf+0x178>
    5da4:	28 01       	movw	r4, r16
    5da6:	f2 e0       	ldi	r31, 0x02	; 2
    5da8:	4f 0e       	add	r4, r31
    5daa:	51 1c       	adc	r5, r1
    5dac:	f8 01       	movw	r30, r16
    5dae:	a0 80       	ld	r10, Z
    5db0:	b1 80       	ldd	r11, Z+1	; 0x01
    5db2:	36 fe       	sbrs	r3, 6
    5db4:	03 c0       	rjmp	.+6      	; 0x5dbc <vfprintf+0x16c>
    5db6:	69 2d       	mov	r22, r9
    5db8:	70 e0       	ldi	r23, 0x00	; 0
    5dba:	02 c0       	rjmp	.+4      	; 0x5dc0 <vfprintf+0x170>
    5dbc:	6f ef       	ldi	r22, 0xFF	; 255
    5dbe:	7f ef       	ldi	r23, 0xFF	; 255
    5dc0:	c5 01       	movw	r24, r10
    5dc2:	4e d1       	rcall	.+668    	; 0x6060 <strnlen>
    5dc4:	4c 01       	movw	r8, r24
    5dc6:	82 01       	movw	r16, r4
    5dc8:	f3 2d       	mov	r31, r3
    5dca:	ff 77       	andi	r31, 0x7F	; 127
    5dcc:	3f 2e       	mov	r3, r31
    5dce:	15 c0       	rjmp	.+42     	; 0x5dfa <vfprintf+0x1aa>
    5dd0:	28 01       	movw	r4, r16
    5dd2:	22 e0       	ldi	r18, 0x02	; 2
    5dd4:	42 0e       	add	r4, r18
    5dd6:	51 1c       	adc	r5, r1
    5dd8:	f8 01       	movw	r30, r16
    5dda:	a0 80       	ld	r10, Z
    5ddc:	b1 80       	ldd	r11, Z+1	; 0x01
    5dde:	36 fe       	sbrs	r3, 6
    5de0:	03 c0       	rjmp	.+6      	; 0x5de8 <vfprintf+0x198>
    5de2:	69 2d       	mov	r22, r9
    5de4:	70 e0       	ldi	r23, 0x00	; 0
    5de6:	02 c0       	rjmp	.+4      	; 0x5dec <vfprintf+0x19c>
    5de8:	6f ef       	ldi	r22, 0xFF	; 255
    5dea:	7f ef       	ldi	r23, 0xFF	; 255
    5dec:	c5 01       	movw	r24, r10
    5dee:	2d d1       	rcall	.+602    	; 0x604a <strnlen_P>
    5df0:	4c 01       	movw	r8, r24
    5df2:	f3 2d       	mov	r31, r3
    5df4:	f0 68       	ori	r31, 0x80	; 128
    5df6:	3f 2e       	mov	r3, r31
    5df8:	82 01       	movw	r16, r4
    5dfa:	33 fc       	sbrc	r3, 3
    5dfc:	19 c0       	rjmp	.+50     	; 0x5e30 <vfprintf+0x1e0>
    5dfe:	82 2d       	mov	r24, r2
    5e00:	90 e0       	ldi	r25, 0x00	; 0
    5e02:	88 16       	cp	r8, r24
    5e04:	99 06       	cpc	r9, r25
    5e06:	a0 f4       	brcc	.+40     	; 0x5e30 <vfprintf+0x1e0>
    5e08:	b6 01       	movw	r22, r12
    5e0a:	80 e2       	ldi	r24, 0x20	; 32
    5e0c:	90 e0       	ldi	r25, 0x00	; 0
    5e0e:	33 d1       	rcall	.+614    	; 0x6076 <fputc>
    5e10:	2a 94       	dec	r2
    5e12:	f5 cf       	rjmp	.-22     	; 0x5dfe <vfprintf+0x1ae>
    5e14:	f5 01       	movw	r30, r10
    5e16:	37 fc       	sbrc	r3, 7
    5e18:	85 91       	lpm	r24, Z+
    5e1a:	37 fe       	sbrs	r3, 7
    5e1c:	81 91       	ld	r24, Z+
    5e1e:	5f 01       	movw	r10, r30
    5e20:	b6 01       	movw	r22, r12
    5e22:	90 e0       	ldi	r25, 0x00	; 0
    5e24:	28 d1       	rcall	.+592    	; 0x6076 <fputc>
    5e26:	21 10       	cpse	r2, r1
    5e28:	2a 94       	dec	r2
    5e2a:	21 e0       	ldi	r18, 0x01	; 1
    5e2c:	82 1a       	sub	r8, r18
    5e2e:	91 08       	sbc	r9, r1
    5e30:	81 14       	cp	r8, r1
    5e32:	91 04       	cpc	r9, r1
    5e34:	79 f7       	brne	.-34     	; 0x5e14 <vfprintf+0x1c4>
    5e36:	e1 c0       	rjmp	.+450    	; 0x5ffa <vfprintf+0x3aa>
    5e38:	84 36       	cpi	r24, 0x64	; 100
    5e3a:	11 f0       	breq	.+4      	; 0x5e40 <vfprintf+0x1f0>
    5e3c:	89 36       	cpi	r24, 0x69	; 105
    5e3e:	39 f5       	brne	.+78     	; 0x5e8e <vfprintf+0x23e>
    5e40:	f8 01       	movw	r30, r16
    5e42:	37 fe       	sbrs	r3, 7
    5e44:	07 c0       	rjmp	.+14     	; 0x5e54 <vfprintf+0x204>
    5e46:	60 81       	ld	r22, Z
    5e48:	71 81       	ldd	r23, Z+1	; 0x01
    5e4a:	82 81       	ldd	r24, Z+2	; 0x02
    5e4c:	93 81       	ldd	r25, Z+3	; 0x03
    5e4e:	0c 5f       	subi	r16, 0xFC	; 252
    5e50:	1f 4f       	sbci	r17, 0xFF	; 255
    5e52:	08 c0       	rjmp	.+16     	; 0x5e64 <vfprintf+0x214>
    5e54:	60 81       	ld	r22, Z
    5e56:	71 81       	ldd	r23, Z+1	; 0x01
    5e58:	07 2e       	mov	r0, r23
    5e5a:	00 0c       	add	r0, r0
    5e5c:	88 0b       	sbc	r24, r24
    5e5e:	99 0b       	sbc	r25, r25
    5e60:	0e 5f       	subi	r16, 0xFE	; 254
    5e62:	1f 4f       	sbci	r17, 0xFF	; 255
    5e64:	f3 2d       	mov	r31, r3
    5e66:	ff 76       	andi	r31, 0x6F	; 111
    5e68:	3f 2e       	mov	r3, r31
    5e6a:	97 ff       	sbrs	r25, 7
    5e6c:	09 c0       	rjmp	.+18     	; 0x5e80 <vfprintf+0x230>
    5e6e:	90 95       	com	r25
    5e70:	80 95       	com	r24
    5e72:	70 95       	com	r23
    5e74:	61 95       	neg	r22
    5e76:	7f 4f       	sbci	r23, 0xFF	; 255
    5e78:	8f 4f       	sbci	r24, 0xFF	; 255
    5e7a:	9f 4f       	sbci	r25, 0xFF	; 255
    5e7c:	f0 68       	ori	r31, 0x80	; 128
    5e7e:	3f 2e       	mov	r3, r31
    5e80:	2a e0       	ldi	r18, 0x0A	; 10
    5e82:	30 e0       	ldi	r19, 0x00	; 0
    5e84:	a3 01       	movw	r20, r6
    5e86:	33 d1       	rcall	.+614    	; 0x60ee <__ultoa_invert>
    5e88:	88 2e       	mov	r8, r24
    5e8a:	86 18       	sub	r8, r6
    5e8c:	44 c0       	rjmp	.+136    	; 0x5f16 <vfprintf+0x2c6>
    5e8e:	85 37       	cpi	r24, 0x75	; 117
    5e90:	31 f4       	brne	.+12     	; 0x5e9e <vfprintf+0x24e>
    5e92:	23 2d       	mov	r18, r3
    5e94:	2f 7e       	andi	r18, 0xEF	; 239
    5e96:	b2 2e       	mov	r11, r18
    5e98:	2a e0       	ldi	r18, 0x0A	; 10
    5e9a:	30 e0       	ldi	r19, 0x00	; 0
    5e9c:	25 c0       	rjmp	.+74     	; 0x5ee8 <vfprintf+0x298>
    5e9e:	93 2d       	mov	r25, r3
    5ea0:	99 7f       	andi	r25, 0xF9	; 249
    5ea2:	b9 2e       	mov	r11, r25
    5ea4:	8f 36       	cpi	r24, 0x6F	; 111
    5ea6:	c1 f0       	breq	.+48     	; 0x5ed8 <vfprintf+0x288>
    5ea8:	18 f4       	brcc	.+6      	; 0x5eb0 <vfprintf+0x260>
    5eaa:	88 35       	cpi	r24, 0x58	; 88
    5eac:	79 f0       	breq	.+30     	; 0x5ecc <vfprintf+0x27c>
    5eae:	ae c0       	rjmp	.+348    	; 0x600c <vfprintf+0x3bc>
    5eb0:	80 37       	cpi	r24, 0x70	; 112
    5eb2:	19 f0       	breq	.+6      	; 0x5eba <vfprintf+0x26a>
    5eb4:	88 37       	cpi	r24, 0x78	; 120
    5eb6:	21 f0       	breq	.+8      	; 0x5ec0 <vfprintf+0x270>
    5eb8:	a9 c0       	rjmp	.+338    	; 0x600c <vfprintf+0x3bc>
    5eba:	e9 2f       	mov	r30, r25
    5ebc:	e0 61       	ori	r30, 0x10	; 16
    5ebe:	be 2e       	mov	r11, r30
    5ec0:	b4 fe       	sbrs	r11, 4
    5ec2:	0d c0       	rjmp	.+26     	; 0x5ede <vfprintf+0x28e>
    5ec4:	fb 2d       	mov	r31, r11
    5ec6:	f4 60       	ori	r31, 0x04	; 4
    5ec8:	bf 2e       	mov	r11, r31
    5eca:	09 c0       	rjmp	.+18     	; 0x5ede <vfprintf+0x28e>
    5ecc:	34 fe       	sbrs	r3, 4
    5ece:	0a c0       	rjmp	.+20     	; 0x5ee4 <vfprintf+0x294>
    5ed0:	29 2f       	mov	r18, r25
    5ed2:	26 60       	ori	r18, 0x06	; 6
    5ed4:	b2 2e       	mov	r11, r18
    5ed6:	06 c0       	rjmp	.+12     	; 0x5ee4 <vfprintf+0x294>
    5ed8:	28 e0       	ldi	r18, 0x08	; 8
    5eda:	30 e0       	ldi	r19, 0x00	; 0
    5edc:	05 c0       	rjmp	.+10     	; 0x5ee8 <vfprintf+0x298>
    5ede:	20 e1       	ldi	r18, 0x10	; 16
    5ee0:	30 e0       	ldi	r19, 0x00	; 0
    5ee2:	02 c0       	rjmp	.+4      	; 0x5ee8 <vfprintf+0x298>
    5ee4:	20 e1       	ldi	r18, 0x10	; 16
    5ee6:	32 e0       	ldi	r19, 0x02	; 2
    5ee8:	f8 01       	movw	r30, r16
    5eea:	b7 fe       	sbrs	r11, 7
    5eec:	07 c0       	rjmp	.+14     	; 0x5efc <vfprintf+0x2ac>
    5eee:	60 81       	ld	r22, Z
    5ef0:	71 81       	ldd	r23, Z+1	; 0x01
    5ef2:	82 81       	ldd	r24, Z+2	; 0x02
    5ef4:	93 81       	ldd	r25, Z+3	; 0x03
    5ef6:	0c 5f       	subi	r16, 0xFC	; 252
    5ef8:	1f 4f       	sbci	r17, 0xFF	; 255
    5efa:	06 c0       	rjmp	.+12     	; 0x5f08 <vfprintf+0x2b8>
    5efc:	60 81       	ld	r22, Z
    5efe:	71 81       	ldd	r23, Z+1	; 0x01
    5f00:	80 e0       	ldi	r24, 0x00	; 0
    5f02:	90 e0       	ldi	r25, 0x00	; 0
    5f04:	0e 5f       	subi	r16, 0xFE	; 254
    5f06:	1f 4f       	sbci	r17, 0xFF	; 255
    5f08:	a3 01       	movw	r20, r6
    5f0a:	f1 d0       	rcall	.+482    	; 0x60ee <__ultoa_invert>
    5f0c:	88 2e       	mov	r8, r24
    5f0e:	86 18       	sub	r8, r6
    5f10:	fb 2d       	mov	r31, r11
    5f12:	ff 77       	andi	r31, 0x7F	; 127
    5f14:	3f 2e       	mov	r3, r31
    5f16:	36 fe       	sbrs	r3, 6
    5f18:	0d c0       	rjmp	.+26     	; 0x5f34 <vfprintf+0x2e4>
    5f1a:	23 2d       	mov	r18, r3
    5f1c:	2e 7f       	andi	r18, 0xFE	; 254
    5f1e:	a2 2e       	mov	r10, r18
    5f20:	89 14       	cp	r8, r9
    5f22:	58 f4       	brcc	.+22     	; 0x5f3a <vfprintf+0x2ea>
    5f24:	34 fe       	sbrs	r3, 4
    5f26:	0b c0       	rjmp	.+22     	; 0x5f3e <vfprintf+0x2ee>
    5f28:	32 fc       	sbrc	r3, 2
    5f2a:	09 c0       	rjmp	.+18     	; 0x5f3e <vfprintf+0x2ee>
    5f2c:	83 2d       	mov	r24, r3
    5f2e:	8e 7e       	andi	r24, 0xEE	; 238
    5f30:	a8 2e       	mov	r10, r24
    5f32:	05 c0       	rjmp	.+10     	; 0x5f3e <vfprintf+0x2ee>
    5f34:	b8 2c       	mov	r11, r8
    5f36:	a3 2c       	mov	r10, r3
    5f38:	03 c0       	rjmp	.+6      	; 0x5f40 <vfprintf+0x2f0>
    5f3a:	b8 2c       	mov	r11, r8
    5f3c:	01 c0       	rjmp	.+2      	; 0x5f40 <vfprintf+0x2f0>
    5f3e:	b9 2c       	mov	r11, r9
    5f40:	a4 fe       	sbrs	r10, 4
    5f42:	0f c0       	rjmp	.+30     	; 0x5f62 <vfprintf+0x312>
    5f44:	fe 01       	movw	r30, r28
    5f46:	e8 0d       	add	r30, r8
    5f48:	f1 1d       	adc	r31, r1
    5f4a:	80 81       	ld	r24, Z
    5f4c:	80 33       	cpi	r24, 0x30	; 48
    5f4e:	21 f4       	brne	.+8      	; 0x5f58 <vfprintf+0x308>
    5f50:	9a 2d       	mov	r25, r10
    5f52:	99 7e       	andi	r25, 0xE9	; 233
    5f54:	a9 2e       	mov	r10, r25
    5f56:	09 c0       	rjmp	.+18     	; 0x5f6a <vfprintf+0x31a>
    5f58:	a2 fe       	sbrs	r10, 2
    5f5a:	06 c0       	rjmp	.+12     	; 0x5f68 <vfprintf+0x318>
    5f5c:	b3 94       	inc	r11
    5f5e:	b3 94       	inc	r11
    5f60:	04 c0       	rjmp	.+8      	; 0x5f6a <vfprintf+0x31a>
    5f62:	8a 2d       	mov	r24, r10
    5f64:	86 78       	andi	r24, 0x86	; 134
    5f66:	09 f0       	breq	.+2      	; 0x5f6a <vfprintf+0x31a>
    5f68:	b3 94       	inc	r11
    5f6a:	a3 fc       	sbrc	r10, 3
    5f6c:	10 c0       	rjmp	.+32     	; 0x5f8e <vfprintf+0x33e>
    5f6e:	a0 fe       	sbrs	r10, 0
    5f70:	06 c0       	rjmp	.+12     	; 0x5f7e <vfprintf+0x32e>
    5f72:	b2 14       	cp	r11, r2
    5f74:	80 f4       	brcc	.+32     	; 0x5f96 <vfprintf+0x346>
    5f76:	28 0c       	add	r2, r8
    5f78:	92 2c       	mov	r9, r2
    5f7a:	9b 18       	sub	r9, r11
    5f7c:	0d c0       	rjmp	.+26     	; 0x5f98 <vfprintf+0x348>
    5f7e:	b2 14       	cp	r11, r2
    5f80:	58 f4       	brcc	.+22     	; 0x5f98 <vfprintf+0x348>
    5f82:	b6 01       	movw	r22, r12
    5f84:	80 e2       	ldi	r24, 0x20	; 32
    5f86:	90 e0       	ldi	r25, 0x00	; 0
    5f88:	76 d0       	rcall	.+236    	; 0x6076 <fputc>
    5f8a:	b3 94       	inc	r11
    5f8c:	f8 cf       	rjmp	.-16     	; 0x5f7e <vfprintf+0x32e>
    5f8e:	b2 14       	cp	r11, r2
    5f90:	18 f4       	brcc	.+6      	; 0x5f98 <vfprintf+0x348>
    5f92:	2b 18       	sub	r2, r11
    5f94:	02 c0       	rjmp	.+4      	; 0x5f9a <vfprintf+0x34a>
    5f96:	98 2c       	mov	r9, r8
    5f98:	21 2c       	mov	r2, r1
    5f9a:	a4 fe       	sbrs	r10, 4
    5f9c:	0f c0       	rjmp	.+30     	; 0x5fbc <vfprintf+0x36c>
    5f9e:	b6 01       	movw	r22, r12
    5fa0:	80 e3       	ldi	r24, 0x30	; 48
    5fa2:	90 e0       	ldi	r25, 0x00	; 0
    5fa4:	68 d0       	rcall	.+208    	; 0x6076 <fputc>
    5fa6:	a2 fe       	sbrs	r10, 2
    5fa8:	16 c0       	rjmp	.+44     	; 0x5fd6 <vfprintf+0x386>
    5faa:	a1 fc       	sbrc	r10, 1
    5fac:	03 c0       	rjmp	.+6      	; 0x5fb4 <vfprintf+0x364>
    5fae:	88 e7       	ldi	r24, 0x78	; 120
    5fb0:	90 e0       	ldi	r25, 0x00	; 0
    5fb2:	02 c0       	rjmp	.+4      	; 0x5fb8 <vfprintf+0x368>
    5fb4:	88 e5       	ldi	r24, 0x58	; 88
    5fb6:	90 e0       	ldi	r25, 0x00	; 0
    5fb8:	b6 01       	movw	r22, r12
    5fba:	0c c0       	rjmp	.+24     	; 0x5fd4 <vfprintf+0x384>
    5fbc:	8a 2d       	mov	r24, r10
    5fbe:	86 78       	andi	r24, 0x86	; 134
    5fc0:	51 f0       	breq	.+20     	; 0x5fd6 <vfprintf+0x386>
    5fc2:	a1 fe       	sbrs	r10, 1
    5fc4:	02 c0       	rjmp	.+4      	; 0x5fca <vfprintf+0x37a>
    5fc6:	8b e2       	ldi	r24, 0x2B	; 43
    5fc8:	01 c0       	rjmp	.+2      	; 0x5fcc <vfprintf+0x37c>
    5fca:	80 e2       	ldi	r24, 0x20	; 32
    5fcc:	a7 fc       	sbrc	r10, 7
    5fce:	8d e2       	ldi	r24, 0x2D	; 45
    5fd0:	b6 01       	movw	r22, r12
    5fd2:	90 e0       	ldi	r25, 0x00	; 0
    5fd4:	50 d0       	rcall	.+160    	; 0x6076 <fputc>
    5fd6:	89 14       	cp	r8, r9
    5fd8:	30 f4       	brcc	.+12     	; 0x5fe6 <vfprintf+0x396>
    5fda:	b6 01       	movw	r22, r12
    5fdc:	80 e3       	ldi	r24, 0x30	; 48
    5fde:	90 e0       	ldi	r25, 0x00	; 0
    5fe0:	4a d0       	rcall	.+148    	; 0x6076 <fputc>
    5fe2:	9a 94       	dec	r9
    5fe4:	f8 cf       	rjmp	.-16     	; 0x5fd6 <vfprintf+0x386>
    5fe6:	8a 94       	dec	r8
    5fe8:	f3 01       	movw	r30, r6
    5fea:	e8 0d       	add	r30, r8
    5fec:	f1 1d       	adc	r31, r1
    5fee:	80 81       	ld	r24, Z
    5ff0:	b6 01       	movw	r22, r12
    5ff2:	90 e0       	ldi	r25, 0x00	; 0
    5ff4:	40 d0       	rcall	.+128    	; 0x6076 <fputc>
    5ff6:	81 10       	cpse	r8, r1
    5ff8:	f6 cf       	rjmp	.-20     	; 0x5fe6 <vfprintf+0x396>
    5ffa:	22 20       	and	r2, r2
    5ffc:	09 f4       	brne	.+2      	; 0x6000 <vfprintf+0x3b0>
    5ffe:	4e ce       	rjmp	.-868    	; 0x5c9c <vfprintf+0x4c>
    6000:	b6 01       	movw	r22, r12
    6002:	80 e2       	ldi	r24, 0x20	; 32
    6004:	90 e0       	ldi	r25, 0x00	; 0
    6006:	37 d0       	rcall	.+110    	; 0x6076 <fputc>
    6008:	2a 94       	dec	r2
    600a:	f7 cf       	rjmp	.-18     	; 0x5ffa <vfprintf+0x3aa>
    600c:	f6 01       	movw	r30, r12
    600e:	86 81       	ldd	r24, Z+6	; 0x06
    6010:	97 81       	ldd	r25, Z+7	; 0x07
    6012:	02 c0       	rjmp	.+4      	; 0x6018 <vfprintf+0x3c8>
    6014:	8f ef       	ldi	r24, 0xFF	; 255
    6016:	9f ef       	ldi	r25, 0xFF	; 255
    6018:	2b 96       	adiw	r28, 0x0b	; 11
    601a:	0f b6       	in	r0, 0x3f	; 63
    601c:	f8 94       	cli
    601e:	de bf       	out	0x3e, r29	; 62
    6020:	0f be       	out	0x3f, r0	; 63
    6022:	cd bf       	out	0x3d, r28	; 61
    6024:	df 91       	pop	r29
    6026:	cf 91       	pop	r28
    6028:	1f 91       	pop	r17
    602a:	0f 91       	pop	r16
    602c:	ff 90       	pop	r15
    602e:	ef 90       	pop	r14
    6030:	df 90       	pop	r13
    6032:	cf 90       	pop	r12
    6034:	bf 90       	pop	r11
    6036:	af 90       	pop	r10
    6038:	9f 90       	pop	r9
    603a:	8f 90       	pop	r8
    603c:	7f 90       	pop	r7
    603e:	6f 90       	pop	r6
    6040:	5f 90       	pop	r5
    6042:	4f 90       	pop	r4
    6044:	3f 90       	pop	r3
    6046:	2f 90       	pop	r2
    6048:	08 95       	ret

0000604a <strnlen_P>:
    604a:	fc 01       	movw	r30, r24
    604c:	05 90       	lpm	r0, Z+
    604e:	61 50       	subi	r22, 0x01	; 1
    6050:	70 40       	sbci	r23, 0x00	; 0
    6052:	01 10       	cpse	r0, r1
    6054:	d8 f7       	brcc	.-10     	; 0x604c <strnlen_P+0x2>
    6056:	80 95       	com	r24
    6058:	90 95       	com	r25
    605a:	8e 0f       	add	r24, r30
    605c:	9f 1f       	adc	r25, r31
    605e:	08 95       	ret

00006060 <strnlen>:
    6060:	fc 01       	movw	r30, r24
    6062:	61 50       	subi	r22, 0x01	; 1
    6064:	70 40       	sbci	r23, 0x00	; 0
    6066:	01 90       	ld	r0, Z+
    6068:	01 10       	cpse	r0, r1
    606a:	d8 f7       	brcc	.-10     	; 0x6062 <strnlen+0x2>
    606c:	80 95       	com	r24
    606e:	90 95       	com	r25
    6070:	8e 0f       	add	r24, r30
    6072:	9f 1f       	adc	r25, r31
    6074:	08 95       	ret

00006076 <fputc>:
    6076:	0f 93       	push	r16
    6078:	1f 93       	push	r17
    607a:	cf 93       	push	r28
    607c:	df 93       	push	r29
    607e:	fb 01       	movw	r30, r22
    6080:	23 81       	ldd	r18, Z+3	; 0x03
    6082:	21 fd       	sbrc	r18, 1
    6084:	03 c0       	rjmp	.+6      	; 0x608c <fputc+0x16>
    6086:	8f ef       	ldi	r24, 0xFF	; 255
    6088:	9f ef       	ldi	r25, 0xFF	; 255
    608a:	2c c0       	rjmp	.+88     	; 0x60e4 <fputc+0x6e>
    608c:	22 ff       	sbrs	r18, 2
    608e:	16 c0       	rjmp	.+44     	; 0x60bc <fputc+0x46>
    6090:	46 81       	ldd	r20, Z+6	; 0x06
    6092:	57 81       	ldd	r21, Z+7	; 0x07
    6094:	24 81       	ldd	r18, Z+4	; 0x04
    6096:	35 81       	ldd	r19, Z+5	; 0x05
    6098:	42 17       	cp	r20, r18
    609a:	53 07       	cpc	r21, r19
    609c:	44 f4       	brge	.+16     	; 0x60ae <fputc+0x38>
    609e:	a0 81       	ld	r26, Z
    60a0:	b1 81       	ldd	r27, Z+1	; 0x01
    60a2:	9d 01       	movw	r18, r26
    60a4:	2f 5f       	subi	r18, 0xFF	; 255
    60a6:	3f 4f       	sbci	r19, 0xFF	; 255
    60a8:	31 83       	std	Z+1, r19	; 0x01
    60aa:	20 83       	st	Z, r18
    60ac:	8c 93       	st	X, r24
    60ae:	26 81       	ldd	r18, Z+6	; 0x06
    60b0:	37 81       	ldd	r19, Z+7	; 0x07
    60b2:	2f 5f       	subi	r18, 0xFF	; 255
    60b4:	3f 4f       	sbci	r19, 0xFF	; 255
    60b6:	37 83       	std	Z+7, r19	; 0x07
    60b8:	26 83       	std	Z+6, r18	; 0x06
    60ba:	14 c0       	rjmp	.+40     	; 0x60e4 <fputc+0x6e>
    60bc:	8b 01       	movw	r16, r22
    60be:	ec 01       	movw	r28, r24
    60c0:	fb 01       	movw	r30, r22
    60c2:	00 84       	ldd	r0, Z+8	; 0x08
    60c4:	f1 85       	ldd	r31, Z+9	; 0x09
    60c6:	e0 2d       	mov	r30, r0
    60c8:	19 95       	eicall
    60ca:	89 2b       	or	r24, r25
    60cc:	e1 f6       	brne	.-72     	; 0x6086 <fputc+0x10>
    60ce:	d8 01       	movw	r26, r16
    60d0:	16 96       	adiw	r26, 0x06	; 6
    60d2:	8d 91       	ld	r24, X+
    60d4:	9c 91       	ld	r25, X
    60d6:	17 97       	sbiw	r26, 0x07	; 7
    60d8:	01 96       	adiw	r24, 0x01	; 1
    60da:	17 96       	adiw	r26, 0x07	; 7
    60dc:	9c 93       	st	X, r25
    60de:	8e 93       	st	-X, r24
    60e0:	16 97       	sbiw	r26, 0x06	; 6
    60e2:	ce 01       	movw	r24, r28
    60e4:	df 91       	pop	r29
    60e6:	cf 91       	pop	r28
    60e8:	1f 91       	pop	r17
    60ea:	0f 91       	pop	r16
    60ec:	08 95       	ret

000060ee <__ultoa_invert>:
    60ee:	fa 01       	movw	r30, r20
    60f0:	aa 27       	eor	r26, r26
    60f2:	28 30       	cpi	r18, 0x08	; 8
    60f4:	51 f1       	breq	.+84     	; 0x614a <__ultoa_invert+0x5c>
    60f6:	20 31       	cpi	r18, 0x10	; 16
    60f8:	81 f1       	breq	.+96     	; 0x615a <__ultoa_invert+0x6c>
    60fa:	e8 94       	clt
    60fc:	6f 93       	push	r22
    60fe:	6e 7f       	andi	r22, 0xFE	; 254
    6100:	6e 5f       	subi	r22, 0xFE	; 254
    6102:	7f 4f       	sbci	r23, 0xFF	; 255
    6104:	8f 4f       	sbci	r24, 0xFF	; 255
    6106:	9f 4f       	sbci	r25, 0xFF	; 255
    6108:	af 4f       	sbci	r26, 0xFF	; 255
    610a:	b1 e0       	ldi	r27, 0x01	; 1
    610c:	3e d0       	rcall	.+124    	; 0x618a <__ultoa_invert+0x9c>
    610e:	b4 e0       	ldi	r27, 0x04	; 4
    6110:	3c d0       	rcall	.+120    	; 0x618a <__ultoa_invert+0x9c>
    6112:	67 0f       	add	r22, r23
    6114:	78 1f       	adc	r23, r24
    6116:	89 1f       	adc	r24, r25
    6118:	9a 1f       	adc	r25, r26
    611a:	a1 1d       	adc	r26, r1
    611c:	68 0f       	add	r22, r24
    611e:	79 1f       	adc	r23, r25
    6120:	8a 1f       	adc	r24, r26
    6122:	91 1d       	adc	r25, r1
    6124:	a1 1d       	adc	r26, r1
    6126:	6a 0f       	add	r22, r26
    6128:	71 1d       	adc	r23, r1
    612a:	81 1d       	adc	r24, r1
    612c:	91 1d       	adc	r25, r1
    612e:	a1 1d       	adc	r26, r1
    6130:	20 d0       	rcall	.+64     	; 0x6172 <__ultoa_invert+0x84>
    6132:	09 f4       	brne	.+2      	; 0x6136 <__ultoa_invert+0x48>
    6134:	68 94       	set
    6136:	3f 91       	pop	r19
    6138:	2a e0       	ldi	r18, 0x0A	; 10
    613a:	26 9f       	mul	r18, r22
    613c:	11 24       	eor	r1, r1
    613e:	30 19       	sub	r19, r0
    6140:	30 5d       	subi	r19, 0xD0	; 208
    6142:	31 93       	st	Z+, r19
    6144:	de f6       	brtc	.-74     	; 0x60fc <__ultoa_invert+0xe>
    6146:	cf 01       	movw	r24, r30
    6148:	08 95       	ret
    614a:	46 2f       	mov	r20, r22
    614c:	47 70       	andi	r20, 0x07	; 7
    614e:	40 5d       	subi	r20, 0xD0	; 208
    6150:	41 93       	st	Z+, r20
    6152:	b3 e0       	ldi	r27, 0x03	; 3
    6154:	0f d0       	rcall	.+30     	; 0x6174 <__ultoa_invert+0x86>
    6156:	c9 f7       	brne	.-14     	; 0x614a <__ultoa_invert+0x5c>
    6158:	f6 cf       	rjmp	.-20     	; 0x6146 <__ultoa_invert+0x58>
    615a:	46 2f       	mov	r20, r22
    615c:	4f 70       	andi	r20, 0x0F	; 15
    615e:	40 5d       	subi	r20, 0xD0	; 208
    6160:	4a 33       	cpi	r20, 0x3A	; 58
    6162:	18 f0       	brcs	.+6      	; 0x616a <__ultoa_invert+0x7c>
    6164:	49 5d       	subi	r20, 0xD9	; 217
    6166:	31 fd       	sbrc	r19, 1
    6168:	40 52       	subi	r20, 0x20	; 32
    616a:	41 93       	st	Z+, r20
    616c:	02 d0       	rcall	.+4      	; 0x6172 <__ultoa_invert+0x84>
    616e:	a9 f7       	brne	.-22     	; 0x615a <__ultoa_invert+0x6c>
    6170:	ea cf       	rjmp	.-44     	; 0x6146 <__ultoa_invert+0x58>
    6172:	b4 e0       	ldi	r27, 0x04	; 4
    6174:	a6 95       	lsr	r26
    6176:	97 95       	ror	r25
    6178:	87 95       	ror	r24
    617a:	77 95       	ror	r23
    617c:	67 95       	ror	r22
    617e:	ba 95       	dec	r27
    6180:	c9 f7       	brne	.-14     	; 0x6174 <__ultoa_invert+0x86>
    6182:	00 97       	sbiw	r24, 0x00	; 0
    6184:	61 05       	cpc	r22, r1
    6186:	71 05       	cpc	r23, r1
    6188:	08 95       	ret
    618a:	9b 01       	movw	r18, r22
    618c:	ac 01       	movw	r20, r24
    618e:	0a 2e       	mov	r0, r26
    6190:	06 94       	lsr	r0
    6192:	57 95       	ror	r21
    6194:	47 95       	ror	r20
    6196:	37 95       	ror	r19
    6198:	27 95       	ror	r18
    619a:	ba 95       	dec	r27
    619c:	c9 f7       	brne	.-14     	; 0x6190 <__ultoa_invert+0xa2>
    619e:	62 0f       	add	r22, r18
    61a0:	73 1f       	adc	r23, r19
    61a2:	84 1f       	adc	r24, r20
    61a4:	95 1f       	adc	r25, r21
    61a6:	a0 1d       	adc	r26, r0
    61a8:	08 95       	ret

000061aa <_exit>:
    61aa:	f8 94       	cli

000061ac <__stop_program>:
    61ac:	ff cf       	rjmp	.-2      	; 0x61ac <__stop_program>
