
SEP4IOT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000178  00800200  0000551c  000055b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000551c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000113f  00800378  00800378  00005728  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00005728  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00005784  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000c08  00000000  00000000  000057c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000ef71  00000000  00000000  000063cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003c83  00000000  00000000  0001533d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00007012  00000000  00000000  00018fc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000286c  00000000  00000000  0001ffd4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000046cc  00000000  00000000  00022840  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000d4a5  00000000  00000000  00026f0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000bd8  00000000  00000000  000343b1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	4c c2       	rjmp	.+1176   	; 0x49a <__ctors_end>
       2:	00 00       	nop
       4:	6b c2       	rjmp	.+1238   	; 0x4dc <__bad_interrupt>
       6:	00 00       	nop
       8:	69 c2       	rjmp	.+1234   	; 0x4dc <__bad_interrupt>
       a:	00 00       	nop
       c:	67 c2       	rjmp	.+1230   	; 0x4dc <__bad_interrupt>
       e:	00 00       	nop
      10:	65 c2       	rjmp	.+1226   	; 0x4dc <__bad_interrupt>
      12:	00 00       	nop
      14:	63 c2       	rjmp	.+1222   	; 0x4dc <__bad_interrupt>
      16:	00 00       	nop
      18:	61 c2       	rjmp	.+1218   	; 0x4dc <__bad_interrupt>
      1a:	00 00       	nop
      1c:	5f c2       	rjmp	.+1214   	; 0x4dc <__bad_interrupt>
      1e:	00 00       	nop
      20:	5d c2       	rjmp	.+1210   	; 0x4dc <__bad_interrupt>
      22:	00 00       	nop
      24:	5b c2       	rjmp	.+1206   	; 0x4dc <__bad_interrupt>
      26:	00 00       	nop
      28:	59 c2       	rjmp	.+1202   	; 0x4dc <__bad_interrupt>
      2a:	00 00       	nop
      2c:	57 c2       	rjmp	.+1198   	; 0x4dc <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 03 0b 	jmp	0x1606	; 0x1606 <__vector_12>
      34:	53 c2       	rjmp	.+1190   	; 0x4dc <__bad_interrupt>
      36:	00 00       	nop
      38:	51 c2       	rjmp	.+1186   	; 0x4dc <__bad_interrupt>
      3a:	00 00       	nop
      3c:	4f c2       	rjmp	.+1182   	; 0x4dc <__bad_interrupt>
      3e:	00 00       	nop
      40:	4d c2       	rjmp	.+1178   	; 0x4dc <__bad_interrupt>
      42:	00 00       	nop
      44:	4b c2       	rjmp	.+1174   	; 0x4dc <__bad_interrupt>
      46:	00 00       	nop
      48:	49 c2       	rjmp	.+1170   	; 0x4dc <__bad_interrupt>
      4a:	00 00       	nop
      4c:	47 c2       	rjmp	.+1166   	; 0x4dc <__bad_interrupt>
      4e:	00 00       	nop
      50:	45 c2       	rjmp	.+1162   	; 0x4dc <__bad_interrupt>
      52:	00 00       	nop
      54:	43 c2       	rjmp	.+1158   	; 0x4dc <__bad_interrupt>
      56:	00 00       	nop
      58:	41 c2       	rjmp	.+1154   	; 0x4dc <__bad_interrupt>
      5a:	00 00       	nop
      5c:	3f c2       	rjmp	.+1150   	; 0x4dc <__bad_interrupt>
      5e:	00 00       	nop
      60:	3d c2       	rjmp	.+1146   	; 0x4dc <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 db 1f 	jmp	0x3fb6	; 0x3fb6 <__vector_25>
      68:	0c 94 2d 20 	jmp	0x405a	; 0x405a <__vector_26>
      6c:	37 c2       	rjmp	.+1134   	; 0x4dc <__bad_interrupt>
      6e:	00 00       	nop
      70:	35 c2       	rjmp	.+1130   	; 0x4dc <__bad_interrupt>
      72:	00 00       	nop
      74:	33 c2       	rjmp	.+1126   	; 0x4dc <__bad_interrupt>
      76:	00 00       	nop
      78:	31 c2       	rjmp	.+1122   	; 0x4dc <__bad_interrupt>
      7a:	00 00       	nop
      7c:	2f c2       	rjmp	.+1118   	; 0x4dc <__bad_interrupt>
      7e:	00 00       	nop
      80:	2d c2       	rjmp	.+1114   	; 0x4dc <__bad_interrupt>
      82:	00 00       	nop
      84:	2b c2       	rjmp	.+1110   	; 0x4dc <__bad_interrupt>
      86:	00 00       	nop
      88:	29 c2       	rjmp	.+1106   	; 0x4dc <__bad_interrupt>
      8a:	00 00       	nop
      8c:	27 c2       	rjmp	.+1102   	; 0x4dc <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 71 20 	jmp	0x40e2	; 0x40e2 <__vector_36>
      94:	0c 94 c3 20 	jmp	0x4186	; 0x4186 <__vector_37>
      98:	21 c2       	rjmp	.+1090   	; 0x4dc <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 5b 23 	jmp	0x46b6	; 0x46b6 <__vector_39>
      a0:	1d c2       	rjmp	.+1082   	; 0x4dc <__bad_interrupt>
      a2:	00 00       	nop
      a4:	1b c2       	rjmp	.+1078   	; 0x4dc <__bad_interrupt>
      a6:	00 00       	nop
      a8:	19 c2       	rjmp	.+1074   	; 0x4dc <__bad_interrupt>
      aa:	00 00       	nop
      ac:	17 c2       	rjmp	.+1070   	; 0x4dc <__bad_interrupt>
      ae:	00 00       	nop
      b0:	15 c2       	rjmp	.+1066   	; 0x4dc <__bad_interrupt>
      b2:	00 00       	nop
      b4:	13 c2       	rjmp	.+1062   	; 0x4dc <__bad_interrupt>
      b6:	00 00       	nop
      b8:	11 c2       	rjmp	.+1058   	; 0x4dc <__bad_interrupt>
      ba:	00 00       	nop
      bc:	0f c2       	rjmp	.+1054   	; 0x4dc <__bad_interrupt>
      be:	00 00       	nop
      c0:	0d c2       	rjmp	.+1050   	; 0x4dc <__bad_interrupt>
      c2:	00 00       	nop
      c4:	0b c2       	rjmp	.+1046   	; 0x4dc <__bad_interrupt>
      c6:	00 00       	nop
      c8:	09 c2       	rjmp	.+1042   	; 0x4dc <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 07 21 	jmp	0x420e	; 0x420e <__vector_51>
      d0:	0c 94 59 21 	jmp	0x42b2	; 0x42b2 <__vector_52>
      d4:	03 c2       	rjmp	.+1030   	; 0x4dc <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 9d 21 	jmp	0x433a	; 0x433a <__vector_54>
      dc:	0c 94 ef 21 	jmp	0x43de	; 0x43de <__vector_55>
      e0:	fd c1       	rjmp	.+1018   	; 0x4dc <__bad_interrupt>
      e2:	00 00       	nop
      e4:	c3 01       	movw	r24, r6
      e6:	c3 01       	movw	r24, r6
      e8:	c3 01       	movw	r24, r6
      ea:	fd 01       	movw	r30, r26
      ec:	05 02       	muls	r16, r21
      ee:	1b 02       	muls	r17, r27
      f0:	c3 01       	movw	r24, r6
      f2:	c3 01       	movw	r24, r6
      f4:	fd 01       	movw	r30, r26
      f6:	05 02       	muls	r16, r21
      f8:	7d 23       	and	r23, r29
      fa:	ed 23       	and	r30, r29
      fc:	ed 23       	and	r30, r29
      fe:	ed 23       	and	r30, r29
     100:	ed 23       	and	r30, r29
     102:	ed 23       	and	r30, r29
     104:	ed 23       	and	r30, r29
     106:	ed 23       	and	r30, r29
     108:	7d 23       	and	r23, r29
     10a:	ed 23       	and	r30, r29
     10c:	ed 23       	and	r30, r29
     10e:	ed 23       	and	r30, r29
     110:	ed 23       	and	r30, r29
     112:	ed 23       	and	r30, r29
     114:	ed 23       	and	r30, r29
     116:	ed 23       	and	r30, r29
     118:	7f 23       	and	r23, r31
     11a:	ed 23       	and	r30, r29
     11c:	ed 23       	and	r30, r29
     11e:	ed 23       	and	r30, r29
     120:	ed 23       	and	r30, r29
     122:	ed 23       	and	r30, r29
     124:	ed 23       	and	r30, r29
     126:	ed 23       	and	r30, r29
     128:	ed 23       	and	r30, r29
     12a:	ed 23       	and	r30, r29
     12c:	ed 23       	and	r30, r29
     12e:	ed 23       	and	r30, r29
     130:	ed 23       	and	r30, r29
     132:	ed 23       	and	r30, r29
     134:	ed 23       	and	r30, r29
     136:	ed 23       	and	r30, r29
     138:	7f 23       	and	r23, r31
     13a:	ed 23       	and	r30, r29
     13c:	ed 23       	and	r30, r29
     13e:	ed 23       	and	r30, r29
     140:	ed 23       	and	r30, r29
     142:	ed 23       	and	r30, r29
     144:	ed 23       	and	r30, r29
     146:	ed 23       	and	r30, r29
     148:	ed 23       	and	r30, r29
     14a:	ed 23       	and	r30, r29
     14c:	ed 23       	and	r30, r29
     14e:	ed 23       	and	r30, r29
     150:	ed 23       	and	r30, r29
     152:	ed 23       	and	r30, r29
     154:	ed 23       	and	r30, r29
     156:	ed 23       	and	r30, r29
     158:	e9 23       	and	r30, r25
     15a:	ed 23       	and	r30, r29
     15c:	ed 23       	and	r30, r29
     15e:	ed 23       	and	r30, r29
     160:	ed 23       	and	r30, r29
     162:	ed 23       	and	r30, r29
     164:	ed 23       	and	r30, r29
     166:	ed 23       	and	r30, r29
     168:	b4 23       	and	r27, r20
     16a:	ed 23       	and	r30, r29
     16c:	ed 23       	and	r30, r29
     16e:	ed 23       	and	r30, r29
     170:	ed 23       	and	r30, r29
     172:	ed 23       	and	r30, r29
     174:	ed 23       	and	r30, r29
     176:	ed 23       	and	r30, r29
     178:	ed 23       	and	r30, r29
     17a:	ed 23       	and	r30, r29
     17c:	ed 23       	and	r30, r29
     17e:	ed 23       	and	r30, r29
     180:	ed 23       	and	r30, r29
     182:	ed 23       	and	r30, r29
     184:	ed 23       	and	r30, r29
     186:	ed 23       	and	r30, r29
     188:	a8 23       	and	r26, r24
     18a:	ed 23       	and	r30, r29
     18c:	ed 23       	and	r30, r29
     18e:	ed 23       	and	r30, r29
     190:	ed 23       	and	r30, r29
     192:	ed 23       	and	r30, r29
     194:	ed 23       	and	r30, r29
     196:	ed 23       	and	r30, r29
     198:	cc 23       	and	r28, r28

0000019a <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     19a:	04 e8       	ldi	r16, 0x84	; 132
     19c:	13 e1       	ldi	r17, 0x13	; 19
     19e:	0f 2e       	mov	r0, r31
     1a0:	f4 eb       	ldi	r31, 0xB4	; 180
     1a2:	ef 2e       	mov	r14, r31
     1a4:	f3 e1       	ldi	r31, 0x13	; 19
     1a6:	ff 2e       	mov	r15, r31
     1a8:	f0 2d       	mov	r31, r0
     1aa:	80 91 83 13 	lds	r24, 0x1383	; 0x801383 <uxDeletedTasksWaitingCleanUp>
     1ae:	88 23       	and	r24, r24
     1b0:	19 f1       	breq	.+70     	; 0x1f8 <prvIdleTask+0x5e>
     1b2:	0f b6       	in	r0, 0x3f	; 63
     1b4:	f8 94       	cli
     1b6:	0f 92       	push	r0
     1b8:	d8 01       	movw	r26, r16
     1ba:	17 96       	adiw	r26, 0x07	; 7
     1bc:	ed 91       	ld	r30, X+
     1be:	fc 91       	ld	r31, X
     1c0:	18 97       	sbiw	r26, 0x08	; 8
     1c2:	c0 85       	ldd	r28, Z+8	; 0x08
     1c4:	d1 85       	ldd	r29, Z+9	; 0x09
     1c6:	ce 01       	movw	r24, r28
     1c8:	02 96       	adiw	r24, 0x02	; 2
     1ca:	0e 94 69 09 	call	0x12d2	; 0x12d2 <uxListRemove>
     1ce:	80 91 77 13 	lds	r24, 0x1377	; 0x801377 <uxCurrentNumberOfTasks>
     1d2:	81 50       	subi	r24, 0x01	; 1
     1d4:	80 93 77 13 	sts	0x1377, r24	; 0x801377 <uxCurrentNumberOfTasks>
     1d8:	80 91 83 13 	lds	r24, 0x1383	; 0x801383 <uxDeletedTasksWaitingCleanUp>
     1dc:	81 50       	subi	r24, 0x01	; 1
     1de:	80 93 83 13 	sts	0x1383, r24	; 0x801383 <uxDeletedTasksWaitingCleanUp>
     1e2:	0f 90       	pop	r0
     1e4:	0f be       	out	0x3f, r0	; 63
     1e6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     1e8:	9c 8d       	ldd	r25, Y+28	; 0x1c
     1ea:	cf d7       	rcall	.+3998   	; 0x118a <vPortFree>
     1ec:	ce 01       	movw	r24, r28
     1ee:	cd d7       	rcall	.+3994   	; 0x118a <vPortFree>
     1f0:	80 91 83 13 	lds	r24, 0x1383	; 0x801383 <uxDeletedTasksWaitingCleanUp>
     1f4:	81 11       	cpse	r24, r1
     1f6:	dd cf       	rjmp	.-70     	; 0x1b2 <prvIdleTask+0x18>
     1f8:	f7 01       	movw	r30, r14
     1fa:	80 81       	ld	r24, Z
     1fc:	82 30       	cpi	r24, 0x02	; 2
     1fe:	10 f0       	brcs	.+4      	; 0x204 <prvIdleTask+0x6a>
     200:	0e 94 3e 0a 	call	0x147c	; 0x147c <vPortYield>
     204:	0e 94 28 1a 	call	0x3450	; 0x3450 <vApplicationIdleHook>
     208:	d0 cf       	rjmp	.-96     	; 0x1aa <prvIdleTask+0x10>

0000020a <prvTimerTask>:
            pxNewTimer->ucStatus = 0x00;
            prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
        }

        return pxNewTimer;
    }
     20a:	cf 93       	push	r28
     20c:	df 93       	push	r29
     20e:	cd b7       	in	r28, 0x3d	; 61
     210:	de b7       	in	r29, 0x3e	; 62
     212:	60 97       	sbiw	r28, 0x10	; 16
     214:	0f b6       	in	r0, 0x3f	; 63
     216:	f8 94       	cli
     218:	de bf       	out	0x3e, r29	; 62
     21a:	0f be       	out	0x3f, r0	; 63
     21c:	cd bf       	out	0x3d, r28	; 61
     21e:	ce 01       	movw	r24, r28
     220:	01 96       	adiw	r24, 0x01	; 1
     222:	9a 87       	std	Y+10, r25	; 0x0a
     224:	89 87       	std	Y+9, r24	; 0x09
     226:	81 2c       	mov	r8, r1
     228:	91 2c       	mov	r9, r1
     22a:	a1 2c       	mov	r10, r1
     22c:	b1 2c       	mov	r11, r1
     22e:	69 84       	ldd	r6, Y+9	; 0x09
     230:	7a 84       	ldd	r7, Y+10	; 0x0a
     232:	e0 91 ec 13 	lds	r30, 0x13EC	; 0x8013ec <pxCurrentTimerList>
     236:	f0 91 ed 13 	lds	r31, 0x13ED	; 0x8013ed <pxCurrentTimerList+0x1>
     23a:	80 81       	ld	r24, Z
     23c:	88 23       	and	r24, r24
     23e:	09 f4       	brne	.+2      	; 0x242 <prvTimerTask+0x38>
     240:	12 c1       	rjmp	.+548    	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
     242:	07 80       	ldd	r0, Z+7	; 0x07
     244:	f0 85       	ldd	r31, Z+8	; 0x08
     246:	e0 2d       	mov	r30, r0
     248:	20 80       	ld	r2, Z
     24a:	31 80       	ldd	r3, Z+1	; 0x01
     24c:	42 80       	ldd	r4, Z+2	; 0x02
     24e:	53 80       	ldd	r5, Z+3	; 0x03
     250:	0e 94 6d 12 	call	0x24da	; 0x24da <vTaskSuspendAll>
     254:	ce 01       	movw	r24, r28
     256:	01 96       	adiw	r24, 0x01	; 1
     258:	0e 94 92 19 	call	0x3324	; 0x3324 <prvSampleTimeNow>
     25c:	6b 87       	std	Y+11, r22	; 0x0b
     25e:	7c 87       	std	Y+12, r23	; 0x0c
     260:	8d 87       	std	Y+13, r24	; 0x0d
     262:	9e 87       	std	Y+14, r25	; 0x0e
     264:	89 81       	ldd	r24, Y+1	; 0x01
     266:	81 11       	cpse	r24, r1
     268:	67 c0       	rjmp	.+206    	; 0x338 <prvTimerTask+0x12e>
     26a:	8b 85       	ldd	r24, Y+11	; 0x0b
     26c:	9c 85       	ldd	r25, Y+12	; 0x0c
     26e:	ad 85       	ldd	r26, Y+13	; 0x0d
     270:	be 85       	ldd	r27, Y+14	; 0x0e
     272:	82 15       	cp	r24, r2
     274:	93 05       	cpc	r25, r3
     276:	a4 05       	cpc	r26, r4
     278:	b5 05       	cpc	r27, r5
     27a:	08 f4       	brcc	.+2      	; 0x27e <prvTimerTask+0x74>
     27c:	45 c0       	rjmp	.+138    	; 0x308 <prvTimerTask+0xfe>
     27e:	0e 94 56 13 	call	0x26ac	; 0x26ac <xTaskResumeAll>
     282:	e0 91 ec 13 	lds	r30, 0x13EC	; 0x8013ec <pxCurrentTimerList>
     286:	f0 91 ed 13 	lds	r31, 0x13ED	; 0x8013ed <pxCurrentTimerList+0x1>
     28a:	07 80       	ldd	r0, Z+7	; 0x07
     28c:	f0 85       	ldd	r31, Z+8	; 0x08
     28e:	e0 2d       	mov	r30, r0
     290:	a0 85       	ldd	r26, Z+8	; 0x08
     292:	b1 85       	ldd	r27, Z+9	; 0x09
     294:	b8 8b       	std	Y+16, r27	; 0x10
     296:	af 87       	std	Y+15, r26	; 0x0f
     298:	cd 01       	movw	r24, r26
     29a:	02 96       	adiw	r24, 0x02	; 2
     29c:	0e 94 69 09 	call	0x12d2	; 0x12d2 <uxListRemove>
     2a0:	ef 85       	ldd	r30, Y+15	; 0x0f
     2a2:	f8 89       	ldd	r31, Y+16	; 0x10
     2a4:	87 89       	ldd	r24, Z+23	; 0x17
     2a6:	82 ff       	sbrs	r24, 2
     2a8:	21 c0       	rjmp	.+66     	; 0x2ec <prvTimerTask+0xe2>
     2aa:	46 85       	ldd	r20, Z+14	; 0x0e
     2ac:	57 85       	ldd	r21, Z+15	; 0x0f
     2ae:	60 89       	ldd	r22, Z+16	; 0x10
     2b0:	71 89       	ldd	r23, Z+17	; 0x11
     2b2:	42 0d       	add	r20, r2
     2b4:	53 1d       	adc	r21, r3
     2b6:	64 1d       	adc	r22, r4
     2b8:	75 1d       	adc	r23, r5
     2ba:	72 01       	movw	r14, r4
     2bc:	61 01       	movw	r12, r2
     2be:	0b 85       	ldd	r16, Y+11	; 0x0b
     2c0:	1c 85       	ldd	r17, Y+12	; 0x0c
     2c2:	2d 85       	ldd	r18, Y+13	; 0x0d
     2c4:	3e 85       	ldd	r19, Y+14	; 0x0e
     2c6:	cf 01       	movw	r24, r30
     2c8:	0e 94 a1 18 	call	0x3142	; 0x3142 <prvInsertTimerInActiveList>
     2cc:	88 23       	and	r24, r24
     2ce:	99 f0       	breq	.+38     	; 0x2f6 <prvTimerTask+0xec>
     2d0:	c8 2c       	mov	r12, r8
     2d2:	d9 2c       	mov	r13, r9
     2d4:	ea 2c       	mov	r14, r10
     2d6:	fb 2c       	mov	r15, r11
     2d8:	00 e0       	ldi	r16, 0x00	; 0
     2da:	10 e0       	ldi	r17, 0x00	; 0
     2dc:	a2 01       	movw	r20, r4
     2de:	91 01       	movw	r18, r2
     2e0:	60 e0       	ldi	r22, 0x00	; 0
     2e2:	8f 85       	ldd	r24, Y+15	; 0x0f
     2e4:	98 89       	ldd	r25, Y+16	; 0x10
     2e6:	0e 94 34 19 	call	0x3268	; 0x3268 <xTimerGenericCommand>
     2ea:	05 c0       	rjmp	.+10     	; 0x2f6 <prvTimerTask+0xec>
     2ec:	8e 7f       	andi	r24, 0xFE	; 254
     2ee:	af 85       	ldd	r26, Y+15	; 0x0f
     2f0:	b8 89       	ldd	r27, Y+16	; 0x10
     2f2:	57 96       	adiw	r26, 0x17	; 23
     2f4:	8c 93       	st	X, r24
     2f6:	af 85       	ldd	r26, Y+15	; 0x0f
     2f8:	b8 89       	ldd	r27, Y+16	; 0x10
     2fa:	54 96       	adiw	r26, 0x14	; 20
     2fc:	ed 91       	ld	r30, X+
     2fe:	fc 91       	ld	r31, X
     300:	55 97       	sbiw	r26, 0x15	; 21
     302:	cd 01       	movw	r24, r26
     304:	19 95       	eicall
     306:	a0 c0       	rjmp	.+320    	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
     308:	20 e0       	ldi	r18, 0x00	; 0
     30a:	b2 01       	movw	r22, r4
     30c:	a1 01       	movw	r20, r2
     30e:	8b 85       	ldd	r24, Y+11	; 0x0b
     310:	9c 85       	ldd	r25, Y+12	; 0x0c
     312:	ad 85       	ldd	r26, Y+13	; 0x0d
     314:	be 85       	ldd	r27, Y+14	; 0x0e
     316:	48 1b       	sub	r20, r24
     318:	59 0b       	sbc	r21, r25
     31a:	6a 0b       	sbc	r22, r26
     31c:	7b 0b       	sbc	r23, r27
     31e:	80 91 e8 13 	lds	r24, 0x13E8	; 0x8013e8 <xTimerQueue>
     322:	90 91 e9 13 	lds	r25, 0x13E9	; 0x8013e9 <xTimerQueue+0x1>
     326:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <vQueueWaitForMessageRestricted>
     32a:	0e 94 56 13 	call	0x26ac	; 0x26ac <xTaskResumeAll>
     32e:	81 11       	cpse	r24, r1
     330:	8b c0       	rjmp	.+278    	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
     332:	0e 94 3e 0a 	call	0x147c	; 0x147c <vPortYield>
     336:	88 c0       	rjmp	.+272    	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
     338:	0e 94 56 13 	call	0x26ac	; 0x26ac <xTaskResumeAll>
     33c:	85 c0       	rjmp	.+266    	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
     33e:	89 81       	ldd	r24, Y+1	; 0x01
     340:	88 23       	and	r24, r24
     342:	0c f4       	brge	.+2      	; 0x346 <prvTimerTask+0x13c>
     344:	81 c0       	rjmp	.+258    	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
     346:	4e 80       	ldd	r4, Y+6	; 0x06
     348:	5f 80       	ldd	r5, Y+7	; 0x07
     34a:	d2 01       	movw	r26, r4
     34c:	1c 96       	adiw	r26, 0x0c	; 12
     34e:	8d 91       	ld	r24, X+
     350:	9c 91       	ld	r25, X
     352:	1d 97       	sbiw	r26, 0x0d	; 13
     354:	89 2b       	or	r24, r25
     356:	19 f0       	breq	.+6      	; 0x35e <prvTimerTask+0x154>
     358:	c2 01       	movw	r24, r4
     35a:	02 96       	adiw	r24, 0x02	; 2
     35c:	ba d7       	rcall	.+3956   	; 0x12d2 <uxListRemove>
     35e:	ce 01       	movw	r24, r28
     360:	08 96       	adiw	r24, 0x08	; 8
     362:	0e 94 92 19 	call	0x3324	; 0x3324 <prvSampleTimeNow>
     366:	8b 01       	movw	r16, r22
     368:	9c 01       	movw	r18, r24
     36a:	e9 81       	ldd	r30, Y+1	; 0x01
     36c:	0e 2e       	mov	r0, r30
     36e:	00 0c       	add	r0, r0
     370:	ff 0b       	sbc	r31, r31
     372:	ea 30       	cpi	r30, 0x0A	; 10
     374:	f1 05       	cpc	r31, r1
     376:	08 f0       	brcs	.+2      	; 0x37a <prvTimerTask+0x170>
     378:	67 c0       	rjmp	.+206    	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
     37a:	88 27       	eor	r24, r24
     37c:	ee 58       	subi	r30, 0x8E	; 142
     37e:	ff 4f       	sbci	r31, 0xFF	; 255
     380:	8f 4f       	sbci	r24, 0xFF	; 255
     382:	0c 94 45 26 	jmp	0x4c8a	; 0x4c8a <__tablejump2__>
     386:	f2 01       	movw	r30, r4
     388:	87 89       	ldd	r24, Z+23	; 0x17
     38a:	81 60       	ori	r24, 0x01	; 1
     38c:	87 8b       	std	Z+23, r24	; 0x17
     38e:	ca 80       	ldd	r12, Y+2	; 0x02
     390:	db 80       	ldd	r13, Y+3	; 0x03
     392:	ec 80       	ldd	r14, Y+4	; 0x04
     394:	fd 80       	ldd	r15, Y+5	; 0x05
     396:	46 85       	ldd	r20, Z+14	; 0x0e
     398:	57 85       	ldd	r21, Z+15	; 0x0f
     39a:	60 89       	ldd	r22, Z+16	; 0x10
     39c:	71 89       	ldd	r23, Z+17	; 0x11
     39e:	4c 0d       	add	r20, r12
     3a0:	5d 1d       	adc	r21, r13
     3a2:	6e 1d       	adc	r22, r14
     3a4:	7f 1d       	adc	r23, r15
     3a6:	c2 01       	movw	r24, r4
     3a8:	0e 94 a1 18 	call	0x3142	; 0x3142 <prvInsertTimerInActiveList>
     3ac:	88 23       	and	r24, r24
     3ae:	09 f4       	brne	.+2      	; 0x3b2 <prvTimerTask+0x1a8>
     3b0:	4b c0       	rjmp	.+150    	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
     3b2:	d2 01       	movw	r26, r4
     3b4:	54 96       	adiw	r26, 0x14	; 20
     3b6:	ed 91       	ld	r30, X+
     3b8:	fc 91       	ld	r31, X
     3ba:	55 97       	sbiw	r26, 0x15	; 21
     3bc:	c2 01       	movw	r24, r4
     3be:	19 95       	eicall
     3c0:	f2 01       	movw	r30, r4
     3c2:	87 89       	ldd	r24, Z+23	; 0x17
     3c4:	82 ff       	sbrs	r24, 2
     3c6:	40 c0       	rjmp	.+128    	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
     3c8:	4a 81       	ldd	r20, Y+2	; 0x02
     3ca:	5b 81       	ldd	r21, Y+3	; 0x03
     3cc:	6c 81       	ldd	r22, Y+4	; 0x04
     3ce:	7d 81       	ldd	r23, Y+5	; 0x05
     3d0:	86 85       	ldd	r24, Z+14	; 0x0e
     3d2:	97 85       	ldd	r25, Z+15	; 0x0f
     3d4:	a0 89       	ldd	r26, Z+16	; 0x10
     3d6:	b1 89       	ldd	r27, Z+17	; 0x11
     3d8:	9a 01       	movw	r18, r20
     3da:	ab 01       	movw	r20, r22
     3dc:	28 0f       	add	r18, r24
     3de:	39 1f       	adc	r19, r25
     3e0:	4a 1f       	adc	r20, r26
     3e2:	5b 1f       	adc	r21, r27
     3e4:	c8 2c       	mov	r12, r8
     3e6:	d9 2c       	mov	r13, r9
     3e8:	ea 2c       	mov	r14, r10
     3ea:	fb 2c       	mov	r15, r11
     3ec:	00 e0       	ldi	r16, 0x00	; 0
     3ee:	10 e0       	ldi	r17, 0x00	; 0
     3f0:	60 e0       	ldi	r22, 0x00	; 0
     3f2:	c2 01       	movw	r24, r4
     3f4:	0e 94 34 19 	call	0x3268	; 0x3268 <xTimerGenericCommand>
     3f8:	27 c0       	rjmp	.+78     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
     3fa:	d2 01       	movw	r26, r4
     3fc:	57 96       	adiw	r26, 0x17	; 23
     3fe:	8c 91       	ld	r24, X
     400:	57 97       	sbiw	r26, 0x17	; 23
     402:	8e 7f       	andi	r24, 0xFE	; 254
     404:	57 96       	adiw	r26, 0x17	; 23
     406:	8c 93       	st	X, r24
     408:	1f c0       	rjmp	.+62     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
     40a:	f2 01       	movw	r30, r4
     40c:	87 89       	ldd	r24, Z+23	; 0x17
     40e:	81 60       	ori	r24, 0x01	; 1
     410:	87 8b       	std	Z+23, r24	; 0x17
     412:	4a 81       	ldd	r20, Y+2	; 0x02
     414:	5b 81       	ldd	r21, Y+3	; 0x03
     416:	6c 81       	ldd	r22, Y+4	; 0x04
     418:	7d 81       	ldd	r23, Y+5	; 0x05
     41a:	46 87       	std	Z+14, r20	; 0x0e
     41c:	57 87       	std	Z+15, r21	; 0x0f
     41e:	60 8b       	std	Z+16, r22	; 0x10
     420:	71 8b       	std	Z+17, r23	; 0x11
     422:	40 0f       	add	r20, r16
     424:	51 1f       	adc	r21, r17
     426:	62 1f       	adc	r22, r18
     428:	73 1f       	adc	r23, r19
     42a:	68 01       	movw	r12, r16
     42c:	79 01       	movw	r14, r18
     42e:	c2 01       	movw	r24, r4
     430:	0e 94 a1 18 	call	0x3142	; 0x3142 <prvInsertTimerInActiveList>
     434:	09 c0       	rjmp	.+18     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
     436:	f2 01       	movw	r30, r4
     438:	87 89       	ldd	r24, Z+23	; 0x17
     43a:	81 fd       	sbrc	r24, 1
     43c:	03 c0       	rjmp	.+6      	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
     43e:	c2 01       	movw	r24, r4
     440:	a4 d6       	rcall	.+3400   	; 0x118a <vPortFree>
     442:	02 c0       	rjmp	.+4      	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
     444:	8e 7f       	andi	r24, 0xFE	; 254
     446:	87 8b       	std	Z+23, r24	; 0x17
     448:	28 2d       	mov	r18, r8
     44a:	39 2d       	mov	r19, r9
     44c:	4a 2d       	mov	r20, r10
     44e:	5b 2d       	mov	r21, r11
     450:	66 2d       	mov	r22, r6
     452:	77 2d       	mov	r23, r7
     454:	80 91 e8 13 	lds	r24, 0x13E8	; 0x8013e8 <xTimerQueue>
     458:	90 91 e9 13 	lds	r25, 0x13E9	; 0x8013e9 <xTimerQueue+0x1>
     45c:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <xQueueReceive>
     460:	81 11       	cpse	r24, r1
     462:	6d cf       	rjmp	.-294    	; 0x33e <prvTimerTask+0x134>
     464:	e6 ce       	rjmp	.-564    	; 0x232 <prvTimerTask+0x28>
     466:	0e 94 6d 12 	call	0x24da	; 0x24da <vTaskSuspendAll>
     46a:	ce 01       	movw	r24, r28
     46c:	01 96       	adiw	r24, 0x01	; 1
     46e:	0e 94 92 19 	call	0x3324	; 0x3324 <prvSampleTimeNow>
     472:	6b 87       	std	Y+11, r22	; 0x0b
     474:	7c 87       	std	Y+12, r23	; 0x0c
     476:	8d 87       	std	Y+13, r24	; 0x0d
     478:	9e 87       	std	Y+14, r25	; 0x0e
     47a:	89 81       	ldd	r24, Y+1	; 0x01
     47c:	81 11       	cpse	r24, r1
     47e:	5c cf       	rjmp	.-328    	; 0x338 <prvTimerTask+0x12e>
     480:	e0 91 ea 13 	lds	r30, 0x13EA	; 0x8013ea <pxOverflowTimerList>
     484:	f0 91 eb 13 	lds	r31, 0x13EB	; 0x8013eb <pxOverflowTimerList+0x1>
     488:	80 81       	ld	r24, Z
     48a:	21 e0       	ldi	r18, 0x01	; 1
     48c:	81 11       	cpse	r24, r1
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	28 2c       	mov	r2, r8
     492:	39 2c       	mov	r3, r9
     494:	4a 2c       	mov	r4, r10
     496:	5b 2c       	mov	r5, r11
     498:	38 cf       	rjmp	.-400    	; 0x30a <prvTimerTask+0x100>

0000049a <__ctors_end>:
     49a:	11 24       	eor	r1, r1
     49c:	1f be       	out	0x3f, r1	; 63
     49e:	cf ef       	ldi	r28, 0xFF	; 255
     4a0:	d1 e2       	ldi	r29, 0x21	; 33
     4a2:	de bf       	out	0x3e, r29	; 62
     4a4:	cd bf       	out	0x3d, r28	; 61
     4a6:	00 e0       	ldi	r16, 0x00	; 0
     4a8:	0c bf       	out	0x3c, r16	; 60

000004aa <__do_copy_data>:
     4aa:	13 e0       	ldi	r17, 0x03	; 3
     4ac:	a0 e0       	ldi	r26, 0x00	; 0
     4ae:	b2 e0       	ldi	r27, 0x02	; 2
     4b0:	ec e1       	ldi	r30, 0x1C	; 28
     4b2:	f5 e5       	ldi	r31, 0x55	; 85
     4b4:	00 e0       	ldi	r16, 0x00	; 0
     4b6:	0b bf       	out	0x3b, r16	; 59
     4b8:	02 c0       	rjmp	.+4      	; 0x4be <__do_copy_data+0x14>
     4ba:	07 90       	elpm	r0, Z+
     4bc:	0d 92       	st	X+, r0
     4be:	a8 37       	cpi	r26, 0x78	; 120
     4c0:	b1 07       	cpc	r27, r17
     4c2:	d9 f7       	brne	.-10     	; 0x4ba <__do_copy_data+0x10>

000004c4 <__do_clear_bss>:
     4c4:	24 e1       	ldi	r18, 0x14	; 20
     4c6:	a8 e7       	ldi	r26, 0x78	; 120
     4c8:	b3 e0       	ldi	r27, 0x03	; 3
     4ca:	01 c0       	rjmp	.+2      	; 0x4ce <.do_clear_bss_start>

000004cc <.do_clear_bss_loop>:
     4cc:	1d 92       	st	X+, r1

000004ce <.do_clear_bss_start>:
     4ce:	a7 3b       	cpi	r26, 0xB7	; 183
     4d0:	b2 07       	cpc	r27, r18
     4d2:	e1 f7       	brne	.-8      	; 0x4cc <.do_clear_bss_loop>
     4d4:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <main>
     4d8:	0c 94 8c 2a 	jmp	0x5518	; 0x5518 <_exit>

000004dc <__bad_interrupt>:
     4dc:	91 cd       	rjmp	.-1246   	; 0x0 <__vectors>

000004de <co2Reader_create>:
}



//	RETURN TO DESTROY METHODS
void co2Reader_destroy(co2reader_t self) {
     4de:	2f 92       	push	r2
     4e0:	3f 92       	push	r3
     4e2:	4f 92       	push	r4
     4e4:	5f 92       	push	r5
     4e6:	6f 92       	push	r6
     4e8:	7f 92       	push	r7
     4ea:	8f 92       	push	r8
     4ec:	9f 92       	push	r9
     4ee:	af 92       	push	r10
     4f0:	bf 92       	push	r11
     4f2:	cf 92       	push	r12
     4f4:	df 92       	push	r13
     4f6:	ef 92       	push	r14
     4f8:	ff 92       	push	r15
     4fa:	0f 93       	push	r16
     4fc:	1f 93       	push	r17
     4fe:	cf 93       	push	r28
     500:	df 93       	push	r29
     502:	88 2e       	mov	r8, r24
     504:	96 2e       	mov	r9, r22
     506:	1a 01       	movw	r2, r20
     508:	28 01       	movw	r4, r16
     50a:	39 01       	movw	r6, r18
     50c:	87 01       	movw	r16, r14
     50e:	84 e0       	ldi	r24, 0x04	; 4
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	82 d5       	rcall	.+2820   	; 0x1018 <pvPortMalloc>
     514:	ec 01       	movw	r28, r24
     516:	00 97       	sbiw	r24, 0x00	; 0
     518:	79 f1       	breq	.+94     	; 0x578 <co2Reader_create+0x9a>
     51a:	fc 01       	movw	r30, r24
     51c:	11 92       	st	Z+, r1
     51e:	11 92       	st	Z+, r1
     520:	7f 01       	movw	r14, r30
     522:	30 92 85 03 	sts	0x0385, r3	; 0x800385 <_startMeasureEventGroup+0x1>
     526:	20 92 84 03 	sts	0x0384, r2	; 0x800384 <_startMeasureEventGroup>
     52a:	40 92 80 03 	sts	0x0380, r4	; 0x800380 <_startMeasureBit>
     52e:	50 92 81 03 	sts	0x0381, r5	; 0x800381 <_startMeasureBit+0x1>
     532:	60 92 82 03 	sts	0x0382, r6	; 0x800382 <_startMeasureBit+0x2>
     536:	70 92 83 03 	sts	0x0383, r7	; 0x800383 <_startMeasureBit+0x3>
     53a:	10 93 7f 03 	sts	0x037F, r17	; 0x80037f <_readyEventGroup+0x1>
     53e:	00 93 7e 03 	sts	0x037E, r16	; 0x80037e <_readyEventGroup>
     542:	a0 92 7a 03 	sts	0x037A, r10	; 0x80037a <_readyBit>
     546:	b0 92 7b 03 	sts	0x037B, r11	; 0x80037b <_readyBit+0x1>
     54a:	c0 92 7c 03 	sts	0x037C, r12	; 0x80037c <_readyBit+0x2>
     54e:	d0 92 7d 03 	sts	0x037D, r13	; 0x80037d <_readyBit+0x3>
     552:	60 e0       	ldi	r22, 0x00	; 0
     554:	70 e0       	ldi	r23, 0x00	; 0
     556:	83 e0       	ldi	r24, 0x03	; 3
     558:	0e 94 23 1e 	call	0x3c46	; 0x3c46 <mh_z19_create>
     55c:	49 2d       	mov	r20, r9
     55e:	50 e0       	ldi	r21, 0x00	; 0
     560:	08 2d       	mov	r16, r8
     562:	9e 01       	movw	r18, r28
     564:	62 e6       	ldi	r22, 0x62	; 98
     566:	72 e0       	ldi	r23, 0x02	; 2
     568:	87 e2       	ldi	r24, 0x27	; 39
     56a:	93 e0       	ldi	r25, 0x03	; 3
     56c:	0e 94 13 11 	call	0x2226	; 0x2226 <xTaskCreate>
     570:	8c e6       	ldi	r24, 0x6C	; 108
     572:	92 e0       	ldi	r25, 0x02	; 2
     574:	0e 94 af 27 	call	0x4f5e	; 0x4f5e <puts>
     578:	ce 01       	movw	r24, r28
     57a:	df 91       	pop	r29
     57c:	cf 91       	pop	r28
     57e:	1f 91       	pop	r17
     580:	0f 91       	pop	r16
     582:	ff 90       	pop	r15
     584:	ef 90       	pop	r14
     586:	df 90       	pop	r13
     588:	cf 90       	pop	r12
     58a:	bf 90       	pop	r11
     58c:	af 90       	pop	r10
     58e:	9f 90       	pop	r9
     590:	8f 90       	pop	r8
     592:	7f 90       	pop	r7
     594:	6f 90       	pop	r6
     596:	5f 90       	pop	r5
     598:	4f 90       	pop	r4
     59a:	3f 90       	pop	r3
     59c:	2f 90       	pop	r2
     59e:	08 95       	ret

000005a0 <co2Reader_measure>:
}

//actual task, methods devided so that it is possible to test


void co2Reader_measure(co2reader_t self) {
     5a0:	cf 92       	push	r12
     5a2:	df 92       	push	r13
     5a4:	ef 92       	push	r14
     5a6:	ff 92       	push	r15
     5a8:	0f 93       	push	r16
     5aa:	1f 93       	push	r17
     5ac:	cf 93       	push	r28
     5ae:	df 93       	push	r29
     5b0:	ec 01       	movw	r28, r24
	
	EventBits_t uxBits = xEventGroupWaitBits(_startMeasureEventGroup, //eventGroup
     5b2:	40 91 80 03 	lds	r20, 0x0380	; 0x800380 <_startMeasureBit>
     5b6:	50 91 81 03 	lds	r21, 0x0381	; 0x800381 <_startMeasureBit+0x1>
     5ba:	60 91 82 03 	lds	r22, 0x0382	; 0x800382 <_startMeasureBit+0x2>
     5be:	70 91 83 03 	lds	r23, 0x0383	; 0x800383 <_startMeasureBit+0x3>
     5c2:	cc 24       	eor	r12, r12
     5c4:	ca 94       	dec	r12
     5c6:	dc 2c       	mov	r13, r12
     5c8:	76 01       	movw	r14, r12
     5ca:	01 e0       	ldi	r16, 0x01	; 1
     5cc:	21 e0       	ldi	r18, 0x01	; 1
     5ce:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <_startMeasureEventGroup>
     5d2:	90 91 85 03 	lds	r25, 0x0385	; 0x800385 <_startMeasureEventGroup+0x1>
     5d6:	7a d3       	rcall	.+1780   	; 0xccc <xEventGroupWaitBits>
	_startMeasureBit, //bits it is interested in
	pdTRUE, //clears the bits
	pdTRUE, //waits for both bits to be set
	portMAX_DELAY); //wait

	if ((uxBits & (_startMeasureBit)) == (_startMeasureBit)) {
     5d8:	00 91 80 03 	lds	r16, 0x0380	; 0x800380 <_startMeasureBit>
     5dc:	10 91 81 03 	lds	r17, 0x0381	; 0x800381 <_startMeasureBit+0x1>
     5e0:	20 91 82 03 	lds	r18, 0x0382	; 0x800382 <_startMeasureBit+0x2>
     5e4:	30 91 83 03 	lds	r19, 0x0383	; 0x800383 <_startMeasureBit+0x3>
     5e8:	dc 01       	movw	r26, r24
     5ea:	cb 01       	movw	r24, r22
     5ec:	80 23       	and	r24, r16
     5ee:	91 23       	and	r25, r17
     5f0:	a2 23       	and	r26, r18
     5f2:	b3 23       	and	r27, r19
     5f4:	08 17       	cp	r16, r24
     5f6:	19 07       	cpc	r17, r25
     5f8:	2a 07       	cpc	r18, r26
     5fa:	3b 07       	cpc	r19, r27
     5fc:	f9 f4       	brne	.+62     	; 0x63c <co2Reader_measure+0x9c>

		mh_z19_take_meassuring();
     5fe:	0e 94 51 1e 	call	0x3ca2	; 0x3ca2 <mh_z19_take_meassuring>
		//{
			//printf("There was no co2 measured\n");
		//}
		//my_co2_call_back(a);
		
		self->value = ppmValue;
     602:	80 91 78 03 	lds	r24, 0x0378	; 0x800378 <__data_end>
     606:	90 91 79 03 	lds	r25, 0x0379	; 0x800379 <__data_end+0x1>
     60a:	99 83       	std	Y+1, r25	; 0x01
     60c:	88 83       	st	Y, r24
		//vPortFree(a);

		printf("co2 done bit set\n");
     60e:	83 e7       	ldi	r24, 0x73	; 115
     610:	92 e0       	ldi	r25, 0x02	; 2
     612:	0e 94 af 27 	call	0x4f5e	; 0x4f5e <puts>
		
		vTaskDelay(5000);
     616:	68 e8       	ldi	r22, 0x88	; 136
     618:	73 e1       	ldi	r23, 0x13	; 19
     61a:	80 e0       	ldi	r24, 0x00	; 0
     61c:	90 e0       	ldi	r25, 0x00	; 0
     61e:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <vTaskDelay>
		//set done bit so that device knows measurement is done
		xEventGroupSetBits(_readyEventGroup, _readyBit);
     622:	40 91 7a 03 	lds	r20, 0x037A	; 0x80037a <_readyBit>
     626:	50 91 7b 03 	lds	r21, 0x037B	; 0x80037b <_readyBit+0x1>
     62a:	60 91 7c 03 	lds	r22, 0x037C	; 0x80037c <_readyBit+0x2>
     62e:	70 91 7d 03 	lds	r23, 0x037D	; 0x80037d <_readyBit+0x3>
     632:	80 91 7e 03 	lds	r24, 0x037E	; 0x80037e <_readyEventGroup>
     636:	90 91 7f 03 	lds	r25, 0x037F	; 0x80037f <_readyEventGroup+0x1>
     63a:	08 d4       	rcall	.+2064   	; 0xe4c <xEventGroupSetBits>
	}
}
     63c:	df 91       	pop	r29
     63e:	cf 91       	pop	r28
     640:	1f 91       	pop	r17
     642:	0f 91       	pop	r16
     644:	ff 90       	pop	r15
     646:	ef 90       	pop	r14
     648:	df 90       	pop	r13
     64a:	cf 90       	pop	r12
     64c:	08 95       	ret

0000064e <co2Reader_executeTask>:
{	
	ppmValue = ppm;
	printf("CO2 in callback: %d", ppm);
}

void co2Reader_executeTask(void* self) {
     64e:	ec 01       	movw	r28, r24
	
	//mh_z19_create(ser_USART3, my_co2_call_back);
	for (;;) {
		co2Reader_measure((co2reader_t)self);
     650:	ce 01       	movw	r24, r28
     652:	a6 df       	rcall	.-180    	; 0x5a0 <co2Reader_measure>
		vTaskDelay(5000);
     654:	68 e8       	ldi	r22, 0x88	; 136
     656:	73 e1       	ldi	r23, 0x13	; 19
     658:	80 e0       	ldi	r24, 0x00	; 0
     65a:	90 e0       	ldi	r25, 0x00	; 0
     65c:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <vTaskDelay>
     660:	f7 cf       	rjmp	.-18     	; 0x650 <co2Reader_executeTask+0x2>

00000662 <co2Reader_getCO2>:
	}
}

uint16_t co2Reader_getCO2(co2reader_t self) {
	return self->value;
}
     662:	fc 01       	movw	r30, r24
     664:	80 81       	ld	r24, Z
     666:	91 81       	ldd	r25, Z+1	; 0x01
     668:	08 95       	ret

0000066a <configuration_create>:
		xSemaphoreTake(_semaphore, portMAX_DELAY);
		_ventilation = value;
		xSemaphoreGive(_semaphore);
	}
	else _ventilation = value;
}
     66a:	81 e0       	ldi	r24, 0x01	; 1
     66c:	80 93 89 03 	sts	0x0389, r24	; 0x800389 <_working>
     670:	10 92 88 03 	sts	0x0388, r1	; 0x800388 <_ventilation>
     674:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <xQueueCreateMutex>
     678:	90 93 87 03 	sts	0x0387, r25	; 0x800387 <_semaphore+0x1>
     67c:	80 93 86 03 	sts	0x0386, r24	; 0x800386 <_semaphore>
     680:	08 95       	ret

00000682 <configuration_getWorking>:
     682:	0f 93       	push	r16
     684:	cf 93       	push	r28
     686:	df 93       	push	r29
     688:	20 91 86 03 	lds	r18, 0x0386	; 0x800386 <_semaphore>
     68c:	30 91 87 03 	lds	r19, 0x0387	; 0x800387 <_semaphore+0x1>
     690:	21 15       	cp	r18, r1
     692:	31 05       	cpc	r19, r1
     694:	b9 f0       	breq	.+46     	; 0x6c4 <configuration_getWorking+0x42>
     696:	ec 01       	movw	r28, r24
     698:	4f ef       	ldi	r20, 0xFF	; 255
     69a:	5f ef       	ldi	r21, 0xFF	; 255
     69c:	ba 01       	movw	r22, r20
     69e:	c9 01       	movw	r24, r18
     6a0:	0e 94 ce 0d 	call	0x1b9c	; 0x1b9c <xQueueSemaphoreTake>
     6a4:	80 91 89 03 	lds	r24, 0x0389	; 0x800389 <_working>
     6a8:	88 83       	st	Y, r24
     6aa:	00 e0       	ldi	r16, 0x00	; 0
     6ac:	20 e0       	ldi	r18, 0x00	; 0
     6ae:	30 e0       	ldi	r19, 0x00	; 0
     6b0:	a9 01       	movw	r20, r18
     6b2:	60 e0       	ldi	r22, 0x00	; 0
     6b4:	70 e0       	ldi	r23, 0x00	; 0
     6b6:	80 91 86 03 	lds	r24, 0x0386	; 0x800386 <_semaphore>
     6ba:	90 91 87 03 	lds	r25, 0x0387	; 0x800387 <_semaphore+0x1>
     6be:	0e 94 47 0c 	call	0x188e	; 0x188e <xQueueGenericSend>
     6c2:	04 c0       	rjmp	.+8      	; 0x6cc <configuration_getWorking+0x4a>
     6c4:	20 91 89 03 	lds	r18, 0x0389	; 0x800389 <_working>
     6c8:	fc 01       	movw	r30, r24
     6ca:	20 83       	st	Z, r18
     6cc:	df 91       	pop	r29
     6ce:	cf 91       	pop	r28
     6d0:	0f 91       	pop	r16
     6d2:	08 95       	ret

000006d4 <configuration_getVentilation>:

void configuration_getVentilation(bool* ventilation) {
     6d4:	0f 93       	push	r16
     6d6:	cf 93       	push	r28
     6d8:	df 93       	push	r29
	if (_semaphore != NULL) {
     6da:	20 91 86 03 	lds	r18, 0x0386	; 0x800386 <_semaphore>
     6de:	30 91 87 03 	lds	r19, 0x0387	; 0x800387 <_semaphore+0x1>
     6e2:	21 15       	cp	r18, r1
     6e4:	31 05       	cpc	r19, r1
     6e6:	b9 f0       	breq	.+46     	; 0x716 <configuration_getVentilation+0x42>
     6e8:	ec 01       	movw	r28, r24
		xSemaphoreTake(_semaphore, portMAX_DELAY);
     6ea:	4f ef       	ldi	r20, 0xFF	; 255
     6ec:	5f ef       	ldi	r21, 0xFF	; 255
     6ee:	ba 01       	movw	r22, r20
     6f0:	c9 01       	movw	r24, r18
     6f2:	0e 94 ce 0d 	call	0x1b9c	; 0x1b9c <xQueueSemaphoreTake>
		*ventilation = _ventilation;
     6f6:	80 91 88 03 	lds	r24, 0x0388	; 0x800388 <_ventilation>
     6fa:	88 83       	st	Y, r24
		xSemaphoreGive(_semaphore);
     6fc:	00 e0       	ldi	r16, 0x00	; 0
     6fe:	20 e0       	ldi	r18, 0x00	; 0
     700:	30 e0       	ldi	r19, 0x00	; 0
     702:	a9 01       	movw	r20, r18
     704:	60 e0       	ldi	r22, 0x00	; 0
     706:	70 e0       	ldi	r23, 0x00	; 0
     708:	80 91 86 03 	lds	r24, 0x0386	; 0x800386 <_semaphore>
     70c:	90 91 87 03 	lds	r25, 0x0387	; 0x800387 <_semaphore+0x1>
     710:	0e 94 47 0c 	call	0x188e	; 0x188e <xQueueGenericSend>
     714:	04 c0       	rjmp	.+8      	; 0x71e <configuration_getVentilation+0x4a>
	}
	else *ventilation = _ventilation;
     716:	20 91 88 03 	lds	r18, 0x0388	; 0x800388 <_ventilation>
     71a:	fc 01       	movw	r30, r24
     71c:	20 83       	st	Z, r18
}
     71e:	df 91       	pop	r29
     720:	cf 91       	pop	r28
     722:	0f 91       	pop	r16
     724:	08 95       	ret

00000726 <currentCondition_create>:
	//free(self->co2Data);
	//free(self->temperatureData);
	//free(self->humidityData);
	//free(self->soundData);
	//free(self);
	vPortFree(self);//maybe use this
     726:	61 e0       	ldi	r22, 0x01	; 1
     728:	70 e0       	ldi	r23, 0x00	; 0
     72a:	88 e0       	ldi	r24, 0x08	; 8
     72c:	90 e0       	ldi	r25, 0x00	; 0
     72e:	0e 94 4d 26 	call	0x4c9a	; 0x4c9a <calloc>
     732:	00 97       	sbiw	r24, 0x00	; 0
     734:	39 f0       	breq	.+14     	; 0x744 <currentCondition_create+0x1e>
     736:	fc 01       	movw	r30, r24
     738:	13 82       	std	Z+3, r1	; 0x03
     73a:	12 82       	std	Z+2, r1	; 0x02
     73c:	15 82       	std	Z+5, r1	; 0x05
     73e:	14 82       	std	Z+4, r1	; 0x04
     740:	11 82       	std	Z+1, r1	; 0x01
     742:	10 82       	st	Z, r1
     744:	08 95       	ret

00000746 <currentCondition_setCO2>:
     746:	00 97       	sbiw	r24, 0x00	; 0
     748:	19 f0       	breq	.+6      	; 0x750 <currentCondition_setCO2+0xa>
     74a:	fc 01       	movw	r30, r24
     74c:	71 83       	std	Z+1, r23	; 0x01
     74e:	60 83       	st	Z, r22
     750:	08 95       	ret

00000752 <currentCondition_setHumidity>:
     752:	00 97       	sbiw	r24, 0x00	; 0
     754:	19 f0       	breq	.+6      	; 0x75c <currentCondition_setHumidity+0xa>
     756:	fc 01       	movw	r30, r24
     758:	75 83       	std	Z+5, r23	; 0x05
     75a:	64 83       	std	Z+4, r22	; 0x04
     75c:	08 95       	ret

0000075e <currentCondition_setTemperature>:
     75e:	00 97       	sbiw	r24, 0x00	; 0
     760:	19 f0       	breq	.+6      	; 0x768 <currentCondition_setTemperature+0xa>
     762:	fc 01       	movw	r30, r24
     764:	73 83       	std	Z+3, r23	; 0x03
     766:	62 83       	std	Z+2, r22	; 0x02
     768:	08 95       	ret

0000076a <getcurrentConditionPayload>:
}
lora_payload_t getcurrentConditionPayload(currentCondition_t self)
{
     76a:	fc 01       	movw	r30, r24
     76c:	db 01       	movw	r26, r22
	lora_payload_t payload;
	payload.port_no = 1;
	payload.len = 4;
	
	payload.bytes[0] = self->temperatureData >> 8;
     76e:	12 96       	adiw	r26, 0x02	; 2
     770:	2c 91       	ld	r18, X
     772:	12 97       	sbiw	r26, 0x02	; 2
     774:	13 96       	adiw	r26, 0x03	; 3
     776:	3c 91       	ld	r19, X
     778:	13 97       	sbiw	r26, 0x03	; 3
	payload.bytes[1] = self->temperatureData & 0xFF;

	payload.bytes[2] = self->humidityData >> 8;
     77a:	14 96       	adiw	r26, 0x04	; 4
     77c:	8c 91       	ld	r24, X
     77e:	14 97       	sbiw	r26, 0x04	; 4
     780:	15 96       	adiw	r26, 0x05	; 5
     782:	9c 91       	ld	r25, X
	payload.bytes[3] = self->humidityData & 0xFF;
	return payload;
     784:	41 e0       	ldi	r20, 0x01	; 1
     786:	40 83       	st	Z, r20
     788:	44 e0       	ldi	r20, 0x04	; 4
     78a:	41 83       	std	Z+1, r20	; 0x01
     78c:	32 83       	std	Z+2, r19	; 0x02
     78e:	23 83       	std	Z+3, r18	; 0x03
     790:	94 83       	std	Z+4, r25	; 0x04
     792:	85 83       	std	Z+5, r24	; 0x05
	
     794:	cf 01       	movw	r24, r30
     796:	08 95       	ret

00000798 <device_create>:
	//free(self);*/
//}

currentCondition_t device_getCurrentCondition(device_t self) {
	return self->currentCondition;
}
     798:	2f 92       	push	r2
     79a:	3f 92       	push	r3
     79c:	4f 92       	push	r4
     79e:	5f 92       	push	r5
     7a0:	6f 92       	push	r6
     7a2:	7f 92       	push	r7
     7a4:	8f 92       	push	r8
     7a6:	9f 92       	push	r9
     7a8:	af 92       	push	r10
     7aa:	bf 92       	push	r11
     7ac:	cf 92       	push	r12
     7ae:	df 92       	push	r13
     7b0:	ef 92       	push	r14
     7b2:	ff 92       	push	r15
     7b4:	0f 93       	push	r16
     7b6:	1f 93       	push	r17
     7b8:	cf 93       	push	r28
     7ba:	df 93       	push	r29
     7bc:	00 d0       	rcall	.+0      	; 0x7be <device_create+0x26>
     7be:	1f 92       	push	r1
     7c0:	cd b7       	in	r28, 0x3d	; 61
     7c2:	de b7       	in	r29, 0x3e	; 62
     7c4:	38 2e       	mov	r3, r24
     7c6:	26 2e       	mov	r2, r22
     7c8:	5c 83       	std	Y+4, r21	; 0x04
     7ca:	4b 83       	std	Y+3, r20	; 0x03
     7cc:	28 01       	movw	r4, r16
     7ce:	39 01       	movw	r6, r18
     7d0:	88 e0       	ldi	r24, 0x08	; 8
     7d2:	90 e0       	ldi	r25, 0x00	; 0
     7d4:	21 d4       	rcall	.+2114   	; 0x1018 <pvPortMalloc>
     7d6:	9a 83       	std	Y+2, r25	; 0x02
     7d8:	89 83       	std	Y+1, r24	; 0x01
     7da:	00 97       	sbiw	r24, 0x00	; 0
     7dc:	09 f4       	brne	.+2      	; 0x7e0 <device_create+0x48>
     7de:	3e c0       	rjmp	.+124    	; 0x85c <device_create+0xc4>
     7e0:	fc 01       	movw	r30, r24
     7e2:	91 82       	std	Z+1, r9	; 0x01
     7e4:	80 82       	st	Z, r8
     7e6:	8a 8d       	ldd	r24, Y+26	; 0x1a
     7e8:	9b 8d       	ldd	r25, Y+27	; 0x1b
     7ea:	93 83       	std	Z+3, r25	; 0x03
     7ec:	82 83       	std	Z+2, r24	; 0x02
     7ee:	9b df       	rcall	.-202    	; 0x726 <currentCondition_create>
     7f0:	e9 81       	ldd	r30, Y+1	; 0x01
     7f2:	fa 81       	ldd	r31, Y+2	; 0x02
     7f4:	95 83       	std	Z+5, r25	; 0x05
     7f6:	84 83       	std	Z+4, r24	; 0x04
     7f8:	8b 81       	ldd	r24, Y+3	; 0x03
     7fa:	9c 81       	ldd	r25, Y+4	; 0x04
     7fc:	90 93 ad 03 	sts	0x03AD, r25	; 0x8003ad <_startMeasureEventGroup+0x1>
     800:	80 93 ac 03 	sts	0x03AC, r24	; 0x8003ac <_startMeasureEventGroup>
     804:	40 92 a8 03 	sts	0x03A8, r4	; 0x8003a8 <_startMeasureBit>
     808:	50 92 a9 03 	sts	0x03A9, r5	; 0x8003a9 <_startMeasureBit+0x1>
     80c:	60 92 aa 03 	sts	0x03AA, r6	; 0x8003aa <_startMeasureBit+0x2>
     810:	70 92 ab 03 	sts	0x03AB, r7	; 0x8003ab <_startMeasureBit+0x3>
     814:	f0 92 a7 03 	sts	0x03A7, r15	; 0x8003a7 <_readyEventGroup+0x1>
     818:	e0 92 a6 03 	sts	0x03A6, r14	; 0x8003a6 <_readyEventGroup>
     81c:	a0 92 a2 03 	sts	0x03A2, r10	; 0x8003a2 <_readyBit>
     820:	b0 92 a3 03 	sts	0x03A3, r11	; 0x8003a3 <_readyBit+0x1>
     824:	c0 92 a4 03 	sts	0x03A4, r12	; 0x8003a4 <_readyBit+0x2>
     828:	d0 92 a5 03 	sts	0x03A5, r13	; 0x8003a5 <_readyBit+0x3>
     82c:	8c 8d       	ldd	r24, Y+28	; 0x1c
     82e:	9d 8d       	ldd	r25, Y+29	; 0x1d
     830:	90 93 a1 03 	sts	0x03A1, r25	; 0x8003a1 <_uplinkmessageBuffer+0x1>
     834:	80 93 a0 03 	sts	0x03A0, r24	; 0x8003a0 <_uplinkmessageBuffer>
     838:	42 2d       	mov	r20, r2
     83a:	50 e0       	ldi	r21, 0x00	; 0
     83c:	7f 01       	movw	r14, r30
     83e:	96 e0       	ldi	r25, 0x06	; 6
     840:	e9 0e       	add	r14, r25
     842:	f1 1c       	adc	r15, r1
     844:	03 2d       	mov	r16, r3
     846:	9f 01       	movw	r18, r30
     848:	64 e8       	ldi	r22, 0x84	; 132
     84a:	72 e0       	ldi	r23, 0x02	; 2
     84c:	85 e4       	ldi	r24, 0x45	; 69
     84e:	95 e0       	ldi	r25, 0x05	; 5
     850:	0e 94 13 11 	call	0x2226	; 0x2226 <xTaskCreate>
     854:	8b e8       	ldi	r24, 0x8B	; 139
     856:	92 e0       	ldi	r25, 0x02	; 2
     858:	0e 94 af 27 	call	0x4f5e	; 0x4f5e <puts>
     85c:	89 81       	ldd	r24, Y+1	; 0x01
     85e:	9a 81       	ldd	r25, Y+2	; 0x02
     860:	0f 90       	pop	r0
     862:	0f 90       	pop	r0
     864:	0f 90       	pop	r0
     866:	0f 90       	pop	r0
     868:	df 91       	pop	r29
     86a:	cf 91       	pop	r28
     86c:	1f 91       	pop	r17
     86e:	0f 91       	pop	r16
     870:	ff 90       	pop	r15
     872:	ef 90       	pop	r14
     874:	df 90       	pop	r13
     876:	cf 90       	pop	r12
     878:	bf 90       	pop	r11
     87a:	af 90       	pop	r10
     87c:	9f 90       	pop	r9
     87e:	8f 90       	pop	r8
     880:	7f 90       	pop	r7
     882:	6f 90       	pop	r6
     884:	5f 90       	pop	r5
     886:	4f 90       	pop	r4
     888:	3f 90       	pop	r3
     88a:	2f 90       	pop	r2
     88c:	08 95       	ret

0000088e <device_setHumidityToCurrent>:

void device_setHumidityToCurrent(device_t self, uint16_t value)
{
	currentCondition_setHumidity(self->currentCondition,value);
     88e:	fc 01       	movw	r30, r24
     890:	84 81       	ldd	r24, Z+4	; 0x04
     892:	95 81       	ldd	r25, Z+5	; 0x05
     894:	5e cf       	rjmp	.-324    	; 0x752 <currentCondition_setHumidity>
     896:	08 95       	ret

00000898 <device_getHumidityData>:
}


uint16_t device_getHumidityData(device_t self)
{
	if (self->humAndTempReader!=NULL)
     898:	fc 01       	movw	r30, r24
     89a:	82 81       	ldd	r24, Z+2	; 0x02
     89c:	93 81       	ldd	r25, Z+3	; 0x03
     89e:	00 97       	sbiw	r24, 0x00	; 0
     8a0:	11 f0       	breq	.+4      	; 0x8a6 <device_getHumidityData+0xe>
	{
		return humAndTempReader_getHumidity(self->humAndTempReader);
     8a2:	d1 c1       	rjmp	.+930    	; 0xc46 <humAndTempReader_getHumidity>
     8a4:	08 95       	ret
	}
	else
	return -1;
     8a6:	8f ef       	ldi	r24, 0xFF	; 255
     8a8:	9f ef       	ldi	r25, 0xFF	; 255
}
     8aa:	08 95       	ret

000008ac <device_setCO2ToCurrent>:

void device_setCO2ToCurrent(device_t self, uint16_t value) {
	currentCondition_setCO2(self->currentCondition, value);
     8ac:	fc 01       	movw	r30, r24
     8ae:	84 81       	ldd	r24, Z+4	; 0x04
     8b0:	95 81       	ldd	r25, Z+5	; 0x05
     8b2:	49 cf       	rjmp	.-366    	; 0x746 <currentCondition_setCO2>
     8b4:	08 95       	ret

000008b6 <device_getCO2Data>:
}

uint16_t device_getCO2Data(device_t self) {
	if (self->co2reader != NULL)
     8b6:	fc 01       	movw	r30, r24
     8b8:	80 81       	ld	r24, Z
     8ba:	91 81       	ldd	r25, Z+1	; 0x01
     8bc:	00 97       	sbiw	r24, 0x00	; 0
     8be:	11 f0       	breq	.+4      	; 0x8c4 <device_getCO2Data+0xe>
		return co2Reader_getCO2(self->co2reader);
     8c0:	d0 ce       	rjmp	.-608    	; 0x662 <co2Reader_getCO2>
     8c2:	08 95       	ret
	else return -1;
     8c4:	8f ef       	ldi	r24, 0xFF	; 255
     8c6:	9f ef       	ldi	r25, 0xFF	; 255
}
     8c8:	08 95       	ret

000008ca <device_setTemperatureToCurrent>:

void device_setTemperatureToCurrent(device_t self, int16_t value)
{
	
	currentCondition_setTemperature(self->currentCondition,value);
     8ca:	fc 01       	movw	r30, r24
     8cc:	84 81       	ldd	r24, Z+4	; 0x04
     8ce:	95 81       	ldd	r25, Z+5	; 0x05
     8d0:	46 cf       	rjmp	.-372    	; 0x75e <currentCondition_setTemperature>
     8d2:	08 95       	ret

000008d4 <device_getTemperatureData>:
}


int16_t device_getTemperatureData(device_t self)
{
	if (self->humAndTempReader!=NULL)
     8d4:	fc 01       	movw	r30, r24
     8d6:	82 81       	ldd	r24, Z+2	; 0x02
     8d8:	93 81       	ldd	r25, Z+3	; 0x03
     8da:	00 97       	sbiw	r24, 0x00	; 0
     8dc:	11 f0       	breq	.+4      	; 0x8e2 <device_getTemperatureData+0xe>
	{
		return humAndTempReader_getTemperature(self->humAndTempReader);
     8de:	b7 c1       	rjmp	.+878    	; 0xc4e <humAndTempReader_getTemperature>
     8e0:	08 95       	ret
	}
	else
	return -1;
     8e2:	8f ef       	ldi	r24, 0xFF	; 255
     8e4:	9f ef       	ldi	r25, 0xFF	; 255
	
     8e6:	08 95       	ret

000008e8 <device_startMeasuring>:
}




void device_startMeasuring(device_t self) {
     8e8:	af 92       	push	r10
     8ea:	bf 92       	push	r11
     8ec:	cf 92       	push	r12
     8ee:	df 92       	push	r13
     8f0:	ef 92       	push	r14
     8f2:	ff 92       	push	r15
     8f4:	0f 93       	push	r16
     8f6:	1f 93       	push	r17
     8f8:	cf 93       	push	r28
     8fa:	df 93       	push	r29
     8fc:	cd b7       	in	r28, 0x3d	; 61
     8fe:	de b7       	in	r29, 0x3e	; 62
     900:	66 97       	sbiw	r28, 0x16	; 22
     902:	0f b6       	in	r0, 0x3f	; 63
     904:	f8 94       	cli
     906:	de bf       	out	0x3e, r29	; 62
     908:	0f be       	out	0x3f, r0	; 63
     90a:	cd bf       	out	0x3d, r28	; 61
     90c:	5c 01       	movw	r10, r24
	//we should first check if device is on, get that from lora and add new eventBit 
	
	bool* works = pvPortMalloc(sizeof(bool));
     90e:	81 e0       	ldi	r24, 0x01	; 1
     910:	90 e0       	ldi	r25, 0x00	; 0
     912:	82 d3       	rcall	.+1796   	; 0x1018 <pvPortMalloc>
     914:	8c 01       	movw	r16, r24
	configuration_getWorking(works);
     916:	b5 de       	rcall	.-662    	; 0x682 <configuration_getWorking>
     918:	f8 01       	movw	r30, r16
	if (*works == true)
     91a:	80 81       	ld	r24, Z
     91c:	88 23       	and	r24, r24
     91e:	09 f4       	brne	.+2      	; 0x922 <device_startMeasuring+0x3a>
     920:	9d c0       	rjmp	.+314    	; 0xa5c <device_startMeasuring+0x174>
     922:	81 e0       	ldi	r24, 0x01	; 1
	{

		bool* ventilate = pvPortMalloc(sizeof(bool));
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	78 d3       	rcall	.+1776   	; 0x1018 <pvPortMalloc>
     928:	8c 01       	movw	r16, r24
		configuration_getVentilation(ventilate);
     92a:	d4 de       	rcall	.-600    	; 0x6d4 <configuration_getVentilation>
     92c:	f8 01       	movw	r30, r16
		if(*ventilate == true)
     92e:	80 81       	ld	r24, Z
     930:	88 23       	and	r24, r24
		{
			servo_open();
     932:	11 f0       	breq	.+4      	; 0x938 <device_startMeasuring+0x50>
     934:	90 d1       	rcall	.+800    	; 0xc56 <servo_open>
     936:	01 c0       	rjmp	.+2      	; 0x93a <device_startMeasuring+0x52>
		} 
		else
		{
			servo_close();
     938:	9b d1       	rcall	.+822    	; 0xc70 <servo_close>
     93a:	40 91 a8 03 	lds	r20, 0x03A8	; 0x8003a8 <_startMeasureBit>
		}

	//tell sensors to start meassuring 
	xEventGroupSetBits(_startMeasureEventGroup, _startMeasureBit);
     93e:	50 91 a9 03 	lds	r21, 0x03A9	; 0x8003a9 <_startMeasureBit+0x1>
     942:	60 91 aa 03 	lds	r22, 0x03AA	; 0x8003aa <_startMeasureBit+0x2>
     946:	70 91 ab 03 	lds	r23, 0x03AB	; 0x8003ab <_startMeasureBit+0x3>
     94a:	80 91 ac 03 	lds	r24, 0x03AC	; 0x8003ac <_startMeasureEventGroup>
     94e:	90 91 ad 03 	lds	r25, 0x03AD	; 0x8003ad <_startMeasureEventGroup+0x1>
     952:	7c d2       	rcall	.+1272   	; 0xe4c <xEventGroupSetBits>
     954:	85 e9       	ldi	r24, 0x95	; 149
	printf("device has set bits\n");
     956:	92 e0       	ldi	r25, 0x02	; 2
     958:	0e 94 af 27 	call	0x4f5e	; 0x4f5e <puts>
     95c:	40 91 a2 03 	lds	r20, 0x03A2	; 0x8003a2 <_readyBit>

	//wait for sensors to read data
	EventBits_t uxBits = xEventGroupWaitBits(_readyEventGroup, //eventGroup it is interested in
     960:	50 91 a3 03 	lds	r21, 0x03A3	; 0x8003a3 <_readyBit+0x1>
     964:	60 91 a4 03 	lds	r22, 0x03A4	; 0x8003a4 <_readyBit+0x2>
     968:	70 91 a5 03 	lds	r23, 0x03A5	; 0x8003a5 <_readyBit+0x3>
     96c:	cc 24       	eor	r12, r12
     96e:	ca 94       	dec	r12
     970:	dc 2c       	mov	r13, r12
     972:	76 01       	movw	r14, r12
     974:	01 e0       	ldi	r16, 0x01	; 1
     976:	21 e0       	ldi	r18, 0x01	; 1
     978:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <_readyEventGroup>
     97c:	90 91 a7 03 	lds	r25, 0x03A7	; 0x8003a7 <_readyEventGroup+0x1>
     980:	a5 d1       	rcall	.+842    	; 0xccc <xEventGroupWaitBits>
     982:	00 91 a2 03 	lds	r16, 0x03A2	; 0x8003a2 <_readyBit>
		_readyBit, //bits it is interested in
		pdTRUE, //clears the bits 
		pdTRUE, //waits for both bits to be set
		portMAX_DELAY); //waits forever if needed

	if ((uxBits & (_readyBit)) == (_readyBit)) {
     986:	10 91 a3 03 	lds	r17, 0x03A3	; 0x8003a3 <_readyBit+0x1>
     98a:	20 91 a4 03 	lds	r18, 0x03A4	; 0x8003a4 <_readyBit+0x2>
     98e:	30 91 a5 03 	lds	r19, 0x03A5	; 0x8003a5 <_readyBit+0x3>
     992:	dc 01       	movw	r26, r24
     994:	cb 01       	movw	r24, r22
     996:	80 23       	and	r24, r16
     998:	91 23       	and	r25, r17
     99a:	a2 23       	and	r26, r18
     99c:	b3 23       	and	r27, r19
     99e:	08 17       	cp	r16, r24
     9a0:	19 07       	cpc	r17, r25
     9a2:	2a 07       	cpc	r18, r26
     9a4:	3b 07       	cpc	r19, r27
     9a6:	09 f0       	breq	.+2      	; 0x9aa <device_startMeasuring+0xc2>
		device_setCO2ToCurrent(self, device_getCO2Data(self));
     9a8:	5f c0       	rjmp	.+190    	; 0xa68 <device_startMeasuring+0x180>
     9aa:	c5 01       	movw	r24, r10
     9ac:	84 df       	rcall	.-248    	; 0x8b6 <device_getCO2Data>
     9ae:	bc 01       	movw	r22, r24
     9b0:	c5 01       	movw	r24, r10
		device_setTemperatureToCurrent(self, device_getTemperatureData(self));
     9b2:	7c df       	rcall	.-264    	; 0x8ac <device_setCO2ToCurrent>
     9b4:	c5 01       	movw	r24, r10
     9b6:	8e df       	rcall	.-228    	; 0x8d4 <device_getTemperatureData>
     9b8:	bc 01       	movw	r22, r24
     9ba:	c5 01       	movw	r24, r10
     9bc:	86 df       	rcall	.-244    	; 0x8ca <device_setTemperatureToCurrent>
		device_setHumidityToCurrent(self, device_getHumidityData(self));
     9be:	c5 01       	movw	r24, r10
     9c0:	6b df       	rcall	.-298    	; 0x898 <device_getHumidityData>
     9c2:	bc 01       	movw	r22, r24
     9c4:	c5 01       	movw	r24, r10
     9c6:	63 df       	rcall	.-314    	; 0x88e <device_setHumidityToCurrent>
     9c8:	89 ea       	ldi	r24, 0xA9	; 169
     9ca:	92 e0       	ldi	r25, 0x02	; 2
		
		printf("device got done bit\n");
     9cc:	0e 94 af 27 	call	0x4f5e	; 0x4f5e <puts>
     9d0:	c5 01       	movw	r24, r10
		
		printf("CO2 is: %u\n", device_getCO2Data(self));
     9d2:	71 df       	rcall	.-286    	; 0x8b6 <device_getCO2Data>
     9d4:	9f 93       	push	r25
     9d6:	8f 93       	push	r24
     9d8:	8d eb       	ldi	r24, 0xBD	; 189
     9da:	92 e0       	ldi	r25, 0x02	; 2
     9dc:	9f 93       	push	r25
     9de:	8f 93       	push	r24
     9e0:	0e 94 9c 27 	call	0x4f38	; 0x4f38 <printf>
     9e4:	c5 01       	movw	r24, r10
		printf("Temperature is: %d\n", device_getTemperatureData(self));
     9e6:	76 df       	rcall	.-276    	; 0x8d4 <device_getTemperatureData>
     9e8:	9f 93       	push	r25
     9ea:	8f 93       	push	r24
     9ec:	89 ec       	ldi	r24, 0xC9	; 201
     9ee:	92 e0       	ldi	r25, 0x02	; 2
     9f0:	9f 93       	push	r25
     9f2:	8f 93       	push	r24
     9f4:	0e 94 9c 27 	call	0x4f38	; 0x4f38 <printf>
     9f8:	c5 01       	movw	r24, r10
		printf("Humidity is: %u\n", device_getHumidityData(self));
     9fa:	4e df       	rcall	.-356    	; 0x898 <device_getHumidityData>
     9fc:	9f 93       	push	r25
     9fe:	8f 93       	push	r24
     a00:	8d ed       	ldi	r24, 0xDD	; 221
     a02:	92 e0       	ldi	r25, 0x02	; 2
     a04:	9f 93       	push	r25
     a06:	8f 93       	push	r24
     a08:	0e 94 9c 27 	call	0x4f38	; 0x4f38 <printf>
     a0c:	f5 01       	movw	r30, r10
     a0e:	64 81       	ldd	r22, Z+4	; 0x04
		
		
		/*Perhaps loraPayload is not a good idea to be here*/
		_uplink_payload = getcurrentConditionPayload(self->currentCondition);
     a10:	75 81       	ldd	r23, Z+5	; 0x05
     a12:	ce 01       	movw	r24, r28
     a14:	01 96       	adiw	r24, 0x01	; 1
     a16:	a9 de       	rcall	.-686    	; 0x76a <getcurrentConditionPayload>
     a18:	86 e1       	ldi	r24, 0x16	; 22
     a1a:	fe 01       	movw	r30, r28
     a1c:	31 96       	adiw	r30, 0x01	; 1
     a1e:	aa e8       	ldi	r26, 0x8A	; 138
     a20:	b3 e0       	ldi	r27, 0x03	; 3
     a22:	01 90       	ld	r0, Z+
     a24:	0d 92       	st	X+, r0
     a26:	8a 95       	dec	r24
     a28:	e1 f7       	brne	.-8      	; 0xa22 <device_startMeasuring+0x13a>
     a2a:	68 ee       	ldi	r22, 0xE8	; 232
     a2c:	73 e0       	ldi	r23, 0x03	; 3
     a2e:	80 e0       	ldi	r24, 0x00	; 0
		
		//if(_uplink_payload!=NULL)
		//{
		vTaskDelay(1000);
     a30:	90 e0       	ldi	r25, 0x00	; 0
     a32:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <vTaskDelay>
     a36:	0f ef       	ldi	r16, 0xFF	; 255
     a38:	1f ef       	ldi	r17, 0xFF	; 255
     a3a:	98 01       	movw	r18, r16

		xMessageBufferSend(_uplinkmessageBuffer,(void*) &_uplink_payload,sizeof(_uplink_payload),portMAX_DELAY);
     a3c:	46 e1       	ldi	r20, 0x16	; 22
     a3e:	50 e0       	ldi	r21, 0x00	; 0
     a40:	6a e8       	ldi	r22, 0x8A	; 138
     a42:	73 e0       	ldi	r23, 0x03	; 3
     a44:	80 91 a0 03 	lds	r24, 0x03A0	; 0x8003a0 <_uplinkmessageBuffer>
     a48:	90 91 a1 03 	lds	r25, 0x03A1	; 0x8003a1 <_uplinkmessageBuffer+0x1>
     a4c:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <xStreamBufferSend>
     a50:	0f b6       	in	r0, 0x3f	; 63
     a52:	f8 94       	cli
     a54:	de bf       	out	0x3e, r29	; 62
     a56:	0f be       	out	0x3f, r0	; 63
     a58:	cd bf       	out	0x3d, r28	; 61
     a5a:	06 c0       	rjmp	.+12     	; 0xa68 <device_startMeasuring+0x180>
     a5c:	68 e8       	ldi	r22, 0x88	; 136
     a5e:	73 e1       	ldi	r23, 0x13	; 19
     a60:	80 e0       	ldi	r24, 0x00	; 0
		//}
		//else printf("Error when making loraPayload");
	}
	//if the device is not on, wait a bit and check if anything is changed
	}
	else vTaskDelay(5000);
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <vTaskDelay>
     a68:	66 96       	adiw	r28, 0x16	; 22
     a6a:	0f b6       	in	r0, 0x3f	; 63
     a6c:	f8 94       	cli
}
     a6e:	de bf       	out	0x3e, r29	; 62
     a70:	0f be       	out	0x3f, r0	; 63
     a72:	cd bf       	out	0x3d, r28	; 61
     a74:	df 91       	pop	r29
     a76:	cf 91       	pop	r28
     a78:	1f 91       	pop	r17
     a7a:	0f 91       	pop	r16
     a7c:	ff 90       	pop	r15
     a7e:	ef 90       	pop	r14
     a80:	df 90       	pop	r13
     a82:	cf 90       	pop	r12
     a84:	bf 90       	pop	r11
     a86:	af 90       	pop	r10
     a88:	08 95       	ret

00000a8a <device_executeTask>:
     a8a:	ec 01       	movw	r28, r24
     a8c:	ce 01       	movw	r24, r28
     a8e:	2c df       	rcall	.-424    	; 0x8e8 <device_startMeasuring>
//devided so we can test
void device_executeTask(void* self) {
	for (;;)
	{
		device_startMeasuring((device_t)self);
		vTaskDelay(5000);
     a90:	68 e8       	ldi	r22, 0x88	; 136
     a92:	73 e1       	ldi	r23, 0x13	; 19
     a94:	80 e0       	ldi	r24, 0x00	; 0
     a96:	90 e0       	ldi	r25, 0x00	; 0
     a98:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <vTaskDelay>
     a9c:	f7 cf       	rjmp	.-18     	; 0xa8c <device_executeTask+0x2>

00000a9e <humAndTempReader_create>:
void humAndTempReader_destroy(humAndTempReader_t self) {
	if (self == NULL)
	return;

	//delete will clear the allocated memory to the task + we need to remove everything else
	vTaskDelete(self->handleTask);
     a9e:	2f 92       	push	r2
     aa0:	3f 92       	push	r3
     aa2:	4f 92       	push	r4
     aa4:	5f 92       	push	r5
     aa6:	6f 92       	push	r6
     aa8:	7f 92       	push	r7
     aaa:	8f 92       	push	r8
     aac:	9f 92       	push	r9
     aae:	af 92       	push	r10
     ab0:	bf 92       	push	r11
     ab2:	cf 92       	push	r12
     ab4:	df 92       	push	r13
     ab6:	ef 92       	push	r14
     ab8:	ff 92       	push	r15
     aba:	0f 93       	push	r16
     abc:	1f 93       	push	r17
     abe:	cf 93       	push	r28
     ac0:	df 93       	push	r29
     ac2:	88 2e       	mov	r8, r24
     ac4:	96 2e       	mov	r9, r22
     ac6:	1a 01       	movw	r2, r20
     ac8:	28 01       	movw	r4, r16
     aca:	39 01       	movw	r6, r18
     acc:	86 e0       	ldi	r24, 0x06	; 6
     ace:	90 e0       	ldi	r25, 0x00	; 0
     ad0:	a3 d2       	rcall	.+1350   	; 0x1018 <pvPortMalloc>
     ad2:	ec 01       	movw	r28, r24
     ad4:	00 97       	sbiw	r24, 0x00	; 0
     ad6:	71 f1       	breq	.+92     	; 0xb34 <humAndTempReader_create+0x96>
     ad8:	19 82       	std	Y+1, r1	; 0x01
     ada:	18 82       	st	Y, r1
     adc:	1b 82       	std	Y+3, r1	; 0x03
     ade:	1a 82       	std	Y+2, r1	; 0x02
     ae0:	30 92 b9 03 	sts	0x03B9, r3	; 0x8003b9 <_startMeasureEventGroup+0x1>
     ae4:	20 92 b8 03 	sts	0x03B8, r2	; 0x8003b8 <_startMeasureEventGroup>
     ae8:	40 92 b4 03 	sts	0x03B4, r4	; 0x8003b4 <_startMeasureBit>
     aec:	50 92 b5 03 	sts	0x03B5, r5	; 0x8003b5 <_startMeasureBit+0x1>
     af0:	60 92 b6 03 	sts	0x03B6, r6	; 0x8003b6 <_startMeasureBit+0x2>
     af4:	70 92 b7 03 	sts	0x03B7, r7	; 0x8003b7 <_startMeasureBit+0x3>
     af8:	f0 92 b3 03 	sts	0x03B3, r15	; 0x8003b3 <_readyEventGroup+0x1>
     afc:	e0 92 b2 03 	sts	0x03B2, r14	; 0x8003b2 <_readyEventGroup>
     b00:	a0 92 ae 03 	sts	0x03AE, r10	; 0x8003ae <_readyBit>
     b04:	b0 92 af 03 	sts	0x03AF, r11	; 0x8003af <_readyBit+0x1>
     b08:	c0 92 b0 03 	sts	0x03B0, r12	; 0x8003b0 <_readyBit+0x2>
     b0c:	d0 92 b1 03 	sts	0x03B1, r13	; 0x8003b1 <_readyBit+0x3>
     b10:	49 2d       	mov	r20, r9
     b12:	50 e0       	ldi	r21, 0x00	; 0
     b14:	7c 01       	movw	r14, r24
     b16:	84 e0       	ldi	r24, 0x04	; 4
     b18:	e8 0e       	add	r14, r24
     b1a:	f1 1c       	adc	r15, r1
     b1c:	08 2d       	mov	r16, r8
     b1e:	9e 01       	movw	r18, r28
     b20:	6e ee       	ldi	r22, 0xEE	; 238
     b22:	72 e0       	ldi	r23, 0x02	; 2
     b24:	89 e1       	ldi	r24, 0x19	; 25
     b26:	96 e0       	ldi	r25, 0x06	; 6
     b28:	0e 94 13 11 	call	0x2226	; 0x2226 <xTaskCreate>
     b2c:	8f ef       	ldi	r24, 0xFF	; 255
     b2e:	92 e0       	ldi	r25, 0x02	; 2
     b30:	0e 94 af 27 	call	0x4f5e	; 0x4f5e <puts>
     b34:	ce 01       	movw	r24, r28
     b36:	df 91       	pop	r29
     b38:	cf 91       	pop	r28
     b3a:	1f 91       	pop	r17
     b3c:	0f 91       	pop	r16
     b3e:	ff 90       	pop	r15
     b40:	ef 90       	pop	r14
     b42:	df 90       	pop	r13
     b44:	cf 90       	pop	r12
     b46:	bf 90       	pop	r11
     b48:	af 90       	pop	r10
     b4a:	9f 90       	pop	r9
     b4c:	8f 90       	pop	r8
     b4e:	7f 90       	pop	r7
     b50:	6f 90       	pop	r6
     b52:	5f 90       	pop	r5
     b54:	4f 90       	pop	r4
     b56:	3f 90       	pop	r3
     b58:	2f 90       	pop	r2
     b5a:	08 95       	ret

00000b5c <humAndTempReader_measure>:
	//free(self);
}



void humAndTempReader_measure(humAndTempReader_t self) {//dummy
     b5c:	cf 92       	push	r12
     b5e:	df 92       	push	r13
     b60:	ef 92       	push	r14
     b62:	ff 92       	push	r15
     b64:	0f 93       	push	r16
     b66:	1f 93       	push	r17
     b68:	cf 93       	push	r28
     b6a:	df 93       	push	r29
     b6c:	ec 01       	movw	r28, r24
	EventBits_t uxBits = xEventGroupWaitBits(_startMeasureEventGroup, //eventGroup
     b6e:	40 91 b4 03 	lds	r20, 0x03B4	; 0x8003b4 <_startMeasureBit>
     b72:	50 91 b5 03 	lds	r21, 0x03B5	; 0x8003b5 <_startMeasureBit+0x1>
     b76:	60 91 b6 03 	lds	r22, 0x03B6	; 0x8003b6 <_startMeasureBit+0x2>
     b7a:	70 91 b7 03 	lds	r23, 0x03B7	; 0x8003b7 <_startMeasureBit+0x3>
     b7e:	cc 24       	eor	r12, r12
     b80:	ca 94       	dec	r12
     b82:	dc 2c       	mov	r13, r12
     b84:	76 01       	movw	r14, r12
     b86:	01 e0       	ldi	r16, 0x01	; 1
     b88:	21 e0       	ldi	r18, 0x01	; 1
     b8a:	80 91 b8 03 	lds	r24, 0x03B8	; 0x8003b8 <_startMeasureEventGroup>
     b8e:	90 91 b9 03 	lds	r25, 0x03B9	; 0x8003b9 <_startMeasureEventGroup+0x1>
     b92:	9c d0       	rcall	.+312    	; 0xccc <xEventGroupWaitBits>
	_startMeasureBit, //bits it is interested i
	pdTRUE, //clears the bits
	pdTRUE, //waits for both bits to be set
	portMAX_DELAY); //wait

	if ((uxBits & (_startMeasureBit)) == (_startMeasureBit)) {
     b94:	00 91 b4 03 	lds	r16, 0x03B4	; 0x8003b4 <_startMeasureBit>
     b98:	10 91 b5 03 	lds	r17, 0x03B5	; 0x8003b5 <_startMeasureBit+0x1>
     b9c:	20 91 b6 03 	lds	r18, 0x03B6	; 0x8003b6 <_startMeasureBit+0x2>
     ba0:	30 91 b7 03 	lds	r19, 0x03B7	; 0x8003b7 <_startMeasureBit+0x3>
     ba4:	dc 01       	movw	r26, r24
     ba6:	cb 01       	movw	r24, r22
     ba8:	80 23       	and	r24, r16
     baa:	91 23       	and	r25, r17
     bac:	a2 23       	and	r26, r18
     bae:	b3 23       	and	r27, r19
     bb0:	08 17       	cp	r16, r24
     bb2:	19 07       	cpc	r17, r25
     bb4:	2a 07       	cpc	r18, r26
     bb6:	3b 07       	cpc	r19, r27
     bb8:	99 f5       	brne	.+102    	; 0xc20 <humAndTempReader_measure+0xc4>
		hih8120Wakeup();
     bba:	0e 94 65 1b 	call	0x36ca	; 0x36ca <hih8120Wakeup>
		vTaskDelay(50);
     bbe:	62 e3       	ldi	r22, 0x32	; 50
     bc0:	70 e0       	ldi	r23, 0x00	; 0
     bc2:	80 e0       	ldi	r24, 0x00	; 0
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <vTaskDelay>
		hih8120Meassure();
     bca:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <hih8120Meassure>
		vTaskDelay(5);
     bce:	65 e0       	ldi	r22, 0x05	; 5
     bd0:	70 e0       	ldi	r23, 0x00	; 0
     bd2:	80 e0       	ldi	r24, 0x00	; 0
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <vTaskDelay>
		if(hih8120IsReady())
     bda:	0e 94 62 1b 	call	0x36c4	; 0x36c4 <hih8120IsReady>
     bde:	88 23       	and	r24, r24
     be0:	61 f0       	breq	.+24     	; 0xbfa <humAndTempReader_measure+0x9e>
		{
			self->humidity = hih8120GetHumidityPercent_x10();
     be2:	0e 94 9e 1b 	call	0x373c	; 0x373c <hih8120GetHumidityPercent_x10>
     be6:	99 83       	std	Y+1, r25	; 0x01
     be8:	88 83       	st	Y, r24
			self->temperature = hih8120GetTemperature_x10();
     bea:	0e 94 c4 1b 	call	0x3788	; 0x3788 <hih8120GetTemperature_x10>
     bee:	9b 83       	std	Y+3, r25	; 0x03
     bf0:	8a 83       	std	Y+2, r24	; 0x02
			printf("humidity and temperature done bit set\n");
     bf2:	8e e1       	ldi	r24, 0x1E	; 30
     bf4:	93 e0       	ldi	r25, 0x03	; 3
     bf6:	0e 94 af 27 	call	0x4f5e	; 0x4f5e <puts>
			
		}
		
		vTaskDelay(5000);
     bfa:	68 e8       	ldi	r22, 0x88	; 136
     bfc:	73 e1       	ldi	r23, 0x13	; 19
     bfe:	80 e0       	ldi	r24, 0x00	; 0
     c00:	90 e0       	ldi	r25, 0x00	; 0
     c02:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <vTaskDelay>
		//set done bit so that device knows meassurement is done
		xEventGroupSetBits(_readyEventGroup, _readyBit);
     c06:	40 91 ae 03 	lds	r20, 0x03AE	; 0x8003ae <_readyBit>
     c0a:	50 91 af 03 	lds	r21, 0x03AF	; 0x8003af <_readyBit+0x1>
     c0e:	60 91 b0 03 	lds	r22, 0x03B0	; 0x8003b0 <_readyBit+0x2>
     c12:	70 91 b1 03 	lds	r23, 0x03B1	; 0x8003b1 <_readyBit+0x3>
     c16:	80 91 b2 03 	lds	r24, 0x03B2	; 0x8003b2 <_readyEventGroup>
     c1a:	90 91 b3 03 	lds	r25, 0x03B3	; 0x8003b3 <_readyEventGroup+0x1>
     c1e:	16 d1       	rcall	.+556    	; 0xe4c <xEventGroupSetBits>
	}
}
     c20:	df 91       	pop	r29
     c22:	cf 91       	pop	r28
     c24:	1f 91       	pop	r17
     c26:	0f 91       	pop	r16
     c28:	ff 90       	pop	r15
     c2a:	ef 90       	pop	r14
     c2c:	df 90       	pop	r13
     c2e:	cf 90       	pop	r12
     c30:	08 95       	ret

00000c32 <humAndTempReader_executeTask>:
	int16_t temperature;
	TaskHandle_t handleTask;
}humidityAndTemperature;

//actual task, methods devided so that it is possible to test
void humAndTempReader_executeTask(void* self) {
     c32:	ec 01       	movw	r28, r24
	for (;;) {
		humAndTempReader_measure((humAndTempReader_t)self);
     c34:	ce 01       	movw	r24, r28
     c36:	92 df       	rcall	.-220    	; 0xb5c <humAndTempReader_measure>
		vTaskDelay(5000);
     c38:	68 e8       	ldi	r22, 0x88	; 136
     c3a:	73 e1       	ldi	r23, 0x13	; 19
     c3c:	80 e0       	ldi	r24, 0x00	; 0
     c3e:	90 e0       	ldi	r25, 0x00	; 0
     c40:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <vTaskDelay>
     c44:	f7 cf       	rjmp	.-18     	; 0xc34 <humAndTempReader_executeTask+0x2>

00000c46 <humAndTempReader_getHumidity>:
	}
}

uint16_t humAndTempReader_getHumidity(humAndTempReader_t self){
	return self->humidity;
}
     c46:	fc 01       	movw	r30, r24
     c48:	80 81       	ld	r24, Z
     c4a:	91 81       	ldd	r25, Z+1	; 0x01
     c4c:	08 95       	ret

00000c4e <humAndTempReader_getTemperature>:

int16_t humAndTempReader_getTemperature(humAndTempReader_t self){
	return self->temperature;
}
     c4e:	fc 01       	movw	r30, r24
     c50:	82 81       	ldd	r24, Z+2	; 0x02
     c52:	93 81       	ldd	r25, Z+3	; 0x03
     c54:	08 95       	ret

00000c56 <servo_open>:
	printf("Servo is up\n");
}

void servo_open()
{
	rcServoSet(0, 100);
     c56:	64 e6       	ldi	r22, 0x64	; 100
     c58:	80 e0       	ldi	r24, 0x00	; 0
     c5a:	0c 94 80 1e 	jmp	0x3d00	; 0x3d00 <rcServoSet>
     c5e:	08 95       	ret

00000c60 <servo_initialise>:
#include "Servo.h"


void servo_initialise()
{
	rcServoCreate();		
     c60:	0e 94 98 1e 	call	0x3d30	; 0x3d30 <rcServoCreate>
	servo_open();
     c64:	f8 df       	rcall	.-16     	; 0xc56 <servo_open>
	//servo_close();
	printf("Servo is up\n");
     c66:	84 e4       	ldi	r24, 0x44	; 68
     c68:	93 e0       	ldi	r25, 0x03	; 3
     c6a:	0c 94 af 27 	jmp	0x4f5e	; 0x4f5e <puts>
     c6e:	08 95       	ret

00000c70 <servo_close>:
{
	rcServoSet(0, 100);
}
void servo_close()
{
	rcServoSet(0, -100);
     c70:	6c e9       	ldi	r22, 0x9C	; 156
     c72:	80 e0       	ldi	r24, 0x00	; 0
     c74:	0c 94 80 1e 	jmp	0x3d00	; 0x3d00 <rcServoSet>
     c78:	08 95       	ret

00000c7a <trace_init>:
	 #if (configUSE_TRACE_FACILITY == 1)
	 #ifdef HAL_DEFS_H_

	 #else
		// Used on VIA MEGA Shield rev. 2.0.0
		DDRK |= _BV(DDK0) | _BV(DDK1) | _BV(DDK2) | _BV(DDK3);
     c7a:	e7 e0       	ldi	r30, 0x07	; 7
     c7c:	f1 e0       	ldi	r31, 0x01	; 1
     c7e:	80 81       	ld	r24, Z
     c80:	8f 60       	ori	r24, 0x0F	; 15
     c82:	80 83       	st	Z, r24
     c84:	08 95       	ret

00000c86 <task_switch_in>:
	void task_switch_in(uint8_t task_no) {
		 #ifdef HAL_DEFS_H_

		 #else
		 // Used on VIA MEGA Shield rev. 2.0.0
		 PORTK &= 0b11110000;
     c86:	e8 e0       	ldi	r30, 0x08	; 8
     c88:	f1 e0       	ldi	r31, 0x01	; 1
     c8a:	90 81       	ld	r25, Z
     c8c:	90 7f       	andi	r25, 0xF0	; 240
     c8e:	90 83       	st	Z, r25
		 PORTK |= (task_no & 0b00001111);
     c90:	90 81       	ld	r25, Z
     c92:	8f 70       	andi	r24, 0x0F	; 15
     c94:	98 2b       	or	r25, r24
     c96:	90 83       	st	Z, r25
     c98:	08 95       	ret

00000c9a <task_switch_out>:
	void task_switch_out(uint8_t task_no) {
		#ifdef HAL_DEFS_H_

		#else
		// Used on VIA MEGA Shield rev. 2.0.0
		PORTK &= 0b11110000;
     c9a:	e8 e0       	ldi	r30, 0x08	; 8
     c9c:	f1 e0       	ldi	r31, 0x01	; 1
     c9e:	80 81       	ld	r24, Z
     ca0:	80 7f       	andi	r24, 0xF0	; 240
     ca2:	80 83       	st	Z, r24
     ca4:	08 95       	ret

00000ca6 <xEventGroupCreate>:
        uxReturn = pxEventBits->uxEventBits;
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
     ca6:	cf 93       	push	r28
     ca8:	df 93       	push	r29
     caa:	80 e1       	ldi	r24, 0x10	; 16
     cac:	90 e0       	ldi	r25, 0x00	; 0
     cae:	b4 d1       	rcall	.+872    	; 0x1018 <pvPortMalloc>
     cb0:	ec 01       	movw	r28, r24
     cb2:	00 97       	sbiw	r24, 0x00	; 0
     cb4:	39 f0       	breq	.+14     	; 0xcc4 <xEventGroupCreate+0x1e>
     cb6:	fc 01       	movw	r30, r24
     cb8:	11 92       	st	Z+, r1
     cba:	11 92       	st	Z+, r1
     cbc:	11 92       	st	Z+, r1
     cbe:	11 92       	st	Z+, r1
     cc0:	cf 01       	movw	r24, r30
     cc2:	94 d2       	rcall	.+1320   	; 0x11ec <vListInitialise>
     cc4:	ce 01       	movw	r24, r28
     cc6:	df 91       	pop	r29
     cc8:	cf 91       	pop	r28
     cca:	08 95       	ret

00000ccc <xEventGroupWaitBits>:
     ccc:	2f 92       	push	r2
     cce:	3f 92       	push	r3
     cd0:	4f 92       	push	r4
     cd2:	5f 92       	push	r5
     cd4:	6f 92       	push	r6
     cd6:	7f 92       	push	r7
     cd8:	8f 92       	push	r8
     cda:	9f 92       	push	r9
     cdc:	af 92       	push	r10
     cde:	bf 92       	push	r11
     ce0:	cf 92       	push	r12
     ce2:	df 92       	push	r13
     ce4:	ef 92       	push	r14
     ce6:	ff 92       	push	r15
     ce8:	0f 93       	push	r16
     cea:	1f 93       	push	r17
     cec:	cf 93       	push	r28
     cee:	df 93       	push	r29
     cf0:	ec 01       	movw	r28, r24
     cf2:	4a 01       	movw	r8, r20
     cf4:	5b 01       	movw	r10, r22
     cf6:	62 2e       	mov	r6, r18
     cf8:	70 2e       	mov	r7, r16
     cfa:	0e 94 6d 12 	call	0x24da	; 0x24da <vTaskSuspendAll>
     cfe:	28 80       	ld	r2, Y
     d00:	39 80       	ldd	r3, Y+1	; 0x01
     d02:	4a 80       	ldd	r4, Y+2	; 0x02
     d04:	5b 80       	ldd	r5, Y+3	; 0x03
     d06:	01 11       	cpse	r16, r1
     d08:	0d c0       	rjmp	.+26     	; 0xd24 <xEventGroupWaitBits+0x58>
     d0a:	81 e0       	ldi	r24, 0x01	; 1
     d0c:	b2 01       	movw	r22, r4
     d0e:	a1 01       	movw	r20, r2
     d10:	48 21       	and	r20, r8
     d12:	59 21       	and	r21, r9
     d14:	6a 21       	and	r22, r10
     d16:	7b 21       	and	r23, r11
     d18:	45 2b       	or	r20, r21
     d1a:	46 2b       	or	r20, r22
     d1c:	47 2b       	or	r20, r23
     d1e:	79 f4       	brne	.+30     	; 0xd3e <xEventGroupWaitBits+0x72>
     d20:	80 e0       	ldi	r24, 0x00	; 0
     d22:	0d c0       	rjmp	.+26     	; 0xd3e <xEventGroupWaitBits+0x72>
     d24:	81 e0       	ldi	r24, 0x01	; 1
     d26:	b2 01       	movw	r22, r4
     d28:	a1 01       	movw	r20, r2
     d2a:	48 21       	and	r20, r8
     d2c:	59 21       	and	r21, r9
     d2e:	6a 21       	and	r22, r10
     d30:	7b 21       	and	r23, r11
     d32:	48 15       	cp	r20, r8
     d34:	59 05       	cpc	r21, r9
     d36:	6a 05       	cpc	r22, r10
     d38:	7b 05       	cpc	r23, r11
     d3a:	09 f0       	breq	.+2      	; 0xd3e <xEventGroupWaitBits+0x72>
     d3c:	80 e0       	ldi	r24, 0x00	; 0
     d3e:	88 23       	and	r24, r24
     d40:	81 f0       	breq	.+32     	; 0xd62 <xEventGroupWaitBits+0x96>
     d42:	66 20       	and	r6, r6
     d44:	09 f4       	brne	.+2      	; 0xd48 <xEventGroupWaitBits+0x7c>
     d46:	6b c0       	rjmp	.+214    	; 0xe1e <xEventGroupWaitBits+0x152>
     d48:	80 94       	com	r8
     d4a:	90 94       	com	r9
     d4c:	a0 94       	com	r10
     d4e:	b0 94       	com	r11
     d50:	82 20       	and	r8, r2
     d52:	93 20       	and	r9, r3
     d54:	a4 20       	and	r10, r4
     d56:	b5 20       	and	r11, r5
     d58:	88 82       	st	Y, r8
     d5a:	99 82       	std	Y+1, r9	; 0x01
     d5c:	aa 82       	std	Y+2, r10	; 0x02
     d5e:	bb 82       	std	Y+3, r11	; 0x03
     d60:	5e c0       	rjmp	.+188    	; 0xe1e <xEventGroupWaitBits+0x152>
     d62:	c1 14       	cp	r12, r1
     d64:	d1 04       	cpc	r13, r1
     d66:	e1 04       	cpc	r14, r1
     d68:	f1 04       	cpc	r15, r1
     d6a:	09 f4       	brne	.+2      	; 0xd6e <xEventGroupWaitBits+0xa2>
     d6c:	58 c0       	rjmp	.+176    	; 0xe1e <xEventGroupWaitBits+0x152>
     d6e:	66 20       	and	r6, r6
     d70:	29 f0       	breq	.+10     	; 0xd7c <xEventGroupWaitBits+0xb0>
     d72:	40 e0       	ldi	r20, 0x00	; 0
     d74:	50 e0       	ldi	r21, 0x00	; 0
     d76:	60 e0       	ldi	r22, 0x00	; 0
     d78:	71 e0       	ldi	r23, 0x01	; 1
     d7a:	03 c0       	rjmp	.+6      	; 0xd82 <xEventGroupWaitBits+0xb6>
     d7c:	40 e0       	ldi	r20, 0x00	; 0
     d7e:	50 e0       	ldi	r21, 0x00	; 0
     d80:	ba 01       	movw	r22, r20
     d82:	71 10       	cpse	r7, r1
     d84:	74 60       	ori	r23, 0x04	; 4
     d86:	48 29       	or	r20, r8
     d88:	59 29       	or	r21, r9
     d8a:	6a 29       	or	r22, r10
     d8c:	7b 29       	or	r23, r11
     d8e:	97 01       	movw	r18, r14
     d90:	86 01       	movw	r16, r12
     d92:	ce 01       	movw	r24, r28
     d94:	04 96       	adiw	r24, 0x04	; 4
     d96:	0e 94 81 14 	call	0x2902	; 0x2902 <vTaskPlaceOnUnorderedEventList>
     d9a:	0e 94 56 13 	call	0x26ac	; 0x26ac <xTaskResumeAll>
     d9e:	81 11       	cpse	r24, r1
     da0:	01 c0       	rjmp	.+2      	; 0xda4 <xEventGroupWaitBits+0xd8>
     da2:	6c d3       	rcall	.+1752   	; 0x147c <vPortYield>
     da4:	0e 94 c8 16 	call	0x2d90	; 0x2d90 <uxTaskResetEventItemValue>
     da8:	91 fd       	sbrc	r25, 1
     daa:	35 c0       	rjmp	.+106    	; 0xe16 <xEventGroupWaitBits+0x14a>
     dac:	0f b6       	in	r0, 0x3f	; 63
     dae:	f8 94       	cli
     db0:	0f 92       	push	r0
     db2:	68 81       	ld	r22, Y
     db4:	79 81       	ldd	r23, Y+1	; 0x01
     db6:	8a 81       	ldd	r24, Y+2	; 0x02
     db8:	9b 81       	ldd	r25, Y+3	; 0x03
     dba:	71 10       	cpse	r7, r1
     dbc:	0d c0       	rjmp	.+26     	; 0xdd8 <xEventGroupWaitBits+0x10c>
     dbe:	21 e0       	ldi	r18, 0x01	; 1
     dc0:	75 01       	movw	r14, r10
     dc2:	64 01       	movw	r12, r8
     dc4:	c6 22       	and	r12, r22
     dc6:	d7 22       	and	r13, r23
     dc8:	e8 22       	and	r14, r24
     dca:	f9 22       	and	r15, r25
     dcc:	cd 28       	or	r12, r13
     dce:	ce 28       	or	r12, r14
     dd0:	cf 28       	or	r12, r15
     dd2:	79 f4       	brne	.+30     	; 0xdf2 <xEventGroupWaitBits+0x126>
     dd4:	20 e0       	ldi	r18, 0x00	; 0
     dd6:	0d c0       	rjmp	.+26     	; 0xdf2 <xEventGroupWaitBits+0x126>
     dd8:	21 e0       	ldi	r18, 0x01	; 1
     dda:	75 01       	movw	r14, r10
     ddc:	64 01       	movw	r12, r8
     dde:	c6 22       	and	r12, r22
     de0:	d7 22       	and	r13, r23
     de2:	e8 22       	and	r14, r24
     de4:	f9 22       	and	r15, r25
     de6:	c8 14       	cp	r12, r8
     de8:	d9 04       	cpc	r13, r9
     dea:	ea 04       	cpc	r14, r10
     dec:	fb 04       	cpc	r15, r11
     dee:	09 f0       	breq	.+2      	; 0xdf2 <xEventGroupWaitBits+0x126>
     df0:	20 e0       	ldi	r18, 0x00	; 0
     df2:	22 23       	and	r18, r18
     df4:	71 f0       	breq	.+28     	; 0xe12 <xEventGroupWaitBits+0x146>
     df6:	66 20       	and	r6, r6
     df8:	61 f0       	breq	.+24     	; 0xe12 <xEventGroupWaitBits+0x146>
     dfa:	80 94       	com	r8
     dfc:	90 94       	com	r9
     dfe:	a0 94       	com	r10
     e00:	b0 94       	com	r11
     e02:	86 22       	and	r8, r22
     e04:	97 22       	and	r9, r23
     e06:	a8 22       	and	r10, r24
     e08:	b9 22       	and	r11, r25
     e0a:	88 82       	st	Y, r8
     e0c:	99 82       	std	Y+1, r9	; 0x01
     e0e:	aa 82       	std	Y+2, r10	; 0x02
     e10:	bb 82       	std	Y+3, r11	; 0x03
     e12:	0f 90       	pop	r0
     e14:	0f be       	out	0x3f, r0	; 63
     e16:	1b 01       	movw	r2, r22
     e18:	2c 01       	movw	r4, r24
     e1a:	55 24       	eor	r5, r5
     e1c:	02 c0       	rjmp	.+4      	; 0xe22 <xEventGroupWaitBits+0x156>
     e1e:	0e 94 56 13 	call	0x26ac	; 0x26ac <xTaskResumeAll>
     e22:	c2 01       	movw	r24, r4
     e24:	b1 01       	movw	r22, r2
     e26:	df 91       	pop	r29
     e28:	cf 91       	pop	r28
     e2a:	1f 91       	pop	r17
     e2c:	0f 91       	pop	r16
     e2e:	ff 90       	pop	r15
     e30:	ef 90       	pop	r14
     e32:	df 90       	pop	r13
     e34:	cf 90       	pop	r12
     e36:	bf 90       	pop	r11
     e38:	af 90       	pop	r10
     e3a:	9f 90       	pop	r9
     e3c:	8f 90       	pop	r8
     e3e:	7f 90       	pop	r7
     e40:	6f 90       	pop	r6
     e42:	5f 90       	pop	r5
     e44:	4f 90       	pop	r4
     e46:	3f 90       	pop	r3
     e48:	2f 90       	pop	r2
     e4a:	08 95       	ret

00000e4c <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
     e4c:	4f 92       	push	r4
     e4e:	5f 92       	push	r5
     e50:	6f 92       	push	r6
     e52:	7f 92       	push	r7
     e54:	8f 92       	push	r8
     e56:	9f 92       	push	r9
     e58:	af 92       	push	r10
     e5a:	bf 92       	push	r11
     e5c:	cf 92       	push	r12
     e5e:	df 92       	push	r13
     e60:	ef 92       	push	r14
     e62:	ff 92       	push	r15
     e64:	0f 93       	push	r16
     e66:	1f 93       	push	r17
     e68:	cf 93       	push	r28
     e6a:	df 93       	push	r29
     e6c:	ec 01       	movw	r28, r24
     e6e:	6a 01       	movw	r12, r20
     e70:	7b 01       	movw	r14, r22
    itself. */
    configASSERT( xEventGroup );
    configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

    pxList = &( pxEventBits->xTasksWaitingForBits );
    pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     e72:	8c 01       	movw	r16, r24
     e74:	09 5f       	subi	r16, 0xF9	; 249
     e76:	1f 4f       	sbci	r17, 0xFF	; 255
    vTaskSuspendAll();
     e78:	0e 94 6d 12 	call	0x24da	; 0x24da <vTaskSuspendAll>
    {
        traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

        pxListItem = listGET_HEAD_ENTRY( pxList );
     e7c:	eb 85       	ldd	r30, Y+11	; 0x0b
     e7e:	fc 85       	ldd	r31, Y+12	; 0x0c

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;
     e80:	88 81       	ld	r24, Y
     e82:	99 81       	ldd	r25, Y+1	; 0x01
     e84:	aa 81       	ldd	r26, Y+2	; 0x02
     e86:	bb 81       	ldd	r27, Y+3	; 0x03
     e88:	c8 2a       	or	r12, r24
     e8a:	d9 2a       	or	r13, r25
     e8c:	ea 2a       	or	r14, r26
     e8e:	fb 2a       	or	r15, r27
     e90:	c8 82       	st	Y, r12
     e92:	d9 82       	std	Y+1, r13	; 0x01
     e94:	ea 82       	std	Y+2, r14	; 0x02
     e96:	fb 82       	std	Y+3, r15	; 0x03

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     e98:	0e 17       	cp	r16, r30
     e9a:	1f 07       	cpc	r17, r31
     e9c:	09 f4       	brne	.+2      	; 0xea0 <xEventGroupSetBits+0x54>
     e9e:	45 c0       	rjmp	.+138    	; 0xf2a <xEventGroupSetBits+0xde>
     ea0:	c1 2c       	mov	r12, r1
     ea2:	d1 2c       	mov	r13, r1
     ea4:	76 01       	movw	r14, r12
            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
                {
                    xMatchFound = pdTRUE;
     ea6:	99 24       	eor	r9, r9
     ea8:	93 94       	inc	r9
     eaa:	81 2c       	mov	r8, r1
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
     eac:	a4 80       	ldd	r10, Z+4	; 0x04
     eae:	b5 80       	ldd	r11, Z+5	; 0x05
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
     eb0:	80 81       	ld	r24, Z
     eb2:	91 81       	ldd	r25, Z+1	; 0x01
     eb4:	a2 81       	ldd	r26, Z+2	; 0x02
     eb6:	b3 81       	ldd	r27, Z+3	; 0x03
            xMatchFound = pdFALSE;

            /* Split the bits waited for from the control bits. */
            uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
            uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
     eb8:	ac 01       	movw	r20, r24
     eba:	bd 01       	movw	r22, r26
     ebc:	77 27       	eor	r23, r23

            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
     ebe:	b2 fd       	sbrc	r27, 2
     ec0:	0f c0       	rjmp	.+30     	; 0xee0 <xEventGroupSetBits+0x94>
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
                {
                    xMatchFound = pdTRUE;
     ec2:	48 80       	ld	r4, Y
     ec4:	59 80       	ldd	r5, Y+1	; 0x01
     ec6:	6a 80       	ldd	r6, Y+2	; 0x02
     ec8:	7b 80       	ldd	r7, Y+3	; 0x03
     eca:	44 22       	and	r4, r20
     ecc:	55 22       	and	r5, r21
     ece:	66 22       	and	r6, r22
     ed0:	77 22       	and	r7, r23
     ed2:	29 2d       	mov	r18, r9
     ed4:	45 28       	or	r4, r5
     ed6:	46 28       	or	r4, r6
     ed8:	47 28       	or	r4, r7
     eda:	89 f4       	brne	.+34     	; 0xefe <xEventGroupSetBits+0xb2>
     edc:	28 2d       	mov	r18, r8
     ede:	0f c0       	rjmp	.+30     	; 0xefe <xEventGroupSetBits+0xb2>
     ee0:	48 80       	ld	r4, Y
     ee2:	59 80       	ldd	r5, Y+1	; 0x01
     ee4:	6a 80       	ldd	r6, Y+2	; 0x02
     ee6:	7b 80       	ldd	r7, Y+3	; 0x03
     ee8:	44 22       	and	r4, r20
     eea:	55 22       	and	r5, r21
     eec:	66 22       	and	r6, r22
     eee:	77 22       	and	r7, r23
     ef0:	29 2d       	mov	r18, r9
     ef2:	44 16       	cp	r4, r20
     ef4:	55 06       	cpc	r5, r21
     ef6:	66 06       	cpc	r6, r22
     ef8:	77 06       	cpc	r7, r23
     efa:	09 f0       	breq	.+2      	; 0xefe <xEventGroupSetBits+0xb2>
     efc:	28 2d       	mov	r18, r8
            else
            {
                /* Need all bits to be set, but not all the bits were set. */
            }

            if( xMatchFound != pdFALSE )
     efe:	22 23       	and	r18, r18
     f00:	71 f0       	breq	.+28     	; 0xf1e <xEventGroupSetBits+0xd2>
            {
                /* The bits match.  Should the bits be cleared on exit? */
                if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
     f02:	b0 ff       	sbrs	r27, 0
     f04:	04 c0       	rjmp	.+8      	; 0xf0e <xEventGroupSetBits+0xc2>
                {
                    uxBitsToClear |= uxBitsWaitedFor;
     f06:	c4 2a       	or	r12, r20
     f08:	d5 2a       	or	r13, r21
     f0a:	e6 2a       	or	r14, r22
     f0c:	f7 2a       	or	r15, r23
                /* Store the actual event flag value in the task's event list
                item before removing the task from the event list.  The
                eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                that is was unblocked due to its required bits matching, rather
                than because it timed out. */
                vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
     f0e:	48 81       	ld	r20, Y
     f10:	59 81       	ldd	r21, Y+1	; 0x01
     f12:	6a 81       	ldd	r22, Y+2	; 0x02
     f14:	7b 81       	ldd	r23, Y+3	; 0x03
     f16:	72 60       	ori	r23, 0x02	; 2
     f18:	cf 01       	movw	r24, r30
     f1a:	0e 94 07 15 	call	0x2a0e	; 0x2a0e <vTaskRemoveFromUnorderedEventList>
     f1e:	ea 2d       	mov	r30, r10
     f20:	fb 2d       	mov	r31, r11

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     f22:	0e 17       	cp	r16, r30
     f24:	1f 07       	cpc	r17, r31
     f26:	11 f6       	brne	.-124    	; 0xeac <xEventGroupSetBits+0x60>
     f28:	03 c0       	rjmp	.+6      	; 0xf30 <xEventGroupSetBits+0xe4>
EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
     f2a:	c1 2c       	mov	r12, r1
     f2c:	d1 2c       	mov	r13, r1
     f2e:	76 01       	movw	r14, r12
            pxListItem = pxNext;
        }

        /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
        bit was set in the control word. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
     f30:	c0 94       	com	r12
     f32:	d0 94       	com	r13
     f34:	e0 94       	com	r14
     f36:	f0 94       	com	r15
     f38:	88 81       	ld	r24, Y
     f3a:	99 81       	ldd	r25, Y+1	; 0x01
     f3c:	aa 81       	ldd	r26, Y+2	; 0x02
     f3e:	bb 81       	ldd	r27, Y+3	; 0x03
     f40:	c8 22       	and	r12, r24
     f42:	d9 22       	and	r13, r25
     f44:	ea 22       	and	r14, r26
     f46:	fb 22       	and	r15, r27
     f48:	c8 82       	st	Y, r12
     f4a:	d9 82       	std	Y+1, r13	; 0x01
     f4c:	ea 82       	std	Y+2, r14	; 0x02
     f4e:	fb 82       	std	Y+3, r15	; 0x03
    }
    ( void ) xTaskResumeAll();
     f50:	0e 94 56 13 	call	0x26ac	; 0x26ac <xTaskResumeAll>

    return pxEventBits->uxEventBits;
     f54:	68 81       	ld	r22, Y
     f56:	79 81       	ldd	r23, Y+1	; 0x01
     f58:	8a 81       	ldd	r24, Y+2	; 0x02
     f5a:	9b 81       	ldd	r25, Y+3	; 0x03
}
     f5c:	df 91       	pop	r29
     f5e:	cf 91       	pop	r28
     f60:	1f 91       	pop	r17
     f62:	0f 91       	pop	r16
     f64:	ff 90       	pop	r15
     f66:	ef 90       	pop	r14
     f68:	df 90       	pop	r13
     f6a:	cf 90       	pop	r12
     f6c:	bf 90       	pop	r11
     f6e:	af 90       	pop	r10
     f70:	9f 90       	pop	r9
     f72:	8f 90       	pop	r8
     f74:	7f 90       	pop	r7
     f76:	6f 90       	pop	r6
     f78:	5f 90       	pop	r5
     f7a:	4f 90       	pop	r4
     f7c:	08 95       	ret

00000f7e <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
     f7e:	cf 93       	push	r28
     f80:	df 93       	push	r29
     f82:	dc 01       	movw	r26, r24
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     f84:	e2 ec       	ldi	r30, 0xC2	; 194
     f86:	f3 e0       	ldi	r31, 0x03	; 3
     f88:	01 c0       	rjmp	.+2      	; 0xf8c <prvInsertBlockIntoFreeList+0xe>
     f8a:	f9 01       	movw	r30, r18
     f8c:	20 81       	ld	r18, Z
     f8e:	31 81       	ldd	r19, Z+1	; 0x01
     f90:	2a 17       	cp	r18, r26
     f92:	3b 07       	cpc	r19, r27
     f94:	d0 f3       	brcs	.-12     	; 0xf8a <prvInsertBlockIntoFreeList+0xc>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     f96:	82 81       	ldd	r24, Z+2	; 0x02
     f98:	93 81       	ldd	r25, Z+3	; 0x03
     f9a:	af 01       	movw	r20, r30
     f9c:	48 0f       	add	r20, r24
     f9e:	59 1f       	adc	r21, r25
     fa0:	a4 17       	cp	r26, r20
     fa2:	b5 07       	cpc	r27, r21
     fa4:	49 f4       	brne	.+18     	; 0xfb8 <prvInsertBlockIntoFreeList+0x3a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     fa6:	12 96       	adiw	r26, 0x02	; 2
     fa8:	4d 91       	ld	r20, X+
     faa:	5c 91       	ld	r21, X
     fac:	13 97       	sbiw	r26, 0x03	; 3
     fae:	84 0f       	add	r24, r20
     fb0:	95 1f       	adc	r25, r21
     fb2:	93 83       	std	Z+3, r25	; 0x03
     fb4:	82 83       	std	Z+2, r24	; 0x02
     fb6:	df 01       	movw	r26, r30
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     fb8:	12 96       	adiw	r26, 0x02	; 2
     fba:	8d 91       	ld	r24, X+
     fbc:	9c 91       	ld	r25, X
     fbe:	13 97       	sbiw	r26, 0x03	; 3
     fc0:	ed 01       	movw	r28, r26
     fc2:	c8 0f       	add	r28, r24
     fc4:	d9 1f       	adc	r29, r25
     fc6:	2c 17       	cp	r18, r28
     fc8:	3d 07       	cpc	r19, r29
     fca:	d9 f4       	brne	.+54     	; 0x1002 <prvInsertBlockIntoFreeList+0x84>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
     fcc:	20 91 c0 03 	lds	r18, 0x03C0	; 0x8003c0 <pxEnd>
     fd0:	30 91 c1 03 	lds	r19, 0x03C1	; 0x8003c1 <pxEnd+0x1>
     fd4:	c2 17       	cp	r28, r18
     fd6:	d3 07       	cpc	r29, r19
     fd8:	81 f0       	breq	.+32     	; 0xffa <prvInsertBlockIntoFreeList+0x7c>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     fda:	2a 81       	ldd	r18, Y+2	; 0x02
     fdc:	3b 81       	ldd	r19, Y+3	; 0x03
     fde:	82 0f       	add	r24, r18
     fe0:	93 1f       	adc	r25, r19
     fe2:	13 96       	adiw	r26, 0x03	; 3
     fe4:	9c 93       	st	X, r25
     fe6:	8e 93       	st	-X, r24
     fe8:	12 97       	sbiw	r26, 0x02	; 2
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     fea:	c0 81       	ld	r28, Z
     fec:	d1 81       	ldd	r29, Z+1	; 0x01
     fee:	88 81       	ld	r24, Y
     ff0:	99 81       	ldd	r25, Y+1	; 0x01
     ff2:	11 96       	adiw	r26, 0x01	; 1
     ff4:	9c 93       	st	X, r25
     ff6:	8e 93       	st	-X, r24
     ff8:	07 c0       	rjmp	.+14     	; 0x1008 <prvInsertBlockIntoFreeList+0x8a>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
     ffa:	11 96       	adiw	r26, 0x01	; 1
     ffc:	dc 93       	st	X, r29
     ffe:	ce 93       	st	-X, r28
    1000:	03 c0       	rjmp	.+6      	; 0x1008 <prvInsertBlockIntoFreeList+0x8a>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
    1002:	11 96       	adiw	r26, 0x01	; 1
    1004:	3c 93       	st	X, r19
    1006:	2e 93       	st	-X, r18

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
    1008:	ae 17       	cp	r26, r30
    100a:	bf 07       	cpc	r27, r31
    100c:	11 f0       	breq	.+4      	; 0x1012 <prvInsertBlockIntoFreeList+0x94>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
    100e:	b1 83       	std	Z+1, r27	; 0x01
    1010:	a0 83       	st	Z, r26
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    1012:	df 91       	pop	r29
    1014:	cf 91       	pop	r28
    1016:	08 95       	ret

00001018 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    1018:	cf 92       	push	r12
    101a:	df 92       	push	r13
    101c:	ef 92       	push	r14
    101e:	ff 92       	push	r15
    1020:	0f 93       	push	r16
    1022:	1f 93       	push	r17
    1024:	cf 93       	push	r28
    1026:	df 93       	push	r29
    1028:	ec 01       	movw	r28, r24
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
    102a:	0e 94 6d 12 	call	0x24da	; 0x24da <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
    102e:	80 91 c0 03 	lds	r24, 0x03C0	; 0x8003c0 <pxEnd>
    1032:	90 91 c1 03 	lds	r25, 0x03C1	; 0x8003c1 <pxEnd+0x1>
    1036:	89 2b       	or	r24, r25
    1038:	41 f5       	brne	.+80     	; 0x108a <pvPortMalloc+0x72>

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
    103a:	e2 ec       	ldi	r30, 0xC2	; 194
    103c:	f3 e0       	ldi	r31, 0x03	; 3
    103e:	a6 ec       	ldi	r26, 0xC6	; 198
    1040:	b3 e0       	ldi	r27, 0x03	; 3
    1042:	b1 83       	std	Z+1, r27	; 0x01
    1044:	a0 83       	st	Z, r26
	xStart.xBlockSize = ( size_t ) 0;
    1046:	13 82       	std	Z+3, r1	; 0x03
    1048:	12 82       	std	Z+2, r1	; 0x02
	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
	uxAddress -= xHeapStructSize;
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
	pxEnd = ( void * ) uxAddress;
    104a:	e2 e6       	ldi	r30, 0x62	; 98
    104c:	f3 e1       	ldi	r31, 0x13	; 19
    104e:	f0 93 c1 03 	sts	0x03C1, r31	; 0x8003c1 <pxEnd+0x1>
    1052:	e0 93 c0 03 	sts	0x03C0, r30	; 0x8003c0 <pxEnd>
	pxEnd->xBlockSize = 0;
    1056:	13 82       	std	Z+3, r1	; 0x03
    1058:	12 82       	std	Z+2, r1	; 0x02
	pxEnd->pxNextFreeBlock = NULL;
    105a:	11 82       	std	Z+1, r1	; 0x01
    105c:	10 82       	st	Z, r1

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
    105e:	8c e9       	ldi	r24, 0x9C	; 156
    1060:	9f e0       	ldi	r25, 0x0F	; 15
    1062:	13 96       	adiw	r26, 0x03	; 3
    1064:	9c 93       	st	X, r25
    1066:	8e 93       	st	-X, r24
    1068:	12 97       	sbiw	r26, 0x02	; 2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
    106a:	ed 93       	st	X+, r30
    106c:	fc 93       	st	X, r31

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
    106e:	90 93 bd 03 	sts	0x03BD, r25	; 0x8003bd <xMinimumEverFreeBytesRemaining+0x1>
    1072:	80 93 bc 03 	sts	0x03BC, r24	; 0x8003bc <xMinimumEverFreeBytesRemaining>
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
    1076:	90 93 bf 03 	sts	0x03BF, r25	; 0x8003bf <xFreeBytesRemaining+0x1>
    107a:	80 93 be 03 	sts	0x03BE, r24	; 0x8003be <xFreeBytesRemaining>

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
    107e:	80 e0       	ldi	r24, 0x00	; 0
    1080:	90 e8       	ldi	r25, 0x80	; 128
    1082:	90 93 bb 03 	sts	0x03BB, r25	; 0x8003bb <xBlockAllocatedBit+0x1>
    1086:	80 93 ba 03 	sts	0x03BA, r24	; 0x8003ba <xBlockAllocatedBit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
    108a:	e0 90 ba 03 	lds	r14, 0x03BA	; 0x8003ba <xBlockAllocatedBit>
    108e:	f0 90 bb 03 	lds	r15, 0x03BB	; 0x8003bb <xBlockAllocatedBit+0x1>
    1092:	c7 01       	movw	r24, r14
    1094:	8c 23       	and	r24, r28
    1096:	9d 23       	and	r25, r29
    1098:	89 2b       	or	r24, r25
    109a:	09 f0       	breq	.+2      	; 0x109e <pvPortMalloc+0x86>
    109c:	66 c0       	rjmp	.+204    	; 0x116a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
    109e:	20 97       	sbiw	r28, 0x00	; 0
    10a0:	09 f4       	brne	.+2      	; 0x10a4 <pvPortMalloc+0x8c>
    10a2:	66 c0       	rjmp	.+204    	; 0x1170 <pvPortMalloc+0x158>
			{
				xWantedSize += xHeapStructSize;
    10a4:	ae 01       	movw	r20, r28
    10a6:	4c 5f       	subi	r20, 0xFC	; 252
    10a8:	5f 4f       	sbci	r21, 0xFF	; 255
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
    10aa:	09 f4       	brne	.+2      	; 0x10ae <pvPortMalloc+0x96>
    10ac:	5e c0       	rjmp	.+188    	; 0x116a <pvPortMalloc+0x152>
    10ae:	00 91 be 03 	lds	r16, 0x03BE	; 0x8003be <xFreeBytesRemaining>
    10b2:	10 91 bf 03 	lds	r17, 0x03BF	; 0x8003bf <xFreeBytesRemaining+0x1>
    10b6:	04 17       	cp	r16, r20
    10b8:	15 07       	cpc	r17, r21
    10ba:	08 f4       	brcc	.+2      	; 0x10be <pvPortMalloc+0xa6>
    10bc:	56 c0       	rjmp	.+172    	; 0x116a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
    10be:	c0 91 c2 03 	lds	r28, 0x03C2	; 0x8003c2 <xStart>
    10c2:	d0 91 c3 03 	lds	r29, 0x03C3	; 0x8003c3 <xStart+0x1>

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
    10c6:	e2 ec       	ldi	r30, 0xC2	; 194
    10c8:	f3 e0       	ldi	r31, 0x03	; 3
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    10ca:	02 c0       	rjmp	.+4      	; 0x10d0 <pvPortMalloc+0xb8>
    10cc:	fe 01       	movw	r30, r28
				{
					pxPreviousBlock = pxBlock;
					pxBlock = pxBlock->pxNextFreeBlock;
    10ce:	e9 01       	movw	r28, r18
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    10d0:	2a 81       	ldd	r18, Y+2	; 0x02
    10d2:	3b 81       	ldd	r19, Y+3	; 0x03
    10d4:	24 17       	cp	r18, r20
    10d6:	35 07       	cpc	r19, r21
    10d8:	28 f4       	brcc	.+10     	; 0x10e4 <pvPortMalloc+0xcc>
    10da:	28 81       	ld	r18, Y
    10dc:	39 81       	ldd	r19, Y+1	; 0x01
    10de:	21 15       	cp	r18, r1
    10e0:	31 05       	cpc	r19, r1
    10e2:	a1 f7       	brne	.-24     	; 0x10cc <pvPortMalloc+0xb4>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
    10e4:	80 91 c0 03 	lds	r24, 0x03C0	; 0x8003c0 <pxEnd>
    10e8:	90 91 c1 03 	lds	r25, 0x03C1	; 0x8003c1 <pxEnd+0x1>
    10ec:	c8 17       	cp	r28, r24
    10ee:	d9 07       	cpc	r29, r25
    10f0:	e1 f1       	breq	.+120    	; 0x116a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
    10f2:	c0 80       	ld	r12, Z
    10f4:	d1 80       	ldd	r13, Z+1	; 0x01
    10f6:	84 e0       	ldi	r24, 0x04	; 4
    10f8:	c8 0e       	add	r12, r24
    10fa:	d1 1c       	adc	r13, r1

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    10fc:	88 81       	ld	r24, Y
    10fe:	99 81       	ldd	r25, Y+1	; 0x01
    1100:	91 83       	std	Z+1, r25	; 0x01
    1102:	80 83       	st	Z, r24

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    1104:	2a 81       	ldd	r18, Y+2	; 0x02
    1106:	3b 81       	ldd	r19, Y+3	; 0x03
    1108:	24 1b       	sub	r18, r20
    110a:	35 0b       	sbc	r19, r21
    110c:	29 30       	cpi	r18, 0x09	; 9
    110e:	31 05       	cpc	r19, r1
    1110:	48 f0       	brcs	.+18     	; 0x1124 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
    1112:	ce 01       	movw	r24, r28
    1114:	84 0f       	add	r24, r20
    1116:	95 1f       	adc	r25, r21
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    1118:	fc 01       	movw	r30, r24
    111a:	33 83       	std	Z+3, r19	; 0x03
    111c:	22 83       	std	Z+2, r18	; 0x02
						pxBlock->xBlockSize = xWantedSize;
    111e:	5b 83       	std	Y+3, r21	; 0x03
    1120:	4a 83       	std	Y+2, r20	; 0x02

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
    1122:	2d df       	rcall	.-422    	; 0xf7e <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
    1124:	8a 81       	ldd	r24, Y+2	; 0x02
    1126:	9b 81       	ldd	r25, Y+3	; 0x03
    1128:	08 1b       	sub	r16, r24
    112a:	19 0b       	sbc	r17, r25
    112c:	10 93 bf 03 	sts	0x03BF, r17	; 0x8003bf <xFreeBytesRemaining+0x1>
    1130:	00 93 be 03 	sts	0x03BE, r16	; 0x8003be <xFreeBytesRemaining>

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
    1134:	20 91 bc 03 	lds	r18, 0x03BC	; 0x8003bc <xMinimumEverFreeBytesRemaining>
    1138:	30 91 bd 03 	lds	r19, 0x03BD	; 0x8003bd <xMinimumEverFreeBytesRemaining+0x1>
    113c:	02 17       	cp	r16, r18
    113e:	13 07       	cpc	r17, r19
    1140:	20 f4       	brcc	.+8      	; 0x114a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
    1142:	10 93 bd 03 	sts	0x03BD, r17	; 0x8003bd <xMinimumEverFreeBytesRemaining+0x1>
    1146:	00 93 bc 03 	sts	0x03BC, r16	; 0x8003bc <xMinimumEverFreeBytesRemaining>
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
    114a:	e8 2a       	or	r14, r24
    114c:	f9 2a       	or	r15, r25
    114e:	fb 82       	std	Y+3, r15	; 0x03
    1150:	ea 82       	std	Y+2, r14	; 0x02
					pxBlock->pxNextFreeBlock = NULL;
    1152:	19 82       	std	Y+1, r1	; 0x01
    1154:	18 82       	st	Y, r1
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    1156:	0e 94 56 13 	call	0x26ac	; 0x26ac <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
    115a:	c1 14       	cp	r12, r1
    115c:	d1 04       	cpc	r13, r1
    115e:	59 f4       	brne	.+22     	; 0x1176 <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
    1160:	0e 94 29 1a 	call	0x3452	; 0x3452 <vApplicationMallocFailedHook>
    1164:	c1 2c       	mov	r12, r1
    1166:	d1 2c       	mov	r13, r1
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
    1168:	06 c0       	rjmp	.+12     	; 0x1176 <pvPortMalloc+0x15e>
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    116a:	0e 94 56 13 	call	0x26ac	; 0x26ac <xTaskResumeAll>
    116e:	f8 cf       	rjmp	.-16     	; 0x1160 <pvPortMalloc+0x148>
    1170:	0e 94 56 13 	call	0x26ac	; 0x26ac <xTaskResumeAll>
    1174:	f5 cf       	rjmp	.-22     	; 0x1160 <pvPortMalloc+0x148>
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
}
    1176:	c6 01       	movw	r24, r12
    1178:	df 91       	pop	r29
    117a:	cf 91       	pop	r28
    117c:	1f 91       	pop	r17
    117e:	0f 91       	pop	r16
    1180:	ff 90       	pop	r15
    1182:	ef 90       	pop	r14
    1184:	df 90       	pop	r13
    1186:	cf 90       	pop	r12
    1188:	08 95       	ret

0000118a <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    118a:	cf 93       	push	r28
    118c:	df 93       	push	r29
uint8_t *puc = ( uint8_t * ) pv;
BlockLink_t *pxLink;

	if( pv != NULL )
    118e:	00 97       	sbiw	r24, 0x00	; 0
    1190:	51 f1       	breq	.+84     	; 0x11e6 <vPortFree+0x5c>

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
		configASSERT( pxLink->pxNextFreeBlock == NULL );

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
    1192:	fc 01       	movw	r30, r24
    1194:	34 97       	sbiw	r30, 0x04	; 4
    1196:	22 81       	ldd	r18, Z+2	; 0x02
    1198:	33 81       	ldd	r19, Z+3	; 0x03
    119a:	40 91 ba 03 	lds	r20, 0x03BA	; 0x8003ba <xBlockAllocatedBit>
    119e:	50 91 bb 03 	lds	r21, 0x03BB	; 0x8003bb <xBlockAllocatedBit+0x1>
    11a2:	b9 01       	movw	r22, r18
    11a4:	64 23       	and	r22, r20
    11a6:	75 23       	and	r23, r21
    11a8:	67 2b       	or	r22, r23
    11aa:	e9 f0       	breq	.+58     	; 0x11e6 <vPortFree+0x5c>
		{
			if( pxLink->pxNextFreeBlock == NULL )
    11ac:	60 81       	ld	r22, Z
    11ae:	71 81       	ldd	r23, Z+1	; 0x01
    11b0:	67 2b       	or	r22, r23
    11b2:	c9 f4       	brne	.+50     	; 0x11e6 <vPortFree+0x5c>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
    11b4:	ef 01       	movw	r28, r30
    11b6:	40 95       	com	r20
    11b8:	50 95       	com	r21
    11ba:	24 23       	and	r18, r20
    11bc:	35 23       	and	r19, r21
    11be:	33 83       	std	Z+3, r19	; 0x03
    11c0:	22 83       	std	Z+2, r18	; 0x02

				vTaskSuspendAll();
    11c2:	0e 94 6d 12 	call	0x24da	; 0x24da <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
    11c6:	20 91 be 03 	lds	r18, 0x03BE	; 0x8003be <xFreeBytesRemaining>
    11ca:	30 91 bf 03 	lds	r19, 0x03BF	; 0x8003bf <xFreeBytesRemaining+0x1>
    11ce:	8a 81       	ldd	r24, Y+2	; 0x02
    11d0:	9b 81       	ldd	r25, Y+3	; 0x03
    11d2:	82 0f       	add	r24, r18
    11d4:	93 1f       	adc	r25, r19
    11d6:	90 93 bf 03 	sts	0x03BF, r25	; 0x8003bf <xFreeBytesRemaining+0x1>
    11da:	80 93 be 03 	sts	0x03BE, r24	; 0x8003be <xFreeBytesRemaining>
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
    11de:	ce 01       	movw	r24, r28
    11e0:	ce de       	rcall	.-612    	; 0xf7e <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
    11e2:	0e 94 56 13 	call	0x26ac	; 0x26ac <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
    11e6:	df 91       	pop	r29
    11e8:	cf 91       	pop	r28
    11ea:	08 95       	ret

000011ec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    11ec:	fc 01       	movw	r30, r24
    /* The list structure contains a list item which is used to mark the
    end of the list.  To initialise the list the list end is inserted
    as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );            /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    11ee:	03 96       	adiw	r24, 0x03	; 3
    11f0:	92 83       	std	Z+2, r25	; 0x02
    11f2:	81 83       	std	Z+1, r24	; 0x01

    /* The list end value is the highest possible value in the list to
    ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
    11f4:	4f ef       	ldi	r20, 0xFF	; 255
    11f6:	5f ef       	ldi	r21, 0xFF	; 255
    11f8:	ba 01       	movw	r22, r20
    11fa:	43 83       	std	Z+3, r20	; 0x03
    11fc:	54 83       	std	Z+4, r21	; 0x04
    11fe:	65 83       	std	Z+5, r22	; 0x05
    1200:	76 83       	std	Z+6, r23	; 0x06

    /* The list end next and previous pointers point to itself so we know
    when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );    /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1202:	90 87       	std	Z+8, r25	; 0x08
    1204:	87 83       	std	Z+7, r24	; 0x07
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1206:	92 87       	std	Z+10, r25	; 0x0a
    1208:	81 87       	std	Z+9, r24	; 0x09

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    120a:	10 82       	st	Z, r1
    120c:	08 95       	ret

0000120e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
    120e:	fc 01       	movw	r30, r24
    1210:	13 86       	std	Z+11, r1	; 0x0b
    1212:	12 86       	std	Z+10, r1	; 0x0a
    1214:	08 95       	ret

00001216 <vListInsertEnd>:
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    1216:	cf 93       	push	r28
    1218:	df 93       	push	r29
    121a:	9c 01       	movw	r18, r24
    121c:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
    121e:	dc 01       	movw	r26, r24
    1220:	11 96       	adiw	r26, 0x01	; 1
    1222:	cd 91       	ld	r28, X+
    1224:	dc 91       	ld	r29, X
    1226:	12 97       	sbiw	r26, 0x02	; 2
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
    makes the new list item the last item to be removed by a call to
    listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
    1228:	d5 83       	std	Z+5, r29	; 0x05
    122a:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    122c:	8e 81       	ldd	r24, Y+6	; 0x06
    122e:	9f 81       	ldd	r25, Y+7	; 0x07
    1230:	97 83       	std	Z+7, r25	; 0x07
    1232:	86 83       	std	Z+6, r24	; 0x06

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
    1234:	8e 81       	ldd	r24, Y+6	; 0x06
    1236:	9f 81       	ldd	r25, Y+7	; 0x07
    1238:	dc 01       	movw	r26, r24
    123a:	15 96       	adiw	r26, 0x05	; 5
    123c:	7c 93       	st	X, r23
    123e:	6e 93       	st	-X, r22
    1240:	14 97       	sbiw	r26, 0x04	; 4
    pxIndex->pxPrevious = pxNewListItem;
    1242:	7f 83       	std	Y+7, r23	; 0x07
    1244:	6e 83       	std	Y+6, r22	; 0x06

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
    1246:	33 87       	std	Z+11, r19	; 0x0b
    1248:	22 87       	std	Z+10, r18	; 0x0a

    ( pxList->uxNumberOfItems )++;
    124a:	f9 01       	movw	r30, r18
    124c:	80 81       	ld	r24, Z
    124e:	8f 5f       	subi	r24, 0xFF	; 255
    1250:	80 83       	st	Z, r24
}
    1252:	df 91       	pop	r29
    1254:	cf 91       	pop	r28
    1256:	08 95       	ret

00001258 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    1258:	0f 93       	push	r16
    125a:	1f 93       	push	r17
    125c:	cf 93       	push	r28
    125e:	df 93       	push	r29
    1260:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    1262:	08 81       	ld	r16, Y
    1264:	19 81       	ldd	r17, Y+1	; 0x01
    1266:	2a 81       	ldd	r18, Y+2	; 0x02
    1268:	3b 81       	ldd	r19, Y+3	; 0x03
    new list item should be placed after it.  This ensures that TCBs which are
    stored in ready lists (all of which have the same xItemValue value) get a
    share of the CPU.  However, if the xItemValue is the same as the back marker
    the iteration loop below will not end.  Therefore the value is checked
    first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
    126a:	0f 3f       	cpi	r16, 0xFF	; 255
    126c:	4f ef       	ldi	r20, 0xFF	; 255
    126e:	14 07       	cpc	r17, r20
    1270:	24 07       	cpc	r18, r20
    1272:	34 07       	cpc	r19, r20
    1274:	21 f4       	brne	.+8      	; 0x127e <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
    1276:	fc 01       	movw	r30, r24
    1278:	a1 85       	ldd	r26, Z+9	; 0x09
    127a:	b2 85       	ldd	r27, Z+10	; 0x0a
    127c:	11 c0       	rjmp	.+34     	; 0x12a0 <vListInsert+0x48>
            4) Using a queue or semaphore before it has been initialised or
               before the scheduler has been started (are interrupts firing
               before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
    127e:	dc 01       	movw	r26, r24
    1280:	13 96       	adiw	r26, 0x03	; 3
    1282:	01 c0       	rjmp	.+2      	; 0x1286 <vListInsert+0x2e>
    1284:	df 01       	movw	r26, r30
    1286:	14 96       	adiw	r26, 0x04	; 4
    1288:	ed 91       	ld	r30, X+
    128a:	fc 91       	ld	r31, X
    128c:	15 97       	sbiw	r26, 0x05	; 5
    128e:	40 81       	ld	r20, Z
    1290:	51 81       	ldd	r21, Z+1	; 0x01
    1292:	62 81       	ldd	r22, Z+2	; 0x02
    1294:	73 81       	ldd	r23, Z+3	; 0x03
    1296:	04 17       	cp	r16, r20
    1298:	15 07       	cpc	r17, r21
    129a:	26 07       	cpc	r18, r22
    129c:	37 07       	cpc	r19, r23
    129e:	90 f7       	brcc	.-28     	; 0x1284 <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
            insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
    12a0:	14 96       	adiw	r26, 0x04	; 4
    12a2:	ed 91       	ld	r30, X+
    12a4:	fc 91       	ld	r31, X
    12a6:	15 97       	sbiw	r26, 0x05	; 5
    12a8:	fd 83       	std	Y+5, r31	; 0x05
    12aa:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    12ac:	d7 83       	std	Z+7, r29	; 0x07
    12ae:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
    12b0:	bf 83       	std	Y+7, r27	; 0x07
    12b2:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
    12b4:	15 96       	adiw	r26, 0x05	; 5
    12b6:	dc 93       	st	X, r29
    12b8:	ce 93       	st	-X, r28
    12ba:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
    item later. */
    pxNewListItem->pxContainer = pxList;
    12bc:	9b 87       	std	Y+11, r25	; 0x0b
    12be:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
    12c0:	fc 01       	movw	r30, r24
    12c2:	20 81       	ld	r18, Z
    12c4:	2f 5f       	subi	r18, 0xFF	; 255
    12c6:	20 83       	st	Z, r18
}
    12c8:	df 91       	pop	r29
    12ca:	cf 91       	pop	r28
    12cc:	1f 91       	pop	r17
    12ce:	0f 91       	pop	r16
    12d0:	08 95       	ret

000012d2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    12d2:	cf 93       	push	r28
    12d4:	df 93       	push	r29
    12d6:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
    12d8:	a2 85       	ldd	r26, Z+10	; 0x0a
    12da:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    12dc:	c4 81       	ldd	r28, Z+4	; 0x04
    12de:	d5 81       	ldd	r29, Z+5	; 0x05
    12e0:	86 81       	ldd	r24, Z+6	; 0x06
    12e2:	97 81       	ldd	r25, Z+7	; 0x07
    12e4:	9f 83       	std	Y+7, r25	; 0x07
    12e6:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    12e8:	c6 81       	ldd	r28, Z+6	; 0x06
    12ea:	d7 81       	ldd	r29, Z+7	; 0x07
    12ec:	84 81       	ldd	r24, Z+4	; 0x04
    12ee:	95 81       	ldd	r25, Z+5	; 0x05
    12f0:	9d 83       	std	Y+5, r25	; 0x05
    12f2:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
    12f4:	11 96       	adiw	r26, 0x01	; 1
    12f6:	8d 91       	ld	r24, X+
    12f8:	9c 91       	ld	r25, X
    12fa:	12 97       	sbiw	r26, 0x02	; 2
    12fc:	e8 17       	cp	r30, r24
    12fe:	f9 07       	cpc	r31, r25
    1300:	31 f4       	brne	.+12     	; 0x130e <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
    1302:	86 81       	ldd	r24, Z+6	; 0x06
    1304:	97 81       	ldd	r25, Z+7	; 0x07
    1306:	12 96       	adiw	r26, 0x02	; 2
    1308:	9c 93       	st	X, r25
    130a:	8e 93       	st	-X, r24
    130c:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
    130e:	13 86       	std	Z+11, r1	; 0x0b
    1310:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
    1312:	8c 91       	ld	r24, X
    1314:	81 50       	subi	r24, 0x01	; 1
    1316:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
    1318:	8c 91       	ld	r24, X
}
    131a:	df 91       	pop	r29
    131c:	cf 91       	pop	r28
    131e:	08 95       	ret

00001320 <pxPortInitialiseStack>:
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    1320:	31 e1       	ldi	r19, 0x11	; 17
    1322:	fc 01       	movw	r30, r24
    1324:	30 83       	st	Z, r19
    1326:	31 97       	sbiw	r30, 0x01	; 1
    1328:	22 e2       	ldi	r18, 0x22	; 34
    132a:	20 83       	st	Z, r18
    132c:	31 97       	sbiw	r30, 0x01	; 1
    132e:	a3 e3       	ldi	r26, 0x33	; 51
    1330:	a0 83       	st	Z, r26
    1332:	31 97       	sbiw	r30, 0x01	; 1
    1334:	60 83       	st	Z, r22
    1336:	31 97       	sbiw	r30, 0x01	; 1
    1338:	70 83       	st	Z, r23
    133a:	31 97       	sbiw	r30, 0x01	; 1
    133c:	10 82       	st	Z, r1
    133e:	31 97       	sbiw	r30, 0x01	; 1
    1340:	10 82       	st	Z, r1
    1342:	31 97       	sbiw	r30, 0x01	; 1
    1344:	60 e8       	ldi	r22, 0x80	; 128
    1346:	60 83       	st	Z, r22
    1348:	31 97       	sbiw	r30, 0x01	; 1
    134a:	10 82       	st	Z, r1
    134c:	31 97       	sbiw	r30, 0x01	; 1
    134e:	10 82       	st	Z, r1
    1350:	31 97       	sbiw	r30, 0x01	; 1
    1352:	10 82       	st	Z, r1
    1354:	31 97       	sbiw	r30, 0x01	; 1
    1356:	62 e0       	ldi	r22, 0x02	; 2
    1358:	60 83       	st	Z, r22
    135a:	31 97       	sbiw	r30, 0x01	; 1
    135c:	63 e0       	ldi	r22, 0x03	; 3
    135e:	60 83       	st	Z, r22
    1360:	31 97       	sbiw	r30, 0x01	; 1
    1362:	64 e0       	ldi	r22, 0x04	; 4
    1364:	60 83       	st	Z, r22
    1366:	31 97       	sbiw	r30, 0x01	; 1
    1368:	65 e0       	ldi	r22, 0x05	; 5
    136a:	60 83       	st	Z, r22
    136c:	31 97       	sbiw	r30, 0x01	; 1
    136e:	66 e0       	ldi	r22, 0x06	; 6
    1370:	60 83       	st	Z, r22
    1372:	31 97       	sbiw	r30, 0x01	; 1
    1374:	67 e0       	ldi	r22, 0x07	; 7
    1376:	60 83       	st	Z, r22
    1378:	31 97       	sbiw	r30, 0x01	; 1
    137a:	68 e0       	ldi	r22, 0x08	; 8
    137c:	60 83       	st	Z, r22
    137e:	31 97       	sbiw	r30, 0x01	; 1
    1380:	69 e0       	ldi	r22, 0x09	; 9
    1382:	60 83       	st	Z, r22
    1384:	31 97       	sbiw	r30, 0x01	; 1
    1386:	60 e1       	ldi	r22, 0x10	; 16
    1388:	60 83       	st	Z, r22
    138a:	31 97       	sbiw	r30, 0x01	; 1
    138c:	30 83       	st	Z, r19
    138e:	31 97       	sbiw	r30, 0x01	; 1
    1390:	32 e1       	ldi	r19, 0x12	; 18
    1392:	30 83       	st	Z, r19
    1394:	31 97       	sbiw	r30, 0x01	; 1
    1396:	33 e1       	ldi	r19, 0x13	; 19
    1398:	30 83       	st	Z, r19
    139a:	31 97       	sbiw	r30, 0x01	; 1
    139c:	34 e1       	ldi	r19, 0x14	; 20
    139e:	30 83       	st	Z, r19
    13a0:	31 97       	sbiw	r30, 0x01	; 1
    13a2:	35 e1       	ldi	r19, 0x15	; 21
    13a4:	30 83       	st	Z, r19
    13a6:	31 97       	sbiw	r30, 0x01	; 1
    13a8:	36 e1       	ldi	r19, 0x16	; 22
    13aa:	30 83       	st	Z, r19
    13ac:	31 97       	sbiw	r30, 0x01	; 1
    13ae:	37 e1       	ldi	r19, 0x17	; 23
    13b0:	30 83       	st	Z, r19
    13b2:	31 97       	sbiw	r30, 0x01	; 1
    13b4:	38 e1       	ldi	r19, 0x18	; 24
    13b6:	30 83       	st	Z, r19
    13b8:	31 97       	sbiw	r30, 0x01	; 1
    13ba:	39 e1       	ldi	r19, 0x19	; 25
    13bc:	30 83       	st	Z, r19
    13be:	31 97       	sbiw	r30, 0x01	; 1
    13c0:	30 e2       	ldi	r19, 0x20	; 32
    13c2:	30 83       	st	Z, r19
    13c4:	31 97       	sbiw	r30, 0x01	; 1
    13c6:	31 e2       	ldi	r19, 0x21	; 33
    13c8:	30 83       	st	Z, r19
    13ca:	31 97       	sbiw	r30, 0x01	; 1
    13cc:	20 83       	st	Z, r18
    13ce:	31 97       	sbiw	r30, 0x01	; 1
    13d0:	23 e2       	ldi	r18, 0x23	; 35
    13d2:	20 83       	st	Z, r18
    13d4:	31 97       	sbiw	r30, 0x01	; 1
    13d6:	40 83       	st	Z, r20
    13d8:	31 97       	sbiw	r30, 0x01	; 1
    13da:	50 83       	st	Z, r21
    13dc:	31 97       	sbiw	r30, 0x01	; 1
    13de:	26 e2       	ldi	r18, 0x26	; 38
    13e0:	20 83       	st	Z, r18
    13e2:	31 97       	sbiw	r30, 0x01	; 1
    13e4:	27 e2       	ldi	r18, 0x27	; 39
    13e6:	20 83       	st	Z, r18
    13e8:	31 97       	sbiw	r30, 0x01	; 1
    13ea:	28 e2       	ldi	r18, 0x28	; 40
    13ec:	20 83       	st	Z, r18
    13ee:	31 97       	sbiw	r30, 0x01	; 1
    13f0:	29 e2       	ldi	r18, 0x29	; 41
    13f2:	20 83       	st	Z, r18
    13f4:	31 97       	sbiw	r30, 0x01	; 1
    13f6:	20 e3       	ldi	r18, 0x30	; 48
    13f8:	20 83       	st	Z, r18
    13fa:	31 97       	sbiw	r30, 0x01	; 1
    13fc:	21 e3       	ldi	r18, 0x31	; 49
    13fe:	20 83       	st	Z, r18
    1400:	89 97       	sbiw	r24, 0x29	; 41
    1402:	08 95       	ret

00001404 <xPortStartScheduler>:
    1404:	a8 95       	wdr
    1406:	90 ec       	ldi	r25, 0xC0	; 192
    1408:	88 e1       	ldi	r24, 0x18	; 24
    140a:	0f b6       	in	r0, 0x3f	; 63
    140c:	f8 94       	cli
    140e:	a8 95       	wdr
    1410:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    1414:	0f be       	out	0x3f, r0	; 63
    1416:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    141a:	a0 91 e0 13 	lds	r26, 0x13E0	; 0x8013e0 <pxCurrentTCB>
    141e:	b0 91 e1 13 	lds	r27, 0x13E1	; 0x8013e1 <pxCurrentTCB+0x1>
    1422:	cd 91       	ld	r28, X+
    1424:	cd bf       	out	0x3d, r28	; 61
    1426:	dd 91       	ld	r29, X+
    1428:	de bf       	out	0x3e, r29	; 62
    142a:	ff 91       	pop	r31
    142c:	ef 91       	pop	r30
    142e:	df 91       	pop	r29
    1430:	cf 91       	pop	r28
    1432:	bf 91       	pop	r27
    1434:	af 91       	pop	r26
    1436:	9f 91       	pop	r25
    1438:	8f 91       	pop	r24
    143a:	7f 91       	pop	r23
    143c:	6f 91       	pop	r22
    143e:	5f 91       	pop	r21
    1440:	4f 91       	pop	r20
    1442:	3f 91       	pop	r19
    1444:	2f 91       	pop	r18
    1446:	1f 91       	pop	r17
    1448:	0f 91       	pop	r16
    144a:	ff 90       	pop	r15
    144c:	ef 90       	pop	r14
    144e:	df 90       	pop	r13
    1450:	cf 90       	pop	r12
    1452:	bf 90       	pop	r11
    1454:	af 90       	pop	r10
    1456:	9f 90       	pop	r9
    1458:	8f 90       	pop	r8
    145a:	7f 90       	pop	r7
    145c:	6f 90       	pop	r6
    145e:	5f 90       	pop	r5
    1460:	4f 90       	pop	r4
    1462:	3f 90       	pop	r3
    1464:	2f 90       	pop	r2
    1466:	1f 90       	pop	r1
    1468:	0f 90       	pop	r0
    146a:	0c be       	out	0x3c, r0	; 60
    146c:	0f 90       	pop	r0
    146e:	0b be       	out	0x3b, r0	; 59
    1470:	0f 90       	pop	r0
    1472:	0f be       	out	0x3f, r0	; 63
    1474:	0f 90       	pop	r0
    1476:	08 95       	ret
    1478:	81 e0       	ldi	r24, 0x01	; 1
    147a:	08 95       	ret

0000147c <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYield( void )
{
    portSAVE_CONTEXT();
    147c:	0f 92       	push	r0
    147e:	0f b6       	in	r0, 0x3f	; 63
    1480:	f8 94       	cli
    1482:	0f 92       	push	r0
    1484:	0b b6       	in	r0, 0x3b	; 59
    1486:	0f 92       	push	r0
    1488:	0c b6       	in	r0, 0x3c	; 60
    148a:	0f 92       	push	r0
    148c:	1f 92       	push	r1
    148e:	11 24       	eor	r1, r1
    1490:	2f 92       	push	r2
    1492:	3f 92       	push	r3
    1494:	4f 92       	push	r4
    1496:	5f 92       	push	r5
    1498:	6f 92       	push	r6
    149a:	7f 92       	push	r7
    149c:	8f 92       	push	r8
    149e:	9f 92       	push	r9
    14a0:	af 92       	push	r10
    14a2:	bf 92       	push	r11
    14a4:	cf 92       	push	r12
    14a6:	df 92       	push	r13
    14a8:	ef 92       	push	r14
    14aa:	ff 92       	push	r15
    14ac:	0f 93       	push	r16
    14ae:	1f 93       	push	r17
    14b0:	2f 93       	push	r18
    14b2:	3f 93       	push	r19
    14b4:	4f 93       	push	r20
    14b6:	5f 93       	push	r21
    14b8:	6f 93       	push	r22
    14ba:	7f 93       	push	r23
    14bc:	8f 93       	push	r24
    14be:	9f 93       	push	r25
    14c0:	af 93       	push	r26
    14c2:	bf 93       	push	r27
    14c4:	cf 93       	push	r28
    14c6:	df 93       	push	r29
    14c8:	ef 93       	push	r30
    14ca:	ff 93       	push	r31
    14cc:	a0 91 e0 13 	lds	r26, 0x13E0	; 0x8013e0 <pxCurrentTCB>
    14d0:	b0 91 e1 13 	lds	r27, 0x13E1	; 0x8013e1 <pxCurrentTCB+0x1>
    14d4:	0d b6       	in	r0, 0x3d	; 61
    14d6:	0d 92       	st	X+, r0
    14d8:	0e b6       	in	r0, 0x3e	; 62
    14da:	0d 92       	st	X+, r0
    vTaskSwitchContext();
    14dc:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <vTaskSwitchContext>
    portRESTORE_CONTEXT();
    14e0:	a0 91 e0 13 	lds	r26, 0x13E0	; 0x8013e0 <pxCurrentTCB>
    14e4:	b0 91 e1 13 	lds	r27, 0x13E1	; 0x8013e1 <pxCurrentTCB+0x1>
    14e8:	cd 91       	ld	r28, X+
    14ea:	cd bf       	out	0x3d, r28	; 61
    14ec:	dd 91       	ld	r29, X+
    14ee:	de bf       	out	0x3e, r29	; 62
    14f0:	ff 91       	pop	r31
    14f2:	ef 91       	pop	r30
    14f4:	df 91       	pop	r29
    14f6:	cf 91       	pop	r28
    14f8:	bf 91       	pop	r27
    14fa:	af 91       	pop	r26
    14fc:	9f 91       	pop	r25
    14fe:	8f 91       	pop	r24
    1500:	7f 91       	pop	r23
    1502:	6f 91       	pop	r22
    1504:	5f 91       	pop	r21
    1506:	4f 91       	pop	r20
    1508:	3f 91       	pop	r19
    150a:	2f 91       	pop	r18
    150c:	1f 91       	pop	r17
    150e:	0f 91       	pop	r16
    1510:	ff 90       	pop	r15
    1512:	ef 90       	pop	r14
    1514:	df 90       	pop	r13
    1516:	cf 90       	pop	r12
    1518:	bf 90       	pop	r11
    151a:	af 90       	pop	r10
    151c:	9f 90       	pop	r9
    151e:	8f 90       	pop	r8
    1520:	7f 90       	pop	r7
    1522:	6f 90       	pop	r6
    1524:	5f 90       	pop	r5
    1526:	4f 90       	pop	r4
    1528:	3f 90       	pop	r3
    152a:	2f 90       	pop	r2
    152c:	1f 90       	pop	r1
    152e:	0f 90       	pop	r0
    1530:	0c be       	out	0x3c, r0	; 60
    1532:	0f 90       	pop	r0
    1534:	0b be       	out	0x3b, r0	; 59
    1536:	0f 90       	pop	r0
    1538:	0f be       	out	0x3f, r0	; 63
    153a:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
    153c:	08 95       	ret

0000153e <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
    153e:	0f 92       	push	r0
    1540:	0f b6       	in	r0, 0x3f	; 63
    1542:	f8 94       	cli
    1544:	0f 92       	push	r0
    1546:	0b b6       	in	r0, 0x3b	; 59
    1548:	0f 92       	push	r0
    154a:	0c b6       	in	r0, 0x3c	; 60
    154c:	0f 92       	push	r0
    154e:	1f 92       	push	r1
    1550:	11 24       	eor	r1, r1
    1552:	2f 92       	push	r2
    1554:	3f 92       	push	r3
    1556:	4f 92       	push	r4
    1558:	5f 92       	push	r5
    155a:	6f 92       	push	r6
    155c:	7f 92       	push	r7
    155e:	8f 92       	push	r8
    1560:	9f 92       	push	r9
    1562:	af 92       	push	r10
    1564:	bf 92       	push	r11
    1566:	cf 92       	push	r12
    1568:	df 92       	push	r13
    156a:	ef 92       	push	r14
    156c:	ff 92       	push	r15
    156e:	0f 93       	push	r16
    1570:	1f 93       	push	r17
    1572:	2f 93       	push	r18
    1574:	3f 93       	push	r19
    1576:	4f 93       	push	r20
    1578:	5f 93       	push	r21
    157a:	6f 93       	push	r22
    157c:	7f 93       	push	r23
    157e:	8f 93       	push	r24
    1580:	9f 93       	push	r25
    1582:	af 93       	push	r26
    1584:	bf 93       	push	r27
    1586:	cf 93       	push	r28
    1588:	df 93       	push	r29
    158a:	ef 93       	push	r30
    158c:	ff 93       	push	r31
    158e:	a0 91 e0 13 	lds	r26, 0x13E0	; 0x8013e0 <pxCurrentTCB>
    1592:	b0 91 e1 13 	lds	r27, 0x13E1	; 0x8013e1 <pxCurrentTCB+0x1>
    1596:	0d b6       	in	r0, 0x3d	; 61
    1598:	0d 92       	st	X+, r0
    159a:	0e b6       	in	r0, 0x3e	; 62
    159c:	0d 92       	st	X+, r0

    sleep_reset();        //     reset the sleep_mode() faster than sleep_disable();
    159e:	13 be       	out	0x33, r1	; 51

    if( xTaskIncrementTick() != pdFALSE )
    15a0:	b0 d7       	rcall	.+3936   	; 0x2502 <xTaskIncrementTick>
    15a2:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
    15a4:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <vTaskSwitchContext>
    }

    portRESTORE_CONTEXT();
    15a8:	a0 91 e0 13 	lds	r26, 0x13E0	; 0x8013e0 <pxCurrentTCB>
    15ac:	b0 91 e1 13 	lds	r27, 0x13E1	; 0x8013e1 <pxCurrentTCB+0x1>
    15b0:	cd 91       	ld	r28, X+
    15b2:	cd bf       	out	0x3d, r28	; 61
    15b4:	dd 91       	ld	r29, X+
    15b6:	de bf       	out	0x3e, r29	; 62
    15b8:	ff 91       	pop	r31
    15ba:	ef 91       	pop	r30
    15bc:	df 91       	pop	r29
    15be:	cf 91       	pop	r28
    15c0:	bf 91       	pop	r27
    15c2:	af 91       	pop	r26
    15c4:	9f 91       	pop	r25
    15c6:	8f 91       	pop	r24
    15c8:	7f 91       	pop	r23
    15ca:	6f 91       	pop	r22
    15cc:	5f 91       	pop	r21
    15ce:	4f 91       	pop	r20
    15d0:	3f 91       	pop	r19
    15d2:	2f 91       	pop	r18
    15d4:	1f 91       	pop	r17
    15d6:	0f 91       	pop	r16
    15d8:	ff 90       	pop	r15
    15da:	ef 90       	pop	r14
    15dc:	df 90       	pop	r13
    15de:	cf 90       	pop	r12
    15e0:	bf 90       	pop	r11
    15e2:	af 90       	pop	r10
    15e4:	9f 90       	pop	r9
    15e6:	8f 90       	pop	r8
    15e8:	7f 90       	pop	r7
    15ea:	6f 90       	pop	r6
    15ec:	5f 90       	pop	r5
    15ee:	4f 90       	pop	r4
    15f0:	3f 90       	pop	r3
    15f2:	2f 90       	pop	r2
    15f4:	1f 90       	pop	r1
    15f6:	0f 90       	pop	r0
    15f8:	0c be       	out	0x3c, r0	; 60
    15fa:	0f 90       	pop	r0
    15fc:	0b be       	out	0x3b, r0	; 59
    15fe:	0f 90       	pop	r0
    1600:	0f be       	out	0x3f, r0	; 63
    1602:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
    1604:	08 95       	ret

00001606 <__vector_12>:
     */
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
//  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
    1606:	9b df       	rcall	.-202    	; 0x153e <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
    1608:	18 95       	reti

0000160a <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    160a:	0f b6       	in	r0, 0x3f	; 63
    160c:	f8 94       	cli
    160e:	0f 92       	push	r0
    1610:	fc 01       	movw	r30, r24
    1612:	96 8d       	ldd	r25, Z+30	; 0x1e
    1614:	0f 90       	pop	r0
    1616:	0f be       	out	0x3f, r0	; 63
    1618:	81 e0       	ldi	r24, 0x01	; 1
    161a:	91 11       	cpse	r25, r1
    161c:	80 e0       	ldi	r24, 0x00	; 0
    161e:	08 95       	ret

00001620 <prvCopyDataToQueue>:
    1620:	0f 93       	push	r16
    1622:	1f 93       	push	r17
    1624:	cf 93       	push	r28
    1626:	df 93       	push	r29
    1628:	ec 01       	movw	r28, r24
    162a:	04 2f       	mov	r16, r20
    162c:	1e 8d       	ldd	r17, Y+30	; 0x1e
    162e:	48 a1       	ldd	r20, Y+32	; 0x20
    1630:	41 11       	cpse	r20, r1
    1632:	0c c0       	rjmp	.+24     	; 0x164c <prvCopyDataToQueue+0x2c>
    1634:	88 81       	ld	r24, Y
    1636:	99 81       	ldd	r25, Y+1	; 0x01
    1638:	89 2b       	or	r24, r25
    163a:	09 f0       	breq	.+2      	; 0x163e <prvCopyDataToQueue+0x1e>
    163c:	42 c0       	rjmp	.+132    	; 0x16c2 <prvCopyDataToQueue+0xa2>
    163e:	8c 81       	ldd	r24, Y+4	; 0x04
    1640:	9d 81       	ldd	r25, Y+5	; 0x05
    1642:	0e 94 3c 16 	call	0x2c78	; 0x2c78 <xTaskPriorityDisinherit>
    1646:	1d 82       	std	Y+5, r1	; 0x05
    1648:	1c 82       	std	Y+4, r1	; 0x04
    164a:	42 c0       	rjmp	.+132    	; 0x16d0 <prvCopyDataToQueue+0xb0>
    164c:	01 11       	cpse	r16, r1
    164e:	17 c0       	rjmp	.+46     	; 0x167e <prvCopyDataToQueue+0x5e>
    1650:	50 e0       	ldi	r21, 0x00	; 0
    1652:	8a 81       	ldd	r24, Y+2	; 0x02
    1654:	9b 81       	ldd	r25, Y+3	; 0x03
    1656:	0e 94 8c 27 	call	0x4f18	; 0x4f18 <memcpy>
    165a:	28 a1       	ldd	r18, Y+32	; 0x20
    165c:	8a 81       	ldd	r24, Y+2	; 0x02
    165e:	9b 81       	ldd	r25, Y+3	; 0x03
    1660:	82 0f       	add	r24, r18
    1662:	91 1d       	adc	r25, r1
    1664:	9b 83       	std	Y+3, r25	; 0x03
    1666:	8a 83       	std	Y+2, r24	; 0x02
    1668:	2c 81       	ldd	r18, Y+4	; 0x04
    166a:	3d 81       	ldd	r19, Y+5	; 0x05
    166c:	82 17       	cp	r24, r18
    166e:	93 07       	cpc	r25, r19
    1670:	50 f1       	brcs	.+84     	; 0x16c6 <prvCopyDataToQueue+0xa6>
    1672:	88 81       	ld	r24, Y
    1674:	99 81       	ldd	r25, Y+1	; 0x01
    1676:	9b 83       	std	Y+3, r25	; 0x03
    1678:	8a 83       	std	Y+2, r24	; 0x02
    167a:	80 e0       	ldi	r24, 0x00	; 0
    167c:	29 c0       	rjmp	.+82     	; 0x16d0 <prvCopyDataToQueue+0xb0>
    167e:	50 e0       	ldi	r21, 0x00	; 0
    1680:	8e 81       	ldd	r24, Y+6	; 0x06
    1682:	9f 81       	ldd	r25, Y+7	; 0x07
    1684:	0e 94 8c 27 	call	0x4f18	; 0x4f18 <memcpy>
    1688:	88 a1       	ldd	r24, Y+32	; 0x20
    168a:	90 e0       	ldi	r25, 0x00	; 0
    168c:	91 95       	neg	r25
    168e:	81 95       	neg	r24
    1690:	91 09       	sbc	r25, r1
    1692:	2e 81       	ldd	r18, Y+6	; 0x06
    1694:	3f 81       	ldd	r19, Y+7	; 0x07
    1696:	28 0f       	add	r18, r24
    1698:	39 1f       	adc	r19, r25
    169a:	3f 83       	std	Y+7, r19	; 0x07
    169c:	2e 83       	std	Y+6, r18	; 0x06
    169e:	48 81       	ld	r20, Y
    16a0:	59 81       	ldd	r21, Y+1	; 0x01
    16a2:	24 17       	cp	r18, r20
    16a4:	35 07       	cpc	r19, r21
    16a6:	30 f4       	brcc	.+12     	; 0x16b4 <prvCopyDataToQueue+0x94>
    16a8:	2c 81       	ldd	r18, Y+4	; 0x04
    16aa:	3d 81       	ldd	r19, Y+5	; 0x05
    16ac:	82 0f       	add	r24, r18
    16ae:	93 1f       	adc	r25, r19
    16b0:	9f 83       	std	Y+7, r25	; 0x07
    16b2:	8e 83       	std	Y+6, r24	; 0x06
    16b4:	02 30       	cpi	r16, 0x02	; 2
    16b6:	49 f4       	brne	.+18     	; 0x16ca <prvCopyDataToQueue+0xaa>
    16b8:	11 23       	and	r17, r17
    16ba:	49 f0       	breq	.+18     	; 0x16ce <prvCopyDataToQueue+0xae>
    16bc:	11 50       	subi	r17, 0x01	; 1
    16be:	80 e0       	ldi	r24, 0x00	; 0
    16c0:	07 c0       	rjmp	.+14     	; 0x16d0 <prvCopyDataToQueue+0xb0>
    16c2:	80 e0       	ldi	r24, 0x00	; 0
    16c4:	05 c0       	rjmp	.+10     	; 0x16d0 <prvCopyDataToQueue+0xb0>
    16c6:	80 e0       	ldi	r24, 0x00	; 0
    16c8:	03 c0       	rjmp	.+6      	; 0x16d0 <prvCopyDataToQueue+0xb0>
    16ca:	80 e0       	ldi	r24, 0x00	; 0
    16cc:	01 c0       	rjmp	.+2      	; 0x16d0 <prvCopyDataToQueue+0xb0>
    16ce:	80 e0       	ldi	r24, 0x00	; 0
    16d0:	1f 5f       	subi	r17, 0xFF	; 255
    16d2:	1e 8f       	std	Y+30, r17	; 0x1e
    16d4:	df 91       	pop	r29
    16d6:	cf 91       	pop	r28
    16d8:	1f 91       	pop	r17
    16da:	0f 91       	pop	r16
    16dc:	08 95       	ret

000016de <prvCopyDataFromQueue>:
    16de:	fc 01       	movw	r30, r24
    16e0:	40 a1       	ldd	r20, Z+32	; 0x20
    16e2:	44 23       	and	r20, r20
    16e4:	a9 f0       	breq	.+42     	; 0x1710 <prvCopyDataFromQueue+0x32>
    16e6:	50 e0       	ldi	r21, 0x00	; 0
    16e8:	26 81       	ldd	r18, Z+6	; 0x06
    16ea:	37 81       	ldd	r19, Z+7	; 0x07
    16ec:	24 0f       	add	r18, r20
    16ee:	35 1f       	adc	r19, r21
    16f0:	37 83       	std	Z+7, r19	; 0x07
    16f2:	26 83       	std	Z+6, r18	; 0x06
    16f4:	84 81       	ldd	r24, Z+4	; 0x04
    16f6:	95 81       	ldd	r25, Z+5	; 0x05
    16f8:	28 17       	cp	r18, r24
    16fa:	39 07       	cpc	r19, r25
    16fc:	20 f0       	brcs	.+8      	; 0x1706 <prvCopyDataFromQueue+0x28>
    16fe:	80 81       	ld	r24, Z
    1700:	91 81       	ldd	r25, Z+1	; 0x01
    1702:	97 83       	std	Z+7, r25	; 0x07
    1704:	86 83       	std	Z+6, r24	; 0x06
    1706:	cb 01       	movw	r24, r22
    1708:	66 81       	ldd	r22, Z+6	; 0x06
    170a:	77 81       	ldd	r23, Z+7	; 0x07
    170c:	0c 94 8c 27 	jmp	0x4f18	; 0x4f18 <memcpy>
    1710:	08 95       	ret

00001712 <prvUnlockQueue>:
    1712:	ef 92       	push	r14
    1714:	ff 92       	push	r15
    1716:	0f 93       	push	r16
    1718:	1f 93       	push	r17
    171a:	cf 93       	push	r28
    171c:	8c 01       	movw	r16, r24
    171e:	0f b6       	in	r0, 0x3f	; 63
    1720:	f8 94       	cli
    1722:	0f 92       	push	r0
    1724:	fc 01       	movw	r30, r24
    1726:	c2 a1       	ldd	r28, Z+34	; 0x22
    1728:	1c 16       	cp	r1, r28
    172a:	ac f4       	brge	.+42     	; 0x1756 <prvUnlockQueue+0x44>
    172c:	83 89       	ldd	r24, Z+19	; 0x13
    172e:	81 11       	cpse	r24, r1
    1730:	06 c0       	rjmp	.+12     	; 0x173e <prvUnlockQueue+0x2c>
    1732:	11 c0       	rjmp	.+34     	; 0x1756 <prvUnlockQueue+0x44>
    1734:	f8 01       	movw	r30, r16
    1736:	83 89       	ldd	r24, Z+19	; 0x13
    1738:	81 11       	cpse	r24, r1
    173a:	05 c0       	rjmp	.+10     	; 0x1746 <prvUnlockQueue+0x34>
    173c:	0c c0       	rjmp	.+24     	; 0x1756 <prvUnlockQueue+0x44>
    173e:	78 01       	movw	r14, r16
    1740:	f3 e1       	ldi	r31, 0x13	; 19
    1742:	ef 0e       	add	r14, r31
    1744:	f1 1c       	adc	r15, r1
    1746:	c7 01       	movw	r24, r14
    1748:	0e 94 c5 14 	call	0x298a	; 0x298a <xTaskRemoveFromEventList>
    174c:	81 11       	cpse	r24, r1
    174e:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <vTaskMissedYield>
    1752:	c1 50       	subi	r28, 0x01	; 1
    1754:	79 f7       	brne	.-34     	; 0x1734 <prvUnlockQueue+0x22>
    1756:	8f ef       	ldi	r24, 0xFF	; 255
    1758:	f8 01       	movw	r30, r16
    175a:	82 a3       	std	Z+34, r24	; 0x22
    175c:	0f 90       	pop	r0
    175e:	0f be       	out	0x3f, r0	; 63
    1760:	0f b6       	in	r0, 0x3f	; 63
    1762:	f8 94       	cli
    1764:	0f 92       	push	r0
    1766:	c1 a1       	ldd	r28, Z+33	; 0x21
    1768:	1c 16       	cp	r1, r28
    176a:	ac f4       	brge	.+42     	; 0x1796 <prvUnlockQueue+0x84>
    176c:	80 85       	ldd	r24, Z+8	; 0x08
    176e:	81 11       	cpse	r24, r1
    1770:	06 c0       	rjmp	.+12     	; 0x177e <prvUnlockQueue+0x6c>
    1772:	11 c0       	rjmp	.+34     	; 0x1796 <prvUnlockQueue+0x84>
    1774:	f8 01       	movw	r30, r16
    1776:	80 85       	ldd	r24, Z+8	; 0x08
    1778:	81 11       	cpse	r24, r1
    177a:	05 c0       	rjmp	.+10     	; 0x1786 <prvUnlockQueue+0x74>
    177c:	0c c0       	rjmp	.+24     	; 0x1796 <prvUnlockQueue+0x84>
    177e:	78 01       	movw	r14, r16
    1780:	f8 e0       	ldi	r31, 0x08	; 8
    1782:	ef 0e       	add	r14, r31
    1784:	f1 1c       	adc	r15, r1
    1786:	c7 01       	movw	r24, r14
    1788:	0e 94 c5 14 	call	0x298a	; 0x298a <xTaskRemoveFromEventList>
    178c:	81 11       	cpse	r24, r1
    178e:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <vTaskMissedYield>
    1792:	c1 50       	subi	r28, 0x01	; 1
    1794:	79 f7       	brne	.-34     	; 0x1774 <prvUnlockQueue+0x62>
    1796:	8f ef       	ldi	r24, 0xFF	; 255
    1798:	f8 01       	movw	r30, r16
    179a:	81 a3       	std	Z+33, r24	; 0x21
    179c:	0f 90       	pop	r0
    179e:	0f be       	out	0x3f, r0	; 63
    17a0:	cf 91       	pop	r28
    17a2:	1f 91       	pop	r17
    17a4:	0f 91       	pop	r16
    17a6:	ff 90       	pop	r15
    17a8:	ef 90       	pop	r14
    17aa:	08 95       	ret

000017ac <xQueueGenericReset>:
    17ac:	cf 93       	push	r28
    17ae:	df 93       	push	r29
    17b0:	ec 01       	movw	r28, r24
    17b2:	0f b6       	in	r0, 0x3f	; 63
    17b4:	f8 94       	cli
    17b6:	0f 92       	push	r0
    17b8:	e8 81       	ld	r30, Y
    17ba:	f9 81       	ldd	r31, Y+1	; 0x01
    17bc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    17be:	28 a1       	ldd	r18, Y+32	; 0x20
    17c0:	90 e0       	ldi	r25, 0x00	; 0
    17c2:	30 e0       	ldi	r19, 0x00	; 0
    17c4:	82 9f       	mul	r24, r18
    17c6:	a0 01       	movw	r20, r0
    17c8:	83 9f       	mul	r24, r19
    17ca:	50 0d       	add	r21, r0
    17cc:	92 9f       	mul	r25, r18
    17ce:	50 0d       	add	r21, r0
    17d0:	11 24       	eor	r1, r1
    17d2:	4e 0f       	add	r20, r30
    17d4:	5f 1f       	adc	r21, r31
    17d6:	5d 83       	std	Y+5, r21	; 0x05
    17d8:	4c 83       	std	Y+4, r20	; 0x04
    17da:	1e 8e       	std	Y+30, r1	; 0x1e
    17dc:	fb 83       	std	Y+3, r31	; 0x03
    17de:	ea 83       	std	Y+2, r30	; 0x02
    17e0:	01 97       	sbiw	r24, 0x01	; 1
    17e2:	82 9f       	mul	r24, r18
    17e4:	a0 01       	movw	r20, r0
    17e6:	83 9f       	mul	r24, r19
    17e8:	50 0d       	add	r21, r0
    17ea:	92 9f       	mul	r25, r18
    17ec:	50 0d       	add	r21, r0
    17ee:	11 24       	eor	r1, r1
    17f0:	cf 01       	movw	r24, r30
    17f2:	84 0f       	add	r24, r20
    17f4:	95 1f       	adc	r25, r21
    17f6:	9f 83       	std	Y+7, r25	; 0x07
    17f8:	8e 83       	std	Y+6, r24	; 0x06
    17fa:	8f ef       	ldi	r24, 0xFF	; 255
    17fc:	89 a3       	std	Y+33, r24	; 0x21
    17fe:	8a a3       	std	Y+34, r24	; 0x22
    1800:	61 11       	cpse	r22, r1
    1802:	0b c0       	rjmp	.+22     	; 0x181a <xQueueGenericReset+0x6e>
    1804:	88 85       	ldd	r24, Y+8	; 0x08
    1806:	88 23       	and	r24, r24
    1808:	71 f0       	breq	.+28     	; 0x1826 <xQueueGenericReset+0x7a>
    180a:	ce 01       	movw	r24, r28
    180c:	08 96       	adiw	r24, 0x08	; 8
    180e:	0e 94 c5 14 	call	0x298a	; 0x298a <xTaskRemoveFromEventList>
    1812:	88 23       	and	r24, r24
    1814:	41 f0       	breq	.+16     	; 0x1826 <xQueueGenericReset+0x7a>
    1816:	32 de       	rcall	.-924    	; 0x147c <vPortYield>
    1818:	06 c0       	rjmp	.+12     	; 0x1826 <xQueueGenericReset+0x7a>
    181a:	ce 01       	movw	r24, r28
    181c:	08 96       	adiw	r24, 0x08	; 8
    181e:	e6 dc       	rcall	.-1588   	; 0x11ec <vListInitialise>
    1820:	ce 01       	movw	r24, r28
    1822:	43 96       	adiw	r24, 0x13	; 19
    1824:	e3 dc       	rcall	.-1594   	; 0x11ec <vListInitialise>
    1826:	0f 90       	pop	r0
    1828:	0f be       	out	0x3f, r0	; 63
    182a:	81 e0       	ldi	r24, 0x01	; 1
    182c:	df 91       	pop	r29
    182e:	cf 91       	pop	r28
    1830:	08 95       	ret

00001832 <xQueueGenericCreate>:
    1832:	ff 92       	push	r15
    1834:	0f 93       	push	r16
    1836:	1f 93       	push	r17
    1838:	cf 93       	push	r28
    183a:	df 93       	push	r29
    183c:	08 2f       	mov	r16, r24
    183e:	16 2f       	mov	r17, r22
    1840:	f4 2e       	mov	r15, r20
    1842:	66 23       	and	r22, r22
    1844:	b9 f0       	breq	.+46     	; 0x1874 <xQueueGenericCreate+0x42>
    1846:	86 9f       	mul	r24, r22
    1848:	c0 01       	movw	r24, r0
    184a:	11 24       	eor	r1, r1
    184c:	85 96       	adiw	r24, 0x25	; 37
    184e:	e4 db       	rcall	.-2104   	; 0x1018 <pvPortMalloc>
    1850:	ec 01       	movw	r28, r24
    1852:	00 97       	sbiw	r24, 0x00	; 0
    1854:	41 f4       	brne	.+16     	; 0x1866 <xQueueGenericCreate+0x34>
    1856:	14 c0       	rjmp	.+40     	; 0x1880 <xQueueGenericCreate+0x4e>
    1858:	0f 8f       	std	Y+31, r16	; 0x1f
    185a:	18 a3       	std	Y+32, r17	; 0x20
    185c:	61 e0       	ldi	r22, 0x01	; 1
    185e:	ce 01       	movw	r24, r28
    1860:	a5 df       	rcall	.-182    	; 0x17ac <xQueueGenericReset>
    1862:	fc a2       	std	Y+36, r15	; 0x24
    1864:	0d c0       	rjmp	.+26     	; 0x1880 <xQueueGenericCreate+0x4e>
    1866:	85 96       	adiw	r24, 0x25	; 37
    1868:	99 83       	std	Y+1, r25	; 0x01
    186a:	88 83       	st	Y, r24
    186c:	f5 cf       	rjmp	.-22     	; 0x1858 <xQueueGenericCreate+0x26>
    186e:	d9 83       	std	Y+1, r29	; 0x01
    1870:	c8 83       	st	Y, r28
    1872:	f2 cf       	rjmp	.-28     	; 0x1858 <xQueueGenericCreate+0x26>
    1874:	85 e2       	ldi	r24, 0x25	; 37
    1876:	90 e0       	ldi	r25, 0x00	; 0
    1878:	cf db       	rcall	.-2146   	; 0x1018 <pvPortMalloc>
    187a:	ec 01       	movw	r28, r24
    187c:	89 2b       	or	r24, r25
    187e:	b9 f7       	brne	.-18     	; 0x186e <xQueueGenericCreate+0x3c>
    1880:	ce 01       	movw	r24, r28
    1882:	df 91       	pop	r29
    1884:	cf 91       	pop	r28
    1886:	1f 91       	pop	r17
    1888:	0f 91       	pop	r16
    188a:	ff 90       	pop	r15
    188c:	08 95       	ret

0000188e <xQueueGenericSend>:
    188e:	9f 92       	push	r9
    1890:	af 92       	push	r10
    1892:	bf 92       	push	r11
    1894:	cf 92       	push	r12
    1896:	df 92       	push	r13
    1898:	ef 92       	push	r14
    189a:	ff 92       	push	r15
    189c:	0f 93       	push	r16
    189e:	1f 93       	push	r17
    18a0:	cf 93       	push	r28
    18a2:	df 93       	push	r29
    18a4:	cd b7       	in	r28, 0x3d	; 61
    18a6:	de b7       	in	r29, 0x3e	; 62
    18a8:	29 97       	sbiw	r28, 0x09	; 9
    18aa:	0f b6       	in	r0, 0x3f	; 63
    18ac:	f8 94       	cli
    18ae:	de bf       	out	0x3e, r29	; 62
    18b0:	0f be       	out	0x3f, r0	; 63
    18b2:	cd bf       	out	0x3d, r28	; 61
    18b4:	7c 01       	movw	r14, r24
    18b6:	5b 01       	movw	r10, r22
    18b8:	2e 83       	std	Y+6, r18	; 0x06
    18ba:	3f 83       	std	Y+7, r19	; 0x07
    18bc:	48 87       	std	Y+8, r20	; 0x08
    18be:	59 87       	std	Y+9, r21	; 0x09
    18c0:	10 e0       	ldi	r17, 0x00	; 0
    18c2:	99 24       	eor	r9, r9
    18c4:	93 94       	inc	r9
    18c6:	6c 01       	movw	r12, r24
    18c8:	88 e0       	ldi	r24, 0x08	; 8
    18ca:	c8 0e       	add	r12, r24
    18cc:	d1 1c       	adc	r13, r1
    18ce:	0f b6       	in	r0, 0x3f	; 63
    18d0:	f8 94       	cli
    18d2:	0f 92       	push	r0
    18d4:	f7 01       	movw	r30, r14
    18d6:	96 8d       	ldd	r25, Z+30	; 0x1e
    18d8:	87 8d       	ldd	r24, Z+31	; 0x1f
    18da:	98 17       	cp	r25, r24
    18dc:	10 f0       	brcs	.+4      	; 0x18e2 <xQueueGenericSend+0x54>
    18de:	02 30       	cpi	r16, 0x02	; 2
    18e0:	b1 f4       	brne	.+44     	; 0x190e <xQueueGenericSend+0x80>
    18e2:	40 2f       	mov	r20, r16
    18e4:	b5 01       	movw	r22, r10
    18e6:	c7 01       	movw	r24, r14
    18e8:	9b de       	rcall	.-714    	; 0x1620 <prvCopyDataToQueue>
    18ea:	f7 01       	movw	r30, r14
    18ec:	93 89       	ldd	r25, Z+19	; 0x13
    18ee:	99 23       	and	r25, r25
    18f0:	41 f0       	breq	.+16     	; 0x1902 <xQueueGenericSend+0x74>
    18f2:	c7 01       	movw	r24, r14
    18f4:	43 96       	adiw	r24, 0x13	; 19
    18f6:	0e 94 c5 14 	call	0x298a	; 0x298a <xTaskRemoveFromEventList>
    18fa:	88 23       	and	r24, r24
    18fc:	21 f0       	breq	.+8      	; 0x1906 <xQueueGenericSend+0x78>
    18fe:	be dd       	rcall	.-1156   	; 0x147c <vPortYield>
    1900:	02 c0       	rjmp	.+4      	; 0x1906 <xQueueGenericSend+0x78>
    1902:	81 11       	cpse	r24, r1
    1904:	bb dd       	rcall	.-1162   	; 0x147c <vPortYield>
    1906:	0f 90       	pop	r0
    1908:	0f be       	out	0x3f, r0	; 63
    190a:	81 e0       	ldi	r24, 0x01	; 1
    190c:	4d c0       	rjmp	.+154    	; 0x19a8 <xQueueGenericSend+0x11a>
    190e:	8e 81       	ldd	r24, Y+6	; 0x06
    1910:	9f 81       	ldd	r25, Y+7	; 0x07
    1912:	a8 85       	ldd	r26, Y+8	; 0x08
    1914:	b9 85       	ldd	r27, Y+9	; 0x09
    1916:	89 2b       	or	r24, r25
    1918:	8a 2b       	or	r24, r26
    191a:	8b 2b       	or	r24, r27
    191c:	21 f4       	brne	.+8      	; 0x1926 <xQueueGenericSend+0x98>
    191e:	0f 90       	pop	r0
    1920:	0f be       	out	0x3f, r0	; 63
    1922:	80 e0       	ldi	r24, 0x00	; 0
    1924:	41 c0       	rjmp	.+130    	; 0x19a8 <xQueueGenericSend+0x11a>
    1926:	11 11       	cpse	r17, r1
    1928:	05 c0       	rjmp	.+10     	; 0x1934 <xQueueGenericSend+0xa6>
    192a:	ce 01       	movw	r24, r28
    192c:	01 96       	adiw	r24, 0x01	; 1
    192e:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <vTaskInternalSetTimeOutState>
    1932:	19 2d       	mov	r17, r9
    1934:	0f 90       	pop	r0
    1936:	0f be       	out	0x3f, r0	; 63
    1938:	d0 d5       	rcall	.+2976   	; 0x24da <vTaskSuspendAll>
    193a:	0f b6       	in	r0, 0x3f	; 63
    193c:	f8 94       	cli
    193e:	0f 92       	push	r0
    1940:	f7 01       	movw	r30, r14
    1942:	81 a1       	ldd	r24, Z+33	; 0x21
    1944:	8f 3f       	cpi	r24, 0xFF	; 255
    1946:	09 f4       	brne	.+2      	; 0x194a <xQueueGenericSend+0xbc>
    1948:	11 a2       	std	Z+33, r1	; 0x21
    194a:	f7 01       	movw	r30, r14
    194c:	82 a1       	ldd	r24, Z+34	; 0x22
    194e:	8f 3f       	cpi	r24, 0xFF	; 255
    1950:	09 f4       	brne	.+2      	; 0x1954 <xQueueGenericSend+0xc6>
    1952:	12 a2       	std	Z+34, r1	; 0x22
    1954:	0f 90       	pop	r0
    1956:	0f be       	out	0x3f, r0	; 63
    1958:	be 01       	movw	r22, r28
    195a:	6a 5f       	subi	r22, 0xFA	; 250
    195c:	7f 4f       	sbci	r23, 0xFF	; 255
    195e:	ce 01       	movw	r24, r28
    1960:	01 96       	adiw	r24, 0x01	; 1
    1962:	0e 94 62 15 	call	0x2ac4	; 0x2ac4 <xTaskCheckForTimeOut>
    1966:	81 11       	cpse	r24, r1
    1968:	1b c0       	rjmp	.+54     	; 0x19a0 <xQueueGenericSend+0x112>
    196a:	0f b6       	in	r0, 0x3f	; 63
    196c:	f8 94       	cli
    196e:	0f 92       	push	r0
    1970:	f7 01       	movw	r30, r14
    1972:	96 8d       	ldd	r25, Z+30	; 0x1e
    1974:	87 8d       	ldd	r24, Z+31	; 0x1f
    1976:	0f 90       	pop	r0
    1978:	0f be       	out	0x3f, r0	; 63
    197a:	98 13       	cpse	r25, r24
    197c:	0d c0       	rjmp	.+26     	; 0x1998 <xQueueGenericSend+0x10a>
    197e:	4e 81       	ldd	r20, Y+6	; 0x06
    1980:	5f 81       	ldd	r21, Y+7	; 0x07
    1982:	68 85       	ldd	r22, Y+8	; 0x08
    1984:	79 85       	ldd	r23, Y+9	; 0x09
    1986:	c6 01       	movw	r24, r12
    1988:	a5 d7       	rcall	.+3914   	; 0x28d4 <vTaskPlaceOnEventList>
    198a:	c7 01       	movw	r24, r14
    198c:	c2 de       	rcall	.-636    	; 0x1712 <prvUnlockQueue>
    198e:	8e d6       	rcall	.+3356   	; 0x26ac <xTaskResumeAll>
    1990:	81 11       	cpse	r24, r1
    1992:	9d cf       	rjmp	.-198    	; 0x18ce <xQueueGenericSend+0x40>
    1994:	73 dd       	rcall	.-1306   	; 0x147c <vPortYield>
    1996:	9b cf       	rjmp	.-202    	; 0x18ce <xQueueGenericSend+0x40>
    1998:	c7 01       	movw	r24, r14
    199a:	bb de       	rcall	.-650    	; 0x1712 <prvUnlockQueue>
    199c:	87 d6       	rcall	.+3342   	; 0x26ac <xTaskResumeAll>
    199e:	97 cf       	rjmp	.-210    	; 0x18ce <xQueueGenericSend+0x40>
    19a0:	c7 01       	movw	r24, r14
    19a2:	b7 de       	rcall	.-658    	; 0x1712 <prvUnlockQueue>
    19a4:	83 d6       	rcall	.+3334   	; 0x26ac <xTaskResumeAll>
    19a6:	80 e0       	ldi	r24, 0x00	; 0
    19a8:	29 96       	adiw	r28, 0x09	; 9
    19aa:	0f b6       	in	r0, 0x3f	; 63
    19ac:	f8 94       	cli
    19ae:	de bf       	out	0x3e, r29	; 62
    19b0:	0f be       	out	0x3f, r0	; 63
    19b2:	cd bf       	out	0x3d, r28	; 61
    19b4:	df 91       	pop	r29
    19b6:	cf 91       	pop	r28
    19b8:	1f 91       	pop	r17
    19ba:	0f 91       	pop	r16
    19bc:	ff 90       	pop	r15
    19be:	ef 90       	pop	r14
    19c0:	df 90       	pop	r13
    19c2:	cf 90       	pop	r12
    19c4:	bf 90       	pop	r11
    19c6:	af 90       	pop	r10
    19c8:	9f 90       	pop	r9
    19ca:	08 95       	ret

000019cc <xQueueCreateMutex>:
    19cc:	0f 93       	push	r16
    19ce:	cf 93       	push	r28
    19d0:	df 93       	push	r29
    19d2:	48 2f       	mov	r20, r24
    19d4:	60 e0       	ldi	r22, 0x00	; 0
    19d6:	81 e0       	ldi	r24, 0x01	; 1
    19d8:	2c df       	rcall	.-424    	; 0x1832 <xQueueGenericCreate>
    19da:	ec 01       	movw	r28, r24
    19dc:	00 97       	sbiw	r24, 0x00	; 0
    19de:	61 f0       	breq	.+24     	; 0x19f8 <xQueueCreateMutex+0x2c>
    19e0:	1d 82       	std	Y+5, r1	; 0x05
    19e2:	1c 82       	std	Y+4, r1	; 0x04
    19e4:	19 82       	std	Y+1, r1	; 0x01
    19e6:	18 82       	st	Y, r1
    19e8:	1e 82       	std	Y+6, r1	; 0x06
    19ea:	00 e0       	ldi	r16, 0x00	; 0
    19ec:	20 e0       	ldi	r18, 0x00	; 0
    19ee:	30 e0       	ldi	r19, 0x00	; 0
    19f0:	a9 01       	movw	r20, r18
    19f2:	60 e0       	ldi	r22, 0x00	; 0
    19f4:	70 e0       	ldi	r23, 0x00	; 0
    19f6:	4b df       	rcall	.-362    	; 0x188e <xQueueGenericSend>
    19f8:	ce 01       	movw	r24, r28
    19fa:	df 91       	pop	r29
    19fc:	cf 91       	pop	r28
    19fe:	0f 91       	pop	r16
    1a00:	08 95       	ret

00001a02 <xQueueGenericSendFromISR>:
    1a02:	ef 92       	push	r14
    1a04:	ff 92       	push	r15
    1a06:	0f 93       	push	r16
    1a08:	1f 93       	push	r17
    1a0a:	cf 93       	push	r28
    1a0c:	df 93       	push	r29
    1a0e:	8a 01       	movw	r16, r20
    1a10:	fc 01       	movw	r30, r24
    1a12:	56 8d       	ldd	r21, Z+30	; 0x1e
    1a14:	37 8d       	ldd	r19, Z+31	; 0x1f
    1a16:	53 17       	cp	r21, r19
    1a18:	10 f0       	brcs	.+4      	; 0x1a1e <xQueueGenericSendFromISR+0x1c>
    1a1a:	22 30       	cpi	r18, 0x02	; 2
    1a1c:	e1 f4       	brne	.+56     	; 0x1a56 <xQueueGenericSendFromISR+0x54>
    1a1e:	42 2f       	mov	r20, r18
    1a20:	78 01       	movw	r14, r16
    1a22:	ec 01       	movw	r28, r24
    1a24:	1a a1       	ldd	r17, Y+34	; 0x22
    1a26:	fc dd       	rcall	.-1032   	; 0x1620 <prvCopyDataToQueue>
    1a28:	1f 3f       	cpi	r17, 0xFF	; 255
    1a2a:	79 f4       	brne	.+30     	; 0x1a4a <xQueueGenericSendFromISR+0x48>
    1a2c:	8b 89       	ldd	r24, Y+19	; 0x13
    1a2e:	88 23       	and	r24, r24
    1a30:	a1 f0       	breq	.+40     	; 0x1a5a <xQueueGenericSendFromISR+0x58>
    1a32:	ce 01       	movw	r24, r28
    1a34:	43 96       	adiw	r24, 0x13	; 19
    1a36:	a9 d7       	rcall	.+3922   	; 0x298a <xTaskRemoveFromEventList>
    1a38:	88 23       	and	r24, r24
    1a3a:	89 f0       	breq	.+34     	; 0x1a5e <xQueueGenericSendFromISR+0x5c>
    1a3c:	e1 14       	cp	r14, r1
    1a3e:	f1 04       	cpc	r15, r1
    1a40:	81 f0       	breq	.+32     	; 0x1a62 <xQueueGenericSendFromISR+0x60>
    1a42:	81 e0       	ldi	r24, 0x01	; 1
    1a44:	f7 01       	movw	r30, r14
    1a46:	80 83       	st	Z, r24
    1a48:	0d c0       	rjmp	.+26     	; 0x1a64 <xQueueGenericSendFromISR+0x62>
    1a4a:	ff 24       	eor	r15, r15
    1a4c:	f3 94       	inc	r15
    1a4e:	f1 0e       	add	r15, r17
    1a50:	fa a2       	std	Y+34, r15	; 0x22
    1a52:	81 e0       	ldi	r24, 0x01	; 1
    1a54:	07 c0       	rjmp	.+14     	; 0x1a64 <xQueueGenericSendFromISR+0x62>
    1a56:	80 e0       	ldi	r24, 0x00	; 0
    1a58:	05 c0       	rjmp	.+10     	; 0x1a64 <xQueueGenericSendFromISR+0x62>
    1a5a:	81 e0       	ldi	r24, 0x01	; 1
    1a5c:	03 c0       	rjmp	.+6      	; 0x1a64 <xQueueGenericSendFromISR+0x62>
    1a5e:	81 e0       	ldi	r24, 0x01	; 1
    1a60:	01 c0       	rjmp	.+2      	; 0x1a64 <xQueueGenericSendFromISR+0x62>
    1a62:	81 e0       	ldi	r24, 0x01	; 1
    1a64:	df 91       	pop	r29
    1a66:	cf 91       	pop	r28
    1a68:	1f 91       	pop	r17
    1a6a:	0f 91       	pop	r16
    1a6c:	ff 90       	pop	r15
    1a6e:	ef 90       	pop	r14
    1a70:	08 95       	ret

00001a72 <xQueueReceive>:
    1a72:	9f 92       	push	r9
    1a74:	af 92       	push	r10
    1a76:	bf 92       	push	r11
    1a78:	cf 92       	push	r12
    1a7a:	df 92       	push	r13
    1a7c:	ef 92       	push	r14
    1a7e:	ff 92       	push	r15
    1a80:	0f 93       	push	r16
    1a82:	1f 93       	push	r17
    1a84:	cf 93       	push	r28
    1a86:	df 93       	push	r29
    1a88:	cd b7       	in	r28, 0x3d	; 61
    1a8a:	de b7       	in	r29, 0x3e	; 62
    1a8c:	29 97       	sbiw	r28, 0x09	; 9
    1a8e:	0f b6       	in	r0, 0x3f	; 63
    1a90:	f8 94       	cli
    1a92:	de bf       	out	0x3e, r29	; 62
    1a94:	0f be       	out	0x3f, r0	; 63
    1a96:	cd bf       	out	0x3d, r28	; 61
    1a98:	8c 01       	movw	r16, r24
    1a9a:	5b 01       	movw	r10, r22
    1a9c:	2e 83       	std	Y+6, r18	; 0x06
    1a9e:	3f 83       	std	Y+7, r19	; 0x07
    1aa0:	48 87       	std	Y+8, r20	; 0x08
    1aa2:	59 87       	std	Y+9, r21	; 0x09
    1aa4:	e1 2c       	mov	r14, r1
    1aa6:	99 24       	eor	r9, r9
    1aa8:	93 94       	inc	r9
    1aaa:	6c 01       	movw	r12, r24
    1aac:	83 e1       	ldi	r24, 0x13	; 19
    1aae:	c8 0e       	add	r12, r24
    1ab0:	d1 1c       	adc	r13, r1
    1ab2:	0f b6       	in	r0, 0x3f	; 63
    1ab4:	f8 94       	cli
    1ab6:	0f 92       	push	r0
    1ab8:	f8 01       	movw	r30, r16
    1aba:	f6 8c       	ldd	r15, Z+30	; 0x1e
    1abc:	ff 20       	and	r15, r15
    1abe:	91 f0       	breq	.+36     	; 0x1ae4 <xQueueReceive+0x72>
    1ac0:	b5 01       	movw	r22, r10
    1ac2:	c8 01       	movw	r24, r16
    1ac4:	0c de       	rcall	.-1000   	; 0x16de <prvCopyDataFromQueue>
    1ac6:	fa 94       	dec	r15
    1ac8:	f8 01       	movw	r30, r16
    1aca:	f6 8e       	std	Z+30, r15	; 0x1e
    1acc:	80 85       	ldd	r24, Z+8	; 0x08
    1ace:	88 23       	and	r24, r24
    1ad0:	29 f0       	breq	.+10     	; 0x1adc <xQueueReceive+0x6a>
    1ad2:	c8 01       	movw	r24, r16
    1ad4:	08 96       	adiw	r24, 0x08	; 8
    1ad6:	59 d7       	rcall	.+3762   	; 0x298a <xTaskRemoveFromEventList>
    1ad8:	81 11       	cpse	r24, r1
    1ada:	d0 dc       	rcall	.-1632   	; 0x147c <vPortYield>
    1adc:	0f 90       	pop	r0
    1ade:	0f be       	out	0x3f, r0	; 63
    1ae0:	81 e0       	ldi	r24, 0x01	; 1
    1ae2:	4a c0       	rjmp	.+148    	; 0x1b78 <xQueueReceive+0x106>
    1ae4:	8e 81       	ldd	r24, Y+6	; 0x06
    1ae6:	9f 81       	ldd	r25, Y+7	; 0x07
    1ae8:	a8 85       	ldd	r26, Y+8	; 0x08
    1aea:	b9 85       	ldd	r27, Y+9	; 0x09
    1aec:	89 2b       	or	r24, r25
    1aee:	8a 2b       	or	r24, r26
    1af0:	8b 2b       	or	r24, r27
    1af2:	21 f4       	brne	.+8      	; 0x1afc <xQueueReceive+0x8a>
    1af4:	0f 90       	pop	r0
    1af6:	0f be       	out	0x3f, r0	; 63
    1af8:	80 e0       	ldi	r24, 0x00	; 0
    1afa:	3e c0       	rjmp	.+124    	; 0x1b78 <xQueueReceive+0x106>
    1afc:	e1 10       	cpse	r14, r1
    1afe:	04 c0       	rjmp	.+8      	; 0x1b08 <xQueueReceive+0x96>
    1b00:	ce 01       	movw	r24, r28
    1b02:	01 96       	adiw	r24, 0x01	; 1
    1b04:	ce d7       	rcall	.+3996   	; 0x2aa2 <vTaskInternalSetTimeOutState>
    1b06:	e9 2c       	mov	r14, r9
    1b08:	0f 90       	pop	r0
    1b0a:	0f be       	out	0x3f, r0	; 63
    1b0c:	e6 d4       	rcall	.+2508   	; 0x24da <vTaskSuspendAll>
    1b0e:	0f b6       	in	r0, 0x3f	; 63
    1b10:	f8 94       	cli
    1b12:	0f 92       	push	r0
    1b14:	f8 01       	movw	r30, r16
    1b16:	81 a1       	ldd	r24, Z+33	; 0x21
    1b18:	8f 3f       	cpi	r24, 0xFF	; 255
    1b1a:	09 f4       	brne	.+2      	; 0x1b1e <xQueueReceive+0xac>
    1b1c:	11 a2       	std	Z+33, r1	; 0x21
    1b1e:	f8 01       	movw	r30, r16
    1b20:	82 a1       	ldd	r24, Z+34	; 0x22
    1b22:	8f 3f       	cpi	r24, 0xFF	; 255
    1b24:	09 f4       	brne	.+2      	; 0x1b28 <xQueueReceive+0xb6>
    1b26:	12 a2       	std	Z+34, r1	; 0x22
    1b28:	0f 90       	pop	r0
    1b2a:	0f be       	out	0x3f, r0	; 63
    1b2c:	be 01       	movw	r22, r28
    1b2e:	6a 5f       	subi	r22, 0xFA	; 250
    1b30:	7f 4f       	sbci	r23, 0xFF	; 255
    1b32:	ce 01       	movw	r24, r28
    1b34:	01 96       	adiw	r24, 0x01	; 1
    1b36:	c6 d7       	rcall	.+3980   	; 0x2ac4 <xTaskCheckForTimeOut>
    1b38:	81 11       	cpse	r24, r1
    1b3a:	15 c0       	rjmp	.+42     	; 0x1b66 <xQueueReceive+0xf4>
    1b3c:	c8 01       	movw	r24, r16
    1b3e:	65 dd       	rcall	.-1334   	; 0x160a <prvIsQueueEmpty>
    1b40:	88 23       	and	r24, r24
    1b42:	69 f0       	breq	.+26     	; 0x1b5e <xQueueReceive+0xec>
    1b44:	4e 81       	ldd	r20, Y+6	; 0x06
    1b46:	5f 81       	ldd	r21, Y+7	; 0x07
    1b48:	68 85       	ldd	r22, Y+8	; 0x08
    1b4a:	79 85       	ldd	r23, Y+9	; 0x09
    1b4c:	c6 01       	movw	r24, r12
    1b4e:	c2 d6       	rcall	.+3460   	; 0x28d4 <vTaskPlaceOnEventList>
    1b50:	c8 01       	movw	r24, r16
    1b52:	df dd       	rcall	.-1090   	; 0x1712 <prvUnlockQueue>
    1b54:	ab d5       	rcall	.+2902   	; 0x26ac <xTaskResumeAll>
    1b56:	81 11       	cpse	r24, r1
    1b58:	ac cf       	rjmp	.-168    	; 0x1ab2 <xQueueReceive+0x40>
    1b5a:	90 dc       	rcall	.-1760   	; 0x147c <vPortYield>
    1b5c:	aa cf       	rjmp	.-172    	; 0x1ab2 <xQueueReceive+0x40>
    1b5e:	c8 01       	movw	r24, r16
    1b60:	d8 dd       	rcall	.-1104   	; 0x1712 <prvUnlockQueue>
    1b62:	a4 d5       	rcall	.+2888   	; 0x26ac <xTaskResumeAll>
    1b64:	a6 cf       	rjmp	.-180    	; 0x1ab2 <xQueueReceive+0x40>
    1b66:	c8 01       	movw	r24, r16
    1b68:	d4 dd       	rcall	.-1112   	; 0x1712 <prvUnlockQueue>
    1b6a:	a0 d5       	rcall	.+2880   	; 0x26ac <xTaskResumeAll>
    1b6c:	c8 01       	movw	r24, r16
    1b6e:	4d dd       	rcall	.-1382   	; 0x160a <prvIsQueueEmpty>
    1b70:	88 23       	and	r24, r24
    1b72:	09 f4       	brne	.+2      	; 0x1b76 <xQueueReceive+0x104>
    1b74:	9e cf       	rjmp	.-196    	; 0x1ab2 <xQueueReceive+0x40>
    1b76:	80 e0       	ldi	r24, 0x00	; 0
    1b78:	29 96       	adiw	r28, 0x09	; 9
    1b7a:	0f b6       	in	r0, 0x3f	; 63
    1b7c:	f8 94       	cli
    1b7e:	de bf       	out	0x3e, r29	; 62
    1b80:	0f be       	out	0x3f, r0	; 63
    1b82:	cd bf       	out	0x3d, r28	; 61
    1b84:	df 91       	pop	r29
    1b86:	cf 91       	pop	r28
    1b88:	1f 91       	pop	r17
    1b8a:	0f 91       	pop	r16
    1b8c:	ff 90       	pop	r15
    1b8e:	ef 90       	pop	r14
    1b90:	df 90       	pop	r13
    1b92:	cf 90       	pop	r12
    1b94:	bf 90       	pop	r11
    1b96:	af 90       	pop	r10
    1b98:	9f 90       	pop	r9
    1b9a:	08 95       	ret

00001b9c <xQueueSemaphoreTake>:
    1b9c:	bf 92       	push	r11
    1b9e:	cf 92       	push	r12
    1ba0:	df 92       	push	r13
    1ba2:	ef 92       	push	r14
    1ba4:	ff 92       	push	r15
    1ba6:	0f 93       	push	r16
    1ba8:	1f 93       	push	r17
    1baa:	cf 93       	push	r28
    1bac:	df 93       	push	r29
    1bae:	cd b7       	in	r28, 0x3d	; 61
    1bb0:	de b7       	in	r29, 0x3e	; 62
    1bb2:	29 97       	sbiw	r28, 0x09	; 9
    1bb4:	0f b6       	in	r0, 0x3f	; 63
    1bb6:	f8 94       	cli
    1bb8:	de bf       	out	0x3e, r29	; 62
    1bba:	0f be       	out	0x3f, r0	; 63
    1bbc:	cd bf       	out	0x3d, r28	; 61
    1bbe:	8c 01       	movw	r16, r24
    1bc0:	4e 83       	std	Y+6, r20	; 0x06
    1bc2:	5f 83       	std	Y+7, r21	; 0x07
    1bc4:	68 87       	std	Y+8, r22	; 0x08
    1bc6:	79 87       	std	Y+9, r23	; 0x09
    1bc8:	b1 2c       	mov	r11, r1
    1bca:	d1 2c       	mov	r13, r1
    1bcc:	cc 24       	eor	r12, r12
    1bce:	c3 94       	inc	r12
    1bd0:	7c 01       	movw	r14, r24
    1bd2:	83 e1       	ldi	r24, 0x13	; 19
    1bd4:	e8 0e       	add	r14, r24
    1bd6:	f1 1c       	adc	r15, r1
    1bd8:	0f b6       	in	r0, 0x3f	; 63
    1bda:	f8 94       	cli
    1bdc:	0f 92       	push	r0
    1bde:	d8 01       	movw	r26, r16
    1be0:	5e 96       	adiw	r26, 0x1e	; 30
    1be2:	8c 91       	ld	r24, X
    1be4:	5e 97       	sbiw	r26, 0x1e	; 30
    1be6:	88 23       	and	r24, r24
    1be8:	d9 f0       	breq	.+54     	; 0x1c20 <xQueueSemaphoreTake+0x84>
    1bea:	81 50       	subi	r24, 0x01	; 1
    1bec:	5e 96       	adiw	r26, 0x1e	; 30
    1bee:	8c 93       	st	X, r24
    1bf0:	5e 97       	sbiw	r26, 0x1e	; 30
    1bf2:	8d 91       	ld	r24, X+
    1bf4:	9c 91       	ld	r25, X
    1bf6:	89 2b       	or	r24, r25
    1bf8:	29 f4       	brne	.+10     	; 0x1c04 <xQueueSemaphoreTake+0x68>
    1bfa:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <pvTaskIncrementMutexHeldCount>
    1bfe:	f8 01       	movw	r30, r16
    1c00:	95 83       	std	Z+5, r25	; 0x05
    1c02:	84 83       	std	Z+4, r24	; 0x04
    1c04:	d8 01       	movw	r26, r16
    1c06:	18 96       	adiw	r26, 0x08	; 8
    1c08:	8c 91       	ld	r24, X
    1c0a:	88 23       	and	r24, r24
    1c0c:	29 f0       	breq	.+10     	; 0x1c18 <xQueueSemaphoreTake+0x7c>
    1c0e:	c8 01       	movw	r24, r16
    1c10:	08 96       	adiw	r24, 0x08	; 8
    1c12:	bb d6       	rcall	.+3446   	; 0x298a <xTaskRemoveFromEventList>
    1c14:	81 11       	cpse	r24, r1
    1c16:	32 dc       	rcall	.-1948   	; 0x147c <vPortYield>
    1c18:	0f 90       	pop	r0
    1c1a:	0f be       	out	0x3f, r0	; 63
    1c1c:	81 e0       	ldi	r24, 0x01	; 1
    1c1e:	76 c0       	rjmp	.+236    	; 0x1d0c <xQueueSemaphoreTake+0x170>
    1c20:	8e 81       	ldd	r24, Y+6	; 0x06
    1c22:	9f 81       	ldd	r25, Y+7	; 0x07
    1c24:	a8 85       	ldd	r26, Y+8	; 0x08
    1c26:	b9 85       	ldd	r27, Y+9	; 0x09
    1c28:	89 2b       	or	r24, r25
    1c2a:	8a 2b       	or	r24, r26
    1c2c:	8b 2b       	or	r24, r27
    1c2e:	21 f4       	brne	.+8      	; 0x1c38 <xQueueSemaphoreTake+0x9c>
    1c30:	0f 90       	pop	r0
    1c32:	0f be       	out	0x3f, r0	; 63
    1c34:	80 e0       	ldi	r24, 0x00	; 0
    1c36:	6a c0       	rjmp	.+212    	; 0x1d0c <xQueueSemaphoreTake+0x170>
    1c38:	d1 10       	cpse	r13, r1
    1c3a:	04 c0       	rjmp	.+8      	; 0x1c44 <xQueueSemaphoreTake+0xa8>
    1c3c:	ce 01       	movw	r24, r28
    1c3e:	01 96       	adiw	r24, 0x01	; 1
    1c40:	30 d7       	rcall	.+3680   	; 0x2aa2 <vTaskInternalSetTimeOutState>
    1c42:	dc 2c       	mov	r13, r12
    1c44:	0f 90       	pop	r0
    1c46:	0f be       	out	0x3f, r0	; 63
    1c48:	48 d4       	rcall	.+2192   	; 0x24da <vTaskSuspendAll>
    1c4a:	0f b6       	in	r0, 0x3f	; 63
    1c4c:	f8 94       	cli
    1c4e:	0f 92       	push	r0
    1c50:	f8 01       	movw	r30, r16
    1c52:	81 a1       	ldd	r24, Z+33	; 0x21
    1c54:	8f 3f       	cpi	r24, 0xFF	; 255
    1c56:	09 f4       	brne	.+2      	; 0x1c5a <xQueueSemaphoreTake+0xbe>
    1c58:	11 a2       	std	Z+33, r1	; 0x21
    1c5a:	d8 01       	movw	r26, r16
    1c5c:	92 96       	adiw	r26, 0x22	; 34
    1c5e:	8c 91       	ld	r24, X
    1c60:	92 97       	sbiw	r26, 0x22	; 34
    1c62:	8f 3f       	cpi	r24, 0xFF	; 255
    1c64:	11 f4       	brne	.+4      	; 0x1c6a <xQueueSemaphoreTake+0xce>
    1c66:	92 96       	adiw	r26, 0x22	; 34
    1c68:	1c 92       	st	X, r1
    1c6a:	0f 90       	pop	r0
    1c6c:	0f be       	out	0x3f, r0	; 63
    1c6e:	be 01       	movw	r22, r28
    1c70:	6a 5f       	subi	r22, 0xFA	; 250
    1c72:	7f 4f       	sbci	r23, 0xFF	; 255
    1c74:	ce 01       	movw	r24, r28
    1c76:	01 96       	adiw	r24, 0x01	; 1
    1c78:	25 d7       	rcall	.+3658   	; 0x2ac4 <xTaskCheckForTimeOut>
    1c7a:	81 11       	cpse	r24, r1
    1c7c:	23 c0       	rjmp	.+70     	; 0x1cc4 <xQueueSemaphoreTake+0x128>
    1c7e:	c8 01       	movw	r24, r16
    1c80:	c4 dc       	rcall	.-1656   	; 0x160a <prvIsQueueEmpty>
    1c82:	88 23       	and	r24, r24
    1c84:	d9 f0       	breq	.+54     	; 0x1cbc <xQueueSemaphoreTake+0x120>
    1c86:	f8 01       	movw	r30, r16
    1c88:	80 81       	ld	r24, Z
    1c8a:	91 81       	ldd	r25, Z+1	; 0x01
    1c8c:	89 2b       	or	r24, r25
    1c8e:	49 f4       	brne	.+18     	; 0x1ca2 <xQueueSemaphoreTake+0x106>
    1c90:	0f b6       	in	r0, 0x3f	; 63
    1c92:	f8 94       	cli
    1c94:	0f 92       	push	r0
    1c96:	84 81       	ldd	r24, Z+4	; 0x04
    1c98:	95 81       	ldd	r25, Z+5	; 0x05
    1c9a:	80 d7       	rcall	.+3840   	; 0x2b9c <xTaskPriorityInherit>
    1c9c:	b8 2e       	mov	r11, r24
    1c9e:	0f 90       	pop	r0
    1ca0:	0f be       	out	0x3f, r0	; 63
    1ca2:	4e 81       	ldd	r20, Y+6	; 0x06
    1ca4:	5f 81       	ldd	r21, Y+7	; 0x07
    1ca6:	68 85       	ldd	r22, Y+8	; 0x08
    1ca8:	79 85       	ldd	r23, Y+9	; 0x09
    1caa:	c7 01       	movw	r24, r14
    1cac:	13 d6       	rcall	.+3110   	; 0x28d4 <vTaskPlaceOnEventList>
    1cae:	c8 01       	movw	r24, r16
    1cb0:	30 dd       	rcall	.-1440   	; 0x1712 <prvUnlockQueue>
    1cb2:	fc d4       	rcall	.+2552   	; 0x26ac <xTaskResumeAll>
    1cb4:	81 11       	cpse	r24, r1
    1cb6:	90 cf       	rjmp	.-224    	; 0x1bd8 <xQueueSemaphoreTake+0x3c>
    1cb8:	e1 db       	rcall	.-2110   	; 0x147c <vPortYield>
    1cba:	8e cf       	rjmp	.-228    	; 0x1bd8 <xQueueSemaphoreTake+0x3c>
    1cbc:	c8 01       	movw	r24, r16
    1cbe:	29 dd       	rcall	.-1454   	; 0x1712 <prvUnlockQueue>
    1cc0:	f5 d4       	rcall	.+2538   	; 0x26ac <xTaskResumeAll>
    1cc2:	8a cf       	rjmp	.-236    	; 0x1bd8 <xQueueSemaphoreTake+0x3c>
    1cc4:	c8 01       	movw	r24, r16
    1cc6:	25 dd       	rcall	.-1462   	; 0x1712 <prvUnlockQueue>
    1cc8:	f1 d4       	rcall	.+2530   	; 0x26ac <xTaskResumeAll>
    1cca:	c8 01       	movw	r24, r16
    1ccc:	9e dc       	rcall	.-1732   	; 0x160a <prvIsQueueEmpty>
    1cce:	88 23       	and	r24, r24
    1cd0:	09 f4       	brne	.+2      	; 0x1cd4 <xQueueSemaphoreTake+0x138>
    1cd2:	82 cf       	rjmp	.-252    	; 0x1bd8 <xQueueSemaphoreTake+0x3c>
    1cd4:	bb 20       	and	r11, r11
    1cd6:	c9 f0       	breq	.+50     	; 0x1d0a <xQueueSemaphoreTake+0x16e>
    1cd8:	0f b6       	in	r0, 0x3f	; 63
    1cda:	f8 94       	cli
    1cdc:	0f 92       	push	r0
    1cde:	f8 01       	movw	r30, r16
    1ce0:	83 89       	ldd	r24, Z+19	; 0x13
    1ce2:	88 23       	and	r24, r24
    1ce4:	39 f0       	breq	.+14     	; 0x1cf4 <xQueueSemaphoreTake+0x158>
    1ce6:	02 8c       	ldd	r0, Z+26	; 0x1a
    1ce8:	f3 8d       	ldd	r31, Z+27	; 0x1b
    1cea:	e0 2d       	mov	r30, r0
    1cec:	80 81       	ld	r24, Z
    1cee:	64 e0       	ldi	r22, 0x04	; 4
    1cf0:	68 1b       	sub	r22, r24
    1cf2:	01 c0       	rjmp	.+2      	; 0x1cf6 <xQueueSemaphoreTake+0x15a>
    1cf4:	60 e0       	ldi	r22, 0x00	; 0
    1cf6:	d8 01       	movw	r26, r16
    1cf8:	14 96       	adiw	r26, 0x04	; 4
    1cfa:	8d 91       	ld	r24, X+
    1cfc:	9c 91       	ld	r25, X
    1cfe:	15 97       	sbiw	r26, 0x05	; 5
    1d00:	fb d7       	rcall	.+4086   	; 0x2cf8 <vTaskPriorityDisinheritAfterTimeout>
    1d02:	0f 90       	pop	r0
    1d04:	0f be       	out	0x3f, r0	; 63
    1d06:	80 e0       	ldi	r24, 0x00	; 0
    1d08:	01 c0       	rjmp	.+2      	; 0x1d0c <xQueueSemaphoreTake+0x170>
    1d0a:	80 e0       	ldi	r24, 0x00	; 0
    1d0c:	29 96       	adiw	r28, 0x09	; 9
    1d0e:	0f b6       	in	r0, 0x3f	; 63
    1d10:	f8 94       	cli
    1d12:	de bf       	out	0x3e, r29	; 62
    1d14:	0f be       	out	0x3f, r0	; 63
    1d16:	cd bf       	out	0x3d, r28	; 61
    1d18:	df 91       	pop	r29
    1d1a:	cf 91       	pop	r28
    1d1c:	1f 91       	pop	r17
    1d1e:	0f 91       	pop	r16
    1d20:	ff 90       	pop	r15
    1d22:	ef 90       	pop	r14
    1d24:	df 90       	pop	r13
    1d26:	cf 90       	pop	r12
    1d28:	bf 90       	pop	r11
    1d2a:	08 95       	ret

00001d2c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
    {
    1d2c:	cf 93       	push	r28
    1d2e:	df 93       	push	r29
    1d30:	ec 01       	movw	r28, r24
        will not actually cause the task to block, just place it on a blocked
        list.  It will not block until the scheduler is unlocked - at which
        time a yield will be performed.  If an item is added to the queue while
        the queue is locked, and the calling task blocks on the queue, then the
        calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    1d32:	0f b6       	in	r0, 0x3f	; 63
    1d34:	f8 94       	cli
    1d36:	0f 92       	push	r0
    1d38:	89 a1       	ldd	r24, Y+33	; 0x21
    1d3a:	8f 3f       	cpi	r24, 0xFF	; 255
    1d3c:	09 f4       	brne	.+2      	; 0x1d40 <vQueueWaitForMessageRestricted+0x14>
    1d3e:	19 a2       	std	Y+33, r1	; 0x21
    1d40:	8a a1       	ldd	r24, Y+34	; 0x22
    1d42:	8f 3f       	cpi	r24, 0xFF	; 255
    1d44:	09 f4       	brne	.+2      	; 0x1d48 <vQueueWaitForMessageRestricted+0x1c>
    1d46:	1a a2       	std	Y+34, r1	; 0x22
    1d48:	0f 90       	pop	r0
    1d4a:	0f be       	out	0x3f, r0	; 63
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    1d4c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1d4e:	81 11       	cpse	r24, r1
    1d50:	03 c0       	rjmp	.+6      	; 0x1d58 <vQueueWaitForMessageRestricted+0x2c>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    1d52:	ce 01       	movw	r24, r28
    1d54:	43 96       	adiw	r24, 0x13	; 19
    1d56:	f9 d5       	rcall	.+3058   	; 0x294a <vTaskPlaceOnEventListRestricted>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
        prvUnlockQueue( pxQueue );
    1d58:	ce 01       	movw	r24, r28
    1d5a:	db dc       	rcall	.-1610   	; 0x1712 <prvUnlockQueue>
    }
    1d5c:	df 91       	pop	r29
    1d5e:	cf 91       	pop	r28
    1d60:	08 95       	ret

00001d62 <prvBytesInBuffer>:

    configASSERT( pxStreamBuffer );

    xReturn = prvBytesInBuffer( pxStreamBuffer );
    return xReturn;
}
    1d62:	fc 01       	movw	r30, r24
    1d64:	44 81       	ldd	r20, Z+4	; 0x04
    1d66:	55 81       	ldd	r21, Z+5	; 0x05
    1d68:	22 81       	ldd	r18, Z+2	; 0x02
    1d6a:	33 81       	ldd	r19, Z+3	; 0x03
    1d6c:	24 0f       	add	r18, r20
    1d6e:	35 1f       	adc	r19, r21
    1d70:	80 81       	ld	r24, Z
    1d72:	91 81       	ldd	r25, Z+1	; 0x01
    1d74:	b9 01       	movw	r22, r18
    1d76:	68 1b       	sub	r22, r24
    1d78:	79 0b       	sbc	r23, r25
    1d7a:	cb 01       	movw	r24, r22
    1d7c:	64 17       	cp	r22, r20
    1d7e:	75 07       	cpc	r23, r21
    1d80:	10 f0       	brcs	.+4      	; 0x1d86 <prvBytesInBuffer+0x24>
    1d82:	84 1b       	sub	r24, r20
    1d84:	95 0b       	sbc	r25, r21
    1d86:	08 95       	ret

00001d88 <prvWriteBytesToBuffer>:
    1d88:	af 92       	push	r10
    1d8a:	bf 92       	push	r11
    1d8c:	cf 92       	push	r12
    1d8e:	df 92       	push	r13
    1d90:	ef 92       	push	r14
    1d92:	ff 92       	push	r15
    1d94:	0f 93       	push	r16
    1d96:	1f 93       	push	r17
    1d98:	cf 93       	push	r28
    1d9a:	df 93       	push	r29
    1d9c:	6c 01       	movw	r12, r24
    1d9e:	5b 01       	movw	r10, r22
    1da0:	7a 01       	movw	r14, r20
    1da2:	fc 01       	movw	r30, r24
    1da4:	c2 81       	ldd	r28, Z+2	; 0x02
    1da6:	d3 81       	ldd	r29, Z+3	; 0x03
    1da8:	04 81       	ldd	r16, Z+4	; 0x04
    1daa:	15 81       	ldd	r17, Z+5	; 0x05
    1dac:	0c 1b       	sub	r16, r28
    1dae:	1d 0b       	sbc	r17, r29
    1db0:	40 17       	cp	r20, r16
    1db2:	51 07       	cpc	r21, r17
    1db4:	08 f4       	brcc	.+2      	; 0x1db8 <prvWriteBytesToBuffer+0x30>
    1db6:	8a 01       	movw	r16, r20
    1db8:	f6 01       	movw	r30, r12
    1dba:	84 85       	ldd	r24, Z+12	; 0x0c
    1dbc:	95 85       	ldd	r25, Z+13	; 0x0d
    1dbe:	a8 01       	movw	r20, r16
    1dc0:	b5 01       	movw	r22, r10
    1dc2:	8c 0f       	add	r24, r28
    1dc4:	9d 1f       	adc	r25, r29
    1dc6:	0e 94 8c 27 	call	0x4f18	; 0x4f18 <memcpy>
    1dca:	0e 15       	cp	r16, r14
    1dcc:	1f 05       	cpc	r17, r15
    1dce:	58 f4       	brcc	.+22     	; 0x1de6 <prvWriteBytesToBuffer+0x5e>
    1dd0:	a7 01       	movw	r20, r14
    1dd2:	40 1b       	sub	r20, r16
    1dd4:	51 0b       	sbc	r21, r17
    1dd6:	b5 01       	movw	r22, r10
    1dd8:	60 0f       	add	r22, r16
    1dda:	71 1f       	adc	r23, r17
    1ddc:	f6 01       	movw	r30, r12
    1dde:	84 85       	ldd	r24, Z+12	; 0x0c
    1de0:	95 85       	ldd	r25, Z+13	; 0x0d
    1de2:	0e 94 8c 27 	call	0x4f18	; 0x4f18 <memcpy>
    1de6:	ce 01       	movw	r24, r28
    1de8:	8e 0d       	add	r24, r14
    1dea:	9f 1d       	adc	r25, r15
    1dec:	f6 01       	movw	r30, r12
    1dee:	24 81       	ldd	r18, Z+4	; 0x04
    1df0:	35 81       	ldd	r19, Z+5	; 0x05
    1df2:	82 17       	cp	r24, r18
    1df4:	93 07       	cpc	r25, r19
    1df6:	10 f0       	brcs	.+4      	; 0x1dfc <prvWriteBytesToBuffer+0x74>
    1df8:	82 1b       	sub	r24, r18
    1dfa:	93 0b       	sbc	r25, r19
    1dfc:	f6 01       	movw	r30, r12
    1dfe:	93 83       	std	Z+3, r25	; 0x03
    1e00:	82 83       	std	Z+2, r24	; 0x02
    1e02:	c7 01       	movw	r24, r14
    1e04:	df 91       	pop	r29
    1e06:	cf 91       	pop	r28
    1e08:	1f 91       	pop	r17
    1e0a:	0f 91       	pop	r16
    1e0c:	ff 90       	pop	r15
    1e0e:	ef 90       	pop	r14
    1e10:	df 90       	pop	r13
    1e12:	cf 90       	pop	r12
    1e14:	bf 90       	pop	r11
    1e16:	af 90       	pop	r10
    1e18:	08 95       	ret

00001e1a <prvWriteMessageToBuffer>:
    1e1a:	cf 92       	push	r12
    1e1c:	df 92       	push	r13
    1e1e:	ef 92       	push	r14
    1e20:	ff 92       	push	r15
    1e22:	0f 93       	push	r16
    1e24:	1f 93       	push	r17
    1e26:	cf 93       	push	r28
    1e28:	df 93       	push	r29
    1e2a:	1f 92       	push	r1
    1e2c:	1f 92       	push	r1
    1e2e:	cd b7       	in	r28, 0x3d	; 61
    1e30:	de b7       	in	r29, 0x3e	; 62
    1e32:	5a 83       	std	Y+2, r21	; 0x02
    1e34:	49 83       	std	Y+1, r20	; 0x01
    1e36:	21 15       	cp	r18, r1
    1e38:	31 05       	cpc	r19, r1
    1e3a:	c9 f0       	breq	.+50     	; 0x1e6e <prvWriteMessageToBuffer+0x54>
    1e3c:	6b 01       	movw	r12, r22
    1e3e:	7c 01       	movw	r14, r24
    1e40:	fc 01       	movw	r30, r24
    1e42:	86 85       	ldd	r24, Z+14	; 0x0e
    1e44:	80 fd       	sbrc	r24, 0
    1e46:	08 c0       	rjmp	.+16     	; 0x1e58 <prvWriteMessageToBuffer+0x3e>
    1e48:	ca 01       	movw	r24, r20
    1e4a:	24 17       	cp	r18, r20
    1e4c:	35 07       	cpc	r19, r21
    1e4e:	08 f4       	brcc	.+2      	; 0x1e52 <prvWriteMessageToBuffer+0x38>
    1e50:	c9 01       	movw	r24, r18
    1e52:	9a 83       	std	Y+2, r25	; 0x02
    1e54:	89 83       	std	Y+1, r24	; 0x01
    1e56:	11 c0       	rjmp	.+34     	; 0x1e7a <prvWriteMessageToBuffer+0x60>
    1e58:	20 17       	cp	r18, r16
    1e5a:	31 07       	cpc	r19, r17
    1e5c:	58 f0       	brcs	.+22     	; 0x1e74 <prvWriteMessageToBuffer+0x5a>
    1e5e:	42 e0       	ldi	r20, 0x02	; 2
    1e60:	50 e0       	ldi	r21, 0x00	; 0
    1e62:	be 01       	movw	r22, r28
    1e64:	6f 5f       	subi	r22, 0xFF	; 255
    1e66:	7f 4f       	sbci	r23, 0xFF	; 255
    1e68:	c7 01       	movw	r24, r14
    1e6a:	8e df       	rcall	.-228    	; 0x1d88 <prvWriteBytesToBuffer>
    1e6c:	06 c0       	rjmp	.+12     	; 0x1e7a <prvWriteMessageToBuffer+0x60>
    1e6e:	80 e0       	ldi	r24, 0x00	; 0
    1e70:	90 e0       	ldi	r25, 0x00	; 0
    1e72:	08 c0       	rjmp	.+16     	; 0x1e84 <prvWriteMessageToBuffer+0x6a>
    1e74:	80 e0       	ldi	r24, 0x00	; 0
    1e76:	90 e0       	ldi	r25, 0x00	; 0
    1e78:	05 c0       	rjmp	.+10     	; 0x1e84 <prvWriteMessageToBuffer+0x6a>
    1e7a:	49 81       	ldd	r20, Y+1	; 0x01
    1e7c:	5a 81       	ldd	r21, Y+2	; 0x02
    1e7e:	b6 01       	movw	r22, r12
    1e80:	c7 01       	movw	r24, r14
    1e82:	82 df       	rcall	.-252    	; 0x1d88 <prvWriteBytesToBuffer>
    1e84:	0f 90       	pop	r0
    1e86:	0f 90       	pop	r0
    1e88:	df 91       	pop	r29
    1e8a:	cf 91       	pop	r28
    1e8c:	1f 91       	pop	r17
    1e8e:	0f 91       	pop	r16
    1e90:	ff 90       	pop	r15
    1e92:	ef 90       	pop	r14
    1e94:	df 90       	pop	r13
    1e96:	cf 90       	pop	r12
    1e98:	08 95       	ret

00001e9a <xStreamBufferGenericCreate>:
    1e9a:	ef 92       	push	r14
    1e9c:	ff 92       	push	r15
    1e9e:	1f 93       	push	r17
    1ea0:	cf 93       	push	r28
    1ea2:	df 93       	push	r29
    1ea4:	eb 01       	movw	r28, r22
    1ea6:	11 e0       	ldi	r17, 0x01	; 1
    1ea8:	41 30       	cpi	r20, 0x01	; 1
    1eaa:	09 f0       	breq	.+2      	; 0x1eae <xStreamBufferGenericCreate+0x14>
    1eac:	10 e0       	ldi	r17, 0x00	; 0
    1eae:	20 97       	sbiw	r28, 0x00	; 0
    1eb0:	11 f4       	brne	.+4      	; 0x1eb6 <xStreamBufferGenericCreate+0x1c>
    1eb2:	c1 e0       	ldi	r28, 0x01	; 1
    1eb4:	d0 e0       	ldi	r29, 0x00	; 0
    1eb6:	7c 01       	movw	r14, r24
    1eb8:	2f ef       	ldi	r18, 0xFF	; 255
    1eba:	e2 1a       	sub	r14, r18
    1ebc:	f2 0a       	sbc	r15, r18
    1ebe:	41 96       	adiw	r24, 0x11	; 17
    1ec0:	ab d8       	rcall	.-3754   	; 0x1018 <pvPortMalloc>
    1ec2:	00 97       	sbiw	r24, 0x00	; 0
    1ec4:	81 f0       	breq	.+32     	; 0x1ee6 <xStreamBufferGenericCreate+0x4c>
    1ec6:	20 e1       	ldi	r18, 0x10	; 16
    1ec8:	fc 01       	movw	r30, r24
    1eca:	11 92       	st	Z+, r1
    1ecc:	2a 95       	dec	r18
    1ece:	e9 f7       	brne	.-6      	; 0x1eca <xStreamBufferGenericCreate+0x30>
    1ed0:	9c 01       	movw	r18, r24
    1ed2:	20 5f       	subi	r18, 0xF0	; 240
    1ed4:	3f 4f       	sbci	r19, 0xFF	; 255
    1ed6:	fc 01       	movw	r30, r24
    1ed8:	35 87       	std	Z+13, r19	; 0x0d
    1eda:	24 87       	std	Z+12, r18	; 0x0c
    1edc:	f5 82       	std	Z+5, r15	; 0x05
    1ede:	e4 82       	std	Z+4, r14	; 0x04
    1ee0:	d7 83       	std	Z+7, r29	; 0x07
    1ee2:	c6 83       	std	Z+6, r28	; 0x06
    1ee4:	16 87       	std	Z+14, r17	; 0x0e
    1ee6:	df 91       	pop	r29
    1ee8:	cf 91       	pop	r28
    1eea:	1f 91       	pop	r17
    1eec:	ff 90       	pop	r15
    1eee:	ef 90       	pop	r14
    1ef0:	08 95       	ret

00001ef2 <xStreamBufferSpacesAvailable>:
    1ef2:	fc 01       	movw	r30, r24
    1ef4:	24 81       	ldd	r18, Z+4	; 0x04
    1ef6:	35 81       	ldd	r19, Z+5	; 0x05
    1ef8:	80 81       	ld	r24, Z
    1efa:	91 81       	ldd	r25, Z+1	; 0x01
    1efc:	42 81       	ldd	r20, Z+2	; 0x02
    1efe:	53 81       	ldd	r21, Z+3	; 0x03
    1f00:	82 0f       	add	r24, r18
    1f02:	93 1f       	adc	r25, r19
    1f04:	01 97       	sbiw	r24, 0x01	; 1
    1f06:	84 1b       	sub	r24, r20
    1f08:	95 0b       	sbc	r25, r21
    1f0a:	82 17       	cp	r24, r18
    1f0c:	93 07       	cpc	r25, r19
    1f0e:	10 f0       	brcs	.+4      	; 0x1f14 <xStreamBufferSpacesAvailable+0x22>
    1f10:	82 1b       	sub	r24, r18
    1f12:	93 0b       	sbc	r25, r19
    1f14:	08 95       	ret

00001f16 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void *pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    1f16:	2f 92       	push	r2
    1f18:	3f 92       	push	r3
    1f1a:	4f 92       	push	r4
    1f1c:	5f 92       	push	r5
    1f1e:	6f 92       	push	r6
    1f20:	7f 92       	push	r7
    1f22:	8f 92       	push	r8
    1f24:	9f 92       	push	r9
    1f26:	af 92       	push	r10
    1f28:	bf 92       	push	r11
    1f2a:	cf 92       	push	r12
    1f2c:	df 92       	push	r13
    1f2e:	ef 92       	push	r14
    1f30:	ff 92       	push	r15
    1f32:	0f 93       	push	r16
    1f34:	1f 93       	push	r17
    1f36:	cf 93       	push	r28
    1f38:	df 93       	push	r29
    1f3a:	cd b7       	in	r28, 0x3d	; 61
    1f3c:	de b7       	in	r29, 0x3e	; 62
    1f3e:	29 97       	sbiw	r28, 0x09	; 9
    1f40:	0f b6       	in	r0, 0x3f	; 63
    1f42:	f8 94       	cli
    1f44:	de bf       	out	0x3e, r29	; 62
    1f46:	0f be       	out	0x3f, r0	; 63
    1f48:	cd bf       	out	0x3d, r28	; 61
    1f4a:	5c 01       	movw	r10, r24
    1f4c:	1b 01       	movw	r2, r22
    1f4e:	2a 01       	movw	r4, r20
    1f50:	0e 83       	std	Y+6, r16	; 0x06
    1f52:	1f 83       	std	Y+7, r17	; 0x07
    1f54:	28 87       	std	Y+8, r18	; 0x08
    1f56:	39 87       	std	Y+9, r19	; 0x09

    /* This send function is used to write to both message buffers and stream
    buffers.  If this is a message buffer then the space needed must be
    increased by the amount of bytes needed to store the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1f58:	fc 01       	movw	r30, r24
    1f5a:	86 85       	ldd	r24, Z+14	; 0x0e
    1f5c:	80 ff       	sbrs	r24, 0
    1f5e:	05 c0       	rjmp	.+10     	; 0x1f6a <xStreamBufferSend+0x54>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1f60:	3a 01       	movw	r6, r20
    1f62:	f2 e0       	ldi	r31, 0x02	; 2
    1f64:	6f 0e       	add	r6, r31
    1f66:	71 1c       	adc	r7, r1
    1f68:	01 c0       	rjmp	.+2      	; 0x1f6c <xStreamBufferSend+0x56>
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReturn, xSpace = 0;
size_t xRequiredSpace = xDataLengthBytes;
    1f6a:	3a 01       	movw	r6, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    1f6c:	8e 81       	ldd	r24, Y+6	; 0x06
    1f6e:	9f 81       	ldd	r25, Y+7	; 0x07
    1f70:	a8 85       	ldd	r26, Y+8	; 0x08
    1f72:	b9 85       	ldd	r27, Y+9	; 0x09
    1f74:	89 2b       	or	r24, r25
    1f76:	8a 2b       	or	r24, r26
    1f78:	8b 2b       	or	r24, r27
    1f7a:	09 f4       	brne	.+2      	; 0x1f7e <xStreamBufferSend+0x68>
    1f7c:	34 c0       	rjmp	.+104    	; 0x1fe6 <xStreamBufferSend+0xd0>
    {
        vTaskSetTimeOutState( &xTimeOut );
    1f7e:	ce 01       	movw	r24, r28
    1f80:	01 96       	adiw	r24, 0x01	; 1
    1f82:	79 d5       	rcall	.+2802   	; 0x2a76 <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
            buffer. */
            taskENTER_CRITICAL();
    1f84:	0f b6       	in	r0, 0x3f	; 63
    1f86:	f8 94       	cli
    1f88:	0f 92       	push	r0
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1f8a:	c5 01       	movw	r24, r10
    1f8c:	b2 df       	rcall	.-156    	; 0x1ef2 <xStreamBufferSpacesAvailable>
    1f8e:	4c 01       	movw	r8, r24

                if( xSpace < xRequiredSpace )
    1f90:	86 15       	cp	r24, r6
    1f92:	97 05       	cpc	r25, r7
    1f94:	18 f5       	brcc	.+70     	; 0x1fdc <xStreamBufferSend+0xc6>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClear( NULL );
    1f96:	80 e0       	ldi	r24, 0x00	; 0
    1f98:	90 e0       	ldi	r25, 0x00	; 0
    1f9a:	0e 94 8d 18 	call	0x311a	; 0x311a <xTaskNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    1f9e:	eb d5       	rcall	.+3030   	; 0x2b76 <xTaskGetCurrentTaskHandle>
    1fa0:	f5 01       	movw	r30, r10
    1fa2:	93 87       	std	Z+11, r25	; 0x0b
    1fa4:	82 87       	std	Z+10, r24	; 0x0a
                {
                    taskEXIT_CRITICAL();
                    break;
                }
            }
            taskEXIT_CRITICAL();
    1fa6:	0f 90       	pop	r0
    1fa8:	0f be       	out	0x3f, r0	; 63

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    1faa:	ce 80       	ldd	r12, Y+6	; 0x06
    1fac:	df 80       	ldd	r13, Y+7	; 0x07
    1fae:	e8 84       	ldd	r14, Y+8	; 0x08
    1fb0:	f9 84       	ldd	r15, Y+9	; 0x09
    1fb2:	00 e0       	ldi	r16, 0x00	; 0
    1fb4:	10 e0       	ldi	r17, 0x00	; 0
    1fb6:	20 e0       	ldi	r18, 0x00	; 0
    1fb8:	30 e0       	ldi	r19, 0x00	; 0
    1fba:	a9 01       	movw	r20, r18
    1fbc:	60 e0       	ldi	r22, 0x00	; 0
    1fbe:	70 e0       	ldi	r23, 0x00	; 0
    1fc0:	cb 01       	movw	r24, r22
    1fc2:	20 d7       	rcall	.+3648   	; 0x2e04 <xTaskNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
    1fc4:	f5 01       	movw	r30, r10
    1fc6:	13 86       	std	Z+11, r1	; 0x0b
    1fc8:	12 86       	std	Z+10, r1	; 0x0a

        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    1fca:	be 01       	movw	r22, r28
    1fcc:	6a 5f       	subi	r22, 0xFA	; 250
    1fce:	7f 4f       	sbci	r23, 0xFF	; 255
    1fd0:	ce 01       	movw	r24, r28
    1fd2:	01 96       	adiw	r24, 0x01	; 1
    1fd4:	77 d5       	rcall	.+2798   	; 0x2ac4 <xTaskCheckForTimeOut>
    1fd6:	88 23       	and	r24, r24
    1fd8:	a9 f2       	breq	.-86     	; 0x1f84 <xStreamBufferSend+0x6e>
    1fda:	02 c0       	rjmp	.+4      	; 0x1fe0 <xStreamBufferSend+0xca>
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
                }
                else
                {
                    taskEXIT_CRITICAL();
    1fdc:	0f 90       	pop	r0
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
    1fde:	0f be       	out	0x3f, r0	; 63
    1fe0:	81 14       	cp	r8, r1
    1fe2:	91 04       	cpc	r9, r1
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1fe4:	19 f4       	brne	.+6      	; 0x1fec <xStreamBufferSend+0xd6>
    1fe6:	c5 01       	movw	r24, r10
    1fe8:	84 df       	rcall	.-248    	; 0x1ef2 <xStreamBufferSpacesAvailable>
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    1fea:	4c 01       	movw	r8, r24
    1fec:	83 01       	movw	r16, r6
    1fee:	94 01       	movw	r18, r8
    1ff0:	a2 01       	movw	r20, r4
    1ff2:	b1 01       	movw	r22, r2
    1ff4:	c5 01       	movw	r24, r10
    1ff6:	11 df       	rcall	.-478    	; 0x1e1a <prvWriteMessageToBuffer>

    if( xReturn > ( size_t ) 0 )
    1ff8:	7c 01       	movw	r14, r24
    1ffa:	89 2b       	or	r24, r25
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    1ffc:	d9 f0       	breq	.+54     	; 0x2034 <xStreamBufferSend+0x11e>
    1ffe:	c5 01       	movw	r24, r10
    2000:	b0 de       	rcall	.-672    	; 0x1d62 <prvBytesInBuffer>
    2002:	f5 01       	movw	r30, r10
    2004:	26 81       	ldd	r18, Z+6	; 0x06
    2006:	37 81       	ldd	r19, Z+7	; 0x07
    2008:	82 17       	cp	r24, r18
    200a:	93 07       	cpc	r25, r19
        {
            sbSEND_COMPLETED( pxStreamBuffer );
    200c:	98 f0       	brcs	.+38     	; 0x2034 <xStreamBufferSend+0x11e>
    200e:	65 d2       	rcall	.+1226   	; 0x24da <vTaskSuspendAll>
    2010:	f5 01       	movw	r30, r10
    2012:	80 85       	ldd	r24, Z+8	; 0x08
    2014:	91 85       	ldd	r25, Z+9	; 0x09
    2016:	89 2b       	or	r24, r25
    2018:	61 f0       	breq	.+24     	; 0x2032 <xStreamBufferSend+0x11c>
    201a:	80 85       	ldd	r24, Z+8	; 0x08
    201c:	91 85       	ldd	r25, Z+9	; 0x09
    201e:	00 e0       	ldi	r16, 0x00	; 0
    2020:	10 e0       	ldi	r17, 0x00	; 0
    2022:	20 e0       	ldi	r18, 0x00	; 0
    2024:	40 e0       	ldi	r20, 0x00	; 0
    2026:	50 e0       	ldi	r21, 0x00	; 0
    2028:	ba 01       	movw	r22, r20
    202a:	76 d7       	rcall	.+3820   	; 0x2f18 <xTaskGenericNotify>
    202c:	f5 01       	movw	r30, r10
    202e:	11 86       	std	Z+9, r1	; 0x09
    2030:	10 86       	std	Z+8, r1	; 0x08
    2032:	3c d3       	rcall	.+1656   	; 0x26ac <xTaskResumeAll>
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    2034:	c7 01       	movw	r24, r14
    2036:	29 96       	adiw	r28, 0x09	; 9
    2038:	0f b6       	in	r0, 0x3f	; 63
    203a:	f8 94       	cli
    203c:	de bf       	out	0x3e, r29	; 62
    203e:	0f be       	out	0x3f, r0	; 63
    2040:	cd bf       	out	0x3d, r28	; 61
    2042:	df 91       	pop	r29
    2044:	cf 91       	pop	r28
    2046:	1f 91       	pop	r17
    2048:	0f 91       	pop	r16
    204a:	ff 90       	pop	r15
    204c:	ef 90       	pop	r14
    204e:	df 90       	pop	r13
    2050:	cf 90       	pop	r12
    2052:	bf 90       	pop	r11
    2054:	af 90       	pop	r10
    2056:	9f 90       	pop	r9
    2058:	8f 90       	pop	r8
    205a:	7f 90       	pop	r7
    205c:	6f 90       	pop	r6
    205e:	5f 90       	pop	r5
    2060:	4f 90       	pop	r4
    2062:	3f 90       	pop	r3
    2064:	2f 90       	pop	r2
    2066:	08 95       	ret

00002068 <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void *pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    2068:	af 92       	push	r10
    206a:	bf 92       	push	r11
    206c:	cf 92       	push	r12
    206e:	df 92       	push	r13
    2070:	ef 92       	push	r14
    2072:	ff 92       	push	r15
    2074:	0f 93       	push	r16
    2076:	1f 93       	push	r17
    2078:	cf 93       	push	r28
    207a:	df 93       	push	r29
    207c:	ec 01       	movw	r28, r24
    207e:	5b 01       	movw	r10, r22
    2080:	6a 01       	movw	r12, r20
    2082:	79 01       	movw	r14, r18

    /* This send function is used to write to both message buffers and stream
    buffers.  If this is a message buffer then the space needed must be
    increased by the amount of bytes needed to store the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    2084:	8e 85       	ldd	r24, Y+14	; 0x0e
    2086:	80 ff       	sbrs	r24, 0
    2088:	04 c0       	rjmp	.+8      	; 0x2092 <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    208a:	8a 01       	movw	r16, r20
    208c:	0e 5f       	subi	r16, 0xFE	; 254
    208e:	1f 4f       	sbci	r17, 0xFF	; 255
    2090:	01 c0       	rjmp	.+2      	; 0x2094 <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReturn, xSpace;
size_t xRequiredSpace = xDataLengthBytes;
    2092:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    2094:	ce 01       	movw	r24, r28
    2096:	2d df       	rcall	.-422    	; 0x1ef2 <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    2098:	9c 01       	movw	r18, r24
    209a:	a6 01       	movw	r20, r12
    209c:	b5 01       	movw	r22, r10
    209e:	ce 01       	movw	r24, r28
    20a0:	bc de       	rcall	.-648    	; 0x1e1a <prvWriteMessageToBuffer>
    20a2:	6c 01       	movw	r12, r24

    if( xReturn > ( size_t ) 0 )
    20a4:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    20a6:	b1 f0       	breq	.+44     	; 0x20d4 <xStreamBufferSendFromISR+0x6c>
    20a8:	ce 01       	movw	r24, r28
    20aa:	5b de       	rcall	.-842    	; 0x1d62 <prvBytesInBuffer>
    20ac:	2e 81       	ldd	r18, Y+6	; 0x06
    20ae:	3f 81       	ldd	r19, Y+7	; 0x07
    20b0:	82 17       	cp	r24, r18
    20b2:	93 07       	cpc	r25, r19
    20b4:	78 f0       	brcs	.+30     	; 0x20d4 <xStreamBufferSendFromISR+0x6c>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    20b6:	88 85       	ldd	r24, Y+8	; 0x08
    20b8:	99 85       	ldd	r25, Y+9	; 0x09
    20ba:	89 2b       	or	r24, r25
    20bc:	59 f0       	breq	.+22     	; 0x20d4 <xStreamBufferSendFromISR+0x6c>
    20be:	88 85       	ldd	r24, Y+8	; 0x08
    20c0:	99 85       	ldd	r25, Y+9	; 0x09
    20c2:	00 e0       	ldi	r16, 0x00	; 0
    20c4:	10 e0       	ldi	r17, 0x00	; 0
    20c6:	20 e0       	ldi	r18, 0x00	; 0
    20c8:	40 e0       	ldi	r20, 0x00	; 0
    20ca:	50 e0       	ldi	r21, 0x00	; 0
    20cc:	ba 01       	movw	r22, r20
    20ce:	9c d7       	rcall	.+3896   	; 0x3008 <xTaskGenericNotifyFromISR>
    20d0:	19 86       	std	Y+9, r1	; 0x09
    20d2:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    20d4:	c6 01       	movw	r24, r12
    20d6:	df 91       	pop	r29
    20d8:	cf 91       	pop	r28
    20da:	1f 91       	pop	r17
    20dc:	0f 91       	pop	r16
    20de:	ff 90       	pop	r15
    20e0:	ef 90       	pop	r14
    20e2:	df 90       	pop	r13
    20e4:	cf 90       	pop	r12
    20e6:	bf 90       	pop	r11
    20e8:	af 90       	pop	r10
    20ea:	08 95       	ret

000020ec <prvResetNextTaskUnblockTime>:
    20ec:	e0 91 9c 13 	lds	r30, 0x139C	; 0x80139c <pxDelayedTaskList>
    20f0:	f0 91 9d 13 	lds	r31, 0x139D	; 0x80139d <pxDelayedTaskList+0x1>
    20f4:	80 81       	ld	r24, Z
    20f6:	81 11       	cpse	r24, r1
    20f8:	0c c0       	rjmp	.+24     	; 0x2112 <prvResetNextTaskUnblockTime+0x26>
    20fa:	8f ef       	ldi	r24, 0xFF	; 255
    20fc:	9f ef       	ldi	r25, 0xFF	; 255
    20fe:	dc 01       	movw	r26, r24
    2100:	80 93 69 13 	sts	0x1369, r24	; 0x801369 <xNextTaskUnblockTime>
    2104:	90 93 6a 13 	sts	0x136A, r25	; 0x80136a <xNextTaskUnblockTime+0x1>
    2108:	a0 93 6b 13 	sts	0x136B, r26	; 0x80136b <xNextTaskUnblockTime+0x2>
    210c:	b0 93 6c 13 	sts	0x136C, r27	; 0x80136c <xNextTaskUnblockTime+0x3>
    2110:	08 95       	ret
    2112:	e0 91 9c 13 	lds	r30, 0x139C	; 0x80139c <pxDelayedTaskList>
    2116:	f0 91 9d 13 	lds	r31, 0x139D	; 0x80139d <pxDelayedTaskList+0x1>
    211a:	07 80       	ldd	r0, Z+7	; 0x07
    211c:	f0 85       	ldd	r31, Z+8	; 0x08
    211e:	e0 2d       	mov	r30, r0
    2120:	00 84       	ldd	r0, Z+8	; 0x08
    2122:	f1 85       	ldd	r31, Z+9	; 0x09
    2124:	e0 2d       	mov	r30, r0
    2126:	82 81       	ldd	r24, Z+2	; 0x02
    2128:	93 81       	ldd	r25, Z+3	; 0x03
    212a:	a4 81       	ldd	r26, Z+4	; 0x04
    212c:	b5 81       	ldd	r27, Z+5	; 0x05
    212e:	80 93 69 13 	sts	0x1369, r24	; 0x801369 <xNextTaskUnblockTime>
    2132:	90 93 6a 13 	sts	0x136A, r25	; 0x80136a <xNextTaskUnblockTime+0x1>
    2136:	a0 93 6b 13 	sts	0x136B, r26	; 0x80136b <xNextTaskUnblockTime+0x2>
    213a:	b0 93 6c 13 	sts	0x136C, r27	; 0x80136c <xNextTaskUnblockTime+0x3>
    213e:	08 95       	ret

00002140 <prvAddCurrentTaskToDelayedList>:
    2140:	8f 92       	push	r8
    2142:	9f 92       	push	r9
    2144:	af 92       	push	r10
    2146:	bf 92       	push	r11
    2148:	cf 92       	push	r12
    214a:	df 92       	push	r13
    214c:	ef 92       	push	r14
    214e:	ff 92       	push	r15
    2150:	cf 93       	push	r28
    2152:	6b 01       	movw	r12, r22
    2154:	7c 01       	movw	r14, r24
    2156:	c4 2f       	mov	r28, r20
    2158:	80 90 73 13 	lds	r8, 0x1373	; 0x801373 <xTickCount>
    215c:	90 90 74 13 	lds	r9, 0x1374	; 0x801374 <xTickCount+0x1>
    2160:	a0 90 75 13 	lds	r10, 0x1375	; 0x801375 <xTickCount+0x2>
    2164:	b0 90 76 13 	lds	r11, 0x1376	; 0x801376 <xTickCount+0x3>
    2168:	80 91 e0 13 	lds	r24, 0x13E0	; 0x8013e0 <pxCurrentTCB>
    216c:	90 91 e1 13 	lds	r25, 0x13E1	; 0x8013e1 <pxCurrentTCB+0x1>
    2170:	02 96       	adiw	r24, 0x02	; 2
    2172:	af d8       	rcall	.-3746   	; 0x12d2 <uxListRemove>
    2174:	8f ef       	ldi	r24, 0xFF	; 255
    2176:	c8 16       	cp	r12, r24
    2178:	d8 06       	cpc	r13, r24
    217a:	e8 06       	cpc	r14, r24
    217c:	f8 06       	cpc	r15, r24
    217e:	61 f4       	brne	.+24     	; 0x2198 <prvAddCurrentTaskToDelayedList+0x58>
    2180:	cc 23       	and	r28, r28
    2182:	51 f0       	breq	.+20     	; 0x2198 <prvAddCurrentTaskToDelayedList+0x58>
    2184:	60 91 e0 13 	lds	r22, 0x13E0	; 0x8013e0 <pxCurrentTCB>
    2188:	70 91 e1 13 	lds	r23, 0x13E1	; 0x8013e1 <pxCurrentTCB+0x1>
    218c:	6e 5f       	subi	r22, 0xFE	; 254
    218e:	7f 4f       	sbci	r23, 0xFF	; 255
    2190:	88 e7       	ldi	r24, 0x78	; 120
    2192:	93 e1       	ldi	r25, 0x13	; 19
    2194:	40 d8       	rcall	.-3968   	; 0x1216 <vListInsertEnd>
    2196:	3d c0       	rjmp	.+122    	; 0x2212 <__stack+0x13>
    2198:	c8 0c       	add	r12, r8
    219a:	d9 1c       	adc	r13, r9
    219c:	ea 1c       	adc	r14, r10
    219e:	fb 1c       	adc	r15, r11
    21a0:	e0 91 e0 13 	lds	r30, 0x13E0	; 0x8013e0 <pxCurrentTCB>
    21a4:	f0 91 e1 13 	lds	r31, 0x13E1	; 0x8013e1 <pxCurrentTCB+0x1>
    21a8:	c2 82       	std	Z+2, r12	; 0x02
    21aa:	d3 82       	std	Z+3, r13	; 0x03
    21ac:	e4 82       	std	Z+4, r14	; 0x04
    21ae:	f5 82       	std	Z+5, r15	; 0x05
    21b0:	c8 14       	cp	r12, r8
    21b2:	d9 04       	cpc	r13, r9
    21b4:	ea 04       	cpc	r14, r10
    21b6:	fb 04       	cpc	r15, r11
    21b8:	60 f4       	brcc	.+24     	; 0x21d2 <prvAddCurrentTaskToDelayedList+0x92>
    21ba:	60 91 e0 13 	lds	r22, 0x13E0	; 0x8013e0 <pxCurrentTCB>
    21be:	70 91 e1 13 	lds	r23, 0x13E1	; 0x8013e1 <pxCurrentTCB+0x1>
    21c2:	80 91 9a 13 	lds	r24, 0x139A	; 0x80139a <pxOverflowDelayedTaskList>
    21c6:	90 91 9b 13 	lds	r25, 0x139B	; 0x80139b <pxOverflowDelayedTaskList+0x1>
    21ca:	6e 5f       	subi	r22, 0xFE	; 254
    21cc:	7f 4f       	sbci	r23, 0xFF	; 255
    21ce:	44 d8       	rcall	.-3960   	; 0x1258 <vListInsert>
    21d0:	20 c0       	rjmp	.+64     	; 0x2212 <__stack+0x13>
    21d2:	60 91 e0 13 	lds	r22, 0x13E0	; 0x8013e0 <pxCurrentTCB>
    21d6:	70 91 e1 13 	lds	r23, 0x13E1	; 0x8013e1 <pxCurrentTCB+0x1>
    21da:	80 91 9c 13 	lds	r24, 0x139C	; 0x80139c <pxDelayedTaskList>
    21de:	90 91 9d 13 	lds	r25, 0x139D	; 0x80139d <pxDelayedTaskList+0x1>
    21e2:	6e 5f       	subi	r22, 0xFE	; 254
    21e4:	7f 4f       	sbci	r23, 0xFF	; 255
    21e6:	38 d8       	rcall	.-3984   	; 0x1258 <vListInsert>
    21e8:	80 91 69 13 	lds	r24, 0x1369	; 0x801369 <xNextTaskUnblockTime>
    21ec:	90 91 6a 13 	lds	r25, 0x136A	; 0x80136a <xNextTaskUnblockTime+0x1>
    21f0:	a0 91 6b 13 	lds	r26, 0x136B	; 0x80136b <xNextTaskUnblockTime+0x2>
    21f4:	b0 91 6c 13 	lds	r27, 0x136C	; 0x80136c <xNextTaskUnblockTime+0x3>
    21f8:	c8 16       	cp	r12, r24
    21fa:	d9 06       	cpc	r13, r25
    21fc:	ea 06       	cpc	r14, r26
    21fe:	fb 06       	cpc	r15, r27
    2200:	40 f4       	brcc	.+16     	; 0x2212 <__stack+0x13>
    2202:	c0 92 69 13 	sts	0x1369, r12	; 0x801369 <xNextTaskUnblockTime>
    2206:	d0 92 6a 13 	sts	0x136A, r13	; 0x80136a <xNextTaskUnblockTime+0x1>
    220a:	e0 92 6b 13 	sts	0x136B, r14	; 0x80136b <xNextTaskUnblockTime+0x2>
    220e:	f0 92 6c 13 	sts	0x136C, r15	; 0x80136c <xNextTaskUnblockTime+0x3>
    2212:	cf 91       	pop	r28
    2214:	ff 90       	pop	r15
    2216:	ef 90       	pop	r14
    2218:	df 90       	pop	r13
    221a:	cf 90       	pop	r12
    221c:	bf 90       	pop	r11
    221e:	af 90       	pop	r10
    2220:	9f 90       	pop	r9
    2222:	8f 90       	pop	r8
    2224:	08 95       	ret

00002226 <xTaskCreate>:
    2226:	4f 92       	push	r4
    2228:	5f 92       	push	r5
    222a:	6f 92       	push	r6
    222c:	7f 92       	push	r7
    222e:	8f 92       	push	r8
    2230:	9f 92       	push	r9
    2232:	af 92       	push	r10
    2234:	bf 92       	push	r11
    2236:	cf 92       	push	r12
    2238:	df 92       	push	r13
    223a:	ef 92       	push	r14
    223c:	ff 92       	push	r15
    223e:	0f 93       	push	r16
    2240:	cf 93       	push	r28
    2242:	df 93       	push	r29
    2244:	4c 01       	movw	r8, r24
    2246:	6b 01       	movw	r12, r22
    2248:	5a 01       	movw	r10, r20
    224a:	29 01       	movw	r4, r18
    224c:	ca 01       	movw	r24, r20
    224e:	0e 94 0c 08 	call	0x1018	; 0x1018 <pvPortMalloc>
    2252:	3c 01       	movw	r6, r24
    2254:	89 2b       	or	r24, r25
    2256:	09 f4       	brne	.+2      	; 0x225a <xTaskCreate+0x34>
    2258:	f3 c0       	rjmp	.+486    	; 0x2440 <xTaskCreate+0x21a>
    225a:	80 e3       	ldi	r24, 0x30	; 48
    225c:	90 e0       	ldi	r25, 0x00	; 0
    225e:	0e 94 0c 08 	call	0x1018	; 0x1018 <pvPortMalloc>
    2262:	ec 01       	movw	r28, r24
    2264:	89 2b       	or	r24, r25
    2266:	99 f0       	breq	.+38     	; 0x228e <xTaskCreate+0x68>
    2268:	7c 8e       	std	Y+28, r7	; 0x1c
    226a:	6b 8e       	std	Y+27, r6	; 0x1b
    226c:	a5 01       	movw	r20, r10
    226e:	65 ea       	ldi	r22, 0xA5	; 165
    2270:	70 e0       	ldi	r23, 0x00	; 0
    2272:	c3 01       	movw	r24, r6
    2274:	0e 94 95 27 	call	0x4f2a	; 0x4f2a <memset>
    2278:	21 e0       	ldi	r18, 0x01	; 1
    227a:	a2 1a       	sub	r10, r18
    227c:	b1 08       	sbc	r11, r1
    227e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2280:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2282:	a8 0e       	add	r10, r24
    2284:	b9 1e       	adc	r11, r25
    2286:	c1 14       	cp	r12, r1
    2288:	d1 04       	cpc	r13, r1
    228a:	29 f4       	brne	.+10     	; 0x2296 <xTaskCreate+0x70>
    228c:	20 c0       	rjmp	.+64     	; 0x22ce <xTaskCreate+0xa8>
    228e:	c3 01       	movw	r24, r6
    2290:	0e 94 c5 08 	call	0x118a	; 0x118a <vPortFree>
    2294:	d5 c0       	rjmp	.+426    	; 0x2440 <xTaskCreate+0x21a>
    2296:	d6 01       	movw	r26, r12
    2298:	8c 91       	ld	r24, X
    229a:	8d 8f       	std	Y+29, r24	; 0x1d
    229c:	8c 91       	ld	r24, X
    229e:	88 23       	and	r24, r24
    22a0:	a1 f0       	breq	.+40     	; 0x22ca <xTaskCreate+0xa4>
    22a2:	ae 01       	movw	r20, r28
    22a4:	42 5e       	subi	r20, 0xE2	; 226
    22a6:	5f 4f       	sbci	r21, 0xFF	; 255
    22a8:	f6 01       	movw	r30, r12
    22aa:	31 96       	adiw	r30, 0x01	; 1
    22ac:	b8 e0       	ldi	r27, 0x08	; 8
    22ae:	cb 0e       	add	r12, r27
    22b0:	d1 1c       	adc	r13, r1
    22b2:	cf 01       	movw	r24, r30
    22b4:	21 91       	ld	r18, Z+
    22b6:	da 01       	movw	r26, r20
    22b8:	2d 93       	st	X+, r18
    22ba:	ad 01       	movw	r20, r26
    22bc:	dc 01       	movw	r26, r24
    22be:	8c 91       	ld	r24, X
    22c0:	88 23       	and	r24, r24
    22c2:	19 f0       	breq	.+6      	; 0x22ca <xTaskCreate+0xa4>
    22c4:	ec 15       	cp	r30, r12
    22c6:	fd 05       	cpc	r31, r13
    22c8:	a1 f7       	brne	.-24     	; 0x22b2 <xTaskCreate+0x8c>
    22ca:	1c a2       	std	Y+36, r1	; 0x24
    22cc:	01 c0       	rjmp	.+2      	; 0x22d0 <xTaskCreate+0xaa>
    22ce:	1d 8e       	std	Y+29, r1	; 0x1d
    22d0:	04 30       	cpi	r16, 0x04	; 4
    22d2:	08 f0       	brcs	.+2      	; 0x22d6 <xTaskCreate+0xb0>
    22d4:	03 e0       	ldi	r16, 0x03	; 3
    22d6:	0a 8f       	std	Y+26, r16	; 0x1a
    22d8:	0f a3       	std	Y+39, r16	; 0x27
    22da:	18 a6       	std	Y+40, r1	; 0x28
    22dc:	6e 01       	movw	r12, r28
    22de:	b2 e0       	ldi	r27, 0x02	; 2
    22e0:	cb 0e       	add	r12, r27
    22e2:	d1 1c       	adc	r13, r1
    22e4:	c6 01       	movw	r24, r12
    22e6:	0e 94 07 09 	call	0x120e	; 0x120e <vListInitialiseItem>
    22ea:	ce 01       	movw	r24, r28
    22ec:	0e 96       	adiw	r24, 0x0e	; 14
    22ee:	0e 94 07 09 	call	0x120e	; 0x120e <vListInitialiseItem>
    22f2:	db 87       	std	Y+11, r29	; 0x0b
    22f4:	ca 87       	std	Y+10, r28	; 0x0a
    22f6:	84 e0       	ldi	r24, 0x04	; 4
    22f8:	90 e0       	ldi	r25, 0x00	; 0
    22fa:	a0 e0       	ldi	r26, 0x00	; 0
    22fc:	b0 e0       	ldi	r27, 0x00	; 0
    22fe:	80 1b       	sub	r24, r16
    2300:	91 09       	sbc	r25, r1
    2302:	a1 09       	sbc	r26, r1
    2304:	b1 09       	sbc	r27, r1
    2306:	8e 87       	std	Y+14, r24	; 0x0e
    2308:	9f 87       	std	Y+15, r25	; 0x0f
    230a:	a8 8b       	std	Y+16, r26	; 0x10
    230c:	b9 8b       	std	Y+17, r27	; 0x11
    230e:	df 8b       	std	Y+23, r29	; 0x17
    2310:	ce 8b       	std	Y+22, r28	; 0x16
    2312:	1a a6       	std	Y+42, r1	; 0x2a
    2314:	19 a6       	std	Y+41, r1	; 0x29
    2316:	1b a6       	std	Y+43, r1	; 0x2b
    2318:	1c a6       	std	Y+44, r1	; 0x2c
    231a:	1d a6       	std	Y+45, r1	; 0x2d
    231c:	1e a6       	std	Y+46, r1	; 0x2e
    231e:	1f a6       	std	Y+47, r1	; 0x2f
    2320:	a2 01       	movw	r20, r4
    2322:	b4 01       	movw	r22, r8
    2324:	c5 01       	movw	r24, r10
    2326:	0e 94 90 09 	call	0x1320	; 0x1320 <pxPortInitialiseStack>
    232a:	99 83       	std	Y+1, r25	; 0x01
    232c:	88 83       	st	Y, r24
    232e:	e1 14       	cp	r14, r1
    2330:	f1 04       	cpc	r15, r1
    2332:	19 f0       	breq	.+6      	; 0x233a <xTaskCreate+0x114>
    2334:	f7 01       	movw	r30, r14
    2336:	d1 83       	std	Z+1, r29	; 0x01
    2338:	c0 83       	st	Z, r28
    233a:	0f b6       	in	r0, 0x3f	; 63
    233c:	f8 94       	cli
    233e:	0f 92       	push	r0
    2340:	80 91 77 13 	lds	r24, 0x1377	; 0x801377 <uxCurrentNumberOfTasks>
    2344:	8f 5f       	subi	r24, 0xFF	; 255
    2346:	80 93 77 13 	sts	0x1377, r24	; 0x801377 <uxCurrentNumberOfTasks>
    234a:	80 91 e0 13 	lds	r24, 0x13E0	; 0x8013e0 <pxCurrentTCB>
    234e:	90 91 e1 13 	lds	r25, 0x13E1	; 0x8013e1 <pxCurrentTCB+0x1>
    2352:	89 2b       	or	r24, r25
    2354:	d1 f5       	brne	.+116    	; 0x23ca <xTaskCreate+0x1a4>
    2356:	d0 93 e1 13 	sts	0x13E1, r29	; 0x8013e1 <pxCurrentTCB+0x1>
    235a:	c0 93 e0 13 	sts	0x13E0, r28	; 0x8013e0 <pxCurrentTCB>
    235e:	80 91 77 13 	lds	r24, 0x1377	; 0x801377 <uxCurrentNumberOfTasks>
    2362:	81 30       	cpi	r24, 0x01	; 1
    2364:	09 f0       	breq	.+2      	; 0x2368 <xTaskCreate+0x142>
    2366:	41 c0       	rjmp	.+130    	; 0x23ea <xTaskCreate+0x1c4>
    2368:	84 eb       	ldi	r24, 0xB4	; 180
    236a:	93 e1       	ldi	r25, 0x13	; 19
    236c:	0e 94 f6 08 	call	0x11ec	; 0x11ec <vListInitialise>
    2370:	8f eb       	ldi	r24, 0xBF	; 191
    2372:	93 e1       	ldi	r25, 0x13	; 19
    2374:	0e 94 f6 08 	call	0x11ec	; 0x11ec <vListInitialise>
    2378:	8a ec       	ldi	r24, 0xCA	; 202
    237a:	93 e1       	ldi	r25, 0x13	; 19
    237c:	0e 94 f6 08 	call	0x11ec	; 0x11ec <vListInitialise>
    2380:	85 ed       	ldi	r24, 0xD5	; 213
    2382:	93 e1       	ldi	r25, 0x13	; 19
    2384:	0e 94 f6 08 	call	0x11ec	; 0x11ec <vListInitialise>
    2388:	89 ea       	ldi	r24, 0xA9	; 169
    238a:	93 e1       	ldi	r25, 0x13	; 19
    238c:	0e 94 f6 08 	call	0x11ec	; 0x11ec <vListInitialise>
    2390:	8e e9       	ldi	r24, 0x9E	; 158
    2392:	93 e1       	ldi	r25, 0x13	; 19
    2394:	0e 94 f6 08 	call	0x11ec	; 0x11ec <vListInitialise>
    2398:	8f e8       	ldi	r24, 0x8F	; 143
    239a:	93 e1       	ldi	r25, 0x13	; 19
    239c:	0e 94 f6 08 	call	0x11ec	; 0x11ec <vListInitialise>
    23a0:	84 e8       	ldi	r24, 0x84	; 132
    23a2:	93 e1       	ldi	r25, 0x13	; 19
    23a4:	0e 94 f6 08 	call	0x11ec	; 0x11ec <vListInitialise>
    23a8:	88 e7       	ldi	r24, 0x78	; 120
    23aa:	93 e1       	ldi	r25, 0x13	; 19
    23ac:	0e 94 f6 08 	call	0x11ec	; 0x11ec <vListInitialise>
    23b0:	89 ea       	ldi	r24, 0xA9	; 169
    23b2:	93 e1       	ldi	r25, 0x13	; 19
    23b4:	90 93 9d 13 	sts	0x139D, r25	; 0x80139d <pxDelayedTaskList+0x1>
    23b8:	80 93 9c 13 	sts	0x139C, r24	; 0x80139c <pxDelayedTaskList>
    23bc:	8e e9       	ldi	r24, 0x9E	; 158
    23be:	93 e1       	ldi	r25, 0x13	; 19
    23c0:	90 93 9b 13 	sts	0x139B, r25	; 0x80139b <pxOverflowDelayedTaskList+0x1>
    23c4:	80 93 9a 13 	sts	0x139A, r24	; 0x80139a <pxOverflowDelayedTaskList>
    23c8:	10 c0       	rjmp	.+32     	; 0x23ea <xTaskCreate+0x1c4>
    23ca:	80 91 71 13 	lds	r24, 0x1371	; 0x801371 <xSchedulerRunning>
    23ce:	81 11       	cpse	r24, r1
    23d0:	0c c0       	rjmp	.+24     	; 0x23ea <xTaskCreate+0x1c4>
    23d2:	e0 91 e0 13 	lds	r30, 0x13E0	; 0x8013e0 <pxCurrentTCB>
    23d6:	f0 91 e1 13 	lds	r31, 0x13E1	; 0x8013e1 <pxCurrentTCB+0x1>
    23da:	92 8d       	ldd	r25, Z+26	; 0x1a
    23dc:	8a 8d       	ldd	r24, Y+26	; 0x1a
    23de:	89 17       	cp	r24, r25
    23e0:	20 f0       	brcs	.+8      	; 0x23ea <xTaskCreate+0x1c4>
    23e2:	d0 93 e1 13 	sts	0x13E1, r29	; 0x8013e1 <pxCurrentTCB+0x1>
    23e6:	c0 93 e0 13 	sts	0x13E0, r28	; 0x8013e0 <pxCurrentTCB>
    23ea:	80 91 6d 13 	lds	r24, 0x136D	; 0x80136d <uxTaskNumber>
    23ee:	8f 5f       	subi	r24, 0xFF	; 255
    23f0:	80 93 6d 13 	sts	0x136D, r24	; 0x80136d <uxTaskNumber>
    23f4:	8d a3       	std	Y+37, r24	; 0x25
    23f6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    23f8:	90 91 72 13 	lds	r25, 0x1372	; 0x801372 <uxTopReadyPriority>
    23fc:	98 17       	cp	r25, r24
    23fe:	10 f4       	brcc	.+4      	; 0x2404 <xTaskCreate+0x1de>
    2400:	80 93 72 13 	sts	0x1372, r24	; 0x801372 <uxTopReadyPriority>
    2404:	fb e0       	ldi	r31, 0x0B	; 11
    2406:	8f 9f       	mul	r24, r31
    2408:	c0 01       	movw	r24, r0
    240a:	11 24       	eor	r1, r1
    240c:	b6 01       	movw	r22, r12
    240e:	8c 54       	subi	r24, 0x4C	; 76
    2410:	9c 4e       	sbci	r25, 0xEC	; 236
    2412:	0e 94 0b 09 	call	0x1216	; 0x1216 <vListInsertEnd>
    2416:	0f 90       	pop	r0
    2418:	0f be       	out	0x3f, r0	; 63
    241a:	80 91 71 13 	lds	r24, 0x1371	; 0x801371 <xSchedulerRunning>
    241e:	88 23       	and	r24, r24
    2420:	59 f0       	breq	.+22     	; 0x2438 <xTaskCreate+0x212>
    2422:	e0 91 e0 13 	lds	r30, 0x13E0	; 0x8013e0 <pxCurrentTCB>
    2426:	f0 91 e1 13 	lds	r31, 0x13E1	; 0x8013e1 <pxCurrentTCB+0x1>
    242a:	92 8d       	ldd	r25, Z+26	; 0x1a
    242c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    242e:	98 17       	cp	r25, r24
    2430:	28 f4       	brcc	.+10     	; 0x243c <xTaskCreate+0x216>
    2432:	24 d8       	rcall	.-4024   	; 0x147c <vPortYield>
    2434:	81 e0       	ldi	r24, 0x01	; 1
    2436:	05 c0       	rjmp	.+10     	; 0x2442 <xTaskCreate+0x21c>
    2438:	81 e0       	ldi	r24, 0x01	; 1
    243a:	03 c0       	rjmp	.+6      	; 0x2442 <xTaskCreate+0x21c>
    243c:	81 e0       	ldi	r24, 0x01	; 1
    243e:	01 c0       	rjmp	.+2      	; 0x2442 <xTaskCreate+0x21c>
    2440:	8f ef       	ldi	r24, 0xFF	; 255
    2442:	df 91       	pop	r29
    2444:	cf 91       	pop	r28
    2446:	0f 91       	pop	r16
    2448:	ff 90       	pop	r15
    244a:	ef 90       	pop	r14
    244c:	df 90       	pop	r13
    244e:	cf 90       	pop	r12
    2450:	bf 90       	pop	r11
    2452:	af 90       	pop	r10
    2454:	9f 90       	pop	r9
    2456:	8f 90       	pop	r8
    2458:	7f 90       	pop	r7
    245a:	6f 90       	pop	r6
    245c:	5f 90       	pop	r5
    245e:	4f 90       	pop	r4
    2460:	08 95       	ret

00002462 <vTaskStartScheduler>:
    2462:	ef 92       	push	r14
    2464:	ff 92       	push	r15
    2466:	0f 93       	push	r16
    2468:	0f 2e       	mov	r0, r31
    246a:	f7 e6       	ldi	r31, 0x67	; 103
    246c:	ef 2e       	mov	r14, r31
    246e:	f3 e1       	ldi	r31, 0x13	; 19
    2470:	ff 2e       	mov	r15, r31
    2472:	f0 2d       	mov	r31, r0
    2474:	00 e0       	ldi	r16, 0x00	; 0
    2476:	20 e0       	ldi	r18, 0x00	; 0
    2478:	30 e0       	ldi	r19, 0x00	; 0
    247a:	40 ec       	ldi	r20, 0xC0	; 192
    247c:	50 e0       	ldi	r21, 0x00	; 0
    247e:	60 e5       	ldi	r22, 0x50	; 80
    2480:	73 e0       	ldi	r23, 0x03	; 3
    2482:	8d ec       	ldi	r24, 0xCD	; 205
    2484:	90 e0       	ldi	r25, 0x00	; 0
    2486:	cf de       	rcall	.-610    	; 0x2226 <xTaskCreate>
    2488:	81 30       	cpi	r24, 0x01	; 1
    248a:	19 f5       	brne	.+70     	; 0x24d2 <vTaskStartScheduler+0x70>
    248c:	cc d6       	rcall	.+3480   	; 0x3226 <xTimerCreateTimerTask>
    248e:	81 30       	cpi	r24, 0x01	; 1
    2490:	01 f5       	brne	.+64     	; 0x24d2 <vTaskStartScheduler+0x70>
    2492:	f8 94       	cli
    2494:	8f ef       	ldi	r24, 0xFF	; 255
    2496:	9f ef       	ldi	r25, 0xFF	; 255
    2498:	dc 01       	movw	r26, r24
    249a:	80 93 69 13 	sts	0x1369, r24	; 0x801369 <xNextTaskUnblockTime>
    249e:	90 93 6a 13 	sts	0x136A, r25	; 0x80136a <xNextTaskUnblockTime+0x1>
    24a2:	a0 93 6b 13 	sts	0x136B, r26	; 0x80136b <xNextTaskUnblockTime+0x2>
    24a6:	b0 93 6c 13 	sts	0x136C, r27	; 0x80136c <xNextTaskUnblockTime+0x3>
    24aa:	81 e0       	ldi	r24, 0x01	; 1
    24ac:	80 93 71 13 	sts	0x1371, r24	; 0x801371 <xSchedulerRunning>
    24b0:	10 92 73 13 	sts	0x1373, r1	; 0x801373 <xTickCount>
    24b4:	10 92 74 13 	sts	0x1374, r1	; 0x801374 <xTickCount+0x1>
    24b8:	10 92 75 13 	sts	0x1375, r1	; 0x801375 <xTickCount+0x2>
    24bc:	10 92 76 13 	sts	0x1376, r1	; 0x801376 <xTickCount+0x3>
    24c0:	e0 91 e0 13 	lds	r30, 0x13E0	; 0x8013e0 <pxCurrentTCB>
    24c4:	f0 91 e1 13 	lds	r31, 0x13E1	; 0x8013e1 <pxCurrentTCB+0x1>
    24c8:	81 a5       	ldd	r24, Z+41	; 0x29
    24ca:	0e 94 43 06 	call	0xc86	; 0xc86 <task_switch_in>
    24ce:	0e 94 02 0a 	call	0x1404	; 0x1404 <xPortStartScheduler>
    24d2:	0f 91       	pop	r16
    24d4:	ff 90       	pop	r15
    24d6:	ef 90       	pop	r14
    24d8:	08 95       	ret

000024da <vTaskSuspendAll>:
    24da:	80 91 66 13 	lds	r24, 0x1366	; 0x801366 <uxSchedulerSuspended>
    24de:	8f 5f       	subi	r24, 0xFF	; 255
    24e0:	80 93 66 13 	sts	0x1366, r24	; 0x801366 <uxSchedulerSuspended>
    24e4:	08 95       	ret

000024e6 <xTaskGetTickCount>:
    24e6:	0f b6       	in	r0, 0x3f	; 63
    24e8:	f8 94       	cli
    24ea:	0f 92       	push	r0
    24ec:	60 91 73 13 	lds	r22, 0x1373	; 0x801373 <xTickCount>
    24f0:	70 91 74 13 	lds	r23, 0x1374	; 0x801374 <xTickCount+0x1>
    24f4:	80 91 75 13 	lds	r24, 0x1375	; 0x801375 <xTickCount+0x2>
    24f8:	90 91 76 13 	lds	r25, 0x1376	; 0x801376 <xTickCount+0x3>
    24fc:	0f 90       	pop	r0
    24fe:	0f be       	out	0x3f, r0	; 63
    2500:	08 95       	ret

00002502 <xTaskIncrementTick>:
    2502:	9f 92       	push	r9
    2504:	af 92       	push	r10
    2506:	bf 92       	push	r11
    2508:	cf 92       	push	r12
    250a:	df 92       	push	r13
    250c:	ef 92       	push	r14
    250e:	ff 92       	push	r15
    2510:	0f 93       	push	r16
    2512:	1f 93       	push	r17
    2514:	cf 93       	push	r28
    2516:	df 93       	push	r29
    2518:	80 91 66 13 	lds	r24, 0x1366	; 0x801366 <uxSchedulerSuspended>
    251c:	81 11       	cpse	r24, r1
    251e:	ad c0       	rjmp	.+346    	; 0x267a <xTaskIncrementTick+0x178>
    2520:	c0 90 73 13 	lds	r12, 0x1373	; 0x801373 <xTickCount>
    2524:	d0 90 74 13 	lds	r13, 0x1374	; 0x801374 <xTickCount+0x1>
    2528:	e0 90 75 13 	lds	r14, 0x1375	; 0x801375 <xTickCount+0x2>
    252c:	f0 90 76 13 	lds	r15, 0x1376	; 0x801376 <xTickCount+0x3>
    2530:	8f ef       	ldi	r24, 0xFF	; 255
    2532:	c8 1a       	sub	r12, r24
    2534:	d8 0a       	sbc	r13, r24
    2536:	e8 0a       	sbc	r14, r24
    2538:	f8 0a       	sbc	r15, r24
    253a:	c0 92 73 13 	sts	0x1373, r12	; 0x801373 <xTickCount>
    253e:	d0 92 74 13 	sts	0x1374, r13	; 0x801374 <xTickCount+0x1>
    2542:	e0 92 75 13 	sts	0x1375, r14	; 0x801375 <xTickCount+0x2>
    2546:	f0 92 76 13 	sts	0x1376, r15	; 0x801376 <xTickCount+0x3>
    254a:	c1 14       	cp	r12, r1
    254c:	d1 04       	cpc	r13, r1
    254e:	e1 04       	cpc	r14, r1
    2550:	f1 04       	cpc	r15, r1
    2552:	b1 f4       	brne	.+44     	; 0x2580 <xTaskIncrementTick+0x7e>
    2554:	80 91 9c 13 	lds	r24, 0x139C	; 0x80139c <pxDelayedTaskList>
    2558:	90 91 9d 13 	lds	r25, 0x139D	; 0x80139d <pxDelayedTaskList+0x1>
    255c:	20 91 9a 13 	lds	r18, 0x139A	; 0x80139a <pxOverflowDelayedTaskList>
    2560:	30 91 9b 13 	lds	r19, 0x139B	; 0x80139b <pxOverflowDelayedTaskList+0x1>
    2564:	30 93 9d 13 	sts	0x139D, r19	; 0x80139d <pxDelayedTaskList+0x1>
    2568:	20 93 9c 13 	sts	0x139C, r18	; 0x80139c <pxDelayedTaskList>
    256c:	90 93 9b 13 	sts	0x139B, r25	; 0x80139b <pxOverflowDelayedTaskList+0x1>
    2570:	80 93 9a 13 	sts	0x139A, r24	; 0x80139a <pxOverflowDelayedTaskList>
    2574:	80 91 6e 13 	lds	r24, 0x136E	; 0x80136e <xNumOfOverflows>
    2578:	8f 5f       	subi	r24, 0xFF	; 255
    257a:	80 93 6e 13 	sts	0x136E, r24	; 0x80136e <xNumOfOverflows>
    257e:	b6 dd       	rcall	.-1172   	; 0x20ec <prvResetNextTaskUnblockTime>
    2580:	80 91 69 13 	lds	r24, 0x1369	; 0x801369 <xNextTaskUnblockTime>
    2584:	90 91 6a 13 	lds	r25, 0x136A	; 0x80136a <xNextTaskUnblockTime+0x1>
    2588:	a0 91 6b 13 	lds	r26, 0x136B	; 0x80136b <xNextTaskUnblockTime+0x2>
    258c:	b0 91 6c 13 	lds	r27, 0x136C	; 0x80136c <xNextTaskUnblockTime+0x3>
    2590:	c8 16       	cp	r12, r24
    2592:	d9 06       	cpc	r13, r25
    2594:	ea 06       	cpc	r14, r26
    2596:	fb 06       	cpc	r15, r27
    2598:	10 f4       	brcc	.+4      	; 0x259e <xTaskIncrementTick+0x9c>
    259a:	b1 2c       	mov	r11, r1
    259c:	5d c0       	rjmp	.+186    	; 0x2658 <xTaskIncrementTick+0x156>
    259e:	b1 2c       	mov	r11, r1
    25a0:	0f 2e       	mov	r0, r31
    25a2:	fb e0       	ldi	r31, 0x0B	; 11
    25a4:	af 2e       	mov	r10, r31
    25a6:	f0 2d       	mov	r31, r0
    25a8:	99 24       	eor	r9, r9
    25aa:	93 94       	inc	r9
    25ac:	e0 91 9c 13 	lds	r30, 0x139C	; 0x80139c <pxDelayedTaskList>
    25b0:	f0 91 9d 13 	lds	r31, 0x139D	; 0x80139d <pxDelayedTaskList+0x1>
    25b4:	80 81       	ld	r24, Z
    25b6:	81 11       	cpse	r24, r1
    25b8:	0c c0       	rjmp	.+24     	; 0x25d2 <xTaskIncrementTick+0xd0>
    25ba:	8f ef       	ldi	r24, 0xFF	; 255
    25bc:	9f ef       	ldi	r25, 0xFF	; 255
    25be:	dc 01       	movw	r26, r24
    25c0:	80 93 69 13 	sts	0x1369, r24	; 0x801369 <xNextTaskUnblockTime>
    25c4:	90 93 6a 13 	sts	0x136A, r25	; 0x80136a <xNextTaskUnblockTime+0x1>
    25c8:	a0 93 6b 13 	sts	0x136B, r26	; 0x80136b <xNextTaskUnblockTime+0x2>
    25cc:	b0 93 6c 13 	sts	0x136C, r27	; 0x80136c <xNextTaskUnblockTime+0x3>
    25d0:	43 c0       	rjmp	.+134    	; 0x2658 <xTaskIncrementTick+0x156>
    25d2:	e0 91 9c 13 	lds	r30, 0x139C	; 0x80139c <pxDelayedTaskList>
    25d6:	f0 91 9d 13 	lds	r31, 0x139D	; 0x80139d <pxDelayedTaskList+0x1>
    25da:	07 80       	ldd	r0, Z+7	; 0x07
    25dc:	f0 85       	ldd	r31, Z+8	; 0x08
    25de:	e0 2d       	mov	r30, r0
    25e0:	c0 85       	ldd	r28, Z+8	; 0x08
    25e2:	d1 85       	ldd	r29, Z+9	; 0x09
    25e4:	8a 81       	ldd	r24, Y+2	; 0x02
    25e6:	9b 81       	ldd	r25, Y+3	; 0x03
    25e8:	ac 81       	ldd	r26, Y+4	; 0x04
    25ea:	bd 81       	ldd	r27, Y+5	; 0x05
    25ec:	c8 16       	cp	r12, r24
    25ee:	d9 06       	cpc	r13, r25
    25f0:	ea 06       	cpc	r14, r26
    25f2:	fb 06       	cpc	r15, r27
    25f4:	48 f4       	brcc	.+18     	; 0x2608 <xTaskIncrementTick+0x106>
    25f6:	80 93 69 13 	sts	0x1369, r24	; 0x801369 <xNextTaskUnblockTime>
    25fa:	90 93 6a 13 	sts	0x136A, r25	; 0x80136a <xNextTaskUnblockTime+0x1>
    25fe:	a0 93 6b 13 	sts	0x136B, r26	; 0x80136b <xNextTaskUnblockTime+0x2>
    2602:	b0 93 6c 13 	sts	0x136C, r27	; 0x80136c <xNextTaskUnblockTime+0x3>
    2606:	28 c0       	rjmp	.+80     	; 0x2658 <xTaskIncrementTick+0x156>
    2608:	8e 01       	movw	r16, r28
    260a:	0e 5f       	subi	r16, 0xFE	; 254
    260c:	1f 4f       	sbci	r17, 0xFF	; 255
    260e:	c8 01       	movw	r24, r16
    2610:	0e 94 69 09 	call	0x12d2	; 0x12d2 <uxListRemove>
    2614:	88 8d       	ldd	r24, Y+24	; 0x18
    2616:	99 8d       	ldd	r25, Y+25	; 0x19
    2618:	89 2b       	or	r24, r25
    261a:	21 f0       	breq	.+8      	; 0x2624 <xTaskIncrementTick+0x122>
    261c:	ce 01       	movw	r24, r28
    261e:	0e 96       	adiw	r24, 0x0e	; 14
    2620:	0e 94 69 09 	call	0x12d2	; 0x12d2 <uxListRemove>
    2624:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2626:	90 91 72 13 	lds	r25, 0x1372	; 0x801372 <uxTopReadyPriority>
    262a:	98 17       	cp	r25, r24
    262c:	10 f4       	brcc	.+4      	; 0x2632 <xTaskIncrementTick+0x130>
    262e:	80 93 72 13 	sts	0x1372, r24	; 0x801372 <uxTopReadyPriority>
    2632:	a8 9e       	mul	r10, r24
    2634:	c0 01       	movw	r24, r0
    2636:	11 24       	eor	r1, r1
    2638:	b8 01       	movw	r22, r16
    263a:	8c 54       	subi	r24, 0x4C	; 76
    263c:	9c 4e       	sbci	r25, 0xEC	; 236
    263e:	0e 94 0b 09 	call	0x1216	; 0x1216 <vListInsertEnd>
    2642:	e0 91 e0 13 	lds	r30, 0x13E0	; 0x8013e0 <pxCurrentTCB>
    2646:	f0 91 e1 13 	lds	r31, 0x13E1	; 0x8013e1 <pxCurrentTCB+0x1>
    264a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    264c:	82 8d       	ldd	r24, Z+26	; 0x1a
    264e:	98 17       	cp	r25, r24
    2650:	08 f4       	brcc	.+2      	; 0x2654 <xTaskIncrementTick+0x152>
    2652:	ac cf       	rjmp	.-168    	; 0x25ac <xTaskIncrementTick+0xaa>
    2654:	b9 2c       	mov	r11, r9
    2656:	aa cf       	rjmp	.-172    	; 0x25ac <xTaskIncrementTick+0xaa>
    2658:	e0 91 e0 13 	lds	r30, 0x13E0	; 0x8013e0 <pxCurrentTCB>
    265c:	f0 91 e1 13 	lds	r31, 0x13E1	; 0x8013e1 <pxCurrentTCB+0x1>
    2660:	e2 8d       	ldd	r30, Z+26	; 0x1a
    2662:	8b e0       	ldi	r24, 0x0B	; 11
    2664:	e8 9f       	mul	r30, r24
    2666:	f0 01       	movw	r30, r0
    2668:	11 24       	eor	r1, r1
    266a:	ec 54       	subi	r30, 0x4C	; 76
    266c:	fc 4e       	sbci	r31, 0xEC	; 236
    266e:	80 81       	ld	r24, Z
    2670:	82 30       	cpi	r24, 0x02	; 2
    2672:	48 f0       	brcs	.+18     	; 0x2686 <xTaskIncrementTick+0x184>
    2674:	bb 24       	eor	r11, r11
    2676:	b3 94       	inc	r11
    2678:	06 c0       	rjmp	.+12     	; 0x2686 <xTaskIncrementTick+0x184>
    267a:	80 91 70 13 	lds	r24, 0x1370	; 0x801370 <uxPendedTicks>
    267e:	8f 5f       	subi	r24, 0xFF	; 255
    2680:	80 93 70 13 	sts	0x1370, r24	; 0x801370 <uxPendedTicks>
    2684:	b1 2c       	mov	r11, r1
    2686:	80 91 6f 13 	lds	r24, 0x136F	; 0x80136f <xYieldPending>
    268a:	88 23       	and	r24, r24
    268c:	11 f0       	breq	.+4      	; 0x2692 <xTaskIncrementTick+0x190>
    268e:	bb 24       	eor	r11, r11
    2690:	b3 94       	inc	r11
    2692:	8b 2d       	mov	r24, r11
    2694:	df 91       	pop	r29
    2696:	cf 91       	pop	r28
    2698:	1f 91       	pop	r17
    269a:	0f 91       	pop	r16
    269c:	ff 90       	pop	r15
    269e:	ef 90       	pop	r14
    26a0:	df 90       	pop	r13
    26a2:	cf 90       	pop	r12
    26a4:	bf 90       	pop	r11
    26a6:	af 90       	pop	r10
    26a8:	9f 90       	pop	r9
    26aa:	08 95       	ret

000026ac <xTaskResumeAll>:
    26ac:	cf 92       	push	r12
    26ae:	df 92       	push	r13
    26b0:	ef 92       	push	r14
    26b2:	ff 92       	push	r15
    26b4:	0f 93       	push	r16
    26b6:	1f 93       	push	r17
    26b8:	cf 93       	push	r28
    26ba:	df 93       	push	r29
    26bc:	0f b6       	in	r0, 0x3f	; 63
    26be:	f8 94       	cli
    26c0:	0f 92       	push	r0
    26c2:	80 91 66 13 	lds	r24, 0x1366	; 0x801366 <uxSchedulerSuspended>
    26c6:	81 50       	subi	r24, 0x01	; 1
    26c8:	80 93 66 13 	sts	0x1366, r24	; 0x801366 <uxSchedulerSuspended>
    26cc:	80 91 66 13 	lds	r24, 0x1366	; 0x801366 <uxSchedulerSuspended>
    26d0:	81 11       	cpse	r24, r1
    26d2:	5a c0       	rjmp	.+180    	; 0x2788 <xTaskResumeAll+0xdc>
    26d4:	80 91 77 13 	lds	r24, 0x1377	; 0x801377 <uxCurrentNumberOfTasks>
    26d8:	81 11       	cpse	r24, r1
    26da:	2c c0       	rjmp	.+88     	; 0x2734 <xTaskResumeAll+0x88>
    26dc:	58 c0       	rjmp	.+176    	; 0x278e <xTaskResumeAll+0xe2>
    26de:	d7 01       	movw	r26, r14
    26e0:	17 96       	adiw	r26, 0x07	; 7
    26e2:	ed 91       	ld	r30, X+
    26e4:	fc 91       	ld	r31, X
    26e6:	18 97       	sbiw	r26, 0x08	; 8
    26e8:	c0 85       	ldd	r28, Z+8	; 0x08
    26ea:	d1 85       	ldd	r29, Z+9	; 0x09
    26ec:	ce 01       	movw	r24, r28
    26ee:	0e 96       	adiw	r24, 0x0e	; 14
    26f0:	0e 94 69 09 	call	0x12d2	; 0x12d2 <uxListRemove>
    26f4:	8e 01       	movw	r16, r28
    26f6:	0e 5f       	subi	r16, 0xFE	; 254
    26f8:	1f 4f       	sbci	r17, 0xFF	; 255
    26fa:	c8 01       	movw	r24, r16
    26fc:	0e 94 69 09 	call	0x12d2	; 0x12d2 <uxListRemove>
    2700:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2702:	90 91 72 13 	lds	r25, 0x1372	; 0x801372 <uxTopReadyPriority>
    2706:	98 17       	cp	r25, r24
    2708:	10 f4       	brcc	.+4      	; 0x270e <xTaskResumeAll+0x62>
    270a:	80 93 72 13 	sts	0x1372, r24	; 0x801372 <uxTopReadyPriority>
    270e:	d8 9e       	mul	r13, r24
    2710:	c0 01       	movw	r24, r0
    2712:	11 24       	eor	r1, r1
    2714:	b8 01       	movw	r22, r16
    2716:	8c 54       	subi	r24, 0x4C	; 76
    2718:	9c 4e       	sbci	r25, 0xEC	; 236
    271a:	0e 94 0b 09 	call	0x1216	; 0x1216 <vListInsertEnd>
    271e:	e0 91 e0 13 	lds	r30, 0x13E0	; 0x8013e0 <pxCurrentTCB>
    2722:	f0 91 e1 13 	lds	r31, 0x13E1	; 0x8013e1 <pxCurrentTCB+0x1>
    2726:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2728:	82 8d       	ldd	r24, Z+26	; 0x1a
    272a:	98 17       	cp	r25, r24
    272c:	88 f0       	brcs	.+34     	; 0x2750 <xTaskResumeAll+0xa4>
    272e:	c0 92 6f 13 	sts	0x136F, r12	; 0x80136f <xYieldPending>
    2732:	0e c0       	rjmp	.+28     	; 0x2750 <xTaskResumeAll+0xa4>
    2734:	c0 e0       	ldi	r28, 0x00	; 0
    2736:	d0 e0       	ldi	r29, 0x00	; 0
    2738:	0f 2e       	mov	r0, r31
    273a:	ff e8       	ldi	r31, 0x8F	; 143
    273c:	ef 2e       	mov	r14, r31
    273e:	f3 e1       	ldi	r31, 0x13	; 19
    2740:	ff 2e       	mov	r15, r31
    2742:	f0 2d       	mov	r31, r0
    2744:	0f 2e       	mov	r0, r31
    2746:	fb e0       	ldi	r31, 0x0B	; 11
    2748:	df 2e       	mov	r13, r31
    274a:	f0 2d       	mov	r31, r0
    274c:	cc 24       	eor	r12, r12
    274e:	c3 94       	inc	r12
    2750:	f7 01       	movw	r30, r14
    2752:	80 81       	ld	r24, Z
    2754:	81 11       	cpse	r24, r1
    2756:	c3 cf       	rjmp	.-122    	; 0x26de <xTaskResumeAll+0x32>
    2758:	cd 2b       	or	r28, r29
    275a:	09 f0       	breq	.+2      	; 0x275e <xTaskResumeAll+0xb2>
    275c:	c7 dc       	rcall	.-1650   	; 0x20ec <prvResetNextTaskUnblockTime>
    275e:	c0 91 70 13 	lds	r28, 0x1370	; 0x801370 <uxPendedTicks>
    2762:	cc 23       	and	r28, r28
    2764:	49 f0       	breq	.+18     	; 0x2778 <xTaskResumeAll+0xcc>
    2766:	d1 e0       	ldi	r29, 0x01	; 1
    2768:	cc de       	rcall	.-616    	; 0x2502 <xTaskIncrementTick>
    276a:	81 11       	cpse	r24, r1
    276c:	d0 93 6f 13 	sts	0x136F, r29	; 0x80136f <xYieldPending>
    2770:	c1 50       	subi	r28, 0x01	; 1
    2772:	d1 f7       	brne	.-12     	; 0x2768 <xTaskResumeAll+0xbc>
    2774:	10 92 70 13 	sts	0x1370, r1	; 0x801370 <uxPendedTicks>
    2778:	80 91 6f 13 	lds	r24, 0x136F	; 0x80136f <xYieldPending>
    277c:	88 23       	and	r24, r24
    277e:	31 f0       	breq	.+12     	; 0x278c <xTaskResumeAll+0xe0>
    2780:	0e 94 3e 0a 	call	0x147c	; 0x147c <vPortYield>
    2784:	81 e0       	ldi	r24, 0x01	; 1
    2786:	03 c0       	rjmp	.+6      	; 0x278e <xTaskResumeAll+0xe2>
    2788:	80 e0       	ldi	r24, 0x00	; 0
    278a:	01 c0       	rjmp	.+2      	; 0x278e <xTaskResumeAll+0xe2>
    278c:	80 e0       	ldi	r24, 0x00	; 0
    278e:	0f 90       	pop	r0
    2790:	0f be       	out	0x3f, r0	; 63
    2792:	df 91       	pop	r29
    2794:	cf 91       	pop	r28
    2796:	1f 91       	pop	r17
    2798:	0f 91       	pop	r16
    279a:	ff 90       	pop	r15
    279c:	ef 90       	pop	r14
    279e:	df 90       	pop	r13
    27a0:	cf 90       	pop	r12
    27a2:	08 95       	ret

000027a4 <vTaskDelay>:
    27a4:	cf 92       	push	r12
    27a6:	df 92       	push	r13
    27a8:	ef 92       	push	r14
    27aa:	ff 92       	push	r15
    27ac:	6b 01       	movw	r12, r22
    27ae:	7c 01       	movw	r14, r24
    27b0:	67 2b       	or	r22, r23
    27b2:	68 2b       	or	r22, r24
    27b4:	69 2b       	or	r22, r25
    27b6:	41 f0       	breq	.+16     	; 0x27c8 <vTaskDelay+0x24>
    27b8:	90 de       	rcall	.-736    	; 0x24da <vTaskSuspendAll>
    27ba:	40 e0       	ldi	r20, 0x00	; 0
    27bc:	c7 01       	movw	r24, r14
    27be:	b6 01       	movw	r22, r12
    27c0:	bf dc       	rcall	.-1666   	; 0x2140 <prvAddCurrentTaskToDelayedList>
    27c2:	74 df       	rcall	.-280    	; 0x26ac <xTaskResumeAll>
    27c4:	81 11       	cpse	r24, r1
    27c6:	02 c0       	rjmp	.+4      	; 0x27cc <vTaskDelay+0x28>
    27c8:	0e 94 3e 0a 	call	0x147c	; 0x147c <vPortYield>
    27cc:	ff 90       	pop	r15
    27ce:	ef 90       	pop	r14
    27d0:	df 90       	pop	r13
    27d2:	cf 90       	pop	r12
    27d4:	08 95       	ret

000027d6 <vTaskSwitchContext>:
    27d6:	80 91 66 13 	lds	r24, 0x1366	; 0x801366 <uxSchedulerSuspended>
    27da:	88 23       	and	r24, r24
    27dc:	21 f0       	breq	.+8      	; 0x27e6 <vTaskSwitchContext+0x10>
    27de:	81 e0       	ldi	r24, 0x01	; 1
    27e0:	80 93 6f 13 	sts	0x136F, r24	; 0x80136f <xYieldPending>
    27e4:	08 95       	ret
    27e6:	10 92 6f 13 	sts	0x136F, r1	; 0x80136f <xYieldPending>
    27ea:	e0 91 e0 13 	lds	r30, 0x13E0	; 0x8013e0 <pxCurrentTCB>
    27ee:	f0 91 e1 13 	lds	r31, 0x13E1	; 0x8013e1 <pxCurrentTCB+0x1>
    27f2:	81 a5       	ldd	r24, Z+41	; 0x29
    27f4:	0e 94 4d 06 	call	0xc9a	; 0xc9a <task_switch_out>
    27f8:	a0 91 e0 13 	lds	r26, 0x13E0	; 0x8013e0 <pxCurrentTCB>
    27fc:	b0 91 e1 13 	lds	r27, 0x13E1	; 0x8013e1 <pxCurrentTCB+0x1>
    2800:	e0 91 e0 13 	lds	r30, 0x13E0	; 0x8013e0 <pxCurrentTCB>
    2804:	f0 91 e1 13 	lds	r31, 0x13E1	; 0x8013e1 <pxCurrentTCB+0x1>
    2808:	2d 91       	ld	r18, X+
    280a:	3c 91       	ld	r19, X
    280c:	83 8d       	ldd	r24, Z+27	; 0x1b
    280e:	94 8d       	ldd	r25, Z+28	; 0x1c
    2810:	82 17       	cp	r24, r18
    2812:	93 07       	cpc	r25, r19
    2814:	58 f0       	brcs	.+22     	; 0x282c <vTaskSwitchContext+0x56>
    2816:	60 91 e0 13 	lds	r22, 0x13E0	; 0x8013e0 <pxCurrentTCB>
    281a:	70 91 e1 13 	lds	r23, 0x13E1	; 0x8013e1 <pxCurrentTCB+0x1>
    281e:	80 91 e0 13 	lds	r24, 0x13E0	; 0x8013e0 <pxCurrentTCB>
    2822:	90 91 e1 13 	lds	r25, 0x13E1	; 0x8013e1 <pxCurrentTCB+0x1>
    2826:	63 5e       	subi	r22, 0xE3	; 227
    2828:	7f 4f       	sbci	r23, 0xFF	; 255
    282a:	20 d6       	rcall	.+3136   	; 0x346c <vApplicationStackOverflowHook>
    282c:	80 91 72 13 	lds	r24, 0x1372	; 0x801372 <uxTopReadyPriority>
    2830:	28 2f       	mov	r18, r24
    2832:	30 e0       	ldi	r19, 0x00	; 0
    2834:	9b e0       	ldi	r25, 0x0B	; 11
    2836:	89 9f       	mul	r24, r25
    2838:	f0 01       	movw	r30, r0
    283a:	11 24       	eor	r1, r1
    283c:	ec 54       	subi	r30, 0x4C	; 76
    283e:	fc 4e       	sbci	r31, 0xEC	; 236
    2840:	90 81       	ld	r25, Z
    2842:	91 11       	cpse	r25, r1
    2844:	0e c0       	rjmp	.+28     	; 0x2862 <vTaskSwitchContext+0x8c>
    2846:	4b e0       	ldi	r20, 0x0B	; 11
    2848:	81 50       	subi	r24, 0x01	; 1
    284a:	28 2f       	mov	r18, r24
    284c:	30 e0       	ldi	r19, 0x00	; 0
    284e:	42 9f       	mul	r20, r18
    2850:	f0 01       	movw	r30, r0
    2852:	43 9f       	mul	r20, r19
    2854:	f0 0d       	add	r31, r0
    2856:	11 24       	eor	r1, r1
    2858:	ec 54       	subi	r30, 0x4C	; 76
    285a:	fc 4e       	sbci	r31, 0xEC	; 236
    285c:	90 81       	ld	r25, Z
    285e:	99 23       	and	r25, r25
    2860:	99 f3       	breq	.-26     	; 0x2848 <vTaskSwitchContext+0x72>
    2862:	9b e0       	ldi	r25, 0x0B	; 11
    2864:	92 9f       	mul	r25, r18
    2866:	a0 01       	movw	r20, r0
    2868:	93 9f       	mul	r25, r19
    286a:	50 0d       	add	r21, r0
    286c:	11 24       	eor	r1, r1
    286e:	da 01       	movw	r26, r20
    2870:	ac 54       	subi	r26, 0x4C	; 76
    2872:	bc 4e       	sbci	r27, 0xEC	; 236
    2874:	11 96       	adiw	r26, 0x01	; 1
    2876:	ed 91       	ld	r30, X+
    2878:	fc 91       	ld	r31, X
    287a:	12 97       	sbiw	r26, 0x02	; 2
    287c:	04 80       	ldd	r0, Z+4	; 0x04
    287e:	f5 81       	ldd	r31, Z+5	; 0x05
    2880:	e0 2d       	mov	r30, r0
    2882:	12 96       	adiw	r26, 0x02	; 2
    2884:	fc 93       	st	X, r31
    2886:	ee 93       	st	-X, r30
    2888:	11 97       	sbiw	r26, 0x01	; 1
    288a:	49 54       	subi	r20, 0x49	; 73
    288c:	5c 4e       	sbci	r21, 0xEC	; 236
    288e:	e4 17       	cp	r30, r20
    2890:	f5 07       	cpc	r31, r21
    2892:	29 f4       	brne	.+10     	; 0x289e <vTaskSwitchContext+0xc8>
    2894:	44 81       	ldd	r20, Z+4	; 0x04
    2896:	55 81       	ldd	r21, Z+5	; 0x05
    2898:	fd 01       	movw	r30, r26
    289a:	52 83       	std	Z+2, r21	; 0x02
    289c:	41 83       	std	Z+1, r20	; 0x01
    289e:	9b e0       	ldi	r25, 0x0B	; 11
    28a0:	92 9f       	mul	r25, r18
    28a2:	f0 01       	movw	r30, r0
    28a4:	93 9f       	mul	r25, r19
    28a6:	f0 0d       	add	r31, r0
    28a8:	11 24       	eor	r1, r1
    28aa:	ec 54       	subi	r30, 0x4C	; 76
    28ac:	fc 4e       	sbci	r31, 0xEC	; 236
    28ae:	01 80       	ldd	r0, Z+1	; 0x01
    28b0:	f2 81       	ldd	r31, Z+2	; 0x02
    28b2:	e0 2d       	mov	r30, r0
    28b4:	20 85       	ldd	r18, Z+8	; 0x08
    28b6:	31 85       	ldd	r19, Z+9	; 0x09
    28b8:	30 93 e1 13 	sts	0x13E1, r19	; 0x8013e1 <pxCurrentTCB+0x1>
    28bc:	20 93 e0 13 	sts	0x13E0, r18	; 0x8013e0 <pxCurrentTCB>
    28c0:	80 93 72 13 	sts	0x1372, r24	; 0x801372 <uxTopReadyPriority>
    28c4:	e0 91 e0 13 	lds	r30, 0x13E0	; 0x8013e0 <pxCurrentTCB>
    28c8:	f0 91 e1 13 	lds	r31, 0x13E1	; 0x8013e1 <pxCurrentTCB+0x1>
    28cc:	81 a5       	ldd	r24, Z+41	; 0x29
    28ce:	0c 94 43 06 	jmp	0xc86	; 0xc86 <task_switch_in>
    28d2:	08 95       	ret

000028d4 <vTaskPlaceOnEventList>:
    28d4:	cf 92       	push	r12
    28d6:	df 92       	push	r13
    28d8:	ef 92       	push	r14
    28da:	ff 92       	push	r15
    28dc:	6a 01       	movw	r12, r20
    28de:	7b 01       	movw	r14, r22
    28e0:	60 91 e0 13 	lds	r22, 0x13E0	; 0x8013e0 <pxCurrentTCB>
    28e4:	70 91 e1 13 	lds	r23, 0x13E1	; 0x8013e1 <pxCurrentTCB+0x1>
    28e8:	62 5f       	subi	r22, 0xF2	; 242
    28ea:	7f 4f       	sbci	r23, 0xFF	; 255
    28ec:	0e 94 2c 09 	call	0x1258	; 0x1258 <vListInsert>
    28f0:	41 e0       	ldi	r20, 0x01	; 1
    28f2:	c7 01       	movw	r24, r14
    28f4:	b6 01       	movw	r22, r12
    28f6:	24 dc       	rcall	.-1976   	; 0x2140 <prvAddCurrentTaskToDelayedList>
    28f8:	ff 90       	pop	r15
    28fa:	ef 90       	pop	r14
    28fc:	df 90       	pop	r13
    28fe:	cf 90       	pop	r12
    2900:	08 95       	ret

00002902 <vTaskPlaceOnUnorderedEventList>:
    2902:	cf 92       	push	r12
    2904:	df 92       	push	r13
    2906:	ef 92       	push	r14
    2908:	ff 92       	push	r15
    290a:	0f 93       	push	r16
    290c:	1f 93       	push	r17
    290e:	68 01       	movw	r12, r16
    2910:	79 01       	movw	r14, r18
    2912:	e0 91 e0 13 	lds	r30, 0x13E0	; 0x8013e0 <pxCurrentTCB>
    2916:	f0 91 e1 13 	lds	r31, 0x13E1	; 0x8013e1 <pxCurrentTCB+0x1>
    291a:	70 68       	ori	r23, 0x80	; 128
    291c:	46 87       	std	Z+14, r20	; 0x0e
    291e:	57 87       	std	Z+15, r21	; 0x0f
    2920:	60 8b       	std	Z+16, r22	; 0x10
    2922:	71 8b       	std	Z+17, r23	; 0x11
    2924:	60 91 e0 13 	lds	r22, 0x13E0	; 0x8013e0 <pxCurrentTCB>
    2928:	70 91 e1 13 	lds	r23, 0x13E1	; 0x8013e1 <pxCurrentTCB+0x1>
    292c:	62 5f       	subi	r22, 0xF2	; 242
    292e:	7f 4f       	sbci	r23, 0xFF	; 255
    2930:	0e 94 0b 09 	call	0x1216	; 0x1216 <vListInsertEnd>
    2934:	41 e0       	ldi	r20, 0x01	; 1
    2936:	c7 01       	movw	r24, r14
    2938:	b6 01       	movw	r22, r12
    293a:	02 dc       	rcall	.-2044   	; 0x2140 <prvAddCurrentTaskToDelayedList>
    293c:	1f 91       	pop	r17
    293e:	0f 91       	pop	r16
    2940:	ff 90       	pop	r15
    2942:	ef 90       	pop	r14
    2944:	df 90       	pop	r13
    2946:	cf 90       	pop	r12
    2948:	08 95       	ret

0000294a <vTaskPlaceOnEventListRestricted>:
    294a:	cf 92       	push	r12
    294c:	df 92       	push	r13
    294e:	ef 92       	push	r14
    2950:	ff 92       	push	r15
    2952:	cf 93       	push	r28
    2954:	6a 01       	movw	r12, r20
    2956:	7b 01       	movw	r14, r22
    2958:	c2 2f       	mov	r28, r18
    295a:	60 91 e0 13 	lds	r22, 0x13E0	; 0x8013e0 <pxCurrentTCB>
    295e:	70 91 e1 13 	lds	r23, 0x13E1	; 0x8013e1 <pxCurrentTCB+0x1>
    2962:	62 5f       	subi	r22, 0xF2	; 242
    2964:	7f 4f       	sbci	r23, 0xFF	; 255
    2966:	0e 94 0b 09 	call	0x1216	; 0x1216 <vListInsertEnd>
    296a:	cc 23       	and	r28, r28
    296c:	21 f0       	breq	.+8      	; 0x2976 <vTaskPlaceOnEventListRestricted+0x2c>
    296e:	cc 24       	eor	r12, r12
    2970:	ca 94       	dec	r12
    2972:	dc 2c       	mov	r13, r12
    2974:	76 01       	movw	r14, r12
    2976:	4c 2f       	mov	r20, r28
    2978:	c7 01       	movw	r24, r14
    297a:	b6 01       	movw	r22, r12
    297c:	e1 db       	rcall	.-2110   	; 0x2140 <prvAddCurrentTaskToDelayedList>
    297e:	cf 91       	pop	r28
    2980:	ff 90       	pop	r15
    2982:	ef 90       	pop	r14
    2984:	df 90       	pop	r13
    2986:	cf 90       	pop	r12
    2988:	08 95       	ret

0000298a <xTaskRemoveFromEventList>:
    298a:	0f 93       	push	r16
    298c:	1f 93       	push	r17
    298e:	cf 93       	push	r28
    2990:	df 93       	push	r29
    2992:	dc 01       	movw	r26, r24
    2994:	17 96       	adiw	r26, 0x07	; 7
    2996:	ed 91       	ld	r30, X+
    2998:	fc 91       	ld	r31, X
    299a:	18 97       	sbiw	r26, 0x08	; 8
    299c:	c0 85       	ldd	r28, Z+8	; 0x08
    299e:	d1 85       	ldd	r29, Z+9	; 0x09
    29a0:	8e 01       	movw	r16, r28
    29a2:	02 5f       	subi	r16, 0xF2	; 242
    29a4:	1f 4f       	sbci	r17, 0xFF	; 255
    29a6:	c8 01       	movw	r24, r16
    29a8:	0e 94 69 09 	call	0x12d2	; 0x12d2 <uxListRemove>
    29ac:	80 91 66 13 	lds	r24, 0x1366	; 0x801366 <uxSchedulerSuspended>
    29b0:	81 11       	cpse	r24, r1
    29b2:	16 c0       	rjmp	.+44     	; 0x29e0 <xTaskRemoveFromEventList+0x56>
    29b4:	0c 50       	subi	r16, 0x0C	; 12
    29b6:	11 09       	sbc	r17, r1
    29b8:	c8 01       	movw	r24, r16
    29ba:	0e 94 69 09 	call	0x12d2	; 0x12d2 <uxListRemove>
    29be:	8a 8d       	ldd	r24, Y+26	; 0x1a
    29c0:	90 91 72 13 	lds	r25, 0x1372	; 0x801372 <uxTopReadyPriority>
    29c4:	98 17       	cp	r25, r24
    29c6:	10 f4       	brcc	.+4      	; 0x29cc <xTaskRemoveFromEventList+0x42>
    29c8:	80 93 72 13 	sts	0x1372, r24	; 0x801372 <uxTopReadyPriority>
    29cc:	bb e0       	ldi	r27, 0x0B	; 11
    29ce:	8b 9f       	mul	r24, r27
    29d0:	c0 01       	movw	r24, r0
    29d2:	11 24       	eor	r1, r1
    29d4:	b8 01       	movw	r22, r16
    29d6:	8c 54       	subi	r24, 0x4C	; 76
    29d8:	9c 4e       	sbci	r25, 0xEC	; 236
    29da:	0e 94 0b 09 	call	0x1216	; 0x1216 <vListInsertEnd>
    29de:	05 c0       	rjmp	.+10     	; 0x29ea <xTaskRemoveFromEventList+0x60>
    29e0:	b8 01       	movw	r22, r16
    29e2:	8f e8       	ldi	r24, 0x8F	; 143
    29e4:	93 e1       	ldi	r25, 0x13	; 19
    29e6:	0e 94 0b 09 	call	0x1216	; 0x1216 <vListInsertEnd>
    29ea:	e0 91 e0 13 	lds	r30, 0x13E0	; 0x8013e0 <pxCurrentTCB>
    29ee:	f0 91 e1 13 	lds	r31, 0x13E1	; 0x8013e1 <pxCurrentTCB+0x1>
    29f2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    29f4:	82 8d       	ldd	r24, Z+26	; 0x1a
    29f6:	89 17       	cp	r24, r25
    29f8:	20 f4       	brcc	.+8      	; 0x2a02 <xTaskRemoveFromEventList+0x78>
    29fa:	81 e0       	ldi	r24, 0x01	; 1
    29fc:	80 93 6f 13 	sts	0x136F, r24	; 0x80136f <xYieldPending>
    2a00:	01 c0       	rjmp	.+2      	; 0x2a04 <xTaskRemoveFromEventList+0x7a>
    2a02:	80 e0       	ldi	r24, 0x00	; 0
    2a04:	df 91       	pop	r29
    2a06:	cf 91       	pop	r28
    2a08:	1f 91       	pop	r17
    2a0a:	0f 91       	pop	r16
    2a0c:	08 95       	ret

00002a0e <vTaskRemoveFromUnorderedEventList>:
    2a0e:	0f 93       	push	r16
    2a10:	1f 93       	push	r17
    2a12:	cf 93       	push	r28
    2a14:	df 93       	push	r29
    2a16:	70 68       	ori	r23, 0x80	; 128
    2a18:	fc 01       	movw	r30, r24
    2a1a:	40 83       	st	Z, r20
    2a1c:	51 83       	std	Z+1, r21	; 0x01
    2a1e:	62 83       	std	Z+2, r22	; 0x02
    2a20:	73 83       	std	Z+3, r23	; 0x03
    2a22:	c0 85       	ldd	r28, Z+8	; 0x08
    2a24:	d1 85       	ldd	r29, Z+9	; 0x09
    2a26:	0e 94 69 09 	call	0x12d2	; 0x12d2 <uxListRemove>
    2a2a:	8e 01       	movw	r16, r28
    2a2c:	0e 5f       	subi	r16, 0xFE	; 254
    2a2e:	1f 4f       	sbci	r17, 0xFF	; 255
    2a30:	c8 01       	movw	r24, r16
    2a32:	0e 94 69 09 	call	0x12d2	; 0x12d2 <uxListRemove>
    2a36:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2a38:	90 91 72 13 	lds	r25, 0x1372	; 0x801372 <uxTopReadyPriority>
    2a3c:	98 17       	cp	r25, r24
    2a3e:	10 f4       	brcc	.+4      	; 0x2a44 <vTaskRemoveFromUnorderedEventList+0x36>
    2a40:	80 93 72 13 	sts	0x1372, r24	; 0x801372 <uxTopReadyPriority>
    2a44:	fb e0       	ldi	r31, 0x0B	; 11
    2a46:	8f 9f       	mul	r24, r31
    2a48:	c0 01       	movw	r24, r0
    2a4a:	11 24       	eor	r1, r1
    2a4c:	b8 01       	movw	r22, r16
    2a4e:	8c 54       	subi	r24, 0x4C	; 76
    2a50:	9c 4e       	sbci	r25, 0xEC	; 236
    2a52:	0e 94 0b 09 	call	0x1216	; 0x1216 <vListInsertEnd>
    2a56:	e0 91 e0 13 	lds	r30, 0x13E0	; 0x8013e0 <pxCurrentTCB>
    2a5a:	f0 91 e1 13 	lds	r31, 0x13E1	; 0x8013e1 <pxCurrentTCB+0x1>
    2a5e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2a60:	82 8d       	ldd	r24, Z+26	; 0x1a
    2a62:	89 17       	cp	r24, r25
    2a64:	18 f4       	brcc	.+6      	; 0x2a6c <vTaskRemoveFromUnorderedEventList+0x5e>
    2a66:	81 e0       	ldi	r24, 0x01	; 1
    2a68:	80 93 6f 13 	sts	0x136F, r24	; 0x80136f <xYieldPending>
    2a6c:	df 91       	pop	r29
    2a6e:	cf 91       	pop	r28
    2a70:	1f 91       	pop	r17
    2a72:	0f 91       	pop	r16
    2a74:	08 95       	ret

00002a76 <vTaskSetTimeOutState>:
    2a76:	0f b6       	in	r0, 0x3f	; 63
    2a78:	f8 94       	cli
    2a7a:	0f 92       	push	r0
    2a7c:	20 91 6e 13 	lds	r18, 0x136E	; 0x80136e <xNumOfOverflows>
    2a80:	fc 01       	movw	r30, r24
    2a82:	20 83       	st	Z, r18
    2a84:	40 91 73 13 	lds	r20, 0x1373	; 0x801373 <xTickCount>
    2a88:	50 91 74 13 	lds	r21, 0x1374	; 0x801374 <xTickCount+0x1>
    2a8c:	60 91 75 13 	lds	r22, 0x1375	; 0x801375 <xTickCount+0x2>
    2a90:	70 91 76 13 	lds	r23, 0x1376	; 0x801376 <xTickCount+0x3>
    2a94:	41 83       	std	Z+1, r20	; 0x01
    2a96:	52 83       	std	Z+2, r21	; 0x02
    2a98:	63 83       	std	Z+3, r22	; 0x03
    2a9a:	74 83       	std	Z+4, r23	; 0x04
    2a9c:	0f 90       	pop	r0
    2a9e:	0f be       	out	0x3f, r0	; 63
    2aa0:	08 95       	ret

00002aa2 <vTaskInternalSetTimeOutState>:
    2aa2:	20 91 6e 13 	lds	r18, 0x136E	; 0x80136e <xNumOfOverflows>
    2aa6:	fc 01       	movw	r30, r24
    2aa8:	20 83       	st	Z, r18
    2aaa:	40 91 73 13 	lds	r20, 0x1373	; 0x801373 <xTickCount>
    2aae:	50 91 74 13 	lds	r21, 0x1374	; 0x801374 <xTickCount+0x1>
    2ab2:	60 91 75 13 	lds	r22, 0x1375	; 0x801375 <xTickCount+0x2>
    2ab6:	70 91 76 13 	lds	r23, 0x1376	; 0x801376 <xTickCount+0x3>
    2aba:	41 83       	std	Z+1, r20	; 0x01
    2abc:	52 83       	std	Z+2, r21	; 0x02
    2abe:	63 83       	std	Z+3, r22	; 0x03
    2ac0:	74 83       	std	Z+4, r23	; 0x04
    2ac2:	08 95       	ret

00002ac4 <xTaskCheckForTimeOut>:
    2ac4:	cf 92       	push	r12
    2ac6:	df 92       	push	r13
    2ac8:	ef 92       	push	r14
    2aca:	ff 92       	push	r15
    2acc:	0f 93       	push	r16
    2ace:	1f 93       	push	r17
    2ad0:	cf 93       	push	r28
    2ad2:	df 93       	push	r29
    2ad4:	fb 01       	movw	r30, r22
    2ad6:	0f b6       	in	r0, 0x3f	; 63
    2ad8:	f8 94       	cli
    2ada:	0f 92       	push	r0
    2adc:	40 91 73 13 	lds	r20, 0x1373	; 0x801373 <xTickCount>
    2ae0:	50 91 74 13 	lds	r21, 0x1374	; 0x801374 <xTickCount+0x1>
    2ae4:	60 91 75 13 	lds	r22, 0x1375	; 0x801375 <xTickCount+0x2>
    2ae8:	70 91 76 13 	lds	r23, 0x1376	; 0x801376 <xTickCount+0x3>
    2aec:	00 81       	ld	r16, Z
    2aee:	11 81       	ldd	r17, Z+1	; 0x01
    2af0:	22 81       	ldd	r18, Z+2	; 0x02
    2af2:	33 81       	ldd	r19, Z+3	; 0x03
    2af4:	0f 3f       	cpi	r16, 0xFF	; 255
    2af6:	af ef       	ldi	r26, 0xFF	; 255
    2af8:	1a 07       	cpc	r17, r26
    2afa:	2a 07       	cpc	r18, r26
    2afc:	3a 07       	cpc	r19, r26
    2afe:	49 f1       	breq	.+82     	; 0x2b52 <xTaskCheckForTimeOut+0x8e>
    2b00:	ec 01       	movw	r28, r24
    2b02:	c9 80       	ldd	r12, Y+1	; 0x01
    2b04:	da 80       	ldd	r13, Y+2	; 0x02
    2b06:	eb 80       	ldd	r14, Y+3	; 0x03
    2b08:	fc 80       	ldd	r15, Y+4	; 0x04
    2b0a:	a0 91 6e 13 	lds	r26, 0x136E	; 0x80136e <xNumOfOverflows>
    2b0e:	b8 81       	ld	r27, Y
    2b10:	ba 17       	cp	r27, r26
    2b12:	29 f0       	breq	.+10     	; 0x2b1e <xTaskCheckForTimeOut+0x5a>
    2b14:	4c 15       	cp	r20, r12
    2b16:	5d 05       	cpc	r21, r13
    2b18:	6e 05       	cpc	r22, r14
    2b1a:	7f 05       	cpc	r23, r15
    2b1c:	e0 f4       	brcc	.+56     	; 0x2b56 <xTaskCheckForTimeOut+0x92>
    2b1e:	4c 19       	sub	r20, r12
    2b20:	5d 09       	sbc	r21, r13
    2b22:	6e 09       	sbc	r22, r14
    2b24:	7f 09       	sbc	r23, r15
    2b26:	40 17       	cp	r20, r16
    2b28:	51 07       	cpc	r21, r17
    2b2a:	62 07       	cpc	r22, r18
    2b2c:	73 07       	cpc	r23, r19
    2b2e:	58 f4       	brcc	.+22     	; 0x2b46 <xTaskCheckForTimeOut+0x82>
    2b30:	04 1b       	sub	r16, r20
    2b32:	15 0b       	sbc	r17, r21
    2b34:	26 0b       	sbc	r18, r22
    2b36:	37 0b       	sbc	r19, r23
    2b38:	00 83       	st	Z, r16
    2b3a:	11 83       	std	Z+1, r17	; 0x01
    2b3c:	22 83       	std	Z+2, r18	; 0x02
    2b3e:	33 83       	std	Z+3, r19	; 0x03
    2b40:	b0 df       	rcall	.-160    	; 0x2aa2 <vTaskInternalSetTimeOutState>
    2b42:	80 e0       	ldi	r24, 0x00	; 0
    2b44:	09 c0       	rjmp	.+18     	; 0x2b58 <xTaskCheckForTimeOut+0x94>
    2b46:	10 82       	st	Z, r1
    2b48:	11 82       	std	Z+1, r1	; 0x01
    2b4a:	12 82       	std	Z+2, r1	; 0x02
    2b4c:	13 82       	std	Z+3, r1	; 0x03
    2b4e:	81 e0       	ldi	r24, 0x01	; 1
    2b50:	03 c0       	rjmp	.+6      	; 0x2b58 <xTaskCheckForTimeOut+0x94>
    2b52:	80 e0       	ldi	r24, 0x00	; 0
    2b54:	01 c0       	rjmp	.+2      	; 0x2b58 <xTaskCheckForTimeOut+0x94>
    2b56:	81 e0       	ldi	r24, 0x01	; 1
    2b58:	0f 90       	pop	r0
    2b5a:	0f be       	out	0x3f, r0	; 63
    2b5c:	df 91       	pop	r29
    2b5e:	cf 91       	pop	r28
    2b60:	1f 91       	pop	r17
    2b62:	0f 91       	pop	r16
    2b64:	ff 90       	pop	r15
    2b66:	ef 90       	pop	r14
    2b68:	df 90       	pop	r13
    2b6a:	cf 90       	pop	r12
    2b6c:	08 95       	ret

00002b6e <vTaskMissedYield>:
    2b6e:	81 e0       	ldi	r24, 0x01	; 1
    2b70:	80 93 6f 13 	sts	0x136F, r24	; 0x80136f <xYieldPending>
    2b74:	08 95       	ret

00002b76 <xTaskGetCurrentTaskHandle>:
    2b76:	80 91 e0 13 	lds	r24, 0x13E0	; 0x8013e0 <pxCurrentTCB>
    2b7a:	90 91 e1 13 	lds	r25, 0x13E1	; 0x8013e1 <pxCurrentTCB+0x1>
    2b7e:	08 95       	ret

00002b80 <xTaskGetSchedulerState>:
    2b80:	80 91 71 13 	lds	r24, 0x1371	; 0x801371 <xSchedulerRunning>
    2b84:	88 23       	and	r24, r24
    2b86:	31 f0       	breq	.+12     	; 0x2b94 <xTaskGetSchedulerState+0x14>
    2b88:	80 91 66 13 	lds	r24, 0x1366	; 0x801366 <uxSchedulerSuspended>
    2b8c:	88 23       	and	r24, r24
    2b8e:	21 f0       	breq	.+8      	; 0x2b98 <xTaskGetSchedulerState+0x18>
    2b90:	80 e0       	ldi	r24, 0x00	; 0
    2b92:	08 95       	ret
    2b94:	81 e0       	ldi	r24, 0x01	; 1
    2b96:	08 95       	ret
    2b98:	82 e0       	ldi	r24, 0x02	; 2
    2b9a:	08 95       	ret

00002b9c <xTaskPriorityInherit>:
    2b9c:	0f 93       	push	r16
    2b9e:	1f 93       	push	r17
    2ba0:	cf 93       	push	r28
    2ba2:	df 93       	push	r29
    2ba4:	fc 01       	movw	r30, r24
    2ba6:	89 2b       	or	r24, r25
    2ba8:	09 f4       	brne	.+2      	; 0x2bac <xTaskPriorityInherit+0x10>
    2baa:	60 c0       	rjmp	.+192    	; 0x2c6c <xTaskPriorityInherit+0xd0>
    2bac:	82 8d       	ldd	r24, Z+26	; 0x1a
    2bae:	a0 91 e0 13 	lds	r26, 0x13E0	; 0x8013e0 <pxCurrentTCB>
    2bb2:	b0 91 e1 13 	lds	r27, 0x13E1	; 0x8013e1 <pxCurrentTCB+0x1>
    2bb6:	5a 96       	adiw	r26, 0x1a	; 26
    2bb8:	9c 91       	ld	r25, X
    2bba:	89 17       	cp	r24, r25
    2bbc:	08 f0       	brcs	.+2      	; 0x2bc0 <xTaskPriorityInherit+0x24>
    2bbe:	4a c0       	rjmp	.+148    	; 0x2c54 <xTaskPriorityInherit+0xb8>
    2bc0:	46 85       	ldd	r20, Z+14	; 0x0e
    2bc2:	57 85       	ldd	r21, Z+15	; 0x0f
    2bc4:	60 89       	ldd	r22, Z+16	; 0x10
    2bc6:	71 89       	ldd	r23, Z+17	; 0x11
    2bc8:	77 23       	and	r23, r23
    2bca:	94 f0       	brlt	.+36     	; 0x2bf0 <xTaskPriorityInherit+0x54>
    2bcc:	a0 91 e0 13 	lds	r26, 0x13E0	; 0x8013e0 <pxCurrentTCB>
    2bd0:	b0 91 e1 13 	lds	r27, 0x13E1	; 0x8013e1 <pxCurrentTCB+0x1>
    2bd4:	5a 96       	adiw	r26, 0x1a	; 26
    2bd6:	9c 91       	ld	r25, X
    2bd8:	44 e0       	ldi	r20, 0x04	; 4
    2bda:	50 e0       	ldi	r21, 0x00	; 0
    2bdc:	60 e0       	ldi	r22, 0x00	; 0
    2bde:	70 e0       	ldi	r23, 0x00	; 0
    2be0:	49 1b       	sub	r20, r25
    2be2:	51 09       	sbc	r21, r1
    2be4:	61 09       	sbc	r22, r1
    2be6:	71 09       	sbc	r23, r1
    2be8:	46 87       	std	Z+14, r20	; 0x0e
    2bea:	57 87       	std	Z+15, r21	; 0x0f
    2bec:	60 8b       	std	Z+16, r22	; 0x10
    2bee:	71 8b       	std	Z+17, r23	; 0x11
    2bf0:	2b e0       	ldi	r18, 0x0B	; 11
    2bf2:	82 9f       	mul	r24, r18
    2bf4:	c0 01       	movw	r24, r0
    2bf6:	11 24       	eor	r1, r1
    2bf8:	8c 54       	subi	r24, 0x4C	; 76
    2bfa:	9c 4e       	sbci	r25, 0xEC	; 236
    2bfc:	24 85       	ldd	r18, Z+12	; 0x0c
    2bfe:	35 85       	ldd	r19, Z+13	; 0x0d
    2c00:	28 17       	cp	r18, r24
    2c02:	39 07       	cpc	r19, r25
    2c04:	f1 f4       	brne	.+60     	; 0x2c42 <xTaskPriorityInherit+0xa6>
    2c06:	8f 01       	movw	r16, r30
    2c08:	ef 01       	movw	r28, r30
    2c0a:	22 96       	adiw	r28, 0x02	; 2
    2c0c:	ce 01       	movw	r24, r28
    2c0e:	0e 94 69 09 	call	0x12d2	; 0x12d2 <uxListRemove>
    2c12:	e0 91 e0 13 	lds	r30, 0x13E0	; 0x8013e0 <pxCurrentTCB>
    2c16:	f0 91 e1 13 	lds	r31, 0x13E1	; 0x8013e1 <pxCurrentTCB+0x1>
    2c1a:	82 8d       	ldd	r24, Z+26	; 0x1a
    2c1c:	f8 01       	movw	r30, r16
    2c1e:	82 8f       	std	Z+26, r24	; 0x1a
    2c20:	90 91 72 13 	lds	r25, 0x1372	; 0x801372 <uxTopReadyPriority>
    2c24:	98 17       	cp	r25, r24
    2c26:	10 f4       	brcc	.+4      	; 0x2c2c <xTaskPriorityInherit+0x90>
    2c28:	80 93 72 13 	sts	0x1372, r24	; 0x801372 <uxTopReadyPriority>
    2c2c:	fb e0       	ldi	r31, 0x0B	; 11
    2c2e:	8f 9f       	mul	r24, r31
    2c30:	c0 01       	movw	r24, r0
    2c32:	11 24       	eor	r1, r1
    2c34:	be 01       	movw	r22, r28
    2c36:	8c 54       	subi	r24, 0x4C	; 76
    2c38:	9c 4e       	sbci	r25, 0xEC	; 236
    2c3a:	0e 94 0b 09 	call	0x1216	; 0x1216 <vListInsertEnd>
    2c3e:	81 e0       	ldi	r24, 0x01	; 1
    2c40:	16 c0       	rjmp	.+44     	; 0x2c6e <xTaskPriorityInherit+0xd2>
    2c42:	a0 91 e0 13 	lds	r26, 0x13E0	; 0x8013e0 <pxCurrentTCB>
    2c46:	b0 91 e1 13 	lds	r27, 0x13E1	; 0x8013e1 <pxCurrentTCB+0x1>
    2c4a:	5a 96       	adiw	r26, 0x1a	; 26
    2c4c:	8c 91       	ld	r24, X
    2c4e:	82 8f       	std	Z+26, r24	; 0x1a
    2c50:	81 e0       	ldi	r24, 0x01	; 1
    2c52:	0d c0       	rjmp	.+26     	; 0x2c6e <xTaskPriorityInherit+0xd2>
    2c54:	a0 91 e0 13 	lds	r26, 0x13E0	; 0x8013e0 <pxCurrentTCB>
    2c58:	b0 91 e1 13 	lds	r27, 0x13E1	; 0x8013e1 <pxCurrentTCB+0x1>
    2c5c:	81 e0       	ldi	r24, 0x01	; 1
    2c5e:	27 a1       	ldd	r18, Z+39	; 0x27
    2c60:	5a 96       	adiw	r26, 0x1a	; 26
    2c62:	9c 91       	ld	r25, X
    2c64:	29 17       	cp	r18, r25
    2c66:	18 f0       	brcs	.+6      	; 0x2c6e <xTaskPriorityInherit+0xd2>
    2c68:	80 e0       	ldi	r24, 0x00	; 0
    2c6a:	01 c0       	rjmp	.+2      	; 0x2c6e <xTaskPriorityInherit+0xd2>
    2c6c:	80 e0       	ldi	r24, 0x00	; 0
    2c6e:	df 91       	pop	r29
    2c70:	cf 91       	pop	r28
    2c72:	1f 91       	pop	r17
    2c74:	0f 91       	pop	r16
    2c76:	08 95       	ret

00002c78 <xTaskPriorityDisinherit>:
    2c78:	0f 93       	push	r16
    2c7a:	1f 93       	push	r17
    2c7c:	cf 93       	push	r28
    2c7e:	df 93       	push	r29
    2c80:	fc 01       	movw	r30, r24
    2c82:	89 2b       	or	r24, r25
    2c84:	79 f1       	breq	.+94     	; 0x2ce4 <xTaskPriorityDisinherit+0x6c>
    2c86:	80 a5       	ldd	r24, Z+40	; 0x28
    2c88:	81 50       	subi	r24, 0x01	; 1
    2c8a:	80 a7       	std	Z+40, r24	; 0x28
    2c8c:	22 8d       	ldd	r18, Z+26	; 0x1a
    2c8e:	97 a1       	ldd	r25, Z+39	; 0x27
    2c90:	29 17       	cp	r18, r25
    2c92:	51 f1       	breq	.+84     	; 0x2ce8 <xTaskPriorityDisinherit+0x70>
    2c94:	81 11       	cpse	r24, r1
    2c96:	2a c0       	rjmp	.+84     	; 0x2cec <xTaskPriorityDisinherit+0x74>
    2c98:	ef 01       	movw	r28, r30
    2c9a:	8f 01       	movw	r16, r30
    2c9c:	0e 5f       	subi	r16, 0xFE	; 254
    2c9e:	1f 4f       	sbci	r17, 0xFF	; 255
    2ca0:	c8 01       	movw	r24, r16
    2ca2:	0e 94 69 09 	call	0x12d2	; 0x12d2 <uxListRemove>
    2ca6:	8f a1       	ldd	r24, Y+39	; 0x27
    2ca8:	8a 8f       	std	Y+26, r24	; 0x1a
    2caa:	44 e0       	ldi	r20, 0x04	; 4
    2cac:	50 e0       	ldi	r21, 0x00	; 0
    2cae:	60 e0       	ldi	r22, 0x00	; 0
    2cb0:	70 e0       	ldi	r23, 0x00	; 0
    2cb2:	48 1b       	sub	r20, r24
    2cb4:	51 09       	sbc	r21, r1
    2cb6:	61 09       	sbc	r22, r1
    2cb8:	71 09       	sbc	r23, r1
    2cba:	4e 87       	std	Y+14, r20	; 0x0e
    2cbc:	5f 87       	std	Y+15, r21	; 0x0f
    2cbe:	68 8b       	std	Y+16, r22	; 0x10
    2cc0:	79 8b       	std	Y+17, r23	; 0x11
    2cc2:	90 91 72 13 	lds	r25, 0x1372	; 0x801372 <uxTopReadyPriority>
    2cc6:	98 17       	cp	r25, r24
    2cc8:	10 f4       	brcc	.+4      	; 0x2cce <xTaskPriorityDisinherit+0x56>
    2cca:	80 93 72 13 	sts	0x1372, r24	; 0x801372 <uxTopReadyPriority>
    2cce:	2b e0       	ldi	r18, 0x0B	; 11
    2cd0:	82 9f       	mul	r24, r18
    2cd2:	c0 01       	movw	r24, r0
    2cd4:	11 24       	eor	r1, r1
    2cd6:	b8 01       	movw	r22, r16
    2cd8:	8c 54       	subi	r24, 0x4C	; 76
    2cda:	9c 4e       	sbci	r25, 0xEC	; 236
    2cdc:	0e 94 0b 09 	call	0x1216	; 0x1216 <vListInsertEnd>
    2ce0:	81 e0       	ldi	r24, 0x01	; 1
    2ce2:	05 c0       	rjmp	.+10     	; 0x2cee <xTaskPriorityDisinherit+0x76>
    2ce4:	80 e0       	ldi	r24, 0x00	; 0
    2ce6:	03 c0       	rjmp	.+6      	; 0x2cee <xTaskPriorityDisinherit+0x76>
    2ce8:	80 e0       	ldi	r24, 0x00	; 0
    2cea:	01 c0       	rjmp	.+2      	; 0x2cee <xTaskPriorityDisinherit+0x76>
    2cec:	80 e0       	ldi	r24, 0x00	; 0
    2cee:	df 91       	pop	r29
    2cf0:	cf 91       	pop	r28
    2cf2:	1f 91       	pop	r17
    2cf4:	0f 91       	pop	r16
    2cf6:	08 95       	ret

00002cf8 <vTaskPriorityDisinheritAfterTimeout>:
    2cf8:	0f 93       	push	r16
    2cfa:	1f 93       	push	r17
    2cfc:	cf 93       	push	r28
    2cfe:	df 93       	push	r29
    2d00:	fc 01       	movw	r30, r24
    2d02:	89 2b       	or	r24, r25
    2d04:	09 f4       	brne	.+2      	; 0x2d08 <vTaskPriorityDisinheritAfterTimeout+0x10>
    2d06:	3f c0       	rjmp	.+126    	; 0x2d86 <vTaskPriorityDisinheritAfterTimeout+0x8e>
    2d08:	87 a1       	ldd	r24, Z+39	; 0x27
    2d0a:	86 17       	cp	r24, r22
    2d0c:	08 f4       	brcc	.+2      	; 0x2d10 <vTaskPriorityDisinheritAfterTimeout+0x18>
    2d0e:	86 2f       	mov	r24, r22
    2d10:	92 8d       	ldd	r25, Z+26	; 0x1a
    2d12:	98 17       	cp	r25, r24
    2d14:	c1 f1       	breq	.+112    	; 0x2d86 <vTaskPriorityDisinheritAfterTimeout+0x8e>
    2d16:	20 a5       	ldd	r18, Z+40	; 0x28
    2d18:	21 30       	cpi	r18, 0x01	; 1
    2d1a:	a9 f5       	brne	.+106    	; 0x2d86 <vTaskPriorityDisinheritAfterTimeout+0x8e>
    2d1c:	82 8f       	std	Z+26, r24	; 0x1a
    2d1e:	46 85       	ldd	r20, Z+14	; 0x0e
    2d20:	57 85       	ldd	r21, Z+15	; 0x0f
    2d22:	60 89       	ldd	r22, Z+16	; 0x10
    2d24:	71 89       	ldd	r23, Z+17	; 0x11
    2d26:	77 23       	and	r23, r23
    2d28:	64 f0       	brlt	.+24     	; 0x2d42 <vTaskPriorityDisinheritAfterTimeout+0x4a>
    2d2a:	44 e0       	ldi	r20, 0x04	; 4
    2d2c:	50 e0       	ldi	r21, 0x00	; 0
    2d2e:	60 e0       	ldi	r22, 0x00	; 0
    2d30:	70 e0       	ldi	r23, 0x00	; 0
    2d32:	48 1b       	sub	r20, r24
    2d34:	51 09       	sbc	r21, r1
    2d36:	61 09       	sbc	r22, r1
    2d38:	71 09       	sbc	r23, r1
    2d3a:	46 87       	std	Z+14, r20	; 0x0e
    2d3c:	57 87       	std	Z+15, r21	; 0x0f
    2d3e:	60 8b       	std	Z+16, r22	; 0x10
    2d40:	71 8b       	std	Z+17, r23	; 0x11
    2d42:	2b e0       	ldi	r18, 0x0B	; 11
    2d44:	92 9f       	mul	r25, r18
    2d46:	c0 01       	movw	r24, r0
    2d48:	11 24       	eor	r1, r1
    2d4a:	8c 54       	subi	r24, 0x4C	; 76
    2d4c:	9c 4e       	sbci	r25, 0xEC	; 236
    2d4e:	24 85       	ldd	r18, Z+12	; 0x0c
    2d50:	35 85       	ldd	r19, Z+13	; 0x0d
    2d52:	28 17       	cp	r18, r24
    2d54:	39 07       	cpc	r19, r25
    2d56:	b9 f4       	brne	.+46     	; 0x2d86 <vTaskPriorityDisinheritAfterTimeout+0x8e>
    2d58:	ef 01       	movw	r28, r30
    2d5a:	8f 01       	movw	r16, r30
    2d5c:	0e 5f       	subi	r16, 0xFE	; 254
    2d5e:	1f 4f       	sbci	r17, 0xFF	; 255
    2d60:	c8 01       	movw	r24, r16
    2d62:	0e 94 69 09 	call	0x12d2	; 0x12d2 <uxListRemove>
    2d66:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2d68:	90 91 72 13 	lds	r25, 0x1372	; 0x801372 <uxTopReadyPriority>
    2d6c:	98 17       	cp	r25, r24
    2d6e:	10 f4       	brcc	.+4      	; 0x2d74 <vTaskPriorityDisinheritAfterTimeout+0x7c>
    2d70:	80 93 72 13 	sts	0x1372, r24	; 0x801372 <uxTopReadyPriority>
    2d74:	2b e0       	ldi	r18, 0x0B	; 11
    2d76:	82 9f       	mul	r24, r18
    2d78:	c0 01       	movw	r24, r0
    2d7a:	11 24       	eor	r1, r1
    2d7c:	b8 01       	movw	r22, r16
    2d7e:	8c 54       	subi	r24, 0x4C	; 76
    2d80:	9c 4e       	sbci	r25, 0xEC	; 236
    2d82:	0e 94 0b 09 	call	0x1216	; 0x1216 <vListInsertEnd>
    2d86:	df 91       	pop	r29
    2d88:	cf 91       	pop	r28
    2d8a:	1f 91       	pop	r17
    2d8c:	0f 91       	pop	r16
    2d8e:	08 95       	ret

00002d90 <uxTaskResetEventItemValue>:
    2d90:	cf 92       	push	r12
    2d92:	df 92       	push	r13
    2d94:	ef 92       	push	r14
    2d96:	ff 92       	push	r15
    2d98:	e0 91 e0 13 	lds	r30, 0x13E0	; 0x8013e0 <pxCurrentTCB>
    2d9c:	f0 91 e1 13 	lds	r31, 0x13E1	; 0x8013e1 <pxCurrentTCB+0x1>
    2da0:	66 85       	ldd	r22, Z+14	; 0x0e
    2da2:	77 85       	ldd	r23, Z+15	; 0x0f
    2da4:	80 89       	ldd	r24, Z+16	; 0x10
    2da6:	91 89       	ldd	r25, Z+17	; 0x11
    2da8:	e0 91 e0 13 	lds	r30, 0x13E0	; 0x8013e0 <pxCurrentTCB>
    2dac:	f0 91 e1 13 	lds	r31, 0x13E1	; 0x8013e1 <pxCurrentTCB+0x1>
    2db0:	a0 91 e0 13 	lds	r26, 0x13E0	; 0x8013e0 <pxCurrentTCB>
    2db4:	b0 91 e1 13 	lds	r27, 0x13E1	; 0x8013e1 <pxCurrentTCB+0x1>
    2db8:	5a 96       	adiw	r26, 0x1a	; 26
    2dba:	2c 91       	ld	r18, X
    2dbc:	c1 2c       	mov	r12, r1
    2dbe:	d1 2c       	mov	r13, r1
    2dc0:	76 01       	movw	r14, r12
    2dc2:	68 94       	set
    2dc4:	c2 f8       	bld	r12, 2
    2dc6:	c2 1a       	sub	r12, r18
    2dc8:	d1 08       	sbc	r13, r1
    2dca:	e1 08       	sbc	r14, r1
    2dcc:	f1 08       	sbc	r15, r1
    2dce:	c6 86       	std	Z+14, r12	; 0x0e
    2dd0:	d7 86       	std	Z+15, r13	; 0x0f
    2dd2:	e0 8a       	std	Z+16, r14	; 0x10
    2dd4:	f1 8a       	std	Z+17, r15	; 0x11
    2dd6:	ff 90       	pop	r15
    2dd8:	ef 90       	pop	r14
    2dda:	df 90       	pop	r13
    2ddc:	cf 90       	pop	r12
    2dde:	08 95       	ret

00002de0 <pvTaskIncrementMutexHeldCount>:
    2de0:	80 91 e0 13 	lds	r24, 0x13E0	; 0x8013e0 <pxCurrentTCB>
    2de4:	90 91 e1 13 	lds	r25, 0x13E1	; 0x8013e1 <pxCurrentTCB+0x1>
    2de8:	89 2b       	or	r24, r25
    2dea:	39 f0       	breq	.+14     	; 0x2dfa <pvTaskIncrementMutexHeldCount+0x1a>
    2dec:	e0 91 e0 13 	lds	r30, 0x13E0	; 0x8013e0 <pxCurrentTCB>
    2df0:	f0 91 e1 13 	lds	r31, 0x13E1	; 0x8013e1 <pxCurrentTCB+0x1>
    2df4:	80 a5       	ldd	r24, Z+40	; 0x28
    2df6:	8f 5f       	subi	r24, 0xFF	; 255
    2df8:	80 a7       	std	Z+40, r24	; 0x28
    2dfa:	80 91 e0 13 	lds	r24, 0x13E0	; 0x8013e0 <pxCurrentTCB>
    2dfe:	90 91 e1 13 	lds	r25, 0x13E1	; 0x8013e1 <pxCurrentTCB+0x1>
    2e02:	08 95       	ret

00002e04 <xTaskNotifyWait>:
    2e04:	4f 92       	push	r4
    2e06:	5f 92       	push	r5
    2e08:	6f 92       	push	r6
    2e0a:	7f 92       	push	r7
    2e0c:	8f 92       	push	r8
    2e0e:	9f 92       	push	r9
    2e10:	af 92       	push	r10
    2e12:	bf 92       	push	r11
    2e14:	cf 92       	push	r12
    2e16:	df 92       	push	r13
    2e18:	ef 92       	push	r14
    2e1a:	ff 92       	push	r15
    2e1c:	0f 93       	push	r16
    2e1e:	1f 93       	push	r17
    2e20:	49 01       	movw	r8, r18
    2e22:	5a 01       	movw	r10, r20
    2e24:	0f b6       	in	r0, 0x3f	; 63
    2e26:	f8 94       	cli
    2e28:	0f 92       	push	r0
    2e2a:	e0 91 e0 13 	lds	r30, 0x13E0	; 0x8013e0 <pxCurrentTCB>
    2e2e:	f0 91 e1 13 	lds	r31, 0x13E1	; 0x8013e1 <pxCurrentTCB+0x1>
    2e32:	27 a5       	ldd	r18, Z+47	; 0x2f
    2e34:	22 30       	cpi	r18, 0x02	; 2
    2e36:	39 f1       	breq	.+78     	; 0x2e86 <xTaskNotifyWait+0x82>
    2e38:	e0 91 e0 13 	lds	r30, 0x13E0	; 0x8013e0 <pxCurrentTCB>
    2e3c:	f0 91 e1 13 	lds	r31, 0x13E1	; 0x8013e1 <pxCurrentTCB+0x1>
    2e40:	43 a4       	ldd	r4, Z+43	; 0x2b
    2e42:	54 a4       	ldd	r5, Z+44	; 0x2c
    2e44:	65 a4       	ldd	r6, Z+45	; 0x2d
    2e46:	76 a4       	ldd	r7, Z+46	; 0x2e
    2e48:	dc 01       	movw	r26, r24
    2e4a:	cb 01       	movw	r24, r22
    2e4c:	80 95       	com	r24
    2e4e:	90 95       	com	r25
    2e50:	a0 95       	com	r26
    2e52:	b0 95       	com	r27
    2e54:	84 21       	and	r24, r4
    2e56:	95 21       	and	r25, r5
    2e58:	a6 21       	and	r26, r6
    2e5a:	b7 21       	and	r27, r7
    2e5c:	83 a7       	std	Z+43, r24	; 0x2b
    2e5e:	94 a7       	std	Z+44, r25	; 0x2c
    2e60:	a5 a7       	std	Z+45, r26	; 0x2d
    2e62:	b6 a7       	std	Z+46, r27	; 0x2e
    2e64:	e0 91 e0 13 	lds	r30, 0x13E0	; 0x8013e0 <pxCurrentTCB>
    2e68:	f0 91 e1 13 	lds	r31, 0x13E1	; 0x8013e1 <pxCurrentTCB+0x1>
    2e6c:	81 e0       	ldi	r24, 0x01	; 1
    2e6e:	87 a7       	std	Z+47, r24	; 0x2f
    2e70:	c1 14       	cp	r12, r1
    2e72:	d1 04       	cpc	r13, r1
    2e74:	e1 04       	cpc	r14, r1
    2e76:	f1 04       	cpc	r15, r1
    2e78:	31 f0       	breq	.+12     	; 0x2e86 <xTaskNotifyWait+0x82>
    2e7a:	41 e0       	ldi	r20, 0x01	; 1
    2e7c:	c7 01       	movw	r24, r14
    2e7e:	b6 01       	movw	r22, r12
    2e80:	5f d9       	rcall	.-3394   	; 0x2140 <prvAddCurrentTaskToDelayedList>
    2e82:	0e 94 3e 0a 	call	0x147c	; 0x147c <vPortYield>
    2e86:	0f 90       	pop	r0
    2e88:	0f be       	out	0x3f, r0	; 63
    2e8a:	0f b6       	in	r0, 0x3f	; 63
    2e8c:	f8 94       	cli
    2e8e:	0f 92       	push	r0
    2e90:	01 15       	cp	r16, r1
    2e92:	11 05       	cpc	r17, r1
    2e94:	69 f0       	breq	.+26     	; 0x2eb0 <xTaskNotifyWait+0xac>
    2e96:	e0 91 e0 13 	lds	r30, 0x13E0	; 0x8013e0 <pxCurrentTCB>
    2e9a:	f0 91 e1 13 	lds	r31, 0x13E1	; 0x8013e1 <pxCurrentTCB+0x1>
    2e9e:	83 a5       	ldd	r24, Z+43	; 0x2b
    2ea0:	94 a5       	ldd	r25, Z+44	; 0x2c
    2ea2:	a5 a5       	ldd	r26, Z+45	; 0x2d
    2ea4:	b6 a5       	ldd	r27, Z+46	; 0x2e
    2ea6:	f8 01       	movw	r30, r16
    2ea8:	80 83       	st	Z, r24
    2eaa:	91 83       	std	Z+1, r25	; 0x01
    2eac:	a2 83       	std	Z+2, r26	; 0x02
    2eae:	b3 83       	std	Z+3, r27	; 0x03
    2eb0:	e0 91 e0 13 	lds	r30, 0x13E0	; 0x8013e0 <pxCurrentTCB>
    2eb4:	f0 91 e1 13 	lds	r31, 0x13E1	; 0x8013e1 <pxCurrentTCB+0x1>
    2eb8:	87 a5       	ldd	r24, Z+47	; 0x2f
    2eba:	82 30       	cpi	r24, 0x02	; 2
    2ebc:	b1 f4       	brne	.+44     	; 0x2eea <xTaskNotifyWait+0xe6>
    2ebe:	e0 91 e0 13 	lds	r30, 0x13E0	; 0x8013e0 <pxCurrentTCB>
    2ec2:	f0 91 e1 13 	lds	r31, 0x13E1	; 0x8013e1 <pxCurrentTCB+0x1>
    2ec6:	83 a5       	ldd	r24, Z+43	; 0x2b
    2ec8:	94 a5       	ldd	r25, Z+44	; 0x2c
    2eca:	a5 a5       	ldd	r26, Z+45	; 0x2d
    2ecc:	b6 a5       	ldd	r27, Z+46	; 0x2e
    2ece:	80 94       	com	r8
    2ed0:	90 94       	com	r9
    2ed2:	a0 94       	com	r10
    2ed4:	b0 94       	com	r11
    2ed6:	88 22       	and	r8, r24
    2ed8:	99 22       	and	r9, r25
    2eda:	aa 22       	and	r10, r26
    2edc:	bb 22       	and	r11, r27
    2ede:	83 a6       	std	Z+43, r8	; 0x2b
    2ee0:	94 a6       	std	Z+44, r9	; 0x2c
    2ee2:	a5 a6       	std	Z+45, r10	; 0x2d
    2ee4:	b6 a6       	std	Z+46, r11	; 0x2e
    2ee6:	81 e0       	ldi	r24, 0x01	; 1
    2ee8:	01 c0       	rjmp	.+2      	; 0x2eec <xTaskNotifyWait+0xe8>
    2eea:	80 e0       	ldi	r24, 0x00	; 0
    2eec:	e0 91 e0 13 	lds	r30, 0x13E0	; 0x8013e0 <pxCurrentTCB>
    2ef0:	f0 91 e1 13 	lds	r31, 0x13E1	; 0x8013e1 <pxCurrentTCB+0x1>
    2ef4:	17 a6       	std	Z+47, r1	; 0x2f
    2ef6:	0f 90       	pop	r0
    2ef8:	0f be       	out	0x3f, r0	; 63
    2efa:	1f 91       	pop	r17
    2efc:	0f 91       	pop	r16
    2efe:	ff 90       	pop	r15
    2f00:	ef 90       	pop	r14
    2f02:	df 90       	pop	r13
    2f04:	cf 90       	pop	r12
    2f06:	bf 90       	pop	r11
    2f08:	af 90       	pop	r10
    2f0a:	9f 90       	pop	r9
    2f0c:	8f 90       	pop	r8
    2f0e:	7f 90       	pop	r7
    2f10:	6f 90       	pop	r6
    2f12:	5f 90       	pop	r5
    2f14:	4f 90       	pop	r4
    2f16:	08 95       	ret

00002f18 <xTaskGenericNotify>:
    2f18:	0f 93       	push	r16
    2f1a:	1f 93       	push	r17
    2f1c:	cf 93       	push	r28
    2f1e:	df 93       	push	r29
    2f20:	fc 01       	movw	r30, r24
    2f22:	0f b6       	in	r0, 0x3f	; 63
    2f24:	f8 94       	cli
    2f26:	0f 92       	push	r0
    2f28:	01 15       	cp	r16, r1
    2f2a:	11 05       	cpc	r17, r1
    2f2c:	49 f0       	breq	.+18     	; 0x2f40 <xTaskGenericNotify+0x28>
    2f2e:	83 a5       	ldd	r24, Z+43	; 0x2b
    2f30:	94 a5       	ldd	r25, Z+44	; 0x2c
    2f32:	a5 a5       	ldd	r26, Z+45	; 0x2d
    2f34:	b6 a5       	ldd	r27, Z+46	; 0x2e
    2f36:	e8 01       	movw	r28, r16
    2f38:	88 83       	st	Y, r24
    2f3a:	99 83       	std	Y+1, r25	; 0x01
    2f3c:	aa 83       	std	Y+2, r26	; 0x02
    2f3e:	bb 83       	std	Y+3, r27	; 0x03
    2f40:	87 a5       	ldd	r24, Z+47	; 0x2f
    2f42:	92 e0       	ldi	r25, 0x02	; 2
    2f44:	97 a7       	std	Z+47, r25	; 0x2f
    2f46:	22 30       	cpi	r18, 0x02	; 2
    2f48:	b1 f0       	breq	.+44     	; 0x2f76 <xTaskGenericNotify+0x5e>
    2f4a:	18 f4       	brcc	.+6      	; 0x2f52 <xTaskGenericNotify+0x3a>
    2f4c:	21 30       	cpi	r18, 0x01	; 1
    2f4e:	31 f0       	breq	.+12     	; 0x2f5c <xTaskGenericNotify+0x44>
    2f50:	2a c0       	rjmp	.+84     	; 0x2fa6 <xTaskGenericNotify+0x8e>
    2f52:	23 30       	cpi	r18, 0x03	; 3
    2f54:	e9 f0       	breq	.+58     	; 0x2f90 <xTaskGenericNotify+0x78>
    2f56:	24 30       	cpi	r18, 0x04	; 4
    2f58:	01 f1       	breq	.+64     	; 0x2f9a <xTaskGenericNotify+0x82>
    2f5a:	25 c0       	rjmp	.+74     	; 0x2fa6 <xTaskGenericNotify+0x8e>
    2f5c:	03 a5       	ldd	r16, Z+43	; 0x2b
    2f5e:	14 a5       	ldd	r17, Z+44	; 0x2c
    2f60:	25 a5       	ldd	r18, Z+45	; 0x2d
    2f62:	36 a5       	ldd	r19, Z+46	; 0x2e
    2f64:	40 2b       	or	r20, r16
    2f66:	51 2b       	or	r21, r17
    2f68:	62 2b       	or	r22, r18
    2f6a:	73 2b       	or	r23, r19
    2f6c:	43 a7       	std	Z+43, r20	; 0x2b
    2f6e:	54 a7       	std	Z+44, r21	; 0x2c
    2f70:	65 a7       	std	Z+45, r22	; 0x2d
    2f72:	76 a7       	std	Z+46, r23	; 0x2e
    2f74:	18 c0       	rjmp	.+48     	; 0x2fa6 <xTaskGenericNotify+0x8e>
    2f76:	43 a5       	ldd	r20, Z+43	; 0x2b
    2f78:	54 a5       	ldd	r21, Z+44	; 0x2c
    2f7a:	65 a5       	ldd	r22, Z+45	; 0x2d
    2f7c:	76 a5       	ldd	r23, Z+46	; 0x2e
    2f7e:	4f 5f       	subi	r20, 0xFF	; 255
    2f80:	5f 4f       	sbci	r21, 0xFF	; 255
    2f82:	6f 4f       	sbci	r22, 0xFF	; 255
    2f84:	7f 4f       	sbci	r23, 0xFF	; 255
    2f86:	43 a7       	std	Z+43, r20	; 0x2b
    2f88:	54 a7       	std	Z+44, r21	; 0x2c
    2f8a:	65 a7       	std	Z+45, r22	; 0x2d
    2f8c:	76 a7       	std	Z+46, r23	; 0x2e
    2f8e:	0b c0       	rjmp	.+22     	; 0x2fa6 <xTaskGenericNotify+0x8e>
    2f90:	43 a7       	std	Z+43, r20	; 0x2b
    2f92:	54 a7       	std	Z+44, r21	; 0x2c
    2f94:	65 a7       	std	Z+45, r22	; 0x2d
    2f96:	76 a7       	std	Z+46, r23	; 0x2e
    2f98:	06 c0       	rjmp	.+12     	; 0x2fa6 <xTaskGenericNotify+0x8e>
    2f9a:	82 30       	cpi	r24, 0x02	; 2
    2f9c:	49 f1       	breq	.+82     	; 0x2ff0 <xTaskGenericNotify+0xd8>
    2f9e:	43 a7       	std	Z+43, r20	; 0x2b
    2fa0:	54 a7       	std	Z+44, r21	; 0x2c
    2fa2:	65 a7       	std	Z+45, r22	; 0x2d
    2fa4:	76 a7       	std	Z+46, r23	; 0x2e
    2fa6:	81 30       	cpi	r24, 0x01	; 1
    2fa8:	29 f5       	brne	.+74     	; 0x2ff4 <xTaskGenericNotify+0xdc>
    2faa:	ef 01       	movw	r28, r30
    2fac:	8f 01       	movw	r16, r30
    2fae:	0e 5f       	subi	r16, 0xFE	; 254
    2fb0:	1f 4f       	sbci	r17, 0xFF	; 255
    2fb2:	c8 01       	movw	r24, r16
    2fb4:	0e 94 69 09 	call	0x12d2	; 0x12d2 <uxListRemove>
    2fb8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2fba:	90 91 72 13 	lds	r25, 0x1372	; 0x801372 <uxTopReadyPriority>
    2fbe:	98 17       	cp	r25, r24
    2fc0:	10 f4       	brcc	.+4      	; 0x2fc6 <xTaskGenericNotify+0xae>
    2fc2:	80 93 72 13 	sts	0x1372, r24	; 0x801372 <uxTopReadyPriority>
    2fc6:	2b e0       	ldi	r18, 0x0B	; 11
    2fc8:	82 9f       	mul	r24, r18
    2fca:	c0 01       	movw	r24, r0
    2fcc:	11 24       	eor	r1, r1
    2fce:	b8 01       	movw	r22, r16
    2fd0:	8c 54       	subi	r24, 0x4C	; 76
    2fd2:	9c 4e       	sbci	r25, 0xEC	; 236
    2fd4:	0e 94 0b 09 	call	0x1216	; 0x1216 <vListInsertEnd>
    2fd8:	e0 91 e0 13 	lds	r30, 0x13E0	; 0x8013e0 <pxCurrentTCB>
    2fdc:	f0 91 e1 13 	lds	r31, 0x13E1	; 0x8013e1 <pxCurrentTCB+0x1>
    2fe0:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2fe2:	82 8d       	ldd	r24, Z+26	; 0x1a
    2fe4:	89 17       	cp	r24, r25
    2fe6:	40 f4       	brcc	.+16     	; 0x2ff8 <xTaskGenericNotify+0xe0>
    2fe8:	0e 94 3e 0a 	call	0x147c	; 0x147c <vPortYield>
    2fec:	81 e0       	ldi	r24, 0x01	; 1
    2fee:	05 c0       	rjmp	.+10     	; 0x2ffa <xTaskGenericNotify+0xe2>
    2ff0:	80 e0       	ldi	r24, 0x00	; 0
    2ff2:	03 c0       	rjmp	.+6      	; 0x2ffa <xTaskGenericNotify+0xe2>
    2ff4:	81 e0       	ldi	r24, 0x01	; 1
    2ff6:	01 c0       	rjmp	.+2      	; 0x2ffa <xTaskGenericNotify+0xe2>
    2ff8:	81 e0       	ldi	r24, 0x01	; 1
    2ffa:	0f 90       	pop	r0
    2ffc:	0f be       	out	0x3f, r0	; 63
    2ffe:	df 91       	pop	r29
    3000:	cf 91       	pop	r28
    3002:	1f 91       	pop	r17
    3004:	0f 91       	pop	r16
    3006:	08 95       	ret

00003008 <xTaskGenericNotifyFromISR>:
    3008:	ef 92       	push	r14
    300a:	ff 92       	push	r15
    300c:	0f 93       	push	r16
    300e:	1f 93       	push	r17
    3010:	cf 93       	push	r28
    3012:	df 93       	push	r29
    3014:	fc 01       	movw	r30, r24
    3016:	01 15       	cp	r16, r1
    3018:	11 05       	cpc	r17, r1
    301a:	49 f0       	breq	.+18     	; 0x302e <xTaskGenericNotifyFromISR+0x26>
    301c:	83 a5       	ldd	r24, Z+43	; 0x2b
    301e:	94 a5       	ldd	r25, Z+44	; 0x2c
    3020:	a5 a5       	ldd	r26, Z+45	; 0x2d
    3022:	b6 a5       	ldd	r27, Z+46	; 0x2e
    3024:	e8 01       	movw	r28, r16
    3026:	88 83       	st	Y, r24
    3028:	99 83       	std	Y+1, r25	; 0x01
    302a:	aa 83       	std	Y+2, r26	; 0x02
    302c:	bb 83       	std	Y+3, r27	; 0x03
    302e:	87 a5       	ldd	r24, Z+47	; 0x2f
    3030:	92 e0       	ldi	r25, 0x02	; 2
    3032:	97 a7       	std	Z+47, r25	; 0x2f
    3034:	22 30       	cpi	r18, 0x02	; 2
    3036:	b1 f0       	breq	.+44     	; 0x3064 <xTaskGenericNotifyFromISR+0x5c>
    3038:	18 f4       	brcc	.+6      	; 0x3040 <xTaskGenericNotifyFromISR+0x38>
    303a:	21 30       	cpi	r18, 0x01	; 1
    303c:	31 f0       	breq	.+12     	; 0x304a <xTaskGenericNotifyFromISR+0x42>
    303e:	2a c0       	rjmp	.+84     	; 0x3094 <xTaskGenericNotifyFromISR+0x8c>
    3040:	23 30       	cpi	r18, 0x03	; 3
    3042:	e9 f0       	breq	.+58     	; 0x307e <xTaskGenericNotifyFromISR+0x76>
    3044:	24 30       	cpi	r18, 0x04	; 4
    3046:	01 f1       	breq	.+64     	; 0x3088 <xTaskGenericNotifyFromISR+0x80>
    3048:	25 c0       	rjmp	.+74     	; 0x3094 <xTaskGenericNotifyFromISR+0x8c>
    304a:	03 a5       	ldd	r16, Z+43	; 0x2b
    304c:	14 a5       	ldd	r17, Z+44	; 0x2c
    304e:	25 a5       	ldd	r18, Z+45	; 0x2d
    3050:	36 a5       	ldd	r19, Z+46	; 0x2e
    3052:	40 2b       	or	r20, r16
    3054:	51 2b       	or	r21, r17
    3056:	62 2b       	or	r22, r18
    3058:	73 2b       	or	r23, r19
    305a:	43 a7       	std	Z+43, r20	; 0x2b
    305c:	54 a7       	std	Z+44, r21	; 0x2c
    305e:	65 a7       	std	Z+45, r22	; 0x2d
    3060:	76 a7       	std	Z+46, r23	; 0x2e
    3062:	18 c0       	rjmp	.+48     	; 0x3094 <xTaskGenericNotifyFromISR+0x8c>
    3064:	43 a5       	ldd	r20, Z+43	; 0x2b
    3066:	54 a5       	ldd	r21, Z+44	; 0x2c
    3068:	65 a5       	ldd	r22, Z+45	; 0x2d
    306a:	76 a5       	ldd	r23, Z+46	; 0x2e
    306c:	4f 5f       	subi	r20, 0xFF	; 255
    306e:	5f 4f       	sbci	r21, 0xFF	; 255
    3070:	6f 4f       	sbci	r22, 0xFF	; 255
    3072:	7f 4f       	sbci	r23, 0xFF	; 255
    3074:	43 a7       	std	Z+43, r20	; 0x2b
    3076:	54 a7       	std	Z+44, r21	; 0x2c
    3078:	65 a7       	std	Z+45, r22	; 0x2d
    307a:	76 a7       	std	Z+46, r23	; 0x2e
    307c:	0b c0       	rjmp	.+22     	; 0x3094 <xTaskGenericNotifyFromISR+0x8c>
    307e:	43 a7       	std	Z+43, r20	; 0x2b
    3080:	54 a7       	std	Z+44, r21	; 0x2c
    3082:	65 a7       	std	Z+45, r22	; 0x2d
    3084:	76 a7       	std	Z+46, r23	; 0x2e
    3086:	06 c0       	rjmp	.+12     	; 0x3094 <xTaskGenericNotifyFromISR+0x8c>
    3088:	82 30       	cpi	r24, 0x02	; 2
    308a:	d9 f1       	breq	.+118    	; 0x3102 <xTaskGenericNotifyFromISR+0xfa>
    308c:	43 a7       	std	Z+43, r20	; 0x2b
    308e:	54 a7       	std	Z+44, r21	; 0x2c
    3090:	65 a7       	std	Z+45, r22	; 0x2d
    3092:	76 a7       	std	Z+46, r23	; 0x2e
    3094:	81 30       	cpi	r24, 0x01	; 1
    3096:	b9 f5       	brne	.+110    	; 0x3106 <xTaskGenericNotifyFromISR+0xfe>
    3098:	ef 01       	movw	r28, r30
    309a:	80 91 66 13 	lds	r24, 0x1366	; 0x801366 <uxSchedulerSuspended>
    309e:	81 11       	cpse	r24, r1
    30a0:	17 c0       	rjmp	.+46     	; 0x30d0 <xTaskGenericNotifyFromISR+0xc8>
    30a2:	8f 01       	movw	r16, r30
    30a4:	0e 5f       	subi	r16, 0xFE	; 254
    30a6:	1f 4f       	sbci	r17, 0xFF	; 255
    30a8:	c8 01       	movw	r24, r16
    30aa:	0e 94 69 09 	call	0x12d2	; 0x12d2 <uxListRemove>
    30ae:	8a 8d       	ldd	r24, Y+26	; 0x1a
    30b0:	90 91 72 13 	lds	r25, 0x1372	; 0x801372 <uxTopReadyPriority>
    30b4:	98 17       	cp	r25, r24
    30b6:	10 f4       	brcc	.+4      	; 0x30bc <xTaskGenericNotifyFromISR+0xb4>
    30b8:	80 93 72 13 	sts	0x1372, r24	; 0x801372 <uxTopReadyPriority>
    30bc:	eb e0       	ldi	r30, 0x0B	; 11
    30be:	8e 9f       	mul	r24, r30
    30c0:	c0 01       	movw	r24, r0
    30c2:	11 24       	eor	r1, r1
    30c4:	b8 01       	movw	r22, r16
    30c6:	8c 54       	subi	r24, 0x4C	; 76
    30c8:	9c 4e       	sbci	r25, 0xEC	; 236
    30ca:	0e 94 0b 09 	call	0x1216	; 0x1216 <vListInsertEnd>
    30ce:	07 c0       	rjmp	.+14     	; 0x30de <xTaskGenericNotifyFromISR+0xd6>
    30d0:	bf 01       	movw	r22, r30
    30d2:	62 5f       	subi	r22, 0xF2	; 242
    30d4:	7f 4f       	sbci	r23, 0xFF	; 255
    30d6:	8f e8       	ldi	r24, 0x8F	; 143
    30d8:	93 e1       	ldi	r25, 0x13	; 19
    30da:	0e 94 0b 09 	call	0x1216	; 0x1216 <vListInsertEnd>
    30de:	e0 91 e0 13 	lds	r30, 0x13E0	; 0x8013e0 <pxCurrentTCB>
    30e2:	f0 91 e1 13 	lds	r31, 0x13E1	; 0x8013e1 <pxCurrentTCB+0x1>
    30e6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    30e8:	82 8d       	ldd	r24, Z+26	; 0x1a
    30ea:	89 17       	cp	r24, r25
    30ec:	70 f4       	brcc	.+28     	; 0x310a <xTaskGenericNotifyFromISR+0x102>
    30ee:	e1 14       	cp	r14, r1
    30f0:	f1 04       	cpc	r15, r1
    30f2:	19 f0       	breq	.+6      	; 0x30fa <xTaskGenericNotifyFromISR+0xf2>
    30f4:	81 e0       	ldi	r24, 0x01	; 1
    30f6:	e7 01       	movw	r28, r14
    30f8:	88 83       	st	Y, r24
    30fa:	81 e0       	ldi	r24, 0x01	; 1
    30fc:	80 93 6f 13 	sts	0x136F, r24	; 0x80136f <xYieldPending>
    3100:	05 c0       	rjmp	.+10     	; 0x310c <xTaskGenericNotifyFromISR+0x104>
    3102:	80 e0       	ldi	r24, 0x00	; 0
    3104:	03 c0       	rjmp	.+6      	; 0x310c <xTaskGenericNotifyFromISR+0x104>
    3106:	81 e0       	ldi	r24, 0x01	; 1
    3108:	01 c0       	rjmp	.+2      	; 0x310c <xTaskGenericNotifyFromISR+0x104>
    310a:	81 e0       	ldi	r24, 0x01	; 1
    310c:	df 91       	pop	r29
    310e:	cf 91       	pop	r28
    3110:	1f 91       	pop	r17
    3112:	0f 91       	pop	r16
    3114:	ff 90       	pop	r15
    3116:	ef 90       	pop	r14
    3118:	08 95       	ret

0000311a <xTaskNotifyStateClear>:
    TCB_t *pxTCB;
    BaseType_t xReturn;

        /* If null is passed in here then it is the calling task that is having
        its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    311a:	00 97       	sbiw	r24, 0x00	; 0
    311c:	21 f4       	brne	.+8      	; 0x3126 <xTaskNotifyStateClear+0xc>
    311e:	80 91 e0 13 	lds	r24, 0x13E0	; 0x8013e0 <pxCurrentTCB>
    3122:	90 91 e1 13 	lds	r25, 0x13E1	; 0x8013e1 <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    3126:	0f b6       	in	r0, 0x3f	; 63
    3128:	f8 94       	cli
    312a:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
    312c:	fc 01       	movw	r30, r24
    312e:	27 a5       	ldd	r18, Z+47	; 0x2f
    3130:	22 30       	cpi	r18, 0x02	; 2
    3132:	19 f4       	brne	.+6      	; 0x313a <xTaskNotifyStateClear+0x20>
            {
                pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    3134:	17 a6       	std	Z+47, r1	; 0x2f
                xReturn = pdPASS;
    3136:	81 e0       	ldi	r24, 0x01	; 1
    3138:	01 c0       	rjmp	.+2      	; 0x313c <xTaskNotifyStateClear+0x22>
            }
            else
            {
                xReturn = pdFAIL;
    313a:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    313c:	0f 90       	pop	r0
    313e:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    3140:	08 95       	ret

00003142 <prvInsertTimerInActiveList>:
    3142:	cf 92       	push	r12
    3144:	df 92       	push	r13
    3146:	ef 92       	push	r14
    3148:	ff 92       	push	r15
    314a:	0f 93       	push	r16
    314c:	1f 93       	push	r17
    314e:	fc 01       	movw	r30, r24
    3150:	42 83       	std	Z+2, r20	; 0x02
    3152:	53 83       	std	Z+3, r21	; 0x03
    3154:	64 83       	std	Z+4, r22	; 0x04
    3156:	75 83       	std	Z+5, r23	; 0x05
    3158:	93 87       	std	Z+11, r25	; 0x0b
    315a:	82 87       	std	Z+10, r24	; 0x0a
    315c:	04 17       	cp	r16, r20
    315e:	15 07       	cpc	r17, r21
    3160:	26 07       	cpc	r18, r22
    3162:	37 07       	cpc	r19, r23
    3164:	c0 f0       	brcs	.+48     	; 0x3196 <prvInsertTimerInActiveList+0x54>
    3166:	0c 19       	sub	r16, r12
    3168:	1d 09       	sbc	r17, r13
    316a:	2e 09       	sbc	r18, r14
    316c:	3f 09       	sbc	r19, r15
    316e:	86 85       	ldd	r24, Z+14	; 0x0e
    3170:	97 85       	ldd	r25, Z+15	; 0x0f
    3172:	a0 89       	ldd	r26, Z+16	; 0x10
    3174:	b1 89       	ldd	r27, Z+17	; 0x11
    3176:	08 17       	cp	r16, r24
    3178:	19 07       	cpc	r17, r25
    317a:	2a 07       	cpc	r18, r26
    317c:	3b 07       	cpc	r19, r27
    317e:	00 f5       	brcc	.+64     	; 0x31c0 <prvInsertTimerInActiveList+0x7e>
    3180:	bf 01       	movw	r22, r30
    3182:	6e 5f       	subi	r22, 0xFE	; 254
    3184:	7f 4f       	sbci	r23, 0xFF	; 255
    3186:	80 91 ea 13 	lds	r24, 0x13EA	; 0x8013ea <pxOverflowTimerList>
    318a:	90 91 eb 13 	lds	r25, 0x13EB	; 0x8013eb <pxOverflowTimerList+0x1>
    318e:	0e 94 2c 09 	call	0x1258	; 0x1258 <vListInsert>
    3192:	80 e0       	ldi	r24, 0x00	; 0
    3194:	18 c0       	rjmp	.+48     	; 0x31c6 <prvInsertTimerInActiveList+0x84>
    3196:	0c 15       	cp	r16, r12
    3198:	1d 05       	cpc	r17, r13
    319a:	2e 05       	cpc	r18, r14
    319c:	3f 05       	cpc	r19, r15
    319e:	28 f4       	brcc	.+10     	; 0x31aa <prvInsertTimerInActiveList+0x68>
    31a0:	4c 15       	cp	r20, r12
    31a2:	5d 05       	cpc	r21, r13
    31a4:	6e 05       	cpc	r22, r14
    31a6:	7f 05       	cpc	r23, r15
    31a8:	68 f4       	brcc	.+26     	; 0x31c4 <prvInsertTimerInActiveList+0x82>
    31aa:	bf 01       	movw	r22, r30
    31ac:	6e 5f       	subi	r22, 0xFE	; 254
    31ae:	7f 4f       	sbci	r23, 0xFF	; 255
    31b0:	80 91 ec 13 	lds	r24, 0x13EC	; 0x8013ec <pxCurrentTimerList>
    31b4:	90 91 ed 13 	lds	r25, 0x13ED	; 0x8013ed <pxCurrentTimerList+0x1>
    31b8:	0e 94 2c 09 	call	0x1258	; 0x1258 <vListInsert>
    31bc:	80 e0       	ldi	r24, 0x00	; 0
    31be:	03 c0       	rjmp	.+6      	; 0x31c6 <prvInsertTimerInActiveList+0x84>
    31c0:	81 e0       	ldi	r24, 0x01	; 1
    31c2:	01 c0       	rjmp	.+2      	; 0x31c6 <prvInsertTimerInActiveList+0x84>
    31c4:	81 e0       	ldi	r24, 0x01	; 1
    31c6:	1f 91       	pop	r17
    31c8:	0f 91       	pop	r16
    31ca:	ff 90       	pop	r15
    31cc:	ef 90       	pop	r14
    31ce:	df 90       	pop	r13
    31d0:	cf 90       	pop	r12
    31d2:	08 95       	ret

000031d4 <prvCheckForValidListAndQueue>:
    31d4:	0f b6       	in	r0, 0x3f	; 63
    31d6:	f8 94       	cli
    31d8:	0f 92       	push	r0
    31da:	80 91 e8 13 	lds	r24, 0x13E8	; 0x8013e8 <xTimerQueue>
    31de:	90 91 e9 13 	lds	r25, 0x13E9	; 0x8013e9 <xTimerQueue+0x1>
    31e2:	89 2b       	or	r24, r25
    31e4:	e9 f4       	brne	.+58     	; 0x3220 <prvCheckForValidListAndQueue+0x4c>
    31e6:	89 ef       	ldi	r24, 0xF9	; 249
    31e8:	93 e1       	ldi	r25, 0x13	; 19
    31ea:	0e 94 f6 08 	call	0x11ec	; 0x11ec <vListInitialise>
    31ee:	8e ee       	ldi	r24, 0xEE	; 238
    31f0:	93 e1       	ldi	r25, 0x13	; 19
    31f2:	0e 94 f6 08 	call	0x11ec	; 0x11ec <vListInitialise>
    31f6:	89 ef       	ldi	r24, 0xF9	; 249
    31f8:	93 e1       	ldi	r25, 0x13	; 19
    31fa:	90 93 ed 13 	sts	0x13ED, r25	; 0x8013ed <pxCurrentTimerList+0x1>
    31fe:	80 93 ec 13 	sts	0x13EC, r24	; 0x8013ec <pxCurrentTimerList>
    3202:	8e ee       	ldi	r24, 0xEE	; 238
    3204:	93 e1       	ldi	r25, 0x13	; 19
    3206:	90 93 eb 13 	sts	0x13EB, r25	; 0x8013eb <pxOverflowTimerList+0x1>
    320a:	80 93 ea 13 	sts	0x13EA, r24	; 0x8013ea <pxOverflowTimerList>
    320e:	40 e0       	ldi	r20, 0x00	; 0
    3210:	67 e0       	ldi	r22, 0x07	; 7
    3212:	8a e0       	ldi	r24, 0x0A	; 10
    3214:	0e 94 19 0c 	call	0x1832	; 0x1832 <xQueueGenericCreate>
    3218:	90 93 e9 13 	sts	0x13E9, r25	; 0x8013e9 <xTimerQueue+0x1>
    321c:	80 93 e8 13 	sts	0x13E8, r24	; 0x8013e8 <xTimerQueue>
    3220:	0f 90       	pop	r0
    3222:	0f be       	out	0x3f, r0	; 63
    3224:	08 95       	ret

00003226 <xTimerCreateTimerTask>:
    3226:	ef 92       	push	r14
    3228:	ff 92       	push	r15
    322a:	0f 93       	push	r16
    322c:	d3 df       	rcall	.-90     	; 0x31d4 <prvCheckForValidListAndQueue>
    322e:	80 91 e8 13 	lds	r24, 0x13E8	; 0x8013e8 <xTimerQueue>
    3232:	90 91 e9 13 	lds	r25, 0x13E9	; 0x8013e9 <xTimerQueue+0x1>
    3236:	89 2b       	or	r24, r25
    3238:	91 f0       	breq	.+36     	; 0x325e <xTimerCreateTimerTask+0x38>
    323a:	0f 2e       	mov	r0, r31
    323c:	f6 ee       	ldi	r31, 0xE6	; 230
    323e:	ef 2e       	mov	r14, r31
    3240:	f3 e1       	ldi	r31, 0x13	; 19
    3242:	ff 2e       	mov	r15, r31
    3244:	f0 2d       	mov	r31, r0
    3246:	03 e0       	ldi	r16, 0x03	; 3
    3248:	20 e0       	ldi	r18, 0x00	; 0
    324a:	30 e0       	ldi	r19, 0x00	; 0
    324c:	45 e5       	ldi	r20, 0x55	; 85
    324e:	50 e0       	ldi	r21, 0x00	; 0
    3250:	65 e5       	ldi	r22, 0x55	; 85
    3252:	73 e0       	ldi	r23, 0x03	; 3
    3254:	85 e0       	ldi	r24, 0x05	; 5
    3256:	91 e0       	ldi	r25, 0x01	; 1
    3258:	0e 94 13 11 	call	0x2226	; 0x2226 <xTaskCreate>
    325c:	01 c0       	rjmp	.+2      	; 0x3260 <xTimerCreateTimerTask+0x3a>
    325e:	80 e0       	ldi	r24, 0x00	; 0
    3260:	0f 91       	pop	r16
    3262:	ff 90       	pop	r15
    3264:	ef 90       	pop	r14
    3266:	08 95       	ret

00003268 <xTimerGenericCommand>:
    }
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    3268:	8f 92       	push	r8
    326a:	9f 92       	push	r9
    326c:	af 92       	push	r10
    326e:	bf 92       	push	r11
    3270:	cf 92       	push	r12
    3272:	df 92       	push	r13
    3274:	ef 92       	push	r14
    3276:	ff 92       	push	r15
    3278:	0f 93       	push	r16
    327a:	1f 93       	push	r17
    327c:	cf 93       	push	r28
    327e:	df 93       	push	r29
    3280:	cd b7       	in	r28, 0x3d	; 61
    3282:	de b7       	in	r29, 0x3e	; 62
    3284:	27 97       	sbiw	r28, 0x07	; 7
    3286:	0f b6       	in	r0, 0x3f	; 63
    3288:	f8 94       	cli
    328a:	de bf       	out	0x3e, r29	; 62
    328c:	0f be       	out	0x3f, r0	; 63
    328e:	cd bf       	out	0x3d, r28	; 61

    configASSERT( xTimer );

    /* Send a message to the timer service task to perform a particular action
    on a particular timer definition. */
    if( xTimerQueue != NULL )
    3290:	e0 91 e8 13 	lds	r30, 0x13E8	; 0x8013e8 <xTimerQueue>
    3294:	f0 91 e9 13 	lds	r31, 0x13E9	; 0x8013e9 <xTimerQueue+0x1>
    3298:	30 97       	sbiw	r30, 0x00	; 0
    329a:	81 f1       	breq	.+96     	; 0x32fc <xTimerGenericCommand+0x94>
    {
        /* Send a command to the timer service task to start the xTimer timer. */
        xMessage.xMessageID = xCommandID;
    329c:	69 83       	std	Y+1, r22	; 0x01
        xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    329e:	2a 83       	std	Y+2, r18	; 0x02
    32a0:	3b 83       	std	Y+3, r19	; 0x03
    32a2:	4c 83       	std	Y+4, r20	; 0x04
    32a4:	5d 83       	std	Y+5, r21	; 0x05
        xMessage.u.xTimerParameters.pxTimer = xTimer;
    32a6:	9f 83       	std	Y+7, r25	; 0x07
    32a8:	8e 83       	std	Y+6, r24	; 0x06

        if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    32aa:	66 30       	cpi	r22, 0x06	; 6
    32ac:	f4 f4       	brge	.+60     	; 0x32ea <xTimerGenericCommand+0x82>
        {
            if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    32ae:	68 dc       	rcall	.-1840   	; 0x2b80 <xTaskGetSchedulerState>
    32b0:	82 30       	cpi	r24, 0x02	; 2
    32b2:	69 f4       	brne	.+26     	; 0x32ce <xTimerGenericCommand+0x66>
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    32b4:	00 e0       	ldi	r16, 0x00	; 0
    32b6:	a7 01       	movw	r20, r14
    32b8:	96 01       	movw	r18, r12
    32ba:	be 01       	movw	r22, r28
    32bc:	6f 5f       	subi	r22, 0xFF	; 255
    32be:	7f 4f       	sbci	r23, 0xFF	; 255
    32c0:	80 91 e8 13 	lds	r24, 0x13E8	; 0x8013e8 <xTimerQueue>
    32c4:	90 91 e9 13 	lds	r25, 0x13E9	; 0x8013e9 <xTimerQueue+0x1>
    32c8:	0e 94 47 0c 	call	0x188e	; 0x188e <xQueueGenericSend>
    32cc:	18 c0       	rjmp	.+48     	; 0x32fe <xTimerGenericCommand+0x96>
            }
            else
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    32ce:	00 e0       	ldi	r16, 0x00	; 0
    32d0:	20 e0       	ldi	r18, 0x00	; 0
    32d2:	30 e0       	ldi	r19, 0x00	; 0
    32d4:	a9 01       	movw	r20, r18
    32d6:	be 01       	movw	r22, r28
    32d8:	6f 5f       	subi	r22, 0xFF	; 255
    32da:	7f 4f       	sbci	r23, 0xFF	; 255
    32dc:	80 91 e8 13 	lds	r24, 0x13E8	; 0x8013e8 <xTimerQueue>
    32e0:	90 91 e9 13 	lds	r25, 0x13E9	; 0x8013e9 <xTimerQueue+0x1>
    32e4:	0e 94 47 0c 	call	0x188e	; 0x188e <xQueueGenericSend>
    32e8:	0a c0       	rjmp	.+20     	; 0x32fe <xTimerGenericCommand+0x96>
            }
        }
        else
        {
            xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    32ea:	20 e0       	ldi	r18, 0x00	; 0
    32ec:	a8 01       	movw	r20, r16
    32ee:	be 01       	movw	r22, r28
    32f0:	6f 5f       	subi	r22, 0xFF	; 255
    32f2:	7f 4f       	sbci	r23, 0xFF	; 255
    32f4:	cf 01       	movw	r24, r30
    32f6:	0e 94 01 0d 	call	0x1a02	; 0x1a02 <xQueueGenericSendFromISR>
    32fa:	01 c0       	rjmp	.+2      	; 0x32fe <xTimerGenericCommand+0x96>
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
    32fc:	80 e0       	ldi	r24, 0x00	; 0
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xReturn;
}
    32fe:	27 96       	adiw	r28, 0x07	; 7
    3300:	0f b6       	in	r0, 0x3f	; 63
    3302:	f8 94       	cli
    3304:	de bf       	out	0x3e, r29	; 62
    3306:	0f be       	out	0x3f, r0	; 63
    3308:	cd bf       	out	0x3d, r28	; 61
    330a:	df 91       	pop	r29
    330c:	cf 91       	pop	r28
    330e:	1f 91       	pop	r17
    3310:	0f 91       	pop	r16
    3312:	ff 90       	pop	r15
    3314:	ef 90       	pop	r14
    3316:	df 90       	pop	r13
    3318:	cf 90       	pop	r12
    331a:	bf 90       	pop	r11
    331c:	af 90       	pop	r10
    331e:	9f 90       	pop	r9
    3320:	8f 90       	pop	r8
    3322:	08 95       	ret

00003324 <prvSampleTimeNow>:
    return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    3324:	2f 92       	push	r2
    3326:	3f 92       	push	r3
    3328:	4f 92       	push	r4
    332a:	5f 92       	push	r5
    332c:	6f 92       	push	r6
    332e:	7f 92       	push	r7
    3330:	8f 92       	push	r8
    3332:	9f 92       	push	r9
    3334:	af 92       	push	r10
    3336:	bf 92       	push	r11
    3338:	cf 92       	push	r12
    333a:	df 92       	push	r13
    333c:	ef 92       	push	r14
    333e:	ff 92       	push	r15
    3340:	0f 93       	push	r16
    3342:	1f 93       	push	r17
    3344:	cf 93       	push	r28
    3346:	df 93       	push	r29
    3348:	1c 01       	movw	r2, r24
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

    xTimeNow = xTaskGetTickCount();
    334a:	cd d8       	rcall	.-3686   	; 0x24e6 <xTaskGetTickCount>
    334c:	2b 01       	movw	r4, r22
    334e:	3c 01       	movw	r6, r24

    if( xTimeNow < xLastTime )
    3350:	80 91 e2 13 	lds	r24, 0x13E2	; 0x8013e2 <xLastTime.2432>
    3354:	90 91 e3 13 	lds	r25, 0x13E3	; 0x8013e3 <xLastTime.2432+0x1>
    3358:	a0 91 e4 13 	lds	r26, 0x13E4	; 0x8013e4 <xLastTime.2432+0x2>
    335c:	b0 91 e5 13 	lds	r27, 0x13E5	; 0x8013e5 <xLastTime.2432+0x3>
    3360:	48 16       	cp	r4, r24
    3362:	59 06       	cpc	r5, r25
    3364:	6a 06       	cpc	r6, r26
    3366:	7b 06       	cpc	r7, r27
    3368:	08 f0       	brcs	.+2      	; 0x336c <prvSampleTimeNow+0x48>
    336a:	53 c0       	rjmp	.+166    	; 0x3412 <prvSampleTimeNow+0xee>
    336c:	3b c0       	rjmp	.+118    	; 0x33e4 <prvSampleTimeNow+0xc0>
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    {
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    336e:	07 80       	ldd	r0, Z+7	; 0x07
    3370:	f0 85       	ldd	r31, Z+8	; 0x08
    3372:	e0 2d       	mov	r30, r0
    3374:	80 80       	ld	r8, Z
    3376:	91 80       	ldd	r9, Z+1	; 0x01
    3378:	a2 80       	ldd	r10, Z+2	; 0x02
    337a:	b3 80       	ldd	r11, Z+3	; 0x03

        /* Remove the timer from the list. */
        pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    337c:	c0 85       	ldd	r28, Z+8	; 0x08
    337e:	d1 85       	ldd	r29, Z+9	; 0x09
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3380:	8e 01       	movw	r16, r28
    3382:	0e 5f       	subi	r16, 0xFE	; 254
    3384:	1f 4f       	sbci	r17, 0xFF	; 255
    3386:	c8 01       	movw	r24, r16
    3388:	0e 94 69 09 	call	0x12d2	; 0x12d2 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* Execute its callback, then send a command to restart the timer if
        it is an auto-reload timer.  It cannot be restarted here as the lists
        have not yet been switched. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    338c:	ec 89       	ldd	r30, Y+20	; 0x14
    338e:	fd 89       	ldd	r31, Y+21	; 0x15
    3390:	ce 01       	movw	r24, r28
    3392:	19 95       	eicall

        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    3394:	8f 89       	ldd	r24, Y+23	; 0x17
    3396:	82 ff       	sbrs	r24, 2
    3398:	25 c0       	rjmp	.+74     	; 0x33e4 <prvSampleTimeNow+0xc0>
            the timer going into the same timer list then it has already expired
            and the timer should be re-inserted into the current list so it is
            processed again within this loop.  Otherwise a command should be sent
            to restart the timer to ensure it is only inserted into a list after
            the lists have been swapped. */
            xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    339a:	8e 85       	ldd	r24, Y+14	; 0x0e
    339c:	9f 85       	ldd	r25, Y+15	; 0x0f
    339e:	a8 89       	ldd	r26, Y+16	; 0x10
    33a0:	b9 89       	ldd	r27, Y+17	; 0x11
    33a2:	88 0d       	add	r24, r8
    33a4:	99 1d       	adc	r25, r9
    33a6:	aa 1d       	adc	r26, r10
    33a8:	bb 1d       	adc	r27, r11
            if( xReloadTime > xNextExpireTime )
    33aa:	88 16       	cp	r8, r24
    33ac:	99 06       	cpc	r9, r25
    33ae:	aa 06       	cpc	r10, r26
    33b0:	bb 06       	cpc	r11, r27
    33b2:	70 f4       	brcc	.+28     	; 0x33d0 <prvSampleTimeNow+0xac>
            {
                listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    33b4:	8a 83       	std	Y+2, r24	; 0x02
    33b6:	9b 83       	std	Y+3, r25	; 0x03
    33b8:	ac 83       	std	Y+4, r26	; 0x04
    33ba:	bd 83       	std	Y+5, r27	; 0x05
                listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    33bc:	db 87       	std	Y+11, r29	; 0x0b
    33be:	ca 87       	std	Y+10, r28	; 0x0a
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    33c0:	b8 01       	movw	r22, r16
    33c2:	80 91 ec 13 	lds	r24, 0x13EC	; 0x8013ec <pxCurrentTimerList>
    33c6:	90 91 ed 13 	lds	r25, 0x13ED	; 0x8013ed <pxCurrentTimerList+0x1>
    33ca:	0e 94 2c 09 	call	0x1258	; 0x1258 <vListInsert>
    33ce:	0a c0       	rjmp	.+20     	; 0x33e4 <prvSampleTimeNow+0xc0>
            }
            else
            {
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    33d0:	c1 2c       	mov	r12, r1
    33d2:	d1 2c       	mov	r13, r1
    33d4:	76 01       	movw	r14, r12
    33d6:	00 e0       	ldi	r16, 0x00	; 0
    33d8:	10 e0       	ldi	r17, 0x00	; 0
    33da:	a5 01       	movw	r20, r10
    33dc:	94 01       	movw	r18, r8
    33de:	60 e0       	ldi	r22, 0x00	; 0
    33e0:	ce 01       	movw	r24, r28
    33e2:	42 df       	rcall	.-380    	; 0x3268 <xTimerGenericCommand>

    /* The tick count has overflowed.  The timer lists must be switched.
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    33e4:	e0 91 ec 13 	lds	r30, 0x13EC	; 0x8013ec <pxCurrentTimerList>
    33e8:	f0 91 ed 13 	lds	r31, 0x13ED	; 0x8013ed <pxCurrentTimerList+0x1>
    33ec:	80 81       	ld	r24, Z
    33ee:	81 11       	cpse	r24, r1
    33f0:	be cf       	rjmp	.-132    	; 0x336e <prvSampleTimeNow+0x4a>
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxTemp = pxCurrentTimerList;
    pxCurrentTimerList = pxOverflowTimerList;
    33f2:	80 91 ea 13 	lds	r24, 0x13EA	; 0x8013ea <pxOverflowTimerList>
    33f6:	90 91 eb 13 	lds	r25, 0x13EB	; 0x8013eb <pxOverflowTimerList+0x1>
    33fa:	90 93 ed 13 	sts	0x13ED, r25	; 0x8013ed <pxCurrentTimerList+0x1>
    33fe:	80 93 ec 13 	sts	0x13EC, r24	; 0x8013ec <pxCurrentTimerList>
    pxOverflowTimerList = pxTemp;
    3402:	f0 93 eb 13 	sts	0x13EB, r31	; 0x8013eb <pxOverflowTimerList+0x1>
    3406:	e0 93 ea 13 	sts	0x13EA, r30	; 0x8013ea <pxOverflowTimerList>
    xTimeNow = xTaskGetTickCount();

    if( xTimeNow < xLastTime )
    {
        prvSwitchTimerLists();
        *pxTimerListsWereSwitched = pdTRUE;
    340a:	81 e0       	ldi	r24, 0x01	; 1
    340c:	f1 01       	movw	r30, r2
    340e:	80 83       	st	Z, r24
    3410:	02 c0       	rjmp	.+4      	; 0x3416 <prvSampleTimeNow+0xf2>
    }
    else
    {
        *pxTimerListsWereSwitched = pdFALSE;
    3412:	f1 01       	movw	r30, r2
    3414:	10 82       	st	Z, r1
    }

    xLastTime = xTimeNow;
    3416:	40 92 e2 13 	sts	0x13E2, r4	; 0x8013e2 <xLastTime.2432>
    341a:	50 92 e3 13 	sts	0x13E3, r5	; 0x8013e3 <xLastTime.2432+0x1>
    341e:	60 92 e4 13 	sts	0x13E4, r6	; 0x8013e4 <xLastTime.2432+0x2>
    3422:	70 92 e5 13 	sts	0x13E5, r7	; 0x8013e5 <xLastTime.2432+0x3>

    return xTimeNow;
}
    3426:	c3 01       	movw	r24, r6
    3428:	b2 01       	movw	r22, r4
    342a:	df 91       	pop	r29
    342c:	cf 91       	pop	r28
    342e:	1f 91       	pop	r17
    3430:	0f 91       	pop	r16
    3432:	ff 90       	pop	r15
    3434:	ef 90       	pop	r14
    3436:	df 90       	pop	r13
    3438:	cf 90       	pop	r12
    343a:	bf 90       	pop	r11
    343c:	af 90       	pop	r10
    343e:	9f 90       	pop	r9
    3440:	8f 90       	pop	r8
    3442:	7f 90       	pop	r7
    3444:	6f 90       	pop	r6
    3446:	5f 90       	pop	r5
    3448:	4f 90       	pop	r4
    344a:	3f 90       	pop	r3
    344c:	2f 90       	pop	r2
    344e:	08 95       	ret

00003450 <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    3450:	08 95       	ret

00003452 <vApplicationMallocFailedHook>:
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    3452:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    3454:	2f 9a       	sbi	0x05, 7	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3456:	2f ef       	ldi	r18, 0xFF	; 255
    3458:	80 e7       	ldi	r24, 0x70	; 112
    345a:	92 e0       	ldi	r25, 0x02	; 2
    345c:	21 50       	subi	r18, 0x01	; 1
    345e:	80 40       	sbci	r24, 0x00	; 0
    3460:	90 40       	sbci	r25, 0x00	; 0
    3462:	e1 f7       	brne	.-8      	; 0x345c <vApplicationMallocFailedHook+0xa>
    3464:	00 c0       	rjmp	.+0      	; 0x3466 <vApplicationMallocFailedHook+0x14>
    3466:	00 00       	nop
    for(;;)
    {
        _delay_ms(50);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED fast blink.
    3468:	1f 9a       	sbi	0x03, 7	; 3
    346a:	f5 cf       	rjmp	.-22     	; 0x3456 <vApplicationMallocFailedHook+0x4>

0000346c <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook( TaskHandle_t xTask, portCHAR *pcTaskName ) __attribute__((weak));

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)), portCHAR *pcTaskName __attribute__((unused))  )
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    346c:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    346e:	2f 9a       	sbi	0x05, 7	; 5
    3470:	2f ef       	ldi	r18, 0xFF	; 255
    3472:	87 ea       	ldi	r24, 0xA7	; 167
    3474:	91 e6       	ldi	r25, 0x61	; 97
    3476:	21 50       	subi	r18, 0x01	; 1
    3478:	80 40       	sbci	r24, 0x00	; 0
    347a:	90 40       	sbci	r25, 0x00	; 0
    347c:	e1 f7       	brne	.-8      	; 0x3476 <vApplicationStackOverflowHook+0xa>
    347e:	00 c0       	rjmp	.+0      	; 0x3480 <vApplicationStackOverflowHook+0x14>
    3480:	00 00       	nop
    for(;;)
    {
        _delay_ms(2000);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED slow blink.
    3482:	1f 9a       	sbi	0x03, 7	; 3
    3484:	f5 cf       	rjmp	.-22     	; 0x3470 <vApplicationStackOverflowHook+0x4>

00003486 <create_tasks_and_semaphores>:
// Prototype for LoRaWAN handler
void lora_handler_create(UBaseType_t lora_handler_task_priority);

/*-----------------------------------------------------------*/
void create_tasks_and_semaphores(void)
{
    3486:	8f 92       	push	r8
    3488:	9f 92       	push	r9
    348a:	af 92       	push	r10
    348c:	bf 92       	push	r11
    348e:	cf 92       	push	r12
    3490:	df 92       	push	r13
    3492:	ef 92       	push	r14
    3494:	ff 92       	push	r15
    3496:	0f 93       	push	r16
    3498:	1f 93       	push	r17
    349a:	cf 93       	push	r28
    349c:	df 93       	push	r29
		//{
			//xSemaphoreGive( ( xTestSemaphore ) );  // Make the mutex available for use, by initially "Giving" the Semaphore.
		//}
	//}
	
	startMeasureEventGroup = xEventGroupCreate();
    349e:	0e 94 53 06 	call	0xca6	; 0xca6 <xEventGroupCreate>
    34a2:	90 93 96 14 	sts	0x1496, r25	; 0x801496 <startMeasureEventGroup+0x1>
    34a6:	80 93 95 14 	sts	0x1495, r24	; 0x801495 <startMeasureEventGroup>
	readyEventGroup = xEventGroupCreate();
    34aa:	0e 94 53 06 	call	0xca6	; 0xca6 <xEventGroupCreate>
    34ae:	90 93 7c 14 	sts	0x147C, r25	; 0x80147c <readyEventGroup+0x1>
    34b2:	80 93 7b 14 	sts	0x147B, r24	; 0x80147b <readyEventGroup>

	xMessageBuffer = xMessageBufferCreate(100);
    34b6:	41 e0       	ldi	r20, 0x01	; 1
    34b8:	60 e0       	ldi	r22, 0x00	; 0
    34ba:	70 e0       	ldi	r23, 0x00	; 0
    34bc:	84 e6       	ldi	r24, 0x64	; 100
    34be:	90 e0       	ldi	r25, 0x00	; 0
    34c0:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <xStreamBufferGenericCreate>
    34c4:	90 93 78 14 	sts	0x1478, r25	; 0x801478 <xMessageBuffer+0x1>
    34c8:	80 93 77 14 	sts	0x1477, r24	; 0x801477 <xMessageBuffer>
	_downlinkMessagebuffer = xMessageBufferCreate(sizeof(lora_payload_t)*2);
    34cc:	41 e0       	ldi	r20, 0x01	; 1
    34ce:	60 e0       	ldi	r22, 0x00	; 0
    34d0:	70 e0       	ldi	r23, 0x00	; 0
    34d2:	8c e2       	ldi	r24, 0x2C	; 44
    34d4:	90 e0       	ldi	r25, 0x00	; 0
    34d6:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <xStreamBufferGenericCreate>
    34da:	90 93 7a 14 	sts	0x147A, r25	; 0x80147a <_downlinkMessagebuffer+0x1>
    34de:	80 93 79 14 	sts	0x1479, r24	; 0x801479 <_downlinkMessagebuffer>
	
	configuration_create();
    34e2:	0e 94 35 03 	call	0x66a	; 0x66a <configuration_create>
	
	
	humAndTempReader_t humidityAndTemperature = humAndTempReader_create(TASK_HUMIDITY_SENSOR_PRIORITY, HUMIDITY_TASK_STACK, 
    34e6:	e0 90 7b 14 	lds	r14, 0x147B	; 0x80147b <readyEventGroup>
    34ea:	f0 90 7c 14 	lds	r15, 0x147C	; 0x80147c <readyEventGroup+0x1>
    34ee:	40 91 95 14 	lds	r20, 0x1495	; 0x801495 <startMeasureEventGroup>
    34f2:	50 91 96 14 	lds	r21, 0x1496	; 0x801496 <startMeasureEventGroup+0x1>
    34f6:	a1 2c       	mov	r10, r1
    34f8:	b1 2c       	mov	r11, r1
    34fa:	65 01       	movw	r12, r10
    34fc:	68 94       	set
    34fe:	a4 f8       	bld	r10, 4
    3500:	01 e0       	ldi	r16, 0x01	; 1
    3502:	10 e0       	ldi	r17, 0x00	; 0
    3504:	20 e0       	ldi	r18, 0x00	; 0
    3506:	30 e0       	ldi	r19, 0x00	; 0
    3508:	60 ec       	ldi	r22, 0xC0	; 192
    350a:	81 e0       	ldi	r24, 0x01	; 1
    350c:	0e 94 4f 05 	call	0xa9e	; 0xa9e <humAndTempReader_create>
    3510:	c8 2f       	mov	r28, r24
    3512:	d9 2f       	mov	r29, r25
	startMeasureEventGroup, BIT_MEASURE_HUMIDITY, readyEventGroup, BIT_DONE_MEASURE_HUMIDITY);
	
	co2reader_t co2reader = co2Reader_create(TASK_CO2_SENSOR_PRIORITY, CO2_TASK_STACK, startMeasureEventGroup, BIT_MEASURE_CO2,
    3514:	e0 90 7b 14 	lds	r14, 0x147B	; 0x80147b <readyEventGroup>
    3518:	f0 90 7c 14 	lds	r15, 0x147C	; 0x80147c <readyEventGroup+0x1>
    351c:	40 91 95 14 	lds	r20, 0x1495	; 0x801495 <startMeasureEventGroup>
    3520:	50 91 96 14 	lds	r21, 0x1496	; 0x801496 <startMeasureEventGroup+0x1>
    3524:	a1 2c       	mov	r10, r1
    3526:	b1 2c       	mov	r11, r1
    3528:	65 01       	movw	r12, r10
    352a:	68 94       	set
    352c:	a5 f8       	bld	r10, 5
    352e:	02 e0       	ldi	r16, 0x02	; 2
    3530:	10 e0       	ldi	r17, 0x00	; 0
    3532:	20 e0       	ldi	r18, 0x00	; 0
    3534:	30 e0       	ldi	r19, 0x00	; 0
    3536:	60 ec       	ldi	r22, 0xC0	; 192
    3538:	81 e0       	ldi	r24, 0x01	; 1
    353a:	0e 94 6f 02 	call	0x4de	; 0x4de <co2Reader_create>
    353e:	4c 01       	movw	r8, r24
	readyEventGroup, BIT_DONE_MEASURE_CO2);
	
	servo_initialise();
    3540:	0e 94 30 06 	call	0xc60	; 0xc60 <servo_initialise>
	
	device_create(TASK_DEVICE_PRIORITY, DEVICE_TASK_STACK, startMeasureEventGroup, ALL_BIT_MEASURE,
    3544:	e0 90 7b 14 	lds	r14, 0x147B	; 0x80147b <readyEventGroup>
    3548:	f0 90 7c 14 	lds	r15, 0x147C	; 0x80147c <readyEventGroup+0x1>
    354c:	40 91 95 14 	lds	r20, 0x1495	; 0x801495 <startMeasureEventGroup>
    3550:	50 91 96 14 	lds	r21, 0x1496	; 0x801496 <startMeasureEventGroup+0x1>
    3554:	80 91 78 14 	lds	r24, 0x1478	; 0x801478 <xMessageBuffer+0x1>
    3558:	8f 93       	push	r24
    355a:	80 91 77 14 	lds	r24, 0x1477	; 0x801477 <xMessageBuffer>
    355e:	8f 93       	push	r24
    3560:	df 93       	push	r29
    3562:	cf 93       	push	r28
    3564:	0f 2e       	mov	r0, r31
    3566:	f0 e3       	ldi	r31, 0x30	; 48
    3568:	af 2e       	mov	r10, r31
    356a:	b1 2c       	mov	r11, r1
    356c:	c1 2c       	mov	r12, r1
    356e:	d1 2c       	mov	r13, r1
    3570:	f0 2d       	mov	r31, r0
    3572:	03 e0       	ldi	r16, 0x03	; 3
    3574:	10 e0       	ldi	r17, 0x00	; 0
    3576:	20 e0       	ldi	r18, 0x00	; 0
    3578:	30 e0       	ldi	r19, 0x00	; 0
    357a:	60 ec       	ldi	r22, 0xC0	; 192
    357c:	83 e0       	ldi	r24, 0x03	; 3
    357e:	0e 94 cc 03 	call	0x798	; 0x798 <device_create>
	readyEventGroup, ALL_BIT_DONE_MEASURE, co2reader, humidityAndTemperature, xMessageBuffer);
	
	//lora_UpLinkHandler_create(TASK_LORA_DRIVER_PRIORITY,xMessageBuffer);
	
	//lora_DownLinkHandler_create(TASK_LORA_DRIVER_PRIORITYDOWN,_downlinkMessagebuffer);
}
    3582:	0f 90       	pop	r0
    3584:	0f 90       	pop	r0
    3586:	0f 90       	pop	r0
    3588:	0f 90       	pop	r0
    358a:	df 91       	pop	r29
    358c:	cf 91       	pop	r28
    358e:	1f 91       	pop	r17
    3590:	0f 91       	pop	r16
    3592:	ff 90       	pop	r15
    3594:	ef 90       	pop	r14
    3596:	df 90       	pop	r13
    3598:	cf 90       	pop	r12
    359a:	bf 90       	pop	r11
    359c:	af 90       	pop	r10
    359e:	9f 90       	pop	r9
    35a0:	8f 90       	pop	r8
    35a2:	08 95       	ret

000035a4 <initialiseSystem>:

/*-----------------------------------------------------------*/
void initialiseSystem()
{
	// Set output ports for leds used in the example
	DDRA |= _BV(DDA0) | _BV(DDA7);
    35a4:	81 b1       	in	r24, 0x01	; 1
    35a6:	81 68       	ori	r24, 0x81	; 129
    35a8:	81 b9       	out	0x01, r24	; 1
	// Initialise the trace-driver to be used together with the R2R-Network
	trace_init();
    35aa:	0e 94 3d 06 	call	0xc7a	; 0xc7a <trace_init>
	// Make it possible to use stdio on COM port 0 (USB) on Arduino board - Setting 57600,8,N,1
	stdioCreate(ser_USART0);
    35ae:	80 e0       	ldi	r24, 0x00	; 0
    35b0:	78 d7       	rcall	.+3824   	; 0x44a2 <stdioCreate>
	

	// vvvvvvvvvvvvvvvvv BELOW IS LoRaWAN initialisation vvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
	// Initialise the HAL layer and use 5 for LED driver priority
	hal_create(5);
    35b2:	85 e0       	ldi	r24, 0x05	; 5
    35b4:	11 d0       	rcall	.+34     	; 0x35d8 <hal_create>
	// Initialise the LoRaWAN driver without down-link buffer
	lora_driver_create(LORA_USART, _downlinkMessagebuffer);
    35b6:	60 91 79 14 	lds	r22, 0x1479	; 0x801479 <_downlinkMessagebuffer>
    35ba:	70 91 7a 14 	lds	r23, 0x147A	; 0x80147a <_downlinkMessagebuffer+0x1>
    35be:	81 e0       	ldi	r24, 0x01	; 1
	// Create LoRaWAN task and start it up with priority 3 
	
	hih8120Create();
    35c0:	57 d2       	rcall	.+1198   	; 0x3a70 <lora_driver_create>
    35c2:	69 d0       	rcall	.+210    	; 0x3696 <hih8120Create>
	
	// Let's create some tasks
	create_tasks_and_semaphores();
    35c4:	60 cf       	rjmp	.-320    	; 0x3486 <create_tasks_and_semaphores>
    35c6:	08 95       	ret

000035c8 <main>:
    35c8:	ed df       	rcall	.-38     	; 0x35a4 <initialiseSystem>
}
/*-----------------------------------------------------------*/
int main(void)
{
	initialiseSystem(); // Must be done as the very first thing!!
	printf("Program Started!!\n");
    35ca:	8d e5       	ldi	r24, 0x5D	; 93
    35cc:	93 e0       	ldi	r25, 0x03	; 3
    35ce:	0e 94 af 27 	call	0x4f5e	; 0x4f5e <puts>
	vTaskStartScheduler(); // Initialise and run the freeRTOS scheduler. Execution should never return from here.
    35d2:	0e 94 31 12 	call	0x2462	; 0x2462 <vTaskStartScheduler>
    35d6:	ff cf       	rjmp	.-2      	; 0x35d6 <main+0xe>

000035d8 <hal_create>:
    35d8:	e7 e9       	ldi	r30, 0x97	; 151
    35da:	f4 e1       	ldi	r31, 0x14	; 20
    35dc:	2b e7       	ldi	r18, 0x7B	; 123
    35de:	3d e1       	ldi	r19, 0x1D	; 29
    35e0:	31 83       	std	Z+1, r19	; 0x01
    35e2:	20 83       	st	Z, r18
    35e4:	2e e7       	ldi	r18, 0x7E	; 126
    35e6:	3d e1       	ldi	r19, 0x1D	; 29
    35e8:	33 83       	std	Z+3, r19	; 0x03
    35ea:	22 83       	std	Z+2, r18	; 0x02
    35ec:	29 e8       	ldi	r18, 0x89	; 137
    35ee:	3d e1       	ldi	r19, 0x1D	; 29
    35f0:	35 83       	std	Z+5, r19	; 0x05
    35f2:	24 83       	std	Z+4, r18	; 0x04
    35f4:	2d e8       	ldi	r18, 0x8D	; 141
    35f6:	3d e1       	ldi	r19, 0x1D	; 29
    35f8:	37 83       	std	Z+7, r19	; 0x07
    35fa:	26 83       	std	Z+6, r18	; 0x06
    35fc:	23 e9       	ldi	r18, 0x93	; 147
    35fe:	3d e1       	ldi	r19, 0x1D	; 29
    3600:	31 87       	std	Z+9, r19	; 0x09
    3602:	20 87       	std	Z+8, r18	; 0x08
    3604:	2f e9       	ldi	r18, 0x9F	; 159
    3606:	3d e1       	ldi	r19, 0x1D	; 29
    3608:	33 87       	std	Z+11, r19	; 0x0b
    360a:	22 87       	std	Z+10, r18	; 0x0a
    360c:	24 ea       	ldi	r18, 0xA4	; 164
    360e:	3d e1       	ldi	r19, 0x1D	; 29
    3610:	35 87       	std	Z+13, r19	; 0x0d
    3612:	24 87       	std	Z+12, r18	; 0x0c
    3614:	20 eb       	ldi	r18, 0xB0	; 176
    3616:	3d e1       	ldi	r19, 0x1D	; 29
    3618:	37 87       	std	Z+15, r19	; 0x0f
    361a:	26 87       	std	Z+14, r18	; 0x0e
    361c:	20 e9       	ldi	r18, 0x90	; 144
    361e:	3d e1       	ldi	r19, 0x1D	; 29
    3620:	31 8b       	std	Z+17, r19	; 0x11
    3622:	20 8b       	std	Z+16, r18	; 0x10
    3624:	25 eb       	ldi	r18, 0xB5	; 181
    3626:	3d e1       	ldi	r19, 0x1D	; 29
    3628:	33 8b       	std	Z+19, r19	; 0x13
    362a:	22 8b       	std	Z+18, r18	; 0x12
    362c:	22 ec       	ldi	r18, 0xC2	; 194
    362e:	3d e1       	ldi	r19, 0x1D	; 29
    3630:	35 8b       	std	Z+21, r19	; 0x15
    3632:	24 8b       	std	Z+20, r18	; 0x14
    3634:	68 2f       	mov	r22, r24
    3636:	cf 01       	movw	r24, r30
    3638:	50 c1       	rjmp	.+672    	; 0x38da <led_create>
    363a:	08 95       	ret

0000363c <_hihTwiCallback>:
    363c:	65 30       	cpi	r22, 0x05	; 5
    363e:	f1 f4       	brne	.+60     	; 0x367c <_hihTwiCallback+0x40>
    3640:	fa 01       	movw	r30, r20
    3642:	80 81       	ld	r24, Z
    3644:	8f 73       	andi	r24, 0x3F	; 63
    3646:	90 e0       	ldi	r25, 0x00	; 0
    3648:	98 2f       	mov	r25, r24
    364a:	88 27       	eor	r24, r24
    364c:	21 81       	ldd	r18, Z+1	; 0x01
    364e:	82 2b       	or	r24, r18
    3650:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <_hum+0x1>
    3654:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <_hum>
    3658:	82 81       	ldd	r24, Z+2	; 0x02
    365a:	f0 e4       	ldi	r31, 0x40	; 64
    365c:	8f 9f       	mul	r24, r31
    365e:	c0 01       	movw	r24, r0
    3660:	11 24       	eor	r1, r1
    3662:	fa 01       	movw	r30, r20
    3664:	23 81       	ldd	r18, Z+3	; 0x03
    3666:	26 95       	lsr	r18
    3668:	26 95       	lsr	r18
    366a:	82 2b       	or	r24, r18
    366c:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <_temp+0x1>
    3670:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <_temp>
    3674:	81 e0       	ldi	r24, 0x01	; 1
    3676:	80 93 04 14 	sts	0x1404, r24	; 0x801404 <_measuringIsReady>
    367a:	08 95       	ret
    367c:	64 30       	cpi	r22, 0x04	; 4
    367e:	51 f0       	breq	.+20     	; 0x3694 <_hihTwiCallback+0x58>
    3680:	80 e0       	ldi	r24, 0x00	; 0
    3682:	90 e4       	ldi	r25, 0x40	; 64
    3684:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <_temp+0x1>
    3688:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <_temp>
    368c:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <_hum+0x1>
    3690:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <_hum>
    3694:	08 95       	ret

00003696 <hih8120Create>:
    3696:	0f 93       	push	r16
    3698:	1f 93       	push	r17
    369a:	0e e1       	ldi	r16, 0x1E	; 30
    369c:	1b e1       	ldi	r17, 0x1B	; 27
    369e:	20 e0       	ldi	r18, 0x00	; 0
    36a0:	34 e2       	ldi	r19, 0x24	; 36
    36a2:	44 ef       	ldi	r20, 0xF4	; 244
    36a4:	50 e0       	ldi	r21, 0x00	; 0
    36a6:	60 e0       	ldi	r22, 0x00	; 0
    36a8:	87 e2       	ldi	r24, 0x27	; 39
    36aa:	35 d7       	rcall	.+3690   	; 0x4516 <twiCreate>
    36ac:	90 93 06 14 	sts	0x1406, r25	; 0x801406 <_hih8120Handler+0x1>
    36b0:	80 93 05 14 	sts	0x1405, r24	; 0x801405 <_hih8120Handler>
    36b4:	21 e0       	ldi	r18, 0x01	; 1
    36b6:	89 2b       	or	r24, r25
    36b8:	09 f0       	breq	.+2      	; 0x36bc <hih8120Create+0x26>
    36ba:	20 e0       	ldi	r18, 0x00	; 0
    36bc:	82 2f       	mov	r24, r18
    36be:	1f 91       	pop	r17
    36c0:	0f 91       	pop	r16
    36c2:	08 95       	ret

000036c4 <hih8120IsReady>:
    36c4:	80 91 04 14 	lds	r24, 0x1404	; 0x801404 <_measuringIsReady>
    36c8:	08 95       	ret

000036ca <hih8120Wakeup>:
    36ca:	80 91 05 14 	lds	r24, 0x1405	; 0x801405 <_hih8120Handler>
    36ce:	90 91 06 14 	lds	r25, 0x1406	; 0x801406 <_hih8120Handler+0x1>
    36d2:	00 97       	sbiw	r24, 0x00	; 0
    36d4:	51 f0       	breq	.+20     	; 0x36ea <hih8120Wakeup+0x20>
    36d6:	40 e0       	ldi	r20, 0x00	; 0
    36d8:	60 e0       	ldi	r22, 0x00	; 0
    36da:	70 e0       	ldi	r23, 0x00	; 0
    36dc:	6d d7       	rcall	.+3802   	; 0x45b8 <twiTransmit>
    36de:	84 30       	cpi	r24, 0x04	; 4
    36e0:	31 f4       	brne	.+12     	; 0x36ee <hih8120Wakeup+0x24>
    36e2:	10 92 04 14 	sts	0x1404, r1	; 0x801404 <_measuringIsReady>
    36e6:	80 e0       	ldi	r24, 0x00	; 0
    36e8:	08 95       	ret
    36ea:	82 e0       	ldi	r24, 0x02	; 2
    36ec:	08 95       	ret
    36ee:	83 e0       	ldi	r24, 0x03	; 3
    36f0:	08 95       	ret

000036f2 <hih8120Meassure>:
    36f2:	80 91 05 14 	lds	r24, 0x1405	; 0x801405 <_hih8120Handler>
    36f6:	90 91 06 14 	lds	r25, 0x1406	; 0x801406 <_hih8120Handler+0x1>
    36fa:	00 97       	sbiw	r24, 0x00	; 0
    36fc:	31 f0       	breq	.+12     	; 0x370a <hih8120Meassure+0x18>
    36fe:	64 e0       	ldi	r22, 0x04	; 4
    3700:	a7 d7       	rcall	.+3918   	; 0x4650 <twiReceive>
    3702:	85 30       	cpi	r24, 0x05	; 5
    3704:	21 f0       	breq	.+8      	; 0x370e <hih8120Meassure+0x1c>
    3706:	83 e0       	ldi	r24, 0x03	; 3
    3708:	08 95       	ret
    370a:	82 e0       	ldi	r24, 0x02	; 2
    370c:	08 95       	ret
    370e:	80 e0       	ldi	r24, 0x00	; 0
    3710:	08 95       	ret

00003712 <hih8120GetHumidity>:
    3712:	60 91 08 02 	lds	r22, 0x0208	; 0x800208 <_hum>
    3716:	70 91 09 02 	lds	r23, 0x0209	; 0x800209 <_hum+0x1>
    371a:	80 e0       	ldi	r24, 0x00	; 0
    371c:	90 e0       	ldi	r25, 0x00	; 0
    371e:	0e 94 32 25 	call	0x4a64	; 0x4a64 <__floatunsisf>
    3722:	20 e0       	ldi	r18, 0x00	; 0
    3724:	30 e0       	ldi	r19, 0x00	; 0
    3726:	48 ec       	ldi	r20, 0xC8	; 200
    3728:	52 e4       	ldi	r21, 0x42	; 66
    372a:	0e 94 c0 25 	call	0x4b80	; 0x4b80 <__mulsf3>
    372e:	20 e0       	ldi	r18, 0x00	; 0
    3730:	38 ef       	ldi	r19, 0xF8	; 248
    3732:	4f e7       	ldi	r20, 0x7F	; 127
    3734:	56 e4       	ldi	r21, 0x46	; 70
    3736:	0c 94 99 24 	jmp	0x4932	; 0x4932 <__divsf3>
    373a:	08 95       	ret

0000373c <hih8120GetHumidityPercent_x10>:
    373c:	ea df       	rcall	.-44     	; 0x3712 <hih8120GetHumidity>
    373e:	20 e0       	ldi	r18, 0x00	; 0
    3740:	30 e0       	ldi	r19, 0x00	; 0
    3742:	40 e2       	ldi	r20, 0x20	; 32
    3744:	51 e4       	ldi	r21, 0x41	; 65
    3746:	0e 94 c0 25 	call	0x4b80	; 0x4b80 <__mulsf3>
    374a:	0e 94 06 25 	call	0x4a0c	; 0x4a0c <__fixunssfsi>
    374e:	cb 01       	movw	r24, r22
    3750:	08 95       	ret

00003752 <hih8120GetTemperature>:
    3752:	60 91 06 02 	lds	r22, 0x0206	; 0x800206 <_temp>
    3756:	70 91 07 02 	lds	r23, 0x0207	; 0x800207 <_temp+0x1>
    375a:	80 e0       	ldi	r24, 0x00	; 0
    375c:	90 e0       	ldi	r25, 0x00	; 0
    375e:	0e 94 32 25 	call	0x4a64	; 0x4a64 <__floatunsisf>
    3762:	20 e0       	ldi	r18, 0x00	; 0
    3764:	30 e0       	ldi	r19, 0x00	; 0
    3766:	45 e2       	ldi	r20, 0x25	; 37
    3768:	53 e4       	ldi	r21, 0x43	; 67
    376a:	0e 94 c0 25 	call	0x4b80	; 0x4b80 <__mulsf3>
    376e:	20 e0       	ldi	r18, 0x00	; 0
    3770:	38 ef       	ldi	r19, 0xF8	; 248
    3772:	4f e7       	ldi	r20, 0x7F	; 127
    3774:	56 e4       	ldi	r21, 0x46	; 70
    3776:	0e 94 99 24 	call	0x4932	; 0x4932 <__divsf3>
    377a:	20 e0       	ldi	r18, 0x00	; 0
    377c:	30 e0       	ldi	r19, 0x00	; 0
    377e:	40 e2       	ldi	r20, 0x20	; 32
    3780:	52 e4       	ldi	r21, 0x42	; 66
    3782:	0c 94 34 24 	jmp	0x4868	; 0x4868 <__subsf3>
    3786:	08 95       	ret

00003788 <hih8120GetTemperature_x10>:
    3788:	e4 df       	rcall	.-56     	; 0x3752 <hih8120GetTemperature>
    378a:	20 e0       	ldi	r18, 0x00	; 0
    378c:	30 e0       	ldi	r19, 0x00	; 0
    378e:	40 e2       	ldi	r20, 0x20	; 32
    3790:	51 e4       	ldi	r21, 0x41	; 65
    3792:	0e 94 c0 25 	call	0x4b80	; 0x4b80 <__mulsf3>
    3796:	0e 94 01 25 	call	0x4a02	; 0x4a02 <__fixsfsi>
    379a:	cb 01       	movw	r24, r22
    379c:	08 95       	ret

0000379e <_turn_off>:
    379e:	cf 93       	push	r28
    37a0:	df 93       	push	r29
    37a2:	90 e0       	ldi	r25, 0x00	; 0
    37a4:	fc 01       	movw	r30, r24
    37a6:	ee 0f       	add	r30, r30
    37a8:	ff 1f       	adc	r31, r31
    37aa:	e8 0f       	add	r30, r24
    37ac:	f9 1f       	adc	r31, r25
    37ae:	ee 0f       	add	r30, r30
    37b0:	ff 1f       	adc	r31, r31
    37b2:	e9 5f       	subi	r30, 0xF9	; 249
    37b4:	fb 4e       	sbci	r31, 0xEB	; 235
    37b6:	23 81       	ldd	r18, Z+3	; 0x03
    37b8:	21 11       	cpse	r18, r1
    37ba:	0a c0       	rjmp	.+20     	; 0x37d0 <_turn_off+0x32>
    37bc:	ef 01       	movw	r28, r30
    37be:	e0 91 9f 14 	lds	r30, 0x149F	; 0x80149f <register_access+0x8>
    37c2:	f0 91 a0 14 	lds	r31, 0x14A0	; 0x8014a0 <register_access+0x9>
    37c6:	6a 81       	ldd	r22, Y+2	; 0x02
    37c8:	88 81       	ld	r24, Y
    37ca:	99 81       	ldd	r25, Y+1	; 0x01
    37cc:	19 95       	eicall
    37ce:	12 c0       	rjmp	.+36     	; 0x37f4 <_turn_off+0x56>
    37d0:	dc 01       	movw	r26, r24
    37d2:	aa 0f       	add	r26, r26
    37d4:	bb 1f       	adc	r27, r27
    37d6:	ed 01       	movw	r28, r26
    37d8:	c8 0f       	add	r28, r24
    37da:	d9 1f       	adc	r29, r25
    37dc:	cc 0f       	add	r28, r28
    37de:	dd 1f       	adc	r29, r29
    37e0:	c9 5f       	subi	r28, 0xF9	; 249
    37e2:	db 4e       	sbci	r29, 0xEB	; 235
    37e4:	e0 91 a9 14 	lds	r30, 0x14A9	; 0x8014a9 <register_access+0x12>
    37e8:	f0 91 aa 14 	lds	r31, 0x14AA	; 0x8014aa <register_access+0x13>
    37ec:	6a 81       	ldd	r22, Y+2	; 0x02
    37ee:	88 81       	ld	r24, Y
    37f0:	99 81       	ldd	r25, Y+1	; 0x01
    37f2:	19 95       	eicall
    37f4:	df 91       	pop	r29
    37f6:	cf 91       	pop	r28
    37f8:	08 95       	ret

000037fa <_turn_on>:
    37fa:	cf 93       	push	r28
    37fc:	df 93       	push	r29
    37fe:	90 e0       	ldi	r25, 0x00	; 0
    3800:	fc 01       	movw	r30, r24
    3802:	ee 0f       	add	r30, r30
    3804:	ff 1f       	adc	r31, r31
    3806:	e8 0f       	add	r30, r24
    3808:	f9 1f       	adc	r31, r25
    380a:	ee 0f       	add	r30, r30
    380c:	ff 1f       	adc	r31, r31
    380e:	e9 5f       	subi	r30, 0xF9	; 249
    3810:	fb 4e       	sbci	r31, 0xEB	; 235
    3812:	23 81       	ldd	r18, Z+3	; 0x03
    3814:	21 11       	cpse	r18, r1
    3816:	0a c0       	rjmp	.+20     	; 0x382c <_turn_on+0x32>
    3818:	ef 01       	movw	r28, r30
    381a:	e0 91 a9 14 	lds	r30, 0x14A9	; 0x8014a9 <register_access+0x12>
    381e:	f0 91 aa 14 	lds	r31, 0x14AA	; 0x8014aa <register_access+0x13>
    3822:	6a 81       	ldd	r22, Y+2	; 0x02
    3824:	88 81       	ld	r24, Y
    3826:	99 81       	ldd	r25, Y+1	; 0x01
    3828:	19 95       	eicall
    382a:	12 c0       	rjmp	.+36     	; 0x3850 <_turn_on+0x56>
    382c:	dc 01       	movw	r26, r24
    382e:	aa 0f       	add	r26, r26
    3830:	bb 1f       	adc	r27, r27
    3832:	ed 01       	movw	r28, r26
    3834:	c8 0f       	add	r28, r24
    3836:	d9 1f       	adc	r29, r25
    3838:	cc 0f       	add	r28, r28
    383a:	dd 1f       	adc	r29, r29
    383c:	c9 5f       	subi	r28, 0xF9	; 249
    383e:	db 4e       	sbci	r29, 0xEB	; 235
    3840:	e0 91 9f 14 	lds	r30, 0x149F	; 0x80149f <register_access+0x8>
    3844:	f0 91 a0 14 	lds	r31, 0x14A0	; 0x8014a0 <register_access+0x9>
    3848:	6a 81       	ldd	r22, Y+2	; 0x02
    384a:	88 81       	ld	r24, Y
    384c:	99 81       	ldd	r25, Y+1	; 0x01
    384e:	19 95       	eicall
    3850:	df 91       	pop	r29
    3852:	cf 91       	pop	r28
    3854:	08 95       	ret

00003856 <_hal_led_task>:
    3856:	0f 2e       	mov	r0, r31
    3858:	f7 e9       	ldi	r31, 0x97	; 151
    385a:	cf 2e       	mov	r12, r31
    385c:	f4 e1       	ldi	r31, 0x14	; 20
    385e:	df 2e       	mov	r13, r31
    3860:	f0 2d       	mov	r31, r0
    3862:	04 e0       	ldi	r16, 0x04	; 4
    3864:	c7 e0       	ldi	r28, 0x07	; 7
    3866:	d4 e1       	ldi	r29, 0x14	; 20
    3868:	10 e0       	ldi	r17, 0x00	; 0
    386a:	8c 81       	ldd	r24, Y+4	; 0x04
    386c:	81 30       	cpi	r24, 0x01	; 1
    386e:	69 f0       	breq	.+26     	; 0x388a <_hal_led_task+0x34>
    3870:	e8 f0       	brcs	.+58     	; 0x38ac <_hal_led_task+0x56>
    3872:	82 30       	cpi	r24, 0x02	; 2
    3874:	39 f5       	brne	.+78     	; 0x38c4 <_hal_led_task+0x6e>
    3876:	d6 01       	movw	r26, r12
    3878:	1c 96       	adiw	r26, 0x0c	; 12
    387a:	ed 91       	ld	r30, X+
    387c:	fc 91       	ld	r31, X
    387e:	1d 97       	sbiw	r26, 0x0d	; 13
    3880:	6a 81       	ldd	r22, Y+2	; 0x02
    3882:	88 81       	ld	r24, Y
    3884:	99 81       	ldd	r25, Y+1	; 0x01
    3886:	19 95       	eicall
    3888:	1d c0       	rjmp	.+58     	; 0x38c4 <_hal_led_task+0x6e>
    388a:	8d 81       	ldd	r24, Y+5	; 0x05
    388c:	8f 5f       	subi	r24, 0xFF	; 255
    388e:	8a 30       	cpi	r24, 0x0A	; 10
    3890:	10 f4       	brcc	.+4      	; 0x3896 <_hal_led_task+0x40>
    3892:	8d 83       	std	Y+5, r24	; 0x05
    3894:	17 c0       	rjmp	.+46     	; 0x38c4 <_hal_led_task+0x6e>
    3896:	1d 82       	std	Y+5, r1	; 0x05
    3898:	d6 01       	movw	r26, r12
    389a:	1c 96       	adiw	r26, 0x0c	; 12
    389c:	ed 91       	ld	r30, X+
    389e:	fc 91       	ld	r31, X
    38a0:	1d 97       	sbiw	r26, 0x0d	; 13
    38a2:	6a 81       	ldd	r22, Y+2	; 0x02
    38a4:	88 81       	ld	r24, Y
    38a6:	99 81       	ldd	r25, Y+1	; 0x01
    38a8:	19 95       	eicall
    38aa:	0c c0       	rjmp	.+24     	; 0x38c4 <_hal_led_task+0x6e>
    38ac:	8d 81       	ldd	r24, Y+5	; 0x05
    38ae:	88 23       	and	r24, r24
    38b0:	31 f0       	breq	.+12     	; 0x38be <_hal_led_task+0x68>
    38b2:	81 2f       	mov	r24, r17
    38b4:	a2 df       	rcall	.-188    	; 0x37fa <_turn_on>
    38b6:	8d 81       	ldd	r24, Y+5	; 0x05
    38b8:	81 50       	subi	r24, 0x01	; 1
    38ba:	8d 83       	std	Y+5, r24	; 0x05
    38bc:	03 c0       	rjmp	.+6      	; 0x38c4 <_hal_led_task+0x6e>
    38be:	0c 83       	std	Y+4, r16	; 0x04
    38c0:	81 2f       	mov	r24, r17
    38c2:	6d df       	rcall	.-294    	; 0x379e <_turn_off>
    38c4:	1f 5f       	subi	r17, 0xFF	; 255
    38c6:	26 96       	adiw	r28, 0x06	; 6
    38c8:	14 30       	cpi	r17, 0x04	; 4
    38ca:	79 f6       	brne	.-98     	; 0x386a <_hal_led_task+0x14>
    38cc:	65 e0       	ldi	r22, 0x05	; 5
    38ce:	70 e0       	ldi	r23, 0x00	; 0
    38d0:	80 e0       	ldi	r24, 0x00	; 0
    38d2:	90 e0       	ldi	r25, 0x00	; 0
    38d4:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <vTaskDelay>
    38d8:	c5 cf       	rjmp	.-118    	; 0x3864 <_hal_led_task+0xe>

000038da <led_create>:
    38da:	cf 92       	push	r12
    38dc:	df 92       	push	r13
    38de:	ef 92       	push	r14
    38e0:	ff 92       	push	r15
    38e2:	0f 93       	push	r16
    38e4:	1f 93       	push	r17
    38e6:	cf 93       	push	r28
    38e8:	df 93       	push	r29
    38ea:	06 2f       	mov	r16, r22
    38ec:	0f 2e       	mov	r0, r31
    38ee:	f7 e9       	ldi	r31, 0x97	; 151
    38f0:	ef 2e       	mov	r14, r31
    38f2:	f4 e1       	ldi	r31, 0x14	; 20
    38f4:	ff 2e       	mov	r15, r31
    38f6:	f0 2d       	mov	r31, r0
    38f8:	d7 01       	movw	r26, r14
    38fa:	18 96       	adiw	r26, 0x08	; 8
    38fc:	ed 91       	ld	r30, X+
    38fe:	fc 91       	ld	r31, X
    3900:	19 97       	sbiw	r26, 0x09	; 9
    3902:	66 e0       	ldi	r22, 0x06	; 6
    3904:	87 e2       	ldi	r24, 0x27	; 39
    3906:	90 e0       	ldi	r25, 0x00	; 0
    3908:	19 95       	eicall
    390a:	c7 e0       	ldi	r28, 0x07	; 7
    390c:	d4 e1       	ldi	r29, 0x14	; 20
    390e:	0f 2e       	mov	r0, r31
    3910:	f8 e2       	ldi	r31, 0x28	; 40
    3912:	cf 2e       	mov	r12, r31
    3914:	d1 2c       	mov	r13, r1
    3916:	f0 2d       	mov	r31, r0
    3918:	d9 82       	std	Y+1, r13	; 0x01
    391a:	c8 82       	st	Y, r12
    391c:	86 e0       	ldi	r24, 0x06	; 6
    391e:	8a 83       	std	Y+2, r24	; 0x02
    3920:	1b 82       	std	Y+3, r1	; 0x03
    3922:	14 e0       	ldi	r17, 0x04	; 4
    3924:	1c 83       	std	Y+4, r17	; 0x04
    3926:	80 e0       	ldi	r24, 0x00	; 0
    3928:	3a df       	rcall	.-396    	; 0x379e <_turn_off>
    392a:	d7 01       	movw	r26, r14
    392c:	18 96       	adiw	r26, 0x08	; 8
    392e:	ed 91       	ld	r30, X+
    3930:	fc 91       	ld	r31, X
    3932:	19 97       	sbiw	r26, 0x09	; 9
    3934:	67 e0       	ldi	r22, 0x07	; 7
    3936:	87 e2       	ldi	r24, 0x27	; 39
    3938:	90 e0       	ldi	r25, 0x00	; 0
    393a:	19 95       	eicall
    393c:	df 82       	std	Y+7, r13	; 0x07
    393e:	ce 82       	std	Y+6, r12	; 0x06
    3940:	87 e0       	ldi	r24, 0x07	; 7
    3942:	88 87       	std	Y+8, r24	; 0x08
    3944:	19 86       	std	Y+9, r1	; 0x09
    3946:	1a 87       	std	Y+10, r17	; 0x0a
    3948:	81 e0       	ldi	r24, 0x01	; 1
    394a:	29 df       	rcall	.-430    	; 0x379e <_turn_off>
    394c:	d7 01       	movw	r26, r14
    394e:	18 96       	adiw	r26, 0x08	; 8
    3950:	ed 91       	ld	r30, X+
    3952:	fc 91       	ld	r31, X
    3954:	19 97       	sbiw	r26, 0x09	; 9
    3956:	65 e0       	ldi	r22, 0x05	; 5
    3958:	83 e3       	ldi	r24, 0x33	; 51
    395a:	90 e0       	ldi	r25, 0x00	; 0
    395c:	19 95       	eicall
    395e:	d7 01       	movw	r26, r14
    3960:	18 96       	adiw	r26, 0x08	; 8
    3962:	ed 91       	ld	r30, X+
    3964:	fc 91       	ld	r31, X
    3966:	19 97       	sbiw	r26, 0x09	; 9
    3968:	61 e0       	ldi	r22, 0x01	; 1
    396a:	84 e3       	ldi	r24, 0x34	; 52
    396c:	90 e0       	ldi	r25, 0x00	; 0
    396e:	19 95       	eicall
    3970:	84 e3       	ldi	r24, 0x34	; 52
    3972:	90 e0       	ldi	r25, 0x00	; 0
    3974:	9d 87       	std	Y+13, r25	; 0x0d
    3976:	8c 87       	std	Y+12, r24	; 0x0c
    3978:	85 e0       	ldi	r24, 0x05	; 5
    397a:	8e 87       	std	Y+14, r24	; 0x0e
    397c:	1f 86       	std	Y+15, r1	; 0x0f
    397e:	18 8b       	std	Y+16, r17	; 0x10
    3980:	82 e0       	ldi	r24, 0x02	; 2
    3982:	0d df       	rcall	.-486    	; 0x379e <_turn_off>
    3984:	d7 01       	movw	r26, r14
    3986:	18 96       	adiw	r26, 0x08	; 8
    3988:	ed 91       	ld	r30, X+
    398a:	fc 91       	ld	r31, X
    398c:	19 97       	sbiw	r26, 0x09	; 9
    398e:	64 e0       	ldi	r22, 0x04	; 4
    3990:	81 e0       	ldi	r24, 0x01	; 1
    3992:	91 e0       	ldi	r25, 0x01	; 1
    3994:	19 95       	eicall
    3996:	d7 01       	movw	r26, r14
    3998:	18 96       	adiw	r26, 0x08	; 8
    399a:	ed 91       	ld	r30, X+
    399c:	fc 91       	ld	r31, X
    399e:	19 97       	sbiw	r26, 0x09	; 9
    39a0:	61 e0       	ldi	r22, 0x01	; 1
    39a2:	82 e0       	ldi	r24, 0x02	; 2
    39a4:	91 e0       	ldi	r25, 0x01	; 1
    39a6:	19 95       	eicall
    39a8:	82 e0       	ldi	r24, 0x02	; 2
    39aa:	91 e0       	ldi	r25, 0x01	; 1
    39ac:	9b 8b       	std	Y+19, r25	; 0x13
    39ae:	8a 8b       	std	Y+18, r24	; 0x12
    39b0:	1c 8b       	std	Y+20, r17	; 0x14
    39b2:	1d 8a       	std	Y+21, r1	; 0x15
    39b4:	1e 8b       	std	Y+22, r17	; 0x16
    39b6:	83 e0       	ldi	r24, 0x03	; 3
    39b8:	f2 de       	rcall	.-540    	; 0x379e <_turn_off>
    39ba:	e1 2c       	mov	r14, r1
    39bc:	f1 2c       	mov	r15, r1
    39be:	20 e0       	ldi	r18, 0x00	; 0
    39c0:	30 e0       	ldi	r19, 0x00	; 0
    39c2:	40 ec       	ldi	r20, 0xC0	; 192
    39c4:	50 e0       	ldi	r21, 0x00	; 0
    39c6:	6f e6       	ldi	r22, 0x6F	; 111
    39c8:	73 e0       	ldi	r23, 0x03	; 3
    39ca:	8b e2       	ldi	r24, 0x2B	; 43
    39cc:	9c e1       	ldi	r25, 0x1C	; 28
    39ce:	0e 94 13 11 	call	0x2226	; 0x2226 <xTaskCreate>
    39d2:	df 91       	pop	r29
    39d4:	cf 91       	pop	r28
    39d6:	1f 91       	pop	r17
    39d8:	0f 91       	pop	r16
    39da:	ff 90       	pop	r15
    39dc:	ef 90       	pop	r14
    39de:	df 90       	pop	r13
    39e0:	cf 90       	pop	r12
    39e2:	08 95       	ret

000039e4 <_serial_call_back>:
    39e4:	0f 93       	push	r16
    39e6:	1f 93       	push	r17
    39e8:	cf 93       	push	r28
    39ea:	df 93       	push	r29
    39ec:	1f 92       	push	r1
    39ee:	1f 92       	push	r1
    39f0:	cd b7       	in	r28, 0x3d	; 61
    39f2:	de b7       	in	r29, 0x3e	; 62
    39f4:	8c 01       	movw	r16, r24
    39f6:	19 82       	std	Y+1, r1	; 0x01
    39f8:	2d c0       	rjmp	.+90     	; 0x3a54 <_serial_call_back+0x70>
    39fa:	e0 91 1f 14 	lds	r30, 0x141F	; 0x80141f <rec_buf_inp.2947>
    39fe:	ec 32       	cpi	r30, 0x2C	; 44
    3a00:	50 f4       	brcc	.+20     	; 0x3a16 <_serial_call_back+0x32>
    3a02:	81 e0       	ldi	r24, 0x01	; 1
    3a04:	8e 0f       	add	r24, r30
    3a06:	80 93 1f 14 	sts	0x141F, r24	; 0x80141f <rec_buf_inp.2947>
    3a0a:	f0 e0       	ldi	r31, 0x00	; 0
    3a0c:	ea 5d       	subi	r30, 0xDA	; 218
    3a0e:	fb 4e       	sbci	r31, 0xEB	; 235
    3a10:	8a 81       	ldd	r24, Y+2	; 0x02
    3a12:	80 83       	st	Z, r24
    3a14:	02 c0       	rjmp	.+4      	; 0x3a1a <_serial_call_back+0x36>
    3a16:	10 92 1f 14 	sts	0x141F, r1	; 0x80141f <rec_buf_inp.2947>
    3a1a:	8a 81       	ldd	r24, Y+2	; 0x02
    3a1c:	8a 30       	cpi	r24, 0x0A	; 10
    3a1e:	d1 f4       	brne	.+52     	; 0x3a54 <_serial_call_back+0x70>
    3a20:	40 91 1f 14 	lds	r20, 0x141F	; 0x80141f <rec_buf_inp.2947>
    3a24:	50 e0       	ldi	r21, 0x00	; 0
    3a26:	fa 01       	movw	r30, r20
    3a28:	ec 5d       	subi	r30, 0xDC	; 220
    3a2a:	fb 4e       	sbci	r31, 0xEB	; 235
    3a2c:	10 82       	st	Z, r1
    3a2e:	41 50       	subi	r20, 0x01	; 1
    3a30:	51 09       	sbc	r21, r1
    3a32:	9e 01       	movw	r18, r28
    3a34:	2f 5f       	subi	r18, 0xFF	; 255
    3a36:	3f 4f       	sbci	r19, 0xFF	; 255
    3a38:	66 e2       	ldi	r22, 0x26	; 38
    3a3a:	74 e1       	ldi	r23, 0x14	; 20
    3a3c:	80 91 22 14 	lds	r24, 0x1422	; 0x801422 <_serial_reply_buffer_handle>
    3a40:	90 91 23 14 	lds	r25, 0x1423	; 0x801423 <_serial_reply_buffer_handle+0x1>
    3a44:	0e 94 34 10 	call	0x2068	; 0x2068 <xStreamBufferSendFromISR>
    3a48:	89 81       	ldd	r24, Y+1	; 0x01
    3a4a:	81 11       	cpse	r24, r1
    3a4c:	0e 94 3e 0a 	call	0x147c	; 0x147c <vPortYield>
    3a50:	10 92 1f 14 	sts	0x141F, r1	; 0x80141f <rec_buf_inp.2947>
    3a54:	be 01       	movw	r22, r28
    3a56:	6e 5f       	subi	r22, 0xFE	; 254
    3a58:	7f 4f       	sbci	r23, 0xFF	; 255
    3a5a:	c8 01       	movw	r24, r16
    3a5c:	90 d2       	rcall	.+1312   	; 0x3f7e <serial_get_byte>
    3a5e:	88 23       	and	r24, r24
    3a60:	61 f2       	breq	.-104    	; 0x39fa <_serial_call_back+0x16>
    3a62:	0f 90       	pop	r0
    3a64:	0f 90       	pop	r0
    3a66:	df 91       	pop	r29
    3a68:	cf 91       	pop	r28
    3a6a:	1f 91       	pop	r17
    3a6c:	0f 91       	pop	r16
    3a6e:	08 95       	ret

00003a70 <lora_driver_create>:
    3a70:	8f 92       	push	r8
    3a72:	9f 92       	push	r9
    3a74:	af 92       	push	r10
    3a76:	cf 92       	push	r12
    3a78:	ef 92       	push	r14
    3a7a:	0f 93       	push	r16
    3a7c:	1f 93       	push	r17
    3a7e:	cf 93       	push	r28
    3a80:	c8 2f       	mov	r28, r24
    3a82:	8b 01       	movw	r16, r22
    3a84:	41 e0       	ldi	r20, 0x01	; 1
    3a86:	60 e0       	ldi	r22, 0x00	; 0
    3a88:	70 e0       	ldi	r23, 0x00	; 0
    3a8a:	88 ec       	ldi	r24, 0xC8	; 200
    3a8c:	90 e0       	ldi	r25, 0x00	; 0
    3a8e:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <xStreamBufferGenericCreate>
    3a92:	90 93 23 14 	sts	0x1423, r25	; 0x801423 <_serial_reply_buffer_handle+0x1>
    3a96:	80 93 22 14 	sts	0x1422, r24	; 0x801422 <_serial_reply_buffer_handle>
    3a9a:	10 93 21 14 	sts	0x1421, r17	; 0x801421 <_downlinkMessageBuffer+0x1>
    3a9e:	00 93 20 14 	sts	0x1420, r16	; 0x801420 <_downlinkMessageBuffer>
    3aa2:	0f 2e       	mov	r0, r31
    3aa4:	f2 ef       	ldi	r31, 0xF2	; 242
    3aa6:	8f 2e       	mov	r8, r31
    3aa8:	fc e1       	ldi	r31, 0x1C	; 28
    3aaa:	9f 2e       	mov	r9, r31
    3aac:	f0 2d       	mov	r31, r0
    3aae:	68 94       	set
    3ab0:	aa 24       	eor	r10, r10
    3ab2:	a6 f8       	bld	r10, 6
    3ab4:	68 94       	set
    3ab6:	cc 24       	eor	r12, r12
    3ab8:	c6 f8       	bld	r12, 6
    3aba:	e1 2c       	mov	r14, r1
    3abc:	00 e0       	ldi	r16, 0x00	; 0
    3abe:	23 e0       	ldi	r18, 0x03	; 3
    3ac0:	40 e0       	ldi	r20, 0x00	; 0
    3ac2:	51 ee       	ldi	r21, 0xE1	; 225
    3ac4:	60 e0       	ldi	r22, 0x00	; 0
    3ac6:	70 e0       	ldi	r23, 0x00	; 0
    3ac8:	8c 2f       	mov	r24, r28
    3aca:	4e d1       	rcall	.+668    	; 0x3d68 <serial_new_instance>
    3acc:	90 93 25 14 	sts	0x1425, r25	; 0x801425 <_rn2483_serial+0x1>
    3ad0:	80 93 24 14 	sts	0x1424, r24	; 0x801424 <_rn2483_serial>
    3ad4:	e0 91 9f 14 	lds	r30, 0x149F	; 0x80149f <register_access+0x8>
    3ad8:	f0 91 a0 14 	lds	r31, 0x14A0	; 0x8014a0 <register_access+0x9>
    3adc:	64 e0       	ldi	r22, 0x04	; 4
    3ade:	87 e0       	ldi	r24, 0x07	; 7
    3ae0:	91 e0       	ldi	r25, 0x01	; 1
    3ae2:	19 95       	eicall
    3ae4:	cf 91       	pop	r28
    3ae6:	1f 91       	pop	r17
    3ae8:	0f 91       	pop	r16
    3aea:	ef 90       	pop	r14
    3aec:	cf 90       	pop	r12
    3aee:	af 90       	pop	r10
    3af0:	9f 90       	pop	r9
    3af2:	8f 90       	pop	r8
    3af4:	08 95       	ret

00003af6 <reg_read_register>:
    3af6:	fc 01       	movw	r30, r24
    3af8:	80 81       	ld	r24, Z
    3afa:	08 95       	ret

00003afc <reg_read_bit>:
    3afc:	fc 01       	movw	r30, r24
    3afe:	20 81       	ld	r18, Z
    3b00:	81 e0       	ldi	r24, 0x01	; 1
    3b02:	90 e0       	ldi	r25, 0x00	; 0
    3b04:	02 c0       	rjmp	.+4      	; 0x3b0a <reg_read_bit+0xe>
    3b06:	88 0f       	add	r24, r24
    3b08:	99 1f       	adc	r25, r25
    3b0a:	6a 95       	dec	r22
    3b0c:	e2 f7       	brpl	.-8      	; 0x3b06 <reg_read_bit+0xa>
    3b0e:	82 23       	and	r24, r18
    3b10:	08 95       	ret

00003b12 <reg_read_bits>:
    3b12:	fc 01       	movw	r30, r24
    3b14:	80 81       	ld	r24, Z
    3b16:	86 23       	and	r24, r22
    3b18:	08 95       	ret

00003b1a <reg_set_register>:
    3b1a:	fc 01       	movw	r30, r24
    3b1c:	60 83       	st	Z, r22
    3b1e:	08 95       	ret

00003b20 <reg_clear_register>:
    3b20:	fc 01       	movw	r30, r24
    3b22:	10 82       	st	Z, r1
    3b24:	08 95       	ret

00003b26 <reg_set_bit>:
    3b26:	fc 01       	movw	r30, r24
    3b28:	40 81       	ld	r20, Z
    3b2a:	21 e0       	ldi	r18, 0x01	; 1
    3b2c:	30 e0       	ldi	r19, 0x00	; 0
    3b2e:	02 c0       	rjmp	.+4      	; 0x3b34 <reg_set_bit+0xe>
    3b30:	22 0f       	add	r18, r18
    3b32:	33 1f       	adc	r19, r19
    3b34:	6a 95       	dec	r22
    3b36:	e2 f7       	brpl	.-8      	; 0x3b30 <reg_set_bit+0xa>
    3b38:	24 2b       	or	r18, r20
    3b3a:	20 83       	st	Z, r18
    3b3c:	08 95       	ret

00003b3e <reg_set_bits>:
    3b3e:	fc 01       	movw	r30, r24
    3b40:	20 81       	ld	r18, Z
    3b42:	62 2b       	or	r22, r18
    3b44:	60 83       	st	Z, r22
    3b46:	08 95       	ret

00003b48 <reg_toggle_bit>:
    3b48:	fc 01       	movw	r30, r24
    3b4a:	40 81       	ld	r20, Z
    3b4c:	21 e0       	ldi	r18, 0x01	; 1
    3b4e:	30 e0       	ldi	r19, 0x00	; 0
    3b50:	02 c0       	rjmp	.+4      	; 0x3b56 <reg_toggle_bit+0xe>
    3b52:	22 0f       	add	r18, r18
    3b54:	33 1f       	adc	r19, r19
    3b56:	6a 95       	dec	r22
    3b58:	e2 f7       	brpl	.-8      	; 0x3b52 <reg_toggle_bit+0xa>
    3b5a:	24 27       	eor	r18, r20
    3b5c:	20 83       	st	Z, r18
    3b5e:	08 95       	ret

00003b60 <reg_toggle_bits>:
    3b60:	fc 01       	movw	r30, r24
    3b62:	20 81       	ld	r18, Z
    3b64:	62 27       	eor	r22, r18
    3b66:	60 83       	st	Z, r22
    3b68:	08 95       	ret

00003b6a <reg_clear_bit>:
    3b6a:	fc 01       	movw	r30, r24
    3b6c:	90 81       	ld	r25, Z
    3b6e:	21 e0       	ldi	r18, 0x01	; 1
    3b70:	30 e0       	ldi	r19, 0x00	; 0
    3b72:	02 c0       	rjmp	.+4      	; 0x3b78 <reg_clear_bit+0xe>
    3b74:	22 0f       	add	r18, r18
    3b76:	33 1f       	adc	r19, r19
    3b78:	6a 95       	dec	r22
    3b7a:	e2 f7       	brpl	.-8      	; 0x3b74 <reg_clear_bit+0xa>
    3b7c:	20 95       	com	r18
    3b7e:	29 23       	and	r18, r25
    3b80:	20 83       	st	Z, r18
    3b82:	08 95       	ret

00003b84 <reg_clear_bits>:
    3b84:	fc 01       	movw	r30, r24
    3b86:	90 81       	ld	r25, Z
    3b88:	60 95       	com	r22
    3b8a:	69 23       	and	r22, r25
    3b8c:	60 83       	st	Z, r22
    3b8e:	08 95       	ret

00003b90 <_serial_call_back>:
    3b90:	80 91 56 14 	lds	r24, 0x1456	; 0x801456 <crc_sum.1941>
    3b94:	86 0f       	add	r24, r22
    3b96:	80 93 56 14 	sts	0x1456, r24	; 0x801456 <crc_sum.1941>
    3b9a:	90 91 59 14 	lds	r25, 0x1459	; 0x801459 <_mh_state>
    3b9e:	91 30       	cpi	r25, 0x01	; 1
    3ba0:	79 f0       	breq	.+30     	; 0x3bc0 <_serial_call_back+0x30>
    3ba2:	28 f0       	brcs	.+10     	; 0x3bae <_serial_call_back+0x1e>
    3ba4:	92 30       	cpi	r25, 0x02	; 2
    3ba6:	a9 f0       	breq	.+42     	; 0x3bd2 <_serial_call_back+0x42>
    3ba8:	93 30       	cpi	r25, 0x03	; 3
    3baa:	19 f1       	breq	.+70     	; 0x3bf2 <_serial_call_back+0x62>
    3bac:	08 95       	ret
    3bae:	6f 3f       	cpi	r22, 0xFF	; 255
    3bb0:	09 f0       	breq	.+2      	; 0x3bb4 <_serial_call_back+0x24>
    3bb2:	48 c0       	rjmp	.+144    	; 0x3c44 <_serial_call_back+0xb4>
    3bb4:	10 92 56 14 	sts	0x1456, r1	; 0x801456 <crc_sum.1941>
    3bb8:	81 e0       	ldi	r24, 0x01	; 1
    3bba:	80 93 59 14 	sts	0x1459, r24	; 0x801459 <_mh_state>
    3bbe:	08 95       	ret
    3bc0:	66 38       	cpi	r22, 0x86	; 134
    3bc2:	09 f0       	breq	.+2      	; 0x3bc6 <_serial_call_back+0x36>
    3bc4:	3f c0       	rjmp	.+126    	; 0x3c44 <_serial_call_back+0xb4>
    3bc6:	10 92 55 14 	sts	0x1455, r1	; 0x801455 <inDex.1939>
    3bca:	82 e0       	ldi	r24, 0x02	; 2
    3bcc:	80 93 59 14 	sts	0x1459, r24	; 0x801459 <_mh_state>
    3bd0:	08 95       	ret
    3bd2:	e0 91 55 14 	lds	r30, 0x1455	; 0x801455 <inDex.1939>
    3bd6:	81 e0       	ldi	r24, 0x01	; 1
    3bd8:	8e 0f       	add	r24, r30
    3bda:	80 93 55 14 	sts	0x1455, r24	; 0x801455 <inDex.1939>
    3bde:	f0 e0       	ldi	r31, 0x00	; 0
    3be0:	ed 5a       	subi	r30, 0xAD	; 173
    3be2:	fb 4e       	sbci	r31, 0xEB	; 235
    3be4:	60 83       	st	Z, r22
    3be6:	82 30       	cpi	r24, 0x02	; 2
    3be8:	69 f5       	brne	.+90     	; 0x3c44 <_serial_call_back+0xb4>
    3bea:	83 e0       	ldi	r24, 0x03	; 3
    3bec:	80 93 59 14 	sts	0x1459, r24	; 0x801459 <_mh_state>
    3bf0:	08 95       	ret
    3bf2:	90 91 55 14 	lds	r25, 0x1455	; 0x801455 <inDex.1939>
    3bf6:	21 e0       	ldi	r18, 0x01	; 1
    3bf8:	29 0f       	add	r18, r25
    3bfa:	20 93 55 14 	sts	0x1455, r18	; 0x801455 <inDex.1939>
    3bfe:	96 30       	cpi	r25, 0x06	; 6
    3c00:	09 f5       	brne	.+66     	; 0x3c44 <_serial_call_back+0xb4>
    3c02:	81 11       	cpse	r24, r1
    3c04:	0e c0       	rjmp	.+28     	; 0x3c22 <_serial_call_back+0x92>
    3c06:	e3 e5       	ldi	r30, 0x53	; 83
    3c08:	f4 e1       	ldi	r31, 0x14	; 20
    3c0a:	80 81       	ld	r24, Z
    3c0c:	90 e0       	ldi	r25, 0x00	; 0
    3c0e:	98 2f       	mov	r25, r24
    3c10:	88 27       	eor	r24, r24
    3c12:	21 81       	ldd	r18, Z+1	; 0x01
    3c14:	82 0f       	add	r24, r18
    3c16:	91 1d       	adc	r25, r1
    3c18:	90 93 5b 14 	sts	0x145B, r25	; 0x80145b <_ppm+0x1>
    3c1c:	80 93 5a 14 	sts	0x145A, r24	; 0x80145a <_ppm>
    3c20:	04 c0       	rjmp	.+8      	; 0x3c2a <_serial_call_back+0x9a>
    3c22:	10 92 5b 14 	sts	0x145B, r1	; 0x80145b <_ppm+0x1>
    3c26:	10 92 5a 14 	sts	0x145A, r1	; 0x80145a <_ppm>
    3c2a:	10 92 59 14 	sts	0x1459, r1	; 0x801459 <_mh_state>
    3c2e:	e0 91 57 14 	lds	r30, 0x1457	; 0x801457 <_app_call_back>
    3c32:	f0 91 58 14 	lds	r31, 0x1458	; 0x801458 <_app_call_back+0x1>
    3c36:	30 97       	sbiw	r30, 0x00	; 0
    3c38:	29 f0       	breq	.+10     	; 0x3c44 <_serial_call_back+0xb4>
    3c3a:	80 91 5a 14 	lds	r24, 0x145A	; 0x80145a <_ppm>
    3c3e:	90 91 5b 14 	lds	r25, 0x145B	; 0x80145b <_ppm+0x1>
    3c42:	19 95       	eicall
    3c44:	08 95       	ret

00003c46 <mh_z19_create>:
    3c46:	8f 92       	push	r8
    3c48:	9f 92       	push	r9
    3c4a:	af 92       	push	r10
    3c4c:	cf 92       	push	r12
    3c4e:	ef 92       	push	r14
    3c50:	0f 93       	push	r16
    3c52:	cf 93       	push	r28
    3c54:	df 93       	push	r29
    3c56:	eb 01       	movw	r28, r22
    3c58:	0f 2e       	mov	r0, r31
    3c5a:	f8 ec       	ldi	r31, 0xC8	; 200
    3c5c:	8f 2e       	mov	r8, r31
    3c5e:	fd e1       	ldi	r31, 0x1D	; 29
    3c60:	9f 2e       	mov	r9, r31
    3c62:	f0 2d       	mov	r31, r0
    3c64:	68 94       	set
    3c66:	aa 24       	eor	r10, r10
    3c68:	a4 f8       	bld	r10, 4
    3c6a:	68 94       	set
    3c6c:	cc 24       	eor	r12, r12
    3c6e:	c4 f8       	bld	r12, 4
    3c70:	e1 2c       	mov	r14, r1
    3c72:	00 e0       	ldi	r16, 0x00	; 0
    3c74:	23 e0       	ldi	r18, 0x03	; 3
    3c76:	40 e8       	ldi	r20, 0x80	; 128
    3c78:	55 e2       	ldi	r21, 0x25	; 37
    3c7a:	60 e0       	ldi	r22, 0x00	; 0
    3c7c:	70 e0       	ldi	r23, 0x00	; 0
    3c7e:	74 d0       	rcall	.+232    	; 0x3d68 <serial_new_instance>
    3c80:	90 93 5d 14 	sts	0x145D, r25	; 0x80145d <_serial+0x1>
    3c84:	80 93 5c 14 	sts	0x145C, r24	; 0x80145c <_serial>
    3c88:	d0 93 58 14 	sts	0x1458, r29	; 0x801458 <_app_call_back+0x1>
    3c8c:	c0 93 57 14 	sts	0x1457, r28	; 0x801457 <_app_call_back>
    3c90:	df 91       	pop	r29
    3c92:	cf 91       	pop	r28
    3c94:	0f 91       	pop	r16
    3c96:	ef 90       	pop	r14
    3c98:	cf 90       	pop	r12
    3c9a:	af 90       	pop	r10
    3c9c:	9f 90       	pop	r9
    3c9e:	8f 90       	pop	r8
    3ca0:	08 95       	ret

00003ca2 <mh_z19_take_meassuring>:
    3ca2:	cf 93       	push	r28
    3ca4:	df 93       	push	r29
    3ca6:	cd b7       	in	r28, 0x3d	; 61
    3ca8:	de b7       	in	r29, 0x3e	; 62
    3caa:	29 97       	sbiw	r28, 0x09	; 9
    3cac:	0f b6       	in	r0, 0x3f	; 63
    3cae:	f8 94       	cli
    3cb0:	de bf       	out	0x3e, r29	; 62
    3cb2:	0f be       	out	0x3f, r0	; 63
    3cb4:	cd bf       	out	0x3d, r28	; 61
    3cb6:	89 e0       	ldi	r24, 0x09	; 9
    3cb8:	e1 e2       	ldi	r30, 0x21	; 33
    3cba:	f2 e0       	ldi	r31, 0x02	; 2
    3cbc:	9e 01       	movw	r18, r28
    3cbe:	2f 5f       	subi	r18, 0xFF	; 255
    3cc0:	3f 4f       	sbci	r19, 0xFF	; 255
    3cc2:	d9 01       	movw	r26, r18
    3cc4:	01 90       	ld	r0, Z+
    3cc6:	0d 92       	st	X+, r0
    3cc8:	8a 95       	dec	r24
    3cca:	e1 f7       	brne	.-8      	; 0x3cc4 <mh_z19_take_meassuring+0x22>
    3ccc:	10 92 5b 14 	sts	0x145B, r1	; 0x80145b <_ppm+0x1>
    3cd0:	10 92 5a 14 	sts	0x145A, r1	; 0x80145a <_ppm>
    3cd4:	80 91 5c 14 	lds	r24, 0x145C	; 0x80145c <_serial>
    3cd8:	90 91 5d 14 	lds	r25, 0x145D	; 0x80145d <_serial+0x1>
    3cdc:	00 97       	sbiw	r24, 0x00	; 0
    3cde:	31 f0       	breq	.+12     	; 0x3cec <mh_z19_take_meassuring+0x4a>
    3ce0:	42 2f       	mov	r20, r18
    3ce2:	53 2f       	mov	r21, r19
    3ce4:	69 e0       	ldi	r22, 0x09	; 9
    3ce6:	fb d0       	rcall	.+502    	; 0x3ede <serial_send_bytes>
    3ce8:	80 e0       	ldi	r24, 0x00	; 0
    3cea:	01 c0       	rjmp	.+2      	; 0x3cee <mh_z19_take_meassuring+0x4c>
    3cec:	82 e0       	ldi	r24, 0x02	; 2
    3cee:	29 96       	adiw	r28, 0x09	; 9
    3cf0:	0f b6       	in	r0, 0x3f	; 63
    3cf2:	f8 94       	cli
    3cf4:	de bf       	out	0x3e, r29	; 62
    3cf6:	0f be       	out	0x3f, r0	; 63
    3cf8:	cd bf       	out	0x3d, r28	; 61
    3cfa:	df 91       	pop	r29
    3cfc:	cf 91       	pop	r28
    3cfe:	08 95       	ret

00003d00 <rcServoSet>:
    3d00:	65 36       	cpi	r22, 0x65	; 101
    3d02:	0c f0       	brlt	.+2      	; 0x3d06 <rcServoSet+0x6>
    3d04:	64 e6       	ldi	r22, 0x64	; 100
    3d06:	6c 39       	cpi	r22, 0x9C	; 156
    3d08:	0c f4       	brge	.+2      	; 0x3d0c <rcServoSet+0xc>
    3d0a:	6c e9       	ldi	r22, 0x9C	; 156
    3d0c:	96 ef       	ldi	r25, 0xF6	; 246
    3d0e:	69 02       	muls	r22, r25
    3d10:	b0 01       	movw	r22, r0
    3d12:	11 24       	eor	r1, r1
    3d14:	68 54       	subi	r22, 0x48	; 72
    3d16:	74 4f       	sbci	r23, 0xF4	; 244
    3d18:	81 11       	cpse	r24, r1
    3d1a:	05 c0       	rjmp	.+10     	; 0x3d26 <rcServoSet+0x26>
    3d1c:	70 93 29 01 	sts	0x0129, r23	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
    3d20:	60 93 28 01 	sts	0x0128, r22	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
    3d24:	08 95       	ret
    3d26:	70 93 2b 01 	sts	0x012B, r23	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
    3d2a:	60 93 2a 01 	sts	0x012A, r22	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
    3d2e:	08 95       	ret

00003d30 <rcServoCreate>:
    3d30:	ea e0       	ldi	r30, 0x0A	; 10
    3d32:	f1 e0       	ldi	r31, 0x01	; 1
    3d34:	80 81       	ld	r24, Z
    3d36:	88 61       	ori	r24, 0x18	; 24
    3d38:	80 83       	st	Z, r24
    3d3a:	8f e3       	ldi	r24, 0x3F	; 63
    3d3c:	9c e9       	ldi	r25, 0x9C	; 156
    3d3e:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__TEXT_REGION_LENGTH__+0x700127>
    3d42:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__TEXT_REGION_LENGTH__+0x700126>
    3d46:	60 e0       	ldi	r22, 0x00	; 0
    3d48:	80 e0       	ldi	r24, 0x00	; 0
    3d4a:	da df       	rcall	.-76     	; 0x3d00 <rcServoSet>
    3d4c:	60 e0       	ldi	r22, 0x00	; 0
    3d4e:	81 e0       	ldi	r24, 0x01	; 1
    3d50:	d7 df       	rcall	.-82     	; 0x3d00 <rcServoSet>
    3d52:	e0 e2       	ldi	r30, 0x20	; 32
    3d54:	f1 e0       	ldi	r31, 0x01	; 1
    3d56:	80 81       	ld	r24, Z
    3d58:	82 6a       	ori	r24, 0xA2	; 162
    3d5a:	80 83       	st	Z, r24
    3d5c:	e1 e2       	ldi	r30, 0x21	; 33
    3d5e:	f1 e0       	ldi	r31, 0x01	; 1
    3d60:	80 81       	ld	r24, Z
    3d62:	8a 61       	ori	r24, 0x1A	; 26
    3d64:	80 83       	st	Z, r24
    3d66:	08 95       	ret

00003d68 <serial_new_instance>:
    3d68:	2f 92       	push	r2
    3d6a:	3f 92       	push	r3
    3d6c:	4f 92       	push	r4
    3d6e:	5f 92       	push	r5
    3d70:	6f 92       	push	r6
    3d72:	7f 92       	push	r7
    3d74:	8f 92       	push	r8
    3d76:	9f 92       	push	r9
    3d78:	af 92       	push	r10
    3d7a:	cf 92       	push	r12
    3d7c:	ef 92       	push	r14
    3d7e:	ff 92       	push	r15
    3d80:	0f 93       	push	r16
    3d82:	1f 93       	push	r17
    3d84:	cf 93       	push	r28
    3d86:	df 93       	push	r29
    3d88:	cd b7       	in	r28, 0x3d	; 61
    3d8a:	de b7       	in	r29, 0x3e	; 62
    3d8c:	f8 2e       	mov	r15, r24
    3d8e:	2a 01       	movw	r4, r20
    3d90:	3b 01       	movw	r6, r22
    3d92:	88 e0       	ldi	r24, 0x08	; 8
    3d94:	90 e0       	ldi	r25, 0x00	; 0
    3d96:	9b d7       	rcall	.+3894   	; 0x4cce <malloc>
    3d98:	8c 01       	movw	r16, r24
    3d9a:	8f 2d       	mov	r24, r15
    3d9c:	90 e0       	ldi	r25, 0x00	; 0
    3d9e:	88 0f       	add	r24, r24
    3da0:	99 1f       	adc	r25, r25
    3da2:	fc 01       	movw	r30, r24
    3da4:	e2 5a       	subi	r30, 0xA2	; 162
    3da6:	fb 4e       	sbci	r31, 0xEB	; 235
    3da8:	11 83       	std	Z+1, r17	; 0x01
    3daa:	00 83       	st	Z, r16
    3dac:	fc 01       	movw	r30, r24
    3dae:	e6 5f       	subi	r30, 0xF6	; 246
    3db0:	fd 4f       	sbci	r31, 0xFD	; 253
    3db2:	80 81       	ld	r24, Z
    3db4:	91 81       	ldd	r25, Z+1	; 0x01
    3db6:	d8 01       	movw	r26, r16
    3db8:	8d 93       	st	X+, r24
    3dba:	9c 93       	st	X, r25
    3dbc:	6c 2d       	mov	r22, r12
    3dbe:	70 e0       	ldi	r23, 0x00	; 0
    3dc0:	84 e0       	ldi	r24, 0x04	; 4
    3dc2:	90 e0       	ldi	r25, 0x00	; 0
    3dc4:	6a d7       	rcall	.+3796   	; 0x4c9a <calloc>
    3dc6:	1c 01       	movw	r2, r24
    3dc8:	61 e0       	ldi	r22, 0x01	; 1
    3dca:	70 e0       	ldi	r23, 0x00	; 0
    3dcc:	86 e0       	ldi	r24, 0x06	; 6
    3dce:	90 e0       	ldi	r25, 0x00	; 0
    3dd0:	64 d7       	rcall	.+3784   	; 0x4c9a <calloc>
    3dd2:	7c 01       	movw	r14, r24
    3dd4:	4c 2d       	mov	r20, r12
    3dd6:	b1 01       	movw	r22, r2
    3dd8:	2b d5       	rcall	.+2646   	; 0x4830 <fifo_init>
    3dda:	f8 01       	movw	r30, r16
    3ddc:	f5 82       	std	Z+5, r15	; 0x05
    3dde:	e4 82       	std	Z+4, r14	; 0x04
    3de0:	6a 2d       	mov	r22, r10
    3de2:	70 e0       	ldi	r23, 0x00	; 0
    3de4:	84 e0       	ldi	r24, 0x04	; 4
    3de6:	90 e0       	ldi	r25, 0x00	; 0
    3de8:	58 d7       	rcall	.+3760   	; 0x4c9a <calloc>
    3dea:	1c 01       	movw	r2, r24
    3dec:	61 e0       	ldi	r22, 0x01	; 1
    3dee:	70 e0       	ldi	r23, 0x00	; 0
    3df0:	86 e0       	ldi	r24, 0x06	; 6
    3df2:	90 e0       	ldi	r25, 0x00	; 0
    3df4:	52 d7       	rcall	.+3748   	; 0x4c9a <calloc>
    3df6:	7c 01       	movw	r14, r24
    3df8:	4a 2d       	mov	r20, r10
    3dfa:	b1 01       	movw	r22, r2
    3dfc:	19 d5       	rcall	.+2610   	; 0x4830 <fifo_init>
    3dfe:	d8 01       	movw	r26, r16
    3e00:	13 96       	adiw	r26, 0x03	; 3
    3e02:	fc 92       	st	X, r15
    3e04:	ee 92       	st	-X, r14
    3e06:	12 97       	sbiw	r26, 0x02	; 2
    3e08:	17 96       	adiw	r26, 0x07	; 7
    3e0a:	9c 92       	st	X, r9
    3e0c:	8e 92       	st	-X, r8
    3e0e:	16 97       	sbiw	r26, 0x06	; 6
    3e10:	ff b6       	in	r15, 0x3f	; 63
    3e12:	f8 94       	cli
    3e14:	ed 91       	ld	r30, X+
    3e16:	fc 91       	ld	r31, X
    3e18:	11 97       	sbiw	r26, 0x01	; 1
    3e1a:	36 97       	sbiw	r30, 0x06	; 6
    3e1c:	80 81       	ld	r24, Z
    3e1e:	82 60       	ori	r24, 0x02	; 2
    3e20:	80 83       	st	Z, r24
    3e22:	8d 90       	ld	r8, X+
    3e24:	9c 90       	ld	r9, X
    3e26:	c3 01       	movw	r24, r6
    3e28:	b2 01       	movw	r22, r4
    3e2a:	1c d6       	rcall	.+3128   	; 0x4a64 <__floatunsisf>
    3e2c:	20 e0       	ldi	r18, 0x00	; 0
    3e2e:	30 e0       	ldi	r19, 0x00	; 0
    3e30:	40 e0       	ldi	r20, 0x00	; 0
    3e32:	51 e4       	ldi	r21, 0x41	; 65
    3e34:	a5 d6       	rcall	.+3402   	; 0x4b80 <__mulsf3>
    3e36:	9b 01       	movw	r18, r22
    3e38:	ac 01       	movw	r20, r24
    3e3a:	60 e0       	ldi	r22, 0x00	; 0
    3e3c:	74 e2       	ldi	r23, 0x24	; 36
    3e3e:	84 e7       	ldi	r24, 0x74	; 116
    3e40:	9b e4       	ldi	r25, 0x4B	; 75
    3e42:	77 d5       	rcall	.+2798   	; 0x4932 <__divsf3>
    3e44:	20 e0       	ldi	r18, 0x00	; 0
    3e46:	30 e0       	ldi	r19, 0x00	; 0
    3e48:	40 e8       	ldi	r20, 0x80	; 128
    3e4a:	5f e3       	ldi	r21, 0x3F	; 63
    3e4c:	0d d5       	rcall	.+2586   	; 0x4868 <__subsf3>
    3e4e:	de d5       	rcall	.+3004   	; 0x4a0c <__fixunssfsi>
    3e50:	f4 01       	movw	r30, r8
    3e52:	32 97       	sbiw	r30, 0x02	; 2
    3e54:	60 83       	st	Z, r22
    3e56:	d8 01       	movw	r26, r16
    3e58:	ed 91       	ld	r30, X+
    3e5a:	fc 91       	ld	r31, X
    3e5c:	11 97       	sbiw	r26, 0x01	; 1
    3e5e:	35 97       	sbiw	r30, 0x05	; 5
    3e60:	88 e9       	ldi	r24, 0x98	; 152
    3e62:	80 83       	st	Z, r24
    3e64:	ed 91       	ld	r30, X+
    3e66:	fc 91       	ld	r31, X
    3e68:	34 97       	sbiw	r30, 0x04	; 4
    3e6a:	86 e0       	ldi	r24, 0x06	; 6
    3e6c:	80 83       	st	Z, r24
    3e6e:	ff be       	out	0x3f, r15	; 63
    3e70:	c8 01       	movw	r24, r16
    3e72:	df 91       	pop	r29
    3e74:	cf 91       	pop	r28
    3e76:	1f 91       	pop	r17
    3e78:	0f 91       	pop	r16
    3e7a:	ff 90       	pop	r15
    3e7c:	ef 90       	pop	r14
    3e7e:	cf 90       	pop	r12
    3e80:	af 90       	pop	r10
    3e82:	9f 90       	pop	r9
    3e84:	8f 90       	pop	r8
    3e86:	7f 90       	pop	r7
    3e88:	6f 90       	pop	r6
    3e8a:	5f 90       	pop	r5
    3e8c:	4f 90       	pop	r4
    3e8e:	3f 90       	pop	r3
    3e90:	2f 90       	pop	r2
    3e92:	08 95       	ret

00003e94 <serial_send_byte>:
    3e94:	cf 93       	push	r28
    3e96:	df 93       	push	r29
    3e98:	ec 01       	movw	r28, r24
    3e9a:	ea 81       	ldd	r30, Y+2	; 0x02
    3e9c:	fb 81       	ldd	r31, Y+3	; 0x03
    3e9e:	93 81       	ldd	r25, Z+3	; 0x03
    3ea0:	82 81       	ldd	r24, Z+2	; 0x02
    3ea2:	25 81       	ldd	r18, Z+5	; 0x05
    3ea4:	98 1b       	sub	r25, r24
    3ea6:	92 23       	and	r25, r18
    3ea8:	84 81       	ldd	r24, Z+4	; 0x04
    3eaa:	98 17       	cp	r25, r24
    3eac:	a1 f0       	breq	.+40     	; 0x3ed6 <serial_send_byte+0x42>
    3eae:	93 81       	ldd	r25, Z+3	; 0x03
    3eb0:	26 95       	lsr	r18
    3eb2:	29 23       	and	r18, r25
    3eb4:	a0 81       	ld	r26, Z
    3eb6:	b1 81       	ldd	r27, Z+1	; 0x01
    3eb8:	a2 0f       	add	r26, r18
    3eba:	b1 1d       	adc	r27, r1
    3ebc:	6c 93       	st	X, r22
    3ebe:	9f 5f       	subi	r25, 0xFF	; 255
    3ec0:	25 81       	ldd	r18, Z+5	; 0x05
    3ec2:	92 23       	and	r25, r18
    3ec4:	93 83       	std	Z+3, r25	; 0x03
    3ec6:	e8 81       	ld	r30, Y
    3ec8:	f9 81       	ldd	r31, Y+1	; 0x01
    3eca:	35 97       	sbiw	r30, 0x05	; 5
    3ecc:	80 81       	ld	r24, Z
    3ece:	80 62       	ori	r24, 0x20	; 32
    3ed0:	80 83       	st	Z, r24
    3ed2:	80 e0       	ldi	r24, 0x00	; 0
    3ed4:	01 c0       	rjmp	.+2      	; 0x3ed8 <serial_send_byte+0x44>
    3ed6:	82 e0       	ldi	r24, 0x02	; 2
    3ed8:	df 91       	pop	r29
    3eda:	cf 91       	pop	r28
    3edc:	08 95       	ret

00003ede <serial_send_bytes>:
    3ede:	ef 92       	push	r14
    3ee0:	ff 92       	push	r15
    3ee2:	0f 93       	push	r16
    3ee4:	1f 93       	push	r17
    3ee6:	cf 93       	push	r28
    3ee8:	df 93       	push	r29
    3eea:	7c 01       	movw	r14, r24
    3eec:	dc 01       	movw	r26, r24
    3eee:	12 96       	adiw	r26, 0x02	; 2
    3ef0:	ed 91       	ld	r30, X+
    3ef2:	fc 91       	ld	r31, X
    3ef4:	13 97       	sbiw	r26, 0x03	; 3
    3ef6:	93 81       	ldd	r25, Z+3	; 0x03
    3ef8:	82 81       	ldd	r24, Z+2	; 0x02
    3efa:	98 1b       	sub	r25, r24
    3efc:	85 81       	ldd	r24, Z+5	; 0x05
    3efe:	98 23       	and	r25, r24
    3f00:	84 81       	ldd	r24, Z+4	; 0x04
    3f02:	89 1b       	sub	r24, r25
    3f04:	86 17       	cp	r24, r22
    3f06:	98 f1       	brcs	.+102    	; 0x3f6e <serial_send_bytes+0x90>
    3f08:	66 23       	and	r22, r22
    3f0a:	41 f1       	breq	.+80     	; 0x3f5c <serial_send_bytes+0x7e>
    3f0c:	84 2f       	mov	r24, r20
    3f0e:	95 2f       	mov	r25, r21
    3f10:	dc 01       	movw	r26, r24
    3f12:	61 50       	subi	r22, 0x01	; 1
    3f14:	46 2f       	mov	r20, r22
    3f16:	50 e0       	ldi	r21, 0x00	; 0
    3f18:	4f 5f       	subi	r20, 0xFF	; 255
    3f1a:	5f 4f       	sbci	r21, 0xFF	; 255
    3f1c:	48 0f       	add	r20, r24
    3f1e:	59 1f       	adc	r21, r25
    3f20:	e7 01       	movw	r28, r14
    3f22:	ea 81       	ldd	r30, Y+2	; 0x02
    3f24:	fb 81       	ldd	r31, Y+3	; 0x03
    3f26:	93 81       	ldd	r25, Z+3	; 0x03
    3f28:	82 81       	ldd	r24, Z+2	; 0x02
    3f2a:	25 81       	ldd	r18, Z+5	; 0x05
    3f2c:	98 1b       	sub	r25, r24
    3f2e:	92 23       	and	r25, r18
    3f30:	84 81       	ldd	r24, Z+4	; 0x04
    3f32:	98 17       	cp	r25, r24
    3f34:	79 f0       	breq	.+30     	; 0x3f54 <serial_send_bytes+0x76>
    3f36:	8c 91       	ld	r24, X
    3f38:	93 81       	ldd	r25, Z+3	; 0x03
    3f3a:	26 95       	lsr	r18
    3f3c:	29 23       	and	r18, r25
    3f3e:	60 81       	ld	r22, Z
    3f40:	71 81       	ldd	r23, Z+1	; 0x01
    3f42:	8b 01       	movw	r16, r22
    3f44:	02 0f       	add	r16, r18
    3f46:	11 1d       	adc	r17, r1
    3f48:	e8 01       	movw	r28, r16
    3f4a:	88 83       	st	Y, r24
    3f4c:	9f 5f       	subi	r25, 0xFF	; 255
    3f4e:	85 81       	ldd	r24, Z+5	; 0x05
    3f50:	98 23       	and	r25, r24
    3f52:	93 83       	std	Z+3, r25	; 0x03
    3f54:	11 96       	adiw	r26, 0x01	; 1
    3f56:	a4 17       	cp	r26, r20
    3f58:	b5 07       	cpc	r27, r21
    3f5a:	11 f7       	brne	.-60     	; 0x3f20 <serial_send_bytes+0x42>
    3f5c:	d7 01       	movw	r26, r14
    3f5e:	ed 91       	ld	r30, X+
    3f60:	fc 91       	ld	r31, X
    3f62:	35 97       	sbiw	r30, 0x05	; 5
    3f64:	80 81       	ld	r24, Z
    3f66:	80 62       	ori	r24, 0x20	; 32
    3f68:	80 83       	st	Z, r24
    3f6a:	80 e0       	ldi	r24, 0x00	; 0
    3f6c:	01 c0       	rjmp	.+2      	; 0x3f70 <serial_send_bytes+0x92>
    3f6e:	82 e0       	ldi	r24, 0x02	; 2
    3f70:	df 91       	pop	r29
    3f72:	cf 91       	pop	r28
    3f74:	1f 91       	pop	r17
    3f76:	0f 91       	pop	r16
    3f78:	ff 90       	pop	r15
    3f7a:	ef 90       	pop	r14
    3f7c:	08 95       	ret

00003f7e <serial_get_byte>:
    3f7e:	dc 01       	movw	r26, r24
    3f80:	14 96       	adiw	r26, 0x04	; 4
    3f82:	ed 91       	ld	r30, X+
    3f84:	fc 91       	ld	r31, X
    3f86:	15 97       	sbiw	r26, 0x05	; 5
    3f88:	93 81       	ldd	r25, Z+3	; 0x03
    3f8a:	82 81       	ldd	r24, Z+2	; 0x02
    3f8c:	98 17       	cp	r25, r24
    3f8e:	89 f0       	breq	.+34     	; 0x3fb2 <serial_get_byte+0x34>
    3f90:	92 81       	ldd	r25, Z+2	; 0x02
    3f92:	85 81       	ldd	r24, Z+5	; 0x05
    3f94:	86 95       	lsr	r24
    3f96:	89 23       	and	r24, r25
    3f98:	a0 81       	ld	r26, Z
    3f9a:	b1 81       	ldd	r27, Z+1	; 0x01
    3f9c:	a8 0f       	add	r26, r24
    3f9e:	b1 1d       	adc	r27, r1
    3fa0:	8c 91       	ld	r24, X
    3fa2:	db 01       	movw	r26, r22
    3fa4:	8c 93       	st	X, r24
    3fa6:	9f 5f       	subi	r25, 0xFF	; 255
    3fa8:	85 81       	ldd	r24, Z+5	; 0x05
    3faa:	98 23       	and	r25, r24
    3fac:	92 83       	std	Z+2, r25	; 0x02
    3fae:	80 e0       	ldi	r24, 0x00	; 0
    3fb0:	08 95       	ret
    3fb2:	83 e0       	ldi	r24, 0x03	; 3
    3fb4:	08 95       	ret

00003fb6 <__vector_25>:
    3fb6:	1f 92       	push	r1
    3fb8:	0f 92       	push	r0
    3fba:	0f b6       	in	r0, 0x3f	; 63
    3fbc:	0f 92       	push	r0
    3fbe:	11 24       	eor	r1, r1
    3fc0:	0b b6       	in	r0, 0x3b	; 59
    3fc2:	0f 92       	push	r0
    3fc4:	2f 93       	push	r18
    3fc6:	3f 93       	push	r19
    3fc8:	4f 93       	push	r20
    3fca:	5f 93       	push	r21
    3fcc:	6f 93       	push	r22
    3fce:	7f 93       	push	r23
    3fd0:	8f 93       	push	r24
    3fd2:	9f 93       	push	r25
    3fd4:	af 93       	push	r26
    3fd6:	bf 93       	push	r27
    3fd8:	cf 93       	push	r28
    3fda:	df 93       	push	r29
    3fdc:	ef 93       	push	r30
    3fde:	ff 93       	push	r31
    3fe0:	a0 91 5e 14 	lds	r26, 0x145E	; 0x80145e <_ser_handle>
    3fe4:	b0 91 5f 14 	lds	r27, 0x145F	; 0x80145f <_ser_handle+0x1>
    3fe8:	10 97       	sbiw	r26, 0x00	; 0
    3fea:	11 f1       	breq	.+68     	; 0x4030 <__vector_25+0x7a>
    3fec:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    3ff0:	14 96       	adiw	r26, 0x04	; 4
    3ff2:	ed 91       	ld	r30, X+
    3ff4:	fc 91       	ld	r31, X
    3ff6:	15 97       	sbiw	r26, 0x05	; 5
    3ff8:	93 81       	ldd	r25, Z+3	; 0x03
    3ffa:	82 81       	ldd	r24, Z+2	; 0x02
    3ffc:	25 81       	ldd	r18, Z+5	; 0x05
    3ffe:	98 1b       	sub	r25, r24
    4000:	92 23       	and	r25, r18
    4002:	84 81       	ldd	r24, Z+4	; 0x04
    4004:	98 17       	cp	r25, r24
    4006:	61 f0       	breq	.+24     	; 0x4020 <__vector_25+0x6a>
    4008:	83 81       	ldd	r24, Z+3	; 0x03
    400a:	26 95       	lsr	r18
    400c:	28 23       	and	r18, r24
    400e:	c0 81       	ld	r28, Z
    4010:	d1 81       	ldd	r29, Z+1	; 0x01
    4012:	c2 0f       	add	r28, r18
    4014:	d1 1d       	adc	r29, r1
    4016:	68 83       	st	Y, r22
    4018:	8f 5f       	subi	r24, 0xFF	; 255
    401a:	95 81       	ldd	r25, Z+5	; 0x05
    401c:	89 23       	and	r24, r25
    401e:	83 83       	std	Z+3, r24	; 0x03
    4020:	16 96       	adiw	r26, 0x06	; 6
    4022:	ed 91       	ld	r30, X+
    4024:	fc 91       	ld	r31, X
    4026:	17 97       	sbiw	r26, 0x07	; 7
    4028:	30 97       	sbiw	r30, 0x00	; 0
    402a:	11 f0       	breq	.+4      	; 0x4030 <__vector_25+0x7a>
    402c:	cd 01       	movw	r24, r26
    402e:	19 95       	eicall
    4030:	ff 91       	pop	r31
    4032:	ef 91       	pop	r30
    4034:	df 91       	pop	r29
    4036:	cf 91       	pop	r28
    4038:	bf 91       	pop	r27
    403a:	af 91       	pop	r26
    403c:	9f 91       	pop	r25
    403e:	8f 91       	pop	r24
    4040:	7f 91       	pop	r23
    4042:	6f 91       	pop	r22
    4044:	5f 91       	pop	r21
    4046:	4f 91       	pop	r20
    4048:	3f 91       	pop	r19
    404a:	2f 91       	pop	r18
    404c:	0f 90       	pop	r0
    404e:	0b be       	out	0x3b, r0	; 59
    4050:	0f 90       	pop	r0
    4052:	0f be       	out	0x3f, r0	; 63
    4054:	0f 90       	pop	r0
    4056:	1f 90       	pop	r1
    4058:	18 95       	reti

0000405a <__vector_26>:
    405a:	1f 92       	push	r1
    405c:	0f 92       	push	r0
    405e:	0f b6       	in	r0, 0x3f	; 63
    4060:	0f 92       	push	r0
    4062:	11 24       	eor	r1, r1
    4064:	0b b6       	in	r0, 0x3b	; 59
    4066:	0f 92       	push	r0
    4068:	2f 93       	push	r18
    406a:	8f 93       	push	r24
    406c:	9f 93       	push	r25
    406e:	af 93       	push	r26
    4070:	bf 93       	push	r27
    4072:	ef 93       	push	r30
    4074:	ff 93       	push	r31
    4076:	e0 91 5e 14 	lds	r30, 0x145E	; 0x80145e <_ser_handle>
    407a:	f0 91 5f 14 	lds	r31, 0x145F	; 0x80145f <_ser_handle+0x1>
    407e:	30 97       	sbiw	r30, 0x00	; 0
    4080:	b9 f0       	breq	.+46     	; 0x40b0 <__vector_26+0x56>
    4082:	02 80       	ldd	r0, Z+2	; 0x02
    4084:	f3 81       	ldd	r31, Z+3	; 0x03
    4086:	e0 2d       	mov	r30, r0
    4088:	93 81       	ldd	r25, Z+3	; 0x03
    408a:	82 81       	ldd	r24, Z+2	; 0x02
    408c:	98 17       	cp	r25, r24
    408e:	b1 f0       	breq	.+44     	; 0x40bc <__vector_26+0x62>
    4090:	92 81       	ldd	r25, Z+2	; 0x02
    4092:	85 81       	ldd	r24, Z+5	; 0x05
    4094:	28 2f       	mov	r18, r24
    4096:	26 95       	lsr	r18
    4098:	29 23       	and	r18, r25
    409a:	a0 81       	ld	r26, Z
    409c:	b1 81       	ldd	r27, Z+1	; 0x01
    409e:	a2 0f       	add	r26, r18
    40a0:	b1 1d       	adc	r27, r1
    40a2:	2c 91       	ld	r18, X
    40a4:	9f 5f       	subi	r25, 0xFF	; 255
    40a6:	89 23       	and	r24, r25
    40a8:	82 83       	std	Z+2, r24	; 0x02
    40aa:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    40ae:	0b c0       	rjmp	.+22     	; 0x40c6 <__vector_26+0x6c>
    40b0:	e1 ec       	ldi	r30, 0xC1	; 193
    40b2:	f0 e0       	ldi	r31, 0x00	; 0
    40b4:	80 81       	ld	r24, Z
    40b6:	8f 7d       	andi	r24, 0xDF	; 223
    40b8:	80 83       	st	Z, r24
    40ba:	05 c0       	rjmp	.+10     	; 0x40c6 <__vector_26+0x6c>
    40bc:	e1 ec       	ldi	r30, 0xC1	; 193
    40be:	f0 e0       	ldi	r31, 0x00	; 0
    40c0:	80 81       	ld	r24, Z
    40c2:	8f 7d       	andi	r24, 0xDF	; 223
    40c4:	80 83       	st	Z, r24
    40c6:	ff 91       	pop	r31
    40c8:	ef 91       	pop	r30
    40ca:	bf 91       	pop	r27
    40cc:	af 91       	pop	r26
    40ce:	9f 91       	pop	r25
    40d0:	8f 91       	pop	r24
    40d2:	2f 91       	pop	r18
    40d4:	0f 90       	pop	r0
    40d6:	0b be       	out	0x3b, r0	; 59
    40d8:	0f 90       	pop	r0
    40da:	0f be       	out	0x3f, r0	; 63
    40dc:	0f 90       	pop	r0
    40de:	1f 90       	pop	r1
    40e0:	18 95       	reti

000040e2 <__vector_36>:
    40e2:	1f 92       	push	r1
    40e4:	0f 92       	push	r0
    40e6:	0f b6       	in	r0, 0x3f	; 63
    40e8:	0f 92       	push	r0
    40ea:	11 24       	eor	r1, r1
    40ec:	0b b6       	in	r0, 0x3b	; 59
    40ee:	0f 92       	push	r0
    40f0:	2f 93       	push	r18
    40f2:	3f 93       	push	r19
    40f4:	4f 93       	push	r20
    40f6:	5f 93       	push	r21
    40f8:	6f 93       	push	r22
    40fa:	7f 93       	push	r23
    40fc:	8f 93       	push	r24
    40fe:	9f 93       	push	r25
    4100:	af 93       	push	r26
    4102:	bf 93       	push	r27
    4104:	cf 93       	push	r28
    4106:	df 93       	push	r29
    4108:	ef 93       	push	r30
    410a:	ff 93       	push	r31
    410c:	a0 91 60 14 	lds	r26, 0x1460	; 0x801460 <_ser_handle+0x2>
    4110:	b0 91 61 14 	lds	r27, 0x1461	; 0x801461 <_ser_handle+0x3>
    4114:	10 97       	sbiw	r26, 0x00	; 0
    4116:	11 f1       	breq	.+68     	; 0x415c <__vector_36+0x7a>
    4118:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    411c:	14 96       	adiw	r26, 0x04	; 4
    411e:	ed 91       	ld	r30, X+
    4120:	fc 91       	ld	r31, X
    4122:	15 97       	sbiw	r26, 0x05	; 5
    4124:	93 81       	ldd	r25, Z+3	; 0x03
    4126:	82 81       	ldd	r24, Z+2	; 0x02
    4128:	25 81       	ldd	r18, Z+5	; 0x05
    412a:	98 1b       	sub	r25, r24
    412c:	92 23       	and	r25, r18
    412e:	84 81       	ldd	r24, Z+4	; 0x04
    4130:	98 17       	cp	r25, r24
    4132:	61 f0       	breq	.+24     	; 0x414c <__vector_36+0x6a>
    4134:	83 81       	ldd	r24, Z+3	; 0x03
    4136:	26 95       	lsr	r18
    4138:	28 23       	and	r18, r24
    413a:	c0 81       	ld	r28, Z
    413c:	d1 81       	ldd	r29, Z+1	; 0x01
    413e:	c2 0f       	add	r28, r18
    4140:	d1 1d       	adc	r29, r1
    4142:	68 83       	st	Y, r22
    4144:	8f 5f       	subi	r24, 0xFF	; 255
    4146:	95 81       	ldd	r25, Z+5	; 0x05
    4148:	89 23       	and	r24, r25
    414a:	83 83       	std	Z+3, r24	; 0x03
    414c:	16 96       	adiw	r26, 0x06	; 6
    414e:	ed 91       	ld	r30, X+
    4150:	fc 91       	ld	r31, X
    4152:	17 97       	sbiw	r26, 0x07	; 7
    4154:	30 97       	sbiw	r30, 0x00	; 0
    4156:	11 f0       	breq	.+4      	; 0x415c <__vector_36+0x7a>
    4158:	cd 01       	movw	r24, r26
    415a:	19 95       	eicall
    415c:	ff 91       	pop	r31
    415e:	ef 91       	pop	r30
    4160:	df 91       	pop	r29
    4162:	cf 91       	pop	r28
    4164:	bf 91       	pop	r27
    4166:	af 91       	pop	r26
    4168:	9f 91       	pop	r25
    416a:	8f 91       	pop	r24
    416c:	7f 91       	pop	r23
    416e:	6f 91       	pop	r22
    4170:	5f 91       	pop	r21
    4172:	4f 91       	pop	r20
    4174:	3f 91       	pop	r19
    4176:	2f 91       	pop	r18
    4178:	0f 90       	pop	r0
    417a:	0b be       	out	0x3b, r0	; 59
    417c:	0f 90       	pop	r0
    417e:	0f be       	out	0x3f, r0	; 63
    4180:	0f 90       	pop	r0
    4182:	1f 90       	pop	r1
    4184:	18 95       	reti

00004186 <__vector_37>:
    4186:	1f 92       	push	r1
    4188:	0f 92       	push	r0
    418a:	0f b6       	in	r0, 0x3f	; 63
    418c:	0f 92       	push	r0
    418e:	11 24       	eor	r1, r1
    4190:	0b b6       	in	r0, 0x3b	; 59
    4192:	0f 92       	push	r0
    4194:	2f 93       	push	r18
    4196:	8f 93       	push	r24
    4198:	9f 93       	push	r25
    419a:	af 93       	push	r26
    419c:	bf 93       	push	r27
    419e:	ef 93       	push	r30
    41a0:	ff 93       	push	r31
    41a2:	e0 91 60 14 	lds	r30, 0x1460	; 0x801460 <_ser_handle+0x2>
    41a6:	f0 91 61 14 	lds	r31, 0x1461	; 0x801461 <_ser_handle+0x3>
    41aa:	30 97       	sbiw	r30, 0x00	; 0
    41ac:	b9 f0       	breq	.+46     	; 0x41dc <__vector_37+0x56>
    41ae:	02 80       	ldd	r0, Z+2	; 0x02
    41b0:	f3 81       	ldd	r31, Z+3	; 0x03
    41b2:	e0 2d       	mov	r30, r0
    41b4:	93 81       	ldd	r25, Z+3	; 0x03
    41b6:	82 81       	ldd	r24, Z+2	; 0x02
    41b8:	98 17       	cp	r25, r24
    41ba:	b1 f0       	breq	.+44     	; 0x41e8 <__vector_37+0x62>
    41bc:	92 81       	ldd	r25, Z+2	; 0x02
    41be:	85 81       	ldd	r24, Z+5	; 0x05
    41c0:	28 2f       	mov	r18, r24
    41c2:	26 95       	lsr	r18
    41c4:	29 23       	and	r18, r25
    41c6:	a0 81       	ld	r26, Z
    41c8:	b1 81       	ldd	r27, Z+1	; 0x01
    41ca:	a2 0f       	add	r26, r18
    41cc:	b1 1d       	adc	r27, r1
    41ce:	2c 91       	ld	r18, X
    41d0:	9f 5f       	subi	r25, 0xFF	; 255
    41d2:	89 23       	and	r24, r25
    41d4:	82 83       	std	Z+2, r24	; 0x02
    41d6:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    41da:	0b c0       	rjmp	.+22     	; 0x41f2 <__vector_37+0x6c>
    41dc:	e9 ec       	ldi	r30, 0xC9	; 201
    41de:	f0 e0       	ldi	r31, 0x00	; 0
    41e0:	80 81       	ld	r24, Z
    41e2:	8f 7d       	andi	r24, 0xDF	; 223
    41e4:	80 83       	st	Z, r24
    41e6:	05 c0       	rjmp	.+10     	; 0x41f2 <__vector_37+0x6c>
    41e8:	e9 ec       	ldi	r30, 0xC9	; 201
    41ea:	f0 e0       	ldi	r31, 0x00	; 0
    41ec:	80 81       	ld	r24, Z
    41ee:	8f 7d       	andi	r24, 0xDF	; 223
    41f0:	80 83       	st	Z, r24
    41f2:	ff 91       	pop	r31
    41f4:	ef 91       	pop	r30
    41f6:	bf 91       	pop	r27
    41f8:	af 91       	pop	r26
    41fa:	9f 91       	pop	r25
    41fc:	8f 91       	pop	r24
    41fe:	2f 91       	pop	r18
    4200:	0f 90       	pop	r0
    4202:	0b be       	out	0x3b, r0	; 59
    4204:	0f 90       	pop	r0
    4206:	0f be       	out	0x3f, r0	; 63
    4208:	0f 90       	pop	r0
    420a:	1f 90       	pop	r1
    420c:	18 95       	reti

0000420e <__vector_51>:
    420e:	1f 92       	push	r1
    4210:	0f 92       	push	r0
    4212:	0f b6       	in	r0, 0x3f	; 63
    4214:	0f 92       	push	r0
    4216:	11 24       	eor	r1, r1
    4218:	0b b6       	in	r0, 0x3b	; 59
    421a:	0f 92       	push	r0
    421c:	2f 93       	push	r18
    421e:	3f 93       	push	r19
    4220:	4f 93       	push	r20
    4222:	5f 93       	push	r21
    4224:	6f 93       	push	r22
    4226:	7f 93       	push	r23
    4228:	8f 93       	push	r24
    422a:	9f 93       	push	r25
    422c:	af 93       	push	r26
    422e:	bf 93       	push	r27
    4230:	cf 93       	push	r28
    4232:	df 93       	push	r29
    4234:	ef 93       	push	r30
    4236:	ff 93       	push	r31
    4238:	a0 91 62 14 	lds	r26, 0x1462	; 0x801462 <_ser_handle+0x4>
    423c:	b0 91 63 14 	lds	r27, 0x1463	; 0x801463 <_ser_handle+0x5>
    4240:	10 97       	sbiw	r26, 0x00	; 0
    4242:	11 f1       	breq	.+68     	; 0x4288 <__vector_51+0x7a>
    4244:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    4248:	14 96       	adiw	r26, 0x04	; 4
    424a:	ed 91       	ld	r30, X+
    424c:	fc 91       	ld	r31, X
    424e:	15 97       	sbiw	r26, 0x05	; 5
    4250:	93 81       	ldd	r25, Z+3	; 0x03
    4252:	82 81       	ldd	r24, Z+2	; 0x02
    4254:	25 81       	ldd	r18, Z+5	; 0x05
    4256:	98 1b       	sub	r25, r24
    4258:	92 23       	and	r25, r18
    425a:	84 81       	ldd	r24, Z+4	; 0x04
    425c:	98 17       	cp	r25, r24
    425e:	61 f0       	breq	.+24     	; 0x4278 <__vector_51+0x6a>
    4260:	83 81       	ldd	r24, Z+3	; 0x03
    4262:	26 95       	lsr	r18
    4264:	28 23       	and	r18, r24
    4266:	c0 81       	ld	r28, Z
    4268:	d1 81       	ldd	r29, Z+1	; 0x01
    426a:	c2 0f       	add	r28, r18
    426c:	d1 1d       	adc	r29, r1
    426e:	68 83       	st	Y, r22
    4270:	8f 5f       	subi	r24, 0xFF	; 255
    4272:	95 81       	ldd	r25, Z+5	; 0x05
    4274:	89 23       	and	r24, r25
    4276:	83 83       	std	Z+3, r24	; 0x03
    4278:	16 96       	adiw	r26, 0x06	; 6
    427a:	ed 91       	ld	r30, X+
    427c:	fc 91       	ld	r31, X
    427e:	17 97       	sbiw	r26, 0x07	; 7
    4280:	30 97       	sbiw	r30, 0x00	; 0
    4282:	11 f0       	breq	.+4      	; 0x4288 <__vector_51+0x7a>
    4284:	cd 01       	movw	r24, r26
    4286:	19 95       	eicall
    4288:	ff 91       	pop	r31
    428a:	ef 91       	pop	r30
    428c:	df 91       	pop	r29
    428e:	cf 91       	pop	r28
    4290:	bf 91       	pop	r27
    4292:	af 91       	pop	r26
    4294:	9f 91       	pop	r25
    4296:	8f 91       	pop	r24
    4298:	7f 91       	pop	r23
    429a:	6f 91       	pop	r22
    429c:	5f 91       	pop	r21
    429e:	4f 91       	pop	r20
    42a0:	3f 91       	pop	r19
    42a2:	2f 91       	pop	r18
    42a4:	0f 90       	pop	r0
    42a6:	0b be       	out	0x3b, r0	; 59
    42a8:	0f 90       	pop	r0
    42aa:	0f be       	out	0x3f, r0	; 63
    42ac:	0f 90       	pop	r0
    42ae:	1f 90       	pop	r1
    42b0:	18 95       	reti

000042b2 <__vector_52>:
    42b2:	1f 92       	push	r1
    42b4:	0f 92       	push	r0
    42b6:	0f b6       	in	r0, 0x3f	; 63
    42b8:	0f 92       	push	r0
    42ba:	11 24       	eor	r1, r1
    42bc:	0b b6       	in	r0, 0x3b	; 59
    42be:	0f 92       	push	r0
    42c0:	2f 93       	push	r18
    42c2:	8f 93       	push	r24
    42c4:	9f 93       	push	r25
    42c6:	af 93       	push	r26
    42c8:	bf 93       	push	r27
    42ca:	ef 93       	push	r30
    42cc:	ff 93       	push	r31
    42ce:	e0 91 62 14 	lds	r30, 0x1462	; 0x801462 <_ser_handle+0x4>
    42d2:	f0 91 63 14 	lds	r31, 0x1463	; 0x801463 <_ser_handle+0x5>
    42d6:	30 97       	sbiw	r30, 0x00	; 0
    42d8:	b9 f0       	breq	.+46     	; 0x4308 <__vector_52+0x56>
    42da:	02 80       	ldd	r0, Z+2	; 0x02
    42dc:	f3 81       	ldd	r31, Z+3	; 0x03
    42de:	e0 2d       	mov	r30, r0
    42e0:	93 81       	ldd	r25, Z+3	; 0x03
    42e2:	82 81       	ldd	r24, Z+2	; 0x02
    42e4:	98 17       	cp	r25, r24
    42e6:	b1 f0       	breq	.+44     	; 0x4314 <__vector_52+0x62>
    42e8:	92 81       	ldd	r25, Z+2	; 0x02
    42ea:	85 81       	ldd	r24, Z+5	; 0x05
    42ec:	28 2f       	mov	r18, r24
    42ee:	26 95       	lsr	r18
    42f0:	29 23       	and	r18, r25
    42f2:	a0 81       	ld	r26, Z
    42f4:	b1 81       	ldd	r27, Z+1	; 0x01
    42f6:	a2 0f       	add	r26, r18
    42f8:	b1 1d       	adc	r27, r1
    42fa:	2c 91       	ld	r18, X
    42fc:	9f 5f       	subi	r25, 0xFF	; 255
    42fe:	89 23       	and	r24, r25
    4300:	82 83       	std	Z+2, r24	; 0x02
    4302:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    4306:	0b c0       	rjmp	.+22     	; 0x431e <__vector_52+0x6c>
    4308:	e1 ed       	ldi	r30, 0xD1	; 209
    430a:	f0 e0       	ldi	r31, 0x00	; 0
    430c:	80 81       	ld	r24, Z
    430e:	8f 7d       	andi	r24, 0xDF	; 223
    4310:	80 83       	st	Z, r24
    4312:	05 c0       	rjmp	.+10     	; 0x431e <__vector_52+0x6c>
    4314:	e1 ed       	ldi	r30, 0xD1	; 209
    4316:	f0 e0       	ldi	r31, 0x00	; 0
    4318:	80 81       	ld	r24, Z
    431a:	8f 7d       	andi	r24, 0xDF	; 223
    431c:	80 83       	st	Z, r24
    431e:	ff 91       	pop	r31
    4320:	ef 91       	pop	r30
    4322:	bf 91       	pop	r27
    4324:	af 91       	pop	r26
    4326:	9f 91       	pop	r25
    4328:	8f 91       	pop	r24
    432a:	2f 91       	pop	r18
    432c:	0f 90       	pop	r0
    432e:	0b be       	out	0x3b, r0	; 59
    4330:	0f 90       	pop	r0
    4332:	0f be       	out	0x3f, r0	; 63
    4334:	0f 90       	pop	r0
    4336:	1f 90       	pop	r1
    4338:	18 95       	reti

0000433a <__vector_54>:
    433a:	1f 92       	push	r1
    433c:	0f 92       	push	r0
    433e:	0f b6       	in	r0, 0x3f	; 63
    4340:	0f 92       	push	r0
    4342:	11 24       	eor	r1, r1
    4344:	0b b6       	in	r0, 0x3b	; 59
    4346:	0f 92       	push	r0
    4348:	2f 93       	push	r18
    434a:	3f 93       	push	r19
    434c:	4f 93       	push	r20
    434e:	5f 93       	push	r21
    4350:	6f 93       	push	r22
    4352:	7f 93       	push	r23
    4354:	8f 93       	push	r24
    4356:	9f 93       	push	r25
    4358:	af 93       	push	r26
    435a:	bf 93       	push	r27
    435c:	cf 93       	push	r28
    435e:	df 93       	push	r29
    4360:	ef 93       	push	r30
    4362:	ff 93       	push	r31
    4364:	a0 91 64 14 	lds	r26, 0x1464	; 0x801464 <_ser_handle+0x6>
    4368:	b0 91 65 14 	lds	r27, 0x1465	; 0x801465 <_ser_handle+0x7>
    436c:	10 97       	sbiw	r26, 0x00	; 0
    436e:	11 f1       	breq	.+68     	; 0x43b4 <__vector_54+0x7a>
    4370:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    4374:	14 96       	adiw	r26, 0x04	; 4
    4376:	ed 91       	ld	r30, X+
    4378:	fc 91       	ld	r31, X
    437a:	15 97       	sbiw	r26, 0x05	; 5
    437c:	93 81       	ldd	r25, Z+3	; 0x03
    437e:	82 81       	ldd	r24, Z+2	; 0x02
    4380:	25 81       	ldd	r18, Z+5	; 0x05
    4382:	98 1b       	sub	r25, r24
    4384:	92 23       	and	r25, r18
    4386:	84 81       	ldd	r24, Z+4	; 0x04
    4388:	98 17       	cp	r25, r24
    438a:	61 f0       	breq	.+24     	; 0x43a4 <__vector_54+0x6a>
    438c:	83 81       	ldd	r24, Z+3	; 0x03
    438e:	26 95       	lsr	r18
    4390:	28 23       	and	r18, r24
    4392:	c0 81       	ld	r28, Z
    4394:	d1 81       	ldd	r29, Z+1	; 0x01
    4396:	c2 0f       	add	r28, r18
    4398:	d1 1d       	adc	r29, r1
    439a:	68 83       	st	Y, r22
    439c:	8f 5f       	subi	r24, 0xFF	; 255
    439e:	95 81       	ldd	r25, Z+5	; 0x05
    43a0:	89 23       	and	r24, r25
    43a2:	83 83       	std	Z+3, r24	; 0x03
    43a4:	16 96       	adiw	r26, 0x06	; 6
    43a6:	ed 91       	ld	r30, X+
    43a8:	fc 91       	ld	r31, X
    43aa:	17 97       	sbiw	r26, 0x07	; 7
    43ac:	30 97       	sbiw	r30, 0x00	; 0
    43ae:	11 f0       	breq	.+4      	; 0x43b4 <__vector_54+0x7a>
    43b0:	cd 01       	movw	r24, r26
    43b2:	19 95       	eicall
    43b4:	ff 91       	pop	r31
    43b6:	ef 91       	pop	r30
    43b8:	df 91       	pop	r29
    43ba:	cf 91       	pop	r28
    43bc:	bf 91       	pop	r27
    43be:	af 91       	pop	r26
    43c0:	9f 91       	pop	r25
    43c2:	8f 91       	pop	r24
    43c4:	7f 91       	pop	r23
    43c6:	6f 91       	pop	r22
    43c8:	5f 91       	pop	r21
    43ca:	4f 91       	pop	r20
    43cc:	3f 91       	pop	r19
    43ce:	2f 91       	pop	r18
    43d0:	0f 90       	pop	r0
    43d2:	0b be       	out	0x3b, r0	; 59
    43d4:	0f 90       	pop	r0
    43d6:	0f be       	out	0x3f, r0	; 63
    43d8:	0f 90       	pop	r0
    43da:	1f 90       	pop	r1
    43dc:	18 95       	reti

000043de <__vector_55>:
    43de:	1f 92       	push	r1
    43e0:	0f 92       	push	r0
    43e2:	0f b6       	in	r0, 0x3f	; 63
    43e4:	0f 92       	push	r0
    43e6:	11 24       	eor	r1, r1
    43e8:	0b b6       	in	r0, 0x3b	; 59
    43ea:	0f 92       	push	r0
    43ec:	2f 93       	push	r18
    43ee:	8f 93       	push	r24
    43f0:	9f 93       	push	r25
    43f2:	af 93       	push	r26
    43f4:	bf 93       	push	r27
    43f6:	ef 93       	push	r30
    43f8:	ff 93       	push	r31
    43fa:	e0 91 64 14 	lds	r30, 0x1464	; 0x801464 <_ser_handle+0x6>
    43fe:	f0 91 65 14 	lds	r31, 0x1465	; 0x801465 <_ser_handle+0x7>
    4402:	30 97       	sbiw	r30, 0x00	; 0
    4404:	b9 f0       	breq	.+46     	; 0x4434 <__vector_55+0x56>
    4406:	02 80       	ldd	r0, Z+2	; 0x02
    4408:	f3 81       	ldd	r31, Z+3	; 0x03
    440a:	e0 2d       	mov	r30, r0
    440c:	93 81       	ldd	r25, Z+3	; 0x03
    440e:	82 81       	ldd	r24, Z+2	; 0x02
    4410:	98 17       	cp	r25, r24
    4412:	b1 f0       	breq	.+44     	; 0x4440 <__vector_55+0x62>
    4414:	92 81       	ldd	r25, Z+2	; 0x02
    4416:	85 81       	ldd	r24, Z+5	; 0x05
    4418:	28 2f       	mov	r18, r24
    441a:	26 95       	lsr	r18
    441c:	29 23       	and	r18, r25
    441e:	a0 81       	ld	r26, Z
    4420:	b1 81       	ldd	r27, Z+1	; 0x01
    4422:	a2 0f       	add	r26, r18
    4424:	b1 1d       	adc	r27, r1
    4426:	2c 91       	ld	r18, X
    4428:	9f 5f       	subi	r25, 0xFF	; 255
    442a:	89 23       	and	r24, r25
    442c:	82 83       	std	Z+2, r24	; 0x02
    442e:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    4432:	0b c0       	rjmp	.+22     	; 0x444a <__vector_55+0x6c>
    4434:	e1 e3       	ldi	r30, 0x31	; 49
    4436:	f1 e0       	ldi	r31, 0x01	; 1
    4438:	80 81       	ld	r24, Z
    443a:	8f 7d       	andi	r24, 0xDF	; 223
    443c:	80 83       	st	Z, r24
    443e:	05 c0       	rjmp	.+10     	; 0x444a <__vector_55+0x6c>
    4440:	e1 e3       	ldi	r30, 0x31	; 49
    4442:	f1 e0       	ldi	r31, 0x01	; 1
    4444:	80 81       	ld	r24, Z
    4446:	8f 7d       	andi	r24, 0xDF	; 223
    4448:	80 83       	st	Z, r24
    444a:	ff 91       	pop	r31
    444c:	ef 91       	pop	r30
    444e:	bf 91       	pop	r27
    4450:	af 91       	pop	r26
    4452:	9f 91       	pop	r25
    4454:	8f 91       	pop	r24
    4456:	2f 91       	pop	r18
    4458:	0f 90       	pop	r0
    445a:	0b be       	out	0x3b, r0	; 59
    445c:	0f 90       	pop	r0
    445e:	0f be       	out	0x3f, r0	; 63
    4460:	0f 90       	pop	r0
    4462:	1f 90       	pop	r1
    4464:	18 95       	reti

00004466 <usart_getchar>:
    4466:	cf 93       	push	r28
    4468:	df 93       	push	r29
    446a:	1f 92       	push	r1
    446c:	cd b7       	in	r28, 0x3d	; 61
    446e:	de b7       	in	r29, 0x3e	; 62
    4470:	be 01       	movw	r22, r28
    4472:	6f 5f       	subi	r22, 0xFF	; 255
    4474:	7f 4f       	sbci	r23, 0xFF	; 255
    4476:	80 91 66 14 	lds	r24, 0x1466	; 0x801466 <_com_serial_instance>
    447a:	90 91 67 14 	lds	r25, 0x1467	; 0x801467 <_com_serial_instance+0x1>
    447e:	7f dd       	rcall	.-1282   	; 0x3f7e <serial_get_byte>
    4480:	81 11       	cpse	r24, r1
    4482:	f6 cf       	rjmp	.-20     	; 0x4470 <usart_getchar+0xa>
    4484:	89 81       	ldd	r24, Y+1	; 0x01
    4486:	90 e0       	ldi	r25, 0x00	; 0
    4488:	0f 90       	pop	r0
    448a:	df 91       	pop	r29
    448c:	cf 91       	pop	r28
    448e:	08 95       	ret

00004490 <usart_putchar>:
    4490:	68 2f       	mov	r22, r24
    4492:	80 91 66 14 	lds	r24, 0x1466	; 0x801466 <_com_serial_instance>
    4496:	90 91 67 14 	lds	r25, 0x1467	; 0x801467 <_com_serial_instance+0x1>
    449a:	fc dc       	rcall	.-1544   	; 0x3e94 <serial_send_byte>
    449c:	80 e0       	ldi	r24, 0x00	; 0
    449e:	90 e0       	ldi	r25, 0x00	; 0
    44a0:	08 95       	ret

000044a2 <stdioCreate>:
    44a2:	8f 92       	push	r8
    44a4:	9f 92       	push	r9
    44a6:	af 92       	push	r10
    44a8:	cf 92       	push	r12
    44aa:	ef 92       	push	r14
    44ac:	0f 93       	push	r16
    44ae:	81 2c       	mov	r8, r1
    44b0:	91 2c       	mov	r9, r1
    44b2:	68 94       	set
    44b4:	aa 24       	eor	r10, r10
    44b6:	a7 f8       	bld	r10, 7
    44b8:	68 94       	set
    44ba:	cc 24       	eor	r12, r12
    44bc:	c7 f8       	bld	r12, 7
    44be:	e1 2c       	mov	r14, r1
    44c0:	00 e0       	ldi	r16, 0x00	; 0
    44c2:	23 e0       	ldi	r18, 0x03	; 3
    44c4:	40 e0       	ldi	r20, 0x00	; 0
    44c6:	51 ee       	ldi	r21, 0xE1	; 225
    44c8:	60 e0       	ldi	r22, 0x00	; 0
    44ca:	70 e0       	ldi	r23, 0x00	; 0
    44cc:	4d dc       	rcall	.-1894   	; 0x3d68 <serial_new_instance>
    44ce:	90 93 67 14 	sts	0x1467, r25	; 0x801467 <_com_serial_instance+0x1>
    44d2:	80 93 66 14 	sts	0x1466, r24	; 0x801466 <_com_serial_instance>
    44d6:	e1 eb       	ldi	r30, 0xB1	; 177
    44d8:	f4 e1       	ldi	r31, 0x14	; 20
    44da:	82 e1       	ldi	r24, 0x12	; 18
    44dc:	92 e0       	ldi	r25, 0x02	; 2
    44de:	91 83       	std	Z+1, r25	; 0x01
    44e0:	80 83       	st	Z, r24
    44e2:	93 83       	std	Z+3, r25	; 0x03
    44e4:	82 83       	std	Z+2, r24	; 0x02
    44e6:	0f 91       	pop	r16
    44e8:	ef 90       	pop	r14
    44ea:	cf 90       	pop	r12
    44ec:	af 90       	pop	r10
    44ee:	9f 90       	pop	r9
    44f0:	8f 90       	pop	r8
    44f2:	08 95       	ret

000044f4 <_initTwiInterface>:
    44f4:	80 91 76 14 	lds	r24, 0x1476	; 0x801476 <_twiIsInitiated>
    44f8:	81 11       	cpse	r24, r1
    44fa:	0c c0       	rjmp	.+24     	; 0x4514 <_initTwiInterface+0x20>
    44fc:	8c e0       	ldi	r24, 0x0C	; 12
    44fe:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    4502:	8f ef       	ldi	r24, 0xFF	; 255
    4504:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    4508:	84 e0       	ldi	r24, 0x04	; 4
    450a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    450e:	81 e0       	ldi	r24, 0x01	; 1
    4510:	80 93 76 14 	sts	0x1476, r24	; 0x801476 <_twiIsInitiated>
    4514:	08 95       	ret

00004516 <twiCreate>:
    4516:	af 92       	push	r10
    4518:	bf 92       	push	r11
    451a:	cf 92       	push	r12
    451c:	df 92       	push	r13
    451e:	ef 92       	push	r14
    4520:	ff 92       	push	r15
    4522:	0f 93       	push	r16
    4524:	1f 93       	push	r17
    4526:	cf 93       	push	r28
    4528:	df 93       	push	r29
    452a:	a8 2e       	mov	r10, r24
    452c:	b6 2e       	mov	r11, r22
    452e:	69 01       	movw	r12, r18
    4530:	7a 01       	movw	r14, r20
    4532:	84 e0       	ldi	r24, 0x04	; 4
    4534:	90 e0       	ldi	r25, 0x00	; 0
    4536:	cb d3       	rcall	.+1942   	; 0x4cce <malloc>
    4538:	ec 01       	movw	r28, r24
    453a:	89 2b       	or	r24, r25
    453c:	61 f1       	breq	.+88     	; 0x4596 <twiCreate+0x80>
    453e:	a8 82       	st	Y, r10
    4540:	81 e0       	ldi	r24, 0x01	; 1
    4542:	b8 12       	cpse	r11, r24
    4544:	12 c0       	rjmp	.+36     	; 0x456a <twiCreate+0x54>
    4546:	c7 01       	movw	r24, r14
    4548:	b6 01       	movw	r22, r12
    454a:	20 ea       	ldi	r18, 0xA0	; 160
    454c:	36 e8       	ldi	r19, 0x86	; 134
    454e:	41 e0       	ldi	r20, 0x01	; 1
    4550:	50 e0       	ldi	r21, 0x00	; 0
    4552:	79 d3       	rcall	.+1778   	; 0x4c46 <__udivmodsi4>
    4554:	da 01       	movw	r26, r20
    4556:	c9 01       	movw	r24, r18
    4558:	40 97       	sbiw	r24, 0x10	; 16
    455a:	a1 09       	sbc	r26, r1
    455c:	b1 09       	sbc	r27, r1
    455e:	b6 95       	lsr	r27
    4560:	a7 95       	ror	r26
    4562:	97 95       	ror	r25
    4564:	87 95       	ror	r24
    4566:	89 83       	std	Y+1, r24	; 0x01
    4568:	11 c0       	rjmp	.+34     	; 0x458c <twiCreate+0x76>
    456a:	c7 01       	movw	r24, r14
    456c:	b6 01       	movw	r22, r12
    456e:	20 e8       	ldi	r18, 0x80	; 128
    4570:	3a e1       	ldi	r19, 0x1A	; 26
    4572:	46 e0       	ldi	r20, 0x06	; 6
    4574:	50 e0       	ldi	r21, 0x00	; 0
    4576:	67 d3       	rcall	.+1742   	; 0x4c46 <__udivmodsi4>
    4578:	da 01       	movw	r26, r20
    457a:	c9 01       	movw	r24, r18
    457c:	40 97       	sbiw	r24, 0x10	; 16
    457e:	a1 09       	sbc	r26, r1
    4580:	b1 09       	sbc	r27, r1
    4582:	b6 95       	lsr	r27
    4584:	a7 95       	ror	r26
    4586:	97 95       	ror	r25
    4588:	87 95       	ror	r24
    458a:	89 83       	std	Y+1, r24	; 0x01
    458c:	1b 83       	std	Y+3, r17	; 0x03
    458e:	0a 83       	std	Y+2, r16	; 0x02
    4590:	8c 2f       	mov	r24, r28
    4592:	9d 2f       	mov	r25, r29
    4594:	02 c0       	rjmp	.+4      	; 0x459a <twiCreate+0x84>
    4596:	80 e0       	ldi	r24, 0x00	; 0
    4598:	90 e0       	ldi	r25, 0x00	; 0
    459a:	df 91       	pop	r29
    459c:	cf 91       	pop	r28
    459e:	1f 91       	pop	r17
    45a0:	0f 91       	pop	r16
    45a2:	ff 90       	pop	r15
    45a4:	ef 90       	pop	r14
    45a6:	df 90       	pop	r13
    45a8:	cf 90       	pop	r12
    45aa:	bf 90       	pop	r11
    45ac:	af 90       	pop	r10
    45ae:	08 95       	ret

000045b0 <twiIsBusy>:
    45b0:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    45b4:	81 70       	andi	r24, 0x01	; 1
    45b6:	08 95       	ret

000045b8 <twiTransmit>:
    45b8:	ff 92       	push	r15
    45ba:	0f 93       	push	r16
    45bc:	1f 93       	push	r17
    45be:	cf 93       	push	r28
    45c0:	df 93       	push	r29
    45c2:	00 97       	sbiw	r24, 0x00	; 0
    45c4:	d1 f1       	breq	.+116    	; 0x463a <twiTransmit+0x82>
    45c6:	4a 30       	cpi	r20, 0x0A	; 10
    45c8:	d0 f5       	brcc	.+116    	; 0x463e <twiTransmit+0x86>
    45ca:	f4 2e       	mov	r15, r20
    45cc:	8b 01       	movw	r16, r22
    45ce:	ec 01       	movw	r28, r24
    45d0:	ef df       	rcall	.-34     	; 0x45b0 <twiIsBusy>
    45d2:	81 11       	cpse	r24, r1
    45d4:	36 c0       	rjmp	.+108    	; 0x4642 <twiTransmit+0x8a>
    45d6:	80 91 69 14 	lds	r24, 0x1469	; 0x801469 <_twiCurrentHandler>
    45da:	90 91 6a 14 	lds	r25, 0x146A	; 0x80146a <_twiCurrentHandler+0x1>
    45de:	c8 17       	cp	r28, r24
    45e0:	d9 07       	cpc	r29, r25
    45e2:	41 f0       	breq	.+16     	; 0x45f4 <twiTransmit+0x3c>
    45e4:	87 df       	rcall	.-242    	; 0x44f4 <_initTwiInterface>
    45e6:	89 81       	ldd	r24, Y+1	; 0x01
    45e8:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    45ec:	d0 93 6a 14 	sts	0x146A, r29	; 0x80146a <_twiCurrentHandler+0x1>
    45f0:	c0 93 69 14 	sts	0x1469, r28	; 0x801469 <_twiCurrentHandler>
    45f4:	81 e0       	ldi	r24, 0x01	; 1
    45f6:	8f 0d       	add	r24, r15
    45f8:	80 93 6b 14 	sts	0x146B, r24	; 0x80146b <_twiMessageLen>
    45fc:	88 81       	ld	r24, Y
    45fe:	88 0f       	add	r24, r24
    4600:	80 93 6c 14 	sts	0x146C, r24	; 0x80146c <_twiMessageBuffer>
    4604:	ff 20       	and	r15, r15
    4606:	89 f0       	breq	.+34     	; 0x462a <twiTransmit+0x72>
    4608:	f8 01       	movw	r30, r16
    460a:	ad e6       	ldi	r26, 0x6D	; 109
    460c:	b4 e1       	ldi	r27, 0x14	; 20
    460e:	4f ef       	ldi	r20, 0xFF	; 255
    4610:	4f 0d       	add	r20, r15
    4612:	64 2f       	mov	r22, r20
    4614:	70 e0       	ldi	r23, 0x00	; 0
    4616:	cb 01       	movw	r24, r22
    4618:	01 96       	adiw	r24, 0x01	; 1
    461a:	b8 01       	movw	r22, r16
    461c:	68 0f       	add	r22, r24
    461e:	79 1f       	adc	r23, r25
    4620:	81 91       	ld	r24, Z+
    4622:	8d 93       	st	X+, r24
    4624:	e6 17       	cp	r30, r22
    4626:	f7 07       	cpc	r31, r23
    4628:	d9 f7       	brne	.-10     	; 0x4620 <twiTransmit+0x68>
    462a:	88 ef       	ldi	r24, 0xF8	; 248
    462c:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <_twiCurrentState>
    4630:	85 ea       	ldi	r24, 0xA5	; 165
    4632:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4636:	84 e0       	ldi	r24, 0x04	; 4
    4638:	05 c0       	rjmp	.+10     	; 0x4644 <twiTransmit+0x8c>
    463a:	86 e0       	ldi	r24, 0x06	; 6
    463c:	03 c0       	rjmp	.+6      	; 0x4644 <twiTransmit+0x8c>
    463e:	87 e0       	ldi	r24, 0x07	; 7
    4640:	01 c0       	rjmp	.+2      	; 0x4644 <twiTransmit+0x8c>
    4642:	82 e0       	ldi	r24, 0x02	; 2
    4644:	df 91       	pop	r29
    4646:	cf 91       	pop	r28
    4648:	1f 91       	pop	r17
    464a:	0f 91       	pop	r16
    464c:	ff 90       	pop	r15
    464e:	08 95       	ret

00004650 <twiReceive>:
    4650:	1f 93       	push	r17
    4652:	cf 93       	push	r28
    4654:	df 93       	push	r29
    4656:	00 97       	sbiw	r24, 0x00	; 0
    4658:	29 f1       	breq	.+74     	; 0x46a4 <twiReceive+0x54>
    465a:	6b 30       	cpi	r22, 0x0B	; 11
    465c:	28 f5       	brcc	.+74     	; 0x46a8 <twiReceive+0x58>
    465e:	16 2f       	mov	r17, r22
    4660:	ec 01       	movw	r28, r24
    4662:	a6 df       	rcall	.-180    	; 0x45b0 <twiIsBusy>
    4664:	81 11       	cpse	r24, r1
    4666:	22 c0       	rjmp	.+68     	; 0x46ac <twiReceive+0x5c>
    4668:	80 91 69 14 	lds	r24, 0x1469	; 0x801469 <_twiCurrentHandler>
    466c:	90 91 6a 14 	lds	r25, 0x146A	; 0x80146a <_twiCurrentHandler+0x1>
    4670:	c8 17       	cp	r28, r24
    4672:	d9 07       	cpc	r29, r25
    4674:	41 f0       	breq	.+16     	; 0x4686 <twiReceive+0x36>
    4676:	3e df       	rcall	.-388    	; 0x44f4 <_initTwiInterface>
    4678:	89 81       	ldd	r24, Y+1	; 0x01
    467a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    467e:	d0 93 6a 14 	sts	0x146A, r29	; 0x80146a <_twiCurrentHandler+0x1>
    4682:	c0 93 69 14 	sts	0x1469, r28	; 0x801469 <_twiCurrentHandler>
    4686:	10 93 6b 14 	sts	0x146B, r17	; 0x80146b <_twiMessageLen>
    468a:	88 81       	ld	r24, Y
    468c:	88 0f       	add	r24, r24
    468e:	81 60       	ori	r24, 0x01	; 1
    4690:	80 93 6c 14 	sts	0x146C, r24	; 0x80146c <_twiMessageBuffer>
    4694:	88 ef       	ldi	r24, 0xF8	; 248
    4696:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <_twiCurrentState>
    469a:	85 ea       	ldi	r24, 0xA5	; 165
    469c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    46a0:	85 e0       	ldi	r24, 0x05	; 5
    46a2:	05 c0       	rjmp	.+10     	; 0x46ae <twiReceive+0x5e>
    46a4:	86 e0       	ldi	r24, 0x06	; 6
    46a6:	03 c0       	rjmp	.+6      	; 0x46ae <twiReceive+0x5e>
    46a8:	87 e0       	ldi	r24, 0x07	; 7
    46aa:	01 c0       	rjmp	.+2      	; 0x46ae <twiReceive+0x5e>
    46ac:	82 e0       	ldi	r24, 0x02	; 2
    46ae:	df 91       	pop	r29
    46b0:	cf 91       	pop	r28
    46b2:	1f 91       	pop	r17
    46b4:	08 95       	ret

000046b6 <__vector_39>:
    46b6:	1f 92       	push	r1
    46b8:	0f 92       	push	r0
    46ba:	0f b6       	in	r0, 0x3f	; 63
    46bc:	0f 92       	push	r0
    46be:	11 24       	eor	r1, r1
    46c0:	0b b6       	in	r0, 0x3b	; 59
    46c2:	0f 92       	push	r0
    46c4:	2f 93       	push	r18
    46c6:	3f 93       	push	r19
    46c8:	4f 93       	push	r20
    46ca:	5f 93       	push	r21
    46cc:	6f 93       	push	r22
    46ce:	7f 93       	push	r23
    46d0:	8f 93       	push	r24
    46d2:	9f 93       	push	r25
    46d4:	af 93       	push	r26
    46d6:	bf 93       	push	r27
    46d8:	ef 93       	push	r30
    46da:	ff 93       	push	r31
    46dc:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    46e0:	8e 2f       	mov	r24, r30
    46e2:	90 e0       	ldi	r25, 0x00	; 0
    46e4:	fc 01       	movw	r30, r24
    46e6:	38 97       	sbiw	r30, 0x08	; 8
    46e8:	e1 35       	cpi	r30, 0x51	; 81
    46ea:	f1 05       	cpc	r31, r1
    46ec:	08 f0       	brcs	.+2      	; 0x46f0 <__vector_39+0x3a>
    46ee:	75 c0       	rjmp	.+234    	; 0x47da <__vector_39+0x124>
    46f0:	88 27       	eor	r24, r24
    46f2:	e4 58       	subi	r30, 0x84	; 132
    46f4:	ff 4f       	sbci	r31, 0xFF	; 255
    46f6:	8f 4f       	sbci	r24, 0xFF	; 255
    46f8:	c8 c2       	rjmp	.+1424   	; 0x4c8a <__tablejump2__>
    46fa:	10 92 68 14 	sts	0x1468, r1	; 0x801468 <_index.1885>
    46fe:	e0 91 68 14 	lds	r30, 0x1468	; 0x801468 <_index.1885>
    4702:	80 91 6b 14 	lds	r24, 0x146B	; 0x80146b <_twiMessageLen>
    4706:	e8 17       	cp	r30, r24
    4708:	70 f4       	brcc	.+28     	; 0x4726 <__vector_39+0x70>
    470a:	81 e0       	ldi	r24, 0x01	; 1
    470c:	8e 0f       	add	r24, r30
    470e:	80 93 68 14 	sts	0x1468, r24	; 0x801468 <_index.1885>
    4712:	f0 e0       	ldi	r31, 0x00	; 0
    4714:	e4 59       	subi	r30, 0x94	; 148
    4716:	fb 4e       	sbci	r31, 0xEB	; 235
    4718:	80 81       	ld	r24, Z
    471a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    471e:	85 e8       	ldi	r24, 0x85	; 133
    4720:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4724:	72 c0       	rjmp	.+228    	; 0x480a <__vector_39+0x154>
    4726:	84 e9       	ldi	r24, 0x94	; 148
    4728:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    472c:	80 91 69 14 	lds	r24, 0x1469	; 0x801469 <_twiCurrentHandler>
    4730:	90 91 6a 14 	lds	r25, 0x146A	; 0x80146a <_twiCurrentHandler+0x1>
    4734:	dc 01       	movw	r26, r24
    4736:	12 96       	adiw	r26, 0x02	; 2
    4738:	ed 91       	ld	r30, X+
    473a:	fc 91       	ld	r31, X
    473c:	13 97       	sbiw	r26, 0x03	; 3
    473e:	30 97       	sbiw	r30, 0x00	; 0
    4740:	09 f4       	brne	.+2      	; 0x4744 <__vector_39+0x8e>
    4742:	63 c0       	rjmp	.+198    	; 0x480a <__vector_39+0x154>
    4744:	20 e0       	ldi	r18, 0x00	; 0
    4746:	40 e0       	ldi	r20, 0x00	; 0
    4748:	50 e0       	ldi	r21, 0x00	; 0
    474a:	64 e0       	ldi	r22, 0x04	; 4
    474c:	19 95       	eicall
    474e:	5d c0       	rjmp	.+186    	; 0x480a <__vector_39+0x154>
    4750:	e0 91 68 14 	lds	r30, 0x1468	; 0x801468 <_index.1885>
    4754:	81 e0       	ldi	r24, 0x01	; 1
    4756:	8e 0f       	add	r24, r30
    4758:	80 93 68 14 	sts	0x1468, r24	; 0x801468 <_index.1885>
    475c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    4760:	f0 e0       	ldi	r31, 0x00	; 0
    4762:	e4 59       	subi	r30, 0x94	; 148
    4764:	fb 4e       	sbci	r31, 0xEB	; 235
    4766:	80 83       	st	Z, r24
    4768:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    476c:	80 34       	cpi	r24, 0x40	; 64
    476e:	11 f4       	brne	.+4      	; 0x4774 <__vector_39+0xbe>
    4770:	10 92 68 14 	sts	0x1468, r1	; 0x801468 <_index.1885>
    4774:	20 91 68 14 	lds	r18, 0x1468	; 0x801468 <_index.1885>
    4778:	30 e0       	ldi	r19, 0x00	; 0
    477a:	80 91 6b 14 	lds	r24, 0x146B	; 0x80146b <_twiMessageLen>
    477e:	90 e0       	ldi	r25, 0x00	; 0
    4780:	01 97       	sbiw	r24, 0x01	; 1
    4782:	28 17       	cp	r18, r24
    4784:	39 07       	cpc	r19, r25
    4786:	24 f4       	brge	.+8      	; 0x4790 <__vector_39+0xda>
    4788:	85 ec       	ldi	r24, 0xC5	; 197
    478a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    478e:	3d c0       	rjmp	.+122    	; 0x480a <__vector_39+0x154>
    4790:	85 e8       	ldi	r24, 0x85	; 133
    4792:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4796:	39 c0       	rjmp	.+114    	; 0x480a <__vector_39+0x154>
    4798:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    479c:	e0 91 68 14 	lds	r30, 0x1468	; 0x801468 <_index.1885>
    47a0:	f0 e0       	ldi	r31, 0x00	; 0
    47a2:	e4 59       	subi	r30, 0x94	; 148
    47a4:	fb 4e       	sbci	r31, 0xEB	; 235
    47a6:	80 83       	st	Z, r24
    47a8:	84 e9       	ldi	r24, 0x94	; 148
    47aa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    47ae:	80 91 69 14 	lds	r24, 0x1469	; 0x801469 <_twiCurrentHandler>
    47b2:	90 91 6a 14 	lds	r25, 0x146A	; 0x80146a <_twiCurrentHandler+0x1>
    47b6:	dc 01       	movw	r26, r24
    47b8:	12 96       	adiw	r26, 0x02	; 2
    47ba:	ed 91       	ld	r30, X+
    47bc:	fc 91       	ld	r31, X
    47be:	13 97       	sbiw	r26, 0x03	; 3
    47c0:	30 97       	sbiw	r30, 0x00	; 0
    47c2:	19 f1       	breq	.+70     	; 0x480a <__vector_39+0x154>
    47c4:	20 91 6b 14 	lds	r18, 0x146B	; 0x80146b <_twiMessageLen>
    47c8:	4c e6       	ldi	r20, 0x6C	; 108
    47ca:	54 e1       	ldi	r21, 0x14	; 20
    47cc:	65 e0       	ldi	r22, 0x05	; 5
    47ce:	19 95       	eicall
    47d0:	1c c0       	rjmp	.+56     	; 0x480a <__vector_39+0x154>
    47d2:	85 ea       	ldi	r24, 0xA5	; 165
    47d4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    47d8:	18 c0       	rjmp	.+48     	; 0x480a <__vector_39+0x154>
    47da:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    47de:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <_twiCurrentState>
    47e2:	84 e0       	ldi	r24, 0x04	; 4
    47e4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    47e8:	80 91 69 14 	lds	r24, 0x1469	; 0x801469 <_twiCurrentHandler>
    47ec:	90 91 6a 14 	lds	r25, 0x146A	; 0x80146a <_twiCurrentHandler+0x1>
    47f0:	dc 01       	movw	r26, r24
    47f2:	12 96       	adiw	r26, 0x02	; 2
    47f4:	ed 91       	ld	r30, X+
    47f6:	fc 91       	ld	r31, X
    47f8:	13 97       	sbiw	r26, 0x03	; 3
    47fa:	30 97       	sbiw	r30, 0x00	; 0
    47fc:	31 f0       	breq	.+12     	; 0x480a <__vector_39+0x154>
    47fe:	20 e0       	ldi	r18, 0x00	; 0
    4800:	40 e0       	ldi	r20, 0x00	; 0
    4802:	50 e0       	ldi	r21, 0x00	; 0
    4804:	60 91 20 02 	lds	r22, 0x0220	; 0x800220 <_twiCurrentState>
    4808:	19 95       	eicall
    480a:	ff 91       	pop	r31
    480c:	ef 91       	pop	r30
    480e:	bf 91       	pop	r27
    4810:	af 91       	pop	r26
    4812:	9f 91       	pop	r25
    4814:	8f 91       	pop	r24
    4816:	7f 91       	pop	r23
    4818:	6f 91       	pop	r22
    481a:	5f 91       	pop	r21
    481c:	4f 91       	pop	r20
    481e:	3f 91       	pop	r19
    4820:	2f 91       	pop	r18
    4822:	0f 90       	pop	r0
    4824:	0b be       	out	0x3b, r0	; 59
    4826:	0f 90       	pop	r0
    4828:	0f be       	out	0x3f, r0	; 63
    482a:	0f 90       	pop	r0
    482c:	1f 90       	pop	r1
    482e:	18 95       	reti

00004830 <fifo_init>:
    4830:	fc 01       	movw	r30, r24
    4832:	41 11       	cpse	r20, r1
    4834:	01 c0       	rjmp	.+2      	; 0x4838 <fifo_init+0x8>
    4836:	6c d3       	rcall	.+1752   	; 0x4f10 <abort>
    4838:	84 2f       	mov	r24, r20
    483a:	90 e0       	ldi	r25, 0x00	; 0
    483c:	9c 01       	movw	r18, r24
    483e:	21 50       	subi	r18, 0x01	; 1
    4840:	31 09       	sbc	r19, r1
    4842:	82 23       	and	r24, r18
    4844:	93 23       	and	r25, r19
    4846:	89 2b       	or	r24, r25
    4848:	09 f0       	breq	.+2      	; 0x484c <fifo_init+0x1c>
    484a:	62 d3       	rcall	.+1732   	; 0x4f10 <abort>
    484c:	41 38       	cpi	r20, 0x81	; 129
    484e:	08 f0       	brcs	.+2      	; 0x4852 <fifo_init+0x22>
    4850:	5f d3       	rcall	.+1726   	; 0x4f10 <abort>
    4852:	12 82       	std	Z+2, r1	; 0x02
    4854:	13 82       	std	Z+3, r1	; 0x03
    4856:	44 83       	std	Z+4, r20	; 0x04
    4858:	44 0f       	add	r20, r20
    485a:	41 50       	subi	r20, 0x01	; 1
    485c:	45 83       	std	Z+5, r20	; 0x05
    485e:	71 83       	std	Z+1, r23	; 0x01
    4860:	60 83       	st	Z, r22
    4862:	80 e0       	ldi	r24, 0x00	; 0
    4864:	90 e0       	ldi	r25, 0x00	; 0
    4866:	08 95       	ret

00004868 <__subsf3>:
    4868:	50 58       	subi	r21, 0x80	; 128

0000486a <__addsf3>:
    486a:	bb 27       	eor	r27, r27
    486c:	aa 27       	eor	r26, r26
    486e:	0e d0       	rcall	.+28     	; 0x488c <__addsf3x>
    4870:	4d c1       	rjmp	.+666    	; 0x4b0c <__fp_round>
    4872:	3e d1       	rcall	.+636    	; 0x4af0 <__fp_pscA>
    4874:	30 f0       	brcs	.+12     	; 0x4882 <__addsf3+0x18>
    4876:	43 d1       	rcall	.+646    	; 0x4afe <__fp_pscB>
    4878:	20 f0       	brcs	.+8      	; 0x4882 <__addsf3+0x18>
    487a:	31 f4       	brne	.+12     	; 0x4888 <__addsf3+0x1e>
    487c:	9f 3f       	cpi	r25, 0xFF	; 255
    487e:	11 f4       	brne	.+4      	; 0x4884 <__addsf3+0x1a>
    4880:	1e f4       	brtc	.+6      	; 0x4888 <__addsf3+0x1e>
    4882:	33 c1       	rjmp	.+614    	; 0x4aea <__fp_nan>
    4884:	0e f4       	brtc	.+2      	; 0x4888 <__addsf3+0x1e>
    4886:	e0 95       	com	r30
    4888:	e7 fb       	bst	r30, 7
    488a:	29 c1       	rjmp	.+594    	; 0x4ade <__fp_inf>

0000488c <__addsf3x>:
    488c:	e9 2f       	mov	r30, r25
    488e:	4f d1       	rcall	.+670    	; 0x4b2e <__fp_split3>
    4890:	80 f3       	brcs	.-32     	; 0x4872 <__addsf3+0x8>
    4892:	ba 17       	cp	r27, r26
    4894:	62 07       	cpc	r22, r18
    4896:	73 07       	cpc	r23, r19
    4898:	84 07       	cpc	r24, r20
    489a:	95 07       	cpc	r25, r21
    489c:	18 f0       	brcs	.+6      	; 0x48a4 <__addsf3x+0x18>
    489e:	71 f4       	brne	.+28     	; 0x48bc <__addsf3x+0x30>
    48a0:	9e f5       	brtc	.+102    	; 0x4908 <__addsf3x+0x7c>
    48a2:	67 c1       	rjmp	.+718    	; 0x4b72 <__fp_zero>
    48a4:	0e f4       	brtc	.+2      	; 0x48a8 <__addsf3x+0x1c>
    48a6:	e0 95       	com	r30
    48a8:	0b 2e       	mov	r0, r27
    48aa:	ba 2f       	mov	r27, r26
    48ac:	a0 2d       	mov	r26, r0
    48ae:	0b 01       	movw	r0, r22
    48b0:	b9 01       	movw	r22, r18
    48b2:	90 01       	movw	r18, r0
    48b4:	0c 01       	movw	r0, r24
    48b6:	ca 01       	movw	r24, r20
    48b8:	a0 01       	movw	r20, r0
    48ba:	11 24       	eor	r1, r1
    48bc:	ff 27       	eor	r31, r31
    48be:	59 1b       	sub	r21, r25
    48c0:	99 f0       	breq	.+38     	; 0x48e8 <__addsf3x+0x5c>
    48c2:	59 3f       	cpi	r21, 0xF9	; 249
    48c4:	50 f4       	brcc	.+20     	; 0x48da <__addsf3x+0x4e>
    48c6:	50 3e       	cpi	r21, 0xE0	; 224
    48c8:	68 f1       	brcs	.+90     	; 0x4924 <__addsf3x+0x98>
    48ca:	1a 16       	cp	r1, r26
    48cc:	f0 40       	sbci	r31, 0x00	; 0
    48ce:	a2 2f       	mov	r26, r18
    48d0:	23 2f       	mov	r18, r19
    48d2:	34 2f       	mov	r19, r20
    48d4:	44 27       	eor	r20, r20
    48d6:	58 5f       	subi	r21, 0xF8	; 248
    48d8:	f3 cf       	rjmp	.-26     	; 0x48c0 <__addsf3x+0x34>
    48da:	46 95       	lsr	r20
    48dc:	37 95       	ror	r19
    48de:	27 95       	ror	r18
    48e0:	a7 95       	ror	r26
    48e2:	f0 40       	sbci	r31, 0x00	; 0
    48e4:	53 95       	inc	r21
    48e6:	c9 f7       	brne	.-14     	; 0x48da <__addsf3x+0x4e>
    48e8:	7e f4       	brtc	.+30     	; 0x4908 <__addsf3x+0x7c>
    48ea:	1f 16       	cp	r1, r31
    48ec:	ba 0b       	sbc	r27, r26
    48ee:	62 0b       	sbc	r22, r18
    48f0:	73 0b       	sbc	r23, r19
    48f2:	84 0b       	sbc	r24, r20
    48f4:	ba f0       	brmi	.+46     	; 0x4924 <__addsf3x+0x98>
    48f6:	91 50       	subi	r25, 0x01	; 1
    48f8:	a1 f0       	breq	.+40     	; 0x4922 <__addsf3x+0x96>
    48fa:	ff 0f       	add	r31, r31
    48fc:	bb 1f       	adc	r27, r27
    48fe:	66 1f       	adc	r22, r22
    4900:	77 1f       	adc	r23, r23
    4902:	88 1f       	adc	r24, r24
    4904:	c2 f7       	brpl	.-16     	; 0x48f6 <__addsf3x+0x6a>
    4906:	0e c0       	rjmp	.+28     	; 0x4924 <__addsf3x+0x98>
    4908:	ba 0f       	add	r27, r26
    490a:	62 1f       	adc	r22, r18
    490c:	73 1f       	adc	r23, r19
    490e:	84 1f       	adc	r24, r20
    4910:	48 f4       	brcc	.+18     	; 0x4924 <__addsf3x+0x98>
    4912:	87 95       	ror	r24
    4914:	77 95       	ror	r23
    4916:	67 95       	ror	r22
    4918:	b7 95       	ror	r27
    491a:	f7 95       	ror	r31
    491c:	9e 3f       	cpi	r25, 0xFE	; 254
    491e:	08 f0       	brcs	.+2      	; 0x4922 <__addsf3x+0x96>
    4920:	b3 cf       	rjmp	.-154    	; 0x4888 <__addsf3+0x1e>
    4922:	93 95       	inc	r25
    4924:	88 0f       	add	r24, r24
    4926:	08 f0       	brcs	.+2      	; 0x492a <__addsf3x+0x9e>
    4928:	99 27       	eor	r25, r25
    492a:	ee 0f       	add	r30, r30
    492c:	97 95       	ror	r25
    492e:	87 95       	ror	r24
    4930:	08 95       	ret

00004932 <__divsf3>:
    4932:	0c d0       	rcall	.+24     	; 0x494c <__divsf3x>
    4934:	eb c0       	rjmp	.+470    	; 0x4b0c <__fp_round>
    4936:	e3 d0       	rcall	.+454    	; 0x4afe <__fp_pscB>
    4938:	40 f0       	brcs	.+16     	; 0x494a <__divsf3+0x18>
    493a:	da d0       	rcall	.+436    	; 0x4af0 <__fp_pscA>
    493c:	30 f0       	brcs	.+12     	; 0x494a <__divsf3+0x18>
    493e:	21 f4       	brne	.+8      	; 0x4948 <__divsf3+0x16>
    4940:	5f 3f       	cpi	r21, 0xFF	; 255
    4942:	19 f0       	breq	.+6      	; 0x494a <__divsf3+0x18>
    4944:	cc c0       	rjmp	.+408    	; 0x4ade <__fp_inf>
    4946:	51 11       	cpse	r21, r1
    4948:	15 c1       	rjmp	.+554    	; 0x4b74 <__fp_szero>
    494a:	cf c0       	rjmp	.+414    	; 0x4aea <__fp_nan>

0000494c <__divsf3x>:
    494c:	f0 d0       	rcall	.+480    	; 0x4b2e <__fp_split3>
    494e:	98 f3       	brcs	.-26     	; 0x4936 <__divsf3+0x4>

00004950 <__divsf3_pse>:
    4950:	99 23       	and	r25, r25
    4952:	c9 f3       	breq	.-14     	; 0x4946 <__divsf3+0x14>
    4954:	55 23       	and	r21, r21
    4956:	b1 f3       	breq	.-20     	; 0x4944 <__divsf3+0x12>
    4958:	95 1b       	sub	r25, r21
    495a:	55 0b       	sbc	r21, r21
    495c:	bb 27       	eor	r27, r27
    495e:	aa 27       	eor	r26, r26
    4960:	62 17       	cp	r22, r18
    4962:	73 07       	cpc	r23, r19
    4964:	84 07       	cpc	r24, r20
    4966:	38 f0       	brcs	.+14     	; 0x4976 <__divsf3_pse+0x26>
    4968:	9f 5f       	subi	r25, 0xFF	; 255
    496a:	5f 4f       	sbci	r21, 0xFF	; 255
    496c:	22 0f       	add	r18, r18
    496e:	33 1f       	adc	r19, r19
    4970:	44 1f       	adc	r20, r20
    4972:	aa 1f       	adc	r26, r26
    4974:	a9 f3       	breq	.-22     	; 0x4960 <__divsf3_pse+0x10>
    4976:	33 d0       	rcall	.+102    	; 0x49de <__divsf3_pse+0x8e>
    4978:	0e 2e       	mov	r0, r30
    497a:	3a f0       	brmi	.+14     	; 0x498a <__divsf3_pse+0x3a>
    497c:	e0 e8       	ldi	r30, 0x80	; 128
    497e:	30 d0       	rcall	.+96     	; 0x49e0 <__divsf3_pse+0x90>
    4980:	91 50       	subi	r25, 0x01	; 1
    4982:	50 40       	sbci	r21, 0x00	; 0
    4984:	e6 95       	lsr	r30
    4986:	00 1c       	adc	r0, r0
    4988:	ca f7       	brpl	.-14     	; 0x497c <__divsf3_pse+0x2c>
    498a:	29 d0       	rcall	.+82     	; 0x49de <__divsf3_pse+0x8e>
    498c:	fe 2f       	mov	r31, r30
    498e:	27 d0       	rcall	.+78     	; 0x49de <__divsf3_pse+0x8e>
    4990:	66 0f       	add	r22, r22
    4992:	77 1f       	adc	r23, r23
    4994:	88 1f       	adc	r24, r24
    4996:	bb 1f       	adc	r27, r27
    4998:	26 17       	cp	r18, r22
    499a:	37 07       	cpc	r19, r23
    499c:	48 07       	cpc	r20, r24
    499e:	ab 07       	cpc	r26, r27
    49a0:	b0 e8       	ldi	r27, 0x80	; 128
    49a2:	09 f0       	breq	.+2      	; 0x49a6 <__divsf3_pse+0x56>
    49a4:	bb 0b       	sbc	r27, r27
    49a6:	80 2d       	mov	r24, r0
    49a8:	bf 01       	movw	r22, r30
    49aa:	ff 27       	eor	r31, r31
    49ac:	93 58       	subi	r25, 0x83	; 131
    49ae:	5f 4f       	sbci	r21, 0xFF	; 255
    49b0:	2a f0       	brmi	.+10     	; 0x49bc <__divsf3_pse+0x6c>
    49b2:	9e 3f       	cpi	r25, 0xFE	; 254
    49b4:	51 05       	cpc	r21, r1
    49b6:	68 f0       	brcs	.+26     	; 0x49d2 <__divsf3_pse+0x82>
    49b8:	92 c0       	rjmp	.+292    	; 0x4ade <__fp_inf>
    49ba:	dc c0       	rjmp	.+440    	; 0x4b74 <__fp_szero>
    49bc:	5f 3f       	cpi	r21, 0xFF	; 255
    49be:	ec f3       	brlt	.-6      	; 0x49ba <__divsf3_pse+0x6a>
    49c0:	98 3e       	cpi	r25, 0xE8	; 232
    49c2:	dc f3       	brlt	.-10     	; 0x49ba <__divsf3_pse+0x6a>
    49c4:	86 95       	lsr	r24
    49c6:	77 95       	ror	r23
    49c8:	67 95       	ror	r22
    49ca:	b7 95       	ror	r27
    49cc:	f7 95       	ror	r31
    49ce:	9f 5f       	subi	r25, 0xFF	; 255
    49d0:	c9 f7       	brne	.-14     	; 0x49c4 <__divsf3_pse+0x74>
    49d2:	88 0f       	add	r24, r24
    49d4:	91 1d       	adc	r25, r1
    49d6:	96 95       	lsr	r25
    49d8:	87 95       	ror	r24
    49da:	97 f9       	bld	r25, 7
    49dc:	08 95       	ret
    49de:	e1 e0       	ldi	r30, 0x01	; 1
    49e0:	66 0f       	add	r22, r22
    49e2:	77 1f       	adc	r23, r23
    49e4:	88 1f       	adc	r24, r24
    49e6:	bb 1f       	adc	r27, r27
    49e8:	62 17       	cp	r22, r18
    49ea:	73 07       	cpc	r23, r19
    49ec:	84 07       	cpc	r24, r20
    49ee:	ba 07       	cpc	r27, r26
    49f0:	20 f0       	brcs	.+8      	; 0x49fa <__divsf3_pse+0xaa>
    49f2:	62 1b       	sub	r22, r18
    49f4:	73 0b       	sbc	r23, r19
    49f6:	84 0b       	sbc	r24, r20
    49f8:	ba 0b       	sbc	r27, r26
    49fa:	ee 1f       	adc	r30, r30
    49fc:	88 f7       	brcc	.-30     	; 0x49e0 <__divsf3_pse+0x90>
    49fe:	e0 95       	com	r30
    4a00:	08 95       	ret

00004a02 <__fixsfsi>:
    4a02:	04 d0       	rcall	.+8      	; 0x4a0c <__fixunssfsi>
    4a04:	68 94       	set
    4a06:	b1 11       	cpse	r27, r1
    4a08:	b5 c0       	rjmp	.+362    	; 0x4b74 <__fp_szero>
    4a0a:	08 95       	ret

00004a0c <__fixunssfsi>:
    4a0c:	98 d0       	rcall	.+304    	; 0x4b3e <__fp_splitA>
    4a0e:	88 f0       	brcs	.+34     	; 0x4a32 <__fixunssfsi+0x26>
    4a10:	9f 57       	subi	r25, 0x7F	; 127
    4a12:	90 f0       	brcs	.+36     	; 0x4a38 <__fixunssfsi+0x2c>
    4a14:	b9 2f       	mov	r27, r25
    4a16:	99 27       	eor	r25, r25
    4a18:	b7 51       	subi	r27, 0x17	; 23
    4a1a:	a0 f0       	brcs	.+40     	; 0x4a44 <__fixunssfsi+0x38>
    4a1c:	d1 f0       	breq	.+52     	; 0x4a52 <__fixunssfsi+0x46>
    4a1e:	66 0f       	add	r22, r22
    4a20:	77 1f       	adc	r23, r23
    4a22:	88 1f       	adc	r24, r24
    4a24:	99 1f       	adc	r25, r25
    4a26:	1a f0       	brmi	.+6      	; 0x4a2e <__fixunssfsi+0x22>
    4a28:	ba 95       	dec	r27
    4a2a:	c9 f7       	brne	.-14     	; 0x4a1e <__fixunssfsi+0x12>
    4a2c:	12 c0       	rjmp	.+36     	; 0x4a52 <__fixunssfsi+0x46>
    4a2e:	b1 30       	cpi	r27, 0x01	; 1
    4a30:	81 f0       	breq	.+32     	; 0x4a52 <__fixunssfsi+0x46>
    4a32:	9f d0       	rcall	.+318    	; 0x4b72 <__fp_zero>
    4a34:	b1 e0       	ldi	r27, 0x01	; 1
    4a36:	08 95       	ret
    4a38:	9c c0       	rjmp	.+312    	; 0x4b72 <__fp_zero>
    4a3a:	67 2f       	mov	r22, r23
    4a3c:	78 2f       	mov	r23, r24
    4a3e:	88 27       	eor	r24, r24
    4a40:	b8 5f       	subi	r27, 0xF8	; 248
    4a42:	39 f0       	breq	.+14     	; 0x4a52 <__fixunssfsi+0x46>
    4a44:	b9 3f       	cpi	r27, 0xF9	; 249
    4a46:	cc f3       	brlt	.-14     	; 0x4a3a <__fixunssfsi+0x2e>
    4a48:	86 95       	lsr	r24
    4a4a:	77 95       	ror	r23
    4a4c:	67 95       	ror	r22
    4a4e:	b3 95       	inc	r27
    4a50:	d9 f7       	brne	.-10     	; 0x4a48 <__fixunssfsi+0x3c>
    4a52:	3e f4       	brtc	.+14     	; 0x4a62 <__fixunssfsi+0x56>
    4a54:	90 95       	com	r25
    4a56:	80 95       	com	r24
    4a58:	70 95       	com	r23
    4a5a:	61 95       	neg	r22
    4a5c:	7f 4f       	sbci	r23, 0xFF	; 255
    4a5e:	8f 4f       	sbci	r24, 0xFF	; 255
    4a60:	9f 4f       	sbci	r25, 0xFF	; 255
    4a62:	08 95       	ret

00004a64 <__floatunsisf>:
    4a64:	e8 94       	clt
    4a66:	09 c0       	rjmp	.+18     	; 0x4a7a <__floatsisf+0x12>

00004a68 <__floatsisf>:
    4a68:	97 fb       	bst	r25, 7
    4a6a:	3e f4       	brtc	.+14     	; 0x4a7a <__floatsisf+0x12>
    4a6c:	90 95       	com	r25
    4a6e:	80 95       	com	r24
    4a70:	70 95       	com	r23
    4a72:	61 95       	neg	r22
    4a74:	7f 4f       	sbci	r23, 0xFF	; 255
    4a76:	8f 4f       	sbci	r24, 0xFF	; 255
    4a78:	9f 4f       	sbci	r25, 0xFF	; 255
    4a7a:	99 23       	and	r25, r25
    4a7c:	a9 f0       	breq	.+42     	; 0x4aa8 <__floatsisf+0x40>
    4a7e:	f9 2f       	mov	r31, r25
    4a80:	96 e9       	ldi	r25, 0x96	; 150
    4a82:	bb 27       	eor	r27, r27
    4a84:	93 95       	inc	r25
    4a86:	f6 95       	lsr	r31
    4a88:	87 95       	ror	r24
    4a8a:	77 95       	ror	r23
    4a8c:	67 95       	ror	r22
    4a8e:	b7 95       	ror	r27
    4a90:	f1 11       	cpse	r31, r1
    4a92:	f8 cf       	rjmp	.-16     	; 0x4a84 <__floatsisf+0x1c>
    4a94:	fa f4       	brpl	.+62     	; 0x4ad4 <__floatsisf+0x6c>
    4a96:	bb 0f       	add	r27, r27
    4a98:	11 f4       	brne	.+4      	; 0x4a9e <__floatsisf+0x36>
    4a9a:	60 ff       	sbrs	r22, 0
    4a9c:	1b c0       	rjmp	.+54     	; 0x4ad4 <__floatsisf+0x6c>
    4a9e:	6f 5f       	subi	r22, 0xFF	; 255
    4aa0:	7f 4f       	sbci	r23, 0xFF	; 255
    4aa2:	8f 4f       	sbci	r24, 0xFF	; 255
    4aa4:	9f 4f       	sbci	r25, 0xFF	; 255
    4aa6:	16 c0       	rjmp	.+44     	; 0x4ad4 <__floatsisf+0x6c>
    4aa8:	88 23       	and	r24, r24
    4aaa:	11 f0       	breq	.+4      	; 0x4ab0 <__floatsisf+0x48>
    4aac:	96 e9       	ldi	r25, 0x96	; 150
    4aae:	11 c0       	rjmp	.+34     	; 0x4ad2 <__floatsisf+0x6a>
    4ab0:	77 23       	and	r23, r23
    4ab2:	21 f0       	breq	.+8      	; 0x4abc <__floatsisf+0x54>
    4ab4:	9e e8       	ldi	r25, 0x8E	; 142
    4ab6:	87 2f       	mov	r24, r23
    4ab8:	76 2f       	mov	r23, r22
    4aba:	05 c0       	rjmp	.+10     	; 0x4ac6 <__floatsisf+0x5e>
    4abc:	66 23       	and	r22, r22
    4abe:	71 f0       	breq	.+28     	; 0x4adc <__floatsisf+0x74>
    4ac0:	96 e8       	ldi	r25, 0x86	; 134
    4ac2:	86 2f       	mov	r24, r22
    4ac4:	70 e0       	ldi	r23, 0x00	; 0
    4ac6:	60 e0       	ldi	r22, 0x00	; 0
    4ac8:	2a f0       	brmi	.+10     	; 0x4ad4 <__floatsisf+0x6c>
    4aca:	9a 95       	dec	r25
    4acc:	66 0f       	add	r22, r22
    4ace:	77 1f       	adc	r23, r23
    4ad0:	88 1f       	adc	r24, r24
    4ad2:	da f7       	brpl	.-10     	; 0x4aca <__floatsisf+0x62>
    4ad4:	88 0f       	add	r24, r24
    4ad6:	96 95       	lsr	r25
    4ad8:	87 95       	ror	r24
    4ada:	97 f9       	bld	r25, 7
    4adc:	08 95       	ret

00004ade <__fp_inf>:
    4ade:	97 f9       	bld	r25, 7
    4ae0:	9f 67       	ori	r25, 0x7F	; 127
    4ae2:	80 e8       	ldi	r24, 0x80	; 128
    4ae4:	70 e0       	ldi	r23, 0x00	; 0
    4ae6:	60 e0       	ldi	r22, 0x00	; 0
    4ae8:	08 95       	ret

00004aea <__fp_nan>:
    4aea:	9f ef       	ldi	r25, 0xFF	; 255
    4aec:	80 ec       	ldi	r24, 0xC0	; 192
    4aee:	08 95       	ret

00004af0 <__fp_pscA>:
    4af0:	00 24       	eor	r0, r0
    4af2:	0a 94       	dec	r0
    4af4:	16 16       	cp	r1, r22
    4af6:	17 06       	cpc	r1, r23
    4af8:	18 06       	cpc	r1, r24
    4afa:	09 06       	cpc	r0, r25
    4afc:	08 95       	ret

00004afe <__fp_pscB>:
    4afe:	00 24       	eor	r0, r0
    4b00:	0a 94       	dec	r0
    4b02:	12 16       	cp	r1, r18
    4b04:	13 06       	cpc	r1, r19
    4b06:	14 06       	cpc	r1, r20
    4b08:	05 06       	cpc	r0, r21
    4b0a:	08 95       	ret

00004b0c <__fp_round>:
    4b0c:	09 2e       	mov	r0, r25
    4b0e:	03 94       	inc	r0
    4b10:	00 0c       	add	r0, r0
    4b12:	11 f4       	brne	.+4      	; 0x4b18 <__fp_round+0xc>
    4b14:	88 23       	and	r24, r24
    4b16:	52 f0       	brmi	.+20     	; 0x4b2c <__fp_round+0x20>
    4b18:	bb 0f       	add	r27, r27
    4b1a:	40 f4       	brcc	.+16     	; 0x4b2c <__fp_round+0x20>
    4b1c:	bf 2b       	or	r27, r31
    4b1e:	11 f4       	brne	.+4      	; 0x4b24 <__fp_round+0x18>
    4b20:	60 ff       	sbrs	r22, 0
    4b22:	04 c0       	rjmp	.+8      	; 0x4b2c <__fp_round+0x20>
    4b24:	6f 5f       	subi	r22, 0xFF	; 255
    4b26:	7f 4f       	sbci	r23, 0xFF	; 255
    4b28:	8f 4f       	sbci	r24, 0xFF	; 255
    4b2a:	9f 4f       	sbci	r25, 0xFF	; 255
    4b2c:	08 95       	ret

00004b2e <__fp_split3>:
    4b2e:	57 fd       	sbrc	r21, 7
    4b30:	90 58       	subi	r25, 0x80	; 128
    4b32:	44 0f       	add	r20, r20
    4b34:	55 1f       	adc	r21, r21
    4b36:	59 f0       	breq	.+22     	; 0x4b4e <__fp_splitA+0x10>
    4b38:	5f 3f       	cpi	r21, 0xFF	; 255
    4b3a:	71 f0       	breq	.+28     	; 0x4b58 <__fp_splitA+0x1a>
    4b3c:	47 95       	ror	r20

00004b3e <__fp_splitA>:
    4b3e:	88 0f       	add	r24, r24
    4b40:	97 fb       	bst	r25, 7
    4b42:	99 1f       	adc	r25, r25
    4b44:	61 f0       	breq	.+24     	; 0x4b5e <__fp_splitA+0x20>
    4b46:	9f 3f       	cpi	r25, 0xFF	; 255
    4b48:	79 f0       	breq	.+30     	; 0x4b68 <__fp_splitA+0x2a>
    4b4a:	87 95       	ror	r24
    4b4c:	08 95       	ret
    4b4e:	12 16       	cp	r1, r18
    4b50:	13 06       	cpc	r1, r19
    4b52:	14 06       	cpc	r1, r20
    4b54:	55 1f       	adc	r21, r21
    4b56:	f2 cf       	rjmp	.-28     	; 0x4b3c <__fp_split3+0xe>
    4b58:	46 95       	lsr	r20
    4b5a:	f1 df       	rcall	.-30     	; 0x4b3e <__fp_splitA>
    4b5c:	08 c0       	rjmp	.+16     	; 0x4b6e <__fp_splitA+0x30>
    4b5e:	16 16       	cp	r1, r22
    4b60:	17 06       	cpc	r1, r23
    4b62:	18 06       	cpc	r1, r24
    4b64:	99 1f       	adc	r25, r25
    4b66:	f1 cf       	rjmp	.-30     	; 0x4b4a <__fp_splitA+0xc>
    4b68:	86 95       	lsr	r24
    4b6a:	71 05       	cpc	r23, r1
    4b6c:	61 05       	cpc	r22, r1
    4b6e:	08 94       	sec
    4b70:	08 95       	ret

00004b72 <__fp_zero>:
    4b72:	e8 94       	clt

00004b74 <__fp_szero>:
    4b74:	bb 27       	eor	r27, r27
    4b76:	66 27       	eor	r22, r22
    4b78:	77 27       	eor	r23, r23
    4b7a:	cb 01       	movw	r24, r22
    4b7c:	97 f9       	bld	r25, 7
    4b7e:	08 95       	ret

00004b80 <__mulsf3>:
    4b80:	0b d0       	rcall	.+22     	; 0x4b98 <__mulsf3x>
    4b82:	c4 cf       	rjmp	.-120    	; 0x4b0c <__fp_round>
    4b84:	b5 df       	rcall	.-150    	; 0x4af0 <__fp_pscA>
    4b86:	28 f0       	brcs	.+10     	; 0x4b92 <__mulsf3+0x12>
    4b88:	ba df       	rcall	.-140    	; 0x4afe <__fp_pscB>
    4b8a:	18 f0       	brcs	.+6      	; 0x4b92 <__mulsf3+0x12>
    4b8c:	95 23       	and	r25, r21
    4b8e:	09 f0       	breq	.+2      	; 0x4b92 <__mulsf3+0x12>
    4b90:	a6 cf       	rjmp	.-180    	; 0x4ade <__fp_inf>
    4b92:	ab cf       	rjmp	.-170    	; 0x4aea <__fp_nan>
    4b94:	11 24       	eor	r1, r1
    4b96:	ee cf       	rjmp	.-36     	; 0x4b74 <__fp_szero>

00004b98 <__mulsf3x>:
    4b98:	ca df       	rcall	.-108    	; 0x4b2e <__fp_split3>
    4b9a:	a0 f3       	brcs	.-24     	; 0x4b84 <__mulsf3+0x4>

00004b9c <__mulsf3_pse>:
    4b9c:	95 9f       	mul	r25, r21
    4b9e:	d1 f3       	breq	.-12     	; 0x4b94 <__mulsf3+0x14>
    4ba0:	95 0f       	add	r25, r21
    4ba2:	50 e0       	ldi	r21, 0x00	; 0
    4ba4:	55 1f       	adc	r21, r21
    4ba6:	62 9f       	mul	r22, r18
    4ba8:	f0 01       	movw	r30, r0
    4baa:	72 9f       	mul	r23, r18
    4bac:	bb 27       	eor	r27, r27
    4bae:	f0 0d       	add	r31, r0
    4bb0:	b1 1d       	adc	r27, r1
    4bb2:	63 9f       	mul	r22, r19
    4bb4:	aa 27       	eor	r26, r26
    4bb6:	f0 0d       	add	r31, r0
    4bb8:	b1 1d       	adc	r27, r1
    4bba:	aa 1f       	adc	r26, r26
    4bbc:	64 9f       	mul	r22, r20
    4bbe:	66 27       	eor	r22, r22
    4bc0:	b0 0d       	add	r27, r0
    4bc2:	a1 1d       	adc	r26, r1
    4bc4:	66 1f       	adc	r22, r22
    4bc6:	82 9f       	mul	r24, r18
    4bc8:	22 27       	eor	r18, r18
    4bca:	b0 0d       	add	r27, r0
    4bcc:	a1 1d       	adc	r26, r1
    4bce:	62 1f       	adc	r22, r18
    4bd0:	73 9f       	mul	r23, r19
    4bd2:	b0 0d       	add	r27, r0
    4bd4:	a1 1d       	adc	r26, r1
    4bd6:	62 1f       	adc	r22, r18
    4bd8:	83 9f       	mul	r24, r19
    4bda:	a0 0d       	add	r26, r0
    4bdc:	61 1d       	adc	r22, r1
    4bde:	22 1f       	adc	r18, r18
    4be0:	74 9f       	mul	r23, r20
    4be2:	33 27       	eor	r19, r19
    4be4:	a0 0d       	add	r26, r0
    4be6:	61 1d       	adc	r22, r1
    4be8:	23 1f       	adc	r18, r19
    4bea:	84 9f       	mul	r24, r20
    4bec:	60 0d       	add	r22, r0
    4bee:	21 1d       	adc	r18, r1
    4bf0:	82 2f       	mov	r24, r18
    4bf2:	76 2f       	mov	r23, r22
    4bf4:	6a 2f       	mov	r22, r26
    4bf6:	11 24       	eor	r1, r1
    4bf8:	9f 57       	subi	r25, 0x7F	; 127
    4bfa:	50 40       	sbci	r21, 0x00	; 0
    4bfc:	8a f0       	brmi	.+34     	; 0x4c20 <__mulsf3_pse+0x84>
    4bfe:	e1 f0       	breq	.+56     	; 0x4c38 <__mulsf3_pse+0x9c>
    4c00:	88 23       	and	r24, r24
    4c02:	4a f0       	brmi	.+18     	; 0x4c16 <__mulsf3_pse+0x7a>
    4c04:	ee 0f       	add	r30, r30
    4c06:	ff 1f       	adc	r31, r31
    4c08:	bb 1f       	adc	r27, r27
    4c0a:	66 1f       	adc	r22, r22
    4c0c:	77 1f       	adc	r23, r23
    4c0e:	88 1f       	adc	r24, r24
    4c10:	91 50       	subi	r25, 0x01	; 1
    4c12:	50 40       	sbci	r21, 0x00	; 0
    4c14:	a9 f7       	brne	.-22     	; 0x4c00 <__mulsf3_pse+0x64>
    4c16:	9e 3f       	cpi	r25, 0xFE	; 254
    4c18:	51 05       	cpc	r21, r1
    4c1a:	70 f0       	brcs	.+28     	; 0x4c38 <__mulsf3_pse+0x9c>
    4c1c:	60 cf       	rjmp	.-320    	; 0x4ade <__fp_inf>
    4c1e:	aa cf       	rjmp	.-172    	; 0x4b74 <__fp_szero>
    4c20:	5f 3f       	cpi	r21, 0xFF	; 255
    4c22:	ec f3       	brlt	.-6      	; 0x4c1e <__mulsf3_pse+0x82>
    4c24:	98 3e       	cpi	r25, 0xE8	; 232
    4c26:	dc f3       	brlt	.-10     	; 0x4c1e <__mulsf3_pse+0x82>
    4c28:	86 95       	lsr	r24
    4c2a:	77 95       	ror	r23
    4c2c:	67 95       	ror	r22
    4c2e:	b7 95       	ror	r27
    4c30:	f7 95       	ror	r31
    4c32:	e7 95       	ror	r30
    4c34:	9f 5f       	subi	r25, 0xFF	; 255
    4c36:	c1 f7       	brne	.-16     	; 0x4c28 <__mulsf3_pse+0x8c>
    4c38:	fe 2b       	or	r31, r30
    4c3a:	88 0f       	add	r24, r24
    4c3c:	91 1d       	adc	r25, r1
    4c3e:	96 95       	lsr	r25
    4c40:	87 95       	ror	r24
    4c42:	97 f9       	bld	r25, 7
    4c44:	08 95       	ret

00004c46 <__udivmodsi4>:
    4c46:	a1 e2       	ldi	r26, 0x21	; 33
    4c48:	1a 2e       	mov	r1, r26
    4c4a:	aa 1b       	sub	r26, r26
    4c4c:	bb 1b       	sub	r27, r27
    4c4e:	fd 01       	movw	r30, r26
    4c50:	0d c0       	rjmp	.+26     	; 0x4c6c <__udivmodsi4_ep>

00004c52 <__udivmodsi4_loop>:
    4c52:	aa 1f       	adc	r26, r26
    4c54:	bb 1f       	adc	r27, r27
    4c56:	ee 1f       	adc	r30, r30
    4c58:	ff 1f       	adc	r31, r31
    4c5a:	a2 17       	cp	r26, r18
    4c5c:	b3 07       	cpc	r27, r19
    4c5e:	e4 07       	cpc	r30, r20
    4c60:	f5 07       	cpc	r31, r21
    4c62:	20 f0       	brcs	.+8      	; 0x4c6c <__udivmodsi4_ep>
    4c64:	a2 1b       	sub	r26, r18
    4c66:	b3 0b       	sbc	r27, r19
    4c68:	e4 0b       	sbc	r30, r20
    4c6a:	f5 0b       	sbc	r31, r21

00004c6c <__udivmodsi4_ep>:
    4c6c:	66 1f       	adc	r22, r22
    4c6e:	77 1f       	adc	r23, r23
    4c70:	88 1f       	adc	r24, r24
    4c72:	99 1f       	adc	r25, r25
    4c74:	1a 94       	dec	r1
    4c76:	69 f7       	brne	.-38     	; 0x4c52 <__udivmodsi4_loop>
    4c78:	60 95       	com	r22
    4c7a:	70 95       	com	r23
    4c7c:	80 95       	com	r24
    4c7e:	90 95       	com	r25
    4c80:	9b 01       	movw	r18, r22
    4c82:	ac 01       	movw	r20, r24
    4c84:	bd 01       	movw	r22, r26
    4c86:	cf 01       	movw	r24, r30
    4c88:	08 95       	ret

00004c8a <__tablejump2__>:
    4c8a:	ee 0f       	add	r30, r30
    4c8c:	ff 1f       	adc	r31, r31
    4c8e:	88 1f       	adc	r24, r24
    4c90:	8b bf       	out	0x3b, r24	; 59
    4c92:	07 90       	elpm	r0, Z+
    4c94:	f6 91       	elpm	r31, Z
    4c96:	e0 2d       	mov	r30, r0
    4c98:	19 94       	eijmp

00004c9a <calloc>:
    4c9a:	0f 93       	push	r16
    4c9c:	1f 93       	push	r17
    4c9e:	cf 93       	push	r28
    4ca0:	df 93       	push	r29
    4ca2:	86 9f       	mul	r24, r22
    4ca4:	80 01       	movw	r16, r0
    4ca6:	87 9f       	mul	r24, r23
    4ca8:	10 0d       	add	r17, r0
    4caa:	96 9f       	mul	r25, r22
    4cac:	10 0d       	add	r17, r0
    4cae:	11 24       	eor	r1, r1
    4cb0:	c8 01       	movw	r24, r16
    4cb2:	0d d0       	rcall	.+26     	; 0x4cce <malloc>
    4cb4:	ec 01       	movw	r28, r24
    4cb6:	00 97       	sbiw	r24, 0x00	; 0
    4cb8:	21 f0       	breq	.+8      	; 0x4cc2 <calloc+0x28>
    4cba:	a8 01       	movw	r20, r16
    4cbc:	60 e0       	ldi	r22, 0x00	; 0
    4cbe:	70 e0       	ldi	r23, 0x00	; 0
    4cc0:	34 d1       	rcall	.+616    	; 0x4f2a <memset>
    4cc2:	ce 01       	movw	r24, r28
    4cc4:	df 91       	pop	r29
    4cc6:	cf 91       	pop	r28
    4cc8:	1f 91       	pop	r17
    4cca:	0f 91       	pop	r16
    4ccc:	08 95       	ret

00004cce <malloc>:
    4cce:	0f 93       	push	r16
    4cd0:	1f 93       	push	r17
    4cd2:	cf 93       	push	r28
    4cd4:	df 93       	push	r29
    4cd6:	82 30       	cpi	r24, 0x02	; 2
    4cd8:	91 05       	cpc	r25, r1
    4cda:	10 f4       	brcc	.+4      	; 0x4ce0 <malloc+0x12>
    4cdc:	82 e0       	ldi	r24, 0x02	; 2
    4cde:	90 e0       	ldi	r25, 0x00	; 0
    4ce0:	e0 91 af 14 	lds	r30, 0x14AF	; 0x8014af <__flp>
    4ce4:	f0 91 b0 14 	lds	r31, 0x14B0	; 0x8014b0 <__flp+0x1>
    4ce8:	20 e0       	ldi	r18, 0x00	; 0
    4cea:	30 e0       	ldi	r19, 0x00	; 0
    4cec:	a0 e0       	ldi	r26, 0x00	; 0
    4cee:	b0 e0       	ldi	r27, 0x00	; 0
    4cf0:	30 97       	sbiw	r30, 0x00	; 0
    4cf2:	19 f1       	breq	.+70     	; 0x4d3a <malloc+0x6c>
    4cf4:	40 81       	ld	r20, Z
    4cf6:	51 81       	ldd	r21, Z+1	; 0x01
    4cf8:	02 81       	ldd	r16, Z+2	; 0x02
    4cfa:	13 81       	ldd	r17, Z+3	; 0x03
    4cfc:	48 17       	cp	r20, r24
    4cfe:	59 07       	cpc	r21, r25
    4d00:	c8 f0       	brcs	.+50     	; 0x4d34 <malloc+0x66>
    4d02:	84 17       	cp	r24, r20
    4d04:	95 07       	cpc	r25, r21
    4d06:	69 f4       	brne	.+26     	; 0x4d22 <malloc+0x54>
    4d08:	10 97       	sbiw	r26, 0x00	; 0
    4d0a:	31 f0       	breq	.+12     	; 0x4d18 <malloc+0x4a>
    4d0c:	12 96       	adiw	r26, 0x02	; 2
    4d0e:	0c 93       	st	X, r16
    4d10:	12 97       	sbiw	r26, 0x02	; 2
    4d12:	13 96       	adiw	r26, 0x03	; 3
    4d14:	1c 93       	st	X, r17
    4d16:	27 c0       	rjmp	.+78     	; 0x4d66 <malloc+0x98>
    4d18:	00 93 af 14 	sts	0x14AF, r16	; 0x8014af <__flp>
    4d1c:	10 93 b0 14 	sts	0x14B0, r17	; 0x8014b0 <__flp+0x1>
    4d20:	22 c0       	rjmp	.+68     	; 0x4d66 <malloc+0x98>
    4d22:	21 15       	cp	r18, r1
    4d24:	31 05       	cpc	r19, r1
    4d26:	19 f0       	breq	.+6      	; 0x4d2e <malloc+0x60>
    4d28:	42 17       	cp	r20, r18
    4d2a:	53 07       	cpc	r21, r19
    4d2c:	18 f4       	brcc	.+6      	; 0x4d34 <malloc+0x66>
    4d2e:	9a 01       	movw	r18, r20
    4d30:	bd 01       	movw	r22, r26
    4d32:	ef 01       	movw	r28, r30
    4d34:	df 01       	movw	r26, r30
    4d36:	f8 01       	movw	r30, r16
    4d38:	db cf       	rjmp	.-74     	; 0x4cf0 <malloc+0x22>
    4d3a:	21 15       	cp	r18, r1
    4d3c:	31 05       	cpc	r19, r1
    4d3e:	f9 f0       	breq	.+62     	; 0x4d7e <malloc+0xb0>
    4d40:	28 1b       	sub	r18, r24
    4d42:	39 0b       	sbc	r19, r25
    4d44:	24 30       	cpi	r18, 0x04	; 4
    4d46:	31 05       	cpc	r19, r1
    4d48:	80 f4       	brcc	.+32     	; 0x4d6a <malloc+0x9c>
    4d4a:	8a 81       	ldd	r24, Y+2	; 0x02
    4d4c:	9b 81       	ldd	r25, Y+3	; 0x03
    4d4e:	61 15       	cp	r22, r1
    4d50:	71 05       	cpc	r23, r1
    4d52:	21 f0       	breq	.+8      	; 0x4d5c <malloc+0x8e>
    4d54:	fb 01       	movw	r30, r22
    4d56:	93 83       	std	Z+3, r25	; 0x03
    4d58:	82 83       	std	Z+2, r24	; 0x02
    4d5a:	04 c0       	rjmp	.+8      	; 0x4d64 <malloc+0x96>
    4d5c:	90 93 b0 14 	sts	0x14B0, r25	; 0x8014b0 <__flp+0x1>
    4d60:	80 93 af 14 	sts	0x14AF, r24	; 0x8014af <__flp>
    4d64:	fe 01       	movw	r30, r28
    4d66:	32 96       	adiw	r30, 0x02	; 2
    4d68:	44 c0       	rjmp	.+136    	; 0x4df2 <malloc+0x124>
    4d6a:	fe 01       	movw	r30, r28
    4d6c:	e2 0f       	add	r30, r18
    4d6e:	f3 1f       	adc	r31, r19
    4d70:	81 93       	st	Z+, r24
    4d72:	91 93       	st	Z+, r25
    4d74:	22 50       	subi	r18, 0x02	; 2
    4d76:	31 09       	sbc	r19, r1
    4d78:	39 83       	std	Y+1, r19	; 0x01
    4d7a:	28 83       	st	Y, r18
    4d7c:	3a c0       	rjmp	.+116    	; 0x4df2 <malloc+0x124>
    4d7e:	20 91 ad 14 	lds	r18, 0x14AD	; 0x8014ad <__brkval>
    4d82:	30 91 ae 14 	lds	r19, 0x14AE	; 0x8014ae <__brkval+0x1>
    4d86:	23 2b       	or	r18, r19
    4d88:	41 f4       	brne	.+16     	; 0x4d9a <malloc+0xcc>
    4d8a:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    4d8e:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    4d92:	30 93 ae 14 	sts	0x14AE, r19	; 0x8014ae <__brkval+0x1>
    4d96:	20 93 ad 14 	sts	0x14AD, r18	; 0x8014ad <__brkval>
    4d9a:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    4d9e:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    4da2:	21 15       	cp	r18, r1
    4da4:	31 05       	cpc	r19, r1
    4da6:	41 f4       	brne	.+16     	; 0x4db8 <malloc+0xea>
    4da8:	2d b7       	in	r18, 0x3d	; 61
    4daa:	3e b7       	in	r19, 0x3e	; 62
    4dac:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    4db0:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    4db4:	24 1b       	sub	r18, r20
    4db6:	35 0b       	sbc	r19, r21
    4db8:	e0 91 ad 14 	lds	r30, 0x14AD	; 0x8014ad <__brkval>
    4dbc:	f0 91 ae 14 	lds	r31, 0x14AE	; 0x8014ae <__brkval+0x1>
    4dc0:	e2 17       	cp	r30, r18
    4dc2:	f3 07       	cpc	r31, r19
    4dc4:	a0 f4       	brcc	.+40     	; 0x4dee <malloc+0x120>
    4dc6:	2e 1b       	sub	r18, r30
    4dc8:	3f 0b       	sbc	r19, r31
    4dca:	28 17       	cp	r18, r24
    4dcc:	39 07       	cpc	r19, r25
    4dce:	78 f0       	brcs	.+30     	; 0x4dee <malloc+0x120>
    4dd0:	ac 01       	movw	r20, r24
    4dd2:	4e 5f       	subi	r20, 0xFE	; 254
    4dd4:	5f 4f       	sbci	r21, 0xFF	; 255
    4dd6:	24 17       	cp	r18, r20
    4dd8:	35 07       	cpc	r19, r21
    4dda:	48 f0       	brcs	.+18     	; 0x4dee <malloc+0x120>
    4ddc:	4e 0f       	add	r20, r30
    4dde:	5f 1f       	adc	r21, r31
    4de0:	50 93 ae 14 	sts	0x14AE, r21	; 0x8014ae <__brkval+0x1>
    4de4:	40 93 ad 14 	sts	0x14AD, r20	; 0x8014ad <__brkval>
    4de8:	81 93       	st	Z+, r24
    4dea:	91 93       	st	Z+, r25
    4dec:	02 c0       	rjmp	.+4      	; 0x4df2 <malloc+0x124>
    4dee:	e0 e0       	ldi	r30, 0x00	; 0
    4df0:	f0 e0       	ldi	r31, 0x00	; 0
    4df2:	cf 01       	movw	r24, r30
    4df4:	df 91       	pop	r29
    4df6:	cf 91       	pop	r28
    4df8:	1f 91       	pop	r17
    4dfa:	0f 91       	pop	r16
    4dfc:	08 95       	ret

00004dfe <free>:
    4dfe:	cf 93       	push	r28
    4e00:	df 93       	push	r29
    4e02:	00 97       	sbiw	r24, 0x00	; 0
    4e04:	09 f4       	brne	.+2      	; 0x4e08 <free+0xa>
    4e06:	81 c0       	rjmp	.+258    	; 0x4f0a <free+0x10c>
    4e08:	fc 01       	movw	r30, r24
    4e0a:	32 97       	sbiw	r30, 0x02	; 2
    4e0c:	13 82       	std	Z+3, r1	; 0x03
    4e0e:	12 82       	std	Z+2, r1	; 0x02
    4e10:	a0 91 af 14 	lds	r26, 0x14AF	; 0x8014af <__flp>
    4e14:	b0 91 b0 14 	lds	r27, 0x14B0	; 0x8014b0 <__flp+0x1>
    4e18:	10 97       	sbiw	r26, 0x00	; 0
    4e1a:	81 f4       	brne	.+32     	; 0x4e3c <free+0x3e>
    4e1c:	20 81       	ld	r18, Z
    4e1e:	31 81       	ldd	r19, Z+1	; 0x01
    4e20:	82 0f       	add	r24, r18
    4e22:	93 1f       	adc	r25, r19
    4e24:	20 91 ad 14 	lds	r18, 0x14AD	; 0x8014ad <__brkval>
    4e28:	30 91 ae 14 	lds	r19, 0x14AE	; 0x8014ae <__brkval+0x1>
    4e2c:	28 17       	cp	r18, r24
    4e2e:	39 07       	cpc	r19, r25
    4e30:	51 f5       	brne	.+84     	; 0x4e86 <free+0x88>
    4e32:	f0 93 ae 14 	sts	0x14AE, r31	; 0x8014ae <__brkval+0x1>
    4e36:	e0 93 ad 14 	sts	0x14AD, r30	; 0x8014ad <__brkval>
    4e3a:	67 c0       	rjmp	.+206    	; 0x4f0a <free+0x10c>
    4e3c:	ed 01       	movw	r28, r26
    4e3e:	20 e0       	ldi	r18, 0x00	; 0
    4e40:	30 e0       	ldi	r19, 0x00	; 0
    4e42:	ce 17       	cp	r28, r30
    4e44:	df 07       	cpc	r29, r31
    4e46:	40 f4       	brcc	.+16     	; 0x4e58 <free+0x5a>
    4e48:	4a 81       	ldd	r20, Y+2	; 0x02
    4e4a:	5b 81       	ldd	r21, Y+3	; 0x03
    4e4c:	9e 01       	movw	r18, r28
    4e4e:	41 15       	cp	r20, r1
    4e50:	51 05       	cpc	r21, r1
    4e52:	f1 f0       	breq	.+60     	; 0x4e90 <free+0x92>
    4e54:	ea 01       	movw	r28, r20
    4e56:	f5 cf       	rjmp	.-22     	; 0x4e42 <free+0x44>
    4e58:	d3 83       	std	Z+3, r29	; 0x03
    4e5a:	c2 83       	std	Z+2, r28	; 0x02
    4e5c:	40 81       	ld	r20, Z
    4e5e:	51 81       	ldd	r21, Z+1	; 0x01
    4e60:	84 0f       	add	r24, r20
    4e62:	95 1f       	adc	r25, r21
    4e64:	c8 17       	cp	r28, r24
    4e66:	d9 07       	cpc	r29, r25
    4e68:	59 f4       	brne	.+22     	; 0x4e80 <free+0x82>
    4e6a:	88 81       	ld	r24, Y
    4e6c:	99 81       	ldd	r25, Y+1	; 0x01
    4e6e:	84 0f       	add	r24, r20
    4e70:	95 1f       	adc	r25, r21
    4e72:	02 96       	adiw	r24, 0x02	; 2
    4e74:	91 83       	std	Z+1, r25	; 0x01
    4e76:	80 83       	st	Z, r24
    4e78:	8a 81       	ldd	r24, Y+2	; 0x02
    4e7a:	9b 81       	ldd	r25, Y+3	; 0x03
    4e7c:	93 83       	std	Z+3, r25	; 0x03
    4e7e:	82 83       	std	Z+2, r24	; 0x02
    4e80:	21 15       	cp	r18, r1
    4e82:	31 05       	cpc	r19, r1
    4e84:	29 f4       	brne	.+10     	; 0x4e90 <free+0x92>
    4e86:	f0 93 b0 14 	sts	0x14B0, r31	; 0x8014b0 <__flp+0x1>
    4e8a:	e0 93 af 14 	sts	0x14AF, r30	; 0x8014af <__flp>
    4e8e:	3d c0       	rjmp	.+122    	; 0x4f0a <free+0x10c>
    4e90:	e9 01       	movw	r28, r18
    4e92:	fb 83       	std	Y+3, r31	; 0x03
    4e94:	ea 83       	std	Y+2, r30	; 0x02
    4e96:	49 91       	ld	r20, Y+
    4e98:	59 91       	ld	r21, Y+
    4e9a:	c4 0f       	add	r28, r20
    4e9c:	d5 1f       	adc	r29, r21
    4e9e:	ec 17       	cp	r30, r28
    4ea0:	fd 07       	cpc	r31, r29
    4ea2:	61 f4       	brne	.+24     	; 0x4ebc <free+0xbe>
    4ea4:	80 81       	ld	r24, Z
    4ea6:	91 81       	ldd	r25, Z+1	; 0x01
    4ea8:	84 0f       	add	r24, r20
    4eaa:	95 1f       	adc	r25, r21
    4eac:	02 96       	adiw	r24, 0x02	; 2
    4eae:	e9 01       	movw	r28, r18
    4eb0:	99 83       	std	Y+1, r25	; 0x01
    4eb2:	88 83       	st	Y, r24
    4eb4:	82 81       	ldd	r24, Z+2	; 0x02
    4eb6:	93 81       	ldd	r25, Z+3	; 0x03
    4eb8:	9b 83       	std	Y+3, r25	; 0x03
    4eba:	8a 83       	std	Y+2, r24	; 0x02
    4ebc:	e0 e0       	ldi	r30, 0x00	; 0
    4ebe:	f0 e0       	ldi	r31, 0x00	; 0
    4ec0:	12 96       	adiw	r26, 0x02	; 2
    4ec2:	8d 91       	ld	r24, X+
    4ec4:	9c 91       	ld	r25, X
    4ec6:	13 97       	sbiw	r26, 0x03	; 3
    4ec8:	00 97       	sbiw	r24, 0x00	; 0
    4eca:	19 f0       	breq	.+6      	; 0x4ed2 <free+0xd4>
    4ecc:	fd 01       	movw	r30, r26
    4ece:	dc 01       	movw	r26, r24
    4ed0:	f7 cf       	rjmp	.-18     	; 0x4ec0 <free+0xc2>
    4ed2:	8d 91       	ld	r24, X+
    4ed4:	9c 91       	ld	r25, X
    4ed6:	11 97       	sbiw	r26, 0x01	; 1
    4ed8:	9d 01       	movw	r18, r26
    4eda:	2e 5f       	subi	r18, 0xFE	; 254
    4edc:	3f 4f       	sbci	r19, 0xFF	; 255
    4ede:	82 0f       	add	r24, r18
    4ee0:	93 1f       	adc	r25, r19
    4ee2:	20 91 ad 14 	lds	r18, 0x14AD	; 0x8014ad <__brkval>
    4ee6:	30 91 ae 14 	lds	r19, 0x14AE	; 0x8014ae <__brkval+0x1>
    4eea:	28 17       	cp	r18, r24
    4eec:	39 07       	cpc	r19, r25
    4eee:	69 f4       	brne	.+26     	; 0x4f0a <free+0x10c>
    4ef0:	30 97       	sbiw	r30, 0x00	; 0
    4ef2:	29 f4       	brne	.+10     	; 0x4efe <free+0x100>
    4ef4:	10 92 b0 14 	sts	0x14B0, r1	; 0x8014b0 <__flp+0x1>
    4ef8:	10 92 af 14 	sts	0x14AF, r1	; 0x8014af <__flp>
    4efc:	02 c0       	rjmp	.+4      	; 0x4f02 <free+0x104>
    4efe:	13 82       	std	Z+3, r1	; 0x03
    4f00:	12 82       	std	Z+2, r1	; 0x02
    4f02:	b0 93 ae 14 	sts	0x14AE, r27	; 0x8014ae <__brkval+0x1>
    4f06:	a0 93 ad 14 	sts	0x14AD, r26	; 0x8014ad <__brkval>
    4f0a:	df 91       	pop	r29
    4f0c:	cf 91       	pop	r28
    4f0e:	08 95       	ret

00004f10 <abort>:
    4f10:	81 e0       	ldi	r24, 0x01	; 1
    4f12:	90 e0       	ldi	r25, 0x00	; 0
    4f14:	f8 94       	cli
    4f16:	00 c3       	rjmp	.+1536   	; 0x5518 <_exit>

00004f18 <memcpy>:
    4f18:	fb 01       	movw	r30, r22
    4f1a:	dc 01       	movw	r26, r24
    4f1c:	02 c0       	rjmp	.+4      	; 0x4f22 <memcpy+0xa>
    4f1e:	01 90       	ld	r0, Z+
    4f20:	0d 92       	st	X+, r0
    4f22:	41 50       	subi	r20, 0x01	; 1
    4f24:	50 40       	sbci	r21, 0x00	; 0
    4f26:	d8 f7       	brcc	.-10     	; 0x4f1e <memcpy+0x6>
    4f28:	08 95       	ret

00004f2a <memset>:
    4f2a:	dc 01       	movw	r26, r24
    4f2c:	01 c0       	rjmp	.+2      	; 0x4f30 <memset+0x6>
    4f2e:	6d 93       	st	X+, r22
    4f30:	41 50       	subi	r20, 0x01	; 1
    4f32:	50 40       	sbci	r21, 0x00	; 0
    4f34:	e0 f7       	brcc	.-8      	; 0x4f2e <memset+0x4>
    4f36:	08 95       	ret

00004f38 <printf>:
    4f38:	cf 93       	push	r28
    4f3a:	df 93       	push	r29
    4f3c:	cd b7       	in	r28, 0x3d	; 61
    4f3e:	de b7       	in	r29, 0x3e	; 62
    4f40:	ae 01       	movw	r20, r28
    4f42:	4a 5f       	subi	r20, 0xFA	; 250
    4f44:	5f 4f       	sbci	r21, 0xFF	; 255
    4f46:	fa 01       	movw	r30, r20
    4f48:	61 91       	ld	r22, Z+
    4f4a:	71 91       	ld	r23, Z+
    4f4c:	af 01       	movw	r20, r30
    4f4e:	80 91 b3 14 	lds	r24, 0x14B3	; 0x8014b3 <__iob+0x2>
    4f52:	90 91 b4 14 	lds	r25, 0x14B4	; 0x8014b4 <__iob+0x3>
    4f56:	33 d0       	rcall	.+102    	; 0x4fbe <vfprintf>
    4f58:	df 91       	pop	r29
    4f5a:	cf 91       	pop	r28
    4f5c:	08 95       	ret

00004f5e <puts>:
    4f5e:	0f 93       	push	r16
    4f60:	1f 93       	push	r17
    4f62:	cf 93       	push	r28
    4f64:	df 93       	push	r29
    4f66:	e0 91 b3 14 	lds	r30, 0x14B3	; 0x8014b3 <__iob+0x2>
    4f6a:	f0 91 b4 14 	lds	r31, 0x14B4	; 0x8014b4 <__iob+0x3>
    4f6e:	23 81       	ldd	r18, Z+3	; 0x03
    4f70:	21 ff       	sbrs	r18, 1
    4f72:	1b c0       	rjmp	.+54     	; 0x4faa <puts+0x4c>
    4f74:	8c 01       	movw	r16, r24
    4f76:	d0 e0       	ldi	r29, 0x00	; 0
    4f78:	c0 e0       	ldi	r28, 0x00	; 0
    4f7a:	f8 01       	movw	r30, r16
    4f7c:	81 91       	ld	r24, Z+
    4f7e:	8f 01       	movw	r16, r30
    4f80:	60 91 b3 14 	lds	r22, 0x14B3	; 0x8014b3 <__iob+0x2>
    4f84:	70 91 b4 14 	lds	r23, 0x14B4	; 0x8014b4 <__iob+0x3>
    4f88:	db 01       	movw	r26, r22
    4f8a:	18 96       	adiw	r26, 0x08	; 8
    4f8c:	ed 91       	ld	r30, X+
    4f8e:	fc 91       	ld	r31, X
    4f90:	19 97       	sbiw	r26, 0x09	; 9
    4f92:	88 23       	and	r24, r24
    4f94:	31 f0       	breq	.+12     	; 0x4fa2 <puts+0x44>
    4f96:	19 95       	eicall
    4f98:	89 2b       	or	r24, r25
    4f9a:	79 f3       	breq	.-34     	; 0x4f7a <puts+0x1c>
    4f9c:	df ef       	ldi	r29, 0xFF	; 255
    4f9e:	cf ef       	ldi	r28, 0xFF	; 255
    4fa0:	ec cf       	rjmp	.-40     	; 0x4f7a <puts+0x1c>
    4fa2:	8a e0       	ldi	r24, 0x0A	; 10
    4fa4:	19 95       	eicall
    4fa6:	89 2b       	or	r24, r25
    4fa8:	19 f0       	breq	.+6      	; 0x4fb0 <puts+0x52>
    4faa:	8f ef       	ldi	r24, 0xFF	; 255
    4fac:	9f ef       	ldi	r25, 0xFF	; 255
    4fae:	02 c0       	rjmp	.+4      	; 0x4fb4 <puts+0x56>
    4fb0:	8d 2f       	mov	r24, r29
    4fb2:	9c 2f       	mov	r25, r28
    4fb4:	df 91       	pop	r29
    4fb6:	cf 91       	pop	r28
    4fb8:	1f 91       	pop	r17
    4fba:	0f 91       	pop	r16
    4fbc:	08 95       	ret

00004fbe <vfprintf>:
    4fbe:	2f 92       	push	r2
    4fc0:	3f 92       	push	r3
    4fc2:	4f 92       	push	r4
    4fc4:	5f 92       	push	r5
    4fc6:	6f 92       	push	r6
    4fc8:	7f 92       	push	r7
    4fca:	8f 92       	push	r8
    4fcc:	9f 92       	push	r9
    4fce:	af 92       	push	r10
    4fd0:	bf 92       	push	r11
    4fd2:	cf 92       	push	r12
    4fd4:	df 92       	push	r13
    4fd6:	ef 92       	push	r14
    4fd8:	ff 92       	push	r15
    4fda:	0f 93       	push	r16
    4fdc:	1f 93       	push	r17
    4fde:	cf 93       	push	r28
    4fe0:	df 93       	push	r29
    4fe2:	cd b7       	in	r28, 0x3d	; 61
    4fe4:	de b7       	in	r29, 0x3e	; 62
    4fe6:	2b 97       	sbiw	r28, 0x0b	; 11
    4fe8:	0f b6       	in	r0, 0x3f	; 63
    4fea:	f8 94       	cli
    4fec:	de bf       	out	0x3e, r29	; 62
    4fee:	0f be       	out	0x3f, r0	; 63
    4ff0:	cd bf       	out	0x3d, r28	; 61
    4ff2:	6c 01       	movw	r12, r24
    4ff4:	7b 01       	movw	r14, r22
    4ff6:	8a 01       	movw	r16, r20
    4ff8:	fc 01       	movw	r30, r24
    4ffa:	17 82       	std	Z+7, r1	; 0x07
    4ffc:	16 82       	std	Z+6, r1	; 0x06
    4ffe:	83 81       	ldd	r24, Z+3	; 0x03
    5000:	81 ff       	sbrs	r24, 1
    5002:	bf c1       	rjmp	.+894    	; 0x5382 <vfprintf+0x3c4>
    5004:	ce 01       	movw	r24, r28
    5006:	01 96       	adiw	r24, 0x01	; 1
    5008:	3c 01       	movw	r6, r24
    500a:	f6 01       	movw	r30, r12
    500c:	93 81       	ldd	r25, Z+3	; 0x03
    500e:	f7 01       	movw	r30, r14
    5010:	93 fd       	sbrc	r25, 3
    5012:	85 91       	lpm	r24, Z+
    5014:	93 ff       	sbrs	r25, 3
    5016:	81 91       	ld	r24, Z+
    5018:	7f 01       	movw	r14, r30
    501a:	88 23       	and	r24, r24
    501c:	09 f4       	brne	.+2      	; 0x5020 <vfprintf+0x62>
    501e:	ad c1       	rjmp	.+858    	; 0x537a <vfprintf+0x3bc>
    5020:	85 32       	cpi	r24, 0x25	; 37
    5022:	39 f4       	brne	.+14     	; 0x5032 <vfprintf+0x74>
    5024:	93 fd       	sbrc	r25, 3
    5026:	85 91       	lpm	r24, Z+
    5028:	93 ff       	sbrs	r25, 3
    502a:	81 91       	ld	r24, Z+
    502c:	7f 01       	movw	r14, r30
    502e:	85 32       	cpi	r24, 0x25	; 37
    5030:	21 f4       	brne	.+8      	; 0x503a <vfprintf+0x7c>
    5032:	b6 01       	movw	r22, r12
    5034:	90 e0       	ldi	r25, 0x00	; 0
    5036:	d6 d1       	rcall	.+940    	; 0x53e4 <fputc>
    5038:	e8 cf       	rjmp	.-48     	; 0x500a <vfprintf+0x4c>
    503a:	91 2c       	mov	r9, r1
    503c:	21 2c       	mov	r2, r1
    503e:	31 2c       	mov	r3, r1
    5040:	ff e1       	ldi	r31, 0x1F	; 31
    5042:	f3 15       	cp	r31, r3
    5044:	d8 f0       	brcs	.+54     	; 0x507c <vfprintf+0xbe>
    5046:	8b 32       	cpi	r24, 0x2B	; 43
    5048:	79 f0       	breq	.+30     	; 0x5068 <vfprintf+0xaa>
    504a:	38 f4       	brcc	.+14     	; 0x505a <vfprintf+0x9c>
    504c:	80 32       	cpi	r24, 0x20	; 32
    504e:	79 f0       	breq	.+30     	; 0x506e <vfprintf+0xb0>
    5050:	83 32       	cpi	r24, 0x23	; 35
    5052:	a1 f4       	brne	.+40     	; 0x507c <vfprintf+0xbe>
    5054:	23 2d       	mov	r18, r3
    5056:	20 61       	ori	r18, 0x10	; 16
    5058:	1d c0       	rjmp	.+58     	; 0x5094 <vfprintf+0xd6>
    505a:	8d 32       	cpi	r24, 0x2D	; 45
    505c:	61 f0       	breq	.+24     	; 0x5076 <vfprintf+0xb8>
    505e:	80 33       	cpi	r24, 0x30	; 48
    5060:	69 f4       	brne	.+26     	; 0x507c <vfprintf+0xbe>
    5062:	23 2d       	mov	r18, r3
    5064:	21 60       	ori	r18, 0x01	; 1
    5066:	16 c0       	rjmp	.+44     	; 0x5094 <vfprintf+0xd6>
    5068:	83 2d       	mov	r24, r3
    506a:	82 60       	ori	r24, 0x02	; 2
    506c:	38 2e       	mov	r3, r24
    506e:	e3 2d       	mov	r30, r3
    5070:	e4 60       	ori	r30, 0x04	; 4
    5072:	3e 2e       	mov	r3, r30
    5074:	2a c0       	rjmp	.+84     	; 0x50ca <vfprintf+0x10c>
    5076:	f3 2d       	mov	r31, r3
    5078:	f8 60       	ori	r31, 0x08	; 8
    507a:	1d c0       	rjmp	.+58     	; 0x50b6 <vfprintf+0xf8>
    507c:	37 fc       	sbrc	r3, 7
    507e:	2d c0       	rjmp	.+90     	; 0x50da <vfprintf+0x11c>
    5080:	20 ed       	ldi	r18, 0xD0	; 208
    5082:	28 0f       	add	r18, r24
    5084:	2a 30       	cpi	r18, 0x0A	; 10
    5086:	40 f0       	brcs	.+16     	; 0x5098 <vfprintf+0xda>
    5088:	8e 32       	cpi	r24, 0x2E	; 46
    508a:	b9 f4       	brne	.+46     	; 0x50ba <vfprintf+0xfc>
    508c:	36 fc       	sbrc	r3, 6
    508e:	75 c1       	rjmp	.+746    	; 0x537a <vfprintf+0x3bc>
    5090:	23 2d       	mov	r18, r3
    5092:	20 64       	ori	r18, 0x40	; 64
    5094:	32 2e       	mov	r3, r18
    5096:	19 c0       	rjmp	.+50     	; 0x50ca <vfprintf+0x10c>
    5098:	36 fe       	sbrs	r3, 6
    509a:	06 c0       	rjmp	.+12     	; 0x50a8 <vfprintf+0xea>
    509c:	8a e0       	ldi	r24, 0x0A	; 10
    509e:	98 9e       	mul	r9, r24
    50a0:	20 0d       	add	r18, r0
    50a2:	11 24       	eor	r1, r1
    50a4:	92 2e       	mov	r9, r18
    50a6:	11 c0       	rjmp	.+34     	; 0x50ca <vfprintf+0x10c>
    50a8:	ea e0       	ldi	r30, 0x0A	; 10
    50aa:	2e 9e       	mul	r2, r30
    50ac:	20 0d       	add	r18, r0
    50ae:	11 24       	eor	r1, r1
    50b0:	22 2e       	mov	r2, r18
    50b2:	f3 2d       	mov	r31, r3
    50b4:	f0 62       	ori	r31, 0x20	; 32
    50b6:	3f 2e       	mov	r3, r31
    50b8:	08 c0       	rjmp	.+16     	; 0x50ca <vfprintf+0x10c>
    50ba:	8c 36       	cpi	r24, 0x6C	; 108
    50bc:	21 f4       	brne	.+8      	; 0x50c6 <vfprintf+0x108>
    50be:	83 2d       	mov	r24, r3
    50c0:	80 68       	ori	r24, 0x80	; 128
    50c2:	38 2e       	mov	r3, r24
    50c4:	02 c0       	rjmp	.+4      	; 0x50ca <vfprintf+0x10c>
    50c6:	88 36       	cpi	r24, 0x68	; 104
    50c8:	41 f4       	brne	.+16     	; 0x50da <vfprintf+0x11c>
    50ca:	f7 01       	movw	r30, r14
    50cc:	93 fd       	sbrc	r25, 3
    50ce:	85 91       	lpm	r24, Z+
    50d0:	93 ff       	sbrs	r25, 3
    50d2:	81 91       	ld	r24, Z+
    50d4:	7f 01       	movw	r14, r30
    50d6:	81 11       	cpse	r24, r1
    50d8:	b3 cf       	rjmp	.-154    	; 0x5040 <vfprintf+0x82>
    50da:	98 2f       	mov	r25, r24
    50dc:	9f 7d       	andi	r25, 0xDF	; 223
    50de:	95 54       	subi	r25, 0x45	; 69
    50e0:	93 30       	cpi	r25, 0x03	; 3
    50e2:	28 f4       	brcc	.+10     	; 0x50ee <vfprintf+0x130>
    50e4:	0c 5f       	subi	r16, 0xFC	; 252
    50e6:	1f 4f       	sbci	r17, 0xFF	; 255
    50e8:	9f e3       	ldi	r25, 0x3F	; 63
    50ea:	99 83       	std	Y+1, r25	; 0x01
    50ec:	0d c0       	rjmp	.+26     	; 0x5108 <vfprintf+0x14a>
    50ee:	83 36       	cpi	r24, 0x63	; 99
    50f0:	31 f0       	breq	.+12     	; 0x50fe <vfprintf+0x140>
    50f2:	83 37       	cpi	r24, 0x73	; 115
    50f4:	71 f0       	breq	.+28     	; 0x5112 <vfprintf+0x154>
    50f6:	83 35       	cpi	r24, 0x53	; 83
    50f8:	09 f0       	breq	.+2      	; 0x50fc <vfprintf+0x13e>
    50fa:	55 c0       	rjmp	.+170    	; 0x51a6 <vfprintf+0x1e8>
    50fc:	20 c0       	rjmp	.+64     	; 0x513e <vfprintf+0x180>
    50fe:	f8 01       	movw	r30, r16
    5100:	80 81       	ld	r24, Z
    5102:	89 83       	std	Y+1, r24	; 0x01
    5104:	0e 5f       	subi	r16, 0xFE	; 254
    5106:	1f 4f       	sbci	r17, 0xFF	; 255
    5108:	88 24       	eor	r8, r8
    510a:	83 94       	inc	r8
    510c:	91 2c       	mov	r9, r1
    510e:	53 01       	movw	r10, r6
    5110:	12 c0       	rjmp	.+36     	; 0x5136 <vfprintf+0x178>
    5112:	28 01       	movw	r4, r16
    5114:	f2 e0       	ldi	r31, 0x02	; 2
    5116:	4f 0e       	add	r4, r31
    5118:	51 1c       	adc	r5, r1
    511a:	f8 01       	movw	r30, r16
    511c:	a0 80       	ld	r10, Z
    511e:	b1 80       	ldd	r11, Z+1	; 0x01
    5120:	36 fe       	sbrs	r3, 6
    5122:	03 c0       	rjmp	.+6      	; 0x512a <vfprintf+0x16c>
    5124:	69 2d       	mov	r22, r9
    5126:	70 e0       	ldi	r23, 0x00	; 0
    5128:	02 c0       	rjmp	.+4      	; 0x512e <vfprintf+0x170>
    512a:	6f ef       	ldi	r22, 0xFF	; 255
    512c:	7f ef       	ldi	r23, 0xFF	; 255
    512e:	c5 01       	movw	r24, r10
    5130:	4e d1       	rcall	.+668    	; 0x53ce <strnlen>
    5132:	4c 01       	movw	r8, r24
    5134:	82 01       	movw	r16, r4
    5136:	f3 2d       	mov	r31, r3
    5138:	ff 77       	andi	r31, 0x7F	; 127
    513a:	3f 2e       	mov	r3, r31
    513c:	15 c0       	rjmp	.+42     	; 0x5168 <vfprintf+0x1aa>
    513e:	28 01       	movw	r4, r16
    5140:	22 e0       	ldi	r18, 0x02	; 2
    5142:	42 0e       	add	r4, r18
    5144:	51 1c       	adc	r5, r1
    5146:	f8 01       	movw	r30, r16
    5148:	a0 80       	ld	r10, Z
    514a:	b1 80       	ldd	r11, Z+1	; 0x01
    514c:	36 fe       	sbrs	r3, 6
    514e:	03 c0       	rjmp	.+6      	; 0x5156 <vfprintf+0x198>
    5150:	69 2d       	mov	r22, r9
    5152:	70 e0       	ldi	r23, 0x00	; 0
    5154:	02 c0       	rjmp	.+4      	; 0x515a <vfprintf+0x19c>
    5156:	6f ef       	ldi	r22, 0xFF	; 255
    5158:	7f ef       	ldi	r23, 0xFF	; 255
    515a:	c5 01       	movw	r24, r10
    515c:	2d d1       	rcall	.+602    	; 0x53b8 <strnlen_P>
    515e:	4c 01       	movw	r8, r24
    5160:	f3 2d       	mov	r31, r3
    5162:	f0 68       	ori	r31, 0x80	; 128
    5164:	3f 2e       	mov	r3, r31
    5166:	82 01       	movw	r16, r4
    5168:	33 fc       	sbrc	r3, 3
    516a:	19 c0       	rjmp	.+50     	; 0x519e <vfprintf+0x1e0>
    516c:	82 2d       	mov	r24, r2
    516e:	90 e0       	ldi	r25, 0x00	; 0
    5170:	88 16       	cp	r8, r24
    5172:	99 06       	cpc	r9, r25
    5174:	a0 f4       	brcc	.+40     	; 0x519e <vfprintf+0x1e0>
    5176:	b6 01       	movw	r22, r12
    5178:	80 e2       	ldi	r24, 0x20	; 32
    517a:	90 e0       	ldi	r25, 0x00	; 0
    517c:	33 d1       	rcall	.+614    	; 0x53e4 <fputc>
    517e:	2a 94       	dec	r2
    5180:	f5 cf       	rjmp	.-22     	; 0x516c <vfprintf+0x1ae>
    5182:	f5 01       	movw	r30, r10
    5184:	37 fc       	sbrc	r3, 7
    5186:	85 91       	lpm	r24, Z+
    5188:	37 fe       	sbrs	r3, 7
    518a:	81 91       	ld	r24, Z+
    518c:	5f 01       	movw	r10, r30
    518e:	b6 01       	movw	r22, r12
    5190:	90 e0       	ldi	r25, 0x00	; 0
    5192:	28 d1       	rcall	.+592    	; 0x53e4 <fputc>
    5194:	21 10       	cpse	r2, r1
    5196:	2a 94       	dec	r2
    5198:	21 e0       	ldi	r18, 0x01	; 1
    519a:	82 1a       	sub	r8, r18
    519c:	91 08       	sbc	r9, r1
    519e:	81 14       	cp	r8, r1
    51a0:	91 04       	cpc	r9, r1
    51a2:	79 f7       	brne	.-34     	; 0x5182 <vfprintf+0x1c4>
    51a4:	e1 c0       	rjmp	.+450    	; 0x5368 <vfprintf+0x3aa>
    51a6:	84 36       	cpi	r24, 0x64	; 100
    51a8:	11 f0       	breq	.+4      	; 0x51ae <vfprintf+0x1f0>
    51aa:	89 36       	cpi	r24, 0x69	; 105
    51ac:	39 f5       	brne	.+78     	; 0x51fc <vfprintf+0x23e>
    51ae:	f8 01       	movw	r30, r16
    51b0:	37 fe       	sbrs	r3, 7
    51b2:	07 c0       	rjmp	.+14     	; 0x51c2 <vfprintf+0x204>
    51b4:	60 81       	ld	r22, Z
    51b6:	71 81       	ldd	r23, Z+1	; 0x01
    51b8:	82 81       	ldd	r24, Z+2	; 0x02
    51ba:	93 81       	ldd	r25, Z+3	; 0x03
    51bc:	0c 5f       	subi	r16, 0xFC	; 252
    51be:	1f 4f       	sbci	r17, 0xFF	; 255
    51c0:	08 c0       	rjmp	.+16     	; 0x51d2 <vfprintf+0x214>
    51c2:	60 81       	ld	r22, Z
    51c4:	71 81       	ldd	r23, Z+1	; 0x01
    51c6:	07 2e       	mov	r0, r23
    51c8:	00 0c       	add	r0, r0
    51ca:	88 0b       	sbc	r24, r24
    51cc:	99 0b       	sbc	r25, r25
    51ce:	0e 5f       	subi	r16, 0xFE	; 254
    51d0:	1f 4f       	sbci	r17, 0xFF	; 255
    51d2:	f3 2d       	mov	r31, r3
    51d4:	ff 76       	andi	r31, 0x6F	; 111
    51d6:	3f 2e       	mov	r3, r31
    51d8:	97 ff       	sbrs	r25, 7
    51da:	09 c0       	rjmp	.+18     	; 0x51ee <vfprintf+0x230>
    51dc:	90 95       	com	r25
    51de:	80 95       	com	r24
    51e0:	70 95       	com	r23
    51e2:	61 95       	neg	r22
    51e4:	7f 4f       	sbci	r23, 0xFF	; 255
    51e6:	8f 4f       	sbci	r24, 0xFF	; 255
    51e8:	9f 4f       	sbci	r25, 0xFF	; 255
    51ea:	f0 68       	ori	r31, 0x80	; 128
    51ec:	3f 2e       	mov	r3, r31
    51ee:	2a e0       	ldi	r18, 0x0A	; 10
    51f0:	30 e0       	ldi	r19, 0x00	; 0
    51f2:	a3 01       	movw	r20, r6
    51f4:	33 d1       	rcall	.+614    	; 0x545c <__ultoa_invert>
    51f6:	88 2e       	mov	r8, r24
    51f8:	86 18       	sub	r8, r6
    51fa:	44 c0       	rjmp	.+136    	; 0x5284 <vfprintf+0x2c6>
    51fc:	85 37       	cpi	r24, 0x75	; 117
    51fe:	31 f4       	brne	.+12     	; 0x520c <vfprintf+0x24e>
    5200:	23 2d       	mov	r18, r3
    5202:	2f 7e       	andi	r18, 0xEF	; 239
    5204:	b2 2e       	mov	r11, r18
    5206:	2a e0       	ldi	r18, 0x0A	; 10
    5208:	30 e0       	ldi	r19, 0x00	; 0
    520a:	25 c0       	rjmp	.+74     	; 0x5256 <vfprintf+0x298>
    520c:	93 2d       	mov	r25, r3
    520e:	99 7f       	andi	r25, 0xF9	; 249
    5210:	b9 2e       	mov	r11, r25
    5212:	8f 36       	cpi	r24, 0x6F	; 111
    5214:	c1 f0       	breq	.+48     	; 0x5246 <vfprintf+0x288>
    5216:	18 f4       	brcc	.+6      	; 0x521e <vfprintf+0x260>
    5218:	88 35       	cpi	r24, 0x58	; 88
    521a:	79 f0       	breq	.+30     	; 0x523a <vfprintf+0x27c>
    521c:	ae c0       	rjmp	.+348    	; 0x537a <vfprintf+0x3bc>
    521e:	80 37       	cpi	r24, 0x70	; 112
    5220:	19 f0       	breq	.+6      	; 0x5228 <vfprintf+0x26a>
    5222:	88 37       	cpi	r24, 0x78	; 120
    5224:	21 f0       	breq	.+8      	; 0x522e <vfprintf+0x270>
    5226:	a9 c0       	rjmp	.+338    	; 0x537a <vfprintf+0x3bc>
    5228:	e9 2f       	mov	r30, r25
    522a:	e0 61       	ori	r30, 0x10	; 16
    522c:	be 2e       	mov	r11, r30
    522e:	b4 fe       	sbrs	r11, 4
    5230:	0d c0       	rjmp	.+26     	; 0x524c <vfprintf+0x28e>
    5232:	fb 2d       	mov	r31, r11
    5234:	f4 60       	ori	r31, 0x04	; 4
    5236:	bf 2e       	mov	r11, r31
    5238:	09 c0       	rjmp	.+18     	; 0x524c <vfprintf+0x28e>
    523a:	34 fe       	sbrs	r3, 4
    523c:	0a c0       	rjmp	.+20     	; 0x5252 <vfprintf+0x294>
    523e:	29 2f       	mov	r18, r25
    5240:	26 60       	ori	r18, 0x06	; 6
    5242:	b2 2e       	mov	r11, r18
    5244:	06 c0       	rjmp	.+12     	; 0x5252 <vfprintf+0x294>
    5246:	28 e0       	ldi	r18, 0x08	; 8
    5248:	30 e0       	ldi	r19, 0x00	; 0
    524a:	05 c0       	rjmp	.+10     	; 0x5256 <vfprintf+0x298>
    524c:	20 e1       	ldi	r18, 0x10	; 16
    524e:	30 e0       	ldi	r19, 0x00	; 0
    5250:	02 c0       	rjmp	.+4      	; 0x5256 <vfprintf+0x298>
    5252:	20 e1       	ldi	r18, 0x10	; 16
    5254:	32 e0       	ldi	r19, 0x02	; 2
    5256:	f8 01       	movw	r30, r16
    5258:	b7 fe       	sbrs	r11, 7
    525a:	07 c0       	rjmp	.+14     	; 0x526a <vfprintf+0x2ac>
    525c:	60 81       	ld	r22, Z
    525e:	71 81       	ldd	r23, Z+1	; 0x01
    5260:	82 81       	ldd	r24, Z+2	; 0x02
    5262:	93 81       	ldd	r25, Z+3	; 0x03
    5264:	0c 5f       	subi	r16, 0xFC	; 252
    5266:	1f 4f       	sbci	r17, 0xFF	; 255
    5268:	06 c0       	rjmp	.+12     	; 0x5276 <vfprintf+0x2b8>
    526a:	60 81       	ld	r22, Z
    526c:	71 81       	ldd	r23, Z+1	; 0x01
    526e:	80 e0       	ldi	r24, 0x00	; 0
    5270:	90 e0       	ldi	r25, 0x00	; 0
    5272:	0e 5f       	subi	r16, 0xFE	; 254
    5274:	1f 4f       	sbci	r17, 0xFF	; 255
    5276:	a3 01       	movw	r20, r6
    5278:	f1 d0       	rcall	.+482    	; 0x545c <__ultoa_invert>
    527a:	88 2e       	mov	r8, r24
    527c:	86 18       	sub	r8, r6
    527e:	fb 2d       	mov	r31, r11
    5280:	ff 77       	andi	r31, 0x7F	; 127
    5282:	3f 2e       	mov	r3, r31
    5284:	36 fe       	sbrs	r3, 6
    5286:	0d c0       	rjmp	.+26     	; 0x52a2 <vfprintf+0x2e4>
    5288:	23 2d       	mov	r18, r3
    528a:	2e 7f       	andi	r18, 0xFE	; 254
    528c:	a2 2e       	mov	r10, r18
    528e:	89 14       	cp	r8, r9
    5290:	58 f4       	brcc	.+22     	; 0x52a8 <vfprintf+0x2ea>
    5292:	34 fe       	sbrs	r3, 4
    5294:	0b c0       	rjmp	.+22     	; 0x52ac <vfprintf+0x2ee>
    5296:	32 fc       	sbrc	r3, 2
    5298:	09 c0       	rjmp	.+18     	; 0x52ac <vfprintf+0x2ee>
    529a:	83 2d       	mov	r24, r3
    529c:	8e 7e       	andi	r24, 0xEE	; 238
    529e:	a8 2e       	mov	r10, r24
    52a0:	05 c0       	rjmp	.+10     	; 0x52ac <vfprintf+0x2ee>
    52a2:	b8 2c       	mov	r11, r8
    52a4:	a3 2c       	mov	r10, r3
    52a6:	03 c0       	rjmp	.+6      	; 0x52ae <vfprintf+0x2f0>
    52a8:	b8 2c       	mov	r11, r8
    52aa:	01 c0       	rjmp	.+2      	; 0x52ae <vfprintf+0x2f0>
    52ac:	b9 2c       	mov	r11, r9
    52ae:	a4 fe       	sbrs	r10, 4
    52b0:	0f c0       	rjmp	.+30     	; 0x52d0 <vfprintf+0x312>
    52b2:	fe 01       	movw	r30, r28
    52b4:	e8 0d       	add	r30, r8
    52b6:	f1 1d       	adc	r31, r1
    52b8:	80 81       	ld	r24, Z
    52ba:	80 33       	cpi	r24, 0x30	; 48
    52bc:	21 f4       	brne	.+8      	; 0x52c6 <vfprintf+0x308>
    52be:	9a 2d       	mov	r25, r10
    52c0:	99 7e       	andi	r25, 0xE9	; 233
    52c2:	a9 2e       	mov	r10, r25
    52c4:	09 c0       	rjmp	.+18     	; 0x52d8 <vfprintf+0x31a>
    52c6:	a2 fe       	sbrs	r10, 2
    52c8:	06 c0       	rjmp	.+12     	; 0x52d6 <vfprintf+0x318>
    52ca:	b3 94       	inc	r11
    52cc:	b3 94       	inc	r11
    52ce:	04 c0       	rjmp	.+8      	; 0x52d8 <vfprintf+0x31a>
    52d0:	8a 2d       	mov	r24, r10
    52d2:	86 78       	andi	r24, 0x86	; 134
    52d4:	09 f0       	breq	.+2      	; 0x52d8 <vfprintf+0x31a>
    52d6:	b3 94       	inc	r11
    52d8:	a3 fc       	sbrc	r10, 3
    52da:	10 c0       	rjmp	.+32     	; 0x52fc <vfprintf+0x33e>
    52dc:	a0 fe       	sbrs	r10, 0
    52de:	06 c0       	rjmp	.+12     	; 0x52ec <vfprintf+0x32e>
    52e0:	b2 14       	cp	r11, r2
    52e2:	80 f4       	brcc	.+32     	; 0x5304 <vfprintf+0x346>
    52e4:	28 0c       	add	r2, r8
    52e6:	92 2c       	mov	r9, r2
    52e8:	9b 18       	sub	r9, r11
    52ea:	0d c0       	rjmp	.+26     	; 0x5306 <vfprintf+0x348>
    52ec:	b2 14       	cp	r11, r2
    52ee:	58 f4       	brcc	.+22     	; 0x5306 <vfprintf+0x348>
    52f0:	b6 01       	movw	r22, r12
    52f2:	80 e2       	ldi	r24, 0x20	; 32
    52f4:	90 e0       	ldi	r25, 0x00	; 0
    52f6:	76 d0       	rcall	.+236    	; 0x53e4 <fputc>
    52f8:	b3 94       	inc	r11
    52fa:	f8 cf       	rjmp	.-16     	; 0x52ec <vfprintf+0x32e>
    52fc:	b2 14       	cp	r11, r2
    52fe:	18 f4       	brcc	.+6      	; 0x5306 <vfprintf+0x348>
    5300:	2b 18       	sub	r2, r11
    5302:	02 c0       	rjmp	.+4      	; 0x5308 <vfprintf+0x34a>
    5304:	98 2c       	mov	r9, r8
    5306:	21 2c       	mov	r2, r1
    5308:	a4 fe       	sbrs	r10, 4
    530a:	0f c0       	rjmp	.+30     	; 0x532a <vfprintf+0x36c>
    530c:	b6 01       	movw	r22, r12
    530e:	80 e3       	ldi	r24, 0x30	; 48
    5310:	90 e0       	ldi	r25, 0x00	; 0
    5312:	68 d0       	rcall	.+208    	; 0x53e4 <fputc>
    5314:	a2 fe       	sbrs	r10, 2
    5316:	16 c0       	rjmp	.+44     	; 0x5344 <vfprintf+0x386>
    5318:	a1 fc       	sbrc	r10, 1
    531a:	03 c0       	rjmp	.+6      	; 0x5322 <vfprintf+0x364>
    531c:	88 e7       	ldi	r24, 0x78	; 120
    531e:	90 e0       	ldi	r25, 0x00	; 0
    5320:	02 c0       	rjmp	.+4      	; 0x5326 <vfprintf+0x368>
    5322:	88 e5       	ldi	r24, 0x58	; 88
    5324:	90 e0       	ldi	r25, 0x00	; 0
    5326:	b6 01       	movw	r22, r12
    5328:	0c c0       	rjmp	.+24     	; 0x5342 <vfprintf+0x384>
    532a:	8a 2d       	mov	r24, r10
    532c:	86 78       	andi	r24, 0x86	; 134
    532e:	51 f0       	breq	.+20     	; 0x5344 <vfprintf+0x386>
    5330:	a1 fe       	sbrs	r10, 1
    5332:	02 c0       	rjmp	.+4      	; 0x5338 <vfprintf+0x37a>
    5334:	8b e2       	ldi	r24, 0x2B	; 43
    5336:	01 c0       	rjmp	.+2      	; 0x533a <vfprintf+0x37c>
    5338:	80 e2       	ldi	r24, 0x20	; 32
    533a:	a7 fc       	sbrc	r10, 7
    533c:	8d e2       	ldi	r24, 0x2D	; 45
    533e:	b6 01       	movw	r22, r12
    5340:	90 e0       	ldi	r25, 0x00	; 0
    5342:	50 d0       	rcall	.+160    	; 0x53e4 <fputc>
    5344:	89 14       	cp	r8, r9
    5346:	30 f4       	brcc	.+12     	; 0x5354 <vfprintf+0x396>
    5348:	b6 01       	movw	r22, r12
    534a:	80 e3       	ldi	r24, 0x30	; 48
    534c:	90 e0       	ldi	r25, 0x00	; 0
    534e:	4a d0       	rcall	.+148    	; 0x53e4 <fputc>
    5350:	9a 94       	dec	r9
    5352:	f8 cf       	rjmp	.-16     	; 0x5344 <vfprintf+0x386>
    5354:	8a 94       	dec	r8
    5356:	f3 01       	movw	r30, r6
    5358:	e8 0d       	add	r30, r8
    535a:	f1 1d       	adc	r31, r1
    535c:	80 81       	ld	r24, Z
    535e:	b6 01       	movw	r22, r12
    5360:	90 e0       	ldi	r25, 0x00	; 0
    5362:	40 d0       	rcall	.+128    	; 0x53e4 <fputc>
    5364:	81 10       	cpse	r8, r1
    5366:	f6 cf       	rjmp	.-20     	; 0x5354 <vfprintf+0x396>
    5368:	22 20       	and	r2, r2
    536a:	09 f4       	brne	.+2      	; 0x536e <vfprintf+0x3b0>
    536c:	4e ce       	rjmp	.-868    	; 0x500a <vfprintf+0x4c>
    536e:	b6 01       	movw	r22, r12
    5370:	80 e2       	ldi	r24, 0x20	; 32
    5372:	90 e0       	ldi	r25, 0x00	; 0
    5374:	37 d0       	rcall	.+110    	; 0x53e4 <fputc>
    5376:	2a 94       	dec	r2
    5378:	f7 cf       	rjmp	.-18     	; 0x5368 <vfprintf+0x3aa>
    537a:	f6 01       	movw	r30, r12
    537c:	86 81       	ldd	r24, Z+6	; 0x06
    537e:	97 81       	ldd	r25, Z+7	; 0x07
    5380:	02 c0       	rjmp	.+4      	; 0x5386 <vfprintf+0x3c8>
    5382:	8f ef       	ldi	r24, 0xFF	; 255
    5384:	9f ef       	ldi	r25, 0xFF	; 255
    5386:	2b 96       	adiw	r28, 0x0b	; 11
    5388:	0f b6       	in	r0, 0x3f	; 63
    538a:	f8 94       	cli
    538c:	de bf       	out	0x3e, r29	; 62
    538e:	0f be       	out	0x3f, r0	; 63
    5390:	cd bf       	out	0x3d, r28	; 61
    5392:	df 91       	pop	r29
    5394:	cf 91       	pop	r28
    5396:	1f 91       	pop	r17
    5398:	0f 91       	pop	r16
    539a:	ff 90       	pop	r15
    539c:	ef 90       	pop	r14
    539e:	df 90       	pop	r13
    53a0:	cf 90       	pop	r12
    53a2:	bf 90       	pop	r11
    53a4:	af 90       	pop	r10
    53a6:	9f 90       	pop	r9
    53a8:	8f 90       	pop	r8
    53aa:	7f 90       	pop	r7
    53ac:	6f 90       	pop	r6
    53ae:	5f 90       	pop	r5
    53b0:	4f 90       	pop	r4
    53b2:	3f 90       	pop	r3
    53b4:	2f 90       	pop	r2
    53b6:	08 95       	ret

000053b8 <strnlen_P>:
    53b8:	fc 01       	movw	r30, r24
    53ba:	05 90       	lpm	r0, Z+
    53bc:	61 50       	subi	r22, 0x01	; 1
    53be:	70 40       	sbci	r23, 0x00	; 0
    53c0:	01 10       	cpse	r0, r1
    53c2:	d8 f7       	brcc	.-10     	; 0x53ba <strnlen_P+0x2>
    53c4:	80 95       	com	r24
    53c6:	90 95       	com	r25
    53c8:	8e 0f       	add	r24, r30
    53ca:	9f 1f       	adc	r25, r31
    53cc:	08 95       	ret

000053ce <strnlen>:
    53ce:	fc 01       	movw	r30, r24
    53d0:	61 50       	subi	r22, 0x01	; 1
    53d2:	70 40       	sbci	r23, 0x00	; 0
    53d4:	01 90       	ld	r0, Z+
    53d6:	01 10       	cpse	r0, r1
    53d8:	d8 f7       	brcc	.-10     	; 0x53d0 <strnlen+0x2>
    53da:	80 95       	com	r24
    53dc:	90 95       	com	r25
    53de:	8e 0f       	add	r24, r30
    53e0:	9f 1f       	adc	r25, r31
    53e2:	08 95       	ret

000053e4 <fputc>:
    53e4:	0f 93       	push	r16
    53e6:	1f 93       	push	r17
    53e8:	cf 93       	push	r28
    53ea:	df 93       	push	r29
    53ec:	fb 01       	movw	r30, r22
    53ee:	23 81       	ldd	r18, Z+3	; 0x03
    53f0:	21 fd       	sbrc	r18, 1
    53f2:	03 c0       	rjmp	.+6      	; 0x53fa <fputc+0x16>
    53f4:	8f ef       	ldi	r24, 0xFF	; 255
    53f6:	9f ef       	ldi	r25, 0xFF	; 255
    53f8:	2c c0       	rjmp	.+88     	; 0x5452 <fputc+0x6e>
    53fa:	22 ff       	sbrs	r18, 2
    53fc:	16 c0       	rjmp	.+44     	; 0x542a <fputc+0x46>
    53fe:	46 81       	ldd	r20, Z+6	; 0x06
    5400:	57 81       	ldd	r21, Z+7	; 0x07
    5402:	24 81       	ldd	r18, Z+4	; 0x04
    5404:	35 81       	ldd	r19, Z+5	; 0x05
    5406:	42 17       	cp	r20, r18
    5408:	53 07       	cpc	r21, r19
    540a:	44 f4       	brge	.+16     	; 0x541c <fputc+0x38>
    540c:	a0 81       	ld	r26, Z
    540e:	b1 81       	ldd	r27, Z+1	; 0x01
    5410:	9d 01       	movw	r18, r26
    5412:	2f 5f       	subi	r18, 0xFF	; 255
    5414:	3f 4f       	sbci	r19, 0xFF	; 255
    5416:	31 83       	std	Z+1, r19	; 0x01
    5418:	20 83       	st	Z, r18
    541a:	8c 93       	st	X, r24
    541c:	26 81       	ldd	r18, Z+6	; 0x06
    541e:	37 81       	ldd	r19, Z+7	; 0x07
    5420:	2f 5f       	subi	r18, 0xFF	; 255
    5422:	3f 4f       	sbci	r19, 0xFF	; 255
    5424:	37 83       	std	Z+7, r19	; 0x07
    5426:	26 83       	std	Z+6, r18	; 0x06
    5428:	14 c0       	rjmp	.+40     	; 0x5452 <fputc+0x6e>
    542a:	8b 01       	movw	r16, r22
    542c:	ec 01       	movw	r28, r24
    542e:	fb 01       	movw	r30, r22
    5430:	00 84       	ldd	r0, Z+8	; 0x08
    5432:	f1 85       	ldd	r31, Z+9	; 0x09
    5434:	e0 2d       	mov	r30, r0
    5436:	19 95       	eicall
    5438:	89 2b       	or	r24, r25
    543a:	e1 f6       	brne	.-72     	; 0x53f4 <fputc+0x10>
    543c:	d8 01       	movw	r26, r16
    543e:	16 96       	adiw	r26, 0x06	; 6
    5440:	8d 91       	ld	r24, X+
    5442:	9c 91       	ld	r25, X
    5444:	17 97       	sbiw	r26, 0x07	; 7
    5446:	01 96       	adiw	r24, 0x01	; 1
    5448:	17 96       	adiw	r26, 0x07	; 7
    544a:	9c 93       	st	X, r25
    544c:	8e 93       	st	-X, r24
    544e:	16 97       	sbiw	r26, 0x06	; 6
    5450:	ce 01       	movw	r24, r28
    5452:	df 91       	pop	r29
    5454:	cf 91       	pop	r28
    5456:	1f 91       	pop	r17
    5458:	0f 91       	pop	r16
    545a:	08 95       	ret

0000545c <__ultoa_invert>:
    545c:	fa 01       	movw	r30, r20
    545e:	aa 27       	eor	r26, r26
    5460:	28 30       	cpi	r18, 0x08	; 8
    5462:	51 f1       	breq	.+84     	; 0x54b8 <__ultoa_invert+0x5c>
    5464:	20 31       	cpi	r18, 0x10	; 16
    5466:	81 f1       	breq	.+96     	; 0x54c8 <__ultoa_invert+0x6c>
    5468:	e8 94       	clt
    546a:	6f 93       	push	r22
    546c:	6e 7f       	andi	r22, 0xFE	; 254
    546e:	6e 5f       	subi	r22, 0xFE	; 254
    5470:	7f 4f       	sbci	r23, 0xFF	; 255
    5472:	8f 4f       	sbci	r24, 0xFF	; 255
    5474:	9f 4f       	sbci	r25, 0xFF	; 255
    5476:	af 4f       	sbci	r26, 0xFF	; 255
    5478:	b1 e0       	ldi	r27, 0x01	; 1
    547a:	3e d0       	rcall	.+124    	; 0x54f8 <__ultoa_invert+0x9c>
    547c:	b4 e0       	ldi	r27, 0x04	; 4
    547e:	3c d0       	rcall	.+120    	; 0x54f8 <__ultoa_invert+0x9c>
    5480:	67 0f       	add	r22, r23
    5482:	78 1f       	adc	r23, r24
    5484:	89 1f       	adc	r24, r25
    5486:	9a 1f       	adc	r25, r26
    5488:	a1 1d       	adc	r26, r1
    548a:	68 0f       	add	r22, r24
    548c:	79 1f       	adc	r23, r25
    548e:	8a 1f       	adc	r24, r26
    5490:	91 1d       	adc	r25, r1
    5492:	a1 1d       	adc	r26, r1
    5494:	6a 0f       	add	r22, r26
    5496:	71 1d       	adc	r23, r1
    5498:	81 1d       	adc	r24, r1
    549a:	91 1d       	adc	r25, r1
    549c:	a1 1d       	adc	r26, r1
    549e:	20 d0       	rcall	.+64     	; 0x54e0 <__ultoa_invert+0x84>
    54a0:	09 f4       	brne	.+2      	; 0x54a4 <__ultoa_invert+0x48>
    54a2:	68 94       	set
    54a4:	3f 91       	pop	r19
    54a6:	2a e0       	ldi	r18, 0x0A	; 10
    54a8:	26 9f       	mul	r18, r22
    54aa:	11 24       	eor	r1, r1
    54ac:	30 19       	sub	r19, r0
    54ae:	30 5d       	subi	r19, 0xD0	; 208
    54b0:	31 93       	st	Z+, r19
    54b2:	de f6       	brtc	.-74     	; 0x546a <__ultoa_invert+0xe>
    54b4:	cf 01       	movw	r24, r30
    54b6:	08 95       	ret
    54b8:	46 2f       	mov	r20, r22
    54ba:	47 70       	andi	r20, 0x07	; 7
    54bc:	40 5d       	subi	r20, 0xD0	; 208
    54be:	41 93       	st	Z+, r20
    54c0:	b3 e0       	ldi	r27, 0x03	; 3
    54c2:	0f d0       	rcall	.+30     	; 0x54e2 <__ultoa_invert+0x86>
    54c4:	c9 f7       	brne	.-14     	; 0x54b8 <__ultoa_invert+0x5c>
    54c6:	f6 cf       	rjmp	.-20     	; 0x54b4 <__ultoa_invert+0x58>
    54c8:	46 2f       	mov	r20, r22
    54ca:	4f 70       	andi	r20, 0x0F	; 15
    54cc:	40 5d       	subi	r20, 0xD0	; 208
    54ce:	4a 33       	cpi	r20, 0x3A	; 58
    54d0:	18 f0       	brcs	.+6      	; 0x54d8 <__ultoa_invert+0x7c>
    54d2:	49 5d       	subi	r20, 0xD9	; 217
    54d4:	31 fd       	sbrc	r19, 1
    54d6:	40 52       	subi	r20, 0x20	; 32
    54d8:	41 93       	st	Z+, r20
    54da:	02 d0       	rcall	.+4      	; 0x54e0 <__ultoa_invert+0x84>
    54dc:	a9 f7       	brne	.-22     	; 0x54c8 <__ultoa_invert+0x6c>
    54de:	ea cf       	rjmp	.-44     	; 0x54b4 <__ultoa_invert+0x58>
    54e0:	b4 e0       	ldi	r27, 0x04	; 4
    54e2:	a6 95       	lsr	r26
    54e4:	97 95       	ror	r25
    54e6:	87 95       	ror	r24
    54e8:	77 95       	ror	r23
    54ea:	67 95       	ror	r22
    54ec:	ba 95       	dec	r27
    54ee:	c9 f7       	brne	.-14     	; 0x54e2 <__ultoa_invert+0x86>
    54f0:	00 97       	sbiw	r24, 0x00	; 0
    54f2:	61 05       	cpc	r22, r1
    54f4:	71 05       	cpc	r23, r1
    54f6:	08 95       	ret
    54f8:	9b 01       	movw	r18, r22
    54fa:	ac 01       	movw	r20, r24
    54fc:	0a 2e       	mov	r0, r26
    54fe:	06 94       	lsr	r0
    5500:	57 95       	ror	r21
    5502:	47 95       	ror	r20
    5504:	37 95       	ror	r19
    5506:	27 95       	ror	r18
    5508:	ba 95       	dec	r27
    550a:	c9 f7       	brne	.-14     	; 0x54fe <__ultoa_invert+0xa2>
    550c:	62 0f       	add	r22, r18
    550e:	73 1f       	adc	r23, r19
    5510:	84 1f       	adc	r24, r20
    5512:	95 1f       	adc	r25, r21
    5514:	a0 1d       	adc	r26, r0
    5516:	08 95       	ret

00005518 <_exit>:
    5518:	f8 94       	cli

0000551a <__stop_program>:
    551a:	ff cf       	rjmp	.-2      	; 0x551a <__stop_program>
