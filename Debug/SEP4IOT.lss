
SEP4IOT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000005b0  00800200  00006990  00006a24  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006990  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000012dd  008007b0  008007b0  00006fd4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00006fd4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00007030  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000ca0  00000000  00000000  00007070  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000fafa  00000000  00000000  00007d10  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000040e9  00000000  00000000  0001780a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000077b4  00000000  00000000  0001b8f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002b44  00000000  00000000  000230a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004869  00000000  00000000  00025bec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000e0dc  00000000  00000000  0002a455  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000c68  00000000  00000000  00038531  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	50 c2       	rjmp	.+1184   	; 0x4a2 <__ctors_end>
       2:	00 00       	nop
       4:	6f c2       	rjmp	.+1246   	; 0x4e4 <__bad_interrupt>
       6:	00 00       	nop
       8:	6d c2       	rjmp	.+1242   	; 0x4e4 <__bad_interrupt>
       a:	00 00       	nop
       c:	6b c2       	rjmp	.+1238   	; 0x4e4 <__bad_interrupt>
       e:	00 00       	nop
      10:	69 c2       	rjmp	.+1234   	; 0x4e4 <__bad_interrupt>
      12:	00 00       	nop
      14:	67 c2       	rjmp	.+1230   	; 0x4e4 <__bad_interrupt>
      16:	00 00       	nop
      18:	65 c2       	rjmp	.+1226   	; 0x4e4 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	63 c2       	rjmp	.+1222   	; 0x4e4 <__bad_interrupt>
      1e:	00 00       	nop
      20:	61 c2       	rjmp	.+1218   	; 0x4e4 <__bad_interrupt>
      22:	00 00       	nop
      24:	5f c2       	rjmp	.+1214   	; 0x4e4 <__bad_interrupt>
      26:	00 00       	nop
      28:	5d c2       	rjmp	.+1210   	; 0x4e4 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	5b c2       	rjmp	.+1206   	; 0x4e4 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 17 0e 	jmp	0x1c2e	; 0x1c2e <__vector_12>
      34:	57 c2       	rjmp	.+1198   	; 0x4e4 <__bad_interrupt>
      36:	00 00       	nop
      38:	55 c2       	rjmp	.+1194   	; 0x4e4 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	53 c2       	rjmp	.+1190   	; 0x4e4 <__bad_interrupt>
      3e:	00 00       	nop
      40:	51 c2       	rjmp	.+1186   	; 0x4e4 <__bad_interrupt>
      42:	00 00       	nop
      44:	4f c2       	rjmp	.+1182   	; 0x4e4 <__bad_interrupt>
      46:	00 00       	nop
      48:	4d c2       	rjmp	.+1178   	; 0x4e4 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	4b c2       	rjmp	.+1174   	; 0x4e4 <__bad_interrupt>
      4e:	00 00       	nop
      50:	49 c2       	rjmp	.+1170   	; 0x4e4 <__bad_interrupt>
      52:	00 00       	nop
      54:	47 c2       	rjmp	.+1166   	; 0x4e4 <__bad_interrupt>
      56:	00 00       	nop
      58:	45 c2       	rjmp	.+1162   	; 0x4e4 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	43 c2       	rjmp	.+1158   	; 0x4e4 <__bad_interrupt>
      5e:	00 00       	nop
      60:	41 c2       	rjmp	.+1154   	; 0x4e4 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 e1 28 	jmp	0x51c2	; 0x51c2 <__vector_25>
      68:	0c 94 33 29 	jmp	0x5266	; 0x5266 <__vector_26>
      6c:	3b c2       	rjmp	.+1142   	; 0x4e4 <__bad_interrupt>
      6e:	00 00       	nop
      70:	39 c2       	rjmp	.+1138   	; 0x4e4 <__bad_interrupt>
      72:	00 00       	nop
      74:	37 c2       	rjmp	.+1134   	; 0x4e4 <__bad_interrupt>
      76:	00 00       	nop
      78:	35 c2       	rjmp	.+1130   	; 0x4e4 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	33 c2       	rjmp	.+1126   	; 0x4e4 <__bad_interrupt>
      7e:	00 00       	nop
      80:	31 c2       	rjmp	.+1122   	; 0x4e4 <__bad_interrupt>
      82:	00 00       	nop
      84:	2f c2       	rjmp	.+1118   	; 0x4e4 <__bad_interrupt>
      86:	00 00       	nop
      88:	2d c2       	rjmp	.+1114   	; 0x4e4 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	2b c2       	rjmp	.+1110   	; 0x4e4 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 77 29 	jmp	0x52ee	; 0x52ee <__vector_36>
      94:	0c 94 c9 29 	jmp	0x5392	; 0x5392 <__vector_37>
      98:	25 c2       	rjmp	.+1098   	; 0x4e4 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 61 2c 	jmp	0x58c2	; 0x58c2 <__vector_39>
      a0:	21 c2       	rjmp	.+1090   	; 0x4e4 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	1f c2       	rjmp	.+1086   	; 0x4e4 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	1d c2       	rjmp	.+1082   	; 0x4e4 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	1b c2       	rjmp	.+1078   	; 0x4e4 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	19 c2       	rjmp	.+1074   	; 0x4e4 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	17 c2       	rjmp	.+1070   	; 0x4e4 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	15 c2       	rjmp	.+1066   	; 0x4e4 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	13 c2       	rjmp	.+1062   	; 0x4e4 <__bad_interrupt>
      be:	00 00       	nop
      c0:	11 c2       	rjmp	.+1058   	; 0x4e4 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	0f c2       	rjmp	.+1054   	; 0x4e4 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	0d c2       	rjmp	.+1050   	; 0x4e4 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 0d 2a 	jmp	0x541a	; 0x541a <__vector_51>
      d0:	0c 94 5f 2a 	jmp	0x54be	; 0x54be <__vector_52>
      d4:	07 c2       	rjmp	.+1038   	; 0x4e4 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 a3 2a 	jmp	0x5546	; 0x5546 <__vector_54>
      dc:	0c 94 f5 2a 	jmp	0x55ea	; 0x55ea <__vector_55>
      e0:	01 c2       	rjmp	.+1026   	; 0x4e4 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	c6 01       	movw	r24, r12
      e6:	c6 01       	movw	r24, r12
      e8:	c6 01       	movw	r24, r12
      ea:	00 02       	muls	r16, r16
      ec:	08 02       	muls	r16, r24
      ee:	1e 02       	muls	r17, r30
      f0:	c6 01       	movw	r24, r12
      f2:	c6 01       	movw	r24, r12
      f4:	00 02       	muls	r16, r16
      f6:	08 02       	muls	r16, r24
      f8:	83 2c       	mov	r8, r3
      fa:	f3 2c       	mov	r15, r3
      fc:	f3 2c       	mov	r15, r3
      fe:	f3 2c       	mov	r15, r3
     100:	f3 2c       	mov	r15, r3
     102:	f3 2c       	mov	r15, r3
     104:	f3 2c       	mov	r15, r3
     106:	f3 2c       	mov	r15, r3
     108:	83 2c       	mov	r8, r3
     10a:	f3 2c       	mov	r15, r3
     10c:	f3 2c       	mov	r15, r3
     10e:	f3 2c       	mov	r15, r3
     110:	f3 2c       	mov	r15, r3
     112:	f3 2c       	mov	r15, r3
     114:	f3 2c       	mov	r15, r3
     116:	f3 2c       	mov	r15, r3
     118:	85 2c       	mov	r8, r5
     11a:	f3 2c       	mov	r15, r3
     11c:	f3 2c       	mov	r15, r3
     11e:	f3 2c       	mov	r15, r3
     120:	f3 2c       	mov	r15, r3
     122:	f3 2c       	mov	r15, r3
     124:	f3 2c       	mov	r15, r3
     126:	f3 2c       	mov	r15, r3
     128:	f3 2c       	mov	r15, r3
     12a:	f3 2c       	mov	r15, r3
     12c:	f3 2c       	mov	r15, r3
     12e:	f3 2c       	mov	r15, r3
     130:	f3 2c       	mov	r15, r3
     132:	f3 2c       	mov	r15, r3
     134:	f3 2c       	mov	r15, r3
     136:	f3 2c       	mov	r15, r3
     138:	85 2c       	mov	r8, r5
     13a:	f3 2c       	mov	r15, r3
     13c:	f3 2c       	mov	r15, r3
     13e:	f3 2c       	mov	r15, r3
     140:	f3 2c       	mov	r15, r3
     142:	f3 2c       	mov	r15, r3
     144:	f3 2c       	mov	r15, r3
     146:	f3 2c       	mov	r15, r3
     148:	f3 2c       	mov	r15, r3
     14a:	f3 2c       	mov	r15, r3
     14c:	f3 2c       	mov	r15, r3
     14e:	f3 2c       	mov	r15, r3
     150:	f3 2c       	mov	r15, r3
     152:	f3 2c       	mov	r15, r3
     154:	f3 2c       	mov	r15, r3
     156:	f3 2c       	mov	r15, r3
     158:	ef 2c       	mov	r14, r15
     15a:	f3 2c       	mov	r15, r3
     15c:	f3 2c       	mov	r15, r3
     15e:	f3 2c       	mov	r15, r3
     160:	f3 2c       	mov	r15, r3
     162:	f3 2c       	mov	r15, r3
     164:	f3 2c       	mov	r15, r3
     166:	f3 2c       	mov	r15, r3
     168:	ba 2c       	mov	r11, r10
     16a:	f3 2c       	mov	r15, r3
     16c:	f3 2c       	mov	r15, r3
     16e:	f3 2c       	mov	r15, r3
     170:	f3 2c       	mov	r15, r3
     172:	f3 2c       	mov	r15, r3
     174:	f3 2c       	mov	r15, r3
     176:	f3 2c       	mov	r15, r3
     178:	f3 2c       	mov	r15, r3
     17a:	f3 2c       	mov	r15, r3
     17c:	f3 2c       	mov	r15, r3
     17e:	f3 2c       	mov	r15, r3
     180:	f3 2c       	mov	r15, r3
     182:	f3 2c       	mov	r15, r3
     184:	f3 2c       	mov	r15, r3
     186:	f3 2c       	mov	r15, r3
     188:	ae 2c       	mov	r10, r14
     18a:	f3 2c       	mov	r15, r3
     18c:	f3 2c       	mov	r15, r3
     18e:	f3 2c       	mov	r15, r3
     190:	f3 2c       	mov	r15, r3
     192:	f3 2c       	mov	r15, r3
     194:	f3 2c       	mov	r15, r3
     196:	f3 2c       	mov	r15, r3
     198:	d2 2c       	mov	r13, r2

0000019a <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     19a:	07 e5       	ldi	r16, 0x57	; 87
     19c:	18 e1       	ldi	r17, 0x18	; 24
     19e:	0f 2e       	mov	r0, r31
     1a0:	f7 e8       	ldi	r31, 0x87	; 135
     1a2:	ef 2e       	mov	r14, r31
     1a4:	f8 e1       	ldi	r31, 0x18	; 24
     1a6:	ff 2e       	mov	r15, r31
     1a8:	f0 2d       	mov	r31, r0
     1aa:	80 91 56 18 	lds	r24, 0x1856	; 0x801856 <uxDeletedTasksWaitingCleanUp>
     1ae:	88 23       	and	r24, r24
     1b0:	29 f1       	breq	.+74     	; 0x1fc <prvIdleTask+0x62>
     1b2:	0f b6       	in	r0, 0x3f	; 63
     1b4:	f8 94       	cli
     1b6:	0f 92       	push	r0
     1b8:	d8 01       	movw	r26, r16
     1ba:	17 96       	adiw	r26, 0x07	; 7
     1bc:	ed 91       	ld	r30, X+
     1be:	fc 91       	ld	r31, X
     1c0:	18 97       	sbiw	r26, 0x08	; 8
     1c2:	c0 85       	ldd	r28, Z+8	; 0x08
     1c4:	d1 85       	ldd	r29, Z+9	; 0x09
     1c6:	ce 01       	movw	r24, r28
     1c8:	02 96       	adiw	r24, 0x02	; 2
     1ca:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <uxListRemove>
     1ce:	80 91 4a 18 	lds	r24, 0x184A	; 0x80184a <uxCurrentNumberOfTasks>
     1d2:	81 50       	subi	r24, 0x01	; 1
     1d4:	80 93 4a 18 	sts	0x184A, r24	; 0x80184a <uxCurrentNumberOfTasks>
     1d8:	80 91 56 18 	lds	r24, 0x1856	; 0x801856 <uxDeletedTasksWaitingCleanUp>
     1dc:	81 50       	subi	r24, 0x01	; 1
     1de:	80 93 56 18 	sts	0x1856, r24	; 0x801856 <uxDeletedTasksWaitingCleanUp>
     1e2:	0f 90       	pop	r0
     1e4:	0f be       	out	0x3f, r0	; 63
     1e6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     1e8:	9c 8d       	ldd	r25, Y+28	; 0x1c
     1ea:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <vPortFree>
     1ee:	ce 01       	movw	r24, r28
     1f0:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <vPortFree>
     1f4:	80 91 56 18 	lds	r24, 0x1856	; 0x801856 <uxDeletedTasksWaitingCleanUp>
     1f8:	81 11       	cpse	r24, r1
     1fa:	db cf       	rjmp	.-74     	; 0x1b2 <prvIdleTask+0x18>
     1fc:	f7 01       	movw	r30, r14
     1fe:	80 81       	ld	r24, Z
     200:	82 30       	cpi	r24, 0x02	; 2
     202:	10 f0       	brcs	.+4      	; 0x208 <prvIdleTask+0x6e>
     204:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <vPortYield>
     208:	0e 94 6d 1e 	call	0x3cda	; 0x3cda <vApplicationIdleHook>
     20c:	ce cf       	rjmp	.-100    	; 0x1aa <prvIdleTask+0x10>

0000020e <prvTimerTask>:
            pxNewTimer->ucStatus = 0x00;
            prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
        }

        return pxNewTimer;
    }
     20e:	cf 93       	push	r28
     210:	df 93       	push	r29
     212:	cd b7       	in	r28, 0x3d	; 61
     214:	de b7       	in	r29, 0x3e	; 62
     216:	60 97       	sbiw	r28, 0x10	; 16
     218:	0f b6       	in	r0, 0x3f	; 63
     21a:	f8 94       	cli
     21c:	de bf       	out	0x3e, r29	; 62
     21e:	0f be       	out	0x3f, r0	; 63
     220:	cd bf       	out	0x3d, r28	; 61
     222:	ce 01       	movw	r24, r28
     224:	01 96       	adiw	r24, 0x01	; 1
     226:	9a 87       	std	Y+10, r25	; 0x0a
     228:	89 87       	std	Y+9, r24	; 0x09
     22a:	81 2c       	mov	r8, r1
     22c:	91 2c       	mov	r9, r1
     22e:	a1 2c       	mov	r10, r1
     230:	b1 2c       	mov	r11, r1
     232:	69 84       	ldd	r6, Y+9	; 0x09
     234:	7a 84       	ldd	r7, Y+10	; 0x0a
     236:	e0 91 d5 18 	lds	r30, 0x18D5	; 0x8018d5 <pxCurrentTimerList>
     23a:	f0 91 d6 18 	lds	r31, 0x18D6	; 0x8018d6 <pxCurrentTimerList+0x1>
     23e:	80 81       	ld	r24, Z
     240:	88 23       	and	r24, r24
     242:	09 f4       	brne	.+2      	; 0x246 <prvTimerTask+0x38>
     244:	14 c1       	rjmp	.+552    	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
     246:	07 80       	ldd	r0, Z+7	; 0x07
     248:	f0 85       	ldd	r31, Z+8	; 0x08
     24a:	e0 2d       	mov	r30, r0
     24c:	20 80       	ld	r2, Z
     24e:	31 80       	ldd	r3, Z+1	; 0x01
     250:	42 80       	ldd	r4, Z+2	; 0x02
     252:	53 80       	ldd	r5, Z+3	; 0x03
     254:	0e 94 b0 16 	call	0x2d60	; 0x2d60 <vTaskSuspendAll>
     258:	ce 01       	movw	r24, r28
     25a:	01 96       	adiw	r24, 0x01	; 1
     25c:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <prvSampleTimeNow>
     260:	6b 87       	std	Y+11, r22	; 0x0b
     262:	7c 87       	std	Y+12, r23	; 0x0c
     264:	8d 87       	std	Y+13, r24	; 0x0d
     266:	9e 87       	std	Y+14, r25	; 0x0e
     268:	89 81       	ldd	r24, Y+1	; 0x01
     26a:	81 11       	cpse	r24, r1
     26c:	67 c0       	rjmp	.+206    	; 0x33c <prvTimerTask+0x12e>
     26e:	8b 85       	ldd	r24, Y+11	; 0x0b
     270:	9c 85       	ldd	r25, Y+12	; 0x0c
     272:	ad 85       	ldd	r26, Y+13	; 0x0d
     274:	be 85       	ldd	r27, Y+14	; 0x0e
     276:	82 15       	cp	r24, r2
     278:	93 05       	cpc	r25, r3
     27a:	a4 05       	cpc	r26, r4
     27c:	b5 05       	cpc	r27, r5
     27e:	08 f4       	brcc	.+2      	; 0x282 <prvTimerTask+0x74>
     280:	45 c0       	rjmp	.+138    	; 0x30c <prvTimerTask+0xfe>
     282:	0e 94 99 17 	call	0x2f32	; 0x2f32 <xTaskResumeAll>
     286:	e0 91 d5 18 	lds	r30, 0x18D5	; 0x8018d5 <pxCurrentTimerList>
     28a:	f0 91 d6 18 	lds	r31, 0x18D6	; 0x8018d6 <pxCurrentTimerList+0x1>
     28e:	07 80       	ldd	r0, Z+7	; 0x07
     290:	f0 85       	ldd	r31, Z+8	; 0x08
     292:	e0 2d       	mov	r30, r0
     294:	a0 85       	ldd	r26, Z+8	; 0x08
     296:	b1 85       	ldd	r27, Z+9	; 0x09
     298:	b8 8b       	std	Y+16, r27	; 0x10
     29a:	af 87       	std	Y+15, r26	; 0x0f
     29c:	cd 01       	movw	r24, r26
     29e:	02 96       	adiw	r24, 0x02	; 2
     2a0:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <uxListRemove>
     2a4:	ef 85       	ldd	r30, Y+15	; 0x0f
     2a6:	f8 89       	ldd	r31, Y+16	; 0x10
     2a8:	87 89       	ldd	r24, Z+23	; 0x17
     2aa:	82 ff       	sbrs	r24, 2
     2ac:	21 c0       	rjmp	.+66     	; 0x2f0 <prvTimerTask+0xe2>
     2ae:	46 85       	ldd	r20, Z+14	; 0x0e
     2b0:	57 85       	ldd	r21, Z+15	; 0x0f
     2b2:	60 89       	ldd	r22, Z+16	; 0x10
     2b4:	71 89       	ldd	r23, Z+17	; 0x11
     2b6:	42 0d       	add	r20, r2
     2b8:	53 1d       	adc	r21, r3
     2ba:	64 1d       	adc	r22, r4
     2bc:	75 1d       	adc	r23, r5
     2be:	72 01       	movw	r14, r4
     2c0:	61 01       	movw	r12, r2
     2c2:	0b 85       	ldd	r16, Y+11	; 0x0b
     2c4:	1c 85       	ldd	r17, Y+12	; 0x0c
     2c6:	2d 85       	ldd	r18, Y+13	; 0x0d
     2c8:	3e 85       	ldd	r19, Y+14	; 0x0e
     2ca:	cf 01       	movw	r24, r30
     2cc:	0e 94 e6 1c 	call	0x39cc	; 0x39cc <prvInsertTimerInActiveList>
     2d0:	88 23       	and	r24, r24
     2d2:	99 f0       	breq	.+38     	; 0x2fa <prvTimerTask+0xec>
     2d4:	c8 2c       	mov	r12, r8
     2d6:	d9 2c       	mov	r13, r9
     2d8:	ea 2c       	mov	r14, r10
     2da:	fb 2c       	mov	r15, r11
     2dc:	00 e0       	ldi	r16, 0x00	; 0
     2de:	10 e0       	ldi	r17, 0x00	; 0
     2e0:	a2 01       	movw	r20, r4
     2e2:	91 01       	movw	r18, r2
     2e4:	60 e0       	ldi	r22, 0x00	; 0
     2e6:	8f 85       	ldd	r24, Y+15	; 0x0f
     2e8:	98 89       	ldd	r25, Y+16	; 0x10
     2ea:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <xTimerGenericCommand>
     2ee:	05 c0       	rjmp	.+10     	; 0x2fa <prvTimerTask+0xec>
     2f0:	8e 7f       	andi	r24, 0xFE	; 254
     2f2:	af 85       	ldd	r26, Y+15	; 0x0f
     2f4:	b8 89       	ldd	r27, Y+16	; 0x10
     2f6:	57 96       	adiw	r26, 0x17	; 23
     2f8:	8c 93       	st	X, r24
     2fa:	af 85       	ldd	r26, Y+15	; 0x0f
     2fc:	b8 89       	ldd	r27, Y+16	; 0x10
     2fe:	54 96       	adiw	r26, 0x14	; 20
     300:	ed 91       	ld	r30, X+
     302:	fc 91       	ld	r31, X
     304:	55 97       	sbiw	r26, 0x15	; 21
     306:	cd 01       	movw	r24, r26
     308:	19 95       	eicall
     30a:	a2 c0       	rjmp	.+324    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     30c:	20 e0       	ldi	r18, 0x00	; 0
     30e:	b2 01       	movw	r22, r4
     310:	a1 01       	movw	r20, r2
     312:	8b 85       	ldd	r24, Y+11	; 0x0b
     314:	9c 85       	ldd	r25, Y+12	; 0x0c
     316:	ad 85       	ldd	r26, Y+13	; 0x0d
     318:	be 85       	ldd	r27, Y+14	; 0x0e
     31a:	48 1b       	sub	r20, r24
     31c:	59 0b       	sbc	r21, r25
     31e:	6a 0b       	sbc	r22, r26
     320:	7b 0b       	sbc	r23, r27
     322:	80 91 d1 18 	lds	r24, 0x18D1	; 0x8018d1 <xTimerQueue>
     326:	90 91 d2 18 	lds	r25, 0x18D2	; 0x8018d2 <xTimerQueue+0x1>
     32a:	0e 94 b3 11 	call	0x2366	; 0x2366 <vQueueWaitForMessageRestricted>
     32e:	0e 94 99 17 	call	0x2f32	; 0x2f32 <xTaskResumeAll>
     332:	81 11       	cpse	r24, r1
     334:	8d c0       	rjmp	.+282    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     336:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <vPortYield>
     33a:	8a c0       	rjmp	.+276    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     33c:	0e 94 99 17 	call	0x2f32	; 0x2f32 <xTaskResumeAll>
     340:	87 c0       	rjmp	.+270    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     342:	89 81       	ldd	r24, Y+1	; 0x01
     344:	88 23       	and	r24, r24
     346:	0c f4       	brge	.+2      	; 0x34a <prvTimerTask+0x13c>
     348:	83 c0       	rjmp	.+262    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     34a:	4e 80       	ldd	r4, Y+6	; 0x06
     34c:	5f 80       	ldd	r5, Y+7	; 0x07
     34e:	d2 01       	movw	r26, r4
     350:	1c 96       	adiw	r26, 0x0c	; 12
     352:	8d 91       	ld	r24, X+
     354:	9c 91       	ld	r25, X
     356:	1d 97       	sbiw	r26, 0x0d	; 13
     358:	89 2b       	or	r24, r25
     35a:	21 f0       	breq	.+8      	; 0x364 <prvTimerTask+0x156>
     35c:	c2 01       	movw	r24, r4
     35e:	02 96       	adiw	r24, 0x02	; 2
     360:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <uxListRemove>
     364:	ce 01       	movw	r24, r28
     366:	08 96       	adiw	r24, 0x08	; 8
     368:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <prvSampleTimeNow>
     36c:	8b 01       	movw	r16, r22
     36e:	9c 01       	movw	r18, r24
     370:	e9 81       	ldd	r30, Y+1	; 0x01
     372:	0e 2e       	mov	r0, r30
     374:	00 0c       	add	r0, r0
     376:	ff 0b       	sbc	r31, r31
     378:	ea 30       	cpi	r30, 0x0A	; 10
     37a:	f1 05       	cpc	r31, r1
     37c:	08 f0       	brcs	.+2      	; 0x380 <prvTimerTask+0x172>
     37e:	68 c0       	rjmp	.+208    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     380:	88 27       	eor	r24, r24
     382:	ee 58       	subi	r30, 0x8E	; 142
     384:	ff 4f       	sbci	r31, 0xFF	; 255
     386:	8f 4f       	sbci	r24, 0xFF	; 255
     388:	0c 94 5e 2f 	jmp	0x5ebc	; 0x5ebc <__tablejump2__>
     38c:	f2 01       	movw	r30, r4
     38e:	87 89       	ldd	r24, Z+23	; 0x17
     390:	81 60       	ori	r24, 0x01	; 1
     392:	87 8b       	std	Z+23, r24	; 0x17
     394:	ca 80       	ldd	r12, Y+2	; 0x02
     396:	db 80       	ldd	r13, Y+3	; 0x03
     398:	ec 80       	ldd	r14, Y+4	; 0x04
     39a:	fd 80       	ldd	r15, Y+5	; 0x05
     39c:	46 85       	ldd	r20, Z+14	; 0x0e
     39e:	57 85       	ldd	r21, Z+15	; 0x0f
     3a0:	60 89       	ldd	r22, Z+16	; 0x10
     3a2:	71 89       	ldd	r23, Z+17	; 0x11
     3a4:	4c 0d       	add	r20, r12
     3a6:	5d 1d       	adc	r21, r13
     3a8:	6e 1d       	adc	r22, r14
     3aa:	7f 1d       	adc	r23, r15
     3ac:	c2 01       	movw	r24, r4
     3ae:	0e 94 e6 1c 	call	0x39cc	; 0x39cc <prvInsertTimerInActiveList>
     3b2:	88 23       	and	r24, r24
     3b4:	09 f4       	brne	.+2      	; 0x3b8 <prvTimerTask+0x1aa>
     3b6:	4c c0       	rjmp	.+152    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     3b8:	d2 01       	movw	r26, r4
     3ba:	54 96       	adiw	r26, 0x14	; 20
     3bc:	ed 91       	ld	r30, X+
     3be:	fc 91       	ld	r31, X
     3c0:	55 97       	sbiw	r26, 0x15	; 21
     3c2:	c2 01       	movw	r24, r4
     3c4:	19 95       	eicall
     3c6:	f2 01       	movw	r30, r4
     3c8:	87 89       	ldd	r24, Z+23	; 0x17
     3ca:	82 ff       	sbrs	r24, 2
     3cc:	41 c0       	rjmp	.+130    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     3ce:	4a 81       	ldd	r20, Y+2	; 0x02
     3d0:	5b 81       	ldd	r21, Y+3	; 0x03
     3d2:	6c 81       	ldd	r22, Y+4	; 0x04
     3d4:	7d 81       	ldd	r23, Y+5	; 0x05
     3d6:	86 85       	ldd	r24, Z+14	; 0x0e
     3d8:	97 85       	ldd	r25, Z+15	; 0x0f
     3da:	a0 89       	ldd	r26, Z+16	; 0x10
     3dc:	b1 89       	ldd	r27, Z+17	; 0x11
     3de:	9a 01       	movw	r18, r20
     3e0:	ab 01       	movw	r20, r22
     3e2:	28 0f       	add	r18, r24
     3e4:	39 1f       	adc	r19, r25
     3e6:	4a 1f       	adc	r20, r26
     3e8:	5b 1f       	adc	r21, r27
     3ea:	c8 2c       	mov	r12, r8
     3ec:	d9 2c       	mov	r13, r9
     3ee:	ea 2c       	mov	r14, r10
     3f0:	fb 2c       	mov	r15, r11
     3f2:	00 e0       	ldi	r16, 0x00	; 0
     3f4:	10 e0       	ldi	r17, 0x00	; 0
     3f6:	60 e0       	ldi	r22, 0x00	; 0
     3f8:	c2 01       	movw	r24, r4
     3fa:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <xTimerGenericCommand>
     3fe:	28 c0       	rjmp	.+80     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     400:	d2 01       	movw	r26, r4
     402:	57 96       	adiw	r26, 0x17	; 23
     404:	8c 91       	ld	r24, X
     406:	57 97       	sbiw	r26, 0x17	; 23
     408:	8e 7f       	andi	r24, 0xFE	; 254
     40a:	57 96       	adiw	r26, 0x17	; 23
     40c:	8c 93       	st	X, r24
     40e:	20 c0       	rjmp	.+64     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     410:	f2 01       	movw	r30, r4
     412:	87 89       	ldd	r24, Z+23	; 0x17
     414:	81 60       	ori	r24, 0x01	; 1
     416:	87 8b       	std	Z+23, r24	; 0x17
     418:	4a 81       	ldd	r20, Y+2	; 0x02
     41a:	5b 81       	ldd	r21, Y+3	; 0x03
     41c:	6c 81       	ldd	r22, Y+4	; 0x04
     41e:	7d 81       	ldd	r23, Y+5	; 0x05
     420:	46 87       	std	Z+14, r20	; 0x0e
     422:	57 87       	std	Z+15, r21	; 0x0f
     424:	60 8b       	std	Z+16, r22	; 0x10
     426:	71 8b       	std	Z+17, r23	; 0x11
     428:	40 0f       	add	r20, r16
     42a:	51 1f       	adc	r21, r17
     42c:	62 1f       	adc	r22, r18
     42e:	73 1f       	adc	r23, r19
     430:	68 01       	movw	r12, r16
     432:	79 01       	movw	r14, r18
     434:	c2 01       	movw	r24, r4
     436:	0e 94 e6 1c 	call	0x39cc	; 0x39cc <prvInsertTimerInActiveList>
     43a:	0a c0       	rjmp	.+20     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     43c:	f2 01       	movw	r30, r4
     43e:	87 89       	ldd	r24, Z+23	; 0x17
     440:	81 fd       	sbrc	r24, 1
     442:	04 c0       	rjmp	.+8      	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
     444:	c2 01       	movw	r24, r4
     446:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <vPortFree>
     44a:	02 c0       	rjmp	.+4      	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     44c:	8e 7f       	andi	r24, 0xFE	; 254
     44e:	87 8b       	std	Z+23, r24	; 0x17
     450:	28 2d       	mov	r18, r8
     452:	39 2d       	mov	r19, r9
     454:	4a 2d       	mov	r20, r10
     456:	5b 2d       	mov	r21, r11
     458:	66 2d       	mov	r22, r6
     45a:	77 2d       	mov	r23, r7
     45c:	80 91 d1 18 	lds	r24, 0x18D1	; 0x8018d1 <xTimerQueue>
     460:	90 91 d2 18 	lds	r25, 0x18D2	; 0x8018d2 <xTimerQueue+0x1>
     464:	0e 94 4f 10 	call	0x209e	; 0x209e <xQueueReceive>
     468:	81 11       	cpse	r24, r1
     46a:	6b cf       	rjmp	.-298    	; 0x342 <prvTimerTask+0x134>
     46c:	e4 ce       	rjmp	.-568    	; 0x236 <prvTimerTask+0x28>
     46e:	0e 94 b0 16 	call	0x2d60	; 0x2d60 <vTaskSuspendAll>
     472:	ce 01       	movw	r24, r28
     474:	01 96       	adiw	r24, 0x01	; 1
     476:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <prvSampleTimeNow>
     47a:	6b 87       	std	Y+11, r22	; 0x0b
     47c:	7c 87       	std	Y+12, r23	; 0x0c
     47e:	8d 87       	std	Y+13, r24	; 0x0d
     480:	9e 87       	std	Y+14, r25	; 0x0e
     482:	89 81       	ldd	r24, Y+1	; 0x01
     484:	81 11       	cpse	r24, r1
     486:	5a cf       	rjmp	.-332    	; 0x33c <prvTimerTask+0x12e>
     488:	e0 91 d3 18 	lds	r30, 0x18D3	; 0x8018d3 <pxOverflowTimerList>
     48c:	f0 91 d4 18 	lds	r31, 0x18D4	; 0x8018d4 <pxOverflowTimerList+0x1>
     490:	80 81       	ld	r24, Z
     492:	21 e0       	ldi	r18, 0x01	; 1
     494:	81 11       	cpse	r24, r1
     496:	20 e0       	ldi	r18, 0x00	; 0
     498:	28 2c       	mov	r2, r8
     49a:	39 2c       	mov	r3, r9
     49c:	4a 2c       	mov	r4, r10
     49e:	5b 2c       	mov	r5, r11
     4a0:	36 cf       	rjmp	.-404    	; 0x30e <prvTimerTask+0x100>

000004a2 <__ctors_end>:
     4a2:	11 24       	eor	r1, r1
     4a4:	1f be       	out	0x3f, r1	; 63
     4a6:	cf ef       	ldi	r28, 0xFF	; 255
     4a8:	d1 e2       	ldi	r29, 0x21	; 33
     4aa:	de bf       	out	0x3e, r29	; 62
     4ac:	cd bf       	out	0x3d, r28	; 61
     4ae:	00 e0       	ldi	r16, 0x00	; 0
     4b0:	0c bf       	out	0x3c, r16	; 60

000004b2 <__do_copy_data>:
     4b2:	17 e0       	ldi	r17, 0x07	; 7
     4b4:	a0 e0       	ldi	r26, 0x00	; 0
     4b6:	b2 e0       	ldi	r27, 0x02	; 2
     4b8:	e0 e9       	ldi	r30, 0x90	; 144
     4ba:	f9 e6       	ldi	r31, 0x69	; 105
     4bc:	00 e0       	ldi	r16, 0x00	; 0
     4be:	0b bf       	out	0x3b, r16	; 59
     4c0:	02 c0       	rjmp	.+4      	; 0x4c6 <__do_copy_data+0x14>
     4c2:	07 90       	elpm	r0, Z+
     4c4:	0d 92       	st	X+, r0
     4c6:	a0 3b       	cpi	r26, 0xB0	; 176
     4c8:	b1 07       	cpc	r27, r17
     4ca:	d9 f7       	brne	.-10     	; 0x4c2 <__do_copy_data+0x10>

000004cc <__do_clear_bss>:
     4cc:	2a e1       	ldi	r18, 0x1A	; 26
     4ce:	a0 eb       	ldi	r26, 0xB0	; 176
     4d0:	b7 e0       	ldi	r27, 0x07	; 7
     4d2:	01 c0       	rjmp	.+2      	; 0x4d6 <.do_clear_bss_start>

000004d4 <.do_clear_bss_loop>:
     4d4:	1d 92       	st	X+, r1

000004d6 <.do_clear_bss_start>:
     4d6:	ad 38       	cpi	r26, 0x8D	; 141
     4d8:	b2 07       	cpc	r27, r18
     4da:	e1 f7       	brne	.-8      	; 0x4d4 <.do_clear_bss_loop>
     4dc:	0e 94 5a 1f 	call	0x3eb4	; 0x3eb4 <main>
     4e0:	0c 94 c6 34 	jmp	0x698c	; 0x698c <_exit>

000004e4 <__bad_interrupt>:
     4e4:	8d cd       	rjmp	.-1254   	; 0x0 <__vectors>

000004e6 <time>:
     4e6:	fc 01       	movw	r30, r24
     4e8:	0f b6       	in	r0, 0x3f	; 63
     4ea:	f8 94       	cli
     4ec:	60 91 89 1a 	lds	r22, 0x1A89	; 0x801a89 <__system_time>
     4f0:	70 91 8a 1a 	lds	r23, 0x1A8A	; 0x801a8a <__system_time+0x1>
     4f4:	80 91 8b 1a 	lds	r24, 0x1A8B	; 0x801a8b <__system_time+0x2>
     4f8:	90 91 8c 1a 	lds	r25, 0x1A8C	; 0x801a8c <__system_time+0x3>
     4fc:	0f be       	out	0x3f, r0	; 63
     4fe:	30 97       	sbiw	r30, 0x00	; 0
     500:	21 f0       	breq	.+8      	; 0x50a <time+0x24>
     502:	60 83       	st	Z, r22
     504:	71 83       	std	Z+1, r23	; 0x01
     506:	82 83       	std	Z+2, r24	; 0x02
     508:	93 83       	std	Z+3, r25	; 0x03
     50a:	08 95       	ret

0000050c <co2Reader_create>:
void co2Reader_destroy(co2reader_t self) {
	if (self == NULL)
		return;
	vTaskDelete(self->handleTask);
	vPortFree(self);
}
     50c:	2f 92       	push	r2
     50e:	3f 92       	push	r3
     510:	4f 92       	push	r4
     512:	5f 92       	push	r5
     514:	6f 92       	push	r6
     516:	7f 92       	push	r7
     518:	8f 92       	push	r8
     51a:	9f 92       	push	r9
     51c:	af 92       	push	r10
     51e:	bf 92       	push	r11
     520:	cf 92       	push	r12
     522:	df 92       	push	r13
     524:	ef 92       	push	r14
     526:	ff 92       	push	r15
     528:	0f 93       	push	r16
     52a:	1f 93       	push	r17
     52c:	cf 93       	push	r28
     52e:	df 93       	push	r29
     530:	d8 2f       	mov	r29, r24
     532:	c6 2f       	mov	r28, r22
     534:	1a 01       	movw	r2, r20
     536:	28 01       	movw	r4, r16
     538:	39 01       	movw	r6, r18
     53a:	87 01       	movw	r16, r14
     53c:	64 e0       	ldi	r22, 0x04	; 4
     53e:	70 e0       	ldi	r23, 0x00	; 0
     540:	81 e0       	ldi	r24, 0x01	; 1
     542:	90 e0       	ldi	r25, 0x00	; 0
     544:	0e 94 7a 2f 	call	0x5ef4	; 0x5ef4 <calloc>
     548:	4c 01       	movw	r8, r24
     54a:	89 2b       	or	r24, r25
     54c:	69 f1       	breq	.+90     	; 0x5a8 <co2Reader_create+0x9c>
     54e:	f4 01       	movw	r30, r8
     550:	11 92       	st	Z+, r1
     552:	11 92       	st	Z+, r1
     554:	7f 01       	movw	r14, r30
     556:	30 92 bb 07 	sts	0x07BB, r3	; 0x8007bb <_startMeasureEventGroup+0x1>
     55a:	20 92 ba 07 	sts	0x07BA, r2	; 0x8007ba <_startMeasureEventGroup>
     55e:	40 92 b6 07 	sts	0x07B6, r4	; 0x8007b6 <_startMeasureBit>
     562:	50 92 b7 07 	sts	0x07B7, r5	; 0x8007b7 <_startMeasureBit+0x1>
     566:	60 92 b8 07 	sts	0x07B8, r6	; 0x8007b8 <_startMeasureBit+0x2>
     56a:	70 92 b9 07 	sts	0x07B9, r7	; 0x8007b9 <_startMeasureBit+0x3>
     56e:	10 93 b5 07 	sts	0x07B5, r17	; 0x8007b5 <_readyEventGroup+0x1>
     572:	00 93 b4 07 	sts	0x07B4, r16	; 0x8007b4 <_readyEventGroup>
     576:	a0 92 b0 07 	sts	0x07B0, r10	; 0x8007b0 <__data_end>
     57a:	b0 92 b1 07 	sts	0x07B1, r11	; 0x8007b1 <__data_end+0x1>
     57e:	c0 92 b2 07 	sts	0x07B2, r12	; 0x8007b2 <__data_end+0x2>
     582:	d0 92 b3 07 	sts	0x07B3, r13	; 0x8007b3 <__data_end+0x3>
     586:	60 e0       	ldi	r22, 0x00	; 0
     588:	70 e0       	ldi	r23, 0x00	; 0
     58a:	83 e0       	ldi	r24, 0x03	; 3
     58c:	0e 94 18 27 	call	0x4e30	; 0x4e30 <mh_z19_create>
     590:	4c 2f       	mov	r20, r28
     592:	50 e0       	ldi	r21, 0x00	; 0
     594:	48 53       	subi	r20, 0x38	; 56
     596:	5f 4f       	sbci	r21, 0xFF	; 255
     598:	0d 2f       	mov	r16, r29
     59a:	94 01       	movw	r18, r8
     59c:	62 e7       	ldi	r22, 0x72	; 114
     59e:	72 e0       	ldi	r23, 0x02	; 2
     5a0:	8b e3       	ldi	r24, 0x3B	; 59
     5a2:	93 e0       	ldi	r25, 0x03	; 3
     5a4:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <xTaskCreate>
     5a8:	c4 01       	movw	r24, r8
     5aa:	df 91       	pop	r29
     5ac:	cf 91       	pop	r28
     5ae:	1f 91       	pop	r17
     5b0:	0f 91       	pop	r16
     5b2:	ff 90       	pop	r15
     5b4:	ef 90       	pop	r14
     5b6:	df 90       	pop	r13
     5b8:	cf 90       	pop	r12
     5ba:	bf 90       	pop	r11
     5bc:	af 90       	pop	r10
     5be:	9f 90       	pop	r9
     5c0:	8f 90       	pop	r8
     5c2:	7f 90       	pop	r7
     5c4:	6f 90       	pop	r6
     5c6:	5f 90       	pop	r5
     5c8:	4f 90       	pop	r4
     5ca:	3f 90       	pop	r3
     5cc:	2f 90       	pop	r2
     5ce:	08 95       	ret

000005d0 <co2Reader_measure>:


void co2Reader_measure(co2reader_t self) {
     5d0:	cf 92       	push	r12
     5d2:	df 92       	push	r13
     5d4:	ef 92       	push	r14
     5d6:	ff 92       	push	r15
     5d8:	0f 93       	push	r16
     5da:	1f 93       	push	r17
     5dc:	cf 93       	push	r28
     5de:	df 93       	push	r29
     5e0:	ec 01       	movw	r28, r24
	
	EventBits_t uxBits = xEventGroupWaitBits(_startMeasureEventGroup,
     5e2:	40 91 b6 07 	lds	r20, 0x07B6	; 0x8007b6 <_startMeasureBit>
     5e6:	50 91 b7 07 	lds	r21, 0x07B7	; 0x8007b7 <_startMeasureBit+0x1>
     5ea:	60 91 b8 07 	lds	r22, 0x07B8	; 0x8007b8 <_startMeasureBit+0x2>
     5ee:	70 91 b9 07 	lds	r23, 0x07B9	; 0x8007b9 <_startMeasureBit+0x3>
     5f2:	cc 24       	eor	r12, r12
     5f4:	ca 94       	dec	r12
     5f6:	dc 2c       	mov	r13, r12
     5f8:	76 01       	movw	r14, r12
     5fa:	01 e0       	ldi	r16, 0x01	; 1
     5fc:	21 e0       	ldi	r18, 0x01	; 1
     5fe:	80 91 ba 07 	lds	r24, 0x07BA	; 0x8007ba <_startMeasureEventGroup>
     602:	90 91 bb 07 	lds	r25, 0x07BB	; 0x8007bb <_startMeasureEventGroup+0x1>
     606:	75 d6       	rcall	.+3306   	; 0x12f2 <xEventGroupWaitBits>
	_startMeasureBit,
	pdTRUE,
	pdTRUE, 
	portMAX_DELAY);
	
	if ((uxBits & (_startMeasureBit)) == (_startMeasureBit)) {
     608:	00 91 b6 07 	lds	r16, 0x07B6	; 0x8007b6 <_startMeasureBit>
     60c:	10 91 b7 07 	lds	r17, 0x07B7	; 0x8007b7 <_startMeasureBit+0x1>
     610:	20 91 b8 07 	lds	r18, 0x07B8	; 0x8007b8 <_startMeasureBit+0x2>
     614:	30 91 b9 07 	lds	r19, 0x07B9	; 0x8007b9 <_startMeasureBit+0x3>
     618:	dc 01       	movw	r26, r24
     61a:	cb 01       	movw	r24, r22
     61c:	80 23       	and	r24, r16
     61e:	91 23       	and	r25, r17
     620:	a2 23       	and	r26, r18
     622:	b3 23       	and	r27, r19
     624:	08 17       	cp	r16, r24
     626:	19 07       	cpc	r17, r25
     628:	2a 07       	cpc	r18, r26
     62a:	3b 07       	cpc	r19, r27
     62c:	d9 f4       	brne	.+54     	; 0x664 <co2Reader_measure+0x94>
				
		mh_z19_return_code_t return_code_co2_measurement = mh_z19_take_meassuring();
     62e:	0e 94 46 27 	call	0x4e8c	; 0x4e8c <mh_z19_take_meassuring>
     632:	18 2f       	mov	r17, r24
		vTaskDelay(300);
     634:	6c e2       	ldi	r22, 0x2C	; 44
     636:	71 e0       	ldi	r23, 0x01	; 1
     638:	80 e0       	ldi	r24, 0x00	; 0
     63a:	90 e0       	ldi	r25, 0x00	; 0
     63c:	0e 94 15 18 	call	0x302a	; 0x302a <vTaskDelay>
		if(return_code_co2_measurement == MHZ19_OK) {
     640:	11 11       	cpse	r17, r1
     642:	03 c0       	rjmp	.+6      	; 0x64a <co2Reader_measure+0x7a>
			mh_z19_get_co2_ppm(&self->value);
     644:	ce 01       	movw	r24, r28
     646:	0e 94 75 27 	call	0x4eea	; 0x4eea <mh_z19_get_co2_ppm>
		}
		xEventGroupSetBits(_readyEventGroup, _readyBit);
     64a:	40 91 b0 07 	lds	r20, 0x07B0	; 0x8007b0 <__data_end>
     64e:	50 91 b1 07 	lds	r21, 0x07B1	; 0x8007b1 <__data_end+0x1>
     652:	60 91 b2 07 	lds	r22, 0x07B2	; 0x8007b2 <__data_end+0x2>
     656:	70 91 b3 07 	lds	r23, 0x07B3	; 0x8007b3 <__data_end+0x3>
     65a:	80 91 b4 07 	lds	r24, 0x07B4	; 0x8007b4 <_readyEventGroup>
     65e:	90 91 b5 07 	lds	r25, 0x07B5	; 0x8007b5 <_readyEventGroup+0x1>
     662:	07 d7       	rcall	.+3598   	; 0x1472 <xEventGroupSetBits>
	}
}
     664:	df 91       	pop	r29
     666:	cf 91       	pop	r28
     668:	1f 91       	pop	r17
     66a:	0f 91       	pop	r16
     66c:	ff 90       	pop	r15
     66e:	ef 90       	pop	r14
     670:	df 90       	pop	r13
     672:	cf 90       	pop	r12
     674:	08 95       	ret

00000676 <co2Reader_executeTask>:
typedef struct co2reader {
	uint16_t value;
	TaskHandle_t handleTask;
}co2reader;

void co2Reader_executeTask(void* self) {
     676:	ec 01       	movw	r28, r24
	for (;;) {
		co2Reader_measure((co2reader_t)self);
     678:	ce 01       	movw	r24, r28
     67a:	aa df       	rcall	.-172    	; 0x5d0 <co2Reader_measure>
     67c:	fd cf       	rjmp	.-6      	; 0x678 <co2Reader_executeTask+0x2>

0000067e <co2Reader_getCO2>:
	}
}

uint16_t co2Reader_getCO2(co2reader_t self) {
	return self->value;
}
     67e:	fc 01       	movw	r30, r24
     680:	80 81       	ld	r24, Z
     682:	91 81       	ldd	r25, Z+1	; 0x01
     684:	08 95       	ret

00000686 <configuration_create>:

void configuration_create(SemaphoreHandle_t semaphore) {
	_working = calloc(1, sizeof(bool));
	_ventilation = calloc(1, sizeof(bool));

	_working = true;
     686:	21 e0       	ldi	r18, 0x01	; 1
     688:	20 93 bf 07 	sts	0x07BF, r18	; 0x8007bf <_working>
	_ventilation = false;
     68c:	10 92 be 07 	sts	0x07BE, r1	; 0x8007be <_ventilation>

	_semaphore = semaphore;
     690:	90 93 bd 07 	sts	0x07BD, r25	; 0x8007bd <_semaphore+0x1>
     694:	80 93 bc 07 	sts	0x07BC, r24	; 0x8007bc <_semaphore>
     698:	08 95       	ret

0000069a <configuration_setWorking>:
}

void configuration_setWorking(bool value) {
     69a:	0f 93       	push	r16
     69c:	cf 93       	push	r28
	if (_semaphore != NULL) {
     69e:	20 91 bc 07 	lds	r18, 0x07BC	; 0x8007bc <_semaphore>
     6a2:	30 91 bd 07 	lds	r19, 0x07BD	; 0x8007bd <_semaphore+0x1>
     6a6:	21 15       	cp	r18, r1
     6a8:	31 05       	cpc	r19, r1
     6aa:	b1 f0       	breq	.+44     	; 0x6d8 <configuration_setWorking+0x3e>
     6ac:	c8 2f       	mov	r28, r24
		xSemaphoreTake(_semaphore, portMAX_DELAY);
     6ae:	4f ef       	ldi	r20, 0xFF	; 255
     6b0:	5f ef       	ldi	r21, 0xFF	; 255
     6b2:	ba 01       	movw	r22, r20
     6b4:	c9 01       	movw	r24, r18
     6b6:	0e 94 e7 10 	call	0x21ce	; 0x21ce <xQueueSemaphoreTake>
		_working = value;
     6ba:	c0 93 bf 07 	sts	0x07BF, r28	; 0x8007bf <_working>
		xSemaphoreGive(_semaphore);
     6be:	00 e0       	ldi	r16, 0x00	; 0
     6c0:	20 e0       	ldi	r18, 0x00	; 0
     6c2:	30 e0       	ldi	r19, 0x00	; 0
     6c4:	a9 01       	movw	r20, r18
     6c6:	60 e0       	ldi	r22, 0x00	; 0
     6c8:	70 e0       	ldi	r23, 0x00	; 0
     6ca:	80 91 bc 07 	lds	r24, 0x07BC	; 0x8007bc <_semaphore>
     6ce:	90 91 bd 07 	lds	r25, 0x07BD	; 0x8007bd <_semaphore+0x1>
     6d2:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <xQueueGenericSend>
     6d6:	02 c0       	rjmp	.+4      	; 0x6dc <configuration_setWorking+0x42>
	}
	else _working = value;
     6d8:	80 93 bf 07 	sts	0x07BF, r24	; 0x8007bf <_working>
}
     6dc:	cf 91       	pop	r28
     6de:	0f 91       	pop	r16
     6e0:	08 95       	ret

000006e2 <configuration_getWorking>:

void configuration_getWorking(bool* working) {
     6e2:	0f 93       	push	r16
     6e4:	cf 93       	push	r28
     6e6:	df 93       	push	r29
	if (_semaphore != NULL) {
     6e8:	20 91 bc 07 	lds	r18, 0x07BC	; 0x8007bc <_semaphore>
     6ec:	30 91 bd 07 	lds	r19, 0x07BD	; 0x8007bd <_semaphore+0x1>
     6f0:	21 15       	cp	r18, r1
     6f2:	31 05       	cpc	r19, r1
     6f4:	b9 f0       	breq	.+46     	; 0x724 <configuration_getWorking+0x42>
     6f6:	ec 01       	movw	r28, r24
		xSemaphoreTake(_semaphore, portMAX_DELAY);
     6f8:	4f ef       	ldi	r20, 0xFF	; 255
     6fa:	5f ef       	ldi	r21, 0xFF	; 255
     6fc:	ba 01       	movw	r22, r20
     6fe:	c9 01       	movw	r24, r18
     700:	0e 94 e7 10 	call	0x21ce	; 0x21ce <xQueueSemaphoreTake>
		*working = _working;
     704:	80 91 bf 07 	lds	r24, 0x07BF	; 0x8007bf <_working>
     708:	88 83       	st	Y, r24
		xSemaphoreGive(_semaphore);
     70a:	00 e0       	ldi	r16, 0x00	; 0
     70c:	20 e0       	ldi	r18, 0x00	; 0
     70e:	30 e0       	ldi	r19, 0x00	; 0
     710:	a9 01       	movw	r20, r18
     712:	60 e0       	ldi	r22, 0x00	; 0
     714:	70 e0       	ldi	r23, 0x00	; 0
     716:	80 91 bc 07 	lds	r24, 0x07BC	; 0x8007bc <_semaphore>
     71a:	90 91 bd 07 	lds	r25, 0x07BD	; 0x8007bd <_semaphore+0x1>
     71e:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <xQueueGenericSend>
     722:	04 c0       	rjmp	.+8      	; 0x72c <configuration_getWorking+0x4a>
	}
	else *working = _working;
     724:	20 91 bf 07 	lds	r18, 0x07BF	; 0x8007bf <_working>
     728:	fc 01       	movw	r30, r24
     72a:	20 83       	st	Z, r18
}
     72c:	df 91       	pop	r29
     72e:	cf 91       	pop	r28
     730:	0f 91       	pop	r16
     732:	08 95       	ret

00000734 <configuration_setVentilation>:

void configuration_setVentilation(bool value) {
     734:	0f 93       	push	r16
     736:	cf 93       	push	r28
	if (_semaphore != NULL) {
     738:	20 91 bc 07 	lds	r18, 0x07BC	; 0x8007bc <_semaphore>
     73c:	30 91 bd 07 	lds	r19, 0x07BD	; 0x8007bd <_semaphore+0x1>
     740:	21 15       	cp	r18, r1
     742:	31 05       	cpc	r19, r1
     744:	b1 f0       	breq	.+44     	; 0x772 <configuration_setVentilation+0x3e>
     746:	c8 2f       	mov	r28, r24
		xSemaphoreTake(_semaphore, portMAX_DELAY);
     748:	4f ef       	ldi	r20, 0xFF	; 255
     74a:	5f ef       	ldi	r21, 0xFF	; 255
     74c:	ba 01       	movw	r22, r20
     74e:	c9 01       	movw	r24, r18
     750:	0e 94 e7 10 	call	0x21ce	; 0x21ce <xQueueSemaphoreTake>
		_ventilation = value;
     754:	c0 93 be 07 	sts	0x07BE, r28	; 0x8007be <_ventilation>
		xSemaphoreGive(_semaphore);
     758:	00 e0       	ldi	r16, 0x00	; 0
     75a:	20 e0       	ldi	r18, 0x00	; 0
     75c:	30 e0       	ldi	r19, 0x00	; 0
     75e:	a9 01       	movw	r20, r18
     760:	60 e0       	ldi	r22, 0x00	; 0
     762:	70 e0       	ldi	r23, 0x00	; 0
     764:	80 91 bc 07 	lds	r24, 0x07BC	; 0x8007bc <_semaphore>
     768:	90 91 bd 07 	lds	r25, 0x07BD	; 0x8007bd <_semaphore+0x1>
     76c:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <xQueueGenericSend>
     770:	02 c0       	rjmp	.+4      	; 0x776 <configuration_setVentilation+0x42>
	}
	else _ventilation = value;
     772:	80 93 be 07 	sts	0x07BE, r24	; 0x8007be <_ventilation>
}
     776:	cf 91       	pop	r28
     778:	0f 91       	pop	r16
     77a:	08 95       	ret

0000077c <configuration_getVentilation>:

void configuration_getVentilation(bool* ventilation) {
     77c:	0f 93       	push	r16
     77e:	cf 93       	push	r28
     780:	df 93       	push	r29
	if (_semaphore != NULL) {
     782:	20 91 bc 07 	lds	r18, 0x07BC	; 0x8007bc <_semaphore>
     786:	30 91 bd 07 	lds	r19, 0x07BD	; 0x8007bd <_semaphore+0x1>
     78a:	21 15       	cp	r18, r1
     78c:	31 05       	cpc	r19, r1
     78e:	b9 f0       	breq	.+46     	; 0x7be <configuration_getVentilation+0x42>
     790:	ec 01       	movw	r28, r24
		xSemaphoreTake(_semaphore, portMAX_DELAY);
     792:	4f ef       	ldi	r20, 0xFF	; 255
     794:	5f ef       	ldi	r21, 0xFF	; 255
     796:	ba 01       	movw	r22, r20
     798:	c9 01       	movw	r24, r18
     79a:	0e 94 e7 10 	call	0x21ce	; 0x21ce <xQueueSemaphoreTake>
		*ventilation = _ventilation;
     79e:	80 91 be 07 	lds	r24, 0x07BE	; 0x8007be <_ventilation>
     7a2:	88 83       	st	Y, r24
		xSemaphoreGive(_semaphore);
     7a4:	00 e0       	ldi	r16, 0x00	; 0
     7a6:	20 e0       	ldi	r18, 0x00	; 0
     7a8:	30 e0       	ldi	r19, 0x00	; 0
     7aa:	a9 01       	movw	r20, r18
     7ac:	60 e0       	ldi	r22, 0x00	; 0
     7ae:	70 e0       	ldi	r23, 0x00	; 0
     7b0:	80 91 bc 07 	lds	r24, 0x07BC	; 0x8007bc <_semaphore>
     7b4:	90 91 bd 07 	lds	r25, 0x07BD	; 0x8007bd <_semaphore+0x1>
     7b8:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <xQueueGenericSend>
     7bc:	04 c0       	rjmp	.+8      	; 0x7c6 <configuration_getVentilation+0x4a>
	}
	else *ventilation = _ventilation;
     7be:	20 91 be 07 	lds	r18, 0x07BE	; 0x8007be <_ventilation>
     7c2:	fc 01       	movw	r30, r24
     7c4:	20 83       	st	Z, r18
     7c6:	df 91       	pop	r29
     7c8:	cf 91       	pop	r28
     7ca:	0f 91       	pop	r16
     7cc:	08 95       	ret

000007ce <currentCondition_create>:
}

void currentCondition_destroy(currentCondition_t self) {
	if(self == NULL)
		return;
	vPortFree(self);
     7ce:	68 e0       	ldi	r22, 0x08	; 8
     7d0:	70 e0       	ldi	r23, 0x00	; 0
     7d2:	81 e0       	ldi	r24, 0x01	; 1
     7d4:	90 e0       	ldi	r25, 0x00	; 0
     7d6:	0e 94 7a 2f 	call	0x5ef4	; 0x5ef4 <calloc>
     7da:	00 97       	sbiw	r24, 0x00	; 0
     7dc:	49 f0       	breq	.+18     	; 0x7f0 <currentCondition_create+0x22>
     7de:	fc 01       	movw	r30, r24
     7e0:	13 82       	std	Z+3, r1	; 0x03
     7e2:	12 82       	std	Z+2, r1	; 0x02
     7e4:	15 82       	std	Z+5, r1	; 0x05
     7e6:	14 82       	std	Z+4, r1	; 0x04
     7e8:	11 82       	std	Z+1, r1	; 0x01
     7ea:	10 82       	st	Z, r1
     7ec:	17 82       	std	Z+7, r1	; 0x07
     7ee:	16 82       	std	Z+6, r1	; 0x06
     7f0:	08 95       	ret

000007f2 <currentCondition_setCO2>:
     7f2:	00 97       	sbiw	r24, 0x00	; 0
     7f4:	49 f0       	breq	.+18     	; 0x808 <currentCondition_setCO2+0x16>
     7f6:	9b 01       	movw	r18, r22
     7f8:	28 5c       	subi	r18, 0xC8	; 200
     7fa:	31 09       	sbc	r19, r1
     7fc:	29 34       	cpi	r18, 0x49	; 73
     7fe:	36 42       	sbci	r19, 0x26	; 38
     800:	18 f4       	brcc	.+6      	; 0x808 <currentCondition_setCO2+0x16>
     802:	fc 01       	movw	r30, r24
     804:	71 83       	std	Z+1, r23	; 0x01
     806:	60 83       	st	Z, r22
     808:	08 95       	ret

0000080a <currentCondition_setHumidity>:
     80a:	00 97       	sbiw	r24, 0x00	; 0
     80c:	39 f0       	breq	.+14     	; 0x81c <currentCondition_setHumidity+0x12>
     80e:	69 3e       	cpi	r22, 0xE9	; 233
     810:	23 e0       	ldi	r18, 0x03	; 3
     812:	72 07       	cpc	r23, r18
     814:	18 f4       	brcc	.+6      	; 0x81c <currentCondition_setHumidity+0x12>
     816:	fc 01       	movw	r30, r24
     818:	75 83       	std	Z+5, r23	; 0x05
     81a:	64 83       	std	Z+4, r22	; 0x04
     81c:	08 95       	ret

0000081e <currentCondition_setTemperature>:
     81e:	00 97       	sbiw	r24, 0x00	; 0
     820:	49 f0       	breq	.+18     	; 0x834 <currentCondition_setTemperature+0x16>
     822:	9b 01       	movw	r18, r22
     824:	20 57       	subi	r18, 0x70	; 112
     826:	3e 4f       	sbci	r19, 0xFE	; 254
     828:	27 3b       	cpi	r18, 0xB7	; 183
     82a:	33 40       	sbci	r19, 0x03	; 3
     82c:	18 f4       	brcc	.+6      	; 0x834 <currentCondition_setTemperature+0x16>
     82e:	fc 01       	movw	r30, r24
     830:	73 83       	std	Z+3, r23	; 0x03
     832:	62 83       	std	Z+2, r22	; 0x02
     834:	08 95       	ret

00000836 <currentCondition_setSound>:
     836:	00 97       	sbiw	r24, 0x00	; 0
     838:	31 f0       	breq	.+12     	; 0x846 <currentCondition_setSound+0x10>
     83a:	67 39       	cpi	r22, 0x97	; 151
     83c:	71 05       	cpc	r23, r1
     83e:	18 f4       	brcc	.+6      	; 0x846 <currentCondition_setSound+0x10>
     840:	fc 01       	movw	r30, r24
     842:	77 83       	std	Z+7, r23	; 0x07
     844:	66 83       	std	Z+6, r22	; 0x06
     846:	08 95       	ret

00000848 <getcurrentConditionPayload>:
}

lora_payload_t getcurrentConditionPayload(currentCondition_t self)
{
     848:	fc 01       	movw	r30, r24
     84a:	db 01       	movw	r26, r22
	lora_payload_t payload;
	payload.port_no = 1;
	payload.len = 8;
	
	int16_t tempData = self->temperatureData;
     84c:	12 96       	adiw	r26, 0x02	; 2
     84e:	6c 91       	ld	r22, X
     850:	12 97       	sbiw	r26, 0x02	; 2
     852:	13 96       	adiw	r26, 0x03	; 3
     854:	7c 91       	ld	r23, X
     856:	13 97       	sbiw	r26, 0x03	; 3
	
	payload.bytes[0] = tempData >> 8;
	payload.bytes[1] = tempData & 0xFF;

	payload.bytes[2] = self->humidityData >> 8;
     858:	14 96       	adiw	r26, 0x04	; 4
     85a:	4c 91       	ld	r20, X
     85c:	14 97       	sbiw	r26, 0x04	; 4
     85e:	15 96       	adiw	r26, 0x05	; 5
     860:	5c 91       	ld	r21, X
     862:	15 97       	sbiw	r26, 0x05	; 5
	payload.bytes[3] = self->humidityData & 0xFF;
	
	payload.bytes[4] = self->co2Data >> 8;
     864:	2c 91       	ld	r18, X
     866:	11 96       	adiw	r26, 0x01	; 1
     868:	3c 91       	ld	r19, X
     86a:	11 97       	sbiw	r26, 0x01	; 1
	payload.bytes[5] = self->co2Data & 0xFF;
	
	payload.bytes[6] = self->soundData >> 8;
     86c:	16 96       	adiw	r26, 0x06	; 6
     86e:	8c 91       	ld	r24, X
     870:	16 97       	sbiw	r26, 0x06	; 6
     872:	17 96       	adiw	r26, 0x07	; 7
     874:	9c 91       	ld	r25, X
	payload.bytes[7] = self->soundData & 0xFF;
	
	return payload;
     876:	a1 e0       	ldi	r26, 0x01	; 1
     878:	a0 83       	st	Z, r26
     87a:	a8 e0       	ldi	r26, 0x08	; 8
     87c:	a1 83       	std	Z+1, r26	; 0x01
     87e:	72 83       	std	Z+2, r23	; 0x02
     880:	63 83       	std	Z+3, r22	; 0x03
     882:	54 83       	std	Z+4, r21	; 0x04
     884:	45 83       	std	Z+5, r20	; 0x05
     886:	36 83       	std	Z+6, r19	; 0x06
     888:	27 83       	std	Z+7, r18	; 0x07
     88a:	90 87       	std	Z+8, r25	; 0x08
     88c:	81 87       	std	Z+9, r24	; 0x09
	
}
     88e:	cf 01       	movw	r24, r30
     890:	08 95       	ret

00000892 <getSimplePayload>:
	
	uint16_t one = 0;
	payload.bytes[0] = one >> 8;
	payload.bytes[1] = one & 0xFF;
	
	return payload;
     892:	21 e0       	ldi	r18, 0x01	; 1
     894:	fc 01       	movw	r30, r24
     896:	20 83       	st	Z, r18
     898:	22 e0       	ldi	r18, 0x02	; 2
     89a:	21 83       	std	Z+1, r18	; 0x01
     89c:	12 82       	std	Z+2, r1	; 0x02
     89e:	13 82       	std	Z+3, r1	; 0x03
     8a0:	08 95       	ret

000008a2 <device_create>:
		device_startMeasuring((device_t)self);
	}
}

device_t device_create(UBaseType_t priority, UBaseType_t stack, EventGroupHandle_t startMeasureEventGroup, EventBits_t startMeasureBit,
EventGroupHandle_t readyEventGroup, EventBits_t readyBit, co2reader_t co2Reader, humAndTempReader_t humAndTempReader,soundReader_t soundReader, MessageBufferHandle_t uplinkMessageBuffer){
     8a2:	2f 92       	push	r2
     8a4:	3f 92       	push	r3
     8a6:	4f 92       	push	r4
     8a8:	5f 92       	push	r5
     8aa:	6f 92       	push	r6
     8ac:	7f 92       	push	r7
     8ae:	8f 92       	push	r8
     8b0:	9f 92       	push	r9
     8b2:	af 92       	push	r10
     8b4:	bf 92       	push	r11
     8b6:	cf 92       	push	r12
     8b8:	df 92       	push	r13
     8ba:	ef 92       	push	r14
     8bc:	ff 92       	push	r15
     8be:	0f 93       	push	r16
     8c0:	1f 93       	push	r17
     8c2:	cf 93       	push	r28
     8c4:	df 93       	push	r29
     8c6:	00 d0       	rcall	.+0      	; 0x8c8 <device_create+0x26>
     8c8:	1f 92       	push	r1
     8ca:	cd b7       	in	r28, 0x3d	; 61
     8cc:	de b7       	in	r29, 0x3e	; 62
     8ce:	28 2e       	mov	r2, r24
     8d0:	36 2e       	mov	r3, r22
     8d2:	5c 83       	std	Y+4, r21	; 0x04
     8d4:	4b 83       	std	Y+3, r20	; 0x03
     8d6:	28 01       	movw	r4, r16
     8d8:	39 01       	movw	r6, r18

	device_t _new_device = calloc(1, sizeof(device));
     8da:	6a e0       	ldi	r22, 0x0A	; 10
     8dc:	70 e0       	ldi	r23, 0x00	; 0
     8de:	81 e0       	ldi	r24, 0x01	; 1
     8e0:	90 e0       	ldi	r25, 0x00	; 0
     8e2:	0e 94 7a 2f 	call	0x5ef4	; 0x5ef4 <calloc>
     8e6:	9a 83       	std	Y+2, r25	; 0x02
     8e8:	89 83       	std	Y+1, r24	; 0x01
	if (_new_device == NULL)
     8ea:	00 97       	sbiw	r24, 0x00	; 0
     8ec:	09 f4       	brne	.+2      	; 0x8f0 <device_create+0x4e>
     8ee:	40 c0       	rjmp	.+128    	; 0x970 <device_create+0xce>
		return NULL;

	_new_device->co2reader = co2Reader;
     8f0:	fc 01       	movw	r30, r24
     8f2:	91 82       	std	Z+1, r9	; 0x01
     8f4:	80 82       	st	Z, r8
	_new_device->humAndTempReader = humAndTempReader;
     8f6:	8a 8d       	ldd	r24, Y+26	; 0x1a
     8f8:	9b 8d       	ldd	r25, Y+27	; 0x1b
     8fa:	93 83       	std	Z+3, r25	; 0x03
     8fc:	82 83       	std	Z+2, r24	; 0x02
	_new_device->soundReader=soundReader;
     8fe:	8c 8d       	ldd	r24, Y+28	; 0x1c
     900:	9d 8d       	ldd	r25, Y+29	; 0x1d
     902:	95 83       	std	Z+5, r25	; 0x05
     904:	84 83       	std	Z+4, r24	; 0x04
	currentCondition_t currentCond = currentCondition_create();
     906:	63 df       	rcall	.-314    	; 0x7ce <currentCondition_create>
	_new_device->currentCondition = currentCond;
     908:	e9 81       	ldd	r30, Y+1	; 0x01
     90a:	fa 81       	ldd	r31, Y+2	; 0x02
     90c:	97 83       	std	Z+7, r25	; 0x07
     90e:	86 83       	std	Z+6, r24	; 0x06

	_startMeasureEventGroup = startMeasureEventGroup;
     910:	8b 81       	ldd	r24, Y+3	; 0x03
     912:	9c 81       	ldd	r25, Y+4	; 0x04
     914:	90 93 e3 07 	sts	0x07E3, r25	; 0x8007e3 <_startMeasureEventGroup+0x1>
     918:	80 93 e2 07 	sts	0x07E2, r24	; 0x8007e2 <_startMeasureEventGroup>
	_startMeasureBit = startMeasureBit;
     91c:	40 92 de 07 	sts	0x07DE, r4	; 0x8007de <_startMeasureBit>
     920:	50 92 df 07 	sts	0x07DF, r5	; 0x8007df <_startMeasureBit+0x1>
     924:	60 92 e0 07 	sts	0x07E0, r6	; 0x8007e0 <_startMeasureBit+0x2>
     928:	70 92 e1 07 	sts	0x07E1, r7	; 0x8007e1 <_startMeasureBit+0x3>

	_readyEventGroup = readyEventGroup;
     92c:	f0 92 dd 07 	sts	0x07DD, r15	; 0x8007dd <_readyEventGroup+0x1>
     930:	e0 92 dc 07 	sts	0x07DC, r14	; 0x8007dc <_readyEventGroup>
	_readyBit = readyBit;
     934:	a0 92 d8 07 	sts	0x07D8, r10	; 0x8007d8 <_readyBit>
     938:	b0 92 d9 07 	sts	0x07D9, r11	; 0x8007d9 <_readyBit+0x1>
     93c:	c0 92 da 07 	sts	0x07DA, r12	; 0x8007da <_readyBit+0x2>
     940:	d0 92 db 07 	sts	0x07DB, r13	; 0x8007db <_readyBit+0x3>
	
	_uplinkmessageBuffer=uplinkMessageBuffer;
     944:	8e 8d       	ldd	r24, Y+30	; 0x1e
     946:	9f 8d       	ldd	r25, Y+31	; 0x1f
     948:	90 93 d7 07 	sts	0x07D7, r25	; 0x8007d7 <_uplinkmessageBuffer+0x1>
     94c:	80 93 d6 07 	sts	0x07D6, r24	; 0x8007d6 <_uplinkmessageBuffer>

	xTaskCreate(
     950:	43 2d       	mov	r20, r3
     952:	50 e0       	ldi	r21, 0x00	; 0
     954:	48 53       	subi	r20, 0x38	; 56
     956:	5f 4f       	sbci	r21, 0xFF	; 255
     958:	7f 01       	movw	r14, r30
     95a:	98 e0       	ldi	r25, 0x08	; 8
     95c:	e9 0e       	add	r14, r25
     95e:	f1 1c       	adc	r15, r1
     960:	02 2d       	mov	r16, r2
     962:	9f 01       	movw	r18, r30
     964:	6c e7       	ldi	r22, 0x7C	; 124
     966:	72 e0       	ldi	r23, 0x02	; 2
     968:	8d ed       	ldi	r24, 0xDD	; 221
     96a:	95 e0       	ldi	r25, 0x05	; 5
     96c:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <xTaskCreate>
		priority,
		&_new_device->handleTask
	);

	return _new_device;
}
     970:	89 81       	ldd	r24, Y+1	; 0x01
     972:	9a 81       	ldd	r25, Y+2	; 0x02
     974:	0f 90       	pop	r0
     976:	0f 90       	pop	r0
     978:	0f 90       	pop	r0
     97a:	0f 90       	pop	r0
     97c:	df 91       	pop	r29
     97e:	cf 91       	pop	r28
     980:	1f 91       	pop	r17
     982:	0f 91       	pop	r16
     984:	ff 90       	pop	r15
     986:	ef 90       	pop	r14
     988:	df 90       	pop	r13
     98a:	cf 90       	pop	r12
     98c:	bf 90       	pop	r11
     98e:	af 90       	pop	r10
     990:	9f 90       	pop	r9
     992:	8f 90       	pop	r8
     994:	7f 90       	pop	r7
     996:	6f 90       	pop	r6
     998:	5f 90       	pop	r5
     99a:	4f 90       	pop	r4
     99c:	3f 90       	pop	r3
     99e:	2f 90       	pop	r2
     9a0:	08 95       	ret

000009a2 <device_startMeasuring>:

void device_startMeasuring(device_t self) {
     9a2:	af 92       	push	r10
     9a4:	bf 92       	push	r11
     9a6:	cf 92       	push	r12
     9a8:	df 92       	push	r13
     9aa:	ef 92       	push	r14
     9ac:	ff 92       	push	r15
     9ae:	0f 93       	push	r16
     9b0:	1f 93       	push	r17
     9b2:	cf 93       	push	r28
     9b4:	df 93       	push	r29
     9b6:	cd b7       	in	r28, 0x3d	; 61
     9b8:	de b7       	in	r29, 0x3e	; 62
     9ba:	66 97       	sbiw	r28, 0x16	; 22
     9bc:	0f b6       	in	r0, 0x3f	; 63
     9be:	f8 94       	cli
     9c0:	de bf       	out	0x3e, r29	; 62
     9c2:	0f be       	out	0x3f, r0	; 63
     9c4:	cd bf       	out	0x3d, r28	; 61
     9c6:	5c 01       	movw	r10, r24
	//we should first check if device is on, get that from lora and add new eventBit 
	
	bool* works = pvPortMalloc(sizeof(bool));
     9c8:	81 e0       	ldi	r24, 0x01	; 1
     9ca:	90 e0       	ldi	r25, 0x00	; 0
     9cc:	38 d6       	rcall	.+3184   	; 0x163e <pvPortMalloc>
     9ce:	8c 01       	movw	r16, r24
	configuration_getWorking(works);
     9d0:	88 de       	rcall	.-752    	; 0x6e2 <configuration_getWorking>
     9d2:	f8 01       	movw	r30, r16
	if (*works == true)
     9d4:	80 81       	ld	r24, Z
     9d6:	88 23       	and	r24, r24
     9d8:	09 f4       	brne	.+2      	; 0x9dc <device_startMeasuring+0x3a>
     9da:	bc c0       	rjmp	.+376    	; 0xb54 <device_startMeasuring+0x1b2>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
	{

		bool* ventilate = pvPortMalloc(sizeof(bool));
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	2e d6       	rcall	.+3164   	; 0x163e <pvPortMalloc>
     9e2:	8c 01       	movw	r16, r24
		configuration_getVentilation(ventilate);
     9e4:	cb de       	rcall	.-618    	; 0x77c <configuration_getVentilation>
     9e6:	f8 01       	movw	r30, r16
		if(*ventilate == true)
     9e8:	80 81       	ld	r24, Z
     9ea:	88 23       	and	r24, r24
		{
			servo_open();
     9ec:	11 f0       	breq	.+4      	; 0x9f2 <device_startMeasuring+0x50>
     9ee:	6b d2       	rcall	.+1238   	; 0xec6 <servo_open>
     9f0:	01 c0       	rjmp	.+2      	; 0x9f4 <device_startMeasuring+0x52>
		} 
		else
		{
			servo_close();
     9f2:	6e d2       	rcall	.+1244   	; 0xed0 <servo_close>
     9f4:	40 91 de 07 	lds	r20, 0x07DE	; 0x8007de <_startMeasureBit>
		}

	////tell sensors to start meassuring 
	xEventGroupSetBits(_startMeasureEventGroup, _startMeasureBit);
     9f8:	50 91 df 07 	lds	r21, 0x07DF	; 0x8007df <_startMeasureBit+0x1>
     9fc:	60 91 e0 07 	lds	r22, 0x07E0	; 0x8007e0 <_startMeasureBit+0x2>
     a00:	70 91 e1 07 	lds	r23, 0x07E1	; 0x8007e1 <_startMeasureBit+0x3>
     a04:	80 91 e2 07 	lds	r24, 0x07E2	; 0x8007e2 <_startMeasureEventGroup>
     a08:	90 91 e3 07 	lds	r25, 0x07E3	; 0x8007e3 <_startMeasureEventGroup+0x1>
     a0c:	32 d5       	rcall	.+2660   	; 0x1472 <xEventGroupSetBits>
     a0e:	40 91 d8 07 	lds	r20, 0x07D8	; 0x8007d8 <_readyBit>

	//wait for sensors to read data
	EventBits_t uxBits = xEventGroupWaitBits(_readyEventGroup, 
     a12:	50 91 d9 07 	lds	r21, 0x07D9	; 0x8007d9 <_readyBit+0x1>
     a16:	60 91 da 07 	lds	r22, 0x07DA	; 0x8007da <_readyBit+0x2>
     a1a:	70 91 db 07 	lds	r23, 0x07DB	; 0x8007db <_readyBit+0x3>
     a1e:	cc 24       	eor	r12, r12
     a20:	ca 94       	dec	r12
     a22:	dc 2c       	mov	r13, r12
     a24:	76 01       	movw	r14, r12
     a26:	01 e0       	ldi	r16, 0x01	; 1
     a28:	21 e0       	ldi	r18, 0x01	; 1
     a2a:	80 91 dc 07 	lds	r24, 0x07DC	; 0x8007dc <_readyEventGroup>
     a2e:	90 91 dd 07 	lds	r25, 0x07DD	; 0x8007dd <_readyEventGroup+0x1>
     a32:	5f d4       	rcall	.+2238   	; 0x12f2 <xEventGroupWaitBits>
     a34:	00 91 d8 07 	lds	r16, 0x07D8	; 0x8007d8 <_readyBit>
		_readyBit, 
		pdTRUE, 
		pdTRUE,
		portMAX_DELAY);
	
	if ((uxBits & (_readyBit)) == (_readyBit)) {
     a38:	10 91 d9 07 	lds	r17, 0x07D9	; 0x8007d9 <_readyBit+0x1>
     a3c:	20 91 da 07 	lds	r18, 0x07DA	; 0x8007da <_readyBit+0x2>
     a40:	30 91 db 07 	lds	r19, 0x07DB	; 0x8007db <_readyBit+0x3>
     a44:	dc 01       	movw	r26, r24
     a46:	cb 01       	movw	r24, r22
     a48:	80 23       	and	r24, r16
     a4a:	91 23       	and	r25, r17
     a4c:	a2 23       	and	r26, r18
     a4e:	b3 23       	and	r27, r19
     a50:	08 17       	cp	r16, r24
     a52:	19 07       	cpc	r17, r25
     a54:	2a 07       	cpc	r18, r26
     a56:	3b 07       	cpc	r19, r27
     a58:	09 f0       	breq	.+2      	; 0xa5c <device_startMeasuring+0xba>
     a5a:	9e c0       	rjmp	.+316    	; 0xb98 <device_startMeasuring+0x1f6>
		currentCondition_setCO2(self->currentCondition,co2Reader_getCO2(self->co2reader));
     a5c:	f5 01       	movw	r30, r10
     a5e:	80 81       	ld	r24, Z
     a60:	91 81       	ldd	r25, Z+1	; 0x01
     a62:	0d de       	rcall	.-998    	; 0x67e <co2Reader_getCO2>
     a64:	bc 01       	movw	r22, r24
     a66:	f5 01       	movw	r30, r10
     a68:	86 81       	ldd	r24, Z+6	; 0x06
     a6a:	97 81       	ldd	r25, Z+7	; 0x07
     a6c:	c2 de       	rcall	.-636    	; 0x7f2 <currentCondition_setCO2>
		
		currentCondition_setSound(self->currentCondition,soundReader_getSound(self->soundReader));
     a6e:	f5 01       	movw	r30, r10
     a70:	84 81       	ldd	r24, Z+4	; 0x04
     a72:	95 81       	ldd	r25, Z+5	; 0x05
     a74:	e6 d2       	rcall	.+1484   	; 0x1042 <soundReader_getSound>
     a76:	bc 01       	movw	r22, r24
     a78:	f5 01       	movw	r30, r10
     a7a:	86 81       	ldd	r24, Z+6	; 0x06
     a7c:	97 81       	ldd	r25, Z+7	; 0x07
     a7e:	db de       	rcall	.-586    	; 0x836 <currentCondition_setSound>
		
		currentCondition_setTemperature(self->currentCondition,humAndTempReader_getTemperature(self->humAndTempReader));
     a80:	f5 01       	movw	r30, r10
     a82:	82 81       	ldd	r24, Z+2	; 0x02
     a84:	93 81       	ldd	r25, Z+3	; 0x03
     a86:	18 d2       	rcall	.+1072   	; 0xeb8 <humAndTempReader_getTemperature>
     a88:	bc 01       	movw	r22, r24
     a8a:	f5 01       	movw	r30, r10
     a8c:	86 81       	ldd	r24, Z+6	; 0x06
     a8e:	97 81       	ldd	r25, Z+7	; 0x07
     a90:	c6 de       	rcall	.-628    	; 0x81e <currentCondition_setTemperature>
		
		int16_t humidity = humAndTempReader_getHumidity(self->humAndTempReader);
     a92:	f5 01       	movw	r30, r10
     a94:	82 81       	ldd	r24, Z+2	; 0x02
     a96:	93 81       	ldd	r25, Z+3	; 0x03
     a98:	0b d2       	rcall	.+1046   	; 0xeb0 <humAndTempReader_getHumidity>
     a9a:	bc 01       	movw	r22, r24
		currentCondition_setHumidity(self->currentCondition, humidity);
     a9c:	f5 01       	movw	r30, r10
     a9e:	86 81       	ldd	r24, Z+6	; 0x06
     aa0:	97 81       	ldd	r25, Z+7	; 0x07
     aa2:	b3 de       	rcall	.-666    	; 0x80a <currentCondition_setHumidity>
     aa4:	f5 01       	movw	r30, r10
		
		
		printf("CO2 is: %u\n", co2Reader_getCO2(self->co2reader));
     aa6:	80 81       	ld	r24, Z
     aa8:	91 81       	ldd	r25, Z+1	; 0x01
     aaa:	e9 dd       	rcall	.-1070   	; 0x67e <co2Reader_getCO2>
     aac:	9f 93       	push	r25
     aae:	8f 93       	push	r24
     ab0:	83 e8       	ldi	r24, 0x83	; 131
     ab2:	92 e0       	ldi	r25, 0x02	; 2
     ab4:	9f 93       	push	r25
     ab6:	8f 93       	push	r24
     ab8:	0e 94 6d 31 	call	0x62da	; 0x62da <printf>
     abc:	f5 01       	movw	r30, r10
		printf("Temperature is: %d\n", humAndTempReader_getTemperature(self->humAndTempReader));
     abe:	82 81       	ldd	r24, Z+2	; 0x02
     ac0:	93 81       	ldd	r25, Z+3	; 0x03
     ac2:	fa d1       	rcall	.+1012   	; 0xeb8 <humAndTempReader_getTemperature>
     ac4:	9f 93       	push	r25
     ac6:	8f 93       	push	r24
     ac8:	8f e8       	ldi	r24, 0x8F	; 143
     aca:	92 e0       	ldi	r25, 0x02	; 2
     acc:	9f 93       	push	r25
     ace:	8f 93       	push	r24
     ad0:	0e 94 6d 31 	call	0x62da	; 0x62da <printf>
     ad4:	f5 01       	movw	r30, r10
		printf("Humidity is: %u\n", humAndTempReader_getHumidity(self->humAndTempReader));
     ad6:	82 81       	ldd	r24, Z+2	; 0x02
     ad8:	93 81       	ldd	r25, Z+3	; 0x03
     ada:	ea d1       	rcall	.+980    	; 0xeb0 <humAndTempReader_getHumidity>
     adc:	9f 93       	push	r25
     ade:	8f 93       	push	r24
     ae0:	83 ea       	ldi	r24, 0xA3	; 163
     ae2:	92 e0       	ldi	r25, 0x02	; 2
     ae4:	9f 93       	push	r25
     ae6:	8f 93       	push	r24
     ae8:	0e 94 6d 31 	call	0x62da	; 0x62da <printf>
     aec:	f5 01       	movw	r30, r10
		printf("Sound is: %u\n", soundReader_getSound(self->soundReader));
     aee:	84 81       	ldd	r24, Z+4	; 0x04
     af0:	95 81       	ldd	r25, Z+5	; 0x05
     af2:	a7 d2       	rcall	.+1358   	; 0x1042 <soundReader_getSound>
     af4:	9f 93       	push	r25
     af6:	8f 93       	push	r24
     af8:	84 eb       	ldi	r24, 0xB4	; 180
     afa:	92 e0       	ldi	r25, 0x02	; 2
     afc:	9f 93       	push	r25
     afe:	8f 93       	push	r24
     b00:	0e 94 6d 31 	call	0x62da	; 0x62da <printf>
     b04:	f5 01       	movw	r30, r10
     b06:	66 81       	ldd	r22, Z+6	; 0x06
		
		/*Perhaps loraPayload is not a good idea to be here*/
		_uplink_payload = getcurrentConditionPayload(self->currentCondition);
     b08:	77 81       	ldd	r23, Z+7	; 0x07
     b0a:	ce 01       	movw	r24, r28
     b0c:	01 96       	adiw	r24, 0x01	; 1
     b0e:	9c de       	rcall	.-712    	; 0x848 <getcurrentConditionPayload>
     b10:	86 e1       	ldi	r24, 0x16	; 22
     b12:	fe 01       	movw	r30, r28
     b14:	31 96       	adiw	r30, 0x01	; 1
     b16:	a0 ec       	ldi	r26, 0xC0	; 192
     b18:	b7 e0       	ldi	r27, 0x07	; 7
     b1a:	01 90       	ld	r0, Z+
     b1c:	0d 92       	st	X+, r0
     b1e:	8a 95       	dec	r24
     b20:	e1 f7       	brne	.-8      	; 0xb1a <device_startMeasuring+0x178>
     b22:	0f ef       	ldi	r16, 0xFF	; 255
     b24:	1f ef       	ldi	r17, 0xFF	; 255
     b26:	98 01       	movw	r18, r16
		
		xMessageBufferSend(_uplinkmessageBuffer,(void*) &_uplink_payload,sizeof(_uplink_payload),portMAX_DELAY);
     b28:	46 e1       	ldi	r20, 0x16	; 22
     b2a:	50 e0       	ldi	r21, 0x00	; 0
     b2c:	60 ec       	ldi	r22, 0xC0	; 192
     b2e:	77 e0       	ldi	r23, 0x07	; 7
     b30:	80 91 d6 07 	lds	r24, 0x07D6	; 0x8007d6 <_uplinkmessageBuffer>
     b34:	90 91 d7 07 	lds	r25, 0x07D7	; 0x8007d7 <_uplinkmessageBuffer+0x1>
     b38:	0e 94 23 13 	call	0x2646	; 0x2646 <xStreamBufferSend>
     b3c:	60 e3       	ldi	r22, 0x30	; 48
     b3e:	75 e7       	ldi	r23, 0x75	; 117
     b40:	80 e0       	ldi	r24, 0x00	; 0
		vTaskDelay(30000);
     b42:	90 e0       	ldi	r25, 0x00	; 0
     b44:	0e 94 15 18 	call	0x302a	; 0x302a <vTaskDelay>
     b48:	0f b6       	in	r0, 0x3f	; 63
     b4a:	f8 94       	cli
     b4c:	de bf       	out	0x3e, r29	; 62
     b4e:	0f be       	out	0x3f, r0	; 63
     b50:	cd bf       	out	0x3d, r28	; 61
     b52:	22 c0       	rjmp	.+68     	; 0xb98 <device_startMeasuring+0x1f6>
     b54:	60 e3       	ldi	r22, 0x30	; 48
     b56:	75 e7       	ldi	r23, 0x75	; 117
	}
	//if the device is not on, wait a bit and check if anything is changed
	}
	else
	{
		vTaskDelay(30000);
     b58:	80 e0       	ldi	r24, 0x00	; 0
     b5a:	90 e0       	ldi	r25, 0x00	; 0
     b5c:	0e 94 15 18 	call	0x302a	; 0x302a <vTaskDelay>
     b60:	f5 01       	movw	r30, r10
     b62:	66 81       	ldd	r22, Z+6	; 0x06
		_uplink_payload = getSimplePayload(self->currentCondition);
     b64:	77 81       	ldd	r23, Z+7	; 0x07
     b66:	ce 01       	movw	r24, r28
     b68:	01 96       	adiw	r24, 0x01	; 1
     b6a:	93 de       	rcall	.-730    	; 0x892 <getSimplePayload>
     b6c:	86 e1       	ldi	r24, 0x16	; 22
     b6e:	fe 01       	movw	r30, r28
     b70:	31 96       	adiw	r30, 0x01	; 1
     b72:	a0 ec       	ldi	r26, 0xC0	; 192
     b74:	b7 e0       	ldi	r27, 0x07	; 7
     b76:	01 90       	ld	r0, Z+
     b78:	0d 92       	st	X+, r0
     b7a:	8a 95       	dec	r24
     b7c:	e1 f7       	brne	.-8      	; 0xb76 <device_startMeasuring+0x1d4>
     b7e:	0f ef       	ldi	r16, 0xFF	; 255
     b80:	1f ef       	ldi	r17, 0xFF	; 255
     b82:	98 01       	movw	r18, r16
		xMessageBufferSend(_uplinkmessageBuffer,(void*) &_uplink_payload,sizeof(_uplink_payload),portMAX_DELAY);
     b84:	46 e1       	ldi	r20, 0x16	; 22
     b86:	50 e0       	ldi	r21, 0x00	; 0
     b88:	60 ec       	ldi	r22, 0xC0	; 192
     b8a:	77 e0       	ldi	r23, 0x07	; 7
     b8c:	80 91 d6 07 	lds	r24, 0x07D6	; 0x8007d6 <_uplinkmessageBuffer>
     b90:	90 91 d7 07 	lds	r25, 0x07D7	; 0x8007d7 <_uplinkmessageBuffer+0x1>
     b94:	0e 94 23 13 	call	0x2646	; 0x2646 <xStreamBufferSend>
     b98:	66 96       	adiw	r28, 0x16	; 22
     b9a:	0f b6       	in	r0, 0x3f	; 63
     b9c:	f8 94       	cli
	} 
}
     b9e:	de bf       	out	0x3e, r29	; 62
     ba0:	0f be       	out	0x3f, r0	; 63
     ba2:	cd bf       	out	0x3d, r28	; 61
     ba4:	df 91       	pop	r29
     ba6:	cf 91       	pop	r28
     ba8:	1f 91       	pop	r17
     baa:	0f 91       	pop	r16
     bac:	ff 90       	pop	r15
     bae:	ef 90       	pop	r14
     bb0:	df 90       	pop	r13
     bb2:	cf 90       	pop	r12
     bb4:	bf 90       	pop	r11
     bb6:	af 90       	pop	r10
     bb8:	08 95       	ret

00000bba <device_executeTask>:
     bba:	ec 01       	movw	r28, r24
     bbc:	ce 01       	movw	r24, r28
     bbe:	f1 de       	rcall	.-542    	; 0x9a2 <device_startMeasuring>

//devided so we can test
void device_executeTask(void* self) {
	for (;;)
	{
		device_startMeasuring((device_t)self);
     bc0:	fd cf       	rjmp	.-6      	; 0xbbc <device_executeTask+0x2>

00000bc2 <lora_DownLinkHandler_create>:
		
	}
}

void lora_DownLinkHandler_create(UBaseType_t lora_handler_task_priority, MessageBufferHandle_t xMessageBuffer)
{
     bc2:	ef 92       	push	r14
     bc4:	ff 92       	push	r15
     bc6:	0f 93       	push	r16
     bc8:	9b 01       	movw	r18, r22
	
	//_isSet=isSet;
	xTaskCreate(
     bca:	e1 2c       	mov	r14, r1
     bcc:	f1 2c       	mov	r15, r1
     bce:	08 2f       	mov	r16, r24
     bd0:	48 e8       	ldi	r20, 0x88	; 136
     bd2:	51 e0       	ldi	r21, 0x01	; 1
     bd4:	62 ec       	ldi	r22, 0xC2	; 194
     bd6:	72 e0       	ldi	r23, 0x02	; 2
     bd8:	87 e8       	ldi	r24, 0x87	; 135
     bda:	96 e0       	ldi	r25, 0x06	; 6
     bdc:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <xTaskCreate>
	,  configMINIMAL_STACK_SIZE+200  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  xMessageBuffer
	,  lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
	
}
     be0:	0f 91       	pop	r16
     be2:	ff 90       	pop	r15
     be4:	ef 90       	pop	r14
     be6:	08 95       	ret

00000be8 <lora_DownLinkHandler_task>:


	void lora_DownLinkHandler_task(MessageBufferHandle_t xMessageBuffer)
	{
     be8:	0f 93       	push	r16
     bea:	1f 93       	push	r17
     bec:	cf 93       	push	r28
     bee:	df 93       	push	r29
				
		//size_t xBytesReceived;
		//xBytesReceived = 
		xMessageBufferReceive(xMessageBuffer,(void*) &_downlink_payload,sizeof(lora_payload_t),portMAX_DELAY);
     bf0:	0f ef       	ldi	r16, 0xFF	; 255
     bf2:	1f ef       	ldi	r17, 0xFF	; 255
     bf4:	98 01       	movw	r18, r16
     bf6:	46 e1       	ldi	r20, 0x16	; 22
     bf8:	50 e0       	ldi	r21, 0x00	; 0
     bfa:	64 ee       	ldi	r22, 0xE4	; 228
     bfc:	77 e0       	ldi	r23, 0x07	; 7
     bfe:	0e 94 10 14 	call	0x2820	; 0x2820 <xStreamBufferReceive>
		printf("PayLoad bytes are: %d, %d\n Payload lenght is %d\n", _downlink_payload.bytes[0] ,_downlink_payload.bytes[1],_downlink_payload.len);
     c02:	c4 ee       	ldi	r28, 0xE4	; 228
     c04:	d7 e0       	ldi	r29, 0x07	; 7
     c06:	89 81       	ldd	r24, Y+1	; 0x01
     c08:	1f 92       	push	r1
     c0a:	8f 93       	push	r24
     c0c:	8b 81       	ldd	r24, Y+3	; 0x03
     c0e:	1f 92       	push	r1
     c10:	8f 93       	push	r24
     c12:	8a 81       	ldd	r24, Y+2	; 0x02
     c14:	1f 92       	push	r1
     c16:	8f 93       	push	r24
     c18:	8b ec       	ldi	r24, 0xCB	; 203
     c1a:	92 e0       	ldi	r25, 0x02	; 2
     c1c:	9f 93       	push	r25
     c1e:	8f 93       	push	r24
     c20:	0e 94 6d 31 	call	0x62da	; 0x62da <printf>
		
		//Two bytes eg. 44/33
		if(_downlink_payload.len==2)
     c24:	8d b7       	in	r24, 0x3d	; 61
     c26:	9e b7       	in	r25, 0x3e	; 62
     c28:	08 96       	adiw	r24, 0x08	; 8
     c2a:	0f b6       	in	r0, 0x3f	; 63
     c2c:	f8 94       	cli
     c2e:	9e bf       	out	0x3e, r25	; 62
     c30:	0f be       	out	0x3f, r0	; 63
     c32:	8d bf       	out	0x3d, r24	; 61
     c34:	89 81       	ldd	r24, Y+1	; 0x01
     c36:	82 30       	cpi	r24, 0x02	; 2
     c38:	09 f0       	breq	.+2      	; 0xc3c <lora_DownLinkHandler_task+0x54>
     c3a:	64 c0       	rjmp	.+200    	; 0xd04 <lora_DownLinkHandler_task+0x11c>
		{
			uint8_t command = _downlink_payload.bytes[0] + _downlink_payload.bytes[1];
     c3c:	fe 01       	movw	r30, r28
     c3e:	ca 81       	ldd	r28, Y+2	; 0x02
     c40:	83 81       	ldd	r24, Z+3	; 0x03
     c42:	c8 0f       	add	r28, r24
			bool* value = pvPortMalloc(sizeof(bool));
     c44:	81 e0       	ldi	r24, 0x01	; 1
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	fa d4       	rcall	.+2548   	; 0x163e <pvPortMalloc>
     c4a:	8c 01       	movw	r16, r24
			
		
			switch(command)
     c4c:	c5 37       	cpi	r28, 0x75	; 117
     c4e:	e9 f0       	breq	.+58     	; 0xc8a <lora_DownLinkHandler_task+0xa2>
     c50:	18 f4       	brcc	.+6      	; 0xc58 <lora_DownLinkHandler_task+0x70>
     c52:	c4 37       	cpi	r28, 0x74	; 116
     c54:	39 f0       	breq	.+14     	; 0xc64 <lora_DownLinkHandler_task+0x7c>
     c56:	52 c0       	rjmp	.+164    	; 0xcfc <lora_DownLinkHandler_task+0x114>
     c58:	c6 38       	cpi	r28, 0x86	; 134
     c5a:	51 f1       	breq	.+84     	; 0xcb0 <lora_DownLinkHandler_task+0xc8>
     c5c:	c7 38       	cpi	r28, 0x87	; 135
     c5e:	09 f4       	brne	.+2      	; 0xc62 <lora_DownLinkHandler_task+0x7a>
     c60:	3a c0       	rjmp	.+116    	; 0xcd6 <lora_DownLinkHandler_task+0xee>
     c62:	4c c0       	rjmp	.+152    	; 0xcfc <lora_DownLinkHandler_task+0x114>
			{
			//D0
			case 0x74:
				configuration_setWorking(false);
     c64:	80 e0       	ldi	r24, 0x00	; 0
     c66:	19 dd       	rcall	.-1486   	; 0x69a <configuration_setWorking>
				configuration_getWorking(value);
     c68:	c8 01       	movw	r24, r16
     c6a:	3b dd       	rcall	.-1418   	; 0x6e2 <configuration_getWorking>
     c6c:	f8 01       	movw	r30, r16
				printf("The bool for device is set to %d\n",*value);
     c6e:	80 81       	ld	r24, Z
     c70:	1f 92       	push	r1
     c72:	8f 93       	push	r24
     c74:	8c ef       	ldi	r24, 0xFC	; 252
     c76:	92 e0       	ldi	r25, 0x02	; 2
     c78:	9f 93       	push	r25
     c7a:	8f 93       	push	r24
     c7c:	0e 94 6d 31 	call	0x62da	; 0x62da <printf>
     c80:	0f 90       	pop	r0
				break;
     c82:	0f 90       	pop	r0
     c84:	0f 90       	pop	r0
     c86:	0f 90       	pop	r0
     c88:	3d c0       	rjmp	.+122    	; 0xd04 <lora_DownLinkHandler_task+0x11c>
			//D1
			case 0x75 :
				configuration_setWorking(true);
     c8a:	81 e0       	ldi	r24, 0x01	; 1
     c8c:	06 dd       	rcall	.-1524   	; 0x69a <configuration_setWorking>
				configuration_getWorking(value);
     c8e:	c8 01       	movw	r24, r16
     c90:	28 dd       	rcall	.-1456   	; 0x6e2 <configuration_getWorking>
     c92:	f8 01       	movw	r30, r16
				printf("The bool for device is set to %d\n",*value);
     c94:	80 81       	ld	r24, Z
     c96:	1f 92       	push	r1
     c98:	8f 93       	push	r24
     c9a:	8c ef       	ldi	r24, 0xFC	; 252
     c9c:	92 e0       	ldi	r25, 0x02	; 2
     c9e:	9f 93       	push	r25
     ca0:	8f 93       	push	r24
     ca2:	0e 94 6d 31 	call	0x62da	; 0x62da <printf>
     ca6:	0f 90       	pop	r0
				break;
     ca8:	0f 90       	pop	r0
     caa:	0f 90       	pop	r0
     cac:	0f 90       	pop	r0
			//V0
			case 0x86:
				configuration_setVentilation(false);
     cae:	2a c0       	rjmp	.+84     	; 0xd04 <lora_DownLinkHandler_task+0x11c>
     cb0:	80 e0       	ldi	r24, 0x00	; 0
     cb2:	40 dd       	rcall	.-1408   	; 0x734 <configuration_setVentilation>
				configuration_getVentilation(value);
     cb4:	c8 01       	movw	r24, r16
     cb6:	62 dd       	rcall	.-1340   	; 0x77c <configuration_getVentilation>
     cb8:	f8 01       	movw	r30, r16
				printf("The bool for ventilation is set to %d\n",*value);
     cba:	80 81       	ld	r24, Z
     cbc:	1f 92       	push	r1
     cbe:	8f 93       	push	r24
     cc0:	8e e1       	ldi	r24, 0x1E	; 30
     cc2:	93 e0       	ldi	r25, 0x03	; 3
     cc4:	9f 93       	push	r25
     cc6:	8f 93       	push	r24
     cc8:	0e 94 6d 31 	call	0x62da	; 0x62da <printf>
			break;
     ccc:	0f 90       	pop	r0
     cce:	0f 90       	pop	r0
     cd0:	0f 90       	pop	r0
     cd2:	0f 90       	pop	r0
			//V1
			case 0x87:
				configuration_setVentilation(true);
     cd4:	17 c0       	rjmp	.+46     	; 0xd04 <lora_DownLinkHandler_task+0x11c>
     cd6:	81 e0       	ldi	r24, 0x01	; 1
     cd8:	2d dd       	rcall	.-1446   	; 0x734 <configuration_setVentilation>
				configuration_getVentilation(value);
     cda:	c8 01       	movw	r24, r16
     cdc:	4f dd       	rcall	.-1378   	; 0x77c <configuration_getVentilation>
     cde:	f8 01       	movw	r30, r16
				printf("The bool for ventilation is set to %d\n",*value);
     ce0:	80 81       	ld	r24, Z
     ce2:	1f 92       	push	r1
     ce4:	8f 93       	push	r24
     ce6:	8e e1       	ldi	r24, 0x1E	; 30
     ce8:	93 e0       	ldi	r25, 0x03	; 3
     cea:	9f 93       	push	r25
     cec:	8f 93       	push	r24
     cee:	0e 94 6d 31 	call	0x62da	; 0x62da <printf>
     cf2:	0f 90       	pop	r0
				break;
     cf4:	0f 90       	pop	r0
     cf6:	0f 90       	pop	r0
     cf8:	0f 90       	pop	r0
     cfa:	04 c0       	rjmp	.+8      	; 0xd04 <lora_DownLinkHandler_task+0x11c>
     cfc:	85 e4       	ldi	r24, 0x45	; 69
			default:
				printf("Invalid command\n");
     cfe:	93 e0       	ldi	r25, 0x03	; 3
     d00:	0e 94 80 31 	call	0x6300	; 0x6300 <puts>
     d04:	df 91       	pop	r29
				break;
		}
	}
						
}
     d06:	cf 91       	pop	r28
     d08:	1f 91       	pop	r17
     d0a:	0f 91       	pop	r16
     d0c:	08 95       	ret

00000d0e <lora_DownLinkHandler_startTask>:
     d0e:	ec 01       	movw	r28, r24
//int16_t temperature_setting; // Temperature

void lora_DownLinkHandler_startTask(void* xMessageBuffer){
	for(;;)
	{
		lora_DownLinkHandler_task((MessageBufferHandle_t)xMessageBuffer);
     d10:	ce 01       	movw	r24, r28
     d12:	6a df       	rcall	.-300    	; 0xbe8 <lora_DownLinkHandler_task>
     d14:	fd cf       	rjmp	.-6      	; 0xd10 <lora_DownLinkHandler_startTask+0x2>

00000d16 <humAndTempReader_create>:
void humAndTempReader_destroy(humAndTempReader_t self) {
	if (self == NULL)
		return;
	vTaskDelete(self->handleTask);
	vPortFree(self);
}
     d16:	2f 92       	push	r2
     d18:	3f 92       	push	r3
     d1a:	4f 92       	push	r4
     d1c:	5f 92       	push	r5
     d1e:	6f 92       	push	r6
     d20:	7f 92       	push	r7
     d22:	8f 92       	push	r8
     d24:	9f 92       	push	r9
     d26:	af 92       	push	r10
     d28:	bf 92       	push	r11
     d2a:	cf 92       	push	r12
     d2c:	df 92       	push	r13
     d2e:	ef 92       	push	r14
     d30:	ff 92       	push	r15
     d32:	0f 93       	push	r16
     d34:	1f 93       	push	r17
     d36:	cf 93       	push	r28
     d38:	df 93       	push	r29
     d3a:	88 2e       	mov	r8, r24
     d3c:	96 2e       	mov	r9, r22
     d3e:	1a 01       	movw	r2, r20
     d40:	28 01       	movw	r4, r16
     d42:	39 01       	movw	r6, r18
     d44:	66 e0       	ldi	r22, 0x06	; 6
     d46:	70 e0       	ldi	r23, 0x00	; 0
     d48:	81 e0       	ldi	r24, 0x01	; 1
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	0e 94 7a 2f 	call	0x5ef4	; 0x5ef4 <calloc>
     d50:	ec 01       	movw	r28, r24
     d52:	89 2b       	or	r24, r25
     d54:	71 f1       	breq	.+92     	; 0xdb2 <humAndTempReader_create+0x9c>
     d56:	19 82       	std	Y+1, r1	; 0x01
     d58:	18 82       	st	Y, r1
     d5a:	1b 82       	std	Y+3, r1	; 0x03
     d5c:	1a 82       	std	Y+2, r1	; 0x02
     d5e:	30 92 05 08 	sts	0x0805, r3	; 0x800805 <_startMeasureEventGroup+0x1>
     d62:	20 92 04 08 	sts	0x0804, r2	; 0x800804 <_startMeasureEventGroup>
     d66:	40 92 00 08 	sts	0x0800, r4	; 0x800800 <_startMeasureBit>
     d6a:	50 92 01 08 	sts	0x0801, r5	; 0x800801 <_startMeasureBit+0x1>
     d6e:	60 92 02 08 	sts	0x0802, r6	; 0x800802 <_startMeasureBit+0x2>
     d72:	70 92 03 08 	sts	0x0803, r7	; 0x800803 <_startMeasureBit+0x3>
     d76:	f0 92 ff 07 	sts	0x07FF, r15	; 0x8007ff <_readyEventGroup+0x1>
     d7a:	e0 92 fe 07 	sts	0x07FE, r14	; 0x8007fe <_readyEventGroup>
     d7e:	a0 92 fa 07 	sts	0x07FA, r10	; 0x8007fa <_readyBit>
     d82:	b0 92 fb 07 	sts	0x07FB, r11	; 0x8007fb <_readyBit+0x1>
     d86:	c0 92 fc 07 	sts	0x07FC, r12	; 0x8007fc <_readyBit+0x2>
     d8a:	d0 92 fd 07 	sts	0x07FD, r13	; 0x8007fd <_readyBit+0x3>
     d8e:	0e 94 c2 1f 	call	0x3f84	; 0x3f84 <hih8120Create>
     d92:	49 2d       	mov	r20, r9
     d94:	50 e0       	ldi	r21, 0x00	; 0
     d96:	48 53       	subi	r20, 0x38	; 56
     d98:	5f 4f       	sbci	r21, 0xFF	; 255
     d9a:	7e 01       	movw	r14, r28
     d9c:	84 e0       	ldi	r24, 0x04	; 4
     d9e:	e8 0e       	add	r14, r24
     da0:	f1 1c       	adc	r15, r1
     da2:	08 2d       	mov	r16, r8
     da4:	9e 01       	movw	r18, r28
     da6:	65 e5       	ldi	r22, 0x55	; 85
     da8:	73 e0       	ldi	r23, 0x03	; 3
     daa:	84 e5       	ldi	r24, 0x54	; 84
     dac:	97 e0       	ldi	r25, 0x07	; 7
     dae:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <xTaskCreate>
     db2:	ce 01       	movw	r24, r28
     db4:	df 91       	pop	r29
     db6:	cf 91       	pop	r28
     db8:	1f 91       	pop	r17
     dba:	0f 91       	pop	r16
     dbc:	ff 90       	pop	r15
     dbe:	ef 90       	pop	r14
     dc0:	df 90       	pop	r13
     dc2:	cf 90       	pop	r12
     dc4:	bf 90       	pop	r11
     dc6:	af 90       	pop	r10
     dc8:	9f 90       	pop	r9
     dca:	8f 90       	pop	r8
     dcc:	7f 90       	pop	r7
     dce:	6f 90       	pop	r6
     dd0:	5f 90       	pop	r5
     dd2:	4f 90       	pop	r4
     dd4:	3f 90       	pop	r3
     dd6:	2f 90       	pop	r2
     dd8:	08 95       	ret

00000dda <humAndTempReader_measure>:

void humAndTempReader_measure(humAndTempReader_t self) {
     dda:	cf 92       	push	r12
     ddc:	df 92       	push	r13
     dde:	ef 92       	push	r14
     de0:	ff 92       	push	r15
     de2:	0f 93       	push	r16
     de4:	1f 93       	push	r17
     de6:	cf 93       	push	r28
     de8:	df 93       	push	r29
     dea:	ec 01       	movw	r28, r24
	EventBits_t uxBits = xEventGroupWaitBits(_startMeasureEventGroup, 
     dec:	40 91 00 08 	lds	r20, 0x0800	; 0x800800 <_startMeasureBit>
     df0:	50 91 01 08 	lds	r21, 0x0801	; 0x800801 <_startMeasureBit+0x1>
     df4:	60 91 02 08 	lds	r22, 0x0802	; 0x800802 <_startMeasureBit+0x2>
     df8:	70 91 03 08 	lds	r23, 0x0803	; 0x800803 <_startMeasureBit+0x3>
     dfc:	cc 24       	eor	r12, r12
     dfe:	ca 94       	dec	r12
     e00:	dc 2c       	mov	r13, r12
     e02:	76 01       	movw	r14, r12
     e04:	01 e0       	ldi	r16, 0x01	; 1
     e06:	21 e0       	ldi	r18, 0x01	; 1
     e08:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <_startMeasureEventGroup>
     e0c:	90 91 05 08 	lds	r25, 0x0805	; 0x800805 <_startMeasureEventGroup+0x1>
     e10:	70 d2       	rcall	.+1248   	; 0x12f2 <xEventGroupWaitBits>
	_startMeasureBit, 
	pdTRUE, 
	pdTRUE, 
	portMAX_DELAY);

	if ((uxBits & (_startMeasureBit)) == (_startMeasureBit)) {
     e12:	00 91 00 08 	lds	r16, 0x0800	; 0x800800 <_startMeasureBit>
     e16:	10 91 01 08 	lds	r17, 0x0801	; 0x800801 <_startMeasureBit+0x1>
     e1a:	20 91 02 08 	lds	r18, 0x0802	; 0x800802 <_startMeasureBit+0x2>
     e1e:	30 91 03 08 	lds	r19, 0x0803	; 0x800803 <_startMeasureBit+0x3>
     e22:	dc 01       	movw	r26, r24
     e24:	cb 01       	movw	r24, r22
     e26:	80 23       	and	r24, r16
     e28:	91 23       	and	r25, r17
     e2a:	a2 23       	and	r26, r18
     e2c:	b3 23       	and	r27, r19
     e2e:	08 17       	cp	r16, r24
     e30:	19 07       	cpc	r17, r25
     e32:	2a 07       	cpc	r18, r26
     e34:	3b 07       	cpc	r19, r27
     e36:	79 f5       	brne	.+94     	; 0xe96 <humAndTempReader_measure+0xbc>
		hih8120Wakeup();
     e38:	0e 94 dd 1f 	call	0x3fba	; 0x3fba <hih8120Wakeup>
		vTaskDelay(50);
     e3c:	62 e3       	ldi	r22, 0x32	; 50
     e3e:	70 e0       	ldi	r23, 0x00	; 0
     e40:	80 e0       	ldi	r24, 0x00	; 0
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	0e 94 15 18 	call	0x302a	; 0x302a <vTaskDelay>
		hih8120Meassure();
     e48:	0e 94 f2 1f 	call	0x3fe4	; 0x3fe4 <hih8120Meassure>
		vTaskDelay(5);
     e4c:	65 e0       	ldi	r22, 0x05	; 5
     e4e:	70 e0       	ldi	r23, 0x00	; 0
     e50:	80 e0       	ldi	r24, 0x00	; 0
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	0e 94 15 18 	call	0x302a	; 0x302a <vTaskDelay>
		if(hih8120IsReady())
     e58:	0e 94 da 1f 	call	0x3fb4	; 0x3fb4 <hih8120IsReady>
     e5c:	88 23       	and	r24, r24
     e5e:	41 f0       	breq	.+16     	; 0xe70 <humAndTempReader_measure+0x96>
		{
			self->humidity = hih8120GetHumidityPercent_x10();
     e60:	0e 94 18 20 	call	0x4030	; 0x4030 <hih8120GetHumidityPercent_x10>
     e64:	99 83       	std	Y+1, r25	; 0x01
     e66:	88 83       	st	Y, r24
			self->temperature = hih8120GetTemperature_x10();
     e68:	0e 94 3e 20 	call	0x407c	; 0x407c <hih8120GetTemperature_x10>
     e6c:	9b 83       	std	Y+3, r25	; 0x03
     e6e:	8a 83       	std	Y+2, r24	; 0x02
		}
		vTaskDelay(1000);
     e70:	68 ee       	ldi	r22, 0xE8	; 232
     e72:	73 e0       	ldi	r23, 0x03	; 3
     e74:	80 e0       	ldi	r24, 0x00	; 0
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	0e 94 15 18 	call	0x302a	; 0x302a <vTaskDelay>
		xEventGroupSetBits(_readyEventGroup, _readyBit);
     e7c:	40 91 fa 07 	lds	r20, 0x07FA	; 0x8007fa <_readyBit>
     e80:	50 91 fb 07 	lds	r21, 0x07FB	; 0x8007fb <_readyBit+0x1>
     e84:	60 91 fc 07 	lds	r22, 0x07FC	; 0x8007fc <_readyBit+0x2>
     e88:	70 91 fd 07 	lds	r23, 0x07FD	; 0x8007fd <_readyBit+0x3>
     e8c:	80 91 fe 07 	lds	r24, 0x07FE	; 0x8007fe <_readyEventGroup>
     e90:	90 91 ff 07 	lds	r25, 0x07FF	; 0x8007ff <_readyEventGroup+0x1>
     e94:	ee d2       	rcall	.+1500   	; 0x1472 <xEventGroupSetBits>
	}
}
     e96:	df 91       	pop	r29
     e98:	cf 91       	pop	r28
     e9a:	1f 91       	pop	r17
     e9c:	0f 91       	pop	r16
     e9e:	ff 90       	pop	r15
     ea0:	ef 90       	pop	r14
     ea2:	df 90       	pop	r13
     ea4:	cf 90       	pop	r12
     ea6:	08 95       	ret

00000ea8 <humAndTempReader_executeTask>:
	uint16_t humidity;
	int16_t temperature;
	TaskHandle_t handleTask;
}humidityAndTemperature;

void humAndTempReader_executeTask(void* self) {
     ea8:	ec 01       	movw	r28, r24
	for (;;) {
		humAndTempReader_measure((humAndTempReader_t)self);
     eaa:	ce 01       	movw	r24, r28
     eac:	96 df       	rcall	.-212    	; 0xdda <humAndTempReader_measure>
     eae:	fd cf       	rjmp	.-6      	; 0xeaa <humAndTempReader_executeTask+0x2>

00000eb0 <humAndTempReader_getHumidity>:
	}
}

uint16_t humAndTempReader_getHumidity(humAndTempReader_t self){
	return self->humidity;
}
     eb0:	fc 01       	movw	r30, r24
     eb2:	80 81       	ld	r24, Z
     eb4:	91 81       	ldd	r25, Z+1	; 0x01
     eb6:	08 95       	ret

00000eb8 <humAndTempReader_getTemperature>:

int16_t humAndTempReader_getTemperature(humAndTempReader_t self){
	return self->temperature;
}
     eb8:	fc 01       	movw	r30, r24
     eba:	82 81       	ldd	r24, Z+2	; 0x02
     ebc:	93 81       	ldd	r25, Z+3	; 0x03
     ebe:	08 95       	ret

00000ec0 <servo_initialise>:
#include "Servo.h"


void servo_initialise()
{
	rcServoCreate();		
     ec0:	0c 94 9e 27 	jmp	0x4f3c	; 0x4f3c <rcServoCreate>
     ec4:	08 95       	ret

00000ec6 <servo_open>:
	//printf("Servo is up\n");
}

void servo_open()
{
	rcServoSet(0, 100);
     ec6:	64 e6       	ldi	r22, 0x64	; 100
     ec8:	80 e0       	ldi	r24, 0x00	; 0
     eca:	0c 94 86 27 	jmp	0x4f0c	; 0x4f0c <rcServoSet>
     ece:	08 95       	ret

00000ed0 <servo_close>:
}
void servo_close()
{
	rcServoSet(0, -100);
     ed0:	6c e9       	ldi	r22, 0x9C	; 156
     ed2:	80 e0       	ldi	r24, 0x00	; 0
     ed4:	0c 94 86 27 	jmp	0x4f0c	; 0x4f0c <rcServoSet>
     ed8:	08 95       	ret

00000eda <soundReader_create>:
	if (self == NULL)
		return;

	vTaskDelete(self->handleTask);
	vPortFree(self);
}
     eda:	2f 92       	push	r2
     edc:	3f 92       	push	r3
     ede:	4f 92       	push	r4
     ee0:	5f 92       	push	r5
     ee2:	6f 92       	push	r6
     ee4:	7f 92       	push	r7
     ee6:	8f 92       	push	r8
     ee8:	9f 92       	push	r9
     eea:	af 92       	push	r10
     eec:	bf 92       	push	r11
     eee:	cf 92       	push	r12
     ef0:	df 92       	push	r13
     ef2:	ef 92       	push	r14
     ef4:	ff 92       	push	r15
     ef6:	0f 93       	push	r16
     ef8:	1f 93       	push	r17
     efa:	cf 93       	push	r28
     efc:	df 93       	push	r29
     efe:	88 2e       	mov	r8, r24
     f00:	96 2e       	mov	r9, r22
     f02:	1a 01       	movw	r2, r20
     f04:	28 01       	movw	r4, r16
     f06:	39 01       	movw	r6, r18
     f08:	64 e0       	ldi	r22, 0x04	; 4
     f0a:	70 e0       	ldi	r23, 0x00	; 0
     f0c:	81 e0       	ldi	r24, 0x01	; 1
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	0e 94 7a 2f 	call	0x5ef4	; 0x5ef4 <calloc>
     f14:	ec 01       	movw	r28, r24
     f16:	00 97       	sbiw	r24, 0x00	; 0
     f18:	41 f1       	breq	.+80     	; 0xf6a <soundReader_create+0x90>
     f1a:	fc 01       	movw	r30, r24
     f1c:	11 92       	st	Z+, r1
     f1e:	11 92       	st	Z+, r1
     f20:	30 92 11 08 	sts	0x0811, r3	; 0x800811 <_startMeasureEventGroup+0x1>
     f24:	20 92 10 08 	sts	0x0810, r2	; 0x800810 <_startMeasureEventGroup>
     f28:	40 92 0c 08 	sts	0x080C, r4	; 0x80080c <_startMeasureBit>
     f2c:	50 92 0d 08 	sts	0x080D, r5	; 0x80080d <_startMeasureBit+0x1>
     f30:	60 92 0e 08 	sts	0x080E, r6	; 0x80080e <_startMeasureBit+0x2>
     f34:	70 92 0f 08 	sts	0x080F, r7	; 0x80080f <_startMeasureBit+0x3>
     f38:	f0 92 0b 08 	sts	0x080B, r15	; 0x80080b <_readyEventGroup+0x1>
     f3c:	e0 92 0a 08 	sts	0x080A, r14	; 0x80080a <_readyEventGroup>
     f40:	a0 92 06 08 	sts	0x0806, r10	; 0x800806 <_readyBit>
     f44:	b0 92 07 08 	sts	0x0807, r11	; 0x800807 <_readyBit+0x1>
     f48:	c0 92 08 08 	sts	0x0808, r12	; 0x800808 <_readyBit+0x2>
     f4c:	d0 92 09 08 	sts	0x0809, r13	; 0x800809 <_readyBit+0x3>
     f50:	49 2d       	mov	r20, r9
     f52:	50 e0       	ldi	r21, 0x00	; 0
     f54:	48 53       	subi	r20, 0x38	; 56
     f56:	5f 4f       	sbci	r21, 0xFF	; 255
     f58:	7f 01       	movw	r14, r30
     f5a:	08 2d       	mov	r16, r8
     f5c:	9c 01       	movw	r18, r24
     f5e:	66 e6       	ldi	r22, 0x66	; 102
     f60:	73 e0       	ldi	r23, 0x03	; 3
     f62:	8d e1       	ldi	r24, 0x1D	; 29
     f64:	98 e0       	ldi	r25, 0x08	; 8
     f66:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <xTaskCreate>
     f6a:	ce 01       	movw	r24, r28
     f6c:	df 91       	pop	r29
     f6e:	cf 91       	pop	r28
     f70:	1f 91       	pop	r17
     f72:	0f 91       	pop	r16
     f74:	ff 90       	pop	r15
     f76:	ef 90       	pop	r14
     f78:	df 90       	pop	r13
     f7a:	cf 90       	pop	r12
     f7c:	bf 90       	pop	r11
     f7e:	af 90       	pop	r10
     f80:	9f 90       	pop	r9
     f82:	8f 90       	pop	r8
     f84:	7f 90       	pop	r7
     f86:	6f 90       	pop	r6
     f88:	5f 90       	pop	r5
     f8a:	4f 90       	pop	r4
     f8c:	3f 90       	pop	r3
     f8e:	2f 90       	pop	r2
     f90:	08 95       	ret

00000f92 <soundReader_measure>:


void soundReader_measure(soundReader_t self) {
     f92:	cf 92       	push	r12
     f94:	df 92       	push	r13
     f96:	ef 92       	push	r14
     f98:	ff 92       	push	r15
     f9a:	0f 93       	push	r16
     f9c:	1f 93       	push	r17
     f9e:	cf 93       	push	r28
     fa0:	df 93       	push	r29
     fa2:	ec 01       	movw	r28, r24
	
	EventBits_t uxBits = xEventGroupWaitBits(_startMeasureEventGroup, 
     fa4:	40 91 0c 08 	lds	r20, 0x080C	; 0x80080c <_startMeasureBit>
     fa8:	50 91 0d 08 	lds	r21, 0x080D	; 0x80080d <_startMeasureBit+0x1>
     fac:	60 91 0e 08 	lds	r22, 0x080E	; 0x80080e <_startMeasureBit+0x2>
     fb0:	70 91 0f 08 	lds	r23, 0x080F	; 0x80080f <_startMeasureBit+0x3>
     fb4:	cc 24       	eor	r12, r12
     fb6:	ca 94       	dec	r12
     fb8:	dc 2c       	mov	r13, r12
     fba:	76 01       	movw	r14, r12
     fbc:	01 e0       	ldi	r16, 0x01	; 1
     fbe:	21 e0       	ldi	r18, 0x01	; 1
     fc0:	80 91 10 08 	lds	r24, 0x0810	; 0x800810 <_startMeasureEventGroup>
     fc4:	90 91 11 08 	lds	r25, 0x0811	; 0x800811 <_startMeasureEventGroup+0x1>
     fc8:	94 d1       	rcall	.+808    	; 0x12f2 <xEventGroupWaitBits>
	_startMeasureBit, 
	pdTRUE, 
	pdTRUE, 
	portMAX_DELAY); 

	if ((uxBits & (_startMeasureBit)) == (_startMeasureBit)) {
     fca:	00 91 0c 08 	lds	r16, 0x080C	; 0x80080c <_startMeasureBit>
     fce:	10 91 0d 08 	lds	r17, 0x080D	; 0x80080d <_startMeasureBit+0x1>
     fd2:	20 91 0e 08 	lds	r18, 0x080E	; 0x80080e <_startMeasureBit+0x2>
     fd6:	30 91 0f 08 	lds	r19, 0x080F	; 0x80080f <_startMeasureBit+0x3>
     fda:	dc 01       	movw	r26, r24
     fdc:	cb 01       	movw	r24, r22
     fde:	80 23       	and	r24, r16
     fe0:	91 23       	and	r25, r17
     fe2:	a2 23       	and	r26, r18
     fe4:	b3 23       	and	r27, r19
     fe6:	08 17       	cp	r16, r24
     fe8:	19 07       	cpc	r17, r25
     fea:	2a 07       	cpc	r18, r26
     fec:	3b 07       	cpc	r19, r27
     fee:	e1 f4       	brne	.+56     	; 0x1028 <soundReader_measure+0x96>
		srand(time(NULL));
     ff0:	80 e0       	ldi	r24, 0x00	; 0
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	78 da       	rcall	.-2832   	; 0x4e6 <time>
     ff6:	cb 01       	movw	r24, r22
     ff8:	0e 94 ff 30 	call	0x61fe	; 0x61fe <srand>
		self->value = rand()%105 + 15;
     ffc:	0e 94 fc 30 	call	0x61f8	; 0x61f8 <rand>
    1000:	69 e6       	ldi	r22, 0x69	; 105
    1002:	70 e0       	ldi	r23, 0x00	; 0
    1004:	0e 94 29 2f 	call	0x5e52	; 0x5e52 <__divmodhi4>
    1008:	0f 96       	adiw	r24, 0x0f	; 15
    100a:	99 83       	std	Y+1, r25	; 0x01
    100c:	88 83       	st	Y, r24
		
		//set done bit so that device knows measurement is done
		xEventGroupSetBits(_readyEventGroup, _readyBit);
    100e:	40 91 06 08 	lds	r20, 0x0806	; 0x800806 <_readyBit>
    1012:	50 91 07 08 	lds	r21, 0x0807	; 0x800807 <_readyBit+0x1>
    1016:	60 91 08 08 	lds	r22, 0x0808	; 0x800808 <_readyBit+0x2>
    101a:	70 91 09 08 	lds	r23, 0x0809	; 0x800809 <_readyBit+0x3>
    101e:	80 91 0a 08 	lds	r24, 0x080A	; 0x80080a <_readyEventGroup>
    1022:	90 91 0b 08 	lds	r25, 0x080B	; 0x80080b <_readyEventGroup+0x1>
    1026:	25 d2       	rcall	.+1098   	; 0x1472 <xEventGroupSetBits>
	}
}
    1028:	df 91       	pop	r29
    102a:	cf 91       	pop	r28
    102c:	1f 91       	pop	r17
    102e:	0f 91       	pop	r16
    1030:	ff 90       	pop	r15
    1032:	ef 90       	pop	r14
    1034:	df 90       	pop	r13
    1036:	cf 90       	pop	r12
    1038:	08 95       	ret

0000103a <soundReader_executeTask>:
	TaskHandle_t handleTask;
}soundReader;


//actual task, methods devided so that it is possible to test
void soundReader_executeTask(void* self) {
    103a:	ec 01       	movw	r28, r24
	for (;;) {
		soundReader_measure((soundReader_t)self);
    103c:	ce 01       	movw	r24, r28
    103e:	a9 df       	rcall	.-174    	; 0xf92 <soundReader_measure>
    1040:	fd cf       	rjmp	.-6      	; 0x103c <soundReader_executeTask+0x2>

00001042 <soundReader_getSound>:
	}
}

uint16_t soundReader_getSound(soundReader_t self) {
	return self->value;
}
    1042:	fc 01       	movw	r30, r24
    1044:	80 81       	ld	r24, Z
    1046:	91 81       	ldd	r25, Z+1	; 0x01
    1048:	08 95       	ret

0000104a <lora_UpLinkHandler_create>:
	}
}


void lora_UpLinkHandler_create(UBaseType_t lora_handler_task_priority, MessageBufferHandle_t xMessageBuffer)
{
    104a:	ef 92       	push	r14
    104c:	ff 92       	push	r15
    104e:	0f 93       	push	r16
    1050:	9b 01       	movw	r18, r22
	_buffer = xMessageBuffer;
	
	
	
	xTaskCreate(
    1052:	e1 2c       	mov	r14, r1
    1054:	f1 2c       	mov	r15, r1
    1056:	08 2f       	mov	r16, r24
    1058:	48 e8       	ldi	r20, 0x88	; 136
    105a:	51 e0       	ldi	r21, 0x01	; 1
    105c:	62 e7       	ldi	r22, 0x72	; 114
    105e:	73 e0       	ldi	r23, 0x03	; 3
    1060:	8c e4       	ldi	r24, 0x4C	; 76
    1062:	99 e0       	ldi	r25, 0x09	; 9
    1064:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <xTaskCreate>
	,  (const portCHAR *)"LRUpHand"  // A name just for humans
	,  configMINIMAL_STACK_SIZE+200  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  xMessageBuffer
	,  lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}
    1068:	0f 91       	pop	r16
    106a:	ff 90       	pop	r15
    106c:	ef 90       	pop	r14
    106e:	08 95       	ret

00001070 <lora_UpLinkHandler_task>:
	
	/*Receives message from message buffer shared between it and the application responsible for gathering the data
	--> Should be called every 5 minutes from application
	*/
	void lora_UpLinkHandler_task(MessageBufferHandle_t xMessageBuffer)
	{	
    1070:	df 92       	push	r13
    1072:	ef 92       	push	r14
    1074:	ff 92       	push	r15
    1076:	0f 93       	push	r16
    1078:	1f 93       	push	r17
    107a:	cf 93       	push	r28
    107c:	df 93       	push	r29
    107e:	7c 01       	movw	r14, r24
		size_t xBytesToSend;
		char rxData[50];
		if (!isSet)
    1080:	80 91 12 08 	lds	r24, 0x0812	; 0x800812 <isSet>
    1084:	81 11       	cpse	r24, r1
    1086:	cf c0       	rjmp	.+414    	; 0x1226 <lora_UpLinkHandler_task+0x1b6>
		{
			// Hardware reset of LoRaWAN transceiver
			lora_driver_reset_rn2483(1);
    1088:	81 e0       	ldi	r24, 0x01	; 1
    108a:	0e 94 5e 23 	call	0x46bc	; 0x46bc <lora_driver_reset_rn2483>
			vTaskDelay(2);
    108e:	62 e0       	ldi	r22, 0x02	; 2
    1090:	70 e0       	ldi	r23, 0x00	; 0
    1092:	80 e0       	ldi	r24, 0x00	; 0
    1094:	90 e0       	ldi	r25, 0x00	; 0
    1096:	0e 94 15 18 	call	0x302a	; 0x302a <vTaskDelay>
			lora_driver_reset_rn2483(0);
    109a:	80 e0       	ldi	r24, 0x00	; 0
    109c:	0e 94 5e 23 	call	0x46bc	; 0x46bc <lora_driver_reset_rn2483>
			// Give it a chance to wakeup
			vTaskDelay(150);
    10a0:	66 e9       	ldi	r22, 0x96	; 150
    10a2:	70 e0       	ldi	r23, 0x00	; 0
    10a4:	80 e0       	ldi	r24, 0x00	; 0
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	0e 94 15 18 	call	0x302a	; 0x302a <vTaskDelay>

			lora_driver_flush_buffers(); // get rid of first version string from module after reset!
    10ac:	0e 94 14 23 	call	0x4628	; 0x4628 <lora_driver_flush_buffers>


static void _lora_setup(void)
{
	e_LoRa_return_code_t rc;
	led_slow_blink(led_ST2); // OPTIONAL: Led the green led blink slowly while we are setting up LoRa
    10b0:	81 e0       	ldi	r24, 0x01	; 1
    10b2:	0e 94 6c 21 	call	0x42d8	; 0x42d8 <led_slow_blink>
	//The below code is required to be executed only once due to the fact that these MAC settings
	// can be stored inside of the tranciever
	//START ON ONE TIME USE CODE

	// Factory reset the transceiver
	printf("FactoryReset >%s<\n", lora_driver_map_return_code_to_text(lora_driver_rn2483_factory_reset()));
    10b6:	0e 94 72 23 	call	0x46e4	; 0x46e4 <lora_driver_rn2483_factory_reset>
    10ba:	0e 94 ef 25 	call	0x4bde	; 0x4bde <lora_driver_map_return_code_to_text>
    10be:	9f 93       	push	r25
    10c0:	8f 93       	push	r24
    10c2:	8b e7       	ldi	r24, 0x7B	; 123
    10c4:	93 e0       	ldi	r25, 0x03	; 3
    10c6:	9f 93       	push	r25
    10c8:	8f 93       	push	r24
    10ca:	0e 94 6d 31 	call	0x62da	; 0x62da <printf>
	
	// Configure to EU868 LoRaWAN standards
	printf("Configure to EU868 >%s<\n", lora_driver_map_return_code_to_text(lora_driver_configure_to_eu868()));
    10ce:	0e 94 f0 24 	call	0x49e0	; 0x49e0 <lora_driver_configure_to_eu868>
    10d2:	0e 94 ef 25 	call	0x4bde	; 0x4bde <lora_driver_map_return_code_to_text>
    10d6:	9f 93       	push	r25
    10d8:	8f 93       	push	r24
    10da:	8e e8       	ldi	r24, 0x8E	; 142
    10dc:	93 e0       	ldi	r25, 0x03	; 3
    10de:	9f 93       	push	r25
    10e0:	8f 93       	push	r24
    10e2:	0e 94 6d 31 	call	0x62da	; 0x62da <printf>

	// Get the transceivers HW EUI
	rc = lora_driver_get_rn2483_hweui(_out_buf);
    10e6:	89 e2       	ldi	r24, 0x29	; 41
    10e8:	98 e0       	ldi	r25, 0x08	; 8
    10ea:	0e 94 84 23 	call	0x4708	; 0x4708 <lora_driver_get_rn2483_hweui>
	printf("Get HWEUI >%s<: %s\n",lora_driver_map_return_code_to_text(rc), _out_buf);
    10ee:	0e 94 ef 25 	call	0x4bde	; 0x4bde <lora_driver_map_return_code_to_text>
    10f2:	c9 e2       	ldi	r28, 0x29	; 41
    10f4:	d8 e0       	ldi	r29, 0x08	; 8
    10f6:	df 93       	push	r29
    10f8:	cf 93       	push	r28
    10fa:	9f 93       	push	r25
    10fc:	8f 93       	push	r24
    10fe:	87 ea       	ldi	r24, 0xA7	; 167
    1100:	93 e0       	ldi	r25, 0x03	; 3
    1102:	9f 93       	push	r25
    1104:	8f 93       	push	r24
    1106:	0e 94 6d 31 	call	0x62da	; 0x62da <printf>

	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_map_return_code_to_text(lora_driver_set_device_identifier(_out_buf)));
    110a:	ce 01       	movw	r24, r28
    110c:	0e 94 a0 23 	call	0x4740	; 0x4740 <lora_driver_set_device_identifier>
    1110:	0e 94 ef 25 	call	0x4bde	; 0x4bde <lora_driver_map_return_code_to_text>
    1114:	9f 93       	push	r25
    1116:	8f 93       	push	r24
    1118:	df 93       	push	r29
    111a:	cf 93       	push	r28
    111c:	8b eb       	ldi	r24, 0xBB	; 187
    111e:	93 e0       	ldi	r25, 0x03	; 3
    1120:	9f 93       	push	r25
    1122:	8f 93       	push	r24
    1124:	0e 94 6d 31 	call	0x62da	; 0x62da <printf>

	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_map_return_code_to_text(lora_driver_set_otaa_identity(LORA_appEUI,LORA_appKEY,_out_buf)));
    1128:	ae 01       	movw	r20, r28
    112a:	60 ed       	ldi	r22, 0xD0	; 208
    112c:	73 e0       	ldi	r23, 0x03	; 3
    112e:	81 ef       	ldi	r24, 0xF1	; 241
    1130:	93 e0       	ldi	r25, 0x03	; 3
    1132:	0e 94 ce 25 	call	0x4b9c	; 0x4b9c <lora_driver_set_otaa_identity>
    1136:	0e 94 ef 25 	call	0x4bde	; 0x4bde <lora_driver_map_return_code_to_text>
    113a:	9f 93       	push	r25
    113c:	8f 93       	push	r24
    113e:	df 93       	push	r29
    1140:	cf 93       	push	r28
    1142:	80 ed       	ldi	r24, 0xD0	; 208
    1144:	93 e0       	ldi	r25, 0x03	; 3
    1146:	9f 93       	push	r25
    1148:	8f 93       	push	r24
    114a:	81 ef       	ldi	r24, 0xF1	; 241
    114c:	93 e0       	ldi	r25, 0x03	; 3
    114e:	9f 93       	push	r25
    1150:	8f 93       	push	r24
    1152:	82 e0       	ldi	r24, 0x02	; 2
    1154:	94 e0       	ldi	r25, 0x04	; 4
    1156:	9f 93       	push	r25
    1158:	8f 93       	push	r24
    115a:	0e 94 6d 31 	call	0x62da	; 0x62da <printf>

	// Save all the MAC settings in the transceiver
	printf("Save mac >%s<\n",lora_driver_map_return_code_to_text(lora_driver_save_mac()));
    115e:	0e 94 d3 23 	call	0x47a6	; 0x47a6 <lora_driver_save_mac>
    1162:	0e 94 ef 25 	call	0x4bde	; 0x4bde <lora_driver_map_return_code_to_text>
    1166:	9f 93       	push	r25
    1168:	8f 93       	push	r24
    116a:	88 e3       	ldi	r24, 0x38	; 56
    116c:	94 e0       	ldi	r25, 0x04	; 4
    116e:	9f 93       	push	r25
    1170:	8f 93       	push	r24
    1172:	0e 94 6d 31 	call	0x62da	; 0x62da <printf>

	//END OF ONE TIME USE CODE
	
	
	// Enable Adaptive Data Rate
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_map_return_code_to_text(lora_driver_set_adaptive_data_rate(LoRa_ON)));
    1176:	8d b7       	in	r24, 0x3d	; 61
    1178:	9e b7       	in	r25, 0x3e	; 62
    117a:	82 96       	adiw	r24, 0x22	; 34
    117c:	0f b6       	in	r0, 0x3f	; 63
    117e:	f8 94       	cli
    1180:	9e bf       	out	0x3e, r25	; 62
    1182:	0f be       	out	0x3f, r0	; 63
    1184:	8d bf       	out	0x3d, r24	; 61
    1186:	81 e0       	ldi	r24, 0x01	; 1
    1188:	0e 94 cd 24 	call	0x499a	; 0x499a <lora_driver_set_adaptive_data_rate>
    118c:	0e 94 ef 25 	call	0x4bde	; 0x4bde <lora_driver_map_return_code_to_text>
    1190:	9f 93       	push	r25
    1192:	8f 93       	push	r24
    1194:	87 e4       	ldi	r24, 0x47	; 71
    1196:	94 e0       	ldi	r25, 0x04	; 4
    1198:	9f 93       	push	r25
    119a:	8f 93       	push	r24
    119c:	0e 94 6d 31 	call	0x62da	; 0x62da <printf>

	// Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	printf("Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_map_return_code_to_text(lora_driver_set_receive_delay(500)));
    11a0:	84 ef       	ldi	r24, 0xF4	; 244
    11a2:	91 e0       	ldi	r25, 0x01	; 1
    11a4:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <lora_driver_set_receive_delay>
    11a8:	0e 94 ef 25 	call	0x4bde	; 0x4bde <lora_driver_map_return_code_to_text>
    11ac:	9f 93       	push	r25
    11ae:	8f 93       	push	r24
    11b0:	81 e0       	ldi	r24, 0x01	; 1
    11b2:	8f 93       	push	r24
    11b4:	84 ef       	ldi	r24, 0xF4	; 244
    11b6:	8f 93       	push	r24
    11b8:	88 e6       	ldi	r24, 0x68	; 104
    11ba:	94 e0       	ldi	r25, 0x04	; 4
    11bc:	9f 93       	push	r25
    11be:	8f 93       	push	r24
    11c0:	0e 94 6d 31 	call	0x62da	; 0x62da <printf>
    11c4:	8d b7       	in	r24, 0x3d	; 61
    11c6:	9e b7       	in	r25, 0x3e	; 62
    11c8:	0a 96       	adiw	r24, 0x0a	; 10
    11ca:	0f b6       	in	r0, 0x3f	; 63
    11cc:	f8 94       	cli
    11ce:	9e bf       	out	0x3e, r25	; 62
    11d0:	0f be       	out	0x3f, r0	; 63
    11d2:	8d bf       	out	0x3d, r24	; 61
    11d4:	ca e0       	ldi	r28, 0x0A	; 10
    11d6:	d0 e0       	ldi	r29, 0x00	; 0
	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
	
	do {
		rc = lora_driver_join(LoRa_OTAA);
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_map_return_code_to_text(rc));
    11d8:	08 e8       	ldi	r16, 0x88	; 136
    11da:	14 e0       	ldi	r17, 0x04	; 4

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
	
	do {
		rc = lora_driver_join(LoRa_OTAA);
    11dc:	80 e0       	ldi	r24, 0x00	; 0
    11de:	0e 94 d9 23 	call	0x47b2	; 0x47b2 <lora_driver_join>
    11e2:	d8 2e       	mov	r13, r24
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_map_return_code_to_text(rc));
    11e4:	0e 94 ef 25 	call	0x4bde	; 0x4bde <lora_driver_map_return_code_to_text>
    11e8:	9f 93       	push	r25
    11ea:	8f 93       	push	r24
    11ec:	df 93       	push	r29
    11ee:	cf 93       	push	r28
    11f0:	1f 93       	push	r17
    11f2:	0f 93       	push	r16
    11f4:	0e 94 6d 31 	call	0x62da	; 0x62da <printf>

		if ( rc != LoRa_ACCEPTED)
    11f8:	0f 90       	pop	r0
    11fa:	0f 90       	pop	r0
    11fc:	0f 90       	pop	r0
    11fe:	0f 90       	pop	r0
    1200:	0f 90       	pop	r0
    1202:	0f 90       	pop	r0
    1204:	88 e0       	ldi	r24, 0x08	; 8
    1206:	d8 16       	cp	r13, r24
    1208:	89 f1       	breq	.+98     	; 0x126c <lora_UpLinkHandler_task+0x1fc>
		{
			// Make the red led pulse to tell something went wrong
			led_long_puls(led_ST1); // OPTIONAL
    120a:	80 e0       	ldi	r24, 0x00	; 0
    120c:	0e 94 d8 21 	call	0x43b0	; 0x43b0 <led_long_puls>
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
    1210:	66 e3       	ldi	r22, 0x36	; 54
    1212:	71 e0       	ldi	r23, 0x01	; 1
    1214:	80 e0       	ldi	r24, 0x00	; 0
    1216:	90 e0       	ldi	r25, 0x00	; 0
    1218:	0e 94 15 18 	call	0x302a	; 0x302a <vTaskDelay>
    121c:	21 97       	sbiw	r28, 0x01	; 1
		}
		else
		{
			break;
		}
	} while (--maxJoinTriesLeft);
    121e:	f1 f6       	brne	.-68     	; 0x11dc <lora_UpLinkHandler_task+0x16c>
    1220:	2c c0       	rjmp	.+88     	; 0x127a <lora_UpLinkHandler_task+0x20a>
		led_fast_blink(led_ST1); // OPTIONAL

		// Lets stay here
		while (1)
		{
			taskYIELD();
    1222:	3f d4       	rcall	.+2174   	; 0x1aa2 <vPortYield>
    1224:	fe cf       	rjmp	.-4      	; 0x1222 <lora_UpLinkHandler_task+0x1b2>
			isSet=true;
		}
		

		
		xBytesToSend = xMessageBufferReceive(xMessageBuffer, (void*) &_uplink_payload,
    1226:	00 e0       	ldi	r16, 0x00	; 0
    1228:	10 e0       	ldi	r17, 0x00	; 0
    122a:	98 01       	movw	r18, r16
    122c:	42 e3       	ldi	r20, 0x32	; 50
    122e:	50 e0       	ldi	r21, 0x00	; 0
    1230:	63 e1       	ldi	r22, 0x13	; 19
    1232:	78 e0       	ldi	r23, 0x08	; 8
    1234:	c7 01       	movw	r24, r14
    1236:	0e 94 10 14 	call	0x2820	; 0x2820 <xStreamBufferReceive>
		sizeof(rxData),0);
		if(xBytesToSend >= sizeof(uint8_t)*2)
    123a:	02 97       	sbiw	r24, 0x02	; 2
    123c:	28 f1       	brcs	.+74     	; 0x1288 <lora_UpLinkHandler_task+0x218>
			//_uplink_payload = (_uplink_payload) &rxData;
			
			/**< Status led ST4 (BLUE)*/
			//Makes the led light up in a short period.
			
			led_short_puls(led_ST4);
    123e:	83 e0       	ldi	r24, 0x03	; 3
    1240:	0e 94 ea 21 	call	0x43d4	; 0x43d4 <led_short_puls>
			//printf("The temperature2 in upLink is: %d\n", _uplink_payload.bytes[1]);
			//printf("The humidity in upLink is: %u\n", _uplink_payload.bytes[2]);
			//printf("The humidity2 in upLink is: %u\n", _uplink_payload.bytes[3]);
			
			
			printf("Upload Message >%s<\n", lora_driver_map_return_code_to_text(lora_driver_sent_upload_message(false, &_uplink_payload)));
    1244:	63 e1       	ldi	r22, 0x13	; 19
    1246:	78 e0       	ldi	r23, 0x08	; 8
    1248:	80 e0       	ldi	r24, 0x00	; 0
    124a:	0e 94 02 24 	call	0x4804	; 0x4804 <lora_driver_sent_upload_message>
    124e:	0e 94 ef 25 	call	0x4bde	; 0x4bde <lora_driver_map_return_code_to_text>
    1252:	9f 93       	push	r25
    1254:	8f 93       	push	r24
    1256:	88 ea       	ldi	r24, 0xA8	; 168
    1258:	94 e0       	ldi	r25, 0x04	; 4
    125a:	9f 93       	push	r25
    125c:	8f 93       	push	r24
    125e:	0e 94 6d 31 	call	0x62da	; 0x62da <printf>
    1262:	0f 90       	pop	r0
    1264:	0f 90       	pop	r0
    1266:	0f 90       	pop	r0
    1268:	0f 90       	pop	r0
		}
	}
    126a:	0e c0       	rjmp	.+28     	; 0x1288 <lora_UpLinkHandler_task+0x218>

	if (rc == LoRa_ACCEPTED)
	{
		// Connected to LoRaWAN :-)
		// Make the green led steady
		led_led_on(led_ST2); // OPTIONAL
    126c:	81 e0       	ldi	r24, 0x01	; 1
    126e:	0e 94 ba 21 	call	0x4374	; 0x4374 <led_led_on>
			vTaskDelay(150);

			lora_driver_flush_buffers(); // get rid of first version string from module after reset!

			_lora_setup();
			isSet=true;
    1272:	81 e0       	ldi	r24, 0x01	; 1
    1274:	80 93 12 08 	sts	0x0812, r24	; 0x800812 <isSet>
    1278:	d6 cf       	rjmp	.-84     	; 0x1226 <lora_UpLinkHandler_task+0x1b6>
	}
	else
	{
		// Something went wrong
		// Turn off the green led
		led_led_off(led_ST2); // OPTIONAL
    127a:	81 e0       	ldi	r24, 0x01	; 1
    127c:	0e 94 c9 21 	call	0x4392	; 0x4392 <led_led_off>
		// Make the red led blink fast to tell something went wrong
		led_fast_blink(led_ST1); // OPTIONAL
    1280:	80 e0       	ldi	r24, 0x00	; 0
    1282:	0e 94 93 21 	call	0x4326	; 0x4326 <led_fast_blink>
    1286:	cd cf       	rjmp	.-102    	; 0x1222 <lora_UpLinkHandler_task+0x1b2>
			//printf("The humidity2 in upLink is: %u\n", _uplink_payload.bytes[3]);
			
			
			printf("Upload Message >%s<\n", lora_driver_map_return_code_to_text(lora_driver_sent_upload_message(false, &_uplink_payload)));
		}
	}
    1288:	df 91       	pop	r29
    128a:	cf 91       	pop	r28
    128c:	1f 91       	pop	r17
    128e:	0f 91       	pop	r16
    1290:	ff 90       	pop	r15
    1292:	ef 90       	pop	r14
    1294:	df 90       	pop	r13
    1296:	08 95       	ret

00001298 <lora_UpLinkHandler_startTask>:
static bool isSet=false;

/*Check for the parameters*/


void lora_UpLinkHandler_startTask(void* xMessageBuffer){
    1298:	ec 01       	movw	r28, r24
	for(;;)
	{
		lora_UpLinkHandler_task((MessageBufferHandle_t)xMessageBuffer);
    129a:	ce 01       	movw	r24, r28
    129c:	e9 de       	rcall	.-558    	; 0x1070 <lora_UpLinkHandler_task>
		vTaskDelay(3000);
    129e:	68 eb       	ldi	r22, 0xB8	; 184
    12a0:	7b e0       	ldi	r23, 0x0B	; 11
    12a2:	80 e0       	ldi	r24, 0x00	; 0
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	0e 94 15 18 	call	0x302a	; 0x302a <vTaskDelay>
    12aa:	f7 cf       	rjmp	.-18     	; 0x129a <lora_UpLinkHandler_startTask+0x2>

000012ac <task_switch_in>:
	void task_switch_in(uint8_t task_no) {
		 #ifdef HAL_DEFS_H_

		 #else
		 // Used on VIA MEGA Shield rev. 2.0.0
		 PORTK &= 0b11110000;
    12ac:	e8 e0       	ldi	r30, 0x08	; 8
    12ae:	f1 e0       	ldi	r31, 0x01	; 1
    12b0:	90 81       	ld	r25, Z
    12b2:	90 7f       	andi	r25, 0xF0	; 240
    12b4:	90 83       	st	Z, r25
		 PORTK |= (task_no & 0b00001111);
    12b6:	90 81       	ld	r25, Z
    12b8:	8f 70       	andi	r24, 0x0F	; 15
    12ba:	98 2b       	or	r25, r24
    12bc:	90 83       	st	Z, r25
    12be:	08 95       	ret

000012c0 <task_switch_out>:
	void task_switch_out(uint8_t task_no) {
		#ifdef HAL_DEFS_H_

		#else
		// Used on VIA MEGA Shield rev. 2.0.0
		PORTK &= 0b11110000;
    12c0:	e8 e0       	ldi	r30, 0x08	; 8
    12c2:	f1 e0       	ldi	r31, 0x01	; 1
    12c4:	80 81       	ld	r24, Z
    12c6:	80 7f       	andi	r24, 0xF0	; 240
    12c8:	80 83       	st	Z, r24
    12ca:	08 95       	ret

000012cc <xEventGroupCreate>:
        uxReturn = pxEventBits->uxEventBits;
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
    12cc:	cf 93       	push	r28
    12ce:	df 93       	push	r29
    12d0:	80 e1       	ldi	r24, 0x10	; 16
    12d2:	90 e0       	ldi	r25, 0x00	; 0
    12d4:	b4 d1       	rcall	.+872    	; 0x163e <pvPortMalloc>
    12d6:	ec 01       	movw	r28, r24
    12d8:	00 97       	sbiw	r24, 0x00	; 0
    12da:	39 f0       	breq	.+14     	; 0x12ea <xEventGroupCreate+0x1e>
    12dc:	fc 01       	movw	r30, r24
    12de:	11 92       	st	Z+, r1
    12e0:	11 92       	st	Z+, r1
    12e2:	11 92       	st	Z+, r1
    12e4:	11 92       	st	Z+, r1
    12e6:	cf 01       	movw	r24, r30
    12e8:	94 d2       	rcall	.+1320   	; 0x1812 <vListInitialise>
    12ea:	ce 01       	movw	r24, r28
    12ec:	df 91       	pop	r29
    12ee:	cf 91       	pop	r28
    12f0:	08 95       	ret

000012f2 <xEventGroupWaitBits>:
    12f2:	2f 92       	push	r2
    12f4:	3f 92       	push	r3
    12f6:	4f 92       	push	r4
    12f8:	5f 92       	push	r5
    12fa:	6f 92       	push	r6
    12fc:	7f 92       	push	r7
    12fe:	8f 92       	push	r8
    1300:	9f 92       	push	r9
    1302:	af 92       	push	r10
    1304:	bf 92       	push	r11
    1306:	cf 92       	push	r12
    1308:	df 92       	push	r13
    130a:	ef 92       	push	r14
    130c:	ff 92       	push	r15
    130e:	0f 93       	push	r16
    1310:	1f 93       	push	r17
    1312:	cf 93       	push	r28
    1314:	df 93       	push	r29
    1316:	ec 01       	movw	r28, r24
    1318:	4a 01       	movw	r8, r20
    131a:	5b 01       	movw	r10, r22
    131c:	62 2e       	mov	r6, r18
    131e:	70 2e       	mov	r7, r16
    1320:	0e 94 b0 16 	call	0x2d60	; 0x2d60 <vTaskSuspendAll>
    1324:	28 80       	ld	r2, Y
    1326:	39 80       	ldd	r3, Y+1	; 0x01
    1328:	4a 80       	ldd	r4, Y+2	; 0x02
    132a:	5b 80       	ldd	r5, Y+3	; 0x03
    132c:	01 11       	cpse	r16, r1
    132e:	0d c0       	rjmp	.+26     	; 0x134a <xEventGroupWaitBits+0x58>
    1330:	81 e0       	ldi	r24, 0x01	; 1
    1332:	b2 01       	movw	r22, r4
    1334:	a1 01       	movw	r20, r2
    1336:	48 21       	and	r20, r8
    1338:	59 21       	and	r21, r9
    133a:	6a 21       	and	r22, r10
    133c:	7b 21       	and	r23, r11
    133e:	45 2b       	or	r20, r21
    1340:	46 2b       	or	r20, r22
    1342:	47 2b       	or	r20, r23
    1344:	79 f4       	brne	.+30     	; 0x1364 <xEventGroupWaitBits+0x72>
    1346:	80 e0       	ldi	r24, 0x00	; 0
    1348:	0d c0       	rjmp	.+26     	; 0x1364 <xEventGroupWaitBits+0x72>
    134a:	81 e0       	ldi	r24, 0x01	; 1
    134c:	b2 01       	movw	r22, r4
    134e:	a1 01       	movw	r20, r2
    1350:	48 21       	and	r20, r8
    1352:	59 21       	and	r21, r9
    1354:	6a 21       	and	r22, r10
    1356:	7b 21       	and	r23, r11
    1358:	48 15       	cp	r20, r8
    135a:	59 05       	cpc	r21, r9
    135c:	6a 05       	cpc	r22, r10
    135e:	7b 05       	cpc	r23, r11
    1360:	09 f0       	breq	.+2      	; 0x1364 <xEventGroupWaitBits+0x72>
    1362:	80 e0       	ldi	r24, 0x00	; 0
    1364:	88 23       	and	r24, r24
    1366:	81 f0       	breq	.+32     	; 0x1388 <xEventGroupWaitBits+0x96>
    1368:	66 20       	and	r6, r6
    136a:	09 f4       	brne	.+2      	; 0x136e <xEventGroupWaitBits+0x7c>
    136c:	6b c0       	rjmp	.+214    	; 0x1444 <xEventGroupWaitBits+0x152>
    136e:	80 94       	com	r8
    1370:	90 94       	com	r9
    1372:	a0 94       	com	r10
    1374:	b0 94       	com	r11
    1376:	82 20       	and	r8, r2
    1378:	93 20       	and	r9, r3
    137a:	a4 20       	and	r10, r4
    137c:	b5 20       	and	r11, r5
    137e:	88 82       	st	Y, r8
    1380:	99 82       	std	Y+1, r9	; 0x01
    1382:	aa 82       	std	Y+2, r10	; 0x02
    1384:	bb 82       	std	Y+3, r11	; 0x03
    1386:	5e c0       	rjmp	.+188    	; 0x1444 <xEventGroupWaitBits+0x152>
    1388:	c1 14       	cp	r12, r1
    138a:	d1 04       	cpc	r13, r1
    138c:	e1 04       	cpc	r14, r1
    138e:	f1 04       	cpc	r15, r1
    1390:	09 f4       	brne	.+2      	; 0x1394 <xEventGroupWaitBits+0xa2>
    1392:	58 c0       	rjmp	.+176    	; 0x1444 <xEventGroupWaitBits+0x152>
    1394:	66 20       	and	r6, r6
    1396:	29 f0       	breq	.+10     	; 0x13a2 <xEventGroupWaitBits+0xb0>
    1398:	40 e0       	ldi	r20, 0x00	; 0
    139a:	50 e0       	ldi	r21, 0x00	; 0
    139c:	60 e0       	ldi	r22, 0x00	; 0
    139e:	71 e0       	ldi	r23, 0x01	; 1
    13a0:	03 c0       	rjmp	.+6      	; 0x13a8 <xEventGroupWaitBits+0xb6>
    13a2:	40 e0       	ldi	r20, 0x00	; 0
    13a4:	50 e0       	ldi	r21, 0x00	; 0
    13a6:	ba 01       	movw	r22, r20
    13a8:	71 10       	cpse	r7, r1
    13aa:	74 60       	ori	r23, 0x04	; 4
    13ac:	48 29       	or	r20, r8
    13ae:	59 29       	or	r21, r9
    13b0:	6a 29       	or	r22, r10
    13b2:	7b 29       	or	r23, r11
    13b4:	97 01       	movw	r18, r14
    13b6:	86 01       	movw	r16, r12
    13b8:	ce 01       	movw	r24, r28
    13ba:	04 96       	adiw	r24, 0x04	; 4
    13bc:	0e 94 c4 18 	call	0x3188	; 0x3188 <vTaskPlaceOnUnorderedEventList>
    13c0:	0e 94 99 17 	call	0x2f32	; 0x2f32 <xTaskResumeAll>
    13c4:	81 11       	cpse	r24, r1
    13c6:	01 c0       	rjmp	.+2      	; 0x13ca <xEventGroupWaitBits+0xd8>
    13c8:	6c d3       	rcall	.+1752   	; 0x1aa2 <vPortYield>
    13ca:	0e 94 0b 1b 	call	0x3616	; 0x3616 <uxTaskResetEventItemValue>
    13ce:	91 fd       	sbrc	r25, 1
    13d0:	35 c0       	rjmp	.+106    	; 0x143c <xEventGroupWaitBits+0x14a>
    13d2:	0f b6       	in	r0, 0x3f	; 63
    13d4:	f8 94       	cli
    13d6:	0f 92       	push	r0
    13d8:	68 81       	ld	r22, Y
    13da:	79 81       	ldd	r23, Y+1	; 0x01
    13dc:	8a 81       	ldd	r24, Y+2	; 0x02
    13de:	9b 81       	ldd	r25, Y+3	; 0x03
    13e0:	71 10       	cpse	r7, r1
    13e2:	0d c0       	rjmp	.+26     	; 0x13fe <xEventGroupWaitBits+0x10c>
    13e4:	21 e0       	ldi	r18, 0x01	; 1
    13e6:	75 01       	movw	r14, r10
    13e8:	64 01       	movw	r12, r8
    13ea:	c6 22       	and	r12, r22
    13ec:	d7 22       	and	r13, r23
    13ee:	e8 22       	and	r14, r24
    13f0:	f9 22       	and	r15, r25
    13f2:	cd 28       	or	r12, r13
    13f4:	ce 28       	or	r12, r14
    13f6:	cf 28       	or	r12, r15
    13f8:	79 f4       	brne	.+30     	; 0x1418 <xEventGroupWaitBits+0x126>
    13fa:	20 e0       	ldi	r18, 0x00	; 0
    13fc:	0d c0       	rjmp	.+26     	; 0x1418 <xEventGroupWaitBits+0x126>
    13fe:	21 e0       	ldi	r18, 0x01	; 1
    1400:	75 01       	movw	r14, r10
    1402:	64 01       	movw	r12, r8
    1404:	c6 22       	and	r12, r22
    1406:	d7 22       	and	r13, r23
    1408:	e8 22       	and	r14, r24
    140a:	f9 22       	and	r15, r25
    140c:	c8 14       	cp	r12, r8
    140e:	d9 04       	cpc	r13, r9
    1410:	ea 04       	cpc	r14, r10
    1412:	fb 04       	cpc	r15, r11
    1414:	09 f0       	breq	.+2      	; 0x1418 <xEventGroupWaitBits+0x126>
    1416:	20 e0       	ldi	r18, 0x00	; 0
    1418:	22 23       	and	r18, r18
    141a:	71 f0       	breq	.+28     	; 0x1438 <xEventGroupWaitBits+0x146>
    141c:	66 20       	and	r6, r6
    141e:	61 f0       	breq	.+24     	; 0x1438 <xEventGroupWaitBits+0x146>
    1420:	80 94       	com	r8
    1422:	90 94       	com	r9
    1424:	a0 94       	com	r10
    1426:	b0 94       	com	r11
    1428:	86 22       	and	r8, r22
    142a:	97 22       	and	r9, r23
    142c:	a8 22       	and	r10, r24
    142e:	b9 22       	and	r11, r25
    1430:	88 82       	st	Y, r8
    1432:	99 82       	std	Y+1, r9	; 0x01
    1434:	aa 82       	std	Y+2, r10	; 0x02
    1436:	bb 82       	std	Y+3, r11	; 0x03
    1438:	0f 90       	pop	r0
    143a:	0f be       	out	0x3f, r0	; 63
    143c:	1b 01       	movw	r2, r22
    143e:	2c 01       	movw	r4, r24
    1440:	55 24       	eor	r5, r5
    1442:	02 c0       	rjmp	.+4      	; 0x1448 <xEventGroupWaitBits+0x156>
    1444:	0e 94 99 17 	call	0x2f32	; 0x2f32 <xTaskResumeAll>
    1448:	c2 01       	movw	r24, r4
    144a:	b1 01       	movw	r22, r2
    144c:	df 91       	pop	r29
    144e:	cf 91       	pop	r28
    1450:	1f 91       	pop	r17
    1452:	0f 91       	pop	r16
    1454:	ff 90       	pop	r15
    1456:	ef 90       	pop	r14
    1458:	df 90       	pop	r13
    145a:	cf 90       	pop	r12
    145c:	bf 90       	pop	r11
    145e:	af 90       	pop	r10
    1460:	9f 90       	pop	r9
    1462:	8f 90       	pop	r8
    1464:	7f 90       	pop	r7
    1466:	6f 90       	pop	r6
    1468:	5f 90       	pop	r5
    146a:	4f 90       	pop	r4
    146c:	3f 90       	pop	r3
    146e:	2f 90       	pop	r2
    1470:	08 95       	ret

00001472 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
    1472:	4f 92       	push	r4
    1474:	5f 92       	push	r5
    1476:	6f 92       	push	r6
    1478:	7f 92       	push	r7
    147a:	8f 92       	push	r8
    147c:	9f 92       	push	r9
    147e:	af 92       	push	r10
    1480:	bf 92       	push	r11
    1482:	cf 92       	push	r12
    1484:	df 92       	push	r13
    1486:	ef 92       	push	r14
    1488:	ff 92       	push	r15
    148a:	0f 93       	push	r16
    148c:	1f 93       	push	r17
    148e:	cf 93       	push	r28
    1490:	df 93       	push	r29
    1492:	ec 01       	movw	r28, r24
    1494:	6a 01       	movw	r12, r20
    1496:	7b 01       	movw	r14, r22
    itself. */
    configASSERT( xEventGroup );
    configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

    pxList = &( pxEventBits->xTasksWaitingForBits );
    pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1498:	8c 01       	movw	r16, r24
    149a:	09 5f       	subi	r16, 0xF9	; 249
    149c:	1f 4f       	sbci	r17, 0xFF	; 255
    vTaskSuspendAll();
    149e:	0e 94 b0 16 	call	0x2d60	; 0x2d60 <vTaskSuspendAll>
    {
        traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

        pxListItem = listGET_HEAD_ENTRY( pxList );
    14a2:	eb 85       	ldd	r30, Y+11	; 0x0b
    14a4:	fc 85       	ldd	r31, Y+12	; 0x0c

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;
    14a6:	88 81       	ld	r24, Y
    14a8:	99 81       	ldd	r25, Y+1	; 0x01
    14aa:	aa 81       	ldd	r26, Y+2	; 0x02
    14ac:	bb 81       	ldd	r27, Y+3	; 0x03
    14ae:	c8 2a       	or	r12, r24
    14b0:	d9 2a       	or	r13, r25
    14b2:	ea 2a       	or	r14, r26
    14b4:	fb 2a       	or	r15, r27
    14b6:	c8 82       	st	Y, r12
    14b8:	d9 82       	std	Y+1, r13	; 0x01
    14ba:	ea 82       	std	Y+2, r14	; 0x02
    14bc:	fb 82       	std	Y+3, r15	; 0x03

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
    14be:	0e 17       	cp	r16, r30
    14c0:	1f 07       	cpc	r17, r31
    14c2:	09 f4       	brne	.+2      	; 0x14c6 <xEventGroupSetBits+0x54>
    14c4:	45 c0       	rjmp	.+138    	; 0x1550 <xEventGroupSetBits+0xde>
    14c6:	c1 2c       	mov	r12, r1
    14c8:	d1 2c       	mov	r13, r1
    14ca:	76 01       	movw	r14, r12
            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
                {
                    xMatchFound = pdTRUE;
    14cc:	99 24       	eor	r9, r9
    14ce:	93 94       	inc	r9
    14d0:	81 2c       	mov	r8, r1
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
    14d2:	a4 80       	ldd	r10, Z+4	; 0x04
    14d4:	b5 80       	ldd	r11, Z+5	; 0x05
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
    14d6:	80 81       	ld	r24, Z
    14d8:	91 81       	ldd	r25, Z+1	; 0x01
    14da:	a2 81       	ldd	r26, Z+2	; 0x02
    14dc:	b3 81       	ldd	r27, Z+3	; 0x03
            xMatchFound = pdFALSE;

            /* Split the bits waited for from the control bits. */
            uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
            uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
    14de:	ac 01       	movw	r20, r24
    14e0:	bd 01       	movw	r22, r26
    14e2:	77 27       	eor	r23, r23

            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
    14e4:	b2 fd       	sbrc	r27, 2
    14e6:	0f c0       	rjmp	.+30     	; 0x1506 <xEventGroupSetBits+0x94>
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
                {
                    xMatchFound = pdTRUE;
    14e8:	48 80       	ld	r4, Y
    14ea:	59 80       	ldd	r5, Y+1	; 0x01
    14ec:	6a 80       	ldd	r6, Y+2	; 0x02
    14ee:	7b 80       	ldd	r7, Y+3	; 0x03
    14f0:	44 22       	and	r4, r20
    14f2:	55 22       	and	r5, r21
    14f4:	66 22       	and	r6, r22
    14f6:	77 22       	and	r7, r23
    14f8:	29 2d       	mov	r18, r9
    14fa:	45 28       	or	r4, r5
    14fc:	46 28       	or	r4, r6
    14fe:	47 28       	or	r4, r7
    1500:	89 f4       	brne	.+34     	; 0x1524 <xEventGroupSetBits+0xb2>
    1502:	28 2d       	mov	r18, r8
    1504:	0f c0       	rjmp	.+30     	; 0x1524 <xEventGroupSetBits+0xb2>
    1506:	48 80       	ld	r4, Y
    1508:	59 80       	ldd	r5, Y+1	; 0x01
    150a:	6a 80       	ldd	r6, Y+2	; 0x02
    150c:	7b 80       	ldd	r7, Y+3	; 0x03
    150e:	44 22       	and	r4, r20
    1510:	55 22       	and	r5, r21
    1512:	66 22       	and	r6, r22
    1514:	77 22       	and	r7, r23
    1516:	29 2d       	mov	r18, r9
    1518:	44 16       	cp	r4, r20
    151a:	55 06       	cpc	r5, r21
    151c:	66 06       	cpc	r6, r22
    151e:	77 06       	cpc	r7, r23
    1520:	09 f0       	breq	.+2      	; 0x1524 <xEventGroupSetBits+0xb2>
    1522:	28 2d       	mov	r18, r8
            else
            {
                /* Need all bits to be set, but not all the bits were set. */
            }

            if( xMatchFound != pdFALSE )
    1524:	22 23       	and	r18, r18
    1526:	71 f0       	breq	.+28     	; 0x1544 <xEventGroupSetBits+0xd2>
            {
                /* The bits match.  Should the bits be cleared on exit? */
                if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
    1528:	b0 ff       	sbrs	r27, 0
    152a:	04 c0       	rjmp	.+8      	; 0x1534 <xEventGroupSetBits+0xc2>
                {
                    uxBitsToClear |= uxBitsWaitedFor;
    152c:	c4 2a       	or	r12, r20
    152e:	d5 2a       	or	r13, r21
    1530:	e6 2a       	or	r14, r22
    1532:	f7 2a       	or	r15, r23
                /* Store the actual event flag value in the task's event list
                item before removing the task from the event list.  The
                eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                that is was unblocked due to its required bits matching, rather
                than because it timed out. */
                vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
    1534:	48 81       	ld	r20, Y
    1536:	59 81       	ldd	r21, Y+1	; 0x01
    1538:	6a 81       	ldd	r22, Y+2	; 0x02
    153a:	7b 81       	ldd	r23, Y+3	; 0x03
    153c:	72 60       	ori	r23, 0x02	; 2
    153e:	cf 01       	movw	r24, r30
    1540:	0e 94 4a 19 	call	0x3294	; 0x3294 <vTaskRemoveFromUnorderedEventList>
    1544:	ea 2d       	mov	r30, r10
    1546:	fb 2d       	mov	r31, r11

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
    1548:	0e 17       	cp	r16, r30
    154a:	1f 07       	cpc	r17, r31
    154c:	11 f6       	brne	.-124    	; 0x14d2 <xEventGroupSetBits+0x60>
    154e:	03 c0       	rjmp	.+6      	; 0x1556 <xEventGroupSetBits+0xe4>
EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
    1550:	c1 2c       	mov	r12, r1
    1552:	d1 2c       	mov	r13, r1
    1554:	76 01       	movw	r14, r12
            pxListItem = pxNext;
        }

        /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
        bit was set in the control word. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
    1556:	c0 94       	com	r12
    1558:	d0 94       	com	r13
    155a:	e0 94       	com	r14
    155c:	f0 94       	com	r15
    155e:	88 81       	ld	r24, Y
    1560:	99 81       	ldd	r25, Y+1	; 0x01
    1562:	aa 81       	ldd	r26, Y+2	; 0x02
    1564:	bb 81       	ldd	r27, Y+3	; 0x03
    1566:	c8 22       	and	r12, r24
    1568:	d9 22       	and	r13, r25
    156a:	ea 22       	and	r14, r26
    156c:	fb 22       	and	r15, r27
    156e:	c8 82       	st	Y, r12
    1570:	d9 82       	std	Y+1, r13	; 0x01
    1572:	ea 82       	std	Y+2, r14	; 0x02
    1574:	fb 82       	std	Y+3, r15	; 0x03
    }
    ( void ) xTaskResumeAll();
    1576:	0e 94 99 17 	call	0x2f32	; 0x2f32 <xTaskResumeAll>

    return pxEventBits->uxEventBits;
    157a:	68 81       	ld	r22, Y
    157c:	79 81       	ldd	r23, Y+1	; 0x01
    157e:	8a 81       	ldd	r24, Y+2	; 0x02
    1580:	9b 81       	ldd	r25, Y+3	; 0x03
}
    1582:	df 91       	pop	r29
    1584:	cf 91       	pop	r28
    1586:	1f 91       	pop	r17
    1588:	0f 91       	pop	r16
    158a:	ff 90       	pop	r15
    158c:	ef 90       	pop	r14
    158e:	df 90       	pop	r13
    1590:	cf 90       	pop	r12
    1592:	bf 90       	pop	r11
    1594:	af 90       	pop	r10
    1596:	9f 90       	pop	r9
    1598:	8f 90       	pop	r8
    159a:	7f 90       	pop	r7
    159c:	6f 90       	pop	r6
    159e:	5f 90       	pop	r5
    15a0:	4f 90       	pop	r4
    15a2:	08 95       	ret

000015a4 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
    15a4:	cf 93       	push	r28
    15a6:	df 93       	push	r29
    15a8:	dc 01       	movw	r26, r24
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
    15aa:	e5 e9       	ldi	r30, 0x95	; 149
    15ac:	f8 e0       	ldi	r31, 0x08	; 8
    15ae:	01 c0       	rjmp	.+2      	; 0x15b2 <prvInsertBlockIntoFreeList+0xe>
    15b0:	f9 01       	movw	r30, r18
    15b2:	20 81       	ld	r18, Z
    15b4:	31 81       	ldd	r19, Z+1	; 0x01
    15b6:	2a 17       	cp	r18, r26
    15b8:	3b 07       	cpc	r19, r27
    15ba:	d0 f3       	brcs	.-12     	; 0x15b0 <prvInsertBlockIntoFreeList+0xc>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
    15bc:	82 81       	ldd	r24, Z+2	; 0x02
    15be:	93 81       	ldd	r25, Z+3	; 0x03
    15c0:	af 01       	movw	r20, r30
    15c2:	48 0f       	add	r20, r24
    15c4:	59 1f       	adc	r21, r25
    15c6:	a4 17       	cp	r26, r20
    15c8:	b5 07       	cpc	r27, r21
    15ca:	49 f4       	brne	.+18     	; 0x15de <prvInsertBlockIntoFreeList+0x3a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
    15cc:	12 96       	adiw	r26, 0x02	; 2
    15ce:	4d 91       	ld	r20, X+
    15d0:	5c 91       	ld	r21, X
    15d2:	13 97       	sbiw	r26, 0x03	; 3
    15d4:	84 0f       	add	r24, r20
    15d6:	95 1f       	adc	r25, r21
    15d8:	93 83       	std	Z+3, r25	; 0x03
    15da:	82 83       	std	Z+2, r24	; 0x02
    15dc:	df 01       	movw	r26, r30
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
    15de:	12 96       	adiw	r26, 0x02	; 2
    15e0:	8d 91       	ld	r24, X+
    15e2:	9c 91       	ld	r25, X
    15e4:	13 97       	sbiw	r26, 0x03	; 3
    15e6:	ed 01       	movw	r28, r26
    15e8:	c8 0f       	add	r28, r24
    15ea:	d9 1f       	adc	r29, r25
    15ec:	2c 17       	cp	r18, r28
    15ee:	3d 07       	cpc	r19, r29
    15f0:	d9 f4       	brne	.+54     	; 0x1628 <prvInsertBlockIntoFreeList+0x84>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
    15f2:	20 91 93 08 	lds	r18, 0x0893	; 0x800893 <pxEnd>
    15f6:	30 91 94 08 	lds	r19, 0x0894	; 0x800894 <pxEnd+0x1>
    15fa:	c2 17       	cp	r28, r18
    15fc:	d3 07       	cpc	r29, r19
    15fe:	81 f0       	breq	.+32     	; 0x1620 <prvInsertBlockIntoFreeList+0x7c>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
    1600:	2a 81       	ldd	r18, Y+2	; 0x02
    1602:	3b 81       	ldd	r19, Y+3	; 0x03
    1604:	82 0f       	add	r24, r18
    1606:	93 1f       	adc	r25, r19
    1608:	13 96       	adiw	r26, 0x03	; 3
    160a:	9c 93       	st	X, r25
    160c:	8e 93       	st	-X, r24
    160e:	12 97       	sbiw	r26, 0x02	; 2
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
    1610:	c0 81       	ld	r28, Z
    1612:	d1 81       	ldd	r29, Z+1	; 0x01
    1614:	88 81       	ld	r24, Y
    1616:	99 81       	ldd	r25, Y+1	; 0x01
    1618:	11 96       	adiw	r26, 0x01	; 1
    161a:	9c 93       	st	X, r25
    161c:	8e 93       	st	-X, r24
    161e:	07 c0       	rjmp	.+14     	; 0x162e <prvInsertBlockIntoFreeList+0x8a>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
    1620:	11 96       	adiw	r26, 0x01	; 1
    1622:	dc 93       	st	X, r29
    1624:	ce 93       	st	-X, r28
    1626:	03 c0       	rjmp	.+6      	; 0x162e <prvInsertBlockIntoFreeList+0x8a>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
    1628:	11 96       	adiw	r26, 0x01	; 1
    162a:	3c 93       	st	X, r19
    162c:	2e 93       	st	-X, r18

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
    162e:	ae 17       	cp	r26, r30
    1630:	bf 07       	cpc	r27, r31
    1632:	11 f0       	breq	.+4      	; 0x1638 <prvInsertBlockIntoFreeList+0x94>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
    1634:	b1 83       	std	Z+1, r27	; 0x01
    1636:	a0 83       	st	Z, r26
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    1638:	df 91       	pop	r29
    163a:	cf 91       	pop	r28
    163c:	08 95       	ret

0000163e <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    163e:	cf 92       	push	r12
    1640:	df 92       	push	r13
    1642:	ef 92       	push	r14
    1644:	ff 92       	push	r15
    1646:	0f 93       	push	r16
    1648:	1f 93       	push	r17
    164a:	cf 93       	push	r28
    164c:	df 93       	push	r29
    164e:	ec 01       	movw	r28, r24
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
    1650:	0e 94 b0 16 	call	0x2d60	; 0x2d60 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
    1654:	80 91 93 08 	lds	r24, 0x0893	; 0x800893 <pxEnd>
    1658:	90 91 94 08 	lds	r25, 0x0894	; 0x800894 <pxEnd+0x1>
    165c:	89 2b       	or	r24, r25
    165e:	41 f5       	brne	.+80     	; 0x16b0 <pvPortMalloc+0x72>

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
    1660:	e5 e9       	ldi	r30, 0x95	; 149
    1662:	f8 e0       	ldi	r31, 0x08	; 8
    1664:	a9 e9       	ldi	r26, 0x99	; 153
    1666:	b8 e0       	ldi	r27, 0x08	; 8
    1668:	b1 83       	std	Z+1, r27	; 0x01
    166a:	a0 83       	st	Z, r26
	xStart.xBlockSize = ( size_t ) 0;
    166c:	13 82       	std	Z+3, r1	; 0x03
    166e:	12 82       	std	Z+2, r1	; 0x02
	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
	uxAddress -= xHeapStructSize;
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
	pxEnd = ( void * ) uxAddress;
    1670:	e5 e3       	ldi	r30, 0x35	; 53
    1672:	f8 e1       	ldi	r31, 0x18	; 24
    1674:	f0 93 94 08 	sts	0x0894, r31	; 0x800894 <pxEnd+0x1>
    1678:	e0 93 93 08 	sts	0x0893, r30	; 0x800893 <pxEnd>
	pxEnd->xBlockSize = 0;
    167c:	13 82       	std	Z+3, r1	; 0x03
    167e:	12 82       	std	Z+2, r1	; 0x02
	pxEnd->pxNextFreeBlock = NULL;
    1680:	11 82       	std	Z+1, r1	; 0x01
    1682:	10 82       	st	Z, r1

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
    1684:	8c e9       	ldi	r24, 0x9C	; 156
    1686:	9f e0       	ldi	r25, 0x0F	; 15
    1688:	13 96       	adiw	r26, 0x03	; 3
    168a:	9c 93       	st	X, r25
    168c:	8e 93       	st	-X, r24
    168e:	12 97       	sbiw	r26, 0x02	; 2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
    1690:	ed 93       	st	X+, r30
    1692:	fc 93       	st	X, r31

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
    1694:	90 93 90 08 	sts	0x0890, r25	; 0x800890 <xMinimumEverFreeBytesRemaining+0x1>
    1698:	80 93 8f 08 	sts	0x088F, r24	; 0x80088f <xMinimumEverFreeBytesRemaining>
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
    169c:	90 93 92 08 	sts	0x0892, r25	; 0x800892 <xFreeBytesRemaining+0x1>
    16a0:	80 93 91 08 	sts	0x0891, r24	; 0x800891 <xFreeBytesRemaining>

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
    16a4:	80 e0       	ldi	r24, 0x00	; 0
    16a6:	90 e8       	ldi	r25, 0x80	; 128
    16a8:	90 93 8e 08 	sts	0x088E, r25	; 0x80088e <xBlockAllocatedBit+0x1>
    16ac:	80 93 8d 08 	sts	0x088D, r24	; 0x80088d <xBlockAllocatedBit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
    16b0:	e0 90 8d 08 	lds	r14, 0x088D	; 0x80088d <xBlockAllocatedBit>
    16b4:	f0 90 8e 08 	lds	r15, 0x088E	; 0x80088e <xBlockAllocatedBit+0x1>
    16b8:	c7 01       	movw	r24, r14
    16ba:	8c 23       	and	r24, r28
    16bc:	9d 23       	and	r25, r29
    16be:	89 2b       	or	r24, r25
    16c0:	09 f0       	breq	.+2      	; 0x16c4 <pvPortMalloc+0x86>
    16c2:	66 c0       	rjmp	.+204    	; 0x1790 <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
    16c4:	20 97       	sbiw	r28, 0x00	; 0
    16c6:	09 f4       	brne	.+2      	; 0x16ca <pvPortMalloc+0x8c>
    16c8:	66 c0       	rjmp	.+204    	; 0x1796 <pvPortMalloc+0x158>
			{
				xWantedSize += xHeapStructSize;
    16ca:	ae 01       	movw	r20, r28
    16cc:	4c 5f       	subi	r20, 0xFC	; 252
    16ce:	5f 4f       	sbci	r21, 0xFF	; 255
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
    16d0:	09 f4       	brne	.+2      	; 0x16d4 <pvPortMalloc+0x96>
    16d2:	5e c0       	rjmp	.+188    	; 0x1790 <pvPortMalloc+0x152>
    16d4:	00 91 91 08 	lds	r16, 0x0891	; 0x800891 <xFreeBytesRemaining>
    16d8:	10 91 92 08 	lds	r17, 0x0892	; 0x800892 <xFreeBytesRemaining+0x1>
    16dc:	04 17       	cp	r16, r20
    16de:	15 07       	cpc	r17, r21
    16e0:	08 f4       	brcc	.+2      	; 0x16e4 <pvPortMalloc+0xa6>
    16e2:	56 c0       	rjmp	.+172    	; 0x1790 <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
    16e4:	c0 91 95 08 	lds	r28, 0x0895	; 0x800895 <xStart>
    16e8:	d0 91 96 08 	lds	r29, 0x0896	; 0x800896 <xStart+0x1>

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
    16ec:	e5 e9       	ldi	r30, 0x95	; 149
    16ee:	f8 e0       	ldi	r31, 0x08	; 8
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    16f0:	02 c0       	rjmp	.+4      	; 0x16f6 <pvPortMalloc+0xb8>
    16f2:	fe 01       	movw	r30, r28
				{
					pxPreviousBlock = pxBlock;
					pxBlock = pxBlock->pxNextFreeBlock;
    16f4:	e9 01       	movw	r28, r18
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    16f6:	2a 81       	ldd	r18, Y+2	; 0x02
    16f8:	3b 81       	ldd	r19, Y+3	; 0x03
    16fa:	24 17       	cp	r18, r20
    16fc:	35 07       	cpc	r19, r21
    16fe:	28 f4       	brcc	.+10     	; 0x170a <pvPortMalloc+0xcc>
    1700:	28 81       	ld	r18, Y
    1702:	39 81       	ldd	r19, Y+1	; 0x01
    1704:	21 15       	cp	r18, r1
    1706:	31 05       	cpc	r19, r1
    1708:	a1 f7       	brne	.-24     	; 0x16f2 <pvPortMalloc+0xb4>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
    170a:	80 91 93 08 	lds	r24, 0x0893	; 0x800893 <pxEnd>
    170e:	90 91 94 08 	lds	r25, 0x0894	; 0x800894 <pxEnd+0x1>
    1712:	c8 17       	cp	r28, r24
    1714:	d9 07       	cpc	r29, r25
    1716:	e1 f1       	breq	.+120    	; 0x1790 <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
    1718:	c0 80       	ld	r12, Z
    171a:	d1 80       	ldd	r13, Z+1	; 0x01
    171c:	84 e0       	ldi	r24, 0x04	; 4
    171e:	c8 0e       	add	r12, r24
    1720:	d1 1c       	adc	r13, r1

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    1722:	88 81       	ld	r24, Y
    1724:	99 81       	ldd	r25, Y+1	; 0x01
    1726:	91 83       	std	Z+1, r25	; 0x01
    1728:	80 83       	st	Z, r24

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    172a:	2a 81       	ldd	r18, Y+2	; 0x02
    172c:	3b 81       	ldd	r19, Y+3	; 0x03
    172e:	24 1b       	sub	r18, r20
    1730:	35 0b       	sbc	r19, r21
    1732:	29 30       	cpi	r18, 0x09	; 9
    1734:	31 05       	cpc	r19, r1
    1736:	48 f0       	brcs	.+18     	; 0x174a <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
    1738:	ce 01       	movw	r24, r28
    173a:	84 0f       	add	r24, r20
    173c:	95 1f       	adc	r25, r21
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    173e:	fc 01       	movw	r30, r24
    1740:	33 83       	std	Z+3, r19	; 0x03
    1742:	22 83       	std	Z+2, r18	; 0x02
						pxBlock->xBlockSize = xWantedSize;
    1744:	5b 83       	std	Y+3, r21	; 0x03
    1746:	4a 83       	std	Y+2, r20	; 0x02

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
    1748:	2d df       	rcall	.-422    	; 0x15a4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
    174a:	8a 81       	ldd	r24, Y+2	; 0x02
    174c:	9b 81       	ldd	r25, Y+3	; 0x03
    174e:	08 1b       	sub	r16, r24
    1750:	19 0b       	sbc	r17, r25
    1752:	10 93 92 08 	sts	0x0892, r17	; 0x800892 <xFreeBytesRemaining+0x1>
    1756:	00 93 91 08 	sts	0x0891, r16	; 0x800891 <xFreeBytesRemaining>

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
    175a:	20 91 8f 08 	lds	r18, 0x088F	; 0x80088f <xMinimumEverFreeBytesRemaining>
    175e:	30 91 90 08 	lds	r19, 0x0890	; 0x800890 <xMinimumEverFreeBytesRemaining+0x1>
    1762:	02 17       	cp	r16, r18
    1764:	13 07       	cpc	r17, r19
    1766:	20 f4       	brcc	.+8      	; 0x1770 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
    1768:	10 93 90 08 	sts	0x0890, r17	; 0x800890 <xMinimumEverFreeBytesRemaining+0x1>
    176c:	00 93 8f 08 	sts	0x088F, r16	; 0x80088f <xMinimumEverFreeBytesRemaining>
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
    1770:	e8 2a       	or	r14, r24
    1772:	f9 2a       	or	r15, r25
    1774:	fb 82       	std	Y+3, r15	; 0x03
    1776:	ea 82       	std	Y+2, r14	; 0x02
					pxBlock->pxNextFreeBlock = NULL;
    1778:	19 82       	std	Y+1, r1	; 0x01
    177a:	18 82       	st	Y, r1
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    177c:	0e 94 99 17 	call	0x2f32	; 0x2f32 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
    1780:	c1 14       	cp	r12, r1
    1782:	d1 04       	cpc	r13, r1
    1784:	59 f4       	brne	.+22     	; 0x179c <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
    1786:	0e 94 6e 1e 	call	0x3cdc	; 0x3cdc <vApplicationMallocFailedHook>
    178a:	c1 2c       	mov	r12, r1
    178c:	d1 2c       	mov	r13, r1
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
    178e:	06 c0       	rjmp	.+12     	; 0x179c <pvPortMalloc+0x15e>
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    1790:	0e 94 99 17 	call	0x2f32	; 0x2f32 <xTaskResumeAll>
    1794:	f8 cf       	rjmp	.-16     	; 0x1786 <pvPortMalloc+0x148>
    1796:	0e 94 99 17 	call	0x2f32	; 0x2f32 <xTaskResumeAll>
    179a:	f5 cf       	rjmp	.-22     	; 0x1786 <pvPortMalloc+0x148>
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
}
    179c:	c6 01       	movw	r24, r12
    179e:	df 91       	pop	r29
    17a0:	cf 91       	pop	r28
    17a2:	1f 91       	pop	r17
    17a4:	0f 91       	pop	r16
    17a6:	ff 90       	pop	r15
    17a8:	ef 90       	pop	r14
    17aa:	df 90       	pop	r13
    17ac:	cf 90       	pop	r12
    17ae:	08 95       	ret

000017b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    17b0:	cf 93       	push	r28
    17b2:	df 93       	push	r29
uint8_t *puc = ( uint8_t * ) pv;
BlockLink_t *pxLink;

	if( pv != NULL )
    17b4:	00 97       	sbiw	r24, 0x00	; 0
    17b6:	51 f1       	breq	.+84     	; 0x180c <vPortFree+0x5c>

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
		configASSERT( pxLink->pxNextFreeBlock == NULL );

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
    17b8:	fc 01       	movw	r30, r24
    17ba:	34 97       	sbiw	r30, 0x04	; 4
    17bc:	22 81       	ldd	r18, Z+2	; 0x02
    17be:	33 81       	ldd	r19, Z+3	; 0x03
    17c0:	40 91 8d 08 	lds	r20, 0x088D	; 0x80088d <xBlockAllocatedBit>
    17c4:	50 91 8e 08 	lds	r21, 0x088E	; 0x80088e <xBlockAllocatedBit+0x1>
    17c8:	b9 01       	movw	r22, r18
    17ca:	64 23       	and	r22, r20
    17cc:	75 23       	and	r23, r21
    17ce:	67 2b       	or	r22, r23
    17d0:	e9 f0       	breq	.+58     	; 0x180c <vPortFree+0x5c>
		{
			if( pxLink->pxNextFreeBlock == NULL )
    17d2:	60 81       	ld	r22, Z
    17d4:	71 81       	ldd	r23, Z+1	; 0x01
    17d6:	67 2b       	or	r22, r23
    17d8:	c9 f4       	brne	.+50     	; 0x180c <vPortFree+0x5c>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
    17da:	ef 01       	movw	r28, r30
    17dc:	40 95       	com	r20
    17de:	50 95       	com	r21
    17e0:	24 23       	and	r18, r20
    17e2:	35 23       	and	r19, r21
    17e4:	33 83       	std	Z+3, r19	; 0x03
    17e6:	22 83       	std	Z+2, r18	; 0x02

				vTaskSuspendAll();
    17e8:	0e 94 b0 16 	call	0x2d60	; 0x2d60 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
    17ec:	20 91 91 08 	lds	r18, 0x0891	; 0x800891 <xFreeBytesRemaining>
    17f0:	30 91 92 08 	lds	r19, 0x0892	; 0x800892 <xFreeBytesRemaining+0x1>
    17f4:	8a 81       	ldd	r24, Y+2	; 0x02
    17f6:	9b 81       	ldd	r25, Y+3	; 0x03
    17f8:	82 0f       	add	r24, r18
    17fa:	93 1f       	adc	r25, r19
    17fc:	90 93 92 08 	sts	0x0892, r25	; 0x800892 <xFreeBytesRemaining+0x1>
    1800:	80 93 91 08 	sts	0x0891, r24	; 0x800891 <xFreeBytesRemaining>
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
    1804:	ce 01       	movw	r24, r28
    1806:	ce de       	rcall	.-612    	; 0x15a4 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
    1808:	0e 94 99 17 	call	0x2f32	; 0x2f32 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
    180c:	df 91       	pop	r29
    180e:	cf 91       	pop	r28
    1810:	08 95       	ret

00001812 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    1812:	fc 01       	movw	r30, r24
    /* The list structure contains a list item which is used to mark the
    end of the list.  To initialise the list the list end is inserted
    as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );            /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1814:	03 96       	adiw	r24, 0x03	; 3
    1816:	92 83       	std	Z+2, r25	; 0x02
    1818:	81 83       	std	Z+1, r24	; 0x01

    /* The list end value is the highest possible value in the list to
    ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
    181a:	4f ef       	ldi	r20, 0xFF	; 255
    181c:	5f ef       	ldi	r21, 0xFF	; 255
    181e:	ba 01       	movw	r22, r20
    1820:	43 83       	std	Z+3, r20	; 0x03
    1822:	54 83       	std	Z+4, r21	; 0x04
    1824:	65 83       	std	Z+5, r22	; 0x05
    1826:	76 83       	std	Z+6, r23	; 0x06

    /* The list end next and previous pointers point to itself so we know
    when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );    /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1828:	90 87       	std	Z+8, r25	; 0x08
    182a:	87 83       	std	Z+7, r24	; 0x07
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    182c:	92 87       	std	Z+10, r25	; 0x0a
    182e:	81 87       	std	Z+9, r24	; 0x09

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    1830:	10 82       	st	Z, r1
    1832:	08 95       	ret

00001834 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
    1834:	fc 01       	movw	r30, r24
    1836:	13 86       	std	Z+11, r1	; 0x0b
    1838:	12 86       	std	Z+10, r1	; 0x0a
    183a:	08 95       	ret

0000183c <vListInsertEnd>:
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    183c:	cf 93       	push	r28
    183e:	df 93       	push	r29
    1840:	9c 01       	movw	r18, r24
    1842:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
    1844:	dc 01       	movw	r26, r24
    1846:	11 96       	adiw	r26, 0x01	; 1
    1848:	cd 91       	ld	r28, X+
    184a:	dc 91       	ld	r29, X
    184c:	12 97       	sbiw	r26, 0x02	; 2
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
    makes the new list item the last item to be removed by a call to
    listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
    184e:	d5 83       	std	Z+5, r29	; 0x05
    1850:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    1852:	8e 81       	ldd	r24, Y+6	; 0x06
    1854:	9f 81       	ldd	r25, Y+7	; 0x07
    1856:	97 83       	std	Z+7, r25	; 0x07
    1858:	86 83       	std	Z+6, r24	; 0x06

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
    185a:	8e 81       	ldd	r24, Y+6	; 0x06
    185c:	9f 81       	ldd	r25, Y+7	; 0x07
    185e:	dc 01       	movw	r26, r24
    1860:	15 96       	adiw	r26, 0x05	; 5
    1862:	7c 93       	st	X, r23
    1864:	6e 93       	st	-X, r22
    1866:	14 97       	sbiw	r26, 0x04	; 4
    pxIndex->pxPrevious = pxNewListItem;
    1868:	7f 83       	std	Y+7, r23	; 0x07
    186a:	6e 83       	std	Y+6, r22	; 0x06

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
    186c:	33 87       	std	Z+11, r19	; 0x0b
    186e:	22 87       	std	Z+10, r18	; 0x0a

    ( pxList->uxNumberOfItems )++;
    1870:	f9 01       	movw	r30, r18
    1872:	80 81       	ld	r24, Z
    1874:	8f 5f       	subi	r24, 0xFF	; 255
    1876:	80 83       	st	Z, r24
}
    1878:	df 91       	pop	r29
    187a:	cf 91       	pop	r28
    187c:	08 95       	ret

0000187e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    187e:	0f 93       	push	r16
    1880:	1f 93       	push	r17
    1882:	cf 93       	push	r28
    1884:	df 93       	push	r29
    1886:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    1888:	08 81       	ld	r16, Y
    188a:	19 81       	ldd	r17, Y+1	; 0x01
    188c:	2a 81       	ldd	r18, Y+2	; 0x02
    188e:	3b 81       	ldd	r19, Y+3	; 0x03
    new list item should be placed after it.  This ensures that TCBs which are
    stored in ready lists (all of which have the same xItemValue value) get a
    share of the CPU.  However, if the xItemValue is the same as the back marker
    the iteration loop below will not end.  Therefore the value is checked
    first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
    1890:	0f 3f       	cpi	r16, 0xFF	; 255
    1892:	4f ef       	ldi	r20, 0xFF	; 255
    1894:	14 07       	cpc	r17, r20
    1896:	24 07       	cpc	r18, r20
    1898:	34 07       	cpc	r19, r20
    189a:	21 f4       	brne	.+8      	; 0x18a4 <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
    189c:	fc 01       	movw	r30, r24
    189e:	a1 85       	ldd	r26, Z+9	; 0x09
    18a0:	b2 85       	ldd	r27, Z+10	; 0x0a
    18a2:	11 c0       	rjmp	.+34     	; 0x18c6 <vListInsert+0x48>
            4) Using a queue or semaphore before it has been initialised or
               before the scheduler has been started (are interrupts firing
               before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
    18a4:	dc 01       	movw	r26, r24
    18a6:	13 96       	adiw	r26, 0x03	; 3
    18a8:	01 c0       	rjmp	.+2      	; 0x18ac <vListInsert+0x2e>
    18aa:	df 01       	movw	r26, r30
    18ac:	14 96       	adiw	r26, 0x04	; 4
    18ae:	ed 91       	ld	r30, X+
    18b0:	fc 91       	ld	r31, X
    18b2:	15 97       	sbiw	r26, 0x05	; 5
    18b4:	40 81       	ld	r20, Z
    18b6:	51 81       	ldd	r21, Z+1	; 0x01
    18b8:	62 81       	ldd	r22, Z+2	; 0x02
    18ba:	73 81       	ldd	r23, Z+3	; 0x03
    18bc:	04 17       	cp	r16, r20
    18be:	15 07       	cpc	r17, r21
    18c0:	26 07       	cpc	r18, r22
    18c2:	37 07       	cpc	r19, r23
    18c4:	90 f7       	brcc	.-28     	; 0x18aa <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
            insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
    18c6:	14 96       	adiw	r26, 0x04	; 4
    18c8:	ed 91       	ld	r30, X+
    18ca:	fc 91       	ld	r31, X
    18cc:	15 97       	sbiw	r26, 0x05	; 5
    18ce:	fd 83       	std	Y+5, r31	; 0x05
    18d0:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    18d2:	d7 83       	std	Z+7, r29	; 0x07
    18d4:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
    18d6:	bf 83       	std	Y+7, r27	; 0x07
    18d8:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
    18da:	15 96       	adiw	r26, 0x05	; 5
    18dc:	dc 93       	st	X, r29
    18de:	ce 93       	st	-X, r28
    18e0:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
    item later. */
    pxNewListItem->pxContainer = pxList;
    18e2:	9b 87       	std	Y+11, r25	; 0x0b
    18e4:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
    18e6:	fc 01       	movw	r30, r24
    18e8:	20 81       	ld	r18, Z
    18ea:	2f 5f       	subi	r18, 0xFF	; 255
    18ec:	20 83       	st	Z, r18
}
    18ee:	df 91       	pop	r29
    18f0:	cf 91       	pop	r28
    18f2:	1f 91       	pop	r17
    18f4:	0f 91       	pop	r16
    18f6:	08 95       	ret

000018f8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    18f8:	cf 93       	push	r28
    18fa:	df 93       	push	r29
    18fc:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
    18fe:	a2 85       	ldd	r26, Z+10	; 0x0a
    1900:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    1902:	c4 81       	ldd	r28, Z+4	; 0x04
    1904:	d5 81       	ldd	r29, Z+5	; 0x05
    1906:	86 81       	ldd	r24, Z+6	; 0x06
    1908:	97 81       	ldd	r25, Z+7	; 0x07
    190a:	9f 83       	std	Y+7, r25	; 0x07
    190c:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    190e:	c6 81       	ldd	r28, Z+6	; 0x06
    1910:	d7 81       	ldd	r29, Z+7	; 0x07
    1912:	84 81       	ldd	r24, Z+4	; 0x04
    1914:	95 81       	ldd	r25, Z+5	; 0x05
    1916:	9d 83       	std	Y+5, r25	; 0x05
    1918:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
    191a:	11 96       	adiw	r26, 0x01	; 1
    191c:	8d 91       	ld	r24, X+
    191e:	9c 91       	ld	r25, X
    1920:	12 97       	sbiw	r26, 0x02	; 2
    1922:	e8 17       	cp	r30, r24
    1924:	f9 07       	cpc	r31, r25
    1926:	31 f4       	brne	.+12     	; 0x1934 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
    1928:	86 81       	ldd	r24, Z+6	; 0x06
    192a:	97 81       	ldd	r25, Z+7	; 0x07
    192c:	12 96       	adiw	r26, 0x02	; 2
    192e:	9c 93       	st	X, r25
    1930:	8e 93       	st	-X, r24
    1932:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
    1934:	13 86       	std	Z+11, r1	; 0x0b
    1936:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
    1938:	8c 91       	ld	r24, X
    193a:	81 50       	subi	r24, 0x01	; 1
    193c:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
    193e:	8c 91       	ld	r24, X
}
    1940:	df 91       	pop	r29
    1942:	cf 91       	pop	r28
    1944:	08 95       	ret

00001946 <pxPortInitialiseStack>:
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    1946:	31 e1       	ldi	r19, 0x11	; 17
    1948:	fc 01       	movw	r30, r24
    194a:	30 83       	st	Z, r19
    194c:	31 97       	sbiw	r30, 0x01	; 1
    194e:	22 e2       	ldi	r18, 0x22	; 34
    1950:	20 83       	st	Z, r18
    1952:	31 97       	sbiw	r30, 0x01	; 1
    1954:	a3 e3       	ldi	r26, 0x33	; 51
    1956:	a0 83       	st	Z, r26
    1958:	31 97       	sbiw	r30, 0x01	; 1
    195a:	60 83       	st	Z, r22
    195c:	31 97       	sbiw	r30, 0x01	; 1
    195e:	70 83       	st	Z, r23
    1960:	31 97       	sbiw	r30, 0x01	; 1
    1962:	10 82       	st	Z, r1
    1964:	31 97       	sbiw	r30, 0x01	; 1
    1966:	10 82       	st	Z, r1
    1968:	31 97       	sbiw	r30, 0x01	; 1
    196a:	60 e8       	ldi	r22, 0x80	; 128
    196c:	60 83       	st	Z, r22
    196e:	31 97       	sbiw	r30, 0x01	; 1
    1970:	10 82       	st	Z, r1
    1972:	31 97       	sbiw	r30, 0x01	; 1
    1974:	10 82       	st	Z, r1
    1976:	31 97       	sbiw	r30, 0x01	; 1
    1978:	10 82       	st	Z, r1
    197a:	31 97       	sbiw	r30, 0x01	; 1
    197c:	62 e0       	ldi	r22, 0x02	; 2
    197e:	60 83       	st	Z, r22
    1980:	31 97       	sbiw	r30, 0x01	; 1
    1982:	63 e0       	ldi	r22, 0x03	; 3
    1984:	60 83       	st	Z, r22
    1986:	31 97       	sbiw	r30, 0x01	; 1
    1988:	64 e0       	ldi	r22, 0x04	; 4
    198a:	60 83       	st	Z, r22
    198c:	31 97       	sbiw	r30, 0x01	; 1
    198e:	65 e0       	ldi	r22, 0x05	; 5
    1990:	60 83       	st	Z, r22
    1992:	31 97       	sbiw	r30, 0x01	; 1
    1994:	66 e0       	ldi	r22, 0x06	; 6
    1996:	60 83       	st	Z, r22
    1998:	31 97       	sbiw	r30, 0x01	; 1
    199a:	67 e0       	ldi	r22, 0x07	; 7
    199c:	60 83       	st	Z, r22
    199e:	31 97       	sbiw	r30, 0x01	; 1
    19a0:	68 e0       	ldi	r22, 0x08	; 8
    19a2:	60 83       	st	Z, r22
    19a4:	31 97       	sbiw	r30, 0x01	; 1
    19a6:	69 e0       	ldi	r22, 0x09	; 9
    19a8:	60 83       	st	Z, r22
    19aa:	31 97       	sbiw	r30, 0x01	; 1
    19ac:	60 e1       	ldi	r22, 0x10	; 16
    19ae:	60 83       	st	Z, r22
    19b0:	31 97       	sbiw	r30, 0x01	; 1
    19b2:	30 83       	st	Z, r19
    19b4:	31 97       	sbiw	r30, 0x01	; 1
    19b6:	32 e1       	ldi	r19, 0x12	; 18
    19b8:	30 83       	st	Z, r19
    19ba:	31 97       	sbiw	r30, 0x01	; 1
    19bc:	33 e1       	ldi	r19, 0x13	; 19
    19be:	30 83       	st	Z, r19
    19c0:	31 97       	sbiw	r30, 0x01	; 1
    19c2:	34 e1       	ldi	r19, 0x14	; 20
    19c4:	30 83       	st	Z, r19
    19c6:	31 97       	sbiw	r30, 0x01	; 1
    19c8:	35 e1       	ldi	r19, 0x15	; 21
    19ca:	30 83       	st	Z, r19
    19cc:	31 97       	sbiw	r30, 0x01	; 1
    19ce:	36 e1       	ldi	r19, 0x16	; 22
    19d0:	30 83       	st	Z, r19
    19d2:	31 97       	sbiw	r30, 0x01	; 1
    19d4:	37 e1       	ldi	r19, 0x17	; 23
    19d6:	30 83       	st	Z, r19
    19d8:	31 97       	sbiw	r30, 0x01	; 1
    19da:	38 e1       	ldi	r19, 0x18	; 24
    19dc:	30 83       	st	Z, r19
    19de:	31 97       	sbiw	r30, 0x01	; 1
    19e0:	39 e1       	ldi	r19, 0x19	; 25
    19e2:	30 83       	st	Z, r19
    19e4:	31 97       	sbiw	r30, 0x01	; 1
    19e6:	30 e2       	ldi	r19, 0x20	; 32
    19e8:	30 83       	st	Z, r19
    19ea:	31 97       	sbiw	r30, 0x01	; 1
    19ec:	31 e2       	ldi	r19, 0x21	; 33
    19ee:	30 83       	st	Z, r19
    19f0:	31 97       	sbiw	r30, 0x01	; 1
    19f2:	20 83       	st	Z, r18
    19f4:	31 97       	sbiw	r30, 0x01	; 1
    19f6:	23 e2       	ldi	r18, 0x23	; 35
    19f8:	20 83       	st	Z, r18
    19fa:	31 97       	sbiw	r30, 0x01	; 1
    19fc:	40 83       	st	Z, r20
    19fe:	31 97       	sbiw	r30, 0x01	; 1
    1a00:	50 83       	st	Z, r21
    1a02:	31 97       	sbiw	r30, 0x01	; 1
    1a04:	26 e2       	ldi	r18, 0x26	; 38
    1a06:	20 83       	st	Z, r18
    1a08:	31 97       	sbiw	r30, 0x01	; 1
    1a0a:	27 e2       	ldi	r18, 0x27	; 39
    1a0c:	20 83       	st	Z, r18
    1a0e:	31 97       	sbiw	r30, 0x01	; 1
    1a10:	28 e2       	ldi	r18, 0x28	; 40
    1a12:	20 83       	st	Z, r18
    1a14:	31 97       	sbiw	r30, 0x01	; 1
    1a16:	29 e2       	ldi	r18, 0x29	; 41
    1a18:	20 83       	st	Z, r18
    1a1a:	31 97       	sbiw	r30, 0x01	; 1
    1a1c:	20 e3       	ldi	r18, 0x30	; 48
    1a1e:	20 83       	st	Z, r18
    1a20:	31 97       	sbiw	r30, 0x01	; 1
    1a22:	21 e3       	ldi	r18, 0x31	; 49
    1a24:	20 83       	st	Z, r18
    1a26:	89 97       	sbiw	r24, 0x29	; 41
    1a28:	08 95       	ret

00001a2a <xPortStartScheduler>:
    1a2a:	a8 95       	wdr
    1a2c:	90 ec       	ldi	r25, 0xC0	; 192
    1a2e:	88 e1       	ldi	r24, 0x18	; 24
    1a30:	0f b6       	in	r0, 0x3f	; 63
    1a32:	f8 94       	cli
    1a34:	a8 95       	wdr
    1a36:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    1a3a:	0f be       	out	0x3f, r0	; 63
    1a3c:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    1a40:	a0 91 c9 18 	lds	r26, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    1a44:	b0 91 ca 18 	lds	r27, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    1a48:	cd 91       	ld	r28, X+
    1a4a:	cd bf       	out	0x3d, r28	; 61
    1a4c:	dd 91       	ld	r29, X+
    1a4e:	de bf       	out	0x3e, r29	; 62
    1a50:	ff 91       	pop	r31
    1a52:	ef 91       	pop	r30
    1a54:	df 91       	pop	r29
    1a56:	cf 91       	pop	r28
    1a58:	bf 91       	pop	r27
    1a5a:	af 91       	pop	r26
    1a5c:	9f 91       	pop	r25
    1a5e:	8f 91       	pop	r24
    1a60:	7f 91       	pop	r23
    1a62:	6f 91       	pop	r22
    1a64:	5f 91       	pop	r21
    1a66:	4f 91       	pop	r20
    1a68:	3f 91       	pop	r19
    1a6a:	2f 91       	pop	r18
    1a6c:	1f 91       	pop	r17
    1a6e:	0f 91       	pop	r16
    1a70:	ff 90       	pop	r15
    1a72:	ef 90       	pop	r14
    1a74:	df 90       	pop	r13
    1a76:	cf 90       	pop	r12
    1a78:	bf 90       	pop	r11
    1a7a:	af 90       	pop	r10
    1a7c:	9f 90       	pop	r9
    1a7e:	8f 90       	pop	r8
    1a80:	7f 90       	pop	r7
    1a82:	6f 90       	pop	r6
    1a84:	5f 90       	pop	r5
    1a86:	4f 90       	pop	r4
    1a88:	3f 90       	pop	r3
    1a8a:	2f 90       	pop	r2
    1a8c:	1f 90       	pop	r1
    1a8e:	0f 90       	pop	r0
    1a90:	0c be       	out	0x3c, r0	; 60
    1a92:	0f 90       	pop	r0
    1a94:	0b be       	out	0x3b, r0	; 59
    1a96:	0f 90       	pop	r0
    1a98:	0f be       	out	0x3f, r0	; 63
    1a9a:	0f 90       	pop	r0
    1a9c:	08 95       	ret
    1a9e:	81 e0       	ldi	r24, 0x01	; 1
    1aa0:	08 95       	ret

00001aa2 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYield( void )
{
    portSAVE_CONTEXT();
    1aa2:	0f 92       	push	r0
    1aa4:	0f b6       	in	r0, 0x3f	; 63
    1aa6:	f8 94       	cli
    1aa8:	0f 92       	push	r0
    1aaa:	0b b6       	in	r0, 0x3b	; 59
    1aac:	0f 92       	push	r0
    1aae:	0c b6       	in	r0, 0x3c	; 60
    1ab0:	0f 92       	push	r0
    1ab2:	1f 92       	push	r1
    1ab4:	11 24       	eor	r1, r1
    1ab6:	2f 92       	push	r2
    1ab8:	3f 92       	push	r3
    1aba:	4f 92       	push	r4
    1abc:	5f 92       	push	r5
    1abe:	6f 92       	push	r6
    1ac0:	7f 92       	push	r7
    1ac2:	8f 92       	push	r8
    1ac4:	9f 92       	push	r9
    1ac6:	af 92       	push	r10
    1ac8:	bf 92       	push	r11
    1aca:	cf 92       	push	r12
    1acc:	df 92       	push	r13
    1ace:	ef 92       	push	r14
    1ad0:	ff 92       	push	r15
    1ad2:	0f 93       	push	r16
    1ad4:	1f 93       	push	r17
    1ad6:	2f 93       	push	r18
    1ad8:	3f 93       	push	r19
    1ada:	4f 93       	push	r20
    1adc:	5f 93       	push	r21
    1ade:	6f 93       	push	r22
    1ae0:	7f 93       	push	r23
    1ae2:	8f 93       	push	r24
    1ae4:	9f 93       	push	r25
    1ae6:	af 93       	push	r26
    1ae8:	bf 93       	push	r27
    1aea:	cf 93       	push	r28
    1aec:	df 93       	push	r29
    1aee:	ef 93       	push	r30
    1af0:	ff 93       	push	r31
    1af2:	a0 91 c9 18 	lds	r26, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    1af6:	b0 91 ca 18 	lds	r27, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    1afa:	0d b6       	in	r0, 0x3d	; 61
    1afc:	0d 92       	st	X+, r0
    1afe:	0e b6       	in	r0, 0x3e	; 62
    1b00:	0d 92       	st	X+, r0
    vTaskSwitchContext();
    1b02:	0e 94 2e 18 	call	0x305c	; 0x305c <vTaskSwitchContext>
    portRESTORE_CONTEXT();
    1b06:	a0 91 c9 18 	lds	r26, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    1b0a:	b0 91 ca 18 	lds	r27, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    1b0e:	cd 91       	ld	r28, X+
    1b10:	cd bf       	out	0x3d, r28	; 61
    1b12:	dd 91       	ld	r29, X+
    1b14:	de bf       	out	0x3e, r29	; 62
    1b16:	ff 91       	pop	r31
    1b18:	ef 91       	pop	r30
    1b1a:	df 91       	pop	r29
    1b1c:	cf 91       	pop	r28
    1b1e:	bf 91       	pop	r27
    1b20:	af 91       	pop	r26
    1b22:	9f 91       	pop	r25
    1b24:	8f 91       	pop	r24
    1b26:	7f 91       	pop	r23
    1b28:	6f 91       	pop	r22
    1b2a:	5f 91       	pop	r21
    1b2c:	4f 91       	pop	r20
    1b2e:	3f 91       	pop	r19
    1b30:	2f 91       	pop	r18
    1b32:	1f 91       	pop	r17
    1b34:	0f 91       	pop	r16
    1b36:	ff 90       	pop	r15
    1b38:	ef 90       	pop	r14
    1b3a:	df 90       	pop	r13
    1b3c:	cf 90       	pop	r12
    1b3e:	bf 90       	pop	r11
    1b40:	af 90       	pop	r10
    1b42:	9f 90       	pop	r9
    1b44:	8f 90       	pop	r8
    1b46:	7f 90       	pop	r7
    1b48:	6f 90       	pop	r6
    1b4a:	5f 90       	pop	r5
    1b4c:	4f 90       	pop	r4
    1b4e:	3f 90       	pop	r3
    1b50:	2f 90       	pop	r2
    1b52:	1f 90       	pop	r1
    1b54:	0f 90       	pop	r0
    1b56:	0c be       	out	0x3c, r0	; 60
    1b58:	0f 90       	pop	r0
    1b5a:	0b be       	out	0x3b, r0	; 59
    1b5c:	0f 90       	pop	r0
    1b5e:	0f be       	out	0x3f, r0	; 63
    1b60:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
    1b62:	08 95       	ret

00001b64 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
    1b64:	0f 92       	push	r0
    1b66:	0f b6       	in	r0, 0x3f	; 63
    1b68:	f8 94       	cli
    1b6a:	0f 92       	push	r0
    1b6c:	0b b6       	in	r0, 0x3b	; 59
    1b6e:	0f 92       	push	r0
    1b70:	0c b6       	in	r0, 0x3c	; 60
    1b72:	0f 92       	push	r0
    1b74:	1f 92       	push	r1
    1b76:	11 24       	eor	r1, r1
    1b78:	2f 92       	push	r2
    1b7a:	3f 92       	push	r3
    1b7c:	4f 92       	push	r4
    1b7e:	5f 92       	push	r5
    1b80:	6f 92       	push	r6
    1b82:	7f 92       	push	r7
    1b84:	8f 92       	push	r8
    1b86:	9f 92       	push	r9
    1b88:	af 92       	push	r10
    1b8a:	bf 92       	push	r11
    1b8c:	cf 92       	push	r12
    1b8e:	df 92       	push	r13
    1b90:	ef 92       	push	r14
    1b92:	ff 92       	push	r15
    1b94:	0f 93       	push	r16
    1b96:	1f 93       	push	r17
    1b98:	2f 93       	push	r18
    1b9a:	3f 93       	push	r19
    1b9c:	4f 93       	push	r20
    1b9e:	5f 93       	push	r21
    1ba0:	6f 93       	push	r22
    1ba2:	7f 93       	push	r23
    1ba4:	8f 93       	push	r24
    1ba6:	9f 93       	push	r25
    1ba8:	af 93       	push	r26
    1baa:	bf 93       	push	r27
    1bac:	cf 93       	push	r28
    1bae:	df 93       	push	r29
    1bb0:	ef 93       	push	r30
    1bb2:	ff 93       	push	r31
    1bb4:	a0 91 c9 18 	lds	r26, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    1bb8:	b0 91 ca 18 	lds	r27, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    1bbc:	0d b6       	in	r0, 0x3d	; 61
    1bbe:	0d 92       	st	X+, r0
    1bc0:	0e b6       	in	r0, 0x3e	; 62
    1bc2:	0d 92       	st	X+, r0

    sleep_reset();        //     reset the sleep_mode() faster than sleep_disable();
    1bc4:	13 be       	out	0x33, r1	; 51

    if( xTaskIncrementTick() != pdFALSE )
    1bc6:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <xTaskIncrementTick>
    1bca:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
    1bcc:	0e 94 2e 18 	call	0x305c	; 0x305c <vTaskSwitchContext>
    }

    portRESTORE_CONTEXT();
    1bd0:	a0 91 c9 18 	lds	r26, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    1bd4:	b0 91 ca 18 	lds	r27, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    1bd8:	cd 91       	ld	r28, X+
    1bda:	cd bf       	out	0x3d, r28	; 61
    1bdc:	dd 91       	ld	r29, X+
    1bde:	de bf       	out	0x3e, r29	; 62
    1be0:	ff 91       	pop	r31
    1be2:	ef 91       	pop	r30
    1be4:	df 91       	pop	r29
    1be6:	cf 91       	pop	r28
    1be8:	bf 91       	pop	r27
    1bea:	af 91       	pop	r26
    1bec:	9f 91       	pop	r25
    1bee:	8f 91       	pop	r24
    1bf0:	7f 91       	pop	r23
    1bf2:	6f 91       	pop	r22
    1bf4:	5f 91       	pop	r21
    1bf6:	4f 91       	pop	r20
    1bf8:	3f 91       	pop	r19
    1bfa:	2f 91       	pop	r18
    1bfc:	1f 91       	pop	r17
    1bfe:	0f 91       	pop	r16
    1c00:	ff 90       	pop	r15
    1c02:	ef 90       	pop	r14
    1c04:	df 90       	pop	r13
    1c06:	cf 90       	pop	r12
    1c08:	bf 90       	pop	r11
    1c0a:	af 90       	pop	r10
    1c0c:	9f 90       	pop	r9
    1c0e:	8f 90       	pop	r8
    1c10:	7f 90       	pop	r7
    1c12:	6f 90       	pop	r6
    1c14:	5f 90       	pop	r5
    1c16:	4f 90       	pop	r4
    1c18:	3f 90       	pop	r3
    1c1a:	2f 90       	pop	r2
    1c1c:	1f 90       	pop	r1
    1c1e:	0f 90       	pop	r0
    1c20:	0c be       	out	0x3c, r0	; 60
    1c22:	0f 90       	pop	r0
    1c24:	0b be       	out	0x3b, r0	; 59
    1c26:	0f 90       	pop	r0
    1c28:	0f be       	out	0x3f, r0	; 63
    1c2a:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
    1c2c:	08 95       	ret

00001c2e <__vector_12>:
     */
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
//  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
    1c2e:	9a df       	rcall	.-204    	; 0x1b64 <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
    1c30:	18 95       	reti

00001c32 <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    1c32:	0f b6       	in	r0, 0x3f	; 63
    1c34:	f8 94       	cli
    1c36:	0f 92       	push	r0
    1c38:	fc 01       	movw	r30, r24
    1c3a:	96 8d       	ldd	r25, Z+30	; 0x1e
    1c3c:	0f 90       	pop	r0
    1c3e:	0f be       	out	0x3f, r0	; 63
    1c40:	81 e0       	ldi	r24, 0x01	; 1
    1c42:	91 11       	cpse	r25, r1
    1c44:	80 e0       	ldi	r24, 0x00	; 0
    1c46:	08 95       	ret

00001c48 <prvCopyDataToQueue>:
    1c48:	0f 93       	push	r16
    1c4a:	1f 93       	push	r17
    1c4c:	cf 93       	push	r28
    1c4e:	df 93       	push	r29
    1c50:	ec 01       	movw	r28, r24
    1c52:	04 2f       	mov	r16, r20
    1c54:	1e 8d       	ldd	r17, Y+30	; 0x1e
    1c56:	48 a1       	ldd	r20, Y+32	; 0x20
    1c58:	41 11       	cpse	r20, r1
    1c5a:	0c c0       	rjmp	.+24     	; 0x1c74 <prvCopyDataToQueue+0x2c>
    1c5c:	88 81       	ld	r24, Y
    1c5e:	99 81       	ldd	r25, Y+1	; 0x01
    1c60:	89 2b       	or	r24, r25
    1c62:	09 f0       	breq	.+2      	; 0x1c66 <prvCopyDataToQueue+0x1e>
    1c64:	42 c0       	rjmp	.+132    	; 0x1cea <prvCopyDataToQueue+0xa2>
    1c66:	8c 81       	ldd	r24, Y+4	; 0x04
    1c68:	9d 81       	ldd	r25, Y+5	; 0x05
    1c6a:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <xTaskPriorityDisinherit>
    1c6e:	1d 82       	std	Y+5, r1	; 0x05
    1c70:	1c 82       	std	Y+4, r1	; 0x04
    1c72:	42 c0       	rjmp	.+132    	; 0x1cf8 <prvCopyDataToQueue+0xb0>
    1c74:	01 11       	cpse	r16, r1
    1c76:	17 c0       	rjmp	.+46     	; 0x1ca6 <prvCopyDataToQueue+0x5e>
    1c78:	50 e0       	ldi	r21, 0x00	; 0
    1c7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c7c:	9b 81       	ldd	r25, Y+3	; 0x03
    1c7e:	0e 94 0e 31 	call	0x621c	; 0x621c <memcpy>
    1c82:	28 a1       	ldd	r18, Y+32	; 0x20
    1c84:	8a 81       	ldd	r24, Y+2	; 0x02
    1c86:	9b 81       	ldd	r25, Y+3	; 0x03
    1c88:	82 0f       	add	r24, r18
    1c8a:	91 1d       	adc	r25, r1
    1c8c:	9b 83       	std	Y+3, r25	; 0x03
    1c8e:	8a 83       	std	Y+2, r24	; 0x02
    1c90:	2c 81       	ldd	r18, Y+4	; 0x04
    1c92:	3d 81       	ldd	r19, Y+5	; 0x05
    1c94:	82 17       	cp	r24, r18
    1c96:	93 07       	cpc	r25, r19
    1c98:	50 f1       	brcs	.+84     	; 0x1cee <prvCopyDataToQueue+0xa6>
    1c9a:	88 81       	ld	r24, Y
    1c9c:	99 81       	ldd	r25, Y+1	; 0x01
    1c9e:	9b 83       	std	Y+3, r25	; 0x03
    1ca0:	8a 83       	std	Y+2, r24	; 0x02
    1ca2:	80 e0       	ldi	r24, 0x00	; 0
    1ca4:	29 c0       	rjmp	.+82     	; 0x1cf8 <prvCopyDataToQueue+0xb0>
    1ca6:	50 e0       	ldi	r21, 0x00	; 0
    1ca8:	8e 81       	ldd	r24, Y+6	; 0x06
    1caa:	9f 81       	ldd	r25, Y+7	; 0x07
    1cac:	0e 94 0e 31 	call	0x621c	; 0x621c <memcpy>
    1cb0:	88 a1       	ldd	r24, Y+32	; 0x20
    1cb2:	90 e0       	ldi	r25, 0x00	; 0
    1cb4:	91 95       	neg	r25
    1cb6:	81 95       	neg	r24
    1cb8:	91 09       	sbc	r25, r1
    1cba:	2e 81       	ldd	r18, Y+6	; 0x06
    1cbc:	3f 81       	ldd	r19, Y+7	; 0x07
    1cbe:	28 0f       	add	r18, r24
    1cc0:	39 1f       	adc	r19, r25
    1cc2:	3f 83       	std	Y+7, r19	; 0x07
    1cc4:	2e 83       	std	Y+6, r18	; 0x06
    1cc6:	48 81       	ld	r20, Y
    1cc8:	59 81       	ldd	r21, Y+1	; 0x01
    1cca:	24 17       	cp	r18, r20
    1ccc:	35 07       	cpc	r19, r21
    1cce:	30 f4       	brcc	.+12     	; 0x1cdc <prvCopyDataToQueue+0x94>
    1cd0:	2c 81       	ldd	r18, Y+4	; 0x04
    1cd2:	3d 81       	ldd	r19, Y+5	; 0x05
    1cd4:	82 0f       	add	r24, r18
    1cd6:	93 1f       	adc	r25, r19
    1cd8:	9f 83       	std	Y+7, r25	; 0x07
    1cda:	8e 83       	std	Y+6, r24	; 0x06
    1cdc:	02 30       	cpi	r16, 0x02	; 2
    1cde:	49 f4       	brne	.+18     	; 0x1cf2 <prvCopyDataToQueue+0xaa>
    1ce0:	11 23       	and	r17, r17
    1ce2:	49 f0       	breq	.+18     	; 0x1cf6 <prvCopyDataToQueue+0xae>
    1ce4:	11 50       	subi	r17, 0x01	; 1
    1ce6:	80 e0       	ldi	r24, 0x00	; 0
    1ce8:	07 c0       	rjmp	.+14     	; 0x1cf8 <prvCopyDataToQueue+0xb0>
    1cea:	80 e0       	ldi	r24, 0x00	; 0
    1cec:	05 c0       	rjmp	.+10     	; 0x1cf8 <prvCopyDataToQueue+0xb0>
    1cee:	80 e0       	ldi	r24, 0x00	; 0
    1cf0:	03 c0       	rjmp	.+6      	; 0x1cf8 <prvCopyDataToQueue+0xb0>
    1cf2:	80 e0       	ldi	r24, 0x00	; 0
    1cf4:	01 c0       	rjmp	.+2      	; 0x1cf8 <prvCopyDataToQueue+0xb0>
    1cf6:	80 e0       	ldi	r24, 0x00	; 0
    1cf8:	1f 5f       	subi	r17, 0xFF	; 255
    1cfa:	1e 8f       	std	Y+30, r17	; 0x1e
    1cfc:	df 91       	pop	r29
    1cfe:	cf 91       	pop	r28
    1d00:	1f 91       	pop	r17
    1d02:	0f 91       	pop	r16
    1d04:	08 95       	ret

00001d06 <prvCopyDataFromQueue>:
    1d06:	fc 01       	movw	r30, r24
    1d08:	40 a1       	ldd	r20, Z+32	; 0x20
    1d0a:	44 23       	and	r20, r20
    1d0c:	a9 f0       	breq	.+42     	; 0x1d38 <prvCopyDataFromQueue+0x32>
    1d0e:	50 e0       	ldi	r21, 0x00	; 0
    1d10:	26 81       	ldd	r18, Z+6	; 0x06
    1d12:	37 81       	ldd	r19, Z+7	; 0x07
    1d14:	24 0f       	add	r18, r20
    1d16:	35 1f       	adc	r19, r21
    1d18:	37 83       	std	Z+7, r19	; 0x07
    1d1a:	26 83       	std	Z+6, r18	; 0x06
    1d1c:	84 81       	ldd	r24, Z+4	; 0x04
    1d1e:	95 81       	ldd	r25, Z+5	; 0x05
    1d20:	28 17       	cp	r18, r24
    1d22:	39 07       	cpc	r19, r25
    1d24:	20 f0       	brcs	.+8      	; 0x1d2e <prvCopyDataFromQueue+0x28>
    1d26:	80 81       	ld	r24, Z
    1d28:	91 81       	ldd	r25, Z+1	; 0x01
    1d2a:	97 83       	std	Z+7, r25	; 0x07
    1d2c:	86 83       	std	Z+6, r24	; 0x06
    1d2e:	cb 01       	movw	r24, r22
    1d30:	66 81       	ldd	r22, Z+6	; 0x06
    1d32:	77 81       	ldd	r23, Z+7	; 0x07
    1d34:	0c 94 0e 31 	jmp	0x621c	; 0x621c <memcpy>
    1d38:	08 95       	ret

00001d3a <prvUnlockQueue>:
    1d3a:	ef 92       	push	r14
    1d3c:	ff 92       	push	r15
    1d3e:	0f 93       	push	r16
    1d40:	1f 93       	push	r17
    1d42:	cf 93       	push	r28
    1d44:	8c 01       	movw	r16, r24
    1d46:	0f b6       	in	r0, 0x3f	; 63
    1d48:	f8 94       	cli
    1d4a:	0f 92       	push	r0
    1d4c:	fc 01       	movw	r30, r24
    1d4e:	c2 a1       	ldd	r28, Z+34	; 0x22
    1d50:	1c 16       	cp	r1, r28
    1d52:	ac f4       	brge	.+42     	; 0x1d7e <prvUnlockQueue+0x44>
    1d54:	83 89       	ldd	r24, Z+19	; 0x13
    1d56:	81 11       	cpse	r24, r1
    1d58:	06 c0       	rjmp	.+12     	; 0x1d66 <prvUnlockQueue+0x2c>
    1d5a:	11 c0       	rjmp	.+34     	; 0x1d7e <prvUnlockQueue+0x44>
    1d5c:	f8 01       	movw	r30, r16
    1d5e:	83 89       	ldd	r24, Z+19	; 0x13
    1d60:	81 11       	cpse	r24, r1
    1d62:	05 c0       	rjmp	.+10     	; 0x1d6e <prvUnlockQueue+0x34>
    1d64:	0c c0       	rjmp	.+24     	; 0x1d7e <prvUnlockQueue+0x44>
    1d66:	78 01       	movw	r14, r16
    1d68:	f3 e1       	ldi	r31, 0x13	; 19
    1d6a:	ef 0e       	add	r14, r31
    1d6c:	f1 1c       	adc	r15, r1
    1d6e:	c7 01       	movw	r24, r14
    1d70:	0e 94 08 19 	call	0x3210	; 0x3210 <xTaskRemoveFromEventList>
    1d74:	81 11       	cpse	r24, r1
    1d76:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <vTaskMissedYield>
    1d7a:	c1 50       	subi	r28, 0x01	; 1
    1d7c:	79 f7       	brne	.-34     	; 0x1d5c <prvUnlockQueue+0x22>
    1d7e:	8f ef       	ldi	r24, 0xFF	; 255
    1d80:	f8 01       	movw	r30, r16
    1d82:	82 a3       	std	Z+34, r24	; 0x22
    1d84:	0f 90       	pop	r0
    1d86:	0f be       	out	0x3f, r0	; 63
    1d88:	0f b6       	in	r0, 0x3f	; 63
    1d8a:	f8 94       	cli
    1d8c:	0f 92       	push	r0
    1d8e:	c1 a1       	ldd	r28, Z+33	; 0x21
    1d90:	1c 16       	cp	r1, r28
    1d92:	ac f4       	brge	.+42     	; 0x1dbe <prvUnlockQueue+0x84>
    1d94:	80 85       	ldd	r24, Z+8	; 0x08
    1d96:	81 11       	cpse	r24, r1
    1d98:	06 c0       	rjmp	.+12     	; 0x1da6 <prvUnlockQueue+0x6c>
    1d9a:	11 c0       	rjmp	.+34     	; 0x1dbe <prvUnlockQueue+0x84>
    1d9c:	f8 01       	movw	r30, r16
    1d9e:	80 85       	ldd	r24, Z+8	; 0x08
    1da0:	81 11       	cpse	r24, r1
    1da2:	05 c0       	rjmp	.+10     	; 0x1dae <prvUnlockQueue+0x74>
    1da4:	0c c0       	rjmp	.+24     	; 0x1dbe <prvUnlockQueue+0x84>
    1da6:	78 01       	movw	r14, r16
    1da8:	f8 e0       	ldi	r31, 0x08	; 8
    1daa:	ef 0e       	add	r14, r31
    1dac:	f1 1c       	adc	r15, r1
    1dae:	c7 01       	movw	r24, r14
    1db0:	0e 94 08 19 	call	0x3210	; 0x3210 <xTaskRemoveFromEventList>
    1db4:	81 11       	cpse	r24, r1
    1db6:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <vTaskMissedYield>
    1dba:	c1 50       	subi	r28, 0x01	; 1
    1dbc:	79 f7       	brne	.-34     	; 0x1d9c <prvUnlockQueue+0x62>
    1dbe:	8f ef       	ldi	r24, 0xFF	; 255
    1dc0:	f8 01       	movw	r30, r16
    1dc2:	81 a3       	std	Z+33, r24	; 0x21
    1dc4:	0f 90       	pop	r0
    1dc6:	0f be       	out	0x3f, r0	; 63
    1dc8:	cf 91       	pop	r28
    1dca:	1f 91       	pop	r17
    1dcc:	0f 91       	pop	r16
    1dce:	ff 90       	pop	r15
    1dd0:	ef 90       	pop	r14
    1dd2:	08 95       	ret

00001dd4 <xQueueGenericReset>:
    1dd4:	cf 93       	push	r28
    1dd6:	df 93       	push	r29
    1dd8:	ec 01       	movw	r28, r24
    1dda:	0f b6       	in	r0, 0x3f	; 63
    1ddc:	f8 94       	cli
    1dde:	0f 92       	push	r0
    1de0:	e8 81       	ld	r30, Y
    1de2:	f9 81       	ldd	r31, Y+1	; 0x01
    1de4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1de6:	28 a1       	ldd	r18, Y+32	; 0x20
    1de8:	90 e0       	ldi	r25, 0x00	; 0
    1dea:	30 e0       	ldi	r19, 0x00	; 0
    1dec:	82 9f       	mul	r24, r18
    1dee:	a0 01       	movw	r20, r0
    1df0:	83 9f       	mul	r24, r19
    1df2:	50 0d       	add	r21, r0
    1df4:	92 9f       	mul	r25, r18
    1df6:	50 0d       	add	r21, r0
    1df8:	11 24       	eor	r1, r1
    1dfa:	4e 0f       	add	r20, r30
    1dfc:	5f 1f       	adc	r21, r31
    1dfe:	5d 83       	std	Y+5, r21	; 0x05
    1e00:	4c 83       	std	Y+4, r20	; 0x04
    1e02:	1e 8e       	std	Y+30, r1	; 0x1e
    1e04:	fb 83       	std	Y+3, r31	; 0x03
    1e06:	ea 83       	std	Y+2, r30	; 0x02
    1e08:	01 97       	sbiw	r24, 0x01	; 1
    1e0a:	82 9f       	mul	r24, r18
    1e0c:	a0 01       	movw	r20, r0
    1e0e:	83 9f       	mul	r24, r19
    1e10:	50 0d       	add	r21, r0
    1e12:	92 9f       	mul	r25, r18
    1e14:	50 0d       	add	r21, r0
    1e16:	11 24       	eor	r1, r1
    1e18:	cf 01       	movw	r24, r30
    1e1a:	84 0f       	add	r24, r20
    1e1c:	95 1f       	adc	r25, r21
    1e1e:	9f 83       	std	Y+7, r25	; 0x07
    1e20:	8e 83       	std	Y+6, r24	; 0x06
    1e22:	8f ef       	ldi	r24, 0xFF	; 255
    1e24:	89 a3       	std	Y+33, r24	; 0x21
    1e26:	8a a3       	std	Y+34, r24	; 0x22
    1e28:	61 11       	cpse	r22, r1
    1e2a:	0b c0       	rjmp	.+22     	; 0x1e42 <xQueueGenericReset+0x6e>
    1e2c:	88 85       	ldd	r24, Y+8	; 0x08
    1e2e:	88 23       	and	r24, r24
    1e30:	71 f0       	breq	.+28     	; 0x1e4e <xQueueGenericReset+0x7a>
    1e32:	ce 01       	movw	r24, r28
    1e34:	08 96       	adiw	r24, 0x08	; 8
    1e36:	0e 94 08 19 	call	0x3210	; 0x3210 <xTaskRemoveFromEventList>
    1e3a:	88 23       	and	r24, r24
    1e3c:	41 f0       	breq	.+16     	; 0x1e4e <xQueueGenericReset+0x7a>
    1e3e:	31 de       	rcall	.-926    	; 0x1aa2 <vPortYield>
    1e40:	06 c0       	rjmp	.+12     	; 0x1e4e <xQueueGenericReset+0x7a>
    1e42:	ce 01       	movw	r24, r28
    1e44:	08 96       	adiw	r24, 0x08	; 8
    1e46:	e5 dc       	rcall	.-1590   	; 0x1812 <vListInitialise>
    1e48:	ce 01       	movw	r24, r28
    1e4a:	43 96       	adiw	r24, 0x13	; 19
    1e4c:	e2 dc       	rcall	.-1596   	; 0x1812 <vListInitialise>
    1e4e:	0f 90       	pop	r0
    1e50:	0f be       	out	0x3f, r0	; 63
    1e52:	81 e0       	ldi	r24, 0x01	; 1
    1e54:	df 91       	pop	r29
    1e56:	cf 91       	pop	r28
    1e58:	08 95       	ret

00001e5a <xQueueGenericCreate>:
    1e5a:	ff 92       	push	r15
    1e5c:	0f 93       	push	r16
    1e5e:	1f 93       	push	r17
    1e60:	cf 93       	push	r28
    1e62:	df 93       	push	r29
    1e64:	08 2f       	mov	r16, r24
    1e66:	16 2f       	mov	r17, r22
    1e68:	f4 2e       	mov	r15, r20
    1e6a:	66 23       	and	r22, r22
    1e6c:	b9 f0       	breq	.+46     	; 0x1e9c <xQueueGenericCreate+0x42>
    1e6e:	86 9f       	mul	r24, r22
    1e70:	c0 01       	movw	r24, r0
    1e72:	11 24       	eor	r1, r1
    1e74:	85 96       	adiw	r24, 0x25	; 37
    1e76:	e3 db       	rcall	.-2106   	; 0x163e <pvPortMalloc>
    1e78:	ec 01       	movw	r28, r24
    1e7a:	00 97       	sbiw	r24, 0x00	; 0
    1e7c:	41 f4       	brne	.+16     	; 0x1e8e <xQueueGenericCreate+0x34>
    1e7e:	14 c0       	rjmp	.+40     	; 0x1ea8 <xQueueGenericCreate+0x4e>
    1e80:	0f 8f       	std	Y+31, r16	; 0x1f
    1e82:	18 a3       	std	Y+32, r17	; 0x20
    1e84:	61 e0       	ldi	r22, 0x01	; 1
    1e86:	ce 01       	movw	r24, r28
    1e88:	a5 df       	rcall	.-182    	; 0x1dd4 <xQueueGenericReset>
    1e8a:	fc a2       	std	Y+36, r15	; 0x24
    1e8c:	0d c0       	rjmp	.+26     	; 0x1ea8 <xQueueGenericCreate+0x4e>
    1e8e:	85 96       	adiw	r24, 0x25	; 37
    1e90:	99 83       	std	Y+1, r25	; 0x01
    1e92:	88 83       	st	Y, r24
    1e94:	f5 cf       	rjmp	.-22     	; 0x1e80 <xQueueGenericCreate+0x26>
    1e96:	d9 83       	std	Y+1, r29	; 0x01
    1e98:	c8 83       	st	Y, r28
    1e9a:	f2 cf       	rjmp	.-28     	; 0x1e80 <xQueueGenericCreate+0x26>
    1e9c:	85 e2       	ldi	r24, 0x25	; 37
    1e9e:	90 e0       	ldi	r25, 0x00	; 0
    1ea0:	ce db       	rcall	.-2148   	; 0x163e <pvPortMalloc>
    1ea2:	ec 01       	movw	r28, r24
    1ea4:	89 2b       	or	r24, r25
    1ea6:	b9 f7       	brne	.-18     	; 0x1e96 <xQueueGenericCreate+0x3c>
    1ea8:	ce 01       	movw	r24, r28
    1eaa:	df 91       	pop	r29
    1eac:	cf 91       	pop	r28
    1eae:	1f 91       	pop	r17
    1eb0:	0f 91       	pop	r16
    1eb2:	ff 90       	pop	r15
    1eb4:	08 95       	ret

00001eb6 <xQueueGenericSend>:
    1eb6:	9f 92       	push	r9
    1eb8:	af 92       	push	r10
    1eba:	bf 92       	push	r11
    1ebc:	cf 92       	push	r12
    1ebe:	df 92       	push	r13
    1ec0:	ef 92       	push	r14
    1ec2:	ff 92       	push	r15
    1ec4:	0f 93       	push	r16
    1ec6:	1f 93       	push	r17
    1ec8:	cf 93       	push	r28
    1eca:	df 93       	push	r29
    1ecc:	cd b7       	in	r28, 0x3d	; 61
    1ece:	de b7       	in	r29, 0x3e	; 62
    1ed0:	29 97       	sbiw	r28, 0x09	; 9
    1ed2:	0f b6       	in	r0, 0x3f	; 63
    1ed4:	f8 94       	cli
    1ed6:	de bf       	out	0x3e, r29	; 62
    1ed8:	0f be       	out	0x3f, r0	; 63
    1eda:	cd bf       	out	0x3d, r28	; 61
    1edc:	7c 01       	movw	r14, r24
    1ede:	5b 01       	movw	r10, r22
    1ee0:	2e 83       	std	Y+6, r18	; 0x06
    1ee2:	3f 83       	std	Y+7, r19	; 0x07
    1ee4:	48 87       	std	Y+8, r20	; 0x08
    1ee6:	59 87       	std	Y+9, r21	; 0x09
    1ee8:	10 e0       	ldi	r17, 0x00	; 0
    1eea:	99 24       	eor	r9, r9
    1eec:	93 94       	inc	r9
    1eee:	6c 01       	movw	r12, r24
    1ef0:	88 e0       	ldi	r24, 0x08	; 8
    1ef2:	c8 0e       	add	r12, r24
    1ef4:	d1 1c       	adc	r13, r1
    1ef6:	0f b6       	in	r0, 0x3f	; 63
    1ef8:	f8 94       	cli
    1efa:	0f 92       	push	r0
    1efc:	f7 01       	movw	r30, r14
    1efe:	96 8d       	ldd	r25, Z+30	; 0x1e
    1f00:	87 8d       	ldd	r24, Z+31	; 0x1f
    1f02:	98 17       	cp	r25, r24
    1f04:	10 f0       	brcs	.+4      	; 0x1f0a <xQueueGenericSend+0x54>
    1f06:	02 30       	cpi	r16, 0x02	; 2
    1f08:	b1 f4       	brne	.+44     	; 0x1f36 <xQueueGenericSend+0x80>
    1f0a:	40 2f       	mov	r20, r16
    1f0c:	b5 01       	movw	r22, r10
    1f0e:	c7 01       	movw	r24, r14
    1f10:	9b de       	rcall	.-714    	; 0x1c48 <prvCopyDataToQueue>
    1f12:	f7 01       	movw	r30, r14
    1f14:	93 89       	ldd	r25, Z+19	; 0x13
    1f16:	99 23       	and	r25, r25
    1f18:	41 f0       	breq	.+16     	; 0x1f2a <xQueueGenericSend+0x74>
    1f1a:	c7 01       	movw	r24, r14
    1f1c:	43 96       	adiw	r24, 0x13	; 19
    1f1e:	0e 94 08 19 	call	0x3210	; 0x3210 <xTaskRemoveFromEventList>
    1f22:	88 23       	and	r24, r24
    1f24:	21 f0       	breq	.+8      	; 0x1f2e <xQueueGenericSend+0x78>
    1f26:	bd dd       	rcall	.-1158   	; 0x1aa2 <vPortYield>
    1f28:	02 c0       	rjmp	.+4      	; 0x1f2e <xQueueGenericSend+0x78>
    1f2a:	81 11       	cpse	r24, r1
    1f2c:	ba dd       	rcall	.-1164   	; 0x1aa2 <vPortYield>
    1f2e:	0f 90       	pop	r0
    1f30:	0f be       	out	0x3f, r0	; 63
    1f32:	81 e0       	ldi	r24, 0x01	; 1
    1f34:	4e c0       	rjmp	.+156    	; 0x1fd2 <xQueueGenericSend+0x11c>
    1f36:	8e 81       	ldd	r24, Y+6	; 0x06
    1f38:	9f 81       	ldd	r25, Y+7	; 0x07
    1f3a:	a8 85       	ldd	r26, Y+8	; 0x08
    1f3c:	b9 85       	ldd	r27, Y+9	; 0x09
    1f3e:	89 2b       	or	r24, r25
    1f40:	8a 2b       	or	r24, r26
    1f42:	8b 2b       	or	r24, r27
    1f44:	21 f4       	brne	.+8      	; 0x1f4e <xQueueGenericSend+0x98>
    1f46:	0f 90       	pop	r0
    1f48:	0f be       	out	0x3f, r0	; 63
    1f4a:	80 e0       	ldi	r24, 0x00	; 0
    1f4c:	42 c0       	rjmp	.+132    	; 0x1fd2 <xQueueGenericSend+0x11c>
    1f4e:	11 11       	cpse	r17, r1
    1f50:	05 c0       	rjmp	.+10     	; 0x1f5c <xQueueGenericSend+0xa6>
    1f52:	ce 01       	movw	r24, r28
    1f54:	01 96       	adiw	r24, 0x01	; 1
    1f56:	0e 94 94 19 	call	0x3328	; 0x3328 <vTaskInternalSetTimeOutState>
    1f5a:	19 2d       	mov	r17, r9
    1f5c:	0f 90       	pop	r0
    1f5e:	0f be       	out	0x3f, r0	; 63
    1f60:	ff d6       	rcall	.+3582   	; 0x2d60 <vTaskSuspendAll>
    1f62:	0f b6       	in	r0, 0x3f	; 63
    1f64:	f8 94       	cli
    1f66:	0f 92       	push	r0
    1f68:	f7 01       	movw	r30, r14
    1f6a:	81 a1       	ldd	r24, Z+33	; 0x21
    1f6c:	8f 3f       	cpi	r24, 0xFF	; 255
    1f6e:	09 f4       	brne	.+2      	; 0x1f72 <xQueueGenericSend+0xbc>
    1f70:	11 a2       	std	Z+33, r1	; 0x21
    1f72:	f7 01       	movw	r30, r14
    1f74:	82 a1       	ldd	r24, Z+34	; 0x22
    1f76:	8f 3f       	cpi	r24, 0xFF	; 255
    1f78:	09 f4       	brne	.+2      	; 0x1f7c <xQueueGenericSend+0xc6>
    1f7a:	12 a2       	std	Z+34, r1	; 0x22
    1f7c:	0f 90       	pop	r0
    1f7e:	0f be       	out	0x3f, r0	; 63
    1f80:	be 01       	movw	r22, r28
    1f82:	6a 5f       	subi	r22, 0xFA	; 250
    1f84:	7f 4f       	sbci	r23, 0xFF	; 255
    1f86:	ce 01       	movw	r24, r28
    1f88:	01 96       	adiw	r24, 0x01	; 1
    1f8a:	0e 94 a5 19 	call	0x334a	; 0x334a <xTaskCheckForTimeOut>
    1f8e:	81 11       	cpse	r24, r1
    1f90:	1c c0       	rjmp	.+56     	; 0x1fca <xQueueGenericSend+0x114>
    1f92:	0f b6       	in	r0, 0x3f	; 63
    1f94:	f8 94       	cli
    1f96:	0f 92       	push	r0
    1f98:	f7 01       	movw	r30, r14
    1f9a:	96 8d       	ldd	r25, Z+30	; 0x1e
    1f9c:	87 8d       	ldd	r24, Z+31	; 0x1f
    1f9e:	0f 90       	pop	r0
    1fa0:	0f be       	out	0x3f, r0	; 63
    1fa2:	98 13       	cpse	r25, r24
    1fa4:	0e c0       	rjmp	.+28     	; 0x1fc2 <xQueueGenericSend+0x10c>
    1fa6:	4e 81       	ldd	r20, Y+6	; 0x06
    1fa8:	5f 81       	ldd	r21, Y+7	; 0x07
    1faa:	68 85       	ldd	r22, Y+8	; 0x08
    1fac:	79 85       	ldd	r23, Y+9	; 0x09
    1fae:	c6 01       	movw	r24, r12
    1fb0:	0e 94 ad 18 	call	0x315a	; 0x315a <vTaskPlaceOnEventList>
    1fb4:	c7 01       	movw	r24, r14
    1fb6:	c1 de       	rcall	.-638    	; 0x1d3a <prvUnlockQueue>
    1fb8:	bc d7       	rcall	.+3960   	; 0x2f32 <xTaskResumeAll>
    1fba:	81 11       	cpse	r24, r1
    1fbc:	9c cf       	rjmp	.-200    	; 0x1ef6 <xQueueGenericSend+0x40>
    1fbe:	71 dd       	rcall	.-1310   	; 0x1aa2 <vPortYield>
    1fc0:	9a cf       	rjmp	.-204    	; 0x1ef6 <xQueueGenericSend+0x40>
    1fc2:	c7 01       	movw	r24, r14
    1fc4:	ba de       	rcall	.-652    	; 0x1d3a <prvUnlockQueue>
    1fc6:	b5 d7       	rcall	.+3946   	; 0x2f32 <xTaskResumeAll>
    1fc8:	96 cf       	rjmp	.-212    	; 0x1ef6 <xQueueGenericSend+0x40>
    1fca:	c7 01       	movw	r24, r14
    1fcc:	b6 de       	rcall	.-660    	; 0x1d3a <prvUnlockQueue>
    1fce:	b1 d7       	rcall	.+3938   	; 0x2f32 <xTaskResumeAll>
    1fd0:	80 e0       	ldi	r24, 0x00	; 0
    1fd2:	29 96       	adiw	r28, 0x09	; 9
    1fd4:	0f b6       	in	r0, 0x3f	; 63
    1fd6:	f8 94       	cli
    1fd8:	de bf       	out	0x3e, r29	; 62
    1fda:	0f be       	out	0x3f, r0	; 63
    1fdc:	cd bf       	out	0x3d, r28	; 61
    1fde:	df 91       	pop	r29
    1fe0:	cf 91       	pop	r28
    1fe2:	1f 91       	pop	r17
    1fe4:	0f 91       	pop	r16
    1fe6:	ff 90       	pop	r15
    1fe8:	ef 90       	pop	r14
    1fea:	df 90       	pop	r13
    1fec:	cf 90       	pop	r12
    1fee:	bf 90       	pop	r11
    1ff0:	af 90       	pop	r10
    1ff2:	9f 90       	pop	r9
    1ff4:	08 95       	ret

00001ff6 <xQueueCreateMutex>:
    1ff6:	0f 93       	push	r16
    1ff8:	cf 93       	push	r28
    1ffa:	df 93       	push	r29
    1ffc:	48 2f       	mov	r20, r24
    1ffe:	60 e0       	ldi	r22, 0x00	; 0
    2000:	81 e0       	ldi	r24, 0x01	; 1
    2002:	2b df       	rcall	.-426    	; 0x1e5a <xQueueGenericCreate>
    2004:	ec 01       	movw	r28, r24
    2006:	00 97       	sbiw	r24, 0x00	; 0
    2008:	61 f0       	breq	.+24     	; 0x2022 <xQueueCreateMutex+0x2c>
    200a:	1d 82       	std	Y+5, r1	; 0x05
    200c:	1c 82       	std	Y+4, r1	; 0x04
    200e:	19 82       	std	Y+1, r1	; 0x01
    2010:	18 82       	st	Y, r1
    2012:	1e 82       	std	Y+6, r1	; 0x06
    2014:	00 e0       	ldi	r16, 0x00	; 0
    2016:	20 e0       	ldi	r18, 0x00	; 0
    2018:	30 e0       	ldi	r19, 0x00	; 0
    201a:	a9 01       	movw	r20, r18
    201c:	60 e0       	ldi	r22, 0x00	; 0
    201e:	70 e0       	ldi	r23, 0x00	; 0
    2020:	4a df       	rcall	.-364    	; 0x1eb6 <xQueueGenericSend>
    2022:	ce 01       	movw	r24, r28
    2024:	df 91       	pop	r29
    2026:	cf 91       	pop	r28
    2028:	0f 91       	pop	r16
    202a:	08 95       	ret

0000202c <xQueueGenericSendFromISR>:
    202c:	ef 92       	push	r14
    202e:	ff 92       	push	r15
    2030:	0f 93       	push	r16
    2032:	1f 93       	push	r17
    2034:	cf 93       	push	r28
    2036:	df 93       	push	r29
    2038:	8a 01       	movw	r16, r20
    203a:	fc 01       	movw	r30, r24
    203c:	56 8d       	ldd	r21, Z+30	; 0x1e
    203e:	37 8d       	ldd	r19, Z+31	; 0x1f
    2040:	53 17       	cp	r21, r19
    2042:	10 f0       	brcs	.+4      	; 0x2048 <xQueueGenericSendFromISR+0x1c>
    2044:	22 30       	cpi	r18, 0x02	; 2
    2046:	e9 f4       	brne	.+58     	; 0x2082 <xQueueGenericSendFromISR+0x56>
    2048:	42 2f       	mov	r20, r18
    204a:	78 01       	movw	r14, r16
    204c:	ec 01       	movw	r28, r24
    204e:	1a a1       	ldd	r17, Y+34	; 0x22
    2050:	fb dd       	rcall	.-1034   	; 0x1c48 <prvCopyDataToQueue>
    2052:	1f 3f       	cpi	r17, 0xFF	; 255
    2054:	81 f4       	brne	.+32     	; 0x2076 <xQueueGenericSendFromISR+0x4a>
    2056:	8b 89       	ldd	r24, Y+19	; 0x13
    2058:	88 23       	and	r24, r24
    205a:	a9 f0       	breq	.+42     	; 0x2086 <xQueueGenericSendFromISR+0x5a>
    205c:	ce 01       	movw	r24, r28
    205e:	43 96       	adiw	r24, 0x13	; 19
    2060:	0e 94 08 19 	call	0x3210	; 0x3210 <xTaskRemoveFromEventList>
    2064:	88 23       	and	r24, r24
    2066:	89 f0       	breq	.+34     	; 0x208a <xQueueGenericSendFromISR+0x5e>
    2068:	e1 14       	cp	r14, r1
    206a:	f1 04       	cpc	r15, r1
    206c:	81 f0       	breq	.+32     	; 0x208e <xQueueGenericSendFromISR+0x62>
    206e:	81 e0       	ldi	r24, 0x01	; 1
    2070:	f7 01       	movw	r30, r14
    2072:	80 83       	st	Z, r24
    2074:	0d c0       	rjmp	.+26     	; 0x2090 <xQueueGenericSendFromISR+0x64>
    2076:	ff 24       	eor	r15, r15
    2078:	f3 94       	inc	r15
    207a:	f1 0e       	add	r15, r17
    207c:	fa a2       	std	Y+34, r15	; 0x22
    207e:	81 e0       	ldi	r24, 0x01	; 1
    2080:	07 c0       	rjmp	.+14     	; 0x2090 <xQueueGenericSendFromISR+0x64>
    2082:	80 e0       	ldi	r24, 0x00	; 0
    2084:	05 c0       	rjmp	.+10     	; 0x2090 <xQueueGenericSendFromISR+0x64>
    2086:	81 e0       	ldi	r24, 0x01	; 1
    2088:	03 c0       	rjmp	.+6      	; 0x2090 <xQueueGenericSendFromISR+0x64>
    208a:	81 e0       	ldi	r24, 0x01	; 1
    208c:	01 c0       	rjmp	.+2      	; 0x2090 <xQueueGenericSendFromISR+0x64>
    208e:	81 e0       	ldi	r24, 0x01	; 1
    2090:	df 91       	pop	r29
    2092:	cf 91       	pop	r28
    2094:	1f 91       	pop	r17
    2096:	0f 91       	pop	r16
    2098:	ff 90       	pop	r15
    209a:	ef 90       	pop	r14
    209c:	08 95       	ret

0000209e <xQueueReceive>:
    209e:	9f 92       	push	r9
    20a0:	af 92       	push	r10
    20a2:	bf 92       	push	r11
    20a4:	cf 92       	push	r12
    20a6:	df 92       	push	r13
    20a8:	ef 92       	push	r14
    20aa:	ff 92       	push	r15
    20ac:	0f 93       	push	r16
    20ae:	1f 93       	push	r17
    20b0:	cf 93       	push	r28
    20b2:	df 93       	push	r29
    20b4:	cd b7       	in	r28, 0x3d	; 61
    20b6:	de b7       	in	r29, 0x3e	; 62
    20b8:	29 97       	sbiw	r28, 0x09	; 9
    20ba:	0f b6       	in	r0, 0x3f	; 63
    20bc:	f8 94       	cli
    20be:	de bf       	out	0x3e, r29	; 62
    20c0:	0f be       	out	0x3f, r0	; 63
    20c2:	cd bf       	out	0x3d, r28	; 61
    20c4:	8c 01       	movw	r16, r24
    20c6:	5b 01       	movw	r10, r22
    20c8:	2e 83       	std	Y+6, r18	; 0x06
    20ca:	3f 83       	std	Y+7, r19	; 0x07
    20cc:	48 87       	std	Y+8, r20	; 0x08
    20ce:	59 87       	std	Y+9, r21	; 0x09
    20d0:	e1 2c       	mov	r14, r1
    20d2:	99 24       	eor	r9, r9
    20d4:	93 94       	inc	r9
    20d6:	6c 01       	movw	r12, r24
    20d8:	83 e1       	ldi	r24, 0x13	; 19
    20da:	c8 0e       	add	r12, r24
    20dc:	d1 1c       	adc	r13, r1
    20de:	0f b6       	in	r0, 0x3f	; 63
    20e0:	f8 94       	cli
    20e2:	0f 92       	push	r0
    20e4:	f8 01       	movw	r30, r16
    20e6:	f6 8c       	ldd	r15, Z+30	; 0x1e
    20e8:	ff 20       	and	r15, r15
    20ea:	99 f0       	breq	.+38     	; 0x2112 <xQueueReceive+0x74>
    20ec:	b5 01       	movw	r22, r10
    20ee:	c8 01       	movw	r24, r16
    20f0:	0a de       	rcall	.-1004   	; 0x1d06 <prvCopyDataFromQueue>
    20f2:	fa 94       	dec	r15
    20f4:	f8 01       	movw	r30, r16
    20f6:	f6 8e       	std	Z+30, r15	; 0x1e
    20f8:	80 85       	ldd	r24, Z+8	; 0x08
    20fa:	88 23       	and	r24, r24
    20fc:	31 f0       	breq	.+12     	; 0x210a <xQueueReceive+0x6c>
    20fe:	c8 01       	movw	r24, r16
    2100:	08 96       	adiw	r24, 0x08	; 8
    2102:	0e 94 08 19 	call	0x3210	; 0x3210 <xTaskRemoveFromEventList>
    2106:	81 11       	cpse	r24, r1
    2108:	cc dc       	rcall	.-1640   	; 0x1aa2 <vPortYield>
    210a:	0f 90       	pop	r0
    210c:	0f be       	out	0x3f, r0	; 63
    210e:	81 e0       	ldi	r24, 0x01	; 1
    2110:	4c c0       	rjmp	.+152    	; 0x21aa <xQueueReceive+0x10c>
    2112:	8e 81       	ldd	r24, Y+6	; 0x06
    2114:	9f 81       	ldd	r25, Y+7	; 0x07
    2116:	a8 85       	ldd	r26, Y+8	; 0x08
    2118:	b9 85       	ldd	r27, Y+9	; 0x09
    211a:	89 2b       	or	r24, r25
    211c:	8a 2b       	or	r24, r26
    211e:	8b 2b       	or	r24, r27
    2120:	21 f4       	brne	.+8      	; 0x212a <xQueueReceive+0x8c>
    2122:	0f 90       	pop	r0
    2124:	0f be       	out	0x3f, r0	; 63
    2126:	80 e0       	ldi	r24, 0x00	; 0
    2128:	40 c0       	rjmp	.+128    	; 0x21aa <xQueueReceive+0x10c>
    212a:	e1 10       	cpse	r14, r1
    212c:	05 c0       	rjmp	.+10     	; 0x2138 <xQueueReceive+0x9a>
    212e:	ce 01       	movw	r24, r28
    2130:	01 96       	adiw	r24, 0x01	; 1
    2132:	0e 94 94 19 	call	0x3328	; 0x3328 <vTaskInternalSetTimeOutState>
    2136:	e9 2c       	mov	r14, r9
    2138:	0f 90       	pop	r0
    213a:	0f be       	out	0x3f, r0	; 63
    213c:	11 d6       	rcall	.+3106   	; 0x2d60 <vTaskSuspendAll>
    213e:	0f b6       	in	r0, 0x3f	; 63
    2140:	f8 94       	cli
    2142:	0f 92       	push	r0
    2144:	f8 01       	movw	r30, r16
    2146:	81 a1       	ldd	r24, Z+33	; 0x21
    2148:	8f 3f       	cpi	r24, 0xFF	; 255
    214a:	09 f4       	brne	.+2      	; 0x214e <xQueueReceive+0xb0>
    214c:	11 a2       	std	Z+33, r1	; 0x21
    214e:	f8 01       	movw	r30, r16
    2150:	82 a1       	ldd	r24, Z+34	; 0x22
    2152:	8f 3f       	cpi	r24, 0xFF	; 255
    2154:	09 f4       	brne	.+2      	; 0x2158 <xQueueReceive+0xba>
    2156:	12 a2       	std	Z+34, r1	; 0x22
    2158:	0f 90       	pop	r0
    215a:	0f be       	out	0x3f, r0	; 63
    215c:	be 01       	movw	r22, r28
    215e:	6a 5f       	subi	r22, 0xFA	; 250
    2160:	7f 4f       	sbci	r23, 0xFF	; 255
    2162:	ce 01       	movw	r24, r28
    2164:	01 96       	adiw	r24, 0x01	; 1
    2166:	0e 94 a5 19 	call	0x334a	; 0x334a <xTaskCheckForTimeOut>
    216a:	81 11       	cpse	r24, r1
    216c:	15 c0       	rjmp	.+42     	; 0x2198 <xQueueReceive+0xfa>
    216e:	c8 01       	movw	r24, r16
    2170:	60 dd       	rcall	.-1344   	; 0x1c32 <prvIsQueueEmpty>
    2172:	88 23       	and	r24, r24
    2174:	69 f0       	breq	.+26     	; 0x2190 <xQueueReceive+0xf2>
    2176:	4e 81       	ldd	r20, Y+6	; 0x06
    2178:	5f 81       	ldd	r21, Y+7	; 0x07
    217a:	68 85       	ldd	r22, Y+8	; 0x08
    217c:	79 85       	ldd	r23, Y+9	; 0x09
    217e:	c6 01       	movw	r24, r12
    2180:	ec d7       	rcall	.+4056   	; 0x315a <vTaskPlaceOnEventList>
    2182:	c8 01       	movw	r24, r16
    2184:	da dd       	rcall	.-1100   	; 0x1d3a <prvUnlockQueue>
    2186:	d5 d6       	rcall	.+3498   	; 0x2f32 <xTaskResumeAll>
    2188:	81 11       	cpse	r24, r1
    218a:	a9 cf       	rjmp	.-174    	; 0x20de <xQueueReceive+0x40>
    218c:	8a dc       	rcall	.-1772   	; 0x1aa2 <vPortYield>
    218e:	a7 cf       	rjmp	.-178    	; 0x20de <xQueueReceive+0x40>
    2190:	c8 01       	movw	r24, r16
    2192:	d3 dd       	rcall	.-1114   	; 0x1d3a <prvUnlockQueue>
    2194:	ce d6       	rcall	.+3484   	; 0x2f32 <xTaskResumeAll>
    2196:	a3 cf       	rjmp	.-186    	; 0x20de <xQueueReceive+0x40>
    2198:	c8 01       	movw	r24, r16
    219a:	cf dd       	rcall	.-1122   	; 0x1d3a <prvUnlockQueue>
    219c:	ca d6       	rcall	.+3476   	; 0x2f32 <xTaskResumeAll>
    219e:	c8 01       	movw	r24, r16
    21a0:	48 dd       	rcall	.-1392   	; 0x1c32 <prvIsQueueEmpty>
    21a2:	88 23       	and	r24, r24
    21a4:	09 f4       	brne	.+2      	; 0x21a8 <xQueueReceive+0x10a>
    21a6:	9b cf       	rjmp	.-202    	; 0x20de <xQueueReceive+0x40>
    21a8:	80 e0       	ldi	r24, 0x00	; 0
    21aa:	29 96       	adiw	r28, 0x09	; 9
    21ac:	0f b6       	in	r0, 0x3f	; 63
    21ae:	f8 94       	cli
    21b0:	de bf       	out	0x3e, r29	; 62
    21b2:	0f be       	out	0x3f, r0	; 63
    21b4:	cd bf       	out	0x3d, r28	; 61
    21b6:	df 91       	pop	r29
    21b8:	cf 91       	pop	r28
    21ba:	1f 91       	pop	r17
    21bc:	0f 91       	pop	r16
    21be:	ff 90       	pop	r15
    21c0:	ef 90       	pop	r14
    21c2:	df 90       	pop	r13
    21c4:	cf 90       	pop	r12
    21c6:	bf 90       	pop	r11
    21c8:	af 90       	pop	r10
    21ca:	9f 90       	pop	r9
    21cc:	08 95       	ret

000021ce <xQueueSemaphoreTake>:
    21ce:	bf 92       	push	r11
    21d0:	cf 92       	push	r12
    21d2:	df 92       	push	r13
    21d4:	ef 92       	push	r14
    21d6:	ff 92       	push	r15
    21d8:	0f 93       	push	r16
    21da:	1f 93       	push	r17
    21dc:	cf 93       	push	r28
    21de:	df 93       	push	r29
    21e0:	cd b7       	in	r28, 0x3d	; 61
    21e2:	de b7       	in	r29, 0x3e	; 62
    21e4:	29 97       	sbiw	r28, 0x09	; 9
    21e6:	0f b6       	in	r0, 0x3f	; 63
    21e8:	f8 94       	cli
    21ea:	de bf       	out	0x3e, r29	; 62
    21ec:	0f be       	out	0x3f, r0	; 63
    21ee:	cd bf       	out	0x3d, r28	; 61
    21f0:	8c 01       	movw	r16, r24
    21f2:	4e 83       	std	Y+6, r20	; 0x06
    21f4:	5f 83       	std	Y+7, r21	; 0x07
    21f6:	68 87       	std	Y+8, r22	; 0x08
    21f8:	79 87       	std	Y+9, r23	; 0x09
    21fa:	b1 2c       	mov	r11, r1
    21fc:	d1 2c       	mov	r13, r1
    21fe:	cc 24       	eor	r12, r12
    2200:	c3 94       	inc	r12
    2202:	7c 01       	movw	r14, r24
    2204:	83 e1       	ldi	r24, 0x13	; 19
    2206:	e8 0e       	add	r14, r24
    2208:	f1 1c       	adc	r15, r1
    220a:	0f b6       	in	r0, 0x3f	; 63
    220c:	f8 94       	cli
    220e:	0f 92       	push	r0
    2210:	d8 01       	movw	r26, r16
    2212:	5e 96       	adiw	r26, 0x1e	; 30
    2214:	8c 91       	ld	r24, X
    2216:	5e 97       	sbiw	r26, 0x1e	; 30
    2218:	88 23       	and	r24, r24
    221a:	d9 f0       	breq	.+54     	; 0x2252 <__stack+0x53>
    221c:	81 50       	subi	r24, 0x01	; 1
    221e:	5e 96       	adiw	r26, 0x1e	; 30
    2220:	8c 93       	st	X, r24
    2222:	5e 97       	sbiw	r26, 0x1e	; 30
    2224:	8d 91       	ld	r24, X+
    2226:	9c 91       	ld	r25, X
    2228:	89 2b       	or	r24, r25
    222a:	29 f4       	brne	.+10     	; 0x2236 <__stack+0x37>
    222c:	0e 94 35 1b 	call	0x366a	; 0x366a <pvTaskIncrementMutexHeldCount>
    2230:	f8 01       	movw	r30, r16
    2232:	95 83       	std	Z+5, r25	; 0x05
    2234:	84 83       	std	Z+4, r24	; 0x04
    2236:	d8 01       	movw	r26, r16
    2238:	18 96       	adiw	r26, 0x08	; 8
    223a:	8c 91       	ld	r24, X
    223c:	88 23       	and	r24, r24
    223e:	29 f0       	breq	.+10     	; 0x224a <__stack+0x4b>
    2240:	c8 01       	movw	r24, r16
    2242:	08 96       	adiw	r24, 0x08	; 8
    2244:	e5 d7       	rcall	.+4042   	; 0x3210 <xTaskRemoveFromEventList>
    2246:	81 11       	cpse	r24, r1
    2248:	2c dc       	rcall	.-1960   	; 0x1aa2 <vPortYield>
    224a:	0f 90       	pop	r0
    224c:	0f be       	out	0x3f, r0	; 63
    224e:	81 e0       	ldi	r24, 0x01	; 1
    2250:	7a c0       	rjmp	.+244    	; 0x2346 <__stack+0x147>
    2252:	8e 81       	ldd	r24, Y+6	; 0x06
    2254:	9f 81       	ldd	r25, Y+7	; 0x07
    2256:	a8 85       	ldd	r26, Y+8	; 0x08
    2258:	b9 85       	ldd	r27, Y+9	; 0x09
    225a:	89 2b       	or	r24, r25
    225c:	8a 2b       	or	r24, r26
    225e:	8b 2b       	or	r24, r27
    2260:	21 f4       	brne	.+8      	; 0x226a <__stack+0x6b>
    2262:	0f 90       	pop	r0
    2264:	0f be       	out	0x3f, r0	; 63
    2266:	80 e0       	ldi	r24, 0x00	; 0
    2268:	6e c0       	rjmp	.+220    	; 0x2346 <__stack+0x147>
    226a:	d1 10       	cpse	r13, r1
    226c:	05 c0       	rjmp	.+10     	; 0x2278 <__stack+0x79>
    226e:	ce 01       	movw	r24, r28
    2270:	01 96       	adiw	r24, 0x01	; 1
    2272:	0e 94 94 19 	call	0x3328	; 0x3328 <vTaskInternalSetTimeOutState>
    2276:	dc 2c       	mov	r13, r12
    2278:	0f 90       	pop	r0
    227a:	0f be       	out	0x3f, r0	; 63
    227c:	71 d5       	rcall	.+2786   	; 0x2d60 <vTaskSuspendAll>
    227e:	0f b6       	in	r0, 0x3f	; 63
    2280:	f8 94       	cli
    2282:	0f 92       	push	r0
    2284:	f8 01       	movw	r30, r16
    2286:	81 a1       	ldd	r24, Z+33	; 0x21
    2288:	8f 3f       	cpi	r24, 0xFF	; 255
    228a:	09 f4       	brne	.+2      	; 0x228e <__stack+0x8f>
    228c:	11 a2       	std	Z+33, r1	; 0x21
    228e:	d8 01       	movw	r26, r16
    2290:	92 96       	adiw	r26, 0x22	; 34
    2292:	8c 91       	ld	r24, X
    2294:	92 97       	sbiw	r26, 0x22	; 34
    2296:	8f 3f       	cpi	r24, 0xFF	; 255
    2298:	11 f4       	brne	.+4      	; 0x229e <__stack+0x9f>
    229a:	92 96       	adiw	r26, 0x22	; 34
    229c:	1c 92       	st	X, r1
    229e:	0f 90       	pop	r0
    22a0:	0f be       	out	0x3f, r0	; 63
    22a2:	be 01       	movw	r22, r28
    22a4:	6a 5f       	subi	r22, 0xFA	; 250
    22a6:	7f 4f       	sbci	r23, 0xFF	; 255
    22a8:	ce 01       	movw	r24, r28
    22aa:	01 96       	adiw	r24, 0x01	; 1
    22ac:	0e 94 a5 19 	call	0x334a	; 0x334a <xTaskCheckForTimeOut>
    22b0:	81 11       	cpse	r24, r1
    22b2:	24 c0       	rjmp	.+72     	; 0x22fc <__stack+0xfd>
    22b4:	c8 01       	movw	r24, r16
    22b6:	bd dc       	rcall	.-1670   	; 0x1c32 <prvIsQueueEmpty>
    22b8:	88 23       	and	r24, r24
    22ba:	e1 f0       	breq	.+56     	; 0x22f4 <__stack+0xf5>
    22bc:	f8 01       	movw	r30, r16
    22be:	80 81       	ld	r24, Z
    22c0:	91 81       	ldd	r25, Z+1	; 0x01
    22c2:	89 2b       	or	r24, r25
    22c4:	51 f4       	brne	.+20     	; 0x22da <__stack+0xdb>
    22c6:	0f b6       	in	r0, 0x3f	; 63
    22c8:	f8 94       	cli
    22ca:	0f 92       	push	r0
    22cc:	84 81       	ldd	r24, Z+4	; 0x04
    22ce:	95 81       	ldd	r25, Z+5	; 0x05
    22d0:	0e 94 11 1a 	call	0x3422	; 0x3422 <xTaskPriorityInherit>
    22d4:	b8 2e       	mov	r11, r24
    22d6:	0f 90       	pop	r0
    22d8:	0f be       	out	0x3f, r0	; 63
    22da:	4e 81       	ldd	r20, Y+6	; 0x06
    22dc:	5f 81       	ldd	r21, Y+7	; 0x07
    22de:	68 85       	ldd	r22, Y+8	; 0x08
    22e0:	79 85       	ldd	r23, Y+9	; 0x09
    22e2:	c7 01       	movw	r24, r14
    22e4:	3a d7       	rcall	.+3700   	; 0x315a <vTaskPlaceOnEventList>
    22e6:	c8 01       	movw	r24, r16
    22e8:	28 dd       	rcall	.-1456   	; 0x1d3a <prvUnlockQueue>
    22ea:	23 d6       	rcall	.+3142   	; 0x2f32 <xTaskResumeAll>
    22ec:	81 11       	cpse	r24, r1
    22ee:	8d cf       	rjmp	.-230    	; 0x220a <__stack+0xb>
    22f0:	d8 db       	rcall	.-2128   	; 0x1aa2 <vPortYield>
    22f2:	8b cf       	rjmp	.-234    	; 0x220a <__stack+0xb>
    22f4:	c8 01       	movw	r24, r16
    22f6:	21 dd       	rcall	.-1470   	; 0x1d3a <prvUnlockQueue>
    22f8:	1c d6       	rcall	.+3128   	; 0x2f32 <xTaskResumeAll>
    22fa:	87 cf       	rjmp	.-242    	; 0x220a <__stack+0xb>
    22fc:	c8 01       	movw	r24, r16
    22fe:	1d dd       	rcall	.-1478   	; 0x1d3a <prvUnlockQueue>
    2300:	18 d6       	rcall	.+3120   	; 0x2f32 <xTaskResumeAll>
    2302:	c8 01       	movw	r24, r16
    2304:	96 dc       	rcall	.-1748   	; 0x1c32 <prvIsQueueEmpty>
    2306:	88 23       	and	r24, r24
    2308:	09 f4       	brne	.+2      	; 0x230c <__stack+0x10d>
    230a:	7f cf       	rjmp	.-258    	; 0x220a <__stack+0xb>
    230c:	bb 20       	and	r11, r11
    230e:	d1 f0       	breq	.+52     	; 0x2344 <__stack+0x145>
    2310:	0f b6       	in	r0, 0x3f	; 63
    2312:	f8 94       	cli
    2314:	0f 92       	push	r0
    2316:	f8 01       	movw	r30, r16
    2318:	83 89       	ldd	r24, Z+19	; 0x13
    231a:	88 23       	and	r24, r24
    231c:	39 f0       	breq	.+14     	; 0x232c <__stack+0x12d>
    231e:	02 8c       	ldd	r0, Z+26	; 0x1a
    2320:	f3 8d       	ldd	r31, Z+27	; 0x1b
    2322:	e0 2d       	mov	r30, r0
    2324:	80 81       	ld	r24, Z
    2326:	66 e0       	ldi	r22, 0x06	; 6
    2328:	68 1b       	sub	r22, r24
    232a:	01 c0       	rjmp	.+2      	; 0x232e <__stack+0x12f>
    232c:	60 e0       	ldi	r22, 0x00	; 0
    232e:	d8 01       	movw	r26, r16
    2330:	14 96       	adiw	r26, 0x04	; 4
    2332:	8d 91       	ld	r24, X+
    2334:	9c 91       	ld	r25, X
    2336:	15 97       	sbiw	r26, 0x05	; 5
    2338:	0e 94 bf 1a 	call	0x357e	; 0x357e <vTaskPriorityDisinheritAfterTimeout>
    233c:	0f 90       	pop	r0
    233e:	0f be       	out	0x3f, r0	; 63
    2340:	80 e0       	ldi	r24, 0x00	; 0
    2342:	01 c0       	rjmp	.+2      	; 0x2346 <__stack+0x147>
    2344:	80 e0       	ldi	r24, 0x00	; 0
    2346:	29 96       	adiw	r28, 0x09	; 9
    2348:	0f b6       	in	r0, 0x3f	; 63
    234a:	f8 94       	cli
    234c:	de bf       	out	0x3e, r29	; 62
    234e:	0f be       	out	0x3f, r0	; 63
    2350:	cd bf       	out	0x3d, r28	; 61
    2352:	df 91       	pop	r29
    2354:	cf 91       	pop	r28
    2356:	1f 91       	pop	r17
    2358:	0f 91       	pop	r16
    235a:	ff 90       	pop	r15
    235c:	ef 90       	pop	r14
    235e:	df 90       	pop	r13
    2360:	cf 90       	pop	r12
    2362:	bf 90       	pop	r11
    2364:	08 95       	ret

00002366 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
    {
    2366:	cf 93       	push	r28
    2368:	df 93       	push	r29
    236a:	ec 01       	movw	r28, r24
        will not actually cause the task to block, just place it on a blocked
        list.  It will not block until the scheduler is unlocked - at which
        time a yield will be performed.  If an item is added to the queue while
        the queue is locked, and the calling task blocks on the queue, then the
        calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    236c:	0f b6       	in	r0, 0x3f	; 63
    236e:	f8 94       	cli
    2370:	0f 92       	push	r0
    2372:	89 a1       	ldd	r24, Y+33	; 0x21
    2374:	8f 3f       	cpi	r24, 0xFF	; 255
    2376:	09 f4       	brne	.+2      	; 0x237a <vQueueWaitForMessageRestricted+0x14>
    2378:	19 a2       	std	Y+33, r1	; 0x21
    237a:	8a a1       	ldd	r24, Y+34	; 0x22
    237c:	8f 3f       	cpi	r24, 0xFF	; 255
    237e:	09 f4       	brne	.+2      	; 0x2382 <vQueueWaitForMessageRestricted+0x1c>
    2380:	1a a2       	std	Y+34, r1	; 0x22
    2382:	0f 90       	pop	r0
    2384:	0f be       	out	0x3f, r0	; 63
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    2386:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2388:	81 11       	cpse	r24, r1
    238a:	03 c0       	rjmp	.+6      	; 0x2392 <vQueueWaitForMessageRestricted+0x2c>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    238c:	ce 01       	movw	r24, r28
    238e:	43 96       	adiw	r24, 0x13	; 19
    2390:	1f d7       	rcall	.+3646   	; 0x31d0 <vTaskPlaceOnEventListRestricted>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
        prvUnlockQueue( pxQueue );
    2392:	ce 01       	movw	r24, r28
    2394:	d2 dc       	rcall	.-1628   	; 0x1d3a <prvUnlockQueue>
    }
    2396:	df 91       	pop	r29
    2398:	cf 91       	pop	r28
    239a:	08 95       	ret

0000239c <prvBytesInBuffer>:

    configASSERT( pxStreamBuffer );

    xReturn = prvBytesInBuffer( pxStreamBuffer );
    return xReturn;
}
    239c:	fc 01       	movw	r30, r24
    239e:	44 81       	ldd	r20, Z+4	; 0x04
    23a0:	55 81       	ldd	r21, Z+5	; 0x05
    23a2:	22 81       	ldd	r18, Z+2	; 0x02
    23a4:	33 81       	ldd	r19, Z+3	; 0x03
    23a6:	24 0f       	add	r18, r20
    23a8:	35 1f       	adc	r19, r21
    23aa:	80 81       	ld	r24, Z
    23ac:	91 81       	ldd	r25, Z+1	; 0x01
    23ae:	b9 01       	movw	r22, r18
    23b0:	68 1b       	sub	r22, r24
    23b2:	79 0b       	sbc	r23, r25
    23b4:	cb 01       	movw	r24, r22
    23b6:	64 17       	cp	r22, r20
    23b8:	75 07       	cpc	r23, r21
    23ba:	10 f0       	brcs	.+4      	; 0x23c0 <prvBytesInBuffer+0x24>
    23bc:	84 1b       	sub	r24, r20
    23be:	95 0b       	sbc	r25, r21
    23c0:	08 95       	ret

000023c2 <prvWriteBytesToBuffer>:
    23c2:	af 92       	push	r10
    23c4:	bf 92       	push	r11
    23c6:	cf 92       	push	r12
    23c8:	df 92       	push	r13
    23ca:	ef 92       	push	r14
    23cc:	ff 92       	push	r15
    23ce:	0f 93       	push	r16
    23d0:	1f 93       	push	r17
    23d2:	cf 93       	push	r28
    23d4:	df 93       	push	r29
    23d6:	6c 01       	movw	r12, r24
    23d8:	5b 01       	movw	r10, r22
    23da:	7a 01       	movw	r14, r20
    23dc:	fc 01       	movw	r30, r24
    23de:	c2 81       	ldd	r28, Z+2	; 0x02
    23e0:	d3 81       	ldd	r29, Z+3	; 0x03
    23e2:	04 81       	ldd	r16, Z+4	; 0x04
    23e4:	15 81       	ldd	r17, Z+5	; 0x05
    23e6:	0c 1b       	sub	r16, r28
    23e8:	1d 0b       	sbc	r17, r29
    23ea:	40 17       	cp	r20, r16
    23ec:	51 07       	cpc	r21, r17
    23ee:	08 f4       	brcc	.+2      	; 0x23f2 <prvWriteBytesToBuffer+0x30>
    23f0:	8a 01       	movw	r16, r20
    23f2:	f6 01       	movw	r30, r12
    23f4:	84 85       	ldd	r24, Z+12	; 0x0c
    23f6:	95 85       	ldd	r25, Z+13	; 0x0d
    23f8:	a8 01       	movw	r20, r16
    23fa:	b5 01       	movw	r22, r10
    23fc:	8c 0f       	add	r24, r28
    23fe:	9d 1f       	adc	r25, r29
    2400:	0e 94 0e 31 	call	0x621c	; 0x621c <memcpy>
    2404:	0e 15       	cp	r16, r14
    2406:	1f 05       	cpc	r17, r15
    2408:	58 f4       	brcc	.+22     	; 0x2420 <prvWriteBytesToBuffer+0x5e>
    240a:	a7 01       	movw	r20, r14
    240c:	40 1b       	sub	r20, r16
    240e:	51 0b       	sbc	r21, r17
    2410:	b5 01       	movw	r22, r10
    2412:	60 0f       	add	r22, r16
    2414:	71 1f       	adc	r23, r17
    2416:	f6 01       	movw	r30, r12
    2418:	84 85       	ldd	r24, Z+12	; 0x0c
    241a:	95 85       	ldd	r25, Z+13	; 0x0d
    241c:	0e 94 0e 31 	call	0x621c	; 0x621c <memcpy>
    2420:	ce 01       	movw	r24, r28
    2422:	8e 0d       	add	r24, r14
    2424:	9f 1d       	adc	r25, r15
    2426:	f6 01       	movw	r30, r12
    2428:	24 81       	ldd	r18, Z+4	; 0x04
    242a:	35 81       	ldd	r19, Z+5	; 0x05
    242c:	82 17       	cp	r24, r18
    242e:	93 07       	cpc	r25, r19
    2430:	10 f0       	brcs	.+4      	; 0x2436 <prvWriteBytesToBuffer+0x74>
    2432:	82 1b       	sub	r24, r18
    2434:	93 0b       	sbc	r25, r19
    2436:	f6 01       	movw	r30, r12
    2438:	93 83       	std	Z+3, r25	; 0x03
    243a:	82 83       	std	Z+2, r24	; 0x02
    243c:	c7 01       	movw	r24, r14
    243e:	df 91       	pop	r29
    2440:	cf 91       	pop	r28
    2442:	1f 91       	pop	r17
    2444:	0f 91       	pop	r16
    2446:	ff 90       	pop	r15
    2448:	ef 90       	pop	r14
    244a:	df 90       	pop	r13
    244c:	cf 90       	pop	r12
    244e:	bf 90       	pop	r11
    2450:	af 90       	pop	r10
    2452:	08 95       	ret

00002454 <prvWriteMessageToBuffer>:
    2454:	cf 92       	push	r12
    2456:	df 92       	push	r13
    2458:	ef 92       	push	r14
    245a:	ff 92       	push	r15
    245c:	0f 93       	push	r16
    245e:	1f 93       	push	r17
    2460:	cf 93       	push	r28
    2462:	df 93       	push	r29
    2464:	1f 92       	push	r1
    2466:	1f 92       	push	r1
    2468:	cd b7       	in	r28, 0x3d	; 61
    246a:	de b7       	in	r29, 0x3e	; 62
    246c:	5a 83       	std	Y+2, r21	; 0x02
    246e:	49 83       	std	Y+1, r20	; 0x01
    2470:	21 15       	cp	r18, r1
    2472:	31 05       	cpc	r19, r1
    2474:	c9 f0       	breq	.+50     	; 0x24a8 <prvWriteMessageToBuffer+0x54>
    2476:	6b 01       	movw	r12, r22
    2478:	7c 01       	movw	r14, r24
    247a:	fc 01       	movw	r30, r24
    247c:	86 85       	ldd	r24, Z+14	; 0x0e
    247e:	80 fd       	sbrc	r24, 0
    2480:	08 c0       	rjmp	.+16     	; 0x2492 <prvWriteMessageToBuffer+0x3e>
    2482:	ca 01       	movw	r24, r20
    2484:	24 17       	cp	r18, r20
    2486:	35 07       	cpc	r19, r21
    2488:	08 f4       	brcc	.+2      	; 0x248c <prvWriteMessageToBuffer+0x38>
    248a:	c9 01       	movw	r24, r18
    248c:	9a 83       	std	Y+2, r25	; 0x02
    248e:	89 83       	std	Y+1, r24	; 0x01
    2490:	11 c0       	rjmp	.+34     	; 0x24b4 <prvWriteMessageToBuffer+0x60>
    2492:	20 17       	cp	r18, r16
    2494:	31 07       	cpc	r19, r17
    2496:	58 f0       	brcs	.+22     	; 0x24ae <prvWriteMessageToBuffer+0x5a>
    2498:	42 e0       	ldi	r20, 0x02	; 2
    249a:	50 e0       	ldi	r21, 0x00	; 0
    249c:	be 01       	movw	r22, r28
    249e:	6f 5f       	subi	r22, 0xFF	; 255
    24a0:	7f 4f       	sbci	r23, 0xFF	; 255
    24a2:	c7 01       	movw	r24, r14
    24a4:	8e df       	rcall	.-228    	; 0x23c2 <prvWriteBytesToBuffer>
    24a6:	06 c0       	rjmp	.+12     	; 0x24b4 <prvWriteMessageToBuffer+0x60>
    24a8:	80 e0       	ldi	r24, 0x00	; 0
    24aa:	90 e0       	ldi	r25, 0x00	; 0
    24ac:	08 c0       	rjmp	.+16     	; 0x24be <prvWriteMessageToBuffer+0x6a>
    24ae:	80 e0       	ldi	r24, 0x00	; 0
    24b0:	90 e0       	ldi	r25, 0x00	; 0
    24b2:	05 c0       	rjmp	.+10     	; 0x24be <prvWriteMessageToBuffer+0x6a>
    24b4:	49 81       	ldd	r20, Y+1	; 0x01
    24b6:	5a 81       	ldd	r21, Y+2	; 0x02
    24b8:	b6 01       	movw	r22, r12
    24ba:	c7 01       	movw	r24, r14
    24bc:	82 df       	rcall	.-252    	; 0x23c2 <prvWriteBytesToBuffer>
    24be:	0f 90       	pop	r0
    24c0:	0f 90       	pop	r0
    24c2:	df 91       	pop	r29
    24c4:	cf 91       	pop	r28
    24c6:	1f 91       	pop	r17
    24c8:	0f 91       	pop	r16
    24ca:	ff 90       	pop	r15
    24cc:	ef 90       	pop	r14
    24ce:	df 90       	pop	r13
    24d0:	cf 90       	pop	r12
    24d2:	08 95       	ret

000024d4 <prvReadBytesFromBuffer>:
    24d4:	af 92       	push	r10
    24d6:	bf 92       	push	r11
    24d8:	cf 92       	push	r12
    24da:	df 92       	push	r13
    24dc:	ef 92       	push	r14
    24de:	ff 92       	push	r15
    24e0:	0f 93       	push	r16
    24e2:	1f 93       	push	r17
    24e4:	cf 93       	push	r28
    24e6:	df 93       	push	r29
    24e8:	7c 01       	movw	r14, r24
    24ea:	5b 01       	movw	r10, r22
    24ec:	e9 01       	movw	r28, r18
    24ee:	42 17       	cp	r20, r18
    24f0:	53 07       	cpc	r21, r19
    24f2:	08 f4       	brcc	.+2      	; 0x24f6 <prvReadBytesFromBuffer+0x22>
    24f4:	ea 01       	movw	r28, r20
    24f6:	20 97       	sbiw	r28, 0x00	; 0
    24f8:	79 f1       	breq	.+94     	; 0x2558 <prvReadBytesFromBuffer+0x84>
    24fa:	f7 01       	movw	r30, r14
    24fc:	00 81       	ld	r16, Z
    24fe:	11 81       	ldd	r17, Z+1	; 0x01
    2500:	c4 80       	ldd	r12, Z+4	; 0x04
    2502:	d5 80       	ldd	r13, Z+5	; 0x05
    2504:	c0 1a       	sub	r12, r16
    2506:	d1 0a       	sbc	r13, r17
    2508:	cc 15       	cp	r28, r12
    250a:	dd 05       	cpc	r29, r13
    250c:	08 f4       	brcc	.+2      	; 0x2510 <prvReadBytesFromBuffer+0x3c>
    250e:	6e 01       	movw	r12, r28
    2510:	f7 01       	movw	r30, r14
    2512:	64 85       	ldd	r22, Z+12	; 0x0c
    2514:	75 85       	ldd	r23, Z+13	; 0x0d
    2516:	60 0f       	add	r22, r16
    2518:	71 1f       	adc	r23, r17
    251a:	a6 01       	movw	r20, r12
    251c:	c5 01       	movw	r24, r10
    251e:	0e 94 0e 31 	call	0x621c	; 0x621c <memcpy>
    2522:	cc 16       	cp	r12, r28
    2524:	dd 06       	cpc	r13, r29
    2526:	58 f4       	brcc	.+22     	; 0x253e <prvReadBytesFromBuffer+0x6a>
    2528:	ae 01       	movw	r20, r28
    252a:	4c 19       	sub	r20, r12
    252c:	5d 09       	sbc	r21, r13
    252e:	f7 01       	movw	r30, r14
    2530:	64 85       	ldd	r22, Z+12	; 0x0c
    2532:	75 85       	ldd	r23, Z+13	; 0x0d
    2534:	c5 01       	movw	r24, r10
    2536:	8c 0d       	add	r24, r12
    2538:	9d 1d       	adc	r25, r13
    253a:	0e 94 0e 31 	call	0x621c	; 0x621c <memcpy>
    253e:	0c 0f       	add	r16, r28
    2540:	1d 1f       	adc	r17, r29
    2542:	f7 01       	movw	r30, r14
    2544:	84 81       	ldd	r24, Z+4	; 0x04
    2546:	95 81       	ldd	r25, Z+5	; 0x05
    2548:	08 17       	cp	r16, r24
    254a:	19 07       	cpc	r17, r25
    254c:	10 f0       	brcs	.+4      	; 0x2552 <prvReadBytesFromBuffer+0x7e>
    254e:	08 1b       	sub	r16, r24
    2550:	19 0b       	sbc	r17, r25
    2552:	f7 01       	movw	r30, r14
    2554:	11 83       	std	Z+1, r17	; 0x01
    2556:	00 83       	st	Z, r16
    2558:	ce 01       	movw	r24, r28
    255a:	df 91       	pop	r29
    255c:	cf 91       	pop	r28
    255e:	1f 91       	pop	r17
    2560:	0f 91       	pop	r16
    2562:	ff 90       	pop	r15
    2564:	ef 90       	pop	r14
    2566:	df 90       	pop	r13
    2568:	cf 90       	pop	r12
    256a:	bf 90       	pop	r11
    256c:	af 90       	pop	r10
    256e:	08 95       	ret

00002570 <xStreamBufferGenericCreate>:
    2570:	ef 92       	push	r14
    2572:	ff 92       	push	r15
    2574:	1f 93       	push	r17
    2576:	cf 93       	push	r28
    2578:	df 93       	push	r29
    257a:	eb 01       	movw	r28, r22
    257c:	11 e0       	ldi	r17, 0x01	; 1
    257e:	41 30       	cpi	r20, 0x01	; 1
    2580:	09 f0       	breq	.+2      	; 0x2584 <xStreamBufferGenericCreate+0x14>
    2582:	10 e0       	ldi	r17, 0x00	; 0
    2584:	20 97       	sbiw	r28, 0x00	; 0
    2586:	11 f4       	brne	.+4      	; 0x258c <xStreamBufferGenericCreate+0x1c>
    2588:	c1 e0       	ldi	r28, 0x01	; 1
    258a:	d0 e0       	ldi	r29, 0x00	; 0
    258c:	7c 01       	movw	r14, r24
    258e:	2f ef       	ldi	r18, 0xFF	; 255
    2590:	e2 1a       	sub	r14, r18
    2592:	f2 0a       	sbc	r15, r18
    2594:	41 96       	adiw	r24, 0x11	; 17
    2596:	53 d8       	rcall	.-3930   	; 0x163e <pvPortMalloc>
    2598:	00 97       	sbiw	r24, 0x00	; 0
    259a:	81 f0       	breq	.+32     	; 0x25bc <xStreamBufferGenericCreate+0x4c>
    259c:	20 e1       	ldi	r18, 0x10	; 16
    259e:	fc 01       	movw	r30, r24
    25a0:	11 92       	st	Z+, r1
    25a2:	2a 95       	dec	r18
    25a4:	e9 f7       	brne	.-6      	; 0x25a0 <xStreamBufferGenericCreate+0x30>
    25a6:	9c 01       	movw	r18, r24
    25a8:	20 5f       	subi	r18, 0xF0	; 240
    25aa:	3f 4f       	sbci	r19, 0xFF	; 255
    25ac:	fc 01       	movw	r30, r24
    25ae:	35 87       	std	Z+13, r19	; 0x0d
    25b0:	24 87       	std	Z+12, r18	; 0x0c
    25b2:	f5 82       	std	Z+5, r15	; 0x05
    25b4:	e4 82       	std	Z+4, r14	; 0x04
    25b6:	d7 83       	std	Z+7, r29	; 0x07
    25b8:	c6 83       	std	Z+6, r28	; 0x06
    25ba:	16 87       	std	Z+14, r17	; 0x0e
    25bc:	df 91       	pop	r29
    25be:	cf 91       	pop	r28
    25c0:	1f 91       	pop	r17
    25c2:	ff 90       	pop	r15
    25c4:	ef 90       	pop	r14
    25c6:	08 95       	ret

000025c8 <xStreamBufferReset>:
    25c8:	cf 93       	push	r28
    25ca:	df 93       	push	r29
    25cc:	fc 01       	movw	r30, r24
    25ce:	27 85       	ldd	r18, Z+15	; 0x0f
    25d0:	0f b6       	in	r0, 0x3f	; 63
    25d2:	f8 94       	cli
    25d4:	0f 92       	push	r0
    25d6:	80 85       	ldd	r24, Z+8	; 0x08
    25d8:	91 85       	ldd	r25, Z+9	; 0x09
    25da:	89 2b       	or	r24, r25
    25dc:	d1 f4       	brne	.+52     	; 0x2612 <xStreamBufferReset+0x4a>
    25de:	82 85       	ldd	r24, Z+10	; 0x0a
    25e0:	93 85       	ldd	r25, Z+11	; 0x0b
    25e2:	89 2b       	or	r24, r25
    25e4:	c1 f4       	brne	.+48     	; 0x2616 <xStreamBufferReset+0x4e>
    25e6:	86 85       	ldd	r24, Z+14	; 0x0e
    25e8:	46 81       	ldd	r20, Z+6	; 0x06
    25ea:	57 81       	ldd	r21, Z+7	; 0x07
    25ec:	64 81       	ldd	r22, Z+4	; 0x04
    25ee:	75 81       	ldd	r23, Z+5	; 0x05
    25f0:	a4 85       	ldd	r26, Z+12	; 0x0c
    25f2:	b5 85       	ldd	r27, Z+13	; 0x0d
    25f4:	90 e1       	ldi	r25, 0x10	; 16
    25f6:	ef 01       	movw	r28, r30
    25f8:	19 92       	st	Y+, r1
    25fa:	9a 95       	dec	r25
    25fc:	e9 f7       	brne	.-6      	; 0x25f8 <xStreamBufferReset+0x30>
    25fe:	b5 87       	std	Z+13, r27	; 0x0d
    2600:	a4 87       	std	Z+12, r26	; 0x0c
    2602:	75 83       	std	Z+5, r23	; 0x05
    2604:	64 83       	std	Z+4, r22	; 0x04
    2606:	57 83       	std	Z+7, r21	; 0x07
    2608:	46 83       	std	Z+6, r20	; 0x06
    260a:	86 87       	std	Z+14, r24	; 0x0e
    260c:	27 87       	std	Z+15, r18	; 0x0f
    260e:	81 e0       	ldi	r24, 0x01	; 1
    2610:	03 c0       	rjmp	.+6      	; 0x2618 <xStreamBufferReset+0x50>
    2612:	80 e0       	ldi	r24, 0x00	; 0
    2614:	01 c0       	rjmp	.+2      	; 0x2618 <xStreamBufferReset+0x50>
    2616:	80 e0       	ldi	r24, 0x00	; 0
    2618:	0f 90       	pop	r0
    261a:	0f be       	out	0x3f, r0	; 63
    261c:	df 91       	pop	r29
    261e:	cf 91       	pop	r28
    2620:	08 95       	ret

00002622 <xStreamBufferSpacesAvailable>:
    2622:	fc 01       	movw	r30, r24
    2624:	24 81       	ldd	r18, Z+4	; 0x04
    2626:	35 81       	ldd	r19, Z+5	; 0x05
    2628:	80 81       	ld	r24, Z
    262a:	91 81       	ldd	r25, Z+1	; 0x01
    262c:	42 81       	ldd	r20, Z+2	; 0x02
    262e:	53 81       	ldd	r21, Z+3	; 0x03
    2630:	82 0f       	add	r24, r18
    2632:	93 1f       	adc	r25, r19
    2634:	01 97       	sbiw	r24, 0x01	; 1
    2636:	84 1b       	sub	r24, r20
    2638:	95 0b       	sbc	r25, r21
    263a:	82 17       	cp	r24, r18
    263c:	93 07       	cpc	r25, r19
    263e:	10 f0       	brcs	.+4      	; 0x2644 <xStreamBufferSpacesAvailable+0x22>
    2640:	82 1b       	sub	r24, r18
    2642:	93 0b       	sbc	r25, r19
    2644:	08 95       	ret

00002646 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void *pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    2646:	2f 92       	push	r2
    2648:	3f 92       	push	r3
    264a:	4f 92       	push	r4
    264c:	5f 92       	push	r5
    264e:	6f 92       	push	r6
    2650:	7f 92       	push	r7
    2652:	8f 92       	push	r8
    2654:	9f 92       	push	r9
    2656:	af 92       	push	r10
    2658:	bf 92       	push	r11
    265a:	cf 92       	push	r12
    265c:	df 92       	push	r13
    265e:	ef 92       	push	r14
    2660:	ff 92       	push	r15
    2662:	0f 93       	push	r16
    2664:	1f 93       	push	r17
    2666:	cf 93       	push	r28
    2668:	df 93       	push	r29
    266a:	cd b7       	in	r28, 0x3d	; 61
    266c:	de b7       	in	r29, 0x3e	; 62
    266e:	29 97       	sbiw	r28, 0x09	; 9
    2670:	0f b6       	in	r0, 0x3f	; 63
    2672:	f8 94       	cli
    2674:	de bf       	out	0x3e, r29	; 62
    2676:	0f be       	out	0x3f, r0	; 63
    2678:	cd bf       	out	0x3d, r28	; 61
    267a:	5c 01       	movw	r10, r24
    267c:	1b 01       	movw	r2, r22
    267e:	2a 01       	movw	r4, r20
    2680:	0e 83       	std	Y+6, r16	; 0x06
    2682:	1f 83       	std	Y+7, r17	; 0x07
    2684:	28 87       	std	Y+8, r18	; 0x08
    2686:	39 87       	std	Y+9, r19	; 0x09

    /* This send function is used to write to both message buffers and stream
    buffers.  If this is a message buffer then the space needed must be
    increased by the amount of bytes needed to store the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    2688:	fc 01       	movw	r30, r24
    268a:	86 85       	ldd	r24, Z+14	; 0x0e
    268c:	80 ff       	sbrs	r24, 0
    268e:	05 c0       	rjmp	.+10     	; 0x269a <xStreamBufferSend+0x54>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    2690:	3a 01       	movw	r6, r20
    2692:	f2 e0       	ldi	r31, 0x02	; 2
    2694:	6f 0e       	add	r6, r31
    2696:	71 1c       	adc	r7, r1
    2698:	01 c0       	rjmp	.+2      	; 0x269c <xStreamBufferSend+0x56>
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReturn, xSpace = 0;
size_t xRequiredSpace = xDataLengthBytes;
    269a:	3a 01       	movw	r6, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    269c:	8e 81       	ldd	r24, Y+6	; 0x06
    269e:	9f 81       	ldd	r25, Y+7	; 0x07
    26a0:	a8 85       	ldd	r26, Y+8	; 0x08
    26a2:	b9 85       	ldd	r27, Y+9	; 0x09
    26a4:	89 2b       	or	r24, r25
    26a6:	8a 2b       	or	r24, r26
    26a8:	8b 2b       	or	r24, r27
    26aa:	09 f4       	brne	.+2      	; 0x26ae <xStreamBufferSend+0x68>
    26ac:	34 c0       	rjmp	.+104    	; 0x2716 <xStreamBufferSend+0xd0>
    {
        vTaskSetTimeOutState( &xTimeOut );
    26ae:	ce 01       	movw	r24, r28
    26b0:	01 96       	adiw	r24, 0x01	; 1
    26b2:	24 d6       	rcall	.+3144   	; 0x32fc <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
            buffer. */
            taskENTER_CRITICAL();
    26b4:	0f b6       	in	r0, 0x3f	; 63
    26b6:	f8 94       	cli
    26b8:	0f 92       	push	r0
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    26ba:	c5 01       	movw	r24, r10
    26bc:	b2 df       	rcall	.-156    	; 0x2622 <xStreamBufferSpacesAvailable>
    26be:	4c 01       	movw	r8, r24

                if( xSpace < xRequiredSpace )
    26c0:	86 15       	cp	r24, r6
    26c2:	97 05       	cpc	r25, r7
    26c4:	18 f5       	brcc	.+70     	; 0x270c <xStreamBufferSend+0xc6>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClear( NULL );
    26c6:	80 e0       	ldi	r24, 0x00	; 0
    26c8:	90 e0       	ldi	r25, 0x00	; 0
    26ca:	0e 94 d2 1c 	call	0x39a4	; 0x39a4 <xTaskNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    26ce:	96 d6       	rcall	.+3372   	; 0x33fc <xTaskGetCurrentTaskHandle>
    26d0:	f5 01       	movw	r30, r10
    26d2:	93 87       	std	Z+11, r25	; 0x0b
    26d4:	82 87       	std	Z+10, r24	; 0x0a
                {
                    taskEXIT_CRITICAL();
                    break;
                }
            }
            taskEXIT_CRITICAL();
    26d6:	0f 90       	pop	r0
    26d8:	0f be       	out	0x3f, r0	; 63

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    26da:	ce 80       	ldd	r12, Y+6	; 0x06
    26dc:	df 80       	ldd	r13, Y+7	; 0x07
    26de:	e8 84       	ldd	r14, Y+8	; 0x08
    26e0:	f9 84       	ldd	r15, Y+9	; 0x09
    26e2:	00 e0       	ldi	r16, 0x00	; 0
    26e4:	10 e0       	ldi	r17, 0x00	; 0
    26e6:	20 e0       	ldi	r18, 0x00	; 0
    26e8:	30 e0       	ldi	r19, 0x00	; 0
    26ea:	a9 01       	movw	r20, r18
    26ec:	60 e0       	ldi	r22, 0x00	; 0
    26ee:	70 e0       	ldi	r23, 0x00	; 0
    26f0:	cb 01       	movw	r24, r22
    26f2:	cd d7       	rcall	.+3994   	; 0x368e <xTaskNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
    26f4:	f5 01       	movw	r30, r10
    26f6:	13 86       	std	Z+11, r1	; 0x0b
    26f8:	12 86       	std	Z+10, r1	; 0x0a

        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    26fa:	be 01       	movw	r22, r28
    26fc:	6a 5f       	subi	r22, 0xFA	; 250
    26fe:	7f 4f       	sbci	r23, 0xFF	; 255
    2700:	ce 01       	movw	r24, r28
    2702:	01 96       	adiw	r24, 0x01	; 1
    2704:	22 d6       	rcall	.+3140   	; 0x334a <xTaskCheckForTimeOut>
    2706:	88 23       	and	r24, r24
    2708:	a9 f2       	breq	.-86     	; 0x26b4 <xStreamBufferSend+0x6e>
    270a:	02 c0       	rjmp	.+4      	; 0x2710 <xStreamBufferSend+0xca>
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
                }
                else
                {
                    taskEXIT_CRITICAL();
    270c:	0f 90       	pop	r0
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
    270e:	0f be       	out	0x3f, r0	; 63
    2710:	81 14       	cp	r8, r1
    2712:	91 04       	cpc	r9, r1
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    2714:	19 f4       	brne	.+6      	; 0x271c <xStreamBufferSend+0xd6>
    2716:	c5 01       	movw	r24, r10
    2718:	84 df       	rcall	.-248    	; 0x2622 <xStreamBufferSpacesAvailable>
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    271a:	4c 01       	movw	r8, r24
    271c:	83 01       	movw	r16, r6
    271e:	94 01       	movw	r18, r8
    2720:	a2 01       	movw	r20, r4
    2722:	b1 01       	movw	r22, r2
    2724:	c5 01       	movw	r24, r10
    2726:	96 de       	rcall	.-724    	; 0x2454 <prvWriteMessageToBuffer>

    if( xReturn > ( size_t ) 0 )
    2728:	7c 01       	movw	r14, r24
    272a:	89 2b       	or	r24, r25
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    272c:	e1 f0       	breq	.+56     	; 0x2766 <xStreamBufferSend+0x120>
    272e:	c5 01       	movw	r24, r10
    2730:	35 de       	rcall	.-918    	; 0x239c <prvBytesInBuffer>
    2732:	f5 01       	movw	r30, r10
    2734:	26 81       	ldd	r18, Z+6	; 0x06
    2736:	37 81       	ldd	r19, Z+7	; 0x07
    2738:	82 17       	cp	r24, r18
    273a:	93 07       	cpc	r25, r19
        {
            sbSEND_COMPLETED( pxStreamBuffer );
    273c:	a0 f0       	brcs	.+40     	; 0x2766 <xStreamBufferSend+0x120>
    273e:	10 d3       	rcall	.+1568   	; 0x2d60 <vTaskSuspendAll>
    2740:	f5 01       	movw	r30, r10
    2742:	80 85       	ldd	r24, Z+8	; 0x08
    2744:	91 85       	ldd	r25, Z+9	; 0x09
    2746:	89 2b       	or	r24, r25
    2748:	69 f0       	breq	.+26     	; 0x2764 <xStreamBufferSend+0x11e>
    274a:	80 85       	ldd	r24, Z+8	; 0x08
    274c:	91 85       	ldd	r25, Z+9	; 0x09
    274e:	00 e0       	ldi	r16, 0x00	; 0
    2750:	10 e0       	ldi	r17, 0x00	; 0
    2752:	20 e0       	ldi	r18, 0x00	; 0
    2754:	40 e0       	ldi	r20, 0x00	; 0
    2756:	50 e0       	ldi	r21, 0x00	; 0
    2758:	ba 01       	movw	r22, r20
    275a:	0e 94 d1 1b 	call	0x37a2	; 0x37a2 <xTaskGenericNotify>
    275e:	f5 01       	movw	r30, r10
    2760:	11 86       	std	Z+9, r1	; 0x09
    2762:	10 86       	std	Z+8, r1	; 0x08
    2764:	e6 d3       	rcall	.+1996   	; 0x2f32 <xTaskResumeAll>
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    2766:	c7 01       	movw	r24, r14
    2768:	29 96       	adiw	r28, 0x09	; 9
    276a:	0f b6       	in	r0, 0x3f	; 63
    276c:	f8 94       	cli
    276e:	de bf       	out	0x3e, r29	; 62
    2770:	0f be       	out	0x3f, r0	; 63
    2772:	cd bf       	out	0x3d, r28	; 61
    2774:	df 91       	pop	r29
    2776:	cf 91       	pop	r28
    2778:	1f 91       	pop	r17
    277a:	0f 91       	pop	r16
    277c:	ff 90       	pop	r15
    277e:	ef 90       	pop	r14
    2780:	df 90       	pop	r13
    2782:	cf 90       	pop	r12
    2784:	bf 90       	pop	r11
    2786:	af 90       	pop	r10
    2788:	9f 90       	pop	r9
    278a:	8f 90       	pop	r8
    278c:	7f 90       	pop	r7
    278e:	6f 90       	pop	r6
    2790:	5f 90       	pop	r5
    2792:	4f 90       	pop	r4
    2794:	3f 90       	pop	r3
    2796:	2f 90       	pop	r2
    2798:	08 95       	ret

0000279a <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void *pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    279a:	af 92       	push	r10
    279c:	bf 92       	push	r11
    279e:	cf 92       	push	r12
    27a0:	df 92       	push	r13
    27a2:	ef 92       	push	r14
    27a4:	ff 92       	push	r15
    27a6:	0f 93       	push	r16
    27a8:	1f 93       	push	r17
    27aa:	cf 93       	push	r28
    27ac:	df 93       	push	r29
    27ae:	ec 01       	movw	r28, r24
    27b0:	5b 01       	movw	r10, r22
    27b2:	6a 01       	movw	r12, r20
    27b4:	79 01       	movw	r14, r18

    /* This send function is used to write to both message buffers and stream
    buffers.  If this is a message buffer then the space needed must be
    increased by the amount of bytes needed to store the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    27b6:	8e 85       	ldd	r24, Y+14	; 0x0e
    27b8:	80 ff       	sbrs	r24, 0
    27ba:	04 c0       	rjmp	.+8      	; 0x27c4 <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    27bc:	8a 01       	movw	r16, r20
    27be:	0e 5f       	subi	r16, 0xFE	; 254
    27c0:	1f 4f       	sbci	r17, 0xFF	; 255
    27c2:	01 c0       	rjmp	.+2      	; 0x27c6 <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReturn, xSpace;
size_t xRequiredSpace = xDataLengthBytes;
    27c4:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    27c6:	ce 01       	movw	r24, r28
    27c8:	2c df       	rcall	.-424    	; 0x2622 <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    27ca:	9c 01       	movw	r18, r24
    27cc:	a6 01       	movw	r20, r12
    27ce:	b5 01       	movw	r22, r10
    27d0:	ce 01       	movw	r24, r28
    27d2:	40 de       	rcall	.-896    	; 0x2454 <prvWriteMessageToBuffer>
    27d4:	6c 01       	movw	r12, r24

    if( xReturn > ( size_t ) 0 )
    27d6:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    27d8:	b9 f0       	breq	.+46     	; 0x2808 <xStreamBufferSendFromISR+0x6e>
    27da:	ce 01       	movw	r24, r28
    27dc:	df dd       	rcall	.-1090   	; 0x239c <prvBytesInBuffer>
    27de:	2e 81       	ldd	r18, Y+6	; 0x06
    27e0:	3f 81       	ldd	r19, Y+7	; 0x07
    27e2:	82 17       	cp	r24, r18
    27e4:	93 07       	cpc	r25, r19
    27e6:	80 f0       	brcs	.+32     	; 0x2808 <xStreamBufferSendFromISR+0x6e>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    27e8:	88 85       	ldd	r24, Y+8	; 0x08
    27ea:	99 85       	ldd	r25, Y+9	; 0x09
    27ec:	89 2b       	or	r24, r25
    27ee:	61 f0       	breq	.+24     	; 0x2808 <xStreamBufferSendFromISR+0x6e>
    27f0:	88 85       	ldd	r24, Y+8	; 0x08
    27f2:	99 85       	ldd	r25, Y+9	; 0x09
    27f4:	00 e0       	ldi	r16, 0x00	; 0
    27f6:	10 e0       	ldi	r17, 0x00	; 0
    27f8:	20 e0       	ldi	r18, 0x00	; 0
    27fa:	40 e0       	ldi	r20, 0x00	; 0
    27fc:	50 e0       	ldi	r21, 0x00	; 0
    27fe:	ba 01       	movw	r22, r20
    2800:	0e 94 49 1c 	call	0x3892	; 0x3892 <xTaskGenericNotifyFromISR>
    2804:	19 86       	std	Y+9, r1	; 0x09
    2806:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    2808:	c6 01       	movw	r24, r12
    280a:	df 91       	pop	r29
    280c:	cf 91       	pop	r28
    280e:	1f 91       	pop	r17
    2810:	0f 91       	pop	r16
    2812:	ff 90       	pop	r15
    2814:	ef 90       	pop	r14
    2816:	df 90       	pop	r13
    2818:	cf 90       	pop	r12
    281a:	bf 90       	pop	r11
    281c:	af 90       	pop	r10
    281e:	08 95       	ret

00002820 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void *pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    2820:	4f 92       	push	r4
    2822:	5f 92       	push	r5
    2824:	6f 92       	push	r6
    2826:	7f 92       	push	r7
    2828:	8f 92       	push	r8
    282a:	9f 92       	push	r9
    282c:	af 92       	push	r10
    282e:	bf 92       	push	r11
    2830:	cf 92       	push	r12
    2832:	df 92       	push	r13
    2834:	ef 92       	push	r14
    2836:	ff 92       	push	r15
    2838:	0f 93       	push	r16
    283a:	1f 93       	push	r17
    283c:	cf 93       	push	r28
    283e:	df 93       	push	r29
    2840:	1f 92       	push	r1
    2842:	1f 92       	push	r1
    2844:	cd b7       	in	r28, 0x3d	; 61
    2846:	de b7       	in	r29, 0x3e	; 62
    2848:	5c 01       	movw	r10, r24
    284a:	2b 01       	movw	r4, r22
    284c:	3a 01       	movw	r6, r20
    284e:	68 01       	movw	r12, r16
    2850:	79 01       	movw	r14, r18
    /* This receive function is used by both message buffers, which store
    discrete messages, and stream buffers, which store a continuous stream of
    bytes.  Discrete messages include an additional
    sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    2852:	fc 01       	movw	r30, r24
    2854:	86 85       	ldd	r24, Z+14	; 0x0e
    2856:	80 fd       	sbrc	r24, 0
    2858:	03 c0       	rjmp	.+6      	; 0x2860 <xStreamBufferReceive+0x40>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    285a:	81 2c       	mov	r8, r1
    285c:	91 2c       	mov	r9, r1
    285e:	04 c0       	rjmp	.+8      	; 0x2868 <xStreamBufferReceive+0x48>
    bytes.  Discrete messages include an additional
    sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    2860:	68 94       	set
    2862:	88 24       	eor	r8, r8
    2864:	81 f8       	bld	r8, 1
    2866:	91 2c       	mov	r9, r1
    else
    {
        xBytesToStoreMessageLength = 0;
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    2868:	c1 14       	cp	r12, r1
    286a:	d1 04       	cpc	r13, r1
    286c:	e1 04       	cpc	r14, r1
    286e:	f1 04       	cpc	r15, r1
    2870:	31 f1       	breq	.+76     	; 0x28be <xStreamBufferReceive+0x9e>
    {
        /* Checking if there is data and clearing the notification state must be
        performed atomically. */
        taskENTER_CRITICAL();
    2872:	0f b6       	in	r0, 0x3f	; 63
    2874:	f8 94       	cli
    2876:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    2878:	c5 01       	movw	r24, r10
    287a:	90 dd       	rcall	.-1248   	; 0x239c <prvBytesInBuffer>
    287c:	8c 01       	movw	r16, r24
            /* If this function was invoked by a message buffer read then
            xBytesToStoreMessageLength holds the number of bytes used to hold
            the length of the next discrete message.  If this function was
            invoked by a stream buffer read then xBytesToStoreMessageLength will
            be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    287e:	88 16       	cp	r8, r24
    2880:	99 06       	cpc	r9, r25
    2882:	40 f0       	brcs	.+16     	; 0x2894 <xStreamBufferReceive+0x74>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    2884:	80 e0       	ldi	r24, 0x00	; 0
    2886:	90 e0       	ldi	r25, 0x00	; 0
    2888:	0e 94 d2 1c 	call	0x39a4	; 0x39a4 <xTaskNotifyStateClear>

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    288c:	b7 d5       	rcall	.+2926   	; 0x33fc <xTaskGetCurrentTaskHandle>
    288e:	f5 01       	movw	r30, r10
    2890:	91 87       	std	Z+9, r25	; 0x09
    2892:	80 87       	std	Z+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    2894:	0f 90       	pop	r0
    2896:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    2898:	80 16       	cp	r8, r16
    289a:	91 06       	cpc	r9, r17
    289c:	b0 f0       	brcs	.+44     	; 0x28ca <xStreamBufferReceive+0xaa>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    289e:	00 e0       	ldi	r16, 0x00	; 0
    28a0:	10 e0       	ldi	r17, 0x00	; 0
    28a2:	20 e0       	ldi	r18, 0x00	; 0
    28a4:	30 e0       	ldi	r19, 0x00	; 0
    28a6:	a9 01       	movw	r20, r18
    28a8:	60 e0       	ldi	r22, 0x00	; 0
    28aa:	70 e0       	ldi	r23, 0x00	; 0
    28ac:	cb 01       	movw	r24, r22
    28ae:	ef d6       	rcall	.+3550   	; 0x368e <xTaskNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    28b0:	f5 01       	movw	r30, r10
    28b2:	11 86       	std	Z+9, r1	; 0x09

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    28b4:	10 86       	std	Z+8, r1	; 0x08
    28b6:	c5 01       	movw	r24, r10
    28b8:	71 dd       	rcall	.-1310   	; 0x239c <prvBytesInBuffer>
    28ba:	8c 01       	movw	r16, r24
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    28bc:	03 c0       	rjmp	.+6      	; 0x28c4 <xStreamBufferReceive+0xa4>
    28be:	c5 01       	movw	r24, r10
    28c0:	6d dd       	rcall	.-1318   	; 0x239c <prvBytesInBuffer>
    28c2:	8c 01       	movw	r16, r24
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
    holds the number of bytes used to store the message length) or a stream of
    bytes (where xBytesToStoreMessageLength is zero), the number of bytes
    available must be greater than xBytesToStoreMessageLength to be able to
    read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    28c4:	80 16       	cp	r8, r16
    28c6:	91 06       	cpc	r9, r17
    28c8:	b8 f5       	brcc	.+110    	; 0x2938 <xStreamBufferReceive+0x118>
                                        size_t xBytesToStoreMessageLength )
{
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

    if( xBytesToStoreMessageLength != ( size_t ) 0 )
    28ca:	81 14       	cp	r8, r1
    28cc:	91 04       	cpc	r9, r1
    28ce:	c1 f0       	breq	.+48     	; 0x2900 <xStreamBufferReceive+0xe0>
    {
        /* A discrete message is being received.  First receive the length
        of the message.  A copy of the tail is stored so the buffer can be
        returned to its prior state if the length of the message is too
        large for the provided buffer. */
        xOriginalTail = pxStreamBuffer->xTail;
    28d0:	f5 01       	movw	r30, r10
    28d2:	e0 80       	ld	r14, Z
    28d4:	f1 80       	ldd	r15, Z+1	; 0x01
        ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
    28d6:	98 01       	movw	r18, r16
    28d8:	a4 01       	movw	r20, r8
    28da:	be 01       	movw	r22, r28
    28dc:	6f 5f       	subi	r22, 0xFF	; 255
    28de:	7f 4f       	sbci	r23, 0xFF	; 255
    28e0:	c5 01       	movw	r24, r10
    28e2:	f8 dd       	rcall	.-1040   	; 0x24d4 <prvReadBytesFromBuffer>
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
    28e4:	89 81       	ldd	r24, Y+1	; 0x01
    28e6:	9a 81       	ldd	r25, Y+2	; 0x02

        /* Reduce the number of bytes available by the number of bytes just
        read out. */
        xBytesAvailable -= xBytesToStoreMessageLength;
    28e8:	08 19       	sub	r16, r8
    28ea:	19 09       	sbc	r17, r9

        /* Check there is enough space in the buffer provided by the
        user. */
        if( xNextMessageLength > xBufferLengthBytes )
    28ec:	68 16       	cp	r6, r24
    28ee:	79 06       	cpc	r7, r25
    28f0:	30 f4       	brcc	.+12     	; 0x28fe <xStreamBufferReceive+0xde>
        {
            /* The user has provided insufficient space to read the message
            so return the buffer to its previous state (so the length of
            the message is in the buffer again). */
            pxStreamBuffer->xTail = xOriginalTail;
    28f2:	f5 01       	movw	r30, r10
    28f4:	f1 82       	std	Z+1, r15	; 0x01
    28f6:	e0 82       	st	Z, r14
            xNextMessageLength = 0;
    28f8:	61 2c       	mov	r6, r1
    28fa:	71 2c       	mov	r7, r1
        of the message.  A copy of the tail is stored so the buffer can be
        returned to its prior state if the length of the message is too
        large for the provided buffer. */
        xOriginalTail = pxStreamBuffer->xTail;
        ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
    28fc:	01 c0       	rjmp	.+2      	; 0x2900 <xStreamBufferReceive+0xe0>
        message), so read as many bytes as possible. */
        xNextMessageLength = xBufferLengthBytes;
    }

    /* Read the actual data. */
    xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
    28fe:	3c 01       	movw	r6, r24
    2900:	98 01       	movw	r18, r16
    2902:	a3 01       	movw	r20, r6
    2904:	b2 01       	movw	r22, r4
    2906:	c5 01       	movw	r24, r10
    2908:	e5 dd       	rcall	.-1078   	; 0x24d4 <prvReadBytesFromBuffer>
    if( xBytesAvailable > xBytesToStoreMessageLength )
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    290a:	7c 01       	movw	r14, r24
    290c:	89 2b       	or	r24, r25
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    290e:	b1 f0       	breq	.+44     	; 0x293c <xStreamBufferReceive+0x11c>
    2910:	27 d2       	rcall	.+1102   	; 0x2d60 <vTaskSuspendAll>
    2912:	f5 01       	movw	r30, r10
    2914:	82 85       	ldd	r24, Z+10	; 0x0a
    2916:	93 85       	ldd	r25, Z+11	; 0x0b
    2918:	89 2b       	or	r24, r25
    291a:	61 f0       	breq	.+24     	; 0x2934 <xStreamBufferReceive+0x114>
    291c:	82 85       	ldd	r24, Z+10	; 0x0a
    291e:	93 85       	ldd	r25, Z+11	; 0x0b
    2920:	00 e0       	ldi	r16, 0x00	; 0
    2922:	10 e0       	ldi	r17, 0x00	; 0
    2924:	20 e0       	ldi	r18, 0x00	; 0
    2926:	40 e0       	ldi	r20, 0x00	; 0
    2928:	50 e0       	ldi	r21, 0x00	; 0
    292a:	ba 01       	movw	r22, r20
    292c:	3a d7       	rcall	.+3700   	; 0x37a2 <xTaskGenericNotify>
    292e:	f5 01       	movw	r30, r10
    2930:	13 86       	std	Z+11, r1	; 0x0b
    2932:	12 86       	std	Z+10, r1	; 0x0a
    2934:	fe d2       	rcall	.+1532   	; 0x2f32 <xTaskResumeAll>
    2936:	02 c0       	rjmp	.+4      	; 0x293c <xStreamBufferReceive+0x11c>
                             void *pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    2938:	e1 2c       	mov	r14, r1
    293a:	f1 2c       	mov	r15, r1
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    293c:	c7 01       	movw	r24, r14
    293e:	0f 90       	pop	r0
    2940:	0f 90       	pop	r0
    2942:	df 91       	pop	r29
    2944:	cf 91       	pop	r28
    2946:	1f 91       	pop	r17
    2948:	0f 91       	pop	r16
    294a:	ff 90       	pop	r15
    294c:	ef 90       	pop	r14
    294e:	df 90       	pop	r13
    2950:	cf 90       	pop	r12
    2952:	bf 90       	pop	r11
    2954:	af 90       	pop	r10
    2956:	9f 90       	pop	r9
    2958:	8f 90       	pop	r8
    295a:	7f 90       	pop	r7
    295c:	6f 90       	pop	r6
    295e:	5f 90       	pop	r5
    2960:	4f 90       	pop	r4
    2962:	08 95       	ret

00002964 <prvResetNextTaskUnblockTime>:
    2964:	e0 91 6f 18 	lds	r30, 0x186F	; 0x80186f <pxDelayedTaskList>
    2968:	f0 91 70 18 	lds	r31, 0x1870	; 0x801870 <pxDelayedTaskList+0x1>
    296c:	80 81       	ld	r24, Z
    296e:	81 11       	cpse	r24, r1
    2970:	0c c0       	rjmp	.+24     	; 0x298a <prvResetNextTaskUnblockTime+0x26>
    2972:	8f ef       	ldi	r24, 0xFF	; 255
    2974:	9f ef       	ldi	r25, 0xFF	; 255
    2976:	dc 01       	movw	r26, r24
    2978:	80 93 3c 18 	sts	0x183C, r24	; 0x80183c <xNextTaskUnblockTime>
    297c:	90 93 3d 18 	sts	0x183D, r25	; 0x80183d <xNextTaskUnblockTime+0x1>
    2980:	a0 93 3e 18 	sts	0x183E, r26	; 0x80183e <xNextTaskUnblockTime+0x2>
    2984:	b0 93 3f 18 	sts	0x183F, r27	; 0x80183f <xNextTaskUnblockTime+0x3>
    2988:	08 95       	ret
    298a:	e0 91 6f 18 	lds	r30, 0x186F	; 0x80186f <pxDelayedTaskList>
    298e:	f0 91 70 18 	lds	r31, 0x1870	; 0x801870 <pxDelayedTaskList+0x1>
    2992:	07 80       	ldd	r0, Z+7	; 0x07
    2994:	f0 85       	ldd	r31, Z+8	; 0x08
    2996:	e0 2d       	mov	r30, r0
    2998:	00 84       	ldd	r0, Z+8	; 0x08
    299a:	f1 85       	ldd	r31, Z+9	; 0x09
    299c:	e0 2d       	mov	r30, r0
    299e:	82 81       	ldd	r24, Z+2	; 0x02
    29a0:	93 81       	ldd	r25, Z+3	; 0x03
    29a2:	a4 81       	ldd	r26, Z+4	; 0x04
    29a4:	b5 81       	ldd	r27, Z+5	; 0x05
    29a6:	80 93 3c 18 	sts	0x183C, r24	; 0x80183c <xNextTaskUnblockTime>
    29aa:	90 93 3d 18 	sts	0x183D, r25	; 0x80183d <xNextTaskUnblockTime+0x1>
    29ae:	a0 93 3e 18 	sts	0x183E, r26	; 0x80183e <xNextTaskUnblockTime+0x2>
    29b2:	b0 93 3f 18 	sts	0x183F, r27	; 0x80183f <xNextTaskUnblockTime+0x3>
    29b6:	08 95       	ret

000029b8 <prvAddCurrentTaskToDelayedList>:
    29b8:	8f 92       	push	r8
    29ba:	9f 92       	push	r9
    29bc:	af 92       	push	r10
    29be:	bf 92       	push	r11
    29c0:	cf 92       	push	r12
    29c2:	df 92       	push	r13
    29c4:	ef 92       	push	r14
    29c6:	ff 92       	push	r15
    29c8:	cf 93       	push	r28
    29ca:	6b 01       	movw	r12, r22
    29cc:	7c 01       	movw	r14, r24
    29ce:	c4 2f       	mov	r28, r20
    29d0:	80 90 46 18 	lds	r8, 0x1846	; 0x801846 <xTickCount>
    29d4:	90 90 47 18 	lds	r9, 0x1847	; 0x801847 <xTickCount+0x1>
    29d8:	a0 90 48 18 	lds	r10, 0x1848	; 0x801848 <xTickCount+0x2>
    29dc:	b0 90 49 18 	lds	r11, 0x1849	; 0x801849 <xTickCount+0x3>
    29e0:	80 91 c9 18 	lds	r24, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    29e4:	90 91 ca 18 	lds	r25, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    29e8:	02 96       	adiw	r24, 0x02	; 2
    29ea:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <uxListRemove>
    29ee:	8f ef       	ldi	r24, 0xFF	; 255
    29f0:	c8 16       	cp	r12, r24
    29f2:	d8 06       	cpc	r13, r24
    29f4:	e8 06       	cpc	r14, r24
    29f6:	f8 06       	cpc	r15, r24
    29f8:	69 f4       	brne	.+26     	; 0x2a14 <prvAddCurrentTaskToDelayedList+0x5c>
    29fa:	cc 23       	and	r28, r28
    29fc:	59 f0       	breq	.+22     	; 0x2a14 <prvAddCurrentTaskToDelayedList+0x5c>
    29fe:	60 91 c9 18 	lds	r22, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    2a02:	70 91 ca 18 	lds	r23, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    2a06:	6e 5f       	subi	r22, 0xFE	; 254
    2a08:	7f 4f       	sbci	r23, 0xFF	; 255
    2a0a:	8b e4       	ldi	r24, 0x4B	; 75
    2a0c:	98 e1       	ldi	r25, 0x18	; 24
    2a0e:	0e 94 1e 0c 	call	0x183c	; 0x183c <vListInsertEnd>
    2a12:	3f c0       	rjmp	.+126    	; 0x2a92 <prvAddCurrentTaskToDelayedList+0xda>
    2a14:	c8 0c       	add	r12, r8
    2a16:	d9 1c       	adc	r13, r9
    2a18:	ea 1c       	adc	r14, r10
    2a1a:	fb 1c       	adc	r15, r11
    2a1c:	e0 91 c9 18 	lds	r30, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    2a20:	f0 91 ca 18 	lds	r31, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    2a24:	c2 82       	std	Z+2, r12	; 0x02
    2a26:	d3 82       	std	Z+3, r13	; 0x03
    2a28:	e4 82       	std	Z+4, r14	; 0x04
    2a2a:	f5 82       	std	Z+5, r15	; 0x05
    2a2c:	c8 14       	cp	r12, r8
    2a2e:	d9 04       	cpc	r13, r9
    2a30:	ea 04       	cpc	r14, r10
    2a32:	fb 04       	cpc	r15, r11
    2a34:	68 f4       	brcc	.+26     	; 0x2a50 <prvAddCurrentTaskToDelayedList+0x98>
    2a36:	60 91 c9 18 	lds	r22, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    2a3a:	70 91 ca 18 	lds	r23, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    2a3e:	80 91 6d 18 	lds	r24, 0x186D	; 0x80186d <pxOverflowDelayedTaskList>
    2a42:	90 91 6e 18 	lds	r25, 0x186E	; 0x80186e <pxOverflowDelayedTaskList+0x1>
    2a46:	6e 5f       	subi	r22, 0xFE	; 254
    2a48:	7f 4f       	sbci	r23, 0xFF	; 255
    2a4a:	0e 94 3f 0c 	call	0x187e	; 0x187e <vListInsert>
    2a4e:	21 c0       	rjmp	.+66     	; 0x2a92 <prvAddCurrentTaskToDelayedList+0xda>
    2a50:	60 91 c9 18 	lds	r22, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    2a54:	70 91 ca 18 	lds	r23, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    2a58:	80 91 6f 18 	lds	r24, 0x186F	; 0x80186f <pxDelayedTaskList>
    2a5c:	90 91 70 18 	lds	r25, 0x1870	; 0x801870 <pxDelayedTaskList+0x1>
    2a60:	6e 5f       	subi	r22, 0xFE	; 254
    2a62:	7f 4f       	sbci	r23, 0xFF	; 255
    2a64:	0e 94 3f 0c 	call	0x187e	; 0x187e <vListInsert>
    2a68:	80 91 3c 18 	lds	r24, 0x183C	; 0x80183c <xNextTaskUnblockTime>
    2a6c:	90 91 3d 18 	lds	r25, 0x183D	; 0x80183d <xNextTaskUnblockTime+0x1>
    2a70:	a0 91 3e 18 	lds	r26, 0x183E	; 0x80183e <xNextTaskUnblockTime+0x2>
    2a74:	b0 91 3f 18 	lds	r27, 0x183F	; 0x80183f <xNextTaskUnblockTime+0x3>
    2a78:	c8 16       	cp	r12, r24
    2a7a:	d9 06       	cpc	r13, r25
    2a7c:	ea 06       	cpc	r14, r26
    2a7e:	fb 06       	cpc	r15, r27
    2a80:	40 f4       	brcc	.+16     	; 0x2a92 <prvAddCurrentTaskToDelayedList+0xda>
    2a82:	c0 92 3c 18 	sts	0x183C, r12	; 0x80183c <xNextTaskUnblockTime>
    2a86:	d0 92 3d 18 	sts	0x183D, r13	; 0x80183d <xNextTaskUnblockTime+0x1>
    2a8a:	e0 92 3e 18 	sts	0x183E, r14	; 0x80183e <xNextTaskUnblockTime+0x2>
    2a8e:	f0 92 3f 18 	sts	0x183F, r15	; 0x80183f <xNextTaskUnblockTime+0x3>
    2a92:	cf 91       	pop	r28
    2a94:	ff 90       	pop	r15
    2a96:	ef 90       	pop	r14
    2a98:	df 90       	pop	r13
    2a9a:	cf 90       	pop	r12
    2a9c:	bf 90       	pop	r11
    2a9e:	af 90       	pop	r10
    2aa0:	9f 90       	pop	r9
    2aa2:	8f 90       	pop	r8
    2aa4:	08 95       	ret

00002aa6 <xTaskCreate>:
    2aa6:	4f 92       	push	r4
    2aa8:	5f 92       	push	r5
    2aaa:	6f 92       	push	r6
    2aac:	7f 92       	push	r7
    2aae:	8f 92       	push	r8
    2ab0:	9f 92       	push	r9
    2ab2:	af 92       	push	r10
    2ab4:	bf 92       	push	r11
    2ab6:	cf 92       	push	r12
    2ab8:	df 92       	push	r13
    2aba:	ef 92       	push	r14
    2abc:	ff 92       	push	r15
    2abe:	0f 93       	push	r16
    2ac0:	1f 93       	push	r17
    2ac2:	cf 93       	push	r28
    2ac4:	df 93       	push	r29
    2ac6:	4c 01       	movw	r8, r24
    2ac8:	6b 01       	movw	r12, r22
    2aca:	5a 01       	movw	r10, r20
    2acc:	29 01       	movw	r4, r18
    2ace:	ca 01       	movw	r24, r20
    2ad0:	0e 94 1f 0b 	call	0x163e	; 0x163e <pvPortMalloc>
    2ad4:	3c 01       	movw	r6, r24
    2ad6:	89 2b       	or	r24, r25
    2ad8:	09 f4       	brne	.+2      	; 0x2adc <xTaskCreate+0x36>
    2ada:	f4 c0       	rjmp	.+488    	; 0x2cc4 <xTaskCreate+0x21e>
    2adc:	80 e3       	ldi	r24, 0x30	; 48
    2ade:	90 e0       	ldi	r25, 0x00	; 0
    2ae0:	0e 94 1f 0b 	call	0x163e	; 0x163e <pvPortMalloc>
    2ae4:	ec 01       	movw	r28, r24
    2ae6:	89 2b       	or	r24, r25
    2ae8:	99 f0       	breq	.+38     	; 0x2b10 <xTaskCreate+0x6a>
    2aea:	7c 8e       	std	Y+28, r7	; 0x1c
    2aec:	6b 8e       	std	Y+27, r6	; 0x1b
    2aee:	a5 01       	movw	r20, r10
    2af0:	65 ea       	ldi	r22, 0xA5	; 165
    2af2:	70 e0       	ldi	r23, 0x00	; 0
    2af4:	c3 01       	movw	r24, r6
    2af6:	0e 94 17 31 	call	0x622e	; 0x622e <memset>
    2afa:	21 e0       	ldi	r18, 0x01	; 1
    2afc:	a2 1a       	sub	r10, r18
    2afe:	b1 08       	sbc	r11, r1
    2b00:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b02:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b04:	a8 0e       	add	r10, r24
    2b06:	b9 1e       	adc	r11, r25
    2b08:	c1 14       	cp	r12, r1
    2b0a:	d1 04       	cpc	r13, r1
    2b0c:	29 f4       	brne	.+10     	; 0x2b18 <xTaskCreate+0x72>
    2b0e:	20 c0       	rjmp	.+64     	; 0x2b50 <xTaskCreate+0xaa>
    2b10:	c3 01       	movw	r24, r6
    2b12:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <vPortFree>
    2b16:	d6 c0       	rjmp	.+428    	; 0x2cc4 <xTaskCreate+0x21e>
    2b18:	d6 01       	movw	r26, r12
    2b1a:	8c 91       	ld	r24, X
    2b1c:	8d 8f       	std	Y+29, r24	; 0x1d
    2b1e:	8c 91       	ld	r24, X
    2b20:	88 23       	and	r24, r24
    2b22:	a1 f0       	breq	.+40     	; 0x2b4c <xTaskCreate+0xa6>
    2b24:	ae 01       	movw	r20, r28
    2b26:	42 5e       	subi	r20, 0xE2	; 226
    2b28:	5f 4f       	sbci	r21, 0xFF	; 255
    2b2a:	f6 01       	movw	r30, r12
    2b2c:	31 96       	adiw	r30, 0x01	; 1
    2b2e:	b8 e0       	ldi	r27, 0x08	; 8
    2b30:	cb 0e       	add	r12, r27
    2b32:	d1 1c       	adc	r13, r1
    2b34:	cf 01       	movw	r24, r30
    2b36:	21 91       	ld	r18, Z+
    2b38:	da 01       	movw	r26, r20
    2b3a:	2d 93       	st	X+, r18
    2b3c:	ad 01       	movw	r20, r26
    2b3e:	dc 01       	movw	r26, r24
    2b40:	8c 91       	ld	r24, X
    2b42:	88 23       	and	r24, r24
    2b44:	19 f0       	breq	.+6      	; 0x2b4c <xTaskCreate+0xa6>
    2b46:	ce 16       	cp	r12, r30
    2b48:	df 06       	cpc	r13, r31
    2b4a:	a1 f7       	brne	.-24     	; 0x2b34 <xTaskCreate+0x8e>
    2b4c:	1c a2       	std	Y+36, r1	; 0x24
    2b4e:	01 c0       	rjmp	.+2      	; 0x2b52 <xTaskCreate+0xac>
    2b50:	1d 8e       	std	Y+29, r1	; 0x1d
    2b52:	06 30       	cpi	r16, 0x06	; 6
    2b54:	08 f0       	brcs	.+2      	; 0x2b58 <xTaskCreate+0xb2>
    2b56:	05 e0       	ldi	r16, 0x05	; 5
    2b58:	0a 8f       	std	Y+26, r16	; 0x1a
    2b5a:	0f a3       	std	Y+39, r16	; 0x27
    2b5c:	18 a6       	std	Y+40, r1	; 0x28
    2b5e:	6e 01       	movw	r12, r28
    2b60:	b2 e0       	ldi	r27, 0x02	; 2
    2b62:	cb 0e       	add	r12, r27
    2b64:	d1 1c       	adc	r13, r1
    2b66:	c6 01       	movw	r24, r12
    2b68:	0e 94 1a 0c 	call	0x1834	; 0x1834 <vListInitialiseItem>
    2b6c:	ce 01       	movw	r24, r28
    2b6e:	0e 96       	adiw	r24, 0x0e	; 14
    2b70:	0e 94 1a 0c 	call	0x1834	; 0x1834 <vListInitialiseItem>
    2b74:	db 87       	std	Y+11, r29	; 0x0b
    2b76:	ca 87       	std	Y+10, r28	; 0x0a
    2b78:	86 e0       	ldi	r24, 0x06	; 6
    2b7a:	90 e0       	ldi	r25, 0x00	; 0
    2b7c:	a0 e0       	ldi	r26, 0x00	; 0
    2b7e:	b0 e0       	ldi	r27, 0x00	; 0
    2b80:	80 1b       	sub	r24, r16
    2b82:	91 09       	sbc	r25, r1
    2b84:	a1 09       	sbc	r26, r1
    2b86:	b1 09       	sbc	r27, r1
    2b88:	8e 87       	std	Y+14, r24	; 0x0e
    2b8a:	9f 87       	std	Y+15, r25	; 0x0f
    2b8c:	a8 8b       	std	Y+16, r26	; 0x10
    2b8e:	b9 8b       	std	Y+17, r27	; 0x11
    2b90:	df 8b       	std	Y+23, r29	; 0x17
    2b92:	ce 8b       	std	Y+22, r28	; 0x16
    2b94:	1a a6       	std	Y+42, r1	; 0x2a
    2b96:	19 a6       	std	Y+41, r1	; 0x29
    2b98:	1b a6       	std	Y+43, r1	; 0x2b
    2b9a:	1c a6       	std	Y+44, r1	; 0x2c
    2b9c:	1d a6       	std	Y+45, r1	; 0x2d
    2b9e:	1e a6       	std	Y+46, r1	; 0x2e
    2ba0:	1f a6       	std	Y+47, r1	; 0x2f
    2ba2:	a2 01       	movw	r20, r4
    2ba4:	b4 01       	movw	r22, r8
    2ba6:	c5 01       	movw	r24, r10
    2ba8:	0e 94 a3 0c 	call	0x1946	; 0x1946 <pxPortInitialiseStack>
    2bac:	99 83       	std	Y+1, r25	; 0x01
    2bae:	88 83       	st	Y, r24
    2bb0:	e1 14       	cp	r14, r1
    2bb2:	f1 04       	cpc	r15, r1
    2bb4:	19 f0       	breq	.+6      	; 0x2bbc <xTaskCreate+0x116>
    2bb6:	f7 01       	movw	r30, r14
    2bb8:	d1 83       	std	Z+1, r29	; 0x01
    2bba:	c0 83       	st	Z, r28
    2bbc:	0f b6       	in	r0, 0x3f	; 63
    2bbe:	f8 94       	cli
    2bc0:	0f 92       	push	r0
    2bc2:	80 91 4a 18 	lds	r24, 0x184A	; 0x80184a <uxCurrentNumberOfTasks>
    2bc6:	8f 5f       	subi	r24, 0xFF	; 255
    2bc8:	80 93 4a 18 	sts	0x184A, r24	; 0x80184a <uxCurrentNumberOfTasks>
    2bcc:	80 91 c9 18 	lds	r24, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    2bd0:	90 91 ca 18 	lds	r25, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    2bd4:	89 2b       	or	r24, r25
    2bd6:	d1 f5       	brne	.+116    	; 0x2c4c <xTaskCreate+0x1a6>
    2bd8:	d0 93 ca 18 	sts	0x18CA, r29	; 0x8018ca <pxCurrentTCB+0x1>
    2bdc:	c0 93 c9 18 	sts	0x18C9, r28	; 0x8018c9 <pxCurrentTCB>
    2be0:	80 91 4a 18 	lds	r24, 0x184A	; 0x80184a <uxCurrentNumberOfTasks>
    2be4:	81 30       	cpi	r24, 0x01	; 1
    2be6:	09 f0       	breq	.+2      	; 0x2bea <xTaskCreate+0x144>
    2be8:	41 c0       	rjmp	.+130    	; 0x2c6c <xTaskCreate+0x1c6>
    2bea:	07 e8       	ldi	r16, 0x87	; 135
    2bec:	18 e1       	ldi	r17, 0x18	; 24
    2bee:	0f 2e       	mov	r0, r31
    2bf0:	f9 ec       	ldi	r31, 0xC9	; 201
    2bf2:	ef 2e       	mov	r14, r31
    2bf4:	f8 e1       	ldi	r31, 0x18	; 24
    2bf6:	ff 2e       	mov	r15, r31
    2bf8:	f0 2d       	mov	r31, r0
    2bfa:	c8 01       	movw	r24, r16
    2bfc:	0e 94 09 0c 	call	0x1812	; 0x1812 <vListInitialise>
    2c00:	05 5f       	subi	r16, 0xF5	; 245
    2c02:	1f 4f       	sbci	r17, 0xFF	; 255
    2c04:	0e 15       	cp	r16, r14
    2c06:	1f 05       	cpc	r17, r15
    2c08:	c1 f7       	brne	.-16     	; 0x2bfa <xTaskCreate+0x154>
    2c0a:	8c e7       	ldi	r24, 0x7C	; 124
    2c0c:	98 e1       	ldi	r25, 0x18	; 24
    2c0e:	0e 94 09 0c 	call	0x1812	; 0x1812 <vListInitialise>
    2c12:	81 e7       	ldi	r24, 0x71	; 113
    2c14:	98 e1       	ldi	r25, 0x18	; 24
    2c16:	0e 94 09 0c 	call	0x1812	; 0x1812 <vListInitialise>
    2c1a:	82 e6       	ldi	r24, 0x62	; 98
    2c1c:	98 e1       	ldi	r25, 0x18	; 24
    2c1e:	0e 94 09 0c 	call	0x1812	; 0x1812 <vListInitialise>
    2c22:	87 e5       	ldi	r24, 0x57	; 87
    2c24:	98 e1       	ldi	r25, 0x18	; 24
    2c26:	0e 94 09 0c 	call	0x1812	; 0x1812 <vListInitialise>
    2c2a:	8b e4       	ldi	r24, 0x4B	; 75
    2c2c:	98 e1       	ldi	r25, 0x18	; 24
    2c2e:	0e 94 09 0c 	call	0x1812	; 0x1812 <vListInitialise>
    2c32:	8c e7       	ldi	r24, 0x7C	; 124
    2c34:	98 e1       	ldi	r25, 0x18	; 24
    2c36:	90 93 70 18 	sts	0x1870, r25	; 0x801870 <pxDelayedTaskList+0x1>
    2c3a:	80 93 6f 18 	sts	0x186F, r24	; 0x80186f <pxDelayedTaskList>
    2c3e:	81 e7       	ldi	r24, 0x71	; 113
    2c40:	98 e1       	ldi	r25, 0x18	; 24
    2c42:	90 93 6e 18 	sts	0x186E, r25	; 0x80186e <pxOverflowDelayedTaskList+0x1>
    2c46:	80 93 6d 18 	sts	0x186D, r24	; 0x80186d <pxOverflowDelayedTaskList>
    2c4a:	10 c0       	rjmp	.+32     	; 0x2c6c <xTaskCreate+0x1c6>
    2c4c:	80 91 44 18 	lds	r24, 0x1844	; 0x801844 <xSchedulerRunning>
    2c50:	81 11       	cpse	r24, r1
    2c52:	0c c0       	rjmp	.+24     	; 0x2c6c <xTaskCreate+0x1c6>
    2c54:	e0 91 c9 18 	lds	r30, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    2c58:	f0 91 ca 18 	lds	r31, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    2c5c:	92 8d       	ldd	r25, Z+26	; 0x1a
    2c5e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2c60:	89 17       	cp	r24, r25
    2c62:	20 f0       	brcs	.+8      	; 0x2c6c <xTaskCreate+0x1c6>
    2c64:	d0 93 ca 18 	sts	0x18CA, r29	; 0x8018ca <pxCurrentTCB+0x1>
    2c68:	c0 93 c9 18 	sts	0x18C9, r28	; 0x8018c9 <pxCurrentTCB>
    2c6c:	80 91 40 18 	lds	r24, 0x1840	; 0x801840 <uxTaskNumber>
    2c70:	8f 5f       	subi	r24, 0xFF	; 255
    2c72:	80 93 40 18 	sts	0x1840, r24	; 0x801840 <uxTaskNumber>
    2c76:	8d a3       	std	Y+37, r24	; 0x25
    2c78:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2c7a:	90 91 45 18 	lds	r25, 0x1845	; 0x801845 <uxTopReadyPriority>
    2c7e:	98 17       	cp	r25, r24
    2c80:	10 f4       	brcc	.+4      	; 0x2c86 <xTaskCreate+0x1e0>
    2c82:	80 93 45 18 	sts	0x1845, r24	; 0x801845 <uxTopReadyPriority>
    2c86:	fb e0       	ldi	r31, 0x0B	; 11
    2c88:	8f 9f       	mul	r24, r31
    2c8a:	c0 01       	movw	r24, r0
    2c8c:	11 24       	eor	r1, r1
    2c8e:	b6 01       	movw	r22, r12
    2c90:	89 57       	subi	r24, 0x79	; 121
    2c92:	97 4e       	sbci	r25, 0xE7	; 231
    2c94:	0e 94 1e 0c 	call	0x183c	; 0x183c <vListInsertEnd>
    2c98:	0f 90       	pop	r0
    2c9a:	0f be       	out	0x3f, r0	; 63
    2c9c:	80 91 44 18 	lds	r24, 0x1844	; 0x801844 <xSchedulerRunning>
    2ca0:	88 23       	and	r24, r24
    2ca2:	61 f0       	breq	.+24     	; 0x2cbc <xTaskCreate+0x216>
    2ca4:	e0 91 c9 18 	lds	r30, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    2ca8:	f0 91 ca 18 	lds	r31, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    2cac:	92 8d       	ldd	r25, Z+26	; 0x1a
    2cae:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2cb0:	98 17       	cp	r25, r24
    2cb2:	30 f4       	brcc	.+12     	; 0x2cc0 <xTaskCreate+0x21a>
    2cb4:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <vPortYield>
    2cb8:	81 e0       	ldi	r24, 0x01	; 1
    2cba:	05 c0       	rjmp	.+10     	; 0x2cc6 <xTaskCreate+0x220>
    2cbc:	81 e0       	ldi	r24, 0x01	; 1
    2cbe:	03 c0       	rjmp	.+6      	; 0x2cc6 <xTaskCreate+0x220>
    2cc0:	81 e0       	ldi	r24, 0x01	; 1
    2cc2:	01 c0       	rjmp	.+2      	; 0x2cc6 <xTaskCreate+0x220>
    2cc4:	8f ef       	ldi	r24, 0xFF	; 255
    2cc6:	df 91       	pop	r29
    2cc8:	cf 91       	pop	r28
    2cca:	1f 91       	pop	r17
    2ccc:	0f 91       	pop	r16
    2cce:	ff 90       	pop	r15
    2cd0:	ef 90       	pop	r14
    2cd2:	df 90       	pop	r13
    2cd4:	cf 90       	pop	r12
    2cd6:	bf 90       	pop	r11
    2cd8:	af 90       	pop	r10
    2cda:	9f 90       	pop	r9
    2cdc:	8f 90       	pop	r8
    2cde:	7f 90       	pop	r7
    2ce0:	6f 90       	pop	r6
    2ce2:	5f 90       	pop	r5
    2ce4:	4f 90       	pop	r4
    2ce6:	08 95       	ret

00002ce8 <vTaskStartScheduler>:
    2ce8:	ef 92       	push	r14
    2cea:	ff 92       	push	r15
    2cec:	0f 93       	push	r16
    2cee:	0f 2e       	mov	r0, r31
    2cf0:	fa e3       	ldi	r31, 0x3A	; 58
    2cf2:	ef 2e       	mov	r14, r31
    2cf4:	f8 e1       	ldi	r31, 0x18	; 24
    2cf6:	ff 2e       	mov	r15, r31
    2cf8:	f0 2d       	mov	r31, r0
    2cfa:	00 e0       	ldi	r16, 0x00	; 0
    2cfc:	20 e0       	ldi	r18, 0x00	; 0
    2cfe:	30 e0       	ldi	r19, 0x00	; 0
    2d00:	40 ec       	ldi	r20, 0xC0	; 192
    2d02:	50 e0       	ldi	r21, 0x00	; 0
    2d04:	6d eb       	ldi	r22, 0xBD	; 189
    2d06:	74 e0       	ldi	r23, 0x04	; 4
    2d08:	8d ec       	ldi	r24, 0xCD	; 205
    2d0a:	90 e0       	ldi	r25, 0x00	; 0
    2d0c:	cc de       	rcall	.-616    	; 0x2aa6 <xTaskCreate>
    2d0e:	81 30       	cpi	r24, 0x01	; 1
    2d10:	19 f5       	brne	.+70     	; 0x2d58 <vTaskStartScheduler+0x70>
    2d12:	ce d6       	rcall	.+3484   	; 0x3ab0 <xTimerCreateTimerTask>
    2d14:	81 30       	cpi	r24, 0x01	; 1
    2d16:	01 f5       	brne	.+64     	; 0x2d58 <vTaskStartScheduler+0x70>
    2d18:	f8 94       	cli
    2d1a:	8f ef       	ldi	r24, 0xFF	; 255
    2d1c:	9f ef       	ldi	r25, 0xFF	; 255
    2d1e:	dc 01       	movw	r26, r24
    2d20:	80 93 3c 18 	sts	0x183C, r24	; 0x80183c <xNextTaskUnblockTime>
    2d24:	90 93 3d 18 	sts	0x183D, r25	; 0x80183d <xNextTaskUnblockTime+0x1>
    2d28:	a0 93 3e 18 	sts	0x183E, r26	; 0x80183e <xNextTaskUnblockTime+0x2>
    2d2c:	b0 93 3f 18 	sts	0x183F, r27	; 0x80183f <xNextTaskUnblockTime+0x3>
    2d30:	81 e0       	ldi	r24, 0x01	; 1
    2d32:	80 93 44 18 	sts	0x1844, r24	; 0x801844 <xSchedulerRunning>
    2d36:	10 92 46 18 	sts	0x1846, r1	; 0x801846 <xTickCount>
    2d3a:	10 92 47 18 	sts	0x1847, r1	; 0x801847 <xTickCount+0x1>
    2d3e:	10 92 48 18 	sts	0x1848, r1	; 0x801848 <xTickCount+0x2>
    2d42:	10 92 49 18 	sts	0x1849, r1	; 0x801849 <xTickCount+0x3>
    2d46:	e0 91 c9 18 	lds	r30, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    2d4a:	f0 91 ca 18 	lds	r31, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    2d4e:	81 a5       	ldd	r24, Z+41	; 0x29
    2d50:	0e 94 56 09 	call	0x12ac	; 0x12ac <task_switch_in>
    2d54:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <xPortStartScheduler>
    2d58:	0f 91       	pop	r16
    2d5a:	ff 90       	pop	r15
    2d5c:	ef 90       	pop	r14
    2d5e:	08 95       	ret

00002d60 <vTaskSuspendAll>:
    2d60:	80 91 39 18 	lds	r24, 0x1839	; 0x801839 <uxSchedulerSuspended>
    2d64:	8f 5f       	subi	r24, 0xFF	; 255
    2d66:	80 93 39 18 	sts	0x1839, r24	; 0x801839 <uxSchedulerSuspended>
    2d6a:	08 95       	ret

00002d6c <xTaskGetTickCount>:
    2d6c:	0f b6       	in	r0, 0x3f	; 63
    2d6e:	f8 94       	cli
    2d70:	0f 92       	push	r0
    2d72:	60 91 46 18 	lds	r22, 0x1846	; 0x801846 <xTickCount>
    2d76:	70 91 47 18 	lds	r23, 0x1847	; 0x801847 <xTickCount+0x1>
    2d7a:	80 91 48 18 	lds	r24, 0x1848	; 0x801848 <xTickCount+0x2>
    2d7e:	90 91 49 18 	lds	r25, 0x1849	; 0x801849 <xTickCount+0x3>
    2d82:	0f 90       	pop	r0
    2d84:	0f be       	out	0x3f, r0	; 63
    2d86:	08 95       	ret

00002d88 <xTaskIncrementTick>:
    2d88:	9f 92       	push	r9
    2d8a:	af 92       	push	r10
    2d8c:	bf 92       	push	r11
    2d8e:	cf 92       	push	r12
    2d90:	df 92       	push	r13
    2d92:	ef 92       	push	r14
    2d94:	ff 92       	push	r15
    2d96:	0f 93       	push	r16
    2d98:	1f 93       	push	r17
    2d9a:	cf 93       	push	r28
    2d9c:	df 93       	push	r29
    2d9e:	80 91 39 18 	lds	r24, 0x1839	; 0x801839 <uxSchedulerSuspended>
    2da2:	81 11       	cpse	r24, r1
    2da4:	ad c0       	rjmp	.+346    	; 0x2f00 <xTaskIncrementTick+0x178>
    2da6:	c0 90 46 18 	lds	r12, 0x1846	; 0x801846 <xTickCount>
    2daa:	d0 90 47 18 	lds	r13, 0x1847	; 0x801847 <xTickCount+0x1>
    2dae:	e0 90 48 18 	lds	r14, 0x1848	; 0x801848 <xTickCount+0x2>
    2db2:	f0 90 49 18 	lds	r15, 0x1849	; 0x801849 <xTickCount+0x3>
    2db6:	8f ef       	ldi	r24, 0xFF	; 255
    2db8:	c8 1a       	sub	r12, r24
    2dba:	d8 0a       	sbc	r13, r24
    2dbc:	e8 0a       	sbc	r14, r24
    2dbe:	f8 0a       	sbc	r15, r24
    2dc0:	c0 92 46 18 	sts	0x1846, r12	; 0x801846 <xTickCount>
    2dc4:	d0 92 47 18 	sts	0x1847, r13	; 0x801847 <xTickCount+0x1>
    2dc8:	e0 92 48 18 	sts	0x1848, r14	; 0x801848 <xTickCount+0x2>
    2dcc:	f0 92 49 18 	sts	0x1849, r15	; 0x801849 <xTickCount+0x3>
    2dd0:	c1 14       	cp	r12, r1
    2dd2:	d1 04       	cpc	r13, r1
    2dd4:	e1 04       	cpc	r14, r1
    2dd6:	f1 04       	cpc	r15, r1
    2dd8:	b1 f4       	brne	.+44     	; 0x2e06 <xTaskIncrementTick+0x7e>
    2dda:	80 91 6f 18 	lds	r24, 0x186F	; 0x80186f <pxDelayedTaskList>
    2dde:	90 91 70 18 	lds	r25, 0x1870	; 0x801870 <pxDelayedTaskList+0x1>
    2de2:	20 91 6d 18 	lds	r18, 0x186D	; 0x80186d <pxOverflowDelayedTaskList>
    2de6:	30 91 6e 18 	lds	r19, 0x186E	; 0x80186e <pxOverflowDelayedTaskList+0x1>
    2dea:	30 93 70 18 	sts	0x1870, r19	; 0x801870 <pxDelayedTaskList+0x1>
    2dee:	20 93 6f 18 	sts	0x186F, r18	; 0x80186f <pxDelayedTaskList>
    2df2:	90 93 6e 18 	sts	0x186E, r25	; 0x80186e <pxOverflowDelayedTaskList+0x1>
    2df6:	80 93 6d 18 	sts	0x186D, r24	; 0x80186d <pxOverflowDelayedTaskList>
    2dfa:	80 91 41 18 	lds	r24, 0x1841	; 0x801841 <xNumOfOverflows>
    2dfe:	8f 5f       	subi	r24, 0xFF	; 255
    2e00:	80 93 41 18 	sts	0x1841, r24	; 0x801841 <xNumOfOverflows>
    2e04:	af dd       	rcall	.-1186   	; 0x2964 <prvResetNextTaskUnblockTime>
    2e06:	80 91 3c 18 	lds	r24, 0x183C	; 0x80183c <xNextTaskUnblockTime>
    2e0a:	90 91 3d 18 	lds	r25, 0x183D	; 0x80183d <xNextTaskUnblockTime+0x1>
    2e0e:	a0 91 3e 18 	lds	r26, 0x183E	; 0x80183e <xNextTaskUnblockTime+0x2>
    2e12:	b0 91 3f 18 	lds	r27, 0x183F	; 0x80183f <xNextTaskUnblockTime+0x3>
    2e16:	c8 16       	cp	r12, r24
    2e18:	d9 06       	cpc	r13, r25
    2e1a:	ea 06       	cpc	r14, r26
    2e1c:	fb 06       	cpc	r15, r27
    2e1e:	10 f4       	brcc	.+4      	; 0x2e24 <xTaskIncrementTick+0x9c>
    2e20:	b1 2c       	mov	r11, r1
    2e22:	5d c0       	rjmp	.+186    	; 0x2ede <xTaskIncrementTick+0x156>
    2e24:	b1 2c       	mov	r11, r1
    2e26:	0f 2e       	mov	r0, r31
    2e28:	fb e0       	ldi	r31, 0x0B	; 11
    2e2a:	af 2e       	mov	r10, r31
    2e2c:	f0 2d       	mov	r31, r0
    2e2e:	99 24       	eor	r9, r9
    2e30:	93 94       	inc	r9
    2e32:	e0 91 6f 18 	lds	r30, 0x186F	; 0x80186f <pxDelayedTaskList>
    2e36:	f0 91 70 18 	lds	r31, 0x1870	; 0x801870 <pxDelayedTaskList+0x1>
    2e3a:	80 81       	ld	r24, Z
    2e3c:	81 11       	cpse	r24, r1
    2e3e:	0c c0       	rjmp	.+24     	; 0x2e58 <xTaskIncrementTick+0xd0>
    2e40:	8f ef       	ldi	r24, 0xFF	; 255
    2e42:	9f ef       	ldi	r25, 0xFF	; 255
    2e44:	dc 01       	movw	r26, r24
    2e46:	80 93 3c 18 	sts	0x183C, r24	; 0x80183c <xNextTaskUnblockTime>
    2e4a:	90 93 3d 18 	sts	0x183D, r25	; 0x80183d <xNextTaskUnblockTime+0x1>
    2e4e:	a0 93 3e 18 	sts	0x183E, r26	; 0x80183e <xNextTaskUnblockTime+0x2>
    2e52:	b0 93 3f 18 	sts	0x183F, r27	; 0x80183f <xNextTaskUnblockTime+0x3>
    2e56:	43 c0       	rjmp	.+134    	; 0x2ede <xTaskIncrementTick+0x156>
    2e58:	e0 91 6f 18 	lds	r30, 0x186F	; 0x80186f <pxDelayedTaskList>
    2e5c:	f0 91 70 18 	lds	r31, 0x1870	; 0x801870 <pxDelayedTaskList+0x1>
    2e60:	07 80       	ldd	r0, Z+7	; 0x07
    2e62:	f0 85       	ldd	r31, Z+8	; 0x08
    2e64:	e0 2d       	mov	r30, r0
    2e66:	c0 85       	ldd	r28, Z+8	; 0x08
    2e68:	d1 85       	ldd	r29, Z+9	; 0x09
    2e6a:	8a 81       	ldd	r24, Y+2	; 0x02
    2e6c:	9b 81       	ldd	r25, Y+3	; 0x03
    2e6e:	ac 81       	ldd	r26, Y+4	; 0x04
    2e70:	bd 81       	ldd	r27, Y+5	; 0x05
    2e72:	c8 16       	cp	r12, r24
    2e74:	d9 06       	cpc	r13, r25
    2e76:	ea 06       	cpc	r14, r26
    2e78:	fb 06       	cpc	r15, r27
    2e7a:	48 f4       	brcc	.+18     	; 0x2e8e <xTaskIncrementTick+0x106>
    2e7c:	80 93 3c 18 	sts	0x183C, r24	; 0x80183c <xNextTaskUnblockTime>
    2e80:	90 93 3d 18 	sts	0x183D, r25	; 0x80183d <xNextTaskUnblockTime+0x1>
    2e84:	a0 93 3e 18 	sts	0x183E, r26	; 0x80183e <xNextTaskUnblockTime+0x2>
    2e88:	b0 93 3f 18 	sts	0x183F, r27	; 0x80183f <xNextTaskUnblockTime+0x3>
    2e8c:	28 c0       	rjmp	.+80     	; 0x2ede <xTaskIncrementTick+0x156>
    2e8e:	8e 01       	movw	r16, r28
    2e90:	0e 5f       	subi	r16, 0xFE	; 254
    2e92:	1f 4f       	sbci	r17, 0xFF	; 255
    2e94:	c8 01       	movw	r24, r16
    2e96:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <uxListRemove>
    2e9a:	88 8d       	ldd	r24, Y+24	; 0x18
    2e9c:	99 8d       	ldd	r25, Y+25	; 0x19
    2e9e:	89 2b       	or	r24, r25
    2ea0:	21 f0       	breq	.+8      	; 0x2eaa <xTaskIncrementTick+0x122>
    2ea2:	ce 01       	movw	r24, r28
    2ea4:	0e 96       	adiw	r24, 0x0e	; 14
    2ea6:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <uxListRemove>
    2eaa:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2eac:	90 91 45 18 	lds	r25, 0x1845	; 0x801845 <uxTopReadyPriority>
    2eb0:	98 17       	cp	r25, r24
    2eb2:	10 f4       	brcc	.+4      	; 0x2eb8 <xTaskIncrementTick+0x130>
    2eb4:	80 93 45 18 	sts	0x1845, r24	; 0x801845 <uxTopReadyPriority>
    2eb8:	a8 9e       	mul	r10, r24
    2eba:	c0 01       	movw	r24, r0
    2ebc:	11 24       	eor	r1, r1
    2ebe:	b8 01       	movw	r22, r16
    2ec0:	89 57       	subi	r24, 0x79	; 121
    2ec2:	97 4e       	sbci	r25, 0xE7	; 231
    2ec4:	0e 94 1e 0c 	call	0x183c	; 0x183c <vListInsertEnd>
    2ec8:	e0 91 c9 18 	lds	r30, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    2ecc:	f0 91 ca 18 	lds	r31, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    2ed0:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2ed2:	82 8d       	ldd	r24, Z+26	; 0x1a
    2ed4:	98 17       	cp	r25, r24
    2ed6:	08 f4       	brcc	.+2      	; 0x2eda <xTaskIncrementTick+0x152>
    2ed8:	ac cf       	rjmp	.-168    	; 0x2e32 <xTaskIncrementTick+0xaa>
    2eda:	b9 2c       	mov	r11, r9
    2edc:	aa cf       	rjmp	.-172    	; 0x2e32 <xTaskIncrementTick+0xaa>
    2ede:	e0 91 c9 18 	lds	r30, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    2ee2:	f0 91 ca 18 	lds	r31, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    2ee6:	e2 8d       	ldd	r30, Z+26	; 0x1a
    2ee8:	8b e0       	ldi	r24, 0x0B	; 11
    2eea:	e8 9f       	mul	r30, r24
    2eec:	f0 01       	movw	r30, r0
    2eee:	11 24       	eor	r1, r1
    2ef0:	e9 57       	subi	r30, 0x79	; 121
    2ef2:	f7 4e       	sbci	r31, 0xE7	; 231
    2ef4:	80 81       	ld	r24, Z
    2ef6:	82 30       	cpi	r24, 0x02	; 2
    2ef8:	48 f0       	brcs	.+18     	; 0x2f0c <xTaskIncrementTick+0x184>
    2efa:	bb 24       	eor	r11, r11
    2efc:	b3 94       	inc	r11
    2efe:	06 c0       	rjmp	.+12     	; 0x2f0c <xTaskIncrementTick+0x184>
    2f00:	80 91 43 18 	lds	r24, 0x1843	; 0x801843 <uxPendedTicks>
    2f04:	8f 5f       	subi	r24, 0xFF	; 255
    2f06:	80 93 43 18 	sts	0x1843, r24	; 0x801843 <uxPendedTicks>
    2f0a:	b1 2c       	mov	r11, r1
    2f0c:	80 91 42 18 	lds	r24, 0x1842	; 0x801842 <xYieldPending>
    2f10:	88 23       	and	r24, r24
    2f12:	11 f0       	breq	.+4      	; 0x2f18 <xTaskIncrementTick+0x190>
    2f14:	bb 24       	eor	r11, r11
    2f16:	b3 94       	inc	r11
    2f18:	8b 2d       	mov	r24, r11
    2f1a:	df 91       	pop	r29
    2f1c:	cf 91       	pop	r28
    2f1e:	1f 91       	pop	r17
    2f20:	0f 91       	pop	r16
    2f22:	ff 90       	pop	r15
    2f24:	ef 90       	pop	r14
    2f26:	df 90       	pop	r13
    2f28:	cf 90       	pop	r12
    2f2a:	bf 90       	pop	r11
    2f2c:	af 90       	pop	r10
    2f2e:	9f 90       	pop	r9
    2f30:	08 95       	ret

00002f32 <xTaskResumeAll>:
    2f32:	cf 92       	push	r12
    2f34:	df 92       	push	r13
    2f36:	ef 92       	push	r14
    2f38:	ff 92       	push	r15
    2f3a:	0f 93       	push	r16
    2f3c:	1f 93       	push	r17
    2f3e:	cf 93       	push	r28
    2f40:	df 93       	push	r29
    2f42:	0f b6       	in	r0, 0x3f	; 63
    2f44:	f8 94       	cli
    2f46:	0f 92       	push	r0
    2f48:	80 91 39 18 	lds	r24, 0x1839	; 0x801839 <uxSchedulerSuspended>
    2f4c:	81 50       	subi	r24, 0x01	; 1
    2f4e:	80 93 39 18 	sts	0x1839, r24	; 0x801839 <uxSchedulerSuspended>
    2f52:	80 91 39 18 	lds	r24, 0x1839	; 0x801839 <uxSchedulerSuspended>
    2f56:	81 11       	cpse	r24, r1
    2f58:	5a c0       	rjmp	.+180    	; 0x300e <xTaskResumeAll+0xdc>
    2f5a:	80 91 4a 18 	lds	r24, 0x184A	; 0x80184a <uxCurrentNumberOfTasks>
    2f5e:	81 11       	cpse	r24, r1
    2f60:	2c c0       	rjmp	.+88     	; 0x2fba <xTaskResumeAll+0x88>
    2f62:	58 c0       	rjmp	.+176    	; 0x3014 <xTaskResumeAll+0xe2>
    2f64:	d7 01       	movw	r26, r14
    2f66:	17 96       	adiw	r26, 0x07	; 7
    2f68:	ed 91       	ld	r30, X+
    2f6a:	fc 91       	ld	r31, X
    2f6c:	18 97       	sbiw	r26, 0x08	; 8
    2f6e:	c0 85       	ldd	r28, Z+8	; 0x08
    2f70:	d1 85       	ldd	r29, Z+9	; 0x09
    2f72:	ce 01       	movw	r24, r28
    2f74:	0e 96       	adiw	r24, 0x0e	; 14
    2f76:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <uxListRemove>
    2f7a:	8e 01       	movw	r16, r28
    2f7c:	0e 5f       	subi	r16, 0xFE	; 254
    2f7e:	1f 4f       	sbci	r17, 0xFF	; 255
    2f80:	c8 01       	movw	r24, r16
    2f82:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <uxListRemove>
    2f86:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2f88:	90 91 45 18 	lds	r25, 0x1845	; 0x801845 <uxTopReadyPriority>
    2f8c:	98 17       	cp	r25, r24
    2f8e:	10 f4       	brcc	.+4      	; 0x2f94 <xTaskResumeAll+0x62>
    2f90:	80 93 45 18 	sts	0x1845, r24	; 0x801845 <uxTopReadyPriority>
    2f94:	d8 9e       	mul	r13, r24
    2f96:	c0 01       	movw	r24, r0
    2f98:	11 24       	eor	r1, r1
    2f9a:	b8 01       	movw	r22, r16
    2f9c:	89 57       	subi	r24, 0x79	; 121
    2f9e:	97 4e       	sbci	r25, 0xE7	; 231
    2fa0:	0e 94 1e 0c 	call	0x183c	; 0x183c <vListInsertEnd>
    2fa4:	e0 91 c9 18 	lds	r30, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    2fa8:	f0 91 ca 18 	lds	r31, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    2fac:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2fae:	82 8d       	ldd	r24, Z+26	; 0x1a
    2fb0:	98 17       	cp	r25, r24
    2fb2:	88 f0       	brcs	.+34     	; 0x2fd6 <xTaskResumeAll+0xa4>
    2fb4:	c0 92 42 18 	sts	0x1842, r12	; 0x801842 <xYieldPending>
    2fb8:	0e c0       	rjmp	.+28     	; 0x2fd6 <xTaskResumeAll+0xa4>
    2fba:	c0 e0       	ldi	r28, 0x00	; 0
    2fbc:	d0 e0       	ldi	r29, 0x00	; 0
    2fbe:	0f 2e       	mov	r0, r31
    2fc0:	f2 e6       	ldi	r31, 0x62	; 98
    2fc2:	ef 2e       	mov	r14, r31
    2fc4:	f8 e1       	ldi	r31, 0x18	; 24
    2fc6:	ff 2e       	mov	r15, r31
    2fc8:	f0 2d       	mov	r31, r0
    2fca:	0f 2e       	mov	r0, r31
    2fcc:	fb e0       	ldi	r31, 0x0B	; 11
    2fce:	df 2e       	mov	r13, r31
    2fd0:	f0 2d       	mov	r31, r0
    2fd2:	cc 24       	eor	r12, r12
    2fd4:	c3 94       	inc	r12
    2fd6:	f7 01       	movw	r30, r14
    2fd8:	80 81       	ld	r24, Z
    2fda:	81 11       	cpse	r24, r1
    2fdc:	c3 cf       	rjmp	.-122    	; 0x2f64 <xTaskResumeAll+0x32>
    2fde:	cd 2b       	or	r28, r29
    2fe0:	09 f0       	breq	.+2      	; 0x2fe4 <xTaskResumeAll+0xb2>
    2fe2:	c0 dc       	rcall	.-1664   	; 0x2964 <prvResetNextTaskUnblockTime>
    2fe4:	c0 91 43 18 	lds	r28, 0x1843	; 0x801843 <uxPendedTicks>
    2fe8:	cc 23       	and	r28, r28
    2fea:	49 f0       	breq	.+18     	; 0x2ffe <xTaskResumeAll+0xcc>
    2fec:	d1 e0       	ldi	r29, 0x01	; 1
    2fee:	cc de       	rcall	.-616    	; 0x2d88 <xTaskIncrementTick>
    2ff0:	81 11       	cpse	r24, r1
    2ff2:	d0 93 42 18 	sts	0x1842, r29	; 0x801842 <xYieldPending>
    2ff6:	c1 50       	subi	r28, 0x01	; 1
    2ff8:	d1 f7       	brne	.-12     	; 0x2fee <xTaskResumeAll+0xbc>
    2ffa:	10 92 43 18 	sts	0x1843, r1	; 0x801843 <uxPendedTicks>
    2ffe:	80 91 42 18 	lds	r24, 0x1842	; 0x801842 <xYieldPending>
    3002:	88 23       	and	r24, r24
    3004:	31 f0       	breq	.+12     	; 0x3012 <xTaskResumeAll+0xe0>
    3006:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <vPortYield>
    300a:	81 e0       	ldi	r24, 0x01	; 1
    300c:	03 c0       	rjmp	.+6      	; 0x3014 <xTaskResumeAll+0xe2>
    300e:	80 e0       	ldi	r24, 0x00	; 0
    3010:	01 c0       	rjmp	.+2      	; 0x3014 <xTaskResumeAll+0xe2>
    3012:	80 e0       	ldi	r24, 0x00	; 0
    3014:	0f 90       	pop	r0
    3016:	0f be       	out	0x3f, r0	; 63
    3018:	df 91       	pop	r29
    301a:	cf 91       	pop	r28
    301c:	1f 91       	pop	r17
    301e:	0f 91       	pop	r16
    3020:	ff 90       	pop	r15
    3022:	ef 90       	pop	r14
    3024:	df 90       	pop	r13
    3026:	cf 90       	pop	r12
    3028:	08 95       	ret

0000302a <vTaskDelay>:
    302a:	cf 92       	push	r12
    302c:	df 92       	push	r13
    302e:	ef 92       	push	r14
    3030:	ff 92       	push	r15
    3032:	6b 01       	movw	r12, r22
    3034:	7c 01       	movw	r14, r24
    3036:	67 2b       	or	r22, r23
    3038:	68 2b       	or	r22, r24
    303a:	69 2b       	or	r22, r25
    303c:	41 f0       	breq	.+16     	; 0x304e <vTaskDelay+0x24>
    303e:	90 de       	rcall	.-736    	; 0x2d60 <vTaskSuspendAll>
    3040:	40 e0       	ldi	r20, 0x00	; 0
    3042:	c7 01       	movw	r24, r14
    3044:	b6 01       	movw	r22, r12
    3046:	b8 dc       	rcall	.-1680   	; 0x29b8 <prvAddCurrentTaskToDelayedList>
    3048:	74 df       	rcall	.-280    	; 0x2f32 <xTaskResumeAll>
    304a:	81 11       	cpse	r24, r1
    304c:	02 c0       	rjmp	.+4      	; 0x3052 <vTaskDelay+0x28>
    304e:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <vPortYield>
    3052:	ff 90       	pop	r15
    3054:	ef 90       	pop	r14
    3056:	df 90       	pop	r13
    3058:	cf 90       	pop	r12
    305a:	08 95       	ret

0000305c <vTaskSwitchContext>:
    305c:	80 91 39 18 	lds	r24, 0x1839	; 0x801839 <uxSchedulerSuspended>
    3060:	88 23       	and	r24, r24
    3062:	21 f0       	breq	.+8      	; 0x306c <vTaskSwitchContext+0x10>
    3064:	81 e0       	ldi	r24, 0x01	; 1
    3066:	80 93 42 18 	sts	0x1842, r24	; 0x801842 <xYieldPending>
    306a:	08 95       	ret
    306c:	10 92 42 18 	sts	0x1842, r1	; 0x801842 <xYieldPending>
    3070:	e0 91 c9 18 	lds	r30, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    3074:	f0 91 ca 18 	lds	r31, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    3078:	81 a5       	ldd	r24, Z+41	; 0x29
    307a:	0e 94 60 09 	call	0x12c0	; 0x12c0 <task_switch_out>
    307e:	a0 91 c9 18 	lds	r26, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    3082:	b0 91 ca 18 	lds	r27, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    3086:	e0 91 c9 18 	lds	r30, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    308a:	f0 91 ca 18 	lds	r31, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    308e:	2d 91       	ld	r18, X+
    3090:	3c 91       	ld	r19, X
    3092:	83 8d       	ldd	r24, Z+27	; 0x1b
    3094:	94 8d       	ldd	r25, Z+28	; 0x1c
    3096:	82 17       	cp	r24, r18
    3098:	93 07       	cpc	r25, r19
    309a:	58 f0       	brcs	.+22     	; 0x30b2 <vTaskSwitchContext+0x56>
    309c:	60 91 c9 18 	lds	r22, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    30a0:	70 91 ca 18 	lds	r23, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    30a4:	80 91 c9 18 	lds	r24, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    30a8:	90 91 ca 18 	lds	r25, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    30ac:	63 5e       	subi	r22, 0xE3	; 227
    30ae:	7f 4f       	sbci	r23, 0xFF	; 255
    30b0:	22 d6       	rcall	.+3140   	; 0x3cf6 <vApplicationStackOverflowHook>
    30b2:	80 91 45 18 	lds	r24, 0x1845	; 0x801845 <uxTopReadyPriority>
    30b6:	28 2f       	mov	r18, r24
    30b8:	30 e0       	ldi	r19, 0x00	; 0
    30ba:	9b e0       	ldi	r25, 0x0B	; 11
    30bc:	89 9f       	mul	r24, r25
    30be:	f0 01       	movw	r30, r0
    30c0:	11 24       	eor	r1, r1
    30c2:	e9 57       	subi	r30, 0x79	; 121
    30c4:	f7 4e       	sbci	r31, 0xE7	; 231
    30c6:	90 81       	ld	r25, Z
    30c8:	91 11       	cpse	r25, r1
    30ca:	0e c0       	rjmp	.+28     	; 0x30e8 <vTaskSwitchContext+0x8c>
    30cc:	4b e0       	ldi	r20, 0x0B	; 11
    30ce:	81 50       	subi	r24, 0x01	; 1
    30d0:	28 2f       	mov	r18, r24
    30d2:	30 e0       	ldi	r19, 0x00	; 0
    30d4:	42 9f       	mul	r20, r18
    30d6:	f0 01       	movw	r30, r0
    30d8:	43 9f       	mul	r20, r19
    30da:	f0 0d       	add	r31, r0
    30dc:	11 24       	eor	r1, r1
    30de:	e9 57       	subi	r30, 0x79	; 121
    30e0:	f7 4e       	sbci	r31, 0xE7	; 231
    30e2:	90 81       	ld	r25, Z
    30e4:	99 23       	and	r25, r25
    30e6:	99 f3       	breq	.-26     	; 0x30ce <vTaskSwitchContext+0x72>
    30e8:	9b e0       	ldi	r25, 0x0B	; 11
    30ea:	92 9f       	mul	r25, r18
    30ec:	a0 01       	movw	r20, r0
    30ee:	93 9f       	mul	r25, r19
    30f0:	50 0d       	add	r21, r0
    30f2:	11 24       	eor	r1, r1
    30f4:	da 01       	movw	r26, r20
    30f6:	a9 57       	subi	r26, 0x79	; 121
    30f8:	b7 4e       	sbci	r27, 0xE7	; 231
    30fa:	11 96       	adiw	r26, 0x01	; 1
    30fc:	ed 91       	ld	r30, X+
    30fe:	fc 91       	ld	r31, X
    3100:	12 97       	sbiw	r26, 0x02	; 2
    3102:	04 80       	ldd	r0, Z+4	; 0x04
    3104:	f5 81       	ldd	r31, Z+5	; 0x05
    3106:	e0 2d       	mov	r30, r0
    3108:	12 96       	adiw	r26, 0x02	; 2
    310a:	fc 93       	st	X, r31
    310c:	ee 93       	st	-X, r30
    310e:	11 97       	sbiw	r26, 0x01	; 1
    3110:	46 57       	subi	r20, 0x76	; 118
    3112:	57 4e       	sbci	r21, 0xE7	; 231
    3114:	e4 17       	cp	r30, r20
    3116:	f5 07       	cpc	r31, r21
    3118:	29 f4       	brne	.+10     	; 0x3124 <vTaskSwitchContext+0xc8>
    311a:	44 81       	ldd	r20, Z+4	; 0x04
    311c:	55 81       	ldd	r21, Z+5	; 0x05
    311e:	fd 01       	movw	r30, r26
    3120:	52 83       	std	Z+2, r21	; 0x02
    3122:	41 83       	std	Z+1, r20	; 0x01
    3124:	9b e0       	ldi	r25, 0x0B	; 11
    3126:	92 9f       	mul	r25, r18
    3128:	f0 01       	movw	r30, r0
    312a:	93 9f       	mul	r25, r19
    312c:	f0 0d       	add	r31, r0
    312e:	11 24       	eor	r1, r1
    3130:	e9 57       	subi	r30, 0x79	; 121
    3132:	f7 4e       	sbci	r31, 0xE7	; 231
    3134:	01 80       	ldd	r0, Z+1	; 0x01
    3136:	f2 81       	ldd	r31, Z+2	; 0x02
    3138:	e0 2d       	mov	r30, r0
    313a:	20 85       	ldd	r18, Z+8	; 0x08
    313c:	31 85       	ldd	r19, Z+9	; 0x09
    313e:	30 93 ca 18 	sts	0x18CA, r19	; 0x8018ca <pxCurrentTCB+0x1>
    3142:	20 93 c9 18 	sts	0x18C9, r18	; 0x8018c9 <pxCurrentTCB>
    3146:	80 93 45 18 	sts	0x1845, r24	; 0x801845 <uxTopReadyPriority>
    314a:	e0 91 c9 18 	lds	r30, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    314e:	f0 91 ca 18 	lds	r31, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    3152:	81 a5       	ldd	r24, Z+41	; 0x29
    3154:	0c 94 56 09 	jmp	0x12ac	; 0x12ac <task_switch_in>
    3158:	08 95       	ret

0000315a <vTaskPlaceOnEventList>:
    315a:	cf 92       	push	r12
    315c:	df 92       	push	r13
    315e:	ef 92       	push	r14
    3160:	ff 92       	push	r15
    3162:	6a 01       	movw	r12, r20
    3164:	7b 01       	movw	r14, r22
    3166:	60 91 c9 18 	lds	r22, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    316a:	70 91 ca 18 	lds	r23, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    316e:	62 5f       	subi	r22, 0xF2	; 242
    3170:	7f 4f       	sbci	r23, 0xFF	; 255
    3172:	0e 94 3f 0c 	call	0x187e	; 0x187e <vListInsert>
    3176:	41 e0       	ldi	r20, 0x01	; 1
    3178:	c7 01       	movw	r24, r14
    317a:	b6 01       	movw	r22, r12
    317c:	1d dc       	rcall	.-1990   	; 0x29b8 <prvAddCurrentTaskToDelayedList>
    317e:	ff 90       	pop	r15
    3180:	ef 90       	pop	r14
    3182:	df 90       	pop	r13
    3184:	cf 90       	pop	r12
    3186:	08 95       	ret

00003188 <vTaskPlaceOnUnorderedEventList>:
    3188:	cf 92       	push	r12
    318a:	df 92       	push	r13
    318c:	ef 92       	push	r14
    318e:	ff 92       	push	r15
    3190:	0f 93       	push	r16
    3192:	1f 93       	push	r17
    3194:	68 01       	movw	r12, r16
    3196:	79 01       	movw	r14, r18
    3198:	e0 91 c9 18 	lds	r30, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    319c:	f0 91 ca 18 	lds	r31, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    31a0:	70 68       	ori	r23, 0x80	; 128
    31a2:	46 87       	std	Z+14, r20	; 0x0e
    31a4:	57 87       	std	Z+15, r21	; 0x0f
    31a6:	60 8b       	std	Z+16, r22	; 0x10
    31a8:	71 8b       	std	Z+17, r23	; 0x11
    31aa:	60 91 c9 18 	lds	r22, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    31ae:	70 91 ca 18 	lds	r23, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    31b2:	62 5f       	subi	r22, 0xF2	; 242
    31b4:	7f 4f       	sbci	r23, 0xFF	; 255
    31b6:	0e 94 1e 0c 	call	0x183c	; 0x183c <vListInsertEnd>
    31ba:	41 e0       	ldi	r20, 0x01	; 1
    31bc:	c7 01       	movw	r24, r14
    31be:	b6 01       	movw	r22, r12
    31c0:	fb db       	rcall	.-2058   	; 0x29b8 <prvAddCurrentTaskToDelayedList>
    31c2:	1f 91       	pop	r17
    31c4:	0f 91       	pop	r16
    31c6:	ff 90       	pop	r15
    31c8:	ef 90       	pop	r14
    31ca:	df 90       	pop	r13
    31cc:	cf 90       	pop	r12
    31ce:	08 95       	ret

000031d0 <vTaskPlaceOnEventListRestricted>:
    31d0:	cf 92       	push	r12
    31d2:	df 92       	push	r13
    31d4:	ef 92       	push	r14
    31d6:	ff 92       	push	r15
    31d8:	cf 93       	push	r28
    31da:	6a 01       	movw	r12, r20
    31dc:	7b 01       	movw	r14, r22
    31de:	c2 2f       	mov	r28, r18
    31e0:	60 91 c9 18 	lds	r22, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    31e4:	70 91 ca 18 	lds	r23, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    31e8:	62 5f       	subi	r22, 0xF2	; 242
    31ea:	7f 4f       	sbci	r23, 0xFF	; 255
    31ec:	0e 94 1e 0c 	call	0x183c	; 0x183c <vListInsertEnd>
    31f0:	cc 23       	and	r28, r28
    31f2:	21 f0       	breq	.+8      	; 0x31fc <vTaskPlaceOnEventListRestricted+0x2c>
    31f4:	cc 24       	eor	r12, r12
    31f6:	ca 94       	dec	r12
    31f8:	dc 2c       	mov	r13, r12
    31fa:	76 01       	movw	r14, r12
    31fc:	4c 2f       	mov	r20, r28
    31fe:	c7 01       	movw	r24, r14
    3200:	b6 01       	movw	r22, r12
    3202:	da db       	rcall	.-2124   	; 0x29b8 <prvAddCurrentTaskToDelayedList>
    3204:	cf 91       	pop	r28
    3206:	ff 90       	pop	r15
    3208:	ef 90       	pop	r14
    320a:	df 90       	pop	r13
    320c:	cf 90       	pop	r12
    320e:	08 95       	ret

00003210 <xTaskRemoveFromEventList>:
    3210:	0f 93       	push	r16
    3212:	1f 93       	push	r17
    3214:	cf 93       	push	r28
    3216:	df 93       	push	r29
    3218:	dc 01       	movw	r26, r24
    321a:	17 96       	adiw	r26, 0x07	; 7
    321c:	ed 91       	ld	r30, X+
    321e:	fc 91       	ld	r31, X
    3220:	18 97       	sbiw	r26, 0x08	; 8
    3222:	c0 85       	ldd	r28, Z+8	; 0x08
    3224:	d1 85       	ldd	r29, Z+9	; 0x09
    3226:	8e 01       	movw	r16, r28
    3228:	02 5f       	subi	r16, 0xF2	; 242
    322a:	1f 4f       	sbci	r17, 0xFF	; 255
    322c:	c8 01       	movw	r24, r16
    322e:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <uxListRemove>
    3232:	80 91 39 18 	lds	r24, 0x1839	; 0x801839 <uxSchedulerSuspended>
    3236:	81 11       	cpse	r24, r1
    3238:	16 c0       	rjmp	.+44     	; 0x3266 <xTaskRemoveFromEventList+0x56>
    323a:	0c 50       	subi	r16, 0x0C	; 12
    323c:	11 09       	sbc	r17, r1
    323e:	c8 01       	movw	r24, r16
    3240:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <uxListRemove>
    3244:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3246:	90 91 45 18 	lds	r25, 0x1845	; 0x801845 <uxTopReadyPriority>
    324a:	98 17       	cp	r25, r24
    324c:	10 f4       	brcc	.+4      	; 0x3252 <xTaskRemoveFromEventList+0x42>
    324e:	80 93 45 18 	sts	0x1845, r24	; 0x801845 <uxTopReadyPriority>
    3252:	bb e0       	ldi	r27, 0x0B	; 11
    3254:	8b 9f       	mul	r24, r27
    3256:	c0 01       	movw	r24, r0
    3258:	11 24       	eor	r1, r1
    325a:	b8 01       	movw	r22, r16
    325c:	89 57       	subi	r24, 0x79	; 121
    325e:	97 4e       	sbci	r25, 0xE7	; 231
    3260:	0e 94 1e 0c 	call	0x183c	; 0x183c <vListInsertEnd>
    3264:	05 c0       	rjmp	.+10     	; 0x3270 <xTaskRemoveFromEventList+0x60>
    3266:	b8 01       	movw	r22, r16
    3268:	82 e6       	ldi	r24, 0x62	; 98
    326a:	98 e1       	ldi	r25, 0x18	; 24
    326c:	0e 94 1e 0c 	call	0x183c	; 0x183c <vListInsertEnd>
    3270:	e0 91 c9 18 	lds	r30, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    3274:	f0 91 ca 18 	lds	r31, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    3278:	9a 8d       	ldd	r25, Y+26	; 0x1a
    327a:	82 8d       	ldd	r24, Z+26	; 0x1a
    327c:	89 17       	cp	r24, r25
    327e:	20 f4       	brcc	.+8      	; 0x3288 <xTaskRemoveFromEventList+0x78>
    3280:	81 e0       	ldi	r24, 0x01	; 1
    3282:	80 93 42 18 	sts	0x1842, r24	; 0x801842 <xYieldPending>
    3286:	01 c0       	rjmp	.+2      	; 0x328a <xTaskRemoveFromEventList+0x7a>
    3288:	80 e0       	ldi	r24, 0x00	; 0
    328a:	df 91       	pop	r29
    328c:	cf 91       	pop	r28
    328e:	1f 91       	pop	r17
    3290:	0f 91       	pop	r16
    3292:	08 95       	ret

00003294 <vTaskRemoveFromUnorderedEventList>:
    3294:	0f 93       	push	r16
    3296:	1f 93       	push	r17
    3298:	cf 93       	push	r28
    329a:	df 93       	push	r29
    329c:	70 68       	ori	r23, 0x80	; 128
    329e:	fc 01       	movw	r30, r24
    32a0:	40 83       	st	Z, r20
    32a2:	51 83       	std	Z+1, r21	; 0x01
    32a4:	62 83       	std	Z+2, r22	; 0x02
    32a6:	73 83       	std	Z+3, r23	; 0x03
    32a8:	c0 85       	ldd	r28, Z+8	; 0x08
    32aa:	d1 85       	ldd	r29, Z+9	; 0x09
    32ac:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <uxListRemove>
    32b0:	8e 01       	movw	r16, r28
    32b2:	0e 5f       	subi	r16, 0xFE	; 254
    32b4:	1f 4f       	sbci	r17, 0xFF	; 255
    32b6:	c8 01       	movw	r24, r16
    32b8:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <uxListRemove>
    32bc:	8a 8d       	ldd	r24, Y+26	; 0x1a
    32be:	90 91 45 18 	lds	r25, 0x1845	; 0x801845 <uxTopReadyPriority>
    32c2:	98 17       	cp	r25, r24
    32c4:	10 f4       	brcc	.+4      	; 0x32ca <vTaskRemoveFromUnorderedEventList+0x36>
    32c6:	80 93 45 18 	sts	0x1845, r24	; 0x801845 <uxTopReadyPriority>
    32ca:	fb e0       	ldi	r31, 0x0B	; 11
    32cc:	8f 9f       	mul	r24, r31
    32ce:	c0 01       	movw	r24, r0
    32d0:	11 24       	eor	r1, r1
    32d2:	b8 01       	movw	r22, r16
    32d4:	89 57       	subi	r24, 0x79	; 121
    32d6:	97 4e       	sbci	r25, 0xE7	; 231
    32d8:	0e 94 1e 0c 	call	0x183c	; 0x183c <vListInsertEnd>
    32dc:	e0 91 c9 18 	lds	r30, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    32e0:	f0 91 ca 18 	lds	r31, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    32e4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    32e6:	82 8d       	ldd	r24, Z+26	; 0x1a
    32e8:	89 17       	cp	r24, r25
    32ea:	18 f4       	brcc	.+6      	; 0x32f2 <vTaskRemoveFromUnorderedEventList+0x5e>
    32ec:	81 e0       	ldi	r24, 0x01	; 1
    32ee:	80 93 42 18 	sts	0x1842, r24	; 0x801842 <xYieldPending>
    32f2:	df 91       	pop	r29
    32f4:	cf 91       	pop	r28
    32f6:	1f 91       	pop	r17
    32f8:	0f 91       	pop	r16
    32fa:	08 95       	ret

000032fc <vTaskSetTimeOutState>:
    32fc:	0f b6       	in	r0, 0x3f	; 63
    32fe:	f8 94       	cli
    3300:	0f 92       	push	r0
    3302:	20 91 41 18 	lds	r18, 0x1841	; 0x801841 <xNumOfOverflows>
    3306:	fc 01       	movw	r30, r24
    3308:	20 83       	st	Z, r18
    330a:	40 91 46 18 	lds	r20, 0x1846	; 0x801846 <xTickCount>
    330e:	50 91 47 18 	lds	r21, 0x1847	; 0x801847 <xTickCount+0x1>
    3312:	60 91 48 18 	lds	r22, 0x1848	; 0x801848 <xTickCount+0x2>
    3316:	70 91 49 18 	lds	r23, 0x1849	; 0x801849 <xTickCount+0x3>
    331a:	41 83       	std	Z+1, r20	; 0x01
    331c:	52 83       	std	Z+2, r21	; 0x02
    331e:	63 83       	std	Z+3, r22	; 0x03
    3320:	74 83       	std	Z+4, r23	; 0x04
    3322:	0f 90       	pop	r0
    3324:	0f be       	out	0x3f, r0	; 63
    3326:	08 95       	ret

00003328 <vTaskInternalSetTimeOutState>:
    3328:	20 91 41 18 	lds	r18, 0x1841	; 0x801841 <xNumOfOverflows>
    332c:	fc 01       	movw	r30, r24
    332e:	20 83       	st	Z, r18
    3330:	40 91 46 18 	lds	r20, 0x1846	; 0x801846 <xTickCount>
    3334:	50 91 47 18 	lds	r21, 0x1847	; 0x801847 <xTickCount+0x1>
    3338:	60 91 48 18 	lds	r22, 0x1848	; 0x801848 <xTickCount+0x2>
    333c:	70 91 49 18 	lds	r23, 0x1849	; 0x801849 <xTickCount+0x3>
    3340:	41 83       	std	Z+1, r20	; 0x01
    3342:	52 83       	std	Z+2, r21	; 0x02
    3344:	63 83       	std	Z+3, r22	; 0x03
    3346:	74 83       	std	Z+4, r23	; 0x04
    3348:	08 95       	ret

0000334a <xTaskCheckForTimeOut>:
    334a:	cf 92       	push	r12
    334c:	df 92       	push	r13
    334e:	ef 92       	push	r14
    3350:	ff 92       	push	r15
    3352:	0f 93       	push	r16
    3354:	1f 93       	push	r17
    3356:	cf 93       	push	r28
    3358:	df 93       	push	r29
    335a:	fb 01       	movw	r30, r22
    335c:	0f b6       	in	r0, 0x3f	; 63
    335e:	f8 94       	cli
    3360:	0f 92       	push	r0
    3362:	40 91 46 18 	lds	r20, 0x1846	; 0x801846 <xTickCount>
    3366:	50 91 47 18 	lds	r21, 0x1847	; 0x801847 <xTickCount+0x1>
    336a:	60 91 48 18 	lds	r22, 0x1848	; 0x801848 <xTickCount+0x2>
    336e:	70 91 49 18 	lds	r23, 0x1849	; 0x801849 <xTickCount+0x3>
    3372:	00 81       	ld	r16, Z
    3374:	11 81       	ldd	r17, Z+1	; 0x01
    3376:	22 81       	ldd	r18, Z+2	; 0x02
    3378:	33 81       	ldd	r19, Z+3	; 0x03
    337a:	0f 3f       	cpi	r16, 0xFF	; 255
    337c:	af ef       	ldi	r26, 0xFF	; 255
    337e:	1a 07       	cpc	r17, r26
    3380:	2a 07       	cpc	r18, r26
    3382:	3a 07       	cpc	r19, r26
    3384:	49 f1       	breq	.+82     	; 0x33d8 <xTaskCheckForTimeOut+0x8e>
    3386:	ec 01       	movw	r28, r24
    3388:	c9 80       	ldd	r12, Y+1	; 0x01
    338a:	da 80       	ldd	r13, Y+2	; 0x02
    338c:	eb 80       	ldd	r14, Y+3	; 0x03
    338e:	fc 80       	ldd	r15, Y+4	; 0x04
    3390:	a0 91 41 18 	lds	r26, 0x1841	; 0x801841 <xNumOfOverflows>
    3394:	b8 81       	ld	r27, Y
    3396:	ba 17       	cp	r27, r26
    3398:	29 f0       	breq	.+10     	; 0x33a4 <xTaskCheckForTimeOut+0x5a>
    339a:	4c 15       	cp	r20, r12
    339c:	5d 05       	cpc	r21, r13
    339e:	6e 05       	cpc	r22, r14
    33a0:	7f 05       	cpc	r23, r15
    33a2:	e0 f4       	brcc	.+56     	; 0x33dc <xTaskCheckForTimeOut+0x92>
    33a4:	4c 19       	sub	r20, r12
    33a6:	5d 09       	sbc	r21, r13
    33a8:	6e 09       	sbc	r22, r14
    33aa:	7f 09       	sbc	r23, r15
    33ac:	40 17       	cp	r20, r16
    33ae:	51 07       	cpc	r21, r17
    33b0:	62 07       	cpc	r22, r18
    33b2:	73 07       	cpc	r23, r19
    33b4:	58 f4       	brcc	.+22     	; 0x33cc <xTaskCheckForTimeOut+0x82>
    33b6:	04 1b       	sub	r16, r20
    33b8:	15 0b       	sbc	r17, r21
    33ba:	26 0b       	sbc	r18, r22
    33bc:	37 0b       	sbc	r19, r23
    33be:	00 83       	st	Z, r16
    33c0:	11 83       	std	Z+1, r17	; 0x01
    33c2:	22 83       	std	Z+2, r18	; 0x02
    33c4:	33 83       	std	Z+3, r19	; 0x03
    33c6:	b0 df       	rcall	.-160    	; 0x3328 <vTaskInternalSetTimeOutState>
    33c8:	80 e0       	ldi	r24, 0x00	; 0
    33ca:	09 c0       	rjmp	.+18     	; 0x33de <xTaskCheckForTimeOut+0x94>
    33cc:	10 82       	st	Z, r1
    33ce:	11 82       	std	Z+1, r1	; 0x01
    33d0:	12 82       	std	Z+2, r1	; 0x02
    33d2:	13 82       	std	Z+3, r1	; 0x03
    33d4:	81 e0       	ldi	r24, 0x01	; 1
    33d6:	03 c0       	rjmp	.+6      	; 0x33de <xTaskCheckForTimeOut+0x94>
    33d8:	80 e0       	ldi	r24, 0x00	; 0
    33da:	01 c0       	rjmp	.+2      	; 0x33de <xTaskCheckForTimeOut+0x94>
    33dc:	81 e0       	ldi	r24, 0x01	; 1
    33de:	0f 90       	pop	r0
    33e0:	0f be       	out	0x3f, r0	; 63
    33e2:	df 91       	pop	r29
    33e4:	cf 91       	pop	r28
    33e6:	1f 91       	pop	r17
    33e8:	0f 91       	pop	r16
    33ea:	ff 90       	pop	r15
    33ec:	ef 90       	pop	r14
    33ee:	df 90       	pop	r13
    33f0:	cf 90       	pop	r12
    33f2:	08 95       	ret

000033f4 <vTaskMissedYield>:
    33f4:	81 e0       	ldi	r24, 0x01	; 1
    33f6:	80 93 42 18 	sts	0x1842, r24	; 0x801842 <xYieldPending>
    33fa:	08 95       	ret

000033fc <xTaskGetCurrentTaskHandle>:
    33fc:	80 91 c9 18 	lds	r24, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    3400:	90 91 ca 18 	lds	r25, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    3404:	08 95       	ret

00003406 <xTaskGetSchedulerState>:
    3406:	80 91 44 18 	lds	r24, 0x1844	; 0x801844 <xSchedulerRunning>
    340a:	88 23       	and	r24, r24
    340c:	31 f0       	breq	.+12     	; 0x341a <xTaskGetSchedulerState+0x14>
    340e:	80 91 39 18 	lds	r24, 0x1839	; 0x801839 <uxSchedulerSuspended>
    3412:	88 23       	and	r24, r24
    3414:	21 f0       	breq	.+8      	; 0x341e <xTaskGetSchedulerState+0x18>
    3416:	80 e0       	ldi	r24, 0x00	; 0
    3418:	08 95       	ret
    341a:	81 e0       	ldi	r24, 0x01	; 1
    341c:	08 95       	ret
    341e:	82 e0       	ldi	r24, 0x02	; 2
    3420:	08 95       	ret

00003422 <xTaskPriorityInherit>:
    3422:	0f 93       	push	r16
    3424:	1f 93       	push	r17
    3426:	cf 93       	push	r28
    3428:	df 93       	push	r29
    342a:	fc 01       	movw	r30, r24
    342c:	89 2b       	or	r24, r25
    342e:	09 f4       	brne	.+2      	; 0x3432 <xTaskPriorityInherit+0x10>
    3430:	60 c0       	rjmp	.+192    	; 0x34f2 <xTaskPriorityInherit+0xd0>
    3432:	82 8d       	ldd	r24, Z+26	; 0x1a
    3434:	a0 91 c9 18 	lds	r26, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    3438:	b0 91 ca 18 	lds	r27, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    343c:	5a 96       	adiw	r26, 0x1a	; 26
    343e:	9c 91       	ld	r25, X
    3440:	89 17       	cp	r24, r25
    3442:	08 f0       	brcs	.+2      	; 0x3446 <xTaskPriorityInherit+0x24>
    3444:	4a c0       	rjmp	.+148    	; 0x34da <xTaskPriorityInherit+0xb8>
    3446:	46 85       	ldd	r20, Z+14	; 0x0e
    3448:	57 85       	ldd	r21, Z+15	; 0x0f
    344a:	60 89       	ldd	r22, Z+16	; 0x10
    344c:	71 89       	ldd	r23, Z+17	; 0x11
    344e:	77 23       	and	r23, r23
    3450:	94 f0       	brlt	.+36     	; 0x3476 <xTaskPriorityInherit+0x54>
    3452:	a0 91 c9 18 	lds	r26, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    3456:	b0 91 ca 18 	lds	r27, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    345a:	5a 96       	adiw	r26, 0x1a	; 26
    345c:	9c 91       	ld	r25, X
    345e:	46 e0       	ldi	r20, 0x06	; 6
    3460:	50 e0       	ldi	r21, 0x00	; 0
    3462:	60 e0       	ldi	r22, 0x00	; 0
    3464:	70 e0       	ldi	r23, 0x00	; 0
    3466:	49 1b       	sub	r20, r25
    3468:	51 09       	sbc	r21, r1
    346a:	61 09       	sbc	r22, r1
    346c:	71 09       	sbc	r23, r1
    346e:	46 87       	std	Z+14, r20	; 0x0e
    3470:	57 87       	std	Z+15, r21	; 0x0f
    3472:	60 8b       	std	Z+16, r22	; 0x10
    3474:	71 8b       	std	Z+17, r23	; 0x11
    3476:	2b e0       	ldi	r18, 0x0B	; 11
    3478:	82 9f       	mul	r24, r18
    347a:	c0 01       	movw	r24, r0
    347c:	11 24       	eor	r1, r1
    347e:	89 57       	subi	r24, 0x79	; 121
    3480:	97 4e       	sbci	r25, 0xE7	; 231
    3482:	24 85       	ldd	r18, Z+12	; 0x0c
    3484:	35 85       	ldd	r19, Z+13	; 0x0d
    3486:	28 17       	cp	r18, r24
    3488:	39 07       	cpc	r19, r25
    348a:	f1 f4       	brne	.+60     	; 0x34c8 <xTaskPriorityInherit+0xa6>
    348c:	8f 01       	movw	r16, r30
    348e:	ef 01       	movw	r28, r30
    3490:	22 96       	adiw	r28, 0x02	; 2
    3492:	ce 01       	movw	r24, r28
    3494:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <uxListRemove>
    3498:	e0 91 c9 18 	lds	r30, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    349c:	f0 91 ca 18 	lds	r31, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    34a0:	82 8d       	ldd	r24, Z+26	; 0x1a
    34a2:	f8 01       	movw	r30, r16
    34a4:	82 8f       	std	Z+26, r24	; 0x1a
    34a6:	90 91 45 18 	lds	r25, 0x1845	; 0x801845 <uxTopReadyPriority>
    34aa:	98 17       	cp	r25, r24
    34ac:	10 f4       	brcc	.+4      	; 0x34b2 <xTaskPriorityInherit+0x90>
    34ae:	80 93 45 18 	sts	0x1845, r24	; 0x801845 <uxTopReadyPriority>
    34b2:	fb e0       	ldi	r31, 0x0B	; 11
    34b4:	8f 9f       	mul	r24, r31
    34b6:	c0 01       	movw	r24, r0
    34b8:	11 24       	eor	r1, r1
    34ba:	be 01       	movw	r22, r28
    34bc:	89 57       	subi	r24, 0x79	; 121
    34be:	97 4e       	sbci	r25, 0xE7	; 231
    34c0:	0e 94 1e 0c 	call	0x183c	; 0x183c <vListInsertEnd>
    34c4:	81 e0       	ldi	r24, 0x01	; 1
    34c6:	16 c0       	rjmp	.+44     	; 0x34f4 <xTaskPriorityInherit+0xd2>
    34c8:	a0 91 c9 18 	lds	r26, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    34cc:	b0 91 ca 18 	lds	r27, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    34d0:	5a 96       	adiw	r26, 0x1a	; 26
    34d2:	8c 91       	ld	r24, X
    34d4:	82 8f       	std	Z+26, r24	; 0x1a
    34d6:	81 e0       	ldi	r24, 0x01	; 1
    34d8:	0d c0       	rjmp	.+26     	; 0x34f4 <xTaskPriorityInherit+0xd2>
    34da:	a0 91 c9 18 	lds	r26, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    34de:	b0 91 ca 18 	lds	r27, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    34e2:	81 e0       	ldi	r24, 0x01	; 1
    34e4:	27 a1       	ldd	r18, Z+39	; 0x27
    34e6:	5a 96       	adiw	r26, 0x1a	; 26
    34e8:	9c 91       	ld	r25, X
    34ea:	29 17       	cp	r18, r25
    34ec:	18 f0       	brcs	.+6      	; 0x34f4 <xTaskPriorityInherit+0xd2>
    34ee:	80 e0       	ldi	r24, 0x00	; 0
    34f0:	01 c0       	rjmp	.+2      	; 0x34f4 <xTaskPriorityInherit+0xd2>
    34f2:	80 e0       	ldi	r24, 0x00	; 0
    34f4:	df 91       	pop	r29
    34f6:	cf 91       	pop	r28
    34f8:	1f 91       	pop	r17
    34fa:	0f 91       	pop	r16
    34fc:	08 95       	ret

000034fe <xTaskPriorityDisinherit>:
    34fe:	0f 93       	push	r16
    3500:	1f 93       	push	r17
    3502:	cf 93       	push	r28
    3504:	df 93       	push	r29
    3506:	fc 01       	movw	r30, r24
    3508:	89 2b       	or	r24, r25
    350a:	79 f1       	breq	.+94     	; 0x356a <xTaskPriorityDisinherit+0x6c>
    350c:	80 a5       	ldd	r24, Z+40	; 0x28
    350e:	81 50       	subi	r24, 0x01	; 1
    3510:	80 a7       	std	Z+40, r24	; 0x28
    3512:	22 8d       	ldd	r18, Z+26	; 0x1a
    3514:	97 a1       	ldd	r25, Z+39	; 0x27
    3516:	29 17       	cp	r18, r25
    3518:	51 f1       	breq	.+84     	; 0x356e <xTaskPriorityDisinherit+0x70>
    351a:	81 11       	cpse	r24, r1
    351c:	2a c0       	rjmp	.+84     	; 0x3572 <xTaskPriorityDisinherit+0x74>
    351e:	ef 01       	movw	r28, r30
    3520:	8f 01       	movw	r16, r30
    3522:	0e 5f       	subi	r16, 0xFE	; 254
    3524:	1f 4f       	sbci	r17, 0xFF	; 255
    3526:	c8 01       	movw	r24, r16
    3528:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <uxListRemove>
    352c:	8f a1       	ldd	r24, Y+39	; 0x27
    352e:	8a 8f       	std	Y+26, r24	; 0x1a
    3530:	46 e0       	ldi	r20, 0x06	; 6
    3532:	50 e0       	ldi	r21, 0x00	; 0
    3534:	60 e0       	ldi	r22, 0x00	; 0
    3536:	70 e0       	ldi	r23, 0x00	; 0
    3538:	48 1b       	sub	r20, r24
    353a:	51 09       	sbc	r21, r1
    353c:	61 09       	sbc	r22, r1
    353e:	71 09       	sbc	r23, r1
    3540:	4e 87       	std	Y+14, r20	; 0x0e
    3542:	5f 87       	std	Y+15, r21	; 0x0f
    3544:	68 8b       	std	Y+16, r22	; 0x10
    3546:	79 8b       	std	Y+17, r23	; 0x11
    3548:	90 91 45 18 	lds	r25, 0x1845	; 0x801845 <uxTopReadyPriority>
    354c:	98 17       	cp	r25, r24
    354e:	10 f4       	brcc	.+4      	; 0x3554 <xTaskPriorityDisinherit+0x56>
    3550:	80 93 45 18 	sts	0x1845, r24	; 0x801845 <uxTopReadyPriority>
    3554:	2b e0       	ldi	r18, 0x0B	; 11
    3556:	82 9f       	mul	r24, r18
    3558:	c0 01       	movw	r24, r0
    355a:	11 24       	eor	r1, r1
    355c:	b8 01       	movw	r22, r16
    355e:	89 57       	subi	r24, 0x79	; 121
    3560:	97 4e       	sbci	r25, 0xE7	; 231
    3562:	0e 94 1e 0c 	call	0x183c	; 0x183c <vListInsertEnd>
    3566:	81 e0       	ldi	r24, 0x01	; 1
    3568:	05 c0       	rjmp	.+10     	; 0x3574 <xTaskPriorityDisinherit+0x76>
    356a:	80 e0       	ldi	r24, 0x00	; 0
    356c:	03 c0       	rjmp	.+6      	; 0x3574 <xTaskPriorityDisinherit+0x76>
    356e:	80 e0       	ldi	r24, 0x00	; 0
    3570:	01 c0       	rjmp	.+2      	; 0x3574 <xTaskPriorityDisinherit+0x76>
    3572:	80 e0       	ldi	r24, 0x00	; 0
    3574:	df 91       	pop	r29
    3576:	cf 91       	pop	r28
    3578:	1f 91       	pop	r17
    357a:	0f 91       	pop	r16
    357c:	08 95       	ret

0000357e <vTaskPriorityDisinheritAfterTimeout>:
    357e:	0f 93       	push	r16
    3580:	1f 93       	push	r17
    3582:	cf 93       	push	r28
    3584:	df 93       	push	r29
    3586:	fc 01       	movw	r30, r24
    3588:	89 2b       	or	r24, r25
    358a:	09 f4       	brne	.+2      	; 0x358e <vTaskPriorityDisinheritAfterTimeout+0x10>
    358c:	3f c0       	rjmp	.+126    	; 0x360c <vTaskPriorityDisinheritAfterTimeout+0x8e>
    358e:	87 a1       	ldd	r24, Z+39	; 0x27
    3590:	86 17       	cp	r24, r22
    3592:	08 f4       	brcc	.+2      	; 0x3596 <vTaskPriorityDisinheritAfterTimeout+0x18>
    3594:	86 2f       	mov	r24, r22
    3596:	92 8d       	ldd	r25, Z+26	; 0x1a
    3598:	98 17       	cp	r25, r24
    359a:	c1 f1       	breq	.+112    	; 0x360c <vTaskPriorityDisinheritAfterTimeout+0x8e>
    359c:	20 a5       	ldd	r18, Z+40	; 0x28
    359e:	21 30       	cpi	r18, 0x01	; 1
    35a0:	a9 f5       	brne	.+106    	; 0x360c <vTaskPriorityDisinheritAfterTimeout+0x8e>
    35a2:	82 8f       	std	Z+26, r24	; 0x1a
    35a4:	46 85       	ldd	r20, Z+14	; 0x0e
    35a6:	57 85       	ldd	r21, Z+15	; 0x0f
    35a8:	60 89       	ldd	r22, Z+16	; 0x10
    35aa:	71 89       	ldd	r23, Z+17	; 0x11
    35ac:	77 23       	and	r23, r23
    35ae:	64 f0       	brlt	.+24     	; 0x35c8 <vTaskPriorityDisinheritAfterTimeout+0x4a>
    35b0:	46 e0       	ldi	r20, 0x06	; 6
    35b2:	50 e0       	ldi	r21, 0x00	; 0
    35b4:	60 e0       	ldi	r22, 0x00	; 0
    35b6:	70 e0       	ldi	r23, 0x00	; 0
    35b8:	48 1b       	sub	r20, r24
    35ba:	51 09       	sbc	r21, r1
    35bc:	61 09       	sbc	r22, r1
    35be:	71 09       	sbc	r23, r1
    35c0:	46 87       	std	Z+14, r20	; 0x0e
    35c2:	57 87       	std	Z+15, r21	; 0x0f
    35c4:	60 8b       	std	Z+16, r22	; 0x10
    35c6:	71 8b       	std	Z+17, r23	; 0x11
    35c8:	2b e0       	ldi	r18, 0x0B	; 11
    35ca:	92 9f       	mul	r25, r18
    35cc:	c0 01       	movw	r24, r0
    35ce:	11 24       	eor	r1, r1
    35d0:	89 57       	subi	r24, 0x79	; 121
    35d2:	97 4e       	sbci	r25, 0xE7	; 231
    35d4:	24 85       	ldd	r18, Z+12	; 0x0c
    35d6:	35 85       	ldd	r19, Z+13	; 0x0d
    35d8:	28 17       	cp	r18, r24
    35da:	39 07       	cpc	r19, r25
    35dc:	b9 f4       	brne	.+46     	; 0x360c <vTaskPriorityDisinheritAfterTimeout+0x8e>
    35de:	ef 01       	movw	r28, r30
    35e0:	8f 01       	movw	r16, r30
    35e2:	0e 5f       	subi	r16, 0xFE	; 254
    35e4:	1f 4f       	sbci	r17, 0xFF	; 255
    35e6:	c8 01       	movw	r24, r16
    35e8:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <uxListRemove>
    35ec:	8a 8d       	ldd	r24, Y+26	; 0x1a
    35ee:	90 91 45 18 	lds	r25, 0x1845	; 0x801845 <uxTopReadyPriority>
    35f2:	98 17       	cp	r25, r24
    35f4:	10 f4       	brcc	.+4      	; 0x35fa <vTaskPriorityDisinheritAfterTimeout+0x7c>
    35f6:	80 93 45 18 	sts	0x1845, r24	; 0x801845 <uxTopReadyPriority>
    35fa:	2b e0       	ldi	r18, 0x0B	; 11
    35fc:	82 9f       	mul	r24, r18
    35fe:	c0 01       	movw	r24, r0
    3600:	11 24       	eor	r1, r1
    3602:	b8 01       	movw	r22, r16
    3604:	89 57       	subi	r24, 0x79	; 121
    3606:	97 4e       	sbci	r25, 0xE7	; 231
    3608:	0e 94 1e 0c 	call	0x183c	; 0x183c <vListInsertEnd>
    360c:	df 91       	pop	r29
    360e:	cf 91       	pop	r28
    3610:	1f 91       	pop	r17
    3612:	0f 91       	pop	r16
    3614:	08 95       	ret

00003616 <uxTaskResetEventItemValue>:
    3616:	cf 92       	push	r12
    3618:	df 92       	push	r13
    361a:	ef 92       	push	r14
    361c:	ff 92       	push	r15
    361e:	e0 91 c9 18 	lds	r30, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    3622:	f0 91 ca 18 	lds	r31, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    3626:	66 85       	ldd	r22, Z+14	; 0x0e
    3628:	77 85       	ldd	r23, Z+15	; 0x0f
    362a:	80 89       	ldd	r24, Z+16	; 0x10
    362c:	91 89       	ldd	r25, Z+17	; 0x11
    362e:	e0 91 c9 18 	lds	r30, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    3632:	f0 91 ca 18 	lds	r31, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    3636:	a0 91 c9 18 	lds	r26, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    363a:	b0 91 ca 18 	lds	r27, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    363e:	5a 96       	adiw	r26, 0x1a	; 26
    3640:	2c 91       	ld	r18, X
    3642:	0f 2e       	mov	r0, r31
    3644:	f6 e0       	ldi	r31, 0x06	; 6
    3646:	cf 2e       	mov	r12, r31
    3648:	d1 2c       	mov	r13, r1
    364a:	e1 2c       	mov	r14, r1
    364c:	f1 2c       	mov	r15, r1
    364e:	f0 2d       	mov	r31, r0
    3650:	c2 1a       	sub	r12, r18
    3652:	d1 08       	sbc	r13, r1
    3654:	e1 08       	sbc	r14, r1
    3656:	f1 08       	sbc	r15, r1
    3658:	c6 86       	std	Z+14, r12	; 0x0e
    365a:	d7 86       	std	Z+15, r13	; 0x0f
    365c:	e0 8a       	std	Z+16, r14	; 0x10
    365e:	f1 8a       	std	Z+17, r15	; 0x11
    3660:	ff 90       	pop	r15
    3662:	ef 90       	pop	r14
    3664:	df 90       	pop	r13
    3666:	cf 90       	pop	r12
    3668:	08 95       	ret

0000366a <pvTaskIncrementMutexHeldCount>:
    366a:	80 91 c9 18 	lds	r24, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    366e:	90 91 ca 18 	lds	r25, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    3672:	89 2b       	or	r24, r25
    3674:	39 f0       	breq	.+14     	; 0x3684 <pvTaskIncrementMutexHeldCount+0x1a>
    3676:	e0 91 c9 18 	lds	r30, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    367a:	f0 91 ca 18 	lds	r31, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    367e:	80 a5       	ldd	r24, Z+40	; 0x28
    3680:	8f 5f       	subi	r24, 0xFF	; 255
    3682:	80 a7       	std	Z+40, r24	; 0x28
    3684:	80 91 c9 18 	lds	r24, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    3688:	90 91 ca 18 	lds	r25, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    368c:	08 95       	ret

0000368e <xTaskNotifyWait>:
    368e:	4f 92       	push	r4
    3690:	5f 92       	push	r5
    3692:	6f 92       	push	r6
    3694:	7f 92       	push	r7
    3696:	8f 92       	push	r8
    3698:	9f 92       	push	r9
    369a:	af 92       	push	r10
    369c:	bf 92       	push	r11
    369e:	cf 92       	push	r12
    36a0:	df 92       	push	r13
    36a2:	ef 92       	push	r14
    36a4:	ff 92       	push	r15
    36a6:	0f 93       	push	r16
    36a8:	1f 93       	push	r17
    36aa:	49 01       	movw	r8, r18
    36ac:	5a 01       	movw	r10, r20
    36ae:	0f b6       	in	r0, 0x3f	; 63
    36b0:	f8 94       	cli
    36b2:	0f 92       	push	r0
    36b4:	e0 91 c9 18 	lds	r30, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    36b8:	f0 91 ca 18 	lds	r31, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    36bc:	27 a5       	ldd	r18, Z+47	; 0x2f
    36be:	22 30       	cpi	r18, 0x02	; 2
    36c0:	39 f1       	breq	.+78     	; 0x3710 <xTaskNotifyWait+0x82>
    36c2:	e0 91 c9 18 	lds	r30, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    36c6:	f0 91 ca 18 	lds	r31, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    36ca:	43 a4       	ldd	r4, Z+43	; 0x2b
    36cc:	54 a4       	ldd	r5, Z+44	; 0x2c
    36ce:	65 a4       	ldd	r6, Z+45	; 0x2d
    36d0:	76 a4       	ldd	r7, Z+46	; 0x2e
    36d2:	dc 01       	movw	r26, r24
    36d4:	cb 01       	movw	r24, r22
    36d6:	80 95       	com	r24
    36d8:	90 95       	com	r25
    36da:	a0 95       	com	r26
    36dc:	b0 95       	com	r27
    36de:	84 21       	and	r24, r4
    36e0:	95 21       	and	r25, r5
    36e2:	a6 21       	and	r26, r6
    36e4:	b7 21       	and	r27, r7
    36e6:	83 a7       	std	Z+43, r24	; 0x2b
    36e8:	94 a7       	std	Z+44, r25	; 0x2c
    36ea:	a5 a7       	std	Z+45, r26	; 0x2d
    36ec:	b6 a7       	std	Z+46, r27	; 0x2e
    36ee:	e0 91 c9 18 	lds	r30, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    36f2:	f0 91 ca 18 	lds	r31, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    36f6:	81 e0       	ldi	r24, 0x01	; 1
    36f8:	87 a7       	std	Z+47, r24	; 0x2f
    36fa:	c1 14       	cp	r12, r1
    36fc:	d1 04       	cpc	r13, r1
    36fe:	e1 04       	cpc	r14, r1
    3700:	f1 04       	cpc	r15, r1
    3702:	31 f0       	breq	.+12     	; 0x3710 <xTaskNotifyWait+0x82>
    3704:	41 e0       	ldi	r20, 0x01	; 1
    3706:	c7 01       	movw	r24, r14
    3708:	b6 01       	movw	r22, r12
    370a:	56 d9       	rcall	.-3412   	; 0x29b8 <prvAddCurrentTaskToDelayedList>
    370c:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <vPortYield>
    3710:	0f 90       	pop	r0
    3712:	0f be       	out	0x3f, r0	; 63
    3714:	0f b6       	in	r0, 0x3f	; 63
    3716:	f8 94       	cli
    3718:	0f 92       	push	r0
    371a:	01 15       	cp	r16, r1
    371c:	11 05       	cpc	r17, r1
    371e:	69 f0       	breq	.+26     	; 0x373a <xTaskNotifyWait+0xac>
    3720:	e0 91 c9 18 	lds	r30, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    3724:	f0 91 ca 18 	lds	r31, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    3728:	83 a5       	ldd	r24, Z+43	; 0x2b
    372a:	94 a5       	ldd	r25, Z+44	; 0x2c
    372c:	a5 a5       	ldd	r26, Z+45	; 0x2d
    372e:	b6 a5       	ldd	r27, Z+46	; 0x2e
    3730:	f8 01       	movw	r30, r16
    3732:	80 83       	st	Z, r24
    3734:	91 83       	std	Z+1, r25	; 0x01
    3736:	a2 83       	std	Z+2, r26	; 0x02
    3738:	b3 83       	std	Z+3, r27	; 0x03
    373a:	e0 91 c9 18 	lds	r30, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    373e:	f0 91 ca 18 	lds	r31, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    3742:	87 a5       	ldd	r24, Z+47	; 0x2f
    3744:	82 30       	cpi	r24, 0x02	; 2
    3746:	b1 f4       	brne	.+44     	; 0x3774 <xTaskNotifyWait+0xe6>
    3748:	e0 91 c9 18 	lds	r30, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    374c:	f0 91 ca 18 	lds	r31, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    3750:	83 a5       	ldd	r24, Z+43	; 0x2b
    3752:	94 a5       	ldd	r25, Z+44	; 0x2c
    3754:	a5 a5       	ldd	r26, Z+45	; 0x2d
    3756:	b6 a5       	ldd	r27, Z+46	; 0x2e
    3758:	80 94       	com	r8
    375a:	90 94       	com	r9
    375c:	a0 94       	com	r10
    375e:	b0 94       	com	r11
    3760:	88 22       	and	r8, r24
    3762:	99 22       	and	r9, r25
    3764:	aa 22       	and	r10, r26
    3766:	bb 22       	and	r11, r27
    3768:	83 a6       	std	Z+43, r8	; 0x2b
    376a:	94 a6       	std	Z+44, r9	; 0x2c
    376c:	a5 a6       	std	Z+45, r10	; 0x2d
    376e:	b6 a6       	std	Z+46, r11	; 0x2e
    3770:	81 e0       	ldi	r24, 0x01	; 1
    3772:	01 c0       	rjmp	.+2      	; 0x3776 <xTaskNotifyWait+0xe8>
    3774:	80 e0       	ldi	r24, 0x00	; 0
    3776:	e0 91 c9 18 	lds	r30, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    377a:	f0 91 ca 18 	lds	r31, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    377e:	17 a6       	std	Z+47, r1	; 0x2f
    3780:	0f 90       	pop	r0
    3782:	0f be       	out	0x3f, r0	; 63
    3784:	1f 91       	pop	r17
    3786:	0f 91       	pop	r16
    3788:	ff 90       	pop	r15
    378a:	ef 90       	pop	r14
    378c:	df 90       	pop	r13
    378e:	cf 90       	pop	r12
    3790:	bf 90       	pop	r11
    3792:	af 90       	pop	r10
    3794:	9f 90       	pop	r9
    3796:	8f 90       	pop	r8
    3798:	7f 90       	pop	r7
    379a:	6f 90       	pop	r6
    379c:	5f 90       	pop	r5
    379e:	4f 90       	pop	r4
    37a0:	08 95       	ret

000037a2 <xTaskGenericNotify>:
    37a2:	0f 93       	push	r16
    37a4:	1f 93       	push	r17
    37a6:	cf 93       	push	r28
    37a8:	df 93       	push	r29
    37aa:	fc 01       	movw	r30, r24
    37ac:	0f b6       	in	r0, 0x3f	; 63
    37ae:	f8 94       	cli
    37b0:	0f 92       	push	r0
    37b2:	01 15       	cp	r16, r1
    37b4:	11 05       	cpc	r17, r1
    37b6:	49 f0       	breq	.+18     	; 0x37ca <xTaskGenericNotify+0x28>
    37b8:	83 a5       	ldd	r24, Z+43	; 0x2b
    37ba:	94 a5       	ldd	r25, Z+44	; 0x2c
    37bc:	a5 a5       	ldd	r26, Z+45	; 0x2d
    37be:	b6 a5       	ldd	r27, Z+46	; 0x2e
    37c0:	e8 01       	movw	r28, r16
    37c2:	88 83       	st	Y, r24
    37c4:	99 83       	std	Y+1, r25	; 0x01
    37c6:	aa 83       	std	Y+2, r26	; 0x02
    37c8:	bb 83       	std	Y+3, r27	; 0x03
    37ca:	87 a5       	ldd	r24, Z+47	; 0x2f
    37cc:	92 e0       	ldi	r25, 0x02	; 2
    37ce:	97 a7       	std	Z+47, r25	; 0x2f
    37d0:	22 30       	cpi	r18, 0x02	; 2
    37d2:	b1 f0       	breq	.+44     	; 0x3800 <xTaskGenericNotify+0x5e>
    37d4:	18 f4       	brcc	.+6      	; 0x37dc <xTaskGenericNotify+0x3a>
    37d6:	21 30       	cpi	r18, 0x01	; 1
    37d8:	31 f0       	breq	.+12     	; 0x37e6 <xTaskGenericNotify+0x44>
    37da:	2a c0       	rjmp	.+84     	; 0x3830 <xTaskGenericNotify+0x8e>
    37dc:	23 30       	cpi	r18, 0x03	; 3
    37de:	e9 f0       	breq	.+58     	; 0x381a <xTaskGenericNotify+0x78>
    37e0:	24 30       	cpi	r18, 0x04	; 4
    37e2:	01 f1       	breq	.+64     	; 0x3824 <xTaskGenericNotify+0x82>
    37e4:	25 c0       	rjmp	.+74     	; 0x3830 <xTaskGenericNotify+0x8e>
    37e6:	03 a5       	ldd	r16, Z+43	; 0x2b
    37e8:	14 a5       	ldd	r17, Z+44	; 0x2c
    37ea:	25 a5       	ldd	r18, Z+45	; 0x2d
    37ec:	36 a5       	ldd	r19, Z+46	; 0x2e
    37ee:	40 2b       	or	r20, r16
    37f0:	51 2b       	or	r21, r17
    37f2:	62 2b       	or	r22, r18
    37f4:	73 2b       	or	r23, r19
    37f6:	43 a7       	std	Z+43, r20	; 0x2b
    37f8:	54 a7       	std	Z+44, r21	; 0x2c
    37fa:	65 a7       	std	Z+45, r22	; 0x2d
    37fc:	76 a7       	std	Z+46, r23	; 0x2e
    37fe:	18 c0       	rjmp	.+48     	; 0x3830 <xTaskGenericNotify+0x8e>
    3800:	43 a5       	ldd	r20, Z+43	; 0x2b
    3802:	54 a5       	ldd	r21, Z+44	; 0x2c
    3804:	65 a5       	ldd	r22, Z+45	; 0x2d
    3806:	76 a5       	ldd	r23, Z+46	; 0x2e
    3808:	4f 5f       	subi	r20, 0xFF	; 255
    380a:	5f 4f       	sbci	r21, 0xFF	; 255
    380c:	6f 4f       	sbci	r22, 0xFF	; 255
    380e:	7f 4f       	sbci	r23, 0xFF	; 255
    3810:	43 a7       	std	Z+43, r20	; 0x2b
    3812:	54 a7       	std	Z+44, r21	; 0x2c
    3814:	65 a7       	std	Z+45, r22	; 0x2d
    3816:	76 a7       	std	Z+46, r23	; 0x2e
    3818:	0b c0       	rjmp	.+22     	; 0x3830 <xTaskGenericNotify+0x8e>
    381a:	43 a7       	std	Z+43, r20	; 0x2b
    381c:	54 a7       	std	Z+44, r21	; 0x2c
    381e:	65 a7       	std	Z+45, r22	; 0x2d
    3820:	76 a7       	std	Z+46, r23	; 0x2e
    3822:	06 c0       	rjmp	.+12     	; 0x3830 <xTaskGenericNotify+0x8e>
    3824:	82 30       	cpi	r24, 0x02	; 2
    3826:	49 f1       	breq	.+82     	; 0x387a <xTaskGenericNotify+0xd8>
    3828:	43 a7       	std	Z+43, r20	; 0x2b
    382a:	54 a7       	std	Z+44, r21	; 0x2c
    382c:	65 a7       	std	Z+45, r22	; 0x2d
    382e:	76 a7       	std	Z+46, r23	; 0x2e
    3830:	81 30       	cpi	r24, 0x01	; 1
    3832:	29 f5       	brne	.+74     	; 0x387e <xTaskGenericNotify+0xdc>
    3834:	ef 01       	movw	r28, r30
    3836:	8f 01       	movw	r16, r30
    3838:	0e 5f       	subi	r16, 0xFE	; 254
    383a:	1f 4f       	sbci	r17, 0xFF	; 255
    383c:	c8 01       	movw	r24, r16
    383e:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <uxListRemove>
    3842:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3844:	90 91 45 18 	lds	r25, 0x1845	; 0x801845 <uxTopReadyPriority>
    3848:	98 17       	cp	r25, r24
    384a:	10 f4       	brcc	.+4      	; 0x3850 <xTaskGenericNotify+0xae>
    384c:	80 93 45 18 	sts	0x1845, r24	; 0x801845 <uxTopReadyPriority>
    3850:	2b e0       	ldi	r18, 0x0B	; 11
    3852:	82 9f       	mul	r24, r18
    3854:	c0 01       	movw	r24, r0
    3856:	11 24       	eor	r1, r1
    3858:	b8 01       	movw	r22, r16
    385a:	89 57       	subi	r24, 0x79	; 121
    385c:	97 4e       	sbci	r25, 0xE7	; 231
    385e:	0e 94 1e 0c 	call	0x183c	; 0x183c <vListInsertEnd>
    3862:	e0 91 c9 18 	lds	r30, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    3866:	f0 91 ca 18 	lds	r31, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    386a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    386c:	82 8d       	ldd	r24, Z+26	; 0x1a
    386e:	89 17       	cp	r24, r25
    3870:	40 f4       	brcc	.+16     	; 0x3882 <xTaskGenericNotify+0xe0>
    3872:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <vPortYield>
    3876:	81 e0       	ldi	r24, 0x01	; 1
    3878:	05 c0       	rjmp	.+10     	; 0x3884 <xTaskGenericNotify+0xe2>
    387a:	80 e0       	ldi	r24, 0x00	; 0
    387c:	03 c0       	rjmp	.+6      	; 0x3884 <xTaskGenericNotify+0xe2>
    387e:	81 e0       	ldi	r24, 0x01	; 1
    3880:	01 c0       	rjmp	.+2      	; 0x3884 <xTaskGenericNotify+0xe2>
    3882:	81 e0       	ldi	r24, 0x01	; 1
    3884:	0f 90       	pop	r0
    3886:	0f be       	out	0x3f, r0	; 63
    3888:	df 91       	pop	r29
    388a:	cf 91       	pop	r28
    388c:	1f 91       	pop	r17
    388e:	0f 91       	pop	r16
    3890:	08 95       	ret

00003892 <xTaskGenericNotifyFromISR>:
    3892:	ef 92       	push	r14
    3894:	ff 92       	push	r15
    3896:	0f 93       	push	r16
    3898:	1f 93       	push	r17
    389a:	cf 93       	push	r28
    389c:	df 93       	push	r29
    389e:	fc 01       	movw	r30, r24
    38a0:	01 15       	cp	r16, r1
    38a2:	11 05       	cpc	r17, r1
    38a4:	49 f0       	breq	.+18     	; 0x38b8 <xTaskGenericNotifyFromISR+0x26>
    38a6:	83 a5       	ldd	r24, Z+43	; 0x2b
    38a8:	94 a5       	ldd	r25, Z+44	; 0x2c
    38aa:	a5 a5       	ldd	r26, Z+45	; 0x2d
    38ac:	b6 a5       	ldd	r27, Z+46	; 0x2e
    38ae:	e8 01       	movw	r28, r16
    38b0:	88 83       	st	Y, r24
    38b2:	99 83       	std	Y+1, r25	; 0x01
    38b4:	aa 83       	std	Y+2, r26	; 0x02
    38b6:	bb 83       	std	Y+3, r27	; 0x03
    38b8:	87 a5       	ldd	r24, Z+47	; 0x2f
    38ba:	92 e0       	ldi	r25, 0x02	; 2
    38bc:	97 a7       	std	Z+47, r25	; 0x2f
    38be:	22 30       	cpi	r18, 0x02	; 2
    38c0:	b1 f0       	breq	.+44     	; 0x38ee <xTaskGenericNotifyFromISR+0x5c>
    38c2:	18 f4       	brcc	.+6      	; 0x38ca <xTaskGenericNotifyFromISR+0x38>
    38c4:	21 30       	cpi	r18, 0x01	; 1
    38c6:	31 f0       	breq	.+12     	; 0x38d4 <xTaskGenericNotifyFromISR+0x42>
    38c8:	2a c0       	rjmp	.+84     	; 0x391e <xTaskGenericNotifyFromISR+0x8c>
    38ca:	23 30       	cpi	r18, 0x03	; 3
    38cc:	e9 f0       	breq	.+58     	; 0x3908 <xTaskGenericNotifyFromISR+0x76>
    38ce:	24 30       	cpi	r18, 0x04	; 4
    38d0:	01 f1       	breq	.+64     	; 0x3912 <xTaskGenericNotifyFromISR+0x80>
    38d2:	25 c0       	rjmp	.+74     	; 0x391e <xTaskGenericNotifyFromISR+0x8c>
    38d4:	03 a5       	ldd	r16, Z+43	; 0x2b
    38d6:	14 a5       	ldd	r17, Z+44	; 0x2c
    38d8:	25 a5       	ldd	r18, Z+45	; 0x2d
    38da:	36 a5       	ldd	r19, Z+46	; 0x2e
    38dc:	40 2b       	or	r20, r16
    38de:	51 2b       	or	r21, r17
    38e0:	62 2b       	or	r22, r18
    38e2:	73 2b       	or	r23, r19
    38e4:	43 a7       	std	Z+43, r20	; 0x2b
    38e6:	54 a7       	std	Z+44, r21	; 0x2c
    38e8:	65 a7       	std	Z+45, r22	; 0x2d
    38ea:	76 a7       	std	Z+46, r23	; 0x2e
    38ec:	18 c0       	rjmp	.+48     	; 0x391e <xTaskGenericNotifyFromISR+0x8c>
    38ee:	43 a5       	ldd	r20, Z+43	; 0x2b
    38f0:	54 a5       	ldd	r21, Z+44	; 0x2c
    38f2:	65 a5       	ldd	r22, Z+45	; 0x2d
    38f4:	76 a5       	ldd	r23, Z+46	; 0x2e
    38f6:	4f 5f       	subi	r20, 0xFF	; 255
    38f8:	5f 4f       	sbci	r21, 0xFF	; 255
    38fa:	6f 4f       	sbci	r22, 0xFF	; 255
    38fc:	7f 4f       	sbci	r23, 0xFF	; 255
    38fe:	43 a7       	std	Z+43, r20	; 0x2b
    3900:	54 a7       	std	Z+44, r21	; 0x2c
    3902:	65 a7       	std	Z+45, r22	; 0x2d
    3904:	76 a7       	std	Z+46, r23	; 0x2e
    3906:	0b c0       	rjmp	.+22     	; 0x391e <xTaskGenericNotifyFromISR+0x8c>
    3908:	43 a7       	std	Z+43, r20	; 0x2b
    390a:	54 a7       	std	Z+44, r21	; 0x2c
    390c:	65 a7       	std	Z+45, r22	; 0x2d
    390e:	76 a7       	std	Z+46, r23	; 0x2e
    3910:	06 c0       	rjmp	.+12     	; 0x391e <xTaskGenericNotifyFromISR+0x8c>
    3912:	82 30       	cpi	r24, 0x02	; 2
    3914:	d9 f1       	breq	.+118    	; 0x398c <xTaskGenericNotifyFromISR+0xfa>
    3916:	43 a7       	std	Z+43, r20	; 0x2b
    3918:	54 a7       	std	Z+44, r21	; 0x2c
    391a:	65 a7       	std	Z+45, r22	; 0x2d
    391c:	76 a7       	std	Z+46, r23	; 0x2e
    391e:	81 30       	cpi	r24, 0x01	; 1
    3920:	b9 f5       	brne	.+110    	; 0x3990 <xTaskGenericNotifyFromISR+0xfe>
    3922:	ef 01       	movw	r28, r30
    3924:	80 91 39 18 	lds	r24, 0x1839	; 0x801839 <uxSchedulerSuspended>
    3928:	81 11       	cpse	r24, r1
    392a:	17 c0       	rjmp	.+46     	; 0x395a <xTaskGenericNotifyFromISR+0xc8>
    392c:	8f 01       	movw	r16, r30
    392e:	0e 5f       	subi	r16, 0xFE	; 254
    3930:	1f 4f       	sbci	r17, 0xFF	; 255
    3932:	c8 01       	movw	r24, r16
    3934:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <uxListRemove>
    3938:	8a 8d       	ldd	r24, Y+26	; 0x1a
    393a:	90 91 45 18 	lds	r25, 0x1845	; 0x801845 <uxTopReadyPriority>
    393e:	98 17       	cp	r25, r24
    3940:	10 f4       	brcc	.+4      	; 0x3946 <xTaskGenericNotifyFromISR+0xb4>
    3942:	80 93 45 18 	sts	0x1845, r24	; 0x801845 <uxTopReadyPriority>
    3946:	eb e0       	ldi	r30, 0x0B	; 11
    3948:	8e 9f       	mul	r24, r30
    394a:	c0 01       	movw	r24, r0
    394c:	11 24       	eor	r1, r1
    394e:	b8 01       	movw	r22, r16
    3950:	89 57       	subi	r24, 0x79	; 121
    3952:	97 4e       	sbci	r25, 0xE7	; 231
    3954:	0e 94 1e 0c 	call	0x183c	; 0x183c <vListInsertEnd>
    3958:	07 c0       	rjmp	.+14     	; 0x3968 <xTaskGenericNotifyFromISR+0xd6>
    395a:	bf 01       	movw	r22, r30
    395c:	62 5f       	subi	r22, 0xF2	; 242
    395e:	7f 4f       	sbci	r23, 0xFF	; 255
    3960:	82 e6       	ldi	r24, 0x62	; 98
    3962:	98 e1       	ldi	r25, 0x18	; 24
    3964:	0e 94 1e 0c 	call	0x183c	; 0x183c <vListInsertEnd>
    3968:	e0 91 c9 18 	lds	r30, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    396c:	f0 91 ca 18 	lds	r31, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    3970:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3972:	82 8d       	ldd	r24, Z+26	; 0x1a
    3974:	89 17       	cp	r24, r25
    3976:	70 f4       	brcc	.+28     	; 0x3994 <xTaskGenericNotifyFromISR+0x102>
    3978:	e1 14       	cp	r14, r1
    397a:	f1 04       	cpc	r15, r1
    397c:	19 f0       	breq	.+6      	; 0x3984 <xTaskGenericNotifyFromISR+0xf2>
    397e:	81 e0       	ldi	r24, 0x01	; 1
    3980:	e7 01       	movw	r28, r14
    3982:	88 83       	st	Y, r24
    3984:	81 e0       	ldi	r24, 0x01	; 1
    3986:	80 93 42 18 	sts	0x1842, r24	; 0x801842 <xYieldPending>
    398a:	05 c0       	rjmp	.+10     	; 0x3996 <xTaskGenericNotifyFromISR+0x104>
    398c:	80 e0       	ldi	r24, 0x00	; 0
    398e:	03 c0       	rjmp	.+6      	; 0x3996 <xTaskGenericNotifyFromISR+0x104>
    3990:	81 e0       	ldi	r24, 0x01	; 1
    3992:	01 c0       	rjmp	.+2      	; 0x3996 <xTaskGenericNotifyFromISR+0x104>
    3994:	81 e0       	ldi	r24, 0x01	; 1
    3996:	df 91       	pop	r29
    3998:	cf 91       	pop	r28
    399a:	1f 91       	pop	r17
    399c:	0f 91       	pop	r16
    399e:	ff 90       	pop	r15
    39a0:	ef 90       	pop	r14
    39a2:	08 95       	ret

000039a4 <xTaskNotifyStateClear>:
    TCB_t *pxTCB;
    BaseType_t xReturn;

        /* If null is passed in here then it is the calling task that is having
        its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    39a4:	00 97       	sbiw	r24, 0x00	; 0
    39a6:	21 f4       	brne	.+8      	; 0x39b0 <xTaskNotifyStateClear+0xc>
    39a8:	80 91 c9 18 	lds	r24, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    39ac:	90 91 ca 18 	lds	r25, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    39b0:	0f b6       	in	r0, 0x3f	; 63
    39b2:	f8 94       	cli
    39b4:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
    39b6:	fc 01       	movw	r30, r24
    39b8:	27 a5       	ldd	r18, Z+47	; 0x2f
    39ba:	22 30       	cpi	r18, 0x02	; 2
    39bc:	19 f4       	brne	.+6      	; 0x39c4 <xTaskNotifyStateClear+0x20>
            {
                pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    39be:	17 a6       	std	Z+47, r1	; 0x2f
                xReturn = pdPASS;
    39c0:	81 e0       	ldi	r24, 0x01	; 1
    39c2:	01 c0       	rjmp	.+2      	; 0x39c6 <xTaskNotifyStateClear+0x22>
            }
            else
            {
                xReturn = pdFAIL;
    39c4:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    39c6:	0f 90       	pop	r0
    39c8:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    39ca:	08 95       	ret

000039cc <prvInsertTimerInActiveList>:
    39cc:	cf 92       	push	r12
    39ce:	df 92       	push	r13
    39d0:	ef 92       	push	r14
    39d2:	ff 92       	push	r15
    39d4:	0f 93       	push	r16
    39d6:	1f 93       	push	r17
    39d8:	fc 01       	movw	r30, r24
    39da:	42 83       	std	Z+2, r20	; 0x02
    39dc:	53 83       	std	Z+3, r21	; 0x03
    39de:	64 83       	std	Z+4, r22	; 0x04
    39e0:	75 83       	std	Z+5, r23	; 0x05
    39e2:	93 87       	std	Z+11, r25	; 0x0b
    39e4:	82 87       	std	Z+10, r24	; 0x0a
    39e6:	04 17       	cp	r16, r20
    39e8:	15 07       	cpc	r17, r21
    39ea:	26 07       	cpc	r18, r22
    39ec:	37 07       	cpc	r19, r23
    39ee:	c0 f0       	brcs	.+48     	; 0x3a20 <prvInsertTimerInActiveList+0x54>
    39f0:	0c 19       	sub	r16, r12
    39f2:	1d 09       	sbc	r17, r13
    39f4:	2e 09       	sbc	r18, r14
    39f6:	3f 09       	sbc	r19, r15
    39f8:	86 85       	ldd	r24, Z+14	; 0x0e
    39fa:	97 85       	ldd	r25, Z+15	; 0x0f
    39fc:	a0 89       	ldd	r26, Z+16	; 0x10
    39fe:	b1 89       	ldd	r27, Z+17	; 0x11
    3a00:	08 17       	cp	r16, r24
    3a02:	19 07       	cpc	r17, r25
    3a04:	2a 07       	cpc	r18, r26
    3a06:	3b 07       	cpc	r19, r27
    3a08:	00 f5       	brcc	.+64     	; 0x3a4a <prvInsertTimerInActiveList+0x7e>
    3a0a:	bf 01       	movw	r22, r30
    3a0c:	6e 5f       	subi	r22, 0xFE	; 254
    3a0e:	7f 4f       	sbci	r23, 0xFF	; 255
    3a10:	80 91 d3 18 	lds	r24, 0x18D3	; 0x8018d3 <pxOverflowTimerList>
    3a14:	90 91 d4 18 	lds	r25, 0x18D4	; 0x8018d4 <pxOverflowTimerList+0x1>
    3a18:	0e 94 3f 0c 	call	0x187e	; 0x187e <vListInsert>
    3a1c:	80 e0       	ldi	r24, 0x00	; 0
    3a1e:	18 c0       	rjmp	.+48     	; 0x3a50 <prvInsertTimerInActiveList+0x84>
    3a20:	0c 15       	cp	r16, r12
    3a22:	1d 05       	cpc	r17, r13
    3a24:	2e 05       	cpc	r18, r14
    3a26:	3f 05       	cpc	r19, r15
    3a28:	28 f4       	brcc	.+10     	; 0x3a34 <prvInsertTimerInActiveList+0x68>
    3a2a:	4c 15       	cp	r20, r12
    3a2c:	5d 05       	cpc	r21, r13
    3a2e:	6e 05       	cpc	r22, r14
    3a30:	7f 05       	cpc	r23, r15
    3a32:	68 f4       	brcc	.+26     	; 0x3a4e <prvInsertTimerInActiveList+0x82>
    3a34:	bf 01       	movw	r22, r30
    3a36:	6e 5f       	subi	r22, 0xFE	; 254
    3a38:	7f 4f       	sbci	r23, 0xFF	; 255
    3a3a:	80 91 d5 18 	lds	r24, 0x18D5	; 0x8018d5 <pxCurrentTimerList>
    3a3e:	90 91 d6 18 	lds	r25, 0x18D6	; 0x8018d6 <pxCurrentTimerList+0x1>
    3a42:	0e 94 3f 0c 	call	0x187e	; 0x187e <vListInsert>
    3a46:	80 e0       	ldi	r24, 0x00	; 0
    3a48:	03 c0       	rjmp	.+6      	; 0x3a50 <prvInsertTimerInActiveList+0x84>
    3a4a:	81 e0       	ldi	r24, 0x01	; 1
    3a4c:	01 c0       	rjmp	.+2      	; 0x3a50 <prvInsertTimerInActiveList+0x84>
    3a4e:	81 e0       	ldi	r24, 0x01	; 1
    3a50:	1f 91       	pop	r17
    3a52:	0f 91       	pop	r16
    3a54:	ff 90       	pop	r15
    3a56:	ef 90       	pop	r14
    3a58:	df 90       	pop	r13
    3a5a:	cf 90       	pop	r12
    3a5c:	08 95       	ret

00003a5e <prvCheckForValidListAndQueue>:
    3a5e:	0f b6       	in	r0, 0x3f	; 63
    3a60:	f8 94       	cli
    3a62:	0f 92       	push	r0
    3a64:	80 91 d1 18 	lds	r24, 0x18D1	; 0x8018d1 <xTimerQueue>
    3a68:	90 91 d2 18 	lds	r25, 0x18D2	; 0x8018d2 <xTimerQueue+0x1>
    3a6c:	89 2b       	or	r24, r25
    3a6e:	e9 f4       	brne	.+58     	; 0x3aaa <prvCheckForValidListAndQueue+0x4c>
    3a70:	82 ee       	ldi	r24, 0xE2	; 226
    3a72:	98 e1       	ldi	r25, 0x18	; 24
    3a74:	0e 94 09 0c 	call	0x1812	; 0x1812 <vListInitialise>
    3a78:	87 ed       	ldi	r24, 0xD7	; 215
    3a7a:	98 e1       	ldi	r25, 0x18	; 24
    3a7c:	0e 94 09 0c 	call	0x1812	; 0x1812 <vListInitialise>
    3a80:	82 ee       	ldi	r24, 0xE2	; 226
    3a82:	98 e1       	ldi	r25, 0x18	; 24
    3a84:	90 93 d6 18 	sts	0x18D6, r25	; 0x8018d6 <pxCurrentTimerList+0x1>
    3a88:	80 93 d5 18 	sts	0x18D5, r24	; 0x8018d5 <pxCurrentTimerList>
    3a8c:	87 ed       	ldi	r24, 0xD7	; 215
    3a8e:	98 e1       	ldi	r25, 0x18	; 24
    3a90:	90 93 d4 18 	sts	0x18D4, r25	; 0x8018d4 <pxOverflowTimerList+0x1>
    3a94:	80 93 d3 18 	sts	0x18D3, r24	; 0x8018d3 <pxOverflowTimerList>
    3a98:	40 e0       	ldi	r20, 0x00	; 0
    3a9a:	67 e0       	ldi	r22, 0x07	; 7
    3a9c:	8a e0       	ldi	r24, 0x0A	; 10
    3a9e:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <xQueueGenericCreate>
    3aa2:	90 93 d2 18 	sts	0x18D2, r25	; 0x8018d2 <xTimerQueue+0x1>
    3aa6:	80 93 d1 18 	sts	0x18D1, r24	; 0x8018d1 <xTimerQueue>
    3aaa:	0f 90       	pop	r0
    3aac:	0f be       	out	0x3f, r0	; 63
    3aae:	08 95       	ret

00003ab0 <xTimerCreateTimerTask>:
    3ab0:	ef 92       	push	r14
    3ab2:	ff 92       	push	r15
    3ab4:	0f 93       	push	r16
    3ab6:	d3 df       	rcall	.-90     	; 0x3a5e <prvCheckForValidListAndQueue>
    3ab8:	80 91 d1 18 	lds	r24, 0x18D1	; 0x8018d1 <xTimerQueue>
    3abc:	90 91 d2 18 	lds	r25, 0x18D2	; 0x8018d2 <xTimerQueue+0x1>
    3ac0:	89 2b       	or	r24, r25
    3ac2:	91 f0       	breq	.+36     	; 0x3ae8 <xTimerCreateTimerTask+0x38>
    3ac4:	0f 2e       	mov	r0, r31
    3ac6:	ff ec       	ldi	r31, 0xCF	; 207
    3ac8:	ef 2e       	mov	r14, r31
    3aca:	f8 e1       	ldi	r31, 0x18	; 24
    3acc:	ff 2e       	mov	r15, r31
    3ace:	f0 2d       	mov	r31, r0
    3ad0:	03 e0       	ldi	r16, 0x03	; 3
    3ad2:	20 e0       	ldi	r18, 0x00	; 0
    3ad4:	30 e0       	ldi	r19, 0x00	; 0
    3ad6:	45 e5       	ldi	r20, 0x55	; 85
    3ad8:	50 e0       	ldi	r21, 0x00	; 0
    3ada:	62 ec       	ldi	r22, 0xC2	; 194
    3adc:	74 e0       	ldi	r23, 0x04	; 4
    3ade:	87 e0       	ldi	r24, 0x07	; 7
    3ae0:	91 e0       	ldi	r25, 0x01	; 1
    3ae2:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <xTaskCreate>
    3ae6:	01 c0       	rjmp	.+2      	; 0x3aea <xTimerCreateTimerTask+0x3a>
    3ae8:	80 e0       	ldi	r24, 0x00	; 0
    3aea:	0f 91       	pop	r16
    3aec:	ff 90       	pop	r15
    3aee:	ef 90       	pop	r14
    3af0:	08 95       	ret

00003af2 <xTimerGenericCommand>:
    }
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    3af2:	8f 92       	push	r8
    3af4:	9f 92       	push	r9
    3af6:	af 92       	push	r10
    3af8:	bf 92       	push	r11
    3afa:	cf 92       	push	r12
    3afc:	df 92       	push	r13
    3afe:	ef 92       	push	r14
    3b00:	ff 92       	push	r15
    3b02:	0f 93       	push	r16
    3b04:	1f 93       	push	r17
    3b06:	cf 93       	push	r28
    3b08:	df 93       	push	r29
    3b0a:	cd b7       	in	r28, 0x3d	; 61
    3b0c:	de b7       	in	r29, 0x3e	; 62
    3b0e:	27 97       	sbiw	r28, 0x07	; 7
    3b10:	0f b6       	in	r0, 0x3f	; 63
    3b12:	f8 94       	cli
    3b14:	de bf       	out	0x3e, r29	; 62
    3b16:	0f be       	out	0x3f, r0	; 63
    3b18:	cd bf       	out	0x3d, r28	; 61

    configASSERT( xTimer );

    /* Send a message to the timer service task to perform a particular action
    on a particular timer definition. */
    if( xTimerQueue != NULL )
    3b1a:	e0 91 d1 18 	lds	r30, 0x18D1	; 0x8018d1 <xTimerQueue>
    3b1e:	f0 91 d2 18 	lds	r31, 0x18D2	; 0x8018d2 <xTimerQueue+0x1>
    3b22:	30 97       	sbiw	r30, 0x00	; 0
    3b24:	81 f1       	breq	.+96     	; 0x3b86 <xTimerGenericCommand+0x94>
    {
        /* Send a command to the timer service task to start the xTimer timer. */
        xMessage.xMessageID = xCommandID;
    3b26:	69 83       	std	Y+1, r22	; 0x01
        xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    3b28:	2a 83       	std	Y+2, r18	; 0x02
    3b2a:	3b 83       	std	Y+3, r19	; 0x03
    3b2c:	4c 83       	std	Y+4, r20	; 0x04
    3b2e:	5d 83       	std	Y+5, r21	; 0x05
        xMessage.u.xTimerParameters.pxTimer = xTimer;
    3b30:	9f 83       	std	Y+7, r25	; 0x07
    3b32:	8e 83       	std	Y+6, r24	; 0x06

        if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    3b34:	66 30       	cpi	r22, 0x06	; 6
    3b36:	f4 f4       	brge	.+60     	; 0x3b74 <xTimerGenericCommand+0x82>
        {
            if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    3b38:	66 dc       	rcall	.-1844   	; 0x3406 <xTaskGetSchedulerState>
    3b3a:	82 30       	cpi	r24, 0x02	; 2
    3b3c:	69 f4       	brne	.+26     	; 0x3b58 <xTimerGenericCommand+0x66>
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    3b3e:	00 e0       	ldi	r16, 0x00	; 0
    3b40:	a7 01       	movw	r20, r14
    3b42:	96 01       	movw	r18, r12
    3b44:	be 01       	movw	r22, r28
    3b46:	6f 5f       	subi	r22, 0xFF	; 255
    3b48:	7f 4f       	sbci	r23, 0xFF	; 255
    3b4a:	80 91 d1 18 	lds	r24, 0x18D1	; 0x8018d1 <xTimerQueue>
    3b4e:	90 91 d2 18 	lds	r25, 0x18D2	; 0x8018d2 <xTimerQueue+0x1>
    3b52:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <xQueueGenericSend>
    3b56:	18 c0       	rjmp	.+48     	; 0x3b88 <xTimerGenericCommand+0x96>
            }
            else
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    3b58:	00 e0       	ldi	r16, 0x00	; 0
    3b5a:	20 e0       	ldi	r18, 0x00	; 0
    3b5c:	30 e0       	ldi	r19, 0x00	; 0
    3b5e:	a9 01       	movw	r20, r18
    3b60:	be 01       	movw	r22, r28
    3b62:	6f 5f       	subi	r22, 0xFF	; 255
    3b64:	7f 4f       	sbci	r23, 0xFF	; 255
    3b66:	80 91 d1 18 	lds	r24, 0x18D1	; 0x8018d1 <xTimerQueue>
    3b6a:	90 91 d2 18 	lds	r25, 0x18D2	; 0x8018d2 <xTimerQueue+0x1>
    3b6e:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <xQueueGenericSend>
    3b72:	0a c0       	rjmp	.+20     	; 0x3b88 <xTimerGenericCommand+0x96>
            }
        }
        else
        {
            xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    3b74:	20 e0       	ldi	r18, 0x00	; 0
    3b76:	a8 01       	movw	r20, r16
    3b78:	be 01       	movw	r22, r28
    3b7a:	6f 5f       	subi	r22, 0xFF	; 255
    3b7c:	7f 4f       	sbci	r23, 0xFF	; 255
    3b7e:	cf 01       	movw	r24, r30
    3b80:	0e 94 16 10 	call	0x202c	; 0x202c <xQueueGenericSendFromISR>
    3b84:	01 c0       	rjmp	.+2      	; 0x3b88 <xTimerGenericCommand+0x96>
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
    3b86:	80 e0       	ldi	r24, 0x00	; 0
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xReturn;
}
    3b88:	27 96       	adiw	r28, 0x07	; 7
    3b8a:	0f b6       	in	r0, 0x3f	; 63
    3b8c:	f8 94       	cli
    3b8e:	de bf       	out	0x3e, r29	; 62
    3b90:	0f be       	out	0x3f, r0	; 63
    3b92:	cd bf       	out	0x3d, r28	; 61
    3b94:	df 91       	pop	r29
    3b96:	cf 91       	pop	r28
    3b98:	1f 91       	pop	r17
    3b9a:	0f 91       	pop	r16
    3b9c:	ff 90       	pop	r15
    3b9e:	ef 90       	pop	r14
    3ba0:	df 90       	pop	r13
    3ba2:	cf 90       	pop	r12
    3ba4:	bf 90       	pop	r11
    3ba6:	af 90       	pop	r10
    3ba8:	9f 90       	pop	r9
    3baa:	8f 90       	pop	r8
    3bac:	08 95       	ret

00003bae <prvSampleTimeNow>:
    return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    3bae:	2f 92       	push	r2
    3bb0:	3f 92       	push	r3
    3bb2:	4f 92       	push	r4
    3bb4:	5f 92       	push	r5
    3bb6:	6f 92       	push	r6
    3bb8:	7f 92       	push	r7
    3bba:	8f 92       	push	r8
    3bbc:	9f 92       	push	r9
    3bbe:	af 92       	push	r10
    3bc0:	bf 92       	push	r11
    3bc2:	cf 92       	push	r12
    3bc4:	df 92       	push	r13
    3bc6:	ef 92       	push	r14
    3bc8:	ff 92       	push	r15
    3bca:	0f 93       	push	r16
    3bcc:	1f 93       	push	r17
    3bce:	cf 93       	push	r28
    3bd0:	df 93       	push	r29
    3bd2:	1c 01       	movw	r2, r24
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

    xTimeNow = xTaskGetTickCount();
    3bd4:	cb d8       	rcall	.-3690   	; 0x2d6c <xTaskGetTickCount>
    3bd6:	2b 01       	movw	r4, r22
    3bd8:	3c 01       	movw	r6, r24

    if( xTimeNow < xLastTime )
    3bda:	80 91 cb 18 	lds	r24, 0x18CB	; 0x8018cb <xLastTime.2432>
    3bde:	90 91 cc 18 	lds	r25, 0x18CC	; 0x8018cc <xLastTime.2432+0x1>
    3be2:	a0 91 cd 18 	lds	r26, 0x18CD	; 0x8018cd <xLastTime.2432+0x2>
    3be6:	b0 91 ce 18 	lds	r27, 0x18CE	; 0x8018ce <xLastTime.2432+0x3>
    3bea:	48 16       	cp	r4, r24
    3bec:	59 06       	cpc	r5, r25
    3bee:	6a 06       	cpc	r6, r26
    3bf0:	7b 06       	cpc	r7, r27
    3bf2:	08 f0       	brcs	.+2      	; 0x3bf6 <prvSampleTimeNow+0x48>
    3bf4:	53 c0       	rjmp	.+166    	; 0x3c9c <prvSampleTimeNow+0xee>
    3bf6:	3b c0       	rjmp	.+118    	; 0x3c6e <prvSampleTimeNow+0xc0>
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    {
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    3bf8:	07 80       	ldd	r0, Z+7	; 0x07
    3bfa:	f0 85       	ldd	r31, Z+8	; 0x08
    3bfc:	e0 2d       	mov	r30, r0
    3bfe:	80 80       	ld	r8, Z
    3c00:	91 80       	ldd	r9, Z+1	; 0x01
    3c02:	a2 80       	ldd	r10, Z+2	; 0x02
    3c04:	b3 80       	ldd	r11, Z+3	; 0x03

        /* Remove the timer from the list. */
        pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    3c06:	c0 85       	ldd	r28, Z+8	; 0x08
    3c08:	d1 85       	ldd	r29, Z+9	; 0x09
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3c0a:	8e 01       	movw	r16, r28
    3c0c:	0e 5f       	subi	r16, 0xFE	; 254
    3c0e:	1f 4f       	sbci	r17, 0xFF	; 255
    3c10:	c8 01       	movw	r24, r16
    3c12:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* Execute its callback, then send a command to restart the timer if
        it is an auto-reload timer.  It cannot be restarted here as the lists
        have not yet been switched. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3c16:	ec 89       	ldd	r30, Y+20	; 0x14
    3c18:	fd 89       	ldd	r31, Y+21	; 0x15
    3c1a:	ce 01       	movw	r24, r28
    3c1c:	19 95       	eicall

        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    3c1e:	8f 89       	ldd	r24, Y+23	; 0x17
    3c20:	82 ff       	sbrs	r24, 2
    3c22:	25 c0       	rjmp	.+74     	; 0x3c6e <prvSampleTimeNow+0xc0>
            the timer going into the same timer list then it has already expired
            and the timer should be re-inserted into the current list so it is
            processed again within this loop.  Otherwise a command should be sent
            to restart the timer to ensure it is only inserted into a list after
            the lists have been swapped. */
            xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    3c24:	8e 85       	ldd	r24, Y+14	; 0x0e
    3c26:	9f 85       	ldd	r25, Y+15	; 0x0f
    3c28:	a8 89       	ldd	r26, Y+16	; 0x10
    3c2a:	b9 89       	ldd	r27, Y+17	; 0x11
    3c2c:	88 0d       	add	r24, r8
    3c2e:	99 1d       	adc	r25, r9
    3c30:	aa 1d       	adc	r26, r10
    3c32:	bb 1d       	adc	r27, r11
            if( xReloadTime > xNextExpireTime )
    3c34:	88 16       	cp	r8, r24
    3c36:	99 06       	cpc	r9, r25
    3c38:	aa 06       	cpc	r10, r26
    3c3a:	bb 06       	cpc	r11, r27
    3c3c:	70 f4       	brcc	.+28     	; 0x3c5a <prvSampleTimeNow+0xac>
            {
                listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    3c3e:	8a 83       	std	Y+2, r24	; 0x02
    3c40:	9b 83       	std	Y+3, r25	; 0x03
    3c42:	ac 83       	std	Y+4, r26	; 0x04
    3c44:	bd 83       	std	Y+5, r27	; 0x05
                listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    3c46:	db 87       	std	Y+11, r29	; 0x0b
    3c48:	ca 87       	std	Y+10, r28	; 0x0a
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    3c4a:	b8 01       	movw	r22, r16
    3c4c:	80 91 d5 18 	lds	r24, 0x18D5	; 0x8018d5 <pxCurrentTimerList>
    3c50:	90 91 d6 18 	lds	r25, 0x18D6	; 0x8018d6 <pxCurrentTimerList+0x1>
    3c54:	0e 94 3f 0c 	call	0x187e	; 0x187e <vListInsert>
    3c58:	0a c0       	rjmp	.+20     	; 0x3c6e <prvSampleTimeNow+0xc0>
            }
            else
            {
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    3c5a:	c1 2c       	mov	r12, r1
    3c5c:	d1 2c       	mov	r13, r1
    3c5e:	76 01       	movw	r14, r12
    3c60:	00 e0       	ldi	r16, 0x00	; 0
    3c62:	10 e0       	ldi	r17, 0x00	; 0
    3c64:	a5 01       	movw	r20, r10
    3c66:	94 01       	movw	r18, r8
    3c68:	60 e0       	ldi	r22, 0x00	; 0
    3c6a:	ce 01       	movw	r24, r28
    3c6c:	42 df       	rcall	.-380    	; 0x3af2 <xTimerGenericCommand>

    /* The tick count has overflowed.  The timer lists must be switched.
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    3c6e:	e0 91 d5 18 	lds	r30, 0x18D5	; 0x8018d5 <pxCurrentTimerList>
    3c72:	f0 91 d6 18 	lds	r31, 0x18D6	; 0x8018d6 <pxCurrentTimerList+0x1>
    3c76:	80 81       	ld	r24, Z
    3c78:	81 11       	cpse	r24, r1
    3c7a:	be cf       	rjmp	.-132    	; 0x3bf8 <prvSampleTimeNow+0x4a>
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxTemp = pxCurrentTimerList;
    pxCurrentTimerList = pxOverflowTimerList;
    3c7c:	80 91 d3 18 	lds	r24, 0x18D3	; 0x8018d3 <pxOverflowTimerList>
    3c80:	90 91 d4 18 	lds	r25, 0x18D4	; 0x8018d4 <pxOverflowTimerList+0x1>
    3c84:	90 93 d6 18 	sts	0x18D6, r25	; 0x8018d6 <pxCurrentTimerList+0x1>
    3c88:	80 93 d5 18 	sts	0x18D5, r24	; 0x8018d5 <pxCurrentTimerList>
    pxOverflowTimerList = pxTemp;
    3c8c:	f0 93 d4 18 	sts	0x18D4, r31	; 0x8018d4 <pxOverflowTimerList+0x1>
    3c90:	e0 93 d3 18 	sts	0x18D3, r30	; 0x8018d3 <pxOverflowTimerList>
    xTimeNow = xTaskGetTickCount();

    if( xTimeNow < xLastTime )
    {
        prvSwitchTimerLists();
        *pxTimerListsWereSwitched = pdTRUE;
    3c94:	81 e0       	ldi	r24, 0x01	; 1
    3c96:	f1 01       	movw	r30, r2
    3c98:	80 83       	st	Z, r24
    3c9a:	02 c0       	rjmp	.+4      	; 0x3ca0 <prvSampleTimeNow+0xf2>
    }
    else
    {
        *pxTimerListsWereSwitched = pdFALSE;
    3c9c:	f1 01       	movw	r30, r2
    3c9e:	10 82       	st	Z, r1
    }

    xLastTime = xTimeNow;
    3ca0:	40 92 cb 18 	sts	0x18CB, r4	; 0x8018cb <xLastTime.2432>
    3ca4:	50 92 cc 18 	sts	0x18CC, r5	; 0x8018cc <xLastTime.2432+0x1>
    3ca8:	60 92 cd 18 	sts	0x18CD, r6	; 0x8018cd <xLastTime.2432+0x2>
    3cac:	70 92 ce 18 	sts	0x18CE, r7	; 0x8018ce <xLastTime.2432+0x3>

    return xTimeNow;
}
    3cb0:	c3 01       	movw	r24, r6
    3cb2:	b2 01       	movw	r22, r4
    3cb4:	df 91       	pop	r29
    3cb6:	cf 91       	pop	r28
    3cb8:	1f 91       	pop	r17
    3cba:	0f 91       	pop	r16
    3cbc:	ff 90       	pop	r15
    3cbe:	ef 90       	pop	r14
    3cc0:	df 90       	pop	r13
    3cc2:	cf 90       	pop	r12
    3cc4:	bf 90       	pop	r11
    3cc6:	af 90       	pop	r10
    3cc8:	9f 90       	pop	r9
    3cca:	8f 90       	pop	r8
    3ccc:	7f 90       	pop	r7
    3cce:	6f 90       	pop	r6
    3cd0:	5f 90       	pop	r5
    3cd2:	4f 90       	pop	r4
    3cd4:	3f 90       	pop	r3
    3cd6:	2f 90       	pop	r2
    3cd8:	08 95       	ret

00003cda <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    3cda:	08 95       	ret

00003cdc <vApplicationMallocFailedHook>:
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    3cdc:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    3cde:	2f 9a       	sbi	0x05, 7	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3ce0:	2f ef       	ldi	r18, 0xFF	; 255
    3ce2:	80 e7       	ldi	r24, 0x70	; 112
    3ce4:	92 e0       	ldi	r25, 0x02	; 2
    3ce6:	21 50       	subi	r18, 0x01	; 1
    3ce8:	80 40       	sbci	r24, 0x00	; 0
    3cea:	90 40       	sbci	r25, 0x00	; 0
    3cec:	e1 f7       	brne	.-8      	; 0x3ce6 <vApplicationMallocFailedHook+0xa>
    3cee:	00 c0       	rjmp	.+0      	; 0x3cf0 <vApplicationMallocFailedHook+0x14>
    3cf0:	00 00       	nop
    for(;;)
    {
        _delay_ms(50);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED fast blink.
    3cf2:	1f 9a       	sbi	0x03, 7	; 3
    3cf4:	f5 cf       	rjmp	.-22     	; 0x3ce0 <vApplicationMallocFailedHook+0x4>

00003cf6 <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook( TaskHandle_t xTask, portCHAR *pcTaskName ) __attribute__((weak));

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)), portCHAR *pcTaskName __attribute__((unused))  )
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    3cf6:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    3cf8:	2f 9a       	sbi	0x05, 7	; 5
    3cfa:	2f ef       	ldi	r18, 0xFF	; 255
    3cfc:	87 ea       	ldi	r24, 0xA7	; 167
    3cfe:	91 e6       	ldi	r25, 0x61	; 97
    3d00:	21 50       	subi	r18, 0x01	; 1
    3d02:	80 40       	sbci	r24, 0x00	; 0
    3d04:	90 40       	sbci	r25, 0x00	; 0
    3d06:	e1 f7       	brne	.-8      	; 0x3d00 <vApplicationStackOverflowHook+0xa>
    3d08:	00 c0       	rjmp	.+0      	; 0x3d0a <vApplicationStackOverflowHook+0x14>
    3d0a:	00 00       	nop
    for(;;)
    {
        _delay_ms(2000);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED slow blink.
    3d0c:	1f 9a       	sbi	0x03, 7	; 3
    3d0e:	f5 cf       	rjmp	.-22     	; 0x3cfa <vApplicationStackOverflowHook+0x4>

00003d10 <create_tasks_and_semaphores>:
// Prototype for LoRaWAN handler
void lora_handler_create(UBaseType_t lora_handler_task_priority);

/*-----------------------------------------------------------*/
void create_tasks_and_semaphores(void)
{
    3d10:	8f 92       	push	r8
    3d12:	9f 92       	push	r9
    3d14:	af 92       	push	r10
    3d16:	bf 92       	push	r11
    3d18:	cf 92       	push	r12
    3d1a:	df 92       	push	r13
    3d1c:	ef 92       	push	r14
    3d1e:	ff 92       	push	r15
    3d20:	0f 93       	push	r16
    3d22:	1f 93       	push	r17
    3d24:	cf 93       	push	r28
    3d26:	df 93       	push	r29
	configuration_create(_semaphore);
    3d28:	80 91 4b 1a 	lds	r24, 0x1A4B	; 0x801a4b <_semaphore>
    3d2c:	90 91 4c 1a 	lds	r25, 0x1A4C	; 0x801a4c <_semaphore+0x1>
    3d30:	0e 94 43 03 	call	0x686	; 0x686 <configuration_create>
	
	humAndTempReader_t humidityAndTemperature = humAndTempReader_create(TASK_HUMIDITY_SENSOR_PRIORITY, HUMIDITY_TASK_STACK, 
    3d34:	e0 90 4f 1a 	lds	r14, 0x1A4F	; 0x801a4f <readyEventGroup>
    3d38:	f0 90 50 1a 	lds	r15, 0x1A50	; 0x801a50 <readyEventGroup+0x1>
    3d3c:	40 91 67 1a 	lds	r20, 0x1A67	; 0x801a67 <startMeasureEventGroup>
    3d40:	50 91 68 1a 	lds	r21, 0x1A68	; 0x801a68 <startMeasureEventGroup+0x1>
    3d44:	a1 2c       	mov	r10, r1
    3d46:	b1 2c       	mov	r11, r1
    3d48:	65 01       	movw	r12, r10
    3d4a:	68 94       	set
    3d4c:	a4 f8       	bld	r10, 4
    3d4e:	01 e0       	ldi	r16, 0x01	; 1
    3d50:	10 e0       	ldi	r17, 0x00	; 0
    3d52:	20 e0       	ldi	r18, 0x00	; 0
    3d54:	30 e0       	ldi	r19, 0x00	; 0
    3d56:	60 ec       	ldi	r22, 0xC0	; 192
    3d58:	82 e0       	ldi	r24, 0x02	; 2
    3d5a:	0e 94 8b 06 	call	0xd16	; 0xd16 <humAndTempReader_create>
    3d5e:	c8 2f       	mov	r28, r24
    3d60:	d9 2f       	mov	r29, r25
	startMeasureEventGroup, BIT_MEASURE_HUMIDITY, readyEventGroup, BIT_DONE_MEASURE_HUMIDITY);
	
	co2reader_t co2reader = co2Reader_create(TASK_CO2_SENSOR_PRIORITY, CO2_TASK_STACK, startMeasureEventGroup, BIT_MEASURE_CO2,
    3d62:	e0 90 4f 1a 	lds	r14, 0x1A4F	; 0x801a4f <readyEventGroup>
    3d66:	f0 90 50 1a 	lds	r15, 0x1A50	; 0x801a50 <readyEventGroup+0x1>
    3d6a:	40 91 67 1a 	lds	r20, 0x1A67	; 0x801a67 <startMeasureEventGroup>
    3d6e:	50 91 68 1a 	lds	r21, 0x1A68	; 0x801a68 <startMeasureEventGroup+0x1>
    3d72:	a1 2c       	mov	r10, r1
    3d74:	b1 2c       	mov	r11, r1
    3d76:	65 01       	movw	r12, r10
    3d78:	68 94       	set
    3d7a:	a5 f8       	bld	r10, 5
    3d7c:	08 e0       	ldi	r16, 0x08	; 8
    3d7e:	10 e0       	ldi	r17, 0x00	; 0
    3d80:	20 e0       	ldi	r18, 0x00	; 0
    3d82:	30 e0       	ldi	r19, 0x00	; 0
    3d84:	60 ec       	ldi	r22, 0xC0	; 192
    3d86:	82 e0       	ldi	r24, 0x02	; 2
    3d88:	0e 94 86 02 	call	0x50c	; 0x50c <co2Reader_create>
    3d8c:	4c 01       	movw	r8, r24
	readyEventGroup, BIT_DONE_MEASURE_CO2);
	
	soundReader_t soundReader = soundReader_create(TASK_SOUND_SENSOR_PRIORITY, SOUND_TASK_STACK, startMeasureEventGroup, BIT_MEASURE_SOUND,
    3d8e:	e0 90 4f 1a 	lds	r14, 0x1A4F	; 0x801a4f <readyEventGroup>
    3d92:	f0 90 50 1a 	lds	r15, 0x1A50	; 0x801a50 <readyEventGroup+0x1>
    3d96:	40 91 67 1a 	lds	r20, 0x1A67	; 0x801a67 <startMeasureEventGroup>
    3d9a:	50 91 68 1a 	lds	r21, 0x1A68	; 0x801a68 <startMeasureEventGroup+0x1>
    3d9e:	a1 2c       	mov	r10, r1
    3da0:	b1 2c       	mov	r11, r1
    3da2:	65 01       	movw	r12, r10
    3da4:	68 94       	set
    3da6:	a6 f8       	bld	r10, 6
    3da8:	04 e0       	ldi	r16, 0x04	; 4
    3daa:	10 e0       	ldi	r17, 0x00	; 0
    3dac:	20 e0       	ldi	r18, 0x00	; 0
    3dae:	30 e0       	ldi	r19, 0x00	; 0
    3db0:	60 ec       	ldi	r22, 0xC0	; 192
    3db2:	82 e0       	ldi	r24, 0x02	; 2
    3db4:	0e 94 6d 07 	call	0xeda	; 0xeda <soundReader_create>
    3db8:	18 2f       	mov	r17, r24
    3dba:	09 2f       	mov	r16, r25
	readyEventGroup, BIT_DONE_MEASURE_SOUND);	
	
	servo_initialise();
    3dbc:	0e 94 60 07 	call	0xec0	; 0xec0 <servo_initialise>
	
	device_create(TASK_DEVICE_PRIORITY, DEVICE_TASK_STACK, startMeasureEventGroup, ALL_BIT_MEASURE,
    3dc0:	e0 90 4f 1a 	lds	r14, 0x1A4F	; 0x801a4f <readyEventGroup>
    3dc4:	f0 90 50 1a 	lds	r15, 0x1A50	; 0x801a50 <readyEventGroup+0x1>
    3dc8:	40 91 67 1a 	lds	r20, 0x1A67	; 0x801a67 <startMeasureEventGroup>
    3dcc:	50 91 68 1a 	lds	r21, 0x1A68	; 0x801a68 <startMeasureEventGroup+0x1>
    3dd0:	80 91 4a 1a 	lds	r24, 0x1A4A	; 0x801a4a <xMessageBuffer+0x1>
    3dd4:	8f 93       	push	r24
    3dd6:	80 91 49 1a 	lds	r24, 0x1A49	; 0x801a49 <xMessageBuffer>
    3dda:	8f 93       	push	r24
    3ddc:	0f 93       	push	r16
    3dde:	1f 93       	push	r17
    3de0:	df 93       	push	r29
    3de2:	cf 93       	push	r28
    3de4:	0f 2e       	mov	r0, r31
    3de6:	f0 e7       	ldi	r31, 0x70	; 112
    3de8:	af 2e       	mov	r10, r31
    3dea:	b1 2c       	mov	r11, r1
    3dec:	c1 2c       	mov	r12, r1
    3dee:	d1 2c       	mov	r13, r1
    3df0:	f0 2d       	mov	r31, r0
    3df2:	0d e0       	ldi	r16, 0x0D	; 13
    3df4:	10 e0       	ldi	r17, 0x00	; 0
    3df6:	20 e0       	ldi	r18, 0x00	; 0
    3df8:	30 e0       	ldi	r19, 0x00	; 0
    3dfa:	60 ec       	ldi	r22, 0xC0	; 192
    3dfc:	84 e0       	ldi	r24, 0x04	; 4
    3dfe:	0e 94 51 04 	call	0x8a2	; 0x8a2 <device_create>
	readyEventGroup, ALL_BIT_DONE_MEASURE, co2reader, humidityAndTemperature,soundReader, xMessageBuffer);
	
	lora_UpLinkHandler_create(TASK_LORA_DRIVER_PRIORITY,xMessageBuffer);
    3e02:	60 91 49 1a 	lds	r22, 0x1A49	; 0x801a49 <xMessageBuffer>
    3e06:	70 91 4a 1a 	lds	r23, 0x1A4A	; 0x801a4a <xMessageBuffer+0x1>
    3e0a:	81 e0       	ldi	r24, 0x01	; 1
    3e0c:	0e 94 25 08 	call	0x104a	; 0x104a <lora_UpLinkHandler_create>
	lora_DownLinkHandler_create(TASK_LORA_DRIVER_PRIORITYDOWN,_downlinkMessagebuffer);
    3e10:	60 91 4d 1a 	lds	r22, 0x1A4D	; 0x801a4d <_downlinkMessagebuffer>
    3e14:	70 91 4e 1a 	lds	r23, 0x1A4E	; 0x801a4e <_downlinkMessagebuffer+0x1>
    3e18:	81 e0       	ldi	r24, 0x01	; 1
    3e1a:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <lora_DownLinkHandler_create>
}
    3e1e:	0f 90       	pop	r0
    3e20:	0f 90       	pop	r0
    3e22:	0f 90       	pop	r0
    3e24:	0f 90       	pop	r0
    3e26:	0f 90       	pop	r0
    3e28:	0f 90       	pop	r0
    3e2a:	df 91       	pop	r29
    3e2c:	cf 91       	pop	r28
    3e2e:	1f 91       	pop	r17
    3e30:	0f 91       	pop	r16
    3e32:	ff 90       	pop	r15
    3e34:	ef 90       	pop	r14
    3e36:	df 90       	pop	r13
    3e38:	cf 90       	pop	r12
    3e3a:	bf 90       	pop	r11
    3e3c:	af 90       	pop	r10
    3e3e:	9f 90       	pop	r9
    3e40:	8f 90       	pop	r8
    3e42:	08 95       	ret

00003e44 <initialiseSystem>:

/*-----------------------------------------------------------*/
void initialiseSystem()
{
	startMeasureEventGroup = xEventGroupCreate();
    3e44:	0e 94 66 09 	call	0x12cc	; 0x12cc <xEventGroupCreate>
    3e48:	90 93 68 1a 	sts	0x1A68, r25	; 0x801a68 <startMeasureEventGroup+0x1>
    3e4c:	80 93 67 1a 	sts	0x1A67, r24	; 0x801a67 <startMeasureEventGroup>
	readyEventGroup = xEventGroupCreate();
    3e50:	0e 94 66 09 	call	0x12cc	; 0x12cc <xEventGroupCreate>
    3e54:	90 93 50 1a 	sts	0x1A50, r25	; 0x801a50 <readyEventGroup+0x1>
    3e58:	80 93 4f 1a 	sts	0x1A4F, r24	; 0x801a4f <readyEventGroup>

	xMessageBuffer = xMessageBufferCreate(100);
    3e5c:	41 e0       	ldi	r20, 0x01	; 1
    3e5e:	60 e0       	ldi	r22, 0x00	; 0
    3e60:	70 e0       	ldi	r23, 0x00	; 0
    3e62:	84 e6       	ldi	r24, 0x64	; 100
    3e64:	90 e0       	ldi	r25, 0x00	; 0
    3e66:	0e 94 b8 12 	call	0x2570	; 0x2570 <xStreamBufferGenericCreate>
    3e6a:	90 93 4a 1a 	sts	0x1A4A, r25	; 0x801a4a <xMessageBuffer+0x1>
    3e6e:	80 93 49 1a 	sts	0x1A49, r24	; 0x801a49 <xMessageBuffer>
	_semaphore = xSemaphoreCreateMutex();
    3e72:	81 e0       	ldi	r24, 0x01	; 1
    3e74:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <xQueueCreateMutex>
    3e78:	90 93 4c 1a 	sts	0x1A4C, r25	; 0x801a4c <_semaphore+0x1>
    3e7c:	80 93 4b 1a 	sts	0x1A4B, r24	; 0x801a4b <_semaphore>
	_downlinkMessagebuffer = xMessageBufferCreate(sizeof(lora_payload_t)*2);
    3e80:	41 e0       	ldi	r20, 0x01	; 1
    3e82:	60 e0       	ldi	r22, 0x00	; 0
    3e84:	70 e0       	ldi	r23, 0x00	; 0
    3e86:	8c e2       	ldi	r24, 0x2C	; 44
    3e88:	90 e0       	ldi	r25, 0x00	; 0
    3e8a:	0e 94 b8 12 	call	0x2570	; 0x2570 <xStreamBufferGenericCreate>
    3e8e:	90 93 4e 1a 	sts	0x1A4E, r25	; 0x801a4e <_downlinkMessagebuffer+0x1>
    3e92:	80 93 4d 1a 	sts	0x1A4D, r24	; 0x801a4d <_downlinkMessagebuffer>
	// Set output ports for leds used in the example
	DDRA |= _BV(DDA0) | _BV(DDA7);
    3e96:	81 b1       	in	r24, 0x01	; 1
    3e98:	81 68       	ori	r24, 0x81	; 129
    3e9a:	81 b9       	out	0x01, r24	; 1
	//// Initialise the trace-driver to be used together with the R2R-Network
	//trace_init();
	// Make it possible to use stdio on COM port 0 (USB) on Arduino board - Setting 57600,8,N,1
	stdioCreate(ser_USART0);
    3e9c:	80 e0       	ldi	r24, 0x00	; 0
    3e9e:	0e 94 57 2b 	call	0x56ae	; 0x56ae <stdioCreate>
	
	
	
	// vvvvvvvvvvvvvvvvv BELOW IS LoRaWAN initialisation vvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
	// Initialise the HAL layer and use 5 for LED driver priority
	hal_create(5);
    3ea2:	85 e0       	ldi	r24, 0x05	; 5
    3ea4:	10 d0       	rcall	.+32     	; 0x3ec6 <hal_create>
	// Initialise the LoRaWAN driver with a down-link buffer
	
	
	lora_driver_create(LORA_USART, _downlinkMessagebuffer);
    3ea6:	60 91 4d 1a 	lds	r22, 0x1A4D	; 0x801a4d <_downlinkMessagebuffer>
    3eaa:	70 91 4e 1a 	lds	r23, 0x1A4E	; 0x801a4e <_downlinkMessagebuffer+0x1>
    3eae:	81 e0       	ldi	r24, 0x01	; 1
    3eb0:	c2 c3       	rjmp	.+1924   	; 0x4636 <lora_driver_create>
    3eb2:	08 95       	ret

00003eb4 <main>:
	
}
/*-----------------------------------------------------------*/
int main(void)
{
	initialiseSystem(); // Must be done as the very first thing!!
    3eb4:	c7 df       	rcall	.-114    	; 0x3e44 <initialiseSystem>
	create_tasks_and_semaphores();
    3eb6:	2c df       	rcall	.-424    	; 0x3d10 <create_tasks_and_semaphores>
    3eb8:	8a ec       	ldi	r24, 0xCA	; 202
	printf("Program Started!!\n");
    3eba:	94 e0       	ldi	r25, 0x04	; 4
    3ebc:	0e 94 80 31 	call	0x6300	; 0x6300 <puts>
    3ec0:	0e 94 74 16 	call	0x2ce8	; 0x2ce8 <vTaskStartScheduler>
	vTaskStartScheduler(); // Initialise and run the freeRTOS scheduler. Execution should never return from here.
    3ec4:	ff cf       	rjmp	.-2      	; 0x3ec4 <main+0x10>

00003ec6 <hal_create>:
    3ec6:	e9 e6       	ldi	r30, 0x69	; 105
    3ec8:	fa e1       	ldi	r31, 0x1A	; 26
    3eca:	20 e7       	ldi	r18, 0x70	; 112
    3ecc:	36 e2       	ldi	r19, 0x26	; 38
    3ece:	31 83       	std	Z+1, r19	; 0x01
    3ed0:	20 83       	st	Z, r18
    3ed2:	23 e7       	ldi	r18, 0x73	; 115
    3ed4:	36 e2       	ldi	r19, 0x26	; 38
    3ed6:	33 83       	std	Z+3, r19	; 0x03
    3ed8:	22 83       	std	Z+2, r18	; 0x02
    3eda:	2e e7       	ldi	r18, 0x7E	; 126
    3edc:	36 e2       	ldi	r19, 0x26	; 38
    3ede:	35 83       	std	Z+5, r19	; 0x05
    3ee0:	24 83       	std	Z+4, r18	; 0x04
    3ee2:	22 e8       	ldi	r18, 0x82	; 130
    3ee4:	36 e2       	ldi	r19, 0x26	; 38
    3ee6:	37 83       	std	Z+7, r19	; 0x07
    3ee8:	26 83       	std	Z+6, r18	; 0x06
    3eea:	28 e8       	ldi	r18, 0x88	; 136
    3eec:	36 e2       	ldi	r19, 0x26	; 38
    3eee:	31 87       	std	Z+9, r19	; 0x09
    3ef0:	20 87       	std	Z+8, r18	; 0x08
    3ef2:	24 e9       	ldi	r18, 0x94	; 148
    3ef4:	36 e2       	ldi	r19, 0x26	; 38
    3ef6:	33 87       	std	Z+11, r19	; 0x0b
    3ef8:	22 87       	std	Z+10, r18	; 0x0a
    3efa:	29 e9       	ldi	r18, 0x99	; 153
    3efc:	36 e2       	ldi	r19, 0x26	; 38
    3efe:	35 87       	std	Z+13, r19	; 0x0d
    3f00:	24 87       	std	Z+12, r18	; 0x0c
    3f02:	25 ea       	ldi	r18, 0xA5	; 165
    3f04:	36 e2       	ldi	r19, 0x26	; 38
    3f06:	37 87       	std	Z+15, r19	; 0x0f
    3f08:	26 87       	std	Z+14, r18	; 0x0e
    3f0a:	25 e8       	ldi	r18, 0x85	; 133
    3f0c:	36 e2       	ldi	r19, 0x26	; 38
    3f0e:	31 8b       	std	Z+17, r19	; 0x11
    3f10:	20 8b       	std	Z+16, r18	; 0x10
    3f12:	2a ea       	ldi	r18, 0xAA	; 170
    3f14:	36 e2       	ldi	r19, 0x26	; 38
    3f16:	33 8b       	std	Z+19, r19	; 0x13
    3f18:	22 8b       	std	Z+18, r18	; 0x12
    3f1a:	27 eb       	ldi	r18, 0xB7	; 183
    3f1c:	36 e2       	ldi	r19, 0x26	; 38
    3f1e:	35 8b       	std	Z+21, r19	; 0x15
    3f20:	24 8b       	std	Z+20, r18	; 0x14
    3f22:	68 2f       	mov	r22, r24
    3f24:	cf 01       	movw	r24, r30
    3f26:	53 c1       	rjmp	.+678    	; 0x41ce <led_create>
    3f28:	08 95       	ret

00003f2a <_hihTwiCallback>:
    3f2a:	65 30       	cpi	r22, 0x05	; 5
    3f2c:	f1 f4       	brne	.+60     	; 0x3f6a <_hihTwiCallback+0x40>
    3f2e:	fa 01       	movw	r30, r20
    3f30:	80 81       	ld	r24, Z
    3f32:	8f 73       	andi	r24, 0x3F	; 63
    3f34:	90 e0       	ldi	r25, 0x00	; 0
    3f36:	98 2f       	mov	r25, r24
    3f38:	88 27       	eor	r24, r24
    3f3a:	21 81       	ldd	r18, Z+1	; 0x01
    3f3c:	82 2b       	or	r24, r18
    3f3e:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <_hum+0x1>
    3f42:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <_hum>
    3f46:	82 81       	ldd	r24, Z+2	; 0x02
    3f48:	f0 e4       	ldi	r31, 0x40	; 64
    3f4a:	8f 9f       	mul	r24, r31
    3f4c:	c0 01       	movw	r24, r0
    3f4e:	11 24       	eor	r1, r1
    3f50:	fa 01       	movw	r30, r20
    3f52:	23 81       	ldd	r18, Z+3	; 0x03
    3f54:	26 95       	lsr	r18
    3f56:	26 95       	lsr	r18
    3f58:	82 2b       	or	r24, r18
    3f5a:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <_temp+0x1>
    3f5e:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <_temp>
    3f62:	81 e0       	ldi	r24, 0x01	; 1
    3f64:	80 93 ed 18 	sts	0x18ED, r24	; 0x8018ed <_measuringIsReady>
    3f68:	08 95       	ret
    3f6a:	64 30       	cpi	r22, 0x04	; 4
    3f6c:	51 f0       	breq	.+20     	; 0x3f82 <_hihTwiCallback+0x58>
    3f6e:	80 e0       	ldi	r24, 0x00	; 0
    3f70:	90 e4       	ldi	r25, 0x40	; 64
    3f72:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <_temp+0x1>
    3f76:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <_temp>
    3f7a:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <_hum+0x1>
    3f7e:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <_hum>
    3f82:	08 95       	ret

00003f84 <hih8120Create>:
    3f84:	0f 93       	push	r16
    3f86:	1f 93       	push	r17
    3f88:	05 e9       	ldi	r16, 0x95	; 149
    3f8a:	1f e1       	ldi	r17, 0x1F	; 31
    3f8c:	20 e0       	ldi	r18, 0x00	; 0
    3f8e:	34 e2       	ldi	r19, 0x24	; 36
    3f90:	44 ef       	ldi	r20, 0xF4	; 244
    3f92:	50 e0       	ldi	r21, 0x00	; 0
    3f94:	60 e0       	ldi	r22, 0x00	; 0
    3f96:	87 e2       	ldi	r24, 0x27	; 39
    3f98:	0e 94 91 2b 	call	0x5722	; 0x5722 <twiCreate>
    3f9c:	90 93 ef 18 	sts	0x18EF, r25	; 0x8018ef <_hih8120Handler+0x1>
    3fa0:	80 93 ee 18 	sts	0x18EE, r24	; 0x8018ee <_hih8120Handler>
    3fa4:	21 e0       	ldi	r18, 0x01	; 1
    3fa6:	89 2b       	or	r24, r25
    3fa8:	09 f0       	breq	.+2      	; 0x3fac <hih8120Create+0x28>
    3faa:	20 e0       	ldi	r18, 0x00	; 0
    3fac:	82 2f       	mov	r24, r18
    3fae:	1f 91       	pop	r17
    3fb0:	0f 91       	pop	r16
    3fb2:	08 95       	ret

00003fb4 <hih8120IsReady>:
    3fb4:	80 91 ed 18 	lds	r24, 0x18ED	; 0x8018ed <_measuringIsReady>
    3fb8:	08 95       	ret

00003fba <hih8120Wakeup>:
    3fba:	80 91 ee 18 	lds	r24, 0x18EE	; 0x8018ee <_hih8120Handler>
    3fbe:	90 91 ef 18 	lds	r25, 0x18EF	; 0x8018ef <_hih8120Handler+0x1>
    3fc2:	00 97       	sbiw	r24, 0x00	; 0
    3fc4:	59 f0       	breq	.+22     	; 0x3fdc <hih8120Wakeup+0x22>
    3fc6:	40 e0       	ldi	r20, 0x00	; 0
    3fc8:	60 e0       	ldi	r22, 0x00	; 0
    3fca:	70 e0       	ldi	r23, 0x00	; 0
    3fcc:	0e 94 e2 2b 	call	0x57c4	; 0x57c4 <twiTransmit>
    3fd0:	84 30       	cpi	r24, 0x04	; 4
    3fd2:	31 f4       	brne	.+12     	; 0x3fe0 <hih8120Wakeup+0x26>
    3fd4:	10 92 ed 18 	sts	0x18ED, r1	; 0x8018ed <_measuringIsReady>
    3fd8:	80 e0       	ldi	r24, 0x00	; 0
    3fda:	08 95       	ret
    3fdc:	82 e0       	ldi	r24, 0x02	; 2
    3fde:	08 95       	ret
    3fe0:	83 e0       	ldi	r24, 0x03	; 3
    3fe2:	08 95       	ret

00003fe4 <hih8120Meassure>:
    3fe4:	80 91 ee 18 	lds	r24, 0x18EE	; 0x8018ee <_hih8120Handler>
    3fe8:	90 91 ef 18 	lds	r25, 0x18EF	; 0x8018ef <_hih8120Handler+0x1>
    3fec:	00 97       	sbiw	r24, 0x00	; 0
    3fee:	39 f0       	breq	.+14     	; 0x3ffe <hih8120Meassure+0x1a>
    3ff0:	64 e0       	ldi	r22, 0x04	; 4
    3ff2:	0e 94 2e 2c 	call	0x585c	; 0x585c <twiReceive>
    3ff6:	85 30       	cpi	r24, 0x05	; 5
    3ff8:	21 f0       	breq	.+8      	; 0x4002 <hih8120Meassure+0x1e>
    3ffa:	83 e0       	ldi	r24, 0x03	; 3
    3ffc:	08 95       	ret
    3ffe:	82 e0       	ldi	r24, 0x02	; 2
    4000:	08 95       	ret
    4002:	80 e0       	ldi	r24, 0x00	; 0
    4004:	08 95       	ret

00004006 <hih8120GetHumidity>:
    4006:	60 91 0c 02 	lds	r22, 0x020C	; 0x80020c <_hum>
    400a:	70 91 0d 02 	lds	r23, 0x020D	; 0x80020d <_hum+0x1>
    400e:	80 e0       	ldi	r24, 0x00	; 0
    4010:	90 e0       	ldi	r25, 0x00	; 0
    4012:	0e 94 38 2e 	call	0x5c70	; 0x5c70 <__floatunsisf>
    4016:	20 e0       	ldi	r18, 0x00	; 0
    4018:	30 e0       	ldi	r19, 0x00	; 0
    401a:	48 ec       	ldi	r20, 0xC8	; 200
    401c:	52 e4       	ldi	r21, 0x42	; 66
    401e:	0e 94 c6 2e 	call	0x5d8c	; 0x5d8c <__mulsf3>
    4022:	20 e0       	ldi	r18, 0x00	; 0
    4024:	38 ef       	ldi	r19, 0xF8	; 248
    4026:	4f e7       	ldi	r20, 0x7F	; 127
    4028:	56 e4       	ldi	r21, 0x46	; 70
    402a:	0c 94 9f 2d 	jmp	0x5b3e	; 0x5b3e <__divsf3>
    402e:	08 95       	ret

00004030 <hih8120GetHumidityPercent_x10>:
    4030:	ea df       	rcall	.-44     	; 0x4006 <hih8120GetHumidity>
    4032:	20 e0       	ldi	r18, 0x00	; 0
    4034:	30 e0       	ldi	r19, 0x00	; 0
    4036:	40 e2       	ldi	r20, 0x20	; 32
    4038:	51 e4       	ldi	r21, 0x41	; 65
    403a:	0e 94 c6 2e 	call	0x5d8c	; 0x5d8c <__mulsf3>
    403e:	0e 94 0c 2e 	call	0x5c18	; 0x5c18 <__fixunssfsi>
    4042:	cb 01       	movw	r24, r22
    4044:	08 95       	ret

00004046 <hih8120GetTemperature>:
    4046:	60 91 0a 02 	lds	r22, 0x020A	; 0x80020a <_temp>
    404a:	70 91 0b 02 	lds	r23, 0x020B	; 0x80020b <_temp+0x1>
    404e:	80 e0       	ldi	r24, 0x00	; 0
    4050:	90 e0       	ldi	r25, 0x00	; 0
    4052:	0e 94 38 2e 	call	0x5c70	; 0x5c70 <__floatunsisf>
    4056:	20 e0       	ldi	r18, 0x00	; 0
    4058:	30 e0       	ldi	r19, 0x00	; 0
    405a:	45 e2       	ldi	r20, 0x25	; 37
    405c:	53 e4       	ldi	r21, 0x43	; 67
    405e:	0e 94 c6 2e 	call	0x5d8c	; 0x5d8c <__mulsf3>
    4062:	20 e0       	ldi	r18, 0x00	; 0
    4064:	38 ef       	ldi	r19, 0xF8	; 248
    4066:	4f e7       	ldi	r20, 0x7F	; 127
    4068:	56 e4       	ldi	r21, 0x46	; 70
    406a:	0e 94 9f 2d 	call	0x5b3e	; 0x5b3e <__divsf3>
    406e:	20 e0       	ldi	r18, 0x00	; 0
    4070:	30 e0       	ldi	r19, 0x00	; 0
    4072:	40 e2       	ldi	r20, 0x20	; 32
    4074:	52 e4       	ldi	r21, 0x42	; 66
    4076:	0c 94 3a 2d 	jmp	0x5a74	; 0x5a74 <__subsf3>
    407a:	08 95       	ret

0000407c <hih8120GetTemperature_x10>:
    407c:	e4 df       	rcall	.-56     	; 0x4046 <hih8120GetTemperature>
    407e:	20 e0       	ldi	r18, 0x00	; 0
    4080:	30 e0       	ldi	r19, 0x00	; 0
    4082:	40 e2       	ldi	r20, 0x20	; 32
    4084:	51 e4       	ldi	r21, 0x41	; 65
    4086:	0e 94 c6 2e 	call	0x5d8c	; 0x5d8c <__mulsf3>
    408a:	0e 94 07 2e 	call	0x5c0e	; 0x5c0e <__fixsfsi>
    408e:	cb 01       	movw	r24, r22
    4090:	08 95       	ret

00004092 <_turn_off>:
    4092:	cf 93       	push	r28
    4094:	df 93       	push	r29
    4096:	90 e0       	ldi	r25, 0x00	; 0
    4098:	fc 01       	movw	r30, r24
    409a:	ee 0f       	add	r30, r30
    409c:	ff 1f       	adc	r31, r31
    409e:	e8 0f       	add	r30, r24
    40a0:	f9 1f       	adc	r31, r25
    40a2:	ee 0f       	add	r30, r30
    40a4:	ff 1f       	adc	r31, r31
    40a6:	e0 51       	subi	r30, 0x10	; 16
    40a8:	f7 4e       	sbci	r31, 0xE7	; 231
    40aa:	23 81       	ldd	r18, Z+3	; 0x03
    40ac:	21 11       	cpse	r18, r1
    40ae:	0a c0       	rjmp	.+20     	; 0x40c4 <_turn_off+0x32>
    40b0:	ef 01       	movw	r28, r30
    40b2:	e0 91 71 1a 	lds	r30, 0x1A71	; 0x801a71 <register_access+0x8>
    40b6:	f0 91 72 1a 	lds	r31, 0x1A72	; 0x801a72 <register_access+0x9>
    40ba:	6a 81       	ldd	r22, Y+2	; 0x02
    40bc:	88 81       	ld	r24, Y
    40be:	99 81       	ldd	r25, Y+1	; 0x01
    40c0:	19 95       	eicall
    40c2:	12 c0       	rjmp	.+36     	; 0x40e8 <_turn_off+0x56>
    40c4:	dc 01       	movw	r26, r24
    40c6:	aa 0f       	add	r26, r26
    40c8:	bb 1f       	adc	r27, r27
    40ca:	ed 01       	movw	r28, r26
    40cc:	c8 0f       	add	r28, r24
    40ce:	d9 1f       	adc	r29, r25
    40d0:	cc 0f       	add	r28, r28
    40d2:	dd 1f       	adc	r29, r29
    40d4:	c0 51       	subi	r28, 0x10	; 16
    40d6:	d7 4e       	sbci	r29, 0xE7	; 231
    40d8:	e0 91 7b 1a 	lds	r30, 0x1A7B	; 0x801a7b <register_access+0x12>
    40dc:	f0 91 7c 1a 	lds	r31, 0x1A7C	; 0x801a7c <register_access+0x13>
    40e0:	6a 81       	ldd	r22, Y+2	; 0x02
    40e2:	88 81       	ld	r24, Y
    40e4:	99 81       	ldd	r25, Y+1	; 0x01
    40e6:	19 95       	eicall
    40e8:	df 91       	pop	r29
    40ea:	cf 91       	pop	r28
    40ec:	08 95       	ret

000040ee <_turn_on>:
    40ee:	cf 93       	push	r28
    40f0:	df 93       	push	r29
    40f2:	90 e0       	ldi	r25, 0x00	; 0
    40f4:	fc 01       	movw	r30, r24
    40f6:	ee 0f       	add	r30, r30
    40f8:	ff 1f       	adc	r31, r31
    40fa:	e8 0f       	add	r30, r24
    40fc:	f9 1f       	adc	r31, r25
    40fe:	ee 0f       	add	r30, r30
    4100:	ff 1f       	adc	r31, r31
    4102:	e0 51       	subi	r30, 0x10	; 16
    4104:	f7 4e       	sbci	r31, 0xE7	; 231
    4106:	23 81       	ldd	r18, Z+3	; 0x03
    4108:	21 11       	cpse	r18, r1
    410a:	0a c0       	rjmp	.+20     	; 0x4120 <_turn_on+0x32>
    410c:	ef 01       	movw	r28, r30
    410e:	e0 91 7b 1a 	lds	r30, 0x1A7B	; 0x801a7b <register_access+0x12>
    4112:	f0 91 7c 1a 	lds	r31, 0x1A7C	; 0x801a7c <register_access+0x13>
    4116:	6a 81       	ldd	r22, Y+2	; 0x02
    4118:	88 81       	ld	r24, Y
    411a:	99 81       	ldd	r25, Y+1	; 0x01
    411c:	19 95       	eicall
    411e:	12 c0       	rjmp	.+36     	; 0x4144 <_turn_on+0x56>
    4120:	dc 01       	movw	r26, r24
    4122:	aa 0f       	add	r26, r26
    4124:	bb 1f       	adc	r27, r27
    4126:	ed 01       	movw	r28, r26
    4128:	c8 0f       	add	r28, r24
    412a:	d9 1f       	adc	r29, r25
    412c:	cc 0f       	add	r28, r28
    412e:	dd 1f       	adc	r29, r29
    4130:	c0 51       	subi	r28, 0x10	; 16
    4132:	d7 4e       	sbci	r29, 0xE7	; 231
    4134:	e0 91 71 1a 	lds	r30, 0x1A71	; 0x801a71 <register_access+0x8>
    4138:	f0 91 72 1a 	lds	r31, 0x1A72	; 0x801a72 <register_access+0x9>
    413c:	6a 81       	ldd	r22, Y+2	; 0x02
    413e:	88 81       	ld	r24, Y
    4140:	99 81       	ldd	r25, Y+1	; 0x01
    4142:	19 95       	eicall
    4144:	df 91       	pop	r29
    4146:	cf 91       	pop	r28
    4148:	08 95       	ret

0000414a <_hal_led_task>:
    414a:	0f 2e       	mov	r0, r31
    414c:	f9 e6       	ldi	r31, 0x69	; 105
    414e:	cf 2e       	mov	r12, r31
    4150:	fa e1       	ldi	r31, 0x1A	; 26
    4152:	df 2e       	mov	r13, r31
    4154:	f0 2d       	mov	r31, r0
    4156:	04 e0       	ldi	r16, 0x04	; 4
    4158:	c0 ef       	ldi	r28, 0xF0	; 240
    415a:	d8 e1       	ldi	r29, 0x18	; 24
    415c:	10 e0       	ldi	r17, 0x00	; 0
    415e:	8c 81       	ldd	r24, Y+4	; 0x04
    4160:	81 30       	cpi	r24, 0x01	; 1
    4162:	69 f0       	breq	.+26     	; 0x417e <_hal_led_task+0x34>
    4164:	e8 f0       	brcs	.+58     	; 0x41a0 <_hal_led_task+0x56>
    4166:	82 30       	cpi	r24, 0x02	; 2
    4168:	39 f5       	brne	.+78     	; 0x41b8 <_hal_led_task+0x6e>
    416a:	d6 01       	movw	r26, r12
    416c:	1c 96       	adiw	r26, 0x0c	; 12
    416e:	ed 91       	ld	r30, X+
    4170:	fc 91       	ld	r31, X
    4172:	1d 97       	sbiw	r26, 0x0d	; 13
    4174:	6a 81       	ldd	r22, Y+2	; 0x02
    4176:	88 81       	ld	r24, Y
    4178:	99 81       	ldd	r25, Y+1	; 0x01
    417a:	19 95       	eicall
    417c:	1d c0       	rjmp	.+58     	; 0x41b8 <_hal_led_task+0x6e>
    417e:	8d 81       	ldd	r24, Y+5	; 0x05
    4180:	8f 5f       	subi	r24, 0xFF	; 255
    4182:	8a 30       	cpi	r24, 0x0A	; 10
    4184:	10 f4       	brcc	.+4      	; 0x418a <_hal_led_task+0x40>
    4186:	8d 83       	std	Y+5, r24	; 0x05
    4188:	17 c0       	rjmp	.+46     	; 0x41b8 <_hal_led_task+0x6e>
    418a:	1d 82       	std	Y+5, r1	; 0x05
    418c:	d6 01       	movw	r26, r12
    418e:	1c 96       	adiw	r26, 0x0c	; 12
    4190:	ed 91       	ld	r30, X+
    4192:	fc 91       	ld	r31, X
    4194:	1d 97       	sbiw	r26, 0x0d	; 13
    4196:	6a 81       	ldd	r22, Y+2	; 0x02
    4198:	88 81       	ld	r24, Y
    419a:	99 81       	ldd	r25, Y+1	; 0x01
    419c:	19 95       	eicall
    419e:	0c c0       	rjmp	.+24     	; 0x41b8 <_hal_led_task+0x6e>
    41a0:	8d 81       	ldd	r24, Y+5	; 0x05
    41a2:	88 23       	and	r24, r24
    41a4:	31 f0       	breq	.+12     	; 0x41b2 <_hal_led_task+0x68>
    41a6:	81 2f       	mov	r24, r17
    41a8:	a2 df       	rcall	.-188    	; 0x40ee <_turn_on>
    41aa:	8d 81       	ldd	r24, Y+5	; 0x05
    41ac:	81 50       	subi	r24, 0x01	; 1
    41ae:	8d 83       	std	Y+5, r24	; 0x05
    41b0:	03 c0       	rjmp	.+6      	; 0x41b8 <_hal_led_task+0x6e>
    41b2:	0c 83       	std	Y+4, r16	; 0x04
    41b4:	81 2f       	mov	r24, r17
    41b6:	6d df       	rcall	.-294    	; 0x4092 <_turn_off>
    41b8:	1f 5f       	subi	r17, 0xFF	; 255
    41ba:	26 96       	adiw	r28, 0x06	; 6
    41bc:	14 30       	cpi	r17, 0x04	; 4
    41be:	79 f6       	brne	.-98     	; 0x415e <_hal_led_task+0x14>
    41c0:	65 e0       	ldi	r22, 0x05	; 5
    41c2:	70 e0       	ldi	r23, 0x00	; 0
    41c4:	80 e0       	ldi	r24, 0x00	; 0
    41c6:	90 e0       	ldi	r25, 0x00	; 0
    41c8:	0e 94 15 18 	call	0x302a	; 0x302a <vTaskDelay>
    41cc:	c5 cf       	rjmp	.-118    	; 0x4158 <_hal_led_task+0xe>

000041ce <led_create>:
    41ce:	cf 92       	push	r12
    41d0:	df 92       	push	r13
    41d2:	ef 92       	push	r14
    41d4:	ff 92       	push	r15
    41d6:	0f 93       	push	r16
    41d8:	1f 93       	push	r17
    41da:	cf 93       	push	r28
    41dc:	df 93       	push	r29
    41de:	06 2f       	mov	r16, r22
    41e0:	0f 2e       	mov	r0, r31
    41e2:	f9 e6       	ldi	r31, 0x69	; 105
    41e4:	ef 2e       	mov	r14, r31
    41e6:	fa e1       	ldi	r31, 0x1A	; 26
    41e8:	ff 2e       	mov	r15, r31
    41ea:	f0 2d       	mov	r31, r0
    41ec:	d7 01       	movw	r26, r14
    41ee:	18 96       	adiw	r26, 0x08	; 8
    41f0:	ed 91       	ld	r30, X+
    41f2:	fc 91       	ld	r31, X
    41f4:	19 97       	sbiw	r26, 0x09	; 9
    41f6:	66 e0       	ldi	r22, 0x06	; 6
    41f8:	87 e2       	ldi	r24, 0x27	; 39
    41fa:	90 e0       	ldi	r25, 0x00	; 0
    41fc:	19 95       	eicall
    41fe:	c0 ef       	ldi	r28, 0xF0	; 240
    4200:	d8 e1       	ldi	r29, 0x18	; 24
    4202:	0f 2e       	mov	r0, r31
    4204:	f8 e2       	ldi	r31, 0x28	; 40
    4206:	cf 2e       	mov	r12, r31
    4208:	d1 2c       	mov	r13, r1
    420a:	f0 2d       	mov	r31, r0
    420c:	d9 82       	std	Y+1, r13	; 0x01
    420e:	c8 82       	st	Y, r12
    4210:	86 e0       	ldi	r24, 0x06	; 6
    4212:	8a 83       	std	Y+2, r24	; 0x02
    4214:	1b 82       	std	Y+3, r1	; 0x03
    4216:	14 e0       	ldi	r17, 0x04	; 4
    4218:	1c 83       	std	Y+4, r17	; 0x04
    421a:	80 e0       	ldi	r24, 0x00	; 0
    421c:	3a df       	rcall	.-396    	; 0x4092 <_turn_off>
    421e:	d7 01       	movw	r26, r14
    4220:	18 96       	adiw	r26, 0x08	; 8
    4222:	ed 91       	ld	r30, X+
    4224:	fc 91       	ld	r31, X
    4226:	19 97       	sbiw	r26, 0x09	; 9
    4228:	67 e0       	ldi	r22, 0x07	; 7
    422a:	87 e2       	ldi	r24, 0x27	; 39
    422c:	90 e0       	ldi	r25, 0x00	; 0
    422e:	19 95       	eicall
    4230:	df 82       	std	Y+7, r13	; 0x07
    4232:	ce 82       	std	Y+6, r12	; 0x06
    4234:	87 e0       	ldi	r24, 0x07	; 7
    4236:	88 87       	std	Y+8, r24	; 0x08
    4238:	19 86       	std	Y+9, r1	; 0x09
    423a:	1a 87       	std	Y+10, r17	; 0x0a
    423c:	81 e0       	ldi	r24, 0x01	; 1
    423e:	29 df       	rcall	.-430    	; 0x4092 <_turn_off>
    4240:	d7 01       	movw	r26, r14
    4242:	18 96       	adiw	r26, 0x08	; 8
    4244:	ed 91       	ld	r30, X+
    4246:	fc 91       	ld	r31, X
    4248:	19 97       	sbiw	r26, 0x09	; 9
    424a:	65 e0       	ldi	r22, 0x05	; 5
    424c:	83 e3       	ldi	r24, 0x33	; 51
    424e:	90 e0       	ldi	r25, 0x00	; 0
    4250:	19 95       	eicall
    4252:	d7 01       	movw	r26, r14
    4254:	18 96       	adiw	r26, 0x08	; 8
    4256:	ed 91       	ld	r30, X+
    4258:	fc 91       	ld	r31, X
    425a:	19 97       	sbiw	r26, 0x09	; 9
    425c:	61 e0       	ldi	r22, 0x01	; 1
    425e:	84 e3       	ldi	r24, 0x34	; 52
    4260:	90 e0       	ldi	r25, 0x00	; 0
    4262:	19 95       	eicall
    4264:	84 e3       	ldi	r24, 0x34	; 52
    4266:	90 e0       	ldi	r25, 0x00	; 0
    4268:	9d 87       	std	Y+13, r25	; 0x0d
    426a:	8c 87       	std	Y+12, r24	; 0x0c
    426c:	85 e0       	ldi	r24, 0x05	; 5
    426e:	8e 87       	std	Y+14, r24	; 0x0e
    4270:	1f 86       	std	Y+15, r1	; 0x0f
    4272:	18 8b       	std	Y+16, r17	; 0x10
    4274:	82 e0       	ldi	r24, 0x02	; 2
    4276:	0d df       	rcall	.-486    	; 0x4092 <_turn_off>
    4278:	d7 01       	movw	r26, r14
    427a:	18 96       	adiw	r26, 0x08	; 8
    427c:	ed 91       	ld	r30, X+
    427e:	fc 91       	ld	r31, X
    4280:	19 97       	sbiw	r26, 0x09	; 9
    4282:	64 e0       	ldi	r22, 0x04	; 4
    4284:	81 e0       	ldi	r24, 0x01	; 1
    4286:	91 e0       	ldi	r25, 0x01	; 1
    4288:	19 95       	eicall
    428a:	d7 01       	movw	r26, r14
    428c:	18 96       	adiw	r26, 0x08	; 8
    428e:	ed 91       	ld	r30, X+
    4290:	fc 91       	ld	r31, X
    4292:	19 97       	sbiw	r26, 0x09	; 9
    4294:	61 e0       	ldi	r22, 0x01	; 1
    4296:	82 e0       	ldi	r24, 0x02	; 2
    4298:	91 e0       	ldi	r25, 0x01	; 1
    429a:	19 95       	eicall
    429c:	82 e0       	ldi	r24, 0x02	; 2
    429e:	91 e0       	ldi	r25, 0x01	; 1
    42a0:	9b 8b       	std	Y+19, r25	; 0x13
    42a2:	8a 8b       	std	Y+18, r24	; 0x12
    42a4:	1c 8b       	std	Y+20, r17	; 0x14
    42a6:	1d 8a       	std	Y+21, r1	; 0x15
    42a8:	1e 8b       	std	Y+22, r17	; 0x16
    42aa:	83 e0       	ldi	r24, 0x03	; 3
    42ac:	f2 de       	rcall	.-540    	; 0x4092 <_turn_off>
    42ae:	e1 2c       	mov	r14, r1
    42b0:	f1 2c       	mov	r15, r1
    42b2:	20 e0       	ldi	r18, 0x00	; 0
    42b4:	30 e0       	ldi	r19, 0x00	; 0
    42b6:	40 ec       	ldi	r20, 0xC0	; 192
    42b8:	50 e0       	ldi	r21, 0x00	; 0
    42ba:	6c ed       	ldi	r22, 0xDC	; 220
    42bc:	74 e0       	ldi	r23, 0x04	; 4
    42be:	85 ea       	ldi	r24, 0xA5	; 165
    42c0:	90 e2       	ldi	r25, 0x20	; 32
    42c2:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <xTaskCreate>
    42c6:	df 91       	pop	r29
    42c8:	cf 91       	pop	r28
    42ca:	1f 91       	pop	r17
    42cc:	0f 91       	pop	r16
    42ce:	ff 90       	pop	r15
    42d0:	ef 90       	pop	r14
    42d2:	df 90       	pop	r13
    42d4:	cf 90       	pop	r12
    42d6:	08 95       	ret

000042d8 <led_slow_blink>:
    42d8:	0f 93       	push	r16
    42da:	1f 93       	push	r17
    42dc:	cf 93       	push	r28
    42de:	df 93       	push	r29
    42e0:	c8 2f       	mov	r28, r24
    42e2:	d0 e0       	ldi	r29, 0x00	; 0
    42e4:	8e 01       	movw	r16, r28
    42e6:	00 0f       	add	r16, r16
    42e8:	11 1f       	adc	r17, r17
    42ea:	d8 01       	movw	r26, r16
    42ec:	ac 0f       	add	r26, r28
    42ee:	bd 1f       	adc	r27, r29
    42f0:	aa 0f       	add	r26, r26
    42f2:	bb 1f       	adc	r27, r27
    42f4:	a0 51       	subi	r26, 0x10	; 16
    42f6:	b7 4e       	sbci	r27, 0xE7	; 231
    42f8:	e0 91 75 1a 	lds	r30, 0x1A75	; 0x801a75 <register_access+0xc>
    42fc:	f0 91 76 1a 	lds	r31, 0x1A76	; 0x801a76 <register_access+0xd>
    4300:	12 96       	adiw	r26, 0x02	; 2
    4302:	6c 91       	ld	r22, X
    4304:	12 97       	sbiw	r26, 0x02	; 2
    4306:	8d 91       	ld	r24, X+
    4308:	9c 91       	ld	r25, X
    430a:	19 95       	eicall
    430c:	c0 0f       	add	r28, r16
    430e:	d1 1f       	adc	r29, r17
    4310:	cc 0f       	add	r28, r28
    4312:	dd 1f       	adc	r29, r29
    4314:	c0 51       	subi	r28, 0x10	; 16
    4316:	d7 4e       	sbci	r29, 0xE7	; 231
    4318:	81 e0       	ldi	r24, 0x01	; 1
    431a:	8c 83       	std	Y+4, r24	; 0x04
    431c:	df 91       	pop	r29
    431e:	cf 91       	pop	r28
    4320:	1f 91       	pop	r17
    4322:	0f 91       	pop	r16
    4324:	08 95       	ret

00004326 <led_fast_blink>:
    4326:	0f 93       	push	r16
    4328:	1f 93       	push	r17
    432a:	cf 93       	push	r28
    432c:	df 93       	push	r29
    432e:	c8 2f       	mov	r28, r24
    4330:	d0 e0       	ldi	r29, 0x00	; 0
    4332:	8e 01       	movw	r16, r28
    4334:	00 0f       	add	r16, r16
    4336:	11 1f       	adc	r17, r17
    4338:	d8 01       	movw	r26, r16
    433a:	ac 0f       	add	r26, r28
    433c:	bd 1f       	adc	r27, r29
    433e:	aa 0f       	add	r26, r26
    4340:	bb 1f       	adc	r27, r27
    4342:	a0 51       	subi	r26, 0x10	; 16
    4344:	b7 4e       	sbci	r27, 0xE7	; 231
    4346:	e0 91 75 1a 	lds	r30, 0x1A75	; 0x801a75 <register_access+0xc>
    434a:	f0 91 76 1a 	lds	r31, 0x1A76	; 0x801a76 <register_access+0xd>
    434e:	12 96       	adiw	r26, 0x02	; 2
    4350:	6c 91       	ld	r22, X
    4352:	12 97       	sbiw	r26, 0x02	; 2
    4354:	8d 91       	ld	r24, X+
    4356:	9c 91       	ld	r25, X
    4358:	19 95       	eicall
    435a:	c0 0f       	add	r28, r16
    435c:	d1 1f       	adc	r29, r17
    435e:	cc 0f       	add	r28, r28
    4360:	dd 1f       	adc	r29, r29
    4362:	c0 51       	subi	r28, 0x10	; 16
    4364:	d7 4e       	sbci	r29, 0xE7	; 231
    4366:	82 e0       	ldi	r24, 0x02	; 2
    4368:	8c 83       	std	Y+4, r24	; 0x04
    436a:	df 91       	pop	r29
    436c:	cf 91       	pop	r28
    436e:	1f 91       	pop	r17
    4370:	0f 91       	pop	r16
    4372:	08 95       	ret

00004374 <led_led_on>:
    4374:	28 2f       	mov	r18, r24
    4376:	30 e0       	ldi	r19, 0x00	; 0
    4378:	f9 01       	movw	r30, r18
    437a:	ee 0f       	add	r30, r30
    437c:	ff 1f       	adc	r31, r31
    437e:	e2 0f       	add	r30, r18
    4380:	f3 1f       	adc	r31, r19
    4382:	ee 0f       	add	r30, r30
    4384:	ff 1f       	adc	r31, r31
    4386:	e0 51       	subi	r30, 0x10	; 16
    4388:	f7 4e       	sbci	r31, 0xE7	; 231
    438a:	93 e0       	ldi	r25, 0x03	; 3
    438c:	94 83       	std	Z+4, r25	; 0x04
    438e:	af ce       	rjmp	.-674    	; 0x40ee <_turn_on>
    4390:	08 95       	ret

00004392 <led_led_off>:
    4392:	28 2f       	mov	r18, r24
    4394:	30 e0       	ldi	r19, 0x00	; 0
    4396:	f9 01       	movw	r30, r18
    4398:	ee 0f       	add	r30, r30
    439a:	ff 1f       	adc	r31, r31
    439c:	e2 0f       	add	r30, r18
    439e:	f3 1f       	adc	r31, r19
    43a0:	ee 0f       	add	r30, r30
    43a2:	ff 1f       	adc	r31, r31
    43a4:	e0 51       	subi	r30, 0x10	; 16
    43a6:	f7 4e       	sbci	r31, 0xE7	; 231
    43a8:	94 e0       	ldi	r25, 0x04	; 4
    43aa:	94 83       	std	Z+4, r25	; 0x04
    43ac:	72 ce       	rjmp	.-796    	; 0x4092 <_turn_off>
    43ae:	08 95       	ret

000043b0 <led_long_puls>:
    43b0:	90 e0       	ldi	r25, 0x00	; 0
    43b2:	fc 01       	movw	r30, r24
    43b4:	ee 0f       	add	r30, r30
    43b6:	ff 1f       	adc	r31, r31
    43b8:	df 01       	movw	r26, r30
    43ba:	a8 0f       	add	r26, r24
    43bc:	b9 1f       	adc	r27, r25
    43be:	aa 0f       	add	r26, r26
    43c0:	bb 1f       	adc	r27, r27
    43c2:	a0 51       	subi	r26, 0x10	; 16
    43c4:	b7 4e       	sbci	r27, 0xE7	; 231
    43c6:	24 e0       	ldi	r18, 0x04	; 4
    43c8:	15 96       	adiw	r26, 0x05	; 5
    43ca:	2c 93       	st	X, r18
    43cc:	15 97       	sbiw	r26, 0x05	; 5
    43ce:	fd 01       	movw	r30, r26
    43d0:	14 82       	std	Z+4, r1	; 0x04
    43d2:	08 95       	ret

000043d4 <led_short_puls>:
    43d4:	90 e0       	ldi	r25, 0x00	; 0
    43d6:	fc 01       	movw	r30, r24
    43d8:	ee 0f       	add	r30, r30
    43da:	ff 1f       	adc	r31, r31
    43dc:	df 01       	movw	r26, r30
    43de:	a8 0f       	add	r26, r24
    43e0:	b9 1f       	adc	r27, r25
    43e2:	aa 0f       	add	r26, r26
    43e4:	bb 1f       	adc	r27, r27
    43e6:	a0 51       	subi	r26, 0x10	; 16
    43e8:	b7 4e       	sbci	r27, 0xE7	; 231
    43ea:	21 e0       	ldi	r18, 0x01	; 1
    43ec:	15 96       	adiw	r26, 0x05	; 5
    43ee:	2c 93       	st	X, r18
    43f0:	15 97       	sbiw	r26, 0x05	; 5
    43f2:	fd 01       	movw	r30, r26
    43f4:	14 82       	std	Z+4, r1	; 0x04
    43f6:	08 95       	ret

000043f8 <_serial_call_back>:
    43f8:	0f 93       	push	r16
    43fa:	1f 93       	push	r17
    43fc:	cf 93       	push	r28
    43fe:	df 93       	push	r29
    4400:	1f 92       	push	r1
    4402:	1f 92       	push	r1
    4404:	cd b7       	in	r28, 0x3d	; 61
    4406:	de b7       	in	r29, 0x3e	; 62
    4408:	8c 01       	movw	r16, r24
    440a:	19 82       	std	Y+1, r1	; 0x01
    440c:	2d c0       	rjmp	.+90     	; 0x4468 <_serial_call_back+0x70>
    440e:	e0 91 6c 19 	lds	r30, 0x196C	; 0x80196c <rec_buf_inp.2947>
    4412:	ec 32       	cpi	r30, 0x2C	; 44
    4414:	50 f4       	brcc	.+20     	; 0x442a <_serial_call_back+0x32>
    4416:	81 e0       	ldi	r24, 0x01	; 1
    4418:	8e 0f       	add	r24, r30
    441a:	80 93 6c 19 	sts	0x196C, r24	; 0x80196c <rec_buf_inp.2947>
    441e:	f0 e0       	ldi	r31, 0x00	; 0
    4420:	e2 56       	subi	r30, 0x62	; 98
    4422:	f6 4e       	sbci	r31, 0xE6	; 230
    4424:	8a 81       	ldd	r24, Y+2	; 0x02
    4426:	80 83       	st	Z, r24
    4428:	02 c0       	rjmp	.+4      	; 0x442e <_serial_call_back+0x36>
    442a:	10 92 6c 19 	sts	0x196C, r1	; 0x80196c <rec_buf_inp.2947>
    442e:	8a 81       	ldd	r24, Y+2	; 0x02
    4430:	8a 30       	cpi	r24, 0x0A	; 10
    4432:	d1 f4       	brne	.+52     	; 0x4468 <_serial_call_back+0x70>
    4434:	40 91 6c 19 	lds	r20, 0x196C	; 0x80196c <rec_buf_inp.2947>
    4438:	50 e0       	ldi	r21, 0x00	; 0
    443a:	fa 01       	movw	r30, r20
    443c:	e4 56       	subi	r30, 0x64	; 100
    443e:	f6 4e       	sbci	r31, 0xE6	; 230
    4440:	10 82       	st	Z, r1
    4442:	41 50       	subi	r20, 0x01	; 1
    4444:	51 09       	sbc	r21, r1
    4446:	9e 01       	movw	r18, r28
    4448:	2f 5f       	subi	r18, 0xFF	; 255
    444a:	3f 4f       	sbci	r19, 0xFF	; 255
    444c:	6e e9       	ldi	r22, 0x9E	; 158
    444e:	79 e1       	ldi	r23, 0x19	; 25
    4450:	80 91 6f 19 	lds	r24, 0x196F	; 0x80196f <_serial_reply_buffer_handle>
    4454:	90 91 70 19 	lds	r25, 0x1970	; 0x801970 <_serial_reply_buffer_handle+0x1>
    4458:	0e 94 cd 13 	call	0x279a	; 0x279a <xStreamBufferSendFromISR>
    445c:	89 81       	ldd	r24, Y+1	; 0x01
    445e:	81 11       	cpse	r24, r1
    4460:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <vPortYield>
    4464:	10 92 6c 19 	sts	0x196C, r1	; 0x80196c <rec_buf_inp.2947>
    4468:	be 01       	movw	r22, r28
    446a:	6e 5f       	subi	r22, 0xFE	; 254
    446c:	7f 4f       	sbci	r23, 0xFF	; 255
    446e:	c8 01       	movw	r24, r16
    4470:	8c d6       	rcall	.+3352   	; 0x518a <serial_get_byte>
    4472:	88 23       	and	r24, r24
    4474:	61 f2       	breq	.-104    	; 0x440e <_serial_call_back+0x16>
    4476:	0f 90       	pop	r0
    4478:	0f 90       	pop	r0
    447a:	df 91       	pop	r29
    447c:	cf 91       	pop	r28
    447e:	1f 91       	pop	r17
    4480:	0f 91       	pop	r16
    4482:	08 95       	ret

00004484 <_upload_message>:
    4484:	0f 93       	push	r16
    4486:	1f 93       	push	r17
    4488:	cf 93       	push	r28
    448a:	df 93       	push	r29
    448c:	8c 01       	movw	r16, r24
    448e:	eb 01       	movw	r28, r22
    4490:	80 91 6f 19 	lds	r24, 0x196F	; 0x80196f <_serial_reply_buffer_handle>
    4494:	90 91 70 19 	lds	r25, 0x1970	; 0x801970 <_serial_reply_buffer_handle+0x1>
    4498:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <xStreamBufferReset>
    449c:	b8 01       	movw	r22, r16
    449e:	88 e0       	ldi	r24, 0x08	; 8
    44a0:	99 e1       	ldi	r25, 0x19	; 25
    44a2:	0e 94 4e 31 	call	0x629c	; 0x629c <strcpy>
    44a6:	20 97       	sbiw	r28, 0x00	; 0
    44a8:	79 f0       	breq	.+30     	; 0x44c8 <_upload_message+0x44>
    44aa:	e8 e0       	ldi	r30, 0x08	; 8
    44ac:	f9 e1       	ldi	r31, 0x19	; 25
    44ae:	01 90       	ld	r0, Z+
    44b0:	00 20       	and	r0, r0
    44b2:	e9 f7       	brne	.-6      	; 0x44ae <_upload_message+0x2a>
    44b4:	31 97       	sbiw	r30, 0x01	; 1
    44b6:	80 e2       	ldi	r24, 0x20	; 32
    44b8:	90 e0       	ldi	r25, 0x00	; 0
    44ba:	91 83       	std	Z+1, r25	; 0x01
    44bc:	80 83       	st	Z, r24
    44be:	be 01       	movw	r22, r28
    44c0:	88 e0       	ldi	r24, 0x08	; 8
    44c2:	99 e1       	ldi	r25, 0x19	; 25
    44c4:	0e 94 43 31 	call	0x6286	; 0x6286 <strcat>
    44c8:	e8 e0       	ldi	r30, 0x08	; 8
    44ca:	f9 e1       	ldi	r31, 0x19	; 25
    44cc:	df 01       	movw	r26, r30
    44ce:	0d 90       	ld	r0, X+
    44d0:	00 20       	and	r0, r0
    44d2:	e9 f7       	brne	.-6      	; 0x44ce <_upload_message+0x4a>
    44d4:	11 97       	sbiw	r26, 0x01	; 1
    44d6:	8d e0       	ldi	r24, 0x0D	; 13
    44d8:	9a e0       	ldi	r25, 0x0A	; 10
    44da:	11 96       	adiw	r26, 0x01	; 1
    44dc:	9c 93       	st	X, r25
    44de:	8e 93       	st	-X, r24
    44e0:	12 96       	adiw	r26, 0x02	; 2
    44e2:	1c 92       	st	X, r1
    44e4:	01 90       	ld	r0, Z+
    44e6:	00 20       	and	r0, r0
    44e8:	e9 f7       	brne	.-6      	; 0x44e4 <_upload_message+0x60>
    44ea:	31 97       	sbiw	r30, 0x01	; 1
    44ec:	e8 50       	subi	r30, 0x08	; 8
    44ee:	f9 41       	sbci	r31, 0x19	; 25
    44f0:	ae 2f       	mov	r26, r30
    44f2:	88 e0       	ldi	r24, 0x08	; 8
    44f4:	99 e1       	ldi	r25, 0x19	; 25
    44f6:	ac 01       	movw	r20, r24
    44f8:	6a 2f       	mov	r22, r26
    44fa:	80 91 71 19 	lds	r24, 0x1971	; 0x801971 <_rn2483_serial>
    44fe:	90 91 72 19 	lds	r25, 0x1972	; 0x801972 <_rn2483_serial+0x1>
    4502:	f3 d5       	rcall	.+3046   	; 0x50ea <serial_send_bytes>
    4504:	81 11       	cpse	r24, r1
    4506:	11 c0       	rjmp	.+34     	; 0x452a <_upload_message+0xa6>
    4508:	08 e2       	ldi	r16, 0x28	; 40
    450a:	15 e0       	ldi	r17, 0x05	; 5
    450c:	20 e0       	ldi	r18, 0x00	; 0
    450e:	30 e0       	ldi	r19, 0x00	; 0
    4510:	4d e2       	ldi	r20, 0x2D	; 45
    4512:	50 e0       	ldi	r21, 0x00	; 0
    4514:	68 ef       	ldi	r22, 0xF8	; 248
    4516:	79 e1       	ldi	r23, 0x19	; 25
    4518:	80 91 6f 19 	lds	r24, 0x196F	; 0x80196f <_serial_reply_buffer_handle>
    451c:	90 91 70 19 	lds	r25, 0x1970	; 0x801970 <_serial_reply_buffer_handle+0x1>
    4520:	0e 94 10 14 	call	0x2820	; 0x2820 <xStreamBufferReceive>
    4524:	88 ef       	ldi	r24, 0xF8	; 248
    4526:	99 e1       	ldi	r25, 0x19	; 25
    4528:	02 c0       	rjmp	.+4      	; 0x452e <_upload_message+0xaa>
    452a:	80 e0       	ldi	r24, 0x00	; 0
    452c:	90 e0       	ldi	r25, 0x00	; 0
    452e:	df 91       	pop	r29
    4530:	cf 91       	pop	r28
    4532:	1f 91       	pop	r17
    4534:	0f 91       	pop	r16
    4536:	08 95       	ret

00004538 <_reply2return_code>:
    4538:	2f 92       	push	r2
    453a:	3f 92       	push	r3
    453c:	4f 92       	push	r4
    453e:	5f 92       	push	r5
    4540:	6f 92       	push	r6
    4542:	7f 92       	push	r7
    4544:	8f 92       	push	r8
    4546:	9f 92       	push	r9
    4548:	af 92       	push	r10
    454a:	bf 92       	push	r11
    454c:	cf 92       	push	r12
    454e:	df 92       	push	r13
    4550:	ef 92       	push	r14
    4552:	ff 92       	push	r15
    4554:	0f 93       	push	r16
    4556:	1f 93       	push	r17
    4558:	cf 93       	push	r28
    455a:	df 93       	push	r29
    455c:	5c 01       	movw	r10, r24
    455e:	fc 01       	movw	r30, r24
    4560:	01 90       	ld	r0, Z+
    4562:	00 20       	and	r0, r0
    4564:	e9 f7       	brne	.-6      	; 0x4560 <_reply2return_code+0x28>
    4566:	31 97       	sbiw	r30, 0x01	; 1
    4568:	6f 01       	movw	r12, r30
    456a:	c8 1a       	sub	r12, r24
    456c:	d9 0a       	sbc	r13, r25
    456e:	5c 2c       	mov	r5, r12
    4570:	0f 2e       	mov	r0, r31
    4572:	fd e7       	ldi	r31, 0x7D	; 125
    4574:	8f 2e       	mov	r8, r31
    4576:	f7 e0       	ldi	r31, 0x07	; 7
    4578:	9f 2e       	mov	r9, r31
    457a:	f0 2d       	mov	r31, r0
    457c:	e1 2c       	mov	r14, r1
    457e:	f1 2c       	mov	r15, r1
    4580:	4c 2c       	mov	r4, r12
    4582:	37 01       	movw	r6, r14
    4584:	f4 01       	movw	r30, r8
    4586:	01 81       	ldd	r16, Z+1	; 0x01
    4588:	12 81       	ldd	r17, Z+2	; 0x02
    458a:	e8 01       	movw	r28, r16
    458c:	09 90       	ld	r0, Y+
    458e:	00 20       	and	r0, r0
    4590:	e9 f7       	brne	.-6      	; 0x458c <_reply2return_code+0x54>
    4592:	21 97       	sbiw	r28, 0x01	; 1
    4594:	c0 1b       	sub	r28, r16
    4596:	d1 0b       	sbc	r29, r17
    4598:	3c 2e       	mov	r3, r28
    459a:	f9 e0       	ldi	r31, 0x09	; 9
    459c:	cf 16       	cp	r12, r31
    459e:	d1 04       	cpc	r13, r1
    45a0:	58 f0       	brcs	.+22     	; 0x45b8 <_reply2return_code+0x80>
    45a2:	f4 01       	movw	r30, r8
    45a4:	20 80       	ld	r2, Z
    45a6:	fe e0       	ldi	r31, 0x0E	; 14
    45a8:	2f 12       	cpse	r2, r31
    45aa:	06 c0       	rjmp	.+12     	; 0x45b8 <_reply2return_code+0x80>
    45ac:	b8 01       	movw	r22, r16
    45ae:	c5 01       	movw	r24, r10
    45b0:	0e 94 1e 31 	call	0x623c	; 0x623c <strcasestr>
    45b4:	89 2b       	or	r24, r25
    45b6:	09 f5       	brne	.+66     	; 0x45fa <_reply2return_code+0xc2>
    45b8:	44 2d       	mov	r20, r4
    45ba:	35 14       	cp	r3, r5
    45bc:	08 f4       	brcc	.+2      	; 0x45c0 <_reply2return_code+0x88>
    45be:	4c 2f       	mov	r20, r28
    45c0:	50 e0       	ldi	r21, 0x00	; 0
    45c2:	b8 01       	movw	r22, r16
    45c4:	c5 01       	movw	r24, r10
    45c6:	0e 94 55 31 	call	0x62aa	; 0x62aa <strncasecmp>
    45ca:	89 2b       	or	r24, r25
    45cc:	49 f4       	brne	.+18     	; 0x45e0 <_reply2return_code+0xa8>
    45ce:	f3 01       	movw	r30, r6
    45d0:	ee 0f       	add	r30, r30
    45d2:	ff 1f       	adc	r31, r31
    45d4:	e6 0d       	add	r30, r6
    45d6:	f7 1d       	adc	r31, r7
    45d8:	e3 58       	subi	r30, 0x83	; 131
    45da:	f8 4f       	sbci	r31, 0xF8	; 248
    45dc:	20 80       	ld	r2, Z
    45de:	0d c0       	rjmp	.+26     	; 0x45fa <_reply2return_code+0xc2>
    45e0:	8f ef       	ldi	r24, 0xFF	; 255
    45e2:	e8 1a       	sub	r14, r24
    45e4:	f8 0a       	sbc	r15, r24
    45e6:	e3 e0       	ldi	r30, 0x03	; 3
    45e8:	8e 0e       	add	r8, r30
    45ea:	91 1c       	adc	r9, r1
    45ec:	f1 e1       	ldi	r31, 0x11	; 17
    45ee:	ef 16       	cp	r14, r31
    45f0:	f1 04       	cpc	r15, r1
    45f2:	39 f6       	brne	.-114    	; 0x4582 <_reply2return_code+0x4a>
    45f4:	68 94       	set
    45f6:	22 24       	eor	r2, r2
    45f8:	24 f8       	bld	r2, 4
    45fa:	82 2d       	mov	r24, r2
    45fc:	df 91       	pop	r29
    45fe:	cf 91       	pop	r28
    4600:	1f 91       	pop	r17
    4602:	0f 91       	pop	r16
    4604:	ff 90       	pop	r15
    4606:	ef 90       	pop	r14
    4608:	df 90       	pop	r13
    460a:	cf 90       	pop	r12
    460c:	bf 90       	pop	r11
    460e:	af 90       	pop	r10
    4610:	9f 90       	pop	r9
    4612:	8f 90       	pop	r8
    4614:	7f 90       	pop	r7
    4616:	6f 90       	pop	r6
    4618:	5f 90       	pop	r5
    461a:	4f 90       	pop	r4
    461c:	3f 90       	pop	r3
    461e:	2f 90       	pop	r2
    4620:	08 95       	ret

00004622 <_upload_message_rc>:
    4622:	30 df       	rcall	.-416    	; 0x4484 <_upload_message>
    4624:	89 cf       	rjmp	.-238    	; 0x4538 <_reply2return_code>
    4626:	08 95       	ret

00004628 <lora_driver_flush_buffers>:
    4628:	80 91 6f 19 	lds	r24, 0x196F	; 0x80196f <_serial_reply_buffer_handle>
    462c:	90 91 70 19 	lds	r25, 0x1970	; 0x801970 <_serial_reply_buffer_handle+0x1>
    4630:	0c 94 e4 12 	jmp	0x25c8	; 0x25c8 <xStreamBufferReset>
    4634:	08 95       	ret

00004636 <lora_driver_create>:
    4636:	8f 92       	push	r8
    4638:	9f 92       	push	r9
    463a:	af 92       	push	r10
    463c:	cf 92       	push	r12
    463e:	ef 92       	push	r14
    4640:	0f 93       	push	r16
    4642:	1f 93       	push	r17
    4644:	cf 93       	push	r28
    4646:	c8 2f       	mov	r28, r24
    4648:	8b 01       	movw	r16, r22
    464a:	41 e0       	ldi	r20, 0x01	; 1
    464c:	60 e0       	ldi	r22, 0x00	; 0
    464e:	70 e0       	ldi	r23, 0x00	; 0
    4650:	88 ec       	ldi	r24, 0xC8	; 200
    4652:	90 e0       	ldi	r25, 0x00	; 0
    4654:	0e 94 b8 12 	call	0x2570	; 0x2570 <xStreamBufferGenericCreate>
    4658:	90 93 70 19 	sts	0x1970, r25	; 0x801970 <_serial_reply_buffer_handle+0x1>
    465c:	80 93 6f 19 	sts	0x196F, r24	; 0x80196f <_serial_reply_buffer_handle>
    4660:	10 93 6e 19 	sts	0x196E, r17	; 0x80196e <_downlinkMessageBuffer+0x1>
    4664:	00 93 6d 19 	sts	0x196D, r16	; 0x80196d <_downlinkMessageBuffer>
    4668:	0f 2e       	mov	r0, r31
    466a:	fc ef       	ldi	r31, 0xFC	; 252
    466c:	8f 2e       	mov	r8, r31
    466e:	f1 e2       	ldi	r31, 0x21	; 33
    4670:	9f 2e       	mov	r9, r31
    4672:	f0 2d       	mov	r31, r0
    4674:	68 94       	set
    4676:	aa 24       	eor	r10, r10
    4678:	a6 f8       	bld	r10, 6
    467a:	68 94       	set
    467c:	cc 24       	eor	r12, r12
    467e:	c6 f8       	bld	r12, 6
    4680:	e1 2c       	mov	r14, r1
    4682:	00 e0       	ldi	r16, 0x00	; 0
    4684:	23 e0       	ldi	r18, 0x03	; 3
    4686:	40 e0       	ldi	r20, 0x00	; 0
    4688:	51 ee       	ldi	r21, 0xE1	; 225
    468a:	60 e0       	ldi	r22, 0x00	; 0
    468c:	70 e0       	ldi	r23, 0x00	; 0
    468e:	8c 2f       	mov	r24, r28
    4690:	71 d4       	rcall	.+2274   	; 0x4f74 <serial_new_instance>
    4692:	90 93 72 19 	sts	0x1972, r25	; 0x801972 <_rn2483_serial+0x1>
    4696:	80 93 71 19 	sts	0x1971, r24	; 0x801971 <_rn2483_serial>
    469a:	e0 91 71 1a 	lds	r30, 0x1A71	; 0x801a71 <register_access+0x8>
    469e:	f0 91 72 1a 	lds	r31, 0x1A72	; 0x801a72 <register_access+0x9>
    46a2:	64 e0       	ldi	r22, 0x04	; 4
    46a4:	87 e0       	ldi	r24, 0x07	; 7
    46a6:	91 e0       	ldi	r25, 0x01	; 1
    46a8:	19 95       	eicall
    46aa:	cf 91       	pop	r28
    46ac:	1f 91       	pop	r17
    46ae:	0f 91       	pop	r16
    46b0:	ef 90       	pop	r14
    46b2:	cf 90       	pop	r12
    46b4:	af 90       	pop	r10
    46b6:	9f 90       	pop	r9
    46b8:	8f 90       	pop	r8
    46ba:	08 95       	ret

000046bc <lora_driver_reset_rn2483>:
    46bc:	88 23       	and	r24, r24
    46be:	49 f0       	breq	.+18     	; 0x46d2 <lora_driver_reset_rn2483+0x16>
    46c0:	e0 91 7b 1a 	lds	r30, 0x1A7B	; 0x801a7b <register_access+0x12>
    46c4:	f0 91 7c 1a 	lds	r31, 0x1A7C	; 0x801a7c <register_access+0x13>
    46c8:	64 e0       	ldi	r22, 0x04	; 4
    46ca:	88 e0       	ldi	r24, 0x08	; 8
    46cc:	91 e0       	ldi	r25, 0x01	; 1
    46ce:	19 95       	eicall
    46d0:	08 95       	ret
    46d2:	e0 91 71 1a 	lds	r30, 0x1A71	; 0x801a71 <register_access+0x8>
    46d6:	f0 91 72 1a 	lds	r31, 0x1A72	; 0x801a72 <register_access+0x9>
    46da:	64 e0       	ldi	r22, 0x04	; 4
    46dc:	88 e0       	ldi	r24, 0x08	; 8
    46de:	91 e0       	ldi	r25, 0x01	; 1
    46e0:	19 95       	eicall
    46e2:	08 95       	ret

000046e4 <lora_driver_rn2483_factory_reset>:
    46e4:	60 e0       	ldi	r22, 0x00	; 0
    46e6:	70 e0       	ldi	r23, 0x00	; 0
    46e8:	83 e0       	ldi	r24, 0x03	; 3
    46ea:	95 e0       	ldi	r25, 0x05	; 5
    46ec:	cb de       	rcall	.-618    	; 0x4484 <_upload_message>
    46ee:	e8 ef       	ldi	r30, 0xF8	; 248
    46f0:	f9 e1       	ldi	r31, 0x19	; 25
    46f2:	01 90       	ld	r0, Z+
    46f4:	00 20       	and	r0, r0
    46f6:	e9 f7       	brne	.-6      	; 0x46f2 <lora_driver_rn2483_factory_reset+0xe>
    46f8:	31 97       	sbiw	r30, 0x01	; 1
    46fa:	e8 5f       	subi	r30, 0xF8	; 248
    46fc:	f9 41       	sbci	r31, 0x19	; 25
    46fe:	81 e0       	ldi	r24, 0x01	; 1
    4700:	75 97       	sbiw	r30, 0x15	; 21
    4702:	08 f0       	brcs	.+2      	; 0x4706 <lora_driver_rn2483_factory_reset+0x22>
    4704:	80 e0       	ldi	r24, 0x00	; 0
    4706:	08 95       	ret

00004708 <lora_driver_get_rn2483_hweui>:
    4708:	cf 93       	push	r28
    470a:	df 93       	push	r29
    470c:	ec 01       	movw	r28, r24
    470e:	60 e0       	ldi	r22, 0x00	; 0
    4710:	70 e0       	ldi	r23, 0x00	; 0
    4712:	84 e1       	ldi	r24, 0x14	; 20
    4714:	95 e0       	ldi	r25, 0x05	; 5
    4716:	b6 de       	rcall	.-660    	; 0x4484 <_upload_message>
    4718:	e8 ef       	ldi	r30, 0xF8	; 248
    471a:	f9 e1       	ldi	r31, 0x19	; 25
    471c:	01 90       	ld	r0, Z+
    471e:	00 20       	and	r0, r0
    4720:	e9 f7       	brne	.-6      	; 0x471c <lora_driver_get_rn2483_hweui+0x14>
    4722:	e9 50       	subi	r30, 0x09	; 9
    4724:	fa 41       	sbci	r31, 0x1A	; 26
    4726:	39 f4       	brne	.+14     	; 0x4736 <lora_driver_get_rn2483_hweui+0x2e>
    4728:	68 ef       	ldi	r22, 0xF8	; 248
    472a:	79 e1       	ldi	r23, 0x19	; 25
    472c:	ce 01       	movw	r24, r28
    472e:	0e 94 4e 31 	call	0x629c	; 0x629c <strcpy>
    4732:	80 e0       	ldi	r24, 0x00	; 0
    4734:	02 c0       	rjmp	.+4      	; 0x473a <lora_driver_get_rn2483_hweui+0x32>
    4736:	18 82       	st	Y, r1
    4738:	81 e0       	ldi	r24, 0x01	; 1
    473a:	df 91       	pop	r29
    473c:	cf 91       	pop	r28
    473e:	08 95       	ret

00004740 <lora_driver_set_device_identifier>:
    4740:	fc 01       	movw	r30, r24
    4742:	01 90       	ld	r0, Z+
    4744:	00 20       	and	r0, r0
    4746:	e9 f7       	brne	.-6      	; 0x4742 <lora_driver_set_device_identifier+0x2>
    4748:	9f 01       	movw	r18, r30
    474a:	21 51       	subi	r18, 0x11	; 17
    474c:	31 09       	sbc	r19, r1
    474e:	28 17       	cp	r18, r24
    4750:	39 07       	cpc	r19, r25
    4752:	29 f4       	brne	.+10     	; 0x475e <lora_driver_set_device_identifier+0x1e>
    4754:	bc 01       	movw	r22, r24
    4756:	82 e4       	ldi	r24, 0x42	; 66
    4758:	95 e0       	ldi	r25, 0x05	; 5
    475a:	63 cf       	rjmp	.-314    	; 0x4622 <_upload_message_rc>
    475c:	08 95       	ret
    475e:	89 e0       	ldi	r24, 0x09	; 9
    4760:	08 95       	ret

00004762 <lora_driver_set_application_identifier>:
    4762:	fc 01       	movw	r30, r24
    4764:	01 90       	ld	r0, Z+
    4766:	00 20       	and	r0, r0
    4768:	e9 f7       	brne	.-6      	; 0x4764 <lora_driver_set_application_identifier+0x2>
    476a:	9f 01       	movw	r18, r30
    476c:	21 51       	subi	r18, 0x11	; 17
    476e:	31 09       	sbc	r19, r1
    4770:	28 17       	cp	r18, r24
    4772:	39 07       	cpc	r19, r25
    4774:	29 f4       	brne	.+10     	; 0x4780 <lora_driver_set_application_identifier+0x1e>
    4776:	bc 01       	movw	r22, r24
    4778:	81 e5       	ldi	r24, 0x51	; 81
    477a:	95 e0       	ldi	r25, 0x05	; 5
    477c:	52 cf       	rjmp	.-348    	; 0x4622 <_upload_message_rc>
    477e:	08 95       	ret
    4780:	89 e0       	ldi	r24, 0x09	; 9
    4782:	08 95       	ret

00004784 <lora_driver_set_application_key>:
    4784:	fc 01       	movw	r30, r24
    4786:	01 90       	ld	r0, Z+
    4788:	00 20       	and	r0, r0
    478a:	e9 f7       	brne	.-6      	; 0x4786 <lora_driver_set_application_key+0x2>
    478c:	9f 01       	movw	r18, r30
    478e:	21 52       	subi	r18, 0x21	; 33
    4790:	31 09       	sbc	r19, r1
    4792:	28 17       	cp	r18, r24
    4794:	39 07       	cpc	r19, r25
    4796:	29 f4       	brne	.+10     	; 0x47a2 <lora_driver_set_application_key+0x1e>
    4798:	bc 01       	movw	r22, r24
    479a:	80 e6       	ldi	r24, 0x60	; 96
    479c:	95 e0       	ldi	r25, 0x05	; 5
    479e:	41 cf       	rjmp	.-382    	; 0x4622 <_upload_message_rc>
    47a0:	08 95       	ret
    47a2:	89 e0       	ldi	r24, 0x09	; 9
    47a4:	08 95       	ret

000047a6 <lora_driver_save_mac>:
    47a6:	60 e0       	ldi	r22, 0x00	; 0
    47a8:	70 e0       	ldi	r23, 0x00	; 0
    47aa:	8f e9       	ldi	r24, 0x9F	; 159
    47ac:	95 e0       	ldi	r25, 0x05	; 5
    47ae:	39 cf       	rjmp	.-398    	; 0x4622 <_upload_message_rc>
    47b0:	08 95       	ret

000047b2 <lora_driver_join>:
    47b2:	0f 93       	push	r16
    47b4:	1f 93       	push	r17
    47b6:	e8 2f       	mov	r30, r24
    47b8:	f0 e0       	ldi	r31, 0x00	; 0
    47ba:	ee 0f       	add	r30, r30
    47bc:	ff 1f       	adc	r31, r31
    47be:	e7 58       	subi	r30, 0x87	; 135
    47c0:	f8 4f       	sbci	r31, 0xF8	; 248
    47c2:	60 81       	ld	r22, Z
    47c4:	71 81       	ldd	r23, Z+1	; 0x01
    47c6:	88 ea       	ldi	r24, 0xA8	; 168
    47c8:	95 e0       	ldi	r25, 0x05	; 5
    47ca:	2b df       	rcall	.-426    	; 0x4622 <_upload_message_rc>
    47cc:	81 11       	cpse	r24, r1
    47ce:	14 c0       	rjmp	.+40     	; 0x47f8 <lora_driver_join+0x46>
    47d0:	08 e2       	ldi	r16, 0x28	; 40
    47d2:	15 e0       	ldi	r17, 0x05	; 5
    47d4:	20 e0       	ldi	r18, 0x00	; 0
    47d6:	30 e0       	ldi	r19, 0x00	; 0
    47d8:	4d e2       	ldi	r20, 0x2D	; 45
    47da:	50 e0       	ldi	r21, 0x00	; 0
    47dc:	68 ef       	ldi	r22, 0xF8	; 248
    47de:	79 e1       	ldi	r23, 0x19	; 25
    47e0:	80 91 6f 19 	lds	r24, 0x196F	; 0x80196f <_serial_reply_buffer_handle>
    47e4:	90 91 70 19 	lds	r25, 0x1970	; 0x801970 <_serial_reply_buffer_handle+0x1>
    47e8:	0e 94 10 14 	call	0x2820	; 0x2820 <xStreamBufferReceive>
    47ec:	88 23       	and	r24, r24
    47ee:	21 f0       	breq	.+8      	; 0x47f8 <lora_driver_join+0x46>
    47f0:	88 ef       	ldi	r24, 0xF8	; 248
    47f2:	99 e1       	ldi	r25, 0x19	; 25
    47f4:	a1 de       	rcall	.-702    	; 0x4538 <_reply2return_code>
    47f6:	03 c0       	rjmp	.+6      	; 0x47fe <lora_driver_join+0x4c>
    47f8:	88 ef       	ldi	r24, 0xF8	; 248
    47fa:	99 e1       	ldi	r25, 0x19	; 25
    47fc:	9d de       	rcall	.-710    	; 0x4538 <_reply2return_code>
    47fe:	1f 91       	pop	r17
    4800:	0f 91       	pop	r16
    4802:	08 95       	ret

00004804 <lora_driver_sent_upload_message>:
    4804:	0f 93       	push	r16
    4806:	1f 93       	push	r17
    4808:	cf 93       	push	r28
    480a:	df 93       	push	r29
    480c:	1f 92       	push	r1
    480e:	cd b7       	in	r28, 0x3d	; 61
    4810:	de b7       	in	r29, 0x3e	; 62
    4812:	db 01       	movw	r26, r22
    4814:	11 96       	adiw	r26, 0x01	; 1
    4816:	9c 91       	ld	r25, X
    4818:	11 97       	sbiw	r26, 0x01	; 1
    481a:	95 31       	cpi	r25, 0x15	; 21
    481c:	08 f0       	brcs	.+2      	; 0x4820 <lora_driver_sent_upload_message+0x1c>
    481e:	b4 c0       	rjmp	.+360    	; 0x4988 <lora_driver_sent_upload_message+0x184>
    4820:	99 23       	and	r25, r25
    4822:	81 f1       	breq	.+96     	; 0x4884 <lora_driver_sent_upload_message+0x80>
    4824:	60 e0       	ldi	r22, 0x00	; 0
    4826:	70 e0       	ldi	r23, 0x00	; 0
    4828:	27 2f       	mov	r18, r23
    482a:	30 e0       	ldi	r19, 0x00	; 0
    482c:	46 2f       	mov	r20, r22
    482e:	50 e0       	ldi	r21, 0x00	; 0
    4830:	fd 01       	movw	r30, r26
    4832:	e4 0f       	add	r30, r20
    4834:	f5 1f       	adc	r31, r21
    4836:	92 81       	ldd	r25, Z+2	; 0x02
    4838:	92 95       	swap	r25
    483a:	9f 70       	andi	r25, 0x0F	; 15
    483c:	9a 30       	cpi	r25, 0x0A	; 10
    483e:	10 f0       	brcs	.+4      	; 0x4844 <lora_driver_sent_upload_message+0x40>
    4840:	99 5c       	subi	r25, 0xC9	; 201
    4842:	01 c0       	rjmp	.+2      	; 0x4846 <lora_driver_sent_upload_message+0x42>
    4844:	90 5d       	subi	r25, 0xD0	; 208
    4846:	f9 01       	movw	r30, r18
    4848:	e7 57       	subi	r30, 0x77	; 119
    484a:	f6 4e       	sbci	r31, 0xE6	; 230
    484c:	90 83       	st	Z, r25
    484e:	2f 5f       	subi	r18, 0xFF	; 255
    4850:	3f 4f       	sbci	r19, 0xFF	; 255
    4852:	fd 01       	movw	r30, r26
    4854:	e4 0f       	add	r30, r20
    4856:	f5 1f       	adc	r31, r21
    4858:	92 81       	ldd	r25, Z+2	; 0x02
    485a:	9f 70       	andi	r25, 0x0F	; 15
    485c:	49 2f       	mov	r20, r25
    485e:	50 e0       	ldi	r21, 0x00	; 0
    4860:	4a 30       	cpi	r20, 0x0A	; 10
    4862:	51 05       	cpc	r21, r1
    4864:	14 f0       	brlt	.+4      	; 0x486a <lora_driver_sent_upload_message+0x66>
    4866:	99 5c       	subi	r25, 0xC9	; 201
    4868:	01 c0       	rjmp	.+2      	; 0x486c <lora_driver_sent_upload_message+0x68>
    486a:	90 5d       	subi	r25, 0xD0	; 208
    486c:	f9 01       	movw	r30, r18
    486e:	e7 57       	subi	r30, 0x77	; 119
    4870:	f6 4e       	sbci	r31, 0xE6	; 230
    4872:	90 83       	st	Z, r25
    4874:	7e 5f       	subi	r23, 0xFE	; 254
    4876:	6f 5f       	subi	r22, 0xFF	; 255
    4878:	11 96       	adiw	r26, 0x01	; 1
    487a:	9c 91       	ld	r25, X
    487c:	11 97       	sbiw	r26, 0x01	; 1
    487e:	69 17       	cp	r22, r25
    4880:	98 f2       	brcs	.-90     	; 0x4828 <lora_driver_sent_upload_message+0x24>
    4882:	01 c0       	rjmp	.+2      	; 0x4886 <lora_driver_sent_upload_message+0x82>
    4884:	70 e0       	ldi	r23, 0x00	; 0
    4886:	e7 2f       	mov	r30, r23
    4888:	f0 e0       	ldi	r31, 0x00	; 0
    488a:	e7 57       	subi	r30, 0x77	; 119
    488c:	f6 4e       	sbci	r31, 0xE6	; 230
    488e:	10 82       	st	Z, r1
    4890:	4c 91       	ld	r20, X
    4892:	81 11       	cpse	r24, r1
    4894:	03 c0       	rjmp	.+6      	; 0x489c <lora_driver_sent_upload_message+0x98>
    4896:	81 eb       	ldi	r24, 0xB1	; 177
    4898:	95 e0       	ldi	r25, 0x05	; 5
    489a:	02 c0       	rjmp	.+4      	; 0x48a0 <lora_driver_sent_upload_message+0x9c>
    489c:	83 eb       	ldi	r24, 0xB3	; 179
    489e:	95 e0       	ldi	r25, 0x05	; 5
    48a0:	29 e8       	ldi	r18, 0x89	; 137
    48a2:	39 e1       	ldi	r19, 0x19	; 25
    48a4:	3f 93       	push	r19
    48a6:	2f 93       	push	r18
    48a8:	1f 92       	push	r1
    48aa:	4f 93       	push	r20
    48ac:	9f 93       	push	r25
    48ae:	8f 93       	push	r24
    48b0:	87 eb       	ldi	r24, 0xB7	; 183
    48b2:	95 e0       	ldi	r25, 0x05	; 5
    48b4:	9f 93       	push	r25
    48b6:	8f 93       	push	r24
    48b8:	8b ec       	ldi	r24, 0xCB	; 203
    48ba:	99 e1       	ldi	r25, 0x19	; 25
    48bc:	9f 93       	push	r25
    48be:	8f 93       	push	r24
    48c0:	0e 94 b0 31 	call	0x6360	; 0x6360 <sprintf>
    48c4:	60 e0       	ldi	r22, 0x00	; 0
    48c6:	70 e0       	ldi	r23, 0x00	; 0
    48c8:	8b ec       	ldi	r24, 0xCB	; 203
    48ca:	99 e1       	ldi	r25, 0x19	; 25
    48cc:	aa de       	rcall	.-684    	; 0x4622 <_upload_message_rc>
    48ce:	0f b6       	in	r0, 0x3f	; 63
    48d0:	f8 94       	cli
    48d2:	de bf       	out	0x3e, r29	; 62
    48d4:	0f be       	out	0x3f, r0	; 63
    48d6:	cd bf       	out	0x3d, r28	; 61
    48d8:	81 11       	cpse	r24, r1
    48da:	59 c0       	rjmp	.+178    	; 0x498e <lora_driver_sent_upload_message+0x18a>
    48dc:	08 e2       	ldi	r16, 0x28	; 40
    48de:	15 e0       	ldi	r17, 0x05	; 5
    48e0:	20 e0       	ldi	r18, 0x00	; 0
    48e2:	30 e0       	ldi	r19, 0x00	; 0
    48e4:	4d e2       	ldi	r20, 0x2D	; 45
    48e6:	50 e0       	ldi	r21, 0x00	; 0
    48e8:	68 ef       	ldi	r22, 0xF8	; 248
    48ea:	79 e1       	ldi	r23, 0x19	; 25
    48ec:	80 91 6f 19 	lds	r24, 0x196F	; 0x80196f <_serial_reply_buffer_handle>
    48f0:	90 91 70 19 	lds	r25, 0x1970	; 0x801970 <_serial_reply_buffer_handle+0x1>
    48f4:	0e 94 10 14 	call	0x2820	; 0x2820 <xStreamBufferReceive>
    48f8:	88 23       	and	r24, r24
    48fa:	09 f4       	brne	.+2      	; 0x48fe <lora_driver_sent_upload_message+0xfa>
    48fc:	47 c0       	rjmp	.+142    	; 0x498c <lora_driver_sent_upload_message+0x188>
    48fe:	88 ef       	ldi	r24, 0xF8	; 248
    4900:	99 e1       	ldi	r25, 0x19	; 25
    4902:	1a de       	rcall	.-972    	; 0x4538 <_reply2return_code>
    4904:	8e 30       	cpi	r24, 0x0E	; 14
    4906:	09 f0       	breq	.+2      	; 0x490a <lora_driver_sent_upload_message+0x106>
    4908:	42 c0       	rjmp	.+132    	; 0x498e <lora_driver_sent_upload_message+0x18a>
    490a:	87 e0       	ldi	r24, 0x07	; 7
    490c:	89 83       	std	Y+1, r24	; 0x01
    490e:	80 91 6d 19 	lds	r24, 0x196D	; 0x80196d <_downlinkMessageBuffer>
    4912:	90 91 6e 19 	lds	r25, 0x196E	; 0x80196e <_downlinkMessageBuffer+0x1>
    4916:	89 2b       	or	r24, r25
    4918:	a9 f1       	breq	.+106    	; 0x4984 <lora_driver_sent_upload_message+0x180>
    491a:	be 01       	movw	r22, r28
    491c:	6f 5f       	subi	r22, 0xFF	; 255
    491e:	7f 4f       	sbci	r23, 0xFF	; 255
    4920:	88 ef       	ldi	r24, 0xF8	; 248
    4922:	99 e1       	ldi	r25, 0x19	; 25
    4924:	68 d1       	rcall	.+720    	; 0x4bf6 <decode_port_no>
    4926:	80 93 73 19 	sts	0x1973, r24	; 0x801973 <_downlink_payload>
    492a:	e9 81       	ldd	r30, Y+1	; 0x01
    492c:	f0 e0       	ldi	r31, 0x00	; 0
    492e:	e8 50       	subi	r30, 0x08	; 8
    4930:	f6 4e       	sbci	r31, 0xE6	; 230
    4932:	df 01       	movw	r26, r30
    4934:	0d 90       	ld	r0, X+
    4936:	00 20       	and	r0, r0
    4938:	e9 f7       	brne	.-6      	; 0x4934 <lora_driver_sent_upload_message+0x130>
    493a:	11 97       	sbiw	r26, 0x01	; 1
    493c:	ae 1b       	sub	r26, r30
    493e:	bf 0b       	sbc	r27, r31
    4940:	aa 23       	and	r26, r26
    4942:	91 f0       	breq	.+36     	; 0x4968 <lora_driver_sent_upload_message+0x164>
    4944:	bb 27       	eor	r27, r27
    4946:	cd 01       	movw	r24, r26
    4948:	01 97       	sbiw	r24, 0x01	; 1
    494a:	9c 01       	movw	r18, r24
    494c:	12 f4       	brpl	.+4      	; 0x4952 <lora_driver_sent_upload_message+0x14e>
    494e:	2f 5f       	subi	r18, 0xFF	; 255
    4950:	3f 4f       	sbci	r19, 0xFF	; 255
    4952:	35 95       	asr	r19
    4954:	27 95       	ror	r18
    4956:	20 93 74 19 	sts	0x1974, r18	; 0x801974 <_downlink_payload+0x1>
    495a:	af 01       	movw	r20, r30
    495c:	4f 5f       	subi	r20, 0xFF	; 255
    495e:	5f 4f       	sbci	r21, 0xFF	; 255
    4960:	64 e1       	ldi	r22, 0x14	; 20
    4962:	85 e7       	ldi	r24, 0x75	; 117
    4964:	99 e1       	ldi	r25, 0x19	; 25
    4966:	73 d1       	rcall	.+742    	; 0x4c4e <decode_hexadecimal_string_bytes>
    4968:	01 e0       	ldi	r16, 0x01	; 1
    496a:	10 e0       	ldi	r17, 0x00	; 0
    496c:	20 e0       	ldi	r18, 0x00	; 0
    496e:	30 e0       	ldi	r19, 0x00	; 0
    4970:	46 e1       	ldi	r20, 0x16	; 22
    4972:	50 e0       	ldi	r21, 0x00	; 0
    4974:	63 e7       	ldi	r22, 0x73	; 115
    4976:	79 e1       	ldi	r23, 0x19	; 25
    4978:	80 91 6d 19 	lds	r24, 0x196D	; 0x80196d <_downlinkMessageBuffer>
    497c:	90 91 6e 19 	lds	r25, 0x196E	; 0x80196e <_downlinkMessageBuffer+0x1>
    4980:	0e 94 23 13 	call	0x2646	; 0x2646 <xStreamBufferSend>
    4984:	8e e0       	ldi	r24, 0x0E	; 14
    4986:	03 c0       	rjmp	.+6      	; 0x498e <lora_driver_sent_upload_message+0x18a>
    4988:	84 e1       	ldi	r24, 0x14	; 20
    498a:	01 c0       	rjmp	.+2      	; 0x498e <lora_driver_sent_upload_message+0x18a>
    498c:	80 e0       	ldi	r24, 0x00	; 0
    498e:	0f 90       	pop	r0
    4990:	df 91       	pop	r29
    4992:	cf 91       	pop	r28
    4994:	1f 91       	pop	r17
    4996:	0f 91       	pop	r16
    4998:	08 95       	ret

0000499a <lora_driver_set_adaptive_data_rate>:
    499a:	81 30       	cpi	r24, 0x01	; 1
    499c:	19 f0       	breq	.+6      	; 0x49a4 <lora_driver_set_adaptive_data_rate+0xa>
    499e:	67 ec       	ldi	r22, 0xC7	; 199
    49a0:	75 e0       	ldi	r23, 0x05	; 5
    49a2:	02 c0       	rjmp	.+4      	; 0x49a8 <lora_driver_set_adaptive_data_rate+0xe>
    49a4:	60 ea       	ldi	r22, 0xA0	; 160
    49a6:	76 e0       	ldi	r23, 0x06	; 6
    49a8:	8b ec       	ldi	r24, 0xCB	; 203
    49aa:	95 e0       	ldi	r25, 0x05	; 5
    49ac:	3a ce       	rjmp	.-908    	; 0x4622 <_upload_message_rc>
    49ae:	08 95       	ret

000049b0 <lora_driver_set_receive_delay>:
    49b0:	9f 93       	push	r25
    49b2:	8f 93       	push	r24
    49b4:	8c ef       	ldi	r24, 0xFC	; 252
    49b6:	95 e0       	ldi	r25, 0x05	; 5
    49b8:	9f 93       	push	r25
    49ba:	8f 93       	push	r24
    49bc:	8b ec       	ldi	r24, 0xCB	; 203
    49be:	99 e1       	ldi	r25, 0x19	; 25
    49c0:	9f 93       	push	r25
    49c2:	8f 93       	push	r24
    49c4:	0e 94 b0 31 	call	0x6360	; 0x6360 <sprintf>
    49c8:	60 e0       	ldi	r22, 0x00	; 0
    49ca:	70 e0       	ldi	r23, 0x00	; 0
    49cc:	8b ec       	ldi	r24, 0xCB	; 203
    49ce:	99 e1       	ldi	r25, 0x19	; 25
    49d0:	28 de       	rcall	.-944    	; 0x4622 <_upload_message_rc>
    49d2:	0f 90       	pop	r0
    49d4:	0f 90       	pop	r0
    49d6:	0f 90       	pop	r0
    49d8:	0f 90       	pop	r0
    49da:	0f 90       	pop	r0
    49dc:	0f 90       	pop	r0
    49de:	08 95       	ret

000049e0 <lora_driver_configure_to_eu868>:
    49e0:	2f 92       	push	r2
    49e2:	3f 92       	push	r3
    49e4:	4f 92       	push	r4
    49e6:	5f 92       	push	r5
    49e8:	6f 92       	push	r6
    49ea:	7f 92       	push	r7
    49ec:	8f 92       	push	r8
    49ee:	9f 92       	push	r9
    49f0:	af 92       	push	r10
    49f2:	bf 92       	push	r11
    49f4:	cf 92       	push	r12
    49f6:	df 92       	push	r13
    49f8:	ef 92       	push	r14
    49fa:	ff 92       	push	r15
    49fc:	0f 93       	push	r16
    49fe:	1f 93       	push	r17
    4a00:	cf 93       	push	r28
    4a02:	df 93       	push	r29
    4a04:	cd b7       	in	r28, 0x3d	; 61
    4a06:	de b7       	in	r29, 0x3e	; 62
    4a08:	a0 97       	sbiw	r28, 0x20	; 32
    4a0a:	0f b6       	in	r0, 0x3f	; 63
    4a0c:	f8 94       	cli
    4a0e:	de bf       	out	0x3e, r29	; 62
    4a10:	0f be       	out	0x3f, r0	; 63
    4a12:	cd bf       	out	0x3d, r28	; 61
    4a14:	69 e2       	ldi	r22, 0x29	; 41
    4a16:	76 e0       	ldi	r23, 0x06	; 6
    4a18:	85 e3       	ldi	r24, 0x35	; 53
    4a1a:	96 e0       	ldi	r25, 0x06	; 6
    4a1c:	33 dd       	rcall	.-1434   	; 0x4484 <_upload_message>
    4a1e:	8c dd       	rcall	.-1256   	; 0x4538 <_reply2return_code>
    4a20:	81 11       	cpse	r24, r1
    4a22:	a3 c0       	rjmp	.+326    	; 0x4b6a <lora_driver_configure_to_eu868+0x18a>
    4a24:	80 e2       	ldi	r24, 0x20	; 32
    4a26:	e5 e2       	ldi	r30, 0x25	; 37
    4a28:	f2 e0       	ldi	r31, 0x02	; 2
    4a2a:	de 01       	movw	r26, r28
    4a2c:	11 96       	adiw	r26, 0x01	; 1
    4a2e:	01 90       	ld	r0, Z+
    4a30:	0d 92       	st	X+, r0
    4a32:	8a 95       	dec	r24
    4a34:	e1 f7       	brne	.-8      	; 0x4a2e <lora_driver_configure_to_eu868+0x4e>
    4a36:	9e 01       	movw	r18, r28
    4a38:	2f 5f       	subi	r18, 0xFF	; 255
    4a3a:	3f 4f       	sbci	r19, 0xFF	; 255
    4a3c:	69 01       	movw	r12, r18
    4a3e:	e1 2c       	mov	r14, r1
    4a40:	f1 2c       	mov	r15, r1
    4a42:	0f 2e       	mov	r0, r31
    4a44:	f1 e4       	ldi	r31, 0x41	; 65
    4a46:	af 2e       	mov	r10, r31
    4a48:	f6 e0       	ldi	r31, 0x06	; 6
    4a4a:	bf 2e       	mov	r11, r31
    4a4c:	f0 2d       	mov	r31, r0
    4a4e:	0b ec       	ldi	r16, 0xCB	; 203
    4a50:	19 e1       	ldi	r17, 0x19	; 25
    4a52:	0f 2e       	mov	r0, r31
    4a54:	fa e5       	ldi	r31, 0x5A	; 90
    4a56:	4f 2e       	mov	r4, r31
    4a58:	f6 e0       	ldi	r31, 0x06	; 6
    4a5a:	5f 2e       	mov	r5, r31
    4a5c:	f0 2d       	mov	r31, r0
    4a5e:	0f 2e       	mov	r0, r31
    4a60:	f1 e7       	ldi	r31, 0x71	; 113
    4a62:	8f 2e       	mov	r8, r31
    4a64:	f6 e0       	ldi	r31, 0x06	; 6
    4a66:	9f 2e       	mov	r9, r31
    4a68:	f0 2d       	mov	r31, r0
    4a6a:	0f 2e       	mov	r0, r31
    4a6c:	fb e8       	ldi	r31, 0x8B	; 139
    4a6e:	6f 2e       	mov	r6, r31
    4a70:	f6 e0       	ldi	r31, 0x06	; 6
    4a72:	7f 2e       	mov	r7, r31
    4a74:	f0 2d       	mov	r31, r0
    4a76:	3e 2c       	mov	r3, r14
    4a78:	2f 2c       	mov	r2, r15
    4a7a:	ff 92       	push	r15
    4a7c:	ef 92       	push	r14
    4a7e:	bf 92       	push	r11
    4a80:	af 92       	push	r10
    4a82:	1f 93       	push	r17
    4a84:	0f 93       	push	r16
    4a86:	0e 94 b0 31 	call	0x6360	; 0x6360 <sprintf>
    4a8a:	60 e0       	ldi	r22, 0x00	; 0
    4a8c:	70 e0       	ldi	r23, 0x00	; 0
    4a8e:	c8 01       	movw	r24, r16
    4a90:	f9 dc       	rcall	.-1550   	; 0x4484 <_upload_message>
    4a92:	52 dd       	rcall	.-1372   	; 0x4538 <_reply2return_code>
    4a94:	0f 90       	pop	r0
    4a96:	0f 90       	pop	r0
    4a98:	0f 90       	pop	r0
    4a9a:	0f 90       	pop	r0
    4a9c:	0f 90       	pop	r0
    4a9e:	0f 90       	pop	r0
    4aa0:	81 11       	cpse	r24, r1
    4aa2:	63 c0       	rjmp	.+198    	; 0x4b6a <lora_driver_configure_to_eu868+0x18a>
    4aa4:	32 e0       	ldi	r19, 0x02	; 2
    4aa6:	3e 15       	cp	r19, r14
    4aa8:	e8 f4       	brcc	.+58     	; 0x4ae4 <lora_driver_configure_to_eu868+0x104>
    4aaa:	f6 01       	movw	r30, r12
    4aac:	83 81       	ldd	r24, Z+3	; 0x03
    4aae:	8f 93       	push	r24
    4ab0:	82 81       	ldd	r24, Z+2	; 0x02
    4ab2:	8f 93       	push	r24
    4ab4:	81 81       	ldd	r24, Z+1	; 0x01
    4ab6:	8f 93       	push	r24
    4ab8:	80 81       	ld	r24, Z
    4aba:	8f 93       	push	r24
    4abc:	ff 92       	push	r15
    4abe:	ef 92       	push	r14
    4ac0:	5f 92       	push	r5
    4ac2:	4f 92       	push	r4
    4ac4:	1f 93       	push	r17
    4ac6:	0f 93       	push	r16
    4ac8:	0e 94 b0 31 	call	0x6360	; 0x6360 <sprintf>
    4acc:	60 e0       	ldi	r22, 0x00	; 0
    4ace:	70 e0       	ldi	r23, 0x00	; 0
    4ad0:	c8 01       	movw	r24, r16
    4ad2:	d8 dc       	rcall	.-1616   	; 0x4484 <_upload_message>
    4ad4:	31 dd       	rcall	.-1438   	; 0x4538 <_reply2return_code>
    4ad6:	0f b6       	in	r0, 0x3f	; 63
    4ad8:	f8 94       	cli
    4ada:	de bf       	out	0x3e, r29	; 62
    4adc:	0f be       	out	0x3f, r0	; 63
    4ade:	cd bf       	out	0x3d, r28	; 61
    4ae0:	81 11       	cpse	r24, r1
    4ae2:	43 c0       	rjmp	.+134    	; 0x4b6a <lora_driver_configure_to_eu868+0x18a>
    4ae4:	2f 92       	push	r2
    4ae6:	3f 92       	push	r3
    4ae8:	9f 92       	push	r9
    4aea:	8f 92       	push	r8
    4aec:	1f 93       	push	r17
    4aee:	0f 93       	push	r16
    4af0:	0e 94 b0 31 	call	0x6360	; 0x6360 <sprintf>
    4af4:	60 e0       	ldi	r22, 0x00	; 0
    4af6:	70 e0       	ldi	r23, 0x00	; 0
    4af8:	c8 01       	movw	r24, r16
    4afa:	c4 dc       	rcall	.-1656   	; 0x4484 <_upload_message>
    4afc:	1d dd       	rcall	.-1478   	; 0x4538 <_reply2return_code>
    4afe:	0f 90       	pop	r0
    4b00:	0f 90       	pop	r0
    4b02:	0f 90       	pop	r0
    4b04:	0f 90       	pop	r0
    4b06:	0f 90       	pop	r0
    4b08:	0f 90       	pop	r0
    4b0a:	81 11       	cpse	r24, r1
    4b0c:	2e c0       	rjmp	.+92     	; 0x4b6a <lora_driver_configure_to_eu868+0x18a>
    4b0e:	2f 92       	push	r2
    4b10:	3f 92       	push	r3
    4b12:	7f 92       	push	r7
    4b14:	6f 92       	push	r6
    4b16:	1f 93       	push	r17
    4b18:	0f 93       	push	r16
    4b1a:	0e 94 b0 31 	call	0x6360	; 0x6360 <sprintf>
    4b1e:	60 e0       	ldi	r22, 0x00	; 0
    4b20:	70 e0       	ldi	r23, 0x00	; 0
    4b22:	c8 01       	movw	r24, r16
    4b24:	af dc       	rcall	.-1698   	; 0x4484 <_upload_message>
    4b26:	08 dd       	rcall	.-1520   	; 0x4538 <_reply2return_code>
    4b28:	0f 90       	pop	r0
    4b2a:	0f 90       	pop	r0
    4b2c:	0f 90       	pop	r0
    4b2e:	0f 90       	pop	r0
    4b30:	0f 90       	pop	r0
    4b32:	0f 90       	pop	r0
    4b34:	81 11       	cpse	r24, r1
    4b36:	19 c0       	rjmp	.+50     	; 0x4b6a <lora_driver_configure_to_eu868+0x18a>
    4b38:	3f ef       	ldi	r19, 0xFF	; 255
    4b3a:	e3 1a       	sub	r14, r19
    4b3c:	f3 0a       	sbc	r15, r19
    4b3e:	84 e0       	ldi	r24, 0x04	; 4
    4b40:	c8 0e       	add	r12, r24
    4b42:	d1 1c       	adc	r13, r1
    4b44:	98 e0       	ldi	r25, 0x08	; 8
    4b46:	e9 16       	cp	r14, r25
    4b48:	f1 04       	cpc	r15, r1
    4b4a:	09 f0       	breq	.+2      	; 0x4b4e <lora_driver_configure_to_eu868+0x16e>
    4b4c:	94 cf       	rjmp	.-216    	; 0x4a76 <lora_driver_configure_to_eu868+0x96>
    4b4e:	60 e0       	ldi	r22, 0x00	; 0
    4b50:	70 e0       	ldi	r23, 0x00	; 0
    4b52:	83 ea       	ldi	r24, 0xA3	; 163
    4b54:	96 e0       	ldi	r25, 0x06	; 6
    4b56:	96 dc       	rcall	.-1748   	; 0x4484 <_upload_message>
    4b58:	ef dc       	rcall	.-1570   	; 0x4538 <_reply2return_code>
    4b5a:	81 11       	cpse	r24, r1
    4b5c:	06 c0       	rjmp	.+12     	; 0x4b6a <lora_driver_configure_to_eu868+0x18a>
    4b5e:	60 e0       	ldi	r22, 0x00	; 0
    4b60:	70 e0       	ldi	r23, 0x00	; 0
    4b62:	84 eb       	ldi	r24, 0xB4	; 180
    4b64:	96 e0       	ldi	r25, 0x06	; 6
    4b66:	8e dc       	rcall	.-1764   	; 0x4484 <_upload_message>
    4b68:	e7 dc       	rcall	.-1586   	; 0x4538 <_reply2return_code>
    4b6a:	a0 96       	adiw	r28, 0x20	; 32
    4b6c:	0f b6       	in	r0, 0x3f	; 63
    4b6e:	f8 94       	cli
    4b70:	de bf       	out	0x3e, r29	; 62
    4b72:	0f be       	out	0x3f, r0	; 63
    4b74:	cd bf       	out	0x3d, r28	; 61
    4b76:	df 91       	pop	r29
    4b78:	cf 91       	pop	r28
    4b7a:	1f 91       	pop	r17
    4b7c:	0f 91       	pop	r16
    4b7e:	ff 90       	pop	r15
    4b80:	ef 90       	pop	r14
    4b82:	df 90       	pop	r13
    4b84:	cf 90       	pop	r12
    4b86:	bf 90       	pop	r11
    4b88:	af 90       	pop	r10
    4b8a:	9f 90       	pop	r9
    4b8c:	8f 90       	pop	r8
    4b8e:	7f 90       	pop	r7
    4b90:	6f 90       	pop	r6
    4b92:	5f 90       	pop	r5
    4b94:	4f 90       	pop	r4
    4b96:	3f 90       	pop	r3
    4b98:	2f 90       	pop	r2
    4b9a:	08 95       	ret

00004b9c <lora_driver_set_otaa_identity>:
    4b9c:	ef 92       	push	r14
    4b9e:	ff 92       	push	r15
    4ba0:	0f 93       	push	r16
    4ba2:	1f 93       	push	r17
    4ba4:	cf 93       	push	r28
    4ba6:	df 93       	push	r29
    4ba8:	ec 01       	movw	r28, r24
    4baa:	8b 01       	movw	r16, r22
    4bac:	7a 01       	movw	r14, r20
    4bae:	81 e0       	ldi	r24, 0x01	; 1
    4bb0:	f4 de       	rcall	.-536    	; 0x499a <lora_driver_set_adaptive_data_rate>
    4bb2:	81 11       	cpse	r24, r1
    4bb4:	0d c0       	rjmp	.+26     	; 0x4bd0 <lora_driver_set_otaa_identity+0x34>
    4bb6:	ce 01       	movw	r24, r28
    4bb8:	d4 dd       	rcall	.-1112   	; 0x4762 <lora_driver_set_application_identifier>
    4bba:	81 11       	cpse	r24, r1
    4bbc:	09 c0       	rjmp	.+18     	; 0x4bd0 <lora_driver_set_otaa_identity+0x34>
    4bbe:	c8 01       	movw	r24, r16
    4bc0:	e1 dd       	rcall	.-1086   	; 0x4784 <lora_driver_set_application_key>
    4bc2:	81 11       	cpse	r24, r1
    4bc4:	05 c0       	rjmp	.+10     	; 0x4bd0 <lora_driver_set_otaa_identity+0x34>
    4bc6:	c7 01       	movw	r24, r14
    4bc8:	bb dd       	rcall	.-1162   	; 0x4740 <lora_driver_set_device_identifier>
    4bca:	81 11       	cpse	r24, r1
    4bcc:	01 c0       	rjmp	.+2      	; 0x4bd0 <lora_driver_set_otaa_identity+0x34>
    4bce:	eb dd       	rcall	.-1066   	; 0x47a6 <lora_driver_save_mac>
    4bd0:	df 91       	pop	r29
    4bd2:	cf 91       	pop	r28
    4bd4:	1f 91       	pop	r17
    4bd6:	0f 91       	pop	r16
    4bd8:	ff 90       	pop	r15
    4bda:	ef 90       	pop	r14
    4bdc:	08 95       	ret

00004bde <lora_driver_map_return_code_to_text>:
    4bde:	90 e0       	ldi	r25, 0x00	; 0
    4be0:	fc 01       	movw	r30, r24
    4be2:	ee 0f       	add	r30, r30
    4be4:	ff 1f       	adc	r31, r31
    4be6:	8e 0f       	add	r24, r30
    4be8:	9f 1f       	adc	r25, r31
    4bea:	fc 01       	movw	r30, r24
    4bec:	e3 58       	subi	r30, 0x83	; 131
    4bee:	f8 4f       	sbci	r31, 0xF8	; 248
    4bf0:	81 81       	ldd	r24, Z+1	; 0x01
    4bf2:	92 81       	ldd	r25, Z+2	; 0x02
    4bf4:	08 95       	ret

00004bf6 <decode_port_no>:
    4bf6:	dc 01       	movw	r26, r24
    4bf8:	00 97       	sbiw	r24, 0x00	; 0
    4bfa:	29 f1       	breq	.+74     	; 0x4c46 <decode_port_no+0x50>
    4bfc:	fb 01       	movw	r30, r22
    4bfe:	20 81       	ld	r18, Z
    4c00:	fc 01       	movw	r30, r24
    4c02:	01 90       	ld	r0, Z+
    4c04:	00 20       	and	r0, r0
    4c06:	e9 f7       	brne	.-6      	; 0x4c02 <decode_port_no+0xc>
    4c08:	31 97       	sbiw	r30, 0x01	; 1
    4c0a:	e8 1b       	sub	r30, r24
    4c0c:	f9 0b       	sbc	r31, r25
    4c0e:	82 2f       	mov	r24, r18
    4c10:	90 e0       	ldi	r25, 0x00	; 0
    4c12:	e8 17       	cp	r30, r24
    4c14:	f9 07       	cpc	r31, r25
    4c16:	c8 f0       	brcs	.+50     	; 0x4c4a <decode_port_no+0x54>
    4c18:	80 e0       	ldi	r24, 0x00	; 0
    4c1a:	08 c0       	rjmp	.+16     	; 0x4c2c <decode_port_no+0x36>
    4c1c:	88 0f       	add	r24, r24
    4c1e:	38 2f       	mov	r19, r24
    4c20:	33 0f       	add	r19, r19
    4c22:	33 0f       	add	r19, r19
    4c24:	83 0f       	add	r24, r19
    4c26:	80 53       	subi	r24, 0x30	; 48
    4c28:	89 0f       	add	r24, r25
    4c2a:	2f 5f       	subi	r18, 0xFF	; 255
    4c2c:	fd 01       	movw	r30, r26
    4c2e:	e2 0f       	add	r30, r18
    4c30:	f1 1d       	adc	r31, r1
    4c32:	90 81       	ld	r25, Z
    4c34:	30 ed       	ldi	r19, 0xD0	; 208
    4c36:	39 0f       	add	r19, r25
    4c38:	3a 30       	cpi	r19, 0x0A	; 10
    4c3a:	10 f4       	brcc	.+4      	; 0x4c40 <decode_port_no+0x4a>
    4c3c:	91 11       	cpse	r25, r1
    4c3e:	ee cf       	rjmp	.-36     	; 0x4c1c <decode_port_no+0x26>
    4c40:	fb 01       	movw	r30, r22
    4c42:	20 83       	st	Z, r18
    4c44:	08 95       	ret
    4c46:	80 e0       	ldi	r24, 0x00	; 0
    4c48:	08 95       	ret
    4c4a:	80 e0       	ldi	r24, 0x00	; 0
    4c4c:	08 95       	ret

00004c4e <decode_hexadecimal_string_bytes>:
    4c4e:	0f 93       	push	r16
    4c50:	1f 93       	push	r17
    4c52:	cf 93       	push	r28
    4c54:	df 93       	push	r29
    4c56:	dc 01       	movw	r26, r24
    4c58:	ea 01       	movw	r28, r20
    4c5a:	20 97       	sbiw	r28, 0x00	; 0
    4c5c:	e1 f1       	breq	.+120    	; 0x4cd6 <decode_hexadecimal_string_bytes+0x88>
    4c5e:	fa 01       	movw	r30, r20
    4c60:	01 90       	ld	r0, Z+
    4c62:	00 20       	and	r0, r0
    4c64:	e9 f7       	brne	.-6      	; 0x4c60 <decode_hexadecimal_string_bytes+0x12>
    4c66:	31 97       	sbiw	r30, 0x01	; 1
    4c68:	e4 1b       	sub	r30, r20
    4c6a:	f5 0b       	sbc	r31, r21
    4c6c:	32 97       	sbiw	r30, 0x02	; 2
    4c6e:	10 f5       	brcc	.+68     	; 0x4cb4 <decode_hexadecimal_string_bytes+0x66>
    4c70:	32 c0       	rjmp	.+100    	; 0x4cd6 <decode_hexadecimal_string_bytes+0x88>
    4c72:	8d 01       	movw	r16, r26
    4c74:	04 0f       	add	r16, r20
    4c76:	15 1f       	adc	r17, r21
    4c78:	30 e0       	ldi	r19, 0x00	; 0
    4c7a:	ae 01       	movw	r20, r28
    4c7c:	42 0f       	add	r20, r18
    4c7e:	53 1f       	adc	r21, r19
    4c80:	fa 01       	movw	r30, r20
    4c82:	90 81       	ld	r25, Z
    4c84:	91 34       	cpi	r25, 0x41	; 65
    4c86:	28 f0       	brcs	.+10     	; 0x4c92 <decode_hexadecimal_string_bytes+0x44>
    4c88:	97 53       	subi	r25, 0x37	; 55
    4c8a:	59 2f       	mov	r21, r25
    4c8c:	52 95       	swap	r21
    4c8e:	50 7f       	andi	r21, 0xF0	; 240
    4c90:	03 c0       	rjmp	.+6      	; 0x4c98 <decode_hexadecimal_string_bytes+0x4a>
    4c92:	59 2f       	mov	r21, r25
    4c94:	52 95       	swap	r21
    4c96:	50 7f       	andi	r21, 0xF0	; 240
    4c98:	2c 0f       	add	r18, r28
    4c9a:	3d 1f       	adc	r19, r29
    4c9c:	f9 01       	movw	r30, r18
    4c9e:	91 81       	ldd	r25, Z+1	; 0x01
    4ca0:	91 34       	cpi	r25, 0x41	; 65
    4ca2:	10 f0       	brcs	.+4      	; 0x4ca8 <decode_hexadecimal_string_bytes+0x5a>
    4ca4:	97 53       	subi	r25, 0x37	; 55
    4ca6:	01 c0       	rjmp	.+2      	; 0x4caa <decode_hexadecimal_string_bytes+0x5c>
    4ca8:	90 53       	subi	r25, 0x30	; 48
    4caa:	95 0f       	add	r25, r21
    4cac:	f8 01       	movw	r30, r16
    4cae:	90 83       	st	Z, r25
    4cb0:	8f 5f       	subi	r24, 0xFF	; 255
    4cb2:	01 c0       	rjmp	.+2      	; 0x4cb6 <decode_hexadecimal_string_bytes+0x68>
    4cb4:	80 e0       	ldi	r24, 0x00	; 0
    4cb6:	28 2f       	mov	r18, r24
    4cb8:	22 0f       	add	r18, r18
    4cba:	48 2f       	mov	r20, r24
    4cbc:	50 e0       	ldi	r21, 0x00	; 0
    4cbe:	fe 01       	movw	r30, r28
    4cc0:	01 90       	ld	r0, Z+
    4cc2:	00 20       	and	r0, r0
    4cc4:	e9 f7       	brne	.-6      	; 0x4cc0 <decode_hexadecimal_string_bytes+0x72>
    4cc6:	31 97       	sbiw	r30, 0x01	; 1
    4cc8:	ec 1b       	sub	r30, r28
    4cca:	fd 0b       	sbc	r31, r29
    4ccc:	4e 17       	cp	r20, r30
    4cce:	5f 07       	cpc	r21, r31
    4cd0:	10 f4       	brcc	.+4      	; 0x4cd6 <decode_hexadecimal_string_bytes+0x88>
    4cd2:	86 13       	cpse	r24, r22
    4cd4:	ce cf       	rjmp	.-100    	; 0x4c72 <decode_hexadecimal_string_bytes+0x24>
    4cd6:	df 91       	pop	r29
    4cd8:	cf 91       	pop	r28
    4cda:	1f 91       	pop	r17
    4cdc:	0f 91       	pop	r16
    4cde:	08 95       	ret

00004ce0 <reg_read_register>:
    4ce0:	fc 01       	movw	r30, r24
    4ce2:	80 81       	ld	r24, Z
    4ce4:	08 95       	ret

00004ce6 <reg_read_bit>:
    4ce6:	fc 01       	movw	r30, r24
    4ce8:	20 81       	ld	r18, Z
    4cea:	81 e0       	ldi	r24, 0x01	; 1
    4cec:	90 e0       	ldi	r25, 0x00	; 0
    4cee:	02 c0       	rjmp	.+4      	; 0x4cf4 <reg_read_bit+0xe>
    4cf0:	88 0f       	add	r24, r24
    4cf2:	99 1f       	adc	r25, r25
    4cf4:	6a 95       	dec	r22
    4cf6:	e2 f7       	brpl	.-8      	; 0x4cf0 <reg_read_bit+0xa>
    4cf8:	82 23       	and	r24, r18
    4cfa:	08 95       	ret

00004cfc <reg_read_bits>:
    4cfc:	fc 01       	movw	r30, r24
    4cfe:	80 81       	ld	r24, Z
    4d00:	86 23       	and	r24, r22
    4d02:	08 95       	ret

00004d04 <reg_set_register>:
    4d04:	fc 01       	movw	r30, r24
    4d06:	60 83       	st	Z, r22
    4d08:	08 95       	ret

00004d0a <reg_clear_register>:
    4d0a:	fc 01       	movw	r30, r24
    4d0c:	10 82       	st	Z, r1
    4d0e:	08 95       	ret

00004d10 <reg_set_bit>:
    4d10:	fc 01       	movw	r30, r24
    4d12:	40 81       	ld	r20, Z
    4d14:	21 e0       	ldi	r18, 0x01	; 1
    4d16:	30 e0       	ldi	r19, 0x00	; 0
    4d18:	02 c0       	rjmp	.+4      	; 0x4d1e <reg_set_bit+0xe>
    4d1a:	22 0f       	add	r18, r18
    4d1c:	33 1f       	adc	r19, r19
    4d1e:	6a 95       	dec	r22
    4d20:	e2 f7       	brpl	.-8      	; 0x4d1a <reg_set_bit+0xa>
    4d22:	24 2b       	or	r18, r20
    4d24:	20 83       	st	Z, r18
    4d26:	08 95       	ret

00004d28 <reg_set_bits>:
    4d28:	fc 01       	movw	r30, r24
    4d2a:	20 81       	ld	r18, Z
    4d2c:	62 2b       	or	r22, r18
    4d2e:	60 83       	st	Z, r22
    4d30:	08 95       	ret

00004d32 <reg_toggle_bit>:
    4d32:	fc 01       	movw	r30, r24
    4d34:	40 81       	ld	r20, Z
    4d36:	21 e0       	ldi	r18, 0x01	; 1
    4d38:	30 e0       	ldi	r19, 0x00	; 0
    4d3a:	02 c0       	rjmp	.+4      	; 0x4d40 <reg_toggle_bit+0xe>
    4d3c:	22 0f       	add	r18, r18
    4d3e:	33 1f       	adc	r19, r19
    4d40:	6a 95       	dec	r22
    4d42:	e2 f7       	brpl	.-8      	; 0x4d3c <reg_toggle_bit+0xa>
    4d44:	24 27       	eor	r18, r20
    4d46:	20 83       	st	Z, r18
    4d48:	08 95       	ret

00004d4a <reg_toggle_bits>:
    4d4a:	fc 01       	movw	r30, r24
    4d4c:	20 81       	ld	r18, Z
    4d4e:	62 27       	eor	r22, r18
    4d50:	60 83       	st	Z, r22
    4d52:	08 95       	ret

00004d54 <reg_clear_bit>:
    4d54:	fc 01       	movw	r30, r24
    4d56:	90 81       	ld	r25, Z
    4d58:	21 e0       	ldi	r18, 0x01	; 1
    4d5a:	30 e0       	ldi	r19, 0x00	; 0
    4d5c:	02 c0       	rjmp	.+4      	; 0x4d62 <reg_clear_bit+0xe>
    4d5e:	22 0f       	add	r18, r18
    4d60:	33 1f       	adc	r19, r19
    4d62:	6a 95       	dec	r22
    4d64:	e2 f7       	brpl	.-8      	; 0x4d5e <reg_clear_bit+0xa>
    4d66:	20 95       	com	r18
    4d68:	29 23       	and	r18, r25
    4d6a:	20 83       	st	Z, r18
    4d6c:	08 95       	ret

00004d6e <reg_clear_bits>:
    4d6e:	fc 01       	movw	r30, r24
    4d70:	90 81       	ld	r25, Z
    4d72:	60 95       	com	r22
    4d74:	69 23       	and	r22, r25
    4d76:	60 83       	st	Z, r22
    4d78:	08 95       	ret

00004d7a <_serial_call_back>:
    4d7a:	80 91 28 1a 	lds	r24, 0x1A28	; 0x801a28 <crc_sum.1941>
    4d7e:	86 0f       	add	r24, r22
    4d80:	80 93 28 1a 	sts	0x1A28, r24	; 0x801a28 <crc_sum.1941>
    4d84:	90 91 2b 1a 	lds	r25, 0x1A2B	; 0x801a2b <_mh_state>
    4d88:	91 30       	cpi	r25, 0x01	; 1
    4d8a:	79 f0       	breq	.+30     	; 0x4daa <_serial_call_back+0x30>
    4d8c:	28 f0       	brcs	.+10     	; 0x4d98 <_serial_call_back+0x1e>
    4d8e:	92 30       	cpi	r25, 0x02	; 2
    4d90:	a9 f0       	breq	.+42     	; 0x4dbc <_serial_call_back+0x42>
    4d92:	93 30       	cpi	r25, 0x03	; 3
    4d94:	19 f1       	breq	.+70     	; 0x4ddc <_serial_call_back+0x62>
    4d96:	08 95       	ret
    4d98:	6f 3f       	cpi	r22, 0xFF	; 255
    4d9a:	09 f0       	breq	.+2      	; 0x4d9e <_serial_call_back+0x24>
    4d9c:	48 c0       	rjmp	.+144    	; 0x4e2e <_serial_call_back+0xb4>
    4d9e:	10 92 28 1a 	sts	0x1A28, r1	; 0x801a28 <crc_sum.1941>
    4da2:	81 e0       	ldi	r24, 0x01	; 1
    4da4:	80 93 2b 1a 	sts	0x1A2B, r24	; 0x801a2b <_mh_state>
    4da8:	08 95       	ret
    4daa:	66 38       	cpi	r22, 0x86	; 134
    4dac:	09 f0       	breq	.+2      	; 0x4db0 <_serial_call_back+0x36>
    4dae:	3f c0       	rjmp	.+126    	; 0x4e2e <_serial_call_back+0xb4>
    4db0:	10 92 27 1a 	sts	0x1A27, r1	; 0x801a27 <inDex.1939>
    4db4:	82 e0       	ldi	r24, 0x02	; 2
    4db6:	80 93 2b 1a 	sts	0x1A2B, r24	; 0x801a2b <_mh_state>
    4dba:	08 95       	ret
    4dbc:	e0 91 27 1a 	lds	r30, 0x1A27	; 0x801a27 <inDex.1939>
    4dc0:	81 e0       	ldi	r24, 0x01	; 1
    4dc2:	8e 0f       	add	r24, r30
    4dc4:	80 93 27 1a 	sts	0x1A27, r24	; 0x801a27 <inDex.1939>
    4dc8:	f0 e0       	ldi	r31, 0x00	; 0
    4dca:	eb 5d       	subi	r30, 0xDB	; 219
    4dcc:	f5 4e       	sbci	r31, 0xE5	; 229
    4dce:	60 83       	st	Z, r22
    4dd0:	82 30       	cpi	r24, 0x02	; 2
    4dd2:	69 f5       	brne	.+90     	; 0x4e2e <_serial_call_back+0xb4>
    4dd4:	83 e0       	ldi	r24, 0x03	; 3
    4dd6:	80 93 2b 1a 	sts	0x1A2B, r24	; 0x801a2b <_mh_state>
    4dda:	08 95       	ret
    4ddc:	90 91 27 1a 	lds	r25, 0x1A27	; 0x801a27 <inDex.1939>
    4de0:	21 e0       	ldi	r18, 0x01	; 1
    4de2:	29 0f       	add	r18, r25
    4de4:	20 93 27 1a 	sts	0x1A27, r18	; 0x801a27 <inDex.1939>
    4de8:	96 30       	cpi	r25, 0x06	; 6
    4dea:	09 f5       	brne	.+66     	; 0x4e2e <_serial_call_back+0xb4>
    4dec:	81 11       	cpse	r24, r1
    4dee:	0e c0       	rjmp	.+28     	; 0x4e0c <_serial_call_back+0x92>
    4df0:	e5 e2       	ldi	r30, 0x25	; 37
    4df2:	fa e1       	ldi	r31, 0x1A	; 26
    4df4:	80 81       	ld	r24, Z
    4df6:	90 e0       	ldi	r25, 0x00	; 0
    4df8:	98 2f       	mov	r25, r24
    4dfa:	88 27       	eor	r24, r24
    4dfc:	21 81       	ldd	r18, Z+1	; 0x01
    4dfe:	82 0f       	add	r24, r18
    4e00:	91 1d       	adc	r25, r1
    4e02:	90 93 2d 1a 	sts	0x1A2D, r25	; 0x801a2d <_ppm+0x1>
    4e06:	80 93 2c 1a 	sts	0x1A2C, r24	; 0x801a2c <_ppm>
    4e0a:	04 c0       	rjmp	.+8      	; 0x4e14 <_serial_call_back+0x9a>
    4e0c:	10 92 2d 1a 	sts	0x1A2D, r1	; 0x801a2d <_ppm+0x1>
    4e10:	10 92 2c 1a 	sts	0x1A2C, r1	; 0x801a2c <_ppm>
    4e14:	10 92 2b 1a 	sts	0x1A2B, r1	; 0x801a2b <_mh_state>
    4e18:	e0 91 29 1a 	lds	r30, 0x1A29	; 0x801a29 <_app_call_back>
    4e1c:	f0 91 2a 1a 	lds	r31, 0x1A2A	; 0x801a2a <_app_call_back+0x1>
    4e20:	30 97       	sbiw	r30, 0x00	; 0
    4e22:	29 f0       	breq	.+10     	; 0x4e2e <_serial_call_back+0xb4>
    4e24:	80 91 2c 1a 	lds	r24, 0x1A2C	; 0x801a2c <_ppm>
    4e28:	90 91 2d 1a 	lds	r25, 0x1A2D	; 0x801a2d <_ppm+0x1>
    4e2c:	19 95       	eicall
    4e2e:	08 95       	ret

00004e30 <mh_z19_create>:
    4e30:	8f 92       	push	r8
    4e32:	9f 92       	push	r9
    4e34:	af 92       	push	r10
    4e36:	cf 92       	push	r12
    4e38:	ef 92       	push	r14
    4e3a:	0f 93       	push	r16
    4e3c:	cf 93       	push	r28
    4e3e:	df 93       	push	r29
    4e40:	eb 01       	movw	r28, r22
    4e42:	0f 2e       	mov	r0, r31
    4e44:	fd eb       	ldi	r31, 0xBD	; 189
    4e46:	8f 2e       	mov	r8, r31
    4e48:	f6 e2       	ldi	r31, 0x26	; 38
    4e4a:	9f 2e       	mov	r9, r31
    4e4c:	f0 2d       	mov	r31, r0
    4e4e:	68 94       	set
    4e50:	aa 24       	eor	r10, r10
    4e52:	a4 f8       	bld	r10, 4
    4e54:	68 94       	set
    4e56:	cc 24       	eor	r12, r12
    4e58:	c4 f8       	bld	r12, 4
    4e5a:	e1 2c       	mov	r14, r1
    4e5c:	00 e0       	ldi	r16, 0x00	; 0
    4e5e:	23 e0       	ldi	r18, 0x03	; 3
    4e60:	40 e8       	ldi	r20, 0x80	; 128
    4e62:	55 e2       	ldi	r21, 0x25	; 37
    4e64:	60 e0       	ldi	r22, 0x00	; 0
    4e66:	70 e0       	ldi	r23, 0x00	; 0
    4e68:	85 d0       	rcall	.+266    	; 0x4f74 <serial_new_instance>
    4e6a:	90 93 2f 1a 	sts	0x1A2F, r25	; 0x801a2f <_serial+0x1>
    4e6e:	80 93 2e 1a 	sts	0x1A2E, r24	; 0x801a2e <_serial>
    4e72:	d0 93 2a 1a 	sts	0x1A2A, r29	; 0x801a2a <_app_call_back+0x1>
    4e76:	c0 93 29 1a 	sts	0x1A29, r28	; 0x801a29 <_app_call_back>
    4e7a:	df 91       	pop	r29
    4e7c:	cf 91       	pop	r28
    4e7e:	0f 91       	pop	r16
    4e80:	ef 90       	pop	r14
    4e82:	cf 90       	pop	r12
    4e84:	af 90       	pop	r10
    4e86:	9f 90       	pop	r9
    4e88:	8f 90       	pop	r8
    4e8a:	08 95       	ret

00004e8c <mh_z19_take_meassuring>:
    4e8c:	cf 93       	push	r28
    4e8e:	df 93       	push	r29
    4e90:	cd b7       	in	r28, 0x3d	; 61
    4e92:	de b7       	in	r29, 0x3e	; 62
    4e94:	29 97       	sbiw	r28, 0x09	; 9
    4e96:	0f b6       	in	r0, 0x3f	; 63
    4e98:	f8 94       	cli
    4e9a:	de bf       	out	0x3e, r29	; 62
    4e9c:	0f be       	out	0x3f, r0	; 63
    4e9e:	cd bf       	out	0x3d, r28	; 61
    4ea0:	89 e0       	ldi	r24, 0x09	; 9
    4ea2:	e5 e4       	ldi	r30, 0x45	; 69
    4ea4:	f2 e0       	ldi	r31, 0x02	; 2
    4ea6:	9e 01       	movw	r18, r28
    4ea8:	2f 5f       	subi	r18, 0xFF	; 255
    4eaa:	3f 4f       	sbci	r19, 0xFF	; 255
    4eac:	d9 01       	movw	r26, r18
    4eae:	01 90       	ld	r0, Z+
    4eb0:	0d 92       	st	X+, r0
    4eb2:	8a 95       	dec	r24
    4eb4:	e1 f7       	brne	.-8      	; 0x4eae <mh_z19_take_meassuring+0x22>
    4eb6:	10 92 2d 1a 	sts	0x1A2D, r1	; 0x801a2d <_ppm+0x1>
    4eba:	10 92 2c 1a 	sts	0x1A2C, r1	; 0x801a2c <_ppm>
    4ebe:	80 91 2e 1a 	lds	r24, 0x1A2E	; 0x801a2e <_serial>
    4ec2:	90 91 2f 1a 	lds	r25, 0x1A2F	; 0x801a2f <_serial+0x1>
    4ec6:	00 97       	sbiw	r24, 0x00	; 0
    4ec8:	31 f0       	breq	.+12     	; 0x4ed6 <mh_z19_take_meassuring+0x4a>
    4eca:	42 2f       	mov	r20, r18
    4ecc:	53 2f       	mov	r21, r19
    4ece:	69 e0       	ldi	r22, 0x09	; 9
    4ed0:	0c d1       	rcall	.+536    	; 0x50ea <serial_send_bytes>
    4ed2:	80 e0       	ldi	r24, 0x00	; 0
    4ed4:	01 c0       	rjmp	.+2      	; 0x4ed8 <mh_z19_take_meassuring+0x4c>
    4ed6:	82 e0       	ldi	r24, 0x02	; 2
    4ed8:	29 96       	adiw	r28, 0x09	; 9
    4eda:	0f b6       	in	r0, 0x3f	; 63
    4edc:	f8 94       	cli
    4ede:	de bf       	out	0x3e, r29	; 62
    4ee0:	0f be       	out	0x3f, r0	; 63
    4ee2:	cd bf       	out	0x3d, r28	; 61
    4ee4:	df 91       	pop	r29
    4ee6:	cf 91       	pop	r28
    4ee8:	08 95       	ret

00004eea <mh_z19_get_co2_ppm>:
    4eea:	20 91 2c 1a 	lds	r18, 0x1A2C	; 0x801a2c <_ppm>
    4eee:	30 91 2d 1a 	lds	r19, 0x1A2D	; 0x801a2d <_ppm+0x1>
    4ef2:	21 15       	cp	r18, r1
    4ef4:	31 05       	cpc	r19, r1
    4ef6:	29 f4       	brne	.+10     	; 0x4f02 <mh_z19_get_co2_ppm+0x18>
    4ef8:	fc 01       	movw	r30, r24
    4efa:	11 82       	std	Z+1, r1	; 0x01
    4efc:	10 82       	st	Z, r1
    4efe:	81 e0       	ldi	r24, 0x01	; 1
    4f00:	08 95       	ret
    4f02:	fc 01       	movw	r30, r24
    4f04:	31 83       	std	Z+1, r19	; 0x01
    4f06:	20 83       	st	Z, r18
    4f08:	80 e0       	ldi	r24, 0x00	; 0
    4f0a:	08 95       	ret

00004f0c <rcServoSet>:
    4f0c:	65 36       	cpi	r22, 0x65	; 101
    4f0e:	0c f0       	brlt	.+2      	; 0x4f12 <rcServoSet+0x6>
    4f10:	64 e6       	ldi	r22, 0x64	; 100
    4f12:	6c 39       	cpi	r22, 0x9C	; 156
    4f14:	0c f4       	brge	.+2      	; 0x4f18 <rcServoSet+0xc>
    4f16:	6c e9       	ldi	r22, 0x9C	; 156
    4f18:	96 ef       	ldi	r25, 0xF6	; 246
    4f1a:	69 02       	muls	r22, r25
    4f1c:	b0 01       	movw	r22, r0
    4f1e:	11 24       	eor	r1, r1
    4f20:	68 54       	subi	r22, 0x48	; 72
    4f22:	74 4f       	sbci	r23, 0xF4	; 244
    4f24:	81 11       	cpse	r24, r1
    4f26:	05 c0       	rjmp	.+10     	; 0x4f32 <rcServoSet+0x26>
    4f28:	70 93 29 01 	sts	0x0129, r23	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
    4f2c:	60 93 28 01 	sts	0x0128, r22	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
    4f30:	08 95       	ret
    4f32:	70 93 2b 01 	sts	0x012B, r23	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
    4f36:	60 93 2a 01 	sts	0x012A, r22	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
    4f3a:	08 95       	ret

00004f3c <rcServoCreate>:
    4f3c:	ea e0       	ldi	r30, 0x0A	; 10
    4f3e:	f1 e0       	ldi	r31, 0x01	; 1
    4f40:	80 81       	ld	r24, Z
    4f42:	88 61       	ori	r24, 0x18	; 24
    4f44:	80 83       	st	Z, r24
    4f46:	8f e3       	ldi	r24, 0x3F	; 63
    4f48:	9c e9       	ldi	r25, 0x9C	; 156
    4f4a:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__TEXT_REGION_LENGTH__+0x700127>
    4f4e:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__TEXT_REGION_LENGTH__+0x700126>
    4f52:	60 e0       	ldi	r22, 0x00	; 0
    4f54:	80 e0       	ldi	r24, 0x00	; 0
    4f56:	da df       	rcall	.-76     	; 0x4f0c <rcServoSet>
    4f58:	60 e0       	ldi	r22, 0x00	; 0
    4f5a:	81 e0       	ldi	r24, 0x01	; 1
    4f5c:	d7 df       	rcall	.-82     	; 0x4f0c <rcServoSet>
    4f5e:	e0 e2       	ldi	r30, 0x20	; 32
    4f60:	f1 e0       	ldi	r31, 0x01	; 1
    4f62:	80 81       	ld	r24, Z
    4f64:	82 6a       	ori	r24, 0xA2	; 162
    4f66:	80 83       	st	Z, r24
    4f68:	e1 e2       	ldi	r30, 0x21	; 33
    4f6a:	f1 e0       	ldi	r31, 0x01	; 1
    4f6c:	80 81       	ld	r24, Z
    4f6e:	8a 61       	ori	r24, 0x1A	; 26
    4f70:	80 83       	st	Z, r24
    4f72:	08 95       	ret

00004f74 <serial_new_instance>:
    4f74:	2f 92       	push	r2
    4f76:	3f 92       	push	r3
    4f78:	4f 92       	push	r4
    4f7a:	5f 92       	push	r5
    4f7c:	6f 92       	push	r6
    4f7e:	7f 92       	push	r7
    4f80:	8f 92       	push	r8
    4f82:	9f 92       	push	r9
    4f84:	af 92       	push	r10
    4f86:	cf 92       	push	r12
    4f88:	ef 92       	push	r14
    4f8a:	ff 92       	push	r15
    4f8c:	0f 93       	push	r16
    4f8e:	1f 93       	push	r17
    4f90:	cf 93       	push	r28
    4f92:	df 93       	push	r29
    4f94:	cd b7       	in	r28, 0x3d	; 61
    4f96:	de b7       	in	r29, 0x3e	; 62
    4f98:	f8 2e       	mov	r15, r24
    4f9a:	2a 01       	movw	r4, r20
    4f9c:	3b 01       	movw	r6, r22
    4f9e:	88 e0       	ldi	r24, 0x08	; 8
    4fa0:	90 e0       	ldi	r25, 0x00	; 0
    4fa2:	c2 d7       	rcall	.+3972   	; 0x5f28 <malloc>
    4fa4:	8c 01       	movw	r16, r24
    4fa6:	8f 2d       	mov	r24, r15
    4fa8:	90 e0       	ldi	r25, 0x00	; 0
    4faa:	88 0f       	add	r24, r24
    4fac:	99 1f       	adc	r25, r25
    4fae:	fc 01       	movw	r30, r24
    4fb0:	e0 5d       	subi	r30, 0xD0	; 208
    4fb2:	f5 4e       	sbci	r31, 0xE5	; 229
    4fb4:	11 83       	std	Z+1, r17	; 0x01
    4fb6:	00 83       	st	Z, r16
    4fb8:	fc 01       	movw	r30, r24
    4fba:	e2 5f       	subi	r30, 0xF2	; 242
    4fbc:	fd 4f       	sbci	r31, 0xFD	; 253
    4fbe:	80 81       	ld	r24, Z
    4fc0:	91 81       	ldd	r25, Z+1	; 0x01
    4fc2:	d8 01       	movw	r26, r16
    4fc4:	8d 93       	st	X+, r24
    4fc6:	9c 93       	st	X, r25
    4fc8:	6c 2d       	mov	r22, r12
    4fca:	70 e0       	ldi	r23, 0x00	; 0
    4fcc:	84 e0       	ldi	r24, 0x04	; 4
    4fce:	90 e0       	ldi	r25, 0x00	; 0
    4fd0:	91 d7       	rcall	.+3874   	; 0x5ef4 <calloc>
    4fd2:	1c 01       	movw	r2, r24
    4fd4:	61 e0       	ldi	r22, 0x01	; 1
    4fd6:	70 e0       	ldi	r23, 0x00	; 0
    4fd8:	86 e0       	ldi	r24, 0x06	; 6
    4fda:	90 e0       	ldi	r25, 0x00	; 0
    4fdc:	8b d7       	rcall	.+3862   	; 0x5ef4 <calloc>
    4fde:	7c 01       	movw	r14, r24
    4fe0:	4c 2d       	mov	r20, r12
    4fe2:	b1 01       	movw	r22, r2
    4fe4:	2b d5       	rcall	.+2646   	; 0x5a3c <fifo_init>
    4fe6:	f8 01       	movw	r30, r16
    4fe8:	f5 82       	std	Z+5, r15	; 0x05
    4fea:	e4 82       	std	Z+4, r14	; 0x04
    4fec:	6a 2d       	mov	r22, r10
    4fee:	70 e0       	ldi	r23, 0x00	; 0
    4ff0:	84 e0       	ldi	r24, 0x04	; 4
    4ff2:	90 e0       	ldi	r25, 0x00	; 0
    4ff4:	7f d7       	rcall	.+3838   	; 0x5ef4 <calloc>
    4ff6:	1c 01       	movw	r2, r24
    4ff8:	61 e0       	ldi	r22, 0x01	; 1
    4ffa:	70 e0       	ldi	r23, 0x00	; 0
    4ffc:	86 e0       	ldi	r24, 0x06	; 6
    4ffe:	90 e0       	ldi	r25, 0x00	; 0
    5000:	79 d7       	rcall	.+3826   	; 0x5ef4 <calloc>
    5002:	7c 01       	movw	r14, r24
    5004:	4a 2d       	mov	r20, r10
    5006:	b1 01       	movw	r22, r2
    5008:	19 d5       	rcall	.+2610   	; 0x5a3c <fifo_init>
    500a:	d8 01       	movw	r26, r16
    500c:	13 96       	adiw	r26, 0x03	; 3
    500e:	fc 92       	st	X, r15
    5010:	ee 92       	st	-X, r14
    5012:	12 97       	sbiw	r26, 0x02	; 2
    5014:	17 96       	adiw	r26, 0x07	; 7
    5016:	9c 92       	st	X, r9
    5018:	8e 92       	st	-X, r8
    501a:	16 97       	sbiw	r26, 0x06	; 6
    501c:	ff b6       	in	r15, 0x3f	; 63
    501e:	f8 94       	cli
    5020:	ed 91       	ld	r30, X+
    5022:	fc 91       	ld	r31, X
    5024:	11 97       	sbiw	r26, 0x01	; 1
    5026:	36 97       	sbiw	r30, 0x06	; 6
    5028:	80 81       	ld	r24, Z
    502a:	82 60       	ori	r24, 0x02	; 2
    502c:	80 83       	st	Z, r24
    502e:	8d 90       	ld	r8, X+
    5030:	9c 90       	ld	r9, X
    5032:	c3 01       	movw	r24, r6
    5034:	b2 01       	movw	r22, r4
    5036:	1c d6       	rcall	.+3128   	; 0x5c70 <__floatunsisf>
    5038:	20 e0       	ldi	r18, 0x00	; 0
    503a:	30 e0       	ldi	r19, 0x00	; 0
    503c:	40 e0       	ldi	r20, 0x00	; 0
    503e:	51 e4       	ldi	r21, 0x41	; 65
    5040:	a5 d6       	rcall	.+3402   	; 0x5d8c <__mulsf3>
    5042:	9b 01       	movw	r18, r22
    5044:	ac 01       	movw	r20, r24
    5046:	60 e0       	ldi	r22, 0x00	; 0
    5048:	74 e2       	ldi	r23, 0x24	; 36
    504a:	84 e7       	ldi	r24, 0x74	; 116
    504c:	9b e4       	ldi	r25, 0x4B	; 75
    504e:	77 d5       	rcall	.+2798   	; 0x5b3e <__divsf3>
    5050:	20 e0       	ldi	r18, 0x00	; 0
    5052:	30 e0       	ldi	r19, 0x00	; 0
    5054:	40 e8       	ldi	r20, 0x80	; 128
    5056:	5f e3       	ldi	r21, 0x3F	; 63
    5058:	0d d5       	rcall	.+2586   	; 0x5a74 <__subsf3>
    505a:	de d5       	rcall	.+3004   	; 0x5c18 <__fixunssfsi>
    505c:	f4 01       	movw	r30, r8
    505e:	32 97       	sbiw	r30, 0x02	; 2
    5060:	60 83       	st	Z, r22
    5062:	d8 01       	movw	r26, r16
    5064:	ed 91       	ld	r30, X+
    5066:	fc 91       	ld	r31, X
    5068:	11 97       	sbiw	r26, 0x01	; 1
    506a:	35 97       	sbiw	r30, 0x05	; 5
    506c:	88 e9       	ldi	r24, 0x98	; 152
    506e:	80 83       	st	Z, r24
    5070:	ed 91       	ld	r30, X+
    5072:	fc 91       	ld	r31, X
    5074:	34 97       	sbiw	r30, 0x04	; 4
    5076:	86 e0       	ldi	r24, 0x06	; 6
    5078:	80 83       	st	Z, r24
    507a:	ff be       	out	0x3f, r15	; 63
    507c:	c8 01       	movw	r24, r16
    507e:	df 91       	pop	r29
    5080:	cf 91       	pop	r28
    5082:	1f 91       	pop	r17
    5084:	0f 91       	pop	r16
    5086:	ff 90       	pop	r15
    5088:	ef 90       	pop	r14
    508a:	cf 90       	pop	r12
    508c:	af 90       	pop	r10
    508e:	9f 90       	pop	r9
    5090:	8f 90       	pop	r8
    5092:	7f 90       	pop	r7
    5094:	6f 90       	pop	r6
    5096:	5f 90       	pop	r5
    5098:	4f 90       	pop	r4
    509a:	3f 90       	pop	r3
    509c:	2f 90       	pop	r2
    509e:	08 95       	ret

000050a0 <serial_send_byte>:
    50a0:	cf 93       	push	r28
    50a2:	df 93       	push	r29
    50a4:	ec 01       	movw	r28, r24
    50a6:	ea 81       	ldd	r30, Y+2	; 0x02
    50a8:	fb 81       	ldd	r31, Y+3	; 0x03
    50aa:	93 81       	ldd	r25, Z+3	; 0x03
    50ac:	82 81       	ldd	r24, Z+2	; 0x02
    50ae:	25 81       	ldd	r18, Z+5	; 0x05
    50b0:	98 1b       	sub	r25, r24
    50b2:	92 23       	and	r25, r18
    50b4:	84 81       	ldd	r24, Z+4	; 0x04
    50b6:	98 17       	cp	r25, r24
    50b8:	a1 f0       	breq	.+40     	; 0x50e2 <serial_send_byte+0x42>
    50ba:	93 81       	ldd	r25, Z+3	; 0x03
    50bc:	26 95       	lsr	r18
    50be:	29 23       	and	r18, r25
    50c0:	a0 81       	ld	r26, Z
    50c2:	b1 81       	ldd	r27, Z+1	; 0x01
    50c4:	a2 0f       	add	r26, r18
    50c6:	b1 1d       	adc	r27, r1
    50c8:	6c 93       	st	X, r22
    50ca:	9f 5f       	subi	r25, 0xFF	; 255
    50cc:	25 81       	ldd	r18, Z+5	; 0x05
    50ce:	92 23       	and	r25, r18
    50d0:	93 83       	std	Z+3, r25	; 0x03
    50d2:	e8 81       	ld	r30, Y
    50d4:	f9 81       	ldd	r31, Y+1	; 0x01
    50d6:	35 97       	sbiw	r30, 0x05	; 5
    50d8:	80 81       	ld	r24, Z
    50da:	80 62       	ori	r24, 0x20	; 32
    50dc:	80 83       	st	Z, r24
    50de:	80 e0       	ldi	r24, 0x00	; 0
    50e0:	01 c0       	rjmp	.+2      	; 0x50e4 <serial_send_byte+0x44>
    50e2:	82 e0       	ldi	r24, 0x02	; 2
    50e4:	df 91       	pop	r29
    50e6:	cf 91       	pop	r28
    50e8:	08 95       	ret

000050ea <serial_send_bytes>:
    50ea:	ef 92       	push	r14
    50ec:	ff 92       	push	r15
    50ee:	0f 93       	push	r16
    50f0:	1f 93       	push	r17
    50f2:	cf 93       	push	r28
    50f4:	df 93       	push	r29
    50f6:	7c 01       	movw	r14, r24
    50f8:	dc 01       	movw	r26, r24
    50fa:	12 96       	adiw	r26, 0x02	; 2
    50fc:	ed 91       	ld	r30, X+
    50fe:	fc 91       	ld	r31, X
    5100:	13 97       	sbiw	r26, 0x03	; 3
    5102:	93 81       	ldd	r25, Z+3	; 0x03
    5104:	82 81       	ldd	r24, Z+2	; 0x02
    5106:	98 1b       	sub	r25, r24
    5108:	85 81       	ldd	r24, Z+5	; 0x05
    510a:	98 23       	and	r25, r24
    510c:	84 81       	ldd	r24, Z+4	; 0x04
    510e:	89 1b       	sub	r24, r25
    5110:	86 17       	cp	r24, r22
    5112:	98 f1       	brcs	.+102    	; 0x517a <serial_send_bytes+0x90>
    5114:	66 23       	and	r22, r22
    5116:	41 f1       	breq	.+80     	; 0x5168 <serial_send_bytes+0x7e>
    5118:	84 2f       	mov	r24, r20
    511a:	95 2f       	mov	r25, r21
    511c:	dc 01       	movw	r26, r24
    511e:	61 50       	subi	r22, 0x01	; 1
    5120:	46 2f       	mov	r20, r22
    5122:	50 e0       	ldi	r21, 0x00	; 0
    5124:	4f 5f       	subi	r20, 0xFF	; 255
    5126:	5f 4f       	sbci	r21, 0xFF	; 255
    5128:	48 0f       	add	r20, r24
    512a:	59 1f       	adc	r21, r25
    512c:	e7 01       	movw	r28, r14
    512e:	ea 81       	ldd	r30, Y+2	; 0x02
    5130:	fb 81       	ldd	r31, Y+3	; 0x03
    5132:	93 81       	ldd	r25, Z+3	; 0x03
    5134:	82 81       	ldd	r24, Z+2	; 0x02
    5136:	25 81       	ldd	r18, Z+5	; 0x05
    5138:	98 1b       	sub	r25, r24
    513a:	92 23       	and	r25, r18
    513c:	84 81       	ldd	r24, Z+4	; 0x04
    513e:	98 17       	cp	r25, r24
    5140:	79 f0       	breq	.+30     	; 0x5160 <serial_send_bytes+0x76>
    5142:	8c 91       	ld	r24, X
    5144:	93 81       	ldd	r25, Z+3	; 0x03
    5146:	26 95       	lsr	r18
    5148:	29 23       	and	r18, r25
    514a:	60 81       	ld	r22, Z
    514c:	71 81       	ldd	r23, Z+1	; 0x01
    514e:	8b 01       	movw	r16, r22
    5150:	02 0f       	add	r16, r18
    5152:	11 1d       	adc	r17, r1
    5154:	e8 01       	movw	r28, r16
    5156:	88 83       	st	Y, r24
    5158:	9f 5f       	subi	r25, 0xFF	; 255
    515a:	85 81       	ldd	r24, Z+5	; 0x05
    515c:	98 23       	and	r25, r24
    515e:	93 83       	std	Z+3, r25	; 0x03
    5160:	11 96       	adiw	r26, 0x01	; 1
    5162:	a4 17       	cp	r26, r20
    5164:	b5 07       	cpc	r27, r21
    5166:	11 f7       	brne	.-60     	; 0x512c <serial_send_bytes+0x42>
    5168:	d7 01       	movw	r26, r14
    516a:	ed 91       	ld	r30, X+
    516c:	fc 91       	ld	r31, X
    516e:	35 97       	sbiw	r30, 0x05	; 5
    5170:	80 81       	ld	r24, Z
    5172:	80 62       	ori	r24, 0x20	; 32
    5174:	80 83       	st	Z, r24
    5176:	80 e0       	ldi	r24, 0x00	; 0
    5178:	01 c0       	rjmp	.+2      	; 0x517c <serial_send_bytes+0x92>
    517a:	82 e0       	ldi	r24, 0x02	; 2
    517c:	df 91       	pop	r29
    517e:	cf 91       	pop	r28
    5180:	1f 91       	pop	r17
    5182:	0f 91       	pop	r16
    5184:	ff 90       	pop	r15
    5186:	ef 90       	pop	r14
    5188:	08 95       	ret

0000518a <serial_get_byte>:
    518a:	dc 01       	movw	r26, r24
    518c:	14 96       	adiw	r26, 0x04	; 4
    518e:	ed 91       	ld	r30, X+
    5190:	fc 91       	ld	r31, X
    5192:	15 97       	sbiw	r26, 0x05	; 5
    5194:	93 81       	ldd	r25, Z+3	; 0x03
    5196:	82 81       	ldd	r24, Z+2	; 0x02
    5198:	98 17       	cp	r25, r24
    519a:	89 f0       	breq	.+34     	; 0x51be <serial_get_byte+0x34>
    519c:	92 81       	ldd	r25, Z+2	; 0x02
    519e:	85 81       	ldd	r24, Z+5	; 0x05
    51a0:	86 95       	lsr	r24
    51a2:	89 23       	and	r24, r25
    51a4:	a0 81       	ld	r26, Z
    51a6:	b1 81       	ldd	r27, Z+1	; 0x01
    51a8:	a8 0f       	add	r26, r24
    51aa:	b1 1d       	adc	r27, r1
    51ac:	8c 91       	ld	r24, X
    51ae:	db 01       	movw	r26, r22
    51b0:	8c 93       	st	X, r24
    51b2:	9f 5f       	subi	r25, 0xFF	; 255
    51b4:	85 81       	ldd	r24, Z+5	; 0x05
    51b6:	98 23       	and	r25, r24
    51b8:	92 83       	std	Z+2, r25	; 0x02
    51ba:	80 e0       	ldi	r24, 0x00	; 0
    51bc:	08 95       	ret
    51be:	83 e0       	ldi	r24, 0x03	; 3
    51c0:	08 95       	ret

000051c2 <__vector_25>:
    51c2:	1f 92       	push	r1
    51c4:	0f 92       	push	r0
    51c6:	0f b6       	in	r0, 0x3f	; 63
    51c8:	0f 92       	push	r0
    51ca:	11 24       	eor	r1, r1
    51cc:	0b b6       	in	r0, 0x3b	; 59
    51ce:	0f 92       	push	r0
    51d0:	2f 93       	push	r18
    51d2:	3f 93       	push	r19
    51d4:	4f 93       	push	r20
    51d6:	5f 93       	push	r21
    51d8:	6f 93       	push	r22
    51da:	7f 93       	push	r23
    51dc:	8f 93       	push	r24
    51de:	9f 93       	push	r25
    51e0:	af 93       	push	r26
    51e2:	bf 93       	push	r27
    51e4:	cf 93       	push	r28
    51e6:	df 93       	push	r29
    51e8:	ef 93       	push	r30
    51ea:	ff 93       	push	r31
    51ec:	a0 91 30 1a 	lds	r26, 0x1A30	; 0x801a30 <_ser_handle>
    51f0:	b0 91 31 1a 	lds	r27, 0x1A31	; 0x801a31 <_ser_handle+0x1>
    51f4:	10 97       	sbiw	r26, 0x00	; 0
    51f6:	11 f1       	breq	.+68     	; 0x523c <__vector_25+0x7a>
    51f8:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    51fc:	14 96       	adiw	r26, 0x04	; 4
    51fe:	ed 91       	ld	r30, X+
    5200:	fc 91       	ld	r31, X
    5202:	15 97       	sbiw	r26, 0x05	; 5
    5204:	93 81       	ldd	r25, Z+3	; 0x03
    5206:	82 81       	ldd	r24, Z+2	; 0x02
    5208:	25 81       	ldd	r18, Z+5	; 0x05
    520a:	98 1b       	sub	r25, r24
    520c:	92 23       	and	r25, r18
    520e:	84 81       	ldd	r24, Z+4	; 0x04
    5210:	98 17       	cp	r25, r24
    5212:	61 f0       	breq	.+24     	; 0x522c <__vector_25+0x6a>
    5214:	83 81       	ldd	r24, Z+3	; 0x03
    5216:	26 95       	lsr	r18
    5218:	28 23       	and	r18, r24
    521a:	c0 81       	ld	r28, Z
    521c:	d1 81       	ldd	r29, Z+1	; 0x01
    521e:	c2 0f       	add	r28, r18
    5220:	d1 1d       	adc	r29, r1
    5222:	68 83       	st	Y, r22
    5224:	8f 5f       	subi	r24, 0xFF	; 255
    5226:	95 81       	ldd	r25, Z+5	; 0x05
    5228:	89 23       	and	r24, r25
    522a:	83 83       	std	Z+3, r24	; 0x03
    522c:	16 96       	adiw	r26, 0x06	; 6
    522e:	ed 91       	ld	r30, X+
    5230:	fc 91       	ld	r31, X
    5232:	17 97       	sbiw	r26, 0x07	; 7
    5234:	30 97       	sbiw	r30, 0x00	; 0
    5236:	11 f0       	breq	.+4      	; 0x523c <__vector_25+0x7a>
    5238:	cd 01       	movw	r24, r26
    523a:	19 95       	eicall
    523c:	ff 91       	pop	r31
    523e:	ef 91       	pop	r30
    5240:	df 91       	pop	r29
    5242:	cf 91       	pop	r28
    5244:	bf 91       	pop	r27
    5246:	af 91       	pop	r26
    5248:	9f 91       	pop	r25
    524a:	8f 91       	pop	r24
    524c:	7f 91       	pop	r23
    524e:	6f 91       	pop	r22
    5250:	5f 91       	pop	r21
    5252:	4f 91       	pop	r20
    5254:	3f 91       	pop	r19
    5256:	2f 91       	pop	r18
    5258:	0f 90       	pop	r0
    525a:	0b be       	out	0x3b, r0	; 59
    525c:	0f 90       	pop	r0
    525e:	0f be       	out	0x3f, r0	; 63
    5260:	0f 90       	pop	r0
    5262:	1f 90       	pop	r1
    5264:	18 95       	reti

00005266 <__vector_26>:
    5266:	1f 92       	push	r1
    5268:	0f 92       	push	r0
    526a:	0f b6       	in	r0, 0x3f	; 63
    526c:	0f 92       	push	r0
    526e:	11 24       	eor	r1, r1
    5270:	0b b6       	in	r0, 0x3b	; 59
    5272:	0f 92       	push	r0
    5274:	2f 93       	push	r18
    5276:	8f 93       	push	r24
    5278:	9f 93       	push	r25
    527a:	af 93       	push	r26
    527c:	bf 93       	push	r27
    527e:	ef 93       	push	r30
    5280:	ff 93       	push	r31
    5282:	e0 91 30 1a 	lds	r30, 0x1A30	; 0x801a30 <_ser_handle>
    5286:	f0 91 31 1a 	lds	r31, 0x1A31	; 0x801a31 <_ser_handle+0x1>
    528a:	30 97       	sbiw	r30, 0x00	; 0
    528c:	b9 f0       	breq	.+46     	; 0x52bc <__vector_26+0x56>
    528e:	02 80       	ldd	r0, Z+2	; 0x02
    5290:	f3 81       	ldd	r31, Z+3	; 0x03
    5292:	e0 2d       	mov	r30, r0
    5294:	93 81       	ldd	r25, Z+3	; 0x03
    5296:	82 81       	ldd	r24, Z+2	; 0x02
    5298:	98 17       	cp	r25, r24
    529a:	b1 f0       	breq	.+44     	; 0x52c8 <__vector_26+0x62>
    529c:	92 81       	ldd	r25, Z+2	; 0x02
    529e:	85 81       	ldd	r24, Z+5	; 0x05
    52a0:	28 2f       	mov	r18, r24
    52a2:	26 95       	lsr	r18
    52a4:	29 23       	and	r18, r25
    52a6:	a0 81       	ld	r26, Z
    52a8:	b1 81       	ldd	r27, Z+1	; 0x01
    52aa:	a2 0f       	add	r26, r18
    52ac:	b1 1d       	adc	r27, r1
    52ae:	2c 91       	ld	r18, X
    52b0:	9f 5f       	subi	r25, 0xFF	; 255
    52b2:	89 23       	and	r24, r25
    52b4:	82 83       	std	Z+2, r24	; 0x02
    52b6:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    52ba:	0b c0       	rjmp	.+22     	; 0x52d2 <__vector_26+0x6c>
    52bc:	e1 ec       	ldi	r30, 0xC1	; 193
    52be:	f0 e0       	ldi	r31, 0x00	; 0
    52c0:	80 81       	ld	r24, Z
    52c2:	8f 7d       	andi	r24, 0xDF	; 223
    52c4:	80 83       	st	Z, r24
    52c6:	05 c0       	rjmp	.+10     	; 0x52d2 <__vector_26+0x6c>
    52c8:	e1 ec       	ldi	r30, 0xC1	; 193
    52ca:	f0 e0       	ldi	r31, 0x00	; 0
    52cc:	80 81       	ld	r24, Z
    52ce:	8f 7d       	andi	r24, 0xDF	; 223
    52d0:	80 83       	st	Z, r24
    52d2:	ff 91       	pop	r31
    52d4:	ef 91       	pop	r30
    52d6:	bf 91       	pop	r27
    52d8:	af 91       	pop	r26
    52da:	9f 91       	pop	r25
    52dc:	8f 91       	pop	r24
    52de:	2f 91       	pop	r18
    52e0:	0f 90       	pop	r0
    52e2:	0b be       	out	0x3b, r0	; 59
    52e4:	0f 90       	pop	r0
    52e6:	0f be       	out	0x3f, r0	; 63
    52e8:	0f 90       	pop	r0
    52ea:	1f 90       	pop	r1
    52ec:	18 95       	reti

000052ee <__vector_36>:
    52ee:	1f 92       	push	r1
    52f0:	0f 92       	push	r0
    52f2:	0f b6       	in	r0, 0x3f	; 63
    52f4:	0f 92       	push	r0
    52f6:	11 24       	eor	r1, r1
    52f8:	0b b6       	in	r0, 0x3b	; 59
    52fa:	0f 92       	push	r0
    52fc:	2f 93       	push	r18
    52fe:	3f 93       	push	r19
    5300:	4f 93       	push	r20
    5302:	5f 93       	push	r21
    5304:	6f 93       	push	r22
    5306:	7f 93       	push	r23
    5308:	8f 93       	push	r24
    530a:	9f 93       	push	r25
    530c:	af 93       	push	r26
    530e:	bf 93       	push	r27
    5310:	cf 93       	push	r28
    5312:	df 93       	push	r29
    5314:	ef 93       	push	r30
    5316:	ff 93       	push	r31
    5318:	a0 91 32 1a 	lds	r26, 0x1A32	; 0x801a32 <_ser_handle+0x2>
    531c:	b0 91 33 1a 	lds	r27, 0x1A33	; 0x801a33 <_ser_handle+0x3>
    5320:	10 97       	sbiw	r26, 0x00	; 0
    5322:	11 f1       	breq	.+68     	; 0x5368 <__vector_36+0x7a>
    5324:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    5328:	14 96       	adiw	r26, 0x04	; 4
    532a:	ed 91       	ld	r30, X+
    532c:	fc 91       	ld	r31, X
    532e:	15 97       	sbiw	r26, 0x05	; 5
    5330:	93 81       	ldd	r25, Z+3	; 0x03
    5332:	82 81       	ldd	r24, Z+2	; 0x02
    5334:	25 81       	ldd	r18, Z+5	; 0x05
    5336:	98 1b       	sub	r25, r24
    5338:	92 23       	and	r25, r18
    533a:	84 81       	ldd	r24, Z+4	; 0x04
    533c:	98 17       	cp	r25, r24
    533e:	61 f0       	breq	.+24     	; 0x5358 <__vector_36+0x6a>
    5340:	83 81       	ldd	r24, Z+3	; 0x03
    5342:	26 95       	lsr	r18
    5344:	28 23       	and	r18, r24
    5346:	c0 81       	ld	r28, Z
    5348:	d1 81       	ldd	r29, Z+1	; 0x01
    534a:	c2 0f       	add	r28, r18
    534c:	d1 1d       	adc	r29, r1
    534e:	68 83       	st	Y, r22
    5350:	8f 5f       	subi	r24, 0xFF	; 255
    5352:	95 81       	ldd	r25, Z+5	; 0x05
    5354:	89 23       	and	r24, r25
    5356:	83 83       	std	Z+3, r24	; 0x03
    5358:	16 96       	adiw	r26, 0x06	; 6
    535a:	ed 91       	ld	r30, X+
    535c:	fc 91       	ld	r31, X
    535e:	17 97       	sbiw	r26, 0x07	; 7
    5360:	30 97       	sbiw	r30, 0x00	; 0
    5362:	11 f0       	breq	.+4      	; 0x5368 <__vector_36+0x7a>
    5364:	cd 01       	movw	r24, r26
    5366:	19 95       	eicall
    5368:	ff 91       	pop	r31
    536a:	ef 91       	pop	r30
    536c:	df 91       	pop	r29
    536e:	cf 91       	pop	r28
    5370:	bf 91       	pop	r27
    5372:	af 91       	pop	r26
    5374:	9f 91       	pop	r25
    5376:	8f 91       	pop	r24
    5378:	7f 91       	pop	r23
    537a:	6f 91       	pop	r22
    537c:	5f 91       	pop	r21
    537e:	4f 91       	pop	r20
    5380:	3f 91       	pop	r19
    5382:	2f 91       	pop	r18
    5384:	0f 90       	pop	r0
    5386:	0b be       	out	0x3b, r0	; 59
    5388:	0f 90       	pop	r0
    538a:	0f be       	out	0x3f, r0	; 63
    538c:	0f 90       	pop	r0
    538e:	1f 90       	pop	r1
    5390:	18 95       	reti

00005392 <__vector_37>:
    5392:	1f 92       	push	r1
    5394:	0f 92       	push	r0
    5396:	0f b6       	in	r0, 0x3f	; 63
    5398:	0f 92       	push	r0
    539a:	11 24       	eor	r1, r1
    539c:	0b b6       	in	r0, 0x3b	; 59
    539e:	0f 92       	push	r0
    53a0:	2f 93       	push	r18
    53a2:	8f 93       	push	r24
    53a4:	9f 93       	push	r25
    53a6:	af 93       	push	r26
    53a8:	bf 93       	push	r27
    53aa:	ef 93       	push	r30
    53ac:	ff 93       	push	r31
    53ae:	e0 91 32 1a 	lds	r30, 0x1A32	; 0x801a32 <_ser_handle+0x2>
    53b2:	f0 91 33 1a 	lds	r31, 0x1A33	; 0x801a33 <_ser_handle+0x3>
    53b6:	30 97       	sbiw	r30, 0x00	; 0
    53b8:	b9 f0       	breq	.+46     	; 0x53e8 <__vector_37+0x56>
    53ba:	02 80       	ldd	r0, Z+2	; 0x02
    53bc:	f3 81       	ldd	r31, Z+3	; 0x03
    53be:	e0 2d       	mov	r30, r0
    53c0:	93 81       	ldd	r25, Z+3	; 0x03
    53c2:	82 81       	ldd	r24, Z+2	; 0x02
    53c4:	98 17       	cp	r25, r24
    53c6:	b1 f0       	breq	.+44     	; 0x53f4 <__vector_37+0x62>
    53c8:	92 81       	ldd	r25, Z+2	; 0x02
    53ca:	85 81       	ldd	r24, Z+5	; 0x05
    53cc:	28 2f       	mov	r18, r24
    53ce:	26 95       	lsr	r18
    53d0:	29 23       	and	r18, r25
    53d2:	a0 81       	ld	r26, Z
    53d4:	b1 81       	ldd	r27, Z+1	; 0x01
    53d6:	a2 0f       	add	r26, r18
    53d8:	b1 1d       	adc	r27, r1
    53da:	2c 91       	ld	r18, X
    53dc:	9f 5f       	subi	r25, 0xFF	; 255
    53de:	89 23       	and	r24, r25
    53e0:	82 83       	std	Z+2, r24	; 0x02
    53e2:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    53e6:	0b c0       	rjmp	.+22     	; 0x53fe <__vector_37+0x6c>
    53e8:	e9 ec       	ldi	r30, 0xC9	; 201
    53ea:	f0 e0       	ldi	r31, 0x00	; 0
    53ec:	80 81       	ld	r24, Z
    53ee:	8f 7d       	andi	r24, 0xDF	; 223
    53f0:	80 83       	st	Z, r24
    53f2:	05 c0       	rjmp	.+10     	; 0x53fe <__vector_37+0x6c>
    53f4:	e9 ec       	ldi	r30, 0xC9	; 201
    53f6:	f0 e0       	ldi	r31, 0x00	; 0
    53f8:	80 81       	ld	r24, Z
    53fa:	8f 7d       	andi	r24, 0xDF	; 223
    53fc:	80 83       	st	Z, r24
    53fe:	ff 91       	pop	r31
    5400:	ef 91       	pop	r30
    5402:	bf 91       	pop	r27
    5404:	af 91       	pop	r26
    5406:	9f 91       	pop	r25
    5408:	8f 91       	pop	r24
    540a:	2f 91       	pop	r18
    540c:	0f 90       	pop	r0
    540e:	0b be       	out	0x3b, r0	; 59
    5410:	0f 90       	pop	r0
    5412:	0f be       	out	0x3f, r0	; 63
    5414:	0f 90       	pop	r0
    5416:	1f 90       	pop	r1
    5418:	18 95       	reti

0000541a <__vector_51>:
    541a:	1f 92       	push	r1
    541c:	0f 92       	push	r0
    541e:	0f b6       	in	r0, 0x3f	; 63
    5420:	0f 92       	push	r0
    5422:	11 24       	eor	r1, r1
    5424:	0b b6       	in	r0, 0x3b	; 59
    5426:	0f 92       	push	r0
    5428:	2f 93       	push	r18
    542a:	3f 93       	push	r19
    542c:	4f 93       	push	r20
    542e:	5f 93       	push	r21
    5430:	6f 93       	push	r22
    5432:	7f 93       	push	r23
    5434:	8f 93       	push	r24
    5436:	9f 93       	push	r25
    5438:	af 93       	push	r26
    543a:	bf 93       	push	r27
    543c:	cf 93       	push	r28
    543e:	df 93       	push	r29
    5440:	ef 93       	push	r30
    5442:	ff 93       	push	r31
    5444:	a0 91 34 1a 	lds	r26, 0x1A34	; 0x801a34 <_ser_handle+0x4>
    5448:	b0 91 35 1a 	lds	r27, 0x1A35	; 0x801a35 <_ser_handle+0x5>
    544c:	10 97       	sbiw	r26, 0x00	; 0
    544e:	11 f1       	breq	.+68     	; 0x5494 <__vector_51+0x7a>
    5450:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    5454:	14 96       	adiw	r26, 0x04	; 4
    5456:	ed 91       	ld	r30, X+
    5458:	fc 91       	ld	r31, X
    545a:	15 97       	sbiw	r26, 0x05	; 5
    545c:	93 81       	ldd	r25, Z+3	; 0x03
    545e:	82 81       	ldd	r24, Z+2	; 0x02
    5460:	25 81       	ldd	r18, Z+5	; 0x05
    5462:	98 1b       	sub	r25, r24
    5464:	92 23       	and	r25, r18
    5466:	84 81       	ldd	r24, Z+4	; 0x04
    5468:	98 17       	cp	r25, r24
    546a:	61 f0       	breq	.+24     	; 0x5484 <__vector_51+0x6a>
    546c:	83 81       	ldd	r24, Z+3	; 0x03
    546e:	26 95       	lsr	r18
    5470:	28 23       	and	r18, r24
    5472:	c0 81       	ld	r28, Z
    5474:	d1 81       	ldd	r29, Z+1	; 0x01
    5476:	c2 0f       	add	r28, r18
    5478:	d1 1d       	adc	r29, r1
    547a:	68 83       	st	Y, r22
    547c:	8f 5f       	subi	r24, 0xFF	; 255
    547e:	95 81       	ldd	r25, Z+5	; 0x05
    5480:	89 23       	and	r24, r25
    5482:	83 83       	std	Z+3, r24	; 0x03
    5484:	16 96       	adiw	r26, 0x06	; 6
    5486:	ed 91       	ld	r30, X+
    5488:	fc 91       	ld	r31, X
    548a:	17 97       	sbiw	r26, 0x07	; 7
    548c:	30 97       	sbiw	r30, 0x00	; 0
    548e:	11 f0       	breq	.+4      	; 0x5494 <__vector_51+0x7a>
    5490:	cd 01       	movw	r24, r26
    5492:	19 95       	eicall
    5494:	ff 91       	pop	r31
    5496:	ef 91       	pop	r30
    5498:	df 91       	pop	r29
    549a:	cf 91       	pop	r28
    549c:	bf 91       	pop	r27
    549e:	af 91       	pop	r26
    54a0:	9f 91       	pop	r25
    54a2:	8f 91       	pop	r24
    54a4:	7f 91       	pop	r23
    54a6:	6f 91       	pop	r22
    54a8:	5f 91       	pop	r21
    54aa:	4f 91       	pop	r20
    54ac:	3f 91       	pop	r19
    54ae:	2f 91       	pop	r18
    54b0:	0f 90       	pop	r0
    54b2:	0b be       	out	0x3b, r0	; 59
    54b4:	0f 90       	pop	r0
    54b6:	0f be       	out	0x3f, r0	; 63
    54b8:	0f 90       	pop	r0
    54ba:	1f 90       	pop	r1
    54bc:	18 95       	reti

000054be <__vector_52>:
    54be:	1f 92       	push	r1
    54c0:	0f 92       	push	r0
    54c2:	0f b6       	in	r0, 0x3f	; 63
    54c4:	0f 92       	push	r0
    54c6:	11 24       	eor	r1, r1
    54c8:	0b b6       	in	r0, 0x3b	; 59
    54ca:	0f 92       	push	r0
    54cc:	2f 93       	push	r18
    54ce:	8f 93       	push	r24
    54d0:	9f 93       	push	r25
    54d2:	af 93       	push	r26
    54d4:	bf 93       	push	r27
    54d6:	ef 93       	push	r30
    54d8:	ff 93       	push	r31
    54da:	e0 91 34 1a 	lds	r30, 0x1A34	; 0x801a34 <_ser_handle+0x4>
    54de:	f0 91 35 1a 	lds	r31, 0x1A35	; 0x801a35 <_ser_handle+0x5>
    54e2:	30 97       	sbiw	r30, 0x00	; 0
    54e4:	b9 f0       	breq	.+46     	; 0x5514 <__vector_52+0x56>
    54e6:	02 80       	ldd	r0, Z+2	; 0x02
    54e8:	f3 81       	ldd	r31, Z+3	; 0x03
    54ea:	e0 2d       	mov	r30, r0
    54ec:	93 81       	ldd	r25, Z+3	; 0x03
    54ee:	82 81       	ldd	r24, Z+2	; 0x02
    54f0:	98 17       	cp	r25, r24
    54f2:	b1 f0       	breq	.+44     	; 0x5520 <__vector_52+0x62>
    54f4:	92 81       	ldd	r25, Z+2	; 0x02
    54f6:	85 81       	ldd	r24, Z+5	; 0x05
    54f8:	28 2f       	mov	r18, r24
    54fa:	26 95       	lsr	r18
    54fc:	29 23       	and	r18, r25
    54fe:	a0 81       	ld	r26, Z
    5500:	b1 81       	ldd	r27, Z+1	; 0x01
    5502:	a2 0f       	add	r26, r18
    5504:	b1 1d       	adc	r27, r1
    5506:	2c 91       	ld	r18, X
    5508:	9f 5f       	subi	r25, 0xFF	; 255
    550a:	89 23       	and	r24, r25
    550c:	82 83       	std	Z+2, r24	; 0x02
    550e:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    5512:	0b c0       	rjmp	.+22     	; 0x552a <__vector_52+0x6c>
    5514:	e1 ed       	ldi	r30, 0xD1	; 209
    5516:	f0 e0       	ldi	r31, 0x00	; 0
    5518:	80 81       	ld	r24, Z
    551a:	8f 7d       	andi	r24, 0xDF	; 223
    551c:	80 83       	st	Z, r24
    551e:	05 c0       	rjmp	.+10     	; 0x552a <__vector_52+0x6c>
    5520:	e1 ed       	ldi	r30, 0xD1	; 209
    5522:	f0 e0       	ldi	r31, 0x00	; 0
    5524:	80 81       	ld	r24, Z
    5526:	8f 7d       	andi	r24, 0xDF	; 223
    5528:	80 83       	st	Z, r24
    552a:	ff 91       	pop	r31
    552c:	ef 91       	pop	r30
    552e:	bf 91       	pop	r27
    5530:	af 91       	pop	r26
    5532:	9f 91       	pop	r25
    5534:	8f 91       	pop	r24
    5536:	2f 91       	pop	r18
    5538:	0f 90       	pop	r0
    553a:	0b be       	out	0x3b, r0	; 59
    553c:	0f 90       	pop	r0
    553e:	0f be       	out	0x3f, r0	; 63
    5540:	0f 90       	pop	r0
    5542:	1f 90       	pop	r1
    5544:	18 95       	reti

00005546 <__vector_54>:
    5546:	1f 92       	push	r1
    5548:	0f 92       	push	r0
    554a:	0f b6       	in	r0, 0x3f	; 63
    554c:	0f 92       	push	r0
    554e:	11 24       	eor	r1, r1
    5550:	0b b6       	in	r0, 0x3b	; 59
    5552:	0f 92       	push	r0
    5554:	2f 93       	push	r18
    5556:	3f 93       	push	r19
    5558:	4f 93       	push	r20
    555a:	5f 93       	push	r21
    555c:	6f 93       	push	r22
    555e:	7f 93       	push	r23
    5560:	8f 93       	push	r24
    5562:	9f 93       	push	r25
    5564:	af 93       	push	r26
    5566:	bf 93       	push	r27
    5568:	cf 93       	push	r28
    556a:	df 93       	push	r29
    556c:	ef 93       	push	r30
    556e:	ff 93       	push	r31
    5570:	a0 91 36 1a 	lds	r26, 0x1A36	; 0x801a36 <_ser_handle+0x6>
    5574:	b0 91 37 1a 	lds	r27, 0x1A37	; 0x801a37 <_ser_handle+0x7>
    5578:	10 97       	sbiw	r26, 0x00	; 0
    557a:	11 f1       	breq	.+68     	; 0x55c0 <__vector_54+0x7a>
    557c:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    5580:	14 96       	adiw	r26, 0x04	; 4
    5582:	ed 91       	ld	r30, X+
    5584:	fc 91       	ld	r31, X
    5586:	15 97       	sbiw	r26, 0x05	; 5
    5588:	93 81       	ldd	r25, Z+3	; 0x03
    558a:	82 81       	ldd	r24, Z+2	; 0x02
    558c:	25 81       	ldd	r18, Z+5	; 0x05
    558e:	98 1b       	sub	r25, r24
    5590:	92 23       	and	r25, r18
    5592:	84 81       	ldd	r24, Z+4	; 0x04
    5594:	98 17       	cp	r25, r24
    5596:	61 f0       	breq	.+24     	; 0x55b0 <__vector_54+0x6a>
    5598:	83 81       	ldd	r24, Z+3	; 0x03
    559a:	26 95       	lsr	r18
    559c:	28 23       	and	r18, r24
    559e:	c0 81       	ld	r28, Z
    55a0:	d1 81       	ldd	r29, Z+1	; 0x01
    55a2:	c2 0f       	add	r28, r18
    55a4:	d1 1d       	adc	r29, r1
    55a6:	68 83       	st	Y, r22
    55a8:	8f 5f       	subi	r24, 0xFF	; 255
    55aa:	95 81       	ldd	r25, Z+5	; 0x05
    55ac:	89 23       	and	r24, r25
    55ae:	83 83       	std	Z+3, r24	; 0x03
    55b0:	16 96       	adiw	r26, 0x06	; 6
    55b2:	ed 91       	ld	r30, X+
    55b4:	fc 91       	ld	r31, X
    55b6:	17 97       	sbiw	r26, 0x07	; 7
    55b8:	30 97       	sbiw	r30, 0x00	; 0
    55ba:	11 f0       	breq	.+4      	; 0x55c0 <__vector_54+0x7a>
    55bc:	cd 01       	movw	r24, r26
    55be:	19 95       	eicall
    55c0:	ff 91       	pop	r31
    55c2:	ef 91       	pop	r30
    55c4:	df 91       	pop	r29
    55c6:	cf 91       	pop	r28
    55c8:	bf 91       	pop	r27
    55ca:	af 91       	pop	r26
    55cc:	9f 91       	pop	r25
    55ce:	8f 91       	pop	r24
    55d0:	7f 91       	pop	r23
    55d2:	6f 91       	pop	r22
    55d4:	5f 91       	pop	r21
    55d6:	4f 91       	pop	r20
    55d8:	3f 91       	pop	r19
    55da:	2f 91       	pop	r18
    55dc:	0f 90       	pop	r0
    55de:	0b be       	out	0x3b, r0	; 59
    55e0:	0f 90       	pop	r0
    55e2:	0f be       	out	0x3f, r0	; 63
    55e4:	0f 90       	pop	r0
    55e6:	1f 90       	pop	r1
    55e8:	18 95       	reti

000055ea <__vector_55>:
    55ea:	1f 92       	push	r1
    55ec:	0f 92       	push	r0
    55ee:	0f b6       	in	r0, 0x3f	; 63
    55f0:	0f 92       	push	r0
    55f2:	11 24       	eor	r1, r1
    55f4:	0b b6       	in	r0, 0x3b	; 59
    55f6:	0f 92       	push	r0
    55f8:	2f 93       	push	r18
    55fa:	8f 93       	push	r24
    55fc:	9f 93       	push	r25
    55fe:	af 93       	push	r26
    5600:	bf 93       	push	r27
    5602:	ef 93       	push	r30
    5604:	ff 93       	push	r31
    5606:	e0 91 36 1a 	lds	r30, 0x1A36	; 0x801a36 <_ser_handle+0x6>
    560a:	f0 91 37 1a 	lds	r31, 0x1A37	; 0x801a37 <_ser_handle+0x7>
    560e:	30 97       	sbiw	r30, 0x00	; 0
    5610:	b9 f0       	breq	.+46     	; 0x5640 <__vector_55+0x56>
    5612:	02 80       	ldd	r0, Z+2	; 0x02
    5614:	f3 81       	ldd	r31, Z+3	; 0x03
    5616:	e0 2d       	mov	r30, r0
    5618:	93 81       	ldd	r25, Z+3	; 0x03
    561a:	82 81       	ldd	r24, Z+2	; 0x02
    561c:	98 17       	cp	r25, r24
    561e:	b1 f0       	breq	.+44     	; 0x564c <__vector_55+0x62>
    5620:	92 81       	ldd	r25, Z+2	; 0x02
    5622:	85 81       	ldd	r24, Z+5	; 0x05
    5624:	28 2f       	mov	r18, r24
    5626:	26 95       	lsr	r18
    5628:	29 23       	and	r18, r25
    562a:	a0 81       	ld	r26, Z
    562c:	b1 81       	ldd	r27, Z+1	; 0x01
    562e:	a2 0f       	add	r26, r18
    5630:	b1 1d       	adc	r27, r1
    5632:	2c 91       	ld	r18, X
    5634:	9f 5f       	subi	r25, 0xFF	; 255
    5636:	89 23       	and	r24, r25
    5638:	82 83       	std	Z+2, r24	; 0x02
    563a:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    563e:	0b c0       	rjmp	.+22     	; 0x5656 <__vector_55+0x6c>
    5640:	e1 e3       	ldi	r30, 0x31	; 49
    5642:	f1 e0       	ldi	r31, 0x01	; 1
    5644:	80 81       	ld	r24, Z
    5646:	8f 7d       	andi	r24, 0xDF	; 223
    5648:	80 83       	st	Z, r24
    564a:	05 c0       	rjmp	.+10     	; 0x5656 <__vector_55+0x6c>
    564c:	e1 e3       	ldi	r30, 0x31	; 49
    564e:	f1 e0       	ldi	r31, 0x01	; 1
    5650:	80 81       	ld	r24, Z
    5652:	8f 7d       	andi	r24, 0xDF	; 223
    5654:	80 83       	st	Z, r24
    5656:	ff 91       	pop	r31
    5658:	ef 91       	pop	r30
    565a:	bf 91       	pop	r27
    565c:	af 91       	pop	r26
    565e:	9f 91       	pop	r25
    5660:	8f 91       	pop	r24
    5662:	2f 91       	pop	r18
    5664:	0f 90       	pop	r0
    5666:	0b be       	out	0x3b, r0	; 59
    5668:	0f 90       	pop	r0
    566a:	0f be       	out	0x3f, r0	; 63
    566c:	0f 90       	pop	r0
    566e:	1f 90       	pop	r1
    5670:	18 95       	reti

00005672 <usart_getchar>:
    5672:	cf 93       	push	r28
    5674:	df 93       	push	r29
    5676:	1f 92       	push	r1
    5678:	cd b7       	in	r28, 0x3d	; 61
    567a:	de b7       	in	r29, 0x3e	; 62
    567c:	be 01       	movw	r22, r28
    567e:	6f 5f       	subi	r22, 0xFF	; 255
    5680:	7f 4f       	sbci	r23, 0xFF	; 255
    5682:	80 91 38 1a 	lds	r24, 0x1A38	; 0x801a38 <_com_serial_instance>
    5686:	90 91 39 1a 	lds	r25, 0x1A39	; 0x801a39 <_com_serial_instance+0x1>
    568a:	7f dd       	rcall	.-1282   	; 0x518a <serial_get_byte>
    568c:	81 11       	cpse	r24, r1
    568e:	f6 cf       	rjmp	.-20     	; 0x567c <usart_getchar+0xa>
    5690:	89 81       	ldd	r24, Y+1	; 0x01
    5692:	90 e0       	ldi	r25, 0x00	; 0
    5694:	0f 90       	pop	r0
    5696:	df 91       	pop	r29
    5698:	cf 91       	pop	r28
    569a:	08 95       	ret

0000569c <usart_putchar>:
    569c:	68 2f       	mov	r22, r24
    569e:	80 91 38 1a 	lds	r24, 0x1A38	; 0x801a38 <_com_serial_instance>
    56a2:	90 91 39 1a 	lds	r25, 0x1A39	; 0x801a39 <_com_serial_instance+0x1>
    56a6:	fc dc       	rcall	.-1544   	; 0x50a0 <serial_send_byte>
    56a8:	80 e0       	ldi	r24, 0x00	; 0
    56aa:	90 e0       	ldi	r25, 0x00	; 0
    56ac:	08 95       	ret

000056ae <stdioCreate>:
    56ae:	8f 92       	push	r8
    56b0:	9f 92       	push	r9
    56b2:	af 92       	push	r10
    56b4:	cf 92       	push	r12
    56b6:	ef 92       	push	r14
    56b8:	0f 93       	push	r16
    56ba:	81 2c       	mov	r8, r1
    56bc:	91 2c       	mov	r9, r1
    56be:	68 94       	set
    56c0:	aa 24       	eor	r10, r10
    56c2:	a7 f8       	bld	r10, 7
    56c4:	68 94       	set
    56c6:	cc 24       	eor	r12, r12
    56c8:	c7 f8       	bld	r12, 7
    56ca:	e1 2c       	mov	r14, r1
    56cc:	00 e0       	ldi	r16, 0x00	; 0
    56ce:	23 e0       	ldi	r18, 0x03	; 3
    56d0:	40 e0       	ldi	r20, 0x00	; 0
    56d2:	51 ee       	ldi	r21, 0xE1	; 225
    56d4:	60 e0       	ldi	r22, 0x00	; 0
    56d6:	70 e0       	ldi	r23, 0x00	; 0
    56d8:	4d dc       	rcall	.-1894   	; 0x4f74 <serial_new_instance>
    56da:	90 93 39 1a 	sts	0x1A39, r25	; 0x801a39 <_com_serial_instance+0x1>
    56de:	80 93 38 1a 	sts	0x1A38, r24	; 0x801a38 <_com_serial_instance>
    56e2:	e3 e8       	ldi	r30, 0x83	; 131
    56e4:	fa e1       	ldi	r31, 0x1A	; 26
    56e6:	86 e1       	ldi	r24, 0x16	; 22
    56e8:	92 e0       	ldi	r25, 0x02	; 2
    56ea:	91 83       	std	Z+1, r25	; 0x01
    56ec:	80 83       	st	Z, r24
    56ee:	93 83       	std	Z+3, r25	; 0x03
    56f0:	82 83       	std	Z+2, r24	; 0x02
    56f2:	0f 91       	pop	r16
    56f4:	ef 90       	pop	r14
    56f6:	cf 90       	pop	r12
    56f8:	af 90       	pop	r10
    56fa:	9f 90       	pop	r9
    56fc:	8f 90       	pop	r8
    56fe:	08 95       	ret

00005700 <_initTwiInterface>:
    5700:	80 91 48 1a 	lds	r24, 0x1A48	; 0x801a48 <_twiIsInitiated>
    5704:	81 11       	cpse	r24, r1
    5706:	0c c0       	rjmp	.+24     	; 0x5720 <_initTwiInterface+0x20>
    5708:	8c e0       	ldi	r24, 0x0C	; 12
    570a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    570e:	8f ef       	ldi	r24, 0xFF	; 255
    5710:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    5714:	84 e0       	ldi	r24, 0x04	; 4
    5716:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    571a:	81 e0       	ldi	r24, 0x01	; 1
    571c:	80 93 48 1a 	sts	0x1A48, r24	; 0x801a48 <_twiIsInitiated>
    5720:	08 95       	ret

00005722 <twiCreate>:
    5722:	af 92       	push	r10
    5724:	bf 92       	push	r11
    5726:	cf 92       	push	r12
    5728:	df 92       	push	r13
    572a:	ef 92       	push	r14
    572c:	ff 92       	push	r15
    572e:	0f 93       	push	r16
    5730:	1f 93       	push	r17
    5732:	cf 93       	push	r28
    5734:	df 93       	push	r29
    5736:	a8 2e       	mov	r10, r24
    5738:	b6 2e       	mov	r11, r22
    573a:	69 01       	movw	r12, r18
    573c:	7a 01       	movw	r14, r20
    573e:	84 e0       	ldi	r24, 0x04	; 4
    5740:	90 e0       	ldi	r25, 0x00	; 0
    5742:	f2 d3       	rcall	.+2020   	; 0x5f28 <malloc>
    5744:	ec 01       	movw	r28, r24
    5746:	89 2b       	or	r24, r25
    5748:	61 f1       	breq	.+88     	; 0x57a2 <twiCreate+0x80>
    574a:	a8 82       	st	Y, r10
    574c:	81 e0       	ldi	r24, 0x01	; 1
    574e:	b8 12       	cpse	r11, r24
    5750:	12 c0       	rjmp	.+36     	; 0x5776 <twiCreate+0x54>
    5752:	c7 01       	movw	r24, r14
    5754:	b6 01       	movw	r22, r12
    5756:	20 ea       	ldi	r18, 0xA0	; 160
    5758:	36 e8       	ldi	r19, 0x86	; 134
    575a:	41 e0       	ldi	r20, 0x01	; 1
    575c:	50 e0       	ldi	r21, 0x00	; 0
    575e:	8c d3       	rcall	.+1816   	; 0x5e78 <__udivmodsi4>
    5760:	da 01       	movw	r26, r20
    5762:	c9 01       	movw	r24, r18
    5764:	40 97       	sbiw	r24, 0x10	; 16
    5766:	a1 09       	sbc	r26, r1
    5768:	b1 09       	sbc	r27, r1
    576a:	b6 95       	lsr	r27
    576c:	a7 95       	ror	r26
    576e:	97 95       	ror	r25
    5770:	87 95       	ror	r24
    5772:	89 83       	std	Y+1, r24	; 0x01
    5774:	11 c0       	rjmp	.+34     	; 0x5798 <twiCreate+0x76>
    5776:	c7 01       	movw	r24, r14
    5778:	b6 01       	movw	r22, r12
    577a:	20 e8       	ldi	r18, 0x80	; 128
    577c:	3a e1       	ldi	r19, 0x1A	; 26
    577e:	46 e0       	ldi	r20, 0x06	; 6
    5780:	50 e0       	ldi	r21, 0x00	; 0
    5782:	7a d3       	rcall	.+1780   	; 0x5e78 <__udivmodsi4>
    5784:	da 01       	movw	r26, r20
    5786:	c9 01       	movw	r24, r18
    5788:	40 97       	sbiw	r24, 0x10	; 16
    578a:	a1 09       	sbc	r26, r1
    578c:	b1 09       	sbc	r27, r1
    578e:	b6 95       	lsr	r27
    5790:	a7 95       	ror	r26
    5792:	97 95       	ror	r25
    5794:	87 95       	ror	r24
    5796:	89 83       	std	Y+1, r24	; 0x01
    5798:	1b 83       	std	Y+3, r17	; 0x03
    579a:	0a 83       	std	Y+2, r16	; 0x02
    579c:	8c 2f       	mov	r24, r28
    579e:	9d 2f       	mov	r25, r29
    57a0:	02 c0       	rjmp	.+4      	; 0x57a6 <twiCreate+0x84>
    57a2:	80 e0       	ldi	r24, 0x00	; 0
    57a4:	90 e0       	ldi	r25, 0x00	; 0
    57a6:	df 91       	pop	r29
    57a8:	cf 91       	pop	r28
    57aa:	1f 91       	pop	r17
    57ac:	0f 91       	pop	r16
    57ae:	ff 90       	pop	r15
    57b0:	ef 90       	pop	r14
    57b2:	df 90       	pop	r13
    57b4:	cf 90       	pop	r12
    57b6:	bf 90       	pop	r11
    57b8:	af 90       	pop	r10
    57ba:	08 95       	ret

000057bc <twiIsBusy>:
    57bc:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    57c0:	81 70       	andi	r24, 0x01	; 1
    57c2:	08 95       	ret

000057c4 <twiTransmit>:
    57c4:	ff 92       	push	r15
    57c6:	0f 93       	push	r16
    57c8:	1f 93       	push	r17
    57ca:	cf 93       	push	r28
    57cc:	df 93       	push	r29
    57ce:	00 97       	sbiw	r24, 0x00	; 0
    57d0:	d1 f1       	breq	.+116    	; 0x5846 <twiTransmit+0x82>
    57d2:	4a 30       	cpi	r20, 0x0A	; 10
    57d4:	d0 f5       	brcc	.+116    	; 0x584a <twiTransmit+0x86>
    57d6:	f4 2e       	mov	r15, r20
    57d8:	8b 01       	movw	r16, r22
    57da:	ec 01       	movw	r28, r24
    57dc:	ef df       	rcall	.-34     	; 0x57bc <twiIsBusy>
    57de:	81 11       	cpse	r24, r1
    57e0:	36 c0       	rjmp	.+108    	; 0x584e <twiTransmit+0x8a>
    57e2:	80 91 3b 1a 	lds	r24, 0x1A3B	; 0x801a3b <_twiCurrentHandler>
    57e6:	90 91 3c 1a 	lds	r25, 0x1A3C	; 0x801a3c <_twiCurrentHandler+0x1>
    57ea:	c8 17       	cp	r28, r24
    57ec:	d9 07       	cpc	r29, r25
    57ee:	41 f0       	breq	.+16     	; 0x5800 <twiTransmit+0x3c>
    57f0:	87 df       	rcall	.-242    	; 0x5700 <_initTwiInterface>
    57f2:	89 81       	ldd	r24, Y+1	; 0x01
    57f4:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    57f8:	d0 93 3c 1a 	sts	0x1A3C, r29	; 0x801a3c <_twiCurrentHandler+0x1>
    57fc:	c0 93 3b 1a 	sts	0x1A3B, r28	; 0x801a3b <_twiCurrentHandler>
    5800:	81 e0       	ldi	r24, 0x01	; 1
    5802:	8f 0d       	add	r24, r15
    5804:	80 93 3d 1a 	sts	0x1A3D, r24	; 0x801a3d <_twiMessageLen>
    5808:	88 81       	ld	r24, Y
    580a:	88 0f       	add	r24, r24
    580c:	80 93 3e 1a 	sts	0x1A3E, r24	; 0x801a3e <_twiMessageBuffer>
    5810:	ff 20       	and	r15, r15
    5812:	89 f0       	breq	.+34     	; 0x5836 <twiTransmit+0x72>
    5814:	f8 01       	movw	r30, r16
    5816:	af e3       	ldi	r26, 0x3F	; 63
    5818:	ba e1       	ldi	r27, 0x1A	; 26
    581a:	4f ef       	ldi	r20, 0xFF	; 255
    581c:	4f 0d       	add	r20, r15
    581e:	64 2f       	mov	r22, r20
    5820:	70 e0       	ldi	r23, 0x00	; 0
    5822:	cb 01       	movw	r24, r22
    5824:	01 96       	adiw	r24, 0x01	; 1
    5826:	b8 01       	movw	r22, r16
    5828:	68 0f       	add	r22, r24
    582a:	79 1f       	adc	r23, r25
    582c:	81 91       	ld	r24, Z+
    582e:	8d 93       	st	X+, r24
    5830:	e6 17       	cp	r30, r22
    5832:	f7 07       	cpc	r31, r23
    5834:	d9 f7       	brne	.-10     	; 0x582c <twiTransmit+0x68>
    5836:	88 ef       	ldi	r24, 0xF8	; 248
    5838:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <_twiCurrentState>
    583c:	85 ea       	ldi	r24, 0xA5	; 165
    583e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    5842:	84 e0       	ldi	r24, 0x04	; 4
    5844:	05 c0       	rjmp	.+10     	; 0x5850 <twiTransmit+0x8c>
    5846:	86 e0       	ldi	r24, 0x06	; 6
    5848:	03 c0       	rjmp	.+6      	; 0x5850 <twiTransmit+0x8c>
    584a:	87 e0       	ldi	r24, 0x07	; 7
    584c:	01 c0       	rjmp	.+2      	; 0x5850 <twiTransmit+0x8c>
    584e:	82 e0       	ldi	r24, 0x02	; 2
    5850:	df 91       	pop	r29
    5852:	cf 91       	pop	r28
    5854:	1f 91       	pop	r17
    5856:	0f 91       	pop	r16
    5858:	ff 90       	pop	r15
    585a:	08 95       	ret

0000585c <twiReceive>:
    585c:	1f 93       	push	r17
    585e:	cf 93       	push	r28
    5860:	df 93       	push	r29
    5862:	00 97       	sbiw	r24, 0x00	; 0
    5864:	29 f1       	breq	.+74     	; 0x58b0 <twiReceive+0x54>
    5866:	6b 30       	cpi	r22, 0x0B	; 11
    5868:	28 f5       	brcc	.+74     	; 0x58b4 <twiReceive+0x58>
    586a:	16 2f       	mov	r17, r22
    586c:	ec 01       	movw	r28, r24
    586e:	a6 df       	rcall	.-180    	; 0x57bc <twiIsBusy>
    5870:	81 11       	cpse	r24, r1
    5872:	22 c0       	rjmp	.+68     	; 0x58b8 <twiReceive+0x5c>
    5874:	80 91 3b 1a 	lds	r24, 0x1A3B	; 0x801a3b <_twiCurrentHandler>
    5878:	90 91 3c 1a 	lds	r25, 0x1A3C	; 0x801a3c <_twiCurrentHandler+0x1>
    587c:	c8 17       	cp	r28, r24
    587e:	d9 07       	cpc	r29, r25
    5880:	41 f0       	breq	.+16     	; 0x5892 <twiReceive+0x36>
    5882:	3e df       	rcall	.-388    	; 0x5700 <_initTwiInterface>
    5884:	89 81       	ldd	r24, Y+1	; 0x01
    5886:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    588a:	d0 93 3c 1a 	sts	0x1A3C, r29	; 0x801a3c <_twiCurrentHandler+0x1>
    588e:	c0 93 3b 1a 	sts	0x1A3B, r28	; 0x801a3b <_twiCurrentHandler>
    5892:	10 93 3d 1a 	sts	0x1A3D, r17	; 0x801a3d <_twiMessageLen>
    5896:	88 81       	ld	r24, Y
    5898:	88 0f       	add	r24, r24
    589a:	81 60       	ori	r24, 0x01	; 1
    589c:	80 93 3e 1a 	sts	0x1A3E, r24	; 0x801a3e <_twiMessageBuffer>
    58a0:	88 ef       	ldi	r24, 0xF8	; 248
    58a2:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <_twiCurrentState>
    58a6:	85 ea       	ldi	r24, 0xA5	; 165
    58a8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    58ac:	85 e0       	ldi	r24, 0x05	; 5
    58ae:	05 c0       	rjmp	.+10     	; 0x58ba <twiReceive+0x5e>
    58b0:	86 e0       	ldi	r24, 0x06	; 6
    58b2:	03 c0       	rjmp	.+6      	; 0x58ba <twiReceive+0x5e>
    58b4:	87 e0       	ldi	r24, 0x07	; 7
    58b6:	01 c0       	rjmp	.+2      	; 0x58ba <twiReceive+0x5e>
    58b8:	82 e0       	ldi	r24, 0x02	; 2
    58ba:	df 91       	pop	r29
    58bc:	cf 91       	pop	r28
    58be:	1f 91       	pop	r17
    58c0:	08 95       	ret

000058c2 <__vector_39>:
    58c2:	1f 92       	push	r1
    58c4:	0f 92       	push	r0
    58c6:	0f b6       	in	r0, 0x3f	; 63
    58c8:	0f 92       	push	r0
    58ca:	11 24       	eor	r1, r1
    58cc:	0b b6       	in	r0, 0x3b	; 59
    58ce:	0f 92       	push	r0
    58d0:	2f 93       	push	r18
    58d2:	3f 93       	push	r19
    58d4:	4f 93       	push	r20
    58d6:	5f 93       	push	r21
    58d8:	6f 93       	push	r22
    58da:	7f 93       	push	r23
    58dc:	8f 93       	push	r24
    58de:	9f 93       	push	r25
    58e0:	af 93       	push	r26
    58e2:	bf 93       	push	r27
    58e4:	ef 93       	push	r30
    58e6:	ff 93       	push	r31
    58e8:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    58ec:	8e 2f       	mov	r24, r30
    58ee:	90 e0       	ldi	r25, 0x00	; 0
    58f0:	fc 01       	movw	r30, r24
    58f2:	38 97       	sbiw	r30, 0x08	; 8
    58f4:	e1 35       	cpi	r30, 0x51	; 81
    58f6:	f1 05       	cpc	r31, r1
    58f8:	08 f0       	brcs	.+2      	; 0x58fc <__vector_39+0x3a>
    58fa:	75 c0       	rjmp	.+234    	; 0x59e6 <__vector_39+0x124>
    58fc:	88 27       	eor	r24, r24
    58fe:	e4 58       	subi	r30, 0x84	; 132
    5900:	ff 4f       	sbci	r31, 0xFF	; 255
    5902:	8f 4f       	sbci	r24, 0xFF	; 255
    5904:	db c2       	rjmp	.+1462   	; 0x5ebc <__tablejump2__>
    5906:	10 92 3a 1a 	sts	0x1A3A, r1	; 0x801a3a <_index.1885>
    590a:	e0 91 3a 1a 	lds	r30, 0x1A3A	; 0x801a3a <_index.1885>
    590e:	80 91 3d 1a 	lds	r24, 0x1A3D	; 0x801a3d <_twiMessageLen>
    5912:	e8 17       	cp	r30, r24
    5914:	70 f4       	brcc	.+28     	; 0x5932 <__vector_39+0x70>
    5916:	81 e0       	ldi	r24, 0x01	; 1
    5918:	8e 0f       	add	r24, r30
    591a:	80 93 3a 1a 	sts	0x1A3A, r24	; 0x801a3a <_index.1885>
    591e:	f0 e0       	ldi	r31, 0x00	; 0
    5920:	e2 5c       	subi	r30, 0xC2	; 194
    5922:	f5 4e       	sbci	r31, 0xE5	; 229
    5924:	80 81       	ld	r24, Z
    5926:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    592a:	85 e8       	ldi	r24, 0x85	; 133
    592c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    5930:	72 c0       	rjmp	.+228    	; 0x5a16 <__vector_39+0x154>
    5932:	84 e9       	ldi	r24, 0x94	; 148
    5934:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    5938:	80 91 3b 1a 	lds	r24, 0x1A3B	; 0x801a3b <_twiCurrentHandler>
    593c:	90 91 3c 1a 	lds	r25, 0x1A3C	; 0x801a3c <_twiCurrentHandler+0x1>
    5940:	dc 01       	movw	r26, r24
    5942:	12 96       	adiw	r26, 0x02	; 2
    5944:	ed 91       	ld	r30, X+
    5946:	fc 91       	ld	r31, X
    5948:	13 97       	sbiw	r26, 0x03	; 3
    594a:	30 97       	sbiw	r30, 0x00	; 0
    594c:	09 f4       	brne	.+2      	; 0x5950 <__vector_39+0x8e>
    594e:	63 c0       	rjmp	.+198    	; 0x5a16 <__vector_39+0x154>
    5950:	20 e0       	ldi	r18, 0x00	; 0
    5952:	40 e0       	ldi	r20, 0x00	; 0
    5954:	50 e0       	ldi	r21, 0x00	; 0
    5956:	64 e0       	ldi	r22, 0x04	; 4
    5958:	19 95       	eicall
    595a:	5d c0       	rjmp	.+186    	; 0x5a16 <__vector_39+0x154>
    595c:	e0 91 3a 1a 	lds	r30, 0x1A3A	; 0x801a3a <_index.1885>
    5960:	81 e0       	ldi	r24, 0x01	; 1
    5962:	8e 0f       	add	r24, r30
    5964:	80 93 3a 1a 	sts	0x1A3A, r24	; 0x801a3a <_index.1885>
    5968:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    596c:	f0 e0       	ldi	r31, 0x00	; 0
    596e:	e2 5c       	subi	r30, 0xC2	; 194
    5970:	f5 4e       	sbci	r31, 0xE5	; 229
    5972:	80 83       	st	Z, r24
    5974:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    5978:	80 34       	cpi	r24, 0x40	; 64
    597a:	11 f4       	brne	.+4      	; 0x5980 <__vector_39+0xbe>
    597c:	10 92 3a 1a 	sts	0x1A3A, r1	; 0x801a3a <_index.1885>
    5980:	20 91 3a 1a 	lds	r18, 0x1A3A	; 0x801a3a <_index.1885>
    5984:	30 e0       	ldi	r19, 0x00	; 0
    5986:	80 91 3d 1a 	lds	r24, 0x1A3D	; 0x801a3d <_twiMessageLen>
    598a:	90 e0       	ldi	r25, 0x00	; 0
    598c:	01 97       	sbiw	r24, 0x01	; 1
    598e:	28 17       	cp	r18, r24
    5990:	39 07       	cpc	r19, r25
    5992:	24 f4       	brge	.+8      	; 0x599c <__vector_39+0xda>
    5994:	85 ec       	ldi	r24, 0xC5	; 197
    5996:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    599a:	3d c0       	rjmp	.+122    	; 0x5a16 <__vector_39+0x154>
    599c:	85 e8       	ldi	r24, 0x85	; 133
    599e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    59a2:	39 c0       	rjmp	.+114    	; 0x5a16 <__vector_39+0x154>
    59a4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    59a8:	e0 91 3a 1a 	lds	r30, 0x1A3A	; 0x801a3a <_index.1885>
    59ac:	f0 e0       	ldi	r31, 0x00	; 0
    59ae:	e2 5c       	subi	r30, 0xC2	; 194
    59b0:	f5 4e       	sbci	r31, 0xE5	; 229
    59b2:	80 83       	st	Z, r24
    59b4:	84 e9       	ldi	r24, 0x94	; 148
    59b6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    59ba:	80 91 3b 1a 	lds	r24, 0x1A3B	; 0x801a3b <_twiCurrentHandler>
    59be:	90 91 3c 1a 	lds	r25, 0x1A3C	; 0x801a3c <_twiCurrentHandler+0x1>
    59c2:	dc 01       	movw	r26, r24
    59c4:	12 96       	adiw	r26, 0x02	; 2
    59c6:	ed 91       	ld	r30, X+
    59c8:	fc 91       	ld	r31, X
    59ca:	13 97       	sbiw	r26, 0x03	; 3
    59cc:	30 97       	sbiw	r30, 0x00	; 0
    59ce:	19 f1       	breq	.+70     	; 0x5a16 <__vector_39+0x154>
    59d0:	20 91 3d 1a 	lds	r18, 0x1A3D	; 0x801a3d <_twiMessageLen>
    59d4:	4e e3       	ldi	r20, 0x3E	; 62
    59d6:	5a e1       	ldi	r21, 0x1A	; 26
    59d8:	65 e0       	ldi	r22, 0x05	; 5
    59da:	19 95       	eicall
    59dc:	1c c0       	rjmp	.+56     	; 0x5a16 <__vector_39+0x154>
    59de:	85 ea       	ldi	r24, 0xA5	; 165
    59e0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    59e4:	18 c0       	rjmp	.+48     	; 0x5a16 <__vector_39+0x154>
    59e6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    59ea:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <_twiCurrentState>
    59ee:	84 e0       	ldi	r24, 0x04	; 4
    59f0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    59f4:	80 91 3b 1a 	lds	r24, 0x1A3B	; 0x801a3b <_twiCurrentHandler>
    59f8:	90 91 3c 1a 	lds	r25, 0x1A3C	; 0x801a3c <_twiCurrentHandler+0x1>
    59fc:	dc 01       	movw	r26, r24
    59fe:	12 96       	adiw	r26, 0x02	; 2
    5a00:	ed 91       	ld	r30, X+
    5a02:	fc 91       	ld	r31, X
    5a04:	13 97       	sbiw	r26, 0x03	; 3
    5a06:	30 97       	sbiw	r30, 0x00	; 0
    5a08:	31 f0       	breq	.+12     	; 0x5a16 <__vector_39+0x154>
    5a0a:	20 e0       	ldi	r18, 0x00	; 0
    5a0c:	40 e0       	ldi	r20, 0x00	; 0
    5a0e:	50 e0       	ldi	r21, 0x00	; 0
    5a10:	60 91 24 02 	lds	r22, 0x0224	; 0x800224 <_twiCurrentState>
    5a14:	19 95       	eicall
    5a16:	ff 91       	pop	r31
    5a18:	ef 91       	pop	r30
    5a1a:	bf 91       	pop	r27
    5a1c:	af 91       	pop	r26
    5a1e:	9f 91       	pop	r25
    5a20:	8f 91       	pop	r24
    5a22:	7f 91       	pop	r23
    5a24:	6f 91       	pop	r22
    5a26:	5f 91       	pop	r21
    5a28:	4f 91       	pop	r20
    5a2a:	3f 91       	pop	r19
    5a2c:	2f 91       	pop	r18
    5a2e:	0f 90       	pop	r0
    5a30:	0b be       	out	0x3b, r0	; 59
    5a32:	0f 90       	pop	r0
    5a34:	0f be       	out	0x3f, r0	; 63
    5a36:	0f 90       	pop	r0
    5a38:	1f 90       	pop	r1
    5a3a:	18 95       	reti

00005a3c <fifo_init>:
    5a3c:	fc 01       	movw	r30, r24
    5a3e:	41 11       	cpse	r20, r1
    5a40:	01 c0       	rjmp	.+2      	; 0x5a44 <fifo_init+0x8>
    5a42:	e8 d3       	rcall	.+2000   	; 0x6214 <abort>
    5a44:	84 2f       	mov	r24, r20
    5a46:	90 e0       	ldi	r25, 0x00	; 0
    5a48:	9c 01       	movw	r18, r24
    5a4a:	21 50       	subi	r18, 0x01	; 1
    5a4c:	31 09       	sbc	r19, r1
    5a4e:	82 23       	and	r24, r18
    5a50:	93 23       	and	r25, r19
    5a52:	89 2b       	or	r24, r25
    5a54:	09 f0       	breq	.+2      	; 0x5a58 <fifo_init+0x1c>
    5a56:	de d3       	rcall	.+1980   	; 0x6214 <abort>
    5a58:	41 38       	cpi	r20, 0x81	; 129
    5a5a:	08 f0       	brcs	.+2      	; 0x5a5e <fifo_init+0x22>
    5a5c:	db d3       	rcall	.+1974   	; 0x6214 <abort>
    5a5e:	12 82       	std	Z+2, r1	; 0x02
    5a60:	13 82       	std	Z+3, r1	; 0x03
    5a62:	44 83       	std	Z+4, r20	; 0x04
    5a64:	44 0f       	add	r20, r20
    5a66:	41 50       	subi	r20, 0x01	; 1
    5a68:	45 83       	std	Z+5, r20	; 0x05
    5a6a:	71 83       	std	Z+1, r23	; 0x01
    5a6c:	60 83       	st	Z, r22
    5a6e:	80 e0       	ldi	r24, 0x00	; 0
    5a70:	90 e0       	ldi	r25, 0x00	; 0
    5a72:	08 95       	ret

00005a74 <__subsf3>:
    5a74:	50 58       	subi	r21, 0x80	; 128

00005a76 <__addsf3>:
    5a76:	bb 27       	eor	r27, r27
    5a78:	aa 27       	eor	r26, r26
    5a7a:	0e d0       	rcall	.+28     	; 0x5a98 <__addsf3x>
    5a7c:	4d c1       	rjmp	.+666    	; 0x5d18 <__fp_round>
    5a7e:	3e d1       	rcall	.+636    	; 0x5cfc <__fp_pscA>
    5a80:	30 f0       	brcs	.+12     	; 0x5a8e <__addsf3+0x18>
    5a82:	43 d1       	rcall	.+646    	; 0x5d0a <__fp_pscB>
    5a84:	20 f0       	brcs	.+8      	; 0x5a8e <__addsf3+0x18>
    5a86:	31 f4       	brne	.+12     	; 0x5a94 <__addsf3+0x1e>
    5a88:	9f 3f       	cpi	r25, 0xFF	; 255
    5a8a:	11 f4       	brne	.+4      	; 0x5a90 <__addsf3+0x1a>
    5a8c:	1e f4       	brtc	.+6      	; 0x5a94 <__addsf3+0x1e>
    5a8e:	33 c1       	rjmp	.+614    	; 0x5cf6 <__fp_nan>
    5a90:	0e f4       	brtc	.+2      	; 0x5a94 <__addsf3+0x1e>
    5a92:	e0 95       	com	r30
    5a94:	e7 fb       	bst	r30, 7
    5a96:	29 c1       	rjmp	.+594    	; 0x5cea <__fp_inf>

00005a98 <__addsf3x>:
    5a98:	e9 2f       	mov	r30, r25
    5a9a:	4f d1       	rcall	.+670    	; 0x5d3a <__fp_split3>
    5a9c:	80 f3       	brcs	.-32     	; 0x5a7e <__addsf3+0x8>
    5a9e:	ba 17       	cp	r27, r26
    5aa0:	62 07       	cpc	r22, r18
    5aa2:	73 07       	cpc	r23, r19
    5aa4:	84 07       	cpc	r24, r20
    5aa6:	95 07       	cpc	r25, r21
    5aa8:	18 f0       	brcs	.+6      	; 0x5ab0 <__addsf3x+0x18>
    5aaa:	71 f4       	brne	.+28     	; 0x5ac8 <__addsf3x+0x30>
    5aac:	9e f5       	brtc	.+102    	; 0x5b14 <__addsf3x+0x7c>
    5aae:	67 c1       	rjmp	.+718    	; 0x5d7e <__fp_zero>
    5ab0:	0e f4       	brtc	.+2      	; 0x5ab4 <__addsf3x+0x1c>
    5ab2:	e0 95       	com	r30
    5ab4:	0b 2e       	mov	r0, r27
    5ab6:	ba 2f       	mov	r27, r26
    5ab8:	a0 2d       	mov	r26, r0
    5aba:	0b 01       	movw	r0, r22
    5abc:	b9 01       	movw	r22, r18
    5abe:	90 01       	movw	r18, r0
    5ac0:	0c 01       	movw	r0, r24
    5ac2:	ca 01       	movw	r24, r20
    5ac4:	a0 01       	movw	r20, r0
    5ac6:	11 24       	eor	r1, r1
    5ac8:	ff 27       	eor	r31, r31
    5aca:	59 1b       	sub	r21, r25
    5acc:	99 f0       	breq	.+38     	; 0x5af4 <__addsf3x+0x5c>
    5ace:	59 3f       	cpi	r21, 0xF9	; 249
    5ad0:	50 f4       	brcc	.+20     	; 0x5ae6 <__addsf3x+0x4e>
    5ad2:	50 3e       	cpi	r21, 0xE0	; 224
    5ad4:	68 f1       	brcs	.+90     	; 0x5b30 <__addsf3x+0x98>
    5ad6:	1a 16       	cp	r1, r26
    5ad8:	f0 40       	sbci	r31, 0x00	; 0
    5ada:	a2 2f       	mov	r26, r18
    5adc:	23 2f       	mov	r18, r19
    5ade:	34 2f       	mov	r19, r20
    5ae0:	44 27       	eor	r20, r20
    5ae2:	58 5f       	subi	r21, 0xF8	; 248
    5ae4:	f3 cf       	rjmp	.-26     	; 0x5acc <__addsf3x+0x34>
    5ae6:	46 95       	lsr	r20
    5ae8:	37 95       	ror	r19
    5aea:	27 95       	ror	r18
    5aec:	a7 95       	ror	r26
    5aee:	f0 40       	sbci	r31, 0x00	; 0
    5af0:	53 95       	inc	r21
    5af2:	c9 f7       	brne	.-14     	; 0x5ae6 <__addsf3x+0x4e>
    5af4:	7e f4       	brtc	.+30     	; 0x5b14 <__addsf3x+0x7c>
    5af6:	1f 16       	cp	r1, r31
    5af8:	ba 0b       	sbc	r27, r26
    5afa:	62 0b       	sbc	r22, r18
    5afc:	73 0b       	sbc	r23, r19
    5afe:	84 0b       	sbc	r24, r20
    5b00:	ba f0       	brmi	.+46     	; 0x5b30 <__addsf3x+0x98>
    5b02:	91 50       	subi	r25, 0x01	; 1
    5b04:	a1 f0       	breq	.+40     	; 0x5b2e <__addsf3x+0x96>
    5b06:	ff 0f       	add	r31, r31
    5b08:	bb 1f       	adc	r27, r27
    5b0a:	66 1f       	adc	r22, r22
    5b0c:	77 1f       	adc	r23, r23
    5b0e:	88 1f       	adc	r24, r24
    5b10:	c2 f7       	brpl	.-16     	; 0x5b02 <__addsf3x+0x6a>
    5b12:	0e c0       	rjmp	.+28     	; 0x5b30 <__addsf3x+0x98>
    5b14:	ba 0f       	add	r27, r26
    5b16:	62 1f       	adc	r22, r18
    5b18:	73 1f       	adc	r23, r19
    5b1a:	84 1f       	adc	r24, r20
    5b1c:	48 f4       	brcc	.+18     	; 0x5b30 <__addsf3x+0x98>
    5b1e:	87 95       	ror	r24
    5b20:	77 95       	ror	r23
    5b22:	67 95       	ror	r22
    5b24:	b7 95       	ror	r27
    5b26:	f7 95       	ror	r31
    5b28:	9e 3f       	cpi	r25, 0xFE	; 254
    5b2a:	08 f0       	brcs	.+2      	; 0x5b2e <__addsf3x+0x96>
    5b2c:	b3 cf       	rjmp	.-154    	; 0x5a94 <__addsf3+0x1e>
    5b2e:	93 95       	inc	r25
    5b30:	88 0f       	add	r24, r24
    5b32:	08 f0       	brcs	.+2      	; 0x5b36 <__addsf3x+0x9e>
    5b34:	99 27       	eor	r25, r25
    5b36:	ee 0f       	add	r30, r30
    5b38:	97 95       	ror	r25
    5b3a:	87 95       	ror	r24
    5b3c:	08 95       	ret

00005b3e <__divsf3>:
    5b3e:	0c d0       	rcall	.+24     	; 0x5b58 <__divsf3x>
    5b40:	eb c0       	rjmp	.+470    	; 0x5d18 <__fp_round>
    5b42:	e3 d0       	rcall	.+454    	; 0x5d0a <__fp_pscB>
    5b44:	40 f0       	brcs	.+16     	; 0x5b56 <__divsf3+0x18>
    5b46:	da d0       	rcall	.+436    	; 0x5cfc <__fp_pscA>
    5b48:	30 f0       	brcs	.+12     	; 0x5b56 <__divsf3+0x18>
    5b4a:	21 f4       	brne	.+8      	; 0x5b54 <__divsf3+0x16>
    5b4c:	5f 3f       	cpi	r21, 0xFF	; 255
    5b4e:	19 f0       	breq	.+6      	; 0x5b56 <__divsf3+0x18>
    5b50:	cc c0       	rjmp	.+408    	; 0x5cea <__fp_inf>
    5b52:	51 11       	cpse	r21, r1
    5b54:	15 c1       	rjmp	.+554    	; 0x5d80 <__fp_szero>
    5b56:	cf c0       	rjmp	.+414    	; 0x5cf6 <__fp_nan>

00005b58 <__divsf3x>:
    5b58:	f0 d0       	rcall	.+480    	; 0x5d3a <__fp_split3>
    5b5a:	98 f3       	brcs	.-26     	; 0x5b42 <__divsf3+0x4>

00005b5c <__divsf3_pse>:
    5b5c:	99 23       	and	r25, r25
    5b5e:	c9 f3       	breq	.-14     	; 0x5b52 <__divsf3+0x14>
    5b60:	55 23       	and	r21, r21
    5b62:	b1 f3       	breq	.-20     	; 0x5b50 <__divsf3+0x12>
    5b64:	95 1b       	sub	r25, r21
    5b66:	55 0b       	sbc	r21, r21
    5b68:	bb 27       	eor	r27, r27
    5b6a:	aa 27       	eor	r26, r26
    5b6c:	62 17       	cp	r22, r18
    5b6e:	73 07       	cpc	r23, r19
    5b70:	84 07       	cpc	r24, r20
    5b72:	38 f0       	brcs	.+14     	; 0x5b82 <__divsf3_pse+0x26>
    5b74:	9f 5f       	subi	r25, 0xFF	; 255
    5b76:	5f 4f       	sbci	r21, 0xFF	; 255
    5b78:	22 0f       	add	r18, r18
    5b7a:	33 1f       	adc	r19, r19
    5b7c:	44 1f       	adc	r20, r20
    5b7e:	aa 1f       	adc	r26, r26
    5b80:	a9 f3       	breq	.-22     	; 0x5b6c <__divsf3_pse+0x10>
    5b82:	33 d0       	rcall	.+102    	; 0x5bea <__divsf3_pse+0x8e>
    5b84:	0e 2e       	mov	r0, r30
    5b86:	3a f0       	brmi	.+14     	; 0x5b96 <__divsf3_pse+0x3a>
    5b88:	e0 e8       	ldi	r30, 0x80	; 128
    5b8a:	30 d0       	rcall	.+96     	; 0x5bec <__divsf3_pse+0x90>
    5b8c:	91 50       	subi	r25, 0x01	; 1
    5b8e:	50 40       	sbci	r21, 0x00	; 0
    5b90:	e6 95       	lsr	r30
    5b92:	00 1c       	adc	r0, r0
    5b94:	ca f7       	brpl	.-14     	; 0x5b88 <__divsf3_pse+0x2c>
    5b96:	29 d0       	rcall	.+82     	; 0x5bea <__divsf3_pse+0x8e>
    5b98:	fe 2f       	mov	r31, r30
    5b9a:	27 d0       	rcall	.+78     	; 0x5bea <__divsf3_pse+0x8e>
    5b9c:	66 0f       	add	r22, r22
    5b9e:	77 1f       	adc	r23, r23
    5ba0:	88 1f       	adc	r24, r24
    5ba2:	bb 1f       	adc	r27, r27
    5ba4:	26 17       	cp	r18, r22
    5ba6:	37 07       	cpc	r19, r23
    5ba8:	48 07       	cpc	r20, r24
    5baa:	ab 07       	cpc	r26, r27
    5bac:	b0 e8       	ldi	r27, 0x80	; 128
    5bae:	09 f0       	breq	.+2      	; 0x5bb2 <__divsf3_pse+0x56>
    5bb0:	bb 0b       	sbc	r27, r27
    5bb2:	80 2d       	mov	r24, r0
    5bb4:	bf 01       	movw	r22, r30
    5bb6:	ff 27       	eor	r31, r31
    5bb8:	93 58       	subi	r25, 0x83	; 131
    5bba:	5f 4f       	sbci	r21, 0xFF	; 255
    5bbc:	2a f0       	brmi	.+10     	; 0x5bc8 <__divsf3_pse+0x6c>
    5bbe:	9e 3f       	cpi	r25, 0xFE	; 254
    5bc0:	51 05       	cpc	r21, r1
    5bc2:	68 f0       	brcs	.+26     	; 0x5bde <__divsf3_pse+0x82>
    5bc4:	92 c0       	rjmp	.+292    	; 0x5cea <__fp_inf>
    5bc6:	dc c0       	rjmp	.+440    	; 0x5d80 <__fp_szero>
    5bc8:	5f 3f       	cpi	r21, 0xFF	; 255
    5bca:	ec f3       	brlt	.-6      	; 0x5bc6 <__divsf3_pse+0x6a>
    5bcc:	98 3e       	cpi	r25, 0xE8	; 232
    5bce:	dc f3       	brlt	.-10     	; 0x5bc6 <__divsf3_pse+0x6a>
    5bd0:	86 95       	lsr	r24
    5bd2:	77 95       	ror	r23
    5bd4:	67 95       	ror	r22
    5bd6:	b7 95       	ror	r27
    5bd8:	f7 95       	ror	r31
    5bda:	9f 5f       	subi	r25, 0xFF	; 255
    5bdc:	c9 f7       	brne	.-14     	; 0x5bd0 <__divsf3_pse+0x74>
    5bde:	88 0f       	add	r24, r24
    5be0:	91 1d       	adc	r25, r1
    5be2:	96 95       	lsr	r25
    5be4:	87 95       	ror	r24
    5be6:	97 f9       	bld	r25, 7
    5be8:	08 95       	ret
    5bea:	e1 e0       	ldi	r30, 0x01	; 1
    5bec:	66 0f       	add	r22, r22
    5bee:	77 1f       	adc	r23, r23
    5bf0:	88 1f       	adc	r24, r24
    5bf2:	bb 1f       	adc	r27, r27
    5bf4:	62 17       	cp	r22, r18
    5bf6:	73 07       	cpc	r23, r19
    5bf8:	84 07       	cpc	r24, r20
    5bfa:	ba 07       	cpc	r27, r26
    5bfc:	20 f0       	brcs	.+8      	; 0x5c06 <__divsf3_pse+0xaa>
    5bfe:	62 1b       	sub	r22, r18
    5c00:	73 0b       	sbc	r23, r19
    5c02:	84 0b       	sbc	r24, r20
    5c04:	ba 0b       	sbc	r27, r26
    5c06:	ee 1f       	adc	r30, r30
    5c08:	88 f7       	brcc	.-30     	; 0x5bec <__divsf3_pse+0x90>
    5c0a:	e0 95       	com	r30
    5c0c:	08 95       	ret

00005c0e <__fixsfsi>:
    5c0e:	04 d0       	rcall	.+8      	; 0x5c18 <__fixunssfsi>
    5c10:	68 94       	set
    5c12:	b1 11       	cpse	r27, r1
    5c14:	b5 c0       	rjmp	.+362    	; 0x5d80 <__fp_szero>
    5c16:	08 95       	ret

00005c18 <__fixunssfsi>:
    5c18:	98 d0       	rcall	.+304    	; 0x5d4a <__fp_splitA>
    5c1a:	88 f0       	brcs	.+34     	; 0x5c3e <__fixunssfsi+0x26>
    5c1c:	9f 57       	subi	r25, 0x7F	; 127
    5c1e:	90 f0       	brcs	.+36     	; 0x5c44 <__fixunssfsi+0x2c>
    5c20:	b9 2f       	mov	r27, r25
    5c22:	99 27       	eor	r25, r25
    5c24:	b7 51       	subi	r27, 0x17	; 23
    5c26:	a0 f0       	brcs	.+40     	; 0x5c50 <__fixunssfsi+0x38>
    5c28:	d1 f0       	breq	.+52     	; 0x5c5e <__fixunssfsi+0x46>
    5c2a:	66 0f       	add	r22, r22
    5c2c:	77 1f       	adc	r23, r23
    5c2e:	88 1f       	adc	r24, r24
    5c30:	99 1f       	adc	r25, r25
    5c32:	1a f0       	brmi	.+6      	; 0x5c3a <__fixunssfsi+0x22>
    5c34:	ba 95       	dec	r27
    5c36:	c9 f7       	brne	.-14     	; 0x5c2a <__fixunssfsi+0x12>
    5c38:	12 c0       	rjmp	.+36     	; 0x5c5e <__fixunssfsi+0x46>
    5c3a:	b1 30       	cpi	r27, 0x01	; 1
    5c3c:	81 f0       	breq	.+32     	; 0x5c5e <__fixunssfsi+0x46>
    5c3e:	9f d0       	rcall	.+318    	; 0x5d7e <__fp_zero>
    5c40:	b1 e0       	ldi	r27, 0x01	; 1
    5c42:	08 95       	ret
    5c44:	9c c0       	rjmp	.+312    	; 0x5d7e <__fp_zero>
    5c46:	67 2f       	mov	r22, r23
    5c48:	78 2f       	mov	r23, r24
    5c4a:	88 27       	eor	r24, r24
    5c4c:	b8 5f       	subi	r27, 0xF8	; 248
    5c4e:	39 f0       	breq	.+14     	; 0x5c5e <__fixunssfsi+0x46>
    5c50:	b9 3f       	cpi	r27, 0xF9	; 249
    5c52:	cc f3       	brlt	.-14     	; 0x5c46 <__fixunssfsi+0x2e>
    5c54:	86 95       	lsr	r24
    5c56:	77 95       	ror	r23
    5c58:	67 95       	ror	r22
    5c5a:	b3 95       	inc	r27
    5c5c:	d9 f7       	brne	.-10     	; 0x5c54 <__fixunssfsi+0x3c>
    5c5e:	3e f4       	brtc	.+14     	; 0x5c6e <__fixunssfsi+0x56>
    5c60:	90 95       	com	r25
    5c62:	80 95       	com	r24
    5c64:	70 95       	com	r23
    5c66:	61 95       	neg	r22
    5c68:	7f 4f       	sbci	r23, 0xFF	; 255
    5c6a:	8f 4f       	sbci	r24, 0xFF	; 255
    5c6c:	9f 4f       	sbci	r25, 0xFF	; 255
    5c6e:	08 95       	ret

00005c70 <__floatunsisf>:
    5c70:	e8 94       	clt
    5c72:	09 c0       	rjmp	.+18     	; 0x5c86 <__floatsisf+0x12>

00005c74 <__floatsisf>:
    5c74:	97 fb       	bst	r25, 7
    5c76:	3e f4       	brtc	.+14     	; 0x5c86 <__floatsisf+0x12>
    5c78:	90 95       	com	r25
    5c7a:	80 95       	com	r24
    5c7c:	70 95       	com	r23
    5c7e:	61 95       	neg	r22
    5c80:	7f 4f       	sbci	r23, 0xFF	; 255
    5c82:	8f 4f       	sbci	r24, 0xFF	; 255
    5c84:	9f 4f       	sbci	r25, 0xFF	; 255
    5c86:	99 23       	and	r25, r25
    5c88:	a9 f0       	breq	.+42     	; 0x5cb4 <__floatsisf+0x40>
    5c8a:	f9 2f       	mov	r31, r25
    5c8c:	96 e9       	ldi	r25, 0x96	; 150
    5c8e:	bb 27       	eor	r27, r27
    5c90:	93 95       	inc	r25
    5c92:	f6 95       	lsr	r31
    5c94:	87 95       	ror	r24
    5c96:	77 95       	ror	r23
    5c98:	67 95       	ror	r22
    5c9a:	b7 95       	ror	r27
    5c9c:	f1 11       	cpse	r31, r1
    5c9e:	f8 cf       	rjmp	.-16     	; 0x5c90 <__floatsisf+0x1c>
    5ca0:	fa f4       	brpl	.+62     	; 0x5ce0 <__floatsisf+0x6c>
    5ca2:	bb 0f       	add	r27, r27
    5ca4:	11 f4       	brne	.+4      	; 0x5caa <__floatsisf+0x36>
    5ca6:	60 ff       	sbrs	r22, 0
    5ca8:	1b c0       	rjmp	.+54     	; 0x5ce0 <__floatsisf+0x6c>
    5caa:	6f 5f       	subi	r22, 0xFF	; 255
    5cac:	7f 4f       	sbci	r23, 0xFF	; 255
    5cae:	8f 4f       	sbci	r24, 0xFF	; 255
    5cb0:	9f 4f       	sbci	r25, 0xFF	; 255
    5cb2:	16 c0       	rjmp	.+44     	; 0x5ce0 <__floatsisf+0x6c>
    5cb4:	88 23       	and	r24, r24
    5cb6:	11 f0       	breq	.+4      	; 0x5cbc <__floatsisf+0x48>
    5cb8:	96 e9       	ldi	r25, 0x96	; 150
    5cba:	11 c0       	rjmp	.+34     	; 0x5cde <__floatsisf+0x6a>
    5cbc:	77 23       	and	r23, r23
    5cbe:	21 f0       	breq	.+8      	; 0x5cc8 <__floatsisf+0x54>
    5cc0:	9e e8       	ldi	r25, 0x8E	; 142
    5cc2:	87 2f       	mov	r24, r23
    5cc4:	76 2f       	mov	r23, r22
    5cc6:	05 c0       	rjmp	.+10     	; 0x5cd2 <__floatsisf+0x5e>
    5cc8:	66 23       	and	r22, r22
    5cca:	71 f0       	breq	.+28     	; 0x5ce8 <__floatsisf+0x74>
    5ccc:	96 e8       	ldi	r25, 0x86	; 134
    5cce:	86 2f       	mov	r24, r22
    5cd0:	70 e0       	ldi	r23, 0x00	; 0
    5cd2:	60 e0       	ldi	r22, 0x00	; 0
    5cd4:	2a f0       	brmi	.+10     	; 0x5ce0 <__floatsisf+0x6c>
    5cd6:	9a 95       	dec	r25
    5cd8:	66 0f       	add	r22, r22
    5cda:	77 1f       	adc	r23, r23
    5cdc:	88 1f       	adc	r24, r24
    5cde:	da f7       	brpl	.-10     	; 0x5cd6 <__floatsisf+0x62>
    5ce0:	88 0f       	add	r24, r24
    5ce2:	96 95       	lsr	r25
    5ce4:	87 95       	ror	r24
    5ce6:	97 f9       	bld	r25, 7
    5ce8:	08 95       	ret

00005cea <__fp_inf>:
    5cea:	97 f9       	bld	r25, 7
    5cec:	9f 67       	ori	r25, 0x7F	; 127
    5cee:	80 e8       	ldi	r24, 0x80	; 128
    5cf0:	70 e0       	ldi	r23, 0x00	; 0
    5cf2:	60 e0       	ldi	r22, 0x00	; 0
    5cf4:	08 95       	ret

00005cf6 <__fp_nan>:
    5cf6:	9f ef       	ldi	r25, 0xFF	; 255
    5cf8:	80 ec       	ldi	r24, 0xC0	; 192
    5cfa:	08 95       	ret

00005cfc <__fp_pscA>:
    5cfc:	00 24       	eor	r0, r0
    5cfe:	0a 94       	dec	r0
    5d00:	16 16       	cp	r1, r22
    5d02:	17 06       	cpc	r1, r23
    5d04:	18 06       	cpc	r1, r24
    5d06:	09 06       	cpc	r0, r25
    5d08:	08 95       	ret

00005d0a <__fp_pscB>:
    5d0a:	00 24       	eor	r0, r0
    5d0c:	0a 94       	dec	r0
    5d0e:	12 16       	cp	r1, r18
    5d10:	13 06       	cpc	r1, r19
    5d12:	14 06       	cpc	r1, r20
    5d14:	05 06       	cpc	r0, r21
    5d16:	08 95       	ret

00005d18 <__fp_round>:
    5d18:	09 2e       	mov	r0, r25
    5d1a:	03 94       	inc	r0
    5d1c:	00 0c       	add	r0, r0
    5d1e:	11 f4       	brne	.+4      	; 0x5d24 <__fp_round+0xc>
    5d20:	88 23       	and	r24, r24
    5d22:	52 f0       	brmi	.+20     	; 0x5d38 <__fp_round+0x20>
    5d24:	bb 0f       	add	r27, r27
    5d26:	40 f4       	brcc	.+16     	; 0x5d38 <__fp_round+0x20>
    5d28:	bf 2b       	or	r27, r31
    5d2a:	11 f4       	brne	.+4      	; 0x5d30 <__fp_round+0x18>
    5d2c:	60 ff       	sbrs	r22, 0
    5d2e:	04 c0       	rjmp	.+8      	; 0x5d38 <__fp_round+0x20>
    5d30:	6f 5f       	subi	r22, 0xFF	; 255
    5d32:	7f 4f       	sbci	r23, 0xFF	; 255
    5d34:	8f 4f       	sbci	r24, 0xFF	; 255
    5d36:	9f 4f       	sbci	r25, 0xFF	; 255
    5d38:	08 95       	ret

00005d3a <__fp_split3>:
    5d3a:	57 fd       	sbrc	r21, 7
    5d3c:	90 58       	subi	r25, 0x80	; 128
    5d3e:	44 0f       	add	r20, r20
    5d40:	55 1f       	adc	r21, r21
    5d42:	59 f0       	breq	.+22     	; 0x5d5a <__fp_splitA+0x10>
    5d44:	5f 3f       	cpi	r21, 0xFF	; 255
    5d46:	71 f0       	breq	.+28     	; 0x5d64 <__fp_splitA+0x1a>
    5d48:	47 95       	ror	r20

00005d4a <__fp_splitA>:
    5d4a:	88 0f       	add	r24, r24
    5d4c:	97 fb       	bst	r25, 7
    5d4e:	99 1f       	adc	r25, r25
    5d50:	61 f0       	breq	.+24     	; 0x5d6a <__fp_splitA+0x20>
    5d52:	9f 3f       	cpi	r25, 0xFF	; 255
    5d54:	79 f0       	breq	.+30     	; 0x5d74 <__fp_splitA+0x2a>
    5d56:	87 95       	ror	r24
    5d58:	08 95       	ret
    5d5a:	12 16       	cp	r1, r18
    5d5c:	13 06       	cpc	r1, r19
    5d5e:	14 06       	cpc	r1, r20
    5d60:	55 1f       	adc	r21, r21
    5d62:	f2 cf       	rjmp	.-28     	; 0x5d48 <__fp_split3+0xe>
    5d64:	46 95       	lsr	r20
    5d66:	f1 df       	rcall	.-30     	; 0x5d4a <__fp_splitA>
    5d68:	08 c0       	rjmp	.+16     	; 0x5d7a <__fp_splitA+0x30>
    5d6a:	16 16       	cp	r1, r22
    5d6c:	17 06       	cpc	r1, r23
    5d6e:	18 06       	cpc	r1, r24
    5d70:	99 1f       	adc	r25, r25
    5d72:	f1 cf       	rjmp	.-30     	; 0x5d56 <__fp_splitA+0xc>
    5d74:	86 95       	lsr	r24
    5d76:	71 05       	cpc	r23, r1
    5d78:	61 05       	cpc	r22, r1
    5d7a:	08 94       	sec
    5d7c:	08 95       	ret

00005d7e <__fp_zero>:
    5d7e:	e8 94       	clt

00005d80 <__fp_szero>:
    5d80:	bb 27       	eor	r27, r27
    5d82:	66 27       	eor	r22, r22
    5d84:	77 27       	eor	r23, r23
    5d86:	cb 01       	movw	r24, r22
    5d88:	97 f9       	bld	r25, 7
    5d8a:	08 95       	ret

00005d8c <__mulsf3>:
    5d8c:	0b d0       	rcall	.+22     	; 0x5da4 <__mulsf3x>
    5d8e:	c4 cf       	rjmp	.-120    	; 0x5d18 <__fp_round>
    5d90:	b5 df       	rcall	.-150    	; 0x5cfc <__fp_pscA>
    5d92:	28 f0       	brcs	.+10     	; 0x5d9e <__mulsf3+0x12>
    5d94:	ba df       	rcall	.-140    	; 0x5d0a <__fp_pscB>
    5d96:	18 f0       	brcs	.+6      	; 0x5d9e <__mulsf3+0x12>
    5d98:	95 23       	and	r25, r21
    5d9a:	09 f0       	breq	.+2      	; 0x5d9e <__mulsf3+0x12>
    5d9c:	a6 cf       	rjmp	.-180    	; 0x5cea <__fp_inf>
    5d9e:	ab cf       	rjmp	.-170    	; 0x5cf6 <__fp_nan>
    5da0:	11 24       	eor	r1, r1
    5da2:	ee cf       	rjmp	.-36     	; 0x5d80 <__fp_szero>

00005da4 <__mulsf3x>:
    5da4:	ca df       	rcall	.-108    	; 0x5d3a <__fp_split3>
    5da6:	a0 f3       	brcs	.-24     	; 0x5d90 <__mulsf3+0x4>

00005da8 <__mulsf3_pse>:
    5da8:	95 9f       	mul	r25, r21
    5daa:	d1 f3       	breq	.-12     	; 0x5da0 <__mulsf3+0x14>
    5dac:	95 0f       	add	r25, r21
    5dae:	50 e0       	ldi	r21, 0x00	; 0
    5db0:	55 1f       	adc	r21, r21
    5db2:	62 9f       	mul	r22, r18
    5db4:	f0 01       	movw	r30, r0
    5db6:	72 9f       	mul	r23, r18
    5db8:	bb 27       	eor	r27, r27
    5dba:	f0 0d       	add	r31, r0
    5dbc:	b1 1d       	adc	r27, r1
    5dbe:	63 9f       	mul	r22, r19
    5dc0:	aa 27       	eor	r26, r26
    5dc2:	f0 0d       	add	r31, r0
    5dc4:	b1 1d       	adc	r27, r1
    5dc6:	aa 1f       	adc	r26, r26
    5dc8:	64 9f       	mul	r22, r20
    5dca:	66 27       	eor	r22, r22
    5dcc:	b0 0d       	add	r27, r0
    5dce:	a1 1d       	adc	r26, r1
    5dd0:	66 1f       	adc	r22, r22
    5dd2:	82 9f       	mul	r24, r18
    5dd4:	22 27       	eor	r18, r18
    5dd6:	b0 0d       	add	r27, r0
    5dd8:	a1 1d       	adc	r26, r1
    5dda:	62 1f       	adc	r22, r18
    5ddc:	73 9f       	mul	r23, r19
    5dde:	b0 0d       	add	r27, r0
    5de0:	a1 1d       	adc	r26, r1
    5de2:	62 1f       	adc	r22, r18
    5de4:	83 9f       	mul	r24, r19
    5de6:	a0 0d       	add	r26, r0
    5de8:	61 1d       	adc	r22, r1
    5dea:	22 1f       	adc	r18, r18
    5dec:	74 9f       	mul	r23, r20
    5dee:	33 27       	eor	r19, r19
    5df0:	a0 0d       	add	r26, r0
    5df2:	61 1d       	adc	r22, r1
    5df4:	23 1f       	adc	r18, r19
    5df6:	84 9f       	mul	r24, r20
    5df8:	60 0d       	add	r22, r0
    5dfa:	21 1d       	adc	r18, r1
    5dfc:	82 2f       	mov	r24, r18
    5dfe:	76 2f       	mov	r23, r22
    5e00:	6a 2f       	mov	r22, r26
    5e02:	11 24       	eor	r1, r1
    5e04:	9f 57       	subi	r25, 0x7F	; 127
    5e06:	50 40       	sbci	r21, 0x00	; 0
    5e08:	8a f0       	brmi	.+34     	; 0x5e2c <__mulsf3_pse+0x84>
    5e0a:	e1 f0       	breq	.+56     	; 0x5e44 <__mulsf3_pse+0x9c>
    5e0c:	88 23       	and	r24, r24
    5e0e:	4a f0       	brmi	.+18     	; 0x5e22 <__mulsf3_pse+0x7a>
    5e10:	ee 0f       	add	r30, r30
    5e12:	ff 1f       	adc	r31, r31
    5e14:	bb 1f       	adc	r27, r27
    5e16:	66 1f       	adc	r22, r22
    5e18:	77 1f       	adc	r23, r23
    5e1a:	88 1f       	adc	r24, r24
    5e1c:	91 50       	subi	r25, 0x01	; 1
    5e1e:	50 40       	sbci	r21, 0x00	; 0
    5e20:	a9 f7       	brne	.-22     	; 0x5e0c <__mulsf3_pse+0x64>
    5e22:	9e 3f       	cpi	r25, 0xFE	; 254
    5e24:	51 05       	cpc	r21, r1
    5e26:	70 f0       	brcs	.+28     	; 0x5e44 <__mulsf3_pse+0x9c>
    5e28:	60 cf       	rjmp	.-320    	; 0x5cea <__fp_inf>
    5e2a:	aa cf       	rjmp	.-172    	; 0x5d80 <__fp_szero>
    5e2c:	5f 3f       	cpi	r21, 0xFF	; 255
    5e2e:	ec f3       	brlt	.-6      	; 0x5e2a <__mulsf3_pse+0x82>
    5e30:	98 3e       	cpi	r25, 0xE8	; 232
    5e32:	dc f3       	brlt	.-10     	; 0x5e2a <__mulsf3_pse+0x82>
    5e34:	86 95       	lsr	r24
    5e36:	77 95       	ror	r23
    5e38:	67 95       	ror	r22
    5e3a:	b7 95       	ror	r27
    5e3c:	f7 95       	ror	r31
    5e3e:	e7 95       	ror	r30
    5e40:	9f 5f       	subi	r25, 0xFF	; 255
    5e42:	c1 f7       	brne	.-16     	; 0x5e34 <__mulsf3_pse+0x8c>
    5e44:	fe 2b       	or	r31, r30
    5e46:	88 0f       	add	r24, r24
    5e48:	91 1d       	adc	r25, r1
    5e4a:	96 95       	lsr	r25
    5e4c:	87 95       	ror	r24
    5e4e:	97 f9       	bld	r25, 7
    5e50:	08 95       	ret

00005e52 <__divmodhi4>:
    5e52:	97 fb       	bst	r25, 7
    5e54:	07 2e       	mov	r0, r23
    5e56:	16 f4       	brtc	.+4      	; 0x5e5c <__divmodhi4+0xa>
    5e58:	00 94       	com	r0
    5e5a:	06 d0       	rcall	.+12     	; 0x5e68 <__divmodhi4_neg1>
    5e5c:	77 fd       	sbrc	r23, 7
    5e5e:	08 d0       	rcall	.+16     	; 0x5e70 <__divmodhi4_neg2>
    5e60:	35 d0       	rcall	.+106    	; 0x5ecc <__udivmodhi4>
    5e62:	07 fc       	sbrc	r0, 7
    5e64:	05 d0       	rcall	.+10     	; 0x5e70 <__divmodhi4_neg2>
    5e66:	3e f4       	brtc	.+14     	; 0x5e76 <__divmodhi4_exit>

00005e68 <__divmodhi4_neg1>:
    5e68:	90 95       	com	r25
    5e6a:	81 95       	neg	r24
    5e6c:	9f 4f       	sbci	r25, 0xFF	; 255
    5e6e:	08 95       	ret

00005e70 <__divmodhi4_neg2>:
    5e70:	70 95       	com	r23
    5e72:	61 95       	neg	r22
    5e74:	7f 4f       	sbci	r23, 0xFF	; 255

00005e76 <__divmodhi4_exit>:
    5e76:	08 95       	ret

00005e78 <__udivmodsi4>:
    5e78:	a1 e2       	ldi	r26, 0x21	; 33
    5e7a:	1a 2e       	mov	r1, r26
    5e7c:	aa 1b       	sub	r26, r26
    5e7e:	bb 1b       	sub	r27, r27
    5e80:	fd 01       	movw	r30, r26
    5e82:	0d c0       	rjmp	.+26     	; 0x5e9e <__udivmodsi4_ep>

00005e84 <__udivmodsi4_loop>:
    5e84:	aa 1f       	adc	r26, r26
    5e86:	bb 1f       	adc	r27, r27
    5e88:	ee 1f       	adc	r30, r30
    5e8a:	ff 1f       	adc	r31, r31
    5e8c:	a2 17       	cp	r26, r18
    5e8e:	b3 07       	cpc	r27, r19
    5e90:	e4 07       	cpc	r30, r20
    5e92:	f5 07       	cpc	r31, r21
    5e94:	20 f0       	brcs	.+8      	; 0x5e9e <__udivmodsi4_ep>
    5e96:	a2 1b       	sub	r26, r18
    5e98:	b3 0b       	sbc	r27, r19
    5e9a:	e4 0b       	sbc	r30, r20
    5e9c:	f5 0b       	sbc	r31, r21

00005e9e <__udivmodsi4_ep>:
    5e9e:	66 1f       	adc	r22, r22
    5ea0:	77 1f       	adc	r23, r23
    5ea2:	88 1f       	adc	r24, r24
    5ea4:	99 1f       	adc	r25, r25
    5ea6:	1a 94       	dec	r1
    5ea8:	69 f7       	brne	.-38     	; 0x5e84 <__udivmodsi4_loop>
    5eaa:	60 95       	com	r22
    5eac:	70 95       	com	r23
    5eae:	80 95       	com	r24
    5eb0:	90 95       	com	r25
    5eb2:	9b 01       	movw	r18, r22
    5eb4:	ac 01       	movw	r20, r24
    5eb6:	bd 01       	movw	r22, r26
    5eb8:	cf 01       	movw	r24, r30
    5eba:	08 95       	ret

00005ebc <__tablejump2__>:
    5ebc:	ee 0f       	add	r30, r30
    5ebe:	ff 1f       	adc	r31, r31
    5ec0:	88 1f       	adc	r24, r24
    5ec2:	8b bf       	out	0x3b, r24	; 59
    5ec4:	07 90       	elpm	r0, Z+
    5ec6:	f6 91       	elpm	r31, Z
    5ec8:	e0 2d       	mov	r30, r0
    5eca:	19 94       	eijmp

00005ecc <__udivmodhi4>:
    5ecc:	aa 1b       	sub	r26, r26
    5ece:	bb 1b       	sub	r27, r27
    5ed0:	51 e1       	ldi	r21, 0x11	; 17
    5ed2:	07 c0       	rjmp	.+14     	; 0x5ee2 <__udivmodhi4_ep>

00005ed4 <__udivmodhi4_loop>:
    5ed4:	aa 1f       	adc	r26, r26
    5ed6:	bb 1f       	adc	r27, r27
    5ed8:	a6 17       	cp	r26, r22
    5eda:	b7 07       	cpc	r27, r23
    5edc:	10 f0       	brcs	.+4      	; 0x5ee2 <__udivmodhi4_ep>
    5ede:	a6 1b       	sub	r26, r22
    5ee0:	b7 0b       	sbc	r27, r23

00005ee2 <__udivmodhi4_ep>:
    5ee2:	88 1f       	adc	r24, r24
    5ee4:	99 1f       	adc	r25, r25
    5ee6:	5a 95       	dec	r21
    5ee8:	a9 f7       	brne	.-22     	; 0x5ed4 <__udivmodhi4_loop>
    5eea:	80 95       	com	r24
    5eec:	90 95       	com	r25
    5eee:	bc 01       	movw	r22, r24
    5ef0:	cd 01       	movw	r24, r26
    5ef2:	08 95       	ret

00005ef4 <calloc>:
    5ef4:	0f 93       	push	r16
    5ef6:	1f 93       	push	r17
    5ef8:	cf 93       	push	r28
    5efa:	df 93       	push	r29
    5efc:	86 9f       	mul	r24, r22
    5efe:	80 01       	movw	r16, r0
    5f00:	87 9f       	mul	r24, r23
    5f02:	10 0d       	add	r17, r0
    5f04:	96 9f       	mul	r25, r22
    5f06:	10 0d       	add	r17, r0
    5f08:	11 24       	eor	r1, r1
    5f0a:	c8 01       	movw	r24, r16
    5f0c:	0d d0       	rcall	.+26     	; 0x5f28 <malloc>
    5f0e:	ec 01       	movw	r28, r24
    5f10:	00 97       	sbiw	r24, 0x00	; 0
    5f12:	21 f0       	breq	.+8      	; 0x5f1c <calloc+0x28>
    5f14:	a8 01       	movw	r20, r16
    5f16:	60 e0       	ldi	r22, 0x00	; 0
    5f18:	70 e0       	ldi	r23, 0x00	; 0
    5f1a:	89 d1       	rcall	.+786    	; 0x622e <memset>
    5f1c:	ce 01       	movw	r24, r28
    5f1e:	df 91       	pop	r29
    5f20:	cf 91       	pop	r28
    5f22:	1f 91       	pop	r17
    5f24:	0f 91       	pop	r16
    5f26:	08 95       	ret

00005f28 <malloc>:
    5f28:	0f 93       	push	r16
    5f2a:	1f 93       	push	r17
    5f2c:	cf 93       	push	r28
    5f2e:	df 93       	push	r29
    5f30:	82 30       	cpi	r24, 0x02	; 2
    5f32:	91 05       	cpc	r25, r1
    5f34:	10 f4       	brcc	.+4      	; 0x5f3a <malloc+0x12>
    5f36:	82 e0       	ldi	r24, 0x02	; 2
    5f38:	90 e0       	ldi	r25, 0x00	; 0
    5f3a:	e0 91 81 1a 	lds	r30, 0x1A81	; 0x801a81 <__flp>
    5f3e:	f0 91 82 1a 	lds	r31, 0x1A82	; 0x801a82 <__flp+0x1>
    5f42:	20 e0       	ldi	r18, 0x00	; 0
    5f44:	30 e0       	ldi	r19, 0x00	; 0
    5f46:	a0 e0       	ldi	r26, 0x00	; 0
    5f48:	b0 e0       	ldi	r27, 0x00	; 0
    5f4a:	30 97       	sbiw	r30, 0x00	; 0
    5f4c:	19 f1       	breq	.+70     	; 0x5f94 <malloc+0x6c>
    5f4e:	40 81       	ld	r20, Z
    5f50:	51 81       	ldd	r21, Z+1	; 0x01
    5f52:	02 81       	ldd	r16, Z+2	; 0x02
    5f54:	13 81       	ldd	r17, Z+3	; 0x03
    5f56:	48 17       	cp	r20, r24
    5f58:	59 07       	cpc	r21, r25
    5f5a:	c8 f0       	brcs	.+50     	; 0x5f8e <malloc+0x66>
    5f5c:	84 17       	cp	r24, r20
    5f5e:	95 07       	cpc	r25, r21
    5f60:	69 f4       	brne	.+26     	; 0x5f7c <malloc+0x54>
    5f62:	10 97       	sbiw	r26, 0x00	; 0
    5f64:	31 f0       	breq	.+12     	; 0x5f72 <malloc+0x4a>
    5f66:	12 96       	adiw	r26, 0x02	; 2
    5f68:	0c 93       	st	X, r16
    5f6a:	12 97       	sbiw	r26, 0x02	; 2
    5f6c:	13 96       	adiw	r26, 0x03	; 3
    5f6e:	1c 93       	st	X, r17
    5f70:	27 c0       	rjmp	.+78     	; 0x5fc0 <malloc+0x98>
    5f72:	00 93 81 1a 	sts	0x1A81, r16	; 0x801a81 <__flp>
    5f76:	10 93 82 1a 	sts	0x1A82, r17	; 0x801a82 <__flp+0x1>
    5f7a:	22 c0       	rjmp	.+68     	; 0x5fc0 <malloc+0x98>
    5f7c:	21 15       	cp	r18, r1
    5f7e:	31 05       	cpc	r19, r1
    5f80:	19 f0       	breq	.+6      	; 0x5f88 <malloc+0x60>
    5f82:	42 17       	cp	r20, r18
    5f84:	53 07       	cpc	r21, r19
    5f86:	18 f4       	brcc	.+6      	; 0x5f8e <malloc+0x66>
    5f88:	9a 01       	movw	r18, r20
    5f8a:	bd 01       	movw	r22, r26
    5f8c:	ef 01       	movw	r28, r30
    5f8e:	df 01       	movw	r26, r30
    5f90:	f8 01       	movw	r30, r16
    5f92:	db cf       	rjmp	.-74     	; 0x5f4a <malloc+0x22>
    5f94:	21 15       	cp	r18, r1
    5f96:	31 05       	cpc	r19, r1
    5f98:	f9 f0       	breq	.+62     	; 0x5fd8 <malloc+0xb0>
    5f9a:	28 1b       	sub	r18, r24
    5f9c:	39 0b       	sbc	r19, r25
    5f9e:	24 30       	cpi	r18, 0x04	; 4
    5fa0:	31 05       	cpc	r19, r1
    5fa2:	80 f4       	brcc	.+32     	; 0x5fc4 <malloc+0x9c>
    5fa4:	8a 81       	ldd	r24, Y+2	; 0x02
    5fa6:	9b 81       	ldd	r25, Y+3	; 0x03
    5fa8:	61 15       	cp	r22, r1
    5faa:	71 05       	cpc	r23, r1
    5fac:	21 f0       	breq	.+8      	; 0x5fb6 <malloc+0x8e>
    5fae:	fb 01       	movw	r30, r22
    5fb0:	93 83       	std	Z+3, r25	; 0x03
    5fb2:	82 83       	std	Z+2, r24	; 0x02
    5fb4:	04 c0       	rjmp	.+8      	; 0x5fbe <malloc+0x96>
    5fb6:	90 93 82 1a 	sts	0x1A82, r25	; 0x801a82 <__flp+0x1>
    5fba:	80 93 81 1a 	sts	0x1A81, r24	; 0x801a81 <__flp>
    5fbe:	fe 01       	movw	r30, r28
    5fc0:	32 96       	adiw	r30, 0x02	; 2
    5fc2:	44 c0       	rjmp	.+136    	; 0x604c <malloc+0x124>
    5fc4:	fe 01       	movw	r30, r28
    5fc6:	e2 0f       	add	r30, r18
    5fc8:	f3 1f       	adc	r31, r19
    5fca:	81 93       	st	Z+, r24
    5fcc:	91 93       	st	Z+, r25
    5fce:	22 50       	subi	r18, 0x02	; 2
    5fd0:	31 09       	sbc	r19, r1
    5fd2:	39 83       	std	Y+1, r19	; 0x01
    5fd4:	28 83       	st	Y, r18
    5fd6:	3a c0       	rjmp	.+116    	; 0x604c <malloc+0x124>
    5fd8:	20 91 7f 1a 	lds	r18, 0x1A7F	; 0x801a7f <__brkval>
    5fdc:	30 91 80 1a 	lds	r19, 0x1A80	; 0x801a80 <__brkval+0x1>
    5fe0:	23 2b       	or	r18, r19
    5fe2:	41 f4       	brne	.+16     	; 0x5ff4 <malloc+0xcc>
    5fe4:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    5fe8:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    5fec:	30 93 80 1a 	sts	0x1A80, r19	; 0x801a80 <__brkval+0x1>
    5ff0:	20 93 7f 1a 	sts	0x1A7F, r18	; 0x801a7f <__brkval>
    5ff4:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    5ff8:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    5ffc:	21 15       	cp	r18, r1
    5ffe:	31 05       	cpc	r19, r1
    6000:	41 f4       	brne	.+16     	; 0x6012 <malloc+0xea>
    6002:	2d b7       	in	r18, 0x3d	; 61
    6004:	3e b7       	in	r19, 0x3e	; 62
    6006:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    600a:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    600e:	24 1b       	sub	r18, r20
    6010:	35 0b       	sbc	r19, r21
    6012:	e0 91 7f 1a 	lds	r30, 0x1A7F	; 0x801a7f <__brkval>
    6016:	f0 91 80 1a 	lds	r31, 0x1A80	; 0x801a80 <__brkval+0x1>
    601a:	e2 17       	cp	r30, r18
    601c:	f3 07       	cpc	r31, r19
    601e:	a0 f4       	brcc	.+40     	; 0x6048 <malloc+0x120>
    6020:	2e 1b       	sub	r18, r30
    6022:	3f 0b       	sbc	r19, r31
    6024:	28 17       	cp	r18, r24
    6026:	39 07       	cpc	r19, r25
    6028:	78 f0       	brcs	.+30     	; 0x6048 <malloc+0x120>
    602a:	ac 01       	movw	r20, r24
    602c:	4e 5f       	subi	r20, 0xFE	; 254
    602e:	5f 4f       	sbci	r21, 0xFF	; 255
    6030:	24 17       	cp	r18, r20
    6032:	35 07       	cpc	r19, r21
    6034:	48 f0       	brcs	.+18     	; 0x6048 <malloc+0x120>
    6036:	4e 0f       	add	r20, r30
    6038:	5f 1f       	adc	r21, r31
    603a:	50 93 80 1a 	sts	0x1A80, r21	; 0x801a80 <__brkval+0x1>
    603e:	40 93 7f 1a 	sts	0x1A7F, r20	; 0x801a7f <__brkval>
    6042:	81 93       	st	Z+, r24
    6044:	91 93       	st	Z+, r25
    6046:	02 c0       	rjmp	.+4      	; 0x604c <malloc+0x124>
    6048:	e0 e0       	ldi	r30, 0x00	; 0
    604a:	f0 e0       	ldi	r31, 0x00	; 0
    604c:	cf 01       	movw	r24, r30
    604e:	df 91       	pop	r29
    6050:	cf 91       	pop	r28
    6052:	1f 91       	pop	r17
    6054:	0f 91       	pop	r16
    6056:	08 95       	ret

00006058 <free>:
    6058:	cf 93       	push	r28
    605a:	df 93       	push	r29
    605c:	00 97       	sbiw	r24, 0x00	; 0
    605e:	09 f4       	brne	.+2      	; 0x6062 <free+0xa>
    6060:	81 c0       	rjmp	.+258    	; 0x6164 <free+0x10c>
    6062:	fc 01       	movw	r30, r24
    6064:	32 97       	sbiw	r30, 0x02	; 2
    6066:	13 82       	std	Z+3, r1	; 0x03
    6068:	12 82       	std	Z+2, r1	; 0x02
    606a:	a0 91 81 1a 	lds	r26, 0x1A81	; 0x801a81 <__flp>
    606e:	b0 91 82 1a 	lds	r27, 0x1A82	; 0x801a82 <__flp+0x1>
    6072:	10 97       	sbiw	r26, 0x00	; 0
    6074:	81 f4       	brne	.+32     	; 0x6096 <free+0x3e>
    6076:	20 81       	ld	r18, Z
    6078:	31 81       	ldd	r19, Z+1	; 0x01
    607a:	82 0f       	add	r24, r18
    607c:	93 1f       	adc	r25, r19
    607e:	20 91 7f 1a 	lds	r18, 0x1A7F	; 0x801a7f <__brkval>
    6082:	30 91 80 1a 	lds	r19, 0x1A80	; 0x801a80 <__brkval+0x1>
    6086:	28 17       	cp	r18, r24
    6088:	39 07       	cpc	r19, r25
    608a:	51 f5       	brne	.+84     	; 0x60e0 <free+0x88>
    608c:	f0 93 80 1a 	sts	0x1A80, r31	; 0x801a80 <__brkval+0x1>
    6090:	e0 93 7f 1a 	sts	0x1A7F, r30	; 0x801a7f <__brkval>
    6094:	67 c0       	rjmp	.+206    	; 0x6164 <free+0x10c>
    6096:	ed 01       	movw	r28, r26
    6098:	20 e0       	ldi	r18, 0x00	; 0
    609a:	30 e0       	ldi	r19, 0x00	; 0
    609c:	ce 17       	cp	r28, r30
    609e:	df 07       	cpc	r29, r31
    60a0:	40 f4       	brcc	.+16     	; 0x60b2 <free+0x5a>
    60a2:	4a 81       	ldd	r20, Y+2	; 0x02
    60a4:	5b 81       	ldd	r21, Y+3	; 0x03
    60a6:	9e 01       	movw	r18, r28
    60a8:	41 15       	cp	r20, r1
    60aa:	51 05       	cpc	r21, r1
    60ac:	f1 f0       	breq	.+60     	; 0x60ea <free+0x92>
    60ae:	ea 01       	movw	r28, r20
    60b0:	f5 cf       	rjmp	.-22     	; 0x609c <free+0x44>
    60b2:	d3 83       	std	Z+3, r29	; 0x03
    60b4:	c2 83       	std	Z+2, r28	; 0x02
    60b6:	40 81       	ld	r20, Z
    60b8:	51 81       	ldd	r21, Z+1	; 0x01
    60ba:	84 0f       	add	r24, r20
    60bc:	95 1f       	adc	r25, r21
    60be:	c8 17       	cp	r28, r24
    60c0:	d9 07       	cpc	r29, r25
    60c2:	59 f4       	brne	.+22     	; 0x60da <free+0x82>
    60c4:	88 81       	ld	r24, Y
    60c6:	99 81       	ldd	r25, Y+1	; 0x01
    60c8:	84 0f       	add	r24, r20
    60ca:	95 1f       	adc	r25, r21
    60cc:	02 96       	adiw	r24, 0x02	; 2
    60ce:	91 83       	std	Z+1, r25	; 0x01
    60d0:	80 83       	st	Z, r24
    60d2:	8a 81       	ldd	r24, Y+2	; 0x02
    60d4:	9b 81       	ldd	r25, Y+3	; 0x03
    60d6:	93 83       	std	Z+3, r25	; 0x03
    60d8:	82 83       	std	Z+2, r24	; 0x02
    60da:	21 15       	cp	r18, r1
    60dc:	31 05       	cpc	r19, r1
    60de:	29 f4       	brne	.+10     	; 0x60ea <free+0x92>
    60e0:	f0 93 82 1a 	sts	0x1A82, r31	; 0x801a82 <__flp+0x1>
    60e4:	e0 93 81 1a 	sts	0x1A81, r30	; 0x801a81 <__flp>
    60e8:	3d c0       	rjmp	.+122    	; 0x6164 <free+0x10c>
    60ea:	e9 01       	movw	r28, r18
    60ec:	fb 83       	std	Y+3, r31	; 0x03
    60ee:	ea 83       	std	Y+2, r30	; 0x02
    60f0:	49 91       	ld	r20, Y+
    60f2:	59 91       	ld	r21, Y+
    60f4:	c4 0f       	add	r28, r20
    60f6:	d5 1f       	adc	r29, r21
    60f8:	ec 17       	cp	r30, r28
    60fa:	fd 07       	cpc	r31, r29
    60fc:	61 f4       	brne	.+24     	; 0x6116 <free+0xbe>
    60fe:	80 81       	ld	r24, Z
    6100:	91 81       	ldd	r25, Z+1	; 0x01
    6102:	84 0f       	add	r24, r20
    6104:	95 1f       	adc	r25, r21
    6106:	02 96       	adiw	r24, 0x02	; 2
    6108:	e9 01       	movw	r28, r18
    610a:	99 83       	std	Y+1, r25	; 0x01
    610c:	88 83       	st	Y, r24
    610e:	82 81       	ldd	r24, Z+2	; 0x02
    6110:	93 81       	ldd	r25, Z+3	; 0x03
    6112:	9b 83       	std	Y+3, r25	; 0x03
    6114:	8a 83       	std	Y+2, r24	; 0x02
    6116:	e0 e0       	ldi	r30, 0x00	; 0
    6118:	f0 e0       	ldi	r31, 0x00	; 0
    611a:	12 96       	adiw	r26, 0x02	; 2
    611c:	8d 91       	ld	r24, X+
    611e:	9c 91       	ld	r25, X
    6120:	13 97       	sbiw	r26, 0x03	; 3
    6122:	00 97       	sbiw	r24, 0x00	; 0
    6124:	19 f0       	breq	.+6      	; 0x612c <free+0xd4>
    6126:	fd 01       	movw	r30, r26
    6128:	dc 01       	movw	r26, r24
    612a:	f7 cf       	rjmp	.-18     	; 0x611a <free+0xc2>
    612c:	8d 91       	ld	r24, X+
    612e:	9c 91       	ld	r25, X
    6130:	11 97       	sbiw	r26, 0x01	; 1
    6132:	9d 01       	movw	r18, r26
    6134:	2e 5f       	subi	r18, 0xFE	; 254
    6136:	3f 4f       	sbci	r19, 0xFF	; 255
    6138:	82 0f       	add	r24, r18
    613a:	93 1f       	adc	r25, r19
    613c:	20 91 7f 1a 	lds	r18, 0x1A7F	; 0x801a7f <__brkval>
    6140:	30 91 80 1a 	lds	r19, 0x1A80	; 0x801a80 <__brkval+0x1>
    6144:	28 17       	cp	r18, r24
    6146:	39 07       	cpc	r19, r25
    6148:	69 f4       	brne	.+26     	; 0x6164 <free+0x10c>
    614a:	30 97       	sbiw	r30, 0x00	; 0
    614c:	29 f4       	brne	.+10     	; 0x6158 <free+0x100>
    614e:	10 92 82 1a 	sts	0x1A82, r1	; 0x801a82 <__flp+0x1>
    6152:	10 92 81 1a 	sts	0x1A81, r1	; 0x801a81 <__flp>
    6156:	02 c0       	rjmp	.+4      	; 0x615c <free+0x104>
    6158:	13 82       	std	Z+3, r1	; 0x03
    615a:	12 82       	std	Z+2, r1	; 0x02
    615c:	b0 93 80 1a 	sts	0x1A80, r27	; 0x801a80 <__brkval+0x1>
    6160:	a0 93 7f 1a 	sts	0x1A7F, r26	; 0x801a7f <__brkval>
    6164:	df 91       	pop	r29
    6166:	cf 91       	pop	r28
    6168:	08 95       	ret

0000616a <do_rand>:
    616a:	8f 92       	push	r8
    616c:	9f 92       	push	r9
    616e:	af 92       	push	r10
    6170:	bf 92       	push	r11
    6172:	cf 92       	push	r12
    6174:	df 92       	push	r13
    6176:	ef 92       	push	r14
    6178:	ff 92       	push	r15
    617a:	cf 93       	push	r28
    617c:	df 93       	push	r29
    617e:	ec 01       	movw	r28, r24
    6180:	68 81       	ld	r22, Y
    6182:	79 81       	ldd	r23, Y+1	; 0x01
    6184:	8a 81       	ldd	r24, Y+2	; 0x02
    6186:	9b 81       	ldd	r25, Y+3	; 0x03
    6188:	61 15       	cp	r22, r1
    618a:	71 05       	cpc	r23, r1
    618c:	81 05       	cpc	r24, r1
    618e:	91 05       	cpc	r25, r1
    6190:	21 f4       	brne	.+8      	; 0x619a <do_rand+0x30>
    6192:	64 e2       	ldi	r22, 0x24	; 36
    6194:	79 ed       	ldi	r23, 0xD9	; 217
    6196:	8b e5       	ldi	r24, 0x5B	; 91
    6198:	97 e0       	ldi	r25, 0x07	; 7
    619a:	2d e1       	ldi	r18, 0x1D	; 29
    619c:	33 ef       	ldi	r19, 0xF3	; 243
    619e:	41 e0       	ldi	r20, 0x01	; 1
    61a0:	50 e0       	ldi	r21, 0x00	; 0
    61a2:	b9 d3       	rcall	.+1906   	; 0x6916 <__divmodsi4>
    61a4:	49 01       	movw	r8, r18
    61a6:	5a 01       	movw	r10, r20
    61a8:	9b 01       	movw	r18, r22
    61aa:	ac 01       	movw	r20, r24
    61ac:	a7 ea       	ldi	r26, 0xA7	; 167
    61ae:	b1 e4       	ldi	r27, 0x41	; 65
    61b0:	ce d3       	rcall	.+1948   	; 0x694e <__muluhisi3>
    61b2:	6b 01       	movw	r12, r22
    61b4:	7c 01       	movw	r14, r24
    61b6:	ac ee       	ldi	r26, 0xEC	; 236
    61b8:	b4 ef       	ldi	r27, 0xF4	; 244
    61ba:	a5 01       	movw	r20, r10
    61bc:	94 01       	movw	r18, r8
    61be:	d3 d3       	rcall	.+1958   	; 0x6966 <__mulohisi3>
    61c0:	dc 01       	movw	r26, r24
    61c2:	cb 01       	movw	r24, r22
    61c4:	8c 0d       	add	r24, r12
    61c6:	9d 1d       	adc	r25, r13
    61c8:	ae 1d       	adc	r26, r14
    61ca:	bf 1d       	adc	r27, r15
    61cc:	b7 ff       	sbrs	r27, 7
    61ce:	03 c0       	rjmp	.+6      	; 0x61d6 <do_rand+0x6c>
    61d0:	01 97       	sbiw	r24, 0x01	; 1
    61d2:	a1 09       	sbc	r26, r1
    61d4:	b0 48       	sbci	r27, 0x80	; 128
    61d6:	88 83       	st	Y, r24
    61d8:	99 83       	std	Y+1, r25	; 0x01
    61da:	aa 83       	std	Y+2, r26	; 0x02
    61dc:	bb 83       	std	Y+3, r27	; 0x03
    61de:	9f 77       	andi	r25, 0x7F	; 127
    61e0:	df 91       	pop	r29
    61e2:	cf 91       	pop	r28
    61e4:	ff 90       	pop	r15
    61e6:	ef 90       	pop	r14
    61e8:	df 90       	pop	r13
    61ea:	cf 90       	pop	r12
    61ec:	bf 90       	pop	r11
    61ee:	af 90       	pop	r10
    61f0:	9f 90       	pop	r9
    61f2:	8f 90       	pop	r8
    61f4:	08 95       	ret

000061f6 <rand_r>:
    61f6:	b9 cf       	rjmp	.-142    	; 0x616a <do_rand>

000061f8 <rand>:
    61f8:	86 e0       	ldi	r24, 0x06	; 6
    61fa:	92 e0       	ldi	r25, 0x02	; 2
    61fc:	b6 cf       	rjmp	.-148    	; 0x616a <do_rand>

000061fe <srand>:
    61fe:	a0 e0       	ldi	r26, 0x00	; 0
    6200:	b0 e0       	ldi	r27, 0x00	; 0
    6202:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <next>
    6206:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <next+0x1>
    620a:	a0 93 08 02 	sts	0x0208, r26	; 0x800208 <next+0x2>
    620e:	b0 93 09 02 	sts	0x0209, r27	; 0x800209 <next+0x3>
    6212:	08 95       	ret

00006214 <abort>:
    6214:	81 e0       	ldi	r24, 0x01	; 1
    6216:	90 e0       	ldi	r25, 0x00	; 0
    6218:	f8 94       	cli
    621a:	b8 c3       	rjmp	.+1904   	; 0x698c <_exit>

0000621c <memcpy>:
    621c:	fb 01       	movw	r30, r22
    621e:	dc 01       	movw	r26, r24
    6220:	02 c0       	rjmp	.+4      	; 0x6226 <memcpy+0xa>
    6222:	01 90       	ld	r0, Z+
    6224:	0d 92       	st	X+, r0
    6226:	41 50       	subi	r20, 0x01	; 1
    6228:	50 40       	sbci	r21, 0x00	; 0
    622a:	d8 f7       	brcc	.-10     	; 0x6222 <memcpy+0x6>
    622c:	08 95       	ret

0000622e <memset>:
    622e:	dc 01       	movw	r26, r24
    6230:	01 c0       	rjmp	.+2      	; 0x6234 <memset+0x6>
    6232:	6d 93       	st	X+, r22
    6234:	41 50       	subi	r20, 0x01	; 1
    6236:	50 40       	sbci	r21, 0x00	; 0
    6238:	e0 f7       	brcc	.-8      	; 0x6232 <memset+0x4>
    623a:	08 95       	ret

0000623c <strcasestr>:
    623c:	fb 01       	movw	r30, r22
    623e:	51 91       	ld	r21, Z+
    6240:	55 23       	and	r21, r21
    6242:	b1 f0       	breq	.+44     	; 0x6270 <strcasestr+0x34>
    6244:	bf 01       	movw	r22, r30
    6246:	dc 01       	movw	r26, r24
    6248:	05 2e       	mov	r0, r21
    624a:	4d 91       	ld	r20, X+
    624c:	44 23       	and	r20, r20
    624e:	69 f0       	breq	.+26     	; 0x626a <strcasestr+0x2e>
    6250:	10 d0       	rcall	.+32     	; 0x6272 <strcasestr+0x36>
    6252:	d9 f7       	brne	.-10     	; 0x624a <strcasestr+0xe>
    6254:	cd 01       	movw	r24, r26
    6256:	01 90       	ld	r0, Z+
    6258:	00 20       	and	r0, r0
    625a:	49 f0       	breq	.+18     	; 0x626e <strcasestr+0x32>
    625c:	4d 91       	ld	r20, X+
    625e:	41 11       	cpse	r20, r1
    6260:	08 d0       	rcall	.+16     	; 0x6272 <strcasestr+0x36>
    6262:	c9 f3       	breq	.-14     	; 0x6256 <strcasestr+0x1a>
    6264:	fb 01       	movw	r30, r22
    6266:	41 11       	cpse	r20, r1
    6268:	ee cf       	rjmp	.-36     	; 0x6246 <strcasestr+0xa>
    626a:	81 e0       	ldi	r24, 0x01	; 1
    626c:	90 e0       	ldi	r25, 0x00	; 0
    626e:	01 97       	sbiw	r24, 0x01	; 1
    6270:	08 95       	ret
    6272:	40 25       	eor	r20, r0
    6274:	39 f0       	breq	.+14     	; 0x6284 <strcasestr+0x48>
    6276:	40 32       	cpi	r20, 0x20	; 32
    6278:	29 f4       	brne	.+10     	; 0x6284 <strcasestr+0x48>
    627a:	40 29       	or	r20, r0
    627c:	4b 57       	subi	r20, 0x7B	; 123
    627e:	46 5e       	subi	r20, 0xE6	; 230
    6280:	08 f0       	brcs	.+2      	; 0x6284 <strcasestr+0x48>
    6282:	18 94       	sez
    6284:	08 95       	ret

00006286 <strcat>:
    6286:	fb 01       	movw	r30, r22
    6288:	dc 01       	movw	r26, r24
    628a:	0d 90       	ld	r0, X+
    628c:	00 20       	and	r0, r0
    628e:	e9 f7       	brne	.-6      	; 0x628a <strcat+0x4>
    6290:	11 97       	sbiw	r26, 0x01	; 1
    6292:	01 90       	ld	r0, Z+
    6294:	0d 92       	st	X+, r0
    6296:	00 20       	and	r0, r0
    6298:	e1 f7       	brne	.-8      	; 0x6292 <strcat+0xc>
    629a:	08 95       	ret

0000629c <strcpy>:
    629c:	fb 01       	movw	r30, r22
    629e:	dc 01       	movw	r26, r24
    62a0:	01 90       	ld	r0, Z+
    62a2:	0d 92       	st	X+, r0
    62a4:	00 20       	and	r0, r0
    62a6:	e1 f7       	brne	.-8      	; 0x62a0 <strcpy+0x4>
    62a8:	08 95       	ret

000062aa <strncasecmp>:
    62aa:	fb 01       	movw	r30, r22
    62ac:	dc 01       	movw	r26, r24
    62ae:	41 50       	subi	r20, 0x01	; 1
    62b0:	50 40       	sbci	r21, 0x00	; 0
    62b2:	88 f0       	brcs	.+34     	; 0x62d6 <strncasecmp+0x2c>
    62b4:	8d 91       	ld	r24, X+
    62b6:	81 34       	cpi	r24, 0x41	; 65
    62b8:	1c f0       	brlt	.+6      	; 0x62c0 <strncasecmp+0x16>
    62ba:	8b 35       	cpi	r24, 0x5B	; 91
    62bc:	0c f4       	brge	.+2      	; 0x62c0 <strncasecmp+0x16>
    62be:	80 5e       	subi	r24, 0xE0	; 224
    62c0:	61 91       	ld	r22, Z+
    62c2:	61 34       	cpi	r22, 0x41	; 65
    62c4:	1c f0       	brlt	.+6      	; 0x62cc <strncasecmp+0x22>
    62c6:	6b 35       	cpi	r22, 0x5B	; 91
    62c8:	0c f4       	brge	.+2      	; 0x62cc <strncasecmp+0x22>
    62ca:	60 5e       	subi	r22, 0xE0	; 224
    62cc:	86 1b       	sub	r24, r22
    62ce:	61 11       	cpse	r22, r1
    62d0:	71 f3       	breq	.-36     	; 0x62ae <strncasecmp+0x4>
    62d2:	99 0b       	sbc	r25, r25
    62d4:	08 95       	ret
    62d6:	88 1b       	sub	r24, r24
    62d8:	fc cf       	rjmp	.-8      	; 0x62d2 <strncasecmp+0x28>

000062da <printf>:
    62da:	cf 93       	push	r28
    62dc:	df 93       	push	r29
    62de:	cd b7       	in	r28, 0x3d	; 61
    62e0:	de b7       	in	r29, 0x3e	; 62
    62e2:	ae 01       	movw	r20, r28
    62e4:	4a 5f       	subi	r20, 0xFA	; 250
    62e6:	5f 4f       	sbci	r21, 0xFF	; 255
    62e8:	fa 01       	movw	r30, r20
    62ea:	61 91       	ld	r22, Z+
    62ec:	71 91       	ld	r23, Z+
    62ee:	af 01       	movw	r20, r30
    62f0:	80 91 85 1a 	lds	r24, 0x1A85	; 0x801a85 <__iob+0x2>
    62f4:	90 91 86 1a 	lds	r25, 0x1A86	; 0x801a86 <__iob+0x3>
    62f8:	61 d0       	rcall	.+194    	; 0x63bc <vfprintf>
    62fa:	df 91       	pop	r29
    62fc:	cf 91       	pop	r28
    62fe:	08 95       	ret

00006300 <puts>:
    6300:	0f 93       	push	r16
    6302:	1f 93       	push	r17
    6304:	cf 93       	push	r28
    6306:	df 93       	push	r29
    6308:	e0 91 85 1a 	lds	r30, 0x1A85	; 0x801a85 <__iob+0x2>
    630c:	f0 91 86 1a 	lds	r31, 0x1A86	; 0x801a86 <__iob+0x3>
    6310:	23 81       	ldd	r18, Z+3	; 0x03
    6312:	21 ff       	sbrs	r18, 1
    6314:	1b c0       	rjmp	.+54     	; 0x634c <puts+0x4c>
    6316:	8c 01       	movw	r16, r24
    6318:	d0 e0       	ldi	r29, 0x00	; 0
    631a:	c0 e0       	ldi	r28, 0x00	; 0
    631c:	f8 01       	movw	r30, r16
    631e:	81 91       	ld	r24, Z+
    6320:	8f 01       	movw	r16, r30
    6322:	60 91 85 1a 	lds	r22, 0x1A85	; 0x801a85 <__iob+0x2>
    6326:	70 91 86 1a 	lds	r23, 0x1A86	; 0x801a86 <__iob+0x3>
    632a:	db 01       	movw	r26, r22
    632c:	18 96       	adiw	r26, 0x08	; 8
    632e:	ed 91       	ld	r30, X+
    6330:	fc 91       	ld	r31, X
    6332:	19 97       	sbiw	r26, 0x09	; 9
    6334:	88 23       	and	r24, r24
    6336:	31 f0       	breq	.+12     	; 0x6344 <puts+0x44>
    6338:	19 95       	eicall
    633a:	89 2b       	or	r24, r25
    633c:	79 f3       	breq	.-34     	; 0x631c <puts+0x1c>
    633e:	df ef       	ldi	r29, 0xFF	; 255
    6340:	cf ef       	ldi	r28, 0xFF	; 255
    6342:	ec cf       	rjmp	.-40     	; 0x631c <puts+0x1c>
    6344:	8a e0       	ldi	r24, 0x0A	; 10
    6346:	19 95       	eicall
    6348:	89 2b       	or	r24, r25
    634a:	19 f0       	breq	.+6      	; 0x6352 <puts+0x52>
    634c:	8f ef       	ldi	r24, 0xFF	; 255
    634e:	9f ef       	ldi	r25, 0xFF	; 255
    6350:	02 c0       	rjmp	.+4      	; 0x6356 <puts+0x56>
    6352:	8d 2f       	mov	r24, r29
    6354:	9c 2f       	mov	r25, r28
    6356:	df 91       	pop	r29
    6358:	cf 91       	pop	r28
    635a:	1f 91       	pop	r17
    635c:	0f 91       	pop	r16
    635e:	08 95       	ret

00006360 <sprintf>:
    6360:	0f 93       	push	r16
    6362:	1f 93       	push	r17
    6364:	cf 93       	push	r28
    6366:	df 93       	push	r29
    6368:	cd b7       	in	r28, 0x3d	; 61
    636a:	de b7       	in	r29, 0x3e	; 62
    636c:	2e 97       	sbiw	r28, 0x0e	; 14
    636e:	0f b6       	in	r0, 0x3f	; 63
    6370:	f8 94       	cli
    6372:	de bf       	out	0x3e, r29	; 62
    6374:	0f be       	out	0x3f, r0	; 63
    6376:	cd bf       	out	0x3d, r28	; 61
    6378:	0e 89       	ldd	r16, Y+22	; 0x16
    637a:	1f 89       	ldd	r17, Y+23	; 0x17
    637c:	86 e0       	ldi	r24, 0x06	; 6
    637e:	8c 83       	std	Y+4, r24	; 0x04
    6380:	1a 83       	std	Y+2, r17	; 0x02
    6382:	09 83       	std	Y+1, r16	; 0x01
    6384:	8f ef       	ldi	r24, 0xFF	; 255
    6386:	9f e7       	ldi	r25, 0x7F	; 127
    6388:	9e 83       	std	Y+6, r25	; 0x06
    638a:	8d 83       	std	Y+5, r24	; 0x05
    638c:	ae 01       	movw	r20, r28
    638e:	46 5e       	subi	r20, 0xE6	; 230
    6390:	5f 4f       	sbci	r21, 0xFF	; 255
    6392:	68 8d       	ldd	r22, Y+24	; 0x18
    6394:	79 8d       	ldd	r23, Y+25	; 0x19
    6396:	ce 01       	movw	r24, r28
    6398:	01 96       	adiw	r24, 0x01	; 1
    639a:	10 d0       	rcall	.+32     	; 0x63bc <vfprintf>
    639c:	ef 81       	ldd	r30, Y+7	; 0x07
    639e:	f8 85       	ldd	r31, Y+8	; 0x08
    63a0:	e0 0f       	add	r30, r16
    63a2:	f1 1f       	adc	r31, r17
    63a4:	10 82       	st	Z, r1
    63a6:	2e 96       	adiw	r28, 0x0e	; 14
    63a8:	0f b6       	in	r0, 0x3f	; 63
    63aa:	f8 94       	cli
    63ac:	de bf       	out	0x3e, r29	; 62
    63ae:	0f be       	out	0x3f, r0	; 63
    63b0:	cd bf       	out	0x3d, r28	; 61
    63b2:	df 91       	pop	r29
    63b4:	cf 91       	pop	r28
    63b6:	1f 91       	pop	r17
    63b8:	0f 91       	pop	r16
    63ba:	08 95       	ret

000063bc <vfprintf>:
    63bc:	2f 92       	push	r2
    63be:	3f 92       	push	r3
    63c0:	4f 92       	push	r4
    63c2:	5f 92       	push	r5
    63c4:	6f 92       	push	r6
    63c6:	7f 92       	push	r7
    63c8:	8f 92       	push	r8
    63ca:	9f 92       	push	r9
    63cc:	af 92       	push	r10
    63ce:	bf 92       	push	r11
    63d0:	cf 92       	push	r12
    63d2:	df 92       	push	r13
    63d4:	ef 92       	push	r14
    63d6:	ff 92       	push	r15
    63d8:	0f 93       	push	r16
    63da:	1f 93       	push	r17
    63dc:	cf 93       	push	r28
    63de:	df 93       	push	r29
    63e0:	cd b7       	in	r28, 0x3d	; 61
    63e2:	de b7       	in	r29, 0x3e	; 62
    63e4:	2b 97       	sbiw	r28, 0x0b	; 11
    63e6:	0f b6       	in	r0, 0x3f	; 63
    63e8:	f8 94       	cli
    63ea:	de bf       	out	0x3e, r29	; 62
    63ec:	0f be       	out	0x3f, r0	; 63
    63ee:	cd bf       	out	0x3d, r28	; 61
    63f0:	6c 01       	movw	r12, r24
    63f2:	7b 01       	movw	r14, r22
    63f4:	8a 01       	movw	r16, r20
    63f6:	fc 01       	movw	r30, r24
    63f8:	17 82       	std	Z+7, r1	; 0x07
    63fa:	16 82       	std	Z+6, r1	; 0x06
    63fc:	83 81       	ldd	r24, Z+3	; 0x03
    63fe:	81 ff       	sbrs	r24, 1
    6400:	bf c1       	rjmp	.+894    	; 0x6780 <vfprintf+0x3c4>
    6402:	ce 01       	movw	r24, r28
    6404:	01 96       	adiw	r24, 0x01	; 1
    6406:	3c 01       	movw	r6, r24
    6408:	f6 01       	movw	r30, r12
    640a:	93 81       	ldd	r25, Z+3	; 0x03
    640c:	f7 01       	movw	r30, r14
    640e:	93 fd       	sbrc	r25, 3
    6410:	85 91       	lpm	r24, Z+
    6412:	93 ff       	sbrs	r25, 3
    6414:	81 91       	ld	r24, Z+
    6416:	7f 01       	movw	r14, r30
    6418:	88 23       	and	r24, r24
    641a:	09 f4       	brne	.+2      	; 0x641e <vfprintf+0x62>
    641c:	ad c1       	rjmp	.+858    	; 0x6778 <vfprintf+0x3bc>
    641e:	85 32       	cpi	r24, 0x25	; 37
    6420:	39 f4       	brne	.+14     	; 0x6430 <vfprintf+0x74>
    6422:	93 fd       	sbrc	r25, 3
    6424:	85 91       	lpm	r24, Z+
    6426:	93 ff       	sbrs	r25, 3
    6428:	81 91       	ld	r24, Z+
    642a:	7f 01       	movw	r14, r30
    642c:	85 32       	cpi	r24, 0x25	; 37
    642e:	21 f4       	brne	.+8      	; 0x6438 <vfprintf+0x7c>
    6430:	b6 01       	movw	r22, r12
    6432:	90 e0       	ldi	r25, 0x00	; 0
    6434:	d6 d1       	rcall	.+940    	; 0x67e2 <fputc>
    6436:	e8 cf       	rjmp	.-48     	; 0x6408 <vfprintf+0x4c>
    6438:	91 2c       	mov	r9, r1
    643a:	21 2c       	mov	r2, r1
    643c:	31 2c       	mov	r3, r1
    643e:	ff e1       	ldi	r31, 0x1F	; 31
    6440:	f3 15       	cp	r31, r3
    6442:	d8 f0       	brcs	.+54     	; 0x647a <vfprintf+0xbe>
    6444:	8b 32       	cpi	r24, 0x2B	; 43
    6446:	79 f0       	breq	.+30     	; 0x6466 <vfprintf+0xaa>
    6448:	38 f4       	brcc	.+14     	; 0x6458 <vfprintf+0x9c>
    644a:	80 32       	cpi	r24, 0x20	; 32
    644c:	79 f0       	breq	.+30     	; 0x646c <vfprintf+0xb0>
    644e:	83 32       	cpi	r24, 0x23	; 35
    6450:	a1 f4       	brne	.+40     	; 0x647a <vfprintf+0xbe>
    6452:	23 2d       	mov	r18, r3
    6454:	20 61       	ori	r18, 0x10	; 16
    6456:	1d c0       	rjmp	.+58     	; 0x6492 <vfprintf+0xd6>
    6458:	8d 32       	cpi	r24, 0x2D	; 45
    645a:	61 f0       	breq	.+24     	; 0x6474 <vfprintf+0xb8>
    645c:	80 33       	cpi	r24, 0x30	; 48
    645e:	69 f4       	brne	.+26     	; 0x647a <vfprintf+0xbe>
    6460:	23 2d       	mov	r18, r3
    6462:	21 60       	ori	r18, 0x01	; 1
    6464:	16 c0       	rjmp	.+44     	; 0x6492 <vfprintf+0xd6>
    6466:	83 2d       	mov	r24, r3
    6468:	82 60       	ori	r24, 0x02	; 2
    646a:	38 2e       	mov	r3, r24
    646c:	e3 2d       	mov	r30, r3
    646e:	e4 60       	ori	r30, 0x04	; 4
    6470:	3e 2e       	mov	r3, r30
    6472:	2a c0       	rjmp	.+84     	; 0x64c8 <vfprintf+0x10c>
    6474:	f3 2d       	mov	r31, r3
    6476:	f8 60       	ori	r31, 0x08	; 8
    6478:	1d c0       	rjmp	.+58     	; 0x64b4 <vfprintf+0xf8>
    647a:	37 fc       	sbrc	r3, 7
    647c:	2d c0       	rjmp	.+90     	; 0x64d8 <vfprintf+0x11c>
    647e:	20 ed       	ldi	r18, 0xD0	; 208
    6480:	28 0f       	add	r18, r24
    6482:	2a 30       	cpi	r18, 0x0A	; 10
    6484:	40 f0       	brcs	.+16     	; 0x6496 <vfprintf+0xda>
    6486:	8e 32       	cpi	r24, 0x2E	; 46
    6488:	b9 f4       	brne	.+46     	; 0x64b8 <vfprintf+0xfc>
    648a:	36 fc       	sbrc	r3, 6
    648c:	75 c1       	rjmp	.+746    	; 0x6778 <vfprintf+0x3bc>
    648e:	23 2d       	mov	r18, r3
    6490:	20 64       	ori	r18, 0x40	; 64
    6492:	32 2e       	mov	r3, r18
    6494:	19 c0       	rjmp	.+50     	; 0x64c8 <vfprintf+0x10c>
    6496:	36 fe       	sbrs	r3, 6
    6498:	06 c0       	rjmp	.+12     	; 0x64a6 <vfprintf+0xea>
    649a:	8a e0       	ldi	r24, 0x0A	; 10
    649c:	98 9e       	mul	r9, r24
    649e:	20 0d       	add	r18, r0
    64a0:	11 24       	eor	r1, r1
    64a2:	92 2e       	mov	r9, r18
    64a4:	11 c0       	rjmp	.+34     	; 0x64c8 <vfprintf+0x10c>
    64a6:	ea e0       	ldi	r30, 0x0A	; 10
    64a8:	2e 9e       	mul	r2, r30
    64aa:	20 0d       	add	r18, r0
    64ac:	11 24       	eor	r1, r1
    64ae:	22 2e       	mov	r2, r18
    64b0:	f3 2d       	mov	r31, r3
    64b2:	f0 62       	ori	r31, 0x20	; 32
    64b4:	3f 2e       	mov	r3, r31
    64b6:	08 c0       	rjmp	.+16     	; 0x64c8 <vfprintf+0x10c>
    64b8:	8c 36       	cpi	r24, 0x6C	; 108
    64ba:	21 f4       	brne	.+8      	; 0x64c4 <vfprintf+0x108>
    64bc:	83 2d       	mov	r24, r3
    64be:	80 68       	ori	r24, 0x80	; 128
    64c0:	38 2e       	mov	r3, r24
    64c2:	02 c0       	rjmp	.+4      	; 0x64c8 <vfprintf+0x10c>
    64c4:	88 36       	cpi	r24, 0x68	; 104
    64c6:	41 f4       	brne	.+16     	; 0x64d8 <vfprintf+0x11c>
    64c8:	f7 01       	movw	r30, r14
    64ca:	93 fd       	sbrc	r25, 3
    64cc:	85 91       	lpm	r24, Z+
    64ce:	93 ff       	sbrs	r25, 3
    64d0:	81 91       	ld	r24, Z+
    64d2:	7f 01       	movw	r14, r30
    64d4:	81 11       	cpse	r24, r1
    64d6:	b3 cf       	rjmp	.-154    	; 0x643e <vfprintf+0x82>
    64d8:	98 2f       	mov	r25, r24
    64da:	9f 7d       	andi	r25, 0xDF	; 223
    64dc:	95 54       	subi	r25, 0x45	; 69
    64de:	93 30       	cpi	r25, 0x03	; 3
    64e0:	28 f4       	brcc	.+10     	; 0x64ec <vfprintf+0x130>
    64e2:	0c 5f       	subi	r16, 0xFC	; 252
    64e4:	1f 4f       	sbci	r17, 0xFF	; 255
    64e6:	9f e3       	ldi	r25, 0x3F	; 63
    64e8:	99 83       	std	Y+1, r25	; 0x01
    64ea:	0d c0       	rjmp	.+26     	; 0x6506 <vfprintf+0x14a>
    64ec:	83 36       	cpi	r24, 0x63	; 99
    64ee:	31 f0       	breq	.+12     	; 0x64fc <vfprintf+0x140>
    64f0:	83 37       	cpi	r24, 0x73	; 115
    64f2:	71 f0       	breq	.+28     	; 0x6510 <vfprintf+0x154>
    64f4:	83 35       	cpi	r24, 0x53	; 83
    64f6:	09 f0       	breq	.+2      	; 0x64fa <vfprintf+0x13e>
    64f8:	55 c0       	rjmp	.+170    	; 0x65a4 <vfprintf+0x1e8>
    64fa:	20 c0       	rjmp	.+64     	; 0x653c <vfprintf+0x180>
    64fc:	f8 01       	movw	r30, r16
    64fe:	80 81       	ld	r24, Z
    6500:	89 83       	std	Y+1, r24	; 0x01
    6502:	0e 5f       	subi	r16, 0xFE	; 254
    6504:	1f 4f       	sbci	r17, 0xFF	; 255
    6506:	88 24       	eor	r8, r8
    6508:	83 94       	inc	r8
    650a:	91 2c       	mov	r9, r1
    650c:	53 01       	movw	r10, r6
    650e:	12 c0       	rjmp	.+36     	; 0x6534 <vfprintf+0x178>
    6510:	28 01       	movw	r4, r16
    6512:	f2 e0       	ldi	r31, 0x02	; 2
    6514:	4f 0e       	add	r4, r31
    6516:	51 1c       	adc	r5, r1
    6518:	f8 01       	movw	r30, r16
    651a:	a0 80       	ld	r10, Z
    651c:	b1 80       	ldd	r11, Z+1	; 0x01
    651e:	36 fe       	sbrs	r3, 6
    6520:	03 c0       	rjmp	.+6      	; 0x6528 <vfprintf+0x16c>
    6522:	69 2d       	mov	r22, r9
    6524:	70 e0       	ldi	r23, 0x00	; 0
    6526:	02 c0       	rjmp	.+4      	; 0x652c <vfprintf+0x170>
    6528:	6f ef       	ldi	r22, 0xFF	; 255
    652a:	7f ef       	ldi	r23, 0xFF	; 255
    652c:	c5 01       	movw	r24, r10
    652e:	4e d1       	rcall	.+668    	; 0x67cc <strnlen>
    6530:	4c 01       	movw	r8, r24
    6532:	82 01       	movw	r16, r4
    6534:	f3 2d       	mov	r31, r3
    6536:	ff 77       	andi	r31, 0x7F	; 127
    6538:	3f 2e       	mov	r3, r31
    653a:	15 c0       	rjmp	.+42     	; 0x6566 <vfprintf+0x1aa>
    653c:	28 01       	movw	r4, r16
    653e:	22 e0       	ldi	r18, 0x02	; 2
    6540:	42 0e       	add	r4, r18
    6542:	51 1c       	adc	r5, r1
    6544:	f8 01       	movw	r30, r16
    6546:	a0 80       	ld	r10, Z
    6548:	b1 80       	ldd	r11, Z+1	; 0x01
    654a:	36 fe       	sbrs	r3, 6
    654c:	03 c0       	rjmp	.+6      	; 0x6554 <vfprintf+0x198>
    654e:	69 2d       	mov	r22, r9
    6550:	70 e0       	ldi	r23, 0x00	; 0
    6552:	02 c0       	rjmp	.+4      	; 0x6558 <vfprintf+0x19c>
    6554:	6f ef       	ldi	r22, 0xFF	; 255
    6556:	7f ef       	ldi	r23, 0xFF	; 255
    6558:	c5 01       	movw	r24, r10
    655a:	2d d1       	rcall	.+602    	; 0x67b6 <strnlen_P>
    655c:	4c 01       	movw	r8, r24
    655e:	f3 2d       	mov	r31, r3
    6560:	f0 68       	ori	r31, 0x80	; 128
    6562:	3f 2e       	mov	r3, r31
    6564:	82 01       	movw	r16, r4
    6566:	33 fc       	sbrc	r3, 3
    6568:	19 c0       	rjmp	.+50     	; 0x659c <vfprintf+0x1e0>
    656a:	82 2d       	mov	r24, r2
    656c:	90 e0       	ldi	r25, 0x00	; 0
    656e:	88 16       	cp	r8, r24
    6570:	99 06       	cpc	r9, r25
    6572:	a0 f4       	brcc	.+40     	; 0x659c <vfprintf+0x1e0>
    6574:	b6 01       	movw	r22, r12
    6576:	80 e2       	ldi	r24, 0x20	; 32
    6578:	90 e0       	ldi	r25, 0x00	; 0
    657a:	33 d1       	rcall	.+614    	; 0x67e2 <fputc>
    657c:	2a 94       	dec	r2
    657e:	f5 cf       	rjmp	.-22     	; 0x656a <vfprintf+0x1ae>
    6580:	f5 01       	movw	r30, r10
    6582:	37 fc       	sbrc	r3, 7
    6584:	85 91       	lpm	r24, Z+
    6586:	37 fe       	sbrs	r3, 7
    6588:	81 91       	ld	r24, Z+
    658a:	5f 01       	movw	r10, r30
    658c:	b6 01       	movw	r22, r12
    658e:	90 e0       	ldi	r25, 0x00	; 0
    6590:	28 d1       	rcall	.+592    	; 0x67e2 <fputc>
    6592:	21 10       	cpse	r2, r1
    6594:	2a 94       	dec	r2
    6596:	21 e0       	ldi	r18, 0x01	; 1
    6598:	82 1a       	sub	r8, r18
    659a:	91 08       	sbc	r9, r1
    659c:	81 14       	cp	r8, r1
    659e:	91 04       	cpc	r9, r1
    65a0:	79 f7       	brne	.-34     	; 0x6580 <vfprintf+0x1c4>
    65a2:	e1 c0       	rjmp	.+450    	; 0x6766 <vfprintf+0x3aa>
    65a4:	84 36       	cpi	r24, 0x64	; 100
    65a6:	11 f0       	breq	.+4      	; 0x65ac <vfprintf+0x1f0>
    65a8:	89 36       	cpi	r24, 0x69	; 105
    65aa:	39 f5       	brne	.+78     	; 0x65fa <vfprintf+0x23e>
    65ac:	f8 01       	movw	r30, r16
    65ae:	37 fe       	sbrs	r3, 7
    65b0:	07 c0       	rjmp	.+14     	; 0x65c0 <vfprintf+0x204>
    65b2:	60 81       	ld	r22, Z
    65b4:	71 81       	ldd	r23, Z+1	; 0x01
    65b6:	82 81       	ldd	r24, Z+2	; 0x02
    65b8:	93 81       	ldd	r25, Z+3	; 0x03
    65ba:	0c 5f       	subi	r16, 0xFC	; 252
    65bc:	1f 4f       	sbci	r17, 0xFF	; 255
    65be:	08 c0       	rjmp	.+16     	; 0x65d0 <vfprintf+0x214>
    65c0:	60 81       	ld	r22, Z
    65c2:	71 81       	ldd	r23, Z+1	; 0x01
    65c4:	07 2e       	mov	r0, r23
    65c6:	00 0c       	add	r0, r0
    65c8:	88 0b       	sbc	r24, r24
    65ca:	99 0b       	sbc	r25, r25
    65cc:	0e 5f       	subi	r16, 0xFE	; 254
    65ce:	1f 4f       	sbci	r17, 0xFF	; 255
    65d0:	f3 2d       	mov	r31, r3
    65d2:	ff 76       	andi	r31, 0x6F	; 111
    65d4:	3f 2e       	mov	r3, r31
    65d6:	97 ff       	sbrs	r25, 7
    65d8:	09 c0       	rjmp	.+18     	; 0x65ec <vfprintf+0x230>
    65da:	90 95       	com	r25
    65dc:	80 95       	com	r24
    65de:	70 95       	com	r23
    65e0:	61 95       	neg	r22
    65e2:	7f 4f       	sbci	r23, 0xFF	; 255
    65e4:	8f 4f       	sbci	r24, 0xFF	; 255
    65e6:	9f 4f       	sbci	r25, 0xFF	; 255
    65e8:	f0 68       	ori	r31, 0x80	; 128
    65ea:	3f 2e       	mov	r3, r31
    65ec:	2a e0       	ldi	r18, 0x0A	; 10
    65ee:	30 e0       	ldi	r19, 0x00	; 0
    65f0:	a3 01       	movw	r20, r6
    65f2:	33 d1       	rcall	.+614    	; 0x685a <__ultoa_invert>
    65f4:	88 2e       	mov	r8, r24
    65f6:	86 18       	sub	r8, r6
    65f8:	44 c0       	rjmp	.+136    	; 0x6682 <vfprintf+0x2c6>
    65fa:	85 37       	cpi	r24, 0x75	; 117
    65fc:	31 f4       	brne	.+12     	; 0x660a <vfprintf+0x24e>
    65fe:	23 2d       	mov	r18, r3
    6600:	2f 7e       	andi	r18, 0xEF	; 239
    6602:	b2 2e       	mov	r11, r18
    6604:	2a e0       	ldi	r18, 0x0A	; 10
    6606:	30 e0       	ldi	r19, 0x00	; 0
    6608:	25 c0       	rjmp	.+74     	; 0x6654 <vfprintf+0x298>
    660a:	93 2d       	mov	r25, r3
    660c:	99 7f       	andi	r25, 0xF9	; 249
    660e:	b9 2e       	mov	r11, r25
    6610:	8f 36       	cpi	r24, 0x6F	; 111
    6612:	c1 f0       	breq	.+48     	; 0x6644 <vfprintf+0x288>
    6614:	18 f4       	brcc	.+6      	; 0x661c <vfprintf+0x260>
    6616:	88 35       	cpi	r24, 0x58	; 88
    6618:	79 f0       	breq	.+30     	; 0x6638 <vfprintf+0x27c>
    661a:	ae c0       	rjmp	.+348    	; 0x6778 <vfprintf+0x3bc>
    661c:	80 37       	cpi	r24, 0x70	; 112
    661e:	19 f0       	breq	.+6      	; 0x6626 <vfprintf+0x26a>
    6620:	88 37       	cpi	r24, 0x78	; 120
    6622:	21 f0       	breq	.+8      	; 0x662c <vfprintf+0x270>
    6624:	a9 c0       	rjmp	.+338    	; 0x6778 <vfprintf+0x3bc>
    6626:	e9 2f       	mov	r30, r25
    6628:	e0 61       	ori	r30, 0x10	; 16
    662a:	be 2e       	mov	r11, r30
    662c:	b4 fe       	sbrs	r11, 4
    662e:	0d c0       	rjmp	.+26     	; 0x664a <vfprintf+0x28e>
    6630:	fb 2d       	mov	r31, r11
    6632:	f4 60       	ori	r31, 0x04	; 4
    6634:	bf 2e       	mov	r11, r31
    6636:	09 c0       	rjmp	.+18     	; 0x664a <vfprintf+0x28e>
    6638:	34 fe       	sbrs	r3, 4
    663a:	0a c0       	rjmp	.+20     	; 0x6650 <vfprintf+0x294>
    663c:	29 2f       	mov	r18, r25
    663e:	26 60       	ori	r18, 0x06	; 6
    6640:	b2 2e       	mov	r11, r18
    6642:	06 c0       	rjmp	.+12     	; 0x6650 <vfprintf+0x294>
    6644:	28 e0       	ldi	r18, 0x08	; 8
    6646:	30 e0       	ldi	r19, 0x00	; 0
    6648:	05 c0       	rjmp	.+10     	; 0x6654 <vfprintf+0x298>
    664a:	20 e1       	ldi	r18, 0x10	; 16
    664c:	30 e0       	ldi	r19, 0x00	; 0
    664e:	02 c0       	rjmp	.+4      	; 0x6654 <vfprintf+0x298>
    6650:	20 e1       	ldi	r18, 0x10	; 16
    6652:	32 e0       	ldi	r19, 0x02	; 2
    6654:	f8 01       	movw	r30, r16
    6656:	b7 fe       	sbrs	r11, 7
    6658:	07 c0       	rjmp	.+14     	; 0x6668 <vfprintf+0x2ac>
    665a:	60 81       	ld	r22, Z
    665c:	71 81       	ldd	r23, Z+1	; 0x01
    665e:	82 81       	ldd	r24, Z+2	; 0x02
    6660:	93 81       	ldd	r25, Z+3	; 0x03
    6662:	0c 5f       	subi	r16, 0xFC	; 252
    6664:	1f 4f       	sbci	r17, 0xFF	; 255
    6666:	06 c0       	rjmp	.+12     	; 0x6674 <vfprintf+0x2b8>
    6668:	60 81       	ld	r22, Z
    666a:	71 81       	ldd	r23, Z+1	; 0x01
    666c:	80 e0       	ldi	r24, 0x00	; 0
    666e:	90 e0       	ldi	r25, 0x00	; 0
    6670:	0e 5f       	subi	r16, 0xFE	; 254
    6672:	1f 4f       	sbci	r17, 0xFF	; 255
    6674:	a3 01       	movw	r20, r6
    6676:	f1 d0       	rcall	.+482    	; 0x685a <__ultoa_invert>
    6678:	88 2e       	mov	r8, r24
    667a:	86 18       	sub	r8, r6
    667c:	fb 2d       	mov	r31, r11
    667e:	ff 77       	andi	r31, 0x7F	; 127
    6680:	3f 2e       	mov	r3, r31
    6682:	36 fe       	sbrs	r3, 6
    6684:	0d c0       	rjmp	.+26     	; 0x66a0 <vfprintf+0x2e4>
    6686:	23 2d       	mov	r18, r3
    6688:	2e 7f       	andi	r18, 0xFE	; 254
    668a:	a2 2e       	mov	r10, r18
    668c:	89 14       	cp	r8, r9
    668e:	58 f4       	brcc	.+22     	; 0x66a6 <vfprintf+0x2ea>
    6690:	34 fe       	sbrs	r3, 4
    6692:	0b c0       	rjmp	.+22     	; 0x66aa <vfprintf+0x2ee>
    6694:	32 fc       	sbrc	r3, 2
    6696:	09 c0       	rjmp	.+18     	; 0x66aa <vfprintf+0x2ee>
    6698:	83 2d       	mov	r24, r3
    669a:	8e 7e       	andi	r24, 0xEE	; 238
    669c:	a8 2e       	mov	r10, r24
    669e:	05 c0       	rjmp	.+10     	; 0x66aa <vfprintf+0x2ee>
    66a0:	b8 2c       	mov	r11, r8
    66a2:	a3 2c       	mov	r10, r3
    66a4:	03 c0       	rjmp	.+6      	; 0x66ac <vfprintf+0x2f0>
    66a6:	b8 2c       	mov	r11, r8
    66a8:	01 c0       	rjmp	.+2      	; 0x66ac <vfprintf+0x2f0>
    66aa:	b9 2c       	mov	r11, r9
    66ac:	a4 fe       	sbrs	r10, 4
    66ae:	0f c0       	rjmp	.+30     	; 0x66ce <vfprintf+0x312>
    66b0:	fe 01       	movw	r30, r28
    66b2:	e8 0d       	add	r30, r8
    66b4:	f1 1d       	adc	r31, r1
    66b6:	80 81       	ld	r24, Z
    66b8:	80 33       	cpi	r24, 0x30	; 48
    66ba:	21 f4       	brne	.+8      	; 0x66c4 <vfprintf+0x308>
    66bc:	9a 2d       	mov	r25, r10
    66be:	99 7e       	andi	r25, 0xE9	; 233
    66c0:	a9 2e       	mov	r10, r25
    66c2:	09 c0       	rjmp	.+18     	; 0x66d6 <vfprintf+0x31a>
    66c4:	a2 fe       	sbrs	r10, 2
    66c6:	06 c0       	rjmp	.+12     	; 0x66d4 <vfprintf+0x318>
    66c8:	b3 94       	inc	r11
    66ca:	b3 94       	inc	r11
    66cc:	04 c0       	rjmp	.+8      	; 0x66d6 <vfprintf+0x31a>
    66ce:	8a 2d       	mov	r24, r10
    66d0:	86 78       	andi	r24, 0x86	; 134
    66d2:	09 f0       	breq	.+2      	; 0x66d6 <vfprintf+0x31a>
    66d4:	b3 94       	inc	r11
    66d6:	a3 fc       	sbrc	r10, 3
    66d8:	10 c0       	rjmp	.+32     	; 0x66fa <vfprintf+0x33e>
    66da:	a0 fe       	sbrs	r10, 0
    66dc:	06 c0       	rjmp	.+12     	; 0x66ea <vfprintf+0x32e>
    66de:	b2 14       	cp	r11, r2
    66e0:	80 f4       	brcc	.+32     	; 0x6702 <vfprintf+0x346>
    66e2:	28 0c       	add	r2, r8
    66e4:	92 2c       	mov	r9, r2
    66e6:	9b 18       	sub	r9, r11
    66e8:	0d c0       	rjmp	.+26     	; 0x6704 <vfprintf+0x348>
    66ea:	b2 14       	cp	r11, r2
    66ec:	58 f4       	brcc	.+22     	; 0x6704 <vfprintf+0x348>
    66ee:	b6 01       	movw	r22, r12
    66f0:	80 e2       	ldi	r24, 0x20	; 32
    66f2:	90 e0       	ldi	r25, 0x00	; 0
    66f4:	76 d0       	rcall	.+236    	; 0x67e2 <fputc>
    66f6:	b3 94       	inc	r11
    66f8:	f8 cf       	rjmp	.-16     	; 0x66ea <vfprintf+0x32e>
    66fa:	b2 14       	cp	r11, r2
    66fc:	18 f4       	brcc	.+6      	; 0x6704 <vfprintf+0x348>
    66fe:	2b 18       	sub	r2, r11
    6700:	02 c0       	rjmp	.+4      	; 0x6706 <vfprintf+0x34a>
    6702:	98 2c       	mov	r9, r8
    6704:	21 2c       	mov	r2, r1
    6706:	a4 fe       	sbrs	r10, 4
    6708:	0f c0       	rjmp	.+30     	; 0x6728 <vfprintf+0x36c>
    670a:	b6 01       	movw	r22, r12
    670c:	80 e3       	ldi	r24, 0x30	; 48
    670e:	90 e0       	ldi	r25, 0x00	; 0
    6710:	68 d0       	rcall	.+208    	; 0x67e2 <fputc>
    6712:	a2 fe       	sbrs	r10, 2
    6714:	16 c0       	rjmp	.+44     	; 0x6742 <vfprintf+0x386>
    6716:	a1 fc       	sbrc	r10, 1
    6718:	03 c0       	rjmp	.+6      	; 0x6720 <vfprintf+0x364>
    671a:	88 e7       	ldi	r24, 0x78	; 120
    671c:	90 e0       	ldi	r25, 0x00	; 0
    671e:	02 c0       	rjmp	.+4      	; 0x6724 <vfprintf+0x368>
    6720:	88 e5       	ldi	r24, 0x58	; 88
    6722:	90 e0       	ldi	r25, 0x00	; 0
    6724:	b6 01       	movw	r22, r12
    6726:	0c c0       	rjmp	.+24     	; 0x6740 <vfprintf+0x384>
    6728:	8a 2d       	mov	r24, r10
    672a:	86 78       	andi	r24, 0x86	; 134
    672c:	51 f0       	breq	.+20     	; 0x6742 <vfprintf+0x386>
    672e:	a1 fe       	sbrs	r10, 1
    6730:	02 c0       	rjmp	.+4      	; 0x6736 <vfprintf+0x37a>
    6732:	8b e2       	ldi	r24, 0x2B	; 43
    6734:	01 c0       	rjmp	.+2      	; 0x6738 <vfprintf+0x37c>
    6736:	80 e2       	ldi	r24, 0x20	; 32
    6738:	a7 fc       	sbrc	r10, 7
    673a:	8d e2       	ldi	r24, 0x2D	; 45
    673c:	b6 01       	movw	r22, r12
    673e:	90 e0       	ldi	r25, 0x00	; 0
    6740:	50 d0       	rcall	.+160    	; 0x67e2 <fputc>
    6742:	89 14       	cp	r8, r9
    6744:	30 f4       	brcc	.+12     	; 0x6752 <vfprintf+0x396>
    6746:	b6 01       	movw	r22, r12
    6748:	80 e3       	ldi	r24, 0x30	; 48
    674a:	90 e0       	ldi	r25, 0x00	; 0
    674c:	4a d0       	rcall	.+148    	; 0x67e2 <fputc>
    674e:	9a 94       	dec	r9
    6750:	f8 cf       	rjmp	.-16     	; 0x6742 <vfprintf+0x386>
    6752:	8a 94       	dec	r8
    6754:	f3 01       	movw	r30, r6
    6756:	e8 0d       	add	r30, r8
    6758:	f1 1d       	adc	r31, r1
    675a:	80 81       	ld	r24, Z
    675c:	b6 01       	movw	r22, r12
    675e:	90 e0       	ldi	r25, 0x00	; 0
    6760:	40 d0       	rcall	.+128    	; 0x67e2 <fputc>
    6762:	81 10       	cpse	r8, r1
    6764:	f6 cf       	rjmp	.-20     	; 0x6752 <vfprintf+0x396>
    6766:	22 20       	and	r2, r2
    6768:	09 f4       	brne	.+2      	; 0x676c <vfprintf+0x3b0>
    676a:	4e ce       	rjmp	.-868    	; 0x6408 <vfprintf+0x4c>
    676c:	b6 01       	movw	r22, r12
    676e:	80 e2       	ldi	r24, 0x20	; 32
    6770:	90 e0       	ldi	r25, 0x00	; 0
    6772:	37 d0       	rcall	.+110    	; 0x67e2 <fputc>
    6774:	2a 94       	dec	r2
    6776:	f7 cf       	rjmp	.-18     	; 0x6766 <vfprintf+0x3aa>
    6778:	f6 01       	movw	r30, r12
    677a:	86 81       	ldd	r24, Z+6	; 0x06
    677c:	97 81       	ldd	r25, Z+7	; 0x07
    677e:	02 c0       	rjmp	.+4      	; 0x6784 <vfprintf+0x3c8>
    6780:	8f ef       	ldi	r24, 0xFF	; 255
    6782:	9f ef       	ldi	r25, 0xFF	; 255
    6784:	2b 96       	adiw	r28, 0x0b	; 11
    6786:	0f b6       	in	r0, 0x3f	; 63
    6788:	f8 94       	cli
    678a:	de bf       	out	0x3e, r29	; 62
    678c:	0f be       	out	0x3f, r0	; 63
    678e:	cd bf       	out	0x3d, r28	; 61
    6790:	df 91       	pop	r29
    6792:	cf 91       	pop	r28
    6794:	1f 91       	pop	r17
    6796:	0f 91       	pop	r16
    6798:	ff 90       	pop	r15
    679a:	ef 90       	pop	r14
    679c:	df 90       	pop	r13
    679e:	cf 90       	pop	r12
    67a0:	bf 90       	pop	r11
    67a2:	af 90       	pop	r10
    67a4:	9f 90       	pop	r9
    67a6:	8f 90       	pop	r8
    67a8:	7f 90       	pop	r7
    67aa:	6f 90       	pop	r6
    67ac:	5f 90       	pop	r5
    67ae:	4f 90       	pop	r4
    67b0:	3f 90       	pop	r3
    67b2:	2f 90       	pop	r2
    67b4:	08 95       	ret

000067b6 <strnlen_P>:
    67b6:	fc 01       	movw	r30, r24
    67b8:	05 90       	lpm	r0, Z+
    67ba:	61 50       	subi	r22, 0x01	; 1
    67bc:	70 40       	sbci	r23, 0x00	; 0
    67be:	01 10       	cpse	r0, r1
    67c0:	d8 f7       	brcc	.-10     	; 0x67b8 <strnlen_P+0x2>
    67c2:	80 95       	com	r24
    67c4:	90 95       	com	r25
    67c6:	8e 0f       	add	r24, r30
    67c8:	9f 1f       	adc	r25, r31
    67ca:	08 95       	ret

000067cc <strnlen>:
    67cc:	fc 01       	movw	r30, r24
    67ce:	61 50       	subi	r22, 0x01	; 1
    67d0:	70 40       	sbci	r23, 0x00	; 0
    67d2:	01 90       	ld	r0, Z+
    67d4:	01 10       	cpse	r0, r1
    67d6:	d8 f7       	brcc	.-10     	; 0x67ce <strnlen+0x2>
    67d8:	80 95       	com	r24
    67da:	90 95       	com	r25
    67dc:	8e 0f       	add	r24, r30
    67de:	9f 1f       	adc	r25, r31
    67e0:	08 95       	ret

000067e2 <fputc>:
    67e2:	0f 93       	push	r16
    67e4:	1f 93       	push	r17
    67e6:	cf 93       	push	r28
    67e8:	df 93       	push	r29
    67ea:	fb 01       	movw	r30, r22
    67ec:	23 81       	ldd	r18, Z+3	; 0x03
    67ee:	21 fd       	sbrc	r18, 1
    67f0:	03 c0       	rjmp	.+6      	; 0x67f8 <fputc+0x16>
    67f2:	8f ef       	ldi	r24, 0xFF	; 255
    67f4:	9f ef       	ldi	r25, 0xFF	; 255
    67f6:	2c c0       	rjmp	.+88     	; 0x6850 <fputc+0x6e>
    67f8:	22 ff       	sbrs	r18, 2
    67fa:	16 c0       	rjmp	.+44     	; 0x6828 <fputc+0x46>
    67fc:	46 81       	ldd	r20, Z+6	; 0x06
    67fe:	57 81       	ldd	r21, Z+7	; 0x07
    6800:	24 81       	ldd	r18, Z+4	; 0x04
    6802:	35 81       	ldd	r19, Z+5	; 0x05
    6804:	42 17       	cp	r20, r18
    6806:	53 07       	cpc	r21, r19
    6808:	44 f4       	brge	.+16     	; 0x681a <fputc+0x38>
    680a:	a0 81       	ld	r26, Z
    680c:	b1 81       	ldd	r27, Z+1	; 0x01
    680e:	9d 01       	movw	r18, r26
    6810:	2f 5f       	subi	r18, 0xFF	; 255
    6812:	3f 4f       	sbci	r19, 0xFF	; 255
    6814:	31 83       	std	Z+1, r19	; 0x01
    6816:	20 83       	st	Z, r18
    6818:	8c 93       	st	X, r24
    681a:	26 81       	ldd	r18, Z+6	; 0x06
    681c:	37 81       	ldd	r19, Z+7	; 0x07
    681e:	2f 5f       	subi	r18, 0xFF	; 255
    6820:	3f 4f       	sbci	r19, 0xFF	; 255
    6822:	37 83       	std	Z+7, r19	; 0x07
    6824:	26 83       	std	Z+6, r18	; 0x06
    6826:	14 c0       	rjmp	.+40     	; 0x6850 <fputc+0x6e>
    6828:	8b 01       	movw	r16, r22
    682a:	ec 01       	movw	r28, r24
    682c:	fb 01       	movw	r30, r22
    682e:	00 84       	ldd	r0, Z+8	; 0x08
    6830:	f1 85       	ldd	r31, Z+9	; 0x09
    6832:	e0 2d       	mov	r30, r0
    6834:	19 95       	eicall
    6836:	89 2b       	or	r24, r25
    6838:	e1 f6       	brne	.-72     	; 0x67f2 <fputc+0x10>
    683a:	d8 01       	movw	r26, r16
    683c:	16 96       	adiw	r26, 0x06	; 6
    683e:	8d 91       	ld	r24, X+
    6840:	9c 91       	ld	r25, X
    6842:	17 97       	sbiw	r26, 0x07	; 7
    6844:	01 96       	adiw	r24, 0x01	; 1
    6846:	17 96       	adiw	r26, 0x07	; 7
    6848:	9c 93       	st	X, r25
    684a:	8e 93       	st	-X, r24
    684c:	16 97       	sbiw	r26, 0x06	; 6
    684e:	ce 01       	movw	r24, r28
    6850:	df 91       	pop	r29
    6852:	cf 91       	pop	r28
    6854:	1f 91       	pop	r17
    6856:	0f 91       	pop	r16
    6858:	08 95       	ret

0000685a <__ultoa_invert>:
    685a:	fa 01       	movw	r30, r20
    685c:	aa 27       	eor	r26, r26
    685e:	28 30       	cpi	r18, 0x08	; 8
    6860:	51 f1       	breq	.+84     	; 0x68b6 <__ultoa_invert+0x5c>
    6862:	20 31       	cpi	r18, 0x10	; 16
    6864:	81 f1       	breq	.+96     	; 0x68c6 <__ultoa_invert+0x6c>
    6866:	e8 94       	clt
    6868:	6f 93       	push	r22
    686a:	6e 7f       	andi	r22, 0xFE	; 254
    686c:	6e 5f       	subi	r22, 0xFE	; 254
    686e:	7f 4f       	sbci	r23, 0xFF	; 255
    6870:	8f 4f       	sbci	r24, 0xFF	; 255
    6872:	9f 4f       	sbci	r25, 0xFF	; 255
    6874:	af 4f       	sbci	r26, 0xFF	; 255
    6876:	b1 e0       	ldi	r27, 0x01	; 1
    6878:	3e d0       	rcall	.+124    	; 0x68f6 <__ultoa_invert+0x9c>
    687a:	b4 e0       	ldi	r27, 0x04	; 4
    687c:	3c d0       	rcall	.+120    	; 0x68f6 <__ultoa_invert+0x9c>
    687e:	67 0f       	add	r22, r23
    6880:	78 1f       	adc	r23, r24
    6882:	89 1f       	adc	r24, r25
    6884:	9a 1f       	adc	r25, r26
    6886:	a1 1d       	adc	r26, r1
    6888:	68 0f       	add	r22, r24
    688a:	79 1f       	adc	r23, r25
    688c:	8a 1f       	adc	r24, r26
    688e:	91 1d       	adc	r25, r1
    6890:	a1 1d       	adc	r26, r1
    6892:	6a 0f       	add	r22, r26
    6894:	71 1d       	adc	r23, r1
    6896:	81 1d       	adc	r24, r1
    6898:	91 1d       	adc	r25, r1
    689a:	a1 1d       	adc	r26, r1
    689c:	20 d0       	rcall	.+64     	; 0x68de <__ultoa_invert+0x84>
    689e:	09 f4       	brne	.+2      	; 0x68a2 <__ultoa_invert+0x48>
    68a0:	68 94       	set
    68a2:	3f 91       	pop	r19
    68a4:	2a e0       	ldi	r18, 0x0A	; 10
    68a6:	26 9f       	mul	r18, r22
    68a8:	11 24       	eor	r1, r1
    68aa:	30 19       	sub	r19, r0
    68ac:	30 5d       	subi	r19, 0xD0	; 208
    68ae:	31 93       	st	Z+, r19
    68b0:	de f6       	brtc	.-74     	; 0x6868 <__ultoa_invert+0xe>
    68b2:	cf 01       	movw	r24, r30
    68b4:	08 95       	ret
    68b6:	46 2f       	mov	r20, r22
    68b8:	47 70       	andi	r20, 0x07	; 7
    68ba:	40 5d       	subi	r20, 0xD0	; 208
    68bc:	41 93       	st	Z+, r20
    68be:	b3 e0       	ldi	r27, 0x03	; 3
    68c0:	0f d0       	rcall	.+30     	; 0x68e0 <__ultoa_invert+0x86>
    68c2:	c9 f7       	brne	.-14     	; 0x68b6 <__ultoa_invert+0x5c>
    68c4:	f6 cf       	rjmp	.-20     	; 0x68b2 <__ultoa_invert+0x58>
    68c6:	46 2f       	mov	r20, r22
    68c8:	4f 70       	andi	r20, 0x0F	; 15
    68ca:	40 5d       	subi	r20, 0xD0	; 208
    68cc:	4a 33       	cpi	r20, 0x3A	; 58
    68ce:	18 f0       	brcs	.+6      	; 0x68d6 <__ultoa_invert+0x7c>
    68d0:	49 5d       	subi	r20, 0xD9	; 217
    68d2:	31 fd       	sbrc	r19, 1
    68d4:	40 52       	subi	r20, 0x20	; 32
    68d6:	41 93       	st	Z+, r20
    68d8:	02 d0       	rcall	.+4      	; 0x68de <__ultoa_invert+0x84>
    68da:	a9 f7       	brne	.-22     	; 0x68c6 <__ultoa_invert+0x6c>
    68dc:	ea cf       	rjmp	.-44     	; 0x68b2 <__ultoa_invert+0x58>
    68de:	b4 e0       	ldi	r27, 0x04	; 4
    68e0:	a6 95       	lsr	r26
    68e2:	97 95       	ror	r25
    68e4:	87 95       	ror	r24
    68e6:	77 95       	ror	r23
    68e8:	67 95       	ror	r22
    68ea:	ba 95       	dec	r27
    68ec:	c9 f7       	brne	.-14     	; 0x68e0 <__ultoa_invert+0x86>
    68ee:	00 97       	sbiw	r24, 0x00	; 0
    68f0:	61 05       	cpc	r22, r1
    68f2:	71 05       	cpc	r23, r1
    68f4:	08 95       	ret
    68f6:	9b 01       	movw	r18, r22
    68f8:	ac 01       	movw	r20, r24
    68fa:	0a 2e       	mov	r0, r26
    68fc:	06 94       	lsr	r0
    68fe:	57 95       	ror	r21
    6900:	47 95       	ror	r20
    6902:	37 95       	ror	r19
    6904:	27 95       	ror	r18
    6906:	ba 95       	dec	r27
    6908:	c9 f7       	brne	.-14     	; 0x68fc <__ultoa_invert+0xa2>
    690a:	62 0f       	add	r22, r18
    690c:	73 1f       	adc	r23, r19
    690e:	84 1f       	adc	r24, r20
    6910:	95 1f       	adc	r25, r21
    6912:	a0 1d       	adc	r26, r0
    6914:	08 95       	ret

00006916 <__divmodsi4>:
    6916:	05 2e       	mov	r0, r21
    6918:	97 fb       	bst	r25, 7
    691a:	16 f4       	brtc	.+4      	; 0x6920 <__divmodsi4+0xa>
    691c:	00 94       	com	r0
    691e:	0f d0       	rcall	.+30     	; 0x693e <__negsi2>
    6920:	57 fd       	sbrc	r21, 7
    6922:	05 d0       	rcall	.+10     	; 0x692e <__divmodsi4_neg2>
    6924:	a9 da       	rcall	.-2734   	; 0x5e78 <__udivmodsi4>
    6926:	07 fc       	sbrc	r0, 7
    6928:	02 d0       	rcall	.+4      	; 0x692e <__divmodsi4_neg2>
    692a:	46 f4       	brtc	.+16     	; 0x693c <__divmodsi4_exit>
    692c:	08 c0       	rjmp	.+16     	; 0x693e <__negsi2>

0000692e <__divmodsi4_neg2>:
    692e:	50 95       	com	r21
    6930:	40 95       	com	r20
    6932:	30 95       	com	r19
    6934:	21 95       	neg	r18
    6936:	3f 4f       	sbci	r19, 0xFF	; 255
    6938:	4f 4f       	sbci	r20, 0xFF	; 255
    693a:	5f 4f       	sbci	r21, 0xFF	; 255

0000693c <__divmodsi4_exit>:
    693c:	08 95       	ret

0000693e <__negsi2>:
    693e:	90 95       	com	r25
    6940:	80 95       	com	r24
    6942:	70 95       	com	r23
    6944:	61 95       	neg	r22
    6946:	7f 4f       	sbci	r23, 0xFF	; 255
    6948:	8f 4f       	sbci	r24, 0xFF	; 255
    694a:	9f 4f       	sbci	r25, 0xFF	; 255
    694c:	08 95       	ret

0000694e <__muluhisi3>:
    694e:	0f d0       	rcall	.+30     	; 0x696e <__umulhisi3>
    6950:	a5 9f       	mul	r26, r21
    6952:	90 0d       	add	r25, r0
    6954:	b4 9f       	mul	r27, r20
    6956:	90 0d       	add	r25, r0
    6958:	a4 9f       	mul	r26, r20
    695a:	80 0d       	add	r24, r0
    695c:	91 1d       	adc	r25, r1
    695e:	11 24       	eor	r1, r1
    6960:	08 95       	ret

00006962 <__mulshisi3>:
    6962:	b7 ff       	sbrs	r27, 7
    6964:	f4 cf       	rjmp	.-24     	; 0x694e <__muluhisi3>

00006966 <__mulohisi3>:
    6966:	f3 df       	rcall	.-26     	; 0x694e <__muluhisi3>
    6968:	82 1b       	sub	r24, r18
    696a:	93 0b       	sbc	r25, r19
    696c:	08 95       	ret

0000696e <__umulhisi3>:
    696e:	a2 9f       	mul	r26, r18
    6970:	b0 01       	movw	r22, r0
    6972:	b3 9f       	mul	r27, r19
    6974:	c0 01       	movw	r24, r0
    6976:	a3 9f       	mul	r26, r19
    6978:	70 0d       	add	r23, r0
    697a:	81 1d       	adc	r24, r1
    697c:	11 24       	eor	r1, r1
    697e:	91 1d       	adc	r25, r1
    6980:	b2 9f       	mul	r27, r18
    6982:	70 0d       	add	r23, r0
    6984:	81 1d       	adc	r24, r1
    6986:	11 24       	eor	r1, r1
    6988:	91 1d       	adc	r25, r1
    698a:	08 95       	ret

0000698c <_exit>:
    698c:	f8 94       	cli

0000698e <__stop_program>:
    698e:	ff cf       	rjmp	.-2      	; 0x698e <__stop_program>
