
SEP4IOT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001bc  00800200  000058dc  00005970  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000058dc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000114f  008003bc  008003bc  00005b2c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00005b2c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00005b88  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000c58  00000000  00000000  00005bc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000f467  00000000  00000000  00006820  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003dd3  00000000  00000000  00015c87  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00007225  00000000  00000000  00019a5a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000297c  00000000  00000000  00020c80  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000478a  00000000  00000000  000235fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000d970  00000000  00000000  00027d86  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000c18  00000000  00000000  000356f6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	4f c2       	rjmp	.+1182   	; 0x4a0 <__ctors_end>
       2:	00 00       	nop
       4:	6e c2       	rjmp	.+1244   	; 0x4e2 <__bad_interrupt>
       6:	00 00       	nop
       8:	6c c2       	rjmp	.+1240   	; 0x4e2 <__bad_interrupt>
       a:	00 00       	nop
       c:	6a c2       	rjmp	.+1236   	; 0x4e2 <__bad_interrupt>
       e:	00 00       	nop
      10:	68 c2       	rjmp	.+1232   	; 0x4e2 <__bad_interrupt>
      12:	00 00       	nop
      14:	66 c2       	rjmp	.+1228   	; 0x4e2 <__bad_interrupt>
      16:	00 00       	nop
      18:	64 c2       	rjmp	.+1224   	; 0x4e2 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	62 c2       	rjmp	.+1220   	; 0x4e2 <__bad_interrupt>
      1e:	00 00       	nop
      20:	60 c2       	rjmp	.+1216   	; 0x4e2 <__bad_interrupt>
      22:	00 00       	nop
      24:	5e c2       	rjmp	.+1212   	; 0x4e2 <__bad_interrupt>
      26:	00 00       	nop
      28:	5c c2       	rjmp	.+1208   	; 0x4e2 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	5a c2       	rjmp	.+1204   	; 0x4e2 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 0a 0c 	jmp	0x1814	; 0x1814 <__vector_12>
      34:	56 c2       	rjmp	.+1196   	; 0x4e2 <__bad_interrupt>
      36:	00 00       	nop
      38:	54 c2       	rjmp	.+1192   	; 0x4e2 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	52 c2       	rjmp	.+1188   	; 0x4e2 <__bad_interrupt>
      3e:	00 00       	nop
      40:	50 c2       	rjmp	.+1184   	; 0x4e2 <__bad_interrupt>
      42:	00 00       	nop
      44:	4e c2       	rjmp	.+1180   	; 0x4e2 <__bad_interrupt>
      46:	00 00       	nop
      48:	4c c2       	rjmp	.+1176   	; 0x4e2 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	4a c2       	rjmp	.+1172   	; 0x4e2 <__bad_interrupt>
      4e:	00 00       	nop
      50:	48 c2       	rjmp	.+1168   	; 0x4e2 <__bad_interrupt>
      52:	00 00       	nop
      54:	46 c2       	rjmp	.+1164   	; 0x4e2 <__bad_interrupt>
      56:	00 00       	nop
      58:	44 c2       	rjmp	.+1160   	; 0x4e2 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	42 c2       	rjmp	.+1156   	; 0x4e2 <__bad_interrupt>
      5e:	00 00       	nop
      60:	40 c2       	rjmp	.+1152   	; 0x4e2 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 04 21 	jmp	0x4208	; 0x4208 <__vector_25>
      68:	0c 94 56 21 	jmp	0x42ac	; 0x42ac <__vector_26>
      6c:	3a c2       	rjmp	.+1140   	; 0x4e2 <__bad_interrupt>
      6e:	00 00       	nop
      70:	38 c2       	rjmp	.+1136   	; 0x4e2 <__bad_interrupt>
      72:	00 00       	nop
      74:	36 c2       	rjmp	.+1132   	; 0x4e2 <__bad_interrupt>
      76:	00 00       	nop
      78:	34 c2       	rjmp	.+1128   	; 0x4e2 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	32 c2       	rjmp	.+1124   	; 0x4e2 <__bad_interrupt>
      7e:	00 00       	nop
      80:	30 c2       	rjmp	.+1120   	; 0x4e2 <__bad_interrupt>
      82:	00 00       	nop
      84:	2e c2       	rjmp	.+1116   	; 0x4e2 <__bad_interrupt>
      86:	00 00       	nop
      88:	2c c2       	rjmp	.+1112   	; 0x4e2 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	2a c2       	rjmp	.+1108   	; 0x4e2 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 9a 21 	jmp	0x4334	; 0x4334 <__vector_36>
      94:	0c 94 ec 21 	jmp	0x43d8	; 0x43d8 <__vector_37>
      98:	24 c2       	rjmp	.+1096   	; 0x4e2 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 84 24 	jmp	0x4908	; 0x4908 <__vector_39>
      a0:	20 c2       	rjmp	.+1088   	; 0x4e2 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	1e c2       	rjmp	.+1084   	; 0x4e2 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	1c c2       	rjmp	.+1080   	; 0x4e2 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	1a c2       	rjmp	.+1076   	; 0x4e2 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	18 c2       	rjmp	.+1072   	; 0x4e2 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	16 c2       	rjmp	.+1068   	; 0x4e2 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	14 c2       	rjmp	.+1064   	; 0x4e2 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	12 c2       	rjmp	.+1060   	; 0x4e2 <__bad_interrupt>
      be:	00 00       	nop
      c0:	10 c2       	rjmp	.+1056   	; 0x4e2 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	0e c2       	rjmp	.+1052   	; 0x4e2 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	0c c2       	rjmp	.+1048   	; 0x4e2 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 30 22 	jmp	0x4460	; 0x4460 <__vector_51>
      d0:	0c 94 82 22 	jmp	0x4504	; 0x4504 <__vector_52>
      d4:	06 c2       	rjmp	.+1036   	; 0x4e2 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 c6 22 	jmp	0x458c	; 0x458c <__vector_54>
      dc:	0c 94 18 23 	jmp	0x4630	; 0x4630 <__vector_55>
      e0:	00 c2       	rjmp	.+1024   	; 0x4e2 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	c6 01       	movw	r24, r12
      e6:	c6 01       	movw	r24, r12
      e8:	c6 01       	movw	r24, r12
      ea:	00 02       	muls	r16, r16
      ec:	08 02       	muls	r16, r24
      ee:	1e 02       	muls	r17, r30
      f0:	c6 01       	movw	r24, r12
      f2:	c6 01       	movw	r24, r12
      f4:	00 02       	muls	r16, r16
      f6:	08 02       	muls	r16, r24
      f8:	a6 24       	eor	r10, r6
      fa:	16 25       	eor	r17, r6
      fc:	16 25       	eor	r17, r6
      fe:	16 25       	eor	r17, r6
     100:	16 25       	eor	r17, r6
     102:	16 25       	eor	r17, r6
     104:	16 25       	eor	r17, r6
     106:	16 25       	eor	r17, r6
     108:	a6 24       	eor	r10, r6
     10a:	16 25       	eor	r17, r6
     10c:	16 25       	eor	r17, r6
     10e:	16 25       	eor	r17, r6
     110:	16 25       	eor	r17, r6
     112:	16 25       	eor	r17, r6
     114:	16 25       	eor	r17, r6
     116:	16 25       	eor	r17, r6
     118:	a8 24       	eor	r10, r8
     11a:	16 25       	eor	r17, r6
     11c:	16 25       	eor	r17, r6
     11e:	16 25       	eor	r17, r6
     120:	16 25       	eor	r17, r6
     122:	16 25       	eor	r17, r6
     124:	16 25       	eor	r17, r6
     126:	16 25       	eor	r17, r6
     128:	16 25       	eor	r17, r6
     12a:	16 25       	eor	r17, r6
     12c:	16 25       	eor	r17, r6
     12e:	16 25       	eor	r17, r6
     130:	16 25       	eor	r17, r6
     132:	16 25       	eor	r17, r6
     134:	16 25       	eor	r17, r6
     136:	16 25       	eor	r17, r6
     138:	a8 24       	eor	r10, r8
     13a:	16 25       	eor	r17, r6
     13c:	16 25       	eor	r17, r6
     13e:	16 25       	eor	r17, r6
     140:	16 25       	eor	r17, r6
     142:	16 25       	eor	r17, r6
     144:	16 25       	eor	r17, r6
     146:	16 25       	eor	r17, r6
     148:	16 25       	eor	r17, r6
     14a:	16 25       	eor	r17, r6
     14c:	16 25       	eor	r17, r6
     14e:	16 25       	eor	r17, r6
     150:	16 25       	eor	r17, r6
     152:	16 25       	eor	r17, r6
     154:	16 25       	eor	r17, r6
     156:	16 25       	eor	r17, r6
     158:	12 25       	eor	r17, r2
     15a:	16 25       	eor	r17, r6
     15c:	16 25       	eor	r17, r6
     15e:	16 25       	eor	r17, r6
     160:	16 25       	eor	r17, r6
     162:	16 25       	eor	r17, r6
     164:	16 25       	eor	r17, r6
     166:	16 25       	eor	r17, r6
     168:	dd 24       	eor	r13, r13
     16a:	16 25       	eor	r17, r6
     16c:	16 25       	eor	r17, r6
     16e:	16 25       	eor	r17, r6
     170:	16 25       	eor	r17, r6
     172:	16 25       	eor	r17, r6
     174:	16 25       	eor	r17, r6
     176:	16 25       	eor	r17, r6
     178:	16 25       	eor	r17, r6
     17a:	16 25       	eor	r17, r6
     17c:	16 25       	eor	r17, r6
     17e:	16 25       	eor	r17, r6
     180:	16 25       	eor	r17, r6
     182:	16 25       	eor	r17, r6
     184:	16 25       	eor	r17, r6
     186:	16 25       	eor	r17, r6
     188:	d1 24       	eor	r13, r1
     18a:	16 25       	eor	r17, r6
     18c:	16 25       	eor	r17, r6
     18e:	16 25       	eor	r17, r6
     190:	16 25       	eor	r17, r6
     192:	16 25       	eor	r17, r6
     194:	16 25       	eor	r17, r6
     196:	16 25       	eor	r17, r6
     198:	f5 24       	eor	r15, r5

0000019a <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     19a:	04 ed       	ldi	r16, 0xD4	; 212
     19c:	13 e1       	ldi	r17, 0x13	; 19
     19e:	0f 2e       	mov	r0, r31
     1a0:	f4 e0       	ldi	r31, 0x04	; 4
     1a2:	ef 2e       	mov	r14, r31
     1a4:	f4 e1       	ldi	r31, 0x14	; 20
     1a6:	ff 2e       	mov	r15, r31
     1a8:	f0 2d       	mov	r31, r0
     1aa:	80 91 d3 13 	lds	r24, 0x13D3	; 0x8013d3 <uxDeletedTasksWaitingCleanUp>
     1ae:	88 23       	and	r24, r24
     1b0:	29 f1       	breq	.+74     	; 0x1fc <prvIdleTask+0x62>
     1b2:	0f b6       	in	r0, 0x3f	; 63
     1b4:	f8 94       	cli
     1b6:	0f 92       	push	r0
     1b8:	d8 01       	movw	r26, r16
     1ba:	17 96       	adiw	r26, 0x07	; 7
     1bc:	ed 91       	ld	r30, X+
     1be:	fc 91       	ld	r31, X
     1c0:	18 97       	sbiw	r26, 0x08	; 8
     1c2:	c0 85       	ldd	r28, Z+8	; 0x08
     1c4:	d1 85       	ldd	r29, Z+9	; 0x09
     1c6:	ce 01       	movw	r24, r28
     1c8:	02 96       	adiw	r24, 0x02	; 2
     1ca:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <uxListRemove>
     1ce:	80 91 c7 13 	lds	r24, 0x13C7	; 0x8013c7 <uxCurrentNumberOfTasks>
     1d2:	81 50       	subi	r24, 0x01	; 1
     1d4:	80 93 c7 13 	sts	0x13C7, r24	; 0x8013c7 <uxCurrentNumberOfTasks>
     1d8:	80 91 d3 13 	lds	r24, 0x13D3	; 0x8013d3 <uxDeletedTasksWaitingCleanUp>
     1dc:	81 50       	subi	r24, 0x01	; 1
     1de:	80 93 d3 13 	sts	0x13D3, r24	; 0x8013d3 <uxDeletedTasksWaitingCleanUp>
     1e2:	0f 90       	pop	r0
     1e4:	0f be       	out	0x3f, r0	; 63
     1e6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     1e8:	9c 8d       	ldd	r25, Y+28	; 0x1c
     1ea:	0e 94 cc 09 	call	0x1398	; 0x1398 <vPortFree>
     1ee:	ce 01       	movw	r24, r28
     1f0:	0e 94 cc 09 	call	0x1398	; 0x1398 <vPortFree>
     1f4:	80 91 d3 13 	lds	r24, 0x13D3	; 0x8013d3 <uxDeletedTasksWaitingCleanUp>
     1f8:	81 11       	cpse	r24, r1
     1fa:	db cf       	rjmp	.-74     	; 0x1b2 <prvIdleTask+0x18>
     1fc:	f7 01       	movw	r30, r14
     1fe:	80 81       	ld	r24, Z
     200:	82 30       	cpi	r24, 0x02	; 2
     202:	10 f0       	brcs	.+4      	; 0x208 <prvIdleTask+0x6e>
     204:	0e 94 45 0b 	call	0x168a	; 0x168a <vPortYield>
     208:	0e 94 2f 1b 	call	0x365e	; 0x365e <vApplicationIdleHook>
     20c:	ce cf       	rjmp	.-100    	; 0x1aa <prvIdleTask+0x10>

0000020e <prvTimerTask>:
            pxNewTimer->ucStatus = 0x00;
            prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
        }

        return pxNewTimer;
    }
     20e:	cf 93       	push	r28
     210:	df 93       	push	r29
     212:	cd b7       	in	r28, 0x3d	; 61
     214:	de b7       	in	r29, 0x3e	; 62
     216:	60 97       	sbiw	r28, 0x10	; 16
     218:	0f b6       	in	r0, 0x3f	; 63
     21a:	f8 94       	cli
     21c:	de bf       	out	0x3e, r29	; 62
     21e:	0f be       	out	0x3f, r0	; 63
     220:	cd bf       	out	0x3d, r28	; 61
     222:	ce 01       	movw	r24, r28
     224:	01 96       	adiw	r24, 0x01	; 1
     226:	9a 87       	std	Y+10, r25	; 0x0a
     228:	89 87       	std	Y+9, r24	; 0x09
     22a:	81 2c       	mov	r8, r1
     22c:	91 2c       	mov	r9, r1
     22e:	a1 2c       	mov	r10, r1
     230:	b1 2c       	mov	r11, r1
     232:	69 84       	ldd	r6, Y+9	; 0x09
     234:	7a 84       	ldd	r7, Y+10	; 0x0a
     236:	e0 91 3c 14 	lds	r30, 0x143C	; 0x80143c <pxCurrentTimerList>
     23a:	f0 91 3d 14 	lds	r31, 0x143D	; 0x80143d <pxCurrentTimerList+0x1>
     23e:	80 81       	ld	r24, Z
     240:	88 23       	and	r24, r24
     242:	09 f4       	brne	.+2      	; 0x246 <prvTimerTask+0x38>
     244:	13 c1       	rjmp	.+550    	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
     246:	07 80       	ldd	r0, Z+7	; 0x07
     248:	f0 85       	ldd	r31, Z+8	; 0x08
     24a:	e0 2d       	mov	r30, r0
     24c:	20 80       	ld	r2, Z
     24e:	31 80       	ldd	r3, Z+1	; 0x01
     250:	42 80       	ldd	r4, Z+2	; 0x02
     252:	53 80       	ldd	r5, Z+3	; 0x03
     254:	0e 94 74 13 	call	0x26e8	; 0x26e8 <vTaskSuspendAll>
     258:	ce 01       	movw	r24, r28
     25a:	01 96       	adiw	r24, 0x01	; 1
     25c:	0e 94 99 1a 	call	0x3532	; 0x3532 <prvSampleTimeNow>
     260:	6b 87       	std	Y+11, r22	; 0x0b
     262:	7c 87       	std	Y+12, r23	; 0x0c
     264:	8d 87       	std	Y+13, r24	; 0x0d
     266:	9e 87       	std	Y+14, r25	; 0x0e
     268:	89 81       	ldd	r24, Y+1	; 0x01
     26a:	81 11       	cpse	r24, r1
     26c:	67 c0       	rjmp	.+206    	; 0x33c <prvTimerTask+0x12e>
     26e:	8b 85       	ldd	r24, Y+11	; 0x0b
     270:	9c 85       	ldd	r25, Y+12	; 0x0c
     272:	ad 85       	ldd	r26, Y+13	; 0x0d
     274:	be 85       	ldd	r27, Y+14	; 0x0e
     276:	82 15       	cp	r24, r2
     278:	93 05       	cpc	r25, r3
     27a:	a4 05       	cpc	r26, r4
     27c:	b5 05       	cpc	r27, r5
     27e:	08 f4       	brcc	.+2      	; 0x282 <prvTimerTask+0x74>
     280:	45 c0       	rjmp	.+138    	; 0x30c <prvTimerTask+0xfe>
     282:	0e 94 5d 14 	call	0x28ba	; 0x28ba <xTaskResumeAll>
     286:	e0 91 3c 14 	lds	r30, 0x143C	; 0x80143c <pxCurrentTimerList>
     28a:	f0 91 3d 14 	lds	r31, 0x143D	; 0x80143d <pxCurrentTimerList+0x1>
     28e:	07 80       	ldd	r0, Z+7	; 0x07
     290:	f0 85       	ldd	r31, Z+8	; 0x08
     292:	e0 2d       	mov	r30, r0
     294:	a0 85       	ldd	r26, Z+8	; 0x08
     296:	b1 85       	ldd	r27, Z+9	; 0x09
     298:	b8 8b       	std	Y+16, r27	; 0x10
     29a:	af 87       	std	Y+15, r26	; 0x0f
     29c:	cd 01       	movw	r24, r26
     29e:	02 96       	adiw	r24, 0x02	; 2
     2a0:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <uxListRemove>
     2a4:	ef 85       	ldd	r30, Y+15	; 0x0f
     2a6:	f8 89       	ldd	r31, Y+16	; 0x10
     2a8:	87 89       	ldd	r24, Z+23	; 0x17
     2aa:	82 ff       	sbrs	r24, 2
     2ac:	21 c0       	rjmp	.+66     	; 0x2f0 <prvTimerTask+0xe2>
     2ae:	46 85       	ldd	r20, Z+14	; 0x0e
     2b0:	57 85       	ldd	r21, Z+15	; 0x0f
     2b2:	60 89       	ldd	r22, Z+16	; 0x10
     2b4:	71 89       	ldd	r23, Z+17	; 0x11
     2b6:	42 0d       	add	r20, r2
     2b8:	53 1d       	adc	r21, r3
     2ba:	64 1d       	adc	r22, r4
     2bc:	75 1d       	adc	r23, r5
     2be:	72 01       	movw	r14, r4
     2c0:	61 01       	movw	r12, r2
     2c2:	0b 85       	ldd	r16, Y+11	; 0x0b
     2c4:	1c 85       	ldd	r17, Y+12	; 0x0c
     2c6:	2d 85       	ldd	r18, Y+13	; 0x0d
     2c8:	3e 85       	ldd	r19, Y+14	; 0x0e
     2ca:	cf 01       	movw	r24, r30
     2cc:	0e 94 a8 19 	call	0x3350	; 0x3350 <prvInsertTimerInActiveList>
     2d0:	88 23       	and	r24, r24
     2d2:	99 f0       	breq	.+38     	; 0x2fa <prvTimerTask+0xec>
     2d4:	c8 2c       	mov	r12, r8
     2d6:	d9 2c       	mov	r13, r9
     2d8:	ea 2c       	mov	r14, r10
     2da:	fb 2c       	mov	r15, r11
     2dc:	00 e0       	ldi	r16, 0x00	; 0
     2de:	10 e0       	ldi	r17, 0x00	; 0
     2e0:	a2 01       	movw	r20, r4
     2e2:	91 01       	movw	r18, r2
     2e4:	60 e0       	ldi	r22, 0x00	; 0
     2e6:	8f 85       	ldd	r24, Y+15	; 0x0f
     2e8:	98 89       	ldd	r25, Y+16	; 0x10
     2ea:	0e 94 3b 1a 	call	0x3476	; 0x3476 <xTimerGenericCommand>
     2ee:	05 c0       	rjmp	.+10     	; 0x2fa <prvTimerTask+0xec>
     2f0:	8e 7f       	andi	r24, 0xFE	; 254
     2f2:	af 85       	ldd	r26, Y+15	; 0x0f
     2f4:	b8 89       	ldd	r27, Y+16	; 0x10
     2f6:	57 96       	adiw	r26, 0x17	; 23
     2f8:	8c 93       	st	X, r24
     2fa:	af 85       	ldd	r26, Y+15	; 0x0f
     2fc:	b8 89       	ldd	r27, Y+16	; 0x10
     2fe:	54 96       	adiw	r26, 0x14	; 20
     300:	ed 91       	ld	r30, X+
     302:	fc 91       	ld	r31, X
     304:	55 97       	sbiw	r26, 0x15	; 21
     306:	cd 01       	movw	r24, r26
     308:	19 95       	eicall
     30a:	a1 c0       	rjmp	.+322    	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     30c:	20 e0       	ldi	r18, 0x00	; 0
     30e:	b2 01       	movw	r22, r4
     310:	a1 01       	movw	r20, r2
     312:	8b 85       	ldd	r24, Y+11	; 0x0b
     314:	9c 85       	ldd	r25, Y+12	; 0x0c
     316:	ad 85       	ldd	r26, Y+13	; 0x0d
     318:	be 85       	ldd	r27, Y+14	; 0x0e
     31a:	48 1b       	sub	r20, r24
     31c:	59 0b       	sbc	r21, r25
     31e:	6a 0b       	sbc	r22, r26
     320:	7b 0b       	sbc	r23, r27
     322:	80 91 38 14 	lds	r24, 0x1438	; 0x801438 <xTimerQueue>
     326:	90 91 39 14 	lds	r25, 0x1439	; 0x801439 <xTimerQueue+0x1>
     32a:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <vQueueWaitForMessageRestricted>
     32e:	0e 94 5d 14 	call	0x28ba	; 0x28ba <xTaskResumeAll>
     332:	81 11       	cpse	r24, r1
     334:	8c c0       	rjmp	.+280    	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     336:	0e 94 45 0b 	call	0x168a	; 0x168a <vPortYield>
     33a:	89 c0       	rjmp	.+274    	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     33c:	0e 94 5d 14 	call	0x28ba	; 0x28ba <xTaskResumeAll>
     340:	86 c0       	rjmp	.+268    	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     342:	89 81       	ldd	r24, Y+1	; 0x01
     344:	88 23       	and	r24, r24
     346:	0c f4       	brge	.+2      	; 0x34a <prvTimerTask+0x13c>
     348:	82 c0       	rjmp	.+260    	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     34a:	4e 80       	ldd	r4, Y+6	; 0x06
     34c:	5f 80       	ldd	r5, Y+7	; 0x07
     34e:	d2 01       	movw	r26, r4
     350:	1c 96       	adiw	r26, 0x0c	; 12
     352:	8d 91       	ld	r24, X+
     354:	9c 91       	ld	r25, X
     356:	1d 97       	sbiw	r26, 0x0d	; 13
     358:	89 2b       	or	r24, r25
     35a:	21 f0       	breq	.+8      	; 0x364 <prvTimerTask+0x156>
     35c:	c2 01       	movw	r24, r4
     35e:	02 96       	adiw	r24, 0x02	; 2
     360:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <uxListRemove>
     364:	ce 01       	movw	r24, r28
     366:	08 96       	adiw	r24, 0x08	; 8
     368:	0e 94 99 1a 	call	0x3532	; 0x3532 <prvSampleTimeNow>
     36c:	8b 01       	movw	r16, r22
     36e:	9c 01       	movw	r18, r24
     370:	e9 81       	ldd	r30, Y+1	; 0x01
     372:	0e 2e       	mov	r0, r30
     374:	00 0c       	add	r0, r0
     376:	ff 0b       	sbc	r31, r31
     378:	ea 30       	cpi	r30, 0x0A	; 10
     37a:	f1 05       	cpc	r31, r1
     37c:	08 f0       	brcs	.+2      	; 0x380 <prvTimerTask+0x172>
     37e:	67 c0       	rjmp	.+206    	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     380:	88 27       	eor	r24, r24
     382:	ee 58       	subi	r30, 0x8E	; 142
     384:	ff 4f       	sbci	r31, 0xFF	; 255
     386:	8f 4f       	sbci	r24, 0xFF	; 255
     388:	0c 94 81 27 	jmp	0x4f02	; 0x4f02 <__tablejump2__>
     38c:	f2 01       	movw	r30, r4
     38e:	87 89       	ldd	r24, Z+23	; 0x17
     390:	81 60       	ori	r24, 0x01	; 1
     392:	87 8b       	std	Z+23, r24	; 0x17
     394:	ca 80       	ldd	r12, Y+2	; 0x02
     396:	db 80       	ldd	r13, Y+3	; 0x03
     398:	ec 80       	ldd	r14, Y+4	; 0x04
     39a:	fd 80       	ldd	r15, Y+5	; 0x05
     39c:	46 85       	ldd	r20, Z+14	; 0x0e
     39e:	57 85       	ldd	r21, Z+15	; 0x0f
     3a0:	60 89       	ldd	r22, Z+16	; 0x10
     3a2:	71 89       	ldd	r23, Z+17	; 0x11
     3a4:	4c 0d       	add	r20, r12
     3a6:	5d 1d       	adc	r21, r13
     3a8:	6e 1d       	adc	r22, r14
     3aa:	7f 1d       	adc	r23, r15
     3ac:	c2 01       	movw	r24, r4
     3ae:	0e 94 a8 19 	call	0x3350	; 0x3350 <prvInsertTimerInActiveList>
     3b2:	88 23       	and	r24, r24
     3b4:	09 f4       	brne	.+2      	; 0x3b8 <prvTimerTask+0x1aa>
     3b6:	4b c0       	rjmp	.+150    	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     3b8:	d2 01       	movw	r26, r4
     3ba:	54 96       	adiw	r26, 0x14	; 20
     3bc:	ed 91       	ld	r30, X+
     3be:	fc 91       	ld	r31, X
     3c0:	55 97       	sbiw	r26, 0x15	; 21
     3c2:	c2 01       	movw	r24, r4
     3c4:	19 95       	eicall
     3c6:	f2 01       	movw	r30, r4
     3c8:	87 89       	ldd	r24, Z+23	; 0x17
     3ca:	82 ff       	sbrs	r24, 2
     3cc:	40 c0       	rjmp	.+128    	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     3ce:	4a 81       	ldd	r20, Y+2	; 0x02
     3d0:	5b 81       	ldd	r21, Y+3	; 0x03
     3d2:	6c 81       	ldd	r22, Y+4	; 0x04
     3d4:	7d 81       	ldd	r23, Y+5	; 0x05
     3d6:	86 85       	ldd	r24, Z+14	; 0x0e
     3d8:	97 85       	ldd	r25, Z+15	; 0x0f
     3da:	a0 89       	ldd	r26, Z+16	; 0x10
     3dc:	b1 89       	ldd	r27, Z+17	; 0x11
     3de:	9a 01       	movw	r18, r20
     3e0:	ab 01       	movw	r20, r22
     3e2:	28 0f       	add	r18, r24
     3e4:	39 1f       	adc	r19, r25
     3e6:	4a 1f       	adc	r20, r26
     3e8:	5b 1f       	adc	r21, r27
     3ea:	c8 2c       	mov	r12, r8
     3ec:	d9 2c       	mov	r13, r9
     3ee:	ea 2c       	mov	r14, r10
     3f0:	fb 2c       	mov	r15, r11
     3f2:	00 e0       	ldi	r16, 0x00	; 0
     3f4:	10 e0       	ldi	r17, 0x00	; 0
     3f6:	60 e0       	ldi	r22, 0x00	; 0
     3f8:	c2 01       	movw	r24, r4
     3fa:	0e 94 3b 1a 	call	0x3476	; 0x3476 <xTimerGenericCommand>
     3fe:	27 c0       	rjmp	.+78     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     400:	d2 01       	movw	r26, r4
     402:	57 96       	adiw	r26, 0x17	; 23
     404:	8c 91       	ld	r24, X
     406:	57 97       	sbiw	r26, 0x17	; 23
     408:	8e 7f       	andi	r24, 0xFE	; 254
     40a:	57 96       	adiw	r26, 0x17	; 23
     40c:	8c 93       	st	X, r24
     40e:	1f c0       	rjmp	.+62     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     410:	f2 01       	movw	r30, r4
     412:	87 89       	ldd	r24, Z+23	; 0x17
     414:	81 60       	ori	r24, 0x01	; 1
     416:	87 8b       	std	Z+23, r24	; 0x17
     418:	4a 81       	ldd	r20, Y+2	; 0x02
     41a:	5b 81       	ldd	r21, Y+3	; 0x03
     41c:	6c 81       	ldd	r22, Y+4	; 0x04
     41e:	7d 81       	ldd	r23, Y+5	; 0x05
     420:	46 87       	std	Z+14, r20	; 0x0e
     422:	57 87       	std	Z+15, r21	; 0x0f
     424:	60 8b       	std	Z+16, r22	; 0x10
     426:	71 8b       	std	Z+17, r23	; 0x11
     428:	40 0f       	add	r20, r16
     42a:	51 1f       	adc	r21, r17
     42c:	62 1f       	adc	r22, r18
     42e:	73 1f       	adc	r23, r19
     430:	68 01       	movw	r12, r16
     432:	79 01       	movw	r14, r18
     434:	c2 01       	movw	r24, r4
     436:	0e 94 a8 19 	call	0x3350	; 0x3350 <prvInsertTimerInActiveList>
     43a:	09 c0       	rjmp	.+18     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     43c:	f2 01       	movw	r30, r4
     43e:	87 89       	ldd	r24, Z+23	; 0x17
     440:	81 fd       	sbrc	r24, 1
     442:	03 c0       	rjmp	.+6      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
     444:	c2 01       	movw	r24, r4
     446:	a8 d7       	rcall	.+3920   	; 0x1398 <vPortFree>
     448:	02 c0       	rjmp	.+4      	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     44a:	8e 7f       	andi	r24, 0xFE	; 254
     44c:	87 8b       	std	Z+23, r24	; 0x17
     44e:	28 2d       	mov	r18, r8
     450:	39 2d       	mov	r19, r9
     452:	4a 2d       	mov	r20, r10
     454:	5b 2d       	mov	r21, r11
     456:	66 2d       	mov	r22, r6
     458:	77 2d       	mov	r23, r7
     45a:	80 91 38 14 	lds	r24, 0x1438	; 0x801438 <xTimerQueue>
     45e:	90 91 39 14 	lds	r25, 0x1439	; 0x801439 <xTimerQueue+0x1>
     462:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <xQueueReceive>
     466:	81 11       	cpse	r24, r1
     468:	6c cf       	rjmp	.-296    	; 0x342 <prvTimerTask+0x134>
     46a:	e5 ce       	rjmp	.-566    	; 0x236 <prvTimerTask+0x28>
     46c:	0e 94 74 13 	call	0x26e8	; 0x26e8 <vTaskSuspendAll>
     470:	ce 01       	movw	r24, r28
     472:	01 96       	adiw	r24, 0x01	; 1
     474:	0e 94 99 1a 	call	0x3532	; 0x3532 <prvSampleTimeNow>
     478:	6b 87       	std	Y+11, r22	; 0x0b
     47a:	7c 87       	std	Y+12, r23	; 0x0c
     47c:	8d 87       	std	Y+13, r24	; 0x0d
     47e:	9e 87       	std	Y+14, r25	; 0x0e
     480:	89 81       	ldd	r24, Y+1	; 0x01
     482:	81 11       	cpse	r24, r1
     484:	5b cf       	rjmp	.-330    	; 0x33c <prvTimerTask+0x12e>
     486:	e0 91 3a 14 	lds	r30, 0x143A	; 0x80143a <pxOverflowTimerList>
     48a:	f0 91 3b 14 	lds	r31, 0x143B	; 0x80143b <pxOverflowTimerList+0x1>
     48e:	80 81       	ld	r24, Z
     490:	21 e0       	ldi	r18, 0x01	; 1
     492:	81 11       	cpse	r24, r1
     494:	20 e0       	ldi	r18, 0x00	; 0
     496:	28 2c       	mov	r2, r8
     498:	39 2c       	mov	r3, r9
     49a:	4a 2c       	mov	r4, r10
     49c:	5b 2c       	mov	r5, r11
     49e:	37 cf       	rjmp	.-402    	; 0x30e <prvTimerTask+0x100>

000004a0 <__ctors_end>:
     4a0:	11 24       	eor	r1, r1
     4a2:	1f be       	out	0x3f, r1	; 63
     4a4:	cf ef       	ldi	r28, 0xFF	; 255
     4a6:	d1 e2       	ldi	r29, 0x21	; 33
     4a8:	de bf       	out	0x3e, r29	; 62
     4aa:	cd bf       	out	0x3d, r28	; 61
     4ac:	00 e0       	ldi	r16, 0x00	; 0
     4ae:	0c bf       	out	0x3c, r16	; 60

000004b0 <__do_copy_data>:
     4b0:	13 e0       	ldi	r17, 0x03	; 3
     4b2:	a0 e0       	ldi	r26, 0x00	; 0
     4b4:	b2 e0       	ldi	r27, 0x02	; 2
     4b6:	ec ed       	ldi	r30, 0xDC	; 220
     4b8:	f8 e5       	ldi	r31, 0x58	; 88
     4ba:	00 e0       	ldi	r16, 0x00	; 0
     4bc:	0b bf       	out	0x3b, r16	; 59
     4be:	02 c0       	rjmp	.+4      	; 0x4c4 <__do_copy_data+0x14>
     4c0:	07 90       	elpm	r0, Z+
     4c2:	0d 92       	st	X+, r0
     4c4:	ac 3b       	cpi	r26, 0xBC	; 188
     4c6:	b1 07       	cpc	r27, r17
     4c8:	d9 f7       	brne	.-10     	; 0x4c0 <__do_copy_data+0x10>

000004ca <__do_clear_bss>:
     4ca:	25 e1       	ldi	r18, 0x15	; 21
     4cc:	ac eb       	ldi	r26, 0xBC	; 188
     4ce:	b3 e0       	ldi	r27, 0x03	; 3
     4d0:	01 c0       	rjmp	.+2      	; 0x4d4 <.do_clear_bss_start>

000004d2 <.do_clear_bss_loop>:
     4d2:	1d 92       	st	X+, r1

000004d4 <.do_clear_bss_start>:
     4d4:	ab 30       	cpi	r26, 0x0B	; 11
     4d6:	b2 07       	cpc	r27, r18
     4d8:	e1 f7       	brne	.-8      	; 0x4d2 <.do_clear_bss_loop>
     4da:	0e 94 0c 1c 	call	0x3818	; 0x3818 <main>
     4de:	0c 94 6c 2c 	jmp	0x58d8	; 0x58d8 <_exit>

000004e2 <__bad_interrupt>:
     4e2:	8e cd       	rjmp	.-1252   	; 0x0 <__vectors>

000004e4 <time>:
     4e4:	fc 01       	movw	r30, r24
     4e6:	0f b6       	in	r0, 0x3f	; 63
     4e8:	f8 94       	cli
     4ea:	60 91 07 15 	lds	r22, 0x1507	; 0x801507 <__system_time>
     4ee:	70 91 08 15 	lds	r23, 0x1508	; 0x801508 <__system_time+0x1>
     4f2:	80 91 09 15 	lds	r24, 0x1509	; 0x801509 <__system_time+0x2>
     4f6:	90 91 0a 15 	lds	r25, 0x150A	; 0x80150a <__system_time+0x3>
     4fa:	0f be       	out	0x3f, r0	; 63
     4fc:	30 97       	sbiw	r30, 0x00	; 0
     4fe:	21 f0       	breq	.+8      	; 0x508 <time+0x24>
     500:	60 83       	st	Z, r22
     502:	71 83       	std	Z+1, r23	; 0x01
     504:	82 83       	std	Z+2, r24	; 0x02
     506:	93 83       	std	Z+3, r25	; 0x03
     508:	08 95       	ret

0000050a <my_co2_call_back>:
}



//	RETURN TO DESTROY METHODS
void co2Reader_destroy(co2reader_t self) {
     50a:	90 93 bd 03 	sts	0x03BD, r25	; 0x8003bd <__data_end+0x1>
     50e:	80 93 bc 03 	sts	0x03BC, r24	; 0x8003bc <__data_end>
     512:	08 95       	ret

00000514 <co2Reader_create>:
     514:	2f 92       	push	r2
     516:	3f 92       	push	r3
     518:	4f 92       	push	r4
     51a:	5f 92       	push	r5
     51c:	6f 92       	push	r6
     51e:	7f 92       	push	r7
     520:	8f 92       	push	r8
     522:	9f 92       	push	r9
     524:	af 92       	push	r10
     526:	bf 92       	push	r11
     528:	cf 92       	push	r12
     52a:	df 92       	push	r13
     52c:	ef 92       	push	r14
     52e:	ff 92       	push	r15
     530:	0f 93       	push	r16
     532:	1f 93       	push	r17
     534:	cf 93       	push	r28
     536:	df 93       	push	r29
     538:	88 2e       	mov	r8, r24
     53a:	96 2e       	mov	r9, r22
     53c:	1a 01       	movw	r2, r20
     53e:	28 01       	movw	r4, r16
     540:	39 01       	movw	r6, r18
     542:	87 01       	movw	r16, r14
     544:	64 e0       	ldi	r22, 0x04	; 4
     546:	70 e0       	ldi	r23, 0x00	; 0
     548:	81 e0       	ldi	r24, 0x01	; 1
     54a:	90 e0       	ldi	r25, 0x00	; 0
     54c:	0e 94 9d 27 	call	0x4f3a	; 0x4f3a <calloc>
     550:	ec 01       	movw	r28, r24
     552:	00 97       	sbiw	r24, 0x00	; 0
     554:	79 f1       	breq	.+94     	; 0x5b4 <co2Reader_create+0xa0>
     556:	fc 01       	movw	r30, r24
     558:	11 92       	st	Z+, r1
     55a:	11 92       	st	Z+, r1
     55c:	7f 01       	movw	r14, r30
     55e:	30 92 c9 03 	sts	0x03C9, r3	; 0x8003c9 <_startMeasureEventGroup+0x1>
     562:	20 92 c8 03 	sts	0x03C8, r2	; 0x8003c8 <_startMeasureEventGroup>
     566:	40 92 c4 03 	sts	0x03C4, r4	; 0x8003c4 <_startMeasureBit>
     56a:	50 92 c5 03 	sts	0x03C5, r5	; 0x8003c5 <_startMeasureBit+0x1>
     56e:	60 92 c6 03 	sts	0x03C6, r6	; 0x8003c6 <_startMeasureBit+0x2>
     572:	70 92 c7 03 	sts	0x03C7, r7	; 0x8003c7 <_startMeasureBit+0x3>
     576:	10 93 c3 03 	sts	0x03C3, r17	; 0x8003c3 <_readyEventGroup+0x1>
     57a:	00 93 c2 03 	sts	0x03C2, r16	; 0x8003c2 <_readyEventGroup>
     57e:	a0 92 be 03 	sts	0x03BE, r10	; 0x8003be <_readyBit>
     582:	b0 92 bf 03 	sts	0x03BF, r11	; 0x8003bf <_readyBit+0x1>
     586:	c0 92 c0 03 	sts	0x03C0, r12	; 0x8003c0 <_readyBit+0x2>
     58a:	d0 92 c1 03 	sts	0x03C1, r13	; 0x8003c1 <_readyBit+0x3>
     58e:	65 e8       	ldi	r22, 0x85	; 133
     590:	72 e0       	ldi	r23, 0x02	; 2
     592:	83 e0       	ldi	r24, 0x03	; 3
     594:	0e 94 4c 1f 	call	0x3e98	; 0x3e98 <mh_z19_create>
     598:	49 2d       	mov	r20, r9
     59a:	50 e0       	ldi	r21, 0x00	; 0
     59c:	08 2d       	mov	r16, r8
     59e:	9e 01       	movw	r18, r28
     5a0:	62 e5       	ldi	r22, 0x52	; 82
     5a2:	72 e0       	ldi	r23, 0x02	; 2
     5a4:	81 e5       	ldi	r24, 0x51	; 81
     5a6:	93 e0       	ldi	r25, 0x03	; 3
     5a8:	0e 94 1a 12 	call	0x2434	; 0x2434 <xTaskCreate>
     5ac:	8c e5       	ldi	r24, 0x5C	; 92
     5ae:	92 e0       	ldi	r25, 0x02	; 2
     5b0:	0e 94 54 29 	call	0x52a8	; 0x52a8 <puts>
     5b4:	ce 01       	movw	r24, r28
     5b6:	df 91       	pop	r29
     5b8:	cf 91       	pop	r28
     5ba:	1f 91       	pop	r17
     5bc:	0f 91       	pop	r16
     5be:	ff 90       	pop	r15
     5c0:	ef 90       	pop	r14
     5c2:	df 90       	pop	r13
     5c4:	cf 90       	pop	r12
     5c6:	bf 90       	pop	r11
     5c8:	af 90       	pop	r10
     5ca:	9f 90       	pop	r9
     5cc:	8f 90       	pop	r8
     5ce:	7f 90       	pop	r7
     5d0:	6f 90       	pop	r6
     5d2:	5f 90       	pop	r5
     5d4:	4f 90       	pop	r4
     5d6:	3f 90       	pop	r3
     5d8:	2f 90       	pop	r2
     5da:	08 95       	ret

000005dc <co2Reader_measure>:
}

//actual task, methods devided so that it is possible to test


void co2Reader_measure(co2reader_t self) {
     5dc:	cf 92       	push	r12
     5de:	df 92       	push	r13
     5e0:	ef 92       	push	r14
     5e2:	ff 92       	push	r15
     5e4:	0f 93       	push	r16
     5e6:	1f 93       	push	r17
     5e8:	cf 93       	push	r28
     5ea:	df 93       	push	r29
     5ec:	ec 01       	movw	r28, r24
	
	EventBits_t uxBits = xEventGroupWaitBits(_startMeasureEventGroup, //eventGroup
     5ee:	40 91 c4 03 	lds	r20, 0x03C4	; 0x8003c4 <_startMeasureBit>
     5f2:	50 91 c5 03 	lds	r21, 0x03C5	; 0x8003c5 <_startMeasureBit+0x1>
     5f6:	60 91 c6 03 	lds	r22, 0x03C6	; 0x8003c6 <_startMeasureBit+0x2>
     5fa:	70 91 c7 03 	lds	r23, 0x03C7	; 0x8003c7 <_startMeasureBit+0x3>
     5fe:	cc 24       	eor	r12, r12
     600:	ca 94       	dec	r12
     602:	dc 2c       	mov	r13, r12
     604:	76 01       	movw	r14, r12
     606:	01 e0       	ldi	r16, 0x01	; 1
     608:	21 e0       	ldi	r18, 0x01	; 1
     60a:	80 91 c8 03 	lds	r24, 0x03C8	; 0x8003c8 <_startMeasureEventGroup>
     60e:	90 91 c9 03 	lds	r25, 0x03C9	; 0x8003c9 <_startMeasureEventGroup+0x1>
     612:	63 d4       	rcall	.+2246   	; 0xeda <xEventGroupWaitBits>
	_startMeasureBit, //bits it is interested in
	pdTRUE, //clears the bits
	pdTRUE, //waits for both bits to be set
	portMAX_DELAY); //wait

	if ((uxBits & (_startMeasureBit)) == (_startMeasureBit)) {
     614:	00 91 c4 03 	lds	r16, 0x03C4	; 0x8003c4 <_startMeasureBit>
     618:	10 91 c5 03 	lds	r17, 0x03C5	; 0x8003c5 <_startMeasureBit+0x1>
     61c:	20 91 c6 03 	lds	r18, 0x03C6	; 0x8003c6 <_startMeasureBit+0x2>
     620:	30 91 c7 03 	lds	r19, 0x03C7	; 0x8003c7 <_startMeasureBit+0x3>
     624:	dc 01       	movw	r26, r24
     626:	cb 01       	movw	r24, r22
     628:	80 23       	and	r24, r16
     62a:	91 23       	and	r25, r17
     62c:	a2 23       	and	r26, r18
     62e:	b3 23       	and	r27, r19
     630:	08 17       	cp	r16, r24
     632:	19 07       	cpc	r17, r25
     634:	2a 07       	cpc	r18, r26
     636:	3b 07       	cpc	r19, r27
     638:	59 f5       	brne	.+86     	; 0x690 <co2Reader_measure+0xb4>

		printf("ccccccccccccccccccccccccccc%d",mh_z19_take_meassuring());
     63a:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <mh_z19_take_meassuring>
     63e:	1f 92       	push	r1
     640:	8f 93       	push	r24
     642:	83 e6       	ldi	r24, 0x63	; 99
     644:	92 e0       	ldi	r25, 0x02	; 2
     646:	9f 93       	push	r25
     648:	8f 93       	push	r24
     64a:	0e 94 41 29 	call	0x5282	; 0x5282 <printf>
		vTaskDelay(6);
     64e:	66 e0       	ldi	r22, 0x06	; 6
     650:	70 e0       	ldi	r23, 0x00	; 0
     652:	80 e0       	ldi	r24, 0x00	; 0
     654:	90 e0       	ldi	r25, 0x00	; 0
     656:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <vTaskDelay>
		
		self->value = ppmValue;
     65a:	80 91 bc 03 	lds	r24, 0x03BC	; 0x8003bc <__data_end>
     65e:	90 91 bd 03 	lds	r25, 0x03BD	; 0x8003bd <__data_end+0x1>
     662:	99 83       	std	Y+1, r25	; 0x01
     664:	88 83       	st	Y, r24
		
		
		//set done bit so that device knows measurement is done
		xEventGroupSetBits(_readyEventGroup, _readyBit);
     666:	40 91 be 03 	lds	r20, 0x03BE	; 0x8003be <_readyBit>
     66a:	50 91 bf 03 	lds	r21, 0x03BF	; 0x8003bf <_readyBit+0x1>
     66e:	60 91 c0 03 	lds	r22, 0x03C0	; 0x8003c0 <_readyBit+0x2>
     672:	70 91 c1 03 	lds	r23, 0x03C1	; 0x8003c1 <_readyBit+0x3>
     676:	80 91 c2 03 	lds	r24, 0x03C2	; 0x8003c2 <_readyEventGroup>
     67a:	90 91 c3 03 	lds	r25, 0x03C3	; 0x8003c3 <_readyEventGroup+0x1>
     67e:	ed d4       	rcall	.+2522   	; 0x105a <xEventGroupSetBits>
		printf("co2 done bit set\n");
     680:	81 e8       	ldi	r24, 0x81	; 129
     682:	92 e0       	ldi	r25, 0x02	; 2
     684:	0e 94 54 29 	call	0x52a8	; 0x52a8 <puts>
     688:	0f 90       	pop	r0
     68a:	0f 90       	pop	r0
     68c:	0f 90       	pop	r0
     68e:	0f 90       	pop	r0
	}
}
     690:	df 91       	pop	r29
     692:	cf 91       	pop	r28
     694:	1f 91       	pop	r17
     696:	0f 91       	pop	r16
     698:	ff 90       	pop	r15
     69a:	ef 90       	pop	r14
     69c:	df 90       	pop	r13
     69e:	cf 90       	pop	r12
     6a0:	08 95       	ret

000006a2 <co2Reader_executeTask>:
{	
	ppmValue = ppm;
	//printf("CO2 in callback: %d\n", ppm);
}

void co2Reader_executeTask(void* self) {
     6a2:	ec 01       	movw	r28, r24
	for (;;) {
		co2Reader_measure((co2reader_t)self);
     6a4:	ce 01       	movw	r24, r28
     6a6:	9a df       	rcall	.-204    	; 0x5dc <co2Reader_measure>
     6a8:	fd cf       	rjmp	.-6      	; 0x6a4 <co2Reader_executeTask+0x2>

000006aa <co2Reader_getCO2>:
	}
}

uint16_t co2Reader_getCO2(co2reader_t self) {
	return self->value;
}
     6aa:	fc 01       	movw	r30, r24
     6ac:	80 81       	ld	r24, Z
     6ae:	91 81       	ldd	r25, Z+1	; 0x01
     6b0:	08 95       	ret

000006b2 <configuration_create>:
		xSemaphoreTake(_semaphore, portMAX_DELAY);
		_ventilation = value;
		xSemaphoreGive(_semaphore);
	}
	else _ventilation = value;
}
     6b2:	21 e0       	ldi	r18, 0x01	; 1
     6b4:	20 93 cd 03 	sts	0x03CD, r18	; 0x8003cd <_working>
     6b8:	10 92 cc 03 	sts	0x03CC, r1	; 0x8003cc <_ventilation>
     6bc:	90 93 cb 03 	sts	0x03CB, r25	; 0x8003cb <_semaphore+0x1>
     6c0:	80 93 ca 03 	sts	0x03CA, r24	; 0x8003ca <_semaphore>
     6c4:	08 95       	ret

000006c6 <configuration_getWorking>:
     6c6:	0f 93       	push	r16
     6c8:	cf 93       	push	r28
     6ca:	df 93       	push	r29
     6cc:	20 91 ca 03 	lds	r18, 0x03CA	; 0x8003ca <_semaphore>
     6d0:	30 91 cb 03 	lds	r19, 0x03CB	; 0x8003cb <_semaphore+0x1>
     6d4:	21 15       	cp	r18, r1
     6d6:	31 05       	cpc	r19, r1
     6d8:	b9 f0       	breq	.+46     	; 0x708 <configuration_getWorking+0x42>
     6da:	ec 01       	movw	r28, r24
     6dc:	4f ef       	ldi	r20, 0xFF	; 255
     6de:	5f ef       	ldi	r21, 0xFF	; 255
     6e0:	ba 01       	movw	r22, r20
     6e2:	c9 01       	movw	r24, r18
     6e4:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <xQueueSemaphoreTake>
     6e8:	80 91 cd 03 	lds	r24, 0x03CD	; 0x8003cd <_working>
     6ec:	88 83       	st	Y, r24
     6ee:	00 e0       	ldi	r16, 0x00	; 0
     6f0:	20 e0       	ldi	r18, 0x00	; 0
     6f2:	30 e0       	ldi	r19, 0x00	; 0
     6f4:	a9 01       	movw	r20, r18
     6f6:	60 e0       	ldi	r22, 0x00	; 0
     6f8:	70 e0       	ldi	r23, 0x00	; 0
     6fa:	80 91 ca 03 	lds	r24, 0x03CA	; 0x8003ca <_semaphore>
     6fe:	90 91 cb 03 	lds	r25, 0x03CB	; 0x8003cb <_semaphore+0x1>
     702:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <xQueueGenericSend>
     706:	04 c0       	rjmp	.+8      	; 0x710 <configuration_getWorking+0x4a>
     708:	20 91 cd 03 	lds	r18, 0x03CD	; 0x8003cd <_working>
     70c:	fc 01       	movw	r30, r24
     70e:	20 83       	st	Z, r18
     710:	df 91       	pop	r29
     712:	cf 91       	pop	r28
     714:	0f 91       	pop	r16
     716:	08 95       	ret

00000718 <configuration_getVentilation>:

void configuration_getVentilation(bool* ventilation) {
     718:	0f 93       	push	r16
     71a:	cf 93       	push	r28
     71c:	df 93       	push	r29
	if (_semaphore != NULL) {
     71e:	20 91 ca 03 	lds	r18, 0x03CA	; 0x8003ca <_semaphore>
     722:	30 91 cb 03 	lds	r19, 0x03CB	; 0x8003cb <_semaphore+0x1>
     726:	21 15       	cp	r18, r1
     728:	31 05       	cpc	r19, r1
     72a:	b9 f0       	breq	.+46     	; 0x75a <configuration_getVentilation+0x42>
     72c:	ec 01       	movw	r28, r24
		xSemaphoreTake(_semaphore, portMAX_DELAY);
     72e:	4f ef       	ldi	r20, 0xFF	; 255
     730:	5f ef       	ldi	r21, 0xFF	; 255
     732:	ba 01       	movw	r22, r20
     734:	c9 01       	movw	r24, r18
     736:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <xQueueSemaphoreTake>
		*ventilation = _ventilation;
     73a:	80 91 cc 03 	lds	r24, 0x03CC	; 0x8003cc <_ventilation>
     73e:	88 83       	st	Y, r24
		xSemaphoreGive(_semaphore);
     740:	00 e0       	ldi	r16, 0x00	; 0
     742:	20 e0       	ldi	r18, 0x00	; 0
     744:	30 e0       	ldi	r19, 0x00	; 0
     746:	a9 01       	movw	r20, r18
     748:	60 e0       	ldi	r22, 0x00	; 0
     74a:	70 e0       	ldi	r23, 0x00	; 0
     74c:	80 91 ca 03 	lds	r24, 0x03CA	; 0x8003ca <_semaphore>
     750:	90 91 cb 03 	lds	r25, 0x03CB	; 0x8003cb <_semaphore+0x1>
     754:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <xQueueGenericSend>
     758:	04 c0       	rjmp	.+8      	; 0x762 <configuration_getVentilation+0x4a>
	}
	else *ventilation = _ventilation;
     75a:	20 91 cc 03 	lds	r18, 0x03CC	; 0x8003cc <_ventilation>
     75e:	fc 01       	movw	r30, r24
     760:	20 83       	st	Z, r18
}
     762:	df 91       	pop	r29
     764:	cf 91       	pop	r28
     766:	0f 91       	pop	r16
     768:	08 95       	ret

0000076a <currentCondition_create>:
	//free(self->co2Data);
	//free(self->temperatureData);
	//free(self->humidityData);
	//free(self->soundData);
	//free(self);
	vPortFree(self);//maybe use this
     76a:	68 e0       	ldi	r22, 0x08	; 8
     76c:	70 e0       	ldi	r23, 0x00	; 0
     76e:	81 e0       	ldi	r24, 0x01	; 1
     770:	90 e0       	ldi	r25, 0x00	; 0
     772:	0e 94 9d 27 	call	0x4f3a	; 0x4f3a <calloc>
     776:	00 97       	sbiw	r24, 0x00	; 0
     778:	49 f0       	breq	.+18     	; 0x78c <currentCondition_create+0x22>
     77a:	fc 01       	movw	r30, r24
     77c:	13 82       	std	Z+3, r1	; 0x03
     77e:	12 82       	std	Z+2, r1	; 0x02
     780:	15 82       	std	Z+5, r1	; 0x05
     782:	14 82       	std	Z+4, r1	; 0x04
     784:	11 82       	std	Z+1, r1	; 0x01
     786:	10 82       	st	Z, r1
     788:	17 82       	std	Z+7, r1	; 0x07
     78a:	16 82       	std	Z+6, r1	; 0x06
     78c:	08 95       	ret

0000078e <currentCondition_setCO2>:
     78e:	00 97       	sbiw	r24, 0x00	; 0
     790:	19 f0       	breq	.+6      	; 0x798 <currentCondition_setCO2+0xa>
     792:	fc 01       	movw	r30, r24
     794:	71 83       	std	Z+1, r23	; 0x01
     796:	60 83       	st	Z, r22
     798:	08 95       	ret

0000079a <currentCondition_setHumidity>:
     79a:	00 97       	sbiw	r24, 0x00	; 0
     79c:	19 f0       	breq	.+6      	; 0x7a4 <currentCondition_setHumidity+0xa>
     79e:	fc 01       	movw	r30, r24
     7a0:	75 83       	std	Z+5, r23	; 0x05
     7a2:	64 83       	std	Z+4, r22	; 0x04
     7a4:	08 95       	ret

000007a6 <currentCondition_setTemperature>:
     7a6:	00 97       	sbiw	r24, 0x00	; 0
     7a8:	19 f0       	breq	.+6      	; 0x7b0 <currentCondition_setTemperature+0xa>
     7aa:	fc 01       	movw	r30, r24
     7ac:	73 83       	std	Z+3, r23	; 0x03
     7ae:	62 83       	std	Z+2, r22	; 0x02
     7b0:	08 95       	ret

000007b2 <currentCondition_setSound>:
     7b2:	00 97       	sbiw	r24, 0x00	; 0
     7b4:	19 f0       	breq	.+6      	; 0x7bc <currentCondition_setSound+0xa>
     7b6:	fc 01       	movw	r30, r24
     7b8:	77 83       	std	Z+7, r23	; 0x07
     7ba:	66 83       	std	Z+6, r22	; 0x06
     7bc:	08 95       	ret

000007be <getcurrentConditionPayload>:
}
lora_payload_t getcurrentConditionPayload(currentCondition_t self)
{
     7be:	fc 01       	movw	r30, r24
     7c0:	db 01       	movw	r26, r22
	lora_payload_t payload;
	payload.port_no = 1;
	payload.len = 8;
	
	payload.bytes[0] = self->temperatureData >> 8;
     7c2:	12 96       	adiw	r26, 0x02	; 2
     7c4:	6c 91       	ld	r22, X
     7c6:	12 97       	sbiw	r26, 0x02	; 2
     7c8:	13 96       	adiw	r26, 0x03	; 3
     7ca:	7c 91       	ld	r23, X
     7cc:	13 97       	sbiw	r26, 0x03	; 3
	payload.bytes[1] = self->temperatureData & 0xFF;

	payload.bytes[2] = self->humidityData >> 8;
     7ce:	14 96       	adiw	r26, 0x04	; 4
     7d0:	4c 91       	ld	r20, X
     7d2:	14 97       	sbiw	r26, 0x04	; 4
     7d4:	15 96       	adiw	r26, 0x05	; 5
     7d6:	5c 91       	ld	r21, X
     7d8:	15 97       	sbiw	r26, 0x05	; 5
	payload.bytes[3] = self->humidityData & 0xFF;
	
	payload.bytes[4] = self->co2Data >> 8;
     7da:	2c 91       	ld	r18, X
     7dc:	11 96       	adiw	r26, 0x01	; 1
     7de:	3c 91       	ld	r19, X
     7e0:	11 97       	sbiw	r26, 0x01	; 1
	payload.bytes[5] = self->co2Data & 0xFF;
	
	payload.bytes[6] = self->soundData >> 8;
     7e2:	16 96       	adiw	r26, 0x06	; 6
     7e4:	8c 91       	ld	r24, X
     7e6:	16 97       	sbiw	r26, 0x06	; 6
     7e8:	17 96       	adiw	r26, 0x07	; 7
     7ea:	9c 91       	ld	r25, X
	payload.bytes[7] = self->soundData & 0xFF;
	
	return payload;
     7ec:	a1 e0       	ldi	r26, 0x01	; 1
     7ee:	a0 83       	st	Z, r26
     7f0:	a8 e0       	ldi	r26, 0x08	; 8
     7f2:	a1 83       	std	Z+1, r26	; 0x01
     7f4:	72 83       	std	Z+2, r23	; 0x02
     7f6:	63 83       	std	Z+3, r22	; 0x03
     7f8:	54 83       	std	Z+4, r21	; 0x04
     7fa:	45 83       	std	Z+5, r20	; 0x05
     7fc:	36 83       	std	Z+6, r19	; 0x06
     7fe:	27 83       	std	Z+7, r18	; 0x07
     800:	90 87       	std	Z+8, r25	; 0x08
     802:	81 87       	std	Z+9, r24	; 0x09
	
     804:	cf 01       	movw	r24, r30
     806:	08 95       	ret

00000808 <device_create>:
//


currentCondition_t device_getCurrentCondition(device_t self) {
	return self->currentCondition;
}
     808:	2f 92       	push	r2
     80a:	3f 92       	push	r3
     80c:	4f 92       	push	r4
     80e:	5f 92       	push	r5
     810:	6f 92       	push	r6
     812:	7f 92       	push	r7
     814:	8f 92       	push	r8
     816:	9f 92       	push	r9
     818:	af 92       	push	r10
     81a:	bf 92       	push	r11
     81c:	cf 92       	push	r12
     81e:	df 92       	push	r13
     820:	ef 92       	push	r14
     822:	ff 92       	push	r15
     824:	0f 93       	push	r16
     826:	1f 93       	push	r17
     828:	cf 93       	push	r28
     82a:	df 93       	push	r29
     82c:	00 d0       	rcall	.+0      	; 0x82e <device_create+0x26>
     82e:	1f 92       	push	r1
     830:	cd b7       	in	r28, 0x3d	; 61
     832:	de b7       	in	r29, 0x3e	; 62
     834:	28 2e       	mov	r2, r24
     836:	36 2e       	mov	r3, r22
     838:	5c 83       	std	Y+4, r21	; 0x04
     83a:	4b 83       	std	Y+3, r20	; 0x03
     83c:	28 01       	movw	r4, r16
     83e:	39 01       	movw	r6, r18
     840:	6a e0       	ldi	r22, 0x0A	; 10
     842:	70 e0       	ldi	r23, 0x00	; 0
     844:	81 e0       	ldi	r24, 0x01	; 1
     846:	90 e0       	ldi	r25, 0x00	; 0
     848:	0e 94 9d 27 	call	0x4f3a	; 0x4f3a <calloc>
     84c:	9a 83       	std	Y+2, r25	; 0x02
     84e:	89 83       	std	Y+1, r24	; 0x01
     850:	00 97       	sbiw	r24, 0x00	; 0
     852:	09 f4       	brne	.+2      	; 0x856 <device_create+0x4e>
     854:	42 c0       	rjmp	.+132    	; 0x8da <device_create+0xd2>
     856:	fc 01       	movw	r30, r24
     858:	91 82       	std	Z+1, r9	; 0x01
     85a:	80 82       	st	Z, r8
     85c:	8a 8d       	ldd	r24, Y+26	; 0x1a
     85e:	9b 8d       	ldd	r25, Y+27	; 0x1b
     860:	93 83       	std	Z+3, r25	; 0x03
     862:	82 83       	std	Z+2, r24	; 0x02
     864:	8c 8d       	ldd	r24, Y+28	; 0x1c
     866:	9d 8d       	ldd	r25, Y+29	; 0x1d
     868:	95 83       	std	Z+5, r25	; 0x05
     86a:	84 83       	std	Z+4, r24	; 0x04
     86c:	7e df       	rcall	.-260    	; 0x76a <currentCondition_create>
     86e:	e9 81       	ldd	r30, Y+1	; 0x01
     870:	fa 81       	ldd	r31, Y+2	; 0x02
     872:	97 83       	std	Z+7, r25	; 0x07
     874:	86 83       	std	Z+6, r24	; 0x06
     876:	8b 81       	ldd	r24, Y+3	; 0x03
     878:	9c 81       	ldd	r25, Y+4	; 0x04
     87a:	90 93 f1 03 	sts	0x03F1, r25	; 0x8003f1 <_startMeasureEventGroup+0x1>
     87e:	80 93 f0 03 	sts	0x03F0, r24	; 0x8003f0 <_startMeasureEventGroup>
     882:	40 92 ec 03 	sts	0x03EC, r4	; 0x8003ec <_startMeasureBit>
     886:	50 92 ed 03 	sts	0x03ED, r5	; 0x8003ed <_startMeasureBit+0x1>
     88a:	60 92 ee 03 	sts	0x03EE, r6	; 0x8003ee <_startMeasureBit+0x2>
     88e:	70 92 ef 03 	sts	0x03EF, r7	; 0x8003ef <_startMeasureBit+0x3>
     892:	f0 92 eb 03 	sts	0x03EB, r15	; 0x8003eb <_readyEventGroup+0x1>
     896:	e0 92 ea 03 	sts	0x03EA, r14	; 0x8003ea <_readyEventGroup>
     89a:	a0 92 e6 03 	sts	0x03E6, r10	; 0x8003e6 <_readyBit>
     89e:	b0 92 e7 03 	sts	0x03E7, r11	; 0x8003e7 <_readyBit+0x1>
     8a2:	c0 92 e8 03 	sts	0x03E8, r12	; 0x8003e8 <_readyBit+0x2>
     8a6:	d0 92 e9 03 	sts	0x03E9, r13	; 0x8003e9 <_readyBit+0x3>
     8aa:	8e 8d       	ldd	r24, Y+30	; 0x1e
     8ac:	9f 8d       	ldd	r25, Y+31	; 0x1f
     8ae:	90 93 e5 03 	sts	0x03E5, r25	; 0x8003e5 <_uplinkmessageBuffer+0x1>
     8b2:	80 93 e4 03 	sts	0x03E4, r24	; 0x8003e4 <_uplinkmessageBuffer>
     8b6:	43 2d       	mov	r20, r3
     8b8:	50 e0       	ldi	r21, 0x00	; 0
     8ba:	7f 01       	movw	r14, r30
     8bc:	98 e0       	ldi	r25, 0x08	; 8
     8be:	e9 0e       	add	r14, r25
     8c0:	f1 1c       	adc	r15, r1
     8c2:	02 2d       	mov	r16, r2
     8c4:	9f 01       	movw	r18, r30
     8c6:	62 e9       	ldi	r22, 0x92	; 146
     8c8:	72 e0       	ldi	r23, 0x02	; 2
     8ca:	82 ea       	ldi	r24, 0xA2	; 162
     8cc:	95 e0       	ldi	r25, 0x05	; 5
     8ce:	0e 94 1a 12 	call	0x2434	; 0x2434 <xTaskCreate>
     8d2:	89 e9       	ldi	r24, 0x99	; 153
     8d4:	92 e0       	ldi	r25, 0x02	; 2
     8d6:	0e 94 54 29 	call	0x52a8	; 0x52a8 <puts>
     8da:	89 81       	ldd	r24, Y+1	; 0x01
     8dc:	9a 81       	ldd	r25, Y+2	; 0x02
     8de:	0f 90       	pop	r0
     8e0:	0f 90       	pop	r0
     8e2:	0f 90       	pop	r0
     8e4:	0f 90       	pop	r0
     8e6:	df 91       	pop	r29
     8e8:	cf 91       	pop	r28
     8ea:	1f 91       	pop	r17
     8ec:	0f 91       	pop	r16
     8ee:	ff 90       	pop	r15
     8f0:	ef 90       	pop	r14
     8f2:	df 90       	pop	r13
     8f4:	cf 90       	pop	r12
     8f6:	bf 90       	pop	r11
     8f8:	af 90       	pop	r10
     8fa:	9f 90       	pop	r9
     8fc:	8f 90       	pop	r8
     8fe:	7f 90       	pop	r7
     900:	6f 90       	pop	r6
     902:	5f 90       	pop	r5
     904:	4f 90       	pop	r4
     906:	3f 90       	pop	r3
     908:	2f 90       	pop	r2
     90a:	08 95       	ret

0000090c <device_setHumidityToCurrent>:

void device_setHumidityToCurrent(device_t self, uint16_t value)
{
	currentCondition_setHumidity(self->currentCondition,value);
     90c:	fc 01       	movw	r30, r24
     90e:	86 81       	ldd	r24, Z+6	; 0x06
     910:	97 81       	ldd	r25, Z+7	; 0x07
     912:	43 cf       	rjmp	.-378    	; 0x79a <currentCondition_setHumidity>
     914:	08 95       	ret

00000916 <device_getHumidityData>:
}


uint16_t device_getHumidityData(device_t self)
{
	if (self->humAndTempReader!=NULL)
     916:	fc 01       	movw	r30, r24
     918:	82 81       	ldd	r24, Z+2	; 0x02
     91a:	93 81       	ldd	r25, Z+3	; 0x03
     91c:	00 97       	sbiw	r24, 0x00	; 0
     91e:	11 f0       	breq	.+4      	; 0x924 <device_getHumidityData+0xe>
	{
		return humAndTempReader_getHumidity(self->humAndTempReader);
     920:	e6 c1       	rjmp	.+972    	; 0xcee <humAndTempReader_getHumidity>
     922:	08 95       	ret
	}
	else
	return -1;
     924:	8f ef       	ldi	r24, 0xFF	; 255
     926:	9f ef       	ldi	r25, 0xFF	; 255
}
     928:	08 95       	ret

0000092a <device_setCO2ToCurrent>:

void device_setCO2ToCurrent(device_t self, uint16_t value) {
	currentCondition_setCO2(self->currentCondition, value);
     92a:	fc 01       	movw	r30, r24
     92c:	86 81       	ldd	r24, Z+6	; 0x06
     92e:	97 81       	ldd	r25, Z+7	; 0x07
     930:	2e cf       	rjmp	.-420    	; 0x78e <currentCondition_setCO2>
     932:	08 95       	ret

00000934 <device_getCO2Data>:
}

uint16_t device_getCO2Data(device_t self) {
	if (self->co2reader != NULL)
     934:	fc 01       	movw	r30, r24
     936:	80 81       	ld	r24, Z
     938:	91 81       	ldd	r25, Z+1	; 0x01
     93a:	00 97       	sbiw	r24, 0x00	; 0
     93c:	11 f0       	breq	.+4      	; 0x942 <device_getCO2Data+0xe>
		return co2Reader_getCO2(self->co2reader);
     93e:	b5 ce       	rjmp	.-662    	; 0x6aa <co2Reader_getCO2>
     940:	08 95       	ret
	else return -1;
     942:	8f ef       	ldi	r24, 0xFF	; 255
     944:	9f ef       	ldi	r25, 0xFF	; 255
}
     946:	08 95       	ret

00000948 <device_setSoundToCurrent>:

void device_setSoundToCurrent(device_t self, uint16_t value) {
	currentCondition_setSound(self->currentCondition, value);
     948:	fc 01       	movw	r30, r24
     94a:	86 81       	ldd	r24, Z+6	; 0x06
     94c:	97 81       	ldd	r25, Z+7	; 0x07
     94e:	31 cf       	rjmp	.-414    	; 0x7b2 <currentCondition_setSound>
     950:	08 95       	ret

00000952 <device_getSoundData>:
}

uint16_t device_getSoundData(device_t self) {
	if (self->soundReader != NULL)
     952:	fc 01       	movw	r30, r24
     954:	84 81       	ldd	r24, Z+4	; 0x04
     956:	95 81       	ldd	r25, Z+5	; 0x05
     958:	00 97       	sbiw	r24, 0x00	; 0
     95a:	11 f0       	breq	.+4      	; 0x960 <device_getSoundData+0xe>
	return soundReader_getSound(self->soundReader);
     95c:	97 c2       	rjmp	.+1326   	; 0xe8c <soundReader_getSound>
     95e:	08 95       	ret
	else return -1;
     960:	8f ef       	ldi	r24, 0xFF	; 255
     962:	9f ef       	ldi	r25, 0xFF	; 255
}
     964:	08 95       	ret

00000966 <device_setTemperatureToCurrent>:

void device_setTemperatureToCurrent(device_t self, int16_t value)
{
	
	currentCondition_setTemperature(self->currentCondition,value);
     966:	fc 01       	movw	r30, r24
     968:	86 81       	ldd	r24, Z+6	; 0x06
     96a:	97 81       	ldd	r25, Z+7	; 0x07
     96c:	1c cf       	rjmp	.-456    	; 0x7a6 <currentCondition_setTemperature>
     96e:	08 95       	ret

00000970 <device_getTemperatureData>:
}


int16_t device_getTemperatureData(device_t self)
{
	if (self->humAndTempReader!=NULL)
     970:	fc 01       	movw	r30, r24
     972:	82 81       	ldd	r24, Z+2	; 0x02
     974:	93 81       	ldd	r25, Z+3	; 0x03
     976:	00 97       	sbiw	r24, 0x00	; 0
     978:	11 f0       	breq	.+4      	; 0x97e <device_getTemperatureData+0xe>
	{
		return humAndTempReader_getTemperature(self->humAndTempReader);
     97a:	bd c1       	rjmp	.+890    	; 0xcf6 <humAndTempReader_getTemperature>
     97c:	08 95       	ret
	}
	else
	return -1;
     97e:	8f ef       	ldi	r24, 0xFF	; 255
     980:	9f ef       	ldi	r25, 0xFF	; 255
	
     982:	08 95       	ret

00000984 <device_startMeasuring>:
}




void device_startMeasuring(device_t self) {
     984:	af 92       	push	r10
     986:	bf 92       	push	r11
     988:	cf 92       	push	r12
     98a:	df 92       	push	r13
     98c:	ef 92       	push	r14
     98e:	ff 92       	push	r15
     990:	0f 93       	push	r16
     992:	1f 93       	push	r17
     994:	cf 93       	push	r28
     996:	df 93       	push	r29
     998:	cd b7       	in	r28, 0x3d	; 61
     99a:	de b7       	in	r29, 0x3e	; 62
     99c:	66 97       	sbiw	r28, 0x16	; 22
     99e:	0f b6       	in	r0, 0x3f	; 63
     9a0:	f8 94       	cli
     9a2:	de bf       	out	0x3e, r29	; 62
     9a4:	0f be       	out	0x3f, r0	; 63
     9a6:	cd bf       	out	0x3d, r28	; 61
     9a8:	5c 01       	movw	r10, r24
	//we should first check if device is on, get that from lora and add new eventBit 
	
	bool* works = pvPortMalloc(sizeof(bool));
     9aa:	81 e0       	ldi	r24, 0x01	; 1
     9ac:	90 e0       	ldi	r25, 0x00	; 0
     9ae:	3b d4       	rcall	.+2166   	; 0x1226 <pvPortMalloc>
     9b0:	8c 01       	movw	r16, r24
	configuration_getWorking(works);
     9b2:	89 de       	rcall	.-750    	; 0x6c6 <configuration_getWorking>
     9b4:	f8 01       	movw	r30, r16
	if (*works == true)
     9b6:	80 81       	ld	r24, Z
     9b8:	88 23       	and	r24, r24
     9ba:	09 f4       	brne	.+2      	; 0x9be <device_startMeasuring+0x3a>
     9bc:	ac c0       	rjmp	.+344    	; 0xb16 <device_startMeasuring+0x192>
     9be:	81 e0       	ldi	r24, 0x01	; 1
	{

		bool* ventilate = pvPortMalloc(sizeof(bool));
     9c0:	90 e0       	ldi	r25, 0x00	; 0
     9c2:	31 d4       	rcall	.+2146   	; 0x1226 <pvPortMalloc>
     9c4:	8c 01       	movw	r16, r24
		configuration_getVentilation(ventilate);
     9c6:	a8 de       	rcall	.-688    	; 0x718 <configuration_getVentilation>
     9c8:	f8 01       	movw	r30, r16
		if(*ventilate == true)
     9ca:	80 81       	ld	r24, Z
     9cc:	88 23       	and	r24, r24
		{
			servo_open();
     9ce:	11 f0       	breq	.+4      	; 0x9d4 <device_startMeasuring+0x50>
     9d0:	99 d1       	rcall	.+818    	; 0xd04 <servo_open>
     9d2:	01 c0       	rjmp	.+2      	; 0x9d6 <device_startMeasuring+0x52>
		} 
		else
		{
			servo_close();
     9d4:	9c d1       	rcall	.+824    	; 0xd0e <servo_close>
     9d6:	40 91 ec 03 	lds	r20, 0x03EC	; 0x8003ec <_startMeasureBit>
		}

	////tell sensors to start meassuring 
	xEventGroupSetBits(_startMeasureEventGroup, _startMeasureBit);
     9da:	50 91 ed 03 	lds	r21, 0x03ED	; 0x8003ed <_startMeasureBit+0x1>
     9de:	60 91 ee 03 	lds	r22, 0x03EE	; 0x8003ee <_startMeasureBit+0x2>
     9e2:	70 91 ef 03 	lds	r23, 0x03EF	; 0x8003ef <_startMeasureBit+0x3>
     9e6:	80 91 f0 03 	lds	r24, 0x03F0	; 0x8003f0 <_startMeasureEventGroup>
     9ea:	90 91 f1 03 	lds	r25, 0x03F1	; 0x8003f1 <_startMeasureEventGroup+0x1>
     9ee:	35 d3       	rcall	.+1642   	; 0x105a <xEventGroupSetBits>
     9f0:	83 ea       	ldi	r24, 0xA3	; 163
	printf("device has set bits\n");
     9f2:	92 e0       	ldi	r25, 0x02	; 2
     9f4:	0e 94 54 29 	call	0x52a8	; 0x52a8 <puts>
     9f8:	40 91 e6 03 	lds	r20, 0x03E6	; 0x8003e6 <_readyBit>

	//wait for sensors to read data
	EventBits_t uxBits = xEventGroupWaitBits(_readyEventGroup, //eventGroup it is interested in
     9fc:	50 91 e7 03 	lds	r21, 0x03E7	; 0x8003e7 <_readyBit+0x1>
     a00:	60 91 e8 03 	lds	r22, 0x03E8	; 0x8003e8 <_readyBit+0x2>
     a04:	70 91 e9 03 	lds	r23, 0x03E9	; 0x8003e9 <_readyBit+0x3>
     a08:	cc 24       	eor	r12, r12
     a0a:	ca 94       	dec	r12
     a0c:	dc 2c       	mov	r13, r12
     a0e:	76 01       	movw	r14, r12
     a10:	01 e0       	ldi	r16, 0x01	; 1
     a12:	21 e0       	ldi	r18, 0x01	; 1
     a14:	80 91 ea 03 	lds	r24, 0x03EA	; 0x8003ea <_readyEventGroup>
     a18:	90 91 eb 03 	lds	r25, 0x03EB	; 0x8003eb <_readyEventGroup+0x1>
     a1c:	5e d2       	rcall	.+1212   	; 0xeda <xEventGroupWaitBits>
     a1e:	00 91 e6 03 	lds	r16, 0x03E6	; 0x8003e6 <_readyBit>
		_readyBit, //bits it is interested in
		pdTRUE, //clears the bits 
		pdTRUE, //waits for both bits to be set
		portMAX_DELAY); //waits forever if needed
	
	if ((uxBits & (_readyBit)) == (_readyBit)) {
     a22:	10 91 e7 03 	lds	r17, 0x03E7	; 0x8003e7 <_readyBit+0x1>
     a26:	20 91 e8 03 	lds	r18, 0x03E8	; 0x8003e8 <_readyBit+0x2>
     a2a:	30 91 e9 03 	lds	r19, 0x03E9	; 0x8003e9 <_readyBit+0x3>
     a2e:	dc 01       	movw	r26, r24
     a30:	cb 01       	movw	r24, r22
     a32:	80 23       	and	r24, r16
     a34:	91 23       	and	r25, r17
     a36:	a2 23       	and	r26, r18
     a38:	b3 23       	and	r27, r19
     a3a:	08 17       	cp	r16, r24
     a3c:	19 07       	cpc	r17, r25
     a3e:	2a 07       	cpc	r18, r26
     a40:	3b 07       	cpc	r19, r27
     a42:	09 f0       	breq	.+2      	; 0xa46 <device_startMeasuring+0xc2>
		device_setCO2ToCurrent(self, device_getCO2Data(self));
     a44:	6e c0       	rjmp	.+220    	; 0xb22 <device_startMeasuring+0x19e>
     a46:	c5 01       	movw	r24, r10
     a48:	75 df       	rcall	.-278    	; 0x934 <device_getCO2Data>
     a4a:	bc 01       	movw	r22, r24
     a4c:	c5 01       	movw	r24, r10
		device_setSoundToCurrent(self,device_getSoundData(self));
     a4e:	6d df       	rcall	.-294    	; 0x92a <device_setCO2ToCurrent>
     a50:	c5 01       	movw	r24, r10
     a52:	7f df       	rcall	.-258    	; 0x952 <device_getSoundData>
     a54:	bc 01       	movw	r22, r24
     a56:	c5 01       	movw	r24, r10
		
		device_setTemperatureToCurrent(self, device_getTemperatureData(self));
     a58:	77 df       	rcall	.-274    	; 0x948 <device_setSoundToCurrent>
     a5a:	c5 01       	movw	r24, r10
     a5c:	89 df       	rcall	.-238    	; 0x970 <device_getTemperatureData>
     a5e:	bc 01       	movw	r22, r24
     a60:	c5 01       	movw	r24, r10
     a62:	81 df       	rcall	.-254    	; 0x966 <device_setTemperatureToCurrent>
		device_setHumidityToCurrent(self, device_getHumidityData(self));
     a64:	c5 01       	movw	r24, r10
     a66:	57 df       	rcall	.-338    	; 0x916 <device_getHumidityData>
     a68:	bc 01       	movw	r22, r24
     a6a:	c5 01       	movw	r24, r10
     a6c:	4f df       	rcall	.-354    	; 0x90c <device_setHumidityToCurrent>
     a6e:	87 eb       	ldi	r24, 0xB7	; 183
		
		printf("device got done bit\n");
     a70:	92 e0       	ldi	r25, 0x02	; 2
     a72:	0e 94 54 29 	call	0x52a8	; 0x52a8 <puts>
     a76:	c5 01       	movw	r24, r10
		
		printf("CO2 is: %u\n", device_getCO2Data(self));
     a78:	5d df       	rcall	.-326    	; 0x934 <device_getCO2Data>
     a7a:	9f 93       	push	r25
     a7c:	8f 93       	push	r24
     a7e:	8b ec       	ldi	r24, 0xCB	; 203
     a80:	92 e0       	ldi	r25, 0x02	; 2
     a82:	9f 93       	push	r25
     a84:	8f 93       	push	r24
     a86:	0e 94 41 29 	call	0x5282	; 0x5282 <printf>
     a8a:	c5 01       	movw	r24, r10
		printf("Temperature is: %d\n", device_getTemperatureData(self));
     a8c:	71 df       	rcall	.-286    	; 0x970 <device_getTemperatureData>
     a8e:	9f 93       	push	r25
     a90:	8f 93       	push	r24
     a92:	87 ed       	ldi	r24, 0xD7	; 215
     a94:	92 e0       	ldi	r25, 0x02	; 2
     a96:	9f 93       	push	r25
     a98:	8f 93       	push	r24
     a9a:	0e 94 41 29 	call	0x5282	; 0x5282 <printf>
     a9e:	c5 01       	movw	r24, r10
		printf("Humidity is: %u\n", device_getHumidityData(self));
     aa0:	3a df       	rcall	.-396    	; 0x916 <device_getHumidityData>
     aa2:	9f 93       	push	r25
     aa4:	8f 93       	push	r24
     aa6:	8b ee       	ldi	r24, 0xEB	; 235
     aa8:	92 e0       	ldi	r25, 0x02	; 2
     aaa:	9f 93       	push	r25
     aac:	8f 93       	push	r24
     aae:	0e 94 41 29 	call	0x5282	; 0x5282 <printf>
     ab2:	c5 01       	movw	r24, r10
		printf("Sound is: %u\n", device_getSoundData(self));
     ab4:	4e df       	rcall	.-356    	; 0x952 <device_getSoundData>
     ab6:	9f 93       	push	r25
     ab8:	8f 93       	push	r24
     aba:	8c ef       	ldi	r24, 0xFC	; 252
     abc:	92 e0       	ldi	r25, 0x02	; 2
     abe:	9f 93       	push	r25
     ac0:	8f 93       	push	r24
     ac2:	0e 94 41 29 	call	0x5282	; 0x5282 <printf>
     ac6:	f5 01       	movw	r30, r10
     ac8:	66 81       	ldd	r22, Z+6	; 0x06
		
		/*Perhaps loraPayload is not a good idea to be here*/
		_uplink_payload = getcurrentConditionPayload(self->currentCondition);
     aca:	77 81       	ldd	r23, Z+7	; 0x07
     acc:	ce 01       	movw	r24, r28
     ace:	01 96       	adiw	r24, 0x01	; 1
     ad0:	76 de       	rcall	.-788    	; 0x7be <getcurrentConditionPayload>
     ad2:	86 e1       	ldi	r24, 0x16	; 22
     ad4:	fe 01       	movw	r30, r28
     ad6:	31 96       	adiw	r30, 0x01	; 1
     ad8:	ae ec       	ldi	r26, 0xCE	; 206
     ada:	b3 e0       	ldi	r27, 0x03	; 3
     adc:	01 90       	ld	r0, Z+
     ade:	0d 92       	st	X+, r0
     ae0:	8a 95       	dec	r24
     ae2:	e1 f7       	brne	.-8      	; 0xadc <device_startMeasuring+0x158>
     ae4:	68 ee       	ldi	r22, 0xE8	; 232
     ae6:	73 e0       	ldi	r23, 0x03	; 3
     ae8:	80 e0       	ldi	r24, 0x00	; 0
		vTaskDelay(1000);
     aea:	90 e0       	ldi	r25, 0x00	; 0
     aec:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <vTaskDelay>
     af0:	0f ef       	ldi	r16, 0xFF	; 255
     af2:	1f ef       	ldi	r17, 0xFF	; 255
     af4:	98 01       	movw	r18, r16
	
		xMessageBufferSend(_uplinkmessageBuffer,(void*) &_uplink_payload,sizeof(_uplink_payload),portMAX_DELAY);
     af6:	46 e1       	ldi	r20, 0x16	; 22
     af8:	50 e0       	ldi	r21, 0x00	; 0
     afa:	6e ec       	ldi	r22, 0xCE	; 206
     afc:	73 e0       	ldi	r23, 0x03	; 3
     afe:	80 91 e4 03 	lds	r24, 0x03E4	; 0x8003e4 <_uplinkmessageBuffer>
     b02:	90 91 e5 03 	lds	r25, 0x03E5	; 0x8003e5 <_uplinkmessageBuffer+0x1>
     b06:	0e 94 92 10 	call	0x2124	; 0x2124 <xStreamBufferSend>
     b0a:	0f b6       	in	r0, 0x3f	; 63
     b0c:	f8 94       	cli
     b0e:	de bf       	out	0x3e, r29	; 62
     b10:	0f be       	out	0x3f, r0	; 63
     b12:	cd bf       	out	0x3d, r28	; 61
     b14:	06 c0       	rjmp	.+12     	; 0xb22 <device_startMeasuring+0x19e>
     b16:	68 e8       	ldi	r22, 0x88	; 136
     b18:	73 e1       	ldi	r23, 0x13	; 19
     b1a:	80 e0       	ldi	r24, 0x00	; 0
		
		
	}
	//if the device is not on, wait a bit and check if anything is changed
	}
	else vTaskDelay(5000);
     b1c:	90 e0       	ldi	r25, 0x00	; 0
     b1e:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <vTaskDelay>
     b22:	66 96       	adiw	r28, 0x16	; 22
     b24:	0f b6       	in	r0, 0x3f	; 63
     b26:	f8 94       	cli
}
     b28:	de bf       	out	0x3e, r29	; 62
     b2a:	0f be       	out	0x3f, r0	; 63
     b2c:	cd bf       	out	0x3d, r28	; 61
     b2e:	df 91       	pop	r29
     b30:	cf 91       	pop	r28
     b32:	1f 91       	pop	r17
     b34:	0f 91       	pop	r16
     b36:	ff 90       	pop	r15
     b38:	ef 90       	pop	r14
     b3a:	df 90       	pop	r13
     b3c:	cf 90       	pop	r12
     b3e:	bf 90       	pop	r11
     b40:	af 90       	pop	r10
     b42:	08 95       	ret

00000b44 <device_executeTask>:
     b44:	ec 01       	movw	r28, r24
     b46:	ce 01       	movw	r24, r28
     b48:	1d df       	rcall	.-454    	; 0x984 <device_startMeasuring>

//devided so we can test
void device_executeTask(void* self) {
	for (;;)
	{
		device_startMeasuring((device_t)self);
     b4a:	fd cf       	rjmp	.-6      	; 0xb46 <device_executeTask+0x2>

00000b4c <humAndTempReader_create>:
void humAndTempReader_destroy(humAndTempReader_t self) {
	if (self == NULL)
	return;

	//delete will clear the allocated memory to the task + we need to remove everything else
	vTaskDelete(self->handleTask);
     b4c:	2f 92       	push	r2
     b4e:	3f 92       	push	r3
     b50:	4f 92       	push	r4
     b52:	5f 92       	push	r5
     b54:	6f 92       	push	r6
     b56:	7f 92       	push	r7
     b58:	8f 92       	push	r8
     b5a:	9f 92       	push	r9
     b5c:	af 92       	push	r10
     b5e:	bf 92       	push	r11
     b60:	cf 92       	push	r12
     b62:	df 92       	push	r13
     b64:	ef 92       	push	r14
     b66:	ff 92       	push	r15
     b68:	0f 93       	push	r16
     b6a:	1f 93       	push	r17
     b6c:	cf 93       	push	r28
     b6e:	df 93       	push	r29
     b70:	88 2e       	mov	r8, r24
     b72:	96 2e       	mov	r9, r22
     b74:	1a 01       	movw	r2, r20
     b76:	28 01       	movw	r4, r16
     b78:	39 01       	movw	r6, r18
     b7a:	66 e0       	ldi	r22, 0x06	; 6
     b7c:	70 e0       	ldi	r23, 0x00	; 0
     b7e:	81 e0       	ldi	r24, 0x01	; 1
     b80:	90 e0       	ldi	r25, 0x00	; 0
     b82:	0e 94 9d 27 	call	0x4f3a	; 0x4f3a <calloc>
     b86:	ec 01       	movw	r28, r24
     b88:	00 97       	sbiw	r24, 0x00	; 0
     b8a:	71 f1       	breq	.+92     	; 0xbe8 <humAndTempReader_create+0x9c>
     b8c:	19 82       	std	Y+1, r1	; 0x01
     b8e:	18 82       	st	Y, r1
     b90:	1b 82       	std	Y+3, r1	; 0x03
     b92:	1a 82       	std	Y+2, r1	; 0x02
     b94:	30 92 fd 03 	sts	0x03FD, r3	; 0x8003fd <_startMeasureEventGroup+0x1>
     b98:	20 92 fc 03 	sts	0x03FC, r2	; 0x8003fc <_startMeasureEventGroup>
     b9c:	40 92 f8 03 	sts	0x03F8, r4	; 0x8003f8 <_startMeasureBit>
     ba0:	50 92 f9 03 	sts	0x03F9, r5	; 0x8003f9 <_startMeasureBit+0x1>
     ba4:	60 92 fa 03 	sts	0x03FA, r6	; 0x8003fa <_startMeasureBit+0x2>
     ba8:	70 92 fb 03 	sts	0x03FB, r7	; 0x8003fb <_startMeasureBit+0x3>
     bac:	f0 92 f7 03 	sts	0x03F7, r15	; 0x8003f7 <_readyEventGroup+0x1>
     bb0:	e0 92 f6 03 	sts	0x03F6, r14	; 0x8003f6 <_readyEventGroup>
     bb4:	a0 92 f2 03 	sts	0x03F2, r10	; 0x8003f2 <_readyBit>
     bb8:	b0 92 f3 03 	sts	0x03F3, r11	; 0x8003f3 <_readyBit+0x1>
     bbc:	c0 92 f4 03 	sts	0x03F4, r12	; 0x8003f4 <_readyBit+0x2>
     bc0:	d0 92 f5 03 	sts	0x03F5, r13	; 0x8003f5 <_readyBit+0x3>
     bc4:	49 2d       	mov	r20, r9
     bc6:	50 e0       	ldi	r21, 0x00	; 0
     bc8:	7c 01       	movw	r14, r24
     bca:	84 e0       	ldi	r24, 0x04	; 4
     bcc:	e8 0e       	add	r14, r24
     bce:	f1 1c       	adc	r15, r1
     bd0:	08 2d       	mov	r16, r8
     bd2:	9e 01       	movw	r18, r28
     bd4:	6a e0       	ldi	r22, 0x0A	; 10
     bd6:	73 e0       	ldi	r23, 0x03	; 3
     bd8:	83 e7       	ldi	r24, 0x73	; 115
     bda:	96 e0       	ldi	r25, 0x06	; 6
     bdc:	0e 94 1a 12 	call	0x2434	; 0x2434 <xTaskCreate>
     be0:	8b e1       	ldi	r24, 0x1B	; 27
     be2:	93 e0       	ldi	r25, 0x03	; 3
     be4:	0e 94 54 29 	call	0x52a8	; 0x52a8 <puts>
     be8:	ce 01       	movw	r24, r28
     bea:	df 91       	pop	r29
     bec:	cf 91       	pop	r28
     bee:	1f 91       	pop	r17
     bf0:	0f 91       	pop	r16
     bf2:	ff 90       	pop	r15
     bf4:	ef 90       	pop	r14
     bf6:	df 90       	pop	r13
     bf8:	cf 90       	pop	r12
     bfa:	bf 90       	pop	r11
     bfc:	af 90       	pop	r10
     bfe:	9f 90       	pop	r9
     c00:	8f 90       	pop	r8
     c02:	7f 90       	pop	r7
     c04:	6f 90       	pop	r6
     c06:	5f 90       	pop	r5
     c08:	4f 90       	pop	r4
     c0a:	3f 90       	pop	r3
     c0c:	2f 90       	pop	r2
     c0e:	08 95       	ret

00000c10 <humAndTempReader_measure>:
	//free(self);
}



void humAndTempReader_measure(humAndTempReader_t self) {//dummy
     c10:	cf 92       	push	r12
     c12:	df 92       	push	r13
     c14:	ef 92       	push	r14
     c16:	ff 92       	push	r15
     c18:	0f 93       	push	r16
     c1a:	1f 93       	push	r17
     c1c:	cf 93       	push	r28
     c1e:	df 93       	push	r29
     c20:	ec 01       	movw	r28, r24
	EventBits_t uxBits = xEventGroupWaitBits(_startMeasureEventGroup, //eventGroup
     c22:	40 91 f8 03 	lds	r20, 0x03F8	; 0x8003f8 <_startMeasureBit>
     c26:	50 91 f9 03 	lds	r21, 0x03F9	; 0x8003f9 <_startMeasureBit+0x1>
     c2a:	60 91 fa 03 	lds	r22, 0x03FA	; 0x8003fa <_startMeasureBit+0x2>
     c2e:	70 91 fb 03 	lds	r23, 0x03FB	; 0x8003fb <_startMeasureBit+0x3>
     c32:	cc 24       	eor	r12, r12
     c34:	ca 94       	dec	r12
     c36:	dc 2c       	mov	r13, r12
     c38:	76 01       	movw	r14, r12
     c3a:	01 e0       	ldi	r16, 0x01	; 1
     c3c:	21 e0       	ldi	r18, 0x01	; 1
     c3e:	80 91 fc 03 	lds	r24, 0x03FC	; 0x8003fc <_startMeasureEventGroup>
     c42:	90 91 fd 03 	lds	r25, 0x03FD	; 0x8003fd <_startMeasureEventGroup+0x1>
     c46:	49 d1       	rcall	.+658    	; 0xeda <xEventGroupWaitBits>
	_startMeasureBit, //bits it is interested i
	pdTRUE, //clears the bits
	pdTRUE, //waits for both bits to be set
	portMAX_DELAY); //wait

	if ((uxBits & (_startMeasureBit)) == (_startMeasureBit)) {
     c48:	00 91 f8 03 	lds	r16, 0x03F8	; 0x8003f8 <_startMeasureBit>
     c4c:	10 91 f9 03 	lds	r17, 0x03F9	; 0x8003f9 <_startMeasureBit+0x1>
     c50:	20 91 fa 03 	lds	r18, 0x03FA	; 0x8003fa <_startMeasureBit+0x2>
     c54:	30 91 fb 03 	lds	r19, 0x03FB	; 0x8003fb <_startMeasureBit+0x3>
     c58:	dc 01       	movw	r26, r24
     c5a:	cb 01       	movw	r24, r22
     c5c:	80 23       	and	r24, r16
     c5e:	91 23       	and	r25, r17
     c60:	a2 23       	and	r26, r18
     c62:	b3 23       	and	r27, r19
     c64:	08 17       	cp	r16, r24
     c66:	19 07       	cpc	r17, r25
     c68:	2a 07       	cpc	r18, r26
     c6a:	3b 07       	cpc	r19, r27
     c6c:	99 f5       	brne	.+102    	; 0xcd4 <humAndTempReader_measure+0xc4>
		hih8120Wakeup();
     c6e:	0e 94 8e 1c 	call	0x391c	; 0x391c <hih8120Wakeup>
		vTaskDelay(50);
     c72:	62 e3       	ldi	r22, 0x32	; 50
     c74:	70 e0       	ldi	r23, 0x00	; 0
     c76:	80 e0       	ldi	r24, 0x00	; 0
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <vTaskDelay>
		hih8120Meassure();
     c7e:	0e 94 a2 1c 	call	0x3944	; 0x3944 <hih8120Meassure>
		vTaskDelay(5);
     c82:	65 e0       	ldi	r22, 0x05	; 5
     c84:	70 e0       	ldi	r23, 0x00	; 0
     c86:	80 e0       	ldi	r24, 0x00	; 0
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <vTaskDelay>
		if(hih8120IsReady())
     c8e:	0e 94 8b 1c 	call	0x3916	; 0x3916 <hih8120IsReady>
     c92:	88 23       	and	r24, r24
     c94:	61 f0       	breq	.+24     	; 0xcae <humAndTempReader_measure+0x9e>
		{
			self->humidity = hih8120GetHumidityPercent_x10();
     c96:	0e 94 c7 1c 	call	0x398e	; 0x398e <hih8120GetHumidityPercent_x10>
     c9a:	99 83       	std	Y+1, r25	; 0x01
     c9c:	88 83       	st	Y, r24
			self->temperature = hih8120GetTemperature_x10();
     c9e:	0e 94 ed 1c 	call	0x39da	; 0x39da <hih8120GetTemperature_x10>
     ca2:	9b 83       	std	Y+3, r25	; 0x03
     ca4:	8a 83       	std	Y+2, r24	; 0x02
			printf("humidity and temperature done bit set\n");
     ca6:	8a e3       	ldi	r24, 0x3A	; 58
     ca8:	93 e0       	ldi	r25, 0x03	; 3
     caa:	0e 94 54 29 	call	0x52a8	; 0x52a8 <puts>
			
		}
		
		vTaskDelay(5000);
     cae:	68 e8       	ldi	r22, 0x88	; 136
     cb0:	73 e1       	ldi	r23, 0x13	; 19
     cb2:	80 e0       	ldi	r24, 0x00	; 0
     cb4:	90 e0       	ldi	r25, 0x00	; 0
     cb6:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <vTaskDelay>
		//set done bit so that device knows meassurement is done
		xEventGroupSetBits(_readyEventGroup, _readyBit);
     cba:	40 91 f2 03 	lds	r20, 0x03F2	; 0x8003f2 <_readyBit>
     cbe:	50 91 f3 03 	lds	r21, 0x03F3	; 0x8003f3 <_readyBit+0x1>
     cc2:	60 91 f4 03 	lds	r22, 0x03F4	; 0x8003f4 <_readyBit+0x2>
     cc6:	70 91 f5 03 	lds	r23, 0x03F5	; 0x8003f5 <_readyBit+0x3>
     cca:	80 91 f6 03 	lds	r24, 0x03F6	; 0x8003f6 <_readyEventGroup>
     cce:	90 91 f7 03 	lds	r25, 0x03F7	; 0x8003f7 <_readyEventGroup+0x1>
     cd2:	c3 d1       	rcall	.+902    	; 0x105a <xEventGroupSetBits>
	}
}
     cd4:	df 91       	pop	r29
     cd6:	cf 91       	pop	r28
     cd8:	1f 91       	pop	r17
     cda:	0f 91       	pop	r16
     cdc:	ff 90       	pop	r15
     cde:	ef 90       	pop	r14
     ce0:	df 90       	pop	r13
     ce2:	cf 90       	pop	r12
     ce4:	08 95       	ret

00000ce6 <humAndTempReader_executeTask>:
	int16_t temperature;
	TaskHandle_t handleTask;
}humidityAndTemperature;

//actual task, methods devided so that it is possible to test
void humAndTempReader_executeTask(void* self) {
     ce6:	ec 01       	movw	r28, r24
	for (;;) {
		humAndTempReader_measure((humAndTempReader_t)self);
     ce8:	ce 01       	movw	r24, r28
     cea:	92 df       	rcall	.-220    	; 0xc10 <humAndTempReader_measure>
     cec:	fd cf       	rjmp	.-6      	; 0xce8 <humAndTempReader_executeTask+0x2>

00000cee <humAndTempReader_getHumidity>:
	}
}

uint16_t humAndTempReader_getHumidity(humAndTempReader_t self){
	return self->humidity;
}
     cee:	fc 01       	movw	r30, r24
     cf0:	80 81       	ld	r24, Z
     cf2:	91 81       	ldd	r25, Z+1	; 0x01
     cf4:	08 95       	ret

00000cf6 <humAndTempReader_getTemperature>:

int16_t humAndTempReader_getTemperature(humAndTempReader_t self){
	return self->temperature;
}
     cf6:	fc 01       	movw	r30, r24
     cf8:	82 81       	ldd	r24, Z+2	; 0x02
     cfa:	93 81       	ldd	r25, Z+3	; 0x03
     cfc:	08 95       	ret

00000cfe <servo_initialise>:
#include "Servo.h"


void servo_initialise()
{
	rcServoCreate();		
     cfe:	0c 94 c1 1f 	jmp	0x3f82	; 0x3f82 <rcServoCreate>
     d02:	08 95       	ret

00000d04 <servo_open>:
	//printf("Servo is up\n");
}

void servo_open()
{
	rcServoSet(0, 100);
     d04:	64 e6       	ldi	r22, 0x64	; 100
     d06:	80 e0       	ldi	r24, 0x00	; 0
     d08:	0c 94 a9 1f 	jmp	0x3f52	; 0x3f52 <rcServoSet>
     d0c:	08 95       	ret

00000d0e <servo_close>:
}
void servo_close()
{
	rcServoSet(0, -100);
     d0e:	6c e9       	ldi	r22, 0x9C	; 156
     d10:	80 e0       	ldi	r24, 0x00	; 0
     d12:	0c 94 a9 1f 	jmp	0x3f52	; 0x3f52 <rcServoSet>
     d16:	08 95       	ret

00000d18 <soundReader_create>:
}



//	RETURN TO DESTROY METHODS
void soundReader_destroy(soundReader_t self) {
     d18:	2f 92       	push	r2
     d1a:	3f 92       	push	r3
     d1c:	4f 92       	push	r4
     d1e:	5f 92       	push	r5
     d20:	6f 92       	push	r6
     d22:	7f 92       	push	r7
     d24:	8f 92       	push	r8
     d26:	9f 92       	push	r9
     d28:	af 92       	push	r10
     d2a:	bf 92       	push	r11
     d2c:	cf 92       	push	r12
     d2e:	df 92       	push	r13
     d30:	ef 92       	push	r14
     d32:	ff 92       	push	r15
     d34:	0f 93       	push	r16
     d36:	1f 93       	push	r17
     d38:	cf 93       	push	r28
     d3a:	df 93       	push	r29
     d3c:	88 2e       	mov	r8, r24
     d3e:	96 2e       	mov	r9, r22
     d40:	1a 01       	movw	r2, r20
     d42:	28 01       	movw	r4, r16
     d44:	39 01       	movw	r6, r18
     d46:	64 e0       	ldi	r22, 0x04	; 4
     d48:	70 e0       	ldi	r23, 0x00	; 0
     d4a:	81 e0       	ldi	r24, 0x01	; 1
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	0e 94 9d 27 	call	0x4f3a	; 0x4f3a <calloc>
     d52:	ec 01       	movw	r28, r24
     d54:	00 97       	sbiw	r24, 0x00	; 0
     d56:	51 f1       	breq	.+84     	; 0xdac <soundReader_create+0x94>
     d58:	fc 01       	movw	r30, r24
     d5a:	11 92       	st	Z+, r1
     d5c:	11 92       	st	Z+, r1
     d5e:	30 92 09 04 	sts	0x0409, r3	; 0x800409 <_startMeasureEventGroup+0x1>
     d62:	20 92 08 04 	sts	0x0408, r2	; 0x800408 <_startMeasureEventGroup>
     d66:	40 92 04 04 	sts	0x0404, r4	; 0x800404 <_startMeasureBit>
     d6a:	50 92 05 04 	sts	0x0405, r5	; 0x800405 <_startMeasureBit+0x1>
     d6e:	60 92 06 04 	sts	0x0406, r6	; 0x800406 <_startMeasureBit+0x2>
     d72:	70 92 07 04 	sts	0x0407, r7	; 0x800407 <_startMeasureBit+0x3>
     d76:	f0 92 03 04 	sts	0x0403, r15	; 0x800403 <_readyEventGroup+0x1>
     d7a:	e0 92 02 04 	sts	0x0402, r14	; 0x800402 <_readyEventGroup>
     d7e:	a0 92 fe 03 	sts	0x03FE, r10	; 0x8003fe <_readyBit>
     d82:	b0 92 ff 03 	sts	0x03FF, r11	; 0x8003ff <_readyBit+0x1>
     d86:	c0 92 00 04 	sts	0x0400, r12	; 0x800400 <_readyBit+0x2>
     d8a:	d0 92 01 04 	sts	0x0401, r13	; 0x800401 <_readyBit+0x3>
     d8e:	49 2d       	mov	r20, r9
     d90:	50 e0       	ldi	r21, 0x00	; 0
     d92:	7f 01       	movw	r14, r30
     d94:	08 2d       	mov	r16, r8
     d96:	9c 01       	movw	r18, r24
     d98:	60 e6       	ldi	r22, 0x60	; 96
     d9a:	73 e0       	ldi	r23, 0x03	; 3
     d9c:	82 e4       	ldi	r24, 0x42	; 66
     d9e:	97 e0       	ldi	r25, 0x07	; 7
     da0:	0e 94 1a 12 	call	0x2434	; 0x2434 <xTaskCreate>
     da4:	8c e6       	ldi	r24, 0x6C	; 108
     da6:	93 e0       	ldi	r25, 0x03	; 3
     da8:	0e 94 54 29 	call	0x52a8	; 0x52a8 <puts>
     dac:	ce 01       	movw	r24, r28
     dae:	df 91       	pop	r29
     db0:	cf 91       	pop	r28
     db2:	1f 91       	pop	r17
     db4:	0f 91       	pop	r16
     db6:	ff 90       	pop	r15
     db8:	ef 90       	pop	r14
     dba:	df 90       	pop	r13
     dbc:	cf 90       	pop	r12
     dbe:	bf 90       	pop	r11
     dc0:	af 90       	pop	r10
     dc2:	9f 90       	pop	r9
     dc4:	8f 90       	pop	r8
     dc6:	7f 90       	pop	r7
     dc8:	6f 90       	pop	r6
     dca:	5f 90       	pop	r5
     dcc:	4f 90       	pop	r4
     dce:	3f 90       	pop	r3
     dd0:	2f 90       	pop	r2
     dd2:	08 95       	ret

00000dd4 <soundReader_measure>:
}

//actual task, methods devided so that it is possible to test


void soundReader_measure(soundReader_t self) {
     dd4:	cf 92       	push	r12
     dd6:	df 92       	push	r13
     dd8:	ef 92       	push	r14
     dda:	ff 92       	push	r15
     ddc:	0f 93       	push	r16
     dde:	1f 93       	push	r17
     de0:	cf 93       	push	r28
     de2:	df 93       	push	r29
     de4:	ec 01       	movw	r28, r24
	
	EventBits_t uxBits = xEventGroupWaitBits(_startMeasureEventGroup, //eventGroup
     de6:	40 91 04 04 	lds	r20, 0x0404	; 0x800404 <_startMeasureBit>
     dea:	50 91 05 04 	lds	r21, 0x0405	; 0x800405 <_startMeasureBit+0x1>
     dee:	60 91 06 04 	lds	r22, 0x0406	; 0x800406 <_startMeasureBit+0x2>
     df2:	70 91 07 04 	lds	r23, 0x0407	; 0x800407 <_startMeasureBit+0x3>
     df6:	cc 24       	eor	r12, r12
     df8:	ca 94       	dec	r12
     dfa:	dc 2c       	mov	r13, r12
     dfc:	76 01       	movw	r14, r12
     dfe:	01 e0       	ldi	r16, 0x01	; 1
     e00:	21 e0       	ldi	r18, 0x01	; 1
     e02:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <_startMeasureEventGroup>
     e06:	90 91 09 04 	lds	r25, 0x0409	; 0x800409 <_startMeasureEventGroup+0x1>
     e0a:	67 d0       	rcall	.+206    	; 0xeda <xEventGroupWaitBits>
	_startMeasureBit, //bits it is interested in
	pdTRUE, //clears the bits
	pdTRUE, //waits for both bits to be set
	portMAX_DELAY); //wait

	if ((uxBits & (_startMeasureBit)) == (_startMeasureBit)) {
     e0c:	00 91 04 04 	lds	r16, 0x0404	; 0x800404 <_startMeasureBit>
     e10:	10 91 05 04 	lds	r17, 0x0405	; 0x800405 <_startMeasureBit+0x1>
     e14:	20 91 06 04 	lds	r18, 0x0406	; 0x800406 <_startMeasureBit+0x2>
     e18:	30 91 07 04 	lds	r19, 0x0407	; 0x800407 <_startMeasureBit+0x3>
     e1c:	dc 01       	movw	r26, r24
     e1e:	cb 01       	movw	r24, r22
     e20:	80 23       	and	r24, r16
     e22:	91 23       	and	r25, r17
     e24:	a2 23       	and	r26, r18
     e26:	b3 23       	and	r27, r19
     e28:	08 17       	cp	r16, r24
     e2a:	19 07       	cpc	r17, r25
     e2c:	2a 07       	cpc	r18, r26
     e2e:	3b 07       	cpc	r19, r27
     e30:	01 f5       	brne	.+64     	; 0xe72 <soundReader_measure+0x9e>

		
		srand(time(NULL));
     e32:	80 e0       	ldi	r24, 0x00	; 0
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	56 db       	rcall	.-2388   	; 0x4e4 <time>
     e38:	cb 01       	movw	r24, r22
     e3a:	0e 94 22 29 	call	0x5244	; 0x5244 <srand>
		self->value = rand()%105 + 15;
     e3e:	0e 94 1f 29 	call	0x523e	; 0x523e <rand>
     e42:	69 e6       	ldi	r22, 0x69	; 105
     e44:	70 e0       	ldi	r23, 0x00	; 0
     e46:	0e 94 4c 27 	call	0x4e98	; 0x4e98 <__divmodhi4>
     e4a:	0f 96       	adiw	r24, 0x0f	; 15
     e4c:	99 83       	std	Y+1, r25	; 0x01
     e4e:	88 83       	st	Y, r24
		//self->value = rand()%(120-15+1)+15;
		
		
		//set done bit so that device knows measurement is done
		xEventGroupSetBits(_readyEventGroup, _readyBit);
     e50:	40 91 fe 03 	lds	r20, 0x03FE	; 0x8003fe <_readyBit>
     e54:	50 91 ff 03 	lds	r21, 0x03FF	; 0x8003ff <_readyBit+0x1>
     e58:	60 91 00 04 	lds	r22, 0x0400	; 0x800400 <_readyBit+0x2>
     e5c:	70 91 01 04 	lds	r23, 0x0401	; 0x800401 <_readyBit+0x3>
     e60:	80 91 02 04 	lds	r24, 0x0402	; 0x800402 <_readyEventGroup>
     e64:	90 91 03 04 	lds	r25, 0x0403	; 0x800403 <_readyEventGroup+0x1>
     e68:	f8 d0       	rcall	.+496    	; 0x105a <xEventGroupSetBits>
		printf("SoundReader done bit set\n");
     e6a:	8b e7       	ldi	r24, 0x7B	; 123
     e6c:	93 e0       	ldi	r25, 0x03	; 3
     e6e:	0e 94 54 29 	call	0x52a8	; 0x52a8 <puts>
	}
}
     e72:	df 91       	pop	r29
     e74:	cf 91       	pop	r28
     e76:	1f 91       	pop	r17
     e78:	0f 91       	pop	r16
     e7a:	ff 90       	pop	r15
     e7c:	ef 90       	pop	r14
     e7e:	df 90       	pop	r13
     e80:	cf 90       	pop	r12
     e82:	08 95       	ret

00000e84 <soundReader_executeTask>:
	TaskHandle_t handleTask;
}soundReader;



void soundReader_executeTask(void* self) {
     e84:	ec 01       	movw	r28, r24
	for (;;) {
		soundReader_measure((soundReader_t)self);
     e86:	ce 01       	movw	r24, r28
     e88:	a5 df       	rcall	.-182    	; 0xdd4 <soundReader_measure>
     e8a:	fd cf       	rjmp	.-6      	; 0xe86 <soundReader_executeTask+0x2>

00000e8c <soundReader_getSound>:
	}
}

uint16_t soundReader_getSound(soundReader_t self) {
	return self->value;
}
     e8c:	fc 01       	movw	r30, r24
     e8e:	80 81       	ld	r24, Z
     e90:	91 81       	ldd	r25, Z+1	; 0x01
     e92:	08 95       	ret

00000e94 <task_switch_in>:
	void task_switch_in(uint8_t task_no) {
		 #ifdef HAL_DEFS_H_

		 #else
		 // Used on VIA MEGA Shield rev. 2.0.0
		 PORTK &= 0b11110000;
     e94:	e8 e0       	ldi	r30, 0x08	; 8
     e96:	f1 e0       	ldi	r31, 0x01	; 1
     e98:	90 81       	ld	r25, Z
     e9a:	90 7f       	andi	r25, 0xF0	; 240
     e9c:	90 83       	st	Z, r25
		 PORTK |= (task_no & 0b00001111);
     e9e:	90 81       	ld	r25, Z
     ea0:	8f 70       	andi	r24, 0x0F	; 15
     ea2:	98 2b       	or	r25, r24
     ea4:	90 83       	st	Z, r25
     ea6:	08 95       	ret

00000ea8 <task_switch_out>:
	void task_switch_out(uint8_t task_no) {
		#ifdef HAL_DEFS_H_

		#else
		// Used on VIA MEGA Shield rev. 2.0.0
		PORTK &= 0b11110000;
     ea8:	e8 e0       	ldi	r30, 0x08	; 8
     eaa:	f1 e0       	ldi	r31, 0x01	; 1
     eac:	80 81       	ld	r24, Z
     eae:	80 7f       	andi	r24, 0xF0	; 240
     eb0:	80 83       	st	Z, r24
     eb2:	08 95       	ret

00000eb4 <xEventGroupCreate>:
        uxReturn = pxEventBits->uxEventBits;
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
     eb4:	cf 93       	push	r28
     eb6:	df 93       	push	r29
     eb8:	80 e1       	ldi	r24, 0x10	; 16
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	b4 d1       	rcall	.+872    	; 0x1226 <pvPortMalloc>
     ebe:	ec 01       	movw	r28, r24
     ec0:	00 97       	sbiw	r24, 0x00	; 0
     ec2:	39 f0       	breq	.+14     	; 0xed2 <xEventGroupCreate+0x1e>
     ec4:	fc 01       	movw	r30, r24
     ec6:	11 92       	st	Z+, r1
     ec8:	11 92       	st	Z+, r1
     eca:	11 92       	st	Z+, r1
     ecc:	11 92       	st	Z+, r1
     ece:	cf 01       	movw	r24, r30
     ed0:	94 d2       	rcall	.+1320   	; 0x13fa <vListInitialise>
     ed2:	ce 01       	movw	r24, r28
     ed4:	df 91       	pop	r29
     ed6:	cf 91       	pop	r28
     ed8:	08 95       	ret

00000eda <xEventGroupWaitBits>:
     eda:	2f 92       	push	r2
     edc:	3f 92       	push	r3
     ede:	4f 92       	push	r4
     ee0:	5f 92       	push	r5
     ee2:	6f 92       	push	r6
     ee4:	7f 92       	push	r7
     ee6:	8f 92       	push	r8
     ee8:	9f 92       	push	r9
     eea:	af 92       	push	r10
     eec:	bf 92       	push	r11
     eee:	cf 92       	push	r12
     ef0:	df 92       	push	r13
     ef2:	ef 92       	push	r14
     ef4:	ff 92       	push	r15
     ef6:	0f 93       	push	r16
     ef8:	1f 93       	push	r17
     efa:	cf 93       	push	r28
     efc:	df 93       	push	r29
     efe:	ec 01       	movw	r28, r24
     f00:	4a 01       	movw	r8, r20
     f02:	5b 01       	movw	r10, r22
     f04:	62 2e       	mov	r6, r18
     f06:	70 2e       	mov	r7, r16
     f08:	0e 94 74 13 	call	0x26e8	; 0x26e8 <vTaskSuspendAll>
     f0c:	28 80       	ld	r2, Y
     f0e:	39 80       	ldd	r3, Y+1	; 0x01
     f10:	4a 80       	ldd	r4, Y+2	; 0x02
     f12:	5b 80       	ldd	r5, Y+3	; 0x03
     f14:	01 11       	cpse	r16, r1
     f16:	0d c0       	rjmp	.+26     	; 0xf32 <xEventGroupWaitBits+0x58>
     f18:	81 e0       	ldi	r24, 0x01	; 1
     f1a:	b2 01       	movw	r22, r4
     f1c:	a1 01       	movw	r20, r2
     f1e:	48 21       	and	r20, r8
     f20:	59 21       	and	r21, r9
     f22:	6a 21       	and	r22, r10
     f24:	7b 21       	and	r23, r11
     f26:	45 2b       	or	r20, r21
     f28:	46 2b       	or	r20, r22
     f2a:	47 2b       	or	r20, r23
     f2c:	79 f4       	brne	.+30     	; 0xf4c <xEventGroupWaitBits+0x72>
     f2e:	80 e0       	ldi	r24, 0x00	; 0
     f30:	0d c0       	rjmp	.+26     	; 0xf4c <xEventGroupWaitBits+0x72>
     f32:	81 e0       	ldi	r24, 0x01	; 1
     f34:	b2 01       	movw	r22, r4
     f36:	a1 01       	movw	r20, r2
     f38:	48 21       	and	r20, r8
     f3a:	59 21       	and	r21, r9
     f3c:	6a 21       	and	r22, r10
     f3e:	7b 21       	and	r23, r11
     f40:	48 15       	cp	r20, r8
     f42:	59 05       	cpc	r21, r9
     f44:	6a 05       	cpc	r22, r10
     f46:	7b 05       	cpc	r23, r11
     f48:	09 f0       	breq	.+2      	; 0xf4c <xEventGroupWaitBits+0x72>
     f4a:	80 e0       	ldi	r24, 0x00	; 0
     f4c:	88 23       	and	r24, r24
     f4e:	81 f0       	breq	.+32     	; 0xf70 <xEventGroupWaitBits+0x96>
     f50:	66 20       	and	r6, r6
     f52:	09 f4       	brne	.+2      	; 0xf56 <xEventGroupWaitBits+0x7c>
     f54:	6b c0       	rjmp	.+214    	; 0x102c <xEventGroupWaitBits+0x152>
     f56:	80 94       	com	r8
     f58:	90 94       	com	r9
     f5a:	a0 94       	com	r10
     f5c:	b0 94       	com	r11
     f5e:	82 20       	and	r8, r2
     f60:	93 20       	and	r9, r3
     f62:	a4 20       	and	r10, r4
     f64:	b5 20       	and	r11, r5
     f66:	88 82       	st	Y, r8
     f68:	99 82       	std	Y+1, r9	; 0x01
     f6a:	aa 82       	std	Y+2, r10	; 0x02
     f6c:	bb 82       	std	Y+3, r11	; 0x03
     f6e:	5e c0       	rjmp	.+188    	; 0x102c <xEventGroupWaitBits+0x152>
     f70:	c1 14       	cp	r12, r1
     f72:	d1 04       	cpc	r13, r1
     f74:	e1 04       	cpc	r14, r1
     f76:	f1 04       	cpc	r15, r1
     f78:	09 f4       	brne	.+2      	; 0xf7c <xEventGroupWaitBits+0xa2>
     f7a:	58 c0       	rjmp	.+176    	; 0x102c <xEventGroupWaitBits+0x152>
     f7c:	66 20       	and	r6, r6
     f7e:	29 f0       	breq	.+10     	; 0xf8a <xEventGroupWaitBits+0xb0>
     f80:	40 e0       	ldi	r20, 0x00	; 0
     f82:	50 e0       	ldi	r21, 0x00	; 0
     f84:	60 e0       	ldi	r22, 0x00	; 0
     f86:	71 e0       	ldi	r23, 0x01	; 1
     f88:	03 c0       	rjmp	.+6      	; 0xf90 <xEventGroupWaitBits+0xb6>
     f8a:	40 e0       	ldi	r20, 0x00	; 0
     f8c:	50 e0       	ldi	r21, 0x00	; 0
     f8e:	ba 01       	movw	r22, r20
     f90:	71 10       	cpse	r7, r1
     f92:	74 60       	ori	r23, 0x04	; 4
     f94:	48 29       	or	r20, r8
     f96:	59 29       	or	r21, r9
     f98:	6a 29       	or	r22, r10
     f9a:	7b 29       	or	r23, r11
     f9c:	97 01       	movw	r18, r14
     f9e:	86 01       	movw	r16, r12
     fa0:	ce 01       	movw	r24, r28
     fa2:	04 96       	adiw	r24, 0x04	; 4
     fa4:	0e 94 88 15 	call	0x2b10	; 0x2b10 <vTaskPlaceOnUnorderedEventList>
     fa8:	0e 94 5d 14 	call	0x28ba	; 0x28ba <xTaskResumeAll>
     fac:	81 11       	cpse	r24, r1
     fae:	01 c0       	rjmp	.+2      	; 0xfb2 <xEventGroupWaitBits+0xd8>
     fb0:	6c d3       	rcall	.+1752   	; 0x168a <vPortYield>
     fb2:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <uxTaskResetEventItemValue>
     fb6:	91 fd       	sbrc	r25, 1
     fb8:	35 c0       	rjmp	.+106    	; 0x1024 <xEventGroupWaitBits+0x14a>
     fba:	0f b6       	in	r0, 0x3f	; 63
     fbc:	f8 94       	cli
     fbe:	0f 92       	push	r0
     fc0:	68 81       	ld	r22, Y
     fc2:	79 81       	ldd	r23, Y+1	; 0x01
     fc4:	8a 81       	ldd	r24, Y+2	; 0x02
     fc6:	9b 81       	ldd	r25, Y+3	; 0x03
     fc8:	71 10       	cpse	r7, r1
     fca:	0d c0       	rjmp	.+26     	; 0xfe6 <xEventGroupWaitBits+0x10c>
     fcc:	21 e0       	ldi	r18, 0x01	; 1
     fce:	75 01       	movw	r14, r10
     fd0:	64 01       	movw	r12, r8
     fd2:	c6 22       	and	r12, r22
     fd4:	d7 22       	and	r13, r23
     fd6:	e8 22       	and	r14, r24
     fd8:	f9 22       	and	r15, r25
     fda:	cd 28       	or	r12, r13
     fdc:	ce 28       	or	r12, r14
     fde:	cf 28       	or	r12, r15
     fe0:	79 f4       	brne	.+30     	; 0x1000 <xEventGroupWaitBits+0x126>
     fe2:	20 e0       	ldi	r18, 0x00	; 0
     fe4:	0d c0       	rjmp	.+26     	; 0x1000 <xEventGroupWaitBits+0x126>
     fe6:	21 e0       	ldi	r18, 0x01	; 1
     fe8:	75 01       	movw	r14, r10
     fea:	64 01       	movw	r12, r8
     fec:	c6 22       	and	r12, r22
     fee:	d7 22       	and	r13, r23
     ff0:	e8 22       	and	r14, r24
     ff2:	f9 22       	and	r15, r25
     ff4:	c8 14       	cp	r12, r8
     ff6:	d9 04       	cpc	r13, r9
     ff8:	ea 04       	cpc	r14, r10
     ffa:	fb 04       	cpc	r15, r11
     ffc:	09 f0       	breq	.+2      	; 0x1000 <xEventGroupWaitBits+0x126>
     ffe:	20 e0       	ldi	r18, 0x00	; 0
    1000:	22 23       	and	r18, r18
    1002:	71 f0       	breq	.+28     	; 0x1020 <xEventGroupWaitBits+0x146>
    1004:	66 20       	and	r6, r6
    1006:	61 f0       	breq	.+24     	; 0x1020 <xEventGroupWaitBits+0x146>
    1008:	80 94       	com	r8
    100a:	90 94       	com	r9
    100c:	a0 94       	com	r10
    100e:	b0 94       	com	r11
    1010:	86 22       	and	r8, r22
    1012:	97 22       	and	r9, r23
    1014:	a8 22       	and	r10, r24
    1016:	b9 22       	and	r11, r25
    1018:	88 82       	st	Y, r8
    101a:	99 82       	std	Y+1, r9	; 0x01
    101c:	aa 82       	std	Y+2, r10	; 0x02
    101e:	bb 82       	std	Y+3, r11	; 0x03
    1020:	0f 90       	pop	r0
    1022:	0f be       	out	0x3f, r0	; 63
    1024:	1b 01       	movw	r2, r22
    1026:	2c 01       	movw	r4, r24
    1028:	55 24       	eor	r5, r5
    102a:	02 c0       	rjmp	.+4      	; 0x1030 <xEventGroupWaitBits+0x156>
    102c:	0e 94 5d 14 	call	0x28ba	; 0x28ba <xTaskResumeAll>
    1030:	c2 01       	movw	r24, r4
    1032:	b1 01       	movw	r22, r2
    1034:	df 91       	pop	r29
    1036:	cf 91       	pop	r28
    1038:	1f 91       	pop	r17
    103a:	0f 91       	pop	r16
    103c:	ff 90       	pop	r15
    103e:	ef 90       	pop	r14
    1040:	df 90       	pop	r13
    1042:	cf 90       	pop	r12
    1044:	bf 90       	pop	r11
    1046:	af 90       	pop	r10
    1048:	9f 90       	pop	r9
    104a:	8f 90       	pop	r8
    104c:	7f 90       	pop	r7
    104e:	6f 90       	pop	r6
    1050:	5f 90       	pop	r5
    1052:	4f 90       	pop	r4
    1054:	3f 90       	pop	r3
    1056:	2f 90       	pop	r2
    1058:	08 95       	ret

0000105a <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
    105a:	4f 92       	push	r4
    105c:	5f 92       	push	r5
    105e:	6f 92       	push	r6
    1060:	7f 92       	push	r7
    1062:	8f 92       	push	r8
    1064:	9f 92       	push	r9
    1066:	af 92       	push	r10
    1068:	bf 92       	push	r11
    106a:	cf 92       	push	r12
    106c:	df 92       	push	r13
    106e:	ef 92       	push	r14
    1070:	ff 92       	push	r15
    1072:	0f 93       	push	r16
    1074:	1f 93       	push	r17
    1076:	cf 93       	push	r28
    1078:	df 93       	push	r29
    107a:	ec 01       	movw	r28, r24
    107c:	6a 01       	movw	r12, r20
    107e:	7b 01       	movw	r14, r22
    itself. */
    configASSERT( xEventGroup );
    configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

    pxList = &( pxEventBits->xTasksWaitingForBits );
    pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1080:	8c 01       	movw	r16, r24
    1082:	09 5f       	subi	r16, 0xF9	; 249
    1084:	1f 4f       	sbci	r17, 0xFF	; 255
    vTaskSuspendAll();
    1086:	0e 94 74 13 	call	0x26e8	; 0x26e8 <vTaskSuspendAll>
    {
        traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

        pxListItem = listGET_HEAD_ENTRY( pxList );
    108a:	eb 85       	ldd	r30, Y+11	; 0x0b
    108c:	fc 85       	ldd	r31, Y+12	; 0x0c

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;
    108e:	88 81       	ld	r24, Y
    1090:	99 81       	ldd	r25, Y+1	; 0x01
    1092:	aa 81       	ldd	r26, Y+2	; 0x02
    1094:	bb 81       	ldd	r27, Y+3	; 0x03
    1096:	c8 2a       	or	r12, r24
    1098:	d9 2a       	or	r13, r25
    109a:	ea 2a       	or	r14, r26
    109c:	fb 2a       	or	r15, r27
    109e:	c8 82       	st	Y, r12
    10a0:	d9 82       	std	Y+1, r13	; 0x01
    10a2:	ea 82       	std	Y+2, r14	; 0x02
    10a4:	fb 82       	std	Y+3, r15	; 0x03

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
    10a6:	0e 17       	cp	r16, r30
    10a8:	1f 07       	cpc	r17, r31
    10aa:	09 f4       	brne	.+2      	; 0x10ae <xEventGroupSetBits+0x54>
    10ac:	45 c0       	rjmp	.+138    	; 0x1138 <xEventGroupSetBits+0xde>
    10ae:	c1 2c       	mov	r12, r1
    10b0:	d1 2c       	mov	r13, r1
    10b2:	76 01       	movw	r14, r12
            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
                {
                    xMatchFound = pdTRUE;
    10b4:	99 24       	eor	r9, r9
    10b6:	93 94       	inc	r9
    10b8:	81 2c       	mov	r8, r1
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
    10ba:	a4 80       	ldd	r10, Z+4	; 0x04
    10bc:	b5 80       	ldd	r11, Z+5	; 0x05
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
    10be:	80 81       	ld	r24, Z
    10c0:	91 81       	ldd	r25, Z+1	; 0x01
    10c2:	a2 81       	ldd	r26, Z+2	; 0x02
    10c4:	b3 81       	ldd	r27, Z+3	; 0x03
            xMatchFound = pdFALSE;

            /* Split the bits waited for from the control bits. */
            uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
            uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
    10c6:	ac 01       	movw	r20, r24
    10c8:	bd 01       	movw	r22, r26
    10ca:	77 27       	eor	r23, r23

            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
    10cc:	b2 fd       	sbrc	r27, 2
    10ce:	0f c0       	rjmp	.+30     	; 0x10ee <xEventGroupSetBits+0x94>
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
                {
                    xMatchFound = pdTRUE;
    10d0:	48 80       	ld	r4, Y
    10d2:	59 80       	ldd	r5, Y+1	; 0x01
    10d4:	6a 80       	ldd	r6, Y+2	; 0x02
    10d6:	7b 80       	ldd	r7, Y+3	; 0x03
    10d8:	44 22       	and	r4, r20
    10da:	55 22       	and	r5, r21
    10dc:	66 22       	and	r6, r22
    10de:	77 22       	and	r7, r23
    10e0:	29 2d       	mov	r18, r9
    10e2:	45 28       	or	r4, r5
    10e4:	46 28       	or	r4, r6
    10e6:	47 28       	or	r4, r7
    10e8:	89 f4       	brne	.+34     	; 0x110c <xEventGroupSetBits+0xb2>
    10ea:	28 2d       	mov	r18, r8
    10ec:	0f c0       	rjmp	.+30     	; 0x110c <xEventGroupSetBits+0xb2>
    10ee:	48 80       	ld	r4, Y
    10f0:	59 80       	ldd	r5, Y+1	; 0x01
    10f2:	6a 80       	ldd	r6, Y+2	; 0x02
    10f4:	7b 80       	ldd	r7, Y+3	; 0x03
    10f6:	44 22       	and	r4, r20
    10f8:	55 22       	and	r5, r21
    10fa:	66 22       	and	r6, r22
    10fc:	77 22       	and	r7, r23
    10fe:	29 2d       	mov	r18, r9
    1100:	44 16       	cp	r4, r20
    1102:	55 06       	cpc	r5, r21
    1104:	66 06       	cpc	r6, r22
    1106:	77 06       	cpc	r7, r23
    1108:	09 f0       	breq	.+2      	; 0x110c <xEventGroupSetBits+0xb2>
    110a:	28 2d       	mov	r18, r8
            else
            {
                /* Need all bits to be set, but not all the bits were set. */
            }

            if( xMatchFound != pdFALSE )
    110c:	22 23       	and	r18, r18
    110e:	71 f0       	breq	.+28     	; 0x112c <xEventGroupSetBits+0xd2>
            {
                /* The bits match.  Should the bits be cleared on exit? */
                if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
    1110:	b0 ff       	sbrs	r27, 0
    1112:	04 c0       	rjmp	.+8      	; 0x111c <xEventGroupSetBits+0xc2>
                {
                    uxBitsToClear |= uxBitsWaitedFor;
    1114:	c4 2a       	or	r12, r20
    1116:	d5 2a       	or	r13, r21
    1118:	e6 2a       	or	r14, r22
    111a:	f7 2a       	or	r15, r23
                /* Store the actual event flag value in the task's event list
                item before removing the task from the event list.  The
                eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                that is was unblocked due to its required bits matching, rather
                than because it timed out. */
                vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
    111c:	48 81       	ld	r20, Y
    111e:	59 81       	ldd	r21, Y+1	; 0x01
    1120:	6a 81       	ldd	r22, Y+2	; 0x02
    1122:	7b 81       	ldd	r23, Y+3	; 0x03
    1124:	72 60       	ori	r23, 0x02	; 2
    1126:	cf 01       	movw	r24, r30
    1128:	0e 94 0e 16 	call	0x2c1c	; 0x2c1c <vTaskRemoveFromUnorderedEventList>
    112c:	ea 2d       	mov	r30, r10
    112e:	fb 2d       	mov	r31, r11

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
    1130:	0e 17       	cp	r16, r30
    1132:	1f 07       	cpc	r17, r31
    1134:	11 f6       	brne	.-124    	; 0x10ba <xEventGroupSetBits+0x60>
    1136:	03 c0       	rjmp	.+6      	; 0x113e <xEventGroupSetBits+0xe4>
EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
    1138:	c1 2c       	mov	r12, r1
    113a:	d1 2c       	mov	r13, r1
    113c:	76 01       	movw	r14, r12
            pxListItem = pxNext;
        }

        /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
        bit was set in the control word. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
    113e:	c0 94       	com	r12
    1140:	d0 94       	com	r13
    1142:	e0 94       	com	r14
    1144:	f0 94       	com	r15
    1146:	88 81       	ld	r24, Y
    1148:	99 81       	ldd	r25, Y+1	; 0x01
    114a:	aa 81       	ldd	r26, Y+2	; 0x02
    114c:	bb 81       	ldd	r27, Y+3	; 0x03
    114e:	c8 22       	and	r12, r24
    1150:	d9 22       	and	r13, r25
    1152:	ea 22       	and	r14, r26
    1154:	fb 22       	and	r15, r27
    1156:	c8 82       	st	Y, r12
    1158:	d9 82       	std	Y+1, r13	; 0x01
    115a:	ea 82       	std	Y+2, r14	; 0x02
    115c:	fb 82       	std	Y+3, r15	; 0x03
    }
    ( void ) xTaskResumeAll();
    115e:	0e 94 5d 14 	call	0x28ba	; 0x28ba <xTaskResumeAll>

    return pxEventBits->uxEventBits;
    1162:	68 81       	ld	r22, Y
    1164:	79 81       	ldd	r23, Y+1	; 0x01
    1166:	8a 81       	ldd	r24, Y+2	; 0x02
    1168:	9b 81       	ldd	r25, Y+3	; 0x03
}
    116a:	df 91       	pop	r29
    116c:	cf 91       	pop	r28
    116e:	1f 91       	pop	r17
    1170:	0f 91       	pop	r16
    1172:	ff 90       	pop	r15
    1174:	ef 90       	pop	r14
    1176:	df 90       	pop	r13
    1178:	cf 90       	pop	r12
    117a:	bf 90       	pop	r11
    117c:	af 90       	pop	r10
    117e:	9f 90       	pop	r9
    1180:	8f 90       	pop	r8
    1182:	7f 90       	pop	r7
    1184:	6f 90       	pop	r6
    1186:	5f 90       	pop	r5
    1188:	4f 90       	pop	r4
    118a:	08 95       	ret

0000118c <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
    118c:	cf 93       	push	r28
    118e:	df 93       	push	r29
    1190:	dc 01       	movw	r26, r24
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
    1192:	e2 e1       	ldi	r30, 0x12	; 18
    1194:	f4 e0       	ldi	r31, 0x04	; 4
    1196:	01 c0       	rjmp	.+2      	; 0x119a <prvInsertBlockIntoFreeList+0xe>
    1198:	f9 01       	movw	r30, r18
    119a:	20 81       	ld	r18, Z
    119c:	31 81       	ldd	r19, Z+1	; 0x01
    119e:	2a 17       	cp	r18, r26
    11a0:	3b 07       	cpc	r19, r27
    11a2:	d0 f3       	brcs	.-12     	; 0x1198 <prvInsertBlockIntoFreeList+0xc>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
    11a4:	82 81       	ldd	r24, Z+2	; 0x02
    11a6:	93 81       	ldd	r25, Z+3	; 0x03
    11a8:	af 01       	movw	r20, r30
    11aa:	48 0f       	add	r20, r24
    11ac:	59 1f       	adc	r21, r25
    11ae:	a4 17       	cp	r26, r20
    11b0:	b5 07       	cpc	r27, r21
    11b2:	49 f4       	brne	.+18     	; 0x11c6 <prvInsertBlockIntoFreeList+0x3a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
    11b4:	12 96       	adiw	r26, 0x02	; 2
    11b6:	4d 91       	ld	r20, X+
    11b8:	5c 91       	ld	r21, X
    11ba:	13 97       	sbiw	r26, 0x03	; 3
    11bc:	84 0f       	add	r24, r20
    11be:	95 1f       	adc	r25, r21
    11c0:	93 83       	std	Z+3, r25	; 0x03
    11c2:	82 83       	std	Z+2, r24	; 0x02
    11c4:	df 01       	movw	r26, r30
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
    11c6:	12 96       	adiw	r26, 0x02	; 2
    11c8:	8d 91       	ld	r24, X+
    11ca:	9c 91       	ld	r25, X
    11cc:	13 97       	sbiw	r26, 0x03	; 3
    11ce:	ed 01       	movw	r28, r26
    11d0:	c8 0f       	add	r28, r24
    11d2:	d9 1f       	adc	r29, r25
    11d4:	2c 17       	cp	r18, r28
    11d6:	3d 07       	cpc	r19, r29
    11d8:	d9 f4       	brne	.+54     	; 0x1210 <prvInsertBlockIntoFreeList+0x84>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
    11da:	20 91 10 04 	lds	r18, 0x0410	; 0x800410 <pxEnd>
    11de:	30 91 11 04 	lds	r19, 0x0411	; 0x800411 <pxEnd+0x1>
    11e2:	c2 17       	cp	r28, r18
    11e4:	d3 07       	cpc	r29, r19
    11e6:	81 f0       	breq	.+32     	; 0x1208 <prvInsertBlockIntoFreeList+0x7c>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
    11e8:	2a 81       	ldd	r18, Y+2	; 0x02
    11ea:	3b 81       	ldd	r19, Y+3	; 0x03
    11ec:	82 0f       	add	r24, r18
    11ee:	93 1f       	adc	r25, r19
    11f0:	13 96       	adiw	r26, 0x03	; 3
    11f2:	9c 93       	st	X, r25
    11f4:	8e 93       	st	-X, r24
    11f6:	12 97       	sbiw	r26, 0x02	; 2
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
    11f8:	c0 81       	ld	r28, Z
    11fa:	d1 81       	ldd	r29, Z+1	; 0x01
    11fc:	88 81       	ld	r24, Y
    11fe:	99 81       	ldd	r25, Y+1	; 0x01
    1200:	11 96       	adiw	r26, 0x01	; 1
    1202:	9c 93       	st	X, r25
    1204:	8e 93       	st	-X, r24
    1206:	07 c0       	rjmp	.+14     	; 0x1216 <prvInsertBlockIntoFreeList+0x8a>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
    1208:	11 96       	adiw	r26, 0x01	; 1
    120a:	dc 93       	st	X, r29
    120c:	ce 93       	st	-X, r28
    120e:	03 c0       	rjmp	.+6      	; 0x1216 <prvInsertBlockIntoFreeList+0x8a>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
    1210:	11 96       	adiw	r26, 0x01	; 1
    1212:	3c 93       	st	X, r19
    1214:	2e 93       	st	-X, r18

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
    1216:	ae 17       	cp	r26, r30
    1218:	bf 07       	cpc	r27, r31
    121a:	11 f0       	breq	.+4      	; 0x1220 <prvInsertBlockIntoFreeList+0x94>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
    121c:	b1 83       	std	Z+1, r27	; 0x01
    121e:	a0 83       	st	Z, r26
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    1220:	df 91       	pop	r29
    1222:	cf 91       	pop	r28
    1224:	08 95       	ret

00001226 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    1226:	cf 92       	push	r12
    1228:	df 92       	push	r13
    122a:	ef 92       	push	r14
    122c:	ff 92       	push	r15
    122e:	0f 93       	push	r16
    1230:	1f 93       	push	r17
    1232:	cf 93       	push	r28
    1234:	df 93       	push	r29
    1236:	ec 01       	movw	r28, r24
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
    1238:	0e 94 74 13 	call	0x26e8	; 0x26e8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
    123c:	80 91 10 04 	lds	r24, 0x0410	; 0x800410 <pxEnd>
    1240:	90 91 11 04 	lds	r25, 0x0411	; 0x800411 <pxEnd+0x1>
    1244:	89 2b       	or	r24, r25
    1246:	41 f5       	brne	.+80     	; 0x1298 <pvPortMalloc+0x72>

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
    1248:	e2 e1       	ldi	r30, 0x12	; 18
    124a:	f4 e0       	ldi	r31, 0x04	; 4
    124c:	a6 e1       	ldi	r26, 0x16	; 22
    124e:	b4 e0       	ldi	r27, 0x04	; 4
    1250:	b1 83       	std	Z+1, r27	; 0x01
    1252:	a0 83       	st	Z, r26
	xStart.xBlockSize = ( size_t ) 0;
    1254:	13 82       	std	Z+3, r1	; 0x03
    1256:	12 82       	std	Z+2, r1	; 0x02
	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
	uxAddress -= xHeapStructSize;
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
	pxEnd = ( void * ) uxAddress;
    1258:	e2 eb       	ldi	r30, 0xB2	; 178
    125a:	f3 e1       	ldi	r31, 0x13	; 19
    125c:	f0 93 11 04 	sts	0x0411, r31	; 0x800411 <pxEnd+0x1>
    1260:	e0 93 10 04 	sts	0x0410, r30	; 0x800410 <pxEnd>
	pxEnd->xBlockSize = 0;
    1264:	13 82       	std	Z+3, r1	; 0x03
    1266:	12 82       	std	Z+2, r1	; 0x02
	pxEnd->pxNextFreeBlock = NULL;
    1268:	11 82       	std	Z+1, r1	; 0x01
    126a:	10 82       	st	Z, r1

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
    126c:	8c e9       	ldi	r24, 0x9C	; 156
    126e:	9f e0       	ldi	r25, 0x0F	; 15
    1270:	13 96       	adiw	r26, 0x03	; 3
    1272:	9c 93       	st	X, r25
    1274:	8e 93       	st	-X, r24
    1276:	12 97       	sbiw	r26, 0x02	; 2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
    1278:	ed 93       	st	X+, r30
    127a:	fc 93       	st	X, r31

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
    127c:	90 93 0d 04 	sts	0x040D, r25	; 0x80040d <xMinimumEverFreeBytesRemaining+0x1>
    1280:	80 93 0c 04 	sts	0x040C, r24	; 0x80040c <xMinimumEverFreeBytesRemaining>
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
    1284:	90 93 0f 04 	sts	0x040F, r25	; 0x80040f <xFreeBytesRemaining+0x1>
    1288:	80 93 0e 04 	sts	0x040E, r24	; 0x80040e <xFreeBytesRemaining>

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
    128c:	80 e0       	ldi	r24, 0x00	; 0
    128e:	90 e8       	ldi	r25, 0x80	; 128
    1290:	90 93 0b 04 	sts	0x040B, r25	; 0x80040b <xBlockAllocatedBit+0x1>
    1294:	80 93 0a 04 	sts	0x040A, r24	; 0x80040a <xBlockAllocatedBit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
    1298:	e0 90 0a 04 	lds	r14, 0x040A	; 0x80040a <xBlockAllocatedBit>
    129c:	f0 90 0b 04 	lds	r15, 0x040B	; 0x80040b <xBlockAllocatedBit+0x1>
    12a0:	c7 01       	movw	r24, r14
    12a2:	8c 23       	and	r24, r28
    12a4:	9d 23       	and	r25, r29
    12a6:	89 2b       	or	r24, r25
    12a8:	09 f0       	breq	.+2      	; 0x12ac <pvPortMalloc+0x86>
    12aa:	66 c0       	rjmp	.+204    	; 0x1378 <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
    12ac:	20 97       	sbiw	r28, 0x00	; 0
    12ae:	09 f4       	brne	.+2      	; 0x12b2 <pvPortMalloc+0x8c>
    12b0:	66 c0       	rjmp	.+204    	; 0x137e <pvPortMalloc+0x158>
			{
				xWantedSize += xHeapStructSize;
    12b2:	ae 01       	movw	r20, r28
    12b4:	4c 5f       	subi	r20, 0xFC	; 252
    12b6:	5f 4f       	sbci	r21, 0xFF	; 255
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
    12b8:	09 f4       	brne	.+2      	; 0x12bc <pvPortMalloc+0x96>
    12ba:	5e c0       	rjmp	.+188    	; 0x1378 <pvPortMalloc+0x152>
    12bc:	00 91 0e 04 	lds	r16, 0x040E	; 0x80040e <xFreeBytesRemaining>
    12c0:	10 91 0f 04 	lds	r17, 0x040F	; 0x80040f <xFreeBytesRemaining+0x1>
    12c4:	04 17       	cp	r16, r20
    12c6:	15 07       	cpc	r17, r21
    12c8:	08 f4       	brcc	.+2      	; 0x12cc <pvPortMalloc+0xa6>
    12ca:	56 c0       	rjmp	.+172    	; 0x1378 <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
    12cc:	c0 91 12 04 	lds	r28, 0x0412	; 0x800412 <xStart>
    12d0:	d0 91 13 04 	lds	r29, 0x0413	; 0x800413 <xStart+0x1>

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
    12d4:	e2 e1       	ldi	r30, 0x12	; 18
    12d6:	f4 e0       	ldi	r31, 0x04	; 4
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    12d8:	02 c0       	rjmp	.+4      	; 0x12de <pvPortMalloc+0xb8>
    12da:	fe 01       	movw	r30, r28
				{
					pxPreviousBlock = pxBlock;
					pxBlock = pxBlock->pxNextFreeBlock;
    12dc:	e9 01       	movw	r28, r18
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    12de:	2a 81       	ldd	r18, Y+2	; 0x02
    12e0:	3b 81       	ldd	r19, Y+3	; 0x03
    12e2:	24 17       	cp	r18, r20
    12e4:	35 07       	cpc	r19, r21
    12e6:	28 f4       	brcc	.+10     	; 0x12f2 <pvPortMalloc+0xcc>
    12e8:	28 81       	ld	r18, Y
    12ea:	39 81       	ldd	r19, Y+1	; 0x01
    12ec:	21 15       	cp	r18, r1
    12ee:	31 05       	cpc	r19, r1
    12f0:	a1 f7       	brne	.-24     	; 0x12da <pvPortMalloc+0xb4>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
    12f2:	80 91 10 04 	lds	r24, 0x0410	; 0x800410 <pxEnd>
    12f6:	90 91 11 04 	lds	r25, 0x0411	; 0x800411 <pxEnd+0x1>
    12fa:	c8 17       	cp	r28, r24
    12fc:	d9 07       	cpc	r29, r25
    12fe:	e1 f1       	breq	.+120    	; 0x1378 <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
    1300:	c0 80       	ld	r12, Z
    1302:	d1 80       	ldd	r13, Z+1	; 0x01
    1304:	84 e0       	ldi	r24, 0x04	; 4
    1306:	c8 0e       	add	r12, r24
    1308:	d1 1c       	adc	r13, r1

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    130a:	88 81       	ld	r24, Y
    130c:	99 81       	ldd	r25, Y+1	; 0x01
    130e:	91 83       	std	Z+1, r25	; 0x01
    1310:	80 83       	st	Z, r24

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    1312:	2a 81       	ldd	r18, Y+2	; 0x02
    1314:	3b 81       	ldd	r19, Y+3	; 0x03
    1316:	24 1b       	sub	r18, r20
    1318:	35 0b       	sbc	r19, r21
    131a:	29 30       	cpi	r18, 0x09	; 9
    131c:	31 05       	cpc	r19, r1
    131e:	48 f0       	brcs	.+18     	; 0x1332 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
    1320:	ce 01       	movw	r24, r28
    1322:	84 0f       	add	r24, r20
    1324:	95 1f       	adc	r25, r21
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    1326:	fc 01       	movw	r30, r24
    1328:	33 83       	std	Z+3, r19	; 0x03
    132a:	22 83       	std	Z+2, r18	; 0x02
						pxBlock->xBlockSize = xWantedSize;
    132c:	5b 83       	std	Y+3, r21	; 0x03
    132e:	4a 83       	std	Y+2, r20	; 0x02

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
    1330:	2d df       	rcall	.-422    	; 0x118c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
    1332:	8a 81       	ldd	r24, Y+2	; 0x02
    1334:	9b 81       	ldd	r25, Y+3	; 0x03
    1336:	08 1b       	sub	r16, r24
    1338:	19 0b       	sbc	r17, r25
    133a:	10 93 0f 04 	sts	0x040F, r17	; 0x80040f <xFreeBytesRemaining+0x1>
    133e:	00 93 0e 04 	sts	0x040E, r16	; 0x80040e <xFreeBytesRemaining>

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
    1342:	20 91 0c 04 	lds	r18, 0x040C	; 0x80040c <xMinimumEverFreeBytesRemaining>
    1346:	30 91 0d 04 	lds	r19, 0x040D	; 0x80040d <xMinimumEverFreeBytesRemaining+0x1>
    134a:	02 17       	cp	r16, r18
    134c:	13 07       	cpc	r17, r19
    134e:	20 f4       	brcc	.+8      	; 0x1358 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
    1350:	10 93 0d 04 	sts	0x040D, r17	; 0x80040d <xMinimumEverFreeBytesRemaining+0x1>
    1354:	00 93 0c 04 	sts	0x040C, r16	; 0x80040c <xMinimumEverFreeBytesRemaining>
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
    1358:	e8 2a       	or	r14, r24
    135a:	f9 2a       	or	r15, r25
    135c:	fb 82       	std	Y+3, r15	; 0x03
    135e:	ea 82       	std	Y+2, r14	; 0x02
					pxBlock->pxNextFreeBlock = NULL;
    1360:	19 82       	std	Y+1, r1	; 0x01
    1362:	18 82       	st	Y, r1
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    1364:	0e 94 5d 14 	call	0x28ba	; 0x28ba <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
    1368:	c1 14       	cp	r12, r1
    136a:	d1 04       	cpc	r13, r1
    136c:	59 f4       	brne	.+22     	; 0x1384 <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
    136e:	0e 94 30 1b 	call	0x3660	; 0x3660 <vApplicationMallocFailedHook>
    1372:	c1 2c       	mov	r12, r1
    1374:	d1 2c       	mov	r13, r1
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
    1376:	06 c0       	rjmp	.+12     	; 0x1384 <pvPortMalloc+0x15e>
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    1378:	0e 94 5d 14 	call	0x28ba	; 0x28ba <xTaskResumeAll>
    137c:	f8 cf       	rjmp	.-16     	; 0x136e <pvPortMalloc+0x148>
    137e:	0e 94 5d 14 	call	0x28ba	; 0x28ba <xTaskResumeAll>
    1382:	f5 cf       	rjmp	.-22     	; 0x136e <pvPortMalloc+0x148>
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
}
    1384:	c6 01       	movw	r24, r12
    1386:	df 91       	pop	r29
    1388:	cf 91       	pop	r28
    138a:	1f 91       	pop	r17
    138c:	0f 91       	pop	r16
    138e:	ff 90       	pop	r15
    1390:	ef 90       	pop	r14
    1392:	df 90       	pop	r13
    1394:	cf 90       	pop	r12
    1396:	08 95       	ret

00001398 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    1398:	cf 93       	push	r28
    139a:	df 93       	push	r29
uint8_t *puc = ( uint8_t * ) pv;
BlockLink_t *pxLink;

	if( pv != NULL )
    139c:	00 97       	sbiw	r24, 0x00	; 0
    139e:	51 f1       	breq	.+84     	; 0x13f4 <vPortFree+0x5c>

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
		configASSERT( pxLink->pxNextFreeBlock == NULL );

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
    13a0:	fc 01       	movw	r30, r24
    13a2:	34 97       	sbiw	r30, 0x04	; 4
    13a4:	22 81       	ldd	r18, Z+2	; 0x02
    13a6:	33 81       	ldd	r19, Z+3	; 0x03
    13a8:	40 91 0a 04 	lds	r20, 0x040A	; 0x80040a <xBlockAllocatedBit>
    13ac:	50 91 0b 04 	lds	r21, 0x040B	; 0x80040b <xBlockAllocatedBit+0x1>
    13b0:	b9 01       	movw	r22, r18
    13b2:	64 23       	and	r22, r20
    13b4:	75 23       	and	r23, r21
    13b6:	67 2b       	or	r22, r23
    13b8:	e9 f0       	breq	.+58     	; 0x13f4 <vPortFree+0x5c>
		{
			if( pxLink->pxNextFreeBlock == NULL )
    13ba:	60 81       	ld	r22, Z
    13bc:	71 81       	ldd	r23, Z+1	; 0x01
    13be:	67 2b       	or	r22, r23
    13c0:	c9 f4       	brne	.+50     	; 0x13f4 <vPortFree+0x5c>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
    13c2:	ef 01       	movw	r28, r30
    13c4:	40 95       	com	r20
    13c6:	50 95       	com	r21
    13c8:	24 23       	and	r18, r20
    13ca:	35 23       	and	r19, r21
    13cc:	33 83       	std	Z+3, r19	; 0x03
    13ce:	22 83       	std	Z+2, r18	; 0x02

				vTaskSuspendAll();
    13d0:	0e 94 74 13 	call	0x26e8	; 0x26e8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
    13d4:	20 91 0e 04 	lds	r18, 0x040E	; 0x80040e <xFreeBytesRemaining>
    13d8:	30 91 0f 04 	lds	r19, 0x040F	; 0x80040f <xFreeBytesRemaining+0x1>
    13dc:	8a 81       	ldd	r24, Y+2	; 0x02
    13de:	9b 81       	ldd	r25, Y+3	; 0x03
    13e0:	82 0f       	add	r24, r18
    13e2:	93 1f       	adc	r25, r19
    13e4:	90 93 0f 04 	sts	0x040F, r25	; 0x80040f <xFreeBytesRemaining+0x1>
    13e8:	80 93 0e 04 	sts	0x040E, r24	; 0x80040e <xFreeBytesRemaining>
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
    13ec:	ce 01       	movw	r24, r28
    13ee:	ce de       	rcall	.-612    	; 0x118c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
    13f0:	0e 94 5d 14 	call	0x28ba	; 0x28ba <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
    13f4:	df 91       	pop	r29
    13f6:	cf 91       	pop	r28
    13f8:	08 95       	ret

000013fa <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    13fa:	fc 01       	movw	r30, r24
    /* The list structure contains a list item which is used to mark the
    end of the list.  To initialise the list the list end is inserted
    as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );            /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    13fc:	03 96       	adiw	r24, 0x03	; 3
    13fe:	92 83       	std	Z+2, r25	; 0x02
    1400:	81 83       	std	Z+1, r24	; 0x01

    /* The list end value is the highest possible value in the list to
    ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
    1402:	4f ef       	ldi	r20, 0xFF	; 255
    1404:	5f ef       	ldi	r21, 0xFF	; 255
    1406:	ba 01       	movw	r22, r20
    1408:	43 83       	std	Z+3, r20	; 0x03
    140a:	54 83       	std	Z+4, r21	; 0x04
    140c:	65 83       	std	Z+5, r22	; 0x05
    140e:	76 83       	std	Z+6, r23	; 0x06

    /* The list end next and previous pointers point to itself so we know
    when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );    /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1410:	90 87       	std	Z+8, r25	; 0x08
    1412:	87 83       	std	Z+7, r24	; 0x07
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1414:	92 87       	std	Z+10, r25	; 0x0a
    1416:	81 87       	std	Z+9, r24	; 0x09

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    1418:	10 82       	st	Z, r1
    141a:	08 95       	ret

0000141c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
    141c:	fc 01       	movw	r30, r24
    141e:	13 86       	std	Z+11, r1	; 0x0b
    1420:	12 86       	std	Z+10, r1	; 0x0a
    1422:	08 95       	ret

00001424 <vListInsertEnd>:
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    1424:	cf 93       	push	r28
    1426:	df 93       	push	r29
    1428:	9c 01       	movw	r18, r24
    142a:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
    142c:	dc 01       	movw	r26, r24
    142e:	11 96       	adiw	r26, 0x01	; 1
    1430:	cd 91       	ld	r28, X+
    1432:	dc 91       	ld	r29, X
    1434:	12 97       	sbiw	r26, 0x02	; 2
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
    makes the new list item the last item to be removed by a call to
    listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
    1436:	d5 83       	std	Z+5, r29	; 0x05
    1438:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    143a:	8e 81       	ldd	r24, Y+6	; 0x06
    143c:	9f 81       	ldd	r25, Y+7	; 0x07
    143e:	97 83       	std	Z+7, r25	; 0x07
    1440:	86 83       	std	Z+6, r24	; 0x06

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
    1442:	8e 81       	ldd	r24, Y+6	; 0x06
    1444:	9f 81       	ldd	r25, Y+7	; 0x07
    1446:	dc 01       	movw	r26, r24
    1448:	15 96       	adiw	r26, 0x05	; 5
    144a:	7c 93       	st	X, r23
    144c:	6e 93       	st	-X, r22
    144e:	14 97       	sbiw	r26, 0x04	; 4
    pxIndex->pxPrevious = pxNewListItem;
    1450:	7f 83       	std	Y+7, r23	; 0x07
    1452:	6e 83       	std	Y+6, r22	; 0x06

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
    1454:	33 87       	std	Z+11, r19	; 0x0b
    1456:	22 87       	std	Z+10, r18	; 0x0a

    ( pxList->uxNumberOfItems )++;
    1458:	f9 01       	movw	r30, r18
    145a:	80 81       	ld	r24, Z
    145c:	8f 5f       	subi	r24, 0xFF	; 255
    145e:	80 83       	st	Z, r24
}
    1460:	df 91       	pop	r29
    1462:	cf 91       	pop	r28
    1464:	08 95       	ret

00001466 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    1466:	0f 93       	push	r16
    1468:	1f 93       	push	r17
    146a:	cf 93       	push	r28
    146c:	df 93       	push	r29
    146e:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    1470:	08 81       	ld	r16, Y
    1472:	19 81       	ldd	r17, Y+1	; 0x01
    1474:	2a 81       	ldd	r18, Y+2	; 0x02
    1476:	3b 81       	ldd	r19, Y+3	; 0x03
    new list item should be placed after it.  This ensures that TCBs which are
    stored in ready lists (all of which have the same xItemValue value) get a
    share of the CPU.  However, if the xItemValue is the same as the back marker
    the iteration loop below will not end.  Therefore the value is checked
    first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
    1478:	0f 3f       	cpi	r16, 0xFF	; 255
    147a:	4f ef       	ldi	r20, 0xFF	; 255
    147c:	14 07       	cpc	r17, r20
    147e:	24 07       	cpc	r18, r20
    1480:	34 07       	cpc	r19, r20
    1482:	21 f4       	brne	.+8      	; 0x148c <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
    1484:	fc 01       	movw	r30, r24
    1486:	a1 85       	ldd	r26, Z+9	; 0x09
    1488:	b2 85       	ldd	r27, Z+10	; 0x0a
    148a:	11 c0       	rjmp	.+34     	; 0x14ae <vListInsert+0x48>
            4) Using a queue or semaphore before it has been initialised or
               before the scheduler has been started (are interrupts firing
               before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
    148c:	dc 01       	movw	r26, r24
    148e:	13 96       	adiw	r26, 0x03	; 3
    1490:	01 c0       	rjmp	.+2      	; 0x1494 <vListInsert+0x2e>
    1492:	df 01       	movw	r26, r30
    1494:	14 96       	adiw	r26, 0x04	; 4
    1496:	ed 91       	ld	r30, X+
    1498:	fc 91       	ld	r31, X
    149a:	15 97       	sbiw	r26, 0x05	; 5
    149c:	40 81       	ld	r20, Z
    149e:	51 81       	ldd	r21, Z+1	; 0x01
    14a0:	62 81       	ldd	r22, Z+2	; 0x02
    14a2:	73 81       	ldd	r23, Z+3	; 0x03
    14a4:	04 17       	cp	r16, r20
    14a6:	15 07       	cpc	r17, r21
    14a8:	26 07       	cpc	r18, r22
    14aa:	37 07       	cpc	r19, r23
    14ac:	90 f7       	brcc	.-28     	; 0x1492 <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
            insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
    14ae:	14 96       	adiw	r26, 0x04	; 4
    14b0:	ed 91       	ld	r30, X+
    14b2:	fc 91       	ld	r31, X
    14b4:	15 97       	sbiw	r26, 0x05	; 5
    14b6:	fd 83       	std	Y+5, r31	; 0x05
    14b8:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    14ba:	d7 83       	std	Z+7, r29	; 0x07
    14bc:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
    14be:	bf 83       	std	Y+7, r27	; 0x07
    14c0:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
    14c2:	15 96       	adiw	r26, 0x05	; 5
    14c4:	dc 93       	st	X, r29
    14c6:	ce 93       	st	-X, r28
    14c8:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
    item later. */
    pxNewListItem->pxContainer = pxList;
    14ca:	9b 87       	std	Y+11, r25	; 0x0b
    14cc:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
    14ce:	fc 01       	movw	r30, r24
    14d0:	20 81       	ld	r18, Z
    14d2:	2f 5f       	subi	r18, 0xFF	; 255
    14d4:	20 83       	st	Z, r18
}
    14d6:	df 91       	pop	r29
    14d8:	cf 91       	pop	r28
    14da:	1f 91       	pop	r17
    14dc:	0f 91       	pop	r16
    14de:	08 95       	ret

000014e0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    14e0:	cf 93       	push	r28
    14e2:	df 93       	push	r29
    14e4:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
    14e6:	a2 85       	ldd	r26, Z+10	; 0x0a
    14e8:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    14ea:	c4 81       	ldd	r28, Z+4	; 0x04
    14ec:	d5 81       	ldd	r29, Z+5	; 0x05
    14ee:	86 81       	ldd	r24, Z+6	; 0x06
    14f0:	97 81       	ldd	r25, Z+7	; 0x07
    14f2:	9f 83       	std	Y+7, r25	; 0x07
    14f4:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    14f6:	c6 81       	ldd	r28, Z+6	; 0x06
    14f8:	d7 81       	ldd	r29, Z+7	; 0x07
    14fa:	84 81       	ldd	r24, Z+4	; 0x04
    14fc:	95 81       	ldd	r25, Z+5	; 0x05
    14fe:	9d 83       	std	Y+5, r25	; 0x05
    1500:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
    1502:	11 96       	adiw	r26, 0x01	; 1
    1504:	8d 91       	ld	r24, X+
    1506:	9c 91       	ld	r25, X
    1508:	12 97       	sbiw	r26, 0x02	; 2
    150a:	e8 17       	cp	r30, r24
    150c:	f9 07       	cpc	r31, r25
    150e:	31 f4       	brne	.+12     	; 0x151c <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
    1510:	86 81       	ldd	r24, Z+6	; 0x06
    1512:	97 81       	ldd	r25, Z+7	; 0x07
    1514:	12 96       	adiw	r26, 0x02	; 2
    1516:	9c 93       	st	X, r25
    1518:	8e 93       	st	-X, r24
    151a:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
    151c:	13 86       	std	Z+11, r1	; 0x0b
    151e:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
    1520:	8c 91       	ld	r24, X
    1522:	81 50       	subi	r24, 0x01	; 1
    1524:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
    1526:	8c 91       	ld	r24, X
}
    1528:	df 91       	pop	r29
    152a:	cf 91       	pop	r28
    152c:	08 95       	ret

0000152e <pxPortInitialiseStack>:
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    152e:	31 e1       	ldi	r19, 0x11	; 17
    1530:	fc 01       	movw	r30, r24
    1532:	30 83       	st	Z, r19
    1534:	31 97       	sbiw	r30, 0x01	; 1
    1536:	22 e2       	ldi	r18, 0x22	; 34
    1538:	20 83       	st	Z, r18
    153a:	31 97       	sbiw	r30, 0x01	; 1
    153c:	a3 e3       	ldi	r26, 0x33	; 51
    153e:	a0 83       	st	Z, r26
    1540:	31 97       	sbiw	r30, 0x01	; 1
    1542:	60 83       	st	Z, r22
    1544:	31 97       	sbiw	r30, 0x01	; 1
    1546:	70 83       	st	Z, r23
    1548:	31 97       	sbiw	r30, 0x01	; 1
    154a:	10 82       	st	Z, r1
    154c:	31 97       	sbiw	r30, 0x01	; 1
    154e:	10 82       	st	Z, r1
    1550:	31 97       	sbiw	r30, 0x01	; 1
    1552:	60 e8       	ldi	r22, 0x80	; 128
    1554:	60 83       	st	Z, r22
    1556:	31 97       	sbiw	r30, 0x01	; 1
    1558:	10 82       	st	Z, r1
    155a:	31 97       	sbiw	r30, 0x01	; 1
    155c:	10 82       	st	Z, r1
    155e:	31 97       	sbiw	r30, 0x01	; 1
    1560:	10 82       	st	Z, r1
    1562:	31 97       	sbiw	r30, 0x01	; 1
    1564:	62 e0       	ldi	r22, 0x02	; 2
    1566:	60 83       	st	Z, r22
    1568:	31 97       	sbiw	r30, 0x01	; 1
    156a:	63 e0       	ldi	r22, 0x03	; 3
    156c:	60 83       	st	Z, r22
    156e:	31 97       	sbiw	r30, 0x01	; 1
    1570:	64 e0       	ldi	r22, 0x04	; 4
    1572:	60 83       	st	Z, r22
    1574:	31 97       	sbiw	r30, 0x01	; 1
    1576:	65 e0       	ldi	r22, 0x05	; 5
    1578:	60 83       	st	Z, r22
    157a:	31 97       	sbiw	r30, 0x01	; 1
    157c:	66 e0       	ldi	r22, 0x06	; 6
    157e:	60 83       	st	Z, r22
    1580:	31 97       	sbiw	r30, 0x01	; 1
    1582:	67 e0       	ldi	r22, 0x07	; 7
    1584:	60 83       	st	Z, r22
    1586:	31 97       	sbiw	r30, 0x01	; 1
    1588:	68 e0       	ldi	r22, 0x08	; 8
    158a:	60 83       	st	Z, r22
    158c:	31 97       	sbiw	r30, 0x01	; 1
    158e:	69 e0       	ldi	r22, 0x09	; 9
    1590:	60 83       	st	Z, r22
    1592:	31 97       	sbiw	r30, 0x01	; 1
    1594:	60 e1       	ldi	r22, 0x10	; 16
    1596:	60 83       	st	Z, r22
    1598:	31 97       	sbiw	r30, 0x01	; 1
    159a:	30 83       	st	Z, r19
    159c:	31 97       	sbiw	r30, 0x01	; 1
    159e:	32 e1       	ldi	r19, 0x12	; 18
    15a0:	30 83       	st	Z, r19
    15a2:	31 97       	sbiw	r30, 0x01	; 1
    15a4:	33 e1       	ldi	r19, 0x13	; 19
    15a6:	30 83       	st	Z, r19
    15a8:	31 97       	sbiw	r30, 0x01	; 1
    15aa:	34 e1       	ldi	r19, 0x14	; 20
    15ac:	30 83       	st	Z, r19
    15ae:	31 97       	sbiw	r30, 0x01	; 1
    15b0:	35 e1       	ldi	r19, 0x15	; 21
    15b2:	30 83       	st	Z, r19
    15b4:	31 97       	sbiw	r30, 0x01	; 1
    15b6:	36 e1       	ldi	r19, 0x16	; 22
    15b8:	30 83       	st	Z, r19
    15ba:	31 97       	sbiw	r30, 0x01	; 1
    15bc:	37 e1       	ldi	r19, 0x17	; 23
    15be:	30 83       	st	Z, r19
    15c0:	31 97       	sbiw	r30, 0x01	; 1
    15c2:	38 e1       	ldi	r19, 0x18	; 24
    15c4:	30 83       	st	Z, r19
    15c6:	31 97       	sbiw	r30, 0x01	; 1
    15c8:	39 e1       	ldi	r19, 0x19	; 25
    15ca:	30 83       	st	Z, r19
    15cc:	31 97       	sbiw	r30, 0x01	; 1
    15ce:	30 e2       	ldi	r19, 0x20	; 32
    15d0:	30 83       	st	Z, r19
    15d2:	31 97       	sbiw	r30, 0x01	; 1
    15d4:	31 e2       	ldi	r19, 0x21	; 33
    15d6:	30 83       	st	Z, r19
    15d8:	31 97       	sbiw	r30, 0x01	; 1
    15da:	20 83       	st	Z, r18
    15dc:	31 97       	sbiw	r30, 0x01	; 1
    15de:	23 e2       	ldi	r18, 0x23	; 35
    15e0:	20 83       	st	Z, r18
    15e2:	31 97       	sbiw	r30, 0x01	; 1
    15e4:	40 83       	st	Z, r20
    15e6:	31 97       	sbiw	r30, 0x01	; 1
    15e8:	50 83       	st	Z, r21
    15ea:	31 97       	sbiw	r30, 0x01	; 1
    15ec:	26 e2       	ldi	r18, 0x26	; 38
    15ee:	20 83       	st	Z, r18
    15f0:	31 97       	sbiw	r30, 0x01	; 1
    15f2:	27 e2       	ldi	r18, 0x27	; 39
    15f4:	20 83       	st	Z, r18
    15f6:	31 97       	sbiw	r30, 0x01	; 1
    15f8:	28 e2       	ldi	r18, 0x28	; 40
    15fa:	20 83       	st	Z, r18
    15fc:	31 97       	sbiw	r30, 0x01	; 1
    15fe:	29 e2       	ldi	r18, 0x29	; 41
    1600:	20 83       	st	Z, r18
    1602:	31 97       	sbiw	r30, 0x01	; 1
    1604:	20 e3       	ldi	r18, 0x30	; 48
    1606:	20 83       	st	Z, r18
    1608:	31 97       	sbiw	r30, 0x01	; 1
    160a:	21 e3       	ldi	r18, 0x31	; 49
    160c:	20 83       	st	Z, r18
    160e:	89 97       	sbiw	r24, 0x29	; 41
    1610:	08 95       	ret

00001612 <xPortStartScheduler>:
    1612:	a8 95       	wdr
    1614:	90 ec       	ldi	r25, 0xC0	; 192
    1616:	88 e1       	ldi	r24, 0x18	; 24
    1618:	0f b6       	in	r0, 0x3f	; 63
    161a:	f8 94       	cli
    161c:	a8 95       	wdr
    161e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    1622:	0f be       	out	0x3f, r0	; 63
    1624:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    1628:	a0 91 30 14 	lds	r26, 0x1430	; 0x801430 <pxCurrentTCB>
    162c:	b0 91 31 14 	lds	r27, 0x1431	; 0x801431 <pxCurrentTCB+0x1>
    1630:	cd 91       	ld	r28, X+
    1632:	cd bf       	out	0x3d, r28	; 61
    1634:	dd 91       	ld	r29, X+
    1636:	de bf       	out	0x3e, r29	; 62
    1638:	ff 91       	pop	r31
    163a:	ef 91       	pop	r30
    163c:	df 91       	pop	r29
    163e:	cf 91       	pop	r28
    1640:	bf 91       	pop	r27
    1642:	af 91       	pop	r26
    1644:	9f 91       	pop	r25
    1646:	8f 91       	pop	r24
    1648:	7f 91       	pop	r23
    164a:	6f 91       	pop	r22
    164c:	5f 91       	pop	r21
    164e:	4f 91       	pop	r20
    1650:	3f 91       	pop	r19
    1652:	2f 91       	pop	r18
    1654:	1f 91       	pop	r17
    1656:	0f 91       	pop	r16
    1658:	ff 90       	pop	r15
    165a:	ef 90       	pop	r14
    165c:	df 90       	pop	r13
    165e:	cf 90       	pop	r12
    1660:	bf 90       	pop	r11
    1662:	af 90       	pop	r10
    1664:	9f 90       	pop	r9
    1666:	8f 90       	pop	r8
    1668:	7f 90       	pop	r7
    166a:	6f 90       	pop	r6
    166c:	5f 90       	pop	r5
    166e:	4f 90       	pop	r4
    1670:	3f 90       	pop	r3
    1672:	2f 90       	pop	r2
    1674:	1f 90       	pop	r1
    1676:	0f 90       	pop	r0
    1678:	0c be       	out	0x3c, r0	; 60
    167a:	0f 90       	pop	r0
    167c:	0b be       	out	0x3b, r0	; 59
    167e:	0f 90       	pop	r0
    1680:	0f be       	out	0x3f, r0	; 63
    1682:	0f 90       	pop	r0
    1684:	08 95       	ret
    1686:	81 e0       	ldi	r24, 0x01	; 1
    1688:	08 95       	ret

0000168a <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYield( void )
{
    portSAVE_CONTEXT();
    168a:	0f 92       	push	r0
    168c:	0f b6       	in	r0, 0x3f	; 63
    168e:	f8 94       	cli
    1690:	0f 92       	push	r0
    1692:	0b b6       	in	r0, 0x3b	; 59
    1694:	0f 92       	push	r0
    1696:	0c b6       	in	r0, 0x3c	; 60
    1698:	0f 92       	push	r0
    169a:	1f 92       	push	r1
    169c:	11 24       	eor	r1, r1
    169e:	2f 92       	push	r2
    16a0:	3f 92       	push	r3
    16a2:	4f 92       	push	r4
    16a4:	5f 92       	push	r5
    16a6:	6f 92       	push	r6
    16a8:	7f 92       	push	r7
    16aa:	8f 92       	push	r8
    16ac:	9f 92       	push	r9
    16ae:	af 92       	push	r10
    16b0:	bf 92       	push	r11
    16b2:	cf 92       	push	r12
    16b4:	df 92       	push	r13
    16b6:	ef 92       	push	r14
    16b8:	ff 92       	push	r15
    16ba:	0f 93       	push	r16
    16bc:	1f 93       	push	r17
    16be:	2f 93       	push	r18
    16c0:	3f 93       	push	r19
    16c2:	4f 93       	push	r20
    16c4:	5f 93       	push	r21
    16c6:	6f 93       	push	r22
    16c8:	7f 93       	push	r23
    16ca:	8f 93       	push	r24
    16cc:	9f 93       	push	r25
    16ce:	af 93       	push	r26
    16d0:	bf 93       	push	r27
    16d2:	cf 93       	push	r28
    16d4:	df 93       	push	r29
    16d6:	ef 93       	push	r30
    16d8:	ff 93       	push	r31
    16da:	a0 91 30 14 	lds	r26, 0x1430	; 0x801430 <pxCurrentTCB>
    16de:	b0 91 31 14 	lds	r27, 0x1431	; 0x801431 <pxCurrentTCB+0x1>
    16e2:	0d b6       	in	r0, 0x3d	; 61
    16e4:	0d 92       	st	X+, r0
    16e6:	0e b6       	in	r0, 0x3e	; 62
    16e8:	0d 92       	st	X+, r0
    vTaskSwitchContext();
    16ea:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <vTaskSwitchContext>
    portRESTORE_CONTEXT();
    16ee:	a0 91 30 14 	lds	r26, 0x1430	; 0x801430 <pxCurrentTCB>
    16f2:	b0 91 31 14 	lds	r27, 0x1431	; 0x801431 <pxCurrentTCB+0x1>
    16f6:	cd 91       	ld	r28, X+
    16f8:	cd bf       	out	0x3d, r28	; 61
    16fa:	dd 91       	ld	r29, X+
    16fc:	de bf       	out	0x3e, r29	; 62
    16fe:	ff 91       	pop	r31
    1700:	ef 91       	pop	r30
    1702:	df 91       	pop	r29
    1704:	cf 91       	pop	r28
    1706:	bf 91       	pop	r27
    1708:	af 91       	pop	r26
    170a:	9f 91       	pop	r25
    170c:	8f 91       	pop	r24
    170e:	7f 91       	pop	r23
    1710:	6f 91       	pop	r22
    1712:	5f 91       	pop	r21
    1714:	4f 91       	pop	r20
    1716:	3f 91       	pop	r19
    1718:	2f 91       	pop	r18
    171a:	1f 91       	pop	r17
    171c:	0f 91       	pop	r16
    171e:	ff 90       	pop	r15
    1720:	ef 90       	pop	r14
    1722:	df 90       	pop	r13
    1724:	cf 90       	pop	r12
    1726:	bf 90       	pop	r11
    1728:	af 90       	pop	r10
    172a:	9f 90       	pop	r9
    172c:	8f 90       	pop	r8
    172e:	7f 90       	pop	r7
    1730:	6f 90       	pop	r6
    1732:	5f 90       	pop	r5
    1734:	4f 90       	pop	r4
    1736:	3f 90       	pop	r3
    1738:	2f 90       	pop	r2
    173a:	1f 90       	pop	r1
    173c:	0f 90       	pop	r0
    173e:	0c be       	out	0x3c, r0	; 60
    1740:	0f 90       	pop	r0
    1742:	0b be       	out	0x3b, r0	; 59
    1744:	0f 90       	pop	r0
    1746:	0f be       	out	0x3f, r0	; 63
    1748:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
    174a:	08 95       	ret

0000174c <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
    174c:	0f 92       	push	r0
    174e:	0f b6       	in	r0, 0x3f	; 63
    1750:	f8 94       	cli
    1752:	0f 92       	push	r0
    1754:	0b b6       	in	r0, 0x3b	; 59
    1756:	0f 92       	push	r0
    1758:	0c b6       	in	r0, 0x3c	; 60
    175a:	0f 92       	push	r0
    175c:	1f 92       	push	r1
    175e:	11 24       	eor	r1, r1
    1760:	2f 92       	push	r2
    1762:	3f 92       	push	r3
    1764:	4f 92       	push	r4
    1766:	5f 92       	push	r5
    1768:	6f 92       	push	r6
    176a:	7f 92       	push	r7
    176c:	8f 92       	push	r8
    176e:	9f 92       	push	r9
    1770:	af 92       	push	r10
    1772:	bf 92       	push	r11
    1774:	cf 92       	push	r12
    1776:	df 92       	push	r13
    1778:	ef 92       	push	r14
    177a:	ff 92       	push	r15
    177c:	0f 93       	push	r16
    177e:	1f 93       	push	r17
    1780:	2f 93       	push	r18
    1782:	3f 93       	push	r19
    1784:	4f 93       	push	r20
    1786:	5f 93       	push	r21
    1788:	6f 93       	push	r22
    178a:	7f 93       	push	r23
    178c:	8f 93       	push	r24
    178e:	9f 93       	push	r25
    1790:	af 93       	push	r26
    1792:	bf 93       	push	r27
    1794:	cf 93       	push	r28
    1796:	df 93       	push	r29
    1798:	ef 93       	push	r30
    179a:	ff 93       	push	r31
    179c:	a0 91 30 14 	lds	r26, 0x1430	; 0x801430 <pxCurrentTCB>
    17a0:	b0 91 31 14 	lds	r27, 0x1431	; 0x801431 <pxCurrentTCB+0x1>
    17a4:	0d b6       	in	r0, 0x3d	; 61
    17a6:	0d 92       	st	X+, r0
    17a8:	0e b6       	in	r0, 0x3e	; 62
    17aa:	0d 92       	st	X+, r0

    sleep_reset();        //     reset the sleep_mode() faster than sleep_disable();
    17ac:	13 be       	out	0x33, r1	; 51

    if( xTaskIncrementTick() != pdFALSE )
    17ae:	b0 d7       	rcall	.+3936   	; 0x2710 <xTaskIncrementTick>
    17b0:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
    17b2:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <vTaskSwitchContext>
    }

    portRESTORE_CONTEXT();
    17b6:	a0 91 30 14 	lds	r26, 0x1430	; 0x801430 <pxCurrentTCB>
    17ba:	b0 91 31 14 	lds	r27, 0x1431	; 0x801431 <pxCurrentTCB+0x1>
    17be:	cd 91       	ld	r28, X+
    17c0:	cd bf       	out	0x3d, r28	; 61
    17c2:	dd 91       	ld	r29, X+
    17c4:	de bf       	out	0x3e, r29	; 62
    17c6:	ff 91       	pop	r31
    17c8:	ef 91       	pop	r30
    17ca:	df 91       	pop	r29
    17cc:	cf 91       	pop	r28
    17ce:	bf 91       	pop	r27
    17d0:	af 91       	pop	r26
    17d2:	9f 91       	pop	r25
    17d4:	8f 91       	pop	r24
    17d6:	7f 91       	pop	r23
    17d8:	6f 91       	pop	r22
    17da:	5f 91       	pop	r21
    17dc:	4f 91       	pop	r20
    17de:	3f 91       	pop	r19
    17e0:	2f 91       	pop	r18
    17e2:	1f 91       	pop	r17
    17e4:	0f 91       	pop	r16
    17e6:	ff 90       	pop	r15
    17e8:	ef 90       	pop	r14
    17ea:	df 90       	pop	r13
    17ec:	cf 90       	pop	r12
    17ee:	bf 90       	pop	r11
    17f0:	af 90       	pop	r10
    17f2:	9f 90       	pop	r9
    17f4:	8f 90       	pop	r8
    17f6:	7f 90       	pop	r7
    17f8:	6f 90       	pop	r6
    17fa:	5f 90       	pop	r5
    17fc:	4f 90       	pop	r4
    17fe:	3f 90       	pop	r3
    1800:	2f 90       	pop	r2
    1802:	1f 90       	pop	r1
    1804:	0f 90       	pop	r0
    1806:	0c be       	out	0x3c, r0	; 60
    1808:	0f 90       	pop	r0
    180a:	0b be       	out	0x3b, r0	; 59
    180c:	0f 90       	pop	r0
    180e:	0f be       	out	0x3f, r0	; 63
    1810:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
    1812:	08 95       	ret

00001814 <__vector_12>:
     */
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
//  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
    1814:	9b df       	rcall	.-202    	; 0x174c <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
    1816:	18 95       	reti

00001818 <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    1818:	0f b6       	in	r0, 0x3f	; 63
    181a:	f8 94       	cli
    181c:	0f 92       	push	r0
    181e:	fc 01       	movw	r30, r24
    1820:	96 8d       	ldd	r25, Z+30	; 0x1e
    1822:	0f 90       	pop	r0
    1824:	0f be       	out	0x3f, r0	; 63
    1826:	81 e0       	ldi	r24, 0x01	; 1
    1828:	91 11       	cpse	r25, r1
    182a:	80 e0       	ldi	r24, 0x00	; 0
    182c:	08 95       	ret

0000182e <prvCopyDataToQueue>:
    182e:	0f 93       	push	r16
    1830:	1f 93       	push	r17
    1832:	cf 93       	push	r28
    1834:	df 93       	push	r29
    1836:	ec 01       	movw	r28, r24
    1838:	04 2f       	mov	r16, r20
    183a:	1e 8d       	ldd	r17, Y+30	; 0x1e
    183c:	48 a1       	ldd	r20, Y+32	; 0x20
    183e:	41 11       	cpse	r20, r1
    1840:	0c c0       	rjmp	.+24     	; 0x185a <prvCopyDataToQueue+0x2c>
    1842:	88 81       	ld	r24, Y
    1844:	99 81       	ldd	r25, Y+1	; 0x01
    1846:	89 2b       	or	r24, r25
    1848:	09 f0       	breq	.+2      	; 0x184c <prvCopyDataToQueue+0x1e>
    184a:	42 c0       	rjmp	.+132    	; 0x18d0 <prvCopyDataToQueue+0xa2>
    184c:	8c 81       	ldd	r24, Y+4	; 0x04
    184e:	9d 81       	ldd	r25, Y+5	; 0x05
    1850:	0e 94 43 17 	call	0x2e86	; 0x2e86 <xTaskPriorityDisinherit>
    1854:	1d 82       	std	Y+5, r1	; 0x05
    1856:	1c 82       	std	Y+4, r1	; 0x04
    1858:	42 c0       	rjmp	.+132    	; 0x18de <prvCopyDataToQueue+0xb0>
    185a:	01 11       	cpse	r16, r1
    185c:	17 c0       	rjmp	.+46     	; 0x188c <prvCopyDataToQueue+0x5e>
    185e:	50 e0       	ldi	r21, 0x00	; 0
    1860:	8a 81       	ldd	r24, Y+2	; 0x02
    1862:	9b 81       	ldd	r25, Y+3	; 0x03
    1864:	0e 94 31 29 	call	0x5262	; 0x5262 <memcpy>
    1868:	28 a1       	ldd	r18, Y+32	; 0x20
    186a:	8a 81       	ldd	r24, Y+2	; 0x02
    186c:	9b 81       	ldd	r25, Y+3	; 0x03
    186e:	82 0f       	add	r24, r18
    1870:	91 1d       	adc	r25, r1
    1872:	9b 83       	std	Y+3, r25	; 0x03
    1874:	8a 83       	std	Y+2, r24	; 0x02
    1876:	2c 81       	ldd	r18, Y+4	; 0x04
    1878:	3d 81       	ldd	r19, Y+5	; 0x05
    187a:	82 17       	cp	r24, r18
    187c:	93 07       	cpc	r25, r19
    187e:	50 f1       	brcs	.+84     	; 0x18d4 <prvCopyDataToQueue+0xa6>
    1880:	88 81       	ld	r24, Y
    1882:	99 81       	ldd	r25, Y+1	; 0x01
    1884:	9b 83       	std	Y+3, r25	; 0x03
    1886:	8a 83       	std	Y+2, r24	; 0x02
    1888:	80 e0       	ldi	r24, 0x00	; 0
    188a:	29 c0       	rjmp	.+82     	; 0x18de <prvCopyDataToQueue+0xb0>
    188c:	50 e0       	ldi	r21, 0x00	; 0
    188e:	8e 81       	ldd	r24, Y+6	; 0x06
    1890:	9f 81       	ldd	r25, Y+7	; 0x07
    1892:	0e 94 31 29 	call	0x5262	; 0x5262 <memcpy>
    1896:	88 a1       	ldd	r24, Y+32	; 0x20
    1898:	90 e0       	ldi	r25, 0x00	; 0
    189a:	91 95       	neg	r25
    189c:	81 95       	neg	r24
    189e:	91 09       	sbc	r25, r1
    18a0:	2e 81       	ldd	r18, Y+6	; 0x06
    18a2:	3f 81       	ldd	r19, Y+7	; 0x07
    18a4:	28 0f       	add	r18, r24
    18a6:	39 1f       	adc	r19, r25
    18a8:	3f 83       	std	Y+7, r19	; 0x07
    18aa:	2e 83       	std	Y+6, r18	; 0x06
    18ac:	48 81       	ld	r20, Y
    18ae:	59 81       	ldd	r21, Y+1	; 0x01
    18b0:	24 17       	cp	r18, r20
    18b2:	35 07       	cpc	r19, r21
    18b4:	30 f4       	brcc	.+12     	; 0x18c2 <prvCopyDataToQueue+0x94>
    18b6:	2c 81       	ldd	r18, Y+4	; 0x04
    18b8:	3d 81       	ldd	r19, Y+5	; 0x05
    18ba:	82 0f       	add	r24, r18
    18bc:	93 1f       	adc	r25, r19
    18be:	9f 83       	std	Y+7, r25	; 0x07
    18c0:	8e 83       	std	Y+6, r24	; 0x06
    18c2:	02 30       	cpi	r16, 0x02	; 2
    18c4:	49 f4       	brne	.+18     	; 0x18d8 <prvCopyDataToQueue+0xaa>
    18c6:	11 23       	and	r17, r17
    18c8:	49 f0       	breq	.+18     	; 0x18dc <prvCopyDataToQueue+0xae>
    18ca:	11 50       	subi	r17, 0x01	; 1
    18cc:	80 e0       	ldi	r24, 0x00	; 0
    18ce:	07 c0       	rjmp	.+14     	; 0x18de <prvCopyDataToQueue+0xb0>
    18d0:	80 e0       	ldi	r24, 0x00	; 0
    18d2:	05 c0       	rjmp	.+10     	; 0x18de <prvCopyDataToQueue+0xb0>
    18d4:	80 e0       	ldi	r24, 0x00	; 0
    18d6:	03 c0       	rjmp	.+6      	; 0x18de <prvCopyDataToQueue+0xb0>
    18d8:	80 e0       	ldi	r24, 0x00	; 0
    18da:	01 c0       	rjmp	.+2      	; 0x18de <prvCopyDataToQueue+0xb0>
    18dc:	80 e0       	ldi	r24, 0x00	; 0
    18de:	1f 5f       	subi	r17, 0xFF	; 255
    18e0:	1e 8f       	std	Y+30, r17	; 0x1e
    18e2:	df 91       	pop	r29
    18e4:	cf 91       	pop	r28
    18e6:	1f 91       	pop	r17
    18e8:	0f 91       	pop	r16
    18ea:	08 95       	ret

000018ec <prvCopyDataFromQueue>:
    18ec:	fc 01       	movw	r30, r24
    18ee:	40 a1       	ldd	r20, Z+32	; 0x20
    18f0:	44 23       	and	r20, r20
    18f2:	a9 f0       	breq	.+42     	; 0x191e <prvCopyDataFromQueue+0x32>
    18f4:	50 e0       	ldi	r21, 0x00	; 0
    18f6:	26 81       	ldd	r18, Z+6	; 0x06
    18f8:	37 81       	ldd	r19, Z+7	; 0x07
    18fa:	24 0f       	add	r18, r20
    18fc:	35 1f       	adc	r19, r21
    18fe:	37 83       	std	Z+7, r19	; 0x07
    1900:	26 83       	std	Z+6, r18	; 0x06
    1902:	84 81       	ldd	r24, Z+4	; 0x04
    1904:	95 81       	ldd	r25, Z+5	; 0x05
    1906:	28 17       	cp	r18, r24
    1908:	39 07       	cpc	r19, r25
    190a:	20 f0       	brcs	.+8      	; 0x1914 <prvCopyDataFromQueue+0x28>
    190c:	80 81       	ld	r24, Z
    190e:	91 81       	ldd	r25, Z+1	; 0x01
    1910:	97 83       	std	Z+7, r25	; 0x07
    1912:	86 83       	std	Z+6, r24	; 0x06
    1914:	cb 01       	movw	r24, r22
    1916:	66 81       	ldd	r22, Z+6	; 0x06
    1918:	77 81       	ldd	r23, Z+7	; 0x07
    191a:	0c 94 31 29 	jmp	0x5262	; 0x5262 <memcpy>
    191e:	08 95       	ret

00001920 <prvUnlockQueue>:
    1920:	ef 92       	push	r14
    1922:	ff 92       	push	r15
    1924:	0f 93       	push	r16
    1926:	1f 93       	push	r17
    1928:	cf 93       	push	r28
    192a:	8c 01       	movw	r16, r24
    192c:	0f b6       	in	r0, 0x3f	; 63
    192e:	f8 94       	cli
    1930:	0f 92       	push	r0
    1932:	fc 01       	movw	r30, r24
    1934:	c2 a1       	ldd	r28, Z+34	; 0x22
    1936:	1c 16       	cp	r1, r28
    1938:	ac f4       	brge	.+42     	; 0x1964 <prvUnlockQueue+0x44>
    193a:	83 89       	ldd	r24, Z+19	; 0x13
    193c:	81 11       	cpse	r24, r1
    193e:	06 c0       	rjmp	.+12     	; 0x194c <prvUnlockQueue+0x2c>
    1940:	11 c0       	rjmp	.+34     	; 0x1964 <prvUnlockQueue+0x44>
    1942:	f8 01       	movw	r30, r16
    1944:	83 89       	ldd	r24, Z+19	; 0x13
    1946:	81 11       	cpse	r24, r1
    1948:	05 c0       	rjmp	.+10     	; 0x1954 <prvUnlockQueue+0x34>
    194a:	0c c0       	rjmp	.+24     	; 0x1964 <prvUnlockQueue+0x44>
    194c:	78 01       	movw	r14, r16
    194e:	f3 e1       	ldi	r31, 0x13	; 19
    1950:	ef 0e       	add	r14, r31
    1952:	f1 1c       	adc	r15, r1
    1954:	c7 01       	movw	r24, r14
    1956:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <xTaskRemoveFromEventList>
    195a:	81 11       	cpse	r24, r1
    195c:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <vTaskMissedYield>
    1960:	c1 50       	subi	r28, 0x01	; 1
    1962:	79 f7       	brne	.-34     	; 0x1942 <prvUnlockQueue+0x22>
    1964:	8f ef       	ldi	r24, 0xFF	; 255
    1966:	f8 01       	movw	r30, r16
    1968:	82 a3       	std	Z+34, r24	; 0x22
    196a:	0f 90       	pop	r0
    196c:	0f be       	out	0x3f, r0	; 63
    196e:	0f b6       	in	r0, 0x3f	; 63
    1970:	f8 94       	cli
    1972:	0f 92       	push	r0
    1974:	c1 a1       	ldd	r28, Z+33	; 0x21
    1976:	1c 16       	cp	r1, r28
    1978:	ac f4       	brge	.+42     	; 0x19a4 <prvUnlockQueue+0x84>
    197a:	80 85       	ldd	r24, Z+8	; 0x08
    197c:	81 11       	cpse	r24, r1
    197e:	06 c0       	rjmp	.+12     	; 0x198c <prvUnlockQueue+0x6c>
    1980:	11 c0       	rjmp	.+34     	; 0x19a4 <prvUnlockQueue+0x84>
    1982:	f8 01       	movw	r30, r16
    1984:	80 85       	ldd	r24, Z+8	; 0x08
    1986:	81 11       	cpse	r24, r1
    1988:	05 c0       	rjmp	.+10     	; 0x1994 <prvUnlockQueue+0x74>
    198a:	0c c0       	rjmp	.+24     	; 0x19a4 <prvUnlockQueue+0x84>
    198c:	78 01       	movw	r14, r16
    198e:	f8 e0       	ldi	r31, 0x08	; 8
    1990:	ef 0e       	add	r14, r31
    1992:	f1 1c       	adc	r15, r1
    1994:	c7 01       	movw	r24, r14
    1996:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <xTaskRemoveFromEventList>
    199a:	81 11       	cpse	r24, r1
    199c:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <vTaskMissedYield>
    19a0:	c1 50       	subi	r28, 0x01	; 1
    19a2:	79 f7       	brne	.-34     	; 0x1982 <prvUnlockQueue+0x62>
    19a4:	8f ef       	ldi	r24, 0xFF	; 255
    19a6:	f8 01       	movw	r30, r16
    19a8:	81 a3       	std	Z+33, r24	; 0x21
    19aa:	0f 90       	pop	r0
    19ac:	0f be       	out	0x3f, r0	; 63
    19ae:	cf 91       	pop	r28
    19b0:	1f 91       	pop	r17
    19b2:	0f 91       	pop	r16
    19b4:	ff 90       	pop	r15
    19b6:	ef 90       	pop	r14
    19b8:	08 95       	ret

000019ba <xQueueGenericReset>:
    19ba:	cf 93       	push	r28
    19bc:	df 93       	push	r29
    19be:	ec 01       	movw	r28, r24
    19c0:	0f b6       	in	r0, 0x3f	; 63
    19c2:	f8 94       	cli
    19c4:	0f 92       	push	r0
    19c6:	e8 81       	ld	r30, Y
    19c8:	f9 81       	ldd	r31, Y+1	; 0x01
    19ca:	8f 8d       	ldd	r24, Y+31	; 0x1f
    19cc:	28 a1       	ldd	r18, Y+32	; 0x20
    19ce:	90 e0       	ldi	r25, 0x00	; 0
    19d0:	30 e0       	ldi	r19, 0x00	; 0
    19d2:	82 9f       	mul	r24, r18
    19d4:	a0 01       	movw	r20, r0
    19d6:	83 9f       	mul	r24, r19
    19d8:	50 0d       	add	r21, r0
    19da:	92 9f       	mul	r25, r18
    19dc:	50 0d       	add	r21, r0
    19de:	11 24       	eor	r1, r1
    19e0:	4e 0f       	add	r20, r30
    19e2:	5f 1f       	adc	r21, r31
    19e4:	5d 83       	std	Y+5, r21	; 0x05
    19e6:	4c 83       	std	Y+4, r20	; 0x04
    19e8:	1e 8e       	std	Y+30, r1	; 0x1e
    19ea:	fb 83       	std	Y+3, r31	; 0x03
    19ec:	ea 83       	std	Y+2, r30	; 0x02
    19ee:	01 97       	sbiw	r24, 0x01	; 1
    19f0:	82 9f       	mul	r24, r18
    19f2:	a0 01       	movw	r20, r0
    19f4:	83 9f       	mul	r24, r19
    19f6:	50 0d       	add	r21, r0
    19f8:	92 9f       	mul	r25, r18
    19fa:	50 0d       	add	r21, r0
    19fc:	11 24       	eor	r1, r1
    19fe:	cf 01       	movw	r24, r30
    1a00:	84 0f       	add	r24, r20
    1a02:	95 1f       	adc	r25, r21
    1a04:	9f 83       	std	Y+7, r25	; 0x07
    1a06:	8e 83       	std	Y+6, r24	; 0x06
    1a08:	8f ef       	ldi	r24, 0xFF	; 255
    1a0a:	89 a3       	std	Y+33, r24	; 0x21
    1a0c:	8a a3       	std	Y+34, r24	; 0x22
    1a0e:	61 11       	cpse	r22, r1
    1a10:	0b c0       	rjmp	.+22     	; 0x1a28 <xQueueGenericReset+0x6e>
    1a12:	88 85       	ldd	r24, Y+8	; 0x08
    1a14:	88 23       	and	r24, r24
    1a16:	71 f0       	breq	.+28     	; 0x1a34 <xQueueGenericReset+0x7a>
    1a18:	ce 01       	movw	r24, r28
    1a1a:	08 96       	adiw	r24, 0x08	; 8
    1a1c:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <xTaskRemoveFromEventList>
    1a20:	88 23       	and	r24, r24
    1a22:	41 f0       	breq	.+16     	; 0x1a34 <xQueueGenericReset+0x7a>
    1a24:	32 de       	rcall	.-924    	; 0x168a <vPortYield>
    1a26:	06 c0       	rjmp	.+12     	; 0x1a34 <xQueueGenericReset+0x7a>
    1a28:	ce 01       	movw	r24, r28
    1a2a:	08 96       	adiw	r24, 0x08	; 8
    1a2c:	e6 dc       	rcall	.-1588   	; 0x13fa <vListInitialise>
    1a2e:	ce 01       	movw	r24, r28
    1a30:	43 96       	adiw	r24, 0x13	; 19
    1a32:	e3 dc       	rcall	.-1594   	; 0x13fa <vListInitialise>
    1a34:	0f 90       	pop	r0
    1a36:	0f be       	out	0x3f, r0	; 63
    1a38:	81 e0       	ldi	r24, 0x01	; 1
    1a3a:	df 91       	pop	r29
    1a3c:	cf 91       	pop	r28
    1a3e:	08 95       	ret

00001a40 <xQueueGenericCreate>:
    1a40:	ff 92       	push	r15
    1a42:	0f 93       	push	r16
    1a44:	1f 93       	push	r17
    1a46:	cf 93       	push	r28
    1a48:	df 93       	push	r29
    1a4a:	08 2f       	mov	r16, r24
    1a4c:	16 2f       	mov	r17, r22
    1a4e:	f4 2e       	mov	r15, r20
    1a50:	66 23       	and	r22, r22
    1a52:	b9 f0       	breq	.+46     	; 0x1a82 <xQueueGenericCreate+0x42>
    1a54:	86 9f       	mul	r24, r22
    1a56:	c0 01       	movw	r24, r0
    1a58:	11 24       	eor	r1, r1
    1a5a:	85 96       	adiw	r24, 0x25	; 37
    1a5c:	e4 db       	rcall	.-2104   	; 0x1226 <pvPortMalloc>
    1a5e:	ec 01       	movw	r28, r24
    1a60:	00 97       	sbiw	r24, 0x00	; 0
    1a62:	41 f4       	brne	.+16     	; 0x1a74 <xQueueGenericCreate+0x34>
    1a64:	14 c0       	rjmp	.+40     	; 0x1a8e <xQueueGenericCreate+0x4e>
    1a66:	0f 8f       	std	Y+31, r16	; 0x1f
    1a68:	18 a3       	std	Y+32, r17	; 0x20
    1a6a:	61 e0       	ldi	r22, 0x01	; 1
    1a6c:	ce 01       	movw	r24, r28
    1a6e:	a5 df       	rcall	.-182    	; 0x19ba <xQueueGenericReset>
    1a70:	fc a2       	std	Y+36, r15	; 0x24
    1a72:	0d c0       	rjmp	.+26     	; 0x1a8e <xQueueGenericCreate+0x4e>
    1a74:	85 96       	adiw	r24, 0x25	; 37
    1a76:	99 83       	std	Y+1, r25	; 0x01
    1a78:	88 83       	st	Y, r24
    1a7a:	f5 cf       	rjmp	.-22     	; 0x1a66 <xQueueGenericCreate+0x26>
    1a7c:	d9 83       	std	Y+1, r29	; 0x01
    1a7e:	c8 83       	st	Y, r28
    1a80:	f2 cf       	rjmp	.-28     	; 0x1a66 <xQueueGenericCreate+0x26>
    1a82:	85 e2       	ldi	r24, 0x25	; 37
    1a84:	90 e0       	ldi	r25, 0x00	; 0
    1a86:	cf db       	rcall	.-2146   	; 0x1226 <pvPortMalloc>
    1a88:	ec 01       	movw	r28, r24
    1a8a:	89 2b       	or	r24, r25
    1a8c:	b9 f7       	brne	.-18     	; 0x1a7c <xQueueGenericCreate+0x3c>
    1a8e:	ce 01       	movw	r24, r28
    1a90:	df 91       	pop	r29
    1a92:	cf 91       	pop	r28
    1a94:	1f 91       	pop	r17
    1a96:	0f 91       	pop	r16
    1a98:	ff 90       	pop	r15
    1a9a:	08 95       	ret

00001a9c <xQueueGenericSend>:
    1a9c:	9f 92       	push	r9
    1a9e:	af 92       	push	r10
    1aa0:	bf 92       	push	r11
    1aa2:	cf 92       	push	r12
    1aa4:	df 92       	push	r13
    1aa6:	ef 92       	push	r14
    1aa8:	ff 92       	push	r15
    1aaa:	0f 93       	push	r16
    1aac:	1f 93       	push	r17
    1aae:	cf 93       	push	r28
    1ab0:	df 93       	push	r29
    1ab2:	cd b7       	in	r28, 0x3d	; 61
    1ab4:	de b7       	in	r29, 0x3e	; 62
    1ab6:	29 97       	sbiw	r28, 0x09	; 9
    1ab8:	0f b6       	in	r0, 0x3f	; 63
    1aba:	f8 94       	cli
    1abc:	de bf       	out	0x3e, r29	; 62
    1abe:	0f be       	out	0x3f, r0	; 63
    1ac0:	cd bf       	out	0x3d, r28	; 61
    1ac2:	7c 01       	movw	r14, r24
    1ac4:	5b 01       	movw	r10, r22
    1ac6:	2e 83       	std	Y+6, r18	; 0x06
    1ac8:	3f 83       	std	Y+7, r19	; 0x07
    1aca:	48 87       	std	Y+8, r20	; 0x08
    1acc:	59 87       	std	Y+9, r21	; 0x09
    1ace:	10 e0       	ldi	r17, 0x00	; 0
    1ad0:	99 24       	eor	r9, r9
    1ad2:	93 94       	inc	r9
    1ad4:	6c 01       	movw	r12, r24
    1ad6:	88 e0       	ldi	r24, 0x08	; 8
    1ad8:	c8 0e       	add	r12, r24
    1ada:	d1 1c       	adc	r13, r1
    1adc:	0f b6       	in	r0, 0x3f	; 63
    1ade:	f8 94       	cli
    1ae0:	0f 92       	push	r0
    1ae2:	f7 01       	movw	r30, r14
    1ae4:	96 8d       	ldd	r25, Z+30	; 0x1e
    1ae6:	87 8d       	ldd	r24, Z+31	; 0x1f
    1ae8:	98 17       	cp	r25, r24
    1aea:	10 f0       	brcs	.+4      	; 0x1af0 <xQueueGenericSend+0x54>
    1aec:	02 30       	cpi	r16, 0x02	; 2
    1aee:	b1 f4       	brne	.+44     	; 0x1b1c <xQueueGenericSend+0x80>
    1af0:	40 2f       	mov	r20, r16
    1af2:	b5 01       	movw	r22, r10
    1af4:	c7 01       	movw	r24, r14
    1af6:	9b de       	rcall	.-714    	; 0x182e <prvCopyDataToQueue>
    1af8:	f7 01       	movw	r30, r14
    1afa:	93 89       	ldd	r25, Z+19	; 0x13
    1afc:	99 23       	and	r25, r25
    1afe:	41 f0       	breq	.+16     	; 0x1b10 <xQueueGenericSend+0x74>
    1b00:	c7 01       	movw	r24, r14
    1b02:	43 96       	adiw	r24, 0x13	; 19
    1b04:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <xTaskRemoveFromEventList>
    1b08:	88 23       	and	r24, r24
    1b0a:	21 f0       	breq	.+8      	; 0x1b14 <xQueueGenericSend+0x78>
    1b0c:	be dd       	rcall	.-1156   	; 0x168a <vPortYield>
    1b0e:	02 c0       	rjmp	.+4      	; 0x1b14 <xQueueGenericSend+0x78>
    1b10:	81 11       	cpse	r24, r1
    1b12:	bb dd       	rcall	.-1162   	; 0x168a <vPortYield>
    1b14:	0f 90       	pop	r0
    1b16:	0f be       	out	0x3f, r0	; 63
    1b18:	81 e0       	ldi	r24, 0x01	; 1
    1b1a:	4d c0       	rjmp	.+154    	; 0x1bb6 <xQueueGenericSend+0x11a>
    1b1c:	8e 81       	ldd	r24, Y+6	; 0x06
    1b1e:	9f 81       	ldd	r25, Y+7	; 0x07
    1b20:	a8 85       	ldd	r26, Y+8	; 0x08
    1b22:	b9 85       	ldd	r27, Y+9	; 0x09
    1b24:	89 2b       	or	r24, r25
    1b26:	8a 2b       	or	r24, r26
    1b28:	8b 2b       	or	r24, r27
    1b2a:	21 f4       	brne	.+8      	; 0x1b34 <xQueueGenericSend+0x98>
    1b2c:	0f 90       	pop	r0
    1b2e:	0f be       	out	0x3f, r0	; 63
    1b30:	80 e0       	ldi	r24, 0x00	; 0
    1b32:	41 c0       	rjmp	.+130    	; 0x1bb6 <xQueueGenericSend+0x11a>
    1b34:	11 11       	cpse	r17, r1
    1b36:	05 c0       	rjmp	.+10     	; 0x1b42 <xQueueGenericSend+0xa6>
    1b38:	ce 01       	movw	r24, r28
    1b3a:	01 96       	adiw	r24, 0x01	; 1
    1b3c:	0e 94 58 16 	call	0x2cb0	; 0x2cb0 <vTaskInternalSetTimeOutState>
    1b40:	19 2d       	mov	r17, r9
    1b42:	0f 90       	pop	r0
    1b44:	0f be       	out	0x3f, r0	; 63
    1b46:	d0 d5       	rcall	.+2976   	; 0x26e8 <vTaskSuspendAll>
    1b48:	0f b6       	in	r0, 0x3f	; 63
    1b4a:	f8 94       	cli
    1b4c:	0f 92       	push	r0
    1b4e:	f7 01       	movw	r30, r14
    1b50:	81 a1       	ldd	r24, Z+33	; 0x21
    1b52:	8f 3f       	cpi	r24, 0xFF	; 255
    1b54:	09 f4       	brne	.+2      	; 0x1b58 <xQueueGenericSend+0xbc>
    1b56:	11 a2       	std	Z+33, r1	; 0x21
    1b58:	f7 01       	movw	r30, r14
    1b5a:	82 a1       	ldd	r24, Z+34	; 0x22
    1b5c:	8f 3f       	cpi	r24, 0xFF	; 255
    1b5e:	09 f4       	brne	.+2      	; 0x1b62 <xQueueGenericSend+0xc6>
    1b60:	12 a2       	std	Z+34, r1	; 0x22
    1b62:	0f 90       	pop	r0
    1b64:	0f be       	out	0x3f, r0	; 63
    1b66:	be 01       	movw	r22, r28
    1b68:	6a 5f       	subi	r22, 0xFA	; 250
    1b6a:	7f 4f       	sbci	r23, 0xFF	; 255
    1b6c:	ce 01       	movw	r24, r28
    1b6e:	01 96       	adiw	r24, 0x01	; 1
    1b70:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <xTaskCheckForTimeOut>
    1b74:	81 11       	cpse	r24, r1
    1b76:	1b c0       	rjmp	.+54     	; 0x1bae <xQueueGenericSend+0x112>
    1b78:	0f b6       	in	r0, 0x3f	; 63
    1b7a:	f8 94       	cli
    1b7c:	0f 92       	push	r0
    1b7e:	f7 01       	movw	r30, r14
    1b80:	96 8d       	ldd	r25, Z+30	; 0x1e
    1b82:	87 8d       	ldd	r24, Z+31	; 0x1f
    1b84:	0f 90       	pop	r0
    1b86:	0f be       	out	0x3f, r0	; 63
    1b88:	98 13       	cpse	r25, r24
    1b8a:	0d c0       	rjmp	.+26     	; 0x1ba6 <xQueueGenericSend+0x10a>
    1b8c:	4e 81       	ldd	r20, Y+6	; 0x06
    1b8e:	5f 81       	ldd	r21, Y+7	; 0x07
    1b90:	68 85       	ldd	r22, Y+8	; 0x08
    1b92:	79 85       	ldd	r23, Y+9	; 0x09
    1b94:	c6 01       	movw	r24, r12
    1b96:	a5 d7       	rcall	.+3914   	; 0x2ae2 <vTaskPlaceOnEventList>
    1b98:	c7 01       	movw	r24, r14
    1b9a:	c2 de       	rcall	.-636    	; 0x1920 <prvUnlockQueue>
    1b9c:	8e d6       	rcall	.+3356   	; 0x28ba <xTaskResumeAll>
    1b9e:	81 11       	cpse	r24, r1
    1ba0:	9d cf       	rjmp	.-198    	; 0x1adc <xQueueGenericSend+0x40>
    1ba2:	73 dd       	rcall	.-1306   	; 0x168a <vPortYield>
    1ba4:	9b cf       	rjmp	.-202    	; 0x1adc <xQueueGenericSend+0x40>
    1ba6:	c7 01       	movw	r24, r14
    1ba8:	bb de       	rcall	.-650    	; 0x1920 <prvUnlockQueue>
    1baa:	87 d6       	rcall	.+3342   	; 0x28ba <xTaskResumeAll>
    1bac:	97 cf       	rjmp	.-210    	; 0x1adc <xQueueGenericSend+0x40>
    1bae:	c7 01       	movw	r24, r14
    1bb0:	b7 de       	rcall	.-658    	; 0x1920 <prvUnlockQueue>
    1bb2:	83 d6       	rcall	.+3334   	; 0x28ba <xTaskResumeAll>
    1bb4:	80 e0       	ldi	r24, 0x00	; 0
    1bb6:	29 96       	adiw	r28, 0x09	; 9
    1bb8:	0f b6       	in	r0, 0x3f	; 63
    1bba:	f8 94       	cli
    1bbc:	de bf       	out	0x3e, r29	; 62
    1bbe:	0f be       	out	0x3f, r0	; 63
    1bc0:	cd bf       	out	0x3d, r28	; 61
    1bc2:	df 91       	pop	r29
    1bc4:	cf 91       	pop	r28
    1bc6:	1f 91       	pop	r17
    1bc8:	0f 91       	pop	r16
    1bca:	ff 90       	pop	r15
    1bcc:	ef 90       	pop	r14
    1bce:	df 90       	pop	r13
    1bd0:	cf 90       	pop	r12
    1bd2:	bf 90       	pop	r11
    1bd4:	af 90       	pop	r10
    1bd6:	9f 90       	pop	r9
    1bd8:	08 95       	ret

00001bda <xQueueCreateMutex>:
    1bda:	0f 93       	push	r16
    1bdc:	cf 93       	push	r28
    1bde:	df 93       	push	r29
    1be0:	48 2f       	mov	r20, r24
    1be2:	60 e0       	ldi	r22, 0x00	; 0
    1be4:	81 e0       	ldi	r24, 0x01	; 1
    1be6:	2c df       	rcall	.-424    	; 0x1a40 <xQueueGenericCreate>
    1be8:	ec 01       	movw	r28, r24
    1bea:	00 97       	sbiw	r24, 0x00	; 0
    1bec:	61 f0       	breq	.+24     	; 0x1c06 <xQueueCreateMutex+0x2c>
    1bee:	1d 82       	std	Y+5, r1	; 0x05
    1bf0:	1c 82       	std	Y+4, r1	; 0x04
    1bf2:	19 82       	std	Y+1, r1	; 0x01
    1bf4:	18 82       	st	Y, r1
    1bf6:	1e 82       	std	Y+6, r1	; 0x06
    1bf8:	00 e0       	ldi	r16, 0x00	; 0
    1bfa:	20 e0       	ldi	r18, 0x00	; 0
    1bfc:	30 e0       	ldi	r19, 0x00	; 0
    1bfe:	a9 01       	movw	r20, r18
    1c00:	60 e0       	ldi	r22, 0x00	; 0
    1c02:	70 e0       	ldi	r23, 0x00	; 0
    1c04:	4b df       	rcall	.-362    	; 0x1a9c <xQueueGenericSend>
    1c06:	ce 01       	movw	r24, r28
    1c08:	df 91       	pop	r29
    1c0a:	cf 91       	pop	r28
    1c0c:	0f 91       	pop	r16
    1c0e:	08 95       	ret

00001c10 <xQueueGenericSendFromISR>:
    1c10:	ef 92       	push	r14
    1c12:	ff 92       	push	r15
    1c14:	0f 93       	push	r16
    1c16:	1f 93       	push	r17
    1c18:	cf 93       	push	r28
    1c1a:	df 93       	push	r29
    1c1c:	8a 01       	movw	r16, r20
    1c1e:	fc 01       	movw	r30, r24
    1c20:	56 8d       	ldd	r21, Z+30	; 0x1e
    1c22:	37 8d       	ldd	r19, Z+31	; 0x1f
    1c24:	53 17       	cp	r21, r19
    1c26:	10 f0       	brcs	.+4      	; 0x1c2c <xQueueGenericSendFromISR+0x1c>
    1c28:	22 30       	cpi	r18, 0x02	; 2
    1c2a:	e1 f4       	brne	.+56     	; 0x1c64 <xQueueGenericSendFromISR+0x54>
    1c2c:	42 2f       	mov	r20, r18
    1c2e:	78 01       	movw	r14, r16
    1c30:	ec 01       	movw	r28, r24
    1c32:	1a a1       	ldd	r17, Y+34	; 0x22
    1c34:	fc dd       	rcall	.-1032   	; 0x182e <prvCopyDataToQueue>
    1c36:	1f 3f       	cpi	r17, 0xFF	; 255
    1c38:	79 f4       	brne	.+30     	; 0x1c58 <xQueueGenericSendFromISR+0x48>
    1c3a:	8b 89       	ldd	r24, Y+19	; 0x13
    1c3c:	88 23       	and	r24, r24
    1c3e:	a1 f0       	breq	.+40     	; 0x1c68 <xQueueGenericSendFromISR+0x58>
    1c40:	ce 01       	movw	r24, r28
    1c42:	43 96       	adiw	r24, 0x13	; 19
    1c44:	a9 d7       	rcall	.+3922   	; 0x2b98 <xTaskRemoveFromEventList>
    1c46:	88 23       	and	r24, r24
    1c48:	89 f0       	breq	.+34     	; 0x1c6c <xQueueGenericSendFromISR+0x5c>
    1c4a:	e1 14       	cp	r14, r1
    1c4c:	f1 04       	cpc	r15, r1
    1c4e:	81 f0       	breq	.+32     	; 0x1c70 <xQueueGenericSendFromISR+0x60>
    1c50:	81 e0       	ldi	r24, 0x01	; 1
    1c52:	f7 01       	movw	r30, r14
    1c54:	80 83       	st	Z, r24
    1c56:	0d c0       	rjmp	.+26     	; 0x1c72 <xQueueGenericSendFromISR+0x62>
    1c58:	ff 24       	eor	r15, r15
    1c5a:	f3 94       	inc	r15
    1c5c:	f1 0e       	add	r15, r17
    1c5e:	fa a2       	std	Y+34, r15	; 0x22
    1c60:	81 e0       	ldi	r24, 0x01	; 1
    1c62:	07 c0       	rjmp	.+14     	; 0x1c72 <xQueueGenericSendFromISR+0x62>
    1c64:	80 e0       	ldi	r24, 0x00	; 0
    1c66:	05 c0       	rjmp	.+10     	; 0x1c72 <xQueueGenericSendFromISR+0x62>
    1c68:	81 e0       	ldi	r24, 0x01	; 1
    1c6a:	03 c0       	rjmp	.+6      	; 0x1c72 <xQueueGenericSendFromISR+0x62>
    1c6c:	81 e0       	ldi	r24, 0x01	; 1
    1c6e:	01 c0       	rjmp	.+2      	; 0x1c72 <xQueueGenericSendFromISR+0x62>
    1c70:	81 e0       	ldi	r24, 0x01	; 1
    1c72:	df 91       	pop	r29
    1c74:	cf 91       	pop	r28
    1c76:	1f 91       	pop	r17
    1c78:	0f 91       	pop	r16
    1c7a:	ff 90       	pop	r15
    1c7c:	ef 90       	pop	r14
    1c7e:	08 95       	ret

00001c80 <xQueueReceive>:
    1c80:	9f 92       	push	r9
    1c82:	af 92       	push	r10
    1c84:	bf 92       	push	r11
    1c86:	cf 92       	push	r12
    1c88:	df 92       	push	r13
    1c8a:	ef 92       	push	r14
    1c8c:	ff 92       	push	r15
    1c8e:	0f 93       	push	r16
    1c90:	1f 93       	push	r17
    1c92:	cf 93       	push	r28
    1c94:	df 93       	push	r29
    1c96:	cd b7       	in	r28, 0x3d	; 61
    1c98:	de b7       	in	r29, 0x3e	; 62
    1c9a:	29 97       	sbiw	r28, 0x09	; 9
    1c9c:	0f b6       	in	r0, 0x3f	; 63
    1c9e:	f8 94       	cli
    1ca0:	de bf       	out	0x3e, r29	; 62
    1ca2:	0f be       	out	0x3f, r0	; 63
    1ca4:	cd bf       	out	0x3d, r28	; 61
    1ca6:	8c 01       	movw	r16, r24
    1ca8:	5b 01       	movw	r10, r22
    1caa:	2e 83       	std	Y+6, r18	; 0x06
    1cac:	3f 83       	std	Y+7, r19	; 0x07
    1cae:	48 87       	std	Y+8, r20	; 0x08
    1cb0:	59 87       	std	Y+9, r21	; 0x09
    1cb2:	e1 2c       	mov	r14, r1
    1cb4:	99 24       	eor	r9, r9
    1cb6:	93 94       	inc	r9
    1cb8:	6c 01       	movw	r12, r24
    1cba:	83 e1       	ldi	r24, 0x13	; 19
    1cbc:	c8 0e       	add	r12, r24
    1cbe:	d1 1c       	adc	r13, r1
    1cc0:	0f b6       	in	r0, 0x3f	; 63
    1cc2:	f8 94       	cli
    1cc4:	0f 92       	push	r0
    1cc6:	f8 01       	movw	r30, r16
    1cc8:	f6 8c       	ldd	r15, Z+30	; 0x1e
    1cca:	ff 20       	and	r15, r15
    1ccc:	91 f0       	breq	.+36     	; 0x1cf2 <xQueueReceive+0x72>
    1cce:	b5 01       	movw	r22, r10
    1cd0:	c8 01       	movw	r24, r16
    1cd2:	0c de       	rcall	.-1000   	; 0x18ec <prvCopyDataFromQueue>
    1cd4:	fa 94       	dec	r15
    1cd6:	f8 01       	movw	r30, r16
    1cd8:	f6 8e       	std	Z+30, r15	; 0x1e
    1cda:	80 85       	ldd	r24, Z+8	; 0x08
    1cdc:	88 23       	and	r24, r24
    1cde:	29 f0       	breq	.+10     	; 0x1cea <xQueueReceive+0x6a>
    1ce0:	c8 01       	movw	r24, r16
    1ce2:	08 96       	adiw	r24, 0x08	; 8
    1ce4:	59 d7       	rcall	.+3762   	; 0x2b98 <xTaskRemoveFromEventList>
    1ce6:	81 11       	cpse	r24, r1
    1ce8:	d0 dc       	rcall	.-1632   	; 0x168a <vPortYield>
    1cea:	0f 90       	pop	r0
    1cec:	0f be       	out	0x3f, r0	; 63
    1cee:	81 e0       	ldi	r24, 0x01	; 1
    1cf0:	4a c0       	rjmp	.+148    	; 0x1d86 <xQueueReceive+0x106>
    1cf2:	8e 81       	ldd	r24, Y+6	; 0x06
    1cf4:	9f 81       	ldd	r25, Y+7	; 0x07
    1cf6:	a8 85       	ldd	r26, Y+8	; 0x08
    1cf8:	b9 85       	ldd	r27, Y+9	; 0x09
    1cfa:	89 2b       	or	r24, r25
    1cfc:	8a 2b       	or	r24, r26
    1cfe:	8b 2b       	or	r24, r27
    1d00:	21 f4       	brne	.+8      	; 0x1d0a <xQueueReceive+0x8a>
    1d02:	0f 90       	pop	r0
    1d04:	0f be       	out	0x3f, r0	; 63
    1d06:	80 e0       	ldi	r24, 0x00	; 0
    1d08:	3e c0       	rjmp	.+124    	; 0x1d86 <xQueueReceive+0x106>
    1d0a:	e1 10       	cpse	r14, r1
    1d0c:	04 c0       	rjmp	.+8      	; 0x1d16 <xQueueReceive+0x96>
    1d0e:	ce 01       	movw	r24, r28
    1d10:	01 96       	adiw	r24, 0x01	; 1
    1d12:	ce d7       	rcall	.+3996   	; 0x2cb0 <vTaskInternalSetTimeOutState>
    1d14:	e9 2c       	mov	r14, r9
    1d16:	0f 90       	pop	r0
    1d18:	0f be       	out	0x3f, r0	; 63
    1d1a:	e6 d4       	rcall	.+2508   	; 0x26e8 <vTaskSuspendAll>
    1d1c:	0f b6       	in	r0, 0x3f	; 63
    1d1e:	f8 94       	cli
    1d20:	0f 92       	push	r0
    1d22:	f8 01       	movw	r30, r16
    1d24:	81 a1       	ldd	r24, Z+33	; 0x21
    1d26:	8f 3f       	cpi	r24, 0xFF	; 255
    1d28:	09 f4       	brne	.+2      	; 0x1d2c <xQueueReceive+0xac>
    1d2a:	11 a2       	std	Z+33, r1	; 0x21
    1d2c:	f8 01       	movw	r30, r16
    1d2e:	82 a1       	ldd	r24, Z+34	; 0x22
    1d30:	8f 3f       	cpi	r24, 0xFF	; 255
    1d32:	09 f4       	brne	.+2      	; 0x1d36 <xQueueReceive+0xb6>
    1d34:	12 a2       	std	Z+34, r1	; 0x22
    1d36:	0f 90       	pop	r0
    1d38:	0f be       	out	0x3f, r0	; 63
    1d3a:	be 01       	movw	r22, r28
    1d3c:	6a 5f       	subi	r22, 0xFA	; 250
    1d3e:	7f 4f       	sbci	r23, 0xFF	; 255
    1d40:	ce 01       	movw	r24, r28
    1d42:	01 96       	adiw	r24, 0x01	; 1
    1d44:	c6 d7       	rcall	.+3980   	; 0x2cd2 <xTaskCheckForTimeOut>
    1d46:	81 11       	cpse	r24, r1
    1d48:	15 c0       	rjmp	.+42     	; 0x1d74 <xQueueReceive+0xf4>
    1d4a:	c8 01       	movw	r24, r16
    1d4c:	65 dd       	rcall	.-1334   	; 0x1818 <prvIsQueueEmpty>
    1d4e:	88 23       	and	r24, r24
    1d50:	69 f0       	breq	.+26     	; 0x1d6c <xQueueReceive+0xec>
    1d52:	4e 81       	ldd	r20, Y+6	; 0x06
    1d54:	5f 81       	ldd	r21, Y+7	; 0x07
    1d56:	68 85       	ldd	r22, Y+8	; 0x08
    1d58:	79 85       	ldd	r23, Y+9	; 0x09
    1d5a:	c6 01       	movw	r24, r12
    1d5c:	c2 d6       	rcall	.+3460   	; 0x2ae2 <vTaskPlaceOnEventList>
    1d5e:	c8 01       	movw	r24, r16
    1d60:	df dd       	rcall	.-1090   	; 0x1920 <prvUnlockQueue>
    1d62:	ab d5       	rcall	.+2902   	; 0x28ba <xTaskResumeAll>
    1d64:	81 11       	cpse	r24, r1
    1d66:	ac cf       	rjmp	.-168    	; 0x1cc0 <xQueueReceive+0x40>
    1d68:	90 dc       	rcall	.-1760   	; 0x168a <vPortYield>
    1d6a:	aa cf       	rjmp	.-172    	; 0x1cc0 <xQueueReceive+0x40>
    1d6c:	c8 01       	movw	r24, r16
    1d6e:	d8 dd       	rcall	.-1104   	; 0x1920 <prvUnlockQueue>
    1d70:	a4 d5       	rcall	.+2888   	; 0x28ba <xTaskResumeAll>
    1d72:	a6 cf       	rjmp	.-180    	; 0x1cc0 <xQueueReceive+0x40>
    1d74:	c8 01       	movw	r24, r16
    1d76:	d4 dd       	rcall	.-1112   	; 0x1920 <prvUnlockQueue>
    1d78:	a0 d5       	rcall	.+2880   	; 0x28ba <xTaskResumeAll>
    1d7a:	c8 01       	movw	r24, r16
    1d7c:	4d dd       	rcall	.-1382   	; 0x1818 <prvIsQueueEmpty>
    1d7e:	88 23       	and	r24, r24
    1d80:	09 f4       	brne	.+2      	; 0x1d84 <xQueueReceive+0x104>
    1d82:	9e cf       	rjmp	.-196    	; 0x1cc0 <xQueueReceive+0x40>
    1d84:	80 e0       	ldi	r24, 0x00	; 0
    1d86:	29 96       	adiw	r28, 0x09	; 9
    1d88:	0f b6       	in	r0, 0x3f	; 63
    1d8a:	f8 94       	cli
    1d8c:	de bf       	out	0x3e, r29	; 62
    1d8e:	0f be       	out	0x3f, r0	; 63
    1d90:	cd bf       	out	0x3d, r28	; 61
    1d92:	df 91       	pop	r29
    1d94:	cf 91       	pop	r28
    1d96:	1f 91       	pop	r17
    1d98:	0f 91       	pop	r16
    1d9a:	ff 90       	pop	r15
    1d9c:	ef 90       	pop	r14
    1d9e:	df 90       	pop	r13
    1da0:	cf 90       	pop	r12
    1da2:	bf 90       	pop	r11
    1da4:	af 90       	pop	r10
    1da6:	9f 90       	pop	r9
    1da8:	08 95       	ret

00001daa <xQueueSemaphoreTake>:
    1daa:	bf 92       	push	r11
    1dac:	cf 92       	push	r12
    1dae:	df 92       	push	r13
    1db0:	ef 92       	push	r14
    1db2:	ff 92       	push	r15
    1db4:	0f 93       	push	r16
    1db6:	1f 93       	push	r17
    1db8:	cf 93       	push	r28
    1dba:	df 93       	push	r29
    1dbc:	cd b7       	in	r28, 0x3d	; 61
    1dbe:	de b7       	in	r29, 0x3e	; 62
    1dc0:	29 97       	sbiw	r28, 0x09	; 9
    1dc2:	0f b6       	in	r0, 0x3f	; 63
    1dc4:	f8 94       	cli
    1dc6:	de bf       	out	0x3e, r29	; 62
    1dc8:	0f be       	out	0x3f, r0	; 63
    1dca:	cd bf       	out	0x3d, r28	; 61
    1dcc:	8c 01       	movw	r16, r24
    1dce:	4e 83       	std	Y+6, r20	; 0x06
    1dd0:	5f 83       	std	Y+7, r21	; 0x07
    1dd2:	68 87       	std	Y+8, r22	; 0x08
    1dd4:	79 87       	std	Y+9, r23	; 0x09
    1dd6:	b1 2c       	mov	r11, r1
    1dd8:	d1 2c       	mov	r13, r1
    1dda:	cc 24       	eor	r12, r12
    1ddc:	c3 94       	inc	r12
    1dde:	7c 01       	movw	r14, r24
    1de0:	83 e1       	ldi	r24, 0x13	; 19
    1de2:	e8 0e       	add	r14, r24
    1de4:	f1 1c       	adc	r15, r1
    1de6:	0f b6       	in	r0, 0x3f	; 63
    1de8:	f8 94       	cli
    1dea:	0f 92       	push	r0
    1dec:	d8 01       	movw	r26, r16
    1dee:	5e 96       	adiw	r26, 0x1e	; 30
    1df0:	8c 91       	ld	r24, X
    1df2:	5e 97       	sbiw	r26, 0x1e	; 30
    1df4:	88 23       	and	r24, r24
    1df6:	d9 f0       	breq	.+54     	; 0x1e2e <xQueueSemaphoreTake+0x84>
    1df8:	81 50       	subi	r24, 0x01	; 1
    1dfa:	5e 96       	adiw	r26, 0x1e	; 30
    1dfc:	8c 93       	st	X, r24
    1dfe:	5e 97       	sbiw	r26, 0x1e	; 30
    1e00:	8d 91       	ld	r24, X+
    1e02:	9c 91       	ld	r25, X
    1e04:	89 2b       	or	r24, r25
    1e06:	29 f4       	brne	.+10     	; 0x1e12 <xQueueSemaphoreTake+0x68>
    1e08:	0e 94 f7 17 	call	0x2fee	; 0x2fee <pvTaskIncrementMutexHeldCount>
    1e0c:	f8 01       	movw	r30, r16
    1e0e:	95 83       	std	Z+5, r25	; 0x05
    1e10:	84 83       	std	Z+4, r24	; 0x04
    1e12:	d8 01       	movw	r26, r16
    1e14:	18 96       	adiw	r26, 0x08	; 8
    1e16:	8c 91       	ld	r24, X
    1e18:	88 23       	and	r24, r24
    1e1a:	29 f0       	breq	.+10     	; 0x1e26 <xQueueSemaphoreTake+0x7c>
    1e1c:	c8 01       	movw	r24, r16
    1e1e:	08 96       	adiw	r24, 0x08	; 8
    1e20:	bb d6       	rcall	.+3446   	; 0x2b98 <xTaskRemoveFromEventList>
    1e22:	81 11       	cpse	r24, r1
    1e24:	32 dc       	rcall	.-1948   	; 0x168a <vPortYield>
    1e26:	0f 90       	pop	r0
    1e28:	0f be       	out	0x3f, r0	; 63
    1e2a:	81 e0       	ldi	r24, 0x01	; 1
    1e2c:	76 c0       	rjmp	.+236    	; 0x1f1a <xQueueSemaphoreTake+0x170>
    1e2e:	8e 81       	ldd	r24, Y+6	; 0x06
    1e30:	9f 81       	ldd	r25, Y+7	; 0x07
    1e32:	a8 85       	ldd	r26, Y+8	; 0x08
    1e34:	b9 85       	ldd	r27, Y+9	; 0x09
    1e36:	89 2b       	or	r24, r25
    1e38:	8a 2b       	or	r24, r26
    1e3a:	8b 2b       	or	r24, r27
    1e3c:	21 f4       	brne	.+8      	; 0x1e46 <xQueueSemaphoreTake+0x9c>
    1e3e:	0f 90       	pop	r0
    1e40:	0f be       	out	0x3f, r0	; 63
    1e42:	80 e0       	ldi	r24, 0x00	; 0
    1e44:	6a c0       	rjmp	.+212    	; 0x1f1a <xQueueSemaphoreTake+0x170>
    1e46:	d1 10       	cpse	r13, r1
    1e48:	04 c0       	rjmp	.+8      	; 0x1e52 <xQueueSemaphoreTake+0xa8>
    1e4a:	ce 01       	movw	r24, r28
    1e4c:	01 96       	adiw	r24, 0x01	; 1
    1e4e:	30 d7       	rcall	.+3680   	; 0x2cb0 <vTaskInternalSetTimeOutState>
    1e50:	dc 2c       	mov	r13, r12
    1e52:	0f 90       	pop	r0
    1e54:	0f be       	out	0x3f, r0	; 63
    1e56:	48 d4       	rcall	.+2192   	; 0x26e8 <vTaskSuspendAll>
    1e58:	0f b6       	in	r0, 0x3f	; 63
    1e5a:	f8 94       	cli
    1e5c:	0f 92       	push	r0
    1e5e:	f8 01       	movw	r30, r16
    1e60:	81 a1       	ldd	r24, Z+33	; 0x21
    1e62:	8f 3f       	cpi	r24, 0xFF	; 255
    1e64:	09 f4       	brne	.+2      	; 0x1e68 <xQueueSemaphoreTake+0xbe>
    1e66:	11 a2       	std	Z+33, r1	; 0x21
    1e68:	d8 01       	movw	r26, r16
    1e6a:	92 96       	adiw	r26, 0x22	; 34
    1e6c:	8c 91       	ld	r24, X
    1e6e:	92 97       	sbiw	r26, 0x22	; 34
    1e70:	8f 3f       	cpi	r24, 0xFF	; 255
    1e72:	11 f4       	brne	.+4      	; 0x1e78 <xQueueSemaphoreTake+0xce>
    1e74:	92 96       	adiw	r26, 0x22	; 34
    1e76:	1c 92       	st	X, r1
    1e78:	0f 90       	pop	r0
    1e7a:	0f be       	out	0x3f, r0	; 63
    1e7c:	be 01       	movw	r22, r28
    1e7e:	6a 5f       	subi	r22, 0xFA	; 250
    1e80:	7f 4f       	sbci	r23, 0xFF	; 255
    1e82:	ce 01       	movw	r24, r28
    1e84:	01 96       	adiw	r24, 0x01	; 1
    1e86:	25 d7       	rcall	.+3658   	; 0x2cd2 <xTaskCheckForTimeOut>
    1e88:	81 11       	cpse	r24, r1
    1e8a:	23 c0       	rjmp	.+70     	; 0x1ed2 <xQueueSemaphoreTake+0x128>
    1e8c:	c8 01       	movw	r24, r16
    1e8e:	c4 dc       	rcall	.-1656   	; 0x1818 <prvIsQueueEmpty>
    1e90:	88 23       	and	r24, r24
    1e92:	d9 f0       	breq	.+54     	; 0x1eca <xQueueSemaphoreTake+0x120>
    1e94:	f8 01       	movw	r30, r16
    1e96:	80 81       	ld	r24, Z
    1e98:	91 81       	ldd	r25, Z+1	; 0x01
    1e9a:	89 2b       	or	r24, r25
    1e9c:	49 f4       	brne	.+18     	; 0x1eb0 <xQueueSemaphoreTake+0x106>
    1e9e:	0f b6       	in	r0, 0x3f	; 63
    1ea0:	f8 94       	cli
    1ea2:	0f 92       	push	r0
    1ea4:	84 81       	ldd	r24, Z+4	; 0x04
    1ea6:	95 81       	ldd	r25, Z+5	; 0x05
    1ea8:	80 d7       	rcall	.+3840   	; 0x2daa <xTaskPriorityInherit>
    1eaa:	b8 2e       	mov	r11, r24
    1eac:	0f 90       	pop	r0
    1eae:	0f be       	out	0x3f, r0	; 63
    1eb0:	4e 81       	ldd	r20, Y+6	; 0x06
    1eb2:	5f 81       	ldd	r21, Y+7	; 0x07
    1eb4:	68 85       	ldd	r22, Y+8	; 0x08
    1eb6:	79 85       	ldd	r23, Y+9	; 0x09
    1eb8:	c7 01       	movw	r24, r14
    1eba:	13 d6       	rcall	.+3110   	; 0x2ae2 <vTaskPlaceOnEventList>
    1ebc:	c8 01       	movw	r24, r16
    1ebe:	30 dd       	rcall	.-1440   	; 0x1920 <prvUnlockQueue>
    1ec0:	fc d4       	rcall	.+2552   	; 0x28ba <xTaskResumeAll>
    1ec2:	81 11       	cpse	r24, r1
    1ec4:	90 cf       	rjmp	.-224    	; 0x1de6 <xQueueSemaphoreTake+0x3c>
    1ec6:	e1 db       	rcall	.-2110   	; 0x168a <vPortYield>
    1ec8:	8e cf       	rjmp	.-228    	; 0x1de6 <xQueueSemaphoreTake+0x3c>
    1eca:	c8 01       	movw	r24, r16
    1ecc:	29 dd       	rcall	.-1454   	; 0x1920 <prvUnlockQueue>
    1ece:	f5 d4       	rcall	.+2538   	; 0x28ba <xTaskResumeAll>
    1ed0:	8a cf       	rjmp	.-236    	; 0x1de6 <xQueueSemaphoreTake+0x3c>
    1ed2:	c8 01       	movw	r24, r16
    1ed4:	25 dd       	rcall	.-1462   	; 0x1920 <prvUnlockQueue>
    1ed6:	f1 d4       	rcall	.+2530   	; 0x28ba <xTaskResumeAll>
    1ed8:	c8 01       	movw	r24, r16
    1eda:	9e dc       	rcall	.-1732   	; 0x1818 <prvIsQueueEmpty>
    1edc:	88 23       	and	r24, r24
    1ede:	09 f4       	brne	.+2      	; 0x1ee2 <xQueueSemaphoreTake+0x138>
    1ee0:	82 cf       	rjmp	.-252    	; 0x1de6 <xQueueSemaphoreTake+0x3c>
    1ee2:	bb 20       	and	r11, r11
    1ee4:	c9 f0       	breq	.+50     	; 0x1f18 <xQueueSemaphoreTake+0x16e>
    1ee6:	0f b6       	in	r0, 0x3f	; 63
    1ee8:	f8 94       	cli
    1eea:	0f 92       	push	r0
    1eec:	f8 01       	movw	r30, r16
    1eee:	83 89       	ldd	r24, Z+19	; 0x13
    1ef0:	88 23       	and	r24, r24
    1ef2:	39 f0       	breq	.+14     	; 0x1f02 <xQueueSemaphoreTake+0x158>
    1ef4:	02 8c       	ldd	r0, Z+26	; 0x1a
    1ef6:	f3 8d       	ldd	r31, Z+27	; 0x1b
    1ef8:	e0 2d       	mov	r30, r0
    1efa:	80 81       	ld	r24, Z
    1efc:	64 e0       	ldi	r22, 0x04	; 4
    1efe:	68 1b       	sub	r22, r24
    1f00:	01 c0       	rjmp	.+2      	; 0x1f04 <xQueueSemaphoreTake+0x15a>
    1f02:	60 e0       	ldi	r22, 0x00	; 0
    1f04:	d8 01       	movw	r26, r16
    1f06:	14 96       	adiw	r26, 0x04	; 4
    1f08:	8d 91       	ld	r24, X+
    1f0a:	9c 91       	ld	r25, X
    1f0c:	15 97       	sbiw	r26, 0x05	; 5
    1f0e:	fb d7       	rcall	.+4086   	; 0x2f06 <vTaskPriorityDisinheritAfterTimeout>
    1f10:	0f 90       	pop	r0
    1f12:	0f be       	out	0x3f, r0	; 63
    1f14:	80 e0       	ldi	r24, 0x00	; 0
    1f16:	01 c0       	rjmp	.+2      	; 0x1f1a <xQueueSemaphoreTake+0x170>
    1f18:	80 e0       	ldi	r24, 0x00	; 0
    1f1a:	29 96       	adiw	r28, 0x09	; 9
    1f1c:	0f b6       	in	r0, 0x3f	; 63
    1f1e:	f8 94       	cli
    1f20:	de bf       	out	0x3e, r29	; 62
    1f22:	0f be       	out	0x3f, r0	; 63
    1f24:	cd bf       	out	0x3d, r28	; 61
    1f26:	df 91       	pop	r29
    1f28:	cf 91       	pop	r28
    1f2a:	1f 91       	pop	r17
    1f2c:	0f 91       	pop	r16
    1f2e:	ff 90       	pop	r15
    1f30:	ef 90       	pop	r14
    1f32:	df 90       	pop	r13
    1f34:	cf 90       	pop	r12
    1f36:	bf 90       	pop	r11
    1f38:	08 95       	ret

00001f3a <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
    {
    1f3a:	cf 93       	push	r28
    1f3c:	df 93       	push	r29
    1f3e:	ec 01       	movw	r28, r24
        will not actually cause the task to block, just place it on a blocked
        list.  It will not block until the scheduler is unlocked - at which
        time a yield will be performed.  If an item is added to the queue while
        the queue is locked, and the calling task blocks on the queue, then the
        calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    1f40:	0f b6       	in	r0, 0x3f	; 63
    1f42:	f8 94       	cli
    1f44:	0f 92       	push	r0
    1f46:	89 a1       	ldd	r24, Y+33	; 0x21
    1f48:	8f 3f       	cpi	r24, 0xFF	; 255
    1f4a:	09 f4       	brne	.+2      	; 0x1f4e <vQueueWaitForMessageRestricted+0x14>
    1f4c:	19 a2       	std	Y+33, r1	; 0x21
    1f4e:	8a a1       	ldd	r24, Y+34	; 0x22
    1f50:	8f 3f       	cpi	r24, 0xFF	; 255
    1f52:	09 f4       	brne	.+2      	; 0x1f56 <vQueueWaitForMessageRestricted+0x1c>
    1f54:	1a a2       	std	Y+34, r1	; 0x22
    1f56:	0f 90       	pop	r0
    1f58:	0f be       	out	0x3f, r0	; 63
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    1f5a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1f5c:	81 11       	cpse	r24, r1
    1f5e:	03 c0       	rjmp	.+6      	; 0x1f66 <vQueueWaitForMessageRestricted+0x2c>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    1f60:	ce 01       	movw	r24, r28
    1f62:	43 96       	adiw	r24, 0x13	; 19
    1f64:	f9 d5       	rcall	.+3058   	; 0x2b58 <vTaskPlaceOnEventListRestricted>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
        prvUnlockQueue( pxQueue );
    1f66:	ce 01       	movw	r24, r28
    1f68:	db dc       	rcall	.-1610   	; 0x1920 <prvUnlockQueue>
    }
    1f6a:	df 91       	pop	r29
    1f6c:	cf 91       	pop	r28
    1f6e:	08 95       	ret

00001f70 <prvBytesInBuffer>:

    configASSERT( pxStreamBuffer );

    xReturn = prvBytesInBuffer( pxStreamBuffer );
    return xReturn;
}
    1f70:	fc 01       	movw	r30, r24
    1f72:	44 81       	ldd	r20, Z+4	; 0x04
    1f74:	55 81       	ldd	r21, Z+5	; 0x05
    1f76:	22 81       	ldd	r18, Z+2	; 0x02
    1f78:	33 81       	ldd	r19, Z+3	; 0x03
    1f7a:	24 0f       	add	r18, r20
    1f7c:	35 1f       	adc	r19, r21
    1f7e:	80 81       	ld	r24, Z
    1f80:	91 81       	ldd	r25, Z+1	; 0x01
    1f82:	b9 01       	movw	r22, r18
    1f84:	68 1b       	sub	r22, r24
    1f86:	79 0b       	sbc	r23, r25
    1f88:	cb 01       	movw	r24, r22
    1f8a:	64 17       	cp	r22, r20
    1f8c:	75 07       	cpc	r23, r21
    1f8e:	10 f0       	brcs	.+4      	; 0x1f94 <prvBytesInBuffer+0x24>
    1f90:	84 1b       	sub	r24, r20
    1f92:	95 0b       	sbc	r25, r21
    1f94:	08 95       	ret

00001f96 <prvWriteBytesToBuffer>:
    1f96:	af 92       	push	r10
    1f98:	bf 92       	push	r11
    1f9a:	cf 92       	push	r12
    1f9c:	df 92       	push	r13
    1f9e:	ef 92       	push	r14
    1fa0:	ff 92       	push	r15
    1fa2:	0f 93       	push	r16
    1fa4:	1f 93       	push	r17
    1fa6:	cf 93       	push	r28
    1fa8:	df 93       	push	r29
    1faa:	6c 01       	movw	r12, r24
    1fac:	5b 01       	movw	r10, r22
    1fae:	7a 01       	movw	r14, r20
    1fb0:	fc 01       	movw	r30, r24
    1fb2:	c2 81       	ldd	r28, Z+2	; 0x02
    1fb4:	d3 81       	ldd	r29, Z+3	; 0x03
    1fb6:	04 81       	ldd	r16, Z+4	; 0x04
    1fb8:	15 81       	ldd	r17, Z+5	; 0x05
    1fba:	0c 1b       	sub	r16, r28
    1fbc:	1d 0b       	sbc	r17, r29
    1fbe:	40 17       	cp	r20, r16
    1fc0:	51 07       	cpc	r21, r17
    1fc2:	08 f4       	brcc	.+2      	; 0x1fc6 <prvWriteBytesToBuffer+0x30>
    1fc4:	8a 01       	movw	r16, r20
    1fc6:	f6 01       	movw	r30, r12
    1fc8:	84 85       	ldd	r24, Z+12	; 0x0c
    1fca:	95 85       	ldd	r25, Z+13	; 0x0d
    1fcc:	a8 01       	movw	r20, r16
    1fce:	b5 01       	movw	r22, r10
    1fd0:	8c 0f       	add	r24, r28
    1fd2:	9d 1f       	adc	r25, r29
    1fd4:	0e 94 31 29 	call	0x5262	; 0x5262 <memcpy>
    1fd8:	0e 15       	cp	r16, r14
    1fda:	1f 05       	cpc	r17, r15
    1fdc:	58 f4       	brcc	.+22     	; 0x1ff4 <prvWriteBytesToBuffer+0x5e>
    1fde:	a7 01       	movw	r20, r14
    1fe0:	40 1b       	sub	r20, r16
    1fe2:	51 0b       	sbc	r21, r17
    1fe4:	b5 01       	movw	r22, r10
    1fe6:	60 0f       	add	r22, r16
    1fe8:	71 1f       	adc	r23, r17
    1fea:	f6 01       	movw	r30, r12
    1fec:	84 85       	ldd	r24, Z+12	; 0x0c
    1fee:	95 85       	ldd	r25, Z+13	; 0x0d
    1ff0:	0e 94 31 29 	call	0x5262	; 0x5262 <memcpy>
    1ff4:	ce 01       	movw	r24, r28
    1ff6:	8e 0d       	add	r24, r14
    1ff8:	9f 1d       	adc	r25, r15
    1ffa:	f6 01       	movw	r30, r12
    1ffc:	24 81       	ldd	r18, Z+4	; 0x04
    1ffe:	35 81       	ldd	r19, Z+5	; 0x05
    2000:	82 17       	cp	r24, r18
    2002:	93 07       	cpc	r25, r19
    2004:	10 f0       	brcs	.+4      	; 0x200a <prvWriteBytesToBuffer+0x74>
    2006:	82 1b       	sub	r24, r18
    2008:	93 0b       	sbc	r25, r19
    200a:	f6 01       	movw	r30, r12
    200c:	93 83       	std	Z+3, r25	; 0x03
    200e:	82 83       	std	Z+2, r24	; 0x02
    2010:	c7 01       	movw	r24, r14
    2012:	df 91       	pop	r29
    2014:	cf 91       	pop	r28
    2016:	1f 91       	pop	r17
    2018:	0f 91       	pop	r16
    201a:	ff 90       	pop	r15
    201c:	ef 90       	pop	r14
    201e:	df 90       	pop	r13
    2020:	cf 90       	pop	r12
    2022:	bf 90       	pop	r11
    2024:	af 90       	pop	r10
    2026:	08 95       	ret

00002028 <prvWriteMessageToBuffer>:
    2028:	cf 92       	push	r12
    202a:	df 92       	push	r13
    202c:	ef 92       	push	r14
    202e:	ff 92       	push	r15
    2030:	0f 93       	push	r16
    2032:	1f 93       	push	r17
    2034:	cf 93       	push	r28
    2036:	df 93       	push	r29
    2038:	1f 92       	push	r1
    203a:	1f 92       	push	r1
    203c:	cd b7       	in	r28, 0x3d	; 61
    203e:	de b7       	in	r29, 0x3e	; 62
    2040:	5a 83       	std	Y+2, r21	; 0x02
    2042:	49 83       	std	Y+1, r20	; 0x01
    2044:	21 15       	cp	r18, r1
    2046:	31 05       	cpc	r19, r1
    2048:	c9 f0       	breq	.+50     	; 0x207c <prvWriteMessageToBuffer+0x54>
    204a:	6b 01       	movw	r12, r22
    204c:	7c 01       	movw	r14, r24
    204e:	fc 01       	movw	r30, r24
    2050:	86 85       	ldd	r24, Z+14	; 0x0e
    2052:	80 fd       	sbrc	r24, 0
    2054:	08 c0       	rjmp	.+16     	; 0x2066 <prvWriteMessageToBuffer+0x3e>
    2056:	ca 01       	movw	r24, r20
    2058:	24 17       	cp	r18, r20
    205a:	35 07       	cpc	r19, r21
    205c:	08 f4       	brcc	.+2      	; 0x2060 <prvWriteMessageToBuffer+0x38>
    205e:	c9 01       	movw	r24, r18
    2060:	9a 83       	std	Y+2, r25	; 0x02
    2062:	89 83       	std	Y+1, r24	; 0x01
    2064:	11 c0       	rjmp	.+34     	; 0x2088 <prvWriteMessageToBuffer+0x60>
    2066:	20 17       	cp	r18, r16
    2068:	31 07       	cpc	r19, r17
    206a:	58 f0       	brcs	.+22     	; 0x2082 <prvWriteMessageToBuffer+0x5a>
    206c:	42 e0       	ldi	r20, 0x02	; 2
    206e:	50 e0       	ldi	r21, 0x00	; 0
    2070:	be 01       	movw	r22, r28
    2072:	6f 5f       	subi	r22, 0xFF	; 255
    2074:	7f 4f       	sbci	r23, 0xFF	; 255
    2076:	c7 01       	movw	r24, r14
    2078:	8e df       	rcall	.-228    	; 0x1f96 <prvWriteBytesToBuffer>
    207a:	06 c0       	rjmp	.+12     	; 0x2088 <prvWriteMessageToBuffer+0x60>
    207c:	80 e0       	ldi	r24, 0x00	; 0
    207e:	90 e0       	ldi	r25, 0x00	; 0
    2080:	08 c0       	rjmp	.+16     	; 0x2092 <prvWriteMessageToBuffer+0x6a>
    2082:	80 e0       	ldi	r24, 0x00	; 0
    2084:	90 e0       	ldi	r25, 0x00	; 0
    2086:	05 c0       	rjmp	.+10     	; 0x2092 <prvWriteMessageToBuffer+0x6a>
    2088:	49 81       	ldd	r20, Y+1	; 0x01
    208a:	5a 81       	ldd	r21, Y+2	; 0x02
    208c:	b6 01       	movw	r22, r12
    208e:	c7 01       	movw	r24, r14
    2090:	82 df       	rcall	.-252    	; 0x1f96 <prvWriteBytesToBuffer>
    2092:	0f 90       	pop	r0
    2094:	0f 90       	pop	r0
    2096:	df 91       	pop	r29
    2098:	cf 91       	pop	r28
    209a:	1f 91       	pop	r17
    209c:	0f 91       	pop	r16
    209e:	ff 90       	pop	r15
    20a0:	ef 90       	pop	r14
    20a2:	df 90       	pop	r13
    20a4:	cf 90       	pop	r12
    20a6:	08 95       	ret

000020a8 <xStreamBufferGenericCreate>:
    20a8:	ef 92       	push	r14
    20aa:	ff 92       	push	r15
    20ac:	1f 93       	push	r17
    20ae:	cf 93       	push	r28
    20b0:	df 93       	push	r29
    20b2:	eb 01       	movw	r28, r22
    20b4:	11 e0       	ldi	r17, 0x01	; 1
    20b6:	41 30       	cpi	r20, 0x01	; 1
    20b8:	09 f0       	breq	.+2      	; 0x20bc <xStreamBufferGenericCreate+0x14>
    20ba:	10 e0       	ldi	r17, 0x00	; 0
    20bc:	20 97       	sbiw	r28, 0x00	; 0
    20be:	11 f4       	brne	.+4      	; 0x20c4 <xStreamBufferGenericCreate+0x1c>
    20c0:	c1 e0       	ldi	r28, 0x01	; 1
    20c2:	d0 e0       	ldi	r29, 0x00	; 0
    20c4:	7c 01       	movw	r14, r24
    20c6:	2f ef       	ldi	r18, 0xFF	; 255
    20c8:	e2 1a       	sub	r14, r18
    20ca:	f2 0a       	sbc	r15, r18
    20cc:	41 96       	adiw	r24, 0x11	; 17
    20ce:	ab d8       	rcall	.-3754   	; 0x1226 <pvPortMalloc>
    20d0:	00 97       	sbiw	r24, 0x00	; 0
    20d2:	81 f0       	breq	.+32     	; 0x20f4 <xStreamBufferGenericCreate+0x4c>
    20d4:	20 e1       	ldi	r18, 0x10	; 16
    20d6:	fc 01       	movw	r30, r24
    20d8:	11 92       	st	Z+, r1
    20da:	2a 95       	dec	r18
    20dc:	e9 f7       	brne	.-6      	; 0x20d8 <xStreamBufferGenericCreate+0x30>
    20de:	9c 01       	movw	r18, r24
    20e0:	20 5f       	subi	r18, 0xF0	; 240
    20e2:	3f 4f       	sbci	r19, 0xFF	; 255
    20e4:	fc 01       	movw	r30, r24
    20e6:	35 87       	std	Z+13, r19	; 0x0d
    20e8:	24 87       	std	Z+12, r18	; 0x0c
    20ea:	f5 82       	std	Z+5, r15	; 0x05
    20ec:	e4 82       	std	Z+4, r14	; 0x04
    20ee:	d7 83       	std	Z+7, r29	; 0x07
    20f0:	c6 83       	std	Z+6, r28	; 0x06
    20f2:	16 87       	std	Z+14, r17	; 0x0e
    20f4:	df 91       	pop	r29
    20f6:	cf 91       	pop	r28
    20f8:	1f 91       	pop	r17
    20fa:	ff 90       	pop	r15
    20fc:	ef 90       	pop	r14
    20fe:	08 95       	ret

00002100 <xStreamBufferSpacesAvailable>:
    2100:	fc 01       	movw	r30, r24
    2102:	24 81       	ldd	r18, Z+4	; 0x04
    2104:	35 81       	ldd	r19, Z+5	; 0x05
    2106:	80 81       	ld	r24, Z
    2108:	91 81       	ldd	r25, Z+1	; 0x01
    210a:	42 81       	ldd	r20, Z+2	; 0x02
    210c:	53 81       	ldd	r21, Z+3	; 0x03
    210e:	82 0f       	add	r24, r18
    2110:	93 1f       	adc	r25, r19
    2112:	01 97       	sbiw	r24, 0x01	; 1
    2114:	84 1b       	sub	r24, r20
    2116:	95 0b       	sbc	r25, r21
    2118:	82 17       	cp	r24, r18
    211a:	93 07       	cpc	r25, r19
    211c:	10 f0       	brcs	.+4      	; 0x2122 <xStreamBufferSpacesAvailable+0x22>
    211e:	82 1b       	sub	r24, r18
    2120:	93 0b       	sbc	r25, r19
    2122:	08 95       	ret

00002124 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void *pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    2124:	2f 92       	push	r2
    2126:	3f 92       	push	r3
    2128:	4f 92       	push	r4
    212a:	5f 92       	push	r5
    212c:	6f 92       	push	r6
    212e:	7f 92       	push	r7
    2130:	8f 92       	push	r8
    2132:	9f 92       	push	r9
    2134:	af 92       	push	r10
    2136:	bf 92       	push	r11
    2138:	cf 92       	push	r12
    213a:	df 92       	push	r13
    213c:	ef 92       	push	r14
    213e:	ff 92       	push	r15
    2140:	0f 93       	push	r16
    2142:	1f 93       	push	r17
    2144:	cf 93       	push	r28
    2146:	df 93       	push	r29
    2148:	cd b7       	in	r28, 0x3d	; 61
    214a:	de b7       	in	r29, 0x3e	; 62
    214c:	29 97       	sbiw	r28, 0x09	; 9
    214e:	0f b6       	in	r0, 0x3f	; 63
    2150:	f8 94       	cli
    2152:	de bf       	out	0x3e, r29	; 62
    2154:	0f be       	out	0x3f, r0	; 63
    2156:	cd bf       	out	0x3d, r28	; 61
    2158:	5c 01       	movw	r10, r24
    215a:	1b 01       	movw	r2, r22
    215c:	2a 01       	movw	r4, r20
    215e:	0e 83       	std	Y+6, r16	; 0x06
    2160:	1f 83       	std	Y+7, r17	; 0x07
    2162:	28 87       	std	Y+8, r18	; 0x08
    2164:	39 87       	std	Y+9, r19	; 0x09

    /* This send function is used to write to both message buffers and stream
    buffers.  If this is a message buffer then the space needed must be
    increased by the amount of bytes needed to store the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    2166:	fc 01       	movw	r30, r24
    2168:	86 85       	ldd	r24, Z+14	; 0x0e
    216a:	80 ff       	sbrs	r24, 0
    216c:	05 c0       	rjmp	.+10     	; 0x2178 <xStreamBufferSend+0x54>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    216e:	3a 01       	movw	r6, r20
    2170:	f2 e0       	ldi	r31, 0x02	; 2
    2172:	6f 0e       	add	r6, r31
    2174:	71 1c       	adc	r7, r1
    2176:	01 c0       	rjmp	.+2      	; 0x217a <xStreamBufferSend+0x56>
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReturn, xSpace = 0;
size_t xRequiredSpace = xDataLengthBytes;
    2178:	3a 01       	movw	r6, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    217a:	8e 81       	ldd	r24, Y+6	; 0x06
    217c:	9f 81       	ldd	r25, Y+7	; 0x07
    217e:	a8 85       	ldd	r26, Y+8	; 0x08
    2180:	b9 85       	ldd	r27, Y+9	; 0x09
    2182:	89 2b       	or	r24, r25
    2184:	8a 2b       	or	r24, r26
    2186:	8b 2b       	or	r24, r27
    2188:	09 f4       	brne	.+2      	; 0x218c <xStreamBufferSend+0x68>
    218a:	34 c0       	rjmp	.+104    	; 0x21f4 <xStreamBufferSend+0xd0>
    {
        vTaskSetTimeOutState( &xTimeOut );
    218c:	ce 01       	movw	r24, r28
    218e:	01 96       	adiw	r24, 0x01	; 1
    2190:	79 d5       	rcall	.+2802   	; 0x2c84 <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
            buffer. */
            taskENTER_CRITICAL();
    2192:	0f b6       	in	r0, 0x3f	; 63
    2194:	f8 94       	cli
    2196:	0f 92       	push	r0
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    2198:	c5 01       	movw	r24, r10
    219a:	b2 df       	rcall	.-156    	; 0x2100 <xStreamBufferSpacesAvailable>
    219c:	4c 01       	movw	r8, r24

                if( xSpace < xRequiredSpace )
    219e:	86 15       	cp	r24, r6
    21a0:	97 05       	cpc	r25, r7
    21a2:	18 f5       	brcc	.+70     	; 0x21ea <xStreamBufferSend+0xc6>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClear( NULL );
    21a4:	80 e0       	ldi	r24, 0x00	; 0
    21a6:	90 e0       	ldi	r25, 0x00	; 0
    21a8:	0e 94 94 19 	call	0x3328	; 0x3328 <xTaskNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    21ac:	eb d5       	rcall	.+3030   	; 0x2d84 <xTaskGetCurrentTaskHandle>
    21ae:	f5 01       	movw	r30, r10
    21b0:	93 87       	std	Z+11, r25	; 0x0b
    21b2:	82 87       	std	Z+10, r24	; 0x0a
                {
                    taskEXIT_CRITICAL();
                    break;
                }
            }
            taskEXIT_CRITICAL();
    21b4:	0f 90       	pop	r0
    21b6:	0f be       	out	0x3f, r0	; 63

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    21b8:	ce 80       	ldd	r12, Y+6	; 0x06
    21ba:	df 80       	ldd	r13, Y+7	; 0x07
    21bc:	e8 84       	ldd	r14, Y+8	; 0x08
    21be:	f9 84       	ldd	r15, Y+9	; 0x09
    21c0:	00 e0       	ldi	r16, 0x00	; 0
    21c2:	10 e0       	ldi	r17, 0x00	; 0
    21c4:	20 e0       	ldi	r18, 0x00	; 0
    21c6:	30 e0       	ldi	r19, 0x00	; 0
    21c8:	a9 01       	movw	r20, r18
    21ca:	60 e0       	ldi	r22, 0x00	; 0
    21cc:	70 e0       	ldi	r23, 0x00	; 0
    21ce:	cb 01       	movw	r24, r22
    21d0:	20 d7       	rcall	.+3648   	; 0x3012 <xTaskNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
    21d2:	f5 01       	movw	r30, r10
    21d4:	13 86       	std	Z+11, r1	; 0x0b
    21d6:	12 86       	std	Z+10, r1	; 0x0a

        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    21d8:	be 01       	movw	r22, r28
    21da:	6a 5f       	subi	r22, 0xFA	; 250
    21dc:	7f 4f       	sbci	r23, 0xFF	; 255
    21de:	ce 01       	movw	r24, r28
    21e0:	01 96       	adiw	r24, 0x01	; 1
    21e2:	77 d5       	rcall	.+2798   	; 0x2cd2 <xTaskCheckForTimeOut>
    21e4:	88 23       	and	r24, r24
    21e6:	a9 f2       	breq	.-86     	; 0x2192 <xStreamBufferSend+0x6e>
    21e8:	02 c0       	rjmp	.+4      	; 0x21ee <xStreamBufferSend+0xca>
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
                }
                else
                {
                    taskEXIT_CRITICAL();
    21ea:	0f 90       	pop	r0
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
    21ec:	0f be       	out	0x3f, r0	; 63
    21ee:	81 14       	cp	r8, r1
    21f0:	91 04       	cpc	r9, r1
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    21f2:	19 f4       	brne	.+6      	; 0x21fa <xStreamBufferSend+0xd6>
    21f4:	c5 01       	movw	r24, r10
    21f6:	84 df       	rcall	.-248    	; 0x2100 <xStreamBufferSpacesAvailable>
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    21f8:	4c 01       	movw	r8, r24
    21fa:	83 01       	movw	r16, r6
    21fc:	94 01       	movw	r18, r8
    21fe:	a2 01       	movw	r20, r4
    2200:	b1 01       	movw	r22, r2
    2202:	c5 01       	movw	r24, r10
    2204:	11 df       	rcall	.-478    	; 0x2028 <prvWriteMessageToBuffer>

    if( xReturn > ( size_t ) 0 )
    2206:	7c 01       	movw	r14, r24
    2208:	89 2b       	or	r24, r25
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    220a:	d9 f0       	breq	.+54     	; 0x2242 <__stack+0x43>
    220c:	c5 01       	movw	r24, r10
    220e:	b0 de       	rcall	.-672    	; 0x1f70 <prvBytesInBuffer>
    2210:	f5 01       	movw	r30, r10
    2212:	26 81       	ldd	r18, Z+6	; 0x06
    2214:	37 81       	ldd	r19, Z+7	; 0x07
    2216:	82 17       	cp	r24, r18
    2218:	93 07       	cpc	r25, r19
        {
            sbSEND_COMPLETED( pxStreamBuffer );
    221a:	98 f0       	brcs	.+38     	; 0x2242 <__stack+0x43>
    221c:	65 d2       	rcall	.+1226   	; 0x26e8 <vTaskSuspendAll>
    221e:	f5 01       	movw	r30, r10
    2220:	80 85       	ldd	r24, Z+8	; 0x08
    2222:	91 85       	ldd	r25, Z+9	; 0x09
    2224:	89 2b       	or	r24, r25
    2226:	61 f0       	breq	.+24     	; 0x2240 <__stack+0x41>
    2228:	80 85       	ldd	r24, Z+8	; 0x08
    222a:	91 85       	ldd	r25, Z+9	; 0x09
    222c:	00 e0       	ldi	r16, 0x00	; 0
    222e:	10 e0       	ldi	r17, 0x00	; 0
    2230:	20 e0       	ldi	r18, 0x00	; 0
    2232:	40 e0       	ldi	r20, 0x00	; 0
    2234:	50 e0       	ldi	r21, 0x00	; 0
    2236:	ba 01       	movw	r22, r20
    2238:	76 d7       	rcall	.+3820   	; 0x3126 <xTaskGenericNotify>
    223a:	f5 01       	movw	r30, r10
    223c:	11 86       	std	Z+9, r1	; 0x09
    223e:	10 86       	std	Z+8, r1	; 0x08
    2240:	3c d3       	rcall	.+1656   	; 0x28ba <xTaskResumeAll>
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    2242:	c7 01       	movw	r24, r14
    2244:	29 96       	adiw	r28, 0x09	; 9
    2246:	0f b6       	in	r0, 0x3f	; 63
    2248:	f8 94       	cli
    224a:	de bf       	out	0x3e, r29	; 62
    224c:	0f be       	out	0x3f, r0	; 63
    224e:	cd bf       	out	0x3d, r28	; 61
    2250:	df 91       	pop	r29
    2252:	cf 91       	pop	r28
    2254:	1f 91       	pop	r17
    2256:	0f 91       	pop	r16
    2258:	ff 90       	pop	r15
    225a:	ef 90       	pop	r14
    225c:	df 90       	pop	r13
    225e:	cf 90       	pop	r12
    2260:	bf 90       	pop	r11
    2262:	af 90       	pop	r10
    2264:	9f 90       	pop	r9
    2266:	8f 90       	pop	r8
    2268:	7f 90       	pop	r7
    226a:	6f 90       	pop	r6
    226c:	5f 90       	pop	r5
    226e:	4f 90       	pop	r4
    2270:	3f 90       	pop	r3
    2272:	2f 90       	pop	r2
    2274:	08 95       	ret

00002276 <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void *pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    2276:	af 92       	push	r10
    2278:	bf 92       	push	r11
    227a:	cf 92       	push	r12
    227c:	df 92       	push	r13
    227e:	ef 92       	push	r14
    2280:	ff 92       	push	r15
    2282:	0f 93       	push	r16
    2284:	1f 93       	push	r17
    2286:	cf 93       	push	r28
    2288:	df 93       	push	r29
    228a:	ec 01       	movw	r28, r24
    228c:	5b 01       	movw	r10, r22
    228e:	6a 01       	movw	r12, r20
    2290:	79 01       	movw	r14, r18

    /* This send function is used to write to both message buffers and stream
    buffers.  If this is a message buffer then the space needed must be
    increased by the amount of bytes needed to store the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    2292:	8e 85       	ldd	r24, Y+14	; 0x0e
    2294:	80 ff       	sbrs	r24, 0
    2296:	04 c0       	rjmp	.+8      	; 0x22a0 <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    2298:	8a 01       	movw	r16, r20
    229a:	0e 5f       	subi	r16, 0xFE	; 254
    229c:	1f 4f       	sbci	r17, 0xFF	; 255
    229e:	01 c0       	rjmp	.+2      	; 0x22a2 <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReturn, xSpace;
size_t xRequiredSpace = xDataLengthBytes;
    22a0:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    22a2:	ce 01       	movw	r24, r28
    22a4:	2d df       	rcall	.-422    	; 0x2100 <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    22a6:	9c 01       	movw	r18, r24
    22a8:	a6 01       	movw	r20, r12
    22aa:	b5 01       	movw	r22, r10
    22ac:	ce 01       	movw	r24, r28
    22ae:	bc de       	rcall	.-648    	; 0x2028 <prvWriteMessageToBuffer>
    22b0:	6c 01       	movw	r12, r24

    if( xReturn > ( size_t ) 0 )
    22b2:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    22b4:	b1 f0       	breq	.+44     	; 0x22e2 <xStreamBufferSendFromISR+0x6c>
    22b6:	ce 01       	movw	r24, r28
    22b8:	5b de       	rcall	.-842    	; 0x1f70 <prvBytesInBuffer>
    22ba:	2e 81       	ldd	r18, Y+6	; 0x06
    22bc:	3f 81       	ldd	r19, Y+7	; 0x07
    22be:	82 17       	cp	r24, r18
    22c0:	93 07       	cpc	r25, r19
    22c2:	78 f0       	brcs	.+30     	; 0x22e2 <xStreamBufferSendFromISR+0x6c>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    22c4:	88 85       	ldd	r24, Y+8	; 0x08
    22c6:	99 85       	ldd	r25, Y+9	; 0x09
    22c8:	89 2b       	or	r24, r25
    22ca:	59 f0       	breq	.+22     	; 0x22e2 <xStreamBufferSendFromISR+0x6c>
    22cc:	88 85       	ldd	r24, Y+8	; 0x08
    22ce:	99 85       	ldd	r25, Y+9	; 0x09
    22d0:	00 e0       	ldi	r16, 0x00	; 0
    22d2:	10 e0       	ldi	r17, 0x00	; 0
    22d4:	20 e0       	ldi	r18, 0x00	; 0
    22d6:	40 e0       	ldi	r20, 0x00	; 0
    22d8:	50 e0       	ldi	r21, 0x00	; 0
    22da:	ba 01       	movw	r22, r20
    22dc:	9c d7       	rcall	.+3896   	; 0x3216 <xTaskGenericNotifyFromISR>
    22de:	19 86       	std	Y+9, r1	; 0x09
    22e0:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    22e2:	c6 01       	movw	r24, r12
    22e4:	df 91       	pop	r29
    22e6:	cf 91       	pop	r28
    22e8:	1f 91       	pop	r17
    22ea:	0f 91       	pop	r16
    22ec:	ff 90       	pop	r15
    22ee:	ef 90       	pop	r14
    22f0:	df 90       	pop	r13
    22f2:	cf 90       	pop	r12
    22f4:	bf 90       	pop	r11
    22f6:	af 90       	pop	r10
    22f8:	08 95       	ret

000022fa <prvResetNextTaskUnblockTime>:
    22fa:	e0 91 ec 13 	lds	r30, 0x13EC	; 0x8013ec <pxDelayedTaskList>
    22fe:	f0 91 ed 13 	lds	r31, 0x13ED	; 0x8013ed <pxDelayedTaskList+0x1>
    2302:	80 81       	ld	r24, Z
    2304:	81 11       	cpse	r24, r1
    2306:	0c c0       	rjmp	.+24     	; 0x2320 <prvResetNextTaskUnblockTime+0x26>
    2308:	8f ef       	ldi	r24, 0xFF	; 255
    230a:	9f ef       	ldi	r25, 0xFF	; 255
    230c:	dc 01       	movw	r26, r24
    230e:	80 93 b9 13 	sts	0x13B9, r24	; 0x8013b9 <xNextTaskUnblockTime>
    2312:	90 93 ba 13 	sts	0x13BA, r25	; 0x8013ba <xNextTaskUnblockTime+0x1>
    2316:	a0 93 bb 13 	sts	0x13BB, r26	; 0x8013bb <xNextTaskUnblockTime+0x2>
    231a:	b0 93 bc 13 	sts	0x13BC, r27	; 0x8013bc <xNextTaskUnblockTime+0x3>
    231e:	08 95       	ret
    2320:	e0 91 ec 13 	lds	r30, 0x13EC	; 0x8013ec <pxDelayedTaskList>
    2324:	f0 91 ed 13 	lds	r31, 0x13ED	; 0x8013ed <pxDelayedTaskList+0x1>
    2328:	07 80       	ldd	r0, Z+7	; 0x07
    232a:	f0 85       	ldd	r31, Z+8	; 0x08
    232c:	e0 2d       	mov	r30, r0
    232e:	00 84       	ldd	r0, Z+8	; 0x08
    2330:	f1 85       	ldd	r31, Z+9	; 0x09
    2332:	e0 2d       	mov	r30, r0
    2334:	82 81       	ldd	r24, Z+2	; 0x02
    2336:	93 81       	ldd	r25, Z+3	; 0x03
    2338:	a4 81       	ldd	r26, Z+4	; 0x04
    233a:	b5 81       	ldd	r27, Z+5	; 0x05
    233c:	80 93 b9 13 	sts	0x13B9, r24	; 0x8013b9 <xNextTaskUnblockTime>
    2340:	90 93 ba 13 	sts	0x13BA, r25	; 0x8013ba <xNextTaskUnblockTime+0x1>
    2344:	a0 93 bb 13 	sts	0x13BB, r26	; 0x8013bb <xNextTaskUnblockTime+0x2>
    2348:	b0 93 bc 13 	sts	0x13BC, r27	; 0x8013bc <xNextTaskUnblockTime+0x3>
    234c:	08 95       	ret

0000234e <prvAddCurrentTaskToDelayedList>:
    234e:	8f 92       	push	r8
    2350:	9f 92       	push	r9
    2352:	af 92       	push	r10
    2354:	bf 92       	push	r11
    2356:	cf 92       	push	r12
    2358:	df 92       	push	r13
    235a:	ef 92       	push	r14
    235c:	ff 92       	push	r15
    235e:	cf 93       	push	r28
    2360:	6b 01       	movw	r12, r22
    2362:	7c 01       	movw	r14, r24
    2364:	c4 2f       	mov	r28, r20
    2366:	80 90 c3 13 	lds	r8, 0x13C3	; 0x8013c3 <xTickCount>
    236a:	90 90 c4 13 	lds	r9, 0x13C4	; 0x8013c4 <xTickCount+0x1>
    236e:	a0 90 c5 13 	lds	r10, 0x13C5	; 0x8013c5 <xTickCount+0x2>
    2372:	b0 90 c6 13 	lds	r11, 0x13C6	; 0x8013c6 <xTickCount+0x3>
    2376:	80 91 30 14 	lds	r24, 0x1430	; 0x801430 <pxCurrentTCB>
    237a:	90 91 31 14 	lds	r25, 0x1431	; 0x801431 <pxCurrentTCB+0x1>
    237e:	02 96       	adiw	r24, 0x02	; 2
    2380:	af d8       	rcall	.-3746   	; 0x14e0 <uxListRemove>
    2382:	8f ef       	ldi	r24, 0xFF	; 255
    2384:	c8 16       	cp	r12, r24
    2386:	d8 06       	cpc	r13, r24
    2388:	e8 06       	cpc	r14, r24
    238a:	f8 06       	cpc	r15, r24
    238c:	61 f4       	brne	.+24     	; 0x23a6 <prvAddCurrentTaskToDelayedList+0x58>
    238e:	cc 23       	and	r28, r28
    2390:	51 f0       	breq	.+20     	; 0x23a6 <prvAddCurrentTaskToDelayedList+0x58>
    2392:	60 91 30 14 	lds	r22, 0x1430	; 0x801430 <pxCurrentTCB>
    2396:	70 91 31 14 	lds	r23, 0x1431	; 0x801431 <pxCurrentTCB+0x1>
    239a:	6e 5f       	subi	r22, 0xFE	; 254
    239c:	7f 4f       	sbci	r23, 0xFF	; 255
    239e:	88 ec       	ldi	r24, 0xC8	; 200
    23a0:	93 e1       	ldi	r25, 0x13	; 19
    23a2:	40 d8       	rcall	.-3968   	; 0x1424 <vListInsertEnd>
    23a4:	3d c0       	rjmp	.+122    	; 0x2420 <prvAddCurrentTaskToDelayedList+0xd2>
    23a6:	c8 0c       	add	r12, r8
    23a8:	d9 1c       	adc	r13, r9
    23aa:	ea 1c       	adc	r14, r10
    23ac:	fb 1c       	adc	r15, r11
    23ae:	e0 91 30 14 	lds	r30, 0x1430	; 0x801430 <pxCurrentTCB>
    23b2:	f0 91 31 14 	lds	r31, 0x1431	; 0x801431 <pxCurrentTCB+0x1>
    23b6:	c2 82       	std	Z+2, r12	; 0x02
    23b8:	d3 82       	std	Z+3, r13	; 0x03
    23ba:	e4 82       	std	Z+4, r14	; 0x04
    23bc:	f5 82       	std	Z+5, r15	; 0x05
    23be:	c8 14       	cp	r12, r8
    23c0:	d9 04       	cpc	r13, r9
    23c2:	ea 04       	cpc	r14, r10
    23c4:	fb 04       	cpc	r15, r11
    23c6:	60 f4       	brcc	.+24     	; 0x23e0 <prvAddCurrentTaskToDelayedList+0x92>
    23c8:	60 91 30 14 	lds	r22, 0x1430	; 0x801430 <pxCurrentTCB>
    23cc:	70 91 31 14 	lds	r23, 0x1431	; 0x801431 <pxCurrentTCB+0x1>
    23d0:	80 91 ea 13 	lds	r24, 0x13EA	; 0x8013ea <pxOverflowDelayedTaskList>
    23d4:	90 91 eb 13 	lds	r25, 0x13EB	; 0x8013eb <pxOverflowDelayedTaskList+0x1>
    23d8:	6e 5f       	subi	r22, 0xFE	; 254
    23da:	7f 4f       	sbci	r23, 0xFF	; 255
    23dc:	44 d8       	rcall	.-3960   	; 0x1466 <vListInsert>
    23de:	20 c0       	rjmp	.+64     	; 0x2420 <prvAddCurrentTaskToDelayedList+0xd2>
    23e0:	60 91 30 14 	lds	r22, 0x1430	; 0x801430 <pxCurrentTCB>
    23e4:	70 91 31 14 	lds	r23, 0x1431	; 0x801431 <pxCurrentTCB+0x1>
    23e8:	80 91 ec 13 	lds	r24, 0x13EC	; 0x8013ec <pxDelayedTaskList>
    23ec:	90 91 ed 13 	lds	r25, 0x13ED	; 0x8013ed <pxDelayedTaskList+0x1>
    23f0:	6e 5f       	subi	r22, 0xFE	; 254
    23f2:	7f 4f       	sbci	r23, 0xFF	; 255
    23f4:	38 d8       	rcall	.-3984   	; 0x1466 <vListInsert>
    23f6:	80 91 b9 13 	lds	r24, 0x13B9	; 0x8013b9 <xNextTaskUnblockTime>
    23fa:	90 91 ba 13 	lds	r25, 0x13BA	; 0x8013ba <xNextTaskUnblockTime+0x1>
    23fe:	a0 91 bb 13 	lds	r26, 0x13BB	; 0x8013bb <xNextTaskUnblockTime+0x2>
    2402:	b0 91 bc 13 	lds	r27, 0x13BC	; 0x8013bc <xNextTaskUnblockTime+0x3>
    2406:	c8 16       	cp	r12, r24
    2408:	d9 06       	cpc	r13, r25
    240a:	ea 06       	cpc	r14, r26
    240c:	fb 06       	cpc	r15, r27
    240e:	40 f4       	brcc	.+16     	; 0x2420 <prvAddCurrentTaskToDelayedList+0xd2>
    2410:	c0 92 b9 13 	sts	0x13B9, r12	; 0x8013b9 <xNextTaskUnblockTime>
    2414:	d0 92 ba 13 	sts	0x13BA, r13	; 0x8013ba <xNextTaskUnblockTime+0x1>
    2418:	e0 92 bb 13 	sts	0x13BB, r14	; 0x8013bb <xNextTaskUnblockTime+0x2>
    241c:	f0 92 bc 13 	sts	0x13BC, r15	; 0x8013bc <xNextTaskUnblockTime+0x3>
    2420:	cf 91       	pop	r28
    2422:	ff 90       	pop	r15
    2424:	ef 90       	pop	r14
    2426:	df 90       	pop	r13
    2428:	cf 90       	pop	r12
    242a:	bf 90       	pop	r11
    242c:	af 90       	pop	r10
    242e:	9f 90       	pop	r9
    2430:	8f 90       	pop	r8
    2432:	08 95       	ret

00002434 <xTaskCreate>:
    2434:	4f 92       	push	r4
    2436:	5f 92       	push	r5
    2438:	6f 92       	push	r6
    243a:	7f 92       	push	r7
    243c:	8f 92       	push	r8
    243e:	9f 92       	push	r9
    2440:	af 92       	push	r10
    2442:	bf 92       	push	r11
    2444:	cf 92       	push	r12
    2446:	df 92       	push	r13
    2448:	ef 92       	push	r14
    244a:	ff 92       	push	r15
    244c:	0f 93       	push	r16
    244e:	cf 93       	push	r28
    2450:	df 93       	push	r29
    2452:	4c 01       	movw	r8, r24
    2454:	6b 01       	movw	r12, r22
    2456:	5a 01       	movw	r10, r20
    2458:	29 01       	movw	r4, r18
    245a:	ca 01       	movw	r24, r20
    245c:	0e 94 13 09 	call	0x1226	; 0x1226 <pvPortMalloc>
    2460:	3c 01       	movw	r6, r24
    2462:	89 2b       	or	r24, r25
    2464:	09 f4       	brne	.+2      	; 0x2468 <xTaskCreate+0x34>
    2466:	f3 c0       	rjmp	.+486    	; 0x264e <xTaskCreate+0x21a>
    2468:	80 e3       	ldi	r24, 0x30	; 48
    246a:	90 e0       	ldi	r25, 0x00	; 0
    246c:	0e 94 13 09 	call	0x1226	; 0x1226 <pvPortMalloc>
    2470:	ec 01       	movw	r28, r24
    2472:	89 2b       	or	r24, r25
    2474:	99 f0       	breq	.+38     	; 0x249c <xTaskCreate+0x68>
    2476:	7c 8e       	std	Y+28, r7	; 0x1c
    2478:	6b 8e       	std	Y+27, r6	; 0x1b
    247a:	a5 01       	movw	r20, r10
    247c:	65 ea       	ldi	r22, 0xA5	; 165
    247e:	70 e0       	ldi	r23, 0x00	; 0
    2480:	c3 01       	movw	r24, r6
    2482:	0e 94 3a 29 	call	0x5274	; 0x5274 <memset>
    2486:	21 e0       	ldi	r18, 0x01	; 1
    2488:	a2 1a       	sub	r10, r18
    248a:	b1 08       	sbc	r11, r1
    248c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    248e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2490:	a8 0e       	add	r10, r24
    2492:	b9 1e       	adc	r11, r25
    2494:	c1 14       	cp	r12, r1
    2496:	d1 04       	cpc	r13, r1
    2498:	29 f4       	brne	.+10     	; 0x24a4 <xTaskCreate+0x70>
    249a:	20 c0       	rjmp	.+64     	; 0x24dc <xTaskCreate+0xa8>
    249c:	c3 01       	movw	r24, r6
    249e:	0e 94 cc 09 	call	0x1398	; 0x1398 <vPortFree>
    24a2:	d5 c0       	rjmp	.+426    	; 0x264e <xTaskCreate+0x21a>
    24a4:	d6 01       	movw	r26, r12
    24a6:	8c 91       	ld	r24, X
    24a8:	8d 8f       	std	Y+29, r24	; 0x1d
    24aa:	8c 91       	ld	r24, X
    24ac:	88 23       	and	r24, r24
    24ae:	a1 f0       	breq	.+40     	; 0x24d8 <xTaskCreate+0xa4>
    24b0:	ae 01       	movw	r20, r28
    24b2:	42 5e       	subi	r20, 0xE2	; 226
    24b4:	5f 4f       	sbci	r21, 0xFF	; 255
    24b6:	f6 01       	movw	r30, r12
    24b8:	31 96       	adiw	r30, 0x01	; 1
    24ba:	b8 e0       	ldi	r27, 0x08	; 8
    24bc:	cb 0e       	add	r12, r27
    24be:	d1 1c       	adc	r13, r1
    24c0:	cf 01       	movw	r24, r30
    24c2:	21 91       	ld	r18, Z+
    24c4:	da 01       	movw	r26, r20
    24c6:	2d 93       	st	X+, r18
    24c8:	ad 01       	movw	r20, r26
    24ca:	dc 01       	movw	r26, r24
    24cc:	8c 91       	ld	r24, X
    24ce:	88 23       	and	r24, r24
    24d0:	19 f0       	breq	.+6      	; 0x24d8 <xTaskCreate+0xa4>
    24d2:	ec 15       	cp	r30, r12
    24d4:	fd 05       	cpc	r31, r13
    24d6:	a1 f7       	brne	.-24     	; 0x24c0 <xTaskCreate+0x8c>
    24d8:	1c a2       	std	Y+36, r1	; 0x24
    24da:	01 c0       	rjmp	.+2      	; 0x24de <xTaskCreate+0xaa>
    24dc:	1d 8e       	std	Y+29, r1	; 0x1d
    24de:	04 30       	cpi	r16, 0x04	; 4
    24e0:	08 f0       	brcs	.+2      	; 0x24e4 <xTaskCreate+0xb0>
    24e2:	03 e0       	ldi	r16, 0x03	; 3
    24e4:	0a 8f       	std	Y+26, r16	; 0x1a
    24e6:	0f a3       	std	Y+39, r16	; 0x27
    24e8:	18 a6       	std	Y+40, r1	; 0x28
    24ea:	6e 01       	movw	r12, r28
    24ec:	b2 e0       	ldi	r27, 0x02	; 2
    24ee:	cb 0e       	add	r12, r27
    24f0:	d1 1c       	adc	r13, r1
    24f2:	c6 01       	movw	r24, r12
    24f4:	0e 94 0e 0a 	call	0x141c	; 0x141c <vListInitialiseItem>
    24f8:	ce 01       	movw	r24, r28
    24fa:	0e 96       	adiw	r24, 0x0e	; 14
    24fc:	0e 94 0e 0a 	call	0x141c	; 0x141c <vListInitialiseItem>
    2500:	db 87       	std	Y+11, r29	; 0x0b
    2502:	ca 87       	std	Y+10, r28	; 0x0a
    2504:	84 e0       	ldi	r24, 0x04	; 4
    2506:	90 e0       	ldi	r25, 0x00	; 0
    2508:	a0 e0       	ldi	r26, 0x00	; 0
    250a:	b0 e0       	ldi	r27, 0x00	; 0
    250c:	80 1b       	sub	r24, r16
    250e:	91 09       	sbc	r25, r1
    2510:	a1 09       	sbc	r26, r1
    2512:	b1 09       	sbc	r27, r1
    2514:	8e 87       	std	Y+14, r24	; 0x0e
    2516:	9f 87       	std	Y+15, r25	; 0x0f
    2518:	a8 8b       	std	Y+16, r26	; 0x10
    251a:	b9 8b       	std	Y+17, r27	; 0x11
    251c:	df 8b       	std	Y+23, r29	; 0x17
    251e:	ce 8b       	std	Y+22, r28	; 0x16
    2520:	1a a6       	std	Y+42, r1	; 0x2a
    2522:	19 a6       	std	Y+41, r1	; 0x29
    2524:	1b a6       	std	Y+43, r1	; 0x2b
    2526:	1c a6       	std	Y+44, r1	; 0x2c
    2528:	1d a6       	std	Y+45, r1	; 0x2d
    252a:	1e a6       	std	Y+46, r1	; 0x2e
    252c:	1f a6       	std	Y+47, r1	; 0x2f
    252e:	a2 01       	movw	r20, r4
    2530:	b4 01       	movw	r22, r8
    2532:	c5 01       	movw	r24, r10
    2534:	0e 94 97 0a 	call	0x152e	; 0x152e <pxPortInitialiseStack>
    2538:	99 83       	std	Y+1, r25	; 0x01
    253a:	88 83       	st	Y, r24
    253c:	e1 14       	cp	r14, r1
    253e:	f1 04       	cpc	r15, r1
    2540:	19 f0       	breq	.+6      	; 0x2548 <xTaskCreate+0x114>
    2542:	f7 01       	movw	r30, r14
    2544:	d1 83       	std	Z+1, r29	; 0x01
    2546:	c0 83       	st	Z, r28
    2548:	0f b6       	in	r0, 0x3f	; 63
    254a:	f8 94       	cli
    254c:	0f 92       	push	r0
    254e:	80 91 c7 13 	lds	r24, 0x13C7	; 0x8013c7 <uxCurrentNumberOfTasks>
    2552:	8f 5f       	subi	r24, 0xFF	; 255
    2554:	80 93 c7 13 	sts	0x13C7, r24	; 0x8013c7 <uxCurrentNumberOfTasks>
    2558:	80 91 30 14 	lds	r24, 0x1430	; 0x801430 <pxCurrentTCB>
    255c:	90 91 31 14 	lds	r25, 0x1431	; 0x801431 <pxCurrentTCB+0x1>
    2560:	89 2b       	or	r24, r25
    2562:	d1 f5       	brne	.+116    	; 0x25d8 <xTaskCreate+0x1a4>
    2564:	d0 93 31 14 	sts	0x1431, r29	; 0x801431 <pxCurrentTCB+0x1>
    2568:	c0 93 30 14 	sts	0x1430, r28	; 0x801430 <pxCurrentTCB>
    256c:	80 91 c7 13 	lds	r24, 0x13C7	; 0x8013c7 <uxCurrentNumberOfTasks>
    2570:	81 30       	cpi	r24, 0x01	; 1
    2572:	09 f0       	breq	.+2      	; 0x2576 <xTaskCreate+0x142>
    2574:	41 c0       	rjmp	.+130    	; 0x25f8 <xTaskCreate+0x1c4>
    2576:	84 e0       	ldi	r24, 0x04	; 4
    2578:	94 e1       	ldi	r25, 0x14	; 20
    257a:	0e 94 fd 09 	call	0x13fa	; 0x13fa <vListInitialise>
    257e:	8f e0       	ldi	r24, 0x0F	; 15
    2580:	94 e1       	ldi	r25, 0x14	; 20
    2582:	0e 94 fd 09 	call	0x13fa	; 0x13fa <vListInitialise>
    2586:	8a e1       	ldi	r24, 0x1A	; 26
    2588:	94 e1       	ldi	r25, 0x14	; 20
    258a:	0e 94 fd 09 	call	0x13fa	; 0x13fa <vListInitialise>
    258e:	85 e2       	ldi	r24, 0x25	; 37
    2590:	94 e1       	ldi	r25, 0x14	; 20
    2592:	0e 94 fd 09 	call	0x13fa	; 0x13fa <vListInitialise>
    2596:	89 ef       	ldi	r24, 0xF9	; 249
    2598:	93 e1       	ldi	r25, 0x13	; 19
    259a:	0e 94 fd 09 	call	0x13fa	; 0x13fa <vListInitialise>
    259e:	8e ee       	ldi	r24, 0xEE	; 238
    25a0:	93 e1       	ldi	r25, 0x13	; 19
    25a2:	0e 94 fd 09 	call	0x13fa	; 0x13fa <vListInitialise>
    25a6:	8f ed       	ldi	r24, 0xDF	; 223
    25a8:	93 e1       	ldi	r25, 0x13	; 19
    25aa:	0e 94 fd 09 	call	0x13fa	; 0x13fa <vListInitialise>
    25ae:	84 ed       	ldi	r24, 0xD4	; 212
    25b0:	93 e1       	ldi	r25, 0x13	; 19
    25b2:	0e 94 fd 09 	call	0x13fa	; 0x13fa <vListInitialise>
    25b6:	88 ec       	ldi	r24, 0xC8	; 200
    25b8:	93 e1       	ldi	r25, 0x13	; 19
    25ba:	0e 94 fd 09 	call	0x13fa	; 0x13fa <vListInitialise>
    25be:	89 ef       	ldi	r24, 0xF9	; 249
    25c0:	93 e1       	ldi	r25, 0x13	; 19
    25c2:	90 93 ed 13 	sts	0x13ED, r25	; 0x8013ed <pxDelayedTaskList+0x1>
    25c6:	80 93 ec 13 	sts	0x13EC, r24	; 0x8013ec <pxDelayedTaskList>
    25ca:	8e ee       	ldi	r24, 0xEE	; 238
    25cc:	93 e1       	ldi	r25, 0x13	; 19
    25ce:	90 93 eb 13 	sts	0x13EB, r25	; 0x8013eb <pxOverflowDelayedTaskList+0x1>
    25d2:	80 93 ea 13 	sts	0x13EA, r24	; 0x8013ea <pxOverflowDelayedTaskList>
    25d6:	10 c0       	rjmp	.+32     	; 0x25f8 <xTaskCreate+0x1c4>
    25d8:	80 91 c1 13 	lds	r24, 0x13C1	; 0x8013c1 <xSchedulerRunning>
    25dc:	81 11       	cpse	r24, r1
    25de:	0c c0       	rjmp	.+24     	; 0x25f8 <xTaskCreate+0x1c4>
    25e0:	e0 91 30 14 	lds	r30, 0x1430	; 0x801430 <pxCurrentTCB>
    25e4:	f0 91 31 14 	lds	r31, 0x1431	; 0x801431 <pxCurrentTCB+0x1>
    25e8:	92 8d       	ldd	r25, Z+26	; 0x1a
    25ea:	8a 8d       	ldd	r24, Y+26	; 0x1a
    25ec:	89 17       	cp	r24, r25
    25ee:	20 f0       	brcs	.+8      	; 0x25f8 <xTaskCreate+0x1c4>
    25f0:	d0 93 31 14 	sts	0x1431, r29	; 0x801431 <pxCurrentTCB+0x1>
    25f4:	c0 93 30 14 	sts	0x1430, r28	; 0x801430 <pxCurrentTCB>
    25f8:	80 91 bd 13 	lds	r24, 0x13BD	; 0x8013bd <uxTaskNumber>
    25fc:	8f 5f       	subi	r24, 0xFF	; 255
    25fe:	80 93 bd 13 	sts	0x13BD, r24	; 0x8013bd <uxTaskNumber>
    2602:	8d a3       	std	Y+37, r24	; 0x25
    2604:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2606:	90 91 c2 13 	lds	r25, 0x13C2	; 0x8013c2 <uxTopReadyPriority>
    260a:	98 17       	cp	r25, r24
    260c:	10 f4       	brcc	.+4      	; 0x2612 <xTaskCreate+0x1de>
    260e:	80 93 c2 13 	sts	0x13C2, r24	; 0x8013c2 <uxTopReadyPriority>
    2612:	fb e0       	ldi	r31, 0x0B	; 11
    2614:	8f 9f       	mul	r24, r31
    2616:	c0 01       	movw	r24, r0
    2618:	11 24       	eor	r1, r1
    261a:	b6 01       	movw	r22, r12
    261c:	8c 5f       	subi	r24, 0xFC	; 252
    261e:	9b 4e       	sbci	r25, 0xEB	; 235
    2620:	0e 94 12 0a 	call	0x1424	; 0x1424 <vListInsertEnd>
    2624:	0f 90       	pop	r0
    2626:	0f be       	out	0x3f, r0	; 63
    2628:	80 91 c1 13 	lds	r24, 0x13C1	; 0x8013c1 <xSchedulerRunning>
    262c:	88 23       	and	r24, r24
    262e:	59 f0       	breq	.+22     	; 0x2646 <xTaskCreate+0x212>
    2630:	e0 91 30 14 	lds	r30, 0x1430	; 0x801430 <pxCurrentTCB>
    2634:	f0 91 31 14 	lds	r31, 0x1431	; 0x801431 <pxCurrentTCB+0x1>
    2638:	92 8d       	ldd	r25, Z+26	; 0x1a
    263a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    263c:	98 17       	cp	r25, r24
    263e:	28 f4       	brcc	.+10     	; 0x264a <xTaskCreate+0x216>
    2640:	24 d8       	rcall	.-4024   	; 0x168a <vPortYield>
    2642:	81 e0       	ldi	r24, 0x01	; 1
    2644:	05 c0       	rjmp	.+10     	; 0x2650 <xTaskCreate+0x21c>
    2646:	81 e0       	ldi	r24, 0x01	; 1
    2648:	03 c0       	rjmp	.+6      	; 0x2650 <xTaskCreate+0x21c>
    264a:	81 e0       	ldi	r24, 0x01	; 1
    264c:	01 c0       	rjmp	.+2      	; 0x2650 <xTaskCreate+0x21c>
    264e:	8f ef       	ldi	r24, 0xFF	; 255
    2650:	df 91       	pop	r29
    2652:	cf 91       	pop	r28
    2654:	0f 91       	pop	r16
    2656:	ff 90       	pop	r15
    2658:	ef 90       	pop	r14
    265a:	df 90       	pop	r13
    265c:	cf 90       	pop	r12
    265e:	bf 90       	pop	r11
    2660:	af 90       	pop	r10
    2662:	9f 90       	pop	r9
    2664:	8f 90       	pop	r8
    2666:	7f 90       	pop	r7
    2668:	6f 90       	pop	r6
    266a:	5f 90       	pop	r5
    266c:	4f 90       	pop	r4
    266e:	08 95       	ret

00002670 <vTaskStartScheduler>:
    2670:	ef 92       	push	r14
    2672:	ff 92       	push	r15
    2674:	0f 93       	push	r16
    2676:	0f 2e       	mov	r0, r31
    2678:	f7 eb       	ldi	r31, 0xB7	; 183
    267a:	ef 2e       	mov	r14, r31
    267c:	f3 e1       	ldi	r31, 0x13	; 19
    267e:	ff 2e       	mov	r15, r31
    2680:	f0 2d       	mov	r31, r0
    2682:	00 e0       	ldi	r16, 0x00	; 0
    2684:	20 e0       	ldi	r18, 0x00	; 0
    2686:	30 e0       	ldi	r19, 0x00	; 0
    2688:	40 ec       	ldi	r20, 0xC0	; 192
    268a:	50 e0       	ldi	r21, 0x00	; 0
    268c:	64 e9       	ldi	r22, 0x94	; 148
    268e:	73 e0       	ldi	r23, 0x03	; 3
    2690:	8d ec       	ldi	r24, 0xCD	; 205
    2692:	90 e0       	ldi	r25, 0x00	; 0
    2694:	cf de       	rcall	.-610    	; 0x2434 <xTaskCreate>
    2696:	81 30       	cpi	r24, 0x01	; 1
    2698:	19 f5       	brne	.+70     	; 0x26e0 <vTaskStartScheduler+0x70>
    269a:	cc d6       	rcall	.+3480   	; 0x3434 <xTimerCreateTimerTask>
    269c:	81 30       	cpi	r24, 0x01	; 1
    269e:	01 f5       	brne	.+64     	; 0x26e0 <vTaskStartScheduler+0x70>
    26a0:	f8 94       	cli
    26a2:	8f ef       	ldi	r24, 0xFF	; 255
    26a4:	9f ef       	ldi	r25, 0xFF	; 255
    26a6:	dc 01       	movw	r26, r24
    26a8:	80 93 b9 13 	sts	0x13B9, r24	; 0x8013b9 <xNextTaskUnblockTime>
    26ac:	90 93 ba 13 	sts	0x13BA, r25	; 0x8013ba <xNextTaskUnblockTime+0x1>
    26b0:	a0 93 bb 13 	sts	0x13BB, r26	; 0x8013bb <xNextTaskUnblockTime+0x2>
    26b4:	b0 93 bc 13 	sts	0x13BC, r27	; 0x8013bc <xNextTaskUnblockTime+0x3>
    26b8:	81 e0       	ldi	r24, 0x01	; 1
    26ba:	80 93 c1 13 	sts	0x13C1, r24	; 0x8013c1 <xSchedulerRunning>
    26be:	10 92 c3 13 	sts	0x13C3, r1	; 0x8013c3 <xTickCount>
    26c2:	10 92 c4 13 	sts	0x13C4, r1	; 0x8013c4 <xTickCount+0x1>
    26c6:	10 92 c5 13 	sts	0x13C5, r1	; 0x8013c5 <xTickCount+0x2>
    26ca:	10 92 c6 13 	sts	0x13C6, r1	; 0x8013c6 <xTickCount+0x3>
    26ce:	e0 91 30 14 	lds	r30, 0x1430	; 0x801430 <pxCurrentTCB>
    26d2:	f0 91 31 14 	lds	r31, 0x1431	; 0x801431 <pxCurrentTCB+0x1>
    26d6:	81 a5       	ldd	r24, Z+41	; 0x29
    26d8:	0e 94 4a 07 	call	0xe94	; 0xe94 <task_switch_in>
    26dc:	0e 94 09 0b 	call	0x1612	; 0x1612 <xPortStartScheduler>
    26e0:	0f 91       	pop	r16
    26e2:	ff 90       	pop	r15
    26e4:	ef 90       	pop	r14
    26e6:	08 95       	ret

000026e8 <vTaskSuspendAll>:
    26e8:	80 91 b6 13 	lds	r24, 0x13B6	; 0x8013b6 <uxSchedulerSuspended>
    26ec:	8f 5f       	subi	r24, 0xFF	; 255
    26ee:	80 93 b6 13 	sts	0x13B6, r24	; 0x8013b6 <uxSchedulerSuspended>
    26f2:	08 95       	ret

000026f4 <xTaskGetTickCount>:
    26f4:	0f b6       	in	r0, 0x3f	; 63
    26f6:	f8 94       	cli
    26f8:	0f 92       	push	r0
    26fa:	60 91 c3 13 	lds	r22, 0x13C3	; 0x8013c3 <xTickCount>
    26fe:	70 91 c4 13 	lds	r23, 0x13C4	; 0x8013c4 <xTickCount+0x1>
    2702:	80 91 c5 13 	lds	r24, 0x13C5	; 0x8013c5 <xTickCount+0x2>
    2706:	90 91 c6 13 	lds	r25, 0x13C6	; 0x8013c6 <xTickCount+0x3>
    270a:	0f 90       	pop	r0
    270c:	0f be       	out	0x3f, r0	; 63
    270e:	08 95       	ret

00002710 <xTaskIncrementTick>:
    2710:	9f 92       	push	r9
    2712:	af 92       	push	r10
    2714:	bf 92       	push	r11
    2716:	cf 92       	push	r12
    2718:	df 92       	push	r13
    271a:	ef 92       	push	r14
    271c:	ff 92       	push	r15
    271e:	0f 93       	push	r16
    2720:	1f 93       	push	r17
    2722:	cf 93       	push	r28
    2724:	df 93       	push	r29
    2726:	80 91 b6 13 	lds	r24, 0x13B6	; 0x8013b6 <uxSchedulerSuspended>
    272a:	81 11       	cpse	r24, r1
    272c:	ad c0       	rjmp	.+346    	; 0x2888 <xTaskIncrementTick+0x178>
    272e:	c0 90 c3 13 	lds	r12, 0x13C3	; 0x8013c3 <xTickCount>
    2732:	d0 90 c4 13 	lds	r13, 0x13C4	; 0x8013c4 <xTickCount+0x1>
    2736:	e0 90 c5 13 	lds	r14, 0x13C5	; 0x8013c5 <xTickCount+0x2>
    273a:	f0 90 c6 13 	lds	r15, 0x13C6	; 0x8013c6 <xTickCount+0x3>
    273e:	8f ef       	ldi	r24, 0xFF	; 255
    2740:	c8 1a       	sub	r12, r24
    2742:	d8 0a       	sbc	r13, r24
    2744:	e8 0a       	sbc	r14, r24
    2746:	f8 0a       	sbc	r15, r24
    2748:	c0 92 c3 13 	sts	0x13C3, r12	; 0x8013c3 <xTickCount>
    274c:	d0 92 c4 13 	sts	0x13C4, r13	; 0x8013c4 <xTickCount+0x1>
    2750:	e0 92 c5 13 	sts	0x13C5, r14	; 0x8013c5 <xTickCount+0x2>
    2754:	f0 92 c6 13 	sts	0x13C6, r15	; 0x8013c6 <xTickCount+0x3>
    2758:	c1 14       	cp	r12, r1
    275a:	d1 04       	cpc	r13, r1
    275c:	e1 04       	cpc	r14, r1
    275e:	f1 04       	cpc	r15, r1
    2760:	b1 f4       	brne	.+44     	; 0x278e <xTaskIncrementTick+0x7e>
    2762:	80 91 ec 13 	lds	r24, 0x13EC	; 0x8013ec <pxDelayedTaskList>
    2766:	90 91 ed 13 	lds	r25, 0x13ED	; 0x8013ed <pxDelayedTaskList+0x1>
    276a:	20 91 ea 13 	lds	r18, 0x13EA	; 0x8013ea <pxOverflowDelayedTaskList>
    276e:	30 91 eb 13 	lds	r19, 0x13EB	; 0x8013eb <pxOverflowDelayedTaskList+0x1>
    2772:	30 93 ed 13 	sts	0x13ED, r19	; 0x8013ed <pxDelayedTaskList+0x1>
    2776:	20 93 ec 13 	sts	0x13EC, r18	; 0x8013ec <pxDelayedTaskList>
    277a:	90 93 eb 13 	sts	0x13EB, r25	; 0x8013eb <pxOverflowDelayedTaskList+0x1>
    277e:	80 93 ea 13 	sts	0x13EA, r24	; 0x8013ea <pxOverflowDelayedTaskList>
    2782:	80 91 be 13 	lds	r24, 0x13BE	; 0x8013be <xNumOfOverflows>
    2786:	8f 5f       	subi	r24, 0xFF	; 255
    2788:	80 93 be 13 	sts	0x13BE, r24	; 0x8013be <xNumOfOverflows>
    278c:	b6 dd       	rcall	.-1172   	; 0x22fa <prvResetNextTaskUnblockTime>
    278e:	80 91 b9 13 	lds	r24, 0x13B9	; 0x8013b9 <xNextTaskUnblockTime>
    2792:	90 91 ba 13 	lds	r25, 0x13BA	; 0x8013ba <xNextTaskUnblockTime+0x1>
    2796:	a0 91 bb 13 	lds	r26, 0x13BB	; 0x8013bb <xNextTaskUnblockTime+0x2>
    279a:	b0 91 bc 13 	lds	r27, 0x13BC	; 0x8013bc <xNextTaskUnblockTime+0x3>
    279e:	c8 16       	cp	r12, r24
    27a0:	d9 06       	cpc	r13, r25
    27a2:	ea 06       	cpc	r14, r26
    27a4:	fb 06       	cpc	r15, r27
    27a6:	10 f4       	brcc	.+4      	; 0x27ac <xTaskIncrementTick+0x9c>
    27a8:	b1 2c       	mov	r11, r1
    27aa:	5d c0       	rjmp	.+186    	; 0x2866 <xTaskIncrementTick+0x156>
    27ac:	b1 2c       	mov	r11, r1
    27ae:	0f 2e       	mov	r0, r31
    27b0:	fb e0       	ldi	r31, 0x0B	; 11
    27b2:	af 2e       	mov	r10, r31
    27b4:	f0 2d       	mov	r31, r0
    27b6:	99 24       	eor	r9, r9
    27b8:	93 94       	inc	r9
    27ba:	e0 91 ec 13 	lds	r30, 0x13EC	; 0x8013ec <pxDelayedTaskList>
    27be:	f0 91 ed 13 	lds	r31, 0x13ED	; 0x8013ed <pxDelayedTaskList+0x1>
    27c2:	80 81       	ld	r24, Z
    27c4:	81 11       	cpse	r24, r1
    27c6:	0c c0       	rjmp	.+24     	; 0x27e0 <xTaskIncrementTick+0xd0>
    27c8:	8f ef       	ldi	r24, 0xFF	; 255
    27ca:	9f ef       	ldi	r25, 0xFF	; 255
    27cc:	dc 01       	movw	r26, r24
    27ce:	80 93 b9 13 	sts	0x13B9, r24	; 0x8013b9 <xNextTaskUnblockTime>
    27d2:	90 93 ba 13 	sts	0x13BA, r25	; 0x8013ba <xNextTaskUnblockTime+0x1>
    27d6:	a0 93 bb 13 	sts	0x13BB, r26	; 0x8013bb <xNextTaskUnblockTime+0x2>
    27da:	b0 93 bc 13 	sts	0x13BC, r27	; 0x8013bc <xNextTaskUnblockTime+0x3>
    27de:	43 c0       	rjmp	.+134    	; 0x2866 <xTaskIncrementTick+0x156>
    27e0:	e0 91 ec 13 	lds	r30, 0x13EC	; 0x8013ec <pxDelayedTaskList>
    27e4:	f0 91 ed 13 	lds	r31, 0x13ED	; 0x8013ed <pxDelayedTaskList+0x1>
    27e8:	07 80       	ldd	r0, Z+7	; 0x07
    27ea:	f0 85       	ldd	r31, Z+8	; 0x08
    27ec:	e0 2d       	mov	r30, r0
    27ee:	c0 85       	ldd	r28, Z+8	; 0x08
    27f0:	d1 85       	ldd	r29, Z+9	; 0x09
    27f2:	8a 81       	ldd	r24, Y+2	; 0x02
    27f4:	9b 81       	ldd	r25, Y+3	; 0x03
    27f6:	ac 81       	ldd	r26, Y+4	; 0x04
    27f8:	bd 81       	ldd	r27, Y+5	; 0x05
    27fa:	c8 16       	cp	r12, r24
    27fc:	d9 06       	cpc	r13, r25
    27fe:	ea 06       	cpc	r14, r26
    2800:	fb 06       	cpc	r15, r27
    2802:	48 f4       	brcc	.+18     	; 0x2816 <xTaskIncrementTick+0x106>
    2804:	80 93 b9 13 	sts	0x13B9, r24	; 0x8013b9 <xNextTaskUnblockTime>
    2808:	90 93 ba 13 	sts	0x13BA, r25	; 0x8013ba <xNextTaskUnblockTime+0x1>
    280c:	a0 93 bb 13 	sts	0x13BB, r26	; 0x8013bb <xNextTaskUnblockTime+0x2>
    2810:	b0 93 bc 13 	sts	0x13BC, r27	; 0x8013bc <xNextTaskUnblockTime+0x3>
    2814:	28 c0       	rjmp	.+80     	; 0x2866 <xTaskIncrementTick+0x156>
    2816:	8e 01       	movw	r16, r28
    2818:	0e 5f       	subi	r16, 0xFE	; 254
    281a:	1f 4f       	sbci	r17, 0xFF	; 255
    281c:	c8 01       	movw	r24, r16
    281e:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <uxListRemove>
    2822:	88 8d       	ldd	r24, Y+24	; 0x18
    2824:	99 8d       	ldd	r25, Y+25	; 0x19
    2826:	89 2b       	or	r24, r25
    2828:	21 f0       	breq	.+8      	; 0x2832 <xTaskIncrementTick+0x122>
    282a:	ce 01       	movw	r24, r28
    282c:	0e 96       	adiw	r24, 0x0e	; 14
    282e:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <uxListRemove>
    2832:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2834:	90 91 c2 13 	lds	r25, 0x13C2	; 0x8013c2 <uxTopReadyPriority>
    2838:	98 17       	cp	r25, r24
    283a:	10 f4       	brcc	.+4      	; 0x2840 <xTaskIncrementTick+0x130>
    283c:	80 93 c2 13 	sts	0x13C2, r24	; 0x8013c2 <uxTopReadyPriority>
    2840:	a8 9e       	mul	r10, r24
    2842:	c0 01       	movw	r24, r0
    2844:	11 24       	eor	r1, r1
    2846:	b8 01       	movw	r22, r16
    2848:	8c 5f       	subi	r24, 0xFC	; 252
    284a:	9b 4e       	sbci	r25, 0xEB	; 235
    284c:	0e 94 12 0a 	call	0x1424	; 0x1424 <vListInsertEnd>
    2850:	e0 91 30 14 	lds	r30, 0x1430	; 0x801430 <pxCurrentTCB>
    2854:	f0 91 31 14 	lds	r31, 0x1431	; 0x801431 <pxCurrentTCB+0x1>
    2858:	9a 8d       	ldd	r25, Y+26	; 0x1a
    285a:	82 8d       	ldd	r24, Z+26	; 0x1a
    285c:	98 17       	cp	r25, r24
    285e:	08 f4       	brcc	.+2      	; 0x2862 <xTaskIncrementTick+0x152>
    2860:	ac cf       	rjmp	.-168    	; 0x27ba <xTaskIncrementTick+0xaa>
    2862:	b9 2c       	mov	r11, r9
    2864:	aa cf       	rjmp	.-172    	; 0x27ba <xTaskIncrementTick+0xaa>
    2866:	e0 91 30 14 	lds	r30, 0x1430	; 0x801430 <pxCurrentTCB>
    286a:	f0 91 31 14 	lds	r31, 0x1431	; 0x801431 <pxCurrentTCB+0x1>
    286e:	e2 8d       	ldd	r30, Z+26	; 0x1a
    2870:	8b e0       	ldi	r24, 0x0B	; 11
    2872:	e8 9f       	mul	r30, r24
    2874:	f0 01       	movw	r30, r0
    2876:	11 24       	eor	r1, r1
    2878:	ec 5f       	subi	r30, 0xFC	; 252
    287a:	fb 4e       	sbci	r31, 0xEB	; 235
    287c:	80 81       	ld	r24, Z
    287e:	82 30       	cpi	r24, 0x02	; 2
    2880:	48 f0       	brcs	.+18     	; 0x2894 <xTaskIncrementTick+0x184>
    2882:	bb 24       	eor	r11, r11
    2884:	b3 94       	inc	r11
    2886:	06 c0       	rjmp	.+12     	; 0x2894 <xTaskIncrementTick+0x184>
    2888:	80 91 c0 13 	lds	r24, 0x13C0	; 0x8013c0 <uxPendedTicks>
    288c:	8f 5f       	subi	r24, 0xFF	; 255
    288e:	80 93 c0 13 	sts	0x13C0, r24	; 0x8013c0 <uxPendedTicks>
    2892:	b1 2c       	mov	r11, r1
    2894:	80 91 bf 13 	lds	r24, 0x13BF	; 0x8013bf <xYieldPending>
    2898:	88 23       	and	r24, r24
    289a:	11 f0       	breq	.+4      	; 0x28a0 <xTaskIncrementTick+0x190>
    289c:	bb 24       	eor	r11, r11
    289e:	b3 94       	inc	r11
    28a0:	8b 2d       	mov	r24, r11
    28a2:	df 91       	pop	r29
    28a4:	cf 91       	pop	r28
    28a6:	1f 91       	pop	r17
    28a8:	0f 91       	pop	r16
    28aa:	ff 90       	pop	r15
    28ac:	ef 90       	pop	r14
    28ae:	df 90       	pop	r13
    28b0:	cf 90       	pop	r12
    28b2:	bf 90       	pop	r11
    28b4:	af 90       	pop	r10
    28b6:	9f 90       	pop	r9
    28b8:	08 95       	ret

000028ba <xTaskResumeAll>:
    28ba:	cf 92       	push	r12
    28bc:	df 92       	push	r13
    28be:	ef 92       	push	r14
    28c0:	ff 92       	push	r15
    28c2:	0f 93       	push	r16
    28c4:	1f 93       	push	r17
    28c6:	cf 93       	push	r28
    28c8:	df 93       	push	r29
    28ca:	0f b6       	in	r0, 0x3f	; 63
    28cc:	f8 94       	cli
    28ce:	0f 92       	push	r0
    28d0:	80 91 b6 13 	lds	r24, 0x13B6	; 0x8013b6 <uxSchedulerSuspended>
    28d4:	81 50       	subi	r24, 0x01	; 1
    28d6:	80 93 b6 13 	sts	0x13B6, r24	; 0x8013b6 <uxSchedulerSuspended>
    28da:	80 91 b6 13 	lds	r24, 0x13B6	; 0x8013b6 <uxSchedulerSuspended>
    28de:	81 11       	cpse	r24, r1
    28e0:	5a c0       	rjmp	.+180    	; 0x2996 <xTaskResumeAll+0xdc>
    28e2:	80 91 c7 13 	lds	r24, 0x13C7	; 0x8013c7 <uxCurrentNumberOfTasks>
    28e6:	81 11       	cpse	r24, r1
    28e8:	2c c0       	rjmp	.+88     	; 0x2942 <xTaskResumeAll+0x88>
    28ea:	58 c0       	rjmp	.+176    	; 0x299c <xTaskResumeAll+0xe2>
    28ec:	d7 01       	movw	r26, r14
    28ee:	17 96       	adiw	r26, 0x07	; 7
    28f0:	ed 91       	ld	r30, X+
    28f2:	fc 91       	ld	r31, X
    28f4:	18 97       	sbiw	r26, 0x08	; 8
    28f6:	c0 85       	ldd	r28, Z+8	; 0x08
    28f8:	d1 85       	ldd	r29, Z+9	; 0x09
    28fa:	ce 01       	movw	r24, r28
    28fc:	0e 96       	adiw	r24, 0x0e	; 14
    28fe:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <uxListRemove>
    2902:	8e 01       	movw	r16, r28
    2904:	0e 5f       	subi	r16, 0xFE	; 254
    2906:	1f 4f       	sbci	r17, 0xFF	; 255
    2908:	c8 01       	movw	r24, r16
    290a:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <uxListRemove>
    290e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2910:	90 91 c2 13 	lds	r25, 0x13C2	; 0x8013c2 <uxTopReadyPriority>
    2914:	98 17       	cp	r25, r24
    2916:	10 f4       	brcc	.+4      	; 0x291c <xTaskResumeAll+0x62>
    2918:	80 93 c2 13 	sts	0x13C2, r24	; 0x8013c2 <uxTopReadyPriority>
    291c:	d8 9e       	mul	r13, r24
    291e:	c0 01       	movw	r24, r0
    2920:	11 24       	eor	r1, r1
    2922:	b8 01       	movw	r22, r16
    2924:	8c 5f       	subi	r24, 0xFC	; 252
    2926:	9b 4e       	sbci	r25, 0xEB	; 235
    2928:	0e 94 12 0a 	call	0x1424	; 0x1424 <vListInsertEnd>
    292c:	e0 91 30 14 	lds	r30, 0x1430	; 0x801430 <pxCurrentTCB>
    2930:	f0 91 31 14 	lds	r31, 0x1431	; 0x801431 <pxCurrentTCB+0x1>
    2934:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2936:	82 8d       	ldd	r24, Z+26	; 0x1a
    2938:	98 17       	cp	r25, r24
    293a:	88 f0       	brcs	.+34     	; 0x295e <xTaskResumeAll+0xa4>
    293c:	c0 92 bf 13 	sts	0x13BF, r12	; 0x8013bf <xYieldPending>
    2940:	0e c0       	rjmp	.+28     	; 0x295e <xTaskResumeAll+0xa4>
    2942:	c0 e0       	ldi	r28, 0x00	; 0
    2944:	d0 e0       	ldi	r29, 0x00	; 0
    2946:	0f 2e       	mov	r0, r31
    2948:	ff ed       	ldi	r31, 0xDF	; 223
    294a:	ef 2e       	mov	r14, r31
    294c:	f3 e1       	ldi	r31, 0x13	; 19
    294e:	ff 2e       	mov	r15, r31
    2950:	f0 2d       	mov	r31, r0
    2952:	0f 2e       	mov	r0, r31
    2954:	fb e0       	ldi	r31, 0x0B	; 11
    2956:	df 2e       	mov	r13, r31
    2958:	f0 2d       	mov	r31, r0
    295a:	cc 24       	eor	r12, r12
    295c:	c3 94       	inc	r12
    295e:	f7 01       	movw	r30, r14
    2960:	80 81       	ld	r24, Z
    2962:	81 11       	cpse	r24, r1
    2964:	c3 cf       	rjmp	.-122    	; 0x28ec <xTaskResumeAll+0x32>
    2966:	cd 2b       	or	r28, r29
    2968:	09 f0       	breq	.+2      	; 0x296c <xTaskResumeAll+0xb2>
    296a:	c7 dc       	rcall	.-1650   	; 0x22fa <prvResetNextTaskUnblockTime>
    296c:	c0 91 c0 13 	lds	r28, 0x13C0	; 0x8013c0 <uxPendedTicks>
    2970:	cc 23       	and	r28, r28
    2972:	49 f0       	breq	.+18     	; 0x2986 <xTaskResumeAll+0xcc>
    2974:	d1 e0       	ldi	r29, 0x01	; 1
    2976:	cc de       	rcall	.-616    	; 0x2710 <xTaskIncrementTick>
    2978:	81 11       	cpse	r24, r1
    297a:	d0 93 bf 13 	sts	0x13BF, r29	; 0x8013bf <xYieldPending>
    297e:	c1 50       	subi	r28, 0x01	; 1
    2980:	d1 f7       	brne	.-12     	; 0x2976 <xTaskResumeAll+0xbc>
    2982:	10 92 c0 13 	sts	0x13C0, r1	; 0x8013c0 <uxPendedTicks>
    2986:	80 91 bf 13 	lds	r24, 0x13BF	; 0x8013bf <xYieldPending>
    298a:	88 23       	and	r24, r24
    298c:	31 f0       	breq	.+12     	; 0x299a <xTaskResumeAll+0xe0>
    298e:	0e 94 45 0b 	call	0x168a	; 0x168a <vPortYield>
    2992:	81 e0       	ldi	r24, 0x01	; 1
    2994:	03 c0       	rjmp	.+6      	; 0x299c <xTaskResumeAll+0xe2>
    2996:	80 e0       	ldi	r24, 0x00	; 0
    2998:	01 c0       	rjmp	.+2      	; 0x299c <xTaskResumeAll+0xe2>
    299a:	80 e0       	ldi	r24, 0x00	; 0
    299c:	0f 90       	pop	r0
    299e:	0f be       	out	0x3f, r0	; 63
    29a0:	df 91       	pop	r29
    29a2:	cf 91       	pop	r28
    29a4:	1f 91       	pop	r17
    29a6:	0f 91       	pop	r16
    29a8:	ff 90       	pop	r15
    29aa:	ef 90       	pop	r14
    29ac:	df 90       	pop	r13
    29ae:	cf 90       	pop	r12
    29b0:	08 95       	ret

000029b2 <vTaskDelay>:
    29b2:	cf 92       	push	r12
    29b4:	df 92       	push	r13
    29b6:	ef 92       	push	r14
    29b8:	ff 92       	push	r15
    29ba:	6b 01       	movw	r12, r22
    29bc:	7c 01       	movw	r14, r24
    29be:	67 2b       	or	r22, r23
    29c0:	68 2b       	or	r22, r24
    29c2:	69 2b       	or	r22, r25
    29c4:	41 f0       	breq	.+16     	; 0x29d6 <vTaskDelay+0x24>
    29c6:	90 de       	rcall	.-736    	; 0x26e8 <vTaskSuspendAll>
    29c8:	40 e0       	ldi	r20, 0x00	; 0
    29ca:	c7 01       	movw	r24, r14
    29cc:	b6 01       	movw	r22, r12
    29ce:	bf dc       	rcall	.-1666   	; 0x234e <prvAddCurrentTaskToDelayedList>
    29d0:	74 df       	rcall	.-280    	; 0x28ba <xTaskResumeAll>
    29d2:	81 11       	cpse	r24, r1
    29d4:	02 c0       	rjmp	.+4      	; 0x29da <vTaskDelay+0x28>
    29d6:	0e 94 45 0b 	call	0x168a	; 0x168a <vPortYield>
    29da:	ff 90       	pop	r15
    29dc:	ef 90       	pop	r14
    29de:	df 90       	pop	r13
    29e0:	cf 90       	pop	r12
    29e2:	08 95       	ret

000029e4 <vTaskSwitchContext>:
    29e4:	80 91 b6 13 	lds	r24, 0x13B6	; 0x8013b6 <uxSchedulerSuspended>
    29e8:	88 23       	and	r24, r24
    29ea:	21 f0       	breq	.+8      	; 0x29f4 <vTaskSwitchContext+0x10>
    29ec:	81 e0       	ldi	r24, 0x01	; 1
    29ee:	80 93 bf 13 	sts	0x13BF, r24	; 0x8013bf <xYieldPending>
    29f2:	08 95       	ret
    29f4:	10 92 bf 13 	sts	0x13BF, r1	; 0x8013bf <xYieldPending>
    29f8:	e0 91 30 14 	lds	r30, 0x1430	; 0x801430 <pxCurrentTCB>
    29fc:	f0 91 31 14 	lds	r31, 0x1431	; 0x801431 <pxCurrentTCB+0x1>
    2a00:	81 a5       	ldd	r24, Z+41	; 0x29
    2a02:	0e 94 54 07 	call	0xea8	; 0xea8 <task_switch_out>
    2a06:	a0 91 30 14 	lds	r26, 0x1430	; 0x801430 <pxCurrentTCB>
    2a0a:	b0 91 31 14 	lds	r27, 0x1431	; 0x801431 <pxCurrentTCB+0x1>
    2a0e:	e0 91 30 14 	lds	r30, 0x1430	; 0x801430 <pxCurrentTCB>
    2a12:	f0 91 31 14 	lds	r31, 0x1431	; 0x801431 <pxCurrentTCB+0x1>
    2a16:	2d 91       	ld	r18, X+
    2a18:	3c 91       	ld	r19, X
    2a1a:	83 8d       	ldd	r24, Z+27	; 0x1b
    2a1c:	94 8d       	ldd	r25, Z+28	; 0x1c
    2a1e:	82 17       	cp	r24, r18
    2a20:	93 07       	cpc	r25, r19
    2a22:	58 f0       	brcs	.+22     	; 0x2a3a <vTaskSwitchContext+0x56>
    2a24:	60 91 30 14 	lds	r22, 0x1430	; 0x801430 <pxCurrentTCB>
    2a28:	70 91 31 14 	lds	r23, 0x1431	; 0x801431 <pxCurrentTCB+0x1>
    2a2c:	80 91 30 14 	lds	r24, 0x1430	; 0x801430 <pxCurrentTCB>
    2a30:	90 91 31 14 	lds	r25, 0x1431	; 0x801431 <pxCurrentTCB+0x1>
    2a34:	63 5e       	subi	r22, 0xE3	; 227
    2a36:	7f 4f       	sbci	r23, 0xFF	; 255
    2a38:	20 d6       	rcall	.+3136   	; 0x367a <vApplicationStackOverflowHook>
    2a3a:	80 91 c2 13 	lds	r24, 0x13C2	; 0x8013c2 <uxTopReadyPriority>
    2a3e:	28 2f       	mov	r18, r24
    2a40:	30 e0       	ldi	r19, 0x00	; 0
    2a42:	9b e0       	ldi	r25, 0x0B	; 11
    2a44:	89 9f       	mul	r24, r25
    2a46:	f0 01       	movw	r30, r0
    2a48:	11 24       	eor	r1, r1
    2a4a:	ec 5f       	subi	r30, 0xFC	; 252
    2a4c:	fb 4e       	sbci	r31, 0xEB	; 235
    2a4e:	90 81       	ld	r25, Z
    2a50:	91 11       	cpse	r25, r1
    2a52:	0e c0       	rjmp	.+28     	; 0x2a70 <vTaskSwitchContext+0x8c>
    2a54:	4b e0       	ldi	r20, 0x0B	; 11
    2a56:	81 50       	subi	r24, 0x01	; 1
    2a58:	28 2f       	mov	r18, r24
    2a5a:	30 e0       	ldi	r19, 0x00	; 0
    2a5c:	42 9f       	mul	r20, r18
    2a5e:	f0 01       	movw	r30, r0
    2a60:	43 9f       	mul	r20, r19
    2a62:	f0 0d       	add	r31, r0
    2a64:	11 24       	eor	r1, r1
    2a66:	ec 5f       	subi	r30, 0xFC	; 252
    2a68:	fb 4e       	sbci	r31, 0xEB	; 235
    2a6a:	90 81       	ld	r25, Z
    2a6c:	99 23       	and	r25, r25
    2a6e:	99 f3       	breq	.-26     	; 0x2a56 <vTaskSwitchContext+0x72>
    2a70:	9b e0       	ldi	r25, 0x0B	; 11
    2a72:	92 9f       	mul	r25, r18
    2a74:	a0 01       	movw	r20, r0
    2a76:	93 9f       	mul	r25, r19
    2a78:	50 0d       	add	r21, r0
    2a7a:	11 24       	eor	r1, r1
    2a7c:	da 01       	movw	r26, r20
    2a7e:	ac 5f       	subi	r26, 0xFC	; 252
    2a80:	bb 4e       	sbci	r27, 0xEB	; 235
    2a82:	11 96       	adiw	r26, 0x01	; 1
    2a84:	ed 91       	ld	r30, X+
    2a86:	fc 91       	ld	r31, X
    2a88:	12 97       	sbiw	r26, 0x02	; 2
    2a8a:	04 80       	ldd	r0, Z+4	; 0x04
    2a8c:	f5 81       	ldd	r31, Z+5	; 0x05
    2a8e:	e0 2d       	mov	r30, r0
    2a90:	12 96       	adiw	r26, 0x02	; 2
    2a92:	fc 93       	st	X, r31
    2a94:	ee 93       	st	-X, r30
    2a96:	11 97       	sbiw	r26, 0x01	; 1
    2a98:	49 5f       	subi	r20, 0xF9	; 249
    2a9a:	5b 4e       	sbci	r21, 0xEB	; 235
    2a9c:	e4 17       	cp	r30, r20
    2a9e:	f5 07       	cpc	r31, r21
    2aa0:	29 f4       	brne	.+10     	; 0x2aac <vTaskSwitchContext+0xc8>
    2aa2:	44 81       	ldd	r20, Z+4	; 0x04
    2aa4:	55 81       	ldd	r21, Z+5	; 0x05
    2aa6:	fd 01       	movw	r30, r26
    2aa8:	52 83       	std	Z+2, r21	; 0x02
    2aaa:	41 83       	std	Z+1, r20	; 0x01
    2aac:	9b e0       	ldi	r25, 0x0B	; 11
    2aae:	92 9f       	mul	r25, r18
    2ab0:	f0 01       	movw	r30, r0
    2ab2:	93 9f       	mul	r25, r19
    2ab4:	f0 0d       	add	r31, r0
    2ab6:	11 24       	eor	r1, r1
    2ab8:	ec 5f       	subi	r30, 0xFC	; 252
    2aba:	fb 4e       	sbci	r31, 0xEB	; 235
    2abc:	01 80       	ldd	r0, Z+1	; 0x01
    2abe:	f2 81       	ldd	r31, Z+2	; 0x02
    2ac0:	e0 2d       	mov	r30, r0
    2ac2:	20 85       	ldd	r18, Z+8	; 0x08
    2ac4:	31 85       	ldd	r19, Z+9	; 0x09
    2ac6:	30 93 31 14 	sts	0x1431, r19	; 0x801431 <pxCurrentTCB+0x1>
    2aca:	20 93 30 14 	sts	0x1430, r18	; 0x801430 <pxCurrentTCB>
    2ace:	80 93 c2 13 	sts	0x13C2, r24	; 0x8013c2 <uxTopReadyPriority>
    2ad2:	e0 91 30 14 	lds	r30, 0x1430	; 0x801430 <pxCurrentTCB>
    2ad6:	f0 91 31 14 	lds	r31, 0x1431	; 0x801431 <pxCurrentTCB+0x1>
    2ada:	81 a5       	ldd	r24, Z+41	; 0x29
    2adc:	0c 94 4a 07 	jmp	0xe94	; 0xe94 <task_switch_in>
    2ae0:	08 95       	ret

00002ae2 <vTaskPlaceOnEventList>:
    2ae2:	cf 92       	push	r12
    2ae4:	df 92       	push	r13
    2ae6:	ef 92       	push	r14
    2ae8:	ff 92       	push	r15
    2aea:	6a 01       	movw	r12, r20
    2aec:	7b 01       	movw	r14, r22
    2aee:	60 91 30 14 	lds	r22, 0x1430	; 0x801430 <pxCurrentTCB>
    2af2:	70 91 31 14 	lds	r23, 0x1431	; 0x801431 <pxCurrentTCB+0x1>
    2af6:	62 5f       	subi	r22, 0xF2	; 242
    2af8:	7f 4f       	sbci	r23, 0xFF	; 255
    2afa:	0e 94 33 0a 	call	0x1466	; 0x1466 <vListInsert>
    2afe:	41 e0       	ldi	r20, 0x01	; 1
    2b00:	c7 01       	movw	r24, r14
    2b02:	b6 01       	movw	r22, r12
    2b04:	24 dc       	rcall	.-1976   	; 0x234e <prvAddCurrentTaskToDelayedList>
    2b06:	ff 90       	pop	r15
    2b08:	ef 90       	pop	r14
    2b0a:	df 90       	pop	r13
    2b0c:	cf 90       	pop	r12
    2b0e:	08 95       	ret

00002b10 <vTaskPlaceOnUnorderedEventList>:
    2b10:	cf 92       	push	r12
    2b12:	df 92       	push	r13
    2b14:	ef 92       	push	r14
    2b16:	ff 92       	push	r15
    2b18:	0f 93       	push	r16
    2b1a:	1f 93       	push	r17
    2b1c:	68 01       	movw	r12, r16
    2b1e:	79 01       	movw	r14, r18
    2b20:	e0 91 30 14 	lds	r30, 0x1430	; 0x801430 <pxCurrentTCB>
    2b24:	f0 91 31 14 	lds	r31, 0x1431	; 0x801431 <pxCurrentTCB+0x1>
    2b28:	70 68       	ori	r23, 0x80	; 128
    2b2a:	46 87       	std	Z+14, r20	; 0x0e
    2b2c:	57 87       	std	Z+15, r21	; 0x0f
    2b2e:	60 8b       	std	Z+16, r22	; 0x10
    2b30:	71 8b       	std	Z+17, r23	; 0x11
    2b32:	60 91 30 14 	lds	r22, 0x1430	; 0x801430 <pxCurrentTCB>
    2b36:	70 91 31 14 	lds	r23, 0x1431	; 0x801431 <pxCurrentTCB+0x1>
    2b3a:	62 5f       	subi	r22, 0xF2	; 242
    2b3c:	7f 4f       	sbci	r23, 0xFF	; 255
    2b3e:	0e 94 12 0a 	call	0x1424	; 0x1424 <vListInsertEnd>
    2b42:	41 e0       	ldi	r20, 0x01	; 1
    2b44:	c7 01       	movw	r24, r14
    2b46:	b6 01       	movw	r22, r12
    2b48:	02 dc       	rcall	.-2044   	; 0x234e <prvAddCurrentTaskToDelayedList>
    2b4a:	1f 91       	pop	r17
    2b4c:	0f 91       	pop	r16
    2b4e:	ff 90       	pop	r15
    2b50:	ef 90       	pop	r14
    2b52:	df 90       	pop	r13
    2b54:	cf 90       	pop	r12
    2b56:	08 95       	ret

00002b58 <vTaskPlaceOnEventListRestricted>:
    2b58:	cf 92       	push	r12
    2b5a:	df 92       	push	r13
    2b5c:	ef 92       	push	r14
    2b5e:	ff 92       	push	r15
    2b60:	cf 93       	push	r28
    2b62:	6a 01       	movw	r12, r20
    2b64:	7b 01       	movw	r14, r22
    2b66:	c2 2f       	mov	r28, r18
    2b68:	60 91 30 14 	lds	r22, 0x1430	; 0x801430 <pxCurrentTCB>
    2b6c:	70 91 31 14 	lds	r23, 0x1431	; 0x801431 <pxCurrentTCB+0x1>
    2b70:	62 5f       	subi	r22, 0xF2	; 242
    2b72:	7f 4f       	sbci	r23, 0xFF	; 255
    2b74:	0e 94 12 0a 	call	0x1424	; 0x1424 <vListInsertEnd>
    2b78:	cc 23       	and	r28, r28
    2b7a:	21 f0       	breq	.+8      	; 0x2b84 <vTaskPlaceOnEventListRestricted+0x2c>
    2b7c:	cc 24       	eor	r12, r12
    2b7e:	ca 94       	dec	r12
    2b80:	dc 2c       	mov	r13, r12
    2b82:	76 01       	movw	r14, r12
    2b84:	4c 2f       	mov	r20, r28
    2b86:	c7 01       	movw	r24, r14
    2b88:	b6 01       	movw	r22, r12
    2b8a:	e1 db       	rcall	.-2110   	; 0x234e <prvAddCurrentTaskToDelayedList>
    2b8c:	cf 91       	pop	r28
    2b8e:	ff 90       	pop	r15
    2b90:	ef 90       	pop	r14
    2b92:	df 90       	pop	r13
    2b94:	cf 90       	pop	r12
    2b96:	08 95       	ret

00002b98 <xTaskRemoveFromEventList>:
    2b98:	0f 93       	push	r16
    2b9a:	1f 93       	push	r17
    2b9c:	cf 93       	push	r28
    2b9e:	df 93       	push	r29
    2ba0:	dc 01       	movw	r26, r24
    2ba2:	17 96       	adiw	r26, 0x07	; 7
    2ba4:	ed 91       	ld	r30, X+
    2ba6:	fc 91       	ld	r31, X
    2ba8:	18 97       	sbiw	r26, 0x08	; 8
    2baa:	c0 85       	ldd	r28, Z+8	; 0x08
    2bac:	d1 85       	ldd	r29, Z+9	; 0x09
    2bae:	8e 01       	movw	r16, r28
    2bb0:	02 5f       	subi	r16, 0xF2	; 242
    2bb2:	1f 4f       	sbci	r17, 0xFF	; 255
    2bb4:	c8 01       	movw	r24, r16
    2bb6:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <uxListRemove>
    2bba:	80 91 b6 13 	lds	r24, 0x13B6	; 0x8013b6 <uxSchedulerSuspended>
    2bbe:	81 11       	cpse	r24, r1
    2bc0:	16 c0       	rjmp	.+44     	; 0x2bee <xTaskRemoveFromEventList+0x56>
    2bc2:	0c 50       	subi	r16, 0x0C	; 12
    2bc4:	11 09       	sbc	r17, r1
    2bc6:	c8 01       	movw	r24, r16
    2bc8:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <uxListRemove>
    2bcc:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2bce:	90 91 c2 13 	lds	r25, 0x13C2	; 0x8013c2 <uxTopReadyPriority>
    2bd2:	98 17       	cp	r25, r24
    2bd4:	10 f4       	brcc	.+4      	; 0x2bda <xTaskRemoveFromEventList+0x42>
    2bd6:	80 93 c2 13 	sts	0x13C2, r24	; 0x8013c2 <uxTopReadyPriority>
    2bda:	bb e0       	ldi	r27, 0x0B	; 11
    2bdc:	8b 9f       	mul	r24, r27
    2bde:	c0 01       	movw	r24, r0
    2be0:	11 24       	eor	r1, r1
    2be2:	b8 01       	movw	r22, r16
    2be4:	8c 5f       	subi	r24, 0xFC	; 252
    2be6:	9b 4e       	sbci	r25, 0xEB	; 235
    2be8:	0e 94 12 0a 	call	0x1424	; 0x1424 <vListInsertEnd>
    2bec:	05 c0       	rjmp	.+10     	; 0x2bf8 <xTaskRemoveFromEventList+0x60>
    2bee:	b8 01       	movw	r22, r16
    2bf0:	8f ed       	ldi	r24, 0xDF	; 223
    2bf2:	93 e1       	ldi	r25, 0x13	; 19
    2bf4:	0e 94 12 0a 	call	0x1424	; 0x1424 <vListInsertEnd>
    2bf8:	e0 91 30 14 	lds	r30, 0x1430	; 0x801430 <pxCurrentTCB>
    2bfc:	f0 91 31 14 	lds	r31, 0x1431	; 0x801431 <pxCurrentTCB+0x1>
    2c00:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2c02:	82 8d       	ldd	r24, Z+26	; 0x1a
    2c04:	89 17       	cp	r24, r25
    2c06:	20 f4       	brcc	.+8      	; 0x2c10 <xTaskRemoveFromEventList+0x78>
    2c08:	81 e0       	ldi	r24, 0x01	; 1
    2c0a:	80 93 bf 13 	sts	0x13BF, r24	; 0x8013bf <xYieldPending>
    2c0e:	01 c0       	rjmp	.+2      	; 0x2c12 <xTaskRemoveFromEventList+0x7a>
    2c10:	80 e0       	ldi	r24, 0x00	; 0
    2c12:	df 91       	pop	r29
    2c14:	cf 91       	pop	r28
    2c16:	1f 91       	pop	r17
    2c18:	0f 91       	pop	r16
    2c1a:	08 95       	ret

00002c1c <vTaskRemoveFromUnorderedEventList>:
    2c1c:	0f 93       	push	r16
    2c1e:	1f 93       	push	r17
    2c20:	cf 93       	push	r28
    2c22:	df 93       	push	r29
    2c24:	70 68       	ori	r23, 0x80	; 128
    2c26:	fc 01       	movw	r30, r24
    2c28:	40 83       	st	Z, r20
    2c2a:	51 83       	std	Z+1, r21	; 0x01
    2c2c:	62 83       	std	Z+2, r22	; 0x02
    2c2e:	73 83       	std	Z+3, r23	; 0x03
    2c30:	c0 85       	ldd	r28, Z+8	; 0x08
    2c32:	d1 85       	ldd	r29, Z+9	; 0x09
    2c34:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <uxListRemove>
    2c38:	8e 01       	movw	r16, r28
    2c3a:	0e 5f       	subi	r16, 0xFE	; 254
    2c3c:	1f 4f       	sbci	r17, 0xFF	; 255
    2c3e:	c8 01       	movw	r24, r16
    2c40:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <uxListRemove>
    2c44:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2c46:	90 91 c2 13 	lds	r25, 0x13C2	; 0x8013c2 <uxTopReadyPriority>
    2c4a:	98 17       	cp	r25, r24
    2c4c:	10 f4       	brcc	.+4      	; 0x2c52 <vTaskRemoveFromUnorderedEventList+0x36>
    2c4e:	80 93 c2 13 	sts	0x13C2, r24	; 0x8013c2 <uxTopReadyPriority>
    2c52:	fb e0       	ldi	r31, 0x0B	; 11
    2c54:	8f 9f       	mul	r24, r31
    2c56:	c0 01       	movw	r24, r0
    2c58:	11 24       	eor	r1, r1
    2c5a:	b8 01       	movw	r22, r16
    2c5c:	8c 5f       	subi	r24, 0xFC	; 252
    2c5e:	9b 4e       	sbci	r25, 0xEB	; 235
    2c60:	0e 94 12 0a 	call	0x1424	; 0x1424 <vListInsertEnd>
    2c64:	e0 91 30 14 	lds	r30, 0x1430	; 0x801430 <pxCurrentTCB>
    2c68:	f0 91 31 14 	lds	r31, 0x1431	; 0x801431 <pxCurrentTCB+0x1>
    2c6c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2c6e:	82 8d       	ldd	r24, Z+26	; 0x1a
    2c70:	89 17       	cp	r24, r25
    2c72:	18 f4       	brcc	.+6      	; 0x2c7a <vTaskRemoveFromUnorderedEventList+0x5e>
    2c74:	81 e0       	ldi	r24, 0x01	; 1
    2c76:	80 93 bf 13 	sts	0x13BF, r24	; 0x8013bf <xYieldPending>
    2c7a:	df 91       	pop	r29
    2c7c:	cf 91       	pop	r28
    2c7e:	1f 91       	pop	r17
    2c80:	0f 91       	pop	r16
    2c82:	08 95       	ret

00002c84 <vTaskSetTimeOutState>:
    2c84:	0f b6       	in	r0, 0x3f	; 63
    2c86:	f8 94       	cli
    2c88:	0f 92       	push	r0
    2c8a:	20 91 be 13 	lds	r18, 0x13BE	; 0x8013be <xNumOfOverflows>
    2c8e:	fc 01       	movw	r30, r24
    2c90:	20 83       	st	Z, r18
    2c92:	40 91 c3 13 	lds	r20, 0x13C3	; 0x8013c3 <xTickCount>
    2c96:	50 91 c4 13 	lds	r21, 0x13C4	; 0x8013c4 <xTickCount+0x1>
    2c9a:	60 91 c5 13 	lds	r22, 0x13C5	; 0x8013c5 <xTickCount+0x2>
    2c9e:	70 91 c6 13 	lds	r23, 0x13C6	; 0x8013c6 <xTickCount+0x3>
    2ca2:	41 83       	std	Z+1, r20	; 0x01
    2ca4:	52 83       	std	Z+2, r21	; 0x02
    2ca6:	63 83       	std	Z+3, r22	; 0x03
    2ca8:	74 83       	std	Z+4, r23	; 0x04
    2caa:	0f 90       	pop	r0
    2cac:	0f be       	out	0x3f, r0	; 63
    2cae:	08 95       	ret

00002cb0 <vTaskInternalSetTimeOutState>:
    2cb0:	20 91 be 13 	lds	r18, 0x13BE	; 0x8013be <xNumOfOverflows>
    2cb4:	fc 01       	movw	r30, r24
    2cb6:	20 83       	st	Z, r18
    2cb8:	40 91 c3 13 	lds	r20, 0x13C3	; 0x8013c3 <xTickCount>
    2cbc:	50 91 c4 13 	lds	r21, 0x13C4	; 0x8013c4 <xTickCount+0x1>
    2cc0:	60 91 c5 13 	lds	r22, 0x13C5	; 0x8013c5 <xTickCount+0x2>
    2cc4:	70 91 c6 13 	lds	r23, 0x13C6	; 0x8013c6 <xTickCount+0x3>
    2cc8:	41 83       	std	Z+1, r20	; 0x01
    2cca:	52 83       	std	Z+2, r21	; 0x02
    2ccc:	63 83       	std	Z+3, r22	; 0x03
    2cce:	74 83       	std	Z+4, r23	; 0x04
    2cd0:	08 95       	ret

00002cd2 <xTaskCheckForTimeOut>:
    2cd2:	cf 92       	push	r12
    2cd4:	df 92       	push	r13
    2cd6:	ef 92       	push	r14
    2cd8:	ff 92       	push	r15
    2cda:	0f 93       	push	r16
    2cdc:	1f 93       	push	r17
    2cde:	cf 93       	push	r28
    2ce0:	df 93       	push	r29
    2ce2:	fb 01       	movw	r30, r22
    2ce4:	0f b6       	in	r0, 0x3f	; 63
    2ce6:	f8 94       	cli
    2ce8:	0f 92       	push	r0
    2cea:	40 91 c3 13 	lds	r20, 0x13C3	; 0x8013c3 <xTickCount>
    2cee:	50 91 c4 13 	lds	r21, 0x13C4	; 0x8013c4 <xTickCount+0x1>
    2cf2:	60 91 c5 13 	lds	r22, 0x13C5	; 0x8013c5 <xTickCount+0x2>
    2cf6:	70 91 c6 13 	lds	r23, 0x13C6	; 0x8013c6 <xTickCount+0x3>
    2cfa:	00 81       	ld	r16, Z
    2cfc:	11 81       	ldd	r17, Z+1	; 0x01
    2cfe:	22 81       	ldd	r18, Z+2	; 0x02
    2d00:	33 81       	ldd	r19, Z+3	; 0x03
    2d02:	0f 3f       	cpi	r16, 0xFF	; 255
    2d04:	af ef       	ldi	r26, 0xFF	; 255
    2d06:	1a 07       	cpc	r17, r26
    2d08:	2a 07       	cpc	r18, r26
    2d0a:	3a 07       	cpc	r19, r26
    2d0c:	49 f1       	breq	.+82     	; 0x2d60 <xTaskCheckForTimeOut+0x8e>
    2d0e:	ec 01       	movw	r28, r24
    2d10:	c9 80       	ldd	r12, Y+1	; 0x01
    2d12:	da 80       	ldd	r13, Y+2	; 0x02
    2d14:	eb 80       	ldd	r14, Y+3	; 0x03
    2d16:	fc 80       	ldd	r15, Y+4	; 0x04
    2d18:	a0 91 be 13 	lds	r26, 0x13BE	; 0x8013be <xNumOfOverflows>
    2d1c:	b8 81       	ld	r27, Y
    2d1e:	ba 17       	cp	r27, r26
    2d20:	29 f0       	breq	.+10     	; 0x2d2c <xTaskCheckForTimeOut+0x5a>
    2d22:	4c 15       	cp	r20, r12
    2d24:	5d 05       	cpc	r21, r13
    2d26:	6e 05       	cpc	r22, r14
    2d28:	7f 05       	cpc	r23, r15
    2d2a:	e0 f4       	brcc	.+56     	; 0x2d64 <xTaskCheckForTimeOut+0x92>
    2d2c:	4c 19       	sub	r20, r12
    2d2e:	5d 09       	sbc	r21, r13
    2d30:	6e 09       	sbc	r22, r14
    2d32:	7f 09       	sbc	r23, r15
    2d34:	40 17       	cp	r20, r16
    2d36:	51 07       	cpc	r21, r17
    2d38:	62 07       	cpc	r22, r18
    2d3a:	73 07       	cpc	r23, r19
    2d3c:	58 f4       	brcc	.+22     	; 0x2d54 <xTaskCheckForTimeOut+0x82>
    2d3e:	04 1b       	sub	r16, r20
    2d40:	15 0b       	sbc	r17, r21
    2d42:	26 0b       	sbc	r18, r22
    2d44:	37 0b       	sbc	r19, r23
    2d46:	00 83       	st	Z, r16
    2d48:	11 83       	std	Z+1, r17	; 0x01
    2d4a:	22 83       	std	Z+2, r18	; 0x02
    2d4c:	33 83       	std	Z+3, r19	; 0x03
    2d4e:	b0 df       	rcall	.-160    	; 0x2cb0 <vTaskInternalSetTimeOutState>
    2d50:	80 e0       	ldi	r24, 0x00	; 0
    2d52:	09 c0       	rjmp	.+18     	; 0x2d66 <xTaskCheckForTimeOut+0x94>
    2d54:	10 82       	st	Z, r1
    2d56:	11 82       	std	Z+1, r1	; 0x01
    2d58:	12 82       	std	Z+2, r1	; 0x02
    2d5a:	13 82       	std	Z+3, r1	; 0x03
    2d5c:	81 e0       	ldi	r24, 0x01	; 1
    2d5e:	03 c0       	rjmp	.+6      	; 0x2d66 <xTaskCheckForTimeOut+0x94>
    2d60:	80 e0       	ldi	r24, 0x00	; 0
    2d62:	01 c0       	rjmp	.+2      	; 0x2d66 <xTaskCheckForTimeOut+0x94>
    2d64:	81 e0       	ldi	r24, 0x01	; 1
    2d66:	0f 90       	pop	r0
    2d68:	0f be       	out	0x3f, r0	; 63
    2d6a:	df 91       	pop	r29
    2d6c:	cf 91       	pop	r28
    2d6e:	1f 91       	pop	r17
    2d70:	0f 91       	pop	r16
    2d72:	ff 90       	pop	r15
    2d74:	ef 90       	pop	r14
    2d76:	df 90       	pop	r13
    2d78:	cf 90       	pop	r12
    2d7a:	08 95       	ret

00002d7c <vTaskMissedYield>:
    2d7c:	81 e0       	ldi	r24, 0x01	; 1
    2d7e:	80 93 bf 13 	sts	0x13BF, r24	; 0x8013bf <xYieldPending>
    2d82:	08 95       	ret

00002d84 <xTaskGetCurrentTaskHandle>:
    2d84:	80 91 30 14 	lds	r24, 0x1430	; 0x801430 <pxCurrentTCB>
    2d88:	90 91 31 14 	lds	r25, 0x1431	; 0x801431 <pxCurrentTCB+0x1>
    2d8c:	08 95       	ret

00002d8e <xTaskGetSchedulerState>:
    2d8e:	80 91 c1 13 	lds	r24, 0x13C1	; 0x8013c1 <xSchedulerRunning>
    2d92:	88 23       	and	r24, r24
    2d94:	31 f0       	breq	.+12     	; 0x2da2 <xTaskGetSchedulerState+0x14>
    2d96:	80 91 b6 13 	lds	r24, 0x13B6	; 0x8013b6 <uxSchedulerSuspended>
    2d9a:	88 23       	and	r24, r24
    2d9c:	21 f0       	breq	.+8      	; 0x2da6 <xTaskGetSchedulerState+0x18>
    2d9e:	80 e0       	ldi	r24, 0x00	; 0
    2da0:	08 95       	ret
    2da2:	81 e0       	ldi	r24, 0x01	; 1
    2da4:	08 95       	ret
    2da6:	82 e0       	ldi	r24, 0x02	; 2
    2da8:	08 95       	ret

00002daa <xTaskPriorityInherit>:
    2daa:	0f 93       	push	r16
    2dac:	1f 93       	push	r17
    2dae:	cf 93       	push	r28
    2db0:	df 93       	push	r29
    2db2:	fc 01       	movw	r30, r24
    2db4:	89 2b       	or	r24, r25
    2db6:	09 f4       	brne	.+2      	; 0x2dba <xTaskPriorityInherit+0x10>
    2db8:	60 c0       	rjmp	.+192    	; 0x2e7a <xTaskPriorityInherit+0xd0>
    2dba:	82 8d       	ldd	r24, Z+26	; 0x1a
    2dbc:	a0 91 30 14 	lds	r26, 0x1430	; 0x801430 <pxCurrentTCB>
    2dc0:	b0 91 31 14 	lds	r27, 0x1431	; 0x801431 <pxCurrentTCB+0x1>
    2dc4:	5a 96       	adiw	r26, 0x1a	; 26
    2dc6:	9c 91       	ld	r25, X
    2dc8:	89 17       	cp	r24, r25
    2dca:	08 f0       	brcs	.+2      	; 0x2dce <xTaskPriorityInherit+0x24>
    2dcc:	4a c0       	rjmp	.+148    	; 0x2e62 <xTaskPriorityInherit+0xb8>
    2dce:	46 85       	ldd	r20, Z+14	; 0x0e
    2dd0:	57 85       	ldd	r21, Z+15	; 0x0f
    2dd2:	60 89       	ldd	r22, Z+16	; 0x10
    2dd4:	71 89       	ldd	r23, Z+17	; 0x11
    2dd6:	77 23       	and	r23, r23
    2dd8:	94 f0       	brlt	.+36     	; 0x2dfe <xTaskPriorityInherit+0x54>
    2dda:	a0 91 30 14 	lds	r26, 0x1430	; 0x801430 <pxCurrentTCB>
    2dde:	b0 91 31 14 	lds	r27, 0x1431	; 0x801431 <pxCurrentTCB+0x1>
    2de2:	5a 96       	adiw	r26, 0x1a	; 26
    2de4:	9c 91       	ld	r25, X
    2de6:	44 e0       	ldi	r20, 0x04	; 4
    2de8:	50 e0       	ldi	r21, 0x00	; 0
    2dea:	60 e0       	ldi	r22, 0x00	; 0
    2dec:	70 e0       	ldi	r23, 0x00	; 0
    2dee:	49 1b       	sub	r20, r25
    2df0:	51 09       	sbc	r21, r1
    2df2:	61 09       	sbc	r22, r1
    2df4:	71 09       	sbc	r23, r1
    2df6:	46 87       	std	Z+14, r20	; 0x0e
    2df8:	57 87       	std	Z+15, r21	; 0x0f
    2dfa:	60 8b       	std	Z+16, r22	; 0x10
    2dfc:	71 8b       	std	Z+17, r23	; 0x11
    2dfe:	2b e0       	ldi	r18, 0x0B	; 11
    2e00:	82 9f       	mul	r24, r18
    2e02:	c0 01       	movw	r24, r0
    2e04:	11 24       	eor	r1, r1
    2e06:	8c 5f       	subi	r24, 0xFC	; 252
    2e08:	9b 4e       	sbci	r25, 0xEB	; 235
    2e0a:	24 85       	ldd	r18, Z+12	; 0x0c
    2e0c:	35 85       	ldd	r19, Z+13	; 0x0d
    2e0e:	28 17       	cp	r18, r24
    2e10:	39 07       	cpc	r19, r25
    2e12:	f1 f4       	brne	.+60     	; 0x2e50 <xTaskPriorityInherit+0xa6>
    2e14:	8f 01       	movw	r16, r30
    2e16:	ef 01       	movw	r28, r30
    2e18:	22 96       	adiw	r28, 0x02	; 2
    2e1a:	ce 01       	movw	r24, r28
    2e1c:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <uxListRemove>
    2e20:	e0 91 30 14 	lds	r30, 0x1430	; 0x801430 <pxCurrentTCB>
    2e24:	f0 91 31 14 	lds	r31, 0x1431	; 0x801431 <pxCurrentTCB+0x1>
    2e28:	82 8d       	ldd	r24, Z+26	; 0x1a
    2e2a:	f8 01       	movw	r30, r16
    2e2c:	82 8f       	std	Z+26, r24	; 0x1a
    2e2e:	90 91 c2 13 	lds	r25, 0x13C2	; 0x8013c2 <uxTopReadyPriority>
    2e32:	98 17       	cp	r25, r24
    2e34:	10 f4       	brcc	.+4      	; 0x2e3a <xTaskPriorityInherit+0x90>
    2e36:	80 93 c2 13 	sts	0x13C2, r24	; 0x8013c2 <uxTopReadyPriority>
    2e3a:	fb e0       	ldi	r31, 0x0B	; 11
    2e3c:	8f 9f       	mul	r24, r31
    2e3e:	c0 01       	movw	r24, r0
    2e40:	11 24       	eor	r1, r1
    2e42:	be 01       	movw	r22, r28
    2e44:	8c 5f       	subi	r24, 0xFC	; 252
    2e46:	9b 4e       	sbci	r25, 0xEB	; 235
    2e48:	0e 94 12 0a 	call	0x1424	; 0x1424 <vListInsertEnd>
    2e4c:	81 e0       	ldi	r24, 0x01	; 1
    2e4e:	16 c0       	rjmp	.+44     	; 0x2e7c <xTaskPriorityInherit+0xd2>
    2e50:	a0 91 30 14 	lds	r26, 0x1430	; 0x801430 <pxCurrentTCB>
    2e54:	b0 91 31 14 	lds	r27, 0x1431	; 0x801431 <pxCurrentTCB+0x1>
    2e58:	5a 96       	adiw	r26, 0x1a	; 26
    2e5a:	8c 91       	ld	r24, X
    2e5c:	82 8f       	std	Z+26, r24	; 0x1a
    2e5e:	81 e0       	ldi	r24, 0x01	; 1
    2e60:	0d c0       	rjmp	.+26     	; 0x2e7c <xTaskPriorityInherit+0xd2>
    2e62:	a0 91 30 14 	lds	r26, 0x1430	; 0x801430 <pxCurrentTCB>
    2e66:	b0 91 31 14 	lds	r27, 0x1431	; 0x801431 <pxCurrentTCB+0x1>
    2e6a:	81 e0       	ldi	r24, 0x01	; 1
    2e6c:	27 a1       	ldd	r18, Z+39	; 0x27
    2e6e:	5a 96       	adiw	r26, 0x1a	; 26
    2e70:	9c 91       	ld	r25, X
    2e72:	29 17       	cp	r18, r25
    2e74:	18 f0       	brcs	.+6      	; 0x2e7c <xTaskPriorityInherit+0xd2>
    2e76:	80 e0       	ldi	r24, 0x00	; 0
    2e78:	01 c0       	rjmp	.+2      	; 0x2e7c <xTaskPriorityInherit+0xd2>
    2e7a:	80 e0       	ldi	r24, 0x00	; 0
    2e7c:	df 91       	pop	r29
    2e7e:	cf 91       	pop	r28
    2e80:	1f 91       	pop	r17
    2e82:	0f 91       	pop	r16
    2e84:	08 95       	ret

00002e86 <xTaskPriorityDisinherit>:
    2e86:	0f 93       	push	r16
    2e88:	1f 93       	push	r17
    2e8a:	cf 93       	push	r28
    2e8c:	df 93       	push	r29
    2e8e:	fc 01       	movw	r30, r24
    2e90:	89 2b       	or	r24, r25
    2e92:	79 f1       	breq	.+94     	; 0x2ef2 <xTaskPriorityDisinherit+0x6c>
    2e94:	80 a5       	ldd	r24, Z+40	; 0x28
    2e96:	81 50       	subi	r24, 0x01	; 1
    2e98:	80 a7       	std	Z+40, r24	; 0x28
    2e9a:	22 8d       	ldd	r18, Z+26	; 0x1a
    2e9c:	97 a1       	ldd	r25, Z+39	; 0x27
    2e9e:	29 17       	cp	r18, r25
    2ea0:	51 f1       	breq	.+84     	; 0x2ef6 <xTaskPriorityDisinherit+0x70>
    2ea2:	81 11       	cpse	r24, r1
    2ea4:	2a c0       	rjmp	.+84     	; 0x2efa <xTaskPriorityDisinherit+0x74>
    2ea6:	ef 01       	movw	r28, r30
    2ea8:	8f 01       	movw	r16, r30
    2eaa:	0e 5f       	subi	r16, 0xFE	; 254
    2eac:	1f 4f       	sbci	r17, 0xFF	; 255
    2eae:	c8 01       	movw	r24, r16
    2eb0:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <uxListRemove>
    2eb4:	8f a1       	ldd	r24, Y+39	; 0x27
    2eb6:	8a 8f       	std	Y+26, r24	; 0x1a
    2eb8:	44 e0       	ldi	r20, 0x04	; 4
    2eba:	50 e0       	ldi	r21, 0x00	; 0
    2ebc:	60 e0       	ldi	r22, 0x00	; 0
    2ebe:	70 e0       	ldi	r23, 0x00	; 0
    2ec0:	48 1b       	sub	r20, r24
    2ec2:	51 09       	sbc	r21, r1
    2ec4:	61 09       	sbc	r22, r1
    2ec6:	71 09       	sbc	r23, r1
    2ec8:	4e 87       	std	Y+14, r20	; 0x0e
    2eca:	5f 87       	std	Y+15, r21	; 0x0f
    2ecc:	68 8b       	std	Y+16, r22	; 0x10
    2ece:	79 8b       	std	Y+17, r23	; 0x11
    2ed0:	90 91 c2 13 	lds	r25, 0x13C2	; 0x8013c2 <uxTopReadyPriority>
    2ed4:	98 17       	cp	r25, r24
    2ed6:	10 f4       	brcc	.+4      	; 0x2edc <xTaskPriorityDisinherit+0x56>
    2ed8:	80 93 c2 13 	sts	0x13C2, r24	; 0x8013c2 <uxTopReadyPriority>
    2edc:	2b e0       	ldi	r18, 0x0B	; 11
    2ede:	82 9f       	mul	r24, r18
    2ee0:	c0 01       	movw	r24, r0
    2ee2:	11 24       	eor	r1, r1
    2ee4:	b8 01       	movw	r22, r16
    2ee6:	8c 5f       	subi	r24, 0xFC	; 252
    2ee8:	9b 4e       	sbci	r25, 0xEB	; 235
    2eea:	0e 94 12 0a 	call	0x1424	; 0x1424 <vListInsertEnd>
    2eee:	81 e0       	ldi	r24, 0x01	; 1
    2ef0:	05 c0       	rjmp	.+10     	; 0x2efc <xTaskPriorityDisinherit+0x76>
    2ef2:	80 e0       	ldi	r24, 0x00	; 0
    2ef4:	03 c0       	rjmp	.+6      	; 0x2efc <xTaskPriorityDisinherit+0x76>
    2ef6:	80 e0       	ldi	r24, 0x00	; 0
    2ef8:	01 c0       	rjmp	.+2      	; 0x2efc <xTaskPriorityDisinherit+0x76>
    2efa:	80 e0       	ldi	r24, 0x00	; 0
    2efc:	df 91       	pop	r29
    2efe:	cf 91       	pop	r28
    2f00:	1f 91       	pop	r17
    2f02:	0f 91       	pop	r16
    2f04:	08 95       	ret

00002f06 <vTaskPriorityDisinheritAfterTimeout>:
    2f06:	0f 93       	push	r16
    2f08:	1f 93       	push	r17
    2f0a:	cf 93       	push	r28
    2f0c:	df 93       	push	r29
    2f0e:	fc 01       	movw	r30, r24
    2f10:	89 2b       	or	r24, r25
    2f12:	09 f4       	brne	.+2      	; 0x2f16 <vTaskPriorityDisinheritAfterTimeout+0x10>
    2f14:	3f c0       	rjmp	.+126    	; 0x2f94 <vTaskPriorityDisinheritAfterTimeout+0x8e>
    2f16:	87 a1       	ldd	r24, Z+39	; 0x27
    2f18:	86 17       	cp	r24, r22
    2f1a:	08 f4       	brcc	.+2      	; 0x2f1e <vTaskPriorityDisinheritAfterTimeout+0x18>
    2f1c:	86 2f       	mov	r24, r22
    2f1e:	92 8d       	ldd	r25, Z+26	; 0x1a
    2f20:	98 17       	cp	r25, r24
    2f22:	c1 f1       	breq	.+112    	; 0x2f94 <vTaskPriorityDisinheritAfterTimeout+0x8e>
    2f24:	20 a5       	ldd	r18, Z+40	; 0x28
    2f26:	21 30       	cpi	r18, 0x01	; 1
    2f28:	a9 f5       	brne	.+106    	; 0x2f94 <vTaskPriorityDisinheritAfterTimeout+0x8e>
    2f2a:	82 8f       	std	Z+26, r24	; 0x1a
    2f2c:	46 85       	ldd	r20, Z+14	; 0x0e
    2f2e:	57 85       	ldd	r21, Z+15	; 0x0f
    2f30:	60 89       	ldd	r22, Z+16	; 0x10
    2f32:	71 89       	ldd	r23, Z+17	; 0x11
    2f34:	77 23       	and	r23, r23
    2f36:	64 f0       	brlt	.+24     	; 0x2f50 <vTaskPriorityDisinheritAfterTimeout+0x4a>
    2f38:	44 e0       	ldi	r20, 0x04	; 4
    2f3a:	50 e0       	ldi	r21, 0x00	; 0
    2f3c:	60 e0       	ldi	r22, 0x00	; 0
    2f3e:	70 e0       	ldi	r23, 0x00	; 0
    2f40:	48 1b       	sub	r20, r24
    2f42:	51 09       	sbc	r21, r1
    2f44:	61 09       	sbc	r22, r1
    2f46:	71 09       	sbc	r23, r1
    2f48:	46 87       	std	Z+14, r20	; 0x0e
    2f4a:	57 87       	std	Z+15, r21	; 0x0f
    2f4c:	60 8b       	std	Z+16, r22	; 0x10
    2f4e:	71 8b       	std	Z+17, r23	; 0x11
    2f50:	2b e0       	ldi	r18, 0x0B	; 11
    2f52:	92 9f       	mul	r25, r18
    2f54:	c0 01       	movw	r24, r0
    2f56:	11 24       	eor	r1, r1
    2f58:	8c 5f       	subi	r24, 0xFC	; 252
    2f5a:	9b 4e       	sbci	r25, 0xEB	; 235
    2f5c:	24 85       	ldd	r18, Z+12	; 0x0c
    2f5e:	35 85       	ldd	r19, Z+13	; 0x0d
    2f60:	28 17       	cp	r18, r24
    2f62:	39 07       	cpc	r19, r25
    2f64:	b9 f4       	brne	.+46     	; 0x2f94 <vTaskPriorityDisinheritAfterTimeout+0x8e>
    2f66:	ef 01       	movw	r28, r30
    2f68:	8f 01       	movw	r16, r30
    2f6a:	0e 5f       	subi	r16, 0xFE	; 254
    2f6c:	1f 4f       	sbci	r17, 0xFF	; 255
    2f6e:	c8 01       	movw	r24, r16
    2f70:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <uxListRemove>
    2f74:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2f76:	90 91 c2 13 	lds	r25, 0x13C2	; 0x8013c2 <uxTopReadyPriority>
    2f7a:	98 17       	cp	r25, r24
    2f7c:	10 f4       	brcc	.+4      	; 0x2f82 <vTaskPriorityDisinheritAfterTimeout+0x7c>
    2f7e:	80 93 c2 13 	sts	0x13C2, r24	; 0x8013c2 <uxTopReadyPriority>
    2f82:	2b e0       	ldi	r18, 0x0B	; 11
    2f84:	82 9f       	mul	r24, r18
    2f86:	c0 01       	movw	r24, r0
    2f88:	11 24       	eor	r1, r1
    2f8a:	b8 01       	movw	r22, r16
    2f8c:	8c 5f       	subi	r24, 0xFC	; 252
    2f8e:	9b 4e       	sbci	r25, 0xEB	; 235
    2f90:	0e 94 12 0a 	call	0x1424	; 0x1424 <vListInsertEnd>
    2f94:	df 91       	pop	r29
    2f96:	cf 91       	pop	r28
    2f98:	1f 91       	pop	r17
    2f9a:	0f 91       	pop	r16
    2f9c:	08 95       	ret

00002f9e <uxTaskResetEventItemValue>:
    2f9e:	cf 92       	push	r12
    2fa0:	df 92       	push	r13
    2fa2:	ef 92       	push	r14
    2fa4:	ff 92       	push	r15
    2fa6:	e0 91 30 14 	lds	r30, 0x1430	; 0x801430 <pxCurrentTCB>
    2faa:	f0 91 31 14 	lds	r31, 0x1431	; 0x801431 <pxCurrentTCB+0x1>
    2fae:	66 85       	ldd	r22, Z+14	; 0x0e
    2fb0:	77 85       	ldd	r23, Z+15	; 0x0f
    2fb2:	80 89       	ldd	r24, Z+16	; 0x10
    2fb4:	91 89       	ldd	r25, Z+17	; 0x11
    2fb6:	e0 91 30 14 	lds	r30, 0x1430	; 0x801430 <pxCurrentTCB>
    2fba:	f0 91 31 14 	lds	r31, 0x1431	; 0x801431 <pxCurrentTCB+0x1>
    2fbe:	a0 91 30 14 	lds	r26, 0x1430	; 0x801430 <pxCurrentTCB>
    2fc2:	b0 91 31 14 	lds	r27, 0x1431	; 0x801431 <pxCurrentTCB+0x1>
    2fc6:	5a 96       	adiw	r26, 0x1a	; 26
    2fc8:	2c 91       	ld	r18, X
    2fca:	c1 2c       	mov	r12, r1
    2fcc:	d1 2c       	mov	r13, r1
    2fce:	76 01       	movw	r14, r12
    2fd0:	68 94       	set
    2fd2:	c2 f8       	bld	r12, 2
    2fd4:	c2 1a       	sub	r12, r18
    2fd6:	d1 08       	sbc	r13, r1
    2fd8:	e1 08       	sbc	r14, r1
    2fda:	f1 08       	sbc	r15, r1
    2fdc:	c6 86       	std	Z+14, r12	; 0x0e
    2fde:	d7 86       	std	Z+15, r13	; 0x0f
    2fe0:	e0 8a       	std	Z+16, r14	; 0x10
    2fe2:	f1 8a       	std	Z+17, r15	; 0x11
    2fe4:	ff 90       	pop	r15
    2fe6:	ef 90       	pop	r14
    2fe8:	df 90       	pop	r13
    2fea:	cf 90       	pop	r12
    2fec:	08 95       	ret

00002fee <pvTaskIncrementMutexHeldCount>:
    2fee:	80 91 30 14 	lds	r24, 0x1430	; 0x801430 <pxCurrentTCB>
    2ff2:	90 91 31 14 	lds	r25, 0x1431	; 0x801431 <pxCurrentTCB+0x1>
    2ff6:	89 2b       	or	r24, r25
    2ff8:	39 f0       	breq	.+14     	; 0x3008 <pvTaskIncrementMutexHeldCount+0x1a>
    2ffa:	e0 91 30 14 	lds	r30, 0x1430	; 0x801430 <pxCurrentTCB>
    2ffe:	f0 91 31 14 	lds	r31, 0x1431	; 0x801431 <pxCurrentTCB+0x1>
    3002:	80 a5       	ldd	r24, Z+40	; 0x28
    3004:	8f 5f       	subi	r24, 0xFF	; 255
    3006:	80 a7       	std	Z+40, r24	; 0x28
    3008:	80 91 30 14 	lds	r24, 0x1430	; 0x801430 <pxCurrentTCB>
    300c:	90 91 31 14 	lds	r25, 0x1431	; 0x801431 <pxCurrentTCB+0x1>
    3010:	08 95       	ret

00003012 <xTaskNotifyWait>:
    3012:	4f 92       	push	r4
    3014:	5f 92       	push	r5
    3016:	6f 92       	push	r6
    3018:	7f 92       	push	r7
    301a:	8f 92       	push	r8
    301c:	9f 92       	push	r9
    301e:	af 92       	push	r10
    3020:	bf 92       	push	r11
    3022:	cf 92       	push	r12
    3024:	df 92       	push	r13
    3026:	ef 92       	push	r14
    3028:	ff 92       	push	r15
    302a:	0f 93       	push	r16
    302c:	1f 93       	push	r17
    302e:	49 01       	movw	r8, r18
    3030:	5a 01       	movw	r10, r20
    3032:	0f b6       	in	r0, 0x3f	; 63
    3034:	f8 94       	cli
    3036:	0f 92       	push	r0
    3038:	e0 91 30 14 	lds	r30, 0x1430	; 0x801430 <pxCurrentTCB>
    303c:	f0 91 31 14 	lds	r31, 0x1431	; 0x801431 <pxCurrentTCB+0x1>
    3040:	27 a5       	ldd	r18, Z+47	; 0x2f
    3042:	22 30       	cpi	r18, 0x02	; 2
    3044:	39 f1       	breq	.+78     	; 0x3094 <xTaskNotifyWait+0x82>
    3046:	e0 91 30 14 	lds	r30, 0x1430	; 0x801430 <pxCurrentTCB>
    304a:	f0 91 31 14 	lds	r31, 0x1431	; 0x801431 <pxCurrentTCB+0x1>
    304e:	43 a4       	ldd	r4, Z+43	; 0x2b
    3050:	54 a4       	ldd	r5, Z+44	; 0x2c
    3052:	65 a4       	ldd	r6, Z+45	; 0x2d
    3054:	76 a4       	ldd	r7, Z+46	; 0x2e
    3056:	dc 01       	movw	r26, r24
    3058:	cb 01       	movw	r24, r22
    305a:	80 95       	com	r24
    305c:	90 95       	com	r25
    305e:	a0 95       	com	r26
    3060:	b0 95       	com	r27
    3062:	84 21       	and	r24, r4
    3064:	95 21       	and	r25, r5
    3066:	a6 21       	and	r26, r6
    3068:	b7 21       	and	r27, r7
    306a:	83 a7       	std	Z+43, r24	; 0x2b
    306c:	94 a7       	std	Z+44, r25	; 0x2c
    306e:	a5 a7       	std	Z+45, r26	; 0x2d
    3070:	b6 a7       	std	Z+46, r27	; 0x2e
    3072:	e0 91 30 14 	lds	r30, 0x1430	; 0x801430 <pxCurrentTCB>
    3076:	f0 91 31 14 	lds	r31, 0x1431	; 0x801431 <pxCurrentTCB+0x1>
    307a:	81 e0       	ldi	r24, 0x01	; 1
    307c:	87 a7       	std	Z+47, r24	; 0x2f
    307e:	c1 14       	cp	r12, r1
    3080:	d1 04       	cpc	r13, r1
    3082:	e1 04       	cpc	r14, r1
    3084:	f1 04       	cpc	r15, r1
    3086:	31 f0       	breq	.+12     	; 0x3094 <xTaskNotifyWait+0x82>
    3088:	41 e0       	ldi	r20, 0x01	; 1
    308a:	c7 01       	movw	r24, r14
    308c:	b6 01       	movw	r22, r12
    308e:	5f d9       	rcall	.-3394   	; 0x234e <prvAddCurrentTaskToDelayedList>
    3090:	0e 94 45 0b 	call	0x168a	; 0x168a <vPortYield>
    3094:	0f 90       	pop	r0
    3096:	0f be       	out	0x3f, r0	; 63
    3098:	0f b6       	in	r0, 0x3f	; 63
    309a:	f8 94       	cli
    309c:	0f 92       	push	r0
    309e:	01 15       	cp	r16, r1
    30a0:	11 05       	cpc	r17, r1
    30a2:	69 f0       	breq	.+26     	; 0x30be <xTaskNotifyWait+0xac>
    30a4:	e0 91 30 14 	lds	r30, 0x1430	; 0x801430 <pxCurrentTCB>
    30a8:	f0 91 31 14 	lds	r31, 0x1431	; 0x801431 <pxCurrentTCB+0x1>
    30ac:	83 a5       	ldd	r24, Z+43	; 0x2b
    30ae:	94 a5       	ldd	r25, Z+44	; 0x2c
    30b0:	a5 a5       	ldd	r26, Z+45	; 0x2d
    30b2:	b6 a5       	ldd	r27, Z+46	; 0x2e
    30b4:	f8 01       	movw	r30, r16
    30b6:	80 83       	st	Z, r24
    30b8:	91 83       	std	Z+1, r25	; 0x01
    30ba:	a2 83       	std	Z+2, r26	; 0x02
    30bc:	b3 83       	std	Z+3, r27	; 0x03
    30be:	e0 91 30 14 	lds	r30, 0x1430	; 0x801430 <pxCurrentTCB>
    30c2:	f0 91 31 14 	lds	r31, 0x1431	; 0x801431 <pxCurrentTCB+0x1>
    30c6:	87 a5       	ldd	r24, Z+47	; 0x2f
    30c8:	82 30       	cpi	r24, 0x02	; 2
    30ca:	b1 f4       	brne	.+44     	; 0x30f8 <xTaskNotifyWait+0xe6>
    30cc:	e0 91 30 14 	lds	r30, 0x1430	; 0x801430 <pxCurrentTCB>
    30d0:	f0 91 31 14 	lds	r31, 0x1431	; 0x801431 <pxCurrentTCB+0x1>
    30d4:	83 a5       	ldd	r24, Z+43	; 0x2b
    30d6:	94 a5       	ldd	r25, Z+44	; 0x2c
    30d8:	a5 a5       	ldd	r26, Z+45	; 0x2d
    30da:	b6 a5       	ldd	r27, Z+46	; 0x2e
    30dc:	80 94       	com	r8
    30de:	90 94       	com	r9
    30e0:	a0 94       	com	r10
    30e2:	b0 94       	com	r11
    30e4:	88 22       	and	r8, r24
    30e6:	99 22       	and	r9, r25
    30e8:	aa 22       	and	r10, r26
    30ea:	bb 22       	and	r11, r27
    30ec:	83 a6       	std	Z+43, r8	; 0x2b
    30ee:	94 a6       	std	Z+44, r9	; 0x2c
    30f0:	a5 a6       	std	Z+45, r10	; 0x2d
    30f2:	b6 a6       	std	Z+46, r11	; 0x2e
    30f4:	81 e0       	ldi	r24, 0x01	; 1
    30f6:	01 c0       	rjmp	.+2      	; 0x30fa <xTaskNotifyWait+0xe8>
    30f8:	80 e0       	ldi	r24, 0x00	; 0
    30fa:	e0 91 30 14 	lds	r30, 0x1430	; 0x801430 <pxCurrentTCB>
    30fe:	f0 91 31 14 	lds	r31, 0x1431	; 0x801431 <pxCurrentTCB+0x1>
    3102:	17 a6       	std	Z+47, r1	; 0x2f
    3104:	0f 90       	pop	r0
    3106:	0f be       	out	0x3f, r0	; 63
    3108:	1f 91       	pop	r17
    310a:	0f 91       	pop	r16
    310c:	ff 90       	pop	r15
    310e:	ef 90       	pop	r14
    3110:	df 90       	pop	r13
    3112:	cf 90       	pop	r12
    3114:	bf 90       	pop	r11
    3116:	af 90       	pop	r10
    3118:	9f 90       	pop	r9
    311a:	8f 90       	pop	r8
    311c:	7f 90       	pop	r7
    311e:	6f 90       	pop	r6
    3120:	5f 90       	pop	r5
    3122:	4f 90       	pop	r4
    3124:	08 95       	ret

00003126 <xTaskGenericNotify>:
    3126:	0f 93       	push	r16
    3128:	1f 93       	push	r17
    312a:	cf 93       	push	r28
    312c:	df 93       	push	r29
    312e:	fc 01       	movw	r30, r24
    3130:	0f b6       	in	r0, 0x3f	; 63
    3132:	f8 94       	cli
    3134:	0f 92       	push	r0
    3136:	01 15       	cp	r16, r1
    3138:	11 05       	cpc	r17, r1
    313a:	49 f0       	breq	.+18     	; 0x314e <xTaskGenericNotify+0x28>
    313c:	83 a5       	ldd	r24, Z+43	; 0x2b
    313e:	94 a5       	ldd	r25, Z+44	; 0x2c
    3140:	a5 a5       	ldd	r26, Z+45	; 0x2d
    3142:	b6 a5       	ldd	r27, Z+46	; 0x2e
    3144:	e8 01       	movw	r28, r16
    3146:	88 83       	st	Y, r24
    3148:	99 83       	std	Y+1, r25	; 0x01
    314a:	aa 83       	std	Y+2, r26	; 0x02
    314c:	bb 83       	std	Y+3, r27	; 0x03
    314e:	87 a5       	ldd	r24, Z+47	; 0x2f
    3150:	92 e0       	ldi	r25, 0x02	; 2
    3152:	97 a7       	std	Z+47, r25	; 0x2f
    3154:	22 30       	cpi	r18, 0x02	; 2
    3156:	b1 f0       	breq	.+44     	; 0x3184 <xTaskGenericNotify+0x5e>
    3158:	18 f4       	brcc	.+6      	; 0x3160 <xTaskGenericNotify+0x3a>
    315a:	21 30       	cpi	r18, 0x01	; 1
    315c:	31 f0       	breq	.+12     	; 0x316a <xTaskGenericNotify+0x44>
    315e:	2a c0       	rjmp	.+84     	; 0x31b4 <xTaskGenericNotify+0x8e>
    3160:	23 30       	cpi	r18, 0x03	; 3
    3162:	e9 f0       	breq	.+58     	; 0x319e <xTaskGenericNotify+0x78>
    3164:	24 30       	cpi	r18, 0x04	; 4
    3166:	01 f1       	breq	.+64     	; 0x31a8 <xTaskGenericNotify+0x82>
    3168:	25 c0       	rjmp	.+74     	; 0x31b4 <xTaskGenericNotify+0x8e>
    316a:	03 a5       	ldd	r16, Z+43	; 0x2b
    316c:	14 a5       	ldd	r17, Z+44	; 0x2c
    316e:	25 a5       	ldd	r18, Z+45	; 0x2d
    3170:	36 a5       	ldd	r19, Z+46	; 0x2e
    3172:	40 2b       	or	r20, r16
    3174:	51 2b       	or	r21, r17
    3176:	62 2b       	or	r22, r18
    3178:	73 2b       	or	r23, r19
    317a:	43 a7       	std	Z+43, r20	; 0x2b
    317c:	54 a7       	std	Z+44, r21	; 0x2c
    317e:	65 a7       	std	Z+45, r22	; 0x2d
    3180:	76 a7       	std	Z+46, r23	; 0x2e
    3182:	18 c0       	rjmp	.+48     	; 0x31b4 <xTaskGenericNotify+0x8e>
    3184:	43 a5       	ldd	r20, Z+43	; 0x2b
    3186:	54 a5       	ldd	r21, Z+44	; 0x2c
    3188:	65 a5       	ldd	r22, Z+45	; 0x2d
    318a:	76 a5       	ldd	r23, Z+46	; 0x2e
    318c:	4f 5f       	subi	r20, 0xFF	; 255
    318e:	5f 4f       	sbci	r21, 0xFF	; 255
    3190:	6f 4f       	sbci	r22, 0xFF	; 255
    3192:	7f 4f       	sbci	r23, 0xFF	; 255
    3194:	43 a7       	std	Z+43, r20	; 0x2b
    3196:	54 a7       	std	Z+44, r21	; 0x2c
    3198:	65 a7       	std	Z+45, r22	; 0x2d
    319a:	76 a7       	std	Z+46, r23	; 0x2e
    319c:	0b c0       	rjmp	.+22     	; 0x31b4 <xTaskGenericNotify+0x8e>
    319e:	43 a7       	std	Z+43, r20	; 0x2b
    31a0:	54 a7       	std	Z+44, r21	; 0x2c
    31a2:	65 a7       	std	Z+45, r22	; 0x2d
    31a4:	76 a7       	std	Z+46, r23	; 0x2e
    31a6:	06 c0       	rjmp	.+12     	; 0x31b4 <xTaskGenericNotify+0x8e>
    31a8:	82 30       	cpi	r24, 0x02	; 2
    31aa:	49 f1       	breq	.+82     	; 0x31fe <xTaskGenericNotify+0xd8>
    31ac:	43 a7       	std	Z+43, r20	; 0x2b
    31ae:	54 a7       	std	Z+44, r21	; 0x2c
    31b0:	65 a7       	std	Z+45, r22	; 0x2d
    31b2:	76 a7       	std	Z+46, r23	; 0x2e
    31b4:	81 30       	cpi	r24, 0x01	; 1
    31b6:	29 f5       	brne	.+74     	; 0x3202 <xTaskGenericNotify+0xdc>
    31b8:	ef 01       	movw	r28, r30
    31ba:	8f 01       	movw	r16, r30
    31bc:	0e 5f       	subi	r16, 0xFE	; 254
    31be:	1f 4f       	sbci	r17, 0xFF	; 255
    31c0:	c8 01       	movw	r24, r16
    31c2:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <uxListRemove>
    31c6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    31c8:	90 91 c2 13 	lds	r25, 0x13C2	; 0x8013c2 <uxTopReadyPriority>
    31cc:	98 17       	cp	r25, r24
    31ce:	10 f4       	brcc	.+4      	; 0x31d4 <xTaskGenericNotify+0xae>
    31d0:	80 93 c2 13 	sts	0x13C2, r24	; 0x8013c2 <uxTopReadyPriority>
    31d4:	2b e0       	ldi	r18, 0x0B	; 11
    31d6:	82 9f       	mul	r24, r18
    31d8:	c0 01       	movw	r24, r0
    31da:	11 24       	eor	r1, r1
    31dc:	b8 01       	movw	r22, r16
    31de:	8c 5f       	subi	r24, 0xFC	; 252
    31e0:	9b 4e       	sbci	r25, 0xEB	; 235
    31e2:	0e 94 12 0a 	call	0x1424	; 0x1424 <vListInsertEnd>
    31e6:	e0 91 30 14 	lds	r30, 0x1430	; 0x801430 <pxCurrentTCB>
    31ea:	f0 91 31 14 	lds	r31, 0x1431	; 0x801431 <pxCurrentTCB+0x1>
    31ee:	9a 8d       	ldd	r25, Y+26	; 0x1a
    31f0:	82 8d       	ldd	r24, Z+26	; 0x1a
    31f2:	89 17       	cp	r24, r25
    31f4:	40 f4       	brcc	.+16     	; 0x3206 <xTaskGenericNotify+0xe0>
    31f6:	0e 94 45 0b 	call	0x168a	; 0x168a <vPortYield>
    31fa:	81 e0       	ldi	r24, 0x01	; 1
    31fc:	05 c0       	rjmp	.+10     	; 0x3208 <xTaskGenericNotify+0xe2>
    31fe:	80 e0       	ldi	r24, 0x00	; 0
    3200:	03 c0       	rjmp	.+6      	; 0x3208 <xTaskGenericNotify+0xe2>
    3202:	81 e0       	ldi	r24, 0x01	; 1
    3204:	01 c0       	rjmp	.+2      	; 0x3208 <xTaskGenericNotify+0xe2>
    3206:	81 e0       	ldi	r24, 0x01	; 1
    3208:	0f 90       	pop	r0
    320a:	0f be       	out	0x3f, r0	; 63
    320c:	df 91       	pop	r29
    320e:	cf 91       	pop	r28
    3210:	1f 91       	pop	r17
    3212:	0f 91       	pop	r16
    3214:	08 95       	ret

00003216 <xTaskGenericNotifyFromISR>:
    3216:	ef 92       	push	r14
    3218:	ff 92       	push	r15
    321a:	0f 93       	push	r16
    321c:	1f 93       	push	r17
    321e:	cf 93       	push	r28
    3220:	df 93       	push	r29
    3222:	fc 01       	movw	r30, r24
    3224:	01 15       	cp	r16, r1
    3226:	11 05       	cpc	r17, r1
    3228:	49 f0       	breq	.+18     	; 0x323c <xTaskGenericNotifyFromISR+0x26>
    322a:	83 a5       	ldd	r24, Z+43	; 0x2b
    322c:	94 a5       	ldd	r25, Z+44	; 0x2c
    322e:	a5 a5       	ldd	r26, Z+45	; 0x2d
    3230:	b6 a5       	ldd	r27, Z+46	; 0x2e
    3232:	e8 01       	movw	r28, r16
    3234:	88 83       	st	Y, r24
    3236:	99 83       	std	Y+1, r25	; 0x01
    3238:	aa 83       	std	Y+2, r26	; 0x02
    323a:	bb 83       	std	Y+3, r27	; 0x03
    323c:	87 a5       	ldd	r24, Z+47	; 0x2f
    323e:	92 e0       	ldi	r25, 0x02	; 2
    3240:	97 a7       	std	Z+47, r25	; 0x2f
    3242:	22 30       	cpi	r18, 0x02	; 2
    3244:	b1 f0       	breq	.+44     	; 0x3272 <xTaskGenericNotifyFromISR+0x5c>
    3246:	18 f4       	brcc	.+6      	; 0x324e <xTaskGenericNotifyFromISR+0x38>
    3248:	21 30       	cpi	r18, 0x01	; 1
    324a:	31 f0       	breq	.+12     	; 0x3258 <xTaskGenericNotifyFromISR+0x42>
    324c:	2a c0       	rjmp	.+84     	; 0x32a2 <xTaskGenericNotifyFromISR+0x8c>
    324e:	23 30       	cpi	r18, 0x03	; 3
    3250:	e9 f0       	breq	.+58     	; 0x328c <xTaskGenericNotifyFromISR+0x76>
    3252:	24 30       	cpi	r18, 0x04	; 4
    3254:	01 f1       	breq	.+64     	; 0x3296 <xTaskGenericNotifyFromISR+0x80>
    3256:	25 c0       	rjmp	.+74     	; 0x32a2 <xTaskGenericNotifyFromISR+0x8c>
    3258:	03 a5       	ldd	r16, Z+43	; 0x2b
    325a:	14 a5       	ldd	r17, Z+44	; 0x2c
    325c:	25 a5       	ldd	r18, Z+45	; 0x2d
    325e:	36 a5       	ldd	r19, Z+46	; 0x2e
    3260:	40 2b       	or	r20, r16
    3262:	51 2b       	or	r21, r17
    3264:	62 2b       	or	r22, r18
    3266:	73 2b       	or	r23, r19
    3268:	43 a7       	std	Z+43, r20	; 0x2b
    326a:	54 a7       	std	Z+44, r21	; 0x2c
    326c:	65 a7       	std	Z+45, r22	; 0x2d
    326e:	76 a7       	std	Z+46, r23	; 0x2e
    3270:	18 c0       	rjmp	.+48     	; 0x32a2 <xTaskGenericNotifyFromISR+0x8c>
    3272:	43 a5       	ldd	r20, Z+43	; 0x2b
    3274:	54 a5       	ldd	r21, Z+44	; 0x2c
    3276:	65 a5       	ldd	r22, Z+45	; 0x2d
    3278:	76 a5       	ldd	r23, Z+46	; 0x2e
    327a:	4f 5f       	subi	r20, 0xFF	; 255
    327c:	5f 4f       	sbci	r21, 0xFF	; 255
    327e:	6f 4f       	sbci	r22, 0xFF	; 255
    3280:	7f 4f       	sbci	r23, 0xFF	; 255
    3282:	43 a7       	std	Z+43, r20	; 0x2b
    3284:	54 a7       	std	Z+44, r21	; 0x2c
    3286:	65 a7       	std	Z+45, r22	; 0x2d
    3288:	76 a7       	std	Z+46, r23	; 0x2e
    328a:	0b c0       	rjmp	.+22     	; 0x32a2 <xTaskGenericNotifyFromISR+0x8c>
    328c:	43 a7       	std	Z+43, r20	; 0x2b
    328e:	54 a7       	std	Z+44, r21	; 0x2c
    3290:	65 a7       	std	Z+45, r22	; 0x2d
    3292:	76 a7       	std	Z+46, r23	; 0x2e
    3294:	06 c0       	rjmp	.+12     	; 0x32a2 <xTaskGenericNotifyFromISR+0x8c>
    3296:	82 30       	cpi	r24, 0x02	; 2
    3298:	d9 f1       	breq	.+118    	; 0x3310 <xTaskGenericNotifyFromISR+0xfa>
    329a:	43 a7       	std	Z+43, r20	; 0x2b
    329c:	54 a7       	std	Z+44, r21	; 0x2c
    329e:	65 a7       	std	Z+45, r22	; 0x2d
    32a0:	76 a7       	std	Z+46, r23	; 0x2e
    32a2:	81 30       	cpi	r24, 0x01	; 1
    32a4:	b9 f5       	brne	.+110    	; 0x3314 <xTaskGenericNotifyFromISR+0xfe>
    32a6:	ef 01       	movw	r28, r30
    32a8:	80 91 b6 13 	lds	r24, 0x13B6	; 0x8013b6 <uxSchedulerSuspended>
    32ac:	81 11       	cpse	r24, r1
    32ae:	17 c0       	rjmp	.+46     	; 0x32de <xTaskGenericNotifyFromISR+0xc8>
    32b0:	8f 01       	movw	r16, r30
    32b2:	0e 5f       	subi	r16, 0xFE	; 254
    32b4:	1f 4f       	sbci	r17, 0xFF	; 255
    32b6:	c8 01       	movw	r24, r16
    32b8:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <uxListRemove>
    32bc:	8a 8d       	ldd	r24, Y+26	; 0x1a
    32be:	90 91 c2 13 	lds	r25, 0x13C2	; 0x8013c2 <uxTopReadyPriority>
    32c2:	98 17       	cp	r25, r24
    32c4:	10 f4       	brcc	.+4      	; 0x32ca <xTaskGenericNotifyFromISR+0xb4>
    32c6:	80 93 c2 13 	sts	0x13C2, r24	; 0x8013c2 <uxTopReadyPriority>
    32ca:	eb e0       	ldi	r30, 0x0B	; 11
    32cc:	8e 9f       	mul	r24, r30
    32ce:	c0 01       	movw	r24, r0
    32d0:	11 24       	eor	r1, r1
    32d2:	b8 01       	movw	r22, r16
    32d4:	8c 5f       	subi	r24, 0xFC	; 252
    32d6:	9b 4e       	sbci	r25, 0xEB	; 235
    32d8:	0e 94 12 0a 	call	0x1424	; 0x1424 <vListInsertEnd>
    32dc:	07 c0       	rjmp	.+14     	; 0x32ec <xTaskGenericNotifyFromISR+0xd6>
    32de:	bf 01       	movw	r22, r30
    32e0:	62 5f       	subi	r22, 0xF2	; 242
    32e2:	7f 4f       	sbci	r23, 0xFF	; 255
    32e4:	8f ed       	ldi	r24, 0xDF	; 223
    32e6:	93 e1       	ldi	r25, 0x13	; 19
    32e8:	0e 94 12 0a 	call	0x1424	; 0x1424 <vListInsertEnd>
    32ec:	e0 91 30 14 	lds	r30, 0x1430	; 0x801430 <pxCurrentTCB>
    32f0:	f0 91 31 14 	lds	r31, 0x1431	; 0x801431 <pxCurrentTCB+0x1>
    32f4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    32f6:	82 8d       	ldd	r24, Z+26	; 0x1a
    32f8:	89 17       	cp	r24, r25
    32fa:	70 f4       	brcc	.+28     	; 0x3318 <xTaskGenericNotifyFromISR+0x102>
    32fc:	e1 14       	cp	r14, r1
    32fe:	f1 04       	cpc	r15, r1
    3300:	19 f0       	breq	.+6      	; 0x3308 <xTaskGenericNotifyFromISR+0xf2>
    3302:	81 e0       	ldi	r24, 0x01	; 1
    3304:	e7 01       	movw	r28, r14
    3306:	88 83       	st	Y, r24
    3308:	81 e0       	ldi	r24, 0x01	; 1
    330a:	80 93 bf 13 	sts	0x13BF, r24	; 0x8013bf <xYieldPending>
    330e:	05 c0       	rjmp	.+10     	; 0x331a <xTaskGenericNotifyFromISR+0x104>
    3310:	80 e0       	ldi	r24, 0x00	; 0
    3312:	03 c0       	rjmp	.+6      	; 0x331a <xTaskGenericNotifyFromISR+0x104>
    3314:	81 e0       	ldi	r24, 0x01	; 1
    3316:	01 c0       	rjmp	.+2      	; 0x331a <xTaskGenericNotifyFromISR+0x104>
    3318:	81 e0       	ldi	r24, 0x01	; 1
    331a:	df 91       	pop	r29
    331c:	cf 91       	pop	r28
    331e:	1f 91       	pop	r17
    3320:	0f 91       	pop	r16
    3322:	ff 90       	pop	r15
    3324:	ef 90       	pop	r14
    3326:	08 95       	ret

00003328 <xTaskNotifyStateClear>:
    TCB_t *pxTCB;
    BaseType_t xReturn;

        /* If null is passed in here then it is the calling task that is having
        its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    3328:	00 97       	sbiw	r24, 0x00	; 0
    332a:	21 f4       	brne	.+8      	; 0x3334 <xTaskNotifyStateClear+0xc>
    332c:	80 91 30 14 	lds	r24, 0x1430	; 0x801430 <pxCurrentTCB>
    3330:	90 91 31 14 	lds	r25, 0x1431	; 0x801431 <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    3334:	0f b6       	in	r0, 0x3f	; 63
    3336:	f8 94       	cli
    3338:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
    333a:	fc 01       	movw	r30, r24
    333c:	27 a5       	ldd	r18, Z+47	; 0x2f
    333e:	22 30       	cpi	r18, 0x02	; 2
    3340:	19 f4       	brne	.+6      	; 0x3348 <xTaskNotifyStateClear+0x20>
            {
                pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    3342:	17 a6       	std	Z+47, r1	; 0x2f
                xReturn = pdPASS;
    3344:	81 e0       	ldi	r24, 0x01	; 1
    3346:	01 c0       	rjmp	.+2      	; 0x334a <xTaskNotifyStateClear+0x22>
            }
            else
            {
                xReturn = pdFAIL;
    3348:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    334a:	0f 90       	pop	r0
    334c:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    334e:	08 95       	ret

00003350 <prvInsertTimerInActiveList>:
    3350:	cf 92       	push	r12
    3352:	df 92       	push	r13
    3354:	ef 92       	push	r14
    3356:	ff 92       	push	r15
    3358:	0f 93       	push	r16
    335a:	1f 93       	push	r17
    335c:	fc 01       	movw	r30, r24
    335e:	42 83       	std	Z+2, r20	; 0x02
    3360:	53 83       	std	Z+3, r21	; 0x03
    3362:	64 83       	std	Z+4, r22	; 0x04
    3364:	75 83       	std	Z+5, r23	; 0x05
    3366:	93 87       	std	Z+11, r25	; 0x0b
    3368:	82 87       	std	Z+10, r24	; 0x0a
    336a:	04 17       	cp	r16, r20
    336c:	15 07       	cpc	r17, r21
    336e:	26 07       	cpc	r18, r22
    3370:	37 07       	cpc	r19, r23
    3372:	c0 f0       	brcs	.+48     	; 0x33a4 <prvInsertTimerInActiveList+0x54>
    3374:	0c 19       	sub	r16, r12
    3376:	1d 09       	sbc	r17, r13
    3378:	2e 09       	sbc	r18, r14
    337a:	3f 09       	sbc	r19, r15
    337c:	86 85       	ldd	r24, Z+14	; 0x0e
    337e:	97 85       	ldd	r25, Z+15	; 0x0f
    3380:	a0 89       	ldd	r26, Z+16	; 0x10
    3382:	b1 89       	ldd	r27, Z+17	; 0x11
    3384:	08 17       	cp	r16, r24
    3386:	19 07       	cpc	r17, r25
    3388:	2a 07       	cpc	r18, r26
    338a:	3b 07       	cpc	r19, r27
    338c:	00 f5       	brcc	.+64     	; 0x33ce <prvInsertTimerInActiveList+0x7e>
    338e:	bf 01       	movw	r22, r30
    3390:	6e 5f       	subi	r22, 0xFE	; 254
    3392:	7f 4f       	sbci	r23, 0xFF	; 255
    3394:	80 91 3a 14 	lds	r24, 0x143A	; 0x80143a <pxOverflowTimerList>
    3398:	90 91 3b 14 	lds	r25, 0x143B	; 0x80143b <pxOverflowTimerList+0x1>
    339c:	0e 94 33 0a 	call	0x1466	; 0x1466 <vListInsert>
    33a0:	80 e0       	ldi	r24, 0x00	; 0
    33a2:	18 c0       	rjmp	.+48     	; 0x33d4 <prvInsertTimerInActiveList+0x84>
    33a4:	0c 15       	cp	r16, r12
    33a6:	1d 05       	cpc	r17, r13
    33a8:	2e 05       	cpc	r18, r14
    33aa:	3f 05       	cpc	r19, r15
    33ac:	28 f4       	brcc	.+10     	; 0x33b8 <prvInsertTimerInActiveList+0x68>
    33ae:	4c 15       	cp	r20, r12
    33b0:	5d 05       	cpc	r21, r13
    33b2:	6e 05       	cpc	r22, r14
    33b4:	7f 05       	cpc	r23, r15
    33b6:	68 f4       	brcc	.+26     	; 0x33d2 <prvInsertTimerInActiveList+0x82>
    33b8:	bf 01       	movw	r22, r30
    33ba:	6e 5f       	subi	r22, 0xFE	; 254
    33bc:	7f 4f       	sbci	r23, 0xFF	; 255
    33be:	80 91 3c 14 	lds	r24, 0x143C	; 0x80143c <pxCurrentTimerList>
    33c2:	90 91 3d 14 	lds	r25, 0x143D	; 0x80143d <pxCurrentTimerList+0x1>
    33c6:	0e 94 33 0a 	call	0x1466	; 0x1466 <vListInsert>
    33ca:	80 e0       	ldi	r24, 0x00	; 0
    33cc:	03 c0       	rjmp	.+6      	; 0x33d4 <prvInsertTimerInActiveList+0x84>
    33ce:	81 e0       	ldi	r24, 0x01	; 1
    33d0:	01 c0       	rjmp	.+2      	; 0x33d4 <prvInsertTimerInActiveList+0x84>
    33d2:	81 e0       	ldi	r24, 0x01	; 1
    33d4:	1f 91       	pop	r17
    33d6:	0f 91       	pop	r16
    33d8:	ff 90       	pop	r15
    33da:	ef 90       	pop	r14
    33dc:	df 90       	pop	r13
    33de:	cf 90       	pop	r12
    33e0:	08 95       	ret

000033e2 <prvCheckForValidListAndQueue>:
    33e2:	0f b6       	in	r0, 0x3f	; 63
    33e4:	f8 94       	cli
    33e6:	0f 92       	push	r0
    33e8:	80 91 38 14 	lds	r24, 0x1438	; 0x801438 <xTimerQueue>
    33ec:	90 91 39 14 	lds	r25, 0x1439	; 0x801439 <xTimerQueue+0x1>
    33f0:	89 2b       	or	r24, r25
    33f2:	e9 f4       	brne	.+58     	; 0x342e <prvCheckForValidListAndQueue+0x4c>
    33f4:	89 e4       	ldi	r24, 0x49	; 73
    33f6:	94 e1       	ldi	r25, 0x14	; 20
    33f8:	0e 94 fd 09 	call	0x13fa	; 0x13fa <vListInitialise>
    33fc:	8e e3       	ldi	r24, 0x3E	; 62
    33fe:	94 e1       	ldi	r25, 0x14	; 20
    3400:	0e 94 fd 09 	call	0x13fa	; 0x13fa <vListInitialise>
    3404:	89 e4       	ldi	r24, 0x49	; 73
    3406:	94 e1       	ldi	r25, 0x14	; 20
    3408:	90 93 3d 14 	sts	0x143D, r25	; 0x80143d <pxCurrentTimerList+0x1>
    340c:	80 93 3c 14 	sts	0x143C, r24	; 0x80143c <pxCurrentTimerList>
    3410:	8e e3       	ldi	r24, 0x3E	; 62
    3412:	94 e1       	ldi	r25, 0x14	; 20
    3414:	90 93 3b 14 	sts	0x143B, r25	; 0x80143b <pxOverflowTimerList+0x1>
    3418:	80 93 3a 14 	sts	0x143A, r24	; 0x80143a <pxOverflowTimerList>
    341c:	40 e0       	ldi	r20, 0x00	; 0
    341e:	67 e0       	ldi	r22, 0x07	; 7
    3420:	8a e0       	ldi	r24, 0x0A	; 10
    3422:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <xQueueGenericCreate>
    3426:	90 93 39 14 	sts	0x1439, r25	; 0x801439 <xTimerQueue+0x1>
    342a:	80 93 38 14 	sts	0x1438, r24	; 0x801438 <xTimerQueue>
    342e:	0f 90       	pop	r0
    3430:	0f be       	out	0x3f, r0	; 63
    3432:	08 95       	ret

00003434 <xTimerCreateTimerTask>:
    3434:	ef 92       	push	r14
    3436:	ff 92       	push	r15
    3438:	0f 93       	push	r16
    343a:	d3 df       	rcall	.-90     	; 0x33e2 <prvCheckForValidListAndQueue>
    343c:	80 91 38 14 	lds	r24, 0x1438	; 0x801438 <xTimerQueue>
    3440:	90 91 39 14 	lds	r25, 0x1439	; 0x801439 <xTimerQueue+0x1>
    3444:	89 2b       	or	r24, r25
    3446:	91 f0       	breq	.+36     	; 0x346c <xTimerCreateTimerTask+0x38>
    3448:	0f 2e       	mov	r0, r31
    344a:	f6 e3       	ldi	r31, 0x36	; 54
    344c:	ef 2e       	mov	r14, r31
    344e:	f4 e1       	ldi	r31, 0x14	; 20
    3450:	ff 2e       	mov	r15, r31
    3452:	f0 2d       	mov	r31, r0
    3454:	03 e0       	ldi	r16, 0x03	; 3
    3456:	20 e0       	ldi	r18, 0x00	; 0
    3458:	30 e0       	ldi	r19, 0x00	; 0
    345a:	45 e5       	ldi	r20, 0x55	; 85
    345c:	50 e0       	ldi	r21, 0x00	; 0
    345e:	69 e9       	ldi	r22, 0x99	; 153
    3460:	73 e0       	ldi	r23, 0x03	; 3
    3462:	87 e0       	ldi	r24, 0x07	; 7
    3464:	91 e0       	ldi	r25, 0x01	; 1
    3466:	0e 94 1a 12 	call	0x2434	; 0x2434 <xTaskCreate>
    346a:	01 c0       	rjmp	.+2      	; 0x346e <xTimerCreateTimerTask+0x3a>
    346c:	80 e0       	ldi	r24, 0x00	; 0
    346e:	0f 91       	pop	r16
    3470:	ff 90       	pop	r15
    3472:	ef 90       	pop	r14
    3474:	08 95       	ret

00003476 <xTimerGenericCommand>:
    }
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    3476:	8f 92       	push	r8
    3478:	9f 92       	push	r9
    347a:	af 92       	push	r10
    347c:	bf 92       	push	r11
    347e:	cf 92       	push	r12
    3480:	df 92       	push	r13
    3482:	ef 92       	push	r14
    3484:	ff 92       	push	r15
    3486:	0f 93       	push	r16
    3488:	1f 93       	push	r17
    348a:	cf 93       	push	r28
    348c:	df 93       	push	r29
    348e:	cd b7       	in	r28, 0x3d	; 61
    3490:	de b7       	in	r29, 0x3e	; 62
    3492:	27 97       	sbiw	r28, 0x07	; 7
    3494:	0f b6       	in	r0, 0x3f	; 63
    3496:	f8 94       	cli
    3498:	de bf       	out	0x3e, r29	; 62
    349a:	0f be       	out	0x3f, r0	; 63
    349c:	cd bf       	out	0x3d, r28	; 61

    configASSERT( xTimer );

    /* Send a message to the timer service task to perform a particular action
    on a particular timer definition. */
    if( xTimerQueue != NULL )
    349e:	e0 91 38 14 	lds	r30, 0x1438	; 0x801438 <xTimerQueue>
    34a2:	f0 91 39 14 	lds	r31, 0x1439	; 0x801439 <xTimerQueue+0x1>
    34a6:	30 97       	sbiw	r30, 0x00	; 0
    34a8:	81 f1       	breq	.+96     	; 0x350a <xTimerGenericCommand+0x94>
    {
        /* Send a command to the timer service task to start the xTimer timer. */
        xMessage.xMessageID = xCommandID;
    34aa:	69 83       	std	Y+1, r22	; 0x01
        xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    34ac:	2a 83       	std	Y+2, r18	; 0x02
    34ae:	3b 83       	std	Y+3, r19	; 0x03
    34b0:	4c 83       	std	Y+4, r20	; 0x04
    34b2:	5d 83       	std	Y+5, r21	; 0x05
        xMessage.u.xTimerParameters.pxTimer = xTimer;
    34b4:	9f 83       	std	Y+7, r25	; 0x07
    34b6:	8e 83       	std	Y+6, r24	; 0x06

        if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    34b8:	66 30       	cpi	r22, 0x06	; 6
    34ba:	f4 f4       	brge	.+60     	; 0x34f8 <xTimerGenericCommand+0x82>
        {
            if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    34bc:	68 dc       	rcall	.-1840   	; 0x2d8e <xTaskGetSchedulerState>
    34be:	82 30       	cpi	r24, 0x02	; 2
    34c0:	69 f4       	brne	.+26     	; 0x34dc <xTimerGenericCommand+0x66>
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    34c2:	00 e0       	ldi	r16, 0x00	; 0
    34c4:	a7 01       	movw	r20, r14
    34c6:	96 01       	movw	r18, r12
    34c8:	be 01       	movw	r22, r28
    34ca:	6f 5f       	subi	r22, 0xFF	; 255
    34cc:	7f 4f       	sbci	r23, 0xFF	; 255
    34ce:	80 91 38 14 	lds	r24, 0x1438	; 0x801438 <xTimerQueue>
    34d2:	90 91 39 14 	lds	r25, 0x1439	; 0x801439 <xTimerQueue+0x1>
    34d6:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <xQueueGenericSend>
    34da:	18 c0       	rjmp	.+48     	; 0x350c <xTimerGenericCommand+0x96>
            }
            else
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    34dc:	00 e0       	ldi	r16, 0x00	; 0
    34de:	20 e0       	ldi	r18, 0x00	; 0
    34e0:	30 e0       	ldi	r19, 0x00	; 0
    34e2:	a9 01       	movw	r20, r18
    34e4:	be 01       	movw	r22, r28
    34e6:	6f 5f       	subi	r22, 0xFF	; 255
    34e8:	7f 4f       	sbci	r23, 0xFF	; 255
    34ea:	80 91 38 14 	lds	r24, 0x1438	; 0x801438 <xTimerQueue>
    34ee:	90 91 39 14 	lds	r25, 0x1439	; 0x801439 <xTimerQueue+0x1>
    34f2:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <xQueueGenericSend>
    34f6:	0a c0       	rjmp	.+20     	; 0x350c <xTimerGenericCommand+0x96>
            }
        }
        else
        {
            xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    34f8:	20 e0       	ldi	r18, 0x00	; 0
    34fa:	a8 01       	movw	r20, r16
    34fc:	be 01       	movw	r22, r28
    34fe:	6f 5f       	subi	r22, 0xFF	; 255
    3500:	7f 4f       	sbci	r23, 0xFF	; 255
    3502:	cf 01       	movw	r24, r30
    3504:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <xQueueGenericSendFromISR>
    3508:	01 c0       	rjmp	.+2      	; 0x350c <xTimerGenericCommand+0x96>
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
    350a:	80 e0       	ldi	r24, 0x00	; 0
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xReturn;
}
    350c:	27 96       	adiw	r28, 0x07	; 7
    350e:	0f b6       	in	r0, 0x3f	; 63
    3510:	f8 94       	cli
    3512:	de bf       	out	0x3e, r29	; 62
    3514:	0f be       	out	0x3f, r0	; 63
    3516:	cd bf       	out	0x3d, r28	; 61
    3518:	df 91       	pop	r29
    351a:	cf 91       	pop	r28
    351c:	1f 91       	pop	r17
    351e:	0f 91       	pop	r16
    3520:	ff 90       	pop	r15
    3522:	ef 90       	pop	r14
    3524:	df 90       	pop	r13
    3526:	cf 90       	pop	r12
    3528:	bf 90       	pop	r11
    352a:	af 90       	pop	r10
    352c:	9f 90       	pop	r9
    352e:	8f 90       	pop	r8
    3530:	08 95       	ret

00003532 <prvSampleTimeNow>:
    return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    3532:	2f 92       	push	r2
    3534:	3f 92       	push	r3
    3536:	4f 92       	push	r4
    3538:	5f 92       	push	r5
    353a:	6f 92       	push	r6
    353c:	7f 92       	push	r7
    353e:	8f 92       	push	r8
    3540:	9f 92       	push	r9
    3542:	af 92       	push	r10
    3544:	bf 92       	push	r11
    3546:	cf 92       	push	r12
    3548:	df 92       	push	r13
    354a:	ef 92       	push	r14
    354c:	ff 92       	push	r15
    354e:	0f 93       	push	r16
    3550:	1f 93       	push	r17
    3552:	cf 93       	push	r28
    3554:	df 93       	push	r29
    3556:	1c 01       	movw	r2, r24
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

    xTimeNow = xTaskGetTickCount();
    3558:	cd d8       	rcall	.-3686   	; 0x26f4 <xTaskGetTickCount>
    355a:	2b 01       	movw	r4, r22
    355c:	3c 01       	movw	r6, r24

    if( xTimeNow < xLastTime )
    355e:	80 91 32 14 	lds	r24, 0x1432	; 0x801432 <xLastTime.2432>
    3562:	90 91 33 14 	lds	r25, 0x1433	; 0x801433 <xLastTime.2432+0x1>
    3566:	a0 91 34 14 	lds	r26, 0x1434	; 0x801434 <xLastTime.2432+0x2>
    356a:	b0 91 35 14 	lds	r27, 0x1435	; 0x801435 <xLastTime.2432+0x3>
    356e:	48 16       	cp	r4, r24
    3570:	59 06       	cpc	r5, r25
    3572:	6a 06       	cpc	r6, r26
    3574:	7b 06       	cpc	r7, r27
    3576:	08 f0       	brcs	.+2      	; 0x357a <prvSampleTimeNow+0x48>
    3578:	53 c0       	rjmp	.+166    	; 0x3620 <prvSampleTimeNow+0xee>
    357a:	3b c0       	rjmp	.+118    	; 0x35f2 <prvSampleTimeNow+0xc0>
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    {
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    357c:	07 80       	ldd	r0, Z+7	; 0x07
    357e:	f0 85       	ldd	r31, Z+8	; 0x08
    3580:	e0 2d       	mov	r30, r0
    3582:	80 80       	ld	r8, Z
    3584:	91 80       	ldd	r9, Z+1	; 0x01
    3586:	a2 80       	ldd	r10, Z+2	; 0x02
    3588:	b3 80       	ldd	r11, Z+3	; 0x03

        /* Remove the timer from the list. */
        pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    358a:	c0 85       	ldd	r28, Z+8	; 0x08
    358c:	d1 85       	ldd	r29, Z+9	; 0x09
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    358e:	8e 01       	movw	r16, r28
    3590:	0e 5f       	subi	r16, 0xFE	; 254
    3592:	1f 4f       	sbci	r17, 0xFF	; 255
    3594:	c8 01       	movw	r24, r16
    3596:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* Execute its callback, then send a command to restart the timer if
        it is an auto-reload timer.  It cannot be restarted here as the lists
        have not yet been switched. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    359a:	ec 89       	ldd	r30, Y+20	; 0x14
    359c:	fd 89       	ldd	r31, Y+21	; 0x15
    359e:	ce 01       	movw	r24, r28
    35a0:	19 95       	eicall

        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    35a2:	8f 89       	ldd	r24, Y+23	; 0x17
    35a4:	82 ff       	sbrs	r24, 2
    35a6:	25 c0       	rjmp	.+74     	; 0x35f2 <prvSampleTimeNow+0xc0>
            the timer going into the same timer list then it has already expired
            and the timer should be re-inserted into the current list so it is
            processed again within this loop.  Otherwise a command should be sent
            to restart the timer to ensure it is only inserted into a list after
            the lists have been swapped. */
            xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    35a8:	8e 85       	ldd	r24, Y+14	; 0x0e
    35aa:	9f 85       	ldd	r25, Y+15	; 0x0f
    35ac:	a8 89       	ldd	r26, Y+16	; 0x10
    35ae:	b9 89       	ldd	r27, Y+17	; 0x11
    35b0:	88 0d       	add	r24, r8
    35b2:	99 1d       	adc	r25, r9
    35b4:	aa 1d       	adc	r26, r10
    35b6:	bb 1d       	adc	r27, r11
            if( xReloadTime > xNextExpireTime )
    35b8:	88 16       	cp	r8, r24
    35ba:	99 06       	cpc	r9, r25
    35bc:	aa 06       	cpc	r10, r26
    35be:	bb 06       	cpc	r11, r27
    35c0:	70 f4       	brcc	.+28     	; 0x35de <prvSampleTimeNow+0xac>
            {
                listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    35c2:	8a 83       	std	Y+2, r24	; 0x02
    35c4:	9b 83       	std	Y+3, r25	; 0x03
    35c6:	ac 83       	std	Y+4, r26	; 0x04
    35c8:	bd 83       	std	Y+5, r27	; 0x05
                listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    35ca:	db 87       	std	Y+11, r29	; 0x0b
    35cc:	ca 87       	std	Y+10, r28	; 0x0a
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    35ce:	b8 01       	movw	r22, r16
    35d0:	80 91 3c 14 	lds	r24, 0x143C	; 0x80143c <pxCurrentTimerList>
    35d4:	90 91 3d 14 	lds	r25, 0x143D	; 0x80143d <pxCurrentTimerList+0x1>
    35d8:	0e 94 33 0a 	call	0x1466	; 0x1466 <vListInsert>
    35dc:	0a c0       	rjmp	.+20     	; 0x35f2 <prvSampleTimeNow+0xc0>
            }
            else
            {
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    35de:	c1 2c       	mov	r12, r1
    35e0:	d1 2c       	mov	r13, r1
    35e2:	76 01       	movw	r14, r12
    35e4:	00 e0       	ldi	r16, 0x00	; 0
    35e6:	10 e0       	ldi	r17, 0x00	; 0
    35e8:	a5 01       	movw	r20, r10
    35ea:	94 01       	movw	r18, r8
    35ec:	60 e0       	ldi	r22, 0x00	; 0
    35ee:	ce 01       	movw	r24, r28
    35f0:	42 df       	rcall	.-380    	; 0x3476 <xTimerGenericCommand>

    /* The tick count has overflowed.  The timer lists must be switched.
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    35f2:	e0 91 3c 14 	lds	r30, 0x143C	; 0x80143c <pxCurrentTimerList>
    35f6:	f0 91 3d 14 	lds	r31, 0x143D	; 0x80143d <pxCurrentTimerList+0x1>
    35fa:	80 81       	ld	r24, Z
    35fc:	81 11       	cpse	r24, r1
    35fe:	be cf       	rjmp	.-132    	; 0x357c <prvSampleTimeNow+0x4a>
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxTemp = pxCurrentTimerList;
    pxCurrentTimerList = pxOverflowTimerList;
    3600:	80 91 3a 14 	lds	r24, 0x143A	; 0x80143a <pxOverflowTimerList>
    3604:	90 91 3b 14 	lds	r25, 0x143B	; 0x80143b <pxOverflowTimerList+0x1>
    3608:	90 93 3d 14 	sts	0x143D, r25	; 0x80143d <pxCurrentTimerList+0x1>
    360c:	80 93 3c 14 	sts	0x143C, r24	; 0x80143c <pxCurrentTimerList>
    pxOverflowTimerList = pxTemp;
    3610:	f0 93 3b 14 	sts	0x143B, r31	; 0x80143b <pxOverflowTimerList+0x1>
    3614:	e0 93 3a 14 	sts	0x143A, r30	; 0x80143a <pxOverflowTimerList>
    xTimeNow = xTaskGetTickCount();

    if( xTimeNow < xLastTime )
    {
        prvSwitchTimerLists();
        *pxTimerListsWereSwitched = pdTRUE;
    3618:	81 e0       	ldi	r24, 0x01	; 1
    361a:	f1 01       	movw	r30, r2
    361c:	80 83       	st	Z, r24
    361e:	02 c0       	rjmp	.+4      	; 0x3624 <prvSampleTimeNow+0xf2>
    }
    else
    {
        *pxTimerListsWereSwitched = pdFALSE;
    3620:	f1 01       	movw	r30, r2
    3622:	10 82       	st	Z, r1
    }

    xLastTime = xTimeNow;
    3624:	40 92 32 14 	sts	0x1432, r4	; 0x801432 <xLastTime.2432>
    3628:	50 92 33 14 	sts	0x1433, r5	; 0x801433 <xLastTime.2432+0x1>
    362c:	60 92 34 14 	sts	0x1434, r6	; 0x801434 <xLastTime.2432+0x2>
    3630:	70 92 35 14 	sts	0x1435, r7	; 0x801435 <xLastTime.2432+0x3>

    return xTimeNow;
}
    3634:	c3 01       	movw	r24, r6
    3636:	b2 01       	movw	r22, r4
    3638:	df 91       	pop	r29
    363a:	cf 91       	pop	r28
    363c:	1f 91       	pop	r17
    363e:	0f 91       	pop	r16
    3640:	ff 90       	pop	r15
    3642:	ef 90       	pop	r14
    3644:	df 90       	pop	r13
    3646:	cf 90       	pop	r12
    3648:	bf 90       	pop	r11
    364a:	af 90       	pop	r10
    364c:	9f 90       	pop	r9
    364e:	8f 90       	pop	r8
    3650:	7f 90       	pop	r7
    3652:	6f 90       	pop	r6
    3654:	5f 90       	pop	r5
    3656:	4f 90       	pop	r4
    3658:	3f 90       	pop	r3
    365a:	2f 90       	pop	r2
    365c:	08 95       	ret

0000365e <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    365e:	08 95       	ret

00003660 <vApplicationMallocFailedHook>:
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    3660:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    3662:	2f 9a       	sbi	0x05, 7	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3664:	2f ef       	ldi	r18, 0xFF	; 255
    3666:	80 e7       	ldi	r24, 0x70	; 112
    3668:	92 e0       	ldi	r25, 0x02	; 2
    366a:	21 50       	subi	r18, 0x01	; 1
    366c:	80 40       	sbci	r24, 0x00	; 0
    366e:	90 40       	sbci	r25, 0x00	; 0
    3670:	e1 f7       	brne	.-8      	; 0x366a <vApplicationMallocFailedHook+0xa>
    3672:	00 c0       	rjmp	.+0      	; 0x3674 <vApplicationMallocFailedHook+0x14>
    3674:	00 00       	nop
    for(;;)
    {
        _delay_ms(50);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED fast blink.
    3676:	1f 9a       	sbi	0x03, 7	; 3
    3678:	f5 cf       	rjmp	.-22     	; 0x3664 <vApplicationMallocFailedHook+0x4>

0000367a <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook( TaskHandle_t xTask, portCHAR *pcTaskName ) __attribute__((weak));

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)), portCHAR *pcTaskName __attribute__((unused))  )
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    367a:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    367c:	2f 9a       	sbi	0x05, 7	; 5
    367e:	2f ef       	ldi	r18, 0xFF	; 255
    3680:	87 ea       	ldi	r24, 0xA7	; 167
    3682:	91 e6       	ldi	r25, 0x61	; 97
    3684:	21 50       	subi	r18, 0x01	; 1
    3686:	80 40       	sbci	r24, 0x00	; 0
    3688:	90 40       	sbci	r25, 0x00	; 0
    368a:	e1 f7       	brne	.-8      	; 0x3684 <vApplicationStackOverflowHook+0xa>
    368c:	00 c0       	rjmp	.+0      	; 0x368e <vApplicationStackOverflowHook+0x14>
    368e:	00 00       	nop
    for(;;)
    {
        _delay_ms(2000);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED slow blink.
    3690:	1f 9a       	sbi	0x03, 7	; 3
    3692:	f5 cf       	rjmp	.-22     	; 0x367e <vApplicationStackOverflowHook+0x4>

00003694 <create_tasks_and_semaphores>:
// Prototype for LoRaWAN handler
void lora_handler_create(UBaseType_t lora_handler_task_priority);

/*-----------------------------------------------------------*/
void create_tasks_and_semaphores(void)
{
    3694:	8f 92       	push	r8
    3696:	9f 92       	push	r9
    3698:	af 92       	push	r10
    369a:	bf 92       	push	r11
    369c:	cf 92       	push	r12
    369e:	df 92       	push	r13
    36a0:	ef 92       	push	r14
    36a2:	ff 92       	push	r15
    36a4:	0f 93       	push	r16
    36a6:	1f 93       	push	r17
    36a8:	cf 93       	push	r28
    36aa:	df 93       	push	r29
	//xMessageBuffer = xMessageBufferCreate(100);
	//_semaphore = xSemaphoreCreateMutex();
	
	//_downlinkMessagebuffer = xMessageBufferCreate(sizeof(lora_payload_t)*2);
	
	configuration_create(_semaphore);
    36ac:	80 91 c9 14 	lds	r24, 0x14C9	; 0x8014c9 <_semaphore>
    36b0:	90 91 ca 14 	lds	r25, 0x14CA	; 0x8014ca <_semaphore+0x1>
    36b4:	0e 94 59 03 	call	0x6b2	; 0x6b2 <configuration_create>
	
	//lora_UpLinkHandler_create(TASK_LORA_DRIVER_PRIORITY,xMessageBuffer);
	
	humAndTempReader_t humidityAndTemperature = humAndTempReader_create(TASK_HUMIDITY_SENSOR_PRIORITY, HUMIDITY_TASK_STACK, 
    36b8:	e0 90 cd 14 	lds	r14, 0x14CD	; 0x8014cd <readyEventGroup>
    36bc:	f0 90 ce 14 	lds	r15, 0x14CE	; 0x8014ce <readyEventGroup+0x1>
    36c0:	40 91 e5 14 	lds	r20, 0x14E5	; 0x8014e5 <startMeasureEventGroup>
    36c4:	50 91 e6 14 	lds	r21, 0x14E6	; 0x8014e6 <startMeasureEventGroup+0x1>
    36c8:	a1 2c       	mov	r10, r1
    36ca:	b1 2c       	mov	r11, r1
    36cc:	65 01       	movw	r12, r10
    36ce:	68 94       	set
    36d0:	a4 f8       	bld	r10, 4
    36d2:	01 e0       	ldi	r16, 0x01	; 1
    36d4:	10 e0       	ldi	r17, 0x00	; 0
    36d6:	20 e0       	ldi	r18, 0x00	; 0
    36d8:	30 e0       	ldi	r19, 0x00	; 0
    36da:	60 ec       	ldi	r22, 0xC0	; 192
    36dc:	82 e0       	ldi	r24, 0x02	; 2
    36de:	0e 94 a6 05 	call	0xb4c	; 0xb4c <humAndTempReader_create>
    36e2:	c8 2f       	mov	r28, r24
    36e4:	d9 2f       	mov	r29, r25
	startMeasureEventGroup, BIT_MEASURE_HUMIDITY, readyEventGroup, BIT_DONE_MEASURE_HUMIDITY);
	
	co2reader_t co2reader = co2Reader_create(TASK_CO2_SENSOR_PRIORITY, CO2_TASK_STACK, startMeasureEventGroup, BIT_MEASURE_CO2,
    36e6:	e0 90 cd 14 	lds	r14, 0x14CD	; 0x8014cd <readyEventGroup>
    36ea:	f0 90 ce 14 	lds	r15, 0x14CE	; 0x8014ce <readyEventGroup+0x1>
    36ee:	40 91 e5 14 	lds	r20, 0x14E5	; 0x8014e5 <startMeasureEventGroup>
    36f2:	50 91 e6 14 	lds	r21, 0x14E6	; 0x8014e6 <startMeasureEventGroup+0x1>
    36f6:	a1 2c       	mov	r10, r1
    36f8:	b1 2c       	mov	r11, r1
    36fa:	65 01       	movw	r12, r10
    36fc:	68 94       	set
    36fe:	a5 f8       	bld	r10, 5
    3700:	02 e0       	ldi	r16, 0x02	; 2
    3702:	10 e0       	ldi	r17, 0x00	; 0
    3704:	20 e0       	ldi	r18, 0x00	; 0
    3706:	30 e0       	ldi	r19, 0x00	; 0
    3708:	60 ec       	ldi	r22, 0xC0	; 192
    370a:	82 e0       	ldi	r24, 0x02	; 2
    370c:	0e 94 8a 02 	call	0x514	; 0x514 <co2Reader_create>
    3710:	4c 01       	movw	r8, r24
	readyEventGroup, BIT_DONE_MEASURE_CO2);
	
	soundReader_t soundReader = soundReader_create(TASK_SOUND_SENSOR_PRIORITY, SOUND_TASK_STACK, startMeasureEventGroup, BIT_MEASURE_SOUND,
    3712:	e0 90 cd 14 	lds	r14, 0x14CD	; 0x8014cd <readyEventGroup>
    3716:	f0 90 ce 14 	lds	r15, 0x14CE	; 0x8014ce <readyEventGroup+0x1>
    371a:	40 91 e5 14 	lds	r20, 0x14E5	; 0x8014e5 <startMeasureEventGroup>
    371e:	50 91 e6 14 	lds	r21, 0x14E6	; 0x8014e6 <startMeasureEventGroup+0x1>
    3722:	a1 2c       	mov	r10, r1
    3724:	b1 2c       	mov	r11, r1
    3726:	65 01       	movw	r12, r10
    3728:	68 94       	set
    372a:	a6 f8       	bld	r10, 6
    372c:	04 e0       	ldi	r16, 0x04	; 4
    372e:	10 e0       	ldi	r17, 0x00	; 0
    3730:	20 e0       	ldi	r18, 0x00	; 0
    3732:	30 e0       	ldi	r19, 0x00	; 0
    3734:	60 ec       	ldi	r22, 0xC0	; 192
    3736:	82 e0       	ldi	r24, 0x02	; 2
    3738:	0e 94 8c 06 	call	0xd18	; 0xd18 <soundReader_create>
    373c:	18 2f       	mov	r17, r24
    373e:	09 2f       	mov	r16, r25
	readyEventGroup, BIT_DONE_MEASURE_SOUND);	
	
	servo_initialise();
    3740:	0e 94 7f 06 	call	0xcfe	; 0xcfe <servo_initialise>
	
	device_create(TASK_DEVICE_PRIORITY, DEVICE_TASK_STACK, startMeasureEventGroup, ALL_BIT_MEASURE,
    3744:	e0 90 cd 14 	lds	r14, 0x14CD	; 0x8014cd <readyEventGroup>
    3748:	f0 90 ce 14 	lds	r15, 0x14CE	; 0x8014ce <readyEventGroup+0x1>
    374c:	40 91 e5 14 	lds	r20, 0x14E5	; 0x8014e5 <startMeasureEventGroup>
    3750:	50 91 e6 14 	lds	r21, 0x14E6	; 0x8014e6 <startMeasureEventGroup+0x1>
    3754:	80 91 c8 14 	lds	r24, 0x14C8	; 0x8014c8 <xMessageBuffer+0x1>
    3758:	8f 93       	push	r24
    375a:	80 91 c7 14 	lds	r24, 0x14C7	; 0x8014c7 <xMessageBuffer>
    375e:	8f 93       	push	r24
    3760:	0f 93       	push	r16
    3762:	1f 93       	push	r17
    3764:	df 93       	push	r29
    3766:	cf 93       	push	r28
    3768:	0f 2e       	mov	r0, r31
    376a:	f0 e7       	ldi	r31, 0x70	; 112
    376c:	af 2e       	mov	r10, r31
    376e:	b1 2c       	mov	r11, r1
    3770:	c1 2c       	mov	r12, r1
    3772:	d1 2c       	mov	r13, r1
    3774:	f0 2d       	mov	r31, r0
    3776:	07 e0       	ldi	r16, 0x07	; 7
    3778:	10 e0       	ldi	r17, 0x00	; 0
    377a:	20 e0       	ldi	r18, 0x00	; 0
    377c:	30 e0       	ldi	r19, 0x00	; 0
    377e:	60 ec       	ldi	r22, 0xC0	; 192
    3780:	82 e0       	ldi	r24, 0x02	; 2
    3782:	0e 94 04 04 	call	0x808	; 0x808 <device_create>
	readyEventGroup, ALL_BIT_DONE_MEASURE, co2reader, humidityAndTemperature,soundReader, xMessageBuffer);
	
	
	
	//lora_DownLinkHandler_create(TASK_LORA_DRIVER_PRIORITYDOWN,_downlinkMessagebuffer);
}
    3786:	0f 90       	pop	r0
    3788:	0f 90       	pop	r0
    378a:	0f 90       	pop	r0
    378c:	0f 90       	pop	r0
    378e:	0f 90       	pop	r0
    3790:	0f 90       	pop	r0
    3792:	df 91       	pop	r29
    3794:	cf 91       	pop	r28
    3796:	1f 91       	pop	r17
    3798:	0f 91       	pop	r16
    379a:	ff 90       	pop	r15
    379c:	ef 90       	pop	r14
    379e:	df 90       	pop	r13
    37a0:	cf 90       	pop	r12
    37a2:	bf 90       	pop	r11
    37a4:	af 90       	pop	r10
    37a6:	9f 90       	pop	r9
    37a8:	8f 90       	pop	r8
    37aa:	08 95       	ret

000037ac <initialiseSystem>:

/*-----------------------------------------------------------*/
void initialiseSystem()
{
	startMeasureEventGroup = xEventGroupCreate();
    37ac:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <xEventGroupCreate>
    37b0:	90 93 e6 14 	sts	0x14E6, r25	; 0x8014e6 <startMeasureEventGroup+0x1>
    37b4:	80 93 e5 14 	sts	0x14E5, r24	; 0x8014e5 <startMeasureEventGroup>
	readyEventGroup = xEventGroupCreate();
    37b8:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <xEventGroupCreate>
    37bc:	90 93 ce 14 	sts	0x14CE, r25	; 0x8014ce <readyEventGroup+0x1>
    37c0:	80 93 cd 14 	sts	0x14CD, r24	; 0x8014cd <readyEventGroup>

	xMessageBuffer = xMessageBufferCreate(100);
    37c4:	41 e0       	ldi	r20, 0x01	; 1
    37c6:	60 e0       	ldi	r22, 0x00	; 0
    37c8:	70 e0       	ldi	r23, 0x00	; 0
    37ca:	84 e6       	ldi	r24, 0x64	; 100
    37cc:	90 e0       	ldi	r25, 0x00	; 0
    37ce:	0e 94 54 10 	call	0x20a8	; 0x20a8 <xStreamBufferGenericCreate>
    37d2:	90 93 c8 14 	sts	0x14C8, r25	; 0x8014c8 <xMessageBuffer+0x1>
    37d6:	80 93 c7 14 	sts	0x14C7, r24	; 0x8014c7 <xMessageBuffer>
	_semaphore = xSemaphoreCreateMutex();
    37da:	81 e0       	ldi	r24, 0x01	; 1
    37dc:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <xQueueCreateMutex>
    37e0:	90 93 ca 14 	sts	0x14CA, r25	; 0x8014ca <_semaphore+0x1>
    37e4:	80 93 c9 14 	sts	0x14C9, r24	; 0x8014c9 <_semaphore>
	_downlinkMessagebuffer = xMessageBufferCreate(sizeof(lora_payload_t)*2);
    37e8:	41 e0       	ldi	r20, 0x01	; 1
    37ea:	60 e0       	ldi	r22, 0x00	; 0
    37ec:	70 e0       	ldi	r23, 0x00	; 0
    37ee:	8c e2       	ldi	r24, 0x2C	; 44
    37f0:	90 e0       	ldi	r25, 0x00	; 0
    37f2:	0e 94 54 10 	call	0x20a8	; 0x20a8 <xStreamBufferGenericCreate>
    37f6:	90 93 cc 14 	sts	0x14CC, r25	; 0x8014cc <_downlinkMessagebuffer+0x1>
    37fa:	80 93 cb 14 	sts	0x14CB, r24	; 0x8014cb <_downlinkMessagebuffer>
	// Set output ports for leds used in the example
	DDRA |= _BV(DDA0) | _BV(DDA7);
    37fe:	81 b1       	in	r24, 0x01	; 1
    3800:	81 68       	ori	r24, 0x81	; 129
    3802:	81 b9       	out	0x01, r24	; 1
	//// Initialise the trace-driver to be used together with the R2R-Network
	//trace_init();
	// Make it possible to use stdio on COM port 0 (USB) on Arduino board - Setting 57600,8,N,1
	stdioCreate(ser_USART0);
    3804:	80 e0       	ldi	r24, 0x00	; 0
    3806:	76 d7       	rcall	.+3820   	; 0x46f4 <stdioCreate>
	
	
	
	// vvvvvvvvvvvvvvvvv BELOW IS LoRaWAN initialisation vvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
	// Initialise the HAL layer and use 5 for LED driver priority
	hal_create(5);
    3808:	85 e0       	ldi	r24, 0x05	; 5
    380a:	0f d0       	rcall	.+30     	; 0x382a <hal_create>
	// Initialise the LoRaWAN driver with a down-link buffer
	
	
	lora_driver_create(LORA_USART, NULL);
    380c:	60 e0       	ldi	r22, 0x00	; 0
    380e:	70 e0       	ldi	r23, 0x00	; 0
    3810:	81 e0       	ldi	r24, 0x01	; 1
	// Create LoRaWAN task and start it up with priority 3 
	
	hih8120Create();
    3812:	57 d2       	rcall	.+1198   	; 0x3cc2 <lora_driver_create>
    3814:	69 c0       	rjmp	.+210    	; 0x38e8 <hih8120Create>
    3816:	08 95       	ret

00003818 <main>:
	
}
/*-----------------------------------------------------------*/
int main(void)
{
	initialiseSystem(); // Must be done as the very first thing!!
    3818:	c9 df       	rcall	.-110    	; 0x37ac <initialiseSystem>
	create_tasks_and_semaphores();
    381a:	3c df       	rcall	.-392    	; 0x3694 <create_tasks_and_semaphores>
    381c:	81 ea       	ldi	r24, 0xA1	; 161
	printf("Program Started!!\n");
    381e:	93 e0       	ldi	r25, 0x03	; 3
    3820:	0e 94 54 29 	call	0x52a8	; 0x52a8 <puts>
    3824:	0e 94 38 13 	call	0x2670	; 0x2670 <vTaskStartScheduler>
	vTaskStartScheduler(); // Initialise and run the freeRTOS scheduler. Execution should never return from here.
    3828:	ff cf       	rjmp	.-2      	; 0x3828 <main+0x10>

0000382a <hal_create>:
    382a:	e7 ee       	ldi	r30, 0xE7	; 231
    382c:	f4 e1       	ldi	r31, 0x14	; 20
    382e:	24 ea       	ldi	r18, 0xA4	; 164
    3830:	3e e1       	ldi	r19, 0x1E	; 30
    3832:	31 83       	std	Z+1, r19	; 0x01
    3834:	20 83       	st	Z, r18
    3836:	27 ea       	ldi	r18, 0xA7	; 167
    3838:	3e e1       	ldi	r19, 0x1E	; 30
    383a:	33 83       	std	Z+3, r19	; 0x03
    383c:	22 83       	std	Z+2, r18	; 0x02
    383e:	22 eb       	ldi	r18, 0xB2	; 178
    3840:	3e e1       	ldi	r19, 0x1E	; 30
    3842:	35 83       	std	Z+5, r19	; 0x05
    3844:	24 83       	std	Z+4, r18	; 0x04
    3846:	26 eb       	ldi	r18, 0xB6	; 182
    3848:	3e e1       	ldi	r19, 0x1E	; 30
    384a:	37 83       	std	Z+7, r19	; 0x07
    384c:	26 83       	std	Z+6, r18	; 0x06
    384e:	2c eb       	ldi	r18, 0xBC	; 188
    3850:	3e e1       	ldi	r19, 0x1E	; 30
    3852:	31 87       	std	Z+9, r19	; 0x09
    3854:	20 87       	std	Z+8, r18	; 0x08
    3856:	28 ec       	ldi	r18, 0xC8	; 200
    3858:	3e e1       	ldi	r19, 0x1E	; 30
    385a:	33 87       	std	Z+11, r19	; 0x0b
    385c:	22 87       	std	Z+10, r18	; 0x0a
    385e:	2d ec       	ldi	r18, 0xCD	; 205
    3860:	3e e1       	ldi	r19, 0x1E	; 30
    3862:	35 87       	std	Z+13, r19	; 0x0d
    3864:	24 87       	std	Z+12, r18	; 0x0c
    3866:	29 ed       	ldi	r18, 0xD9	; 217
    3868:	3e e1       	ldi	r19, 0x1E	; 30
    386a:	37 87       	std	Z+15, r19	; 0x0f
    386c:	26 87       	std	Z+14, r18	; 0x0e
    386e:	29 eb       	ldi	r18, 0xB9	; 185
    3870:	3e e1       	ldi	r19, 0x1E	; 30
    3872:	31 8b       	std	Z+17, r19	; 0x11
    3874:	20 8b       	std	Z+16, r18	; 0x10
    3876:	2e ed       	ldi	r18, 0xDE	; 222
    3878:	3e e1       	ldi	r19, 0x1E	; 30
    387a:	33 8b       	std	Z+19, r19	; 0x13
    387c:	22 8b       	std	Z+18, r18	; 0x12
    387e:	2b ee       	ldi	r18, 0xEB	; 235
    3880:	3e e1       	ldi	r19, 0x1E	; 30
    3882:	35 8b       	std	Z+21, r19	; 0x15
    3884:	24 8b       	std	Z+20, r18	; 0x14
    3886:	68 2f       	mov	r22, r24
    3888:	cf 01       	movw	r24, r30
    388a:	50 c1       	rjmp	.+672    	; 0x3b2c <led_create>
    388c:	08 95       	ret

0000388e <_hihTwiCallback>:
    388e:	65 30       	cpi	r22, 0x05	; 5
    3890:	f1 f4       	brne	.+60     	; 0x38ce <_hihTwiCallback+0x40>
    3892:	fa 01       	movw	r30, r20
    3894:	80 81       	ld	r24, Z
    3896:	8f 73       	andi	r24, 0x3F	; 63
    3898:	90 e0       	ldi	r25, 0x00	; 0
    389a:	98 2f       	mov	r25, r24
    389c:	88 27       	eor	r24, r24
    389e:	21 81       	ldd	r18, Z+1	; 0x01
    38a0:	82 2b       	or	r24, r18
    38a2:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <_hum+0x1>
    38a6:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <_hum>
    38aa:	82 81       	ldd	r24, Z+2	; 0x02
    38ac:	f0 e4       	ldi	r31, 0x40	; 64
    38ae:	8f 9f       	mul	r24, r31
    38b0:	c0 01       	movw	r24, r0
    38b2:	11 24       	eor	r1, r1
    38b4:	fa 01       	movw	r30, r20
    38b6:	23 81       	ldd	r18, Z+3	; 0x03
    38b8:	26 95       	lsr	r18
    38ba:	26 95       	lsr	r18
    38bc:	82 2b       	or	r24, r18
    38be:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <_temp+0x1>
    38c2:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <_temp>
    38c6:	81 e0       	ldi	r24, 0x01	; 1
    38c8:	80 93 54 14 	sts	0x1454, r24	; 0x801454 <_measuringIsReady>
    38cc:	08 95       	ret
    38ce:	64 30       	cpi	r22, 0x04	; 4
    38d0:	51 f0       	breq	.+20     	; 0x38e6 <_hihTwiCallback+0x58>
    38d2:	80 e0       	ldi	r24, 0x00	; 0
    38d4:	90 e4       	ldi	r25, 0x40	; 64
    38d6:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <_temp+0x1>
    38da:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <_temp>
    38de:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <_hum+0x1>
    38e2:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <_hum>
    38e6:	08 95       	ret

000038e8 <hih8120Create>:
    38e8:	0f 93       	push	r16
    38ea:	1f 93       	push	r17
    38ec:	07 e4       	ldi	r16, 0x47	; 71
    38ee:	1c e1       	ldi	r17, 0x1C	; 28
    38f0:	20 e0       	ldi	r18, 0x00	; 0
    38f2:	34 e2       	ldi	r19, 0x24	; 36
    38f4:	44 ef       	ldi	r20, 0xF4	; 244
    38f6:	50 e0       	ldi	r21, 0x00	; 0
    38f8:	60 e0       	ldi	r22, 0x00	; 0
    38fa:	87 e2       	ldi	r24, 0x27	; 39
    38fc:	35 d7       	rcall	.+3690   	; 0x4768 <twiCreate>
    38fe:	90 93 56 14 	sts	0x1456, r25	; 0x801456 <_hih8120Handler+0x1>
    3902:	80 93 55 14 	sts	0x1455, r24	; 0x801455 <_hih8120Handler>
    3906:	21 e0       	ldi	r18, 0x01	; 1
    3908:	89 2b       	or	r24, r25
    390a:	09 f0       	breq	.+2      	; 0x390e <hih8120Create+0x26>
    390c:	20 e0       	ldi	r18, 0x00	; 0
    390e:	82 2f       	mov	r24, r18
    3910:	1f 91       	pop	r17
    3912:	0f 91       	pop	r16
    3914:	08 95       	ret

00003916 <hih8120IsReady>:
    3916:	80 91 54 14 	lds	r24, 0x1454	; 0x801454 <_measuringIsReady>
    391a:	08 95       	ret

0000391c <hih8120Wakeup>:
    391c:	80 91 55 14 	lds	r24, 0x1455	; 0x801455 <_hih8120Handler>
    3920:	90 91 56 14 	lds	r25, 0x1456	; 0x801456 <_hih8120Handler+0x1>
    3924:	00 97       	sbiw	r24, 0x00	; 0
    3926:	51 f0       	breq	.+20     	; 0x393c <hih8120Wakeup+0x20>
    3928:	40 e0       	ldi	r20, 0x00	; 0
    392a:	60 e0       	ldi	r22, 0x00	; 0
    392c:	70 e0       	ldi	r23, 0x00	; 0
    392e:	6d d7       	rcall	.+3802   	; 0x480a <twiTransmit>
    3930:	84 30       	cpi	r24, 0x04	; 4
    3932:	31 f4       	brne	.+12     	; 0x3940 <hih8120Wakeup+0x24>
    3934:	10 92 54 14 	sts	0x1454, r1	; 0x801454 <_measuringIsReady>
    3938:	80 e0       	ldi	r24, 0x00	; 0
    393a:	08 95       	ret
    393c:	82 e0       	ldi	r24, 0x02	; 2
    393e:	08 95       	ret
    3940:	83 e0       	ldi	r24, 0x03	; 3
    3942:	08 95       	ret

00003944 <hih8120Meassure>:
    3944:	80 91 55 14 	lds	r24, 0x1455	; 0x801455 <_hih8120Handler>
    3948:	90 91 56 14 	lds	r25, 0x1456	; 0x801456 <_hih8120Handler+0x1>
    394c:	00 97       	sbiw	r24, 0x00	; 0
    394e:	31 f0       	breq	.+12     	; 0x395c <hih8120Meassure+0x18>
    3950:	64 e0       	ldi	r22, 0x04	; 4
    3952:	a7 d7       	rcall	.+3918   	; 0x48a2 <twiReceive>
    3954:	85 30       	cpi	r24, 0x05	; 5
    3956:	21 f0       	breq	.+8      	; 0x3960 <hih8120Meassure+0x1c>
    3958:	83 e0       	ldi	r24, 0x03	; 3
    395a:	08 95       	ret
    395c:	82 e0       	ldi	r24, 0x02	; 2
    395e:	08 95       	ret
    3960:	80 e0       	ldi	r24, 0x00	; 0
    3962:	08 95       	ret

00003964 <hih8120GetHumidity>:
    3964:	60 91 0c 02 	lds	r22, 0x020C	; 0x80020c <_hum>
    3968:	70 91 0d 02 	lds	r23, 0x020D	; 0x80020d <_hum+0x1>
    396c:	80 e0       	ldi	r24, 0x00	; 0
    396e:	90 e0       	ldi	r25, 0x00	; 0
    3970:	0e 94 5b 26 	call	0x4cb6	; 0x4cb6 <__floatunsisf>
    3974:	20 e0       	ldi	r18, 0x00	; 0
    3976:	30 e0       	ldi	r19, 0x00	; 0
    3978:	48 ec       	ldi	r20, 0xC8	; 200
    397a:	52 e4       	ldi	r21, 0x42	; 66
    397c:	0e 94 e9 26 	call	0x4dd2	; 0x4dd2 <__mulsf3>
    3980:	20 e0       	ldi	r18, 0x00	; 0
    3982:	38 ef       	ldi	r19, 0xF8	; 248
    3984:	4f e7       	ldi	r20, 0x7F	; 127
    3986:	56 e4       	ldi	r21, 0x46	; 70
    3988:	0c 94 c2 25 	jmp	0x4b84	; 0x4b84 <__divsf3>
    398c:	08 95       	ret

0000398e <hih8120GetHumidityPercent_x10>:
    398e:	ea df       	rcall	.-44     	; 0x3964 <hih8120GetHumidity>
    3990:	20 e0       	ldi	r18, 0x00	; 0
    3992:	30 e0       	ldi	r19, 0x00	; 0
    3994:	40 e2       	ldi	r20, 0x20	; 32
    3996:	51 e4       	ldi	r21, 0x41	; 65
    3998:	0e 94 e9 26 	call	0x4dd2	; 0x4dd2 <__mulsf3>
    399c:	0e 94 2f 26 	call	0x4c5e	; 0x4c5e <__fixunssfsi>
    39a0:	cb 01       	movw	r24, r22
    39a2:	08 95       	ret

000039a4 <hih8120GetTemperature>:
    39a4:	60 91 0a 02 	lds	r22, 0x020A	; 0x80020a <_temp>
    39a8:	70 91 0b 02 	lds	r23, 0x020B	; 0x80020b <_temp+0x1>
    39ac:	80 e0       	ldi	r24, 0x00	; 0
    39ae:	90 e0       	ldi	r25, 0x00	; 0
    39b0:	0e 94 5b 26 	call	0x4cb6	; 0x4cb6 <__floatunsisf>
    39b4:	20 e0       	ldi	r18, 0x00	; 0
    39b6:	30 e0       	ldi	r19, 0x00	; 0
    39b8:	45 e2       	ldi	r20, 0x25	; 37
    39ba:	53 e4       	ldi	r21, 0x43	; 67
    39bc:	0e 94 e9 26 	call	0x4dd2	; 0x4dd2 <__mulsf3>
    39c0:	20 e0       	ldi	r18, 0x00	; 0
    39c2:	38 ef       	ldi	r19, 0xF8	; 248
    39c4:	4f e7       	ldi	r20, 0x7F	; 127
    39c6:	56 e4       	ldi	r21, 0x46	; 70
    39c8:	0e 94 c2 25 	call	0x4b84	; 0x4b84 <__divsf3>
    39cc:	20 e0       	ldi	r18, 0x00	; 0
    39ce:	30 e0       	ldi	r19, 0x00	; 0
    39d0:	40 e2       	ldi	r20, 0x20	; 32
    39d2:	52 e4       	ldi	r21, 0x42	; 66
    39d4:	0c 94 5d 25 	jmp	0x4aba	; 0x4aba <__subsf3>
    39d8:	08 95       	ret

000039da <hih8120GetTemperature_x10>:
    39da:	e4 df       	rcall	.-56     	; 0x39a4 <hih8120GetTemperature>
    39dc:	20 e0       	ldi	r18, 0x00	; 0
    39de:	30 e0       	ldi	r19, 0x00	; 0
    39e0:	40 e2       	ldi	r20, 0x20	; 32
    39e2:	51 e4       	ldi	r21, 0x41	; 65
    39e4:	0e 94 e9 26 	call	0x4dd2	; 0x4dd2 <__mulsf3>
    39e8:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <__fixsfsi>
    39ec:	cb 01       	movw	r24, r22
    39ee:	08 95       	ret

000039f0 <_turn_off>:
    39f0:	cf 93       	push	r28
    39f2:	df 93       	push	r29
    39f4:	90 e0       	ldi	r25, 0x00	; 0
    39f6:	fc 01       	movw	r30, r24
    39f8:	ee 0f       	add	r30, r30
    39fa:	ff 1f       	adc	r31, r31
    39fc:	e8 0f       	add	r30, r24
    39fe:	f9 1f       	adc	r31, r25
    3a00:	ee 0f       	add	r30, r30
    3a02:	ff 1f       	adc	r31, r31
    3a04:	e9 5a       	subi	r30, 0xA9	; 169
    3a06:	fb 4e       	sbci	r31, 0xEB	; 235
    3a08:	23 81       	ldd	r18, Z+3	; 0x03
    3a0a:	21 11       	cpse	r18, r1
    3a0c:	0a c0       	rjmp	.+20     	; 0x3a22 <_turn_off+0x32>
    3a0e:	ef 01       	movw	r28, r30
    3a10:	e0 91 ef 14 	lds	r30, 0x14EF	; 0x8014ef <register_access+0x8>
    3a14:	f0 91 f0 14 	lds	r31, 0x14F0	; 0x8014f0 <register_access+0x9>
    3a18:	6a 81       	ldd	r22, Y+2	; 0x02
    3a1a:	88 81       	ld	r24, Y
    3a1c:	99 81       	ldd	r25, Y+1	; 0x01
    3a1e:	19 95       	eicall
    3a20:	12 c0       	rjmp	.+36     	; 0x3a46 <_turn_off+0x56>
    3a22:	dc 01       	movw	r26, r24
    3a24:	aa 0f       	add	r26, r26
    3a26:	bb 1f       	adc	r27, r27
    3a28:	ed 01       	movw	r28, r26
    3a2a:	c8 0f       	add	r28, r24
    3a2c:	d9 1f       	adc	r29, r25
    3a2e:	cc 0f       	add	r28, r28
    3a30:	dd 1f       	adc	r29, r29
    3a32:	c9 5a       	subi	r28, 0xA9	; 169
    3a34:	db 4e       	sbci	r29, 0xEB	; 235
    3a36:	e0 91 f9 14 	lds	r30, 0x14F9	; 0x8014f9 <register_access+0x12>
    3a3a:	f0 91 fa 14 	lds	r31, 0x14FA	; 0x8014fa <register_access+0x13>
    3a3e:	6a 81       	ldd	r22, Y+2	; 0x02
    3a40:	88 81       	ld	r24, Y
    3a42:	99 81       	ldd	r25, Y+1	; 0x01
    3a44:	19 95       	eicall
    3a46:	df 91       	pop	r29
    3a48:	cf 91       	pop	r28
    3a4a:	08 95       	ret

00003a4c <_turn_on>:
    3a4c:	cf 93       	push	r28
    3a4e:	df 93       	push	r29
    3a50:	90 e0       	ldi	r25, 0x00	; 0
    3a52:	fc 01       	movw	r30, r24
    3a54:	ee 0f       	add	r30, r30
    3a56:	ff 1f       	adc	r31, r31
    3a58:	e8 0f       	add	r30, r24
    3a5a:	f9 1f       	adc	r31, r25
    3a5c:	ee 0f       	add	r30, r30
    3a5e:	ff 1f       	adc	r31, r31
    3a60:	e9 5a       	subi	r30, 0xA9	; 169
    3a62:	fb 4e       	sbci	r31, 0xEB	; 235
    3a64:	23 81       	ldd	r18, Z+3	; 0x03
    3a66:	21 11       	cpse	r18, r1
    3a68:	0a c0       	rjmp	.+20     	; 0x3a7e <_turn_on+0x32>
    3a6a:	ef 01       	movw	r28, r30
    3a6c:	e0 91 f9 14 	lds	r30, 0x14F9	; 0x8014f9 <register_access+0x12>
    3a70:	f0 91 fa 14 	lds	r31, 0x14FA	; 0x8014fa <register_access+0x13>
    3a74:	6a 81       	ldd	r22, Y+2	; 0x02
    3a76:	88 81       	ld	r24, Y
    3a78:	99 81       	ldd	r25, Y+1	; 0x01
    3a7a:	19 95       	eicall
    3a7c:	12 c0       	rjmp	.+36     	; 0x3aa2 <_turn_on+0x56>
    3a7e:	dc 01       	movw	r26, r24
    3a80:	aa 0f       	add	r26, r26
    3a82:	bb 1f       	adc	r27, r27
    3a84:	ed 01       	movw	r28, r26
    3a86:	c8 0f       	add	r28, r24
    3a88:	d9 1f       	adc	r29, r25
    3a8a:	cc 0f       	add	r28, r28
    3a8c:	dd 1f       	adc	r29, r29
    3a8e:	c9 5a       	subi	r28, 0xA9	; 169
    3a90:	db 4e       	sbci	r29, 0xEB	; 235
    3a92:	e0 91 ef 14 	lds	r30, 0x14EF	; 0x8014ef <register_access+0x8>
    3a96:	f0 91 f0 14 	lds	r31, 0x14F0	; 0x8014f0 <register_access+0x9>
    3a9a:	6a 81       	ldd	r22, Y+2	; 0x02
    3a9c:	88 81       	ld	r24, Y
    3a9e:	99 81       	ldd	r25, Y+1	; 0x01
    3aa0:	19 95       	eicall
    3aa2:	df 91       	pop	r29
    3aa4:	cf 91       	pop	r28
    3aa6:	08 95       	ret

00003aa8 <_hal_led_task>:
    3aa8:	0f 2e       	mov	r0, r31
    3aaa:	f7 ee       	ldi	r31, 0xE7	; 231
    3aac:	cf 2e       	mov	r12, r31
    3aae:	f4 e1       	ldi	r31, 0x14	; 20
    3ab0:	df 2e       	mov	r13, r31
    3ab2:	f0 2d       	mov	r31, r0
    3ab4:	04 e0       	ldi	r16, 0x04	; 4
    3ab6:	c7 e5       	ldi	r28, 0x57	; 87
    3ab8:	d4 e1       	ldi	r29, 0x14	; 20
    3aba:	10 e0       	ldi	r17, 0x00	; 0
    3abc:	8c 81       	ldd	r24, Y+4	; 0x04
    3abe:	81 30       	cpi	r24, 0x01	; 1
    3ac0:	69 f0       	breq	.+26     	; 0x3adc <_hal_led_task+0x34>
    3ac2:	e8 f0       	brcs	.+58     	; 0x3afe <_hal_led_task+0x56>
    3ac4:	82 30       	cpi	r24, 0x02	; 2
    3ac6:	39 f5       	brne	.+78     	; 0x3b16 <_hal_led_task+0x6e>
    3ac8:	d6 01       	movw	r26, r12
    3aca:	1c 96       	adiw	r26, 0x0c	; 12
    3acc:	ed 91       	ld	r30, X+
    3ace:	fc 91       	ld	r31, X
    3ad0:	1d 97       	sbiw	r26, 0x0d	; 13
    3ad2:	6a 81       	ldd	r22, Y+2	; 0x02
    3ad4:	88 81       	ld	r24, Y
    3ad6:	99 81       	ldd	r25, Y+1	; 0x01
    3ad8:	19 95       	eicall
    3ada:	1d c0       	rjmp	.+58     	; 0x3b16 <_hal_led_task+0x6e>
    3adc:	8d 81       	ldd	r24, Y+5	; 0x05
    3ade:	8f 5f       	subi	r24, 0xFF	; 255
    3ae0:	8a 30       	cpi	r24, 0x0A	; 10
    3ae2:	10 f4       	brcc	.+4      	; 0x3ae8 <_hal_led_task+0x40>
    3ae4:	8d 83       	std	Y+5, r24	; 0x05
    3ae6:	17 c0       	rjmp	.+46     	; 0x3b16 <_hal_led_task+0x6e>
    3ae8:	1d 82       	std	Y+5, r1	; 0x05
    3aea:	d6 01       	movw	r26, r12
    3aec:	1c 96       	adiw	r26, 0x0c	; 12
    3aee:	ed 91       	ld	r30, X+
    3af0:	fc 91       	ld	r31, X
    3af2:	1d 97       	sbiw	r26, 0x0d	; 13
    3af4:	6a 81       	ldd	r22, Y+2	; 0x02
    3af6:	88 81       	ld	r24, Y
    3af8:	99 81       	ldd	r25, Y+1	; 0x01
    3afa:	19 95       	eicall
    3afc:	0c c0       	rjmp	.+24     	; 0x3b16 <_hal_led_task+0x6e>
    3afe:	8d 81       	ldd	r24, Y+5	; 0x05
    3b00:	88 23       	and	r24, r24
    3b02:	31 f0       	breq	.+12     	; 0x3b10 <_hal_led_task+0x68>
    3b04:	81 2f       	mov	r24, r17
    3b06:	a2 df       	rcall	.-188    	; 0x3a4c <_turn_on>
    3b08:	8d 81       	ldd	r24, Y+5	; 0x05
    3b0a:	81 50       	subi	r24, 0x01	; 1
    3b0c:	8d 83       	std	Y+5, r24	; 0x05
    3b0e:	03 c0       	rjmp	.+6      	; 0x3b16 <_hal_led_task+0x6e>
    3b10:	0c 83       	std	Y+4, r16	; 0x04
    3b12:	81 2f       	mov	r24, r17
    3b14:	6d df       	rcall	.-294    	; 0x39f0 <_turn_off>
    3b16:	1f 5f       	subi	r17, 0xFF	; 255
    3b18:	26 96       	adiw	r28, 0x06	; 6
    3b1a:	14 30       	cpi	r17, 0x04	; 4
    3b1c:	79 f6       	brne	.-98     	; 0x3abc <_hal_led_task+0x14>
    3b1e:	65 e0       	ldi	r22, 0x05	; 5
    3b20:	70 e0       	ldi	r23, 0x00	; 0
    3b22:	80 e0       	ldi	r24, 0x00	; 0
    3b24:	90 e0       	ldi	r25, 0x00	; 0
    3b26:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <vTaskDelay>
    3b2a:	c5 cf       	rjmp	.-118    	; 0x3ab6 <_hal_led_task+0xe>

00003b2c <led_create>:
    3b2c:	cf 92       	push	r12
    3b2e:	df 92       	push	r13
    3b30:	ef 92       	push	r14
    3b32:	ff 92       	push	r15
    3b34:	0f 93       	push	r16
    3b36:	1f 93       	push	r17
    3b38:	cf 93       	push	r28
    3b3a:	df 93       	push	r29
    3b3c:	06 2f       	mov	r16, r22
    3b3e:	0f 2e       	mov	r0, r31
    3b40:	f7 ee       	ldi	r31, 0xE7	; 231
    3b42:	ef 2e       	mov	r14, r31
    3b44:	f4 e1       	ldi	r31, 0x14	; 20
    3b46:	ff 2e       	mov	r15, r31
    3b48:	f0 2d       	mov	r31, r0
    3b4a:	d7 01       	movw	r26, r14
    3b4c:	18 96       	adiw	r26, 0x08	; 8
    3b4e:	ed 91       	ld	r30, X+
    3b50:	fc 91       	ld	r31, X
    3b52:	19 97       	sbiw	r26, 0x09	; 9
    3b54:	66 e0       	ldi	r22, 0x06	; 6
    3b56:	87 e2       	ldi	r24, 0x27	; 39
    3b58:	90 e0       	ldi	r25, 0x00	; 0
    3b5a:	19 95       	eicall
    3b5c:	c7 e5       	ldi	r28, 0x57	; 87
    3b5e:	d4 e1       	ldi	r29, 0x14	; 20
    3b60:	0f 2e       	mov	r0, r31
    3b62:	f8 e2       	ldi	r31, 0x28	; 40
    3b64:	cf 2e       	mov	r12, r31
    3b66:	d1 2c       	mov	r13, r1
    3b68:	f0 2d       	mov	r31, r0
    3b6a:	d9 82       	std	Y+1, r13	; 0x01
    3b6c:	c8 82       	st	Y, r12
    3b6e:	86 e0       	ldi	r24, 0x06	; 6
    3b70:	8a 83       	std	Y+2, r24	; 0x02
    3b72:	1b 82       	std	Y+3, r1	; 0x03
    3b74:	14 e0       	ldi	r17, 0x04	; 4
    3b76:	1c 83       	std	Y+4, r17	; 0x04
    3b78:	80 e0       	ldi	r24, 0x00	; 0
    3b7a:	3a df       	rcall	.-396    	; 0x39f0 <_turn_off>
    3b7c:	d7 01       	movw	r26, r14
    3b7e:	18 96       	adiw	r26, 0x08	; 8
    3b80:	ed 91       	ld	r30, X+
    3b82:	fc 91       	ld	r31, X
    3b84:	19 97       	sbiw	r26, 0x09	; 9
    3b86:	67 e0       	ldi	r22, 0x07	; 7
    3b88:	87 e2       	ldi	r24, 0x27	; 39
    3b8a:	90 e0       	ldi	r25, 0x00	; 0
    3b8c:	19 95       	eicall
    3b8e:	df 82       	std	Y+7, r13	; 0x07
    3b90:	ce 82       	std	Y+6, r12	; 0x06
    3b92:	87 e0       	ldi	r24, 0x07	; 7
    3b94:	88 87       	std	Y+8, r24	; 0x08
    3b96:	19 86       	std	Y+9, r1	; 0x09
    3b98:	1a 87       	std	Y+10, r17	; 0x0a
    3b9a:	81 e0       	ldi	r24, 0x01	; 1
    3b9c:	29 df       	rcall	.-430    	; 0x39f0 <_turn_off>
    3b9e:	d7 01       	movw	r26, r14
    3ba0:	18 96       	adiw	r26, 0x08	; 8
    3ba2:	ed 91       	ld	r30, X+
    3ba4:	fc 91       	ld	r31, X
    3ba6:	19 97       	sbiw	r26, 0x09	; 9
    3ba8:	65 e0       	ldi	r22, 0x05	; 5
    3baa:	83 e3       	ldi	r24, 0x33	; 51
    3bac:	90 e0       	ldi	r25, 0x00	; 0
    3bae:	19 95       	eicall
    3bb0:	d7 01       	movw	r26, r14
    3bb2:	18 96       	adiw	r26, 0x08	; 8
    3bb4:	ed 91       	ld	r30, X+
    3bb6:	fc 91       	ld	r31, X
    3bb8:	19 97       	sbiw	r26, 0x09	; 9
    3bba:	61 e0       	ldi	r22, 0x01	; 1
    3bbc:	84 e3       	ldi	r24, 0x34	; 52
    3bbe:	90 e0       	ldi	r25, 0x00	; 0
    3bc0:	19 95       	eicall
    3bc2:	84 e3       	ldi	r24, 0x34	; 52
    3bc4:	90 e0       	ldi	r25, 0x00	; 0
    3bc6:	9d 87       	std	Y+13, r25	; 0x0d
    3bc8:	8c 87       	std	Y+12, r24	; 0x0c
    3bca:	85 e0       	ldi	r24, 0x05	; 5
    3bcc:	8e 87       	std	Y+14, r24	; 0x0e
    3bce:	1f 86       	std	Y+15, r1	; 0x0f
    3bd0:	18 8b       	std	Y+16, r17	; 0x10
    3bd2:	82 e0       	ldi	r24, 0x02	; 2
    3bd4:	0d df       	rcall	.-486    	; 0x39f0 <_turn_off>
    3bd6:	d7 01       	movw	r26, r14
    3bd8:	18 96       	adiw	r26, 0x08	; 8
    3bda:	ed 91       	ld	r30, X+
    3bdc:	fc 91       	ld	r31, X
    3bde:	19 97       	sbiw	r26, 0x09	; 9
    3be0:	64 e0       	ldi	r22, 0x04	; 4
    3be2:	81 e0       	ldi	r24, 0x01	; 1
    3be4:	91 e0       	ldi	r25, 0x01	; 1
    3be6:	19 95       	eicall
    3be8:	d7 01       	movw	r26, r14
    3bea:	18 96       	adiw	r26, 0x08	; 8
    3bec:	ed 91       	ld	r30, X+
    3bee:	fc 91       	ld	r31, X
    3bf0:	19 97       	sbiw	r26, 0x09	; 9
    3bf2:	61 e0       	ldi	r22, 0x01	; 1
    3bf4:	82 e0       	ldi	r24, 0x02	; 2
    3bf6:	91 e0       	ldi	r25, 0x01	; 1
    3bf8:	19 95       	eicall
    3bfa:	82 e0       	ldi	r24, 0x02	; 2
    3bfc:	91 e0       	ldi	r25, 0x01	; 1
    3bfe:	9b 8b       	std	Y+19, r25	; 0x13
    3c00:	8a 8b       	std	Y+18, r24	; 0x12
    3c02:	1c 8b       	std	Y+20, r17	; 0x14
    3c04:	1d 8a       	std	Y+21, r1	; 0x15
    3c06:	1e 8b       	std	Y+22, r17	; 0x16
    3c08:	83 e0       	ldi	r24, 0x03	; 3
    3c0a:	f2 de       	rcall	.-540    	; 0x39f0 <_turn_off>
    3c0c:	e1 2c       	mov	r14, r1
    3c0e:	f1 2c       	mov	r15, r1
    3c10:	20 e0       	ldi	r18, 0x00	; 0
    3c12:	30 e0       	ldi	r19, 0x00	; 0
    3c14:	40 ec       	ldi	r20, 0xC0	; 192
    3c16:	50 e0       	ldi	r21, 0x00	; 0
    3c18:	63 eb       	ldi	r22, 0xB3	; 179
    3c1a:	73 e0       	ldi	r23, 0x03	; 3
    3c1c:	84 e5       	ldi	r24, 0x54	; 84
    3c1e:	9d e1       	ldi	r25, 0x1D	; 29
    3c20:	0e 94 1a 12 	call	0x2434	; 0x2434 <xTaskCreate>
    3c24:	df 91       	pop	r29
    3c26:	cf 91       	pop	r28
    3c28:	1f 91       	pop	r17
    3c2a:	0f 91       	pop	r16
    3c2c:	ff 90       	pop	r15
    3c2e:	ef 90       	pop	r14
    3c30:	df 90       	pop	r13
    3c32:	cf 90       	pop	r12
    3c34:	08 95       	ret

00003c36 <_serial_call_back>:
    3c36:	0f 93       	push	r16
    3c38:	1f 93       	push	r17
    3c3a:	cf 93       	push	r28
    3c3c:	df 93       	push	r29
    3c3e:	1f 92       	push	r1
    3c40:	1f 92       	push	r1
    3c42:	cd b7       	in	r28, 0x3d	; 61
    3c44:	de b7       	in	r29, 0x3e	; 62
    3c46:	8c 01       	movw	r16, r24
    3c48:	19 82       	std	Y+1, r1	; 0x01
    3c4a:	2d c0       	rjmp	.+90     	; 0x3ca6 <_serial_call_back+0x70>
    3c4c:	e0 91 6f 14 	lds	r30, 0x146F	; 0x80146f <rec_buf_inp.2947>
    3c50:	ec 32       	cpi	r30, 0x2C	; 44
    3c52:	50 f4       	brcc	.+20     	; 0x3c68 <_serial_call_back+0x32>
    3c54:	81 e0       	ldi	r24, 0x01	; 1
    3c56:	8e 0f       	add	r24, r30
    3c58:	80 93 6f 14 	sts	0x146F, r24	; 0x80146f <rec_buf_inp.2947>
    3c5c:	f0 e0       	ldi	r31, 0x00	; 0
    3c5e:	ea 58       	subi	r30, 0x8A	; 138
    3c60:	fb 4e       	sbci	r31, 0xEB	; 235
    3c62:	8a 81       	ldd	r24, Y+2	; 0x02
    3c64:	80 83       	st	Z, r24
    3c66:	02 c0       	rjmp	.+4      	; 0x3c6c <_serial_call_back+0x36>
    3c68:	10 92 6f 14 	sts	0x146F, r1	; 0x80146f <rec_buf_inp.2947>
    3c6c:	8a 81       	ldd	r24, Y+2	; 0x02
    3c6e:	8a 30       	cpi	r24, 0x0A	; 10
    3c70:	d1 f4       	brne	.+52     	; 0x3ca6 <_serial_call_back+0x70>
    3c72:	40 91 6f 14 	lds	r20, 0x146F	; 0x80146f <rec_buf_inp.2947>
    3c76:	50 e0       	ldi	r21, 0x00	; 0
    3c78:	fa 01       	movw	r30, r20
    3c7a:	ec 58       	subi	r30, 0x8C	; 140
    3c7c:	fb 4e       	sbci	r31, 0xEB	; 235
    3c7e:	10 82       	st	Z, r1
    3c80:	41 50       	subi	r20, 0x01	; 1
    3c82:	51 09       	sbc	r21, r1
    3c84:	9e 01       	movw	r18, r28
    3c86:	2f 5f       	subi	r18, 0xFF	; 255
    3c88:	3f 4f       	sbci	r19, 0xFF	; 255
    3c8a:	66 e7       	ldi	r22, 0x76	; 118
    3c8c:	74 e1       	ldi	r23, 0x14	; 20
    3c8e:	80 91 72 14 	lds	r24, 0x1472	; 0x801472 <_serial_reply_buffer_handle>
    3c92:	90 91 73 14 	lds	r25, 0x1473	; 0x801473 <_serial_reply_buffer_handle+0x1>
    3c96:	0e 94 3b 11 	call	0x2276	; 0x2276 <xStreamBufferSendFromISR>
    3c9a:	89 81       	ldd	r24, Y+1	; 0x01
    3c9c:	81 11       	cpse	r24, r1
    3c9e:	0e 94 45 0b 	call	0x168a	; 0x168a <vPortYield>
    3ca2:	10 92 6f 14 	sts	0x146F, r1	; 0x80146f <rec_buf_inp.2947>
    3ca6:	be 01       	movw	r22, r28
    3ca8:	6e 5f       	subi	r22, 0xFE	; 254
    3caa:	7f 4f       	sbci	r23, 0xFF	; 255
    3cac:	c8 01       	movw	r24, r16
    3cae:	90 d2       	rcall	.+1312   	; 0x41d0 <serial_get_byte>
    3cb0:	88 23       	and	r24, r24
    3cb2:	61 f2       	breq	.-104    	; 0x3c4c <_serial_call_back+0x16>
    3cb4:	0f 90       	pop	r0
    3cb6:	0f 90       	pop	r0
    3cb8:	df 91       	pop	r29
    3cba:	cf 91       	pop	r28
    3cbc:	1f 91       	pop	r17
    3cbe:	0f 91       	pop	r16
    3cc0:	08 95       	ret

00003cc2 <lora_driver_create>:
    3cc2:	8f 92       	push	r8
    3cc4:	9f 92       	push	r9
    3cc6:	af 92       	push	r10
    3cc8:	cf 92       	push	r12
    3cca:	ef 92       	push	r14
    3ccc:	0f 93       	push	r16
    3cce:	1f 93       	push	r17
    3cd0:	cf 93       	push	r28
    3cd2:	c8 2f       	mov	r28, r24
    3cd4:	8b 01       	movw	r16, r22
    3cd6:	41 e0       	ldi	r20, 0x01	; 1
    3cd8:	60 e0       	ldi	r22, 0x00	; 0
    3cda:	70 e0       	ldi	r23, 0x00	; 0
    3cdc:	88 ec       	ldi	r24, 0xC8	; 200
    3cde:	90 e0       	ldi	r25, 0x00	; 0
    3ce0:	0e 94 54 10 	call	0x20a8	; 0x20a8 <xStreamBufferGenericCreate>
    3ce4:	90 93 73 14 	sts	0x1473, r25	; 0x801473 <_serial_reply_buffer_handle+0x1>
    3ce8:	80 93 72 14 	sts	0x1472, r24	; 0x801472 <_serial_reply_buffer_handle>
    3cec:	10 93 71 14 	sts	0x1471, r17	; 0x801471 <_downlinkMessageBuffer+0x1>
    3cf0:	00 93 70 14 	sts	0x1470, r16	; 0x801470 <_downlinkMessageBuffer>
    3cf4:	0f 2e       	mov	r0, r31
    3cf6:	fb e1       	ldi	r31, 0x1B	; 27
    3cf8:	8f 2e       	mov	r8, r31
    3cfa:	fe e1       	ldi	r31, 0x1E	; 30
    3cfc:	9f 2e       	mov	r9, r31
    3cfe:	f0 2d       	mov	r31, r0
    3d00:	68 94       	set
    3d02:	aa 24       	eor	r10, r10
    3d04:	a6 f8       	bld	r10, 6
    3d06:	68 94       	set
    3d08:	cc 24       	eor	r12, r12
    3d0a:	c6 f8       	bld	r12, 6
    3d0c:	e1 2c       	mov	r14, r1
    3d0e:	00 e0       	ldi	r16, 0x00	; 0
    3d10:	23 e0       	ldi	r18, 0x03	; 3
    3d12:	40 e0       	ldi	r20, 0x00	; 0
    3d14:	51 ee       	ldi	r21, 0xE1	; 225
    3d16:	60 e0       	ldi	r22, 0x00	; 0
    3d18:	70 e0       	ldi	r23, 0x00	; 0
    3d1a:	8c 2f       	mov	r24, r28
    3d1c:	4e d1       	rcall	.+668    	; 0x3fba <serial_new_instance>
    3d1e:	90 93 75 14 	sts	0x1475, r25	; 0x801475 <_rn2483_serial+0x1>
    3d22:	80 93 74 14 	sts	0x1474, r24	; 0x801474 <_rn2483_serial>
    3d26:	e0 91 ef 14 	lds	r30, 0x14EF	; 0x8014ef <register_access+0x8>
    3d2a:	f0 91 f0 14 	lds	r31, 0x14F0	; 0x8014f0 <register_access+0x9>
    3d2e:	64 e0       	ldi	r22, 0x04	; 4
    3d30:	87 e0       	ldi	r24, 0x07	; 7
    3d32:	91 e0       	ldi	r25, 0x01	; 1
    3d34:	19 95       	eicall
    3d36:	cf 91       	pop	r28
    3d38:	1f 91       	pop	r17
    3d3a:	0f 91       	pop	r16
    3d3c:	ef 90       	pop	r14
    3d3e:	cf 90       	pop	r12
    3d40:	af 90       	pop	r10
    3d42:	9f 90       	pop	r9
    3d44:	8f 90       	pop	r8
    3d46:	08 95       	ret

00003d48 <reg_read_register>:
    3d48:	fc 01       	movw	r30, r24
    3d4a:	80 81       	ld	r24, Z
    3d4c:	08 95       	ret

00003d4e <reg_read_bit>:
    3d4e:	fc 01       	movw	r30, r24
    3d50:	20 81       	ld	r18, Z
    3d52:	81 e0       	ldi	r24, 0x01	; 1
    3d54:	90 e0       	ldi	r25, 0x00	; 0
    3d56:	02 c0       	rjmp	.+4      	; 0x3d5c <reg_read_bit+0xe>
    3d58:	88 0f       	add	r24, r24
    3d5a:	99 1f       	adc	r25, r25
    3d5c:	6a 95       	dec	r22
    3d5e:	e2 f7       	brpl	.-8      	; 0x3d58 <reg_read_bit+0xa>
    3d60:	82 23       	and	r24, r18
    3d62:	08 95       	ret

00003d64 <reg_read_bits>:
    3d64:	fc 01       	movw	r30, r24
    3d66:	80 81       	ld	r24, Z
    3d68:	86 23       	and	r24, r22
    3d6a:	08 95       	ret

00003d6c <reg_set_register>:
    3d6c:	fc 01       	movw	r30, r24
    3d6e:	60 83       	st	Z, r22
    3d70:	08 95       	ret

00003d72 <reg_clear_register>:
    3d72:	fc 01       	movw	r30, r24
    3d74:	10 82       	st	Z, r1
    3d76:	08 95       	ret

00003d78 <reg_set_bit>:
    3d78:	fc 01       	movw	r30, r24
    3d7a:	40 81       	ld	r20, Z
    3d7c:	21 e0       	ldi	r18, 0x01	; 1
    3d7e:	30 e0       	ldi	r19, 0x00	; 0
    3d80:	02 c0       	rjmp	.+4      	; 0x3d86 <reg_set_bit+0xe>
    3d82:	22 0f       	add	r18, r18
    3d84:	33 1f       	adc	r19, r19
    3d86:	6a 95       	dec	r22
    3d88:	e2 f7       	brpl	.-8      	; 0x3d82 <reg_set_bit+0xa>
    3d8a:	24 2b       	or	r18, r20
    3d8c:	20 83       	st	Z, r18
    3d8e:	08 95       	ret

00003d90 <reg_set_bits>:
    3d90:	fc 01       	movw	r30, r24
    3d92:	20 81       	ld	r18, Z
    3d94:	62 2b       	or	r22, r18
    3d96:	60 83       	st	Z, r22
    3d98:	08 95       	ret

00003d9a <reg_toggle_bit>:
    3d9a:	fc 01       	movw	r30, r24
    3d9c:	40 81       	ld	r20, Z
    3d9e:	21 e0       	ldi	r18, 0x01	; 1
    3da0:	30 e0       	ldi	r19, 0x00	; 0
    3da2:	02 c0       	rjmp	.+4      	; 0x3da8 <reg_toggle_bit+0xe>
    3da4:	22 0f       	add	r18, r18
    3da6:	33 1f       	adc	r19, r19
    3da8:	6a 95       	dec	r22
    3daa:	e2 f7       	brpl	.-8      	; 0x3da4 <reg_toggle_bit+0xa>
    3dac:	24 27       	eor	r18, r20
    3dae:	20 83       	st	Z, r18
    3db0:	08 95       	ret

00003db2 <reg_toggle_bits>:
    3db2:	fc 01       	movw	r30, r24
    3db4:	20 81       	ld	r18, Z
    3db6:	62 27       	eor	r22, r18
    3db8:	60 83       	st	Z, r22
    3dba:	08 95       	ret

00003dbc <reg_clear_bit>:
    3dbc:	fc 01       	movw	r30, r24
    3dbe:	90 81       	ld	r25, Z
    3dc0:	21 e0       	ldi	r18, 0x01	; 1
    3dc2:	30 e0       	ldi	r19, 0x00	; 0
    3dc4:	02 c0       	rjmp	.+4      	; 0x3dca <reg_clear_bit+0xe>
    3dc6:	22 0f       	add	r18, r18
    3dc8:	33 1f       	adc	r19, r19
    3dca:	6a 95       	dec	r22
    3dcc:	e2 f7       	brpl	.-8      	; 0x3dc6 <reg_clear_bit+0xa>
    3dce:	20 95       	com	r18
    3dd0:	29 23       	and	r18, r25
    3dd2:	20 83       	st	Z, r18
    3dd4:	08 95       	ret

00003dd6 <reg_clear_bits>:
    3dd6:	fc 01       	movw	r30, r24
    3dd8:	90 81       	ld	r25, Z
    3dda:	60 95       	com	r22
    3ddc:	69 23       	and	r22, r25
    3dde:	60 83       	st	Z, r22
    3de0:	08 95       	ret

00003de2 <_serial_call_back>:
    3de2:	80 91 a6 14 	lds	r24, 0x14A6	; 0x8014a6 <crc_sum.1941>
    3de6:	86 0f       	add	r24, r22
    3de8:	80 93 a6 14 	sts	0x14A6, r24	; 0x8014a6 <crc_sum.1941>
    3dec:	90 91 a9 14 	lds	r25, 0x14A9	; 0x8014a9 <_mh_state>
    3df0:	91 30       	cpi	r25, 0x01	; 1
    3df2:	79 f0       	breq	.+30     	; 0x3e12 <_serial_call_back+0x30>
    3df4:	28 f0       	brcs	.+10     	; 0x3e00 <_serial_call_back+0x1e>
    3df6:	92 30       	cpi	r25, 0x02	; 2
    3df8:	a9 f0       	breq	.+42     	; 0x3e24 <_serial_call_back+0x42>
    3dfa:	93 30       	cpi	r25, 0x03	; 3
    3dfc:	19 f1       	breq	.+70     	; 0x3e44 <_serial_call_back+0x62>
    3dfe:	08 95       	ret
    3e00:	6f 3f       	cpi	r22, 0xFF	; 255
    3e02:	09 f0       	breq	.+2      	; 0x3e06 <_serial_call_back+0x24>
    3e04:	48 c0       	rjmp	.+144    	; 0x3e96 <_serial_call_back+0xb4>
    3e06:	10 92 a6 14 	sts	0x14A6, r1	; 0x8014a6 <crc_sum.1941>
    3e0a:	81 e0       	ldi	r24, 0x01	; 1
    3e0c:	80 93 a9 14 	sts	0x14A9, r24	; 0x8014a9 <_mh_state>
    3e10:	08 95       	ret
    3e12:	66 38       	cpi	r22, 0x86	; 134
    3e14:	09 f0       	breq	.+2      	; 0x3e18 <_serial_call_back+0x36>
    3e16:	3f c0       	rjmp	.+126    	; 0x3e96 <_serial_call_back+0xb4>
    3e18:	10 92 a5 14 	sts	0x14A5, r1	; 0x8014a5 <inDex.1939>
    3e1c:	82 e0       	ldi	r24, 0x02	; 2
    3e1e:	80 93 a9 14 	sts	0x14A9, r24	; 0x8014a9 <_mh_state>
    3e22:	08 95       	ret
    3e24:	e0 91 a5 14 	lds	r30, 0x14A5	; 0x8014a5 <inDex.1939>
    3e28:	81 e0       	ldi	r24, 0x01	; 1
    3e2a:	8e 0f       	add	r24, r30
    3e2c:	80 93 a5 14 	sts	0x14A5, r24	; 0x8014a5 <inDex.1939>
    3e30:	f0 e0       	ldi	r31, 0x00	; 0
    3e32:	ed 55       	subi	r30, 0x5D	; 93
    3e34:	fb 4e       	sbci	r31, 0xEB	; 235
    3e36:	60 83       	st	Z, r22
    3e38:	82 30       	cpi	r24, 0x02	; 2
    3e3a:	69 f5       	brne	.+90     	; 0x3e96 <_serial_call_back+0xb4>
    3e3c:	83 e0       	ldi	r24, 0x03	; 3
    3e3e:	80 93 a9 14 	sts	0x14A9, r24	; 0x8014a9 <_mh_state>
    3e42:	08 95       	ret
    3e44:	90 91 a5 14 	lds	r25, 0x14A5	; 0x8014a5 <inDex.1939>
    3e48:	21 e0       	ldi	r18, 0x01	; 1
    3e4a:	29 0f       	add	r18, r25
    3e4c:	20 93 a5 14 	sts	0x14A5, r18	; 0x8014a5 <inDex.1939>
    3e50:	96 30       	cpi	r25, 0x06	; 6
    3e52:	09 f5       	brne	.+66     	; 0x3e96 <_serial_call_back+0xb4>
    3e54:	81 11       	cpse	r24, r1
    3e56:	0e c0       	rjmp	.+28     	; 0x3e74 <_serial_call_back+0x92>
    3e58:	e3 ea       	ldi	r30, 0xA3	; 163
    3e5a:	f4 e1       	ldi	r31, 0x14	; 20
    3e5c:	80 81       	ld	r24, Z
    3e5e:	90 e0       	ldi	r25, 0x00	; 0
    3e60:	98 2f       	mov	r25, r24
    3e62:	88 27       	eor	r24, r24
    3e64:	21 81       	ldd	r18, Z+1	; 0x01
    3e66:	82 0f       	add	r24, r18
    3e68:	91 1d       	adc	r25, r1
    3e6a:	90 93 ab 14 	sts	0x14AB, r25	; 0x8014ab <_ppm+0x1>
    3e6e:	80 93 aa 14 	sts	0x14AA, r24	; 0x8014aa <_ppm>
    3e72:	04 c0       	rjmp	.+8      	; 0x3e7c <_serial_call_back+0x9a>
    3e74:	10 92 ab 14 	sts	0x14AB, r1	; 0x8014ab <_ppm+0x1>
    3e78:	10 92 aa 14 	sts	0x14AA, r1	; 0x8014aa <_ppm>
    3e7c:	10 92 a9 14 	sts	0x14A9, r1	; 0x8014a9 <_mh_state>
    3e80:	e0 91 a7 14 	lds	r30, 0x14A7	; 0x8014a7 <_app_call_back>
    3e84:	f0 91 a8 14 	lds	r31, 0x14A8	; 0x8014a8 <_app_call_back+0x1>
    3e88:	30 97       	sbiw	r30, 0x00	; 0
    3e8a:	29 f0       	breq	.+10     	; 0x3e96 <_serial_call_back+0xb4>
    3e8c:	80 91 aa 14 	lds	r24, 0x14AA	; 0x8014aa <_ppm>
    3e90:	90 91 ab 14 	lds	r25, 0x14AB	; 0x8014ab <_ppm+0x1>
    3e94:	19 95       	eicall
    3e96:	08 95       	ret

00003e98 <mh_z19_create>:
    3e98:	8f 92       	push	r8
    3e9a:	9f 92       	push	r9
    3e9c:	af 92       	push	r10
    3e9e:	cf 92       	push	r12
    3ea0:	ef 92       	push	r14
    3ea2:	0f 93       	push	r16
    3ea4:	cf 93       	push	r28
    3ea6:	df 93       	push	r29
    3ea8:	eb 01       	movw	r28, r22
    3eaa:	0f 2e       	mov	r0, r31
    3eac:	f1 ef       	ldi	r31, 0xF1	; 241
    3eae:	8f 2e       	mov	r8, r31
    3eb0:	fe e1       	ldi	r31, 0x1E	; 30
    3eb2:	9f 2e       	mov	r9, r31
    3eb4:	f0 2d       	mov	r31, r0
    3eb6:	68 94       	set
    3eb8:	aa 24       	eor	r10, r10
    3eba:	a4 f8       	bld	r10, 4
    3ebc:	68 94       	set
    3ebe:	cc 24       	eor	r12, r12
    3ec0:	c4 f8       	bld	r12, 4
    3ec2:	e1 2c       	mov	r14, r1
    3ec4:	00 e0       	ldi	r16, 0x00	; 0
    3ec6:	23 e0       	ldi	r18, 0x03	; 3
    3ec8:	40 e8       	ldi	r20, 0x80	; 128
    3eca:	55 e2       	ldi	r21, 0x25	; 37
    3ecc:	60 e0       	ldi	r22, 0x00	; 0
    3ece:	70 e0       	ldi	r23, 0x00	; 0
    3ed0:	74 d0       	rcall	.+232    	; 0x3fba <serial_new_instance>
    3ed2:	90 93 ad 14 	sts	0x14AD, r25	; 0x8014ad <_serial+0x1>
    3ed6:	80 93 ac 14 	sts	0x14AC, r24	; 0x8014ac <_serial>
    3eda:	d0 93 a8 14 	sts	0x14A8, r29	; 0x8014a8 <_app_call_back+0x1>
    3ede:	c0 93 a7 14 	sts	0x14A7, r28	; 0x8014a7 <_app_call_back>
    3ee2:	df 91       	pop	r29
    3ee4:	cf 91       	pop	r28
    3ee6:	0f 91       	pop	r16
    3ee8:	ef 90       	pop	r14
    3eea:	cf 90       	pop	r12
    3eec:	af 90       	pop	r10
    3eee:	9f 90       	pop	r9
    3ef0:	8f 90       	pop	r8
    3ef2:	08 95       	ret

00003ef4 <mh_z19_take_meassuring>:
    3ef4:	cf 93       	push	r28
    3ef6:	df 93       	push	r29
    3ef8:	cd b7       	in	r28, 0x3d	; 61
    3efa:	de b7       	in	r29, 0x3e	; 62
    3efc:	29 97       	sbiw	r28, 0x09	; 9
    3efe:	0f b6       	in	r0, 0x3f	; 63
    3f00:	f8 94       	cli
    3f02:	de bf       	out	0x3e, r29	; 62
    3f04:	0f be       	out	0x3f, r0	; 63
    3f06:	cd bf       	out	0x3d, r28	; 61
    3f08:	89 e0       	ldi	r24, 0x09	; 9
    3f0a:	e5 e2       	ldi	r30, 0x25	; 37
    3f0c:	f2 e0       	ldi	r31, 0x02	; 2
    3f0e:	9e 01       	movw	r18, r28
    3f10:	2f 5f       	subi	r18, 0xFF	; 255
    3f12:	3f 4f       	sbci	r19, 0xFF	; 255
    3f14:	d9 01       	movw	r26, r18
    3f16:	01 90       	ld	r0, Z+
    3f18:	0d 92       	st	X+, r0
    3f1a:	8a 95       	dec	r24
    3f1c:	e1 f7       	brne	.-8      	; 0x3f16 <mh_z19_take_meassuring+0x22>
    3f1e:	10 92 ab 14 	sts	0x14AB, r1	; 0x8014ab <_ppm+0x1>
    3f22:	10 92 aa 14 	sts	0x14AA, r1	; 0x8014aa <_ppm>
    3f26:	80 91 ac 14 	lds	r24, 0x14AC	; 0x8014ac <_serial>
    3f2a:	90 91 ad 14 	lds	r25, 0x14AD	; 0x8014ad <_serial+0x1>
    3f2e:	00 97       	sbiw	r24, 0x00	; 0
    3f30:	31 f0       	breq	.+12     	; 0x3f3e <mh_z19_take_meassuring+0x4a>
    3f32:	42 2f       	mov	r20, r18
    3f34:	53 2f       	mov	r21, r19
    3f36:	69 e0       	ldi	r22, 0x09	; 9
    3f38:	fb d0       	rcall	.+502    	; 0x4130 <serial_send_bytes>
    3f3a:	80 e0       	ldi	r24, 0x00	; 0
    3f3c:	01 c0       	rjmp	.+2      	; 0x3f40 <mh_z19_take_meassuring+0x4c>
    3f3e:	82 e0       	ldi	r24, 0x02	; 2
    3f40:	29 96       	adiw	r28, 0x09	; 9
    3f42:	0f b6       	in	r0, 0x3f	; 63
    3f44:	f8 94       	cli
    3f46:	de bf       	out	0x3e, r29	; 62
    3f48:	0f be       	out	0x3f, r0	; 63
    3f4a:	cd bf       	out	0x3d, r28	; 61
    3f4c:	df 91       	pop	r29
    3f4e:	cf 91       	pop	r28
    3f50:	08 95       	ret

00003f52 <rcServoSet>:
    3f52:	65 36       	cpi	r22, 0x65	; 101
    3f54:	0c f0       	brlt	.+2      	; 0x3f58 <rcServoSet+0x6>
    3f56:	64 e6       	ldi	r22, 0x64	; 100
    3f58:	6c 39       	cpi	r22, 0x9C	; 156
    3f5a:	0c f4       	brge	.+2      	; 0x3f5e <rcServoSet+0xc>
    3f5c:	6c e9       	ldi	r22, 0x9C	; 156
    3f5e:	96 ef       	ldi	r25, 0xF6	; 246
    3f60:	69 02       	muls	r22, r25
    3f62:	b0 01       	movw	r22, r0
    3f64:	11 24       	eor	r1, r1
    3f66:	68 54       	subi	r22, 0x48	; 72
    3f68:	74 4f       	sbci	r23, 0xF4	; 244
    3f6a:	81 11       	cpse	r24, r1
    3f6c:	05 c0       	rjmp	.+10     	; 0x3f78 <rcServoSet+0x26>
    3f6e:	70 93 29 01 	sts	0x0129, r23	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
    3f72:	60 93 28 01 	sts	0x0128, r22	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
    3f76:	08 95       	ret
    3f78:	70 93 2b 01 	sts	0x012B, r23	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
    3f7c:	60 93 2a 01 	sts	0x012A, r22	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
    3f80:	08 95       	ret

00003f82 <rcServoCreate>:
    3f82:	ea e0       	ldi	r30, 0x0A	; 10
    3f84:	f1 e0       	ldi	r31, 0x01	; 1
    3f86:	80 81       	ld	r24, Z
    3f88:	88 61       	ori	r24, 0x18	; 24
    3f8a:	80 83       	st	Z, r24
    3f8c:	8f e3       	ldi	r24, 0x3F	; 63
    3f8e:	9c e9       	ldi	r25, 0x9C	; 156
    3f90:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__TEXT_REGION_LENGTH__+0x700127>
    3f94:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__TEXT_REGION_LENGTH__+0x700126>
    3f98:	60 e0       	ldi	r22, 0x00	; 0
    3f9a:	80 e0       	ldi	r24, 0x00	; 0
    3f9c:	da df       	rcall	.-76     	; 0x3f52 <rcServoSet>
    3f9e:	60 e0       	ldi	r22, 0x00	; 0
    3fa0:	81 e0       	ldi	r24, 0x01	; 1
    3fa2:	d7 df       	rcall	.-82     	; 0x3f52 <rcServoSet>
    3fa4:	e0 e2       	ldi	r30, 0x20	; 32
    3fa6:	f1 e0       	ldi	r31, 0x01	; 1
    3fa8:	80 81       	ld	r24, Z
    3faa:	82 6a       	ori	r24, 0xA2	; 162
    3fac:	80 83       	st	Z, r24
    3fae:	e1 e2       	ldi	r30, 0x21	; 33
    3fb0:	f1 e0       	ldi	r31, 0x01	; 1
    3fb2:	80 81       	ld	r24, Z
    3fb4:	8a 61       	ori	r24, 0x1A	; 26
    3fb6:	80 83       	st	Z, r24
    3fb8:	08 95       	ret

00003fba <serial_new_instance>:
    3fba:	2f 92       	push	r2
    3fbc:	3f 92       	push	r3
    3fbe:	4f 92       	push	r4
    3fc0:	5f 92       	push	r5
    3fc2:	6f 92       	push	r6
    3fc4:	7f 92       	push	r7
    3fc6:	8f 92       	push	r8
    3fc8:	9f 92       	push	r9
    3fca:	af 92       	push	r10
    3fcc:	cf 92       	push	r12
    3fce:	ef 92       	push	r14
    3fd0:	ff 92       	push	r15
    3fd2:	0f 93       	push	r16
    3fd4:	1f 93       	push	r17
    3fd6:	cf 93       	push	r28
    3fd8:	df 93       	push	r29
    3fda:	cd b7       	in	r28, 0x3d	; 61
    3fdc:	de b7       	in	r29, 0x3e	; 62
    3fde:	f8 2e       	mov	r15, r24
    3fe0:	2a 01       	movw	r4, r20
    3fe2:	3b 01       	movw	r6, r22
    3fe4:	88 e0       	ldi	r24, 0x08	; 8
    3fe6:	90 e0       	ldi	r25, 0x00	; 0
    3fe8:	c2 d7       	rcall	.+3972   	; 0x4f6e <malloc>
    3fea:	8c 01       	movw	r16, r24
    3fec:	8f 2d       	mov	r24, r15
    3fee:	90 e0       	ldi	r25, 0x00	; 0
    3ff0:	88 0f       	add	r24, r24
    3ff2:	99 1f       	adc	r25, r25
    3ff4:	fc 01       	movw	r30, r24
    3ff6:	e2 55       	subi	r30, 0x52	; 82
    3ff8:	fb 4e       	sbci	r31, 0xEB	; 235
    3ffa:	11 83       	std	Z+1, r17	; 0x01
    3ffc:	00 83       	st	Z, r16
    3ffe:	fc 01       	movw	r30, r24
    4000:	e2 5f       	subi	r30, 0xF2	; 242
    4002:	fd 4f       	sbci	r31, 0xFD	; 253
    4004:	80 81       	ld	r24, Z
    4006:	91 81       	ldd	r25, Z+1	; 0x01
    4008:	d8 01       	movw	r26, r16
    400a:	8d 93       	st	X+, r24
    400c:	9c 93       	st	X, r25
    400e:	6c 2d       	mov	r22, r12
    4010:	70 e0       	ldi	r23, 0x00	; 0
    4012:	84 e0       	ldi	r24, 0x04	; 4
    4014:	90 e0       	ldi	r25, 0x00	; 0
    4016:	91 d7       	rcall	.+3874   	; 0x4f3a <calloc>
    4018:	1c 01       	movw	r2, r24
    401a:	61 e0       	ldi	r22, 0x01	; 1
    401c:	70 e0       	ldi	r23, 0x00	; 0
    401e:	86 e0       	ldi	r24, 0x06	; 6
    4020:	90 e0       	ldi	r25, 0x00	; 0
    4022:	8b d7       	rcall	.+3862   	; 0x4f3a <calloc>
    4024:	7c 01       	movw	r14, r24
    4026:	4c 2d       	mov	r20, r12
    4028:	b1 01       	movw	r22, r2
    402a:	2b d5       	rcall	.+2646   	; 0x4a82 <fifo_init>
    402c:	f8 01       	movw	r30, r16
    402e:	f5 82       	std	Z+5, r15	; 0x05
    4030:	e4 82       	std	Z+4, r14	; 0x04
    4032:	6a 2d       	mov	r22, r10
    4034:	70 e0       	ldi	r23, 0x00	; 0
    4036:	84 e0       	ldi	r24, 0x04	; 4
    4038:	90 e0       	ldi	r25, 0x00	; 0
    403a:	7f d7       	rcall	.+3838   	; 0x4f3a <calloc>
    403c:	1c 01       	movw	r2, r24
    403e:	61 e0       	ldi	r22, 0x01	; 1
    4040:	70 e0       	ldi	r23, 0x00	; 0
    4042:	86 e0       	ldi	r24, 0x06	; 6
    4044:	90 e0       	ldi	r25, 0x00	; 0
    4046:	79 d7       	rcall	.+3826   	; 0x4f3a <calloc>
    4048:	7c 01       	movw	r14, r24
    404a:	4a 2d       	mov	r20, r10
    404c:	b1 01       	movw	r22, r2
    404e:	19 d5       	rcall	.+2610   	; 0x4a82 <fifo_init>
    4050:	d8 01       	movw	r26, r16
    4052:	13 96       	adiw	r26, 0x03	; 3
    4054:	fc 92       	st	X, r15
    4056:	ee 92       	st	-X, r14
    4058:	12 97       	sbiw	r26, 0x02	; 2
    405a:	17 96       	adiw	r26, 0x07	; 7
    405c:	9c 92       	st	X, r9
    405e:	8e 92       	st	-X, r8
    4060:	16 97       	sbiw	r26, 0x06	; 6
    4062:	ff b6       	in	r15, 0x3f	; 63
    4064:	f8 94       	cli
    4066:	ed 91       	ld	r30, X+
    4068:	fc 91       	ld	r31, X
    406a:	11 97       	sbiw	r26, 0x01	; 1
    406c:	36 97       	sbiw	r30, 0x06	; 6
    406e:	80 81       	ld	r24, Z
    4070:	82 60       	ori	r24, 0x02	; 2
    4072:	80 83       	st	Z, r24
    4074:	8d 90       	ld	r8, X+
    4076:	9c 90       	ld	r9, X
    4078:	c3 01       	movw	r24, r6
    407a:	b2 01       	movw	r22, r4
    407c:	1c d6       	rcall	.+3128   	; 0x4cb6 <__floatunsisf>
    407e:	20 e0       	ldi	r18, 0x00	; 0
    4080:	30 e0       	ldi	r19, 0x00	; 0
    4082:	40 e0       	ldi	r20, 0x00	; 0
    4084:	51 e4       	ldi	r21, 0x41	; 65
    4086:	a5 d6       	rcall	.+3402   	; 0x4dd2 <__mulsf3>
    4088:	9b 01       	movw	r18, r22
    408a:	ac 01       	movw	r20, r24
    408c:	60 e0       	ldi	r22, 0x00	; 0
    408e:	74 e2       	ldi	r23, 0x24	; 36
    4090:	84 e7       	ldi	r24, 0x74	; 116
    4092:	9b e4       	ldi	r25, 0x4B	; 75
    4094:	77 d5       	rcall	.+2798   	; 0x4b84 <__divsf3>
    4096:	20 e0       	ldi	r18, 0x00	; 0
    4098:	30 e0       	ldi	r19, 0x00	; 0
    409a:	40 e8       	ldi	r20, 0x80	; 128
    409c:	5f e3       	ldi	r21, 0x3F	; 63
    409e:	0d d5       	rcall	.+2586   	; 0x4aba <__subsf3>
    40a0:	de d5       	rcall	.+3004   	; 0x4c5e <__fixunssfsi>
    40a2:	f4 01       	movw	r30, r8
    40a4:	32 97       	sbiw	r30, 0x02	; 2
    40a6:	60 83       	st	Z, r22
    40a8:	d8 01       	movw	r26, r16
    40aa:	ed 91       	ld	r30, X+
    40ac:	fc 91       	ld	r31, X
    40ae:	11 97       	sbiw	r26, 0x01	; 1
    40b0:	35 97       	sbiw	r30, 0x05	; 5
    40b2:	88 e9       	ldi	r24, 0x98	; 152
    40b4:	80 83       	st	Z, r24
    40b6:	ed 91       	ld	r30, X+
    40b8:	fc 91       	ld	r31, X
    40ba:	34 97       	sbiw	r30, 0x04	; 4
    40bc:	86 e0       	ldi	r24, 0x06	; 6
    40be:	80 83       	st	Z, r24
    40c0:	ff be       	out	0x3f, r15	; 63
    40c2:	c8 01       	movw	r24, r16
    40c4:	df 91       	pop	r29
    40c6:	cf 91       	pop	r28
    40c8:	1f 91       	pop	r17
    40ca:	0f 91       	pop	r16
    40cc:	ff 90       	pop	r15
    40ce:	ef 90       	pop	r14
    40d0:	cf 90       	pop	r12
    40d2:	af 90       	pop	r10
    40d4:	9f 90       	pop	r9
    40d6:	8f 90       	pop	r8
    40d8:	7f 90       	pop	r7
    40da:	6f 90       	pop	r6
    40dc:	5f 90       	pop	r5
    40de:	4f 90       	pop	r4
    40e0:	3f 90       	pop	r3
    40e2:	2f 90       	pop	r2
    40e4:	08 95       	ret

000040e6 <serial_send_byte>:
    40e6:	cf 93       	push	r28
    40e8:	df 93       	push	r29
    40ea:	ec 01       	movw	r28, r24
    40ec:	ea 81       	ldd	r30, Y+2	; 0x02
    40ee:	fb 81       	ldd	r31, Y+3	; 0x03
    40f0:	93 81       	ldd	r25, Z+3	; 0x03
    40f2:	82 81       	ldd	r24, Z+2	; 0x02
    40f4:	25 81       	ldd	r18, Z+5	; 0x05
    40f6:	98 1b       	sub	r25, r24
    40f8:	92 23       	and	r25, r18
    40fa:	84 81       	ldd	r24, Z+4	; 0x04
    40fc:	98 17       	cp	r25, r24
    40fe:	a1 f0       	breq	.+40     	; 0x4128 <serial_send_byte+0x42>
    4100:	93 81       	ldd	r25, Z+3	; 0x03
    4102:	26 95       	lsr	r18
    4104:	29 23       	and	r18, r25
    4106:	a0 81       	ld	r26, Z
    4108:	b1 81       	ldd	r27, Z+1	; 0x01
    410a:	a2 0f       	add	r26, r18
    410c:	b1 1d       	adc	r27, r1
    410e:	6c 93       	st	X, r22
    4110:	9f 5f       	subi	r25, 0xFF	; 255
    4112:	25 81       	ldd	r18, Z+5	; 0x05
    4114:	92 23       	and	r25, r18
    4116:	93 83       	std	Z+3, r25	; 0x03
    4118:	e8 81       	ld	r30, Y
    411a:	f9 81       	ldd	r31, Y+1	; 0x01
    411c:	35 97       	sbiw	r30, 0x05	; 5
    411e:	80 81       	ld	r24, Z
    4120:	80 62       	ori	r24, 0x20	; 32
    4122:	80 83       	st	Z, r24
    4124:	80 e0       	ldi	r24, 0x00	; 0
    4126:	01 c0       	rjmp	.+2      	; 0x412a <serial_send_byte+0x44>
    4128:	82 e0       	ldi	r24, 0x02	; 2
    412a:	df 91       	pop	r29
    412c:	cf 91       	pop	r28
    412e:	08 95       	ret

00004130 <serial_send_bytes>:
    4130:	ef 92       	push	r14
    4132:	ff 92       	push	r15
    4134:	0f 93       	push	r16
    4136:	1f 93       	push	r17
    4138:	cf 93       	push	r28
    413a:	df 93       	push	r29
    413c:	7c 01       	movw	r14, r24
    413e:	dc 01       	movw	r26, r24
    4140:	12 96       	adiw	r26, 0x02	; 2
    4142:	ed 91       	ld	r30, X+
    4144:	fc 91       	ld	r31, X
    4146:	13 97       	sbiw	r26, 0x03	; 3
    4148:	93 81       	ldd	r25, Z+3	; 0x03
    414a:	82 81       	ldd	r24, Z+2	; 0x02
    414c:	98 1b       	sub	r25, r24
    414e:	85 81       	ldd	r24, Z+5	; 0x05
    4150:	98 23       	and	r25, r24
    4152:	84 81       	ldd	r24, Z+4	; 0x04
    4154:	89 1b       	sub	r24, r25
    4156:	86 17       	cp	r24, r22
    4158:	98 f1       	brcs	.+102    	; 0x41c0 <serial_send_bytes+0x90>
    415a:	66 23       	and	r22, r22
    415c:	41 f1       	breq	.+80     	; 0x41ae <serial_send_bytes+0x7e>
    415e:	84 2f       	mov	r24, r20
    4160:	95 2f       	mov	r25, r21
    4162:	dc 01       	movw	r26, r24
    4164:	61 50       	subi	r22, 0x01	; 1
    4166:	46 2f       	mov	r20, r22
    4168:	50 e0       	ldi	r21, 0x00	; 0
    416a:	4f 5f       	subi	r20, 0xFF	; 255
    416c:	5f 4f       	sbci	r21, 0xFF	; 255
    416e:	48 0f       	add	r20, r24
    4170:	59 1f       	adc	r21, r25
    4172:	e7 01       	movw	r28, r14
    4174:	ea 81       	ldd	r30, Y+2	; 0x02
    4176:	fb 81       	ldd	r31, Y+3	; 0x03
    4178:	93 81       	ldd	r25, Z+3	; 0x03
    417a:	82 81       	ldd	r24, Z+2	; 0x02
    417c:	25 81       	ldd	r18, Z+5	; 0x05
    417e:	98 1b       	sub	r25, r24
    4180:	92 23       	and	r25, r18
    4182:	84 81       	ldd	r24, Z+4	; 0x04
    4184:	98 17       	cp	r25, r24
    4186:	79 f0       	breq	.+30     	; 0x41a6 <serial_send_bytes+0x76>
    4188:	8c 91       	ld	r24, X
    418a:	93 81       	ldd	r25, Z+3	; 0x03
    418c:	26 95       	lsr	r18
    418e:	29 23       	and	r18, r25
    4190:	60 81       	ld	r22, Z
    4192:	71 81       	ldd	r23, Z+1	; 0x01
    4194:	8b 01       	movw	r16, r22
    4196:	02 0f       	add	r16, r18
    4198:	11 1d       	adc	r17, r1
    419a:	e8 01       	movw	r28, r16
    419c:	88 83       	st	Y, r24
    419e:	9f 5f       	subi	r25, 0xFF	; 255
    41a0:	85 81       	ldd	r24, Z+5	; 0x05
    41a2:	98 23       	and	r25, r24
    41a4:	93 83       	std	Z+3, r25	; 0x03
    41a6:	11 96       	adiw	r26, 0x01	; 1
    41a8:	a4 17       	cp	r26, r20
    41aa:	b5 07       	cpc	r27, r21
    41ac:	11 f7       	brne	.-60     	; 0x4172 <serial_send_bytes+0x42>
    41ae:	d7 01       	movw	r26, r14
    41b0:	ed 91       	ld	r30, X+
    41b2:	fc 91       	ld	r31, X
    41b4:	35 97       	sbiw	r30, 0x05	; 5
    41b6:	80 81       	ld	r24, Z
    41b8:	80 62       	ori	r24, 0x20	; 32
    41ba:	80 83       	st	Z, r24
    41bc:	80 e0       	ldi	r24, 0x00	; 0
    41be:	01 c0       	rjmp	.+2      	; 0x41c2 <serial_send_bytes+0x92>
    41c0:	82 e0       	ldi	r24, 0x02	; 2
    41c2:	df 91       	pop	r29
    41c4:	cf 91       	pop	r28
    41c6:	1f 91       	pop	r17
    41c8:	0f 91       	pop	r16
    41ca:	ff 90       	pop	r15
    41cc:	ef 90       	pop	r14
    41ce:	08 95       	ret

000041d0 <serial_get_byte>:
    41d0:	dc 01       	movw	r26, r24
    41d2:	14 96       	adiw	r26, 0x04	; 4
    41d4:	ed 91       	ld	r30, X+
    41d6:	fc 91       	ld	r31, X
    41d8:	15 97       	sbiw	r26, 0x05	; 5
    41da:	93 81       	ldd	r25, Z+3	; 0x03
    41dc:	82 81       	ldd	r24, Z+2	; 0x02
    41de:	98 17       	cp	r25, r24
    41e0:	89 f0       	breq	.+34     	; 0x4204 <serial_get_byte+0x34>
    41e2:	92 81       	ldd	r25, Z+2	; 0x02
    41e4:	85 81       	ldd	r24, Z+5	; 0x05
    41e6:	86 95       	lsr	r24
    41e8:	89 23       	and	r24, r25
    41ea:	a0 81       	ld	r26, Z
    41ec:	b1 81       	ldd	r27, Z+1	; 0x01
    41ee:	a8 0f       	add	r26, r24
    41f0:	b1 1d       	adc	r27, r1
    41f2:	8c 91       	ld	r24, X
    41f4:	db 01       	movw	r26, r22
    41f6:	8c 93       	st	X, r24
    41f8:	9f 5f       	subi	r25, 0xFF	; 255
    41fa:	85 81       	ldd	r24, Z+5	; 0x05
    41fc:	98 23       	and	r25, r24
    41fe:	92 83       	std	Z+2, r25	; 0x02
    4200:	80 e0       	ldi	r24, 0x00	; 0
    4202:	08 95       	ret
    4204:	83 e0       	ldi	r24, 0x03	; 3
    4206:	08 95       	ret

00004208 <__vector_25>:
    4208:	1f 92       	push	r1
    420a:	0f 92       	push	r0
    420c:	0f b6       	in	r0, 0x3f	; 63
    420e:	0f 92       	push	r0
    4210:	11 24       	eor	r1, r1
    4212:	0b b6       	in	r0, 0x3b	; 59
    4214:	0f 92       	push	r0
    4216:	2f 93       	push	r18
    4218:	3f 93       	push	r19
    421a:	4f 93       	push	r20
    421c:	5f 93       	push	r21
    421e:	6f 93       	push	r22
    4220:	7f 93       	push	r23
    4222:	8f 93       	push	r24
    4224:	9f 93       	push	r25
    4226:	af 93       	push	r26
    4228:	bf 93       	push	r27
    422a:	cf 93       	push	r28
    422c:	df 93       	push	r29
    422e:	ef 93       	push	r30
    4230:	ff 93       	push	r31
    4232:	a0 91 ae 14 	lds	r26, 0x14AE	; 0x8014ae <_ser_handle>
    4236:	b0 91 af 14 	lds	r27, 0x14AF	; 0x8014af <_ser_handle+0x1>
    423a:	10 97       	sbiw	r26, 0x00	; 0
    423c:	11 f1       	breq	.+68     	; 0x4282 <__vector_25+0x7a>
    423e:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    4242:	14 96       	adiw	r26, 0x04	; 4
    4244:	ed 91       	ld	r30, X+
    4246:	fc 91       	ld	r31, X
    4248:	15 97       	sbiw	r26, 0x05	; 5
    424a:	93 81       	ldd	r25, Z+3	; 0x03
    424c:	82 81       	ldd	r24, Z+2	; 0x02
    424e:	25 81       	ldd	r18, Z+5	; 0x05
    4250:	98 1b       	sub	r25, r24
    4252:	92 23       	and	r25, r18
    4254:	84 81       	ldd	r24, Z+4	; 0x04
    4256:	98 17       	cp	r25, r24
    4258:	61 f0       	breq	.+24     	; 0x4272 <__vector_25+0x6a>
    425a:	83 81       	ldd	r24, Z+3	; 0x03
    425c:	26 95       	lsr	r18
    425e:	28 23       	and	r18, r24
    4260:	c0 81       	ld	r28, Z
    4262:	d1 81       	ldd	r29, Z+1	; 0x01
    4264:	c2 0f       	add	r28, r18
    4266:	d1 1d       	adc	r29, r1
    4268:	68 83       	st	Y, r22
    426a:	8f 5f       	subi	r24, 0xFF	; 255
    426c:	95 81       	ldd	r25, Z+5	; 0x05
    426e:	89 23       	and	r24, r25
    4270:	83 83       	std	Z+3, r24	; 0x03
    4272:	16 96       	adiw	r26, 0x06	; 6
    4274:	ed 91       	ld	r30, X+
    4276:	fc 91       	ld	r31, X
    4278:	17 97       	sbiw	r26, 0x07	; 7
    427a:	30 97       	sbiw	r30, 0x00	; 0
    427c:	11 f0       	breq	.+4      	; 0x4282 <__vector_25+0x7a>
    427e:	cd 01       	movw	r24, r26
    4280:	19 95       	eicall
    4282:	ff 91       	pop	r31
    4284:	ef 91       	pop	r30
    4286:	df 91       	pop	r29
    4288:	cf 91       	pop	r28
    428a:	bf 91       	pop	r27
    428c:	af 91       	pop	r26
    428e:	9f 91       	pop	r25
    4290:	8f 91       	pop	r24
    4292:	7f 91       	pop	r23
    4294:	6f 91       	pop	r22
    4296:	5f 91       	pop	r21
    4298:	4f 91       	pop	r20
    429a:	3f 91       	pop	r19
    429c:	2f 91       	pop	r18
    429e:	0f 90       	pop	r0
    42a0:	0b be       	out	0x3b, r0	; 59
    42a2:	0f 90       	pop	r0
    42a4:	0f be       	out	0x3f, r0	; 63
    42a6:	0f 90       	pop	r0
    42a8:	1f 90       	pop	r1
    42aa:	18 95       	reti

000042ac <__vector_26>:
    42ac:	1f 92       	push	r1
    42ae:	0f 92       	push	r0
    42b0:	0f b6       	in	r0, 0x3f	; 63
    42b2:	0f 92       	push	r0
    42b4:	11 24       	eor	r1, r1
    42b6:	0b b6       	in	r0, 0x3b	; 59
    42b8:	0f 92       	push	r0
    42ba:	2f 93       	push	r18
    42bc:	8f 93       	push	r24
    42be:	9f 93       	push	r25
    42c0:	af 93       	push	r26
    42c2:	bf 93       	push	r27
    42c4:	ef 93       	push	r30
    42c6:	ff 93       	push	r31
    42c8:	e0 91 ae 14 	lds	r30, 0x14AE	; 0x8014ae <_ser_handle>
    42cc:	f0 91 af 14 	lds	r31, 0x14AF	; 0x8014af <_ser_handle+0x1>
    42d0:	30 97       	sbiw	r30, 0x00	; 0
    42d2:	b9 f0       	breq	.+46     	; 0x4302 <__vector_26+0x56>
    42d4:	02 80       	ldd	r0, Z+2	; 0x02
    42d6:	f3 81       	ldd	r31, Z+3	; 0x03
    42d8:	e0 2d       	mov	r30, r0
    42da:	93 81       	ldd	r25, Z+3	; 0x03
    42dc:	82 81       	ldd	r24, Z+2	; 0x02
    42de:	98 17       	cp	r25, r24
    42e0:	b1 f0       	breq	.+44     	; 0x430e <__vector_26+0x62>
    42e2:	92 81       	ldd	r25, Z+2	; 0x02
    42e4:	85 81       	ldd	r24, Z+5	; 0x05
    42e6:	28 2f       	mov	r18, r24
    42e8:	26 95       	lsr	r18
    42ea:	29 23       	and	r18, r25
    42ec:	a0 81       	ld	r26, Z
    42ee:	b1 81       	ldd	r27, Z+1	; 0x01
    42f0:	a2 0f       	add	r26, r18
    42f2:	b1 1d       	adc	r27, r1
    42f4:	2c 91       	ld	r18, X
    42f6:	9f 5f       	subi	r25, 0xFF	; 255
    42f8:	89 23       	and	r24, r25
    42fa:	82 83       	std	Z+2, r24	; 0x02
    42fc:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    4300:	0b c0       	rjmp	.+22     	; 0x4318 <__vector_26+0x6c>
    4302:	e1 ec       	ldi	r30, 0xC1	; 193
    4304:	f0 e0       	ldi	r31, 0x00	; 0
    4306:	80 81       	ld	r24, Z
    4308:	8f 7d       	andi	r24, 0xDF	; 223
    430a:	80 83       	st	Z, r24
    430c:	05 c0       	rjmp	.+10     	; 0x4318 <__vector_26+0x6c>
    430e:	e1 ec       	ldi	r30, 0xC1	; 193
    4310:	f0 e0       	ldi	r31, 0x00	; 0
    4312:	80 81       	ld	r24, Z
    4314:	8f 7d       	andi	r24, 0xDF	; 223
    4316:	80 83       	st	Z, r24
    4318:	ff 91       	pop	r31
    431a:	ef 91       	pop	r30
    431c:	bf 91       	pop	r27
    431e:	af 91       	pop	r26
    4320:	9f 91       	pop	r25
    4322:	8f 91       	pop	r24
    4324:	2f 91       	pop	r18
    4326:	0f 90       	pop	r0
    4328:	0b be       	out	0x3b, r0	; 59
    432a:	0f 90       	pop	r0
    432c:	0f be       	out	0x3f, r0	; 63
    432e:	0f 90       	pop	r0
    4330:	1f 90       	pop	r1
    4332:	18 95       	reti

00004334 <__vector_36>:
    4334:	1f 92       	push	r1
    4336:	0f 92       	push	r0
    4338:	0f b6       	in	r0, 0x3f	; 63
    433a:	0f 92       	push	r0
    433c:	11 24       	eor	r1, r1
    433e:	0b b6       	in	r0, 0x3b	; 59
    4340:	0f 92       	push	r0
    4342:	2f 93       	push	r18
    4344:	3f 93       	push	r19
    4346:	4f 93       	push	r20
    4348:	5f 93       	push	r21
    434a:	6f 93       	push	r22
    434c:	7f 93       	push	r23
    434e:	8f 93       	push	r24
    4350:	9f 93       	push	r25
    4352:	af 93       	push	r26
    4354:	bf 93       	push	r27
    4356:	cf 93       	push	r28
    4358:	df 93       	push	r29
    435a:	ef 93       	push	r30
    435c:	ff 93       	push	r31
    435e:	a0 91 b0 14 	lds	r26, 0x14B0	; 0x8014b0 <_ser_handle+0x2>
    4362:	b0 91 b1 14 	lds	r27, 0x14B1	; 0x8014b1 <_ser_handle+0x3>
    4366:	10 97       	sbiw	r26, 0x00	; 0
    4368:	11 f1       	breq	.+68     	; 0x43ae <__vector_36+0x7a>
    436a:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    436e:	14 96       	adiw	r26, 0x04	; 4
    4370:	ed 91       	ld	r30, X+
    4372:	fc 91       	ld	r31, X
    4374:	15 97       	sbiw	r26, 0x05	; 5
    4376:	93 81       	ldd	r25, Z+3	; 0x03
    4378:	82 81       	ldd	r24, Z+2	; 0x02
    437a:	25 81       	ldd	r18, Z+5	; 0x05
    437c:	98 1b       	sub	r25, r24
    437e:	92 23       	and	r25, r18
    4380:	84 81       	ldd	r24, Z+4	; 0x04
    4382:	98 17       	cp	r25, r24
    4384:	61 f0       	breq	.+24     	; 0x439e <__vector_36+0x6a>
    4386:	83 81       	ldd	r24, Z+3	; 0x03
    4388:	26 95       	lsr	r18
    438a:	28 23       	and	r18, r24
    438c:	c0 81       	ld	r28, Z
    438e:	d1 81       	ldd	r29, Z+1	; 0x01
    4390:	c2 0f       	add	r28, r18
    4392:	d1 1d       	adc	r29, r1
    4394:	68 83       	st	Y, r22
    4396:	8f 5f       	subi	r24, 0xFF	; 255
    4398:	95 81       	ldd	r25, Z+5	; 0x05
    439a:	89 23       	and	r24, r25
    439c:	83 83       	std	Z+3, r24	; 0x03
    439e:	16 96       	adiw	r26, 0x06	; 6
    43a0:	ed 91       	ld	r30, X+
    43a2:	fc 91       	ld	r31, X
    43a4:	17 97       	sbiw	r26, 0x07	; 7
    43a6:	30 97       	sbiw	r30, 0x00	; 0
    43a8:	11 f0       	breq	.+4      	; 0x43ae <__vector_36+0x7a>
    43aa:	cd 01       	movw	r24, r26
    43ac:	19 95       	eicall
    43ae:	ff 91       	pop	r31
    43b0:	ef 91       	pop	r30
    43b2:	df 91       	pop	r29
    43b4:	cf 91       	pop	r28
    43b6:	bf 91       	pop	r27
    43b8:	af 91       	pop	r26
    43ba:	9f 91       	pop	r25
    43bc:	8f 91       	pop	r24
    43be:	7f 91       	pop	r23
    43c0:	6f 91       	pop	r22
    43c2:	5f 91       	pop	r21
    43c4:	4f 91       	pop	r20
    43c6:	3f 91       	pop	r19
    43c8:	2f 91       	pop	r18
    43ca:	0f 90       	pop	r0
    43cc:	0b be       	out	0x3b, r0	; 59
    43ce:	0f 90       	pop	r0
    43d0:	0f be       	out	0x3f, r0	; 63
    43d2:	0f 90       	pop	r0
    43d4:	1f 90       	pop	r1
    43d6:	18 95       	reti

000043d8 <__vector_37>:
    43d8:	1f 92       	push	r1
    43da:	0f 92       	push	r0
    43dc:	0f b6       	in	r0, 0x3f	; 63
    43de:	0f 92       	push	r0
    43e0:	11 24       	eor	r1, r1
    43e2:	0b b6       	in	r0, 0x3b	; 59
    43e4:	0f 92       	push	r0
    43e6:	2f 93       	push	r18
    43e8:	8f 93       	push	r24
    43ea:	9f 93       	push	r25
    43ec:	af 93       	push	r26
    43ee:	bf 93       	push	r27
    43f0:	ef 93       	push	r30
    43f2:	ff 93       	push	r31
    43f4:	e0 91 b0 14 	lds	r30, 0x14B0	; 0x8014b0 <_ser_handle+0x2>
    43f8:	f0 91 b1 14 	lds	r31, 0x14B1	; 0x8014b1 <_ser_handle+0x3>
    43fc:	30 97       	sbiw	r30, 0x00	; 0
    43fe:	b9 f0       	breq	.+46     	; 0x442e <__vector_37+0x56>
    4400:	02 80       	ldd	r0, Z+2	; 0x02
    4402:	f3 81       	ldd	r31, Z+3	; 0x03
    4404:	e0 2d       	mov	r30, r0
    4406:	93 81       	ldd	r25, Z+3	; 0x03
    4408:	82 81       	ldd	r24, Z+2	; 0x02
    440a:	98 17       	cp	r25, r24
    440c:	b1 f0       	breq	.+44     	; 0x443a <__vector_37+0x62>
    440e:	92 81       	ldd	r25, Z+2	; 0x02
    4410:	85 81       	ldd	r24, Z+5	; 0x05
    4412:	28 2f       	mov	r18, r24
    4414:	26 95       	lsr	r18
    4416:	29 23       	and	r18, r25
    4418:	a0 81       	ld	r26, Z
    441a:	b1 81       	ldd	r27, Z+1	; 0x01
    441c:	a2 0f       	add	r26, r18
    441e:	b1 1d       	adc	r27, r1
    4420:	2c 91       	ld	r18, X
    4422:	9f 5f       	subi	r25, 0xFF	; 255
    4424:	89 23       	and	r24, r25
    4426:	82 83       	std	Z+2, r24	; 0x02
    4428:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    442c:	0b c0       	rjmp	.+22     	; 0x4444 <__vector_37+0x6c>
    442e:	e9 ec       	ldi	r30, 0xC9	; 201
    4430:	f0 e0       	ldi	r31, 0x00	; 0
    4432:	80 81       	ld	r24, Z
    4434:	8f 7d       	andi	r24, 0xDF	; 223
    4436:	80 83       	st	Z, r24
    4438:	05 c0       	rjmp	.+10     	; 0x4444 <__vector_37+0x6c>
    443a:	e9 ec       	ldi	r30, 0xC9	; 201
    443c:	f0 e0       	ldi	r31, 0x00	; 0
    443e:	80 81       	ld	r24, Z
    4440:	8f 7d       	andi	r24, 0xDF	; 223
    4442:	80 83       	st	Z, r24
    4444:	ff 91       	pop	r31
    4446:	ef 91       	pop	r30
    4448:	bf 91       	pop	r27
    444a:	af 91       	pop	r26
    444c:	9f 91       	pop	r25
    444e:	8f 91       	pop	r24
    4450:	2f 91       	pop	r18
    4452:	0f 90       	pop	r0
    4454:	0b be       	out	0x3b, r0	; 59
    4456:	0f 90       	pop	r0
    4458:	0f be       	out	0x3f, r0	; 63
    445a:	0f 90       	pop	r0
    445c:	1f 90       	pop	r1
    445e:	18 95       	reti

00004460 <__vector_51>:
    4460:	1f 92       	push	r1
    4462:	0f 92       	push	r0
    4464:	0f b6       	in	r0, 0x3f	; 63
    4466:	0f 92       	push	r0
    4468:	11 24       	eor	r1, r1
    446a:	0b b6       	in	r0, 0x3b	; 59
    446c:	0f 92       	push	r0
    446e:	2f 93       	push	r18
    4470:	3f 93       	push	r19
    4472:	4f 93       	push	r20
    4474:	5f 93       	push	r21
    4476:	6f 93       	push	r22
    4478:	7f 93       	push	r23
    447a:	8f 93       	push	r24
    447c:	9f 93       	push	r25
    447e:	af 93       	push	r26
    4480:	bf 93       	push	r27
    4482:	cf 93       	push	r28
    4484:	df 93       	push	r29
    4486:	ef 93       	push	r30
    4488:	ff 93       	push	r31
    448a:	a0 91 b2 14 	lds	r26, 0x14B2	; 0x8014b2 <_ser_handle+0x4>
    448e:	b0 91 b3 14 	lds	r27, 0x14B3	; 0x8014b3 <_ser_handle+0x5>
    4492:	10 97       	sbiw	r26, 0x00	; 0
    4494:	11 f1       	breq	.+68     	; 0x44da <__vector_51+0x7a>
    4496:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    449a:	14 96       	adiw	r26, 0x04	; 4
    449c:	ed 91       	ld	r30, X+
    449e:	fc 91       	ld	r31, X
    44a0:	15 97       	sbiw	r26, 0x05	; 5
    44a2:	93 81       	ldd	r25, Z+3	; 0x03
    44a4:	82 81       	ldd	r24, Z+2	; 0x02
    44a6:	25 81       	ldd	r18, Z+5	; 0x05
    44a8:	98 1b       	sub	r25, r24
    44aa:	92 23       	and	r25, r18
    44ac:	84 81       	ldd	r24, Z+4	; 0x04
    44ae:	98 17       	cp	r25, r24
    44b0:	61 f0       	breq	.+24     	; 0x44ca <__vector_51+0x6a>
    44b2:	83 81       	ldd	r24, Z+3	; 0x03
    44b4:	26 95       	lsr	r18
    44b6:	28 23       	and	r18, r24
    44b8:	c0 81       	ld	r28, Z
    44ba:	d1 81       	ldd	r29, Z+1	; 0x01
    44bc:	c2 0f       	add	r28, r18
    44be:	d1 1d       	adc	r29, r1
    44c0:	68 83       	st	Y, r22
    44c2:	8f 5f       	subi	r24, 0xFF	; 255
    44c4:	95 81       	ldd	r25, Z+5	; 0x05
    44c6:	89 23       	and	r24, r25
    44c8:	83 83       	std	Z+3, r24	; 0x03
    44ca:	16 96       	adiw	r26, 0x06	; 6
    44cc:	ed 91       	ld	r30, X+
    44ce:	fc 91       	ld	r31, X
    44d0:	17 97       	sbiw	r26, 0x07	; 7
    44d2:	30 97       	sbiw	r30, 0x00	; 0
    44d4:	11 f0       	breq	.+4      	; 0x44da <__vector_51+0x7a>
    44d6:	cd 01       	movw	r24, r26
    44d8:	19 95       	eicall
    44da:	ff 91       	pop	r31
    44dc:	ef 91       	pop	r30
    44de:	df 91       	pop	r29
    44e0:	cf 91       	pop	r28
    44e2:	bf 91       	pop	r27
    44e4:	af 91       	pop	r26
    44e6:	9f 91       	pop	r25
    44e8:	8f 91       	pop	r24
    44ea:	7f 91       	pop	r23
    44ec:	6f 91       	pop	r22
    44ee:	5f 91       	pop	r21
    44f0:	4f 91       	pop	r20
    44f2:	3f 91       	pop	r19
    44f4:	2f 91       	pop	r18
    44f6:	0f 90       	pop	r0
    44f8:	0b be       	out	0x3b, r0	; 59
    44fa:	0f 90       	pop	r0
    44fc:	0f be       	out	0x3f, r0	; 63
    44fe:	0f 90       	pop	r0
    4500:	1f 90       	pop	r1
    4502:	18 95       	reti

00004504 <__vector_52>:
    4504:	1f 92       	push	r1
    4506:	0f 92       	push	r0
    4508:	0f b6       	in	r0, 0x3f	; 63
    450a:	0f 92       	push	r0
    450c:	11 24       	eor	r1, r1
    450e:	0b b6       	in	r0, 0x3b	; 59
    4510:	0f 92       	push	r0
    4512:	2f 93       	push	r18
    4514:	8f 93       	push	r24
    4516:	9f 93       	push	r25
    4518:	af 93       	push	r26
    451a:	bf 93       	push	r27
    451c:	ef 93       	push	r30
    451e:	ff 93       	push	r31
    4520:	e0 91 b2 14 	lds	r30, 0x14B2	; 0x8014b2 <_ser_handle+0x4>
    4524:	f0 91 b3 14 	lds	r31, 0x14B3	; 0x8014b3 <_ser_handle+0x5>
    4528:	30 97       	sbiw	r30, 0x00	; 0
    452a:	b9 f0       	breq	.+46     	; 0x455a <__vector_52+0x56>
    452c:	02 80       	ldd	r0, Z+2	; 0x02
    452e:	f3 81       	ldd	r31, Z+3	; 0x03
    4530:	e0 2d       	mov	r30, r0
    4532:	93 81       	ldd	r25, Z+3	; 0x03
    4534:	82 81       	ldd	r24, Z+2	; 0x02
    4536:	98 17       	cp	r25, r24
    4538:	b1 f0       	breq	.+44     	; 0x4566 <__vector_52+0x62>
    453a:	92 81       	ldd	r25, Z+2	; 0x02
    453c:	85 81       	ldd	r24, Z+5	; 0x05
    453e:	28 2f       	mov	r18, r24
    4540:	26 95       	lsr	r18
    4542:	29 23       	and	r18, r25
    4544:	a0 81       	ld	r26, Z
    4546:	b1 81       	ldd	r27, Z+1	; 0x01
    4548:	a2 0f       	add	r26, r18
    454a:	b1 1d       	adc	r27, r1
    454c:	2c 91       	ld	r18, X
    454e:	9f 5f       	subi	r25, 0xFF	; 255
    4550:	89 23       	and	r24, r25
    4552:	82 83       	std	Z+2, r24	; 0x02
    4554:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    4558:	0b c0       	rjmp	.+22     	; 0x4570 <__vector_52+0x6c>
    455a:	e1 ed       	ldi	r30, 0xD1	; 209
    455c:	f0 e0       	ldi	r31, 0x00	; 0
    455e:	80 81       	ld	r24, Z
    4560:	8f 7d       	andi	r24, 0xDF	; 223
    4562:	80 83       	st	Z, r24
    4564:	05 c0       	rjmp	.+10     	; 0x4570 <__vector_52+0x6c>
    4566:	e1 ed       	ldi	r30, 0xD1	; 209
    4568:	f0 e0       	ldi	r31, 0x00	; 0
    456a:	80 81       	ld	r24, Z
    456c:	8f 7d       	andi	r24, 0xDF	; 223
    456e:	80 83       	st	Z, r24
    4570:	ff 91       	pop	r31
    4572:	ef 91       	pop	r30
    4574:	bf 91       	pop	r27
    4576:	af 91       	pop	r26
    4578:	9f 91       	pop	r25
    457a:	8f 91       	pop	r24
    457c:	2f 91       	pop	r18
    457e:	0f 90       	pop	r0
    4580:	0b be       	out	0x3b, r0	; 59
    4582:	0f 90       	pop	r0
    4584:	0f be       	out	0x3f, r0	; 63
    4586:	0f 90       	pop	r0
    4588:	1f 90       	pop	r1
    458a:	18 95       	reti

0000458c <__vector_54>:
    458c:	1f 92       	push	r1
    458e:	0f 92       	push	r0
    4590:	0f b6       	in	r0, 0x3f	; 63
    4592:	0f 92       	push	r0
    4594:	11 24       	eor	r1, r1
    4596:	0b b6       	in	r0, 0x3b	; 59
    4598:	0f 92       	push	r0
    459a:	2f 93       	push	r18
    459c:	3f 93       	push	r19
    459e:	4f 93       	push	r20
    45a0:	5f 93       	push	r21
    45a2:	6f 93       	push	r22
    45a4:	7f 93       	push	r23
    45a6:	8f 93       	push	r24
    45a8:	9f 93       	push	r25
    45aa:	af 93       	push	r26
    45ac:	bf 93       	push	r27
    45ae:	cf 93       	push	r28
    45b0:	df 93       	push	r29
    45b2:	ef 93       	push	r30
    45b4:	ff 93       	push	r31
    45b6:	a0 91 b4 14 	lds	r26, 0x14B4	; 0x8014b4 <_ser_handle+0x6>
    45ba:	b0 91 b5 14 	lds	r27, 0x14B5	; 0x8014b5 <_ser_handle+0x7>
    45be:	10 97       	sbiw	r26, 0x00	; 0
    45c0:	11 f1       	breq	.+68     	; 0x4606 <__vector_54+0x7a>
    45c2:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    45c6:	14 96       	adiw	r26, 0x04	; 4
    45c8:	ed 91       	ld	r30, X+
    45ca:	fc 91       	ld	r31, X
    45cc:	15 97       	sbiw	r26, 0x05	; 5
    45ce:	93 81       	ldd	r25, Z+3	; 0x03
    45d0:	82 81       	ldd	r24, Z+2	; 0x02
    45d2:	25 81       	ldd	r18, Z+5	; 0x05
    45d4:	98 1b       	sub	r25, r24
    45d6:	92 23       	and	r25, r18
    45d8:	84 81       	ldd	r24, Z+4	; 0x04
    45da:	98 17       	cp	r25, r24
    45dc:	61 f0       	breq	.+24     	; 0x45f6 <__vector_54+0x6a>
    45de:	83 81       	ldd	r24, Z+3	; 0x03
    45e0:	26 95       	lsr	r18
    45e2:	28 23       	and	r18, r24
    45e4:	c0 81       	ld	r28, Z
    45e6:	d1 81       	ldd	r29, Z+1	; 0x01
    45e8:	c2 0f       	add	r28, r18
    45ea:	d1 1d       	adc	r29, r1
    45ec:	68 83       	st	Y, r22
    45ee:	8f 5f       	subi	r24, 0xFF	; 255
    45f0:	95 81       	ldd	r25, Z+5	; 0x05
    45f2:	89 23       	and	r24, r25
    45f4:	83 83       	std	Z+3, r24	; 0x03
    45f6:	16 96       	adiw	r26, 0x06	; 6
    45f8:	ed 91       	ld	r30, X+
    45fa:	fc 91       	ld	r31, X
    45fc:	17 97       	sbiw	r26, 0x07	; 7
    45fe:	30 97       	sbiw	r30, 0x00	; 0
    4600:	11 f0       	breq	.+4      	; 0x4606 <__vector_54+0x7a>
    4602:	cd 01       	movw	r24, r26
    4604:	19 95       	eicall
    4606:	ff 91       	pop	r31
    4608:	ef 91       	pop	r30
    460a:	df 91       	pop	r29
    460c:	cf 91       	pop	r28
    460e:	bf 91       	pop	r27
    4610:	af 91       	pop	r26
    4612:	9f 91       	pop	r25
    4614:	8f 91       	pop	r24
    4616:	7f 91       	pop	r23
    4618:	6f 91       	pop	r22
    461a:	5f 91       	pop	r21
    461c:	4f 91       	pop	r20
    461e:	3f 91       	pop	r19
    4620:	2f 91       	pop	r18
    4622:	0f 90       	pop	r0
    4624:	0b be       	out	0x3b, r0	; 59
    4626:	0f 90       	pop	r0
    4628:	0f be       	out	0x3f, r0	; 63
    462a:	0f 90       	pop	r0
    462c:	1f 90       	pop	r1
    462e:	18 95       	reti

00004630 <__vector_55>:
    4630:	1f 92       	push	r1
    4632:	0f 92       	push	r0
    4634:	0f b6       	in	r0, 0x3f	; 63
    4636:	0f 92       	push	r0
    4638:	11 24       	eor	r1, r1
    463a:	0b b6       	in	r0, 0x3b	; 59
    463c:	0f 92       	push	r0
    463e:	2f 93       	push	r18
    4640:	8f 93       	push	r24
    4642:	9f 93       	push	r25
    4644:	af 93       	push	r26
    4646:	bf 93       	push	r27
    4648:	ef 93       	push	r30
    464a:	ff 93       	push	r31
    464c:	e0 91 b4 14 	lds	r30, 0x14B4	; 0x8014b4 <_ser_handle+0x6>
    4650:	f0 91 b5 14 	lds	r31, 0x14B5	; 0x8014b5 <_ser_handle+0x7>
    4654:	30 97       	sbiw	r30, 0x00	; 0
    4656:	b9 f0       	breq	.+46     	; 0x4686 <__vector_55+0x56>
    4658:	02 80       	ldd	r0, Z+2	; 0x02
    465a:	f3 81       	ldd	r31, Z+3	; 0x03
    465c:	e0 2d       	mov	r30, r0
    465e:	93 81       	ldd	r25, Z+3	; 0x03
    4660:	82 81       	ldd	r24, Z+2	; 0x02
    4662:	98 17       	cp	r25, r24
    4664:	b1 f0       	breq	.+44     	; 0x4692 <__vector_55+0x62>
    4666:	92 81       	ldd	r25, Z+2	; 0x02
    4668:	85 81       	ldd	r24, Z+5	; 0x05
    466a:	28 2f       	mov	r18, r24
    466c:	26 95       	lsr	r18
    466e:	29 23       	and	r18, r25
    4670:	a0 81       	ld	r26, Z
    4672:	b1 81       	ldd	r27, Z+1	; 0x01
    4674:	a2 0f       	add	r26, r18
    4676:	b1 1d       	adc	r27, r1
    4678:	2c 91       	ld	r18, X
    467a:	9f 5f       	subi	r25, 0xFF	; 255
    467c:	89 23       	and	r24, r25
    467e:	82 83       	std	Z+2, r24	; 0x02
    4680:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    4684:	0b c0       	rjmp	.+22     	; 0x469c <__vector_55+0x6c>
    4686:	e1 e3       	ldi	r30, 0x31	; 49
    4688:	f1 e0       	ldi	r31, 0x01	; 1
    468a:	80 81       	ld	r24, Z
    468c:	8f 7d       	andi	r24, 0xDF	; 223
    468e:	80 83       	st	Z, r24
    4690:	05 c0       	rjmp	.+10     	; 0x469c <__vector_55+0x6c>
    4692:	e1 e3       	ldi	r30, 0x31	; 49
    4694:	f1 e0       	ldi	r31, 0x01	; 1
    4696:	80 81       	ld	r24, Z
    4698:	8f 7d       	andi	r24, 0xDF	; 223
    469a:	80 83       	st	Z, r24
    469c:	ff 91       	pop	r31
    469e:	ef 91       	pop	r30
    46a0:	bf 91       	pop	r27
    46a2:	af 91       	pop	r26
    46a4:	9f 91       	pop	r25
    46a6:	8f 91       	pop	r24
    46a8:	2f 91       	pop	r18
    46aa:	0f 90       	pop	r0
    46ac:	0b be       	out	0x3b, r0	; 59
    46ae:	0f 90       	pop	r0
    46b0:	0f be       	out	0x3f, r0	; 63
    46b2:	0f 90       	pop	r0
    46b4:	1f 90       	pop	r1
    46b6:	18 95       	reti

000046b8 <usart_getchar>:
    46b8:	cf 93       	push	r28
    46ba:	df 93       	push	r29
    46bc:	1f 92       	push	r1
    46be:	cd b7       	in	r28, 0x3d	; 61
    46c0:	de b7       	in	r29, 0x3e	; 62
    46c2:	be 01       	movw	r22, r28
    46c4:	6f 5f       	subi	r22, 0xFF	; 255
    46c6:	7f 4f       	sbci	r23, 0xFF	; 255
    46c8:	80 91 b6 14 	lds	r24, 0x14B6	; 0x8014b6 <_com_serial_instance>
    46cc:	90 91 b7 14 	lds	r25, 0x14B7	; 0x8014b7 <_com_serial_instance+0x1>
    46d0:	7f dd       	rcall	.-1282   	; 0x41d0 <serial_get_byte>
    46d2:	81 11       	cpse	r24, r1
    46d4:	f6 cf       	rjmp	.-20     	; 0x46c2 <usart_getchar+0xa>
    46d6:	89 81       	ldd	r24, Y+1	; 0x01
    46d8:	90 e0       	ldi	r25, 0x00	; 0
    46da:	0f 90       	pop	r0
    46dc:	df 91       	pop	r29
    46de:	cf 91       	pop	r28
    46e0:	08 95       	ret

000046e2 <usart_putchar>:
    46e2:	68 2f       	mov	r22, r24
    46e4:	80 91 b6 14 	lds	r24, 0x14B6	; 0x8014b6 <_com_serial_instance>
    46e8:	90 91 b7 14 	lds	r25, 0x14B7	; 0x8014b7 <_com_serial_instance+0x1>
    46ec:	fc dc       	rcall	.-1544   	; 0x40e6 <serial_send_byte>
    46ee:	80 e0       	ldi	r24, 0x00	; 0
    46f0:	90 e0       	ldi	r25, 0x00	; 0
    46f2:	08 95       	ret

000046f4 <stdioCreate>:
    46f4:	8f 92       	push	r8
    46f6:	9f 92       	push	r9
    46f8:	af 92       	push	r10
    46fa:	cf 92       	push	r12
    46fc:	ef 92       	push	r14
    46fe:	0f 93       	push	r16
    4700:	81 2c       	mov	r8, r1
    4702:	91 2c       	mov	r9, r1
    4704:	68 94       	set
    4706:	aa 24       	eor	r10, r10
    4708:	a7 f8       	bld	r10, 7
    470a:	68 94       	set
    470c:	cc 24       	eor	r12, r12
    470e:	c7 f8       	bld	r12, 7
    4710:	e1 2c       	mov	r14, r1
    4712:	00 e0       	ldi	r16, 0x00	; 0
    4714:	23 e0       	ldi	r18, 0x03	; 3
    4716:	40 e0       	ldi	r20, 0x00	; 0
    4718:	51 ee       	ldi	r21, 0xE1	; 225
    471a:	60 e0       	ldi	r22, 0x00	; 0
    471c:	70 e0       	ldi	r23, 0x00	; 0
    471e:	4d dc       	rcall	.-1894   	; 0x3fba <serial_new_instance>
    4720:	90 93 b7 14 	sts	0x14B7, r25	; 0x8014b7 <_com_serial_instance+0x1>
    4724:	80 93 b6 14 	sts	0x14B6, r24	; 0x8014b6 <_com_serial_instance>
    4728:	e1 e0       	ldi	r30, 0x01	; 1
    472a:	f5 e1       	ldi	r31, 0x15	; 21
    472c:	86 e1       	ldi	r24, 0x16	; 22
    472e:	92 e0       	ldi	r25, 0x02	; 2
    4730:	91 83       	std	Z+1, r25	; 0x01
    4732:	80 83       	st	Z, r24
    4734:	93 83       	std	Z+3, r25	; 0x03
    4736:	82 83       	std	Z+2, r24	; 0x02
    4738:	0f 91       	pop	r16
    473a:	ef 90       	pop	r14
    473c:	cf 90       	pop	r12
    473e:	af 90       	pop	r10
    4740:	9f 90       	pop	r9
    4742:	8f 90       	pop	r8
    4744:	08 95       	ret

00004746 <_initTwiInterface>:
    4746:	80 91 c6 14 	lds	r24, 0x14C6	; 0x8014c6 <_twiIsInitiated>
    474a:	81 11       	cpse	r24, r1
    474c:	0c c0       	rjmp	.+24     	; 0x4766 <_initTwiInterface+0x20>
    474e:	8c e0       	ldi	r24, 0x0C	; 12
    4750:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    4754:	8f ef       	ldi	r24, 0xFF	; 255
    4756:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    475a:	84 e0       	ldi	r24, 0x04	; 4
    475c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4760:	81 e0       	ldi	r24, 0x01	; 1
    4762:	80 93 c6 14 	sts	0x14C6, r24	; 0x8014c6 <_twiIsInitiated>
    4766:	08 95       	ret

00004768 <twiCreate>:
    4768:	af 92       	push	r10
    476a:	bf 92       	push	r11
    476c:	cf 92       	push	r12
    476e:	df 92       	push	r13
    4770:	ef 92       	push	r14
    4772:	ff 92       	push	r15
    4774:	0f 93       	push	r16
    4776:	1f 93       	push	r17
    4778:	cf 93       	push	r28
    477a:	df 93       	push	r29
    477c:	a8 2e       	mov	r10, r24
    477e:	b6 2e       	mov	r11, r22
    4780:	69 01       	movw	r12, r18
    4782:	7a 01       	movw	r14, r20
    4784:	84 e0       	ldi	r24, 0x04	; 4
    4786:	90 e0       	ldi	r25, 0x00	; 0
    4788:	f2 d3       	rcall	.+2020   	; 0x4f6e <malloc>
    478a:	ec 01       	movw	r28, r24
    478c:	89 2b       	or	r24, r25
    478e:	61 f1       	breq	.+88     	; 0x47e8 <twiCreate+0x80>
    4790:	a8 82       	st	Y, r10
    4792:	81 e0       	ldi	r24, 0x01	; 1
    4794:	b8 12       	cpse	r11, r24
    4796:	12 c0       	rjmp	.+36     	; 0x47bc <twiCreate+0x54>
    4798:	c7 01       	movw	r24, r14
    479a:	b6 01       	movw	r22, r12
    479c:	20 ea       	ldi	r18, 0xA0	; 160
    479e:	36 e8       	ldi	r19, 0x86	; 134
    47a0:	41 e0       	ldi	r20, 0x01	; 1
    47a2:	50 e0       	ldi	r21, 0x00	; 0
    47a4:	8c d3       	rcall	.+1816   	; 0x4ebe <__udivmodsi4>
    47a6:	da 01       	movw	r26, r20
    47a8:	c9 01       	movw	r24, r18
    47aa:	40 97       	sbiw	r24, 0x10	; 16
    47ac:	a1 09       	sbc	r26, r1
    47ae:	b1 09       	sbc	r27, r1
    47b0:	b6 95       	lsr	r27
    47b2:	a7 95       	ror	r26
    47b4:	97 95       	ror	r25
    47b6:	87 95       	ror	r24
    47b8:	89 83       	std	Y+1, r24	; 0x01
    47ba:	11 c0       	rjmp	.+34     	; 0x47de <twiCreate+0x76>
    47bc:	c7 01       	movw	r24, r14
    47be:	b6 01       	movw	r22, r12
    47c0:	20 e8       	ldi	r18, 0x80	; 128
    47c2:	3a e1       	ldi	r19, 0x1A	; 26
    47c4:	46 e0       	ldi	r20, 0x06	; 6
    47c6:	50 e0       	ldi	r21, 0x00	; 0
    47c8:	7a d3       	rcall	.+1780   	; 0x4ebe <__udivmodsi4>
    47ca:	da 01       	movw	r26, r20
    47cc:	c9 01       	movw	r24, r18
    47ce:	40 97       	sbiw	r24, 0x10	; 16
    47d0:	a1 09       	sbc	r26, r1
    47d2:	b1 09       	sbc	r27, r1
    47d4:	b6 95       	lsr	r27
    47d6:	a7 95       	ror	r26
    47d8:	97 95       	ror	r25
    47da:	87 95       	ror	r24
    47dc:	89 83       	std	Y+1, r24	; 0x01
    47de:	1b 83       	std	Y+3, r17	; 0x03
    47e0:	0a 83       	std	Y+2, r16	; 0x02
    47e2:	8c 2f       	mov	r24, r28
    47e4:	9d 2f       	mov	r25, r29
    47e6:	02 c0       	rjmp	.+4      	; 0x47ec <twiCreate+0x84>
    47e8:	80 e0       	ldi	r24, 0x00	; 0
    47ea:	90 e0       	ldi	r25, 0x00	; 0
    47ec:	df 91       	pop	r29
    47ee:	cf 91       	pop	r28
    47f0:	1f 91       	pop	r17
    47f2:	0f 91       	pop	r16
    47f4:	ff 90       	pop	r15
    47f6:	ef 90       	pop	r14
    47f8:	df 90       	pop	r13
    47fa:	cf 90       	pop	r12
    47fc:	bf 90       	pop	r11
    47fe:	af 90       	pop	r10
    4800:	08 95       	ret

00004802 <twiIsBusy>:
    4802:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4806:	81 70       	andi	r24, 0x01	; 1
    4808:	08 95       	ret

0000480a <twiTransmit>:
    480a:	ff 92       	push	r15
    480c:	0f 93       	push	r16
    480e:	1f 93       	push	r17
    4810:	cf 93       	push	r28
    4812:	df 93       	push	r29
    4814:	00 97       	sbiw	r24, 0x00	; 0
    4816:	d1 f1       	breq	.+116    	; 0x488c <twiTransmit+0x82>
    4818:	4a 30       	cpi	r20, 0x0A	; 10
    481a:	d0 f5       	brcc	.+116    	; 0x4890 <twiTransmit+0x86>
    481c:	f4 2e       	mov	r15, r20
    481e:	8b 01       	movw	r16, r22
    4820:	ec 01       	movw	r28, r24
    4822:	ef df       	rcall	.-34     	; 0x4802 <twiIsBusy>
    4824:	81 11       	cpse	r24, r1
    4826:	36 c0       	rjmp	.+108    	; 0x4894 <twiTransmit+0x8a>
    4828:	80 91 b9 14 	lds	r24, 0x14B9	; 0x8014b9 <_twiCurrentHandler>
    482c:	90 91 ba 14 	lds	r25, 0x14BA	; 0x8014ba <_twiCurrentHandler+0x1>
    4830:	c8 17       	cp	r28, r24
    4832:	d9 07       	cpc	r29, r25
    4834:	41 f0       	breq	.+16     	; 0x4846 <twiTransmit+0x3c>
    4836:	87 df       	rcall	.-242    	; 0x4746 <_initTwiInterface>
    4838:	89 81       	ldd	r24, Y+1	; 0x01
    483a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    483e:	d0 93 ba 14 	sts	0x14BA, r29	; 0x8014ba <_twiCurrentHandler+0x1>
    4842:	c0 93 b9 14 	sts	0x14B9, r28	; 0x8014b9 <_twiCurrentHandler>
    4846:	81 e0       	ldi	r24, 0x01	; 1
    4848:	8f 0d       	add	r24, r15
    484a:	80 93 bb 14 	sts	0x14BB, r24	; 0x8014bb <_twiMessageLen>
    484e:	88 81       	ld	r24, Y
    4850:	88 0f       	add	r24, r24
    4852:	80 93 bc 14 	sts	0x14BC, r24	; 0x8014bc <_twiMessageBuffer>
    4856:	ff 20       	and	r15, r15
    4858:	89 f0       	breq	.+34     	; 0x487c <twiTransmit+0x72>
    485a:	f8 01       	movw	r30, r16
    485c:	ad eb       	ldi	r26, 0xBD	; 189
    485e:	b4 e1       	ldi	r27, 0x14	; 20
    4860:	4f ef       	ldi	r20, 0xFF	; 255
    4862:	4f 0d       	add	r20, r15
    4864:	64 2f       	mov	r22, r20
    4866:	70 e0       	ldi	r23, 0x00	; 0
    4868:	cb 01       	movw	r24, r22
    486a:	01 96       	adiw	r24, 0x01	; 1
    486c:	b8 01       	movw	r22, r16
    486e:	68 0f       	add	r22, r24
    4870:	79 1f       	adc	r23, r25
    4872:	81 91       	ld	r24, Z+
    4874:	8d 93       	st	X+, r24
    4876:	e6 17       	cp	r30, r22
    4878:	f7 07       	cpc	r31, r23
    487a:	d9 f7       	brne	.-10     	; 0x4872 <twiTransmit+0x68>
    487c:	88 ef       	ldi	r24, 0xF8	; 248
    487e:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <_twiCurrentState>
    4882:	85 ea       	ldi	r24, 0xA5	; 165
    4884:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4888:	84 e0       	ldi	r24, 0x04	; 4
    488a:	05 c0       	rjmp	.+10     	; 0x4896 <twiTransmit+0x8c>
    488c:	86 e0       	ldi	r24, 0x06	; 6
    488e:	03 c0       	rjmp	.+6      	; 0x4896 <twiTransmit+0x8c>
    4890:	87 e0       	ldi	r24, 0x07	; 7
    4892:	01 c0       	rjmp	.+2      	; 0x4896 <twiTransmit+0x8c>
    4894:	82 e0       	ldi	r24, 0x02	; 2
    4896:	df 91       	pop	r29
    4898:	cf 91       	pop	r28
    489a:	1f 91       	pop	r17
    489c:	0f 91       	pop	r16
    489e:	ff 90       	pop	r15
    48a0:	08 95       	ret

000048a2 <twiReceive>:
    48a2:	1f 93       	push	r17
    48a4:	cf 93       	push	r28
    48a6:	df 93       	push	r29
    48a8:	00 97       	sbiw	r24, 0x00	; 0
    48aa:	29 f1       	breq	.+74     	; 0x48f6 <twiReceive+0x54>
    48ac:	6b 30       	cpi	r22, 0x0B	; 11
    48ae:	28 f5       	brcc	.+74     	; 0x48fa <twiReceive+0x58>
    48b0:	16 2f       	mov	r17, r22
    48b2:	ec 01       	movw	r28, r24
    48b4:	a6 df       	rcall	.-180    	; 0x4802 <twiIsBusy>
    48b6:	81 11       	cpse	r24, r1
    48b8:	22 c0       	rjmp	.+68     	; 0x48fe <twiReceive+0x5c>
    48ba:	80 91 b9 14 	lds	r24, 0x14B9	; 0x8014b9 <_twiCurrentHandler>
    48be:	90 91 ba 14 	lds	r25, 0x14BA	; 0x8014ba <_twiCurrentHandler+0x1>
    48c2:	c8 17       	cp	r28, r24
    48c4:	d9 07       	cpc	r29, r25
    48c6:	41 f0       	breq	.+16     	; 0x48d8 <twiReceive+0x36>
    48c8:	3e df       	rcall	.-388    	; 0x4746 <_initTwiInterface>
    48ca:	89 81       	ldd	r24, Y+1	; 0x01
    48cc:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    48d0:	d0 93 ba 14 	sts	0x14BA, r29	; 0x8014ba <_twiCurrentHandler+0x1>
    48d4:	c0 93 b9 14 	sts	0x14B9, r28	; 0x8014b9 <_twiCurrentHandler>
    48d8:	10 93 bb 14 	sts	0x14BB, r17	; 0x8014bb <_twiMessageLen>
    48dc:	88 81       	ld	r24, Y
    48de:	88 0f       	add	r24, r24
    48e0:	81 60       	ori	r24, 0x01	; 1
    48e2:	80 93 bc 14 	sts	0x14BC, r24	; 0x8014bc <_twiMessageBuffer>
    48e6:	88 ef       	ldi	r24, 0xF8	; 248
    48e8:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <_twiCurrentState>
    48ec:	85 ea       	ldi	r24, 0xA5	; 165
    48ee:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    48f2:	85 e0       	ldi	r24, 0x05	; 5
    48f4:	05 c0       	rjmp	.+10     	; 0x4900 <twiReceive+0x5e>
    48f6:	86 e0       	ldi	r24, 0x06	; 6
    48f8:	03 c0       	rjmp	.+6      	; 0x4900 <twiReceive+0x5e>
    48fa:	87 e0       	ldi	r24, 0x07	; 7
    48fc:	01 c0       	rjmp	.+2      	; 0x4900 <twiReceive+0x5e>
    48fe:	82 e0       	ldi	r24, 0x02	; 2
    4900:	df 91       	pop	r29
    4902:	cf 91       	pop	r28
    4904:	1f 91       	pop	r17
    4906:	08 95       	ret

00004908 <__vector_39>:
    4908:	1f 92       	push	r1
    490a:	0f 92       	push	r0
    490c:	0f b6       	in	r0, 0x3f	; 63
    490e:	0f 92       	push	r0
    4910:	11 24       	eor	r1, r1
    4912:	0b b6       	in	r0, 0x3b	; 59
    4914:	0f 92       	push	r0
    4916:	2f 93       	push	r18
    4918:	3f 93       	push	r19
    491a:	4f 93       	push	r20
    491c:	5f 93       	push	r21
    491e:	6f 93       	push	r22
    4920:	7f 93       	push	r23
    4922:	8f 93       	push	r24
    4924:	9f 93       	push	r25
    4926:	af 93       	push	r26
    4928:	bf 93       	push	r27
    492a:	ef 93       	push	r30
    492c:	ff 93       	push	r31
    492e:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    4932:	8e 2f       	mov	r24, r30
    4934:	90 e0       	ldi	r25, 0x00	; 0
    4936:	fc 01       	movw	r30, r24
    4938:	38 97       	sbiw	r30, 0x08	; 8
    493a:	e1 35       	cpi	r30, 0x51	; 81
    493c:	f1 05       	cpc	r31, r1
    493e:	08 f0       	brcs	.+2      	; 0x4942 <__vector_39+0x3a>
    4940:	75 c0       	rjmp	.+234    	; 0x4a2c <__vector_39+0x124>
    4942:	88 27       	eor	r24, r24
    4944:	e4 58       	subi	r30, 0x84	; 132
    4946:	ff 4f       	sbci	r31, 0xFF	; 255
    4948:	8f 4f       	sbci	r24, 0xFF	; 255
    494a:	db c2       	rjmp	.+1462   	; 0x4f02 <__tablejump2__>
    494c:	10 92 b8 14 	sts	0x14B8, r1	; 0x8014b8 <_index.1885>
    4950:	e0 91 b8 14 	lds	r30, 0x14B8	; 0x8014b8 <_index.1885>
    4954:	80 91 bb 14 	lds	r24, 0x14BB	; 0x8014bb <_twiMessageLen>
    4958:	e8 17       	cp	r30, r24
    495a:	70 f4       	brcc	.+28     	; 0x4978 <__vector_39+0x70>
    495c:	81 e0       	ldi	r24, 0x01	; 1
    495e:	8e 0f       	add	r24, r30
    4960:	80 93 b8 14 	sts	0x14B8, r24	; 0x8014b8 <_index.1885>
    4964:	f0 e0       	ldi	r31, 0x00	; 0
    4966:	e4 54       	subi	r30, 0x44	; 68
    4968:	fb 4e       	sbci	r31, 0xEB	; 235
    496a:	80 81       	ld	r24, Z
    496c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    4970:	85 e8       	ldi	r24, 0x85	; 133
    4972:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4976:	72 c0       	rjmp	.+228    	; 0x4a5c <__vector_39+0x154>
    4978:	84 e9       	ldi	r24, 0x94	; 148
    497a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    497e:	80 91 b9 14 	lds	r24, 0x14B9	; 0x8014b9 <_twiCurrentHandler>
    4982:	90 91 ba 14 	lds	r25, 0x14BA	; 0x8014ba <_twiCurrentHandler+0x1>
    4986:	dc 01       	movw	r26, r24
    4988:	12 96       	adiw	r26, 0x02	; 2
    498a:	ed 91       	ld	r30, X+
    498c:	fc 91       	ld	r31, X
    498e:	13 97       	sbiw	r26, 0x03	; 3
    4990:	30 97       	sbiw	r30, 0x00	; 0
    4992:	09 f4       	brne	.+2      	; 0x4996 <__vector_39+0x8e>
    4994:	63 c0       	rjmp	.+198    	; 0x4a5c <__vector_39+0x154>
    4996:	20 e0       	ldi	r18, 0x00	; 0
    4998:	40 e0       	ldi	r20, 0x00	; 0
    499a:	50 e0       	ldi	r21, 0x00	; 0
    499c:	64 e0       	ldi	r22, 0x04	; 4
    499e:	19 95       	eicall
    49a0:	5d c0       	rjmp	.+186    	; 0x4a5c <__vector_39+0x154>
    49a2:	e0 91 b8 14 	lds	r30, 0x14B8	; 0x8014b8 <_index.1885>
    49a6:	81 e0       	ldi	r24, 0x01	; 1
    49a8:	8e 0f       	add	r24, r30
    49aa:	80 93 b8 14 	sts	0x14B8, r24	; 0x8014b8 <_index.1885>
    49ae:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    49b2:	f0 e0       	ldi	r31, 0x00	; 0
    49b4:	e4 54       	subi	r30, 0x44	; 68
    49b6:	fb 4e       	sbci	r31, 0xEB	; 235
    49b8:	80 83       	st	Z, r24
    49ba:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    49be:	80 34       	cpi	r24, 0x40	; 64
    49c0:	11 f4       	brne	.+4      	; 0x49c6 <__vector_39+0xbe>
    49c2:	10 92 b8 14 	sts	0x14B8, r1	; 0x8014b8 <_index.1885>
    49c6:	20 91 b8 14 	lds	r18, 0x14B8	; 0x8014b8 <_index.1885>
    49ca:	30 e0       	ldi	r19, 0x00	; 0
    49cc:	80 91 bb 14 	lds	r24, 0x14BB	; 0x8014bb <_twiMessageLen>
    49d0:	90 e0       	ldi	r25, 0x00	; 0
    49d2:	01 97       	sbiw	r24, 0x01	; 1
    49d4:	28 17       	cp	r18, r24
    49d6:	39 07       	cpc	r19, r25
    49d8:	24 f4       	brge	.+8      	; 0x49e2 <__vector_39+0xda>
    49da:	85 ec       	ldi	r24, 0xC5	; 197
    49dc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    49e0:	3d c0       	rjmp	.+122    	; 0x4a5c <__vector_39+0x154>
    49e2:	85 e8       	ldi	r24, 0x85	; 133
    49e4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    49e8:	39 c0       	rjmp	.+114    	; 0x4a5c <__vector_39+0x154>
    49ea:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    49ee:	e0 91 b8 14 	lds	r30, 0x14B8	; 0x8014b8 <_index.1885>
    49f2:	f0 e0       	ldi	r31, 0x00	; 0
    49f4:	e4 54       	subi	r30, 0x44	; 68
    49f6:	fb 4e       	sbci	r31, 0xEB	; 235
    49f8:	80 83       	st	Z, r24
    49fa:	84 e9       	ldi	r24, 0x94	; 148
    49fc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4a00:	80 91 b9 14 	lds	r24, 0x14B9	; 0x8014b9 <_twiCurrentHandler>
    4a04:	90 91 ba 14 	lds	r25, 0x14BA	; 0x8014ba <_twiCurrentHandler+0x1>
    4a08:	dc 01       	movw	r26, r24
    4a0a:	12 96       	adiw	r26, 0x02	; 2
    4a0c:	ed 91       	ld	r30, X+
    4a0e:	fc 91       	ld	r31, X
    4a10:	13 97       	sbiw	r26, 0x03	; 3
    4a12:	30 97       	sbiw	r30, 0x00	; 0
    4a14:	19 f1       	breq	.+70     	; 0x4a5c <__vector_39+0x154>
    4a16:	20 91 bb 14 	lds	r18, 0x14BB	; 0x8014bb <_twiMessageLen>
    4a1a:	4c eb       	ldi	r20, 0xBC	; 188
    4a1c:	54 e1       	ldi	r21, 0x14	; 20
    4a1e:	65 e0       	ldi	r22, 0x05	; 5
    4a20:	19 95       	eicall
    4a22:	1c c0       	rjmp	.+56     	; 0x4a5c <__vector_39+0x154>
    4a24:	85 ea       	ldi	r24, 0xA5	; 165
    4a26:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4a2a:	18 c0       	rjmp	.+48     	; 0x4a5c <__vector_39+0x154>
    4a2c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    4a30:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <_twiCurrentState>
    4a34:	84 e0       	ldi	r24, 0x04	; 4
    4a36:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4a3a:	80 91 b9 14 	lds	r24, 0x14B9	; 0x8014b9 <_twiCurrentHandler>
    4a3e:	90 91 ba 14 	lds	r25, 0x14BA	; 0x8014ba <_twiCurrentHandler+0x1>
    4a42:	dc 01       	movw	r26, r24
    4a44:	12 96       	adiw	r26, 0x02	; 2
    4a46:	ed 91       	ld	r30, X+
    4a48:	fc 91       	ld	r31, X
    4a4a:	13 97       	sbiw	r26, 0x03	; 3
    4a4c:	30 97       	sbiw	r30, 0x00	; 0
    4a4e:	31 f0       	breq	.+12     	; 0x4a5c <__vector_39+0x154>
    4a50:	20 e0       	ldi	r18, 0x00	; 0
    4a52:	40 e0       	ldi	r20, 0x00	; 0
    4a54:	50 e0       	ldi	r21, 0x00	; 0
    4a56:	60 91 24 02 	lds	r22, 0x0224	; 0x800224 <_twiCurrentState>
    4a5a:	19 95       	eicall
    4a5c:	ff 91       	pop	r31
    4a5e:	ef 91       	pop	r30
    4a60:	bf 91       	pop	r27
    4a62:	af 91       	pop	r26
    4a64:	9f 91       	pop	r25
    4a66:	8f 91       	pop	r24
    4a68:	7f 91       	pop	r23
    4a6a:	6f 91       	pop	r22
    4a6c:	5f 91       	pop	r21
    4a6e:	4f 91       	pop	r20
    4a70:	3f 91       	pop	r19
    4a72:	2f 91       	pop	r18
    4a74:	0f 90       	pop	r0
    4a76:	0b be       	out	0x3b, r0	; 59
    4a78:	0f 90       	pop	r0
    4a7a:	0f be       	out	0x3f, r0	; 63
    4a7c:	0f 90       	pop	r0
    4a7e:	1f 90       	pop	r1
    4a80:	18 95       	reti

00004a82 <fifo_init>:
    4a82:	fc 01       	movw	r30, r24
    4a84:	41 11       	cpse	r20, r1
    4a86:	01 c0       	rjmp	.+2      	; 0x4a8a <fifo_init+0x8>
    4a88:	e8 d3       	rcall	.+2000   	; 0x525a <abort>
    4a8a:	84 2f       	mov	r24, r20
    4a8c:	90 e0       	ldi	r25, 0x00	; 0
    4a8e:	9c 01       	movw	r18, r24
    4a90:	21 50       	subi	r18, 0x01	; 1
    4a92:	31 09       	sbc	r19, r1
    4a94:	82 23       	and	r24, r18
    4a96:	93 23       	and	r25, r19
    4a98:	89 2b       	or	r24, r25
    4a9a:	09 f0       	breq	.+2      	; 0x4a9e <fifo_init+0x1c>
    4a9c:	de d3       	rcall	.+1980   	; 0x525a <abort>
    4a9e:	41 38       	cpi	r20, 0x81	; 129
    4aa0:	08 f0       	brcs	.+2      	; 0x4aa4 <fifo_init+0x22>
    4aa2:	db d3       	rcall	.+1974   	; 0x525a <abort>
    4aa4:	12 82       	std	Z+2, r1	; 0x02
    4aa6:	13 82       	std	Z+3, r1	; 0x03
    4aa8:	44 83       	std	Z+4, r20	; 0x04
    4aaa:	44 0f       	add	r20, r20
    4aac:	41 50       	subi	r20, 0x01	; 1
    4aae:	45 83       	std	Z+5, r20	; 0x05
    4ab0:	71 83       	std	Z+1, r23	; 0x01
    4ab2:	60 83       	st	Z, r22
    4ab4:	80 e0       	ldi	r24, 0x00	; 0
    4ab6:	90 e0       	ldi	r25, 0x00	; 0
    4ab8:	08 95       	ret

00004aba <__subsf3>:
    4aba:	50 58       	subi	r21, 0x80	; 128

00004abc <__addsf3>:
    4abc:	bb 27       	eor	r27, r27
    4abe:	aa 27       	eor	r26, r26
    4ac0:	0e d0       	rcall	.+28     	; 0x4ade <__addsf3x>
    4ac2:	4d c1       	rjmp	.+666    	; 0x4d5e <__fp_round>
    4ac4:	3e d1       	rcall	.+636    	; 0x4d42 <__fp_pscA>
    4ac6:	30 f0       	brcs	.+12     	; 0x4ad4 <__addsf3+0x18>
    4ac8:	43 d1       	rcall	.+646    	; 0x4d50 <__fp_pscB>
    4aca:	20 f0       	brcs	.+8      	; 0x4ad4 <__addsf3+0x18>
    4acc:	31 f4       	brne	.+12     	; 0x4ada <__addsf3+0x1e>
    4ace:	9f 3f       	cpi	r25, 0xFF	; 255
    4ad0:	11 f4       	brne	.+4      	; 0x4ad6 <__addsf3+0x1a>
    4ad2:	1e f4       	brtc	.+6      	; 0x4ada <__addsf3+0x1e>
    4ad4:	33 c1       	rjmp	.+614    	; 0x4d3c <__fp_nan>
    4ad6:	0e f4       	brtc	.+2      	; 0x4ada <__addsf3+0x1e>
    4ad8:	e0 95       	com	r30
    4ada:	e7 fb       	bst	r30, 7
    4adc:	29 c1       	rjmp	.+594    	; 0x4d30 <__fp_inf>

00004ade <__addsf3x>:
    4ade:	e9 2f       	mov	r30, r25
    4ae0:	4f d1       	rcall	.+670    	; 0x4d80 <__fp_split3>
    4ae2:	80 f3       	brcs	.-32     	; 0x4ac4 <__addsf3+0x8>
    4ae4:	ba 17       	cp	r27, r26
    4ae6:	62 07       	cpc	r22, r18
    4ae8:	73 07       	cpc	r23, r19
    4aea:	84 07       	cpc	r24, r20
    4aec:	95 07       	cpc	r25, r21
    4aee:	18 f0       	brcs	.+6      	; 0x4af6 <__addsf3x+0x18>
    4af0:	71 f4       	brne	.+28     	; 0x4b0e <__addsf3x+0x30>
    4af2:	9e f5       	brtc	.+102    	; 0x4b5a <__addsf3x+0x7c>
    4af4:	67 c1       	rjmp	.+718    	; 0x4dc4 <__fp_zero>
    4af6:	0e f4       	brtc	.+2      	; 0x4afa <__addsf3x+0x1c>
    4af8:	e0 95       	com	r30
    4afa:	0b 2e       	mov	r0, r27
    4afc:	ba 2f       	mov	r27, r26
    4afe:	a0 2d       	mov	r26, r0
    4b00:	0b 01       	movw	r0, r22
    4b02:	b9 01       	movw	r22, r18
    4b04:	90 01       	movw	r18, r0
    4b06:	0c 01       	movw	r0, r24
    4b08:	ca 01       	movw	r24, r20
    4b0a:	a0 01       	movw	r20, r0
    4b0c:	11 24       	eor	r1, r1
    4b0e:	ff 27       	eor	r31, r31
    4b10:	59 1b       	sub	r21, r25
    4b12:	99 f0       	breq	.+38     	; 0x4b3a <__addsf3x+0x5c>
    4b14:	59 3f       	cpi	r21, 0xF9	; 249
    4b16:	50 f4       	brcc	.+20     	; 0x4b2c <__addsf3x+0x4e>
    4b18:	50 3e       	cpi	r21, 0xE0	; 224
    4b1a:	68 f1       	brcs	.+90     	; 0x4b76 <__addsf3x+0x98>
    4b1c:	1a 16       	cp	r1, r26
    4b1e:	f0 40       	sbci	r31, 0x00	; 0
    4b20:	a2 2f       	mov	r26, r18
    4b22:	23 2f       	mov	r18, r19
    4b24:	34 2f       	mov	r19, r20
    4b26:	44 27       	eor	r20, r20
    4b28:	58 5f       	subi	r21, 0xF8	; 248
    4b2a:	f3 cf       	rjmp	.-26     	; 0x4b12 <__addsf3x+0x34>
    4b2c:	46 95       	lsr	r20
    4b2e:	37 95       	ror	r19
    4b30:	27 95       	ror	r18
    4b32:	a7 95       	ror	r26
    4b34:	f0 40       	sbci	r31, 0x00	; 0
    4b36:	53 95       	inc	r21
    4b38:	c9 f7       	brne	.-14     	; 0x4b2c <__addsf3x+0x4e>
    4b3a:	7e f4       	brtc	.+30     	; 0x4b5a <__addsf3x+0x7c>
    4b3c:	1f 16       	cp	r1, r31
    4b3e:	ba 0b       	sbc	r27, r26
    4b40:	62 0b       	sbc	r22, r18
    4b42:	73 0b       	sbc	r23, r19
    4b44:	84 0b       	sbc	r24, r20
    4b46:	ba f0       	brmi	.+46     	; 0x4b76 <__addsf3x+0x98>
    4b48:	91 50       	subi	r25, 0x01	; 1
    4b4a:	a1 f0       	breq	.+40     	; 0x4b74 <__addsf3x+0x96>
    4b4c:	ff 0f       	add	r31, r31
    4b4e:	bb 1f       	adc	r27, r27
    4b50:	66 1f       	adc	r22, r22
    4b52:	77 1f       	adc	r23, r23
    4b54:	88 1f       	adc	r24, r24
    4b56:	c2 f7       	brpl	.-16     	; 0x4b48 <__addsf3x+0x6a>
    4b58:	0e c0       	rjmp	.+28     	; 0x4b76 <__addsf3x+0x98>
    4b5a:	ba 0f       	add	r27, r26
    4b5c:	62 1f       	adc	r22, r18
    4b5e:	73 1f       	adc	r23, r19
    4b60:	84 1f       	adc	r24, r20
    4b62:	48 f4       	brcc	.+18     	; 0x4b76 <__addsf3x+0x98>
    4b64:	87 95       	ror	r24
    4b66:	77 95       	ror	r23
    4b68:	67 95       	ror	r22
    4b6a:	b7 95       	ror	r27
    4b6c:	f7 95       	ror	r31
    4b6e:	9e 3f       	cpi	r25, 0xFE	; 254
    4b70:	08 f0       	brcs	.+2      	; 0x4b74 <__addsf3x+0x96>
    4b72:	b3 cf       	rjmp	.-154    	; 0x4ada <__addsf3+0x1e>
    4b74:	93 95       	inc	r25
    4b76:	88 0f       	add	r24, r24
    4b78:	08 f0       	brcs	.+2      	; 0x4b7c <__addsf3x+0x9e>
    4b7a:	99 27       	eor	r25, r25
    4b7c:	ee 0f       	add	r30, r30
    4b7e:	97 95       	ror	r25
    4b80:	87 95       	ror	r24
    4b82:	08 95       	ret

00004b84 <__divsf3>:
    4b84:	0c d0       	rcall	.+24     	; 0x4b9e <__divsf3x>
    4b86:	eb c0       	rjmp	.+470    	; 0x4d5e <__fp_round>
    4b88:	e3 d0       	rcall	.+454    	; 0x4d50 <__fp_pscB>
    4b8a:	40 f0       	brcs	.+16     	; 0x4b9c <__divsf3+0x18>
    4b8c:	da d0       	rcall	.+436    	; 0x4d42 <__fp_pscA>
    4b8e:	30 f0       	brcs	.+12     	; 0x4b9c <__divsf3+0x18>
    4b90:	21 f4       	brne	.+8      	; 0x4b9a <__divsf3+0x16>
    4b92:	5f 3f       	cpi	r21, 0xFF	; 255
    4b94:	19 f0       	breq	.+6      	; 0x4b9c <__divsf3+0x18>
    4b96:	cc c0       	rjmp	.+408    	; 0x4d30 <__fp_inf>
    4b98:	51 11       	cpse	r21, r1
    4b9a:	15 c1       	rjmp	.+554    	; 0x4dc6 <__fp_szero>
    4b9c:	cf c0       	rjmp	.+414    	; 0x4d3c <__fp_nan>

00004b9e <__divsf3x>:
    4b9e:	f0 d0       	rcall	.+480    	; 0x4d80 <__fp_split3>
    4ba0:	98 f3       	brcs	.-26     	; 0x4b88 <__divsf3+0x4>

00004ba2 <__divsf3_pse>:
    4ba2:	99 23       	and	r25, r25
    4ba4:	c9 f3       	breq	.-14     	; 0x4b98 <__divsf3+0x14>
    4ba6:	55 23       	and	r21, r21
    4ba8:	b1 f3       	breq	.-20     	; 0x4b96 <__divsf3+0x12>
    4baa:	95 1b       	sub	r25, r21
    4bac:	55 0b       	sbc	r21, r21
    4bae:	bb 27       	eor	r27, r27
    4bb0:	aa 27       	eor	r26, r26
    4bb2:	62 17       	cp	r22, r18
    4bb4:	73 07       	cpc	r23, r19
    4bb6:	84 07       	cpc	r24, r20
    4bb8:	38 f0       	brcs	.+14     	; 0x4bc8 <__divsf3_pse+0x26>
    4bba:	9f 5f       	subi	r25, 0xFF	; 255
    4bbc:	5f 4f       	sbci	r21, 0xFF	; 255
    4bbe:	22 0f       	add	r18, r18
    4bc0:	33 1f       	adc	r19, r19
    4bc2:	44 1f       	adc	r20, r20
    4bc4:	aa 1f       	adc	r26, r26
    4bc6:	a9 f3       	breq	.-22     	; 0x4bb2 <__divsf3_pse+0x10>
    4bc8:	33 d0       	rcall	.+102    	; 0x4c30 <__divsf3_pse+0x8e>
    4bca:	0e 2e       	mov	r0, r30
    4bcc:	3a f0       	brmi	.+14     	; 0x4bdc <__divsf3_pse+0x3a>
    4bce:	e0 e8       	ldi	r30, 0x80	; 128
    4bd0:	30 d0       	rcall	.+96     	; 0x4c32 <__divsf3_pse+0x90>
    4bd2:	91 50       	subi	r25, 0x01	; 1
    4bd4:	50 40       	sbci	r21, 0x00	; 0
    4bd6:	e6 95       	lsr	r30
    4bd8:	00 1c       	adc	r0, r0
    4bda:	ca f7       	brpl	.-14     	; 0x4bce <__divsf3_pse+0x2c>
    4bdc:	29 d0       	rcall	.+82     	; 0x4c30 <__divsf3_pse+0x8e>
    4bde:	fe 2f       	mov	r31, r30
    4be0:	27 d0       	rcall	.+78     	; 0x4c30 <__divsf3_pse+0x8e>
    4be2:	66 0f       	add	r22, r22
    4be4:	77 1f       	adc	r23, r23
    4be6:	88 1f       	adc	r24, r24
    4be8:	bb 1f       	adc	r27, r27
    4bea:	26 17       	cp	r18, r22
    4bec:	37 07       	cpc	r19, r23
    4bee:	48 07       	cpc	r20, r24
    4bf0:	ab 07       	cpc	r26, r27
    4bf2:	b0 e8       	ldi	r27, 0x80	; 128
    4bf4:	09 f0       	breq	.+2      	; 0x4bf8 <__divsf3_pse+0x56>
    4bf6:	bb 0b       	sbc	r27, r27
    4bf8:	80 2d       	mov	r24, r0
    4bfa:	bf 01       	movw	r22, r30
    4bfc:	ff 27       	eor	r31, r31
    4bfe:	93 58       	subi	r25, 0x83	; 131
    4c00:	5f 4f       	sbci	r21, 0xFF	; 255
    4c02:	2a f0       	brmi	.+10     	; 0x4c0e <__divsf3_pse+0x6c>
    4c04:	9e 3f       	cpi	r25, 0xFE	; 254
    4c06:	51 05       	cpc	r21, r1
    4c08:	68 f0       	brcs	.+26     	; 0x4c24 <__divsf3_pse+0x82>
    4c0a:	92 c0       	rjmp	.+292    	; 0x4d30 <__fp_inf>
    4c0c:	dc c0       	rjmp	.+440    	; 0x4dc6 <__fp_szero>
    4c0e:	5f 3f       	cpi	r21, 0xFF	; 255
    4c10:	ec f3       	brlt	.-6      	; 0x4c0c <__divsf3_pse+0x6a>
    4c12:	98 3e       	cpi	r25, 0xE8	; 232
    4c14:	dc f3       	brlt	.-10     	; 0x4c0c <__divsf3_pse+0x6a>
    4c16:	86 95       	lsr	r24
    4c18:	77 95       	ror	r23
    4c1a:	67 95       	ror	r22
    4c1c:	b7 95       	ror	r27
    4c1e:	f7 95       	ror	r31
    4c20:	9f 5f       	subi	r25, 0xFF	; 255
    4c22:	c9 f7       	brne	.-14     	; 0x4c16 <__divsf3_pse+0x74>
    4c24:	88 0f       	add	r24, r24
    4c26:	91 1d       	adc	r25, r1
    4c28:	96 95       	lsr	r25
    4c2a:	87 95       	ror	r24
    4c2c:	97 f9       	bld	r25, 7
    4c2e:	08 95       	ret
    4c30:	e1 e0       	ldi	r30, 0x01	; 1
    4c32:	66 0f       	add	r22, r22
    4c34:	77 1f       	adc	r23, r23
    4c36:	88 1f       	adc	r24, r24
    4c38:	bb 1f       	adc	r27, r27
    4c3a:	62 17       	cp	r22, r18
    4c3c:	73 07       	cpc	r23, r19
    4c3e:	84 07       	cpc	r24, r20
    4c40:	ba 07       	cpc	r27, r26
    4c42:	20 f0       	brcs	.+8      	; 0x4c4c <__divsf3_pse+0xaa>
    4c44:	62 1b       	sub	r22, r18
    4c46:	73 0b       	sbc	r23, r19
    4c48:	84 0b       	sbc	r24, r20
    4c4a:	ba 0b       	sbc	r27, r26
    4c4c:	ee 1f       	adc	r30, r30
    4c4e:	88 f7       	brcc	.-30     	; 0x4c32 <__divsf3_pse+0x90>
    4c50:	e0 95       	com	r30
    4c52:	08 95       	ret

00004c54 <__fixsfsi>:
    4c54:	04 d0       	rcall	.+8      	; 0x4c5e <__fixunssfsi>
    4c56:	68 94       	set
    4c58:	b1 11       	cpse	r27, r1
    4c5a:	b5 c0       	rjmp	.+362    	; 0x4dc6 <__fp_szero>
    4c5c:	08 95       	ret

00004c5e <__fixunssfsi>:
    4c5e:	98 d0       	rcall	.+304    	; 0x4d90 <__fp_splitA>
    4c60:	88 f0       	brcs	.+34     	; 0x4c84 <__fixunssfsi+0x26>
    4c62:	9f 57       	subi	r25, 0x7F	; 127
    4c64:	90 f0       	brcs	.+36     	; 0x4c8a <__fixunssfsi+0x2c>
    4c66:	b9 2f       	mov	r27, r25
    4c68:	99 27       	eor	r25, r25
    4c6a:	b7 51       	subi	r27, 0x17	; 23
    4c6c:	a0 f0       	brcs	.+40     	; 0x4c96 <__fixunssfsi+0x38>
    4c6e:	d1 f0       	breq	.+52     	; 0x4ca4 <__fixunssfsi+0x46>
    4c70:	66 0f       	add	r22, r22
    4c72:	77 1f       	adc	r23, r23
    4c74:	88 1f       	adc	r24, r24
    4c76:	99 1f       	adc	r25, r25
    4c78:	1a f0       	brmi	.+6      	; 0x4c80 <__fixunssfsi+0x22>
    4c7a:	ba 95       	dec	r27
    4c7c:	c9 f7       	brne	.-14     	; 0x4c70 <__fixunssfsi+0x12>
    4c7e:	12 c0       	rjmp	.+36     	; 0x4ca4 <__fixunssfsi+0x46>
    4c80:	b1 30       	cpi	r27, 0x01	; 1
    4c82:	81 f0       	breq	.+32     	; 0x4ca4 <__fixunssfsi+0x46>
    4c84:	9f d0       	rcall	.+318    	; 0x4dc4 <__fp_zero>
    4c86:	b1 e0       	ldi	r27, 0x01	; 1
    4c88:	08 95       	ret
    4c8a:	9c c0       	rjmp	.+312    	; 0x4dc4 <__fp_zero>
    4c8c:	67 2f       	mov	r22, r23
    4c8e:	78 2f       	mov	r23, r24
    4c90:	88 27       	eor	r24, r24
    4c92:	b8 5f       	subi	r27, 0xF8	; 248
    4c94:	39 f0       	breq	.+14     	; 0x4ca4 <__fixunssfsi+0x46>
    4c96:	b9 3f       	cpi	r27, 0xF9	; 249
    4c98:	cc f3       	brlt	.-14     	; 0x4c8c <__fixunssfsi+0x2e>
    4c9a:	86 95       	lsr	r24
    4c9c:	77 95       	ror	r23
    4c9e:	67 95       	ror	r22
    4ca0:	b3 95       	inc	r27
    4ca2:	d9 f7       	brne	.-10     	; 0x4c9a <__fixunssfsi+0x3c>
    4ca4:	3e f4       	brtc	.+14     	; 0x4cb4 <__fixunssfsi+0x56>
    4ca6:	90 95       	com	r25
    4ca8:	80 95       	com	r24
    4caa:	70 95       	com	r23
    4cac:	61 95       	neg	r22
    4cae:	7f 4f       	sbci	r23, 0xFF	; 255
    4cb0:	8f 4f       	sbci	r24, 0xFF	; 255
    4cb2:	9f 4f       	sbci	r25, 0xFF	; 255
    4cb4:	08 95       	ret

00004cb6 <__floatunsisf>:
    4cb6:	e8 94       	clt
    4cb8:	09 c0       	rjmp	.+18     	; 0x4ccc <__floatsisf+0x12>

00004cba <__floatsisf>:
    4cba:	97 fb       	bst	r25, 7
    4cbc:	3e f4       	brtc	.+14     	; 0x4ccc <__floatsisf+0x12>
    4cbe:	90 95       	com	r25
    4cc0:	80 95       	com	r24
    4cc2:	70 95       	com	r23
    4cc4:	61 95       	neg	r22
    4cc6:	7f 4f       	sbci	r23, 0xFF	; 255
    4cc8:	8f 4f       	sbci	r24, 0xFF	; 255
    4cca:	9f 4f       	sbci	r25, 0xFF	; 255
    4ccc:	99 23       	and	r25, r25
    4cce:	a9 f0       	breq	.+42     	; 0x4cfa <__floatsisf+0x40>
    4cd0:	f9 2f       	mov	r31, r25
    4cd2:	96 e9       	ldi	r25, 0x96	; 150
    4cd4:	bb 27       	eor	r27, r27
    4cd6:	93 95       	inc	r25
    4cd8:	f6 95       	lsr	r31
    4cda:	87 95       	ror	r24
    4cdc:	77 95       	ror	r23
    4cde:	67 95       	ror	r22
    4ce0:	b7 95       	ror	r27
    4ce2:	f1 11       	cpse	r31, r1
    4ce4:	f8 cf       	rjmp	.-16     	; 0x4cd6 <__floatsisf+0x1c>
    4ce6:	fa f4       	brpl	.+62     	; 0x4d26 <__floatsisf+0x6c>
    4ce8:	bb 0f       	add	r27, r27
    4cea:	11 f4       	brne	.+4      	; 0x4cf0 <__floatsisf+0x36>
    4cec:	60 ff       	sbrs	r22, 0
    4cee:	1b c0       	rjmp	.+54     	; 0x4d26 <__floatsisf+0x6c>
    4cf0:	6f 5f       	subi	r22, 0xFF	; 255
    4cf2:	7f 4f       	sbci	r23, 0xFF	; 255
    4cf4:	8f 4f       	sbci	r24, 0xFF	; 255
    4cf6:	9f 4f       	sbci	r25, 0xFF	; 255
    4cf8:	16 c0       	rjmp	.+44     	; 0x4d26 <__floatsisf+0x6c>
    4cfa:	88 23       	and	r24, r24
    4cfc:	11 f0       	breq	.+4      	; 0x4d02 <__floatsisf+0x48>
    4cfe:	96 e9       	ldi	r25, 0x96	; 150
    4d00:	11 c0       	rjmp	.+34     	; 0x4d24 <__floatsisf+0x6a>
    4d02:	77 23       	and	r23, r23
    4d04:	21 f0       	breq	.+8      	; 0x4d0e <__floatsisf+0x54>
    4d06:	9e e8       	ldi	r25, 0x8E	; 142
    4d08:	87 2f       	mov	r24, r23
    4d0a:	76 2f       	mov	r23, r22
    4d0c:	05 c0       	rjmp	.+10     	; 0x4d18 <__floatsisf+0x5e>
    4d0e:	66 23       	and	r22, r22
    4d10:	71 f0       	breq	.+28     	; 0x4d2e <__floatsisf+0x74>
    4d12:	96 e8       	ldi	r25, 0x86	; 134
    4d14:	86 2f       	mov	r24, r22
    4d16:	70 e0       	ldi	r23, 0x00	; 0
    4d18:	60 e0       	ldi	r22, 0x00	; 0
    4d1a:	2a f0       	brmi	.+10     	; 0x4d26 <__floatsisf+0x6c>
    4d1c:	9a 95       	dec	r25
    4d1e:	66 0f       	add	r22, r22
    4d20:	77 1f       	adc	r23, r23
    4d22:	88 1f       	adc	r24, r24
    4d24:	da f7       	brpl	.-10     	; 0x4d1c <__floatsisf+0x62>
    4d26:	88 0f       	add	r24, r24
    4d28:	96 95       	lsr	r25
    4d2a:	87 95       	ror	r24
    4d2c:	97 f9       	bld	r25, 7
    4d2e:	08 95       	ret

00004d30 <__fp_inf>:
    4d30:	97 f9       	bld	r25, 7
    4d32:	9f 67       	ori	r25, 0x7F	; 127
    4d34:	80 e8       	ldi	r24, 0x80	; 128
    4d36:	70 e0       	ldi	r23, 0x00	; 0
    4d38:	60 e0       	ldi	r22, 0x00	; 0
    4d3a:	08 95       	ret

00004d3c <__fp_nan>:
    4d3c:	9f ef       	ldi	r25, 0xFF	; 255
    4d3e:	80 ec       	ldi	r24, 0xC0	; 192
    4d40:	08 95       	ret

00004d42 <__fp_pscA>:
    4d42:	00 24       	eor	r0, r0
    4d44:	0a 94       	dec	r0
    4d46:	16 16       	cp	r1, r22
    4d48:	17 06       	cpc	r1, r23
    4d4a:	18 06       	cpc	r1, r24
    4d4c:	09 06       	cpc	r0, r25
    4d4e:	08 95       	ret

00004d50 <__fp_pscB>:
    4d50:	00 24       	eor	r0, r0
    4d52:	0a 94       	dec	r0
    4d54:	12 16       	cp	r1, r18
    4d56:	13 06       	cpc	r1, r19
    4d58:	14 06       	cpc	r1, r20
    4d5a:	05 06       	cpc	r0, r21
    4d5c:	08 95       	ret

00004d5e <__fp_round>:
    4d5e:	09 2e       	mov	r0, r25
    4d60:	03 94       	inc	r0
    4d62:	00 0c       	add	r0, r0
    4d64:	11 f4       	brne	.+4      	; 0x4d6a <__fp_round+0xc>
    4d66:	88 23       	and	r24, r24
    4d68:	52 f0       	brmi	.+20     	; 0x4d7e <__fp_round+0x20>
    4d6a:	bb 0f       	add	r27, r27
    4d6c:	40 f4       	brcc	.+16     	; 0x4d7e <__fp_round+0x20>
    4d6e:	bf 2b       	or	r27, r31
    4d70:	11 f4       	brne	.+4      	; 0x4d76 <__fp_round+0x18>
    4d72:	60 ff       	sbrs	r22, 0
    4d74:	04 c0       	rjmp	.+8      	; 0x4d7e <__fp_round+0x20>
    4d76:	6f 5f       	subi	r22, 0xFF	; 255
    4d78:	7f 4f       	sbci	r23, 0xFF	; 255
    4d7a:	8f 4f       	sbci	r24, 0xFF	; 255
    4d7c:	9f 4f       	sbci	r25, 0xFF	; 255
    4d7e:	08 95       	ret

00004d80 <__fp_split3>:
    4d80:	57 fd       	sbrc	r21, 7
    4d82:	90 58       	subi	r25, 0x80	; 128
    4d84:	44 0f       	add	r20, r20
    4d86:	55 1f       	adc	r21, r21
    4d88:	59 f0       	breq	.+22     	; 0x4da0 <__fp_splitA+0x10>
    4d8a:	5f 3f       	cpi	r21, 0xFF	; 255
    4d8c:	71 f0       	breq	.+28     	; 0x4daa <__fp_splitA+0x1a>
    4d8e:	47 95       	ror	r20

00004d90 <__fp_splitA>:
    4d90:	88 0f       	add	r24, r24
    4d92:	97 fb       	bst	r25, 7
    4d94:	99 1f       	adc	r25, r25
    4d96:	61 f0       	breq	.+24     	; 0x4db0 <__fp_splitA+0x20>
    4d98:	9f 3f       	cpi	r25, 0xFF	; 255
    4d9a:	79 f0       	breq	.+30     	; 0x4dba <__fp_splitA+0x2a>
    4d9c:	87 95       	ror	r24
    4d9e:	08 95       	ret
    4da0:	12 16       	cp	r1, r18
    4da2:	13 06       	cpc	r1, r19
    4da4:	14 06       	cpc	r1, r20
    4da6:	55 1f       	adc	r21, r21
    4da8:	f2 cf       	rjmp	.-28     	; 0x4d8e <__fp_split3+0xe>
    4daa:	46 95       	lsr	r20
    4dac:	f1 df       	rcall	.-30     	; 0x4d90 <__fp_splitA>
    4dae:	08 c0       	rjmp	.+16     	; 0x4dc0 <__fp_splitA+0x30>
    4db0:	16 16       	cp	r1, r22
    4db2:	17 06       	cpc	r1, r23
    4db4:	18 06       	cpc	r1, r24
    4db6:	99 1f       	adc	r25, r25
    4db8:	f1 cf       	rjmp	.-30     	; 0x4d9c <__fp_splitA+0xc>
    4dba:	86 95       	lsr	r24
    4dbc:	71 05       	cpc	r23, r1
    4dbe:	61 05       	cpc	r22, r1
    4dc0:	08 94       	sec
    4dc2:	08 95       	ret

00004dc4 <__fp_zero>:
    4dc4:	e8 94       	clt

00004dc6 <__fp_szero>:
    4dc6:	bb 27       	eor	r27, r27
    4dc8:	66 27       	eor	r22, r22
    4dca:	77 27       	eor	r23, r23
    4dcc:	cb 01       	movw	r24, r22
    4dce:	97 f9       	bld	r25, 7
    4dd0:	08 95       	ret

00004dd2 <__mulsf3>:
    4dd2:	0b d0       	rcall	.+22     	; 0x4dea <__mulsf3x>
    4dd4:	c4 cf       	rjmp	.-120    	; 0x4d5e <__fp_round>
    4dd6:	b5 df       	rcall	.-150    	; 0x4d42 <__fp_pscA>
    4dd8:	28 f0       	brcs	.+10     	; 0x4de4 <__mulsf3+0x12>
    4dda:	ba df       	rcall	.-140    	; 0x4d50 <__fp_pscB>
    4ddc:	18 f0       	brcs	.+6      	; 0x4de4 <__mulsf3+0x12>
    4dde:	95 23       	and	r25, r21
    4de0:	09 f0       	breq	.+2      	; 0x4de4 <__mulsf3+0x12>
    4de2:	a6 cf       	rjmp	.-180    	; 0x4d30 <__fp_inf>
    4de4:	ab cf       	rjmp	.-170    	; 0x4d3c <__fp_nan>
    4de6:	11 24       	eor	r1, r1
    4de8:	ee cf       	rjmp	.-36     	; 0x4dc6 <__fp_szero>

00004dea <__mulsf3x>:
    4dea:	ca df       	rcall	.-108    	; 0x4d80 <__fp_split3>
    4dec:	a0 f3       	brcs	.-24     	; 0x4dd6 <__mulsf3+0x4>

00004dee <__mulsf3_pse>:
    4dee:	95 9f       	mul	r25, r21
    4df0:	d1 f3       	breq	.-12     	; 0x4de6 <__mulsf3+0x14>
    4df2:	95 0f       	add	r25, r21
    4df4:	50 e0       	ldi	r21, 0x00	; 0
    4df6:	55 1f       	adc	r21, r21
    4df8:	62 9f       	mul	r22, r18
    4dfa:	f0 01       	movw	r30, r0
    4dfc:	72 9f       	mul	r23, r18
    4dfe:	bb 27       	eor	r27, r27
    4e00:	f0 0d       	add	r31, r0
    4e02:	b1 1d       	adc	r27, r1
    4e04:	63 9f       	mul	r22, r19
    4e06:	aa 27       	eor	r26, r26
    4e08:	f0 0d       	add	r31, r0
    4e0a:	b1 1d       	adc	r27, r1
    4e0c:	aa 1f       	adc	r26, r26
    4e0e:	64 9f       	mul	r22, r20
    4e10:	66 27       	eor	r22, r22
    4e12:	b0 0d       	add	r27, r0
    4e14:	a1 1d       	adc	r26, r1
    4e16:	66 1f       	adc	r22, r22
    4e18:	82 9f       	mul	r24, r18
    4e1a:	22 27       	eor	r18, r18
    4e1c:	b0 0d       	add	r27, r0
    4e1e:	a1 1d       	adc	r26, r1
    4e20:	62 1f       	adc	r22, r18
    4e22:	73 9f       	mul	r23, r19
    4e24:	b0 0d       	add	r27, r0
    4e26:	a1 1d       	adc	r26, r1
    4e28:	62 1f       	adc	r22, r18
    4e2a:	83 9f       	mul	r24, r19
    4e2c:	a0 0d       	add	r26, r0
    4e2e:	61 1d       	adc	r22, r1
    4e30:	22 1f       	adc	r18, r18
    4e32:	74 9f       	mul	r23, r20
    4e34:	33 27       	eor	r19, r19
    4e36:	a0 0d       	add	r26, r0
    4e38:	61 1d       	adc	r22, r1
    4e3a:	23 1f       	adc	r18, r19
    4e3c:	84 9f       	mul	r24, r20
    4e3e:	60 0d       	add	r22, r0
    4e40:	21 1d       	adc	r18, r1
    4e42:	82 2f       	mov	r24, r18
    4e44:	76 2f       	mov	r23, r22
    4e46:	6a 2f       	mov	r22, r26
    4e48:	11 24       	eor	r1, r1
    4e4a:	9f 57       	subi	r25, 0x7F	; 127
    4e4c:	50 40       	sbci	r21, 0x00	; 0
    4e4e:	8a f0       	brmi	.+34     	; 0x4e72 <__mulsf3_pse+0x84>
    4e50:	e1 f0       	breq	.+56     	; 0x4e8a <__mulsf3_pse+0x9c>
    4e52:	88 23       	and	r24, r24
    4e54:	4a f0       	brmi	.+18     	; 0x4e68 <__mulsf3_pse+0x7a>
    4e56:	ee 0f       	add	r30, r30
    4e58:	ff 1f       	adc	r31, r31
    4e5a:	bb 1f       	adc	r27, r27
    4e5c:	66 1f       	adc	r22, r22
    4e5e:	77 1f       	adc	r23, r23
    4e60:	88 1f       	adc	r24, r24
    4e62:	91 50       	subi	r25, 0x01	; 1
    4e64:	50 40       	sbci	r21, 0x00	; 0
    4e66:	a9 f7       	brne	.-22     	; 0x4e52 <__mulsf3_pse+0x64>
    4e68:	9e 3f       	cpi	r25, 0xFE	; 254
    4e6a:	51 05       	cpc	r21, r1
    4e6c:	70 f0       	brcs	.+28     	; 0x4e8a <__mulsf3_pse+0x9c>
    4e6e:	60 cf       	rjmp	.-320    	; 0x4d30 <__fp_inf>
    4e70:	aa cf       	rjmp	.-172    	; 0x4dc6 <__fp_szero>
    4e72:	5f 3f       	cpi	r21, 0xFF	; 255
    4e74:	ec f3       	brlt	.-6      	; 0x4e70 <__mulsf3_pse+0x82>
    4e76:	98 3e       	cpi	r25, 0xE8	; 232
    4e78:	dc f3       	brlt	.-10     	; 0x4e70 <__mulsf3_pse+0x82>
    4e7a:	86 95       	lsr	r24
    4e7c:	77 95       	ror	r23
    4e7e:	67 95       	ror	r22
    4e80:	b7 95       	ror	r27
    4e82:	f7 95       	ror	r31
    4e84:	e7 95       	ror	r30
    4e86:	9f 5f       	subi	r25, 0xFF	; 255
    4e88:	c1 f7       	brne	.-16     	; 0x4e7a <__mulsf3_pse+0x8c>
    4e8a:	fe 2b       	or	r31, r30
    4e8c:	88 0f       	add	r24, r24
    4e8e:	91 1d       	adc	r25, r1
    4e90:	96 95       	lsr	r25
    4e92:	87 95       	ror	r24
    4e94:	97 f9       	bld	r25, 7
    4e96:	08 95       	ret

00004e98 <__divmodhi4>:
    4e98:	97 fb       	bst	r25, 7
    4e9a:	07 2e       	mov	r0, r23
    4e9c:	16 f4       	brtc	.+4      	; 0x4ea2 <__divmodhi4+0xa>
    4e9e:	00 94       	com	r0
    4ea0:	06 d0       	rcall	.+12     	; 0x4eae <__divmodhi4_neg1>
    4ea2:	77 fd       	sbrc	r23, 7
    4ea4:	08 d0       	rcall	.+16     	; 0x4eb6 <__divmodhi4_neg2>
    4ea6:	35 d0       	rcall	.+106    	; 0x4f12 <__udivmodhi4>
    4ea8:	07 fc       	sbrc	r0, 7
    4eaa:	05 d0       	rcall	.+10     	; 0x4eb6 <__divmodhi4_neg2>
    4eac:	3e f4       	brtc	.+14     	; 0x4ebc <__divmodhi4_exit>

00004eae <__divmodhi4_neg1>:
    4eae:	90 95       	com	r25
    4eb0:	81 95       	neg	r24
    4eb2:	9f 4f       	sbci	r25, 0xFF	; 255
    4eb4:	08 95       	ret

00004eb6 <__divmodhi4_neg2>:
    4eb6:	70 95       	com	r23
    4eb8:	61 95       	neg	r22
    4eba:	7f 4f       	sbci	r23, 0xFF	; 255

00004ebc <__divmodhi4_exit>:
    4ebc:	08 95       	ret

00004ebe <__udivmodsi4>:
    4ebe:	a1 e2       	ldi	r26, 0x21	; 33
    4ec0:	1a 2e       	mov	r1, r26
    4ec2:	aa 1b       	sub	r26, r26
    4ec4:	bb 1b       	sub	r27, r27
    4ec6:	fd 01       	movw	r30, r26
    4ec8:	0d c0       	rjmp	.+26     	; 0x4ee4 <__udivmodsi4_ep>

00004eca <__udivmodsi4_loop>:
    4eca:	aa 1f       	adc	r26, r26
    4ecc:	bb 1f       	adc	r27, r27
    4ece:	ee 1f       	adc	r30, r30
    4ed0:	ff 1f       	adc	r31, r31
    4ed2:	a2 17       	cp	r26, r18
    4ed4:	b3 07       	cpc	r27, r19
    4ed6:	e4 07       	cpc	r30, r20
    4ed8:	f5 07       	cpc	r31, r21
    4eda:	20 f0       	brcs	.+8      	; 0x4ee4 <__udivmodsi4_ep>
    4edc:	a2 1b       	sub	r26, r18
    4ede:	b3 0b       	sbc	r27, r19
    4ee0:	e4 0b       	sbc	r30, r20
    4ee2:	f5 0b       	sbc	r31, r21

00004ee4 <__udivmodsi4_ep>:
    4ee4:	66 1f       	adc	r22, r22
    4ee6:	77 1f       	adc	r23, r23
    4ee8:	88 1f       	adc	r24, r24
    4eea:	99 1f       	adc	r25, r25
    4eec:	1a 94       	dec	r1
    4eee:	69 f7       	brne	.-38     	; 0x4eca <__udivmodsi4_loop>
    4ef0:	60 95       	com	r22
    4ef2:	70 95       	com	r23
    4ef4:	80 95       	com	r24
    4ef6:	90 95       	com	r25
    4ef8:	9b 01       	movw	r18, r22
    4efa:	ac 01       	movw	r20, r24
    4efc:	bd 01       	movw	r22, r26
    4efe:	cf 01       	movw	r24, r30
    4f00:	08 95       	ret

00004f02 <__tablejump2__>:
    4f02:	ee 0f       	add	r30, r30
    4f04:	ff 1f       	adc	r31, r31
    4f06:	88 1f       	adc	r24, r24
    4f08:	8b bf       	out	0x3b, r24	; 59
    4f0a:	07 90       	elpm	r0, Z+
    4f0c:	f6 91       	elpm	r31, Z
    4f0e:	e0 2d       	mov	r30, r0
    4f10:	19 94       	eijmp

00004f12 <__udivmodhi4>:
    4f12:	aa 1b       	sub	r26, r26
    4f14:	bb 1b       	sub	r27, r27
    4f16:	51 e1       	ldi	r21, 0x11	; 17
    4f18:	07 c0       	rjmp	.+14     	; 0x4f28 <__udivmodhi4_ep>

00004f1a <__udivmodhi4_loop>:
    4f1a:	aa 1f       	adc	r26, r26
    4f1c:	bb 1f       	adc	r27, r27
    4f1e:	a6 17       	cp	r26, r22
    4f20:	b7 07       	cpc	r27, r23
    4f22:	10 f0       	brcs	.+4      	; 0x4f28 <__udivmodhi4_ep>
    4f24:	a6 1b       	sub	r26, r22
    4f26:	b7 0b       	sbc	r27, r23

00004f28 <__udivmodhi4_ep>:
    4f28:	88 1f       	adc	r24, r24
    4f2a:	99 1f       	adc	r25, r25
    4f2c:	5a 95       	dec	r21
    4f2e:	a9 f7       	brne	.-22     	; 0x4f1a <__udivmodhi4_loop>
    4f30:	80 95       	com	r24
    4f32:	90 95       	com	r25
    4f34:	bc 01       	movw	r22, r24
    4f36:	cd 01       	movw	r24, r26
    4f38:	08 95       	ret

00004f3a <calloc>:
    4f3a:	0f 93       	push	r16
    4f3c:	1f 93       	push	r17
    4f3e:	cf 93       	push	r28
    4f40:	df 93       	push	r29
    4f42:	86 9f       	mul	r24, r22
    4f44:	80 01       	movw	r16, r0
    4f46:	87 9f       	mul	r24, r23
    4f48:	10 0d       	add	r17, r0
    4f4a:	96 9f       	mul	r25, r22
    4f4c:	10 0d       	add	r17, r0
    4f4e:	11 24       	eor	r1, r1
    4f50:	c8 01       	movw	r24, r16
    4f52:	0d d0       	rcall	.+26     	; 0x4f6e <malloc>
    4f54:	ec 01       	movw	r28, r24
    4f56:	00 97       	sbiw	r24, 0x00	; 0
    4f58:	21 f0       	breq	.+8      	; 0x4f62 <calloc+0x28>
    4f5a:	a8 01       	movw	r20, r16
    4f5c:	60 e0       	ldi	r22, 0x00	; 0
    4f5e:	70 e0       	ldi	r23, 0x00	; 0
    4f60:	89 d1       	rcall	.+786    	; 0x5274 <memset>
    4f62:	ce 01       	movw	r24, r28
    4f64:	df 91       	pop	r29
    4f66:	cf 91       	pop	r28
    4f68:	1f 91       	pop	r17
    4f6a:	0f 91       	pop	r16
    4f6c:	08 95       	ret

00004f6e <malloc>:
    4f6e:	0f 93       	push	r16
    4f70:	1f 93       	push	r17
    4f72:	cf 93       	push	r28
    4f74:	df 93       	push	r29
    4f76:	82 30       	cpi	r24, 0x02	; 2
    4f78:	91 05       	cpc	r25, r1
    4f7a:	10 f4       	brcc	.+4      	; 0x4f80 <malloc+0x12>
    4f7c:	82 e0       	ldi	r24, 0x02	; 2
    4f7e:	90 e0       	ldi	r25, 0x00	; 0
    4f80:	e0 91 ff 14 	lds	r30, 0x14FF	; 0x8014ff <__flp>
    4f84:	f0 91 00 15 	lds	r31, 0x1500	; 0x801500 <__flp+0x1>
    4f88:	20 e0       	ldi	r18, 0x00	; 0
    4f8a:	30 e0       	ldi	r19, 0x00	; 0
    4f8c:	a0 e0       	ldi	r26, 0x00	; 0
    4f8e:	b0 e0       	ldi	r27, 0x00	; 0
    4f90:	30 97       	sbiw	r30, 0x00	; 0
    4f92:	19 f1       	breq	.+70     	; 0x4fda <malloc+0x6c>
    4f94:	40 81       	ld	r20, Z
    4f96:	51 81       	ldd	r21, Z+1	; 0x01
    4f98:	02 81       	ldd	r16, Z+2	; 0x02
    4f9a:	13 81       	ldd	r17, Z+3	; 0x03
    4f9c:	48 17       	cp	r20, r24
    4f9e:	59 07       	cpc	r21, r25
    4fa0:	c8 f0       	brcs	.+50     	; 0x4fd4 <malloc+0x66>
    4fa2:	84 17       	cp	r24, r20
    4fa4:	95 07       	cpc	r25, r21
    4fa6:	69 f4       	brne	.+26     	; 0x4fc2 <malloc+0x54>
    4fa8:	10 97       	sbiw	r26, 0x00	; 0
    4faa:	31 f0       	breq	.+12     	; 0x4fb8 <malloc+0x4a>
    4fac:	12 96       	adiw	r26, 0x02	; 2
    4fae:	0c 93       	st	X, r16
    4fb0:	12 97       	sbiw	r26, 0x02	; 2
    4fb2:	13 96       	adiw	r26, 0x03	; 3
    4fb4:	1c 93       	st	X, r17
    4fb6:	27 c0       	rjmp	.+78     	; 0x5006 <malloc+0x98>
    4fb8:	00 93 ff 14 	sts	0x14FF, r16	; 0x8014ff <__flp>
    4fbc:	10 93 00 15 	sts	0x1500, r17	; 0x801500 <__flp+0x1>
    4fc0:	22 c0       	rjmp	.+68     	; 0x5006 <malloc+0x98>
    4fc2:	21 15       	cp	r18, r1
    4fc4:	31 05       	cpc	r19, r1
    4fc6:	19 f0       	breq	.+6      	; 0x4fce <malloc+0x60>
    4fc8:	42 17       	cp	r20, r18
    4fca:	53 07       	cpc	r21, r19
    4fcc:	18 f4       	brcc	.+6      	; 0x4fd4 <malloc+0x66>
    4fce:	9a 01       	movw	r18, r20
    4fd0:	bd 01       	movw	r22, r26
    4fd2:	ef 01       	movw	r28, r30
    4fd4:	df 01       	movw	r26, r30
    4fd6:	f8 01       	movw	r30, r16
    4fd8:	db cf       	rjmp	.-74     	; 0x4f90 <malloc+0x22>
    4fda:	21 15       	cp	r18, r1
    4fdc:	31 05       	cpc	r19, r1
    4fde:	f9 f0       	breq	.+62     	; 0x501e <malloc+0xb0>
    4fe0:	28 1b       	sub	r18, r24
    4fe2:	39 0b       	sbc	r19, r25
    4fe4:	24 30       	cpi	r18, 0x04	; 4
    4fe6:	31 05       	cpc	r19, r1
    4fe8:	80 f4       	brcc	.+32     	; 0x500a <malloc+0x9c>
    4fea:	8a 81       	ldd	r24, Y+2	; 0x02
    4fec:	9b 81       	ldd	r25, Y+3	; 0x03
    4fee:	61 15       	cp	r22, r1
    4ff0:	71 05       	cpc	r23, r1
    4ff2:	21 f0       	breq	.+8      	; 0x4ffc <malloc+0x8e>
    4ff4:	fb 01       	movw	r30, r22
    4ff6:	93 83       	std	Z+3, r25	; 0x03
    4ff8:	82 83       	std	Z+2, r24	; 0x02
    4ffa:	04 c0       	rjmp	.+8      	; 0x5004 <malloc+0x96>
    4ffc:	90 93 00 15 	sts	0x1500, r25	; 0x801500 <__flp+0x1>
    5000:	80 93 ff 14 	sts	0x14FF, r24	; 0x8014ff <__flp>
    5004:	fe 01       	movw	r30, r28
    5006:	32 96       	adiw	r30, 0x02	; 2
    5008:	44 c0       	rjmp	.+136    	; 0x5092 <malloc+0x124>
    500a:	fe 01       	movw	r30, r28
    500c:	e2 0f       	add	r30, r18
    500e:	f3 1f       	adc	r31, r19
    5010:	81 93       	st	Z+, r24
    5012:	91 93       	st	Z+, r25
    5014:	22 50       	subi	r18, 0x02	; 2
    5016:	31 09       	sbc	r19, r1
    5018:	39 83       	std	Y+1, r19	; 0x01
    501a:	28 83       	st	Y, r18
    501c:	3a c0       	rjmp	.+116    	; 0x5092 <malloc+0x124>
    501e:	20 91 fd 14 	lds	r18, 0x14FD	; 0x8014fd <__brkval>
    5022:	30 91 fe 14 	lds	r19, 0x14FE	; 0x8014fe <__brkval+0x1>
    5026:	23 2b       	or	r18, r19
    5028:	41 f4       	brne	.+16     	; 0x503a <malloc+0xcc>
    502a:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    502e:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    5032:	30 93 fe 14 	sts	0x14FE, r19	; 0x8014fe <__brkval+0x1>
    5036:	20 93 fd 14 	sts	0x14FD, r18	; 0x8014fd <__brkval>
    503a:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    503e:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    5042:	21 15       	cp	r18, r1
    5044:	31 05       	cpc	r19, r1
    5046:	41 f4       	brne	.+16     	; 0x5058 <malloc+0xea>
    5048:	2d b7       	in	r18, 0x3d	; 61
    504a:	3e b7       	in	r19, 0x3e	; 62
    504c:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    5050:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    5054:	24 1b       	sub	r18, r20
    5056:	35 0b       	sbc	r19, r21
    5058:	e0 91 fd 14 	lds	r30, 0x14FD	; 0x8014fd <__brkval>
    505c:	f0 91 fe 14 	lds	r31, 0x14FE	; 0x8014fe <__brkval+0x1>
    5060:	e2 17       	cp	r30, r18
    5062:	f3 07       	cpc	r31, r19
    5064:	a0 f4       	brcc	.+40     	; 0x508e <malloc+0x120>
    5066:	2e 1b       	sub	r18, r30
    5068:	3f 0b       	sbc	r19, r31
    506a:	28 17       	cp	r18, r24
    506c:	39 07       	cpc	r19, r25
    506e:	78 f0       	brcs	.+30     	; 0x508e <malloc+0x120>
    5070:	ac 01       	movw	r20, r24
    5072:	4e 5f       	subi	r20, 0xFE	; 254
    5074:	5f 4f       	sbci	r21, 0xFF	; 255
    5076:	24 17       	cp	r18, r20
    5078:	35 07       	cpc	r19, r21
    507a:	48 f0       	brcs	.+18     	; 0x508e <malloc+0x120>
    507c:	4e 0f       	add	r20, r30
    507e:	5f 1f       	adc	r21, r31
    5080:	50 93 fe 14 	sts	0x14FE, r21	; 0x8014fe <__brkval+0x1>
    5084:	40 93 fd 14 	sts	0x14FD, r20	; 0x8014fd <__brkval>
    5088:	81 93       	st	Z+, r24
    508a:	91 93       	st	Z+, r25
    508c:	02 c0       	rjmp	.+4      	; 0x5092 <malloc+0x124>
    508e:	e0 e0       	ldi	r30, 0x00	; 0
    5090:	f0 e0       	ldi	r31, 0x00	; 0
    5092:	cf 01       	movw	r24, r30
    5094:	df 91       	pop	r29
    5096:	cf 91       	pop	r28
    5098:	1f 91       	pop	r17
    509a:	0f 91       	pop	r16
    509c:	08 95       	ret

0000509e <free>:
    509e:	cf 93       	push	r28
    50a0:	df 93       	push	r29
    50a2:	00 97       	sbiw	r24, 0x00	; 0
    50a4:	09 f4       	brne	.+2      	; 0x50a8 <free+0xa>
    50a6:	81 c0       	rjmp	.+258    	; 0x51aa <free+0x10c>
    50a8:	fc 01       	movw	r30, r24
    50aa:	32 97       	sbiw	r30, 0x02	; 2
    50ac:	13 82       	std	Z+3, r1	; 0x03
    50ae:	12 82       	std	Z+2, r1	; 0x02
    50b0:	a0 91 ff 14 	lds	r26, 0x14FF	; 0x8014ff <__flp>
    50b4:	b0 91 00 15 	lds	r27, 0x1500	; 0x801500 <__flp+0x1>
    50b8:	10 97       	sbiw	r26, 0x00	; 0
    50ba:	81 f4       	brne	.+32     	; 0x50dc <free+0x3e>
    50bc:	20 81       	ld	r18, Z
    50be:	31 81       	ldd	r19, Z+1	; 0x01
    50c0:	82 0f       	add	r24, r18
    50c2:	93 1f       	adc	r25, r19
    50c4:	20 91 fd 14 	lds	r18, 0x14FD	; 0x8014fd <__brkval>
    50c8:	30 91 fe 14 	lds	r19, 0x14FE	; 0x8014fe <__brkval+0x1>
    50cc:	28 17       	cp	r18, r24
    50ce:	39 07       	cpc	r19, r25
    50d0:	51 f5       	brne	.+84     	; 0x5126 <free+0x88>
    50d2:	f0 93 fe 14 	sts	0x14FE, r31	; 0x8014fe <__brkval+0x1>
    50d6:	e0 93 fd 14 	sts	0x14FD, r30	; 0x8014fd <__brkval>
    50da:	67 c0       	rjmp	.+206    	; 0x51aa <free+0x10c>
    50dc:	ed 01       	movw	r28, r26
    50de:	20 e0       	ldi	r18, 0x00	; 0
    50e0:	30 e0       	ldi	r19, 0x00	; 0
    50e2:	ce 17       	cp	r28, r30
    50e4:	df 07       	cpc	r29, r31
    50e6:	40 f4       	brcc	.+16     	; 0x50f8 <free+0x5a>
    50e8:	4a 81       	ldd	r20, Y+2	; 0x02
    50ea:	5b 81       	ldd	r21, Y+3	; 0x03
    50ec:	9e 01       	movw	r18, r28
    50ee:	41 15       	cp	r20, r1
    50f0:	51 05       	cpc	r21, r1
    50f2:	f1 f0       	breq	.+60     	; 0x5130 <free+0x92>
    50f4:	ea 01       	movw	r28, r20
    50f6:	f5 cf       	rjmp	.-22     	; 0x50e2 <free+0x44>
    50f8:	d3 83       	std	Z+3, r29	; 0x03
    50fa:	c2 83       	std	Z+2, r28	; 0x02
    50fc:	40 81       	ld	r20, Z
    50fe:	51 81       	ldd	r21, Z+1	; 0x01
    5100:	84 0f       	add	r24, r20
    5102:	95 1f       	adc	r25, r21
    5104:	c8 17       	cp	r28, r24
    5106:	d9 07       	cpc	r29, r25
    5108:	59 f4       	brne	.+22     	; 0x5120 <free+0x82>
    510a:	88 81       	ld	r24, Y
    510c:	99 81       	ldd	r25, Y+1	; 0x01
    510e:	84 0f       	add	r24, r20
    5110:	95 1f       	adc	r25, r21
    5112:	02 96       	adiw	r24, 0x02	; 2
    5114:	91 83       	std	Z+1, r25	; 0x01
    5116:	80 83       	st	Z, r24
    5118:	8a 81       	ldd	r24, Y+2	; 0x02
    511a:	9b 81       	ldd	r25, Y+3	; 0x03
    511c:	93 83       	std	Z+3, r25	; 0x03
    511e:	82 83       	std	Z+2, r24	; 0x02
    5120:	21 15       	cp	r18, r1
    5122:	31 05       	cpc	r19, r1
    5124:	29 f4       	brne	.+10     	; 0x5130 <free+0x92>
    5126:	f0 93 00 15 	sts	0x1500, r31	; 0x801500 <__flp+0x1>
    512a:	e0 93 ff 14 	sts	0x14FF, r30	; 0x8014ff <__flp>
    512e:	3d c0       	rjmp	.+122    	; 0x51aa <free+0x10c>
    5130:	e9 01       	movw	r28, r18
    5132:	fb 83       	std	Y+3, r31	; 0x03
    5134:	ea 83       	std	Y+2, r30	; 0x02
    5136:	49 91       	ld	r20, Y+
    5138:	59 91       	ld	r21, Y+
    513a:	c4 0f       	add	r28, r20
    513c:	d5 1f       	adc	r29, r21
    513e:	ec 17       	cp	r30, r28
    5140:	fd 07       	cpc	r31, r29
    5142:	61 f4       	brne	.+24     	; 0x515c <free+0xbe>
    5144:	80 81       	ld	r24, Z
    5146:	91 81       	ldd	r25, Z+1	; 0x01
    5148:	84 0f       	add	r24, r20
    514a:	95 1f       	adc	r25, r21
    514c:	02 96       	adiw	r24, 0x02	; 2
    514e:	e9 01       	movw	r28, r18
    5150:	99 83       	std	Y+1, r25	; 0x01
    5152:	88 83       	st	Y, r24
    5154:	82 81       	ldd	r24, Z+2	; 0x02
    5156:	93 81       	ldd	r25, Z+3	; 0x03
    5158:	9b 83       	std	Y+3, r25	; 0x03
    515a:	8a 83       	std	Y+2, r24	; 0x02
    515c:	e0 e0       	ldi	r30, 0x00	; 0
    515e:	f0 e0       	ldi	r31, 0x00	; 0
    5160:	12 96       	adiw	r26, 0x02	; 2
    5162:	8d 91       	ld	r24, X+
    5164:	9c 91       	ld	r25, X
    5166:	13 97       	sbiw	r26, 0x03	; 3
    5168:	00 97       	sbiw	r24, 0x00	; 0
    516a:	19 f0       	breq	.+6      	; 0x5172 <free+0xd4>
    516c:	fd 01       	movw	r30, r26
    516e:	dc 01       	movw	r26, r24
    5170:	f7 cf       	rjmp	.-18     	; 0x5160 <free+0xc2>
    5172:	8d 91       	ld	r24, X+
    5174:	9c 91       	ld	r25, X
    5176:	11 97       	sbiw	r26, 0x01	; 1
    5178:	9d 01       	movw	r18, r26
    517a:	2e 5f       	subi	r18, 0xFE	; 254
    517c:	3f 4f       	sbci	r19, 0xFF	; 255
    517e:	82 0f       	add	r24, r18
    5180:	93 1f       	adc	r25, r19
    5182:	20 91 fd 14 	lds	r18, 0x14FD	; 0x8014fd <__brkval>
    5186:	30 91 fe 14 	lds	r19, 0x14FE	; 0x8014fe <__brkval+0x1>
    518a:	28 17       	cp	r18, r24
    518c:	39 07       	cpc	r19, r25
    518e:	69 f4       	brne	.+26     	; 0x51aa <free+0x10c>
    5190:	30 97       	sbiw	r30, 0x00	; 0
    5192:	29 f4       	brne	.+10     	; 0x519e <free+0x100>
    5194:	10 92 00 15 	sts	0x1500, r1	; 0x801500 <__flp+0x1>
    5198:	10 92 ff 14 	sts	0x14FF, r1	; 0x8014ff <__flp>
    519c:	02 c0       	rjmp	.+4      	; 0x51a2 <free+0x104>
    519e:	13 82       	std	Z+3, r1	; 0x03
    51a0:	12 82       	std	Z+2, r1	; 0x02
    51a2:	b0 93 fe 14 	sts	0x14FE, r27	; 0x8014fe <__brkval+0x1>
    51a6:	a0 93 fd 14 	sts	0x14FD, r26	; 0x8014fd <__brkval>
    51aa:	df 91       	pop	r29
    51ac:	cf 91       	pop	r28
    51ae:	08 95       	ret

000051b0 <do_rand>:
    51b0:	8f 92       	push	r8
    51b2:	9f 92       	push	r9
    51b4:	af 92       	push	r10
    51b6:	bf 92       	push	r11
    51b8:	cf 92       	push	r12
    51ba:	df 92       	push	r13
    51bc:	ef 92       	push	r14
    51be:	ff 92       	push	r15
    51c0:	cf 93       	push	r28
    51c2:	df 93       	push	r29
    51c4:	ec 01       	movw	r28, r24
    51c6:	68 81       	ld	r22, Y
    51c8:	79 81       	ldd	r23, Y+1	; 0x01
    51ca:	8a 81       	ldd	r24, Y+2	; 0x02
    51cc:	9b 81       	ldd	r25, Y+3	; 0x03
    51ce:	61 15       	cp	r22, r1
    51d0:	71 05       	cpc	r23, r1
    51d2:	81 05       	cpc	r24, r1
    51d4:	91 05       	cpc	r25, r1
    51d6:	21 f4       	brne	.+8      	; 0x51e0 <do_rand+0x30>
    51d8:	64 e2       	ldi	r22, 0x24	; 36
    51da:	79 ed       	ldi	r23, 0xD9	; 217
    51dc:	8b e5       	ldi	r24, 0x5B	; 91
    51de:	97 e0       	ldi	r25, 0x07	; 7
    51e0:	2d e1       	ldi	r18, 0x1D	; 29
    51e2:	33 ef       	ldi	r19, 0xF3	; 243
    51e4:	41 e0       	ldi	r20, 0x01	; 1
    51e6:	50 e0       	ldi	r21, 0x00	; 0
    51e8:	3c d3       	rcall	.+1656   	; 0x5862 <__divmodsi4>
    51ea:	49 01       	movw	r8, r18
    51ec:	5a 01       	movw	r10, r20
    51ee:	9b 01       	movw	r18, r22
    51f0:	ac 01       	movw	r20, r24
    51f2:	a7 ea       	ldi	r26, 0xA7	; 167
    51f4:	b1 e4       	ldi	r27, 0x41	; 65
    51f6:	51 d3       	rcall	.+1698   	; 0x589a <__muluhisi3>
    51f8:	6b 01       	movw	r12, r22
    51fa:	7c 01       	movw	r14, r24
    51fc:	ac ee       	ldi	r26, 0xEC	; 236
    51fe:	b4 ef       	ldi	r27, 0xF4	; 244
    5200:	a5 01       	movw	r20, r10
    5202:	94 01       	movw	r18, r8
    5204:	56 d3       	rcall	.+1708   	; 0x58b2 <__mulohisi3>
    5206:	dc 01       	movw	r26, r24
    5208:	cb 01       	movw	r24, r22
    520a:	8c 0d       	add	r24, r12
    520c:	9d 1d       	adc	r25, r13
    520e:	ae 1d       	adc	r26, r14
    5210:	bf 1d       	adc	r27, r15
    5212:	b7 ff       	sbrs	r27, 7
    5214:	03 c0       	rjmp	.+6      	; 0x521c <do_rand+0x6c>
    5216:	01 97       	sbiw	r24, 0x01	; 1
    5218:	a1 09       	sbc	r26, r1
    521a:	b0 48       	sbci	r27, 0x80	; 128
    521c:	88 83       	st	Y, r24
    521e:	99 83       	std	Y+1, r25	; 0x01
    5220:	aa 83       	std	Y+2, r26	; 0x02
    5222:	bb 83       	std	Y+3, r27	; 0x03
    5224:	9f 77       	andi	r25, 0x7F	; 127
    5226:	df 91       	pop	r29
    5228:	cf 91       	pop	r28
    522a:	ff 90       	pop	r15
    522c:	ef 90       	pop	r14
    522e:	df 90       	pop	r13
    5230:	cf 90       	pop	r12
    5232:	bf 90       	pop	r11
    5234:	af 90       	pop	r10
    5236:	9f 90       	pop	r9
    5238:	8f 90       	pop	r8
    523a:	08 95       	ret

0000523c <rand_r>:
    523c:	b9 cf       	rjmp	.-142    	; 0x51b0 <do_rand>

0000523e <rand>:
    523e:	86 e0       	ldi	r24, 0x06	; 6
    5240:	92 e0       	ldi	r25, 0x02	; 2
    5242:	b6 cf       	rjmp	.-148    	; 0x51b0 <do_rand>

00005244 <srand>:
    5244:	a0 e0       	ldi	r26, 0x00	; 0
    5246:	b0 e0       	ldi	r27, 0x00	; 0
    5248:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <next>
    524c:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <next+0x1>
    5250:	a0 93 08 02 	sts	0x0208, r26	; 0x800208 <next+0x2>
    5254:	b0 93 09 02 	sts	0x0209, r27	; 0x800209 <next+0x3>
    5258:	08 95       	ret

0000525a <abort>:
    525a:	81 e0       	ldi	r24, 0x01	; 1
    525c:	90 e0       	ldi	r25, 0x00	; 0
    525e:	f8 94       	cli
    5260:	3b c3       	rjmp	.+1654   	; 0x58d8 <_exit>

00005262 <memcpy>:
    5262:	fb 01       	movw	r30, r22
    5264:	dc 01       	movw	r26, r24
    5266:	02 c0       	rjmp	.+4      	; 0x526c <memcpy+0xa>
    5268:	01 90       	ld	r0, Z+
    526a:	0d 92       	st	X+, r0
    526c:	41 50       	subi	r20, 0x01	; 1
    526e:	50 40       	sbci	r21, 0x00	; 0
    5270:	d8 f7       	brcc	.-10     	; 0x5268 <memcpy+0x6>
    5272:	08 95       	ret

00005274 <memset>:
    5274:	dc 01       	movw	r26, r24
    5276:	01 c0       	rjmp	.+2      	; 0x527a <memset+0x6>
    5278:	6d 93       	st	X+, r22
    527a:	41 50       	subi	r20, 0x01	; 1
    527c:	50 40       	sbci	r21, 0x00	; 0
    527e:	e0 f7       	brcc	.-8      	; 0x5278 <memset+0x4>
    5280:	08 95       	ret

00005282 <printf>:
    5282:	cf 93       	push	r28
    5284:	df 93       	push	r29
    5286:	cd b7       	in	r28, 0x3d	; 61
    5288:	de b7       	in	r29, 0x3e	; 62
    528a:	ae 01       	movw	r20, r28
    528c:	4a 5f       	subi	r20, 0xFA	; 250
    528e:	5f 4f       	sbci	r21, 0xFF	; 255
    5290:	fa 01       	movw	r30, r20
    5292:	61 91       	ld	r22, Z+
    5294:	71 91       	ld	r23, Z+
    5296:	af 01       	movw	r20, r30
    5298:	80 91 03 15 	lds	r24, 0x1503	; 0x801503 <__iob+0x2>
    529c:	90 91 04 15 	lds	r25, 0x1504	; 0x801504 <__iob+0x3>
    52a0:	33 d0       	rcall	.+102    	; 0x5308 <vfprintf>
    52a2:	df 91       	pop	r29
    52a4:	cf 91       	pop	r28
    52a6:	08 95       	ret

000052a8 <puts>:
    52a8:	0f 93       	push	r16
    52aa:	1f 93       	push	r17
    52ac:	cf 93       	push	r28
    52ae:	df 93       	push	r29
    52b0:	e0 91 03 15 	lds	r30, 0x1503	; 0x801503 <__iob+0x2>
    52b4:	f0 91 04 15 	lds	r31, 0x1504	; 0x801504 <__iob+0x3>
    52b8:	23 81       	ldd	r18, Z+3	; 0x03
    52ba:	21 ff       	sbrs	r18, 1
    52bc:	1b c0       	rjmp	.+54     	; 0x52f4 <puts+0x4c>
    52be:	8c 01       	movw	r16, r24
    52c0:	d0 e0       	ldi	r29, 0x00	; 0
    52c2:	c0 e0       	ldi	r28, 0x00	; 0
    52c4:	f8 01       	movw	r30, r16
    52c6:	81 91       	ld	r24, Z+
    52c8:	8f 01       	movw	r16, r30
    52ca:	60 91 03 15 	lds	r22, 0x1503	; 0x801503 <__iob+0x2>
    52ce:	70 91 04 15 	lds	r23, 0x1504	; 0x801504 <__iob+0x3>
    52d2:	db 01       	movw	r26, r22
    52d4:	18 96       	adiw	r26, 0x08	; 8
    52d6:	ed 91       	ld	r30, X+
    52d8:	fc 91       	ld	r31, X
    52da:	19 97       	sbiw	r26, 0x09	; 9
    52dc:	88 23       	and	r24, r24
    52de:	31 f0       	breq	.+12     	; 0x52ec <puts+0x44>
    52e0:	19 95       	eicall
    52e2:	89 2b       	or	r24, r25
    52e4:	79 f3       	breq	.-34     	; 0x52c4 <puts+0x1c>
    52e6:	df ef       	ldi	r29, 0xFF	; 255
    52e8:	cf ef       	ldi	r28, 0xFF	; 255
    52ea:	ec cf       	rjmp	.-40     	; 0x52c4 <puts+0x1c>
    52ec:	8a e0       	ldi	r24, 0x0A	; 10
    52ee:	19 95       	eicall
    52f0:	89 2b       	or	r24, r25
    52f2:	19 f0       	breq	.+6      	; 0x52fa <puts+0x52>
    52f4:	8f ef       	ldi	r24, 0xFF	; 255
    52f6:	9f ef       	ldi	r25, 0xFF	; 255
    52f8:	02 c0       	rjmp	.+4      	; 0x52fe <puts+0x56>
    52fa:	8d 2f       	mov	r24, r29
    52fc:	9c 2f       	mov	r25, r28
    52fe:	df 91       	pop	r29
    5300:	cf 91       	pop	r28
    5302:	1f 91       	pop	r17
    5304:	0f 91       	pop	r16
    5306:	08 95       	ret

00005308 <vfprintf>:
    5308:	2f 92       	push	r2
    530a:	3f 92       	push	r3
    530c:	4f 92       	push	r4
    530e:	5f 92       	push	r5
    5310:	6f 92       	push	r6
    5312:	7f 92       	push	r7
    5314:	8f 92       	push	r8
    5316:	9f 92       	push	r9
    5318:	af 92       	push	r10
    531a:	bf 92       	push	r11
    531c:	cf 92       	push	r12
    531e:	df 92       	push	r13
    5320:	ef 92       	push	r14
    5322:	ff 92       	push	r15
    5324:	0f 93       	push	r16
    5326:	1f 93       	push	r17
    5328:	cf 93       	push	r28
    532a:	df 93       	push	r29
    532c:	cd b7       	in	r28, 0x3d	; 61
    532e:	de b7       	in	r29, 0x3e	; 62
    5330:	2b 97       	sbiw	r28, 0x0b	; 11
    5332:	0f b6       	in	r0, 0x3f	; 63
    5334:	f8 94       	cli
    5336:	de bf       	out	0x3e, r29	; 62
    5338:	0f be       	out	0x3f, r0	; 63
    533a:	cd bf       	out	0x3d, r28	; 61
    533c:	6c 01       	movw	r12, r24
    533e:	7b 01       	movw	r14, r22
    5340:	8a 01       	movw	r16, r20
    5342:	fc 01       	movw	r30, r24
    5344:	17 82       	std	Z+7, r1	; 0x07
    5346:	16 82       	std	Z+6, r1	; 0x06
    5348:	83 81       	ldd	r24, Z+3	; 0x03
    534a:	81 ff       	sbrs	r24, 1
    534c:	bf c1       	rjmp	.+894    	; 0x56cc <vfprintf+0x3c4>
    534e:	ce 01       	movw	r24, r28
    5350:	01 96       	adiw	r24, 0x01	; 1
    5352:	3c 01       	movw	r6, r24
    5354:	f6 01       	movw	r30, r12
    5356:	93 81       	ldd	r25, Z+3	; 0x03
    5358:	f7 01       	movw	r30, r14
    535a:	93 fd       	sbrc	r25, 3
    535c:	85 91       	lpm	r24, Z+
    535e:	93 ff       	sbrs	r25, 3
    5360:	81 91       	ld	r24, Z+
    5362:	7f 01       	movw	r14, r30
    5364:	88 23       	and	r24, r24
    5366:	09 f4       	brne	.+2      	; 0x536a <vfprintf+0x62>
    5368:	ad c1       	rjmp	.+858    	; 0x56c4 <vfprintf+0x3bc>
    536a:	85 32       	cpi	r24, 0x25	; 37
    536c:	39 f4       	brne	.+14     	; 0x537c <vfprintf+0x74>
    536e:	93 fd       	sbrc	r25, 3
    5370:	85 91       	lpm	r24, Z+
    5372:	93 ff       	sbrs	r25, 3
    5374:	81 91       	ld	r24, Z+
    5376:	7f 01       	movw	r14, r30
    5378:	85 32       	cpi	r24, 0x25	; 37
    537a:	21 f4       	brne	.+8      	; 0x5384 <vfprintf+0x7c>
    537c:	b6 01       	movw	r22, r12
    537e:	90 e0       	ldi	r25, 0x00	; 0
    5380:	d6 d1       	rcall	.+940    	; 0x572e <fputc>
    5382:	e8 cf       	rjmp	.-48     	; 0x5354 <vfprintf+0x4c>
    5384:	91 2c       	mov	r9, r1
    5386:	21 2c       	mov	r2, r1
    5388:	31 2c       	mov	r3, r1
    538a:	ff e1       	ldi	r31, 0x1F	; 31
    538c:	f3 15       	cp	r31, r3
    538e:	d8 f0       	brcs	.+54     	; 0x53c6 <vfprintf+0xbe>
    5390:	8b 32       	cpi	r24, 0x2B	; 43
    5392:	79 f0       	breq	.+30     	; 0x53b2 <vfprintf+0xaa>
    5394:	38 f4       	brcc	.+14     	; 0x53a4 <vfprintf+0x9c>
    5396:	80 32       	cpi	r24, 0x20	; 32
    5398:	79 f0       	breq	.+30     	; 0x53b8 <vfprintf+0xb0>
    539a:	83 32       	cpi	r24, 0x23	; 35
    539c:	a1 f4       	brne	.+40     	; 0x53c6 <vfprintf+0xbe>
    539e:	23 2d       	mov	r18, r3
    53a0:	20 61       	ori	r18, 0x10	; 16
    53a2:	1d c0       	rjmp	.+58     	; 0x53de <vfprintf+0xd6>
    53a4:	8d 32       	cpi	r24, 0x2D	; 45
    53a6:	61 f0       	breq	.+24     	; 0x53c0 <vfprintf+0xb8>
    53a8:	80 33       	cpi	r24, 0x30	; 48
    53aa:	69 f4       	brne	.+26     	; 0x53c6 <vfprintf+0xbe>
    53ac:	23 2d       	mov	r18, r3
    53ae:	21 60       	ori	r18, 0x01	; 1
    53b0:	16 c0       	rjmp	.+44     	; 0x53de <vfprintf+0xd6>
    53b2:	83 2d       	mov	r24, r3
    53b4:	82 60       	ori	r24, 0x02	; 2
    53b6:	38 2e       	mov	r3, r24
    53b8:	e3 2d       	mov	r30, r3
    53ba:	e4 60       	ori	r30, 0x04	; 4
    53bc:	3e 2e       	mov	r3, r30
    53be:	2a c0       	rjmp	.+84     	; 0x5414 <vfprintf+0x10c>
    53c0:	f3 2d       	mov	r31, r3
    53c2:	f8 60       	ori	r31, 0x08	; 8
    53c4:	1d c0       	rjmp	.+58     	; 0x5400 <vfprintf+0xf8>
    53c6:	37 fc       	sbrc	r3, 7
    53c8:	2d c0       	rjmp	.+90     	; 0x5424 <vfprintf+0x11c>
    53ca:	20 ed       	ldi	r18, 0xD0	; 208
    53cc:	28 0f       	add	r18, r24
    53ce:	2a 30       	cpi	r18, 0x0A	; 10
    53d0:	40 f0       	brcs	.+16     	; 0x53e2 <vfprintf+0xda>
    53d2:	8e 32       	cpi	r24, 0x2E	; 46
    53d4:	b9 f4       	brne	.+46     	; 0x5404 <vfprintf+0xfc>
    53d6:	36 fc       	sbrc	r3, 6
    53d8:	75 c1       	rjmp	.+746    	; 0x56c4 <vfprintf+0x3bc>
    53da:	23 2d       	mov	r18, r3
    53dc:	20 64       	ori	r18, 0x40	; 64
    53de:	32 2e       	mov	r3, r18
    53e0:	19 c0       	rjmp	.+50     	; 0x5414 <vfprintf+0x10c>
    53e2:	36 fe       	sbrs	r3, 6
    53e4:	06 c0       	rjmp	.+12     	; 0x53f2 <vfprintf+0xea>
    53e6:	8a e0       	ldi	r24, 0x0A	; 10
    53e8:	98 9e       	mul	r9, r24
    53ea:	20 0d       	add	r18, r0
    53ec:	11 24       	eor	r1, r1
    53ee:	92 2e       	mov	r9, r18
    53f0:	11 c0       	rjmp	.+34     	; 0x5414 <vfprintf+0x10c>
    53f2:	ea e0       	ldi	r30, 0x0A	; 10
    53f4:	2e 9e       	mul	r2, r30
    53f6:	20 0d       	add	r18, r0
    53f8:	11 24       	eor	r1, r1
    53fa:	22 2e       	mov	r2, r18
    53fc:	f3 2d       	mov	r31, r3
    53fe:	f0 62       	ori	r31, 0x20	; 32
    5400:	3f 2e       	mov	r3, r31
    5402:	08 c0       	rjmp	.+16     	; 0x5414 <vfprintf+0x10c>
    5404:	8c 36       	cpi	r24, 0x6C	; 108
    5406:	21 f4       	brne	.+8      	; 0x5410 <vfprintf+0x108>
    5408:	83 2d       	mov	r24, r3
    540a:	80 68       	ori	r24, 0x80	; 128
    540c:	38 2e       	mov	r3, r24
    540e:	02 c0       	rjmp	.+4      	; 0x5414 <vfprintf+0x10c>
    5410:	88 36       	cpi	r24, 0x68	; 104
    5412:	41 f4       	brne	.+16     	; 0x5424 <vfprintf+0x11c>
    5414:	f7 01       	movw	r30, r14
    5416:	93 fd       	sbrc	r25, 3
    5418:	85 91       	lpm	r24, Z+
    541a:	93 ff       	sbrs	r25, 3
    541c:	81 91       	ld	r24, Z+
    541e:	7f 01       	movw	r14, r30
    5420:	81 11       	cpse	r24, r1
    5422:	b3 cf       	rjmp	.-154    	; 0x538a <vfprintf+0x82>
    5424:	98 2f       	mov	r25, r24
    5426:	9f 7d       	andi	r25, 0xDF	; 223
    5428:	95 54       	subi	r25, 0x45	; 69
    542a:	93 30       	cpi	r25, 0x03	; 3
    542c:	28 f4       	brcc	.+10     	; 0x5438 <vfprintf+0x130>
    542e:	0c 5f       	subi	r16, 0xFC	; 252
    5430:	1f 4f       	sbci	r17, 0xFF	; 255
    5432:	9f e3       	ldi	r25, 0x3F	; 63
    5434:	99 83       	std	Y+1, r25	; 0x01
    5436:	0d c0       	rjmp	.+26     	; 0x5452 <vfprintf+0x14a>
    5438:	83 36       	cpi	r24, 0x63	; 99
    543a:	31 f0       	breq	.+12     	; 0x5448 <vfprintf+0x140>
    543c:	83 37       	cpi	r24, 0x73	; 115
    543e:	71 f0       	breq	.+28     	; 0x545c <vfprintf+0x154>
    5440:	83 35       	cpi	r24, 0x53	; 83
    5442:	09 f0       	breq	.+2      	; 0x5446 <vfprintf+0x13e>
    5444:	55 c0       	rjmp	.+170    	; 0x54f0 <vfprintf+0x1e8>
    5446:	20 c0       	rjmp	.+64     	; 0x5488 <vfprintf+0x180>
    5448:	f8 01       	movw	r30, r16
    544a:	80 81       	ld	r24, Z
    544c:	89 83       	std	Y+1, r24	; 0x01
    544e:	0e 5f       	subi	r16, 0xFE	; 254
    5450:	1f 4f       	sbci	r17, 0xFF	; 255
    5452:	88 24       	eor	r8, r8
    5454:	83 94       	inc	r8
    5456:	91 2c       	mov	r9, r1
    5458:	53 01       	movw	r10, r6
    545a:	12 c0       	rjmp	.+36     	; 0x5480 <vfprintf+0x178>
    545c:	28 01       	movw	r4, r16
    545e:	f2 e0       	ldi	r31, 0x02	; 2
    5460:	4f 0e       	add	r4, r31
    5462:	51 1c       	adc	r5, r1
    5464:	f8 01       	movw	r30, r16
    5466:	a0 80       	ld	r10, Z
    5468:	b1 80       	ldd	r11, Z+1	; 0x01
    546a:	36 fe       	sbrs	r3, 6
    546c:	03 c0       	rjmp	.+6      	; 0x5474 <vfprintf+0x16c>
    546e:	69 2d       	mov	r22, r9
    5470:	70 e0       	ldi	r23, 0x00	; 0
    5472:	02 c0       	rjmp	.+4      	; 0x5478 <vfprintf+0x170>
    5474:	6f ef       	ldi	r22, 0xFF	; 255
    5476:	7f ef       	ldi	r23, 0xFF	; 255
    5478:	c5 01       	movw	r24, r10
    547a:	4e d1       	rcall	.+668    	; 0x5718 <strnlen>
    547c:	4c 01       	movw	r8, r24
    547e:	82 01       	movw	r16, r4
    5480:	f3 2d       	mov	r31, r3
    5482:	ff 77       	andi	r31, 0x7F	; 127
    5484:	3f 2e       	mov	r3, r31
    5486:	15 c0       	rjmp	.+42     	; 0x54b2 <vfprintf+0x1aa>
    5488:	28 01       	movw	r4, r16
    548a:	22 e0       	ldi	r18, 0x02	; 2
    548c:	42 0e       	add	r4, r18
    548e:	51 1c       	adc	r5, r1
    5490:	f8 01       	movw	r30, r16
    5492:	a0 80       	ld	r10, Z
    5494:	b1 80       	ldd	r11, Z+1	; 0x01
    5496:	36 fe       	sbrs	r3, 6
    5498:	03 c0       	rjmp	.+6      	; 0x54a0 <vfprintf+0x198>
    549a:	69 2d       	mov	r22, r9
    549c:	70 e0       	ldi	r23, 0x00	; 0
    549e:	02 c0       	rjmp	.+4      	; 0x54a4 <vfprintf+0x19c>
    54a0:	6f ef       	ldi	r22, 0xFF	; 255
    54a2:	7f ef       	ldi	r23, 0xFF	; 255
    54a4:	c5 01       	movw	r24, r10
    54a6:	2d d1       	rcall	.+602    	; 0x5702 <strnlen_P>
    54a8:	4c 01       	movw	r8, r24
    54aa:	f3 2d       	mov	r31, r3
    54ac:	f0 68       	ori	r31, 0x80	; 128
    54ae:	3f 2e       	mov	r3, r31
    54b0:	82 01       	movw	r16, r4
    54b2:	33 fc       	sbrc	r3, 3
    54b4:	19 c0       	rjmp	.+50     	; 0x54e8 <vfprintf+0x1e0>
    54b6:	82 2d       	mov	r24, r2
    54b8:	90 e0       	ldi	r25, 0x00	; 0
    54ba:	88 16       	cp	r8, r24
    54bc:	99 06       	cpc	r9, r25
    54be:	a0 f4       	brcc	.+40     	; 0x54e8 <vfprintf+0x1e0>
    54c0:	b6 01       	movw	r22, r12
    54c2:	80 e2       	ldi	r24, 0x20	; 32
    54c4:	90 e0       	ldi	r25, 0x00	; 0
    54c6:	33 d1       	rcall	.+614    	; 0x572e <fputc>
    54c8:	2a 94       	dec	r2
    54ca:	f5 cf       	rjmp	.-22     	; 0x54b6 <vfprintf+0x1ae>
    54cc:	f5 01       	movw	r30, r10
    54ce:	37 fc       	sbrc	r3, 7
    54d0:	85 91       	lpm	r24, Z+
    54d2:	37 fe       	sbrs	r3, 7
    54d4:	81 91       	ld	r24, Z+
    54d6:	5f 01       	movw	r10, r30
    54d8:	b6 01       	movw	r22, r12
    54da:	90 e0       	ldi	r25, 0x00	; 0
    54dc:	28 d1       	rcall	.+592    	; 0x572e <fputc>
    54de:	21 10       	cpse	r2, r1
    54e0:	2a 94       	dec	r2
    54e2:	21 e0       	ldi	r18, 0x01	; 1
    54e4:	82 1a       	sub	r8, r18
    54e6:	91 08       	sbc	r9, r1
    54e8:	81 14       	cp	r8, r1
    54ea:	91 04       	cpc	r9, r1
    54ec:	79 f7       	brne	.-34     	; 0x54cc <vfprintf+0x1c4>
    54ee:	e1 c0       	rjmp	.+450    	; 0x56b2 <vfprintf+0x3aa>
    54f0:	84 36       	cpi	r24, 0x64	; 100
    54f2:	11 f0       	breq	.+4      	; 0x54f8 <vfprintf+0x1f0>
    54f4:	89 36       	cpi	r24, 0x69	; 105
    54f6:	39 f5       	brne	.+78     	; 0x5546 <vfprintf+0x23e>
    54f8:	f8 01       	movw	r30, r16
    54fa:	37 fe       	sbrs	r3, 7
    54fc:	07 c0       	rjmp	.+14     	; 0x550c <vfprintf+0x204>
    54fe:	60 81       	ld	r22, Z
    5500:	71 81       	ldd	r23, Z+1	; 0x01
    5502:	82 81       	ldd	r24, Z+2	; 0x02
    5504:	93 81       	ldd	r25, Z+3	; 0x03
    5506:	0c 5f       	subi	r16, 0xFC	; 252
    5508:	1f 4f       	sbci	r17, 0xFF	; 255
    550a:	08 c0       	rjmp	.+16     	; 0x551c <vfprintf+0x214>
    550c:	60 81       	ld	r22, Z
    550e:	71 81       	ldd	r23, Z+1	; 0x01
    5510:	07 2e       	mov	r0, r23
    5512:	00 0c       	add	r0, r0
    5514:	88 0b       	sbc	r24, r24
    5516:	99 0b       	sbc	r25, r25
    5518:	0e 5f       	subi	r16, 0xFE	; 254
    551a:	1f 4f       	sbci	r17, 0xFF	; 255
    551c:	f3 2d       	mov	r31, r3
    551e:	ff 76       	andi	r31, 0x6F	; 111
    5520:	3f 2e       	mov	r3, r31
    5522:	97 ff       	sbrs	r25, 7
    5524:	09 c0       	rjmp	.+18     	; 0x5538 <vfprintf+0x230>
    5526:	90 95       	com	r25
    5528:	80 95       	com	r24
    552a:	70 95       	com	r23
    552c:	61 95       	neg	r22
    552e:	7f 4f       	sbci	r23, 0xFF	; 255
    5530:	8f 4f       	sbci	r24, 0xFF	; 255
    5532:	9f 4f       	sbci	r25, 0xFF	; 255
    5534:	f0 68       	ori	r31, 0x80	; 128
    5536:	3f 2e       	mov	r3, r31
    5538:	2a e0       	ldi	r18, 0x0A	; 10
    553a:	30 e0       	ldi	r19, 0x00	; 0
    553c:	a3 01       	movw	r20, r6
    553e:	33 d1       	rcall	.+614    	; 0x57a6 <__ultoa_invert>
    5540:	88 2e       	mov	r8, r24
    5542:	86 18       	sub	r8, r6
    5544:	44 c0       	rjmp	.+136    	; 0x55ce <vfprintf+0x2c6>
    5546:	85 37       	cpi	r24, 0x75	; 117
    5548:	31 f4       	brne	.+12     	; 0x5556 <vfprintf+0x24e>
    554a:	23 2d       	mov	r18, r3
    554c:	2f 7e       	andi	r18, 0xEF	; 239
    554e:	b2 2e       	mov	r11, r18
    5550:	2a e0       	ldi	r18, 0x0A	; 10
    5552:	30 e0       	ldi	r19, 0x00	; 0
    5554:	25 c0       	rjmp	.+74     	; 0x55a0 <vfprintf+0x298>
    5556:	93 2d       	mov	r25, r3
    5558:	99 7f       	andi	r25, 0xF9	; 249
    555a:	b9 2e       	mov	r11, r25
    555c:	8f 36       	cpi	r24, 0x6F	; 111
    555e:	c1 f0       	breq	.+48     	; 0x5590 <vfprintf+0x288>
    5560:	18 f4       	brcc	.+6      	; 0x5568 <vfprintf+0x260>
    5562:	88 35       	cpi	r24, 0x58	; 88
    5564:	79 f0       	breq	.+30     	; 0x5584 <vfprintf+0x27c>
    5566:	ae c0       	rjmp	.+348    	; 0x56c4 <vfprintf+0x3bc>
    5568:	80 37       	cpi	r24, 0x70	; 112
    556a:	19 f0       	breq	.+6      	; 0x5572 <vfprintf+0x26a>
    556c:	88 37       	cpi	r24, 0x78	; 120
    556e:	21 f0       	breq	.+8      	; 0x5578 <vfprintf+0x270>
    5570:	a9 c0       	rjmp	.+338    	; 0x56c4 <vfprintf+0x3bc>
    5572:	e9 2f       	mov	r30, r25
    5574:	e0 61       	ori	r30, 0x10	; 16
    5576:	be 2e       	mov	r11, r30
    5578:	b4 fe       	sbrs	r11, 4
    557a:	0d c0       	rjmp	.+26     	; 0x5596 <vfprintf+0x28e>
    557c:	fb 2d       	mov	r31, r11
    557e:	f4 60       	ori	r31, 0x04	; 4
    5580:	bf 2e       	mov	r11, r31
    5582:	09 c0       	rjmp	.+18     	; 0x5596 <vfprintf+0x28e>
    5584:	34 fe       	sbrs	r3, 4
    5586:	0a c0       	rjmp	.+20     	; 0x559c <vfprintf+0x294>
    5588:	29 2f       	mov	r18, r25
    558a:	26 60       	ori	r18, 0x06	; 6
    558c:	b2 2e       	mov	r11, r18
    558e:	06 c0       	rjmp	.+12     	; 0x559c <vfprintf+0x294>
    5590:	28 e0       	ldi	r18, 0x08	; 8
    5592:	30 e0       	ldi	r19, 0x00	; 0
    5594:	05 c0       	rjmp	.+10     	; 0x55a0 <vfprintf+0x298>
    5596:	20 e1       	ldi	r18, 0x10	; 16
    5598:	30 e0       	ldi	r19, 0x00	; 0
    559a:	02 c0       	rjmp	.+4      	; 0x55a0 <vfprintf+0x298>
    559c:	20 e1       	ldi	r18, 0x10	; 16
    559e:	32 e0       	ldi	r19, 0x02	; 2
    55a0:	f8 01       	movw	r30, r16
    55a2:	b7 fe       	sbrs	r11, 7
    55a4:	07 c0       	rjmp	.+14     	; 0x55b4 <vfprintf+0x2ac>
    55a6:	60 81       	ld	r22, Z
    55a8:	71 81       	ldd	r23, Z+1	; 0x01
    55aa:	82 81       	ldd	r24, Z+2	; 0x02
    55ac:	93 81       	ldd	r25, Z+3	; 0x03
    55ae:	0c 5f       	subi	r16, 0xFC	; 252
    55b0:	1f 4f       	sbci	r17, 0xFF	; 255
    55b2:	06 c0       	rjmp	.+12     	; 0x55c0 <vfprintf+0x2b8>
    55b4:	60 81       	ld	r22, Z
    55b6:	71 81       	ldd	r23, Z+1	; 0x01
    55b8:	80 e0       	ldi	r24, 0x00	; 0
    55ba:	90 e0       	ldi	r25, 0x00	; 0
    55bc:	0e 5f       	subi	r16, 0xFE	; 254
    55be:	1f 4f       	sbci	r17, 0xFF	; 255
    55c0:	a3 01       	movw	r20, r6
    55c2:	f1 d0       	rcall	.+482    	; 0x57a6 <__ultoa_invert>
    55c4:	88 2e       	mov	r8, r24
    55c6:	86 18       	sub	r8, r6
    55c8:	fb 2d       	mov	r31, r11
    55ca:	ff 77       	andi	r31, 0x7F	; 127
    55cc:	3f 2e       	mov	r3, r31
    55ce:	36 fe       	sbrs	r3, 6
    55d0:	0d c0       	rjmp	.+26     	; 0x55ec <vfprintf+0x2e4>
    55d2:	23 2d       	mov	r18, r3
    55d4:	2e 7f       	andi	r18, 0xFE	; 254
    55d6:	a2 2e       	mov	r10, r18
    55d8:	89 14       	cp	r8, r9
    55da:	58 f4       	brcc	.+22     	; 0x55f2 <vfprintf+0x2ea>
    55dc:	34 fe       	sbrs	r3, 4
    55de:	0b c0       	rjmp	.+22     	; 0x55f6 <vfprintf+0x2ee>
    55e0:	32 fc       	sbrc	r3, 2
    55e2:	09 c0       	rjmp	.+18     	; 0x55f6 <vfprintf+0x2ee>
    55e4:	83 2d       	mov	r24, r3
    55e6:	8e 7e       	andi	r24, 0xEE	; 238
    55e8:	a8 2e       	mov	r10, r24
    55ea:	05 c0       	rjmp	.+10     	; 0x55f6 <vfprintf+0x2ee>
    55ec:	b8 2c       	mov	r11, r8
    55ee:	a3 2c       	mov	r10, r3
    55f0:	03 c0       	rjmp	.+6      	; 0x55f8 <vfprintf+0x2f0>
    55f2:	b8 2c       	mov	r11, r8
    55f4:	01 c0       	rjmp	.+2      	; 0x55f8 <vfprintf+0x2f0>
    55f6:	b9 2c       	mov	r11, r9
    55f8:	a4 fe       	sbrs	r10, 4
    55fa:	0f c0       	rjmp	.+30     	; 0x561a <vfprintf+0x312>
    55fc:	fe 01       	movw	r30, r28
    55fe:	e8 0d       	add	r30, r8
    5600:	f1 1d       	adc	r31, r1
    5602:	80 81       	ld	r24, Z
    5604:	80 33       	cpi	r24, 0x30	; 48
    5606:	21 f4       	brne	.+8      	; 0x5610 <vfprintf+0x308>
    5608:	9a 2d       	mov	r25, r10
    560a:	99 7e       	andi	r25, 0xE9	; 233
    560c:	a9 2e       	mov	r10, r25
    560e:	09 c0       	rjmp	.+18     	; 0x5622 <vfprintf+0x31a>
    5610:	a2 fe       	sbrs	r10, 2
    5612:	06 c0       	rjmp	.+12     	; 0x5620 <vfprintf+0x318>
    5614:	b3 94       	inc	r11
    5616:	b3 94       	inc	r11
    5618:	04 c0       	rjmp	.+8      	; 0x5622 <vfprintf+0x31a>
    561a:	8a 2d       	mov	r24, r10
    561c:	86 78       	andi	r24, 0x86	; 134
    561e:	09 f0       	breq	.+2      	; 0x5622 <vfprintf+0x31a>
    5620:	b3 94       	inc	r11
    5622:	a3 fc       	sbrc	r10, 3
    5624:	10 c0       	rjmp	.+32     	; 0x5646 <vfprintf+0x33e>
    5626:	a0 fe       	sbrs	r10, 0
    5628:	06 c0       	rjmp	.+12     	; 0x5636 <vfprintf+0x32e>
    562a:	b2 14       	cp	r11, r2
    562c:	80 f4       	brcc	.+32     	; 0x564e <vfprintf+0x346>
    562e:	28 0c       	add	r2, r8
    5630:	92 2c       	mov	r9, r2
    5632:	9b 18       	sub	r9, r11
    5634:	0d c0       	rjmp	.+26     	; 0x5650 <vfprintf+0x348>
    5636:	b2 14       	cp	r11, r2
    5638:	58 f4       	brcc	.+22     	; 0x5650 <vfprintf+0x348>
    563a:	b6 01       	movw	r22, r12
    563c:	80 e2       	ldi	r24, 0x20	; 32
    563e:	90 e0       	ldi	r25, 0x00	; 0
    5640:	76 d0       	rcall	.+236    	; 0x572e <fputc>
    5642:	b3 94       	inc	r11
    5644:	f8 cf       	rjmp	.-16     	; 0x5636 <vfprintf+0x32e>
    5646:	b2 14       	cp	r11, r2
    5648:	18 f4       	brcc	.+6      	; 0x5650 <vfprintf+0x348>
    564a:	2b 18       	sub	r2, r11
    564c:	02 c0       	rjmp	.+4      	; 0x5652 <vfprintf+0x34a>
    564e:	98 2c       	mov	r9, r8
    5650:	21 2c       	mov	r2, r1
    5652:	a4 fe       	sbrs	r10, 4
    5654:	0f c0       	rjmp	.+30     	; 0x5674 <vfprintf+0x36c>
    5656:	b6 01       	movw	r22, r12
    5658:	80 e3       	ldi	r24, 0x30	; 48
    565a:	90 e0       	ldi	r25, 0x00	; 0
    565c:	68 d0       	rcall	.+208    	; 0x572e <fputc>
    565e:	a2 fe       	sbrs	r10, 2
    5660:	16 c0       	rjmp	.+44     	; 0x568e <vfprintf+0x386>
    5662:	a1 fc       	sbrc	r10, 1
    5664:	03 c0       	rjmp	.+6      	; 0x566c <vfprintf+0x364>
    5666:	88 e7       	ldi	r24, 0x78	; 120
    5668:	90 e0       	ldi	r25, 0x00	; 0
    566a:	02 c0       	rjmp	.+4      	; 0x5670 <vfprintf+0x368>
    566c:	88 e5       	ldi	r24, 0x58	; 88
    566e:	90 e0       	ldi	r25, 0x00	; 0
    5670:	b6 01       	movw	r22, r12
    5672:	0c c0       	rjmp	.+24     	; 0x568c <vfprintf+0x384>
    5674:	8a 2d       	mov	r24, r10
    5676:	86 78       	andi	r24, 0x86	; 134
    5678:	51 f0       	breq	.+20     	; 0x568e <vfprintf+0x386>
    567a:	a1 fe       	sbrs	r10, 1
    567c:	02 c0       	rjmp	.+4      	; 0x5682 <vfprintf+0x37a>
    567e:	8b e2       	ldi	r24, 0x2B	; 43
    5680:	01 c0       	rjmp	.+2      	; 0x5684 <vfprintf+0x37c>
    5682:	80 e2       	ldi	r24, 0x20	; 32
    5684:	a7 fc       	sbrc	r10, 7
    5686:	8d e2       	ldi	r24, 0x2D	; 45
    5688:	b6 01       	movw	r22, r12
    568a:	90 e0       	ldi	r25, 0x00	; 0
    568c:	50 d0       	rcall	.+160    	; 0x572e <fputc>
    568e:	89 14       	cp	r8, r9
    5690:	30 f4       	brcc	.+12     	; 0x569e <vfprintf+0x396>
    5692:	b6 01       	movw	r22, r12
    5694:	80 e3       	ldi	r24, 0x30	; 48
    5696:	90 e0       	ldi	r25, 0x00	; 0
    5698:	4a d0       	rcall	.+148    	; 0x572e <fputc>
    569a:	9a 94       	dec	r9
    569c:	f8 cf       	rjmp	.-16     	; 0x568e <vfprintf+0x386>
    569e:	8a 94       	dec	r8
    56a0:	f3 01       	movw	r30, r6
    56a2:	e8 0d       	add	r30, r8
    56a4:	f1 1d       	adc	r31, r1
    56a6:	80 81       	ld	r24, Z
    56a8:	b6 01       	movw	r22, r12
    56aa:	90 e0       	ldi	r25, 0x00	; 0
    56ac:	40 d0       	rcall	.+128    	; 0x572e <fputc>
    56ae:	81 10       	cpse	r8, r1
    56b0:	f6 cf       	rjmp	.-20     	; 0x569e <vfprintf+0x396>
    56b2:	22 20       	and	r2, r2
    56b4:	09 f4       	brne	.+2      	; 0x56b8 <vfprintf+0x3b0>
    56b6:	4e ce       	rjmp	.-868    	; 0x5354 <vfprintf+0x4c>
    56b8:	b6 01       	movw	r22, r12
    56ba:	80 e2       	ldi	r24, 0x20	; 32
    56bc:	90 e0       	ldi	r25, 0x00	; 0
    56be:	37 d0       	rcall	.+110    	; 0x572e <fputc>
    56c0:	2a 94       	dec	r2
    56c2:	f7 cf       	rjmp	.-18     	; 0x56b2 <vfprintf+0x3aa>
    56c4:	f6 01       	movw	r30, r12
    56c6:	86 81       	ldd	r24, Z+6	; 0x06
    56c8:	97 81       	ldd	r25, Z+7	; 0x07
    56ca:	02 c0       	rjmp	.+4      	; 0x56d0 <vfprintf+0x3c8>
    56cc:	8f ef       	ldi	r24, 0xFF	; 255
    56ce:	9f ef       	ldi	r25, 0xFF	; 255
    56d0:	2b 96       	adiw	r28, 0x0b	; 11
    56d2:	0f b6       	in	r0, 0x3f	; 63
    56d4:	f8 94       	cli
    56d6:	de bf       	out	0x3e, r29	; 62
    56d8:	0f be       	out	0x3f, r0	; 63
    56da:	cd bf       	out	0x3d, r28	; 61
    56dc:	df 91       	pop	r29
    56de:	cf 91       	pop	r28
    56e0:	1f 91       	pop	r17
    56e2:	0f 91       	pop	r16
    56e4:	ff 90       	pop	r15
    56e6:	ef 90       	pop	r14
    56e8:	df 90       	pop	r13
    56ea:	cf 90       	pop	r12
    56ec:	bf 90       	pop	r11
    56ee:	af 90       	pop	r10
    56f0:	9f 90       	pop	r9
    56f2:	8f 90       	pop	r8
    56f4:	7f 90       	pop	r7
    56f6:	6f 90       	pop	r6
    56f8:	5f 90       	pop	r5
    56fa:	4f 90       	pop	r4
    56fc:	3f 90       	pop	r3
    56fe:	2f 90       	pop	r2
    5700:	08 95       	ret

00005702 <strnlen_P>:
    5702:	fc 01       	movw	r30, r24
    5704:	05 90       	lpm	r0, Z+
    5706:	61 50       	subi	r22, 0x01	; 1
    5708:	70 40       	sbci	r23, 0x00	; 0
    570a:	01 10       	cpse	r0, r1
    570c:	d8 f7       	brcc	.-10     	; 0x5704 <strnlen_P+0x2>
    570e:	80 95       	com	r24
    5710:	90 95       	com	r25
    5712:	8e 0f       	add	r24, r30
    5714:	9f 1f       	adc	r25, r31
    5716:	08 95       	ret

00005718 <strnlen>:
    5718:	fc 01       	movw	r30, r24
    571a:	61 50       	subi	r22, 0x01	; 1
    571c:	70 40       	sbci	r23, 0x00	; 0
    571e:	01 90       	ld	r0, Z+
    5720:	01 10       	cpse	r0, r1
    5722:	d8 f7       	brcc	.-10     	; 0x571a <strnlen+0x2>
    5724:	80 95       	com	r24
    5726:	90 95       	com	r25
    5728:	8e 0f       	add	r24, r30
    572a:	9f 1f       	adc	r25, r31
    572c:	08 95       	ret

0000572e <fputc>:
    572e:	0f 93       	push	r16
    5730:	1f 93       	push	r17
    5732:	cf 93       	push	r28
    5734:	df 93       	push	r29
    5736:	fb 01       	movw	r30, r22
    5738:	23 81       	ldd	r18, Z+3	; 0x03
    573a:	21 fd       	sbrc	r18, 1
    573c:	03 c0       	rjmp	.+6      	; 0x5744 <fputc+0x16>
    573e:	8f ef       	ldi	r24, 0xFF	; 255
    5740:	9f ef       	ldi	r25, 0xFF	; 255
    5742:	2c c0       	rjmp	.+88     	; 0x579c <fputc+0x6e>
    5744:	22 ff       	sbrs	r18, 2
    5746:	16 c0       	rjmp	.+44     	; 0x5774 <fputc+0x46>
    5748:	46 81       	ldd	r20, Z+6	; 0x06
    574a:	57 81       	ldd	r21, Z+7	; 0x07
    574c:	24 81       	ldd	r18, Z+4	; 0x04
    574e:	35 81       	ldd	r19, Z+5	; 0x05
    5750:	42 17       	cp	r20, r18
    5752:	53 07       	cpc	r21, r19
    5754:	44 f4       	brge	.+16     	; 0x5766 <fputc+0x38>
    5756:	a0 81       	ld	r26, Z
    5758:	b1 81       	ldd	r27, Z+1	; 0x01
    575a:	9d 01       	movw	r18, r26
    575c:	2f 5f       	subi	r18, 0xFF	; 255
    575e:	3f 4f       	sbci	r19, 0xFF	; 255
    5760:	31 83       	std	Z+1, r19	; 0x01
    5762:	20 83       	st	Z, r18
    5764:	8c 93       	st	X, r24
    5766:	26 81       	ldd	r18, Z+6	; 0x06
    5768:	37 81       	ldd	r19, Z+7	; 0x07
    576a:	2f 5f       	subi	r18, 0xFF	; 255
    576c:	3f 4f       	sbci	r19, 0xFF	; 255
    576e:	37 83       	std	Z+7, r19	; 0x07
    5770:	26 83       	std	Z+6, r18	; 0x06
    5772:	14 c0       	rjmp	.+40     	; 0x579c <fputc+0x6e>
    5774:	8b 01       	movw	r16, r22
    5776:	ec 01       	movw	r28, r24
    5778:	fb 01       	movw	r30, r22
    577a:	00 84       	ldd	r0, Z+8	; 0x08
    577c:	f1 85       	ldd	r31, Z+9	; 0x09
    577e:	e0 2d       	mov	r30, r0
    5780:	19 95       	eicall
    5782:	89 2b       	or	r24, r25
    5784:	e1 f6       	brne	.-72     	; 0x573e <fputc+0x10>
    5786:	d8 01       	movw	r26, r16
    5788:	16 96       	adiw	r26, 0x06	; 6
    578a:	8d 91       	ld	r24, X+
    578c:	9c 91       	ld	r25, X
    578e:	17 97       	sbiw	r26, 0x07	; 7
    5790:	01 96       	adiw	r24, 0x01	; 1
    5792:	17 96       	adiw	r26, 0x07	; 7
    5794:	9c 93       	st	X, r25
    5796:	8e 93       	st	-X, r24
    5798:	16 97       	sbiw	r26, 0x06	; 6
    579a:	ce 01       	movw	r24, r28
    579c:	df 91       	pop	r29
    579e:	cf 91       	pop	r28
    57a0:	1f 91       	pop	r17
    57a2:	0f 91       	pop	r16
    57a4:	08 95       	ret

000057a6 <__ultoa_invert>:
    57a6:	fa 01       	movw	r30, r20
    57a8:	aa 27       	eor	r26, r26
    57aa:	28 30       	cpi	r18, 0x08	; 8
    57ac:	51 f1       	breq	.+84     	; 0x5802 <__ultoa_invert+0x5c>
    57ae:	20 31       	cpi	r18, 0x10	; 16
    57b0:	81 f1       	breq	.+96     	; 0x5812 <__ultoa_invert+0x6c>
    57b2:	e8 94       	clt
    57b4:	6f 93       	push	r22
    57b6:	6e 7f       	andi	r22, 0xFE	; 254
    57b8:	6e 5f       	subi	r22, 0xFE	; 254
    57ba:	7f 4f       	sbci	r23, 0xFF	; 255
    57bc:	8f 4f       	sbci	r24, 0xFF	; 255
    57be:	9f 4f       	sbci	r25, 0xFF	; 255
    57c0:	af 4f       	sbci	r26, 0xFF	; 255
    57c2:	b1 e0       	ldi	r27, 0x01	; 1
    57c4:	3e d0       	rcall	.+124    	; 0x5842 <__ultoa_invert+0x9c>
    57c6:	b4 e0       	ldi	r27, 0x04	; 4
    57c8:	3c d0       	rcall	.+120    	; 0x5842 <__ultoa_invert+0x9c>
    57ca:	67 0f       	add	r22, r23
    57cc:	78 1f       	adc	r23, r24
    57ce:	89 1f       	adc	r24, r25
    57d0:	9a 1f       	adc	r25, r26
    57d2:	a1 1d       	adc	r26, r1
    57d4:	68 0f       	add	r22, r24
    57d6:	79 1f       	adc	r23, r25
    57d8:	8a 1f       	adc	r24, r26
    57da:	91 1d       	adc	r25, r1
    57dc:	a1 1d       	adc	r26, r1
    57de:	6a 0f       	add	r22, r26
    57e0:	71 1d       	adc	r23, r1
    57e2:	81 1d       	adc	r24, r1
    57e4:	91 1d       	adc	r25, r1
    57e6:	a1 1d       	adc	r26, r1
    57e8:	20 d0       	rcall	.+64     	; 0x582a <__ultoa_invert+0x84>
    57ea:	09 f4       	brne	.+2      	; 0x57ee <__ultoa_invert+0x48>
    57ec:	68 94       	set
    57ee:	3f 91       	pop	r19
    57f0:	2a e0       	ldi	r18, 0x0A	; 10
    57f2:	26 9f       	mul	r18, r22
    57f4:	11 24       	eor	r1, r1
    57f6:	30 19       	sub	r19, r0
    57f8:	30 5d       	subi	r19, 0xD0	; 208
    57fa:	31 93       	st	Z+, r19
    57fc:	de f6       	brtc	.-74     	; 0x57b4 <__ultoa_invert+0xe>
    57fe:	cf 01       	movw	r24, r30
    5800:	08 95       	ret
    5802:	46 2f       	mov	r20, r22
    5804:	47 70       	andi	r20, 0x07	; 7
    5806:	40 5d       	subi	r20, 0xD0	; 208
    5808:	41 93       	st	Z+, r20
    580a:	b3 e0       	ldi	r27, 0x03	; 3
    580c:	0f d0       	rcall	.+30     	; 0x582c <__ultoa_invert+0x86>
    580e:	c9 f7       	brne	.-14     	; 0x5802 <__ultoa_invert+0x5c>
    5810:	f6 cf       	rjmp	.-20     	; 0x57fe <__ultoa_invert+0x58>
    5812:	46 2f       	mov	r20, r22
    5814:	4f 70       	andi	r20, 0x0F	; 15
    5816:	40 5d       	subi	r20, 0xD0	; 208
    5818:	4a 33       	cpi	r20, 0x3A	; 58
    581a:	18 f0       	brcs	.+6      	; 0x5822 <__ultoa_invert+0x7c>
    581c:	49 5d       	subi	r20, 0xD9	; 217
    581e:	31 fd       	sbrc	r19, 1
    5820:	40 52       	subi	r20, 0x20	; 32
    5822:	41 93       	st	Z+, r20
    5824:	02 d0       	rcall	.+4      	; 0x582a <__ultoa_invert+0x84>
    5826:	a9 f7       	brne	.-22     	; 0x5812 <__ultoa_invert+0x6c>
    5828:	ea cf       	rjmp	.-44     	; 0x57fe <__ultoa_invert+0x58>
    582a:	b4 e0       	ldi	r27, 0x04	; 4
    582c:	a6 95       	lsr	r26
    582e:	97 95       	ror	r25
    5830:	87 95       	ror	r24
    5832:	77 95       	ror	r23
    5834:	67 95       	ror	r22
    5836:	ba 95       	dec	r27
    5838:	c9 f7       	brne	.-14     	; 0x582c <__ultoa_invert+0x86>
    583a:	00 97       	sbiw	r24, 0x00	; 0
    583c:	61 05       	cpc	r22, r1
    583e:	71 05       	cpc	r23, r1
    5840:	08 95       	ret
    5842:	9b 01       	movw	r18, r22
    5844:	ac 01       	movw	r20, r24
    5846:	0a 2e       	mov	r0, r26
    5848:	06 94       	lsr	r0
    584a:	57 95       	ror	r21
    584c:	47 95       	ror	r20
    584e:	37 95       	ror	r19
    5850:	27 95       	ror	r18
    5852:	ba 95       	dec	r27
    5854:	c9 f7       	brne	.-14     	; 0x5848 <__ultoa_invert+0xa2>
    5856:	62 0f       	add	r22, r18
    5858:	73 1f       	adc	r23, r19
    585a:	84 1f       	adc	r24, r20
    585c:	95 1f       	adc	r25, r21
    585e:	a0 1d       	adc	r26, r0
    5860:	08 95       	ret

00005862 <__divmodsi4>:
    5862:	05 2e       	mov	r0, r21
    5864:	97 fb       	bst	r25, 7
    5866:	16 f4       	brtc	.+4      	; 0x586c <__divmodsi4+0xa>
    5868:	00 94       	com	r0
    586a:	0f d0       	rcall	.+30     	; 0x588a <__negsi2>
    586c:	57 fd       	sbrc	r21, 7
    586e:	05 d0       	rcall	.+10     	; 0x587a <__divmodsi4_neg2>
    5870:	26 db       	rcall	.-2484   	; 0x4ebe <__udivmodsi4>
    5872:	07 fc       	sbrc	r0, 7
    5874:	02 d0       	rcall	.+4      	; 0x587a <__divmodsi4_neg2>
    5876:	46 f4       	brtc	.+16     	; 0x5888 <__divmodsi4_exit>
    5878:	08 c0       	rjmp	.+16     	; 0x588a <__negsi2>

0000587a <__divmodsi4_neg2>:
    587a:	50 95       	com	r21
    587c:	40 95       	com	r20
    587e:	30 95       	com	r19
    5880:	21 95       	neg	r18
    5882:	3f 4f       	sbci	r19, 0xFF	; 255
    5884:	4f 4f       	sbci	r20, 0xFF	; 255
    5886:	5f 4f       	sbci	r21, 0xFF	; 255

00005888 <__divmodsi4_exit>:
    5888:	08 95       	ret

0000588a <__negsi2>:
    588a:	90 95       	com	r25
    588c:	80 95       	com	r24
    588e:	70 95       	com	r23
    5890:	61 95       	neg	r22
    5892:	7f 4f       	sbci	r23, 0xFF	; 255
    5894:	8f 4f       	sbci	r24, 0xFF	; 255
    5896:	9f 4f       	sbci	r25, 0xFF	; 255
    5898:	08 95       	ret

0000589a <__muluhisi3>:
    589a:	0f d0       	rcall	.+30     	; 0x58ba <__umulhisi3>
    589c:	a5 9f       	mul	r26, r21
    589e:	90 0d       	add	r25, r0
    58a0:	b4 9f       	mul	r27, r20
    58a2:	90 0d       	add	r25, r0
    58a4:	a4 9f       	mul	r26, r20
    58a6:	80 0d       	add	r24, r0
    58a8:	91 1d       	adc	r25, r1
    58aa:	11 24       	eor	r1, r1
    58ac:	08 95       	ret

000058ae <__mulshisi3>:
    58ae:	b7 ff       	sbrs	r27, 7
    58b0:	f4 cf       	rjmp	.-24     	; 0x589a <__muluhisi3>

000058b2 <__mulohisi3>:
    58b2:	f3 df       	rcall	.-26     	; 0x589a <__muluhisi3>
    58b4:	82 1b       	sub	r24, r18
    58b6:	93 0b       	sbc	r25, r19
    58b8:	08 95       	ret

000058ba <__umulhisi3>:
    58ba:	a2 9f       	mul	r26, r18
    58bc:	b0 01       	movw	r22, r0
    58be:	b3 9f       	mul	r27, r19
    58c0:	c0 01       	movw	r24, r0
    58c2:	a3 9f       	mul	r26, r19
    58c4:	70 0d       	add	r23, r0
    58c6:	81 1d       	adc	r24, r1
    58c8:	11 24       	eor	r1, r1
    58ca:	91 1d       	adc	r25, r1
    58cc:	b2 9f       	mul	r27, r18
    58ce:	70 0d       	add	r23, r0
    58d0:	81 1d       	adc	r24, r1
    58d2:	11 24       	eor	r1, r1
    58d4:	91 1d       	adc	r25, r1
    58d6:	08 95       	ret

000058d8 <_exit>:
    58d8:	f8 94       	cli

000058da <__stop_program>:
    58da:	ff cf       	rjmp	.-2      	; 0x58da <__stop_program>
