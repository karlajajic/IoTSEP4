
SEP4IOT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000570  00800200  00005cb8  00005d4c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005cb8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00001279  00800770  00800770  000062bc  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000062bc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006318  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000b90  00000000  00000000  00006358  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000ef2c  00000000  00000000  00006ee8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003ba0  00000000  00000000  00015e14  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00006e2e  00000000  00000000  000199b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002844  00000000  00000000  000207e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000450d  00000000  00000000  00023028  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000d6d3  00000000  00000000  00027535  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000b98  00000000  00000000  00034c08  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	4f c2       	rjmp	.+1182   	; 0x4a0 <__ctors_end>
       2:	00 00       	nop
       4:	6e c2       	rjmp	.+1244   	; 0x4e2 <__bad_interrupt>
       6:	00 00       	nop
       8:	6c c2       	rjmp	.+1240   	; 0x4e2 <__bad_interrupt>
       a:	00 00       	nop
       c:	6a c2       	rjmp	.+1236   	; 0x4e2 <__bad_interrupt>
       e:	00 00       	nop
      10:	68 c2       	rjmp	.+1232   	; 0x4e2 <__bad_interrupt>
      12:	00 00       	nop
      14:	66 c2       	rjmp	.+1228   	; 0x4e2 <__bad_interrupt>
      16:	00 00       	nop
      18:	64 c2       	rjmp	.+1224   	; 0x4e2 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	62 c2       	rjmp	.+1220   	; 0x4e2 <__bad_interrupt>
      1e:	00 00       	nop
      20:	60 c2       	rjmp	.+1216   	; 0x4e2 <__bad_interrupt>
      22:	00 00       	nop
      24:	5e c2       	rjmp	.+1212   	; 0x4e2 <__bad_interrupt>
      26:	00 00       	nop
      28:	5c c2       	rjmp	.+1208   	; 0x4e2 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	5a c2       	rjmp	.+1204   	; 0x4e2 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 8c 0b 	jmp	0x1718	; 0x1718 <__vector_12>
      34:	56 c2       	rjmp	.+1196   	; 0x4e2 <__bad_interrupt>
      36:	00 00       	nop
      38:	54 c2       	rjmp	.+1192   	; 0x4e2 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	52 c2       	rjmp	.+1188   	; 0x4e2 <__bad_interrupt>
      3e:	00 00       	nop
      40:	50 c2       	rjmp	.+1184   	; 0x4e2 <__bad_interrupt>
      42:	00 00       	nop
      44:	4e c2       	rjmp	.+1180   	; 0x4e2 <__bad_interrupt>
      46:	00 00       	nop
      48:	4c c2       	rjmp	.+1176   	; 0x4e2 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	4a c2       	rjmp	.+1172   	; 0x4e2 <__bad_interrupt>
      4e:	00 00       	nop
      50:	48 c2       	rjmp	.+1168   	; 0x4e2 <__bad_interrupt>
      52:	00 00       	nop
      54:	46 c2       	rjmp	.+1164   	; 0x4e2 <__bad_interrupt>
      56:	00 00       	nop
      58:	44 c2       	rjmp	.+1160   	; 0x4e2 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	42 c2       	rjmp	.+1156   	; 0x4e2 <__bad_interrupt>
      5e:	00 00       	nop
      60:	40 c2       	rjmp	.+1152   	; 0x4e2 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 78 23 	jmp	0x46f0	; 0x46f0 <__vector_25>
      68:	0c 94 ca 23 	jmp	0x4794	; 0x4794 <__vector_26>
      6c:	3a c2       	rjmp	.+1140   	; 0x4e2 <__bad_interrupt>
      6e:	00 00       	nop
      70:	38 c2       	rjmp	.+1136   	; 0x4e2 <__bad_interrupt>
      72:	00 00       	nop
      74:	36 c2       	rjmp	.+1132   	; 0x4e2 <__bad_interrupt>
      76:	00 00       	nop
      78:	34 c2       	rjmp	.+1128   	; 0x4e2 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	32 c2       	rjmp	.+1124   	; 0x4e2 <__bad_interrupt>
      7e:	00 00       	nop
      80:	30 c2       	rjmp	.+1120   	; 0x4e2 <__bad_interrupt>
      82:	00 00       	nop
      84:	2e c2       	rjmp	.+1116   	; 0x4e2 <__bad_interrupt>
      86:	00 00       	nop
      88:	2c c2       	rjmp	.+1112   	; 0x4e2 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	2a c2       	rjmp	.+1108   	; 0x4e2 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 0e 24 	jmp	0x481c	; 0x481c <__vector_36>
      94:	0c 94 60 24 	jmp	0x48c0	; 0x48c0 <__vector_37>
      98:	24 c2       	rjmp	.+1096   	; 0x4e2 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 ac 26 	jmp	0x4d58	; 0x4d58 <__vector_39>
      a0:	20 c2       	rjmp	.+1088   	; 0x4e2 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	1e c2       	rjmp	.+1084   	; 0x4e2 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	1c c2       	rjmp	.+1080   	; 0x4e2 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	1a c2       	rjmp	.+1076   	; 0x4e2 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	18 c2       	rjmp	.+1072   	; 0x4e2 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	16 c2       	rjmp	.+1068   	; 0x4e2 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	14 c2       	rjmp	.+1064   	; 0x4e2 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	12 c2       	rjmp	.+1060   	; 0x4e2 <__bad_interrupt>
      be:	00 00       	nop
      c0:	10 c2       	rjmp	.+1056   	; 0x4e2 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	0e c2       	rjmp	.+1052   	; 0x4e2 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	0c c2       	rjmp	.+1048   	; 0x4e2 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 a4 24 	jmp	0x4948	; 0x4948 <__vector_51>
      d0:	0c 94 f6 24 	jmp	0x49ec	; 0x49ec <__vector_52>
      d4:	06 c2       	rjmp	.+1036   	; 0x4e2 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 3a 25 	jmp	0x4a74	; 0x4a74 <__vector_54>
      dc:	0c 94 8c 25 	jmp	0x4b18	; 0x4b18 <__vector_55>
      e0:	00 c2       	rjmp	.+1024   	; 0x4e2 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	c6 01       	movw	r24, r12
      e6:	c6 01       	movw	r24, r12
      e8:	c6 01       	movw	r24, r12
      ea:	00 02       	muls	r16, r16
      ec:	08 02       	muls	r16, r24
      ee:	1e 02       	muls	r17, r30
      f0:	c6 01       	movw	r24, r12
      f2:	c6 01       	movw	r24, r12
      f4:	00 02       	muls	r16, r16
      f6:	08 02       	muls	r16, r24
      f8:	ce 26       	eor	r12, r30
      fa:	3e 27       	eor	r19, r30
      fc:	3e 27       	eor	r19, r30
      fe:	3e 27       	eor	r19, r30
     100:	3e 27       	eor	r19, r30
     102:	3e 27       	eor	r19, r30
     104:	3e 27       	eor	r19, r30
     106:	3e 27       	eor	r19, r30
     108:	ce 26       	eor	r12, r30
     10a:	3e 27       	eor	r19, r30
     10c:	3e 27       	eor	r19, r30
     10e:	3e 27       	eor	r19, r30
     110:	3e 27       	eor	r19, r30
     112:	3e 27       	eor	r19, r30
     114:	3e 27       	eor	r19, r30
     116:	3e 27       	eor	r19, r30
     118:	d0 26       	eor	r13, r16
     11a:	3e 27       	eor	r19, r30
     11c:	3e 27       	eor	r19, r30
     11e:	3e 27       	eor	r19, r30
     120:	3e 27       	eor	r19, r30
     122:	3e 27       	eor	r19, r30
     124:	3e 27       	eor	r19, r30
     126:	3e 27       	eor	r19, r30
     128:	3e 27       	eor	r19, r30
     12a:	3e 27       	eor	r19, r30
     12c:	3e 27       	eor	r19, r30
     12e:	3e 27       	eor	r19, r30
     130:	3e 27       	eor	r19, r30
     132:	3e 27       	eor	r19, r30
     134:	3e 27       	eor	r19, r30
     136:	3e 27       	eor	r19, r30
     138:	d0 26       	eor	r13, r16
     13a:	3e 27       	eor	r19, r30
     13c:	3e 27       	eor	r19, r30
     13e:	3e 27       	eor	r19, r30
     140:	3e 27       	eor	r19, r30
     142:	3e 27       	eor	r19, r30
     144:	3e 27       	eor	r19, r30
     146:	3e 27       	eor	r19, r30
     148:	3e 27       	eor	r19, r30
     14a:	3e 27       	eor	r19, r30
     14c:	3e 27       	eor	r19, r30
     14e:	3e 27       	eor	r19, r30
     150:	3e 27       	eor	r19, r30
     152:	3e 27       	eor	r19, r30
     154:	3e 27       	eor	r19, r30
     156:	3e 27       	eor	r19, r30
     158:	3a 27       	eor	r19, r26
     15a:	3e 27       	eor	r19, r30
     15c:	3e 27       	eor	r19, r30
     15e:	3e 27       	eor	r19, r30
     160:	3e 27       	eor	r19, r30
     162:	3e 27       	eor	r19, r30
     164:	3e 27       	eor	r19, r30
     166:	3e 27       	eor	r19, r30
     168:	05 27       	eor	r16, r21
     16a:	3e 27       	eor	r19, r30
     16c:	3e 27       	eor	r19, r30
     16e:	3e 27       	eor	r19, r30
     170:	3e 27       	eor	r19, r30
     172:	3e 27       	eor	r19, r30
     174:	3e 27       	eor	r19, r30
     176:	3e 27       	eor	r19, r30
     178:	3e 27       	eor	r19, r30
     17a:	3e 27       	eor	r19, r30
     17c:	3e 27       	eor	r19, r30
     17e:	3e 27       	eor	r19, r30
     180:	3e 27       	eor	r19, r30
     182:	3e 27       	eor	r19, r30
     184:	3e 27       	eor	r19, r30
     186:	3e 27       	eor	r19, r30
     188:	f9 26       	eor	r15, r25
     18a:	3e 27       	eor	r19, r30
     18c:	3e 27       	eor	r19, r30
     18e:	3e 27       	eor	r19, r30
     190:	3e 27       	eor	r19, r30
     192:	3e 27       	eor	r19, r30
     194:	3e 27       	eor	r19, r30
     196:	3e 27       	eor	r19, r30
     198:	1d 27       	eor	r17, r29

0000019a <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     19a:	0a ed       	ldi	r16, 0xDA	; 218
     19c:	17 e1       	ldi	r17, 0x17	; 23
     19e:	0f 2e       	mov	r0, r31
     1a0:	fa e0       	ldi	r31, 0x0A	; 10
     1a2:	ef 2e       	mov	r14, r31
     1a4:	f8 e1       	ldi	r31, 0x18	; 24
     1a6:	ff 2e       	mov	r15, r31
     1a8:	f0 2d       	mov	r31, r0
     1aa:	80 91 d9 17 	lds	r24, 0x17D9	; 0x8017d9 <uxDeletedTasksWaitingCleanUp>
     1ae:	88 23       	and	r24, r24
     1b0:	29 f1       	breq	.+74     	; 0x1fc <prvIdleTask+0x62>
     1b2:	0f b6       	in	r0, 0x3f	; 63
     1b4:	f8 94       	cli
     1b6:	0f 92       	push	r0
     1b8:	d8 01       	movw	r26, r16
     1ba:	17 96       	adiw	r26, 0x07	; 7
     1bc:	ed 91       	ld	r30, X+
     1be:	fc 91       	ld	r31, X
     1c0:	18 97       	sbiw	r26, 0x08	; 8
     1c2:	c0 85       	ldd	r28, Z+8	; 0x08
     1c4:	d1 85       	ldd	r29, Z+9	; 0x09
     1c6:	ce 01       	movw	r24, r28
     1c8:	02 96       	adiw	r24, 0x02	; 2
     1ca:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <uxListRemove>
     1ce:	80 91 cd 17 	lds	r24, 0x17CD	; 0x8017cd <uxCurrentNumberOfTasks>
     1d2:	81 50       	subi	r24, 0x01	; 1
     1d4:	80 93 cd 17 	sts	0x17CD, r24	; 0x8017cd <uxCurrentNumberOfTasks>
     1d8:	80 91 d9 17 	lds	r24, 0x17D9	; 0x8017d9 <uxDeletedTasksWaitingCleanUp>
     1dc:	81 50       	subi	r24, 0x01	; 1
     1de:	80 93 d9 17 	sts	0x17D9, r24	; 0x8017d9 <uxDeletedTasksWaitingCleanUp>
     1e2:	0f 90       	pop	r0
     1e4:	0f be       	out	0x3f, r0	; 63
     1e6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     1e8:	9c 8d       	ldd	r25, Y+28	; 0x1c
     1ea:	0e 94 4d 09 	call	0x129a	; 0x129a <vPortFree>
     1ee:	ce 01       	movw	r24, r28
     1f0:	0e 94 4d 09 	call	0x129a	; 0x129a <vPortFree>
     1f4:	80 91 d9 17 	lds	r24, 0x17D9	; 0x8017d9 <uxDeletedTasksWaitingCleanUp>
     1f8:	81 11       	cpse	r24, r1
     1fa:	db cf       	rjmp	.-74     	; 0x1b2 <prvIdleTask+0x18>
     1fc:	f7 01       	movw	r30, r14
     1fe:	80 81       	ld	r24, Z
     200:	82 30       	cpi	r24, 0x02	; 2
     202:	10 f0       	brcs	.+4      	; 0x208 <prvIdleTask+0x6e>
     204:	0e 94 c6 0a 	call	0x158c	; 0x158c <vPortYield>
     208:	0e 94 40 1a 	call	0x3480	; 0x3480 <vApplicationIdleHook>
     20c:	ce cf       	rjmp	.-100    	; 0x1aa <prvIdleTask+0x10>

0000020e <prvTimerTask>:
            pxNewTimer->ucStatus = 0x00;
            prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
        }

        return pxNewTimer;
    }
     20e:	cf 93       	push	r28
     210:	df 93       	push	r29
     212:	cd b7       	in	r28, 0x3d	; 61
     214:	de b7       	in	r29, 0x3e	; 62
     216:	60 97       	sbiw	r28, 0x10	; 16
     218:	0f b6       	in	r0, 0x3f	; 63
     21a:	f8 94       	cli
     21c:	de bf       	out	0x3e, r29	; 62
     21e:	0f be       	out	0x3f, r0	; 63
     220:	cd bf       	out	0x3d, r28	; 61
     222:	ce 01       	movw	r24, r28
     224:	01 96       	adiw	r24, 0x01	; 1
     226:	9a 87       	std	Y+10, r25	; 0x0a
     228:	89 87       	std	Y+9, r24	; 0x09
     22a:	81 2c       	mov	r8, r1
     22c:	91 2c       	mov	r9, r1
     22e:	a1 2c       	mov	r10, r1
     230:	b1 2c       	mov	r11, r1
     232:	69 84       	ldd	r6, Y+9	; 0x09
     234:	7a 84       	ldd	r7, Y+10	; 0x0a
     236:	e0 91 42 18 	lds	r30, 0x1842	; 0x801842 <pxCurrentTimerList>
     23a:	f0 91 43 18 	lds	r31, 0x1843	; 0x801843 <pxCurrentTimerList+0x1>
     23e:	80 81       	ld	r24, Z
     240:	88 23       	and	r24, r24
     242:	09 f4       	brne	.+2      	; 0x246 <prvTimerTask+0x38>
     244:	13 c1       	rjmp	.+550    	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
     246:	07 80       	ldd	r0, Z+7	; 0x07
     248:	f0 85       	ldd	r31, Z+8	; 0x08
     24a:	e0 2d       	mov	r30, r0
     24c:	20 80       	ld	r2, Z
     24e:	31 80       	ldd	r3, Z+1	; 0x01
     250:	42 80       	ldd	r4, Z+2	; 0x02
     252:	53 80       	ldd	r5, Z+3	; 0x03
     254:	0e 94 52 13 	call	0x26a4	; 0x26a4 <vTaskSuspendAll>
     258:	ce 01       	movw	r24, r28
     25a:	01 96       	adiw	r24, 0x01	; 1
     25c:	0e 94 aa 19 	call	0x3354	; 0x3354 <prvSampleTimeNow>
     260:	6b 87       	std	Y+11, r22	; 0x0b
     262:	7c 87       	std	Y+12, r23	; 0x0c
     264:	8d 87       	std	Y+13, r24	; 0x0d
     266:	9e 87       	std	Y+14, r25	; 0x0e
     268:	89 81       	ldd	r24, Y+1	; 0x01
     26a:	81 11       	cpse	r24, r1
     26c:	67 c0       	rjmp	.+206    	; 0x33c <prvTimerTask+0x12e>
     26e:	8b 85       	ldd	r24, Y+11	; 0x0b
     270:	9c 85       	ldd	r25, Y+12	; 0x0c
     272:	ad 85       	ldd	r26, Y+13	; 0x0d
     274:	be 85       	ldd	r27, Y+14	; 0x0e
     276:	82 15       	cp	r24, r2
     278:	93 05       	cpc	r25, r3
     27a:	a4 05       	cpc	r26, r4
     27c:	b5 05       	cpc	r27, r5
     27e:	08 f4       	brcc	.+2      	; 0x282 <prvTimerTask+0x74>
     280:	45 c0       	rjmp	.+138    	; 0x30c <prvTimerTask+0xfe>
     282:	0e 94 3b 14 	call	0x2876	; 0x2876 <xTaskResumeAll>
     286:	e0 91 42 18 	lds	r30, 0x1842	; 0x801842 <pxCurrentTimerList>
     28a:	f0 91 43 18 	lds	r31, 0x1843	; 0x801843 <pxCurrentTimerList+0x1>
     28e:	07 80       	ldd	r0, Z+7	; 0x07
     290:	f0 85       	ldd	r31, Z+8	; 0x08
     292:	e0 2d       	mov	r30, r0
     294:	a0 85       	ldd	r26, Z+8	; 0x08
     296:	b1 85       	ldd	r27, Z+9	; 0x09
     298:	b8 8b       	std	Y+16, r27	; 0x10
     29a:	af 87       	std	Y+15, r26	; 0x0f
     29c:	cd 01       	movw	r24, r26
     29e:	02 96       	adiw	r24, 0x02	; 2
     2a0:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <uxListRemove>
     2a4:	ef 85       	ldd	r30, Y+15	; 0x0f
     2a6:	f8 89       	ldd	r31, Y+16	; 0x10
     2a8:	87 89       	ldd	r24, Z+23	; 0x17
     2aa:	82 ff       	sbrs	r24, 2
     2ac:	21 c0       	rjmp	.+66     	; 0x2f0 <prvTimerTask+0xe2>
     2ae:	46 85       	ldd	r20, Z+14	; 0x0e
     2b0:	57 85       	ldd	r21, Z+15	; 0x0f
     2b2:	60 89       	ldd	r22, Z+16	; 0x10
     2b4:	71 89       	ldd	r23, Z+17	; 0x11
     2b6:	42 0d       	add	r20, r2
     2b8:	53 1d       	adc	r21, r3
     2ba:	64 1d       	adc	r22, r4
     2bc:	75 1d       	adc	r23, r5
     2be:	72 01       	movw	r14, r4
     2c0:	61 01       	movw	r12, r2
     2c2:	0b 85       	ldd	r16, Y+11	; 0x0b
     2c4:	1c 85       	ldd	r17, Y+12	; 0x0c
     2c6:	2d 85       	ldd	r18, Y+13	; 0x0d
     2c8:	3e 85       	ldd	r19, Y+14	; 0x0e
     2ca:	cf 01       	movw	r24, r30
     2cc:	0e 94 ba 18 	call	0x3174	; 0x3174 <prvInsertTimerInActiveList>
     2d0:	88 23       	and	r24, r24
     2d2:	99 f0       	breq	.+38     	; 0x2fa <prvTimerTask+0xec>
     2d4:	c8 2c       	mov	r12, r8
     2d6:	d9 2c       	mov	r13, r9
     2d8:	ea 2c       	mov	r14, r10
     2da:	fb 2c       	mov	r15, r11
     2dc:	00 e0       	ldi	r16, 0x00	; 0
     2de:	10 e0       	ldi	r17, 0x00	; 0
     2e0:	a2 01       	movw	r20, r4
     2e2:	91 01       	movw	r18, r2
     2e4:	60 e0       	ldi	r22, 0x00	; 0
     2e6:	8f 85       	ldd	r24, Y+15	; 0x0f
     2e8:	98 89       	ldd	r25, Y+16	; 0x10
     2ea:	0e 94 4c 19 	call	0x3298	; 0x3298 <xTimerGenericCommand>
     2ee:	05 c0       	rjmp	.+10     	; 0x2fa <prvTimerTask+0xec>
     2f0:	8e 7f       	andi	r24, 0xFE	; 254
     2f2:	af 85       	ldd	r26, Y+15	; 0x0f
     2f4:	b8 89       	ldd	r27, Y+16	; 0x10
     2f6:	57 96       	adiw	r26, 0x17	; 23
     2f8:	8c 93       	st	X, r24
     2fa:	af 85       	ldd	r26, Y+15	; 0x0f
     2fc:	b8 89       	ldd	r27, Y+16	; 0x10
     2fe:	54 96       	adiw	r26, 0x14	; 20
     300:	ed 91       	ld	r30, X+
     302:	fc 91       	ld	r31, X
     304:	55 97       	sbiw	r26, 0x15	; 21
     306:	cd 01       	movw	r24, r26
     308:	19 95       	eicall
     30a:	a1 c0       	rjmp	.+322    	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     30c:	20 e0       	ldi	r18, 0x00	; 0
     30e:	b2 01       	movw	r22, r4
     310:	a1 01       	movw	r20, r2
     312:	8b 85       	ldd	r24, Y+11	; 0x0b
     314:	9c 85       	ldd	r25, Y+12	; 0x0c
     316:	ad 85       	ldd	r26, Y+13	; 0x0d
     318:	be 85       	ldd	r27, Y+14	; 0x0e
     31a:	48 1b       	sub	r20, r24
     31c:	59 0b       	sbc	r21, r25
     31e:	6a 0b       	sbc	r22, r26
     320:	7b 0b       	sbc	r23, r27
     322:	80 91 3e 18 	lds	r24, 0x183E	; 0x80183e <xTimerQueue>
     326:	90 91 3f 18 	lds	r25, 0x183F	; 0x80183f <xTimerQueue+0x1>
     32a:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <vQueueWaitForMessageRestricted>
     32e:	0e 94 3b 14 	call	0x2876	; 0x2876 <xTaskResumeAll>
     332:	81 11       	cpse	r24, r1
     334:	8c c0       	rjmp	.+280    	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     336:	0e 94 c6 0a 	call	0x158c	; 0x158c <vPortYield>
     33a:	89 c0       	rjmp	.+274    	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     33c:	0e 94 3b 14 	call	0x2876	; 0x2876 <xTaskResumeAll>
     340:	86 c0       	rjmp	.+268    	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     342:	89 81       	ldd	r24, Y+1	; 0x01
     344:	88 23       	and	r24, r24
     346:	0c f4       	brge	.+2      	; 0x34a <prvTimerTask+0x13c>
     348:	82 c0       	rjmp	.+260    	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     34a:	4e 80       	ldd	r4, Y+6	; 0x06
     34c:	5f 80       	ldd	r5, Y+7	; 0x07
     34e:	d2 01       	movw	r26, r4
     350:	1c 96       	adiw	r26, 0x0c	; 12
     352:	8d 91       	ld	r24, X+
     354:	9c 91       	ld	r25, X
     356:	1d 97       	sbiw	r26, 0x0d	; 13
     358:	89 2b       	or	r24, r25
     35a:	21 f0       	breq	.+8      	; 0x364 <prvTimerTask+0x156>
     35c:	c2 01       	movw	r24, r4
     35e:	02 96       	adiw	r24, 0x02	; 2
     360:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <uxListRemove>
     364:	ce 01       	movw	r24, r28
     366:	08 96       	adiw	r24, 0x08	; 8
     368:	0e 94 aa 19 	call	0x3354	; 0x3354 <prvSampleTimeNow>
     36c:	8b 01       	movw	r16, r22
     36e:	9c 01       	movw	r18, r24
     370:	e9 81       	ldd	r30, Y+1	; 0x01
     372:	0e 2e       	mov	r0, r30
     374:	00 0c       	add	r0, r0
     376:	ff 0b       	sbc	r31, r31
     378:	ea 30       	cpi	r30, 0x0A	; 10
     37a:	f1 05       	cpc	r31, r1
     37c:	08 f0       	brcs	.+2      	; 0x380 <prvTimerTask+0x172>
     37e:	67 c0       	rjmp	.+206    	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     380:	88 27       	eor	r24, r24
     382:	ee 58       	subi	r30, 0x8E	; 142
     384:	ff 4f       	sbci	r31, 0xFF	; 255
     386:	8f 4f       	sbci	r24, 0xFF	; 255
     388:	0c 94 96 29 	jmp	0x532c	; 0x532c <__tablejump2__>
     38c:	f2 01       	movw	r30, r4
     38e:	87 89       	ldd	r24, Z+23	; 0x17
     390:	81 60       	ori	r24, 0x01	; 1
     392:	87 8b       	std	Z+23, r24	; 0x17
     394:	ca 80       	ldd	r12, Y+2	; 0x02
     396:	db 80       	ldd	r13, Y+3	; 0x03
     398:	ec 80       	ldd	r14, Y+4	; 0x04
     39a:	fd 80       	ldd	r15, Y+5	; 0x05
     39c:	46 85       	ldd	r20, Z+14	; 0x0e
     39e:	57 85       	ldd	r21, Z+15	; 0x0f
     3a0:	60 89       	ldd	r22, Z+16	; 0x10
     3a2:	71 89       	ldd	r23, Z+17	; 0x11
     3a4:	4c 0d       	add	r20, r12
     3a6:	5d 1d       	adc	r21, r13
     3a8:	6e 1d       	adc	r22, r14
     3aa:	7f 1d       	adc	r23, r15
     3ac:	c2 01       	movw	r24, r4
     3ae:	0e 94 ba 18 	call	0x3174	; 0x3174 <prvInsertTimerInActiveList>
     3b2:	88 23       	and	r24, r24
     3b4:	09 f4       	brne	.+2      	; 0x3b8 <prvTimerTask+0x1aa>
     3b6:	4b c0       	rjmp	.+150    	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     3b8:	d2 01       	movw	r26, r4
     3ba:	54 96       	adiw	r26, 0x14	; 20
     3bc:	ed 91       	ld	r30, X+
     3be:	fc 91       	ld	r31, X
     3c0:	55 97       	sbiw	r26, 0x15	; 21
     3c2:	c2 01       	movw	r24, r4
     3c4:	19 95       	eicall
     3c6:	f2 01       	movw	r30, r4
     3c8:	87 89       	ldd	r24, Z+23	; 0x17
     3ca:	82 ff       	sbrs	r24, 2
     3cc:	40 c0       	rjmp	.+128    	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     3ce:	4a 81       	ldd	r20, Y+2	; 0x02
     3d0:	5b 81       	ldd	r21, Y+3	; 0x03
     3d2:	6c 81       	ldd	r22, Y+4	; 0x04
     3d4:	7d 81       	ldd	r23, Y+5	; 0x05
     3d6:	86 85       	ldd	r24, Z+14	; 0x0e
     3d8:	97 85       	ldd	r25, Z+15	; 0x0f
     3da:	a0 89       	ldd	r26, Z+16	; 0x10
     3dc:	b1 89       	ldd	r27, Z+17	; 0x11
     3de:	9a 01       	movw	r18, r20
     3e0:	ab 01       	movw	r20, r22
     3e2:	28 0f       	add	r18, r24
     3e4:	39 1f       	adc	r19, r25
     3e6:	4a 1f       	adc	r20, r26
     3e8:	5b 1f       	adc	r21, r27
     3ea:	c8 2c       	mov	r12, r8
     3ec:	d9 2c       	mov	r13, r9
     3ee:	ea 2c       	mov	r14, r10
     3f0:	fb 2c       	mov	r15, r11
     3f2:	00 e0       	ldi	r16, 0x00	; 0
     3f4:	10 e0       	ldi	r17, 0x00	; 0
     3f6:	60 e0       	ldi	r22, 0x00	; 0
     3f8:	c2 01       	movw	r24, r4
     3fa:	0e 94 4c 19 	call	0x3298	; 0x3298 <xTimerGenericCommand>
     3fe:	27 c0       	rjmp	.+78     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     400:	d2 01       	movw	r26, r4
     402:	57 96       	adiw	r26, 0x17	; 23
     404:	8c 91       	ld	r24, X
     406:	57 97       	sbiw	r26, 0x17	; 23
     408:	8e 7f       	andi	r24, 0xFE	; 254
     40a:	57 96       	adiw	r26, 0x17	; 23
     40c:	8c 93       	st	X, r24
     40e:	1f c0       	rjmp	.+62     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     410:	f2 01       	movw	r30, r4
     412:	87 89       	ldd	r24, Z+23	; 0x17
     414:	81 60       	ori	r24, 0x01	; 1
     416:	87 8b       	std	Z+23, r24	; 0x17
     418:	4a 81       	ldd	r20, Y+2	; 0x02
     41a:	5b 81       	ldd	r21, Y+3	; 0x03
     41c:	6c 81       	ldd	r22, Y+4	; 0x04
     41e:	7d 81       	ldd	r23, Y+5	; 0x05
     420:	46 87       	std	Z+14, r20	; 0x0e
     422:	57 87       	std	Z+15, r21	; 0x0f
     424:	60 8b       	std	Z+16, r22	; 0x10
     426:	71 8b       	std	Z+17, r23	; 0x11
     428:	40 0f       	add	r20, r16
     42a:	51 1f       	adc	r21, r17
     42c:	62 1f       	adc	r22, r18
     42e:	73 1f       	adc	r23, r19
     430:	68 01       	movw	r12, r16
     432:	79 01       	movw	r14, r18
     434:	c2 01       	movw	r24, r4
     436:	0e 94 ba 18 	call	0x3174	; 0x3174 <prvInsertTimerInActiveList>
     43a:	09 c0       	rjmp	.+18     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     43c:	f2 01       	movw	r30, r4
     43e:	87 89       	ldd	r24, Z+23	; 0x17
     440:	81 fd       	sbrc	r24, 1
     442:	03 c0       	rjmp	.+6      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
     444:	c2 01       	movw	r24, r4
     446:	29 d7       	rcall	.+3666   	; 0x129a <vPortFree>
     448:	02 c0       	rjmp	.+4      	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     44a:	8e 7f       	andi	r24, 0xFE	; 254
     44c:	87 8b       	std	Z+23, r24	; 0x17
     44e:	28 2d       	mov	r18, r8
     450:	39 2d       	mov	r19, r9
     452:	4a 2d       	mov	r20, r10
     454:	5b 2d       	mov	r21, r11
     456:	66 2d       	mov	r22, r6
     458:	77 2d       	mov	r23, r7
     45a:	80 91 3e 18 	lds	r24, 0x183E	; 0x80183e <xTimerQueue>
     45e:	90 91 3f 18 	lds	r25, 0x183F	; 0x80183f <xTimerQueue+0x1>
     462:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <xQueueReceive>
     466:	81 11       	cpse	r24, r1
     468:	6c cf       	rjmp	.-296    	; 0x342 <prvTimerTask+0x134>
     46a:	e5 ce       	rjmp	.-566    	; 0x236 <prvTimerTask+0x28>
     46c:	0e 94 52 13 	call	0x26a4	; 0x26a4 <vTaskSuspendAll>
     470:	ce 01       	movw	r24, r28
     472:	01 96       	adiw	r24, 0x01	; 1
     474:	0e 94 aa 19 	call	0x3354	; 0x3354 <prvSampleTimeNow>
     478:	6b 87       	std	Y+11, r22	; 0x0b
     47a:	7c 87       	std	Y+12, r23	; 0x0c
     47c:	8d 87       	std	Y+13, r24	; 0x0d
     47e:	9e 87       	std	Y+14, r25	; 0x0e
     480:	89 81       	ldd	r24, Y+1	; 0x01
     482:	81 11       	cpse	r24, r1
     484:	5b cf       	rjmp	.-330    	; 0x33c <prvTimerTask+0x12e>
     486:	e0 91 40 18 	lds	r30, 0x1840	; 0x801840 <pxOverflowTimerList>
     48a:	f0 91 41 18 	lds	r31, 0x1841	; 0x801841 <pxOverflowTimerList+0x1>
     48e:	80 81       	ld	r24, Z
     490:	21 e0       	ldi	r18, 0x01	; 1
     492:	81 11       	cpse	r24, r1
     494:	20 e0       	ldi	r18, 0x00	; 0
     496:	28 2c       	mov	r2, r8
     498:	39 2c       	mov	r3, r9
     49a:	4a 2c       	mov	r4, r10
     49c:	5b 2c       	mov	r5, r11
     49e:	37 cf       	rjmp	.-402    	; 0x30e <prvTimerTask+0x100>

000004a0 <__ctors_end>:
     4a0:	11 24       	eor	r1, r1
     4a2:	1f be       	out	0x3f, r1	; 63
     4a4:	cf ef       	ldi	r28, 0xFF	; 255
     4a6:	d1 e2       	ldi	r29, 0x21	; 33
     4a8:	de bf       	out	0x3e, r29	; 62
     4aa:	cd bf       	out	0x3d, r28	; 61
     4ac:	00 e0       	ldi	r16, 0x00	; 0
     4ae:	0c bf       	out	0x3c, r16	; 60

000004b0 <__do_copy_data>:
     4b0:	17 e0       	ldi	r17, 0x07	; 7
     4b2:	a0 e0       	ldi	r26, 0x00	; 0
     4b4:	b2 e0       	ldi	r27, 0x02	; 2
     4b6:	e8 eb       	ldi	r30, 0xB8	; 184
     4b8:	fc e5       	ldi	r31, 0x5C	; 92
     4ba:	00 e0       	ldi	r16, 0x00	; 0
     4bc:	0b bf       	out	0x3b, r16	; 59
     4be:	02 c0       	rjmp	.+4      	; 0x4c4 <__do_copy_data+0x14>
     4c0:	07 90       	elpm	r0, Z+
     4c2:	0d 92       	st	X+, r0
     4c4:	a0 37       	cpi	r26, 0x70	; 112
     4c6:	b1 07       	cpc	r27, r17
     4c8:	d9 f7       	brne	.-10     	; 0x4c0 <__do_copy_data+0x10>

000004ca <__do_clear_bss>:
     4ca:	29 e1       	ldi	r18, 0x19	; 25
     4cc:	a0 e7       	ldi	r26, 0x70	; 112
     4ce:	b7 e0       	ldi	r27, 0x07	; 7
     4d0:	01 c0       	rjmp	.+2      	; 0x4d4 <.do_clear_bss_start>

000004d2 <.do_clear_bss_loop>:
     4d2:	1d 92       	st	X+, r1

000004d4 <.do_clear_bss_start>:
     4d4:	a9 3e       	cpi	r26, 0xE9	; 233
     4d6:	b2 07       	cpc	r27, r18
     4d8:	e1 f7       	brne	.-8      	; 0x4d2 <.do_clear_bss_loop>
     4da:	0e 94 05 1b 	call	0x360a	; 0x360a <main>
     4de:	0c 94 5a 2e 	jmp	0x5cb4	; 0x5cb4 <_exit>

000004e2 <__bad_interrupt>:
     4e2:	8e cd       	rjmp	.-1252   	; 0x0 <__vectors>

000004e4 <co2Reader_create>:

	return _new_reader;
}

//	RETURN TO DESTROY METHODS
void co2Reader_destroy(co2reader_t self) {
     4e4:	2f 92       	push	r2
     4e6:	3f 92       	push	r3
     4e8:	4f 92       	push	r4
     4ea:	5f 92       	push	r5
     4ec:	6f 92       	push	r6
     4ee:	7f 92       	push	r7
     4f0:	8f 92       	push	r8
     4f2:	9f 92       	push	r9
     4f4:	af 92       	push	r10
     4f6:	bf 92       	push	r11
     4f8:	cf 92       	push	r12
     4fa:	df 92       	push	r13
     4fc:	ef 92       	push	r14
     4fe:	ff 92       	push	r15
     500:	0f 93       	push	r16
     502:	1f 93       	push	r17
     504:	cf 93       	push	r28
     506:	df 93       	push	r29
     508:	88 2e       	mov	r8, r24
     50a:	96 2e       	mov	r9, r22
     50c:	1a 01       	movw	r2, r20
     50e:	28 01       	movw	r4, r16
     510:	39 01       	movw	r6, r18
     512:	61 e0       	ldi	r22, 0x01	; 1
     514:	70 e0       	ldi	r23, 0x00	; 0
     516:	83 e0       	ldi	r24, 0x03	; 3
     518:	90 e0       	ldi	r25, 0x00	; 0
     51a:	0e 94 9e 29 	call	0x533c	; 0x533c <calloc>
     51e:	ec 01       	movw	r28, r24
     520:	00 97       	sbiw	r24, 0x00	; 0
     522:	69 f1       	breq	.+90     	; 0x57e <co2Reader_create+0x9a>
     524:	fc 01       	movw	r30, r24
     526:	11 92       	st	Z+, r1
     528:	30 92 7b 07 	sts	0x077B, r3	; 0x80077b <_startMeasureEventGroup+0x1>
     52c:	20 92 7a 07 	sts	0x077A, r2	; 0x80077a <_startMeasureEventGroup>
     530:	40 92 76 07 	sts	0x0776, r4	; 0x800776 <_startMeasureBit>
     534:	50 92 77 07 	sts	0x0777, r5	; 0x800777 <_startMeasureBit+0x1>
     538:	60 92 78 07 	sts	0x0778, r6	; 0x800778 <_startMeasureBit+0x2>
     53c:	70 92 79 07 	sts	0x0779, r7	; 0x800779 <_startMeasureBit+0x3>
     540:	f0 92 75 07 	sts	0x0775, r15	; 0x800775 <_readyEventGroup+0x1>
     544:	e0 92 74 07 	sts	0x0774, r14	; 0x800774 <_readyEventGroup>
     548:	a0 92 70 07 	sts	0x0770, r10	; 0x800770 <__data_end>
     54c:	b0 92 71 07 	sts	0x0771, r11	; 0x800771 <__data_end+0x1>
     550:	c0 92 72 07 	sts	0x0772, r12	; 0x800772 <__data_end+0x2>
     554:	d0 92 73 07 	sts	0x0773, r13	; 0x800773 <__data_end+0x3>
     558:	49 2d       	mov	r20, r9
     55a:	50 e0       	ldi	r21, 0x00	; 0
     55c:	7f 01       	movw	r14, r30
     55e:	08 2d       	mov	r16, r8
     560:	9c 01       	movw	r18, r24
     562:	63 e4       	ldi	r22, 0x43	; 67
     564:	72 e0       	ldi	r23, 0x02	; 2
     566:	89 e2       	ldi	r24, 0x29	; 41
     568:	93 e0       	ldi	r25, 0x03	; 3
     56a:	0e 94 f7 11 	call	0x23ee	; 0x23ee <xTaskCreate>
     56e:	8d e4       	ldi	r24, 0x4D	; 77
     570:	92 e0       	ldi	r25, 0x02	; 2
     572:	9f 93       	push	r25
     574:	8f 93       	push	r24
     576:	0e 94 3c 2b 	call	0x5678	; 0x5678 <printf>
     57a:	0f 90       	pop	r0
     57c:	0f 90       	pop	r0
     57e:	ce 01       	movw	r24, r28
     580:	df 91       	pop	r29
     582:	cf 91       	pop	r28
     584:	1f 91       	pop	r17
     586:	0f 91       	pop	r16
     588:	ff 90       	pop	r15
     58a:	ef 90       	pop	r14
     58c:	df 90       	pop	r13
     58e:	cf 90       	pop	r12
     590:	bf 90       	pop	r11
     592:	af 90       	pop	r10
     594:	9f 90       	pop	r9
     596:	8f 90       	pop	r8
     598:	7f 90       	pop	r7
     59a:	6f 90       	pop	r6
     59c:	5f 90       	pop	r5
     59e:	4f 90       	pop	r4
     5a0:	3f 90       	pop	r3
     5a2:	2f 90       	pop	r2
     5a4:	08 95       	ret

000005a6 <co2Reader_measure>:
	for (;;) {
		co2Reader_measure(self);
	}
}

void co2Reader_measure(co2reader_t self) {//dummy
     5a6:	cf 92       	push	r12
     5a8:	df 92       	push	r13
     5aa:	ef 92       	push	r14
     5ac:	ff 92       	push	r15
     5ae:	0f 93       	push	r16
     5b0:	1f 93       	push	r17
     5b2:	cf 93       	push	r28
     5b4:	df 93       	push	r29
     5b6:	ec 01       	movw	r28, r24
	EventBits_t uxBits = xEventGroupWaitBits(_startMeasureEventGroup, //eventGroup
     5b8:	40 91 76 07 	lds	r20, 0x0776	; 0x800776 <_startMeasureBit>
     5bc:	50 91 77 07 	lds	r21, 0x0777	; 0x800777 <_startMeasureBit+0x1>
     5c0:	60 91 78 07 	lds	r22, 0x0778	; 0x800778 <_startMeasureBit+0x2>
     5c4:	70 91 79 07 	lds	r23, 0x0779	; 0x800779 <_startMeasureBit+0x3>
     5c8:	cc 24       	eor	r12, r12
     5ca:	ca 94       	dec	r12
     5cc:	dc 2c       	mov	r13, r12
     5ce:	76 01       	movw	r14, r12
     5d0:	01 e0       	ldi	r16, 0x01	; 1
     5d2:	21 e0       	ldi	r18, 0x01	; 1
     5d4:	80 91 7a 07 	lds	r24, 0x077A	; 0x80077a <_startMeasureEventGroup>
     5d8:	90 91 7b 07 	lds	r25, 0x077B	; 0x80077b <_startMeasureEventGroup+0x1>
     5dc:	ff d3       	rcall	.+2046   	; 0xddc <xEventGroupWaitBits>
	_startMeasureBit, //bits it is interested in
	pdTRUE, //clears the bits
	pdTRUE, //waits for both bits to be set
	portMAX_DELAY); //wait

	if ((uxBits & (_startMeasureBit)) == (_startMeasureBit)) {
     5de:	00 91 76 07 	lds	r16, 0x0776	; 0x800776 <_startMeasureBit>
     5e2:	10 91 77 07 	lds	r17, 0x0777	; 0x800777 <_startMeasureBit+0x1>
     5e6:	20 91 78 07 	lds	r18, 0x0778	; 0x800778 <_startMeasureBit+0x2>
     5ea:	30 91 79 07 	lds	r19, 0x0779	; 0x800779 <_startMeasureBit+0x3>
     5ee:	dc 01       	movw	r26, r24
     5f0:	cb 01       	movw	r24, r22
     5f2:	80 23       	and	r24, r16
     5f4:	91 23       	and	r25, r17
     5f6:	a2 23       	and	r26, r18
     5f8:	b3 23       	and	r27, r19
     5fa:	08 17       	cp	r16, r24
     5fc:	19 07       	cpc	r17, r25
     5fe:	2a 07       	cpc	r18, r26
     600:	3b 07       	cpc	r19, r27
     602:	f1 f4       	brne	.+60     	; 0x640 <co2Reader_measure+0x9a>
		uint8_t no = self->value;
     604:	88 81       	ld	r24, Y
		no++;
		self->value = no;
     606:	8f 5f       	subi	r24, 0xFF	; 255
     608:	88 83       	st	Y, r24
		printf("co2 done bit set");
     60a:	84 e5       	ldi	r24, 0x54	; 84
     60c:	92 e0       	ldi	r25, 0x02	; 2
     60e:	9f 93       	push	r25
     610:	8f 93       	push	r24
     612:	0e 94 3c 2b 	call	0x5678	; 0x5678 <printf>

		vTaskDelay(2500); //pretend it takes some time
     616:	64 ec       	ldi	r22, 0xC4	; 196
     618:	79 e0       	ldi	r23, 0x09	; 9
     61a:	80 e0       	ldi	r24, 0x00	; 0
     61c:	90 e0       	ldi	r25, 0x00	; 0
     61e:	0e 94 b7 14 	call	0x296e	; 0x296e <vTaskDelay>

		//set done bit so that device knows meassurement is done
		xEventGroupSetBits(_readyEventGroup, _readyBit);
     622:	40 91 70 07 	lds	r20, 0x0770	; 0x800770 <__data_end>
     626:	50 91 71 07 	lds	r21, 0x0771	; 0x800771 <__data_end+0x1>
     62a:	60 91 72 07 	lds	r22, 0x0772	; 0x800772 <__data_end+0x2>
     62e:	70 91 73 07 	lds	r23, 0x0773	; 0x800773 <__data_end+0x3>
     632:	80 91 74 07 	lds	r24, 0x0774	; 0x800774 <_readyEventGroup>
     636:	90 91 75 07 	lds	r25, 0x0775	; 0x800775 <_readyEventGroup+0x1>
     63a:	90 d4       	rcall	.+2336   	; 0xf5c <xEventGroupSetBits>
     63c:	0f 90       	pop	r0
     63e:	0f 90       	pop	r0
	}
}
     640:	df 91       	pop	r29
     642:	cf 91       	pop	r28
     644:	1f 91       	pop	r17
     646:	0f 91       	pop	r16
     648:	ff 90       	pop	r15
     64a:	ef 90       	pop	r14
     64c:	df 90       	pop	r13
     64e:	cf 90       	pop	r12
     650:	08 95       	ret

00000652 <co2Reader_executeTask>:
	//free(self->value);
	//free(self);
}

//actual task, methods devided so that it is possible to test
void co2Reader_executeTask(co2reader_t self) {
     652:	ec 01       	movw	r28, r24
	for (;;) {
		co2Reader_measure(self);
     654:	ce 01       	movw	r24, r28
     656:	a7 df       	rcall	.-178    	; 0x5a6 <co2Reader_measure>
     658:	fd cf       	rjmp	.-6      	; 0x654 <co2Reader_executeTask+0x2>

0000065a <co2Reader_getCO2>:
	}
}

uint8_t co2Reader_getCO2(co2reader_t self) {
	return self->value;
     65a:	fc 01       	movw	r30, r24
     65c:	80 81       	ld	r24, Z
     65e:	08 95       	ret

00000660 <currentCondition_create>:
	//free(self->co2Data);
	//free(self->temperatureData);
	//free(self->humidityData);
	//free(self->soundData);
	//free(self);
	vPortFree(self->humidityData);//maybe use this
     660:	cf 93       	push	r28
     662:	df 93       	push	r29
     664:	ec 01       	movw	r28, r24
     666:	61 e0       	ldi	r22, 0x01	; 1
     668:	70 e0       	ldi	r23, 0x00	; 0
     66a:	8a e0       	ldi	r24, 0x0A	; 10
     66c:	90 e0       	ldi	r25, 0x00	; 0
     66e:	0e 94 9e 29 	call	0x533c	; 0x533c <calloc>
     672:	00 97       	sbiw	r24, 0x00	; 0
     674:	19 f0       	breq	.+6      	; 0x67c <currentCondition_create+0x1c>
     676:	fc 01       	movw	r30, r24
     678:	d1 83       	std	Z+1, r29	; 0x01
     67a:	c0 83       	st	Z, r28
     67c:	df 91       	pop	r29
     67e:	cf 91       	pop	r28
     680:	08 95       	ret

00000682 <currentCondition_setCO2>:
     682:	00 97       	sbiw	r24, 0x00	; 0
     684:	19 f0       	breq	.+6      	; 0x68c <currentCondition_setCO2+0xa>
     686:	fc 01       	movw	r30, r24
     688:	73 83       	std	Z+3, r23	; 0x03
     68a:	62 83       	std	Z+2, r22	; 0x02
     68c:	08 95       	ret

0000068e <currentCondition_setHumidity>:
     68e:	00 97       	sbiw	r24, 0x00	; 0
     690:	19 f0       	breq	.+6      	; 0x698 <currentCondition_setHumidity+0xa>
     692:	fc 01       	movw	r30, r24
     694:	77 83       	std	Z+7, r23	; 0x07
     696:	66 83       	std	Z+6, r22	; 0x06
     698:	08 95       	ret

0000069a <currentCondition_setTemperature>:
     69a:	00 97       	sbiw	r24, 0x00	; 0
     69c:	19 f0       	breq	.+6      	; 0x6a4 <currentCondition_setTemperature+0xa>
     69e:	fc 01       	movw	r30, r24
     6a0:	75 83       	std	Z+5, r23	; 0x05
     6a2:	64 83       	std	Z+4, r22	; 0x04
     6a4:	08 95       	ret

000006a6 <getcurrentConditionPayload>:
}
lora_payload_t getcurrentConditionPayload(currentCondition_t self)
{
     6a6:	fc 01       	movw	r30, r24
     6a8:	db 01       	movw	r26, r22
	
	payload.len=4;
	
	payload.port_no=LORA_USART;
	
	payload.bytes[0]= self->temperatureData >> 8;
     6aa:	14 96       	adiw	r26, 0x04	; 4
     6ac:	2c 91       	ld	r18, X
     6ae:	14 97       	sbiw	r26, 0x04	; 4
     6b0:	15 96       	adiw	r26, 0x05	; 5
     6b2:	3c 91       	ld	r19, X
     6b4:	15 97       	sbiw	r26, 0x05	; 5
	payload.bytes[1]=self->temperatureData & 0xFF;
	
	payload.bytes[2]=self->humidityData >> 8;
     6b6:	16 96       	adiw	r26, 0x06	; 6
     6b8:	8c 91       	ld	r24, X
     6ba:	16 97       	sbiw	r26, 0x06	; 6
     6bc:	17 96       	adiw	r26, 0x07	; 7
     6be:	9c 91       	ld	r25, X
	payload.bytes[3]=self->humidityData & 0xFF;
	
	return payload;
     6c0:	41 e0       	ldi	r20, 0x01	; 1
     6c2:	40 83       	st	Z, r20
     6c4:	44 e0       	ldi	r20, 0x04	; 4
     6c6:	41 83       	std	Z+1, r20	; 0x01
     6c8:	32 83       	std	Z+2, r19	; 0x02
     6ca:	23 83       	std	Z+3, r18	; 0x03
     6cc:	94 83       	std	Z+4, r25	; 0x04
     6ce:	85 83       	std	Z+5, r24	; 0x05
	
     6d0:	cf 01       	movw	r24, r30
     6d2:	08 95       	ret

000006d4 <device_create>:
	free(self);*/
}

currentCondition_t device_getCurrentCondition(device_t self) {
	return self->currentCondition;
}
     6d4:	2f 92       	push	r2
     6d6:	3f 92       	push	r3
     6d8:	4f 92       	push	r4
     6da:	5f 92       	push	r5
     6dc:	6f 92       	push	r6
     6de:	7f 92       	push	r7
     6e0:	8f 92       	push	r8
     6e2:	9f 92       	push	r9
     6e4:	af 92       	push	r10
     6e6:	bf 92       	push	r11
     6e8:	cf 92       	push	r12
     6ea:	df 92       	push	r13
     6ec:	ef 92       	push	r14
     6ee:	ff 92       	push	r15
     6f0:	0f 93       	push	r16
     6f2:	1f 93       	push	r17
     6f4:	cf 93       	push	r28
     6f6:	df 93       	push	r29
     6f8:	00 d0       	rcall	.+0      	; 0x6fa <device_create+0x26>
     6fa:	1f 92       	push	r1
     6fc:	cd b7       	in	r28, 0x3d	; 61
     6fe:	de b7       	in	r29, 0x3e	; 62
     700:	28 2e       	mov	r2, r24
     702:	36 2e       	mov	r3, r22
     704:	5c 83       	std	Y+4, r21	; 0x04
     706:	4b 83       	std	Y+3, r20	; 0x03
     708:	28 01       	movw	r4, r16
     70a:	39 01       	movw	r6, r18
     70c:	61 e0       	ldi	r22, 0x01	; 1
     70e:	70 e0       	ldi	r23, 0x00	; 0
     710:	88 e0       	ldi	r24, 0x08	; 8
     712:	90 e0       	ldi	r25, 0x00	; 0
     714:	0e 94 9e 29 	call	0x533c	; 0x533c <calloc>
     718:	9a 83       	std	Y+2, r25	; 0x02
     71a:	89 83       	std	Y+1, r24	; 0x01
     71c:	00 97       	sbiw	r24, 0x00	; 0
     71e:	09 f4       	brne	.+2      	; 0x722 <device_create+0x4e>
     720:	46 c0       	rjmp	.+140    	; 0x7ae <device_create+0xda>
     722:	fc 01       	movw	r30, r24
     724:	91 82       	std	Z+1, r9	; 0x01
     726:	80 82       	st	Z, r8
     728:	8a 8d       	ldd	r24, Y+26	; 0x1a
     72a:	9b 8d       	ldd	r25, Y+27	; 0x1b
     72c:	93 83       	std	Z+3, r25	; 0x03
     72e:	82 83       	std	Z+2, r24	; 0x02
     730:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <deviceId>
     734:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <deviceId+0x1>
     738:	93 df       	rcall	.-218    	; 0x660 <currentCondition_create>
     73a:	e9 81       	ldd	r30, Y+1	; 0x01
     73c:	fa 81       	ldd	r31, Y+2	; 0x02
     73e:	95 83       	std	Z+5, r25	; 0x05
     740:	84 83       	std	Z+4, r24	; 0x04
     742:	8b 81       	ldd	r24, Y+3	; 0x03
     744:	9c 81       	ldd	r25, Y+4	; 0x04
     746:	90 93 89 07 	sts	0x0789, r25	; 0x800789 <_startMeasureEventGroup+0x1>
     74a:	80 93 88 07 	sts	0x0788, r24	; 0x800788 <_startMeasureEventGroup>
     74e:	40 92 84 07 	sts	0x0784, r4	; 0x800784 <_startMeasureBit>
     752:	50 92 85 07 	sts	0x0785, r5	; 0x800785 <_startMeasureBit+0x1>
     756:	60 92 86 07 	sts	0x0786, r6	; 0x800786 <_startMeasureBit+0x2>
     75a:	70 92 87 07 	sts	0x0787, r7	; 0x800787 <_startMeasureBit+0x3>
     75e:	f0 92 83 07 	sts	0x0783, r15	; 0x800783 <_readyEventGroup+0x1>
     762:	e0 92 82 07 	sts	0x0782, r14	; 0x800782 <_readyEventGroup>
     766:	a0 92 7e 07 	sts	0x077E, r10	; 0x80077e <_readyBit>
     76a:	b0 92 7f 07 	sts	0x077F, r11	; 0x80077f <_readyBit+0x1>
     76e:	c0 92 80 07 	sts	0x0780, r12	; 0x800780 <_readyBit+0x2>
     772:	d0 92 81 07 	sts	0x0781, r13	; 0x800781 <_readyBit+0x3>
     776:	8c 8d       	ldd	r24, Y+28	; 0x1c
     778:	9d 8d       	ldd	r25, Y+29	; 0x1d
     77a:	90 93 7d 07 	sts	0x077D, r25	; 0x80077d <_uplinkmessageBuffer+0x1>
     77e:	80 93 7c 07 	sts	0x077C, r24	; 0x80077c <_uplinkmessageBuffer>
     782:	43 2d       	mov	r20, r3
     784:	50 e0       	ldi	r21, 0x00	; 0
     786:	7f 01       	movw	r14, r30
     788:	96 e0       	ldi	r25, 0x06	; 6
     78a:	e9 0e       	add	r14, r25
     78c:	f1 1c       	adc	r15, r1
     78e:	02 2d       	mov	r16, r2
     790:	9f 01       	movw	r18, r30
     792:	65 e6       	ldi	r22, 0x65	; 101
     794:	72 e0       	ldi	r23, 0x02	; 2
     796:	8a ec       	ldi	r24, 0xCA	; 202
     798:	94 e0       	ldi	r25, 0x04	; 4
     79a:	0e 94 f7 11 	call	0x23ee	; 0x23ee <xTaskCreate>
     79e:	8c e6       	ldi	r24, 0x6C	; 108
     7a0:	92 e0       	ldi	r25, 0x02	; 2
     7a2:	9f 93       	push	r25
     7a4:	8f 93       	push	r24
     7a6:	0e 94 3c 2b 	call	0x5678	; 0x5678 <printf>
     7aa:	0f 90       	pop	r0
     7ac:	0f 90       	pop	r0
     7ae:	89 81       	ldd	r24, Y+1	; 0x01
     7b0:	9a 81       	ldd	r25, Y+2	; 0x02
     7b2:	0f 90       	pop	r0
     7b4:	0f 90       	pop	r0
     7b6:	0f 90       	pop	r0
     7b8:	0f 90       	pop	r0
     7ba:	df 91       	pop	r29
     7bc:	cf 91       	pop	r28
     7be:	1f 91       	pop	r17
     7c0:	0f 91       	pop	r16
     7c2:	ff 90       	pop	r15
     7c4:	ef 90       	pop	r14
     7c6:	df 90       	pop	r13
     7c8:	cf 90       	pop	r12
     7ca:	bf 90       	pop	r11
     7cc:	af 90       	pop	r10
     7ce:	9f 90       	pop	r9
     7d0:	8f 90       	pop	r8
     7d2:	7f 90       	pop	r7
     7d4:	6f 90       	pop	r6
     7d6:	5f 90       	pop	r5
     7d8:	4f 90       	pop	r4
     7da:	3f 90       	pop	r3
     7dc:	2f 90       	pop	r2
     7de:	08 95       	ret

000007e0 <device_setHumidityToCurrent>:

void device_setHumidityToCurrent(device_t self, uint16_t value)
{
	currentCondition_setHumidity(self->currentCondition,value);
     7e0:	fc 01       	movw	r30, r24
     7e2:	84 81       	ldd	r24, Z+4	; 0x04
     7e4:	95 81       	ldd	r25, Z+5	; 0x05
     7e6:	53 cf       	rjmp	.-346    	; 0x68e <currentCondition_setHumidity>
     7e8:	08 95       	ret

000007ea <device_getHumidityData>:
}


uint16_t device_getHumidityData(device_t self)
{
	if (self->humAndTempReader!=NULL)
     7ea:	fc 01       	movw	r30, r24
     7ec:	82 81       	ldd	r24, Z+2	; 0x02
     7ee:	93 81       	ldd	r25, Z+3	; 0x03
     7f0:	00 97       	sbiw	r24, 0x00	; 0
     7f2:	11 f0       	breq	.+4      	; 0x7f8 <device_getHumidityData+0xe>
	{
		return humAndTempReader_getHumidity(self->humAndTempReader);
     7f4:	9c c1       	rjmp	.+824    	; 0xb2e <humAndTempReader_getHumidity>
     7f6:	08 95       	ret
	}
	else
	return -1;
     7f8:	8f ef       	ldi	r24, 0xFF	; 255
     7fa:	9f ef       	ldi	r25, 0xFF	; 255
}
     7fc:	08 95       	ret

000007fe <device_setCO2ToCurrent>:

void device_setCO2ToCurrent(device_t self, uint16_t value) {
	currentCondition_setCO2(self->currentCondition, value);
     7fe:	fc 01       	movw	r30, r24
     800:	84 81       	ldd	r24, Z+4	; 0x04
     802:	95 81       	ldd	r25, Z+5	; 0x05
     804:	3e cf       	rjmp	.-388    	; 0x682 <currentCondition_setCO2>
     806:	08 95       	ret

00000808 <device_getCO2Data>:
}

uint16_t device_getCO2Data(device_t self) {
	if (self->co2reader != NULL)
     808:	fc 01       	movw	r30, r24
     80a:	80 81       	ld	r24, Z
     80c:	91 81       	ldd	r25, Z+1	; 0x01
     80e:	00 97       	sbiw	r24, 0x00	; 0
     810:	19 f0       	breq	.+6      	; 0x818 <device_getCO2Data+0x10>
		return co2Reader_getCO2(self->co2reader);
     812:	23 df       	rcall	.-442    	; 0x65a <co2Reader_getCO2>
     814:	90 e0       	ldi	r25, 0x00	; 0
     816:	08 95       	ret
	else return -1;
     818:	8f ef       	ldi	r24, 0xFF	; 255
     81a:	9f ef       	ldi	r25, 0xFF	; 255
}
     81c:	08 95       	ret

0000081e <device_setTemperatureToCurrent>:

void device_setTemperatureToCurrent(device_t self, int16_t value)
{
	
	currentCondition_setTemperature(self->currentCondition,value);
     81e:	fc 01       	movw	r30, r24
     820:	84 81       	ldd	r24, Z+4	; 0x04
     822:	95 81       	ldd	r25, Z+5	; 0x05
     824:	3a cf       	rjmp	.-396    	; 0x69a <currentCondition_setTemperature>
     826:	08 95       	ret

00000828 <device_getTemperatureData>:
}


int16_t device_getTemperatureData(device_t self)
{
	if (self->humAndTempReader!=NULL)
     828:	fc 01       	movw	r30, r24
     82a:	82 81       	ldd	r24, Z+2	; 0x02
     82c:	93 81       	ldd	r25, Z+3	; 0x03
     82e:	00 97       	sbiw	r24, 0x00	; 0
     830:	11 f0       	breq	.+4      	; 0x836 <device_getTemperatureData+0xe>
	{
		return humAndTempReader_getTemperature(self->humAndTempReader);
     832:	81 c1       	rjmp	.+770    	; 0xb36 <humAndTempReader_getTemperature>
     834:	08 95       	ret
	}
	else
	return -1;
     836:	8f ef       	ldi	r24, 0xFF	; 255
     838:	9f ef       	ldi	r25, 0xFF	; 255
	
     83a:	08 95       	ret

0000083c <device_startMeasuring>:
void device_executeTask(device_t self) {
	for (;;)
		device_startMeasuring(self);
}

void device_startMeasuring(device_t self) {
     83c:	af 92       	push	r10
     83e:	bf 92       	push	r11
     840:	cf 92       	push	r12
     842:	df 92       	push	r13
     844:	ef 92       	push	r14
     846:	ff 92       	push	r15
     848:	0f 93       	push	r16
     84a:	1f 93       	push	r17
     84c:	cf 93       	push	r28
     84e:	df 93       	push	r29
     850:	cd b7       	in	r28, 0x3d	; 61
     852:	de b7       	in	r29, 0x3e	; 62
     854:	66 97       	sbiw	r28, 0x16	; 22
     856:	0f b6       	in	r0, 0x3f	; 63
     858:	f8 94       	cli
     85a:	de bf       	out	0x3e, r29	; 62
     85c:	0f be       	out	0x3f, r0	; 63
     85e:	cd bf       	out	0x3d, r28	; 61
     860:	5c 01       	movw	r10, r24
	//we should first check if device is on, get that from lora and add new eventBit 

	//tell sensors to start meassuring 
	xEventGroupSetBits(_startMeasureEventGroup, _startMeasureBit);
     862:	40 91 84 07 	lds	r20, 0x0784	; 0x800784 <_startMeasureBit>
     866:	50 91 85 07 	lds	r21, 0x0785	; 0x800785 <_startMeasureBit+0x1>
     86a:	60 91 86 07 	lds	r22, 0x0786	; 0x800786 <_startMeasureBit+0x2>
     86e:	70 91 87 07 	lds	r23, 0x0787	; 0x800787 <_startMeasureBit+0x3>
     872:	80 91 88 07 	lds	r24, 0x0788	; 0x800788 <_startMeasureEventGroup>
     876:	90 91 89 07 	lds	r25, 0x0789	; 0x800789 <_startMeasureEventGroup+0x1>
     87a:	70 d3       	rcall	.+1760   	; 0xf5c <xEventGroupSetBits>
	printf("device has set bits");
     87c:	86 e7       	ldi	r24, 0x76	; 118
     87e:	92 e0       	ldi	r25, 0x02	; 2
     880:	9f 93       	push	r25
     882:	8f 93       	push	r24
     884:	0e 94 3c 2b 	call	0x5678	; 0x5678 <printf>

	//wait for sensors to read data
	EventBits_t uxBits = xEventGroupWaitBits(_readyEventGroup, //eventGroup it is interested in
     888:	40 91 7e 07 	lds	r20, 0x077E	; 0x80077e <_readyBit>
     88c:	50 91 7f 07 	lds	r21, 0x077F	; 0x80077f <_readyBit+0x1>
     890:	60 91 80 07 	lds	r22, 0x0780	; 0x800780 <_readyBit+0x2>
     894:	70 91 81 07 	lds	r23, 0x0781	; 0x800781 <_readyBit+0x3>
     898:	cc 24       	eor	r12, r12
     89a:	ca 94       	dec	r12
     89c:	dc 2c       	mov	r13, r12
     89e:	76 01       	movw	r14, r12
     8a0:	01 e0       	ldi	r16, 0x01	; 1
     8a2:	21 e0       	ldi	r18, 0x01	; 1
     8a4:	80 91 82 07 	lds	r24, 0x0782	; 0x800782 <_readyEventGroup>
     8a8:	90 91 83 07 	lds	r25, 0x0783	; 0x800783 <_readyEventGroup+0x1>
     8ac:	97 d2       	rcall	.+1326   	; 0xddc <xEventGroupWaitBits>
		_readyBit, //bits it is interested in
		pdTRUE, //clears the bits 
		pdTRUE, //waits for both bits to be set
		portMAX_DELAY); //waits forever if needed

	if ((uxBits & (_readyBit)) == (_readyBit)) {
     8ae:	00 91 7e 07 	lds	r16, 0x077E	; 0x80077e <_readyBit>
     8b2:	10 91 7f 07 	lds	r17, 0x077F	; 0x80077f <_readyBit+0x1>
     8b6:	20 91 80 07 	lds	r18, 0x0780	; 0x800780 <_readyBit+0x2>
     8ba:	30 91 81 07 	lds	r19, 0x0781	; 0x800781 <_readyBit+0x3>
     8be:	dc 01       	movw	r26, r24
     8c0:	cb 01       	movw	r24, r22
     8c2:	80 23       	and	r24, r16
     8c4:	91 23       	and	r25, r17
     8c6:	a2 23       	and	r26, r18
     8c8:	b3 23       	and	r27, r19
     8ca:	0f 90       	pop	r0
     8cc:	0f 90       	pop	r0
     8ce:	08 17       	cp	r16, r24
     8d0:	19 07       	cpc	r17, r25
     8d2:	2a 07       	cpc	r18, r26
     8d4:	3b 07       	cpc	r19, r27
     8d6:	09 f0       	breq	.+2      	; 0x8da <device_startMeasuring+0x9e>
     8d8:	4c c0       	rjmp	.+152    	; 0x972 <device_startMeasuring+0x136>
		printf("device got done bit\n");
     8da:	8a e8       	ldi	r24, 0x8A	; 138
     8dc:	92 e0       	ldi	r25, 0x02	; 2
     8de:	0e 94 4f 2b 	call	0x569e	; 0x569e <puts>
		printf("CO2 is: %u\n", co2Reader_getCO2(self->co2reader));
     8e2:	f5 01       	movw	r30, r10
     8e4:	80 81       	ld	r24, Z
     8e6:	91 81       	ldd	r25, Z+1	; 0x01
     8e8:	b8 de       	rcall	.-656    	; 0x65a <co2Reader_getCO2>
     8ea:	1f 92       	push	r1
     8ec:	8f 93       	push	r24
     8ee:	8e e9       	ldi	r24, 0x9E	; 158
     8f0:	92 e0       	ldi	r25, 0x02	; 2
     8f2:	9f 93       	push	r25
     8f4:	8f 93       	push	r24
     8f6:	0e 94 3c 2b 	call	0x5678	; 0x5678 <printf>
		printf("Temperature is: %d\n", device_getTemperatureData(self));
     8fa:	c5 01       	movw	r24, r10
     8fc:	95 df       	rcall	.-214    	; 0x828 <device_getTemperatureData>
     8fe:	9f 93       	push	r25
     900:	8f 93       	push	r24
     902:	8a ea       	ldi	r24, 0xAA	; 170
     904:	92 e0       	ldi	r25, 0x02	; 2
     906:	9f 93       	push	r25
     908:	8f 93       	push	r24
     90a:	0e 94 3c 2b 	call	0x5678	; 0x5678 <printf>
		printf("Humidity is: %d\n", device_getHumidityData(self));
     90e:	c5 01       	movw	r24, r10
     910:	6c df       	rcall	.-296    	; 0x7ea <device_getHumidityData>
     912:	9f 93       	push	r25
     914:	8f 93       	push	r24
     916:	8e eb       	ldi	r24, 0xBE	; 190
     918:	92 e0       	ldi	r25, 0x02	; 2
     91a:	9f 93       	push	r25
     91c:	8f 93       	push	r24
     91e:	0e 94 3c 2b 	call	0x5678	; 0x5678 <printf>
		
		device_setCO2ToCurrent(self, device_getCO2Data(self));
     922:	c5 01       	movw	r24, r10
     924:	71 df       	rcall	.-286    	; 0x808 <device_getCO2Data>
     926:	bc 01       	movw	r22, r24
     928:	c5 01       	movw	r24, r10
		device_setTemperatureToCurrent(self, device_getTemperatureData(self));
     92a:	69 df       	rcall	.-302    	; 0x7fe <device_setCO2ToCurrent>
     92c:	c5 01       	movw	r24, r10
     92e:	7c df       	rcall	.-264    	; 0x828 <device_getTemperatureData>
     930:	bc 01       	movw	r22, r24
     932:	c5 01       	movw	r24, r10
     934:	74 df       	rcall	.-280    	; 0x81e <device_setTemperatureToCurrent>
		device_setHumidityToCurrent(self, device_getHumidityData(self));
     936:	c5 01       	movw	r24, r10
     938:	58 df       	rcall	.-336    	; 0x7ea <device_getHumidityData>
     93a:	bc 01       	movw	r22, r24
     93c:	c5 01       	movw	r24, r10
     93e:	50 df       	rcall	.-352    	; 0x7e0 <device_setHumidityToCurrent>
     940:	f5 01       	movw	r30, r10
		
		
		/*Perhaps loraPayload is not a good idea to be here*/
		lora_payload_t payload = getcurrentConditionPayload(self->currentCondition);
     942:	64 81       	ldd	r22, Z+4	; 0x04
     944:	75 81       	ldd	r23, Z+5	; 0x05
     946:	ce 01       	movw	r24, r28
     948:	01 96       	adiw	r24, 0x01	; 1
     94a:	ad de       	rcall	.-678    	; 0x6a6 <getcurrentConditionPayload>
     94c:	0f ef       	ldi	r16, 0xFF	; 255
     94e:	1f ef       	ldi	r17, 0xFF	; 255
		
		size_t bytesToSend = xMessageBufferSend(_uplinkmessageBuffer,(void*) &payload,sizeof(payload),portMAX_DELAY);
     950:	98 01       	movw	r18, r16
     952:	46 e1       	ldi	r20, 0x16	; 22
     954:	50 e0       	ldi	r21, 0x00	; 0
     956:	be 01       	movw	r22, r28
     958:	6f 5f       	subi	r22, 0xFF	; 255
     95a:	7f 4f       	sbci	r23, 0xFF	; 255
     95c:	80 91 7c 07 	lds	r24, 0x077C	; 0x80077c <_uplinkmessageBuffer>
     960:	90 91 7d 07 	lds	r25, 0x077D	; 0x80077d <_uplinkmessageBuffer+0x1>
     964:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <xStreamBufferSend>
     968:	0f b6       	in	r0, 0x3f	; 63
     96a:	f8 94       	cli
     96c:	de bf       	out	0x3e, r29	; 62
     96e:	0f be       	out	0x3f, r0	; 63
     970:	cd bf       	out	0x3d, r28	; 61
     972:	66 96       	adiw	r28, 0x16	; 22
     974:	0f b6       	in	r0, 0x3f	; 63
		
		
	}
}
     976:	f8 94       	cli
     978:	de bf       	out	0x3e, r29	; 62
     97a:	0f be       	out	0x3f, r0	; 63
     97c:	cd bf       	out	0x3d, r28	; 61
     97e:	df 91       	pop	r29
     980:	cf 91       	pop	r28
     982:	1f 91       	pop	r17
     984:	0f 91       	pop	r16
     986:	ff 90       	pop	r15
     988:	ef 90       	pop	r14
     98a:	df 90       	pop	r13
     98c:	cf 90       	pop	r12
     98e:	bf 90       	pop	r11
     990:	af 90       	pop	r10
     992:	08 95       	ret

00000994 <device_executeTask>:
     994:	ec 01       	movw	r28, r24
     996:	ce 01       	movw	r24, r28
}

//devided so we can test
void device_executeTask(device_t self) {
	for (;;)
		device_startMeasuring(self);
     998:	51 df       	rcall	.-350    	; 0x83c <device_startMeasuring>
     99a:	fd cf       	rjmp	.-6      	; 0x996 <device_executeTask+0x2>

0000099c <humAndTempReader_create>:
void humAndTempReader_destroy(humAndTempReader_t self) {
	if (self == NULL)
	return;

	//delete will clear the allocated memory to the task + we need to remove everything else
	vTaskDelete(self->handleTask);
     99c:	2f 92       	push	r2
     99e:	3f 92       	push	r3
     9a0:	4f 92       	push	r4
     9a2:	5f 92       	push	r5
     9a4:	6f 92       	push	r6
     9a6:	7f 92       	push	r7
     9a8:	8f 92       	push	r8
     9aa:	9f 92       	push	r9
     9ac:	af 92       	push	r10
     9ae:	bf 92       	push	r11
     9b0:	cf 92       	push	r12
     9b2:	df 92       	push	r13
     9b4:	ef 92       	push	r14
     9b6:	ff 92       	push	r15
     9b8:	0f 93       	push	r16
     9ba:	1f 93       	push	r17
     9bc:	cf 93       	push	r28
     9be:	df 93       	push	r29
     9c0:	88 2e       	mov	r8, r24
     9c2:	96 2e       	mov	r9, r22
     9c4:	1a 01       	movw	r2, r20
     9c6:	28 01       	movw	r4, r16
     9c8:	39 01       	movw	r6, r18
     9ca:	61 e0       	ldi	r22, 0x01	; 1
     9cc:	70 e0       	ldi	r23, 0x00	; 0
     9ce:	86 e0       	ldi	r24, 0x06	; 6
     9d0:	90 e0       	ldi	r25, 0x00	; 0
     9d2:	0e 94 9e 29 	call	0x533c	; 0x533c <calloc>
     9d6:	ec 01       	movw	r28, r24
     9d8:	89 2b       	or	r24, r25
     9da:	a1 f1       	breq	.+104    	; 0xa44 <humAndTempReader_create+0xa8>
     9dc:	19 82       	std	Y+1, r1	; 0x01
     9de:	18 82       	st	Y, r1
     9e0:	1b 82       	std	Y+3, r1	; 0x03
     9e2:	1a 82       	std	Y+2, r1	; 0x02
     9e4:	30 92 95 07 	sts	0x0795, r3	; 0x800795 <_startMeasureEventGroup+0x1>
     9e8:	20 92 94 07 	sts	0x0794, r2	; 0x800794 <_startMeasureEventGroup>
     9ec:	40 92 90 07 	sts	0x0790, r4	; 0x800790 <_startMeasureBit>
     9f0:	50 92 91 07 	sts	0x0791, r5	; 0x800791 <_startMeasureBit+0x1>
     9f4:	60 92 92 07 	sts	0x0792, r6	; 0x800792 <_startMeasureBit+0x2>
     9f8:	70 92 93 07 	sts	0x0793, r7	; 0x800793 <_startMeasureBit+0x3>
     9fc:	f0 92 8f 07 	sts	0x078F, r15	; 0x80078f <_readyEventGroup+0x1>
     a00:	e0 92 8e 07 	sts	0x078E, r14	; 0x80078e <_readyEventGroup>
     a04:	a0 92 8a 07 	sts	0x078A, r10	; 0x80078a <_readyBit>
     a08:	b0 92 8b 07 	sts	0x078B, r11	; 0x80078b <_readyBit+0x1>
     a0c:	c0 92 8c 07 	sts	0x078C, r12	; 0x80078c <_readyBit+0x2>
     a10:	d0 92 8d 07 	sts	0x078D, r13	; 0x80078d <_readyBit+0x3>
     a14:	0e 94 6c 1b 	call	0x36d8	; 0x36d8 <hih8120Create>
     a18:	49 2d       	mov	r20, r9
     a1a:	50 e0       	ldi	r21, 0x00	; 0
     a1c:	7e 01       	movw	r14, r28
     a1e:	84 e0       	ldi	r24, 0x04	; 4
     a20:	e8 0e       	add	r14, r24
     a22:	f1 1c       	adc	r15, r1
     a24:	08 2d       	mov	r16, r8
     a26:	9e 01       	movw	r18, r28
     a28:	6f ec       	ldi	r22, 0xCF	; 207
     a2a:	72 e0       	ldi	r23, 0x02	; 2
     a2c:	83 e9       	ldi	r24, 0x93	; 147
     a2e:	95 e0       	ldi	r25, 0x05	; 5
     a30:	0e 94 f7 11 	call	0x23ee	; 0x23ee <xTaskCreate>
     a34:	80 ee       	ldi	r24, 0xE0	; 224
     a36:	92 e0       	ldi	r25, 0x02	; 2
     a38:	9f 93       	push	r25
     a3a:	8f 93       	push	r24
     a3c:	0e 94 3c 2b 	call	0x5678	; 0x5678 <printf>
     a40:	0f 90       	pop	r0
     a42:	0f 90       	pop	r0
     a44:	ce 01       	movw	r24, r28
     a46:	df 91       	pop	r29
     a48:	cf 91       	pop	r28
     a4a:	1f 91       	pop	r17
     a4c:	0f 91       	pop	r16
     a4e:	ff 90       	pop	r15
     a50:	ef 90       	pop	r14
     a52:	df 90       	pop	r13
     a54:	cf 90       	pop	r12
     a56:	bf 90       	pop	r11
     a58:	af 90       	pop	r10
     a5a:	9f 90       	pop	r9
     a5c:	8f 90       	pop	r8
     a5e:	7f 90       	pop	r7
     a60:	6f 90       	pop	r6
     a62:	5f 90       	pop	r5
     a64:	4f 90       	pop	r4
     a66:	3f 90       	pop	r3
     a68:	2f 90       	pop	r2
     a6a:	08 95       	ret

00000a6c <humAndTempReader_measure>:
	for (;;) {
		humAndTempReader_measure(self);
	}
}

void humAndTempReader_measure(humAndTempReader_t self) {//dummy
     a6c:	cf 92       	push	r12
     a6e:	df 92       	push	r13
     a70:	ef 92       	push	r14
     a72:	ff 92       	push	r15
     a74:	0f 93       	push	r16
     a76:	1f 93       	push	r17
     a78:	cf 93       	push	r28
     a7a:	df 93       	push	r29
     a7c:	ec 01       	movw	r28, r24
	EventBits_t uxBits = xEventGroupWaitBits(_startMeasureEventGroup, //eventGroup
     a7e:	40 91 90 07 	lds	r20, 0x0790	; 0x800790 <_startMeasureBit>
     a82:	50 91 91 07 	lds	r21, 0x0791	; 0x800791 <_startMeasureBit+0x1>
     a86:	60 91 92 07 	lds	r22, 0x0792	; 0x800792 <_startMeasureBit+0x2>
     a8a:	70 91 93 07 	lds	r23, 0x0793	; 0x800793 <_startMeasureBit+0x3>
     a8e:	cc 24       	eor	r12, r12
     a90:	ca 94       	dec	r12
     a92:	dc 2c       	mov	r13, r12
     a94:	76 01       	movw	r14, r12
     a96:	01 e0       	ldi	r16, 0x01	; 1
     a98:	21 e0       	ldi	r18, 0x01	; 1
     a9a:	80 91 94 07 	lds	r24, 0x0794	; 0x800794 <_startMeasureEventGroup>
     a9e:	90 91 95 07 	lds	r25, 0x0795	; 0x800795 <_startMeasureEventGroup+0x1>
     aa2:	9c d1       	rcall	.+824    	; 0xddc <xEventGroupWaitBits>
	_startMeasureBit, //bits it is interested in
	pdTRUE, //clears the bits
	pdTRUE, //waits for both bits to be set
	portMAX_DELAY); //wait

	if ((uxBits & (_startMeasureBit)) == (_startMeasureBit)) {
     aa4:	00 91 90 07 	lds	r16, 0x0790	; 0x800790 <_startMeasureBit>
     aa8:	10 91 91 07 	lds	r17, 0x0791	; 0x800791 <_startMeasureBit+0x1>
     aac:	20 91 92 07 	lds	r18, 0x0792	; 0x800792 <_startMeasureBit+0x2>
     ab0:	30 91 93 07 	lds	r19, 0x0793	; 0x800793 <_startMeasureBit+0x3>
     ab4:	dc 01       	movw	r26, r24
     ab6:	cb 01       	movw	r24, r22
     ab8:	80 23       	and	r24, r16
     aba:	91 23       	and	r25, r17
     abc:	a2 23       	and	r26, r18
     abe:	b3 23       	and	r27, r19
     ac0:	08 17       	cp	r16, r24
     ac2:	19 07       	cpc	r17, r25
     ac4:	2a 07       	cpc	r18, r26
     ac6:	3b 07       	cpc	r19, r27
     ac8:	29 f5       	brne	.+74     	; 0xb14 <humAndTempReader_measure+0xa8>
		hih8120Meassure();
     aca:	0e 94 87 1b 	call	0x370e	; 0x370e <hih8120Meassure>
		if(hih8120IsReady())
     ace:	0e 94 84 1b 	call	0x3708	; 0x3708 <hih8120IsReady>
     ad2:	89 2b       	or	r24, r25
     ad4:	61 f0       	breq	.+24     	; 0xaee <humAndTempReader_measure+0x82>
		{
			self->humidity = hih8120GetHumidityPercent_x10();
     ad6:	0e 94 ad 1b 	call	0x375a	; 0x375a <hih8120GetHumidityPercent_x10>
     ada:	99 83       	std	Y+1, r25	; 0x01
     adc:	88 83       	st	Y, r24
			self->temperature = hih8120GetTemperature_x10();
     ade:	0e 94 d3 1b 	call	0x37a6	; 0x37a6 <hih8120GetTemperature_x10>
     ae2:	9b 83       	std	Y+3, r25	; 0x03
     ae4:	8a 83       	std	Y+2, r24	; 0x02
			printf("humidity and temperature done bit set\n");
     ae6:	8f ef       	ldi	r24, 0xFF	; 255
     ae8:	92 e0       	ldi	r25, 0x02	; 2
     aea:	0e 94 4f 2b 	call	0x569e	; 0x569e <puts>
		}
		vTaskDelay(2500); //pretend it takes some time
     aee:	64 ec       	ldi	r22, 0xC4	; 196
     af0:	79 e0       	ldi	r23, 0x09	; 9
     af2:	80 e0       	ldi	r24, 0x00	; 0
     af4:	90 e0       	ldi	r25, 0x00	; 0
     af6:	0e 94 b7 14 	call	0x296e	; 0x296e <vTaskDelay>

		//set done bit so that device knows meassurement is done
		xEventGroupSetBits(_readyEventGroup, _readyBit);
     afa:	40 91 8a 07 	lds	r20, 0x078A	; 0x80078a <_readyBit>
     afe:	50 91 8b 07 	lds	r21, 0x078B	; 0x80078b <_readyBit+0x1>
     b02:	60 91 8c 07 	lds	r22, 0x078C	; 0x80078c <_readyBit+0x2>
     b06:	70 91 8d 07 	lds	r23, 0x078D	; 0x80078d <_readyBit+0x3>
     b0a:	80 91 8e 07 	lds	r24, 0x078E	; 0x80078e <_readyEventGroup>
     b0e:	90 91 8f 07 	lds	r25, 0x078F	; 0x80078f <_readyEventGroup+0x1>
     b12:	24 d2       	rcall	.+1096   	; 0xf5c <xEventGroupSetBits>
	}
}
     b14:	df 91       	pop	r29
     b16:	cf 91       	pop	r28
     b18:	1f 91       	pop	r17
     b1a:	0f 91       	pop	r16
     b1c:	ff 90       	pop	r15
     b1e:	ef 90       	pop	r14
     b20:	df 90       	pop	r13
     b22:	cf 90       	pop	r12
     b24:	08 95       	ret

00000b26 <humAndTempReader_executeTask>:
	//free(self->temperature);
	//free(self);
}

//actual task, methods devided so that it is possible to test
void humAndTempReader_executeTask(humAndTempReader_t self) {
     b26:	ec 01       	movw	r28, r24
	for (;;) {
		humAndTempReader_measure(self);
     b28:	ce 01       	movw	r24, r28
     b2a:	a0 df       	rcall	.-192    	; 0xa6c <humAndTempReader_measure>
     b2c:	fd cf       	rjmp	.-6      	; 0xb28 <humAndTempReader_executeTask+0x2>

00000b2e <humAndTempReader_getHumidity>:
	}
}

uint16_t humAndTempReader_getHumidity(humAndTempReader_t self){
	return self->humidity;
}
     b2e:	fc 01       	movw	r30, r24
     b30:	80 81       	ld	r24, Z
     b32:	91 81       	ldd	r25, Z+1	; 0x01
     b34:	08 95       	ret

00000b36 <humAndTempReader_getTemperature>:

int16_t humAndTempReader_getTemperature(humAndTempReader_t self){
	return self->temperature;
}
     b36:	fc 01       	movw	r30, r24
     b38:	82 81       	ldd	r24, Z+2	; 0x02
     b3a:	93 81       	ldd	r25, Z+3	; 0x03
     b3c:	08 95       	ret

00000b3e <lora_UpLinkHandler_create>:


/*Check for the parameters*/

void lora_UpLinkHandler_create(UBaseType_t lora_handler_task_priority, MessageBufferHandle_t xMessageBuffer)
{
     b3e:	ef 92       	push	r14
     b40:	ff 92       	push	r15
     b42:	0f 93       	push	r16
     b44:	9b 01       	movw	r18, r22
	_buffer = xMessageBuffer;
	
	xTaskCreate(
     b46:	e1 2c       	mov	r14, r1
     b48:	f1 2c       	mov	r15, r1
     b4a:	08 2f       	mov	r16, r24
     b4c:	48 e8       	ldi	r20, 0x88	; 136
     b4e:	51 e0       	ldi	r21, 0x01	; 1
     b50:	65 e2       	ldi	r22, 0x25	; 37
     b52:	73 e0       	ldi	r23, 0x03	; 3
     b54:	8b eb       	ldi	r24, 0xBB	; 187
     b56:	96 e0       	ldi	r25, 0x06	; 6
     b58:	0e 94 f7 11 	call	0x23ee	; 0x23ee <xTaskCreate>
	,  (const portCHAR *)"LRUpHand"  // A name just for humans
	,  configMINIMAL_STACK_SIZE+200  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  xMessageBuffer
	,  lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}
     b5c:	0f 91       	pop	r16
     b5e:	ff 90       	pop	r15
     b60:	ef 90       	pop	r14
     b62:	08 95       	ret

00000b64 <lora_UpLinkHandler_task>:
	
	/*Receives message from message buffer shared between it and the application responsible for gathering the data
	--> Should be called every 5 minutes from application
	*/
	void lora_UpLinkHandler_task(MessageBufferHandle_t xMessageBuffer)
	{	
     b64:	df 92       	push	r13
     b66:	ef 92       	push	r14
     b68:	ff 92       	push	r15
     b6a:	0f 93       	push	r16
     b6c:	1f 93       	push	r17
     b6e:	cf 93       	push	r28
     b70:	df 93       	push	r29
     b72:	7c 01       	movw	r14, r24
		size_t xBytesToSend;
		char rxData[50];
		
		// Hardware reset of LoRaWAN transceiver
		lora_driver_reset_rn2483(1);
     b74:	81 e0       	ldi	r24, 0x01	; 1
     b76:	0e 94 f2 1e 	call	0x3de4	; 0x3de4 <lora_driver_reset_rn2483>
		vTaskDelay(2);
     b7a:	62 e0       	ldi	r22, 0x02	; 2
     b7c:	70 e0       	ldi	r23, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	90 e0       	ldi	r25, 0x00	; 0
     b82:	0e 94 b7 14 	call	0x296e	; 0x296e <vTaskDelay>
		lora_driver_reset_rn2483(0);
     b86:	80 e0       	ldi	r24, 0x00	; 0
     b88:	0e 94 f2 1e 	call	0x3de4	; 0x3de4 <lora_driver_reset_rn2483>
		// Give it a chance to wakeup
		vTaskDelay(150);
     b8c:	66 e9       	ldi	r22, 0x96	; 150
     b8e:	70 e0       	ldi	r23, 0x00	; 0
     b90:	80 e0       	ldi	r24, 0x00	; 0
     b92:	90 e0       	ldi	r25, 0x00	; 0
     b94:	0e 94 b7 14 	call	0x296e	; 0x296e <vTaskDelay>

		lora_driver_flush_buffers(); // get rid of first version string from module after reset!
     b98:	0e 94 a8 1e 	call	0x3d50	; 0x3d50 <lora_driver_flush_buffers>
}

static void _lora_setup(void)
{
	e_LoRa_return_code_t rc;
	led_slow_blink(led_ST2); // OPTIONAL: Led the green led blink slowly while we are setting up LoRa
     b9c:	81 e0       	ldi	r24, 0x01	; 1
     b9e:	0e 94 00 1d 	call	0x3a00	; 0x3a00 <led_slow_blink>
	//The below code is required to be executed only once due to the fact that these MAC settings
	// can be stored inside of the tranciever
	//START ON ONE TIME USE CODE

	// Factory reset the transceiver
	printf("FactoryReset >%s<\n", lora_driver_map_return_code_to_text(lora_driver_rn2483_factory_reset()));
     ba2:	0e 94 06 1f 	call	0x3e0c	; 0x3e0c <lora_driver_rn2483_factory_reset>
     ba6:	0e 94 83 21 	call	0x4306	; 0x4306 <lora_driver_map_return_code_to_text>
     baa:	9f 93       	push	r25
     bac:	8f 93       	push	r24
     bae:	8e e2       	ldi	r24, 0x2E	; 46
     bb0:	93 e0       	ldi	r25, 0x03	; 3
     bb2:	9f 93       	push	r25
     bb4:	8f 93       	push	r24
     bb6:	0e 94 3c 2b 	call	0x5678	; 0x5678 <printf>
	
	// Configure to EU868 LoRaWAN standards
	printf("Configure to EU868 >%s<\n", lora_driver_map_return_code_to_text(lora_driver_configure_to_eu868()));
     bba:	0e 94 84 20 	call	0x4108	; 0x4108 <lora_driver_configure_to_eu868>
     bbe:	0e 94 83 21 	call	0x4306	; 0x4306 <lora_driver_map_return_code_to_text>
     bc2:	9f 93       	push	r25
     bc4:	8f 93       	push	r24
     bc6:	81 e4       	ldi	r24, 0x41	; 65
     bc8:	93 e0       	ldi	r25, 0x03	; 3
     bca:	9f 93       	push	r25
     bcc:	8f 93       	push	r24
     bce:	0e 94 3c 2b 	call	0x5678	; 0x5678 <printf>

	// Get the transceivers HW EUI
	rc = lora_driver_get_rn2483_hweui(_out_buf);
     bd2:	8c ea       	ldi	r24, 0xAC	; 172
     bd4:	97 e0       	ldi	r25, 0x07	; 7
     bd6:	0e 94 18 1f 	call	0x3e30	; 0x3e30 <lora_driver_get_rn2483_hweui>
	printf("Get HWEUI >%s<: %s\n",lora_driver_map_return_code_to_text(rc), _out_buf);
     bda:	0e 94 83 21 	call	0x4306	; 0x4306 <lora_driver_map_return_code_to_text>
     bde:	cc ea       	ldi	r28, 0xAC	; 172
     be0:	d7 e0       	ldi	r29, 0x07	; 7
     be2:	df 93       	push	r29
     be4:	cf 93       	push	r28
     be6:	9f 93       	push	r25
     be8:	8f 93       	push	r24
     bea:	8a e5       	ldi	r24, 0x5A	; 90
     bec:	93 e0       	ldi	r25, 0x03	; 3
     bee:	9f 93       	push	r25
     bf0:	8f 93       	push	r24
     bf2:	0e 94 3c 2b 	call	0x5678	; 0x5678 <printf>

	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_map_return_code_to_text(lora_driver_set_device_identifier(_out_buf)));
     bf6:	ce 01       	movw	r24, r28
     bf8:	0e 94 34 1f 	call	0x3e68	; 0x3e68 <lora_driver_set_device_identifier>
     bfc:	0e 94 83 21 	call	0x4306	; 0x4306 <lora_driver_map_return_code_to_text>
     c00:	9f 93       	push	r25
     c02:	8f 93       	push	r24
     c04:	df 93       	push	r29
     c06:	cf 93       	push	r28
     c08:	8e e6       	ldi	r24, 0x6E	; 110
     c0a:	93 e0       	ldi	r25, 0x03	; 3
     c0c:	9f 93       	push	r25
     c0e:	8f 93       	push	r24
     c10:	0e 94 3c 2b 	call	0x5678	; 0x5678 <printf>

	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_map_return_code_to_text(lora_driver_set_otaa_identity(LORA_appEUI,LORA_appKEY,_out_buf)));
     c14:	ae 01       	movw	r20, r28
     c16:	63 e8       	ldi	r22, 0x83	; 131
     c18:	73 e0       	ldi	r23, 0x03	; 3
     c1a:	84 ea       	ldi	r24, 0xA4	; 164
     c1c:	93 e0       	ldi	r25, 0x03	; 3
     c1e:	0e 94 62 21 	call	0x42c4	; 0x42c4 <lora_driver_set_otaa_identity>
     c22:	0e 94 83 21 	call	0x4306	; 0x4306 <lora_driver_map_return_code_to_text>
     c26:	9f 93       	push	r25
     c28:	8f 93       	push	r24
     c2a:	df 93       	push	r29
     c2c:	cf 93       	push	r28
     c2e:	83 e8       	ldi	r24, 0x83	; 131
     c30:	93 e0       	ldi	r25, 0x03	; 3
     c32:	9f 93       	push	r25
     c34:	8f 93       	push	r24
     c36:	84 ea       	ldi	r24, 0xA4	; 164
     c38:	93 e0       	ldi	r25, 0x03	; 3
     c3a:	9f 93       	push	r25
     c3c:	8f 93       	push	r24
     c3e:	85 eb       	ldi	r24, 0xB5	; 181
     c40:	93 e0       	ldi	r25, 0x03	; 3
     c42:	9f 93       	push	r25
     c44:	8f 93       	push	r24
     c46:	0e 94 3c 2b 	call	0x5678	; 0x5678 <printf>

	// Save all the MAC settings in the transceiver
	printf("Save mac >%s<\n",lora_driver_map_return_code_to_text(lora_driver_save_mac()));
     c4a:	0e 94 67 1f 	call	0x3ece	; 0x3ece <lora_driver_save_mac>
     c4e:	0e 94 83 21 	call	0x4306	; 0x4306 <lora_driver_map_return_code_to_text>
     c52:	9f 93       	push	r25
     c54:	8f 93       	push	r24
     c56:	8b ee       	ldi	r24, 0xEB	; 235
     c58:	93 e0       	ldi	r25, 0x03	; 3
     c5a:	9f 93       	push	r25
     c5c:	8f 93       	push	r24
     c5e:	0e 94 3c 2b 	call	0x5678	; 0x5678 <printf>

	//END OF ONE TIME USE CODE
	
	
	// Enable Adaptive Data Rate
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_map_return_code_to_text(lora_driver_set_adaptive_data_rate(LoRa_ON)));
     c62:	8d b7       	in	r24, 0x3d	; 61
     c64:	9e b7       	in	r25, 0x3e	; 62
     c66:	82 96       	adiw	r24, 0x22	; 34
     c68:	0f b6       	in	r0, 0x3f	; 63
     c6a:	f8 94       	cli
     c6c:	9e bf       	out	0x3e, r25	; 62
     c6e:	0f be       	out	0x3f, r0	; 63
     c70:	8d bf       	out	0x3d, r24	; 61
     c72:	81 e0       	ldi	r24, 0x01	; 1
     c74:	0e 94 61 20 	call	0x40c2	; 0x40c2 <lora_driver_set_adaptive_data_rate>
     c78:	0e 94 83 21 	call	0x4306	; 0x4306 <lora_driver_map_return_code_to_text>
     c7c:	9f 93       	push	r25
     c7e:	8f 93       	push	r24
     c80:	8a ef       	ldi	r24, 0xFA	; 250
     c82:	93 e0       	ldi	r25, 0x03	; 3
     c84:	9f 93       	push	r25
     c86:	8f 93       	push	r24
     c88:	0e 94 3c 2b 	call	0x5678	; 0x5678 <printf>

	// Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	printf("Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_map_return_code_to_text(lora_driver_set_receive_delay(500)));
     c8c:	84 ef       	ldi	r24, 0xF4	; 244
     c8e:	91 e0       	ldi	r25, 0x01	; 1
     c90:	0e 94 6c 20 	call	0x40d8	; 0x40d8 <lora_driver_set_receive_delay>
     c94:	0e 94 83 21 	call	0x4306	; 0x4306 <lora_driver_map_return_code_to_text>
     c98:	9f 93       	push	r25
     c9a:	8f 93       	push	r24
     c9c:	81 e0       	ldi	r24, 0x01	; 1
     c9e:	8f 93       	push	r24
     ca0:	84 ef       	ldi	r24, 0xF4	; 244
     ca2:	8f 93       	push	r24
     ca4:	8b e1       	ldi	r24, 0x1B	; 27
     ca6:	94 e0       	ldi	r25, 0x04	; 4
     ca8:	9f 93       	push	r25
     caa:	8f 93       	push	r24
     cac:	0e 94 3c 2b 	call	0x5678	; 0x5678 <printf>
     cb0:	8d b7       	in	r24, 0x3d	; 61
     cb2:	9e b7       	in	r25, 0x3e	; 62
     cb4:	0a 96       	adiw	r24, 0x0a	; 10
     cb6:	0f b6       	in	r0, 0x3f	; 63
     cb8:	f8 94       	cli
     cba:	9e bf       	out	0x3e, r25	; 62
     cbc:	0f be       	out	0x3f, r0	; 63
     cbe:	8d bf       	out	0x3d, r24	; 61
     cc0:	ca e0       	ldi	r28, 0x0A	; 10
     cc2:	d0 e0       	ldi	r29, 0x00	; 0
	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
	
	do {
		rc = lora_driver_join(LoRa_OTAA);
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_map_return_code_to_text(rc));
     cc4:	0b e3       	ldi	r16, 0x3B	; 59
     cc6:	14 e0       	ldi	r17, 0x04	; 4

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
	
	do {
		rc = lora_driver_join(LoRa_OTAA);
     cc8:	80 e0       	ldi	r24, 0x00	; 0
     cca:	0e 94 6d 1f 	call	0x3eda	; 0x3eda <lora_driver_join>
     cce:	d8 2e       	mov	r13, r24
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_map_return_code_to_text(rc));
     cd0:	0e 94 83 21 	call	0x4306	; 0x4306 <lora_driver_map_return_code_to_text>
     cd4:	9f 93       	push	r25
     cd6:	8f 93       	push	r24
     cd8:	df 93       	push	r29
     cda:	cf 93       	push	r28
     cdc:	1f 93       	push	r17
     cde:	0f 93       	push	r16
     ce0:	0e 94 3c 2b 	call	0x5678	; 0x5678 <printf>

		if ( rc != LoRa_ACCEPTED)
     ce4:	0f 90       	pop	r0
     ce6:	0f 90       	pop	r0
     ce8:	0f 90       	pop	r0
     cea:	0f 90       	pop	r0
     cec:	0f 90       	pop	r0
     cee:	0f 90       	pop	r0
     cf0:	88 e0       	ldi	r24, 0x08	; 8
     cf2:	d8 16       	cp	r13, r24
     cf4:	a9 f0       	breq	.+42     	; 0xd20 <lora_UpLinkHandler_task+0x1bc>
		{
			// Make the red led pulse to tell something went wrong
			led_long_puls(led_ST1); // OPTIONAL
     cf6:	80 e0       	ldi	r24, 0x00	; 0
     cf8:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <led_long_puls>
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
     cfc:	66 e3       	ldi	r22, 0x36	; 54
     cfe:	71 e0       	ldi	r23, 0x01	; 1
     d00:	80 e0       	ldi	r24, 0x00	; 0
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	0e 94 b7 14 	call	0x296e	; 0x296e <vTaskDelay>
     d08:	21 97       	sbiw	r28, 0x01	; 1
		}
		else
		{
			break;
		}
	} while (--maxJoinTriesLeft);
     d0a:	f1 f6       	brne	.-68     	; 0xcc8 <lora_UpLinkHandler_task+0x164>
     d0c:	02 c0       	rjmp	.+4      	; 0xd12 <lora_UpLinkHandler_task+0x1ae>
		led_fast_blink(led_ST1); // OPTIONAL

		// Lets stay here
		while (1)
		{
			taskYIELD();
     d0e:	3e d4       	rcall	.+2172   	; 0x158c <vPortYield>
     d10:	fe cf       	rjmp	.-4      	; 0xd0e <lora_UpLinkHandler_task+0x1aa>
	}
	else
	{
		// Something went wrong
		// Turn off the green led
		led_led_off(led_ST2); // OPTIONAL
     d12:	81 e0       	ldi	r24, 0x01	; 1
     d14:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <led_led_off>
		// Make the red led blink fast to tell something went wrong
		led_fast_blink(led_ST1); // OPTIONAL
     d18:	80 e0       	ldi	r24, 0x00	; 0
     d1a:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <led_fast_blink>
     d1e:	f7 cf       	rjmp	.-18     	; 0xd0e <lora_UpLinkHandler_task+0x1aa>

	if (rc == LoRa_ACCEPTED)
	{
		// Connected to LoRaWAN :-)
		// Make the green led steady
		led_led_on(led_ST2); // OPTIONAL
     d20:	81 e0       	ldi	r24, 0x01	; 1
     d22:	0e 94 4e 1d 	call	0x3a9c	; 0x3a9c <led_led_on>
		lora_driver_flush_buffers(); // get rid of first version string from module after reset!

		_lora_setup();

		
		xBytesToSend = xMessageBufferReceive(xMessageBuffer, (void*) &_uplink_payload,
     d26:	00 e0       	ldi	r16, 0x00	; 0
     d28:	10 e0       	ldi	r17, 0x00	; 0
     d2a:	98 01       	movw	r18, r16
     d2c:	42 e3       	ldi	r20, 0x32	; 50
     d2e:	50 e0       	ldi	r21, 0x00	; 0
     d30:	66 e9       	ldi	r22, 0x96	; 150
     d32:	77 e0       	ldi	r23, 0x07	; 7
     d34:	c7 01       	movw	r24, r14
     d36:	0e 94 b6 10 	call	0x216c	; 0x216c <xStreamBufferReceive>
		
		//_uplink_payload = (_uplink_payload) &rxData;
		
		/**< Status led ST4 (BLUE)*/
		//Makes the led light up in a short period.
		led_short_puls(led_ST4);
     d3a:	83 e0       	ldi	r24, 0x03	; 3
     d3c:	0e 94 7e 1d 	call	0x3afc	; 0x3afc <led_short_puls>
		
		printf("Upload Message >%s<\n", lora_driver_map_return_code_to_text(lora_driver_sent_upload_message(false, &_uplink_payload)));
     d40:	66 e9       	ldi	r22, 0x96	; 150
     d42:	77 e0       	ldi	r23, 0x07	; 7
     d44:	80 e0       	ldi	r24, 0x00	; 0
     d46:	0e 94 96 1f 	call	0x3f2c	; 0x3f2c <lora_driver_sent_upload_message>
     d4a:	0e 94 83 21 	call	0x4306	; 0x4306 <lora_driver_map_return_code_to_text>
     d4e:	9f 93       	push	r25
     d50:	8f 93       	push	r24
     d52:	8b e5       	ldi	r24, 0x5B	; 91
     d54:	94 e0       	ldi	r25, 0x04	; 4
     d56:	9f 93       	push	r25
     d58:	8f 93       	push	r24
     d5a:	0e 94 3c 2b 	call	0x5678	; 0x5678 <printf>
	}
     d5e:	0f 90       	pop	r0
     d60:	0f 90       	pop	r0
     d62:	0f 90       	pop	r0
     d64:	0f 90       	pop	r0
     d66:	df 91       	pop	r29
     d68:	cf 91       	pop	r28
     d6a:	1f 91       	pop	r17
     d6c:	0f 91       	pop	r16
     d6e:	ff 90       	pop	r15
     d70:	ef 90       	pop	r14
     d72:	df 90       	pop	r13
     d74:	08 95       	ret

00000d76 <lora_UpLinkHandler_startTask>:
	
	void lora_UpLinkHandler_startTask(MessageBufferHandle_t xMessageBuffer){
     d76:	ec 01       	movw	r28, r24
		for(;;)
		{
			lora_UpLinkHandler_task(xMessageBuffer);
     d78:	ce 01       	movw	r24, r28
     d7a:	f4 de       	rcall	.-536    	; 0xb64 <lora_UpLinkHandler_task>
			vTaskDelay(300000);
     d7c:	60 ee       	ldi	r22, 0xE0	; 224
     d7e:	73 e9       	ldi	r23, 0x93	; 147
     d80:	84 e0       	ldi	r24, 0x04	; 4
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	0e 94 b7 14 	call	0x296e	; 0x296e <vTaskDelay>
     d88:	f7 cf       	rjmp	.-18     	; 0xd78 <lora_UpLinkHandler_startTask+0x2>

00000d8a <trace_init>:
	 #if (configUSE_TRACE_FACILITY == 1)
	 #ifdef HAL_DEFS_H_

	 #else
		// Used on VIA MEGA Shield rev. 2.0.0
		DDRK |= _BV(DDK0) | _BV(DDK1) | _BV(DDK2) | _BV(DDK3);
     d8a:	e7 e0       	ldi	r30, 0x07	; 7
     d8c:	f1 e0       	ldi	r31, 0x01	; 1
     d8e:	80 81       	ld	r24, Z
     d90:	8f 60       	ori	r24, 0x0F	; 15
     d92:	80 83       	st	Z, r24
     d94:	08 95       	ret

00000d96 <task_switch_in>:
	void task_switch_in(uint8_t task_no) {
		 #ifdef HAL_DEFS_H_

		 #else
		 // Used on VIA MEGA Shield rev. 2.0.0
		 PORTK &= 0b11110000;
     d96:	e8 e0       	ldi	r30, 0x08	; 8
     d98:	f1 e0       	ldi	r31, 0x01	; 1
     d9a:	90 81       	ld	r25, Z
     d9c:	90 7f       	andi	r25, 0xF0	; 240
     d9e:	90 83       	st	Z, r25
		 PORTK |= (task_no & 0b00001111);
     da0:	90 81       	ld	r25, Z
     da2:	8f 70       	andi	r24, 0x0F	; 15
     da4:	98 2b       	or	r25, r24
     da6:	90 83       	st	Z, r25
     da8:	08 95       	ret

00000daa <task_switch_out>:
	void task_switch_out(uint8_t task_no) {
		#ifdef HAL_DEFS_H_

		#else
		// Used on VIA MEGA Shield rev. 2.0.0
		PORTK &= 0b11110000;
     daa:	e8 e0       	ldi	r30, 0x08	; 8
     dac:	f1 e0       	ldi	r31, 0x01	; 1
     dae:	80 81       	ld	r24, Z
     db0:	80 7f       	andi	r24, 0xF0	; 240
     db2:	80 83       	st	Z, r24
     db4:	08 95       	ret

00000db6 <xEventGroupCreate>:
        uxReturn = pxEventBits->uxEventBits;
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
     db6:	cf 93       	push	r28
     db8:	df 93       	push	r29
     dba:	80 e1       	ldi	r24, 0x10	; 16
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	b4 d1       	rcall	.+872    	; 0x1128 <pvPortMalloc>
     dc0:	ec 01       	movw	r28, r24
     dc2:	00 97       	sbiw	r24, 0x00	; 0
     dc4:	39 f0       	breq	.+14     	; 0xdd4 <xEventGroupCreate+0x1e>
     dc6:	fc 01       	movw	r30, r24
     dc8:	11 92       	st	Z+, r1
     dca:	11 92       	st	Z+, r1
     dcc:	11 92       	st	Z+, r1
     dce:	11 92       	st	Z+, r1
     dd0:	cf 01       	movw	r24, r30
     dd2:	94 d2       	rcall	.+1320   	; 0x12fc <vListInitialise>
     dd4:	ce 01       	movw	r24, r28
     dd6:	df 91       	pop	r29
     dd8:	cf 91       	pop	r28
     dda:	08 95       	ret

00000ddc <xEventGroupWaitBits>:
     ddc:	2f 92       	push	r2
     dde:	3f 92       	push	r3
     de0:	4f 92       	push	r4
     de2:	5f 92       	push	r5
     de4:	6f 92       	push	r6
     de6:	7f 92       	push	r7
     de8:	8f 92       	push	r8
     dea:	9f 92       	push	r9
     dec:	af 92       	push	r10
     dee:	bf 92       	push	r11
     df0:	cf 92       	push	r12
     df2:	df 92       	push	r13
     df4:	ef 92       	push	r14
     df6:	ff 92       	push	r15
     df8:	0f 93       	push	r16
     dfa:	1f 93       	push	r17
     dfc:	cf 93       	push	r28
     dfe:	df 93       	push	r29
     e00:	ec 01       	movw	r28, r24
     e02:	4a 01       	movw	r8, r20
     e04:	5b 01       	movw	r10, r22
     e06:	62 2e       	mov	r6, r18
     e08:	70 2e       	mov	r7, r16
     e0a:	0e 94 52 13 	call	0x26a4	; 0x26a4 <vTaskSuspendAll>
     e0e:	28 80       	ld	r2, Y
     e10:	39 80       	ldd	r3, Y+1	; 0x01
     e12:	4a 80       	ldd	r4, Y+2	; 0x02
     e14:	5b 80       	ldd	r5, Y+3	; 0x03
     e16:	01 11       	cpse	r16, r1
     e18:	0d c0       	rjmp	.+26     	; 0xe34 <xEventGroupWaitBits+0x58>
     e1a:	81 e0       	ldi	r24, 0x01	; 1
     e1c:	b2 01       	movw	r22, r4
     e1e:	a1 01       	movw	r20, r2
     e20:	48 21       	and	r20, r8
     e22:	59 21       	and	r21, r9
     e24:	6a 21       	and	r22, r10
     e26:	7b 21       	and	r23, r11
     e28:	45 2b       	or	r20, r21
     e2a:	46 2b       	or	r20, r22
     e2c:	47 2b       	or	r20, r23
     e2e:	79 f4       	brne	.+30     	; 0xe4e <xEventGroupWaitBits+0x72>
     e30:	80 e0       	ldi	r24, 0x00	; 0
     e32:	0d c0       	rjmp	.+26     	; 0xe4e <xEventGroupWaitBits+0x72>
     e34:	81 e0       	ldi	r24, 0x01	; 1
     e36:	b2 01       	movw	r22, r4
     e38:	a1 01       	movw	r20, r2
     e3a:	48 21       	and	r20, r8
     e3c:	59 21       	and	r21, r9
     e3e:	6a 21       	and	r22, r10
     e40:	7b 21       	and	r23, r11
     e42:	48 15       	cp	r20, r8
     e44:	59 05       	cpc	r21, r9
     e46:	6a 05       	cpc	r22, r10
     e48:	7b 05       	cpc	r23, r11
     e4a:	09 f0       	breq	.+2      	; 0xe4e <xEventGroupWaitBits+0x72>
     e4c:	80 e0       	ldi	r24, 0x00	; 0
     e4e:	88 23       	and	r24, r24
     e50:	81 f0       	breq	.+32     	; 0xe72 <xEventGroupWaitBits+0x96>
     e52:	66 20       	and	r6, r6
     e54:	09 f4       	brne	.+2      	; 0xe58 <xEventGroupWaitBits+0x7c>
     e56:	6b c0       	rjmp	.+214    	; 0xf2e <xEventGroupWaitBits+0x152>
     e58:	80 94       	com	r8
     e5a:	90 94       	com	r9
     e5c:	a0 94       	com	r10
     e5e:	b0 94       	com	r11
     e60:	82 20       	and	r8, r2
     e62:	93 20       	and	r9, r3
     e64:	a4 20       	and	r10, r4
     e66:	b5 20       	and	r11, r5
     e68:	88 82       	st	Y, r8
     e6a:	99 82       	std	Y+1, r9	; 0x01
     e6c:	aa 82       	std	Y+2, r10	; 0x02
     e6e:	bb 82       	std	Y+3, r11	; 0x03
     e70:	5e c0       	rjmp	.+188    	; 0xf2e <xEventGroupWaitBits+0x152>
     e72:	c1 14       	cp	r12, r1
     e74:	d1 04       	cpc	r13, r1
     e76:	e1 04       	cpc	r14, r1
     e78:	f1 04       	cpc	r15, r1
     e7a:	09 f4       	brne	.+2      	; 0xe7e <xEventGroupWaitBits+0xa2>
     e7c:	58 c0       	rjmp	.+176    	; 0xf2e <xEventGroupWaitBits+0x152>
     e7e:	66 20       	and	r6, r6
     e80:	29 f0       	breq	.+10     	; 0xe8c <xEventGroupWaitBits+0xb0>
     e82:	40 e0       	ldi	r20, 0x00	; 0
     e84:	50 e0       	ldi	r21, 0x00	; 0
     e86:	60 e0       	ldi	r22, 0x00	; 0
     e88:	71 e0       	ldi	r23, 0x01	; 1
     e8a:	03 c0       	rjmp	.+6      	; 0xe92 <xEventGroupWaitBits+0xb6>
     e8c:	40 e0       	ldi	r20, 0x00	; 0
     e8e:	50 e0       	ldi	r21, 0x00	; 0
     e90:	ba 01       	movw	r22, r20
     e92:	71 10       	cpse	r7, r1
     e94:	74 60       	ori	r23, 0x04	; 4
     e96:	48 29       	or	r20, r8
     e98:	59 29       	or	r21, r9
     e9a:	6a 29       	or	r22, r10
     e9c:	7b 29       	or	r23, r11
     e9e:	97 01       	movw	r18, r14
     ea0:	86 01       	movw	r16, r12
     ea2:	ce 01       	movw	r24, r28
     ea4:	04 96       	adiw	r24, 0x04	; 4
     ea6:	0e 94 66 15 	call	0x2acc	; 0x2acc <vTaskPlaceOnUnorderedEventList>
     eaa:	0e 94 3b 14 	call	0x2876	; 0x2876 <xTaskResumeAll>
     eae:	81 11       	cpse	r24, r1
     eb0:	01 c0       	rjmp	.+2      	; 0xeb4 <xEventGroupWaitBits+0xd8>
     eb2:	6c d3       	rcall	.+1752   	; 0x158c <vPortYield>
     eb4:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <uxTaskResetEventItemValue>
     eb8:	91 fd       	sbrc	r25, 1
     eba:	35 c0       	rjmp	.+106    	; 0xf26 <xEventGroupWaitBits+0x14a>
     ebc:	0f b6       	in	r0, 0x3f	; 63
     ebe:	f8 94       	cli
     ec0:	0f 92       	push	r0
     ec2:	68 81       	ld	r22, Y
     ec4:	79 81       	ldd	r23, Y+1	; 0x01
     ec6:	8a 81       	ldd	r24, Y+2	; 0x02
     ec8:	9b 81       	ldd	r25, Y+3	; 0x03
     eca:	71 10       	cpse	r7, r1
     ecc:	0d c0       	rjmp	.+26     	; 0xee8 <xEventGroupWaitBits+0x10c>
     ece:	21 e0       	ldi	r18, 0x01	; 1
     ed0:	75 01       	movw	r14, r10
     ed2:	64 01       	movw	r12, r8
     ed4:	c6 22       	and	r12, r22
     ed6:	d7 22       	and	r13, r23
     ed8:	e8 22       	and	r14, r24
     eda:	f9 22       	and	r15, r25
     edc:	cd 28       	or	r12, r13
     ede:	ce 28       	or	r12, r14
     ee0:	cf 28       	or	r12, r15
     ee2:	79 f4       	brne	.+30     	; 0xf02 <xEventGroupWaitBits+0x126>
     ee4:	20 e0       	ldi	r18, 0x00	; 0
     ee6:	0d c0       	rjmp	.+26     	; 0xf02 <xEventGroupWaitBits+0x126>
     ee8:	21 e0       	ldi	r18, 0x01	; 1
     eea:	75 01       	movw	r14, r10
     eec:	64 01       	movw	r12, r8
     eee:	c6 22       	and	r12, r22
     ef0:	d7 22       	and	r13, r23
     ef2:	e8 22       	and	r14, r24
     ef4:	f9 22       	and	r15, r25
     ef6:	c8 14       	cp	r12, r8
     ef8:	d9 04       	cpc	r13, r9
     efa:	ea 04       	cpc	r14, r10
     efc:	fb 04       	cpc	r15, r11
     efe:	09 f0       	breq	.+2      	; 0xf02 <xEventGroupWaitBits+0x126>
     f00:	20 e0       	ldi	r18, 0x00	; 0
     f02:	22 23       	and	r18, r18
     f04:	71 f0       	breq	.+28     	; 0xf22 <xEventGroupWaitBits+0x146>
     f06:	66 20       	and	r6, r6
     f08:	61 f0       	breq	.+24     	; 0xf22 <xEventGroupWaitBits+0x146>
     f0a:	80 94       	com	r8
     f0c:	90 94       	com	r9
     f0e:	a0 94       	com	r10
     f10:	b0 94       	com	r11
     f12:	86 22       	and	r8, r22
     f14:	97 22       	and	r9, r23
     f16:	a8 22       	and	r10, r24
     f18:	b9 22       	and	r11, r25
     f1a:	88 82       	st	Y, r8
     f1c:	99 82       	std	Y+1, r9	; 0x01
     f1e:	aa 82       	std	Y+2, r10	; 0x02
     f20:	bb 82       	std	Y+3, r11	; 0x03
     f22:	0f 90       	pop	r0
     f24:	0f be       	out	0x3f, r0	; 63
     f26:	1b 01       	movw	r2, r22
     f28:	2c 01       	movw	r4, r24
     f2a:	55 24       	eor	r5, r5
     f2c:	02 c0       	rjmp	.+4      	; 0xf32 <xEventGroupWaitBits+0x156>
     f2e:	0e 94 3b 14 	call	0x2876	; 0x2876 <xTaskResumeAll>
     f32:	c2 01       	movw	r24, r4
     f34:	b1 01       	movw	r22, r2
     f36:	df 91       	pop	r29
     f38:	cf 91       	pop	r28
     f3a:	1f 91       	pop	r17
     f3c:	0f 91       	pop	r16
     f3e:	ff 90       	pop	r15
     f40:	ef 90       	pop	r14
     f42:	df 90       	pop	r13
     f44:	cf 90       	pop	r12
     f46:	bf 90       	pop	r11
     f48:	af 90       	pop	r10
     f4a:	9f 90       	pop	r9
     f4c:	8f 90       	pop	r8
     f4e:	7f 90       	pop	r7
     f50:	6f 90       	pop	r6
     f52:	5f 90       	pop	r5
     f54:	4f 90       	pop	r4
     f56:	3f 90       	pop	r3
     f58:	2f 90       	pop	r2
     f5a:	08 95       	ret

00000f5c <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
     f5c:	4f 92       	push	r4
     f5e:	5f 92       	push	r5
     f60:	6f 92       	push	r6
     f62:	7f 92       	push	r7
     f64:	8f 92       	push	r8
     f66:	9f 92       	push	r9
     f68:	af 92       	push	r10
     f6a:	bf 92       	push	r11
     f6c:	cf 92       	push	r12
     f6e:	df 92       	push	r13
     f70:	ef 92       	push	r14
     f72:	ff 92       	push	r15
     f74:	0f 93       	push	r16
     f76:	1f 93       	push	r17
     f78:	cf 93       	push	r28
     f7a:	df 93       	push	r29
     f7c:	ec 01       	movw	r28, r24
     f7e:	6a 01       	movw	r12, r20
     f80:	7b 01       	movw	r14, r22
    itself. */
    configASSERT( xEventGroup );
    configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

    pxList = &( pxEventBits->xTasksWaitingForBits );
    pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     f82:	8c 01       	movw	r16, r24
     f84:	09 5f       	subi	r16, 0xF9	; 249
     f86:	1f 4f       	sbci	r17, 0xFF	; 255
    vTaskSuspendAll();
     f88:	0e 94 52 13 	call	0x26a4	; 0x26a4 <vTaskSuspendAll>
    {
        traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

        pxListItem = listGET_HEAD_ENTRY( pxList );
     f8c:	eb 85       	ldd	r30, Y+11	; 0x0b
     f8e:	fc 85       	ldd	r31, Y+12	; 0x0c

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;
     f90:	88 81       	ld	r24, Y
     f92:	99 81       	ldd	r25, Y+1	; 0x01
     f94:	aa 81       	ldd	r26, Y+2	; 0x02
     f96:	bb 81       	ldd	r27, Y+3	; 0x03
     f98:	c8 2a       	or	r12, r24
     f9a:	d9 2a       	or	r13, r25
     f9c:	ea 2a       	or	r14, r26
     f9e:	fb 2a       	or	r15, r27
     fa0:	c8 82       	st	Y, r12
     fa2:	d9 82       	std	Y+1, r13	; 0x01
     fa4:	ea 82       	std	Y+2, r14	; 0x02
     fa6:	fb 82       	std	Y+3, r15	; 0x03

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     fa8:	0e 17       	cp	r16, r30
     faa:	1f 07       	cpc	r17, r31
     fac:	09 f4       	brne	.+2      	; 0xfb0 <xEventGroupSetBits+0x54>
     fae:	45 c0       	rjmp	.+138    	; 0x103a <xEventGroupSetBits+0xde>
     fb0:	c1 2c       	mov	r12, r1
     fb2:	d1 2c       	mov	r13, r1
     fb4:	76 01       	movw	r14, r12
            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
                {
                    xMatchFound = pdTRUE;
     fb6:	99 24       	eor	r9, r9
     fb8:	93 94       	inc	r9
     fba:	81 2c       	mov	r8, r1
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
     fbc:	a4 80       	ldd	r10, Z+4	; 0x04
     fbe:	b5 80       	ldd	r11, Z+5	; 0x05
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
     fc0:	80 81       	ld	r24, Z
     fc2:	91 81       	ldd	r25, Z+1	; 0x01
     fc4:	a2 81       	ldd	r26, Z+2	; 0x02
     fc6:	b3 81       	ldd	r27, Z+3	; 0x03
            xMatchFound = pdFALSE;

            /* Split the bits waited for from the control bits. */
            uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
            uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
     fc8:	ac 01       	movw	r20, r24
     fca:	bd 01       	movw	r22, r26
     fcc:	77 27       	eor	r23, r23

            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
     fce:	b2 fd       	sbrc	r27, 2
     fd0:	0f c0       	rjmp	.+30     	; 0xff0 <xEventGroupSetBits+0x94>
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
                {
                    xMatchFound = pdTRUE;
     fd2:	48 80       	ld	r4, Y
     fd4:	59 80       	ldd	r5, Y+1	; 0x01
     fd6:	6a 80       	ldd	r6, Y+2	; 0x02
     fd8:	7b 80       	ldd	r7, Y+3	; 0x03
     fda:	44 22       	and	r4, r20
     fdc:	55 22       	and	r5, r21
     fde:	66 22       	and	r6, r22
     fe0:	77 22       	and	r7, r23
     fe2:	29 2d       	mov	r18, r9
     fe4:	45 28       	or	r4, r5
     fe6:	46 28       	or	r4, r6
     fe8:	47 28       	or	r4, r7
     fea:	89 f4       	brne	.+34     	; 0x100e <xEventGroupSetBits+0xb2>
     fec:	28 2d       	mov	r18, r8
     fee:	0f c0       	rjmp	.+30     	; 0x100e <xEventGroupSetBits+0xb2>
     ff0:	48 80       	ld	r4, Y
     ff2:	59 80       	ldd	r5, Y+1	; 0x01
     ff4:	6a 80       	ldd	r6, Y+2	; 0x02
     ff6:	7b 80       	ldd	r7, Y+3	; 0x03
     ff8:	44 22       	and	r4, r20
     ffa:	55 22       	and	r5, r21
     ffc:	66 22       	and	r6, r22
     ffe:	77 22       	and	r7, r23
    1000:	29 2d       	mov	r18, r9
    1002:	44 16       	cp	r4, r20
    1004:	55 06       	cpc	r5, r21
    1006:	66 06       	cpc	r6, r22
    1008:	77 06       	cpc	r7, r23
    100a:	09 f0       	breq	.+2      	; 0x100e <xEventGroupSetBits+0xb2>
    100c:	28 2d       	mov	r18, r8
            else
            {
                /* Need all bits to be set, but not all the bits were set. */
            }

            if( xMatchFound != pdFALSE )
    100e:	22 23       	and	r18, r18
    1010:	71 f0       	breq	.+28     	; 0x102e <xEventGroupSetBits+0xd2>
            {
                /* The bits match.  Should the bits be cleared on exit? */
                if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
    1012:	b0 ff       	sbrs	r27, 0
    1014:	04 c0       	rjmp	.+8      	; 0x101e <xEventGroupSetBits+0xc2>
                {
                    uxBitsToClear |= uxBitsWaitedFor;
    1016:	c4 2a       	or	r12, r20
    1018:	d5 2a       	or	r13, r21
    101a:	e6 2a       	or	r14, r22
    101c:	f7 2a       	or	r15, r23
                /* Store the actual event flag value in the task's event list
                item before removing the task from the event list.  The
                eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                that is was unblocked due to its required bits matching, rather
                than because it timed out. */
                vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
    101e:	48 81       	ld	r20, Y
    1020:	59 81       	ldd	r21, Y+1	; 0x01
    1022:	6a 81       	ldd	r22, Y+2	; 0x02
    1024:	7b 81       	ldd	r23, Y+3	; 0x03
    1026:	72 60       	ori	r23, 0x02	; 2
    1028:	cf 01       	movw	r24, r30
    102a:	0e 94 ec 15 	call	0x2bd8	; 0x2bd8 <vTaskRemoveFromUnorderedEventList>
    102e:	ea 2d       	mov	r30, r10
    1030:	fb 2d       	mov	r31, r11

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
    1032:	0e 17       	cp	r16, r30
    1034:	1f 07       	cpc	r17, r31
    1036:	11 f6       	brne	.-124    	; 0xfbc <xEventGroupSetBits+0x60>
    1038:	03 c0       	rjmp	.+6      	; 0x1040 <xEventGroupSetBits+0xe4>
EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
    103a:	c1 2c       	mov	r12, r1
    103c:	d1 2c       	mov	r13, r1
    103e:	76 01       	movw	r14, r12
            pxListItem = pxNext;
        }

        /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
        bit was set in the control word. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
    1040:	c0 94       	com	r12
    1042:	d0 94       	com	r13
    1044:	e0 94       	com	r14
    1046:	f0 94       	com	r15
    1048:	88 81       	ld	r24, Y
    104a:	99 81       	ldd	r25, Y+1	; 0x01
    104c:	aa 81       	ldd	r26, Y+2	; 0x02
    104e:	bb 81       	ldd	r27, Y+3	; 0x03
    1050:	c8 22       	and	r12, r24
    1052:	d9 22       	and	r13, r25
    1054:	ea 22       	and	r14, r26
    1056:	fb 22       	and	r15, r27
    1058:	c8 82       	st	Y, r12
    105a:	d9 82       	std	Y+1, r13	; 0x01
    105c:	ea 82       	std	Y+2, r14	; 0x02
    105e:	fb 82       	std	Y+3, r15	; 0x03
    }
    ( void ) xTaskResumeAll();
    1060:	0e 94 3b 14 	call	0x2876	; 0x2876 <xTaskResumeAll>

    return pxEventBits->uxEventBits;
    1064:	68 81       	ld	r22, Y
    1066:	79 81       	ldd	r23, Y+1	; 0x01
    1068:	8a 81       	ldd	r24, Y+2	; 0x02
    106a:	9b 81       	ldd	r25, Y+3	; 0x03
}
    106c:	df 91       	pop	r29
    106e:	cf 91       	pop	r28
    1070:	1f 91       	pop	r17
    1072:	0f 91       	pop	r16
    1074:	ff 90       	pop	r15
    1076:	ef 90       	pop	r14
    1078:	df 90       	pop	r13
    107a:	cf 90       	pop	r12
    107c:	bf 90       	pop	r11
    107e:	af 90       	pop	r10
    1080:	9f 90       	pop	r9
    1082:	8f 90       	pop	r8
    1084:	7f 90       	pop	r7
    1086:	6f 90       	pop	r6
    1088:	5f 90       	pop	r5
    108a:	4f 90       	pop	r4
    108c:	08 95       	ret

0000108e <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
    108e:	cf 93       	push	r28
    1090:	df 93       	push	r29
    1092:	dc 01       	movw	r26, r24
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
    1094:	e8 e1       	ldi	r30, 0x18	; 24
    1096:	f8 e0       	ldi	r31, 0x08	; 8
    1098:	01 c0       	rjmp	.+2      	; 0x109c <prvInsertBlockIntoFreeList+0xe>
    109a:	f9 01       	movw	r30, r18
    109c:	20 81       	ld	r18, Z
    109e:	31 81       	ldd	r19, Z+1	; 0x01
    10a0:	2a 17       	cp	r18, r26
    10a2:	3b 07       	cpc	r19, r27
    10a4:	d0 f3       	brcs	.-12     	; 0x109a <prvInsertBlockIntoFreeList+0xc>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
    10a6:	82 81       	ldd	r24, Z+2	; 0x02
    10a8:	93 81       	ldd	r25, Z+3	; 0x03
    10aa:	af 01       	movw	r20, r30
    10ac:	48 0f       	add	r20, r24
    10ae:	59 1f       	adc	r21, r25
    10b0:	a4 17       	cp	r26, r20
    10b2:	b5 07       	cpc	r27, r21
    10b4:	49 f4       	brne	.+18     	; 0x10c8 <prvInsertBlockIntoFreeList+0x3a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
    10b6:	12 96       	adiw	r26, 0x02	; 2
    10b8:	4d 91       	ld	r20, X+
    10ba:	5c 91       	ld	r21, X
    10bc:	13 97       	sbiw	r26, 0x03	; 3
    10be:	84 0f       	add	r24, r20
    10c0:	95 1f       	adc	r25, r21
    10c2:	93 83       	std	Z+3, r25	; 0x03
    10c4:	82 83       	std	Z+2, r24	; 0x02
    10c6:	df 01       	movw	r26, r30
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
    10c8:	12 96       	adiw	r26, 0x02	; 2
    10ca:	8d 91       	ld	r24, X+
    10cc:	9c 91       	ld	r25, X
    10ce:	13 97       	sbiw	r26, 0x03	; 3
    10d0:	ed 01       	movw	r28, r26
    10d2:	c8 0f       	add	r28, r24
    10d4:	d9 1f       	adc	r29, r25
    10d6:	2c 17       	cp	r18, r28
    10d8:	3d 07       	cpc	r19, r29
    10da:	d9 f4       	brne	.+54     	; 0x1112 <prvInsertBlockIntoFreeList+0x84>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
    10dc:	20 91 16 08 	lds	r18, 0x0816	; 0x800816 <pxEnd>
    10e0:	30 91 17 08 	lds	r19, 0x0817	; 0x800817 <pxEnd+0x1>
    10e4:	c2 17       	cp	r28, r18
    10e6:	d3 07       	cpc	r29, r19
    10e8:	81 f0       	breq	.+32     	; 0x110a <prvInsertBlockIntoFreeList+0x7c>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
    10ea:	2a 81       	ldd	r18, Y+2	; 0x02
    10ec:	3b 81       	ldd	r19, Y+3	; 0x03
    10ee:	82 0f       	add	r24, r18
    10f0:	93 1f       	adc	r25, r19
    10f2:	13 96       	adiw	r26, 0x03	; 3
    10f4:	9c 93       	st	X, r25
    10f6:	8e 93       	st	-X, r24
    10f8:	12 97       	sbiw	r26, 0x02	; 2
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
    10fa:	c0 81       	ld	r28, Z
    10fc:	d1 81       	ldd	r29, Z+1	; 0x01
    10fe:	88 81       	ld	r24, Y
    1100:	99 81       	ldd	r25, Y+1	; 0x01
    1102:	11 96       	adiw	r26, 0x01	; 1
    1104:	9c 93       	st	X, r25
    1106:	8e 93       	st	-X, r24
    1108:	07 c0       	rjmp	.+14     	; 0x1118 <prvInsertBlockIntoFreeList+0x8a>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
    110a:	11 96       	adiw	r26, 0x01	; 1
    110c:	dc 93       	st	X, r29
    110e:	ce 93       	st	-X, r28
    1110:	03 c0       	rjmp	.+6      	; 0x1118 <prvInsertBlockIntoFreeList+0x8a>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
    1112:	11 96       	adiw	r26, 0x01	; 1
    1114:	3c 93       	st	X, r19
    1116:	2e 93       	st	-X, r18

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
    1118:	ae 17       	cp	r26, r30
    111a:	bf 07       	cpc	r27, r31
    111c:	11 f0       	breq	.+4      	; 0x1122 <prvInsertBlockIntoFreeList+0x94>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
    111e:	b1 83       	std	Z+1, r27	; 0x01
    1120:	a0 83       	st	Z, r26
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    1122:	df 91       	pop	r29
    1124:	cf 91       	pop	r28
    1126:	08 95       	ret

00001128 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    1128:	cf 92       	push	r12
    112a:	df 92       	push	r13
    112c:	ef 92       	push	r14
    112e:	ff 92       	push	r15
    1130:	0f 93       	push	r16
    1132:	1f 93       	push	r17
    1134:	cf 93       	push	r28
    1136:	df 93       	push	r29
    1138:	ec 01       	movw	r28, r24
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
    113a:	0e 94 52 13 	call	0x26a4	; 0x26a4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
    113e:	80 91 16 08 	lds	r24, 0x0816	; 0x800816 <pxEnd>
    1142:	90 91 17 08 	lds	r25, 0x0817	; 0x800817 <pxEnd+0x1>
    1146:	89 2b       	or	r24, r25
    1148:	41 f5       	brne	.+80     	; 0x119a <pvPortMalloc+0x72>

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
    114a:	e8 e1       	ldi	r30, 0x18	; 24
    114c:	f8 e0       	ldi	r31, 0x08	; 8
    114e:	ac e1       	ldi	r26, 0x1C	; 28
    1150:	b8 e0       	ldi	r27, 0x08	; 8
    1152:	b1 83       	std	Z+1, r27	; 0x01
    1154:	a0 83       	st	Z, r26
	xStart.xBlockSize = ( size_t ) 0;
    1156:	13 82       	std	Z+3, r1	; 0x03
    1158:	12 82       	std	Z+2, r1	; 0x02
	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
	uxAddress -= xHeapStructSize;
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
	pxEnd = ( void * ) uxAddress;
    115a:	e8 eb       	ldi	r30, 0xB8	; 184
    115c:	f7 e1       	ldi	r31, 0x17	; 23
    115e:	f0 93 17 08 	sts	0x0817, r31	; 0x800817 <pxEnd+0x1>
    1162:	e0 93 16 08 	sts	0x0816, r30	; 0x800816 <pxEnd>
	pxEnd->xBlockSize = 0;
    1166:	13 82       	std	Z+3, r1	; 0x03
    1168:	12 82       	std	Z+2, r1	; 0x02
	pxEnd->pxNextFreeBlock = NULL;
    116a:	11 82       	std	Z+1, r1	; 0x01
    116c:	10 82       	st	Z, r1

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
    116e:	8c e9       	ldi	r24, 0x9C	; 156
    1170:	9f e0       	ldi	r25, 0x0F	; 15
    1172:	13 96       	adiw	r26, 0x03	; 3
    1174:	9c 93       	st	X, r25
    1176:	8e 93       	st	-X, r24
    1178:	12 97       	sbiw	r26, 0x02	; 2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
    117a:	ed 93       	st	X+, r30
    117c:	fc 93       	st	X, r31

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
    117e:	90 93 13 08 	sts	0x0813, r25	; 0x800813 <xMinimumEverFreeBytesRemaining+0x1>
    1182:	80 93 12 08 	sts	0x0812, r24	; 0x800812 <xMinimumEverFreeBytesRemaining>
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
    1186:	90 93 15 08 	sts	0x0815, r25	; 0x800815 <xFreeBytesRemaining+0x1>
    118a:	80 93 14 08 	sts	0x0814, r24	; 0x800814 <xFreeBytesRemaining>

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
    118e:	80 e0       	ldi	r24, 0x00	; 0
    1190:	90 e8       	ldi	r25, 0x80	; 128
    1192:	90 93 11 08 	sts	0x0811, r25	; 0x800811 <xBlockAllocatedBit+0x1>
    1196:	80 93 10 08 	sts	0x0810, r24	; 0x800810 <xBlockAllocatedBit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
    119a:	e0 90 10 08 	lds	r14, 0x0810	; 0x800810 <xBlockAllocatedBit>
    119e:	f0 90 11 08 	lds	r15, 0x0811	; 0x800811 <xBlockAllocatedBit+0x1>
    11a2:	c7 01       	movw	r24, r14
    11a4:	8c 23       	and	r24, r28
    11a6:	9d 23       	and	r25, r29
    11a8:	89 2b       	or	r24, r25
    11aa:	09 f0       	breq	.+2      	; 0x11ae <pvPortMalloc+0x86>
    11ac:	66 c0       	rjmp	.+204    	; 0x127a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
    11ae:	20 97       	sbiw	r28, 0x00	; 0
    11b0:	09 f4       	brne	.+2      	; 0x11b4 <pvPortMalloc+0x8c>
    11b2:	66 c0       	rjmp	.+204    	; 0x1280 <pvPortMalloc+0x158>
			{
				xWantedSize += xHeapStructSize;
    11b4:	ae 01       	movw	r20, r28
    11b6:	4c 5f       	subi	r20, 0xFC	; 252
    11b8:	5f 4f       	sbci	r21, 0xFF	; 255
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
    11ba:	09 f4       	brne	.+2      	; 0x11be <pvPortMalloc+0x96>
    11bc:	5e c0       	rjmp	.+188    	; 0x127a <pvPortMalloc+0x152>
    11be:	00 91 14 08 	lds	r16, 0x0814	; 0x800814 <xFreeBytesRemaining>
    11c2:	10 91 15 08 	lds	r17, 0x0815	; 0x800815 <xFreeBytesRemaining+0x1>
    11c6:	04 17       	cp	r16, r20
    11c8:	15 07       	cpc	r17, r21
    11ca:	08 f4       	brcc	.+2      	; 0x11ce <pvPortMalloc+0xa6>
    11cc:	56 c0       	rjmp	.+172    	; 0x127a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
    11ce:	c0 91 18 08 	lds	r28, 0x0818	; 0x800818 <xStart>
    11d2:	d0 91 19 08 	lds	r29, 0x0819	; 0x800819 <xStart+0x1>

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
    11d6:	e8 e1       	ldi	r30, 0x18	; 24
    11d8:	f8 e0       	ldi	r31, 0x08	; 8
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    11da:	02 c0       	rjmp	.+4      	; 0x11e0 <pvPortMalloc+0xb8>
    11dc:	fe 01       	movw	r30, r28
				{
					pxPreviousBlock = pxBlock;
					pxBlock = pxBlock->pxNextFreeBlock;
    11de:	e9 01       	movw	r28, r18
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    11e0:	2a 81       	ldd	r18, Y+2	; 0x02
    11e2:	3b 81       	ldd	r19, Y+3	; 0x03
    11e4:	24 17       	cp	r18, r20
    11e6:	35 07       	cpc	r19, r21
    11e8:	28 f4       	brcc	.+10     	; 0x11f4 <pvPortMalloc+0xcc>
    11ea:	28 81       	ld	r18, Y
    11ec:	39 81       	ldd	r19, Y+1	; 0x01
    11ee:	21 15       	cp	r18, r1
    11f0:	31 05       	cpc	r19, r1
    11f2:	a1 f7       	brne	.-24     	; 0x11dc <pvPortMalloc+0xb4>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
    11f4:	80 91 16 08 	lds	r24, 0x0816	; 0x800816 <pxEnd>
    11f8:	90 91 17 08 	lds	r25, 0x0817	; 0x800817 <pxEnd+0x1>
    11fc:	c8 17       	cp	r28, r24
    11fe:	d9 07       	cpc	r29, r25
    1200:	e1 f1       	breq	.+120    	; 0x127a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
    1202:	c0 80       	ld	r12, Z
    1204:	d1 80       	ldd	r13, Z+1	; 0x01
    1206:	84 e0       	ldi	r24, 0x04	; 4
    1208:	c8 0e       	add	r12, r24
    120a:	d1 1c       	adc	r13, r1

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    120c:	88 81       	ld	r24, Y
    120e:	99 81       	ldd	r25, Y+1	; 0x01
    1210:	91 83       	std	Z+1, r25	; 0x01
    1212:	80 83       	st	Z, r24

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    1214:	2a 81       	ldd	r18, Y+2	; 0x02
    1216:	3b 81       	ldd	r19, Y+3	; 0x03
    1218:	24 1b       	sub	r18, r20
    121a:	35 0b       	sbc	r19, r21
    121c:	29 30       	cpi	r18, 0x09	; 9
    121e:	31 05       	cpc	r19, r1
    1220:	48 f0       	brcs	.+18     	; 0x1234 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
    1222:	ce 01       	movw	r24, r28
    1224:	84 0f       	add	r24, r20
    1226:	95 1f       	adc	r25, r21
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    1228:	fc 01       	movw	r30, r24
    122a:	33 83       	std	Z+3, r19	; 0x03
    122c:	22 83       	std	Z+2, r18	; 0x02
						pxBlock->xBlockSize = xWantedSize;
    122e:	5b 83       	std	Y+3, r21	; 0x03
    1230:	4a 83       	std	Y+2, r20	; 0x02

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
    1232:	2d df       	rcall	.-422    	; 0x108e <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
    1234:	8a 81       	ldd	r24, Y+2	; 0x02
    1236:	9b 81       	ldd	r25, Y+3	; 0x03
    1238:	08 1b       	sub	r16, r24
    123a:	19 0b       	sbc	r17, r25
    123c:	10 93 15 08 	sts	0x0815, r17	; 0x800815 <xFreeBytesRemaining+0x1>
    1240:	00 93 14 08 	sts	0x0814, r16	; 0x800814 <xFreeBytesRemaining>

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
    1244:	20 91 12 08 	lds	r18, 0x0812	; 0x800812 <xMinimumEverFreeBytesRemaining>
    1248:	30 91 13 08 	lds	r19, 0x0813	; 0x800813 <xMinimumEverFreeBytesRemaining+0x1>
    124c:	02 17       	cp	r16, r18
    124e:	13 07       	cpc	r17, r19
    1250:	20 f4       	brcc	.+8      	; 0x125a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
    1252:	10 93 13 08 	sts	0x0813, r17	; 0x800813 <xMinimumEverFreeBytesRemaining+0x1>
    1256:	00 93 12 08 	sts	0x0812, r16	; 0x800812 <xMinimumEverFreeBytesRemaining>
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
    125a:	e8 2a       	or	r14, r24
    125c:	f9 2a       	or	r15, r25
    125e:	fb 82       	std	Y+3, r15	; 0x03
    1260:	ea 82       	std	Y+2, r14	; 0x02
					pxBlock->pxNextFreeBlock = NULL;
    1262:	19 82       	std	Y+1, r1	; 0x01
    1264:	18 82       	st	Y, r1
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    1266:	0e 94 3b 14 	call	0x2876	; 0x2876 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
    126a:	c1 14       	cp	r12, r1
    126c:	d1 04       	cpc	r13, r1
    126e:	59 f4       	brne	.+22     	; 0x1286 <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
    1270:	0e 94 41 1a 	call	0x3482	; 0x3482 <vApplicationMallocFailedHook>
    1274:	c1 2c       	mov	r12, r1
    1276:	d1 2c       	mov	r13, r1
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
    1278:	06 c0       	rjmp	.+12     	; 0x1286 <pvPortMalloc+0x15e>
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    127a:	0e 94 3b 14 	call	0x2876	; 0x2876 <xTaskResumeAll>
    127e:	f8 cf       	rjmp	.-16     	; 0x1270 <pvPortMalloc+0x148>
    1280:	0e 94 3b 14 	call	0x2876	; 0x2876 <xTaskResumeAll>
    1284:	f5 cf       	rjmp	.-22     	; 0x1270 <pvPortMalloc+0x148>
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
}
    1286:	c6 01       	movw	r24, r12
    1288:	df 91       	pop	r29
    128a:	cf 91       	pop	r28
    128c:	1f 91       	pop	r17
    128e:	0f 91       	pop	r16
    1290:	ff 90       	pop	r15
    1292:	ef 90       	pop	r14
    1294:	df 90       	pop	r13
    1296:	cf 90       	pop	r12
    1298:	08 95       	ret

0000129a <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    129a:	cf 93       	push	r28
    129c:	df 93       	push	r29
uint8_t *puc = ( uint8_t * ) pv;
BlockLink_t *pxLink;

	if( pv != NULL )
    129e:	00 97       	sbiw	r24, 0x00	; 0
    12a0:	51 f1       	breq	.+84     	; 0x12f6 <vPortFree+0x5c>

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
		configASSERT( pxLink->pxNextFreeBlock == NULL );

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
    12a2:	fc 01       	movw	r30, r24
    12a4:	34 97       	sbiw	r30, 0x04	; 4
    12a6:	22 81       	ldd	r18, Z+2	; 0x02
    12a8:	33 81       	ldd	r19, Z+3	; 0x03
    12aa:	40 91 10 08 	lds	r20, 0x0810	; 0x800810 <xBlockAllocatedBit>
    12ae:	50 91 11 08 	lds	r21, 0x0811	; 0x800811 <xBlockAllocatedBit+0x1>
    12b2:	b9 01       	movw	r22, r18
    12b4:	64 23       	and	r22, r20
    12b6:	75 23       	and	r23, r21
    12b8:	67 2b       	or	r22, r23
    12ba:	e9 f0       	breq	.+58     	; 0x12f6 <vPortFree+0x5c>
		{
			if( pxLink->pxNextFreeBlock == NULL )
    12bc:	60 81       	ld	r22, Z
    12be:	71 81       	ldd	r23, Z+1	; 0x01
    12c0:	67 2b       	or	r22, r23
    12c2:	c9 f4       	brne	.+50     	; 0x12f6 <vPortFree+0x5c>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
    12c4:	ef 01       	movw	r28, r30
    12c6:	40 95       	com	r20
    12c8:	50 95       	com	r21
    12ca:	24 23       	and	r18, r20
    12cc:	35 23       	and	r19, r21
    12ce:	33 83       	std	Z+3, r19	; 0x03
    12d0:	22 83       	std	Z+2, r18	; 0x02

				vTaskSuspendAll();
    12d2:	0e 94 52 13 	call	0x26a4	; 0x26a4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
    12d6:	20 91 14 08 	lds	r18, 0x0814	; 0x800814 <xFreeBytesRemaining>
    12da:	30 91 15 08 	lds	r19, 0x0815	; 0x800815 <xFreeBytesRemaining+0x1>
    12de:	8a 81       	ldd	r24, Y+2	; 0x02
    12e0:	9b 81       	ldd	r25, Y+3	; 0x03
    12e2:	82 0f       	add	r24, r18
    12e4:	93 1f       	adc	r25, r19
    12e6:	90 93 15 08 	sts	0x0815, r25	; 0x800815 <xFreeBytesRemaining+0x1>
    12ea:	80 93 14 08 	sts	0x0814, r24	; 0x800814 <xFreeBytesRemaining>
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
    12ee:	ce 01       	movw	r24, r28
    12f0:	ce de       	rcall	.-612    	; 0x108e <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
    12f2:	0e 94 3b 14 	call	0x2876	; 0x2876 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
    12f6:	df 91       	pop	r29
    12f8:	cf 91       	pop	r28
    12fa:	08 95       	ret

000012fc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    12fc:	fc 01       	movw	r30, r24
    /* The list structure contains a list item which is used to mark the
    end of the list.  To initialise the list the list end is inserted
    as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );            /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    12fe:	03 96       	adiw	r24, 0x03	; 3
    1300:	92 83       	std	Z+2, r25	; 0x02
    1302:	81 83       	std	Z+1, r24	; 0x01

    /* The list end value is the highest possible value in the list to
    ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
    1304:	4f ef       	ldi	r20, 0xFF	; 255
    1306:	5f ef       	ldi	r21, 0xFF	; 255
    1308:	ba 01       	movw	r22, r20
    130a:	43 83       	std	Z+3, r20	; 0x03
    130c:	54 83       	std	Z+4, r21	; 0x04
    130e:	65 83       	std	Z+5, r22	; 0x05
    1310:	76 83       	std	Z+6, r23	; 0x06

    /* The list end next and previous pointers point to itself so we know
    when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );    /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1312:	90 87       	std	Z+8, r25	; 0x08
    1314:	87 83       	std	Z+7, r24	; 0x07
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1316:	92 87       	std	Z+10, r25	; 0x0a
    1318:	81 87       	std	Z+9, r24	; 0x09

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    131a:	10 82       	st	Z, r1
    131c:	08 95       	ret

0000131e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
    131e:	fc 01       	movw	r30, r24
    1320:	13 86       	std	Z+11, r1	; 0x0b
    1322:	12 86       	std	Z+10, r1	; 0x0a
    1324:	08 95       	ret

00001326 <vListInsertEnd>:
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    1326:	cf 93       	push	r28
    1328:	df 93       	push	r29
    132a:	9c 01       	movw	r18, r24
    132c:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
    132e:	dc 01       	movw	r26, r24
    1330:	11 96       	adiw	r26, 0x01	; 1
    1332:	cd 91       	ld	r28, X+
    1334:	dc 91       	ld	r29, X
    1336:	12 97       	sbiw	r26, 0x02	; 2
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
    makes the new list item the last item to be removed by a call to
    listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
    1338:	d5 83       	std	Z+5, r29	; 0x05
    133a:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    133c:	8e 81       	ldd	r24, Y+6	; 0x06
    133e:	9f 81       	ldd	r25, Y+7	; 0x07
    1340:	97 83       	std	Z+7, r25	; 0x07
    1342:	86 83       	std	Z+6, r24	; 0x06

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
    1344:	8e 81       	ldd	r24, Y+6	; 0x06
    1346:	9f 81       	ldd	r25, Y+7	; 0x07
    1348:	dc 01       	movw	r26, r24
    134a:	15 96       	adiw	r26, 0x05	; 5
    134c:	7c 93       	st	X, r23
    134e:	6e 93       	st	-X, r22
    1350:	14 97       	sbiw	r26, 0x04	; 4
    pxIndex->pxPrevious = pxNewListItem;
    1352:	7f 83       	std	Y+7, r23	; 0x07
    1354:	6e 83       	std	Y+6, r22	; 0x06

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
    1356:	33 87       	std	Z+11, r19	; 0x0b
    1358:	22 87       	std	Z+10, r18	; 0x0a

    ( pxList->uxNumberOfItems )++;
    135a:	f9 01       	movw	r30, r18
    135c:	80 81       	ld	r24, Z
    135e:	8f 5f       	subi	r24, 0xFF	; 255
    1360:	80 83       	st	Z, r24
}
    1362:	df 91       	pop	r29
    1364:	cf 91       	pop	r28
    1366:	08 95       	ret

00001368 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    1368:	0f 93       	push	r16
    136a:	1f 93       	push	r17
    136c:	cf 93       	push	r28
    136e:	df 93       	push	r29
    1370:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    1372:	08 81       	ld	r16, Y
    1374:	19 81       	ldd	r17, Y+1	; 0x01
    1376:	2a 81       	ldd	r18, Y+2	; 0x02
    1378:	3b 81       	ldd	r19, Y+3	; 0x03
    new list item should be placed after it.  This ensures that TCBs which are
    stored in ready lists (all of which have the same xItemValue value) get a
    share of the CPU.  However, if the xItemValue is the same as the back marker
    the iteration loop below will not end.  Therefore the value is checked
    first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
    137a:	0f 3f       	cpi	r16, 0xFF	; 255
    137c:	4f ef       	ldi	r20, 0xFF	; 255
    137e:	14 07       	cpc	r17, r20
    1380:	24 07       	cpc	r18, r20
    1382:	34 07       	cpc	r19, r20
    1384:	21 f4       	brne	.+8      	; 0x138e <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
    1386:	fc 01       	movw	r30, r24
    1388:	a1 85       	ldd	r26, Z+9	; 0x09
    138a:	b2 85       	ldd	r27, Z+10	; 0x0a
    138c:	11 c0       	rjmp	.+34     	; 0x13b0 <vListInsert+0x48>
            4) Using a queue or semaphore before it has been initialised or
               before the scheduler has been started (are interrupts firing
               before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
    138e:	dc 01       	movw	r26, r24
    1390:	13 96       	adiw	r26, 0x03	; 3
    1392:	01 c0       	rjmp	.+2      	; 0x1396 <vListInsert+0x2e>
    1394:	df 01       	movw	r26, r30
    1396:	14 96       	adiw	r26, 0x04	; 4
    1398:	ed 91       	ld	r30, X+
    139a:	fc 91       	ld	r31, X
    139c:	15 97       	sbiw	r26, 0x05	; 5
    139e:	40 81       	ld	r20, Z
    13a0:	51 81       	ldd	r21, Z+1	; 0x01
    13a2:	62 81       	ldd	r22, Z+2	; 0x02
    13a4:	73 81       	ldd	r23, Z+3	; 0x03
    13a6:	04 17       	cp	r16, r20
    13a8:	15 07       	cpc	r17, r21
    13aa:	26 07       	cpc	r18, r22
    13ac:	37 07       	cpc	r19, r23
    13ae:	90 f7       	brcc	.-28     	; 0x1394 <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
            insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
    13b0:	14 96       	adiw	r26, 0x04	; 4
    13b2:	ed 91       	ld	r30, X+
    13b4:	fc 91       	ld	r31, X
    13b6:	15 97       	sbiw	r26, 0x05	; 5
    13b8:	fd 83       	std	Y+5, r31	; 0x05
    13ba:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    13bc:	d7 83       	std	Z+7, r29	; 0x07
    13be:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
    13c0:	bf 83       	std	Y+7, r27	; 0x07
    13c2:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
    13c4:	15 96       	adiw	r26, 0x05	; 5
    13c6:	dc 93       	st	X, r29
    13c8:	ce 93       	st	-X, r28
    13ca:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
    item later. */
    pxNewListItem->pxContainer = pxList;
    13cc:	9b 87       	std	Y+11, r25	; 0x0b
    13ce:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
    13d0:	fc 01       	movw	r30, r24
    13d2:	20 81       	ld	r18, Z
    13d4:	2f 5f       	subi	r18, 0xFF	; 255
    13d6:	20 83       	st	Z, r18
}
    13d8:	df 91       	pop	r29
    13da:	cf 91       	pop	r28
    13dc:	1f 91       	pop	r17
    13de:	0f 91       	pop	r16
    13e0:	08 95       	ret

000013e2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    13e2:	cf 93       	push	r28
    13e4:	df 93       	push	r29
    13e6:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
    13e8:	a2 85       	ldd	r26, Z+10	; 0x0a
    13ea:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    13ec:	c4 81       	ldd	r28, Z+4	; 0x04
    13ee:	d5 81       	ldd	r29, Z+5	; 0x05
    13f0:	86 81       	ldd	r24, Z+6	; 0x06
    13f2:	97 81       	ldd	r25, Z+7	; 0x07
    13f4:	9f 83       	std	Y+7, r25	; 0x07
    13f6:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    13f8:	c6 81       	ldd	r28, Z+6	; 0x06
    13fa:	d7 81       	ldd	r29, Z+7	; 0x07
    13fc:	84 81       	ldd	r24, Z+4	; 0x04
    13fe:	95 81       	ldd	r25, Z+5	; 0x05
    1400:	9d 83       	std	Y+5, r25	; 0x05
    1402:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
    1404:	11 96       	adiw	r26, 0x01	; 1
    1406:	8d 91       	ld	r24, X+
    1408:	9c 91       	ld	r25, X
    140a:	12 97       	sbiw	r26, 0x02	; 2
    140c:	e8 17       	cp	r30, r24
    140e:	f9 07       	cpc	r31, r25
    1410:	31 f4       	brne	.+12     	; 0x141e <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
    1412:	86 81       	ldd	r24, Z+6	; 0x06
    1414:	97 81       	ldd	r25, Z+7	; 0x07
    1416:	12 96       	adiw	r26, 0x02	; 2
    1418:	9c 93       	st	X, r25
    141a:	8e 93       	st	-X, r24
    141c:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
    141e:	13 86       	std	Z+11, r1	; 0x0b
    1420:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
    1422:	8c 91       	ld	r24, X
    1424:	81 50       	subi	r24, 0x01	; 1
    1426:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
    1428:	8c 91       	ld	r24, X
}
    142a:	df 91       	pop	r29
    142c:	cf 91       	pop	r28
    142e:	08 95       	ret

00001430 <pxPortInitialiseStack>:
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    1430:	31 e1       	ldi	r19, 0x11	; 17
    1432:	fc 01       	movw	r30, r24
    1434:	30 83       	st	Z, r19
    1436:	31 97       	sbiw	r30, 0x01	; 1
    1438:	22 e2       	ldi	r18, 0x22	; 34
    143a:	20 83       	st	Z, r18
    143c:	31 97       	sbiw	r30, 0x01	; 1
    143e:	a3 e3       	ldi	r26, 0x33	; 51
    1440:	a0 83       	st	Z, r26
    1442:	31 97       	sbiw	r30, 0x01	; 1
    1444:	60 83       	st	Z, r22
    1446:	31 97       	sbiw	r30, 0x01	; 1
    1448:	70 83       	st	Z, r23
    144a:	31 97       	sbiw	r30, 0x01	; 1
    144c:	10 82       	st	Z, r1
    144e:	31 97       	sbiw	r30, 0x01	; 1
    1450:	10 82       	st	Z, r1
    1452:	31 97       	sbiw	r30, 0x01	; 1
    1454:	60 e8       	ldi	r22, 0x80	; 128
    1456:	60 83       	st	Z, r22
    1458:	31 97       	sbiw	r30, 0x01	; 1
    145a:	10 82       	st	Z, r1
    145c:	31 97       	sbiw	r30, 0x01	; 1
    145e:	10 82       	st	Z, r1
    1460:	31 97       	sbiw	r30, 0x01	; 1
    1462:	10 82       	st	Z, r1
    1464:	31 97       	sbiw	r30, 0x01	; 1
    1466:	62 e0       	ldi	r22, 0x02	; 2
    1468:	60 83       	st	Z, r22
    146a:	31 97       	sbiw	r30, 0x01	; 1
    146c:	63 e0       	ldi	r22, 0x03	; 3
    146e:	60 83       	st	Z, r22
    1470:	31 97       	sbiw	r30, 0x01	; 1
    1472:	64 e0       	ldi	r22, 0x04	; 4
    1474:	60 83       	st	Z, r22
    1476:	31 97       	sbiw	r30, 0x01	; 1
    1478:	65 e0       	ldi	r22, 0x05	; 5
    147a:	60 83       	st	Z, r22
    147c:	31 97       	sbiw	r30, 0x01	; 1
    147e:	66 e0       	ldi	r22, 0x06	; 6
    1480:	60 83       	st	Z, r22
    1482:	31 97       	sbiw	r30, 0x01	; 1
    1484:	67 e0       	ldi	r22, 0x07	; 7
    1486:	60 83       	st	Z, r22
    1488:	31 97       	sbiw	r30, 0x01	; 1
    148a:	68 e0       	ldi	r22, 0x08	; 8
    148c:	60 83       	st	Z, r22
    148e:	31 97       	sbiw	r30, 0x01	; 1
    1490:	69 e0       	ldi	r22, 0x09	; 9
    1492:	60 83       	st	Z, r22
    1494:	31 97       	sbiw	r30, 0x01	; 1
    1496:	60 e1       	ldi	r22, 0x10	; 16
    1498:	60 83       	st	Z, r22
    149a:	31 97       	sbiw	r30, 0x01	; 1
    149c:	30 83       	st	Z, r19
    149e:	31 97       	sbiw	r30, 0x01	; 1
    14a0:	32 e1       	ldi	r19, 0x12	; 18
    14a2:	30 83       	st	Z, r19
    14a4:	31 97       	sbiw	r30, 0x01	; 1
    14a6:	33 e1       	ldi	r19, 0x13	; 19
    14a8:	30 83       	st	Z, r19
    14aa:	31 97       	sbiw	r30, 0x01	; 1
    14ac:	34 e1       	ldi	r19, 0x14	; 20
    14ae:	30 83       	st	Z, r19
    14b0:	31 97       	sbiw	r30, 0x01	; 1
    14b2:	35 e1       	ldi	r19, 0x15	; 21
    14b4:	30 83       	st	Z, r19
    14b6:	31 97       	sbiw	r30, 0x01	; 1
    14b8:	36 e1       	ldi	r19, 0x16	; 22
    14ba:	30 83       	st	Z, r19
    14bc:	31 97       	sbiw	r30, 0x01	; 1
    14be:	37 e1       	ldi	r19, 0x17	; 23
    14c0:	30 83       	st	Z, r19
    14c2:	31 97       	sbiw	r30, 0x01	; 1
    14c4:	38 e1       	ldi	r19, 0x18	; 24
    14c6:	30 83       	st	Z, r19
    14c8:	31 97       	sbiw	r30, 0x01	; 1
    14ca:	39 e1       	ldi	r19, 0x19	; 25
    14cc:	30 83       	st	Z, r19
    14ce:	31 97       	sbiw	r30, 0x01	; 1
    14d0:	30 e2       	ldi	r19, 0x20	; 32
    14d2:	30 83       	st	Z, r19
    14d4:	31 97       	sbiw	r30, 0x01	; 1
    14d6:	31 e2       	ldi	r19, 0x21	; 33
    14d8:	30 83       	st	Z, r19
    14da:	31 97       	sbiw	r30, 0x01	; 1
    14dc:	20 83       	st	Z, r18
    14de:	31 97       	sbiw	r30, 0x01	; 1
    14e0:	23 e2       	ldi	r18, 0x23	; 35
    14e2:	20 83       	st	Z, r18
    14e4:	31 97       	sbiw	r30, 0x01	; 1
    14e6:	40 83       	st	Z, r20
    14e8:	31 97       	sbiw	r30, 0x01	; 1
    14ea:	50 83       	st	Z, r21
    14ec:	31 97       	sbiw	r30, 0x01	; 1
    14ee:	26 e2       	ldi	r18, 0x26	; 38
    14f0:	20 83       	st	Z, r18
    14f2:	31 97       	sbiw	r30, 0x01	; 1
    14f4:	27 e2       	ldi	r18, 0x27	; 39
    14f6:	20 83       	st	Z, r18
    14f8:	31 97       	sbiw	r30, 0x01	; 1
    14fa:	28 e2       	ldi	r18, 0x28	; 40
    14fc:	20 83       	st	Z, r18
    14fe:	31 97       	sbiw	r30, 0x01	; 1
    1500:	29 e2       	ldi	r18, 0x29	; 41
    1502:	20 83       	st	Z, r18
    1504:	31 97       	sbiw	r30, 0x01	; 1
    1506:	20 e3       	ldi	r18, 0x30	; 48
    1508:	20 83       	st	Z, r18
    150a:	31 97       	sbiw	r30, 0x01	; 1
    150c:	21 e3       	ldi	r18, 0x31	; 49
    150e:	20 83       	st	Z, r18
    1510:	89 97       	sbiw	r24, 0x29	; 41
    1512:	08 95       	ret

00001514 <xPortStartScheduler>:
    1514:	a8 95       	wdr
    1516:	90 ec       	ldi	r25, 0xC0	; 192
    1518:	88 e1       	ldi	r24, 0x18	; 24
    151a:	0f b6       	in	r0, 0x3f	; 63
    151c:	f8 94       	cli
    151e:	a8 95       	wdr
    1520:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    1524:	0f be       	out	0x3f, r0	; 63
    1526:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    152a:	a0 91 36 18 	lds	r26, 0x1836	; 0x801836 <pxCurrentTCB>
    152e:	b0 91 37 18 	lds	r27, 0x1837	; 0x801837 <pxCurrentTCB+0x1>
    1532:	cd 91       	ld	r28, X+
    1534:	cd bf       	out	0x3d, r28	; 61
    1536:	dd 91       	ld	r29, X+
    1538:	de bf       	out	0x3e, r29	; 62
    153a:	ff 91       	pop	r31
    153c:	ef 91       	pop	r30
    153e:	df 91       	pop	r29
    1540:	cf 91       	pop	r28
    1542:	bf 91       	pop	r27
    1544:	af 91       	pop	r26
    1546:	9f 91       	pop	r25
    1548:	8f 91       	pop	r24
    154a:	7f 91       	pop	r23
    154c:	6f 91       	pop	r22
    154e:	5f 91       	pop	r21
    1550:	4f 91       	pop	r20
    1552:	3f 91       	pop	r19
    1554:	2f 91       	pop	r18
    1556:	1f 91       	pop	r17
    1558:	0f 91       	pop	r16
    155a:	ff 90       	pop	r15
    155c:	ef 90       	pop	r14
    155e:	df 90       	pop	r13
    1560:	cf 90       	pop	r12
    1562:	bf 90       	pop	r11
    1564:	af 90       	pop	r10
    1566:	9f 90       	pop	r9
    1568:	8f 90       	pop	r8
    156a:	7f 90       	pop	r7
    156c:	6f 90       	pop	r6
    156e:	5f 90       	pop	r5
    1570:	4f 90       	pop	r4
    1572:	3f 90       	pop	r3
    1574:	2f 90       	pop	r2
    1576:	1f 90       	pop	r1
    1578:	0f 90       	pop	r0
    157a:	0c be       	out	0x3c, r0	; 60
    157c:	0f 90       	pop	r0
    157e:	0b be       	out	0x3b, r0	; 59
    1580:	0f 90       	pop	r0
    1582:	0f be       	out	0x3f, r0	; 63
    1584:	0f 90       	pop	r0
    1586:	08 95       	ret
    1588:	81 e0       	ldi	r24, 0x01	; 1
    158a:	08 95       	ret

0000158c <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYield( void )
{
    portSAVE_CONTEXT();
    158c:	0f 92       	push	r0
    158e:	0f b6       	in	r0, 0x3f	; 63
    1590:	f8 94       	cli
    1592:	0f 92       	push	r0
    1594:	0b b6       	in	r0, 0x3b	; 59
    1596:	0f 92       	push	r0
    1598:	0c b6       	in	r0, 0x3c	; 60
    159a:	0f 92       	push	r0
    159c:	1f 92       	push	r1
    159e:	11 24       	eor	r1, r1
    15a0:	2f 92       	push	r2
    15a2:	3f 92       	push	r3
    15a4:	4f 92       	push	r4
    15a6:	5f 92       	push	r5
    15a8:	6f 92       	push	r6
    15aa:	7f 92       	push	r7
    15ac:	8f 92       	push	r8
    15ae:	9f 92       	push	r9
    15b0:	af 92       	push	r10
    15b2:	bf 92       	push	r11
    15b4:	cf 92       	push	r12
    15b6:	df 92       	push	r13
    15b8:	ef 92       	push	r14
    15ba:	ff 92       	push	r15
    15bc:	0f 93       	push	r16
    15be:	1f 93       	push	r17
    15c0:	2f 93       	push	r18
    15c2:	3f 93       	push	r19
    15c4:	4f 93       	push	r20
    15c6:	5f 93       	push	r21
    15c8:	6f 93       	push	r22
    15ca:	7f 93       	push	r23
    15cc:	8f 93       	push	r24
    15ce:	9f 93       	push	r25
    15d0:	af 93       	push	r26
    15d2:	bf 93       	push	r27
    15d4:	cf 93       	push	r28
    15d6:	df 93       	push	r29
    15d8:	ef 93       	push	r30
    15da:	ff 93       	push	r31
    15dc:	a0 91 36 18 	lds	r26, 0x1836	; 0x801836 <pxCurrentTCB>
    15e0:	b0 91 37 18 	lds	r27, 0x1837	; 0x801837 <pxCurrentTCB+0x1>
    15e4:	0d b6       	in	r0, 0x3d	; 61
    15e6:	0d 92       	st	X+, r0
    15e8:	0e b6       	in	r0, 0x3e	; 62
    15ea:	0d 92       	st	X+, r0
    vTaskSwitchContext();
    15ec:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <vTaskSwitchContext>
    portRESTORE_CONTEXT();
    15f0:	a0 91 36 18 	lds	r26, 0x1836	; 0x801836 <pxCurrentTCB>
    15f4:	b0 91 37 18 	lds	r27, 0x1837	; 0x801837 <pxCurrentTCB+0x1>
    15f8:	cd 91       	ld	r28, X+
    15fa:	cd bf       	out	0x3d, r28	; 61
    15fc:	dd 91       	ld	r29, X+
    15fe:	de bf       	out	0x3e, r29	; 62
    1600:	ff 91       	pop	r31
    1602:	ef 91       	pop	r30
    1604:	df 91       	pop	r29
    1606:	cf 91       	pop	r28
    1608:	bf 91       	pop	r27
    160a:	af 91       	pop	r26
    160c:	9f 91       	pop	r25
    160e:	8f 91       	pop	r24
    1610:	7f 91       	pop	r23
    1612:	6f 91       	pop	r22
    1614:	5f 91       	pop	r21
    1616:	4f 91       	pop	r20
    1618:	3f 91       	pop	r19
    161a:	2f 91       	pop	r18
    161c:	1f 91       	pop	r17
    161e:	0f 91       	pop	r16
    1620:	ff 90       	pop	r15
    1622:	ef 90       	pop	r14
    1624:	df 90       	pop	r13
    1626:	cf 90       	pop	r12
    1628:	bf 90       	pop	r11
    162a:	af 90       	pop	r10
    162c:	9f 90       	pop	r9
    162e:	8f 90       	pop	r8
    1630:	7f 90       	pop	r7
    1632:	6f 90       	pop	r6
    1634:	5f 90       	pop	r5
    1636:	4f 90       	pop	r4
    1638:	3f 90       	pop	r3
    163a:	2f 90       	pop	r2
    163c:	1f 90       	pop	r1
    163e:	0f 90       	pop	r0
    1640:	0c be       	out	0x3c, r0	; 60
    1642:	0f 90       	pop	r0
    1644:	0b be       	out	0x3b, r0	; 59
    1646:	0f 90       	pop	r0
    1648:	0f be       	out	0x3f, r0	; 63
    164a:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
    164c:	08 95       	ret

0000164e <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
    164e:	0f 92       	push	r0
    1650:	0f b6       	in	r0, 0x3f	; 63
    1652:	f8 94       	cli
    1654:	0f 92       	push	r0
    1656:	0b b6       	in	r0, 0x3b	; 59
    1658:	0f 92       	push	r0
    165a:	0c b6       	in	r0, 0x3c	; 60
    165c:	0f 92       	push	r0
    165e:	1f 92       	push	r1
    1660:	11 24       	eor	r1, r1
    1662:	2f 92       	push	r2
    1664:	3f 92       	push	r3
    1666:	4f 92       	push	r4
    1668:	5f 92       	push	r5
    166a:	6f 92       	push	r6
    166c:	7f 92       	push	r7
    166e:	8f 92       	push	r8
    1670:	9f 92       	push	r9
    1672:	af 92       	push	r10
    1674:	bf 92       	push	r11
    1676:	cf 92       	push	r12
    1678:	df 92       	push	r13
    167a:	ef 92       	push	r14
    167c:	ff 92       	push	r15
    167e:	0f 93       	push	r16
    1680:	1f 93       	push	r17
    1682:	2f 93       	push	r18
    1684:	3f 93       	push	r19
    1686:	4f 93       	push	r20
    1688:	5f 93       	push	r21
    168a:	6f 93       	push	r22
    168c:	7f 93       	push	r23
    168e:	8f 93       	push	r24
    1690:	9f 93       	push	r25
    1692:	af 93       	push	r26
    1694:	bf 93       	push	r27
    1696:	cf 93       	push	r28
    1698:	df 93       	push	r29
    169a:	ef 93       	push	r30
    169c:	ff 93       	push	r31
    169e:	a0 91 36 18 	lds	r26, 0x1836	; 0x801836 <pxCurrentTCB>
    16a2:	b0 91 37 18 	lds	r27, 0x1837	; 0x801837 <pxCurrentTCB+0x1>
    16a6:	0d b6       	in	r0, 0x3d	; 61
    16a8:	0d 92       	st	X+, r0
    16aa:	0e b6       	in	r0, 0x3e	; 62
    16ac:	0d 92       	st	X+, r0

    sleep_reset();        //     reset the sleep_mode() faster than sleep_disable();
    16ae:	13 be       	out	0x33, r1	; 51

    if( xTaskIncrementTick() != pdFALSE )
    16b0:	0e 94 66 13 	call	0x26cc	; 0x26cc <xTaskIncrementTick>
    16b4:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
    16b6:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <vTaskSwitchContext>
    }

    portRESTORE_CONTEXT();
    16ba:	a0 91 36 18 	lds	r26, 0x1836	; 0x801836 <pxCurrentTCB>
    16be:	b0 91 37 18 	lds	r27, 0x1837	; 0x801837 <pxCurrentTCB+0x1>
    16c2:	cd 91       	ld	r28, X+
    16c4:	cd bf       	out	0x3d, r28	; 61
    16c6:	dd 91       	ld	r29, X+
    16c8:	de bf       	out	0x3e, r29	; 62
    16ca:	ff 91       	pop	r31
    16cc:	ef 91       	pop	r30
    16ce:	df 91       	pop	r29
    16d0:	cf 91       	pop	r28
    16d2:	bf 91       	pop	r27
    16d4:	af 91       	pop	r26
    16d6:	9f 91       	pop	r25
    16d8:	8f 91       	pop	r24
    16da:	7f 91       	pop	r23
    16dc:	6f 91       	pop	r22
    16de:	5f 91       	pop	r21
    16e0:	4f 91       	pop	r20
    16e2:	3f 91       	pop	r19
    16e4:	2f 91       	pop	r18
    16e6:	1f 91       	pop	r17
    16e8:	0f 91       	pop	r16
    16ea:	ff 90       	pop	r15
    16ec:	ef 90       	pop	r14
    16ee:	df 90       	pop	r13
    16f0:	cf 90       	pop	r12
    16f2:	bf 90       	pop	r11
    16f4:	af 90       	pop	r10
    16f6:	9f 90       	pop	r9
    16f8:	8f 90       	pop	r8
    16fa:	7f 90       	pop	r7
    16fc:	6f 90       	pop	r6
    16fe:	5f 90       	pop	r5
    1700:	4f 90       	pop	r4
    1702:	3f 90       	pop	r3
    1704:	2f 90       	pop	r2
    1706:	1f 90       	pop	r1
    1708:	0f 90       	pop	r0
    170a:	0c be       	out	0x3c, r0	; 60
    170c:	0f 90       	pop	r0
    170e:	0b be       	out	0x3b, r0	; 59
    1710:	0f 90       	pop	r0
    1712:	0f be       	out	0x3f, r0	; 63
    1714:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
    1716:	08 95       	ret

00001718 <__vector_12>:
     */
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
//  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
    1718:	9a df       	rcall	.-204    	; 0x164e <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
    171a:	18 95       	reti

0000171c <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    171c:	0f b6       	in	r0, 0x3f	; 63
    171e:	f8 94       	cli
    1720:	0f 92       	push	r0
    1722:	fc 01       	movw	r30, r24
    1724:	96 8d       	ldd	r25, Z+30	; 0x1e
    1726:	0f 90       	pop	r0
    1728:	0f be       	out	0x3f, r0	; 63
    172a:	81 e0       	ldi	r24, 0x01	; 1
    172c:	91 11       	cpse	r25, r1
    172e:	80 e0       	ldi	r24, 0x00	; 0
    1730:	08 95       	ret

00001732 <prvCopyDataToQueue>:
    1732:	0f 93       	push	r16
    1734:	1f 93       	push	r17
    1736:	cf 93       	push	r28
    1738:	df 93       	push	r29
    173a:	ec 01       	movw	r28, r24
    173c:	04 2f       	mov	r16, r20
    173e:	1e 8d       	ldd	r17, Y+30	; 0x1e
    1740:	48 a1       	ldd	r20, Y+32	; 0x20
    1742:	41 11       	cpse	r20, r1
    1744:	0c c0       	rjmp	.+24     	; 0x175e <prvCopyDataToQueue+0x2c>
    1746:	88 81       	ld	r24, Y
    1748:	99 81       	ldd	r25, Y+1	; 0x01
    174a:	89 2b       	or	r24, r25
    174c:	09 f0       	breq	.+2      	; 0x1750 <prvCopyDataToQueue+0x1e>
    174e:	42 c0       	rjmp	.+132    	; 0x17d4 <prvCopyDataToQueue+0xa2>
    1750:	8c 81       	ldd	r24, Y+4	; 0x04
    1752:	9d 81       	ldd	r25, Y+5	; 0x05
    1754:	0e 94 b3 16 	call	0x2d66	; 0x2d66 <xTaskPriorityDisinherit>
    1758:	1d 82       	std	Y+5, r1	; 0x05
    175a:	1c 82       	std	Y+4, r1	; 0x04
    175c:	42 c0       	rjmp	.+132    	; 0x17e2 <prvCopyDataToQueue+0xb0>
    175e:	01 11       	cpse	r16, r1
    1760:	17 c0       	rjmp	.+46     	; 0x1790 <prvCopyDataToQueue+0x5e>
    1762:	50 e0       	ldi	r21, 0x00	; 0
    1764:	8a 81       	ldd	r24, Y+2	; 0x02
    1766:	9b 81       	ldd	r25, Y+3	; 0x03
    1768:	0e 94 dd 2a 	call	0x55ba	; 0x55ba <memcpy>
    176c:	28 a1       	ldd	r18, Y+32	; 0x20
    176e:	8a 81       	ldd	r24, Y+2	; 0x02
    1770:	9b 81       	ldd	r25, Y+3	; 0x03
    1772:	82 0f       	add	r24, r18
    1774:	91 1d       	adc	r25, r1
    1776:	9b 83       	std	Y+3, r25	; 0x03
    1778:	8a 83       	std	Y+2, r24	; 0x02
    177a:	2c 81       	ldd	r18, Y+4	; 0x04
    177c:	3d 81       	ldd	r19, Y+5	; 0x05
    177e:	82 17       	cp	r24, r18
    1780:	93 07       	cpc	r25, r19
    1782:	50 f1       	brcs	.+84     	; 0x17d8 <prvCopyDataToQueue+0xa6>
    1784:	88 81       	ld	r24, Y
    1786:	99 81       	ldd	r25, Y+1	; 0x01
    1788:	9b 83       	std	Y+3, r25	; 0x03
    178a:	8a 83       	std	Y+2, r24	; 0x02
    178c:	80 e0       	ldi	r24, 0x00	; 0
    178e:	29 c0       	rjmp	.+82     	; 0x17e2 <prvCopyDataToQueue+0xb0>
    1790:	50 e0       	ldi	r21, 0x00	; 0
    1792:	8e 81       	ldd	r24, Y+6	; 0x06
    1794:	9f 81       	ldd	r25, Y+7	; 0x07
    1796:	0e 94 dd 2a 	call	0x55ba	; 0x55ba <memcpy>
    179a:	88 a1       	ldd	r24, Y+32	; 0x20
    179c:	90 e0       	ldi	r25, 0x00	; 0
    179e:	91 95       	neg	r25
    17a0:	81 95       	neg	r24
    17a2:	91 09       	sbc	r25, r1
    17a4:	2e 81       	ldd	r18, Y+6	; 0x06
    17a6:	3f 81       	ldd	r19, Y+7	; 0x07
    17a8:	28 0f       	add	r18, r24
    17aa:	39 1f       	adc	r19, r25
    17ac:	3f 83       	std	Y+7, r19	; 0x07
    17ae:	2e 83       	std	Y+6, r18	; 0x06
    17b0:	48 81       	ld	r20, Y
    17b2:	59 81       	ldd	r21, Y+1	; 0x01
    17b4:	24 17       	cp	r18, r20
    17b6:	35 07       	cpc	r19, r21
    17b8:	30 f4       	brcc	.+12     	; 0x17c6 <prvCopyDataToQueue+0x94>
    17ba:	2c 81       	ldd	r18, Y+4	; 0x04
    17bc:	3d 81       	ldd	r19, Y+5	; 0x05
    17be:	82 0f       	add	r24, r18
    17c0:	93 1f       	adc	r25, r19
    17c2:	9f 83       	std	Y+7, r25	; 0x07
    17c4:	8e 83       	std	Y+6, r24	; 0x06
    17c6:	02 30       	cpi	r16, 0x02	; 2
    17c8:	49 f4       	brne	.+18     	; 0x17dc <prvCopyDataToQueue+0xaa>
    17ca:	11 23       	and	r17, r17
    17cc:	49 f0       	breq	.+18     	; 0x17e0 <prvCopyDataToQueue+0xae>
    17ce:	11 50       	subi	r17, 0x01	; 1
    17d0:	80 e0       	ldi	r24, 0x00	; 0
    17d2:	07 c0       	rjmp	.+14     	; 0x17e2 <prvCopyDataToQueue+0xb0>
    17d4:	80 e0       	ldi	r24, 0x00	; 0
    17d6:	05 c0       	rjmp	.+10     	; 0x17e2 <prvCopyDataToQueue+0xb0>
    17d8:	80 e0       	ldi	r24, 0x00	; 0
    17da:	03 c0       	rjmp	.+6      	; 0x17e2 <prvCopyDataToQueue+0xb0>
    17dc:	80 e0       	ldi	r24, 0x00	; 0
    17de:	01 c0       	rjmp	.+2      	; 0x17e2 <prvCopyDataToQueue+0xb0>
    17e0:	80 e0       	ldi	r24, 0x00	; 0
    17e2:	1f 5f       	subi	r17, 0xFF	; 255
    17e4:	1e 8f       	std	Y+30, r17	; 0x1e
    17e6:	df 91       	pop	r29
    17e8:	cf 91       	pop	r28
    17ea:	1f 91       	pop	r17
    17ec:	0f 91       	pop	r16
    17ee:	08 95       	ret

000017f0 <prvCopyDataFromQueue>:
    17f0:	fc 01       	movw	r30, r24
    17f2:	40 a1       	ldd	r20, Z+32	; 0x20
    17f4:	44 23       	and	r20, r20
    17f6:	a9 f0       	breq	.+42     	; 0x1822 <prvCopyDataFromQueue+0x32>
    17f8:	50 e0       	ldi	r21, 0x00	; 0
    17fa:	26 81       	ldd	r18, Z+6	; 0x06
    17fc:	37 81       	ldd	r19, Z+7	; 0x07
    17fe:	24 0f       	add	r18, r20
    1800:	35 1f       	adc	r19, r21
    1802:	37 83       	std	Z+7, r19	; 0x07
    1804:	26 83       	std	Z+6, r18	; 0x06
    1806:	84 81       	ldd	r24, Z+4	; 0x04
    1808:	95 81       	ldd	r25, Z+5	; 0x05
    180a:	28 17       	cp	r18, r24
    180c:	39 07       	cpc	r19, r25
    180e:	20 f0       	brcs	.+8      	; 0x1818 <prvCopyDataFromQueue+0x28>
    1810:	80 81       	ld	r24, Z
    1812:	91 81       	ldd	r25, Z+1	; 0x01
    1814:	97 83       	std	Z+7, r25	; 0x07
    1816:	86 83       	std	Z+6, r24	; 0x06
    1818:	cb 01       	movw	r24, r22
    181a:	66 81       	ldd	r22, Z+6	; 0x06
    181c:	77 81       	ldd	r23, Z+7	; 0x07
    181e:	0c 94 dd 2a 	jmp	0x55ba	; 0x55ba <memcpy>
    1822:	08 95       	ret

00001824 <prvUnlockQueue>:
    1824:	ef 92       	push	r14
    1826:	ff 92       	push	r15
    1828:	0f 93       	push	r16
    182a:	1f 93       	push	r17
    182c:	cf 93       	push	r28
    182e:	8c 01       	movw	r16, r24
    1830:	0f b6       	in	r0, 0x3f	; 63
    1832:	f8 94       	cli
    1834:	0f 92       	push	r0
    1836:	fc 01       	movw	r30, r24
    1838:	c2 a1       	ldd	r28, Z+34	; 0x22
    183a:	1c 16       	cp	r1, r28
    183c:	ac f4       	brge	.+42     	; 0x1868 <prvUnlockQueue+0x44>
    183e:	83 89       	ldd	r24, Z+19	; 0x13
    1840:	81 11       	cpse	r24, r1
    1842:	06 c0       	rjmp	.+12     	; 0x1850 <prvUnlockQueue+0x2c>
    1844:	11 c0       	rjmp	.+34     	; 0x1868 <prvUnlockQueue+0x44>
    1846:	f8 01       	movw	r30, r16
    1848:	83 89       	ldd	r24, Z+19	; 0x13
    184a:	81 11       	cpse	r24, r1
    184c:	05 c0       	rjmp	.+10     	; 0x1858 <prvUnlockQueue+0x34>
    184e:	0c c0       	rjmp	.+24     	; 0x1868 <prvUnlockQueue+0x44>
    1850:	78 01       	movw	r14, r16
    1852:	f3 e1       	ldi	r31, 0x13	; 19
    1854:	ef 0e       	add	r14, r31
    1856:	f1 1c       	adc	r15, r1
    1858:	c7 01       	movw	r24, r14
    185a:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <xTaskRemoveFromEventList>
    185e:	81 11       	cpse	r24, r1
    1860:	0e 94 9c 16 	call	0x2d38	; 0x2d38 <vTaskMissedYield>
    1864:	c1 50       	subi	r28, 0x01	; 1
    1866:	79 f7       	brne	.-34     	; 0x1846 <prvUnlockQueue+0x22>
    1868:	8f ef       	ldi	r24, 0xFF	; 255
    186a:	f8 01       	movw	r30, r16
    186c:	82 a3       	std	Z+34, r24	; 0x22
    186e:	0f 90       	pop	r0
    1870:	0f be       	out	0x3f, r0	; 63
    1872:	0f b6       	in	r0, 0x3f	; 63
    1874:	f8 94       	cli
    1876:	0f 92       	push	r0
    1878:	c1 a1       	ldd	r28, Z+33	; 0x21
    187a:	1c 16       	cp	r1, r28
    187c:	ac f4       	brge	.+42     	; 0x18a8 <prvUnlockQueue+0x84>
    187e:	80 85       	ldd	r24, Z+8	; 0x08
    1880:	81 11       	cpse	r24, r1
    1882:	06 c0       	rjmp	.+12     	; 0x1890 <prvUnlockQueue+0x6c>
    1884:	11 c0       	rjmp	.+34     	; 0x18a8 <prvUnlockQueue+0x84>
    1886:	f8 01       	movw	r30, r16
    1888:	80 85       	ldd	r24, Z+8	; 0x08
    188a:	81 11       	cpse	r24, r1
    188c:	05 c0       	rjmp	.+10     	; 0x1898 <prvUnlockQueue+0x74>
    188e:	0c c0       	rjmp	.+24     	; 0x18a8 <prvUnlockQueue+0x84>
    1890:	78 01       	movw	r14, r16
    1892:	f8 e0       	ldi	r31, 0x08	; 8
    1894:	ef 0e       	add	r14, r31
    1896:	f1 1c       	adc	r15, r1
    1898:	c7 01       	movw	r24, r14
    189a:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <xTaskRemoveFromEventList>
    189e:	81 11       	cpse	r24, r1
    18a0:	0e 94 9c 16 	call	0x2d38	; 0x2d38 <vTaskMissedYield>
    18a4:	c1 50       	subi	r28, 0x01	; 1
    18a6:	79 f7       	brne	.-34     	; 0x1886 <prvUnlockQueue+0x62>
    18a8:	8f ef       	ldi	r24, 0xFF	; 255
    18aa:	f8 01       	movw	r30, r16
    18ac:	81 a3       	std	Z+33, r24	; 0x21
    18ae:	0f 90       	pop	r0
    18b0:	0f be       	out	0x3f, r0	; 63
    18b2:	cf 91       	pop	r28
    18b4:	1f 91       	pop	r17
    18b6:	0f 91       	pop	r16
    18b8:	ff 90       	pop	r15
    18ba:	ef 90       	pop	r14
    18bc:	08 95       	ret

000018be <xQueueGenericReset>:
    18be:	cf 93       	push	r28
    18c0:	df 93       	push	r29
    18c2:	ec 01       	movw	r28, r24
    18c4:	0f b6       	in	r0, 0x3f	; 63
    18c6:	f8 94       	cli
    18c8:	0f 92       	push	r0
    18ca:	e8 81       	ld	r30, Y
    18cc:	f9 81       	ldd	r31, Y+1	; 0x01
    18ce:	8f 8d       	ldd	r24, Y+31	; 0x1f
    18d0:	28 a1       	ldd	r18, Y+32	; 0x20
    18d2:	90 e0       	ldi	r25, 0x00	; 0
    18d4:	30 e0       	ldi	r19, 0x00	; 0
    18d6:	82 9f       	mul	r24, r18
    18d8:	a0 01       	movw	r20, r0
    18da:	83 9f       	mul	r24, r19
    18dc:	50 0d       	add	r21, r0
    18de:	92 9f       	mul	r25, r18
    18e0:	50 0d       	add	r21, r0
    18e2:	11 24       	eor	r1, r1
    18e4:	4e 0f       	add	r20, r30
    18e6:	5f 1f       	adc	r21, r31
    18e8:	5d 83       	std	Y+5, r21	; 0x05
    18ea:	4c 83       	std	Y+4, r20	; 0x04
    18ec:	1e 8e       	std	Y+30, r1	; 0x1e
    18ee:	fb 83       	std	Y+3, r31	; 0x03
    18f0:	ea 83       	std	Y+2, r30	; 0x02
    18f2:	01 97       	sbiw	r24, 0x01	; 1
    18f4:	82 9f       	mul	r24, r18
    18f6:	a0 01       	movw	r20, r0
    18f8:	83 9f       	mul	r24, r19
    18fa:	50 0d       	add	r21, r0
    18fc:	92 9f       	mul	r25, r18
    18fe:	50 0d       	add	r21, r0
    1900:	11 24       	eor	r1, r1
    1902:	cf 01       	movw	r24, r30
    1904:	84 0f       	add	r24, r20
    1906:	95 1f       	adc	r25, r21
    1908:	9f 83       	std	Y+7, r25	; 0x07
    190a:	8e 83       	std	Y+6, r24	; 0x06
    190c:	8f ef       	ldi	r24, 0xFF	; 255
    190e:	89 a3       	std	Y+33, r24	; 0x21
    1910:	8a a3       	std	Y+34, r24	; 0x22
    1912:	61 11       	cpse	r22, r1
    1914:	0b c0       	rjmp	.+22     	; 0x192c <xQueueGenericReset+0x6e>
    1916:	88 85       	ldd	r24, Y+8	; 0x08
    1918:	88 23       	and	r24, r24
    191a:	71 f0       	breq	.+28     	; 0x1938 <xQueueGenericReset+0x7a>
    191c:	ce 01       	movw	r24, r28
    191e:	08 96       	adiw	r24, 0x08	; 8
    1920:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <xTaskRemoveFromEventList>
    1924:	88 23       	and	r24, r24
    1926:	41 f0       	breq	.+16     	; 0x1938 <xQueueGenericReset+0x7a>
    1928:	31 de       	rcall	.-926    	; 0x158c <vPortYield>
    192a:	06 c0       	rjmp	.+12     	; 0x1938 <xQueueGenericReset+0x7a>
    192c:	ce 01       	movw	r24, r28
    192e:	08 96       	adiw	r24, 0x08	; 8
    1930:	e5 dc       	rcall	.-1590   	; 0x12fc <vListInitialise>
    1932:	ce 01       	movw	r24, r28
    1934:	43 96       	adiw	r24, 0x13	; 19
    1936:	e2 dc       	rcall	.-1596   	; 0x12fc <vListInitialise>
    1938:	0f 90       	pop	r0
    193a:	0f be       	out	0x3f, r0	; 63
    193c:	81 e0       	ldi	r24, 0x01	; 1
    193e:	df 91       	pop	r29
    1940:	cf 91       	pop	r28
    1942:	08 95       	ret

00001944 <xQueueGenericCreate>:
    1944:	ff 92       	push	r15
    1946:	0f 93       	push	r16
    1948:	1f 93       	push	r17
    194a:	cf 93       	push	r28
    194c:	df 93       	push	r29
    194e:	08 2f       	mov	r16, r24
    1950:	16 2f       	mov	r17, r22
    1952:	f4 2e       	mov	r15, r20
    1954:	66 23       	and	r22, r22
    1956:	b9 f0       	breq	.+46     	; 0x1986 <xQueueGenericCreate+0x42>
    1958:	86 9f       	mul	r24, r22
    195a:	c0 01       	movw	r24, r0
    195c:	11 24       	eor	r1, r1
    195e:	85 96       	adiw	r24, 0x25	; 37
    1960:	e3 db       	rcall	.-2106   	; 0x1128 <pvPortMalloc>
    1962:	ec 01       	movw	r28, r24
    1964:	00 97       	sbiw	r24, 0x00	; 0
    1966:	41 f4       	brne	.+16     	; 0x1978 <xQueueGenericCreate+0x34>
    1968:	14 c0       	rjmp	.+40     	; 0x1992 <xQueueGenericCreate+0x4e>
    196a:	0f 8f       	std	Y+31, r16	; 0x1f
    196c:	18 a3       	std	Y+32, r17	; 0x20
    196e:	61 e0       	ldi	r22, 0x01	; 1
    1970:	ce 01       	movw	r24, r28
    1972:	a5 df       	rcall	.-182    	; 0x18be <xQueueGenericReset>
    1974:	fc a2       	std	Y+36, r15	; 0x24
    1976:	0d c0       	rjmp	.+26     	; 0x1992 <xQueueGenericCreate+0x4e>
    1978:	85 96       	adiw	r24, 0x25	; 37
    197a:	99 83       	std	Y+1, r25	; 0x01
    197c:	88 83       	st	Y, r24
    197e:	f5 cf       	rjmp	.-22     	; 0x196a <xQueueGenericCreate+0x26>
    1980:	d9 83       	std	Y+1, r29	; 0x01
    1982:	c8 83       	st	Y, r28
    1984:	f2 cf       	rjmp	.-28     	; 0x196a <xQueueGenericCreate+0x26>
    1986:	85 e2       	ldi	r24, 0x25	; 37
    1988:	90 e0       	ldi	r25, 0x00	; 0
    198a:	ce db       	rcall	.-2148   	; 0x1128 <pvPortMalloc>
    198c:	ec 01       	movw	r28, r24
    198e:	89 2b       	or	r24, r25
    1990:	b9 f7       	brne	.-18     	; 0x1980 <xQueueGenericCreate+0x3c>
    1992:	ce 01       	movw	r24, r28
    1994:	df 91       	pop	r29
    1996:	cf 91       	pop	r28
    1998:	1f 91       	pop	r17
    199a:	0f 91       	pop	r16
    199c:	ff 90       	pop	r15
    199e:	08 95       	ret

000019a0 <xQueueGenericSend>:
    19a0:	9f 92       	push	r9
    19a2:	af 92       	push	r10
    19a4:	bf 92       	push	r11
    19a6:	cf 92       	push	r12
    19a8:	df 92       	push	r13
    19aa:	ef 92       	push	r14
    19ac:	ff 92       	push	r15
    19ae:	0f 93       	push	r16
    19b0:	1f 93       	push	r17
    19b2:	cf 93       	push	r28
    19b4:	df 93       	push	r29
    19b6:	cd b7       	in	r28, 0x3d	; 61
    19b8:	de b7       	in	r29, 0x3e	; 62
    19ba:	29 97       	sbiw	r28, 0x09	; 9
    19bc:	0f b6       	in	r0, 0x3f	; 63
    19be:	f8 94       	cli
    19c0:	de bf       	out	0x3e, r29	; 62
    19c2:	0f be       	out	0x3f, r0	; 63
    19c4:	cd bf       	out	0x3d, r28	; 61
    19c6:	7c 01       	movw	r14, r24
    19c8:	5b 01       	movw	r10, r22
    19ca:	2e 83       	std	Y+6, r18	; 0x06
    19cc:	3f 83       	std	Y+7, r19	; 0x07
    19ce:	48 87       	std	Y+8, r20	; 0x08
    19d0:	59 87       	std	Y+9, r21	; 0x09
    19d2:	10 e0       	ldi	r17, 0x00	; 0
    19d4:	99 24       	eor	r9, r9
    19d6:	93 94       	inc	r9
    19d8:	6c 01       	movw	r12, r24
    19da:	88 e0       	ldi	r24, 0x08	; 8
    19dc:	c8 0e       	add	r12, r24
    19de:	d1 1c       	adc	r13, r1
    19e0:	0f b6       	in	r0, 0x3f	; 63
    19e2:	f8 94       	cli
    19e4:	0f 92       	push	r0
    19e6:	f7 01       	movw	r30, r14
    19e8:	96 8d       	ldd	r25, Z+30	; 0x1e
    19ea:	87 8d       	ldd	r24, Z+31	; 0x1f
    19ec:	98 17       	cp	r25, r24
    19ee:	10 f0       	brcs	.+4      	; 0x19f4 <xQueueGenericSend+0x54>
    19f0:	02 30       	cpi	r16, 0x02	; 2
    19f2:	b1 f4       	brne	.+44     	; 0x1a20 <xQueueGenericSend+0x80>
    19f4:	40 2f       	mov	r20, r16
    19f6:	b5 01       	movw	r22, r10
    19f8:	c7 01       	movw	r24, r14
    19fa:	9b de       	rcall	.-714    	; 0x1732 <prvCopyDataToQueue>
    19fc:	f7 01       	movw	r30, r14
    19fe:	93 89       	ldd	r25, Z+19	; 0x13
    1a00:	99 23       	and	r25, r25
    1a02:	41 f0       	breq	.+16     	; 0x1a14 <xQueueGenericSend+0x74>
    1a04:	c7 01       	movw	r24, r14
    1a06:	43 96       	adiw	r24, 0x13	; 19
    1a08:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <xTaskRemoveFromEventList>
    1a0c:	88 23       	and	r24, r24
    1a0e:	21 f0       	breq	.+8      	; 0x1a18 <xQueueGenericSend+0x78>
    1a10:	bd dd       	rcall	.-1158   	; 0x158c <vPortYield>
    1a12:	02 c0       	rjmp	.+4      	; 0x1a18 <xQueueGenericSend+0x78>
    1a14:	81 11       	cpse	r24, r1
    1a16:	ba dd       	rcall	.-1164   	; 0x158c <vPortYield>
    1a18:	0f 90       	pop	r0
    1a1a:	0f be       	out	0x3f, r0	; 63
    1a1c:	81 e0       	ldi	r24, 0x01	; 1
    1a1e:	4e c0       	rjmp	.+156    	; 0x1abc <xQueueGenericSend+0x11c>
    1a20:	8e 81       	ldd	r24, Y+6	; 0x06
    1a22:	9f 81       	ldd	r25, Y+7	; 0x07
    1a24:	a8 85       	ldd	r26, Y+8	; 0x08
    1a26:	b9 85       	ldd	r27, Y+9	; 0x09
    1a28:	89 2b       	or	r24, r25
    1a2a:	8a 2b       	or	r24, r26
    1a2c:	8b 2b       	or	r24, r27
    1a2e:	21 f4       	brne	.+8      	; 0x1a38 <xQueueGenericSend+0x98>
    1a30:	0f 90       	pop	r0
    1a32:	0f be       	out	0x3f, r0	; 63
    1a34:	80 e0       	ldi	r24, 0x00	; 0
    1a36:	42 c0       	rjmp	.+132    	; 0x1abc <xQueueGenericSend+0x11c>
    1a38:	11 11       	cpse	r17, r1
    1a3a:	05 c0       	rjmp	.+10     	; 0x1a46 <xQueueGenericSend+0xa6>
    1a3c:	ce 01       	movw	r24, r28
    1a3e:	01 96       	adiw	r24, 0x01	; 1
    1a40:	0e 94 36 16 	call	0x2c6c	; 0x2c6c <vTaskInternalSetTimeOutState>
    1a44:	19 2d       	mov	r17, r9
    1a46:	0f 90       	pop	r0
    1a48:	0f be       	out	0x3f, r0	; 63
    1a4a:	2c d6       	rcall	.+3160   	; 0x26a4 <vTaskSuspendAll>
    1a4c:	0f b6       	in	r0, 0x3f	; 63
    1a4e:	f8 94       	cli
    1a50:	0f 92       	push	r0
    1a52:	f7 01       	movw	r30, r14
    1a54:	81 a1       	ldd	r24, Z+33	; 0x21
    1a56:	8f 3f       	cpi	r24, 0xFF	; 255
    1a58:	09 f4       	brne	.+2      	; 0x1a5c <xQueueGenericSend+0xbc>
    1a5a:	11 a2       	std	Z+33, r1	; 0x21
    1a5c:	f7 01       	movw	r30, r14
    1a5e:	82 a1       	ldd	r24, Z+34	; 0x22
    1a60:	8f 3f       	cpi	r24, 0xFF	; 255
    1a62:	09 f4       	brne	.+2      	; 0x1a66 <xQueueGenericSend+0xc6>
    1a64:	12 a2       	std	Z+34, r1	; 0x22
    1a66:	0f 90       	pop	r0
    1a68:	0f be       	out	0x3f, r0	; 63
    1a6a:	be 01       	movw	r22, r28
    1a6c:	6a 5f       	subi	r22, 0xFA	; 250
    1a6e:	7f 4f       	sbci	r23, 0xFF	; 255
    1a70:	ce 01       	movw	r24, r28
    1a72:	01 96       	adiw	r24, 0x01	; 1
    1a74:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <xTaskCheckForTimeOut>
    1a78:	81 11       	cpse	r24, r1
    1a7a:	1c c0       	rjmp	.+56     	; 0x1ab4 <xQueueGenericSend+0x114>
    1a7c:	0f b6       	in	r0, 0x3f	; 63
    1a7e:	f8 94       	cli
    1a80:	0f 92       	push	r0
    1a82:	f7 01       	movw	r30, r14
    1a84:	96 8d       	ldd	r25, Z+30	; 0x1e
    1a86:	87 8d       	ldd	r24, Z+31	; 0x1f
    1a88:	0f 90       	pop	r0
    1a8a:	0f be       	out	0x3f, r0	; 63
    1a8c:	98 13       	cpse	r25, r24
    1a8e:	0e c0       	rjmp	.+28     	; 0x1aac <xQueueGenericSend+0x10c>
    1a90:	4e 81       	ldd	r20, Y+6	; 0x06
    1a92:	5f 81       	ldd	r21, Y+7	; 0x07
    1a94:	68 85       	ldd	r22, Y+8	; 0x08
    1a96:	79 85       	ldd	r23, Y+9	; 0x09
    1a98:	c6 01       	movw	r24, r12
    1a9a:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <vTaskPlaceOnEventList>
    1a9e:	c7 01       	movw	r24, r14
    1aa0:	c1 de       	rcall	.-638    	; 0x1824 <prvUnlockQueue>
    1aa2:	e9 d6       	rcall	.+3538   	; 0x2876 <xTaskResumeAll>
    1aa4:	81 11       	cpse	r24, r1
    1aa6:	9c cf       	rjmp	.-200    	; 0x19e0 <xQueueGenericSend+0x40>
    1aa8:	71 dd       	rcall	.-1310   	; 0x158c <vPortYield>
    1aaa:	9a cf       	rjmp	.-204    	; 0x19e0 <xQueueGenericSend+0x40>
    1aac:	c7 01       	movw	r24, r14
    1aae:	ba de       	rcall	.-652    	; 0x1824 <prvUnlockQueue>
    1ab0:	e2 d6       	rcall	.+3524   	; 0x2876 <xTaskResumeAll>
    1ab2:	96 cf       	rjmp	.-212    	; 0x19e0 <xQueueGenericSend+0x40>
    1ab4:	c7 01       	movw	r24, r14
    1ab6:	b6 de       	rcall	.-660    	; 0x1824 <prvUnlockQueue>
    1ab8:	de d6       	rcall	.+3516   	; 0x2876 <xTaskResumeAll>
    1aba:	80 e0       	ldi	r24, 0x00	; 0
    1abc:	29 96       	adiw	r28, 0x09	; 9
    1abe:	0f b6       	in	r0, 0x3f	; 63
    1ac0:	f8 94       	cli
    1ac2:	de bf       	out	0x3e, r29	; 62
    1ac4:	0f be       	out	0x3f, r0	; 63
    1ac6:	cd bf       	out	0x3d, r28	; 61
    1ac8:	df 91       	pop	r29
    1aca:	cf 91       	pop	r28
    1acc:	1f 91       	pop	r17
    1ace:	0f 91       	pop	r16
    1ad0:	ff 90       	pop	r15
    1ad2:	ef 90       	pop	r14
    1ad4:	df 90       	pop	r13
    1ad6:	cf 90       	pop	r12
    1ad8:	bf 90       	pop	r11
    1ada:	af 90       	pop	r10
    1adc:	9f 90       	pop	r9
    1ade:	08 95       	ret

00001ae0 <xQueueCreateMutex>:
    1ae0:	0f 93       	push	r16
    1ae2:	cf 93       	push	r28
    1ae4:	df 93       	push	r29
    1ae6:	48 2f       	mov	r20, r24
    1ae8:	60 e0       	ldi	r22, 0x00	; 0
    1aea:	81 e0       	ldi	r24, 0x01	; 1
    1aec:	2b df       	rcall	.-426    	; 0x1944 <xQueueGenericCreate>
    1aee:	ec 01       	movw	r28, r24
    1af0:	00 97       	sbiw	r24, 0x00	; 0
    1af2:	61 f0       	breq	.+24     	; 0x1b0c <xQueueCreateMutex+0x2c>
    1af4:	1d 82       	std	Y+5, r1	; 0x05
    1af6:	1c 82       	std	Y+4, r1	; 0x04
    1af8:	19 82       	std	Y+1, r1	; 0x01
    1afa:	18 82       	st	Y, r1
    1afc:	1e 82       	std	Y+6, r1	; 0x06
    1afe:	00 e0       	ldi	r16, 0x00	; 0
    1b00:	20 e0       	ldi	r18, 0x00	; 0
    1b02:	30 e0       	ldi	r19, 0x00	; 0
    1b04:	a9 01       	movw	r20, r18
    1b06:	60 e0       	ldi	r22, 0x00	; 0
    1b08:	70 e0       	ldi	r23, 0x00	; 0
    1b0a:	4a df       	rcall	.-364    	; 0x19a0 <xQueueGenericSend>
    1b0c:	ce 01       	movw	r24, r28
    1b0e:	df 91       	pop	r29
    1b10:	cf 91       	pop	r28
    1b12:	0f 91       	pop	r16
    1b14:	08 95       	ret

00001b16 <xQueueGenericSendFromISR>:
    1b16:	ef 92       	push	r14
    1b18:	ff 92       	push	r15
    1b1a:	0f 93       	push	r16
    1b1c:	1f 93       	push	r17
    1b1e:	cf 93       	push	r28
    1b20:	df 93       	push	r29
    1b22:	8a 01       	movw	r16, r20
    1b24:	fc 01       	movw	r30, r24
    1b26:	56 8d       	ldd	r21, Z+30	; 0x1e
    1b28:	37 8d       	ldd	r19, Z+31	; 0x1f
    1b2a:	53 17       	cp	r21, r19
    1b2c:	10 f0       	brcs	.+4      	; 0x1b32 <xQueueGenericSendFromISR+0x1c>
    1b2e:	22 30       	cpi	r18, 0x02	; 2
    1b30:	e9 f4       	brne	.+58     	; 0x1b6c <xQueueGenericSendFromISR+0x56>
    1b32:	42 2f       	mov	r20, r18
    1b34:	78 01       	movw	r14, r16
    1b36:	ec 01       	movw	r28, r24
    1b38:	1a a1       	ldd	r17, Y+34	; 0x22
    1b3a:	fb dd       	rcall	.-1034   	; 0x1732 <prvCopyDataToQueue>
    1b3c:	1f 3f       	cpi	r17, 0xFF	; 255
    1b3e:	81 f4       	brne	.+32     	; 0x1b60 <xQueueGenericSendFromISR+0x4a>
    1b40:	8b 89       	ldd	r24, Y+19	; 0x13
    1b42:	88 23       	and	r24, r24
    1b44:	a9 f0       	breq	.+42     	; 0x1b70 <xQueueGenericSendFromISR+0x5a>
    1b46:	ce 01       	movw	r24, r28
    1b48:	43 96       	adiw	r24, 0x13	; 19
    1b4a:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <xTaskRemoveFromEventList>
    1b4e:	88 23       	and	r24, r24
    1b50:	89 f0       	breq	.+34     	; 0x1b74 <xQueueGenericSendFromISR+0x5e>
    1b52:	e1 14       	cp	r14, r1
    1b54:	f1 04       	cpc	r15, r1
    1b56:	81 f0       	breq	.+32     	; 0x1b78 <xQueueGenericSendFromISR+0x62>
    1b58:	81 e0       	ldi	r24, 0x01	; 1
    1b5a:	f7 01       	movw	r30, r14
    1b5c:	80 83       	st	Z, r24
    1b5e:	0d c0       	rjmp	.+26     	; 0x1b7a <xQueueGenericSendFromISR+0x64>
    1b60:	ff 24       	eor	r15, r15
    1b62:	f3 94       	inc	r15
    1b64:	f1 0e       	add	r15, r17
    1b66:	fa a2       	std	Y+34, r15	; 0x22
    1b68:	81 e0       	ldi	r24, 0x01	; 1
    1b6a:	07 c0       	rjmp	.+14     	; 0x1b7a <xQueueGenericSendFromISR+0x64>
    1b6c:	80 e0       	ldi	r24, 0x00	; 0
    1b6e:	05 c0       	rjmp	.+10     	; 0x1b7a <xQueueGenericSendFromISR+0x64>
    1b70:	81 e0       	ldi	r24, 0x01	; 1
    1b72:	03 c0       	rjmp	.+6      	; 0x1b7a <xQueueGenericSendFromISR+0x64>
    1b74:	81 e0       	ldi	r24, 0x01	; 1
    1b76:	01 c0       	rjmp	.+2      	; 0x1b7a <xQueueGenericSendFromISR+0x64>
    1b78:	81 e0       	ldi	r24, 0x01	; 1
    1b7a:	df 91       	pop	r29
    1b7c:	cf 91       	pop	r28
    1b7e:	1f 91       	pop	r17
    1b80:	0f 91       	pop	r16
    1b82:	ff 90       	pop	r15
    1b84:	ef 90       	pop	r14
    1b86:	08 95       	ret

00001b88 <xQueueReceive>:
    1b88:	9f 92       	push	r9
    1b8a:	af 92       	push	r10
    1b8c:	bf 92       	push	r11
    1b8e:	cf 92       	push	r12
    1b90:	df 92       	push	r13
    1b92:	ef 92       	push	r14
    1b94:	ff 92       	push	r15
    1b96:	0f 93       	push	r16
    1b98:	1f 93       	push	r17
    1b9a:	cf 93       	push	r28
    1b9c:	df 93       	push	r29
    1b9e:	cd b7       	in	r28, 0x3d	; 61
    1ba0:	de b7       	in	r29, 0x3e	; 62
    1ba2:	29 97       	sbiw	r28, 0x09	; 9
    1ba4:	0f b6       	in	r0, 0x3f	; 63
    1ba6:	f8 94       	cli
    1ba8:	de bf       	out	0x3e, r29	; 62
    1baa:	0f be       	out	0x3f, r0	; 63
    1bac:	cd bf       	out	0x3d, r28	; 61
    1bae:	8c 01       	movw	r16, r24
    1bb0:	5b 01       	movw	r10, r22
    1bb2:	2e 83       	std	Y+6, r18	; 0x06
    1bb4:	3f 83       	std	Y+7, r19	; 0x07
    1bb6:	48 87       	std	Y+8, r20	; 0x08
    1bb8:	59 87       	std	Y+9, r21	; 0x09
    1bba:	e1 2c       	mov	r14, r1
    1bbc:	99 24       	eor	r9, r9
    1bbe:	93 94       	inc	r9
    1bc0:	6c 01       	movw	r12, r24
    1bc2:	83 e1       	ldi	r24, 0x13	; 19
    1bc4:	c8 0e       	add	r12, r24
    1bc6:	d1 1c       	adc	r13, r1
    1bc8:	0f b6       	in	r0, 0x3f	; 63
    1bca:	f8 94       	cli
    1bcc:	0f 92       	push	r0
    1bce:	f8 01       	movw	r30, r16
    1bd0:	f6 8c       	ldd	r15, Z+30	; 0x1e
    1bd2:	ff 20       	and	r15, r15
    1bd4:	91 f0       	breq	.+36     	; 0x1bfa <xQueueReceive+0x72>
    1bd6:	b5 01       	movw	r22, r10
    1bd8:	c8 01       	movw	r24, r16
    1bda:	0a de       	rcall	.-1004   	; 0x17f0 <prvCopyDataFromQueue>
    1bdc:	fa 94       	dec	r15
    1bde:	f8 01       	movw	r30, r16
    1be0:	f6 8e       	std	Z+30, r15	; 0x1e
    1be2:	80 85       	ldd	r24, Z+8	; 0x08
    1be4:	88 23       	and	r24, r24
    1be6:	29 f0       	breq	.+10     	; 0x1bf2 <xQueueReceive+0x6a>
    1be8:	c8 01       	movw	r24, r16
    1bea:	08 96       	adiw	r24, 0x08	; 8
    1bec:	b3 d7       	rcall	.+3942   	; 0x2b54 <xTaskRemoveFromEventList>
    1bee:	81 11       	cpse	r24, r1
    1bf0:	cd dc       	rcall	.-1638   	; 0x158c <vPortYield>
    1bf2:	0f 90       	pop	r0
    1bf4:	0f be       	out	0x3f, r0	; 63
    1bf6:	81 e0       	ldi	r24, 0x01	; 1
    1bf8:	4c c0       	rjmp	.+152    	; 0x1c92 <xQueueReceive+0x10a>
    1bfa:	8e 81       	ldd	r24, Y+6	; 0x06
    1bfc:	9f 81       	ldd	r25, Y+7	; 0x07
    1bfe:	a8 85       	ldd	r26, Y+8	; 0x08
    1c00:	b9 85       	ldd	r27, Y+9	; 0x09
    1c02:	89 2b       	or	r24, r25
    1c04:	8a 2b       	or	r24, r26
    1c06:	8b 2b       	or	r24, r27
    1c08:	21 f4       	brne	.+8      	; 0x1c12 <xQueueReceive+0x8a>
    1c0a:	0f 90       	pop	r0
    1c0c:	0f be       	out	0x3f, r0	; 63
    1c0e:	80 e0       	ldi	r24, 0x00	; 0
    1c10:	40 c0       	rjmp	.+128    	; 0x1c92 <xQueueReceive+0x10a>
    1c12:	e1 10       	cpse	r14, r1
    1c14:	05 c0       	rjmp	.+10     	; 0x1c20 <xQueueReceive+0x98>
    1c16:	ce 01       	movw	r24, r28
    1c18:	01 96       	adiw	r24, 0x01	; 1
    1c1a:	0e 94 36 16 	call	0x2c6c	; 0x2c6c <vTaskInternalSetTimeOutState>
    1c1e:	e9 2c       	mov	r14, r9
    1c20:	0f 90       	pop	r0
    1c22:	0f be       	out	0x3f, r0	; 63
    1c24:	3f d5       	rcall	.+2686   	; 0x26a4 <vTaskSuspendAll>
    1c26:	0f b6       	in	r0, 0x3f	; 63
    1c28:	f8 94       	cli
    1c2a:	0f 92       	push	r0
    1c2c:	f8 01       	movw	r30, r16
    1c2e:	81 a1       	ldd	r24, Z+33	; 0x21
    1c30:	8f 3f       	cpi	r24, 0xFF	; 255
    1c32:	09 f4       	brne	.+2      	; 0x1c36 <xQueueReceive+0xae>
    1c34:	11 a2       	std	Z+33, r1	; 0x21
    1c36:	f8 01       	movw	r30, r16
    1c38:	82 a1       	ldd	r24, Z+34	; 0x22
    1c3a:	8f 3f       	cpi	r24, 0xFF	; 255
    1c3c:	09 f4       	brne	.+2      	; 0x1c40 <xQueueReceive+0xb8>
    1c3e:	12 a2       	std	Z+34, r1	; 0x22
    1c40:	0f 90       	pop	r0
    1c42:	0f be       	out	0x3f, r0	; 63
    1c44:	be 01       	movw	r22, r28
    1c46:	6a 5f       	subi	r22, 0xFA	; 250
    1c48:	7f 4f       	sbci	r23, 0xFF	; 255
    1c4a:	ce 01       	movw	r24, r28
    1c4c:	01 96       	adiw	r24, 0x01	; 1
    1c4e:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <xTaskCheckForTimeOut>
    1c52:	81 11       	cpse	r24, r1
    1c54:	15 c0       	rjmp	.+42     	; 0x1c80 <xQueueReceive+0xf8>
    1c56:	c8 01       	movw	r24, r16
    1c58:	61 dd       	rcall	.-1342   	; 0x171c <prvIsQueueEmpty>
    1c5a:	88 23       	and	r24, r24
    1c5c:	69 f0       	breq	.+26     	; 0x1c78 <xQueueReceive+0xf0>
    1c5e:	4e 81       	ldd	r20, Y+6	; 0x06
    1c60:	5f 81       	ldd	r21, Y+7	; 0x07
    1c62:	68 85       	ldd	r22, Y+8	; 0x08
    1c64:	79 85       	ldd	r23, Y+9	; 0x09
    1c66:	c6 01       	movw	r24, r12
    1c68:	1a d7       	rcall	.+3636   	; 0x2a9e <vTaskPlaceOnEventList>
    1c6a:	c8 01       	movw	r24, r16
    1c6c:	db dd       	rcall	.-1098   	; 0x1824 <prvUnlockQueue>
    1c6e:	03 d6       	rcall	.+3078   	; 0x2876 <xTaskResumeAll>
    1c70:	81 11       	cpse	r24, r1
    1c72:	aa cf       	rjmp	.-172    	; 0x1bc8 <xQueueReceive+0x40>
    1c74:	8b dc       	rcall	.-1770   	; 0x158c <vPortYield>
    1c76:	a8 cf       	rjmp	.-176    	; 0x1bc8 <xQueueReceive+0x40>
    1c78:	c8 01       	movw	r24, r16
    1c7a:	d4 dd       	rcall	.-1112   	; 0x1824 <prvUnlockQueue>
    1c7c:	fc d5       	rcall	.+3064   	; 0x2876 <xTaskResumeAll>
    1c7e:	a4 cf       	rjmp	.-184    	; 0x1bc8 <xQueueReceive+0x40>
    1c80:	c8 01       	movw	r24, r16
    1c82:	d0 dd       	rcall	.-1120   	; 0x1824 <prvUnlockQueue>
    1c84:	f8 d5       	rcall	.+3056   	; 0x2876 <xTaskResumeAll>
    1c86:	c8 01       	movw	r24, r16
    1c88:	49 dd       	rcall	.-1390   	; 0x171c <prvIsQueueEmpty>
    1c8a:	88 23       	and	r24, r24
    1c8c:	09 f4       	brne	.+2      	; 0x1c90 <xQueueReceive+0x108>
    1c8e:	9c cf       	rjmp	.-200    	; 0x1bc8 <xQueueReceive+0x40>
    1c90:	80 e0       	ldi	r24, 0x00	; 0
    1c92:	29 96       	adiw	r28, 0x09	; 9
    1c94:	0f b6       	in	r0, 0x3f	; 63
    1c96:	f8 94       	cli
    1c98:	de bf       	out	0x3e, r29	; 62
    1c9a:	0f be       	out	0x3f, r0	; 63
    1c9c:	cd bf       	out	0x3d, r28	; 61
    1c9e:	df 91       	pop	r29
    1ca0:	cf 91       	pop	r28
    1ca2:	1f 91       	pop	r17
    1ca4:	0f 91       	pop	r16
    1ca6:	ff 90       	pop	r15
    1ca8:	ef 90       	pop	r14
    1caa:	df 90       	pop	r13
    1cac:	cf 90       	pop	r12
    1cae:	bf 90       	pop	r11
    1cb0:	af 90       	pop	r10
    1cb2:	9f 90       	pop	r9
    1cb4:	08 95       	ret

00001cb6 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
    {
    1cb6:	cf 93       	push	r28
    1cb8:	df 93       	push	r29
    1cba:	ec 01       	movw	r28, r24
        will not actually cause the task to block, just place it on a blocked
        list.  It will not block until the scheduler is unlocked - at which
        time a yield will be performed.  If an item is added to the queue while
        the queue is locked, and the calling task blocks on the queue, then the
        calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    1cbc:	0f b6       	in	r0, 0x3f	; 63
    1cbe:	f8 94       	cli
    1cc0:	0f 92       	push	r0
    1cc2:	89 a1       	ldd	r24, Y+33	; 0x21
    1cc4:	8f 3f       	cpi	r24, 0xFF	; 255
    1cc6:	09 f4       	brne	.+2      	; 0x1cca <vQueueWaitForMessageRestricted+0x14>
    1cc8:	19 a2       	std	Y+33, r1	; 0x21
    1cca:	8a a1       	ldd	r24, Y+34	; 0x22
    1ccc:	8f 3f       	cpi	r24, 0xFF	; 255
    1cce:	09 f4       	brne	.+2      	; 0x1cd2 <vQueueWaitForMessageRestricted+0x1c>
    1cd0:	1a a2       	std	Y+34, r1	; 0x22
    1cd2:	0f 90       	pop	r0
    1cd4:	0f be       	out	0x3f, r0	; 63
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    1cd6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1cd8:	81 11       	cpse	r24, r1
    1cda:	03 c0       	rjmp	.+6      	; 0x1ce2 <vQueueWaitForMessageRestricted+0x2c>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    1cdc:	ce 01       	movw	r24, r28
    1cde:	43 96       	adiw	r24, 0x13	; 19
    1ce0:	19 d7       	rcall	.+3634   	; 0x2b14 <vTaskPlaceOnEventListRestricted>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
        prvUnlockQueue( pxQueue );
    1ce2:	ce 01       	movw	r24, r28
    1ce4:	9f dd       	rcall	.-1218   	; 0x1824 <prvUnlockQueue>
    }
    1ce6:	df 91       	pop	r29
    1ce8:	cf 91       	pop	r28
    1cea:	08 95       	ret

00001cec <prvBytesInBuffer>:

    configASSERT( pxStreamBuffer );

    xReturn = prvBytesInBuffer( pxStreamBuffer );
    return xReturn;
}
    1cec:	fc 01       	movw	r30, r24
    1cee:	44 81       	ldd	r20, Z+4	; 0x04
    1cf0:	55 81       	ldd	r21, Z+5	; 0x05
    1cf2:	22 81       	ldd	r18, Z+2	; 0x02
    1cf4:	33 81       	ldd	r19, Z+3	; 0x03
    1cf6:	24 0f       	add	r18, r20
    1cf8:	35 1f       	adc	r19, r21
    1cfa:	80 81       	ld	r24, Z
    1cfc:	91 81       	ldd	r25, Z+1	; 0x01
    1cfe:	b9 01       	movw	r22, r18
    1d00:	68 1b       	sub	r22, r24
    1d02:	79 0b       	sbc	r23, r25
    1d04:	cb 01       	movw	r24, r22
    1d06:	64 17       	cp	r22, r20
    1d08:	75 07       	cpc	r23, r21
    1d0a:	10 f0       	brcs	.+4      	; 0x1d10 <prvBytesInBuffer+0x24>
    1d0c:	84 1b       	sub	r24, r20
    1d0e:	95 0b       	sbc	r25, r21
    1d10:	08 95       	ret

00001d12 <prvWriteBytesToBuffer>:
    1d12:	af 92       	push	r10
    1d14:	bf 92       	push	r11
    1d16:	cf 92       	push	r12
    1d18:	df 92       	push	r13
    1d1a:	ef 92       	push	r14
    1d1c:	ff 92       	push	r15
    1d1e:	0f 93       	push	r16
    1d20:	1f 93       	push	r17
    1d22:	cf 93       	push	r28
    1d24:	df 93       	push	r29
    1d26:	6c 01       	movw	r12, r24
    1d28:	5b 01       	movw	r10, r22
    1d2a:	7a 01       	movw	r14, r20
    1d2c:	fc 01       	movw	r30, r24
    1d2e:	c2 81       	ldd	r28, Z+2	; 0x02
    1d30:	d3 81       	ldd	r29, Z+3	; 0x03
    1d32:	04 81       	ldd	r16, Z+4	; 0x04
    1d34:	15 81       	ldd	r17, Z+5	; 0x05
    1d36:	0c 1b       	sub	r16, r28
    1d38:	1d 0b       	sbc	r17, r29
    1d3a:	40 17       	cp	r20, r16
    1d3c:	51 07       	cpc	r21, r17
    1d3e:	08 f4       	brcc	.+2      	; 0x1d42 <prvWriteBytesToBuffer+0x30>
    1d40:	8a 01       	movw	r16, r20
    1d42:	f6 01       	movw	r30, r12
    1d44:	84 85       	ldd	r24, Z+12	; 0x0c
    1d46:	95 85       	ldd	r25, Z+13	; 0x0d
    1d48:	a8 01       	movw	r20, r16
    1d4a:	b5 01       	movw	r22, r10
    1d4c:	8c 0f       	add	r24, r28
    1d4e:	9d 1f       	adc	r25, r29
    1d50:	0e 94 dd 2a 	call	0x55ba	; 0x55ba <memcpy>
    1d54:	0e 15       	cp	r16, r14
    1d56:	1f 05       	cpc	r17, r15
    1d58:	58 f4       	brcc	.+22     	; 0x1d70 <prvWriteBytesToBuffer+0x5e>
    1d5a:	a7 01       	movw	r20, r14
    1d5c:	40 1b       	sub	r20, r16
    1d5e:	51 0b       	sbc	r21, r17
    1d60:	b5 01       	movw	r22, r10
    1d62:	60 0f       	add	r22, r16
    1d64:	71 1f       	adc	r23, r17
    1d66:	f6 01       	movw	r30, r12
    1d68:	84 85       	ldd	r24, Z+12	; 0x0c
    1d6a:	95 85       	ldd	r25, Z+13	; 0x0d
    1d6c:	0e 94 dd 2a 	call	0x55ba	; 0x55ba <memcpy>
    1d70:	ce 01       	movw	r24, r28
    1d72:	8e 0d       	add	r24, r14
    1d74:	9f 1d       	adc	r25, r15
    1d76:	f6 01       	movw	r30, r12
    1d78:	24 81       	ldd	r18, Z+4	; 0x04
    1d7a:	35 81       	ldd	r19, Z+5	; 0x05
    1d7c:	82 17       	cp	r24, r18
    1d7e:	93 07       	cpc	r25, r19
    1d80:	10 f0       	brcs	.+4      	; 0x1d86 <prvWriteBytesToBuffer+0x74>
    1d82:	82 1b       	sub	r24, r18
    1d84:	93 0b       	sbc	r25, r19
    1d86:	f6 01       	movw	r30, r12
    1d88:	93 83       	std	Z+3, r25	; 0x03
    1d8a:	82 83       	std	Z+2, r24	; 0x02
    1d8c:	c7 01       	movw	r24, r14
    1d8e:	df 91       	pop	r29
    1d90:	cf 91       	pop	r28
    1d92:	1f 91       	pop	r17
    1d94:	0f 91       	pop	r16
    1d96:	ff 90       	pop	r15
    1d98:	ef 90       	pop	r14
    1d9a:	df 90       	pop	r13
    1d9c:	cf 90       	pop	r12
    1d9e:	bf 90       	pop	r11
    1da0:	af 90       	pop	r10
    1da2:	08 95       	ret

00001da4 <prvWriteMessageToBuffer>:
    1da4:	cf 92       	push	r12
    1da6:	df 92       	push	r13
    1da8:	ef 92       	push	r14
    1daa:	ff 92       	push	r15
    1dac:	0f 93       	push	r16
    1dae:	1f 93       	push	r17
    1db0:	cf 93       	push	r28
    1db2:	df 93       	push	r29
    1db4:	1f 92       	push	r1
    1db6:	1f 92       	push	r1
    1db8:	cd b7       	in	r28, 0x3d	; 61
    1dba:	de b7       	in	r29, 0x3e	; 62
    1dbc:	5a 83       	std	Y+2, r21	; 0x02
    1dbe:	49 83       	std	Y+1, r20	; 0x01
    1dc0:	21 15       	cp	r18, r1
    1dc2:	31 05       	cpc	r19, r1
    1dc4:	c9 f0       	breq	.+50     	; 0x1df8 <prvWriteMessageToBuffer+0x54>
    1dc6:	6b 01       	movw	r12, r22
    1dc8:	7c 01       	movw	r14, r24
    1dca:	fc 01       	movw	r30, r24
    1dcc:	86 85       	ldd	r24, Z+14	; 0x0e
    1dce:	80 fd       	sbrc	r24, 0
    1dd0:	08 c0       	rjmp	.+16     	; 0x1de2 <prvWriteMessageToBuffer+0x3e>
    1dd2:	ca 01       	movw	r24, r20
    1dd4:	24 17       	cp	r18, r20
    1dd6:	35 07       	cpc	r19, r21
    1dd8:	08 f4       	brcc	.+2      	; 0x1ddc <prvWriteMessageToBuffer+0x38>
    1dda:	c9 01       	movw	r24, r18
    1ddc:	9a 83       	std	Y+2, r25	; 0x02
    1dde:	89 83       	std	Y+1, r24	; 0x01
    1de0:	11 c0       	rjmp	.+34     	; 0x1e04 <prvWriteMessageToBuffer+0x60>
    1de2:	20 17       	cp	r18, r16
    1de4:	31 07       	cpc	r19, r17
    1de6:	58 f0       	brcs	.+22     	; 0x1dfe <prvWriteMessageToBuffer+0x5a>
    1de8:	42 e0       	ldi	r20, 0x02	; 2
    1dea:	50 e0       	ldi	r21, 0x00	; 0
    1dec:	be 01       	movw	r22, r28
    1dee:	6f 5f       	subi	r22, 0xFF	; 255
    1df0:	7f 4f       	sbci	r23, 0xFF	; 255
    1df2:	c7 01       	movw	r24, r14
    1df4:	8e df       	rcall	.-228    	; 0x1d12 <prvWriteBytesToBuffer>
    1df6:	06 c0       	rjmp	.+12     	; 0x1e04 <prvWriteMessageToBuffer+0x60>
    1df8:	80 e0       	ldi	r24, 0x00	; 0
    1dfa:	90 e0       	ldi	r25, 0x00	; 0
    1dfc:	08 c0       	rjmp	.+16     	; 0x1e0e <prvWriteMessageToBuffer+0x6a>
    1dfe:	80 e0       	ldi	r24, 0x00	; 0
    1e00:	90 e0       	ldi	r25, 0x00	; 0
    1e02:	05 c0       	rjmp	.+10     	; 0x1e0e <prvWriteMessageToBuffer+0x6a>
    1e04:	49 81       	ldd	r20, Y+1	; 0x01
    1e06:	5a 81       	ldd	r21, Y+2	; 0x02
    1e08:	b6 01       	movw	r22, r12
    1e0a:	c7 01       	movw	r24, r14
    1e0c:	82 df       	rcall	.-252    	; 0x1d12 <prvWriteBytesToBuffer>
    1e0e:	0f 90       	pop	r0
    1e10:	0f 90       	pop	r0
    1e12:	df 91       	pop	r29
    1e14:	cf 91       	pop	r28
    1e16:	1f 91       	pop	r17
    1e18:	0f 91       	pop	r16
    1e1a:	ff 90       	pop	r15
    1e1c:	ef 90       	pop	r14
    1e1e:	df 90       	pop	r13
    1e20:	cf 90       	pop	r12
    1e22:	08 95       	ret

00001e24 <prvReadBytesFromBuffer>:
    1e24:	af 92       	push	r10
    1e26:	bf 92       	push	r11
    1e28:	cf 92       	push	r12
    1e2a:	df 92       	push	r13
    1e2c:	ef 92       	push	r14
    1e2e:	ff 92       	push	r15
    1e30:	0f 93       	push	r16
    1e32:	1f 93       	push	r17
    1e34:	cf 93       	push	r28
    1e36:	df 93       	push	r29
    1e38:	7c 01       	movw	r14, r24
    1e3a:	5b 01       	movw	r10, r22
    1e3c:	e9 01       	movw	r28, r18
    1e3e:	42 17       	cp	r20, r18
    1e40:	53 07       	cpc	r21, r19
    1e42:	08 f4       	brcc	.+2      	; 0x1e46 <prvReadBytesFromBuffer+0x22>
    1e44:	ea 01       	movw	r28, r20
    1e46:	20 97       	sbiw	r28, 0x00	; 0
    1e48:	79 f1       	breq	.+94     	; 0x1ea8 <prvReadBytesFromBuffer+0x84>
    1e4a:	f7 01       	movw	r30, r14
    1e4c:	00 81       	ld	r16, Z
    1e4e:	11 81       	ldd	r17, Z+1	; 0x01
    1e50:	c4 80       	ldd	r12, Z+4	; 0x04
    1e52:	d5 80       	ldd	r13, Z+5	; 0x05
    1e54:	c0 1a       	sub	r12, r16
    1e56:	d1 0a       	sbc	r13, r17
    1e58:	cc 15       	cp	r28, r12
    1e5a:	dd 05       	cpc	r29, r13
    1e5c:	08 f4       	brcc	.+2      	; 0x1e60 <prvReadBytesFromBuffer+0x3c>
    1e5e:	6e 01       	movw	r12, r28
    1e60:	f7 01       	movw	r30, r14
    1e62:	64 85       	ldd	r22, Z+12	; 0x0c
    1e64:	75 85       	ldd	r23, Z+13	; 0x0d
    1e66:	60 0f       	add	r22, r16
    1e68:	71 1f       	adc	r23, r17
    1e6a:	a6 01       	movw	r20, r12
    1e6c:	c5 01       	movw	r24, r10
    1e6e:	0e 94 dd 2a 	call	0x55ba	; 0x55ba <memcpy>
    1e72:	cc 16       	cp	r12, r28
    1e74:	dd 06       	cpc	r13, r29
    1e76:	58 f4       	brcc	.+22     	; 0x1e8e <prvReadBytesFromBuffer+0x6a>
    1e78:	ae 01       	movw	r20, r28
    1e7a:	4c 19       	sub	r20, r12
    1e7c:	5d 09       	sbc	r21, r13
    1e7e:	f7 01       	movw	r30, r14
    1e80:	64 85       	ldd	r22, Z+12	; 0x0c
    1e82:	75 85       	ldd	r23, Z+13	; 0x0d
    1e84:	c5 01       	movw	r24, r10
    1e86:	8c 0d       	add	r24, r12
    1e88:	9d 1d       	adc	r25, r13
    1e8a:	0e 94 dd 2a 	call	0x55ba	; 0x55ba <memcpy>
    1e8e:	0c 0f       	add	r16, r28
    1e90:	1d 1f       	adc	r17, r29
    1e92:	f7 01       	movw	r30, r14
    1e94:	84 81       	ldd	r24, Z+4	; 0x04
    1e96:	95 81       	ldd	r25, Z+5	; 0x05
    1e98:	08 17       	cp	r16, r24
    1e9a:	19 07       	cpc	r17, r25
    1e9c:	10 f0       	brcs	.+4      	; 0x1ea2 <prvReadBytesFromBuffer+0x7e>
    1e9e:	08 1b       	sub	r16, r24
    1ea0:	19 0b       	sbc	r17, r25
    1ea2:	f7 01       	movw	r30, r14
    1ea4:	11 83       	std	Z+1, r17	; 0x01
    1ea6:	00 83       	st	Z, r16
    1ea8:	ce 01       	movw	r24, r28
    1eaa:	df 91       	pop	r29
    1eac:	cf 91       	pop	r28
    1eae:	1f 91       	pop	r17
    1eb0:	0f 91       	pop	r16
    1eb2:	ff 90       	pop	r15
    1eb4:	ef 90       	pop	r14
    1eb6:	df 90       	pop	r13
    1eb8:	cf 90       	pop	r12
    1eba:	bf 90       	pop	r11
    1ebc:	af 90       	pop	r10
    1ebe:	08 95       	ret

00001ec0 <xStreamBufferGenericCreate>:
    1ec0:	ef 92       	push	r14
    1ec2:	ff 92       	push	r15
    1ec4:	1f 93       	push	r17
    1ec6:	cf 93       	push	r28
    1ec8:	df 93       	push	r29
    1eca:	eb 01       	movw	r28, r22
    1ecc:	11 e0       	ldi	r17, 0x01	; 1
    1ece:	41 30       	cpi	r20, 0x01	; 1
    1ed0:	09 f0       	breq	.+2      	; 0x1ed4 <xStreamBufferGenericCreate+0x14>
    1ed2:	10 e0       	ldi	r17, 0x00	; 0
    1ed4:	20 97       	sbiw	r28, 0x00	; 0
    1ed6:	11 f4       	brne	.+4      	; 0x1edc <xStreamBufferGenericCreate+0x1c>
    1ed8:	c1 e0       	ldi	r28, 0x01	; 1
    1eda:	d0 e0       	ldi	r29, 0x00	; 0
    1edc:	7c 01       	movw	r14, r24
    1ede:	2f ef       	ldi	r18, 0xFF	; 255
    1ee0:	e2 1a       	sub	r14, r18
    1ee2:	f2 0a       	sbc	r15, r18
    1ee4:	41 96       	adiw	r24, 0x11	; 17
    1ee6:	20 d9       	rcall	.-3520   	; 0x1128 <pvPortMalloc>
    1ee8:	00 97       	sbiw	r24, 0x00	; 0
    1eea:	81 f0       	breq	.+32     	; 0x1f0c <xStreamBufferGenericCreate+0x4c>
    1eec:	20 e1       	ldi	r18, 0x10	; 16
    1eee:	fc 01       	movw	r30, r24
    1ef0:	11 92       	st	Z+, r1
    1ef2:	2a 95       	dec	r18
    1ef4:	e9 f7       	brne	.-6      	; 0x1ef0 <xStreamBufferGenericCreate+0x30>
    1ef6:	9c 01       	movw	r18, r24
    1ef8:	20 5f       	subi	r18, 0xF0	; 240
    1efa:	3f 4f       	sbci	r19, 0xFF	; 255
    1efc:	fc 01       	movw	r30, r24
    1efe:	35 87       	std	Z+13, r19	; 0x0d
    1f00:	24 87       	std	Z+12, r18	; 0x0c
    1f02:	f5 82       	std	Z+5, r15	; 0x05
    1f04:	e4 82       	std	Z+4, r14	; 0x04
    1f06:	d7 83       	std	Z+7, r29	; 0x07
    1f08:	c6 83       	std	Z+6, r28	; 0x06
    1f0a:	16 87       	std	Z+14, r17	; 0x0e
    1f0c:	df 91       	pop	r29
    1f0e:	cf 91       	pop	r28
    1f10:	1f 91       	pop	r17
    1f12:	ff 90       	pop	r15
    1f14:	ef 90       	pop	r14
    1f16:	08 95       	ret

00001f18 <xStreamBufferReset>:
    1f18:	cf 93       	push	r28
    1f1a:	df 93       	push	r29
    1f1c:	fc 01       	movw	r30, r24
    1f1e:	27 85       	ldd	r18, Z+15	; 0x0f
    1f20:	0f b6       	in	r0, 0x3f	; 63
    1f22:	f8 94       	cli
    1f24:	0f 92       	push	r0
    1f26:	80 85       	ldd	r24, Z+8	; 0x08
    1f28:	91 85       	ldd	r25, Z+9	; 0x09
    1f2a:	89 2b       	or	r24, r25
    1f2c:	d1 f4       	brne	.+52     	; 0x1f62 <xStreamBufferReset+0x4a>
    1f2e:	82 85       	ldd	r24, Z+10	; 0x0a
    1f30:	93 85       	ldd	r25, Z+11	; 0x0b
    1f32:	89 2b       	or	r24, r25
    1f34:	c1 f4       	brne	.+48     	; 0x1f66 <xStreamBufferReset+0x4e>
    1f36:	86 85       	ldd	r24, Z+14	; 0x0e
    1f38:	46 81       	ldd	r20, Z+6	; 0x06
    1f3a:	57 81       	ldd	r21, Z+7	; 0x07
    1f3c:	64 81       	ldd	r22, Z+4	; 0x04
    1f3e:	75 81       	ldd	r23, Z+5	; 0x05
    1f40:	a4 85       	ldd	r26, Z+12	; 0x0c
    1f42:	b5 85       	ldd	r27, Z+13	; 0x0d
    1f44:	90 e1       	ldi	r25, 0x10	; 16
    1f46:	ef 01       	movw	r28, r30
    1f48:	19 92       	st	Y+, r1
    1f4a:	9a 95       	dec	r25
    1f4c:	e9 f7       	brne	.-6      	; 0x1f48 <xStreamBufferReset+0x30>
    1f4e:	b5 87       	std	Z+13, r27	; 0x0d
    1f50:	a4 87       	std	Z+12, r26	; 0x0c
    1f52:	75 83       	std	Z+5, r23	; 0x05
    1f54:	64 83       	std	Z+4, r22	; 0x04
    1f56:	57 83       	std	Z+7, r21	; 0x07
    1f58:	46 83       	std	Z+6, r20	; 0x06
    1f5a:	86 87       	std	Z+14, r24	; 0x0e
    1f5c:	27 87       	std	Z+15, r18	; 0x0f
    1f5e:	81 e0       	ldi	r24, 0x01	; 1
    1f60:	03 c0       	rjmp	.+6      	; 0x1f68 <xStreamBufferReset+0x50>
    1f62:	80 e0       	ldi	r24, 0x00	; 0
    1f64:	01 c0       	rjmp	.+2      	; 0x1f68 <xStreamBufferReset+0x50>
    1f66:	80 e0       	ldi	r24, 0x00	; 0
    1f68:	0f 90       	pop	r0
    1f6a:	0f be       	out	0x3f, r0	; 63
    1f6c:	df 91       	pop	r29
    1f6e:	cf 91       	pop	r28
    1f70:	08 95       	ret

00001f72 <xStreamBufferSpacesAvailable>:
    1f72:	fc 01       	movw	r30, r24
    1f74:	24 81       	ldd	r18, Z+4	; 0x04
    1f76:	35 81       	ldd	r19, Z+5	; 0x05
    1f78:	80 81       	ld	r24, Z
    1f7a:	91 81       	ldd	r25, Z+1	; 0x01
    1f7c:	42 81       	ldd	r20, Z+2	; 0x02
    1f7e:	53 81       	ldd	r21, Z+3	; 0x03
    1f80:	82 0f       	add	r24, r18
    1f82:	93 1f       	adc	r25, r19
    1f84:	01 97       	sbiw	r24, 0x01	; 1
    1f86:	84 1b       	sub	r24, r20
    1f88:	95 0b       	sbc	r25, r21
    1f8a:	82 17       	cp	r24, r18
    1f8c:	93 07       	cpc	r25, r19
    1f8e:	10 f0       	brcs	.+4      	; 0x1f94 <xStreamBufferSpacesAvailable+0x22>
    1f90:	82 1b       	sub	r24, r18
    1f92:	93 0b       	sbc	r25, r19
    1f94:	08 95       	ret

00001f96 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void *pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    1f96:	2f 92       	push	r2
    1f98:	3f 92       	push	r3
    1f9a:	4f 92       	push	r4
    1f9c:	5f 92       	push	r5
    1f9e:	6f 92       	push	r6
    1fa0:	7f 92       	push	r7
    1fa2:	8f 92       	push	r8
    1fa4:	9f 92       	push	r9
    1fa6:	af 92       	push	r10
    1fa8:	bf 92       	push	r11
    1faa:	cf 92       	push	r12
    1fac:	df 92       	push	r13
    1fae:	ef 92       	push	r14
    1fb0:	ff 92       	push	r15
    1fb2:	0f 93       	push	r16
    1fb4:	1f 93       	push	r17
    1fb6:	cf 93       	push	r28
    1fb8:	df 93       	push	r29
    1fba:	cd b7       	in	r28, 0x3d	; 61
    1fbc:	de b7       	in	r29, 0x3e	; 62
    1fbe:	29 97       	sbiw	r28, 0x09	; 9
    1fc0:	0f b6       	in	r0, 0x3f	; 63
    1fc2:	f8 94       	cli
    1fc4:	de bf       	out	0x3e, r29	; 62
    1fc6:	0f be       	out	0x3f, r0	; 63
    1fc8:	cd bf       	out	0x3d, r28	; 61
    1fca:	5c 01       	movw	r10, r24
    1fcc:	1b 01       	movw	r2, r22
    1fce:	2a 01       	movw	r4, r20
    1fd0:	0e 83       	std	Y+6, r16	; 0x06
    1fd2:	1f 83       	std	Y+7, r17	; 0x07
    1fd4:	28 87       	std	Y+8, r18	; 0x08
    1fd6:	39 87       	std	Y+9, r19	; 0x09

    /* This send function is used to write to both message buffers and stream
    buffers.  If this is a message buffer then the space needed must be
    increased by the amount of bytes needed to store the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1fd8:	fc 01       	movw	r30, r24
    1fda:	86 85       	ldd	r24, Z+14	; 0x0e
    1fdc:	80 ff       	sbrs	r24, 0
    1fde:	05 c0       	rjmp	.+10     	; 0x1fea <xStreamBufferSend+0x54>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1fe0:	3a 01       	movw	r6, r20
    1fe2:	f2 e0       	ldi	r31, 0x02	; 2
    1fe4:	6f 0e       	add	r6, r31
    1fe6:	71 1c       	adc	r7, r1
    1fe8:	01 c0       	rjmp	.+2      	; 0x1fec <xStreamBufferSend+0x56>
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReturn, xSpace = 0;
size_t xRequiredSpace = xDataLengthBytes;
    1fea:	3a 01       	movw	r6, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    1fec:	8e 81       	ldd	r24, Y+6	; 0x06
    1fee:	9f 81       	ldd	r25, Y+7	; 0x07
    1ff0:	a8 85       	ldd	r26, Y+8	; 0x08
    1ff2:	b9 85       	ldd	r27, Y+9	; 0x09
    1ff4:	89 2b       	or	r24, r25
    1ff6:	8a 2b       	or	r24, r26
    1ff8:	8b 2b       	or	r24, r27
    1ffa:	09 f4       	brne	.+2      	; 0x1ffe <xStreamBufferSend+0x68>
    1ffc:	34 c0       	rjmp	.+104    	; 0x2066 <xStreamBufferSend+0xd0>
    {
        vTaskSetTimeOutState( &xTimeOut );
    1ffe:	ce 01       	movw	r24, r28
    2000:	01 96       	adiw	r24, 0x01	; 1
    2002:	1e d6       	rcall	.+3132   	; 0x2c40 <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
            buffer. */
            taskENTER_CRITICAL();
    2004:	0f b6       	in	r0, 0x3f	; 63
    2006:	f8 94       	cli
    2008:	0f 92       	push	r0
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    200a:	c5 01       	movw	r24, r10
    200c:	b2 df       	rcall	.-156    	; 0x1f72 <xStreamBufferSpacesAvailable>
    200e:	4c 01       	movw	r8, r24

                if( xSpace < xRequiredSpace )
    2010:	86 15       	cp	r24, r6
    2012:	97 05       	cpc	r25, r7
    2014:	18 f5       	brcc	.+70     	; 0x205c <xStreamBufferSend+0xc6>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClear( NULL );
    2016:	80 e0       	ldi	r24, 0x00	; 0
    2018:	90 e0       	ldi	r25, 0x00	; 0
    201a:	0e 94 a6 18 	call	0x314c	; 0x314c <xTaskNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    201e:	90 d6       	rcall	.+3360   	; 0x2d40 <xTaskGetCurrentTaskHandle>
    2020:	f5 01       	movw	r30, r10
    2022:	93 87       	std	Z+11, r25	; 0x0b
    2024:	82 87       	std	Z+10, r24	; 0x0a
                {
                    taskEXIT_CRITICAL();
                    break;
                }
            }
            taskEXIT_CRITICAL();
    2026:	0f 90       	pop	r0
    2028:	0f be       	out	0x3f, r0	; 63

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    202a:	ce 80       	ldd	r12, Y+6	; 0x06
    202c:	df 80       	ldd	r13, Y+7	; 0x07
    202e:	e8 84       	ldd	r14, Y+8	; 0x08
    2030:	f9 84       	ldd	r15, Y+9	; 0x09
    2032:	00 e0       	ldi	r16, 0x00	; 0
    2034:	10 e0       	ldi	r17, 0x00	; 0
    2036:	20 e0       	ldi	r18, 0x00	; 0
    2038:	30 e0       	ldi	r19, 0x00	; 0
    203a:	a9 01       	movw	r20, r18
    203c:	60 e0       	ldi	r22, 0x00	; 0
    203e:	70 e0       	ldi	r23, 0x00	; 0
    2040:	cb 01       	movw	r24, r22
    2042:	f9 d6       	rcall	.+3570   	; 0x2e36 <xTaskNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
    2044:	f5 01       	movw	r30, r10
    2046:	13 86       	std	Z+11, r1	; 0x0b
    2048:	12 86       	std	Z+10, r1	; 0x0a

        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    204a:	be 01       	movw	r22, r28
    204c:	6a 5f       	subi	r22, 0xFA	; 250
    204e:	7f 4f       	sbci	r23, 0xFF	; 255
    2050:	ce 01       	movw	r24, r28
    2052:	01 96       	adiw	r24, 0x01	; 1
    2054:	1c d6       	rcall	.+3128   	; 0x2c8e <xTaskCheckForTimeOut>
    2056:	88 23       	and	r24, r24
    2058:	a9 f2       	breq	.-86     	; 0x2004 <xStreamBufferSend+0x6e>
    205a:	02 c0       	rjmp	.+4      	; 0x2060 <xStreamBufferSend+0xca>
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
                }
                else
                {
                    taskEXIT_CRITICAL();
    205c:	0f 90       	pop	r0
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
    205e:	0f be       	out	0x3f, r0	; 63
    2060:	81 14       	cp	r8, r1
    2062:	91 04       	cpc	r9, r1
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    2064:	19 f4       	brne	.+6      	; 0x206c <xStreamBufferSend+0xd6>
    2066:	c5 01       	movw	r24, r10
    2068:	84 df       	rcall	.-248    	; 0x1f72 <xStreamBufferSpacesAvailable>
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    206a:	4c 01       	movw	r8, r24
    206c:	83 01       	movw	r16, r6
    206e:	94 01       	movw	r18, r8
    2070:	a2 01       	movw	r20, r4
    2072:	b1 01       	movw	r22, r2
    2074:	c5 01       	movw	r24, r10
    2076:	96 de       	rcall	.-724    	; 0x1da4 <prvWriteMessageToBuffer>

    if( xReturn > ( size_t ) 0 )
    2078:	7c 01       	movw	r14, r24
    207a:	89 2b       	or	r24, r25
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    207c:	d9 f0       	breq	.+54     	; 0x20b4 <xStreamBufferSend+0x11e>
    207e:	c5 01       	movw	r24, r10
    2080:	35 de       	rcall	.-918    	; 0x1cec <prvBytesInBuffer>
    2082:	f5 01       	movw	r30, r10
    2084:	26 81       	ldd	r18, Z+6	; 0x06
    2086:	37 81       	ldd	r19, Z+7	; 0x07
    2088:	82 17       	cp	r24, r18
    208a:	93 07       	cpc	r25, r19
        {
            sbSEND_COMPLETED( pxStreamBuffer );
    208c:	98 f0       	brcs	.+38     	; 0x20b4 <xStreamBufferSend+0x11e>
    208e:	0a d3       	rcall	.+1556   	; 0x26a4 <vTaskSuspendAll>
    2090:	f5 01       	movw	r30, r10
    2092:	80 85       	ldd	r24, Z+8	; 0x08
    2094:	91 85       	ldd	r25, Z+9	; 0x09
    2096:	89 2b       	or	r24, r25
    2098:	61 f0       	breq	.+24     	; 0x20b2 <xStreamBufferSend+0x11c>
    209a:	80 85       	ldd	r24, Z+8	; 0x08
    209c:	91 85       	ldd	r25, Z+9	; 0x09
    209e:	00 e0       	ldi	r16, 0x00	; 0
    20a0:	10 e0       	ldi	r17, 0x00	; 0
    20a2:	20 e0       	ldi	r18, 0x00	; 0
    20a4:	40 e0       	ldi	r20, 0x00	; 0
    20a6:	50 e0       	ldi	r21, 0x00	; 0
    20a8:	ba 01       	movw	r22, r20
    20aa:	4f d7       	rcall	.+3742   	; 0x2f4a <xTaskGenericNotify>
    20ac:	f5 01       	movw	r30, r10
    20ae:	11 86       	std	Z+9, r1	; 0x09
    20b0:	10 86       	std	Z+8, r1	; 0x08
    20b2:	e1 d3       	rcall	.+1986   	; 0x2876 <xTaskResumeAll>
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    20b4:	c7 01       	movw	r24, r14
    20b6:	29 96       	adiw	r28, 0x09	; 9
    20b8:	0f b6       	in	r0, 0x3f	; 63
    20ba:	f8 94       	cli
    20bc:	de bf       	out	0x3e, r29	; 62
    20be:	0f be       	out	0x3f, r0	; 63
    20c0:	cd bf       	out	0x3d, r28	; 61
    20c2:	df 91       	pop	r29
    20c4:	cf 91       	pop	r28
    20c6:	1f 91       	pop	r17
    20c8:	0f 91       	pop	r16
    20ca:	ff 90       	pop	r15
    20cc:	ef 90       	pop	r14
    20ce:	df 90       	pop	r13
    20d0:	cf 90       	pop	r12
    20d2:	bf 90       	pop	r11
    20d4:	af 90       	pop	r10
    20d6:	9f 90       	pop	r9
    20d8:	8f 90       	pop	r8
    20da:	7f 90       	pop	r7
    20dc:	6f 90       	pop	r6
    20de:	5f 90       	pop	r5
    20e0:	4f 90       	pop	r4
    20e2:	3f 90       	pop	r3
    20e4:	2f 90       	pop	r2
    20e6:	08 95       	ret

000020e8 <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void *pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    20e8:	af 92       	push	r10
    20ea:	bf 92       	push	r11
    20ec:	cf 92       	push	r12
    20ee:	df 92       	push	r13
    20f0:	ef 92       	push	r14
    20f2:	ff 92       	push	r15
    20f4:	0f 93       	push	r16
    20f6:	1f 93       	push	r17
    20f8:	cf 93       	push	r28
    20fa:	df 93       	push	r29
    20fc:	ec 01       	movw	r28, r24
    20fe:	5b 01       	movw	r10, r22
    2100:	6a 01       	movw	r12, r20
    2102:	79 01       	movw	r14, r18

    /* This send function is used to write to both message buffers and stream
    buffers.  If this is a message buffer then the space needed must be
    increased by the amount of bytes needed to store the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    2104:	8e 85       	ldd	r24, Y+14	; 0x0e
    2106:	80 ff       	sbrs	r24, 0
    2108:	04 c0       	rjmp	.+8      	; 0x2112 <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    210a:	8a 01       	movw	r16, r20
    210c:	0e 5f       	subi	r16, 0xFE	; 254
    210e:	1f 4f       	sbci	r17, 0xFF	; 255
    2110:	01 c0       	rjmp	.+2      	; 0x2114 <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReturn, xSpace;
size_t xRequiredSpace = xDataLengthBytes;
    2112:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    2114:	ce 01       	movw	r24, r28
    2116:	2d df       	rcall	.-422    	; 0x1f72 <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    2118:	9c 01       	movw	r18, r24
    211a:	a6 01       	movw	r20, r12
    211c:	b5 01       	movw	r22, r10
    211e:	ce 01       	movw	r24, r28
    2120:	41 de       	rcall	.-894    	; 0x1da4 <prvWriteMessageToBuffer>
    2122:	6c 01       	movw	r12, r24

    if( xReturn > ( size_t ) 0 )
    2124:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    2126:	b1 f0       	breq	.+44     	; 0x2154 <xStreamBufferSendFromISR+0x6c>
    2128:	ce 01       	movw	r24, r28
    212a:	e0 dd       	rcall	.-1088   	; 0x1cec <prvBytesInBuffer>
    212c:	2e 81       	ldd	r18, Y+6	; 0x06
    212e:	3f 81       	ldd	r19, Y+7	; 0x07
    2130:	82 17       	cp	r24, r18
    2132:	93 07       	cpc	r25, r19
    2134:	78 f0       	brcs	.+30     	; 0x2154 <xStreamBufferSendFromISR+0x6c>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    2136:	88 85       	ldd	r24, Y+8	; 0x08
    2138:	99 85       	ldd	r25, Y+9	; 0x09
    213a:	89 2b       	or	r24, r25
    213c:	59 f0       	breq	.+22     	; 0x2154 <xStreamBufferSendFromISR+0x6c>
    213e:	88 85       	ldd	r24, Y+8	; 0x08
    2140:	99 85       	ldd	r25, Y+9	; 0x09
    2142:	00 e0       	ldi	r16, 0x00	; 0
    2144:	10 e0       	ldi	r17, 0x00	; 0
    2146:	20 e0       	ldi	r18, 0x00	; 0
    2148:	40 e0       	ldi	r20, 0x00	; 0
    214a:	50 e0       	ldi	r21, 0x00	; 0
    214c:	ba 01       	movw	r22, r20
    214e:	75 d7       	rcall	.+3818   	; 0x303a <xTaskGenericNotifyFromISR>
    2150:	19 86       	std	Y+9, r1	; 0x09
    2152:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    2154:	c6 01       	movw	r24, r12
    2156:	df 91       	pop	r29
    2158:	cf 91       	pop	r28
    215a:	1f 91       	pop	r17
    215c:	0f 91       	pop	r16
    215e:	ff 90       	pop	r15
    2160:	ef 90       	pop	r14
    2162:	df 90       	pop	r13
    2164:	cf 90       	pop	r12
    2166:	bf 90       	pop	r11
    2168:	af 90       	pop	r10
    216a:	08 95       	ret

0000216c <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void *pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    216c:	4f 92       	push	r4
    216e:	5f 92       	push	r5
    2170:	6f 92       	push	r6
    2172:	7f 92       	push	r7
    2174:	8f 92       	push	r8
    2176:	9f 92       	push	r9
    2178:	af 92       	push	r10
    217a:	bf 92       	push	r11
    217c:	cf 92       	push	r12
    217e:	df 92       	push	r13
    2180:	ef 92       	push	r14
    2182:	ff 92       	push	r15
    2184:	0f 93       	push	r16
    2186:	1f 93       	push	r17
    2188:	cf 93       	push	r28
    218a:	df 93       	push	r29
    218c:	1f 92       	push	r1
    218e:	1f 92       	push	r1
    2190:	cd b7       	in	r28, 0x3d	; 61
    2192:	de b7       	in	r29, 0x3e	; 62
    2194:	5c 01       	movw	r10, r24
    2196:	2b 01       	movw	r4, r22
    2198:	3a 01       	movw	r6, r20
    219a:	68 01       	movw	r12, r16
    219c:	79 01       	movw	r14, r18
    /* This receive function is used by both message buffers, which store
    discrete messages, and stream buffers, which store a continuous stream of
    bytes.  Discrete messages include an additional
    sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    219e:	fc 01       	movw	r30, r24
    21a0:	86 85       	ldd	r24, Z+14	; 0x0e
    21a2:	80 fd       	sbrc	r24, 0
    21a4:	03 c0       	rjmp	.+6      	; 0x21ac <xStreamBufferReceive+0x40>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    21a6:	81 2c       	mov	r8, r1
    21a8:	91 2c       	mov	r9, r1
    21aa:	04 c0       	rjmp	.+8      	; 0x21b4 <xStreamBufferReceive+0x48>
    bytes.  Discrete messages include an additional
    sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    21ac:	68 94       	set
    21ae:	88 24       	eor	r8, r8
    21b0:	81 f8       	bld	r8, 1
    21b2:	91 2c       	mov	r9, r1
    else
    {
        xBytesToStoreMessageLength = 0;
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    21b4:	c1 14       	cp	r12, r1
    21b6:	d1 04       	cpc	r13, r1
    21b8:	e1 04       	cpc	r14, r1
    21ba:	f1 04       	cpc	r15, r1
    21bc:	29 f1       	breq	.+74     	; 0x2208 <__stack+0x9>
    {
        /* Checking if there is data and clearing the notification state must be
        performed atomically. */
        taskENTER_CRITICAL();
    21be:	0f b6       	in	r0, 0x3f	; 63
    21c0:	f8 94       	cli
    21c2:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    21c4:	c5 01       	movw	r24, r10
    21c6:	92 dd       	rcall	.-1244   	; 0x1cec <prvBytesInBuffer>
    21c8:	8c 01       	movw	r16, r24
            /* If this function was invoked by a message buffer read then
            xBytesToStoreMessageLength holds the number of bytes used to hold
            the length of the next discrete message.  If this function was
            invoked by a stream buffer read then xBytesToStoreMessageLength will
            be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    21ca:	88 16       	cp	r8, r24
    21cc:	99 06       	cpc	r9, r25
    21ce:	38 f0       	brcs	.+14     	; 0x21de <xStreamBufferReceive+0x72>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    21d0:	80 e0       	ldi	r24, 0x00	; 0
    21d2:	90 e0       	ldi	r25, 0x00	; 0

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    21d4:	bb d7       	rcall	.+3958   	; 0x314c <xTaskNotifyStateClear>
    21d6:	b4 d5       	rcall	.+2920   	; 0x2d40 <xTaskGetCurrentTaskHandle>
    21d8:	f5 01       	movw	r30, r10
    21da:	91 87       	std	Z+9, r25	; 0x09
    21dc:	80 87       	std	Z+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    21de:	0f 90       	pop	r0
    21e0:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    21e2:	80 16       	cp	r8, r16
    21e4:	91 06       	cpc	r9, r17
    21e6:	b0 f0       	brcs	.+44     	; 0x2214 <__stack+0x15>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    21e8:	00 e0       	ldi	r16, 0x00	; 0
    21ea:	10 e0       	ldi	r17, 0x00	; 0
    21ec:	20 e0       	ldi	r18, 0x00	; 0
    21ee:	30 e0       	ldi	r19, 0x00	; 0
    21f0:	a9 01       	movw	r20, r18
    21f2:	60 e0       	ldi	r22, 0x00	; 0
    21f4:	70 e0       	ldi	r23, 0x00	; 0
    21f6:	cb 01       	movw	r24, r22
    21f8:	1e d6       	rcall	.+3132   	; 0x2e36 <xTaskNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    21fa:	f5 01       	movw	r30, r10
    21fc:	11 86       	std	Z+9, r1	; 0x09

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    21fe:	10 86       	std	Z+8, r1	; 0x08
    2200:	c5 01       	movw	r24, r10
    2202:	74 dd       	rcall	.-1304   	; 0x1cec <prvBytesInBuffer>
    2204:	8c 01       	movw	r16, r24
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    2206:	03 c0       	rjmp	.+6      	; 0x220e <__stack+0xf>
    2208:	c5 01       	movw	r24, r10
    220a:	70 dd       	rcall	.-1312   	; 0x1cec <prvBytesInBuffer>
    220c:	8c 01       	movw	r16, r24
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
    holds the number of bytes used to store the message length) or a stream of
    bytes (where xBytesToStoreMessageLength is zero), the number of bytes
    available must be greater than xBytesToStoreMessageLength to be able to
    read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    220e:	80 16       	cp	r8, r16
    2210:	91 06       	cpc	r9, r17
    2212:	b8 f5       	brcc	.+110    	; 0x2282 <__stack+0x83>
                                        size_t xBytesToStoreMessageLength )
{
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

    if( xBytesToStoreMessageLength != ( size_t ) 0 )
    2214:	81 14       	cp	r8, r1
    2216:	91 04       	cpc	r9, r1
    2218:	c1 f0       	breq	.+48     	; 0x224a <__stack+0x4b>
    {
        /* A discrete message is being received.  First receive the length
        of the message.  A copy of the tail is stored so the buffer can be
        returned to its prior state if the length of the message is too
        large for the provided buffer. */
        xOriginalTail = pxStreamBuffer->xTail;
    221a:	f5 01       	movw	r30, r10
    221c:	e0 80       	ld	r14, Z
    221e:	f1 80       	ldd	r15, Z+1	; 0x01
        ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
    2220:	98 01       	movw	r18, r16
    2222:	a4 01       	movw	r20, r8
    2224:	be 01       	movw	r22, r28
    2226:	6f 5f       	subi	r22, 0xFF	; 255
    2228:	7f 4f       	sbci	r23, 0xFF	; 255
    222a:	c5 01       	movw	r24, r10
    222c:	fb dd       	rcall	.-1034   	; 0x1e24 <prvReadBytesFromBuffer>
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
    222e:	89 81       	ldd	r24, Y+1	; 0x01
    2230:	9a 81       	ldd	r25, Y+2	; 0x02

        /* Reduce the number of bytes available by the number of bytes just
        read out. */
        xBytesAvailable -= xBytesToStoreMessageLength;
    2232:	08 19       	sub	r16, r8
    2234:	19 09       	sbc	r17, r9

        /* Check there is enough space in the buffer provided by the
        user. */
        if( xNextMessageLength > xBufferLengthBytes )
    2236:	68 16       	cp	r6, r24
    2238:	79 06       	cpc	r7, r25
    223a:	30 f4       	brcc	.+12     	; 0x2248 <__stack+0x49>
        {
            /* The user has provided insufficient space to read the message
            so return the buffer to its previous state (so the length of
            the message is in the buffer again). */
            pxStreamBuffer->xTail = xOriginalTail;
    223c:	f5 01       	movw	r30, r10
    223e:	f1 82       	std	Z+1, r15	; 0x01
    2240:	e0 82       	st	Z, r14
            xNextMessageLength = 0;
    2242:	61 2c       	mov	r6, r1
    2244:	71 2c       	mov	r7, r1
        of the message.  A copy of the tail is stored so the buffer can be
        returned to its prior state if the length of the message is too
        large for the provided buffer. */
        xOriginalTail = pxStreamBuffer->xTail;
        ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
    2246:	01 c0       	rjmp	.+2      	; 0x224a <__stack+0x4b>
        message), so read as many bytes as possible. */
        xNextMessageLength = xBufferLengthBytes;
    }

    /* Read the actual data. */
    xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
    2248:	3c 01       	movw	r6, r24
    224a:	98 01       	movw	r18, r16
    224c:	a3 01       	movw	r20, r6
    224e:	b2 01       	movw	r22, r4
    2250:	c5 01       	movw	r24, r10
    2252:	e8 dd       	rcall	.-1072   	; 0x1e24 <prvReadBytesFromBuffer>
    if( xBytesAvailable > xBytesToStoreMessageLength )
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    2254:	7c 01       	movw	r14, r24
    2256:	89 2b       	or	r24, r25
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    2258:	b1 f0       	breq	.+44     	; 0x2286 <__stack+0x87>
    225a:	24 d2       	rcall	.+1096   	; 0x26a4 <vTaskSuspendAll>
    225c:	f5 01       	movw	r30, r10
    225e:	82 85       	ldd	r24, Z+10	; 0x0a
    2260:	93 85       	ldd	r25, Z+11	; 0x0b
    2262:	89 2b       	or	r24, r25
    2264:	61 f0       	breq	.+24     	; 0x227e <__stack+0x7f>
    2266:	82 85       	ldd	r24, Z+10	; 0x0a
    2268:	93 85       	ldd	r25, Z+11	; 0x0b
    226a:	00 e0       	ldi	r16, 0x00	; 0
    226c:	10 e0       	ldi	r17, 0x00	; 0
    226e:	20 e0       	ldi	r18, 0x00	; 0
    2270:	40 e0       	ldi	r20, 0x00	; 0
    2272:	50 e0       	ldi	r21, 0x00	; 0
    2274:	ba 01       	movw	r22, r20
    2276:	69 d6       	rcall	.+3282   	; 0x2f4a <xTaskGenericNotify>
    2278:	f5 01       	movw	r30, r10
    227a:	13 86       	std	Z+11, r1	; 0x0b
    227c:	12 86       	std	Z+10, r1	; 0x0a
    227e:	fb d2       	rcall	.+1526   	; 0x2876 <xTaskResumeAll>
    2280:	02 c0       	rjmp	.+4      	; 0x2286 <__stack+0x87>
                             void *pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    2282:	e1 2c       	mov	r14, r1
    2284:	f1 2c       	mov	r15, r1
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    2286:	c7 01       	movw	r24, r14
    2288:	0f 90       	pop	r0
    228a:	0f 90       	pop	r0
    228c:	df 91       	pop	r29
    228e:	cf 91       	pop	r28
    2290:	1f 91       	pop	r17
    2292:	0f 91       	pop	r16
    2294:	ff 90       	pop	r15
    2296:	ef 90       	pop	r14
    2298:	df 90       	pop	r13
    229a:	cf 90       	pop	r12
    229c:	bf 90       	pop	r11
    229e:	af 90       	pop	r10
    22a0:	9f 90       	pop	r9
    22a2:	8f 90       	pop	r8
    22a4:	7f 90       	pop	r7
    22a6:	6f 90       	pop	r6
    22a8:	5f 90       	pop	r5
    22aa:	4f 90       	pop	r4
    22ac:	08 95       	ret

000022ae <prvResetNextTaskUnblockTime>:
    22ae:	e0 91 f2 17 	lds	r30, 0x17F2	; 0x8017f2 <pxDelayedTaskList>
    22b2:	f0 91 f3 17 	lds	r31, 0x17F3	; 0x8017f3 <pxDelayedTaskList+0x1>
    22b6:	80 81       	ld	r24, Z
    22b8:	81 11       	cpse	r24, r1
    22ba:	0c c0       	rjmp	.+24     	; 0x22d4 <prvResetNextTaskUnblockTime+0x26>
    22bc:	8f ef       	ldi	r24, 0xFF	; 255
    22be:	9f ef       	ldi	r25, 0xFF	; 255
    22c0:	dc 01       	movw	r26, r24
    22c2:	80 93 bf 17 	sts	0x17BF, r24	; 0x8017bf <xNextTaskUnblockTime>
    22c6:	90 93 c0 17 	sts	0x17C0, r25	; 0x8017c0 <xNextTaskUnblockTime+0x1>
    22ca:	a0 93 c1 17 	sts	0x17C1, r26	; 0x8017c1 <xNextTaskUnblockTime+0x2>
    22ce:	b0 93 c2 17 	sts	0x17C2, r27	; 0x8017c2 <xNextTaskUnblockTime+0x3>
    22d2:	08 95       	ret
    22d4:	e0 91 f2 17 	lds	r30, 0x17F2	; 0x8017f2 <pxDelayedTaskList>
    22d8:	f0 91 f3 17 	lds	r31, 0x17F3	; 0x8017f3 <pxDelayedTaskList+0x1>
    22dc:	07 80       	ldd	r0, Z+7	; 0x07
    22de:	f0 85       	ldd	r31, Z+8	; 0x08
    22e0:	e0 2d       	mov	r30, r0
    22e2:	00 84       	ldd	r0, Z+8	; 0x08
    22e4:	f1 85       	ldd	r31, Z+9	; 0x09
    22e6:	e0 2d       	mov	r30, r0
    22e8:	82 81       	ldd	r24, Z+2	; 0x02
    22ea:	93 81       	ldd	r25, Z+3	; 0x03
    22ec:	a4 81       	ldd	r26, Z+4	; 0x04
    22ee:	b5 81       	ldd	r27, Z+5	; 0x05
    22f0:	80 93 bf 17 	sts	0x17BF, r24	; 0x8017bf <xNextTaskUnblockTime>
    22f4:	90 93 c0 17 	sts	0x17C0, r25	; 0x8017c0 <xNextTaskUnblockTime+0x1>
    22f8:	a0 93 c1 17 	sts	0x17C1, r26	; 0x8017c1 <xNextTaskUnblockTime+0x2>
    22fc:	b0 93 c2 17 	sts	0x17C2, r27	; 0x8017c2 <xNextTaskUnblockTime+0x3>
    2300:	08 95       	ret

00002302 <prvAddCurrentTaskToDelayedList>:
    2302:	8f 92       	push	r8
    2304:	9f 92       	push	r9
    2306:	af 92       	push	r10
    2308:	bf 92       	push	r11
    230a:	cf 92       	push	r12
    230c:	df 92       	push	r13
    230e:	ef 92       	push	r14
    2310:	ff 92       	push	r15
    2312:	cf 93       	push	r28
    2314:	6b 01       	movw	r12, r22
    2316:	7c 01       	movw	r14, r24
    2318:	c4 2f       	mov	r28, r20
    231a:	80 90 c9 17 	lds	r8, 0x17C9	; 0x8017c9 <xTickCount>
    231e:	90 90 ca 17 	lds	r9, 0x17CA	; 0x8017ca <xTickCount+0x1>
    2322:	a0 90 cb 17 	lds	r10, 0x17CB	; 0x8017cb <xTickCount+0x2>
    2326:	b0 90 cc 17 	lds	r11, 0x17CC	; 0x8017cc <xTickCount+0x3>
    232a:	80 91 36 18 	lds	r24, 0x1836	; 0x801836 <pxCurrentTCB>
    232e:	90 91 37 18 	lds	r25, 0x1837	; 0x801837 <pxCurrentTCB+0x1>
    2332:	02 96       	adiw	r24, 0x02	; 2
    2334:	56 d8       	rcall	.-3924   	; 0x13e2 <uxListRemove>
    2336:	8f ef       	ldi	r24, 0xFF	; 255
    2338:	c8 16       	cp	r12, r24
    233a:	d8 06       	cpc	r13, r24
    233c:	e8 06       	cpc	r14, r24
    233e:	f8 06       	cpc	r15, r24
    2340:	69 f4       	brne	.+26     	; 0x235c <prvAddCurrentTaskToDelayedList+0x5a>
    2342:	cc 23       	and	r28, r28
    2344:	59 f0       	breq	.+22     	; 0x235c <prvAddCurrentTaskToDelayedList+0x5a>
    2346:	60 91 36 18 	lds	r22, 0x1836	; 0x801836 <pxCurrentTCB>
    234a:	70 91 37 18 	lds	r23, 0x1837	; 0x801837 <pxCurrentTCB+0x1>
    234e:	6e 5f       	subi	r22, 0xFE	; 254
    2350:	7f 4f       	sbci	r23, 0xFF	; 255
    2352:	8e ec       	ldi	r24, 0xCE	; 206
    2354:	97 e1       	ldi	r25, 0x17	; 23
    2356:	0e 94 93 09 	call	0x1326	; 0x1326 <vListInsertEnd>
    235a:	3f c0       	rjmp	.+126    	; 0x23da <prvAddCurrentTaskToDelayedList+0xd8>
    235c:	c8 0c       	add	r12, r8
    235e:	d9 1c       	adc	r13, r9
    2360:	ea 1c       	adc	r14, r10
    2362:	fb 1c       	adc	r15, r11
    2364:	e0 91 36 18 	lds	r30, 0x1836	; 0x801836 <pxCurrentTCB>
    2368:	f0 91 37 18 	lds	r31, 0x1837	; 0x801837 <pxCurrentTCB+0x1>
    236c:	c2 82       	std	Z+2, r12	; 0x02
    236e:	d3 82       	std	Z+3, r13	; 0x03
    2370:	e4 82       	std	Z+4, r14	; 0x04
    2372:	f5 82       	std	Z+5, r15	; 0x05
    2374:	c8 14       	cp	r12, r8
    2376:	d9 04       	cpc	r13, r9
    2378:	ea 04       	cpc	r14, r10
    237a:	fb 04       	cpc	r15, r11
    237c:	68 f4       	brcc	.+26     	; 0x2398 <prvAddCurrentTaskToDelayedList+0x96>
    237e:	60 91 36 18 	lds	r22, 0x1836	; 0x801836 <pxCurrentTCB>
    2382:	70 91 37 18 	lds	r23, 0x1837	; 0x801837 <pxCurrentTCB+0x1>
    2386:	80 91 f0 17 	lds	r24, 0x17F0	; 0x8017f0 <pxOverflowDelayedTaskList>
    238a:	90 91 f1 17 	lds	r25, 0x17F1	; 0x8017f1 <pxOverflowDelayedTaskList+0x1>
    238e:	6e 5f       	subi	r22, 0xFE	; 254
    2390:	7f 4f       	sbci	r23, 0xFF	; 255
    2392:	0e 94 b4 09 	call	0x1368	; 0x1368 <vListInsert>
    2396:	21 c0       	rjmp	.+66     	; 0x23da <prvAddCurrentTaskToDelayedList+0xd8>
    2398:	60 91 36 18 	lds	r22, 0x1836	; 0x801836 <pxCurrentTCB>
    239c:	70 91 37 18 	lds	r23, 0x1837	; 0x801837 <pxCurrentTCB+0x1>
    23a0:	80 91 f2 17 	lds	r24, 0x17F2	; 0x8017f2 <pxDelayedTaskList>
    23a4:	90 91 f3 17 	lds	r25, 0x17F3	; 0x8017f3 <pxDelayedTaskList+0x1>
    23a8:	6e 5f       	subi	r22, 0xFE	; 254
    23aa:	7f 4f       	sbci	r23, 0xFF	; 255
    23ac:	0e 94 b4 09 	call	0x1368	; 0x1368 <vListInsert>
    23b0:	80 91 bf 17 	lds	r24, 0x17BF	; 0x8017bf <xNextTaskUnblockTime>
    23b4:	90 91 c0 17 	lds	r25, 0x17C0	; 0x8017c0 <xNextTaskUnblockTime+0x1>
    23b8:	a0 91 c1 17 	lds	r26, 0x17C1	; 0x8017c1 <xNextTaskUnblockTime+0x2>
    23bc:	b0 91 c2 17 	lds	r27, 0x17C2	; 0x8017c2 <xNextTaskUnblockTime+0x3>
    23c0:	c8 16       	cp	r12, r24
    23c2:	d9 06       	cpc	r13, r25
    23c4:	ea 06       	cpc	r14, r26
    23c6:	fb 06       	cpc	r15, r27
    23c8:	40 f4       	brcc	.+16     	; 0x23da <prvAddCurrentTaskToDelayedList+0xd8>
    23ca:	c0 92 bf 17 	sts	0x17BF, r12	; 0x8017bf <xNextTaskUnblockTime>
    23ce:	d0 92 c0 17 	sts	0x17C0, r13	; 0x8017c0 <xNextTaskUnblockTime+0x1>
    23d2:	e0 92 c1 17 	sts	0x17C1, r14	; 0x8017c1 <xNextTaskUnblockTime+0x2>
    23d6:	f0 92 c2 17 	sts	0x17C2, r15	; 0x8017c2 <xNextTaskUnblockTime+0x3>
    23da:	cf 91       	pop	r28
    23dc:	ff 90       	pop	r15
    23de:	ef 90       	pop	r14
    23e0:	df 90       	pop	r13
    23e2:	cf 90       	pop	r12
    23e4:	bf 90       	pop	r11
    23e6:	af 90       	pop	r10
    23e8:	9f 90       	pop	r9
    23ea:	8f 90       	pop	r8
    23ec:	08 95       	ret

000023ee <xTaskCreate>:
    23ee:	4f 92       	push	r4
    23f0:	5f 92       	push	r5
    23f2:	6f 92       	push	r6
    23f4:	7f 92       	push	r7
    23f6:	8f 92       	push	r8
    23f8:	9f 92       	push	r9
    23fa:	af 92       	push	r10
    23fc:	bf 92       	push	r11
    23fe:	cf 92       	push	r12
    2400:	df 92       	push	r13
    2402:	ef 92       	push	r14
    2404:	ff 92       	push	r15
    2406:	0f 93       	push	r16
    2408:	cf 93       	push	r28
    240a:	df 93       	push	r29
    240c:	4c 01       	movw	r8, r24
    240e:	6b 01       	movw	r12, r22
    2410:	5a 01       	movw	r10, r20
    2412:	29 01       	movw	r4, r18
    2414:	ca 01       	movw	r24, r20
    2416:	0e 94 94 08 	call	0x1128	; 0x1128 <pvPortMalloc>
    241a:	3c 01       	movw	r6, r24
    241c:	89 2b       	or	r24, r25
    241e:	09 f4       	brne	.+2      	; 0x2422 <xTaskCreate+0x34>
    2420:	f4 c0       	rjmp	.+488    	; 0x260a <xTaskCreate+0x21c>
    2422:	80 e3       	ldi	r24, 0x30	; 48
    2424:	90 e0       	ldi	r25, 0x00	; 0
    2426:	0e 94 94 08 	call	0x1128	; 0x1128 <pvPortMalloc>
    242a:	ec 01       	movw	r28, r24
    242c:	89 2b       	or	r24, r25
    242e:	99 f0       	breq	.+38     	; 0x2456 <xTaskCreate+0x68>
    2430:	7c 8e       	std	Y+28, r7	; 0x1c
    2432:	6b 8e       	std	Y+27, r6	; 0x1b
    2434:	a5 01       	movw	r20, r10
    2436:	65 ea       	ldi	r22, 0xA5	; 165
    2438:	70 e0       	ldi	r23, 0x00	; 0
    243a:	c3 01       	movw	r24, r6
    243c:	0e 94 e6 2a 	call	0x55cc	; 0x55cc <memset>
    2440:	21 e0       	ldi	r18, 0x01	; 1
    2442:	a2 1a       	sub	r10, r18
    2444:	b1 08       	sbc	r11, r1
    2446:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2448:	9c 8d       	ldd	r25, Y+28	; 0x1c
    244a:	a8 0e       	add	r10, r24
    244c:	b9 1e       	adc	r11, r25
    244e:	c1 14       	cp	r12, r1
    2450:	d1 04       	cpc	r13, r1
    2452:	29 f4       	brne	.+10     	; 0x245e <xTaskCreate+0x70>
    2454:	20 c0       	rjmp	.+64     	; 0x2496 <xTaskCreate+0xa8>
    2456:	c3 01       	movw	r24, r6
    2458:	0e 94 4d 09 	call	0x129a	; 0x129a <vPortFree>
    245c:	d6 c0       	rjmp	.+428    	; 0x260a <xTaskCreate+0x21c>
    245e:	d6 01       	movw	r26, r12
    2460:	8c 91       	ld	r24, X
    2462:	8d 8f       	std	Y+29, r24	; 0x1d
    2464:	8c 91       	ld	r24, X
    2466:	88 23       	and	r24, r24
    2468:	a1 f0       	breq	.+40     	; 0x2492 <xTaskCreate+0xa4>
    246a:	ae 01       	movw	r20, r28
    246c:	42 5e       	subi	r20, 0xE2	; 226
    246e:	5f 4f       	sbci	r21, 0xFF	; 255
    2470:	f6 01       	movw	r30, r12
    2472:	31 96       	adiw	r30, 0x01	; 1
    2474:	b8 e0       	ldi	r27, 0x08	; 8
    2476:	cb 0e       	add	r12, r27
    2478:	d1 1c       	adc	r13, r1
    247a:	cf 01       	movw	r24, r30
    247c:	21 91       	ld	r18, Z+
    247e:	da 01       	movw	r26, r20
    2480:	2d 93       	st	X+, r18
    2482:	ad 01       	movw	r20, r26
    2484:	dc 01       	movw	r26, r24
    2486:	8c 91       	ld	r24, X
    2488:	88 23       	and	r24, r24
    248a:	19 f0       	breq	.+6      	; 0x2492 <xTaskCreate+0xa4>
    248c:	ec 15       	cp	r30, r12
    248e:	fd 05       	cpc	r31, r13
    2490:	a1 f7       	brne	.-24     	; 0x247a <xTaskCreate+0x8c>
    2492:	1c a2       	std	Y+36, r1	; 0x24
    2494:	01 c0       	rjmp	.+2      	; 0x2498 <xTaskCreate+0xaa>
    2496:	1d 8e       	std	Y+29, r1	; 0x1d
    2498:	04 30       	cpi	r16, 0x04	; 4
    249a:	08 f0       	brcs	.+2      	; 0x249e <xTaskCreate+0xb0>
    249c:	03 e0       	ldi	r16, 0x03	; 3
    249e:	0a 8f       	std	Y+26, r16	; 0x1a
    24a0:	0f a3       	std	Y+39, r16	; 0x27
    24a2:	18 a6       	std	Y+40, r1	; 0x28
    24a4:	6e 01       	movw	r12, r28
    24a6:	b2 e0       	ldi	r27, 0x02	; 2
    24a8:	cb 0e       	add	r12, r27
    24aa:	d1 1c       	adc	r13, r1
    24ac:	c6 01       	movw	r24, r12
    24ae:	0e 94 8f 09 	call	0x131e	; 0x131e <vListInitialiseItem>
    24b2:	ce 01       	movw	r24, r28
    24b4:	0e 96       	adiw	r24, 0x0e	; 14
    24b6:	0e 94 8f 09 	call	0x131e	; 0x131e <vListInitialiseItem>
    24ba:	db 87       	std	Y+11, r29	; 0x0b
    24bc:	ca 87       	std	Y+10, r28	; 0x0a
    24be:	84 e0       	ldi	r24, 0x04	; 4
    24c0:	90 e0       	ldi	r25, 0x00	; 0
    24c2:	a0 e0       	ldi	r26, 0x00	; 0
    24c4:	b0 e0       	ldi	r27, 0x00	; 0
    24c6:	80 1b       	sub	r24, r16
    24c8:	91 09       	sbc	r25, r1
    24ca:	a1 09       	sbc	r26, r1
    24cc:	b1 09       	sbc	r27, r1
    24ce:	8e 87       	std	Y+14, r24	; 0x0e
    24d0:	9f 87       	std	Y+15, r25	; 0x0f
    24d2:	a8 8b       	std	Y+16, r26	; 0x10
    24d4:	b9 8b       	std	Y+17, r27	; 0x11
    24d6:	df 8b       	std	Y+23, r29	; 0x17
    24d8:	ce 8b       	std	Y+22, r28	; 0x16
    24da:	1a a6       	std	Y+42, r1	; 0x2a
    24dc:	19 a6       	std	Y+41, r1	; 0x29
    24de:	1b a6       	std	Y+43, r1	; 0x2b
    24e0:	1c a6       	std	Y+44, r1	; 0x2c
    24e2:	1d a6       	std	Y+45, r1	; 0x2d
    24e4:	1e a6       	std	Y+46, r1	; 0x2e
    24e6:	1f a6       	std	Y+47, r1	; 0x2f
    24e8:	a2 01       	movw	r20, r4
    24ea:	b4 01       	movw	r22, r8
    24ec:	c5 01       	movw	r24, r10
    24ee:	0e 94 18 0a 	call	0x1430	; 0x1430 <pxPortInitialiseStack>
    24f2:	99 83       	std	Y+1, r25	; 0x01
    24f4:	88 83       	st	Y, r24
    24f6:	e1 14       	cp	r14, r1
    24f8:	f1 04       	cpc	r15, r1
    24fa:	19 f0       	breq	.+6      	; 0x2502 <xTaskCreate+0x114>
    24fc:	f7 01       	movw	r30, r14
    24fe:	d1 83       	std	Z+1, r29	; 0x01
    2500:	c0 83       	st	Z, r28
    2502:	0f b6       	in	r0, 0x3f	; 63
    2504:	f8 94       	cli
    2506:	0f 92       	push	r0
    2508:	80 91 cd 17 	lds	r24, 0x17CD	; 0x8017cd <uxCurrentNumberOfTasks>
    250c:	8f 5f       	subi	r24, 0xFF	; 255
    250e:	80 93 cd 17 	sts	0x17CD, r24	; 0x8017cd <uxCurrentNumberOfTasks>
    2512:	80 91 36 18 	lds	r24, 0x1836	; 0x801836 <pxCurrentTCB>
    2516:	90 91 37 18 	lds	r25, 0x1837	; 0x801837 <pxCurrentTCB+0x1>
    251a:	89 2b       	or	r24, r25
    251c:	d1 f5       	brne	.+116    	; 0x2592 <xTaskCreate+0x1a4>
    251e:	d0 93 37 18 	sts	0x1837, r29	; 0x801837 <pxCurrentTCB+0x1>
    2522:	c0 93 36 18 	sts	0x1836, r28	; 0x801836 <pxCurrentTCB>
    2526:	80 91 cd 17 	lds	r24, 0x17CD	; 0x8017cd <uxCurrentNumberOfTasks>
    252a:	81 30       	cpi	r24, 0x01	; 1
    252c:	09 f0       	breq	.+2      	; 0x2530 <xTaskCreate+0x142>
    252e:	41 c0       	rjmp	.+130    	; 0x25b2 <xTaskCreate+0x1c4>
    2530:	8a e0       	ldi	r24, 0x0A	; 10
    2532:	98 e1       	ldi	r25, 0x18	; 24
    2534:	0e 94 7e 09 	call	0x12fc	; 0x12fc <vListInitialise>
    2538:	85 e1       	ldi	r24, 0x15	; 21
    253a:	98 e1       	ldi	r25, 0x18	; 24
    253c:	0e 94 7e 09 	call	0x12fc	; 0x12fc <vListInitialise>
    2540:	80 e2       	ldi	r24, 0x20	; 32
    2542:	98 e1       	ldi	r25, 0x18	; 24
    2544:	0e 94 7e 09 	call	0x12fc	; 0x12fc <vListInitialise>
    2548:	8b e2       	ldi	r24, 0x2B	; 43
    254a:	98 e1       	ldi	r25, 0x18	; 24
    254c:	0e 94 7e 09 	call	0x12fc	; 0x12fc <vListInitialise>
    2550:	8f ef       	ldi	r24, 0xFF	; 255
    2552:	97 e1       	ldi	r25, 0x17	; 23
    2554:	0e 94 7e 09 	call	0x12fc	; 0x12fc <vListInitialise>
    2558:	84 ef       	ldi	r24, 0xF4	; 244
    255a:	97 e1       	ldi	r25, 0x17	; 23
    255c:	0e 94 7e 09 	call	0x12fc	; 0x12fc <vListInitialise>
    2560:	85 ee       	ldi	r24, 0xE5	; 229
    2562:	97 e1       	ldi	r25, 0x17	; 23
    2564:	0e 94 7e 09 	call	0x12fc	; 0x12fc <vListInitialise>
    2568:	8a ed       	ldi	r24, 0xDA	; 218
    256a:	97 e1       	ldi	r25, 0x17	; 23
    256c:	0e 94 7e 09 	call	0x12fc	; 0x12fc <vListInitialise>
    2570:	8e ec       	ldi	r24, 0xCE	; 206
    2572:	97 e1       	ldi	r25, 0x17	; 23
    2574:	0e 94 7e 09 	call	0x12fc	; 0x12fc <vListInitialise>
    2578:	8f ef       	ldi	r24, 0xFF	; 255
    257a:	97 e1       	ldi	r25, 0x17	; 23
    257c:	90 93 f3 17 	sts	0x17F3, r25	; 0x8017f3 <pxDelayedTaskList+0x1>
    2580:	80 93 f2 17 	sts	0x17F2, r24	; 0x8017f2 <pxDelayedTaskList>
    2584:	84 ef       	ldi	r24, 0xF4	; 244
    2586:	97 e1       	ldi	r25, 0x17	; 23
    2588:	90 93 f1 17 	sts	0x17F1, r25	; 0x8017f1 <pxOverflowDelayedTaskList+0x1>
    258c:	80 93 f0 17 	sts	0x17F0, r24	; 0x8017f0 <pxOverflowDelayedTaskList>
    2590:	10 c0       	rjmp	.+32     	; 0x25b2 <xTaskCreate+0x1c4>
    2592:	80 91 c7 17 	lds	r24, 0x17C7	; 0x8017c7 <xSchedulerRunning>
    2596:	81 11       	cpse	r24, r1
    2598:	0c c0       	rjmp	.+24     	; 0x25b2 <xTaskCreate+0x1c4>
    259a:	e0 91 36 18 	lds	r30, 0x1836	; 0x801836 <pxCurrentTCB>
    259e:	f0 91 37 18 	lds	r31, 0x1837	; 0x801837 <pxCurrentTCB+0x1>
    25a2:	92 8d       	ldd	r25, Z+26	; 0x1a
    25a4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    25a6:	89 17       	cp	r24, r25
    25a8:	20 f0       	brcs	.+8      	; 0x25b2 <xTaskCreate+0x1c4>
    25aa:	d0 93 37 18 	sts	0x1837, r29	; 0x801837 <pxCurrentTCB+0x1>
    25ae:	c0 93 36 18 	sts	0x1836, r28	; 0x801836 <pxCurrentTCB>
    25b2:	80 91 c3 17 	lds	r24, 0x17C3	; 0x8017c3 <uxTaskNumber>
    25b6:	8f 5f       	subi	r24, 0xFF	; 255
    25b8:	80 93 c3 17 	sts	0x17C3, r24	; 0x8017c3 <uxTaskNumber>
    25bc:	8d a3       	std	Y+37, r24	; 0x25
    25be:	8a 8d       	ldd	r24, Y+26	; 0x1a
    25c0:	90 91 c8 17 	lds	r25, 0x17C8	; 0x8017c8 <uxTopReadyPriority>
    25c4:	98 17       	cp	r25, r24
    25c6:	10 f4       	brcc	.+4      	; 0x25cc <xTaskCreate+0x1de>
    25c8:	80 93 c8 17 	sts	0x17C8, r24	; 0x8017c8 <uxTopReadyPriority>
    25cc:	fb e0       	ldi	r31, 0x0B	; 11
    25ce:	8f 9f       	mul	r24, r31
    25d0:	c0 01       	movw	r24, r0
    25d2:	11 24       	eor	r1, r1
    25d4:	b6 01       	movw	r22, r12
    25d6:	86 5f       	subi	r24, 0xF6	; 246
    25d8:	97 4e       	sbci	r25, 0xE7	; 231
    25da:	0e 94 93 09 	call	0x1326	; 0x1326 <vListInsertEnd>
    25de:	0f 90       	pop	r0
    25e0:	0f be       	out	0x3f, r0	; 63
    25e2:	80 91 c7 17 	lds	r24, 0x17C7	; 0x8017c7 <xSchedulerRunning>
    25e6:	88 23       	and	r24, r24
    25e8:	61 f0       	breq	.+24     	; 0x2602 <xTaskCreate+0x214>
    25ea:	e0 91 36 18 	lds	r30, 0x1836	; 0x801836 <pxCurrentTCB>
    25ee:	f0 91 37 18 	lds	r31, 0x1837	; 0x801837 <pxCurrentTCB+0x1>
    25f2:	92 8d       	ldd	r25, Z+26	; 0x1a
    25f4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    25f6:	98 17       	cp	r25, r24
    25f8:	30 f4       	brcc	.+12     	; 0x2606 <xTaskCreate+0x218>
    25fa:	0e 94 c6 0a 	call	0x158c	; 0x158c <vPortYield>
    25fe:	81 e0       	ldi	r24, 0x01	; 1
    2600:	05 c0       	rjmp	.+10     	; 0x260c <xTaskCreate+0x21e>
    2602:	81 e0       	ldi	r24, 0x01	; 1
    2604:	03 c0       	rjmp	.+6      	; 0x260c <xTaskCreate+0x21e>
    2606:	81 e0       	ldi	r24, 0x01	; 1
    2608:	01 c0       	rjmp	.+2      	; 0x260c <xTaskCreate+0x21e>
    260a:	8f ef       	ldi	r24, 0xFF	; 255
    260c:	df 91       	pop	r29
    260e:	cf 91       	pop	r28
    2610:	0f 91       	pop	r16
    2612:	ff 90       	pop	r15
    2614:	ef 90       	pop	r14
    2616:	df 90       	pop	r13
    2618:	cf 90       	pop	r12
    261a:	bf 90       	pop	r11
    261c:	af 90       	pop	r10
    261e:	9f 90       	pop	r9
    2620:	8f 90       	pop	r8
    2622:	7f 90       	pop	r7
    2624:	6f 90       	pop	r6
    2626:	5f 90       	pop	r5
    2628:	4f 90       	pop	r4
    262a:	08 95       	ret

0000262c <vTaskStartScheduler>:
    262c:	ef 92       	push	r14
    262e:	ff 92       	push	r15
    2630:	0f 93       	push	r16
    2632:	0f 2e       	mov	r0, r31
    2634:	fd eb       	ldi	r31, 0xBD	; 189
    2636:	ef 2e       	mov	r14, r31
    2638:	f7 e1       	ldi	r31, 0x17	; 23
    263a:	ff 2e       	mov	r15, r31
    263c:	f0 2d       	mov	r31, r0
    263e:	00 e0       	ldi	r16, 0x00	; 0
    2640:	20 e0       	ldi	r18, 0x00	; 0
    2642:	30 e0       	ldi	r19, 0x00	; 0
    2644:	40 ec       	ldi	r20, 0xC0	; 192
    2646:	50 e0       	ldi	r21, 0x00	; 0
    2648:	60 e7       	ldi	r22, 0x70	; 112
    264a:	74 e0       	ldi	r23, 0x04	; 4
    264c:	8d ec       	ldi	r24, 0xCD	; 205
    264e:	90 e0       	ldi	r25, 0x00	; 0
    2650:	ce de       	rcall	.-612    	; 0x23ee <xTaskCreate>
    2652:	81 30       	cpi	r24, 0x01	; 1
    2654:	19 f5       	brne	.+70     	; 0x269c <vTaskStartScheduler+0x70>
    2656:	00 d6       	rcall	.+3072   	; 0x3258 <xTimerCreateTimerTask>
    2658:	81 30       	cpi	r24, 0x01	; 1
    265a:	01 f5       	brne	.+64     	; 0x269c <vTaskStartScheduler+0x70>
    265c:	f8 94       	cli
    265e:	8f ef       	ldi	r24, 0xFF	; 255
    2660:	9f ef       	ldi	r25, 0xFF	; 255
    2662:	dc 01       	movw	r26, r24
    2664:	80 93 bf 17 	sts	0x17BF, r24	; 0x8017bf <xNextTaskUnblockTime>
    2668:	90 93 c0 17 	sts	0x17C0, r25	; 0x8017c0 <xNextTaskUnblockTime+0x1>
    266c:	a0 93 c1 17 	sts	0x17C1, r26	; 0x8017c1 <xNextTaskUnblockTime+0x2>
    2670:	b0 93 c2 17 	sts	0x17C2, r27	; 0x8017c2 <xNextTaskUnblockTime+0x3>
    2674:	81 e0       	ldi	r24, 0x01	; 1
    2676:	80 93 c7 17 	sts	0x17C7, r24	; 0x8017c7 <xSchedulerRunning>
    267a:	10 92 c9 17 	sts	0x17C9, r1	; 0x8017c9 <xTickCount>
    267e:	10 92 ca 17 	sts	0x17CA, r1	; 0x8017ca <xTickCount+0x1>
    2682:	10 92 cb 17 	sts	0x17CB, r1	; 0x8017cb <xTickCount+0x2>
    2686:	10 92 cc 17 	sts	0x17CC, r1	; 0x8017cc <xTickCount+0x3>
    268a:	e0 91 36 18 	lds	r30, 0x1836	; 0x801836 <pxCurrentTCB>
    268e:	f0 91 37 18 	lds	r31, 0x1837	; 0x801837 <pxCurrentTCB+0x1>
    2692:	81 a5       	ldd	r24, Z+41	; 0x29
    2694:	0e 94 cb 06 	call	0xd96	; 0xd96 <task_switch_in>
    2698:	0e 94 8a 0a 	call	0x1514	; 0x1514 <xPortStartScheduler>
    269c:	0f 91       	pop	r16
    269e:	ff 90       	pop	r15
    26a0:	ef 90       	pop	r14
    26a2:	08 95       	ret

000026a4 <vTaskSuspendAll>:
    26a4:	80 91 bc 17 	lds	r24, 0x17BC	; 0x8017bc <uxSchedulerSuspended>
    26a8:	8f 5f       	subi	r24, 0xFF	; 255
    26aa:	80 93 bc 17 	sts	0x17BC, r24	; 0x8017bc <uxSchedulerSuspended>
    26ae:	08 95       	ret

000026b0 <xTaskGetTickCount>:
    26b0:	0f b6       	in	r0, 0x3f	; 63
    26b2:	f8 94       	cli
    26b4:	0f 92       	push	r0
    26b6:	60 91 c9 17 	lds	r22, 0x17C9	; 0x8017c9 <xTickCount>
    26ba:	70 91 ca 17 	lds	r23, 0x17CA	; 0x8017ca <xTickCount+0x1>
    26be:	80 91 cb 17 	lds	r24, 0x17CB	; 0x8017cb <xTickCount+0x2>
    26c2:	90 91 cc 17 	lds	r25, 0x17CC	; 0x8017cc <xTickCount+0x3>
    26c6:	0f 90       	pop	r0
    26c8:	0f be       	out	0x3f, r0	; 63
    26ca:	08 95       	ret

000026cc <xTaskIncrementTick>:
    26cc:	9f 92       	push	r9
    26ce:	af 92       	push	r10
    26d0:	bf 92       	push	r11
    26d2:	cf 92       	push	r12
    26d4:	df 92       	push	r13
    26d6:	ef 92       	push	r14
    26d8:	ff 92       	push	r15
    26da:	0f 93       	push	r16
    26dc:	1f 93       	push	r17
    26de:	cf 93       	push	r28
    26e0:	df 93       	push	r29
    26e2:	80 91 bc 17 	lds	r24, 0x17BC	; 0x8017bc <uxSchedulerSuspended>
    26e6:	81 11       	cpse	r24, r1
    26e8:	ad c0       	rjmp	.+346    	; 0x2844 <xTaskIncrementTick+0x178>
    26ea:	c0 90 c9 17 	lds	r12, 0x17C9	; 0x8017c9 <xTickCount>
    26ee:	d0 90 ca 17 	lds	r13, 0x17CA	; 0x8017ca <xTickCount+0x1>
    26f2:	e0 90 cb 17 	lds	r14, 0x17CB	; 0x8017cb <xTickCount+0x2>
    26f6:	f0 90 cc 17 	lds	r15, 0x17CC	; 0x8017cc <xTickCount+0x3>
    26fa:	8f ef       	ldi	r24, 0xFF	; 255
    26fc:	c8 1a       	sub	r12, r24
    26fe:	d8 0a       	sbc	r13, r24
    2700:	e8 0a       	sbc	r14, r24
    2702:	f8 0a       	sbc	r15, r24
    2704:	c0 92 c9 17 	sts	0x17C9, r12	; 0x8017c9 <xTickCount>
    2708:	d0 92 ca 17 	sts	0x17CA, r13	; 0x8017ca <xTickCount+0x1>
    270c:	e0 92 cb 17 	sts	0x17CB, r14	; 0x8017cb <xTickCount+0x2>
    2710:	f0 92 cc 17 	sts	0x17CC, r15	; 0x8017cc <xTickCount+0x3>
    2714:	c1 14       	cp	r12, r1
    2716:	d1 04       	cpc	r13, r1
    2718:	e1 04       	cpc	r14, r1
    271a:	f1 04       	cpc	r15, r1
    271c:	b1 f4       	brne	.+44     	; 0x274a <xTaskIncrementTick+0x7e>
    271e:	80 91 f2 17 	lds	r24, 0x17F2	; 0x8017f2 <pxDelayedTaskList>
    2722:	90 91 f3 17 	lds	r25, 0x17F3	; 0x8017f3 <pxDelayedTaskList+0x1>
    2726:	20 91 f0 17 	lds	r18, 0x17F0	; 0x8017f0 <pxOverflowDelayedTaskList>
    272a:	30 91 f1 17 	lds	r19, 0x17F1	; 0x8017f1 <pxOverflowDelayedTaskList+0x1>
    272e:	30 93 f3 17 	sts	0x17F3, r19	; 0x8017f3 <pxDelayedTaskList+0x1>
    2732:	20 93 f2 17 	sts	0x17F2, r18	; 0x8017f2 <pxDelayedTaskList>
    2736:	90 93 f1 17 	sts	0x17F1, r25	; 0x8017f1 <pxOverflowDelayedTaskList+0x1>
    273a:	80 93 f0 17 	sts	0x17F0, r24	; 0x8017f0 <pxOverflowDelayedTaskList>
    273e:	80 91 c4 17 	lds	r24, 0x17C4	; 0x8017c4 <xNumOfOverflows>
    2742:	8f 5f       	subi	r24, 0xFF	; 255
    2744:	80 93 c4 17 	sts	0x17C4, r24	; 0x8017c4 <xNumOfOverflows>
    2748:	b2 dd       	rcall	.-1180   	; 0x22ae <prvResetNextTaskUnblockTime>
    274a:	80 91 bf 17 	lds	r24, 0x17BF	; 0x8017bf <xNextTaskUnblockTime>
    274e:	90 91 c0 17 	lds	r25, 0x17C0	; 0x8017c0 <xNextTaskUnblockTime+0x1>
    2752:	a0 91 c1 17 	lds	r26, 0x17C1	; 0x8017c1 <xNextTaskUnblockTime+0x2>
    2756:	b0 91 c2 17 	lds	r27, 0x17C2	; 0x8017c2 <xNextTaskUnblockTime+0x3>
    275a:	c8 16       	cp	r12, r24
    275c:	d9 06       	cpc	r13, r25
    275e:	ea 06       	cpc	r14, r26
    2760:	fb 06       	cpc	r15, r27
    2762:	10 f4       	brcc	.+4      	; 0x2768 <xTaskIncrementTick+0x9c>
    2764:	b1 2c       	mov	r11, r1
    2766:	5d c0       	rjmp	.+186    	; 0x2822 <xTaskIncrementTick+0x156>
    2768:	b1 2c       	mov	r11, r1
    276a:	0f 2e       	mov	r0, r31
    276c:	fb e0       	ldi	r31, 0x0B	; 11
    276e:	af 2e       	mov	r10, r31
    2770:	f0 2d       	mov	r31, r0
    2772:	99 24       	eor	r9, r9
    2774:	93 94       	inc	r9
    2776:	e0 91 f2 17 	lds	r30, 0x17F2	; 0x8017f2 <pxDelayedTaskList>
    277a:	f0 91 f3 17 	lds	r31, 0x17F3	; 0x8017f3 <pxDelayedTaskList+0x1>
    277e:	80 81       	ld	r24, Z
    2780:	81 11       	cpse	r24, r1
    2782:	0c c0       	rjmp	.+24     	; 0x279c <xTaskIncrementTick+0xd0>
    2784:	8f ef       	ldi	r24, 0xFF	; 255
    2786:	9f ef       	ldi	r25, 0xFF	; 255
    2788:	dc 01       	movw	r26, r24
    278a:	80 93 bf 17 	sts	0x17BF, r24	; 0x8017bf <xNextTaskUnblockTime>
    278e:	90 93 c0 17 	sts	0x17C0, r25	; 0x8017c0 <xNextTaskUnblockTime+0x1>
    2792:	a0 93 c1 17 	sts	0x17C1, r26	; 0x8017c1 <xNextTaskUnblockTime+0x2>
    2796:	b0 93 c2 17 	sts	0x17C2, r27	; 0x8017c2 <xNextTaskUnblockTime+0x3>
    279a:	43 c0       	rjmp	.+134    	; 0x2822 <xTaskIncrementTick+0x156>
    279c:	e0 91 f2 17 	lds	r30, 0x17F2	; 0x8017f2 <pxDelayedTaskList>
    27a0:	f0 91 f3 17 	lds	r31, 0x17F3	; 0x8017f3 <pxDelayedTaskList+0x1>
    27a4:	07 80       	ldd	r0, Z+7	; 0x07
    27a6:	f0 85       	ldd	r31, Z+8	; 0x08
    27a8:	e0 2d       	mov	r30, r0
    27aa:	c0 85       	ldd	r28, Z+8	; 0x08
    27ac:	d1 85       	ldd	r29, Z+9	; 0x09
    27ae:	8a 81       	ldd	r24, Y+2	; 0x02
    27b0:	9b 81       	ldd	r25, Y+3	; 0x03
    27b2:	ac 81       	ldd	r26, Y+4	; 0x04
    27b4:	bd 81       	ldd	r27, Y+5	; 0x05
    27b6:	c8 16       	cp	r12, r24
    27b8:	d9 06       	cpc	r13, r25
    27ba:	ea 06       	cpc	r14, r26
    27bc:	fb 06       	cpc	r15, r27
    27be:	48 f4       	brcc	.+18     	; 0x27d2 <xTaskIncrementTick+0x106>
    27c0:	80 93 bf 17 	sts	0x17BF, r24	; 0x8017bf <xNextTaskUnblockTime>
    27c4:	90 93 c0 17 	sts	0x17C0, r25	; 0x8017c0 <xNextTaskUnblockTime+0x1>
    27c8:	a0 93 c1 17 	sts	0x17C1, r26	; 0x8017c1 <xNextTaskUnblockTime+0x2>
    27cc:	b0 93 c2 17 	sts	0x17C2, r27	; 0x8017c2 <xNextTaskUnblockTime+0x3>
    27d0:	28 c0       	rjmp	.+80     	; 0x2822 <xTaskIncrementTick+0x156>
    27d2:	8e 01       	movw	r16, r28
    27d4:	0e 5f       	subi	r16, 0xFE	; 254
    27d6:	1f 4f       	sbci	r17, 0xFF	; 255
    27d8:	c8 01       	movw	r24, r16
    27da:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <uxListRemove>
    27de:	88 8d       	ldd	r24, Y+24	; 0x18
    27e0:	99 8d       	ldd	r25, Y+25	; 0x19
    27e2:	89 2b       	or	r24, r25
    27e4:	21 f0       	breq	.+8      	; 0x27ee <xTaskIncrementTick+0x122>
    27e6:	ce 01       	movw	r24, r28
    27e8:	0e 96       	adiw	r24, 0x0e	; 14
    27ea:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <uxListRemove>
    27ee:	8a 8d       	ldd	r24, Y+26	; 0x1a
    27f0:	90 91 c8 17 	lds	r25, 0x17C8	; 0x8017c8 <uxTopReadyPriority>
    27f4:	98 17       	cp	r25, r24
    27f6:	10 f4       	brcc	.+4      	; 0x27fc <xTaskIncrementTick+0x130>
    27f8:	80 93 c8 17 	sts	0x17C8, r24	; 0x8017c8 <uxTopReadyPriority>
    27fc:	a8 9e       	mul	r10, r24
    27fe:	c0 01       	movw	r24, r0
    2800:	11 24       	eor	r1, r1
    2802:	b8 01       	movw	r22, r16
    2804:	86 5f       	subi	r24, 0xF6	; 246
    2806:	97 4e       	sbci	r25, 0xE7	; 231
    2808:	0e 94 93 09 	call	0x1326	; 0x1326 <vListInsertEnd>
    280c:	e0 91 36 18 	lds	r30, 0x1836	; 0x801836 <pxCurrentTCB>
    2810:	f0 91 37 18 	lds	r31, 0x1837	; 0x801837 <pxCurrentTCB+0x1>
    2814:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2816:	82 8d       	ldd	r24, Z+26	; 0x1a
    2818:	98 17       	cp	r25, r24
    281a:	08 f4       	brcc	.+2      	; 0x281e <xTaskIncrementTick+0x152>
    281c:	ac cf       	rjmp	.-168    	; 0x2776 <xTaskIncrementTick+0xaa>
    281e:	b9 2c       	mov	r11, r9
    2820:	aa cf       	rjmp	.-172    	; 0x2776 <xTaskIncrementTick+0xaa>
    2822:	e0 91 36 18 	lds	r30, 0x1836	; 0x801836 <pxCurrentTCB>
    2826:	f0 91 37 18 	lds	r31, 0x1837	; 0x801837 <pxCurrentTCB+0x1>
    282a:	e2 8d       	ldd	r30, Z+26	; 0x1a
    282c:	8b e0       	ldi	r24, 0x0B	; 11
    282e:	e8 9f       	mul	r30, r24
    2830:	f0 01       	movw	r30, r0
    2832:	11 24       	eor	r1, r1
    2834:	e6 5f       	subi	r30, 0xF6	; 246
    2836:	f7 4e       	sbci	r31, 0xE7	; 231
    2838:	80 81       	ld	r24, Z
    283a:	82 30       	cpi	r24, 0x02	; 2
    283c:	48 f0       	brcs	.+18     	; 0x2850 <xTaskIncrementTick+0x184>
    283e:	bb 24       	eor	r11, r11
    2840:	b3 94       	inc	r11
    2842:	06 c0       	rjmp	.+12     	; 0x2850 <xTaskIncrementTick+0x184>
    2844:	80 91 c6 17 	lds	r24, 0x17C6	; 0x8017c6 <uxPendedTicks>
    2848:	8f 5f       	subi	r24, 0xFF	; 255
    284a:	80 93 c6 17 	sts	0x17C6, r24	; 0x8017c6 <uxPendedTicks>
    284e:	b1 2c       	mov	r11, r1
    2850:	80 91 c5 17 	lds	r24, 0x17C5	; 0x8017c5 <xYieldPending>
    2854:	88 23       	and	r24, r24
    2856:	11 f0       	breq	.+4      	; 0x285c <xTaskIncrementTick+0x190>
    2858:	bb 24       	eor	r11, r11
    285a:	b3 94       	inc	r11
    285c:	8b 2d       	mov	r24, r11
    285e:	df 91       	pop	r29
    2860:	cf 91       	pop	r28
    2862:	1f 91       	pop	r17
    2864:	0f 91       	pop	r16
    2866:	ff 90       	pop	r15
    2868:	ef 90       	pop	r14
    286a:	df 90       	pop	r13
    286c:	cf 90       	pop	r12
    286e:	bf 90       	pop	r11
    2870:	af 90       	pop	r10
    2872:	9f 90       	pop	r9
    2874:	08 95       	ret

00002876 <xTaskResumeAll>:
    2876:	cf 92       	push	r12
    2878:	df 92       	push	r13
    287a:	ef 92       	push	r14
    287c:	ff 92       	push	r15
    287e:	0f 93       	push	r16
    2880:	1f 93       	push	r17
    2882:	cf 93       	push	r28
    2884:	df 93       	push	r29
    2886:	0f b6       	in	r0, 0x3f	; 63
    2888:	f8 94       	cli
    288a:	0f 92       	push	r0
    288c:	80 91 bc 17 	lds	r24, 0x17BC	; 0x8017bc <uxSchedulerSuspended>
    2890:	81 50       	subi	r24, 0x01	; 1
    2892:	80 93 bc 17 	sts	0x17BC, r24	; 0x8017bc <uxSchedulerSuspended>
    2896:	80 91 bc 17 	lds	r24, 0x17BC	; 0x8017bc <uxSchedulerSuspended>
    289a:	81 11       	cpse	r24, r1
    289c:	5a c0       	rjmp	.+180    	; 0x2952 <xTaskResumeAll+0xdc>
    289e:	80 91 cd 17 	lds	r24, 0x17CD	; 0x8017cd <uxCurrentNumberOfTasks>
    28a2:	81 11       	cpse	r24, r1
    28a4:	2c c0       	rjmp	.+88     	; 0x28fe <xTaskResumeAll+0x88>
    28a6:	58 c0       	rjmp	.+176    	; 0x2958 <xTaskResumeAll+0xe2>
    28a8:	d7 01       	movw	r26, r14
    28aa:	17 96       	adiw	r26, 0x07	; 7
    28ac:	ed 91       	ld	r30, X+
    28ae:	fc 91       	ld	r31, X
    28b0:	18 97       	sbiw	r26, 0x08	; 8
    28b2:	c0 85       	ldd	r28, Z+8	; 0x08
    28b4:	d1 85       	ldd	r29, Z+9	; 0x09
    28b6:	ce 01       	movw	r24, r28
    28b8:	0e 96       	adiw	r24, 0x0e	; 14
    28ba:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <uxListRemove>
    28be:	8e 01       	movw	r16, r28
    28c0:	0e 5f       	subi	r16, 0xFE	; 254
    28c2:	1f 4f       	sbci	r17, 0xFF	; 255
    28c4:	c8 01       	movw	r24, r16
    28c6:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <uxListRemove>
    28ca:	8a 8d       	ldd	r24, Y+26	; 0x1a
    28cc:	90 91 c8 17 	lds	r25, 0x17C8	; 0x8017c8 <uxTopReadyPriority>
    28d0:	98 17       	cp	r25, r24
    28d2:	10 f4       	brcc	.+4      	; 0x28d8 <xTaskResumeAll+0x62>
    28d4:	80 93 c8 17 	sts	0x17C8, r24	; 0x8017c8 <uxTopReadyPriority>
    28d8:	d8 9e       	mul	r13, r24
    28da:	c0 01       	movw	r24, r0
    28dc:	11 24       	eor	r1, r1
    28de:	b8 01       	movw	r22, r16
    28e0:	86 5f       	subi	r24, 0xF6	; 246
    28e2:	97 4e       	sbci	r25, 0xE7	; 231
    28e4:	0e 94 93 09 	call	0x1326	; 0x1326 <vListInsertEnd>
    28e8:	e0 91 36 18 	lds	r30, 0x1836	; 0x801836 <pxCurrentTCB>
    28ec:	f0 91 37 18 	lds	r31, 0x1837	; 0x801837 <pxCurrentTCB+0x1>
    28f0:	9a 8d       	ldd	r25, Y+26	; 0x1a
    28f2:	82 8d       	ldd	r24, Z+26	; 0x1a
    28f4:	98 17       	cp	r25, r24
    28f6:	88 f0       	brcs	.+34     	; 0x291a <xTaskResumeAll+0xa4>
    28f8:	c0 92 c5 17 	sts	0x17C5, r12	; 0x8017c5 <xYieldPending>
    28fc:	0e c0       	rjmp	.+28     	; 0x291a <xTaskResumeAll+0xa4>
    28fe:	c0 e0       	ldi	r28, 0x00	; 0
    2900:	d0 e0       	ldi	r29, 0x00	; 0
    2902:	0f 2e       	mov	r0, r31
    2904:	f5 ee       	ldi	r31, 0xE5	; 229
    2906:	ef 2e       	mov	r14, r31
    2908:	f7 e1       	ldi	r31, 0x17	; 23
    290a:	ff 2e       	mov	r15, r31
    290c:	f0 2d       	mov	r31, r0
    290e:	0f 2e       	mov	r0, r31
    2910:	fb e0       	ldi	r31, 0x0B	; 11
    2912:	df 2e       	mov	r13, r31
    2914:	f0 2d       	mov	r31, r0
    2916:	cc 24       	eor	r12, r12
    2918:	c3 94       	inc	r12
    291a:	f7 01       	movw	r30, r14
    291c:	80 81       	ld	r24, Z
    291e:	81 11       	cpse	r24, r1
    2920:	c3 cf       	rjmp	.-122    	; 0x28a8 <xTaskResumeAll+0x32>
    2922:	cd 2b       	or	r28, r29
    2924:	09 f0       	breq	.+2      	; 0x2928 <xTaskResumeAll+0xb2>
    2926:	c3 dc       	rcall	.-1658   	; 0x22ae <prvResetNextTaskUnblockTime>
    2928:	c0 91 c6 17 	lds	r28, 0x17C6	; 0x8017c6 <uxPendedTicks>
    292c:	cc 23       	and	r28, r28
    292e:	49 f0       	breq	.+18     	; 0x2942 <xTaskResumeAll+0xcc>
    2930:	d1 e0       	ldi	r29, 0x01	; 1
    2932:	cc de       	rcall	.-616    	; 0x26cc <xTaskIncrementTick>
    2934:	81 11       	cpse	r24, r1
    2936:	d0 93 c5 17 	sts	0x17C5, r29	; 0x8017c5 <xYieldPending>
    293a:	c1 50       	subi	r28, 0x01	; 1
    293c:	d1 f7       	brne	.-12     	; 0x2932 <xTaskResumeAll+0xbc>
    293e:	10 92 c6 17 	sts	0x17C6, r1	; 0x8017c6 <uxPendedTicks>
    2942:	80 91 c5 17 	lds	r24, 0x17C5	; 0x8017c5 <xYieldPending>
    2946:	88 23       	and	r24, r24
    2948:	31 f0       	breq	.+12     	; 0x2956 <xTaskResumeAll+0xe0>
    294a:	0e 94 c6 0a 	call	0x158c	; 0x158c <vPortYield>
    294e:	81 e0       	ldi	r24, 0x01	; 1
    2950:	03 c0       	rjmp	.+6      	; 0x2958 <xTaskResumeAll+0xe2>
    2952:	80 e0       	ldi	r24, 0x00	; 0
    2954:	01 c0       	rjmp	.+2      	; 0x2958 <xTaskResumeAll+0xe2>
    2956:	80 e0       	ldi	r24, 0x00	; 0
    2958:	0f 90       	pop	r0
    295a:	0f be       	out	0x3f, r0	; 63
    295c:	df 91       	pop	r29
    295e:	cf 91       	pop	r28
    2960:	1f 91       	pop	r17
    2962:	0f 91       	pop	r16
    2964:	ff 90       	pop	r15
    2966:	ef 90       	pop	r14
    2968:	df 90       	pop	r13
    296a:	cf 90       	pop	r12
    296c:	08 95       	ret

0000296e <vTaskDelay>:
    296e:	cf 92       	push	r12
    2970:	df 92       	push	r13
    2972:	ef 92       	push	r14
    2974:	ff 92       	push	r15
    2976:	6b 01       	movw	r12, r22
    2978:	7c 01       	movw	r14, r24
    297a:	67 2b       	or	r22, r23
    297c:	68 2b       	or	r22, r24
    297e:	69 2b       	or	r22, r25
    2980:	41 f0       	breq	.+16     	; 0x2992 <vTaskDelay+0x24>
    2982:	90 de       	rcall	.-736    	; 0x26a4 <vTaskSuspendAll>
    2984:	40 e0       	ldi	r20, 0x00	; 0
    2986:	c7 01       	movw	r24, r14
    2988:	b6 01       	movw	r22, r12
    298a:	bb dc       	rcall	.-1674   	; 0x2302 <prvAddCurrentTaskToDelayedList>
    298c:	74 df       	rcall	.-280    	; 0x2876 <xTaskResumeAll>
    298e:	81 11       	cpse	r24, r1
    2990:	02 c0       	rjmp	.+4      	; 0x2996 <vTaskDelay+0x28>
    2992:	0e 94 c6 0a 	call	0x158c	; 0x158c <vPortYield>
    2996:	ff 90       	pop	r15
    2998:	ef 90       	pop	r14
    299a:	df 90       	pop	r13
    299c:	cf 90       	pop	r12
    299e:	08 95       	ret

000029a0 <vTaskSwitchContext>:
    29a0:	80 91 bc 17 	lds	r24, 0x17BC	; 0x8017bc <uxSchedulerSuspended>
    29a4:	88 23       	and	r24, r24
    29a6:	21 f0       	breq	.+8      	; 0x29b0 <vTaskSwitchContext+0x10>
    29a8:	81 e0       	ldi	r24, 0x01	; 1
    29aa:	80 93 c5 17 	sts	0x17C5, r24	; 0x8017c5 <xYieldPending>
    29ae:	08 95       	ret
    29b0:	10 92 c5 17 	sts	0x17C5, r1	; 0x8017c5 <xYieldPending>
    29b4:	e0 91 36 18 	lds	r30, 0x1836	; 0x801836 <pxCurrentTCB>
    29b8:	f0 91 37 18 	lds	r31, 0x1837	; 0x801837 <pxCurrentTCB+0x1>
    29bc:	81 a5       	ldd	r24, Z+41	; 0x29
    29be:	0e 94 d5 06 	call	0xdaa	; 0xdaa <task_switch_out>
    29c2:	a0 91 36 18 	lds	r26, 0x1836	; 0x801836 <pxCurrentTCB>
    29c6:	b0 91 37 18 	lds	r27, 0x1837	; 0x801837 <pxCurrentTCB+0x1>
    29ca:	e0 91 36 18 	lds	r30, 0x1836	; 0x801836 <pxCurrentTCB>
    29ce:	f0 91 37 18 	lds	r31, 0x1837	; 0x801837 <pxCurrentTCB+0x1>
    29d2:	2d 91       	ld	r18, X+
    29d4:	3c 91       	ld	r19, X
    29d6:	83 8d       	ldd	r24, Z+27	; 0x1b
    29d8:	94 8d       	ldd	r25, Z+28	; 0x1c
    29da:	82 17       	cp	r24, r18
    29dc:	93 07       	cpc	r25, r19
    29de:	58 f0       	brcs	.+22     	; 0x29f6 <vTaskSwitchContext+0x56>
    29e0:	60 91 36 18 	lds	r22, 0x1836	; 0x801836 <pxCurrentTCB>
    29e4:	70 91 37 18 	lds	r23, 0x1837	; 0x801837 <pxCurrentTCB+0x1>
    29e8:	80 91 36 18 	lds	r24, 0x1836	; 0x801836 <pxCurrentTCB>
    29ec:	90 91 37 18 	lds	r25, 0x1837	; 0x801837 <pxCurrentTCB+0x1>
    29f0:	63 5e       	subi	r22, 0xE3	; 227
    29f2:	7f 4f       	sbci	r23, 0xFF	; 255
    29f4:	53 d5       	rcall	.+2726   	; 0x349c <vApplicationStackOverflowHook>
    29f6:	80 91 c8 17 	lds	r24, 0x17C8	; 0x8017c8 <uxTopReadyPriority>
    29fa:	28 2f       	mov	r18, r24
    29fc:	30 e0       	ldi	r19, 0x00	; 0
    29fe:	9b e0       	ldi	r25, 0x0B	; 11
    2a00:	89 9f       	mul	r24, r25
    2a02:	f0 01       	movw	r30, r0
    2a04:	11 24       	eor	r1, r1
    2a06:	e6 5f       	subi	r30, 0xF6	; 246
    2a08:	f7 4e       	sbci	r31, 0xE7	; 231
    2a0a:	90 81       	ld	r25, Z
    2a0c:	91 11       	cpse	r25, r1
    2a0e:	0e c0       	rjmp	.+28     	; 0x2a2c <vTaskSwitchContext+0x8c>
    2a10:	4b e0       	ldi	r20, 0x0B	; 11
    2a12:	81 50       	subi	r24, 0x01	; 1
    2a14:	28 2f       	mov	r18, r24
    2a16:	30 e0       	ldi	r19, 0x00	; 0
    2a18:	42 9f       	mul	r20, r18
    2a1a:	f0 01       	movw	r30, r0
    2a1c:	43 9f       	mul	r20, r19
    2a1e:	f0 0d       	add	r31, r0
    2a20:	11 24       	eor	r1, r1
    2a22:	e6 5f       	subi	r30, 0xF6	; 246
    2a24:	f7 4e       	sbci	r31, 0xE7	; 231
    2a26:	90 81       	ld	r25, Z
    2a28:	99 23       	and	r25, r25
    2a2a:	99 f3       	breq	.-26     	; 0x2a12 <vTaskSwitchContext+0x72>
    2a2c:	9b e0       	ldi	r25, 0x0B	; 11
    2a2e:	92 9f       	mul	r25, r18
    2a30:	a0 01       	movw	r20, r0
    2a32:	93 9f       	mul	r25, r19
    2a34:	50 0d       	add	r21, r0
    2a36:	11 24       	eor	r1, r1
    2a38:	da 01       	movw	r26, r20
    2a3a:	a6 5f       	subi	r26, 0xF6	; 246
    2a3c:	b7 4e       	sbci	r27, 0xE7	; 231
    2a3e:	11 96       	adiw	r26, 0x01	; 1
    2a40:	ed 91       	ld	r30, X+
    2a42:	fc 91       	ld	r31, X
    2a44:	12 97       	sbiw	r26, 0x02	; 2
    2a46:	04 80       	ldd	r0, Z+4	; 0x04
    2a48:	f5 81       	ldd	r31, Z+5	; 0x05
    2a4a:	e0 2d       	mov	r30, r0
    2a4c:	12 96       	adiw	r26, 0x02	; 2
    2a4e:	fc 93       	st	X, r31
    2a50:	ee 93       	st	-X, r30
    2a52:	11 97       	sbiw	r26, 0x01	; 1
    2a54:	43 5f       	subi	r20, 0xF3	; 243
    2a56:	57 4e       	sbci	r21, 0xE7	; 231
    2a58:	e4 17       	cp	r30, r20
    2a5a:	f5 07       	cpc	r31, r21
    2a5c:	29 f4       	brne	.+10     	; 0x2a68 <vTaskSwitchContext+0xc8>
    2a5e:	44 81       	ldd	r20, Z+4	; 0x04
    2a60:	55 81       	ldd	r21, Z+5	; 0x05
    2a62:	fd 01       	movw	r30, r26
    2a64:	52 83       	std	Z+2, r21	; 0x02
    2a66:	41 83       	std	Z+1, r20	; 0x01
    2a68:	9b e0       	ldi	r25, 0x0B	; 11
    2a6a:	92 9f       	mul	r25, r18
    2a6c:	f0 01       	movw	r30, r0
    2a6e:	93 9f       	mul	r25, r19
    2a70:	f0 0d       	add	r31, r0
    2a72:	11 24       	eor	r1, r1
    2a74:	e6 5f       	subi	r30, 0xF6	; 246
    2a76:	f7 4e       	sbci	r31, 0xE7	; 231
    2a78:	01 80       	ldd	r0, Z+1	; 0x01
    2a7a:	f2 81       	ldd	r31, Z+2	; 0x02
    2a7c:	e0 2d       	mov	r30, r0
    2a7e:	20 85       	ldd	r18, Z+8	; 0x08
    2a80:	31 85       	ldd	r19, Z+9	; 0x09
    2a82:	30 93 37 18 	sts	0x1837, r19	; 0x801837 <pxCurrentTCB+0x1>
    2a86:	20 93 36 18 	sts	0x1836, r18	; 0x801836 <pxCurrentTCB>
    2a8a:	80 93 c8 17 	sts	0x17C8, r24	; 0x8017c8 <uxTopReadyPriority>
    2a8e:	e0 91 36 18 	lds	r30, 0x1836	; 0x801836 <pxCurrentTCB>
    2a92:	f0 91 37 18 	lds	r31, 0x1837	; 0x801837 <pxCurrentTCB+0x1>
    2a96:	81 a5       	ldd	r24, Z+41	; 0x29
    2a98:	0c 94 cb 06 	jmp	0xd96	; 0xd96 <task_switch_in>
    2a9c:	08 95       	ret

00002a9e <vTaskPlaceOnEventList>:
    2a9e:	cf 92       	push	r12
    2aa0:	df 92       	push	r13
    2aa2:	ef 92       	push	r14
    2aa4:	ff 92       	push	r15
    2aa6:	6a 01       	movw	r12, r20
    2aa8:	7b 01       	movw	r14, r22
    2aaa:	60 91 36 18 	lds	r22, 0x1836	; 0x801836 <pxCurrentTCB>
    2aae:	70 91 37 18 	lds	r23, 0x1837	; 0x801837 <pxCurrentTCB+0x1>
    2ab2:	62 5f       	subi	r22, 0xF2	; 242
    2ab4:	7f 4f       	sbci	r23, 0xFF	; 255
    2ab6:	0e 94 b4 09 	call	0x1368	; 0x1368 <vListInsert>
    2aba:	41 e0       	ldi	r20, 0x01	; 1
    2abc:	c7 01       	movw	r24, r14
    2abe:	b6 01       	movw	r22, r12
    2ac0:	20 dc       	rcall	.-1984   	; 0x2302 <prvAddCurrentTaskToDelayedList>
    2ac2:	ff 90       	pop	r15
    2ac4:	ef 90       	pop	r14
    2ac6:	df 90       	pop	r13
    2ac8:	cf 90       	pop	r12
    2aca:	08 95       	ret

00002acc <vTaskPlaceOnUnorderedEventList>:
    2acc:	cf 92       	push	r12
    2ace:	df 92       	push	r13
    2ad0:	ef 92       	push	r14
    2ad2:	ff 92       	push	r15
    2ad4:	0f 93       	push	r16
    2ad6:	1f 93       	push	r17
    2ad8:	68 01       	movw	r12, r16
    2ada:	79 01       	movw	r14, r18
    2adc:	e0 91 36 18 	lds	r30, 0x1836	; 0x801836 <pxCurrentTCB>
    2ae0:	f0 91 37 18 	lds	r31, 0x1837	; 0x801837 <pxCurrentTCB+0x1>
    2ae4:	70 68       	ori	r23, 0x80	; 128
    2ae6:	46 87       	std	Z+14, r20	; 0x0e
    2ae8:	57 87       	std	Z+15, r21	; 0x0f
    2aea:	60 8b       	std	Z+16, r22	; 0x10
    2aec:	71 8b       	std	Z+17, r23	; 0x11
    2aee:	60 91 36 18 	lds	r22, 0x1836	; 0x801836 <pxCurrentTCB>
    2af2:	70 91 37 18 	lds	r23, 0x1837	; 0x801837 <pxCurrentTCB+0x1>
    2af6:	62 5f       	subi	r22, 0xF2	; 242
    2af8:	7f 4f       	sbci	r23, 0xFF	; 255
    2afa:	0e 94 93 09 	call	0x1326	; 0x1326 <vListInsertEnd>
    2afe:	41 e0       	ldi	r20, 0x01	; 1
    2b00:	c7 01       	movw	r24, r14
    2b02:	b6 01       	movw	r22, r12
    2b04:	fe db       	rcall	.-2052   	; 0x2302 <prvAddCurrentTaskToDelayedList>
    2b06:	1f 91       	pop	r17
    2b08:	0f 91       	pop	r16
    2b0a:	ff 90       	pop	r15
    2b0c:	ef 90       	pop	r14
    2b0e:	df 90       	pop	r13
    2b10:	cf 90       	pop	r12
    2b12:	08 95       	ret

00002b14 <vTaskPlaceOnEventListRestricted>:
    2b14:	cf 92       	push	r12
    2b16:	df 92       	push	r13
    2b18:	ef 92       	push	r14
    2b1a:	ff 92       	push	r15
    2b1c:	cf 93       	push	r28
    2b1e:	6a 01       	movw	r12, r20
    2b20:	7b 01       	movw	r14, r22
    2b22:	c2 2f       	mov	r28, r18
    2b24:	60 91 36 18 	lds	r22, 0x1836	; 0x801836 <pxCurrentTCB>
    2b28:	70 91 37 18 	lds	r23, 0x1837	; 0x801837 <pxCurrentTCB+0x1>
    2b2c:	62 5f       	subi	r22, 0xF2	; 242
    2b2e:	7f 4f       	sbci	r23, 0xFF	; 255
    2b30:	0e 94 93 09 	call	0x1326	; 0x1326 <vListInsertEnd>
    2b34:	cc 23       	and	r28, r28
    2b36:	21 f0       	breq	.+8      	; 0x2b40 <vTaskPlaceOnEventListRestricted+0x2c>
    2b38:	cc 24       	eor	r12, r12
    2b3a:	ca 94       	dec	r12
    2b3c:	dc 2c       	mov	r13, r12
    2b3e:	76 01       	movw	r14, r12
    2b40:	4c 2f       	mov	r20, r28
    2b42:	c7 01       	movw	r24, r14
    2b44:	b6 01       	movw	r22, r12
    2b46:	dd db       	rcall	.-2118   	; 0x2302 <prvAddCurrentTaskToDelayedList>
    2b48:	cf 91       	pop	r28
    2b4a:	ff 90       	pop	r15
    2b4c:	ef 90       	pop	r14
    2b4e:	df 90       	pop	r13
    2b50:	cf 90       	pop	r12
    2b52:	08 95       	ret

00002b54 <xTaskRemoveFromEventList>:
    2b54:	0f 93       	push	r16
    2b56:	1f 93       	push	r17
    2b58:	cf 93       	push	r28
    2b5a:	df 93       	push	r29
    2b5c:	dc 01       	movw	r26, r24
    2b5e:	17 96       	adiw	r26, 0x07	; 7
    2b60:	ed 91       	ld	r30, X+
    2b62:	fc 91       	ld	r31, X
    2b64:	18 97       	sbiw	r26, 0x08	; 8
    2b66:	c0 85       	ldd	r28, Z+8	; 0x08
    2b68:	d1 85       	ldd	r29, Z+9	; 0x09
    2b6a:	8e 01       	movw	r16, r28
    2b6c:	02 5f       	subi	r16, 0xF2	; 242
    2b6e:	1f 4f       	sbci	r17, 0xFF	; 255
    2b70:	c8 01       	movw	r24, r16
    2b72:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <uxListRemove>
    2b76:	80 91 bc 17 	lds	r24, 0x17BC	; 0x8017bc <uxSchedulerSuspended>
    2b7a:	81 11       	cpse	r24, r1
    2b7c:	16 c0       	rjmp	.+44     	; 0x2baa <xTaskRemoveFromEventList+0x56>
    2b7e:	0c 50       	subi	r16, 0x0C	; 12
    2b80:	11 09       	sbc	r17, r1
    2b82:	c8 01       	movw	r24, r16
    2b84:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <uxListRemove>
    2b88:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2b8a:	90 91 c8 17 	lds	r25, 0x17C8	; 0x8017c8 <uxTopReadyPriority>
    2b8e:	98 17       	cp	r25, r24
    2b90:	10 f4       	brcc	.+4      	; 0x2b96 <xTaskRemoveFromEventList+0x42>
    2b92:	80 93 c8 17 	sts	0x17C8, r24	; 0x8017c8 <uxTopReadyPriority>
    2b96:	bb e0       	ldi	r27, 0x0B	; 11
    2b98:	8b 9f       	mul	r24, r27
    2b9a:	c0 01       	movw	r24, r0
    2b9c:	11 24       	eor	r1, r1
    2b9e:	b8 01       	movw	r22, r16
    2ba0:	86 5f       	subi	r24, 0xF6	; 246
    2ba2:	97 4e       	sbci	r25, 0xE7	; 231
    2ba4:	0e 94 93 09 	call	0x1326	; 0x1326 <vListInsertEnd>
    2ba8:	05 c0       	rjmp	.+10     	; 0x2bb4 <xTaskRemoveFromEventList+0x60>
    2baa:	b8 01       	movw	r22, r16
    2bac:	85 ee       	ldi	r24, 0xE5	; 229
    2bae:	97 e1       	ldi	r25, 0x17	; 23
    2bb0:	0e 94 93 09 	call	0x1326	; 0x1326 <vListInsertEnd>
    2bb4:	e0 91 36 18 	lds	r30, 0x1836	; 0x801836 <pxCurrentTCB>
    2bb8:	f0 91 37 18 	lds	r31, 0x1837	; 0x801837 <pxCurrentTCB+0x1>
    2bbc:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2bbe:	82 8d       	ldd	r24, Z+26	; 0x1a
    2bc0:	89 17       	cp	r24, r25
    2bc2:	20 f4       	brcc	.+8      	; 0x2bcc <xTaskRemoveFromEventList+0x78>
    2bc4:	81 e0       	ldi	r24, 0x01	; 1
    2bc6:	80 93 c5 17 	sts	0x17C5, r24	; 0x8017c5 <xYieldPending>
    2bca:	01 c0       	rjmp	.+2      	; 0x2bce <xTaskRemoveFromEventList+0x7a>
    2bcc:	80 e0       	ldi	r24, 0x00	; 0
    2bce:	df 91       	pop	r29
    2bd0:	cf 91       	pop	r28
    2bd2:	1f 91       	pop	r17
    2bd4:	0f 91       	pop	r16
    2bd6:	08 95       	ret

00002bd8 <vTaskRemoveFromUnorderedEventList>:
    2bd8:	0f 93       	push	r16
    2bda:	1f 93       	push	r17
    2bdc:	cf 93       	push	r28
    2bde:	df 93       	push	r29
    2be0:	70 68       	ori	r23, 0x80	; 128
    2be2:	fc 01       	movw	r30, r24
    2be4:	40 83       	st	Z, r20
    2be6:	51 83       	std	Z+1, r21	; 0x01
    2be8:	62 83       	std	Z+2, r22	; 0x02
    2bea:	73 83       	std	Z+3, r23	; 0x03
    2bec:	c0 85       	ldd	r28, Z+8	; 0x08
    2bee:	d1 85       	ldd	r29, Z+9	; 0x09
    2bf0:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <uxListRemove>
    2bf4:	8e 01       	movw	r16, r28
    2bf6:	0e 5f       	subi	r16, 0xFE	; 254
    2bf8:	1f 4f       	sbci	r17, 0xFF	; 255
    2bfa:	c8 01       	movw	r24, r16
    2bfc:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <uxListRemove>
    2c00:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2c02:	90 91 c8 17 	lds	r25, 0x17C8	; 0x8017c8 <uxTopReadyPriority>
    2c06:	98 17       	cp	r25, r24
    2c08:	10 f4       	brcc	.+4      	; 0x2c0e <vTaskRemoveFromUnorderedEventList+0x36>
    2c0a:	80 93 c8 17 	sts	0x17C8, r24	; 0x8017c8 <uxTopReadyPriority>
    2c0e:	fb e0       	ldi	r31, 0x0B	; 11
    2c10:	8f 9f       	mul	r24, r31
    2c12:	c0 01       	movw	r24, r0
    2c14:	11 24       	eor	r1, r1
    2c16:	b8 01       	movw	r22, r16
    2c18:	86 5f       	subi	r24, 0xF6	; 246
    2c1a:	97 4e       	sbci	r25, 0xE7	; 231
    2c1c:	0e 94 93 09 	call	0x1326	; 0x1326 <vListInsertEnd>
    2c20:	e0 91 36 18 	lds	r30, 0x1836	; 0x801836 <pxCurrentTCB>
    2c24:	f0 91 37 18 	lds	r31, 0x1837	; 0x801837 <pxCurrentTCB+0x1>
    2c28:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2c2a:	82 8d       	ldd	r24, Z+26	; 0x1a
    2c2c:	89 17       	cp	r24, r25
    2c2e:	18 f4       	brcc	.+6      	; 0x2c36 <vTaskRemoveFromUnorderedEventList+0x5e>
    2c30:	81 e0       	ldi	r24, 0x01	; 1
    2c32:	80 93 c5 17 	sts	0x17C5, r24	; 0x8017c5 <xYieldPending>
    2c36:	df 91       	pop	r29
    2c38:	cf 91       	pop	r28
    2c3a:	1f 91       	pop	r17
    2c3c:	0f 91       	pop	r16
    2c3e:	08 95       	ret

00002c40 <vTaskSetTimeOutState>:
    2c40:	0f b6       	in	r0, 0x3f	; 63
    2c42:	f8 94       	cli
    2c44:	0f 92       	push	r0
    2c46:	20 91 c4 17 	lds	r18, 0x17C4	; 0x8017c4 <xNumOfOverflows>
    2c4a:	fc 01       	movw	r30, r24
    2c4c:	20 83       	st	Z, r18
    2c4e:	40 91 c9 17 	lds	r20, 0x17C9	; 0x8017c9 <xTickCount>
    2c52:	50 91 ca 17 	lds	r21, 0x17CA	; 0x8017ca <xTickCount+0x1>
    2c56:	60 91 cb 17 	lds	r22, 0x17CB	; 0x8017cb <xTickCount+0x2>
    2c5a:	70 91 cc 17 	lds	r23, 0x17CC	; 0x8017cc <xTickCount+0x3>
    2c5e:	41 83       	std	Z+1, r20	; 0x01
    2c60:	52 83       	std	Z+2, r21	; 0x02
    2c62:	63 83       	std	Z+3, r22	; 0x03
    2c64:	74 83       	std	Z+4, r23	; 0x04
    2c66:	0f 90       	pop	r0
    2c68:	0f be       	out	0x3f, r0	; 63
    2c6a:	08 95       	ret

00002c6c <vTaskInternalSetTimeOutState>:
    2c6c:	20 91 c4 17 	lds	r18, 0x17C4	; 0x8017c4 <xNumOfOverflows>
    2c70:	fc 01       	movw	r30, r24
    2c72:	20 83       	st	Z, r18
    2c74:	40 91 c9 17 	lds	r20, 0x17C9	; 0x8017c9 <xTickCount>
    2c78:	50 91 ca 17 	lds	r21, 0x17CA	; 0x8017ca <xTickCount+0x1>
    2c7c:	60 91 cb 17 	lds	r22, 0x17CB	; 0x8017cb <xTickCount+0x2>
    2c80:	70 91 cc 17 	lds	r23, 0x17CC	; 0x8017cc <xTickCount+0x3>
    2c84:	41 83       	std	Z+1, r20	; 0x01
    2c86:	52 83       	std	Z+2, r21	; 0x02
    2c88:	63 83       	std	Z+3, r22	; 0x03
    2c8a:	74 83       	std	Z+4, r23	; 0x04
    2c8c:	08 95       	ret

00002c8e <xTaskCheckForTimeOut>:
    2c8e:	cf 92       	push	r12
    2c90:	df 92       	push	r13
    2c92:	ef 92       	push	r14
    2c94:	ff 92       	push	r15
    2c96:	0f 93       	push	r16
    2c98:	1f 93       	push	r17
    2c9a:	cf 93       	push	r28
    2c9c:	df 93       	push	r29
    2c9e:	fb 01       	movw	r30, r22
    2ca0:	0f b6       	in	r0, 0x3f	; 63
    2ca2:	f8 94       	cli
    2ca4:	0f 92       	push	r0
    2ca6:	40 91 c9 17 	lds	r20, 0x17C9	; 0x8017c9 <xTickCount>
    2caa:	50 91 ca 17 	lds	r21, 0x17CA	; 0x8017ca <xTickCount+0x1>
    2cae:	60 91 cb 17 	lds	r22, 0x17CB	; 0x8017cb <xTickCount+0x2>
    2cb2:	70 91 cc 17 	lds	r23, 0x17CC	; 0x8017cc <xTickCount+0x3>
    2cb6:	00 81       	ld	r16, Z
    2cb8:	11 81       	ldd	r17, Z+1	; 0x01
    2cba:	22 81       	ldd	r18, Z+2	; 0x02
    2cbc:	33 81       	ldd	r19, Z+3	; 0x03
    2cbe:	0f 3f       	cpi	r16, 0xFF	; 255
    2cc0:	af ef       	ldi	r26, 0xFF	; 255
    2cc2:	1a 07       	cpc	r17, r26
    2cc4:	2a 07       	cpc	r18, r26
    2cc6:	3a 07       	cpc	r19, r26
    2cc8:	49 f1       	breq	.+82     	; 0x2d1c <xTaskCheckForTimeOut+0x8e>
    2cca:	ec 01       	movw	r28, r24
    2ccc:	c9 80       	ldd	r12, Y+1	; 0x01
    2cce:	da 80       	ldd	r13, Y+2	; 0x02
    2cd0:	eb 80       	ldd	r14, Y+3	; 0x03
    2cd2:	fc 80       	ldd	r15, Y+4	; 0x04
    2cd4:	a0 91 c4 17 	lds	r26, 0x17C4	; 0x8017c4 <xNumOfOverflows>
    2cd8:	b8 81       	ld	r27, Y
    2cda:	ba 17       	cp	r27, r26
    2cdc:	29 f0       	breq	.+10     	; 0x2ce8 <xTaskCheckForTimeOut+0x5a>
    2cde:	4c 15       	cp	r20, r12
    2ce0:	5d 05       	cpc	r21, r13
    2ce2:	6e 05       	cpc	r22, r14
    2ce4:	7f 05       	cpc	r23, r15
    2ce6:	e0 f4       	brcc	.+56     	; 0x2d20 <xTaskCheckForTimeOut+0x92>
    2ce8:	4c 19       	sub	r20, r12
    2cea:	5d 09       	sbc	r21, r13
    2cec:	6e 09       	sbc	r22, r14
    2cee:	7f 09       	sbc	r23, r15
    2cf0:	40 17       	cp	r20, r16
    2cf2:	51 07       	cpc	r21, r17
    2cf4:	62 07       	cpc	r22, r18
    2cf6:	73 07       	cpc	r23, r19
    2cf8:	58 f4       	brcc	.+22     	; 0x2d10 <xTaskCheckForTimeOut+0x82>
    2cfa:	04 1b       	sub	r16, r20
    2cfc:	15 0b       	sbc	r17, r21
    2cfe:	26 0b       	sbc	r18, r22
    2d00:	37 0b       	sbc	r19, r23
    2d02:	00 83       	st	Z, r16
    2d04:	11 83       	std	Z+1, r17	; 0x01
    2d06:	22 83       	std	Z+2, r18	; 0x02
    2d08:	33 83       	std	Z+3, r19	; 0x03
    2d0a:	b0 df       	rcall	.-160    	; 0x2c6c <vTaskInternalSetTimeOutState>
    2d0c:	80 e0       	ldi	r24, 0x00	; 0
    2d0e:	09 c0       	rjmp	.+18     	; 0x2d22 <xTaskCheckForTimeOut+0x94>
    2d10:	10 82       	st	Z, r1
    2d12:	11 82       	std	Z+1, r1	; 0x01
    2d14:	12 82       	std	Z+2, r1	; 0x02
    2d16:	13 82       	std	Z+3, r1	; 0x03
    2d18:	81 e0       	ldi	r24, 0x01	; 1
    2d1a:	03 c0       	rjmp	.+6      	; 0x2d22 <xTaskCheckForTimeOut+0x94>
    2d1c:	80 e0       	ldi	r24, 0x00	; 0
    2d1e:	01 c0       	rjmp	.+2      	; 0x2d22 <xTaskCheckForTimeOut+0x94>
    2d20:	81 e0       	ldi	r24, 0x01	; 1
    2d22:	0f 90       	pop	r0
    2d24:	0f be       	out	0x3f, r0	; 63
    2d26:	df 91       	pop	r29
    2d28:	cf 91       	pop	r28
    2d2a:	1f 91       	pop	r17
    2d2c:	0f 91       	pop	r16
    2d2e:	ff 90       	pop	r15
    2d30:	ef 90       	pop	r14
    2d32:	df 90       	pop	r13
    2d34:	cf 90       	pop	r12
    2d36:	08 95       	ret

00002d38 <vTaskMissedYield>:
    2d38:	81 e0       	ldi	r24, 0x01	; 1
    2d3a:	80 93 c5 17 	sts	0x17C5, r24	; 0x8017c5 <xYieldPending>
    2d3e:	08 95       	ret

00002d40 <xTaskGetCurrentTaskHandle>:
    2d40:	80 91 36 18 	lds	r24, 0x1836	; 0x801836 <pxCurrentTCB>
    2d44:	90 91 37 18 	lds	r25, 0x1837	; 0x801837 <pxCurrentTCB+0x1>
    2d48:	08 95       	ret

00002d4a <xTaskGetSchedulerState>:
    2d4a:	80 91 c7 17 	lds	r24, 0x17C7	; 0x8017c7 <xSchedulerRunning>
    2d4e:	88 23       	and	r24, r24
    2d50:	31 f0       	breq	.+12     	; 0x2d5e <xTaskGetSchedulerState+0x14>
    2d52:	80 91 bc 17 	lds	r24, 0x17BC	; 0x8017bc <uxSchedulerSuspended>
    2d56:	88 23       	and	r24, r24
    2d58:	21 f0       	breq	.+8      	; 0x2d62 <xTaskGetSchedulerState+0x18>
    2d5a:	80 e0       	ldi	r24, 0x00	; 0
    2d5c:	08 95       	ret
    2d5e:	81 e0       	ldi	r24, 0x01	; 1
    2d60:	08 95       	ret
    2d62:	82 e0       	ldi	r24, 0x02	; 2
    2d64:	08 95       	ret

00002d66 <xTaskPriorityDisinherit>:
    2d66:	0f 93       	push	r16
    2d68:	1f 93       	push	r17
    2d6a:	cf 93       	push	r28
    2d6c:	df 93       	push	r29
    2d6e:	fc 01       	movw	r30, r24
    2d70:	89 2b       	or	r24, r25
    2d72:	79 f1       	breq	.+94     	; 0x2dd2 <xTaskPriorityDisinherit+0x6c>
    2d74:	80 a5       	ldd	r24, Z+40	; 0x28
    2d76:	81 50       	subi	r24, 0x01	; 1
    2d78:	80 a7       	std	Z+40, r24	; 0x28
    2d7a:	22 8d       	ldd	r18, Z+26	; 0x1a
    2d7c:	97 a1       	ldd	r25, Z+39	; 0x27
    2d7e:	29 17       	cp	r18, r25
    2d80:	51 f1       	breq	.+84     	; 0x2dd6 <xTaskPriorityDisinherit+0x70>
    2d82:	81 11       	cpse	r24, r1
    2d84:	2a c0       	rjmp	.+84     	; 0x2dda <xTaskPriorityDisinherit+0x74>
    2d86:	ef 01       	movw	r28, r30
    2d88:	8f 01       	movw	r16, r30
    2d8a:	0e 5f       	subi	r16, 0xFE	; 254
    2d8c:	1f 4f       	sbci	r17, 0xFF	; 255
    2d8e:	c8 01       	movw	r24, r16
    2d90:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <uxListRemove>
    2d94:	8f a1       	ldd	r24, Y+39	; 0x27
    2d96:	8a 8f       	std	Y+26, r24	; 0x1a
    2d98:	44 e0       	ldi	r20, 0x04	; 4
    2d9a:	50 e0       	ldi	r21, 0x00	; 0
    2d9c:	60 e0       	ldi	r22, 0x00	; 0
    2d9e:	70 e0       	ldi	r23, 0x00	; 0
    2da0:	48 1b       	sub	r20, r24
    2da2:	51 09       	sbc	r21, r1
    2da4:	61 09       	sbc	r22, r1
    2da6:	71 09       	sbc	r23, r1
    2da8:	4e 87       	std	Y+14, r20	; 0x0e
    2daa:	5f 87       	std	Y+15, r21	; 0x0f
    2dac:	68 8b       	std	Y+16, r22	; 0x10
    2dae:	79 8b       	std	Y+17, r23	; 0x11
    2db0:	90 91 c8 17 	lds	r25, 0x17C8	; 0x8017c8 <uxTopReadyPriority>
    2db4:	98 17       	cp	r25, r24
    2db6:	10 f4       	brcc	.+4      	; 0x2dbc <xTaskPriorityDisinherit+0x56>
    2db8:	80 93 c8 17 	sts	0x17C8, r24	; 0x8017c8 <uxTopReadyPriority>
    2dbc:	2b e0       	ldi	r18, 0x0B	; 11
    2dbe:	82 9f       	mul	r24, r18
    2dc0:	c0 01       	movw	r24, r0
    2dc2:	11 24       	eor	r1, r1
    2dc4:	b8 01       	movw	r22, r16
    2dc6:	86 5f       	subi	r24, 0xF6	; 246
    2dc8:	97 4e       	sbci	r25, 0xE7	; 231
    2dca:	0e 94 93 09 	call	0x1326	; 0x1326 <vListInsertEnd>
    2dce:	81 e0       	ldi	r24, 0x01	; 1
    2dd0:	05 c0       	rjmp	.+10     	; 0x2ddc <xTaskPriorityDisinherit+0x76>
    2dd2:	80 e0       	ldi	r24, 0x00	; 0
    2dd4:	03 c0       	rjmp	.+6      	; 0x2ddc <xTaskPriorityDisinherit+0x76>
    2dd6:	80 e0       	ldi	r24, 0x00	; 0
    2dd8:	01 c0       	rjmp	.+2      	; 0x2ddc <xTaskPriorityDisinherit+0x76>
    2dda:	80 e0       	ldi	r24, 0x00	; 0
    2ddc:	df 91       	pop	r29
    2dde:	cf 91       	pop	r28
    2de0:	1f 91       	pop	r17
    2de2:	0f 91       	pop	r16
    2de4:	08 95       	ret

00002de6 <uxTaskResetEventItemValue>:
    2de6:	cf 92       	push	r12
    2de8:	df 92       	push	r13
    2dea:	ef 92       	push	r14
    2dec:	ff 92       	push	r15
    2dee:	e0 91 36 18 	lds	r30, 0x1836	; 0x801836 <pxCurrentTCB>
    2df2:	f0 91 37 18 	lds	r31, 0x1837	; 0x801837 <pxCurrentTCB+0x1>
    2df6:	66 85       	ldd	r22, Z+14	; 0x0e
    2df8:	77 85       	ldd	r23, Z+15	; 0x0f
    2dfa:	80 89       	ldd	r24, Z+16	; 0x10
    2dfc:	91 89       	ldd	r25, Z+17	; 0x11
    2dfe:	e0 91 36 18 	lds	r30, 0x1836	; 0x801836 <pxCurrentTCB>
    2e02:	f0 91 37 18 	lds	r31, 0x1837	; 0x801837 <pxCurrentTCB+0x1>
    2e06:	a0 91 36 18 	lds	r26, 0x1836	; 0x801836 <pxCurrentTCB>
    2e0a:	b0 91 37 18 	lds	r27, 0x1837	; 0x801837 <pxCurrentTCB+0x1>
    2e0e:	5a 96       	adiw	r26, 0x1a	; 26
    2e10:	2c 91       	ld	r18, X
    2e12:	c1 2c       	mov	r12, r1
    2e14:	d1 2c       	mov	r13, r1
    2e16:	76 01       	movw	r14, r12
    2e18:	68 94       	set
    2e1a:	c2 f8       	bld	r12, 2
    2e1c:	c2 1a       	sub	r12, r18
    2e1e:	d1 08       	sbc	r13, r1
    2e20:	e1 08       	sbc	r14, r1
    2e22:	f1 08       	sbc	r15, r1
    2e24:	c6 86       	std	Z+14, r12	; 0x0e
    2e26:	d7 86       	std	Z+15, r13	; 0x0f
    2e28:	e0 8a       	std	Z+16, r14	; 0x10
    2e2a:	f1 8a       	std	Z+17, r15	; 0x11
    2e2c:	ff 90       	pop	r15
    2e2e:	ef 90       	pop	r14
    2e30:	df 90       	pop	r13
    2e32:	cf 90       	pop	r12
    2e34:	08 95       	ret

00002e36 <xTaskNotifyWait>:
    2e36:	4f 92       	push	r4
    2e38:	5f 92       	push	r5
    2e3a:	6f 92       	push	r6
    2e3c:	7f 92       	push	r7
    2e3e:	8f 92       	push	r8
    2e40:	9f 92       	push	r9
    2e42:	af 92       	push	r10
    2e44:	bf 92       	push	r11
    2e46:	cf 92       	push	r12
    2e48:	df 92       	push	r13
    2e4a:	ef 92       	push	r14
    2e4c:	ff 92       	push	r15
    2e4e:	0f 93       	push	r16
    2e50:	1f 93       	push	r17
    2e52:	49 01       	movw	r8, r18
    2e54:	5a 01       	movw	r10, r20
    2e56:	0f b6       	in	r0, 0x3f	; 63
    2e58:	f8 94       	cli
    2e5a:	0f 92       	push	r0
    2e5c:	e0 91 36 18 	lds	r30, 0x1836	; 0x801836 <pxCurrentTCB>
    2e60:	f0 91 37 18 	lds	r31, 0x1837	; 0x801837 <pxCurrentTCB+0x1>
    2e64:	27 a5       	ldd	r18, Z+47	; 0x2f
    2e66:	22 30       	cpi	r18, 0x02	; 2
    2e68:	39 f1       	breq	.+78     	; 0x2eb8 <xTaskNotifyWait+0x82>
    2e6a:	e0 91 36 18 	lds	r30, 0x1836	; 0x801836 <pxCurrentTCB>
    2e6e:	f0 91 37 18 	lds	r31, 0x1837	; 0x801837 <pxCurrentTCB+0x1>
    2e72:	43 a4       	ldd	r4, Z+43	; 0x2b
    2e74:	54 a4       	ldd	r5, Z+44	; 0x2c
    2e76:	65 a4       	ldd	r6, Z+45	; 0x2d
    2e78:	76 a4       	ldd	r7, Z+46	; 0x2e
    2e7a:	dc 01       	movw	r26, r24
    2e7c:	cb 01       	movw	r24, r22
    2e7e:	80 95       	com	r24
    2e80:	90 95       	com	r25
    2e82:	a0 95       	com	r26
    2e84:	b0 95       	com	r27
    2e86:	84 21       	and	r24, r4
    2e88:	95 21       	and	r25, r5
    2e8a:	a6 21       	and	r26, r6
    2e8c:	b7 21       	and	r27, r7
    2e8e:	83 a7       	std	Z+43, r24	; 0x2b
    2e90:	94 a7       	std	Z+44, r25	; 0x2c
    2e92:	a5 a7       	std	Z+45, r26	; 0x2d
    2e94:	b6 a7       	std	Z+46, r27	; 0x2e
    2e96:	e0 91 36 18 	lds	r30, 0x1836	; 0x801836 <pxCurrentTCB>
    2e9a:	f0 91 37 18 	lds	r31, 0x1837	; 0x801837 <pxCurrentTCB+0x1>
    2e9e:	81 e0       	ldi	r24, 0x01	; 1
    2ea0:	87 a7       	std	Z+47, r24	; 0x2f
    2ea2:	c1 14       	cp	r12, r1
    2ea4:	d1 04       	cpc	r13, r1
    2ea6:	e1 04       	cpc	r14, r1
    2ea8:	f1 04       	cpc	r15, r1
    2eaa:	31 f0       	breq	.+12     	; 0x2eb8 <xTaskNotifyWait+0x82>
    2eac:	41 e0       	ldi	r20, 0x01	; 1
    2eae:	c7 01       	movw	r24, r14
    2eb0:	b6 01       	movw	r22, r12
    2eb2:	27 da       	rcall	.-2994   	; 0x2302 <prvAddCurrentTaskToDelayedList>
    2eb4:	0e 94 c6 0a 	call	0x158c	; 0x158c <vPortYield>
    2eb8:	0f 90       	pop	r0
    2eba:	0f be       	out	0x3f, r0	; 63
    2ebc:	0f b6       	in	r0, 0x3f	; 63
    2ebe:	f8 94       	cli
    2ec0:	0f 92       	push	r0
    2ec2:	01 15       	cp	r16, r1
    2ec4:	11 05       	cpc	r17, r1
    2ec6:	69 f0       	breq	.+26     	; 0x2ee2 <xTaskNotifyWait+0xac>
    2ec8:	e0 91 36 18 	lds	r30, 0x1836	; 0x801836 <pxCurrentTCB>
    2ecc:	f0 91 37 18 	lds	r31, 0x1837	; 0x801837 <pxCurrentTCB+0x1>
    2ed0:	83 a5       	ldd	r24, Z+43	; 0x2b
    2ed2:	94 a5       	ldd	r25, Z+44	; 0x2c
    2ed4:	a5 a5       	ldd	r26, Z+45	; 0x2d
    2ed6:	b6 a5       	ldd	r27, Z+46	; 0x2e
    2ed8:	f8 01       	movw	r30, r16
    2eda:	80 83       	st	Z, r24
    2edc:	91 83       	std	Z+1, r25	; 0x01
    2ede:	a2 83       	std	Z+2, r26	; 0x02
    2ee0:	b3 83       	std	Z+3, r27	; 0x03
    2ee2:	e0 91 36 18 	lds	r30, 0x1836	; 0x801836 <pxCurrentTCB>
    2ee6:	f0 91 37 18 	lds	r31, 0x1837	; 0x801837 <pxCurrentTCB+0x1>
    2eea:	87 a5       	ldd	r24, Z+47	; 0x2f
    2eec:	82 30       	cpi	r24, 0x02	; 2
    2eee:	b1 f4       	brne	.+44     	; 0x2f1c <xTaskNotifyWait+0xe6>
    2ef0:	e0 91 36 18 	lds	r30, 0x1836	; 0x801836 <pxCurrentTCB>
    2ef4:	f0 91 37 18 	lds	r31, 0x1837	; 0x801837 <pxCurrentTCB+0x1>
    2ef8:	83 a5       	ldd	r24, Z+43	; 0x2b
    2efa:	94 a5       	ldd	r25, Z+44	; 0x2c
    2efc:	a5 a5       	ldd	r26, Z+45	; 0x2d
    2efe:	b6 a5       	ldd	r27, Z+46	; 0x2e
    2f00:	80 94       	com	r8
    2f02:	90 94       	com	r9
    2f04:	a0 94       	com	r10
    2f06:	b0 94       	com	r11
    2f08:	88 22       	and	r8, r24
    2f0a:	99 22       	and	r9, r25
    2f0c:	aa 22       	and	r10, r26
    2f0e:	bb 22       	and	r11, r27
    2f10:	83 a6       	std	Z+43, r8	; 0x2b
    2f12:	94 a6       	std	Z+44, r9	; 0x2c
    2f14:	a5 a6       	std	Z+45, r10	; 0x2d
    2f16:	b6 a6       	std	Z+46, r11	; 0x2e
    2f18:	81 e0       	ldi	r24, 0x01	; 1
    2f1a:	01 c0       	rjmp	.+2      	; 0x2f1e <xTaskNotifyWait+0xe8>
    2f1c:	80 e0       	ldi	r24, 0x00	; 0
    2f1e:	e0 91 36 18 	lds	r30, 0x1836	; 0x801836 <pxCurrentTCB>
    2f22:	f0 91 37 18 	lds	r31, 0x1837	; 0x801837 <pxCurrentTCB+0x1>
    2f26:	17 a6       	std	Z+47, r1	; 0x2f
    2f28:	0f 90       	pop	r0
    2f2a:	0f be       	out	0x3f, r0	; 63
    2f2c:	1f 91       	pop	r17
    2f2e:	0f 91       	pop	r16
    2f30:	ff 90       	pop	r15
    2f32:	ef 90       	pop	r14
    2f34:	df 90       	pop	r13
    2f36:	cf 90       	pop	r12
    2f38:	bf 90       	pop	r11
    2f3a:	af 90       	pop	r10
    2f3c:	9f 90       	pop	r9
    2f3e:	8f 90       	pop	r8
    2f40:	7f 90       	pop	r7
    2f42:	6f 90       	pop	r6
    2f44:	5f 90       	pop	r5
    2f46:	4f 90       	pop	r4
    2f48:	08 95       	ret

00002f4a <xTaskGenericNotify>:
    2f4a:	0f 93       	push	r16
    2f4c:	1f 93       	push	r17
    2f4e:	cf 93       	push	r28
    2f50:	df 93       	push	r29
    2f52:	fc 01       	movw	r30, r24
    2f54:	0f b6       	in	r0, 0x3f	; 63
    2f56:	f8 94       	cli
    2f58:	0f 92       	push	r0
    2f5a:	01 15       	cp	r16, r1
    2f5c:	11 05       	cpc	r17, r1
    2f5e:	49 f0       	breq	.+18     	; 0x2f72 <xTaskGenericNotify+0x28>
    2f60:	83 a5       	ldd	r24, Z+43	; 0x2b
    2f62:	94 a5       	ldd	r25, Z+44	; 0x2c
    2f64:	a5 a5       	ldd	r26, Z+45	; 0x2d
    2f66:	b6 a5       	ldd	r27, Z+46	; 0x2e
    2f68:	e8 01       	movw	r28, r16
    2f6a:	88 83       	st	Y, r24
    2f6c:	99 83       	std	Y+1, r25	; 0x01
    2f6e:	aa 83       	std	Y+2, r26	; 0x02
    2f70:	bb 83       	std	Y+3, r27	; 0x03
    2f72:	87 a5       	ldd	r24, Z+47	; 0x2f
    2f74:	92 e0       	ldi	r25, 0x02	; 2
    2f76:	97 a7       	std	Z+47, r25	; 0x2f
    2f78:	22 30       	cpi	r18, 0x02	; 2
    2f7a:	b1 f0       	breq	.+44     	; 0x2fa8 <xTaskGenericNotify+0x5e>
    2f7c:	18 f4       	brcc	.+6      	; 0x2f84 <xTaskGenericNotify+0x3a>
    2f7e:	21 30       	cpi	r18, 0x01	; 1
    2f80:	31 f0       	breq	.+12     	; 0x2f8e <xTaskGenericNotify+0x44>
    2f82:	2a c0       	rjmp	.+84     	; 0x2fd8 <xTaskGenericNotify+0x8e>
    2f84:	23 30       	cpi	r18, 0x03	; 3
    2f86:	e9 f0       	breq	.+58     	; 0x2fc2 <xTaskGenericNotify+0x78>
    2f88:	24 30       	cpi	r18, 0x04	; 4
    2f8a:	01 f1       	breq	.+64     	; 0x2fcc <xTaskGenericNotify+0x82>
    2f8c:	25 c0       	rjmp	.+74     	; 0x2fd8 <xTaskGenericNotify+0x8e>
    2f8e:	03 a5       	ldd	r16, Z+43	; 0x2b
    2f90:	14 a5       	ldd	r17, Z+44	; 0x2c
    2f92:	25 a5       	ldd	r18, Z+45	; 0x2d
    2f94:	36 a5       	ldd	r19, Z+46	; 0x2e
    2f96:	40 2b       	or	r20, r16
    2f98:	51 2b       	or	r21, r17
    2f9a:	62 2b       	or	r22, r18
    2f9c:	73 2b       	or	r23, r19
    2f9e:	43 a7       	std	Z+43, r20	; 0x2b
    2fa0:	54 a7       	std	Z+44, r21	; 0x2c
    2fa2:	65 a7       	std	Z+45, r22	; 0x2d
    2fa4:	76 a7       	std	Z+46, r23	; 0x2e
    2fa6:	18 c0       	rjmp	.+48     	; 0x2fd8 <xTaskGenericNotify+0x8e>
    2fa8:	43 a5       	ldd	r20, Z+43	; 0x2b
    2faa:	54 a5       	ldd	r21, Z+44	; 0x2c
    2fac:	65 a5       	ldd	r22, Z+45	; 0x2d
    2fae:	76 a5       	ldd	r23, Z+46	; 0x2e
    2fb0:	4f 5f       	subi	r20, 0xFF	; 255
    2fb2:	5f 4f       	sbci	r21, 0xFF	; 255
    2fb4:	6f 4f       	sbci	r22, 0xFF	; 255
    2fb6:	7f 4f       	sbci	r23, 0xFF	; 255
    2fb8:	43 a7       	std	Z+43, r20	; 0x2b
    2fba:	54 a7       	std	Z+44, r21	; 0x2c
    2fbc:	65 a7       	std	Z+45, r22	; 0x2d
    2fbe:	76 a7       	std	Z+46, r23	; 0x2e
    2fc0:	0b c0       	rjmp	.+22     	; 0x2fd8 <xTaskGenericNotify+0x8e>
    2fc2:	43 a7       	std	Z+43, r20	; 0x2b
    2fc4:	54 a7       	std	Z+44, r21	; 0x2c
    2fc6:	65 a7       	std	Z+45, r22	; 0x2d
    2fc8:	76 a7       	std	Z+46, r23	; 0x2e
    2fca:	06 c0       	rjmp	.+12     	; 0x2fd8 <xTaskGenericNotify+0x8e>
    2fcc:	82 30       	cpi	r24, 0x02	; 2
    2fce:	49 f1       	breq	.+82     	; 0x3022 <xTaskGenericNotify+0xd8>
    2fd0:	43 a7       	std	Z+43, r20	; 0x2b
    2fd2:	54 a7       	std	Z+44, r21	; 0x2c
    2fd4:	65 a7       	std	Z+45, r22	; 0x2d
    2fd6:	76 a7       	std	Z+46, r23	; 0x2e
    2fd8:	81 30       	cpi	r24, 0x01	; 1
    2fda:	29 f5       	brne	.+74     	; 0x3026 <xTaskGenericNotify+0xdc>
    2fdc:	ef 01       	movw	r28, r30
    2fde:	8f 01       	movw	r16, r30
    2fe0:	0e 5f       	subi	r16, 0xFE	; 254
    2fe2:	1f 4f       	sbci	r17, 0xFF	; 255
    2fe4:	c8 01       	movw	r24, r16
    2fe6:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <uxListRemove>
    2fea:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2fec:	90 91 c8 17 	lds	r25, 0x17C8	; 0x8017c8 <uxTopReadyPriority>
    2ff0:	98 17       	cp	r25, r24
    2ff2:	10 f4       	brcc	.+4      	; 0x2ff8 <xTaskGenericNotify+0xae>
    2ff4:	80 93 c8 17 	sts	0x17C8, r24	; 0x8017c8 <uxTopReadyPriority>
    2ff8:	2b e0       	ldi	r18, 0x0B	; 11
    2ffa:	82 9f       	mul	r24, r18
    2ffc:	c0 01       	movw	r24, r0
    2ffe:	11 24       	eor	r1, r1
    3000:	b8 01       	movw	r22, r16
    3002:	86 5f       	subi	r24, 0xF6	; 246
    3004:	97 4e       	sbci	r25, 0xE7	; 231
    3006:	0e 94 93 09 	call	0x1326	; 0x1326 <vListInsertEnd>
    300a:	e0 91 36 18 	lds	r30, 0x1836	; 0x801836 <pxCurrentTCB>
    300e:	f0 91 37 18 	lds	r31, 0x1837	; 0x801837 <pxCurrentTCB+0x1>
    3012:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3014:	82 8d       	ldd	r24, Z+26	; 0x1a
    3016:	89 17       	cp	r24, r25
    3018:	40 f4       	brcc	.+16     	; 0x302a <xTaskGenericNotify+0xe0>
    301a:	0e 94 c6 0a 	call	0x158c	; 0x158c <vPortYield>
    301e:	81 e0       	ldi	r24, 0x01	; 1
    3020:	05 c0       	rjmp	.+10     	; 0x302c <xTaskGenericNotify+0xe2>
    3022:	80 e0       	ldi	r24, 0x00	; 0
    3024:	03 c0       	rjmp	.+6      	; 0x302c <xTaskGenericNotify+0xe2>
    3026:	81 e0       	ldi	r24, 0x01	; 1
    3028:	01 c0       	rjmp	.+2      	; 0x302c <xTaskGenericNotify+0xe2>
    302a:	81 e0       	ldi	r24, 0x01	; 1
    302c:	0f 90       	pop	r0
    302e:	0f be       	out	0x3f, r0	; 63
    3030:	df 91       	pop	r29
    3032:	cf 91       	pop	r28
    3034:	1f 91       	pop	r17
    3036:	0f 91       	pop	r16
    3038:	08 95       	ret

0000303a <xTaskGenericNotifyFromISR>:
    303a:	ef 92       	push	r14
    303c:	ff 92       	push	r15
    303e:	0f 93       	push	r16
    3040:	1f 93       	push	r17
    3042:	cf 93       	push	r28
    3044:	df 93       	push	r29
    3046:	fc 01       	movw	r30, r24
    3048:	01 15       	cp	r16, r1
    304a:	11 05       	cpc	r17, r1
    304c:	49 f0       	breq	.+18     	; 0x3060 <xTaskGenericNotifyFromISR+0x26>
    304e:	83 a5       	ldd	r24, Z+43	; 0x2b
    3050:	94 a5       	ldd	r25, Z+44	; 0x2c
    3052:	a5 a5       	ldd	r26, Z+45	; 0x2d
    3054:	b6 a5       	ldd	r27, Z+46	; 0x2e
    3056:	e8 01       	movw	r28, r16
    3058:	88 83       	st	Y, r24
    305a:	99 83       	std	Y+1, r25	; 0x01
    305c:	aa 83       	std	Y+2, r26	; 0x02
    305e:	bb 83       	std	Y+3, r27	; 0x03
    3060:	87 a5       	ldd	r24, Z+47	; 0x2f
    3062:	92 e0       	ldi	r25, 0x02	; 2
    3064:	97 a7       	std	Z+47, r25	; 0x2f
    3066:	22 30       	cpi	r18, 0x02	; 2
    3068:	b1 f0       	breq	.+44     	; 0x3096 <xTaskGenericNotifyFromISR+0x5c>
    306a:	18 f4       	brcc	.+6      	; 0x3072 <xTaskGenericNotifyFromISR+0x38>
    306c:	21 30       	cpi	r18, 0x01	; 1
    306e:	31 f0       	breq	.+12     	; 0x307c <xTaskGenericNotifyFromISR+0x42>
    3070:	2a c0       	rjmp	.+84     	; 0x30c6 <xTaskGenericNotifyFromISR+0x8c>
    3072:	23 30       	cpi	r18, 0x03	; 3
    3074:	e9 f0       	breq	.+58     	; 0x30b0 <xTaskGenericNotifyFromISR+0x76>
    3076:	24 30       	cpi	r18, 0x04	; 4
    3078:	01 f1       	breq	.+64     	; 0x30ba <xTaskGenericNotifyFromISR+0x80>
    307a:	25 c0       	rjmp	.+74     	; 0x30c6 <xTaskGenericNotifyFromISR+0x8c>
    307c:	03 a5       	ldd	r16, Z+43	; 0x2b
    307e:	14 a5       	ldd	r17, Z+44	; 0x2c
    3080:	25 a5       	ldd	r18, Z+45	; 0x2d
    3082:	36 a5       	ldd	r19, Z+46	; 0x2e
    3084:	40 2b       	or	r20, r16
    3086:	51 2b       	or	r21, r17
    3088:	62 2b       	or	r22, r18
    308a:	73 2b       	or	r23, r19
    308c:	43 a7       	std	Z+43, r20	; 0x2b
    308e:	54 a7       	std	Z+44, r21	; 0x2c
    3090:	65 a7       	std	Z+45, r22	; 0x2d
    3092:	76 a7       	std	Z+46, r23	; 0x2e
    3094:	18 c0       	rjmp	.+48     	; 0x30c6 <xTaskGenericNotifyFromISR+0x8c>
    3096:	43 a5       	ldd	r20, Z+43	; 0x2b
    3098:	54 a5       	ldd	r21, Z+44	; 0x2c
    309a:	65 a5       	ldd	r22, Z+45	; 0x2d
    309c:	76 a5       	ldd	r23, Z+46	; 0x2e
    309e:	4f 5f       	subi	r20, 0xFF	; 255
    30a0:	5f 4f       	sbci	r21, 0xFF	; 255
    30a2:	6f 4f       	sbci	r22, 0xFF	; 255
    30a4:	7f 4f       	sbci	r23, 0xFF	; 255
    30a6:	43 a7       	std	Z+43, r20	; 0x2b
    30a8:	54 a7       	std	Z+44, r21	; 0x2c
    30aa:	65 a7       	std	Z+45, r22	; 0x2d
    30ac:	76 a7       	std	Z+46, r23	; 0x2e
    30ae:	0b c0       	rjmp	.+22     	; 0x30c6 <xTaskGenericNotifyFromISR+0x8c>
    30b0:	43 a7       	std	Z+43, r20	; 0x2b
    30b2:	54 a7       	std	Z+44, r21	; 0x2c
    30b4:	65 a7       	std	Z+45, r22	; 0x2d
    30b6:	76 a7       	std	Z+46, r23	; 0x2e
    30b8:	06 c0       	rjmp	.+12     	; 0x30c6 <xTaskGenericNotifyFromISR+0x8c>
    30ba:	82 30       	cpi	r24, 0x02	; 2
    30bc:	d9 f1       	breq	.+118    	; 0x3134 <xTaskGenericNotifyFromISR+0xfa>
    30be:	43 a7       	std	Z+43, r20	; 0x2b
    30c0:	54 a7       	std	Z+44, r21	; 0x2c
    30c2:	65 a7       	std	Z+45, r22	; 0x2d
    30c4:	76 a7       	std	Z+46, r23	; 0x2e
    30c6:	81 30       	cpi	r24, 0x01	; 1
    30c8:	b9 f5       	brne	.+110    	; 0x3138 <xTaskGenericNotifyFromISR+0xfe>
    30ca:	ef 01       	movw	r28, r30
    30cc:	80 91 bc 17 	lds	r24, 0x17BC	; 0x8017bc <uxSchedulerSuspended>
    30d0:	81 11       	cpse	r24, r1
    30d2:	17 c0       	rjmp	.+46     	; 0x3102 <xTaskGenericNotifyFromISR+0xc8>
    30d4:	8f 01       	movw	r16, r30
    30d6:	0e 5f       	subi	r16, 0xFE	; 254
    30d8:	1f 4f       	sbci	r17, 0xFF	; 255
    30da:	c8 01       	movw	r24, r16
    30dc:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <uxListRemove>
    30e0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    30e2:	90 91 c8 17 	lds	r25, 0x17C8	; 0x8017c8 <uxTopReadyPriority>
    30e6:	98 17       	cp	r25, r24
    30e8:	10 f4       	brcc	.+4      	; 0x30ee <xTaskGenericNotifyFromISR+0xb4>
    30ea:	80 93 c8 17 	sts	0x17C8, r24	; 0x8017c8 <uxTopReadyPriority>
    30ee:	eb e0       	ldi	r30, 0x0B	; 11
    30f0:	8e 9f       	mul	r24, r30
    30f2:	c0 01       	movw	r24, r0
    30f4:	11 24       	eor	r1, r1
    30f6:	b8 01       	movw	r22, r16
    30f8:	86 5f       	subi	r24, 0xF6	; 246
    30fa:	97 4e       	sbci	r25, 0xE7	; 231
    30fc:	0e 94 93 09 	call	0x1326	; 0x1326 <vListInsertEnd>
    3100:	07 c0       	rjmp	.+14     	; 0x3110 <xTaskGenericNotifyFromISR+0xd6>
    3102:	bf 01       	movw	r22, r30
    3104:	62 5f       	subi	r22, 0xF2	; 242
    3106:	7f 4f       	sbci	r23, 0xFF	; 255
    3108:	85 ee       	ldi	r24, 0xE5	; 229
    310a:	97 e1       	ldi	r25, 0x17	; 23
    310c:	0e 94 93 09 	call	0x1326	; 0x1326 <vListInsertEnd>
    3110:	e0 91 36 18 	lds	r30, 0x1836	; 0x801836 <pxCurrentTCB>
    3114:	f0 91 37 18 	lds	r31, 0x1837	; 0x801837 <pxCurrentTCB+0x1>
    3118:	9a 8d       	ldd	r25, Y+26	; 0x1a
    311a:	82 8d       	ldd	r24, Z+26	; 0x1a
    311c:	89 17       	cp	r24, r25
    311e:	70 f4       	brcc	.+28     	; 0x313c <xTaskGenericNotifyFromISR+0x102>
    3120:	e1 14       	cp	r14, r1
    3122:	f1 04       	cpc	r15, r1
    3124:	19 f0       	breq	.+6      	; 0x312c <xTaskGenericNotifyFromISR+0xf2>
    3126:	81 e0       	ldi	r24, 0x01	; 1
    3128:	e7 01       	movw	r28, r14
    312a:	88 83       	st	Y, r24
    312c:	81 e0       	ldi	r24, 0x01	; 1
    312e:	80 93 c5 17 	sts	0x17C5, r24	; 0x8017c5 <xYieldPending>
    3132:	05 c0       	rjmp	.+10     	; 0x313e <xTaskGenericNotifyFromISR+0x104>
    3134:	80 e0       	ldi	r24, 0x00	; 0
    3136:	03 c0       	rjmp	.+6      	; 0x313e <xTaskGenericNotifyFromISR+0x104>
    3138:	81 e0       	ldi	r24, 0x01	; 1
    313a:	01 c0       	rjmp	.+2      	; 0x313e <xTaskGenericNotifyFromISR+0x104>
    313c:	81 e0       	ldi	r24, 0x01	; 1
    313e:	df 91       	pop	r29
    3140:	cf 91       	pop	r28
    3142:	1f 91       	pop	r17
    3144:	0f 91       	pop	r16
    3146:	ff 90       	pop	r15
    3148:	ef 90       	pop	r14
    314a:	08 95       	ret

0000314c <xTaskNotifyStateClear>:
    TCB_t *pxTCB;
    BaseType_t xReturn;

        /* If null is passed in here then it is the calling task that is having
        its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    314c:	00 97       	sbiw	r24, 0x00	; 0
    314e:	21 f4       	brne	.+8      	; 0x3158 <xTaskNotifyStateClear+0xc>
    3150:	80 91 36 18 	lds	r24, 0x1836	; 0x801836 <pxCurrentTCB>
    3154:	90 91 37 18 	lds	r25, 0x1837	; 0x801837 <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    3158:	0f b6       	in	r0, 0x3f	; 63
    315a:	f8 94       	cli
    315c:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
    315e:	fc 01       	movw	r30, r24
    3160:	27 a5       	ldd	r18, Z+47	; 0x2f
    3162:	22 30       	cpi	r18, 0x02	; 2
    3164:	19 f4       	brne	.+6      	; 0x316c <xTaskNotifyStateClear+0x20>
            {
                pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    3166:	17 a6       	std	Z+47, r1	; 0x2f
                xReturn = pdPASS;
    3168:	81 e0       	ldi	r24, 0x01	; 1
    316a:	01 c0       	rjmp	.+2      	; 0x316e <xTaskNotifyStateClear+0x22>
            }
            else
            {
                xReturn = pdFAIL;
    316c:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    316e:	0f 90       	pop	r0
    3170:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    3172:	08 95       	ret

00003174 <prvInsertTimerInActiveList>:
    3174:	cf 92       	push	r12
    3176:	df 92       	push	r13
    3178:	ef 92       	push	r14
    317a:	ff 92       	push	r15
    317c:	0f 93       	push	r16
    317e:	1f 93       	push	r17
    3180:	fc 01       	movw	r30, r24
    3182:	42 83       	std	Z+2, r20	; 0x02
    3184:	53 83       	std	Z+3, r21	; 0x03
    3186:	64 83       	std	Z+4, r22	; 0x04
    3188:	75 83       	std	Z+5, r23	; 0x05
    318a:	93 87       	std	Z+11, r25	; 0x0b
    318c:	82 87       	std	Z+10, r24	; 0x0a
    318e:	04 17       	cp	r16, r20
    3190:	15 07       	cpc	r17, r21
    3192:	26 07       	cpc	r18, r22
    3194:	37 07       	cpc	r19, r23
    3196:	c0 f0       	brcs	.+48     	; 0x31c8 <prvInsertTimerInActiveList+0x54>
    3198:	0c 19       	sub	r16, r12
    319a:	1d 09       	sbc	r17, r13
    319c:	2e 09       	sbc	r18, r14
    319e:	3f 09       	sbc	r19, r15
    31a0:	86 85       	ldd	r24, Z+14	; 0x0e
    31a2:	97 85       	ldd	r25, Z+15	; 0x0f
    31a4:	a0 89       	ldd	r26, Z+16	; 0x10
    31a6:	b1 89       	ldd	r27, Z+17	; 0x11
    31a8:	08 17       	cp	r16, r24
    31aa:	19 07       	cpc	r17, r25
    31ac:	2a 07       	cpc	r18, r26
    31ae:	3b 07       	cpc	r19, r27
    31b0:	00 f5       	brcc	.+64     	; 0x31f2 <prvInsertTimerInActiveList+0x7e>
    31b2:	bf 01       	movw	r22, r30
    31b4:	6e 5f       	subi	r22, 0xFE	; 254
    31b6:	7f 4f       	sbci	r23, 0xFF	; 255
    31b8:	80 91 40 18 	lds	r24, 0x1840	; 0x801840 <pxOverflowTimerList>
    31bc:	90 91 41 18 	lds	r25, 0x1841	; 0x801841 <pxOverflowTimerList+0x1>
    31c0:	0e 94 b4 09 	call	0x1368	; 0x1368 <vListInsert>
    31c4:	80 e0       	ldi	r24, 0x00	; 0
    31c6:	18 c0       	rjmp	.+48     	; 0x31f8 <prvInsertTimerInActiveList+0x84>
    31c8:	0c 15       	cp	r16, r12
    31ca:	1d 05       	cpc	r17, r13
    31cc:	2e 05       	cpc	r18, r14
    31ce:	3f 05       	cpc	r19, r15
    31d0:	28 f4       	brcc	.+10     	; 0x31dc <prvInsertTimerInActiveList+0x68>
    31d2:	4c 15       	cp	r20, r12
    31d4:	5d 05       	cpc	r21, r13
    31d6:	6e 05       	cpc	r22, r14
    31d8:	7f 05       	cpc	r23, r15
    31da:	68 f4       	brcc	.+26     	; 0x31f6 <prvInsertTimerInActiveList+0x82>
    31dc:	bf 01       	movw	r22, r30
    31de:	6e 5f       	subi	r22, 0xFE	; 254
    31e0:	7f 4f       	sbci	r23, 0xFF	; 255
    31e2:	80 91 42 18 	lds	r24, 0x1842	; 0x801842 <pxCurrentTimerList>
    31e6:	90 91 43 18 	lds	r25, 0x1843	; 0x801843 <pxCurrentTimerList+0x1>
    31ea:	0e 94 b4 09 	call	0x1368	; 0x1368 <vListInsert>
    31ee:	80 e0       	ldi	r24, 0x00	; 0
    31f0:	03 c0       	rjmp	.+6      	; 0x31f8 <prvInsertTimerInActiveList+0x84>
    31f2:	81 e0       	ldi	r24, 0x01	; 1
    31f4:	01 c0       	rjmp	.+2      	; 0x31f8 <prvInsertTimerInActiveList+0x84>
    31f6:	81 e0       	ldi	r24, 0x01	; 1
    31f8:	1f 91       	pop	r17
    31fa:	0f 91       	pop	r16
    31fc:	ff 90       	pop	r15
    31fe:	ef 90       	pop	r14
    3200:	df 90       	pop	r13
    3202:	cf 90       	pop	r12
    3204:	08 95       	ret

00003206 <prvCheckForValidListAndQueue>:
    3206:	0f b6       	in	r0, 0x3f	; 63
    3208:	f8 94       	cli
    320a:	0f 92       	push	r0
    320c:	80 91 3e 18 	lds	r24, 0x183E	; 0x80183e <xTimerQueue>
    3210:	90 91 3f 18 	lds	r25, 0x183F	; 0x80183f <xTimerQueue+0x1>
    3214:	89 2b       	or	r24, r25
    3216:	e9 f4       	brne	.+58     	; 0x3252 <prvCheckForValidListAndQueue+0x4c>
    3218:	8f e4       	ldi	r24, 0x4F	; 79
    321a:	98 e1       	ldi	r25, 0x18	; 24
    321c:	0e 94 7e 09 	call	0x12fc	; 0x12fc <vListInitialise>
    3220:	84 e4       	ldi	r24, 0x44	; 68
    3222:	98 e1       	ldi	r25, 0x18	; 24
    3224:	0e 94 7e 09 	call	0x12fc	; 0x12fc <vListInitialise>
    3228:	8f e4       	ldi	r24, 0x4F	; 79
    322a:	98 e1       	ldi	r25, 0x18	; 24
    322c:	90 93 43 18 	sts	0x1843, r25	; 0x801843 <pxCurrentTimerList+0x1>
    3230:	80 93 42 18 	sts	0x1842, r24	; 0x801842 <pxCurrentTimerList>
    3234:	84 e4       	ldi	r24, 0x44	; 68
    3236:	98 e1       	ldi	r25, 0x18	; 24
    3238:	90 93 41 18 	sts	0x1841, r25	; 0x801841 <pxOverflowTimerList+0x1>
    323c:	80 93 40 18 	sts	0x1840, r24	; 0x801840 <pxOverflowTimerList>
    3240:	40 e0       	ldi	r20, 0x00	; 0
    3242:	67 e0       	ldi	r22, 0x07	; 7
    3244:	8a e0       	ldi	r24, 0x0A	; 10
    3246:	0e 94 a2 0c 	call	0x1944	; 0x1944 <xQueueGenericCreate>
    324a:	90 93 3f 18 	sts	0x183F, r25	; 0x80183f <xTimerQueue+0x1>
    324e:	80 93 3e 18 	sts	0x183E, r24	; 0x80183e <xTimerQueue>
    3252:	0f 90       	pop	r0
    3254:	0f be       	out	0x3f, r0	; 63
    3256:	08 95       	ret

00003258 <xTimerCreateTimerTask>:
    3258:	ef 92       	push	r14
    325a:	ff 92       	push	r15
    325c:	0f 93       	push	r16
    325e:	d3 df       	rcall	.-90     	; 0x3206 <prvCheckForValidListAndQueue>
    3260:	80 91 3e 18 	lds	r24, 0x183E	; 0x80183e <xTimerQueue>
    3264:	90 91 3f 18 	lds	r25, 0x183F	; 0x80183f <xTimerQueue+0x1>
    3268:	89 2b       	or	r24, r25
    326a:	89 f0       	breq	.+34     	; 0x328e <xTimerCreateTimerTask+0x36>
    326c:	0f 2e       	mov	r0, r31
    326e:	fc e3       	ldi	r31, 0x3C	; 60
    3270:	ef 2e       	mov	r14, r31
    3272:	f8 e1       	ldi	r31, 0x18	; 24
    3274:	ff 2e       	mov	r15, r31
    3276:	f0 2d       	mov	r31, r0
    3278:	03 e0       	ldi	r16, 0x03	; 3
    327a:	20 e0       	ldi	r18, 0x00	; 0
    327c:	30 e0       	ldi	r19, 0x00	; 0
    327e:	45 e5       	ldi	r20, 0x55	; 85
    3280:	50 e0       	ldi	r21, 0x00	; 0
    3282:	65 e7       	ldi	r22, 0x75	; 117
    3284:	74 e0       	ldi	r23, 0x04	; 4
    3286:	87 e0       	ldi	r24, 0x07	; 7
    3288:	91 e0       	ldi	r25, 0x01	; 1
    328a:	b1 d8       	rcall	.-3742   	; 0x23ee <xTaskCreate>
    328c:	01 c0       	rjmp	.+2      	; 0x3290 <xTimerCreateTimerTask+0x38>
    328e:	80 e0       	ldi	r24, 0x00	; 0
    3290:	0f 91       	pop	r16
    3292:	ff 90       	pop	r15
    3294:	ef 90       	pop	r14
    3296:	08 95       	ret

00003298 <xTimerGenericCommand>:
    }
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    3298:	8f 92       	push	r8
    329a:	9f 92       	push	r9
    329c:	af 92       	push	r10
    329e:	bf 92       	push	r11
    32a0:	cf 92       	push	r12
    32a2:	df 92       	push	r13
    32a4:	ef 92       	push	r14
    32a6:	ff 92       	push	r15
    32a8:	0f 93       	push	r16
    32aa:	1f 93       	push	r17
    32ac:	cf 93       	push	r28
    32ae:	df 93       	push	r29
    32b0:	cd b7       	in	r28, 0x3d	; 61
    32b2:	de b7       	in	r29, 0x3e	; 62
    32b4:	27 97       	sbiw	r28, 0x07	; 7
    32b6:	0f b6       	in	r0, 0x3f	; 63
    32b8:	f8 94       	cli
    32ba:	de bf       	out	0x3e, r29	; 62
    32bc:	0f be       	out	0x3f, r0	; 63
    32be:	cd bf       	out	0x3d, r28	; 61

    configASSERT( xTimer );

    /* Send a message to the timer service task to perform a particular action
    on a particular timer definition. */
    if( xTimerQueue != NULL )
    32c0:	e0 91 3e 18 	lds	r30, 0x183E	; 0x80183e <xTimerQueue>
    32c4:	f0 91 3f 18 	lds	r31, 0x183F	; 0x80183f <xTimerQueue+0x1>
    32c8:	30 97       	sbiw	r30, 0x00	; 0
    32ca:	81 f1       	breq	.+96     	; 0x332c <xTimerGenericCommand+0x94>
    {
        /* Send a command to the timer service task to start the xTimer timer. */
        xMessage.xMessageID = xCommandID;
    32cc:	69 83       	std	Y+1, r22	; 0x01
        xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    32ce:	2a 83       	std	Y+2, r18	; 0x02
    32d0:	3b 83       	std	Y+3, r19	; 0x03
    32d2:	4c 83       	std	Y+4, r20	; 0x04
    32d4:	5d 83       	std	Y+5, r21	; 0x05
        xMessage.u.xTimerParameters.pxTimer = xTimer;
    32d6:	9f 83       	std	Y+7, r25	; 0x07
    32d8:	8e 83       	std	Y+6, r24	; 0x06

        if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    32da:	66 30       	cpi	r22, 0x06	; 6
    32dc:	f4 f4       	brge	.+60     	; 0x331a <xTimerGenericCommand+0x82>
        {
            if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    32de:	35 dd       	rcall	.-1430   	; 0x2d4a <xTaskGetSchedulerState>
    32e0:	82 30       	cpi	r24, 0x02	; 2
    32e2:	69 f4       	brne	.+26     	; 0x32fe <xTimerGenericCommand+0x66>
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    32e4:	00 e0       	ldi	r16, 0x00	; 0
    32e6:	a7 01       	movw	r20, r14
    32e8:	96 01       	movw	r18, r12
    32ea:	be 01       	movw	r22, r28
    32ec:	6f 5f       	subi	r22, 0xFF	; 255
    32ee:	7f 4f       	sbci	r23, 0xFF	; 255
    32f0:	80 91 3e 18 	lds	r24, 0x183E	; 0x80183e <xTimerQueue>
    32f4:	90 91 3f 18 	lds	r25, 0x183F	; 0x80183f <xTimerQueue+0x1>
    32f8:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <xQueueGenericSend>
    32fc:	18 c0       	rjmp	.+48     	; 0x332e <xTimerGenericCommand+0x96>
            }
            else
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    32fe:	00 e0       	ldi	r16, 0x00	; 0
    3300:	20 e0       	ldi	r18, 0x00	; 0
    3302:	30 e0       	ldi	r19, 0x00	; 0
    3304:	a9 01       	movw	r20, r18
    3306:	be 01       	movw	r22, r28
    3308:	6f 5f       	subi	r22, 0xFF	; 255
    330a:	7f 4f       	sbci	r23, 0xFF	; 255
    330c:	80 91 3e 18 	lds	r24, 0x183E	; 0x80183e <xTimerQueue>
    3310:	90 91 3f 18 	lds	r25, 0x183F	; 0x80183f <xTimerQueue+0x1>
    3314:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <xQueueGenericSend>
    3318:	0a c0       	rjmp	.+20     	; 0x332e <xTimerGenericCommand+0x96>
            }
        }
        else
        {
            xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    331a:	20 e0       	ldi	r18, 0x00	; 0
    331c:	a8 01       	movw	r20, r16
    331e:	be 01       	movw	r22, r28
    3320:	6f 5f       	subi	r22, 0xFF	; 255
    3322:	7f 4f       	sbci	r23, 0xFF	; 255
    3324:	cf 01       	movw	r24, r30
    3326:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <xQueueGenericSendFromISR>
    332a:	01 c0       	rjmp	.+2      	; 0x332e <xTimerGenericCommand+0x96>
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
    332c:	80 e0       	ldi	r24, 0x00	; 0
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xReturn;
}
    332e:	27 96       	adiw	r28, 0x07	; 7
    3330:	0f b6       	in	r0, 0x3f	; 63
    3332:	f8 94       	cli
    3334:	de bf       	out	0x3e, r29	; 62
    3336:	0f be       	out	0x3f, r0	; 63
    3338:	cd bf       	out	0x3d, r28	; 61
    333a:	df 91       	pop	r29
    333c:	cf 91       	pop	r28
    333e:	1f 91       	pop	r17
    3340:	0f 91       	pop	r16
    3342:	ff 90       	pop	r15
    3344:	ef 90       	pop	r14
    3346:	df 90       	pop	r13
    3348:	cf 90       	pop	r12
    334a:	bf 90       	pop	r11
    334c:	af 90       	pop	r10
    334e:	9f 90       	pop	r9
    3350:	8f 90       	pop	r8
    3352:	08 95       	ret

00003354 <prvSampleTimeNow>:
    return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    3354:	2f 92       	push	r2
    3356:	3f 92       	push	r3
    3358:	4f 92       	push	r4
    335a:	5f 92       	push	r5
    335c:	6f 92       	push	r6
    335e:	7f 92       	push	r7
    3360:	8f 92       	push	r8
    3362:	9f 92       	push	r9
    3364:	af 92       	push	r10
    3366:	bf 92       	push	r11
    3368:	cf 92       	push	r12
    336a:	df 92       	push	r13
    336c:	ef 92       	push	r14
    336e:	ff 92       	push	r15
    3370:	0f 93       	push	r16
    3372:	1f 93       	push	r17
    3374:	cf 93       	push	r28
    3376:	df 93       	push	r29
    3378:	1c 01       	movw	r2, r24
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

    xTimeNow = xTaskGetTickCount();
    337a:	9a d9       	rcall	.-3276   	; 0x26b0 <xTaskGetTickCount>
    337c:	2b 01       	movw	r4, r22
    337e:	3c 01       	movw	r6, r24

    if( xTimeNow < xLastTime )
    3380:	80 91 38 18 	lds	r24, 0x1838	; 0x801838 <xLastTime.2432>
    3384:	90 91 39 18 	lds	r25, 0x1839	; 0x801839 <xLastTime.2432+0x1>
    3388:	a0 91 3a 18 	lds	r26, 0x183A	; 0x80183a <xLastTime.2432+0x2>
    338c:	b0 91 3b 18 	lds	r27, 0x183B	; 0x80183b <xLastTime.2432+0x3>
    3390:	48 16       	cp	r4, r24
    3392:	59 06       	cpc	r5, r25
    3394:	6a 06       	cpc	r6, r26
    3396:	7b 06       	cpc	r7, r27
    3398:	08 f0       	brcs	.+2      	; 0x339c <prvSampleTimeNow+0x48>
    339a:	53 c0       	rjmp	.+166    	; 0x3442 <prvSampleTimeNow+0xee>
    339c:	3b c0       	rjmp	.+118    	; 0x3414 <prvSampleTimeNow+0xc0>
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    {
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    339e:	07 80       	ldd	r0, Z+7	; 0x07
    33a0:	f0 85       	ldd	r31, Z+8	; 0x08
    33a2:	e0 2d       	mov	r30, r0
    33a4:	80 80       	ld	r8, Z
    33a6:	91 80       	ldd	r9, Z+1	; 0x01
    33a8:	a2 80       	ldd	r10, Z+2	; 0x02
    33aa:	b3 80       	ldd	r11, Z+3	; 0x03

        /* Remove the timer from the list. */
        pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    33ac:	c0 85       	ldd	r28, Z+8	; 0x08
    33ae:	d1 85       	ldd	r29, Z+9	; 0x09
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    33b0:	8e 01       	movw	r16, r28
    33b2:	0e 5f       	subi	r16, 0xFE	; 254
    33b4:	1f 4f       	sbci	r17, 0xFF	; 255
    33b6:	c8 01       	movw	r24, r16
    33b8:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* Execute its callback, then send a command to restart the timer if
        it is an auto-reload timer.  It cannot be restarted here as the lists
        have not yet been switched. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    33bc:	ec 89       	ldd	r30, Y+20	; 0x14
    33be:	fd 89       	ldd	r31, Y+21	; 0x15
    33c0:	ce 01       	movw	r24, r28
    33c2:	19 95       	eicall

        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    33c4:	8f 89       	ldd	r24, Y+23	; 0x17
    33c6:	82 ff       	sbrs	r24, 2
    33c8:	25 c0       	rjmp	.+74     	; 0x3414 <prvSampleTimeNow+0xc0>
            the timer going into the same timer list then it has already expired
            and the timer should be re-inserted into the current list so it is
            processed again within this loop.  Otherwise a command should be sent
            to restart the timer to ensure it is only inserted into a list after
            the lists have been swapped. */
            xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    33ca:	8e 85       	ldd	r24, Y+14	; 0x0e
    33cc:	9f 85       	ldd	r25, Y+15	; 0x0f
    33ce:	a8 89       	ldd	r26, Y+16	; 0x10
    33d0:	b9 89       	ldd	r27, Y+17	; 0x11
    33d2:	88 0d       	add	r24, r8
    33d4:	99 1d       	adc	r25, r9
    33d6:	aa 1d       	adc	r26, r10
    33d8:	bb 1d       	adc	r27, r11
            if( xReloadTime > xNextExpireTime )
    33da:	88 16       	cp	r8, r24
    33dc:	99 06       	cpc	r9, r25
    33de:	aa 06       	cpc	r10, r26
    33e0:	bb 06       	cpc	r11, r27
    33e2:	70 f4       	brcc	.+28     	; 0x3400 <prvSampleTimeNow+0xac>
            {
                listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    33e4:	8a 83       	std	Y+2, r24	; 0x02
    33e6:	9b 83       	std	Y+3, r25	; 0x03
    33e8:	ac 83       	std	Y+4, r26	; 0x04
    33ea:	bd 83       	std	Y+5, r27	; 0x05
                listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    33ec:	db 87       	std	Y+11, r29	; 0x0b
    33ee:	ca 87       	std	Y+10, r28	; 0x0a
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    33f0:	b8 01       	movw	r22, r16
    33f2:	80 91 42 18 	lds	r24, 0x1842	; 0x801842 <pxCurrentTimerList>
    33f6:	90 91 43 18 	lds	r25, 0x1843	; 0x801843 <pxCurrentTimerList+0x1>
    33fa:	0e 94 b4 09 	call	0x1368	; 0x1368 <vListInsert>
    33fe:	0a c0       	rjmp	.+20     	; 0x3414 <prvSampleTimeNow+0xc0>
            }
            else
            {
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    3400:	c1 2c       	mov	r12, r1
    3402:	d1 2c       	mov	r13, r1
    3404:	76 01       	movw	r14, r12
    3406:	00 e0       	ldi	r16, 0x00	; 0
    3408:	10 e0       	ldi	r17, 0x00	; 0
    340a:	a5 01       	movw	r20, r10
    340c:	94 01       	movw	r18, r8
    340e:	60 e0       	ldi	r22, 0x00	; 0
    3410:	ce 01       	movw	r24, r28
    3412:	42 df       	rcall	.-380    	; 0x3298 <xTimerGenericCommand>

    /* The tick count has overflowed.  The timer lists must be switched.
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    3414:	e0 91 42 18 	lds	r30, 0x1842	; 0x801842 <pxCurrentTimerList>
    3418:	f0 91 43 18 	lds	r31, 0x1843	; 0x801843 <pxCurrentTimerList+0x1>
    341c:	80 81       	ld	r24, Z
    341e:	81 11       	cpse	r24, r1
    3420:	be cf       	rjmp	.-132    	; 0x339e <prvSampleTimeNow+0x4a>
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxTemp = pxCurrentTimerList;
    pxCurrentTimerList = pxOverflowTimerList;
    3422:	80 91 40 18 	lds	r24, 0x1840	; 0x801840 <pxOverflowTimerList>
    3426:	90 91 41 18 	lds	r25, 0x1841	; 0x801841 <pxOverflowTimerList+0x1>
    342a:	90 93 43 18 	sts	0x1843, r25	; 0x801843 <pxCurrentTimerList+0x1>
    342e:	80 93 42 18 	sts	0x1842, r24	; 0x801842 <pxCurrentTimerList>
    pxOverflowTimerList = pxTemp;
    3432:	f0 93 41 18 	sts	0x1841, r31	; 0x801841 <pxOverflowTimerList+0x1>
    3436:	e0 93 40 18 	sts	0x1840, r30	; 0x801840 <pxOverflowTimerList>
    xTimeNow = xTaskGetTickCount();

    if( xTimeNow < xLastTime )
    {
        prvSwitchTimerLists();
        *pxTimerListsWereSwitched = pdTRUE;
    343a:	81 e0       	ldi	r24, 0x01	; 1
    343c:	f1 01       	movw	r30, r2
    343e:	80 83       	st	Z, r24
    3440:	02 c0       	rjmp	.+4      	; 0x3446 <prvSampleTimeNow+0xf2>
    }
    else
    {
        *pxTimerListsWereSwitched = pdFALSE;
    3442:	f1 01       	movw	r30, r2
    3444:	10 82       	st	Z, r1
    }

    xLastTime = xTimeNow;
    3446:	40 92 38 18 	sts	0x1838, r4	; 0x801838 <xLastTime.2432>
    344a:	50 92 39 18 	sts	0x1839, r5	; 0x801839 <xLastTime.2432+0x1>
    344e:	60 92 3a 18 	sts	0x183A, r6	; 0x80183a <xLastTime.2432+0x2>
    3452:	70 92 3b 18 	sts	0x183B, r7	; 0x80183b <xLastTime.2432+0x3>

    return xTimeNow;
}
    3456:	c3 01       	movw	r24, r6
    3458:	b2 01       	movw	r22, r4
    345a:	df 91       	pop	r29
    345c:	cf 91       	pop	r28
    345e:	1f 91       	pop	r17
    3460:	0f 91       	pop	r16
    3462:	ff 90       	pop	r15
    3464:	ef 90       	pop	r14
    3466:	df 90       	pop	r13
    3468:	cf 90       	pop	r12
    346a:	bf 90       	pop	r11
    346c:	af 90       	pop	r10
    346e:	9f 90       	pop	r9
    3470:	8f 90       	pop	r8
    3472:	7f 90       	pop	r7
    3474:	6f 90       	pop	r6
    3476:	5f 90       	pop	r5
    3478:	4f 90       	pop	r4
    347a:	3f 90       	pop	r3
    347c:	2f 90       	pop	r2
    347e:	08 95       	ret

00003480 <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    3480:	08 95       	ret

00003482 <vApplicationMallocFailedHook>:
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    3482:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    3484:	2f 9a       	sbi	0x05, 7	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3486:	2f ef       	ldi	r18, 0xFF	; 255
    3488:	80 e7       	ldi	r24, 0x70	; 112
    348a:	92 e0       	ldi	r25, 0x02	; 2
    348c:	21 50       	subi	r18, 0x01	; 1
    348e:	80 40       	sbci	r24, 0x00	; 0
    3490:	90 40       	sbci	r25, 0x00	; 0
    3492:	e1 f7       	brne	.-8      	; 0x348c <vApplicationMallocFailedHook+0xa>
    3494:	00 c0       	rjmp	.+0      	; 0x3496 <vApplicationMallocFailedHook+0x14>
    3496:	00 00       	nop
    for(;;)
    {
        _delay_ms(50);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED fast blink.
    3498:	1f 9a       	sbi	0x03, 7	; 3
    349a:	f5 cf       	rjmp	.-22     	; 0x3486 <vApplicationMallocFailedHook+0x4>

0000349c <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook( TaskHandle_t xTask, portCHAR *pcTaskName ) __attribute__((weak));

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)), portCHAR *pcTaskName __attribute__((unused))  )
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    349c:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    349e:	2f 9a       	sbi	0x05, 7	; 5
    34a0:	2f ef       	ldi	r18, 0xFF	; 255
    34a2:	87 ea       	ldi	r24, 0xA7	; 167
    34a4:	91 e6       	ldi	r25, 0x61	; 97
    34a6:	21 50       	subi	r18, 0x01	; 1
    34a8:	80 40       	sbci	r24, 0x00	; 0
    34aa:	90 40       	sbci	r25, 0x00	; 0
    34ac:	e1 f7       	brne	.-8      	; 0x34a6 <vApplicationStackOverflowHook+0xa>
    34ae:	00 c0       	rjmp	.+0      	; 0x34b0 <vApplicationStackOverflowHook+0x14>
    34b0:	00 00       	nop
    for(;;)
    {
        _delay_ms(2000);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED slow blink.
    34b2:	1f 9a       	sbi	0x03, 7	; 3
    34b4:	f5 cf       	rjmp	.-22     	; 0x34a0 <vApplicationStackOverflowHook+0x4>

000034b6 <create_tasks_and_semaphores>:

void doStuff()
{
	size_t bytesToSend;
	bytesToSend=xMessageBufferSend(xMessageBuffer,(void*) &payload,sizeof(payload),portMAX_DELAY);
}
    34b6:	8f 92       	push	r8
    34b8:	9f 92       	push	r9
    34ba:	af 92       	push	r10
    34bc:	bf 92       	push	r11
    34be:	cf 92       	push	r12
    34c0:	df 92       	push	r13
    34c2:	ef 92       	push	r14
    34c4:	ff 92       	push	r15
    34c6:	0f 93       	push	r16
    34c8:	1f 93       	push	r17
    34ca:	cf 93       	push	r28
    34cc:	df 93       	push	r29
    34ce:	80 91 af 19 	lds	r24, 0x19AF	; 0x8019af <xTestSemaphore>
    34d2:	90 91 b0 19 	lds	r25, 0x19B0	; 0x8019b0 <xTestSemaphore+0x1>
    34d6:	89 2b       	or	r24, r25
    34d8:	89 f4       	brne	.+34     	; 0x34fc <create_tasks_and_semaphores+0x46>
    34da:	81 e0       	ldi	r24, 0x01	; 1
    34dc:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <xQueueCreateMutex>
    34e0:	90 93 b0 19 	sts	0x19B0, r25	; 0x8019b0 <xTestSemaphore+0x1>
    34e4:	80 93 af 19 	sts	0x19AF, r24	; 0x8019af <xTestSemaphore>
    34e8:	00 97       	sbiw	r24, 0x00	; 0
    34ea:	41 f0       	breq	.+16     	; 0x34fc <create_tasks_and_semaphores+0x46>
    34ec:	00 e0       	ldi	r16, 0x00	; 0
    34ee:	20 e0       	ldi	r18, 0x00	; 0
    34f0:	30 e0       	ldi	r19, 0x00	; 0
    34f2:	a9 01       	movw	r20, r18
    34f4:	60 e0       	ldi	r22, 0x00	; 0
    34f6:	70 e0       	ldi	r23, 0x00	; 0
    34f8:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <xQueueGenericSend>
    34fc:	0e 94 db 06 	call	0xdb6	; 0xdb6 <xEventGroupCreate>
    3500:	90 93 c8 19 	sts	0x19C8, r25	; 0x8019c8 <startMeasureEventGroup+0x1>
    3504:	80 93 c7 19 	sts	0x19C7, r24	; 0x8019c7 <startMeasureEventGroup>
    3508:	0e 94 db 06 	call	0xdb6	; 0xdb6 <xEventGroupCreate>
    350c:	90 93 ae 19 	sts	0x19AE, r25	; 0x8019ae <readyEventGroup+0x1>
    3510:	80 93 ad 19 	sts	0x19AD, r24	; 0x8019ad <readyEventGroup>
    3514:	41 e0       	ldi	r20, 0x01	; 1
    3516:	60 e0       	ldi	r22, 0x00	; 0
    3518:	70 e0       	ldi	r23, 0x00	; 0
    351a:	84 e6       	ldi	r24, 0x64	; 100
    351c:	90 e0       	ldi	r25, 0x00	; 0
    351e:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <xStreamBufferGenericCreate>
    3522:	90 93 ac 19 	sts	0x19AC, r25	; 0x8019ac <xMessageBuffer+0x1>
    3526:	80 93 ab 19 	sts	0x19AB, r24	; 0x8019ab <xMessageBuffer>
    352a:	bc 01       	movw	r22, r24
    352c:	81 e0       	ldi	r24, 0x01	; 1
    352e:	0e 94 9f 05 	call	0xb3e	; 0xb3e <lora_UpLinkHandler_create>
    3532:	e0 90 ad 19 	lds	r14, 0x19AD	; 0x8019ad <readyEventGroup>
    3536:	f0 90 ae 19 	lds	r15, 0x19AE	; 0x8019ae <readyEventGroup+0x1>
    353a:	40 91 c7 19 	lds	r20, 0x19C7	; 0x8019c7 <startMeasureEventGroup>
    353e:	50 91 c8 19 	lds	r21, 0x19C8	; 0x8019c8 <startMeasureEventGroup+0x1>
    3542:	a1 2c       	mov	r10, r1
    3544:	b1 2c       	mov	r11, r1
    3546:	65 01       	movw	r12, r10
    3548:	68 94       	set
    354a:	a4 f8       	bld	r10, 4
    354c:	01 e0       	ldi	r16, 0x01	; 1
    354e:	10 e0       	ldi	r17, 0x00	; 0
    3550:	20 e0       	ldi	r18, 0x00	; 0
    3552:	30 e0       	ldi	r19, 0x00	; 0
    3554:	60 ec       	ldi	r22, 0xC0	; 192
    3556:	82 e0       	ldi	r24, 0x02	; 2
    3558:	0e 94 ce 04 	call	0x99c	; 0x99c <humAndTempReader_create>
    355c:	c8 2f       	mov	r28, r24
    355e:	d9 2f       	mov	r29, r25
    3560:	e0 90 ad 19 	lds	r14, 0x19AD	; 0x8019ad <readyEventGroup>
    3564:	f0 90 ae 19 	lds	r15, 0x19AE	; 0x8019ae <readyEventGroup+0x1>
    3568:	40 91 c7 19 	lds	r20, 0x19C7	; 0x8019c7 <startMeasureEventGroup>
    356c:	50 91 c8 19 	lds	r21, 0x19C8	; 0x8019c8 <startMeasureEventGroup+0x1>
    3570:	a1 2c       	mov	r10, r1
    3572:	b1 2c       	mov	r11, r1
    3574:	65 01       	movw	r12, r10
    3576:	68 94       	set
    3578:	a5 f8       	bld	r10, 5
    357a:	02 e0       	ldi	r16, 0x02	; 2
    357c:	10 e0       	ldi	r17, 0x00	; 0
    357e:	20 e0       	ldi	r18, 0x00	; 0
    3580:	30 e0       	ldi	r19, 0x00	; 0
    3582:	60 ec       	ldi	r22, 0xC0	; 192
    3584:	82 e0       	ldi	r24, 0x02	; 2
    3586:	0e 94 72 02 	call	0x4e4	; 0x4e4 <co2Reader_create>
    358a:	e0 90 ad 19 	lds	r14, 0x19AD	; 0x8019ad <readyEventGroup>
    358e:	f0 90 ae 19 	lds	r15, 0x19AE	; 0x8019ae <readyEventGroup+0x1>
    3592:	40 91 c7 19 	lds	r20, 0x19C7	; 0x8019c7 <startMeasureEventGroup>
    3596:	50 91 c8 19 	lds	r21, 0x19C8	; 0x8019c8 <startMeasureEventGroup+0x1>
    359a:	20 91 ac 19 	lds	r18, 0x19AC	; 0x8019ac <xMessageBuffer+0x1>
    359e:	2f 93       	push	r18
    35a0:	20 91 ab 19 	lds	r18, 0x19AB	; 0x8019ab <xMessageBuffer>
    35a4:	2f 93       	push	r18
    35a6:	df 93       	push	r29
    35a8:	cf 93       	push	r28
    35aa:	4c 01       	movw	r8, r24
    35ac:	0f 2e       	mov	r0, r31
    35ae:	f0 e3       	ldi	r31, 0x30	; 48
    35b0:	af 2e       	mov	r10, r31
    35b2:	b1 2c       	mov	r11, r1
    35b4:	c1 2c       	mov	r12, r1
    35b6:	d1 2c       	mov	r13, r1
    35b8:	f0 2d       	mov	r31, r0
    35ba:	03 e0       	ldi	r16, 0x03	; 3
    35bc:	10 e0       	ldi	r17, 0x00	; 0
    35be:	20 e0       	ldi	r18, 0x00	; 0
    35c0:	30 e0       	ldi	r19, 0x00	; 0
    35c2:	60 ec       	ldi	r22, 0xC0	; 192
    35c4:	83 e0       	ldi	r24, 0x03	; 3
    35c6:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <device_create>
    35ca:	0f 90       	pop	r0
    35cc:	0f 90       	pop	r0
    35ce:	0f 90       	pop	r0
    35d0:	0f 90       	pop	r0
    35d2:	df 91       	pop	r29
    35d4:	cf 91       	pop	r28
    35d6:	1f 91       	pop	r17
    35d8:	0f 91       	pop	r16
    35da:	ff 90       	pop	r15
    35dc:	ef 90       	pop	r14
    35de:	df 90       	pop	r13
    35e0:	cf 90       	pop	r12
    35e2:	bf 90       	pop	r11
    35e4:	af 90       	pop	r10
    35e6:	9f 90       	pop	r9
    35e8:	8f 90       	pop	r8
    35ea:	08 95       	ret

000035ec <initialiseSystem>:
    35ec:	81 b1       	in	r24, 0x01	; 1
    35ee:	81 68       	ori	r24, 0x81	; 129
    35f0:	81 b9       	out	0x01, r24	; 1
    35f2:	0e 94 c5 06 	call	0xd8a	; 0xd8a <trace_init>
    35f6:	80 e0       	ldi	r24, 0x00	; 0
    35f8:	0e 94 ee 25 	call	0x4bdc	; 0x4bdc <stdioCreate>
    35fc:	85 e0       	ldi	r24, 0x05	; 5
    35fe:	0d d0       	rcall	.+26     	; 0x361a <hal_create>
    3600:	60 e0       	ldi	r22, 0x00	; 0
    3602:	70 e0       	ldi	r23, 0x00	; 0
    3604:	81 e0       	ldi	r24, 0x01	; 1
    3606:	ab c3       	rjmp	.+1878   	; 0x3d5e <lora_driver_create>
    3608:	08 95       	ret

0000360a <main>:
/*-----------------------------------------------------------*/
int main(void)
{
	initialiseSystem(); // Must be done as the very first thing!!
    360a:	f0 df       	rcall	.-32     	; 0x35ec <initialiseSystem>
	printf("Program Started!!\n");
    360c:	89 e8       	ldi	r24, 0x89	; 137
    360e:	94 e0       	ldi	r25, 0x04	; 4
    3610:	0e 94 4f 2b 	call	0x569e	; 0x569e <puts>
	create_tasks_and_semaphores();
	vTaskStartScheduler(); // Initialise and run the freeRTOS scheduler. Execution should never return from here.
    3614:	50 df       	rcall	.-352    	; 0x34b6 <create_tasks_and_semaphores>
    3616:	0a d8       	rcall	.-4076   	; 0x262c <vTaskStartScheduler>
    3618:	ff cf       	rjmp	.-2      	; 0x3618 <main+0xe>

0000361a <hal_create>:
    361a:	e9 ec       	ldi	r30, 0xC9	; 201
    361c:	f9 e1       	ldi	r31, 0x19	; 25
    361e:	24 e0       	ldi	r18, 0x04	; 4
    3620:	32 e2       	ldi	r19, 0x22	; 34
    3622:	31 83       	std	Z+1, r19	; 0x01
    3624:	20 83       	st	Z, r18
    3626:	27 e0       	ldi	r18, 0x07	; 7
    3628:	32 e2       	ldi	r19, 0x22	; 34
    362a:	33 83       	std	Z+3, r19	; 0x03
    362c:	22 83       	std	Z+2, r18	; 0x02
    362e:	22 e1       	ldi	r18, 0x12	; 18
    3630:	32 e2       	ldi	r19, 0x22	; 34
    3632:	35 83       	std	Z+5, r19	; 0x05
    3634:	24 83       	std	Z+4, r18	; 0x04
    3636:	26 e1       	ldi	r18, 0x16	; 22
    3638:	32 e2       	ldi	r19, 0x22	; 34
    363a:	37 83       	std	Z+7, r19	; 0x07
    363c:	26 83       	std	Z+6, r18	; 0x06
    363e:	2c e1       	ldi	r18, 0x1C	; 28
    3640:	32 e2       	ldi	r19, 0x22	; 34
    3642:	31 87       	std	Z+9, r19	; 0x09
    3644:	20 87       	std	Z+8, r18	; 0x08
    3646:	28 e2       	ldi	r18, 0x28	; 40
    3648:	32 e2       	ldi	r19, 0x22	; 34
    364a:	33 87       	std	Z+11, r19	; 0x0b
    364c:	22 87       	std	Z+10, r18	; 0x0a
    364e:	2d e2       	ldi	r18, 0x2D	; 45
    3650:	32 e2       	ldi	r19, 0x22	; 34
    3652:	35 87       	std	Z+13, r19	; 0x0d
    3654:	24 87       	std	Z+12, r18	; 0x0c
    3656:	29 e3       	ldi	r18, 0x39	; 57
    3658:	32 e2       	ldi	r19, 0x22	; 34
    365a:	37 87       	std	Z+15, r19	; 0x0f
    365c:	26 87       	std	Z+14, r18	; 0x0e
    365e:	29 e1       	ldi	r18, 0x19	; 25
    3660:	32 e2       	ldi	r19, 0x22	; 34
    3662:	31 8b       	std	Z+17, r19	; 0x11
    3664:	20 8b       	std	Z+16, r18	; 0x10
    3666:	2e e3       	ldi	r18, 0x3E	; 62
    3668:	32 e2       	ldi	r19, 0x22	; 34
    366a:	33 8b       	std	Z+19, r19	; 0x13
    366c:	22 8b       	std	Z+18, r18	; 0x12
    366e:	2b e4       	ldi	r18, 0x4B	; 75
    3670:	32 e2       	ldi	r19, 0x22	; 34
    3672:	35 8b       	std	Z+21, r19	; 0x15
    3674:	24 8b       	std	Z+20, r18	; 0x14
    3676:	68 2f       	mov	r22, r24
    3678:	cf 01       	movw	r24, r30
    367a:	3d c1       	rjmp	.+634    	; 0x38f6 <led_create>
    367c:	08 95       	ret

0000367e <_hihTwiCallback>:
    367e:	65 30       	cpi	r22, 0x05	; 5
    3680:	f1 f4       	brne	.+60     	; 0x36be <_hihTwiCallback+0x40>
    3682:	fa 01       	movw	r30, r20
    3684:	80 81       	ld	r24, Z
    3686:	8f 73       	andi	r24, 0x3F	; 63
    3688:	90 e0       	ldi	r25, 0x00	; 0
    368a:	98 2f       	mov	r25, r24
    368c:	88 27       	eor	r24, r24
    368e:	21 81       	ldd	r18, Z+1	; 0x01
    3690:	82 2b       	or	r24, r18
    3692:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <_hum+0x1>
    3696:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <_hum>
    369a:	82 81       	ldd	r24, Z+2	; 0x02
    369c:	f0 e4       	ldi	r31, 0x40	; 64
    369e:	8f 9f       	mul	r24, r31
    36a0:	c0 01       	movw	r24, r0
    36a2:	11 24       	eor	r1, r1
    36a4:	fa 01       	movw	r30, r20
    36a6:	23 81       	ldd	r18, Z+3	; 0x03
    36a8:	26 95       	lsr	r18
    36aa:	26 95       	lsr	r18
    36ac:	82 2b       	or	r24, r18
    36ae:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <_temp+0x1>
    36b2:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <_temp>
    36b6:	81 e0       	ldi	r24, 0x01	; 1
    36b8:	80 93 5a 18 	sts	0x185A, r24	; 0x80185a <_measuringIsReady>
    36bc:	08 95       	ret
    36be:	64 30       	cpi	r22, 0x04	; 4
    36c0:	51 f0       	breq	.+20     	; 0x36d6 <_hihTwiCallback+0x58>
    36c2:	80 e0       	ldi	r24, 0x00	; 0
    36c4:	90 e4       	ldi	r25, 0x40	; 64
    36c6:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <_temp+0x1>
    36ca:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <_temp>
    36ce:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <_hum+0x1>
    36d2:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <_hum>
    36d6:	08 95       	ret

000036d8 <hih8120Create>:
    36d8:	0f 93       	push	r16
    36da:	1f 93       	push	r17
    36dc:	0f e3       	ldi	r16, 0x3F	; 63
    36de:	1b e1       	ldi	r17, 0x1B	; 27
    36e0:	20 e0       	ldi	r18, 0x00	; 0
    36e2:	34 e2       	ldi	r19, 0x24	; 36
    36e4:	44 ef       	ldi	r20, 0xF4	; 244
    36e6:	50 e0       	ldi	r21, 0x00	; 0
    36e8:	60 e0       	ldi	r22, 0x00	; 0
    36ea:	87 e2       	ldi	r24, 0x27	; 39
    36ec:	0e 94 28 26 	call	0x4c50	; 0x4c50 <twiCreate>
    36f0:	90 93 5c 18 	sts	0x185C, r25	; 0x80185c <_hih8120Handler+0x1>
    36f4:	80 93 5b 18 	sts	0x185B, r24	; 0x80185b <_hih8120Handler>
    36f8:	21 e0       	ldi	r18, 0x01	; 1
    36fa:	89 2b       	or	r24, r25
    36fc:	09 f0       	breq	.+2      	; 0x3700 <hih8120Create+0x28>
    36fe:	20 e0       	ldi	r18, 0x00	; 0
    3700:	82 2f       	mov	r24, r18
    3702:	1f 91       	pop	r17
    3704:	0f 91       	pop	r16
    3706:	08 95       	ret

00003708 <hih8120IsReady>:
    3708:	80 91 5a 18 	lds	r24, 0x185A	; 0x80185a <_measuringIsReady>
    370c:	08 95       	ret

0000370e <hih8120Meassure>:
    370e:	80 91 5b 18 	lds	r24, 0x185B	; 0x80185b <_hih8120Handler>
    3712:	90 91 5c 18 	lds	r25, 0x185C	; 0x80185c <_hih8120Handler+0x1>
    3716:	00 97       	sbiw	r24, 0x00	; 0
    3718:	39 f0       	breq	.+14     	; 0x3728 <hih8120Meassure+0x1a>
    371a:	64 e0       	ldi	r22, 0x04	; 4
    371c:	0e 94 79 26 	call	0x4cf2	; 0x4cf2 <twiReceive>
    3720:	85 30       	cpi	r24, 0x05	; 5
    3722:	21 f0       	breq	.+8      	; 0x372c <hih8120Meassure+0x1e>
    3724:	83 e0       	ldi	r24, 0x03	; 3
    3726:	08 95       	ret
    3728:	82 e0       	ldi	r24, 0x02	; 2
    372a:	08 95       	ret
    372c:	80 e0       	ldi	r24, 0x00	; 0
    372e:	08 95       	ret

00003730 <hih8120GetHumidity>:
    3730:	60 91 0a 02 	lds	r22, 0x020A	; 0x80020a <_hum>
    3734:	70 91 0b 02 	lds	r23, 0x020B	; 0x80020b <_hum+0x1>
    3738:	80 e0       	ldi	r24, 0x00	; 0
    373a:	90 e0       	ldi	r25, 0x00	; 0
    373c:	0e 94 83 28 	call	0x5106	; 0x5106 <__floatunsisf>
    3740:	20 e0       	ldi	r18, 0x00	; 0
    3742:	30 e0       	ldi	r19, 0x00	; 0
    3744:	48 ec       	ldi	r20, 0xC8	; 200
    3746:	52 e4       	ldi	r21, 0x42	; 66
    3748:	0e 94 11 29 	call	0x5222	; 0x5222 <__mulsf3>
    374c:	20 e0       	ldi	r18, 0x00	; 0
    374e:	38 ef       	ldi	r19, 0xF8	; 248
    3750:	4f e7       	ldi	r20, 0x7F	; 127
    3752:	56 e4       	ldi	r21, 0x46	; 70
    3754:	0c 94 ea 27 	jmp	0x4fd4	; 0x4fd4 <__divsf3>
    3758:	08 95       	ret

0000375a <hih8120GetHumidityPercent_x10>:
    375a:	ea df       	rcall	.-44     	; 0x3730 <hih8120GetHumidity>
    375c:	20 e0       	ldi	r18, 0x00	; 0
    375e:	30 e0       	ldi	r19, 0x00	; 0
    3760:	40 e2       	ldi	r20, 0x20	; 32
    3762:	51 e4       	ldi	r21, 0x41	; 65
    3764:	0e 94 11 29 	call	0x5222	; 0x5222 <__mulsf3>
    3768:	0e 94 57 28 	call	0x50ae	; 0x50ae <__fixunssfsi>
    376c:	cb 01       	movw	r24, r22
    376e:	08 95       	ret

00003770 <hih8120GetTemperature>:
    3770:	60 91 08 02 	lds	r22, 0x0208	; 0x800208 <_temp>
    3774:	70 91 09 02 	lds	r23, 0x0209	; 0x800209 <_temp+0x1>
    3778:	80 e0       	ldi	r24, 0x00	; 0
    377a:	90 e0       	ldi	r25, 0x00	; 0
    377c:	0e 94 83 28 	call	0x5106	; 0x5106 <__floatunsisf>
    3780:	20 e0       	ldi	r18, 0x00	; 0
    3782:	30 e0       	ldi	r19, 0x00	; 0
    3784:	45 e2       	ldi	r20, 0x25	; 37
    3786:	53 e4       	ldi	r21, 0x43	; 67
    3788:	0e 94 11 29 	call	0x5222	; 0x5222 <__mulsf3>
    378c:	20 e0       	ldi	r18, 0x00	; 0
    378e:	38 ef       	ldi	r19, 0xF8	; 248
    3790:	4f e7       	ldi	r20, 0x7F	; 127
    3792:	56 e4       	ldi	r21, 0x46	; 70
    3794:	0e 94 ea 27 	call	0x4fd4	; 0x4fd4 <__divsf3>
    3798:	20 e0       	ldi	r18, 0x00	; 0
    379a:	30 e0       	ldi	r19, 0x00	; 0
    379c:	40 e2       	ldi	r20, 0x20	; 32
    379e:	52 e4       	ldi	r21, 0x42	; 66
    37a0:	0c 94 85 27 	jmp	0x4f0a	; 0x4f0a <__subsf3>
    37a4:	08 95       	ret

000037a6 <hih8120GetTemperature_x10>:
    37a6:	e4 df       	rcall	.-56     	; 0x3770 <hih8120GetTemperature>
    37a8:	20 e0       	ldi	r18, 0x00	; 0
    37aa:	30 e0       	ldi	r19, 0x00	; 0
    37ac:	40 e2       	ldi	r20, 0x20	; 32
    37ae:	51 e4       	ldi	r21, 0x41	; 65
    37b0:	0e 94 11 29 	call	0x5222	; 0x5222 <__mulsf3>
    37b4:	0e 94 52 28 	call	0x50a4	; 0x50a4 <__fixsfsi>
    37b8:	cb 01       	movw	r24, r22
    37ba:	08 95       	ret

000037bc <_turn_off>:
    37bc:	cf 93       	push	r28
    37be:	df 93       	push	r29
    37c0:	90 e0       	ldi	r25, 0x00	; 0
    37c2:	fc 01       	movw	r30, r24
    37c4:	ee 0f       	add	r30, r30
    37c6:	ff 1f       	adc	r31, r31
    37c8:	e8 0f       	add	r30, r24
    37ca:	f9 1f       	adc	r31, r25
    37cc:	ee 0f       	add	r30, r30
    37ce:	ff 1f       	adc	r31, r31
    37d0:	e3 5a       	subi	r30, 0xA3	; 163
    37d2:	f7 4e       	sbci	r31, 0xE7	; 231
    37d4:	23 81       	ldd	r18, Z+3	; 0x03
    37d6:	21 11       	cpse	r18, r1
    37d8:	0a c0       	rjmp	.+20     	; 0x37ee <_turn_off+0x32>
    37da:	ef 01       	movw	r28, r30
    37dc:	e0 91 d1 19 	lds	r30, 0x19D1	; 0x8019d1 <register_access+0x8>
    37e0:	f0 91 d2 19 	lds	r31, 0x19D2	; 0x8019d2 <register_access+0x9>
    37e4:	6a 81       	ldd	r22, Y+2	; 0x02
    37e6:	88 81       	ld	r24, Y
    37e8:	99 81       	ldd	r25, Y+1	; 0x01
    37ea:	19 95       	eicall
    37ec:	12 c0       	rjmp	.+36     	; 0x3812 <_turn_off+0x56>
    37ee:	dc 01       	movw	r26, r24
    37f0:	aa 0f       	add	r26, r26
    37f2:	bb 1f       	adc	r27, r27
    37f4:	ed 01       	movw	r28, r26
    37f6:	c8 0f       	add	r28, r24
    37f8:	d9 1f       	adc	r29, r25
    37fa:	cc 0f       	add	r28, r28
    37fc:	dd 1f       	adc	r29, r29
    37fe:	c3 5a       	subi	r28, 0xA3	; 163
    3800:	d7 4e       	sbci	r29, 0xE7	; 231
    3802:	e0 91 db 19 	lds	r30, 0x19DB	; 0x8019db <register_access+0x12>
    3806:	f0 91 dc 19 	lds	r31, 0x19DC	; 0x8019dc <register_access+0x13>
    380a:	6a 81       	ldd	r22, Y+2	; 0x02
    380c:	88 81       	ld	r24, Y
    380e:	99 81       	ldd	r25, Y+1	; 0x01
    3810:	19 95       	eicall
    3812:	df 91       	pop	r29
    3814:	cf 91       	pop	r28
    3816:	08 95       	ret

00003818 <_turn_on>:
    3818:	cf 93       	push	r28
    381a:	df 93       	push	r29
    381c:	90 e0       	ldi	r25, 0x00	; 0
    381e:	fc 01       	movw	r30, r24
    3820:	ee 0f       	add	r30, r30
    3822:	ff 1f       	adc	r31, r31
    3824:	e8 0f       	add	r30, r24
    3826:	f9 1f       	adc	r31, r25
    3828:	ee 0f       	add	r30, r30
    382a:	ff 1f       	adc	r31, r31
    382c:	e3 5a       	subi	r30, 0xA3	; 163
    382e:	f7 4e       	sbci	r31, 0xE7	; 231
    3830:	23 81       	ldd	r18, Z+3	; 0x03
    3832:	21 11       	cpse	r18, r1
    3834:	0a c0       	rjmp	.+20     	; 0x384a <_turn_on+0x32>
    3836:	ef 01       	movw	r28, r30
    3838:	e0 91 db 19 	lds	r30, 0x19DB	; 0x8019db <register_access+0x12>
    383c:	f0 91 dc 19 	lds	r31, 0x19DC	; 0x8019dc <register_access+0x13>
    3840:	6a 81       	ldd	r22, Y+2	; 0x02
    3842:	88 81       	ld	r24, Y
    3844:	99 81       	ldd	r25, Y+1	; 0x01
    3846:	19 95       	eicall
    3848:	12 c0       	rjmp	.+36     	; 0x386e <_turn_on+0x56>
    384a:	dc 01       	movw	r26, r24
    384c:	aa 0f       	add	r26, r26
    384e:	bb 1f       	adc	r27, r27
    3850:	ed 01       	movw	r28, r26
    3852:	c8 0f       	add	r28, r24
    3854:	d9 1f       	adc	r29, r25
    3856:	cc 0f       	add	r28, r28
    3858:	dd 1f       	adc	r29, r29
    385a:	c3 5a       	subi	r28, 0xA3	; 163
    385c:	d7 4e       	sbci	r29, 0xE7	; 231
    385e:	e0 91 d1 19 	lds	r30, 0x19D1	; 0x8019d1 <register_access+0x8>
    3862:	f0 91 d2 19 	lds	r31, 0x19D2	; 0x8019d2 <register_access+0x9>
    3866:	6a 81       	ldd	r22, Y+2	; 0x02
    3868:	88 81       	ld	r24, Y
    386a:	99 81       	ldd	r25, Y+1	; 0x01
    386c:	19 95       	eicall
    386e:	df 91       	pop	r29
    3870:	cf 91       	pop	r28
    3872:	08 95       	ret

00003874 <_hal_led_task>:
    3874:	0f 2e       	mov	r0, r31
    3876:	f9 ec       	ldi	r31, 0xC9	; 201
    3878:	cf 2e       	mov	r12, r31
    387a:	f9 e1       	ldi	r31, 0x19	; 25
    387c:	df 2e       	mov	r13, r31
    387e:	f0 2d       	mov	r31, r0
    3880:	04 e0       	ldi	r16, 0x04	; 4
    3882:	cd e5       	ldi	r28, 0x5D	; 93
    3884:	d8 e1       	ldi	r29, 0x18	; 24
    3886:	10 e0       	ldi	r17, 0x00	; 0
    3888:	8c 81       	ldd	r24, Y+4	; 0x04
    388a:	81 30       	cpi	r24, 0x01	; 1
    388c:	69 f0       	breq	.+26     	; 0x38a8 <_hal_led_task+0x34>
    388e:	e8 f0       	brcs	.+58     	; 0x38ca <_hal_led_task+0x56>
    3890:	82 30       	cpi	r24, 0x02	; 2
    3892:	39 f5       	brne	.+78     	; 0x38e2 <_hal_led_task+0x6e>
    3894:	d6 01       	movw	r26, r12
    3896:	1c 96       	adiw	r26, 0x0c	; 12
    3898:	ed 91       	ld	r30, X+
    389a:	fc 91       	ld	r31, X
    389c:	1d 97       	sbiw	r26, 0x0d	; 13
    389e:	6a 81       	ldd	r22, Y+2	; 0x02
    38a0:	88 81       	ld	r24, Y
    38a2:	99 81       	ldd	r25, Y+1	; 0x01
    38a4:	19 95       	eicall
    38a6:	1d c0       	rjmp	.+58     	; 0x38e2 <_hal_led_task+0x6e>
    38a8:	8d 81       	ldd	r24, Y+5	; 0x05
    38aa:	8f 5f       	subi	r24, 0xFF	; 255
    38ac:	8a 30       	cpi	r24, 0x0A	; 10
    38ae:	10 f4       	brcc	.+4      	; 0x38b4 <_hal_led_task+0x40>
    38b0:	8d 83       	std	Y+5, r24	; 0x05
    38b2:	17 c0       	rjmp	.+46     	; 0x38e2 <_hal_led_task+0x6e>
    38b4:	1d 82       	std	Y+5, r1	; 0x05
    38b6:	d6 01       	movw	r26, r12
    38b8:	1c 96       	adiw	r26, 0x0c	; 12
    38ba:	ed 91       	ld	r30, X+
    38bc:	fc 91       	ld	r31, X
    38be:	1d 97       	sbiw	r26, 0x0d	; 13
    38c0:	6a 81       	ldd	r22, Y+2	; 0x02
    38c2:	88 81       	ld	r24, Y
    38c4:	99 81       	ldd	r25, Y+1	; 0x01
    38c6:	19 95       	eicall
    38c8:	0c c0       	rjmp	.+24     	; 0x38e2 <_hal_led_task+0x6e>
    38ca:	8d 81       	ldd	r24, Y+5	; 0x05
    38cc:	88 23       	and	r24, r24
    38ce:	31 f0       	breq	.+12     	; 0x38dc <_hal_led_task+0x68>
    38d0:	81 2f       	mov	r24, r17
    38d2:	a2 df       	rcall	.-188    	; 0x3818 <_turn_on>
    38d4:	8d 81       	ldd	r24, Y+5	; 0x05
    38d6:	81 50       	subi	r24, 0x01	; 1
    38d8:	8d 83       	std	Y+5, r24	; 0x05
    38da:	03 c0       	rjmp	.+6      	; 0x38e2 <_hal_led_task+0x6e>
    38dc:	0c 83       	std	Y+4, r16	; 0x04
    38de:	81 2f       	mov	r24, r17
    38e0:	6d df       	rcall	.-294    	; 0x37bc <_turn_off>
    38e2:	1f 5f       	subi	r17, 0xFF	; 255
    38e4:	26 96       	adiw	r28, 0x06	; 6
    38e6:	14 30       	cpi	r17, 0x04	; 4
    38e8:	79 f6       	brne	.-98     	; 0x3888 <_hal_led_task+0x14>
    38ea:	65 e0       	ldi	r22, 0x05	; 5
    38ec:	70 e0       	ldi	r23, 0x00	; 0
    38ee:	80 e0       	ldi	r24, 0x00	; 0
    38f0:	90 e0       	ldi	r25, 0x00	; 0
    38f2:	3d d8       	rcall	.-3974   	; 0x296e <vTaskDelay>
    38f4:	c6 cf       	rjmp	.-116    	; 0x3882 <_hal_led_task+0xe>

000038f6 <led_create>:
    38f6:	cf 92       	push	r12
    38f8:	df 92       	push	r13
    38fa:	ef 92       	push	r14
    38fc:	ff 92       	push	r15
    38fe:	0f 93       	push	r16
    3900:	1f 93       	push	r17
    3902:	cf 93       	push	r28
    3904:	df 93       	push	r29
    3906:	06 2f       	mov	r16, r22
    3908:	0f 2e       	mov	r0, r31
    390a:	f9 ec       	ldi	r31, 0xC9	; 201
    390c:	ef 2e       	mov	r14, r31
    390e:	f9 e1       	ldi	r31, 0x19	; 25
    3910:	ff 2e       	mov	r15, r31
    3912:	f0 2d       	mov	r31, r0
    3914:	d7 01       	movw	r26, r14
    3916:	18 96       	adiw	r26, 0x08	; 8
    3918:	ed 91       	ld	r30, X+
    391a:	fc 91       	ld	r31, X
    391c:	19 97       	sbiw	r26, 0x09	; 9
    391e:	66 e0       	ldi	r22, 0x06	; 6
    3920:	87 e2       	ldi	r24, 0x27	; 39
    3922:	90 e0       	ldi	r25, 0x00	; 0
    3924:	19 95       	eicall
    3926:	cd e5       	ldi	r28, 0x5D	; 93
    3928:	d8 e1       	ldi	r29, 0x18	; 24
    392a:	0f 2e       	mov	r0, r31
    392c:	f8 e2       	ldi	r31, 0x28	; 40
    392e:	cf 2e       	mov	r12, r31
    3930:	d1 2c       	mov	r13, r1
    3932:	f0 2d       	mov	r31, r0
    3934:	d9 82       	std	Y+1, r13	; 0x01
    3936:	c8 82       	st	Y, r12
    3938:	86 e0       	ldi	r24, 0x06	; 6
    393a:	8a 83       	std	Y+2, r24	; 0x02
    393c:	1b 82       	std	Y+3, r1	; 0x03
    393e:	14 e0       	ldi	r17, 0x04	; 4
    3940:	1c 83       	std	Y+4, r17	; 0x04
    3942:	80 e0       	ldi	r24, 0x00	; 0
    3944:	3b df       	rcall	.-394    	; 0x37bc <_turn_off>
    3946:	d7 01       	movw	r26, r14
    3948:	18 96       	adiw	r26, 0x08	; 8
    394a:	ed 91       	ld	r30, X+
    394c:	fc 91       	ld	r31, X
    394e:	19 97       	sbiw	r26, 0x09	; 9
    3950:	67 e0       	ldi	r22, 0x07	; 7
    3952:	87 e2       	ldi	r24, 0x27	; 39
    3954:	90 e0       	ldi	r25, 0x00	; 0
    3956:	19 95       	eicall
    3958:	df 82       	std	Y+7, r13	; 0x07
    395a:	ce 82       	std	Y+6, r12	; 0x06
    395c:	87 e0       	ldi	r24, 0x07	; 7
    395e:	88 87       	std	Y+8, r24	; 0x08
    3960:	19 86       	std	Y+9, r1	; 0x09
    3962:	1a 87       	std	Y+10, r17	; 0x0a
    3964:	81 e0       	ldi	r24, 0x01	; 1
    3966:	2a df       	rcall	.-428    	; 0x37bc <_turn_off>
    3968:	d7 01       	movw	r26, r14
    396a:	18 96       	adiw	r26, 0x08	; 8
    396c:	ed 91       	ld	r30, X+
    396e:	fc 91       	ld	r31, X
    3970:	19 97       	sbiw	r26, 0x09	; 9
    3972:	65 e0       	ldi	r22, 0x05	; 5
    3974:	83 e3       	ldi	r24, 0x33	; 51
    3976:	90 e0       	ldi	r25, 0x00	; 0
    3978:	19 95       	eicall
    397a:	d7 01       	movw	r26, r14
    397c:	18 96       	adiw	r26, 0x08	; 8
    397e:	ed 91       	ld	r30, X+
    3980:	fc 91       	ld	r31, X
    3982:	19 97       	sbiw	r26, 0x09	; 9
    3984:	61 e0       	ldi	r22, 0x01	; 1
    3986:	84 e3       	ldi	r24, 0x34	; 52
    3988:	90 e0       	ldi	r25, 0x00	; 0
    398a:	19 95       	eicall
    398c:	84 e3       	ldi	r24, 0x34	; 52
    398e:	90 e0       	ldi	r25, 0x00	; 0
    3990:	9d 87       	std	Y+13, r25	; 0x0d
    3992:	8c 87       	std	Y+12, r24	; 0x0c
    3994:	85 e0       	ldi	r24, 0x05	; 5
    3996:	8e 87       	std	Y+14, r24	; 0x0e
    3998:	1f 86       	std	Y+15, r1	; 0x0f
    399a:	18 8b       	std	Y+16, r17	; 0x10
    399c:	82 e0       	ldi	r24, 0x02	; 2
    399e:	0e df       	rcall	.-484    	; 0x37bc <_turn_off>
    39a0:	d7 01       	movw	r26, r14
    39a2:	18 96       	adiw	r26, 0x08	; 8
    39a4:	ed 91       	ld	r30, X+
    39a6:	fc 91       	ld	r31, X
    39a8:	19 97       	sbiw	r26, 0x09	; 9
    39aa:	64 e0       	ldi	r22, 0x04	; 4
    39ac:	81 e0       	ldi	r24, 0x01	; 1
    39ae:	91 e0       	ldi	r25, 0x01	; 1
    39b0:	19 95       	eicall
    39b2:	d7 01       	movw	r26, r14
    39b4:	18 96       	adiw	r26, 0x08	; 8
    39b6:	ed 91       	ld	r30, X+
    39b8:	fc 91       	ld	r31, X
    39ba:	19 97       	sbiw	r26, 0x09	; 9
    39bc:	61 e0       	ldi	r22, 0x01	; 1
    39be:	82 e0       	ldi	r24, 0x02	; 2
    39c0:	91 e0       	ldi	r25, 0x01	; 1
    39c2:	19 95       	eicall
    39c4:	82 e0       	ldi	r24, 0x02	; 2
    39c6:	91 e0       	ldi	r25, 0x01	; 1
    39c8:	9b 8b       	std	Y+19, r25	; 0x13
    39ca:	8a 8b       	std	Y+18, r24	; 0x12
    39cc:	1c 8b       	std	Y+20, r17	; 0x14
    39ce:	1d 8a       	std	Y+21, r1	; 0x15
    39d0:	1e 8b       	std	Y+22, r17	; 0x16
    39d2:	83 e0       	ldi	r24, 0x03	; 3
    39d4:	f3 de       	rcall	.-538    	; 0x37bc <_turn_off>
    39d6:	e1 2c       	mov	r14, r1
    39d8:	f1 2c       	mov	r15, r1
    39da:	20 e0       	ldi	r18, 0x00	; 0
    39dc:	30 e0       	ldi	r19, 0x00	; 0
    39de:	40 ec       	ldi	r20, 0xC0	; 192
    39e0:	50 e0       	ldi	r21, 0x00	; 0
    39e2:	6b e9       	ldi	r22, 0x9B	; 155
    39e4:	74 e0       	ldi	r23, 0x04	; 4
    39e6:	8a e3       	ldi	r24, 0x3A	; 58
    39e8:	9c e1       	ldi	r25, 0x1C	; 28
    39ea:	0e 94 f7 11 	call	0x23ee	; 0x23ee <xTaskCreate>
    39ee:	df 91       	pop	r29
    39f0:	cf 91       	pop	r28
    39f2:	1f 91       	pop	r17
    39f4:	0f 91       	pop	r16
    39f6:	ff 90       	pop	r15
    39f8:	ef 90       	pop	r14
    39fa:	df 90       	pop	r13
    39fc:	cf 90       	pop	r12
    39fe:	08 95       	ret

00003a00 <led_slow_blink>:
    3a00:	0f 93       	push	r16
    3a02:	1f 93       	push	r17
    3a04:	cf 93       	push	r28
    3a06:	df 93       	push	r29
    3a08:	c8 2f       	mov	r28, r24
    3a0a:	d0 e0       	ldi	r29, 0x00	; 0
    3a0c:	8e 01       	movw	r16, r28
    3a0e:	00 0f       	add	r16, r16
    3a10:	11 1f       	adc	r17, r17
    3a12:	d8 01       	movw	r26, r16
    3a14:	ac 0f       	add	r26, r28
    3a16:	bd 1f       	adc	r27, r29
    3a18:	aa 0f       	add	r26, r26
    3a1a:	bb 1f       	adc	r27, r27
    3a1c:	a3 5a       	subi	r26, 0xA3	; 163
    3a1e:	b7 4e       	sbci	r27, 0xE7	; 231
    3a20:	e0 91 d5 19 	lds	r30, 0x19D5	; 0x8019d5 <register_access+0xc>
    3a24:	f0 91 d6 19 	lds	r31, 0x19D6	; 0x8019d6 <register_access+0xd>
    3a28:	12 96       	adiw	r26, 0x02	; 2
    3a2a:	6c 91       	ld	r22, X
    3a2c:	12 97       	sbiw	r26, 0x02	; 2
    3a2e:	8d 91       	ld	r24, X+
    3a30:	9c 91       	ld	r25, X
    3a32:	19 95       	eicall
    3a34:	c0 0f       	add	r28, r16
    3a36:	d1 1f       	adc	r29, r17
    3a38:	cc 0f       	add	r28, r28
    3a3a:	dd 1f       	adc	r29, r29
    3a3c:	c3 5a       	subi	r28, 0xA3	; 163
    3a3e:	d7 4e       	sbci	r29, 0xE7	; 231
    3a40:	81 e0       	ldi	r24, 0x01	; 1
    3a42:	8c 83       	std	Y+4, r24	; 0x04
    3a44:	df 91       	pop	r29
    3a46:	cf 91       	pop	r28
    3a48:	1f 91       	pop	r17
    3a4a:	0f 91       	pop	r16
    3a4c:	08 95       	ret

00003a4e <led_fast_blink>:
    3a4e:	0f 93       	push	r16
    3a50:	1f 93       	push	r17
    3a52:	cf 93       	push	r28
    3a54:	df 93       	push	r29
    3a56:	c8 2f       	mov	r28, r24
    3a58:	d0 e0       	ldi	r29, 0x00	; 0
    3a5a:	8e 01       	movw	r16, r28
    3a5c:	00 0f       	add	r16, r16
    3a5e:	11 1f       	adc	r17, r17
    3a60:	d8 01       	movw	r26, r16
    3a62:	ac 0f       	add	r26, r28
    3a64:	bd 1f       	adc	r27, r29
    3a66:	aa 0f       	add	r26, r26
    3a68:	bb 1f       	adc	r27, r27
    3a6a:	a3 5a       	subi	r26, 0xA3	; 163
    3a6c:	b7 4e       	sbci	r27, 0xE7	; 231
    3a6e:	e0 91 d5 19 	lds	r30, 0x19D5	; 0x8019d5 <register_access+0xc>
    3a72:	f0 91 d6 19 	lds	r31, 0x19D6	; 0x8019d6 <register_access+0xd>
    3a76:	12 96       	adiw	r26, 0x02	; 2
    3a78:	6c 91       	ld	r22, X
    3a7a:	12 97       	sbiw	r26, 0x02	; 2
    3a7c:	8d 91       	ld	r24, X+
    3a7e:	9c 91       	ld	r25, X
    3a80:	19 95       	eicall
    3a82:	c0 0f       	add	r28, r16
    3a84:	d1 1f       	adc	r29, r17
    3a86:	cc 0f       	add	r28, r28
    3a88:	dd 1f       	adc	r29, r29
    3a8a:	c3 5a       	subi	r28, 0xA3	; 163
    3a8c:	d7 4e       	sbci	r29, 0xE7	; 231
    3a8e:	82 e0       	ldi	r24, 0x02	; 2
    3a90:	8c 83       	std	Y+4, r24	; 0x04
    3a92:	df 91       	pop	r29
    3a94:	cf 91       	pop	r28
    3a96:	1f 91       	pop	r17
    3a98:	0f 91       	pop	r16
    3a9a:	08 95       	ret

00003a9c <led_led_on>:
    3a9c:	28 2f       	mov	r18, r24
    3a9e:	30 e0       	ldi	r19, 0x00	; 0
    3aa0:	f9 01       	movw	r30, r18
    3aa2:	ee 0f       	add	r30, r30
    3aa4:	ff 1f       	adc	r31, r31
    3aa6:	e2 0f       	add	r30, r18
    3aa8:	f3 1f       	adc	r31, r19
    3aaa:	ee 0f       	add	r30, r30
    3aac:	ff 1f       	adc	r31, r31
    3aae:	e3 5a       	subi	r30, 0xA3	; 163
    3ab0:	f7 4e       	sbci	r31, 0xE7	; 231
    3ab2:	93 e0       	ldi	r25, 0x03	; 3
    3ab4:	94 83       	std	Z+4, r25	; 0x04
    3ab6:	b0 ce       	rjmp	.-672    	; 0x3818 <_turn_on>
    3ab8:	08 95       	ret

00003aba <led_led_off>:
    3aba:	28 2f       	mov	r18, r24
    3abc:	30 e0       	ldi	r19, 0x00	; 0
    3abe:	f9 01       	movw	r30, r18
    3ac0:	ee 0f       	add	r30, r30
    3ac2:	ff 1f       	adc	r31, r31
    3ac4:	e2 0f       	add	r30, r18
    3ac6:	f3 1f       	adc	r31, r19
    3ac8:	ee 0f       	add	r30, r30
    3aca:	ff 1f       	adc	r31, r31
    3acc:	e3 5a       	subi	r30, 0xA3	; 163
    3ace:	f7 4e       	sbci	r31, 0xE7	; 231
    3ad0:	94 e0       	ldi	r25, 0x04	; 4
    3ad2:	94 83       	std	Z+4, r25	; 0x04
    3ad4:	73 ce       	rjmp	.-794    	; 0x37bc <_turn_off>
    3ad6:	08 95       	ret

00003ad8 <led_long_puls>:
    3ad8:	90 e0       	ldi	r25, 0x00	; 0
    3ada:	fc 01       	movw	r30, r24
    3adc:	ee 0f       	add	r30, r30
    3ade:	ff 1f       	adc	r31, r31
    3ae0:	df 01       	movw	r26, r30
    3ae2:	a8 0f       	add	r26, r24
    3ae4:	b9 1f       	adc	r27, r25
    3ae6:	aa 0f       	add	r26, r26
    3ae8:	bb 1f       	adc	r27, r27
    3aea:	a3 5a       	subi	r26, 0xA3	; 163
    3aec:	b7 4e       	sbci	r27, 0xE7	; 231
    3aee:	24 e0       	ldi	r18, 0x04	; 4
    3af0:	15 96       	adiw	r26, 0x05	; 5
    3af2:	2c 93       	st	X, r18
    3af4:	15 97       	sbiw	r26, 0x05	; 5
    3af6:	fd 01       	movw	r30, r26
    3af8:	14 82       	std	Z+4, r1	; 0x04
    3afa:	08 95       	ret

00003afc <led_short_puls>:
    3afc:	90 e0       	ldi	r25, 0x00	; 0
    3afe:	fc 01       	movw	r30, r24
    3b00:	ee 0f       	add	r30, r30
    3b02:	ff 1f       	adc	r31, r31
    3b04:	df 01       	movw	r26, r30
    3b06:	a8 0f       	add	r26, r24
    3b08:	b9 1f       	adc	r27, r25
    3b0a:	aa 0f       	add	r26, r26
    3b0c:	bb 1f       	adc	r27, r27
    3b0e:	a3 5a       	subi	r26, 0xA3	; 163
    3b10:	b7 4e       	sbci	r27, 0xE7	; 231
    3b12:	21 e0       	ldi	r18, 0x01	; 1
    3b14:	15 96       	adiw	r26, 0x05	; 5
    3b16:	2c 93       	st	X, r18
    3b18:	15 97       	sbiw	r26, 0x05	; 5
    3b1a:	fd 01       	movw	r30, r26
    3b1c:	14 82       	std	Z+4, r1	; 0x04
    3b1e:	08 95       	ret

00003b20 <_serial_call_back>:
    3b20:	0f 93       	push	r16
    3b22:	1f 93       	push	r17
    3b24:	cf 93       	push	r28
    3b26:	df 93       	push	r29
    3b28:	1f 92       	push	r1
    3b2a:	1f 92       	push	r1
    3b2c:	cd b7       	in	r28, 0x3d	; 61
    3b2e:	de b7       	in	r29, 0x3e	; 62
    3b30:	8c 01       	movw	r16, r24
    3b32:	19 82       	std	Y+1, r1	; 0x01
    3b34:	2d c0       	rjmp	.+90     	; 0x3b90 <_serial_call_back+0x70>
    3b36:	e0 91 d9 18 	lds	r30, 0x18D9	; 0x8018d9 <rec_buf_inp.2947>
    3b3a:	ec 32       	cpi	r30, 0x2C	; 44
    3b3c:	50 f4       	brcc	.+20     	; 0x3b52 <_serial_call_back+0x32>
    3b3e:	81 e0       	ldi	r24, 0x01	; 1
    3b40:	8e 0f       	add	r24, r30
    3b42:	80 93 d9 18 	sts	0x18D9, r24	; 0x8018d9 <rec_buf_inp.2947>
    3b46:	f0 e0       	ldi	r31, 0x00	; 0
    3b48:	e5 5f       	subi	r30, 0xF5	; 245
    3b4a:	f6 4e       	sbci	r31, 0xE6	; 230
    3b4c:	8a 81       	ldd	r24, Y+2	; 0x02
    3b4e:	80 83       	st	Z, r24
    3b50:	02 c0       	rjmp	.+4      	; 0x3b56 <_serial_call_back+0x36>
    3b52:	10 92 d9 18 	sts	0x18D9, r1	; 0x8018d9 <rec_buf_inp.2947>
    3b56:	8a 81       	ldd	r24, Y+2	; 0x02
    3b58:	8a 30       	cpi	r24, 0x0A	; 10
    3b5a:	d1 f4       	brne	.+52     	; 0x3b90 <_serial_call_back+0x70>
    3b5c:	40 91 d9 18 	lds	r20, 0x18D9	; 0x8018d9 <rec_buf_inp.2947>
    3b60:	50 e0       	ldi	r21, 0x00	; 0
    3b62:	fa 01       	movw	r30, r20
    3b64:	e7 5f       	subi	r30, 0xF7	; 247
    3b66:	f6 4e       	sbci	r31, 0xE6	; 230
    3b68:	10 82       	st	Z, r1
    3b6a:	41 50       	subi	r20, 0x01	; 1
    3b6c:	51 09       	sbc	r21, r1
    3b6e:	9e 01       	movw	r18, r28
    3b70:	2f 5f       	subi	r18, 0xFF	; 255
    3b72:	3f 4f       	sbci	r19, 0xFF	; 255
    3b74:	6b e0       	ldi	r22, 0x0B	; 11
    3b76:	79 e1       	ldi	r23, 0x19	; 25
    3b78:	80 91 dc 18 	lds	r24, 0x18DC	; 0x8018dc <_serial_reply_buffer_handle>
    3b7c:	90 91 dd 18 	lds	r25, 0x18DD	; 0x8018dd <_serial_reply_buffer_handle+0x1>
    3b80:	0e 94 74 10 	call	0x20e8	; 0x20e8 <xStreamBufferSendFromISR>
    3b84:	89 81       	ldd	r24, Y+1	; 0x01
    3b86:	81 11       	cpse	r24, r1
    3b88:	0e 94 c6 0a 	call	0x158c	; 0x158c <vPortYield>
    3b8c:	10 92 d9 18 	sts	0x18D9, r1	; 0x8018d9 <rec_buf_inp.2947>
    3b90:	be 01       	movw	r22, r28
    3b92:	6e 5f       	subi	r22, 0xFE	; 254
    3b94:	7f 4f       	sbci	r23, 0xFF	; 255
    3b96:	c8 01       	movw	r24, r16
    3b98:	8f d5       	rcall	.+2846   	; 0x46b8 <serial_get_byte>
    3b9a:	88 23       	and	r24, r24
    3b9c:	61 f2       	breq	.-104    	; 0x3b36 <_serial_call_back+0x16>
    3b9e:	0f 90       	pop	r0
    3ba0:	0f 90       	pop	r0
    3ba2:	df 91       	pop	r29
    3ba4:	cf 91       	pop	r28
    3ba6:	1f 91       	pop	r17
    3ba8:	0f 91       	pop	r16
    3baa:	08 95       	ret

00003bac <_upload_message>:
    3bac:	0f 93       	push	r16
    3bae:	1f 93       	push	r17
    3bb0:	cf 93       	push	r28
    3bb2:	df 93       	push	r29
    3bb4:	8c 01       	movw	r16, r24
    3bb6:	eb 01       	movw	r28, r22
    3bb8:	80 91 dc 18 	lds	r24, 0x18DC	; 0x8018dc <_serial_reply_buffer_handle>
    3bbc:	90 91 dd 18 	lds	r25, 0x18DD	; 0x8018dd <_serial_reply_buffer_handle+0x1>
    3bc0:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <xStreamBufferReset>
    3bc4:	b8 01       	movw	r22, r16
    3bc6:	85 e7       	ldi	r24, 0x75	; 117
    3bc8:	98 e1       	ldi	r25, 0x18	; 24
    3bca:	0e 94 1d 2b 	call	0x563a	; 0x563a <strcpy>
    3bce:	20 97       	sbiw	r28, 0x00	; 0
    3bd0:	79 f0       	breq	.+30     	; 0x3bf0 <_upload_message+0x44>
    3bd2:	e5 e7       	ldi	r30, 0x75	; 117
    3bd4:	f8 e1       	ldi	r31, 0x18	; 24
    3bd6:	01 90       	ld	r0, Z+
    3bd8:	00 20       	and	r0, r0
    3bda:	e9 f7       	brne	.-6      	; 0x3bd6 <_upload_message+0x2a>
    3bdc:	31 97       	sbiw	r30, 0x01	; 1
    3bde:	80 e2       	ldi	r24, 0x20	; 32
    3be0:	90 e0       	ldi	r25, 0x00	; 0
    3be2:	91 83       	std	Z+1, r25	; 0x01
    3be4:	80 83       	st	Z, r24
    3be6:	be 01       	movw	r22, r28
    3be8:	85 e7       	ldi	r24, 0x75	; 117
    3bea:	98 e1       	ldi	r25, 0x18	; 24
    3bec:	0e 94 12 2b 	call	0x5624	; 0x5624 <strcat>
    3bf0:	e5 e7       	ldi	r30, 0x75	; 117
    3bf2:	f8 e1       	ldi	r31, 0x18	; 24
    3bf4:	df 01       	movw	r26, r30
    3bf6:	0d 90       	ld	r0, X+
    3bf8:	00 20       	and	r0, r0
    3bfa:	e9 f7       	brne	.-6      	; 0x3bf6 <_upload_message+0x4a>
    3bfc:	11 97       	sbiw	r26, 0x01	; 1
    3bfe:	8d e0       	ldi	r24, 0x0D	; 13
    3c00:	9a e0       	ldi	r25, 0x0A	; 10
    3c02:	11 96       	adiw	r26, 0x01	; 1
    3c04:	9c 93       	st	X, r25
    3c06:	8e 93       	st	-X, r24
    3c08:	12 96       	adiw	r26, 0x02	; 2
    3c0a:	1c 92       	st	X, r1
    3c0c:	01 90       	ld	r0, Z+
    3c0e:	00 20       	and	r0, r0
    3c10:	e9 f7       	brne	.-6      	; 0x3c0c <_upload_message+0x60>
    3c12:	31 97       	sbiw	r30, 0x01	; 1
    3c14:	e5 57       	subi	r30, 0x75	; 117
    3c16:	f8 41       	sbci	r31, 0x18	; 24
    3c18:	ae 2f       	mov	r26, r30
    3c1a:	85 e7       	ldi	r24, 0x75	; 117
    3c1c:	98 e1       	ldi	r25, 0x18	; 24
    3c1e:	ac 01       	movw	r20, r24
    3c20:	6a 2f       	mov	r22, r26
    3c22:	80 91 de 18 	lds	r24, 0x18DE	; 0x8018de <_rn2483_serial>
    3c26:	90 91 df 18 	lds	r25, 0x18DF	; 0x8018df <_rn2483_serial+0x1>
    3c2a:	f6 d4       	rcall	.+2540   	; 0x4618 <serial_send_bytes>
    3c2c:	81 11       	cpse	r24, r1
    3c2e:	11 c0       	rjmp	.+34     	; 0x3c52 <_upload_message+0xa6>
    3c30:	08 e2       	ldi	r16, 0x28	; 40
    3c32:	15 e0       	ldi	r17, 0x05	; 5
    3c34:	20 e0       	ldi	r18, 0x00	; 0
    3c36:	30 e0       	ldi	r19, 0x00	; 0
    3c38:	4d e2       	ldi	r20, 0x2D	; 45
    3c3a:	50 e0       	ldi	r21, 0x00	; 0
    3c3c:	65 e6       	ldi	r22, 0x65	; 101
    3c3e:	79 e1       	ldi	r23, 0x19	; 25
    3c40:	80 91 dc 18 	lds	r24, 0x18DC	; 0x8018dc <_serial_reply_buffer_handle>
    3c44:	90 91 dd 18 	lds	r25, 0x18DD	; 0x8018dd <_serial_reply_buffer_handle+0x1>
    3c48:	0e 94 b6 10 	call	0x216c	; 0x216c <xStreamBufferReceive>
    3c4c:	85 e6       	ldi	r24, 0x65	; 101
    3c4e:	99 e1       	ldi	r25, 0x19	; 25
    3c50:	02 c0       	rjmp	.+4      	; 0x3c56 <_upload_message+0xaa>
    3c52:	80 e0       	ldi	r24, 0x00	; 0
    3c54:	90 e0       	ldi	r25, 0x00	; 0
    3c56:	df 91       	pop	r29
    3c58:	cf 91       	pop	r28
    3c5a:	1f 91       	pop	r17
    3c5c:	0f 91       	pop	r16
    3c5e:	08 95       	ret

00003c60 <_reply2return_code>:
    3c60:	2f 92       	push	r2
    3c62:	3f 92       	push	r3
    3c64:	4f 92       	push	r4
    3c66:	5f 92       	push	r5
    3c68:	6f 92       	push	r6
    3c6a:	7f 92       	push	r7
    3c6c:	8f 92       	push	r8
    3c6e:	9f 92       	push	r9
    3c70:	af 92       	push	r10
    3c72:	bf 92       	push	r11
    3c74:	cf 92       	push	r12
    3c76:	df 92       	push	r13
    3c78:	ef 92       	push	r14
    3c7a:	ff 92       	push	r15
    3c7c:	0f 93       	push	r16
    3c7e:	1f 93       	push	r17
    3c80:	cf 93       	push	r28
    3c82:	df 93       	push	r29
    3c84:	5c 01       	movw	r10, r24
    3c86:	fc 01       	movw	r30, r24
    3c88:	01 90       	ld	r0, Z+
    3c8a:	00 20       	and	r0, r0
    3c8c:	e9 f7       	brne	.-6      	; 0x3c88 <_reply2return_code+0x28>
    3c8e:	31 97       	sbiw	r30, 0x01	; 1
    3c90:	6f 01       	movw	r12, r30
    3c92:	c8 1a       	sub	r12, r24
    3c94:	d9 0a       	sbc	r13, r25
    3c96:	5c 2c       	mov	r5, r12
    3c98:	0f 2e       	mov	r0, r31
    3c9a:	fc e3       	ldi	r31, 0x3C	; 60
    3c9c:	8f 2e       	mov	r8, r31
    3c9e:	f7 e0       	ldi	r31, 0x07	; 7
    3ca0:	9f 2e       	mov	r9, r31
    3ca2:	f0 2d       	mov	r31, r0
    3ca4:	e1 2c       	mov	r14, r1
    3ca6:	f1 2c       	mov	r15, r1
    3ca8:	4c 2c       	mov	r4, r12
    3caa:	37 01       	movw	r6, r14
    3cac:	f4 01       	movw	r30, r8
    3cae:	01 81       	ldd	r16, Z+1	; 0x01
    3cb0:	12 81       	ldd	r17, Z+2	; 0x02
    3cb2:	e8 01       	movw	r28, r16
    3cb4:	09 90       	ld	r0, Y+
    3cb6:	00 20       	and	r0, r0
    3cb8:	e9 f7       	brne	.-6      	; 0x3cb4 <_reply2return_code+0x54>
    3cba:	21 97       	sbiw	r28, 0x01	; 1
    3cbc:	c0 1b       	sub	r28, r16
    3cbe:	d1 0b       	sbc	r29, r17
    3cc0:	3c 2e       	mov	r3, r28
    3cc2:	f9 e0       	ldi	r31, 0x09	; 9
    3cc4:	cf 16       	cp	r12, r31
    3cc6:	d1 04       	cpc	r13, r1
    3cc8:	58 f0       	brcs	.+22     	; 0x3ce0 <_reply2return_code+0x80>
    3cca:	f4 01       	movw	r30, r8
    3ccc:	20 80       	ld	r2, Z
    3cce:	fe e0       	ldi	r31, 0x0E	; 14
    3cd0:	2f 12       	cpse	r2, r31
    3cd2:	06 c0       	rjmp	.+12     	; 0x3ce0 <_reply2return_code+0x80>
    3cd4:	b8 01       	movw	r22, r16
    3cd6:	c5 01       	movw	r24, r10
    3cd8:	0e 94 ed 2a 	call	0x55da	; 0x55da <strcasestr>
    3cdc:	89 2b       	or	r24, r25
    3cde:	09 f5       	brne	.+66     	; 0x3d22 <_reply2return_code+0xc2>
    3ce0:	44 2d       	mov	r20, r4
    3ce2:	35 14       	cp	r3, r5
    3ce4:	08 f4       	brcc	.+2      	; 0x3ce8 <_reply2return_code+0x88>
    3ce6:	4c 2f       	mov	r20, r28
    3ce8:	50 e0       	ldi	r21, 0x00	; 0
    3cea:	b8 01       	movw	r22, r16
    3cec:	c5 01       	movw	r24, r10
    3cee:	0e 94 24 2b 	call	0x5648	; 0x5648 <strncasecmp>
    3cf2:	89 2b       	or	r24, r25
    3cf4:	49 f4       	brne	.+18     	; 0x3d08 <_reply2return_code+0xa8>
    3cf6:	f3 01       	movw	r30, r6
    3cf8:	ee 0f       	add	r30, r30
    3cfa:	ff 1f       	adc	r31, r31
    3cfc:	e6 0d       	add	r30, r6
    3cfe:	f7 1d       	adc	r31, r7
    3d00:	e4 5c       	subi	r30, 0xC4	; 196
    3d02:	f8 4f       	sbci	r31, 0xF8	; 248
    3d04:	20 80       	ld	r2, Z
    3d06:	0d c0       	rjmp	.+26     	; 0x3d22 <_reply2return_code+0xc2>
    3d08:	8f ef       	ldi	r24, 0xFF	; 255
    3d0a:	e8 1a       	sub	r14, r24
    3d0c:	f8 0a       	sbc	r15, r24
    3d0e:	e3 e0       	ldi	r30, 0x03	; 3
    3d10:	8e 0e       	add	r8, r30
    3d12:	91 1c       	adc	r9, r1
    3d14:	f1 e1       	ldi	r31, 0x11	; 17
    3d16:	ef 16       	cp	r14, r31
    3d18:	f1 04       	cpc	r15, r1
    3d1a:	39 f6       	brne	.-114    	; 0x3caa <_reply2return_code+0x4a>
    3d1c:	68 94       	set
    3d1e:	22 24       	eor	r2, r2
    3d20:	24 f8       	bld	r2, 4
    3d22:	82 2d       	mov	r24, r2
    3d24:	df 91       	pop	r29
    3d26:	cf 91       	pop	r28
    3d28:	1f 91       	pop	r17
    3d2a:	0f 91       	pop	r16
    3d2c:	ff 90       	pop	r15
    3d2e:	ef 90       	pop	r14
    3d30:	df 90       	pop	r13
    3d32:	cf 90       	pop	r12
    3d34:	bf 90       	pop	r11
    3d36:	af 90       	pop	r10
    3d38:	9f 90       	pop	r9
    3d3a:	8f 90       	pop	r8
    3d3c:	7f 90       	pop	r7
    3d3e:	6f 90       	pop	r6
    3d40:	5f 90       	pop	r5
    3d42:	4f 90       	pop	r4
    3d44:	3f 90       	pop	r3
    3d46:	2f 90       	pop	r2
    3d48:	08 95       	ret

00003d4a <_upload_message_rc>:
    3d4a:	30 df       	rcall	.-416    	; 0x3bac <_upload_message>
    3d4c:	89 cf       	rjmp	.-238    	; 0x3c60 <_reply2return_code>
    3d4e:	08 95       	ret

00003d50 <lora_driver_flush_buffers>:
    3d50:	80 91 dc 18 	lds	r24, 0x18DC	; 0x8018dc <_serial_reply_buffer_handle>
    3d54:	90 91 dd 18 	lds	r25, 0x18DD	; 0x8018dd <_serial_reply_buffer_handle+0x1>
    3d58:	0c 94 8c 0f 	jmp	0x1f18	; 0x1f18 <xStreamBufferReset>
    3d5c:	08 95       	ret

00003d5e <lora_driver_create>:
    3d5e:	8f 92       	push	r8
    3d60:	9f 92       	push	r9
    3d62:	af 92       	push	r10
    3d64:	cf 92       	push	r12
    3d66:	ef 92       	push	r14
    3d68:	0f 93       	push	r16
    3d6a:	1f 93       	push	r17
    3d6c:	cf 93       	push	r28
    3d6e:	c8 2f       	mov	r28, r24
    3d70:	8b 01       	movw	r16, r22
    3d72:	41 e0       	ldi	r20, 0x01	; 1
    3d74:	60 e0       	ldi	r22, 0x00	; 0
    3d76:	70 e0       	ldi	r23, 0x00	; 0
    3d78:	88 ec       	ldi	r24, 0xC8	; 200
    3d7a:	90 e0       	ldi	r25, 0x00	; 0
    3d7c:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <xStreamBufferGenericCreate>
    3d80:	90 93 dd 18 	sts	0x18DD, r25	; 0x8018dd <_serial_reply_buffer_handle+0x1>
    3d84:	80 93 dc 18 	sts	0x18DC, r24	; 0x8018dc <_serial_reply_buffer_handle>
    3d88:	10 93 db 18 	sts	0x18DB, r17	; 0x8018db <_downlinkMessageBuffer+0x1>
    3d8c:	00 93 da 18 	sts	0x18DA, r16	; 0x8018da <_downlinkMessageBuffer>
    3d90:	0f 2e       	mov	r0, r31
    3d92:	f0 e9       	ldi	r31, 0x90	; 144
    3d94:	8f 2e       	mov	r8, r31
    3d96:	fd e1       	ldi	r31, 0x1D	; 29
    3d98:	9f 2e       	mov	r9, r31
    3d9a:	f0 2d       	mov	r31, r0
    3d9c:	68 94       	set
    3d9e:	aa 24       	eor	r10, r10
    3da0:	a6 f8       	bld	r10, 6
    3da2:	68 94       	set
    3da4:	cc 24       	eor	r12, r12
    3da6:	c6 f8       	bld	r12, 6
    3da8:	e1 2c       	mov	r14, r1
    3daa:	00 e0       	ldi	r16, 0x00	; 0
    3dac:	23 e0       	ldi	r18, 0x03	; 3
    3dae:	40 e0       	ldi	r20, 0x00	; 0
    3db0:	51 ee       	ldi	r21, 0xE1	; 225
    3db2:	60 e0       	ldi	r22, 0x00	; 0
    3db4:	70 e0       	ldi	r23, 0x00	; 0
    3db6:	8c 2f       	mov	r24, r28
    3db8:	74 d3       	rcall	.+1768   	; 0x44a2 <serial_new_instance>
    3dba:	90 93 df 18 	sts	0x18DF, r25	; 0x8018df <_rn2483_serial+0x1>
    3dbe:	80 93 de 18 	sts	0x18DE, r24	; 0x8018de <_rn2483_serial>
    3dc2:	e0 91 d1 19 	lds	r30, 0x19D1	; 0x8019d1 <register_access+0x8>
    3dc6:	f0 91 d2 19 	lds	r31, 0x19D2	; 0x8019d2 <register_access+0x9>
    3dca:	64 e0       	ldi	r22, 0x04	; 4
    3dcc:	87 e0       	ldi	r24, 0x07	; 7
    3dce:	91 e0       	ldi	r25, 0x01	; 1
    3dd0:	19 95       	eicall
    3dd2:	cf 91       	pop	r28
    3dd4:	1f 91       	pop	r17
    3dd6:	0f 91       	pop	r16
    3dd8:	ef 90       	pop	r14
    3dda:	cf 90       	pop	r12
    3ddc:	af 90       	pop	r10
    3dde:	9f 90       	pop	r9
    3de0:	8f 90       	pop	r8
    3de2:	08 95       	ret

00003de4 <lora_driver_reset_rn2483>:
    3de4:	88 23       	and	r24, r24
    3de6:	49 f0       	breq	.+18     	; 0x3dfa <lora_driver_reset_rn2483+0x16>
    3de8:	e0 91 db 19 	lds	r30, 0x19DB	; 0x8019db <register_access+0x12>
    3dec:	f0 91 dc 19 	lds	r31, 0x19DC	; 0x8019dc <register_access+0x13>
    3df0:	64 e0       	ldi	r22, 0x04	; 4
    3df2:	88 e0       	ldi	r24, 0x08	; 8
    3df4:	91 e0       	ldi	r25, 0x01	; 1
    3df6:	19 95       	eicall
    3df8:	08 95       	ret
    3dfa:	e0 91 d1 19 	lds	r30, 0x19D1	; 0x8019d1 <register_access+0x8>
    3dfe:	f0 91 d2 19 	lds	r31, 0x19D2	; 0x8019d2 <register_access+0x9>
    3e02:	64 e0       	ldi	r22, 0x04	; 4
    3e04:	88 e0       	ldi	r24, 0x08	; 8
    3e06:	91 e0       	ldi	r25, 0x01	; 1
    3e08:	19 95       	eicall
    3e0a:	08 95       	ret

00003e0c <lora_driver_rn2483_factory_reset>:
    3e0c:	60 e0       	ldi	r22, 0x00	; 0
    3e0e:	70 e0       	ldi	r23, 0x00	; 0
    3e10:	82 ec       	ldi	r24, 0xC2	; 194
    3e12:	94 e0       	ldi	r25, 0x04	; 4
    3e14:	cb de       	rcall	.-618    	; 0x3bac <_upload_message>
    3e16:	e5 e6       	ldi	r30, 0x65	; 101
    3e18:	f9 e1       	ldi	r31, 0x19	; 25
    3e1a:	01 90       	ld	r0, Z+
    3e1c:	00 20       	and	r0, r0
    3e1e:	e9 f7       	brne	.-6      	; 0x3e1a <lora_driver_rn2483_factory_reset+0xe>
    3e20:	31 97       	sbiw	r30, 0x01	; 1
    3e22:	e5 56       	subi	r30, 0x65	; 101
    3e24:	f9 41       	sbci	r31, 0x19	; 25
    3e26:	81 e0       	ldi	r24, 0x01	; 1
    3e28:	75 97       	sbiw	r30, 0x15	; 21
    3e2a:	08 f0       	brcs	.+2      	; 0x3e2e <lora_driver_rn2483_factory_reset+0x22>
    3e2c:	80 e0       	ldi	r24, 0x00	; 0
    3e2e:	08 95       	ret

00003e30 <lora_driver_get_rn2483_hweui>:
    3e30:	cf 93       	push	r28
    3e32:	df 93       	push	r29
    3e34:	ec 01       	movw	r28, r24
    3e36:	60 e0       	ldi	r22, 0x00	; 0
    3e38:	70 e0       	ldi	r23, 0x00	; 0
    3e3a:	83 ed       	ldi	r24, 0xD3	; 211
    3e3c:	94 e0       	ldi	r25, 0x04	; 4
    3e3e:	b6 de       	rcall	.-660    	; 0x3bac <_upload_message>
    3e40:	e5 e6       	ldi	r30, 0x65	; 101
    3e42:	f9 e1       	ldi	r31, 0x19	; 25
    3e44:	01 90       	ld	r0, Z+
    3e46:	00 20       	and	r0, r0
    3e48:	e9 f7       	brne	.-6      	; 0x3e44 <lora_driver_get_rn2483_hweui+0x14>
    3e4a:	e6 57       	subi	r30, 0x76	; 118
    3e4c:	f9 41       	sbci	r31, 0x19	; 25
    3e4e:	39 f4       	brne	.+14     	; 0x3e5e <lora_driver_get_rn2483_hweui+0x2e>
    3e50:	65 e6       	ldi	r22, 0x65	; 101
    3e52:	79 e1       	ldi	r23, 0x19	; 25
    3e54:	ce 01       	movw	r24, r28
    3e56:	0e 94 1d 2b 	call	0x563a	; 0x563a <strcpy>
    3e5a:	80 e0       	ldi	r24, 0x00	; 0
    3e5c:	02 c0       	rjmp	.+4      	; 0x3e62 <lora_driver_get_rn2483_hweui+0x32>
    3e5e:	18 82       	st	Y, r1
    3e60:	81 e0       	ldi	r24, 0x01	; 1
    3e62:	df 91       	pop	r29
    3e64:	cf 91       	pop	r28
    3e66:	08 95       	ret

00003e68 <lora_driver_set_device_identifier>:
    3e68:	fc 01       	movw	r30, r24
    3e6a:	01 90       	ld	r0, Z+
    3e6c:	00 20       	and	r0, r0
    3e6e:	e9 f7       	brne	.-6      	; 0x3e6a <lora_driver_set_device_identifier+0x2>
    3e70:	9f 01       	movw	r18, r30
    3e72:	21 51       	subi	r18, 0x11	; 17
    3e74:	31 09       	sbc	r19, r1
    3e76:	28 17       	cp	r18, r24
    3e78:	39 07       	cpc	r19, r25
    3e7a:	29 f4       	brne	.+10     	; 0x3e86 <lora_driver_set_device_identifier+0x1e>
    3e7c:	bc 01       	movw	r22, r24
    3e7e:	81 e0       	ldi	r24, 0x01	; 1
    3e80:	95 e0       	ldi	r25, 0x05	; 5
    3e82:	63 cf       	rjmp	.-314    	; 0x3d4a <_upload_message_rc>
    3e84:	08 95       	ret
    3e86:	89 e0       	ldi	r24, 0x09	; 9
    3e88:	08 95       	ret

00003e8a <lora_driver_set_application_identifier>:
    3e8a:	fc 01       	movw	r30, r24
    3e8c:	01 90       	ld	r0, Z+
    3e8e:	00 20       	and	r0, r0
    3e90:	e9 f7       	brne	.-6      	; 0x3e8c <lora_driver_set_application_identifier+0x2>
    3e92:	9f 01       	movw	r18, r30
    3e94:	21 51       	subi	r18, 0x11	; 17
    3e96:	31 09       	sbc	r19, r1
    3e98:	28 17       	cp	r18, r24
    3e9a:	39 07       	cpc	r19, r25
    3e9c:	29 f4       	brne	.+10     	; 0x3ea8 <lora_driver_set_application_identifier+0x1e>
    3e9e:	bc 01       	movw	r22, r24
    3ea0:	80 e1       	ldi	r24, 0x10	; 16
    3ea2:	95 e0       	ldi	r25, 0x05	; 5
    3ea4:	52 cf       	rjmp	.-348    	; 0x3d4a <_upload_message_rc>
    3ea6:	08 95       	ret
    3ea8:	89 e0       	ldi	r24, 0x09	; 9
    3eaa:	08 95       	ret

00003eac <lora_driver_set_application_key>:
    3eac:	fc 01       	movw	r30, r24
    3eae:	01 90       	ld	r0, Z+
    3eb0:	00 20       	and	r0, r0
    3eb2:	e9 f7       	brne	.-6      	; 0x3eae <lora_driver_set_application_key+0x2>
    3eb4:	9f 01       	movw	r18, r30
    3eb6:	21 52       	subi	r18, 0x21	; 33
    3eb8:	31 09       	sbc	r19, r1
    3eba:	28 17       	cp	r18, r24
    3ebc:	39 07       	cpc	r19, r25
    3ebe:	29 f4       	brne	.+10     	; 0x3eca <lora_driver_set_application_key+0x1e>
    3ec0:	bc 01       	movw	r22, r24
    3ec2:	8f e1       	ldi	r24, 0x1F	; 31
    3ec4:	95 e0       	ldi	r25, 0x05	; 5
    3ec6:	41 cf       	rjmp	.-382    	; 0x3d4a <_upload_message_rc>
    3ec8:	08 95       	ret
    3eca:	89 e0       	ldi	r24, 0x09	; 9
    3ecc:	08 95       	ret

00003ece <lora_driver_save_mac>:
    3ece:	60 e0       	ldi	r22, 0x00	; 0
    3ed0:	70 e0       	ldi	r23, 0x00	; 0
    3ed2:	8e e5       	ldi	r24, 0x5E	; 94
    3ed4:	95 e0       	ldi	r25, 0x05	; 5
    3ed6:	39 cf       	rjmp	.-398    	; 0x3d4a <_upload_message_rc>
    3ed8:	08 95       	ret

00003eda <lora_driver_join>:
    3eda:	0f 93       	push	r16
    3edc:	1f 93       	push	r17
    3ede:	e8 2f       	mov	r30, r24
    3ee0:	f0 e0       	ldi	r31, 0x00	; 0
    3ee2:	ee 0f       	add	r30, r30
    3ee4:	ff 1f       	adc	r31, r31
    3ee6:	e8 5c       	subi	r30, 0xC8	; 200
    3ee8:	f8 4f       	sbci	r31, 0xF8	; 248
    3eea:	60 81       	ld	r22, Z
    3eec:	71 81       	ldd	r23, Z+1	; 0x01
    3eee:	87 e6       	ldi	r24, 0x67	; 103
    3ef0:	95 e0       	ldi	r25, 0x05	; 5
    3ef2:	2b df       	rcall	.-426    	; 0x3d4a <_upload_message_rc>
    3ef4:	81 11       	cpse	r24, r1
    3ef6:	14 c0       	rjmp	.+40     	; 0x3f20 <lora_driver_join+0x46>
    3ef8:	08 e2       	ldi	r16, 0x28	; 40
    3efa:	15 e0       	ldi	r17, 0x05	; 5
    3efc:	20 e0       	ldi	r18, 0x00	; 0
    3efe:	30 e0       	ldi	r19, 0x00	; 0
    3f00:	4d e2       	ldi	r20, 0x2D	; 45
    3f02:	50 e0       	ldi	r21, 0x00	; 0
    3f04:	65 e6       	ldi	r22, 0x65	; 101
    3f06:	79 e1       	ldi	r23, 0x19	; 25
    3f08:	80 91 dc 18 	lds	r24, 0x18DC	; 0x8018dc <_serial_reply_buffer_handle>
    3f0c:	90 91 dd 18 	lds	r25, 0x18DD	; 0x8018dd <_serial_reply_buffer_handle+0x1>
    3f10:	0e 94 b6 10 	call	0x216c	; 0x216c <xStreamBufferReceive>
    3f14:	88 23       	and	r24, r24
    3f16:	21 f0       	breq	.+8      	; 0x3f20 <lora_driver_join+0x46>
    3f18:	85 e6       	ldi	r24, 0x65	; 101
    3f1a:	99 e1       	ldi	r25, 0x19	; 25
    3f1c:	a1 de       	rcall	.-702    	; 0x3c60 <_reply2return_code>
    3f1e:	03 c0       	rjmp	.+6      	; 0x3f26 <lora_driver_join+0x4c>
    3f20:	85 e6       	ldi	r24, 0x65	; 101
    3f22:	99 e1       	ldi	r25, 0x19	; 25
    3f24:	9d de       	rcall	.-710    	; 0x3c60 <_reply2return_code>
    3f26:	1f 91       	pop	r17
    3f28:	0f 91       	pop	r16
    3f2a:	08 95       	ret

00003f2c <lora_driver_sent_upload_message>:
    3f2c:	0f 93       	push	r16
    3f2e:	1f 93       	push	r17
    3f30:	cf 93       	push	r28
    3f32:	df 93       	push	r29
    3f34:	1f 92       	push	r1
    3f36:	cd b7       	in	r28, 0x3d	; 61
    3f38:	de b7       	in	r29, 0x3e	; 62
    3f3a:	db 01       	movw	r26, r22
    3f3c:	11 96       	adiw	r26, 0x01	; 1
    3f3e:	9c 91       	ld	r25, X
    3f40:	11 97       	sbiw	r26, 0x01	; 1
    3f42:	95 31       	cpi	r25, 0x15	; 21
    3f44:	08 f0       	brcs	.+2      	; 0x3f48 <lora_driver_sent_upload_message+0x1c>
    3f46:	b4 c0       	rjmp	.+360    	; 0x40b0 <lora_driver_sent_upload_message+0x184>
    3f48:	99 23       	and	r25, r25
    3f4a:	81 f1       	breq	.+96     	; 0x3fac <lora_driver_sent_upload_message+0x80>
    3f4c:	60 e0       	ldi	r22, 0x00	; 0
    3f4e:	70 e0       	ldi	r23, 0x00	; 0
    3f50:	27 2f       	mov	r18, r23
    3f52:	30 e0       	ldi	r19, 0x00	; 0
    3f54:	46 2f       	mov	r20, r22
    3f56:	50 e0       	ldi	r21, 0x00	; 0
    3f58:	fd 01       	movw	r30, r26
    3f5a:	e4 0f       	add	r30, r20
    3f5c:	f5 1f       	adc	r31, r21
    3f5e:	92 81       	ldd	r25, Z+2	; 0x02
    3f60:	92 95       	swap	r25
    3f62:	9f 70       	andi	r25, 0x0F	; 15
    3f64:	9a 30       	cpi	r25, 0x0A	; 10
    3f66:	10 f0       	brcs	.+4      	; 0x3f6c <lora_driver_sent_upload_message+0x40>
    3f68:	99 5c       	subi	r25, 0xC9	; 201
    3f6a:	01 c0       	rjmp	.+2      	; 0x3f6e <lora_driver_sent_upload_message+0x42>
    3f6c:	90 5d       	subi	r25, 0xD0	; 208
    3f6e:	f9 01       	movw	r30, r18
    3f70:	ea 50       	subi	r30, 0x0A	; 10
    3f72:	f7 4e       	sbci	r31, 0xE7	; 231
    3f74:	90 83       	st	Z, r25
    3f76:	2f 5f       	subi	r18, 0xFF	; 255
    3f78:	3f 4f       	sbci	r19, 0xFF	; 255
    3f7a:	fd 01       	movw	r30, r26
    3f7c:	e4 0f       	add	r30, r20
    3f7e:	f5 1f       	adc	r31, r21
    3f80:	92 81       	ldd	r25, Z+2	; 0x02
    3f82:	9f 70       	andi	r25, 0x0F	; 15
    3f84:	49 2f       	mov	r20, r25
    3f86:	50 e0       	ldi	r21, 0x00	; 0
    3f88:	4a 30       	cpi	r20, 0x0A	; 10
    3f8a:	51 05       	cpc	r21, r1
    3f8c:	14 f0       	brlt	.+4      	; 0x3f92 <lora_driver_sent_upload_message+0x66>
    3f8e:	99 5c       	subi	r25, 0xC9	; 201
    3f90:	01 c0       	rjmp	.+2      	; 0x3f94 <lora_driver_sent_upload_message+0x68>
    3f92:	90 5d       	subi	r25, 0xD0	; 208
    3f94:	f9 01       	movw	r30, r18
    3f96:	ea 50       	subi	r30, 0x0A	; 10
    3f98:	f7 4e       	sbci	r31, 0xE7	; 231
    3f9a:	90 83       	st	Z, r25
    3f9c:	7e 5f       	subi	r23, 0xFE	; 254
    3f9e:	6f 5f       	subi	r22, 0xFF	; 255
    3fa0:	11 96       	adiw	r26, 0x01	; 1
    3fa2:	9c 91       	ld	r25, X
    3fa4:	11 97       	sbiw	r26, 0x01	; 1
    3fa6:	69 17       	cp	r22, r25
    3fa8:	98 f2       	brcs	.-90     	; 0x3f50 <lora_driver_sent_upload_message+0x24>
    3faa:	01 c0       	rjmp	.+2      	; 0x3fae <lora_driver_sent_upload_message+0x82>
    3fac:	70 e0       	ldi	r23, 0x00	; 0
    3fae:	e7 2f       	mov	r30, r23
    3fb0:	f0 e0       	ldi	r31, 0x00	; 0
    3fb2:	ea 50       	subi	r30, 0x0A	; 10
    3fb4:	f7 4e       	sbci	r31, 0xE7	; 231
    3fb6:	10 82       	st	Z, r1
    3fb8:	4c 91       	ld	r20, X
    3fba:	81 11       	cpse	r24, r1
    3fbc:	03 c0       	rjmp	.+6      	; 0x3fc4 <lora_driver_sent_upload_message+0x98>
    3fbe:	80 e7       	ldi	r24, 0x70	; 112
    3fc0:	95 e0       	ldi	r25, 0x05	; 5
    3fc2:	02 c0       	rjmp	.+4      	; 0x3fc8 <lora_driver_sent_upload_message+0x9c>
    3fc4:	82 e7       	ldi	r24, 0x72	; 114
    3fc6:	95 e0       	ldi	r25, 0x05	; 5
    3fc8:	26 ef       	ldi	r18, 0xF6	; 246
    3fca:	38 e1       	ldi	r19, 0x18	; 24
    3fcc:	3f 93       	push	r19
    3fce:	2f 93       	push	r18
    3fd0:	1f 92       	push	r1
    3fd2:	4f 93       	push	r20
    3fd4:	9f 93       	push	r25
    3fd6:	8f 93       	push	r24
    3fd8:	86 e7       	ldi	r24, 0x76	; 118
    3fda:	95 e0       	ldi	r25, 0x05	; 5
    3fdc:	9f 93       	push	r25
    3fde:	8f 93       	push	r24
    3fe0:	88 e3       	ldi	r24, 0x38	; 56
    3fe2:	99 e1       	ldi	r25, 0x19	; 25
    3fe4:	9f 93       	push	r25
    3fe6:	8f 93       	push	r24
    3fe8:	0e 94 7f 2b 	call	0x56fe	; 0x56fe <sprintf>
    3fec:	60 e0       	ldi	r22, 0x00	; 0
    3fee:	70 e0       	ldi	r23, 0x00	; 0
    3ff0:	88 e3       	ldi	r24, 0x38	; 56
    3ff2:	99 e1       	ldi	r25, 0x19	; 25
    3ff4:	aa de       	rcall	.-684    	; 0x3d4a <_upload_message_rc>
    3ff6:	0f b6       	in	r0, 0x3f	; 63
    3ff8:	f8 94       	cli
    3ffa:	de bf       	out	0x3e, r29	; 62
    3ffc:	0f be       	out	0x3f, r0	; 63
    3ffe:	cd bf       	out	0x3d, r28	; 61
    4000:	81 11       	cpse	r24, r1
    4002:	59 c0       	rjmp	.+178    	; 0x40b6 <lora_driver_sent_upload_message+0x18a>
    4004:	08 e2       	ldi	r16, 0x28	; 40
    4006:	15 e0       	ldi	r17, 0x05	; 5
    4008:	20 e0       	ldi	r18, 0x00	; 0
    400a:	30 e0       	ldi	r19, 0x00	; 0
    400c:	4d e2       	ldi	r20, 0x2D	; 45
    400e:	50 e0       	ldi	r21, 0x00	; 0
    4010:	65 e6       	ldi	r22, 0x65	; 101
    4012:	79 e1       	ldi	r23, 0x19	; 25
    4014:	80 91 dc 18 	lds	r24, 0x18DC	; 0x8018dc <_serial_reply_buffer_handle>
    4018:	90 91 dd 18 	lds	r25, 0x18DD	; 0x8018dd <_serial_reply_buffer_handle+0x1>
    401c:	0e 94 b6 10 	call	0x216c	; 0x216c <xStreamBufferReceive>
    4020:	88 23       	and	r24, r24
    4022:	09 f4       	brne	.+2      	; 0x4026 <lora_driver_sent_upload_message+0xfa>
    4024:	47 c0       	rjmp	.+142    	; 0x40b4 <lora_driver_sent_upload_message+0x188>
    4026:	85 e6       	ldi	r24, 0x65	; 101
    4028:	99 e1       	ldi	r25, 0x19	; 25
    402a:	1a de       	rcall	.-972    	; 0x3c60 <_reply2return_code>
    402c:	8e 30       	cpi	r24, 0x0E	; 14
    402e:	09 f0       	breq	.+2      	; 0x4032 <lora_driver_sent_upload_message+0x106>
    4030:	42 c0       	rjmp	.+132    	; 0x40b6 <lora_driver_sent_upload_message+0x18a>
    4032:	87 e0       	ldi	r24, 0x07	; 7
    4034:	89 83       	std	Y+1, r24	; 0x01
    4036:	80 91 da 18 	lds	r24, 0x18DA	; 0x8018da <_downlinkMessageBuffer>
    403a:	90 91 db 18 	lds	r25, 0x18DB	; 0x8018db <_downlinkMessageBuffer+0x1>
    403e:	89 2b       	or	r24, r25
    4040:	a9 f1       	breq	.+106    	; 0x40ac <lora_driver_sent_upload_message+0x180>
    4042:	be 01       	movw	r22, r28
    4044:	6f 5f       	subi	r22, 0xFF	; 255
    4046:	7f 4f       	sbci	r23, 0xFF	; 255
    4048:	85 e6       	ldi	r24, 0x65	; 101
    404a:	99 e1       	ldi	r25, 0x19	; 25
    404c:	68 d1       	rcall	.+720    	; 0x431e <decode_port_no>
    404e:	80 93 e0 18 	sts	0x18E0, r24	; 0x8018e0 <_downlink_payload>
    4052:	e9 81       	ldd	r30, Y+1	; 0x01
    4054:	f0 e0       	ldi	r31, 0x00	; 0
    4056:	eb 59       	subi	r30, 0x9B	; 155
    4058:	f6 4e       	sbci	r31, 0xE6	; 230
    405a:	df 01       	movw	r26, r30
    405c:	0d 90       	ld	r0, X+
    405e:	00 20       	and	r0, r0
    4060:	e9 f7       	brne	.-6      	; 0x405c <lora_driver_sent_upload_message+0x130>
    4062:	11 97       	sbiw	r26, 0x01	; 1
    4064:	ae 1b       	sub	r26, r30
    4066:	bf 0b       	sbc	r27, r31
    4068:	aa 23       	and	r26, r26
    406a:	91 f0       	breq	.+36     	; 0x4090 <lora_driver_sent_upload_message+0x164>
    406c:	bb 27       	eor	r27, r27
    406e:	cd 01       	movw	r24, r26
    4070:	01 97       	sbiw	r24, 0x01	; 1
    4072:	9c 01       	movw	r18, r24
    4074:	12 f4       	brpl	.+4      	; 0x407a <lora_driver_sent_upload_message+0x14e>
    4076:	2f 5f       	subi	r18, 0xFF	; 255
    4078:	3f 4f       	sbci	r19, 0xFF	; 255
    407a:	35 95       	asr	r19
    407c:	27 95       	ror	r18
    407e:	20 93 e1 18 	sts	0x18E1, r18	; 0x8018e1 <_downlink_payload+0x1>
    4082:	af 01       	movw	r20, r30
    4084:	4f 5f       	subi	r20, 0xFF	; 255
    4086:	5f 4f       	sbci	r21, 0xFF	; 255
    4088:	64 e1       	ldi	r22, 0x14	; 20
    408a:	82 ee       	ldi	r24, 0xE2	; 226
    408c:	98 e1       	ldi	r25, 0x18	; 24
    408e:	73 d1       	rcall	.+742    	; 0x4376 <decode_hexadecimal_string_bytes>
    4090:	01 e0       	ldi	r16, 0x01	; 1
    4092:	10 e0       	ldi	r17, 0x00	; 0
    4094:	20 e0       	ldi	r18, 0x00	; 0
    4096:	30 e0       	ldi	r19, 0x00	; 0
    4098:	46 e1       	ldi	r20, 0x16	; 22
    409a:	50 e0       	ldi	r21, 0x00	; 0
    409c:	60 ee       	ldi	r22, 0xE0	; 224
    409e:	78 e1       	ldi	r23, 0x18	; 24
    40a0:	80 91 da 18 	lds	r24, 0x18DA	; 0x8018da <_downlinkMessageBuffer>
    40a4:	90 91 db 18 	lds	r25, 0x18DB	; 0x8018db <_downlinkMessageBuffer+0x1>
    40a8:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <xStreamBufferSend>
    40ac:	8e e0       	ldi	r24, 0x0E	; 14
    40ae:	03 c0       	rjmp	.+6      	; 0x40b6 <lora_driver_sent_upload_message+0x18a>
    40b0:	84 e1       	ldi	r24, 0x14	; 20
    40b2:	01 c0       	rjmp	.+2      	; 0x40b6 <lora_driver_sent_upload_message+0x18a>
    40b4:	80 e0       	ldi	r24, 0x00	; 0
    40b6:	0f 90       	pop	r0
    40b8:	df 91       	pop	r29
    40ba:	cf 91       	pop	r28
    40bc:	1f 91       	pop	r17
    40be:	0f 91       	pop	r16
    40c0:	08 95       	ret

000040c2 <lora_driver_set_adaptive_data_rate>:
    40c2:	81 30       	cpi	r24, 0x01	; 1
    40c4:	19 f0       	breq	.+6      	; 0x40cc <lora_driver_set_adaptive_data_rate+0xa>
    40c6:	66 e8       	ldi	r22, 0x86	; 134
    40c8:	75 e0       	ldi	r23, 0x05	; 5
    40ca:	02 c0       	rjmp	.+4      	; 0x40d0 <lora_driver_set_adaptive_data_rate+0xe>
    40cc:	6f e5       	ldi	r22, 0x5F	; 95
    40ce:	76 e0       	ldi	r23, 0x06	; 6
    40d0:	8a e8       	ldi	r24, 0x8A	; 138
    40d2:	95 e0       	ldi	r25, 0x05	; 5
    40d4:	3a ce       	rjmp	.-908    	; 0x3d4a <_upload_message_rc>
    40d6:	08 95       	ret

000040d8 <lora_driver_set_receive_delay>:
    40d8:	9f 93       	push	r25
    40da:	8f 93       	push	r24
    40dc:	8b eb       	ldi	r24, 0xBB	; 187
    40de:	95 e0       	ldi	r25, 0x05	; 5
    40e0:	9f 93       	push	r25
    40e2:	8f 93       	push	r24
    40e4:	88 e3       	ldi	r24, 0x38	; 56
    40e6:	99 e1       	ldi	r25, 0x19	; 25
    40e8:	9f 93       	push	r25
    40ea:	8f 93       	push	r24
    40ec:	0e 94 7f 2b 	call	0x56fe	; 0x56fe <sprintf>
    40f0:	60 e0       	ldi	r22, 0x00	; 0
    40f2:	70 e0       	ldi	r23, 0x00	; 0
    40f4:	88 e3       	ldi	r24, 0x38	; 56
    40f6:	99 e1       	ldi	r25, 0x19	; 25
    40f8:	28 de       	rcall	.-944    	; 0x3d4a <_upload_message_rc>
    40fa:	0f 90       	pop	r0
    40fc:	0f 90       	pop	r0
    40fe:	0f 90       	pop	r0
    4100:	0f 90       	pop	r0
    4102:	0f 90       	pop	r0
    4104:	0f 90       	pop	r0
    4106:	08 95       	ret

00004108 <lora_driver_configure_to_eu868>:
    4108:	2f 92       	push	r2
    410a:	3f 92       	push	r3
    410c:	4f 92       	push	r4
    410e:	5f 92       	push	r5
    4110:	6f 92       	push	r6
    4112:	7f 92       	push	r7
    4114:	8f 92       	push	r8
    4116:	9f 92       	push	r9
    4118:	af 92       	push	r10
    411a:	bf 92       	push	r11
    411c:	cf 92       	push	r12
    411e:	df 92       	push	r13
    4120:	ef 92       	push	r14
    4122:	ff 92       	push	r15
    4124:	0f 93       	push	r16
    4126:	1f 93       	push	r17
    4128:	cf 93       	push	r28
    412a:	df 93       	push	r29
    412c:	cd b7       	in	r28, 0x3d	; 61
    412e:	de b7       	in	r29, 0x3e	; 62
    4130:	a0 97       	sbiw	r28, 0x20	; 32
    4132:	0f b6       	in	r0, 0x3f	; 63
    4134:	f8 94       	cli
    4136:	de bf       	out	0x3e, r29	; 62
    4138:	0f be       	out	0x3f, r0	; 63
    413a:	cd bf       	out	0x3d, r28	; 61
    413c:	68 ee       	ldi	r22, 0xE8	; 232
    413e:	75 e0       	ldi	r23, 0x05	; 5
    4140:	84 ef       	ldi	r24, 0xF4	; 244
    4142:	95 e0       	ldi	r25, 0x05	; 5
    4144:	33 dd       	rcall	.-1434   	; 0x3bac <_upload_message>
    4146:	8c dd       	rcall	.-1256   	; 0x3c60 <_reply2return_code>
    4148:	81 11       	cpse	r24, r1
    414a:	a3 c0       	rjmp	.+326    	; 0x4292 <lora_driver_configure_to_eu868+0x18a>
    414c:	80 e2       	ldi	r24, 0x20	; 32
    414e:	e3 e2       	ldi	r30, 0x23	; 35
    4150:	f2 e0       	ldi	r31, 0x02	; 2
    4152:	de 01       	movw	r26, r28
    4154:	11 96       	adiw	r26, 0x01	; 1
    4156:	01 90       	ld	r0, Z+
    4158:	0d 92       	st	X+, r0
    415a:	8a 95       	dec	r24
    415c:	e1 f7       	brne	.-8      	; 0x4156 <lora_driver_configure_to_eu868+0x4e>
    415e:	9e 01       	movw	r18, r28
    4160:	2f 5f       	subi	r18, 0xFF	; 255
    4162:	3f 4f       	sbci	r19, 0xFF	; 255
    4164:	69 01       	movw	r12, r18
    4166:	e1 2c       	mov	r14, r1
    4168:	f1 2c       	mov	r15, r1
    416a:	0f 2e       	mov	r0, r31
    416c:	f0 e0       	ldi	r31, 0x00	; 0
    416e:	af 2e       	mov	r10, r31
    4170:	f6 e0       	ldi	r31, 0x06	; 6
    4172:	bf 2e       	mov	r11, r31
    4174:	f0 2d       	mov	r31, r0
    4176:	08 e3       	ldi	r16, 0x38	; 56
    4178:	19 e1       	ldi	r17, 0x19	; 25
    417a:	0f 2e       	mov	r0, r31
    417c:	f9 e1       	ldi	r31, 0x19	; 25
    417e:	4f 2e       	mov	r4, r31
    4180:	f6 e0       	ldi	r31, 0x06	; 6
    4182:	5f 2e       	mov	r5, r31
    4184:	f0 2d       	mov	r31, r0
    4186:	0f 2e       	mov	r0, r31
    4188:	f0 e3       	ldi	r31, 0x30	; 48
    418a:	8f 2e       	mov	r8, r31
    418c:	f6 e0       	ldi	r31, 0x06	; 6
    418e:	9f 2e       	mov	r9, r31
    4190:	f0 2d       	mov	r31, r0
    4192:	0f 2e       	mov	r0, r31
    4194:	fa e4       	ldi	r31, 0x4A	; 74
    4196:	6f 2e       	mov	r6, r31
    4198:	f6 e0       	ldi	r31, 0x06	; 6
    419a:	7f 2e       	mov	r7, r31
    419c:	f0 2d       	mov	r31, r0
    419e:	3e 2c       	mov	r3, r14
    41a0:	2f 2c       	mov	r2, r15
    41a2:	ff 92       	push	r15
    41a4:	ef 92       	push	r14
    41a6:	bf 92       	push	r11
    41a8:	af 92       	push	r10
    41aa:	1f 93       	push	r17
    41ac:	0f 93       	push	r16
    41ae:	0e 94 7f 2b 	call	0x56fe	; 0x56fe <sprintf>
    41b2:	60 e0       	ldi	r22, 0x00	; 0
    41b4:	70 e0       	ldi	r23, 0x00	; 0
    41b6:	c8 01       	movw	r24, r16
    41b8:	f9 dc       	rcall	.-1550   	; 0x3bac <_upload_message>
    41ba:	52 dd       	rcall	.-1372   	; 0x3c60 <_reply2return_code>
    41bc:	0f 90       	pop	r0
    41be:	0f 90       	pop	r0
    41c0:	0f 90       	pop	r0
    41c2:	0f 90       	pop	r0
    41c4:	0f 90       	pop	r0
    41c6:	0f 90       	pop	r0
    41c8:	81 11       	cpse	r24, r1
    41ca:	63 c0       	rjmp	.+198    	; 0x4292 <lora_driver_configure_to_eu868+0x18a>
    41cc:	32 e0       	ldi	r19, 0x02	; 2
    41ce:	3e 15       	cp	r19, r14
    41d0:	e8 f4       	brcc	.+58     	; 0x420c <lora_driver_configure_to_eu868+0x104>
    41d2:	f6 01       	movw	r30, r12
    41d4:	83 81       	ldd	r24, Z+3	; 0x03
    41d6:	8f 93       	push	r24
    41d8:	82 81       	ldd	r24, Z+2	; 0x02
    41da:	8f 93       	push	r24
    41dc:	81 81       	ldd	r24, Z+1	; 0x01
    41de:	8f 93       	push	r24
    41e0:	80 81       	ld	r24, Z
    41e2:	8f 93       	push	r24
    41e4:	ff 92       	push	r15
    41e6:	ef 92       	push	r14
    41e8:	5f 92       	push	r5
    41ea:	4f 92       	push	r4
    41ec:	1f 93       	push	r17
    41ee:	0f 93       	push	r16
    41f0:	0e 94 7f 2b 	call	0x56fe	; 0x56fe <sprintf>
    41f4:	60 e0       	ldi	r22, 0x00	; 0
    41f6:	70 e0       	ldi	r23, 0x00	; 0
    41f8:	c8 01       	movw	r24, r16
    41fa:	d8 dc       	rcall	.-1616   	; 0x3bac <_upload_message>
    41fc:	31 dd       	rcall	.-1438   	; 0x3c60 <_reply2return_code>
    41fe:	0f b6       	in	r0, 0x3f	; 63
    4200:	f8 94       	cli
    4202:	de bf       	out	0x3e, r29	; 62
    4204:	0f be       	out	0x3f, r0	; 63
    4206:	cd bf       	out	0x3d, r28	; 61
    4208:	81 11       	cpse	r24, r1
    420a:	43 c0       	rjmp	.+134    	; 0x4292 <lora_driver_configure_to_eu868+0x18a>
    420c:	2f 92       	push	r2
    420e:	3f 92       	push	r3
    4210:	9f 92       	push	r9
    4212:	8f 92       	push	r8
    4214:	1f 93       	push	r17
    4216:	0f 93       	push	r16
    4218:	0e 94 7f 2b 	call	0x56fe	; 0x56fe <sprintf>
    421c:	60 e0       	ldi	r22, 0x00	; 0
    421e:	70 e0       	ldi	r23, 0x00	; 0
    4220:	c8 01       	movw	r24, r16
    4222:	c4 dc       	rcall	.-1656   	; 0x3bac <_upload_message>
    4224:	1d dd       	rcall	.-1478   	; 0x3c60 <_reply2return_code>
    4226:	0f 90       	pop	r0
    4228:	0f 90       	pop	r0
    422a:	0f 90       	pop	r0
    422c:	0f 90       	pop	r0
    422e:	0f 90       	pop	r0
    4230:	0f 90       	pop	r0
    4232:	81 11       	cpse	r24, r1
    4234:	2e c0       	rjmp	.+92     	; 0x4292 <lora_driver_configure_to_eu868+0x18a>
    4236:	2f 92       	push	r2
    4238:	3f 92       	push	r3
    423a:	7f 92       	push	r7
    423c:	6f 92       	push	r6
    423e:	1f 93       	push	r17
    4240:	0f 93       	push	r16
    4242:	0e 94 7f 2b 	call	0x56fe	; 0x56fe <sprintf>
    4246:	60 e0       	ldi	r22, 0x00	; 0
    4248:	70 e0       	ldi	r23, 0x00	; 0
    424a:	c8 01       	movw	r24, r16
    424c:	af dc       	rcall	.-1698   	; 0x3bac <_upload_message>
    424e:	08 dd       	rcall	.-1520   	; 0x3c60 <_reply2return_code>
    4250:	0f 90       	pop	r0
    4252:	0f 90       	pop	r0
    4254:	0f 90       	pop	r0
    4256:	0f 90       	pop	r0
    4258:	0f 90       	pop	r0
    425a:	0f 90       	pop	r0
    425c:	81 11       	cpse	r24, r1
    425e:	19 c0       	rjmp	.+50     	; 0x4292 <lora_driver_configure_to_eu868+0x18a>
    4260:	3f ef       	ldi	r19, 0xFF	; 255
    4262:	e3 1a       	sub	r14, r19
    4264:	f3 0a       	sbc	r15, r19
    4266:	84 e0       	ldi	r24, 0x04	; 4
    4268:	c8 0e       	add	r12, r24
    426a:	d1 1c       	adc	r13, r1
    426c:	98 e0       	ldi	r25, 0x08	; 8
    426e:	e9 16       	cp	r14, r25
    4270:	f1 04       	cpc	r15, r1
    4272:	09 f0       	breq	.+2      	; 0x4276 <lora_driver_configure_to_eu868+0x16e>
    4274:	94 cf       	rjmp	.-216    	; 0x419e <lora_driver_configure_to_eu868+0x96>
    4276:	60 e0       	ldi	r22, 0x00	; 0
    4278:	70 e0       	ldi	r23, 0x00	; 0
    427a:	82 e6       	ldi	r24, 0x62	; 98
    427c:	96 e0       	ldi	r25, 0x06	; 6
    427e:	96 dc       	rcall	.-1748   	; 0x3bac <_upload_message>
    4280:	ef dc       	rcall	.-1570   	; 0x3c60 <_reply2return_code>
    4282:	81 11       	cpse	r24, r1
    4284:	06 c0       	rjmp	.+12     	; 0x4292 <lora_driver_configure_to_eu868+0x18a>
    4286:	60 e0       	ldi	r22, 0x00	; 0
    4288:	70 e0       	ldi	r23, 0x00	; 0
    428a:	83 e7       	ldi	r24, 0x73	; 115
    428c:	96 e0       	ldi	r25, 0x06	; 6
    428e:	8e dc       	rcall	.-1764   	; 0x3bac <_upload_message>
    4290:	e7 dc       	rcall	.-1586   	; 0x3c60 <_reply2return_code>
    4292:	a0 96       	adiw	r28, 0x20	; 32
    4294:	0f b6       	in	r0, 0x3f	; 63
    4296:	f8 94       	cli
    4298:	de bf       	out	0x3e, r29	; 62
    429a:	0f be       	out	0x3f, r0	; 63
    429c:	cd bf       	out	0x3d, r28	; 61
    429e:	df 91       	pop	r29
    42a0:	cf 91       	pop	r28
    42a2:	1f 91       	pop	r17
    42a4:	0f 91       	pop	r16
    42a6:	ff 90       	pop	r15
    42a8:	ef 90       	pop	r14
    42aa:	df 90       	pop	r13
    42ac:	cf 90       	pop	r12
    42ae:	bf 90       	pop	r11
    42b0:	af 90       	pop	r10
    42b2:	9f 90       	pop	r9
    42b4:	8f 90       	pop	r8
    42b6:	7f 90       	pop	r7
    42b8:	6f 90       	pop	r6
    42ba:	5f 90       	pop	r5
    42bc:	4f 90       	pop	r4
    42be:	3f 90       	pop	r3
    42c0:	2f 90       	pop	r2
    42c2:	08 95       	ret

000042c4 <lora_driver_set_otaa_identity>:
    42c4:	ef 92       	push	r14
    42c6:	ff 92       	push	r15
    42c8:	0f 93       	push	r16
    42ca:	1f 93       	push	r17
    42cc:	cf 93       	push	r28
    42ce:	df 93       	push	r29
    42d0:	ec 01       	movw	r28, r24
    42d2:	8b 01       	movw	r16, r22
    42d4:	7a 01       	movw	r14, r20
    42d6:	81 e0       	ldi	r24, 0x01	; 1
    42d8:	f4 de       	rcall	.-536    	; 0x40c2 <lora_driver_set_adaptive_data_rate>
    42da:	81 11       	cpse	r24, r1
    42dc:	0d c0       	rjmp	.+26     	; 0x42f8 <lora_driver_set_otaa_identity+0x34>
    42de:	ce 01       	movw	r24, r28
    42e0:	d4 dd       	rcall	.-1112   	; 0x3e8a <lora_driver_set_application_identifier>
    42e2:	81 11       	cpse	r24, r1
    42e4:	09 c0       	rjmp	.+18     	; 0x42f8 <lora_driver_set_otaa_identity+0x34>
    42e6:	c8 01       	movw	r24, r16
    42e8:	e1 dd       	rcall	.-1086   	; 0x3eac <lora_driver_set_application_key>
    42ea:	81 11       	cpse	r24, r1
    42ec:	05 c0       	rjmp	.+10     	; 0x42f8 <lora_driver_set_otaa_identity+0x34>
    42ee:	c7 01       	movw	r24, r14
    42f0:	bb dd       	rcall	.-1162   	; 0x3e68 <lora_driver_set_device_identifier>
    42f2:	81 11       	cpse	r24, r1
    42f4:	01 c0       	rjmp	.+2      	; 0x42f8 <lora_driver_set_otaa_identity+0x34>
    42f6:	eb dd       	rcall	.-1066   	; 0x3ece <lora_driver_save_mac>
    42f8:	df 91       	pop	r29
    42fa:	cf 91       	pop	r28
    42fc:	1f 91       	pop	r17
    42fe:	0f 91       	pop	r16
    4300:	ff 90       	pop	r15
    4302:	ef 90       	pop	r14
    4304:	08 95       	ret

00004306 <lora_driver_map_return_code_to_text>:
    4306:	90 e0       	ldi	r25, 0x00	; 0
    4308:	fc 01       	movw	r30, r24
    430a:	ee 0f       	add	r30, r30
    430c:	ff 1f       	adc	r31, r31
    430e:	8e 0f       	add	r24, r30
    4310:	9f 1f       	adc	r25, r31
    4312:	fc 01       	movw	r30, r24
    4314:	e4 5c       	subi	r30, 0xC4	; 196
    4316:	f8 4f       	sbci	r31, 0xF8	; 248
    4318:	81 81       	ldd	r24, Z+1	; 0x01
    431a:	92 81       	ldd	r25, Z+2	; 0x02
    431c:	08 95       	ret

0000431e <decode_port_no>:
    431e:	dc 01       	movw	r26, r24
    4320:	00 97       	sbiw	r24, 0x00	; 0
    4322:	29 f1       	breq	.+74     	; 0x436e <decode_port_no+0x50>
    4324:	fb 01       	movw	r30, r22
    4326:	20 81       	ld	r18, Z
    4328:	fc 01       	movw	r30, r24
    432a:	01 90       	ld	r0, Z+
    432c:	00 20       	and	r0, r0
    432e:	e9 f7       	brne	.-6      	; 0x432a <decode_port_no+0xc>
    4330:	31 97       	sbiw	r30, 0x01	; 1
    4332:	e8 1b       	sub	r30, r24
    4334:	f9 0b       	sbc	r31, r25
    4336:	82 2f       	mov	r24, r18
    4338:	90 e0       	ldi	r25, 0x00	; 0
    433a:	e8 17       	cp	r30, r24
    433c:	f9 07       	cpc	r31, r25
    433e:	c8 f0       	brcs	.+50     	; 0x4372 <decode_port_no+0x54>
    4340:	80 e0       	ldi	r24, 0x00	; 0
    4342:	08 c0       	rjmp	.+16     	; 0x4354 <decode_port_no+0x36>
    4344:	88 0f       	add	r24, r24
    4346:	38 2f       	mov	r19, r24
    4348:	33 0f       	add	r19, r19
    434a:	33 0f       	add	r19, r19
    434c:	83 0f       	add	r24, r19
    434e:	80 53       	subi	r24, 0x30	; 48
    4350:	89 0f       	add	r24, r25
    4352:	2f 5f       	subi	r18, 0xFF	; 255
    4354:	fd 01       	movw	r30, r26
    4356:	e2 0f       	add	r30, r18
    4358:	f1 1d       	adc	r31, r1
    435a:	90 81       	ld	r25, Z
    435c:	30 ed       	ldi	r19, 0xD0	; 208
    435e:	39 0f       	add	r19, r25
    4360:	3a 30       	cpi	r19, 0x0A	; 10
    4362:	10 f4       	brcc	.+4      	; 0x4368 <decode_port_no+0x4a>
    4364:	91 11       	cpse	r25, r1
    4366:	ee cf       	rjmp	.-36     	; 0x4344 <decode_port_no+0x26>
    4368:	fb 01       	movw	r30, r22
    436a:	20 83       	st	Z, r18
    436c:	08 95       	ret
    436e:	80 e0       	ldi	r24, 0x00	; 0
    4370:	08 95       	ret
    4372:	80 e0       	ldi	r24, 0x00	; 0
    4374:	08 95       	ret

00004376 <decode_hexadecimal_string_bytes>:
    4376:	0f 93       	push	r16
    4378:	1f 93       	push	r17
    437a:	cf 93       	push	r28
    437c:	df 93       	push	r29
    437e:	dc 01       	movw	r26, r24
    4380:	ea 01       	movw	r28, r20
    4382:	20 97       	sbiw	r28, 0x00	; 0
    4384:	e1 f1       	breq	.+120    	; 0x43fe <decode_hexadecimal_string_bytes+0x88>
    4386:	fa 01       	movw	r30, r20
    4388:	01 90       	ld	r0, Z+
    438a:	00 20       	and	r0, r0
    438c:	e9 f7       	brne	.-6      	; 0x4388 <decode_hexadecimal_string_bytes+0x12>
    438e:	31 97       	sbiw	r30, 0x01	; 1
    4390:	e4 1b       	sub	r30, r20
    4392:	f5 0b       	sbc	r31, r21
    4394:	32 97       	sbiw	r30, 0x02	; 2
    4396:	10 f5       	brcc	.+68     	; 0x43dc <decode_hexadecimal_string_bytes+0x66>
    4398:	32 c0       	rjmp	.+100    	; 0x43fe <decode_hexadecimal_string_bytes+0x88>
    439a:	8d 01       	movw	r16, r26
    439c:	04 0f       	add	r16, r20
    439e:	15 1f       	adc	r17, r21
    43a0:	30 e0       	ldi	r19, 0x00	; 0
    43a2:	ae 01       	movw	r20, r28
    43a4:	42 0f       	add	r20, r18
    43a6:	53 1f       	adc	r21, r19
    43a8:	fa 01       	movw	r30, r20
    43aa:	90 81       	ld	r25, Z
    43ac:	91 34       	cpi	r25, 0x41	; 65
    43ae:	28 f0       	brcs	.+10     	; 0x43ba <decode_hexadecimal_string_bytes+0x44>
    43b0:	97 53       	subi	r25, 0x37	; 55
    43b2:	59 2f       	mov	r21, r25
    43b4:	52 95       	swap	r21
    43b6:	50 7f       	andi	r21, 0xF0	; 240
    43b8:	03 c0       	rjmp	.+6      	; 0x43c0 <decode_hexadecimal_string_bytes+0x4a>
    43ba:	59 2f       	mov	r21, r25
    43bc:	52 95       	swap	r21
    43be:	50 7f       	andi	r21, 0xF0	; 240
    43c0:	2c 0f       	add	r18, r28
    43c2:	3d 1f       	adc	r19, r29
    43c4:	f9 01       	movw	r30, r18
    43c6:	91 81       	ldd	r25, Z+1	; 0x01
    43c8:	91 34       	cpi	r25, 0x41	; 65
    43ca:	10 f0       	brcs	.+4      	; 0x43d0 <decode_hexadecimal_string_bytes+0x5a>
    43cc:	97 53       	subi	r25, 0x37	; 55
    43ce:	01 c0       	rjmp	.+2      	; 0x43d2 <decode_hexadecimal_string_bytes+0x5c>
    43d0:	90 53       	subi	r25, 0x30	; 48
    43d2:	95 0f       	add	r25, r21
    43d4:	f8 01       	movw	r30, r16
    43d6:	90 83       	st	Z, r25
    43d8:	8f 5f       	subi	r24, 0xFF	; 255
    43da:	01 c0       	rjmp	.+2      	; 0x43de <decode_hexadecimal_string_bytes+0x68>
    43dc:	80 e0       	ldi	r24, 0x00	; 0
    43de:	28 2f       	mov	r18, r24
    43e0:	22 0f       	add	r18, r18
    43e2:	48 2f       	mov	r20, r24
    43e4:	50 e0       	ldi	r21, 0x00	; 0
    43e6:	fe 01       	movw	r30, r28
    43e8:	01 90       	ld	r0, Z+
    43ea:	00 20       	and	r0, r0
    43ec:	e9 f7       	brne	.-6      	; 0x43e8 <decode_hexadecimal_string_bytes+0x72>
    43ee:	31 97       	sbiw	r30, 0x01	; 1
    43f0:	ec 1b       	sub	r30, r28
    43f2:	fd 0b       	sbc	r31, r29
    43f4:	4e 17       	cp	r20, r30
    43f6:	5f 07       	cpc	r21, r31
    43f8:	10 f4       	brcc	.+4      	; 0x43fe <decode_hexadecimal_string_bytes+0x88>
    43fa:	86 13       	cpse	r24, r22
    43fc:	ce cf       	rjmp	.-100    	; 0x439a <decode_hexadecimal_string_bytes+0x24>
    43fe:	df 91       	pop	r29
    4400:	cf 91       	pop	r28
    4402:	1f 91       	pop	r17
    4404:	0f 91       	pop	r16
    4406:	08 95       	ret

00004408 <reg_read_register>:
    4408:	fc 01       	movw	r30, r24
    440a:	80 81       	ld	r24, Z
    440c:	08 95       	ret

0000440e <reg_read_bit>:
    440e:	fc 01       	movw	r30, r24
    4410:	20 81       	ld	r18, Z
    4412:	81 e0       	ldi	r24, 0x01	; 1
    4414:	90 e0       	ldi	r25, 0x00	; 0
    4416:	02 c0       	rjmp	.+4      	; 0x441c <reg_read_bit+0xe>
    4418:	88 0f       	add	r24, r24
    441a:	99 1f       	adc	r25, r25
    441c:	6a 95       	dec	r22
    441e:	e2 f7       	brpl	.-8      	; 0x4418 <reg_read_bit+0xa>
    4420:	82 23       	and	r24, r18
    4422:	08 95       	ret

00004424 <reg_read_bits>:
    4424:	fc 01       	movw	r30, r24
    4426:	80 81       	ld	r24, Z
    4428:	86 23       	and	r24, r22
    442a:	08 95       	ret

0000442c <reg_set_register>:
    442c:	fc 01       	movw	r30, r24
    442e:	60 83       	st	Z, r22
    4430:	08 95       	ret

00004432 <reg_clear_register>:
    4432:	fc 01       	movw	r30, r24
    4434:	10 82       	st	Z, r1
    4436:	08 95       	ret

00004438 <reg_set_bit>:
    4438:	fc 01       	movw	r30, r24
    443a:	40 81       	ld	r20, Z
    443c:	21 e0       	ldi	r18, 0x01	; 1
    443e:	30 e0       	ldi	r19, 0x00	; 0
    4440:	02 c0       	rjmp	.+4      	; 0x4446 <reg_set_bit+0xe>
    4442:	22 0f       	add	r18, r18
    4444:	33 1f       	adc	r19, r19
    4446:	6a 95       	dec	r22
    4448:	e2 f7       	brpl	.-8      	; 0x4442 <reg_set_bit+0xa>
    444a:	24 2b       	or	r18, r20
    444c:	20 83       	st	Z, r18
    444e:	08 95       	ret

00004450 <reg_set_bits>:
    4450:	fc 01       	movw	r30, r24
    4452:	20 81       	ld	r18, Z
    4454:	62 2b       	or	r22, r18
    4456:	60 83       	st	Z, r22
    4458:	08 95       	ret

0000445a <reg_toggle_bit>:
    445a:	fc 01       	movw	r30, r24
    445c:	40 81       	ld	r20, Z
    445e:	21 e0       	ldi	r18, 0x01	; 1
    4460:	30 e0       	ldi	r19, 0x00	; 0
    4462:	02 c0       	rjmp	.+4      	; 0x4468 <reg_toggle_bit+0xe>
    4464:	22 0f       	add	r18, r18
    4466:	33 1f       	adc	r19, r19
    4468:	6a 95       	dec	r22
    446a:	e2 f7       	brpl	.-8      	; 0x4464 <reg_toggle_bit+0xa>
    446c:	24 27       	eor	r18, r20
    446e:	20 83       	st	Z, r18
    4470:	08 95       	ret

00004472 <reg_toggle_bits>:
    4472:	fc 01       	movw	r30, r24
    4474:	20 81       	ld	r18, Z
    4476:	62 27       	eor	r22, r18
    4478:	60 83       	st	Z, r22
    447a:	08 95       	ret

0000447c <reg_clear_bit>:
    447c:	fc 01       	movw	r30, r24
    447e:	90 81       	ld	r25, Z
    4480:	21 e0       	ldi	r18, 0x01	; 1
    4482:	30 e0       	ldi	r19, 0x00	; 0
    4484:	02 c0       	rjmp	.+4      	; 0x448a <reg_clear_bit+0xe>
    4486:	22 0f       	add	r18, r18
    4488:	33 1f       	adc	r19, r19
    448a:	6a 95       	dec	r22
    448c:	e2 f7       	brpl	.-8      	; 0x4486 <reg_clear_bit+0xa>
    448e:	20 95       	com	r18
    4490:	29 23       	and	r18, r25
    4492:	20 83       	st	Z, r18
    4494:	08 95       	ret

00004496 <reg_clear_bits>:
    4496:	fc 01       	movw	r30, r24
    4498:	90 81       	ld	r25, Z
    449a:	60 95       	com	r22
    449c:	69 23       	and	r22, r25
    449e:	60 83       	st	Z, r22
    44a0:	08 95       	ret

000044a2 <serial_new_instance>:
    44a2:	2f 92       	push	r2
    44a4:	3f 92       	push	r3
    44a6:	4f 92       	push	r4
    44a8:	5f 92       	push	r5
    44aa:	6f 92       	push	r6
    44ac:	7f 92       	push	r7
    44ae:	8f 92       	push	r8
    44b0:	9f 92       	push	r9
    44b2:	af 92       	push	r10
    44b4:	cf 92       	push	r12
    44b6:	ef 92       	push	r14
    44b8:	ff 92       	push	r15
    44ba:	0f 93       	push	r16
    44bc:	1f 93       	push	r17
    44be:	cf 93       	push	r28
    44c0:	df 93       	push	r29
    44c2:	cd b7       	in	r28, 0x3d	; 61
    44c4:	de b7       	in	r29, 0x3e	; 62
    44c6:	f8 2e       	mov	r15, r24
    44c8:	2a 01       	movw	r4, r20
    44ca:	3b 01       	movw	r6, r22
    44cc:	88 e0       	ldi	r24, 0x08	; 8
    44ce:	90 e0       	ldi	r25, 0x00	; 0
    44d0:	4f d7       	rcall	.+3742   	; 0x5370 <malloc>
    44d2:	8c 01       	movw	r16, r24
    44d4:	8f 2d       	mov	r24, r15
    44d6:	90 e0       	ldi	r25, 0x00	; 0
    44d8:	88 0f       	add	r24, r24
    44da:	99 1f       	adc	r25, r25
    44dc:	fc 01       	movw	r30, r24
    44de:	ee 56       	subi	r30, 0x6E	; 110
    44e0:	f6 4e       	sbci	r31, 0xE6	; 230
    44e2:	11 83       	std	Z+1, r17	; 0x01
    44e4:	00 83       	st	Z, r16
    44e6:	fc 01       	movw	r30, r24
    44e8:	e4 5f       	subi	r30, 0xF4	; 244
    44ea:	fd 4f       	sbci	r31, 0xFD	; 253
    44ec:	80 81       	ld	r24, Z
    44ee:	91 81       	ldd	r25, Z+1	; 0x01
    44f0:	d8 01       	movw	r26, r16
    44f2:	8d 93       	st	X+, r24
    44f4:	9c 93       	st	X, r25
    44f6:	6c 2d       	mov	r22, r12
    44f8:	70 e0       	ldi	r23, 0x00	; 0
    44fa:	84 e0       	ldi	r24, 0x04	; 4
    44fc:	90 e0       	ldi	r25, 0x00	; 0
    44fe:	1e d7       	rcall	.+3644   	; 0x533c <calloc>
    4500:	1c 01       	movw	r2, r24
    4502:	61 e0       	ldi	r22, 0x01	; 1
    4504:	70 e0       	ldi	r23, 0x00	; 0
    4506:	86 e0       	ldi	r24, 0x06	; 6
    4508:	90 e0       	ldi	r25, 0x00	; 0
    450a:	18 d7       	rcall	.+3632   	; 0x533c <calloc>
    450c:	7c 01       	movw	r14, r24
    450e:	4c 2d       	mov	r20, r12
    4510:	b1 01       	movw	r22, r2
    4512:	df d4       	rcall	.+2494   	; 0x4ed2 <fifo_init>
    4514:	f8 01       	movw	r30, r16
    4516:	f5 82       	std	Z+5, r15	; 0x05
    4518:	e4 82       	std	Z+4, r14	; 0x04
    451a:	6a 2d       	mov	r22, r10
    451c:	70 e0       	ldi	r23, 0x00	; 0
    451e:	84 e0       	ldi	r24, 0x04	; 4
    4520:	90 e0       	ldi	r25, 0x00	; 0
    4522:	0c d7       	rcall	.+3608   	; 0x533c <calloc>
    4524:	1c 01       	movw	r2, r24
    4526:	61 e0       	ldi	r22, 0x01	; 1
    4528:	70 e0       	ldi	r23, 0x00	; 0
    452a:	86 e0       	ldi	r24, 0x06	; 6
    452c:	90 e0       	ldi	r25, 0x00	; 0
    452e:	06 d7       	rcall	.+3596   	; 0x533c <calloc>
    4530:	7c 01       	movw	r14, r24
    4532:	4a 2d       	mov	r20, r10
    4534:	b1 01       	movw	r22, r2
    4536:	cd d4       	rcall	.+2458   	; 0x4ed2 <fifo_init>
    4538:	d8 01       	movw	r26, r16
    453a:	13 96       	adiw	r26, 0x03	; 3
    453c:	fc 92       	st	X, r15
    453e:	ee 92       	st	-X, r14
    4540:	12 97       	sbiw	r26, 0x02	; 2
    4542:	17 96       	adiw	r26, 0x07	; 7
    4544:	9c 92       	st	X, r9
    4546:	8e 92       	st	-X, r8
    4548:	16 97       	sbiw	r26, 0x06	; 6
    454a:	ff b6       	in	r15, 0x3f	; 63
    454c:	f8 94       	cli
    454e:	ed 91       	ld	r30, X+
    4550:	fc 91       	ld	r31, X
    4552:	11 97       	sbiw	r26, 0x01	; 1
    4554:	36 97       	sbiw	r30, 0x06	; 6
    4556:	80 81       	ld	r24, Z
    4558:	82 60       	ori	r24, 0x02	; 2
    455a:	80 83       	st	Z, r24
    455c:	8d 90       	ld	r8, X+
    455e:	9c 90       	ld	r9, X
    4560:	c3 01       	movw	r24, r6
    4562:	b2 01       	movw	r22, r4
    4564:	d0 d5       	rcall	.+2976   	; 0x5106 <__floatunsisf>
    4566:	20 e0       	ldi	r18, 0x00	; 0
    4568:	30 e0       	ldi	r19, 0x00	; 0
    456a:	40 e0       	ldi	r20, 0x00	; 0
    456c:	51 e4       	ldi	r21, 0x41	; 65
    456e:	59 d6       	rcall	.+3250   	; 0x5222 <__mulsf3>
    4570:	9b 01       	movw	r18, r22
    4572:	ac 01       	movw	r20, r24
    4574:	60 e0       	ldi	r22, 0x00	; 0
    4576:	74 e2       	ldi	r23, 0x24	; 36
    4578:	84 e7       	ldi	r24, 0x74	; 116
    457a:	9b e4       	ldi	r25, 0x4B	; 75
    457c:	2b d5       	rcall	.+2646   	; 0x4fd4 <__divsf3>
    457e:	20 e0       	ldi	r18, 0x00	; 0
    4580:	30 e0       	ldi	r19, 0x00	; 0
    4582:	40 e8       	ldi	r20, 0x80	; 128
    4584:	5f e3       	ldi	r21, 0x3F	; 63
    4586:	c1 d4       	rcall	.+2434   	; 0x4f0a <__subsf3>
    4588:	92 d5       	rcall	.+2852   	; 0x50ae <__fixunssfsi>
    458a:	f4 01       	movw	r30, r8
    458c:	32 97       	sbiw	r30, 0x02	; 2
    458e:	60 83       	st	Z, r22
    4590:	d8 01       	movw	r26, r16
    4592:	ed 91       	ld	r30, X+
    4594:	fc 91       	ld	r31, X
    4596:	11 97       	sbiw	r26, 0x01	; 1
    4598:	35 97       	sbiw	r30, 0x05	; 5
    459a:	88 e9       	ldi	r24, 0x98	; 152
    459c:	80 83       	st	Z, r24
    459e:	ed 91       	ld	r30, X+
    45a0:	fc 91       	ld	r31, X
    45a2:	34 97       	sbiw	r30, 0x04	; 4
    45a4:	86 e0       	ldi	r24, 0x06	; 6
    45a6:	80 83       	st	Z, r24
    45a8:	ff be       	out	0x3f, r15	; 63
    45aa:	c8 01       	movw	r24, r16
    45ac:	df 91       	pop	r29
    45ae:	cf 91       	pop	r28
    45b0:	1f 91       	pop	r17
    45b2:	0f 91       	pop	r16
    45b4:	ff 90       	pop	r15
    45b6:	ef 90       	pop	r14
    45b8:	cf 90       	pop	r12
    45ba:	af 90       	pop	r10
    45bc:	9f 90       	pop	r9
    45be:	8f 90       	pop	r8
    45c0:	7f 90       	pop	r7
    45c2:	6f 90       	pop	r6
    45c4:	5f 90       	pop	r5
    45c6:	4f 90       	pop	r4
    45c8:	3f 90       	pop	r3
    45ca:	2f 90       	pop	r2
    45cc:	08 95       	ret

000045ce <serial_send_byte>:
    45ce:	cf 93       	push	r28
    45d0:	df 93       	push	r29
    45d2:	ec 01       	movw	r28, r24
    45d4:	ea 81       	ldd	r30, Y+2	; 0x02
    45d6:	fb 81       	ldd	r31, Y+3	; 0x03
    45d8:	93 81       	ldd	r25, Z+3	; 0x03
    45da:	82 81       	ldd	r24, Z+2	; 0x02
    45dc:	25 81       	ldd	r18, Z+5	; 0x05
    45de:	98 1b       	sub	r25, r24
    45e0:	92 23       	and	r25, r18
    45e2:	84 81       	ldd	r24, Z+4	; 0x04
    45e4:	98 17       	cp	r25, r24
    45e6:	a1 f0       	breq	.+40     	; 0x4610 <serial_send_byte+0x42>
    45e8:	93 81       	ldd	r25, Z+3	; 0x03
    45ea:	26 95       	lsr	r18
    45ec:	29 23       	and	r18, r25
    45ee:	a0 81       	ld	r26, Z
    45f0:	b1 81       	ldd	r27, Z+1	; 0x01
    45f2:	a2 0f       	add	r26, r18
    45f4:	b1 1d       	adc	r27, r1
    45f6:	6c 93       	st	X, r22
    45f8:	9f 5f       	subi	r25, 0xFF	; 255
    45fa:	25 81       	ldd	r18, Z+5	; 0x05
    45fc:	92 23       	and	r25, r18
    45fe:	93 83       	std	Z+3, r25	; 0x03
    4600:	e8 81       	ld	r30, Y
    4602:	f9 81       	ldd	r31, Y+1	; 0x01
    4604:	35 97       	sbiw	r30, 0x05	; 5
    4606:	80 81       	ld	r24, Z
    4608:	80 62       	ori	r24, 0x20	; 32
    460a:	80 83       	st	Z, r24
    460c:	80 e0       	ldi	r24, 0x00	; 0
    460e:	01 c0       	rjmp	.+2      	; 0x4612 <serial_send_byte+0x44>
    4610:	82 e0       	ldi	r24, 0x02	; 2
    4612:	df 91       	pop	r29
    4614:	cf 91       	pop	r28
    4616:	08 95       	ret

00004618 <serial_send_bytes>:
    4618:	ef 92       	push	r14
    461a:	ff 92       	push	r15
    461c:	0f 93       	push	r16
    461e:	1f 93       	push	r17
    4620:	cf 93       	push	r28
    4622:	df 93       	push	r29
    4624:	7c 01       	movw	r14, r24
    4626:	dc 01       	movw	r26, r24
    4628:	12 96       	adiw	r26, 0x02	; 2
    462a:	ed 91       	ld	r30, X+
    462c:	fc 91       	ld	r31, X
    462e:	13 97       	sbiw	r26, 0x03	; 3
    4630:	93 81       	ldd	r25, Z+3	; 0x03
    4632:	82 81       	ldd	r24, Z+2	; 0x02
    4634:	98 1b       	sub	r25, r24
    4636:	85 81       	ldd	r24, Z+5	; 0x05
    4638:	98 23       	and	r25, r24
    463a:	84 81       	ldd	r24, Z+4	; 0x04
    463c:	89 1b       	sub	r24, r25
    463e:	86 17       	cp	r24, r22
    4640:	98 f1       	brcs	.+102    	; 0x46a8 <serial_send_bytes+0x90>
    4642:	66 23       	and	r22, r22
    4644:	41 f1       	breq	.+80     	; 0x4696 <serial_send_bytes+0x7e>
    4646:	84 2f       	mov	r24, r20
    4648:	95 2f       	mov	r25, r21
    464a:	dc 01       	movw	r26, r24
    464c:	61 50       	subi	r22, 0x01	; 1
    464e:	46 2f       	mov	r20, r22
    4650:	50 e0       	ldi	r21, 0x00	; 0
    4652:	4f 5f       	subi	r20, 0xFF	; 255
    4654:	5f 4f       	sbci	r21, 0xFF	; 255
    4656:	48 0f       	add	r20, r24
    4658:	59 1f       	adc	r21, r25
    465a:	e7 01       	movw	r28, r14
    465c:	ea 81       	ldd	r30, Y+2	; 0x02
    465e:	fb 81       	ldd	r31, Y+3	; 0x03
    4660:	93 81       	ldd	r25, Z+3	; 0x03
    4662:	82 81       	ldd	r24, Z+2	; 0x02
    4664:	25 81       	ldd	r18, Z+5	; 0x05
    4666:	98 1b       	sub	r25, r24
    4668:	92 23       	and	r25, r18
    466a:	84 81       	ldd	r24, Z+4	; 0x04
    466c:	98 17       	cp	r25, r24
    466e:	79 f0       	breq	.+30     	; 0x468e <serial_send_bytes+0x76>
    4670:	8c 91       	ld	r24, X
    4672:	93 81       	ldd	r25, Z+3	; 0x03
    4674:	26 95       	lsr	r18
    4676:	29 23       	and	r18, r25
    4678:	60 81       	ld	r22, Z
    467a:	71 81       	ldd	r23, Z+1	; 0x01
    467c:	8b 01       	movw	r16, r22
    467e:	02 0f       	add	r16, r18
    4680:	11 1d       	adc	r17, r1
    4682:	e8 01       	movw	r28, r16
    4684:	88 83       	st	Y, r24
    4686:	9f 5f       	subi	r25, 0xFF	; 255
    4688:	85 81       	ldd	r24, Z+5	; 0x05
    468a:	98 23       	and	r25, r24
    468c:	93 83       	std	Z+3, r25	; 0x03
    468e:	11 96       	adiw	r26, 0x01	; 1
    4690:	a4 17       	cp	r26, r20
    4692:	b5 07       	cpc	r27, r21
    4694:	11 f7       	brne	.-60     	; 0x465a <serial_send_bytes+0x42>
    4696:	d7 01       	movw	r26, r14
    4698:	ed 91       	ld	r30, X+
    469a:	fc 91       	ld	r31, X
    469c:	35 97       	sbiw	r30, 0x05	; 5
    469e:	80 81       	ld	r24, Z
    46a0:	80 62       	ori	r24, 0x20	; 32
    46a2:	80 83       	st	Z, r24
    46a4:	80 e0       	ldi	r24, 0x00	; 0
    46a6:	01 c0       	rjmp	.+2      	; 0x46aa <serial_send_bytes+0x92>
    46a8:	82 e0       	ldi	r24, 0x02	; 2
    46aa:	df 91       	pop	r29
    46ac:	cf 91       	pop	r28
    46ae:	1f 91       	pop	r17
    46b0:	0f 91       	pop	r16
    46b2:	ff 90       	pop	r15
    46b4:	ef 90       	pop	r14
    46b6:	08 95       	ret

000046b8 <serial_get_byte>:
    46b8:	dc 01       	movw	r26, r24
    46ba:	14 96       	adiw	r26, 0x04	; 4
    46bc:	ed 91       	ld	r30, X+
    46be:	fc 91       	ld	r31, X
    46c0:	15 97       	sbiw	r26, 0x05	; 5
    46c2:	93 81       	ldd	r25, Z+3	; 0x03
    46c4:	82 81       	ldd	r24, Z+2	; 0x02
    46c6:	98 17       	cp	r25, r24
    46c8:	89 f0       	breq	.+34     	; 0x46ec <serial_get_byte+0x34>
    46ca:	92 81       	ldd	r25, Z+2	; 0x02
    46cc:	85 81       	ldd	r24, Z+5	; 0x05
    46ce:	86 95       	lsr	r24
    46d0:	89 23       	and	r24, r25
    46d2:	a0 81       	ld	r26, Z
    46d4:	b1 81       	ldd	r27, Z+1	; 0x01
    46d6:	a8 0f       	add	r26, r24
    46d8:	b1 1d       	adc	r27, r1
    46da:	8c 91       	ld	r24, X
    46dc:	db 01       	movw	r26, r22
    46de:	8c 93       	st	X, r24
    46e0:	9f 5f       	subi	r25, 0xFF	; 255
    46e2:	85 81       	ldd	r24, Z+5	; 0x05
    46e4:	98 23       	and	r25, r24
    46e6:	92 83       	std	Z+2, r25	; 0x02
    46e8:	80 e0       	ldi	r24, 0x00	; 0
    46ea:	08 95       	ret
    46ec:	83 e0       	ldi	r24, 0x03	; 3
    46ee:	08 95       	ret

000046f0 <__vector_25>:
    46f0:	1f 92       	push	r1
    46f2:	0f 92       	push	r0
    46f4:	0f b6       	in	r0, 0x3f	; 63
    46f6:	0f 92       	push	r0
    46f8:	11 24       	eor	r1, r1
    46fa:	0b b6       	in	r0, 0x3b	; 59
    46fc:	0f 92       	push	r0
    46fe:	2f 93       	push	r18
    4700:	3f 93       	push	r19
    4702:	4f 93       	push	r20
    4704:	5f 93       	push	r21
    4706:	6f 93       	push	r22
    4708:	7f 93       	push	r23
    470a:	8f 93       	push	r24
    470c:	9f 93       	push	r25
    470e:	af 93       	push	r26
    4710:	bf 93       	push	r27
    4712:	cf 93       	push	r28
    4714:	df 93       	push	r29
    4716:	ef 93       	push	r30
    4718:	ff 93       	push	r31
    471a:	a0 91 92 19 	lds	r26, 0x1992	; 0x801992 <_ser_handle>
    471e:	b0 91 93 19 	lds	r27, 0x1993	; 0x801993 <_ser_handle+0x1>
    4722:	10 97       	sbiw	r26, 0x00	; 0
    4724:	11 f1       	breq	.+68     	; 0x476a <__vector_25+0x7a>
    4726:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    472a:	14 96       	adiw	r26, 0x04	; 4
    472c:	ed 91       	ld	r30, X+
    472e:	fc 91       	ld	r31, X
    4730:	15 97       	sbiw	r26, 0x05	; 5
    4732:	93 81       	ldd	r25, Z+3	; 0x03
    4734:	82 81       	ldd	r24, Z+2	; 0x02
    4736:	25 81       	ldd	r18, Z+5	; 0x05
    4738:	98 1b       	sub	r25, r24
    473a:	92 23       	and	r25, r18
    473c:	84 81       	ldd	r24, Z+4	; 0x04
    473e:	98 17       	cp	r25, r24
    4740:	61 f0       	breq	.+24     	; 0x475a <__vector_25+0x6a>
    4742:	83 81       	ldd	r24, Z+3	; 0x03
    4744:	26 95       	lsr	r18
    4746:	28 23       	and	r18, r24
    4748:	c0 81       	ld	r28, Z
    474a:	d1 81       	ldd	r29, Z+1	; 0x01
    474c:	c2 0f       	add	r28, r18
    474e:	d1 1d       	adc	r29, r1
    4750:	68 83       	st	Y, r22
    4752:	8f 5f       	subi	r24, 0xFF	; 255
    4754:	95 81       	ldd	r25, Z+5	; 0x05
    4756:	89 23       	and	r24, r25
    4758:	83 83       	std	Z+3, r24	; 0x03
    475a:	16 96       	adiw	r26, 0x06	; 6
    475c:	ed 91       	ld	r30, X+
    475e:	fc 91       	ld	r31, X
    4760:	17 97       	sbiw	r26, 0x07	; 7
    4762:	30 97       	sbiw	r30, 0x00	; 0
    4764:	11 f0       	breq	.+4      	; 0x476a <__vector_25+0x7a>
    4766:	cd 01       	movw	r24, r26
    4768:	19 95       	eicall
    476a:	ff 91       	pop	r31
    476c:	ef 91       	pop	r30
    476e:	df 91       	pop	r29
    4770:	cf 91       	pop	r28
    4772:	bf 91       	pop	r27
    4774:	af 91       	pop	r26
    4776:	9f 91       	pop	r25
    4778:	8f 91       	pop	r24
    477a:	7f 91       	pop	r23
    477c:	6f 91       	pop	r22
    477e:	5f 91       	pop	r21
    4780:	4f 91       	pop	r20
    4782:	3f 91       	pop	r19
    4784:	2f 91       	pop	r18
    4786:	0f 90       	pop	r0
    4788:	0b be       	out	0x3b, r0	; 59
    478a:	0f 90       	pop	r0
    478c:	0f be       	out	0x3f, r0	; 63
    478e:	0f 90       	pop	r0
    4790:	1f 90       	pop	r1
    4792:	18 95       	reti

00004794 <__vector_26>:
    4794:	1f 92       	push	r1
    4796:	0f 92       	push	r0
    4798:	0f b6       	in	r0, 0x3f	; 63
    479a:	0f 92       	push	r0
    479c:	11 24       	eor	r1, r1
    479e:	0b b6       	in	r0, 0x3b	; 59
    47a0:	0f 92       	push	r0
    47a2:	2f 93       	push	r18
    47a4:	8f 93       	push	r24
    47a6:	9f 93       	push	r25
    47a8:	af 93       	push	r26
    47aa:	bf 93       	push	r27
    47ac:	ef 93       	push	r30
    47ae:	ff 93       	push	r31
    47b0:	e0 91 92 19 	lds	r30, 0x1992	; 0x801992 <_ser_handle>
    47b4:	f0 91 93 19 	lds	r31, 0x1993	; 0x801993 <_ser_handle+0x1>
    47b8:	30 97       	sbiw	r30, 0x00	; 0
    47ba:	b9 f0       	breq	.+46     	; 0x47ea <__vector_26+0x56>
    47bc:	02 80       	ldd	r0, Z+2	; 0x02
    47be:	f3 81       	ldd	r31, Z+3	; 0x03
    47c0:	e0 2d       	mov	r30, r0
    47c2:	93 81       	ldd	r25, Z+3	; 0x03
    47c4:	82 81       	ldd	r24, Z+2	; 0x02
    47c6:	98 17       	cp	r25, r24
    47c8:	b1 f0       	breq	.+44     	; 0x47f6 <__vector_26+0x62>
    47ca:	92 81       	ldd	r25, Z+2	; 0x02
    47cc:	85 81       	ldd	r24, Z+5	; 0x05
    47ce:	28 2f       	mov	r18, r24
    47d0:	26 95       	lsr	r18
    47d2:	29 23       	and	r18, r25
    47d4:	a0 81       	ld	r26, Z
    47d6:	b1 81       	ldd	r27, Z+1	; 0x01
    47d8:	a2 0f       	add	r26, r18
    47da:	b1 1d       	adc	r27, r1
    47dc:	2c 91       	ld	r18, X
    47de:	9f 5f       	subi	r25, 0xFF	; 255
    47e0:	89 23       	and	r24, r25
    47e2:	82 83       	std	Z+2, r24	; 0x02
    47e4:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    47e8:	0b c0       	rjmp	.+22     	; 0x4800 <__vector_26+0x6c>
    47ea:	e1 ec       	ldi	r30, 0xC1	; 193
    47ec:	f0 e0       	ldi	r31, 0x00	; 0
    47ee:	80 81       	ld	r24, Z
    47f0:	8f 7d       	andi	r24, 0xDF	; 223
    47f2:	80 83       	st	Z, r24
    47f4:	05 c0       	rjmp	.+10     	; 0x4800 <__vector_26+0x6c>
    47f6:	e1 ec       	ldi	r30, 0xC1	; 193
    47f8:	f0 e0       	ldi	r31, 0x00	; 0
    47fa:	80 81       	ld	r24, Z
    47fc:	8f 7d       	andi	r24, 0xDF	; 223
    47fe:	80 83       	st	Z, r24
    4800:	ff 91       	pop	r31
    4802:	ef 91       	pop	r30
    4804:	bf 91       	pop	r27
    4806:	af 91       	pop	r26
    4808:	9f 91       	pop	r25
    480a:	8f 91       	pop	r24
    480c:	2f 91       	pop	r18
    480e:	0f 90       	pop	r0
    4810:	0b be       	out	0x3b, r0	; 59
    4812:	0f 90       	pop	r0
    4814:	0f be       	out	0x3f, r0	; 63
    4816:	0f 90       	pop	r0
    4818:	1f 90       	pop	r1
    481a:	18 95       	reti

0000481c <__vector_36>:
    481c:	1f 92       	push	r1
    481e:	0f 92       	push	r0
    4820:	0f b6       	in	r0, 0x3f	; 63
    4822:	0f 92       	push	r0
    4824:	11 24       	eor	r1, r1
    4826:	0b b6       	in	r0, 0x3b	; 59
    4828:	0f 92       	push	r0
    482a:	2f 93       	push	r18
    482c:	3f 93       	push	r19
    482e:	4f 93       	push	r20
    4830:	5f 93       	push	r21
    4832:	6f 93       	push	r22
    4834:	7f 93       	push	r23
    4836:	8f 93       	push	r24
    4838:	9f 93       	push	r25
    483a:	af 93       	push	r26
    483c:	bf 93       	push	r27
    483e:	cf 93       	push	r28
    4840:	df 93       	push	r29
    4842:	ef 93       	push	r30
    4844:	ff 93       	push	r31
    4846:	a0 91 94 19 	lds	r26, 0x1994	; 0x801994 <_ser_handle+0x2>
    484a:	b0 91 95 19 	lds	r27, 0x1995	; 0x801995 <_ser_handle+0x3>
    484e:	10 97       	sbiw	r26, 0x00	; 0
    4850:	11 f1       	breq	.+68     	; 0x4896 <__vector_36+0x7a>
    4852:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    4856:	14 96       	adiw	r26, 0x04	; 4
    4858:	ed 91       	ld	r30, X+
    485a:	fc 91       	ld	r31, X
    485c:	15 97       	sbiw	r26, 0x05	; 5
    485e:	93 81       	ldd	r25, Z+3	; 0x03
    4860:	82 81       	ldd	r24, Z+2	; 0x02
    4862:	25 81       	ldd	r18, Z+5	; 0x05
    4864:	98 1b       	sub	r25, r24
    4866:	92 23       	and	r25, r18
    4868:	84 81       	ldd	r24, Z+4	; 0x04
    486a:	98 17       	cp	r25, r24
    486c:	61 f0       	breq	.+24     	; 0x4886 <__vector_36+0x6a>
    486e:	83 81       	ldd	r24, Z+3	; 0x03
    4870:	26 95       	lsr	r18
    4872:	28 23       	and	r18, r24
    4874:	c0 81       	ld	r28, Z
    4876:	d1 81       	ldd	r29, Z+1	; 0x01
    4878:	c2 0f       	add	r28, r18
    487a:	d1 1d       	adc	r29, r1
    487c:	68 83       	st	Y, r22
    487e:	8f 5f       	subi	r24, 0xFF	; 255
    4880:	95 81       	ldd	r25, Z+5	; 0x05
    4882:	89 23       	and	r24, r25
    4884:	83 83       	std	Z+3, r24	; 0x03
    4886:	16 96       	adiw	r26, 0x06	; 6
    4888:	ed 91       	ld	r30, X+
    488a:	fc 91       	ld	r31, X
    488c:	17 97       	sbiw	r26, 0x07	; 7
    488e:	30 97       	sbiw	r30, 0x00	; 0
    4890:	11 f0       	breq	.+4      	; 0x4896 <__vector_36+0x7a>
    4892:	cd 01       	movw	r24, r26
    4894:	19 95       	eicall
    4896:	ff 91       	pop	r31
    4898:	ef 91       	pop	r30
    489a:	df 91       	pop	r29
    489c:	cf 91       	pop	r28
    489e:	bf 91       	pop	r27
    48a0:	af 91       	pop	r26
    48a2:	9f 91       	pop	r25
    48a4:	8f 91       	pop	r24
    48a6:	7f 91       	pop	r23
    48a8:	6f 91       	pop	r22
    48aa:	5f 91       	pop	r21
    48ac:	4f 91       	pop	r20
    48ae:	3f 91       	pop	r19
    48b0:	2f 91       	pop	r18
    48b2:	0f 90       	pop	r0
    48b4:	0b be       	out	0x3b, r0	; 59
    48b6:	0f 90       	pop	r0
    48b8:	0f be       	out	0x3f, r0	; 63
    48ba:	0f 90       	pop	r0
    48bc:	1f 90       	pop	r1
    48be:	18 95       	reti

000048c0 <__vector_37>:
    48c0:	1f 92       	push	r1
    48c2:	0f 92       	push	r0
    48c4:	0f b6       	in	r0, 0x3f	; 63
    48c6:	0f 92       	push	r0
    48c8:	11 24       	eor	r1, r1
    48ca:	0b b6       	in	r0, 0x3b	; 59
    48cc:	0f 92       	push	r0
    48ce:	2f 93       	push	r18
    48d0:	8f 93       	push	r24
    48d2:	9f 93       	push	r25
    48d4:	af 93       	push	r26
    48d6:	bf 93       	push	r27
    48d8:	ef 93       	push	r30
    48da:	ff 93       	push	r31
    48dc:	e0 91 94 19 	lds	r30, 0x1994	; 0x801994 <_ser_handle+0x2>
    48e0:	f0 91 95 19 	lds	r31, 0x1995	; 0x801995 <_ser_handle+0x3>
    48e4:	30 97       	sbiw	r30, 0x00	; 0
    48e6:	b9 f0       	breq	.+46     	; 0x4916 <__vector_37+0x56>
    48e8:	02 80       	ldd	r0, Z+2	; 0x02
    48ea:	f3 81       	ldd	r31, Z+3	; 0x03
    48ec:	e0 2d       	mov	r30, r0
    48ee:	93 81       	ldd	r25, Z+3	; 0x03
    48f0:	82 81       	ldd	r24, Z+2	; 0x02
    48f2:	98 17       	cp	r25, r24
    48f4:	b1 f0       	breq	.+44     	; 0x4922 <__vector_37+0x62>
    48f6:	92 81       	ldd	r25, Z+2	; 0x02
    48f8:	85 81       	ldd	r24, Z+5	; 0x05
    48fa:	28 2f       	mov	r18, r24
    48fc:	26 95       	lsr	r18
    48fe:	29 23       	and	r18, r25
    4900:	a0 81       	ld	r26, Z
    4902:	b1 81       	ldd	r27, Z+1	; 0x01
    4904:	a2 0f       	add	r26, r18
    4906:	b1 1d       	adc	r27, r1
    4908:	2c 91       	ld	r18, X
    490a:	9f 5f       	subi	r25, 0xFF	; 255
    490c:	89 23       	and	r24, r25
    490e:	82 83       	std	Z+2, r24	; 0x02
    4910:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    4914:	0b c0       	rjmp	.+22     	; 0x492c <__vector_37+0x6c>
    4916:	e9 ec       	ldi	r30, 0xC9	; 201
    4918:	f0 e0       	ldi	r31, 0x00	; 0
    491a:	80 81       	ld	r24, Z
    491c:	8f 7d       	andi	r24, 0xDF	; 223
    491e:	80 83       	st	Z, r24
    4920:	05 c0       	rjmp	.+10     	; 0x492c <__vector_37+0x6c>
    4922:	e9 ec       	ldi	r30, 0xC9	; 201
    4924:	f0 e0       	ldi	r31, 0x00	; 0
    4926:	80 81       	ld	r24, Z
    4928:	8f 7d       	andi	r24, 0xDF	; 223
    492a:	80 83       	st	Z, r24
    492c:	ff 91       	pop	r31
    492e:	ef 91       	pop	r30
    4930:	bf 91       	pop	r27
    4932:	af 91       	pop	r26
    4934:	9f 91       	pop	r25
    4936:	8f 91       	pop	r24
    4938:	2f 91       	pop	r18
    493a:	0f 90       	pop	r0
    493c:	0b be       	out	0x3b, r0	; 59
    493e:	0f 90       	pop	r0
    4940:	0f be       	out	0x3f, r0	; 63
    4942:	0f 90       	pop	r0
    4944:	1f 90       	pop	r1
    4946:	18 95       	reti

00004948 <__vector_51>:
    4948:	1f 92       	push	r1
    494a:	0f 92       	push	r0
    494c:	0f b6       	in	r0, 0x3f	; 63
    494e:	0f 92       	push	r0
    4950:	11 24       	eor	r1, r1
    4952:	0b b6       	in	r0, 0x3b	; 59
    4954:	0f 92       	push	r0
    4956:	2f 93       	push	r18
    4958:	3f 93       	push	r19
    495a:	4f 93       	push	r20
    495c:	5f 93       	push	r21
    495e:	6f 93       	push	r22
    4960:	7f 93       	push	r23
    4962:	8f 93       	push	r24
    4964:	9f 93       	push	r25
    4966:	af 93       	push	r26
    4968:	bf 93       	push	r27
    496a:	cf 93       	push	r28
    496c:	df 93       	push	r29
    496e:	ef 93       	push	r30
    4970:	ff 93       	push	r31
    4972:	a0 91 96 19 	lds	r26, 0x1996	; 0x801996 <_ser_handle+0x4>
    4976:	b0 91 97 19 	lds	r27, 0x1997	; 0x801997 <_ser_handle+0x5>
    497a:	10 97       	sbiw	r26, 0x00	; 0
    497c:	11 f1       	breq	.+68     	; 0x49c2 <__vector_51+0x7a>
    497e:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    4982:	14 96       	adiw	r26, 0x04	; 4
    4984:	ed 91       	ld	r30, X+
    4986:	fc 91       	ld	r31, X
    4988:	15 97       	sbiw	r26, 0x05	; 5
    498a:	93 81       	ldd	r25, Z+3	; 0x03
    498c:	82 81       	ldd	r24, Z+2	; 0x02
    498e:	25 81       	ldd	r18, Z+5	; 0x05
    4990:	98 1b       	sub	r25, r24
    4992:	92 23       	and	r25, r18
    4994:	84 81       	ldd	r24, Z+4	; 0x04
    4996:	98 17       	cp	r25, r24
    4998:	61 f0       	breq	.+24     	; 0x49b2 <__vector_51+0x6a>
    499a:	83 81       	ldd	r24, Z+3	; 0x03
    499c:	26 95       	lsr	r18
    499e:	28 23       	and	r18, r24
    49a0:	c0 81       	ld	r28, Z
    49a2:	d1 81       	ldd	r29, Z+1	; 0x01
    49a4:	c2 0f       	add	r28, r18
    49a6:	d1 1d       	adc	r29, r1
    49a8:	68 83       	st	Y, r22
    49aa:	8f 5f       	subi	r24, 0xFF	; 255
    49ac:	95 81       	ldd	r25, Z+5	; 0x05
    49ae:	89 23       	and	r24, r25
    49b0:	83 83       	std	Z+3, r24	; 0x03
    49b2:	16 96       	adiw	r26, 0x06	; 6
    49b4:	ed 91       	ld	r30, X+
    49b6:	fc 91       	ld	r31, X
    49b8:	17 97       	sbiw	r26, 0x07	; 7
    49ba:	30 97       	sbiw	r30, 0x00	; 0
    49bc:	11 f0       	breq	.+4      	; 0x49c2 <__vector_51+0x7a>
    49be:	cd 01       	movw	r24, r26
    49c0:	19 95       	eicall
    49c2:	ff 91       	pop	r31
    49c4:	ef 91       	pop	r30
    49c6:	df 91       	pop	r29
    49c8:	cf 91       	pop	r28
    49ca:	bf 91       	pop	r27
    49cc:	af 91       	pop	r26
    49ce:	9f 91       	pop	r25
    49d0:	8f 91       	pop	r24
    49d2:	7f 91       	pop	r23
    49d4:	6f 91       	pop	r22
    49d6:	5f 91       	pop	r21
    49d8:	4f 91       	pop	r20
    49da:	3f 91       	pop	r19
    49dc:	2f 91       	pop	r18
    49de:	0f 90       	pop	r0
    49e0:	0b be       	out	0x3b, r0	; 59
    49e2:	0f 90       	pop	r0
    49e4:	0f be       	out	0x3f, r0	; 63
    49e6:	0f 90       	pop	r0
    49e8:	1f 90       	pop	r1
    49ea:	18 95       	reti

000049ec <__vector_52>:
    49ec:	1f 92       	push	r1
    49ee:	0f 92       	push	r0
    49f0:	0f b6       	in	r0, 0x3f	; 63
    49f2:	0f 92       	push	r0
    49f4:	11 24       	eor	r1, r1
    49f6:	0b b6       	in	r0, 0x3b	; 59
    49f8:	0f 92       	push	r0
    49fa:	2f 93       	push	r18
    49fc:	8f 93       	push	r24
    49fe:	9f 93       	push	r25
    4a00:	af 93       	push	r26
    4a02:	bf 93       	push	r27
    4a04:	ef 93       	push	r30
    4a06:	ff 93       	push	r31
    4a08:	e0 91 96 19 	lds	r30, 0x1996	; 0x801996 <_ser_handle+0x4>
    4a0c:	f0 91 97 19 	lds	r31, 0x1997	; 0x801997 <_ser_handle+0x5>
    4a10:	30 97       	sbiw	r30, 0x00	; 0
    4a12:	b9 f0       	breq	.+46     	; 0x4a42 <__vector_52+0x56>
    4a14:	02 80       	ldd	r0, Z+2	; 0x02
    4a16:	f3 81       	ldd	r31, Z+3	; 0x03
    4a18:	e0 2d       	mov	r30, r0
    4a1a:	93 81       	ldd	r25, Z+3	; 0x03
    4a1c:	82 81       	ldd	r24, Z+2	; 0x02
    4a1e:	98 17       	cp	r25, r24
    4a20:	b1 f0       	breq	.+44     	; 0x4a4e <__vector_52+0x62>
    4a22:	92 81       	ldd	r25, Z+2	; 0x02
    4a24:	85 81       	ldd	r24, Z+5	; 0x05
    4a26:	28 2f       	mov	r18, r24
    4a28:	26 95       	lsr	r18
    4a2a:	29 23       	and	r18, r25
    4a2c:	a0 81       	ld	r26, Z
    4a2e:	b1 81       	ldd	r27, Z+1	; 0x01
    4a30:	a2 0f       	add	r26, r18
    4a32:	b1 1d       	adc	r27, r1
    4a34:	2c 91       	ld	r18, X
    4a36:	9f 5f       	subi	r25, 0xFF	; 255
    4a38:	89 23       	and	r24, r25
    4a3a:	82 83       	std	Z+2, r24	; 0x02
    4a3c:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    4a40:	0b c0       	rjmp	.+22     	; 0x4a58 <__vector_52+0x6c>
    4a42:	e1 ed       	ldi	r30, 0xD1	; 209
    4a44:	f0 e0       	ldi	r31, 0x00	; 0
    4a46:	80 81       	ld	r24, Z
    4a48:	8f 7d       	andi	r24, 0xDF	; 223
    4a4a:	80 83       	st	Z, r24
    4a4c:	05 c0       	rjmp	.+10     	; 0x4a58 <__vector_52+0x6c>
    4a4e:	e1 ed       	ldi	r30, 0xD1	; 209
    4a50:	f0 e0       	ldi	r31, 0x00	; 0
    4a52:	80 81       	ld	r24, Z
    4a54:	8f 7d       	andi	r24, 0xDF	; 223
    4a56:	80 83       	st	Z, r24
    4a58:	ff 91       	pop	r31
    4a5a:	ef 91       	pop	r30
    4a5c:	bf 91       	pop	r27
    4a5e:	af 91       	pop	r26
    4a60:	9f 91       	pop	r25
    4a62:	8f 91       	pop	r24
    4a64:	2f 91       	pop	r18
    4a66:	0f 90       	pop	r0
    4a68:	0b be       	out	0x3b, r0	; 59
    4a6a:	0f 90       	pop	r0
    4a6c:	0f be       	out	0x3f, r0	; 63
    4a6e:	0f 90       	pop	r0
    4a70:	1f 90       	pop	r1
    4a72:	18 95       	reti

00004a74 <__vector_54>:
    4a74:	1f 92       	push	r1
    4a76:	0f 92       	push	r0
    4a78:	0f b6       	in	r0, 0x3f	; 63
    4a7a:	0f 92       	push	r0
    4a7c:	11 24       	eor	r1, r1
    4a7e:	0b b6       	in	r0, 0x3b	; 59
    4a80:	0f 92       	push	r0
    4a82:	2f 93       	push	r18
    4a84:	3f 93       	push	r19
    4a86:	4f 93       	push	r20
    4a88:	5f 93       	push	r21
    4a8a:	6f 93       	push	r22
    4a8c:	7f 93       	push	r23
    4a8e:	8f 93       	push	r24
    4a90:	9f 93       	push	r25
    4a92:	af 93       	push	r26
    4a94:	bf 93       	push	r27
    4a96:	cf 93       	push	r28
    4a98:	df 93       	push	r29
    4a9a:	ef 93       	push	r30
    4a9c:	ff 93       	push	r31
    4a9e:	a0 91 98 19 	lds	r26, 0x1998	; 0x801998 <_ser_handle+0x6>
    4aa2:	b0 91 99 19 	lds	r27, 0x1999	; 0x801999 <_ser_handle+0x7>
    4aa6:	10 97       	sbiw	r26, 0x00	; 0
    4aa8:	11 f1       	breq	.+68     	; 0x4aee <__vector_54+0x7a>
    4aaa:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    4aae:	14 96       	adiw	r26, 0x04	; 4
    4ab0:	ed 91       	ld	r30, X+
    4ab2:	fc 91       	ld	r31, X
    4ab4:	15 97       	sbiw	r26, 0x05	; 5
    4ab6:	93 81       	ldd	r25, Z+3	; 0x03
    4ab8:	82 81       	ldd	r24, Z+2	; 0x02
    4aba:	25 81       	ldd	r18, Z+5	; 0x05
    4abc:	98 1b       	sub	r25, r24
    4abe:	92 23       	and	r25, r18
    4ac0:	84 81       	ldd	r24, Z+4	; 0x04
    4ac2:	98 17       	cp	r25, r24
    4ac4:	61 f0       	breq	.+24     	; 0x4ade <__vector_54+0x6a>
    4ac6:	83 81       	ldd	r24, Z+3	; 0x03
    4ac8:	26 95       	lsr	r18
    4aca:	28 23       	and	r18, r24
    4acc:	c0 81       	ld	r28, Z
    4ace:	d1 81       	ldd	r29, Z+1	; 0x01
    4ad0:	c2 0f       	add	r28, r18
    4ad2:	d1 1d       	adc	r29, r1
    4ad4:	68 83       	st	Y, r22
    4ad6:	8f 5f       	subi	r24, 0xFF	; 255
    4ad8:	95 81       	ldd	r25, Z+5	; 0x05
    4ada:	89 23       	and	r24, r25
    4adc:	83 83       	std	Z+3, r24	; 0x03
    4ade:	16 96       	adiw	r26, 0x06	; 6
    4ae0:	ed 91       	ld	r30, X+
    4ae2:	fc 91       	ld	r31, X
    4ae4:	17 97       	sbiw	r26, 0x07	; 7
    4ae6:	30 97       	sbiw	r30, 0x00	; 0
    4ae8:	11 f0       	breq	.+4      	; 0x4aee <__vector_54+0x7a>
    4aea:	cd 01       	movw	r24, r26
    4aec:	19 95       	eicall
    4aee:	ff 91       	pop	r31
    4af0:	ef 91       	pop	r30
    4af2:	df 91       	pop	r29
    4af4:	cf 91       	pop	r28
    4af6:	bf 91       	pop	r27
    4af8:	af 91       	pop	r26
    4afa:	9f 91       	pop	r25
    4afc:	8f 91       	pop	r24
    4afe:	7f 91       	pop	r23
    4b00:	6f 91       	pop	r22
    4b02:	5f 91       	pop	r21
    4b04:	4f 91       	pop	r20
    4b06:	3f 91       	pop	r19
    4b08:	2f 91       	pop	r18
    4b0a:	0f 90       	pop	r0
    4b0c:	0b be       	out	0x3b, r0	; 59
    4b0e:	0f 90       	pop	r0
    4b10:	0f be       	out	0x3f, r0	; 63
    4b12:	0f 90       	pop	r0
    4b14:	1f 90       	pop	r1
    4b16:	18 95       	reti

00004b18 <__vector_55>:
    4b18:	1f 92       	push	r1
    4b1a:	0f 92       	push	r0
    4b1c:	0f b6       	in	r0, 0x3f	; 63
    4b1e:	0f 92       	push	r0
    4b20:	11 24       	eor	r1, r1
    4b22:	0b b6       	in	r0, 0x3b	; 59
    4b24:	0f 92       	push	r0
    4b26:	2f 93       	push	r18
    4b28:	8f 93       	push	r24
    4b2a:	9f 93       	push	r25
    4b2c:	af 93       	push	r26
    4b2e:	bf 93       	push	r27
    4b30:	ef 93       	push	r30
    4b32:	ff 93       	push	r31
    4b34:	e0 91 98 19 	lds	r30, 0x1998	; 0x801998 <_ser_handle+0x6>
    4b38:	f0 91 99 19 	lds	r31, 0x1999	; 0x801999 <_ser_handle+0x7>
    4b3c:	30 97       	sbiw	r30, 0x00	; 0
    4b3e:	b9 f0       	breq	.+46     	; 0x4b6e <__vector_55+0x56>
    4b40:	02 80       	ldd	r0, Z+2	; 0x02
    4b42:	f3 81       	ldd	r31, Z+3	; 0x03
    4b44:	e0 2d       	mov	r30, r0
    4b46:	93 81       	ldd	r25, Z+3	; 0x03
    4b48:	82 81       	ldd	r24, Z+2	; 0x02
    4b4a:	98 17       	cp	r25, r24
    4b4c:	b1 f0       	breq	.+44     	; 0x4b7a <__vector_55+0x62>
    4b4e:	92 81       	ldd	r25, Z+2	; 0x02
    4b50:	85 81       	ldd	r24, Z+5	; 0x05
    4b52:	28 2f       	mov	r18, r24
    4b54:	26 95       	lsr	r18
    4b56:	29 23       	and	r18, r25
    4b58:	a0 81       	ld	r26, Z
    4b5a:	b1 81       	ldd	r27, Z+1	; 0x01
    4b5c:	a2 0f       	add	r26, r18
    4b5e:	b1 1d       	adc	r27, r1
    4b60:	2c 91       	ld	r18, X
    4b62:	9f 5f       	subi	r25, 0xFF	; 255
    4b64:	89 23       	and	r24, r25
    4b66:	82 83       	std	Z+2, r24	; 0x02
    4b68:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    4b6c:	0b c0       	rjmp	.+22     	; 0x4b84 <__vector_55+0x6c>
    4b6e:	e1 e3       	ldi	r30, 0x31	; 49
    4b70:	f1 e0       	ldi	r31, 0x01	; 1
    4b72:	80 81       	ld	r24, Z
    4b74:	8f 7d       	andi	r24, 0xDF	; 223
    4b76:	80 83       	st	Z, r24
    4b78:	05 c0       	rjmp	.+10     	; 0x4b84 <__vector_55+0x6c>
    4b7a:	e1 e3       	ldi	r30, 0x31	; 49
    4b7c:	f1 e0       	ldi	r31, 0x01	; 1
    4b7e:	80 81       	ld	r24, Z
    4b80:	8f 7d       	andi	r24, 0xDF	; 223
    4b82:	80 83       	st	Z, r24
    4b84:	ff 91       	pop	r31
    4b86:	ef 91       	pop	r30
    4b88:	bf 91       	pop	r27
    4b8a:	af 91       	pop	r26
    4b8c:	9f 91       	pop	r25
    4b8e:	8f 91       	pop	r24
    4b90:	2f 91       	pop	r18
    4b92:	0f 90       	pop	r0
    4b94:	0b be       	out	0x3b, r0	; 59
    4b96:	0f 90       	pop	r0
    4b98:	0f be       	out	0x3f, r0	; 63
    4b9a:	0f 90       	pop	r0
    4b9c:	1f 90       	pop	r1
    4b9e:	18 95       	reti

00004ba0 <usart_getchar>:
    4ba0:	cf 93       	push	r28
    4ba2:	df 93       	push	r29
    4ba4:	1f 92       	push	r1
    4ba6:	cd b7       	in	r28, 0x3d	; 61
    4ba8:	de b7       	in	r29, 0x3e	; 62
    4baa:	be 01       	movw	r22, r28
    4bac:	6f 5f       	subi	r22, 0xFF	; 255
    4bae:	7f 4f       	sbci	r23, 0xFF	; 255
    4bb0:	80 91 9a 19 	lds	r24, 0x199A	; 0x80199a <_com_serial_instance>
    4bb4:	90 91 9b 19 	lds	r25, 0x199B	; 0x80199b <_com_serial_instance+0x1>
    4bb8:	7f dd       	rcall	.-1282   	; 0x46b8 <serial_get_byte>
    4bba:	81 11       	cpse	r24, r1
    4bbc:	f6 cf       	rjmp	.-20     	; 0x4baa <usart_getchar+0xa>
    4bbe:	89 81       	ldd	r24, Y+1	; 0x01
    4bc0:	90 e0       	ldi	r25, 0x00	; 0
    4bc2:	0f 90       	pop	r0
    4bc4:	df 91       	pop	r29
    4bc6:	cf 91       	pop	r28
    4bc8:	08 95       	ret

00004bca <usart_putchar>:
    4bca:	68 2f       	mov	r22, r24
    4bcc:	80 91 9a 19 	lds	r24, 0x199A	; 0x80199a <_com_serial_instance>
    4bd0:	90 91 9b 19 	lds	r25, 0x199B	; 0x80199b <_com_serial_instance+0x1>
    4bd4:	fc dc       	rcall	.-1544   	; 0x45ce <serial_send_byte>
    4bd6:	80 e0       	ldi	r24, 0x00	; 0
    4bd8:	90 e0       	ldi	r25, 0x00	; 0
    4bda:	08 95       	ret

00004bdc <stdioCreate>:
    4bdc:	8f 92       	push	r8
    4bde:	9f 92       	push	r9
    4be0:	af 92       	push	r10
    4be2:	cf 92       	push	r12
    4be4:	ef 92       	push	r14
    4be6:	0f 93       	push	r16
    4be8:	81 2c       	mov	r8, r1
    4bea:	91 2c       	mov	r9, r1
    4bec:	68 94       	set
    4bee:	aa 24       	eor	r10, r10
    4bf0:	a7 f8       	bld	r10, 7
    4bf2:	68 94       	set
    4bf4:	cc 24       	eor	r12, r12
    4bf6:	c7 f8       	bld	r12, 7
    4bf8:	e1 2c       	mov	r14, r1
    4bfa:	00 e0       	ldi	r16, 0x00	; 0
    4bfc:	23 e0       	ldi	r18, 0x03	; 3
    4bfe:	40 e0       	ldi	r20, 0x00	; 0
    4c00:	51 ee       	ldi	r21, 0xE1	; 225
    4c02:	60 e0       	ldi	r22, 0x00	; 0
    4c04:	70 e0       	ldi	r23, 0x00	; 0
    4c06:	4d dc       	rcall	.-1894   	; 0x44a2 <serial_new_instance>
    4c08:	90 93 9b 19 	sts	0x199B, r25	; 0x80199b <_com_serial_instance+0x1>
    4c0c:	80 93 9a 19 	sts	0x199A, r24	; 0x80199a <_com_serial_instance>
    4c10:	e3 ee       	ldi	r30, 0xE3	; 227
    4c12:	f9 e1       	ldi	r31, 0x19	; 25
    4c14:	84 e1       	ldi	r24, 0x14	; 20
    4c16:	92 e0       	ldi	r25, 0x02	; 2
    4c18:	91 83       	std	Z+1, r25	; 0x01
    4c1a:	80 83       	st	Z, r24
    4c1c:	93 83       	std	Z+3, r25	; 0x03
    4c1e:	82 83       	std	Z+2, r24	; 0x02
    4c20:	0f 91       	pop	r16
    4c22:	ef 90       	pop	r14
    4c24:	cf 90       	pop	r12
    4c26:	af 90       	pop	r10
    4c28:	9f 90       	pop	r9
    4c2a:	8f 90       	pop	r8
    4c2c:	08 95       	ret

00004c2e <_initTwiInterface>:
    4c2e:	80 91 aa 19 	lds	r24, 0x19AA	; 0x8019aa <_twiIsInitiated>
    4c32:	81 11       	cpse	r24, r1
    4c34:	0c c0       	rjmp	.+24     	; 0x4c4e <_initTwiInterface+0x20>
    4c36:	8c e0       	ldi	r24, 0x0C	; 12
    4c38:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    4c3c:	8f ef       	ldi	r24, 0xFF	; 255
    4c3e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    4c42:	84 e0       	ldi	r24, 0x04	; 4
    4c44:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4c48:	81 e0       	ldi	r24, 0x01	; 1
    4c4a:	80 93 aa 19 	sts	0x19AA, r24	; 0x8019aa <_twiIsInitiated>
    4c4e:	08 95       	ret

00004c50 <twiCreate>:
    4c50:	af 92       	push	r10
    4c52:	bf 92       	push	r11
    4c54:	cf 92       	push	r12
    4c56:	df 92       	push	r13
    4c58:	ef 92       	push	r14
    4c5a:	ff 92       	push	r15
    4c5c:	0f 93       	push	r16
    4c5e:	1f 93       	push	r17
    4c60:	cf 93       	push	r28
    4c62:	df 93       	push	r29
    4c64:	a8 2e       	mov	r10, r24
    4c66:	b6 2e       	mov	r11, r22
    4c68:	69 01       	movw	r12, r18
    4c6a:	7a 01       	movw	r14, r20
    4c6c:	84 e0       	ldi	r24, 0x04	; 4
    4c6e:	90 e0       	ldi	r25, 0x00	; 0
    4c70:	7f d3       	rcall	.+1790   	; 0x5370 <malloc>
    4c72:	ec 01       	movw	r28, r24
    4c74:	89 2b       	or	r24, r25
    4c76:	61 f1       	breq	.+88     	; 0x4cd0 <twiCreate+0x80>
    4c78:	a8 82       	st	Y, r10
    4c7a:	81 e0       	ldi	r24, 0x01	; 1
    4c7c:	b8 12       	cpse	r11, r24
    4c7e:	12 c0       	rjmp	.+36     	; 0x4ca4 <twiCreate+0x54>
    4c80:	c7 01       	movw	r24, r14
    4c82:	b6 01       	movw	r22, r12
    4c84:	20 ea       	ldi	r18, 0xA0	; 160
    4c86:	36 e8       	ldi	r19, 0x86	; 134
    4c88:	41 e0       	ldi	r20, 0x01	; 1
    4c8a:	50 e0       	ldi	r21, 0x00	; 0
    4c8c:	2d d3       	rcall	.+1626   	; 0x52e8 <__udivmodsi4>
    4c8e:	da 01       	movw	r26, r20
    4c90:	c9 01       	movw	r24, r18
    4c92:	40 97       	sbiw	r24, 0x10	; 16
    4c94:	a1 09       	sbc	r26, r1
    4c96:	b1 09       	sbc	r27, r1
    4c98:	b6 95       	lsr	r27
    4c9a:	a7 95       	ror	r26
    4c9c:	97 95       	ror	r25
    4c9e:	87 95       	ror	r24
    4ca0:	89 83       	std	Y+1, r24	; 0x01
    4ca2:	11 c0       	rjmp	.+34     	; 0x4cc6 <twiCreate+0x76>
    4ca4:	c7 01       	movw	r24, r14
    4ca6:	b6 01       	movw	r22, r12
    4ca8:	20 e8       	ldi	r18, 0x80	; 128
    4caa:	3a e1       	ldi	r19, 0x1A	; 26
    4cac:	46 e0       	ldi	r20, 0x06	; 6
    4cae:	50 e0       	ldi	r21, 0x00	; 0
    4cb0:	1b d3       	rcall	.+1590   	; 0x52e8 <__udivmodsi4>
    4cb2:	da 01       	movw	r26, r20
    4cb4:	c9 01       	movw	r24, r18
    4cb6:	40 97       	sbiw	r24, 0x10	; 16
    4cb8:	a1 09       	sbc	r26, r1
    4cba:	b1 09       	sbc	r27, r1
    4cbc:	b6 95       	lsr	r27
    4cbe:	a7 95       	ror	r26
    4cc0:	97 95       	ror	r25
    4cc2:	87 95       	ror	r24
    4cc4:	89 83       	std	Y+1, r24	; 0x01
    4cc6:	1b 83       	std	Y+3, r17	; 0x03
    4cc8:	0a 83       	std	Y+2, r16	; 0x02
    4cca:	8c 2f       	mov	r24, r28
    4ccc:	9d 2f       	mov	r25, r29
    4cce:	02 c0       	rjmp	.+4      	; 0x4cd4 <twiCreate+0x84>
    4cd0:	80 e0       	ldi	r24, 0x00	; 0
    4cd2:	90 e0       	ldi	r25, 0x00	; 0
    4cd4:	df 91       	pop	r29
    4cd6:	cf 91       	pop	r28
    4cd8:	1f 91       	pop	r17
    4cda:	0f 91       	pop	r16
    4cdc:	ff 90       	pop	r15
    4cde:	ef 90       	pop	r14
    4ce0:	df 90       	pop	r13
    4ce2:	cf 90       	pop	r12
    4ce4:	bf 90       	pop	r11
    4ce6:	af 90       	pop	r10
    4ce8:	08 95       	ret

00004cea <twiIsBusy>:
    4cea:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4cee:	81 70       	andi	r24, 0x01	; 1
    4cf0:	08 95       	ret

00004cf2 <twiReceive>:
    4cf2:	1f 93       	push	r17
    4cf4:	cf 93       	push	r28
    4cf6:	df 93       	push	r29
    4cf8:	00 97       	sbiw	r24, 0x00	; 0
    4cfa:	29 f1       	breq	.+74     	; 0x4d46 <twiReceive+0x54>
    4cfc:	6b 30       	cpi	r22, 0x0B	; 11
    4cfe:	28 f5       	brcc	.+74     	; 0x4d4a <twiReceive+0x58>
    4d00:	16 2f       	mov	r17, r22
    4d02:	ec 01       	movw	r28, r24
    4d04:	f2 df       	rcall	.-28     	; 0x4cea <twiIsBusy>
    4d06:	81 11       	cpse	r24, r1
    4d08:	22 c0       	rjmp	.+68     	; 0x4d4e <twiReceive+0x5c>
    4d0a:	80 91 9d 19 	lds	r24, 0x199D	; 0x80199d <_twiCurrentHandler>
    4d0e:	90 91 9e 19 	lds	r25, 0x199E	; 0x80199e <_twiCurrentHandler+0x1>
    4d12:	c8 17       	cp	r28, r24
    4d14:	d9 07       	cpc	r29, r25
    4d16:	41 f0       	breq	.+16     	; 0x4d28 <twiReceive+0x36>
    4d18:	8a df       	rcall	.-236    	; 0x4c2e <_initTwiInterface>
    4d1a:	89 81       	ldd	r24, Y+1	; 0x01
    4d1c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    4d20:	d0 93 9e 19 	sts	0x199E, r29	; 0x80199e <_twiCurrentHandler+0x1>
    4d24:	c0 93 9d 19 	sts	0x199D, r28	; 0x80199d <_twiCurrentHandler>
    4d28:	10 93 9f 19 	sts	0x199F, r17	; 0x80199f <_twiMessageLen>
    4d2c:	88 81       	ld	r24, Y
    4d2e:	88 0f       	add	r24, r24
    4d30:	81 60       	ori	r24, 0x01	; 1
    4d32:	80 93 a0 19 	sts	0x19A0, r24	; 0x8019a0 <_twiMessageBuffer>
    4d36:	88 ef       	ldi	r24, 0xF8	; 248
    4d38:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <_twiCurrentState>
    4d3c:	85 ea       	ldi	r24, 0xA5	; 165
    4d3e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4d42:	85 e0       	ldi	r24, 0x05	; 5
    4d44:	05 c0       	rjmp	.+10     	; 0x4d50 <twiReceive+0x5e>
    4d46:	86 e0       	ldi	r24, 0x06	; 6
    4d48:	03 c0       	rjmp	.+6      	; 0x4d50 <twiReceive+0x5e>
    4d4a:	87 e0       	ldi	r24, 0x07	; 7
    4d4c:	01 c0       	rjmp	.+2      	; 0x4d50 <twiReceive+0x5e>
    4d4e:	82 e0       	ldi	r24, 0x02	; 2
    4d50:	df 91       	pop	r29
    4d52:	cf 91       	pop	r28
    4d54:	1f 91       	pop	r17
    4d56:	08 95       	ret

00004d58 <__vector_39>:
    4d58:	1f 92       	push	r1
    4d5a:	0f 92       	push	r0
    4d5c:	0f b6       	in	r0, 0x3f	; 63
    4d5e:	0f 92       	push	r0
    4d60:	11 24       	eor	r1, r1
    4d62:	0b b6       	in	r0, 0x3b	; 59
    4d64:	0f 92       	push	r0
    4d66:	2f 93       	push	r18
    4d68:	3f 93       	push	r19
    4d6a:	4f 93       	push	r20
    4d6c:	5f 93       	push	r21
    4d6e:	6f 93       	push	r22
    4d70:	7f 93       	push	r23
    4d72:	8f 93       	push	r24
    4d74:	9f 93       	push	r25
    4d76:	af 93       	push	r26
    4d78:	bf 93       	push	r27
    4d7a:	ef 93       	push	r30
    4d7c:	ff 93       	push	r31
    4d7e:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    4d82:	8e 2f       	mov	r24, r30
    4d84:	90 e0       	ldi	r25, 0x00	; 0
    4d86:	fc 01       	movw	r30, r24
    4d88:	38 97       	sbiw	r30, 0x08	; 8
    4d8a:	e1 35       	cpi	r30, 0x51	; 81
    4d8c:	f1 05       	cpc	r31, r1
    4d8e:	08 f0       	brcs	.+2      	; 0x4d92 <__vector_39+0x3a>
    4d90:	75 c0       	rjmp	.+234    	; 0x4e7c <__vector_39+0x124>
    4d92:	88 27       	eor	r24, r24
    4d94:	e4 58       	subi	r30, 0x84	; 132
    4d96:	ff 4f       	sbci	r31, 0xFF	; 255
    4d98:	8f 4f       	sbci	r24, 0xFF	; 255
    4d9a:	c8 c2       	rjmp	.+1424   	; 0x532c <__tablejump2__>
    4d9c:	10 92 9c 19 	sts	0x199C, r1	; 0x80199c <_index.1885>
    4da0:	e0 91 9c 19 	lds	r30, 0x199C	; 0x80199c <_index.1885>
    4da4:	80 91 9f 19 	lds	r24, 0x199F	; 0x80199f <_twiMessageLen>
    4da8:	e8 17       	cp	r30, r24
    4daa:	70 f4       	brcc	.+28     	; 0x4dc8 <__vector_39+0x70>
    4dac:	81 e0       	ldi	r24, 0x01	; 1
    4dae:	8e 0f       	add	r24, r30
    4db0:	80 93 9c 19 	sts	0x199C, r24	; 0x80199c <_index.1885>
    4db4:	f0 e0       	ldi	r31, 0x00	; 0
    4db6:	e0 56       	subi	r30, 0x60	; 96
    4db8:	f6 4e       	sbci	r31, 0xE6	; 230
    4dba:	80 81       	ld	r24, Z
    4dbc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    4dc0:	85 e8       	ldi	r24, 0x85	; 133
    4dc2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4dc6:	72 c0       	rjmp	.+228    	; 0x4eac <__vector_39+0x154>
    4dc8:	84 e9       	ldi	r24, 0x94	; 148
    4dca:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4dce:	80 91 9d 19 	lds	r24, 0x199D	; 0x80199d <_twiCurrentHandler>
    4dd2:	90 91 9e 19 	lds	r25, 0x199E	; 0x80199e <_twiCurrentHandler+0x1>
    4dd6:	dc 01       	movw	r26, r24
    4dd8:	12 96       	adiw	r26, 0x02	; 2
    4dda:	ed 91       	ld	r30, X+
    4ddc:	fc 91       	ld	r31, X
    4dde:	13 97       	sbiw	r26, 0x03	; 3
    4de0:	30 97       	sbiw	r30, 0x00	; 0
    4de2:	09 f4       	brne	.+2      	; 0x4de6 <__vector_39+0x8e>
    4de4:	63 c0       	rjmp	.+198    	; 0x4eac <__vector_39+0x154>
    4de6:	20 e0       	ldi	r18, 0x00	; 0
    4de8:	40 e0       	ldi	r20, 0x00	; 0
    4dea:	50 e0       	ldi	r21, 0x00	; 0
    4dec:	64 e0       	ldi	r22, 0x04	; 4
    4dee:	19 95       	eicall
    4df0:	5d c0       	rjmp	.+186    	; 0x4eac <__vector_39+0x154>
    4df2:	e0 91 9c 19 	lds	r30, 0x199C	; 0x80199c <_index.1885>
    4df6:	81 e0       	ldi	r24, 0x01	; 1
    4df8:	8e 0f       	add	r24, r30
    4dfa:	80 93 9c 19 	sts	0x199C, r24	; 0x80199c <_index.1885>
    4dfe:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    4e02:	f0 e0       	ldi	r31, 0x00	; 0
    4e04:	e0 56       	subi	r30, 0x60	; 96
    4e06:	f6 4e       	sbci	r31, 0xE6	; 230
    4e08:	80 83       	st	Z, r24
    4e0a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    4e0e:	80 34       	cpi	r24, 0x40	; 64
    4e10:	11 f4       	brne	.+4      	; 0x4e16 <__vector_39+0xbe>
    4e12:	10 92 9c 19 	sts	0x199C, r1	; 0x80199c <_index.1885>
    4e16:	20 91 9c 19 	lds	r18, 0x199C	; 0x80199c <_index.1885>
    4e1a:	30 e0       	ldi	r19, 0x00	; 0
    4e1c:	80 91 9f 19 	lds	r24, 0x199F	; 0x80199f <_twiMessageLen>
    4e20:	90 e0       	ldi	r25, 0x00	; 0
    4e22:	01 97       	sbiw	r24, 0x01	; 1
    4e24:	28 17       	cp	r18, r24
    4e26:	39 07       	cpc	r19, r25
    4e28:	24 f4       	brge	.+8      	; 0x4e32 <__vector_39+0xda>
    4e2a:	85 ec       	ldi	r24, 0xC5	; 197
    4e2c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4e30:	3d c0       	rjmp	.+122    	; 0x4eac <__vector_39+0x154>
    4e32:	85 e8       	ldi	r24, 0x85	; 133
    4e34:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4e38:	39 c0       	rjmp	.+114    	; 0x4eac <__vector_39+0x154>
    4e3a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    4e3e:	e0 91 9c 19 	lds	r30, 0x199C	; 0x80199c <_index.1885>
    4e42:	f0 e0       	ldi	r31, 0x00	; 0
    4e44:	e0 56       	subi	r30, 0x60	; 96
    4e46:	f6 4e       	sbci	r31, 0xE6	; 230
    4e48:	80 83       	st	Z, r24
    4e4a:	84 e9       	ldi	r24, 0x94	; 148
    4e4c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4e50:	80 91 9d 19 	lds	r24, 0x199D	; 0x80199d <_twiCurrentHandler>
    4e54:	90 91 9e 19 	lds	r25, 0x199E	; 0x80199e <_twiCurrentHandler+0x1>
    4e58:	dc 01       	movw	r26, r24
    4e5a:	12 96       	adiw	r26, 0x02	; 2
    4e5c:	ed 91       	ld	r30, X+
    4e5e:	fc 91       	ld	r31, X
    4e60:	13 97       	sbiw	r26, 0x03	; 3
    4e62:	30 97       	sbiw	r30, 0x00	; 0
    4e64:	19 f1       	breq	.+70     	; 0x4eac <__vector_39+0x154>
    4e66:	20 91 9f 19 	lds	r18, 0x199F	; 0x80199f <_twiMessageLen>
    4e6a:	40 ea       	ldi	r20, 0xA0	; 160
    4e6c:	59 e1       	ldi	r21, 0x19	; 25
    4e6e:	65 e0       	ldi	r22, 0x05	; 5
    4e70:	19 95       	eicall
    4e72:	1c c0       	rjmp	.+56     	; 0x4eac <__vector_39+0x154>
    4e74:	85 ea       	ldi	r24, 0xA5	; 165
    4e76:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4e7a:	18 c0       	rjmp	.+48     	; 0x4eac <__vector_39+0x154>
    4e7c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    4e80:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <_twiCurrentState>
    4e84:	84 e0       	ldi	r24, 0x04	; 4
    4e86:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4e8a:	80 91 9d 19 	lds	r24, 0x199D	; 0x80199d <_twiCurrentHandler>
    4e8e:	90 91 9e 19 	lds	r25, 0x199E	; 0x80199e <_twiCurrentHandler+0x1>
    4e92:	dc 01       	movw	r26, r24
    4e94:	12 96       	adiw	r26, 0x02	; 2
    4e96:	ed 91       	ld	r30, X+
    4e98:	fc 91       	ld	r31, X
    4e9a:	13 97       	sbiw	r26, 0x03	; 3
    4e9c:	30 97       	sbiw	r30, 0x00	; 0
    4e9e:	31 f0       	breq	.+12     	; 0x4eac <__vector_39+0x154>
    4ea0:	20 e0       	ldi	r18, 0x00	; 0
    4ea2:	40 e0       	ldi	r20, 0x00	; 0
    4ea4:	50 e0       	ldi	r21, 0x00	; 0
    4ea6:	60 91 22 02 	lds	r22, 0x0222	; 0x800222 <_twiCurrentState>
    4eaa:	19 95       	eicall
    4eac:	ff 91       	pop	r31
    4eae:	ef 91       	pop	r30
    4eb0:	bf 91       	pop	r27
    4eb2:	af 91       	pop	r26
    4eb4:	9f 91       	pop	r25
    4eb6:	8f 91       	pop	r24
    4eb8:	7f 91       	pop	r23
    4eba:	6f 91       	pop	r22
    4ebc:	5f 91       	pop	r21
    4ebe:	4f 91       	pop	r20
    4ec0:	3f 91       	pop	r19
    4ec2:	2f 91       	pop	r18
    4ec4:	0f 90       	pop	r0
    4ec6:	0b be       	out	0x3b, r0	; 59
    4ec8:	0f 90       	pop	r0
    4eca:	0f be       	out	0x3f, r0	; 63
    4ecc:	0f 90       	pop	r0
    4ece:	1f 90       	pop	r1
    4ed0:	18 95       	reti

00004ed2 <fifo_init>:
    4ed2:	fc 01       	movw	r30, r24
    4ed4:	41 11       	cpse	r20, r1
    4ed6:	01 c0       	rjmp	.+2      	; 0x4eda <fifo_init+0x8>
    4ed8:	6c d3       	rcall	.+1752   	; 0x55b2 <abort>
    4eda:	84 2f       	mov	r24, r20
    4edc:	90 e0       	ldi	r25, 0x00	; 0
    4ede:	9c 01       	movw	r18, r24
    4ee0:	21 50       	subi	r18, 0x01	; 1
    4ee2:	31 09       	sbc	r19, r1
    4ee4:	82 23       	and	r24, r18
    4ee6:	93 23       	and	r25, r19
    4ee8:	89 2b       	or	r24, r25
    4eea:	09 f0       	breq	.+2      	; 0x4eee <fifo_init+0x1c>
    4eec:	62 d3       	rcall	.+1732   	; 0x55b2 <abort>
    4eee:	41 38       	cpi	r20, 0x81	; 129
    4ef0:	08 f0       	brcs	.+2      	; 0x4ef4 <fifo_init+0x22>
    4ef2:	5f d3       	rcall	.+1726   	; 0x55b2 <abort>
    4ef4:	12 82       	std	Z+2, r1	; 0x02
    4ef6:	13 82       	std	Z+3, r1	; 0x03
    4ef8:	44 83       	std	Z+4, r20	; 0x04
    4efa:	44 0f       	add	r20, r20
    4efc:	41 50       	subi	r20, 0x01	; 1
    4efe:	45 83       	std	Z+5, r20	; 0x05
    4f00:	71 83       	std	Z+1, r23	; 0x01
    4f02:	60 83       	st	Z, r22
    4f04:	80 e0       	ldi	r24, 0x00	; 0
    4f06:	90 e0       	ldi	r25, 0x00	; 0
    4f08:	08 95       	ret

00004f0a <__subsf3>:
    4f0a:	50 58       	subi	r21, 0x80	; 128

00004f0c <__addsf3>:
    4f0c:	bb 27       	eor	r27, r27
    4f0e:	aa 27       	eor	r26, r26
    4f10:	0e d0       	rcall	.+28     	; 0x4f2e <__addsf3x>
    4f12:	4d c1       	rjmp	.+666    	; 0x51ae <__fp_round>
    4f14:	3e d1       	rcall	.+636    	; 0x5192 <__fp_pscA>
    4f16:	30 f0       	brcs	.+12     	; 0x4f24 <__addsf3+0x18>
    4f18:	43 d1       	rcall	.+646    	; 0x51a0 <__fp_pscB>
    4f1a:	20 f0       	brcs	.+8      	; 0x4f24 <__addsf3+0x18>
    4f1c:	31 f4       	brne	.+12     	; 0x4f2a <__addsf3+0x1e>
    4f1e:	9f 3f       	cpi	r25, 0xFF	; 255
    4f20:	11 f4       	brne	.+4      	; 0x4f26 <__addsf3+0x1a>
    4f22:	1e f4       	brtc	.+6      	; 0x4f2a <__addsf3+0x1e>
    4f24:	33 c1       	rjmp	.+614    	; 0x518c <__fp_nan>
    4f26:	0e f4       	brtc	.+2      	; 0x4f2a <__addsf3+0x1e>
    4f28:	e0 95       	com	r30
    4f2a:	e7 fb       	bst	r30, 7
    4f2c:	29 c1       	rjmp	.+594    	; 0x5180 <__fp_inf>

00004f2e <__addsf3x>:
    4f2e:	e9 2f       	mov	r30, r25
    4f30:	4f d1       	rcall	.+670    	; 0x51d0 <__fp_split3>
    4f32:	80 f3       	brcs	.-32     	; 0x4f14 <__addsf3+0x8>
    4f34:	ba 17       	cp	r27, r26
    4f36:	62 07       	cpc	r22, r18
    4f38:	73 07       	cpc	r23, r19
    4f3a:	84 07       	cpc	r24, r20
    4f3c:	95 07       	cpc	r25, r21
    4f3e:	18 f0       	brcs	.+6      	; 0x4f46 <__addsf3x+0x18>
    4f40:	71 f4       	brne	.+28     	; 0x4f5e <__addsf3x+0x30>
    4f42:	9e f5       	brtc	.+102    	; 0x4faa <__addsf3x+0x7c>
    4f44:	67 c1       	rjmp	.+718    	; 0x5214 <__fp_zero>
    4f46:	0e f4       	brtc	.+2      	; 0x4f4a <__addsf3x+0x1c>
    4f48:	e0 95       	com	r30
    4f4a:	0b 2e       	mov	r0, r27
    4f4c:	ba 2f       	mov	r27, r26
    4f4e:	a0 2d       	mov	r26, r0
    4f50:	0b 01       	movw	r0, r22
    4f52:	b9 01       	movw	r22, r18
    4f54:	90 01       	movw	r18, r0
    4f56:	0c 01       	movw	r0, r24
    4f58:	ca 01       	movw	r24, r20
    4f5a:	a0 01       	movw	r20, r0
    4f5c:	11 24       	eor	r1, r1
    4f5e:	ff 27       	eor	r31, r31
    4f60:	59 1b       	sub	r21, r25
    4f62:	99 f0       	breq	.+38     	; 0x4f8a <__addsf3x+0x5c>
    4f64:	59 3f       	cpi	r21, 0xF9	; 249
    4f66:	50 f4       	brcc	.+20     	; 0x4f7c <__addsf3x+0x4e>
    4f68:	50 3e       	cpi	r21, 0xE0	; 224
    4f6a:	68 f1       	brcs	.+90     	; 0x4fc6 <__addsf3x+0x98>
    4f6c:	1a 16       	cp	r1, r26
    4f6e:	f0 40       	sbci	r31, 0x00	; 0
    4f70:	a2 2f       	mov	r26, r18
    4f72:	23 2f       	mov	r18, r19
    4f74:	34 2f       	mov	r19, r20
    4f76:	44 27       	eor	r20, r20
    4f78:	58 5f       	subi	r21, 0xF8	; 248
    4f7a:	f3 cf       	rjmp	.-26     	; 0x4f62 <__addsf3x+0x34>
    4f7c:	46 95       	lsr	r20
    4f7e:	37 95       	ror	r19
    4f80:	27 95       	ror	r18
    4f82:	a7 95       	ror	r26
    4f84:	f0 40       	sbci	r31, 0x00	; 0
    4f86:	53 95       	inc	r21
    4f88:	c9 f7       	brne	.-14     	; 0x4f7c <__addsf3x+0x4e>
    4f8a:	7e f4       	brtc	.+30     	; 0x4faa <__addsf3x+0x7c>
    4f8c:	1f 16       	cp	r1, r31
    4f8e:	ba 0b       	sbc	r27, r26
    4f90:	62 0b       	sbc	r22, r18
    4f92:	73 0b       	sbc	r23, r19
    4f94:	84 0b       	sbc	r24, r20
    4f96:	ba f0       	brmi	.+46     	; 0x4fc6 <__addsf3x+0x98>
    4f98:	91 50       	subi	r25, 0x01	; 1
    4f9a:	a1 f0       	breq	.+40     	; 0x4fc4 <__addsf3x+0x96>
    4f9c:	ff 0f       	add	r31, r31
    4f9e:	bb 1f       	adc	r27, r27
    4fa0:	66 1f       	adc	r22, r22
    4fa2:	77 1f       	adc	r23, r23
    4fa4:	88 1f       	adc	r24, r24
    4fa6:	c2 f7       	brpl	.-16     	; 0x4f98 <__addsf3x+0x6a>
    4fa8:	0e c0       	rjmp	.+28     	; 0x4fc6 <__addsf3x+0x98>
    4faa:	ba 0f       	add	r27, r26
    4fac:	62 1f       	adc	r22, r18
    4fae:	73 1f       	adc	r23, r19
    4fb0:	84 1f       	adc	r24, r20
    4fb2:	48 f4       	brcc	.+18     	; 0x4fc6 <__addsf3x+0x98>
    4fb4:	87 95       	ror	r24
    4fb6:	77 95       	ror	r23
    4fb8:	67 95       	ror	r22
    4fba:	b7 95       	ror	r27
    4fbc:	f7 95       	ror	r31
    4fbe:	9e 3f       	cpi	r25, 0xFE	; 254
    4fc0:	08 f0       	brcs	.+2      	; 0x4fc4 <__addsf3x+0x96>
    4fc2:	b3 cf       	rjmp	.-154    	; 0x4f2a <__addsf3+0x1e>
    4fc4:	93 95       	inc	r25
    4fc6:	88 0f       	add	r24, r24
    4fc8:	08 f0       	brcs	.+2      	; 0x4fcc <__addsf3x+0x9e>
    4fca:	99 27       	eor	r25, r25
    4fcc:	ee 0f       	add	r30, r30
    4fce:	97 95       	ror	r25
    4fd0:	87 95       	ror	r24
    4fd2:	08 95       	ret

00004fd4 <__divsf3>:
    4fd4:	0c d0       	rcall	.+24     	; 0x4fee <__divsf3x>
    4fd6:	eb c0       	rjmp	.+470    	; 0x51ae <__fp_round>
    4fd8:	e3 d0       	rcall	.+454    	; 0x51a0 <__fp_pscB>
    4fda:	40 f0       	brcs	.+16     	; 0x4fec <__divsf3+0x18>
    4fdc:	da d0       	rcall	.+436    	; 0x5192 <__fp_pscA>
    4fde:	30 f0       	brcs	.+12     	; 0x4fec <__divsf3+0x18>
    4fe0:	21 f4       	brne	.+8      	; 0x4fea <__divsf3+0x16>
    4fe2:	5f 3f       	cpi	r21, 0xFF	; 255
    4fe4:	19 f0       	breq	.+6      	; 0x4fec <__divsf3+0x18>
    4fe6:	cc c0       	rjmp	.+408    	; 0x5180 <__fp_inf>
    4fe8:	51 11       	cpse	r21, r1
    4fea:	15 c1       	rjmp	.+554    	; 0x5216 <__fp_szero>
    4fec:	cf c0       	rjmp	.+414    	; 0x518c <__fp_nan>

00004fee <__divsf3x>:
    4fee:	f0 d0       	rcall	.+480    	; 0x51d0 <__fp_split3>
    4ff0:	98 f3       	brcs	.-26     	; 0x4fd8 <__divsf3+0x4>

00004ff2 <__divsf3_pse>:
    4ff2:	99 23       	and	r25, r25
    4ff4:	c9 f3       	breq	.-14     	; 0x4fe8 <__divsf3+0x14>
    4ff6:	55 23       	and	r21, r21
    4ff8:	b1 f3       	breq	.-20     	; 0x4fe6 <__divsf3+0x12>
    4ffa:	95 1b       	sub	r25, r21
    4ffc:	55 0b       	sbc	r21, r21
    4ffe:	bb 27       	eor	r27, r27
    5000:	aa 27       	eor	r26, r26
    5002:	62 17       	cp	r22, r18
    5004:	73 07       	cpc	r23, r19
    5006:	84 07       	cpc	r24, r20
    5008:	38 f0       	brcs	.+14     	; 0x5018 <__divsf3_pse+0x26>
    500a:	9f 5f       	subi	r25, 0xFF	; 255
    500c:	5f 4f       	sbci	r21, 0xFF	; 255
    500e:	22 0f       	add	r18, r18
    5010:	33 1f       	adc	r19, r19
    5012:	44 1f       	adc	r20, r20
    5014:	aa 1f       	adc	r26, r26
    5016:	a9 f3       	breq	.-22     	; 0x5002 <__divsf3_pse+0x10>
    5018:	33 d0       	rcall	.+102    	; 0x5080 <__divsf3_pse+0x8e>
    501a:	0e 2e       	mov	r0, r30
    501c:	3a f0       	brmi	.+14     	; 0x502c <__divsf3_pse+0x3a>
    501e:	e0 e8       	ldi	r30, 0x80	; 128
    5020:	30 d0       	rcall	.+96     	; 0x5082 <__divsf3_pse+0x90>
    5022:	91 50       	subi	r25, 0x01	; 1
    5024:	50 40       	sbci	r21, 0x00	; 0
    5026:	e6 95       	lsr	r30
    5028:	00 1c       	adc	r0, r0
    502a:	ca f7       	brpl	.-14     	; 0x501e <__divsf3_pse+0x2c>
    502c:	29 d0       	rcall	.+82     	; 0x5080 <__divsf3_pse+0x8e>
    502e:	fe 2f       	mov	r31, r30
    5030:	27 d0       	rcall	.+78     	; 0x5080 <__divsf3_pse+0x8e>
    5032:	66 0f       	add	r22, r22
    5034:	77 1f       	adc	r23, r23
    5036:	88 1f       	adc	r24, r24
    5038:	bb 1f       	adc	r27, r27
    503a:	26 17       	cp	r18, r22
    503c:	37 07       	cpc	r19, r23
    503e:	48 07       	cpc	r20, r24
    5040:	ab 07       	cpc	r26, r27
    5042:	b0 e8       	ldi	r27, 0x80	; 128
    5044:	09 f0       	breq	.+2      	; 0x5048 <__divsf3_pse+0x56>
    5046:	bb 0b       	sbc	r27, r27
    5048:	80 2d       	mov	r24, r0
    504a:	bf 01       	movw	r22, r30
    504c:	ff 27       	eor	r31, r31
    504e:	93 58       	subi	r25, 0x83	; 131
    5050:	5f 4f       	sbci	r21, 0xFF	; 255
    5052:	2a f0       	brmi	.+10     	; 0x505e <__divsf3_pse+0x6c>
    5054:	9e 3f       	cpi	r25, 0xFE	; 254
    5056:	51 05       	cpc	r21, r1
    5058:	68 f0       	brcs	.+26     	; 0x5074 <__divsf3_pse+0x82>
    505a:	92 c0       	rjmp	.+292    	; 0x5180 <__fp_inf>
    505c:	dc c0       	rjmp	.+440    	; 0x5216 <__fp_szero>
    505e:	5f 3f       	cpi	r21, 0xFF	; 255
    5060:	ec f3       	brlt	.-6      	; 0x505c <__divsf3_pse+0x6a>
    5062:	98 3e       	cpi	r25, 0xE8	; 232
    5064:	dc f3       	brlt	.-10     	; 0x505c <__divsf3_pse+0x6a>
    5066:	86 95       	lsr	r24
    5068:	77 95       	ror	r23
    506a:	67 95       	ror	r22
    506c:	b7 95       	ror	r27
    506e:	f7 95       	ror	r31
    5070:	9f 5f       	subi	r25, 0xFF	; 255
    5072:	c9 f7       	brne	.-14     	; 0x5066 <__divsf3_pse+0x74>
    5074:	88 0f       	add	r24, r24
    5076:	91 1d       	adc	r25, r1
    5078:	96 95       	lsr	r25
    507a:	87 95       	ror	r24
    507c:	97 f9       	bld	r25, 7
    507e:	08 95       	ret
    5080:	e1 e0       	ldi	r30, 0x01	; 1
    5082:	66 0f       	add	r22, r22
    5084:	77 1f       	adc	r23, r23
    5086:	88 1f       	adc	r24, r24
    5088:	bb 1f       	adc	r27, r27
    508a:	62 17       	cp	r22, r18
    508c:	73 07       	cpc	r23, r19
    508e:	84 07       	cpc	r24, r20
    5090:	ba 07       	cpc	r27, r26
    5092:	20 f0       	brcs	.+8      	; 0x509c <__divsf3_pse+0xaa>
    5094:	62 1b       	sub	r22, r18
    5096:	73 0b       	sbc	r23, r19
    5098:	84 0b       	sbc	r24, r20
    509a:	ba 0b       	sbc	r27, r26
    509c:	ee 1f       	adc	r30, r30
    509e:	88 f7       	brcc	.-30     	; 0x5082 <__divsf3_pse+0x90>
    50a0:	e0 95       	com	r30
    50a2:	08 95       	ret

000050a4 <__fixsfsi>:
    50a4:	04 d0       	rcall	.+8      	; 0x50ae <__fixunssfsi>
    50a6:	68 94       	set
    50a8:	b1 11       	cpse	r27, r1
    50aa:	b5 c0       	rjmp	.+362    	; 0x5216 <__fp_szero>
    50ac:	08 95       	ret

000050ae <__fixunssfsi>:
    50ae:	98 d0       	rcall	.+304    	; 0x51e0 <__fp_splitA>
    50b0:	88 f0       	brcs	.+34     	; 0x50d4 <__fixunssfsi+0x26>
    50b2:	9f 57       	subi	r25, 0x7F	; 127
    50b4:	90 f0       	brcs	.+36     	; 0x50da <__fixunssfsi+0x2c>
    50b6:	b9 2f       	mov	r27, r25
    50b8:	99 27       	eor	r25, r25
    50ba:	b7 51       	subi	r27, 0x17	; 23
    50bc:	a0 f0       	brcs	.+40     	; 0x50e6 <__fixunssfsi+0x38>
    50be:	d1 f0       	breq	.+52     	; 0x50f4 <__fixunssfsi+0x46>
    50c0:	66 0f       	add	r22, r22
    50c2:	77 1f       	adc	r23, r23
    50c4:	88 1f       	adc	r24, r24
    50c6:	99 1f       	adc	r25, r25
    50c8:	1a f0       	brmi	.+6      	; 0x50d0 <__fixunssfsi+0x22>
    50ca:	ba 95       	dec	r27
    50cc:	c9 f7       	brne	.-14     	; 0x50c0 <__fixunssfsi+0x12>
    50ce:	12 c0       	rjmp	.+36     	; 0x50f4 <__fixunssfsi+0x46>
    50d0:	b1 30       	cpi	r27, 0x01	; 1
    50d2:	81 f0       	breq	.+32     	; 0x50f4 <__fixunssfsi+0x46>
    50d4:	9f d0       	rcall	.+318    	; 0x5214 <__fp_zero>
    50d6:	b1 e0       	ldi	r27, 0x01	; 1
    50d8:	08 95       	ret
    50da:	9c c0       	rjmp	.+312    	; 0x5214 <__fp_zero>
    50dc:	67 2f       	mov	r22, r23
    50de:	78 2f       	mov	r23, r24
    50e0:	88 27       	eor	r24, r24
    50e2:	b8 5f       	subi	r27, 0xF8	; 248
    50e4:	39 f0       	breq	.+14     	; 0x50f4 <__fixunssfsi+0x46>
    50e6:	b9 3f       	cpi	r27, 0xF9	; 249
    50e8:	cc f3       	brlt	.-14     	; 0x50dc <__fixunssfsi+0x2e>
    50ea:	86 95       	lsr	r24
    50ec:	77 95       	ror	r23
    50ee:	67 95       	ror	r22
    50f0:	b3 95       	inc	r27
    50f2:	d9 f7       	brne	.-10     	; 0x50ea <__fixunssfsi+0x3c>
    50f4:	3e f4       	brtc	.+14     	; 0x5104 <__fixunssfsi+0x56>
    50f6:	90 95       	com	r25
    50f8:	80 95       	com	r24
    50fa:	70 95       	com	r23
    50fc:	61 95       	neg	r22
    50fe:	7f 4f       	sbci	r23, 0xFF	; 255
    5100:	8f 4f       	sbci	r24, 0xFF	; 255
    5102:	9f 4f       	sbci	r25, 0xFF	; 255
    5104:	08 95       	ret

00005106 <__floatunsisf>:
    5106:	e8 94       	clt
    5108:	09 c0       	rjmp	.+18     	; 0x511c <__floatsisf+0x12>

0000510a <__floatsisf>:
    510a:	97 fb       	bst	r25, 7
    510c:	3e f4       	brtc	.+14     	; 0x511c <__floatsisf+0x12>
    510e:	90 95       	com	r25
    5110:	80 95       	com	r24
    5112:	70 95       	com	r23
    5114:	61 95       	neg	r22
    5116:	7f 4f       	sbci	r23, 0xFF	; 255
    5118:	8f 4f       	sbci	r24, 0xFF	; 255
    511a:	9f 4f       	sbci	r25, 0xFF	; 255
    511c:	99 23       	and	r25, r25
    511e:	a9 f0       	breq	.+42     	; 0x514a <__floatsisf+0x40>
    5120:	f9 2f       	mov	r31, r25
    5122:	96 e9       	ldi	r25, 0x96	; 150
    5124:	bb 27       	eor	r27, r27
    5126:	93 95       	inc	r25
    5128:	f6 95       	lsr	r31
    512a:	87 95       	ror	r24
    512c:	77 95       	ror	r23
    512e:	67 95       	ror	r22
    5130:	b7 95       	ror	r27
    5132:	f1 11       	cpse	r31, r1
    5134:	f8 cf       	rjmp	.-16     	; 0x5126 <__floatsisf+0x1c>
    5136:	fa f4       	brpl	.+62     	; 0x5176 <__floatsisf+0x6c>
    5138:	bb 0f       	add	r27, r27
    513a:	11 f4       	brne	.+4      	; 0x5140 <__floatsisf+0x36>
    513c:	60 ff       	sbrs	r22, 0
    513e:	1b c0       	rjmp	.+54     	; 0x5176 <__floatsisf+0x6c>
    5140:	6f 5f       	subi	r22, 0xFF	; 255
    5142:	7f 4f       	sbci	r23, 0xFF	; 255
    5144:	8f 4f       	sbci	r24, 0xFF	; 255
    5146:	9f 4f       	sbci	r25, 0xFF	; 255
    5148:	16 c0       	rjmp	.+44     	; 0x5176 <__floatsisf+0x6c>
    514a:	88 23       	and	r24, r24
    514c:	11 f0       	breq	.+4      	; 0x5152 <__floatsisf+0x48>
    514e:	96 e9       	ldi	r25, 0x96	; 150
    5150:	11 c0       	rjmp	.+34     	; 0x5174 <__floatsisf+0x6a>
    5152:	77 23       	and	r23, r23
    5154:	21 f0       	breq	.+8      	; 0x515e <__floatsisf+0x54>
    5156:	9e e8       	ldi	r25, 0x8E	; 142
    5158:	87 2f       	mov	r24, r23
    515a:	76 2f       	mov	r23, r22
    515c:	05 c0       	rjmp	.+10     	; 0x5168 <__floatsisf+0x5e>
    515e:	66 23       	and	r22, r22
    5160:	71 f0       	breq	.+28     	; 0x517e <__floatsisf+0x74>
    5162:	96 e8       	ldi	r25, 0x86	; 134
    5164:	86 2f       	mov	r24, r22
    5166:	70 e0       	ldi	r23, 0x00	; 0
    5168:	60 e0       	ldi	r22, 0x00	; 0
    516a:	2a f0       	brmi	.+10     	; 0x5176 <__floatsisf+0x6c>
    516c:	9a 95       	dec	r25
    516e:	66 0f       	add	r22, r22
    5170:	77 1f       	adc	r23, r23
    5172:	88 1f       	adc	r24, r24
    5174:	da f7       	brpl	.-10     	; 0x516c <__floatsisf+0x62>
    5176:	88 0f       	add	r24, r24
    5178:	96 95       	lsr	r25
    517a:	87 95       	ror	r24
    517c:	97 f9       	bld	r25, 7
    517e:	08 95       	ret

00005180 <__fp_inf>:
    5180:	97 f9       	bld	r25, 7
    5182:	9f 67       	ori	r25, 0x7F	; 127
    5184:	80 e8       	ldi	r24, 0x80	; 128
    5186:	70 e0       	ldi	r23, 0x00	; 0
    5188:	60 e0       	ldi	r22, 0x00	; 0
    518a:	08 95       	ret

0000518c <__fp_nan>:
    518c:	9f ef       	ldi	r25, 0xFF	; 255
    518e:	80 ec       	ldi	r24, 0xC0	; 192
    5190:	08 95       	ret

00005192 <__fp_pscA>:
    5192:	00 24       	eor	r0, r0
    5194:	0a 94       	dec	r0
    5196:	16 16       	cp	r1, r22
    5198:	17 06       	cpc	r1, r23
    519a:	18 06       	cpc	r1, r24
    519c:	09 06       	cpc	r0, r25
    519e:	08 95       	ret

000051a0 <__fp_pscB>:
    51a0:	00 24       	eor	r0, r0
    51a2:	0a 94       	dec	r0
    51a4:	12 16       	cp	r1, r18
    51a6:	13 06       	cpc	r1, r19
    51a8:	14 06       	cpc	r1, r20
    51aa:	05 06       	cpc	r0, r21
    51ac:	08 95       	ret

000051ae <__fp_round>:
    51ae:	09 2e       	mov	r0, r25
    51b0:	03 94       	inc	r0
    51b2:	00 0c       	add	r0, r0
    51b4:	11 f4       	brne	.+4      	; 0x51ba <__fp_round+0xc>
    51b6:	88 23       	and	r24, r24
    51b8:	52 f0       	brmi	.+20     	; 0x51ce <__fp_round+0x20>
    51ba:	bb 0f       	add	r27, r27
    51bc:	40 f4       	brcc	.+16     	; 0x51ce <__fp_round+0x20>
    51be:	bf 2b       	or	r27, r31
    51c0:	11 f4       	brne	.+4      	; 0x51c6 <__fp_round+0x18>
    51c2:	60 ff       	sbrs	r22, 0
    51c4:	04 c0       	rjmp	.+8      	; 0x51ce <__fp_round+0x20>
    51c6:	6f 5f       	subi	r22, 0xFF	; 255
    51c8:	7f 4f       	sbci	r23, 0xFF	; 255
    51ca:	8f 4f       	sbci	r24, 0xFF	; 255
    51cc:	9f 4f       	sbci	r25, 0xFF	; 255
    51ce:	08 95       	ret

000051d0 <__fp_split3>:
    51d0:	57 fd       	sbrc	r21, 7
    51d2:	90 58       	subi	r25, 0x80	; 128
    51d4:	44 0f       	add	r20, r20
    51d6:	55 1f       	adc	r21, r21
    51d8:	59 f0       	breq	.+22     	; 0x51f0 <__fp_splitA+0x10>
    51da:	5f 3f       	cpi	r21, 0xFF	; 255
    51dc:	71 f0       	breq	.+28     	; 0x51fa <__fp_splitA+0x1a>
    51de:	47 95       	ror	r20

000051e0 <__fp_splitA>:
    51e0:	88 0f       	add	r24, r24
    51e2:	97 fb       	bst	r25, 7
    51e4:	99 1f       	adc	r25, r25
    51e6:	61 f0       	breq	.+24     	; 0x5200 <__fp_splitA+0x20>
    51e8:	9f 3f       	cpi	r25, 0xFF	; 255
    51ea:	79 f0       	breq	.+30     	; 0x520a <__fp_splitA+0x2a>
    51ec:	87 95       	ror	r24
    51ee:	08 95       	ret
    51f0:	12 16       	cp	r1, r18
    51f2:	13 06       	cpc	r1, r19
    51f4:	14 06       	cpc	r1, r20
    51f6:	55 1f       	adc	r21, r21
    51f8:	f2 cf       	rjmp	.-28     	; 0x51de <__fp_split3+0xe>
    51fa:	46 95       	lsr	r20
    51fc:	f1 df       	rcall	.-30     	; 0x51e0 <__fp_splitA>
    51fe:	08 c0       	rjmp	.+16     	; 0x5210 <__fp_splitA+0x30>
    5200:	16 16       	cp	r1, r22
    5202:	17 06       	cpc	r1, r23
    5204:	18 06       	cpc	r1, r24
    5206:	99 1f       	adc	r25, r25
    5208:	f1 cf       	rjmp	.-30     	; 0x51ec <__fp_splitA+0xc>
    520a:	86 95       	lsr	r24
    520c:	71 05       	cpc	r23, r1
    520e:	61 05       	cpc	r22, r1
    5210:	08 94       	sec
    5212:	08 95       	ret

00005214 <__fp_zero>:
    5214:	e8 94       	clt

00005216 <__fp_szero>:
    5216:	bb 27       	eor	r27, r27
    5218:	66 27       	eor	r22, r22
    521a:	77 27       	eor	r23, r23
    521c:	cb 01       	movw	r24, r22
    521e:	97 f9       	bld	r25, 7
    5220:	08 95       	ret

00005222 <__mulsf3>:
    5222:	0b d0       	rcall	.+22     	; 0x523a <__mulsf3x>
    5224:	c4 cf       	rjmp	.-120    	; 0x51ae <__fp_round>
    5226:	b5 df       	rcall	.-150    	; 0x5192 <__fp_pscA>
    5228:	28 f0       	brcs	.+10     	; 0x5234 <__mulsf3+0x12>
    522a:	ba df       	rcall	.-140    	; 0x51a0 <__fp_pscB>
    522c:	18 f0       	brcs	.+6      	; 0x5234 <__mulsf3+0x12>
    522e:	95 23       	and	r25, r21
    5230:	09 f0       	breq	.+2      	; 0x5234 <__mulsf3+0x12>
    5232:	a6 cf       	rjmp	.-180    	; 0x5180 <__fp_inf>
    5234:	ab cf       	rjmp	.-170    	; 0x518c <__fp_nan>
    5236:	11 24       	eor	r1, r1
    5238:	ee cf       	rjmp	.-36     	; 0x5216 <__fp_szero>

0000523a <__mulsf3x>:
    523a:	ca df       	rcall	.-108    	; 0x51d0 <__fp_split3>
    523c:	a0 f3       	brcs	.-24     	; 0x5226 <__mulsf3+0x4>

0000523e <__mulsf3_pse>:
    523e:	95 9f       	mul	r25, r21
    5240:	d1 f3       	breq	.-12     	; 0x5236 <__mulsf3+0x14>
    5242:	95 0f       	add	r25, r21
    5244:	50 e0       	ldi	r21, 0x00	; 0
    5246:	55 1f       	adc	r21, r21
    5248:	62 9f       	mul	r22, r18
    524a:	f0 01       	movw	r30, r0
    524c:	72 9f       	mul	r23, r18
    524e:	bb 27       	eor	r27, r27
    5250:	f0 0d       	add	r31, r0
    5252:	b1 1d       	adc	r27, r1
    5254:	63 9f       	mul	r22, r19
    5256:	aa 27       	eor	r26, r26
    5258:	f0 0d       	add	r31, r0
    525a:	b1 1d       	adc	r27, r1
    525c:	aa 1f       	adc	r26, r26
    525e:	64 9f       	mul	r22, r20
    5260:	66 27       	eor	r22, r22
    5262:	b0 0d       	add	r27, r0
    5264:	a1 1d       	adc	r26, r1
    5266:	66 1f       	adc	r22, r22
    5268:	82 9f       	mul	r24, r18
    526a:	22 27       	eor	r18, r18
    526c:	b0 0d       	add	r27, r0
    526e:	a1 1d       	adc	r26, r1
    5270:	62 1f       	adc	r22, r18
    5272:	73 9f       	mul	r23, r19
    5274:	b0 0d       	add	r27, r0
    5276:	a1 1d       	adc	r26, r1
    5278:	62 1f       	adc	r22, r18
    527a:	83 9f       	mul	r24, r19
    527c:	a0 0d       	add	r26, r0
    527e:	61 1d       	adc	r22, r1
    5280:	22 1f       	adc	r18, r18
    5282:	74 9f       	mul	r23, r20
    5284:	33 27       	eor	r19, r19
    5286:	a0 0d       	add	r26, r0
    5288:	61 1d       	adc	r22, r1
    528a:	23 1f       	adc	r18, r19
    528c:	84 9f       	mul	r24, r20
    528e:	60 0d       	add	r22, r0
    5290:	21 1d       	adc	r18, r1
    5292:	82 2f       	mov	r24, r18
    5294:	76 2f       	mov	r23, r22
    5296:	6a 2f       	mov	r22, r26
    5298:	11 24       	eor	r1, r1
    529a:	9f 57       	subi	r25, 0x7F	; 127
    529c:	50 40       	sbci	r21, 0x00	; 0
    529e:	8a f0       	brmi	.+34     	; 0x52c2 <__mulsf3_pse+0x84>
    52a0:	e1 f0       	breq	.+56     	; 0x52da <__mulsf3_pse+0x9c>
    52a2:	88 23       	and	r24, r24
    52a4:	4a f0       	brmi	.+18     	; 0x52b8 <__mulsf3_pse+0x7a>
    52a6:	ee 0f       	add	r30, r30
    52a8:	ff 1f       	adc	r31, r31
    52aa:	bb 1f       	adc	r27, r27
    52ac:	66 1f       	adc	r22, r22
    52ae:	77 1f       	adc	r23, r23
    52b0:	88 1f       	adc	r24, r24
    52b2:	91 50       	subi	r25, 0x01	; 1
    52b4:	50 40       	sbci	r21, 0x00	; 0
    52b6:	a9 f7       	brne	.-22     	; 0x52a2 <__mulsf3_pse+0x64>
    52b8:	9e 3f       	cpi	r25, 0xFE	; 254
    52ba:	51 05       	cpc	r21, r1
    52bc:	70 f0       	brcs	.+28     	; 0x52da <__mulsf3_pse+0x9c>
    52be:	60 cf       	rjmp	.-320    	; 0x5180 <__fp_inf>
    52c0:	aa cf       	rjmp	.-172    	; 0x5216 <__fp_szero>
    52c2:	5f 3f       	cpi	r21, 0xFF	; 255
    52c4:	ec f3       	brlt	.-6      	; 0x52c0 <__mulsf3_pse+0x82>
    52c6:	98 3e       	cpi	r25, 0xE8	; 232
    52c8:	dc f3       	brlt	.-10     	; 0x52c0 <__mulsf3_pse+0x82>
    52ca:	86 95       	lsr	r24
    52cc:	77 95       	ror	r23
    52ce:	67 95       	ror	r22
    52d0:	b7 95       	ror	r27
    52d2:	f7 95       	ror	r31
    52d4:	e7 95       	ror	r30
    52d6:	9f 5f       	subi	r25, 0xFF	; 255
    52d8:	c1 f7       	brne	.-16     	; 0x52ca <__mulsf3_pse+0x8c>
    52da:	fe 2b       	or	r31, r30
    52dc:	88 0f       	add	r24, r24
    52de:	91 1d       	adc	r25, r1
    52e0:	96 95       	lsr	r25
    52e2:	87 95       	ror	r24
    52e4:	97 f9       	bld	r25, 7
    52e6:	08 95       	ret

000052e8 <__udivmodsi4>:
    52e8:	a1 e2       	ldi	r26, 0x21	; 33
    52ea:	1a 2e       	mov	r1, r26
    52ec:	aa 1b       	sub	r26, r26
    52ee:	bb 1b       	sub	r27, r27
    52f0:	fd 01       	movw	r30, r26
    52f2:	0d c0       	rjmp	.+26     	; 0x530e <__udivmodsi4_ep>

000052f4 <__udivmodsi4_loop>:
    52f4:	aa 1f       	adc	r26, r26
    52f6:	bb 1f       	adc	r27, r27
    52f8:	ee 1f       	adc	r30, r30
    52fa:	ff 1f       	adc	r31, r31
    52fc:	a2 17       	cp	r26, r18
    52fe:	b3 07       	cpc	r27, r19
    5300:	e4 07       	cpc	r30, r20
    5302:	f5 07       	cpc	r31, r21
    5304:	20 f0       	brcs	.+8      	; 0x530e <__udivmodsi4_ep>
    5306:	a2 1b       	sub	r26, r18
    5308:	b3 0b       	sbc	r27, r19
    530a:	e4 0b       	sbc	r30, r20
    530c:	f5 0b       	sbc	r31, r21

0000530e <__udivmodsi4_ep>:
    530e:	66 1f       	adc	r22, r22
    5310:	77 1f       	adc	r23, r23
    5312:	88 1f       	adc	r24, r24
    5314:	99 1f       	adc	r25, r25
    5316:	1a 94       	dec	r1
    5318:	69 f7       	brne	.-38     	; 0x52f4 <__udivmodsi4_loop>
    531a:	60 95       	com	r22
    531c:	70 95       	com	r23
    531e:	80 95       	com	r24
    5320:	90 95       	com	r25
    5322:	9b 01       	movw	r18, r22
    5324:	ac 01       	movw	r20, r24
    5326:	bd 01       	movw	r22, r26
    5328:	cf 01       	movw	r24, r30
    532a:	08 95       	ret

0000532c <__tablejump2__>:
    532c:	ee 0f       	add	r30, r30
    532e:	ff 1f       	adc	r31, r31
    5330:	88 1f       	adc	r24, r24
    5332:	8b bf       	out	0x3b, r24	; 59
    5334:	07 90       	elpm	r0, Z+
    5336:	f6 91       	elpm	r31, Z
    5338:	e0 2d       	mov	r30, r0
    533a:	19 94       	eijmp

0000533c <calloc>:
    533c:	0f 93       	push	r16
    533e:	1f 93       	push	r17
    5340:	cf 93       	push	r28
    5342:	df 93       	push	r29
    5344:	86 9f       	mul	r24, r22
    5346:	80 01       	movw	r16, r0
    5348:	87 9f       	mul	r24, r23
    534a:	10 0d       	add	r17, r0
    534c:	96 9f       	mul	r25, r22
    534e:	10 0d       	add	r17, r0
    5350:	11 24       	eor	r1, r1
    5352:	c8 01       	movw	r24, r16
    5354:	0d d0       	rcall	.+26     	; 0x5370 <malloc>
    5356:	ec 01       	movw	r28, r24
    5358:	00 97       	sbiw	r24, 0x00	; 0
    535a:	21 f0       	breq	.+8      	; 0x5364 <calloc+0x28>
    535c:	a8 01       	movw	r20, r16
    535e:	60 e0       	ldi	r22, 0x00	; 0
    5360:	70 e0       	ldi	r23, 0x00	; 0
    5362:	34 d1       	rcall	.+616    	; 0x55cc <memset>
    5364:	ce 01       	movw	r24, r28
    5366:	df 91       	pop	r29
    5368:	cf 91       	pop	r28
    536a:	1f 91       	pop	r17
    536c:	0f 91       	pop	r16
    536e:	08 95       	ret

00005370 <malloc>:
    5370:	0f 93       	push	r16
    5372:	1f 93       	push	r17
    5374:	cf 93       	push	r28
    5376:	df 93       	push	r29
    5378:	82 30       	cpi	r24, 0x02	; 2
    537a:	91 05       	cpc	r25, r1
    537c:	10 f4       	brcc	.+4      	; 0x5382 <malloc+0x12>
    537e:	82 e0       	ldi	r24, 0x02	; 2
    5380:	90 e0       	ldi	r25, 0x00	; 0
    5382:	e0 91 e1 19 	lds	r30, 0x19E1	; 0x8019e1 <__flp>
    5386:	f0 91 e2 19 	lds	r31, 0x19E2	; 0x8019e2 <__flp+0x1>
    538a:	20 e0       	ldi	r18, 0x00	; 0
    538c:	30 e0       	ldi	r19, 0x00	; 0
    538e:	a0 e0       	ldi	r26, 0x00	; 0
    5390:	b0 e0       	ldi	r27, 0x00	; 0
    5392:	30 97       	sbiw	r30, 0x00	; 0
    5394:	19 f1       	breq	.+70     	; 0x53dc <malloc+0x6c>
    5396:	40 81       	ld	r20, Z
    5398:	51 81       	ldd	r21, Z+1	; 0x01
    539a:	02 81       	ldd	r16, Z+2	; 0x02
    539c:	13 81       	ldd	r17, Z+3	; 0x03
    539e:	48 17       	cp	r20, r24
    53a0:	59 07       	cpc	r21, r25
    53a2:	c8 f0       	brcs	.+50     	; 0x53d6 <malloc+0x66>
    53a4:	84 17       	cp	r24, r20
    53a6:	95 07       	cpc	r25, r21
    53a8:	69 f4       	brne	.+26     	; 0x53c4 <malloc+0x54>
    53aa:	10 97       	sbiw	r26, 0x00	; 0
    53ac:	31 f0       	breq	.+12     	; 0x53ba <malloc+0x4a>
    53ae:	12 96       	adiw	r26, 0x02	; 2
    53b0:	0c 93       	st	X, r16
    53b2:	12 97       	sbiw	r26, 0x02	; 2
    53b4:	13 96       	adiw	r26, 0x03	; 3
    53b6:	1c 93       	st	X, r17
    53b8:	27 c0       	rjmp	.+78     	; 0x5408 <malloc+0x98>
    53ba:	00 93 e1 19 	sts	0x19E1, r16	; 0x8019e1 <__flp>
    53be:	10 93 e2 19 	sts	0x19E2, r17	; 0x8019e2 <__flp+0x1>
    53c2:	22 c0       	rjmp	.+68     	; 0x5408 <malloc+0x98>
    53c4:	21 15       	cp	r18, r1
    53c6:	31 05       	cpc	r19, r1
    53c8:	19 f0       	breq	.+6      	; 0x53d0 <malloc+0x60>
    53ca:	42 17       	cp	r20, r18
    53cc:	53 07       	cpc	r21, r19
    53ce:	18 f4       	brcc	.+6      	; 0x53d6 <malloc+0x66>
    53d0:	9a 01       	movw	r18, r20
    53d2:	bd 01       	movw	r22, r26
    53d4:	ef 01       	movw	r28, r30
    53d6:	df 01       	movw	r26, r30
    53d8:	f8 01       	movw	r30, r16
    53da:	db cf       	rjmp	.-74     	; 0x5392 <malloc+0x22>
    53dc:	21 15       	cp	r18, r1
    53de:	31 05       	cpc	r19, r1
    53e0:	f9 f0       	breq	.+62     	; 0x5420 <malloc+0xb0>
    53e2:	28 1b       	sub	r18, r24
    53e4:	39 0b       	sbc	r19, r25
    53e6:	24 30       	cpi	r18, 0x04	; 4
    53e8:	31 05       	cpc	r19, r1
    53ea:	80 f4       	brcc	.+32     	; 0x540c <malloc+0x9c>
    53ec:	8a 81       	ldd	r24, Y+2	; 0x02
    53ee:	9b 81       	ldd	r25, Y+3	; 0x03
    53f0:	61 15       	cp	r22, r1
    53f2:	71 05       	cpc	r23, r1
    53f4:	21 f0       	breq	.+8      	; 0x53fe <malloc+0x8e>
    53f6:	fb 01       	movw	r30, r22
    53f8:	93 83       	std	Z+3, r25	; 0x03
    53fa:	82 83       	std	Z+2, r24	; 0x02
    53fc:	04 c0       	rjmp	.+8      	; 0x5406 <malloc+0x96>
    53fe:	90 93 e2 19 	sts	0x19E2, r25	; 0x8019e2 <__flp+0x1>
    5402:	80 93 e1 19 	sts	0x19E1, r24	; 0x8019e1 <__flp>
    5406:	fe 01       	movw	r30, r28
    5408:	32 96       	adiw	r30, 0x02	; 2
    540a:	44 c0       	rjmp	.+136    	; 0x5494 <malloc+0x124>
    540c:	fe 01       	movw	r30, r28
    540e:	e2 0f       	add	r30, r18
    5410:	f3 1f       	adc	r31, r19
    5412:	81 93       	st	Z+, r24
    5414:	91 93       	st	Z+, r25
    5416:	22 50       	subi	r18, 0x02	; 2
    5418:	31 09       	sbc	r19, r1
    541a:	39 83       	std	Y+1, r19	; 0x01
    541c:	28 83       	st	Y, r18
    541e:	3a c0       	rjmp	.+116    	; 0x5494 <malloc+0x124>
    5420:	20 91 df 19 	lds	r18, 0x19DF	; 0x8019df <__brkval>
    5424:	30 91 e0 19 	lds	r19, 0x19E0	; 0x8019e0 <__brkval+0x1>
    5428:	23 2b       	or	r18, r19
    542a:	41 f4       	brne	.+16     	; 0x543c <malloc+0xcc>
    542c:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    5430:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    5434:	30 93 e0 19 	sts	0x19E0, r19	; 0x8019e0 <__brkval+0x1>
    5438:	20 93 df 19 	sts	0x19DF, r18	; 0x8019df <__brkval>
    543c:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    5440:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    5444:	21 15       	cp	r18, r1
    5446:	31 05       	cpc	r19, r1
    5448:	41 f4       	brne	.+16     	; 0x545a <malloc+0xea>
    544a:	2d b7       	in	r18, 0x3d	; 61
    544c:	3e b7       	in	r19, 0x3e	; 62
    544e:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    5452:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    5456:	24 1b       	sub	r18, r20
    5458:	35 0b       	sbc	r19, r21
    545a:	e0 91 df 19 	lds	r30, 0x19DF	; 0x8019df <__brkval>
    545e:	f0 91 e0 19 	lds	r31, 0x19E0	; 0x8019e0 <__brkval+0x1>
    5462:	e2 17       	cp	r30, r18
    5464:	f3 07       	cpc	r31, r19
    5466:	a0 f4       	brcc	.+40     	; 0x5490 <malloc+0x120>
    5468:	2e 1b       	sub	r18, r30
    546a:	3f 0b       	sbc	r19, r31
    546c:	28 17       	cp	r18, r24
    546e:	39 07       	cpc	r19, r25
    5470:	78 f0       	brcs	.+30     	; 0x5490 <malloc+0x120>
    5472:	ac 01       	movw	r20, r24
    5474:	4e 5f       	subi	r20, 0xFE	; 254
    5476:	5f 4f       	sbci	r21, 0xFF	; 255
    5478:	24 17       	cp	r18, r20
    547a:	35 07       	cpc	r19, r21
    547c:	48 f0       	brcs	.+18     	; 0x5490 <malloc+0x120>
    547e:	4e 0f       	add	r20, r30
    5480:	5f 1f       	adc	r21, r31
    5482:	50 93 e0 19 	sts	0x19E0, r21	; 0x8019e0 <__brkval+0x1>
    5486:	40 93 df 19 	sts	0x19DF, r20	; 0x8019df <__brkval>
    548a:	81 93       	st	Z+, r24
    548c:	91 93       	st	Z+, r25
    548e:	02 c0       	rjmp	.+4      	; 0x5494 <malloc+0x124>
    5490:	e0 e0       	ldi	r30, 0x00	; 0
    5492:	f0 e0       	ldi	r31, 0x00	; 0
    5494:	cf 01       	movw	r24, r30
    5496:	df 91       	pop	r29
    5498:	cf 91       	pop	r28
    549a:	1f 91       	pop	r17
    549c:	0f 91       	pop	r16
    549e:	08 95       	ret

000054a0 <free>:
    54a0:	cf 93       	push	r28
    54a2:	df 93       	push	r29
    54a4:	00 97       	sbiw	r24, 0x00	; 0
    54a6:	09 f4       	brne	.+2      	; 0x54aa <free+0xa>
    54a8:	81 c0       	rjmp	.+258    	; 0x55ac <free+0x10c>
    54aa:	fc 01       	movw	r30, r24
    54ac:	32 97       	sbiw	r30, 0x02	; 2
    54ae:	13 82       	std	Z+3, r1	; 0x03
    54b0:	12 82       	std	Z+2, r1	; 0x02
    54b2:	a0 91 e1 19 	lds	r26, 0x19E1	; 0x8019e1 <__flp>
    54b6:	b0 91 e2 19 	lds	r27, 0x19E2	; 0x8019e2 <__flp+0x1>
    54ba:	10 97       	sbiw	r26, 0x00	; 0
    54bc:	81 f4       	brne	.+32     	; 0x54de <free+0x3e>
    54be:	20 81       	ld	r18, Z
    54c0:	31 81       	ldd	r19, Z+1	; 0x01
    54c2:	82 0f       	add	r24, r18
    54c4:	93 1f       	adc	r25, r19
    54c6:	20 91 df 19 	lds	r18, 0x19DF	; 0x8019df <__brkval>
    54ca:	30 91 e0 19 	lds	r19, 0x19E0	; 0x8019e0 <__brkval+0x1>
    54ce:	28 17       	cp	r18, r24
    54d0:	39 07       	cpc	r19, r25
    54d2:	51 f5       	brne	.+84     	; 0x5528 <free+0x88>
    54d4:	f0 93 e0 19 	sts	0x19E0, r31	; 0x8019e0 <__brkval+0x1>
    54d8:	e0 93 df 19 	sts	0x19DF, r30	; 0x8019df <__brkval>
    54dc:	67 c0       	rjmp	.+206    	; 0x55ac <free+0x10c>
    54de:	ed 01       	movw	r28, r26
    54e0:	20 e0       	ldi	r18, 0x00	; 0
    54e2:	30 e0       	ldi	r19, 0x00	; 0
    54e4:	ce 17       	cp	r28, r30
    54e6:	df 07       	cpc	r29, r31
    54e8:	40 f4       	brcc	.+16     	; 0x54fa <free+0x5a>
    54ea:	4a 81       	ldd	r20, Y+2	; 0x02
    54ec:	5b 81       	ldd	r21, Y+3	; 0x03
    54ee:	9e 01       	movw	r18, r28
    54f0:	41 15       	cp	r20, r1
    54f2:	51 05       	cpc	r21, r1
    54f4:	f1 f0       	breq	.+60     	; 0x5532 <free+0x92>
    54f6:	ea 01       	movw	r28, r20
    54f8:	f5 cf       	rjmp	.-22     	; 0x54e4 <free+0x44>
    54fa:	d3 83       	std	Z+3, r29	; 0x03
    54fc:	c2 83       	std	Z+2, r28	; 0x02
    54fe:	40 81       	ld	r20, Z
    5500:	51 81       	ldd	r21, Z+1	; 0x01
    5502:	84 0f       	add	r24, r20
    5504:	95 1f       	adc	r25, r21
    5506:	c8 17       	cp	r28, r24
    5508:	d9 07       	cpc	r29, r25
    550a:	59 f4       	brne	.+22     	; 0x5522 <free+0x82>
    550c:	88 81       	ld	r24, Y
    550e:	99 81       	ldd	r25, Y+1	; 0x01
    5510:	84 0f       	add	r24, r20
    5512:	95 1f       	adc	r25, r21
    5514:	02 96       	adiw	r24, 0x02	; 2
    5516:	91 83       	std	Z+1, r25	; 0x01
    5518:	80 83       	st	Z, r24
    551a:	8a 81       	ldd	r24, Y+2	; 0x02
    551c:	9b 81       	ldd	r25, Y+3	; 0x03
    551e:	93 83       	std	Z+3, r25	; 0x03
    5520:	82 83       	std	Z+2, r24	; 0x02
    5522:	21 15       	cp	r18, r1
    5524:	31 05       	cpc	r19, r1
    5526:	29 f4       	brne	.+10     	; 0x5532 <free+0x92>
    5528:	f0 93 e2 19 	sts	0x19E2, r31	; 0x8019e2 <__flp+0x1>
    552c:	e0 93 e1 19 	sts	0x19E1, r30	; 0x8019e1 <__flp>
    5530:	3d c0       	rjmp	.+122    	; 0x55ac <free+0x10c>
    5532:	e9 01       	movw	r28, r18
    5534:	fb 83       	std	Y+3, r31	; 0x03
    5536:	ea 83       	std	Y+2, r30	; 0x02
    5538:	49 91       	ld	r20, Y+
    553a:	59 91       	ld	r21, Y+
    553c:	c4 0f       	add	r28, r20
    553e:	d5 1f       	adc	r29, r21
    5540:	ec 17       	cp	r30, r28
    5542:	fd 07       	cpc	r31, r29
    5544:	61 f4       	brne	.+24     	; 0x555e <free+0xbe>
    5546:	80 81       	ld	r24, Z
    5548:	91 81       	ldd	r25, Z+1	; 0x01
    554a:	84 0f       	add	r24, r20
    554c:	95 1f       	adc	r25, r21
    554e:	02 96       	adiw	r24, 0x02	; 2
    5550:	e9 01       	movw	r28, r18
    5552:	99 83       	std	Y+1, r25	; 0x01
    5554:	88 83       	st	Y, r24
    5556:	82 81       	ldd	r24, Z+2	; 0x02
    5558:	93 81       	ldd	r25, Z+3	; 0x03
    555a:	9b 83       	std	Y+3, r25	; 0x03
    555c:	8a 83       	std	Y+2, r24	; 0x02
    555e:	e0 e0       	ldi	r30, 0x00	; 0
    5560:	f0 e0       	ldi	r31, 0x00	; 0
    5562:	12 96       	adiw	r26, 0x02	; 2
    5564:	8d 91       	ld	r24, X+
    5566:	9c 91       	ld	r25, X
    5568:	13 97       	sbiw	r26, 0x03	; 3
    556a:	00 97       	sbiw	r24, 0x00	; 0
    556c:	19 f0       	breq	.+6      	; 0x5574 <free+0xd4>
    556e:	fd 01       	movw	r30, r26
    5570:	dc 01       	movw	r26, r24
    5572:	f7 cf       	rjmp	.-18     	; 0x5562 <free+0xc2>
    5574:	8d 91       	ld	r24, X+
    5576:	9c 91       	ld	r25, X
    5578:	11 97       	sbiw	r26, 0x01	; 1
    557a:	9d 01       	movw	r18, r26
    557c:	2e 5f       	subi	r18, 0xFE	; 254
    557e:	3f 4f       	sbci	r19, 0xFF	; 255
    5580:	82 0f       	add	r24, r18
    5582:	93 1f       	adc	r25, r19
    5584:	20 91 df 19 	lds	r18, 0x19DF	; 0x8019df <__brkval>
    5588:	30 91 e0 19 	lds	r19, 0x19E0	; 0x8019e0 <__brkval+0x1>
    558c:	28 17       	cp	r18, r24
    558e:	39 07       	cpc	r19, r25
    5590:	69 f4       	brne	.+26     	; 0x55ac <free+0x10c>
    5592:	30 97       	sbiw	r30, 0x00	; 0
    5594:	29 f4       	brne	.+10     	; 0x55a0 <free+0x100>
    5596:	10 92 e2 19 	sts	0x19E2, r1	; 0x8019e2 <__flp+0x1>
    559a:	10 92 e1 19 	sts	0x19E1, r1	; 0x8019e1 <__flp>
    559e:	02 c0       	rjmp	.+4      	; 0x55a4 <free+0x104>
    55a0:	13 82       	std	Z+3, r1	; 0x03
    55a2:	12 82       	std	Z+2, r1	; 0x02
    55a4:	b0 93 e0 19 	sts	0x19E0, r27	; 0x8019e0 <__brkval+0x1>
    55a8:	a0 93 df 19 	sts	0x19DF, r26	; 0x8019df <__brkval>
    55ac:	df 91       	pop	r29
    55ae:	cf 91       	pop	r28
    55b0:	08 95       	ret

000055b2 <abort>:
    55b2:	81 e0       	ldi	r24, 0x01	; 1
    55b4:	90 e0       	ldi	r25, 0x00	; 0
    55b6:	f8 94       	cli
    55b8:	7d c3       	rjmp	.+1786   	; 0x5cb4 <_exit>

000055ba <memcpy>:
    55ba:	fb 01       	movw	r30, r22
    55bc:	dc 01       	movw	r26, r24
    55be:	02 c0       	rjmp	.+4      	; 0x55c4 <memcpy+0xa>
    55c0:	01 90       	ld	r0, Z+
    55c2:	0d 92       	st	X+, r0
    55c4:	41 50       	subi	r20, 0x01	; 1
    55c6:	50 40       	sbci	r21, 0x00	; 0
    55c8:	d8 f7       	brcc	.-10     	; 0x55c0 <memcpy+0x6>
    55ca:	08 95       	ret

000055cc <memset>:
    55cc:	dc 01       	movw	r26, r24
    55ce:	01 c0       	rjmp	.+2      	; 0x55d2 <memset+0x6>
    55d0:	6d 93       	st	X+, r22
    55d2:	41 50       	subi	r20, 0x01	; 1
    55d4:	50 40       	sbci	r21, 0x00	; 0
    55d6:	e0 f7       	brcc	.-8      	; 0x55d0 <memset+0x4>
    55d8:	08 95       	ret

000055da <strcasestr>:
    55da:	fb 01       	movw	r30, r22
    55dc:	51 91       	ld	r21, Z+
    55de:	55 23       	and	r21, r21
    55e0:	b1 f0       	breq	.+44     	; 0x560e <strcasestr+0x34>
    55e2:	bf 01       	movw	r22, r30
    55e4:	dc 01       	movw	r26, r24
    55e6:	05 2e       	mov	r0, r21
    55e8:	4d 91       	ld	r20, X+
    55ea:	44 23       	and	r20, r20
    55ec:	69 f0       	breq	.+26     	; 0x5608 <strcasestr+0x2e>
    55ee:	10 d0       	rcall	.+32     	; 0x5610 <strcasestr+0x36>
    55f0:	d9 f7       	brne	.-10     	; 0x55e8 <strcasestr+0xe>
    55f2:	cd 01       	movw	r24, r26
    55f4:	01 90       	ld	r0, Z+
    55f6:	00 20       	and	r0, r0
    55f8:	49 f0       	breq	.+18     	; 0x560c <strcasestr+0x32>
    55fa:	4d 91       	ld	r20, X+
    55fc:	41 11       	cpse	r20, r1
    55fe:	08 d0       	rcall	.+16     	; 0x5610 <strcasestr+0x36>
    5600:	c9 f3       	breq	.-14     	; 0x55f4 <strcasestr+0x1a>
    5602:	fb 01       	movw	r30, r22
    5604:	41 11       	cpse	r20, r1
    5606:	ee cf       	rjmp	.-36     	; 0x55e4 <strcasestr+0xa>
    5608:	81 e0       	ldi	r24, 0x01	; 1
    560a:	90 e0       	ldi	r25, 0x00	; 0
    560c:	01 97       	sbiw	r24, 0x01	; 1
    560e:	08 95       	ret
    5610:	40 25       	eor	r20, r0
    5612:	39 f0       	breq	.+14     	; 0x5622 <strcasestr+0x48>
    5614:	40 32       	cpi	r20, 0x20	; 32
    5616:	29 f4       	brne	.+10     	; 0x5622 <strcasestr+0x48>
    5618:	40 29       	or	r20, r0
    561a:	4b 57       	subi	r20, 0x7B	; 123
    561c:	46 5e       	subi	r20, 0xE6	; 230
    561e:	08 f0       	brcs	.+2      	; 0x5622 <strcasestr+0x48>
    5620:	18 94       	sez
    5622:	08 95       	ret

00005624 <strcat>:
    5624:	fb 01       	movw	r30, r22
    5626:	dc 01       	movw	r26, r24
    5628:	0d 90       	ld	r0, X+
    562a:	00 20       	and	r0, r0
    562c:	e9 f7       	brne	.-6      	; 0x5628 <strcat+0x4>
    562e:	11 97       	sbiw	r26, 0x01	; 1
    5630:	01 90       	ld	r0, Z+
    5632:	0d 92       	st	X+, r0
    5634:	00 20       	and	r0, r0
    5636:	e1 f7       	brne	.-8      	; 0x5630 <strcat+0xc>
    5638:	08 95       	ret

0000563a <strcpy>:
    563a:	fb 01       	movw	r30, r22
    563c:	dc 01       	movw	r26, r24
    563e:	01 90       	ld	r0, Z+
    5640:	0d 92       	st	X+, r0
    5642:	00 20       	and	r0, r0
    5644:	e1 f7       	brne	.-8      	; 0x563e <strcpy+0x4>
    5646:	08 95       	ret

00005648 <strncasecmp>:
    5648:	fb 01       	movw	r30, r22
    564a:	dc 01       	movw	r26, r24
    564c:	41 50       	subi	r20, 0x01	; 1
    564e:	50 40       	sbci	r21, 0x00	; 0
    5650:	88 f0       	brcs	.+34     	; 0x5674 <strncasecmp+0x2c>
    5652:	8d 91       	ld	r24, X+
    5654:	81 34       	cpi	r24, 0x41	; 65
    5656:	1c f0       	brlt	.+6      	; 0x565e <strncasecmp+0x16>
    5658:	8b 35       	cpi	r24, 0x5B	; 91
    565a:	0c f4       	brge	.+2      	; 0x565e <strncasecmp+0x16>
    565c:	80 5e       	subi	r24, 0xE0	; 224
    565e:	61 91       	ld	r22, Z+
    5660:	61 34       	cpi	r22, 0x41	; 65
    5662:	1c f0       	brlt	.+6      	; 0x566a <strncasecmp+0x22>
    5664:	6b 35       	cpi	r22, 0x5B	; 91
    5666:	0c f4       	brge	.+2      	; 0x566a <strncasecmp+0x22>
    5668:	60 5e       	subi	r22, 0xE0	; 224
    566a:	86 1b       	sub	r24, r22
    566c:	61 11       	cpse	r22, r1
    566e:	71 f3       	breq	.-36     	; 0x564c <strncasecmp+0x4>
    5670:	99 0b       	sbc	r25, r25
    5672:	08 95       	ret
    5674:	88 1b       	sub	r24, r24
    5676:	fc cf       	rjmp	.-8      	; 0x5670 <strncasecmp+0x28>

00005678 <printf>:
    5678:	cf 93       	push	r28
    567a:	df 93       	push	r29
    567c:	cd b7       	in	r28, 0x3d	; 61
    567e:	de b7       	in	r29, 0x3e	; 62
    5680:	ae 01       	movw	r20, r28
    5682:	4a 5f       	subi	r20, 0xFA	; 250
    5684:	5f 4f       	sbci	r21, 0xFF	; 255
    5686:	fa 01       	movw	r30, r20
    5688:	61 91       	ld	r22, Z+
    568a:	71 91       	ld	r23, Z+
    568c:	af 01       	movw	r20, r30
    568e:	80 91 e5 19 	lds	r24, 0x19E5	; 0x8019e5 <__iob+0x2>
    5692:	90 91 e6 19 	lds	r25, 0x19E6	; 0x8019e6 <__iob+0x3>
    5696:	61 d0       	rcall	.+194    	; 0x575a <vfprintf>
    5698:	df 91       	pop	r29
    569a:	cf 91       	pop	r28
    569c:	08 95       	ret

0000569e <puts>:
    569e:	0f 93       	push	r16
    56a0:	1f 93       	push	r17
    56a2:	cf 93       	push	r28
    56a4:	df 93       	push	r29
    56a6:	e0 91 e5 19 	lds	r30, 0x19E5	; 0x8019e5 <__iob+0x2>
    56aa:	f0 91 e6 19 	lds	r31, 0x19E6	; 0x8019e6 <__iob+0x3>
    56ae:	23 81       	ldd	r18, Z+3	; 0x03
    56b0:	21 ff       	sbrs	r18, 1
    56b2:	1b c0       	rjmp	.+54     	; 0x56ea <puts+0x4c>
    56b4:	8c 01       	movw	r16, r24
    56b6:	d0 e0       	ldi	r29, 0x00	; 0
    56b8:	c0 e0       	ldi	r28, 0x00	; 0
    56ba:	f8 01       	movw	r30, r16
    56bc:	81 91       	ld	r24, Z+
    56be:	8f 01       	movw	r16, r30
    56c0:	60 91 e5 19 	lds	r22, 0x19E5	; 0x8019e5 <__iob+0x2>
    56c4:	70 91 e6 19 	lds	r23, 0x19E6	; 0x8019e6 <__iob+0x3>
    56c8:	db 01       	movw	r26, r22
    56ca:	18 96       	adiw	r26, 0x08	; 8
    56cc:	ed 91       	ld	r30, X+
    56ce:	fc 91       	ld	r31, X
    56d0:	19 97       	sbiw	r26, 0x09	; 9
    56d2:	88 23       	and	r24, r24
    56d4:	31 f0       	breq	.+12     	; 0x56e2 <puts+0x44>
    56d6:	19 95       	eicall
    56d8:	89 2b       	or	r24, r25
    56da:	79 f3       	breq	.-34     	; 0x56ba <puts+0x1c>
    56dc:	df ef       	ldi	r29, 0xFF	; 255
    56de:	cf ef       	ldi	r28, 0xFF	; 255
    56e0:	ec cf       	rjmp	.-40     	; 0x56ba <puts+0x1c>
    56e2:	8a e0       	ldi	r24, 0x0A	; 10
    56e4:	19 95       	eicall
    56e6:	89 2b       	or	r24, r25
    56e8:	19 f0       	breq	.+6      	; 0x56f0 <puts+0x52>
    56ea:	8f ef       	ldi	r24, 0xFF	; 255
    56ec:	9f ef       	ldi	r25, 0xFF	; 255
    56ee:	02 c0       	rjmp	.+4      	; 0x56f4 <puts+0x56>
    56f0:	8d 2f       	mov	r24, r29
    56f2:	9c 2f       	mov	r25, r28
    56f4:	df 91       	pop	r29
    56f6:	cf 91       	pop	r28
    56f8:	1f 91       	pop	r17
    56fa:	0f 91       	pop	r16
    56fc:	08 95       	ret

000056fe <sprintf>:
    56fe:	0f 93       	push	r16
    5700:	1f 93       	push	r17
    5702:	cf 93       	push	r28
    5704:	df 93       	push	r29
    5706:	cd b7       	in	r28, 0x3d	; 61
    5708:	de b7       	in	r29, 0x3e	; 62
    570a:	2e 97       	sbiw	r28, 0x0e	; 14
    570c:	0f b6       	in	r0, 0x3f	; 63
    570e:	f8 94       	cli
    5710:	de bf       	out	0x3e, r29	; 62
    5712:	0f be       	out	0x3f, r0	; 63
    5714:	cd bf       	out	0x3d, r28	; 61
    5716:	0e 89       	ldd	r16, Y+22	; 0x16
    5718:	1f 89       	ldd	r17, Y+23	; 0x17
    571a:	86 e0       	ldi	r24, 0x06	; 6
    571c:	8c 83       	std	Y+4, r24	; 0x04
    571e:	1a 83       	std	Y+2, r17	; 0x02
    5720:	09 83       	std	Y+1, r16	; 0x01
    5722:	8f ef       	ldi	r24, 0xFF	; 255
    5724:	9f e7       	ldi	r25, 0x7F	; 127
    5726:	9e 83       	std	Y+6, r25	; 0x06
    5728:	8d 83       	std	Y+5, r24	; 0x05
    572a:	ae 01       	movw	r20, r28
    572c:	46 5e       	subi	r20, 0xE6	; 230
    572e:	5f 4f       	sbci	r21, 0xFF	; 255
    5730:	68 8d       	ldd	r22, Y+24	; 0x18
    5732:	79 8d       	ldd	r23, Y+25	; 0x19
    5734:	ce 01       	movw	r24, r28
    5736:	01 96       	adiw	r24, 0x01	; 1
    5738:	10 d0       	rcall	.+32     	; 0x575a <vfprintf>
    573a:	ef 81       	ldd	r30, Y+7	; 0x07
    573c:	f8 85       	ldd	r31, Y+8	; 0x08
    573e:	e0 0f       	add	r30, r16
    5740:	f1 1f       	adc	r31, r17
    5742:	10 82       	st	Z, r1
    5744:	2e 96       	adiw	r28, 0x0e	; 14
    5746:	0f b6       	in	r0, 0x3f	; 63
    5748:	f8 94       	cli
    574a:	de bf       	out	0x3e, r29	; 62
    574c:	0f be       	out	0x3f, r0	; 63
    574e:	cd bf       	out	0x3d, r28	; 61
    5750:	df 91       	pop	r29
    5752:	cf 91       	pop	r28
    5754:	1f 91       	pop	r17
    5756:	0f 91       	pop	r16
    5758:	08 95       	ret

0000575a <vfprintf>:
    575a:	2f 92       	push	r2
    575c:	3f 92       	push	r3
    575e:	4f 92       	push	r4
    5760:	5f 92       	push	r5
    5762:	6f 92       	push	r6
    5764:	7f 92       	push	r7
    5766:	8f 92       	push	r8
    5768:	9f 92       	push	r9
    576a:	af 92       	push	r10
    576c:	bf 92       	push	r11
    576e:	cf 92       	push	r12
    5770:	df 92       	push	r13
    5772:	ef 92       	push	r14
    5774:	ff 92       	push	r15
    5776:	0f 93       	push	r16
    5778:	1f 93       	push	r17
    577a:	cf 93       	push	r28
    577c:	df 93       	push	r29
    577e:	cd b7       	in	r28, 0x3d	; 61
    5780:	de b7       	in	r29, 0x3e	; 62
    5782:	2b 97       	sbiw	r28, 0x0b	; 11
    5784:	0f b6       	in	r0, 0x3f	; 63
    5786:	f8 94       	cli
    5788:	de bf       	out	0x3e, r29	; 62
    578a:	0f be       	out	0x3f, r0	; 63
    578c:	cd bf       	out	0x3d, r28	; 61
    578e:	6c 01       	movw	r12, r24
    5790:	7b 01       	movw	r14, r22
    5792:	8a 01       	movw	r16, r20
    5794:	fc 01       	movw	r30, r24
    5796:	17 82       	std	Z+7, r1	; 0x07
    5798:	16 82       	std	Z+6, r1	; 0x06
    579a:	83 81       	ldd	r24, Z+3	; 0x03
    579c:	81 ff       	sbrs	r24, 1
    579e:	bf c1       	rjmp	.+894    	; 0x5b1e <vfprintf+0x3c4>
    57a0:	ce 01       	movw	r24, r28
    57a2:	01 96       	adiw	r24, 0x01	; 1
    57a4:	3c 01       	movw	r6, r24
    57a6:	f6 01       	movw	r30, r12
    57a8:	93 81       	ldd	r25, Z+3	; 0x03
    57aa:	f7 01       	movw	r30, r14
    57ac:	93 fd       	sbrc	r25, 3
    57ae:	85 91       	lpm	r24, Z+
    57b0:	93 ff       	sbrs	r25, 3
    57b2:	81 91       	ld	r24, Z+
    57b4:	7f 01       	movw	r14, r30
    57b6:	88 23       	and	r24, r24
    57b8:	09 f4       	brne	.+2      	; 0x57bc <vfprintf+0x62>
    57ba:	ad c1       	rjmp	.+858    	; 0x5b16 <vfprintf+0x3bc>
    57bc:	85 32       	cpi	r24, 0x25	; 37
    57be:	39 f4       	brne	.+14     	; 0x57ce <vfprintf+0x74>
    57c0:	93 fd       	sbrc	r25, 3
    57c2:	85 91       	lpm	r24, Z+
    57c4:	93 ff       	sbrs	r25, 3
    57c6:	81 91       	ld	r24, Z+
    57c8:	7f 01       	movw	r14, r30
    57ca:	85 32       	cpi	r24, 0x25	; 37
    57cc:	21 f4       	brne	.+8      	; 0x57d6 <vfprintf+0x7c>
    57ce:	b6 01       	movw	r22, r12
    57d0:	90 e0       	ldi	r25, 0x00	; 0
    57d2:	d6 d1       	rcall	.+940    	; 0x5b80 <fputc>
    57d4:	e8 cf       	rjmp	.-48     	; 0x57a6 <vfprintf+0x4c>
    57d6:	91 2c       	mov	r9, r1
    57d8:	21 2c       	mov	r2, r1
    57da:	31 2c       	mov	r3, r1
    57dc:	ff e1       	ldi	r31, 0x1F	; 31
    57de:	f3 15       	cp	r31, r3
    57e0:	d8 f0       	brcs	.+54     	; 0x5818 <vfprintf+0xbe>
    57e2:	8b 32       	cpi	r24, 0x2B	; 43
    57e4:	79 f0       	breq	.+30     	; 0x5804 <vfprintf+0xaa>
    57e6:	38 f4       	brcc	.+14     	; 0x57f6 <vfprintf+0x9c>
    57e8:	80 32       	cpi	r24, 0x20	; 32
    57ea:	79 f0       	breq	.+30     	; 0x580a <vfprintf+0xb0>
    57ec:	83 32       	cpi	r24, 0x23	; 35
    57ee:	a1 f4       	brne	.+40     	; 0x5818 <vfprintf+0xbe>
    57f0:	23 2d       	mov	r18, r3
    57f2:	20 61       	ori	r18, 0x10	; 16
    57f4:	1d c0       	rjmp	.+58     	; 0x5830 <vfprintf+0xd6>
    57f6:	8d 32       	cpi	r24, 0x2D	; 45
    57f8:	61 f0       	breq	.+24     	; 0x5812 <vfprintf+0xb8>
    57fa:	80 33       	cpi	r24, 0x30	; 48
    57fc:	69 f4       	brne	.+26     	; 0x5818 <vfprintf+0xbe>
    57fe:	23 2d       	mov	r18, r3
    5800:	21 60       	ori	r18, 0x01	; 1
    5802:	16 c0       	rjmp	.+44     	; 0x5830 <vfprintf+0xd6>
    5804:	83 2d       	mov	r24, r3
    5806:	82 60       	ori	r24, 0x02	; 2
    5808:	38 2e       	mov	r3, r24
    580a:	e3 2d       	mov	r30, r3
    580c:	e4 60       	ori	r30, 0x04	; 4
    580e:	3e 2e       	mov	r3, r30
    5810:	2a c0       	rjmp	.+84     	; 0x5866 <vfprintf+0x10c>
    5812:	f3 2d       	mov	r31, r3
    5814:	f8 60       	ori	r31, 0x08	; 8
    5816:	1d c0       	rjmp	.+58     	; 0x5852 <vfprintf+0xf8>
    5818:	37 fc       	sbrc	r3, 7
    581a:	2d c0       	rjmp	.+90     	; 0x5876 <vfprintf+0x11c>
    581c:	20 ed       	ldi	r18, 0xD0	; 208
    581e:	28 0f       	add	r18, r24
    5820:	2a 30       	cpi	r18, 0x0A	; 10
    5822:	40 f0       	brcs	.+16     	; 0x5834 <vfprintf+0xda>
    5824:	8e 32       	cpi	r24, 0x2E	; 46
    5826:	b9 f4       	brne	.+46     	; 0x5856 <vfprintf+0xfc>
    5828:	36 fc       	sbrc	r3, 6
    582a:	75 c1       	rjmp	.+746    	; 0x5b16 <vfprintf+0x3bc>
    582c:	23 2d       	mov	r18, r3
    582e:	20 64       	ori	r18, 0x40	; 64
    5830:	32 2e       	mov	r3, r18
    5832:	19 c0       	rjmp	.+50     	; 0x5866 <vfprintf+0x10c>
    5834:	36 fe       	sbrs	r3, 6
    5836:	06 c0       	rjmp	.+12     	; 0x5844 <vfprintf+0xea>
    5838:	8a e0       	ldi	r24, 0x0A	; 10
    583a:	98 9e       	mul	r9, r24
    583c:	20 0d       	add	r18, r0
    583e:	11 24       	eor	r1, r1
    5840:	92 2e       	mov	r9, r18
    5842:	11 c0       	rjmp	.+34     	; 0x5866 <vfprintf+0x10c>
    5844:	ea e0       	ldi	r30, 0x0A	; 10
    5846:	2e 9e       	mul	r2, r30
    5848:	20 0d       	add	r18, r0
    584a:	11 24       	eor	r1, r1
    584c:	22 2e       	mov	r2, r18
    584e:	f3 2d       	mov	r31, r3
    5850:	f0 62       	ori	r31, 0x20	; 32
    5852:	3f 2e       	mov	r3, r31
    5854:	08 c0       	rjmp	.+16     	; 0x5866 <vfprintf+0x10c>
    5856:	8c 36       	cpi	r24, 0x6C	; 108
    5858:	21 f4       	brne	.+8      	; 0x5862 <vfprintf+0x108>
    585a:	83 2d       	mov	r24, r3
    585c:	80 68       	ori	r24, 0x80	; 128
    585e:	38 2e       	mov	r3, r24
    5860:	02 c0       	rjmp	.+4      	; 0x5866 <vfprintf+0x10c>
    5862:	88 36       	cpi	r24, 0x68	; 104
    5864:	41 f4       	brne	.+16     	; 0x5876 <vfprintf+0x11c>
    5866:	f7 01       	movw	r30, r14
    5868:	93 fd       	sbrc	r25, 3
    586a:	85 91       	lpm	r24, Z+
    586c:	93 ff       	sbrs	r25, 3
    586e:	81 91       	ld	r24, Z+
    5870:	7f 01       	movw	r14, r30
    5872:	81 11       	cpse	r24, r1
    5874:	b3 cf       	rjmp	.-154    	; 0x57dc <vfprintf+0x82>
    5876:	98 2f       	mov	r25, r24
    5878:	9f 7d       	andi	r25, 0xDF	; 223
    587a:	95 54       	subi	r25, 0x45	; 69
    587c:	93 30       	cpi	r25, 0x03	; 3
    587e:	28 f4       	brcc	.+10     	; 0x588a <vfprintf+0x130>
    5880:	0c 5f       	subi	r16, 0xFC	; 252
    5882:	1f 4f       	sbci	r17, 0xFF	; 255
    5884:	9f e3       	ldi	r25, 0x3F	; 63
    5886:	99 83       	std	Y+1, r25	; 0x01
    5888:	0d c0       	rjmp	.+26     	; 0x58a4 <vfprintf+0x14a>
    588a:	83 36       	cpi	r24, 0x63	; 99
    588c:	31 f0       	breq	.+12     	; 0x589a <vfprintf+0x140>
    588e:	83 37       	cpi	r24, 0x73	; 115
    5890:	71 f0       	breq	.+28     	; 0x58ae <vfprintf+0x154>
    5892:	83 35       	cpi	r24, 0x53	; 83
    5894:	09 f0       	breq	.+2      	; 0x5898 <vfprintf+0x13e>
    5896:	55 c0       	rjmp	.+170    	; 0x5942 <vfprintf+0x1e8>
    5898:	20 c0       	rjmp	.+64     	; 0x58da <vfprintf+0x180>
    589a:	f8 01       	movw	r30, r16
    589c:	80 81       	ld	r24, Z
    589e:	89 83       	std	Y+1, r24	; 0x01
    58a0:	0e 5f       	subi	r16, 0xFE	; 254
    58a2:	1f 4f       	sbci	r17, 0xFF	; 255
    58a4:	88 24       	eor	r8, r8
    58a6:	83 94       	inc	r8
    58a8:	91 2c       	mov	r9, r1
    58aa:	53 01       	movw	r10, r6
    58ac:	12 c0       	rjmp	.+36     	; 0x58d2 <vfprintf+0x178>
    58ae:	28 01       	movw	r4, r16
    58b0:	f2 e0       	ldi	r31, 0x02	; 2
    58b2:	4f 0e       	add	r4, r31
    58b4:	51 1c       	adc	r5, r1
    58b6:	f8 01       	movw	r30, r16
    58b8:	a0 80       	ld	r10, Z
    58ba:	b1 80       	ldd	r11, Z+1	; 0x01
    58bc:	36 fe       	sbrs	r3, 6
    58be:	03 c0       	rjmp	.+6      	; 0x58c6 <vfprintf+0x16c>
    58c0:	69 2d       	mov	r22, r9
    58c2:	70 e0       	ldi	r23, 0x00	; 0
    58c4:	02 c0       	rjmp	.+4      	; 0x58ca <vfprintf+0x170>
    58c6:	6f ef       	ldi	r22, 0xFF	; 255
    58c8:	7f ef       	ldi	r23, 0xFF	; 255
    58ca:	c5 01       	movw	r24, r10
    58cc:	4e d1       	rcall	.+668    	; 0x5b6a <strnlen>
    58ce:	4c 01       	movw	r8, r24
    58d0:	82 01       	movw	r16, r4
    58d2:	f3 2d       	mov	r31, r3
    58d4:	ff 77       	andi	r31, 0x7F	; 127
    58d6:	3f 2e       	mov	r3, r31
    58d8:	15 c0       	rjmp	.+42     	; 0x5904 <vfprintf+0x1aa>
    58da:	28 01       	movw	r4, r16
    58dc:	22 e0       	ldi	r18, 0x02	; 2
    58de:	42 0e       	add	r4, r18
    58e0:	51 1c       	adc	r5, r1
    58e2:	f8 01       	movw	r30, r16
    58e4:	a0 80       	ld	r10, Z
    58e6:	b1 80       	ldd	r11, Z+1	; 0x01
    58e8:	36 fe       	sbrs	r3, 6
    58ea:	03 c0       	rjmp	.+6      	; 0x58f2 <vfprintf+0x198>
    58ec:	69 2d       	mov	r22, r9
    58ee:	70 e0       	ldi	r23, 0x00	; 0
    58f0:	02 c0       	rjmp	.+4      	; 0x58f6 <vfprintf+0x19c>
    58f2:	6f ef       	ldi	r22, 0xFF	; 255
    58f4:	7f ef       	ldi	r23, 0xFF	; 255
    58f6:	c5 01       	movw	r24, r10
    58f8:	2d d1       	rcall	.+602    	; 0x5b54 <strnlen_P>
    58fa:	4c 01       	movw	r8, r24
    58fc:	f3 2d       	mov	r31, r3
    58fe:	f0 68       	ori	r31, 0x80	; 128
    5900:	3f 2e       	mov	r3, r31
    5902:	82 01       	movw	r16, r4
    5904:	33 fc       	sbrc	r3, 3
    5906:	19 c0       	rjmp	.+50     	; 0x593a <vfprintf+0x1e0>
    5908:	82 2d       	mov	r24, r2
    590a:	90 e0       	ldi	r25, 0x00	; 0
    590c:	88 16       	cp	r8, r24
    590e:	99 06       	cpc	r9, r25
    5910:	a0 f4       	brcc	.+40     	; 0x593a <vfprintf+0x1e0>
    5912:	b6 01       	movw	r22, r12
    5914:	80 e2       	ldi	r24, 0x20	; 32
    5916:	90 e0       	ldi	r25, 0x00	; 0
    5918:	33 d1       	rcall	.+614    	; 0x5b80 <fputc>
    591a:	2a 94       	dec	r2
    591c:	f5 cf       	rjmp	.-22     	; 0x5908 <vfprintf+0x1ae>
    591e:	f5 01       	movw	r30, r10
    5920:	37 fc       	sbrc	r3, 7
    5922:	85 91       	lpm	r24, Z+
    5924:	37 fe       	sbrs	r3, 7
    5926:	81 91       	ld	r24, Z+
    5928:	5f 01       	movw	r10, r30
    592a:	b6 01       	movw	r22, r12
    592c:	90 e0       	ldi	r25, 0x00	; 0
    592e:	28 d1       	rcall	.+592    	; 0x5b80 <fputc>
    5930:	21 10       	cpse	r2, r1
    5932:	2a 94       	dec	r2
    5934:	21 e0       	ldi	r18, 0x01	; 1
    5936:	82 1a       	sub	r8, r18
    5938:	91 08       	sbc	r9, r1
    593a:	81 14       	cp	r8, r1
    593c:	91 04       	cpc	r9, r1
    593e:	79 f7       	brne	.-34     	; 0x591e <vfprintf+0x1c4>
    5940:	e1 c0       	rjmp	.+450    	; 0x5b04 <vfprintf+0x3aa>
    5942:	84 36       	cpi	r24, 0x64	; 100
    5944:	11 f0       	breq	.+4      	; 0x594a <vfprintf+0x1f0>
    5946:	89 36       	cpi	r24, 0x69	; 105
    5948:	39 f5       	brne	.+78     	; 0x5998 <vfprintf+0x23e>
    594a:	f8 01       	movw	r30, r16
    594c:	37 fe       	sbrs	r3, 7
    594e:	07 c0       	rjmp	.+14     	; 0x595e <vfprintf+0x204>
    5950:	60 81       	ld	r22, Z
    5952:	71 81       	ldd	r23, Z+1	; 0x01
    5954:	82 81       	ldd	r24, Z+2	; 0x02
    5956:	93 81       	ldd	r25, Z+3	; 0x03
    5958:	0c 5f       	subi	r16, 0xFC	; 252
    595a:	1f 4f       	sbci	r17, 0xFF	; 255
    595c:	08 c0       	rjmp	.+16     	; 0x596e <vfprintf+0x214>
    595e:	60 81       	ld	r22, Z
    5960:	71 81       	ldd	r23, Z+1	; 0x01
    5962:	07 2e       	mov	r0, r23
    5964:	00 0c       	add	r0, r0
    5966:	88 0b       	sbc	r24, r24
    5968:	99 0b       	sbc	r25, r25
    596a:	0e 5f       	subi	r16, 0xFE	; 254
    596c:	1f 4f       	sbci	r17, 0xFF	; 255
    596e:	f3 2d       	mov	r31, r3
    5970:	ff 76       	andi	r31, 0x6F	; 111
    5972:	3f 2e       	mov	r3, r31
    5974:	97 ff       	sbrs	r25, 7
    5976:	09 c0       	rjmp	.+18     	; 0x598a <vfprintf+0x230>
    5978:	90 95       	com	r25
    597a:	80 95       	com	r24
    597c:	70 95       	com	r23
    597e:	61 95       	neg	r22
    5980:	7f 4f       	sbci	r23, 0xFF	; 255
    5982:	8f 4f       	sbci	r24, 0xFF	; 255
    5984:	9f 4f       	sbci	r25, 0xFF	; 255
    5986:	f0 68       	ori	r31, 0x80	; 128
    5988:	3f 2e       	mov	r3, r31
    598a:	2a e0       	ldi	r18, 0x0A	; 10
    598c:	30 e0       	ldi	r19, 0x00	; 0
    598e:	a3 01       	movw	r20, r6
    5990:	33 d1       	rcall	.+614    	; 0x5bf8 <__ultoa_invert>
    5992:	88 2e       	mov	r8, r24
    5994:	86 18       	sub	r8, r6
    5996:	44 c0       	rjmp	.+136    	; 0x5a20 <vfprintf+0x2c6>
    5998:	85 37       	cpi	r24, 0x75	; 117
    599a:	31 f4       	brne	.+12     	; 0x59a8 <vfprintf+0x24e>
    599c:	23 2d       	mov	r18, r3
    599e:	2f 7e       	andi	r18, 0xEF	; 239
    59a0:	b2 2e       	mov	r11, r18
    59a2:	2a e0       	ldi	r18, 0x0A	; 10
    59a4:	30 e0       	ldi	r19, 0x00	; 0
    59a6:	25 c0       	rjmp	.+74     	; 0x59f2 <vfprintf+0x298>
    59a8:	93 2d       	mov	r25, r3
    59aa:	99 7f       	andi	r25, 0xF9	; 249
    59ac:	b9 2e       	mov	r11, r25
    59ae:	8f 36       	cpi	r24, 0x6F	; 111
    59b0:	c1 f0       	breq	.+48     	; 0x59e2 <vfprintf+0x288>
    59b2:	18 f4       	brcc	.+6      	; 0x59ba <vfprintf+0x260>
    59b4:	88 35       	cpi	r24, 0x58	; 88
    59b6:	79 f0       	breq	.+30     	; 0x59d6 <vfprintf+0x27c>
    59b8:	ae c0       	rjmp	.+348    	; 0x5b16 <vfprintf+0x3bc>
    59ba:	80 37       	cpi	r24, 0x70	; 112
    59bc:	19 f0       	breq	.+6      	; 0x59c4 <vfprintf+0x26a>
    59be:	88 37       	cpi	r24, 0x78	; 120
    59c0:	21 f0       	breq	.+8      	; 0x59ca <vfprintf+0x270>
    59c2:	a9 c0       	rjmp	.+338    	; 0x5b16 <vfprintf+0x3bc>
    59c4:	e9 2f       	mov	r30, r25
    59c6:	e0 61       	ori	r30, 0x10	; 16
    59c8:	be 2e       	mov	r11, r30
    59ca:	b4 fe       	sbrs	r11, 4
    59cc:	0d c0       	rjmp	.+26     	; 0x59e8 <vfprintf+0x28e>
    59ce:	fb 2d       	mov	r31, r11
    59d0:	f4 60       	ori	r31, 0x04	; 4
    59d2:	bf 2e       	mov	r11, r31
    59d4:	09 c0       	rjmp	.+18     	; 0x59e8 <vfprintf+0x28e>
    59d6:	34 fe       	sbrs	r3, 4
    59d8:	0a c0       	rjmp	.+20     	; 0x59ee <vfprintf+0x294>
    59da:	29 2f       	mov	r18, r25
    59dc:	26 60       	ori	r18, 0x06	; 6
    59de:	b2 2e       	mov	r11, r18
    59e0:	06 c0       	rjmp	.+12     	; 0x59ee <vfprintf+0x294>
    59e2:	28 e0       	ldi	r18, 0x08	; 8
    59e4:	30 e0       	ldi	r19, 0x00	; 0
    59e6:	05 c0       	rjmp	.+10     	; 0x59f2 <vfprintf+0x298>
    59e8:	20 e1       	ldi	r18, 0x10	; 16
    59ea:	30 e0       	ldi	r19, 0x00	; 0
    59ec:	02 c0       	rjmp	.+4      	; 0x59f2 <vfprintf+0x298>
    59ee:	20 e1       	ldi	r18, 0x10	; 16
    59f0:	32 e0       	ldi	r19, 0x02	; 2
    59f2:	f8 01       	movw	r30, r16
    59f4:	b7 fe       	sbrs	r11, 7
    59f6:	07 c0       	rjmp	.+14     	; 0x5a06 <vfprintf+0x2ac>
    59f8:	60 81       	ld	r22, Z
    59fa:	71 81       	ldd	r23, Z+1	; 0x01
    59fc:	82 81       	ldd	r24, Z+2	; 0x02
    59fe:	93 81       	ldd	r25, Z+3	; 0x03
    5a00:	0c 5f       	subi	r16, 0xFC	; 252
    5a02:	1f 4f       	sbci	r17, 0xFF	; 255
    5a04:	06 c0       	rjmp	.+12     	; 0x5a12 <vfprintf+0x2b8>
    5a06:	60 81       	ld	r22, Z
    5a08:	71 81       	ldd	r23, Z+1	; 0x01
    5a0a:	80 e0       	ldi	r24, 0x00	; 0
    5a0c:	90 e0       	ldi	r25, 0x00	; 0
    5a0e:	0e 5f       	subi	r16, 0xFE	; 254
    5a10:	1f 4f       	sbci	r17, 0xFF	; 255
    5a12:	a3 01       	movw	r20, r6
    5a14:	f1 d0       	rcall	.+482    	; 0x5bf8 <__ultoa_invert>
    5a16:	88 2e       	mov	r8, r24
    5a18:	86 18       	sub	r8, r6
    5a1a:	fb 2d       	mov	r31, r11
    5a1c:	ff 77       	andi	r31, 0x7F	; 127
    5a1e:	3f 2e       	mov	r3, r31
    5a20:	36 fe       	sbrs	r3, 6
    5a22:	0d c0       	rjmp	.+26     	; 0x5a3e <vfprintf+0x2e4>
    5a24:	23 2d       	mov	r18, r3
    5a26:	2e 7f       	andi	r18, 0xFE	; 254
    5a28:	a2 2e       	mov	r10, r18
    5a2a:	89 14       	cp	r8, r9
    5a2c:	58 f4       	brcc	.+22     	; 0x5a44 <vfprintf+0x2ea>
    5a2e:	34 fe       	sbrs	r3, 4
    5a30:	0b c0       	rjmp	.+22     	; 0x5a48 <vfprintf+0x2ee>
    5a32:	32 fc       	sbrc	r3, 2
    5a34:	09 c0       	rjmp	.+18     	; 0x5a48 <vfprintf+0x2ee>
    5a36:	83 2d       	mov	r24, r3
    5a38:	8e 7e       	andi	r24, 0xEE	; 238
    5a3a:	a8 2e       	mov	r10, r24
    5a3c:	05 c0       	rjmp	.+10     	; 0x5a48 <vfprintf+0x2ee>
    5a3e:	b8 2c       	mov	r11, r8
    5a40:	a3 2c       	mov	r10, r3
    5a42:	03 c0       	rjmp	.+6      	; 0x5a4a <vfprintf+0x2f0>
    5a44:	b8 2c       	mov	r11, r8
    5a46:	01 c0       	rjmp	.+2      	; 0x5a4a <vfprintf+0x2f0>
    5a48:	b9 2c       	mov	r11, r9
    5a4a:	a4 fe       	sbrs	r10, 4
    5a4c:	0f c0       	rjmp	.+30     	; 0x5a6c <vfprintf+0x312>
    5a4e:	fe 01       	movw	r30, r28
    5a50:	e8 0d       	add	r30, r8
    5a52:	f1 1d       	adc	r31, r1
    5a54:	80 81       	ld	r24, Z
    5a56:	80 33       	cpi	r24, 0x30	; 48
    5a58:	21 f4       	brne	.+8      	; 0x5a62 <vfprintf+0x308>
    5a5a:	9a 2d       	mov	r25, r10
    5a5c:	99 7e       	andi	r25, 0xE9	; 233
    5a5e:	a9 2e       	mov	r10, r25
    5a60:	09 c0       	rjmp	.+18     	; 0x5a74 <vfprintf+0x31a>
    5a62:	a2 fe       	sbrs	r10, 2
    5a64:	06 c0       	rjmp	.+12     	; 0x5a72 <vfprintf+0x318>
    5a66:	b3 94       	inc	r11
    5a68:	b3 94       	inc	r11
    5a6a:	04 c0       	rjmp	.+8      	; 0x5a74 <vfprintf+0x31a>
    5a6c:	8a 2d       	mov	r24, r10
    5a6e:	86 78       	andi	r24, 0x86	; 134
    5a70:	09 f0       	breq	.+2      	; 0x5a74 <vfprintf+0x31a>
    5a72:	b3 94       	inc	r11
    5a74:	a3 fc       	sbrc	r10, 3
    5a76:	10 c0       	rjmp	.+32     	; 0x5a98 <vfprintf+0x33e>
    5a78:	a0 fe       	sbrs	r10, 0
    5a7a:	06 c0       	rjmp	.+12     	; 0x5a88 <vfprintf+0x32e>
    5a7c:	b2 14       	cp	r11, r2
    5a7e:	80 f4       	brcc	.+32     	; 0x5aa0 <vfprintf+0x346>
    5a80:	28 0c       	add	r2, r8
    5a82:	92 2c       	mov	r9, r2
    5a84:	9b 18       	sub	r9, r11
    5a86:	0d c0       	rjmp	.+26     	; 0x5aa2 <vfprintf+0x348>
    5a88:	b2 14       	cp	r11, r2
    5a8a:	58 f4       	brcc	.+22     	; 0x5aa2 <vfprintf+0x348>
    5a8c:	b6 01       	movw	r22, r12
    5a8e:	80 e2       	ldi	r24, 0x20	; 32
    5a90:	90 e0       	ldi	r25, 0x00	; 0
    5a92:	76 d0       	rcall	.+236    	; 0x5b80 <fputc>
    5a94:	b3 94       	inc	r11
    5a96:	f8 cf       	rjmp	.-16     	; 0x5a88 <vfprintf+0x32e>
    5a98:	b2 14       	cp	r11, r2
    5a9a:	18 f4       	brcc	.+6      	; 0x5aa2 <vfprintf+0x348>
    5a9c:	2b 18       	sub	r2, r11
    5a9e:	02 c0       	rjmp	.+4      	; 0x5aa4 <vfprintf+0x34a>
    5aa0:	98 2c       	mov	r9, r8
    5aa2:	21 2c       	mov	r2, r1
    5aa4:	a4 fe       	sbrs	r10, 4
    5aa6:	0f c0       	rjmp	.+30     	; 0x5ac6 <vfprintf+0x36c>
    5aa8:	b6 01       	movw	r22, r12
    5aaa:	80 e3       	ldi	r24, 0x30	; 48
    5aac:	90 e0       	ldi	r25, 0x00	; 0
    5aae:	68 d0       	rcall	.+208    	; 0x5b80 <fputc>
    5ab0:	a2 fe       	sbrs	r10, 2
    5ab2:	16 c0       	rjmp	.+44     	; 0x5ae0 <vfprintf+0x386>
    5ab4:	a1 fc       	sbrc	r10, 1
    5ab6:	03 c0       	rjmp	.+6      	; 0x5abe <vfprintf+0x364>
    5ab8:	88 e7       	ldi	r24, 0x78	; 120
    5aba:	90 e0       	ldi	r25, 0x00	; 0
    5abc:	02 c0       	rjmp	.+4      	; 0x5ac2 <vfprintf+0x368>
    5abe:	88 e5       	ldi	r24, 0x58	; 88
    5ac0:	90 e0       	ldi	r25, 0x00	; 0
    5ac2:	b6 01       	movw	r22, r12
    5ac4:	0c c0       	rjmp	.+24     	; 0x5ade <vfprintf+0x384>
    5ac6:	8a 2d       	mov	r24, r10
    5ac8:	86 78       	andi	r24, 0x86	; 134
    5aca:	51 f0       	breq	.+20     	; 0x5ae0 <vfprintf+0x386>
    5acc:	a1 fe       	sbrs	r10, 1
    5ace:	02 c0       	rjmp	.+4      	; 0x5ad4 <vfprintf+0x37a>
    5ad0:	8b e2       	ldi	r24, 0x2B	; 43
    5ad2:	01 c0       	rjmp	.+2      	; 0x5ad6 <vfprintf+0x37c>
    5ad4:	80 e2       	ldi	r24, 0x20	; 32
    5ad6:	a7 fc       	sbrc	r10, 7
    5ad8:	8d e2       	ldi	r24, 0x2D	; 45
    5ada:	b6 01       	movw	r22, r12
    5adc:	90 e0       	ldi	r25, 0x00	; 0
    5ade:	50 d0       	rcall	.+160    	; 0x5b80 <fputc>
    5ae0:	89 14       	cp	r8, r9
    5ae2:	30 f4       	brcc	.+12     	; 0x5af0 <vfprintf+0x396>
    5ae4:	b6 01       	movw	r22, r12
    5ae6:	80 e3       	ldi	r24, 0x30	; 48
    5ae8:	90 e0       	ldi	r25, 0x00	; 0
    5aea:	4a d0       	rcall	.+148    	; 0x5b80 <fputc>
    5aec:	9a 94       	dec	r9
    5aee:	f8 cf       	rjmp	.-16     	; 0x5ae0 <vfprintf+0x386>
    5af0:	8a 94       	dec	r8
    5af2:	f3 01       	movw	r30, r6
    5af4:	e8 0d       	add	r30, r8
    5af6:	f1 1d       	adc	r31, r1
    5af8:	80 81       	ld	r24, Z
    5afa:	b6 01       	movw	r22, r12
    5afc:	90 e0       	ldi	r25, 0x00	; 0
    5afe:	40 d0       	rcall	.+128    	; 0x5b80 <fputc>
    5b00:	81 10       	cpse	r8, r1
    5b02:	f6 cf       	rjmp	.-20     	; 0x5af0 <vfprintf+0x396>
    5b04:	22 20       	and	r2, r2
    5b06:	09 f4       	brne	.+2      	; 0x5b0a <vfprintf+0x3b0>
    5b08:	4e ce       	rjmp	.-868    	; 0x57a6 <vfprintf+0x4c>
    5b0a:	b6 01       	movw	r22, r12
    5b0c:	80 e2       	ldi	r24, 0x20	; 32
    5b0e:	90 e0       	ldi	r25, 0x00	; 0
    5b10:	37 d0       	rcall	.+110    	; 0x5b80 <fputc>
    5b12:	2a 94       	dec	r2
    5b14:	f7 cf       	rjmp	.-18     	; 0x5b04 <vfprintf+0x3aa>
    5b16:	f6 01       	movw	r30, r12
    5b18:	86 81       	ldd	r24, Z+6	; 0x06
    5b1a:	97 81       	ldd	r25, Z+7	; 0x07
    5b1c:	02 c0       	rjmp	.+4      	; 0x5b22 <vfprintf+0x3c8>
    5b1e:	8f ef       	ldi	r24, 0xFF	; 255
    5b20:	9f ef       	ldi	r25, 0xFF	; 255
    5b22:	2b 96       	adiw	r28, 0x0b	; 11
    5b24:	0f b6       	in	r0, 0x3f	; 63
    5b26:	f8 94       	cli
    5b28:	de bf       	out	0x3e, r29	; 62
    5b2a:	0f be       	out	0x3f, r0	; 63
    5b2c:	cd bf       	out	0x3d, r28	; 61
    5b2e:	df 91       	pop	r29
    5b30:	cf 91       	pop	r28
    5b32:	1f 91       	pop	r17
    5b34:	0f 91       	pop	r16
    5b36:	ff 90       	pop	r15
    5b38:	ef 90       	pop	r14
    5b3a:	df 90       	pop	r13
    5b3c:	cf 90       	pop	r12
    5b3e:	bf 90       	pop	r11
    5b40:	af 90       	pop	r10
    5b42:	9f 90       	pop	r9
    5b44:	8f 90       	pop	r8
    5b46:	7f 90       	pop	r7
    5b48:	6f 90       	pop	r6
    5b4a:	5f 90       	pop	r5
    5b4c:	4f 90       	pop	r4
    5b4e:	3f 90       	pop	r3
    5b50:	2f 90       	pop	r2
    5b52:	08 95       	ret

00005b54 <strnlen_P>:
    5b54:	fc 01       	movw	r30, r24
    5b56:	05 90       	lpm	r0, Z+
    5b58:	61 50       	subi	r22, 0x01	; 1
    5b5a:	70 40       	sbci	r23, 0x00	; 0
    5b5c:	01 10       	cpse	r0, r1
    5b5e:	d8 f7       	brcc	.-10     	; 0x5b56 <strnlen_P+0x2>
    5b60:	80 95       	com	r24
    5b62:	90 95       	com	r25
    5b64:	8e 0f       	add	r24, r30
    5b66:	9f 1f       	adc	r25, r31
    5b68:	08 95       	ret

00005b6a <strnlen>:
    5b6a:	fc 01       	movw	r30, r24
    5b6c:	61 50       	subi	r22, 0x01	; 1
    5b6e:	70 40       	sbci	r23, 0x00	; 0
    5b70:	01 90       	ld	r0, Z+
    5b72:	01 10       	cpse	r0, r1
    5b74:	d8 f7       	brcc	.-10     	; 0x5b6c <strnlen+0x2>
    5b76:	80 95       	com	r24
    5b78:	90 95       	com	r25
    5b7a:	8e 0f       	add	r24, r30
    5b7c:	9f 1f       	adc	r25, r31
    5b7e:	08 95       	ret

00005b80 <fputc>:
    5b80:	0f 93       	push	r16
    5b82:	1f 93       	push	r17
    5b84:	cf 93       	push	r28
    5b86:	df 93       	push	r29
    5b88:	fb 01       	movw	r30, r22
    5b8a:	23 81       	ldd	r18, Z+3	; 0x03
    5b8c:	21 fd       	sbrc	r18, 1
    5b8e:	03 c0       	rjmp	.+6      	; 0x5b96 <fputc+0x16>
    5b90:	8f ef       	ldi	r24, 0xFF	; 255
    5b92:	9f ef       	ldi	r25, 0xFF	; 255
    5b94:	2c c0       	rjmp	.+88     	; 0x5bee <fputc+0x6e>
    5b96:	22 ff       	sbrs	r18, 2
    5b98:	16 c0       	rjmp	.+44     	; 0x5bc6 <fputc+0x46>
    5b9a:	46 81       	ldd	r20, Z+6	; 0x06
    5b9c:	57 81       	ldd	r21, Z+7	; 0x07
    5b9e:	24 81       	ldd	r18, Z+4	; 0x04
    5ba0:	35 81       	ldd	r19, Z+5	; 0x05
    5ba2:	42 17       	cp	r20, r18
    5ba4:	53 07       	cpc	r21, r19
    5ba6:	44 f4       	brge	.+16     	; 0x5bb8 <fputc+0x38>
    5ba8:	a0 81       	ld	r26, Z
    5baa:	b1 81       	ldd	r27, Z+1	; 0x01
    5bac:	9d 01       	movw	r18, r26
    5bae:	2f 5f       	subi	r18, 0xFF	; 255
    5bb0:	3f 4f       	sbci	r19, 0xFF	; 255
    5bb2:	31 83       	std	Z+1, r19	; 0x01
    5bb4:	20 83       	st	Z, r18
    5bb6:	8c 93       	st	X, r24
    5bb8:	26 81       	ldd	r18, Z+6	; 0x06
    5bba:	37 81       	ldd	r19, Z+7	; 0x07
    5bbc:	2f 5f       	subi	r18, 0xFF	; 255
    5bbe:	3f 4f       	sbci	r19, 0xFF	; 255
    5bc0:	37 83       	std	Z+7, r19	; 0x07
    5bc2:	26 83       	std	Z+6, r18	; 0x06
    5bc4:	14 c0       	rjmp	.+40     	; 0x5bee <fputc+0x6e>
    5bc6:	8b 01       	movw	r16, r22
    5bc8:	ec 01       	movw	r28, r24
    5bca:	fb 01       	movw	r30, r22
    5bcc:	00 84       	ldd	r0, Z+8	; 0x08
    5bce:	f1 85       	ldd	r31, Z+9	; 0x09
    5bd0:	e0 2d       	mov	r30, r0
    5bd2:	19 95       	eicall
    5bd4:	89 2b       	or	r24, r25
    5bd6:	e1 f6       	brne	.-72     	; 0x5b90 <fputc+0x10>
    5bd8:	d8 01       	movw	r26, r16
    5bda:	16 96       	adiw	r26, 0x06	; 6
    5bdc:	8d 91       	ld	r24, X+
    5bde:	9c 91       	ld	r25, X
    5be0:	17 97       	sbiw	r26, 0x07	; 7
    5be2:	01 96       	adiw	r24, 0x01	; 1
    5be4:	17 96       	adiw	r26, 0x07	; 7
    5be6:	9c 93       	st	X, r25
    5be8:	8e 93       	st	-X, r24
    5bea:	16 97       	sbiw	r26, 0x06	; 6
    5bec:	ce 01       	movw	r24, r28
    5bee:	df 91       	pop	r29
    5bf0:	cf 91       	pop	r28
    5bf2:	1f 91       	pop	r17
    5bf4:	0f 91       	pop	r16
    5bf6:	08 95       	ret

00005bf8 <__ultoa_invert>:
    5bf8:	fa 01       	movw	r30, r20
    5bfa:	aa 27       	eor	r26, r26
    5bfc:	28 30       	cpi	r18, 0x08	; 8
    5bfe:	51 f1       	breq	.+84     	; 0x5c54 <__ultoa_invert+0x5c>
    5c00:	20 31       	cpi	r18, 0x10	; 16
    5c02:	81 f1       	breq	.+96     	; 0x5c64 <__ultoa_invert+0x6c>
    5c04:	e8 94       	clt
    5c06:	6f 93       	push	r22
    5c08:	6e 7f       	andi	r22, 0xFE	; 254
    5c0a:	6e 5f       	subi	r22, 0xFE	; 254
    5c0c:	7f 4f       	sbci	r23, 0xFF	; 255
    5c0e:	8f 4f       	sbci	r24, 0xFF	; 255
    5c10:	9f 4f       	sbci	r25, 0xFF	; 255
    5c12:	af 4f       	sbci	r26, 0xFF	; 255
    5c14:	b1 e0       	ldi	r27, 0x01	; 1
    5c16:	3e d0       	rcall	.+124    	; 0x5c94 <__ultoa_invert+0x9c>
    5c18:	b4 e0       	ldi	r27, 0x04	; 4
    5c1a:	3c d0       	rcall	.+120    	; 0x5c94 <__ultoa_invert+0x9c>
    5c1c:	67 0f       	add	r22, r23
    5c1e:	78 1f       	adc	r23, r24
    5c20:	89 1f       	adc	r24, r25
    5c22:	9a 1f       	adc	r25, r26
    5c24:	a1 1d       	adc	r26, r1
    5c26:	68 0f       	add	r22, r24
    5c28:	79 1f       	adc	r23, r25
    5c2a:	8a 1f       	adc	r24, r26
    5c2c:	91 1d       	adc	r25, r1
    5c2e:	a1 1d       	adc	r26, r1
    5c30:	6a 0f       	add	r22, r26
    5c32:	71 1d       	adc	r23, r1
    5c34:	81 1d       	adc	r24, r1
    5c36:	91 1d       	adc	r25, r1
    5c38:	a1 1d       	adc	r26, r1
    5c3a:	20 d0       	rcall	.+64     	; 0x5c7c <__ultoa_invert+0x84>
    5c3c:	09 f4       	brne	.+2      	; 0x5c40 <__ultoa_invert+0x48>
    5c3e:	68 94       	set
    5c40:	3f 91       	pop	r19
    5c42:	2a e0       	ldi	r18, 0x0A	; 10
    5c44:	26 9f       	mul	r18, r22
    5c46:	11 24       	eor	r1, r1
    5c48:	30 19       	sub	r19, r0
    5c4a:	30 5d       	subi	r19, 0xD0	; 208
    5c4c:	31 93       	st	Z+, r19
    5c4e:	de f6       	brtc	.-74     	; 0x5c06 <__ultoa_invert+0xe>
    5c50:	cf 01       	movw	r24, r30
    5c52:	08 95       	ret
    5c54:	46 2f       	mov	r20, r22
    5c56:	47 70       	andi	r20, 0x07	; 7
    5c58:	40 5d       	subi	r20, 0xD0	; 208
    5c5a:	41 93       	st	Z+, r20
    5c5c:	b3 e0       	ldi	r27, 0x03	; 3
    5c5e:	0f d0       	rcall	.+30     	; 0x5c7e <__ultoa_invert+0x86>
    5c60:	c9 f7       	brne	.-14     	; 0x5c54 <__ultoa_invert+0x5c>
    5c62:	f6 cf       	rjmp	.-20     	; 0x5c50 <__ultoa_invert+0x58>
    5c64:	46 2f       	mov	r20, r22
    5c66:	4f 70       	andi	r20, 0x0F	; 15
    5c68:	40 5d       	subi	r20, 0xD0	; 208
    5c6a:	4a 33       	cpi	r20, 0x3A	; 58
    5c6c:	18 f0       	brcs	.+6      	; 0x5c74 <__ultoa_invert+0x7c>
    5c6e:	49 5d       	subi	r20, 0xD9	; 217
    5c70:	31 fd       	sbrc	r19, 1
    5c72:	40 52       	subi	r20, 0x20	; 32
    5c74:	41 93       	st	Z+, r20
    5c76:	02 d0       	rcall	.+4      	; 0x5c7c <__ultoa_invert+0x84>
    5c78:	a9 f7       	brne	.-22     	; 0x5c64 <__ultoa_invert+0x6c>
    5c7a:	ea cf       	rjmp	.-44     	; 0x5c50 <__ultoa_invert+0x58>
    5c7c:	b4 e0       	ldi	r27, 0x04	; 4
    5c7e:	a6 95       	lsr	r26
    5c80:	97 95       	ror	r25
    5c82:	87 95       	ror	r24
    5c84:	77 95       	ror	r23
    5c86:	67 95       	ror	r22
    5c88:	ba 95       	dec	r27
    5c8a:	c9 f7       	brne	.-14     	; 0x5c7e <__ultoa_invert+0x86>
    5c8c:	00 97       	sbiw	r24, 0x00	; 0
    5c8e:	61 05       	cpc	r22, r1
    5c90:	71 05       	cpc	r23, r1
    5c92:	08 95       	ret
    5c94:	9b 01       	movw	r18, r22
    5c96:	ac 01       	movw	r20, r24
    5c98:	0a 2e       	mov	r0, r26
    5c9a:	06 94       	lsr	r0
    5c9c:	57 95       	ror	r21
    5c9e:	47 95       	ror	r20
    5ca0:	37 95       	ror	r19
    5ca2:	27 95       	ror	r18
    5ca4:	ba 95       	dec	r27
    5ca6:	c9 f7       	brne	.-14     	; 0x5c9a <__ultoa_invert+0xa2>
    5ca8:	62 0f       	add	r22, r18
    5caa:	73 1f       	adc	r23, r19
    5cac:	84 1f       	adc	r24, r20
    5cae:	95 1f       	adc	r25, r21
    5cb0:	a0 1d       	adc	r26, r0
    5cb2:	08 95       	ret

00005cb4 <_exit>:
    5cb4:	f8 94       	cli

00005cb6 <__stop_program>:
    5cb6:	ff cf       	rjmp	.-2      	; 0x5cb6 <__stop_program>
