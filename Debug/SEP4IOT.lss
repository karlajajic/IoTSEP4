
SEP4IOT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000656  00800200  00006562  000065f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006562  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00001311  00800856  00800856  00006c4c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00006c4c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006ca8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000be8  00000000  00000000  00006ce8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000ed26  00000000  00000000  000078d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003d1c  00000000  00000000  000165f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00007221  00000000  00000000  0001a312  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002a00  00000000  00000000  00021534  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004630  00000000  00000000  00023f34  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000dbe6  00000000  00000000  00028564  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000c10  00000000  00000000  0003614a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	50 c2       	rjmp	.+1184   	; 0x4a2 <__ctors_end>
       2:	00 00       	nop
       4:	6f c2       	rjmp	.+1246   	; 0x4e4 <__bad_interrupt>
       6:	00 00       	nop
       8:	6d c2       	rjmp	.+1242   	; 0x4e4 <__bad_interrupt>
       a:	00 00       	nop
       c:	6b c2       	rjmp	.+1238   	; 0x4e4 <__bad_interrupt>
       e:	00 00       	nop
      10:	69 c2       	rjmp	.+1234   	; 0x4e4 <__bad_interrupt>
      12:	00 00       	nop
      14:	67 c2       	rjmp	.+1230   	; 0x4e4 <__bad_interrupt>
      16:	00 00       	nop
      18:	65 c2       	rjmp	.+1226   	; 0x4e4 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	63 c2       	rjmp	.+1222   	; 0x4e4 <__bad_interrupt>
      1e:	00 00       	nop
      20:	61 c2       	rjmp	.+1218   	; 0x4e4 <__bad_interrupt>
      22:	00 00       	nop
      24:	5f c2       	rjmp	.+1214   	; 0x4e4 <__bad_interrupt>
      26:	00 00       	nop
      28:	5d c2       	rjmp	.+1210   	; 0x4e4 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	5b c2       	rjmp	.+1206   	; 0x4e4 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 da 0d 	jmp	0x1bb4	; 0x1bb4 <__vector_12>
      34:	57 c2       	rjmp	.+1198   	; 0x4e4 <__bad_interrupt>
      36:	00 00       	nop
      38:	55 c2       	rjmp	.+1194   	; 0x4e4 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	53 c2       	rjmp	.+1190   	; 0x4e4 <__bad_interrupt>
      3e:	00 00       	nop
      40:	51 c2       	rjmp	.+1186   	; 0x4e4 <__bad_interrupt>
      42:	00 00       	nop
      44:	4f c2       	rjmp	.+1182   	; 0x4e4 <__bad_interrupt>
      46:	00 00       	nop
      48:	4d c2       	rjmp	.+1178   	; 0x4e4 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	4b c2       	rjmp	.+1174   	; 0x4e4 <__bad_interrupt>
      4e:	00 00       	nop
      50:	49 c2       	rjmp	.+1170   	; 0x4e4 <__bad_interrupt>
      52:	00 00       	nop
      54:	47 c2       	rjmp	.+1166   	; 0x4e4 <__bad_interrupt>
      56:	00 00       	nop
      58:	45 c2       	rjmp	.+1162   	; 0x4e4 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	43 c2       	rjmp	.+1158   	; 0x4e4 <__bad_interrupt>
      5e:	00 00       	nop
      60:	41 c2       	rjmp	.+1154   	; 0x4e4 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 81 27 	jmp	0x4f02	; 0x4f02 <__vector_25>
      68:	0c 94 d3 27 	jmp	0x4fa6	; 0x4fa6 <__vector_26>
      6c:	3b c2       	rjmp	.+1142   	; 0x4e4 <__bad_interrupt>
      6e:	00 00       	nop
      70:	39 c2       	rjmp	.+1138   	; 0x4e4 <__bad_interrupt>
      72:	00 00       	nop
      74:	37 c2       	rjmp	.+1134   	; 0x4e4 <__bad_interrupt>
      76:	00 00       	nop
      78:	35 c2       	rjmp	.+1130   	; 0x4e4 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	33 c2       	rjmp	.+1126   	; 0x4e4 <__bad_interrupt>
      7e:	00 00       	nop
      80:	31 c2       	rjmp	.+1122   	; 0x4e4 <__bad_interrupt>
      82:	00 00       	nop
      84:	2f c2       	rjmp	.+1118   	; 0x4e4 <__bad_interrupt>
      86:	00 00       	nop
      88:	2d c2       	rjmp	.+1114   	; 0x4e4 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	2b c2       	rjmp	.+1110   	; 0x4e4 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 17 28 	jmp	0x502e	; 0x502e <__vector_36>
      94:	0c 94 69 28 	jmp	0x50d2	; 0x50d2 <__vector_37>
      98:	25 c2       	rjmp	.+1098   	; 0x4e4 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 01 2b 	jmp	0x5602	; 0x5602 <__vector_39>
      a0:	21 c2       	rjmp	.+1090   	; 0x4e4 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	1f c2       	rjmp	.+1086   	; 0x4e4 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	1d c2       	rjmp	.+1082   	; 0x4e4 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	1b c2       	rjmp	.+1078   	; 0x4e4 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	19 c2       	rjmp	.+1074   	; 0x4e4 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	17 c2       	rjmp	.+1070   	; 0x4e4 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	15 c2       	rjmp	.+1066   	; 0x4e4 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	13 c2       	rjmp	.+1062   	; 0x4e4 <__bad_interrupt>
      be:	00 00       	nop
      c0:	11 c2       	rjmp	.+1058   	; 0x4e4 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	0f c2       	rjmp	.+1054   	; 0x4e4 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	0d c2       	rjmp	.+1050   	; 0x4e4 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 ad 28 	jmp	0x515a	; 0x515a <__vector_51>
      d0:	0c 94 ff 28 	jmp	0x51fe	; 0x51fe <__vector_52>
      d4:	07 c2       	rjmp	.+1038   	; 0x4e4 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 43 29 	jmp	0x5286	; 0x5286 <__vector_54>
      dc:	0c 94 95 29 	jmp	0x532a	; 0x532a <__vector_55>
      e0:	01 c2       	rjmp	.+1026   	; 0x4e4 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	c6 01       	movw	r24, r12
      e6:	c6 01       	movw	r24, r12
      e8:	c6 01       	movw	r24, r12
      ea:	00 02       	muls	r16, r16
      ec:	08 02       	muls	r16, r24
      ee:	1e 02       	muls	r17, r30
      f0:	c6 01       	movw	r24, r12
      f2:	c6 01       	movw	r24, r12
      f4:	00 02       	muls	r16, r16
      f6:	08 02       	muls	r16, r24
      f8:	23 2b       	or	r18, r19
      fa:	93 2b       	or	r25, r19
      fc:	93 2b       	or	r25, r19
      fe:	93 2b       	or	r25, r19
     100:	93 2b       	or	r25, r19
     102:	93 2b       	or	r25, r19
     104:	93 2b       	or	r25, r19
     106:	93 2b       	or	r25, r19
     108:	23 2b       	or	r18, r19
     10a:	93 2b       	or	r25, r19
     10c:	93 2b       	or	r25, r19
     10e:	93 2b       	or	r25, r19
     110:	93 2b       	or	r25, r19
     112:	93 2b       	or	r25, r19
     114:	93 2b       	or	r25, r19
     116:	93 2b       	or	r25, r19
     118:	25 2b       	or	r18, r21
     11a:	93 2b       	or	r25, r19
     11c:	93 2b       	or	r25, r19
     11e:	93 2b       	or	r25, r19
     120:	93 2b       	or	r25, r19
     122:	93 2b       	or	r25, r19
     124:	93 2b       	or	r25, r19
     126:	93 2b       	or	r25, r19
     128:	93 2b       	or	r25, r19
     12a:	93 2b       	or	r25, r19
     12c:	93 2b       	or	r25, r19
     12e:	93 2b       	or	r25, r19
     130:	93 2b       	or	r25, r19
     132:	93 2b       	or	r25, r19
     134:	93 2b       	or	r25, r19
     136:	93 2b       	or	r25, r19
     138:	25 2b       	or	r18, r21
     13a:	93 2b       	or	r25, r19
     13c:	93 2b       	or	r25, r19
     13e:	93 2b       	or	r25, r19
     140:	93 2b       	or	r25, r19
     142:	93 2b       	or	r25, r19
     144:	93 2b       	or	r25, r19
     146:	93 2b       	or	r25, r19
     148:	93 2b       	or	r25, r19
     14a:	93 2b       	or	r25, r19
     14c:	93 2b       	or	r25, r19
     14e:	93 2b       	or	r25, r19
     150:	93 2b       	or	r25, r19
     152:	93 2b       	or	r25, r19
     154:	93 2b       	or	r25, r19
     156:	93 2b       	or	r25, r19
     158:	8f 2b       	or	r24, r31
     15a:	93 2b       	or	r25, r19
     15c:	93 2b       	or	r25, r19
     15e:	93 2b       	or	r25, r19
     160:	93 2b       	or	r25, r19
     162:	93 2b       	or	r25, r19
     164:	93 2b       	or	r25, r19
     166:	93 2b       	or	r25, r19
     168:	5a 2b       	or	r21, r26
     16a:	93 2b       	or	r25, r19
     16c:	93 2b       	or	r25, r19
     16e:	93 2b       	or	r25, r19
     170:	93 2b       	or	r25, r19
     172:	93 2b       	or	r25, r19
     174:	93 2b       	or	r25, r19
     176:	93 2b       	or	r25, r19
     178:	93 2b       	or	r25, r19
     17a:	93 2b       	or	r25, r19
     17c:	93 2b       	or	r25, r19
     17e:	93 2b       	or	r25, r19
     180:	93 2b       	or	r25, r19
     182:	93 2b       	or	r25, r19
     184:	93 2b       	or	r25, r19
     186:	93 2b       	or	r25, r19
     188:	4e 2b       	or	r20, r30
     18a:	93 2b       	or	r25, r19
     18c:	93 2b       	or	r25, r19
     18e:	93 2b       	or	r25, r19
     190:	93 2b       	or	r25, r19
     192:	93 2b       	or	r25, r19
     194:	93 2b       	or	r25, r19
     196:	93 2b       	or	r25, r19
     198:	72 2b       	or	r23, r18

0000019a <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     19a:	06 e5       	ldi	r16, 0x56	; 86
     19c:	19 e1       	ldi	r17, 0x19	; 25
     19e:	0f 2e       	mov	r0, r31
     1a0:	f6 e8       	ldi	r31, 0x86	; 134
     1a2:	ef 2e       	mov	r14, r31
     1a4:	f9 e1       	ldi	r31, 0x19	; 25
     1a6:	ff 2e       	mov	r15, r31
     1a8:	f0 2d       	mov	r31, r0
     1aa:	80 91 55 19 	lds	r24, 0x1955	; 0x801955 <uxDeletedTasksWaitingCleanUp>
     1ae:	88 23       	and	r24, r24
     1b0:	29 f1       	breq	.+74     	; 0x1fc <prvIdleTask+0x62>
     1b2:	0f b6       	in	r0, 0x3f	; 63
     1b4:	f8 94       	cli
     1b6:	0f 92       	push	r0
     1b8:	d8 01       	movw	r26, r16
     1ba:	17 96       	adiw	r26, 0x07	; 7
     1bc:	ed 91       	ld	r30, X+
     1be:	fc 91       	ld	r31, X
     1c0:	18 97       	sbiw	r26, 0x08	; 8
     1c2:	c0 85       	ldd	r28, Z+8	; 0x08
     1c4:	d1 85       	ldd	r29, Z+9	; 0x09
     1c6:	ce 01       	movw	r24, r28
     1c8:	02 96       	adiw	r24, 0x02	; 2
     1ca:	0e 94 3f 0c 	call	0x187e	; 0x187e <uxListRemove>
     1ce:	80 91 49 19 	lds	r24, 0x1949	; 0x801949 <uxCurrentNumberOfTasks>
     1d2:	81 50       	subi	r24, 0x01	; 1
     1d4:	80 93 49 19 	sts	0x1949, r24	; 0x801949 <uxCurrentNumberOfTasks>
     1d8:	80 91 55 19 	lds	r24, 0x1955	; 0x801955 <uxDeletedTasksWaitingCleanUp>
     1dc:	81 50       	subi	r24, 0x01	; 1
     1de:	80 93 55 19 	sts	0x1955, r24	; 0x801955 <uxDeletedTasksWaitingCleanUp>
     1e2:	0f 90       	pop	r0
     1e4:	0f be       	out	0x3f, r0	; 63
     1e6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     1e8:	9c 8d       	ldd	r25, Y+28	; 0x1c
     1ea:	0e 94 9b 0b 	call	0x1736	; 0x1736 <vPortFree>
     1ee:	ce 01       	movw	r24, r28
     1f0:	0e 94 9b 0b 	call	0x1736	; 0x1736 <vPortFree>
     1f4:	80 91 55 19 	lds	r24, 0x1955	; 0x801955 <uxDeletedTasksWaitingCleanUp>
     1f8:	81 11       	cpse	r24, r1
     1fa:	db cf       	rjmp	.-74     	; 0x1b2 <prvIdleTask+0x18>
     1fc:	f7 01       	movw	r30, r14
     1fe:	80 81       	ld	r24, Z
     200:	82 30       	cpi	r24, 0x02	; 2
     202:	10 f0       	brcs	.+4      	; 0x208 <prvIdleTask+0x6e>
     204:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <vPortYield>
     208:	0e 94 2c 1e 	call	0x3c58	; 0x3c58 <vApplicationIdleHook>
     20c:	ce cf       	rjmp	.-100    	; 0x1aa <prvIdleTask+0x10>

0000020e <prvTimerTask>:
            pxNewTimer->ucStatus = 0x00;
            prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
        }

        return pxNewTimer;
    }
     20e:	cf 93       	push	r28
     210:	df 93       	push	r29
     212:	cd b7       	in	r28, 0x3d	; 61
     214:	de b7       	in	r29, 0x3e	; 62
     216:	60 97       	sbiw	r28, 0x10	; 16
     218:	0f b6       	in	r0, 0x3f	; 63
     21a:	f8 94       	cli
     21c:	de bf       	out	0x3e, r29	; 62
     21e:	0f be       	out	0x3f, r0	; 63
     220:	cd bf       	out	0x3d, r28	; 61
     222:	ce 01       	movw	r24, r28
     224:	01 96       	adiw	r24, 0x01	; 1
     226:	9a 87       	std	Y+10, r25	; 0x0a
     228:	89 87       	std	Y+9, r24	; 0x09
     22a:	81 2c       	mov	r8, r1
     22c:	91 2c       	mov	r9, r1
     22e:	a1 2c       	mov	r10, r1
     230:	b1 2c       	mov	r11, r1
     232:	69 84       	ldd	r6, Y+9	; 0x09
     234:	7a 84       	ldd	r7, Y+10	; 0x0a
     236:	e0 91 be 19 	lds	r30, 0x19BE	; 0x8019be <pxCurrentTimerList>
     23a:	f0 91 bf 19 	lds	r31, 0x19BF	; 0x8019bf <pxCurrentTimerList+0x1>
     23e:	80 81       	ld	r24, Z
     240:	88 23       	and	r24, r24
     242:	09 f4       	brne	.+2      	; 0x246 <prvTimerTask+0x38>
     244:	14 c1       	rjmp	.+552    	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
     246:	07 80       	ldd	r0, Z+7	; 0x07
     248:	f0 85       	ldd	r31, Z+8	; 0x08
     24a:	e0 2d       	mov	r30, r0
     24c:	20 80       	ld	r2, Z
     24e:	31 80       	ldd	r3, Z+1	; 0x01
     250:	42 80       	ldd	r4, Z+2	; 0x02
     252:	53 80       	ldd	r5, Z+3	; 0x03
     254:	0e 94 71 16 	call	0x2ce2	; 0x2ce2 <vTaskSuspendAll>
     258:	ce 01       	movw	r24, r28
     25a:	01 96       	adiw	r24, 0x01	; 1
     25c:	0e 94 96 1d 	call	0x3b2c	; 0x3b2c <prvSampleTimeNow>
     260:	6b 87       	std	Y+11, r22	; 0x0b
     262:	7c 87       	std	Y+12, r23	; 0x0c
     264:	8d 87       	std	Y+13, r24	; 0x0d
     266:	9e 87       	std	Y+14, r25	; 0x0e
     268:	89 81       	ldd	r24, Y+1	; 0x01
     26a:	81 11       	cpse	r24, r1
     26c:	67 c0       	rjmp	.+206    	; 0x33c <prvTimerTask+0x12e>
     26e:	8b 85       	ldd	r24, Y+11	; 0x0b
     270:	9c 85       	ldd	r25, Y+12	; 0x0c
     272:	ad 85       	ldd	r26, Y+13	; 0x0d
     274:	be 85       	ldd	r27, Y+14	; 0x0e
     276:	82 15       	cp	r24, r2
     278:	93 05       	cpc	r25, r3
     27a:	a4 05       	cpc	r26, r4
     27c:	b5 05       	cpc	r27, r5
     27e:	08 f4       	brcc	.+2      	; 0x282 <prvTimerTask+0x74>
     280:	45 c0       	rjmp	.+138    	; 0x30c <prvTimerTask+0xfe>
     282:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <xTaskResumeAll>
     286:	e0 91 be 19 	lds	r30, 0x19BE	; 0x8019be <pxCurrentTimerList>
     28a:	f0 91 bf 19 	lds	r31, 0x19BF	; 0x8019bf <pxCurrentTimerList+0x1>
     28e:	07 80       	ldd	r0, Z+7	; 0x07
     290:	f0 85       	ldd	r31, Z+8	; 0x08
     292:	e0 2d       	mov	r30, r0
     294:	a0 85       	ldd	r26, Z+8	; 0x08
     296:	b1 85       	ldd	r27, Z+9	; 0x09
     298:	b8 8b       	std	Y+16, r27	; 0x10
     29a:	af 87       	std	Y+15, r26	; 0x0f
     29c:	cd 01       	movw	r24, r26
     29e:	02 96       	adiw	r24, 0x02	; 2
     2a0:	0e 94 3f 0c 	call	0x187e	; 0x187e <uxListRemove>
     2a4:	ef 85       	ldd	r30, Y+15	; 0x0f
     2a6:	f8 89       	ldd	r31, Y+16	; 0x10
     2a8:	87 89       	ldd	r24, Z+23	; 0x17
     2aa:	82 ff       	sbrs	r24, 2
     2ac:	21 c0       	rjmp	.+66     	; 0x2f0 <prvTimerTask+0xe2>
     2ae:	46 85       	ldd	r20, Z+14	; 0x0e
     2b0:	57 85       	ldd	r21, Z+15	; 0x0f
     2b2:	60 89       	ldd	r22, Z+16	; 0x10
     2b4:	71 89       	ldd	r23, Z+17	; 0x11
     2b6:	42 0d       	add	r20, r2
     2b8:	53 1d       	adc	r21, r3
     2ba:	64 1d       	adc	r22, r4
     2bc:	75 1d       	adc	r23, r5
     2be:	72 01       	movw	r14, r4
     2c0:	61 01       	movw	r12, r2
     2c2:	0b 85       	ldd	r16, Y+11	; 0x0b
     2c4:	1c 85       	ldd	r17, Y+12	; 0x0c
     2c6:	2d 85       	ldd	r18, Y+13	; 0x0d
     2c8:	3e 85       	ldd	r19, Y+14	; 0x0e
     2ca:	cf 01       	movw	r24, r30
     2cc:	0e 94 a5 1c 	call	0x394a	; 0x394a <prvInsertTimerInActiveList>
     2d0:	88 23       	and	r24, r24
     2d2:	99 f0       	breq	.+38     	; 0x2fa <prvTimerTask+0xec>
     2d4:	c8 2c       	mov	r12, r8
     2d6:	d9 2c       	mov	r13, r9
     2d8:	ea 2c       	mov	r14, r10
     2da:	fb 2c       	mov	r15, r11
     2dc:	00 e0       	ldi	r16, 0x00	; 0
     2de:	10 e0       	ldi	r17, 0x00	; 0
     2e0:	a2 01       	movw	r20, r4
     2e2:	91 01       	movw	r18, r2
     2e4:	60 e0       	ldi	r22, 0x00	; 0
     2e6:	8f 85       	ldd	r24, Y+15	; 0x0f
     2e8:	98 89       	ldd	r25, Y+16	; 0x10
     2ea:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <xTimerGenericCommand>
     2ee:	05 c0       	rjmp	.+10     	; 0x2fa <prvTimerTask+0xec>
     2f0:	8e 7f       	andi	r24, 0xFE	; 254
     2f2:	af 85       	ldd	r26, Y+15	; 0x0f
     2f4:	b8 89       	ldd	r27, Y+16	; 0x10
     2f6:	57 96       	adiw	r26, 0x17	; 23
     2f8:	8c 93       	st	X, r24
     2fa:	af 85       	ldd	r26, Y+15	; 0x0f
     2fc:	b8 89       	ldd	r27, Y+16	; 0x10
     2fe:	54 96       	adiw	r26, 0x14	; 20
     300:	ed 91       	ld	r30, X+
     302:	fc 91       	ld	r31, X
     304:	55 97       	sbiw	r26, 0x15	; 21
     306:	cd 01       	movw	r24, r26
     308:	19 95       	eicall
     30a:	a2 c0       	rjmp	.+324    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     30c:	20 e0       	ldi	r18, 0x00	; 0
     30e:	b2 01       	movw	r22, r4
     310:	a1 01       	movw	r20, r2
     312:	8b 85       	ldd	r24, Y+11	; 0x0b
     314:	9c 85       	ldd	r25, Y+12	; 0x0c
     316:	ad 85       	ldd	r26, Y+13	; 0x0d
     318:	be 85       	ldd	r27, Y+14	; 0x0e
     31a:	48 1b       	sub	r20, r24
     31c:	59 0b       	sbc	r21, r25
     31e:	6a 0b       	sbc	r22, r26
     320:	7b 0b       	sbc	r23, r27
     322:	80 91 ba 19 	lds	r24, 0x19BA	; 0x8019ba <xTimerQueue>
     326:	90 91 bb 19 	lds	r25, 0x19BB	; 0x8019bb <xTimerQueue+0x1>
     32a:	0e 94 76 11 	call	0x22ec	; 0x22ec <vQueueWaitForMessageRestricted>
     32e:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <xTaskResumeAll>
     332:	81 11       	cpse	r24, r1
     334:	8d c0       	rjmp	.+282    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     336:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <vPortYield>
     33a:	8a c0       	rjmp	.+276    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     33c:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <xTaskResumeAll>
     340:	87 c0       	rjmp	.+270    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     342:	89 81       	ldd	r24, Y+1	; 0x01
     344:	88 23       	and	r24, r24
     346:	0c f4       	brge	.+2      	; 0x34a <prvTimerTask+0x13c>
     348:	83 c0       	rjmp	.+262    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     34a:	4e 80       	ldd	r4, Y+6	; 0x06
     34c:	5f 80       	ldd	r5, Y+7	; 0x07
     34e:	d2 01       	movw	r26, r4
     350:	1c 96       	adiw	r26, 0x0c	; 12
     352:	8d 91       	ld	r24, X+
     354:	9c 91       	ld	r25, X
     356:	1d 97       	sbiw	r26, 0x0d	; 13
     358:	89 2b       	or	r24, r25
     35a:	21 f0       	breq	.+8      	; 0x364 <prvTimerTask+0x156>
     35c:	c2 01       	movw	r24, r4
     35e:	02 96       	adiw	r24, 0x02	; 2
     360:	0e 94 3f 0c 	call	0x187e	; 0x187e <uxListRemove>
     364:	ce 01       	movw	r24, r28
     366:	08 96       	adiw	r24, 0x08	; 8
     368:	0e 94 96 1d 	call	0x3b2c	; 0x3b2c <prvSampleTimeNow>
     36c:	8b 01       	movw	r16, r22
     36e:	9c 01       	movw	r18, r24
     370:	e9 81       	ldd	r30, Y+1	; 0x01
     372:	0e 2e       	mov	r0, r30
     374:	00 0c       	add	r0, r0
     376:	ff 0b       	sbc	r31, r31
     378:	ea 30       	cpi	r30, 0x0A	; 10
     37a:	f1 05       	cpc	r31, r1
     37c:	08 f0       	brcs	.+2      	; 0x380 <prvTimerTask+0x172>
     37e:	68 c0       	rjmp	.+208    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     380:	88 27       	eor	r24, r24
     382:	ee 58       	subi	r30, 0x8E	; 142
     384:	ff 4f       	sbci	r31, 0xFF	; 255
     386:	8f 4f       	sbci	r24, 0xFF	; 255
     388:	0c 94 eb 2d 	jmp	0x5bd6	; 0x5bd6 <__tablejump2__>
     38c:	f2 01       	movw	r30, r4
     38e:	87 89       	ldd	r24, Z+23	; 0x17
     390:	81 60       	ori	r24, 0x01	; 1
     392:	87 8b       	std	Z+23, r24	; 0x17
     394:	ca 80       	ldd	r12, Y+2	; 0x02
     396:	db 80       	ldd	r13, Y+3	; 0x03
     398:	ec 80       	ldd	r14, Y+4	; 0x04
     39a:	fd 80       	ldd	r15, Y+5	; 0x05
     39c:	46 85       	ldd	r20, Z+14	; 0x0e
     39e:	57 85       	ldd	r21, Z+15	; 0x0f
     3a0:	60 89       	ldd	r22, Z+16	; 0x10
     3a2:	71 89       	ldd	r23, Z+17	; 0x11
     3a4:	4c 0d       	add	r20, r12
     3a6:	5d 1d       	adc	r21, r13
     3a8:	6e 1d       	adc	r22, r14
     3aa:	7f 1d       	adc	r23, r15
     3ac:	c2 01       	movw	r24, r4
     3ae:	0e 94 a5 1c 	call	0x394a	; 0x394a <prvInsertTimerInActiveList>
     3b2:	88 23       	and	r24, r24
     3b4:	09 f4       	brne	.+2      	; 0x3b8 <prvTimerTask+0x1aa>
     3b6:	4c c0       	rjmp	.+152    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     3b8:	d2 01       	movw	r26, r4
     3ba:	54 96       	adiw	r26, 0x14	; 20
     3bc:	ed 91       	ld	r30, X+
     3be:	fc 91       	ld	r31, X
     3c0:	55 97       	sbiw	r26, 0x15	; 21
     3c2:	c2 01       	movw	r24, r4
     3c4:	19 95       	eicall
     3c6:	f2 01       	movw	r30, r4
     3c8:	87 89       	ldd	r24, Z+23	; 0x17
     3ca:	82 ff       	sbrs	r24, 2
     3cc:	41 c0       	rjmp	.+130    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     3ce:	4a 81       	ldd	r20, Y+2	; 0x02
     3d0:	5b 81       	ldd	r21, Y+3	; 0x03
     3d2:	6c 81       	ldd	r22, Y+4	; 0x04
     3d4:	7d 81       	ldd	r23, Y+5	; 0x05
     3d6:	86 85       	ldd	r24, Z+14	; 0x0e
     3d8:	97 85       	ldd	r25, Z+15	; 0x0f
     3da:	a0 89       	ldd	r26, Z+16	; 0x10
     3dc:	b1 89       	ldd	r27, Z+17	; 0x11
     3de:	9a 01       	movw	r18, r20
     3e0:	ab 01       	movw	r20, r22
     3e2:	28 0f       	add	r18, r24
     3e4:	39 1f       	adc	r19, r25
     3e6:	4a 1f       	adc	r20, r26
     3e8:	5b 1f       	adc	r21, r27
     3ea:	c8 2c       	mov	r12, r8
     3ec:	d9 2c       	mov	r13, r9
     3ee:	ea 2c       	mov	r14, r10
     3f0:	fb 2c       	mov	r15, r11
     3f2:	00 e0       	ldi	r16, 0x00	; 0
     3f4:	10 e0       	ldi	r17, 0x00	; 0
     3f6:	60 e0       	ldi	r22, 0x00	; 0
     3f8:	c2 01       	movw	r24, r4
     3fa:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <xTimerGenericCommand>
     3fe:	28 c0       	rjmp	.+80     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     400:	d2 01       	movw	r26, r4
     402:	57 96       	adiw	r26, 0x17	; 23
     404:	8c 91       	ld	r24, X
     406:	57 97       	sbiw	r26, 0x17	; 23
     408:	8e 7f       	andi	r24, 0xFE	; 254
     40a:	57 96       	adiw	r26, 0x17	; 23
     40c:	8c 93       	st	X, r24
     40e:	20 c0       	rjmp	.+64     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     410:	f2 01       	movw	r30, r4
     412:	87 89       	ldd	r24, Z+23	; 0x17
     414:	81 60       	ori	r24, 0x01	; 1
     416:	87 8b       	std	Z+23, r24	; 0x17
     418:	4a 81       	ldd	r20, Y+2	; 0x02
     41a:	5b 81       	ldd	r21, Y+3	; 0x03
     41c:	6c 81       	ldd	r22, Y+4	; 0x04
     41e:	7d 81       	ldd	r23, Y+5	; 0x05
     420:	46 87       	std	Z+14, r20	; 0x0e
     422:	57 87       	std	Z+15, r21	; 0x0f
     424:	60 8b       	std	Z+16, r22	; 0x10
     426:	71 8b       	std	Z+17, r23	; 0x11
     428:	40 0f       	add	r20, r16
     42a:	51 1f       	adc	r21, r17
     42c:	62 1f       	adc	r22, r18
     42e:	73 1f       	adc	r23, r19
     430:	68 01       	movw	r12, r16
     432:	79 01       	movw	r14, r18
     434:	c2 01       	movw	r24, r4
     436:	0e 94 a5 1c 	call	0x394a	; 0x394a <prvInsertTimerInActiveList>
     43a:	0a c0       	rjmp	.+20     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     43c:	f2 01       	movw	r30, r4
     43e:	87 89       	ldd	r24, Z+23	; 0x17
     440:	81 fd       	sbrc	r24, 1
     442:	04 c0       	rjmp	.+8      	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
     444:	c2 01       	movw	r24, r4
     446:	0e 94 9b 0b 	call	0x1736	; 0x1736 <vPortFree>
     44a:	02 c0       	rjmp	.+4      	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     44c:	8e 7f       	andi	r24, 0xFE	; 254
     44e:	87 8b       	std	Z+23, r24	; 0x17
     450:	28 2d       	mov	r18, r8
     452:	39 2d       	mov	r19, r9
     454:	4a 2d       	mov	r20, r10
     456:	5b 2d       	mov	r21, r11
     458:	66 2d       	mov	r22, r6
     45a:	77 2d       	mov	r23, r7
     45c:	80 91 ba 19 	lds	r24, 0x19BA	; 0x8019ba <xTimerQueue>
     460:	90 91 bb 19 	lds	r25, 0x19BB	; 0x8019bb <xTimerQueue+0x1>
     464:	0e 94 12 10 	call	0x2024	; 0x2024 <xQueueReceive>
     468:	81 11       	cpse	r24, r1
     46a:	6b cf       	rjmp	.-298    	; 0x342 <prvTimerTask+0x134>
     46c:	e4 ce       	rjmp	.-568    	; 0x236 <prvTimerTask+0x28>
     46e:	0e 94 71 16 	call	0x2ce2	; 0x2ce2 <vTaskSuspendAll>
     472:	ce 01       	movw	r24, r28
     474:	01 96       	adiw	r24, 0x01	; 1
     476:	0e 94 96 1d 	call	0x3b2c	; 0x3b2c <prvSampleTimeNow>
     47a:	6b 87       	std	Y+11, r22	; 0x0b
     47c:	7c 87       	std	Y+12, r23	; 0x0c
     47e:	8d 87       	std	Y+13, r24	; 0x0d
     480:	9e 87       	std	Y+14, r25	; 0x0e
     482:	89 81       	ldd	r24, Y+1	; 0x01
     484:	81 11       	cpse	r24, r1
     486:	5a cf       	rjmp	.-332    	; 0x33c <prvTimerTask+0x12e>
     488:	e0 91 bc 19 	lds	r30, 0x19BC	; 0x8019bc <pxOverflowTimerList>
     48c:	f0 91 bd 19 	lds	r31, 0x19BD	; 0x8019bd <pxOverflowTimerList+0x1>
     490:	80 81       	ld	r24, Z
     492:	21 e0       	ldi	r18, 0x01	; 1
     494:	81 11       	cpse	r24, r1
     496:	20 e0       	ldi	r18, 0x00	; 0
     498:	28 2c       	mov	r2, r8
     49a:	39 2c       	mov	r3, r9
     49c:	4a 2c       	mov	r4, r10
     49e:	5b 2c       	mov	r5, r11
     4a0:	36 cf       	rjmp	.-404    	; 0x30e <prvTimerTask+0x100>

000004a2 <__ctors_end>:
     4a2:	11 24       	eor	r1, r1
     4a4:	1f be       	out	0x3f, r1	; 63
     4a6:	cf ef       	ldi	r28, 0xFF	; 255
     4a8:	d1 e2       	ldi	r29, 0x21	; 33
     4aa:	de bf       	out	0x3e, r29	; 62
     4ac:	cd bf       	out	0x3d, r28	; 61
     4ae:	00 e0       	ldi	r16, 0x00	; 0
     4b0:	0c bf       	out	0x3c, r16	; 60

000004b2 <__do_copy_data>:
     4b2:	18 e0       	ldi	r17, 0x08	; 8
     4b4:	a0 e0       	ldi	r26, 0x00	; 0
     4b6:	b2 e0       	ldi	r27, 0x02	; 2
     4b8:	e2 e6       	ldi	r30, 0x62	; 98
     4ba:	f5 e6       	ldi	r31, 0x65	; 101
     4bc:	00 e0       	ldi	r16, 0x00	; 0
     4be:	0b bf       	out	0x3b, r16	; 59
     4c0:	02 c0       	rjmp	.+4      	; 0x4c6 <__do_copy_data+0x14>
     4c2:	07 90       	elpm	r0, Z+
     4c4:	0d 92       	st	X+, r0
     4c6:	a6 35       	cpi	r26, 0x56	; 86
     4c8:	b1 07       	cpc	r27, r17
     4ca:	d9 f7       	brne	.-10     	; 0x4c2 <__do_copy_data+0x10>

000004cc <__do_clear_bss>:
     4cc:	2b e1       	ldi	r18, 0x1B	; 27
     4ce:	a6 e5       	ldi	r26, 0x56	; 86
     4d0:	b8 e0       	ldi	r27, 0x08	; 8
     4d2:	01 c0       	rjmp	.+2      	; 0x4d6 <.do_clear_bss_start>

000004d4 <.do_clear_bss_loop>:
     4d4:	1d 92       	st	X+, r1

000004d6 <.do_clear_bss_start>:
     4d6:	a7 36       	cpi	r26, 0x67	; 103
     4d8:	b2 07       	cpc	r27, r18
     4da:	e1 f7       	brne	.-8      	; 0x4d4 <.do_clear_bss_loop>
     4dc:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <main>
     4e0:	0c 94 af 32 	jmp	0x655e	; 0x655e <_exit>

000004e4 <__bad_interrupt>:
     4e4:	8d cd       	rjmp	.-1254   	; 0x0 <__vectors>

000004e6 <co2Reader_create>:

	return _new_reader;
}

//	RETURN TO DESTROY METHODS
void co2Reader_destroy(co2reader_t self) {
     4e6:	2f 92       	push	r2
     4e8:	3f 92       	push	r3
     4ea:	4f 92       	push	r4
     4ec:	5f 92       	push	r5
     4ee:	6f 92       	push	r6
     4f0:	7f 92       	push	r7
     4f2:	8f 92       	push	r8
     4f4:	9f 92       	push	r9
     4f6:	af 92       	push	r10
     4f8:	bf 92       	push	r11
     4fa:	cf 92       	push	r12
     4fc:	df 92       	push	r13
     4fe:	ef 92       	push	r14
     500:	ff 92       	push	r15
     502:	0f 93       	push	r16
     504:	1f 93       	push	r17
     506:	cf 93       	push	r28
     508:	df 93       	push	r29
     50a:	88 2e       	mov	r8, r24
     50c:	96 2e       	mov	r9, r22
     50e:	1a 01       	movw	r2, r20
     510:	28 01       	movw	r4, r16
     512:	39 01       	movw	r6, r18
     514:	61 e0       	ldi	r22, 0x01	; 1
     516:	70 e0       	ldi	r23, 0x00	; 0
     518:	83 e0       	ldi	r24, 0x03	; 3
     51a:	90 e0       	ldi	r25, 0x00	; 0
     51c:	0e 94 f3 2d 	call	0x5be6	; 0x5be6 <calloc>
     520:	ec 01       	movw	r28, r24
     522:	00 97       	sbiw	r24, 0x00	; 0
     524:	69 f1       	breq	.+90     	; 0x580 <co2Reader_create+0x9a>
     526:	fc 01       	movw	r30, r24
     528:	11 92       	st	Z+, r1
     52a:	30 92 61 08 	sts	0x0861, r3	; 0x800861 <_startMeasureEventGroup+0x1>
     52e:	20 92 60 08 	sts	0x0860, r2	; 0x800860 <_startMeasureEventGroup>
     532:	40 92 5c 08 	sts	0x085C, r4	; 0x80085c <_startMeasureBit>
     536:	50 92 5d 08 	sts	0x085D, r5	; 0x80085d <_startMeasureBit+0x1>
     53a:	60 92 5e 08 	sts	0x085E, r6	; 0x80085e <_startMeasureBit+0x2>
     53e:	70 92 5f 08 	sts	0x085F, r7	; 0x80085f <_startMeasureBit+0x3>
     542:	f0 92 5b 08 	sts	0x085B, r15	; 0x80085b <_readyEventGroup+0x1>
     546:	e0 92 5a 08 	sts	0x085A, r14	; 0x80085a <_readyEventGroup>
     54a:	a0 92 56 08 	sts	0x0856, r10	; 0x800856 <__data_end>
     54e:	b0 92 57 08 	sts	0x0857, r11	; 0x800857 <__data_end+0x1>
     552:	c0 92 58 08 	sts	0x0858, r12	; 0x800858 <__data_end+0x2>
     556:	d0 92 59 08 	sts	0x0859, r13	; 0x800859 <__data_end+0x3>
     55a:	49 2d       	mov	r20, r9
     55c:	50 e0       	ldi	r21, 0x00	; 0
     55e:	7f 01       	movw	r14, r30
     560:	08 2d       	mov	r16, r8
     562:	9c 01       	movw	r18, r24
     564:	61 e4       	ldi	r22, 0x41	; 65
     566:	72 e0       	ldi	r23, 0x02	; 2
     568:	8a e2       	ldi	r24, 0x2A	; 42
     56a:	93 e0       	ldi	r25, 0x03	; 3
     56c:	0e 94 16 15 	call	0x2a2c	; 0x2a2c <xTaskCreate>
     570:	8b e4       	ldi	r24, 0x4B	; 75
     572:	92 e0       	ldi	r25, 0x02	; 2
     574:	9f 93       	push	r25
     576:	8f 93       	push	r24
     578:	0e 94 91 2f 	call	0x5f22	; 0x5f22 <printf>
     57c:	0f 90       	pop	r0
     57e:	0f 90       	pop	r0
     580:	ce 01       	movw	r24, r28
     582:	df 91       	pop	r29
     584:	cf 91       	pop	r28
     586:	1f 91       	pop	r17
     588:	0f 91       	pop	r16
     58a:	ff 90       	pop	r15
     58c:	ef 90       	pop	r14
     58e:	df 90       	pop	r13
     590:	cf 90       	pop	r12
     592:	bf 90       	pop	r11
     594:	af 90       	pop	r10
     596:	9f 90       	pop	r9
     598:	8f 90       	pop	r8
     59a:	7f 90       	pop	r7
     59c:	6f 90       	pop	r6
     59e:	5f 90       	pop	r5
     5a0:	4f 90       	pop	r4
     5a2:	3f 90       	pop	r3
     5a4:	2f 90       	pop	r2
     5a6:	08 95       	ret

000005a8 <co2Reader_measure>:
	for (;;) {
		co2Reader_measure(self);
	}
}

void co2Reader_measure(co2reader_t self) {//dummy
     5a8:	cf 92       	push	r12
     5aa:	df 92       	push	r13
     5ac:	ef 92       	push	r14
     5ae:	ff 92       	push	r15
     5b0:	0f 93       	push	r16
     5b2:	1f 93       	push	r17
     5b4:	cf 93       	push	r28
     5b6:	df 93       	push	r29
     5b8:	ec 01       	movw	r28, r24
	EventBits_t uxBits = xEventGroupWaitBits(_startMeasureEventGroup, //eventGroup
     5ba:	40 91 5c 08 	lds	r20, 0x085C	; 0x80085c <_startMeasureBit>
     5be:	50 91 5d 08 	lds	r21, 0x085D	; 0x80085d <_startMeasureBit+0x1>
     5c2:	60 91 5e 08 	lds	r22, 0x085E	; 0x80085e <_startMeasureBit+0x2>
     5c6:	70 91 5f 08 	lds	r23, 0x085F	; 0x80085f <_startMeasureBit+0x3>
     5ca:	cc 24       	eor	r12, r12
     5cc:	ca 94       	dec	r12
     5ce:	dc 2c       	mov	r13, r12
     5d0:	76 01       	movw	r14, r12
     5d2:	01 e0       	ldi	r16, 0x01	; 1
     5d4:	21 e0       	ldi	r18, 0x01	; 1
     5d6:	80 91 60 08 	lds	r24, 0x0860	; 0x800860 <_startMeasureEventGroup>
     5da:	90 91 61 08 	lds	r25, 0x0861	; 0x800861 <_startMeasureEventGroup+0x1>
     5de:	4c d6       	rcall	.+3224   	; 0x1278 <xEventGroupWaitBits>
	_startMeasureBit, //bits it is interested in
	pdTRUE, //clears the bits
	pdTRUE, //waits for both bits to be set
	portMAX_DELAY); //wait

	if ((uxBits & (_startMeasureBit)) == (_startMeasureBit)) {
     5e0:	00 91 5c 08 	lds	r16, 0x085C	; 0x80085c <_startMeasureBit>
     5e4:	10 91 5d 08 	lds	r17, 0x085D	; 0x80085d <_startMeasureBit+0x1>
     5e8:	20 91 5e 08 	lds	r18, 0x085E	; 0x80085e <_startMeasureBit+0x2>
     5ec:	30 91 5f 08 	lds	r19, 0x085F	; 0x80085f <_startMeasureBit+0x3>
     5f0:	dc 01       	movw	r26, r24
     5f2:	cb 01       	movw	r24, r22
     5f4:	80 23       	and	r24, r16
     5f6:	91 23       	and	r25, r17
     5f8:	a2 23       	and	r26, r18
     5fa:	b3 23       	and	r27, r19
     5fc:	08 17       	cp	r16, r24
     5fe:	19 07       	cpc	r17, r25
     600:	2a 07       	cpc	r18, r26
     602:	3b 07       	cpc	r19, r27
     604:	f1 f4       	brne	.+60     	; 0x642 <co2Reader_measure+0x9a>
		uint8_t no = self->value;
     606:	88 81       	ld	r24, Y
		no++;
		self->value = no;
     608:	8f 5f       	subi	r24, 0xFF	; 255
     60a:	88 83       	st	Y, r24
		printf("co2 done bit set");
     60c:	82 e5       	ldi	r24, 0x52	; 82
     60e:	92 e0       	ldi	r25, 0x02	; 2
     610:	9f 93       	push	r25
     612:	8f 93       	push	r24
     614:	0e 94 91 2f 	call	0x5f22	; 0x5f22 <printf>

		vTaskDelay(2500); //pretend it takes some time
     618:	64 ec       	ldi	r22, 0xC4	; 196
     61a:	79 e0       	ldi	r23, 0x09	; 9
     61c:	80 e0       	ldi	r24, 0x00	; 0
     61e:	90 e0       	ldi	r25, 0x00	; 0
     620:	0e 94 d6 17 	call	0x2fac	; 0x2fac <vTaskDelay>

		//set done bit so that device knows meassurement is done
		xEventGroupSetBits(_readyEventGroup, _readyBit);
     624:	40 91 56 08 	lds	r20, 0x0856	; 0x800856 <__data_end>
     628:	50 91 57 08 	lds	r21, 0x0857	; 0x800857 <__data_end+0x1>
     62c:	60 91 58 08 	lds	r22, 0x0858	; 0x800858 <__data_end+0x2>
     630:	70 91 59 08 	lds	r23, 0x0859	; 0x800859 <__data_end+0x3>
     634:	80 91 5a 08 	lds	r24, 0x085A	; 0x80085a <_readyEventGroup>
     638:	90 91 5b 08 	lds	r25, 0x085B	; 0x80085b <_readyEventGroup+0x1>
     63c:	dd d6       	rcall	.+3514   	; 0x13f8 <xEventGroupSetBits>
     63e:	0f 90       	pop	r0
     640:	0f 90       	pop	r0
	}
}
     642:	df 91       	pop	r29
     644:	cf 91       	pop	r28
     646:	1f 91       	pop	r17
     648:	0f 91       	pop	r16
     64a:	ff 90       	pop	r15
     64c:	ef 90       	pop	r14
     64e:	df 90       	pop	r13
     650:	cf 90       	pop	r12
     652:	08 95       	ret

00000654 <co2Reader_executeTask>:
	//free(self->value);
	//free(self);
}

//actual task, methods devided so that it is possible to test
void co2Reader_executeTask(co2reader_t self) {
     654:	ec 01       	movw	r28, r24
	for (;;) {
		co2Reader_measure(self);
     656:	ce 01       	movw	r24, r28
     658:	a7 df       	rcall	.-178    	; 0x5a8 <co2Reader_measure>
     65a:	fd cf       	rjmp	.-6      	; 0x656 <co2Reader_executeTask+0x2>

0000065c <co2Reader_getCO2>:
	}
}

uint8_t co2Reader_getCO2(co2reader_t self) {
	return self->value;
     65c:	fc 01       	movw	r30, r24
     65e:	80 81       	ld	r24, Z
     660:	08 95       	ret

00000662 <configuration_create>:
//it is created only once, before starting the scheduler + will never be destroyed
	_working = calloc(sizeof(bool), 1);
	_ventilation = calloc(sizeof(bool), 1);

	//by default, device should work, not to ventilate
	_working = true;
     662:	81 e0       	ldi	r24, 0x01	; 1
     664:	80 93 65 08 	sts	0x0865, r24	; 0x800865 <_working>
	_ventilation = false;
     668:	10 92 64 08 	sts	0x0864, r1	; 0x800864 <_ventilation>

	_semaphore = xSemaphoreCreateMutex();
     66c:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <xQueueCreateMutex>
     670:	90 93 63 08 	sts	0x0863, r25	; 0x800863 <_semaphore+0x1>
     674:	80 93 62 08 	sts	0x0862, r24	; 0x800862 <_semaphore>
     678:	08 95       	ret

0000067a <configuration_setWorking>:
}

//if the semaphore is initialized, take it and give it back, if not, just do the work 
void configuration_setWorking(bool value) {
     67a:	0f 93       	push	r16
     67c:	cf 93       	push	r28
    if(_semaphore!=NULL){
     67e:	20 91 62 08 	lds	r18, 0x0862	; 0x800862 <_semaphore>
     682:	30 91 63 08 	lds	r19, 0x0863	; 0x800863 <_semaphore+0x1>
     686:	21 15       	cp	r18, r1
     688:	31 05       	cpc	r19, r1
     68a:	b1 f0       	breq	.+44     	; 0x6b8 <configuration_setWorking+0x3e>
     68c:	c8 2f       	mov	r28, r24
	xSemaphoreTake(_semaphore, portMAX_DELAY);
     68e:	4f ef       	ldi	r20, 0xFF	; 255
     690:	5f ef       	ldi	r21, 0xFF	; 255
     692:	ba 01       	movw	r22, r20
     694:	c9 01       	movw	r24, r18
     696:	0e 94 aa 10 	call	0x2154	; 0x2154 <xQueueSemaphoreTake>
		_working=value;
     69a:	c0 93 65 08 	sts	0x0865, r28	; 0x800865 <_working>
	xSemaphoreGive(_semaphore);
     69e:	00 e0       	ldi	r16, 0x00	; 0
     6a0:	20 e0       	ldi	r18, 0x00	; 0
     6a2:	30 e0       	ldi	r19, 0x00	; 0
     6a4:	a9 01       	movw	r20, r18
     6a6:	60 e0       	ldi	r22, 0x00	; 0
     6a8:	70 e0       	ldi	r23, 0x00	; 0
     6aa:	80 91 62 08 	lds	r24, 0x0862	; 0x800862 <_semaphore>
     6ae:	90 91 63 08 	lds	r25, 0x0863	; 0x800863 <_semaphore+0x1>
     6b2:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <xQueueGenericSend>
     6b6:	02 c0       	rjmp	.+4      	; 0x6bc <configuration_setWorking+0x42>
	}
	else _working=value;
     6b8:	80 93 65 08 	sts	0x0865, r24	; 0x800865 <_working>
}
     6bc:	cf 91       	pop	r28
     6be:	0f 91       	pop	r16
     6c0:	08 95       	ret

000006c2 <configuration_getWorking>:

bool configuration_getWorking(void) {
	if(_semaphore!=NULL){
     6c2:	80 91 62 08 	lds	r24, 0x0862	; 0x800862 <_semaphore>
     6c6:	90 91 63 08 	lds	r25, 0x0863	; 0x800863 <_semaphore+0x1>
     6ca:	00 97       	sbiw	r24, 0x00	; 0
     6cc:	41 f0       	breq	.+16     	; 0x6de <configuration_getWorking+0x1c>
		xSemaphoreTake(_semaphore, portMAX_DELAY);
     6ce:	4f ef       	ldi	r20, 0xFF	; 255
     6d0:	5f ef       	ldi	r21, 0xFF	; 255
     6d2:	ba 01       	movw	r22, r20
     6d4:	0e 94 aa 10 	call	0x2154	; 0x2154 <xQueueSemaphoreTake>
			return _working;
     6d8:	80 91 65 08 	lds	r24, 0x0865	; 0x800865 <_working>
     6dc:	08 95       	ret
		xSemaphoreGive(_semaphore);
	}
	else return _working;
     6de:	80 91 65 08 	lds	r24, 0x0865	; 0x800865 <_working>
}
     6e2:	08 95       	ret

000006e4 <configuration_setVentilation>:

void configuration_setVentilation(bool value) {
     6e4:	0f 93       	push	r16
     6e6:	cf 93       	push	r28
	if(_semaphore!=NULL){
     6e8:	20 91 62 08 	lds	r18, 0x0862	; 0x800862 <_semaphore>
     6ec:	30 91 63 08 	lds	r19, 0x0863	; 0x800863 <_semaphore+0x1>
     6f0:	21 15       	cp	r18, r1
     6f2:	31 05       	cpc	r19, r1
     6f4:	b1 f0       	breq	.+44     	; 0x722 <configuration_setVentilation+0x3e>
     6f6:	c8 2f       	mov	r28, r24
		xSemaphoreTake(_semaphore, portMAX_DELAY);
     6f8:	4f ef       	ldi	r20, 0xFF	; 255
     6fa:	5f ef       	ldi	r21, 0xFF	; 255
     6fc:	ba 01       	movw	r22, r20
     6fe:	c9 01       	movw	r24, r18
     700:	0e 94 aa 10 	call	0x2154	; 0x2154 <xQueueSemaphoreTake>
		_ventilation=value;
     704:	c0 93 64 08 	sts	0x0864, r28	; 0x800864 <_ventilation>
		xSemaphoreGive(_semaphore);
     708:	00 e0       	ldi	r16, 0x00	; 0
     70a:	20 e0       	ldi	r18, 0x00	; 0
     70c:	30 e0       	ldi	r19, 0x00	; 0
     70e:	a9 01       	movw	r20, r18
     710:	60 e0       	ldi	r22, 0x00	; 0
     712:	70 e0       	ldi	r23, 0x00	; 0
     714:	80 91 62 08 	lds	r24, 0x0862	; 0x800862 <_semaphore>
     718:	90 91 63 08 	lds	r25, 0x0863	; 0x800863 <_semaphore+0x1>
     71c:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <xQueueGenericSend>
     720:	02 c0       	rjmp	.+4      	; 0x726 <configuration_setVentilation+0x42>
	}
	else _ventilation=value;
     722:	80 93 64 08 	sts	0x0864, r24	; 0x800864 <_ventilation>
}
     726:	cf 91       	pop	r28
     728:	0f 91       	pop	r16
     72a:	08 95       	ret

0000072c <configuration_getVentilation>:

bool configuration_getVentilation(void) {
	if(_semaphore!=NULL){
     72c:	80 91 62 08 	lds	r24, 0x0862	; 0x800862 <_semaphore>
     730:	90 91 63 08 	lds	r25, 0x0863	; 0x800863 <_semaphore+0x1>
     734:	00 97       	sbiw	r24, 0x00	; 0
     736:	41 f0       	breq	.+16     	; 0x748 <configuration_getVentilation+0x1c>
		xSemaphoreTake(_semaphore, portMAX_DELAY);
     738:	4f ef       	ldi	r20, 0xFF	; 255
     73a:	5f ef       	ldi	r21, 0xFF	; 255
     73c:	ba 01       	movw	r22, r20
     73e:	0e 94 aa 10 	call	0x2154	; 0x2154 <xQueueSemaphoreTake>
		return _ventilation;
     742:	80 91 64 08 	lds	r24, 0x0864	; 0x800864 <_ventilation>
     746:	08 95       	ret
		xSemaphoreGive(_semaphore);
	}
	else return _ventilation;
     748:	80 91 64 08 	lds	r24, 0x0864	; 0x800864 <_ventilation>
}
     74c:	08 95       	ret

0000074e <currentCondition_create>:
	//free(self->co2Data);
	//free(self->temperatureData);
	//free(self->humidityData);
	//free(self->soundData);
	//free(self);
	vPortFree(self->humidityData);//maybe use this
     74e:	61 e0       	ldi	r22, 0x01	; 1
     750:	70 e0       	ldi	r23, 0x00	; 0
     752:	88 e0       	ldi	r24, 0x08	; 8
     754:	90 e0       	ldi	r25, 0x00	; 0
     756:	0e 94 f3 2d 	call	0x5be6	; 0x5be6 <calloc>
     75a:	00 97       	sbiw	r24, 0x00	; 0
     75c:	39 f0       	breq	.+14     	; 0x76c <currentCondition_create+0x1e>
     75e:	fc 01       	movw	r30, r24
     760:	13 82       	std	Z+3, r1	; 0x03
     762:	12 82       	std	Z+2, r1	; 0x02
     764:	15 82       	std	Z+5, r1	; 0x05
     766:	14 82       	std	Z+4, r1	; 0x04
     768:	11 82       	std	Z+1, r1	; 0x01
     76a:	10 82       	st	Z, r1
     76c:	08 95       	ret

0000076e <currentCondition_setCO2>:
     76e:	00 97       	sbiw	r24, 0x00	; 0
     770:	19 f0       	breq	.+6      	; 0x778 <currentCondition_setCO2+0xa>
     772:	fc 01       	movw	r30, r24
     774:	71 83       	std	Z+1, r23	; 0x01
     776:	60 83       	st	Z, r22
     778:	08 95       	ret

0000077a <currentCondition_setHumidity>:
     77a:	00 97       	sbiw	r24, 0x00	; 0
     77c:	19 f0       	breq	.+6      	; 0x784 <currentCondition_setHumidity+0xa>
     77e:	fc 01       	movw	r30, r24
     780:	75 83       	std	Z+5, r23	; 0x05
     782:	64 83       	std	Z+4, r22	; 0x04
     784:	08 95       	ret

00000786 <currentCondition_setTemperature>:
     786:	00 97       	sbiw	r24, 0x00	; 0
     788:	19 f0       	breq	.+6      	; 0x790 <currentCondition_setTemperature+0xa>
     78a:	fc 01       	movw	r30, r24
     78c:	73 83       	std	Z+3, r23	; 0x03
     78e:	62 83       	std	Z+2, r22	; 0x02
     790:	08 95       	ret

00000792 <getcurrentConditionPayload>:
}
lora_payload_t getcurrentConditionPayload(currentCondition_t self)
{
     792:	fc 01       	movw	r30, r24
     794:	db 01       	movw	r26, r22
	lora_payload_t payload;
	payload.port_no = 1;
	payload.len = 4;
	
	payload.bytes[0] = self->temperatureData >> 8;
     796:	12 96       	adiw	r26, 0x02	; 2
     798:	2c 91       	ld	r18, X
     79a:	12 97       	sbiw	r26, 0x02	; 2
     79c:	13 96       	adiw	r26, 0x03	; 3
     79e:	3c 91       	ld	r19, X
     7a0:	13 97       	sbiw	r26, 0x03	; 3
	payload.bytes[1] = self->temperatureData & 0xFF;

	payload.bytes[2] = self->humidityData >> 8;
     7a2:	14 96       	adiw	r26, 0x04	; 4
     7a4:	8c 91       	ld	r24, X
     7a6:	14 97       	sbiw	r26, 0x04	; 4
     7a8:	15 96       	adiw	r26, 0x05	; 5
     7aa:	9c 91       	ld	r25, X
	payload.bytes[3] = self->humidityData & 0xFF;
	return payload;
     7ac:	41 e0       	ldi	r20, 0x01	; 1
     7ae:	40 83       	st	Z, r20
     7b0:	44 e0       	ldi	r20, 0x04	; 4
     7b2:	41 83       	std	Z+1, r20	; 0x01
     7b4:	32 83       	std	Z+2, r19	; 0x02
     7b6:	23 83       	std	Z+3, r18	; 0x03
     7b8:	94 83       	std	Z+4, r25	; 0x04
     7ba:	85 83       	std	Z+5, r24	; 0x05
	
     7bc:	cf 01       	movw	r24, r30
     7be:	08 95       	ret

000007c0 <device_create>:
	//free(self);*/
//}

currentCondition_t device_getCurrentCondition(device_t self) {
	return self->currentCondition;
}
     7c0:	2f 92       	push	r2
     7c2:	3f 92       	push	r3
     7c4:	4f 92       	push	r4
     7c6:	5f 92       	push	r5
     7c8:	6f 92       	push	r6
     7ca:	7f 92       	push	r7
     7cc:	8f 92       	push	r8
     7ce:	9f 92       	push	r9
     7d0:	af 92       	push	r10
     7d2:	bf 92       	push	r11
     7d4:	cf 92       	push	r12
     7d6:	df 92       	push	r13
     7d8:	ef 92       	push	r14
     7da:	ff 92       	push	r15
     7dc:	0f 93       	push	r16
     7de:	1f 93       	push	r17
     7e0:	cf 93       	push	r28
     7e2:	df 93       	push	r29
     7e4:	00 d0       	rcall	.+0      	; 0x7e6 <device_create+0x26>
     7e6:	1f 92       	push	r1
     7e8:	cd b7       	in	r28, 0x3d	; 61
     7ea:	de b7       	in	r29, 0x3e	; 62
     7ec:	28 2e       	mov	r2, r24
     7ee:	36 2e       	mov	r3, r22
     7f0:	5c 83       	std	Y+4, r21	; 0x04
     7f2:	4b 83       	std	Y+3, r20	; 0x03
     7f4:	28 01       	movw	r4, r16
     7f6:	39 01       	movw	r6, r18
     7f8:	61 e0       	ldi	r22, 0x01	; 1
     7fa:	70 e0       	ldi	r23, 0x00	; 0
     7fc:	88 e0       	ldi	r24, 0x08	; 8
     7fe:	90 e0       	ldi	r25, 0x00	; 0
     800:	0e 94 f3 2d 	call	0x5be6	; 0x5be6 <calloc>
     804:	9a 83       	std	Y+2, r25	; 0x02
     806:	89 83       	std	Y+1, r24	; 0x01
     808:	00 97       	sbiw	r24, 0x00	; 0
     80a:	09 f4       	brne	.+2      	; 0x80e <device_create+0x4e>
     80c:	42 c0       	rjmp	.+132    	; 0x892 <device_create+0xd2>
     80e:	fc 01       	movw	r30, r24
     810:	91 82       	std	Z+1, r9	; 0x01
     812:	80 82       	st	Z, r8
     814:	8a 8d       	ldd	r24, Y+26	; 0x1a
     816:	9b 8d       	ldd	r25, Y+27	; 0x1b
     818:	93 83       	std	Z+3, r25	; 0x03
     81a:	82 83       	std	Z+2, r24	; 0x02
     81c:	98 df       	rcall	.-208    	; 0x74e <currentCondition_create>
     81e:	e9 81       	ldd	r30, Y+1	; 0x01
     820:	fa 81       	ldd	r31, Y+2	; 0x02
     822:	95 83       	std	Z+5, r25	; 0x05
     824:	84 83       	std	Z+4, r24	; 0x04
     826:	8b 81       	ldd	r24, Y+3	; 0x03
     828:	9c 81       	ldd	r25, Y+4	; 0x04
     82a:	90 93 89 08 	sts	0x0889, r25	; 0x800889 <_startMeasureEventGroup+0x1>
     82e:	80 93 88 08 	sts	0x0888, r24	; 0x800888 <_startMeasureEventGroup>
     832:	40 92 84 08 	sts	0x0884, r4	; 0x800884 <_startMeasureBit>
     836:	50 92 85 08 	sts	0x0885, r5	; 0x800885 <_startMeasureBit+0x1>
     83a:	60 92 86 08 	sts	0x0886, r6	; 0x800886 <_startMeasureBit+0x2>
     83e:	70 92 87 08 	sts	0x0887, r7	; 0x800887 <_startMeasureBit+0x3>
     842:	f0 92 83 08 	sts	0x0883, r15	; 0x800883 <_readyEventGroup+0x1>
     846:	e0 92 82 08 	sts	0x0882, r14	; 0x800882 <_readyEventGroup>
     84a:	a0 92 7e 08 	sts	0x087E, r10	; 0x80087e <_readyBit>
     84e:	b0 92 7f 08 	sts	0x087F, r11	; 0x80087f <_readyBit+0x1>
     852:	c0 92 80 08 	sts	0x0880, r12	; 0x800880 <_readyBit+0x2>
     856:	d0 92 81 08 	sts	0x0881, r13	; 0x800881 <_readyBit+0x3>
     85a:	8c 8d       	ldd	r24, Y+28	; 0x1c
     85c:	9d 8d       	ldd	r25, Y+29	; 0x1d
     85e:	90 93 7d 08 	sts	0x087D, r25	; 0x80087d <_uplinkmessageBuffer+0x1>
     862:	80 93 7c 08 	sts	0x087C, r24	; 0x80087c <_uplinkmessageBuffer>
     866:	43 2d       	mov	r20, r3
     868:	50 e0       	ldi	r21, 0x00	; 0
     86a:	7f 01       	movw	r14, r30
     86c:	96 e0       	ldi	r25, 0x06	; 6
     86e:	e9 0e       	add	r14, r25
     870:	f1 1c       	adc	r15, r1
     872:	02 2d       	mov	r16, r2
     874:	9f 01       	movw	r18, r30
     876:	63 e6       	ldi	r22, 0x63	; 99
     878:	72 e0       	ldi	r23, 0x02	; 2
     87a:	84 e4       	ldi	r24, 0x44	; 68
     87c:	95 e0       	ldi	r25, 0x05	; 5
     87e:	0e 94 16 15 	call	0x2a2c	; 0x2a2c <xTaskCreate>
     882:	8a e6       	ldi	r24, 0x6A	; 106
     884:	92 e0       	ldi	r25, 0x02	; 2
     886:	9f 93       	push	r25
     888:	8f 93       	push	r24
     88a:	0e 94 91 2f 	call	0x5f22	; 0x5f22 <printf>
     88e:	0f 90       	pop	r0
     890:	0f 90       	pop	r0
     892:	89 81       	ldd	r24, Y+1	; 0x01
     894:	9a 81       	ldd	r25, Y+2	; 0x02
     896:	0f 90       	pop	r0
     898:	0f 90       	pop	r0
     89a:	0f 90       	pop	r0
     89c:	0f 90       	pop	r0
     89e:	df 91       	pop	r29
     8a0:	cf 91       	pop	r28
     8a2:	1f 91       	pop	r17
     8a4:	0f 91       	pop	r16
     8a6:	ff 90       	pop	r15
     8a8:	ef 90       	pop	r14
     8aa:	df 90       	pop	r13
     8ac:	cf 90       	pop	r12
     8ae:	bf 90       	pop	r11
     8b0:	af 90       	pop	r10
     8b2:	9f 90       	pop	r9
     8b4:	8f 90       	pop	r8
     8b6:	7f 90       	pop	r7
     8b8:	6f 90       	pop	r6
     8ba:	5f 90       	pop	r5
     8bc:	4f 90       	pop	r4
     8be:	3f 90       	pop	r3
     8c0:	2f 90       	pop	r2
     8c2:	08 95       	ret

000008c4 <device_setHumidityToCurrent>:

void device_setHumidityToCurrent(device_t self, uint16_t value)
{
	currentCondition_setHumidity(self->currentCondition,value);
     8c4:	fc 01       	movw	r30, r24
     8c6:	84 81       	ldd	r24, Z+4	; 0x04
     8c8:	95 81       	ldd	r25, Z+5	; 0x05
     8ca:	57 cf       	rjmp	.-338    	; 0x77a <currentCondition_setHumidity>
     8cc:	08 95       	ret

000008ce <device_getHumidityData>:
}


uint16_t device_getHumidityData(device_t self)
{
	if (self->humAndTempReader!=NULL)
     8ce:	fc 01       	movw	r30, r24
     8d0:	82 81       	ldd	r24, Z+2	; 0x02
     8d2:	93 81       	ldd	r25, Z+3	; 0x03
     8d4:	00 97       	sbiw	r24, 0x00	; 0
     8d6:	11 f0       	breq	.+4      	; 0x8dc <device_getHumidityData+0xe>
	{
		return humAndTempReader_getHumidity(self->humAndTempReader);
     8d8:	3b c3       	rjmp	.+1654   	; 0xf50 <humAndTempReader_getHumidity>
     8da:	08 95       	ret
	}
	else
	return -1;
     8dc:	8f ef       	ldi	r24, 0xFF	; 255
     8de:	9f ef       	ldi	r25, 0xFF	; 255
}
     8e0:	08 95       	ret

000008e2 <device_setCO2ToCurrent>:

void device_setCO2ToCurrent(device_t self, uint16_t value) {
	currentCondition_setCO2(self->currentCondition, value);
     8e2:	fc 01       	movw	r30, r24
     8e4:	84 81       	ldd	r24, Z+4	; 0x04
     8e6:	95 81       	ldd	r25, Z+5	; 0x05
     8e8:	42 cf       	rjmp	.-380    	; 0x76e <currentCondition_setCO2>
     8ea:	08 95       	ret

000008ec <device_getCO2Data>:
}

uint16_t device_getCO2Data(device_t self) {
	if (self->co2reader != NULL)
     8ec:	fc 01       	movw	r30, r24
     8ee:	80 81       	ld	r24, Z
     8f0:	91 81       	ldd	r25, Z+1	; 0x01
     8f2:	00 97       	sbiw	r24, 0x00	; 0
     8f4:	19 f0       	breq	.+6      	; 0x8fc <device_getCO2Data+0x10>
		return co2Reader_getCO2(self->co2reader);
     8f6:	b2 de       	rcall	.-668    	; 0x65c <co2Reader_getCO2>
     8f8:	90 e0       	ldi	r25, 0x00	; 0
     8fa:	08 95       	ret
	else return -1;
     8fc:	8f ef       	ldi	r24, 0xFF	; 255
     8fe:	9f ef       	ldi	r25, 0xFF	; 255
}
     900:	08 95       	ret

00000902 <device_setTemperatureToCurrent>:

void device_setTemperatureToCurrent(device_t self, int16_t value)
{
	
	currentCondition_setTemperature(self->currentCondition,value);
     902:	fc 01       	movw	r30, r24
     904:	84 81       	ldd	r24, Z+4	; 0x04
     906:	95 81       	ldd	r25, Z+5	; 0x05
     908:	3e cf       	rjmp	.-388    	; 0x786 <currentCondition_setTemperature>
     90a:	08 95       	ret

0000090c <device_getTemperatureData>:
}


int16_t device_getTemperatureData(device_t self)
{
	if (self->humAndTempReader!=NULL)
     90c:	fc 01       	movw	r30, r24
     90e:	82 81       	ldd	r24, Z+2	; 0x02
     910:	93 81       	ldd	r25, Z+3	; 0x03
     912:	00 97       	sbiw	r24, 0x00	; 0
     914:	11 f0       	breq	.+4      	; 0x91a <device_getTemperatureData+0xe>
	{
		return humAndTempReader_getTemperature(self->humAndTempReader);
     916:	20 c3       	rjmp	.+1600   	; 0xf58 <humAndTempReader_getTemperature>
     918:	08 95       	ret
	}
	else
	return -1;
     91a:	8f ef       	ldi	r24, 0xFF	; 255
     91c:	9f ef       	ldi	r25, 0xFF	; 255
	
     91e:	08 95       	ret

00000920 <device_startMeasuring>:
void device_executeTask(device_t self) {
	for (;;)
		device_startMeasuring(self);
}

void device_startMeasuring(device_t self) {
     920:	af 92       	push	r10
     922:	bf 92       	push	r11
     924:	cf 92       	push	r12
     926:	df 92       	push	r13
     928:	ef 92       	push	r14
     92a:	ff 92       	push	r15
     92c:	0f 93       	push	r16
     92e:	1f 93       	push	r17
     930:	cf 93       	push	r28
     932:	df 93       	push	r29
     934:	cd b7       	in	r28, 0x3d	; 61
     936:	de b7       	in	r29, 0x3e	; 62
     938:	66 97       	sbiw	r28, 0x16	; 22
     93a:	0f b6       	in	r0, 0x3f	; 63
     93c:	f8 94       	cli
     93e:	de bf       	out	0x3e, r29	; 62
     940:	0f be       	out	0x3f, r0	; 63
     942:	cd bf       	out	0x3d, r28	; 61
     944:	5c 01       	movw	r10, r24
	//if(configuration_getWorking()==true){

	//if ventilation needed -> ventilate 

	//tell sensors to start meassuring 
	xEventGroupSetBits(_startMeasureEventGroup, _startMeasureBit);
     946:	40 91 84 08 	lds	r20, 0x0884	; 0x800884 <_startMeasureBit>
     94a:	50 91 85 08 	lds	r21, 0x0885	; 0x800885 <_startMeasureBit+0x1>
     94e:	60 91 86 08 	lds	r22, 0x0886	; 0x800886 <_startMeasureBit+0x2>
     952:	70 91 87 08 	lds	r23, 0x0887	; 0x800887 <_startMeasureBit+0x3>
     956:	80 91 88 08 	lds	r24, 0x0888	; 0x800888 <_startMeasureEventGroup>
     95a:	90 91 89 08 	lds	r25, 0x0889	; 0x800889 <_startMeasureEventGroup+0x1>
     95e:	4c d5       	rcall	.+2712   	; 0x13f8 <xEventGroupSetBits>
	printf("device has set bits");
     960:	84 e7       	ldi	r24, 0x74	; 116
     962:	92 e0       	ldi	r25, 0x02	; 2
     964:	9f 93       	push	r25
     966:	8f 93       	push	r24
     968:	0e 94 91 2f 	call	0x5f22	; 0x5f22 <printf>

	//wait for sensors to read data
	EventBits_t uxBits = xEventGroupWaitBits(_readyEventGroup, //eventGroup it is interested in
     96c:	40 91 7e 08 	lds	r20, 0x087E	; 0x80087e <_readyBit>
     970:	50 91 7f 08 	lds	r21, 0x087F	; 0x80087f <_readyBit+0x1>
     974:	60 91 80 08 	lds	r22, 0x0880	; 0x800880 <_readyBit+0x2>
     978:	70 91 81 08 	lds	r23, 0x0881	; 0x800881 <_readyBit+0x3>
     97c:	cc 24       	eor	r12, r12
     97e:	ca 94       	dec	r12
     980:	dc 2c       	mov	r13, r12
     982:	76 01       	movw	r14, r12
     984:	01 e0       	ldi	r16, 0x01	; 1
     986:	21 e0       	ldi	r18, 0x01	; 1
     988:	80 91 82 08 	lds	r24, 0x0882	; 0x800882 <_readyEventGroup>
     98c:	90 91 83 08 	lds	r25, 0x0883	; 0x800883 <_readyEventGroup+0x1>
     990:	73 d4       	rcall	.+2278   	; 0x1278 <xEventGroupWaitBits>
		_readyBit, //bits it is interested in
		pdTRUE, //clears the bits 
		pdTRUE, //waits for both bits to be set
		portMAX_DELAY); //waits forever if needed

	if ((uxBits & (_readyBit)) == (_readyBit)) {
     992:	00 91 7e 08 	lds	r16, 0x087E	; 0x80087e <_readyBit>
     996:	10 91 7f 08 	lds	r17, 0x087F	; 0x80087f <_readyBit+0x1>
     99a:	20 91 80 08 	lds	r18, 0x0880	; 0x800880 <_readyBit+0x2>
     99e:	30 91 81 08 	lds	r19, 0x0881	; 0x800881 <_readyBit+0x3>
     9a2:	dc 01       	movw	r26, r24
     9a4:	cb 01       	movw	r24, r22
     9a6:	80 23       	and	r24, r16
     9a8:	91 23       	and	r25, r17
     9aa:	a2 23       	and	r26, r18
     9ac:	b3 23       	and	r27, r19
     9ae:	0f 90       	pop	r0
     9b0:	0f 90       	pop	r0
     9b2:	08 17       	cp	r16, r24
     9b4:	19 07       	cpc	r17, r25
     9b6:	2a 07       	cpc	r18, r26
     9b8:	3b 07       	cpc	r19, r27
     9ba:	09 f0       	breq	.+2      	; 0x9be <device_startMeasuring+0x9e>
		device_setCO2ToCurrent(self, device_getCO2Data(self));
     9bc:	54 c0       	rjmp	.+168    	; 0xa66 <device_startMeasuring+0x146>
     9be:	c5 01       	movw	r24, r10
     9c0:	95 df       	rcall	.-214    	; 0x8ec <device_getCO2Data>
     9c2:	bc 01       	movw	r22, r24
     9c4:	c5 01       	movw	r24, r10
		device_setTemperatureToCurrent(self, device_getTemperatureData(self));
     9c6:	8d df       	rcall	.-230    	; 0x8e2 <device_setCO2ToCurrent>
     9c8:	c5 01       	movw	r24, r10
     9ca:	a0 df       	rcall	.-192    	; 0x90c <device_getTemperatureData>
     9cc:	bc 01       	movw	r22, r24
     9ce:	c5 01       	movw	r24, r10
		device_setHumidityToCurrent(self, device_getHumidityData(self));
     9d0:	98 df       	rcall	.-208    	; 0x902 <device_setTemperatureToCurrent>
     9d2:	c5 01       	movw	r24, r10
     9d4:	7c df       	rcall	.-264    	; 0x8ce <device_getHumidityData>
     9d6:	bc 01       	movw	r22, r24
     9d8:	c5 01       	movw	r24, r10
     9da:	74 df       	rcall	.-280    	; 0x8c4 <device_setHumidityToCurrent>
		
		printf("device got done bit\n");
     9dc:	88 e8       	ldi	r24, 0x88	; 136
     9de:	92 e0       	ldi	r25, 0x02	; 2
     9e0:	0e 94 a4 2f 	call	0x5f48	; 0x5f48 <puts>
		
		printf("CO2 is: %u\n", co2Reader_getCO2(self->co2reader));
     9e4:	f5 01       	movw	r30, r10
     9e6:	80 81       	ld	r24, Z
     9e8:	91 81       	ldd	r25, Z+1	; 0x01
     9ea:	38 de       	rcall	.-912    	; 0x65c <co2Reader_getCO2>
     9ec:	1f 92       	push	r1
     9ee:	8f 93       	push	r24
     9f0:	8c e9       	ldi	r24, 0x9C	; 156
     9f2:	92 e0       	ldi	r25, 0x02	; 2
     9f4:	9f 93       	push	r25
     9f6:	8f 93       	push	r24
     9f8:	0e 94 91 2f 	call	0x5f22	; 0x5f22 <printf>
		printf("Temperature is: %d\n", device_getTemperatureData(self));
     9fc:	c5 01       	movw	r24, r10
     9fe:	86 df       	rcall	.-244    	; 0x90c <device_getTemperatureData>
     a00:	9f 93       	push	r25
     a02:	8f 93       	push	r24
     a04:	88 ea       	ldi	r24, 0xA8	; 168
     a06:	92 e0       	ldi	r25, 0x02	; 2
     a08:	9f 93       	push	r25
     a0a:	8f 93       	push	r24
     a0c:	0e 94 91 2f 	call	0x5f22	; 0x5f22 <printf>
		printf("Humidity is: %u\n", device_getHumidityData(self));
     a10:	c5 01       	movw	r24, r10
     a12:	5d df       	rcall	.-326    	; 0x8ce <device_getHumidityData>
     a14:	9f 93       	push	r25
     a16:	8f 93       	push	r24
     a18:	8c eb       	ldi	r24, 0xBC	; 188
     a1a:	92 e0       	ldi	r25, 0x02	; 2
     a1c:	9f 93       	push	r25
     a1e:	8f 93       	push	r24
     a20:	0e 94 91 2f 	call	0x5f22	; 0x5f22 <printf>
		
		/*Perhaps loraPayload is not a good idea to be here*/
		_uplink_payload = getcurrentConditionPayload(self->currentCondition);
     a24:	f5 01       	movw	r30, r10
     a26:	64 81       	ldd	r22, Z+4	; 0x04
     a28:	75 81       	ldd	r23, Z+5	; 0x05
     a2a:	ce 01       	movw	r24, r28
     a2c:	01 96       	adiw	r24, 0x01	; 1
     a2e:	b1 de       	rcall	.-670    	; 0x792 <getcurrentConditionPayload>
     a30:	86 e1       	ldi	r24, 0x16	; 22
     a32:	fe 01       	movw	r30, r28
     a34:	31 96       	adiw	r30, 0x01	; 1
     a36:	a6 e6       	ldi	r26, 0x66	; 102
     a38:	b8 e0       	ldi	r27, 0x08	; 8
     a3a:	01 90       	ld	r0, Z+
     a3c:	0d 92       	st	X+, r0
     a3e:	8a 95       	dec	r24
     a40:	e1 f7       	brne	.-8      	; 0xa3a <device_startMeasuring+0x11a>
     a42:	0f ef       	ldi	r16, 0xFF	; 255
			//printf("The temperature in device is: %d\n", _uplink_payload.bytes[0]);
			//printf("The temperature2 in device is: %d\n", _uplink_payload.bytes[1]);
			//printf("The humidity in device is: %u\n", _uplink_payload.bytes[2]);
			//printf("The humidity2 in device is: %u\n", _uplink_payload.bytes[3]);
			
			xMessageBufferSend(_uplinkmessageBuffer,(void*) &_uplink_payload,sizeof(_uplink_payload),portMAX_DELAY);
     a44:	1f ef       	ldi	r17, 0xFF	; 255
     a46:	98 01       	movw	r18, r16
     a48:	46 e1       	ldi	r20, 0x16	; 22
     a4a:	50 e0       	ldi	r21, 0x00	; 0
     a4c:	66 e6       	ldi	r22, 0x66	; 102
     a4e:	78 e0       	ldi	r23, 0x08	; 8
     a50:	80 91 7c 08 	lds	r24, 0x087C	; 0x80087c <_uplinkmessageBuffer>
     a54:	90 91 7d 08 	lds	r25, 0x087D	; 0x80087d <_uplinkmessageBuffer+0x1>
     a58:	0e 94 e6 12 	call	0x25cc	; 0x25cc <xStreamBufferSend>
     a5c:	0f b6       	in	r0, 0x3f	; 63
     a5e:	f8 94       	cli
     a60:	de bf       	out	0x3e, r29	; 62
     a62:	0f be       	out	0x3f, r0	; 63
     a64:	cd bf       	out	0x3d, r28	; 61
     a66:	66 96       	adiw	r28, 0x16	; 22
		//}
		//if the device is not on, wait a bit and check if anything is changed
		//else vTaskDelay(5000);
		
	}
}
     a68:	0f b6       	in	r0, 0x3f	; 63
     a6a:	f8 94       	cli
     a6c:	de bf       	out	0x3e, r29	; 62
     a6e:	0f be       	out	0x3f, r0	; 63
     a70:	cd bf       	out	0x3d, r28	; 61
     a72:	df 91       	pop	r29
     a74:	cf 91       	pop	r28
     a76:	1f 91       	pop	r17
     a78:	0f 91       	pop	r16
     a7a:	ff 90       	pop	r15
     a7c:	ef 90       	pop	r14
     a7e:	df 90       	pop	r13
     a80:	cf 90       	pop	r12
     a82:	bf 90       	pop	r11
     a84:	af 90       	pop	r10
     a86:	08 95       	ret

00000a88 <device_executeTask>:
     a88:	ec 01       	movw	r28, r24
}

//devided so we can test
void device_executeTask(device_t self) {
	for (;;)
		device_startMeasuring(self);
     a8a:	ce 01       	movw	r24, r28
     a8c:	49 df       	rcall	.-366    	; 0x920 <device_startMeasuring>
     a8e:	fd cf       	rjmp	.-6      	; 0xa8a <device_executeTask+0x2>

00000a90 <lora_DownLinkHandler_create>:
static char _out_buf[100];



void lora_DownLinkHandler_create(UBaseType_t lora_handler_task_priority, MessageBufferHandle_t xMessageBuffer,bool isSet)
{
     a90:	ef 92       	push	r14
     a92:	ff 92       	push	r15
     a94:	0f 93       	push	r16
     a96:	9b 01       	movw	r18, r22
	_isSet=isSet;
     a98:	40 93 ee 08 	sts	0x08EE, r20	; 0x8008ee <_isSet>
	xTaskCreate(
     a9c:	e1 2c       	mov	r14, r1
     a9e:	f1 2c       	mov	r15, r1
     aa0:	08 2f       	mov	r16, r24
     aa2:	48 e8       	ldi	r20, 0x88	; 136
     aa4:	51 e0       	ldi	r21, 0x01	; 1
     aa6:	6d ec       	ldi	r22, 0xCD	; 205
     aa8:	72 e0       	ldi	r23, 0x02	; 2
     aaa:	82 eb       	ldi	r24, 0xB2	; 178
     aac:	96 e0       	ldi	r25, 0x06	; 6
     aae:	0e 94 16 15 	call	0x2a2c	; 0x2a2c <xTaskCreate>
	,  configMINIMAL_STACK_SIZE+200  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  xMessageBuffer
	,  lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
	
}
     ab2:	0f 91       	pop	r16
     ab4:	ff 90       	pop	r15
     ab6:	ef 90       	pop	r14
     ab8:	08 95       	ret

00000aba <lora_DownLinkHandler_task>:
		}
	}
}

	void lora_DownLinkHandler_task(MessageBufferHandle_t xMessageBuffer)
	{
     aba:	df 92       	push	r13
     abc:	ef 92       	push	r14
     abe:	ff 92       	push	r15
     ac0:	0f 93       	push	r16
     ac2:	1f 93       	push	r17
     ac4:	cf 93       	push	r28
     ac6:	df 93       	push	r29
     ac8:	7c 01       	movw	r14, r24
		size_t xBytesToSend;
		char rxData[50];
		
		
			if (!_isSet)
     aca:	80 91 ee 08 	lds	r24, 0x08EE	; 0x8008ee <_isSet>
     ace:	81 11       	cpse	r24, r1
     ad0:	d0 c0       	rjmp	.+416    	; 0xc72 <lora_DownLinkHandler_task+0x1b8>
			{
				// Hardware reset of LoRaWAN transceiver
				lora_driver_reset_rn2483(1);
     ad2:	81 e0       	ldi	r24, 0x01	; 1
     ad4:	0e 94 fb 22 	call	0x45f6	; 0x45f6 <lora_driver_reset_rn2483>
				vTaskDelay(2);
     ad8:	62 e0       	ldi	r22, 0x02	; 2
     ada:	70 e0       	ldi	r23, 0x00	; 0
     adc:	80 e0       	ldi	r24, 0x00	; 0
     ade:	90 e0       	ldi	r25, 0x00	; 0
     ae0:	0e 94 d6 17 	call	0x2fac	; 0x2fac <vTaskDelay>
				lora_driver_reset_rn2483(0);
     ae4:	80 e0       	ldi	r24, 0x00	; 0
     ae6:	0e 94 fb 22 	call	0x45f6	; 0x45f6 <lora_driver_reset_rn2483>
				// Give it a chance to wakeup
				vTaskDelay(150);
     aea:	66 e9       	ldi	r22, 0x96	; 150
     aec:	70 e0       	ldi	r23, 0x00	; 0
     aee:	80 e0       	ldi	r24, 0x00	; 0
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	0e 94 d6 17 	call	0x2fac	; 0x2fac <vTaskDelay>

				lora_driver_flush_buffers(); // get rid of first version string from module after reset!
     af6:	0e 94 b1 22 	call	0x4562	; 0x4562 <lora_driver_flush_buffers>
}

static void _lora_setup(void)
{
	e_LoRa_return_code_t rc;
	led_slow_blink(led_ST2); // OPTIONAL: Led the green led blink slowly while we are setting up LoRa
     afa:	81 e0       	ldi	r24, 0x01	; 1
     afc:	0e 94 09 21 	call	0x4212	; 0x4212 <led_slow_blink>
	//The below code is required to be executed only once due to the fact that these MAC settings
	// can be stored inside of the tranciever
	//START ON ONE TIME USE CODE
	
	// Factory reset the transceiver
	printf("FactoryReset >%s<\n", lora_driver_map_return_code_to_text(lora_driver_rn2483_factory_reset()));
     b00:	0e 94 0f 23 	call	0x461e	; 0x461e <lora_driver_rn2483_factory_reset>
     b04:	0e 94 8c 25 	call	0x4b18	; 0x4b18 <lora_driver_map_return_code_to_text>
     b08:	9f 93       	push	r25
     b0a:	8f 93       	push	r24
     b0c:	86 ed       	ldi	r24, 0xD6	; 214
     b0e:	92 e0       	ldi	r25, 0x02	; 2
     b10:	9f 93       	push	r25
     b12:	8f 93       	push	r24
     b14:	0e 94 91 2f 	call	0x5f22	; 0x5f22 <printf>
	
	// Configure to EU868 LoRaWAN standards
	printf("Configure to EU868 >%s<\n", lora_driver_map_return_code_to_text(lora_driver_configure_to_eu868()));
     b18:	0e 94 8d 24 	call	0x491a	; 0x491a <lora_driver_configure_to_eu868>
     b1c:	0e 94 8c 25 	call	0x4b18	; 0x4b18 <lora_driver_map_return_code_to_text>
     b20:	9f 93       	push	r25
     b22:	8f 93       	push	r24
     b24:	89 ee       	ldi	r24, 0xE9	; 233
     b26:	92 e0       	ldi	r25, 0x02	; 2
     b28:	9f 93       	push	r25
     b2a:	8f 93       	push	r24
     b2c:	0e 94 91 2f 	call	0x5f22	; 0x5f22 <printf>

	// Get the transceivers HW EUI
	rc = lora_driver_get_rn2483_hweui(_out_buf);
     b30:	8a e8       	ldi	r24, 0x8A	; 138
     b32:	98 e0       	ldi	r25, 0x08	; 8
     b34:	0e 94 21 23 	call	0x4642	; 0x4642 <lora_driver_get_rn2483_hweui>
	printf("Get HWEUI >%s<: %s\n",lora_driver_map_return_code_to_text(rc), _out_buf);
     b38:	0e 94 8c 25 	call	0x4b18	; 0x4b18 <lora_driver_map_return_code_to_text>
     b3c:	ca e8       	ldi	r28, 0x8A	; 138
     b3e:	d8 e0       	ldi	r29, 0x08	; 8
     b40:	df 93       	push	r29
     b42:	cf 93       	push	r28
     b44:	9f 93       	push	r25
     b46:	8f 93       	push	r24
     b48:	82 e0       	ldi	r24, 0x02	; 2
     b4a:	93 e0       	ldi	r25, 0x03	; 3
     b4c:	9f 93       	push	r25
     b4e:	8f 93       	push	r24
     b50:	0e 94 91 2f 	call	0x5f22	; 0x5f22 <printf>

	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_map_return_code_to_text(lora_driver_set_device_identifier(_out_buf)));
     b54:	ce 01       	movw	r24, r28
     b56:	0e 94 3d 23 	call	0x467a	; 0x467a <lora_driver_set_device_identifier>
     b5a:	0e 94 8c 25 	call	0x4b18	; 0x4b18 <lora_driver_map_return_code_to_text>
     b5e:	9f 93       	push	r25
     b60:	8f 93       	push	r24
     b62:	df 93       	push	r29
     b64:	cf 93       	push	r28
     b66:	86 e1       	ldi	r24, 0x16	; 22
     b68:	93 e0       	ldi	r25, 0x03	; 3
     b6a:	9f 93       	push	r25
     b6c:	8f 93       	push	r24
     b6e:	0e 94 91 2f 	call	0x5f22	; 0x5f22 <printf>

	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_map_return_code_to_text(lora_driver_set_otaa_identity(LORA_appEUI,LORA_appKEY,_out_buf)));
     b72:	ae 01       	movw	r20, r28
     b74:	6b e2       	ldi	r22, 0x2B	; 43
     b76:	73 e0       	ldi	r23, 0x03	; 3
     b78:	8c e4       	ldi	r24, 0x4C	; 76
     b7a:	93 e0       	ldi	r25, 0x03	; 3
     b7c:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <lora_driver_set_otaa_identity>
     b80:	0e 94 8c 25 	call	0x4b18	; 0x4b18 <lora_driver_map_return_code_to_text>
     b84:	9f 93       	push	r25
     b86:	8f 93       	push	r24
     b88:	df 93       	push	r29
     b8a:	cf 93       	push	r28
     b8c:	8b e2       	ldi	r24, 0x2B	; 43
     b8e:	93 e0       	ldi	r25, 0x03	; 3
     b90:	9f 93       	push	r25
     b92:	8f 93       	push	r24
     b94:	8c e4       	ldi	r24, 0x4C	; 76
     b96:	93 e0       	ldi	r25, 0x03	; 3
     b98:	9f 93       	push	r25
     b9a:	8f 93       	push	r24
     b9c:	8f e5       	ldi	r24, 0x5F	; 95
     b9e:	93 e0       	ldi	r25, 0x03	; 3
     ba0:	9f 93       	push	r25
     ba2:	8f 93       	push	r24
     ba4:	0e 94 91 2f 	call	0x5f22	; 0x5f22 <printf>

	// Save all the MAC settings in the transceiver
	printf("Save mac >%s<\n",lora_driver_map_return_code_to_text(lora_driver_save_mac()));
     ba8:	0e 94 70 23 	call	0x46e0	; 0x46e0 <lora_driver_save_mac>
     bac:	0e 94 8c 25 	call	0x4b18	; 0x4b18 <lora_driver_map_return_code_to_text>
     bb0:	9f 93       	push	r25
     bb2:	8f 93       	push	r24
     bb4:	85 e9       	ldi	r24, 0x95	; 149
     bb6:	93 e0       	ldi	r25, 0x03	; 3
     bb8:	9f 93       	push	r25
     bba:	8f 93       	push	r24
     bbc:	0e 94 91 2f 	call	0x5f22	; 0x5f22 <printf>

	//END OF ONE TIME USE CODE


	// Enable Adaptive Data Rate
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_map_return_code_to_text(lora_driver_set_adaptive_data_rate(LoRa_ON)));
     bc0:	8d b7       	in	r24, 0x3d	; 61
     bc2:	9e b7       	in	r25, 0x3e	; 62
     bc4:	82 96       	adiw	r24, 0x22	; 34
     bc6:	0f b6       	in	r0, 0x3f	; 63
     bc8:	f8 94       	cli
     bca:	9e bf       	out	0x3e, r25	; 62
     bcc:	0f be       	out	0x3f, r0	; 63
     bce:	8d bf       	out	0x3d, r24	; 61
     bd0:	81 e0       	ldi	r24, 0x01	; 1
     bd2:	0e 94 6a 24 	call	0x48d4	; 0x48d4 <lora_driver_set_adaptive_data_rate>
     bd6:	0e 94 8c 25 	call	0x4b18	; 0x4b18 <lora_driver_map_return_code_to_text>
     bda:	9f 93       	push	r25
     bdc:	8f 93       	push	r24
     bde:	84 ea       	ldi	r24, 0xA4	; 164
     be0:	93 e0       	ldi	r25, 0x03	; 3
     be2:	9f 93       	push	r25
     be4:	8f 93       	push	r24
     be6:	0e 94 91 2f 	call	0x5f22	; 0x5f22 <printf>

	// Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	printf("Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_map_return_code_to_text(lora_driver_set_receive_delay(500)));
     bea:	84 ef       	ldi	r24, 0xF4	; 244
     bec:	91 e0       	ldi	r25, 0x01	; 1
     bee:	0e 94 75 24 	call	0x48ea	; 0x48ea <lora_driver_set_receive_delay>
     bf2:	0e 94 8c 25 	call	0x4b18	; 0x4b18 <lora_driver_map_return_code_to_text>
     bf6:	9f 93       	push	r25
     bf8:	8f 93       	push	r24
     bfa:	81 e0       	ldi	r24, 0x01	; 1
     bfc:	8f 93       	push	r24
     bfe:	84 ef       	ldi	r24, 0xF4	; 244
     c00:	8f 93       	push	r24
     c02:	85 ec       	ldi	r24, 0xC5	; 197
     c04:	93 e0       	ldi	r25, 0x03	; 3
     c06:	9f 93       	push	r25
     c08:	8f 93       	push	r24
     c0a:	0e 94 91 2f 	call	0x5f22	; 0x5f22 <printf>
     c0e:	8d b7       	in	r24, 0x3d	; 61
     c10:	9e b7       	in	r25, 0x3e	; 62
     c12:	0a 96       	adiw	r24, 0x0a	; 10
     c14:	0f b6       	in	r0, 0x3f	; 63
     c16:	f8 94       	cli
     c18:	9e bf       	out	0x3e, r25	; 62
     c1a:	0f be       	out	0x3f, r0	; 63
     c1c:	8d bf       	out	0x3d, r24	; 61
     c1e:	ca e0       	ldi	r28, 0x0A	; 10
     c20:	d0 e0       	ldi	r29, 0x00	; 0
	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
	
	do {
		rc = lora_driver_join(LoRa_OTAA);
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_map_return_code_to_text(rc));
     c22:	05 ee       	ldi	r16, 0xE5	; 229
     c24:	13 e0       	ldi	r17, 0x03	; 3

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
	
	do {
		rc = lora_driver_join(LoRa_OTAA);
     c26:	80 e0       	ldi	r24, 0x00	; 0
     c28:	0e 94 76 23 	call	0x46ec	; 0x46ec <lora_driver_join>
     c2c:	d8 2e       	mov	r13, r24
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_map_return_code_to_text(rc));
     c2e:	0e 94 8c 25 	call	0x4b18	; 0x4b18 <lora_driver_map_return_code_to_text>
     c32:	9f 93       	push	r25
     c34:	8f 93       	push	r24
     c36:	df 93       	push	r29
     c38:	cf 93       	push	r28
     c3a:	1f 93       	push	r17
     c3c:	0f 93       	push	r16
     c3e:	0e 94 91 2f 	call	0x5f22	; 0x5f22 <printf>

		if ( rc != LoRa_ACCEPTED)
     c42:	0f 90       	pop	r0
     c44:	0f 90       	pop	r0
     c46:	0f 90       	pop	r0
     c48:	0f 90       	pop	r0
     c4a:	0f 90       	pop	r0
     c4c:	0f 90       	pop	r0
     c4e:	88 e0       	ldi	r24, 0x08	; 8
     c50:	d8 16       	cp	r13, r24
     c52:	09 f4       	brne	.+2      	; 0xc56 <lora_DownLinkHandler_task+0x19c>
     c54:	71 c0       	rjmp	.+226    	; 0xd38 <lora_DownLinkHandler_task+0x27e>
		{
			// Make the red led pulse to tell something went wrong
			led_long_puls(led_ST1); // OPTIONAL
     c56:	80 e0       	ldi	r24, 0x00	; 0
     c58:	0e 94 75 21 	call	0x42ea	; 0x42ea <led_long_puls>
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
     c5c:	66 e3       	ldi	r22, 0x36	; 54
     c5e:	71 e0       	ldi	r23, 0x01	; 1
     c60:	80 e0       	ldi	r24, 0x00	; 0
     c62:	90 e0       	ldi	r25, 0x00	; 0
     c64:	0e 94 d6 17 	call	0x2fac	; 0x2fac <vTaskDelay>
     c68:	21 97       	sbiw	r28, 0x01	; 1
		}
		else
		{
			break;
		}
	} while (--maxJoinTriesLeft);
     c6a:	e9 f6       	brne	.-70     	; 0xc26 <lora_DownLinkHandler_task+0x16c>
     c6c:	6c c0       	rjmp	.+216    	; 0xd46 <lora_DownLinkHandler_task+0x28c>

		// Switches to another task with a priority of equal or greater size. If no such task is found it stays on the same.
		//Perhaps it should be in a loop if the task itself is in  a loop
		while (1)
		{
			taskYIELD();
     c6e:	dc d6       	rcall	.+3512   	; 0x1a28 <vPortYield>
     c70:	fe cf       	rjmp	.-4      	; 0xc6e <lora_DownLinkHandler_task+0x1b4>
				_lora_setup();
				_isSet=true;
			}
		
		size_t xBytesReceived;
		xBytesReceived = xMessageBufferReceive(xMessageBuffer,(void*) &_downlink_payload,sizeof(lora_payload_t),portMAX_DELAY);
     c72:	0f ef       	ldi	r16, 0xFF	; 255
     c74:	1f ef       	ldi	r17, 0xFF	; 255
     c76:	98 01       	movw	r18, r16
     c78:	46 e1       	ldi	r20, 0x16	; 22
     c7a:	50 e0       	ldi	r21, 0x00	; 0
     c7c:	6f ee       	ldi	r22, 0xEF	; 239
     c7e:	78 e0       	ldi	r23, 0x08	; 8
     c80:	c7 01       	movw	r24, r14
     c82:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <xStreamBufferReceive>
		
		//decode the received paylaod assuming we have only temperature_setting
		//Check that the lenght we've received is two as expected
		
		uint8_t command = _downlink_payload.bytes[0] + _downlink_payload.bytes[1];
     c86:	ef ee       	ldi	r30, 0xEF	; 239
     c88:	f8 e0       	ldi	r31, 0x08	; 8
		
		switch(command)
     c8a:	92 81       	ldd	r25, Z+2	; 0x02
     c8c:	83 81       	ldd	r24, Z+3	; 0x03
     c8e:	89 0f       	add	r24, r25
     c90:	8d 32       	cpi	r24, 0x2D	; 45
     c92:	c9 f0       	breq	.+50     	; 0xcc6 <lora_DownLinkHandler_task+0x20c>
     c94:	18 f4       	brcc	.+6      	; 0xc9c <lora_DownLinkHandler_task+0x1e2>
     c96:	8c 32       	cpi	r24, 0x2C	; 44
     c98:	31 f0       	breq	.+12     	; 0xca6 <lora_DownLinkHandler_task+0x1ec>
     c9a:	45 c0       	rjmp	.+138    	; 0xd26 <lora_DownLinkHandler_task+0x26c>
     c9c:	88 33       	cpi	r24, 0x38	; 56
     c9e:	19 f1       	breq	.+70     	; 0xce6 <lora_DownLinkHandler_task+0x22c>
     ca0:	89 33       	cpi	r24, 0x39	; 57
     ca2:	89 f1       	breq	.+98     	; 0xd06 <lora_DownLinkHandler_task+0x24c>
     ca4:	40 c0       	rjmp	.+128    	; 0xd26 <lora_DownLinkHandler_task+0x26c>
		{
		//D0
		case 44:
			configuration_setWorking(false);
     ca6:	80 e0       	ldi	r24, 0x00	; 0
			printf("The bool for device is set to %d",configuration_getWorking());
     ca8:	e8 dc       	rcall	.-1584   	; 0x67a <configuration_setWorking>
     caa:	0b dd       	rcall	.-1514   	; 0x6c2 <configuration_getWorking>
     cac:	1f 92       	push	r1
     cae:	8f 93       	push	r24
     cb0:	85 e0       	ldi	r24, 0x05	; 5
     cb2:	94 e0       	ldi	r25, 0x04	; 4
     cb4:	9f 93       	push	r25
     cb6:	8f 93       	push	r24
     cb8:	0e 94 91 2f 	call	0x5f22	; 0x5f22 <printf>
			break;
     cbc:	0f 90       	pop	r0
     cbe:	0f 90       	pop	r0
     cc0:	0f 90       	pop	r0
     cc2:	0f 90       	pop	r0
		//D1
		case 45 :
			configuration_setWorking(true);
     cc4:	47 c0       	rjmp	.+142    	; 0xd54 <lora_DownLinkHandler_task+0x29a>
     cc6:	81 e0       	ldi	r24, 0x01	; 1
     cc8:	d8 dc       	rcall	.-1616   	; 0x67a <configuration_setWorking>
			printf("The bool for device is set to %d",configuration_getWorking());
     cca:	fb dc       	rcall	.-1546   	; 0x6c2 <configuration_getWorking>
     ccc:	1f 92       	push	r1
     cce:	8f 93       	push	r24
     cd0:	85 e0       	ldi	r24, 0x05	; 5
     cd2:	94 e0       	ldi	r25, 0x04	; 4
     cd4:	9f 93       	push	r25
     cd6:	8f 93       	push	r24
     cd8:	0e 94 91 2f 	call	0x5f22	; 0x5f22 <printf>
     cdc:	0f 90       	pop	r0
			break;
     cde:	0f 90       	pop	r0
     ce0:	0f 90       	pop	r0
     ce2:	0f 90       	pop	r0
		//V0
		case 56:
			configuration_setVentilation(false);
     ce4:	37 c0       	rjmp	.+110    	; 0xd54 <lora_DownLinkHandler_task+0x29a>
     ce6:	80 e0       	ldi	r24, 0x00	; 0
     ce8:	fd dc       	rcall	.-1542   	; 0x6e4 <configuration_setVentilation>
			printf("The bool for ventilation is set to %d",configuration_getVentilation());
     cea:	20 dd       	rcall	.-1472   	; 0x72c <configuration_getVentilation>
     cec:	1f 92       	push	r1
     cee:	8f 93       	push	r24
     cf0:	86 e2       	ldi	r24, 0x26	; 38
     cf2:	94 e0       	ldi	r25, 0x04	; 4
     cf4:	9f 93       	push	r25
     cf6:	8f 93       	push	r24
     cf8:	0e 94 91 2f 	call	0x5f22	; 0x5f22 <printf>
			break;
     cfc:	0f 90       	pop	r0
     cfe:	0f 90       	pop	r0
     d00:	0f 90       	pop	r0
     d02:	0f 90       	pop	r0
		//V1
		case 57:
			configuration_setVentilation(true);
     d04:	27 c0       	rjmp	.+78     	; 0xd54 <lora_DownLinkHandler_task+0x29a>
     d06:	81 e0       	ldi	r24, 0x01	; 1
     d08:	ed dc       	rcall	.-1574   	; 0x6e4 <configuration_setVentilation>
			printf("The bool for ventilation is set to %d",configuration_getVentilation());
     d0a:	10 dd       	rcall	.-1504   	; 0x72c <configuration_getVentilation>
     d0c:	1f 92       	push	r1
     d0e:	8f 93       	push	r24
     d10:	86 e2       	ldi	r24, 0x26	; 38
     d12:	94 e0       	ldi	r25, 0x04	; 4
     d14:	9f 93       	push	r25
     d16:	8f 93       	push	r24
     d18:	0e 94 91 2f 	call	0x5f22	; 0x5f22 <printf>
     d1c:	0f 90       	pop	r0
			break;
     d1e:	0f 90       	pop	r0
     d20:	0f 90       	pop	r0
     d22:	0f 90       	pop	r0
     d24:	17 c0       	rjmp	.+46     	; 0xd54 <lora_DownLinkHandler_task+0x29a>
     d26:	8c e4       	ldi	r24, 0x4C	; 76
		default:
		printf("Invalid command");
     d28:	94 e0       	ldi	r25, 0x04	; 4
     d2a:	9f 93       	push	r25
     d2c:	8f 93       	push	r24
     d2e:	0e 94 91 2f 	call	0x5f22	; 0x5f22 <printf>
     d32:	0f 90       	pop	r0
			break;
     d34:	0f 90       	pop	r0
     d36:	0e c0       	rjmp	.+28     	; 0xd54 <lora_DownLinkHandler_task+0x29a>
		}
		
}
     d38:	81 e0       	ldi	r24, 0x01	; 1

	if (rc == LoRa_ACCEPTED)
	{
		// Connected to LoRaWAN :-)
		// Make the green led steady
		led_led_on(led_ST2); // OPTIONAL
     d3a:	0e 94 57 21 	call	0x42ae	; 0x42ae <led_led_on>
     d3e:	81 e0       	ldi	r24, 0x01	; 1
				vTaskDelay(150);

				lora_driver_flush_buffers(); // get rid of first version string from module after reset!

				_lora_setup();
				_isSet=true;
     d40:	80 93 ee 08 	sts	0x08EE, r24	; 0x8008ee <_isSet>
     d44:	96 cf       	rjmp	.-212    	; 0xc72 <lora_DownLinkHandler_task+0x1b8>
     d46:	81 e0       	ldi	r24, 0x01	; 1
	}
	else
	{
		// Something went wrong
		// Turn off the green led
		led_led_off(led_ST2); // OPTIONAL
     d48:	0e 94 66 21 	call	0x42cc	; 0x42cc <led_led_off>
     d4c:	80 e0       	ldi	r24, 0x00	; 0
		// Make the red led blink fast to tell something went wrong
		led_fast_blink(led_ST1); // OPTIONAL
     d4e:	0e 94 30 21 	call	0x4260	; 0x4260 <led_fast_blink>
     d52:	8d cf       	rjmp	.-230    	; 0xc6e <lora_DownLinkHandler_task+0x1b4>
     d54:	df 91       	pop	r29
		default:
		printf("Invalid command");
			break;
		}
		
}
     d56:	cf 91       	pop	r28
     d58:	1f 91       	pop	r17
     d5a:	0f 91       	pop	r16
     d5c:	ff 90       	pop	r15
     d5e:	ef 90       	pop	r14
     d60:	df 90       	pop	r13
     d62:	08 95       	ret

00000d64 <lora_DownLinkHandler_startTask>:
     d64:	ec 01       	movw	r28, r24

void lora_DownLinkHandler_startTask(MessageBufferHandle_t xMessageBuffer){
	for(;;)
	{
		lora_DownLinkHandler_task(xMessageBuffer);
     d66:	ce 01       	movw	r24, r28
     d68:	a8 de       	rcall	.-688    	; 0xaba <lora_DownLinkHandler_task>
		vTaskDelay(3000);
     d6a:	68 eb       	ldi	r22, 0xB8	; 184
     d6c:	7b e0       	ldi	r23, 0x0B	; 11
     d6e:	80 e0       	ldi	r24, 0x00	; 0
     d70:	90 e0       	ldi	r25, 0x00	; 0
     d72:	0e 94 d6 17 	call	0x2fac	; 0x2fac <vTaskDelay>
     d76:	f7 cf       	rjmp	.-18     	; 0xd66 <lora_DownLinkHandler_startTask+0x2>

00000d78 <humAndTempReader_create>:
void humAndTempReader_destroy(humAndTempReader_t self) {
	if (self == NULL)
	return;

	//delete will clear the allocated memory to the task + we need to remove everything else
	vTaskDelete(self->handleTask);
     d78:	2f 92       	push	r2
     d7a:	3f 92       	push	r3
     d7c:	4f 92       	push	r4
     d7e:	5f 92       	push	r5
     d80:	6f 92       	push	r6
     d82:	7f 92       	push	r7
     d84:	8f 92       	push	r8
     d86:	9f 92       	push	r9
     d88:	af 92       	push	r10
     d8a:	bf 92       	push	r11
     d8c:	cf 92       	push	r12
     d8e:	df 92       	push	r13
     d90:	ef 92       	push	r14
     d92:	ff 92       	push	r15
     d94:	0f 93       	push	r16
     d96:	1f 93       	push	r17
     d98:	cf 93       	push	r28
     d9a:	df 93       	push	r29
     d9c:	88 2e       	mov	r8, r24
     d9e:	96 2e       	mov	r9, r22
     da0:	1a 01       	movw	r2, r20
     da2:	28 01       	movw	r4, r16
     da4:	39 01       	movw	r6, r18
     da6:	61 e0       	ldi	r22, 0x01	; 1
     da8:	70 e0       	ldi	r23, 0x00	; 0
     daa:	86 e0       	ldi	r24, 0x06	; 6
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	0e 94 f3 2d 	call	0x5be6	; 0x5be6 <calloc>
     db2:	ec 01       	movw	r28, r24
     db4:	00 97       	sbiw	r24, 0x00	; 0
     db6:	91 f1       	breq	.+100    	; 0xe1c <humAndTempReader_create+0xa4>
     db8:	19 82       	std	Y+1, r1	; 0x01
     dba:	18 82       	st	Y, r1
     dbc:	1b 82       	std	Y+3, r1	; 0x03
     dbe:	1a 82       	std	Y+2, r1	; 0x02
     dc0:	30 92 10 09 	sts	0x0910, r3	; 0x800910 <_startMeasureEventGroup+0x1>
     dc4:	20 92 0f 09 	sts	0x090F, r2	; 0x80090f <_startMeasureEventGroup>
     dc8:	40 92 0b 09 	sts	0x090B, r4	; 0x80090b <_startMeasureBit>
     dcc:	50 92 0c 09 	sts	0x090C, r5	; 0x80090c <_startMeasureBit+0x1>
     dd0:	60 92 0d 09 	sts	0x090D, r6	; 0x80090d <_startMeasureBit+0x2>
     dd4:	70 92 0e 09 	sts	0x090E, r7	; 0x80090e <_startMeasureBit+0x3>
     dd8:	f0 92 0a 09 	sts	0x090A, r15	; 0x80090a <_readyEventGroup+0x1>
     ddc:	e0 92 09 09 	sts	0x0909, r14	; 0x800909 <_readyEventGroup>
     de0:	a0 92 05 09 	sts	0x0905, r10	; 0x800905 <_readyBit>
     de4:	b0 92 06 09 	sts	0x0906, r11	; 0x800906 <_readyBit+0x1>
     de8:	c0 92 07 09 	sts	0x0907, r12	; 0x800907 <_readyBit+0x2>
     dec:	d0 92 08 09 	sts	0x0908, r13	; 0x800908 <_readyBit+0x3>
     df0:	49 2d       	mov	r20, r9
     df2:	50 e0       	ldi	r21, 0x00	; 0
     df4:	7c 01       	movw	r14, r24
     df6:	84 e0       	ldi	r24, 0x04	; 4
     df8:	e8 0e       	add	r14, r24
     dfa:	f1 1c       	adc	r15, r1
     dfc:	08 2d       	mov	r16, r8
     dfe:	9e 01       	movw	r18, r28
     e00:	6c e5       	ldi	r22, 0x5C	; 92
     e02:	74 e0       	ldi	r23, 0x04	; 4
     e04:	84 ea       	ldi	r24, 0xA4	; 164
     e06:	97 e0       	ldi	r25, 0x07	; 7
     e08:	0e 94 16 15 	call	0x2a2c	; 0x2a2c <xTaskCreate>
     e0c:	8d e6       	ldi	r24, 0x6D	; 109
     e0e:	94 e0       	ldi	r25, 0x04	; 4
     e10:	9f 93       	push	r25
     e12:	8f 93       	push	r24
     e14:	0e 94 91 2f 	call	0x5f22	; 0x5f22 <printf>
     e18:	0f 90       	pop	r0
     e1a:	0f 90       	pop	r0
     e1c:	ce 01       	movw	r24, r28
     e1e:	df 91       	pop	r29
     e20:	cf 91       	pop	r28
     e22:	1f 91       	pop	r17
     e24:	0f 91       	pop	r16
     e26:	ff 90       	pop	r15
     e28:	ef 90       	pop	r14
     e2a:	df 90       	pop	r13
     e2c:	cf 90       	pop	r12
     e2e:	bf 90       	pop	r11
     e30:	af 90       	pop	r10
     e32:	9f 90       	pop	r9
     e34:	8f 90       	pop	r8
     e36:	7f 90       	pop	r7
     e38:	6f 90       	pop	r6
     e3a:	5f 90       	pop	r5
     e3c:	4f 90       	pop	r4
     e3e:	3f 90       	pop	r3
     e40:	2f 90       	pop	r2
     e42:	08 95       	ret

00000e44 <humAndTempReader_measure>:
	for (;;) {
		humAndTempReader_measure(self);
	}
}

void humAndTempReader_measure(humAndTempReader_t self) {//dummy
     e44:	cf 92       	push	r12
     e46:	df 92       	push	r13
     e48:	ef 92       	push	r14
     e4a:	ff 92       	push	r15
     e4c:	0f 93       	push	r16
     e4e:	1f 93       	push	r17
     e50:	cf 93       	push	r28
     e52:	df 93       	push	r29
     e54:	ec 01       	movw	r28, r24
	EventBits_t uxBits = xEventGroupWaitBits(_startMeasureEventGroup, //eventGroup
     e56:	40 91 0b 09 	lds	r20, 0x090B	; 0x80090b <_startMeasureBit>
     e5a:	50 91 0c 09 	lds	r21, 0x090C	; 0x80090c <_startMeasureBit+0x1>
     e5e:	60 91 0d 09 	lds	r22, 0x090D	; 0x80090d <_startMeasureBit+0x2>
     e62:	70 91 0e 09 	lds	r23, 0x090E	; 0x80090e <_startMeasureBit+0x3>
     e66:	cc 24       	eor	r12, r12
     e68:	ca 94       	dec	r12
     e6a:	dc 2c       	mov	r13, r12
     e6c:	76 01       	movw	r14, r12
     e6e:	01 e0       	ldi	r16, 0x01	; 1
     e70:	21 e0       	ldi	r18, 0x01	; 1
     e72:	80 91 0f 09 	lds	r24, 0x090F	; 0x80090f <_startMeasureEventGroup>
     e76:	90 91 10 09 	lds	r25, 0x0910	; 0x800910 <_startMeasureEventGroup+0x1>
     e7a:	fe d1       	rcall	.+1020   	; 0x1278 <xEventGroupWaitBits>
	_startMeasureBit, //bits it is interested i
	pdTRUE, //clears the bits
	pdTRUE, //waits for both bits to be set
	portMAX_DELAY); //wait

	if ((uxBits & (_startMeasureBit)) == (_startMeasureBit)) {
     e7c:	00 91 0b 09 	lds	r16, 0x090B	; 0x80090b <_startMeasureBit>
     e80:	10 91 0c 09 	lds	r17, 0x090C	; 0x80090c <_startMeasureBit+0x1>
     e84:	20 91 0d 09 	lds	r18, 0x090D	; 0x80090d <_startMeasureBit+0x2>
     e88:	30 91 0e 09 	lds	r19, 0x090E	; 0x80090e <_startMeasureBit+0x3>
     e8c:	dc 01       	movw	r26, r24
     e8e:	cb 01       	movw	r24, r22
     e90:	80 23       	and	r24, r16
     e92:	91 23       	and	r25, r17
     e94:	a2 23       	and	r26, r18
     e96:	b3 23       	and	r27, r19
     e98:	08 17       	cp	r16, r24
     e9a:	19 07       	cpc	r17, r25
     e9c:	2a 07       	cpc	r18, r26
     e9e:	3b 07       	cpc	r19, r27
     ea0:	09 f0       	breq	.+2      	; 0xea4 <humAndTempReader_measure+0x60>
     ea2:	49 c0       	rjmp	.+146    	; 0xf36 <humAndTempReader_measure+0xf2>
		hih8120Wakeup();
     ea4:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <hih8120Wakeup>
		vTaskDelay(50);
     ea8:	62 e3       	ldi	r22, 0x32	; 50
     eaa:	70 e0       	ldi	r23, 0x00	; 0
     eac:	80 e0       	ldi	r24, 0x00	; 0
     eae:	90 e0       	ldi	r25, 0x00	; 0
     eb0:	0e 94 d6 17 	call	0x2fac	; 0x2fac <vTaskDelay>
		hih8120Meassure();
     eb4:	0e 94 8f 1f 	call	0x3f1e	; 0x3f1e <hih8120Meassure>
		vTaskDelay(5);
     eb8:	65 e0       	ldi	r22, 0x05	; 5
     eba:	70 e0       	ldi	r23, 0x00	; 0
     ebc:	80 e0       	ldi	r24, 0x00	; 0
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	0e 94 d6 17 	call	0x2fac	; 0x2fac <vTaskDelay>
		if(hih8120IsReady())
     ec4:	0e 94 77 1f 	call	0x3eee	; 0x3eee <hih8120IsReady>
     ec8:	88 23       	and	r24, r24
     eca:	41 f1       	breq	.+80     	; 0xf1c <humAndTempReader_measure+0xd8>
		{
			self->humidity = hih8120GetHumidityPercent_x10();
     ecc:	0e 94 b5 1f 	call	0x3f6a	; 0x3f6a <hih8120GetHumidityPercent_x10>
     ed0:	99 83       	std	Y+1, r25	; 0x01
     ed2:	88 83       	st	Y, r24
			self->temperature = hih8120GetTemperature_x10();
     ed4:	0e 94 db 1f 	call	0x3fb6	; 0x3fb6 <hih8120GetTemperature_x10>
     ed8:	9b 83       	std	Y+3, r25	; 0x03
     eda:	8a 83       	std	Y+2, r24	; 0x02
			printf("humidity and temperature done bit set\n");
     edc:	8c e8       	ldi	r24, 0x8C	; 140
     ede:	94 e0       	ldi	r25, 0x04	; 4
     ee0:	0e 94 a4 2f 	call	0x5f48	; 0x5f48 <puts>
			printf("Humidity: %u\n", self->humidity);
     ee4:	89 81       	ldd	r24, Y+1	; 0x01
     ee6:	8f 93       	push	r24
     ee8:	88 81       	ld	r24, Y
     eea:	8f 93       	push	r24
     eec:	82 eb       	ldi	r24, 0xB2	; 178
     eee:	94 e0       	ldi	r25, 0x04	; 4
     ef0:	9f 93       	push	r25
     ef2:	8f 93       	push	r24
     ef4:	0e 94 91 2f 	call	0x5f22	; 0x5f22 <printf>
			printf("TEMP: %d\n", self->temperature);
     ef8:	8b 81       	ldd	r24, Y+3	; 0x03
     efa:	8f 93       	push	r24
     efc:	8a 81       	ldd	r24, Y+2	; 0x02
     efe:	8f 93       	push	r24
     f00:	80 ec       	ldi	r24, 0xC0	; 192
     f02:	94 e0       	ldi	r25, 0x04	; 4
     f04:	9f 93       	push	r25
     f06:	8f 93       	push	r24
     f08:	0e 94 91 2f 	call	0x5f22	; 0x5f22 <printf>
     f0c:	8d b7       	in	r24, 0x3d	; 61
     f0e:	9e b7       	in	r25, 0x3e	; 62
     f10:	08 96       	adiw	r24, 0x08	; 8
     f12:	0f b6       	in	r0, 0x3f	; 63
     f14:	f8 94       	cli
     f16:	9e bf       	out	0x3e, r25	; 62
     f18:	0f be       	out	0x3f, r0	; 63
     f1a:	8d bf       	out	0x3d, r24	; 61
		}
		//set done bit so that device knows meassurement is done
		xEventGroupSetBits(_readyEventGroup, _readyBit);
     f1c:	40 91 05 09 	lds	r20, 0x0905	; 0x800905 <_readyBit>
     f20:	50 91 06 09 	lds	r21, 0x0906	; 0x800906 <_readyBit+0x1>
     f24:	60 91 07 09 	lds	r22, 0x0907	; 0x800907 <_readyBit+0x2>
     f28:	70 91 08 09 	lds	r23, 0x0908	; 0x800908 <_readyBit+0x3>
     f2c:	80 91 09 09 	lds	r24, 0x0909	; 0x800909 <_readyEventGroup>
     f30:	90 91 0a 09 	lds	r25, 0x090A	; 0x80090a <_readyEventGroup+0x1>
     f34:	61 d2       	rcall	.+1218   	; 0x13f8 <xEventGroupSetBits>
	}
}
     f36:	df 91       	pop	r29
     f38:	cf 91       	pop	r28
     f3a:	1f 91       	pop	r17
     f3c:	0f 91       	pop	r16
     f3e:	ff 90       	pop	r15
     f40:	ef 90       	pop	r14
     f42:	df 90       	pop	r13
     f44:	cf 90       	pop	r12
     f46:	08 95       	ret

00000f48 <humAndTempReader_executeTask>:
	//free(self->temperature);
	//free(self);
}

//actual task, methods devided so that it is possible to test
void humAndTempReader_executeTask(humAndTempReader_t self) {
     f48:	ec 01       	movw	r28, r24
	for (;;) {
		humAndTempReader_measure(self);
     f4a:	ce 01       	movw	r24, r28
     f4c:	7b df       	rcall	.-266    	; 0xe44 <humAndTempReader_measure>
     f4e:	fd cf       	rjmp	.-6      	; 0xf4a <humAndTempReader_executeTask+0x2>

00000f50 <humAndTempReader_getHumidity>:
	}
}

uint16_t humAndTempReader_getHumidity(humAndTempReader_t self){
	return self->humidity;
}
     f50:	fc 01       	movw	r30, r24
     f52:	80 81       	ld	r24, Z
     f54:	91 81       	ldd	r25, Z+1	; 0x01
     f56:	08 95       	ret

00000f58 <humAndTempReader_getTemperature>:

int16_t humAndTempReader_getTemperature(humAndTempReader_t self){
	return self->temperature;
}
     f58:	fc 01       	movw	r30, r24
     f5a:	82 81       	ldd	r24, Z+2	; 0x02
     f5c:	93 81       	ldd	r25, Z+3	; 0x03
     f5e:	08 95       	ret

00000f60 <lora_UpLinkHandler_create>:
/*Check for the parameters*/



void lora_UpLinkHandler_create(UBaseType_t lora_handler_task_priority, MessageBufferHandle_t xMessageBuffer)
{
     f60:	ef 92       	push	r14
     f62:	ff 92       	push	r15
     f64:	0f 93       	push	r16
     f66:	9b 01       	movw	r18, r22
	_buffer = xMessageBuffer;
	
	
	
	xTaskCreate(
     f68:	e1 2c       	mov	r14, r1
     f6a:	f1 2c       	mov	r15, r1
     f6c:	08 2f       	mov	r16, r24
     f6e:	48 e8       	ldi	r20, 0x88	; 136
     f70:	51 e0       	ldi	r21, 0x01	; 1
     f72:	6d ec       	ldi	r22, 0xCD	; 205
     f74:	72 e0       	ldi	r23, 0x02	; 2
     f76:	89 e0       	ldi	r24, 0x09	; 9
     f78:	99 e0       	ldi	r25, 0x09	; 9
     f7a:	0e 94 16 15 	call	0x2a2c	; 0x2a2c <xTaskCreate>
	,  (const portCHAR *)"LRUpHand"  // A name just for humans
	,  configMINIMAL_STACK_SIZE+200  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  xMessageBuffer
	,  lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}
     f7e:	0f 91       	pop	r16
     f80:	ff 90       	pop	r15
     f82:	ef 90       	pop	r14
     f84:	08 95       	ret

00000f86 <lora_UpLinkHandler_task>:
	
	/*Receives message from message buffer shared between it and the application responsible for gathering the data
	--> Should be called every 5 minutes from application
	*/
	void lora_UpLinkHandler_task(MessageBufferHandle_t xMessageBuffer)
	{	
     f86:	df 92       	push	r13
     f88:	ef 92       	push	r14
     f8a:	ff 92       	push	r15
     f8c:	0f 93       	push	r16
     f8e:	1f 93       	push	r17
     f90:	cf 93       	push	r28
     f92:	df 93       	push	r29
     f94:	7c 01       	movw	r14, r24
		size_t xBytesToSend;
		char rxData[50];
		if (!isSet)
     f96:	80 91 11 09 	lds	r24, 0x0911	; 0x800911 <isSet>
     f9a:	81 11       	cpse	r24, r1
     f9c:	d0 c0       	rjmp	.+416    	; 0x113e <lora_UpLinkHandler_task+0x1b8>
		{
			// Hardware reset of LoRaWAN transceiver
			lora_driver_reset_rn2483(1);
     f9e:	81 e0       	ldi	r24, 0x01	; 1
     fa0:	0e 94 fb 22 	call	0x45f6	; 0x45f6 <lora_driver_reset_rn2483>
			vTaskDelay(2);
     fa4:	62 e0       	ldi	r22, 0x02	; 2
     fa6:	70 e0       	ldi	r23, 0x00	; 0
     fa8:	80 e0       	ldi	r24, 0x00	; 0
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	0e 94 d6 17 	call	0x2fac	; 0x2fac <vTaskDelay>
			lora_driver_reset_rn2483(0);
     fb0:	80 e0       	ldi	r24, 0x00	; 0
     fb2:	0e 94 fb 22 	call	0x45f6	; 0x45f6 <lora_driver_reset_rn2483>
			// Give it a chance to wakeup
			vTaskDelay(150);
     fb6:	66 e9       	ldi	r22, 0x96	; 150
     fb8:	70 e0       	ldi	r23, 0x00	; 0
     fba:	80 e0       	ldi	r24, 0x00	; 0
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	0e 94 d6 17 	call	0x2fac	; 0x2fac <vTaskDelay>

			lora_driver_flush_buffers(); // get rid of first version string from module after reset!
     fc2:	0e 94 b1 22 	call	0x4562	; 0x4562 <lora_driver_flush_buffers>


static void _lora_setup(void)
{
	e_LoRa_return_code_t rc;
	led_slow_blink(led_ST2); // OPTIONAL: Led the green led blink slowly while we are setting up LoRa
     fc6:	81 e0       	ldi	r24, 0x01	; 1
     fc8:	0e 94 09 21 	call	0x4212	; 0x4212 <led_slow_blink>
	//The below code is required to be executed only once due to the fact that these MAC settings
	// can be stored inside of the tranciever
	//START ON ONE TIME USE CODE

	// Factory reset the transceiver
	printf("FactoryReset >%s<\n", lora_driver_map_return_code_to_text(lora_driver_rn2483_factory_reset()));
     fcc:	0e 94 0f 23 	call	0x461e	; 0x461e <lora_driver_rn2483_factory_reset>
     fd0:	0e 94 8c 25 	call	0x4b18	; 0x4b18 <lora_driver_map_return_code_to_text>
     fd4:	9f 93       	push	r25
     fd6:	8f 93       	push	r24
     fd8:	86 ed       	ldi	r24, 0xD6	; 214
     fda:	92 e0       	ldi	r25, 0x02	; 2
     fdc:	9f 93       	push	r25
     fde:	8f 93       	push	r24
     fe0:	0e 94 91 2f 	call	0x5f22	; 0x5f22 <printf>
	
	// Configure to EU868 LoRaWAN standards
	printf("Configure to EU868 >%s<\n", lora_driver_map_return_code_to_text(lora_driver_configure_to_eu868()));
     fe4:	0e 94 8d 24 	call	0x491a	; 0x491a <lora_driver_configure_to_eu868>
     fe8:	0e 94 8c 25 	call	0x4b18	; 0x4b18 <lora_driver_map_return_code_to_text>
     fec:	9f 93       	push	r25
     fee:	8f 93       	push	r24
     ff0:	89 ee       	ldi	r24, 0xE9	; 233
     ff2:	92 e0       	ldi	r25, 0x02	; 2
     ff4:	9f 93       	push	r25
     ff6:	8f 93       	push	r24
     ff8:	0e 94 91 2f 	call	0x5f22	; 0x5f22 <printf>

	// Get the transceivers HW EUI
	rc = lora_driver_get_rn2483_hweui(_out_buf);
     ffc:	88 e2       	ldi	r24, 0x28	; 40
     ffe:	99 e0       	ldi	r25, 0x09	; 9
    1000:	0e 94 21 23 	call	0x4642	; 0x4642 <lora_driver_get_rn2483_hweui>
	printf("Get HWEUI >%s<: %s\n",lora_driver_map_return_code_to_text(rc), _out_buf);
    1004:	0e 94 8c 25 	call	0x4b18	; 0x4b18 <lora_driver_map_return_code_to_text>
    1008:	c8 e2       	ldi	r28, 0x28	; 40
    100a:	d9 e0       	ldi	r29, 0x09	; 9
    100c:	df 93       	push	r29
    100e:	cf 93       	push	r28
    1010:	9f 93       	push	r25
    1012:	8f 93       	push	r24
    1014:	82 e0       	ldi	r24, 0x02	; 2
    1016:	93 e0       	ldi	r25, 0x03	; 3
    1018:	9f 93       	push	r25
    101a:	8f 93       	push	r24
    101c:	0e 94 91 2f 	call	0x5f22	; 0x5f22 <printf>

	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_map_return_code_to_text(lora_driver_set_device_identifier(_out_buf)));
    1020:	ce 01       	movw	r24, r28
    1022:	0e 94 3d 23 	call	0x467a	; 0x467a <lora_driver_set_device_identifier>
    1026:	0e 94 8c 25 	call	0x4b18	; 0x4b18 <lora_driver_map_return_code_to_text>
    102a:	9f 93       	push	r25
    102c:	8f 93       	push	r24
    102e:	df 93       	push	r29
    1030:	cf 93       	push	r28
    1032:	86 e1       	ldi	r24, 0x16	; 22
    1034:	93 e0       	ldi	r25, 0x03	; 3
    1036:	9f 93       	push	r25
    1038:	8f 93       	push	r24
    103a:	0e 94 91 2f 	call	0x5f22	; 0x5f22 <printf>

	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_map_return_code_to_text(lora_driver_set_otaa_identity(LORA_appEUI,LORA_appKEY,_out_buf)));
    103e:	ae 01       	movw	r20, r28
    1040:	6b e2       	ldi	r22, 0x2B	; 43
    1042:	73 e0       	ldi	r23, 0x03	; 3
    1044:	8e e4       	ldi	r24, 0x4E	; 78
    1046:	93 e0       	ldi	r25, 0x03	; 3
    1048:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <lora_driver_set_otaa_identity>
    104c:	0e 94 8c 25 	call	0x4b18	; 0x4b18 <lora_driver_map_return_code_to_text>
    1050:	9f 93       	push	r25
    1052:	8f 93       	push	r24
    1054:	df 93       	push	r29
    1056:	cf 93       	push	r28
    1058:	8b e2       	ldi	r24, 0x2B	; 43
    105a:	93 e0       	ldi	r25, 0x03	; 3
    105c:	9f 93       	push	r25
    105e:	8f 93       	push	r24
    1060:	8e e4       	ldi	r24, 0x4E	; 78
    1062:	93 e0       	ldi	r25, 0x03	; 3
    1064:	9f 93       	push	r25
    1066:	8f 93       	push	r24
    1068:	8f e5       	ldi	r24, 0x5F	; 95
    106a:	93 e0       	ldi	r25, 0x03	; 3
    106c:	9f 93       	push	r25
    106e:	8f 93       	push	r24
    1070:	0e 94 91 2f 	call	0x5f22	; 0x5f22 <printf>

	// Save all the MAC settings in the transceiver
	printf("Save mac >%s<\n",lora_driver_map_return_code_to_text(lora_driver_save_mac()));
    1074:	0e 94 70 23 	call	0x46e0	; 0x46e0 <lora_driver_save_mac>
    1078:	0e 94 8c 25 	call	0x4b18	; 0x4b18 <lora_driver_map_return_code_to_text>
    107c:	9f 93       	push	r25
    107e:	8f 93       	push	r24
    1080:	85 e9       	ldi	r24, 0x95	; 149
    1082:	93 e0       	ldi	r25, 0x03	; 3
    1084:	9f 93       	push	r25
    1086:	8f 93       	push	r24
    1088:	0e 94 91 2f 	call	0x5f22	; 0x5f22 <printf>

	//END OF ONE TIME USE CODE
	
	
	// Enable Adaptive Data Rate
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_map_return_code_to_text(lora_driver_set_adaptive_data_rate(LoRa_ON)));
    108c:	8d b7       	in	r24, 0x3d	; 61
    108e:	9e b7       	in	r25, 0x3e	; 62
    1090:	82 96       	adiw	r24, 0x22	; 34
    1092:	0f b6       	in	r0, 0x3f	; 63
    1094:	f8 94       	cli
    1096:	9e bf       	out	0x3e, r25	; 62
    1098:	0f be       	out	0x3f, r0	; 63
    109a:	8d bf       	out	0x3d, r24	; 61
    109c:	81 e0       	ldi	r24, 0x01	; 1
    109e:	0e 94 6a 24 	call	0x48d4	; 0x48d4 <lora_driver_set_adaptive_data_rate>
    10a2:	0e 94 8c 25 	call	0x4b18	; 0x4b18 <lora_driver_map_return_code_to_text>
    10a6:	9f 93       	push	r25
    10a8:	8f 93       	push	r24
    10aa:	84 ea       	ldi	r24, 0xA4	; 164
    10ac:	93 e0       	ldi	r25, 0x03	; 3
    10ae:	9f 93       	push	r25
    10b0:	8f 93       	push	r24
    10b2:	0e 94 91 2f 	call	0x5f22	; 0x5f22 <printf>

	// Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	printf("Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_map_return_code_to_text(lora_driver_set_receive_delay(500)));
    10b6:	84 ef       	ldi	r24, 0xF4	; 244
    10b8:	91 e0       	ldi	r25, 0x01	; 1
    10ba:	0e 94 75 24 	call	0x48ea	; 0x48ea <lora_driver_set_receive_delay>
    10be:	0e 94 8c 25 	call	0x4b18	; 0x4b18 <lora_driver_map_return_code_to_text>
    10c2:	9f 93       	push	r25
    10c4:	8f 93       	push	r24
    10c6:	81 e0       	ldi	r24, 0x01	; 1
    10c8:	8f 93       	push	r24
    10ca:	84 ef       	ldi	r24, 0xF4	; 244
    10cc:	8f 93       	push	r24
    10ce:	85 ec       	ldi	r24, 0xC5	; 197
    10d0:	93 e0       	ldi	r25, 0x03	; 3
    10d2:	9f 93       	push	r25
    10d4:	8f 93       	push	r24
    10d6:	0e 94 91 2f 	call	0x5f22	; 0x5f22 <printf>
    10da:	8d b7       	in	r24, 0x3d	; 61
    10dc:	9e b7       	in	r25, 0x3e	; 62
    10de:	0a 96       	adiw	r24, 0x0a	; 10
    10e0:	0f b6       	in	r0, 0x3f	; 63
    10e2:	f8 94       	cli
    10e4:	9e bf       	out	0x3e, r25	; 62
    10e6:	0f be       	out	0x3f, r0	; 63
    10e8:	8d bf       	out	0x3d, r24	; 61
    10ea:	ca e0       	ldi	r28, 0x0A	; 10
    10ec:	d0 e0       	ldi	r29, 0x00	; 0
	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
	
	do {
		rc = lora_driver_join(LoRa_OTAA);
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_map_return_code_to_text(rc));
    10ee:	05 ee       	ldi	r16, 0xE5	; 229
    10f0:	13 e0       	ldi	r17, 0x03	; 3

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
	
	do {
		rc = lora_driver_join(LoRa_OTAA);
    10f2:	80 e0       	ldi	r24, 0x00	; 0
    10f4:	0e 94 76 23 	call	0x46ec	; 0x46ec <lora_driver_join>
    10f8:	d8 2e       	mov	r13, r24
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_map_return_code_to_text(rc));
    10fa:	0e 94 8c 25 	call	0x4b18	; 0x4b18 <lora_driver_map_return_code_to_text>
    10fe:	9f 93       	push	r25
    1100:	8f 93       	push	r24
    1102:	df 93       	push	r29
    1104:	cf 93       	push	r28
    1106:	1f 93       	push	r17
    1108:	0f 93       	push	r16
    110a:	0e 94 91 2f 	call	0x5f22	; 0x5f22 <printf>

		if ( rc != LoRa_ACCEPTED)
    110e:	0f 90       	pop	r0
    1110:	0f 90       	pop	r0
    1112:	0f 90       	pop	r0
    1114:	0f 90       	pop	r0
    1116:	0f 90       	pop	r0
    1118:	0f 90       	pop	r0
    111a:	88 e0       	ldi	r24, 0x08	; 8
    111c:	d8 16       	cp	r13, r24
    111e:	09 f4       	brne	.+2      	; 0x1122 <lora_UpLinkHandler_task+0x19c>
    1120:	62 c0       	rjmp	.+196    	; 0x11e6 <lora_UpLinkHandler_task+0x260>
		{
			// Make the red led pulse to tell something went wrong
			led_long_puls(led_ST1); // OPTIONAL
    1122:	80 e0       	ldi	r24, 0x00	; 0
    1124:	0e 94 75 21 	call	0x42ea	; 0x42ea <led_long_puls>
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
    1128:	66 e3       	ldi	r22, 0x36	; 54
    112a:	71 e0       	ldi	r23, 0x01	; 1
    112c:	80 e0       	ldi	r24, 0x00	; 0
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	0e 94 d6 17 	call	0x2fac	; 0x2fac <vTaskDelay>
    1134:	21 97       	sbiw	r28, 0x01	; 1
		}
		else
		{
			break;
		}
	} while (--maxJoinTriesLeft);
    1136:	e9 f6       	brne	.-70     	; 0x10f2 <lora_UpLinkHandler_task+0x16c>
    1138:	5d c0       	rjmp	.+186    	; 0x11f4 <lora_UpLinkHandler_task+0x26e>
		led_fast_blink(led_ST1); // OPTIONAL

		// Lets stay here
		while (1)
		{
			taskYIELD();
    113a:	76 d4       	rcall	.+2284   	; 0x1a28 <vPortYield>
    113c:	fe cf       	rjmp	.-4      	; 0x113a <lora_UpLinkHandler_task+0x1b4>
			isSet=true;
		}
		

		
		xBytesToSend = xMessageBufferReceive(xMessageBuffer, (void*) &_uplink_payload,
    113e:	00 e0       	ldi	r16, 0x00	; 0
    1140:	10 e0       	ldi	r17, 0x00	; 0
    1142:	98 01       	movw	r18, r16
    1144:	42 e3       	ldi	r20, 0x32	; 50
    1146:	50 e0       	ldi	r21, 0x00	; 0
    1148:	62 e1       	ldi	r22, 0x12	; 18
    114a:	79 e0       	ldi	r23, 0x09	; 9
    114c:	c7 01       	movw	r24, r14
    114e:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <xStreamBufferReceive>
		sizeof(rxData),0);
		if(xBytesToSend >= sizeof(uint8_t)*2)
    1152:	02 97       	sbiw	r24, 0x02	; 2
    1154:	08 f4       	brcc	.+2      	; 0x1158 <lora_UpLinkHandler_task+0x1d2>
    1156:	40 c0       	rjmp	.+128    	; 0x11d8 <lora_UpLinkHandler_task+0x252>
			//_uplink_payload = (_uplink_payload) &rxData;
			
			/**< Status led ST4 (BLUE)*/
			//Makes the led light up in a short period.
			
			led_short_puls(led_ST4);
    1158:	83 e0       	ldi	r24, 0x03	; 3
    115a:	0e 94 87 21 	call	0x430e	; 0x430e <led_short_puls>
			//_uplink_payload.port_no = 1;
			//_uplink_payload.len = 4;
			
			printf("The temperature in upLink is: %d\n", _uplink_payload.bytes[0]);
    115e:	c2 e1       	ldi	r28, 0x12	; 18
    1160:	d9 e0       	ldi	r29, 0x09	; 9
    1162:	8a 81       	ldd	r24, Y+2	; 0x02
    1164:	1f 92       	push	r1
    1166:	8f 93       	push	r24
    1168:	8a ec       	ldi	r24, 0xCA	; 202
    116a:	94 e0       	ldi	r25, 0x04	; 4
    116c:	9f 93       	push	r25
    116e:	8f 93       	push	r24
    1170:	0e 94 91 2f 	call	0x5f22	; 0x5f22 <printf>
			printf("The temperature2 in upLink is: %d\n", _uplink_payload.bytes[1]);
    1174:	8b 81       	ldd	r24, Y+3	; 0x03
    1176:	1f 92       	push	r1
    1178:	8f 93       	push	r24
    117a:	8c ee       	ldi	r24, 0xEC	; 236
    117c:	94 e0       	ldi	r25, 0x04	; 4
    117e:	9f 93       	push	r25
    1180:	8f 93       	push	r24
    1182:	0e 94 91 2f 	call	0x5f22	; 0x5f22 <printf>
			printf("The humidity in upLink is: %u\n", _uplink_payload.bytes[2]);
    1186:	8c 81       	ldd	r24, Y+4	; 0x04
    1188:	1f 92       	push	r1
    118a:	8f 93       	push	r24
    118c:	8f e0       	ldi	r24, 0x0F	; 15
    118e:	95 e0       	ldi	r25, 0x05	; 5
    1190:	9f 93       	push	r25
    1192:	8f 93       	push	r24
    1194:	0e 94 91 2f 	call	0x5f22	; 0x5f22 <printf>
			printf("The humidity2 in upLink is: %u\n", _uplink_payload.bytes[3]);
    1198:	8d 81       	ldd	r24, Y+5	; 0x05
    119a:	1f 92       	push	r1
    119c:	8f 93       	push	r24
    119e:	8e e2       	ldi	r24, 0x2E	; 46
    11a0:	95 e0       	ldi	r25, 0x05	; 5
    11a2:	9f 93       	push	r25
    11a4:	8f 93       	push	r24
    11a6:	0e 94 91 2f 	call	0x5f22	; 0x5f22 <printf>
			
			
			printf("Upload Message >%s<\n", lora_driver_map_return_code_to_text(lora_driver_sent_upload_message(false, &_uplink_payload)));
    11aa:	be 01       	movw	r22, r28
    11ac:	80 e0       	ldi	r24, 0x00	; 0
    11ae:	0e 94 9f 23 	call	0x473e	; 0x473e <lora_driver_sent_upload_message>
    11b2:	0e 94 8c 25 	call	0x4b18	; 0x4b18 <lora_driver_map_return_code_to_text>
    11b6:	9f 93       	push	r25
    11b8:	8f 93       	push	r24
    11ba:	8e e4       	ldi	r24, 0x4E	; 78
    11bc:	95 e0       	ldi	r25, 0x05	; 5
    11be:	9f 93       	push	r25
    11c0:	8f 93       	push	r24
    11c2:	0e 94 91 2f 	call	0x5f22	; 0x5f22 <printf>
    11c6:	8d b7       	in	r24, 0x3d	; 61
    11c8:	9e b7       	in	r25, 0x3e	; 62
    11ca:	44 96       	adiw	r24, 0x14	; 20
    11cc:	0f b6       	in	r0, 0x3f	; 63
    11ce:	f8 94       	cli
    11d0:	9e bf       	out	0x3e, r25	; 62
    11d2:	0f be       	out	0x3f, r0	; 63
    11d4:	8d bf       	out	0x3d, r24	; 61
    11d6:	15 c0       	rjmp	.+42     	; 0x1202 <lora_UpLinkHandler_task+0x27c>
		}
		else
		{
			vTaskDelay(2000);
    11d8:	60 ed       	ldi	r22, 0xD0	; 208
    11da:	77 e0       	ldi	r23, 0x07	; 7
    11dc:	80 e0       	ldi	r24, 0x00	; 0
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	0e 94 d6 17 	call	0x2fac	; 0x2fac <vTaskDelay>
		}
	}
    11e4:	0e c0       	rjmp	.+28     	; 0x1202 <lora_UpLinkHandler_task+0x27c>

	if (rc == LoRa_ACCEPTED)
	{
		// Connected to LoRaWAN :-)
		// Make the green led steady
		led_led_on(led_ST2); // OPTIONAL
    11e6:	81 e0       	ldi	r24, 0x01	; 1
    11e8:	0e 94 57 21 	call	0x42ae	; 0x42ae <led_led_on>
			vTaskDelay(150);

			lora_driver_flush_buffers(); // get rid of first version string from module after reset!

			_lora_setup();
			isSet=true;
    11ec:	81 e0       	ldi	r24, 0x01	; 1
    11ee:	80 93 11 09 	sts	0x0911, r24	; 0x800911 <isSet>
    11f2:	a5 cf       	rjmp	.-182    	; 0x113e <lora_UpLinkHandler_task+0x1b8>
	}
	else
	{
		// Something went wrong
		// Turn off the green led
		led_led_off(led_ST2); // OPTIONAL
    11f4:	81 e0       	ldi	r24, 0x01	; 1
    11f6:	0e 94 66 21 	call	0x42cc	; 0x42cc <led_led_off>
		// Make the red led blink fast to tell something went wrong
		led_fast_blink(led_ST1); // OPTIONAL
    11fa:	80 e0       	ldi	r24, 0x00	; 0
    11fc:	0e 94 30 21 	call	0x4260	; 0x4260 <led_fast_blink>
    1200:	9c cf       	rjmp	.-200    	; 0x113a <lora_UpLinkHandler_task+0x1b4>
		}
		else
		{
			vTaskDelay(2000);
		}
	}
    1202:	df 91       	pop	r29
    1204:	cf 91       	pop	r28
    1206:	1f 91       	pop	r17
    1208:	0f 91       	pop	r16
    120a:	ff 90       	pop	r15
    120c:	ef 90       	pop	r14
    120e:	df 90       	pop	r13
    1210:	08 95       	ret

00001212 <lora_UpLinkHandler_startTask>:
	
	void lora_UpLinkHandler_startTask(MessageBufferHandle_t xMessageBuffer){
    1212:	ec 01       	movw	r28, r24
		for(;;)
		{
			lora_UpLinkHandler_task(xMessageBuffer);
    1214:	ce 01       	movw	r24, r28
    1216:	b7 de       	rcall	.-658    	; 0xf86 <lora_UpLinkHandler_task>
			vTaskDelay(3000);
    1218:	68 eb       	ldi	r22, 0xB8	; 184
    121a:	7b e0       	ldi	r23, 0x0B	; 11
    121c:	80 e0       	ldi	r24, 0x00	; 0
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	0e 94 d6 17 	call	0x2fac	; 0x2fac <vTaskDelay>
    1224:	f7 cf       	rjmp	.-18     	; 0x1214 <lora_UpLinkHandler_startTask+0x2>

00001226 <trace_init>:
	 #if (configUSE_TRACE_FACILITY == 1)
	 #ifdef HAL_DEFS_H_

	 #else
		// Used on VIA MEGA Shield rev. 2.0.0
		DDRK |= _BV(DDK0) | _BV(DDK1) | _BV(DDK2) | _BV(DDK3);
    1226:	e7 e0       	ldi	r30, 0x07	; 7
    1228:	f1 e0       	ldi	r31, 0x01	; 1
    122a:	80 81       	ld	r24, Z
    122c:	8f 60       	ori	r24, 0x0F	; 15
    122e:	80 83       	st	Z, r24
    1230:	08 95       	ret

00001232 <task_switch_in>:
	void task_switch_in(uint8_t task_no) {
		 #ifdef HAL_DEFS_H_

		 #else
		 // Used on VIA MEGA Shield rev. 2.0.0
		 PORTK &= 0b11110000;
    1232:	e8 e0       	ldi	r30, 0x08	; 8
    1234:	f1 e0       	ldi	r31, 0x01	; 1
    1236:	90 81       	ld	r25, Z
    1238:	90 7f       	andi	r25, 0xF0	; 240
    123a:	90 83       	st	Z, r25
		 PORTK |= (task_no & 0b00001111);
    123c:	90 81       	ld	r25, Z
    123e:	8f 70       	andi	r24, 0x0F	; 15
    1240:	98 2b       	or	r25, r24
    1242:	90 83       	st	Z, r25
    1244:	08 95       	ret

00001246 <task_switch_out>:
	void task_switch_out(uint8_t task_no) {
		#ifdef HAL_DEFS_H_

		#else
		// Used on VIA MEGA Shield rev. 2.0.0
		PORTK &= 0b11110000;
    1246:	e8 e0       	ldi	r30, 0x08	; 8
    1248:	f1 e0       	ldi	r31, 0x01	; 1
    124a:	80 81       	ld	r24, Z
    124c:	80 7f       	andi	r24, 0xF0	; 240
    124e:	80 83       	st	Z, r24
    1250:	08 95       	ret

00001252 <xEventGroupCreate>:
        uxReturn = pxEventBits->uxEventBits;
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
    1252:	cf 93       	push	r28
    1254:	df 93       	push	r29
    1256:	80 e1       	ldi	r24, 0x10	; 16
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	b4 d1       	rcall	.+872    	; 0x15c4 <pvPortMalloc>
    125c:	ec 01       	movw	r28, r24
    125e:	00 97       	sbiw	r24, 0x00	; 0
    1260:	39 f0       	breq	.+14     	; 0x1270 <xEventGroupCreate+0x1e>
    1262:	fc 01       	movw	r30, r24
    1264:	11 92       	st	Z+, r1
    1266:	11 92       	st	Z+, r1
    1268:	11 92       	st	Z+, r1
    126a:	11 92       	st	Z+, r1
    126c:	cf 01       	movw	r24, r30
    126e:	94 d2       	rcall	.+1320   	; 0x1798 <vListInitialise>
    1270:	ce 01       	movw	r24, r28
    1272:	df 91       	pop	r29
    1274:	cf 91       	pop	r28
    1276:	08 95       	ret

00001278 <xEventGroupWaitBits>:
    1278:	2f 92       	push	r2
    127a:	3f 92       	push	r3
    127c:	4f 92       	push	r4
    127e:	5f 92       	push	r5
    1280:	6f 92       	push	r6
    1282:	7f 92       	push	r7
    1284:	8f 92       	push	r8
    1286:	9f 92       	push	r9
    1288:	af 92       	push	r10
    128a:	bf 92       	push	r11
    128c:	cf 92       	push	r12
    128e:	df 92       	push	r13
    1290:	ef 92       	push	r14
    1292:	ff 92       	push	r15
    1294:	0f 93       	push	r16
    1296:	1f 93       	push	r17
    1298:	cf 93       	push	r28
    129a:	df 93       	push	r29
    129c:	ec 01       	movw	r28, r24
    129e:	4a 01       	movw	r8, r20
    12a0:	5b 01       	movw	r10, r22
    12a2:	62 2e       	mov	r6, r18
    12a4:	70 2e       	mov	r7, r16
    12a6:	0e 94 71 16 	call	0x2ce2	; 0x2ce2 <vTaskSuspendAll>
    12aa:	28 80       	ld	r2, Y
    12ac:	39 80       	ldd	r3, Y+1	; 0x01
    12ae:	4a 80       	ldd	r4, Y+2	; 0x02
    12b0:	5b 80       	ldd	r5, Y+3	; 0x03
    12b2:	01 11       	cpse	r16, r1
    12b4:	0d c0       	rjmp	.+26     	; 0x12d0 <xEventGroupWaitBits+0x58>
    12b6:	81 e0       	ldi	r24, 0x01	; 1
    12b8:	b2 01       	movw	r22, r4
    12ba:	a1 01       	movw	r20, r2
    12bc:	48 21       	and	r20, r8
    12be:	59 21       	and	r21, r9
    12c0:	6a 21       	and	r22, r10
    12c2:	7b 21       	and	r23, r11
    12c4:	45 2b       	or	r20, r21
    12c6:	46 2b       	or	r20, r22
    12c8:	47 2b       	or	r20, r23
    12ca:	79 f4       	brne	.+30     	; 0x12ea <xEventGroupWaitBits+0x72>
    12cc:	80 e0       	ldi	r24, 0x00	; 0
    12ce:	0d c0       	rjmp	.+26     	; 0x12ea <xEventGroupWaitBits+0x72>
    12d0:	81 e0       	ldi	r24, 0x01	; 1
    12d2:	b2 01       	movw	r22, r4
    12d4:	a1 01       	movw	r20, r2
    12d6:	48 21       	and	r20, r8
    12d8:	59 21       	and	r21, r9
    12da:	6a 21       	and	r22, r10
    12dc:	7b 21       	and	r23, r11
    12de:	48 15       	cp	r20, r8
    12e0:	59 05       	cpc	r21, r9
    12e2:	6a 05       	cpc	r22, r10
    12e4:	7b 05       	cpc	r23, r11
    12e6:	09 f0       	breq	.+2      	; 0x12ea <xEventGroupWaitBits+0x72>
    12e8:	80 e0       	ldi	r24, 0x00	; 0
    12ea:	88 23       	and	r24, r24
    12ec:	81 f0       	breq	.+32     	; 0x130e <xEventGroupWaitBits+0x96>
    12ee:	66 20       	and	r6, r6
    12f0:	09 f4       	brne	.+2      	; 0x12f4 <xEventGroupWaitBits+0x7c>
    12f2:	6b c0       	rjmp	.+214    	; 0x13ca <xEventGroupWaitBits+0x152>
    12f4:	80 94       	com	r8
    12f6:	90 94       	com	r9
    12f8:	a0 94       	com	r10
    12fa:	b0 94       	com	r11
    12fc:	82 20       	and	r8, r2
    12fe:	93 20       	and	r9, r3
    1300:	a4 20       	and	r10, r4
    1302:	b5 20       	and	r11, r5
    1304:	88 82       	st	Y, r8
    1306:	99 82       	std	Y+1, r9	; 0x01
    1308:	aa 82       	std	Y+2, r10	; 0x02
    130a:	bb 82       	std	Y+3, r11	; 0x03
    130c:	5e c0       	rjmp	.+188    	; 0x13ca <xEventGroupWaitBits+0x152>
    130e:	c1 14       	cp	r12, r1
    1310:	d1 04       	cpc	r13, r1
    1312:	e1 04       	cpc	r14, r1
    1314:	f1 04       	cpc	r15, r1
    1316:	09 f4       	brne	.+2      	; 0x131a <xEventGroupWaitBits+0xa2>
    1318:	58 c0       	rjmp	.+176    	; 0x13ca <xEventGroupWaitBits+0x152>
    131a:	66 20       	and	r6, r6
    131c:	29 f0       	breq	.+10     	; 0x1328 <xEventGroupWaitBits+0xb0>
    131e:	40 e0       	ldi	r20, 0x00	; 0
    1320:	50 e0       	ldi	r21, 0x00	; 0
    1322:	60 e0       	ldi	r22, 0x00	; 0
    1324:	71 e0       	ldi	r23, 0x01	; 1
    1326:	03 c0       	rjmp	.+6      	; 0x132e <xEventGroupWaitBits+0xb6>
    1328:	40 e0       	ldi	r20, 0x00	; 0
    132a:	50 e0       	ldi	r21, 0x00	; 0
    132c:	ba 01       	movw	r22, r20
    132e:	71 10       	cpse	r7, r1
    1330:	74 60       	ori	r23, 0x04	; 4
    1332:	48 29       	or	r20, r8
    1334:	59 29       	or	r21, r9
    1336:	6a 29       	or	r22, r10
    1338:	7b 29       	or	r23, r11
    133a:	97 01       	movw	r18, r14
    133c:	86 01       	movw	r16, r12
    133e:	ce 01       	movw	r24, r28
    1340:	04 96       	adiw	r24, 0x04	; 4
    1342:	0e 94 85 18 	call	0x310a	; 0x310a <vTaskPlaceOnUnorderedEventList>
    1346:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <xTaskResumeAll>
    134a:	81 11       	cpse	r24, r1
    134c:	01 c0       	rjmp	.+2      	; 0x1350 <xEventGroupWaitBits+0xd8>
    134e:	6c d3       	rcall	.+1752   	; 0x1a28 <vPortYield>
    1350:	0e 94 cc 1a 	call	0x3598	; 0x3598 <uxTaskResetEventItemValue>
    1354:	91 fd       	sbrc	r25, 1
    1356:	35 c0       	rjmp	.+106    	; 0x13c2 <xEventGroupWaitBits+0x14a>
    1358:	0f b6       	in	r0, 0x3f	; 63
    135a:	f8 94       	cli
    135c:	0f 92       	push	r0
    135e:	68 81       	ld	r22, Y
    1360:	79 81       	ldd	r23, Y+1	; 0x01
    1362:	8a 81       	ldd	r24, Y+2	; 0x02
    1364:	9b 81       	ldd	r25, Y+3	; 0x03
    1366:	71 10       	cpse	r7, r1
    1368:	0d c0       	rjmp	.+26     	; 0x1384 <xEventGroupWaitBits+0x10c>
    136a:	21 e0       	ldi	r18, 0x01	; 1
    136c:	75 01       	movw	r14, r10
    136e:	64 01       	movw	r12, r8
    1370:	c6 22       	and	r12, r22
    1372:	d7 22       	and	r13, r23
    1374:	e8 22       	and	r14, r24
    1376:	f9 22       	and	r15, r25
    1378:	cd 28       	or	r12, r13
    137a:	ce 28       	or	r12, r14
    137c:	cf 28       	or	r12, r15
    137e:	79 f4       	brne	.+30     	; 0x139e <xEventGroupWaitBits+0x126>
    1380:	20 e0       	ldi	r18, 0x00	; 0
    1382:	0d c0       	rjmp	.+26     	; 0x139e <xEventGroupWaitBits+0x126>
    1384:	21 e0       	ldi	r18, 0x01	; 1
    1386:	75 01       	movw	r14, r10
    1388:	64 01       	movw	r12, r8
    138a:	c6 22       	and	r12, r22
    138c:	d7 22       	and	r13, r23
    138e:	e8 22       	and	r14, r24
    1390:	f9 22       	and	r15, r25
    1392:	c8 14       	cp	r12, r8
    1394:	d9 04       	cpc	r13, r9
    1396:	ea 04       	cpc	r14, r10
    1398:	fb 04       	cpc	r15, r11
    139a:	09 f0       	breq	.+2      	; 0x139e <xEventGroupWaitBits+0x126>
    139c:	20 e0       	ldi	r18, 0x00	; 0
    139e:	22 23       	and	r18, r18
    13a0:	71 f0       	breq	.+28     	; 0x13be <xEventGroupWaitBits+0x146>
    13a2:	66 20       	and	r6, r6
    13a4:	61 f0       	breq	.+24     	; 0x13be <xEventGroupWaitBits+0x146>
    13a6:	80 94       	com	r8
    13a8:	90 94       	com	r9
    13aa:	a0 94       	com	r10
    13ac:	b0 94       	com	r11
    13ae:	86 22       	and	r8, r22
    13b0:	97 22       	and	r9, r23
    13b2:	a8 22       	and	r10, r24
    13b4:	b9 22       	and	r11, r25
    13b6:	88 82       	st	Y, r8
    13b8:	99 82       	std	Y+1, r9	; 0x01
    13ba:	aa 82       	std	Y+2, r10	; 0x02
    13bc:	bb 82       	std	Y+3, r11	; 0x03
    13be:	0f 90       	pop	r0
    13c0:	0f be       	out	0x3f, r0	; 63
    13c2:	1b 01       	movw	r2, r22
    13c4:	2c 01       	movw	r4, r24
    13c6:	55 24       	eor	r5, r5
    13c8:	02 c0       	rjmp	.+4      	; 0x13ce <xEventGroupWaitBits+0x156>
    13ca:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <xTaskResumeAll>
    13ce:	c2 01       	movw	r24, r4
    13d0:	b1 01       	movw	r22, r2
    13d2:	df 91       	pop	r29
    13d4:	cf 91       	pop	r28
    13d6:	1f 91       	pop	r17
    13d8:	0f 91       	pop	r16
    13da:	ff 90       	pop	r15
    13dc:	ef 90       	pop	r14
    13de:	df 90       	pop	r13
    13e0:	cf 90       	pop	r12
    13e2:	bf 90       	pop	r11
    13e4:	af 90       	pop	r10
    13e6:	9f 90       	pop	r9
    13e8:	8f 90       	pop	r8
    13ea:	7f 90       	pop	r7
    13ec:	6f 90       	pop	r6
    13ee:	5f 90       	pop	r5
    13f0:	4f 90       	pop	r4
    13f2:	3f 90       	pop	r3
    13f4:	2f 90       	pop	r2
    13f6:	08 95       	ret

000013f8 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
    13f8:	4f 92       	push	r4
    13fa:	5f 92       	push	r5
    13fc:	6f 92       	push	r6
    13fe:	7f 92       	push	r7
    1400:	8f 92       	push	r8
    1402:	9f 92       	push	r9
    1404:	af 92       	push	r10
    1406:	bf 92       	push	r11
    1408:	cf 92       	push	r12
    140a:	df 92       	push	r13
    140c:	ef 92       	push	r14
    140e:	ff 92       	push	r15
    1410:	0f 93       	push	r16
    1412:	1f 93       	push	r17
    1414:	cf 93       	push	r28
    1416:	df 93       	push	r29
    1418:	ec 01       	movw	r28, r24
    141a:	6a 01       	movw	r12, r20
    141c:	7b 01       	movw	r14, r22
    itself. */
    configASSERT( xEventGroup );
    configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

    pxList = &( pxEventBits->xTasksWaitingForBits );
    pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    141e:	8c 01       	movw	r16, r24
    1420:	09 5f       	subi	r16, 0xF9	; 249
    1422:	1f 4f       	sbci	r17, 0xFF	; 255
    vTaskSuspendAll();
    1424:	0e 94 71 16 	call	0x2ce2	; 0x2ce2 <vTaskSuspendAll>
    {
        traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

        pxListItem = listGET_HEAD_ENTRY( pxList );
    1428:	eb 85       	ldd	r30, Y+11	; 0x0b
    142a:	fc 85       	ldd	r31, Y+12	; 0x0c

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;
    142c:	88 81       	ld	r24, Y
    142e:	99 81       	ldd	r25, Y+1	; 0x01
    1430:	aa 81       	ldd	r26, Y+2	; 0x02
    1432:	bb 81       	ldd	r27, Y+3	; 0x03
    1434:	c8 2a       	or	r12, r24
    1436:	d9 2a       	or	r13, r25
    1438:	ea 2a       	or	r14, r26
    143a:	fb 2a       	or	r15, r27
    143c:	c8 82       	st	Y, r12
    143e:	d9 82       	std	Y+1, r13	; 0x01
    1440:	ea 82       	std	Y+2, r14	; 0x02
    1442:	fb 82       	std	Y+3, r15	; 0x03

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
    1444:	0e 17       	cp	r16, r30
    1446:	1f 07       	cpc	r17, r31
    1448:	09 f4       	brne	.+2      	; 0x144c <xEventGroupSetBits+0x54>
    144a:	45 c0       	rjmp	.+138    	; 0x14d6 <xEventGroupSetBits+0xde>
    144c:	c1 2c       	mov	r12, r1
    144e:	d1 2c       	mov	r13, r1
    1450:	76 01       	movw	r14, r12
            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
                {
                    xMatchFound = pdTRUE;
    1452:	99 24       	eor	r9, r9
    1454:	93 94       	inc	r9
    1456:	81 2c       	mov	r8, r1
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
    1458:	a4 80       	ldd	r10, Z+4	; 0x04
    145a:	b5 80       	ldd	r11, Z+5	; 0x05
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
    145c:	80 81       	ld	r24, Z
    145e:	91 81       	ldd	r25, Z+1	; 0x01
    1460:	a2 81       	ldd	r26, Z+2	; 0x02
    1462:	b3 81       	ldd	r27, Z+3	; 0x03
            xMatchFound = pdFALSE;

            /* Split the bits waited for from the control bits. */
            uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
            uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
    1464:	ac 01       	movw	r20, r24
    1466:	bd 01       	movw	r22, r26
    1468:	77 27       	eor	r23, r23

            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
    146a:	b2 fd       	sbrc	r27, 2
    146c:	0f c0       	rjmp	.+30     	; 0x148c <xEventGroupSetBits+0x94>
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
                {
                    xMatchFound = pdTRUE;
    146e:	48 80       	ld	r4, Y
    1470:	59 80       	ldd	r5, Y+1	; 0x01
    1472:	6a 80       	ldd	r6, Y+2	; 0x02
    1474:	7b 80       	ldd	r7, Y+3	; 0x03
    1476:	44 22       	and	r4, r20
    1478:	55 22       	and	r5, r21
    147a:	66 22       	and	r6, r22
    147c:	77 22       	and	r7, r23
    147e:	29 2d       	mov	r18, r9
    1480:	45 28       	or	r4, r5
    1482:	46 28       	or	r4, r6
    1484:	47 28       	or	r4, r7
    1486:	89 f4       	brne	.+34     	; 0x14aa <xEventGroupSetBits+0xb2>
    1488:	28 2d       	mov	r18, r8
    148a:	0f c0       	rjmp	.+30     	; 0x14aa <xEventGroupSetBits+0xb2>
    148c:	48 80       	ld	r4, Y
    148e:	59 80       	ldd	r5, Y+1	; 0x01
    1490:	6a 80       	ldd	r6, Y+2	; 0x02
    1492:	7b 80       	ldd	r7, Y+3	; 0x03
    1494:	44 22       	and	r4, r20
    1496:	55 22       	and	r5, r21
    1498:	66 22       	and	r6, r22
    149a:	77 22       	and	r7, r23
    149c:	29 2d       	mov	r18, r9
    149e:	44 16       	cp	r4, r20
    14a0:	55 06       	cpc	r5, r21
    14a2:	66 06       	cpc	r6, r22
    14a4:	77 06       	cpc	r7, r23
    14a6:	09 f0       	breq	.+2      	; 0x14aa <xEventGroupSetBits+0xb2>
    14a8:	28 2d       	mov	r18, r8
            else
            {
                /* Need all bits to be set, but not all the bits were set. */
            }

            if( xMatchFound != pdFALSE )
    14aa:	22 23       	and	r18, r18
    14ac:	71 f0       	breq	.+28     	; 0x14ca <xEventGroupSetBits+0xd2>
            {
                /* The bits match.  Should the bits be cleared on exit? */
                if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
    14ae:	b0 ff       	sbrs	r27, 0
    14b0:	04 c0       	rjmp	.+8      	; 0x14ba <xEventGroupSetBits+0xc2>
                {
                    uxBitsToClear |= uxBitsWaitedFor;
    14b2:	c4 2a       	or	r12, r20
    14b4:	d5 2a       	or	r13, r21
    14b6:	e6 2a       	or	r14, r22
    14b8:	f7 2a       	or	r15, r23
                /* Store the actual event flag value in the task's event list
                item before removing the task from the event list.  The
                eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                that is was unblocked due to its required bits matching, rather
                than because it timed out. */
                vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
    14ba:	48 81       	ld	r20, Y
    14bc:	59 81       	ldd	r21, Y+1	; 0x01
    14be:	6a 81       	ldd	r22, Y+2	; 0x02
    14c0:	7b 81       	ldd	r23, Y+3	; 0x03
    14c2:	72 60       	ori	r23, 0x02	; 2
    14c4:	cf 01       	movw	r24, r30
    14c6:	0e 94 0b 19 	call	0x3216	; 0x3216 <vTaskRemoveFromUnorderedEventList>
    14ca:	ea 2d       	mov	r30, r10
    14cc:	fb 2d       	mov	r31, r11

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
    14ce:	0e 17       	cp	r16, r30
    14d0:	1f 07       	cpc	r17, r31
    14d2:	11 f6       	brne	.-124    	; 0x1458 <xEventGroupSetBits+0x60>
    14d4:	03 c0       	rjmp	.+6      	; 0x14dc <xEventGroupSetBits+0xe4>
EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
    14d6:	c1 2c       	mov	r12, r1
    14d8:	d1 2c       	mov	r13, r1
    14da:	76 01       	movw	r14, r12
            pxListItem = pxNext;
        }

        /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
        bit was set in the control word. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
    14dc:	c0 94       	com	r12
    14de:	d0 94       	com	r13
    14e0:	e0 94       	com	r14
    14e2:	f0 94       	com	r15
    14e4:	88 81       	ld	r24, Y
    14e6:	99 81       	ldd	r25, Y+1	; 0x01
    14e8:	aa 81       	ldd	r26, Y+2	; 0x02
    14ea:	bb 81       	ldd	r27, Y+3	; 0x03
    14ec:	c8 22       	and	r12, r24
    14ee:	d9 22       	and	r13, r25
    14f0:	ea 22       	and	r14, r26
    14f2:	fb 22       	and	r15, r27
    14f4:	c8 82       	st	Y, r12
    14f6:	d9 82       	std	Y+1, r13	; 0x01
    14f8:	ea 82       	std	Y+2, r14	; 0x02
    14fa:	fb 82       	std	Y+3, r15	; 0x03
    }
    ( void ) xTaskResumeAll();
    14fc:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <xTaskResumeAll>

    return pxEventBits->uxEventBits;
    1500:	68 81       	ld	r22, Y
    1502:	79 81       	ldd	r23, Y+1	; 0x01
    1504:	8a 81       	ldd	r24, Y+2	; 0x02
    1506:	9b 81       	ldd	r25, Y+3	; 0x03
}
    1508:	df 91       	pop	r29
    150a:	cf 91       	pop	r28
    150c:	1f 91       	pop	r17
    150e:	0f 91       	pop	r16
    1510:	ff 90       	pop	r15
    1512:	ef 90       	pop	r14
    1514:	df 90       	pop	r13
    1516:	cf 90       	pop	r12
    1518:	bf 90       	pop	r11
    151a:	af 90       	pop	r10
    151c:	9f 90       	pop	r9
    151e:	8f 90       	pop	r8
    1520:	7f 90       	pop	r7
    1522:	6f 90       	pop	r6
    1524:	5f 90       	pop	r5
    1526:	4f 90       	pop	r4
    1528:	08 95       	ret

0000152a <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
    152a:	cf 93       	push	r28
    152c:	df 93       	push	r29
    152e:	dc 01       	movw	r26, r24
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
    1530:	e4 e9       	ldi	r30, 0x94	; 148
    1532:	f9 e0       	ldi	r31, 0x09	; 9
    1534:	01 c0       	rjmp	.+2      	; 0x1538 <prvInsertBlockIntoFreeList+0xe>
    1536:	f9 01       	movw	r30, r18
    1538:	20 81       	ld	r18, Z
    153a:	31 81       	ldd	r19, Z+1	; 0x01
    153c:	2a 17       	cp	r18, r26
    153e:	3b 07       	cpc	r19, r27
    1540:	d0 f3       	brcs	.-12     	; 0x1536 <prvInsertBlockIntoFreeList+0xc>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
    1542:	82 81       	ldd	r24, Z+2	; 0x02
    1544:	93 81       	ldd	r25, Z+3	; 0x03
    1546:	af 01       	movw	r20, r30
    1548:	48 0f       	add	r20, r24
    154a:	59 1f       	adc	r21, r25
    154c:	a4 17       	cp	r26, r20
    154e:	b5 07       	cpc	r27, r21
    1550:	49 f4       	brne	.+18     	; 0x1564 <prvInsertBlockIntoFreeList+0x3a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
    1552:	12 96       	adiw	r26, 0x02	; 2
    1554:	4d 91       	ld	r20, X+
    1556:	5c 91       	ld	r21, X
    1558:	13 97       	sbiw	r26, 0x03	; 3
    155a:	84 0f       	add	r24, r20
    155c:	95 1f       	adc	r25, r21
    155e:	93 83       	std	Z+3, r25	; 0x03
    1560:	82 83       	std	Z+2, r24	; 0x02
    1562:	df 01       	movw	r26, r30
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
    1564:	12 96       	adiw	r26, 0x02	; 2
    1566:	8d 91       	ld	r24, X+
    1568:	9c 91       	ld	r25, X
    156a:	13 97       	sbiw	r26, 0x03	; 3
    156c:	ed 01       	movw	r28, r26
    156e:	c8 0f       	add	r28, r24
    1570:	d9 1f       	adc	r29, r25
    1572:	2c 17       	cp	r18, r28
    1574:	3d 07       	cpc	r19, r29
    1576:	d9 f4       	brne	.+54     	; 0x15ae <prvInsertBlockIntoFreeList+0x84>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
    1578:	20 91 92 09 	lds	r18, 0x0992	; 0x800992 <pxEnd>
    157c:	30 91 93 09 	lds	r19, 0x0993	; 0x800993 <pxEnd+0x1>
    1580:	c2 17       	cp	r28, r18
    1582:	d3 07       	cpc	r29, r19
    1584:	81 f0       	breq	.+32     	; 0x15a6 <prvInsertBlockIntoFreeList+0x7c>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
    1586:	2a 81       	ldd	r18, Y+2	; 0x02
    1588:	3b 81       	ldd	r19, Y+3	; 0x03
    158a:	82 0f       	add	r24, r18
    158c:	93 1f       	adc	r25, r19
    158e:	13 96       	adiw	r26, 0x03	; 3
    1590:	9c 93       	st	X, r25
    1592:	8e 93       	st	-X, r24
    1594:	12 97       	sbiw	r26, 0x02	; 2
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
    1596:	c0 81       	ld	r28, Z
    1598:	d1 81       	ldd	r29, Z+1	; 0x01
    159a:	88 81       	ld	r24, Y
    159c:	99 81       	ldd	r25, Y+1	; 0x01
    159e:	11 96       	adiw	r26, 0x01	; 1
    15a0:	9c 93       	st	X, r25
    15a2:	8e 93       	st	-X, r24
    15a4:	07 c0       	rjmp	.+14     	; 0x15b4 <prvInsertBlockIntoFreeList+0x8a>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
    15a6:	11 96       	adiw	r26, 0x01	; 1
    15a8:	dc 93       	st	X, r29
    15aa:	ce 93       	st	-X, r28
    15ac:	03 c0       	rjmp	.+6      	; 0x15b4 <prvInsertBlockIntoFreeList+0x8a>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
    15ae:	11 96       	adiw	r26, 0x01	; 1
    15b0:	3c 93       	st	X, r19
    15b2:	2e 93       	st	-X, r18

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
    15b4:	ae 17       	cp	r26, r30
    15b6:	bf 07       	cpc	r27, r31
    15b8:	11 f0       	breq	.+4      	; 0x15be <prvInsertBlockIntoFreeList+0x94>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
    15ba:	b1 83       	std	Z+1, r27	; 0x01
    15bc:	a0 83       	st	Z, r26
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    15be:	df 91       	pop	r29
    15c0:	cf 91       	pop	r28
    15c2:	08 95       	ret

000015c4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    15c4:	cf 92       	push	r12
    15c6:	df 92       	push	r13
    15c8:	ef 92       	push	r14
    15ca:	ff 92       	push	r15
    15cc:	0f 93       	push	r16
    15ce:	1f 93       	push	r17
    15d0:	cf 93       	push	r28
    15d2:	df 93       	push	r29
    15d4:	ec 01       	movw	r28, r24
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
    15d6:	0e 94 71 16 	call	0x2ce2	; 0x2ce2 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
    15da:	80 91 92 09 	lds	r24, 0x0992	; 0x800992 <pxEnd>
    15de:	90 91 93 09 	lds	r25, 0x0993	; 0x800993 <pxEnd+0x1>
    15e2:	89 2b       	or	r24, r25
    15e4:	41 f5       	brne	.+80     	; 0x1636 <pvPortMalloc+0x72>

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
    15e6:	e4 e9       	ldi	r30, 0x94	; 148
    15e8:	f9 e0       	ldi	r31, 0x09	; 9
    15ea:	a8 e9       	ldi	r26, 0x98	; 152
    15ec:	b9 e0       	ldi	r27, 0x09	; 9
    15ee:	b1 83       	std	Z+1, r27	; 0x01
    15f0:	a0 83       	st	Z, r26
	xStart.xBlockSize = ( size_t ) 0;
    15f2:	13 82       	std	Z+3, r1	; 0x03
    15f4:	12 82       	std	Z+2, r1	; 0x02
	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
	uxAddress -= xHeapStructSize;
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
	pxEnd = ( void * ) uxAddress;
    15f6:	e4 e3       	ldi	r30, 0x34	; 52
    15f8:	f9 e1       	ldi	r31, 0x19	; 25
    15fa:	f0 93 93 09 	sts	0x0993, r31	; 0x800993 <pxEnd+0x1>
    15fe:	e0 93 92 09 	sts	0x0992, r30	; 0x800992 <pxEnd>
	pxEnd->xBlockSize = 0;
    1602:	13 82       	std	Z+3, r1	; 0x03
    1604:	12 82       	std	Z+2, r1	; 0x02
	pxEnd->pxNextFreeBlock = NULL;
    1606:	11 82       	std	Z+1, r1	; 0x01
    1608:	10 82       	st	Z, r1

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
    160a:	8c e9       	ldi	r24, 0x9C	; 156
    160c:	9f e0       	ldi	r25, 0x0F	; 15
    160e:	13 96       	adiw	r26, 0x03	; 3
    1610:	9c 93       	st	X, r25
    1612:	8e 93       	st	-X, r24
    1614:	12 97       	sbiw	r26, 0x02	; 2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
    1616:	ed 93       	st	X+, r30
    1618:	fc 93       	st	X, r31

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
    161a:	90 93 8f 09 	sts	0x098F, r25	; 0x80098f <xMinimumEverFreeBytesRemaining+0x1>
    161e:	80 93 8e 09 	sts	0x098E, r24	; 0x80098e <xMinimumEverFreeBytesRemaining>
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
    1622:	90 93 91 09 	sts	0x0991, r25	; 0x800991 <xFreeBytesRemaining+0x1>
    1626:	80 93 90 09 	sts	0x0990, r24	; 0x800990 <xFreeBytesRemaining>

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
    162a:	80 e0       	ldi	r24, 0x00	; 0
    162c:	90 e8       	ldi	r25, 0x80	; 128
    162e:	90 93 8d 09 	sts	0x098D, r25	; 0x80098d <xBlockAllocatedBit+0x1>
    1632:	80 93 8c 09 	sts	0x098C, r24	; 0x80098c <xBlockAllocatedBit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
    1636:	e0 90 8c 09 	lds	r14, 0x098C	; 0x80098c <xBlockAllocatedBit>
    163a:	f0 90 8d 09 	lds	r15, 0x098D	; 0x80098d <xBlockAllocatedBit+0x1>
    163e:	c7 01       	movw	r24, r14
    1640:	8c 23       	and	r24, r28
    1642:	9d 23       	and	r25, r29
    1644:	89 2b       	or	r24, r25
    1646:	09 f0       	breq	.+2      	; 0x164a <pvPortMalloc+0x86>
    1648:	66 c0       	rjmp	.+204    	; 0x1716 <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
    164a:	20 97       	sbiw	r28, 0x00	; 0
    164c:	09 f4       	brne	.+2      	; 0x1650 <pvPortMalloc+0x8c>
    164e:	66 c0       	rjmp	.+204    	; 0x171c <pvPortMalloc+0x158>
			{
				xWantedSize += xHeapStructSize;
    1650:	ae 01       	movw	r20, r28
    1652:	4c 5f       	subi	r20, 0xFC	; 252
    1654:	5f 4f       	sbci	r21, 0xFF	; 255
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
    1656:	09 f4       	brne	.+2      	; 0x165a <pvPortMalloc+0x96>
    1658:	5e c0       	rjmp	.+188    	; 0x1716 <pvPortMalloc+0x152>
    165a:	00 91 90 09 	lds	r16, 0x0990	; 0x800990 <xFreeBytesRemaining>
    165e:	10 91 91 09 	lds	r17, 0x0991	; 0x800991 <xFreeBytesRemaining+0x1>
    1662:	04 17       	cp	r16, r20
    1664:	15 07       	cpc	r17, r21
    1666:	08 f4       	brcc	.+2      	; 0x166a <pvPortMalloc+0xa6>
    1668:	56 c0       	rjmp	.+172    	; 0x1716 <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
    166a:	c0 91 94 09 	lds	r28, 0x0994	; 0x800994 <xStart>
    166e:	d0 91 95 09 	lds	r29, 0x0995	; 0x800995 <xStart+0x1>

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
    1672:	e4 e9       	ldi	r30, 0x94	; 148
    1674:	f9 e0       	ldi	r31, 0x09	; 9
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    1676:	02 c0       	rjmp	.+4      	; 0x167c <pvPortMalloc+0xb8>
    1678:	fe 01       	movw	r30, r28
				{
					pxPreviousBlock = pxBlock;
					pxBlock = pxBlock->pxNextFreeBlock;
    167a:	e9 01       	movw	r28, r18
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    167c:	2a 81       	ldd	r18, Y+2	; 0x02
    167e:	3b 81       	ldd	r19, Y+3	; 0x03
    1680:	24 17       	cp	r18, r20
    1682:	35 07       	cpc	r19, r21
    1684:	28 f4       	brcc	.+10     	; 0x1690 <pvPortMalloc+0xcc>
    1686:	28 81       	ld	r18, Y
    1688:	39 81       	ldd	r19, Y+1	; 0x01
    168a:	21 15       	cp	r18, r1
    168c:	31 05       	cpc	r19, r1
    168e:	a1 f7       	brne	.-24     	; 0x1678 <pvPortMalloc+0xb4>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
    1690:	80 91 92 09 	lds	r24, 0x0992	; 0x800992 <pxEnd>
    1694:	90 91 93 09 	lds	r25, 0x0993	; 0x800993 <pxEnd+0x1>
    1698:	c8 17       	cp	r28, r24
    169a:	d9 07       	cpc	r29, r25
    169c:	e1 f1       	breq	.+120    	; 0x1716 <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
    169e:	c0 80       	ld	r12, Z
    16a0:	d1 80       	ldd	r13, Z+1	; 0x01
    16a2:	84 e0       	ldi	r24, 0x04	; 4
    16a4:	c8 0e       	add	r12, r24
    16a6:	d1 1c       	adc	r13, r1

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    16a8:	88 81       	ld	r24, Y
    16aa:	99 81       	ldd	r25, Y+1	; 0x01
    16ac:	91 83       	std	Z+1, r25	; 0x01
    16ae:	80 83       	st	Z, r24

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    16b0:	2a 81       	ldd	r18, Y+2	; 0x02
    16b2:	3b 81       	ldd	r19, Y+3	; 0x03
    16b4:	24 1b       	sub	r18, r20
    16b6:	35 0b       	sbc	r19, r21
    16b8:	29 30       	cpi	r18, 0x09	; 9
    16ba:	31 05       	cpc	r19, r1
    16bc:	48 f0       	brcs	.+18     	; 0x16d0 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
    16be:	ce 01       	movw	r24, r28
    16c0:	84 0f       	add	r24, r20
    16c2:	95 1f       	adc	r25, r21
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    16c4:	fc 01       	movw	r30, r24
    16c6:	33 83       	std	Z+3, r19	; 0x03
    16c8:	22 83       	std	Z+2, r18	; 0x02
						pxBlock->xBlockSize = xWantedSize;
    16ca:	5b 83       	std	Y+3, r21	; 0x03
    16cc:	4a 83       	std	Y+2, r20	; 0x02

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
    16ce:	2d df       	rcall	.-422    	; 0x152a <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
    16d0:	8a 81       	ldd	r24, Y+2	; 0x02
    16d2:	9b 81       	ldd	r25, Y+3	; 0x03
    16d4:	08 1b       	sub	r16, r24
    16d6:	19 0b       	sbc	r17, r25
    16d8:	10 93 91 09 	sts	0x0991, r17	; 0x800991 <xFreeBytesRemaining+0x1>
    16dc:	00 93 90 09 	sts	0x0990, r16	; 0x800990 <xFreeBytesRemaining>

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
    16e0:	20 91 8e 09 	lds	r18, 0x098E	; 0x80098e <xMinimumEverFreeBytesRemaining>
    16e4:	30 91 8f 09 	lds	r19, 0x098F	; 0x80098f <xMinimumEverFreeBytesRemaining+0x1>
    16e8:	02 17       	cp	r16, r18
    16ea:	13 07       	cpc	r17, r19
    16ec:	20 f4       	brcc	.+8      	; 0x16f6 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
    16ee:	10 93 8f 09 	sts	0x098F, r17	; 0x80098f <xMinimumEverFreeBytesRemaining+0x1>
    16f2:	00 93 8e 09 	sts	0x098E, r16	; 0x80098e <xMinimumEverFreeBytesRemaining>
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
    16f6:	e8 2a       	or	r14, r24
    16f8:	f9 2a       	or	r15, r25
    16fa:	fb 82       	std	Y+3, r15	; 0x03
    16fc:	ea 82       	std	Y+2, r14	; 0x02
					pxBlock->pxNextFreeBlock = NULL;
    16fe:	19 82       	std	Y+1, r1	; 0x01
    1700:	18 82       	st	Y, r1
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    1702:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
    1706:	c1 14       	cp	r12, r1
    1708:	d1 04       	cpc	r13, r1
    170a:	59 f4       	brne	.+22     	; 0x1722 <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
    170c:	0e 94 2d 1e 	call	0x3c5a	; 0x3c5a <vApplicationMallocFailedHook>
    1710:	c1 2c       	mov	r12, r1
    1712:	d1 2c       	mov	r13, r1
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
    1714:	06 c0       	rjmp	.+12     	; 0x1722 <pvPortMalloc+0x15e>
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    1716:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <xTaskResumeAll>
    171a:	f8 cf       	rjmp	.-16     	; 0x170c <pvPortMalloc+0x148>
    171c:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <xTaskResumeAll>
    1720:	f5 cf       	rjmp	.-22     	; 0x170c <pvPortMalloc+0x148>
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
}
    1722:	c6 01       	movw	r24, r12
    1724:	df 91       	pop	r29
    1726:	cf 91       	pop	r28
    1728:	1f 91       	pop	r17
    172a:	0f 91       	pop	r16
    172c:	ff 90       	pop	r15
    172e:	ef 90       	pop	r14
    1730:	df 90       	pop	r13
    1732:	cf 90       	pop	r12
    1734:	08 95       	ret

00001736 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    1736:	cf 93       	push	r28
    1738:	df 93       	push	r29
uint8_t *puc = ( uint8_t * ) pv;
BlockLink_t *pxLink;

	if( pv != NULL )
    173a:	00 97       	sbiw	r24, 0x00	; 0
    173c:	51 f1       	breq	.+84     	; 0x1792 <vPortFree+0x5c>

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
		configASSERT( pxLink->pxNextFreeBlock == NULL );

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
    173e:	fc 01       	movw	r30, r24
    1740:	34 97       	sbiw	r30, 0x04	; 4
    1742:	22 81       	ldd	r18, Z+2	; 0x02
    1744:	33 81       	ldd	r19, Z+3	; 0x03
    1746:	40 91 8c 09 	lds	r20, 0x098C	; 0x80098c <xBlockAllocatedBit>
    174a:	50 91 8d 09 	lds	r21, 0x098D	; 0x80098d <xBlockAllocatedBit+0x1>
    174e:	b9 01       	movw	r22, r18
    1750:	64 23       	and	r22, r20
    1752:	75 23       	and	r23, r21
    1754:	67 2b       	or	r22, r23
    1756:	e9 f0       	breq	.+58     	; 0x1792 <vPortFree+0x5c>
		{
			if( pxLink->pxNextFreeBlock == NULL )
    1758:	60 81       	ld	r22, Z
    175a:	71 81       	ldd	r23, Z+1	; 0x01
    175c:	67 2b       	or	r22, r23
    175e:	c9 f4       	brne	.+50     	; 0x1792 <vPortFree+0x5c>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
    1760:	ef 01       	movw	r28, r30
    1762:	40 95       	com	r20
    1764:	50 95       	com	r21
    1766:	24 23       	and	r18, r20
    1768:	35 23       	and	r19, r21
    176a:	33 83       	std	Z+3, r19	; 0x03
    176c:	22 83       	std	Z+2, r18	; 0x02

				vTaskSuspendAll();
    176e:	0e 94 71 16 	call	0x2ce2	; 0x2ce2 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
    1772:	20 91 90 09 	lds	r18, 0x0990	; 0x800990 <xFreeBytesRemaining>
    1776:	30 91 91 09 	lds	r19, 0x0991	; 0x800991 <xFreeBytesRemaining+0x1>
    177a:	8a 81       	ldd	r24, Y+2	; 0x02
    177c:	9b 81       	ldd	r25, Y+3	; 0x03
    177e:	82 0f       	add	r24, r18
    1780:	93 1f       	adc	r25, r19
    1782:	90 93 91 09 	sts	0x0991, r25	; 0x800991 <xFreeBytesRemaining+0x1>
    1786:	80 93 90 09 	sts	0x0990, r24	; 0x800990 <xFreeBytesRemaining>
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
    178a:	ce 01       	movw	r24, r28
    178c:	ce de       	rcall	.-612    	; 0x152a <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
    178e:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
    1792:	df 91       	pop	r29
    1794:	cf 91       	pop	r28
    1796:	08 95       	ret

00001798 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    1798:	fc 01       	movw	r30, r24
    /* The list structure contains a list item which is used to mark the
    end of the list.  To initialise the list the list end is inserted
    as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );            /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    179a:	03 96       	adiw	r24, 0x03	; 3
    179c:	92 83       	std	Z+2, r25	; 0x02
    179e:	81 83       	std	Z+1, r24	; 0x01

    /* The list end value is the highest possible value in the list to
    ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
    17a0:	4f ef       	ldi	r20, 0xFF	; 255
    17a2:	5f ef       	ldi	r21, 0xFF	; 255
    17a4:	ba 01       	movw	r22, r20
    17a6:	43 83       	std	Z+3, r20	; 0x03
    17a8:	54 83       	std	Z+4, r21	; 0x04
    17aa:	65 83       	std	Z+5, r22	; 0x05
    17ac:	76 83       	std	Z+6, r23	; 0x06

    /* The list end next and previous pointers point to itself so we know
    when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );    /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    17ae:	90 87       	std	Z+8, r25	; 0x08
    17b0:	87 83       	std	Z+7, r24	; 0x07
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    17b2:	92 87       	std	Z+10, r25	; 0x0a
    17b4:	81 87       	std	Z+9, r24	; 0x09

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    17b6:	10 82       	st	Z, r1
    17b8:	08 95       	ret

000017ba <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
    17ba:	fc 01       	movw	r30, r24
    17bc:	13 86       	std	Z+11, r1	; 0x0b
    17be:	12 86       	std	Z+10, r1	; 0x0a
    17c0:	08 95       	ret

000017c2 <vListInsertEnd>:
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    17c2:	cf 93       	push	r28
    17c4:	df 93       	push	r29
    17c6:	9c 01       	movw	r18, r24
    17c8:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
    17ca:	dc 01       	movw	r26, r24
    17cc:	11 96       	adiw	r26, 0x01	; 1
    17ce:	cd 91       	ld	r28, X+
    17d0:	dc 91       	ld	r29, X
    17d2:	12 97       	sbiw	r26, 0x02	; 2
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
    makes the new list item the last item to be removed by a call to
    listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
    17d4:	d5 83       	std	Z+5, r29	; 0x05
    17d6:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    17d8:	8e 81       	ldd	r24, Y+6	; 0x06
    17da:	9f 81       	ldd	r25, Y+7	; 0x07
    17dc:	97 83       	std	Z+7, r25	; 0x07
    17de:	86 83       	std	Z+6, r24	; 0x06

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
    17e0:	8e 81       	ldd	r24, Y+6	; 0x06
    17e2:	9f 81       	ldd	r25, Y+7	; 0x07
    17e4:	dc 01       	movw	r26, r24
    17e6:	15 96       	adiw	r26, 0x05	; 5
    17e8:	7c 93       	st	X, r23
    17ea:	6e 93       	st	-X, r22
    17ec:	14 97       	sbiw	r26, 0x04	; 4
    pxIndex->pxPrevious = pxNewListItem;
    17ee:	7f 83       	std	Y+7, r23	; 0x07
    17f0:	6e 83       	std	Y+6, r22	; 0x06

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
    17f2:	33 87       	std	Z+11, r19	; 0x0b
    17f4:	22 87       	std	Z+10, r18	; 0x0a

    ( pxList->uxNumberOfItems )++;
    17f6:	f9 01       	movw	r30, r18
    17f8:	80 81       	ld	r24, Z
    17fa:	8f 5f       	subi	r24, 0xFF	; 255
    17fc:	80 83       	st	Z, r24
}
    17fe:	df 91       	pop	r29
    1800:	cf 91       	pop	r28
    1802:	08 95       	ret

00001804 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    1804:	0f 93       	push	r16
    1806:	1f 93       	push	r17
    1808:	cf 93       	push	r28
    180a:	df 93       	push	r29
    180c:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    180e:	08 81       	ld	r16, Y
    1810:	19 81       	ldd	r17, Y+1	; 0x01
    1812:	2a 81       	ldd	r18, Y+2	; 0x02
    1814:	3b 81       	ldd	r19, Y+3	; 0x03
    new list item should be placed after it.  This ensures that TCBs which are
    stored in ready lists (all of which have the same xItemValue value) get a
    share of the CPU.  However, if the xItemValue is the same as the back marker
    the iteration loop below will not end.  Therefore the value is checked
    first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
    1816:	0f 3f       	cpi	r16, 0xFF	; 255
    1818:	4f ef       	ldi	r20, 0xFF	; 255
    181a:	14 07       	cpc	r17, r20
    181c:	24 07       	cpc	r18, r20
    181e:	34 07       	cpc	r19, r20
    1820:	21 f4       	brne	.+8      	; 0x182a <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
    1822:	fc 01       	movw	r30, r24
    1824:	a1 85       	ldd	r26, Z+9	; 0x09
    1826:	b2 85       	ldd	r27, Z+10	; 0x0a
    1828:	11 c0       	rjmp	.+34     	; 0x184c <vListInsert+0x48>
            4) Using a queue or semaphore before it has been initialised or
               before the scheduler has been started (are interrupts firing
               before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
    182a:	dc 01       	movw	r26, r24
    182c:	13 96       	adiw	r26, 0x03	; 3
    182e:	01 c0       	rjmp	.+2      	; 0x1832 <vListInsert+0x2e>
    1830:	df 01       	movw	r26, r30
    1832:	14 96       	adiw	r26, 0x04	; 4
    1834:	ed 91       	ld	r30, X+
    1836:	fc 91       	ld	r31, X
    1838:	15 97       	sbiw	r26, 0x05	; 5
    183a:	40 81       	ld	r20, Z
    183c:	51 81       	ldd	r21, Z+1	; 0x01
    183e:	62 81       	ldd	r22, Z+2	; 0x02
    1840:	73 81       	ldd	r23, Z+3	; 0x03
    1842:	04 17       	cp	r16, r20
    1844:	15 07       	cpc	r17, r21
    1846:	26 07       	cpc	r18, r22
    1848:	37 07       	cpc	r19, r23
    184a:	90 f7       	brcc	.-28     	; 0x1830 <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
            insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
    184c:	14 96       	adiw	r26, 0x04	; 4
    184e:	ed 91       	ld	r30, X+
    1850:	fc 91       	ld	r31, X
    1852:	15 97       	sbiw	r26, 0x05	; 5
    1854:	fd 83       	std	Y+5, r31	; 0x05
    1856:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    1858:	d7 83       	std	Z+7, r29	; 0x07
    185a:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
    185c:	bf 83       	std	Y+7, r27	; 0x07
    185e:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
    1860:	15 96       	adiw	r26, 0x05	; 5
    1862:	dc 93       	st	X, r29
    1864:	ce 93       	st	-X, r28
    1866:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
    item later. */
    pxNewListItem->pxContainer = pxList;
    1868:	9b 87       	std	Y+11, r25	; 0x0b
    186a:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
    186c:	fc 01       	movw	r30, r24
    186e:	20 81       	ld	r18, Z
    1870:	2f 5f       	subi	r18, 0xFF	; 255
    1872:	20 83       	st	Z, r18
}
    1874:	df 91       	pop	r29
    1876:	cf 91       	pop	r28
    1878:	1f 91       	pop	r17
    187a:	0f 91       	pop	r16
    187c:	08 95       	ret

0000187e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    187e:	cf 93       	push	r28
    1880:	df 93       	push	r29
    1882:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
    1884:	a2 85       	ldd	r26, Z+10	; 0x0a
    1886:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    1888:	c4 81       	ldd	r28, Z+4	; 0x04
    188a:	d5 81       	ldd	r29, Z+5	; 0x05
    188c:	86 81       	ldd	r24, Z+6	; 0x06
    188e:	97 81       	ldd	r25, Z+7	; 0x07
    1890:	9f 83       	std	Y+7, r25	; 0x07
    1892:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    1894:	c6 81       	ldd	r28, Z+6	; 0x06
    1896:	d7 81       	ldd	r29, Z+7	; 0x07
    1898:	84 81       	ldd	r24, Z+4	; 0x04
    189a:	95 81       	ldd	r25, Z+5	; 0x05
    189c:	9d 83       	std	Y+5, r25	; 0x05
    189e:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
    18a0:	11 96       	adiw	r26, 0x01	; 1
    18a2:	8d 91       	ld	r24, X+
    18a4:	9c 91       	ld	r25, X
    18a6:	12 97       	sbiw	r26, 0x02	; 2
    18a8:	e8 17       	cp	r30, r24
    18aa:	f9 07       	cpc	r31, r25
    18ac:	31 f4       	brne	.+12     	; 0x18ba <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
    18ae:	86 81       	ldd	r24, Z+6	; 0x06
    18b0:	97 81       	ldd	r25, Z+7	; 0x07
    18b2:	12 96       	adiw	r26, 0x02	; 2
    18b4:	9c 93       	st	X, r25
    18b6:	8e 93       	st	-X, r24
    18b8:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
    18ba:	13 86       	std	Z+11, r1	; 0x0b
    18bc:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
    18be:	8c 91       	ld	r24, X
    18c0:	81 50       	subi	r24, 0x01	; 1
    18c2:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
    18c4:	8c 91       	ld	r24, X
}
    18c6:	df 91       	pop	r29
    18c8:	cf 91       	pop	r28
    18ca:	08 95       	ret

000018cc <pxPortInitialiseStack>:
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    18cc:	31 e1       	ldi	r19, 0x11	; 17
    18ce:	fc 01       	movw	r30, r24
    18d0:	30 83       	st	Z, r19
    18d2:	31 97       	sbiw	r30, 0x01	; 1
    18d4:	22 e2       	ldi	r18, 0x22	; 34
    18d6:	20 83       	st	Z, r18
    18d8:	31 97       	sbiw	r30, 0x01	; 1
    18da:	a3 e3       	ldi	r26, 0x33	; 51
    18dc:	a0 83       	st	Z, r26
    18de:	31 97       	sbiw	r30, 0x01	; 1
    18e0:	60 83       	st	Z, r22
    18e2:	31 97       	sbiw	r30, 0x01	; 1
    18e4:	70 83       	st	Z, r23
    18e6:	31 97       	sbiw	r30, 0x01	; 1
    18e8:	10 82       	st	Z, r1
    18ea:	31 97       	sbiw	r30, 0x01	; 1
    18ec:	10 82       	st	Z, r1
    18ee:	31 97       	sbiw	r30, 0x01	; 1
    18f0:	60 e8       	ldi	r22, 0x80	; 128
    18f2:	60 83       	st	Z, r22
    18f4:	31 97       	sbiw	r30, 0x01	; 1
    18f6:	10 82       	st	Z, r1
    18f8:	31 97       	sbiw	r30, 0x01	; 1
    18fa:	10 82       	st	Z, r1
    18fc:	31 97       	sbiw	r30, 0x01	; 1
    18fe:	10 82       	st	Z, r1
    1900:	31 97       	sbiw	r30, 0x01	; 1
    1902:	62 e0       	ldi	r22, 0x02	; 2
    1904:	60 83       	st	Z, r22
    1906:	31 97       	sbiw	r30, 0x01	; 1
    1908:	63 e0       	ldi	r22, 0x03	; 3
    190a:	60 83       	st	Z, r22
    190c:	31 97       	sbiw	r30, 0x01	; 1
    190e:	64 e0       	ldi	r22, 0x04	; 4
    1910:	60 83       	st	Z, r22
    1912:	31 97       	sbiw	r30, 0x01	; 1
    1914:	65 e0       	ldi	r22, 0x05	; 5
    1916:	60 83       	st	Z, r22
    1918:	31 97       	sbiw	r30, 0x01	; 1
    191a:	66 e0       	ldi	r22, 0x06	; 6
    191c:	60 83       	st	Z, r22
    191e:	31 97       	sbiw	r30, 0x01	; 1
    1920:	67 e0       	ldi	r22, 0x07	; 7
    1922:	60 83       	st	Z, r22
    1924:	31 97       	sbiw	r30, 0x01	; 1
    1926:	68 e0       	ldi	r22, 0x08	; 8
    1928:	60 83       	st	Z, r22
    192a:	31 97       	sbiw	r30, 0x01	; 1
    192c:	69 e0       	ldi	r22, 0x09	; 9
    192e:	60 83       	st	Z, r22
    1930:	31 97       	sbiw	r30, 0x01	; 1
    1932:	60 e1       	ldi	r22, 0x10	; 16
    1934:	60 83       	st	Z, r22
    1936:	31 97       	sbiw	r30, 0x01	; 1
    1938:	30 83       	st	Z, r19
    193a:	31 97       	sbiw	r30, 0x01	; 1
    193c:	32 e1       	ldi	r19, 0x12	; 18
    193e:	30 83       	st	Z, r19
    1940:	31 97       	sbiw	r30, 0x01	; 1
    1942:	33 e1       	ldi	r19, 0x13	; 19
    1944:	30 83       	st	Z, r19
    1946:	31 97       	sbiw	r30, 0x01	; 1
    1948:	34 e1       	ldi	r19, 0x14	; 20
    194a:	30 83       	st	Z, r19
    194c:	31 97       	sbiw	r30, 0x01	; 1
    194e:	35 e1       	ldi	r19, 0x15	; 21
    1950:	30 83       	st	Z, r19
    1952:	31 97       	sbiw	r30, 0x01	; 1
    1954:	36 e1       	ldi	r19, 0x16	; 22
    1956:	30 83       	st	Z, r19
    1958:	31 97       	sbiw	r30, 0x01	; 1
    195a:	37 e1       	ldi	r19, 0x17	; 23
    195c:	30 83       	st	Z, r19
    195e:	31 97       	sbiw	r30, 0x01	; 1
    1960:	38 e1       	ldi	r19, 0x18	; 24
    1962:	30 83       	st	Z, r19
    1964:	31 97       	sbiw	r30, 0x01	; 1
    1966:	39 e1       	ldi	r19, 0x19	; 25
    1968:	30 83       	st	Z, r19
    196a:	31 97       	sbiw	r30, 0x01	; 1
    196c:	30 e2       	ldi	r19, 0x20	; 32
    196e:	30 83       	st	Z, r19
    1970:	31 97       	sbiw	r30, 0x01	; 1
    1972:	31 e2       	ldi	r19, 0x21	; 33
    1974:	30 83       	st	Z, r19
    1976:	31 97       	sbiw	r30, 0x01	; 1
    1978:	20 83       	st	Z, r18
    197a:	31 97       	sbiw	r30, 0x01	; 1
    197c:	23 e2       	ldi	r18, 0x23	; 35
    197e:	20 83       	st	Z, r18
    1980:	31 97       	sbiw	r30, 0x01	; 1
    1982:	40 83       	st	Z, r20
    1984:	31 97       	sbiw	r30, 0x01	; 1
    1986:	50 83       	st	Z, r21
    1988:	31 97       	sbiw	r30, 0x01	; 1
    198a:	26 e2       	ldi	r18, 0x26	; 38
    198c:	20 83       	st	Z, r18
    198e:	31 97       	sbiw	r30, 0x01	; 1
    1990:	27 e2       	ldi	r18, 0x27	; 39
    1992:	20 83       	st	Z, r18
    1994:	31 97       	sbiw	r30, 0x01	; 1
    1996:	28 e2       	ldi	r18, 0x28	; 40
    1998:	20 83       	st	Z, r18
    199a:	31 97       	sbiw	r30, 0x01	; 1
    199c:	29 e2       	ldi	r18, 0x29	; 41
    199e:	20 83       	st	Z, r18
    19a0:	31 97       	sbiw	r30, 0x01	; 1
    19a2:	20 e3       	ldi	r18, 0x30	; 48
    19a4:	20 83       	st	Z, r18
    19a6:	31 97       	sbiw	r30, 0x01	; 1
    19a8:	21 e3       	ldi	r18, 0x31	; 49
    19aa:	20 83       	st	Z, r18
    19ac:	89 97       	sbiw	r24, 0x29	; 41
    19ae:	08 95       	ret

000019b0 <xPortStartScheduler>:
    19b0:	a8 95       	wdr
    19b2:	90 ec       	ldi	r25, 0xC0	; 192
    19b4:	88 e1       	ldi	r24, 0x18	; 24
    19b6:	0f b6       	in	r0, 0x3f	; 63
    19b8:	f8 94       	cli
    19ba:	a8 95       	wdr
    19bc:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    19c0:	0f be       	out	0x3f, r0	; 63
    19c2:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    19c6:	a0 91 b2 19 	lds	r26, 0x19B2	; 0x8019b2 <pxCurrentTCB>
    19ca:	b0 91 b3 19 	lds	r27, 0x19B3	; 0x8019b3 <pxCurrentTCB+0x1>
    19ce:	cd 91       	ld	r28, X+
    19d0:	cd bf       	out	0x3d, r28	; 61
    19d2:	dd 91       	ld	r29, X+
    19d4:	de bf       	out	0x3e, r29	; 62
    19d6:	ff 91       	pop	r31
    19d8:	ef 91       	pop	r30
    19da:	df 91       	pop	r29
    19dc:	cf 91       	pop	r28
    19de:	bf 91       	pop	r27
    19e0:	af 91       	pop	r26
    19e2:	9f 91       	pop	r25
    19e4:	8f 91       	pop	r24
    19e6:	7f 91       	pop	r23
    19e8:	6f 91       	pop	r22
    19ea:	5f 91       	pop	r21
    19ec:	4f 91       	pop	r20
    19ee:	3f 91       	pop	r19
    19f0:	2f 91       	pop	r18
    19f2:	1f 91       	pop	r17
    19f4:	0f 91       	pop	r16
    19f6:	ff 90       	pop	r15
    19f8:	ef 90       	pop	r14
    19fa:	df 90       	pop	r13
    19fc:	cf 90       	pop	r12
    19fe:	bf 90       	pop	r11
    1a00:	af 90       	pop	r10
    1a02:	9f 90       	pop	r9
    1a04:	8f 90       	pop	r8
    1a06:	7f 90       	pop	r7
    1a08:	6f 90       	pop	r6
    1a0a:	5f 90       	pop	r5
    1a0c:	4f 90       	pop	r4
    1a0e:	3f 90       	pop	r3
    1a10:	2f 90       	pop	r2
    1a12:	1f 90       	pop	r1
    1a14:	0f 90       	pop	r0
    1a16:	0c be       	out	0x3c, r0	; 60
    1a18:	0f 90       	pop	r0
    1a1a:	0b be       	out	0x3b, r0	; 59
    1a1c:	0f 90       	pop	r0
    1a1e:	0f be       	out	0x3f, r0	; 63
    1a20:	0f 90       	pop	r0
    1a22:	08 95       	ret
    1a24:	81 e0       	ldi	r24, 0x01	; 1
    1a26:	08 95       	ret

00001a28 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYield( void )
{
    portSAVE_CONTEXT();
    1a28:	0f 92       	push	r0
    1a2a:	0f b6       	in	r0, 0x3f	; 63
    1a2c:	f8 94       	cli
    1a2e:	0f 92       	push	r0
    1a30:	0b b6       	in	r0, 0x3b	; 59
    1a32:	0f 92       	push	r0
    1a34:	0c b6       	in	r0, 0x3c	; 60
    1a36:	0f 92       	push	r0
    1a38:	1f 92       	push	r1
    1a3a:	11 24       	eor	r1, r1
    1a3c:	2f 92       	push	r2
    1a3e:	3f 92       	push	r3
    1a40:	4f 92       	push	r4
    1a42:	5f 92       	push	r5
    1a44:	6f 92       	push	r6
    1a46:	7f 92       	push	r7
    1a48:	8f 92       	push	r8
    1a4a:	9f 92       	push	r9
    1a4c:	af 92       	push	r10
    1a4e:	bf 92       	push	r11
    1a50:	cf 92       	push	r12
    1a52:	df 92       	push	r13
    1a54:	ef 92       	push	r14
    1a56:	ff 92       	push	r15
    1a58:	0f 93       	push	r16
    1a5a:	1f 93       	push	r17
    1a5c:	2f 93       	push	r18
    1a5e:	3f 93       	push	r19
    1a60:	4f 93       	push	r20
    1a62:	5f 93       	push	r21
    1a64:	6f 93       	push	r22
    1a66:	7f 93       	push	r23
    1a68:	8f 93       	push	r24
    1a6a:	9f 93       	push	r25
    1a6c:	af 93       	push	r26
    1a6e:	bf 93       	push	r27
    1a70:	cf 93       	push	r28
    1a72:	df 93       	push	r29
    1a74:	ef 93       	push	r30
    1a76:	ff 93       	push	r31
    1a78:	a0 91 b2 19 	lds	r26, 0x19B2	; 0x8019b2 <pxCurrentTCB>
    1a7c:	b0 91 b3 19 	lds	r27, 0x19B3	; 0x8019b3 <pxCurrentTCB+0x1>
    1a80:	0d b6       	in	r0, 0x3d	; 61
    1a82:	0d 92       	st	X+, r0
    1a84:	0e b6       	in	r0, 0x3e	; 62
    1a86:	0d 92       	st	X+, r0
    vTaskSwitchContext();
    1a88:	0e 94 ef 17 	call	0x2fde	; 0x2fde <vTaskSwitchContext>
    portRESTORE_CONTEXT();
    1a8c:	a0 91 b2 19 	lds	r26, 0x19B2	; 0x8019b2 <pxCurrentTCB>
    1a90:	b0 91 b3 19 	lds	r27, 0x19B3	; 0x8019b3 <pxCurrentTCB+0x1>
    1a94:	cd 91       	ld	r28, X+
    1a96:	cd bf       	out	0x3d, r28	; 61
    1a98:	dd 91       	ld	r29, X+
    1a9a:	de bf       	out	0x3e, r29	; 62
    1a9c:	ff 91       	pop	r31
    1a9e:	ef 91       	pop	r30
    1aa0:	df 91       	pop	r29
    1aa2:	cf 91       	pop	r28
    1aa4:	bf 91       	pop	r27
    1aa6:	af 91       	pop	r26
    1aa8:	9f 91       	pop	r25
    1aaa:	8f 91       	pop	r24
    1aac:	7f 91       	pop	r23
    1aae:	6f 91       	pop	r22
    1ab0:	5f 91       	pop	r21
    1ab2:	4f 91       	pop	r20
    1ab4:	3f 91       	pop	r19
    1ab6:	2f 91       	pop	r18
    1ab8:	1f 91       	pop	r17
    1aba:	0f 91       	pop	r16
    1abc:	ff 90       	pop	r15
    1abe:	ef 90       	pop	r14
    1ac0:	df 90       	pop	r13
    1ac2:	cf 90       	pop	r12
    1ac4:	bf 90       	pop	r11
    1ac6:	af 90       	pop	r10
    1ac8:	9f 90       	pop	r9
    1aca:	8f 90       	pop	r8
    1acc:	7f 90       	pop	r7
    1ace:	6f 90       	pop	r6
    1ad0:	5f 90       	pop	r5
    1ad2:	4f 90       	pop	r4
    1ad4:	3f 90       	pop	r3
    1ad6:	2f 90       	pop	r2
    1ad8:	1f 90       	pop	r1
    1ada:	0f 90       	pop	r0
    1adc:	0c be       	out	0x3c, r0	; 60
    1ade:	0f 90       	pop	r0
    1ae0:	0b be       	out	0x3b, r0	; 59
    1ae2:	0f 90       	pop	r0
    1ae4:	0f be       	out	0x3f, r0	; 63
    1ae6:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
    1ae8:	08 95       	ret

00001aea <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
    1aea:	0f 92       	push	r0
    1aec:	0f b6       	in	r0, 0x3f	; 63
    1aee:	f8 94       	cli
    1af0:	0f 92       	push	r0
    1af2:	0b b6       	in	r0, 0x3b	; 59
    1af4:	0f 92       	push	r0
    1af6:	0c b6       	in	r0, 0x3c	; 60
    1af8:	0f 92       	push	r0
    1afa:	1f 92       	push	r1
    1afc:	11 24       	eor	r1, r1
    1afe:	2f 92       	push	r2
    1b00:	3f 92       	push	r3
    1b02:	4f 92       	push	r4
    1b04:	5f 92       	push	r5
    1b06:	6f 92       	push	r6
    1b08:	7f 92       	push	r7
    1b0a:	8f 92       	push	r8
    1b0c:	9f 92       	push	r9
    1b0e:	af 92       	push	r10
    1b10:	bf 92       	push	r11
    1b12:	cf 92       	push	r12
    1b14:	df 92       	push	r13
    1b16:	ef 92       	push	r14
    1b18:	ff 92       	push	r15
    1b1a:	0f 93       	push	r16
    1b1c:	1f 93       	push	r17
    1b1e:	2f 93       	push	r18
    1b20:	3f 93       	push	r19
    1b22:	4f 93       	push	r20
    1b24:	5f 93       	push	r21
    1b26:	6f 93       	push	r22
    1b28:	7f 93       	push	r23
    1b2a:	8f 93       	push	r24
    1b2c:	9f 93       	push	r25
    1b2e:	af 93       	push	r26
    1b30:	bf 93       	push	r27
    1b32:	cf 93       	push	r28
    1b34:	df 93       	push	r29
    1b36:	ef 93       	push	r30
    1b38:	ff 93       	push	r31
    1b3a:	a0 91 b2 19 	lds	r26, 0x19B2	; 0x8019b2 <pxCurrentTCB>
    1b3e:	b0 91 b3 19 	lds	r27, 0x19B3	; 0x8019b3 <pxCurrentTCB+0x1>
    1b42:	0d b6       	in	r0, 0x3d	; 61
    1b44:	0d 92       	st	X+, r0
    1b46:	0e b6       	in	r0, 0x3e	; 62
    1b48:	0d 92       	st	X+, r0

    sleep_reset();        //     reset the sleep_mode() faster than sleep_disable();
    1b4a:	13 be       	out	0x33, r1	; 51

    if( xTaskIncrementTick() != pdFALSE )
    1b4c:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <xTaskIncrementTick>
    1b50:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
    1b52:	0e 94 ef 17 	call	0x2fde	; 0x2fde <vTaskSwitchContext>
    }

    portRESTORE_CONTEXT();
    1b56:	a0 91 b2 19 	lds	r26, 0x19B2	; 0x8019b2 <pxCurrentTCB>
    1b5a:	b0 91 b3 19 	lds	r27, 0x19B3	; 0x8019b3 <pxCurrentTCB+0x1>
    1b5e:	cd 91       	ld	r28, X+
    1b60:	cd bf       	out	0x3d, r28	; 61
    1b62:	dd 91       	ld	r29, X+
    1b64:	de bf       	out	0x3e, r29	; 62
    1b66:	ff 91       	pop	r31
    1b68:	ef 91       	pop	r30
    1b6a:	df 91       	pop	r29
    1b6c:	cf 91       	pop	r28
    1b6e:	bf 91       	pop	r27
    1b70:	af 91       	pop	r26
    1b72:	9f 91       	pop	r25
    1b74:	8f 91       	pop	r24
    1b76:	7f 91       	pop	r23
    1b78:	6f 91       	pop	r22
    1b7a:	5f 91       	pop	r21
    1b7c:	4f 91       	pop	r20
    1b7e:	3f 91       	pop	r19
    1b80:	2f 91       	pop	r18
    1b82:	1f 91       	pop	r17
    1b84:	0f 91       	pop	r16
    1b86:	ff 90       	pop	r15
    1b88:	ef 90       	pop	r14
    1b8a:	df 90       	pop	r13
    1b8c:	cf 90       	pop	r12
    1b8e:	bf 90       	pop	r11
    1b90:	af 90       	pop	r10
    1b92:	9f 90       	pop	r9
    1b94:	8f 90       	pop	r8
    1b96:	7f 90       	pop	r7
    1b98:	6f 90       	pop	r6
    1b9a:	5f 90       	pop	r5
    1b9c:	4f 90       	pop	r4
    1b9e:	3f 90       	pop	r3
    1ba0:	2f 90       	pop	r2
    1ba2:	1f 90       	pop	r1
    1ba4:	0f 90       	pop	r0
    1ba6:	0c be       	out	0x3c, r0	; 60
    1ba8:	0f 90       	pop	r0
    1baa:	0b be       	out	0x3b, r0	; 59
    1bac:	0f 90       	pop	r0
    1bae:	0f be       	out	0x3f, r0	; 63
    1bb0:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
    1bb2:	08 95       	ret

00001bb4 <__vector_12>:
     */
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
//  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
    1bb4:	9a df       	rcall	.-204    	; 0x1aea <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
    1bb6:	18 95       	reti

00001bb8 <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    1bb8:	0f b6       	in	r0, 0x3f	; 63
    1bba:	f8 94       	cli
    1bbc:	0f 92       	push	r0
    1bbe:	fc 01       	movw	r30, r24
    1bc0:	96 8d       	ldd	r25, Z+30	; 0x1e
    1bc2:	0f 90       	pop	r0
    1bc4:	0f be       	out	0x3f, r0	; 63
    1bc6:	81 e0       	ldi	r24, 0x01	; 1
    1bc8:	91 11       	cpse	r25, r1
    1bca:	80 e0       	ldi	r24, 0x00	; 0
    1bcc:	08 95       	ret

00001bce <prvCopyDataToQueue>:
    1bce:	0f 93       	push	r16
    1bd0:	1f 93       	push	r17
    1bd2:	cf 93       	push	r28
    1bd4:	df 93       	push	r29
    1bd6:	ec 01       	movw	r28, r24
    1bd8:	04 2f       	mov	r16, r20
    1bda:	1e 8d       	ldd	r17, Y+30	; 0x1e
    1bdc:	48 a1       	ldd	r20, Y+32	; 0x20
    1bde:	41 11       	cpse	r20, r1
    1be0:	0c c0       	rjmp	.+24     	; 0x1bfa <prvCopyDataToQueue+0x2c>
    1be2:	88 81       	ld	r24, Y
    1be4:	99 81       	ldd	r25, Y+1	; 0x01
    1be6:	89 2b       	or	r24, r25
    1be8:	09 f0       	breq	.+2      	; 0x1bec <prvCopyDataToQueue+0x1e>
    1bea:	42 c0       	rjmp	.+132    	; 0x1c70 <prvCopyDataToQueue+0xa2>
    1bec:	8c 81       	ldd	r24, Y+4	; 0x04
    1bee:	9d 81       	ldd	r25, Y+5	; 0x05
    1bf0:	0e 94 40 1a 	call	0x3480	; 0x3480 <xTaskPriorityDisinherit>
    1bf4:	1d 82       	std	Y+5, r1	; 0x05
    1bf6:	1c 82       	std	Y+4, r1	; 0x04
    1bf8:	42 c0       	rjmp	.+132    	; 0x1c7e <prvCopyDataToQueue+0xb0>
    1bfa:	01 11       	cpse	r16, r1
    1bfc:	17 c0       	rjmp	.+46     	; 0x1c2c <prvCopyDataToQueue+0x5e>
    1bfe:	50 e0       	ldi	r21, 0x00	; 0
    1c00:	8a 81       	ldd	r24, Y+2	; 0x02
    1c02:	9b 81       	ldd	r25, Y+3	; 0x03
    1c04:	0e 94 32 2f 	call	0x5e64	; 0x5e64 <memcpy>
    1c08:	28 a1       	ldd	r18, Y+32	; 0x20
    1c0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c0c:	9b 81       	ldd	r25, Y+3	; 0x03
    1c0e:	82 0f       	add	r24, r18
    1c10:	91 1d       	adc	r25, r1
    1c12:	9b 83       	std	Y+3, r25	; 0x03
    1c14:	8a 83       	std	Y+2, r24	; 0x02
    1c16:	2c 81       	ldd	r18, Y+4	; 0x04
    1c18:	3d 81       	ldd	r19, Y+5	; 0x05
    1c1a:	82 17       	cp	r24, r18
    1c1c:	93 07       	cpc	r25, r19
    1c1e:	50 f1       	brcs	.+84     	; 0x1c74 <prvCopyDataToQueue+0xa6>
    1c20:	88 81       	ld	r24, Y
    1c22:	99 81       	ldd	r25, Y+1	; 0x01
    1c24:	9b 83       	std	Y+3, r25	; 0x03
    1c26:	8a 83       	std	Y+2, r24	; 0x02
    1c28:	80 e0       	ldi	r24, 0x00	; 0
    1c2a:	29 c0       	rjmp	.+82     	; 0x1c7e <prvCopyDataToQueue+0xb0>
    1c2c:	50 e0       	ldi	r21, 0x00	; 0
    1c2e:	8e 81       	ldd	r24, Y+6	; 0x06
    1c30:	9f 81       	ldd	r25, Y+7	; 0x07
    1c32:	0e 94 32 2f 	call	0x5e64	; 0x5e64 <memcpy>
    1c36:	88 a1       	ldd	r24, Y+32	; 0x20
    1c38:	90 e0       	ldi	r25, 0x00	; 0
    1c3a:	91 95       	neg	r25
    1c3c:	81 95       	neg	r24
    1c3e:	91 09       	sbc	r25, r1
    1c40:	2e 81       	ldd	r18, Y+6	; 0x06
    1c42:	3f 81       	ldd	r19, Y+7	; 0x07
    1c44:	28 0f       	add	r18, r24
    1c46:	39 1f       	adc	r19, r25
    1c48:	3f 83       	std	Y+7, r19	; 0x07
    1c4a:	2e 83       	std	Y+6, r18	; 0x06
    1c4c:	48 81       	ld	r20, Y
    1c4e:	59 81       	ldd	r21, Y+1	; 0x01
    1c50:	24 17       	cp	r18, r20
    1c52:	35 07       	cpc	r19, r21
    1c54:	30 f4       	brcc	.+12     	; 0x1c62 <prvCopyDataToQueue+0x94>
    1c56:	2c 81       	ldd	r18, Y+4	; 0x04
    1c58:	3d 81       	ldd	r19, Y+5	; 0x05
    1c5a:	82 0f       	add	r24, r18
    1c5c:	93 1f       	adc	r25, r19
    1c5e:	9f 83       	std	Y+7, r25	; 0x07
    1c60:	8e 83       	std	Y+6, r24	; 0x06
    1c62:	02 30       	cpi	r16, 0x02	; 2
    1c64:	49 f4       	brne	.+18     	; 0x1c78 <prvCopyDataToQueue+0xaa>
    1c66:	11 23       	and	r17, r17
    1c68:	49 f0       	breq	.+18     	; 0x1c7c <prvCopyDataToQueue+0xae>
    1c6a:	11 50       	subi	r17, 0x01	; 1
    1c6c:	80 e0       	ldi	r24, 0x00	; 0
    1c6e:	07 c0       	rjmp	.+14     	; 0x1c7e <prvCopyDataToQueue+0xb0>
    1c70:	80 e0       	ldi	r24, 0x00	; 0
    1c72:	05 c0       	rjmp	.+10     	; 0x1c7e <prvCopyDataToQueue+0xb0>
    1c74:	80 e0       	ldi	r24, 0x00	; 0
    1c76:	03 c0       	rjmp	.+6      	; 0x1c7e <prvCopyDataToQueue+0xb0>
    1c78:	80 e0       	ldi	r24, 0x00	; 0
    1c7a:	01 c0       	rjmp	.+2      	; 0x1c7e <prvCopyDataToQueue+0xb0>
    1c7c:	80 e0       	ldi	r24, 0x00	; 0
    1c7e:	1f 5f       	subi	r17, 0xFF	; 255
    1c80:	1e 8f       	std	Y+30, r17	; 0x1e
    1c82:	df 91       	pop	r29
    1c84:	cf 91       	pop	r28
    1c86:	1f 91       	pop	r17
    1c88:	0f 91       	pop	r16
    1c8a:	08 95       	ret

00001c8c <prvCopyDataFromQueue>:
    1c8c:	fc 01       	movw	r30, r24
    1c8e:	40 a1       	ldd	r20, Z+32	; 0x20
    1c90:	44 23       	and	r20, r20
    1c92:	a9 f0       	breq	.+42     	; 0x1cbe <prvCopyDataFromQueue+0x32>
    1c94:	50 e0       	ldi	r21, 0x00	; 0
    1c96:	26 81       	ldd	r18, Z+6	; 0x06
    1c98:	37 81       	ldd	r19, Z+7	; 0x07
    1c9a:	24 0f       	add	r18, r20
    1c9c:	35 1f       	adc	r19, r21
    1c9e:	37 83       	std	Z+7, r19	; 0x07
    1ca0:	26 83       	std	Z+6, r18	; 0x06
    1ca2:	84 81       	ldd	r24, Z+4	; 0x04
    1ca4:	95 81       	ldd	r25, Z+5	; 0x05
    1ca6:	28 17       	cp	r18, r24
    1ca8:	39 07       	cpc	r19, r25
    1caa:	20 f0       	brcs	.+8      	; 0x1cb4 <prvCopyDataFromQueue+0x28>
    1cac:	80 81       	ld	r24, Z
    1cae:	91 81       	ldd	r25, Z+1	; 0x01
    1cb0:	97 83       	std	Z+7, r25	; 0x07
    1cb2:	86 83       	std	Z+6, r24	; 0x06
    1cb4:	cb 01       	movw	r24, r22
    1cb6:	66 81       	ldd	r22, Z+6	; 0x06
    1cb8:	77 81       	ldd	r23, Z+7	; 0x07
    1cba:	0c 94 32 2f 	jmp	0x5e64	; 0x5e64 <memcpy>
    1cbe:	08 95       	ret

00001cc0 <prvUnlockQueue>:
    1cc0:	ef 92       	push	r14
    1cc2:	ff 92       	push	r15
    1cc4:	0f 93       	push	r16
    1cc6:	1f 93       	push	r17
    1cc8:	cf 93       	push	r28
    1cca:	8c 01       	movw	r16, r24
    1ccc:	0f b6       	in	r0, 0x3f	; 63
    1cce:	f8 94       	cli
    1cd0:	0f 92       	push	r0
    1cd2:	fc 01       	movw	r30, r24
    1cd4:	c2 a1       	ldd	r28, Z+34	; 0x22
    1cd6:	1c 16       	cp	r1, r28
    1cd8:	ac f4       	brge	.+42     	; 0x1d04 <prvUnlockQueue+0x44>
    1cda:	83 89       	ldd	r24, Z+19	; 0x13
    1cdc:	81 11       	cpse	r24, r1
    1cde:	06 c0       	rjmp	.+12     	; 0x1cec <prvUnlockQueue+0x2c>
    1ce0:	11 c0       	rjmp	.+34     	; 0x1d04 <prvUnlockQueue+0x44>
    1ce2:	f8 01       	movw	r30, r16
    1ce4:	83 89       	ldd	r24, Z+19	; 0x13
    1ce6:	81 11       	cpse	r24, r1
    1ce8:	05 c0       	rjmp	.+10     	; 0x1cf4 <prvUnlockQueue+0x34>
    1cea:	0c c0       	rjmp	.+24     	; 0x1d04 <prvUnlockQueue+0x44>
    1cec:	78 01       	movw	r14, r16
    1cee:	f3 e1       	ldi	r31, 0x13	; 19
    1cf0:	ef 0e       	add	r14, r31
    1cf2:	f1 1c       	adc	r15, r1
    1cf4:	c7 01       	movw	r24, r14
    1cf6:	0e 94 c9 18 	call	0x3192	; 0x3192 <xTaskRemoveFromEventList>
    1cfa:	81 11       	cpse	r24, r1
    1cfc:	0e 94 bb 19 	call	0x3376	; 0x3376 <vTaskMissedYield>
    1d00:	c1 50       	subi	r28, 0x01	; 1
    1d02:	79 f7       	brne	.-34     	; 0x1ce2 <prvUnlockQueue+0x22>
    1d04:	8f ef       	ldi	r24, 0xFF	; 255
    1d06:	f8 01       	movw	r30, r16
    1d08:	82 a3       	std	Z+34, r24	; 0x22
    1d0a:	0f 90       	pop	r0
    1d0c:	0f be       	out	0x3f, r0	; 63
    1d0e:	0f b6       	in	r0, 0x3f	; 63
    1d10:	f8 94       	cli
    1d12:	0f 92       	push	r0
    1d14:	c1 a1       	ldd	r28, Z+33	; 0x21
    1d16:	1c 16       	cp	r1, r28
    1d18:	ac f4       	brge	.+42     	; 0x1d44 <prvUnlockQueue+0x84>
    1d1a:	80 85       	ldd	r24, Z+8	; 0x08
    1d1c:	81 11       	cpse	r24, r1
    1d1e:	06 c0       	rjmp	.+12     	; 0x1d2c <prvUnlockQueue+0x6c>
    1d20:	11 c0       	rjmp	.+34     	; 0x1d44 <prvUnlockQueue+0x84>
    1d22:	f8 01       	movw	r30, r16
    1d24:	80 85       	ldd	r24, Z+8	; 0x08
    1d26:	81 11       	cpse	r24, r1
    1d28:	05 c0       	rjmp	.+10     	; 0x1d34 <prvUnlockQueue+0x74>
    1d2a:	0c c0       	rjmp	.+24     	; 0x1d44 <prvUnlockQueue+0x84>
    1d2c:	78 01       	movw	r14, r16
    1d2e:	f8 e0       	ldi	r31, 0x08	; 8
    1d30:	ef 0e       	add	r14, r31
    1d32:	f1 1c       	adc	r15, r1
    1d34:	c7 01       	movw	r24, r14
    1d36:	0e 94 c9 18 	call	0x3192	; 0x3192 <xTaskRemoveFromEventList>
    1d3a:	81 11       	cpse	r24, r1
    1d3c:	0e 94 bb 19 	call	0x3376	; 0x3376 <vTaskMissedYield>
    1d40:	c1 50       	subi	r28, 0x01	; 1
    1d42:	79 f7       	brne	.-34     	; 0x1d22 <prvUnlockQueue+0x62>
    1d44:	8f ef       	ldi	r24, 0xFF	; 255
    1d46:	f8 01       	movw	r30, r16
    1d48:	81 a3       	std	Z+33, r24	; 0x21
    1d4a:	0f 90       	pop	r0
    1d4c:	0f be       	out	0x3f, r0	; 63
    1d4e:	cf 91       	pop	r28
    1d50:	1f 91       	pop	r17
    1d52:	0f 91       	pop	r16
    1d54:	ff 90       	pop	r15
    1d56:	ef 90       	pop	r14
    1d58:	08 95       	ret

00001d5a <xQueueGenericReset>:
    1d5a:	cf 93       	push	r28
    1d5c:	df 93       	push	r29
    1d5e:	ec 01       	movw	r28, r24
    1d60:	0f b6       	in	r0, 0x3f	; 63
    1d62:	f8 94       	cli
    1d64:	0f 92       	push	r0
    1d66:	e8 81       	ld	r30, Y
    1d68:	f9 81       	ldd	r31, Y+1	; 0x01
    1d6a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1d6c:	28 a1       	ldd	r18, Y+32	; 0x20
    1d6e:	90 e0       	ldi	r25, 0x00	; 0
    1d70:	30 e0       	ldi	r19, 0x00	; 0
    1d72:	82 9f       	mul	r24, r18
    1d74:	a0 01       	movw	r20, r0
    1d76:	83 9f       	mul	r24, r19
    1d78:	50 0d       	add	r21, r0
    1d7a:	92 9f       	mul	r25, r18
    1d7c:	50 0d       	add	r21, r0
    1d7e:	11 24       	eor	r1, r1
    1d80:	4e 0f       	add	r20, r30
    1d82:	5f 1f       	adc	r21, r31
    1d84:	5d 83       	std	Y+5, r21	; 0x05
    1d86:	4c 83       	std	Y+4, r20	; 0x04
    1d88:	1e 8e       	std	Y+30, r1	; 0x1e
    1d8a:	fb 83       	std	Y+3, r31	; 0x03
    1d8c:	ea 83       	std	Y+2, r30	; 0x02
    1d8e:	01 97       	sbiw	r24, 0x01	; 1
    1d90:	82 9f       	mul	r24, r18
    1d92:	a0 01       	movw	r20, r0
    1d94:	83 9f       	mul	r24, r19
    1d96:	50 0d       	add	r21, r0
    1d98:	92 9f       	mul	r25, r18
    1d9a:	50 0d       	add	r21, r0
    1d9c:	11 24       	eor	r1, r1
    1d9e:	cf 01       	movw	r24, r30
    1da0:	84 0f       	add	r24, r20
    1da2:	95 1f       	adc	r25, r21
    1da4:	9f 83       	std	Y+7, r25	; 0x07
    1da6:	8e 83       	std	Y+6, r24	; 0x06
    1da8:	8f ef       	ldi	r24, 0xFF	; 255
    1daa:	89 a3       	std	Y+33, r24	; 0x21
    1dac:	8a a3       	std	Y+34, r24	; 0x22
    1dae:	61 11       	cpse	r22, r1
    1db0:	0b c0       	rjmp	.+22     	; 0x1dc8 <xQueueGenericReset+0x6e>
    1db2:	88 85       	ldd	r24, Y+8	; 0x08
    1db4:	88 23       	and	r24, r24
    1db6:	71 f0       	breq	.+28     	; 0x1dd4 <xQueueGenericReset+0x7a>
    1db8:	ce 01       	movw	r24, r28
    1dba:	08 96       	adiw	r24, 0x08	; 8
    1dbc:	0e 94 c9 18 	call	0x3192	; 0x3192 <xTaskRemoveFromEventList>
    1dc0:	88 23       	and	r24, r24
    1dc2:	41 f0       	breq	.+16     	; 0x1dd4 <xQueueGenericReset+0x7a>
    1dc4:	31 de       	rcall	.-926    	; 0x1a28 <vPortYield>
    1dc6:	06 c0       	rjmp	.+12     	; 0x1dd4 <xQueueGenericReset+0x7a>
    1dc8:	ce 01       	movw	r24, r28
    1dca:	08 96       	adiw	r24, 0x08	; 8
    1dcc:	e5 dc       	rcall	.-1590   	; 0x1798 <vListInitialise>
    1dce:	ce 01       	movw	r24, r28
    1dd0:	43 96       	adiw	r24, 0x13	; 19
    1dd2:	e2 dc       	rcall	.-1596   	; 0x1798 <vListInitialise>
    1dd4:	0f 90       	pop	r0
    1dd6:	0f be       	out	0x3f, r0	; 63
    1dd8:	81 e0       	ldi	r24, 0x01	; 1
    1dda:	df 91       	pop	r29
    1ddc:	cf 91       	pop	r28
    1dde:	08 95       	ret

00001de0 <xQueueGenericCreate>:
    1de0:	ff 92       	push	r15
    1de2:	0f 93       	push	r16
    1de4:	1f 93       	push	r17
    1de6:	cf 93       	push	r28
    1de8:	df 93       	push	r29
    1dea:	08 2f       	mov	r16, r24
    1dec:	16 2f       	mov	r17, r22
    1dee:	f4 2e       	mov	r15, r20
    1df0:	66 23       	and	r22, r22
    1df2:	b9 f0       	breq	.+46     	; 0x1e22 <xQueueGenericCreate+0x42>
    1df4:	86 9f       	mul	r24, r22
    1df6:	c0 01       	movw	r24, r0
    1df8:	11 24       	eor	r1, r1
    1dfa:	85 96       	adiw	r24, 0x25	; 37
    1dfc:	e3 db       	rcall	.-2106   	; 0x15c4 <pvPortMalloc>
    1dfe:	ec 01       	movw	r28, r24
    1e00:	00 97       	sbiw	r24, 0x00	; 0
    1e02:	41 f4       	brne	.+16     	; 0x1e14 <xQueueGenericCreate+0x34>
    1e04:	14 c0       	rjmp	.+40     	; 0x1e2e <xQueueGenericCreate+0x4e>
    1e06:	0f 8f       	std	Y+31, r16	; 0x1f
    1e08:	18 a3       	std	Y+32, r17	; 0x20
    1e0a:	61 e0       	ldi	r22, 0x01	; 1
    1e0c:	ce 01       	movw	r24, r28
    1e0e:	a5 df       	rcall	.-182    	; 0x1d5a <xQueueGenericReset>
    1e10:	fc a2       	std	Y+36, r15	; 0x24
    1e12:	0d c0       	rjmp	.+26     	; 0x1e2e <xQueueGenericCreate+0x4e>
    1e14:	85 96       	adiw	r24, 0x25	; 37
    1e16:	99 83       	std	Y+1, r25	; 0x01
    1e18:	88 83       	st	Y, r24
    1e1a:	f5 cf       	rjmp	.-22     	; 0x1e06 <xQueueGenericCreate+0x26>
    1e1c:	d9 83       	std	Y+1, r29	; 0x01
    1e1e:	c8 83       	st	Y, r28
    1e20:	f2 cf       	rjmp	.-28     	; 0x1e06 <xQueueGenericCreate+0x26>
    1e22:	85 e2       	ldi	r24, 0x25	; 37
    1e24:	90 e0       	ldi	r25, 0x00	; 0
    1e26:	ce db       	rcall	.-2148   	; 0x15c4 <pvPortMalloc>
    1e28:	ec 01       	movw	r28, r24
    1e2a:	89 2b       	or	r24, r25
    1e2c:	b9 f7       	brne	.-18     	; 0x1e1c <xQueueGenericCreate+0x3c>
    1e2e:	ce 01       	movw	r24, r28
    1e30:	df 91       	pop	r29
    1e32:	cf 91       	pop	r28
    1e34:	1f 91       	pop	r17
    1e36:	0f 91       	pop	r16
    1e38:	ff 90       	pop	r15
    1e3a:	08 95       	ret

00001e3c <xQueueGenericSend>:
    1e3c:	9f 92       	push	r9
    1e3e:	af 92       	push	r10
    1e40:	bf 92       	push	r11
    1e42:	cf 92       	push	r12
    1e44:	df 92       	push	r13
    1e46:	ef 92       	push	r14
    1e48:	ff 92       	push	r15
    1e4a:	0f 93       	push	r16
    1e4c:	1f 93       	push	r17
    1e4e:	cf 93       	push	r28
    1e50:	df 93       	push	r29
    1e52:	cd b7       	in	r28, 0x3d	; 61
    1e54:	de b7       	in	r29, 0x3e	; 62
    1e56:	29 97       	sbiw	r28, 0x09	; 9
    1e58:	0f b6       	in	r0, 0x3f	; 63
    1e5a:	f8 94       	cli
    1e5c:	de bf       	out	0x3e, r29	; 62
    1e5e:	0f be       	out	0x3f, r0	; 63
    1e60:	cd bf       	out	0x3d, r28	; 61
    1e62:	7c 01       	movw	r14, r24
    1e64:	5b 01       	movw	r10, r22
    1e66:	2e 83       	std	Y+6, r18	; 0x06
    1e68:	3f 83       	std	Y+7, r19	; 0x07
    1e6a:	48 87       	std	Y+8, r20	; 0x08
    1e6c:	59 87       	std	Y+9, r21	; 0x09
    1e6e:	10 e0       	ldi	r17, 0x00	; 0
    1e70:	99 24       	eor	r9, r9
    1e72:	93 94       	inc	r9
    1e74:	6c 01       	movw	r12, r24
    1e76:	88 e0       	ldi	r24, 0x08	; 8
    1e78:	c8 0e       	add	r12, r24
    1e7a:	d1 1c       	adc	r13, r1
    1e7c:	0f b6       	in	r0, 0x3f	; 63
    1e7e:	f8 94       	cli
    1e80:	0f 92       	push	r0
    1e82:	f7 01       	movw	r30, r14
    1e84:	96 8d       	ldd	r25, Z+30	; 0x1e
    1e86:	87 8d       	ldd	r24, Z+31	; 0x1f
    1e88:	98 17       	cp	r25, r24
    1e8a:	10 f0       	brcs	.+4      	; 0x1e90 <xQueueGenericSend+0x54>
    1e8c:	02 30       	cpi	r16, 0x02	; 2
    1e8e:	b1 f4       	brne	.+44     	; 0x1ebc <xQueueGenericSend+0x80>
    1e90:	40 2f       	mov	r20, r16
    1e92:	b5 01       	movw	r22, r10
    1e94:	c7 01       	movw	r24, r14
    1e96:	9b de       	rcall	.-714    	; 0x1bce <prvCopyDataToQueue>
    1e98:	f7 01       	movw	r30, r14
    1e9a:	93 89       	ldd	r25, Z+19	; 0x13
    1e9c:	99 23       	and	r25, r25
    1e9e:	41 f0       	breq	.+16     	; 0x1eb0 <xQueueGenericSend+0x74>
    1ea0:	c7 01       	movw	r24, r14
    1ea2:	43 96       	adiw	r24, 0x13	; 19
    1ea4:	0e 94 c9 18 	call	0x3192	; 0x3192 <xTaskRemoveFromEventList>
    1ea8:	88 23       	and	r24, r24
    1eaa:	21 f0       	breq	.+8      	; 0x1eb4 <xQueueGenericSend+0x78>
    1eac:	bd dd       	rcall	.-1158   	; 0x1a28 <vPortYield>
    1eae:	02 c0       	rjmp	.+4      	; 0x1eb4 <xQueueGenericSend+0x78>
    1eb0:	81 11       	cpse	r24, r1
    1eb2:	ba dd       	rcall	.-1164   	; 0x1a28 <vPortYield>
    1eb4:	0f 90       	pop	r0
    1eb6:	0f be       	out	0x3f, r0	; 63
    1eb8:	81 e0       	ldi	r24, 0x01	; 1
    1eba:	4e c0       	rjmp	.+156    	; 0x1f58 <xQueueGenericSend+0x11c>
    1ebc:	8e 81       	ldd	r24, Y+6	; 0x06
    1ebe:	9f 81       	ldd	r25, Y+7	; 0x07
    1ec0:	a8 85       	ldd	r26, Y+8	; 0x08
    1ec2:	b9 85       	ldd	r27, Y+9	; 0x09
    1ec4:	89 2b       	or	r24, r25
    1ec6:	8a 2b       	or	r24, r26
    1ec8:	8b 2b       	or	r24, r27
    1eca:	21 f4       	brne	.+8      	; 0x1ed4 <xQueueGenericSend+0x98>
    1ecc:	0f 90       	pop	r0
    1ece:	0f be       	out	0x3f, r0	; 63
    1ed0:	80 e0       	ldi	r24, 0x00	; 0
    1ed2:	42 c0       	rjmp	.+132    	; 0x1f58 <xQueueGenericSend+0x11c>
    1ed4:	11 11       	cpse	r17, r1
    1ed6:	05 c0       	rjmp	.+10     	; 0x1ee2 <xQueueGenericSend+0xa6>
    1ed8:	ce 01       	movw	r24, r28
    1eda:	01 96       	adiw	r24, 0x01	; 1
    1edc:	0e 94 55 19 	call	0x32aa	; 0x32aa <vTaskInternalSetTimeOutState>
    1ee0:	19 2d       	mov	r17, r9
    1ee2:	0f 90       	pop	r0
    1ee4:	0f be       	out	0x3f, r0	; 63
    1ee6:	fd d6       	rcall	.+3578   	; 0x2ce2 <vTaskSuspendAll>
    1ee8:	0f b6       	in	r0, 0x3f	; 63
    1eea:	f8 94       	cli
    1eec:	0f 92       	push	r0
    1eee:	f7 01       	movw	r30, r14
    1ef0:	81 a1       	ldd	r24, Z+33	; 0x21
    1ef2:	8f 3f       	cpi	r24, 0xFF	; 255
    1ef4:	09 f4       	brne	.+2      	; 0x1ef8 <xQueueGenericSend+0xbc>
    1ef6:	11 a2       	std	Z+33, r1	; 0x21
    1ef8:	f7 01       	movw	r30, r14
    1efa:	82 a1       	ldd	r24, Z+34	; 0x22
    1efc:	8f 3f       	cpi	r24, 0xFF	; 255
    1efe:	09 f4       	brne	.+2      	; 0x1f02 <xQueueGenericSend+0xc6>
    1f00:	12 a2       	std	Z+34, r1	; 0x22
    1f02:	0f 90       	pop	r0
    1f04:	0f be       	out	0x3f, r0	; 63
    1f06:	be 01       	movw	r22, r28
    1f08:	6a 5f       	subi	r22, 0xFA	; 250
    1f0a:	7f 4f       	sbci	r23, 0xFF	; 255
    1f0c:	ce 01       	movw	r24, r28
    1f0e:	01 96       	adiw	r24, 0x01	; 1
    1f10:	0e 94 66 19 	call	0x32cc	; 0x32cc <xTaskCheckForTimeOut>
    1f14:	81 11       	cpse	r24, r1
    1f16:	1c c0       	rjmp	.+56     	; 0x1f50 <xQueueGenericSend+0x114>
    1f18:	0f b6       	in	r0, 0x3f	; 63
    1f1a:	f8 94       	cli
    1f1c:	0f 92       	push	r0
    1f1e:	f7 01       	movw	r30, r14
    1f20:	96 8d       	ldd	r25, Z+30	; 0x1e
    1f22:	87 8d       	ldd	r24, Z+31	; 0x1f
    1f24:	0f 90       	pop	r0
    1f26:	0f be       	out	0x3f, r0	; 63
    1f28:	98 13       	cpse	r25, r24
    1f2a:	0e c0       	rjmp	.+28     	; 0x1f48 <xQueueGenericSend+0x10c>
    1f2c:	4e 81       	ldd	r20, Y+6	; 0x06
    1f2e:	5f 81       	ldd	r21, Y+7	; 0x07
    1f30:	68 85       	ldd	r22, Y+8	; 0x08
    1f32:	79 85       	ldd	r23, Y+9	; 0x09
    1f34:	c6 01       	movw	r24, r12
    1f36:	0e 94 6e 18 	call	0x30dc	; 0x30dc <vTaskPlaceOnEventList>
    1f3a:	c7 01       	movw	r24, r14
    1f3c:	c1 de       	rcall	.-638    	; 0x1cc0 <prvUnlockQueue>
    1f3e:	ba d7       	rcall	.+3956   	; 0x2eb4 <xTaskResumeAll>
    1f40:	81 11       	cpse	r24, r1
    1f42:	9c cf       	rjmp	.-200    	; 0x1e7c <xQueueGenericSend+0x40>
    1f44:	71 dd       	rcall	.-1310   	; 0x1a28 <vPortYield>
    1f46:	9a cf       	rjmp	.-204    	; 0x1e7c <xQueueGenericSend+0x40>
    1f48:	c7 01       	movw	r24, r14
    1f4a:	ba de       	rcall	.-652    	; 0x1cc0 <prvUnlockQueue>
    1f4c:	b3 d7       	rcall	.+3942   	; 0x2eb4 <xTaskResumeAll>
    1f4e:	96 cf       	rjmp	.-212    	; 0x1e7c <xQueueGenericSend+0x40>
    1f50:	c7 01       	movw	r24, r14
    1f52:	b6 de       	rcall	.-660    	; 0x1cc0 <prvUnlockQueue>
    1f54:	af d7       	rcall	.+3934   	; 0x2eb4 <xTaskResumeAll>
    1f56:	80 e0       	ldi	r24, 0x00	; 0
    1f58:	29 96       	adiw	r28, 0x09	; 9
    1f5a:	0f b6       	in	r0, 0x3f	; 63
    1f5c:	f8 94       	cli
    1f5e:	de bf       	out	0x3e, r29	; 62
    1f60:	0f be       	out	0x3f, r0	; 63
    1f62:	cd bf       	out	0x3d, r28	; 61
    1f64:	df 91       	pop	r29
    1f66:	cf 91       	pop	r28
    1f68:	1f 91       	pop	r17
    1f6a:	0f 91       	pop	r16
    1f6c:	ff 90       	pop	r15
    1f6e:	ef 90       	pop	r14
    1f70:	df 90       	pop	r13
    1f72:	cf 90       	pop	r12
    1f74:	bf 90       	pop	r11
    1f76:	af 90       	pop	r10
    1f78:	9f 90       	pop	r9
    1f7a:	08 95       	ret

00001f7c <xQueueCreateMutex>:
    1f7c:	0f 93       	push	r16
    1f7e:	cf 93       	push	r28
    1f80:	df 93       	push	r29
    1f82:	48 2f       	mov	r20, r24
    1f84:	60 e0       	ldi	r22, 0x00	; 0
    1f86:	81 e0       	ldi	r24, 0x01	; 1
    1f88:	2b df       	rcall	.-426    	; 0x1de0 <xQueueGenericCreate>
    1f8a:	ec 01       	movw	r28, r24
    1f8c:	00 97       	sbiw	r24, 0x00	; 0
    1f8e:	61 f0       	breq	.+24     	; 0x1fa8 <xQueueCreateMutex+0x2c>
    1f90:	1d 82       	std	Y+5, r1	; 0x05
    1f92:	1c 82       	std	Y+4, r1	; 0x04
    1f94:	19 82       	std	Y+1, r1	; 0x01
    1f96:	18 82       	st	Y, r1
    1f98:	1e 82       	std	Y+6, r1	; 0x06
    1f9a:	00 e0       	ldi	r16, 0x00	; 0
    1f9c:	20 e0       	ldi	r18, 0x00	; 0
    1f9e:	30 e0       	ldi	r19, 0x00	; 0
    1fa0:	a9 01       	movw	r20, r18
    1fa2:	60 e0       	ldi	r22, 0x00	; 0
    1fa4:	70 e0       	ldi	r23, 0x00	; 0
    1fa6:	4a df       	rcall	.-364    	; 0x1e3c <xQueueGenericSend>
    1fa8:	ce 01       	movw	r24, r28
    1faa:	df 91       	pop	r29
    1fac:	cf 91       	pop	r28
    1fae:	0f 91       	pop	r16
    1fb0:	08 95       	ret

00001fb2 <xQueueGenericSendFromISR>:
    1fb2:	ef 92       	push	r14
    1fb4:	ff 92       	push	r15
    1fb6:	0f 93       	push	r16
    1fb8:	1f 93       	push	r17
    1fba:	cf 93       	push	r28
    1fbc:	df 93       	push	r29
    1fbe:	8a 01       	movw	r16, r20
    1fc0:	fc 01       	movw	r30, r24
    1fc2:	56 8d       	ldd	r21, Z+30	; 0x1e
    1fc4:	37 8d       	ldd	r19, Z+31	; 0x1f
    1fc6:	53 17       	cp	r21, r19
    1fc8:	10 f0       	brcs	.+4      	; 0x1fce <xQueueGenericSendFromISR+0x1c>
    1fca:	22 30       	cpi	r18, 0x02	; 2
    1fcc:	e9 f4       	brne	.+58     	; 0x2008 <xQueueGenericSendFromISR+0x56>
    1fce:	42 2f       	mov	r20, r18
    1fd0:	78 01       	movw	r14, r16
    1fd2:	ec 01       	movw	r28, r24
    1fd4:	1a a1       	ldd	r17, Y+34	; 0x22
    1fd6:	fb dd       	rcall	.-1034   	; 0x1bce <prvCopyDataToQueue>
    1fd8:	1f 3f       	cpi	r17, 0xFF	; 255
    1fda:	81 f4       	brne	.+32     	; 0x1ffc <xQueueGenericSendFromISR+0x4a>
    1fdc:	8b 89       	ldd	r24, Y+19	; 0x13
    1fde:	88 23       	and	r24, r24
    1fe0:	a9 f0       	breq	.+42     	; 0x200c <xQueueGenericSendFromISR+0x5a>
    1fe2:	ce 01       	movw	r24, r28
    1fe4:	43 96       	adiw	r24, 0x13	; 19
    1fe6:	0e 94 c9 18 	call	0x3192	; 0x3192 <xTaskRemoveFromEventList>
    1fea:	88 23       	and	r24, r24
    1fec:	89 f0       	breq	.+34     	; 0x2010 <xQueueGenericSendFromISR+0x5e>
    1fee:	e1 14       	cp	r14, r1
    1ff0:	f1 04       	cpc	r15, r1
    1ff2:	81 f0       	breq	.+32     	; 0x2014 <xQueueGenericSendFromISR+0x62>
    1ff4:	81 e0       	ldi	r24, 0x01	; 1
    1ff6:	f7 01       	movw	r30, r14
    1ff8:	80 83       	st	Z, r24
    1ffa:	0d c0       	rjmp	.+26     	; 0x2016 <xQueueGenericSendFromISR+0x64>
    1ffc:	ff 24       	eor	r15, r15
    1ffe:	f3 94       	inc	r15
    2000:	f1 0e       	add	r15, r17
    2002:	fa a2       	std	Y+34, r15	; 0x22
    2004:	81 e0       	ldi	r24, 0x01	; 1
    2006:	07 c0       	rjmp	.+14     	; 0x2016 <xQueueGenericSendFromISR+0x64>
    2008:	80 e0       	ldi	r24, 0x00	; 0
    200a:	05 c0       	rjmp	.+10     	; 0x2016 <xQueueGenericSendFromISR+0x64>
    200c:	81 e0       	ldi	r24, 0x01	; 1
    200e:	03 c0       	rjmp	.+6      	; 0x2016 <xQueueGenericSendFromISR+0x64>
    2010:	81 e0       	ldi	r24, 0x01	; 1
    2012:	01 c0       	rjmp	.+2      	; 0x2016 <xQueueGenericSendFromISR+0x64>
    2014:	81 e0       	ldi	r24, 0x01	; 1
    2016:	df 91       	pop	r29
    2018:	cf 91       	pop	r28
    201a:	1f 91       	pop	r17
    201c:	0f 91       	pop	r16
    201e:	ff 90       	pop	r15
    2020:	ef 90       	pop	r14
    2022:	08 95       	ret

00002024 <xQueueReceive>:
    2024:	9f 92       	push	r9
    2026:	af 92       	push	r10
    2028:	bf 92       	push	r11
    202a:	cf 92       	push	r12
    202c:	df 92       	push	r13
    202e:	ef 92       	push	r14
    2030:	ff 92       	push	r15
    2032:	0f 93       	push	r16
    2034:	1f 93       	push	r17
    2036:	cf 93       	push	r28
    2038:	df 93       	push	r29
    203a:	cd b7       	in	r28, 0x3d	; 61
    203c:	de b7       	in	r29, 0x3e	; 62
    203e:	29 97       	sbiw	r28, 0x09	; 9
    2040:	0f b6       	in	r0, 0x3f	; 63
    2042:	f8 94       	cli
    2044:	de bf       	out	0x3e, r29	; 62
    2046:	0f be       	out	0x3f, r0	; 63
    2048:	cd bf       	out	0x3d, r28	; 61
    204a:	8c 01       	movw	r16, r24
    204c:	5b 01       	movw	r10, r22
    204e:	2e 83       	std	Y+6, r18	; 0x06
    2050:	3f 83       	std	Y+7, r19	; 0x07
    2052:	48 87       	std	Y+8, r20	; 0x08
    2054:	59 87       	std	Y+9, r21	; 0x09
    2056:	e1 2c       	mov	r14, r1
    2058:	99 24       	eor	r9, r9
    205a:	93 94       	inc	r9
    205c:	6c 01       	movw	r12, r24
    205e:	83 e1       	ldi	r24, 0x13	; 19
    2060:	c8 0e       	add	r12, r24
    2062:	d1 1c       	adc	r13, r1
    2064:	0f b6       	in	r0, 0x3f	; 63
    2066:	f8 94       	cli
    2068:	0f 92       	push	r0
    206a:	f8 01       	movw	r30, r16
    206c:	f6 8c       	ldd	r15, Z+30	; 0x1e
    206e:	ff 20       	and	r15, r15
    2070:	99 f0       	breq	.+38     	; 0x2098 <xQueueReceive+0x74>
    2072:	b5 01       	movw	r22, r10
    2074:	c8 01       	movw	r24, r16
    2076:	0a de       	rcall	.-1004   	; 0x1c8c <prvCopyDataFromQueue>
    2078:	fa 94       	dec	r15
    207a:	f8 01       	movw	r30, r16
    207c:	f6 8e       	std	Z+30, r15	; 0x1e
    207e:	80 85       	ldd	r24, Z+8	; 0x08
    2080:	88 23       	and	r24, r24
    2082:	31 f0       	breq	.+12     	; 0x2090 <xQueueReceive+0x6c>
    2084:	c8 01       	movw	r24, r16
    2086:	08 96       	adiw	r24, 0x08	; 8
    2088:	0e 94 c9 18 	call	0x3192	; 0x3192 <xTaskRemoveFromEventList>
    208c:	81 11       	cpse	r24, r1
    208e:	cc dc       	rcall	.-1640   	; 0x1a28 <vPortYield>
    2090:	0f 90       	pop	r0
    2092:	0f be       	out	0x3f, r0	; 63
    2094:	81 e0       	ldi	r24, 0x01	; 1
    2096:	4c c0       	rjmp	.+152    	; 0x2130 <xQueueReceive+0x10c>
    2098:	8e 81       	ldd	r24, Y+6	; 0x06
    209a:	9f 81       	ldd	r25, Y+7	; 0x07
    209c:	a8 85       	ldd	r26, Y+8	; 0x08
    209e:	b9 85       	ldd	r27, Y+9	; 0x09
    20a0:	89 2b       	or	r24, r25
    20a2:	8a 2b       	or	r24, r26
    20a4:	8b 2b       	or	r24, r27
    20a6:	21 f4       	brne	.+8      	; 0x20b0 <xQueueReceive+0x8c>
    20a8:	0f 90       	pop	r0
    20aa:	0f be       	out	0x3f, r0	; 63
    20ac:	80 e0       	ldi	r24, 0x00	; 0
    20ae:	40 c0       	rjmp	.+128    	; 0x2130 <xQueueReceive+0x10c>
    20b0:	e1 10       	cpse	r14, r1
    20b2:	05 c0       	rjmp	.+10     	; 0x20be <xQueueReceive+0x9a>
    20b4:	ce 01       	movw	r24, r28
    20b6:	01 96       	adiw	r24, 0x01	; 1
    20b8:	0e 94 55 19 	call	0x32aa	; 0x32aa <vTaskInternalSetTimeOutState>
    20bc:	e9 2c       	mov	r14, r9
    20be:	0f 90       	pop	r0
    20c0:	0f be       	out	0x3f, r0	; 63
    20c2:	0f d6       	rcall	.+3102   	; 0x2ce2 <vTaskSuspendAll>
    20c4:	0f b6       	in	r0, 0x3f	; 63
    20c6:	f8 94       	cli
    20c8:	0f 92       	push	r0
    20ca:	f8 01       	movw	r30, r16
    20cc:	81 a1       	ldd	r24, Z+33	; 0x21
    20ce:	8f 3f       	cpi	r24, 0xFF	; 255
    20d0:	09 f4       	brne	.+2      	; 0x20d4 <xQueueReceive+0xb0>
    20d2:	11 a2       	std	Z+33, r1	; 0x21
    20d4:	f8 01       	movw	r30, r16
    20d6:	82 a1       	ldd	r24, Z+34	; 0x22
    20d8:	8f 3f       	cpi	r24, 0xFF	; 255
    20da:	09 f4       	brne	.+2      	; 0x20de <xQueueReceive+0xba>
    20dc:	12 a2       	std	Z+34, r1	; 0x22
    20de:	0f 90       	pop	r0
    20e0:	0f be       	out	0x3f, r0	; 63
    20e2:	be 01       	movw	r22, r28
    20e4:	6a 5f       	subi	r22, 0xFA	; 250
    20e6:	7f 4f       	sbci	r23, 0xFF	; 255
    20e8:	ce 01       	movw	r24, r28
    20ea:	01 96       	adiw	r24, 0x01	; 1
    20ec:	0e 94 66 19 	call	0x32cc	; 0x32cc <xTaskCheckForTimeOut>
    20f0:	81 11       	cpse	r24, r1
    20f2:	15 c0       	rjmp	.+42     	; 0x211e <xQueueReceive+0xfa>
    20f4:	c8 01       	movw	r24, r16
    20f6:	60 dd       	rcall	.-1344   	; 0x1bb8 <prvIsQueueEmpty>
    20f8:	88 23       	and	r24, r24
    20fa:	69 f0       	breq	.+26     	; 0x2116 <xQueueReceive+0xf2>
    20fc:	4e 81       	ldd	r20, Y+6	; 0x06
    20fe:	5f 81       	ldd	r21, Y+7	; 0x07
    2100:	68 85       	ldd	r22, Y+8	; 0x08
    2102:	79 85       	ldd	r23, Y+9	; 0x09
    2104:	c6 01       	movw	r24, r12
    2106:	ea d7       	rcall	.+4052   	; 0x30dc <vTaskPlaceOnEventList>
    2108:	c8 01       	movw	r24, r16
    210a:	da dd       	rcall	.-1100   	; 0x1cc0 <prvUnlockQueue>
    210c:	d3 d6       	rcall	.+3494   	; 0x2eb4 <xTaskResumeAll>
    210e:	81 11       	cpse	r24, r1
    2110:	a9 cf       	rjmp	.-174    	; 0x2064 <xQueueReceive+0x40>
    2112:	8a dc       	rcall	.-1772   	; 0x1a28 <vPortYield>
    2114:	a7 cf       	rjmp	.-178    	; 0x2064 <xQueueReceive+0x40>
    2116:	c8 01       	movw	r24, r16
    2118:	d3 dd       	rcall	.-1114   	; 0x1cc0 <prvUnlockQueue>
    211a:	cc d6       	rcall	.+3480   	; 0x2eb4 <xTaskResumeAll>
    211c:	a3 cf       	rjmp	.-186    	; 0x2064 <xQueueReceive+0x40>
    211e:	c8 01       	movw	r24, r16
    2120:	cf dd       	rcall	.-1122   	; 0x1cc0 <prvUnlockQueue>
    2122:	c8 d6       	rcall	.+3472   	; 0x2eb4 <xTaskResumeAll>
    2124:	c8 01       	movw	r24, r16
    2126:	48 dd       	rcall	.-1392   	; 0x1bb8 <prvIsQueueEmpty>
    2128:	88 23       	and	r24, r24
    212a:	09 f4       	brne	.+2      	; 0x212e <xQueueReceive+0x10a>
    212c:	9b cf       	rjmp	.-202    	; 0x2064 <xQueueReceive+0x40>
    212e:	80 e0       	ldi	r24, 0x00	; 0
    2130:	29 96       	adiw	r28, 0x09	; 9
    2132:	0f b6       	in	r0, 0x3f	; 63
    2134:	f8 94       	cli
    2136:	de bf       	out	0x3e, r29	; 62
    2138:	0f be       	out	0x3f, r0	; 63
    213a:	cd bf       	out	0x3d, r28	; 61
    213c:	df 91       	pop	r29
    213e:	cf 91       	pop	r28
    2140:	1f 91       	pop	r17
    2142:	0f 91       	pop	r16
    2144:	ff 90       	pop	r15
    2146:	ef 90       	pop	r14
    2148:	df 90       	pop	r13
    214a:	cf 90       	pop	r12
    214c:	bf 90       	pop	r11
    214e:	af 90       	pop	r10
    2150:	9f 90       	pop	r9
    2152:	08 95       	ret

00002154 <xQueueSemaphoreTake>:
    2154:	bf 92       	push	r11
    2156:	cf 92       	push	r12
    2158:	df 92       	push	r13
    215a:	ef 92       	push	r14
    215c:	ff 92       	push	r15
    215e:	0f 93       	push	r16
    2160:	1f 93       	push	r17
    2162:	cf 93       	push	r28
    2164:	df 93       	push	r29
    2166:	cd b7       	in	r28, 0x3d	; 61
    2168:	de b7       	in	r29, 0x3e	; 62
    216a:	29 97       	sbiw	r28, 0x09	; 9
    216c:	0f b6       	in	r0, 0x3f	; 63
    216e:	f8 94       	cli
    2170:	de bf       	out	0x3e, r29	; 62
    2172:	0f be       	out	0x3f, r0	; 63
    2174:	cd bf       	out	0x3d, r28	; 61
    2176:	8c 01       	movw	r16, r24
    2178:	4e 83       	std	Y+6, r20	; 0x06
    217a:	5f 83       	std	Y+7, r21	; 0x07
    217c:	68 87       	std	Y+8, r22	; 0x08
    217e:	79 87       	std	Y+9, r23	; 0x09
    2180:	b1 2c       	mov	r11, r1
    2182:	d1 2c       	mov	r13, r1
    2184:	cc 24       	eor	r12, r12
    2186:	c3 94       	inc	r12
    2188:	7c 01       	movw	r14, r24
    218a:	83 e1       	ldi	r24, 0x13	; 19
    218c:	e8 0e       	add	r14, r24
    218e:	f1 1c       	adc	r15, r1
    2190:	0f b6       	in	r0, 0x3f	; 63
    2192:	f8 94       	cli
    2194:	0f 92       	push	r0
    2196:	d8 01       	movw	r26, r16
    2198:	5e 96       	adiw	r26, 0x1e	; 30
    219a:	8c 91       	ld	r24, X
    219c:	5e 97       	sbiw	r26, 0x1e	; 30
    219e:	88 23       	and	r24, r24
    21a0:	d9 f0       	breq	.+54     	; 0x21d8 <xQueueSemaphoreTake+0x84>
    21a2:	81 50       	subi	r24, 0x01	; 1
    21a4:	5e 96       	adiw	r26, 0x1e	; 30
    21a6:	8c 93       	st	X, r24
    21a8:	5e 97       	sbiw	r26, 0x1e	; 30
    21aa:	8d 91       	ld	r24, X+
    21ac:	9c 91       	ld	r25, X
    21ae:	89 2b       	or	r24, r25
    21b0:	29 f4       	brne	.+10     	; 0x21bc <xQueueSemaphoreTake+0x68>
    21b2:	0e 94 f4 1a 	call	0x35e8	; 0x35e8 <pvTaskIncrementMutexHeldCount>
    21b6:	f8 01       	movw	r30, r16
    21b8:	95 83       	std	Z+5, r25	; 0x05
    21ba:	84 83       	std	Z+4, r24	; 0x04
    21bc:	d8 01       	movw	r26, r16
    21be:	18 96       	adiw	r26, 0x08	; 8
    21c0:	8c 91       	ld	r24, X
    21c2:	88 23       	and	r24, r24
    21c4:	29 f0       	breq	.+10     	; 0x21d0 <xQueueSemaphoreTake+0x7c>
    21c6:	c8 01       	movw	r24, r16
    21c8:	08 96       	adiw	r24, 0x08	; 8
    21ca:	e3 d7       	rcall	.+4038   	; 0x3192 <xTaskRemoveFromEventList>
    21cc:	81 11       	cpse	r24, r1
    21ce:	2c dc       	rcall	.-1960   	; 0x1a28 <vPortYield>
    21d0:	0f 90       	pop	r0
    21d2:	0f be       	out	0x3f, r0	; 63
    21d4:	81 e0       	ldi	r24, 0x01	; 1
    21d6:	7a c0       	rjmp	.+244    	; 0x22cc <__stack+0xcd>
    21d8:	8e 81       	ldd	r24, Y+6	; 0x06
    21da:	9f 81       	ldd	r25, Y+7	; 0x07
    21dc:	a8 85       	ldd	r26, Y+8	; 0x08
    21de:	b9 85       	ldd	r27, Y+9	; 0x09
    21e0:	89 2b       	or	r24, r25
    21e2:	8a 2b       	or	r24, r26
    21e4:	8b 2b       	or	r24, r27
    21e6:	21 f4       	brne	.+8      	; 0x21f0 <xQueueSemaphoreTake+0x9c>
    21e8:	0f 90       	pop	r0
    21ea:	0f be       	out	0x3f, r0	; 63
    21ec:	80 e0       	ldi	r24, 0x00	; 0
    21ee:	6e c0       	rjmp	.+220    	; 0x22cc <__stack+0xcd>
    21f0:	d1 10       	cpse	r13, r1
    21f2:	05 c0       	rjmp	.+10     	; 0x21fe <xQueueSemaphoreTake+0xaa>
    21f4:	ce 01       	movw	r24, r28
    21f6:	01 96       	adiw	r24, 0x01	; 1
    21f8:	0e 94 55 19 	call	0x32aa	; 0x32aa <vTaskInternalSetTimeOutState>
    21fc:	dc 2c       	mov	r13, r12
    21fe:	0f 90       	pop	r0
    2200:	0f be       	out	0x3f, r0	; 63
    2202:	6f d5       	rcall	.+2782   	; 0x2ce2 <vTaskSuspendAll>
    2204:	0f b6       	in	r0, 0x3f	; 63
    2206:	f8 94       	cli
    2208:	0f 92       	push	r0
    220a:	f8 01       	movw	r30, r16
    220c:	81 a1       	ldd	r24, Z+33	; 0x21
    220e:	8f 3f       	cpi	r24, 0xFF	; 255
    2210:	09 f4       	brne	.+2      	; 0x2214 <__stack+0x15>
    2212:	11 a2       	std	Z+33, r1	; 0x21
    2214:	d8 01       	movw	r26, r16
    2216:	92 96       	adiw	r26, 0x22	; 34
    2218:	8c 91       	ld	r24, X
    221a:	92 97       	sbiw	r26, 0x22	; 34
    221c:	8f 3f       	cpi	r24, 0xFF	; 255
    221e:	11 f4       	brne	.+4      	; 0x2224 <__stack+0x25>
    2220:	92 96       	adiw	r26, 0x22	; 34
    2222:	1c 92       	st	X, r1
    2224:	0f 90       	pop	r0
    2226:	0f be       	out	0x3f, r0	; 63
    2228:	be 01       	movw	r22, r28
    222a:	6a 5f       	subi	r22, 0xFA	; 250
    222c:	7f 4f       	sbci	r23, 0xFF	; 255
    222e:	ce 01       	movw	r24, r28
    2230:	01 96       	adiw	r24, 0x01	; 1
    2232:	0e 94 66 19 	call	0x32cc	; 0x32cc <xTaskCheckForTimeOut>
    2236:	81 11       	cpse	r24, r1
    2238:	24 c0       	rjmp	.+72     	; 0x2282 <__stack+0x83>
    223a:	c8 01       	movw	r24, r16
    223c:	bd dc       	rcall	.-1670   	; 0x1bb8 <prvIsQueueEmpty>
    223e:	88 23       	and	r24, r24
    2240:	e1 f0       	breq	.+56     	; 0x227a <__stack+0x7b>
    2242:	f8 01       	movw	r30, r16
    2244:	80 81       	ld	r24, Z
    2246:	91 81       	ldd	r25, Z+1	; 0x01
    2248:	89 2b       	or	r24, r25
    224a:	51 f4       	brne	.+20     	; 0x2260 <__stack+0x61>
    224c:	0f b6       	in	r0, 0x3f	; 63
    224e:	f8 94       	cli
    2250:	0f 92       	push	r0
    2252:	84 81       	ldd	r24, Z+4	; 0x04
    2254:	95 81       	ldd	r25, Z+5	; 0x05
    2256:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <xTaskPriorityInherit>
    225a:	b8 2e       	mov	r11, r24
    225c:	0f 90       	pop	r0
    225e:	0f be       	out	0x3f, r0	; 63
    2260:	4e 81       	ldd	r20, Y+6	; 0x06
    2262:	5f 81       	ldd	r21, Y+7	; 0x07
    2264:	68 85       	ldd	r22, Y+8	; 0x08
    2266:	79 85       	ldd	r23, Y+9	; 0x09
    2268:	c7 01       	movw	r24, r14
    226a:	38 d7       	rcall	.+3696   	; 0x30dc <vTaskPlaceOnEventList>
    226c:	c8 01       	movw	r24, r16
    226e:	28 dd       	rcall	.-1456   	; 0x1cc0 <prvUnlockQueue>
    2270:	21 d6       	rcall	.+3138   	; 0x2eb4 <xTaskResumeAll>
    2272:	81 11       	cpse	r24, r1
    2274:	8d cf       	rjmp	.-230    	; 0x2190 <xQueueSemaphoreTake+0x3c>
    2276:	d8 db       	rcall	.-2128   	; 0x1a28 <vPortYield>
    2278:	8b cf       	rjmp	.-234    	; 0x2190 <xQueueSemaphoreTake+0x3c>
    227a:	c8 01       	movw	r24, r16
    227c:	21 dd       	rcall	.-1470   	; 0x1cc0 <prvUnlockQueue>
    227e:	1a d6       	rcall	.+3124   	; 0x2eb4 <xTaskResumeAll>
    2280:	87 cf       	rjmp	.-242    	; 0x2190 <xQueueSemaphoreTake+0x3c>
    2282:	c8 01       	movw	r24, r16
    2284:	1d dd       	rcall	.-1478   	; 0x1cc0 <prvUnlockQueue>
    2286:	16 d6       	rcall	.+3116   	; 0x2eb4 <xTaskResumeAll>
    2288:	c8 01       	movw	r24, r16
    228a:	96 dc       	rcall	.-1748   	; 0x1bb8 <prvIsQueueEmpty>
    228c:	88 23       	and	r24, r24
    228e:	09 f4       	brne	.+2      	; 0x2292 <__stack+0x93>
    2290:	7f cf       	rjmp	.-258    	; 0x2190 <xQueueSemaphoreTake+0x3c>
    2292:	bb 20       	and	r11, r11
    2294:	d1 f0       	breq	.+52     	; 0x22ca <__stack+0xcb>
    2296:	0f b6       	in	r0, 0x3f	; 63
    2298:	f8 94       	cli
    229a:	0f 92       	push	r0
    229c:	f8 01       	movw	r30, r16
    229e:	83 89       	ldd	r24, Z+19	; 0x13
    22a0:	88 23       	and	r24, r24
    22a2:	39 f0       	breq	.+14     	; 0x22b2 <__stack+0xb3>
    22a4:	02 8c       	ldd	r0, Z+26	; 0x1a
    22a6:	f3 8d       	ldd	r31, Z+27	; 0x1b
    22a8:	e0 2d       	mov	r30, r0
    22aa:	80 81       	ld	r24, Z
    22ac:	64 e0       	ldi	r22, 0x04	; 4
    22ae:	68 1b       	sub	r22, r24
    22b0:	01 c0       	rjmp	.+2      	; 0x22b4 <__stack+0xb5>
    22b2:	60 e0       	ldi	r22, 0x00	; 0
    22b4:	d8 01       	movw	r26, r16
    22b6:	14 96       	adiw	r26, 0x04	; 4
    22b8:	8d 91       	ld	r24, X+
    22ba:	9c 91       	ld	r25, X
    22bc:	15 97       	sbiw	r26, 0x05	; 5
    22be:	0e 94 80 1a 	call	0x3500	; 0x3500 <vTaskPriorityDisinheritAfterTimeout>
    22c2:	0f 90       	pop	r0
    22c4:	0f be       	out	0x3f, r0	; 63
    22c6:	80 e0       	ldi	r24, 0x00	; 0
    22c8:	01 c0       	rjmp	.+2      	; 0x22cc <__stack+0xcd>
    22ca:	80 e0       	ldi	r24, 0x00	; 0
    22cc:	29 96       	adiw	r28, 0x09	; 9
    22ce:	0f b6       	in	r0, 0x3f	; 63
    22d0:	f8 94       	cli
    22d2:	de bf       	out	0x3e, r29	; 62
    22d4:	0f be       	out	0x3f, r0	; 63
    22d6:	cd bf       	out	0x3d, r28	; 61
    22d8:	df 91       	pop	r29
    22da:	cf 91       	pop	r28
    22dc:	1f 91       	pop	r17
    22de:	0f 91       	pop	r16
    22e0:	ff 90       	pop	r15
    22e2:	ef 90       	pop	r14
    22e4:	df 90       	pop	r13
    22e6:	cf 90       	pop	r12
    22e8:	bf 90       	pop	r11
    22ea:	08 95       	ret

000022ec <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
    {
    22ec:	cf 93       	push	r28
    22ee:	df 93       	push	r29
    22f0:	ec 01       	movw	r28, r24
        will not actually cause the task to block, just place it on a blocked
        list.  It will not block until the scheduler is unlocked - at which
        time a yield will be performed.  If an item is added to the queue while
        the queue is locked, and the calling task blocks on the queue, then the
        calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    22f2:	0f b6       	in	r0, 0x3f	; 63
    22f4:	f8 94       	cli
    22f6:	0f 92       	push	r0
    22f8:	89 a1       	ldd	r24, Y+33	; 0x21
    22fa:	8f 3f       	cpi	r24, 0xFF	; 255
    22fc:	09 f4       	brne	.+2      	; 0x2300 <vQueueWaitForMessageRestricted+0x14>
    22fe:	19 a2       	std	Y+33, r1	; 0x21
    2300:	8a a1       	ldd	r24, Y+34	; 0x22
    2302:	8f 3f       	cpi	r24, 0xFF	; 255
    2304:	09 f4       	brne	.+2      	; 0x2308 <vQueueWaitForMessageRestricted+0x1c>
    2306:	1a a2       	std	Y+34, r1	; 0x22
    2308:	0f 90       	pop	r0
    230a:	0f be       	out	0x3f, r0	; 63
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    230c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    230e:	81 11       	cpse	r24, r1
    2310:	03 c0       	rjmp	.+6      	; 0x2318 <vQueueWaitForMessageRestricted+0x2c>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    2312:	ce 01       	movw	r24, r28
    2314:	43 96       	adiw	r24, 0x13	; 19
    2316:	1d d7       	rcall	.+3642   	; 0x3152 <vTaskPlaceOnEventListRestricted>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
        prvUnlockQueue( pxQueue );
    2318:	ce 01       	movw	r24, r28
    231a:	d2 dc       	rcall	.-1628   	; 0x1cc0 <prvUnlockQueue>
    }
    231c:	df 91       	pop	r29
    231e:	cf 91       	pop	r28
    2320:	08 95       	ret

00002322 <prvBytesInBuffer>:

    configASSERT( pxStreamBuffer );

    xReturn = prvBytesInBuffer( pxStreamBuffer );
    return xReturn;
}
    2322:	fc 01       	movw	r30, r24
    2324:	44 81       	ldd	r20, Z+4	; 0x04
    2326:	55 81       	ldd	r21, Z+5	; 0x05
    2328:	22 81       	ldd	r18, Z+2	; 0x02
    232a:	33 81       	ldd	r19, Z+3	; 0x03
    232c:	24 0f       	add	r18, r20
    232e:	35 1f       	adc	r19, r21
    2330:	80 81       	ld	r24, Z
    2332:	91 81       	ldd	r25, Z+1	; 0x01
    2334:	b9 01       	movw	r22, r18
    2336:	68 1b       	sub	r22, r24
    2338:	79 0b       	sbc	r23, r25
    233a:	cb 01       	movw	r24, r22
    233c:	64 17       	cp	r22, r20
    233e:	75 07       	cpc	r23, r21
    2340:	10 f0       	brcs	.+4      	; 0x2346 <prvBytesInBuffer+0x24>
    2342:	84 1b       	sub	r24, r20
    2344:	95 0b       	sbc	r25, r21
    2346:	08 95       	ret

00002348 <prvWriteBytesToBuffer>:
    2348:	af 92       	push	r10
    234a:	bf 92       	push	r11
    234c:	cf 92       	push	r12
    234e:	df 92       	push	r13
    2350:	ef 92       	push	r14
    2352:	ff 92       	push	r15
    2354:	0f 93       	push	r16
    2356:	1f 93       	push	r17
    2358:	cf 93       	push	r28
    235a:	df 93       	push	r29
    235c:	6c 01       	movw	r12, r24
    235e:	5b 01       	movw	r10, r22
    2360:	7a 01       	movw	r14, r20
    2362:	fc 01       	movw	r30, r24
    2364:	c2 81       	ldd	r28, Z+2	; 0x02
    2366:	d3 81       	ldd	r29, Z+3	; 0x03
    2368:	04 81       	ldd	r16, Z+4	; 0x04
    236a:	15 81       	ldd	r17, Z+5	; 0x05
    236c:	0c 1b       	sub	r16, r28
    236e:	1d 0b       	sbc	r17, r29
    2370:	40 17       	cp	r20, r16
    2372:	51 07       	cpc	r21, r17
    2374:	08 f4       	brcc	.+2      	; 0x2378 <prvWriteBytesToBuffer+0x30>
    2376:	8a 01       	movw	r16, r20
    2378:	f6 01       	movw	r30, r12
    237a:	84 85       	ldd	r24, Z+12	; 0x0c
    237c:	95 85       	ldd	r25, Z+13	; 0x0d
    237e:	a8 01       	movw	r20, r16
    2380:	b5 01       	movw	r22, r10
    2382:	8c 0f       	add	r24, r28
    2384:	9d 1f       	adc	r25, r29
    2386:	0e 94 32 2f 	call	0x5e64	; 0x5e64 <memcpy>
    238a:	0e 15       	cp	r16, r14
    238c:	1f 05       	cpc	r17, r15
    238e:	58 f4       	brcc	.+22     	; 0x23a6 <prvWriteBytesToBuffer+0x5e>
    2390:	a7 01       	movw	r20, r14
    2392:	40 1b       	sub	r20, r16
    2394:	51 0b       	sbc	r21, r17
    2396:	b5 01       	movw	r22, r10
    2398:	60 0f       	add	r22, r16
    239a:	71 1f       	adc	r23, r17
    239c:	f6 01       	movw	r30, r12
    239e:	84 85       	ldd	r24, Z+12	; 0x0c
    23a0:	95 85       	ldd	r25, Z+13	; 0x0d
    23a2:	0e 94 32 2f 	call	0x5e64	; 0x5e64 <memcpy>
    23a6:	ce 01       	movw	r24, r28
    23a8:	8e 0d       	add	r24, r14
    23aa:	9f 1d       	adc	r25, r15
    23ac:	f6 01       	movw	r30, r12
    23ae:	24 81       	ldd	r18, Z+4	; 0x04
    23b0:	35 81       	ldd	r19, Z+5	; 0x05
    23b2:	82 17       	cp	r24, r18
    23b4:	93 07       	cpc	r25, r19
    23b6:	10 f0       	brcs	.+4      	; 0x23bc <prvWriteBytesToBuffer+0x74>
    23b8:	82 1b       	sub	r24, r18
    23ba:	93 0b       	sbc	r25, r19
    23bc:	f6 01       	movw	r30, r12
    23be:	93 83       	std	Z+3, r25	; 0x03
    23c0:	82 83       	std	Z+2, r24	; 0x02
    23c2:	c7 01       	movw	r24, r14
    23c4:	df 91       	pop	r29
    23c6:	cf 91       	pop	r28
    23c8:	1f 91       	pop	r17
    23ca:	0f 91       	pop	r16
    23cc:	ff 90       	pop	r15
    23ce:	ef 90       	pop	r14
    23d0:	df 90       	pop	r13
    23d2:	cf 90       	pop	r12
    23d4:	bf 90       	pop	r11
    23d6:	af 90       	pop	r10
    23d8:	08 95       	ret

000023da <prvWriteMessageToBuffer>:
    23da:	cf 92       	push	r12
    23dc:	df 92       	push	r13
    23de:	ef 92       	push	r14
    23e0:	ff 92       	push	r15
    23e2:	0f 93       	push	r16
    23e4:	1f 93       	push	r17
    23e6:	cf 93       	push	r28
    23e8:	df 93       	push	r29
    23ea:	1f 92       	push	r1
    23ec:	1f 92       	push	r1
    23ee:	cd b7       	in	r28, 0x3d	; 61
    23f0:	de b7       	in	r29, 0x3e	; 62
    23f2:	5a 83       	std	Y+2, r21	; 0x02
    23f4:	49 83       	std	Y+1, r20	; 0x01
    23f6:	21 15       	cp	r18, r1
    23f8:	31 05       	cpc	r19, r1
    23fa:	c9 f0       	breq	.+50     	; 0x242e <prvWriteMessageToBuffer+0x54>
    23fc:	6b 01       	movw	r12, r22
    23fe:	7c 01       	movw	r14, r24
    2400:	fc 01       	movw	r30, r24
    2402:	86 85       	ldd	r24, Z+14	; 0x0e
    2404:	80 fd       	sbrc	r24, 0
    2406:	08 c0       	rjmp	.+16     	; 0x2418 <prvWriteMessageToBuffer+0x3e>
    2408:	ca 01       	movw	r24, r20
    240a:	24 17       	cp	r18, r20
    240c:	35 07       	cpc	r19, r21
    240e:	08 f4       	brcc	.+2      	; 0x2412 <prvWriteMessageToBuffer+0x38>
    2410:	c9 01       	movw	r24, r18
    2412:	9a 83       	std	Y+2, r25	; 0x02
    2414:	89 83       	std	Y+1, r24	; 0x01
    2416:	11 c0       	rjmp	.+34     	; 0x243a <prvWriteMessageToBuffer+0x60>
    2418:	20 17       	cp	r18, r16
    241a:	31 07       	cpc	r19, r17
    241c:	58 f0       	brcs	.+22     	; 0x2434 <prvWriteMessageToBuffer+0x5a>
    241e:	42 e0       	ldi	r20, 0x02	; 2
    2420:	50 e0       	ldi	r21, 0x00	; 0
    2422:	be 01       	movw	r22, r28
    2424:	6f 5f       	subi	r22, 0xFF	; 255
    2426:	7f 4f       	sbci	r23, 0xFF	; 255
    2428:	c7 01       	movw	r24, r14
    242a:	8e df       	rcall	.-228    	; 0x2348 <prvWriteBytesToBuffer>
    242c:	06 c0       	rjmp	.+12     	; 0x243a <prvWriteMessageToBuffer+0x60>
    242e:	80 e0       	ldi	r24, 0x00	; 0
    2430:	90 e0       	ldi	r25, 0x00	; 0
    2432:	08 c0       	rjmp	.+16     	; 0x2444 <prvWriteMessageToBuffer+0x6a>
    2434:	80 e0       	ldi	r24, 0x00	; 0
    2436:	90 e0       	ldi	r25, 0x00	; 0
    2438:	05 c0       	rjmp	.+10     	; 0x2444 <prvWriteMessageToBuffer+0x6a>
    243a:	49 81       	ldd	r20, Y+1	; 0x01
    243c:	5a 81       	ldd	r21, Y+2	; 0x02
    243e:	b6 01       	movw	r22, r12
    2440:	c7 01       	movw	r24, r14
    2442:	82 df       	rcall	.-252    	; 0x2348 <prvWriteBytesToBuffer>
    2444:	0f 90       	pop	r0
    2446:	0f 90       	pop	r0
    2448:	df 91       	pop	r29
    244a:	cf 91       	pop	r28
    244c:	1f 91       	pop	r17
    244e:	0f 91       	pop	r16
    2450:	ff 90       	pop	r15
    2452:	ef 90       	pop	r14
    2454:	df 90       	pop	r13
    2456:	cf 90       	pop	r12
    2458:	08 95       	ret

0000245a <prvReadBytesFromBuffer>:
    245a:	af 92       	push	r10
    245c:	bf 92       	push	r11
    245e:	cf 92       	push	r12
    2460:	df 92       	push	r13
    2462:	ef 92       	push	r14
    2464:	ff 92       	push	r15
    2466:	0f 93       	push	r16
    2468:	1f 93       	push	r17
    246a:	cf 93       	push	r28
    246c:	df 93       	push	r29
    246e:	7c 01       	movw	r14, r24
    2470:	5b 01       	movw	r10, r22
    2472:	e9 01       	movw	r28, r18
    2474:	42 17       	cp	r20, r18
    2476:	53 07       	cpc	r21, r19
    2478:	08 f4       	brcc	.+2      	; 0x247c <prvReadBytesFromBuffer+0x22>
    247a:	ea 01       	movw	r28, r20
    247c:	20 97       	sbiw	r28, 0x00	; 0
    247e:	79 f1       	breq	.+94     	; 0x24de <prvReadBytesFromBuffer+0x84>
    2480:	f7 01       	movw	r30, r14
    2482:	00 81       	ld	r16, Z
    2484:	11 81       	ldd	r17, Z+1	; 0x01
    2486:	c4 80       	ldd	r12, Z+4	; 0x04
    2488:	d5 80       	ldd	r13, Z+5	; 0x05
    248a:	c0 1a       	sub	r12, r16
    248c:	d1 0a       	sbc	r13, r17
    248e:	cc 15       	cp	r28, r12
    2490:	dd 05       	cpc	r29, r13
    2492:	08 f4       	brcc	.+2      	; 0x2496 <prvReadBytesFromBuffer+0x3c>
    2494:	6e 01       	movw	r12, r28
    2496:	f7 01       	movw	r30, r14
    2498:	64 85       	ldd	r22, Z+12	; 0x0c
    249a:	75 85       	ldd	r23, Z+13	; 0x0d
    249c:	60 0f       	add	r22, r16
    249e:	71 1f       	adc	r23, r17
    24a0:	a6 01       	movw	r20, r12
    24a2:	c5 01       	movw	r24, r10
    24a4:	0e 94 32 2f 	call	0x5e64	; 0x5e64 <memcpy>
    24a8:	cc 16       	cp	r12, r28
    24aa:	dd 06       	cpc	r13, r29
    24ac:	58 f4       	brcc	.+22     	; 0x24c4 <prvReadBytesFromBuffer+0x6a>
    24ae:	ae 01       	movw	r20, r28
    24b0:	4c 19       	sub	r20, r12
    24b2:	5d 09       	sbc	r21, r13
    24b4:	f7 01       	movw	r30, r14
    24b6:	64 85       	ldd	r22, Z+12	; 0x0c
    24b8:	75 85       	ldd	r23, Z+13	; 0x0d
    24ba:	c5 01       	movw	r24, r10
    24bc:	8c 0d       	add	r24, r12
    24be:	9d 1d       	adc	r25, r13
    24c0:	0e 94 32 2f 	call	0x5e64	; 0x5e64 <memcpy>
    24c4:	0c 0f       	add	r16, r28
    24c6:	1d 1f       	adc	r17, r29
    24c8:	f7 01       	movw	r30, r14
    24ca:	84 81       	ldd	r24, Z+4	; 0x04
    24cc:	95 81       	ldd	r25, Z+5	; 0x05
    24ce:	08 17       	cp	r16, r24
    24d0:	19 07       	cpc	r17, r25
    24d2:	10 f0       	brcs	.+4      	; 0x24d8 <prvReadBytesFromBuffer+0x7e>
    24d4:	08 1b       	sub	r16, r24
    24d6:	19 0b       	sbc	r17, r25
    24d8:	f7 01       	movw	r30, r14
    24da:	11 83       	std	Z+1, r17	; 0x01
    24dc:	00 83       	st	Z, r16
    24de:	ce 01       	movw	r24, r28
    24e0:	df 91       	pop	r29
    24e2:	cf 91       	pop	r28
    24e4:	1f 91       	pop	r17
    24e6:	0f 91       	pop	r16
    24e8:	ff 90       	pop	r15
    24ea:	ef 90       	pop	r14
    24ec:	df 90       	pop	r13
    24ee:	cf 90       	pop	r12
    24f0:	bf 90       	pop	r11
    24f2:	af 90       	pop	r10
    24f4:	08 95       	ret

000024f6 <xStreamBufferGenericCreate>:
    24f6:	ef 92       	push	r14
    24f8:	ff 92       	push	r15
    24fa:	1f 93       	push	r17
    24fc:	cf 93       	push	r28
    24fe:	df 93       	push	r29
    2500:	eb 01       	movw	r28, r22
    2502:	11 e0       	ldi	r17, 0x01	; 1
    2504:	41 30       	cpi	r20, 0x01	; 1
    2506:	09 f0       	breq	.+2      	; 0x250a <xStreamBufferGenericCreate+0x14>
    2508:	10 e0       	ldi	r17, 0x00	; 0
    250a:	20 97       	sbiw	r28, 0x00	; 0
    250c:	11 f4       	brne	.+4      	; 0x2512 <xStreamBufferGenericCreate+0x1c>
    250e:	c1 e0       	ldi	r28, 0x01	; 1
    2510:	d0 e0       	ldi	r29, 0x00	; 0
    2512:	7c 01       	movw	r14, r24
    2514:	2f ef       	ldi	r18, 0xFF	; 255
    2516:	e2 1a       	sub	r14, r18
    2518:	f2 0a       	sbc	r15, r18
    251a:	41 96       	adiw	r24, 0x11	; 17
    251c:	53 d8       	rcall	.-3930   	; 0x15c4 <pvPortMalloc>
    251e:	00 97       	sbiw	r24, 0x00	; 0
    2520:	81 f0       	breq	.+32     	; 0x2542 <xStreamBufferGenericCreate+0x4c>
    2522:	20 e1       	ldi	r18, 0x10	; 16
    2524:	fc 01       	movw	r30, r24
    2526:	11 92       	st	Z+, r1
    2528:	2a 95       	dec	r18
    252a:	e9 f7       	brne	.-6      	; 0x2526 <xStreamBufferGenericCreate+0x30>
    252c:	9c 01       	movw	r18, r24
    252e:	20 5f       	subi	r18, 0xF0	; 240
    2530:	3f 4f       	sbci	r19, 0xFF	; 255
    2532:	fc 01       	movw	r30, r24
    2534:	35 87       	std	Z+13, r19	; 0x0d
    2536:	24 87       	std	Z+12, r18	; 0x0c
    2538:	f5 82       	std	Z+5, r15	; 0x05
    253a:	e4 82       	std	Z+4, r14	; 0x04
    253c:	d7 83       	std	Z+7, r29	; 0x07
    253e:	c6 83       	std	Z+6, r28	; 0x06
    2540:	16 87       	std	Z+14, r17	; 0x0e
    2542:	df 91       	pop	r29
    2544:	cf 91       	pop	r28
    2546:	1f 91       	pop	r17
    2548:	ff 90       	pop	r15
    254a:	ef 90       	pop	r14
    254c:	08 95       	ret

0000254e <xStreamBufferReset>:
    254e:	cf 93       	push	r28
    2550:	df 93       	push	r29
    2552:	fc 01       	movw	r30, r24
    2554:	27 85       	ldd	r18, Z+15	; 0x0f
    2556:	0f b6       	in	r0, 0x3f	; 63
    2558:	f8 94       	cli
    255a:	0f 92       	push	r0
    255c:	80 85       	ldd	r24, Z+8	; 0x08
    255e:	91 85       	ldd	r25, Z+9	; 0x09
    2560:	89 2b       	or	r24, r25
    2562:	d1 f4       	brne	.+52     	; 0x2598 <xStreamBufferReset+0x4a>
    2564:	82 85       	ldd	r24, Z+10	; 0x0a
    2566:	93 85       	ldd	r25, Z+11	; 0x0b
    2568:	89 2b       	or	r24, r25
    256a:	c1 f4       	brne	.+48     	; 0x259c <xStreamBufferReset+0x4e>
    256c:	86 85       	ldd	r24, Z+14	; 0x0e
    256e:	46 81       	ldd	r20, Z+6	; 0x06
    2570:	57 81       	ldd	r21, Z+7	; 0x07
    2572:	64 81       	ldd	r22, Z+4	; 0x04
    2574:	75 81       	ldd	r23, Z+5	; 0x05
    2576:	a4 85       	ldd	r26, Z+12	; 0x0c
    2578:	b5 85       	ldd	r27, Z+13	; 0x0d
    257a:	90 e1       	ldi	r25, 0x10	; 16
    257c:	ef 01       	movw	r28, r30
    257e:	19 92       	st	Y+, r1
    2580:	9a 95       	dec	r25
    2582:	e9 f7       	brne	.-6      	; 0x257e <xStreamBufferReset+0x30>
    2584:	b5 87       	std	Z+13, r27	; 0x0d
    2586:	a4 87       	std	Z+12, r26	; 0x0c
    2588:	75 83       	std	Z+5, r23	; 0x05
    258a:	64 83       	std	Z+4, r22	; 0x04
    258c:	57 83       	std	Z+7, r21	; 0x07
    258e:	46 83       	std	Z+6, r20	; 0x06
    2590:	86 87       	std	Z+14, r24	; 0x0e
    2592:	27 87       	std	Z+15, r18	; 0x0f
    2594:	81 e0       	ldi	r24, 0x01	; 1
    2596:	03 c0       	rjmp	.+6      	; 0x259e <xStreamBufferReset+0x50>
    2598:	80 e0       	ldi	r24, 0x00	; 0
    259a:	01 c0       	rjmp	.+2      	; 0x259e <xStreamBufferReset+0x50>
    259c:	80 e0       	ldi	r24, 0x00	; 0
    259e:	0f 90       	pop	r0
    25a0:	0f be       	out	0x3f, r0	; 63
    25a2:	df 91       	pop	r29
    25a4:	cf 91       	pop	r28
    25a6:	08 95       	ret

000025a8 <xStreamBufferSpacesAvailable>:
    25a8:	fc 01       	movw	r30, r24
    25aa:	24 81       	ldd	r18, Z+4	; 0x04
    25ac:	35 81       	ldd	r19, Z+5	; 0x05
    25ae:	80 81       	ld	r24, Z
    25b0:	91 81       	ldd	r25, Z+1	; 0x01
    25b2:	42 81       	ldd	r20, Z+2	; 0x02
    25b4:	53 81       	ldd	r21, Z+3	; 0x03
    25b6:	82 0f       	add	r24, r18
    25b8:	93 1f       	adc	r25, r19
    25ba:	01 97       	sbiw	r24, 0x01	; 1
    25bc:	84 1b       	sub	r24, r20
    25be:	95 0b       	sbc	r25, r21
    25c0:	82 17       	cp	r24, r18
    25c2:	93 07       	cpc	r25, r19
    25c4:	10 f0       	brcs	.+4      	; 0x25ca <xStreamBufferSpacesAvailable+0x22>
    25c6:	82 1b       	sub	r24, r18
    25c8:	93 0b       	sbc	r25, r19
    25ca:	08 95       	ret

000025cc <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void *pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    25cc:	2f 92       	push	r2
    25ce:	3f 92       	push	r3
    25d0:	4f 92       	push	r4
    25d2:	5f 92       	push	r5
    25d4:	6f 92       	push	r6
    25d6:	7f 92       	push	r7
    25d8:	8f 92       	push	r8
    25da:	9f 92       	push	r9
    25dc:	af 92       	push	r10
    25de:	bf 92       	push	r11
    25e0:	cf 92       	push	r12
    25e2:	df 92       	push	r13
    25e4:	ef 92       	push	r14
    25e6:	ff 92       	push	r15
    25e8:	0f 93       	push	r16
    25ea:	1f 93       	push	r17
    25ec:	cf 93       	push	r28
    25ee:	df 93       	push	r29
    25f0:	cd b7       	in	r28, 0x3d	; 61
    25f2:	de b7       	in	r29, 0x3e	; 62
    25f4:	29 97       	sbiw	r28, 0x09	; 9
    25f6:	0f b6       	in	r0, 0x3f	; 63
    25f8:	f8 94       	cli
    25fa:	de bf       	out	0x3e, r29	; 62
    25fc:	0f be       	out	0x3f, r0	; 63
    25fe:	cd bf       	out	0x3d, r28	; 61
    2600:	5c 01       	movw	r10, r24
    2602:	1b 01       	movw	r2, r22
    2604:	2a 01       	movw	r4, r20
    2606:	0e 83       	std	Y+6, r16	; 0x06
    2608:	1f 83       	std	Y+7, r17	; 0x07
    260a:	28 87       	std	Y+8, r18	; 0x08
    260c:	39 87       	std	Y+9, r19	; 0x09

    /* This send function is used to write to both message buffers and stream
    buffers.  If this is a message buffer then the space needed must be
    increased by the amount of bytes needed to store the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    260e:	fc 01       	movw	r30, r24
    2610:	86 85       	ldd	r24, Z+14	; 0x0e
    2612:	80 ff       	sbrs	r24, 0
    2614:	05 c0       	rjmp	.+10     	; 0x2620 <xStreamBufferSend+0x54>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    2616:	3a 01       	movw	r6, r20
    2618:	f2 e0       	ldi	r31, 0x02	; 2
    261a:	6f 0e       	add	r6, r31
    261c:	71 1c       	adc	r7, r1
    261e:	01 c0       	rjmp	.+2      	; 0x2622 <xStreamBufferSend+0x56>
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReturn, xSpace = 0;
size_t xRequiredSpace = xDataLengthBytes;
    2620:	3a 01       	movw	r6, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    2622:	8e 81       	ldd	r24, Y+6	; 0x06
    2624:	9f 81       	ldd	r25, Y+7	; 0x07
    2626:	a8 85       	ldd	r26, Y+8	; 0x08
    2628:	b9 85       	ldd	r27, Y+9	; 0x09
    262a:	89 2b       	or	r24, r25
    262c:	8a 2b       	or	r24, r26
    262e:	8b 2b       	or	r24, r27
    2630:	09 f4       	brne	.+2      	; 0x2634 <xStreamBufferSend+0x68>
    2632:	34 c0       	rjmp	.+104    	; 0x269c <xStreamBufferSend+0xd0>
    {
        vTaskSetTimeOutState( &xTimeOut );
    2634:	ce 01       	movw	r24, r28
    2636:	01 96       	adiw	r24, 0x01	; 1
    2638:	22 d6       	rcall	.+3140   	; 0x327e <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
            buffer. */
            taskENTER_CRITICAL();
    263a:	0f b6       	in	r0, 0x3f	; 63
    263c:	f8 94       	cli
    263e:	0f 92       	push	r0
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    2640:	c5 01       	movw	r24, r10
    2642:	b2 df       	rcall	.-156    	; 0x25a8 <xStreamBufferSpacesAvailable>
    2644:	4c 01       	movw	r8, r24

                if( xSpace < xRequiredSpace )
    2646:	86 15       	cp	r24, r6
    2648:	97 05       	cpc	r25, r7
    264a:	18 f5       	brcc	.+70     	; 0x2692 <xStreamBufferSend+0xc6>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClear( NULL );
    264c:	80 e0       	ldi	r24, 0x00	; 0
    264e:	90 e0       	ldi	r25, 0x00	; 0
    2650:	0e 94 91 1c 	call	0x3922	; 0x3922 <xTaskNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    2654:	94 d6       	rcall	.+3368   	; 0x337e <xTaskGetCurrentTaskHandle>
    2656:	f5 01       	movw	r30, r10
    2658:	93 87       	std	Z+11, r25	; 0x0b
    265a:	82 87       	std	Z+10, r24	; 0x0a
                {
                    taskEXIT_CRITICAL();
                    break;
                }
            }
            taskEXIT_CRITICAL();
    265c:	0f 90       	pop	r0
    265e:	0f be       	out	0x3f, r0	; 63

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    2660:	ce 80       	ldd	r12, Y+6	; 0x06
    2662:	df 80       	ldd	r13, Y+7	; 0x07
    2664:	e8 84       	ldd	r14, Y+8	; 0x08
    2666:	f9 84       	ldd	r15, Y+9	; 0x09
    2668:	00 e0       	ldi	r16, 0x00	; 0
    266a:	10 e0       	ldi	r17, 0x00	; 0
    266c:	20 e0       	ldi	r18, 0x00	; 0
    266e:	30 e0       	ldi	r19, 0x00	; 0
    2670:	a9 01       	movw	r20, r18
    2672:	60 e0       	ldi	r22, 0x00	; 0
    2674:	70 e0       	ldi	r23, 0x00	; 0
    2676:	cb 01       	movw	r24, r22
    2678:	c9 d7       	rcall	.+3986   	; 0x360c <xTaskNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
    267a:	f5 01       	movw	r30, r10
    267c:	13 86       	std	Z+11, r1	; 0x0b
    267e:	12 86       	std	Z+10, r1	; 0x0a

        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    2680:	be 01       	movw	r22, r28
    2682:	6a 5f       	subi	r22, 0xFA	; 250
    2684:	7f 4f       	sbci	r23, 0xFF	; 255
    2686:	ce 01       	movw	r24, r28
    2688:	01 96       	adiw	r24, 0x01	; 1
    268a:	20 d6       	rcall	.+3136   	; 0x32cc <xTaskCheckForTimeOut>
    268c:	88 23       	and	r24, r24
    268e:	a9 f2       	breq	.-86     	; 0x263a <xStreamBufferSend+0x6e>
    2690:	02 c0       	rjmp	.+4      	; 0x2696 <xStreamBufferSend+0xca>
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
                }
                else
                {
                    taskEXIT_CRITICAL();
    2692:	0f 90       	pop	r0
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
    2694:	0f be       	out	0x3f, r0	; 63
    2696:	81 14       	cp	r8, r1
    2698:	91 04       	cpc	r9, r1
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    269a:	19 f4       	brne	.+6      	; 0x26a2 <xStreamBufferSend+0xd6>
    269c:	c5 01       	movw	r24, r10
    269e:	84 df       	rcall	.-248    	; 0x25a8 <xStreamBufferSpacesAvailable>
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    26a0:	4c 01       	movw	r8, r24
    26a2:	83 01       	movw	r16, r6
    26a4:	94 01       	movw	r18, r8
    26a6:	a2 01       	movw	r20, r4
    26a8:	b1 01       	movw	r22, r2
    26aa:	c5 01       	movw	r24, r10
    26ac:	96 de       	rcall	.-724    	; 0x23da <prvWriteMessageToBuffer>

    if( xReturn > ( size_t ) 0 )
    26ae:	7c 01       	movw	r14, r24
    26b0:	89 2b       	or	r24, r25
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    26b2:	e1 f0       	breq	.+56     	; 0x26ec <xStreamBufferSend+0x120>
    26b4:	c5 01       	movw	r24, r10
    26b6:	35 de       	rcall	.-918    	; 0x2322 <prvBytesInBuffer>
    26b8:	f5 01       	movw	r30, r10
    26ba:	26 81       	ldd	r18, Z+6	; 0x06
    26bc:	37 81       	ldd	r19, Z+7	; 0x07
    26be:	82 17       	cp	r24, r18
    26c0:	93 07       	cpc	r25, r19
        {
            sbSEND_COMPLETED( pxStreamBuffer );
    26c2:	a0 f0       	brcs	.+40     	; 0x26ec <xStreamBufferSend+0x120>
    26c4:	0e d3       	rcall	.+1564   	; 0x2ce2 <vTaskSuspendAll>
    26c6:	f5 01       	movw	r30, r10
    26c8:	80 85       	ldd	r24, Z+8	; 0x08
    26ca:	91 85       	ldd	r25, Z+9	; 0x09
    26cc:	89 2b       	or	r24, r25
    26ce:	69 f0       	breq	.+26     	; 0x26ea <xStreamBufferSend+0x11e>
    26d0:	80 85       	ldd	r24, Z+8	; 0x08
    26d2:	91 85       	ldd	r25, Z+9	; 0x09
    26d4:	00 e0       	ldi	r16, 0x00	; 0
    26d6:	10 e0       	ldi	r17, 0x00	; 0
    26d8:	20 e0       	ldi	r18, 0x00	; 0
    26da:	40 e0       	ldi	r20, 0x00	; 0
    26dc:	50 e0       	ldi	r21, 0x00	; 0
    26de:	ba 01       	movw	r22, r20
    26e0:	0e 94 90 1b 	call	0x3720	; 0x3720 <xTaskGenericNotify>
    26e4:	f5 01       	movw	r30, r10
    26e6:	11 86       	std	Z+9, r1	; 0x09
    26e8:	10 86       	std	Z+8, r1	; 0x08
    26ea:	e4 d3       	rcall	.+1992   	; 0x2eb4 <xTaskResumeAll>
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    26ec:	c7 01       	movw	r24, r14
    26ee:	29 96       	adiw	r28, 0x09	; 9
    26f0:	0f b6       	in	r0, 0x3f	; 63
    26f2:	f8 94       	cli
    26f4:	de bf       	out	0x3e, r29	; 62
    26f6:	0f be       	out	0x3f, r0	; 63
    26f8:	cd bf       	out	0x3d, r28	; 61
    26fa:	df 91       	pop	r29
    26fc:	cf 91       	pop	r28
    26fe:	1f 91       	pop	r17
    2700:	0f 91       	pop	r16
    2702:	ff 90       	pop	r15
    2704:	ef 90       	pop	r14
    2706:	df 90       	pop	r13
    2708:	cf 90       	pop	r12
    270a:	bf 90       	pop	r11
    270c:	af 90       	pop	r10
    270e:	9f 90       	pop	r9
    2710:	8f 90       	pop	r8
    2712:	7f 90       	pop	r7
    2714:	6f 90       	pop	r6
    2716:	5f 90       	pop	r5
    2718:	4f 90       	pop	r4
    271a:	3f 90       	pop	r3
    271c:	2f 90       	pop	r2
    271e:	08 95       	ret

00002720 <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void *pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    2720:	af 92       	push	r10
    2722:	bf 92       	push	r11
    2724:	cf 92       	push	r12
    2726:	df 92       	push	r13
    2728:	ef 92       	push	r14
    272a:	ff 92       	push	r15
    272c:	0f 93       	push	r16
    272e:	1f 93       	push	r17
    2730:	cf 93       	push	r28
    2732:	df 93       	push	r29
    2734:	ec 01       	movw	r28, r24
    2736:	5b 01       	movw	r10, r22
    2738:	6a 01       	movw	r12, r20
    273a:	79 01       	movw	r14, r18

    /* This send function is used to write to both message buffers and stream
    buffers.  If this is a message buffer then the space needed must be
    increased by the amount of bytes needed to store the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    273c:	8e 85       	ldd	r24, Y+14	; 0x0e
    273e:	80 ff       	sbrs	r24, 0
    2740:	04 c0       	rjmp	.+8      	; 0x274a <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    2742:	8a 01       	movw	r16, r20
    2744:	0e 5f       	subi	r16, 0xFE	; 254
    2746:	1f 4f       	sbci	r17, 0xFF	; 255
    2748:	01 c0       	rjmp	.+2      	; 0x274c <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReturn, xSpace;
size_t xRequiredSpace = xDataLengthBytes;
    274a:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    274c:	ce 01       	movw	r24, r28
    274e:	2c df       	rcall	.-424    	; 0x25a8 <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    2750:	9c 01       	movw	r18, r24
    2752:	a6 01       	movw	r20, r12
    2754:	b5 01       	movw	r22, r10
    2756:	ce 01       	movw	r24, r28
    2758:	40 de       	rcall	.-896    	; 0x23da <prvWriteMessageToBuffer>
    275a:	6c 01       	movw	r12, r24

    if( xReturn > ( size_t ) 0 )
    275c:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    275e:	b9 f0       	breq	.+46     	; 0x278e <xStreamBufferSendFromISR+0x6e>
    2760:	ce 01       	movw	r24, r28
    2762:	df dd       	rcall	.-1090   	; 0x2322 <prvBytesInBuffer>
    2764:	2e 81       	ldd	r18, Y+6	; 0x06
    2766:	3f 81       	ldd	r19, Y+7	; 0x07
    2768:	82 17       	cp	r24, r18
    276a:	93 07       	cpc	r25, r19
    276c:	80 f0       	brcs	.+32     	; 0x278e <xStreamBufferSendFromISR+0x6e>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    276e:	88 85       	ldd	r24, Y+8	; 0x08
    2770:	99 85       	ldd	r25, Y+9	; 0x09
    2772:	89 2b       	or	r24, r25
    2774:	61 f0       	breq	.+24     	; 0x278e <xStreamBufferSendFromISR+0x6e>
    2776:	88 85       	ldd	r24, Y+8	; 0x08
    2778:	99 85       	ldd	r25, Y+9	; 0x09
    277a:	00 e0       	ldi	r16, 0x00	; 0
    277c:	10 e0       	ldi	r17, 0x00	; 0
    277e:	20 e0       	ldi	r18, 0x00	; 0
    2780:	40 e0       	ldi	r20, 0x00	; 0
    2782:	50 e0       	ldi	r21, 0x00	; 0
    2784:	ba 01       	movw	r22, r20
    2786:	0e 94 08 1c 	call	0x3810	; 0x3810 <xTaskGenericNotifyFromISR>
    278a:	19 86       	std	Y+9, r1	; 0x09
    278c:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    278e:	c6 01       	movw	r24, r12
    2790:	df 91       	pop	r29
    2792:	cf 91       	pop	r28
    2794:	1f 91       	pop	r17
    2796:	0f 91       	pop	r16
    2798:	ff 90       	pop	r15
    279a:	ef 90       	pop	r14
    279c:	df 90       	pop	r13
    279e:	cf 90       	pop	r12
    27a0:	bf 90       	pop	r11
    27a2:	af 90       	pop	r10
    27a4:	08 95       	ret

000027a6 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void *pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    27a6:	4f 92       	push	r4
    27a8:	5f 92       	push	r5
    27aa:	6f 92       	push	r6
    27ac:	7f 92       	push	r7
    27ae:	8f 92       	push	r8
    27b0:	9f 92       	push	r9
    27b2:	af 92       	push	r10
    27b4:	bf 92       	push	r11
    27b6:	cf 92       	push	r12
    27b8:	df 92       	push	r13
    27ba:	ef 92       	push	r14
    27bc:	ff 92       	push	r15
    27be:	0f 93       	push	r16
    27c0:	1f 93       	push	r17
    27c2:	cf 93       	push	r28
    27c4:	df 93       	push	r29
    27c6:	1f 92       	push	r1
    27c8:	1f 92       	push	r1
    27ca:	cd b7       	in	r28, 0x3d	; 61
    27cc:	de b7       	in	r29, 0x3e	; 62
    27ce:	5c 01       	movw	r10, r24
    27d0:	2b 01       	movw	r4, r22
    27d2:	3a 01       	movw	r6, r20
    27d4:	68 01       	movw	r12, r16
    27d6:	79 01       	movw	r14, r18
    /* This receive function is used by both message buffers, which store
    discrete messages, and stream buffers, which store a continuous stream of
    bytes.  Discrete messages include an additional
    sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    27d8:	fc 01       	movw	r30, r24
    27da:	86 85       	ldd	r24, Z+14	; 0x0e
    27dc:	80 fd       	sbrc	r24, 0
    27de:	03 c0       	rjmp	.+6      	; 0x27e6 <xStreamBufferReceive+0x40>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    27e0:	81 2c       	mov	r8, r1
    27e2:	91 2c       	mov	r9, r1
    27e4:	04 c0       	rjmp	.+8      	; 0x27ee <xStreamBufferReceive+0x48>
    bytes.  Discrete messages include an additional
    sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    27e6:	68 94       	set
    27e8:	88 24       	eor	r8, r8
    27ea:	81 f8       	bld	r8, 1
    27ec:	91 2c       	mov	r9, r1
    else
    {
        xBytesToStoreMessageLength = 0;
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    27ee:	c1 14       	cp	r12, r1
    27f0:	d1 04       	cpc	r13, r1
    27f2:	e1 04       	cpc	r14, r1
    27f4:	f1 04       	cpc	r15, r1
    27f6:	31 f1       	breq	.+76     	; 0x2844 <xStreamBufferReceive+0x9e>
    {
        /* Checking if there is data and clearing the notification state must be
        performed atomically. */
        taskENTER_CRITICAL();
    27f8:	0f b6       	in	r0, 0x3f	; 63
    27fa:	f8 94       	cli
    27fc:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    27fe:	c5 01       	movw	r24, r10
    2800:	90 dd       	rcall	.-1248   	; 0x2322 <prvBytesInBuffer>
    2802:	8c 01       	movw	r16, r24
            /* If this function was invoked by a message buffer read then
            xBytesToStoreMessageLength holds the number of bytes used to hold
            the length of the next discrete message.  If this function was
            invoked by a stream buffer read then xBytesToStoreMessageLength will
            be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    2804:	88 16       	cp	r8, r24
    2806:	99 06       	cpc	r9, r25
    2808:	40 f0       	brcs	.+16     	; 0x281a <xStreamBufferReceive+0x74>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    280a:	80 e0       	ldi	r24, 0x00	; 0
    280c:	90 e0       	ldi	r25, 0x00	; 0
    280e:	0e 94 91 1c 	call	0x3922	; 0x3922 <xTaskNotifyStateClear>

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    2812:	b5 d5       	rcall	.+2922   	; 0x337e <xTaskGetCurrentTaskHandle>
    2814:	f5 01       	movw	r30, r10
    2816:	91 87       	std	Z+9, r25	; 0x09
    2818:	80 87       	std	Z+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    281a:	0f 90       	pop	r0
    281c:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    281e:	80 16       	cp	r8, r16
    2820:	91 06       	cpc	r9, r17
    2822:	b0 f0       	brcs	.+44     	; 0x2850 <xStreamBufferReceive+0xaa>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    2824:	00 e0       	ldi	r16, 0x00	; 0
    2826:	10 e0       	ldi	r17, 0x00	; 0
    2828:	20 e0       	ldi	r18, 0x00	; 0
    282a:	30 e0       	ldi	r19, 0x00	; 0
    282c:	a9 01       	movw	r20, r18
    282e:	60 e0       	ldi	r22, 0x00	; 0
    2830:	70 e0       	ldi	r23, 0x00	; 0
    2832:	cb 01       	movw	r24, r22
    2834:	eb d6       	rcall	.+3542   	; 0x360c <xTaskNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    2836:	f5 01       	movw	r30, r10
    2838:	11 86       	std	Z+9, r1	; 0x09

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    283a:	10 86       	std	Z+8, r1	; 0x08
    283c:	c5 01       	movw	r24, r10
    283e:	71 dd       	rcall	.-1310   	; 0x2322 <prvBytesInBuffer>
    2840:	8c 01       	movw	r16, r24
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    2842:	03 c0       	rjmp	.+6      	; 0x284a <xStreamBufferReceive+0xa4>
    2844:	c5 01       	movw	r24, r10
    2846:	6d dd       	rcall	.-1318   	; 0x2322 <prvBytesInBuffer>
    2848:	8c 01       	movw	r16, r24
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
    holds the number of bytes used to store the message length) or a stream of
    bytes (where xBytesToStoreMessageLength is zero), the number of bytes
    available must be greater than xBytesToStoreMessageLength to be able to
    read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    284a:	80 16       	cp	r8, r16
    284c:	91 06       	cpc	r9, r17
    284e:	b8 f5       	brcc	.+110    	; 0x28be <xStreamBufferReceive+0x118>
                                        size_t xBytesToStoreMessageLength )
{
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

    if( xBytesToStoreMessageLength != ( size_t ) 0 )
    2850:	81 14       	cp	r8, r1
    2852:	91 04       	cpc	r9, r1
    2854:	c1 f0       	breq	.+48     	; 0x2886 <xStreamBufferReceive+0xe0>
    {
        /* A discrete message is being received.  First receive the length
        of the message.  A copy of the tail is stored so the buffer can be
        returned to its prior state if the length of the message is too
        large for the provided buffer. */
        xOriginalTail = pxStreamBuffer->xTail;
    2856:	f5 01       	movw	r30, r10
    2858:	e0 80       	ld	r14, Z
    285a:	f1 80       	ldd	r15, Z+1	; 0x01
        ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
    285c:	98 01       	movw	r18, r16
    285e:	a4 01       	movw	r20, r8
    2860:	be 01       	movw	r22, r28
    2862:	6f 5f       	subi	r22, 0xFF	; 255
    2864:	7f 4f       	sbci	r23, 0xFF	; 255
    2866:	c5 01       	movw	r24, r10
    2868:	f8 dd       	rcall	.-1040   	; 0x245a <prvReadBytesFromBuffer>
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
    286a:	89 81       	ldd	r24, Y+1	; 0x01
    286c:	9a 81       	ldd	r25, Y+2	; 0x02

        /* Reduce the number of bytes available by the number of bytes just
        read out. */
        xBytesAvailable -= xBytesToStoreMessageLength;
    286e:	08 19       	sub	r16, r8
    2870:	19 09       	sbc	r17, r9

        /* Check there is enough space in the buffer provided by the
        user. */
        if( xNextMessageLength > xBufferLengthBytes )
    2872:	68 16       	cp	r6, r24
    2874:	79 06       	cpc	r7, r25
    2876:	30 f4       	brcc	.+12     	; 0x2884 <xStreamBufferReceive+0xde>
        {
            /* The user has provided insufficient space to read the message
            so return the buffer to its previous state (so the length of
            the message is in the buffer again). */
            pxStreamBuffer->xTail = xOriginalTail;
    2878:	f5 01       	movw	r30, r10
    287a:	f1 82       	std	Z+1, r15	; 0x01
    287c:	e0 82       	st	Z, r14
            xNextMessageLength = 0;
    287e:	61 2c       	mov	r6, r1
    2880:	71 2c       	mov	r7, r1
        of the message.  A copy of the tail is stored so the buffer can be
        returned to its prior state if the length of the message is too
        large for the provided buffer. */
        xOriginalTail = pxStreamBuffer->xTail;
        ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
    2882:	01 c0       	rjmp	.+2      	; 0x2886 <xStreamBufferReceive+0xe0>
        message), so read as many bytes as possible. */
        xNextMessageLength = xBufferLengthBytes;
    }

    /* Read the actual data. */
    xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
    2884:	3c 01       	movw	r6, r24
    2886:	98 01       	movw	r18, r16
    2888:	a3 01       	movw	r20, r6
    288a:	b2 01       	movw	r22, r4
    288c:	c5 01       	movw	r24, r10
    288e:	e5 dd       	rcall	.-1078   	; 0x245a <prvReadBytesFromBuffer>
    if( xBytesAvailable > xBytesToStoreMessageLength )
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    2890:	7c 01       	movw	r14, r24
    2892:	89 2b       	or	r24, r25
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    2894:	b1 f0       	breq	.+44     	; 0x28c2 <xStreamBufferReceive+0x11c>
    2896:	25 d2       	rcall	.+1098   	; 0x2ce2 <vTaskSuspendAll>
    2898:	f5 01       	movw	r30, r10
    289a:	82 85       	ldd	r24, Z+10	; 0x0a
    289c:	93 85       	ldd	r25, Z+11	; 0x0b
    289e:	89 2b       	or	r24, r25
    28a0:	61 f0       	breq	.+24     	; 0x28ba <xStreamBufferReceive+0x114>
    28a2:	82 85       	ldd	r24, Z+10	; 0x0a
    28a4:	93 85       	ldd	r25, Z+11	; 0x0b
    28a6:	00 e0       	ldi	r16, 0x00	; 0
    28a8:	10 e0       	ldi	r17, 0x00	; 0
    28aa:	20 e0       	ldi	r18, 0x00	; 0
    28ac:	40 e0       	ldi	r20, 0x00	; 0
    28ae:	50 e0       	ldi	r21, 0x00	; 0
    28b0:	ba 01       	movw	r22, r20
    28b2:	36 d7       	rcall	.+3692   	; 0x3720 <xTaskGenericNotify>
    28b4:	f5 01       	movw	r30, r10
    28b6:	13 86       	std	Z+11, r1	; 0x0b
    28b8:	12 86       	std	Z+10, r1	; 0x0a
    28ba:	fc d2       	rcall	.+1528   	; 0x2eb4 <xTaskResumeAll>
    28bc:	02 c0       	rjmp	.+4      	; 0x28c2 <xStreamBufferReceive+0x11c>
                             void *pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    28be:	e1 2c       	mov	r14, r1
    28c0:	f1 2c       	mov	r15, r1
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    28c2:	c7 01       	movw	r24, r14
    28c4:	0f 90       	pop	r0
    28c6:	0f 90       	pop	r0
    28c8:	df 91       	pop	r29
    28ca:	cf 91       	pop	r28
    28cc:	1f 91       	pop	r17
    28ce:	0f 91       	pop	r16
    28d0:	ff 90       	pop	r15
    28d2:	ef 90       	pop	r14
    28d4:	df 90       	pop	r13
    28d6:	cf 90       	pop	r12
    28d8:	bf 90       	pop	r11
    28da:	af 90       	pop	r10
    28dc:	9f 90       	pop	r9
    28de:	8f 90       	pop	r8
    28e0:	7f 90       	pop	r7
    28e2:	6f 90       	pop	r6
    28e4:	5f 90       	pop	r5
    28e6:	4f 90       	pop	r4
    28e8:	08 95       	ret

000028ea <prvResetNextTaskUnblockTime>:
    28ea:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <pxDelayedTaskList>
    28ee:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <pxDelayedTaskList+0x1>
    28f2:	80 81       	ld	r24, Z
    28f4:	81 11       	cpse	r24, r1
    28f6:	0c c0       	rjmp	.+24     	; 0x2910 <prvResetNextTaskUnblockTime+0x26>
    28f8:	8f ef       	ldi	r24, 0xFF	; 255
    28fa:	9f ef       	ldi	r25, 0xFF	; 255
    28fc:	dc 01       	movw	r26, r24
    28fe:	80 93 3b 19 	sts	0x193B, r24	; 0x80193b <xNextTaskUnblockTime>
    2902:	90 93 3c 19 	sts	0x193C, r25	; 0x80193c <xNextTaskUnblockTime+0x1>
    2906:	a0 93 3d 19 	sts	0x193D, r26	; 0x80193d <xNextTaskUnblockTime+0x2>
    290a:	b0 93 3e 19 	sts	0x193E, r27	; 0x80193e <xNextTaskUnblockTime+0x3>
    290e:	08 95       	ret
    2910:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <pxDelayedTaskList>
    2914:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <pxDelayedTaskList+0x1>
    2918:	07 80       	ldd	r0, Z+7	; 0x07
    291a:	f0 85       	ldd	r31, Z+8	; 0x08
    291c:	e0 2d       	mov	r30, r0
    291e:	00 84       	ldd	r0, Z+8	; 0x08
    2920:	f1 85       	ldd	r31, Z+9	; 0x09
    2922:	e0 2d       	mov	r30, r0
    2924:	82 81       	ldd	r24, Z+2	; 0x02
    2926:	93 81       	ldd	r25, Z+3	; 0x03
    2928:	a4 81       	ldd	r26, Z+4	; 0x04
    292a:	b5 81       	ldd	r27, Z+5	; 0x05
    292c:	80 93 3b 19 	sts	0x193B, r24	; 0x80193b <xNextTaskUnblockTime>
    2930:	90 93 3c 19 	sts	0x193C, r25	; 0x80193c <xNextTaskUnblockTime+0x1>
    2934:	a0 93 3d 19 	sts	0x193D, r26	; 0x80193d <xNextTaskUnblockTime+0x2>
    2938:	b0 93 3e 19 	sts	0x193E, r27	; 0x80193e <xNextTaskUnblockTime+0x3>
    293c:	08 95       	ret

0000293e <prvAddCurrentTaskToDelayedList>:
    293e:	8f 92       	push	r8
    2940:	9f 92       	push	r9
    2942:	af 92       	push	r10
    2944:	bf 92       	push	r11
    2946:	cf 92       	push	r12
    2948:	df 92       	push	r13
    294a:	ef 92       	push	r14
    294c:	ff 92       	push	r15
    294e:	cf 93       	push	r28
    2950:	6b 01       	movw	r12, r22
    2952:	7c 01       	movw	r14, r24
    2954:	c4 2f       	mov	r28, r20
    2956:	80 90 45 19 	lds	r8, 0x1945	; 0x801945 <xTickCount>
    295a:	90 90 46 19 	lds	r9, 0x1946	; 0x801946 <xTickCount+0x1>
    295e:	a0 90 47 19 	lds	r10, 0x1947	; 0x801947 <xTickCount+0x2>
    2962:	b0 90 48 19 	lds	r11, 0x1948	; 0x801948 <xTickCount+0x3>
    2966:	80 91 b2 19 	lds	r24, 0x19B2	; 0x8019b2 <pxCurrentTCB>
    296a:	90 91 b3 19 	lds	r25, 0x19B3	; 0x8019b3 <pxCurrentTCB+0x1>
    296e:	02 96       	adiw	r24, 0x02	; 2
    2970:	0e 94 3f 0c 	call	0x187e	; 0x187e <uxListRemove>
    2974:	8f ef       	ldi	r24, 0xFF	; 255
    2976:	c8 16       	cp	r12, r24
    2978:	d8 06       	cpc	r13, r24
    297a:	e8 06       	cpc	r14, r24
    297c:	f8 06       	cpc	r15, r24
    297e:	69 f4       	brne	.+26     	; 0x299a <prvAddCurrentTaskToDelayedList+0x5c>
    2980:	cc 23       	and	r28, r28
    2982:	59 f0       	breq	.+22     	; 0x299a <prvAddCurrentTaskToDelayedList+0x5c>
    2984:	60 91 b2 19 	lds	r22, 0x19B2	; 0x8019b2 <pxCurrentTCB>
    2988:	70 91 b3 19 	lds	r23, 0x19B3	; 0x8019b3 <pxCurrentTCB+0x1>
    298c:	6e 5f       	subi	r22, 0xFE	; 254
    298e:	7f 4f       	sbci	r23, 0xFF	; 255
    2990:	8a e4       	ldi	r24, 0x4A	; 74
    2992:	99 e1       	ldi	r25, 0x19	; 25
    2994:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <vListInsertEnd>
    2998:	3f c0       	rjmp	.+126    	; 0x2a18 <prvAddCurrentTaskToDelayedList+0xda>
    299a:	c8 0c       	add	r12, r8
    299c:	d9 1c       	adc	r13, r9
    299e:	ea 1c       	adc	r14, r10
    29a0:	fb 1c       	adc	r15, r11
    29a2:	e0 91 b2 19 	lds	r30, 0x19B2	; 0x8019b2 <pxCurrentTCB>
    29a6:	f0 91 b3 19 	lds	r31, 0x19B3	; 0x8019b3 <pxCurrentTCB+0x1>
    29aa:	c2 82       	std	Z+2, r12	; 0x02
    29ac:	d3 82       	std	Z+3, r13	; 0x03
    29ae:	e4 82       	std	Z+4, r14	; 0x04
    29b0:	f5 82       	std	Z+5, r15	; 0x05
    29b2:	c8 14       	cp	r12, r8
    29b4:	d9 04       	cpc	r13, r9
    29b6:	ea 04       	cpc	r14, r10
    29b8:	fb 04       	cpc	r15, r11
    29ba:	68 f4       	brcc	.+26     	; 0x29d6 <prvAddCurrentTaskToDelayedList+0x98>
    29bc:	60 91 b2 19 	lds	r22, 0x19B2	; 0x8019b2 <pxCurrentTCB>
    29c0:	70 91 b3 19 	lds	r23, 0x19B3	; 0x8019b3 <pxCurrentTCB+0x1>
    29c4:	80 91 6c 19 	lds	r24, 0x196C	; 0x80196c <pxOverflowDelayedTaskList>
    29c8:	90 91 6d 19 	lds	r25, 0x196D	; 0x80196d <pxOverflowDelayedTaskList+0x1>
    29cc:	6e 5f       	subi	r22, 0xFE	; 254
    29ce:	7f 4f       	sbci	r23, 0xFF	; 255
    29d0:	0e 94 02 0c 	call	0x1804	; 0x1804 <vListInsert>
    29d4:	21 c0       	rjmp	.+66     	; 0x2a18 <prvAddCurrentTaskToDelayedList+0xda>
    29d6:	60 91 b2 19 	lds	r22, 0x19B2	; 0x8019b2 <pxCurrentTCB>
    29da:	70 91 b3 19 	lds	r23, 0x19B3	; 0x8019b3 <pxCurrentTCB+0x1>
    29de:	80 91 6e 19 	lds	r24, 0x196E	; 0x80196e <pxDelayedTaskList>
    29e2:	90 91 6f 19 	lds	r25, 0x196F	; 0x80196f <pxDelayedTaskList+0x1>
    29e6:	6e 5f       	subi	r22, 0xFE	; 254
    29e8:	7f 4f       	sbci	r23, 0xFF	; 255
    29ea:	0e 94 02 0c 	call	0x1804	; 0x1804 <vListInsert>
    29ee:	80 91 3b 19 	lds	r24, 0x193B	; 0x80193b <xNextTaskUnblockTime>
    29f2:	90 91 3c 19 	lds	r25, 0x193C	; 0x80193c <xNextTaskUnblockTime+0x1>
    29f6:	a0 91 3d 19 	lds	r26, 0x193D	; 0x80193d <xNextTaskUnblockTime+0x2>
    29fa:	b0 91 3e 19 	lds	r27, 0x193E	; 0x80193e <xNextTaskUnblockTime+0x3>
    29fe:	c8 16       	cp	r12, r24
    2a00:	d9 06       	cpc	r13, r25
    2a02:	ea 06       	cpc	r14, r26
    2a04:	fb 06       	cpc	r15, r27
    2a06:	40 f4       	brcc	.+16     	; 0x2a18 <prvAddCurrentTaskToDelayedList+0xda>
    2a08:	c0 92 3b 19 	sts	0x193B, r12	; 0x80193b <xNextTaskUnblockTime>
    2a0c:	d0 92 3c 19 	sts	0x193C, r13	; 0x80193c <xNextTaskUnblockTime+0x1>
    2a10:	e0 92 3d 19 	sts	0x193D, r14	; 0x80193d <xNextTaskUnblockTime+0x2>
    2a14:	f0 92 3e 19 	sts	0x193E, r15	; 0x80193e <xNextTaskUnblockTime+0x3>
    2a18:	cf 91       	pop	r28
    2a1a:	ff 90       	pop	r15
    2a1c:	ef 90       	pop	r14
    2a1e:	df 90       	pop	r13
    2a20:	cf 90       	pop	r12
    2a22:	bf 90       	pop	r11
    2a24:	af 90       	pop	r10
    2a26:	9f 90       	pop	r9
    2a28:	8f 90       	pop	r8
    2a2a:	08 95       	ret

00002a2c <xTaskCreate>:
    2a2c:	4f 92       	push	r4
    2a2e:	5f 92       	push	r5
    2a30:	6f 92       	push	r6
    2a32:	7f 92       	push	r7
    2a34:	8f 92       	push	r8
    2a36:	9f 92       	push	r9
    2a38:	af 92       	push	r10
    2a3a:	bf 92       	push	r11
    2a3c:	cf 92       	push	r12
    2a3e:	df 92       	push	r13
    2a40:	ef 92       	push	r14
    2a42:	ff 92       	push	r15
    2a44:	0f 93       	push	r16
    2a46:	cf 93       	push	r28
    2a48:	df 93       	push	r29
    2a4a:	4c 01       	movw	r8, r24
    2a4c:	6b 01       	movw	r12, r22
    2a4e:	5a 01       	movw	r10, r20
    2a50:	29 01       	movw	r4, r18
    2a52:	ca 01       	movw	r24, r20
    2a54:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <pvPortMalloc>
    2a58:	3c 01       	movw	r6, r24
    2a5a:	89 2b       	or	r24, r25
    2a5c:	09 f4       	brne	.+2      	; 0x2a60 <xTaskCreate+0x34>
    2a5e:	f4 c0       	rjmp	.+488    	; 0x2c48 <xTaskCreate+0x21c>
    2a60:	80 e3       	ldi	r24, 0x30	; 48
    2a62:	90 e0       	ldi	r25, 0x00	; 0
    2a64:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <pvPortMalloc>
    2a68:	ec 01       	movw	r28, r24
    2a6a:	89 2b       	or	r24, r25
    2a6c:	99 f0       	breq	.+38     	; 0x2a94 <xTaskCreate+0x68>
    2a6e:	7c 8e       	std	Y+28, r7	; 0x1c
    2a70:	6b 8e       	std	Y+27, r6	; 0x1b
    2a72:	a5 01       	movw	r20, r10
    2a74:	65 ea       	ldi	r22, 0xA5	; 165
    2a76:	70 e0       	ldi	r23, 0x00	; 0
    2a78:	c3 01       	movw	r24, r6
    2a7a:	0e 94 3b 2f 	call	0x5e76	; 0x5e76 <memset>
    2a7e:	21 e0       	ldi	r18, 0x01	; 1
    2a80:	a2 1a       	sub	r10, r18
    2a82:	b1 08       	sbc	r11, r1
    2a84:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a86:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a88:	a8 0e       	add	r10, r24
    2a8a:	b9 1e       	adc	r11, r25
    2a8c:	c1 14       	cp	r12, r1
    2a8e:	d1 04       	cpc	r13, r1
    2a90:	29 f4       	brne	.+10     	; 0x2a9c <xTaskCreate+0x70>
    2a92:	20 c0       	rjmp	.+64     	; 0x2ad4 <xTaskCreate+0xa8>
    2a94:	c3 01       	movw	r24, r6
    2a96:	0e 94 9b 0b 	call	0x1736	; 0x1736 <vPortFree>
    2a9a:	d6 c0       	rjmp	.+428    	; 0x2c48 <xTaskCreate+0x21c>
    2a9c:	d6 01       	movw	r26, r12
    2a9e:	8c 91       	ld	r24, X
    2aa0:	8d 8f       	std	Y+29, r24	; 0x1d
    2aa2:	8c 91       	ld	r24, X
    2aa4:	88 23       	and	r24, r24
    2aa6:	a1 f0       	breq	.+40     	; 0x2ad0 <xTaskCreate+0xa4>
    2aa8:	ae 01       	movw	r20, r28
    2aaa:	42 5e       	subi	r20, 0xE2	; 226
    2aac:	5f 4f       	sbci	r21, 0xFF	; 255
    2aae:	f6 01       	movw	r30, r12
    2ab0:	31 96       	adiw	r30, 0x01	; 1
    2ab2:	b8 e0       	ldi	r27, 0x08	; 8
    2ab4:	cb 0e       	add	r12, r27
    2ab6:	d1 1c       	adc	r13, r1
    2ab8:	cf 01       	movw	r24, r30
    2aba:	21 91       	ld	r18, Z+
    2abc:	da 01       	movw	r26, r20
    2abe:	2d 93       	st	X+, r18
    2ac0:	ad 01       	movw	r20, r26
    2ac2:	dc 01       	movw	r26, r24
    2ac4:	8c 91       	ld	r24, X
    2ac6:	88 23       	and	r24, r24
    2ac8:	19 f0       	breq	.+6      	; 0x2ad0 <xTaskCreate+0xa4>
    2aca:	ec 15       	cp	r30, r12
    2acc:	fd 05       	cpc	r31, r13
    2ace:	a1 f7       	brne	.-24     	; 0x2ab8 <xTaskCreate+0x8c>
    2ad0:	1c a2       	std	Y+36, r1	; 0x24
    2ad2:	01 c0       	rjmp	.+2      	; 0x2ad6 <xTaskCreate+0xaa>
    2ad4:	1d 8e       	std	Y+29, r1	; 0x1d
    2ad6:	04 30       	cpi	r16, 0x04	; 4
    2ad8:	08 f0       	brcs	.+2      	; 0x2adc <xTaskCreate+0xb0>
    2ada:	03 e0       	ldi	r16, 0x03	; 3
    2adc:	0a 8f       	std	Y+26, r16	; 0x1a
    2ade:	0f a3       	std	Y+39, r16	; 0x27
    2ae0:	18 a6       	std	Y+40, r1	; 0x28
    2ae2:	6e 01       	movw	r12, r28
    2ae4:	b2 e0       	ldi	r27, 0x02	; 2
    2ae6:	cb 0e       	add	r12, r27
    2ae8:	d1 1c       	adc	r13, r1
    2aea:	c6 01       	movw	r24, r12
    2aec:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <vListInitialiseItem>
    2af0:	ce 01       	movw	r24, r28
    2af2:	0e 96       	adiw	r24, 0x0e	; 14
    2af4:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <vListInitialiseItem>
    2af8:	db 87       	std	Y+11, r29	; 0x0b
    2afa:	ca 87       	std	Y+10, r28	; 0x0a
    2afc:	84 e0       	ldi	r24, 0x04	; 4
    2afe:	90 e0       	ldi	r25, 0x00	; 0
    2b00:	a0 e0       	ldi	r26, 0x00	; 0
    2b02:	b0 e0       	ldi	r27, 0x00	; 0
    2b04:	80 1b       	sub	r24, r16
    2b06:	91 09       	sbc	r25, r1
    2b08:	a1 09       	sbc	r26, r1
    2b0a:	b1 09       	sbc	r27, r1
    2b0c:	8e 87       	std	Y+14, r24	; 0x0e
    2b0e:	9f 87       	std	Y+15, r25	; 0x0f
    2b10:	a8 8b       	std	Y+16, r26	; 0x10
    2b12:	b9 8b       	std	Y+17, r27	; 0x11
    2b14:	df 8b       	std	Y+23, r29	; 0x17
    2b16:	ce 8b       	std	Y+22, r28	; 0x16
    2b18:	1a a6       	std	Y+42, r1	; 0x2a
    2b1a:	19 a6       	std	Y+41, r1	; 0x29
    2b1c:	1b a6       	std	Y+43, r1	; 0x2b
    2b1e:	1c a6       	std	Y+44, r1	; 0x2c
    2b20:	1d a6       	std	Y+45, r1	; 0x2d
    2b22:	1e a6       	std	Y+46, r1	; 0x2e
    2b24:	1f a6       	std	Y+47, r1	; 0x2f
    2b26:	a2 01       	movw	r20, r4
    2b28:	b4 01       	movw	r22, r8
    2b2a:	c5 01       	movw	r24, r10
    2b2c:	0e 94 66 0c 	call	0x18cc	; 0x18cc <pxPortInitialiseStack>
    2b30:	99 83       	std	Y+1, r25	; 0x01
    2b32:	88 83       	st	Y, r24
    2b34:	e1 14       	cp	r14, r1
    2b36:	f1 04       	cpc	r15, r1
    2b38:	19 f0       	breq	.+6      	; 0x2b40 <xTaskCreate+0x114>
    2b3a:	f7 01       	movw	r30, r14
    2b3c:	d1 83       	std	Z+1, r29	; 0x01
    2b3e:	c0 83       	st	Z, r28
    2b40:	0f b6       	in	r0, 0x3f	; 63
    2b42:	f8 94       	cli
    2b44:	0f 92       	push	r0
    2b46:	80 91 49 19 	lds	r24, 0x1949	; 0x801949 <uxCurrentNumberOfTasks>
    2b4a:	8f 5f       	subi	r24, 0xFF	; 255
    2b4c:	80 93 49 19 	sts	0x1949, r24	; 0x801949 <uxCurrentNumberOfTasks>
    2b50:	80 91 b2 19 	lds	r24, 0x19B2	; 0x8019b2 <pxCurrentTCB>
    2b54:	90 91 b3 19 	lds	r25, 0x19B3	; 0x8019b3 <pxCurrentTCB+0x1>
    2b58:	89 2b       	or	r24, r25
    2b5a:	d1 f5       	brne	.+116    	; 0x2bd0 <xTaskCreate+0x1a4>
    2b5c:	d0 93 b3 19 	sts	0x19B3, r29	; 0x8019b3 <pxCurrentTCB+0x1>
    2b60:	c0 93 b2 19 	sts	0x19B2, r28	; 0x8019b2 <pxCurrentTCB>
    2b64:	80 91 49 19 	lds	r24, 0x1949	; 0x801949 <uxCurrentNumberOfTasks>
    2b68:	81 30       	cpi	r24, 0x01	; 1
    2b6a:	09 f0       	breq	.+2      	; 0x2b6e <xTaskCreate+0x142>
    2b6c:	41 c0       	rjmp	.+130    	; 0x2bf0 <xTaskCreate+0x1c4>
    2b6e:	86 e8       	ldi	r24, 0x86	; 134
    2b70:	99 e1       	ldi	r25, 0x19	; 25
    2b72:	0e 94 cc 0b 	call	0x1798	; 0x1798 <vListInitialise>
    2b76:	81 e9       	ldi	r24, 0x91	; 145
    2b78:	99 e1       	ldi	r25, 0x19	; 25
    2b7a:	0e 94 cc 0b 	call	0x1798	; 0x1798 <vListInitialise>
    2b7e:	8c e9       	ldi	r24, 0x9C	; 156
    2b80:	99 e1       	ldi	r25, 0x19	; 25
    2b82:	0e 94 cc 0b 	call	0x1798	; 0x1798 <vListInitialise>
    2b86:	87 ea       	ldi	r24, 0xA7	; 167
    2b88:	99 e1       	ldi	r25, 0x19	; 25
    2b8a:	0e 94 cc 0b 	call	0x1798	; 0x1798 <vListInitialise>
    2b8e:	8b e7       	ldi	r24, 0x7B	; 123
    2b90:	99 e1       	ldi	r25, 0x19	; 25
    2b92:	0e 94 cc 0b 	call	0x1798	; 0x1798 <vListInitialise>
    2b96:	80 e7       	ldi	r24, 0x70	; 112
    2b98:	99 e1       	ldi	r25, 0x19	; 25
    2b9a:	0e 94 cc 0b 	call	0x1798	; 0x1798 <vListInitialise>
    2b9e:	81 e6       	ldi	r24, 0x61	; 97
    2ba0:	99 e1       	ldi	r25, 0x19	; 25
    2ba2:	0e 94 cc 0b 	call	0x1798	; 0x1798 <vListInitialise>
    2ba6:	86 e5       	ldi	r24, 0x56	; 86
    2ba8:	99 e1       	ldi	r25, 0x19	; 25
    2baa:	0e 94 cc 0b 	call	0x1798	; 0x1798 <vListInitialise>
    2bae:	8a e4       	ldi	r24, 0x4A	; 74
    2bb0:	99 e1       	ldi	r25, 0x19	; 25
    2bb2:	0e 94 cc 0b 	call	0x1798	; 0x1798 <vListInitialise>
    2bb6:	8b e7       	ldi	r24, 0x7B	; 123
    2bb8:	99 e1       	ldi	r25, 0x19	; 25
    2bba:	90 93 6f 19 	sts	0x196F, r25	; 0x80196f <pxDelayedTaskList+0x1>
    2bbe:	80 93 6e 19 	sts	0x196E, r24	; 0x80196e <pxDelayedTaskList>
    2bc2:	80 e7       	ldi	r24, 0x70	; 112
    2bc4:	99 e1       	ldi	r25, 0x19	; 25
    2bc6:	90 93 6d 19 	sts	0x196D, r25	; 0x80196d <pxOverflowDelayedTaskList+0x1>
    2bca:	80 93 6c 19 	sts	0x196C, r24	; 0x80196c <pxOverflowDelayedTaskList>
    2bce:	10 c0       	rjmp	.+32     	; 0x2bf0 <xTaskCreate+0x1c4>
    2bd0:	80 91 43 19 	lds	r24, 0x1943	; 0x801943 <xSchedulerRunning>
    2bd4:	81 11       	cpse	r24, r1
    2bd6:	0c c0       	rjmp	.+24     	; 0x2bf0 <xTaskCreate+0x1c4>
    2bd8:	e0 91 b2 19 	lds	r30, 0x19B2	; 0x8019b2 <pxCurrentTCB>
    2bdc:	f0 91 b3 19 	lds	r31, 0x19B3	; 0x8019b3 <pxCurrentTCB+0x1>
    2be0:	92 8d       	ldd	r25, Z+26	; 0x1a
    2be2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2be4:	89 17       	cp	r24, r25
    2be6:	20 f0       	brcs	.+8      	; 0x2bf0 <xTaskCreate+0x1c4>
    2be8:	d0 93 b3 19 	sts	0x19B3, r29	; 0x8019b3 <pxCurrentTCB+0x1>
    2bec:	c0 93 b2 19 	sts	0x19B2, r28	; 0x8019b2 <pxCurrentTCB>
    2bf0:	80 91 3f 19 	lds	r24, 0x193F	; 0x80193f <uxTaskNumber>
    2bf4:	8f 5f       	subi	r24, 0xFF	; 255
    2bf6:	80 93 3f 19 	sts	0x193F, r24	; 0x80193f <uxTaskNumber>
    2bfa:	8d a3       	std	Y+37, r24	; 0x25
    2bfc:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2bfe:	90 91 44 19 	lds	r25, 0x1944	; 0x801944 <uxTopReadyPriority>
    2c02:	98 17       	cp	r25, r24
    2c04:	10 f4       	brcc	.+4      	; 0x2c0a <xTaskCreate+0x1de>
    2c06:	80 93 44 19 	sts	0x1944, r24	; 0x801944 <uxTopReadyPriority>
    2c0a:	fb e0       	ldi	r31, 0x0B	; 11
    2c0c:	8f 9f       	mul	r24, r31
    2c0e:	c0 01       	movw	r24, r0
    2c10:	11 24       	eor	r1, r1
    2c12:	b6 01       	movw	r22, r12
    2c14:	8a 57       	subi	r24, 0x7A	; 122
    2c16:	96 4e       	sbci	r25, 0xE6	; 230
    2c18:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <vListInsertEnd>
    2c1c:	0f 90       	pop	r0
    2c1e:	0f be       	out	0x3f, r0	; 63
    2c20:	80 91 43 19 	lds	r24, 0x1943	; 0x801943 <xSchedulerRunning>
    2c24:	88 23       	and	r24, r24
    2c26:	61 f0       	breq	.+24     	; 0x2c40 <xTaskCreate+0x214>
    2c28:	e0 91 b2 19 	lds	r30, 0x19B2	; 0x8019b2 <pxCurrentTCB>
    2c2c:	f0 91 b3 19 	lds	r31, 0x19B3	; 0x8019b3 <pxCurrentTCB+0x1>
    2c30:	92 8d       	ldd	r25, Z+26	; 0x1a
    2c32:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2c34:	98 17       	cp	r25, r24
    2c36:	30 f4       	brcc	.+12     	; 0x2c44 <xTaskCreate+0x218>
    2c38:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <vPortYield>
    2c3c:	81 e0       	ldi	r24, 0x01	; 1
    2c3e:	05 c0       	rjmp	.+10     	; 0x2c4a <xTaskCreate+0x21e>
    2c40:	81 e0       	ldi	r24, 0x01	; 1
    2c42:	03 c0       	rjmp	.+6      	; 0x2c4a <xTaskCreate+0x21e>
    2c44:	81 e0       	ldi	r24, 0x01	; 1
    2c46:	01 c0       	rjmp	.+2      	; 0x2c4a <xTaskCreate+0x21e>
    2c48:	8f ef       	ldi	r24, 0xFF	; 255
    2c4a:	df 91       	pop	r29
    2c4c:	cf 91       	pop	r28
    2c4e:	0f 91       	pop	r16
    2c50:	ff 90       	pop	r15
    2c52:	ef 90       	pop	r14
    2c54:	df 90       	pop	r13
    2c56:	cf 90       	pop	r12
    2c58:	bf 90       	pop	r11
    2c5a:	af 90       	pop	r10
    2c5c:	9f 90       	pop	r9
    2c5e:	8f 90       	pop	r8
    2c60:	7f 90       	pop	r7
    2c62:	6f 90       	pop	r6
    2c64:	5f 90       	pop	r5
    2c66:	4f 90       	pop	r4
    2c68:	08 95       	ret

00002c6a <vTaskStartScheduler>:
    2c6a:	ef 92       	push	r14
    2c6c:	ff 92       	push	r15
    2c6e:	0f 93       	push	r16
    2c70:	0f 2e       	mov	r0, r31
    2c72:	f9 e3       	ldi	r31, 0x39	; 57
    2c74:	ef 2e       	mov	r14, r31
    2c76:	f9 e1       	ldi	r31, 0x19	; 25
    2c78:	ff 2e       	mov	r15, r31
    2c7a:	f0 2d       	mov	r31, r0
    2c7c:	00 e0       	ldi	r16, 0x00	; 0
    2c7e:	20 e0       	ldi	r18, 0x00	; 0
    2c80:	30 e0       	ldi	r19, 0x00	; 0
    2c82:	40 ec       	ldi	r20, 0xC0	; 192
    2c84:	50 e0       	ldi	r21, 0x00	; 0
    2c86:	63 e6       	ldi	r22, 0x63	; 99
    2c88:	75 e0       	ldi	r23, 0x05	; 5
    2c8a:	8d ec       	ldi	r24, 0xCD	; 205
    2c8c:	90 e0       	ldi	r25, 0x00	; 0
    2c8e:	ce de       	rcall	.-612    	; 0x2a2c <xTaskCreate>
    2c90:	81 30       	cpi	r24, 0x01	; 1
    2c92:	19 f5       	brne	.+70     	; 0x2cda <vTaskStartScheduler+0x70>
    2c94:	cc d6       	rcall	.+3480   	; 0x3a2e <xTimerCreateTimerTask>
    2c96:	81 30       	cpi	r24, 0x01	; 1
    2c98:	01 f5       	brne	.+64     	; 0x2cda <vTaskStartScheduler+0x70>
    2c9a:	f8 94       	cli
    2c9c:	8f ef       	ldi	r24, 0xFF	; 255
    2c9e:	9f ef       	ldi	r25, 0xFF	; 255
    2ca0:	dc 01       	movw	r26, r24
    2ca2:	80 93 3b 19 	sts	0x193B, r24	; 0x80193b <xNextTaskUnblockTime>
    2ca6:	90 93 3c 19 	sts	0x193C, r25	; 0x80193c <xNextTaskUnblockTime+0x1>
    2caa:	a0 93 3d 19 	sts	0x193D, r26	; 0x80193d <xNextTaskUnblockTime+0x2>
    2cae:	b0 93 3e 19 	sts	0x193E, r27	; 0x80193e <xNextTaskUnblockTime+0x3>
    2cb2:	81 e0       	ldi	r24, 0x01	; 1
    2cb4:	80 93 43 19 	sts	0x1943, r24	; 0x801943 <xSchedulerRunning>
    2cb8:	10 92 45 19 	sts	0x1945, r1	; 0x801945 <xTickCount>
    2cbc:	10 92 46 19 	sts	0x1946, r1	; 0x801946 <xTickCount+0x1>
    2cc0:	10 92 47 19 	sts	0x1947, r1	; 0x801947 <xTickCount+0x2>
    2cc4:	10 92 48 19 	sts	0x1948, r1	; 0x801948 <xTickCount+0x3>
    2cc8:	e0 91 b2 19 	lds	r30, 0x19B2	; 0x8019b2 <pxCurrentTCB>
    2ccc:	f0 91 b3 19 	lds	r31, 0x19B3	; 0x8019b3 <pxCurrentTCB+0x1>
    2cd0:	81 a5       	ldd	r24, Z+41	; 0x29
    2cd2:	0e 94 19 09 	call	0x1232	; 0x1232 <task_switch_in>
    2cd6:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <xPortStartScheduler>
    2cda:	0f 91       	pop	r16
    2cdc:	ff 90       	pop	r15
    2cde:	ef 90       	pop	r14
    2ce0:	08 95       	ret

00002ce2 <vTaskSuspendAll>:
    2ce2:	80 91 38 19 	lds	r24, 0x1938	; 0x801938 <uxSchedulerSuspended>
    2ce6:	8f 5f       	subi	r24, 0xFF	; 255
    2ce8:	80 93 38 19 	sts	0x1938, r24	; 0x801938 <uxSchedulerSuspended>
    2cec:	08 95       	ret

00002cee <xTaskGetTickCount>:
    2cee:	0f b6       	in	r0, 0x3f	; 63
    2cf0:	f8 94       	cli
    2cf2:	0f 92       	push	r0
    2cf4:	60 91 45 19 	lds	r22, 0x1945	; 0x801945 <xTickCount>
    2cf8:	70 91 46 19 	lds	r23, 0x1946	; 0x801946 <xTickCount+0x1>
    2cfc:	80 91 47 19 	lds	r24, 0x1947	; 0x801947 <xTickCount+0x2>
    2d00:	90 91 48 19 	lds	r25, 0x1948	; 0x801948 <xTickCount+0x3>
    2d04:	0f 90       	pop	r0
    2d06:	0f be       	out	0x3f, r0	; 63
    2d08:	08 95       	ret

00002d0a <xTaskIncrementTick>:
    2d0a:	9f 92       	push	r9
    2d0c:	af 92       	push	r10
    2d0e:	bf 92       	push	r11
    2d10:	cf 92       	push	r12
    2d12:	df 92       	push	r13
    2d14:	ef 92       	push	r14
    2d16:	ff 92       	push	r15
    2d18:	0f 93       	push	r16
    2d1a:	1f 93       	push	r17
    2d1c:	cf 93       	push	r28
    2d1e:	df 93       	push	r29
    2d20:	80 91 38 19 	lds	r24, 0x1938	; 0x801938 <uxSchedulerSuspended>
    2d24:	81 11       	cpse	r24, r1
    2d26:	ad c0       	rjmp	.+346    	; 0x2e82 <xTaskIncrementTick+0x178>
    2d28:	c0 90 45 19 	lds	r12, 0x1945	; 0x801945 <xTickCount>
    2d2c:	d0 90 46 19 	lds	r13, 0x1946	; 0x801946 <xTickCount+0x1>
    2d30:	e0 90 47 19 	lds	r14, 0x1947	; 0x801947 <xTickCount+0x2>
    2d34:	f0 90 48 19 	lds	r15, 0x1948	; 0x801948 <xTickCount+0x3>
    2d38:	8f ef       	ldi	r24, 0xFF	; 255
    2d3a:	c8 1a       	sub	r12, r24
    2d3c:	d8 0a       	sbc	r13, r24
    2d3e:	e8 0a       	sbc	r14, r24
    2d40:	f8 0a       	sbc	r15, r24
    2d42:	c0 92 45 19 	sts	0x1945, r12	; 0x801945 <xTickCount>
    2d46:	d0 92 46 19 	sts	0x1946, r13	; 0x801946 <xTickCount+0x1>
    2d4a:	e0 92 47 19 	sts	0x1947, r14	; 0x801947 <xTickCount+0x2>
    2d4e:	f0 92 48 19 	sts	0x1948, r15	; 0x801948 <xTickCount+0x3>
    2d52:	c1 14       	cp	r12, r1
    2d54:	d1 04       	cpc	r13, r1
    2d56:	e1 04       	cpc	r14, r1
    2d58:	f1 04       	cpc	r15, r1
    2d5a:	b1 f4       	brne	.+44     	; 0x2d88 <xTaskIncrementTick+0x7e>
    2d5c:	80 91 6e 19 	lds	r24, 0x196E	; 0x80196e <pxDelayedTaskList>
    2d60:	90 91 6f 19 	lds	r25, 0x196F	; 0x80196f <pxDelayedTaskList+0x1>
    2d64:	20 91 6c 19 	lds	r18, 0x196C	; 0x80196c <pxOverflowDelayedTaskList>
    2d68:	30 91 6d 19 	lds	r19, 0x196D	; 0x80196d <pxOverflowDelayedTaskList+0x1>
    2d6c:	30 93 6f 19 	sts	0x196F, r19	; 0x80196f <pxDelayedTaskList+0x1>
    2d70:	20 93 6e 19 	sts	0x196E, r18	; 0x80196e <pxDelayedTaskList>
    2d74:	90 93 6d 19 	sts	0x196D, r25	; 0x80196d <pxOverflowDelayedTaskList+0x1>
    2d78:	80 93 6c 19 	sts	0x196C, r24	; 0x80196c <pxOverflowDelayedTaskList>
    2d7c:	80 91 40 19 	lds	r24, 0x1940	; 0x801940 <xNumOfOverflows>
    2d80:	8f 5f       	subi	r24, 0xFF	; 255
    2d82:	80 93 40 19 	sts	0x1940, r24	; 0x801940 <xNumOfOverflows>
    2d86:	b1 dd       	rcall	.-1182   	; 0x28ea <prvResetNextTaskUnblockTime>
    2d88:	80 91 3b 19 	lds	r24, 0x193B	; 0x80193b <xNextTaskUnblockTime>
    2d8c:	90 91 3c 19 	lds	r25, 0x193C	; 0x80193c <xNextTaskUnblockTime+0x1>
    2d90:	a0 91 3d 19 	lds	r26, 0x193D	; 0x80193d <xNextTaskUnblockTime+0x2>
    2d94:	b0 91 3e 19 	lds	r27, 0x193E	; 0x80193e <xNextTaskUnblockTime+0x3>
    2d98:	c8 16       	cp	r12, r24
    2d9a:	d9 06       	cpc	r13, r25
    2d9c:	ea 06       	cpc	r14, r26
    2d9e:	fb 06       	cpc	r15, r27
    2da0:	10 f4       	brcc	.+4      	; 0x2da6 <xTaskIncrementTick+0x9c>
    2da2:	b1 2c       	mov	r11, r1
    2da4:	5d c0       	rjmp	.+186    	; 0x2e60 <xTaskIncrementTick+0x156>
    2da6:	b1 2c       	mov	r11, r1
    2da8:	0f 2e       	mov	r0, r31
    2daa:	fb e0       	ldi	r31, 0x0B	; 11
    2dac:	af 2e       	mov	r10, r31
    2dae:	f0 2d       	mov	r31, r0
    2db0:	99 24       	eor	r9, r9
    2db2:	93 94       	inc	r9
    2db4:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <pxDelayedTaskList>
    2db8:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <pxDelayedTaskList+0x1>
    2dbc:	80 81       	ld	r24, Z
    2dbe:	81 11       	cpse	r24, r1
    2dc0:	0c c0       	rjmp	.+24     	; 0x2dda <xTaskIncrementTick+0xd0>
    2dc2:	8f ef       	ldi	r24, 0xFF	; 255
    2dc4:	9f ef       	ldi	r25, 0xFF	; 255
    2dc6:	dc 01       	movw	r26, r24
    2dc8:	80 93 3b 19 	sts	0x193B, r24	; 0x80193b <xNextTaskUnblockTime>
    2dcc:	90 93 3c 19 	sts	0x193C, r25	; 0x80193c <xNextTaskUnblockTime+0x1>
    2dd0:	a0 93 3d 19 	sts	0x193D, r26	; 0x80193d <xNextTaskUnblockTime+0x2>
    2dd4:	b0 93 3e 19 	sts	0x193E, r27	; 0x80193e <xNextTaskUnblockTime+0x3>
    2dd8:	43 c0       	rjmp	.+134    	; 0x2e60 <xTaskIncrementTick+0x156>
    2dda:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <pxDelayedTaskList>
    2dde:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <pxDelayedTaskList+0x1>
    2de2:	07 80       	ldd	r0, Z+7	; 0x07
    2de4:	f0 85       	ldd	r31, Z+8	; 0x08
    2de6:	e0 2d       	mov	r30, r0
    2de8:	c0 85       	ldd	r28, Z+8	; 0x08
    2dea:	d1 85       	ldd	r29, Z+9	; 0x09
    2dec:	8a 81       	ldd	r24, Y+2	; 0x02
    2dee:	9b 81       	ldd	r25, Y+3	; 0x03
    2df0:	ac 81       	ldd	r26, Y+4	; 0x04
    2df2:	bd 81       	ldd	r27, Y+5	; 0x05
    2df4:	c8 16       	cp	r12, r24
    2df6:	d9 06       	cpc	r13, r25
    2df8:	ea 06       	cpc	r14, r26
    2dfa:	fb 06       	cpc	r15, r27
    2dfc:	48 f4       	brcc	.+18     	; 0x2e10 <xTaskIncrementTick+0x106>
    2dfe:	80 93 3b 19 	sts	0x193B, r24	; 0x80193b <xNextTaskUnblockTime>
    2e02:	90 93 3c 19 	sts	0x193C, r25	; 0x80193c <xNextTaskUnblockTime+0x1>
    2e06:	a0 93 3d 19 	sts	0x193D, r26	; 0x80193d <xNextTaskUnblockTime+0x2>
    2e0a:	b0 93 3e 19 	sts	0x193E, r27	; 0x80193e <xNextTaskUnblockTime+0x3>
    2e0e:	28 c0       	rjmp	.+80     	; 0x2e60 <xTaskIncrementTick+0x156>
    2e10:	8e 01       	movw	r16, r28
    2e12:	0e 5f       	subi	r16, 0xFE	; 254
    2e14:	1f 4f       	sbci	r17, 0xFF	; 255
    2e16:	c8 01       	movw	r24, r16
    2e18:	0e 94 3f 0c 	call	0x187e	; 0x187e <uxListRemove>
    2e1c:	88 8d       	ldd	r24, Y+24	; 0x18
    2e1e:	99 8d       	ldd	r25, Y+25	; 0x19
    2e20:	89 2b       	or	r24, r25
    2e22:	21 f0       	breq	.+8      	; 0x2e2c <xTaskIncrementTick+0x122>
    2e24:	ce 01       	movw	r24, r28
    2e26:	0e 96       	adiw	r24, 0x0e	; 14
    2e28:	0e 94 3f 0c 	call	0x187e	; 0x187e <uxListRemove>
    2e2c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2e2e:	90 91 44 19 	lds	r25, 0x1944	; 0x801944 <uxTopReadyPriority>
    2e32:	98 17       	cp	r25, r24
    2e34:	10 f4       	brcc	.+4      	; 0x2e3a <xTaskIncrementTick+0x130>
    2e36:	80 93 44 19 	sts	0x1944, r24	; 0x801944 <uxTopReadyPriority>
    2e3a:	a8 9e       	mul	r10, r24
    2e3c:	c0 01       	movw	r24, r0
    2e3e:	11 24       	eor	r1, r1
    2e40:	b8 01       	movw	r22, r16
    2e42:	8a 57       	subi	r24, 0x7A	; 122
    2e44:	96 4e       	sbci	r25, 0xE6	; 230
    2e46:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <vListInsertEnd>
    2e4a:	e0 91 b2 19 	lds	r30, 0x19B2	; 0x8019b2 <pxCurrentTCB>
    2e4e:	f0 91 b3 19 	lds	r31, 0x19B3	; 0x8019b3 <pxCurrentTCB+0x1>
    2e52:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2e54:	82 8d       	ldd	r24, Z+26	; 0x1a
    2e56:	98 17       	cp	r25, r24
    2e58:	08 f4       	brcc	.+2      	; 0x2e5c <xTaskIncrementTick+0x152>
    2e5a:	ac cf       	rjmp	.-168    	; 0x2db4 <xTaskIncrementTick+0xaa>
    2e5c:	b9 2c       	mov	r11, r9
    2e5e:	aa cf       	rjmp	.-172    	; 0x2db4 <xTaskIncrementTick+0xaa>
    2e60:	e0 91 b2 19 	lds	r30, 0x19B2	; 0x8019b2 <pxCurrentTCB>
    2e64:	f0 91 b3 19 	lds	r31, 0x19B3	; 0x8019b3 <pxCurrentTCB+0x1>
    2e68:	e2 8d       	ldd	r30, Z+26	; 0x1a
    2e6a:	8b e0       	ldi	r24, 0x0B	; 11
    2e6c:	e8 9f       	mul	r30, r24
    2e6e:	f0 01       	movw	r30, r0
    2e70:	11 24       	eor	r1, r1
    2e72:	ea 57       	subi	r30, 0x7A	; 122
    2e74:	f6 4e       	sbci	r31, 0xE6	; 230
    2e76:	80 81       	ld	r24, Z
    2e78:	82 30       	cpi	r24, 0x02	; 2
    2e7a:	48 f0       	brcs	.+18     	; 0x2e8e <xTaskIncrementTick+0x184>
    2e7c:	bb 24       	eor	r11, r11
    2e7e:	b3 94       	inc	r11
    2e80:	06 c0       	rjmp	.+12     	; 0x2e8e <xTaskIncrementTick+0x184>
    2e82:	80 91 42 19 	lds	r24, 0x1942	; 0x801942 <uxPendedTicks>
    2e86:	8f 5f       	subi	r24, 0xFF	; 255
    2e88:	80 93 42 19 	sts	0x1942, r24	; 0x801942 <uxPendedTicks>
    2e8c:	b1 2c       	mov	r11, r1
    2e8e:	80 91 41 19 	lds	r24, 0x1941	; 0x801941 <xYieldPending>
    2e92:	88 23       	and	r24, r24
    2e94:	11 f0       	breq	.+4      	; 0x2e9a <xTaskIncrementTick+0x190>
    2e96:	bb 24       	eor	r11, r11
    2e98:	b3 94       	inc	r11
    2e9a:	8b 2d       	mov	r24, r11
    2e9c:	df 91       	pop	r29
    2e9e:	cf 91       	pop	r28
    2ea0:	1f 91       	pop	r17
    2ea2:	0f 91       	pop	r16
    2ea4:	ff 90       	pop	r15
    2ea6:	ef 90       	pop	r14
    2ea8:	df 90       	pop	r13
    2eaa:	cf 90       	pop	r12
    2eac:	bf 90       	pop	r11
    2eae:	af 90       	pop	r10
    2eb0:	9f 90       	pop	r9
    2eb2:	08 95       	ret

00002eb4 <xTaskResumeAll>:
    2eb4:	cf 92       	push	r12
    2eb6:	df 92       	push	r13
    2eb8:	ef 92       	push	r14
    2eba:	ff 92       	push	r15
    2ebc:	0f 93       	push	r16
    2ebe:	1f 93       	push	r17
    2ec0:	cf 93       	push	r28
    2ec2:	df 93       	push	r29
    2ec4:	0f b6       	in	r0, 0x3f	; 63
    2ec6:	f8 94       	cli
    2ec8:	0f 92       	push	r0
    2eca:	80 91 38 19 	lds	r24, 0x1938	; 0x801938 <uxSchedulerSuspended>
    2ece:	81 50       	subi	r24, 0x01	; 1
    2ed0:	80 93 38 19 	sts	0x1938, r24	; 0x801938 <uxSchedulerSuspended>
    2ed4:	80 91 38 19 	lds	r24, 0x1938	; 0x801938 <uxSchedulerSuspended>
    2ed8:	81 11       	cpse	r24, r1
    2eda:	5a c0       	rjmp	.+180    	; 0x2f90 <xTaskResumeAll+0xdc>
    2edc:	80 91 49 19 	lds	r24, 0x1949	; 0x801949 <uxCurrentNumberOfTasks>
    2ee0:	81 11       	cpse	r24, r1
    2ee2:	2c c0       	rjmp	.+88     	; 0x2f3c <xTaskResumeAll+0x88>
    2ee4:	58 c0       	rjmp	.+176    	; 0x2f96 <xTaskResumeAll+0xe2>
    2ee6:	d7 01       	movw	r26, r14
    2ee8:	17 96       	adiw	r26, 0x07	; 7
    2eea:	ed 91       	ld	r30, X+
    2eec:	fc 91       	ld	r31, X
    2eee:	18 97       	sbiw	r26, 0x08	; 8
    2ef0:	c0 85       	ldd	r28, Z+8	; 0x08
    2ef2:	d1 85       	ldd	r29, Z+9	; 0x09
    2ef4:	ce 01       	movw	r24, r28
    2ef6:	0e 96       	adiw	r24, 0x0e	; 14
    2ef8:	0e 94 3f 0c 	call	0x187e	; 0x187e <uxListRemove>
    2efc:	8e 01       	movw	r16, r28
    2efe:	0e 5f       	subi	r16, 0xFE	; 254
    2f00:	1f 4f       	sbci	r17, 0xFF	; 255
    2f02:	c8 01       	movw	r24, r16
    2f04:	0e 94 3f 0c 	call	0x187e	; 0x187e <uxListRemove>
    2f08:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2f0a:	90 91 44 19 	lds	r25, 0x1944	; 0x801944 <uxTopReadyPriority>
    2f0e:	98 17       	cp	r25, r24
    2f10:	10 f4       	brcc	.+4      	; 0x2f16 <xTaskResumeAll+0x62>
    2f12:	80 93 44 19 	sts	0x1944, r24	; 0x801944 <uxTopReadyPriority>
    2f16:	d8 9e       	mul	r13, r24
    2f18:	c0 01       	movw	r24, r0
    2f1a:	11 24       	eor	r1, r1
    2f1c:	b8 01       	movw	r22, r16
    2f1e:	8a 57       	subi	r24, 0x7A	; 122
    2f20:	96 4e       	sbci	r25, 0xE6	; 230
    2f22:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <vListInsertEnd>
    2f26:	e0 91 b2 19 	lds	r30, 0x19B2	; 0x8019b2 <pxCurrentTCB>
    2f2a:	f0 91 b3 19 	lds	r31, 0x19B3	; 0x8019b3 <pxCurrentTCB+0x1>
    2f2e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2f30:	82 8d       	ldd	r24, Z+26	; 0x1a
    2f32:	98 17       	cp	r25, r24
    2f34:	88 f0       	brcs	.+34     	; 0x2f58 <xTaskResumeAll+0xa4>
    2f36:	c0 92 41 19 	sts	0x1941, r12	; 0x801941 <xYieldPending>
    2f3a:	0e c0       	rjmp	.+28     	; 0x2f58 <xTaskResumeAll+0xa4>
    2f3c:	c0 e0       	ldi	r28, 0x00	; 0
    2f3e:	d0 e0       	ldi	r29, 0x00	; 0
    2f40:	0f 2e       	mov	r0, r31
    2f42:	f1 e6       	ldi	r31, 0x61	; 97
    2f44:	ef 2e       	mov	r14, r31
    2f46:	f9 e1       	ldi	r31, 0x19	; 25
    2f48:	ff 2e       	mov	r15, r31
    2f4a:	f0 2d       	mov	r31, r0
    2f4c:	0f 2e       	mov	r0, r31
    2f4e:	fb e0       	ldi	r31, 0x0B	; 11
    2f50:	df 2e       	mov	r13, r31
    2f52:	f0 2d       	mov	r31, r0
    2f54:	cc 24       	eor	r12, r12
    2f56:	c3 94       	inc	r12
    2f58:	f7 01       	movw	r30, r14
    2f5a:	80 81       	ld	r24, Z
    2f5c:	81 11       	cpse	r24, r1
    2f5e:	c3 cf       	rjmp	.-122    	; 0x2ee6 <xTaskResumeAll+0x32>
    2f60:	cd 2b       	or	r28, r29
    2f62:	09 f0       	breq	.+2      	; 0x2f66 <xTaskResumeAll+0xb2>
    2f64:	c2 dc       	rcall	.-1660   	; 0x28ea <prvResetNextTaskUnblockTime>
    2f66:	c0 91 42 19 	lds	r28, 0x1942	; 0x801942 <uxPendedTicks>
    2f6a:	cc 23       	and	r28, r28
    2f6c:	49 f0       	breq	.+18     	; 0x2f80 <xTaskResumeAll+0xcc>
    2f6e:	d1 e0       	ldi	r29, 0x01	; 1
    2f70:	cc de       	rcall	.-616    	; 0x2d0a <xTaskIncrementTick>
    2f72:	81 11       	cpse	r24, r1
    2f74:	d0 93 41 19 	sts	0x1941, r29	; 0x801941 <xYieldPending>
    2f78:	c1 50       	subi	r28, 0x01	; 1
    2f7a:	d1 f7       	brne	.-12     	; 0x2f70 <xTaskResumeAll+0xbc>
    2f7c:	10 92 42 19 	sts	0x1942, r1	; 0x801942 <uxPendedTicks>
    2f80:	80 91 41 19 	lds	r24, 0x1941	; 0x801941 <xYieldPending>
    2f84:	88 23       	and	r24, r24
    2f86:	31 f0       	breq	.+12     	; 0x2f94 <xTaskResumeAll+0xe0>
    2f88:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <vPortYield>
    2f8c:	81 e0       	ldi	r24, 0x01	; 1
    2f8e:	03 c0       	rjmp	.+6      	; 0x2f96 <xTaskResumeAll+0xe2>
    2f90:	80 e0       	ldi	r24, 0x00	; 0
    2f92:	01 c0       	rjmp	.+2      	; 0x2f96 <xTaskResumeAll+0xe2>
    2f94:	80 e0       	ldi	r24, 0x00	; 0
    2f96:	0f 90       	pop	r0
    2f98:	0f be       	out	0x3f, r0	; 63
    2f9a:	df 91       	pop	r29
    2f9c:	cf 91       	pop	r28
    2f9e:	1f 91       	pop	r17
    2fa0:	0f 91       	pop	r16
    2fa2:	ff 90       	pop	r15
    2fa4:	ef 90       	pop	r14
    2fa6:	df 90       	pop	r13
    2fa8:	cf 90       	pop	r12
    2faa:	08 95       	ret

00002fac <vTaskDelay>:
    2fac:	cf 92       	push	r12
    2fae:	df 92       	push	r13
    2fb0:	ef 92       	push	r14
    2fb2:	ff 92       	push	r15
    2fb4:	6b 01       	movw	r12, r22
    2fb6:	7c 01       	movw	r14, r24
    2fb8:	67 2b       	or	r22, r23
    2fba:	68 2b       	or	r22, r24
    2fbc:	69 2b       	or	r22, r25
    2fbe:	41 f0       	breq	.+16     	; 0x2fd0 <vTaskDelay+0x24>
    2fc0:	90 de       	rcall	.-736    	; 0x2ce2 <vTaskSuspendAll>
    2fc2:	40 e0       	ldi	r20, 0x00	; 0
    2fc4:	c7 01       	movw	r24, r14
    2fc6:	b6 01       	movw	r22, r12
    2fc8:	ba dc       	rcall	.-1676   	; 0x293e <prvAddCurrentTaskToDelayedList>
    2fca:	74 df       	rcall	.-280    	; 0x2eb4 <xTaskResumeAll>
    2fcc:	81 11       	cpse	r24, r1
    2fce:	02 c0       	rjmp	.+4      	; 0x2fd4 <vTaskDelay+0x28>
    2fd0:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <vPortYield>
    2fd4:	ff 90       	pop	r15
    2fd6:	ef 90       	pop	r14
    2fd8:	df 90       	pop	r13
    2fda:	cf 90       	pop	r12
    2fdc:	08 95       	ret

00002fde <vTaskSwitchContext>:
    2fde:	80 91 38 19 	lds	r24, 0x1938	; 0x801938 <uxSchedulerSuspended>
    2fe2:	88 23       	and	r24, r24
    2fe4:	21 f0       	breq	.+8      	; 0x2fee <vTaskSwitchContext+0x10>
    2fe6:	81 e0       	ldi	r24, 0x01	; 1
    2fe8:	80 93 41 19 	sts	0x1941, r24	; 0x801941 <xYieldPending>
    2fec:	08 95       	ret
    2fee:	10 92 41 19 	sts	0x1941, r1	; 0x801941 <xYieldPending>
    2ff2:	e0 91 b2 19 	lds	r30, 0x19B2	; 0x8019b2 <pxCurrentTCB>
    2ff6:	f0 91 b3 19 	lds	r31, 0x19B3	; 0x8019b3 <pxCurrentTCB+0x1>
    2ffa:	81 a5       	ldd	r24, Z+41	; 0x29
    2ffc:	0e 94 23 09 	call	0x1246	; 0x1246 <task_switch_out>
    3000:	a0 91 b2 19 	lds	r26, 0x19B2	; 0x8019b2 <pxCurrentTCB>
    3004:	b0 91 b3 19 	lds	r27, 0x19B3	; 0x8019b3 <pxCurrentTCB+0x1>
    3008:	e0 91 b2 19 	lds	r30, 0x19B2	; 0x8019b2 <pxCurrentTCB>
    300c:	f0 91 b3 19 	lds	r31, 0x19B3	; 0x8019b3 <pxCurrentTCB+0x1>
    3010:	2d 91       	ld	r18, X+
    3012:	3c 91       	ld	r19, X
    3014:	83 8d       	ldd	r24, Z+27	; 0x1b
    3016:	94 8d       	ldd	r25, Z+28	; 0x1c
    3018:	82 17       	cp	r24, r18
    301a:	93 07       	cpc	r25, r19
    301c:	58 f0       	brcs	.+22     	; 0x3034 <vTaskSwitchContext+0x56>
    301e:	60 91 b2 19 	lds	r22, 0x19B2	; 0x8019b2 <pxCurrentTCB>
    3022:	70 91 b3 19 	lds	r23, 0x19B3	; 0x8019b3 <pxCurrentTCB+0x1>
    3026:	80 91 b2 19 	lds	r24, 0x19B2	; 0x8019b2 <pxCurrentTCB>
    302a:	90 91 b3 19 	lds	r25, 0x19B3	; 0x8019b3 <pxCurrentTCB+0x1>
    302e:	63 5e       	subi	r22, 0xE3	; 227
    3030:	7f 4f       	sbci	r23, 0xFF	; 255
    3032:	20 d6       	rcall	.+3136   	; 0x3c74 <vApplicationStackOverflowHook>
    3034:	80 91 44 19 	lds	r24, 0x1944	; 0x801944 <uxTopReadyPriority>
    3038:	28 2f       	mov	r18, r24
    303a:	30 e0       	ldi	r19, 0x00	; 0
    303c:	9b e0       	ldi	r25, 0x0B	; 11
    303e:	89 9f       	mul	r24, r25
    3040:	f0 01       	movw	r30, r0
    3042:	11 24       	eor	r1, r1
    3044:	ea 57       	subi	r30, 0x7A	; 122
    3046:	f6 4e       	sbci	r31, 0xE6	; 230
    3048:	90 81       	ld	r25, Z
    304a:	91 11       	cpse	r25, r1
    304c:	0e c0       	rjmp	.+28     	; 0x306a <vTaskSwitchContext+0x8c>
    304e:	4b e0       	ldi	r20, 0x0B	; 11
    3050:	81 50       	subi	r24, 0x01	; 1
    3052:	28 2f       	mov	r18, r24
    3054:	30 e0       	ldi	r19, 0x00	; 0
    3056:	42 9f       	mul	r20, r18
    3058:	f0 01       	movw	r30, r0
    305a:	43 9f       	mul	r20, r19
    305c:	f0 0d       	add	r31, r0
    305e:	11 24       	eor	r1, r1
    3060:	ea 57       	subi	r30, 0x7A	; 122
    3062:	f6 4e       	sbci	r31, 0xE6	; 230
    3064:	90 81       	ld	r25, Z
    3066:	99 23       	and	r25, r25
    3068:	99 f3       	breq	.-26     	; 0x3050 <vTaskSwitchContext+0x72>
    306a:	9b e0       	ldi	r25, 0x0B	; 11
    306c:	92 9f       	mul	r25, r18
    306e:	a0 01       	movw	r20, r0
    3070:	93 9f       	mul	r25, r19
    3072:	50 0d       	add	r21, r0
    3074:	11 24       	eor	r1, r1
    3076:	da 01       	movw	r26, r20
    3078:	aa 57       	subi	r26, 0x7A	; 122
    307a:	b6 4e       	sbci	r27, 0xE6	; 230
    307c:	11 96       	adiw	r26, 0x01	; 1
    307e:	ed 91       	ld	r30, X+
    3080:	fc 91       	ld	r31, X
    3082:	12 97       	sbiw	r26, 0x02	; 2
    3084:	04 80       	ldd	r0, Z+4	; 0x04
    3086:	f5 81       	ldd	r31, Z+5	; 0x05
    3088:	e0 2d       	mov	r30, r0
    308a:	12 96       	adiw	r26, 0x02	; 2
    308c:	fc 93       	st	X, r31
    308e:	ee 93       	st	-X, r30
    3090:	11 97       	sbiw	r26, 0x01	; 1
    3092:	47 57       	subi	r20, 0x77	; 119
    3094:	56 4e       	sbci	r21, 0xE6	; 230
    3096:	e4 17       	cp	r30, r20
    3098:	f5 07       	cpc	r31, r21
    309a:	29 f4       	brne	.+10     	; 0x30a6 <vTaskSwitchContext+0xc8>
    309c:	44 81       	ldd	r20, Z+4	; 0x04
    309e:	55 81       	ldd	r21, Z+5	; 0x05
    30a0:	fd 01       	movw	r30, r26
    30a2:	52 83       	std	Z+2, r21	; 0x02
    30a4:	41 83       	std	Z+1, r20	; 0x01
    30a6:	9b e0       	ldi	r25, 0x0B	; 11
    30a8:	92 9f       	mul	r25, r18
    30aa:	f0 01       	movw	r30, r0
    30ac:	93 9f       	mul	r25, r19
    30ae:	f0 0d       	add	r31, r0
    30b0:	11 24       	eor	r1, r1
    30b2:	ea 57       	subi	r30, 0x7A	; 122
    30b4:	f6 4e       	sbci	r31, 0xE6	; 230
    30b6:	01 80       	ldd	r0, Z+1	; 0x01
    30b8:	f2 81       	ldd	r31, Z+2	; 0x02
    30ba:	e0 2d       	mov	r30, r0
    30bc:	20 85       	ldd	r18, Z+8	; 0x08
    30be:	31 85       	ldd	r19, Z+9	; 0x09
    30c0:	30 93 b3 19 	sts	0x19B3, r19	; 0x8019b3 <pxCurrentTCB+0x1>
    30c4:	20 93 b2 19 	sts	0x19B2, r18	; 0x8019b2 <pxCurrentTCB>
    30c8:	80 93 44 19 	sts	0x1944, r24	; 0x801944 <uxTopReadyPriority>
    30cc:	e0 91 b2 19 	lds	r30, 0x19B2	; 0x8019b2 <pxCurrentTCB>
    30d0:	f0 91 b3 19 	lds	r31, 0x19B3	; 0x8019b3 <pxCurrentTCB+0x1>
    30d4:	81 a5       	ldd	r24, Z+41	; 0x29
    30d6:	0c 94 19 09 	jmp	0x1232	; 0x1232 <task_switch_in>
    30da:	08 95       	ret

000030dc <vTaskPlaceOnEventList>:
    30dc:	cf 92       	push	r12
    30de:	df 92       	push	r13
    30e0:	ef 92       	push	r14
    30e2:	ff 92       	push	r15
    30e4:	6a 01       	movw	r12, r20
    30e6:	7b 01       	movw	r14, r22
    30e8:	60 91 b2 19 	lds	r22, 0x19B2	; 0x8019b2 <pxCurrentTCB>
    30ec:	70 91 b3 19 	lds	r23, 0x19B3	; 0x8019b3 <pxCurrentTCB+0x1>
    30f0:	62 5f       	subi	r22, 0xF2	; 242
    30f2:	7f 4f       	sbci	r23, 0xFF	; 255
    30f4:	0e 94 02 0c 	call	0x1804	; 0x1804 <vListInsert>
    30f8:	41 e0       	ldi	r20, 0x01	; 1
    30fa:	c7 01       	movw	r24, r14
    30fc:	b6 01       	movw	r22, r12
    30fe:	1f dc       	rcall	.-1986   	; 0x293e <prvAddCurrentTaskToDelayedList>
    3100:	ff 90       	pop	r15
    3102:	ef 90       	pop	r14
    3104:	df 90       	pop	r13
    3106:	cf 90       	pop	r12
    3108:	08 95       	ret

0000310a <vTaskPlaceOnUnorderedEventList>:
    310a:	cf 92       	push	r12
    310c:	df 92       	push	r13
    310e:	ef 92       	push	r14
    3110:	ff 92       	push	r15
    3112:	0f 93       	push	r16
    3114:	1f 93       	push	r17
    3116:	68 01       	movw	r12, r16
    3118:	79 01       	movw	r14, r18
    311a:	e0 91 b2 19 	lds	r30, 0x19B2	; 0x8019b2 <pxCurrentTCB>
    311e:	f0 91 b3 19 	lds	r31, 0x19B3	; 0x8019b3 <pxCurrentTCB+0x1>
    3122:	70 68       	ori	r23, 0x80	; 128
    3124:	46 87       	std	Z+14, r20	; 0x0e
    3126:	57 87       	std	Z+15, r21	; 0x0f
    3128:	60 8b       	std	Z+16, r22	; 0x10
    312a:	71 8b       	std	Z+17, r23	; 0x11
    312c:	60 91 b2 19 	lds	r22, 0x19B2	; 0x8019b2 <pxCurrentTCB>
    3130:	70 91 b3 19 	lds	r23, 0x19B3	; 0x8019b3 <pxCurrentTCB+0x1>
    3134:	62 5f       	subi	r22, 0xF2	; 242
    3136:	7f 4f       	sbci	r23, 0xFF	; 255
    3138:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <vListInsertEnd>
    313c:	41 e0       	ldi	r20, 0x01	; 1
    313e:	c7 01       	movw	r24, r14
    3140:	b6 01       	movw	r22, r12
    3142:	fd db       	rcall	.-2054   	; 0x293e <prvAddCurrentTaskToDelayedList>
    3144:	1f 91       	pop	r17
    3146:	0f 91       	pop	r16
    3148:	ff 90       	pop	r15
    314a:	ef 90       	pop	r14
    314c:	df 90       	pop	r13
    314e:	cf 90       	pop	r12
    3150:	08 95       	ret

00003152 <vTaskPlaceOnEventListRestricted>:
    3152:	cf 92       	push	r12
    3154:	df 92       	push	r13
    3156:	ef 92       	push	r14
    3158:	ff 92       	push	r15
    315a:	cf 93       	push	r28
    315c:	6a 01       	movw	r12, r20
    315e:	7b 01       	movw	r14, r22
    3160:	c2 2f       	mov	r28, r18
    3162:	60 91 b2 19 	lds	r22, 0x19B2	; 0x8019b2 <pxCurrentTCB>
    3166:	70 91 b3 19 	lds	r23, 0x19B3	; 0x8019b3 <pxCurrentTCB+0x1>
    316a:	62 5f       	subi	r22, 0xF2	; 242
    316c:	7f 4f       	sbci	r23, 0xFF	; 255
    316e:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <vListInsertEnd>
    3172:	cc 23       	and	r28, r28
    3174:	21 f0       	breq	.+8      	; 0x317e <vTaskPlaceOnEventListRestricted+0x2c>
    3176:	cc 24       	eor	r12, r12
    3178:	ca 94       	dec	r12
    317a:	dc 2c       	mov	r13, r12
    317c:	76 01       	movw	r14, r12
    317e:	4c 2f       	mov	r20, r28
    3180:	c7 01       	movw	r24, r14
    3182:	b6 01       	movw	r22, r12
    3184:	dc db       	rcall	.-2120   	; 0x293e <prvAddCurrentTaskToDelayedList>
    3186:	cf 91       	pop	r28
    3188:	ff 90       	pop	r15
    318a:	ef 90       	pop	r14
    318c:	df 90       	pop	r13
    318e:	cf 90       	pop	r12
    3190:	08 95       	ret

00003192 <xTaskRemoveFromEventList>:
    3192:	0f 93       	push	r16
    3194:	1f 93       	push	r17
    3196:	cf 93       	push	r28
    3198:	df 93       	push	r29
    319a:	dc 01       	movw	r26, r24
    319c:	17 96       	adiw	r26, 0x07	; 7
    319e:	ed 91       	ld	r30, X+
    31a0:	fc 91       	ld	r31, X
    31a2:	18 97       	sbiw	r26, 0x08	; 8
    31a4:	c0 85       	ldd	r28, Z+8	; 0x08
    31a6:	d1 85       	ldd	r29, Z+9	; 0x09
    31a8:	8e 01       	movw	r16, r28
    31aa:	02 5f       	subi	r16, 0xF2	; 242
    31ac:	1f 4f       	sbci	r17, 0xFF	; 255
    31ae:	c8 01       	movw	r24, r16
    31b0:	0e 94 3f 0c 	call	0x187e	; 0x187e <uxListRemove>
    31b4:	80 91 38 19 	lds	r24, 0x1938	; 0x801938 <uxSchedulerSuspended>
    31b8:	81 11       	cpse	r24, r1
    31ba:	16 c0       	rjmp	.+44     	; 0x31e8 <xTaskRemoveFromEventList+0x56>
    31bc:	0c 50       	subi	r16, 0x0C	; 12
    31be:	11 09       	sbc	r17, r1
    31c0:	c8 01       	movw	r24, r16
    31c2:	0e 94 3f 0c 	call	0x187e	; 0x187e <uxListRemove>
    31c6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    31c8:	90 91 44 19 	lds	r25, 0x1944	; 0x801944 <uxTopReadyPriority>
    31cc:	98 17       	cp	r25, r24
    31ce:	10 f4       	brcc	.+4      	; 0x31d4 <xTaskRemoveFromEventList+0x42>
    31d0:	80 93 44 19 	sts	0x1944, r24	; 0x801944 <uxTopReadyPriority>
    31d4:	bb e0       	ldi	r27, 0x0B	; 11
    31d6:	8b 9f       	mul	r24, r27
    31d8:	c0 01       	movw	r24, r0
    31da:	11 24       	eor	r1, r1
    31dc:	b8 01       	movw	r22, r16
    31de:	8a 57       	subi	r24, 0x7A	; 122
    31e0:	96 4e       	sbci	r25, 0xE6	; 230
    31e2:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <vListInsertEnd>
    31e6:	05 c0       	rjmp	.+10     	; 0x31f2 <xTaskRemoveFromEventList+0x60>
    31e8:	b8 01       	movw	r22, r16
    31ea:	81 e6       	ldi	r24, 0x61	; 97
    31ec:	99 e1       	ldi	r25, 0x19	; 25
    31ee:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <vListInsertEnd>
    31f2:	e0 91 b2 19 	lds	r30, 0x19B2	; 0x8019b2 <pxCurrentTCB>
    31f6:	f0 91 b3 19 	lds	r31, 0x19B3	; 0x8019b3 <pxCurrentTCB+0x1>
    31fa:	9a 8d       	ldd	r25, Y+26	; 0x1a
    31fc:	82 8d       	ldd	r24, Z+26	; 0x1a
    31fe:	89 17       	cp	r24, r25
    3200:	20 f4       	brcc	.+8      	; 0x320a <xTaskRemoveFromEventList+0x78>
    3202:	81 e0       	ldi	r24, 0x01	; 1
    3204:	80 93 41 19 	sts	0x1941, r24	; 0x801941 <xYieldPending>
    3208:	01 c0       	rjmp	.+2      	; 0x320c <xTaskRemoveFromEventList+0x7a>
    320a:	80 e0       	ldi	r24, 0x00	; 0
    320c:	df 91       	pop	r29
    320e:	cf 91       	pop	r28
    3210:	1f 91       	pop	r17
    3212:	0f 91       	pop	r16
    3214:	08 95       	ret

00003216 <vTaskRemoveFromUnorderedEventList>:
    3216:	0f 93       	push	r16
    3218:	1f 93       	push	r17
    321a:	cf 93       	push	r28
    321c:	df 93       	push	r29
    321e:	70 68       	ori	r23, 0x80	; 128
    3220:	fc 01       	movw	r30, r24
    3222:	40 83       	st	Z, r20
    3224:	51 83       	std	Z+1, r21	; 0x01
    3226:	62 83       	std	Z+2, r22	; 0x02
    3228:	73 83       	std	Z+3, r23	; 0x03
    322a:	c0 85       	ldd	r28, Z+8	; 0x08
    322c:	d1 85       	ldd	r29, Z+9	; 0x09
    322e:	0e 94 3f 0c 	call	0x187e	; 0x187e <uxListRemove>
    3232:	8e 01       	movw	r16, r28
    3234:	0e 5f       	subi	r16, 0xFE	; 254
    3236:	1f 4f       	sbci	r17, 0xFF	; 255
    3238:	c8 01       	movw	r24, r16
    323a:	0e 94 3f 0c 	call	0x187e	; 0x187e <uxListRemove>
    323e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3240:	90 91 44 19 	lds	r25, 0x1944	; 0x801944 <uxTopReadyPriority>
    3244:	98 17       	cp	r25, r24
    3246:	10 f4       	brcc	.+4      	; 0x324c <vTaskRemoveFromUnorderedEventList+0x36>
    3248:	80 93 44 19 	sts	0x1944, r24	; 0x801944 <uxTopReadyPriority>
    324c:	fb e0       	ldi	r31, 0x0B	; 11
    324e:	8f 9f       	mul	r24, r31
    3250:	c0 01       	movw	r24, r0
    3252:	11 24       	eor	r1, r1
    3254:	b8 01       	movw	r22, r16
    3256:	8a 57       	subi	r24, 0x7A	; 122
    3258:	96 4e       	sbci	r25, 0xE6	; 230
    325a:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <vListInsertEnd>
    325e:	e0 91 b2 19 	lds	r30, 0x19B2	; 0x8019b2 <pxCurrentTCB>
    3262:	f0 91 b3 19 	lds	r31, 0x19B3	; 0x8019b3 <pxCurrentTCB+0x1>
    3266:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3268:	82 8d       	ldd	r24, Z+26	; 0x1a
    326a:	89 17       	cp	r24, r25
    326c:	18 f4       	brcc	.+6      	; 0x3274 <vTaskRemoveFromUnorderedEventList+0x5e>
    326e:	81 e0       	ldi	r24, 0x01	; 1
    3270:	80 93 41 19 	sts	0x1941, r24	; 0x801941 <xYieldPending>
    3274:	df 91       	pop	r29
    3276:	cf 91       	pop	r28
    3278:	1f 91       	pop	r17
    327a:	0f 91       	pop	r16
    327c:	08 95       	ret

0000327e <vTaskSetTimeOutState>:
    327e:	0f b6       	in	r0, 0x3f	; 63
    3280:	f8 94       	cli
    3282:	0f 92       	push	r0
    3284:	20 91 40 19 	lds	r18, 0x1940	; 0x801940 <xNumOfOverflows>
    3288:	fc 01       	movw	r30, r24
    328a:	20 83       	st	Z, r18
    328c:	40 91 45 19 	lds	r20, 0x1945	; 0x801945 <xTickCount>
    3290:	50 91 46 19 	lds	r21, 0x1946	; 0x801946 <xTickCount+0x1>
    3294:	60 91 47 19 	lds	r22, 0x1947	; 0x801947 <xTickCount+0x2>
    3298:	70 91 48 19 	lds	r23, 0x1948	; 0x801948 <xTickCount+0x3>
    329c:	41 83       	std	Z+1, r20	; 0x01
    329e:	52 83       	std	Z+2, r21	; 0x02
    32a0:	63 83       	std	Z+3, r22	; 0x03
    32a2:	74 83       	std	Z+4, r23	; 0x04
    32a4:	0f 90       	pop	r0
    32a6:	0f be       	out	0x3f, r0	; 63
    32a8:	08 95       	ret

000032aa <vTaskInternalSetTimeOutState>:
    32aa:	20 91 40 19 	lds	r18, 0x1940	; 0x801940 <xNumOfOverflows>
    32ae:	fc 01       	movw	r30, r24
    32b0:	20 83       	st	Z, r18
    32b2:	40 91 45 19 	lds	r20, 0x1945	; 0x801945 <xTickCount>
    32b6:	50 91 46 19 	lds	r21, 0x1946	; 0x801946 <xTickCount+0x1>
    32ba:	60 91 47 19 	lds	r22, 0x1947	; 0x801947 <xTickCount+0x2>
    32be:	70 91 48 19 	lds	r23, 0x1948	; 0x801948 <xTickCount+0x3>
    32c2:	41 83       	std	Z+1, r20	; 0x01
    32c4:	52 83       	std	Z+2, r21	; 0x02
    32c6:	63 83       	std	Z+3, r22	; 0x03
    32c8:	74 83       	std	Z+4, r23	; 0x04
    32ca:	08 95       	ret

000032cc <xTaskCheckForTimeOut>:
    32cc:	cf 92       	push	r12
    32ce:	df 92       	push	r13
    32d0:	ef 92       	push	r14
    32d2:	ff 92       	push	r15
    32d4:	0f 93       	push	r16
    32d6:	1f 93       	push	r17
    32d8:	cf 93       	push	r28
    32da:	df 93       	push	r29
    32dc:	fb 01       	movw	r30, r22
    32de:	0f b6       	in	r0, 0x3f	; 63
    32e0:	f8 94       	cli
    32e2:	0f 92       	push	r0
    32e4:	40 91 45 19 	lds	r20, 0x1945	; 0x801945 <xTickCount>
    32e8:	50 91 46 19 	lds	r21, 0x1946	; 0x801946 <xTickCount+0x1>
    32ec:	60 91 47 19 	lds	r22, 0x1947	; 0x801947 <xTickCount+0x2>
    32f0:	70 91 48 19 	lds	r23, 0x1948	; 0x801948 <xTickCount+0x3>
    32f4:	00 81       	ld	r16, Z
    32f6:	11 81       	ldd	r17, Z+1	; 0x01
    32f8:	22 81       	ldd	r18, Z+2	; 0x02
    32fa:	33 81       	ldd	r19, Z+3	; 0x03
    32fc:	0f 3f       	cpi	r16, 0xFF	; 255
    32fe:	af ef       	ldi	r26, 0xFF	; 255
    3300:	1a 07       	cpc	r17, r26
    3302:	2a 07       	cpc	r18, r26
    3304:	3a 07       	cpc	r19, r26
    3306:	49 f1       	breq	.+82     	; 0x335a <xTaskCheckForTimeOut+0x8e>
    3308:	ec 01       	movw	r28, r24
    330a:	c9 80       	ldd	r12, Y+1	; 0x01
    330c:	da 80       	ldd	r13, Y+2	; 0x02
    330e:	eb 80       	ldd	r14, Y+3	; 0x03
    3310:	fc 80       	ldd	r15, Y+4	; 0x04
    3312:	a0 91 40 19 	lds	r26, 0x1940	; 0x801940 <xNumOfOverflows>
    3316:	b8 81       	ld	r27, Y
    3318:	ba 17       	cp	r27, r26
    331a:	29 f0       	breq	.+10     	; 0x3326 <xTaskCheckForTimeOut+0x5a>
    331c:	4c 15       	cp	r20, r12
    331e:	5d 05       	cpc	r21, r13
    3320:	6e 05       	cpc	r22, r14
    3322:	7f 05       	cpc	r23, r15
    3324:	e0 f4       	brcc	.+56     	; 0x335e <xTaskCheckForTimeOut+0x92>
    3326:	4c 19       	sub	r20, r12
    3328:	5d 09       	sbc	r21, r13
    332a:	6e 09       	sbc	r22, r14
    332c:	7f 09       	sbc	r23, r15
    332e:	40 17       	cp	r20, r16
    3330:	51 07       	cpc	r21, r17
    3332:	62 07       	cpc	r22, r18
    3334:	73 07       	cpc	r23, r19
    3336:	58 f4       	brcc	.+22     	; 0x334e <xTaskCheckForTimeOut+0x82>
    3338:	04 1b       	sub	r16, r20
    333a:	15 0b       	sbc	r17, r21
    333c:	26 0b       	sbc	r18, r22
    333e:	37 0b       	sbc	r19, r23
    3340:	00 83       	st	Z, r16
    3342:	11 83       	std	Z+1, r17	; 0x01
    3344:	22 83       	std	Z+2, r18	; 0x02
    3346:	33 83       	std	Z+3, r19	; 0x03
    3348:	b0 df       	rcall	.-160    	; 0x32aa <vTaskInternalSetTimeOutState>
    334a:	80 e0       	ldi	r24, 0x00	; 0
    334c:	09 c0       	rjmp	.+18     	; 0x3360 <xTaskCheckForTimeOut+0x94>
    334e:	10 82       	st	Z, r1
    3350:	11 82       	std	Z+1, r1	; 0x01
    3352:	12 82       	std	Z+2, r1	; 0x02
    3354:	13 82       	std	Z+3, r1	; 0x03
    3356:	81 e0       	ldi	r24, 0x01	; 1
    3358:	03 c0       	rjmp	.+6      	; 0x3360 <xTaskCheckForTimeOut+0x94>
    335a:	80 e0       	ldi	r24, 0x00	; 0
    335c:	01 c0       	rjmp	.+2      	; 0x3360 <xTaskCheckForTimeOut+0x94>
    335e:	81 e0       	ldi	r24, 0x01	; 1
    3360:	0f 90       	pop	r0
    3362:	0f be       	out	0x3f, r0	; 63
    3364:	df 91       	pop	r29
    3366:	cf 91       	pop	r28
    3368:	1f 91       	pop	r17
    336a:	0f 91       	pop	r16
    336c:	ff 90       	pop	r15
    336e:	ef 90       	pop	r14
    3370:	df 90       	pop	r13
    3372:	cf 90       	pop	r12
    3374:	08 95       	ret

00003376 <vTaskMissedYield>:
    3376:	81 e0       	ldi	r24, 0x01	; 1
    3378:	80 93 41 19 	sts	0x1941, r24	; 0x801941 <xYieldPending>
    337c:	08 95       	ret

0000337e <xTaskGetCurrentTaskHandle>:
    337e:	80 91 b2 19 	lds	r24, 0x19B2	; 0x8019b2 <pxCurrentTCB>
    3382:	90 91 b3 19 	lds	r25, 0x19B3	; 0x8019b3 <pxCurrentTCB+0x1>
    3386:	08 95       	ret

00003388 <xTaskGetSchedulerState>:
    3388:	80 91 43 19 	lds	r24, 0x1943	; 0x801943 <xSchedulerRunning>
    338c:	88 23       	and	r24, r24
    338e:	31 f0       	breq	.+12     	; 0x339c <xTaskGetSchedulerState+0x14>
    3390:	80 91 38 19 	lds	r24, 0x1938	; 0x801938 <uxSchedulerSuspended>
    3394:	88 23       	and	r24, r24
    3396:	21 f0       	breq	.+8      	; 0x33a0 <xTaskGetSchedulerState+0x18>
    3398:	80 e0       	ldi	r24, 0x00	; 0
    339a:	08 95       	ret
    339c:	81 e0       	ldi	r24, 0x01	; 1
    339e:	08 95       	ret
    33a0:	82 e0       	ldi	r24, 0x02	; 2
    33a2:	08 95       	ret

000033a4 <xTaskPriorityInherit>:
    33a4:	0f 93       	push	r16
    33a6:	1f 93       	push	r17
    33a8:	cf 93       	push	r28
    33aa:	df 93       	push	r29
    33ac:	fc 01       	movw	r30, r24
    33ae:	89 2b       	or	r24, r25
    33b0:	09 f4       	brne	.+2      	; 0x33b4 <xTaskPriorityInherit+0x10>
    33b2:	60 c0       	rjmp	.+192    	; 0x3474 <xTaskPriorityInherit+0xd0>
    33b4:	82 8d       	ldd	r24, Z+26	; 0x1a
    33b6:	a0 91 b2 19 	lds	r26, 0x19B2	; 0x8019b2 <pxCurrentTCB>
    33ba:	b0 91 b3 19 	lds	r27, 0x19B3	; 0x8019b3 <pxCurrentTCB+0x1>
    33be:	5a 96       	adiw	r26, 0x1a	; 26
    33c0:	9c 91       	ld	r25, X
    33c2:	89 17       	cp	r24, r25
    33c4:	08 f0       	brcs	.+2      	; 0x33c8 <xTaskPriorityInherit+0x24>
    33c6:	4a c0       	rjmp	.+148    	; 0x345c <xTaskPriorityInherit+0xb8>
    33c8:	46 85       	ldd	r20, Z+14	; 0x0e
    33ca:	57 85       	ldd	r21, Z+15	; 0x0f
    33cc:	60 89       	ldd	r22, Z+16	; 0x10
    33ce:	71 89       	ldd	r23, Z+17	; 0x11
    33d0:	77 23       	and	r23, r23
    33d2:	94 f0       	brlt	.+36     	; 0x33f8 <xTaskPriorityInherit+0x54>
    33d4:	a0 91 b2 19 	lds	r26, 0x19B2	; 0x8019b2 <pxCurrentTCB>
    33d8:	b0 91 b3 19 	lds	r27, 0x19B3	; 0x8019b3 <pxCurrentTCB+0x1>
    33dc:	5a 96       	adiw	r26, 0x1a	; 26
    33de:	9c 91       	ld	r25, X
    33e0:	44 e0       	ldi	r20, 0x04	; 4
    33e2:	50 e0       	ldi	r21, 0x00	; 0
    33e4:	60 e0       	ldi	r22, 0x00	; 0
    33e6:	70 e0       	ldi	r23, 0x00	; 0
    33e8:	49 1b       	sub	r20, r25
    33ea:	51 09       	sbc	r21, r1
    33ec:	61 09       	sbc	r22, r1
    33ee:	71 09       	sbc	r23, r1
    33f0:	46 87       	std	Z+14, r20	; 0x0e
    33f2:	57 87       	std	Z+15, r21	; 0x0f
    33f4:	60 8b       	std	Z+16, r22	; 0x10
    33f6:	71 8b       	std	Z+17, r23	; 0x11
    33f8:	2b e0       	ldi	r18, 0x0B	; 11
    33fa:	82 9f       	mul	r24, r18
    33fc:	c0 01       	movw	r24, r0
    33fe:	11 24       	eor	r1, r1
    3400:	8a 57       	subi	r24, 0x7A	; 122
    3402:	96 4e       	sbci	r25, 0xE6	; 230
    3404:	24 85       	ldd	r18, Z+12	; 0x0c
    3406:	35 85       	ldd	r19, Z+13	; 0x0d
    3408:	28 17       	cp	r18, r24
    340a:	39 07       	cpc	r19, r25
    340c:	f1 f4       	brne	.+60     	; 0x344a <xTaskPriorityInherit+0xa6>
    340e:	8f 01       	movw	r16, r30
    3410:	ef 01       	movw	r28, r30
    3412:	22 96       	adiw	r28, 0x02	; 2
    3414:	ce 01       	movw	r24, r28
    3416:	0e 94 3f 0c 	call	0x187e	; 0x187e <uxListRemove>
    341a:	e0 91 b2 19 	lds	r30, 0x19B2	; 0x8019b2 <pxCurrentTCB>
    341e:	f0 91 b3 19 	lds	r31, 0x19B3	; 0x8019b3 <pxCurrentTCB+0x1>
    3422:	82 8d       	ldd	r24, Z+26	; 0x1a
    3424:	f8 01       	movw	r30, r16
    3426:	82 8f       	std	Z+26, r24	; 0x1a
    3428:	90 91 44 19 	lds	r25, 0x1944	; 0x801944 <uxTopReadyPriority>
    342c:	98 17       	cp	r25, r24
    342e:	10 f4       	brcc	.+4      	; 0x3434 <xTaskPriorityInherit+0x90>
    3430:	80 93 44 19 	sts	0x1944, r24	; 0x801944 <uxTopReadyPriority>
    3434:	fb e0       	ldi	r31, 0x0B	; 11
    3436:	8f 9f       	mul	r24, r31
    3438:	c0 01       	movw	r24, r0
    343a:	11 24       	eor	r1, r1
    343c:	be 01       	movw	r22, r28
    343e:	8a 57       	subi	r24, 0x7A	; 122
    3440:	96 4e       	sbci	r25, 0xE6	; 230
    3442:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <vListInsertEnd>
    3446:	81 e0       	ldi	r24, 0x01	; 1
    3448:	16 c0       	rjmp	.+44     	; 0x3476 <xTaskPriorityInherit+0xd2>
    344a:	a0 91 b2 19 	lds	r26, 0x19B2	; 0x8019b2 <pxCurrentTCB>
    344e:	b0 91 b3 19 	lds	r27, 0x19B3	; 0x8019b3 <pxCurrentTCB+0x1>
    3452:	5a 96       	adiw	r26, 0x1a	; 26
    3454:	8c 91       	ld	r24, X
    3456:	82 8f       	std	Z+26, r24	; 0x1a
    3458:	81 e0       	ldi	r24, 0x01	; 1
    345a:	0d c0       	rjmp	.+26     	; 0x3476 <xTaskPriorityInherit+0xd2>
    345c:	a0 91 b2 19 	lds	r26, 0x19B2	; 0x8019b2 <pxCurrentTCB>
    3460:	b0 91 b3 19 	lds	r27, 0x19B3	; 0x8019b3 <pxCurrentTCB+0x1>
    3464:	81 e0       	ldi	r24, 0x01	; 1
    3466:	27 a1       	ldd	r18, Z+39	; 0x27
    3468:	5a 96       	adiw	r26, 0x1a	; 26
    346a:	9c 91       	ld	r25, X
    346c:	29 17       	cp	r18, r25
    346e:	18 f0       	brcs	.+6      	; 0x3476 <xTaskPriorityInherit+0xd2>
    3470:	80 e0       	ldi	r24, 0x00	; 0
    3472:	01 c0       	rjmp	.+2      	; 0x3476 <xTaskPriorityInherit+0xd2>
    3474:	80 e0       	ldi	r24, 0x00	; 0
    3476:	df 91       	pop	r29
    3478:	cf 91       	pop	r28
    347a:	1f 91       	pop	r17
    347c:	0f 91       	pop	r16
    347e:	08 95       	ret

00003480 <xTaskPriorityDisinherit>:
    3480:	0f 93       	push	r16
    3482:	1f 93       	push	r17
    3484:	cf 93       	push	r28
    3486:	df 93       	push	r29
    3488:	fc 01       	movw	r30, r24
    348a:	89 2b       	or	r24, r25
    348c:	79 f1       	breq	.+94     	; 0x34ec <xTaskPriorityDisinherit+0x6c>
    348e:	80 a5       	ldd	r24, Z+40	; 0x28
    3490:	81 50       	subi	r24, 0x01	; 1
    3492:	80 a7       	std	Z+40, r24	; 0x28
    3494:	22 8d       	ldd	r18, Z+26	; 0x1a
    3496:	97 a1       	ldd	r25, Z+39	; 0x27
    3498:	29 17       	cp	r18, r25
    349a:	51 f1       	breq	.+84     	; 0x34f0 <xTaskPriorityDisinherit+0x70>
    349c:	81 11       	cpse	r24, r1
    349e:	2a c0       	rjmp	.+84     	; 0x34f4 <xTaskPriorityDisinherit+0x74>
    34a0:	ef 01       	movw	r28, r30
    34a2:	8f 01       	movw	r16, r30
    34a4:	0e 5f       	subi	r16, 0xFE	; 254
    34a6:	1f 4f       	sbci	r17, 0xFF	; 255
    34a8:	c8 01       	movw	r24, r16
    34aa:	0e 94 3f 0c 	call	0x187e	; 0x187e <uxListRemove>
    34ae:	8f a1       	ldd	r24, Y+39	; 0x27
    34b0:	8a 8f       	std	Y+26, r24	; 0x1a
    34b2:	44 e0       	ldi	r20, 0x04	; 4
    34b4:	50 e0       	ldi	r21, 0x00	; 0
    34b6:	60 e0       	ldi	r22, 0x00	; 0
    34b8:	70 e0       	ldi	r23, 0x00	; 0
    34ba:	48 1b       	sub	r20, r24
    34bc:	51 09       	sbc	r21, r1
    34be:	61 09       	sbc	r22, r1
    34c0:	71 09       	sbc	r23, r1
    34c2:	4e 87       	std	Y+14, r20	; 0x0e
    34c4:	5f 87       	std	Y+15, r21	; 0x0f
    34c6:	68 8b       	std	Y+16, r22	; 0x10
    34c8:	79 8b       	std	Y+17, r23	; 0x11
    34ca:	90 91 44 19 	lds	r25, 0x1944	; 0x801944 <uxTopReadyPriority>
    34ce:	98 17       	cp	r25, r24
    34d0:	10 f4       	brcc	.+4      	; 0x34d6 <xTaskPriorityDisinherit+0x56>
    34d2:	80 93 44 19 	sts	0x1944, r24	; 0x801944 <uxTopReadyPriority>
    34d6:	2b e0       	ldi	r18, 0x0B	; 11
    34d8:	82 9f       	mul	r24, r18
    34da:	c0 01       	movw	r24, r0
    34dc:	11 24       	eor	r1, r1
    34de:	b8 01       	movw	r22, r16
    34e0:	8a 57       	subi	r24, 0x7A	; 122
    34e2:	96 4e       	sbci	r25, 0xE6	; 230
    34e4:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <vListInsertEnd>
    34e8:	81 e0       	ldi	r24, 0x01	; 1
    34ea:	05 c0       	rjmp	.+10     	; 0x34f6 <xTaskPriorityDisinherit+0x76>
    34ec:	80 e0       	ldi	r24, 0x00	; 0
    34ee:	03 c0       	rjmp	.+6      	; 0x34f6 <xTaskPriorityDisinherit+0x76>
    34f0:	80 e0       	ldi	r24, 0x00	; 0
    34f2:	01 c0       	rjmp	.+2      	; 0x34f6 <xTaskPriorityDisinherit+0x76>
    34f4:	80 e0       	ldi	r24, 0x00	; 0
    34f6:	df 91       	pop	r29
    34f8:	cf 91       	pop	r28
    34fa:	1f 91       	pop	r17
    34fc:	0f 91       	pop	r16
    34fe:	08 95       	ret

00003500 <vTaskPriorityDisinheritAfterTimeout>:
    3500:	0f 93       	push	r16
    3502:	1f 93       	push	r17
    3504:	cf 93       	push	r28
    3506:	df 93       	push	r29
    3508:	fc 01       	movw	r30, r24
    350a:	89 2b       	or	r24, r25
    350c:	09 f4       	brne	.+2      	; 0x3510 <vTaskPriorityDisinheritAfterTimeout+0x10>
    350e:	3f c0       	rjmp	.+126    	; 0x358e <vTaskPriorityDisinheritAfterTimeout+0x8e>
    3510:	87 a1       	ldd	r24, Z+39	; 0x27
    3512:	86 17       	cp	r24, r22
    3514:	08 f4       	brcc	.+2      	; 0x3518 <vTaskPriorityDisinheritAfterTimeout+0x18>
    3516:	86 2f       	mov	r24, r22
    3518:	92 8d       	ldd	r25, Z+26	; 0x1a
    351a:	98 17       	cp	r25, r24
    351c:	c1 f1       	breq	.+112    	; 0x358e <vTaskPriorityDisinheritAfterTimeout+0x8e>
    351e:	20 a5       	ldd	r18, Z+40	; 0x28
    3520:	21 30       	cpi	r18, 0x01	; 1
    3522:	a9 f5       	brne	.+106    	; 0x358e <vTaskPriorityDisinheritAfterTimeout+0x8e>
    3524:	82 8f       	std	Z+26, r24	; 0x1a
    3526:	46 85       	ldd	r20, Z+14	; 0x0e
    3528:	57 85       	ldd	r21, Z+15	; 0x0f
    352a:	60 89       	ldd	r22, Z+16	; 0x10
    352c:	71 89       	ldd	r23, Z+17	; 0x11
    352e:	77 23       	and	r23, r23
    3530:	64 f0       	brlt	.+24     	; 0x354a <vTaskPriorityDisinheritAfterTimeout+0x4a>
    3532:	44 e0       	ldi	r20, 0x04	; 4
    3534:	50 e0       	ldi	r21, 0x00	; 0
    3536:	60 e0       	ldi	r22, 0x00	; 0
    3538:	70 e0       	ldi	r23, 0x00	; 0
    353a:	48 1b       	sub	r20, r24
    353c:	51 09       	sbc	r21, r1
    353e:	61 09       	sbc	r22, r1
    3540:	71 09       	sbc	r23, r1
    3542:	46 87       	std	Z+14, r20	; 0x0e
    3544:	57 87       	std	Z+15, r21	; 0x0f
    3546:	60 8b       	std	Z+16, r22	; 0x10
    3548:	71 8b       	std	Z+17, r23	; 0x11
    354a:	2b e0       	ldi	r18, 0x0B	; 11
    354c:	92 9f       	mul	r25, r18
    354e:	c0 01       	movw	r24, r0
    3550:	11 24       	eor	r1, r1
    3552:	8a 57       	subi	r24, 0x7A	; 122
    3554:	96 4e       	sbci	r25, 0xE6	; 230
    3556:	24 85       	ldd	r18, Z+12	; 0x0c
    3558:	35 85       	ldd	r19, Z+13	; 0x0d
    355a:	28 17       	cp	r18, r24
    355c:	39 07       	cpc	r19, r25
    355e:	b9 f4       	brne	.+46     	; 0x358e <vTaskPriorityDisinheritAfterTimeout+0x8e>
    3560:	ef 01       	movw	r28, r30
    3562:	8f 01       	movw	r16, r30
    3564:	0e 5f       	subi	r16, 0xFE	; 254
    3566:	1f 4f       	sbci	r17, 0xFF	; 255
    3568:	c8 01       	movw	r24, r16
    356a:	0e 94 3f 0c 	call	0x187e	; 0x187e <uxListRemove>
    356e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3570:	90 91 44 19 	lds	r25, 0x1944	; 0x801944 <uxTopReadyPriority>
    3574:	98 17       	cp	r25, r24
    3576:	10 f4       	brcc	.+4      	; 0x357c <vTaskPriorityDisinheritAfterTimeout+0x7c>
    3578:	80 93 44 19 	sts	0x1944, r24	; 0x801944 <uxTopReadyPriority>
    357c:	2b e0       	ldi	r18, 0x0B	; 11
    357e:	82 9f       	mul	r24, r18
    3580:	c0 01       	movw	r24, r0
    3582:	11 24       	eor	r1, r1
    3584:	b8 01       	movw	r22, r16
    3586:	8a 57       	subi	r24, 0x7A	; 122
    3588:	96 4e       	sbci	r25, 0xE6	; 230
    358a:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <vListInsertEnd>
    358e:	df 91       	pop	r29
    3590:	cf 91       	pop	r28
    3592:	1f 91       	pop	r17
    3594:	0f 91       	pop	r16
    3596:	08 95       	ret

00003598 <uxTaskResetEventItemValue>:
    3598:	cf 92       	push	r12
    359a:	df 92       	push	r13
    359c:	ef 92       	push	r14
    359e:	ff 92       	push	r15
    35a0:	e0 91 b2 19 	lds	r30, 0x19B2	; 0x8019b2 <pxCurrentTCB>
    35a4:	f0 91 b3 19 	lds	r31, 0x19B3	; 0x8019b3 <pxCurrentTCB+0x1>
    35a8:	66 85       	ldd	r22, Z+14	; 0x0e
    35aa:	77 85       	ldd	r23, Z+15	; 0x0f
    35ac:	80 89       	ldd	r24, Z+16	; 0x10
    35ae:	91 89       	ldd	r25, Z+17	; 0x11
    35b0:	e0 91 b2 19 	lds	r30, 0x19B2	; 0x8019b2 <pxCurrentTCB>
    35b4:	f0 91 b3 19 	lds	r31, 0x19B3	; 0x8019b3 <pxCurrentTCB+0x1>
    35b8:	a0 91 b2 19 	lds	r26, 0x19B2	; 0x8019b2 <pxCurrentTCB>
    35bc:	b0 91 b3 19 	lds	r27, 0x19B3	; 0x8019b3 <pxCurrentTCB+0x1>
    35c0:	5a 96       	adiw	r26, 0x1a	; 26
    35c2:	2c 91       	ld	r18, X
    35c4:	c1 2c       	mov	r12, r1
    35c6:	d1 2c       	mov	r13, r1
    35c8:	76 01       	movw	r14, r12
    35ca:	68 94       	set
    35cc:	c2 f8       	bld	r12, 2
    35ce:	c2 1a       	sub	r12, r18
    35d0:	d1 08       	sbc	r13, r1
    35d2:	e1 08       	sbc	r14, r1
    35d4:	f1 08       	sbc	r15, r1
    35d6:	c6 86       	std	Z+14, r12	; 0x0e
    35d8:	d7 86       	std	Z+15, r13	; 0x0f
    35da:	e0 8a       	std	Z+16, r14	; 0x10
    35dc:	f1 8a       	std	Z+17, r15	; 0x11
    35de:	ff 90       	pop	r15
    35e0:	ef 90       	pop	r14
    35e2:	df 90       	pop	r13
    35e4:	cf 90       	pop	r12
    35e6:	08 95       	ret

000035e8 <pvTaskIncrementMutexHeldCount>:
    35e8:	80 91 b2 19 	lds	r24, 0x19B2	; 0x8019b2 <pxCurrentTCB>
    35ec:	90 91 b3 19 	lds	r25, 0x19B3	; 0x8019b3 <pxCurrentTCB+0x1>
    35f0:	89 2b       	or	r24, r25
    35f2:	39 f0       	breq	.+14     	; 0x3602 <pvTaskIncrementMutexHeldCount+0x1a>
    35f4:	e0 91 b2 19 	lds	r30, 0x19B2	; 0x8019b2 <pxCurrentTCB>
    35f8:	f0 91 b3 19 	lds	r31, 0x19B3	; 0x8019b3 <pxCurrentTCB+0x1>
    35fc:	80 a5       	ldd	r24, Z+40	; 0x28
    35fe:	8f 5f       	subi	r24, 0xFF	; 255
    3600:	80 a7       	std	Z+40, r24	; 0x28
    3602:	80 91 b2 19 	lds	r24, 0x19B2	; 0x8019b2 <pxCurrentTCB>
    3606:	90 91 b3 19 	lds	r25, 0x19B3	; 0x8019b3 <pxCurrentTCB+0x1>
    360a:	08 95       	ret

0000360c <xTaskNotifyWait>:
    360c:	4f 92       	push	r4
    360e:	5f 92       	push	r5
    3610:	6f 92       	push	r6
    3612:	7f 92       	push	r7
    3614:	8f 92       	push	r8
    3616:	9f 92       	push	r9
    3618:	af 92       	push	r10
    361a:	bf 92       	push	r11
    361c:	cf 92       	push	r12
    361e:	df 92       	push	r13
    3620:	ef 92       	push	r14
    3622:	ff 92       	push	r15
    3624:	0f 93       	push	r16
    3626:	1f 93       	push	r17
    3628:	49 01       	movw	r8, r18
    362a:	5a 01       	movw	r10, r20
    362c:	0f b6       	in	r0, 0x3f	; 63
    362e:	f8 94       	cli
    3630:	0f 92       	push	r0
    3632:	e0 91 b2 19 	lds	r30, 0x19B2	; 0x8019b2 <pxCurrentTCB>
    3636:	f0 91 b3 19 	lds	r31, 0x19B3	; 0x8019b3 <pxCurrentTCB+0x1>
    363a:	27 a5       	ldd	r18, Z+47	; 0x2f
    363c:	22 30       	cpi	r18, 0x02	; 2
    363e:	39 f1       	breq	.+78     	; 0x368e <xTaskNotifyWait+0x82>
    3640:	e0 91 b2 19 	lds	r30, 0x19B2	; 0x8019b2 <pxCurrentTCB>
    3644:	f0 91 b3 19 	lds	r31, 0x19B3	; 0x8019b3 <pxCurrentTCB+0x1>
    3648:	43 a4       	ldd	r4, Z+43	; 0x2b
    364a:	54 a4       	ldd	r5, Z+44	; 0x2c
    364c:	65 a4       	ldd	r6, Z+45	; 0x2d
    364e:	76 a4       	ldd	r7, Z+46	; 0x2e
    3650:	dc 01       	movw	r26, r24
    3652:	cb 01       	movw	r24, r22
    3654:	80 95       	com	r24
    3656:	90 95       	com	r25
    3658:	a0 95       	com	r26
    365a:	b0 95       	com	r27
    365c:	84 21       	and	r24, r4
    365e:	95 21       	and	r25, r5
    3660:	a6 21       	and	r26, r6
    3662:	b7 21       	and	r27, r7
    3664:	83 a7       	std	Z+43, r24	; 0x2b
    3666:	94 a7       	std	Z+44, r25	; 0x2c
    3668:	a5 a7       	std	Z+45, r26	; 0x2d
    366a:	b6 a7       	std	Z+46, r27	; 0x2e
    366c:	e0 91 b2 19 	lds	r30, 0x19B2	; 0x8019b2 <pxCurrentTCB>
    3670:	f0 91 b3 19 	lds	r31, 0x19B3	; 0x8019b3 <pxCurrentTCB+0x1>
    3674:	81 e0       	ldi	r24, 0x01	; 1
    3676:	87 a7       	std	Z+47, r24	; 0x2f
    3678:	c1 14       	cp	r12, r1
    367a:	d1 04       	cpc	r13, r1
    367c:	e1 04       	cpc	r14, r1
    367e:	f1 04       	cpc	r15, r1
    3680:	31 f0       	breq	.+12     	; 0x368e <xTaskNotifyWait+0x82>
    3682:	41 e0       	ldi	r20, 0x01	; 1
    3684:	c7 01       	movw	r24, r14
    3686:	b6 01       	movw	r22, r12
    3688:	5a d9       	rcall	.-3404   	; 0x293e <prvAddCurrentTaskToDelayedList>
    368a:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <vPortYield>
    368e:	0f 90       	pop	r0
    3690:	0f be       	out	0x3f, r0	; 63
    3692:	0f b6       	in	r0, 0x3f	; 63
    3694:	f8 94       	cli
    3696:	0f 92       	push	r0
    3698:	01 15       	cp	r16, r1
    369a:	11 05       	cpc	r17, r1
    369c:	69 f0       	breq	.+26     	; 0x36b8 <xTaskNotifyWait+0xac>
    369e:	e0 91 b2 19 	lds	r30, 0x19B2	; 0x8019b2 <pxCurrentTCB>
    36a2:	f0 91 b3 19 	lds	r31, 0x19B3	; 0x8019b3 <pxCurrentTCB+0x1>
    36a6:	83 a5       	ldd	r24, Z+43	; 0x2b
    36a8:	94 a5       	ldd	r25, Z+44	; 0x2c
    36aa:	a5 a5       	ldd	r26, Z+45	; 0x2d
    36ac:	b6 a5       	ldd	r27, Z+46	; 0x2e
    36ae:	f8 01       	movw	r30, r16
    36b0:	80 83       	st	Z, r24
    36b2:	91 83       	std	Z+1, r25	; 0x01
    36b4:	a2 83       	std	Z+2, r26	; 0x02
    36b6:	b3 83       	std	Z+3, r27	; 0x03
    36b8:	e0 91 b2 19 	lds	r30, 0x19B2	; 0x8019b2 <pxCurrentTCB>
    36bc:	f0 91 b3 19 	lds	r31, 0x19B3	; 0x8019b3 <pxCurrentTCB+0x1>
    36c0:	87 a5       	ldd	r24, Z+47	; 0x2f
    36c2:	82 30       	cpi	r24, 0x02	; 2
    36c4:	b1 f4       	brne	.+44     	; 0x36f2 <xTaskNotifyWait+0xe6>
    36c6:	e0 91 b2 19 	lds	r30, 0x19B2	; 0x8019b2 <pxCurrentTCB>
    36ca:	f0 91 b3 19 	lds	r31, 0x19B3	; 0x8019b3 <pxCurrentTCB+0x1>
    36ce:	83 a5       	ldd	r24, Z+43	; 0x2b
    36d0:	94 a5       	ldd	r25, Z+44	; 0x2c
    36d2:	a5 a5       	ldd	r26, Z+45	; 0x2d
    36d4:	b6 a5       	ldd	r27, Z+46	; 0x2e
    36d6:	80 94       	com	r8
    36d8:	90 94       	com	r9
    36da:	a0 94       	com	r10
    36dc:	b0 94       	com	r11
    36de:	88 22       	and	r8, r24
    36e0:	99 22       	and	r9, r25
    36e2:	aa 22       	and	r10, r26
    36e4:	bb 22       	and	r11, r27
    36e6:	83 a6       	std	Z+43, r8	; 0x2b
    36e8:	94 a6       	std	Z+44, r9	; 0x2c
    36ea:	a5 a6       	std	Z+45, r10	; 0x2d
    36ec:	b6 a6       	std	Z+46, r11	; 0x2e
    36ee:	81 e0       	ldi	r24, 0x01	; 1
    36f0:	01 c0       	rjmp	.+2      	; 0x36f4 <xTaskNotifyWait+0xe8>
    36f2:	80 e0       	ldi	r24, 0x00	; 0
    36f4:	e0 91 b2 19 	lds	r30, 0x19B2	; 0x8019b2 <pxCurrentTCB>
    36f8:	f0 91 b3 19 	lds	r31, 0x19B3	; 0x8019b3 <pxCurrentTCB+0x1>
    36fc:	17 a6       	std	Z+47, r1	; 0x2f
    36fe:	0f 90       	pop	r0
    3700:	0f be       	out	0x3f, r0	; 63
    3702:	1f 91       	pop	r17
    3704:	0f 91       	pop	r16
    3706:	ff 90       	pop	r15
    3708:	ef 90       	pop	r14
    370a:	df 90       	pop	r13
    370c:	cf 90       	pop	r12
    370e:	bf 90       	pop	r11
    3710:	af 90       	pop	r10
    3712:	9f 90       	pop	r9
    3714:	8f 90       	pop	r8
    3716:	7f 90       	pop	r7
    3718:	6f 90       	pop	r6
    371a:	5f 90       	pop	r5
    371c:	4f 90       	pop	r4
    371e:	08 95       	ret

00003720 <xTaskGenericNotify>:
    3720:	0f 93       	push	r16
    3722:	1f 93       	push	r17
    3724:	cf 93       	push	r28
    3726:	df 93       	push	r29
    3728:	fc 01       	movw	r30, r24
    372a:	0f b6       	in	r0, 0x3f	; 63
    372c:	f8 94       	cli
    372e:	0f 92       	push	r0
    3730:	01 15       	cp	r16, r1
    3732:	11 05       	cpc	r17, r1
    3734:	49 f0       	breq	.+18     	; 0x3748 <xTaskGenericNotify+0x28>
    3736:	83 a5       	ldd	r24, Z+43	; 0x2b
    3738:	94 a5       	ldd	r25, Z+44	; 0x2c
    373a:	a5 a5       	ldd	r26, Z+45	; 0x2d
    373c:	b6 a5       	ldd	r27, Z+46	; 0x2e
    373e:	e8 01       	movw	r28, r16
    3740:	88 83       	st	Y, r24
    3742:	99 83       	std	Y+1, r25	; 0x01
    3744:	aa 83       	std	Y+2, r26	; 0x02
    3746:	bb 83       	std	Y+3, r27	; 0x03
    3748:	87 a5       	ldd	r24, Z+47	; 0x2f
    374a:	92 e0       	ldi	r25, 0x02	; 2
    374c:	97 a7       	std	Z+47, r25	; 0x2f
    374e:	22 30       	cpi	r18, 0x02	; 2
    3750:	b1 f0       	breq	.+44     	; 0x377e <xTaskGenericNotify+0x5e>
    3752:	18 f4       	brcc	.+6      	; 0x375a <xTaskGenericNotify+0x3a>
    3754:	21 30       	cpi	r18, 0x01	; 1
    3756:	31 f0       	breq	.+12     	; 0x3764 <xTaskGenericNotify+0x44>
    3758:	2a c0       	rjmp	.+84     	; 0x37ae <xTaskGenericNotify+0x8e>
    375a:	23 30       	cpi	r18, 0x03	; 3
    375c:	e9 f0       	breq	.+58     	; 0x3798 <xTaskGenericNotify+0x78>
    375e:	24 30       	cpi	r18, 0x04	; 4
    3760:	01 f1       	breq	.+64     	; 0x37a2 <xTaskGenericNotify+0x82>
    3762:	25 c0       	rjmp	.+74     	; 0x37ae <xTaskGenericNotify+0x8e>
    3764:	03 a5       	ldd	r16, Z+43	; 0x2b
    3766:	14 a5       	ldd	r17, Z+44	; 0x2c
    3768:	25 a5       	ldd	r18, Z+45	; 0x2d
    376a:	36 a5       	ldd	r19, Z+46	; 0x2e
    376c:	40 2b       	or	r20, r16
    376e:	51 2b       	or	r21, r17
    3770:	62 2b       	or	r22, r18
    3772:	73 2b       	or	r23, r19
    3774:	43 a7       	std	Z+43, r20	; 0x2b
    3776:	54 a7       	std	Z+44, r21	; 0x2c
    3778:	65 a7       	std	Z+45, r22	; 0x2d
    377a:	76 a7       	std	Z+46, r23	; 0x2e
    377c:	18 c0       	rjmp	.+48     	; 0x37ae <xTaskGenericNotify+0x8e>
    377e:	43 a5       	ldd	r20, Z+43	; 0x2b
    3780:	54 a5       	ldd	r21, Z+44	; 0x2c
    3782:	65 a5       	ldd	r22, Z+45	; 0x2d
    3784:	76 a5       	ldd	r23, Z+46	; 0x2e
    3786:	4f 5f       	subi	r20, 0xFF	; 255
    3788:	5f 4f       	sbci	r21, 0xFF	; 255
    378a:	6f 4f       	sbci	r22, 0xFF	; 255
    378c:	7f 4f       	sbci	r23, 0xFF	; 255
    378e:	43 a7       	std	Z+43, r20	; 0x2b
    3790:	54 a7       	std	Z+44, r21	; 0x2c
    3792:	65 a7       	std	Z+45, r22	; 0x2d
    3794:	76 a7       	std	Z+46, r23	; 0x2e
    3796:	0b c0       	rjmp	.+22     	; 0x37ae <xTaskGenericNotify+0x8e>
    3798:	43 a7       	std	Z+43, r20	; 0x2b
    379a:	54 a7       	std	Z+44, r21	; 0x2c
    379c:	65 a7       	std	Z+45, r22	; 0x2d
    379e:	76 a7       	std	Z+46, r23	; 0x2e
    37a0:	06 c0       	rjmp	.+12     	; 0x37ae <xTaskGenericNotify+0x8e>
    37a2:	82 30       	cpi	r24, 0x02	; 2
    37a4:	49 f1       	breq	.+82     	; 0x37f8 <xTaskGenericNotify+0xd8>
    37a6:	43 a7       	std	Z+43, r20	; 0x2b
    37a8:	54 a7       	std	Z+44, r21	; 0x2c
    37aa:	65 a7       	std	Z+45, r22	; 0x2d
    37ac:	76 a7       	std	Z+46, r23	; 0x2e
    37ae:	81 30       	cpi	r24, 0x01	; 1
    37b0:	29 f5       	brne	.+74     	; 0x37fc <xTaskGenericNotify+0xdc>
    37b2:	ef 01       	movw	r28, r30
    37b4:	8f 01       	movw	r16, r30
    37b6:	0e 5f       	subi	r16, 0xFE	; 254
    37b8:	1f 4f       	sbci	r17, 0xFF	; 255
    37ba:	c8 01       	movw	r24, r16
    37bc:	0e 94 3f 0c 	call	0x187e	; 0x187e <uxListRemove>
    37c0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    37c2:	90 91 44 19 	lds	r25, 0x1944	; 0x801944 <uxTopReadyPriority>
    37c6:	98 17       	cp	r25, r24
    37c8:	10 f4       	brcc	.+4      	; 0x37ce <xTaskGenericNotify+0xae>
    37ca:	80 93 44 19 	sts	0x1944, r24	; 0x801944 <uxTopReadyPriority>
    37ce:	2b e0       	ldi	r18, 0x0B	; 11
    37d0:	82 9f       	mul	r24, r18
    37d2:	c0 01       	movw	r24, r0
    37d4:	11 24       	eor	r1, r1
    37d6:	b8 01       	movw	r22, r16
    37d8:	8a 57       	subi	r24, 0x7A	; 122
    37da:	96 4e       	sbci	r25, 0xE6	; 230
    37dc:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <vListInsertEnd>
    37e0:	e0 91 b2 19 	lds	r30, 0x19B2	; 0x8019b2 <pxCurrentTCB>
    37e4:	f0 91 b3 19 	lds	r31, 0x19B3	; 0x8019b3 <pxCurrentTCB+0x1>
    37e8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    37ea:	82 8d       	ldd	r24, Z+26	; 0x1a
    37ec:	89 17       	cp	r24, r25
    37ee:	40 f4       	brcc	.+16     	; 0x3800 <xTaskGenericNotify+0xe0>
    37f0:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <vPortYield>
    37f4:	81 e0       	ldi	r24, 0x01	; 1
    37f6:	05 c0       	rjmp	.+10     	; 0x3802 <xTaskGenericNotify+0xe2>
    37f8:	80 e0       	ldi	r24, 0x00	; 0
    37fa:	03 c0       	rjmp	.+6      	; 0x3802 <xTaskGenericNotify+0xe2>
    37fc:	81 e0       	ldi	r24, 0x01	; 1
    37fe:	01 c0       	rjmp	.+2      	; 0x3802 <xTaskGenericNotify+0xe2>
    3800:	81 e0       	ldi	r24, 0x01	; 1
    3802:	0f 90       	pop	r0
    3804:	0f be       	out	0x3f, r0	; 63
    3806:	df 91       	pop	r29
    3808:	cf 91       	pop	r28
    380a:	1f 91       	pop	r17
    380c:	0f 91       	pop	r16
    380e:	08 95       	ret

00003810 <xTaskGenericNotifyFromISR>:
    3810:	ef 92       	push	r14
    3812:	ff 92       	push	r15
    3814:	0f 93       	push	r16
    3816:	1f 93       	push	r17
    3818:	cf 93       	push	r28
    381a:	df 93       	push	r29
    381c:	fc 01       	movw	r30, r24
    381e:	01 15       	cp	r16, r1
    3820:	11 05       	cpc	r17, r1
    3822:	49 f0       	breq	.+18     	; 0x3836 <xTaskGenericNotifyFromISR+0x26>
    3824:	83 a5       	ldd	r24, Z+43	; 0x2b
    3826:	94 a5       	ldd	r25, Z+44	; 0x2c
    3828:	a5 a5       	ldd	r26, Z+45	; 0x2d
    382a:	b6 a5       	ldd	r27, Z+46	; 0x2e
    382c:	e8 01       	movw	r28, r16
    382e:	88 83       	st	Y, r24
    3830:	99 83       	std	Y+1, r25	; 0x01
    3832:	aa 83       	std	Y+2, r26	; 0x02
    3834:	bb 83       	std	Y+3, r27	; 0x03
    3836:	87 a5       	ldd	r24, Z+47	; 0x2f
    3838:	92 e0       	ldi	r25, 0x02	; 2
    383a:	97 a7       	std	Z+47, r25	; 0x2f
    383c:	22 30       	cpi	r18, 0x02	; 2
    383e:	b1 f0       	breq	.+44     	; 0x386c <xTaskGenericNotifyFromISR+0x5c>
    3840:	18 f4       	brcc	.+6      	; 0x3848 <xTaskGenericNotifyFromISR+0x38>
    3842:	21 30       	cpi	r18, 0x01	; 1
    3844:	31 f0       	breq	.+12     	; 0x3852 <xTaskGenericNotifyFromISR+0x42>
    3846:	2a c0       	rjmp	.+84     	; 0x389c <xTaskGenericNotifyFromISR+0x8c>
    3848:	23 30       	cpi	r18, 0x03	; 3
    384a:	e9 f0       	breq	.+58     	; 0x3886 <xTaskGenericNotifyFromISR+0x76>
    384c:	24 30       	cpi	r18, 0x04	; 4
    384e:	01 f1       	breq	.+64     	; 0x3890 <xTaskGenericNotifyFromISR+0x80>
    3850:	25 c0       	rjmp	.+74     	; 0x389c <xTaskGenericNotifyFromISR+0x8c>
    3852:	03 a5       	ldd	r16, Z+43	; 0x2b
    3854:	14 a5       	ldd	r17, Z+44	; 0x2c
    3856:	25 a5       	ldd	r18, Z+45	; 0x2d
    3858:	36 a5       	ldd	r19, Z+46	; 0x2e
    385a:	40 2b       	or	r20, r16
    385c:	51 2b       	or	r21, r17
    385e:	62 2b       	or	r22, r18
    3860:	73 2b       	or	r23, r19
    3862:	43 a7       	std	Z+43, r20	; 0x2b
    3864:	54 a7       	std	Z+44, r21	; 0x2c
    3866:	65 a7       	std	Z+45, r22	; 0x2d
    3868:	76 a7       	std	Z+46, r23	; 0x2e
    386a:	18 c0       	rjmp	.+48     	; 0x389c <xTaskGenericNotifyFromISR+0x8c>
    386c:	43 a5       	ldd	r20, Z+43	; 0x2b
    386e:	54 a5       	ldd	r21, Z+44	; 0x2c
    3870:	65 a5       	ldd	r22, Z+45	; 0x2d
    3872:	76 a5       	ldd	r23, Z+46	; 0x2e
    3874:	4f 5f       	subi	r20, 0xFF	; 255
    3876:	5f 4f       	sbci	r21, 0xFF	; 255
    3878:	6f 4f       	sbci	r22, 0xFF	; 255
    387a:	7f 4f       	sbci	r23, 0xFF	; 255
    387c:	43 a7       	std	Z+43, r20	; 0x2b
    387e:	54 a7       	std	Z+44, r21	; 0x2c
    3880:	65 a7       	std	Z+45, r22	; 0x2d
    3882:	76 a7       	std	Z+46, r23	; 0x2e
    3884:	0b c0       	rjmp	.+22     	; 0x389c <xTaskGenericNotifyFromISR+0x8c>
    3886:	43 a7       	std	Z+43, r20	; 0x2b
    3888:	54 a7       	std	Z+44, r21	; 0x2c
    388a:	65 a7       	std	Z+45, r22	; 0x2d
    388c:	76 a7       	std	Z+46, r23	; 0x2e
    388e:	06 c0       	rjmp	.+12     	; 0x389c <xTaskGenericNotifyFromISR+0x8c>
    3890:	82 30       	cpi	r24, 0x02	; 2
    3892:	d9 f1       	breq	.+118    	; 0x390a <xTaskGenericNotifyFromISR+0xfa>
    3894:	43 a7       	std	Z+43, r20	; 0x2b
    3896:	54 a7       	std	Z+44, r21	; 0x2c
    3898:	65 a7       	std	Z+45, r22	; 0x2d
    389a:	76 a7       	std	Z+46, r23	; 0x2e
    389c:	81 30       	cpi	r24, 0x01	; 1
    389e:	b9 f5       	brne	.+110    	; 0x390e <xTaskGenericNotifyFromISR+0xfe>
    38a0:	ef 01       	movw	r28, r30
    38a2:	80 91 38 19 	lds	r24, 0x1938	; 0x801938 <uxSchedulerSuspended>
    38a6:	81 11       	cpse	r24, r1
    38a8:	17 c0       	rjmp	.+46     	; 0x38d8 <xTaskGenericNotifyFromISR+0xc8>
    38aa:	8f 01       	movw	r16, r30
    38ac:	0e 5f       	subi	r16, 0xFE	; 254
    38ae:	1f 4f       	sbci	r17, 0xFF	; 255
    38b0:	c8 01       	movw	r24, r16
    38b2:	0e 94 3f 0c 	call	0x187e	; 0x187e <uxListRemove>
    38b6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    38b8:	90 91 44 19 	lds	r25, 0x1944	; 0x801944 <uxTopReadyPriority>
    38bc:	98 17       	cp	r25, r24
    38be:	10 f4       	brcc	.+4      	; 0x38c4 <xTaskGenericNotifyFromISR+0xb4>
    38c0:	80 93 44 19 	sts	0x1944, r24	; 0x801944 <uxTopReadyPriority>
    38c4:	eb e0       	ldi	r30, 0x0B	; 11
    38c6:	8e 9f       	mul	r24, r30
    38c8:	c0 01       	movw	r24, r0
    38ca:	11 24       	eor	r1, r1
    38cc:	b8 01       	movw	r22, r16
    38ce:	8a 57       	subi	r24, 0x7A	; 122
    38d0:	96 4e       	sbci	r25, 0xE6	; 230
    38d2:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <vListInsertEnd>
    38d6:	07 c0       	rjmp	.+14     	; 0x38e6 <xTaskGenericNotifyFromISR+0xd6>
    38d8:	bf 01       	movw	r22, r30
    38da:	62 5f       	subi	r22, 0xF2	; 242
    38dc:	7f 4f       	sbci	r23, 0xFF	; 255
    38de:	81 e6       	ldi	r24, 0x61	; 97
    38e0:	99 e1       	ldi	r25, 0x19	; 25
    38e2:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <vListInsertEnd>
    38e6:	e0 91 b2 19 	lds	r30, 0x19B2	; 0x8019b2 <pxCurrentTCB>
    38ea:	f0 91 b3 19 	lds	r31, 0x19B3	; 0x8019b3 <pxCurrentTCB+0x1>
    38ee:	9a 8d       	ldd	r25, Y+26	; 0x1a
    38f0:	82 8d       	ldd	r24, Z+26	; 0x1a
    38f2:	89 17       	cp	r24, r25
    38f4:	70 f4       	brcc	.+28     	; 0x3912 <xTaskGenericNotifyFromISR+0x102>
    38f6:	e1 14       	cp	r14, r1
    38f8:	f1 04       	cpc	r15, r1
    38fa:	19 f0       	breq	.+6      	; 0x3902 <xTaskGenericNotifyFromISR+0xf2>
    38fc:	81 e0       	ldi	r24, 0x01	; 1
    38fe:	e7 01       	movw	r28, r14
    3900:	88 83       	st	Y, r24
    3902:	81 e0       	ldi	r24, 0x01	; 1
    3904:	80 93 41 19 	sts	0x1941, r24	; 0x801941 <xYieldPending>
    3908:	05 c0       	rjmp	.+10     	; 0x3914 <xTaskGenericNotifyFromISR+0x104>
    390a:	80 e0       	ldi	r24, 0x00	; 0
    390c:	03 c0       	rjmp	.+6      	; 0x3914 <xTaskGenericNotifyFromISR+0x104>
    390e:	81 e0       	ldi	r24, 0x01	; 1
    3910:	01 c0       	rjmp	.+2      	; 0x3914 <xTaskGenericNotifyFromISR+0x104>
    3912:	81 e0       	ldi	r24, 0x01	; 1
    3914:	df 91       	pop	r29
    3916:	cf 91       	pop	r28
    3918:	1f 91       	pop	r17
    391a:	0f 91       	pop	r16
    391c:	ff 90       	pop	r15
    391e:	ef 90       	pop	r14
    3920:	08 95       	ret

00003922 <xTaskNotifyStateClear>:
    TCB_t *pxTCB;
    BaseType_t xReturn;

        /* If null is passed in here then it is the calling task that is having
        its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    3922:	00 97       	sbiw	r24, 0x00	; 0
    3924:	21 f4       	brne	.+8      	; 0x392e <xTaskNotifyStateClear+0xc>
    3926:	80 91 b2 19 	lds	r24, 0x19B2	; 0x8019b2 <pxCurrentTCB>
    392a:	90 91 b3 19 	lds	r25, 0x19B3	; 0x8019b3 <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    392e:	0f b6       	in	r0, 0x3f	; 63
    3930:	f8 94       	cli
    3932:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
    3934:	fc 01       	movw	r30, r24
    3936:	27 a5       	ldd	r18, Z+47	; 0x2f
    3938:	22 30       	cpi	r18, 0x02	; 2
    393a:	19 f4       	brne	.+6      	; 0x3942 <xTaskNotifyStateClear+0x20>
            {
                pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    393c:	17 a6       	std	Z+47, r1	; 0x2f
                xReturn = pdPASS;
    393e:	81 e0       	ldi	r24, 0x01	; 1
    3940:	01 c0       	rjmp	.+2      	; 0x3944 <xTaskNotifyStateClear+0x22>
            }
            else
            {
                xReturn = pdFAIL;
    3942:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    3944:	0f 90       	pop	r0
    3946:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    3948:	08 95       	ret

0000394a <prvInsertTimerInActiveList>:
    394a:	cf 92       	push	r12
    394c:	df 92       	push	r13
    394e:	ef 92       	push	r14
    3950:	ff 92       	push	r15
    3952:	0f 93       	push	r16
    3954:	1f 93       	push	r17
    3956:	fc 01       	movw	r30, r24
    3958:	42 83       	std	Z+2, r20	; 0x02
    395a:	53 83       	std	Z+3, r21	; 0x03
    395c:	64 83       	std	Z+4, r22	; 0x04
    395e:	75 83       	std	Z+5, r23	; 0x05
    3960:	93 87       	std	Z+11, r25	; 0x0b
    3962:	82 87       	std	Z+10, r24	; 0x0a
    3964:	04 17       	cp	r16, r20
    3966:	15 07       	cpc	r17, r21
    3968:	26 07       	cpc	r18, r22
    396a:	37 07       	cpc	r19, r23
    396c:	c0 f0       	brcs	.+48     	; 0x399e <prvInsertTimerInActiveList+0x54>
    396e:	0c 19       	sub	r16, r12
    3970:	1d 09       	sbc	r17, r13
    3972:	2e 09       	sbc	r18, r14
    3974:	3f 09       	sbc	r19, r15
    3976:	86 85       	ldd	r24, Z+14	; 0x0e
    3978:	97 85       	ldd	r25, Z+15	; 0x0f
    397a:	a0 89       	ldd	r26, Z+16	; 0x10
    397c:	b1 89       	ldd	r27, Z+17	; 0x11
    397e:	08 17       	cp	r16, r24
    3980:	19 07       	cpc	r17, r25
    3982:	2a 07       	cpc	r18, r26
    3984:	3b 07       	cpc	r19, r27
    3986:	00 f5       	brcc	.+64     	; 0x39c8 <prvInsertTimerInActiveList+0x7e>
    3988:	bf 01       	movw	r22, r30
    398a:	6e 5f       	subi	r22, 0xFE	; 254
    398c:	7f 4f       	sbci	r23, 0xFF	; 255
    398e:	80 91 bc 19 	lds	r24, 0x19BC	; 0x8019bc <pxOverflowTimerList>
    3992:	90 91 bd 19 	lds	r25, 0x19BD	; 0x8019bd <pxOverflowTimerList+0x1>
    3996:	0e 94 02 0c 	call	0x1804	; 0x1804 <vListInsert>
    399a:	80 e0       	ldi	r24, 0x00	; 0
    399c:	18 c0       	rjmp	.+48     	; 0x39ce <prvInsertTimerInActiveList+0x84>
    399e:	0c 15       	cp	r16, r12
    39a0:	1d 05       	cpc	r17, r13
    39a2:	2e 05       	cpc	r18, r14
    39a4:	3f 05       	cpc	r19, r15
    39a6:	28 f4       	brcc	.+10     	; 0x39b2 <prvInsertTimerInActiveList+0x68>
    39a8:	4c 15       	cp	r20, r12
    39aa:	5d 05       	cpc	r21, r13
    39ac:	6e 05       	cpc	r22, r14
    39ae:	7f 05       	cpc	r23, r15
    39b0:	68 f4       	brcc	.+26     	; 0x39cc <prvInsertTimerInActiveList+0x82>
    39b2:	bf 01       	movw	r22, r30
    39b4:	6e 5f       	subi	r22, 0xFE	; 254
    39b6:	7f 4f       	sbci	r23, 0xFF	; 255
    39b8:	80 91 be 19 	lds	r24, 0x19BE	; 0x8019be <pxCurrentTimerList>
    39bc:	90 91 bf 19 	lds	r25, 0x19BF	; 0x8019bf <pxCurrentTimerList+0x1>
    39c0:	0e 94 02 0c 	call	0x1804	; 0x1804 <vListInsert>
    39c4:	80 e0       	ldi	r24, 0x00	; 0
    39c6:	03 c0       	rjmp	.+6      	; 0x39ce <prvInsertTimerInActiveList+0x84>
    39c8:	81 e0       	ldi	r24, 0x01	; 1
    39ca:	01 c0       	rjmp	.+2      	; 0x39ce <prvInsertTimerInActiveList+0x84>
    39cc:	81 e0       	ldi	r24, 0x01	; 1
    39ce:	1f 91       	pop	r17
    39d0:	0f 91       	pop	r16
    39d2:	ff 90       	pop	r15
    39d4:	ef 90       	pop	r14
    39d6:	df 90       	pop	r13
    39d8:	cf 90       	pop	r12
    39da:	08 95       	ret

000039dc <prvCheckForValidListAndQueue>:
    39dc:	0f b6       	in	r0, 0x3f	; 63
    39de:	f8 94       	cli
    39e0:	0f 92       	push	r0
    39e2:	80 91 ba 19 	lds	r24, 0x19BA	; 0x8019ba <xTimerQueue>
    39e6:	90 91 bb 19 	lds	r25, 0x19BB	; 0x8019bb <xTimerQueue+0x1>
    39ea:	89 2b       	or	r24, r25
    39ec:	e9 f4       	brne	.+58     	; 0x3a28 <prvCheckForValidListAndQueue+0x4c>
    39ee:	8b ec       	ldi	r24, 0xCB	; 203
    39f0:	99 e1       	ldi	r25, 0x19	; 25
    39f2:	0e 94 cc 0b 	call	0x1798	; 0x1798 <vListInitialise>
    39f6:	80 ec       	ldi	r24, 0xC0	; 192
    39f8:	99 e1       	ldi	r25, 0x19	; 25
    39fa:	0e 94 cc 0b 	call	0x1798	; 0x1798 <vListInitialise>
    39fe:	8b ec       	ldi	r24, 0xCB	; 203
    3a00:	99 e1       	ldi	r25, 0x19	; 25
    3a02:	90 93 bf 19 	sts	0x19BF, r25	; 0x8019bf <pxCurrentTimerList+0x1>
    3a06:	80 93 be 19 	sts	0x19BE, r24	; 0x8019be <pxCurrentTimerList>
    3a0a:	80 ec       	ldi	r24, 0xC0	; 192
    3a0c:	99 e1       	ldi	r25, 0x19	; 25
    3a0e:	90 93 bd 19 	sts	0x19BD, r25	; 0x8019bd <pxOverflowTimerList+0x1>
    3a12:	80 93 bc 19 	sts	0x19BC, r24	; 0x8019bc <pxOverflowTimerList>
    3a16:	40 e0       	ldi	r20, 0x00	; 0
    3a18:	67 e0       	ldi	r22, 0x07	; 7
    3a1a:	8a e0       	ldi	r24, 0x0A	; 10
    3a1c:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <xQueueGenericCreate>
    3a20:	90 93 bb 19 	sts	0x19BB, r25	; 0x8019bb <xTimerQueue+0x1>
    3a24:	80 93 ba 19 	sts	0x19BA, r24	; 0x8019ba <xTimerQueue>
    3a28:	0f 90       	pop	r0
    3a2a:	0f be       	out	0x3f, r0	; 63
    3a2c:	08 95       	ret

00003a2e <xTimerCreateTimerTask>:
    3a2e:	ef 92       	push	r14
    3a30:	ff 92       	push	r15
    3a32:	0f 93       	push	r16
    3a34:	d3 df       	rcall	.-90     	; 0x39dc <prvCheckForValidListAndQueue>
    3a36:	80 91 ba 19 	lds	r24, 0x19BA	; 0x8019ba <xTimerQueue>
    3a3a:	90 91 bb 19 	lds	r25, 0x19BB	; 0x8019bb <xTimerQueue+0x1>
    3a3e:	89 2b       	or	r24, r25
    3a40:	91 f0       	breq	.+36     	; 0x3a66 <xTimerCreateTimerTask+0x38>
    3a42:	0f 2e       	mov	r0, r31
    3a44:	f8 eb       	ldi	r31, 0xB8	; 184
    3a46:	ef 2e       	mov	r14, r31
    3a48:	f9 e1       	ldi	r31, 0x19	; 25
    3a4a:	ff 2e       	mov	r15, r31
    3a4c:	f0 2d       	mov	r31, r0
    3a4e:	03 e0       	ldi	r16, 0x03	; 3
    3a50:	20 e0       	ldi	r18, 0x00	; 0
    3a52:	30 e0       	ldi	r19, 0x00	; 0
    3a54:	45 e5       	ldi	r20, 0x55	; 85
    3a56:	50 e0       	ldi	r21, 0x00	; 0
    3a58:	68 e6       	ldi	r22, 0x68	; 104
    3a5a:	75 e0       	ldi	r23, 0x05	; 5
    3a5c:	87 e0       	ldi	r24, 0x07	; 7
    3a5e:	91 e0       	ldi	r25, 0x01	; 1
    3a60:	0e 94 16 15 	call	0x2a2c	; 0x2a2c <xTaskCreate>
    3a64:	01 c0       	rjmp	.+2      	; 0x3a68 <xTimerCreateTimerTask+0x3a>
    3a66:	80 e0       	ldi	r24, 0x00	; 0
    3a68:	0f 91       	pop	r16
    3a6a:	ff 90       	pop	r15
    3a6c:	ef 90       	pop	r14
    3a6e:	08 95       	ret

00003a70 <xTimerGenericCommand>:
    }
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    3a70:	8f 92       	push	r8
    3a72:	9f 92       	push	r9
    3a74:	af 92       	push	r10
    3a76:	bf 92       	push	r11
    3a78:	cf 92       	push	r12
    3a7a:	df 92       	push	r13
    3a7c:	ef 92       	push	r14
    3a7e:	ff 92       	push	r15
    3a80:	0f 93       	push	r16
    3a82:	1f 93       	push	r17
    3a84:	cf 93       	push	r28
    3a86:	df 93       	push	r29
    3a88:	cd b7       	in	r28, 0x3d	; 61
    3a8a:	de b7       	in	r29, 0x3e	; 62
    3a8c:	27 97       	sbiw	r28, 0x07	; 7
    3a8e:	0f b6       	in	r0, 0x3f	; 63
    3a90:	f8 94       	cli
    3a92:	de bf       	out	0x3e, r29	; 62
    3a94:	0f be       	out	0x3f, r0	; 63
    3a96:	cd bf       	out	0x3d, r28	; 61

    configASSERT( xTimer );

    /* Send a message to the timer service task to perform a particular action
    on a particular timer definition. */
    if( xTimerQueue != NULL )
    3a98:	e0 91 ba 19 	lds	r30, 0x19BA	; 0x8019ba <xTimerQueue>
    3a9c:	f0 91 bb 19 	lds	r31, 0x19BB	; 0x8019bb <xTimerQueue+0x1>
    3aa0:	30 97       	sbiw	r30, 0x00	; 0
    3aa2:	81 f1       	breq	.+96     	; 0x3b04 <xTimerGenericCommand+0x94>
    {
        /* Send a command to the timer service task to start the xTimer timer. */
        xMessage.xMessageID = xCommandID;
    3aa4:	69 83       	std	Y+1, r22	; 0x01
        xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    3aa6:	2a 83       	std	Y+2, r18	; 0x02
    3aa8:	3b 83       	std	Y+3, r19	; 0x03
    3aaa:	4c 83       	std	Y+4, r20	; 0x04
    3aac:	5d 83       	std	Y+5, r21	; 0x05
        xMessage.u.xTimerParameters.pxTimer = xTimer;
    3aae:	9f 83       	std	Y+7, r25	; 0x07
    3ab0:	8e 83       	std	Y+6, r24	; 0x06

        if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    3ab2:	66 30       	cpi	r22, 0x06	; 6
    3ab4:	f4 f4       	brge	.+60     	; 0x3af2 <xTimerGenericCommand+0x82>
        {
            if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    3ab6:	68 dc       	rcall	.-1840   	; 0x3388 <xTaskGetSchedulerState>
    3ab8:	82 30       	cpi	r24, 0x02	; 2
    3aba:	69 f4       	brne	.+26     	; 0x3ad6 <xTimerGenericCommand+0x66>
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    3abc:	00 e0       	ldi	r16, 0x00	; 0
    3abe:	a7 01       	movw	r20, r14
    3ac0:	96 01       	movw	r18, r12
    3ac2:	be 01       	movw	r22, r28
    3ac4:	6f 5f       	subi	r22, 0xFF	; 255
    3ac6:	7f 4f       	sbci	r23, 0xFF	; 255
    3ac8:	80 91 ba 19 	lds	r24, 0x19BA	; 0x8019ba <xTimerQueue>
    3acc:	90 91 bb 19 	lds	r25, 0x19BB	; 0x8019bb <xTimerQueue+0x1>
    3ad0:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <xQueueGenericSend>
    3ad4:	18 c0       	rjmp	.+48     	; 0x3b06 <xTimerGenericCommand+0x96>
            }
            else
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    3ad6:	00 e0       	ldi	r16, 0x00	; 0
    3ad8:	20 e0       	ldi	r18, 0x00	; 0
    3ada:	30 e0       	ldi	r19, 0x00	; 0
    3adc:	a9 01       	movw	r20, r18
    3ade:	be 01       	movw	r22, r28
    3ae0:	6f 5f       	subi	r22, 0xFF	; 255
    3ae2:	7f 4f       	sbci	r23, 0xFF	; 255
    3ae4:	80 91 ba 19 	lds	r24, 0x19BA	; 0x8019ba <xTimerQueue>
    3ae8:	90 91 bb 19 	lds	r25, 0x19BB	; 0x8019bb <xTimerQueue+0x1>
    3aec:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <xQueueGenericSend>
    3af0:	0a c0       	rjmp	.+20     	; 0x3b06 <xTimerGenericCommand+0x96>
            }
        }
        else
        {
            xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    3af2:	20 e0       	ldi	r18, 0x00	; 0
    3af4:	a8 01       	movw	r20, r16
    3af6:	be 01       	movw	r22, r28
    3af8:	6f 5f       	subi	r22, 0xFF	; 255
    3afa:	7f 4f       	sbci	r23, 0xFF	; 255
    3afc:	cf 01       	movw	r24, r30
    3afe:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <xQueueGenericSendFromISR>
    3b02:	01 c0       	rjmp	.+2      	; 0x3b06 <xTimerGenericCommand+0x96>
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
    3b04:	80 e0       	ldi	r24, 0x00	; 0
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xReturn;
}
    3b06:	27 96       	adiw	r28, 0x07	; 7
    3b08:	0f b6       	in	r0, 0x3f	; 63
    3b0a:	f8 94       	cli
    3b0c:	de bf       	out	0x3e, r29	; 62
    3b0e:	0f be       	out	0x3f, r0	; 63
    3b10:	cd bf       	out	0x3d, r28	; 61
    3b12:	df 91       	pop	r29
    3b14:	cf 91       	pop	r28
    3b16:	1f 91       	pop	r17
    3b18:	0f 91       	pop	r16
    3b1a:	ff 90       	pop	r15
    3b1c:	ef 90       	pop	r14
    3b1e:	df 90       	pop	r13
    3b20:	cf 90       	pop	r12
    3b22:	bf 90       	pop	r11
    3b24:	af 90       	pop	r10
    3b26:	9f 90       	pop	r9
    3b28:	8f 90       	pop	r8
    3b2a:	08 95       	ret

00003b2c <prvSampleTimeNow>:
    return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    3b2c:	2f 92       	push	r2
    3b2e:	3f 92       	push	r3
    3b30:	4f 92       	push	r4
    3b32:	5f 92       	push	r5
    3b34:	6f 92       	push	r6
    3b36:	7f 92       	push	r7
    3b38:	8f 92       	push	r8
    3b3a:	9f 92       	push	r9
    3b3c:	af 92       	push	r10
    3b3e:	bf 92       	push	r11
    3b40:	cf 92       	push	r12
    3b42:	df 92       	push	r13
    3b44:	ef 92       	push	r14
    3b46:	ff 92       	push	r15
    3b48:	0f 93       	push	r16
    3b4a:	1f 93       	push	r17
    3b4c:	cf 93       	push	r28
    3b4e:	df 93       	push	r29
    3b50:	1c 01       	movw	r2, r24
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

    xTimeNow = xTaskGetTickCount();
    3b52:	cd d8       	rcall	.-3686   	; 0x2cee <xTaskGetTickCount>
    3b54:	2b 01       	movw	r4, r22
    3b56:	3c 01       	movw	r6, r24

    if( xTimeNow < xLastTime )
    3b58:	80 91 b4 19 	lds	r24, 0x19B4	; 0x8019b4 <xLastTime.2432>
    3b5c:	90 91 b5 19 	lds	r25, 0x19B5	; 0x8019b5 <xLastTime.2432+0x1>
    3b60:	a0 91 b6 19 	lds	r26, 0x19B6	; 0x8019b6 <xLastTime.2432+0x2>
    3b64:	b0 91 b7 19 	lds	r27, 0x19B7	; 0x8019b7 <xLastTime.2432+0x3>
    3b68:	48 16       	cp	r4, r24
    3b6a:	59 06       	cpc	r5, r25
    3b6c:	6a 06       	cpc	r6, r26
    3b6e:	7b 06       	cpc	r7, r27
    3b70:	08 f0       	brcs	.+2      	; 0x3b74 <prvSampleTimeNow+0x48>
    3b72:	53 c0       	rjmp	.+166    	; 0x3c1a <prvSampleTimeNow+0xee>
    3b74:	3b c0       	rjmp	.+118    	; 0x3bec <prvSampleTimeNow+0xc0>
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    {
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    3b76:	07 80       	ldd	r0, Z+7	; 0x07
    3b78:	f0 85       	ldd	r31, Z+8	; 0x08
    3b7a:	e0 2d       	mov	r30, r0
    3b7c:	80 80       	ld	r8, Z
    3b7e:	91 80       	ldd	r9, Z+1	; 0x01
    3b80:	a2 80       	ldd	r10, Z+2	; 0x02
    3b82:	b3 80       	ldd	r11, Z+3	; 0x03

        /* Remove the timer from the list. */
        pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    3b84:	c0 85       	ldd	r28, Z+8	; 0x08
    3b86:	d1 85       	ldd	r29, Z+9	; 0x09
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3b88:	8e 01       	movw	r16, r28
    3b8a:	0e 5f       	subi	r16, 0xFE	; 254
    3b8c:	1f 4f       	sbci	r17, 0xFF	; 255
    3b8e:	c8 01       	movw	r24, r16
    3b90:	0e 94 3f 0c 	call	0x187e	; 0x187e <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* Execute its callback, then send a command to restart the timer if
        it is an auto-reload timer.  It cannot be restarted here as the lists
        have not yet been switched. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3b94:	ec 89       	ldd	r30, Y+20	; 0x14
    3b96:	fd 89       	ldd	r31, Y+21	; 0x15
    3b98:	ce 01       	movw	r24, r28
    3b9a:	19 95       	eicall

        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    3b9c:	8f 89       	ldd	r24, Y+23	; 0x17
    3b9e:	82 ff       	sbrs	r24, 2
    3ba0:	25 c0       	rjmp	.+74     	; 0x3bec <prvSampleTimeNow+0xc0>
            the timer going into the same timer list then it has already expired
            and the timer should be re-inserted into the current list so it is
            processed again within this loop.  Otherwise a command should be sent
            to restart the timer to ensure it is only inserted into a list after
            the lists have been swapped. */
            xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    3ba2:	8e 85       	ldd	r24, Y+14	; 0x0e
    3ba4:	9f 85       	ldd	r25, Y+15	; 0x0f
    3ba6:	a8 89       	ldd	r26, Y+16	; 0x10
    3ba8:	b9 89       	ldd	r27, Y+17	; 0x11
    3baa:	88 0d       	add	r24, r8
    3bac:	99 1d       	adc	r25, r9
    3bae:	aa 1d       	adc	r26, r10
    3bb0:	bb 1d       	adc	r27, r11
            if( xReloadTime > xNextExpireTime )
    3bb2:	88 16       	cp	r8, r24
    3bb4:	99 06       	cpc	r9, r25
    3bb6:	aa 06       	cpc	r10, r26
    3bb8:	bb 06       	cpc	r11, r27
    3bba:	70 f4       	brcc	.+28     	; 0x3bd8 <prvSampleTimeNow+0xac>
            {
                listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    3bbc:	8a 83       	std	Y+2, r24	; 0x02
    3bbe:	9b 83       	std	Y+3, r25	; 0x03
    3bc0:	ac 83       	std	Y+4, r26	; 0x04
    3bc2:	bd 83       	std	Y+5, r27	; 0x05
                listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    3bc4:	db 87       	std	Y+11, r29	; 0x0b
    3bc6:	ca 87       	std	Y+10, r28	; 0x0a
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    3bc8:	b8 01       	movw	r22, r16
    3bca:	80 91 be 19 	lds	r24, 0x19BE	; 0x8019be <pxCurrentTimerList>
    3bce:	90 91 bf 19 	lds	r25, 0x19BF	; 0x8019bf <pxCurrentTimerList+0x1>
    3bd2:	0e 94 02 0c 	call	0x1804	; 0x1804 <vListInsert>
    3bd6:	0a c0       	rjmp	.+20     	; 0x3bec <prvSampleTimeNow+0xc0>
            }
            else
            {
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    3bd8:	c1 2c       	mov	r12, r1
    3bda:	d1 2c       	mov	r13, r1
    3bdc:	76 01       	movw	r14, r12
    3bde:	00 e0       	ldi	r16, 0x00	; 0
    3be0:	10 e0       	ldi	r17, 0x00	; 0
    3be2:	a5 01       	movw	r20, r10
    3be4:	94 01       	movw	r18, r8
    3be6:	60 e0       	ldi	r22, 0x00	; 0
    3be8:	ce 01       	movw	r24, r28
    3bea:	42 df       	rcall	.-380    	; 0x3a70 <xTimerGenericCommand>

    /* The tick count has overflowed.  The timer lists must be switched.
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    3bec:	e0 91 be 19 	lds	r30, 0x19BE	; 0x8019be <pxCurrentTimerList>
    3bf0:	f0 91 bf 19 	lds	r31, 0x19BF	; 0x8019bf <pxCurrentTimerList+0x1>
    3bf4:	80 81       	ld	r24, Z
    3bf6:	81 11       	cpse	r24, r1
    3bf8:	be cf       	rjmp	.-132    	; 0x3b76 <prvSampleTimeNow+0x4a>
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxTemp = pxCurrentTimerList;
    pxCurrentTimerList = pxOverflowTimerList;
    3bfa:	80 91 bc 19 	lds	r24, 0x19BC	; 0x8019bc <pxOverflowTimerList>
    3bfe:	90 91 bd 19 	lds	r25, 0x19BD	; 0x8019bd <pxOverflowTimerList+0x1>
    3c02:	90 93 bf 19 	sts	0x19BF, r25	; 0x8019bf <pxCurrentTimerList+0x1>
    3c06:	80 93 be 19 	sts	0x19BE, r24	; 0x8019be <pxCurrentTimerList>
    pxOverflowTimerList = pxTemp;
    3c0a:	f0 93 bd 19 	sts	0x19BD, r31	; 0x8019bd <pxOverflowTimerList+0x1>
    3c0e:	e0 93 bc 19 	sts	0x19BC, r30	; 0x8019bc <pxOverflowTimerList>
    xTimeNow = xTaskGetTickCount();

    if( xTimeNow < xLastTime )
    {
        prvSwitchTimerLists();
        *pxTimerListsWereSwitched = pdTRUE;
    3c12:	81 e0       	ldi	r24, 0x01	; 1
    3c14:	f1 01       	movw	r30, r2
    3c16:	80 83       	st	Z, r24
    3c18:	02 c0       	rjmp	.+4      	; 0x3c1e <prvSampleTimeNow+0xf2>
    }
    else
    {
        *pxTimerListsWereSwitched = pdFALSE;
    3c1a:	f1 01       	movw	r30, r2
    3c1c:	10 82       	st	Z, r1
    }

    xLastTime = xTimeNow;
    3c1e:	40 92 b4 19 	sts	0x19B4, r4	; 0x8019b4 <xLastTime.2432>
    3c22:	50 92 b5 19 	sts	0x19B5, r5	; 0x8019b5 <xLastTime.2432+0x1>
    3c26:	60 92 b6 19 	sts	0x19B6, r6	; 0x8019b6 <xLastTime.2432+0x2>
    3c2a:	70 92 b7 19 	sts	0x19B7, r7	; 0x8019b7 <xLastTime.2432+0x3>

    return xTimeNow;
}
    3c2e:	c3 01       	movw	r24, r6
    3c30:	b2 01       	movw	r22, r4
    3c32:	df 91       	pop	r29
    3c34:	cf 91       	pop	r28
    3c36:	1f 91       	pop	r17
    3c38:	0f 91       	pop	r16
    3c3a:	ff 90       	pop	r15
    3c3c:	ef 90       	pop	r14
    3c3e:	df 90       	pop	r13
    3c40:	cf 90       	pop	r12
    3c42:	bf 90       	pop	r11
    3c44:	af 90       	pop	r10
    3c46:	9f 90       	pop	r9
    3c48:	8f 90       	pop	r8
    3c4a:	7f 90       	pop	r7
    3c4c:	6f 90       	pop	r6
    3c4e:	5f 90       	pop	r5
    3c50:	4f 90       	pop	r4
    3c52:	3f 90       	pop	r3
    3c54:	2f 90       	pop	r2
    3c56:	08 95       	ret

00003c58 <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    3c58:	08 95       	ret

00003c5a <vApplicationMallocFailedHook>:
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    3c5a:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    3c5c:	2f 9a       	sbi	0x05, 7	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3c5e:	2f ef       	ldi	r18, 0xFF	; 255
    3c60:	80 e7       	ldi	r24, 0x70	; 112
    3c62:	92 e0       	ldi	r25, 0x02	; 2
    3c64:	21 50       	subi	r18, 0x01	; 1
    3c66:	80 40       	sbci	r24, 0x00	; 0
    3c68:	90 40       	sbci	r25, 0x00	; 0
    3c6a:	e1 f7       	brne	.-8      	; 0x3c64 <vApplicationMallocFailedHook+0xa>
    3c6c:	00 c0       	rjmp	.+0      	; 0x3c6e <vApplicationMallocFailedHook+0x14>
    3c6e:	00 00       	nop
    for(;;)
    {
        _delay_ms(50);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED fast blink.
    3c70:	1f 9a       	sbi	0x03, 7	; 3
    3c72:	f5 cf       	rjmp	.-22     	; 0x3c5e <vApplicationMallocFailedHook+0x4>

00003c74 <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook( TaskHandle_t xTask, portCHAR *pcTaskName ) __attribute__((weak));

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)), portCHAR *pcTaskName __attribute__((unused))  )
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    3c74:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    3c76:	2f 9a       	sbi	0x05, 7	; 5
    3c78:	2f ef       	ldi	r18, 0xFF	; 255
    3c7a:	87 ea       	ldi	r24, 0xA7	; 167
    3c7c:	91 e6       	ldi	r25, 0x61	; 97
    3c7e:	21 50       	subi	r18, 0x01	; 1
    3c80:	80 40       	sbci	r24, 0x00	; 0
    3c82:	90 40       	sbci	r25, 0x00	; 0
    3c84:	e1 f7       	brne	.-8      	; 0x3c7e <vApplicationStackOverflowHook+0xa>
    3c86:	00 c0       	rjmp	.+0      	; 0x3c88 <vApplicationStackOverflowHook+0x14>
    3c88:	00 00       	nop
    for(;;)
    {
        _delay_ms(2000);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED slow blink.
    3c8a:	1f 9a       	sbi	0x03, 7	; 3
    3c8c:	f5 cf       	rjmp	.-22     	; 0x3c78 <vApplicationStackOverflowHook+0x4>

00003c8e <create_tasks_and_semaphores>:
	hih8120Create();
	
}

void doStuff()
{
    3c8e:	8f 92       	push	r8
    3c90:	9f 92       	push	r9
    3c92:	af 92       	push	r10
    3c94:	bf 92       	push	r11
    3c96:	cf 92       	push	r12
    3c98:	df 92       	push	r13
    3c9a:	ef 92       	push	r14
    3c9c:	ff 92       	push	r15
    3c9e:	0f 93       	push	r16
    3ca0:	1f 93       	push	r17
    3ca2:	cf 93       	push	r28
    3ca4:	df 93       	push	r29
    3ca6:	0e 94 29 09 	call	0x1252	; 0x1252 <xEventGroupCreate>
    3caa:	90 93 46 1b 	sts	0x1B46, r25	; 0x801b46 <startMeasureEventGroup+0x1>
    3cae:	80 93 45 1b 	sts	0x1B45, r24	; 0x801b45 <startMeasureEventGroup>
    3cb2:	0e 94 29 09 	call	0x1252	; 0x1252 <xEventGroupCreate>
    3cb6:	90 93 2c 1b 	sts	0x1B2C, r25	; 0x801b2c <readyEventGroup+0x1>
    3cba:	80 93 2b 1b 	sts	0x1B2B, r24	; 0x801b2b <readyEventGroup>
    3cbe:	41 e0       	ldi	r20, 0x01	; 1
    3cc0:	60 e0       	ldi	r22, 0x00	; 0
    3cc2:	70 e0       	ldi	r23, 0x00	; 0
    3cc4:	84 e6       	ldi	r24, 0x64	; 100
    3cc6:	90 e0       	ldi	r25, 0x00	; 0
    3cc8:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <xStreamBufferGenericCreate>
    3ccc:	90 93 28 1b 	sts	0x1B28, r25	; 0x801b28 <xMessageBuffer+0x1>
    3cd0:	80 93 27 1b 	sts	0x1B27, r24	; 0x801b27 <xMessageBuffer>
    3cd4:	41 e0       	ldi	r20, 0x01	; 1
    3cd6:	60 e0       	ldi	r22, 0x00	; 0
    3cd8:	70 e0       	ldi	r23, 0x00	; 0
    3cda:	86 e1       	ldi	r24, 0x16	; 22
    3cdc:	90 e0       	ldi	r25, 0x00	; 0
    3cde:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <xStreamBufferGenericCreate>
    3ce2:	90 93 2a 1b 	sts	0x1B2A, r25	; 0x801b2a <_downlinkMessagebuffer+0x1>
    3ce6:	80 93 29 1b 	sts	0x1B29, r24	; 0x801b29 <_downlinkMessagebuffer>
    3cea:	0e 94 31 03 	call	0x662	; 0x662 <configuration_create>
    3cee:	60 91 27 1b 	lds	r22, 0x1B27	; 0x801b27 <xMessageBuffer>
    3cf2:	70 91 28 1b 	lds	r23, 0x1B28	; 0x801b28 <xMessageBuffer+0x1>
    3cf6:	81 e0       	ldi	r24, 0x01	; 1
    3cf8:	0e 94 b0 07 	call	0xf60	; 0xf60 <lora_UpLinkHandler_create>
    3cfc:	60 91 29 1b 	lds	r22, 0x1B29	; 0x801b29 <_downlinkMessagebuffer>
    3d00:	70 91 2a 1b 	lds	r23, 0x1B2A	; 0x801b2a <_downlinkMessagebuffer+0x1>
    3d04:	41 e0       	ldi	r20, 0x01	; 1
    3d06:	50 e0       	ldi	r21, 0x00	; 0
    3d08:	81 e0       	ldi	r24, 0x01	; 1
    3d0a:	90 e0       	ldi	r25, 0x00	; 0
    3d0c:	0e 94 48 05 	call	0xa90	; 0xa90 <lora_DownLinkHandler_create>
    3d10:	e0 90 2b 1b 	lds	r14, 0x1B2B	; 0x801b2b <readyEventGroup>
    3d14:	f0 90 2c 1b 	lds	r15, 0x1B2C	; 0x801b2c <readyEventGroup+0x1>
    3d18:	40 91 45 1b 	lds	r20, 0x1B45	; 0x801b45 <startMeasureEventGroup>
    3d1c:	50 91 46 1b 	lds	r21, 0x1B46	; 0x801b46 <startMeasureEventGroup+0x1>
    3d20:	a1 2c       	mov	r10, r1
    3d22:	b1 2c       	mov	r11, r1
    3d24:	65 01       	movw	r12, r10
    3d26:	68 94       	set
    3d28:	a4 f8       	bld	r10, 4
    3d2a:	01 e0       	ldi	r16, 0x01	; 1
    3d2c:	10 e0       	ldi	r17, 0x00	; 0
    3d2e:	20 e0       	ldi	r18, 0x00	; 0
    3d30:	30 e0       	ldi	r19, 0x00	; 0
    3d32:	60 ec       	ldi	r22, 0xC0	; 192
    3d34:	81 e0       	ldi	r24, 0x01	; 1
    3d36:	0e 94 bc 06 	call	0xd78	; 0xd78 <humAndTempReader_create>
    3d3a:	c8 2f       	mov	r28, r24
    3d3c:	d9 2f       	mov	r29, r25
    3d3e:	e0 90 2b 1b 	lds	r14, 0x1B2B	; 0x801b2b <readyEventGroup>
    3d42:	f0 90 2c 1b 	lds	r15, 0x1B2C	; 0x801b2c <readyEventGroup+0x1>
    3d46:	40 91 45 1b 	lds	r20, 0x1B45	; 0x801b45 <startMeasureEventGroup>
    3d4a:	50 91 46 1b 	lds	r21, 0x1B46	; 0x801b46 <startMeasureEventGroup+0x1>
    3d4e:	a1 2c       	mov	r10, r1
    3d50:	b1 2c       	mov	r11, r1
    3d52:	65 01       	movw	r12, r10
    3d54:	68 94       	set
    3d56:	a5 f8       	bld	r10, 5
    3d58:	02 e0       	ldi	r16, 0x02	; 2
    3d5a:	10 e0       	ldi	r17, 0x00	; 0
    3d5c:	20 e0       	ldi	r18, 0x00	; 0
    3d5e:	30 e0       	ldi	r19, 0x00	; 0
    3d60:	60 ec       	ldi	r22, 0xC0	; 192
    3d62:	81 e0       	ldi	r24, 0x01	; 1
    3d64:	0e 94 73 02 	call	0x4e6	; 0x4e6 <co2Reader_create>
    3d68:	e0 90 2b 1b 	lds	r14, 0x1B2B	; 0x801b2b <readyEventGroup>
    3d6c:	f0 90 2c 1b 	lds	r15, 0x1B2C	; 0x801b2c <readyEventGroup+0x1>
    3d70:	40 91 45 1b 	lds	r20, 0x1B45	; 0x801b45 <startMeasureEventGroup>
    3d74:	50 91 46 1b 	lds	r21, 0x1B46	; 0x801b46 <startMeasureEventGroup+0x1>
    3d78:	20 91 28 1b 	lds	r18, 0x1B28	; 0x801b28 <xMessageBuffer+0x1>
    3d7c:	2f 93       	push	r18
    3d7e:	20 91 27 1b 	lds	r18, 0x1B27	; 0x801b27 <xMessageBuffer>
    3d82:	2f 93       	push	r18
    3d84:	df 93       	push	r29
    3d86:	cf 93       	push	r28
    3d88:	4c 01       	movw	r8, r24
    3d8a:	0f 2e       	mov	r0, r31
    3d8c:	f0 e3       	ldi	r31, 0x30	; 48
    3d8e:	af 2e       	mov	r10, r31
    3d90:	b1 2c       	mov	r11, r1
    3d92:	c1 2c       	mov	r12, r1
    3d94:	d1 2c       	mov	r13, r1
    3d96:	f0 2d       	mov	r31, r0
    3d98:	03 e0       	ldi	r16, 0x03	; 3
    3d9a:	10 e0       	ldi	r17, 0x00	; 0
    3d9c:	20 e0       	ldi	r18, 0x00	; 0
    3d9e:	30 e0       	ldi	r19, 0x00	; 0
    3da0:	60 ec       	ldi	r22, 0xC0	; 192
    3da2:	82 e0       	ldi	r24, 0x02	; 2
    3da4:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <device_create>
    3da8:	0f 90       	pop	r0
    3daa:	0f 90       	pop	r0
    3dac:	0f 90       	pop	r0
    3dae:	0f 90       	pop	r0
    3db0:	df 91       	pop	r29
    3db2:	cf 91       	pop	r28
    3db4:	1f 91       	pop	r17
    3db6:	0f 91       	pop	r16
    3db8:	ff 90       	pop	r15
    3dba:	ef 90       	pop	r14
    3dbc:	df 90       	pop	r13
    3dbe:	cf 90       	pop	r12
    3dc0:	bf 90       	pop	r11
    3dc2:	af 90       	pop	r10
    3dc4:	9f 90       	pop	r9
    3dc6:	8f 90       	pop	r8
    3dc8:	08 95       	ret

00003dca <initialiseSystem>:
    3dca:	81 b1       	in	r24, 0x01	; 1
    3dcc:	81 68       	ori	r24, 0x81	; 129
    3dce:	81 b9       	out	0x01, r24	; 1
    3dd0:	0e 94 13 09 	call	0x1226	; 0x1226 <trace_init>
    3dd4:	80 e0       	ldi	r24, 0x00	; 0
    3dd6:	0e 94 f7 29 	call	0x53ee	; 0x53ee <stdioCreate>
    3dda:	85 e0       	ldi	r24, 0x05	; 5
    3ddc:	11 d0       	rcall	.+34     	; 0x3e00 <hal_create>
    3dde:	60 91 29 1b 	lds	r22, 0x1B29	; 0x801b29 <_downlinkMessagebuffer>
    3de2:	70 91 2a 1b 	lds	r23, 0x1B2A	; 0x801b2a <_downlinkMessagebuffer+0x1>
    3de6:	81 e0       	ldi	r24, 0x01	; 1
    3de8:	c3 d3       	rcall	.+1926   	; 0x4570 <lora_driver_create>
    3dea:	69 c0       	rjmp	.+210    	; 0x3ebe <hih8120Create>
    3dec:	08 95       	ret

00003dee <main>:
	//bytesToSend=xMessageBufferSend(xMessageBuffer,(void*) &payload,sizeof(payload),portMAX_DELAY);
}
/*-----------------------------------------------------------*/
int main(void)
{
	initialiseSystem(); // Must be done as the very first thing!!
    3dee:	ed df       	rcall	.-38     	; 0x3dca <initialiseSystem>
	printf("Program Started!!\n");
    3df0:	80 e7       	ldi	r24, 0x70	; 112
    3df2:	95 e0       	ldi	r25, 0x05	; 5
    3df4:	0e 94 a4 2f 	call	0x5f48	; 0x5f48 <puts>
	create_tasks_and_semaphores();
    3df8:	4a df       	rcall	.-364    	; 0x3c8e <create_tasks_and_semaphores>
	vTaskStartScheduler(); // Initialise and run the freeRTOS scheduler. Execution should never return from here.
    3dfa:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <vTaskStartScheduler>
    3dfe:	ff cf       	rjmp	.-2      	; 0x3dfe <main+0x10>

00003e00 <hal_create>:
    3e00:	e7 e4       	ldi	r30, 0x47	; 71
    3e02:	fb e1       	ldi	r31, 0x1B	; 27
    3e04:	2d e0       	ldi	r18, 0x0D	; 13
    3e06:	36 e2       	ldi	r19, 0x26	; 38
    3e08:	31 83       	std	Z+1, r19	; 0x01
    3e0a:	20 83       	st	Z, r18
    3e0c:	20 e1       	ldi	r18, 0x10	; 16
    3e0e:	36 e2       	ldi	r19, 0x26	; 38
    3e10:	33 83       	std	Z+3, r19	; 0x03
    3e12:	22 83       	std	Z+2, r18	; 0x02
    3e14:	2b e1       	ldi	r18, 0x1B	; 27
    3e16:	36 e2       	ldi	r19, 0x26	; 38
    3e18:	35 83       	std	Z+5, r19	; 0x05
    3e1a:	24 83       	std	Z+4, r18	; 0x04
    3e1c:	2f e1       	ldi	r18, 0x1F	; 31
    3e1e:	36 e2       	ldi	r19, 0x26	; 38
    3e20:	37 83       	std	Z+7, r19	; 0x07
    3e22:	26 83       	std	Z+6, r18	; 0x06
    3e24:	25 e2       	ldi	r18, 0x25	; 37
    3e26:	36 e2       	ldi	r19, 0x26	; 38
    3e28:	31 87       	std	Z+9, r19	; 0x09
    3e2a:	20 87       	std	Z+8, r18	; 0x08
    3e2c:	21 e3       	ldi	r18, 0x31	; 49
    3e2e:	36 e2       	ldi	r19, 0x26	; 38
    3e30:	33 87       	std	Z+11, r19	; 0x0b
    3e32:	22 87       	std	Z+10, r18	; 0x0a
    3e34:	26 e3       	ldi	r18, 0x36	; 54
    3e36:	36 e2       	ldi	r19, 0x26	; 38
    3e38:	35 87       	std	Z+13, r19	; 0x0d
    3e3a:	24 87       	std	Z+12, r18	; 0x0c
    3e3c:	22 e4       	ldi	r18, 0x42	; 66
    3e3e:	36 e2       	ldi	r19, 0x26	; 38
    3e40:	37 87       	std	Z+15, r19	; 0x0f
    3e42:	26 87       	std	Z+14, r18	; 0x0e
    3e44:	22 e2       	ldi	r18, 0x22	; 34
    3e46:	36 e2       	ldi	r19, 0x26	; 38
    3e48:	31 8b       	std	Z+17, r19	; 0x11
    3e4a:	20 8b       	std	Z+16, r18	; 0x10
    3e4c:	27 e4       	ldi	r18, 0x47	; 71
    3e4e:	36 e2       	ldi	r19, 0x26	; 38
    3e50:	33 8b       	std	Z+19, r19	; 0x13
    3e52:	22 8b       	std	Z+18, r18	; 0x12
    3e54:	24 e5       	ldi	r18, 0x54	; 84
    3e56:	36 e2       	ldi	r19, 0x26	; 38
    3e58:	35 8b       	std	Z+21, r19	; 0x15
    3e5a:	24 8b       	std	Z+20, r18	; 0x14
    3e5c:	68 2f       	mov	r22, r24
    3e5e:	cf 01       	movw	r24, r30
    3e60:	53 c1       	rjmp	.+678    	; 0x4108 <led_create>
    3e62:	08 95       	ret

00003e64 <_hihTwiCallback>:
    3e64:	65 30       	cpi	r22, 0x05	; 5
    3e66:	f1 f4       	brne	.+60     	; 0x3ea4 <_hihTwiCallback+0x40>
    3e68:	fa 01       	movw	r30, r20
    3e6a:	80 81       	ld	r24, Z
    3e6c:	8f 73       	andi	r24, 0x3F	; 63
    3e6e:	90 e0       	ldi	r25, 0x00	; 0
    3e70:	98 2f       	mov	r25, r24
    3e72:	88 27       	eor	r24, r24
    3e74:	21 81       	ldd	r18, Z+1	; 0x01
    3e76:	82 2b       	or	r24, r18
    3e78:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <_hum+0x1>
    3e7c:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <_hum>
    3e80:	82 81       	ldd	r24, Z+2	; 0x02
    3e82:	f0 e4       	ldi	r31, 0x40	; 64
    3e84:	8f 9f       	mul	r24, r31
    3e86:	c0 01       	movw	r24, r0
    3e88:	11 24       	eor	r1, r1
    3e8a:	fa 01       	movw	r30, r20
    3e8c:	23 81       	ldd	r18, Z+3	; 0x03
    3e8e:	26 95       	lsr	r18
    3e90:	26 95       	lsr	r18
    3e92:	82 2b       	or	r24, r18
    3e94:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <_temp+0x1>
    3e98:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <_temp>
    3e9c:	81 e0       	ldi	r24, 0x01	; 1
    3e9e:	80 93 d6 19 	sts	0x19D6, r24	; 0x8019d6 <_measuringIsReady>
    3ea2:	08 95       	ret
    3ea4:	64 30       	cpi	r22, 0x04	; 4
    3ea6:	51 f0       	breq	.+20     	; 0x3ebc <_hihTwiCallback+0x58>
    3ea8:	80 e0       	ldi	r24, 0x00	; 0
    3eaa:	90 e4       	ldi	r25, 0x40	; 64
    3eac:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <_temp+0x1>
    3eb0:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <_temp>
    3eb4:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <_hum+0x1>
    3eb8:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <_hum>
    3ebc:	08 95       	ret

00003ebe <hih8120Create>:
    3ebe:	0f 93       	push	r16
    3ec0:	1f 93       	push	r17
    3ec2:	02 e3       	ldi	r16, 0x32	; 50
    3ec4:	1f e1       	ldi	r17, 0x1F	; 31
    3ec6:	20 e0       	ldi	r18, 0x00	; 0
    3ec8:	34 e2       	ldi	r19, 0x24	; 36
    3eca:	44 ef       	ldi	r20, 0xF4	; 244
    3ecc:	50 e0       	ldi	r21, 0x00	; 0
    3ece:	60 e0       	ldi	r22, 0x00	; 0
    3ed0:	87 e2       	ldi	r24, 0x27	; 39
    3ed2:	0e 94 31 2a 	call	0x5462	; 0x5462 <twiCreate>
    3ed6:	90 93 d8 19 	sts	0x19D8, r25	; 0x8019d8 <_hih8120Handler+0x1>
    3eda:	80 93 d7 19 	sts	0x19D7, r24	; 0x8019d7 <_hih8120Handler>
    3ede:	21 e0       	ldi	r18, 0x01	; 1
    3ee0:	89 2b       	or	r24, r25
    3ee2:	09 f0       	breq	.+2      	; 0x3ee6 <hih8120Create+0x28>
    3ee4:	20 e0       	ldi	r18, 0x00	; 0
    3ee6:	82 2f       	mov	r24, r18
    3ee8:	1f 91       	pop	r17
    3eea:	0f 91       	pop	r16
    3eec:	08 95       	ret

00003eee <hih8120IsReady>:
    3eee:	80 91 d6 19 	lds	r24, 0x19D6	; 0x8019d6 <_measuringIsReady>
    3ef2:	08 95       	ret

00003ef4 <hih8120Wakeup>:
    3ef4:	80 91 d7 19 	lds	r24, 0x19D7	; 0x8019d7 <_hih8120Handler>
    3ef8:	90 91 d8 19 	lds	r25, 0x19D8	; 0x8019d8 <_hih8120Handler+0x1>
    3efc:	00 97       	sbiw	r24, 0x00	; 0
    3efe:	59 f0       	breq	.+22     	; 0x3f16 <hih8120Wakeup+0x22>
    3f00:	40 e0       	ldi	r20, 0x00	; 0
    3f02:	60 e0       	ldi	r22, 0x00	; 0
    3f04:	70 e0       	ldi	r23, 0x00	; 0
    3f06:	0e 94 82 2a 	call	0x5504	; 0x5504 <twiTransmit>
    3f0a:	84 30       	cpi	r24, 0x04	; 4
    3f0c:	31 f4       	brne	.+12     	; 0x3f1a <hih8120Wakeup+0x26>
    3f0e:	10 92 d6 19 	sts	0x19D6, r1	; 0x8019d6 <_measuringIsReady>
    3f12:	80 e0       	ldi	r24, 0x00	; 0
    3f14:	08 95       	ret
    3f16:	82 e0       	ldi	r24, 0x02	; 2
    3f18:	08 95       	ret
    3f1a:	83 e0       	ldi	r24, 0x03	; 3
    3f1c:	08 95       	ret

00003f1e <hih8120Meassure>:
    3f1e:	80 91 d7 19 	lds	r24, 0x19D7	; 0x8019d7 <_hih8120Handler>
    3f22:	90 91 d8 19 	lds	r25, 0x19D8	; 0x8019d8 <_hih8120Handler+0x1>
    3f26:	00 97       	sbiw	r24, 0x00	; 0
    3f28:	39 f0       	breq	.+14     	; 0x3f38 <hih8120Meassure+0x1a>
    3f2a:	64 e0       	ldi	r22, 0x04	; 4
    3f2c:	0e 94 ce 2a 	call	0x559c	; 0x559c <twiReceive>
    3f30:	85 30       	cpi	r24, 0x05	; 5
    3f32:	21 f0       	breq	.+8      	; 0x3f3c <hih8120Meassure+0x1e>
    3f34:	83 e0       	ldi	r24, 0x03	; 3
    3f36:	08 95       	ret
    3f38:	82 e0       	ldi	r24, 0x02	; 2
    3f3a:	08 95       	ret
    3f3c:	80 e0       	ldi	r24, 0x00	; 0
    3f3e:	08 95       	ret

00003f40 <hih8120GetHumidity>:
    3f40:	60 91 08 02 	lds	r22, 0x0208	; 0x800208 <_hum>
    3f44:	70 91 09 02 	lds	r23, 0x0209	; 0x800209 <_hum+0x1>
    3f48:	80 e0       	ldi	r24, 0x00	; 0
    3f4a:	90 e0       	ldi	r25, 0x00	; 0
    3f4c:	0e 94 d8 2c 	call	0x59b0	; 0x59b0 <__floatunsisf>
    3f50:	20 e0       	ldi	r18, 0x00	; 0
    3f52:	30 e0       	ldi	r19, 0x00	; 0
    3f54:	48 ec       	ldi	r20, 0xC8	; 200
    3f56:	52 e4       	ldi	r21, 0x42	; 66
    3f58:	0e 94 66 2d 	call	0x5acc	; 0x5acc <__mulsf3>
    3f5c:	20 e0       	ldi	r18, 0x00	; 0
    3f5e:	38 ef       	ldi	r19, 0xF8	; 248
    3f60:	4f e7       	ldi	r20, 0x7F	; 127
    3f62:	56 e4       	ldi	r21, 0x46	; 70
    3f64:	0c 94 3f 2c 	jmp	0x587e	; 0x587e <__divsf3>
    3f68:	08 95       	ret

00003f6a <hih8120GetHumidityPercent_x10>:
    3f6a:	ea df       	rcall	.-44     	; 0x3f40 <hih8120GetHumidity>
    3f6c:	20 e0       	ldi	r18, 0x00	; 0
    3f6e:	30 e0       	ldi	r19, 0x00	; 0
    3f70:	40 e2       	ldi	r20, 0x20	; 32
    3f72:	51 e4       	ldi	r21, 0x41	; 65
    3f74:	0e 94 66 2d 	call	0x5acc	; 0x5acc <__mulsf3>
    3f78:	0e 94 ac 2c 	call	0x5958	; 0x5958 <__fixunssfsi>
    3f7c:	cb 01       	movw	r24, r22
    3f7e:	08 95       	ret

00003f80 <hih8120GetTemperature>:
    3f80:	60 91 06 02 	lds	r22, 0x0206	; 0x800206 <_temp>
    3f84:	70 91 07 02 	lds	r23, 0x0207	; 0x800207 <_temp+0x1>
    3f88:	80 e0       	ldi	r24, 0x00	; 0
    3f8a:	90 e0       	ldi	r25, 0x00	; 0
    3f8c:	0e 94 d8 2c 	call	0x59b0	; 0x59b0 <__floatunsisf>
    3f90:	20 e0       	ldi	r18, 0x00	; 0
    3f92:	30 e0       	ldi	r19, 0x00	; 0
    3f94:	45 e2       	ldi	r20, 0x25	; 37
    3f96:	53 e4       	ldi	r21, 0x43	; 67
    3f98:	0e 94 66 2d 	call	0x5acc	; 0x5acc <__mulsf3>
    3f9c:	20 e0       	ldi	r18, 0x00	; 0
    3f9e:	38 ef       	ldi	r19, 0xF8	; 248
    3fa0:	4f e7       	ldi	r20, 0x7F	; 127
    3fa2:	56 e4       	ldi	r21, 0x46	; 70
    3fa4:	0e 94 3f 2c 	call	0x587e	; 0x587e <__divsf3>
    3fa8:	20 e0       	ldi	r18, 0x00	; 0
    3faa:	30 e0       	ldi	r19, 0x00	; 0
    3fac:	40 e2       	ldi	r20, 0x20	; 32
    3fae:	52 e4       	ldi	r21, 0x42	; 66
    3fb0:	0c 94 da 2b 	jmp	0x57b4	; 0x57b4 <__subsf3>
    3fb4:	08 95       	ret

00003fb6 <hih8120GetTemperature_x10>:
    3fb6:	e4 df       	rcall	.-56     	; 0x3f80 <hih8120GetTemperature>
    3fb8:	20 e0       	ldi	r18, 0x00	; 0
    3fba:	30 e0       	ldi	r19, 0x00	; 0
    3fbc:	40 e2       	ldi	r20, 0x20	; 32
    3fbe:	51 e4       	ldi	r21, 0x41	; 65
    3fc0:	0e 94 66 2d 	call	0x5acc	; 0x5acc <__mulsf3>
    3fc4:	0e 94 a7 2c 	call	0x594e	; 0x594e <__fixsfsi>
    3fc8:	cb 01       	movw	r24, r22
    3fca:	08 95       	ret

00003fcc <_turn_off>:
    3fcc:	cf 93       	push	r28
    3fce:	df 93       	push	r29
    3fd0:	90 e0       	ldi	r25, 0x00	; 0
    3fd2:	fc 01       	movw	r30, r24
    3fd4:	ee 0f       	add	r30, r30
    3fd6:	ff 1f       	adc	r31, r31
    3fd8:	e8 0f       	add	r30, r24
    3fda:	f9 1f       	adc	r31, r25
    3fdc:	ee 0f       	add	r30, r30
    3fde:	ff 1f       	adc	r31, r31
    3fe0:	e7 52       	subi	r30, 0x27	; 39
    3fe2:	f6 4e       	sbci	r31, 0xE6	; 230
    3fe4:	23 81       	ldd	r18, Z+3	; 0x03
    3fe6:	21 11       	cpse	r18, r1
    3fe8:	0a c0       	rjmp	.+20     	; 0x3ffe <_turn_off+0x32>
    3fea:	ef 01       	movw	r28, r30
    3fec:	e0 91 4f 1b 	lds	r30, 0x1B4F	; 0x801b4f <register_access+0x8>
    3ff0:	f0 91 50 1b 	lds	r31, 0x1B50	; 0x801b50 <register_access+0x9>
    3ff4:	6a 81       	ldd	r22, Y+2	; 0x02
    3ff6:	88 81       	ld	r24, Y
    3ff8:	99 81       	ldd	r25, Y+1	; 0x01
    3ffa:	19 95       	eicall
    3ffc:	12 c0       	rjmp	.+36     	; 0x4022 <_turn_off+0x56>
    3ffe:	dc 01       	movw	r26, r24
    4000:	aa 0f       	add	r26, r26
    4002:	bb 1f       	adc	r27, r27
    4004:	ed 01       	movw	r28, r26
    4006:	c8 0f       	add	r28, r24
    4008:	d9 1f       	adc	r29, r25
    400a:	cc 0f       	add	r28, r28
    400c:	dd 1f       	adc	r29, r29
    400e:	c7 52       	subi	r28, 0x27	; 39
    4010:	d6 4e       	sbci	r29, 0xE6	; 230
    4012:	e0 91 59 1b 	lds	r30, 0x1B59	; 0x801b59 <register_access+0x12>
    4016:	f0 91 5a 1b 	lds	r31, 0x1B5A	; 0x801b5a <register_access+0x13>
    401a:	6a 81       	ldd	r22, Y+2	; 0x02
    401c:	88 81       	ld	r24, Y
    401e:	99 81       	ldd	r25, Y+1	; 0x01
    4020:	19 95       	eicall
    4022:	df 91       	pop	r29
    4024:	cf 91       	pop	r28
    4026:	08 95       	ret

00004028 <_turn_on>:
    4028:	cf 93       	push	r28
    402a:	df 93       	push	r29
    402c:	90 e0       	ldi	r25, 0x00	; 0
    402e:	fc 01       	movw	r30, r24
    4030:	ee 0f       	add	r30, r30
    4032:	ff 1f       	adc	r31, r31
    4034:	e8 0f       	add	r30, r24
    4036:	f9 1f       	adc	r31, r25
    4038:	ee 0f       	add	r30, r30
    403a:	ff 1f       	adc	r31, r31
    403c:	e7 52       	subi	r30, 0x27	; 39
    403e:	f6 4e       	sbci	r31, 0xE6	; 230
    4040:	23 81       	ldd	r18, Z+3	; 0x03
    4042:	21 11       	cpse	r18, r1
    4044:	0a c0       	rjmp	.+20     	; 0x405a <_turn_on+0x32>
    4046:	ef 01       	movw	r28, r30
    4048:	e0 91 59 1b 	lds	r30, 0x1B59	; 0x801b59 <register_access+0x12>
    404c:	f0 91 5a 1b 	lds	r31, 0x1B5A	; 0x801b5a <register_access+0x13>
    4050:	6a 81       	ldd	r22, Y+2	; 0x02
    4052:	88 81       	ld	r24, Y
    4054:	99 81       	ldd	r25, Y+1	; 0x01
    4056:	19 95       	eicall
    4058:	12 c0       	rjmp	.+36     	; 0x407e <_turn_on+0x56>
    405a:	dc 01       	movw	r26, r24
    405c:	aa 0f       	add	r26, r26
    405e:	bb 1f       	adc	r27, r27
    4060:	ed 01       	movw	r28, r26
    4062:	c8 0f       	add	r28, r24
    4064:	d9 1f       	adc	r29, r25
    4066:	cc 0f       	add	r28, r28
    4068:	dd 1f       	adc	r29, r29
    406a:	c7 52       	subi	r28, 0x27	; 39
    406c:	d6 4e       	sbci	r29, 0xE6	; 230
    406e:	e0 91 4f 1b 	lds	r30, 0x1B4F	; 0x801b4f <register_access+0x8>
    4072:	f0 91 50 1b 	lds	r31, 0x1B50	; 0x801b50 <register_access+0x9>
    4076:	6a 81       	ldd	r22, Y+2	; 0x02
    4078:	88 81       	ld	r24, Y
    407a:	99 81       	ldd	r25, Y+1	; 0x01
    407c:	19 95       	eicall
    407e:	df 91       	pop	r29
    4080:	cf 91       	pop	r28
    4082:	08 95       	ret

00004084 <_hal_led_task>:
    4084:	0f 2e       	mov	r0, r31
    4086:	f7 e4       	ldi	r31, 0x47	; 71
    4088:	cf 2e       	mov	r12, r31
    408a:	fb e1       	ldi	r31, 0x1B	; 27
    408c:	df 2e       	mov	r13, r31
    408e:	f0 2d       	mov	r31, r0
    4090:	04 e0       	ldi	r16, 0x04	; 4
    4092:	c9 ed       	ldi	r28, 0xD9	; 217
    4094:	d9 e1       	ldi	r29, 0x19	; 25
    4096:	10 e0       	ldi	r17, 0x00	; 0
    4098:	8c 81       	ldd	r24, Y+4	; 0x04
    409a:	81 30       	cpi	r24, 0x01	; 1
    409c:	69 f0       	breq	.+26     	; 0x40b8 <_hal_led_task+0x34>
    409e:	e8 f0       	brcs	.+58     	; 0x40da <_hal_led_task+0x56>
    40a0:	82 30       	cpi	r24, 0x02	; 2
    40a2:	39 f5       	brne	.+78     	; 0x40f2 <_hal_led_task+0x6e>
    40a4:	d6 01       	movw	r26, r12
    40a6:	1c 96       	adiw	r26, 0x0c	; 12
    40a8:	ed 91       	ld	r30, X+
    40aa:	fc 91       	ld	r31, X
    40ac:	1d 97       	sbiw	r26, 0x0d	; 13
    40ae:	6a 81       	ldd	r22, Y+2	; 0x02
    40b0:	88 81       	ld	r24, Y
    40b2:	99 81       	ldd	r25, Y+1	; 0x01
    40b4:	19 95       	eicall
    40b6:	1d c0       	rjmp	.+58     	; 0x40f2 <_hal_led_task+0x6e>
    40b8:	8d 81       	ldd	r24, Y+5	; 0x05
    40ba:	8f 5f       	subi	r24, 0xFF	; 255
    40bc:	8a 30       	cpi	r24, 0x0A	; 10
    40be:	10 f4       	brcc	.+4      	; 0x40c4 <_hal_led_task+0x40>
    40c0:	8d 83       	std	Y+5, r24	; 0x05
    40c2:	17 c0       	rjmp	.+46     	; 0x40f2 <_hal_led_task+0x6e>
    40c4:	1d 82       	std	Y+5, r1	; 0x05
    40c6:	d6 01       	movw	r26, r12
    40c8:	1c 96       	adiw	r26, 0x0c	; 12
    40ca:	ed 91       	ld	r30, X+
    40cc:	fc 91       	ld	r31, X
    40ce:	1d 97       	sbiw	r26, 0x0d	; 13
    40d0:	6a 81       	ldd	r22, Y+2	; 0x02
    40d2:	88 81       	ld	r24, Y
    40d4:	99 81       	ldd	r25, Y+1	; 0x01
    40d6:	19 95       	eicall
    40d8:	0c c0       	rjmp	.+24     	; 0x40f2 <_hal_led_task+0x6e>
    40da:	8d 81       	ldd	r24, Y+5	; 0x05
    40dc:	88 23       	and	r24, r24
    40de:	31 f0       	breq	.+12     	; 0x40ec <_hal_led_task+0x68>
    40e0:	81 2f       	mov	r24, r17
    40e2:	a2 df       	rcall	.-188    	; 0x4028 <_turn_on>
    40e4:	8d 81       	ldd	r24, Y+5	; 0x05
    40e6:	81 50       	subi	r24, 0x01	; 1
    40e8:	8d 83       	std	Y+5, r24	; 0x05
    40ea:	03 c0       	rjmp	.+6      	; 0x40f2 <_hal_led_task+0x6e>
    40ec:	0c 83       	std	Y+4, r16	; 0x04
    40ee:	81 2f       	mov	r24, r17
    40f0:	6d df       	rcall	.-294    	; 0x3fcc <_turn_off>
    40f2:	1f 5f       	subi	r17, 0xFF	; 255
    40f4:	26 96       	adiw	r28, 0x06	; 6
    40f6:	14 30       	cpi	r17, 0x04	; 4
    40f8:	79 f6       	brne	.-98     	; 0x4098 <_hal_led_task+0x14>
    40fa:	65 e0       	ldi	r22, 0x05	; 5
    40fc:	70 e0       	ldi	r23, 0x00	; 0
    40fe:	80 e0       	ldi	r24, 0x00	; 0
    4100:	90 e0       	ldi	r25, 0x00	; 0
    4102:	0e 94 d6 17 	call	0x2fac	; 0x2fac <vTaskDelay>
    4106:	c5 cf       	rjmp	.-118    	; 0x4092 <_hal_led_task+0xe>

00004108 <led_create>:
    4108:	cf 92       	push	r12
    410a:	df 92       	push	r13
    410c:	ef 92       	push	r14
    410e:	ff 92       	push	r15
    4110:	0f 93       	push	r16
    4112:	1f 93       	push	r17
    4114:	cf 93       	push	r28
    4116:	df 93       	push	r29
    4118:	06 2f       	mov	r16, r22
    411a:	0f 2e       	mov	r0, r31
    411c:	f7 e4       	ldi	r31, 0x47	; 71
    411e:	ef 2e       	mov	r14, r31
    4120:	fb e1       	ldi	r31, 0x1B	; 27
    4122:	ff 2e       	mov	r15, r31
    4124:	f0 2d       	mov	r31, r0
    4126:	d7 01       	movw	r26, r14
    4128:	18 96       	adiw	r26, 0x08	; 8
    412a:	ed 91       	ld	r30, X+
    412c:	fc 91       	ld	r31, X
    412e:	19 97       	sbiw	r26, 0x09	; 9
    4130:	66 e0       	ldi	r22, 0x06	; 6
    4132:	87 e2       	ldi	r24, 0x27	; 39
    4134:	90 e0       	ldi	r25, 0x00	; 0
    4136:	19 95       	eicall
    4138:	c9 ed       	ldi	r28, 0xD9	; 217
    413a:	d9 e1       	ldi	r29, 0x19	; 25
    413c:	0f 2e       	mov	r0, r31
    413e:	f8 e2       	ldi	r31, 0x28	; 40
    4140:	cf 2e       	mov	r12, r31
    4142:	d1 2c       	mov	r13, r1
    4144:	f0 2d       	mov	r31, r0
    4146:	d9 82       	std	Y+1, r13	; 0x01
    4148:	c8 82       	st	Y, r12
    414a:	86 e0       	ldi	r24, 0x06	; 6
    414c:	8a 83       	std	Y+2, r24	; 0x02
    414e:	1b 82       	std	Y+3, r1	; 0x03
    4150:	14 e0       	ldi	r17, 0x04	; 4
    4152:	1c 83       	std	Y+4, r17	; 0x04
    4154:	80 e0       	ldi	r24, 0x00	; 0
    4156:	3a df       	rcall	.-396    	; 0x3fcc <_turn_off>
    4158:	d7 01       	movw	r26, r14
    415a:	18 96       	adiw	r26, 0x08	; 8
    415c:	ed 91       	ld	r30, X+
    415e:	fc 91       	ld	r31, X
    4160:	19 97       	sbiw	r26, 0x09	; 9
    4162:	67 e0       	ldi	r22, 0x07	; 7
    4164:	87 e2       	ldi	r24, 0x27	; 39
    4166:	90 e0       	ldi	r25, 0x00	; 0
    4168:	19 95       	eicall
    416a:	df 82       	std	Y+7, r13	; 0x07
    416c:	ce 82       	std	Y+6, r12	; 0x06
    416e:	87 e0       	ldi	r24, 0x07	; 7
    4170:	88 87       	std	Y+8, r24	; 0x08
    4172:	19 86       	std	Y+9, r1	; 0x09
    4174:	1a 87       	std	Y+10, r17	; 0x0a
    4176:	81 e0       	ldi	r24, 0x01	; 1
    4178:	29 df       	rcall	.-430    	; 0x3fcc <_turn_off>
    417a:	d7 01       	movw	r26, r14
    417c:	18 96       	adiw	r26, 0x08	; 8
    417e:	ed 91       	ld	r30, X+
    4180:	fc 91       	ld	r31, X
    4182:	19 97       	sbiw	r26, 0x09	; 9
    4184:	65 e0       	ldi	r22, 0x05	; 5
    4186:	83 e3       	ldi	r24, 0x33	; 51
    4188:	90 e0       	ldi	r25, 0x00	; 0
    418a:	19 95       	eicall
    418c:	d7 01       	movw	r26, r14
    418e:	18 96       	adiw	r26, 0x08	; 8
    4190:	ed 91       	ld	r30, X+
    4192:	fc 91       	ld	r31, X
    4194:	19 97       	sbiw	r26, 0x09	; 9
    4196:	61 e0       	ldi	r22, 0x01	; 1
    4198:	84 e3       	ldi	r24, 0x34	; 52
    419a:	90 e0       	ldi	r25, 0x00	; 0
    419c:	19 95       	eicall
    419e:	84 e3       	ldi	r24, 0x34	; 52
    41a0:	90 e0       	ldi	r25, 0x00	; 0
    41a2:	9d 87       	std	Y+13, r25	; 0x0d
    41a4:	8c 87       	std	Y+12, r24	; 0x0c
    41a6:	85 e0       	ldi	r24, 0x05	; 5
    41a8:	8e 87       	std	Y+14, r24	; 0x0e
    41aa:	1f 86       	std	Y+15, r1	; 0x0f
    41ac:	18 8b       	std	Y+16, r17	; 0x10
    41ae:	82 e0       	ldi	r24, 0x02	; 2
    41b0:	0d df       	rcall	.-486    	; 0x3fcc <_turn_off>
    41b2:	d7 01       	movw	r26, r14
    41b4:	18 96       	adiw	r26, 0x08	; 8
    41b6:	ed 91       	ld	r30, X+
    41b8:	fc 91       	ld	r31, X
    41ba:	19 97       	sbiw	r26, 0x09	; 9
    41bc:	64 e0       	ldi	r22, 0x04	; 4
    41be:	81 e0       	ldi	r24, 0x01	; 1
    41c0:	91 e0       	ldi	r25, 0x01	; 1
    41c2:	19 95       	eicall
    41c4:	d7 01       	movw	r26, r14
    41c6:	18 96       	adiw	r26, 0x08	; 8
    41c8:	ed 91       	ld	r30, X+
    41ca:	fc 91       	ld	r31, X
    41cc:	19 97       	sbiw	r26, 0x09	; 9
    41ce:	61 e0       	ldi	r22, 0x01	; 1
    41d0:	82 e0       	ldi	r24, 0x02	; 2
    41d2:	91 e0       	ldi	r25, 0x01	; 1
    41d4:	19 95       	eicall
    41d6:	82 e0       	ldi	r24, 0x02	; 2
    41d8:	91 e0       	ldi	r25, 0x01	; 1
    41da:	9b 8b       	std	Y+19, r25	; 0x13
    41dc:	8a 8b       	std	Y+18, r24	; 0x12
    41de:	1c 8b       	std	Y+20, r17	; 0x14
    41e0:	1d 8a       	std	Y+21, r1	; 0x15
    41e2:	1e 8b       	std	Y+22, r17	; 0x16
    41e4:	83 e0       	ldi	r24, 0x03	; 3
    41e6:	f2 de       	rcall	.-540    	; 0x3fcc <_turn_off>
    41e8:	e1 2c       	mov	r14, r1
    41ea:	f1 2c       	mov	r15, r1
    41ec:	20 e0       	ldi	r18, 0x00	; 0
    41ee:	30 e0       	ldi	r19, 0x00	; 0
    41f0:	40 ec       	ldi	r20, 0xC0	; 192
    41f2:	50 e0       	ldi	r21, 0x00	; 0
    41f4:	62 e8       	ldi	r22, 0x82	; 130
    41f6:	75 e0       	ldi	r23, 0x05	; 5
    41f8:	82 e4       	ldi	r24, 0x42	; 66
    41fa:	90 e2       	ldi	r25, 0x20	; 32
    41fc:	0e 94 16 15 	call	0x2a2c	; 0x2a2c <xTaskCreate>
    4200:	df 91       	pop	r29
    4202:	cf 91       	pop	r28
    4204:	1f 91       	pop	r17
    4206:	0f 91       	pop	r16
    4208:	ff 90       	pop	r15
    420a:	ef 90       	pop	r14
    420c:	df 90       	pop	r13
    420e:	cf 90       	pop	r12
    4210:	08 95       	ret

00004212 <led_slow_blink>:
    4212:	0f 93       	push	r16
    4214:	1f 93       	push	r17
    4216:	cf 93       	push	r28
    4218:	df 93       	push	r29
    421a:	c8 2f       	mov	r28, r24
    421c:	d0 e0       	ldi	r29, 0x00	; 0
    421e:	8e 01       	movw	r16, r28
    4220:	00 0f       	add	r16, r16
    4222:	11 1f       	adc	r17, r17
    4224:	d8 01       	movw	r26, r16
    4226:	ac 0f       	add	r26, r28
    4228:	bd 1f       	adc	r27, r29
    422a:	aa 0f       	add	r26, r26
    422c:	bb 1f       	adc	r27, r27
    422e:	a7 52       	subi	r26, 0x27	; 39
    4230:	b6 4e       	sbci	r27, 0xE6	; 230
    4232:	e0 91 53 1b 	lds	r30, 0x1B53	; 0x801b53 <register_access+0xc>
    4236:	f0 91 54 1b 	lds	r31, 0x1B54	; 0x801b54 <register_access+0xd>
    423a:	12 96       	adiw	r26, 0x02	; 2
    423c:	6c 91       	ld	r22, X
    423e:	12 97       	sbiw	r26, 0x02	; 2
    4240:	8d 91       	ld	r24, X+
    4242:	9c 91       	ld	r25, X
    4244:	19 95       	eicall
    4246:	c0 0f       	add	r28, r16
    4248:	d1 1f       	adc	r29, r17
    424a:	cc 0f       	add	r28, r28
    424c:	dd 1f       	adc	r29, r29
    424e:	c7 52       	subi	r28, 0x27	; 39
    4250:	d6 4e       	sbci	r29, 0xE6	; 230
    4252:	81 e0       	ldi	r24, 0x01	; 1
    4254:	8c 83       	std	Y+4, r24	; 0x04
    4256:	df 91       	pop	r29
    4258:	cf 91       	pop	r28
    425a:	1f 91       	pop	r17
    425c:	0f 91       	pop	r16
    425e:	08 95       	ret

00004260 <led_fast_blink>:
    4260:	0f 93       	push	r16
    4262:	1f 93       	push	r17
    4264:	cf 93       	push	r28
    4266:	df 93       	push	r29
    4268:	c8 2f       	mov	r28, r24
    426a:	d0 e0       	ldi	r29, 0x00	; 0
    426c:	8e 01       	movw	r16, r28
    426e:	00 0f       	add	r16, r16
    4270:	11 1f       	adc	r17, r17
    4272:	d8 01       	movw	r26, r16
    4274:	ac 0f       	add	r26, r28
    4276:	bd 1f       	adc	r27, r29
    4278:	aa 0f       	add	r26, r26
    427a:	bb 1f       	adc	r27, r27
    427c:	a7 52       	subi	r26, 0x27	; 39
    427e:	b6 4e       	sbci	r27, 0xE6	; 230
    4280:	e0 91 53 1b 	lds	r30, 0x1B53	; 0x801b53 <register_access+0xc>
    4284:	f0 91 54 1b 	lds	r31, 0x1B54	; 0x801b54 <register_access+0xd>
    4288:	12 96       	adiw	r26, 0x02	; 2
    428a:	6c 91       	ld	r22, X
    428c:	12 97       	sbiw	r26, 0x02	; 2
    428e:	8d 91       	ld	r24, X+
    4290:	9c 91       	ld	r25, X
    4292:	19 95       	eicall
    4294:	c0 0f       	add	r28, r16
    4296:	d1 1f       	adc	r29, r17
    4298:	cc 0f       	add	r28, r28
    429a:	dd 1f       	adc	r29, r29
    429c:	c7 52       	subi	r28, 0x27	; 39
    429e:	d6 4e       	sbci	r29, 0xE6	; 230
    42a0:	82 e0       	ldi	r24, 0x02	; 2
    42a2:	8c 83       	std	Y+4, r24	; 0x04
    42a4:	df 91       	pop	r29
    42a6:	cf 91       	pop	r28
    42a8:	1f 91       	pop	r17
    42aa:	0f 91       	pop	r16
    42ac:	08 95       	ret

000042ae <led_led_on>:
    42ae:	28 2f       	mov	r18, r24
    42b0:	30 e0       	ldi	r19, 0x00	; 0
    42b2:	f9 01       	movw	r30, r18
    42b4:	ee 0f       	add	r30, r30
    42b6:	ff 1f       	adc	r31, r31
    42b8:	e2 0f       	add	r30, r18
    42ba:	f3 1f       	adc	r31, r19
    42bc:	ee 0f       	add	r30, r30
    42be:	ff 1f       	adc	r31, r31
    42c0:	e7 52       	subi	r30, 0x27	; 39
    42c2:	f6 4e       	sbci	r31, 0xE6	; 230
    42c4:	93 e0       	ldi	r25, 0x03	; 3
    42c6:	94 83       	std	Z+4, r25	; 0x04
    42c8:	af ce       	rjmp	.-674    	; 0x4028 <_turn_on>
    42ca:	08 95       	ret

000042cc <led_led_off>:
    42cc:	28 2f       	mov	r18, r24
    42ce:	30 e0       	ldi	r19, 0x00	; 0
    42d0:	f9 01       	movw	r30, r18
    42d2:	ee 0f       	add	r30, r30
    42d4:	ff 1f       	adc	r31, r31
    42d6:	e2 0f       	add	r30, r18
    42d8:	f3 1f       	adc	r31, r19
    42da:	ee 0f       	add	r30, r30
    42dc:	ff 1f       	adc	r31, r31
    42de:	e7 52       	subi	r30, 0x27	; 39
    42e0:	f6 4e       	sbci	r31, 0xE6	; 230
    42e2:	94 e0       	ldi	r25, 0x04	; 4
    42e4:	94 83       	std	Z+4, r25	; 0x04
    42e6:	72 ce       	rjmp	.-796    	; 0x3fcc <_turn_off>
    42e8:	08 95       	ret

000042ea <led_long_puls>:
    42ea:	90 e0       	ldi	r25, 0x00	; 0
    42ec:	fc 01       	movw	r30, r24
    42ee:	ee 0f       	add	r30, r30
    42f0:	ff 1f       	adc	r31, r31
    42f2:	df 01       	movw	r26, r30
    42f4:	a8 0f       	add	r26, r24
    42f6:	b9 1f       	adc	r27, r25
    42f8:	aa 0f       	add	r26, r26
    42fa:	bb 1f       	adc	r27, r27
    42fc:	a7 52       	subi	r26, 0x27	; 39
    42fe:	b6 4e       	sbci	r27, 0xE6	; 230
    4300:	24 e0       	ldi	r18, 0x04	; 4
    4302:	15 96       	adiw	r26, 0x05	; 5
    4304:	2c 93       	st	X, r18
    4306:	15 97       	sbiw	r26, 0x05	; 5
    4308:	fd 01       	movw	r30, r26
    430a:	14 82       	std	Z+4, r1	; 0x04
    430c:	08 95       	ret

0000430e <led_short_puls>:
    430e:	90 e0       	ldi	r25, 0x00	; 0
    4310:	fc 01       	movw	r30, r24
    4312:	ee 0f       	add	r30, r30
    4314:	ff 1f       	adc	r31, r31
    4316:	df 01       	movw	r26, r30
    4318:	a8 0f       	add	r26, r24
    431a:	b9 1f       	adc	r27, r25
    431c:	aa 0f       	add	r26, r26
    431e:	bb 1f       	adc	r27, r27
    4320:	a7 52       	subi	r26, 0x27	; 39
    4322:	b6 4e       	sbci	r27, 0xE6	; 230
    4324:	21 e0       	ldi	r18, 0x01	; 1
    4326:	15 96       	adiw	r26, 0x05	; 5
    4328:	2c 93       	st	X, r18
    432a:	15 97       	sbiw	r26, 0x05	; 5
    432c:	fd 01       	movw	r30, r26
    432e:	14 82       	std	Z+4, r1	; 0x04
    4330:	08 95       	ret

00004332 <_serial_call_back>:
    4332:	0f 93       	push	r16
    4334:	1f 93       	push	r17
    4336:	cf 93       	push	r28
    4338:	df 93       	push	r29
    433a:	1f 92       	push	r1
    433c:	1f 92       	push	r1
    433e:	cd b7       	in	r28, 0x3d	; 61
    4340:	de b7       	in	r29, 0x3e	; 62
    4342:	8c 01       	movw	r16, r24
    4344:	19 82       	std	Y+1, r1	; 0x01
    4346:	2d c0       	rjmp	.+90     	; 0x43a2 <_serial_call_back+0x70>
    4348:	e0 91 55 1a 	lds	r30, 0x1A55	; 0x801a55 <rec_buf_inp.2947>
    434c:	ec 32       	cpi	r30, 0x2C	; 44
    434e:	50 f4       	brcc	.+20     	; 0x4364 <_serial_call_back+0x32>
    4350:	81 e0       	ldi	r24, 0x01	; 1
    4352:	8e 0f       	add	r24, r30
    4354:	80 93 55 1a 	sts	0x1A55, r24	; 0x801a55 <rec_buf_inp.2947>
    4358:	f0 e0       	ldi	r31, 0x00	; 0
    435a:	e9 57       	subi	r30, 0x79	; 121
    435c:	f5 4e       	sbci	r31, 0xE5	; 229
    435e:	8a 81       	ldd	r24, Y+2	; 0x02
    4360:	80 83       	st	Z, r24
    4362:	02 c0       	rjmp	.+4      	; 0x4368 <_serial_call_back+0x36>
    4364:	10 92 55 1a 	sts	0x1A55, r1	; 0x801a55 <rec_buf_inp.2947>
    4368:	8a 81       	ldd	r24, Y+2	; 0x02
    436a:	8a 30       	cpi	r24, 0x0A	; 10
    436c:	d1 f4       	brne	.+52     	; 0x43a2 <_serial_call_back+0x70>
    436e:	40 91 55 1a 	lds	r20, 0x1A55	; 0x801a55 <rec_buf_inp.2947>
    4372:	50 e0       	ldi	r21, 0x00	; 0
    4374:	fa 01       	movw	r30, r20
    4376:	eb 57       	subi	r30, 0x7B	; 123
    4378:	f5 4e       	sbci	r31, 0xE5	; 229
    437a:	10 82       	st	Z, r1
    437c:	41 50       	subi	r20, 0x01	; 1
    437e:	51 09       	sbc	r21, r1
    4380:	9e 01       	movw	r18, r28
    4382:	2f 5f       	subi	r18, 0xFF	; 255
    4384:	3f 4f       	sbci	r19, 0xFF	; 255
    4386:	67 e8       	ldi	r22, 0x87	; 135
    4388:	7a e1       	ldi	r23, 0x1A	; 26
    438a:	80 91 58 1a 	lds	r24, 0x1A58	; 0x801a58 <_serial_reply_buffer_handle>
    438e:	90 91 59 1a 	lds	r25, 0x1A59	; 0x801a59 <_serial_reply_buffer_handle+0x1>
    4392:	0e 94 90 13 	call	0x2720	; 0x2720 <xStreamBufferSendFromISR>
    4396:	89 81       	ldd	r24, Y+1	; 0x01
    4398:	81 11       	cpse	r24, r1
    439a:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <vPortYield>
    439e:	10 92 55 1a 	sts	0x1A55, r1	; 0x801a55 <rec_buf_inp.2947>
    43a2:	be 01       	movw	r22, r28
    43a4:	6e 5f       	subi	r22, 0xFE	; 254
    43a6:	7f 4f       	sbci	r23, 0xFF	; 255
    43a8:	c8 01       	movw	r24, r16
    43aa:	8f d5       	rcall	.+2846   	; 0x4eca <serial_get_byte>
    43ac:	88 23       	and	r24, r24
    43ae:	61 f2       	breq	.-104    	; 0x4348 <_serial_call_back+0x16>
    43b0:	0f 90       	pop	r0
    43b2:	0f 90       	pop	r0
    43b4:	df 91       	pop	r29
    43b6:	cf 91       	pop	r28
    43b8:	1f 91       	pop	r17
    43ba:	0f 91       	pop	r16
    43bc:	08 95       	ret

000043be <_upload_message>:
    43be:	0f 93       	push	r16
    43c0:	1f 93       	push	r17
    43c2:	cf 93       	push	r28
    43c4:	df 93       	push	r29
    43c6:	8c 01       	movw	r16, r24
    43c8:	eb 01       	movw	r28, r22
    43ca:	80 91 58 1a 	lds	r24, 0x1A58	; 0x801a58 <_serial_reply_buffer_handle>
    43ce:	90 91 59 1a 	lds	r25, 0x1A59	; 0x801a59 <_serial_reply_buffer_handle+0x1>
    43d2:	0e 94 a7 12 	call	0x254e	; 0x254e <xStreamBufferReset>
    43d6:	b8 01       	movw	r22, r16
    43d8:	81 ef       	ldi	r24, 0xF1	; 241
    43da:	99 e1       	ldi	r25, 0x19	; 25
    43dc:	0e 94 72 2f 	call	0x5ee4	; 0x5ee4 <strcpy>
    43e0:	20 97       	sbiw	r28, 0x00	; 0
    43e2:	79 f0       	breq	.+30     	; 0x4402 <_upload_message+0x44>
    43e4:	e1 ef       	ldi	r30, 0xF1	; 241
    43e6:	f9 e1       	ldi	r31, 0x19	; 25
    43e8:	01 90       	ld	r0, Z+
    43ea:	00 20       	and	r0, r0
    43ec:	e9 f7       	brne	.-6      	; 0x43e8 <_upload_message+0x2a>
    43ee:	31 97       	sbiw	r30, 0x01	; 1
    43f0:	80 e2       	ldi	r24, 0x20	; 32
    43f2:	90 e0       	ldi	r25, 0x00	; 0
    43f4:	91 83       	std	Z+1, r25	; 0x01
    43f6:	80 83       	st	Z, r24
    43f8:	be 01       	movw	r22, r28
    43fa:	81 ef       	ldi	r24, 0xF1	; 241
    43fc:	99 e1       	ldi	r25, 0x19	; 25
    43fe:	0e 94 67 2f 	call	0x5ece	; 0x5ece <strcat>
    4402:	e1 ef       	ldi	r30, 0xF1	; 241
    4404:	f9 e1       	ldi	r31, 0x19	; 25
    4406:	df 01       	movw	r26, r30
    4408:	0d 90       	ld	r0, X+
    440a:	00 20       	and	r0, r0
    440c:	e9 f7       	brne	.-6      	; 0x4408 <_upload_message+0x4a>
    440e:	11 97       	sbiw	r26, 0x01	; 1
    4410:	8d e0       	ldi	r24, 0x0D	; 13
    4412:	9a e0       	ldi	r25, 0x0A	; 10
    4414:	11 96       	adiw	r26, 0x01	; 1
    4416:	9c 93       	st	X, r25
    4418:	8e 93       	st	-X, r24
    441a:	12 96       	adiw	r26, 0x02	; 2
    441c:	1c 92       	st	X, r1
    441e:	01 90       	ld	r0, Z+
    4420:	00 20       	and	r0, r0
    4422:	e9 f7       	brne	.-6      	; 0x441e <_upload_message+0x60>
    4424:	31 97       	sbiw	r30, 0x01	; 1
    4426:	e1 5f       	subi	r30, 0xF1	; 241
    4428:	f9 41       	sbci	r31, 0x19	; 25
    442a:	ae 2f       	mov	r26, r30
    442c:	81 ef       	ldi	r24, 0xF1	; 241
    442e:	99 e1       	ldi	r25, 0x19	; 25
    4430:	ac 01       	movw	r20, r24
    4432:	6a 2f       	mov	r22, r26
    4434:	80 91 5a 1a 	lds	r24, 0x1A5A	; 0x801a5a <_rn2483_serial>
    4438:	90 91 5b 1a 	lds	r25, 0x1A5B	; 0x801a5b <_rn2483_serial+0x1>
    443c:	f6 d4       	rcall	.+2540   	; 0x4e2a <serial_send_bytes>
    443e:	81 11       	cpse	r24, r1
    4440:	11 c0       	rjmp	.+34     	; 0x4464 <_upload_message+0xa6>
    4442:	08 e2       	ldi	r16, 0x28	; 40
    4444:	15 e0       	ldi	r17, 0x05	; 5
    4446:	20 e0       	ldi	r18, 0x00	; 0
    4448:	30 e0       	ldi	r19, 0x00	; 0
    444a:	4d e2       	ldi	r20, 0x2D	; 45
    444c:	50 e0       	ldi	r21, 0x00	; 0
    444e:	61 ee       	ldi	r22, 0xE1	; 225
    4450:	7a e1       	ldi	r23, 0x1A	; 26
    4452:	80 91 58 1a 	lds	r24, 0x1A58	; 0x801a58 <_serial_reply_buffer_handle>
    4456:	90 91 59 1a 	lds	r25, 0x1A59	; 0x801a59 <_serial_reply_buffer_handle+0x1>
    445a:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <xStreamBufferReceive>
    445e:	81 ee       	ldi	r24, 0xE1	; 225
    4460:	9a e1       	ldi	r25, 0x1A	; 26
    4462:	02 c0       	rjmp	.+4      	; 0x4468 <_upload_message+0xaa>
    4464:	80 e0       	ldi	r24, 0x00	; 0
    4466:	90 e0       	ldi	r25, 0x00	; 0
    4468:	df 91       	pop	r29
    446a:	cf 91       	pop	r28
    446c:	1f 91       	pop	r17
    446e:	0f 91       	pop	r16
    4470:	08 95       	ret

00004472 <_reply2return_code>:
    4472:	2f 92       	push	r2
    4474:	3f 92       	push	r3
    4476:	4f 92       	push	r4
    4478:	5f 92       	push	r5
    447a:	6f 92       	push	r6
    447c:	7f 92       	push	r7
    447e:	8f 92       	push	r8
    4480:	9f 92       	push	r9
    4482:	af 92       	push	r10
    4484:	bf 92       	push	r11
    4486:	cf 92       	push	r12
    4488:	df 92       	push	r13
    448a:	ef 92       	push	r14
    448c:	ff 92       	push	r15
    448e:	0f 93       	push	r16
    4490:	1f 93       	push	r17
    4492:	cf 93       	push	r28
    4494:	df 93       	push	r29
    4496:	5c 01       	movw	r10, r24
    4498:	fc 01       	movw	r30, r24
    449a:	01 90       	ld	r0, Z+
    449c:	00 20       	and	r0, r0
    449e:	e9 f7       	brne	.-6      	; 0x449a <_reply2return_code+0x28>
    44a0:	31 97       	sbiw	r30, 0x01	; 1
    44a2:	6f 01       	movw	r12, r30
    44a4:	c8 1a       	sub	r12, r24
    44a6:	d9 0a       	sbc	r13, r25
    44a8:	5c 2c       	mov	r5, r12
    44aa:	0f 2e       	mov	r0, r31
    44ac:	f3 e2       	ldi	r31, 0x23	; 35
    44ae:	8f 2e       	mov	r8, r31
    44b0:	f8 e0       	ldi	r31, 0x08	; 8
    44b2:	9f 2e       	mov	r9, r31
    44b4:	f0 2d       	mov	r31, r0
    44b6:	e1 2c       	mov	r14, r1
    44b8:	f1 2c       	mov	r15, r1
    44ba:	4c 2c       	mov	r4, r12
    44bc:	37 01       	movw	r6, r14
    44be:	f4 01       	movw	r30, r8
    44c0:	01 81       	ldd	r16, Z+1	; 0x01
    44c2:	12 81       	ldd	r17, Z+2	; 0x02
    44c4:	e8 01       	movw	r28, r16
    44c6:	09 90       	ld	r0, Y+
    44c8:	00 20       	and	r0, r0
    44ca:	e9 f7       	brne	.-6      	; 0x44c6 <_reply2return_code+0x54>
    44cc:	21 97       	sbiw	r28, 0x01	; 1
    44ce:	c0 1b       	sub	r28, r16
    44d0:	d1 0b       	sbc	r29, r17
    44d2:	3c 2e       	mov	r3, r28
    44d4:	f9 e0       	ldi	r31, 0x09	; 9
    44d6:	cf 16       	cp	r12, r31
    44d8:	d1 04       	cpc	r13, r1
    44da:	58 f0       	brcs	.+22     	; 0x44f2 <_reply2return_code+0x80>
    44dc:	f4 01       	movw	r30, r8
    44de:	20 80       	ld	r2, Z
    44e0:	fe e0       	ldi	r31, 0x0E	; 14
    44e2:	2f 12       	cpse	r2, r31
    44e4:	06 c0       	rjmp	.+12     	; 0x44f2 <_reply2return_code+0x80>
    44e6:	b8 01       	movw	r22, r16
    44e8:	c5 01       	movw	r24, r10
    44ea:	0e 94 42 2f 	call	0x5e84	; 0x5e84 <strcasestr>
    44ee:	89 2b       	or	r24, r25
    44f0:	09 f5       	brne	.+66     	; 0x4534 <_reply2return_code+0xc2>
    44f2:	44 2d       	mov	r20, r4
    44f4:	35 14       	cp	r3, r5
    44f6:	08 f4       	brcc	.+2      	; 0x44fa <_reply2return_code+0x88>
    44f8:	4c 2f       	mov	r20, r28
    44fa:	50 e0       	ldi	r21, 0x00	; 0
    44fc:	b8 01       	movw	r22, r16
    44fe:	c5 01       	movw	r24, r10
    4500:	0e 94 79 2f 	call	0x5ef2	; 0x5ef2 <strncasecmp>
    4504:	89 2b       	or	r24, r25
    4506:	49 f4       	brne	.+18     	; 0x451a <_reply2return_code+0xa8>
    4508:	f3 01       	movw	r30, r6
    450a:	ee 0f       	add	r30, r30
    450c:	ff 1f       	adc	r31, r31
    450e:	e6 0d       	add	r30, r6
    4510:	f7 1d       	adc	r31, r7
    4512:	ed 5d       	subi	r30, 0xDD	; 221
    4514:	f7 4f       	sbci	r31, 0xF7	; 247
    4516:	20 80       	ld	r2, Z
    4518:	0d c0       	rjmp	.+26     	; 0x4534 <_reply2return_code+0xc2>
    451a:	8f ef       	ldi	r24, 0xFF	; 255
    451c:	e8 1a       	sub	r14, r24
    451e:	f8 0a       	sbc	r15, r24
    4520:	e3 e0       	ldi	r30, 0x03	; 3
    4522:	8e 0e       	add	r8, r30
    4524:	91 1c       	adc	r9, r1
    4526:	f1 e1       	ldi	r31, 0x11	; 17
    4528:	ef 16       	cp	r14, r31
    452a:	f1 04       	cpc	r15, r1
    452c:	39 f6       	brne	.-114    	; 0x44bc <_reply2return_code+0x4a>
    452e:	68 94       	set
    4530:	22 24       	eor	r2, r2
    4532:	24 f8       	bld	r2, 4
    4534:	82 2d       	mov	r24, r2
    4536:	df 91       	pop	r29
    4538:	cf 91       	pop	r28
    453a:	1f 91       	pop	r17
    453c:	0f 91       	pop	r16
    453e:	ff 90       	pop	r15
    4540:	ef 90       	pop	r14
    4542:	df 90       	pop	r13
    4544:	cf 90       	pop	r12
    4546:	bf 90       	pop	r11
    4548:	af 90       	pop	r10
    454a:	9f 90       	pop	r9
    454c:	8f 90       	pop	r8
    454e:	7f 90       	pop	r7
    4550:	6f 90       	pop	r6
    4552:	5f 90       	pop	r5
    4554:	4f 90       	pop	r4
    4556:	3f 90       	pop	r3
    4558:	2f 90       	pop	r2
    455a:	08 95       	ret

0000455c <_upload_message_rc>:
    455c:	30 df       	rcall	.-416    	; 0x43be <_upload_message>
    455e:	89 cf       	rjmp	.-238    	; 0x4472 <_reply2return_code>
    4560:	08 95       	ret

00004562 <lora_driver_flush_buffers>:
    4562:	80 91 58 1a 	lds	r24, 0x1A58	; 0x801a58 <_serial_reply_buffer_handle>
    4566:	90 91 59 1a 	lds	r25, 0x1A59	; 0x801a59 <_serial_reply_buffer_handle+0x1>
    456a:	0c 94 a7 12 	jmp	0x254e	; 0x254e <xStreamBufferReset>
    456e:	08 95       	ret

00004570 <lora_driver_create>:
    4570:	8f 92       	push	r8
    4572:	9f 92       	push	r9
    4574:	af 92       	push	r10
    4576:	cf 92       	push	r12
    4578:	ef 92       	push	r14
    457a:	0f 93       	push	r16
    457c:	1f 93       	push	r17
    457e:	cf 93       	push	r28
    4580:	c8 2f       	mov	r28, r24
    4582:	8b 01       	movw	r16, r22
    4584:	41 e0       	ldi	r20, 0x01	; 1
    4586:	60 e0       	ldi	r22, 0x00	; 0
    4588:	70 e0       	ldi	r23, 0x00	; 0
    458a:	88 ec       	ldi	r24, 0xC8	; 200
    458c:	90 e0       	ldi	r25, 0x00	; 0
    458e:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <xStreamBufferGenericCreate>
    4592:	90 93 59 1a 	sts	0x1A59, r25	; 0x801a59 <_serial_reply_buffer_handle+0x1>
    4596:	80 93 58 1a 	sts	0x1A58, r24	; 0x801a58 <_serial_reply_buffer_handle>
    459a:	10 93 57 1a 	sts	0x1A57, r17	; 0x801a57 <_downlinkMessageBuffer+0x1>
    459e:	00 93 56 1a 	sts	0x1A56, r16	; 0x801a56 <_downlinkMessageBuffer>
    45a2:	0f 2e       	mov	r0, r31
    45a4:	f9 e9       	ldi	r31, 0x99	; 153
    45a6:	8f 2e       	mov	r8, r31
    45a8:	f1 e2       	ldi	r31, 0x21	; 33
    45aa:	9f 2e       	mov	r9, r31
    45ac:	f0 2d       	mov	r31, r0
    45ae:	68 94       	set
    45b0:	aa 24       	eor	r10, r10
    45b2:	a6 f8       	bld	r10, 6
    45b4:	68 94       	set
    45b6:	cc 24       	eor	r12, r12
    45b8:	c6 f8       	bld	r12, 6
    45ba:	e1 2c       	mov	r14, r1
    45bc:	00 e0       	ldi	r16, 0x00	; 0
    45be:	23 e0       	ldi	r18, 0x03	; 3
    45c0:	40 e0       	ldi	r20, 0x00	; 0
    45c2:	51 ee       	ldi	r21, 0xE1	; 225
    45c4:	60 e0       	ldi	r22, 0x00	; 0
    45c6:	70 e0       	ldi	r23, 0x00	; 0
    45c8:	8c 2f       	mov	r24, r28
    45ca:	74 d3       	rcall	.+1768   	; 0x4cb4 <serial_new_instance>
    45cc:	90 93 5b 1a 	sts	0x1A5B, r25	; 0x801a5b <_rn2483_serial+0x1>
    45d0:	80 93 5a 1a 	sts	0x1A5A, r24	; 0x801a5a <_rn2483_serial>
    45d4:	e0 91 4f 1b 	lds	r30, 0x1B4F	; 0x801b4f <register_access+0x8>
    45d8:	f0 91 50 1b 	lds	r31, 0x1B50	; 0x801b50 <register_access+0x9>
    45dc:	64 e0       	ldi	r22, 0x04	; 4
    45de:	87 e0       	ldi	r24, 0x07	; 7
    45e0:	91 e0       	ldi	r25, 0x01	; 1
    45e2:	19 95       	eicall
    45e4:	cf 91       	pop	r28
    45e6:	1f 91       	pop	r17
    45e8:	0f 91       	pop	r16
    45ea:	ef 90       	pop	r14
    45ec:	cf 90       	pop	r12
    45ee:	af 90       	pop	r10
    45f0:	9f 90       	pop	r9
    45f2:	8f 90       	pop	r8
    45f4:	08 95       	ret

000045f6 <lora_driver_reset_rn2483>:
    45f6:	88 23       	and	r24, r24
    45f8:	49 f0       	breq	.+18     	; 0x460c <lora_driver_reset_rn2483+0x16>
    45fa:	e0 91 59 1b 	lds	r30, 0x1B59	; 0x801b59 <register_access+0x12>
    45fe:	f0 91 5a 1b 	lds	r31, 0x1B5A	; 0x801b5a <register_access+0x13>
    4602:	64 e0       	ldi	r22, 0x04	; 4
    4604:	88 e0       	ldi	r24, 0x08	; 8
    4606:	91 e0       	ldi	r25, 0x01	; 1
    4608:	19 95       	eicall
    460a:	08 95       	ret
    460c:	e0 91 4f 1b 	lds	r30, 0x1B4F	; 0x801b4f <register_access+0x8>
    4610:	f0 91 50 1b 	lds	r31, 0x1B50	; 0x801b50 <register_access+0x9>
    4614:	64 e0       	ldi	r22, 0x04	; 4
    4616:	88 e0       	ldi	r24, 0x08	; 8
    4618:	91 e0       	ldi	r25, 0x01	; 1
    461a:	19 95       	eicall
    461c:	08 95       	ret

0000461e <lora_driver_rn2483_factory_reset>:
    461e:	60 e0       	ldi	r22, 0x00	; 0
    4620:	70 e0       	ldi	r23, 0x00	; 0
    4622:	89 ea       	ldi	r24, 0xA9	; 169
    4624:	95 e0       	ldi	r25, 0x05	; 5
    4626:	cb de       	rcall	.-618    	; 0x43be <_upload_message>
    4628:	e1 ee       	ldi	r30, 0xE1	; 225
    462a:	fa e1       	ldi	r31, 0x1A	; 26
    462c:	01 90       	ld	r0, Z+
    462e:	00 20       	and	r0, r0
    4630:	e9 f7       	brne	.-6      	; 0x462c <lora_driver_rn2483_factory_reset+0xe>
    4632:	31 97       	sbiw	r30, 0x01	; 1
    4634:	e1 5e       	subi	r30, 0xE1	; 225
    4636:	fa 41       	sbci	r31, 0x1A	; 26
    4638:	81 e0       	ldi	r24, 0x01	; 1
    463a:	75 97       	sbiw	r30, 0x15	; 21
    463c:	08 f0       	brcs	.+2      	; 0x4640 <lora_driver_rn2483_factory_reset+0x22>
    463e:	80 e0       	ldi	r24, 0x00	; 0
    4640:	08 95       	ret

00004642 <lora_driver_get_rn2483_hweui>:
    4642:	cf 93       	push	r28
    4644:	df 93       	push	r29
    4646:	ec 01       	movw	r28, r24
    4648:	60 e0       	ldi	r22, 0x00	; 0
    464a:	70 e0       	ldi	r23, 0x00	; 0
    464c:	8a eb       	ldi	r24, 0xBA	; 186
    464e:	95 e0       	ldi	r25, 0x05	; 5
    4650:	b6 de       	rcall	.-660    	; 0x43be <_upload_message>
    4652:	e1 ee       	ldi	r30, 0xE1	; 225
    4654:	fa e1       	ldi	r31, 0x1A	; 26
    4656:	01 90       	ld	r0, Z+
    4658:	00 20       	and	r0, r0
    465a:	e9 f7       	brne	.-6      	; 0x4656 <lora_driver_get_rn2483_hweui+0x14>
    465c:	e2 5f       	subi	r30, 0xF2	; 242
    465e:	fa 41       	sbci	r31, 0x1A	; 26
    4660:	39 f4       	brne	.+14     	; 0x4670 <lora_driver_get_rn2483_hweui+0x2e>
    4662:	61 ee       	ldi	r22, 0xE1	; 225
    4664:	7a e1       	ldi	r23, 0x1A	; 26
    4666:	ce 01       	movw	r24, r28
    4668:	0e 94 72 2f 	call	0x5ee4	; 0x5ee4 <strcpy>
    466c:	80 e0       	ldi	r24, 0x00	; 0
    466e:	02 c0       	rjmp	.+4      	; 0x4674 <lora_driver_get_rn2483_hweui+0x32>
    4670:	18 82       	st	Y, r1
    4672:	81 e0       	ldi	r24, 0x01	; 1
    4674:	df 91       	pop	r29
    4676:	cf 91       	pop	r28
    4678:	08 95       	ret

0000467a <lora_driver_set_device_identifier>:
    467a:	fc 01       	movw	r30, r24
    467c:	01 90       	ld	r0, Z+
    467e:	00 20       	and	r0, r0
    4680:	e9 f7       	brne	.-6      	; 0x467c <lora_driver_set_device_identifier+0x2>
    4682:	9f 01       	movw	r18, r30
    4684:	21 51       	subi	r18, 0x11	; 17
    4686:	31 09       	sbc	r19, r1
    4688:	28 17       	cp	r18, r24
    468a:	39 07       	cpc	r19, r25
    468c:	29 f4       	brne	.+10     	; 0x4698 <lora_driver_set_device_identifier+0x1e>
    468e:	bc 01       	movw	r22, r24
    4690:	88 ee       	ldi	r24, 0xE8	; 232
    4692:	95 e0       	ldi	r25, 0x05	; 5
    4694:	63 cf       	rjmp	.-314    	; 0x455c <_upload_message_rc>
    4696:	08 95       	ret
    4698:	89 e0       	ldi	r24, 0x09	; 9
    469a:	08 95       	ret

0000469c <lora_driver_set_application_identifier>:
    469c:	fc 01       	movw	r30, r24
    469e:	01 90       	ld	r0, Z+
    46a0:	00 20       	and	r0, r0
    46a2:	e9 f7       	brne	.-6      	; 0x469e <lora_driver_set_application_identifier+0x2>
    46a4:	9f 01       	movw	r18, r30
    46a6:	21 51       	subi	r18, 0x11	; 17
    46a8:	31 09       	sbc	r19, r1
    46aa:	28 17       	cp	r18, r24
    46ac:	39 07       	cpc	r19, r25
    46ae:	29 f4       	brne	.+10     	; 0x46ba <lora_driver_set_application_identifier+0x1e>
    46b0:	bc 01       	movw	r22, r24
    46b2:	87 ef       	ldi	r24, 0xF7	; 247
    46b4:	95 e0       	ldi	r25, 0x05	; 5
    46b6:	52 cf       	rjmp	.-348    	; 0x455c <_upload_message_rc>
    46b8:	08 95       	ret
    46ba:	89 e0       	ldi	r24, 0x09	; 9
    46bc:	08 95       	ret

000046be <lora_driver_set_application_key>:
    46be:	fc 01       	movw	r30, r24
    46c0:	01 90       	ld	r0, Z+
    46c2:	00 20       	and	r0, r0
    46c4:	e9 f7       	brne	.-6      	; 0x46c0 <lora_driver_set_application_key+0x2>
    46c6:	9f 01       	movw	r18, r30
    46c8:	21 52       	subi	r18, 0x21	; 33
    46ca:	31 09       	sbc	r19, r1
    46cc:	28 17       	cp	r18, r24
    46ce:	39 07       	cpc	r19, r25
    46d0:	29 f4       	brne	.+10     	; 0x46dc <lora_driver_set_application_key+0x1e>
    46d2:	bc 01       	movw	r22, r24
    46d4:	86 e0       	ldi	r24, 0x06	; 6
    46d6:	96 e0       	ldi	r25, 0x06	; 6
    46d8:	41 cf       	rjmp	.-382    	; 0x455c <_upload_message_rc>
    46da:	08 95       	ret
    46dc:	89 e0       	ldi	r24, 0x09	; 9
    46de:	08 95       	ret

000046e0 <lora_driver_save_mac>:
    46e0:	60 e0       	ldi	r22, 0x00	; 0
    46e2:	70 e0       	ldi	r23, 0x00	; 0
    46e4:	85 e4       	ldi	r24, 0x45	; 69
    46e6:	96 e0       	ldi	r25, 0x06	; 6
    46e8:	39 cf       	rjmp	.-398    	; 0x455c <_upload_message_rc>
    46ea:	08 95       	ret

000046ec <lora_driver_join>:
    46ec:	0f 93       	push	r16
    46ee:	1f 93       	push	r17
    46f0:	e8 2f       	mov	r30, r24
    46f2:	f0 e0       	ldi	r31, 0x00	; 0
    46f4:	ee 0f       	add	r30, r30
    46f6:	ff 1f       	adc	r31, r31
    46f8:	e1 5e       	subi	r30, 0xE1	; 225
    46fa:	f7 4f       	sbci	r31, 0xF7	; 247
    46fc:	60 81       	ld	r22, Z
    46fe:	71 81       	ldd	r23, Z+1	; 0x01
    4700:	8e e4       	ldi	r24, 0x4E	; 78
    4702:	96 e0       	ldi	r25, 0x06	; 6
    4704:	2b df       	rcall	.-426    	; 0x455c <_upload_message_rc>
    4706:	81 11       	cpse	r24, r1
    4708:	14 c0       	rjmp	.+40     	; 0x4732 <lora_driver_join+0x46>
    470a:	08 e2       	ldi	r16, 0x28	; 40
    470c:	15 e0       	ldi	r17, 0x05	; 5
    470e:	20 e0       	ldi	r18, 0x00	; 0
    4710:	30 e0       	ldi	r19, 0x00	; 0
    4712:	4d e2       	ldi	r20, 0x2D	; 45
    4714:	50 e0       	ldi	r21, 0x00	; 0
    4716:	61 ee       	ldi	r22, 0xE1	; 225
    4718:	7a e1       	ldi	r23, 0x1A	; 26
    471a:	80 91 58 1a 	lds	r24, 0x1A58	; 0x801a58 <_serial_reply_buffer_handle>
    471e:	90 91 59 1a 	lds	r25, 0x1A59	; 0x801a59 <_serial_reply_buffer_handle+0x1>
    4722:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <xStreamBufferReceive>
    4726:	88 23       	and	r24, r24
    4728:	21 f0       	breq	.+8      	; 0x4732 <lora_driver_join+0x46>
    472a:	81 ee       	ldi	r24, 0xE1	; 225
    472c:	9a e1       	ldi	r25, 0x1A	; 26
    472e:	a1 de       	rcall	.-702    	; 0x4472 <_reply2return_code>
    4730:	03 c0       	rjmp	.+6      	; 0x4738 <lora_driver_join+0x4c>
    4732:	81 ee       	ldi	r24, 0xE1	; 225
    4734:	9a e1       	ldi	r25, 0x1A	; 26
    4736:	9d de       	rcall	.-710    	; 0x4472 <_reply2return_code>
    4738:	1f 91       	pop	r17
    473a:	0f 91       	pop	r16
    473c:	08 95       	ret

0000473e <lora_driver_sent_upload_message>:
    473e:	0f 93       	push	r16
    4740:	1f 93       	push	r17
    4742:	cf 93       	push	r28
    4744:	df 93       	push	r29
    4746:	1f 92       	push	r1
    4748:	cd b7       	in	r28, 0x3d	; 61
    474a:	de b7       	in	r29, 0x3e	; 62
    474c:	db 01       	movw	r26, r22
    474e:	11 96       	adiw	r26, 0x01	; 1
    4750:	9c 91       	ld	r25, X
    4752:	11 97       	sbiw	r26, 0x01	; 1
    4754:	95 31       	cpi	r25, 0x15	; 21
    4756:	08 f0       	brcs	.+2      	; 0x475a <lora_driver_sent_upload_message+0x1c>
    4758:	b4 c0       	rjmp	.+360    	; 0x48c2 <lora_driver_sent_upload_message+0x184>
    475a:	99 23       	and	r25, r25
    475c:	81 f1       	breq	.+96     	; 0x47be <lora_driver_sent_upload_message+0x80>
    475e:	60 e0       	ldi	r22, 0x00	; 0
    4760:	70 e0       	ldi	r23, 0x00	; 0
    4762:	27 2f       	mov	r18, r23
    4764:	30 e0       	ldi	r19, 0x00	; 0
    4766:	46 2f       	mov	r20, r22
    4768:	50 e0       	ldi	r21, 0x00	; 0
    476a:	fd 01       	movw	r30, r26
    476c:	e4 0f       	add	r30, r20
    476e:	f5 1f       	adc	r31, r21
    4770:	92 81       	ldd	r25, Z+2	; 0x02
    4772:	92 95       	swap	r25
    4774:	9f 70       	andi	r25, 0x0F	; 15
    4776:	9a 30       	cpi	r25, 0x0A	; 10
    4778:	10 f0       	brcs	.+4      	; 0x477e <lora_driver_sent_upload_message+0x40>
    477a:	99 5c       	subi	r25, 0xC9	; 201
    477c:	01 c0       	rjmp	.+2      	; 0x4780 <lora_driver_sent_upload_message+0x42>
    477e:	90 5d       	subi	r25, 0xD0	; 208
    4780:	f9 01       	movw	r30, r18
    4782:	ee 58       	subi	r30, 0x8E	; 142
    4784:	f5 4e       	sbci	r31, 0xE5	; 229
    4786:	90 83       	st	Z, r25
    4788:	2f 5f       	subi	r18, 0xFF	; 255
    478a:	3f 4f       	sbci	r19, 0xFF	; 255
    478c:	fd 01       	movw	r30, r26
    478e:	e4 0f       	add	r30, r20
    4790:	f5 1f       	adc	r31, r21
    4792:	92 81       	ldd	r25, Z+2	; 0x02
    4794:	9f 70       	andi	r25, 0x0F	; 15
    4796:	49 2f       	mov	r20, r25
    4798:	50 e0       	ldi	r21, 0x00	; 0
    479a:	4a 30       	cpi	r20, 0x0A	; 10
    479c:	51 05       	cpc	r21, r1
    479e:	14 f0       	brlt	.+4      	; 0x47a4 <lora_driver_sent_upload_message+0x66>
    47a0:	99 5c       	subi	r25, 0xC9	; 201
    47a2:	01 c0       	rjmp	.+2      	; 0x47a6 <lora_driver_sent_upload_message+0x68>
    47a4:	90 5d       	subi	r25, 0xD0	; 208
    47a6:	f9 01       	movw	r30, r18
    47a8:	ee 58       	subi	r30, 0x8E	; 142
    47aa:	f5 4e       	sbci	r31, 0xE5	; 229
    47ac:	90 83       	st	Z, r25
    47ae:	7e 5f       	subi	r23, 0xFE	; 254
    47b0:	6f 5f       	subi	r22, 0xFF	; 255
    47b2:	11 96       	adiw	r26, 0x01	; 1
    47b4:	9c 91       	ld	r25, X
    47b6:	11 97       	sbiw	r26, 0x01	; 1
    47b8:	69 17       	cp	r22, r25
    47ba:	98 f2       	brcs	.-90     	; 0x4762 <lora_driver_sent_upload_message+0x24>
    47bc:	01 c0       	rjmp	.+2      	; 0x47c0 <lora_driver_sent_upload_message+0x82>
    47be:	70 e0       	ldi	r23, 0x00	; 0
    47c0:	e7 2f       	mov	r30, r23
    47c2:	f0 e0       	ldi	r31, 0x00	; 0
    47c4:	ee 58       	subi	r30, 0x8E	; 142
    47c6:	f5 4e       	sbci	r31, 0xE5	; 229
    47c8:	10 82       	st	Z, r1
    47ca:	4c 91       	ld	r20, X
    47cc:	81 11       	cpse	r24, r1
    47ce:	03 c0       	rjmp	.+6      	; 0x47d6 <lora_driver_sent_upload_message+0x98>
    47d0:	87 e5       	ldi	r24, 0x57	; 87
    47d2:	96 e0       	ldi	r25, 0x06	; 6
    47d4:	02 c0       	rjmp	.+4      	; 0x47da <lora_driver_sent_upload_message+0x9c>
    47d6:	89 e5       	ldi	r24, 0x59	; 89
    47d8:	96 e0       	ldi	r25, 0x06	; 6
    47da:	22 e7       	ldi	r18, 0x72	; 114
    47dc:	3a e1       	ldi	r19, 0x1A	; 26
    47de:	3f 93       	push	r19
    47e0:	2f 93       	push	r18
    47e2:	1f 92       	push	r1
    47e4:	4f 93       	push	r20
    47e6:	9f 93       	push	r25
    47e8:	8f 93       	push	r24
    47ea:	8d e5       	ldi	r24, 0x5D	; 93
    47ec:	96 e0       	ldi	r25, 0x06	; 6
    47ee:	9f 93       	push	r25
    47f0:	8f 93       	push	r24
    47f2:	84 eb       	ldi	r24, 0xB4	; 180
    47f4:	9a e1       	ldi	r25, 0x1A	; 26
    47f6:	9f 93       	push	r25
    47f8:	8f 93       	push	r24
    47fa:	0e 94 d4 2f 	call	0x5fa8	; 0x5fa8 <sprintf>
    47fe:	60 e0       	ldi	r22, 0x00	; 0
    4800:	70 e0       	ldi	r23, 0x00	; 0
    4802:	84 eb       	ldi	r24, 0xB4	; 180
    4804:	9a e1       	ldi	r25, 0x1A	; 26
    4806:	aa de       	rcall	.-684    	; 0x455c <_upload_message_rc>
    4808:	0f b6       	in	r0, 0x3f	; 63
    480a:	f8 94       	cli
    480c:	de bf       	out	0x3e, r29	; 62
    480e:	0f be       	out	0x3f, r0	; 63
    4810:	cd bf       	out	0x3d, r28	; 61
    4812:	81 11       	cpse	r24, r1
    4814:	59 c0       	rjmp	.+178    	; 0x48c8 <lora_driver_sent_upload_message+0x18a>
    4816:	08 e2       	ldi	r16, 0x28	; 40
    4818:	15 e0       	ldi	r17, 0x05	; 5
    481a:	20 e0       	ldi	r18, 0x00	; 0
    481c:	30 e0       	ldi	r19, 0x00	; 0
    481e:	4d e2       	ldi	r20, 0x2D	; 45
    4820:	50 e0       	ldi	r21, 0x00	; 0
    4822:	61 ee       	ldi	r22, 0xE1	; 225
    4824:	7a e1       	ldi	r23, 0x1A	; 26
    4826:	80 91 58 1a 	lds	r24, 0x1A58	; 0x801a58 <_serial_reply_buffer_handle>
    482a:	90 91 59 1a 	lds	r25, 0x1A59	; 0x801a59 <_serial_reply_buffer_handle+0x1>
    482e:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <xStreamBufferReceive>
    4832:	88 23       	and	r24, r24
    4834:	09 f4       	brne	.+2      	; 0x4838 <lora_driver_sent_upload_message+0xfa>
    4836:	47 c0       	rjmp	.+142    	; 0x48c6 <lora_driver_sent_upload_message+0x188>
    4838:	81 ee       	ldi	r24, 0xE1	; 225
    483a:	9a e1       	ldi	r25, 0x1A	; 26
    483c:	1a de       	rcall	.-972    	; 0x4472 <_reply2return_code>
    483e:	8e 30       	cpi	r24, 0x0E	; 14
    4840:	09 f0       	breq	.+2      	; 0x4844 <lora_driver_sent_upload_message+0x106>
    4842:	42 c0       	rjmp	.+132    	; 0x48c8 <lora_driver_sent_upload_message+0x18a>
    4844:	87 e0       	ldi	r24, 0x07	; 7
    4846:	89 83       	std	Y+1, r24	; 0x01
    4848:	80 91 56 1a 	lds	r24, 0x1A56	; 0x801a56 <_downlinkMessageBuffer>
    484c:	90 91 57 1a 	lds	r25, 0x1A57	; 0x801a57 <_downlinkMessageBuffer+0x1>
    4850:	89 2b       	or	r24, r25
    4852:	a9 f1       	breq	.+106    	; 0x48be <lora_driver_sent_upload_message+0x180>
    4854:	be 01       	movw	r22, r28
    4856:	6f 5f       	subi	r22, 0xFF	; 255
    4858:	7f 4f       	sbci	r23, 0xFF	; 255
    485a:	81 ee       	ldi	r24, 0xE1	; 225
    485c:	9a e1       	ldi	r25, 0x1A	; 26
    485e:	68 d1       	rcall	.+720    	; 0x4b30 <decode_port_no>
    4860:	80 93 5c 1a 	sts	0x1A5C, r24	; 0x801a5c <_downlink_payload>
    4864:	e9 81       	ldd	r30, Y+1	; 0x01
    4866:	f0 e0       	ldi	r31, 0x00	; 0
    4868:	ef 51       	subi	r30, 0x1F	; 31
    486a:	f5 4e       	sbci	r31, 0xE5	; 229
    486c:	df 01       	movw	r26, r30
    486e:	0d 90       	ld	r0, X+
    4870:	00 20       	and	r0, r0
    4872:	e9 f7       	brne	.-6      	; 0x486e <lora_driver_sent_upload_message+0x130>
    4874:	11 97       	sbiw	r26, 0x01	; 1
    4876:	ae 1b       	sub	r26, r30
    4878:	bf 0b       	sbc	r27, r31
    487a:	aa 23       	and	r26, r26
    487c:	91 f0       	breq	.+36     	; 0x48a2 <lora_driver_sent_upload_message+0x164>
    487e:	bb 27       	eor	r27, r27
    4880:	cd 01       	movw	r24, r26
    4882:	01 97       	sbiw	r24, 0x01	; 1
    4884:	9c 01       	movw	r18, r24
    4886:	12 f4       	brpl	.+4      	; 0x488c <lora_driver_sent_upload_message+0x14e>
    4888:	2f 5f       	subi	r18, 0xFF	; 255
    488a:	3f 4f       	sbci	r19, 0xFF	; 255
    488c:	35 95       	asr	r19
    488e:	27 95       	ror	r18
    4890:	20 93 5d 1a 	sts	0x1A5D, r18	; 0x801a5d <_downlink_payload+0x1>
    4894:	af 01       	movw	r20, r30
    4896:	4f 5f       	subi	r20, 0xFF	; 255
    4898:	5f 4f       	sbci	r21, 0xFF	; 255
    489a:	64 e1       	ldi	r22, 0x14	; 20
    489c:	8e e5       	ldi	r24, 0x5E	; 94
    489e:	9a e1       	ldi	r25, 0x1A	; 26
    48a0:	73 d1       	rcall	.+742    	; 0x4b88 <decode_hexadecimal_string_bytes>
    48a2:	01 e0       	ldi	r16, 0x01	; 1
    48a4:	10 e0       	ldi	r17, 0x00	; 0
    48a6:	20 e0       	ldi	r18, 0x00	; 0
    48a8:	30 e0       	ldi	r19, 0x00	; 0
    48aa:	46 e1       	ldi	r20, 0x16	; 22
    48ac:	50 e0       	ldi	r21, 0x00	; 0
    48ae:	6c e5       	ldi	r22, 0x5C	; 92
    48b0:	7a e1       	ldi	r23, 0x1A	; 26
    48b2:	80 91 56 1a 	lds	r24, 0x1A56	; 0x801a56 <_downlinkMessageBuffer>
    48b6:	90 91 57 1a 	lds	r25, 0x1A57	; 0x801a57 <_downlinkMessageBuffer+0x1>
    48ba:	0e 94 e6 12 	call	0x25cc	; 0x25cc <xStreamBufferSend>
    48be:	8e e0       	ldi	r24, 0x0E	; 14
    48c0:	03 c0       	rjmp	.+6      	; 0x48c8 <lora_driver_sent_upload_message+0x18a>
    48c2:	84 e1       	ldi	r24, 0x14	; 20
    48c4:	01 c0       	rjmp	.+2      	; 0x48c8 <lora_driver_sent_upload_message+0x18a>
    48c6:	80 e0       	ldi	r24, 0x00	; 0
    48c8:	0f 90       	pop	r0
    48ca:	df 91       	pop	r29
    48cc:	cf 91       	pop	r28
    48ce:	1f 91       	pop	r17
    48d0:	0f 91       	pop	r16
    48d2:	08 95       	ret

000048d4 <lora_driver_set_adaptive_data_rate>:
    48d4:	81 30       	cpi	r24, 0x01	; 1
    48d6:	19 f0       	breq	.+6      	; 0x48de <lora_driver_set_adaptive_data_rate+0xa>
    48d8:	6d e6       	ldi	r22, 0x6D	; 109
    48da:	76 e0       	ldi	r23, 0x06	; 6
    48dc:	02 c0       	rjmp	.+4      	; 0x48e2 <lora_driver_set_adaptive_data_rate+0xe>
    48de:	66 e4       	ldi	r22, 0x46	; 70
    48e0:	77 e0       	ldi	r23, 0x07	; 7
    48e2:	81 e7       	ldi	r24, 0x71	; 113
    48e4:	96 e0       	ldi	r25, 0x06	; 6
    48e6:	3a ce       	rjmp	.-908    	; 0x455c <_upload_message_rc>
    48e8:	08 95       	ret

000048ea <lora_driver_set_receive_delay>:
    48ea:	9f 93       	push	r25
    48ec:	8f 93       	push	r24
    48ee:	82 ea       	ldi	r24, 0xA2	; 162
    48f0:	96 e0       	ldi	r25, 0x06	; 6
    48f2:	9f 93       	push	r25
    48f4:	8f 93       	push	r24
    48f6:	84 eb       	ldi	r24, 0xB4	; 180
    48f8:	9a e1       	ldi	r25, 0x1A	; 26
    48fa:	9f 93       	push	r25
    48fc:	8f 93       	push	r24
    48fe:	0e 94 d4 2f 	call	0x5fa8	; 0x5fa8 <sprintf>
    4902:	60 e0       	ldi	r22, 0x00	; 0
    4904:	70 e0       	ldi	r23, 0x00	; 0
    4906:	84 eb       	ldi	r24, 0xB4	; 180
    4908:	9a e1       	ldi	r25, 0x1A	; 26
    490a:	28 de       	rcall	.-944    	; 0x455c <_upload_message_rc>
    490c:	0f 90       	pop	r0
    490e:	0f 90       	pop	r0
    4910:	0f 90       	pop	r0
    4912:	0f 90       	pop	r0
    4914:	0f 90       	pop	r0
    4916:	0f 90       	pop	r0
    4918:	08 95       	ret

0000491a <lora_driver_configure_to_eu868>:
    491a:	2f 92       	push	r2
    491c:	3f 92       	push	r3
    491e:	4f 92       	push	r4
    4920:	5f 92       	push	r5
    4922:	6f 92       	push	r6
    4924:	7f 92       	push	r7
    4926:	8f 92       	push	r8
    4928:	9f 92       	push	r9
    492a:	af 92       	push	r10
    492c:	bf 92       	push	r11
    492e:	cf 92       	push	r12
    4930:	df 92       	push	r13
    4932:	ef 92       	push	r14
    4934:	ff 92       	push	r15
    4936:	0f 93       	push	r16
    4938:	1f 93       	push	r17
    493a:	cf 93       	push	r28
    493c:	df 93       	push	r29
    493e:	cd b7       	in	r28, 0x3d	; 61
    4940:	de b7       	in	r29, 0x3e	; 62
    4942:	a0 97       	sbiw	r28, 0x20	; 32
    4944:	0f b6       	in	r0, 0x3f	; 63
    4946:	f8 94       	cli
    4948:	de bf       	out	0x3e, r29	; 62
    494a:	0f be       	out	0x3f, r0	; 63
    494c:	cd bf       	out	0x3d, r28	; 61
    494e:	6f ec       	ldi	r22, 0xCF	; 207
    4950:	76 e0       	ldi	r23, 0x06	; 6
    4952:	8b ed       	ldi	r24, 0xDB	; 219
    4954:	96 e0       	ldi	r25, 0x06	; 6
    4956:	33 dd       	rcall	.-1434   	; 0x43be <_upload_message>
    4958:	8c dd       	rcall	.-1256   	; 0x4472 <_reply2return_code>
    495a:	81 11       	cpse	r24, r1
    495c:	a3 c0       	rjmp	.+326    	; 0x4aa4 <lora_driver_configure_to_eu868+0x18a>
    495e:	80 e2       	ldi	r24, 0x20	; 32
    4960:	e1 e2       	ldi	r30, 0x21	; 33
    4962:	f2 e0       	ldi	r31, 0x02	; 2
    4964:	de 01       	movw	r26, r28
    4966:	11 96       	adiw	r26, 0x01	; 1
    4968:	01 90       	ld	r0, Z+
    496a:	0d 92       	st	X+, r0
    496c:	8a 95       	dec	r24
    496e:	e1 f7       	brne	.-8      	; 0x4968 <lora_driver_configure_to_eu868+0x4e>
    4970:	9e 01       	movw	r18, r28
    4972:	2f 5f       	subi	r18, 0xFF	; 255
    4974:	3f 4f       	sbci	r19, 0xFF	; 255
    4976:	69 01       	movw	r12, r18
    4978:	e1 2c       	mov	r14, r1
    497a:	f1 2c       	mov	r15, r1
    497c:	0f 2e       	mov	r0, r31
    497e:	f7 ee       	ldi	r31, 0xE7	; 231
    4980:	af 2e       	mov	r10, r31
    4982:	f6 e0       	ldi	r31, 0x06	; 6
    4984:	bf 2e       	mov	r11, r31
    4986:	f0 2d       	mov	r31, r0
    4988:	04 eb       	ldi	r16, 0xB4	; 180
    498a:	1a e1       	ldi	r17, 0x1A	; 26
    498c:	0f 2e       	mov	r0, r31
    498e:	f0 e0       	ldi	r31, 0x00	; 0
    4990:	4f 2e       	mov	r4, r31
    4992:	f7 e0       	ldi	r31, 0x07	; 7
    4994:	5f 2e       	mov	r5, r31
    4996:	f0 2d       	mov	r31, r0
    4998:	0f 2e       	mov	r0, r31
    499a:	f7 e1       	ldi	r31, 0x17	; 23
    499c:	8f 2e       	mov	r8, r31
    499e:	f7 e0       	ldi	r31, 0x07	; 7
    49a0:	9f 2e       	mov	r9, r31
    49a2:	f0 2d       	mov	r31, r0
    49a4:	0f 2e       	mov	r0, r31
    49a6:	f1 e3       	ldi	r31, 0x31	; 49
    49a8:	6f 2e       	mov	r6, r31
    49aa:	f7 e0       	ldi	r31, 0x07	; 7
    49ac:	7f 2e       	mov	r7, r31
    49ae:	f0 2d       	mov	r31, r0
    49b0:	3e 2c       	mov	r3, r14
    49b2:	2f 2c       	mov	r2, r15
    49b4:	ff 92       	push	r15
    49b6:	ef 92       	push	r14
    49b8:	bf 92       	push	r11
    49ba:	af 92       	push	r10
    49bc:	1f 93       	push	r17
    49be:	0f 93       	push	r16
    49c0:	0e 94 d4 2f 	call	0x5fa8	; 0x5fa8 <sprintf>
    49c4:	60 e0       	ldi	r22, 0x00	; 0
    49c6:	70 e0       	ldi	r23, 0x00	; 0
    49c8:	c8 01       	movw	r24, r16
    49ca:	f9 dc       	rcall	.-1550   	; 0x43be <_upload_message>
    49cc:	52 dd       	rcall	.-1372   	; 0x4472 <_reply2return_code>
    49ce:	0f 90       	pop	r0
    49d0:	0f 90       	pop	r0
    49d2:	0f 90       	pop	r0
    49d4:	0f 90       	pop	r0
    49d6:	0f 90       	pop	r0
    49d8:	0f 90       	pop	r0
    49da:	81 11       	cpse	r24, r1
    49dc:	63 c0       	rjmp	.+198    	; 0x4aa4 <lora_driver_configure_to_eu868+0x18a>
    49de:	32 e0       	ldi	r19, 0x02	; 2
    49e0:	3e 15       	cp	r19, r14
    49e2:	e8 f4       	brcc	.+58     	; 0x4a1e <lora_driver_configure_to_eu868+0x104>
    49e4:	f6 01       	movw	r30, r12
    49e6:	83 81       	ldd	r24, Z+3	; 0x03
    49e8:	8f 93       	push	r24
    49ea:	82 81       	ldd	r24, Z+2	; 0x02
    49ec:	8f 93       	push	r24
    49ee:	81 81       	ldd	r24, Z+1	; 0x01
    49f0:	8f 93       	push	r24
    49f2:	80 81       	ld	r24, Z
    49f4:	8f 93       	push	r24
    49f6:	ff 92       	push	r15
    49f8:	ef 92       	push	r14
    49fa:	5f 92       	push	r5
    49fc:	4f 92       	push	r4
    49fe:	1f 93       	push	r17
    4a00:	0f 93       	push	r16
    4a02:	0e 94 d4 2f 	call	0x5fa8	; 0x5fa8 <sprintf>
    4a06:	60 e0       	ldi	r22, 0x00	; 0
    4a08:	70 e0       	ldi	r23, 0x00	; 0
    4a0a:	c8 01       	movw	r24, r16
    4a0c:	d8 dc       	rcall	.-1616   	; 0x43be <_upload_message>
    4a0e:	31 dd       	rcall	.-1438   	; 0x4472 <_reply2return_code>
    4a10:	0f b6       	in	r0, 0x3f	; 63
    4a12:	f8 94       	cli
    4a14:	de bf       	out	0x3e, r29	; 62
    4a16:	0f be       	out	0x3f, r0	; 63
    4a18:	cd bf       	out	0x3d, r28	; 61
    4a1a:	81 11       	cpse	r24, r1
    4a1c:	43 c0       	rjmp	.+134    	; 0x4aa4 <lora_driver_configure_to_eu868+0x18a>
    4a1e:	2f 92       	push	r2
    4a20:	3f 92       	push	r3
    4a22:	9f 92       	push	r9
    4a24:	8f 92       	push	r8
    4a26:	1f 93       	push	r17
    4a28:	0f 93       	push	r16
    4a2a:	0e 94 d4 2f 	call	0x5fa8	; 0x5fa8 <sprintf>
    4a2e:	60 e0       	ldi	r22, 0x00	; 0
    4a30:	70 e0       	ldi	r23, 0x00	; 0
    4a32:	c8 01       	movw	r24, r16
    4a34:	c4 dc       	rcall	.-1656   	; 0x43be <_upload_message>
    4a36:	1d dd       	rcall	.-1478   	; 0x4472 <_reply2return_code>
    4a38:	0f 90       	pop	r0
    4a3a:	0f 90       	pop	r0
    4a3c:	0f 90       	pop	r0
    4a3e:	0f 90       	pop	r0
    4a40:	0f 90       	pop	r0
    4a42:	0f 90       	pop	r0
    4a44:	81 11       	cpse	r24, r1
    4a46:	2e c0       	rjmp	.+92     	; 0x4aa4 <lora_driver_configure_to_eu868+0x18a>
    4a48:	2f 92       	push	r2
    4a4a:	3f 92       	push	r3
    4a4c:	7f 92       	push	r7
    4a4e:	6f 92       	push	r6
    4a50:	1f 93       	push	r17
    4a52:	0f 93       	push	r16
    4a54:	0e 94 d4 2f 	call	0x5fa8	; 0x5fa8 <sprintf>
    4a58:	60 e0       	ldi	r22, 0x00	; 0
    4a5a:	70 e0       	ldi	r23, 0x00	; 0
    4a5c:	c8 01       	movw	r24, r16
    4a5e:	af dc       	rcall	.-1698   	; 0x43be <_upload_message>
    4a60:	08 dd       	rcall	.-1520   	; 0x4472 <_reply2return_code>
    4a62:	0f 90       	pop	r0
    4a64:	0f 90       	pop	r0
    4a66:	0f 90       	pop	r0
    4a68:	0f 90       	pop	r0
    4a6a:	0f 90       	pop	r0
    4a6c:	0f 90       	pop	r0
    4a6e:	81 11       	cpse	r24, r1
    4a70:	19 c0       	rjmp	.+50     	; 0x4aa4 <lora_driver_configure_to_eu868+0x18a>
    4a72:	3f ef       	ldi	r19, 0xFF	; 255
    4a74:	e3 1a       	sub	r14, r19
    4a76:	f3 0a       	sbc	r15, r19
    4a78:	84 e0       	ldi	r24, 0x04	; 4
    4a7a:	c8 0e       	add	r12, r24
    4a7c:	d1 1c       	adc	r13, r1
    4a7e:	98 e0       	ldi	r25, 0x08	; 8
    4a80:	e9 16       	cp	r14, r25
    4a82:	f1 04       	cpc	r15, r1
    4a84:	09 f0       	breq	.+2      	; 0x4a88 <lora_driver_configure_to_eu868+0x16e>
    4a86:	94 cf       	rjmp	.-216    	; 0x49b0 <lora_driver_configure_to_eu868+0x96>
    4a88:	60 e0       	ldi	r22, 0x00	; 0
    4a8a:	70 e0       	ldi	r23, 0x00	; 0
    4a8c:	89 e4       	ldi	r24, 0x49	; 73
    4a8e:	97 e0       	ldi	r25, 0x07	; 7
    4a90:	96 dc       	rcall	.-1748   	; 0x43be <_upload_message>
    4a92:	ef dc       	rcall	.-1570   	; 0x4472 <_reply2return_code>
    4a94:	81 11       	cpse	r24, r1
    4a96:	06 c0       	rjmp	.+12     	; 0x4aa4 <lora_driver_configure_to_eu868+0x18a>
    4a98:	60 e0       	ldi	r22, 0x00	; 0
    4a9a:	70 e0       	ldi	r23, 0x00	; 0
    4a9c:	8a e5       	ldi	r24, 0x5A	; 90
    4a9e:	97 e0       	ldi	r25, 0x07	; 7
    4aa0:	8e dc       	rcall	.-1764   	; 0x43be <_upload_message>
    4aa2:	e7 dc       	rcall	.-1586   	; 0x4472 <_reply2return_code>
    4aa4:	a0 96       	adiw	r28, 0x20	; 32
    4aa6:	0f b6       	in	r0, 0x3f	; 63
    4aa8:	f8 94       	cli
    4aaa:	de bf       	out	0x3e, r29	; 62
    4aac:	0f be       	out	0x3f, r0	; 63
    4aae:	cd bf       	out	0x3d, r28	; 61
    4ab0:	df 91       	pop	r29
    4ab2:	cf 91       	pop	r28
    4ab4:	1f 91       	pop	r17
    4ab6:	0f 91       	pop	r16
    4ab8:	ff 90       	pop	r15
    4aba:	ef 90       	pop	r14
    4abc:	df 90       	pop	r13
    4abe:	cf 90       	pop	r12
    4ac0:	bf 90       	pop	r11
    4ac2:	af 90       	pop	r10
    4ac4:	9f 90       	pop	r9
    4ac6:	8f 90       	pop	r8
    4ac8:	7f 90       	pop	r7
    4aca:	6f 90       	pop	r6
    4acc:	5f 90       	pop	r5
    4ace:	4f 90       	pop	r4
    4ad0:	3f 90       	pop	r3
    4ad2:	2f 90       	pop	r2
    4ad4:	08 95       	ret

00004ad6 <lora_driver_set_otaa_identity>:
    4ad6:	ef 92       	push	r14
    4ad8:	ff 92       	push	r15
    4ada:	0f 93       	push	r16
    4adc:	1f 93       	push	r17
    4ade:	cf 93       	push	r28
    4ae0:	df 93       	push	r29
    4ae2:	ec 01       	movw	r28, r24
    4ae4:	8b 01       	movw	r16, r22
    4ae6:	7a 01       	movw	r14, r20
    4ae8:	81 e0       	ldi	r24, 0x01	; 1
    4aea:	f4 de       	rcall	.-536    	; 0x48d4 <lora_driver_set_adaptive_data_rate>
    4aec:	81 11       	cpse	r24, r1
    4aee:	0d c0       	rjmp	.+26     	; 0x4b0a <lora_driver_set_otaa_identity+0x34>
    4af0:	ce 01       	movw	r24, r28
    4af2:	d4 dd       	rcall	.-1112   	; 0x469c <lora_driver_set_application_identifier>
    4af4:	81 11       	cpse	r24, r1
    4af6:	09 c0       	rjmp	.+18     	; 0x4b0a <lora_driver_set_otaa_identity+0x34>
    4af8:	c8 01       	movw	r24, r16
    4afa:	e1 dd       	rcall	.-1086   	; 0x46be <lora_driver_set_application_key>
    4afc:	81 11       	cpse	r24, r1
    4afe:	05 c0       	rjmp	.+10     	; 0x4b0a <lora_driver_set_otaa_identity+0x34>
    4b00:	c7 01       	movw	r24, r14
    4b02:	bb dd       	rcall	.-1162   	; 0x467a <lora_driver_set_device_identifier>
    4b04:	81 11       	cpse	r24, r1
    4b06:	01 c0       	rjmp	.+2      	; 0x4b0a <lora_driver_set_otaa_identity+0x34>
    4b08:	eb dd       	rcall	.-1066   	; 0x46e0 <lora_driver_save_mac>
    4b0a:	df 91       	pop	r29
    4b0c:	cf 91       	pop	r28
    4b0e:	1f 91       	pop	r17
    4b10:	0f 91       	pop	r16
    4b12:	ff 90       	pop	r15
    4b14:	ef 90       	pop	r14
    4b16:	08 95       	ret

00004b18 <lora_driver_map_return_code_to_text>:
    4b18:	90 e0       	ldi	r25, 0x00	; 0
    4b1a:	fc 01       	movw	r30, r24
    4b1c:	ee 0f       	add	r30, r30
    4b1e:	ff 1f       	adc	r31, r31
    4b20:	8e 0f       	add	r24, r30
    4b22:	9f 1f       	adc	r25, r31
    4b24:	fc 01       	movw	r30, r24
    4b26:	ed 5d       	subi	r30, 0xDD	; 221
    4b28:	f7 4f       	sbci	r31, 0xF7	; 247
    4b2a:	81 81       	ldd	r24, Z+1	; 0x01
    4b2c:	92 81       	ldd	r25, Z+2	; 0x02
    4b2e:	08 95       	ret

00004b30 <decode_port_no>:
    4b30:	dc 01       	movw	r26, r24
    4b32:	00 97       	sbiw	r24, 0x00	; 0
    4b34:	29 f1       	breq	.+74     	; 0x4b80 <decode_port_no+0x50>
    4b36:	fb 01       	movw	r30, r22
    4b38:	20 81       	ld	r18, Z
    4b3a:	fc 01       	movw	r30, r24
    4b3c:	01 90       	ld	r0, Z+
    4b3e:	00 20       	and	r0, r0
    4b40:	e9 f7       	brne	.-6      	; 0x4b3c <decode_port_no+0xc>
    4b42:	31 97       	sbiw	r30, 0x01	; 1
    4b44:	e8 1b       	sub	r30, r24
    4b46:	f9 0b       	sbc	r31, r25
    4b48:	82 2f       	mov	r24, r18
    4b4a:	90 e0       	ldi	r25, 0x00	; 0
    4b4c:	e8 17       	cp	r30, r24
    4b4e:	f9 07       	cpc	r31, r25
    4b50:	c8 f0       	brcs	.+50     	; 0x4b84 <decode_port_no+0x54>
    4b52:	80 e0       	ldi	r24, 0x00	; 0
    4b54:	08 c0       	rjmp	.+16     	; 0x4b66 <decode_port_no+0x36>
    4b56:	88 0f       	add	r24, r24
    4b58:	38 2f       	mov	r19, r24
    4b5a:	33 0f       	add	r19, r19
    4b5c:	33 0f       	add	r19, r19
    4b5e:	83 0f       	add	r24, r19
    4b60:	80 53       	subi	r24, 0x30	; 48
    4b62:	89 0f       	add	r24, r25
    4b64:	2f 5f       	subi	r18, 0xFF	; 255
    4b66:	fd 01       	movw	r30, r26
    4b68:	e2 0f       	add	r30, r18
    4b6a:	f1 1d       	adc	r31, r1
    4b6c:	90 81       	ld	r25, Z
    4b6e:	30 ed       	ldi	r19, 0xD0	; 208
    4b70:	39 0f       	add	r19, r25
    4b72:	3a 30       	cpi	r19, 0x0A	; 10
    4b74:	10 f4       	brcc	.+4      	; 0x4b7a <decode_port_no+0x4a>
    4b76:	91 11       	cpse	r25, r1
    4b78:	ee cf       	rjmp	.-36     	; 0x4b56 <decode_port_no+0x26>
    4b7a:	fb 01       	movw	r30, r22
    4b7c:	20 83       	st	Z, r18
    4b7e:	08 95       	ret
    4b80:	80 e0       	ldi	r24, 0x00	; 0
    4b82:	08 95       	ret
    4b84:	80 e0       	ldi	r24, 0x00	; 0
    4b86:	08 95       	ret

00004b88 <decode_hexadecimal_string_bytes>:
    4b88:	0f 93       	push	r16
    4b8a:	1f 93       	push	r17
    4b8c:	cf 93       	push	r28
    4b8e:	df 93       	push	r29
    4b90:	dc 01       	movw	r26, r24
    4b92:	ea 01       	movw	r28, r20
    4b94:	20 97       	sbiw	r28, 0x00	; 0
    4b96:	e1 f1       	breq	.+120    	; 0x4c10 <decode_hexadecimal_string_bytes+0x88>
    4b98:	fa 01       	movw	r30, r20
    4b9a:	01 90       	ld	r0, Z+
    4b9c:	00 20       	and	r0, r0
    4b9e:	e9 f7       	brne	.-6      	; 0x4b9a <decode_hexadecimal_string_bytes+0x12>
    4ba0:	31 97       	sbiw	r30, 0x01	; 1
    4ba2:	e4 1b       	sub	r30, r20
    4ba4:	f5 0b       	sbc	r31, r21
    4ba6:	32 97       	sbiw	r30, 0x02	; 2
    4ba8:	10 f5       	brcc	.+68     	; 0x4bee <decode_hexadecimal_string_bytes+0x66>
    4baa:	32 c0       	rjmp	.+100    	; 0x4c10 <decode_hexadecimal_string_bytes+0x88>
    4bac:	8d 01       	movw	r16, r26
    4bae:	04 0f       	add	r16, r20
    4bb0:	15 1f       	adc	r17, r21
    4bb2:	30 e0       	ldi	r19, 0x00	; 0
    4bb4:	ae 01       	movw	r20, r28
    4bb6:	42 0f       	add	r20, r18
    4bb8:	53 1f       	adc	r21, r19
    4bba:	fa 01       	movw	r30, r20
    4bbc:	90 81       	ld	r25, Z
    4bbe:	91 34       	cpi	r25, 0x41	; 65
    4bc0:	28 f0       	brcs	.+10     	; 0x4bcc <decode_hexadecimal_string_bytes+0x44>
    4bc2:	97 53       	subi	r25, 0x37	; 55
    4bc4:	59 2f       	mov	r21, r25
    4bc6:	52 95       	swap	r21
    4bc8:	50 7f       	andi	r21, 0xF0	; 240
    4bca:	03 c0       	rjmp	.+6      	; 0x4bd2 <decode_hexadecimal_string_bytes+0x4a>
    4bcc:	59 2f       	mov	r21, r25
    4bce:	52 95       	swap	r21
    4bd0:	50 7f       	andi	r21, 0xF0	; 240
    4bd2:	2c 0f       	add	r18, r28
    4bd4:	3d 1f       	adc	r19, r29
    4bd6:	f9 01       	movw	r30, r18
    4bd8:	91 81       	ldd	r25, Z+1	; 0x01
    4bda:	91 34       	cpi	r25, 0x41	; 65
    4bdc:	10 f0       	brcs	.+4      	; 0x4be2 <decode_hexadecimal_string_bytes+0x5a>
    4bde:	97 53       	subi	r25, 0x37	; 55
    4be0:	01 c0       	rjmp	.+2      	; 0x4be4 <decode_hexadecimal_string_bytes+0x5c>
    4be2:	90 53       	subi	r25, 0x30	; 48
    4be4:	95 0f       	add	r25, r21
    4be6:	f8 01       	movw	r30, r16
    4be8:	90 83       	st	Z, r25
    4bea:	8f 5f       	subi	r24, 0xFF	; 255
    4bec:	01 c0       	rjmp	.+2      	; 0x4bf0 <decode_hexadecimal_string_bytes+0x68>
    4bee:	80 e0       	ldi	r24, 0x00	; 0
    4bf0:	28 2f       	mov	r18, r24
    4bf2:	22 0f       	add	r18, r18
    4bf4:	48 2f       	mov	r20, r24
    4bf6:	50 e0       	ldi	r21, 0x00	; 0
    4bf8:	fe 01       	movw	r30, r28
    4bfa:	01 90       	ld	r0, Z+
    4bfc:	00 20       	and	r0, r0
    4bfe:	e9 f7       	brne	.-6      	; 0x4bfa <decode_hexadecimal_string_bytes+0x72>
    4c00:	31 97       	sbiw	r30, 0x01	; 1
    4c02:	ec 1b       	sub	r30, r28
    4c04:	fd 0b       	sbc	r31, r29
    4c06:	4e 17       	cp	r20, r30
    4c08:	5f 07       	cpc	r21, r31
    4c0a:	10 f4       	brcc	.+4      	; 0x4c10 <decode_hexadecimal_string_bytes+0x88>
    4c0c:	86 13       	cpse	r24, r22
    4c0e:	ce cf       	rjmp	.-100    	; 0x4bac <decode_hexadecimal_string_bytes+0x24>
    4c10:	df 91       	pop	r29
    4c12:	cf 91       	pop	r28
    4c14:	1f 91       	pop	r17
    4c16:	0f 91       	pop	r16
    4c18:	08 95       	ret

00004c1a <reg_read_register>:
    4c1a:	fc 01       	movw	r30, r24
    4c1c:	80 81       	ld	r24, Z
    4c1e:	08 95       	ret

00004c20 <reg_read_bit>:
    4c20:	fc 01       	movw	r30, r24
    4c22:	20 81       	ld	r18, Z
    4c24:	81 e0       	ldi	r24, 0x01	; 1
    4c26:	90 e0       	ldi	r25, 0x00	; 0
    4c28:	02 c0       	rjmp	.+4      	; 0x4c2e <reg_read_bit+0xe>
    4c2a:	88 0f       	add	r24, r24
    4c2c:	99 1f       	adc	r25, r25
    4c2e:	6a 95       	dec	r22
    4c30:	e2 f7       	brpl	.-8      	; 0x4c2a <reg_read_bit+0xa>
    4c32:	82 23       	and	r24, r18
    4c34:	08 95       	ret

00004c36 <reg_read_bits>:
    4c36:	fc 01       	movw	r30, r24
    4c38:	80 81       	ld	r24, Z
    4c3a:	86 23       	and	r24, r22
    4c3c:	08 95       	ret

00004c3e <reg_set_register>:
    4c3e:	fc 01       	movw	r30, r24
    4c40:	60 83       	st	Z, r22
    4c42:	08 95       	ret

00004c44 <reg_clear_register>:
    4c44:	fc 01       	movw	r30, r24
    4c46:	10 82       	st	Z, r1
    4c48:	08 95       	ret

00004c4a <reg_set_bit>:
    4c4a:	fc 01       	movw	r30, r24
    4c4c:	40 81       	ld	r20, Z
    4c4e:	21 e0       	ldi	r18, 0x01	; 1
    4c50:	30 e0       	ldi	r19, 0x00	; 0
    4c52:	02 c0       	rjmp	.+4      	; 0x4c58 <reg_set_bit+0xe>
    4c54:	22 0f       	add	r18, r18
    4c56:	33 1f       	adc	r19, r19
    4c58:	6a 95       	dec	r22
    4c5a:	e2 f7       	brpl	.-8      	; 0x4c54 <reg_set_bit+0xa>
    4c5c:	24 2b       	or	r18, r20
    4c5e:	20 83       	st	Z, r18
    4c60:	08 95       	ret

00004c62 <reg_set_bits>:
    4c62:	fc 01       	movw	r30, r24
    4c64:	20 81       	ld	r18, Z
    4c66:	62 2b       	or	r22, r18
    4c68:	60 83       	st	Z, r22
    4c6a:	08 95       	ret

00004c6c <reg_toggle_bit>:
    4c6c:	fc 01       	movw	r30, r24
    4c6e:	40 81       	ld	r20, Z
    4c70:	21 e0       	ldi	r18, 0x01	; 1
    4c72:	30 e0       	ldi	r19, 0x00	; 0
    4c74:	02 c0       	rjmp	.+4      	; 0x4c7a <reg_toggle_bit+0xe>
    4c76:	22 0f       	add	r18, r18
    4c78:	33 1f       	adc	r19, r19
    4c7a:	6a 95       	dec	r22
    4c7c:	e2 f7       	brpl	.-8      	; 0x4c76 <reg_toggle_bit+0xa>
    4c7e:	24 27       	eor	r18, r20
    4c80:	20 83       	st	Z, r18
    4c82:	08 95       	ret

00004c84 <reg_toggle_bits>:
    4c84:	fc 01       	movw	r30, r24
    4c86:	20 81       	ld	r18, Z
    4c88:	62 27       	eor	r22, r18
    4c8a:	60 83       	st	Z, r22
    4c8c:	08 95       	ret

00004c8e <reg_clear_bit>:
    4c8e:	fc 01       	movw	r30, r24
    4c90:	90 81       	ld	r25, Z
    4c92:	21 e0       	ldi	r18, 0x01	; 1
    4c94:	30 e0       	ldi	r19, 0x00	; 0
    4c96:	02 c0       	rjmp	.+4      	; 0x4c9c <reg_clear_bit+0xe>
    4c98:	22 0f       	add	r18, r18
    4c9a:	33 1f       	adc	r19, r19
    4c9c:	6a 95       	dec	r22
    4c9e:	e2 f7       	brpl	.-8      	; 0x4c98 <reg_clear_bit+0xa>
    4ca0:	20 95       	com	r18
    4ca2:	29 23       	and	r18, r25
    4ca4:	20 83       	st	Z, r18
    4ca6:	08 95       	ret

00004ca8 <reg_clear_bits>:
    4ca8:	fc 01       	movw	r30, r24
    4caa:	90 81       	ld	r25, Z
    4cac:	60 95       	com	r22
    4cae:	69 23       	and	r22, r25
    4cb0:	60 83       	st	Z, r22
    4cb2:	08 95       	ret

00004cb4 <serial_new_instance>:
    4cb4:	2f 92       	push	r2
    4cb6:	3f 92       	push	r3
    4cb8:	4f 92       	push	r4
    4cba:	5f 92       	push	r5
    4cbc:	6f 92       	push	r6
    4cbe:	7f 92       	push	r7
    4cc0:	8f 92       	push	r8
    4cc2:	9f 92       	push	r9
    4cc4:	af 92       	push	r10
    4cc6:	cf 92       	push	r12
    4cc8:	ef 92       	push	r14
    4cca:	ff 92       	push	r15
    4ccc:	0f 93       	push	r16
    4cce:	1f 93       	push	r17
    4cd0:	cf 93       	push	r28
    4cd2:	df 93       	push	r29
    4cd4:	cd b7       	in	r28, 0x3d	; 61
    4cd6:	de b7       	in	r29, 0x3e	; 62
    4cd8:	f8 2e       	mov	r15, r24
    4cda:	2a 01       	movw	r4, r20
    4cdc:	3b 01       	movw	r6, r22
    4cde:	88 e0       	ldi	r24, 0x08	; 8
    4ce0:	90 e0       	ldi	r25, 0x00	; 0
    4ce2:	9b d7       	rcall	.+3894   	; 0x5c1a <malloc>
    4ce4:	8c 01       	movw	r16, r24
    4ce6:	8f 2d       	mov	r24, r15
    4ce8:	90 e0       	ldi	r25, 0x00	; 0
    4cea:	88 0f       	add	r24, r24
    4cec:	99 1f       	adc	r25, r25
    4cee:	fc 01       	movw	r30, r24
    4cf0:	e2 5f       	subi	r30, 0xF2	; 242
    4cf2:	f4 4e       	sbci	r31, 0xE4	; 228
    4cf4:	11 83       	std	Z+1, r17	; 0x01
    4cf6:	00 83       	st	Z, r16
    4cf8:	fc 01       	movw	r30, r24
    4cfa:	e6 5f       	subi	r30, 0xF6	; 246
    4cfc:	fd 4f       	sbci	r31, 0xFD	; 253
    4cfe:	80 81       	ld	r24, Z
    4d00:	91 81       	ldd	r25, Z+1	; 0x01
    4d02:	d8 01       	movw	r26, r16
    4d04:	8d 93       	st	X+, r24
    4d06:	9c 93       	st	X, r25
    4d08:	6c 2d       	mov	r22, r12
    4d0a:	70 e0       	ldi	r23, 0x00	; 0
    4d0c:	84 e0       	ldi	r24, 0x04	; 4
    4d0e:	90 e0       	ldi	r25, 0x00	; 0
    4d10:	6a d7       	rcall	.+3796   	; 0x5be6 <calloc>
    4d12:	1c 01       	movw	r2, r24
    4d14:	61 e0       	ldi	r22, 0x01	; 1
    4d16:	70 e0       	ldi	r23, 0x00	; 0
    4d18:	86 e0       	ldi	r24, 0x06	; 6
    4d1a:	90 e0       	ldi	r25, 0x00	; 0
    4d1c:	64 d7       	rcall	.+3784   	; 0x5be6 <calloc>
    4d1e:	7c 01       	movw	r14, r24
    4d20:	4c 2d       	mov	r20, r12
    4d22:	b1 01       	movw	r22, r2
    4d24:	2b d5       	rcall	.+2646   	; 0x577c <fifo_init>
    4d26:	f8 01       	movw	r30, r16
    4d28:	f5 82       	std	Z+5, r15	; 0x05
    4d2a:	e4 82       	std	Z+4, r14	; 0x04
    4d2c:	6a 2d       	mov	r22, r10
    4d2e:	70 e0       	ldi	r23, 0x00	; 0
    4d30:	84 e0       	ldi	r24, 0x04	; 4
    4d32:	90 e0       	ldi	r25, 0x00	; 0
    4d34:	58 d7       	rcall	.+3760   	; 0x5be6 <calloc>
    4d36:	1c 01       	movw	r2, r24
    4d38:	61 e0       	ldi	r22, 0x01	; 1
    4d3a:	70 e0       	ldi	r23, 0x00	; 0
    4d3c:	86 e0       	ldi	r24, 0x06	; 6
    4d3e:	90 e0       	ldi	r25, 0x00	; 0
    4d40:	52 d7       	rcall	.+3748   	; 0x5be6 <calloc>
    4d42:	7c 01       	movw	r14, r24
    4d44:	4a 2d       	mov	r20, r10
    4d46:	b1 01       	movw	r22, r2
    4d48:	19 d5       	rcall	.+2610   	; 0x577c <fifo_init>
    4d4a:	d8 01       	movw	r26, r16
    4d4c:	13 96       	adiw	r26, 0x03	; 3
    4d4e:	fc 92       	st	X, r15
    4d50:	ee 92       	st	-X, r14
    4d52:	12 97       	sbiw	r26, 0x02	; 2
    4d54:	17 96       	adiw	r26, 0x07	; 7
    4d56:	9c 92       	st	X, r9
    4d58:	8e 92       	st	-X, r8
    4d5a:	16 97       	sbiw	r26, 0x06	; 6
    4d5c:	ff b6       	in	r15, 0x3f	; 63
    4d5e:	f8 94       	cli
    4d60:	ed 91       	ld	r30, X+
    4d62:	fc 91       	ld	r31, X
    4d64:	11 97       	sbiw	r26, 0x01	; 1
    4d66:	36 97       	sbiw	r30, 0x06	; 6
    4d68:	80 81       	ld	r24, Z
    4d6a:	82 60       	ori	r24, 0x02	; 2
    4d6c:	80 83       	st	Z, r24
    4d6e:	8d 90       	ld	r8, X+
    4d70:	9c 90       	ld	r9, X
    4d72:	c3 01       	movw	r24, r6
    4d74:	b2 01       	movw	r22, r4
    4d76:	1c d6       	rcall	.+3128   	; 0x59b0 <__floatunsisf>
    4d78:	20 e0       	ldi	r18, 0x00	; 0
    4d7a:	30 e0       	ldi	r19, 0x00	; 0
    4d7c:	40 e0       	ldi	r20, 0x00	; 0
    4d7e:	51 e4       	ldi	r21, 0x41	; 65
    4d80:	a5 d6       	rcall	.+3402   	; 0x5acc <__mulsf3>
    4d82:	9b 01       	movw	r18, r22
    4d84:	ac 01       	movw	r20, r24
    4d86:	60 e0       	ldi	r22, 0x00	; 0
    4d88:	74 e2       	ldi	r23, 0x24	; 36
    4d8a:	84 e7       	ldi	r24, 0x74	; 116
    4d8c:	9b e4       	ldi	r25, 0x4B	; 75
    4d8e:	77 d5       	rcall	.+2798   	; 0x587e <__divsf3>
    4d90:	20 e0       	ldi	r18, 0x00	; 0
    4d92:	30 e0       	ldi	r19, 0x00	; 0
    4d94:	40 e8       	ldi	r20, 0x80	; 128
    4d96:	5f e3       	ldi	r21, 0x3F	; 63
    4d98:	0d d5       	rcall	.+2586   	; 0x57b4 <__subsf3>
    4d9a:	de d5       	rcall	.+3004   	; 0x5958 <__fixunssfsi>
    4d9c:	f4 01       	movw	r30, r8
    4d9e:	32 97       	sbiw	r30, 0x02	; 2
    4da0:	60 83       	st	Z, r22
    4da2:	d8 01       	movw	r26, r16
    4da4:	ed 91       	ld	r30, X+
    4da6:	fc 91       	ld	r31, X
    4da8:	11 97       	sbiw	r26, 0x01	; 1
    4daa:	35 97       	sbiw	r30, 0x05	; 5
    4dac:	88 e9       	ldi	r24, 0x98	; 152
    4dae:	80 83       	st	Z, r24
    4db0:	ed 91       	ld	r30, X+
    4db2:	fc 91       	ld	r31, X
    4db4:	34 97       	sbiw	r30, 0x04	; 4
    4db6:	86 e0       	ldi	r24, 0x06	; 6
    4db8:	80 83       	st	Z, r24
    4dba:	ff be       	out	0x3f, r15	; 63
    4dbc:	c8 01       	movw	r24, r16
    4dbe:	df 91       	pop	r29
    4dc0:	cf 91       	pop	r28
    4dc2:	1f 91       	pop	r17
    4dc4:	0f 91       	pop	r16
    4dc6:	ff 90       	pop	r15
    4dc8:	ef 90       	pop	r14
    4dca:	cf 90       	pop	r12
    4dcc:	af 90       	pop	r10
    4dce:	9f 90       	pop	r9
    4dd0:	8f 90       	pop	r8
    4dd2:	7f 90       	pop	r7
    4dd4:	6f 90       	pop	r6
    4dd6:	5f 90       	pop	r5
    4dd8:	4f 90       	pop	r4
    4dda:	3f 90       	pop	r3
    4ddc:	2f 90       	pop	r2
    4dde:	08 95       	ret

00004de0 <serial_send_byte>:
    4de0:	cf 93       	push	r28
    4de2:	df 93       	push	r29
    4de4:	ec 01       	movw	r28, r24
    4de6:	ea 81       	ldd	r30, Y+2	; 0x02
    4de8:	fb 81       	ldd	r31, Y+3	; 0x03
    4dea:	93 81       	ldd	r25, Z+3	; 0x03
    4dec:	82 81       	ldd	r24, Z+2	; 0x02
    4dee:	25 81       	ldd	r18, Z+5	; 0x05
    4df0:	98 1b       	sub	r25, r24
    4df2:	92 23       	and	r25, r18
    4df4:	84 81       	ldd	r24, Z+4	; 0x04
    4df6:	98 17       	cp	r25, r24
    4df8:	a1 f0       	breq	.+40     	; 0x4e22 <serial_send_byte+0x42>
    4dfa:	93 81       	ldd	r25, Z+3	; 0x03
    4dfc:	26 95       	lsr	r18
    4dfe:	29 23       	and	r18, r25
    4e00:	a0 81       	ld	r26, Z
    4e02:	b1 81       	ldd	r27, Z+1	; 0x01
    4e04:	a2 0f       	add	r26, r18
    4e06:	b1 1d       	adc	r27, r1
    4e08:	6c 93       	st	X, r22
    4e0a:	9f 5f       	subi	r25, 0xFF	; 255
    4e0c:	25 81       	ldd	r18, Z+5	; 0x05
    4e0e:	92 23       	and	r25, r18
    4e10:	93 83       	std	Z+3, r25	; 0x03
    4e12:	e8 81       	ld	r30, Y
    4e14:	f9 81       	ldd	r31, Y+1	; 0x01
    4e16:	35 97       	sbiw	r30, 0x05	; 5
    4e18:	80 81       	ld	r24, Z
    4e1a:	80 62       	ori	r24, 0x20	; 32
    4e1c:	80 83       	st	Z, r24
    4e1e:	80 e0       	ldi	r24, 0x00	; 0
    4e20:	01 c0       	rjmp	.+2      	; 0x4e24 <serial_send_byte+0x44>
    4e22:	82 e0       	ldi	r24, 0x02	; 2
    4e24:	df 91       	pop	r29
    4e26:	cf 91       	pop	r28
    4e28:	08 95       	ret

00004e2a <serial_send_bytes>:
    4e2a:	ef 92       	push	r14
    4e2c:	ff 92       	push	r15
    4e2e:	0f 93       	push	r16
    4e30:	1f 93       	push	r17
    4e32:	cf 93       	push	r28
    4e34:	df 93       	push	r29
    4e36:	7c 01       	movw	r14, r24
    4e38:	dc 01       	movw	r26, r24
    4e3a:	12 96       	adiw	r26, 0x02	; 2
    4e3c:	ed 91       	ld	r30, X+
    4e3e:	fc 91       	ld	r31, X
    4e40:	13 97       	sbiw	r26, 0x03	; 3
    4e42:	93 81       	ldd	r25, Z+3	; 0x03
    4e44:	82 81       	ldd	r24, Z+2	; 0x02
    4e46:	98 1b       	sub	r25, r24
    4e48:	85 81       	ldd	r24, Z+5	; 0x05
    4e4a:	98 23       	and	r25, r24
    4e4c:	84 81       	ldd	r24, Z+4	; 0x04
    4e4e:	89 1b       	sub	r24, r25
    4e50:	86 17       	cp	r24, r22
    4e52:	98 f1       	brcs	.+102    	; 0x4eba <serial_send_bytes+0x90>
    4e54:	66 23       	and	r22, r22
    4e56:	41 f1       	breq	.+80     	; 0x4ea8 <serial_send_bytes+0x7e>
    4e58:	84 2f       	mov	r24, r20
    4e5a:	95 2f       	mov	r25, r21
    4e5c:	dc 01       	movw	r26, r24
    4e5e:	61 50       	subi	r22, 0x01	; 1
    4e60:	46 2f       	mov	r20, r22
    4e62:	50 e0       	ldi	r21, 0x00	; 0
    4e64:	4f 5f       	subi	r20, 0xFF	; 255
    4e66:	5f 4f       	sbci	r21, 0xFF	; 255
    4e68:	48 0f       	add	r20, r24
    4e6a:	59 1f       	adc	r21, r25
    4e6c:	e7 01       	movw	r28, r14
    4e6e:	ea 81       	ldd	r30, Y+2	; 0x02
    4e70:	fb 81       	ldd	r31, Y+3	; 0x03
    4e72:	93 81       	ldd	r25, Z+3	; 0x03
    4e74:	82 81       	ldd	r24, Z+2	; 0x02
    4e76:	25 81       	ldd	r18, Z+5	; 0x05
    4e78:	98 1b       	sub	r25, r24
    4e7a:	92 23       	and	r25, r18
    4e7c:	84 81       	ldd	r24, Z+4	; 0x04
    4e7e:	98 17       	cp	r25, r24
    4e80:	79 f0       	breq	.+30     	; 0x4ea0 <serial_send_bytes+0x76>
    4e82:	8c 91       	ld	r24, X
    4e84:	93 81       	ldd	r25, Z+3	; 0x03
    4e86:	26 95       	lsr	r18
    4e88:	29 23       	and	r18, r25
    4e8a:	60 81       	ld	r22, Z
    4e8c:	71 81       	ldd	r23, Z+1	; 0x01
    4e8e:	8b 01       	movw	r16, r22
    4e90:	02 0f       	add	r16, r18
    4e92:	11 1d       	adc	r17, r1
    4e94:	e8 01       	movw	r28, r16
    4e96:	88 83       	st	Y, r24
    4e98:	9f 5f       	subi	r25, 0xFF	; 255
    4e9a:	85 81       	ldd	r24, Z+5	; 0x05
    4e9c:	98 23       	and	r25, r24
    4e9e:	93 83       	std	Z+3, r25	; 0x03
    4ea0:	11 96       	adiw	r26, 0x01	; 1
    4ea2:	a4 17       	cp	r26, r20
    4ea4:	b5 07       	cpc	r27, r21
    4ea6:	11 f7       	brne	.-60     	; 0x4e6c <serial_send_bytes+0x42>
    4ea8:	d7 01       	movw	r26, r14
    4eaa:	ed 91       	ld	r30, X+
    4eac:	fc 91       	ld	r31, X
    4eae:	35 97       	sbiw	r30, 0x05	; 5
    4eb0:	80 81       	ld	r24, Z
    4eb2:	80 62       	ori	r24, 0x20	; 32
    4eb4:	80 83       	st	Z, r24
    4eb6:	80 e0       	ldi	r24, 0x00	; 0
    4eb8:	01 c0       	rjmp	.+2      	; 0x4ebc <serial_send_bytes+0x92>
    4eba:	82 e0       	ldi	r24, 0x02	; 2
    4ebc:	df 91       	pop	r29
    4ebe:	cf 91       	pop	r28
    4ec0:	1f 91       	pop	r17
    4ec2:	0f 91       	pop	r16
    4ec4:	ff 90       	pop	r15
    4ec6:	ef 90       	pop	r14
    4ec8:	08 95       	ret

00004eca <serial_get_byte>:
    4eca:	dc 01       	movw	r26, r24
    4ecc:	14 96       	adiw	r26, 0x04	; 4
    4ece:	ed 91       	ld	r30, X+
    4ed0:	fc 91       	ld	r31, X
    4ed2:	15 97       	sbiw	r26, 0x05	; 5
    4ed4:	93 81       	ldd	r25, Z+3	; 0x03
    4ed6:	82 81       	ldd	r24, Z+2	; 0x02
    4ed8:	98 17       	cp	r25, r24
    4eda:	89 f0       	breq	.+34     	; 0x4efe <serial_get_byte+0x34>
    4edc:	92 81       	ldd	r25, Z+2	; 0x02
    4ede:	85 81       	ldd	r24, Z+5	; 0x05
    4ee0:	86 95       	lsr	r24
    4ee2:	89 23       	and	r24, r25
    4ee4:	a0 81       	ld	r26, Z
    4ee6:	b1 81       	ldd	r27, Z+1	; 0x01
    4ee8:	a8 0f       	add	r26, r24
    4eea:	b1 1d       	adc	r27, r1
    4eec:	8c 91       	ld	r24, X
    4eee:	db 01       	movw	r26, r22
    4ef0:	8c 93       	st	X, r24
    4ef2:	9f 5f       	subi	r25, 0xFF	; 255
    4ef4:	85 81       	ldd	r24, Z+5	; 0x05
    4ef6:	98 23       	and	r25, r24
    4ef8:	92 83       	std	Z+2, r25	; 0x02
    4efa:	80 e0       	ldi	r24, 0x00	; 0
    4efc:	08 95       	ret
    4efe:	83 e0       	ldi	r24, 0x03	; 3
    4f00:	08 95       	ret

00004f02 <__vector_25>:
    4f02:	1f 92       	push	r1
    4f04:	0f 92       	push	r0
    4f06:	0f b6       	in	r0, 0x3f	; 63
    4f08:	0f 92       	push	r0
    4f0a:	11 24       	eor	r1, r1
    4f0c:	0b b6       	in	r0, 0x3b	; 59
    4f0e:	0f 92       	push	r0
    4f10:	2f 93       	push	r18
    4f12:	3f 93       	push	r19
    4f14:	4f 93       	push	r20
    4f16:	5f 93       	push	r21
    4f18:	6f 93       	push	r22
    4f1a:	7f 93       	push	r23
    4f1c:	8f 93       	push	r24
    4f1e:	9f 93       	push	r25
    4f20:	af 93       	push	r26
    4f22:	bf 93       	push	r27
    4f24:	cf 93       	push	r28
    4f26:	df 93       	push	r29
    4f28:	ef 93       	push	r30
    4f2a:	ff 93       	push	r31
    4f2c:	a0 91 0e 1b 	lds	r26, 0x1B0E	; 0x801b0e <_ser_handle>
    4f30:	b0 91 0f 1b 	lds	r27, 0x1B0F	; 0x801b0f <_ser_handle+0x1>
    4f34:	10 97       	sbiw	r26, 0x00	; 0
    4f36:	11 f1       	breq	.+68     	; 0x4f7c <__vector_25+0x7a>
    4f38:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    4f3c:	14 96       	adiw	r26, 0x04	; 4
    4f3e:	ed 91       	ld	r30, X+
    4f40:	fc 91       	ld	r31, X
    4f42:	15 97       	sbiw	r26, 0x05	; 5
    4f44:	93 81       	ldd	r25, Z+3	; 0x03
    4f46:	82 81       	ldd	r24, Z+2	; 0x02
    4f48:	25 81       	ldd	r18, Z+5	; 0x05
    4f4a:	98 1b       	sub	r25, r24
    4f4c:	92 23       	and	r25, r18
    4f4e:	84 81       	ldd	r24, Z+4	; 0x04
    4f50:	98 17       	cp	r25, r24
    4f52:	61 f0       	breq	.+24     	; 0x4f6c <__vector_25+0x6a>
    4f54:	83 81       	ldd	r24, Z+3	; 0x03
    4f56:	26 95       	lsr	r18
    4f58:	28 23       	and	r18, r24
    4f5a:	c0 81       	ld	r28, Z
    4f5c:	d1 81       	ldd	r29, Z+1	; 0x01
    4f5e:	c2 0f       	add	r28, r18
    4f60:	d1 1d       	adc	r29, r1
    4f62:	68 83       	st	Y, r22
    4f64:	8f 5f       	subi	r24, 0xFF	; 255
    4f66:	95 81       	ldd	r25, Z+5	; 0x05
    4f68:	89 23       	and	r24, r25
    4f6a:	83 83       	std	Z+3, r24	; 0x03
    4f6c:	16 96       	adiw	r26, 0x06	; 6
    4f6e:	ed 91       	ld	r30, X+
    4f70:	fc 91       	ld	r31, X
    4f72:	17 97       	sbiw	r26, 0x07	; 7
    4f74:	30 97       	sbiw	r30, 0x00	; 0
    4f76:	11 f0       	breq	.+4      	; 0x4f7c <__vector_25+0x7a>
    4f78:	cd 01       	movw	r24, r26
    4f7a:	19 95       	eicall
    4f7c:	ff 91       	pop	r31
    4f7e:	ef 91       	pop	r30
    4f80:	df 91       	pop	r29
    4f82:	cf 91       	pop	r28
    4f84:	bf 91       	pop	r27
    4f86:	af 91       	pop	r26
    4f88:	9f 91       	pop	r25
    4f8a:	8f 91       	pop	r24
    4f8c:	7f 91       	pop	r23
    4f8e:	6f 91       	pop	r22
    4f90:	5f 91       	pop	r21
    4f92:	4f 91       	pop	r20
    4f94:	3f 91       	pop	r19
    4f96:	2f 91       	pop	r18
    4f98:	0f 90       	pop	r0
    4f9a:	0b be       	out	0x3b, r0	; 59
    4f9c:	0f 90       	pop	r0
    4f9e:	0f be       	out	0x3f, r0	; 63
    4fa0:	0f 90       	pop	r0
    4fa2:	1f 90       	pop	r1
    4fa4:	18 95       	reti

00004fa6 <__vector_26>:
    4fa6:	1f 92       	push	r1
    4fa8:	0f 92       	push	r0
    4faa:	0f b6       	in	r0, 0x3f	; 63
    4fac:	0f 92       	push	r0
    4fae:	11 24       	eor	r1, r1
    4fb0:	0b b6       	in	r0, 0x3b	; 59
    4fb2:	0f 92       	push	r0
    4fb4:	2f 93       	push	r18
    4fb6:	8f 93       	push	r24
    4fb8:	9f 93       	push	r25
    4fba:	af 93       	push	r26
    4fbc:	bf 93       	push	r27
    4fbe:	ef 93       	push	r30
    4fc0:	ff 93       	push	r31
    4fc2:	e0 91 0e 1b 	lds	r30, 0x1B0E	; 0x801b0e <_ser_handle>
    4fc6:	f0 91 0f 1b 	lds	r31, 0x1B0F	; 0x801b0f <_ser_handle+0x1>
    4fca:	30 97       	sbiw	r30, 0x00	; 0
    4fcc:	b9 f0       	breq	.+46     	; 0x4ffc <__vector_26+0x56>
    4fce:	02 80       	ldd	r0, Z+2	; 0x02
    4fd0:	f3 81       	ldd	r31, Z+3	; 0x03
    4fd2:	e0 2d       	mov	r30, r0
    4fd4:	93 81       	ldd	r25, Z+3	; 0x03
    4fd6:	82 81       	ldd	r24, Z+2	; 0x02
    4fd8:	98 17       	cp	r25, r24
    4fda:	b1 f0       	breq	.+44     	; 0x5008 <__vector_26+0x62>
    4fdc:	92 81       	ldd	r25, Z+2	; 0x02
    4fde:	85 81       	ldd	r24, Z+5	; 0x05
    4fe0:	28 2f       	mov	r18, r24
    4fe2:	26 95       	lsr	r18
    4fe4:	29 23       	and	r18, r25
    4fe6:	a0 81       	ld	r26, Z
    4fe8:	b1 81       	ldd	r27, Z+1	; 0x01
    4fea:	a2 0f       	add	r26, r18
    4fec:	b1 1d       	adc	r27, r1
    4fee:	2c 91       	ld	r18, X
    4ff0:	9f 5f       	subi	r25, 0xFF	; 255
    4ff2:	89 23       	and	r24, r25
    4ff4:	82 83       	std	Z+2, r24	; 0x02
    4ff6:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    4ffa:	0b c0       	rjmp	.+22     	; 0x5012 <__vector_26+0x6c>
    4ffc:	e1 ec       	ldi	r30, 0xC1	; 193
    4ffe:	f0 e0       	ldi	r31, 0x00	; 0
    5000:	80 81       	ld	r24, Z
    5002:	8f 7d       	andi	r24, 0xDF	; 223
    5004:	80 83       	st	Z, r24
    5006:	05 c0       	rjmp	.+10     	; 0x5012 <__vector_26+0x6c>
    5008:	e1 ec       	ldi	r30, 0xC1	; 193
    500a:	f0 e0       	ldi	r31, 0x00	; 0
    500c:	80 81       	ld	r24, Z
    500e:	8f 7d       	andi	r24, 0xDF	; 223
    5010:	80 83       	st	Z, r24
    5012:	ff 91       	pop	r31
    5014:	ef 91       	pop	r30
    5016:	bf 91       	pop	r27
    5018:	af 91       	pop	r26
    501a:	9f 91       	pop	r25
    501c:	8f 91       	pop	r24
    501e:	2f 91       	pop	r18
    5020:	0f 90       	pop	r0
    5022:	0b be       	out	0x3b, r0	; 59
    5024:	0f 90       	pop	r0
    5026:	0f be       	out	0x3f, r0	; 63
    5028:	0f 90       	pop	r0
    502a:	1f 90       	pop	r1
    502c:	18 95       	reti

0000502e <__vector_36>:
    502e:	1f 92       	push	r1
    5030:	0f 92       	push	r0
    5032:	0f b6       	in	r0, 0x3f	; 63
    5034:	0f 92       	push	r0
    5036:	11 24       	eor	r1, r1
    5038:	0b b6       	in	r0, 0x3b	; 59
    503a:	0f 92       	push	r0
    503c:	2f 93       	push	r18
    503e:	3f 93       	push	r19
    5040:	4f 93       	push	r20
    5042:	5f 93       	push	r21
    5044:	6f 93       	push	r22
    5046:	7f 93       	push	r23
    5048:	8f 93       	push	r24
    504a:	9f 93       	push	r25
    504c:	af 93       	push	r26
    504e:	bf 93       	push	r27
    5050:	cf 93       	push	r28
    5052:	df 93       	push	r29
    5054:	ef 93       	push	r30
    5056:	ff 93       	push	r31
    5058:	a0 91 10 1b 	lds	r26, 0x1B10	; 0x801b10 <_ser_handle+0x2>
    505c:	b0 91 11 1b 	lds	r27, 0x1B11	; 0x801b11 <_ser_handle+0x3>
    5060:	10 97       	sbiw	r26, 0x00	; 0
    5062:	11 f1       	breq	.+68     	; 0x50a8 <__vector_36+0x7a>
    5064:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    5068:	14 96       	adiw	r26, 0x04	; 4
    506a:	ed 91       	ld	r30, X+
    506c:	fc 91       	ld	r31, X
    506e:	15 97       	sbiw	r26, 0x05	; 5
    5070:	93 81       	ldd	r25, Z+3	; 0x03
    5072:	82 81       	ldd	r24, Z+2	; 0x02
    5074:	25 81       	ldd	r18, Z+5	; 0x05
    5076:	98 1b       	sub	r25, r24
    5078:	92 23       	and	r25, r18
    507a:	84 81       	ldd	r24, Z+4	; 0x04
    507c:	98 17       	cp	r25, r24
    507e:	61 f0       	breq	.+24     	; 0x5098 <__vector_36+0x6a>
    5080:	83 81       	ldd	r24, Z+3	; 0x03
    5082:	26 95       	lsr	r18
    5084:	28 23       	and	r18, r24
    5086:	c0 81       	ld	r28, Z
    5088:	d1 81       	ldd	r29, Z+1	; 0x01
    508a:	c2 0f       	add	r28, r18
    508c:	d1 1d       	adc	r29, r1
    508e:	68 83       	st	Y, r22
    5090:	8f 5f       	subi	r24, 0xFF	; 255
    5092:	95 81       	ldd	r25, Z+5	; 0x05
    5094:	89 23       	and	r24, r25
    5096:	83 83       	std	Z+3, r24	; 0x03
    5098:	16 96       	adiw	r26, 0x06	; 6
    509a:	ed 91       	ld	r30, X+
    509c:	fc 91       	ld	r31, X
    509e:	17 97       	sbiw	r26, 0x07	; 7
    50a0:	30 97       	sbiw	r30, 0x00	; 0
    50a2:	11 f0       	breq	.+4      	; 0x50a8 <__vector_36+0x7a>
    50a4:	cd 01       	movw	r24, r26
    50a6:	19 95       	eicall
    50a8:	ff 91       	pop	r31
    50aa:	ef 91       	pop	r30
    50ac:	df 91       	pop	r29
    50ae:	cf 91       	pop	r28
    50b0:	bf 91       	pop	r27
    50b2:	af 91       	pop	r26
    50b4:	9f 91       	pop	r25
    50b6:	8f 91       	pop	r24
    50b8:	7f 91       	pop	r23
    50ba:	6f 91       	pop	r22
    50bc:	5f 91       	pop	r21
    50be:	4f 91       	pop	r20
    50c0:	3f 91       	pop	r19
    50c2:	2f 91       	pop	r18
    50c4:	0f 90       	pop	r0
    50c6:	0b be       	out	0x3b, r0	; 59
    50c8:	0f 90       	pop	r0
    50ca:	0f be       	out	0x3f, r0	; 63
    50cc:	0f 90       	pop	r0
    50ce:	1f 90       	pop	r1
    50d0:	18 95       	reti

000050d2 <__vector_37>:
    50d2:	1f 92       	push	r1
    50d4:	0f 92       	push	r0
    50d6:	0f b6       	in	r0, 0x3f	; 63
    50d8:	0f 92       	push	r0
    50da:	11 24       	eor	r1, r1
    50dc:	0b b6       	in	r0, 0x3b	; 59
    50de:	0f 92       	push	r0
    50e0:	2f 93       	push	r18
    50e2:	8f 93       	push	r24
    50e4:	9f 93       	push	r25
    50e6:	af 93       	push	r26
    50e8:	bf 93       	push	r27
    50ea:	ef 93       	push	r30
    50ec:	ff 93       	push	r31
    50ee:	e0 91 10 1b 	lds	r30, 0x1B10	; 0x801b10 <_ser_handle+0x2>
    50f2:	f0 91 11 1b 	lds	r31, 0x1B11	; 0x801b11 <_ser_handle+0x3>
    50f6:	30 97       	sbiw	r30, 0x00	; 0
    50f8:	b9 f0       	breq	.+46     	; 0x5128 <__vector_37+0x56>
    50fa:	02 80       	ldd	r0, Z+2	; 0x02
    50fc:	f3 81       	ldd	r31, Z+3	; 0x03
    50fe:	e0 2d       	mov	r30, r0
    5100:	93 81       	ldd	r25, Z+3	; 0x03
    5102:	82 81       	ldd	r24, Z+2	; 0x02
    5104:	98 17       	cp	r25, r24
    5106:	b1 f0       	breq	.+44     	; 0x5134 <__vector_37+0x62>
    5108:	92 81       	ldd	r25, Z+2	; 0x02
    510a:	85 81       	ldd	r24, Z+5	; 0x05
    510c:	28 2f       	mov	r18, r24
    510e:	26 95       	lsr	r18
    5110:	29 23       	and	r18, r25
    5112:	a0 81       	ld	r26, Z
    5114:	b1 81       	ldd	r27, Z+1	; 0x01
    5116:	a2 0f       	add	r26, r18
    5118:	b1 1d       	adc	r27, r1
    511a:	2c 91       	ld	r18, X
    511c:	9f 5f       	subi	r25, 0xFF	; 255
    511e:	89 23       	and	r24, r25
    5120:	82 83       	std	Z+2, r24	; 0x02
    5122:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    5126:	0b c0       	rjmp	.+22     	; 0x513e <__vector_37+0x6c>
    5128:	e9 ec       	ldi	r30, 0xC9	; 201
    512a:	f0 e0       	ldi	r31, 0x00	; 0
    512c:	80 81       	ld	r24, Z
    512e:	8f 7d       	andi	r24, 0xDF	; 223
    5130:	80 83       	st	Z, r24
    5132:	05 c0       	rjmp	.+10     	; 0x513e <__vector_37+0x6c>
    5134:	e9 ec       	ldi	r30, 0xC9	; 201
    5136:	f0 e0       	ldi	r31, 0x00	; 0
    5138:	80 81       	ld	r24, Z
    513a:	8f 7d       	andi	r24, 0xDF	; 223
    513c:	80 83       	st	Z, r24
    513e:	ff 91       	pop	r31
    5140:	ef 91       	pop	r30
    5142:	bf 91       	pop	r27
    5144:	af 91       	pop	r26
    5146:	9f 91       	pop	r25
    5148:	8f 91       	pop	r24
    514a:	2f 91       	pop	r18
    514c:	0f 90       	pop	r0
    514e:	0b be       	out	0x3b, r0	; 59
    5150:	0f 90       	pop	r0
    5152:	0f be       	out	0x3f, r0	; 63
    5154:	0f 90       	pop	r0
    5156:	1f 90       	pop	r1
    5158:	18 95       	reti

0000515a <__vector_51>:
    515a:	1f 92       	push	r1
    515c:	0f 92       	push	r0
    515e:	0f b6       	in	r0, 0x3f	; 63
    5160:	0f 92       	push	r0
    5162:	11 24       	eor	r1, r1
    5164:	0b b6       	in	r0, 0x3b	; 59
    5166:	0f 92       	push	r0
    5168:	2f 93       	push	r18
    516a:	3f 93       	push	r19
    516c:	4f 93       	push	r20
    516e:	5f 93       	push	r21
    5170:	6f 93       	push	r22
    5172:	7f 93       	push	r23
    5174:	8f 93       	push	r24
    5176:	9f 93       	push	r25
    5178:	af 93       	push	r26
    517a:	bf 93       	push	r27
    517c:	cf 93       	push	r28
    517e:	df 93       	push	r29
    5180:	ef 93       	push	r30
    5182:	ff 93       	push	r31
    5184:	a0 91 12 1b 	lds	r26, 0x1B12	; 0x801b12 <_ser_handle+0x4>
    5188:	b0 91 13 1b 	lds	r27, 0x1B13	; 0x801b13 <_ser_handle+0x5>
    518c:	10 97       	sbiw	r26, 0x00	; 0
    518e:	11 f1       	breq	.+68     	; 0x51d4 <__vector_51+0x7a>
    5190:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    5194:	14 96       	adiw	r26, 0x04	; 4
    5196:	ed 91       	ld	r30, X+
    5198:	fc 91       	ld	r31, X
    519a:	15 97       	sbiw	r26, 0x05	; 5
    519c:	93 81       	ldd	r25, Z+3	; 0x03
    519e:	82 81       	ldd	r24, Z+2	; 0x02
    51a0:	25 81       	ldd	r18, Z+5	; 0x05
    51a2:	98 1b       	sub	r25, r24
    51a4:	92 23       	and	r25, r18
    51a6:	84 81       	ldd	r24, Z+4	; 0x04
    51a8:	98 17       	cp	r25, r24
    51aa:	61 f0       	breq	.+24     	; 0x51c4 <__vector_51+0x6a>
    51ac:	83 81       	ldd	r24, Z+3	; 0x03
    51ae:	26 95       	lsr	r18
    51b0:	28 23       	and	r18, r24
    51b2:	c0 81       	ld	r28, Z
    51b4:	d1 81       	ldd	r29, Z+1	; 0x01
    51b6:	c2 0f       	add	r28, r18
    51b8:	d1 1d       	adc	r29, r1
    51ba:	68 83       	st	Y, r22
    51bc:	8f 5f       	subi	r24, 0xFF	; 255
    51be:	95 81       	ldd	r25, Z+5	; 0x05
    51c0:	89 23       	and	r24, r25
    51c2:	83 83       	std	Z+3, r24	; 0x03
    51c4:	16 96       	adiw	r26, 0x06	; 6
    51c6:	ed 91       	ld	r30, X+
    51c8:	fc 91       	ld	r31, X
    51ca:	17 97       	sbiw	r26, 0x07	; 7
    51cc:	30 97       	sbiw	r30, 0x00	; 0
    51ce:	11 f0       	breq	.+4      	; 0x51d4 <__vector_51+0x7a>
    51d0:	cd 01       	movw	r24, r26
    51d2:	19 95       	eicall
    51d4:	ff 91       	pop	r31
    51d6:	ef 91       	pop	r30
    51d8:	df 91       	pop	r29
    51da:	cf 91       	pop	r28
    51dc:	bf 91       	pop	r27
    51de:	af 91       	pop	r26
    51e0:	9f 91       	pop	r25
    51e2:	8f 91       	pop	r24
    51e4:	7f 91       	pop	r23
    51e6:	6f 91       	pop	r22
    51e8:	5f 91       	pop	r21
    51ea:	4f 91       	pop	r20
    51ec:	3f 91       	pop	r19
    51ee:	2f 91       	pop	r18
    51f0:	0f 90       	pop	r0
    51f2:	0b be       	out	0x3b, r0	; 59
    51f4:	0f 90       	pop	r0
    51f6:	0f be       	out	0x3f, r0	; 63
    51f8:	0f 90       	pop	r0
    51fa:	1f 90       	pop	r1
    51fc:	18 95       	reti

000051fe <__vector_52>:
    51fe:	1f 92       	push	r1
    5200:	0f 92       	push	r0
    5202:	0f b6       	in	r0, 0x3f	; 63
    5204:	0f 92       	push	r0
    5206:	11 24       	eor	r1, r1
    5208:	0b b6       	in	r0, 0x3b	; 59
    520a:	0f 92       	push	r0
    520c:	2f 93       	push	r18
    520e:	8f 93       	push	r24
    5210:	9f 93       	push	r25
    5212:	af 93       	push	r26
    5214:	bf 93       	push	r27
    5216:	ef 93       	push	r30
    5218:	ff 93       	push	r31
    521a:	e0 91 12 1b 	lds	r30, 0x1B12	; 0x801b12 <_ser_handle+0x4>
    521e:	f0 91 13 1b 	lds	r31, 0x1B13	; 0x801b13 <_ser_handle+0x5>
    5222:	30 97       	sbiw	r30, 0x00	; 0
    5224:	b9 f0       	breq	.+46     	; 0x5254 <__vector_52+0x56>
    5226:	02 80       	ldd	r0, Z+2	; 0x02
    5228:	f3 81       	ldd	r31, Z+3	; 0x03
    522a:	e0 2d       	mov	r30, r0
    522c:	93 81       	ldd	r25, Z+3	; 0x03
    522e:	82 81       	ldd	r24, Z+2	; 0x02
    5230:	98 17       	cp	r25, r24
    5232:	b1 f0       	breq	.+44     	; 0x5260 <__vector_52+0x62>
    5234:	92 81       	ldd	r25, Z+2	; 0x02
    5236:	85 81       	ldd	r24, Z+5	; 0x05
    5238:	28 2f       	mov	r18, r24
    523a:	26 95       	lsr	r18
    523c:	29 23       	and	r18, r25
    523e:	a0 81       	ld	r26, Z
    5240:	b1 81       	ldd	r27, Z+1	; 0x01
    5242:	a2 0f       	add	r26, r18
    5244:	b1 1d       	adc	r27, r1
    5246:	2c 91       	ld	r18, X
    5248:	9f 5f       	subi	r25, 0xFF	; 255
    524a:	89 23       	and	r24, r25
    524c:	82 83       	std	Z+2, r24	; 0x02
    524e:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    5252:	0b c0       	rjmp	.+22     	; 0x526a <__vector_52+0x6c>
    5254:	e1 ed       	ldi	r30, 0xD1	; 209
    5256:	f0 e0       	ldi	r31, 0x00	; 0
    5258:	80 81       	ld	r24, Z
    525a:	8f 7d       	andi	r24, 0xDF	; 223
    525c:	80 83       	st	Z, r24
    525e:	05 c0       	rjmp	.+10     	; 0x526a <__vector_52+0x6c>
    5260:	e1 ed       	ldi	r30, 0xD1	; 209
    5262:	f0 e0       	ldi	r31, 0x00	; 0
    5264:	80 81       	ld	r24, Z
    5266:	8f 7d       	andi	r24, 0xDF	; 223
    5268:	80 83       	st	Z, r24
    526a:	ff 91       	pop	r31
    526c:	ef 91       	pop	r30
    526e:	bf 91       	pop	r27
    5270:	af 91       	pop	r26
    5272:	9f 91       	pop	r25
    5274:	8f 91       	pop	r24
    5276:	2f 91       	pop	r18
    5278:	0f 90       	pop	r0
    527a:	0b be       	out	0x3b, r0	; 59
    527c:	0f 90       	pop	r0
    527e:	0f be       	out	0x3f, r0	; 63
    5280:	0f 90       	pop	r0
    5282:	1f 90       	pop	r1
    5284:	18 95       	reti

00005286 <__vector_54>:
    5286:	1f 92       	push	r1
    5288:	0f 92       	push	r0
    528a:	0f b6       	in	r0, 0x3f	; 63
    528c:	0f 92       	push	r0
    528e:	11 24       	eor	r1, r1
    5290:	0b b6       	in	r0, 0x3b	; 59
    5292:	0f 92       	push	r0
    5294:	2f 93       	push	r18
    5296:	3f 93       	push	r19
    5298:	4f 93       	push	r20
    529a:	5f 93       	push	r21
    529c:	6f 93       	push	r22
    529e:	7f 93       	push	r23
    52a0:	8f 93       	push	r24
    52a2:	9f 93       	push	r25
    52a4:	af 93       	push	r26
    52a6:	bf 93       	push	r27
    52a8:	cf 93       	push	r28
    52aa:	df 93       	push	r29
    52ac:	ef 93       	push	r30
    52ae:	ff 93       	push	r31
    52b0:	a0 91 14 1b 	lds	r26, 0x1B14	; 0x801b14 <_ser_handle+0x6>
    52b4:	b0 91 15 1b 	lds	r27, 0x1B15	; 0x801b15 <_ser_handle+0x7>
    52b8:	10 97       	sbiw	r26, 0x00	; 0
    52ba:	11 f1       	breq	.+68     	; 0x5300 <__vector_54+0x7a>
    52bc:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    52c0:	14 96       	adiw	r26, 0x04	; 4
    52c2:	ed 91       	ld	r30, X+
    52c4:	fc 91       	ld	r31, X
    52c6:	15 97       	sbiw	r26, 0x05	; 5
    52c8:	93 81       	ldd	r25, Z+3	; 0x03
    52ca:	82 81       	ldd	r24, Z+2	; 0x02
    52cc:	25 81       	ldd	r18, Z+5	; 0x05
    52ce:	98 1b       	sub	r25, r24
    52d0:	92 23       	and	r25, r18
    52d2:	84 81       	ldd	r24, Z+4	; 0x04
    52d4:	98 17       	cp	r25, r24
    52d6:	61 f0       	breq	.+24     	; 0x52f0 <__vector_54+0x6a>
    52d8:	83 81       	ldd	r24, Z+3	; 0x03
    52da:	26 95       	lsr	r18
    52dc:	28 23       	and	r18, r24
    52de:	c0 81       	ld	r28, Z
    52e0:	d1 81       	ldd	r29, Z+1	; 0x01
    52e2:	c2 0f       	add	r28, r18
    52e4:	d1 1d       	adc	r29, r1
    52e6:	68 83       	st	Y, r22
    52e8:	8f 5f       	subi	r24, 0xFF	; 255
    52ea:	95 81       	ldd	r25, Z+5	; 0x05
    52ec:	89 23       	and	r24, r25
    52ee:	83 83       	std	Z+3, r24	; 0x03
    52f0:	16 96       	adiw	r26, 0x06	; 6
    52f2:	ed 91       	ld	r30, X+
    52f4:	fc 91       	ld	r31, X
    52f6:	17 97       	sbiw	r26, 0x07	; 7
    52f8:	30 97       	sbiw	r30, 0x00	; 0
    52fa:	11 f0       	breq	.+4      	; 0x5300 <__vector_54+0x7a>
    52fc:	cd 01       	movw	r24, r26
    52fe:	19 95       	eicall
    5300:	ff 91       	pop	r31
    5302:	ef 91       	pop	r30
    5304:	df 91       	pop	r29
    5306:	cf 91       	pop	r28
    5308:	bf 91       	pop	r27
    530a:	af 91       	pop	r26
    530c:	9f 91       	pop	r25
    530e:	8f 91       	pop	r24
    5310:	7f 91       	pop	r23
    5312:	6f 91       	pop	r22
    5314:	5f 91       	pop	r21
    5316:	4f 91       	pop	r20
    5318:	3f 91       	pop	r19
    531a:	2f 91       	pop	r18
    531c:	0f 90       	pop	r0
    531e:	0b be       	out	0x3b, r0	; 59
    5320:	0f 90       	pop	r0
    5322:	0f be       	out	0x3f, r0	; 63
    5324:	0f 90       	pop	r0
    5326:	1f 90       	pop	r1
    5328:	18 95       	reti

0000532a <__vector_55>:
    532a:	1f 92       	push	r1
    532c:	0f 92       	push	r0
    532e:	0f b6       	in	r0, 0x3f	; 63
    5330:	0f 92       	push	r0
    5332:	11 24       	eor	r1, r1
    5334:	0b b6       	in	r0, 0x3b	; 59
    5336:	0f 92       	push	r0
    5338:	2f 93       	push	r18
    533a:	8f 93       	push	r24
    533c:	9f 93       	push	r25
    533e:	af 93       	push	r26
    5340:	bf 93       	push	r27
    5342:	ef 93       	push	r30
    5344:	ff 93       	push	r31
    5346:	e0 91 14 1b 	lds	r30, 0x1B14	; 0x801b14 <_ser_handle+0x6>
    534a:	f0 91 15 1b 	lds	r31, 0x1B15	; 0x801b15 <_ser_handle+0x7>
    534e:	30 97       	sbiw	r30, 0x00	; 0
    5350:	b9 f0       	breq	.+46     	; 0x5380 <__vector_55+0x56>
    5352:	02 80       	ldd	r0, Z+2	; 0x02
    5354:	f3 81       	ldd	r31, Z+3	; 0x03
    5356:	e0 2d       	mov	r30, r0
    5358:	93 81       	ldd	r25, Z+3	; 0x03
    535a:	82 81       	ldd	r24, Z+2	; 0x02
    535c:	98 17       	cp	r25, r24
    535e:	b1 f0       	breq	.+44     	; 0x538c <__vector_55+0x62>
    5360:	92 81       	ldd	r25, Z+2	; 0x02
    5362:	85 81       	ldd	r24, Z+5	; 0x05
    5364:	28 2f       	mov	r18, r24
    5366:	26 95       	lsr	r18
    5368:	29 23       	and	r18, r25
    536a:	a0 81       	ld	r26, Z
    536c:	b1 81       	ldd	r27, Z+1	; 0x01
    536e:	a2 0f       	add	r26, r18
    5370:	b1 1d       	adc	r27, r1
    5372:	2c 91       	ld	r18, X
    5374:	9f 5f       	subi	r25, 0xFF	; 255
    5376:	89 23       	and	r24, r25
    5378:	82 83       	std	Z+2, r24	; 0x02
    537a:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    537e:	0b c0       	rjmp	.+22     	; 0x5396 <__vector_55+0x6c>
    5380:	e1 e3       	ldi	r30, 0x31	; 49
    5382:	f1 e0       	ldi	r31, 0x01	; 1
    5384:	80 81       	ld	r24, Z
    5386:	8f 7d       	andi	r24, 0xDF	; 223
    5388:	80 83       	st	Z, r24
    538a:	05 c0       	rjmp	.+10     	; 0x5396 <__vector_55+0x6c>
    538c:	e1 e3       	ldi	r30, 0x31	; 49
    538e:	f1 e0       	ldi	r31, 0x01	; 1
    5390:	80 81       	ld	r24, Z
    5392:	8f 7d       	andi	r24, 0xDF	; 223
    5394:	80 83       	st	Z, r24
    5396:	ff 91       	pop	r31
    5398:	ef 91       	pop	r30
    539a:	bf 91       	pop	r27
    539c:	af 91       	pop	r26
    539e:	9f 91       	pop	r25
    53a0:	8f 91       	pop	r24
    53a2:	2f 91       	pop	r18
    53a4:	0f 90       	pop	r0
    53a6:	0b be       	out	0x3b, r0	; 59
    53a8:	0f 90       	pop	r0
    53aa:	0f be       	out	0x3f, r0	; 63
    53ac:	0f 90       	pop	r0
    53ae:	1f 90       	pop	r1
    53b0:	18 95       	reti

000053b2 <usart_getchar>:
    53b2:	cf 93       	push	r28
    53b4:	df 93       	push	r29
    53b6:	1f 92       	push	r1
    53b8:	cd b7       	in	r28, 0x3d	; 61
    53ba:	de b7       	in	r29, 0x3e	; 62
    53bc:	be 01       	movw	r22, r28
    53be:	6f 5f       	subi	r22, 0xFF	; 255
    53c0:	7f 4f       	sbci	r23, 0xFF	; 255
    53c2:	80 91 16 1b 	lds	r24, 0x1B16	; 0x801b16 <_com_serial_instance>
    53c6:	90 91 17 1b 	lds	r25, 0x1B17	; 0x801b17 <_com_serial_instance+0x1>
    53ca:	7f dd       	rcall	.-1282   	; 0x4eca <serial_get_byte>
    53cc:	81 11       	cpse	r24, r1
    53ce:	f6 cf       	rjmp	.-20     	; 0x53bc <usart_getchar+0xa>
    53d0:	89 81       	ldd	r24, Y+1	; 0x01
    53d2:	90 e0       	ldi	r25, 0x00	; 0
    53d4:	0f 90       	pop	r0
    53d6:	df 91       	pop	r29
    53d8:	cf 91       	pop	r28
    53da:	08 95       	ret

000053dc <usart_putchar>:
    53dc:	68 2f       	mov	r22, r24
    53de:	80 91 16 1b 	lds	r24, 0x1B16	; 0x801b16 <_com_serial_instance>
    53e2:	90 91 17 1b 	lds	r25, 0x1B17	; 0x801b17 <_com_serial_instance+0x1>
    53e6:	fc dc       	rcall	.-1544   	; 0x4de0 <serial_send_byte>
    53e8:	80 e0       	ldi	r24, 0x00	; 0
    53ea:	90 e0       	ldi	r25, 0x00	; 0
    53ec:	08 95       	ret

000053ee <stdioCreate>:
    53ee:	8f 92       	push	r8
    53f0:	9f 92       	push	r9
    53f2:	af 92       	push	r10
    53f4:	cf 92       	push	r12
    53f6:	ef 92       	push	r14
    53f8:	0f 93       	push	r16
    53fa:	81 2c       	mov	r8, r1
    53fc:	91 2c       	mov	r9, r1
    53fe:	68 94       	set
    5400:	aa 24       	eor	r10, r10
    5402:	a7 f8       	bld	r10, 7
    5404:	68 94       	set
    5406:	cc 24       	eor	r12, r12
    5408:	c7 f8       	bld	r12, 7
    540a:	e1 2c       	mov	r14, r1
    540c:	00 e0       	ldi	r16, 0x00	; 0
    540e:	23 e0       	ldi	r18, 0x03	; 3
    5410:	40 e0       	ldi	r20, 0x00	; 0
    5412:	51 ee       	ldi	r21, 0xE1	; 225
    5414:	60 e0       	ldi	r22, 0x00	; 0
    5416:	70 e0       	ldi	r23, 0x00	; 0
    5418:	4d dc       	rcall	.-1894   	; 0x4cb4 <serial_new_instance>
    541a:	90 93 17 1b 	sts	0x1B17, r25	; 0x801b17 <_com_serial_instance+0x1>
    541e:	80 93 16 1b 	sts	0x1B16, r24	; 0x801b16 <_com_serial_instance>
    5422:	e1 e6       	ldi	r30, 0x61	; 97
    5424:	fb e1       	ldi	r31, 0x1B	; 27
    5426:	82 e1       	ldi	r24, 0x12	; 18
    5428:	92 e0       	ldi	r25, 0x02	; 2
    542a:	91 83       	std	Z+1, r25	; 0x01
    542c:	80 83       	st	Z, r24
    542e:	93 83       	std	Z+3, r25	; 0x03
    5430:	82 83       	std	Z+2, r24	; 0x02
    5432:	0f 91       	pop	r16
    5434:	ef 90       	pop	r14
    5436:	cf 90       	pop	r12
    5438:	af 90       	pop	r10
    543a:	9f 90       	pop	r9
    543c:	8f 90       	pop	r8
    543e:	08 95       	ret

00005440 <_initTwiInterface>:
    5440:	80 91 26 1b 	lds	r24, 0x1B26	; 0x801b26 <_twiIsInitiated>
    5444:	81 11       	cpse	r24, r1
    5446:	0c c0       	rjmp	.+24     	; 0x5460 <_initTwiInterface+0x20>
    5448:	8c e0       	ldi	r24, 0x0C	; 12
    544a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    544e:	8f ef       	ldi	r24, 0xFF	; 255
    5450:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    5454:	84 e0       	ldi	r24, 0x04	; 4
    5456:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    545a:	81 e0       	ldi	r24, 0x01	; 1
    545c:	80 93 26 1b 	sts	0x1B26, r24	; 0x801b26 <_twiIsInitiated>
    5460:	08 95       	ret

00005462 <twiCreate>:
    5462:	af 92       	push	r10
    5464:	bf 92       	push	r11
    5466:	cf 92       	push	r12
    5468:	df 92       	push	r13
    546a:	ef 92       	push	r14
    546c:	ff 92       	push	r15
    546e:	0f 93       	push	r16
    5470:	1f 93       	push	r17
    5472:	cf 93       	push	r28
    5474:	df 93       	push	r29
    5476:	a8 2e       	mov	r10, r24
    5478:	b6 2e       	mov	r11, r22
    547a:	69 01       	movw	r12, r18
    547c:	7a 01       	movw	r14, r20
    547e:	84 e0       	ldi	r24, 0x04	; 4
    5480:	90 e0       	ldi	r25, 0x00	; 0
    5482:	cb d3       	rcall	.+1942   	; 0x5c1a <malloc>
    5484:	ec 01       	movw	r28, r24
    5486:	89 2b       	or	r24, r25
    5488:	61 f1       	breq	.+88     	; 0x54e2 <twiCreate+0x80>
    548a:	a8 82       	st	Y, r10
    548c:	81 e0       	ldi	r24, 0x01	; 1
    548e:	b8 12       	cpse	r11, r24
    5490:	12 c0       	rjmp	.+36     	; 0x54b6 <twiCreate+0x54>
    5492:	c7 01       	movw	r24, r14
    5494:	b6 01       	movw	r22, r12
    5496:	20 ea       	ldi	r18, 0xA0	; 160
    5498:	36 e8       	ldi	r19, 0x86	; 134
    549a:	41 e0       	ldi	r20, 0x01	; 1
    549c:	50 e0       	ldi	r21, 0x00	; 0
    549e:	79 d3       	rcall	.+1778   	; 0x5b92 <__udivmodsi4>
    54a0:	da 01       	movw	r26, r20
    54a2:	c9 01       	movw	r24, r18
    54a4:	40 97       	sbiw	r24, 0x10	; 16
    54a6:	a1 09       	sbc	r26, r1
    54a8:	b1 09       	sbc	r27, r1
    54aa:	b6 95       	lsr	r27
    54ac:	a7 95       	ror	r26
    54ae:	97 95       	ror	r25
    54b0:	87 95       	ror	r24
    54b2:	89 83       	std	Y+1, r24	; 0x01
    54b4:	11 c0       	rjmp	.+34     	; 0x54d8 <twiCreate+0x76>
    54b6:	c7 01       	movw	r24, r14
    54b8:	b6 01       	movw	r22, r12
    54ba:	20 e8       	ldi	r18, 0x80	; 128
    54bc:	3a e1       	ldi	r19, 0x1A	; 26
    54be:	46 e0       	ldi	r20, 0x06	; 6
    54c0:	50 e0       	ldi	r21, 0x00	; 0
    54c2:	67 d3       	rcall	.+1742   	; 0x5b92 <__udivmodsi4>
    54c4:	da 01       	movw	r26, r20
    54c6:	c9 01       	movw	r24, r18
    54c8:	40 97       	sbiw	r24, 0x10	; 16
    54ca:	a1 09       	sbc	r26, r1
    54cc:	b1 09       	sbc	r27, r1
    54ce:	b6 95       	lsr	r27
    54d0:	a7 95       	ror	r26
    54d2:	97 95       	ror	r25
    54d4:	87 95       	ror	r24
    54d6:	89 83       	std	Y+1, r24	; 0x01
    54d8:	1b 83       	std	Y+3, r17	; 0x03
    54da:	0a 83       	std	Y+2, r16	; 0x02
    54dc:	8c 2f       	mov	r24, r28
    54de:	9d 2f       	mov	r25, r29
    54e0:	02 c0       	rjmp	.+4      	; 0x54e6 <twiCreate+0x84>
    54e2:	80 e0       	ldi	r24, 0x00	; 0
    54e4:	90 e0       	ldi	r25, 0x00	; 0
    54e6:	df 91       	pop	r29
    54e8:	cf 91       	pop	r28
    54ea:	1f 91       	pop	r17
    54ec:	0f 91       	pop	r16
    54ee:	ff 90       	pop	r15
    54f0:	ef 90       	pop	r14
    54f2:	df 90       	pop	r13
    54f4:	cf 90       	pop	r12
    54f6:	bf 90       	pop	r11
    54f8:	af 90       	pop	r10
    54fa:	08 95       	ret

000054fc <twiIsBusy>:
    54fc:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    5500:	81 70       	andi	r24, 0x01	; 1
    5502:	08 95       	ret

00005504 <twiTransmit>:
    5504:	ff 92       	push	r15
    5506:	0f 93       	push	r16
    5508:	1f 93       	push	r17
    550a:	cf 93       	push	r28
    550c:	df 93       	push	r29
    550e:	00 97       	sbiw	r24, 0x00	; 0
    5510:	d1 f1       	breq	.+116    	; 0x5586 <twiTransmit+0x82>
    5512:	4a 30       	cpi	r20, 0x0A	; 10
    5514:	d0 f5       	brcc	.+116    	; 0x558a <twiTransmit+0x86>
    5516:	f4 2e       	mov	r15, r20
    5518:	8b 01       	movw	r16, r22
    551a:	ec 01       	movw	r28, r24
    551c:	ef df       	rcall	.-34     	; 0x54fc <twiIsBusy>
    551e:	81 11       	cpse	r24, r1
    5520:	36 c0       	rjmp	.+108    	; 0x558e <twiTransmit+0x8a>
    5522:	80 91 19 1b 	lds	r24, 0x1B19	; 0x801b19 <_twiCurrentHandler>
    5526:	90 91 1a 1b 	lds	r25, 0x1B1A	; 0x801b1a <_twiCurrentHandler+0x1>
    552a:	c8 17       	cp	r28, r24
    552c:	d9 07       	cpc	r29, r25
    552e:	41 f0       	breq	.+16     	; 0x5540 <twiTransmit+0x3c>
    5530:	87 df       	rcall	.-242    	; 0x5440 <_initTwiInterface>
    5532:	89 81       	ldd	r24, Y+1	; 0x01
    5534:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    5538:	d0 93 1a 1b 	sts	0x1B1A, r29	; 0x801b1a <_twiCurrentHandler+0x1>
    553c:	c0 93 19 1b 	sts	0x1B19, r28	; 0x801b19 <_twiCurrentHandler>
    5540:	81 e0       	ldi	r24, 0x01	; 1
    5542:	8f 0d       	add	r24, r15
    5544:	80 93 1b 1b 	sts	0x1B1B, r24	; 0x801b1b <_twiMessageLen>
    5548:	88 81       	ld	r24, Y
    554a:	88 0f       	add	r24, r24
    554c:	80 93 1c 1b 	sts	0x1B1C, r24	; 0x801b1c <_twiMessageBuffer>
    5550:	ff 20       	and	r15, r15
    5552:	89 f0       	breq	.+34     	; 0x5576 <twiTransmit+0x72>
    5554:	f8 01       	movw	r30, r16
    5556:	ad e1       	ldi	r26, 0x1D	; 29
    5558:	bb e1       	ldi	r27, 0x1B	; 27
    555a:	4f ef       	ldi	r20, 0xFF	; 255
    555c:	4f 0d       	add	r20, r15
    555e:	64 2f       	mov	r22, r20
    5560:	70 e0       	ldi	r23, 0x00	; 0
    5562:	cb 01       	movw	r24, r22
    5564:	01 96       	adiw	r24, 0x01	; 1
    5566:	b8 01       	movw	r22, r16
    5568:	68 0f       	add	r22, r24
    556a:	79 1f       	adc	r23, r25
    556c:	81 91       	ld	r24, Z+
    556e:	8d 93       	st	X+, r24
    5570:	e6 17       	cp	r30, r22
    5572:	f7 07       	cpc	r31, r23
    5574:	d9 f7       	brne	.-10     	; 0x556c <twiTransmit+0x68>
    5576:	88 ef       	ldi	r24, 0xF8	; 248
    5578:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <_twiCurrentState>
    557c:	85 ea       	ldi	r24, 0xA5	; 165
    557e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    5582:	84 e0       	ldi	r24, 0x04	; 4
    5584:	05 c0       	rjmp	.+10     	; 0x5590 <twiTransmit+0x8c>
    5586:	86 e0       	ldi	r24, 0x06	; 6
    5588:	03 c0       	rjmp	.+6      	; 0x5590 <twiTransmit+0x8c>
    558a:	87 e0       	ldi	r24, 0x07	; 7
    558c:	01 c0       	rjmp	.+2      	; 0x5590 <twiTransmit+0x8c>
    558e:	82 e0       	ldi	r24, 0x02	; 2
    5590:	df 91       	pop	r29
    5592:	cf 91       	pop	r28
    5594:	1f 91       	pop	r17
    5596:	0f 91       	pop	r16
    5598:	ff 90       	pop	r15
    559a:	08 95       	ret

0000559c <twiReceive>:
    559c:	1f 93       	push	r17
    559e:	cf 93       	push	r28
    55a0:	df 93       	push	r29
    55a2:	00 97       	sbiw	r24, 0x00	; 0
    55a4:	29 f1       	breq	.+74     	; 0x55f0 <twiReceive+0x54>
    55a6:	6b 30       	cpi	r22, 0x0B	; 11
    55a8:	28 f5       	brcc	.+74     	; 0x55f4 <twiReceive+0x58>
    55aa:	16 2f       	mov	r17, r22
    55ac:	ec 01       	movw	r28, r24
    55ae:	a6 df       	rcall	.-180    	; 0x54fc <twiIsBusy>
    55b0:	81 11       	cpse	r24, r1
    55b2:	22 c0       	rjmp	.+68     	; 0x55f8 <twiReceive+0x5c>
    55b4:	80 91 19 1b 	lds	r24, 0x1B19	; 0x801b19 <_twiCurrentHandler>
    55b8:	90 91 1a 1b 	lds	r25, 0x1B1A	; 0x801b1a <_twiCurrentHandler+0x1>
    55bc:	c8 17       	cp	r28, r24
    55be:	d9 07       	cpc	r29, r25
    55c0:	41 f0       	breq	.+16     	; 0x55d2 <twiReceive+0x36>
    55c2:	3e df       	rcall	.-388    	; 0x5440 <_initTwiInterface>
    55c4:	89 81       	ldd	r24, Y+1	; 0x01
    55c6:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    55ca:	d0 93 1a 1b 	sts	0x1B1A, r29	; 0x801b1a <_twiCurrentHandler+0x1>
    55ce:	c0 93 19 1b 	sts	0x1B19, r28	; 0x801b19 <_twiCurrentHandler>
    55d2:	10 93 1b 1b 	sts	0x1B1B, r17	; 0x801b1b <_twiMessageLen>
    55d6:	88 81       	ld	r24, Y
    55d8:	88 0f       	add	r24, r24
    55da:	81 60       	ori	r24, 0x01	; 1
    55dc:	80 93 1c 1b 	sts	0x1B1C, r24	; 0x801b1c <_twiMessageBuffer>
    55e0:	88 ef       	ldi	r24, 0xF8	; 248
    55e2:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <_twiCurrentState>
    55e6:	85 ea       	ldi	r24, 0xA5	; 165
    55e8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    55ec:	85 e0       	ldi	r24, 0x05	; 5
    55ee:	05 c0       	rjmp	.+10     	; 0x55fa <twiReceive+0x5e>
    55f0:	86 e0       	ldi	r24, 0x06	; 6
    55f2:	03 c0       	rjmp	.+6      	; 0x55fa <twiReceive+0x5e>
    55f4:	87 e0       	ldi	r24, 0x07	; 7
    55f6:	01 c0       	rjmp	.+2      	; 0x55fa <twiReceive+0x5e>
    55f8:	82 e0       	ldi	r24, 0x02	; 2
    55fa:	df 91       	pop	r29
    55fc:	cf 91       	pop	r28
    55fe:	1f 91       	pop	r17
    5600:	08 95       	ret

00005602 <__vector_39>:
    5602:	1f 92       	push	r1
    5604:	0f 92       	push	r0
    5606:	0f b6       	in	r0, 0x3f	; 63
    5608:	0f 92       	push	r0
    560a:	11 24       	eor	r1, r1
    560c:	0b b6       	in	r0, 0x3b	; 59
    560e:	0f 92       	push	r0
    5610:	2f 93       	push	r18
    5612:	3f 93       	push	r19
    5614:	4f 93       	push	r20
    5616:	5f 93       	push	r21
    5618:	6f 93       	push	r22
    561a:	7f 93       	push	r23
    561c:	8f 93       	push	r24
    561e:	9f 93       	push	r25
    5620:	af 93       	push	r26
    5622:	bf 93       	push	r27
    5624:	ef 93       	push	r30
    5626:	ff 93       	push	r31
    5628:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    562c:	8e 2f       	mov	r24, r30
    562e:	90 e0       	ldi	r25, 0x00	; 0
    5630:	fc 01       	movw	r30, r24
    5632:	38 97       	sbiw	r30, 0x08	; 8
    5634:	e1 35       	cpi	r30, 0x51	; 81
    5636:	f1 05       	cpc	r31, r1
    5638:	08 f0       	brcs	.+2      	; 0x563c <__vector_39+0x3a>
    563a:	75 c0       	rjmp	.+234    	; 0x5726 <__vector_39+0x124>
    563c:	88 27       	eor	r24, r24
    563e:	e4 58       	subi	r30, 0x84	; 132
    5640:	ff 4f       	sbci	r31, 0xFF	; 255
    5642:	8f 4f       	sbci	r24, 0xFF	; 255
    5644:	c8 c2       	rjmp	.+1424   	; 0x5bd6 <__tablejump2__>
    5646:	10 92 18 1b 	sts	0x1B18, r1	; 0x801b18 <_index.1885>
    564a:	e0 91 18 1b 	lds	r30, 0x1B18	; 0x801b18 <_index.1885>
    564e:	80 91 1b 1b 	lds	r24, 0x1B1B	; 0x801b1b <_twiMessageLen>
    5652:	e8 17       	cp	r30, r24
    5654:	70 f4       	brcc	.+28     	; 0x5672 <__vector_39+0x70>
    5656:	81 e0       	ldi	r24, 0x01	; 1
    5658:	8e 0f       	add	r24, r30
    565a:	80 93 18 1b 	sts	0x1B18, r24	; 0x801b18 <_index.1885>
    565e:	f0 e0       	ldi	r31, 0x00	; 0
    5660:	e4 5e       	subi	r30, 0xE4	; 228
    5662:	f4 4e       	sbci	r31, 0xE4	; 228
    5664:	80 81       	ld	r24, Z
    5666:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    566a:	85 e8       	ldi	r24, 0x85	; 133
    566c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    5670:	72 c0       	rjmp	.+228    	; 0x5756 <__vector_39+0x154>
    5672:	84 e9       	ldi	r24, 0x94	; 148
    5674:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    5678:	80 91 19 1b 	lds	r24, 0x1B19	; 0x801b19 <_twiCurrentHandler>
    567c:	90 91 1a 1b 	lds	r25, 0x1B1A	; 0x801b1a <_twiCurrentHandler+0x1>
    5680:	dc 01       	movw	r26, r24
    5682:	12 96       	adiw	r26, 0x02	; 2
    5684:	ed 91       	ld	r30, X+
    5686:	fc 91       	ld	r31, X
    5688:	13 97       	sbiw	r26, 0x03	; 3
    568a:	30 97       	sbiw	r30, 0x00	; 0
    568c:	09 f4       	brne	.+2      	; 0x5690 <__vector_39+0x8e>
    568e:	63 c0       	rjmp	.+198    	; 0x5756 <__vector_39+0x154>
    5690:	20 e0       	ldi	r18, 0x00	; 0
    5692:	40 e0       	ldi	r20, 0x00	; 0
    5694:	50 e0       	ldi	r21, 0x00	; 0
    5696:	64 e0       	ldi	r22, 0x04	; 4
    5698:	19 95       	eicall
    569a:	5d c0       	rjmp	.+186    	; 0x5756 <__vector_39+0x154>
    569c:	e0 91 18 1b 	lds	r30, 0x1B18	; 0x801b18 <_index.1885>
    56a0:	81 e0       	ldi	r24, 0x01	; 1
    56a2:	8e 0f       	add	r24, r30
    56a4:	80 93 18 1b 	sts	0x1B18, r24	; 0x801b18 <_index.1885>
    56a8:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    56ac:	f0 e0       	ldi	r31, 0x00	; 0
    56ae:	e4 5e       	subi	r30, 0xE4	; 228
    56b0:	f4 4e       	sbci	r31, 0xE4	; 228
    56b2:	80 83       	st	Z, r24
    56b4:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    56b8:	80 34       	cpi	r24, 0x40	; 64
    56ba:	11 f4       	brne	.+4      	; 0x56c0 <__vector_39+0xbe>
    56bc:	10 92 18 1b 	sts	0x1B18, r1	; 0x801b18 <_index.1885>
    56c0:	20 91 18 1b 	lds	r18, 0x1B18	; 0x801b18 <_index.1885>
    56c4:	30 e0       	ldi	r19, 0x00	; 0
    56c6:	80 91 1b 1b 	lds	r24, 0x1B1B	; 0x801b1b <_twiMessageLen>
    56ca:	90 e0       	ldi	r25, 0x00	; 0
    56cc:	01 97       	sbiw	r24, 0x01	; 1
    56ce:	28 17       	cp	r18, r24
    56d0:	39 07       	cpc	r19, r25
    56d2:	24 f4       	brge	.+8      	; 0x56dc <__vector_39+0xda>
    56d4:	85 ec       	ldi	r24, 0xC5	; 197
    56d6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    56da:	3d c0       	rjmp	.+122    	; 0x5756 <__vector_39+0x154>
    56dc:	85 e8       	ldi	r24, 0x85	; 133
    56de:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    56e2:	39 c0       	rjmp	.+114    	; 0x5756 <__vector_39+0x154>
    56e4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    56e8:	e0 91 18 1b 	lds	r30, 0x1B18	; 0x801b18 <_index.1885>
    56ec:	f0 e0       	ldi	r31, 0x00	; 0
    56ee:	e4 5e       	subi	r30, 0xE4	; 228
    56f0:	f4 4e       	sbci	r31, 0xE4	; 228
    56f2:	80 83       	st	Z, r24
    56f4:	84 e9       	ldi	r24, 0x94	; 148
    56f6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    56fa:	80 91 19 1b 	lds	r24, 0x1B19	; 0x801b19 <_twiCurrentHandler>
    56fe:	90 91 1a 1b 	lds	r25, 0x1B1A	; 0x801b1a <_twiCurrentHandler+0x1>
    5702:	dc 01       	movw	r26, r24
    5704:	12 96       	adiw	r26, 0x02	; 2
    5706:	ed 91       	ld	r30, X+
    5708:	fc 91       	ld	r31, X
    570a:	13 97       	sbiw	r26, 0x03	; 3
    570c:	30 97       	sbiw	r30, 0x00	; 0
    570e:	19 f1       	breq	.+70     	; 0x5756 <__vector_39+0x154>
    5710:	20 91 1b 1b 	lds	r18, 0x1B1B	; 0x801b1b <_twiMessageLen>
    5714:	4c e1       	ldi	r20, 0x1C	; 28
    5716:	5b e1       	ldi	r21, 0x1B	; 27
    5718:	65 e0       	ldi	r22, 0x05	; 5
    571a:	19 95       	eicall
    571c:	1c c0       	rjmp	.+56     	; 0x5756 <__vector_39+0x154>
    571e:	85 ea       	ldi	r24, 0xA5	; 165
    5720:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    5724:	18 c0       	rjmp	.+48     	; 0x5756 <__vector_39+0x154>
    5726:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    572a:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <_twiCurrentState>
    572e:	84 e0       	ldi	r24, 0x04	; 4
    5730:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    5734:	80 91 19 1b 	lds	r24, 0x1B19	; 0x801b19 <_twiCurrentHandler>
    5738:	90 91 1a 1b 	lds	r25, 0x1B1A	; 0x801b1a <_twiCurrentHandler+0x1>
    573c:	dc 01       	movw	r26, r24
    573e:	12 96       	adiw	r26, 0x02	; 2
    5740:	ed 91       	ld	r30, X+
    5742:	fc 91       	ld	r31, X
    5744:	13 97       	sbiw	r26, 0x03	; 3
    5746:	30 97       	sbiw	r30, 0x00	; 0
    5748:	31 f0       	breq	.+12     	; 0x5756 <__vector_39+0x154>
    574a:	20 e0       	ldi	r18, 0x00	; 0
    574c:	40 e0       	ldi	r20, 0x00	; 0
    574e:	50 e0       	ldi	r21, 0x00	; 0
    5750:	60 91 20 02 	lds	r22, 0x0220	; 0x800220 <_twiCurrentState>
    5754:	19 95       	eicall
    5756:	ff 91       	pop	r31
    5758:	ef 91       	pop	r30
    575a:	bf 91       	pop	r27
    575c:	af 91       	pop	r26
    575e:	9f 91       	pop	r25
    5760:	8f 91       	pop	r24
    5762:	7f 91       	pop	r23
    5764:	6f 91       	pop	r22
    5766:	5f 91       	pop	r21
    5768:	4f 91       	pop	r20
    576a:	3f 91       	pop	r19
    576c:	2f 91       	pop	r18
    576e:	0f 90       	pop	r0
    5770:	0b be       	out	0x3b, r0	; 59
    5772:	0f 90       	pop	r0
    5774:	0f be       	out	0x3f, r0	; 63
    5776:	0f 90       	pop	r0
    5778:	1f 90       	pop	r1
    577a:	18 95       	reti

0000577c <fifo_init>:
    577c:	fc 01       	movw	r30, r24
    577e:	41 11       	cpse	r20, r1
    5780:	01 c0       	rjmp	.+2      	; 0x5784 <fifo_init+0x8>
    5782:	6c d3       	rcall	.+1752   	; 0x5e5c <abort>
    5784:	84 2f       	mov	r24, r20
    5786:	90 e0       	ldi	r25, 0x00	; 0
    5788:	9c 01       	movw	r18, r24
    578a:	21 50       	subi	r18, 0x01	; 1
    578c:	31 09       	sbc	r19, r1
    578e:	82 23       	and	r24, r18
    5790:	93 23       	and	r25, r19
    5792:	89 2b       	or	r24, r25
    5794:	09 f0       	breq	.+2      	; 0x5798 <fifo_init+0x1c>
    5796:	62 d3       	rcall	.+1732   	; 0x5e5c <abort>
    5798:	41 38       	cpi	r20, 0x81	; 129
    579a:	08 f0       	brcs	.+2      	; 0x579e <fifo_init+0x22>
    579c:	5f d3       	rcall	.+1726   	; 0x5e5c <abort>
    579e:	12 82       	std	Z+2, r1	; 0x02
    57a0:	13 82       	std	Z+3, r1	; 0x03
    57a2:	44 83       	std	Z+4, r20	; 0x04
    57a4:	44 0f       	add	r20, r20
    57a6:	41 50       	subi	r20, 0x01	; 1
    57a8:	45 83       	std	Z+5, r20	; 0x05
    57aa:	71 83       	std	Z+1, r23	; 0x01
    57ac:	60 83       	st	Z, r22
    57ae:	80 e0       	ldi	r24, 0x00	; 0
    57b0:	90 e0       	ldi	r25, 0x00	; 0
    57b2:	08 95       	ret

000057b4 <__subsf3>:
    57b4:	50 58       	subi	r21, 0x80	; 128

000057b6 <__addsf3>:
    57b6:	bb 27       	eor	r27, r27
    57b8:	aa 27       	eor	r26, r26
    57ba:	0e d0       	rcall	.+28     	; 0x57d8 <__addsf3x>
    57bc:	4d c1       	rjmp	.+666    	; 0x5a58 <__fp_round>
    57be:	3e d1       	rcall	.+636    	; 0x5a3c <__fp_pscA>
    57c0:	30 f0       	brcs	.+12     	; 0x57ce <__addsf3+0x18>
    57c2:	43 d1       	rcall	.+646    	; 0x5a4a <__fp_pscB>
    57c4:	20 f0       	brcs	.+8      	; 0x57ce <__addsf3+0x18>
    57c6:	31 f4       	brne	.+12     	; 0x57d4 <__addsf3+0x1e>
    57c8:	9f 3f       	cpi	r25, 0xFF	; 255
    57ca:	11 f4       	brne	.+4      	; 0x57d0 <__addsf3+0x1a>
    57cc:	1e f4       	brtc	.+6      	; 0x57d4 <__addsf3+0x1e>
    57ce:	33 c1       	rjmp	.+614    	; 0x5a36 <__fp_nan>
    57d0:	0e f4       	brtc	.+2      	; 0x57d4 <__addsf3+0x1e>
    57d2:	e0 95       	com	r30
    57d4:	e7 fb       	bst	r30, 7
    57d6:	29 c1       	rjmp	.+594    	; 0x5a2a <__fp_inf>

000057d8 <__addsf3x>:
    57d8:	e9 2f       	mov	r30, r25
    57da:	4f d1       	rcall	.+670    	; 0x5a7a <__fp_split3>
    57dc:	80 f3       	brcs	.-32     	; 0x57be <__addsf3+0x8>
    57de:	ba 17       	cp	r27, r26
    57e0:	62 07       	cpc	r22, r18
    57e2:	73 07       	cpc	r23, r19
    57e4:	84 07       	cpc	r24, r20
    57e6:	95 07       	cpc	r25, r21
    57e8:	18 f0       	brcs	.+6      	; 0x57f0 <__addsf3x+0x18>
    57ea:	71 f4       	brne	.+28     	; 0x5808 <__addsf3x+0x30>
    57ec:	9e f5       	brtc	.+102    	; 0x5854 <__addsf3x+0x7c>
    57ee:	67 c1       	rjmp	.+718    	; 0x5abe <__fp_zero>
    57f0:	0e f4       	brtc	.+2      	; 0x57f4 <__addsf3x+0x1c>
    57f2:	e0 95       	com	r30
    57f4:	0b 2e       	mov	r0, r27
    57f6:	ba 2f       	mov	r27, r26
    57f8:	a0 2d       	mov	r26, r0
    57fa:	0b 01       	movw	r0, r22
    57fc:	b9 01       	movw	r22, r18
    57fe:	90 01       	movw	r18, r0
    5800:	0c 01       	movw	r0, r24
    5802:	ca 01       	movw	r24, r20
    5804:	a0 01       	movw	r20, r0
    5806:	11 24       	eor	r1, r1
    5808:	ff 27       	eor	r31, r31
    580a:	59 1b       	sub	r21, r25
    580c:	99 f0       	breq	.+38     	; 0x5834 <__addsf3x+0x5c>
    580e:	59 3f       	cpi	r21, 0xF9	; 249
    5810:	50 f4       	brcc	.+20     	; 0x5826 <__addsf3x+0x4e>
    5812:	50 3e       	cpi	r21, 0xE0	; 224
    5814:	68 f1       	brcs	.+90     	; 0x5870 <__addsf3x+0x98>
    5816:	1a 16       	cp	r1, r26
    5818:	f0 40       	sbci	r31, 0x00	; 0
    581a:	a2 2f       	mov	r26, r18
    581c:	23 2f       	mov	r18, r19
    581e:	34 2f       	mov	r19, r20
    5820:	44 27       	eor	r20, r20
    5822:	58 5f       	subi	r21, 0xF8	; 248
    5824:	f3 cf       	rjmp	.-26     	; 0x580c <__addsf3x+0x34>
    5826:	46 95       	lsr	r20
    5828:	37 95       	ror	r19
    582a:	27 95       	ror	r18
    582c:	a7 95       	ror	r26
    582e:	f0 40       	sbci	r31, 0x00	; 0
    5830:	53 95       	inc	r21
    5832:	c9 f7       	brne	.-14     	; 0x5826 <__addsf3x+0x4e>
    5834:	7e f4       	brtc	.+30     	; 0x5854 <__addsf3x+0x7c>
    5836:	1f 16       	cp	r1, r31
    5838:	ba 0b       	sbc	r27, r26
    583a:	62 0b       	sbc	r22, r18
    583c:	73 0b       	sbc	r23, r19
    583e:	84 0b       	sbc	r24, r20
    5840:	ba f0       	brmi	.+46     	; 0x5870 <__addsf3x+0x98>
    5842:	91 50       	subi	r25, 0x01	; 1
    5844:	a1 f0       	breq	.+40     	; 0x586e <__addsf3x+0x96>
    5846:	ff 0f       	add	r31, r31
    5848:	bb 1f       	adc	r27, r27
    584a:	66 1f       	adc	r22, r22
    584c:	77 1f       	adc	r23, r23
    584e:	88 1f       	adc	r24, r24
    5850:	c2 f7       	brpl	.-16     	; 0x5842 <__addsf3x+0x6a>
    5852:	0e c0       	rjmp	.+28     	; 0x5870 <__addsf3x+0x98>
    5854:	ba 0f       	add	r27, r26
    5856:	62 1f       	adc	r22, r18
    5858:	73 1f       	adc	r23, r19
    585a:	84 1f       	adc	r24, r20
    585c:	48 f4       	brcc	.+18     	; 0x5870 <__addsf3x+0x98>
    585e:	87 95       	ror	r24
    5860:	77 95       	ror	r23
    5862:	67 95       	ror	r22
    5864:	b7 95       	ror	r27
    5866:	f7 95       	ror	r31
    5868:	9e 3f       	cpi	r25, 0xFE	; 254
    586a:	08 f0       	brcs	.+2      	; 0x586e <__addsf3x+0x96>
    586c:	b3 cf       	rjmp	.-154    	; 0x57d4 <__addsf3+0x1e>
    586e:	93 95       	inc	r25
    5870:	88 0f       	add	r24, r24
    5872:	08 f0       	brcs	.+2      	; 0x5876 <__addsf3x+0x9e>
    5874:	99 27       	eor	r25, r25
    5876:	ee 0f       	add	r30, r30
    5878:	97 95       	ror	r25
    587a:	87 95       	ror	r24
    587c:	08 95       	ret

0000587e <__divsf3>:
    587e:	0c d0       	rcall	.+24     	; 0x5898 <__divsf3x>
    5880:	eb c0       	rjmp	.+470    	; 0x5a58 <__fp_round>
    5882:	e3 d0       	rcall	.+454    	; 0x5a4a <__fp_pscB>
    5884:	40 f0       	brcs	.+16     	; 0x5896 <__divsf3+0x18>
    5886:	da d0       	rcall	.+436    	; 0x5a3c <__fp_pscA>
    5888:	30 f0       	brcs	.+12     	; 0x5896 <__divsf3+0x18>
    588a:	21 f4       	brne	.+8      	; 0x5894 <__divsf3+0x16>
    588c:	5f 3f       	cpi	r21, 0xFF	; 255
    588e:	19 f0       	breq	.+6      	; 0x5896 <__divsf3+0x18>
    5890:	cc c0       	rjmp	.+408    	; 0x5a2a <__fp_inf>
    5892:	51 11       	cpse	r21, r1
    5894:	15 c1       	rjmp	.+554    	; 0x5ac0 <__fp_szero>
    5896:	cf c0       	rjmp	.+414    	; 0x5a36 <__fp_nan>

00005898 <__divsf3x>:
    5898:	f0 d0       	rcall	.+480    	; 0x5a7a <__fp_split3>
    589a:	98 f3       	brcs	.-26     	; 0x5882 <__divsf3+0x4>

0000589c <__divsf3_pse>:
    589c:	99 23       	and	r25, r25
    589e:	c9 f3       	breq	.-14     	; 0x5892 <__divsf3+0x14>
    58a0:	55 23       	and	r21, r21
    58a2:	b1 f3       	breq	.-20     	; 0x5890 <__divsf3+0x12>
    58a4:	95 1b       	sub	r25, r21
    58a6:	55 0b       	sbc	r21, r21
    58a8:	bb 27       	eor	r27, r27
    58aa:	aa 27       	eor	r26, r26
    58ac:	62 17       	cp	r22, r18
    58ae:	73 07       	cpc	r23, r19
    58b0:	84 07       	cpc	r24, r20
    58b2:	38 f0       	brcs	.+14     	; 0x58c2 <__divsf3_pse+0x26>
    58b4:	9f 5f       	subi	r25, 0xFF	; 255
    58b6:	5f 4f       	sbci	r21, 0xFF	; 255
    58b8:	22 0f       	add	r18, r18
    58ba:	33 1f       	adc	r19, r19
    58bc:	44 1f       	adc	r20, r20
    58be:	aa 1f       	adc	r26, r26
    58c0:	a9 f3       	breq	.-22     	; 0x58ac <__divsf3_pse+0x10>
    58c2:	33 d0       	rcall	.+102    	; 0x592a <__divsf3_pse+0x8e>
    58c4:	0e 2e       	mov	r0, r30
    58c6:	3a f0       	brmi	.+14     	; 0x58d6 <__divsf3_pse+0x3a>
    58c8:	e0 e8       	ldi	r30, 0x80	; 128
    58ca:	30 d0       	rcall	.+96     	; 0x592c <__divsf3_pse+0x90>
    58cc:	91 50       	subi	r25, 0x01	; 1
    58ce:	50 40       	sbci	r21, 0x00	; 0
    58d0:	e6 95       	lsr	r30
    58d2:	00 1c       	adc	r0, r0
    58d4:	ca f7       	brpl	.-14     	; 0x58c8 <__divsf3_pse+0x2c>
    58d6:	29 d0       	rcall	.+82     	; 0x592a <__divsf3_pse+0x8e>
    58d8:	fe 2f       	mov	r31, r30
    58da:	27 d0       	rcall	.+78     	; 0x592a <__divsf3_pse+0x8e>
    58dc:	66 0f       	add	r22, r22
    58de:	77 1f       	adc	r23, r23
    58e0:	88 1f       	adc	r24, r24
    58e2:	bb 1f       	adc	r27, r27
    58e4:	26 17       	cp	r18, r22
    58e6:	37 07       	cpc	r19, r23
    58e8:	48 07       	cpc	r20, r24
    58ea:	ab 07       	cpc	r26, r27
    58ec:	b0 e8       	ldi	r27, 0x80	; 128
    58ee:	09 f0       	breq	.+2      	; 0x58f2 <__divsf3_pse+0x56>
    58f0:	bb 0b       	sbc	r27, r27
    58f2:	80 2d       	mov	r24, r0
    58f4:	bf 01       	movw	r22, r30
    58f6:	ff 27       	eor	r31, r31
    58f8:	93 58       	subi	r25, 0x83	; 131
    58fa:	5f 4f       	sbci	r21, 0xFF	; 255
    58fc:	2a f0       	brmi	.+10     	; 0x5908 <__divsf3_pse+0x6c>
    58fe:	9e 3f       	cpi	r25, 0xFE	; 254
    5900:	51 05       	cpc	r21, r1
    5902:	68 f0       	brcs	.+26     	; 0x591e <__divsf3_pse+0x82>
    5904:	92 c0       	rjmp	.+292    	; 0x5a2a <__fp_inf>
    5906:	dc c0       	rjmp	.+440    	; 0x5ac0 <__fp_szero>
    5908:	5f 3f       	cpi	r21, 0xFF	; 255
    590a:	ec f3       	brlt	.-6      	; 0x5906 <__divsf3_pse+0x6a>
    590c:	98 3e       	cpi	r25, 0xE8	; 232
    590e:	dc f3       	brlt	.-10     	; 0x5906 <__divsf3_pse+0x6a>
    5910:	86 95       	lsr	r24
    5912:	77 95       	ror	r23
    5914:	67 95       	ror	r22
    5916:	b7 95       	ror	r27
    5918:	f7 95       	ror	r31
    591a:	9f 5f       	subi	r25, 0xFF	; 255
    591c:	c9 f7       	brne	.-14     	; 0x5910 <__divsf3_pse+0x74>
    591e:	88 0f       	add	r24, r24
    5920:	91 1d       	adc	r25, r1
    5922:	96 95       	lsr	r25
    5924:	87 95       	ror	r24
    5926:	97 f9       	bld	r25, 7
    5928:	08 95       	ret
    592a:	e1 e0       	ldi	r30, 0x01	; 1
    592c:	66 0f       	add	r22, r22
    592e:	77 1f       	adc	r23, r23
    5930:	88 1f       	adc	r24, r24
    5932:	bb 1f       	adc	r27, r27
    5934:	62 17       	cp	r22, r18
    5936:	73 07       	cpc	r23, r19
    5938:	84 07       	cpc	r24, r20
    593a:	ba 07       	cpc	r27, r26
    593c:	20 f0       	brcs	.+8      	; 0x5946 <__divsf3_pse+0xaa>
    593e:	62 1b       	sub	r22, r18
    5940:	73 0b       	sbc	r23, r19
    5942:	84 0b       	sbc	r24, r20
    5944:	ba 0b       	sbc	r27, r26
    5946:	ee 1f       	adc	r30, r30
    5948:	88 f7       	brcc	.-30     	; 0x592c <__divsf3_pse+0x90>
    594a:	e0 95       	com	r30
    594c:	08 95       	ret

0000594e <__fixsfsi>:
    594e:	04 d0       	rcall	.+8      	; 0x5958 <__fixunssfsi>
    5950:	68 94       	set
    5952:	b1 11       	cpse	r27, r1
    5954:	b5 c0       	rjmp	.+362    	; 0x5ac0 <__fp_szero>
    5956:	08 95       	ret

00005958 <__fixunssfsi>:
    5958:	98 d0       	rcall	.+304    	; 0x5a8a <__fp_splitA>
    595a:	88 f0       	brcs	.+34     	; 0x597e <__fixunssfsi+0x26>
    595c:	9f 57       	subi	r25, 0x7F	; 127
    595e:	90 f0       	brcs	.+36     	; 0x5984 <__fixunssfsi+0x2c>
    5960:	b9 2f       	mov	r27, r25
    5962:	99 27       	eor	r25, r25
    5964:	b7 51       	subi	r27, 0x17	; 23
    5966:	a0 f0       	brcs	.+40     	; 0x5990 <__fixunssfsi+0x38>
    5968:	d1 f0       	breq	.+52     	; 0x599e <__fixunssfsi+0x46>
    596a:	66 0f       	add	r22, r22
    596c:	77 1f       	adc	r23, r23
    596e:	88 1f       	adc	r24, r24
    5970:	99 1f       	adc	r25, r25
    5972:	1a f0       	brmi	.+6      	; 0x597a <__fixunssfsi+0x22>
    5974:	ba 95       	dec	r27
    5976:	c9 f7       	brne	.-14     	; 0x596a <__fixunssfsi+0x12>
    5978:	12 c0       	rjmp	.+36     	; 0x599e <__fixunssfsi+0x46>
    597a:	b1 30       	cpi	r27, 0x01	; 1
    597c:	81 f0       	breq	.+32     	; 0x599e <__fixunssfsi+0x46>
    597e:	9f d0       	rcall	.+318    	; 0x5abe <__fp_zero>
    5980:	b1 e0       	ldi	r27, 0x01	; 1
    5982:	08 95       	ret
    5984:	9c c0       	rjmp	.+312    	; 0x5abe <__fp_zero>
    5986:	67 2f       	mov	r22, r23
    5988:	78 2f       	mov	r23, r24
    598a:	88 27       	eor	r24, r24
    598c:	b8 5f       	subi	r27, 0xF8	; 248
    598e:	39 f0       	breq	.+14     	; 0x599e <__fixunssfsi+0x46>
    5990:	b9 3f       	cpi	r27, 0xF9	; 249
    5992:	cc f3       	brlt	.-14     	; 0x5986 <__fixunssfsi+0x2e>
    5994:	86 95       	lsr	r24
    5996:	77 95       	ror	r23
    5998:	67 95       	ror	r22
    599a:	b3 95       	inc	r27
    599c:	d9 f7       	brne	.-10     	; 0x5994 <__fixunssfsi+0x3c>
    599e:	3e f4       	brtc	.+14     	; 0x59ae <__fixunssfsi+0x56>
    59a0:	90 95       	com	r25
    59a2:	80 95       	com	r24
    59a4:	70 95       	com	r23
    59a6:	61 95       	neg	r22
    59a8:	7f 4f       	sbci	r23, 0xFF	; 255
    59aa:	8f 4f       	sbci	r24, 0xFF	; 255
    59ac:	9f 4f       	sbci	r25, 0xFF	; 255
    59ae:	08 95       	ret

000059b0 <__floatunsisf>:
    59b0:	e8 94       	clt
    59b2:	09 c0       	rjmp	.+18     	; 0x59c6 <__floatsisf+0x12>

000059b4 <__floatsisf>:
    59b4:	97 fb       	bst	r25, 7
    59b6:	3e f4       	brtc	.+14     	; 0x59c6 <__floatsisf+0x12>
    59b8:	90 95       	com	r25
    59ba:	80 95       	com	r24
    59bc:	70 95       	com	r23
    59be:	61 95       	neg	r22
    59c0:	7f 4f       	sbci	r23, 0xFF	; 255
    59c2:	8f 4f       	sbci	r24, 0xFF	; 255
    59c4:	9f 4f       	sbci	r25, 0xFF	; 255
    59c6:	99 23       	and	r25, r25
    59c8:	a9 f0       	breq	.+42     	; 0x59f4 <__floatsisf+0x40>
    59ca:	f9 2f       	mov	r31, r25
    59cc:	96 e9       	ldi	r25, 0x96	; 150
    59ce:	bb 27       	eor	r27, r27
    59d0:	93 95       	inc	r25
    59d2:	f6 95       	lsr	r31
    59d4:	87 95       	ror	r24
    59d6:	77 95       	ror	r23
    59d8:	67 95       	ror	r22
    59da:	b7 95       	ror	r27
    59dc:	f1 11       	cpse	r31, r1
    59de:	f8 cf       	rjmp	.-16     	; 0x59d0 <__floatsisf+0x1c>
    59e0:	fa f4       	brpl	.+62     	; 0x5a20 <__floatsisf+0x6c>
    59e2:	bb 0f       	add	r27, r27
    59e4:	11 f4       	brne	.+4      	; 0x59ea <__floatsisf+0x36>
    59e6:	60 ff       	sbrs	r22, 0
    59e8:	1b c0       	rjmp	.+54     	; 0x5a20 <__floatsisf+0x6c>
    59ea:	6f 5f       	subi	r22, 0xFF	; 255
    59ec:	7f 4f       	sbci	r23, 0xFF	; 255
    59ee:	8f 4f       	sbci	r24, 0xFF	; 255
    59f0:	9f 4f       	sbci	r25, 0xFF	; 255
    59f2:	16 c0       	rjmp	.+44     	; 0x5a20 <__floatsisf+0x6c>
    59f4:	88 23       	and	r24, r24
    59f6:	11 f0       	breq	.+4      	; 0x59fc <__floatsisf+0x48>
    59f8:	96 e9       	ldi	r25, 0x96	; 150
    59fa:	11 c0       	rjmp	.+34     	; 0x5a1e <__floatsisf+0x6a>
    59fc:	77 23       	and	r23, r23
    59fe:	21 f0       	breq	.+8      	; 0x5a08 <__floatsisf+0x54>
    5a00:	9e e8       	ldi	r25, 0x8E	; 142
    5a02:	87 2f       	mov	r24, r23
    5a04:	76 2f       	mov	r23, r22
    5a06:	05 c0       	rjmp	.+10     	; 0x5a12 <__floatsisf+0x5e>
    5a08:	66 23       	and	r22, r22
    5a0a:	71 f0       	breq	.+28     	; 0x5a28 <__floatsisf+0x74>
    5a0c:	96 e8       	ldi	r25, 0x86	; 134
    5a0e:	86 2f       	mov	r24, r22
    5a10:	70 e0       	ldi	r23, 0x00	; 0
    5a12:	60 e0       	ldi	r22, 0x00	; 0
    5a14:	2a f0       	brmi	.+10     	; 0x5a20 <__floatsisf+0x6c>
    5a16:	9a 95       	dec	r25
    5a18:	66 0f       	add	r22, r22
    5a1a:	77 1f       	adc	r23, r23
    5a1c:	88 1f       	adc	r24, r24
    5a1e:	da f7       	brpl	.-10     	; 0x5a16 <__floatsisf+0x62>
    5a20:	88 0f       	add	r24, r24
    5a22:	96 95       	lsr	r25
    5a24:	87 95       	ror	r24
    5a26:	97 f9       	bld	r25, 7
    5a28:	08 95       	ret

00005a2a <__fp_inf>:
    5a2a:	97 f9       	bld	r25, 7
    5a2c:	9f 67       	ori	r25, 0x7F	; 127
    5a2e:	80 e8       	ldi	r24, 0x80	; 128
    5a30:	70 e0       	ldi	r23, 0x00	; 0
    5a32:	60 e0       	ldi	r22, 0x00	; 0
    5a34:	08 95       	ret

00005a36 <__fp_nan>:
    5a36:	9f ef       	ldi	r25, 0xFF	; 255
    5a38:	80 ec       	ldi	r24, 0xC0	; 192
    5a3a:	08 95       	ret

00005a3c <__fp_pscA>:
    5a3c:	00 24       	eor	r0, r0
    5a3e:	0a 94       	dec	r0
    5a40:	16 16       	cp	r1, r22
    5a42:	17 06       	cpc	r1, r23
    5a44:	18 06       	cpc	r1, r24
    5a46:	09 06       	cpc	r0, r25
    5a48:	08 95       	ret

00005a4a <__fp_pscB>:
    5a4a:	00 24       	eor	r0, r0
    5a4c:	0a 94       	dec	r0
    5a4e:	12 16       	cp	r1, r18
    5a50:	13 06       	cpc	r1, r19
    5a52:	14 06       	cpc	r1, r20
    5a54:	05 06       	cpc	r0, r21
    5a56:	08 95       	ret

00005a58 <__fp_round>:
    5a58:	09 2e       	mov	r0, r25
    5a5a:	03 94       	inc	r0
    5a5c:	00 0c       	add	r0, r0
    5a5e:	11 f4       	brne	.+4      	; 0x5a64 <__fp_round+0xc>
    5a60:	88 23       	and	r24, r24
    5a62:	52 f0       	brmi	.+20     	; 0x5a78 <__fp_round+0x20>
    5a64:	bb 0f       	add	r27, r27
    5a66:	40 f4       	brcc	.+16     	; 0x5a78 <__fp_round+0x20>
    5a68:	bf 2b       	or	r27, r31
    5a6a:	11 f4       	brne	.+4      	; 0x5a70 <__fp_round+0x18>
    5a6c:	60 ff       	sbrs	r22, 0
    5a6e:	04 c0       	rjmp	.+8      	; 0x5a78 <__fp_round+0x20>
    5a70:	6f 5f       	subi	r22, 0xFF	; 255
    5a72:	7f 4f       	sbci	r23, 0xFF	; 255
    5a74:	8f 4f       	sbci	r24, 0xFF	; 255
    5a76:	9f 4f       	sbci	r25, 0xFF	; 255
    5a78:	08 95       	ret

00005a7a <__fp_split3>:
    5a7a:	57 fd       	sbrc	r21, 7
    5a7c:	90 58       	subi	r25, 0x80	; 128
    5a7e:	44 0f       	add	r20, r20
    5a80:	55 1f       	adc	r21, r21
    5a82:	59 f0       	breq	.+22     	; 0x5a9a <__fp_splitA+0x10>
    5a84:	5f 3f       	cpi	r21, 0xFF	; 255
    5a86:	71 f0       	breq	.+28     	; 0x5aa4 <__fp_splitA+0x1a>
    5a88:	47 95       	ror	r20

00005a8a <__fp_splitA>:
    5a8a:	88 0f       	add	r24, r24
    5a8c:	97 fb       	bst	r25, 7
    5a8e:	99 1f       	adc	r25, r25
    5a90:	61 f0       	breq	.+24     	; 0x5aaa <__fp_splitA+0x20>
    5a92:	9f 3f       	cpi	r25, 0xFF	; 255
    5a94:	79 f0       	breq	.+30     	; 0x5ab4 <__fp_splitA+0x2a>
    5a96:	87 95       	ror	r24
    5a98:	08 95       	ret
    5a9a:	12 16       	cp	r1, r18
    5a9c:	13 06       	cpc	r1, r19
    5a9e:	14 06       	cpc	r1, r20
    5aa0:	55 1f       	adc	r21, r21
    5aa2:	f2 cf       	rjmp	.-28     	; 0x5a88 <__fp_split3+0xe>
    5aa4:	46 95       	lsr	r20
    5aa6:	f1 df       	rcall	.-30     	; 0x5a8a <__fp_splitA>
    5aa8:	08 c0       	rjmp	.+16     	; 0x5aba <__fp_splitA+0x30>
    5aaa:	16 16       	cp	r1, r22
    5aac:	17 06       	cpc	r1, r23
    5aae:	18 06       	cpc	r1, r24
    5ab0:	99 1f       	adc	r25, r25
    5ab2:	f1 cf       	rjmp	.-30     	; 0x5a96 <__fp_splitA+0xc>
    5ab4:	86 95       	lsr	r24
    5ab6:	71 05       	cpc	r23, r1
    5ab8:	61 05       	cpc	r22, r1
    5aba:	08 94       	sec
    5abc:	08 95       	ret

00005abe <__fp_zero>:
    5abe:	e8 94       	clt

00005ac0 <__fp_szero>:
    5ac0:	bb 27       	eor	r27, r27
    5ac2:	66 27       	eor	r22, r22
    5ac4:	77 27       	eor	r23, r23
    5ac6:	cb 01       	movw	r24, r22
    5ac8:	97 f9       	bld	r25, 7
    5aca:	08 95       	ret

00005acc <__mulsf3>:
    5acc:	0b d0       	rcall	.+22     	; 0x5ae4 <__mulsf3x>
    5ace:	c4 cf       	rjmp	.-120    	; 0x5a58 <__fp_round>
    5ad0:	b5 df       	rcall	.-150    	; 0x5a3c <__fp_pscA>
    5ad2:	28 f0       	brcs	.+10     	; 0x5ade <__mulsf3+0x12>
    5ad4:	ba df       	rcall	.-140    	; 0x5a4a <__fp_pscB>
    5ad6:	18 f0       	brcs	.+6      	; 0x5ade <__mulsf3+0x12>
    5ad8:	95 23       	and	r25, r21
    5ada:	09 f0       	breq	.+2      	; 0x5ade <__mulsf3+0x12>
    5adc:	a6 cf       	rjmp	.-180    	; 0x5a2a <__fp_inf>
    5ade:	ab cf       	rjmp	.-170    	; 0x5a36 <__fp_nan>
    5ae0:	11 24       	eor	r1, r1
    5ae2:	ee cf       	rjmp	.-36     	; 0x5ac0 <__fp_szero>

00005ae4 <__mulsf3x>:
    5ae4:	ca df       	rcall	.-108    	; 0x5a7a <__fp_split3>
    5ae6:	a0 f3       	brcs	.-24     	; 0x5ad0 <__mulsf3+0x4>

00005ae8 <__mulsf3_pse>:
    5ae8:	95 9f       	mul	r25, r21
    5aea:	d1 f3       	breq	.-12     	; 0x5ae0 <__mulsf3+0x14>
    5aec:	95 0f       	add	r25, r21
    5aee:	50 e0       	ldi	r21, 0x00	; 0
    5af0:	55 1f       	adc	r21, r21
    5af2:	62 9f       	mul	r22, r18
    5af4:	f0 01       	movw	r30, r0
    5af6:	72 9f       	mul	r23, r18
    5af8:	bb 27       	eor	r27, r27
    5afa:	f0 0d       	add	r31, r0
    5afc:	b1 1d       	adc	r27, r1
    5afe:	63 9f       	mul	r22, r19
    5b00:	aa 27       	eor	r26, r26
    5b02:	f0 0d       	add	r31, r0
    5b04:	b1 1d       	adc	r27, r1
    5b06:	aa 1f       	adc	r26, r26
    5b08:	64 9f       	mul	r22, r20
    5b0a:	66 27       	eor	r22, r22
    5b0c:	b0 0d       	add	r27, r0
    5b0e:	a1 1d       	adc	r26, r1
    5b10:	66 1f       	adc	r22, r22
    5b12:	82 9f       	mul	r24, r18
    5b14:	22 27       	eor	r18, r18
    5b16:	b0 0d       	add	r27, r0
    5b18:	a1 1d       	adc	r26, r1
    5b1a:	62 1f       	adc	r22, r18
    5b1c:	73 9f       	mul	r23, r19
    5b1e:	b0 0d       	add	r27, r0
    5b20:	a1 1d       	adc	r26, r1
    5b22:	62 1f       	adc	r22, r18
    5b24:	83 9f       	mul	r24, r19
    5b26:	a0 0d       	add	r26, r0
    5b28:	61 1d       	adc	r22, r1
    5b2a:	22 1f       	adc	r18, r18
    5b2c:	74 9f       	mul	r23, r20
    5b2e:	33 27       	eor	r19, r19
    5b30:	a0 0d       	add	r26, r0
    5b32:	61 1d       	adc	r22, r1
    5b34:	23 1f       	adc	r18, r19
    5b36:	84 9f       	mul	r24, r20
    5b38:	60 0d       	add	r22, r0
    5b3a:	21 1d       	adc	r18, r1
    5b3c:	82 2f       	mov	r24, r18
    5b3e:	76 2f       	mov	r23, r22
    5b40:	6a 2f       	mov	r22, r26
    5b42:	11 24       	eor	r1, r1
    5b44:	9f 57       	subi	r25, 0x7F	; 127
    5b46:	50 40       	sbci	r21, 0x00	; 0
    5b48:	8a f0       	brmi	.+34     	; 0x5b6c <__mulsf3_pse+0x84>
    5b4a:	e1 f0       	breq	.+56     	; 0x5b84 <__mulsf3_pse+0x9c>
    5b4c:	88 23       	and	r24, r24
    5b4e:	4a f0       	brmi	.+18     	; 0x5b62 <__mulsf3_pse+0x7a>
    5b50:	ee 0f       	add	r30, r30
    5b52:	ff 1f       	adc	r31, r31
    5b54:	bb 1f       	adc	r27, r27
    5b56:	66 1f       	adc	r22, r22
    5b58:	77 1f       	adc	r23, r23
    5b5a:	88 1f       	adc	r24, r24
    5b5c:	91 50       	subi	r25, 0x01	; 1
    5b5e:	50 40       	sbci	r21, 0x00	; 0
    5b60:	a9 f7       	brne	.-22     	; 0x5b4c <__mulsf3_pse+0x64>
    5b62:	9e 3f       	cpi	r25, 0xFE	; 254
    5b64:	51 05       	cpc	r21, r1
    5b66:	70 f0       	brcs	.+28     	; 0x5b84 <__mulsf3_pse+0x9c>
    5b68:	60 cf       	rjmp	.-320    	; 0x5a2a <__fp_inf>
    5b6a:	aa cf       	rjmp	.-172    	; 0x5ac0 <__fp_szero>
    5b6c:	5f 3f       	cpi	r21, 0xFF	; 255
    5b6e:	ec f3       	brlt	.-6      	; 0x5b6a <__mulsf3_pse+0x82>
    5b70:	98 3e       	cpi	r25, 0xE8	; 232
    5b72:	dc f3       	brlt	.-10     	; 0x5b6a <__mulsf3_pse+0x82>
    5b74:	86 95       	lsr	r24
    5b76:	77 95       	ror	r23
    5b78:	67 95       	ror	r22
    5b7a:	b7 95       	ror	r27
    5b7c:	f7 95       	ror	r31
    5b7e:	e7 95       	ror	r30
    5b80:	9f 5f       	subi	r25, 0xFF	; 255
    5b82:	c1 f7       	brne	.-16     	; 0x5b74 <__mulsf3_pse+0x8c>
    5b84:	fe 2b       	or	r31, r30
    5b86:	88 0f       	add	r24, r24
    5b88:	91 1d       	adc	r25, r1
    5b8a:	96 95       	lsr	r25
    5b8c:	87 95       	ror	r24
    5b8e:	97 f9       	bld	r25, 7
    5b90:	08 95       	ret

00005b92 <__udivmodsi4>:
    5b92:	a1 e2       	ldi	r26, 0x21	; 33
    5b94:	1a 2e       	mov	r1, r26
    5b96:	aa 1b       	sub	r26, r26
    5b98:	bb 1b       	sub	r27, r27
    5b9a:	fd 01       	movw	r30, r26
    5b9c:	0d c0       	rjmp	.+26     	; 0x5bb8 <__udivmodsi4_ep>

00005b9e <__udivmodsi4_loop>:
    5b9e:	aa 1f       	adc	r26, r26
    5ba0:	bb 1f       	adc	r27, r27
    5ba2:	ee 1f       	adc	r30, r30
    5ba4:	ff 1f       	adc	r31, r31
    5ba6:	a2 17       	cp	r26, r18
    5ba8:	b3 07       	cpc	r27, r19
    5baa:	e4 07       	cpc	r30, r20
    5bac:	f5 07       	cpc	r31, r21
    5bae:	20 f0       	brcs	.+8      	; 0x5bb8 <__udivmodsi4_ep>
    5bb0:	a2 1b       	sub	r26, r18
    5bb2:	b3 0b       	sbc	r27, r19
    5bb4:	e4 0b       	sbc	r30, r20
    5bb6:	f5 0b       	sbc	r31, r21

00005bb8 <__udivmodsi4_ep>:
    5bb8:	66 1f       	adc	r22, r22
    5bba:	77 1f       	adc	r23, r23
    5bbc:	88 1f       	adc	r24, r24
    5bbe:	99 1f       	adc	r25, r25
    5bc0:	1a 94       	dec	r1
    5bc2:	69 f7       	brne	.-38     	; 0x5b9e <__udivmodsi4_loop>
    5bc4:	60 95       	com	r22
    5bc6:	70 95       	com	r23
    5bc8:	80 95       	com	r24
    5bca:	90 95       	com	r25
    5bcc:	9b 01       	movw	r18, r22
    5bce:	ac 01       	movw	r20, r24
    5bd0:	bd 01       	movw	r22, r26
    5bd2:	cf 01       	movw	r24, r30
    5bd4:	08 95       	ret

00005bd6 <__tablejump2__>:
    5bd6:	ee 0f       	add	r30, r30
    5bd8:	ff 1f       	adc	r31, r31
    5bda:	88 1f       	adc	r24, r24
    5bdc:	8b bf       	out	0x3b, r24	; 59
    5bde:	07 90       	elpm	r0, Z+
    5be0:	f6 91       	elpm	r31, Z
    5be2:	e0 2d       	mov	r30, r0
    5be4:	19 94       	eijmp

00005be6 <calloc>:
    5be6:	0f 93       	push	r16
    5be8:	1f 93       	push	r17
    5bea:	cf 93       	push	r28
    5bec:	df 93       	push	r29
    5bee:	86 9f       	mul	r24, r22
    5bf0:	80 01       	movw	r16, r0
    5bf2:	87 9f       	mul	r24, r23
    5bf4:	10 0d       	add	r17, r0
    5bf6:	96 9f       	mul	r25, r22
    5bf8:	10 0d       	add	r17, r0
    5bfa:	11 24       	eor	r1, r1
    5bfc:	c8 01       	movw	r24, r16
    5bfe:	0d d0       	rcall	.+26     	; 0x5c1a <malloc>
    5c00:	ec 01       	movw	r28, r24
    5c02:	00 97       	sbiw	r24, 0x00	; 0
    5c04:	21 f0       	breq	.+8      	; 0x5c0e <calloc+0x28>
    5c06:	a8 01       	movw	r20, r16
    5c08:	60 e0       	ldi	r22, 0x00	; 0
    5c0a:	70 e0       	ldi	r23, 0x00	; 0
    5c0c:	34 d1       	rcall	.+616    	; 0x5e76 <memset>
    5c0e:	ce 01       	movw	r24, r28
    5c10:	df 91       	pop	r29
    5c12:	cf 91       	pop	r28
    5c14:	1f 91       	pop	r17
    5c16:	0f 91       	pop	r16
    5c18:	08 95       	ret

00005c1a <malloc>:
    5c1a:	0f 93       	push	r16
    5c1c:	1f 93       	push	r17
    5c1e:	cf 93       	push	r28
    5c20:	df 93       	push	r29
    5c22:	82 30       	cpi	r24, 0x02	; 2
    5c24:	91 05       	cpc	r25, r1
    5c26:	10 f4       	brcc	.+4      	; 0x5c2c <malloc+0x12>
    5c28:	82 e0       	ldi	r24, 0x02	; 2
    5c2a:	90 e0       	ldi	r25, 0x00	; 0
    5c2c:	e0 91 5f 1b 	lds	r30, 0x1B5F	; 0x801b5f <__flp>
    5c30:	f0 91 60 1b 	lds	r31, 0x1B60	; 0x801b60 <__flp+0x1>
    5c34:	20 e0       	ldi	r18, 0x00	; 0
    5c36:	30 e0       	ldi	r19, 0x00	; 0
    5c38:	a0 e0       	ldi	r26, 0x00	; 0
    5c3a:	b0 e0       	ldi	r27, 0x00	; 0
    5c3c:	30 97       	sbiw	r30, 0x00	; 0
    5c3e:	19 f1       	breq	.+70     	; 0x5c86 <malloc+0x6c>
    5c40:	40 81       	ld	r20, Z
    5c42:	51 81       	ldd	r21, Z+1	; 0x01
    5c44:	02 81       	ldd	r16, Z+2	; 0x02
    5c46:	13 81       	ldd	r17, Z+3	; 0x03
    5c48:	48 17       	cp	r20, r24
    5c4a:	59 07       	cpc	r21, r25
    5c4c:	c8 f0       	brcs	.+50     	; 0x5c80 <malloc+0x66>
    5c4e:	84 17       	cp	r24, r20
    5c50:	95 07       	cpc	r25, r21
    5c52:	69 f4       	brne	.+26     	; 0x5c6e <malloc+0x54>
    5c54:	10 97       	sbiw	r26, 0x00	; 0
    5c56:	31 f0       	breq	.+12     	; 0x5c64 <malloc+0x4a>
    5c58:	12 96       	adiw	r26, 0x02	; 2
    5c5a:	0c 93       	st	X, r16
    5c5c:	12 97       	sbiw	r26, 0x02	; 2
    5c5e:	13 96       	adiw	r26, 0x03	; 3
    5c60:	1c 93       	st	X, r17
    5c62:	27 c0       	rjmp	.+78     	; 0x5cb2 <malloc+0x98>
    5c64:	00 93 5f 1b 	sts	0x1B5F, r16	; 0x801b5f <__flp>
    5c68:	10 93 60 1b 	sts	0x1B60, r17	; 0x801b60 <__flp+0x1>
    5c6c:	22 c0       	rjmp	.+68     	; 0x5cb2 <malloc+0x98>
    5c6e:	21 15       	cp	r18, r1
    5c70:	31 05       	cpc	r19, r1
    5c72:	19 f0       	breq	.+6      	; 0x5c7a <malloc+0x60>
    5c74:	42 17       	cp	r20, r18
    5c76:	53 07       	cpc	r21, r19
    5c78:	18 f4       	brcc	.+6      	; 0x5c80 <malloc+0x66>
    5c7a:	9a 01       	movw	r18, r20
    5c7c:	bd 01       	movw	r22, r26
    5c7e:	ef 01       	movw	r28, r30
    5c80:	df 01       	movw	r26, r30
    5c82:	f8 01       	movw	r30, r16
    5c84:	db cf       	rjmp	.-74     	; 0x5c3c <malloc+0x22>
    5c86:	21 15       	cp	r18, r1
    5c88:	31 05       	cpc	r19, r1
    5c8a:	f9 f0       	breq	.+62     	; 0x5cca <malloc+0xb0>
    5c8c:	28 1b       	sub	r18, r24
    5c8e:	39 0b       	sbc	r19, r25
    5c90:	24 30       	cpi	r18, 0x04	; 4
    5c92:	31 05       	cpc	r19, r1
    5c94:	80 f4       	brcc	.+32     	; 0x5cb6 <malloc+0x9c>
    5c96:	8a 81       	ldd	r24, Y+2	; 0x02
    5c98:	9b 81       	ldd	r25, Y+3	; 0x03
    5c9a:	61 15       	cp	r22, r1
    5c9c:	71 05       	cpc	r23, r1
    5c9e:	21 f0       	breq	.+8      	; 0x5ca8 <malloc+0x8e>
    5ca0:	fb 01       	movw	r30, r22
    5ca2:	93 83       	std	Z+3, r25	; 0x03
    5ca4:	82 83       	std	Z+2, r24	; 0x02
    5ca6:	04 c0       	rjmp	.+8      	; 0x5cb0 <malloc+0x96>
    5ca8:	90 93 60 1b 	sts	0x1B60, r25	; 0x801b60 <__flp+0x1>
    5cac:	80 93 5f 1b 	sts	0x1B5F, r24	; 0x801b5f <__flp>
    5cb0:	fe 01       	movw	r30, r28
    5cb2:	32 96       	adiw	r30, 0x02	; 2
    5cb4:	44 c0       	rjmp	.+136    	; 0x5d3e <malloc+0x124>
    5cb6:	fe 01       	movw	r30, r28
    5cb8:	e2 0f       	add	r30, r18
    5cba:	f3 1f       	adc	r31, r19
    5cbc:	81 93       	st	Z+, r24
    5cbe:	91 93       	st	Z+, r25
    5cc0:	22 50       	subi	r18, 0x02	; 2
    5cc2:	31 09       	sbc	r19, r1
    5cc4:	39 83       	std	Y+1, r19	; 0x01
    5cc6:	28 83       	st	Y, r18
    5cc8:	3a c0       	rjmp	.+116    	; 0x5d3e <malloc+0x124>
    5cca:	20 91 5d 1b 	lds	r18, 0x1B5D	; 0x801b5d <__brkval>
    5cce:	30 91 5e 1b 	lds	r19, 0x1B5E	; 0x801b5e <__brkval+0x1>
    5cd2:	23 2b       	or	r18, r19
    5cd4:	41 f4       	brne	.+16     	; 0x5ce6 <malloc+0xcc>
    5cd6:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    5cda:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    5cde:	30 93 5e 1b 	sts	0x1B5E, r19	; 0x801b5e <__brkval+0x1>
    5ce2:	20 93 5d 1b 	sts	0x1B5D, r18	; 0x801b5d <__brkval>
    5ce6:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    5cea:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    5cee:	21 15       	cp	r18, r1
    5cf0:	31 05       	cpc	r19, r1
    5cf2:	41 f4       	brne	.+16     	; 0x5d04 <malloc+0xea>
    5cf4:	2d b7       	in	r18, 0x3d	; 61
    5cf6:	3e b7       	in	r19, 0x3e	; 62
    5cf8:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    5cfc:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    5d00:	24 1b       	sub	r18, r20
    5d02:	35 0b       	sbc	r19, r21
    5d04:	e0 91 5d 1b 	lds	r30, 0x1B5D	; 0x801b5d <__brkval>
    5d08:	f0 91 5e 1b 	lds	r31, 0x1B5E	; 0x801b5e <__brkval+0x1>
    5d0c:	e2 17       	cp	r30, r18
    5d0e:	f3 07       	cpc	r31, r19
    5d10:	a0 f4       	brcc	.+40     	; 0x5d3a <malloc+0x120>
    5d12:	2e 1b       	sub	r18, r30
    5d14:	3f 0b       	sbc	r19, r31
    5d16:	28 17       	cp	r18, r24
    5d18:	39 07       	cpc	r19, r25
    5d1a:	78 f0       	brcs	.+30     	; 0x5d3a <malloc+0x120>
    5d1c:	ac 01       	movw	r20, r24
    5d1e:	4e 5f       	subi	r20, 0xFE	; 254
    5d20:	5f 4f       	sbci	r21, 0xFF	; 255
    5d22:	24 17       	cp	r18, r20
    5d24:	35 07       	cpc	r19, r21
    5d26:	48 f0       	brcs	.+18     	; 0x5d3a <malloc+0x120>
    5d28:	4e 0f       	add	r20, r30
    5d2a:	5f 1f       	adc	r21, r31
    5d2c:	50 93 5e 1b 	sts	0x1B5E, r21	; 0x801b5e <__brkval+0x1>
    5d30:	40 93 5d 1b 	sts	0x1B5D, r20	; 0x801b5d <__brkval>
    5d34:	81 93       	st	Z+, r24
    5d36:	91 93       	st	Z+, r25
    5d38:	02 c0       	rjmp	.+4      	; 0x5d3e <malloc+0x124>
    5d3a:	e0 e0       	ldi	r30, 0x00	; 0
    5d3c:	f0 e0       	ldi	r31, 0x00	; 0
    5d3e:	cf 01       	movw	r24, r30
    5d40:	df 91       	pop	r29
    5d42:	cf 91       	pop	r28
    5d44:	1f 91       	pop	r17
    5d46:	0f 91       	pop	r16
    5d48:	08 95       	ret

00005d4a <free>:
    5d4a:	cf 93       	push	r28
    5d4c:	df 93       	push	r29
    5d4e:	00 97       	sbiw	r24, 0x00	; 0
    5d50:	09 f4       	brne	.+2      	; 0x5d54 <free+0xa>
    5d52:	81 c0       	rjmp	.+258    	; 0x5e56 <free+0x10c>
    5d54:	fc 01       	movw	r30, r24
    5d56:	32 97       	sbiw	r30, 0x02	; 2
    5d58:	13 82       	std	Z+3, r1	; 0x03
    5d5a:	12 82       	std	Z+2, r1	; 0x02
    5d5c:	a0 91 5f 1b 	lds	r26, 0x1B5F	; 0x801b5f <__flp>
    5d60:	b0 91 60 1b 	lds	r27, 0x1B60	; 0x801b60 <__flp+0x1>
    5d64:	10 97       	sbiw	r26, 0x00	; 0
    5d66:	81 f4       	brne	.+32     	; 0x5d88 <free+0x3e>
    5d68:	20 81       	ld	r18, Z
    5d6a:	31 81       	ldd	r19, Z+1	; 0x01
    5d6c:	82 0f       	add	r24, r18
    5d6e:	93 1f       	adc	r25, r19
    5d70:	20 91 5d 1b 	lds	r18, 0x1B5D	; 0x801b5d <__brkval>
    5d74:	30 91 5e 1b 	lds	r19, 0x1B5E	; 0x801b5e <__brkval+0x1>
    5d78:	28 17       	cp	r18, r24
    5d7a:	39 07       	cpc	r19, r25
    5d7c:	51 f5       	brne	.+84     	; 0x5dd2 <free+0x88>
    5d7e:	f0 93 5e 1b 	sts	0x1B5E, r31	; 0x801b5e <__brkval+0x1>
    5d82:	e0 93 5d 1b 	sts	0x1B5D, r30	; 0x801b5d <__brkval>
    5d86:	67 c0       	rjmp	.+206    	; 0x5e56 <free+0x10c>
    5d88:	ed 01       	movw	r28, r26
    5d8a:	20 e0       	ldi	r18, 0x00	; 0
    5d8c:	30 e0       	ldi	r19, 0x00	; 0
    5d8e:	ce 17       	cp	r28, r30
    5d90:	df 07       	cpc	r29, r31
    5d92:	40 f4       	brcc	.+16     	; 0x5da4 <free+0x5a>
    5d94:	4a 81       	ldd	r20, Y+2	; 0x02
    5d96:	5b 81       	ldd	r21, Y+3	; 0x03
    5d98:	9e 01       	movw	r18, r28
    5d9a:	41 15       	cp	r20, r1
    5d9c:	51 05       	cpc	r21, r1
    5d9e:	f1 f0       	breq	.+60     	; 0x5ddc <free+0x92>
    5da0:	ea 01       	movw	r28, r20
    5da2:	f5 cf       	rjmp	.-22     	; 0x5d8e <free+0x44>
    5da4:	d3 83       	std	Z+3, r29	; 0x03
    5da6:	c2 83       	std	Z+2, r28	; 0x02
    5da8:	40 81       	ld	r20, Z
    5daa:	51 81       	ldd	r21, Z+1	; 0x01
    5dac:	84 0f       	add	r24, r20
    5dae:	95 1f       	adc	r25, r21
    5db0:	c8 17       	cp	r28, r24
    5db2:	d9 07       	cpc	r29, r25
    5db4:	59 f4       	brne	.+22     	; 0x5dcc <free+0x82>
    5db6:	88 81       	ld	r24, Y
    5db8:	99 81       	ldd	r25, Y+1	; 0x01
    5dba:	84 0f       	add	r24, r20
    5dbc:	95 1f       	adc	r25, r21
    5dbe:	02 96       	adiw	r24, 0x02	; 2
    5dc0:	91 83       	std	Z+1, r25	; 0x01
    5dc2:	80 83       	st	Z, r24
    5dc4:	8a 81       	ldd	r24, Y+2	; 0x02
    5dc6:	9b 81       	ldd	r25, Y+3	; 0x03
    5dc8:	93 83       	std	Z+3, r25	; 0x03
    5dca:	82 83       	std	Z+2, r24	; 0x02
    5dcc:	21 15       	cp	r18, r1
    5dce:	31 05       	cpc	r19, r1
    5dd0:	29 f4       	brne	.+10     	; 0x5ddc <free+0x92>
    5dd2:	f0 93 60 1b 	sts	0x1B60, r31	; 0x801b60 <__flp+0x1>
    5dd6:	e0 93 5f 1b 	sts	0x1B5F, r30	; 0x801b5f <__flp>
    5dda:	3d c0       	rjmp	.+122    	; 0x5e56 <free+0x10c>
    5ddc:	e9 01       	movw	r28, r18
    5dde:	fb 83       	std	Y+3, r31	; 0x03
    5de0:	ea 83       	std	Y+2, r30	; 0x02
    5de2:	49 91       	ld	r20, Y+
    5de4:	59 91       	ld	r21, Y+
    5de6:	c4 0f       	add	r28, r20
    5de8:	d5 1f       	adc	r29, r21
    5dea:	ec 17       	cp	r30, r28
    5dec:	fd 07       	cpc	r31, r29
    5dee:	61 f4       	brne	.+24     	; 0x5e08 <free+0xbe>
    5df0:	80 81       	ld	r24, Z
    5df2:	91 81       	ldd	r25, Z+1	; 0x01
    5df4:	84 0f       	add	r24, r20
    5df6:	95 1f       	adc	r25, r21
    5df8:	02 96       	adiw	r24, 0x02	; 2
    5dfa:	e9 01       	movw	r28, r18
    5dfc:	99 83       	std	Y+1, r25	; 0x01
    5dfe:	88 83       	st	Y, r24
    5e00:	82 81       	ldd	r24, Z+2	; 0x02
    5e02:	93 81       	ldd	r25, Z+3	; 0x03
    5e04:	9b 83       	std	Y+3, r25	; 0x03
    5e06:	8a 83       	std	Y+2, r24	; 0x02
    5e08:	e0 e0       	ldi	r30, 0x00	; 0
    5e0a:	f0 e0       	ldi	r31, 0x00	; 0
    5e0c:	12 96       	adiw	r26, 0x02	; 2
    5e0e:	8d 91       	ld	r24, X+
    5e10:	9c 91       	ld	r25, X
    5e12:	13 97       	sbiw	r26, 0x03	; 3
    5e14:	00 97       	sbiw	r24, 0x00	; 0
    5e16:	19 f0       	breq	.+6      	; 0x5e1e <free+0xd4>
    5e18:	fd 01       	movw	r30, r26
    5e1a:	dc 01       	movw	r26, r24
    5e1c:	f7 cf       	rjmp	.-18     	; 0x5e0c <free+0xc2>
    5e1e:	8d 91       	ld	r24, X+
    5e20:	9c 91       	ld	r25, X
    5e22:	11 97       	sbiw	r26, 0x01	; 1
    5e24:	9d 01       	movw	r18, r26
    5e26:	2e 5f       	subi	r18, 0xFE	; 254
    5e28:	3f 4f       	sbci	r19, 0xFF	; 255
    5e2a:	82 0f       	add	r24, r18
    5e2c:	93 1f       	adc	r25, r19
    5e2e:	20 91 5d 1b 	lds	r18, 0x1B5D	; 0x801b5d <__brkval>
    5e32:	30 91 5e 1b 	lds	r19, 0x1B5E	; 0x801b5e <__brkval+0x1>
    5e36:	28 17       	cp	r18, r24
    5e38:	39 07       	cpc	r19, r25
    5e3a:	69 f4       	brne	.+26     	; 0x5e56 <free+0x10c>
    5e3c:	30 97       	sbiw	r30, 0x00	; 0
    5e3e:	29 f4       	brne	.+10     	; 0x5e4a <free+0x100>
    5e40:	10 92 60 1b 	sts	0x1B60, r1	; 0x801b60 <__flp+0x1>
    5e44:	10 92 5f 1b 	sts	0x1B5F, r1	; 0x801b5f <__flp>
    5e48:	02 c0       	rjmp	.+4      	; 0x5e4e <free+0x104>
    5e4a:	13 82       	std	Z+3, r1	; 0x03
    5e4c:	12 82       	std	Z+2, r1	; 0x02
    5e4e:	b0 93 5e 1b 	sts	0x1B5E, r27	; 0x801b5e <__brkval+0x1>
    5e52:	a0 93 5d 1b 	sts	0x1B5D, r26	; 0x801b5d <__brkval>
    5e56:	df 91       	pop	r29
    5e58:	cf 91       	pop	r28
    5e5a:	08 95       	ret

00005e5c <abort>:
    5e5c:	81 e0       	ldi	r24, 0x01	; 1
    5e5e:	90 e0       	ldi	r25, 0x00	; 0
    5e60:	f8 94       	cli
    5e62:	7d c3       	rjmp	.+1786   	; 0x655e <_exit>

00005e64 <memcpy>:
    5e64:	fb 01       	movw	r30, r22
    5e66:	dc 01       	movw	r26, r24
    5e68:	02 c0       	rjmp	.+4      	; 0x5e6e <memcpy+0xa>
    5e6a:	01 90       	ld	r0, Z+
    5e6c:	0d 92       	st	X+, r0
    5e6e:	41 50       	subi	r20, 0x01	; 1
    5e70:	50 40       	sbci	r21, 0x00	; 0
    5e72:	d8 f7       	brcc	.-10     	; 0x5e6a <memcpy+0x6>
    5e74:	08 95       	ret

00005e76 <memset>:
    5e76:	dc 01       	movw	r26, r24
    5e78:	01 c0       	rjmp	.+2      	; 0x5e7c <memset+0x6>
    5e7a:	6d 93       	st	X+, r22
    5e7c:	41 50       	subi	r20, 0x01	; 1
    5e7e:	50 40       	sbci	r21, 0x00	; 0
    5e80:	e0 f7       	brcc	.-8      	; 0x5e7a <memset+0x4>
    5e82:	08 95       	ret

00005e84 <strcasestr>:
    5e84:	fb 01       	movw	r30, r22
    5e86:	51 91       	ld	r21, Z+
    5e88:	55 23       	and	r21, r21
    5e8a:	b1 f0       	breq	.+44     	; 0x5eb8 <strcasestr+0x34>
    5e8c:	bf 01       	movw	r22, r30
    5e8e:	dc 01       	movw	r26, r24
    5e90:	05 2e       	mov	r0, r21
    5e92:	4d 91       	ld	r20, X+
    5e94:	44 23       	and	r20, r20
    5e96:	69 f0       	breq	.+26     	; 0x5eb2 <strcasestr+0x2e>
    5e98:	10 d0       	rcall	.+32     	; 0x5eba <strcasestr+0x36>
    5e9a:	d9 f7       	brne	.-10     	; 0x5e92 <strcasestr+0xe>
    5e9c:	cd 01       	movw	r24, r26
    5e9e:	01 90       	ld	r0, Z+
    5ea0:	00 20       	and	r0, r0
    5ea2:	49 f0       	breq	.+18     	; 0x5eb6 <strcasestr+0x32>
    5ea4:	4d 91       	ld	r20, X+
    5ea6:	41 11       	cpse	r20, r1
    5ea8:	08 d0       	rcall	.+16     	; 0x5eba <strcasestr+0x36>
    5eaa:	c9 f3       	breq	.-14     	; 0x5e9e <strcasestr+0x1a>
    5eac:	fb 01       	movw	r30, r22
    5eae:	41 11       	cpse	r20, r1
    5eb0:	ee cf       	rjmp	.-36     	; 0x5e8e <strcasestr+0xa>
    5eb2:	81 e0       	ldi	r24, 0x01	; 1
    5eb4:	90 e0       	ldi	r25, 0x00	; 0
    5eb6:	01 97       	sbiw	r24, 0x01	; 1
    5eb8:	08 95       	ret
    5eba:	40 25       	eor	r20, r0
    5ebc:	39 f0       	breq	.+14     	; 0x5ecc <strcasestr+0x48>
    5ebe:	40 32       	cpi	r20, 0x20	; 32
    5ec0:	29 f4       	brne	.+10     	; 0x5ecc <strcasestr+0x48>
    5ec2:	40 29       	or	r20, r0
    5ec4:	4b 57       	subi	r20, 0x7B	; 123
    5ec6:	46 5e       	subi	r20, 0xE6	; 230
    5ec8:	08 f0       	brcs	.+2      	; 0x5ecc <strcasestr+0x48>
    5eca:	18 94       	sez
    5ecc:	08 95       	ret

00005ece <strcat>:
    5ece:	fb 01       	movw	r30, r22
    5ed0:	dc 01       	movw	r26, r24
    5ed2:	0d 90       	ld	r0, X+
    5ed4:	00 20       	and	r0, r0
    5ed6:	e9 f7       	brne	.-6      	; 0x5ed2 <strcat+0x4>
    5ed8:	11 97       	sbiw	r26, 0x01	; 1
    5eda:	01 90       	ld	r0, Z+
    5edc:	0d 92       	st	X+, r0
    5ede:	00 20       	and	r0, r0
    5ee0:	e1 f7       	brne	.-8      	; 0x5eda <strcat+0xc>
    5ee2:	08 95       	ret

00005ee4 <strcpy>:
    5ee4:	fb 01       	movw	r30, r22
    5ee6:	dc 01       	movw	r26, r24
    5ee8:	01 90       	ld	r0, Z+
    5eea:	0d 92       	st	X+, r0
    5eec:	00 20       	and	r0, r0
    5eee:	e1 f7       	brne	.-8      	; 0x5ee8 <strcpy+0x4>
    5ef0:	08 95       	ret

00005ef2 <strncasecmp>:
    5ef2:	fb 01       	movw	r30, r22
    5ef4:	dc 01       	movw	r26, r24
    5ef6:	41 50       	subi	r20, 0x01	; 1
    5ef8:	50 40       	sbci	r21, 0x00	; 0
    5efa:	88 f0       	brcs	.+34     	; 0x5f1e <strncasecmp+0x2c>
    5efc:	8d 91       	ld	r24, X+
    5efe:	81 34       	cpi	r24, 0x41	; 65
    5f00:	1c f0       	brlt	.+6      	; 0x5f08 <strncasecmp+0x16>
    5f02:	8b 35       	cpi	r24, 0x5B	; 91
    5f04:	0c f4       	brge	.+2      	; 0x5f08 <strncasecmp+0x16>
    5f06:	80 5e       	subi	r24, 0xE0	; 224
    5f08:	61 91       	ld	r22, Z+
    5f0a:	61 34       	cpi	r22, 0x41	; 65
    5f0c:	1c f0       	brlt	.+6      	; 0x5f14 <strncasecmp+0x22>
    5f0e:	6b 35       	cpi	r22, 0x5B	; 91
    5f10:	0c f4       	brge	.+2      	; 0x5f14 <strncasecmp+0x22>
    5f12:	60 5e       	subi	r22, 0xE0	; 224
    5f14:	86 1b       	sub	r24, r22
    5f16:	61 11       	cpse	r22, r1
    5f18:	71 f3       	breq	.-36     	; 0x5ef6 <strncasecmp+0x4>
    5f1a:	99 0b       	sbc	r25, r25
    5f1c:	08 95       	ret
    5f1e:	88 1b       	sub	r24, r24
    5f20:	fc cf       	rjmp	.-8      	; 0x5f1a <strncasecmp+0x28>

00005f22 <printf>:
    5f22:	cf 93       	push	r28
    5f24:	df 93       	push	r29
    5f26:	cd b7       	in	r28, 0x3d	; 61
    5f28:	de b7       	in	r29, 0x3e	; 62
    5f2a:	ae 01       	movw	r20, r28
    5f2c:	4a 5f       	subi	r20, 0xFA	; 250
    5f2e:	5f 4f       	sbci	r21, 0xFF	; 255
    5f30:	fa 01       	movw	r30, r20
    5f32:	61 91       	ld	r22, Z+
    5f34:	71 91       	ld	r23, Z+
    5f36:	af 01       	movw	r20, r30
    5f38:	80 91 63 1b 	lds	r24, 0x1B63	; 0x801b63 <__iob+0x2>
    5f3c:	90 91 64 1b 	lds	r25, 0x1B64	; 0x801b64 <__iob+0x3>
    5f40:	61 d0       	rcall	.+194    	; 0x6004 <vfprintf>
    5f42:	df 91       	pop	r29
    5f44:	cf 91       	pop	r28
    5f46:	08 95       	ret

00005f48 <puts>:
    5f48:	0f 93       	push	r16
    5f4a:	1f 93       	push	r17
    5f4c:	cf 93       	push	r28
    5f4e:	df 93       	push	r29
    5f50:	e0 91 63 1b 	lds	r30, 0x1B63	; 0x801b63 <__iob+0x2>
    5f54:	f0 91 64 1b 	lds	r31, 0x1B64	; 0x801b64 <__iob+0x3>
    5f58:	23 81       	ldd	r18, Z+3	; 0x03
    5f5a:	21 ff       	sbrs	r18, 1
    5f5c:	1b c0       	rjmp	.+54     	; 0x5f94 <puts+0x4c>
    5f5e:	8c 01       	movw	r16, r24
    5f60:	d0 e0       	ldi	r29, 0x00	; 0
    5f62:	c0 e0       	ldi	r28, 0x00	; 0
    5f64:	f8 01       	movw	r30, r16
    5f66:	81 91       	ld	r24, Z+
    5f68:	8f 01       	movw	r16, r30
    5f6a:	60 91 63 1b 	lds	r22, 0x1B63	; 0x801b63 <__iob+0x2>
    5f6e:	70 91 64 1b 	lds	r23, 0x1B64	; 0x801b64 <__iob+0x3>
    5f72:	db 01       	movw	r26, r22
    5f74:	18 96       	adiw	r26, 0x08	; 8
    5f76:	ed 91       	ld	r30, X+
    5f78:	fc 91       	ld	r31, X
    5f7a:	19 97       	sbiw	r26, 0x09	; 9
    5f7c:	88 23       	and	r24, r24
    5f7e:	31 f0       	breq	.+12     	; 0x5f8c <puts+0x44>
    5f80:	19 95       	eicall
    5f82:	89 2b       	or	r24, r25
    5f84:	79 f3       	breq	.-34     	; 0x5f64 <puts+0x1c>
    5f86:	df ef       	ldi	r29, 0xFF	; 255
    5f88:	cf ef       	ldi	r28, 0xFF	; 255
    5f8a:	ec cf       	rjmp	.-40     	; 0x5f64 <puts+0x1c>
    5f8c:	8a e0       	ldi	r24, 0x0A	; 10
    5f8e:	19 95       	eicall
    5f90:	89 2b       	or	r24, r25
    5f92:	19 f0       	breq	.+6      	; 0x5f9a <puts+0x52>
    5f94:	8f ef       	ldi	r24, 0xFF	; 255
    5f96:	9f ef       	ldi	r25, 0xFF	; 255
    5f98:	02 c0       	rjmp	.+4      	; 0x5f9e <puts+0x56>
    5f9a:	8d 2f       	mov	r24, r29
    5f9c:	9c 2f       	mov	r25, r28
    5f9e:	df 91       	pop	r29
    5fa0:	cf 91       	pop	r28
    5fa2:	1f 91       	pop	r17
    5fa4:	0f 91       	pop	r16
    5fa6:	08 95       	ret

00005fa8 <sprintf>:
    5fa8:	0f 93       	push	r16
    5faa:	1f 93       	push	r17
    5fac:	cf 93       	push	r28
    5fae:	df 93       	push	r29
    5fb0:	cd b7       	in	r28, 0x3d	; 61
    5fb2:	de b7       	in	r29, 0x3e	; 62
    5fb4:	2e 97       	sbiw	r28, 0x0e	; 14
    5fb6:	0f b6       	in	r0, 0x3f	; 63
    5fb8:	f8 94       	cli
    5fba:	de bf       	out	0x3e, r29	; 62
    5fbc:	0f be       	out	0x3f, r0	; 63
    5fbe:	cd bf       	out	0x3d, r28	; 61
    5fc0:	0e 89       	ldd	r16, Y+22	; 0x16
    5fc2:	1f 89       	ldd	r17, Y+23	; 0x17
    5fc4:	86 e0       	ldi	r24, 0x06	; 6
    5fc6:	8c 83       	std	Y+4, r24	; 0x04
    5fc8:	1a 83       	std	Y+2, r17	; 0x02
    5fca:	09 83       	std	Y+1, r16	; 0x01
    5fcc:	8f ef       	ldi	r24, 0xFF	; 255
    5fce:	9f e7       	ldi	r25, 0x7F	; 127
    5fd0:	9e 83       	std	Y+6, r25	; 0x06
    5fd2:	8d 83       	std	Y+5, r24	; 0x05
    5fd4:	ae 01       	movw	r20, r28
    5fd6:	46 5e       	subi	r20, 0xE6	; 230
    5fd8:	5f 4f       	sbci	r21, 0xFF	; 255
    5fda:	68 8d       	ldd	r22, Y+24	; 0x18
    5fdc:	79 8d       	ldd	r23, Y+25	; 0x19
    5fde:	ce 01       	movw	r24, r28
    5fe0:	01 96       	adiw	r24, 0x01	; 1
    5fe2:	10 d0       	rcall	.+32     	; 0x6004 <vfprintf>
    5fe4:	ef 81       	ldd	r30, Y+7	; 0x07
    5fe6:	f8 85       	ldd	r31, Y+8	; 0x08
    5fe8:	e0 0f       	add	r30, r16
    5fea:	f1 1f       	adc	r31, r17
    5fec:	10 82       	st	Z, r1
    5fee:	2e 96       	adiw	r28, 0x0e	; 14
    5ff0:	0f b6       	in	r0, 0x3f	; 63
    5ff2:	f8 94       	cli
    5ff4:	de bf       	out	0x3e, r29	; 62
    5ff6:	0f be       	out	0x3f, r0	; 63
    5ff8:	cd bf       	out	0x3d, r28	; 61
    5ffa:	df 91       	pop	r29
    5ffc:	cf 91       	pop	r28
    5ffe:	1f 91       	pop	r17
    6000:	0f 91       	pop	r16
    6002:	08 95       	ret

00006004 <vfprintf>:
    6004:	2f 92       	push	r2
    6006:	3f 92       	push	r3
    6008:	4f 92       	push	r4
    600a:	5f 92       	push	r5
    600c:	6f 92       	push	r6
    600e:	7f 92       	push	r7
    6010:	8f 92       	push	r8
    6012:	9f 92       	push	r9
    6014:	af 92       	push	r10
    6016:	bf 92       	push	r11
    6018:	cf 92       	push	r12
    601a:	df 92       	push	r13
    601c:	ef 92       	push	r14
    601e:	ff 92       	push	r15
    6020:	0f 93       	push	r16
    6022:	1f 93       	push	r17
    6024:	cf 93       	push	r28
    6026:	df 93       	push	r29
    6028:	cd b7       	in	r28, 0x3d	; 61
    602a:	de b7       	in	r29, 0x3e	; 62
    602c:	2b 97       	sbiw	r28, 0x0b	; 11
    602e:	0f b6       	in	r0, 0x3f	; 63
    6030:	f8 94       	cli
    6032:	de bf       	out	0x3e, r29	; 62
    6034:	0f be       	out	0x3f, r0	; 63
    6036:	cd bf       	out	0x3d, r28	; 61
    6038:	6c 01       	movw	r12, r24
    603a:	7b 01       	movw	r14, r22
    603c:	8a 01       	movw	r16, r20
    603e:	fc 01       	movw	r30, r24
    6040:	17 82       	std	Z+7, r1	; 0x07
    6042:	16 82       	std	Z+6, r1	; 0x06
    6044:	83 81       	ldd	r24, Z+3	; 0x03
    6046:	81 ff       	sbrs	r24, 1
    6048:	bf c1       	rjmp	.+894    	; 0x63c8 <vfprintf+0x3c4>
    604a:	ce 01       	movw	r24, r28
    604c:	01 96       	adiw	r24, 0x01	; 1
    604e:	3c 01       	movw	r6, r24
    6050:	f6 01       	movw	r30, r12
    6052:	93 81       	ldd	r25, Z+3	; 0x03
    6054:	f7 01       	movw	r30, r14
    6056:	93 fd       	sbrc	r25, 3
    6058:	85 91       	lpm	r24, Z+
    605a:	93 ff       	sbrs	r25, 3
    605c:	81 91       	ld	r24, Z+
    605e:	7f 01       	movw	r14, r30
    6060:	88 23       	and	r24, r24
    6062:	09 f4       	brne	.+2      	; 0x6066 <vfprintf+0x62>
    6064:	ad c1       	rjmp	.+858    	; 0x63c0 <vfprintf+0x3bc>
    6066:	85 32       	cpi	r24, 0x25	; 37
    6068:	39 f4       	brne	.+14     	; 0x6078 <vfprintf+0x74>
    606a:	93 fd       	sbrc	r25, 3
    606c:	85 91       	lpm	r24, Z+
    606e:	93 ff       	sbrs	r25, 3
    6070:	81 91       	ld	r24, Z+
    6072:	7f 01       	movw	r14, r30
    6074:	85 32       	cpi	r24, 0x25	; 37
    6076:	21 f4       	brne	.+8      	; 0x6080 <vfprintf+0x7c>
    6078:	b6 01       	movw	r22, r12
    607a:	90 e0       	ldi	r25, 0x00	; 0
    607c:	d6 d1       	rcall	.+940    	; 0x642a <fputc>
    607e:	e8 cf       	rjmp	.-48     	; 0x6050 <vfprintf+0x4c>
    6080:	91 2c       	mov	r9, r1
    6082:	21 2c       	mov	r2, r1
    6084:	31 2c       	mov	r3, r1
    6086:	ff e1       	ldi	r31, 0x1F	; 31
    6088:	f3 15       	cp	r31, r3
    608a:	d8 f0       	brcs	.+54     	; 0x60c2 <vfprintf+0xbe>
    608c:	8b 32       	cpi	r24, 0x2B	; 43
    608e:	79 f0       	breq	.+30     	; 0x60ae <vfprintf+0xaa>
    6090:	38 f4       	brcc	.+14     	; 0x60a0 <vfprintf+0x9c>
    6092:	80 32       	cpi	r24, 0x20	; 32
    6094:	79 f0       	breq	.+30     	; 0x60b4 <vfprintf+0xb0>
    6096:	83 32       	cpi	r24, 0x23	; 35
    6098:	a1 f4       	brne	.+40     	; 0x60c2 <vfprintf+0xbe>
    609a:	23 2d       	mov	r18, r3
    609c:	20 61       	ori	r18, 0x10	; 16
    609e:	1d c0       	rjmp	.+58     	; 0x60da <vfprintf+0xd6>
    60a0:	8d 32       	cpi	r24, 0x2D	; 45
    60a2:	61 f0       	breq	.+24     	; 0x60bc <vfprintf+0xb8>
    60a4:	80 33       	cpi	r24, 0x30	; 48
    60a6:	69 f4       	brne	.+26     	; 0x60c2 <vfprintf+0xbe>
    60a8:	23 2d       	mov	r18, r3
    60aa:	21 60       	ori	r18, 0x01	; 1
    60ac:	16 c0       	rjmp	.+44     	; 0x60da <vfprintf+0xd6>
    60ae:	83 2d       	mov	r24, r3
    60b0:	82 60       	ori	r24, 0x02	; 2
    60b2:	38 2e       	mov	r3, r24
    60b4:	e3 2d       	mov	r30, r3
    60b6:	e4 60       	ori	r30, 0x04	; 4
    60b8:	3e 2e       	mov	r3, r30
    60ba:	2a c0       	rjmp	.+84     	; 0x6110 <vfprintf+0x10c>
    60bc:	f3 2d       	mov	r31, r3
    60be:	f8 60       	ori	r31, 0x08	; 8
    60c0:	1d c0       	rjmp	.+58     	; 0x60fc <vfprintf+0xf8>
    60c2:	37 fc       	sbrc	r3, 7
    60c4:	2d c0       	rjmp	.+90     	; 0x6120 <vfprintf+0x11c>
    60c6:	20 ed       	ldi	r18, 0xD0	; 208
    60c8:	28 0f       	add	r18, r24
    60ca:	2a 30       	cpi	r18, 0x0A	; 10
    60cc:	40 f0       	brcs	.+16     	; 0x60de <vfprintf+0xda>
    60ce:	8e 32       	cpi	r24, 0x2E	; 46
    60d0:	b9 f4       	brne	.+46     	; 0x6100 <vfprintf+0xfc>
    60d2:	36 fc       	sbrc	r3, 6
    60d4:	75 c1       	rjmp	.+746    	; 0x63c0 <vfprintf+0x3bc>
    60d6:	23 2d       	mov	r18, r3
    60d8:	20 64       	ori	r18, 0x40	; 64
    60da:	32 2e       	mov	r3, r18
    60dc:	19 c0       	rjmp	.+50     	; 0x6110 <vfprintf+0x10c>
    60de:	36 fe       	sbrs	r3, 6
    60e0:	06 c0       	rjmp	.+12     	; 0x60ee <vfprintf+0xea>
    60e2:	8a e0       	ldi	r24, 0x0A	; 10
    60e4:	98 9e       	mul	r9, r24
    60e6:	20 0d       	add	r18, r0
    60e8:	11 24       	eor	r1, r1
    60ea:	92 2e       	mov	r9, r18
    60ec:	11 c0       	rjmp	.+34     	; 0x6110 <vfprintf+0x10c>
    60ee:	ea e0       	ldi	r30, 0x0A	; 10
    60f0:	2e 9e       	mul	r2, r30
    60f2:	20 0d       	add	r18, r0
    60f4:	11 24       	eor	r1, r1
    60f6:	22 2e       	mov	r2, r18
    60f8:	f3 2d       	mov	r31, r3
    60fa:	f0 62       	ori	r31, 0x20	; 32
    60fc:	3f 2e       	mov	r3, r31
    60fe:	08 c0       	rjmp	.+16     	; 0x6110 <vfprintf+0x10c>
    6100:	8c 36       	cpi	r24, 0x6C	; 108
    6102:	21 f4       	brne	.+8      	; 0x610c <vfprintf+0x108>
    6104:	83 2d       	mov	r24, r3
    6106:	80 68       	ori	r24, 0x80	; 128
    6108:	38 2e       	mov	r3, r24
    610a:	02 c0       	rjmp	.+4      	; 0x6110 <vfprintf+0x10c>
    610c:	88 36       	cpi	r24, 0x68	; 104
    610e:	41 f4       	brne	.+16     	; 0x6120 <vfprintf+0x11c>
    6110:	f7 01       	movw	r30, r14
    6112:	93 fd       	sbrc	r25, 3
    6114:	85 91       	lpm	r24, Z+
    6116:	93 ff       	sbrs	r25, 3
    6118:	81 91       	ld	r24, Z+
    611a:	7f 01       	movw	r14, r30
    611c:	81 11       	cpse	r24, r1
    611e:	b3 cf       	rjmp	.-154    	; 0x6086 <vfprintf+0x82>
    6120:	98 2f       	mov	r25, r24
    6122:	9f 7d       	andi	r25, 0xDF	; 223
    6124:	95 54       	subi	r25, 0x45	; 69
    6126:	93 30       	cpi	r25, 0x03	; 3
    6128:	28 f4       	brcc	.+10     	; 0x6134 <vfprintf+0x130>
    612a:	0c 5f       	subi	r16, 0xFC	; 252
    612c:	1f 4f       	sbci	r17, 0xFF	; 255
    612e:	9f e3       	ldi	r25, 0x3F	; 63
    6130:	99 83       	std	Y+1, r25	; 0x01
    6132:	0d c0       	rjmp	.+26     	; 0x614e <vfprintf+0x14a>
    6134:	83 36       	cpi	r24, 0x63	; 99
    6136:	31 f0       	breq	.+12     	; 0x6144 <vfprintf+0x140>
    6138:	83 37       	cpi	r24, 0x73	; 115
    613a:	71 f0       	breq	.+28     	; 0x6158 <vfprintf+0x154>
    613c:	83 35       	cpi	r24, 0x53	; 83
    613e:	09 f0       	breq	.+2      	; 0x6142 <vfprintf+0x13e>
    6140:	55 c0       	rjmp	.+170    	; 0x61ec <vfprintf+0x1e8>
    6142:	20 c0       	rjmp	.+64     	; 0x6184 <vfprintf+0x180>
    6144:	f8 01       	movw	r30, r16
    6146:	80 81       	ld	r24, Z
    6148:	89 83       	std	Y+1, r24	; 0x01
    614a:	0e 5f       	subi	r16, 0xFE	; 254
    614c:	1f 4f       	sbci	r17, 0xFF	; 255
    614e:	88 24       	eor	r8, r8
    6150:	83 94       	inc	r8
    6152:	91 2c       	mov	r9, r1
    6154:	53 01       	movw	r10, r6
    6156:	12 c0       	rjmp	.+36     	; 0x617c <vfprintf+0x178>
    6158:	28 01       	movw	r4, r16
    615a:	f2 e0       	ldi	r31, 0x02	; 2
    615c:	4f 0e       	add	r4, r31
    615e:	51 1c       	adc	r5, r1
    6160:	f8 01       	movw	r30, r16
    6162:	a0 80       	ld	r10, Z
    6164:	b1 80       	ldd	r11, Z+1	; 0x01
    6166:	36 fe       	sbrs	r3, 6
    6168:	03 c0       	rjmp	.+6      	; 0x6170 <vfprintf+0x16c>
    616a:	69 2d       	mov	r22, r9
    616c:	70 e0       	ldi	r23, 0x00	; 0
    616e:	02 c0       	rjmp	.+4      	; 0x6174 <vfprintf+0x170>
    6170:	6f ef       	ldi	r22, 0xFF	; 255
    6172:	7f ef       	ldi	r23, 0xFF	; 255
    6174:	c5 01       	movw	r24, r10
    6176:	4e d1       	rcall	.+668    	; 0x6414 <strnlen>
    6178:	4c 01       	movw	r8, r24
    617a:	82 01       	movw	r16, r4
    617c:	f3 2d       	mov	r31, r3
    617e:	ff 77       	andi	r31, 0x7F	; 127
    6180:	3f 2e       	mov	r3, r31
    6182:	15 c0       	rjmp	.+42     	; 0x61ae <vfprintf+0x1aa>
    6184:	28 01       	movw	r4, r16
    6186:	22 e0       	ldi	r18, 0x02	; 2
    6188:	42 0e       	add	r4, r18
    618a:	51 1c       	adc	r5, r1
    618c:	f8 01       	movw	r30, r16
    618e:	a0 80       	ld	r10, Z
    6190:	b1 80       	ldd	r11, Z+1	; 0x01
    6192:	36 fe       	sbrs	r3, 6
    6194:	03 c0       	rjmp	.+6      	; 0x619c <vfprintf+0x198>
    6196:	69 2d       	mov	r22, r9
    6198:	70 e0       	ldi	r23, 0x00	; 0
    619a:	02 c0       	rjmp	.+4      	; 0x61a0 <vfprintf+0x19c>
    619c:	6f ef       	ldi	r22, 0xFF	; 255
    619e:	7f ef       	ldi	r23, 0xFF	; 255
    61a0:	c5 01       	movw	r24, r10
    61a2:	2d d1       	rcall	.+602    	; 0x63fe <strnlen_P>
    61a4:	4c 01       	movw	r8, r24
    61a6:	f3 2d       	mov	r31, r3
    61a8:	f0 68       	ori	r31, 0x80	; 128
    61aa:	3f 2e       	mov	r3, r31
    61ac:	82 01       	movw	r16, r4
    61ae:	33 fc       	sbrc	r3, 3
    61b0:	19 c0       	rjmp	.+50     	; 0x61e4 <vfprintf+0x1e0>
    61b2:	82 2d       	mov	r24, r2
    61b4:	90 e0       	ldi	r25, 0x00	; 0
    61b6:	88 16       	cp	r8, r24
    61b8:	99 06       	cpc	r9, r25
    61ba:	a0 f4       	brcc	.+40     	; 0x61e4 <vfprintf+0x1e0>
    61bc:	b6 01       	movw	r22, r12
    61be:	80 e2       	ldi	r24, 0x20	; 32
    61c0:	90 e0       	ldi	r25, 0x00	; 0
    61c2:	33 d1       	rcall	.+614    	; 0x642a <fputc>
    61c4:	2a 94       	dec	r2
    61c6:	f5 cf       	rjmp	.-22     	; 0x61b2 <vfprintf+0x1ae>
    61c8:	f5 01       	movw	r30, r10
    61ca:	37 fc       	sbrc	r3, 7
    61cc:	85 91       	lpm	r24, Z+
    61ce:	37 fe       	sbrs	r3, 7
    61d0:	81 91       	ld	r24, Z+
    61d2:	5f 01       	movw	r10, r30
    61d4:	b6 01       	movw	r22, r12
    61d6:	90 e0       	ldi	r25, 0x00	; 0
    61d8:	28 d1       	rcall	.+592    	; 0x642a <fputc>
    61da:	21 10       	cpse	r2, r1
    61dc:	2a 94       	dec	r2
    61de:	21 e0       	ldi	r18, 0x01	; 1
    61e0:	82 1a       	sub	r8, r18
    61e2:	91 08       	sbc	r9, r1
    61e4:	81 14       	cp	r8, r1
    61e6:	91 04       	cpc	r9, r1
    61e8:	79 f7       	brne	.-34     	; 0x61c8 <vfprintf+0x1c4>
    61ea:	e1 c0       	rjmp	.+450    	; 0x63ae <vfprintf+0x3aa>
    61ec:	84 36       	cpi	r24, 0x64	; 100
    61ee:	11 f0       	breq	.+4      	; 0x61f4 <vfprintf+0x1f0>
    61f0:	89 36       	cpi	r24, 0x69	; 105
    61f2:	39 f5       	brne	.+78     	; 0x6242 <vfprintf+0x23e>
    61f4:	f8 01       	movw	r30, r16
    61f6:	37 fe       	sbrs	r3, 7
    61f8:	07 c0       	rjmp	.+14     	; 0x6208 <vfprintf+0x204>
    61fa:	60 81       	ld	r22, Z
    61fc:	71 81       	ldd	r23, Z+1	; 0x01
    61fe:	82 81       	ldd	r24, Z+2	; 0x02
    6200:	93 81       	ldd	r25, Z+3	; 0x03
    6202:	0c 5f       	subi	r16, 0xFC	; 252
    6204:	1f 4f       	sbci	r17, 0xFF	; 255
    6206:	08 c0       	rjmp	.+16     	; 0x6218 <vfprintf+0x214>
    6208:	60 81       	ld	r22, Z
    620a:	71 81       	ldd	r23, Z+1	; 0x01
    620c:	07 2e       	mov	r0, r23
    620e:	00 0c       	add	r0, r0
    6210:	88 0b       	sbc	r24, r24
    6212:	99 0b       	sbc	r25, r25
    6214:	0e 5f       	subi	r16, 0xFE	; 254
    6216:	1f 4f       	sbci	r17, 0xFF	; 255
    6218:	f3 2d       	mov	r31, r3
    621a:	ff 76       	andi	r31, 0x6F	; 111
    621c:	3f 2e       	mov	r3, r31
    621e:	97 ff       	sbrs	r25, 7
    6220:	09 c0       	rjmp	.+18     	; 0x6234 <vfprintf+0x230>
    6222:	90 95       	com	r25
    6224:	80 95       	com	r24
    6226:	70 95       	com	r23
    6228:	61 95       	neg	r22
    622a:	7f 4f       	sbci	r23, 0xFF	; 255
    622c:	8f 4f       	sbci	r24, 0xFF	; 255
    622e:	9f 4f       	sbci	r25, 0xFF	; 255
    6230:	f0 68       	ori	r31, 0x80	; 128
    6232:	3f 2e       	mov	r3, r31
    6234:	2a e0       	ldi	r18, 0x0A	; 10
    6236:	30 e0       	ldi	r19, 0x00	; 0
    6238:	a3 01       	movw	r20, r6
    623a:	33 d1       	rcall	.+614    	; 0x64a2 <__ultoa_invert>
    623c:	88 2e       	mov	r8, r24
    623e:	86 18       	sub	r8, r6
    6240:	44 c0       	rjmp	.+136    	; 0x62ca <vfprintf+0x2c6>
    6242:	85 37       	cpi	r24, 0x75	; 117
    6244:	31 f4       	brne	.+12     	; 0x6252 <vfprintf+0x24e>
    6246:	23 2d       	mov	r18, r3
    6248:	2f 7e       	andi	r18, 0xEF	; 239
    624a:	b2 2e       	mov	r11, r18
    624c:	2a e0       	ldi	r18, 0x0A	; 10
    624e:	30 e0       	ldi	r19, 0x00	; 0
    6250:	25 c0       	rjmp	.+74     	; 0x629c <vfprintf+0x298>
    6252:	93 2d       	mov	r25, r3
    6254:	99 7f       	andi	r25, 0xF9	; 249
    6256:	b9 2e       	mov	r11, r25
    6258:	8f 36       	cpi	r24, 0x6F	; 111
    625a:	c1 f0       	breq	.+48     	; 0x628c <vfprintf+0x288>
    625c:	18 f4       	brcc	.+6      	; 0x6264 <vfprintf+0x260>
    625e:	88 35       	cpi	r24, 0x58	; 88
    6260:	79 f0       	breq	.+30     	; 0x6280 <vfprintf+0x27c>
    6262:	ae c0       	rjmp	.+348    	; 0x63c0 <vfprintf+0x3bc>
    6264:	80 37       	cpi	r24, 0x70	; 112
    6266:	19 f0       	breq	.+6      	; 0x626e <vfprintf+0x26a>
    6268:	88 37       	cpi	r24, 0x78	; 120
    626a:	21 f0       	breq	.+8      	; 0x6274 <vfprintf+0x270>
    626c:	a9 c0       	rjmp	.+338    	; 0x63c0 <vfprintf+0x3bc>
    626e:	e9 2f       	mov	r30, r25
    6270:	e0 61       	ori	r30, 0x10	; 16
    6272:	be 2e       	mov	r11, r30
    6274:	b4 fe       	sbrs	r11, 4
    6276:	0d c0       	rjmp	.+26     	; 0x6292 <vfprintf+0x28e>
    6278:	fb 2d       	mov	r31, r11
    627a:	f4 60       	ori	r31, 0x04	; 4
    627c:	bf 2e       	mov	r11, r31
    627e:	09 c0       	rjmp	.+18     	; 0x6292 <vfprintf+0x28e>
    6280:	34 fe       	sbrs	r3, 4
    6282:	0a c0       	rjmp	.+20     	; 0x6298 <vfprintf+0x294>
    6284:	29 2f       	mov	r18, r25
    6286:	26 60       	ori	r18, 0x06	; 6
    6288:	b2 2e       	mov	r11, r18
    628a:	06 c0       	rjmp	.+12     	; 0x6298 <vfprintf+0x294>
    628c:	28 e0       	ldi	r18, 0x08	; 8
    628e:	30 e0       	ldi	r19, 0x00	; 0
    6290:	05 c0       	rjmp	.+10     	; 0x629c <vfprintf+0x298>
    6292:	20 e1       	ldi	r18, 0x10	; 16
    6294:	30 e0       	ldi	r19, 0x00	; 0
    6296:	02 c0       	rjmp	.+4      	; 0x629c <vfprintf+0x298>
    6298:	20 e1       	ldi	r18, 0x10	; 16
    629a:	32 e0       	ldi	r19, 0x02	; 2
    629c:	f8 01       	movw	r30, r16
    629e:	b7 fe       	sbrs	r11, 7
    62a0:	07 c0       	rjmp	.+14     	; 0x62b0 <vfprintf+0x2ac>
    62a2:	60 81       	ld	r22, Z
    62a4:	71 81       	ldd	r23, Z+1	; 0x01
    62a6:	82 81       	ldd	r24, Z+2	; 0x02
    62a8:	93 81       	ldd	r25, Z+3	; 0x03
    62aa:	0c 5f       	subi	r16, 0xFC	; 252
    62ac:	1f 4f       	sbci	r17, 0xFF	; 255
    62ae:	06 c0       	rjmp	.+12     	; 0x62bc <vfprintf+0x2b8>
    62b0:	60 81       	ld	r22, Z
    62b2:	71 81       	ldd	r23, Z+1	; 0x01
    62b4:	80 e0       	ldi	r24, 0x00	; 0
    62b6:	90 e0       	ldi	r25, 0x00	; 0
    62b8:	0e 5f       	subi	r16, 0xFE	; 254
    62ba:	1f 4f       	sbci	r17, 0xFF	; 255
    62bc:	a3 01       	movw	r20, r6
    62be:	f1 d0       	rcall	.+482    	; 0x64a2 <__ultoa_invert>
    62c0:	88 2e       	mov	r8, r24
    62c2:	86 18       	sub	r8, r6
    62c4:	fb 2d       	mov	r31, r11
    62c6:	ff 77       	andi	r31, 0x7F	; 127
    62c8:	3f 2e       	mov	r3, r31
    62ca:	36 fe       	sbrs	r3, 6
    62cc:	0d c0       	rjmp	.+26     	; 0x62e8 <vfprintf+0x2e4>
    62ce:	23 2d       	mov	r18, r3
    62d0:	2e 7f       	andi	r18, 0xFE	; 254
    62d2:	a2 2e       	mov	r10, r18
    62d4:	89 14       	cp	r8, r9
    62d6:	58 f4       	brcc	.+22     	; 0x62ee <vfprintf+0x2ea>
    62d8:	34 fe       	sbrs	r3, 4
    62da:	0b c0       	rjmp	.+22     	; 0x62f2 <vfprintf+0x2ee>
    62dc:	32 fc       	sbrc	r3, 2
    62de:	09 c0       	rjmp	.+18     	; 0x62f2 <vfprintf+0x2ee>
    62e0:	83 2d       	mov	r24, r3
    62e2:	8e 7e       	andi	r24, 0xEE	; 238
    62e4:	a8 2e       	mov	r10, r24
    62e6:	05 c0       	rjmp	.+10     	; 0x62f2 <vfprintf+0x2ee>
    62e8:	b8 2c       	mov	r11, r8
    62ea:	a3 2c       	mov	r10, r3
    62ec:	03 c0       	rjmp	.+6      	; 0x62f4 <vfprintf+0x2f0>
    62ee:	b8 2c       	mov	r11, r8
    62f0:	01 c0       	rjmp	.+2      	; 0x62f4 <vfprintf+0x2f0>
    62f2:	b9 2c       	mov	r11, r9
    62f4:	a4 fe       	sbrs	r10, 4
    62f6:	0f c0       	rjmp	.+30     	; 0x6316 <vfprintf+0x312>
    62f8:	fe 01       	movw	r30, r28
    62fa:	e8 0d       	add	r30, r8
    62fc:	f1 1d       	adc	r31, r1
    62fe:	80 81       	ld	r24, Z
    6300:	80 33       	cpi	r24, 0x30	; 48
    6302:	21 f4       	brne	.+8      	; 0x630c <vfprintf+0x308>
    6304:	9a 2d       	mov	r25, r10
    6306:	99 7e       	andi	r25, 0xE9	; 233
    6308:	a9 2e       	mov	r10, r25
    630a:	09 c0       	rjmp	.+18     	; 0x631e <vfprintf+0x31a>
    630c:	a2 fe       	sbrs	r10, 2
    630e:	06 c0       	rjmp	.+12     	; 0x631c <vfprintf+0x318>
    6310:	b3 94       	inc	r11
    6312:	b3 94       	inc	r11
    6314:	04 c0       	rjmp	.+8      	; 0x631e <vfprintf+0x31a>
    6316:	8a 2d       	mov	r24, r10
    6318:	86 78       	andi	r24, 0x86	; 134
    631a:	09 f0       	breq	.+2      	; 0x631e <vfprintf+0x31a>
    631c:	b3 94       	inc	r11
    631e:	a3 fc       	sbrc	r10, 3
    6320:	10 c0       	rjmp	.+32     	; 0x6342 <vfprintf+0x33e>
    6322:	a0 fe       	sbrs	r10, 0
    6324:	06 c0       	rjmp	.+12     	; 0x6332 <vfprintf+0x32e>
    6326:	b2 14       	cp	r11, r2
    6328:	80 f4       	brcc	.+32     	; 0x634a <vfprintf+0x346>
    632a:	28 0c       	add	r2, r8
    632c:	92 2c       	mov	r9, r2
    632e:	9b 18       	sub	r9, r11
    6330:	0d c0       	rjmp	.+26     	; 0x634c <vfprintf+0x348>
    6332:	b2 14       	cp	r11, r2
    6334:	58 f4       	brcc	.+22     	; 0x634c <vfprintf+0x348>
    6336:	b6 01       	movw	r22, r12
    6338:	80 e2       	ldi	r24, 0x20	; 32
    633a:	90 e0       	ldi	r25, 0x00	; 0
    633c:	76 d0       	rcall	.+236    	; 0x642a <fputc>
    633e:	b3 94       	inc	r11
    6340:	f8 cf       	rjmp	.-16     	; 0x6332 <vfprintf+0x32e>
    6342:	b2 14       	cp	r11, r2
    6344:	18 f4       	brcc	.+6      	; 0x634c <vfprintf+0x348>
    6346:	2b 18       	sub	r2, r11
    6348:	02 c0       	rjmp	.+4      	; 0x634e <vfprintf+0x34a>
    634a:	98 2c       	mov	r9, r8
    634c:	21 2c       	mov	r2, r1
    634e:	a4 fe       	sbrs	r10, 4
    6350:	0f c0       	rjmp	.+30     	; 0x6370 <vfprintf+0x36c>
    6352:	b6 01       	movw	r22, r12
    6354:	80 e3       	ldi	r24, 0x30	; 48
    6356:	90 e0       	ldi	r25, 0x00	; 0
    6358:	68 d0       	rcall	.+208    	; 0x642a <fputc>
    635a:	a2 fe       	sbrs	r10, 2
    635c:	16 c0       	rjmp	.+44     	; 0x638a <vfprintf+0x386>
    635e:	a1 fc       	sbrc	r10, 1
    6360:	03 c0       	rjmp	.+6      	; 0x6368 <vfprintf+0x364>
    6362:	88 e7       	ldi	r24, 0x78	; 120
    6364:	90 e0       	ldi	r25, 0x00	; 0
    6366:	02 c0       	rjmp	.+4      	; 0x636c <vfprintf+0x368>
    6368:	88 e5       	ldi	r24, 0x58	; 88
    636a:	90 e0       	ldi	r25, 0x00	; 0
    636c:	b6 01       	movw	r22, r12
    636e:	0c c0       	rjmp	.+24     	; 0x6388 <vfprintf+0x384>
    6370:	8a 2d       	mov	r24, r10
    6372:	86 78       	andi	r24, 0x86	; 134
    6374:	51 f0       	breq	.+20     	; 0x638a <vfprintf+0x386>
    6376:	a1 fe       	sbrs	r10, 1
    6378:	02 c0       	rjmp	.+4      	; 0x637e <vfprintf+0x37a>
    637a:	8b e2       	ldi	r24, 0x2B	; 43
    637c:	01 c0       	rjmp	.+2      	; 0x6380 <vfprintf+0x37c>
    637e:	80 e2       	ldi	r24, 0x20	; 32
    6380:	a7 fc       	sbrc	r10, 7
    6382:	8d e2       	ldi	r24, 0x2D	; 45
    6384:	b6 01       	movw	r22, r12
    6386:	90 e0       	ldi	r25, 0x00	; 0
    6388:	50 d0       	rcall	.+160    	; 0x642a <fputc>
    638a:	89 14       	cp	r8, r9
    638c:	30 f4       	brcc	.+12     	; 0x639a <vfprintf+0x396>
    638e:	b6 01       	movw	r22, r12
    6390:	80 e3       	ldi	r24, 0x30	; 48
    6392:	90 e0       	ldi	r25, 0x00	; 0
    6394:	4a d0       	rcall	.+148    	; 0x642a <fputc>
    6396:	9a 94       	dec	r9
    6398:	f8 cf       	rjmp	.-16     	; 0x638a <vfprintf+0x386>
    639a:	8a 94       	dec	r8
    639c:	f3 01       	movw	r30, r6
    639e:	e8 0d       	add	r30, r8
    63a0:	f1 1d       	adc	r31, r1
    63a2:	80 81       	ld	r24, Z
    63a4:	b6 01       	movw	r22, r12
    63a6:	90 e0       	ldi	r25, 0x00	; 0
    63a8:	40 d0       	rcall	.+128    	; 0x642a <fputc>
    63aa:	81 10       	cpse	r8, r1
    63ac:	f6 cf       	rjmp	.-20     	; 0x639a <vfprintf+0x396>
    63ae:	22 20       	and	r2, r2
    63b0:	09 f4       	brne	.+2      	; 0x63b4 <vfprintf+0x3b0>
    63b2:	4e ce       	rjmp	.-868    	; 0x6050 <vfprintf+0x4c>
    63b4:	b6 01       	movw	r22, r12
    63b6:	80 e2       	ldi	r24, 0x20	; 32
    63b8:	90 e0       	ldi	r25, 0x00	; 0
    63ba:	37 d0       	rcall	.+110    	; 0x642a <fputc>
    63bc:	2a 94       	dec	r2
    63be:	f7 cf       	rjmp	.-18     	; 0x63ae <vfprintf+0x3aa>
    63c0:	f6 01       	movw	r30, r12
    63c2:	86 81       	ldd	r24, Z+6	; 0x06
    63c4:	97 81       	ldd	r25, Z+7	; 0x07
    63c6:	02 c0       	rjmp	.+4      	; 0x63cc <vfprintf+0x3c8>
    63c8:	8f ef       	ldi	r24, 0xFF	; 255
    63ca:	9f ef       	ldi	r25, 0xFF	; 255
    63cc:	2b 96       	adiw	r28, 0x0b	; 11
    63ce:	0f b6       	in	r0, 0x3f	; 63
    63d0:	f8 94       	cli
    63d2:	de bf       	out	0x3e, r29	; 62
    63d4:	0f be       	out	0x3f, r0	; 63
    63d6:	cd bf       	out	0x3d, r28	; 61
    63d8:	df 91       	pop	r29
    63da:	cf 91       	pop	r28
    63dc:	1f 91       	pop	r17
    63de:	0f 91       	pop	r16
    63e0:	ff 90       	pop	r15
    63e2:	ef 90       	pop	r14
    63e4:	df 90       	pop	r13
    63e6:	cf 90       	pop	r12
    63e8:	bf 90       	pop	r11
    63ea:	af 90       	pop	r10
    63ec:	9f 90       	pop	r9
    63ee:	8f 90       	pop	r8
    63f0:	7f 90       	pop	r7
    63f2:	6f 90       	pop	r6
    63f4:	5f 90       	pop	r5
    63f6:	4f 90       	pop	r4
    63f8:	3f 90       	pop	r3
    63fa:	2f 90       	pop	r2
    63fc:	08 95       	ret

000063fe <strnlen_P>:
    63fe:	fc 01       	movw	r30, r24
    6400:	05 90       	lpm	r0, Z+
    6402:	61 50       	subi	r22, 0x01	; 1
    6404:	70 40       	sbci	r23, 0x00	; 0
    6406:	01 10       	cpse	r0, r1
    6408:	d8 f7       	brcc	.-10     	; 0x6400 <strnlen_P+0x2>
    640a:	80 95       	com	r24
    640c:	90 95       	com	r25
    640e:	8e 0f       	add	r24, r30
    6410:	9f 1f       	adc	r25, r31
    6412:	08 95       	ret

00006414 <strnlen>:
    6414:	fc 01       	movw	r30, r24
    6416:	61 50       	subi	r22, 0x01	; 1
    6418:	70 40       	sbci	r23, 0x00	; 0
    641a:	01 90       	ld	r0, Z+
    641c:	01 10       	cpse	r0, r1
    641e:	d8 f7       	brcc	.-10     	; 0x6416 <strnlen+0x2>
    6420:	80 95       	com	r24
    6422:	90 95       	com	r25
    6424:	8e 0f       	add	r24, r30
    6426:	9f 1f       	adc	r25, r31
    6428:	08 95       	ret

0000642a <fputc>:
    642a:	0f 93       	push	r16
    642c:	1f 93       	push	r17
    642e:	cf 93       	push	r28
    6430:	df 93       	push	r29
    6432:	fb 01       	movw	r30, r22
    6434:	23 81       	ldd	r18, Z+3	; 0x03
    6436:	21 fd       	sbrc	r18, 1
    6438:	03 c0       	rjmp	.+6      	; 0x6440 <fputc+0x16>
    643a:	8f ef       	ldi	r24, 0xFF	; 255
    643c:	9f ef       	ldi	r25, 0xFF	; 255
    643e:	2c c0       	rjmp	.+88     	; 0x6498 <fputc+0x6e>
    6440:	22 ff       	sbrs	r18, 2
    6442:	16 c0       	rjmp	.+44     	; 0x6470 <fputc+0x46>
    6444:	46 81       	ldd	r20, Z+6	; 0x06
    6446:	57 81       	ldd	r21, Z+7	; 0x07
    6448:	24 81       	ldd	r18, Z+4	; 0x04
    644a:	35 81       	ldd	r19, Z+5	; 0x05
    644c:	42 17       	cp	r20, r18
    644e:	53 07       	cpc	r21, r19
    6450:	44 f4       	brge	.+16     	; 0x6462 <fputc+0x38>
    6452:	a0 81       	ld	r26, Z
    6454:	b1 81       	ldd	r27, Z+1	; 0x01
    6456:	9d 01       	movw	r18, r26
    6458:	2f 5f       	subi	r18, 0xFF	; 255
    645a:	3f 4f       	sbci	r19, 0xFF	; 255
    645c:	31 83       	std	Z+1, r19	; 0x01
    645e:	20 83       	st	Z, r18
    6460:	8c 93       	st	X, r24
    6462:	26 81       	ldd	r18, Z+6	; 0x06
    6464:	37 81       	ldd	r19, Z+7	; 0x07
    6466:	2f 5f       	subi	r18, 0xFF	; 255
    6468:	3f 4f       	sbci	r19, 0xFF	; 255
    646a:	37 83       	std	Z+7, r19	; 0x07
    646c:	26 83       	std	Z+6, r18	; 0x06
    646e:	14 c0       	rjmp	.+40     	; 0x6498 <fputc+0x6e>
    6470:	8b 01       	movw	r16, r22
    6472:	ec 01       	movw	r28, r24
    6474:	fb 01       	movw	r30, r22
    6476:	00 84       	ldd	r0, Z+8	; 0x08
    6478:	f1 85       	ldd	r31, Z+9	; 0x09
    647a:	e0 2d       	mov	r30, r0
    647c:	19 95       	eicall
    647e:	89 2b       	or	r24, r25
    6480:	e1 f6       	brne	.-72     	; 0x643a <fputc+0x10>
    6482:	d8 01       	movw	r26, r16
    6484:	16 96       	adiw	r26, 0x06	; 6
    6486:	8d 91       	ld	r24, X+
    6488:	9c 91       	ld	r25, X
    648a:	17 97       	sbiw	r26, 0x07	; 7
    648c:	01 96       	adiw	r24, 0x01	; 1
    648e:	17 96       	adiw	r26, 0x07	; 7
    6490:	9c 93       	st	X, r25
    6492:	8e 93       	st	-X, r24
    6494:	16 97       	sbiw	r26, 0x06	; 6
    6496:	ce 01       	movw	r24, r28
    6498:	df 91       	pop	r29
    649a:	cf 91       	pop	r28
    649c:	1f 91       	pop	r17
    649e:	0f 91       	pop	r16
    64a0:	08 95       	ret

000064a2 <__ultoa_invert>:
    64a2:	fa 01       	movw	r30, r20
    64a4:	aa 27       	eor	r26, r26
    64a6:	28 30       	cpi	r18, 0x08	; 8
    64a8:	51 f1       	breq	.+84     	; 0x64fe <__ultoa_invert+0x5c>
    64aa:	20 31       	cpi	r18, 0x10	; 16
    64ac:	81 f1       	breq	.+96     	; 0x650e <__ultoa_invert+0x6c>
    64ae:	e8 94       	clt
    64b0:	6f 93       	push	r22
    64b2:	6e 7f       	andi	r22, 0xFE	; 254
    64b4:	6e 5f       	subi	r22, 0xFE	; 254
    64b6:	7f 4f       	sbci	r23, 0xFF	; 255
    64b8:	8f 4f       	sbci	r24, 0xFF	; 255
    64ba:	9f 4f       	sbci	r25, 0xFF	; 255
    64bc:	af 4f       	sbci	r26, 0xFF	; 255
    64be:	b1 e0       	ldi	r27, 0x01	; 1
    64c0:	3e d0       	rcall	.+124    	; 0x653e <__ultoa_invert+0x9c>
    64c2:	b4 e0       	ldi	r27, 0x04	; 4
    64c4:	3c d0       	rcall	.+120    	; 0x653e <__ultoa_invert+0x9c>
    64c6:	67 0f       	add	r22, r23
    64c8:	78 1f       	adc	r23, r24
    64ca:	89 1f       	adc	r24, r25
    64cc:	9a 1f       	adc	r25, r26
    64ce:	a1 1d       	adc	r26, r1
    64d0:	68 0f       	add	r22, r24
    64d2:	79 1f       	adc	r23, r25
    64d4:	8a 1f       	adc	r24, r26
    64d6:	91 1d       	adc	r25, r1
    64d8:	a1 1d       	adc	r26, r1
    64da:	6a 0f       	add	r22, r26
    64dc:	71 1d       	adc	r23, r1
    64de:	81 1d       	adc	r24, r1
    64e0:	91 1d       	adc	r25, r1
    64e2:	a1 1d       	adc	r26, r1
    64e4:	20 d0       	rcall	.+64     	; 0x6526 <__ultoa_invert+0x84>
    64e6:	09 f4       	brne	.+2      	; 0x64ea <__ultoa_invert+0x48>
    64e8:	68 94       	set
    64ea:	3f 91       	pop	r19
    64ec:	2a e0       	ldi	r18, 0x0A	; 10
    64ee:	26 9f       	mul	r18, r22
    64f0:	11 24       	eor	r1, r1
    64f2:	30 19       	sub	r19, r0
    64f4:	30 5d       	subi	r19, 0xD0	; 208
    64f6:	31 93       	st	Z+, r19
    64f8:	de f6       	brtc	.-74     	; 0x64b0 <__ultoa_invert+0xe>
    64fa:	cf 01       	movw	r24, r30
    64fc:	08 95       	ret
    64fe:	46 2f       	mov	r20, r22
    6500:	47 70       	andi	r20, 0x07	; 7
    6502:	40 5d       	subi	r20, 0xD0	; 208
    6504:	41 93       	st	Z+, r20
    6506:	b3 e0       	ldi	r27, 0x03	; 3
    6508:	0f d0       	rcall	.+30     	; 0x6528 <__ultoa_invert+0x86>
    650a:	c9 f7       	brne	.-14     	; 0x64fe <__ultoa_invert+0x5c>
    650c:	f6 cf       	rjmp	.-20     	; 0x64fa <__ultoa_invert+0x58>
    650e:	46 2f       	mov	r20, r22
    6510:	4f 70       	andi	r20, 0x0F	; 15
    6512:	40 5d       	subi	r20, 0xD0	; 208
    6514:	4a 33       	cpi	r20, 0x3A	; 58
    6516:	18 f0       	brcs	.+6      	; 0x651e <__ultoa_invert+0x7c>
    6518:	49 5d       	subi	r20, 0xD9	; 217
    651a:	31 fd       	sbrc	r19, 1
    651c:	40 52       	subi	r20, 0x20	; 32
    651e:	41 93       	st	Z+, r20
    6520:	02 d0       	rcall	.+4      	; 0x6526 <__ultoa_invert+0x84>
    6522:	a9 f7       	brne	.-22     	; 0x650e <__ultoa_invert+0x6c>
    6524:	ea cf       	rjmp	.-44     	; 0x64fa <__ultoa_invert+0x58>
    6526:	b4 e0       	ldi	r27, 0x04	; 4
    6528:	a6 95       	lsr	r26
    652a:	97 95       	ror	r25
    652c:	87 95       	ror	r24
    652e:	77 95       	ror	r23
    6530:	67 95       	ror	r22
    6532:	ba 95       	dec	r27
    6534:	c9 f7       	brne	.-14     	; 0x6528 <__ultoa_invert+0x86>
    6536:	00 97       	sbiw	r24, 0x00	; 0
    6538:	61 05       	cpc	r22, r1
    653a:	71 05       	cpc	r23, r1
    653c:	08 95       	ret
    653e:	9b 01       	movw	r18, r22
    6540:	ac 01       	movw	r20, r24
    6542:	0a 2e       	mov	r0, r26
    6544:	06 94       	lsr	r0
    6546:	57 95       	ror	r21
    6548:	47 95       	ror	r20
    654a:	37 95       	ror	r19
    654c:	27 95       	ror	r18
    654e:	ba 95       	dec	r27
    6550:	c9 f7       	brne	.-14     	; 0x6544 <__ultoa_invert+0xa2>
    6552:	62 0f       	add	r22, r18
    6554:	73 1f       	adc	r23, r19
    6556:	84 1f       	adc	r24, r20
    6558:	95 1f       	adc	r25, r21
    655a:	a0 1d       	adc	r26, r0
    655c:	08 95       	ret

0000655e <_exit>:
    655e:	f8 94       	cli

00006560 <__stop_program>:
    6560:	ff cf       	rjmp	.-2      	; 0x6560 <__stop_program>
