
SEP4IOT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000006b8  00800200  000065a2  00006636  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000065a2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000012b9  008008b8  008008b8  00006cee  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00006cee  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006d4c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000c40  00000000  00000000  00006d8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000f560  00000000  00000000  000079cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003ed0  00000000  00000000  00016f2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000074c9  00000000  00000000  0001adfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002a6c  00000000  00000000  000222c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000047bd  00000000  00000000  00024d34  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000de38  00000000  00000000  000294f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000c38  00000000  00000000  00037329  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	50 c2       	rjmp	.+1184   	; 0x4a2 <__ctors_end>
       2:	00 00       	nop
       4:	6f c2       	rjmp	.+1246   	; 0x4e4 <__bad_interrupt>
       6:	00 00       	nop
       8:	6d c2       	rjmp	.+1242   	; 0x4e4 <__bad_interrupt>
       a:	00 00       	nop
       c:	6b c2       	rjmp	.+1238   	; 0x4e4 <__bad_interrupt>
       e:	00 00       	nop
      10:	69 c2       	rjmp	.+1234   	; 0x4e4 <__bad_interrupt>
      12:	00 00       	nop
      14:	67 c2       	rjmp	.+1230   	; 0x4e4 <__bad_interrupt>
      16:	00 00       	nop
      18:	65 c2       	rjmp	.+1226   	; 0x4e4 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	63 c2       	rjmp	.+1222   	; 0x4e4 <__bad_interrupt>
      1e:	00 00       	nop
      20:	61 c2       	rjmp	.+1218   	; 0x4e4 <__bad_interrupt>
      22:	00 00       	nop
      24:	5f c2       	rjmp	.+1214   	; 0x4e4 <__bad_interrupt>
      26:	00 00       	nop
      28:	5d c2       	rjmp	.+1210   	; 0x4e4 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	5b c2       	rjmp	.+1206   	; 0x4e4 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 45 0d 	jmp	0x1a8a	; 0x1a8a <__vector_12>
      34:	57 c2       	rjmp	.+1198   	; 0x4e4 <__bad_interrupt>
      36:	00 00       	nop
      38:	55 c2       	rjmp	.+1194   	; 0x4e4 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	53 c2       	rjmp	.+1190   	; 0x4e4 <__bad_interrupt>
      3e:	00 00       	nop
      40:	51 c2       	rjmp	.+1186   	; 0x4e4 <__bad_interrupt>
      42:	00 00       	nop
      44:	4f c2       	rjmp	.+1182   	; 0x4e4 <__bad_interrupt>
      46:	00 00       	nop
      48:	4d c2       	rjmp	.+1178   	; 0x4e4 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	4b c2       	rjmp	.+1174   	; 0x4e4 <__bad_interrupt>
      4e:	00 00       	nop
      50:	49 c2       	rjmp	.+1170   	; 0x4e4 <__bad_interrupt>
      52:	00 00       	nop
      54:	47 c2       	rjmp	.+1166   	; 0x4e4 <__bad_interrupt>
      56:	00 00       	nop
      58:	45 c2       	rjmp	.+1162   	; 0x4e4 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	43 c2       	rjmp	.+1158   	; 0x4e4 <__bad_interrupt>
      5e:	00 00       	nop
      60:	41 c2       	rjmp	.+1154   	; 0x4e4 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 a1 27 	jmp	0x4f42	; 0x4f42 <__vector_25>
      68:	0c 94 f3 27 	jmp	0x4fe6	; 0x4fe6 <__vector_26>
      6c:	3b c2       	rjmp	.+1142   	; 0x4e4 <__bad_interrupt>
      6e:	00 00       	nop
      70:	39 c2       	rjmp	.+1138   	; 0x4e4 <__bad_interrupt>
      72:	00 00       	nop
      74:	37 c2       	rjmp	.+1134   	; 0x4e4 <__bad_interrupt>
      76:	00 00       	nop
      78:	35 c2       	rjmp	.+1130   	; 0x4e4 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	33 c2       	rjmp	.+1126   	; 0x4e4 <__bad_interrupt>
      7e:	00 00       	nop
      80:	31 c2       	rjmp	.+1122   	; 0x4e4 <__bad_interrupt>
      82:	00 00       	nop
      84:	2f c2       	rjmp	.+1118   	; 0x4e4 <__bad_interrupt>
      86:	00 00       	nop
      88:	2d c2       	rjmp	.+1114   	; 0x4e4 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	2b c2       	rjmp	.+1110   	; 0x4e4 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 37 28 	jmp	0x506e	; 0x506e <__vector_36>
      94:	0c 94 89 28 	jmp	0x5112	; 0x5112 <__vector_37>
      98:	25 c2       	rjmp	.+1098   	; 0x4e4 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 21 2b 	jmp	0x5642	; 0x5642 <__vector_39>
      a0:	21 c2       	rjmp	.+1090   	; 0x4e4 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	1f c2       	rjmp	.+1086   	; 0x4e4 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	1d c2       	rjmp	.+1082   	; 0x4e4 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	1b c2       	rjmp	.+1078   	; 0x4e4 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	19 c2       	rjmp	.+1074   	; 0x4e4 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	17 c2       	rjmp	.+1070   	; 0x4e4 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	15 c2       	rjmp	.+1066   	; 0x4e4 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	13 c2       	rjmp	.+1062   	; 0x4e4 <__bad_interrupt>
      be:	00 00       	nop
      c0:	11 c2       	rjmp	.+1058   	; 0x4e4 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	0f c2       	rjmp	.+1054   	; 0x4e4 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	0d c2       	rjmp	.+1050   	; 0x4e4 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 cd 28 	jmp	0x519a	; 0x519a <__vector_51>
      d0:	0c 94 1f 29 	jmp	0x523e	; 0x523e <__vector_52>
      d4:	07 c2       	rjmp	.+1038   	; 0x4e4 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 63 29 	jmp	0x52c6	; 0x52c6 <__vector_54>
      dc:	0c 94 b5 29 	jmp	0x536a	; 0x536a <__vector_55>
      e0:	01 c2       	rjmp	.+1026   	; 0x4e4 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	c6 01       	movw	r24, r12
      e6:	c6 01       	movw	r24, r12
      e8:	c6 01       	movw	r24, r12
      ea:	00 02       	muls	r16, r16
      ec:	08 02       	muls	r16, r24
      ee:	1e 02       	muls	r17, r30
      f0:	c6 01       	movw	r24, r12
      f2:	c6 01       	movw	r24, r12
      f4:	00 02       	muls	r16, r16
      f6:	08 02       	muls	r16, r24
      f8:	43 2b       	or	r20, r19
      fa:	b3 2b       	or	r27, r19
      fc:	b3 2b       	or	r27, r19
      fe:	b3 2b       	or	r27, r19
     100:	b3 2b       	or	r27, r19
     102:	b3 2b       	or	r27, r19
     104:	b3 2b       	or	r27, r19
     106:	b3 2b       	or	r27, r19
     108:	43 2b       	or	r20, r19
     10a:	b3 2b       	or	r27, r19
     10c:	b3 2b       	or	r27, r19
     10e:	b3 2b       	or	r27, r19
     110:	b3 2b       	or	r27, r19
     112:	b3 2b       	or	r27, r19
     114:	b3 2b       	or	r27, r19
     116:	b3 2b       	or	r27, r19
     118:	45 2b       	or	r20, r21
     11a:	b3 2b       	or	r27, r19
     11c:	b3 2b       	or	r27, r19
     11e:	b3 2b       	or	r27, r19
     120:	b3 2b       	or	r27, r19
     122:	b3 2b       	or	r27, r19
     124:	b3 2b       	or	r27, r19
     126:	b3 2b       	or	r27, r19
     128:	b3 2b       	or	r27, r19
     12a:	b3 2b       	or	r27, r19
     12c:	b3 2b       	or	r27, r19
     12e:	b3 2b       	or	r27, r19
     130:	b3 2b       	or	r27, r19
     132:	b3 2b       	or	r27, r19
     134:	b3 2b       	or	r27, r19
     136:	b3 2b       	or	r27, r19
     138:	45 2b       	or	r20, r21
     13a:	b3 2b       	or	r27, r19
     13c:	b3 2b       	or	r27, r19
     13e:	b3 2b       	or	r27, r19
     140:	b3 2b       	or	r27, r19
     142:	b3 2b       	or	r27, r19
     144:	b3 2b       	or	r27, r19
     146:	b3 2b       	or	r27, r19
     148:	b3 2b       	or	r27, r19
     14a:	b3 2b       	or	r27, r19
     14c:	b3 2b       	or	r27, r19
     14e:	b3 2b       	or	r27, r19
     150:	b3 2b       	or	r27, r19
     152:	b3 2b       	or	r27, r19
     154:	b3 2b       	or	r27, r19
     156:	b3 2b       	or	r27, r19
     158:	af 2b       	or	r26, r31
     15a:	b3 2b       	or	r27, r19
     15c:	b3 2b       	or	r27, r19
     15e:	b3 2b       	or	r27, r19
     160:	b3 2b       	or	r27, r19
     162:	b3 2b       	or	r27, r19
     164:	b3 2b       	or	r27, r19
     166:	b3 2b       	or	r27, r19
     168:	7a 2b       	or	r23, r26
     16a:	b3 2b       	or	r27, r19
     16c:	b3 2b       	or	r27, r19
     16e:	b3 2b       	or	r27, r19
     170:	b3 2b       	or	r27, r19
     172:	b3 2b       	or	r27, r19
     174:	b3 2b       	or	r27, r19
     176:	b3 2b       	or	r27, r19
     178:	b3 2b       	or	r27, r19
     17a:	b3 2b       	or	r27, r19
     17c:	b3 2b       	or	r27, r19
     17e:	b3 2b       	or	r27, r19
     180:	b3 2b       	or	r27, r19
     182:	b3 2b       	or	r27, r19
     184:	b3 2b       	or	r27, r19
     186:	b3 2b       	or	r27, r19
     188:	6e 2b       	or	r22, r30
     18a:	b3 2b       	or	r27, r19
     18c:	b3 2b       	or	r27, r19
     18e:	b3 2b       	or	r27, r19
     190:	b3 2b       	or	r27, r19
     192:	b3 2b       	or	r27, r19
     194:	b3 2b       	or	r27, r19
     196:	b3 2b       	or	r27, r19
     198:	92 2b       	or	r25, r18

0000019a <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     19a:	05 e5       	ldi	r16, 0x55	; 85
     19c:	19 e1       	ldi	r17, 0x19	; 25
     19e:	0f 2e       	mov	r0, r31
     1a0:	f5 e8       	ldi	r31, 0x85	; 133
     1a2:	ef 2e       	mov	r14, r31
     1a4:	f9 e1       	ldi	r31, 0x19	; 25
     1a6:	ff 2e       	mov	r15, r31
     1a8:	f0 2d       	mov	r31, r0
     1aa:	80 91 54 19 	lds	r24, 0x1954	; 0x801954 <uxDeletedTasksWaitingCleanUp>
     1ae:	88 23       	and	r24, r24
     1b0:	29 f1       	breq	.+74     	; 0x1fc <prvIdleTask+0x62>
     1b2:	0f b6       	in	r0, 0x3f	; 63
     1b4:	f8 94       	cli
     1b6:	0f 92       	push	r0
     1b8:	d8 01       	movw	r26, r16
     1ba:	17 96       	adiw	r26, 0x07	; 7
     1bc:	ed 91       	ld	r30, X+
     1be:	fc 91       	ld	r31, X
     1c0:	18 97       	sbiw	r26, 0x08	; 8
     1c2:	c0 85       	ldd	r28, Z+8	; 0x08
     1c4:	d1 85       	ldd	r29, Z+9	; 0x09
     1c6:	ce 01       	movw	r24, r28
     1c8:	02 96       	adiw	r24, 0x02	; 2
     1ca:	0e 94 aa 0b 	call	0x1754	; 0x1754 <uxListRemove>
     1ce:	80 91 48 19 	lds	r24, 0x1948	; 0x801948 <uxCurrentNumberOfTasks>
     1d2:	81 50       	subi	r24, 0x01	; 1
     1d4:	80 93 48 19 	sts	0x1948, r24	; 0x801948 <uxCurrentNumberOfTasks>
     1d8:	80 91 54 19 	lds	r24, 0x1954	; 0x801954 <uxDeletedTasksWaitingCleanUp>
     1dc:	81 50       	subi	r24, 0x01	; 1
     1de:	80 93 54 19 	sts	0x1954, r24	; 0x801954 <uxDeletedTasksWaitingCleanUp>
     1e2:	0f 90       	pop	r0
     1e4:	0f be       	out	0x3f, r0	; 63
     1e6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     1e8:	9c 8d       	ldd	r25, Y+28	; 0x1c
     1ea:	0e 94 06 0b 	call	0x160c	; 0x160c <vPortFree>
     1ee:	ce 01       	movw	r24, r28
     1f0:	0e 94 06 0b 	call	0x160c	; 0x160c <vPortFree>
     1f4:	80 91 54 19 	lds	r24, 0x1954	; 0x801954 <uxDeletedTasksWaitingCleanUp>
     1f8:	81 11       	cpse	r24, r1
     1fa:	db cf       	rjmp	.-74     	; 0x1b2 <prvIdleTask+0x18>
     1fc:	f7 01       	movw	r30, r14
     1fe:	80 81       	ld	r24, Z
     200:	82 30       	cpi	r24, 0x02	; 2
     202:	10 f0       	brcs	.+4      	; 0x208 <prvIdleTask+0x6e>
     204:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <vPortYield>
     208:	0e 94 97 1d 	call	0x3b2e	; 0x3b2e <vApplicationIdleHook>
     20c:	ce cf       	rjmp	.-100    	; 0x1aa <prvIdleTask+0x10>

0000020e <prvTimerTask>:
            pxNewTimer->ucStatus = 0x00;
            prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
        }

        return pxNewTimer;
    }
     20e:	cf 93       	push	r28
     210:	df 93       	push	r29
     212:	cd b7       	in	r28, 0x3d	; 61
     214:	de b7       	in	r29, 0x3e	; 62
     216:	60 97       	sbiw	r28, 0x10	; 16
     218:	0f b6       	in	r0, 0x3f	; 63
     21a:	f8 94       	cli
     21c:	de bf       	out	0x3e, r29	; 62
     21e:	0f be       	out	0x3f, r0	; 63
     220:	cd bf       	out	0x3d, r28	; 61
     222:	ce 01       	movw	r24, r28
     224:	01 96       	adiw	r24, 0x01	; 1
     226:	9a 87       	std	Y+10, r25	; 0x0a
     228:	89 87       	std	Y+9, r24	; 0x09
     22a:	81 2c       	mov	r8, r1
     22c:	91 2c       	mov	r9, r1
     22e:	a1 2c       	mov	r10, r1
     230:	b1 2c       	mov	r11, r1
     232:	69 84       	ldd	r6, Y+9	; 0x09
     234:	7a 84       	ldd	r7, Y+10	; 0x0a
     236:	e0 91 bd 19 	lds	r30, 0x19BD	; 0x8019bd <pxCurrentTimerList>
     23a:	f0 91 be 19 	lds	r31, 0x19BE	; 0x8019be <pxCurrentTimerList+0x1>
     23e:	80 81       	ld	r24, Z
     240:	88 23       	and	r24, r24
     242:	09 f4       	brne	.+2      	; 0x246 <prvTimerTask+0x38>
     244:	14 c1       	rjmp	.+552    	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
     246:	07 80       	ldd	r0, Z+7	; 0x07
     248:	f0 85       	ldd	r31, Z+8	; 0x08
     24a:	e0 2d       	mov	r30, r0
     24c:	20 80       	ld	r2, Z
     24e:	31 80       	ldd	r3, Z+1	; 0x01
     250:	42 80       	ldd	r4, Z+2	; 0x02
     252:	53 80       	ldd	r5, Z+3	; 0x03
     254:	0e 94 dc 15 	call	0x2bb8	; 0x2bb8 <vTaskSuspendAll>
     258:	ce 01       	movw	r24, r28
     25a:	01 96       	adiw	r24, 0x01	; 1
     25c:	0e 94 01 1d 	call	0x3a02	; 0x3a02 <prvSampleTimeNow>
     260:	6b 87       	std	Y+11, r22	; 0x0b
     262:	7c 87       	std	Y+12, r23	; 0x0c
     264:	8d 87       	std	Y+13, r24	; 0x0d
     266:	9e 87       	std	Y+14, r25	; 0x0e
     268:	89 81       	ldd	r24, Y+1	; 0x01
     26a:	81 11       	cpse	r24, r1
     26c:	67 c0       	rjmp	.+206    	; 0x33c <prvTimerTask+0x12e>
     26e:	8b 85       	ldd	r24, Y+11	; 0x0b
     270:	9c 85       	ldd	r25, Y+12	; 0x0c
     272:	ad 85       	ldd	r26, Y+13	; 0x0d
     274:	be 85       	ldd	r27, Y+14	; 0x0e
     276:	82 15       	cp	r24, r2
     278:	93 05       	cpc	r25, r3
     27a:	a4 05       	cpc	r26, r4
     27c:	b5 05       	cpc	r27, r5
     27e:	08 f4       	brcc	.+2      	; 0x282 <prvTimerTask+0x74>
     280:	45 c0       	rjmp	.+138    	; 0x30c <prvTimerTask+0xfe>
     282:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <xTaskResumeAll>
     286:	e0 91 bd 19 	lds	r30, 0x19BD	; 0x8019bd <pxCurrentTimerList>
     28a:	f0 91 be 19 	lds	r31, 0x19BE	; 0x8019be <pxCurrentTimerList+0x1>
     28e:	07 80       	ldd	r0, Z+7	; 0x07
     290:	f0 85       	ldd	r31, Z+8	; 0x08
     292:	e0 2d       	mov	r30, r0
     294:	a0 85       	ldd	r26, Z+8	; 0x08
     296:	b1 85       	ldd	r27, Z+9	; 0x09
     298:	b8 8b       	std	Y+16, r27	; 0x10
     29a:	af 87       	std	Y+15, r26	; 0x0f
     29c:	cd 01       	movw	r24, r26
     29e:	02 96       	adiw	r24, 0x02	; 2
     2a0:	0e 94 aa 0b 	call	0x1754	; 0x1754 <uxListRemove>
     2a4:	ef 85       	ldd	r30, Y+15	; 0x0f
     2a6:	f8 89       	ldd	r31, Y+16	; 0x10
     2a8:	87 89       	ldd	r24, Z+23	; 0x17
     2aa:	82 ff       	sbrs	r24, 2
     2ac:	21 c0       	rjmp	.+66     	; 0x2f0 <prvTimerTask+0xe2>
     2ae:	46 85       	ldd	r20, Z+14	; 0x0e
     2b0:	57 85       	ldd	r21, Z+15	; 0x0f
     2b2:	60 89       	ldd	r22, Z+16	; 0x10
     2b4:	71 89       	ldd	r23, Z+17	; 0x11
     2b6:	42 0d       	add	r20, r2
     2b8:	53 1d       	adc	r21, r3
     2ba:	64 1d       	adc	r22, r4
     2bc:	75 1d       	adc	r23, r5
     2be:	72 01       	movw	r14, r4
     2c0:	61 01       	movw	r12, r2
     2c2:	0b 85       	ldd	r16, Y+11	; 0x0b
     2c4:	1c 85       	ldd	r17, Y+12	; 0x0c
     2c6:	2d 85       	ldd	r18, Y+13	; 0x0d
     2c8:	3e 85       	ldd	r19, Y+14	; 0x0e
     2ca:	cf 01       	movw	r24, r30
     2cc:	0e 94 10 1c 	call	0x3820	; 0x3820 <prvInsertTimerInActiveList>
     2d0:	88 23       	and	r24, r24
     2d2:	99 f0       	breq	.+38     	; 0x2fa <prvTimerTask+0xec>
     2d4:	c8 2c       	mov	r12, r8
     2d6:	d9 2c       	mov	r13, r9
     2d8:	ea 2c       	mov	r14, r10
     2da:	fb 2c       	mov	r15, r11
     2dc:	00 e0       	ldi	r16, 0x00	; 0
     2de:	10 e0       	ldi	r17, 0x00	; 0
     2e0:	a2 01       	movw	r20, r4
     2e2:	91 01       	movw	r18, r2
     2e4:	60 e0       	ldi	r22, 0x00	; 0
     2e6:	8f 85       	ldd	r24, Y+15	; 0x0f
     2e8:	98 89       	ldd	r25, Y+16	; 0x10
     2ea:	0e 94 a3 1c 	call	0x3946	; 0x3946 <xTimerGenericCommand>
     2ee:	05 c0       	rjmp	.+10     	; 0x2fa <prvTimerTask+0xec>
     2f0:	8e 7f       	andi	r24, 0xFE	; 254
     2f2:	af 85       	ldd	r26, Y+15	; 0x0f
     2f4:	b8 89       	ldd	r27, Y+16	; 0x10
     2f6:	57 96       	adiw	r26, 0x17	; 23
     2f8:	8c 93       	st	X, r24
     2fa:	af 85       	ldd	r26, Y+15	; 0x0f
     2fc:	b8 89       	ldd	r27, Y+16	; 0x10
     2fe:	54 96       	adiw	r26, 0x14	; 20
     300:	ed 91       	ld	r30, X+
     302:	fc 91       	ld	r31, X
     304:	55 97       	sbiw	r26, 0x15	; 21
     306:	cd 01       	movw	r24, r26
     308:	19 95       	eicall
     30a:	a2 c0       	rjmp	.+324    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     30c:	20 e0       	ldi	r18, 0x00	; 0
     30e:	b2 01       	movw	r22, r4
     310:	a1 01       	movw	r20, r2
     312:	8b 85       	ldd	r24, Y+11	; 0x0b
     314:	9c 85       	ldd	r25, Y+12	; 0x0c
     316:	ad 85       	ldd	r26, Y+13	; 0x0d
     318:	be 85       	ldd	r27, Y+14	; 0x0e
     31a:	48 1b       	sub	r20, r24
     31c:	59 0b       	sbc	r21, r25
     31e:	6a 0b       	sbc	r22, r26
     320:	7b 0b       	sbc	r23, r27
     322:	80 91 b9 19 	lds	r24, 0x19B9	; 0x8019b9 <xTimerQueue>
     326:	90 91 ba 19 	lds	r25, 0x19BA	; 0x8019ba <xTimerQueue+0x1>
     32a:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <vQueueWaitForMessageRestricted>
     32e:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <xTaskResumeAll>
     332:	81 11       	cpse	r24, r1
     334:	8d c0       	rjmp	.+282    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     336:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <vPortYield>
     33a:	8a c0       	rjmp	.+276    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     33c:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <xTaskResumeAll>
     340:	87 c0       	rjmp	.+270    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     342:	89 81       	ldd	r24, Y+1	; 0x01
     344:	88 23       	and	r24, r24
     346:	0c f4       	brge	.+2      	; 0x34a <prvTimerTask+0x13c>
     348:	83 c0       	rjmp	.+262    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     34a:	4e 80       	ldd	r4, Y+6	; 0x06
     34c:	5f 80       	ldd	r5, Y+7	; 0x07
     34e:	d2 01       	movw	r26, r4
     350:	1c 96       	adiw	r26, 0x0c	; 12
     352:	8d 91       	ld	r24, X+
     354:	9c 91       	ld	r25, X
     356:	1d 97       	sbiw	r26, 0x0d	; 13
     358:	89 2b       	or	r24, r25
     35a:	21 f0       	breq	.+8      	; 0x364 <prvTimerTask+0x156>
     35c:	c2 01       	movw	r24, r4
     35e:	02 96       	adiw	r24, 0x02	; 2
     360:	0e 94 aa 0b 	call	0x1754	; 0x1754 <uxListRemove>
     364:	ce 01       	movw	r24, r28
     366:	08 96       	adiw	r24, 0x08	; 8
     368:	0e 94 01 1d 	call	0x3a02	; 0x3a02 <prvSampleTimeNow>
     36c:	8b 01       	movw	r16, r22
     36e:	9c 01       	movw	r18, r24
     370:	e9 81       	ldd	r30, Y+1	; 0x01
     372:	0e 2e       	mov	r0, r30
     374:	00 0c       	add	r0, r0
     376:	ff 0b       	sbc	r31, r31
     378:	ea 30       	cpi	r30, 0x0A	; 10
     37a:	f1 05       	cpc	r31, r1
     37c:	08 f0       	brcs	.+2      	; 0x380 <prvTimerTask+0x172>
     37e:	68 c0       	rjmp	.+208    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     380:	88 27       	eor	r24, r24
     382:	ee 58       	subi	r30, 0x8E	; 142
     384:	ff 4f       	sbci	r31, 0xFF	; 255
     386:	8f 4f       	sbci	r24, 0xFF	; 255
     388:	0c 94 0b 2e 	jmp	0x5c16	; 0x5c16 <__tablejump2__>
     38c:	f2 01       	movw	r30, r4
     38e:	87 89       	ldd	r24, Z+23	; 0x17
     390:	81 60       	ori	r24, 0x01	; 1
     392:	87 8b       	std	Z+23, r24	; 0x17
     394:	ca 80       	ldd	r12, Y+2	; 0x02
     396:	db 80       	ldd	r13, Y+3	; 0x03
     398:	ec 80       	ldd	r14, Y+4	; 0x04
     39a:	fd 80       	ldd	r15, Y+5	; 0x05
     39c:	46 85       	ldd	r20, Z+14	; 0x0e
     39e:	57 85       	ldd	r21, Z+15	; 0x0f
     3a0:	60 89       	ldd	r22, Z+16	; 0x10
     3a2:	71 89       	ldd	r23, Z+17	; 0x11
     3a4:	4c 0d       	add	r20, r12
     3a6:	5d 1d       	adc	r21, r13
     3a8:	6e 1d       	adc	r22, r14
     3aa:	7f 1d       	adc	r23, r15
     3ac:	c2 01       	movw	r24, r4
     3ae:	0e 94 10 1c 	call	0x3820	; 0x3820 <prvInsertTimerInActiveList>
     3b2:	88 23       	and	r24, r24
     3b4:	09 f4       	brne	.+2      	; 0x3b8 <prvTimerTask+0x1aa>
     3b6:	4c c0       	rjmp	.+152    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     3b8:	d2 01       	movw	r26, r4
     3ba:	54 96       	adiw	r26, 0x14	; 20
     3bc:	ed 91       	ld	r30, X+
     3be:	fc 91       	ld	r31, X
     3c0:	55 97       	sbiw	r26, 0x15	; 21
     3c2:	c2 01       	movw	r24, r4
     3c4:	19 95       	eicall
     3c6:	f2 01       	movw	r30, r4
     3c8:	87 89       	ldd	r24, Z+23	; 0x17
     3ca:	82 ff       	sbrs	r24, 2
     3cc:	41 c0       	rjmp	.+130    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     3ce:	4a 81       	ldd	r20, Y+2	; 0x02
     3d0:	5b 81       	ldd	r21, Y+3	; 0x03
     3d2:	6c 81       	ldd	r22, Y+4	; 0x04
     3d4:	7d 81       	ldd	r23, Y+5	; 0x05
     3d6:	86 85       	ldd	r24, Z+14	; 0x0e
     3d8:	97 85       	ldd	r25, Z+15	; 0x0f
     3da:	a0 89       	ldd	r26, Z+16	; 0x10
     3dc:	b1 89       	ldd	r27, Z+17	; 0x11
     3de:	9a 01       	movw	r18, r20
     3e0:	ab 01       	movw	r20, r22
     3e2:	28 0f       	add	r18, r24
     3e4:	39 1f       	adc	r19, r25
     3e6:	4a 1f       	adc	r20, r26
     3e8:	5b 1f       	adc	r21, r27
     3ea:	c8 2c       	mov	r12, r8
     3ec:	d9 2c       	mov	r13, r9
     3ee:	ea 2c       	mov	r14, r10
     3f0:	fb 2c       	mov	r15, r11
     3f2:	00 e0       	ldi	r16, 0x00	; 0
     3f4:	10 e0       	ldi	r17, 0x00	; 0
     3f6:	60 e0       	ldi	r22, 0x00	; 0
     3f8:	c2 01       	movw	r24, r4
     3fa:	0e 94 a3 1c 	call	0x3946	; 0x3946 <xTimerGenericCommand>
     3fe:	28 c0       	rjmp	.+80     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     400:	d2 01       	movw	r26, r4
     402:	57 96       	adiw	r26, 0x17	; 23
     404:	8c 91       	ld	r24, X
     406:	57 97       	sbiw	r26, 0x17	; 23
     408:	8e 7f       	andi	r24, 0xFE	; 254
     40a:	57 96       	adiw	r26, 0x17	; 23
     40c:	8c 93       	st	X, r24
     40e:	20 c0       	rjmp	.+64     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     410:	f2 01       	movw	r30, r4
     412:	87 89       	ldd	r24, Z+23	; 0x17
     414:	81 60       	ori	r24, 0x01	; 1
     416:	87 8b       	std	Z+23, r24	; 0x17
     418:	4a 81       	ldd	r20, Y+2	; 0x02
     41a:	5b 81       	ldd	r21, Y+3	; 0x03
     41c:	6c 81       	ldd	r22, Y+4	; 0x04
     41e:	7d 81       	ldd	r23, Y+5	; 0x05
     420:	46 87       	std	Z+14, r20	; 0x0e
     422:	57 87       	std	Z+15, r21	; 0x0f
     424:	60 8b       	std	Z+16, r22	; 0x10
     426:	71 8b       	std	Z+17, r23	; 0x11
     428:	40 0f       	add	r20, r16
     42a:	51 1f       	adc	r21, r17
     42c:	62 1f       	adc	r22, r18
     42e:	73 1f       	adc	r23, r19
     430:	68 01       	movw	r12, r16
     432:	79 01       	movw	r14, r18
     434:	c2 01       	movw	r24, r4
     436:	0e 94 10 1c 	call	0x3820	; 0x3820 <prvInsertTimerInActiveList>
     43a:	0a c0       	rjmp	.+20     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     43c:	f2 01       	movw	r30, r4
     43e:	87 89       	ldd	r24, Z+23	; 0x17
     440:	81 fd       	sbrc	r24, 1
     442:	04 c0       	rjmp	.+8      	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
     444:	c2 01       	movw	r24, r4
     446:	0e 94 06 0b 	call	0x160c	; 0x160c <vPortFree>
     44a:	02 c0       	rjmp	.+4      	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     44c:	8e 7f       	andi	r24, 0xFE	; 254
     44e:	87 8b       	std	Z+23, r24	; 0x17
     450:	28 2d       	mov	r18, r8
     452:	39 2d       	mov	r19, r9
     454:	4a 2d       	mov	r20, r10
     456:	5b 2d       	mov	r21, r11
     458:	66 2d       	mov	r22, r6
     45a:	77 2d       	mov	r23, r7
     45c:	80 91 b9 19 	lds	r24, 0x19B9	; 0x8019b9 <xTimerQueue>
     460:	90 91 ba 19 	lds	r25, 0x19BA	; 0x8019ba <xTimerQueue+0x1>
     464:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <xQueueReceive>
     468:	81 11       	cpse	r24, r1
     46a:	6b cf       	rjmp	.-298    	; 0x342 <prvTimerTask+0x134>
     46c:	e4 ce       	rjmp	.-568    	; 0x236 <prvTimerTask+0x28>
     46e:	0e 94 dc 15 	call	0x2bb8	; 0x2bb8 <vTaskSuspendAll>
     472:	ce 01       	movw	r24, r28
     474:	01 96       	adiw	r24, 0x01	; 1
     476:	0e 94 01 1d 	call	0x3a02	; 0x3a02 <prvSampleTimeNow>
     47a:	6b 87       	std	Y+11, r22	; 0x0b
     47c:	7c 87       	std	Y+12, r23	; 0x0c
     47e:	8d 87       	std	Y+13, r24	; 0x0d
     480:	9e 87       	std	Y+14, r25	; 0x0e
     482:	89 81       	ldd	r24, Y+1	; 0x01
     484:	81 11       	cpse	r24, r1
     486:	5a cf       	rjmp	.-332    	; 0x33c <prvTimerTask+0x12e>
     488:	e0 91 bb 19 	lds	r30, 0x19BB	; 0x8019bb <pxOverflowTimerList>
     48c:	f0 91 bc 19 	lds	r31, 0x19BC	; 0x8019bc <pxOverflowTimerList+0x1>
     490:	80 81       	ld	r24, Z
     492:	21 e0       	ldi	r18, 0x01	; 1
     494:	81 11       	cpse	r24, r1
     496:	20 e0       	ldi	r18, 0x00	; 0
     498:	28 2c       	mov	r2, r8
     49a:	39 2c       	mov	r3, r9
     49c:	4a 2c       	mov	r4, r10
     49e:	5b 2c       	mov	r5, r11
     4a0:	36 cf       	rjmp	.-404    	; 0x30e <prvTimerTask+0x100>

000004a2 <__ctors_end>:
     4a2:	11 24       	eor	r1, r1
     4a4:	1f be       	out	0x3f, r1	; 63
     4a6:	cf ef       	ldi	r28, 0xFF	; 255
     4a8:	d1 e2       	ldi	r29, 0x21	; 33
     4aa:	de bf       	out	0x3e, r29	; 62
     4ac:	cd bf       	out	0x3d, r28	; 61
     4ae:	00 e0       	ldi	r16, 0x00	; 0
     4b0:	0c bf       	out	0x3c, r16	; 60

000004b2 <__do_copy_data>:
     4b2:	18 e0       	ldi	r17, 0x08	; 8
     4b4:	a0 e0       	ldi	r26, 0x00	; 0
     4b6:	b2 e0       	ldi	r27, 0x02	; 2
     4b8:	e2 ea       	ldi	r30, 0xA2	; 162
     4ba:	f5 e6       	ldi	r31, 0x65	; 101
     4bc:	00 e0       	ldi	r16, 0x00	; 0
     4be:	0b bf       	out	0x3b, r16	; 59
     4c0:	02 c0       	rjmp	.+4      	; 0x4c6 <__do_copy_data+0x14>
     4c2:	07 90       	elpm	r0, Z+
     4c4:	0d 92       	st	X+, r0
     4c6:	a8 3b       	cpi	r26, 0xB8	; 184
     4c8:	b1 07       	cpc	r27, r17
     4ca:	d9 f7       	brne	.-10     	; 0x4c2 <__do_copy_data+0x10>

000004cc <__do_clear_bss>:
     4cc:	2b e1       	ldi	r18, 0x1B	; 27
     4ce:	a8 eb       	ldi	r26, 0xB8	; 184
     4d0:	b8 e0       	ldi	r27, 0x08	; 8
     4d2:	01 c0       	rjmp	.+2      	; 0x4d6 <.do_clear_bss_start>

000004d4 <.do_clear_bss_loop>:
     4d4:	1d 92       	st	X+, r1

000004d6 <.do_clear_bss_start>:
     4d6:	a1 37       	cpi	r26, 0x71	; 113
     4d8:	b2 07       	cpc	r27, r18
     4da:	e1 f7       	brne	.-8      	; 0x4d4 <.do_clear_bss_loop>
     4dc:	0e 94 5f 1e 	call	0x3cbe	; 0x3cbe <main>
     4e0:	0c 94 cf 32 	jmp	0x659e	; 0x659e <_exit>

000004e4 <__bad_interrupt>:
     4e4:	8d cd       	rjmp	.-1254   	; 0x0 <__vectors>

000004e6 <my_co2_call_back>:
}



//	RETURN TO DESTROY METHODS
void co2Reader_destroy(co2reader_t self) {
     4e6:	80 93 b8 08 	sts	0x08B8, r24	; 0x8008b8 <__data_end>
     4ea:	90 93 b9 08 	sts	0x08B9, r25	; 0x8008b9 <__data_end+0x1>
     4ee:	9f 93       	push	r25
     4f0:	8f 93       	push	r24
     4f2:	8e e6       	ldi	r24, 0x6E	; 110
     4f4:	92 e0       	ldi	r25, 0x02	; 2
     4f6:	9f 93       	push	r25
     4f8:	8f 93       	push	r24
     4fa:	0e 94 b1 2f 	call	0x5f62	; 0x5f62 <printf>
     4fe:	0f 90       	pop	r0
     500:	0f 90       	pop	r0
     502:	0f 90       	pop	r0
     504:	0f 90       	pop	r0
     506:	08 95       	ret

00000508 <co2Reader_create>:
     508:	2f 92       	push	r2
     50a:	3f 92       	push	r3
     50c:	4f 92       	push	r4
     50e:	5f 92       	push	r5
     510:	6f 92       	push	r6
     512:	7f 92       	push	r7
     514:	8f 92       	push	r8
     516:	9f 92       	push	r9
     518:	af 92       	push	r10
     51a:	bf 92       	push	r11
     51c:	cf 92       	push	r12
     51e:	df 92       	push	r13
     520:	ef 92       	push	r14
     522:	ff 92       	push	r15
     524:	0f 93       	push	r16
     526:	1f 93       	push	r17
     528:	cf 93       	push	r28
     52a:	df 93       	push	r29
     52c:	88 2e       	mov	r8, r24
     52e:	96 2e       	mov	r9, r22
     530:	1a 01       	movw	r2, r20
     532:	28 01       	movw	r4, r16
     534:	39 01       	movw	r6, r18
     536:	87 01       	movw	r16, r14
     538:	61 e0       	ldi	r22, 0x01	; 1
     53a:	70 e0       	ldi	r23, 0x00	; 0
     53c:	84 e0       	ldi	r24, 0x04	; 4
     53e:	90 e0       	ldi	r25, 0x00	; 0
     540:	0e 94 13 2e 	call	0x5c26	; 0x5c26 <calloc>
     544:	ec 01       	movw	r28, r24
     546:	00 97       	sbiw	r24, 0x00	; 0
     548:	79 f1       	breq	.+94     	; 0x5a8 <co2Reader_create+0xa0>
     54a:	fc 01       	movw	r30, r24
     54c:	11 92       	st	Z+, r1
     54e:	11 92       	st	Z+, r1
     550:	7f 01       	movw	r14, r30
     552:	30 92 c5 08 	sts	0x08C5, r3	; 0x8008c5 <_startMeasureEventGroup+0x1>
     556:	20 92 c4 08 	sts	0x08C4, r2	; 0x8008c4 <_startMeasureEventGroup>
     55a:	40 92 c0 08 	sts	0x08C0, r4	; 0x8008c0 <_startMeasureBit>
     55e:	50 92 c1 08 	sts	0x08C1, r5	; 0x8008c1 <_startMeasureBit+0x1>
     562:	60 92 c2 08 	sts	0x08C2, r6	; 0x8008c2 <_startMeasureBit+0x2>
     566:	70 92 c3 08 	sts	0x08C3, r7	; 0x8008c3 <_startMeasureBit+0x3>
     56a:	10 93 bf 08 	sts	0x08BF, r17	; 0x8008bf <_readyEventGroup+0x1>
     56e:	00 93 be 08 	sts	0x08BE, r16	; 0x8008be <_readyEventGroup>
     572:	a0 92 ba 08 	sts	0x08BA, r10	; 0x8008ba <_readyBit>
     576:	b0 92 bb 08 	sts	0x08BB, r11	; 0x8008bb <_readyBit+0x1>
     57a:	c0 92 bc 08 	sts	0x08BC, r12	; 0x8008bc <_readyBit+0x2>
     57e:	d0 92 bd 08 	sts	0x08BD, r13	; 0x8008bd <_readyBit+0x3>
     582:	63 e7       	ldi	r22, 0x73	; 115
     584:	72 e0       	ldi	r23, 0x02	; 2
     586:	83 e0       	ldi	r24, 0x03	; 3
     588:	0e 94 1d 26 	call	0x4c3a	; 0x4c3a <mh_z19_create>
     58c:	49 2d       	mov	r20, r9
     58e:	50 e0       	ldi	r21, 0x00	; 0
     590:	08 2d       	mov	r16, r8
     592:	9e 01       	movw	r18, r28
     594:	62 e8       	ldi	r22, 0x82	; 130
     596:	72 e0       	ldi	r23, 0x02	; 2
     598:	89 e3       	ldi	r24, 0x39	; 57
     59a:	93 e0       	ldi	r25, 0x03	; 3
     59c:	0e 94 81 14 	call	0x2902	; 0x2902 <xTaskCreate>
     5a0:	8c e8       	ldi	r24, 0x8C	; 140
     5a2:	92 e0       	ldi	r25, 0x02	; 2
     5a4:	0e 94 c4 2f 	call	0x5f88	; 0x5f88 <puts>
     5a8:	ce 01       	movw	r24, r28
     5aa:	df 91       	pop	r29
     5ac:	cf 91       	pop	r28
     5ae:	1f 91       	pop	r17
     5b0:	0f 91       	pop	r16
     5b2:	ff 90       	pop	r15
     5b4:	ef 90       	pop	r14
     5b6:	df 90       	pop	r13
     5b8:	cf 90       	pop	r12
     5ba:	bf 90       	pop	r11
     5bc:	af 90       	pop	r10
     5be:	9f 90       	pop	r9
     5c0:	8f 90       	pop	r8
     5c2:	7f 90       	pop	r7
     5c4:	6f 90       	pop	r6
     5c6:	5f 90       	pop	r5
     5c8:	4f 90       	pop	r4
     5ca:	3f 90       	pop	r3
     5cc:	2f 90       	pop	r2
     5ce:	08 95       	ret

000005d0 <co2Reader_measure>:
}

//actual task, methods devided so that it is possible to test


void co2Reader_measure(co2reader_t self) {
     5d0:	cf 92       	push	r12
     5d2:	df 92       	push	r13
     5d4:	ef 92       	push	r14
     5d6:	ff 92       	push	r15
     5d8:	0f 93       	push	r16
     5da:	1f 93       	push	r17
     5dc:	cf 93       	push	r28
     5de:	df 93       	push	r29
     5e0:	ec 01       	movw	r28, r24
	
	EventBits_t uxBits = xEventGroupWaitBits(_startMeasureEventGroup, //eventGroup
     5e2:	40 91 c0 08 	lds	r20, 0x08C0	; 0x8008c0 <_startMeasureBit>
     5e6:	50 91 c1 08 	lds	r21, 0x08C1	; 0x8008c1 <_startMeasureBit+0x1>
     5ea:	60 91 c2 08 	lds	r22, 0x08C2	; 0x8008c2 <_startMeasureBit+0x2>
     5ee:	70 91 c3 08 	lds	r23, 0x08C3	; 0x8008c3 <_startMeasureBit+0x3>
     5f2:	cc 24       	eor	r12, r12
     5f4:	ca 94       	dec	r12
     5f6:	dc 2c       	mov	r13, r12
     5f8:	76 01       	movw	r14, r12
     5fa:	01 e0       	ldi	r16, 0x01	; 1
     5fc:	21 e0       	ldi	r18, 0x01	; 1
     5fe:	80 91 c4 08 	lds	r24, 0x08C4	; 0x8008c4 <_startMeasureEventGroup>
     602:	90 91 c5 08 	lds	r25, 0x08C5	; 0x8008c5 <_startMeasureEventGroup+0x1>
     606:	a3 d5       	rcall	.+2886   	; 0x114e <xEventGroupWaitBits>
	_startMeasureBit, //bits it is interested in
	pdTRUE, //clears the bits
	pdTRUE, //waits for both bits to be set
	portMAX_DELAY); //wait

	if ((uxBits & (_startMeasureBit)) == (_startMeasureBit)) {
     608:	00 91 c0 08 	lds	r16, 0x08C0	; 0x8008c0 <_startMeasureBit>
     60c:	10 91 c1 08 	lds	r17, 0x08C1	; 0x8008c1 <_startMeasureBit+0x1>
     610:	20 91 c2 08 	lds	r18, 0x08C2	; 0x8008c2 <_startMeasureBit+0x2>
     614:	30 91 c3 08 	lds	r19, 0x08C3	; 0x8008c3 <_startMeasureBit+0x3>
     618:	dc 01       	movw	r26, r24
     61a:	cb 01       	movw	r24, r22
     61c:	80 23       	and	r24, r16
     61e:	91 23       	and	r25, r17
     620:	a2 23       	and	r26, r18
     622:	b3 23       	and	r27, r19
     624:	08 17       	cp	r16, r24
     626:	19 07       	cpc	r17, r25
     628:	2a 07       	cpc	r18, r26
     62a:	3b 07       	cpc	r19, r27
     62c:	c9 f4       	brne	.+50     	; 0x660 <co2Reader_measure+0x90>

		mh_z19_take_meassuring();
     62e:	0e 94 4b 26 	call	0x4c96	; 0x4c96 <mh_z19_take_meassuring>
		//{
			//printf("There was no co2 measured\n");
		//}
		//my_co2_call_back(a);
		
		self->value = ppmValue;
     632:	80 91 b8 08 	lds	r24, 0x08B8	; 0x8008b8 <__data_end>
     636:	90 91 b9 08 	lds	r25, 0x08B9	; 0x8008b9 <__data_end+0x1>
     63a:	99 83       	std	Y+1, r25	; 0x01
     63c:	88 83       	st	Y, r24
		//vPortFree(a);

		printf("co2 done bit set\n");
     63e:	83 e9       	ldi	r24, 0x93	; 147
     640:	92 e0       	ldi	r25, 0x02	; 2
     642:	0e 94 c4 2f 	call	0x5f88	; 0x5f88 <puts>
		//set done bit so that device knows measurement is done
		xEventGroupSetBits(_readyEventGroup, _readyBit);
     646:	40 91 ba 08 	lds	r20, 0x08BA	; 0x8008ba <_readyBit>
     64a:	50 91 bb 08 	lds	r21, 0x08BB	; 0x8008bb <_readyBit+0x1>
     64e:	60 91 bc 08 	lds	r22, 0x08BC	; 0x8008bc <_readyBit+0x2>
     652:	70 91 bd 08 	lds	r23, 0x08BD	; 0x8008bd <_readyBit+0x3>
     656:	80 91 be 08 	lds	r24, 0x08BE	; 0x8008be <_readyEventGroup>
     65a:	90 91 bf 08 	lds	r25, 0x08BF	; 0x8008bf <_readyEventGroup+0x1>
     65e:	37 d6       	rcall	.+3182   	; 0x12ce <xEventGroupSetBits>
	}
}
     660:	df 91       	pop	r29
     662:	cf 91       	pop	r28
     664:	1f 91       	pop	r17
     666:	0f 91       	pop	r16
     668:	ff 90       	pop	r15
     66a:	ef 90       	pop	r14
     66c:	df 90       	pop	r13
     66e:	cf 90       	pop	r12
     670:	08 95       	ret

00000672 <co2Reader_executeTask>:
{	
	ppmValue = ppm;
	printf("CO2 in callback: %d", ppm);
}

void co2Reader_executeTask(void* self) {
     672:	ec 01       	movw	r28, r24
	
	//mh_z19_create(ser_USART3, my_co2_call_back);
	for (;;) {
		co2Reader_measure((co2reader_t)self);
     674:	ce 01       	movw	r24, r28
     676:	ac df       	rcall	.-168    	; 0x5d0 <co2Reader_measure>
     678:	fd cf       	rjmp	.-6      	; 0x674 <co2Reader_executeTask+0x2>

0000067a <co2Reader_getCO2>:
	}
}

uint16_t co2Reader_getCO2(co2reader_t self) {
	return self->value;
}
     67a:	fc 01       	movw	r30, r24
     67c:	80 81       	ld	r24, Z
     67e:	91 81       	ldd	r25, Z+1	; 0x01
     680:	08 95       	ret

00000682 <configuration_create>:
//it is created only once, before starting the scheduler + will never be destroyed
	_working = calloc(sizeof(bool), 1);
	_ventilation = calloc(sizeof(bool), 1);

	//by default, device should work, not to ventilate
	_working = true;
     682:	81 e0       	ldi	r24, 0x01	; 1
     684:	80 93 c9 08 	sts	0x08C9, r24	; 0x8008c9 <_working>
	_ventilation = false;
     688:	10 92 c8 08 	sts	0x08C8, r1	; 0x8008c8 <_ventilation>

	_semaphore = xSemaphoreCreateMutex();
     68c:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <xQueueCreateMutex>
     690:	90 93 c7 08 	sts	0x08C7, r25	; 0x8008c7 <_semaphore+0x1>
     694:	80 93 c6 08 	sts	0x08C6, r24	; 0x8008c6 <_semaphore>
     698:	08 95       	ret

0000069a <configuration_setWorking>:
}

//if the semaphore is initialized, take it and give it back, if not, just do the work 
void configuration_setWorking(bool value) {
     69a:	0f 93       	push	r16
     69c:	cf 93       	push	r28
	if (_semaphore != NULL) {
     69e:	20 91 c6 08 	lds	r18, 0x08C6	; 0x8008c6 <_semaphore>
     6a2:	30 91 c7 08 	lds	r19, 0x08C7	; 0x8008c7 <_semaphore+0x1>
     6a6:	21 15       	cp	r18, r1
     6a8:	31 05       	cpc	r19, r1
     6aa:	b1 f0       	breq	.+44     	; 0x6d8 <configuration_setWorking+0x3e>
     6ac:	c8 2f       	mov	r28, r24
		xSemaphoreTake(_semaphore, portMAX_DELAY);
     6ae:	4f ef       	ldi	r20, 0xFF	; 255
     6b0:	5f ef       	ldi	r21, 0xFF	; 255
     6b2:	ba 01       	movw	r22, r20
     6b4:	c9 01       	movw	r24, r18
     6b6:	0e 94 15 10 	call	0x202a	; 0x202a <xQueueSemaphoreTake>
		_working = value;
     6ba:	c0 93 c9 08 	sts	0x08C9, r28	; 0x8008c9 <_working>
		xSemaphoreGive(_semaphore);
     6be:	00 e0       	ldi	r16, 0x00	; 0
     6c0:	20 e0       	ldi	r18, 0x00	; 0
     6c2:	30 e0       	ldi	r19, 0x00	; 0
     6c4:	a9 01       	movw	r20, r18
     6c6:	60 e0       	ldi	r22, 0x00	; 0
     6c8:	70 e0       	ldi	r23, 0x00	; 0
     6ca:	80 91 c6 08 	lds	r24, 0x08C6	; 0x8008c6 <_semaphore>
     6ce:	90 91 c7 08 	lds	r25, 0x08C7	; 0x8008c7 <_semaphore+0x1>
     6d2:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <xQueueGenericSend>
     6d6:	02 c0       	rjmp	.+4      	; 0x6dc <configuration_setWorking+0x42>
	}
	else _working = value;
     6d8:	80 93 c9 08 	sts	0x08C9, r24	; 0x8008c9 <_working>
}
     6dc:	cf 91       	pop	r28
     6de:	0f 91       	pop	r16
     6e0:	08 95       	ret

000006e2 <configuration_getWorking>:

void configuration_getWorking(bool* working) {
     6e2:	0f 93       	push	r16
     6e4:	cf 93       	push	r28
     6e6:	df 93       	push	r29
	if (_semaphore != NULL) {
     6e8:	20 91 c6 08 	lds	r18, 0x08C6	; 0x8008c6 <_semaphore>
     6ec:	30 91 c7 08 	lds	r19, 0x08C7	; 0x8008c7 <_semaphore+0x1>
     6f0:	21 15       	cp	r18, r1
     6f2:	31 05       	cpc	r19, r1
     6f4:	b9 f0       	breq	.+46     	; 0x724 <configuration_getWorking+0x42>
     6f6:	ec 01       	movw	r28, r24
		xSemaphoreTake(_semaphore, portMAX_DELAY);
     6f8:	4f ef       	ldi	r20, 0xFF	; 255
     6fa:	5f ef       	ldi	r21, 0xFF	; 255
     6fc:	ba 01       	movw	r22, r20
     6fe:	c9 01       	movw	r24, r18
     700:	0e 94 15 10 	call	0x202a	; 0x202a <xQueueSemaphoreTake>
		*working = _working;
     704:	80 91 c9 08 	lds	r24, 0x08C9	; 0x8008c9 <_working>
     708:	88 83       	st	Y, r24
		xSemaphoreGive(_semaphore);
     70a:	00 e0       	ldi	r16, 0x00	; 0
     70c:	20 e0       	ldi	r18, 0x00	; 0
     70e:	30 e0       	ldi	r19, 0x00	; 0
     710:	a9 01       	movw	r20, r18
     712:	60 e0       	ldi	r22, 0x00	; 0
     714:	70 e0       	ldi	r23, 0x00	; 0
     716:	80 91 c6 08 	lds	r24, 0x08C6	; 0x8008c6 <_semaphore>
     71a:	90 91 c7 08 	lds	r25, 0x08C7	; 0x8008c7 <_semaphore+0x1>
     71e:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <xQueueGenericSend>
     722:	04 c0       	rjmp	.+8      	; 0x72c <configuration_getWorking+0x4a>
	}
	else *working = _working;
     724:	20 91 c9 08 	lds	r18, 0x08C9	; 0x8008c9 <_working>
     728:	fc 01       	movw	r30, r24
     72a:	20 83       	st	Z, r18
}
     72c:	df 91       	pop	r29
     72e:	cf 91       	pop	r28
     730:	0f 91       	pop	r16
     732:	08 95       	ret

00000734 <configuration_setVentilation>:

void configuration_setVentilation(bool value) {
     734:	0f 93       	push	r16
     736:	cf 93       	push	r28
	if (_semaphore != NULL) {
     738:	20 91 c6 08 	lds	r18, 0x08C6	; 0x8008c6 <_semaphore>
     73c:	30 91 c7 08 	lds	r19, 0x08C7	; 0x8008c7 <_semaphore+0x1>
     740:	21 15       	cp	r18, r1
     742:	31 05       	cpc	r19, r1
     744:	b1 f0       	breq	.+44     	; 0x772 <configuration_setVentilation+0x3e>
     746:	c8 2f       	mov	r28, r24
		xSemaphoreTake(_semaphore, portMAX_DELAY);
     748:	4f ef       	ldi	r20, 0xFF	; 255
     74a:	5f ef       	ldi	r21, 0xFF	; 255
     74c:	ba 01       	movw	r22, r20
     74e:	c9 01       	movw	r24, r18
     750:	0e 94 15 10 	call	0x202a	; 0x202a <xQueueSemaphoreTake>
		_ventilation = value;
     754:	c0 93 c8 08 	sts	0x08C8, r28	; 0x8008c8 <_ventilation>
		xSemaphoreGive(_semaphore);
     758:	00 e0       	ldi	r16, 0x00	; 0
     75a:	20 e0       	ldi	r18, 0x00	; 0
     75c:	30 e0       	ldi	r19, 0x00	; 0
     75e:	a9 01       	movw	r20, r18
     760:	60 e0       	ldi	r22, 0x00	; 0
     762:	70 e0       	ldi	r23, 0x00	; 0
     764:	80 91 c6 08 	lds	r24, 0x08C6	; 0x8008c6 <_semaphore>
     768:	90 91 c7 08 	lds	r25, 0x08C7	; 0x8008c7 <_semaphore+0x1>
     76c:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <xQueueGenericSend>
     770:	02 c0       	rjmp	.+4      	; 0x776 <configuration_setVentilation+0x42>
	}
	else _ventilation = value;
     772:	80 93 c8 08 	sts	0x08C8, r24	; 0x8008c8 <_ventilation>
}
     776:	cf 91       	pop	r28
     778:	0f 91       	pop	r16
     77a:	08 95       	ret

0000077c <configuration_getVentilation>:

void configuration_getVentilation(bool* ventilation) {
     77c:	0f 93       	push	r16
     77e:	cf 93       	push	r28
     780:	df 93       	push	r29
	if (_semaphore != NULL) {
     782:	20 91 c6 08 	lds	r18, 0x08C6	; 0x8008c6 <_semaphore>
     786:	30 91 c7 08 	lds	r19, 0x08C7	; 0x8008c7 <_semaphore+0x1>
     78a:	21 15       	cp	r18, r1
     78c:	31 05       	cpc	r19, r1
     78e:	b9 f0       	breq	.+46     	; 0x7be <configuration_getVentilation+0x42>
     790:	ec 01       	movw	r28, r24
		xSemaphoreTake(_semaphore, portMAX_DELAY);
     792:	4f ef       	ldi	r20, 0xFF	; 255
     794:	5f ef       	ldi	r21, 0xFF	; 255
     796:	ba 01       	movw	r22, r20
     798:	c9 01       	movw	r24, r18
     79a:	0e 94 15 10 	call	0x202a	; 0x202a <xQueueSemaphoreTake>
		*ventilation = _ventilation;
     79e:	80 91 c8 08 	lds	r24, 0x08C8	; 0x8008c8 <_ventilation>
     7a2:	88 83       	st	Y, r24
		xSemaphoreGive(_semaphore);
     7a4:	00 e0       	ldi	r16, 0x00	; 0
     7a6:	20 e0       	ldi	r18, 0x00	; 0
     7a8:	30 e0       	ldi	r19, 0x00	; 0
     7aa:	a9 01       	movw	r20, r18
     7ac:	60 e0       	ldi	r22, 0x00	; 0
     7ae:	70 e0       	ldi	r23, 0x00	; 0
     7b0:	80 91 c6 08 	lds	r24, 0x08C6	; 0x8008c6 <_semaphore>
     7b4:	90 91 c7 08 	lds	r25, 0x08C7	; 0x8008c7 <_semaphore+0x1>
     7b8:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <xQueueGenericSend>
     7bc:	04 c0       	rjmp	.+8      	; 0x7c6 <configuration_getVentilation+0x4a>
	}
	else *ventilation = _ventilation;
     7be:	20 91 c8 08 	lds	r18, 0x08C8	; 0x8008c8 <_ventilation>
     7c2:	fc 01       	movw	r30, r24
     7c4:	20 83       	st	Z, r18
}
     7c6:	df 91       	pop	r29
     7c8:	cf 91       	pop	r28
     7ca:	0f 91       	pop	r16
     7cc:	08 95       	ret

000007ce <currentCondition_create>:
	//free(self->co2Data);
	//free(self->temperatureData);
	//free(self->humidityData);
	//free(self->soundData);
	//free(self);
	vPortFree(self);//maybe use this
     7ce:	61 e0       	ldi	r22, 0x01	; 1
     7d0:	70 e0       	ldi	r23, 0x00	; 0
     7d2:	88 e0       	ldi	r24, 0x08	; 8
     7d4:	90 e0       	ldi	r25, 0x00	; 0
     7d6:	0e 94 13 2e 	call	0x5c26	; 0x5c26 <calloc>
     7da:	00 97       	sbiw	r24, 0x00	; 0
     7dc:	39 f0       	breq	.+14     	; 0x7ec <currentCondition_create+0x1e>
     7de:	fc 01       	movw	r30, r24
     7e0:	13 82       	std	Z+3, r1	; 0x03
     7e2:	12 82       	std	Z+2, r1	; 0x02
     7e4:	15 82       	std	Z+5, r1	; 0x05
     7e6:	14 82       	std	Z+4, r1	; 0x04
     7e8:	11 82       	std	Z+1, r1	; 0x01
     7ea:	10 82       	st	Z, r1
     7ec:	08 95       	ret

000007ee <currentCondition_setCO2>:
     7ee:	00 97       	sbiw	r24, 0x00	; 0
     7f0:	19 f0       	breq	.+6      	; 0x7f8 <currentCondition_setCO2+0xa>
     7f2:	fc 01       	movw	r30, r24
     7f4:	71 83       	std	Z+1, r23	; 0x01
     7f6:	60 83       	st	Z, r22
     7f8:	08 95       	ret

000007fa <currentCondition_setHumidity>:
     7fa:	00 97       	sbiw	r24, 0x00	; 0
     7fc:	19 f0       	breq	.+6      	; 0x804 <currentCondition_setHumidity+0xa>
     7fe:	fc 01       	movw	r30, r24
     800:	75 83       	std	Z+5, r23	; 0x05
     802:	64 83       	std	Z+4, r22	; 0x04
     804:	08 95       	ret

00000806 <currentCondition_setTemperature>:
     806:	00 97       	sbiw	r24, 0x00	; 0
     808:	19 f0       	breq	.+6      	; 0x810 <currentCondition_setTemperature+0xa>
     80a:	fc 01       	movw	r30, r24
     80c:	73 83       	std	Z+3, r23	; 0x03
     80e:	62 83       	std	Z+2, r22	; 0x02
     810:	08 95       	ret

00000812 <getcurrentConditionPayload>:
}
lora_payload_t getcurrentConditionPayload(currentCondition_t self)
{
     812:	fc 01       	movw	r30, r24
     814:	db 01       	movw	r26, r22
	lora_payload_t payload;
	payload.port_no = 1;
	payload.len = 4;
	
	payload.bytes[0] = self->temperatureData >> 8;
     816:	12 96       	adiw	r26, 0x02	; 2
     818:	2c 91       	ld	r18, X
     81a:	12 97       	sbiw	r26, 0x02	; 2
     81c:	13 96       	adiw	r26, 0x03	; 3
     81e:	3c 91       	ld	r19, X
     820:	13 97       	sbiw	r26, 0x03	; 3
	payload.bytes[1] = self->temperatureData & 0xFF;

	payload.bytes[2] = self->humidityData >> 8;
     822:	14 96       	adiw	r26, 0x04	; 4
     824:	8c 91       	ld	r24, X
     826:	14 97       	sbiw	r26, 0x04	; 4
     828:	15 96       	adiw	r26, 0x05	; 5
     82a:	9c 91       	ld	r25, X
	payload.bytes[3] = self->humidityData & 0xFF;
	return payload;
     82c:	41 e0       	ldi	r20, 0x01	; 1
     82e:	40 83       	st	Z, r20
     830:	44 e0       	ldi	r20, 0x04	; 4
     832:	41 83       	std	Z+1, r20	; 0x01
     834:	32 83       	std	Z+2, r19	; 0x02
     836:	23 83       	std	Z+3, r18	; 0x03
     838:	94 83       	std	Z+4, r25	; 0x04
     83a:	85 83       	std	Z+5, r24	; 0x05
	
     83c:	cf 01       	movw	r24, r30
     83e:	08 95       	ret

00000840 <device_create>:
	//free(self);*/
//}

currentCondition_t device_getCurrentCondition(device_t self) {
	return self->currentCondition;
}
     840:	2f 92       	push	r2
     842:	3f 92       	push	r3
     844:	4f 92       	push	r4
     846:	5f 92       	push	r5
     848:	6f 92       	push	r6
     84a:	7f 92       	push	r7
     84c:	8f 92       	push	r8
     84e:	9f 92       	push	r9
     850:	af 92       	push	r10
     852:	bf 92       	push	r11
     854:	cf 92       	push	r12
     856:	df 92       	push	r13
     858:	ef 92       	push	r14
     85a:	ff 92       	push	r15
     85c:	0f 93       	push	r16
     85e:	1f 93       	push	r17
     860:	cf 93       	push	r28
     862:	df 93       	push	r29
     864:	00 d0       	rcall	.+0      	; 0x866 <device_create+0x26>
     866:	1f 92       	push	r1
     868:	cd b7       	in	r28, 0x3d	; 61
     86a:	de b7       	in	r29, 0x3e	; 62
     86c:	28 2e       	mov	r2, r24
     86e:	36 2e       	mov	r3, r22
     870:	5c 83       	std	Y+4, r21	; 0x04
     872:	4b 83       	std	Y+3, r20	; 0x03
     874:	28 01       	movw	r4, r16
     876:	39 01       	movw	r6, r18
     878:	61 e0       	ldi	r22, 0x01	; 1
     87a:	70 e0       	ldi	r23, 0x00	; 0
     87c:	88 e0       	ldi	r24, 0x08	; 8
     87e:	90 e0       	ldi	r25, 0x00	; 0
     880:	0e 94 13 2e 	call	0x5c26	; 0x5c26 <calloc>
     884:	9a 83       	std	Y+2, r25	; 0x02
     886:	89 83       	std	Y+1, r24	; 0x01
     888:	00 97       	sbiw	r24, 0x00	; 0
     88a:	09 f4       	brne	.+2      	; 0x88e <device_create+0x4e>
     88c:	3e c0       	rjmp	.+124    	; 0x90a <device_create+0xca>
     88e:	fc 01       	movw	r30, r24
     890:	91 82       	std	Z+1, r9	; 0x01
     892:	80 82       	st	Z, r8
     894:	8a 8d       	ldd	r24, Y+26	; 0x1a
     896:	9b 8d       	ldd	r25, Y+27	; 0x1b
     898:	93 83       	std	Z+3, r25	; 0x03
     89a:	82 83       	std	Z+2, r24	; 0x02
     89c:	98 df       	rcall	.-208    	; 0x7ce <currentCondition_create>
     89e:	e9 81       	ldd	r30, Y+1	; 0x01
     8a0:	fa 81       	ldd	r31, Y+2	; 0x02
     8a2:	95 83       	std	Z+5, r25	; 0x05
     8a4:	84 83       	std	Z+4, r24	; 0x04
     8a6:	8b 81       	ldd	r24, Y+3	; 0x03
     8a8:	9c 81       	ldd	r25, Y+4	; 0x04
     8aa:	90 93 ed 08 	sts	0x08ED, r25	; 0x8008ed <_startMeasureEventGroup+0x1>
     8ae:	80 93 ec 08 	sts	0x08EC, r24	; 0x8008ec <_startMeasureEventGroup>
     8b2:	40 92 e8 08 	sts	0x08E8, r4	; 0x8008e8 <_startMeasureBit>
     8b6:	50 92 e9 08 	sts	0x08E9, r5	; 0x8008e9 <_startMeasureBit+0x1>
     8ba:	60 92 ea 08 	sts	0x08EA, r6	; 0x8008ea <_startMeasureBit+0x2>
     8be:	70 92 eb 08 	sts	0x08EB, r7	; 0x8008eb <_startMeasureBit+0x3>
     8c2:	f0 92 e7 08 	sts	0x08E7, r15	; 0x8008e7 <_readyEventGroup+0x1>
     8c6:	e0 92 e6 08 	sts	0x08E6, r14	; 0x8008e6 <_readyEventGroup>
     8ca:	a0 92 e2 08 	sts	0x08E2, r10	; 0x8008e2 <_readyBit>
     8ce:	b0 92 e3 08 	sts	0x08E3, r11	; 0x8008e3 <_readyBit+0x1>
     8d2:	c0 92 e4 08 	sts	0x08E4, r12	; 0x8008e4 <_readyBit+0x2>
     8d6:	d0 92 e5 08 	sts	0x08E5, r13	; 0x8008e5 <_readyBit+0x3>
     8da:	8c 8d       	ldd	r24, Y+28	; 0x1c
     8dc:	9d 8d       	ldd	r25, Y+29	; 0x1d
     8de:	90 93 e1 08 	sts	0x08E1, r25	; 0x8008e1 <_uplinkmessageBuffer+0x1>
     8e2:	80 93 e0 08 	sts	0x08E0, r24	; 0x8008e0 <_uplinkmessageBuffer>
     8e6:	43 2d       	mov	r20, r3
     8e8:	50 e0       	ldi	r21, 0x00	; 0
     8ea:	7f 01       	movw	r14, r30
     8ec:	96 e0       	ldi	r25, 0x06	; 6
     8ee:	e9 0e       	add	r14, r25
     8f0:	f1 1c       	adc	r15, r1
     8f2:	02 2d       	mov	r16, r2
     8f4:	9f 01       	movw	r18, r30
     8f6:	64 ea       	ldi	r22, 0xA4	; 164
     8f8:	72 e0       	ldi	r23, 0x02	; 2
     8fa:	80 e9       	ldi	r24, 0x90	; 144
     8fc:	95 e0       	ldi	r25, 0x05	; 5
     8fe:	0e 94 81 14 	call	0x2902	; 0x2902 <xTaskCreate>
     902:	8b ea       	ldi	r24, 0xAB	; 171
     904:	92 e0       	ldi	r25, 0x02	; 2
     906:	0e 94 c4 2f 	call	0x5f88	; 0x5f88 <puts>
     90a:	89 81       	ldd	r24, Y+1	; 0x01
     90c:	9a 81       	ldd	r25, Y+2	; 0x02
     90e:	0f 90       	pop	r0
     910:	0f 90       	pop	r0
     912:	0f 90       	pop	r0
     914:	0f 90       	pop	r0
     916:	df 91       	pop	r29
     918:	cf 91       	pop	r28
     91a:	1f 91       	pop	r17
     91c:	0f 91       	pop	r16
     91e:	ff 90       	pop	r15
     920:	ef 90       	pop	r14
     922:	df 90       	pop	r13
     924:	cf 90       	pop	r12
     926:	bf 90       	pop	r11
     928:	af 90       	pop	r10
     92a:	9f 90       	pop	r9
     92c:	8f 90       	pop	r8
     92e:	7f 90       	pop	r7
     930:	6f 90       	pop	r6
     932:	5f 90       	pop	r5
     934:	4f 90       	pop	r4
     936:	3f 90       	pop	r3
     938:	2f 90       	pop	r2
     93a:	08 95       	ret

0000093c <device_setHumidityToCurrent>:

void device_setHumidityToCurrent(device_t self, uint16_t value)
{
	currentCondition_setHumidity(self->currentCondition,value);
     93c:	fc 01       	movw	r30, r24
     93e:	84 81       	ldd	r24, Z+4	; 0x04
     940:	95 81       	ldd	r25, Z+5	; 0x05
     942:	5b cf       	rjmp	.-330    	; 0x7fa <currentCondition_setHumidity>
     944:	08 95       	ret

00000946 <device_getHumidityData>:
}


uint16_t device_getHumidityData(device_t self)
{
	if (self->humAndTempReader!=NULL)
     946:	fc 01       	movw	r30, r24
     948:	82 81       	ldd	r24, Z+2	; 0x02
     94a:	93 81       	ldd	r25, Z+3	; 0x03
     94c:	00 97       	sbiw	r24, 0x00	; 0
     94e:	11 f0       	breq	.+4      	; 0x954 <device_getHumidityData+0xe>
	{
		return humAndTempReader_getHumidity(self->humAndTempReader);
     950:	6a c2       	rjmp	.+1236   	; 0xe26 <humAndTempReader_getHumidity>
     952:	08 95       	ret
	}
	else
	return -1;
     954:	8f ef       	ldi	r24, 0xFF	; 255
     956:	9f ef       	ldi	r25, 0xFF	; 255
}
     958:	08 95       	ret

0000095a <device_setCO2ToCurrent>:

void device_setCO2ToCurrent(device_t self, uint16_t value) {
	currentCondition_setCO2(self->currentCondition, value);
     95a:	fc 01       	movw	r30, r24
     95c:	84 81       	ldd	r24, Z+4	; 0x04
     95e:	95 81       	ldd	r25, Z+5	; 0x05
     960:	46 cf       	rjmp	.-372    	; 0x7ee <currentCondition_setCO2>
     962:	08 95       	ret

00000964 <device_getCO2Data>:
}

uint16_t device_getCO2Data(device_t self) {
	if (self->co2reader != NULL)
     964:	fc 01       	movw	r30, r24
     966:	80 81       	ld	r24, Z
     968:	91 81       	ldd	r25, Z+1	; 0x01
     96a:	00 97       	sbiw	r24, 0x00	; 0
     96c:	11 f0       	breq	.+4      	; 0x972 <device_getCO2Data+0xe>
		return co2Reader_getCO2(self->co2reader);
     96e:	85 ce       	rjmp	.-758    	; 0x67a <co2Reader_getCO2>
     970:	08 95       	ret
	else return -1;
     972:	8f ef       	ldi	r24, 0xFF	; 255
     974:	9f ef       	ldi	r25, 0xFF	; 255
}
     976:	08 95       	ret

00000978 <device_setTemperatureToCurrent>:

void device_setTemperatureToCurrent(device_t self, int16_t value)
{
	
	currentCondition_setTemperature(self->currentCondition,value);
     978:	fc 01       	movw	r30, r24
     97a:	84 81       	ldd	r24, Z+4	; 0x04
     97c:	95 81       	ldd	r25, Z+5	; 0x05
     97e:	43 cf       	rjmp	.-378    	; 0x806 <currentCondition_setTemperature>
     980:	08 95       	ret

00000982 <device_getTemperatureData>:
}


int16_t device_getTemperatureData(device_t self)
{
	if (self->humAndTempReader!=NULL)
     982:	fc 01       	movw	r30, r24
     984:	82 81       	ldd	r24, Z+2	; 0x02
     986:	93 81       	ldd	r25, Z+3	; 0x03
     988:	00 97       	sbiw	r24, 0x00	; 0
     98a:	11 f0       	breq	.+4      	; 0x990 <device_getTemperatureData+0xe>
	{
		return humAndTempReader_getTemperature(self->humAndTempReader);
     98c:	50 c2       	rjmp	.+1184   	; 0xe2e <humAndTempReader_getTemperature>
     98e:	08 95       	ret
	}
	else
	return -1;
     990:	8f ef       	ldi	r24, 0xFF	; 255
     992:	9f ef       	ldi	r25, 0xFF	; 255
	
     994:	08 95       	ret

00000996 <device_startMeasuring>:
}

//devided so we can test


void device_startMeasuring(device_t self) {
     996:	af 92       	push	r10
     998:	bf 92       	push	r11
     99a:	cf 92       	push	r12
     99c:	df 92       	push	r13
     99e:	ef 92       	push	r14
     9a0:	ff 92       	push	r15
     9a2:	0f 93       	push	r16
     9a4:	1f 93       	push	r17
     9a6:	cf 93       	push	r28
     9a8:	df 93       	push	r29
     9aa:	cd b7       	in	r28, 0x3d	; 61
     9ac:	de b7       	in	r29, 0x3e	; 62
     9ae:	66 97       	sbiw	r28, 0x16	; 22
     9b0:	0f b6       	in	r0, 0x3f	; 63
     9b2:	f8 94       	cli
     9b4:	de bf       	out	0x3e, r29	; 62
     9b6:	0f be       	out	0x3f, r0	; 63
     9b8:	cd bf       	out	0x3d, r28	; 61
     9ba:	5c 01       	movw	r10, r24
	//we should first check if device is on, get that from lora and add new eventBit 
	
	bool* works = pvPortMalloc(sizeof(bool));
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	6c d5       	rcall	.+2776   	; 0x149a <pvPortMalloc>
     9c2:	8c 01       	movw	r16, r24
	configuration_getWorking(works);
     9c4:	8e de       	rcall	.-740    	; 0x6e2 <configuration_getWorking>
     9c6:	f8 01       	movw	r30, r16
	if (*works == true)
     9c8:	80 81       	ld	r24, Z
     9ca:	88 23       	and	r24, r24
     9cc:	09 f4       	brne	.+2      	; 0x9d0 <device_startMeasuring+0x3a>
     9ce:	91 c0       	rjmp	.+290    	; 0xaf2 <device_startMeasuring+0x15c>
     9d0:	40 91 e8 08 	lds	r20, 0x08E8	; 0x8008e8 <_startMeasureBit>
	{

	//if ventilation needed -> ventilate 

	//tell sensors to start meassuring 
	xEventGroupSetBits(_startMeasureEventGroup, _startMeasureBit);
     9d4:	50 91 e9 08 	lds	r21, 0x08E9	; 0x8008e9 <_startMeasureBit+0x1>
     9d8:	60 91 ea 08 	lds	r22, 0x08EA	; 0x8008ea <_startMeasureBit+0x2>
     9dc:	70 91 eb 08 	lds	r23, 0x08EB	; 0x8008eb <_startMeasureBit+0x3>
     9e0:	80 91 ec 08 	lds	r24, 0x08EC	; 0x8008ec <_startMeasureEventGroup>
     9e4:	90 91 ed 08 	lds	r25, 0x08ED	; 0x8008ed <_startMeasureEventGroup+0x1>
     9e8:	72 d4       	rcall	.+2276   	; 0x12ce <xEventGroupSetBits>
     9ea:	85 eb       	ldi	r24, 0xB5	; 181
	printf("device has set bits\n");
     9ec:	92 e0       	ldi	r25, 0x02	; 2
     9ee:	0e 94 c4 2f 	call	0x5f88	; 0x5f88 <puts>
     9f2:	40 91 e2 08 	lds	r20, 0x08E2	; 0x8008e2 <_readyBit>

	//wait for sensors to read data
	EventBits_t uxBits = xEventGroupWaitBits(_readyEventGroup, //eventGroup it is interested in
     9f6:	50 91 e3 08 	lds	r21, 0x08E3	; 0x8008e3 <_readyBit+0x1>
     9fa:	60 91 e4 08 	lds	r22, 0x08E4	; 0x8008e4 <_readyBit+0x2>
     9fe:	70 91 e5 08 	lds	r23, 0x08E5	; 0x8008e5 <_readyBit+0x3>
     a02:	cc 24       	eor	r12, r12
     a04:	ca 94       	dec	r12
     a06:	dc 2c       	mov	r13, r12
     a08:	76 01       	movw	r14, r12
     a0a:	01 e0       	ldi	r16, 0x01	; 1
     a0c:	21 e0       	ldi	r18, 0x01	; 1
     a0e:	80 91 e6 08 	lds	r24, 0x08E6	; 0x8008e6 <_readyEventGroup>
     a12:	90 91 e7 08 	lds	r25, 0x08E7	; 0x8008e7 <_readyEventGroup+0x1>
     a16:	9b d3       	rcall	.+1846   	; 0x114e <xEventGroupWaitBits>
     a18:	00 91 e2 08 	lds	r16, 0x08E2	; 0x8008e2 <_readyBit>
		_readyBit, //bits it is interested in
		pdTRUE, //clears the bits 
		pdTRUE, //waits for both bits to be set
		portMAX_DELAY); //waits forever if needed

	if ((uxBits & (_readyBit)) == (_readyBit)) {
     a1c:	10 91 e3 08 	lds	r17, 0x08E3	; 0x8008e3 <_readyBit+0x1>
     a20:	20 91 e4 08 	lds	r18, 0x08E4	; 0x8008e4 <_readyBit+0x2>
     a24:	30 91 e5 08 	lds	r19, 0x08E5	; 0x8008e5 <_readyBit+0x3>
     a28:	dc 01       	movw	r26, r24
     a2a:	cb 01       	movw	r24, r22
     a2c:	80 23       	and	r24, r16
     a2e:	91 23       	and	r25, r17
     a30:	a2 23       	and	r26, r18
     a32:	b3 23       	and	r27, r19
     a34:	08 17       	cp	r16, r24
     a36:	19 07       	cpc	r17, r25
     a38:	2a 07       	cpc	r18, r26
     a3a:	3b 07       	cpc	r19, r27
     a3c:	09 f0       	breq	.+2      	; 0xa40 <device_startMeasuring+0xaa>
     a3e:	5f c0       	rjmp	.+190    	; 0xafe <device_startMeasuring+0x168>
		device_setCO2ToCurrent(self, device_getCO2Data(self));
     a40:	c5 01       	movw	r24, r10
     a42:	90 df       	rcall	.-224    	; 0x964 <device_getCO2Data>
     a44:	bc 01       	movw	r22, r24
     a46:	c5 01       	movw	r24, r10
     a48:	88 df       	rcall	.-240    	; 0x95a <device_setCO2ToCurrent>
		device_setTemperatureToCurrent(self, device_getTemperatureData(self));
     a4a:	c5 01       	movw	r24, r10
     a4c:	9a df       	rcall	.-204    	; 0x982 <device_getTemperatureData>
     a4e:	bc 01       	movw	r22, r24
     a50:	c5 01       	movw	r24, r10
     a52:	92 df       	rcall	.-220    	; 0x978 <device_setTemperatureToCurrent>
		device_setHumidityToCurrent(self, device_getHumidityData(self));
     a54:	c5 01       	movw	r24, r10
     a56:	77 df       	rcall	.-274    	; 0x946 <device_getHumidityData>
     a58:	bc 01       	movw	r22, r24
     a5a:	c5 01       	movw	r24, r10
     a5c:	6f df       	rcall	.-290    	; 0x93c <device_setHumidityToCurrent>
     a5e:	89 ec       	ldi	r24, 0xC9	; 201
		
		printf("device got done bit\n");
     a60:	92 e0       	ldi	r25, 0x02	; 2
     a62:	0e 94 c4 2f 	call	0x5f88	; 0x5f88 <puts>
     a66:	c5 01       	movw	r24, r10
		
		printf("CO2 is: %u\n", device_getCO2Data(self));
     a68:	7d df       	rcall	.-262    	; 0x964 <device_getCO2Data>
     a6a:	9f 93       	push	r25
     a6c:	8f 93       	push	r24
     a6e:	8d ed       	ldi	r24, 0xDD	; 221
     a70:	92 e0       	ldi	r25, 0x02	; 2
     a72:	9f 93       	push	r25
     a74:	8f 93       	push	r24
     a76:	0e 94 b1 2f 	call	0x5f62	; 0x5f62 <printf>
     a7a:	c5 01       	movw	r24, r10
		printf("Temperature is: %d\n", device_getTemperatureData(self));
     a7c:	82 df       	rcall	.-252    	; 0x982 <device_getTemperatureData>
     a7e:	9f 93       	push	r25
     a80:	8f 93       	push	r24
     a82:	89 ee       	ldi	r24, 0xE9	; 233
     a84:	92 e0       	ldi	r25, 0x02	; 2
     a86:	9f 93       	push	r25
     a88:	8f 93       	push	r24
     a8a:	0e 94 b1 2f 	call	0x5f62	; 0x5f62 <printf>
     a8e:	c5 01       	movw	r24, r10
		printf("Humidity is: %u\n", device_getHumidityData(self));
     a90:	5a df       	rcall	.-332    	; 0x946 <device_getHumidityData>
     a92:	9f 93       	push	r25
     a94:	8f 93       	push	r24
     a96:	8d ef       	ldi	r24, 0xFD	; 253
     a98:	92 e0       	ldi	r25, 0x02	; 2
     a9a:	9f 93       	push	r25
     a9c:	8f 93       	push	r24
     a9e:	0e 94 b1 2f 	call	0x5f62	; 0x5f62 <printf>
     aa2:	f5 01       	movw	r30, r10
		
		
		/*Perhaps loraPayload is not a good idea to be here*/
		_uplink_payload = getcurrentConditionPayload(self->currentCondition);
     aa4:	64 81       	ldd	r22, Z+4	; 0x04
     aa6:	75 81       	ldd	r23, Z+5	; 0x05
     aa8:	ce 01       	movw	r24, r28
     aaa:	01 96       	adiw	r24, 0x01	; 1
     aac:	b2 de       	rcall	.-668    	; 0x812 <getcurrentConditionPayload>
     aae:	86 e1       	ldi	r24, 0x16	; 22
     ab0:	fe 01       	movw	r30, r28
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	aa ec       	ldi	r26, 0xCA	; 202
     ab6:	b8 e0       	ldi	r27, 0x08	; 8
     ab8:	01 90       	ld	r0, Z+
     aba:	0d 92       	st	X+, r0
     abc:	8a 95       	dec	r24
     abe:	e1 f7       	brne	.-8      	; 0xab8 <device_startMeasuring+0x122>
     ac0:	68 ee       	ldi	r22, 0xE8	; 232
     ac2:	73 e0       	ldi	r23, 0x03	; 3
		//if(_uplink_payload!=NULL)
		//{
		vTaskDelay(1000);
     ac4:	80 e0       	ldi	r24, 0x00	; 0
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	0e 94 41 17 	call	0x2e82	; 0x2e82 <vTaskDelay>
     acc:	0f ef       	ldi	r16, 0xFF	; 255
     ace:	1f ef       	ldi	r17, 0xFF	; 255

		xMessageBufferSend(_uplinkmessageBuffer,(void*) &_uplink_payload,sizeof(_uplink_payload),portMAX_DELAY);
     ad0:	98 01       	movw	r18, r16
     ad2:	46 e1       	ldi	r20, 0x16	; 22
     ad4:	50 e0       	ldi	r21, 0x00	; 0
     ad6:	6a ec       	ldi	r22, 0xCA	; 202
     ad8:	78 e0       	ldi	r23, 0x08	; 8
     ada:	80 91 e0 08 	lds	r24, 0x08E0	; 0x8008e0 <_uplinkmessageBuffer>
     ade:	90 91 e1 08 	lds	r25, 0x08E1	; 0x8008e1 <_uplinkmessageBuffer+0x1>
     ae2:	0e 94 51 12 	call	0x24a2	; 0x24a2 <xStreamBufferSend>
     ae6:	0f b6       	in	r0, 0x3f	; 63
     ae8:	f8 94       	cli
     aea:	de bf       	out	0x3e, r29	; 62
     aec:	0f be       	out	0x3f, r0	; 63
     aee:	cd bf       	out	0x3d, r28	; 61
     af0:	06 c0       	rjmp	.+12     	; 0xafe <device_startMeasuring+0x168>
     af2:	68 e8       	ldi	r22, 0x88	; 136
     af4:	73 e1       	ldi	r23, 0x13	; 19
		//}
		//else printf("Error when making loraPayload");
	}
	//if the device is not on, wait a bit and check if anything is changed
	}
	else vTaskDelay(5000);
     af6:	80 e0       	ldi	r24, 0x00	; 0
     af8:	90 e0       	ldi	r25, 0x00	; 0
     afa:	0e 94 41 17 	call	0x2e82	; 0x2e82 <vTaskDelay>
     afe:	66 96       	adiw	r28, 0x16	; 22
     b00:	0f b6       	in	r0, 0x3f	; 63
}
     b02:	f8 94       	cli
     b04:	de bf       	out	0x3e, r29	; 62
     b06:	0f be       	out	0x3f, r0	; 63
     b08:	cd bf       	out	0x3d, r28	; 61
     b0a:	df 91       	pop	r29
     b0c:	cf 91       	pop	r28
     b0e:	1f 91       	pop	r17
     b10:	0f 91       	pop	r16
     b12:	ff 90       	pop	r15
     b14:	ef 90       	pop	r14
     b16:	df 90       	pop	r13
     b18:	cf 90       	pop	r12
     b1a:	bf 90       	pop	r11
     b1c:	af 90       	pop	r10
     b1e:	08 95       	ret

00000b20 <device_executeTask>:
     b20:	ec 01       	movw	r28, r24
     b22:	ce 01       	movw	r24, r28
	TaskHandle_t handleTask;
}device;

void device_executeTask(void* self) {
	for (;;)
	device_startMeasuring((device_t)self);
     b24:	38 df       	rcall	.-400    	; 0x996 <device_startMeasuring>
     b26:	fd cf       	rjmp	.-6      	; 0xb22 <device_executeTask+0x2>

00000b28 <lora_DownLinkHandler_create>:
		vTaskDelay(3000);
	}
}

void lora_DownLinkHandler_create(UBaseType_t lora_handler_task_priority, MessageBufferHandle_t xMessageBuffer)
{
     b28:	ef 92       	push	r14
     b2a:	ff 92       	push	r15
     b2c:	0f 93       	push	r16
     b2e:	9b 01       	movw	r18, r22
	
	//_isSet=isSet;
	xTaskCreate(
     b30:	e1 2c       	mov	r14, r1
     b32:	f1 2c       	mov	r15, r1
     b34:	08 2f       	mov	r16, r24
     b36:	48 e8       	ldi	r20, 0x88	; 136
     b38:	51 e0       	ldi	r21, 0x01	; 1
     b3a:	6e e0       	ldi	r22, 0x0E	; 14
     b3c:	73 e0       	ldi	r23, 0x03	; 3
     b3e:	8e e3       	ldi	r24, 0x3E	; 62
     b40:	96 e0       	ldi	r25, 0x06	; 6
     b42:	0e 94 81 14 	call	0x2902	; 0x2902 <xTaskCreate>
	,  configMINIMAL_STACK_SIZE+200  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  xMessageBuffer
	,  lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
	
}
     b46:	0f 91       	pop	r16
     b48:	ff 90       	pop	r15
     b4a:	ef 90       	pop	r14
     b4c:	08 95       	ret

00000b4e <lora_DownLinkHandler_task>:
		//}
	//}
//}

	void lora_DownLinkHandler_task(MessageBufferHandle_t xMessageBuffer)
	{
     b4e:	0f 93       	push	r16
     b50:	1f 93       	push	r17
     b52:	cf 93       	push	r28
     b54:	df 93       	push	r29
//
				//_lora_setup();
				
		//size_t xBytesReceived;
		//xBytesReceived = 
		xMessageBufferReceive(xMessageBuffer,(void*) &_downlink_payload,sizeof(lora_payload_t),portMAX_DELAY);
     b56:	0f ef       	ldi	r16, 0xFF	; 255
     b58:	1f ef       	ldi	r17, 0xFF	; 255
     b5a:	98 01       	movw	r18, r16
     b5c:	46 e1       	ldi	r20, 0x16	; 22
     b5e:	50 e0       	ldi	r21, 0x00	; 0
     b60:	6e ee       	ldi	r22, 0xEE	; 238
     b62:	78 e0       	ldi	r23, 0x08	; 8
     b64:	0e 94 3e 13 	call	0x267c	; 0x267c <xStreamBufferReceive>
		printf("PayLoad bytes are: %d, %d\n Payload lenght is %d\n", _downlink_payload.bytes[0] ,_downlink_payload.bytes[1],_downlink_payload.len);
     b68:	ce ee       	ldi	r28, 0xEE	; 238
     b6a:	d8 e0       	ldi	r29, 0x08	; 8
     b6c:	89 81       	ldd	r24, Y+1	; 0x01
     b6e:	1f 92       	push	r1
     b70:	8f 93       	push	r24
     b72:	8b 81       	ldd	r24, Y+3	; 0x03
     b74:	1f 92       	push	r1
     b76:	8f 93       	push	r24
     b78:	8a 81       	ldd	r24, Y+2	; 0x02
     b7a:	1f 92       	push	r1
     b7c:	8f 93       	push	r24
     b7e:	87 e1       	ldi	r24, 0x17	; 23
     b80:	93 e0       	ldi	r25, 0x03	; 3
     b82:	9f 93       	push	r25
     b84:	8f 93       	push	r24
     b86:	0e 94 b1 2f 	call	0x5f62	; 0x5f62 <printf>
		
		//Two bytes eg. 44/33
		if(_downlink_payload.len==2)
     b8a:	8d b7       	in	r24, 0x3d	; 61
     b8c:	9e b7       	in	r25, 0x3e	; 62
     b8e:	08 96       	adiw	r24, 0x08	; 8
     b90:	0f b6       	in	r0, 0x3f	; 63
     b92:	f8 94       	cli
     b94:	9e bf       	out	0x3e, r25	; 62
     b96:	0f be       	out	0x3f, r0	; 63
     b98:	8d bf       	out	0x3d, r24	; 61
     b9a:	89 81       	ldd	r24, Y+1	; 0x01
     b9c:	82 30       	cpi	r24, 0x02	; 2
     b9e:	09 f0       	breq	.+2      	; 0xba2 <lora_DownLinkHandler_task+0x54>
     ba0:	68 c0       	rjmp	.+208    	; 0xc72 <lora_DownLinkHandler_task+0x124>
		{
			uint8_t command = _downlink_payload.bytes[0] + _downlink_payload.bytes[1];
     ba2:	fe 01       	movw	r30, r28
     ba4:	ca 81       	ldd	r28, Y+2	; 0x02
     ba6:	83 81       	ldd	r24, Z+3	; 0x03
     ba8:	c8 0f       	add	r28, r24
			bool* value = pvPortMalloc(sizeof(bool));
     baa:	81 e0       	ldi	r24, 0x01	; 1
     bac:	90 e0       	ldi	r25, 0x00	; 0
     bae:	75 d4       	rcall	.+2282   	; 0x149a <pvPortMalloc>
     bb0:	8c 01       	movw	r16, r24
			
		
			switch(command)
     bb2:	cb 34       	cpi	r28, 0x4B	; 75
     bb4:	e9 f0       	breq	.+58     	; 0xbf0 <lora_DownLinkHandler_task+0xa2>
     bb6:	18 f4       	brcc	.+6      	; 0xbbe <lora_DownLinkHandler_task+0x70>
     bb8:	ca 34       	cpi	r28, 0x4A	; 74
     bba:	39 f0       	breq	.+14     	; 0xbca <lora_DownLinkHandler_task+0x7c>
     bbc:	52 c0       	rjmp	.+164    	; 0xc62 <lora_DownLinkHandler_task+0x114>
     bbe:	c6 35       	cpi	r28, 0x56	; 86
     bc0:	51 f1       	breq	.+84     	; 0xc16 <lora_DownLinkHandler_task+0xc8>
     bc2:	c7 35       	cpi	r28, 0x57	; 87
     bc4:	09 f4       	brne	.+2      	; 0xbc8 <lora_DownLinkHandler_task+0x7a>
     bc6:	3a c0       	rjmp	.+116    	; 0xc3c <lora_DownLinkHandler_task+0xee>
     bc8:	4c c0       	rjmp	.+152    	; 0xc62 <lora_DownLinkHandler_task+0x114>
			{
			//D0
			case 74:
				configuration_setWorking(false);
     bca:	80 e0       	ldi	r24, 0x00	; 0
     bcc:	66 dd       	rcall	.-1332   	; 0x69a <configuration_setWorking>
				configuration_getWorking(value);
     bce:	c8 01       	movw	r24, r16
     bd0:	88 dd       	rcall	.-1264   	; 0x6e2 <configuration_getWorking>
     bd2:	f8 01       	movw	r30, r16
				printf("The bool for device is set to %d",*value);
     bd4:	80 81       	ld	r24, Z
     bd6:	1f 92       	push	r1
     bd8:	8f 93       	push	r24
     bda:	88 e4       	ldi	r24, 0x48	; 72
     bdc:	93 e0       	ldi	r25, 0x03	; 3
     bde:	9f 93       	push	r25
     be0:	8f 93       	push	r24
     be2:	0e 94 b1 2f 	call	0x5f62	; 0x5f62 <printf>
     be6:	0f 90       	pop	r0
				break;
     be8:	0f 90       	pop	r0
     bea:	0f 90       	pop	r0
     bec:	0f 90       	pop	r0
     bee:	41 c0       	rjmp	.+130    	; 0xc72 <lora_DownLinkHandler_task+0x124>
			//D1
			case 75 :
				configuration_setWorking(true);
     bf0:	81 e0       	ldi	r24, 0x01	; 1
     bf2:	53 dd       	rcall	.-1370   	; 0x69a <configuration_setWorking>
				configuration_getWorking(value);
     bf4:	c8 01       	movw	r24, r16
     bf6:	75 dd       	rcall	.-1302   	; 0x6e2 <configuration_getWorking>
     bf8:	f8 01       	movw	r30, r16
				printf("The bool for device is set to %d",*value);
     bfa:	80 81       	ld	r24, Z
     bfc:	1f 92       	push	r1
     bfe:	8f 93       	push	r24
     c00:	88 e4       	ldi	r24, 0x48	; 72
     c02:	93 e0       	ldi	r25, 0x03	; 3
     c04:	9f 93       	push	r25
     c06:	8f 93       	push	r24
     c08:	0e 94 b1 2f 	call	0x5f62	; 0x5f62 <printf>
     c0c:	0f 90       	pop	r0
				break;
     c0e:	0f 90       	pop	r0
     c10:	0f 90       	pop	r0
     c12:	0f 90       	pop	r0
			//V0
			case 86:
				configuration_setVentilation(false);
     c14:	2e c0       	rjmp	.+92     	; 0xc72 <lora_DownLinkHandler_task+0x124>
     c16:	80 e0       	ldi	r24, 0x00	; 0
     c18:	8d dd       	rcall	.-1254   	; 0x734 <configuration_setVentilation>
				configuration_getVentilation(value);
     c1a:	c8 01       	movw	r24, r16
     c1c:	af dd       	rcall	.-1186   	; 0x77c <configuration_getVentilation>
     c1e:	f8 01       	movw	r30, r16
				printf("The bool for ventilation is set to %d",*value);
     c20:	80 81       	ld	r24, Z
     c22:	1f 92       	push	r1
     c24:	8f 93       	push	r24
     c26:	89 e6       	ldi	r24, 0x69	; 105
     c28:	93 e0       	ldi	r25, 0x03	; 3
     c2a:	9f 93       	push	r25
     c2c:	8f 93       	push	r24
     c2e:	0e 94 b1 2f 	call	0x5f62	; 0x5f62 <printf>
			break;
     c32:	0f 90       	pop	r0
     c34:	0f 90       	pop	r0
     c36:	0f 90       	pop	r0
     c38:	0f 90       	pop	r0
			//V1
			case 87:
				configuration_setVentilation(true);
     c3a:	1b c0       	rjmp	.+54     	; 0xc72 <lora_DownLinkHandler_task+0x124>
     c3c:	81 e0       	ldi	r24, 0x01	; 1
     c3e:	7a dd       	rcall	.-1292   	; 0x734 <configuration_setVentilation>
				configuration_getVentilation(value);
     c40:	c8 01       	movw	r24, r16
     c42:	9c dd       	rcall	.-1224   	; 0x77c <configuration_getVentilation>
     c44:	f8 01       	movw	r30, r16
				printf("The bool for ventilation is set to %d",*value);
     c46:	80 81       	ld	r24, Z
     c48:	1f 92       	push	r1
     c4a:	8f 93       	push	r24
     c4c:	89 e6       	ldi	r24, 0x69	; 105
     c4e:	93 e0       	ldi	r25, 0x03	; 3
     c50:	9f 93       	push	r25
     c52:	8f 93       	push	r24
     c54:	0e 94 b1 2f 	call	0x5f62	; 0x5f62 <printf>
     c58:	0f 90       	pop	r0
				break;
     c5a:	0f 90       	pop	r0
     c5c:	0f 90       	pop	r0
     c5e:	0f 90       	pop	r0
     c60:	08 c0       	rjmp	.+16     	; 0xc72 <lora_DownLinkHandler_task+0x124>
     c62:	8f e8       	ldi	r24, 0x8F	; 143
			default:
				printf("Invalid command");
     c64:	93 e0       	ldi	r25, 0x03	; 3
     c66:	9f 93       	push	r25
     c68:	8f 93       	push	r24
     c6a:	0e 94 b1 2f 	call	0x5f62	; 0x5f62 <printf>
     c6e:	0f 90       	pop	r0
				break;
     c70:	0f 90       	pop	r0
     c72:	df 91       	pop	r29
		}
	}
						
}
     c74:	cf 91       	pop	r28
     c76:	1f 91       	pop	r17
     c78:	0f 91       	pop	r16
     c7a:	08 95       	ret

00000c7c <lora_DownLinkHandler_startTask>:
     c7c:	ec 01       	movw	r28, r24
//int16_t temperature_setting; // Temperature

void lora_DownLinkHandler_startTask(void* xMessageBuffer){
	for(;;)
	{
		lora_DownLinkHandler_task((MessageBufferHandle_t)xMessageBuffer);
     c7e:	ce 01       	movw	r24, r28
     c80:	66 df       	rcall	.-308    	; 0xb4e <lora_DownLinkHandler_task>
		vTaskDelay(3000);
     c82:	68 eb       	ldi	r22, 0xB8	; 184
     c84:	7b e0       	ldi	r23, 0x0B	; 11
     c86:	80 e0       	ldi	r24, 0x00	; 0
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	0e 94 41 17 	call	0x2e82	; 0x2e82 <vTaskDelay>
     c8e:	f7 cf       	rjmp	.-18     	; 0xc7e <lora_DownLinkHandler_startTask+0x2>

00000c90 <humAndTempReader_create>:
void humAndTempReader_destroy(humAndTempReader_t self) {
	if (self == NULL)
	return;

	//delete will clear the allocated memory to the task + we need to remove everything else
	vTaskDelete(self->handleTask);
     c90:	2f 92       	push	r2
     c92:	3f 92       	push	r3
     c94:	4f 92       	push	r4
     c96:	5f 92       	push	r5
     c98:	6f 92       	push	r6
     c9a:	7f 92       	push	r7
     c9c:	8f 92       	push	r8
     c9e:	9f 92       	push	r9
     ca0:	af 92       	push	r10
     ca2:	bf 92       	push	r11
     ca4:	cf 92       	push	r12
     ca6:	df 92       	push	r13
     ca8:	ef 92       	push	r14
     caa:	ff 92       	push	r15
     cac:	0f 93       	push	r16
     cae:	1f 93       	push	r17
     cb0:	cf 93       	push	r28
     cb2:	df 93       	push	r29
     cb4:	88 2e       	mov	r8, r24
     cb6:	96 2e       	mov	r9, r22
     cb8:	1a 01       	movw	r2, r20
     cba:	28 01       	movw	r4, r16
     cbc:	39 01       	movw	r6, r18
     cbe:	61 e0       	ldi	r22, 0x01	; 1
     cc0:	70 e0       	ldi	r23, 0x00	; 0
     cc2:	86 e0       	ldi	r24, 0x06	; 6
     cc4:	90 e0       	ldi	r25, 0x00	; 0
     cc6:	0e 94 13 2e 	call	0x5c26	; 0x5c26 <calloc>
     cca:	ec 01       	movw	r28, r24
     ccc:	00 97       	sbiw	r24, 0x00	; 0
     cce:	71 f1       	breq	.+92     	; 0xd2c <humAndTempReader_create+0x9c>
     cd0:	19 82       	std	Y+1, r1	; 0x01
     cd2:	18 82       	st	Y, r1
     cd4:	1b 82       	std	Y+3, r1	; 0x03
     cd6:	1a 82       	std	Y+2, r1	; 0x02
     cd8:	30 92 0f 09 	sts	0x090F, r3	; 0x80090f <_startMeasureEventGroup+0x1>
     cdc:	20 92 0e 09 	sts	0x090E, r2	; 0x80090e <_startMeasureEventGroup>
     ce0:	40 92 0a 09 	sts	0x090A, r4	; 0x80090a <_startMeasureBit>
     ce4:	50 92 0b 09 	sts	0x090B, r5	; 0x80090b <_startMeasureBit+0x1>
     ce8:	60 92 0c 09 	sts	0x090C, r6	; 0x80090c <_startMeasureBit+0x2>
     cec:	70 92 0d 09 	sts	0x090D, r7	; 0x80090d <_startMeasureBit+0x3>
     cf0:	f0 92 09 09 	sts	0x0909, r15	; 0x800909 <_readyEventGroup+0x1>
     cf4:	e0 92 08 09 	sts	0x0908, r14	; 0x800908 <_readyEventGroup>
     cf8:	a0 92 04 09 	sts	0x0904, r10	; 0x800904 <_readyBit>
     cfc:	b0 92 05 09 	sts	0x0905, r11	; 0x800905 <_readyBit+0x1>
     d00:	c0 92 06 09 	sts	0x0906, r12	; 0x800906 <_readyBit+0x2>
     d04:	d0 92 07 09 	sts	0x0907, r13	; 0x800907 <_readyBit+0x3>
     d08:	49 2d       	mov	r20, r9
     d0a:	50 e0       	ldi	r21, 0x00	; 0
     d0c:	7c 01       	movw	r14, r24
     d0e:	84 e0       	ldi	r24, 0x04	; 4
     d10:	e8 0e       	add	r14, r24
     d12:	f1 1c       	adc	r15, r1
     d14:	08 2d       	mov	r16, r8
     d16:	9e 01       	movw	r18, r28
     d18:	6f e9       	ldi	r22, 0x9F	; 159
     d1a:	73 e0       	ldi	r23, 0x03	; 3
     d1c:	8f e0       	ldi	r24, 0x0F	; 15
     d1e:	97 e0       	ldi	r25, 0x07	; 7
     d20:	0e 94 81 14 	call	0x2902	; 0x2902 <xTaskCreate>
     d24:	80 eb       	ldi	r24, 0xB0	; 176
     d26:	93 e0       	ldi	r25, 0x03	; 3
     d28:	0e 94 c4 2f 	call	0x5f88	; 0x5f88 <puts>
     d2c:	ce 01       	movw	r24, r28
     d2e:	df 91       	pop	r29
     d30:	cf 91       	pop	r28
     d32:	1f 91       	pop	r17
     d34:	0f 91       	pop	r16
     d36:	ff 90       	pop	r15
     d38:	ef 90       	pop	r14
     d3a:	df 90       	pop	r13
     d3c:	cf 90       	pop	r12
     d3e:	bf 90       	pop	r11
     d40:	af 90       	pop	r10
     d42:	9f 90       	pop	r9
     d44:	8f 90       	pop	r8
     d46:	7f 90       	pop	r7
     d48:	6f 90       	pop	r6
     d4a:	5f 90       	pop	r5
     d4c:	4f 90       	pop	r4
     d4e:	3f 90       	pop	r3
     d50:	2f 90       	pop	r2
     d52:	08 95       	ret

00000d54 <humAndTempReader_measure>:
	//free(self);
}



void humAndTempReader_measure(humAndTempReader_t self) {//dummy
     d54:	cf 92       	push	r12
     d56:	df 92       	push	r13
     d58:	ef 92       	push	r14
     d5a:	ff 92       	push	r15
     d5c:	0f 93       	push	r16
     d5e:	1f 93       	push	r17
     d60:	cf 93       	push	r28
     d62:	df 93       	push	r29
     d64:	ec 01       	movw	r28, r24
	EventBits_t uxBits = xEventGroupWaitBits(_startMeasureEventGroup, //eventGroup
     d66:	40 91 0a 09 	lds	r20, 0x090A	; 0x80090a <_startMeasureBit>
     d6a:	50 91 0b 09 	lds	r21, 0x090B	; 0x80090b <_startMeasureBit+0x1>
     d6e:	60 91 0c 09 	lds	r22, 0x090C	; 0x80090c <_startMeasureBit+0x2>
     d72:	70 91 0d 09 	lds	r23, 0x090D	; 0x80090d <_startMeasureBit+0x3>
     d76:	cc 24       	eor	r12, r12
     d78:	ca 94       	dec	r12
     d7a:	dc 2c       	mov	r13, r12
     d7c:	76 01       	movw	r14, r12
     d7e:	01 e0       	ldi	r16, 0x01	; 1
     d80:	21 e0       	ldi	r18, 0x01	; 1
     d82:	80 91 0e 09 	lds	r24, 0x090E	; 0x80090e <_startMeasureEventGroup>
     d86:	90 91 0f 09 	lds	r25, 0x090F	; 0x80090f <_startMeasureEventGroup+0x1>
     d8a:	e1 d1       	rcall	.+962    	; 0x114e <xEventGroupWaitBits>
	_startMeasureBit, //bits it is interested i
	pdTRUE, //clears the bits
	pdTRUE, //waits for both bits to be set
	portMAX_DELAY); //wait

	if ((uxBits & (_startMeasureBit)) == (_startMeasureBit)) {
     d8c:	00 91 0a 09 	lds	r16, 0x090A	; 0x80090a <_startMeasureBit>
     d90:	10 91 0b 09 	lds	r17, 0x090B	; 0x80090b <_startMeasureBit+0x1>
     d94:	20 91 0c 09 	lds	r18, 0x090C	; 0x80090c <_startMeasureBit+0x2>
     d98:	30 91 0d 09 	lds	r19, 0x090D	; 0x80090d <_startMeasureBit+0x3>
     d9c:	dc 01       	movw	r26, r24
     d9e:	cb 01       	movw	r24, r22
     da0:	80 23       	and	r24, r16
     da2:	91 23       	and	r25, r17
     da4:	a2 23       	and	r26, r18
     da6:	b3 23       	and	r27, r19
     da8:	08 17       	cp	r16, r24
     daa:	19 07       	cpc	r17, r25
     dac:	2a 07       	cpc	r18, r26
     dae:	3b 07       	cpc	r19, r27
     db0:	69 f5       	brne	.+90     	; 0xe0c <humAndTempReader_measure+0xb8>
		hih8120Wakeup();
     db2:	0e 94 e2 1e 	call	0x3dc4	; 0x3dc4 <hih8120Wakeup>
		vTaskDelay(50);
     db6:	62 e3       	ldi	r22, 0x32	; 50
     db8:	70 e0       	ldi	r23, 0x00	; 0
     dba:	80 e0       	ldi	r24, 0x00	; 0
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	0e 94 41 17 	call	0x2e82	; 0x2e82 <vTaskDelay>
		hih8120Meassure();
     dc2:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <hih8120Meassure>
		vTaskDelay(5);
     dc6:	65 e0       	ldi	r22, 0x05	; 5
     dc8:	70 e0       	ldi	r23, 0x00	; 0
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	0e 94 41 17 	call	0x2e82	; 0x2e82 <vTaskDelay>
		if(hih8120IsReady())
     dd2:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <hih8120IsReady>
     dd6:	88 23       	and	r24, r24
     dd8:	61 f0       	breq	.+24     	; 0xdf2 <humAndTempReader_measure+0x9e>
		{
			self->humidity = hih8120GetHumidityPercent_x10();
     dda:	0e 94 1d 1f 	call	0x3e3a	; 0x3e3a <hih8120GetHumidityPercent_x10>
     dde:	99 83       	std	Y+1, r25	; 0x01
     de0:	88 83       	st	Y, r24
			self->temperature = hih8120GetTemperature_x10();
     de2:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <hih8120GetTemperature_x10>
     de6:	9b 83       	std	Y+3, r25	; 0x03
     de8:	8a 83       	std	Y+2, r24	; 0x02
			printf("humidity and temperature done bit set\n");
     dea:	8f ec       	ldi	r24, 0xCF	; 207
     dec:	93 e0       	ldi	r25, 0x03	; 3
     dee:	0e 94 c4 2f 	call	0x5f88	; 0x5f88 <puts>
		}
		//set done bit so that device knows meassurement is done
		xEventGroupSetBits(_readyEventGroup, _readyBit);
     df2:	40 91 04 09 	lds	r20, 0x0904	; 0x800904 <_readyBit>
     df6:	50 91 05 09 	lds	r21, 0x0905	; 0x800905 <_readyBit+0x1>
     dfa:	60 91 06 09 	lds	r22, 0x0906	; 0x800906 <_readyBit+0x2>
     dfe:	70 91 07 09 	lds	r23, 0x0907	; 0x800907 <_readyBit+0x3>
     e02:	80 91 08 09 	lds	r24, 0x0908	; 0x800908 <_readyEventGroup>
     e06:	90 91 09 09 	lds	r25, 0x0909	; 0x800909 <_readyEventGroup+0x1>
     e0a:	61 d2       	rcall	.+1218   	; 0x12ce <xEventGroupSetBits>
	}
}
     e0c:	df 91       	pop	r29
     e0e:	cf 91       	pop	r28
     e10:	1f 91       	pop	r17
     e12:	0f 91       	pop	r16
     e14:	ff 90       	pop	r15
     e16:	ef 90       	pop	r14
     e18:	df 90       	pop	r13
     e1a:	cf 90       	pop	r12
     e1c:	08 95       	ret

00000e1e <humAndTempReader_executeTask>:
	int16_t temperature;
	TaskHandle_t handleTask;
}humidityAndTemperature;

//actual task, methods devided so that it is possible to test
void humAndTempReader_executeTask(void* self) {
     e1e:	ec 01       	movw	r28, r24
	for (;;) {
		humAndTempReader_measure((humAndTempReader_t)self);
     e20:	ce 01       	movw	r24, r28
     e22:	98 df       	rcall	.-208    	; 0xd54 <humAndTempReader_measure>
     e24:	fd cf       	rjmp	.-6      	; 0xe20 <humAndTempReader_executeTask+0x2>

00000e26 <humAndTempReader_getHumidity>:
	}
}

uint16_t humAndTempReader_getHumidity(humAndTempReader_t self){
	return self->humidity;
}
     e26:	fc 01       	movw	r30, r24
     e28:	80 81       	ld	r24, Z
     e2a:	91 81       	ldd	r25, Z+1	; 0x01
     e2c:	08 95       	ret

00000e2e <humAndTempReader_getTemperature>:

int16_t humAndTempReader_getTemperature(humAndTempReader_t self){
	return self->temperature;
}
     e2e:	fc 01       	movw	r30, r24
     e30:	82 81       	ldd	r24, Z+2	; 0x02
     e32:	93 81       	ldd	r25, Z+3	; 0x03
     e34:	08 95       	ret

00000e36 <lora_UpLinkHandler_create>:
	}
}


void lora_UpLinkHandler_create(UBaseType_t lora_handler_task_priority, MessageBufferHandle_t xMessageBuffer)
{
     e36:	ef 92       	push	r14
     e38:	ff 92       	push	r15
     e3a:	0f 93       	push	r16
     e3c:	9b 01       	movw	r18, r22
	_buffer = xMessageBuffer;
	
	
	
	xTaskCreate(
     e3e:	e1 2c       	mov	r14, r1
     e40:	f1 2c       	mov	r15, r1
     e42:	08 2f       	mov	r16, r24
     e44:	48 e8       	ldi	r20, 0x88	; 136
     e46:	51 e0       	ldi	r21, 0x01	; 1
     e48:	65 ef       	ldi	r22, 0xF5	; 245
     e4a:	73 e0       	ldi	r23, 0x03	; 3
     e4c:	84 e7       	ldi	r24, 0x74	; 116
     e4e:	98 e0       	ldi	r25, 0x08	; 8
     e50:	0e 94 81 14 	call	0x2902	; 0x2902 <xTaskCreate>
	,  (const portCHAR *)"LRUpHand"  // A name just for humans
	,  configMINIMAL_STACK_SIZE+200  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  xMessageBuffer
	,  lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}
     e54:	0f 91       	pop	r16
     e56:	ff 90       	pop	r15
     e58:	ef 90       	pop	r14
     e5a:	08 95       	ret

00000e5c <lora_UpLinkHandler_task>:
	
	/*Receives message from message buffer shared between it and the application responsible for gathering the data
	--> Should be called every 5 minutes from application
	*/
	void lora_UpLinkHandler_task(MessageBufferHandle_t xMessageBuffer)
	{	
     e5c:	df 92       	push	r13
     e5e:	ef 92       	push	r14
     e60:	ff 92       	push	r15
     e62:	0f 93       	push	r16
     e64:	1f 93       	push	r17
     e66:	cf 93       	push	r28
     e68:	df 93       	push	r29
     e6a:	7c 01       	movw	r14, r24
		size_t xBytesToSend;
		char rxData[50];
		if (!isSet)
     e6c:	80 91 10 09 	lds	r24, 0x0910	; 0x800910 <isSet>
     e70:	81 11       	cpse	r24, r1
     e72:	d0 c0       	rjmp	.+416    	; 0x1014 <lora_UpLinkHandler_task+0x1b8>
		{
			// Hardware reset of LoRaWAN transceiver
			lora_driver_reset_rn2483(1);
     e74:	81 e0       	ldi	r24, 0x01	; 1
     e76:	0e 94 63 22 	call	0x44c6	; 0x44c6 <lora_driver_reset_rn2483>
			vTaskDelay(2);
     e7a:	62 e0       	ldi	r22, 0x02	; 2
     e7c:	70 e0       	ldi	r23, 0x00	; 0
     e7e:	80 e0       	ldi	r24, 0x00	; 0
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	0e 94 41 17 	call	0x2e82	; 0x2e82 <vTaskDelay>
			lora_driver_reset_rn2483(0);
     e86:	80 e0       	ldi	r24, 0x00	; 0
     e88:	0e 94 63 22 	call	0x44c6	; 0x44c6 <lora_driver_reset_rn2483>
			// Give it a chance to wakeup
			vTaskDelay(150);
     e8c:	66 e9       	ldi	r22, 0x96	; 150
     e8e:	70 e0       	ldi	r23, 0x00	; 0
     e90:	80 e0       	ldi	r24, 0x00	; 0
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	0e 94 41 17 	call	0x2e82	; 0x2e82 <vTaskDelay>

			lora_driver_flush_buffers(); // get rid of first version string from module after reset!
     e98:	0e 94 19 22 	call	0x4432	; 0x4432 <lora_driver_flush_buffers>


static void _lora_setup(void)
{
	e_LoRa_return_code_t rc;
	led_slow_blink(led_ST2); // OPTIONAL: Led the green led blink slowly while we are setting up LoRa
     e9c:	81 e0       	ldi	r24, 0x01	; 1
     e9e:	0e 94 71 20 	call	0x40e2	; 0x40e2 <led_slow_blink>
	//The below code is required to be executed only once due to the fact that these MAC settings
	// can be stored inside of the tranciever
	//START ON ONE TIME USE CODE

	// Factory reset the transceiver
	printf("FactoryReset >%s<\n", lora_driver_map_return_code_to_text(lora_driver_rn2483_factory_reset()));
     ea2:	0e 94 77 22 	call	0x44ee	; 0x44ee <lora_driver_rn2483_factory_reset>
     ea6:	0e 94 f4 24 	call	0x49e8	; 0x49e8 <lora_driver_map_return_code_to_text>
     eaa:	9f 93       	push	r25
     eac:	8f 93       	push	r24
     eae:	8e ef       	ldi	r24, 0xFE	; 254
     eb0:	93 e0       	ldi	r25, 0x03	; 3
     eb2:	9f 93       	push	r25
     eb4:	8f 93       	push	r24
     eb6:	0e 94 b1 2f 	call	0x5f62	; 0x5f62 <printf>
	
	// Configure to EU868 LoRaWAN standards
	printf("Configure to EU868 >%s<\n", lora_driver_map_return_code_to_text(lora_driver_configure_to_eu868()));
     eba:	0e 94 f5 23 	call	0x47ea	; 0x47ea <lora_driver_configure_to_eu868>
     ebe:	0e 94 f4 24 	call	0x49e8	; 0x49e8 <lora_driver_map_return_code_to_text>
     ec2:	9f 93       	push	r25
     ec4:	8f 93       	push	r24
     ec6:	81 e1       	ldi	r24, 0x11	; 17
     ec8:	94 e0       	ldi	r25, 0x04	; 4
     eca:	9f 93       	push	r25
     ecc:	8f 93       	push	r24
     ece:	0e 94 b1 2f 	call	0x5f62	; 0x5f62 <printf>

	// Get the transceivers HW EUI
	rc = lora_driver_get_rn2483_hweui(_out_buf);
     ed2:	87 e2       	ldi	r24, 0x27	; 39
     ed4:	99 e0       	ldi	r25, 0x09	; 9
     ed6:	0e 94 89 22 	call	0x4512	; 0x4512 <lora_driver_get_rn2483_hweui>
	printf("Get HWEUI >%s<: %s\n",lora_driver_map_return_code_to_text(rc), _out_buf);
     eda:	0e 94 f4 24 	call	0x49e8	; 0x49e8 <lora_driver_map_return_code_to_text>
     ede:	c7 e2       	ldi	r28, 0x27	; 39
     ee0:	d9 e0       	ldi	r29, 0x09	; 9
     ee2:	df 93       	push	r29
     ee4:	cf 93       	push	r28
     ee6:	9f 93       	push	r25
     ee8:	8f 93       	push	r24
     eea:	8a e2       	ldi	r24, 0x2A	; 42
     eec:	94 e0       	ldi	r25, 0x04	; 4
     eee:	9f 93       	push	r25
     ef0:	8f 93       	push	r24
     ef2:	0e 94 b1 2f 	call	0x5f62	; 0x5f62 <printf>

	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_map_return_code_to_text(lora_driver_set_device_identifier(_out_buf)));
     ef6:	ce 01       	movw	r24, r28
     ef8:	0e 94 a5 22 	call	0x454a	; 0x454a <lora_driver_set_device_identifier>
     efc:	0e 94 f4 24 	call	0x49e8	; 0x49e8 <lora_driver_map_return_code_to_text>
     f00:	9f 93       	push	r25
     f02:	8f 93       	push	r24
     f04:	df 93       	push	r29
     f06:	cf 93       	push	r28
     f08:	8e e3       	ldi	r24, 0x3E	; 62
     f0a:	94 e0       	ldi	r25, 0x04	; 4
     f0c:	9f 93       	push	r25
     f0e:	8f 93       	push	r24
     f10:	0e 94 b1 2f 	call	0x5f62	; 0x5f62 <printf>

	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_map_return_code_to_text(lora_driver_set_otaa_identity(LORA_appEUI,LORA_appKEY,_out_buf)));
     f14:	ae 01       	movw	r20, r28
     f16:	63 e5       	ldi	r22, 0x53	; 83
     f18:	74 e0       	ldi	r23, 0x04	; 4
     f1a:	84 e7       	ldi	r24, 0x74	; 116
     f1c:	94 e0       	ldi	r25, 0x04	; 4
     f1e:	0e 94 d3 24 	call	0x49a6	; 0x49a6 <lora_driver_set_otaa_identity>
     f22:	0e 94 f4 24 	call	0x49e8	; 0x49e8 <lora_driver_map_return_code_to_text>
     f26:	9f 93       	push	r25
     f28:	8f 93       	push	r24
     f2a:	df 93       	push	r29
     f2c:	cf 93       	push	r28
     f2e:	83 e5       	ldi	r24, 0x53	; 83
     f30:	94 e0       	ldi	r25, 0x04	; 4
     f32:	9f 93       	push	r25
     f34:	8f 93       	push	r24
     f36:	84 e7       	ldi	r24, 0x74	; 116
     f38:	94 e0       	ldi	r25, 0x04	; 4
     f3a:	9f 93       	push	r25
     f3c:	8f 93       	push	r24
     f3e:	85 e8       	ldi	r24, 0x85	; 133
     f40:	94 e0       	ldi	r25, 0x04	; 4
     f42:	9f 93       	push	r25
     f44:	8f 93       	push	r24
     f46:	0e 94 b1 2f 	call	0x5f62	; 0x5f62 <printf>

	// Save all the MAC settings in the transceiver
	printf("Save mac >%s<\n",lora_driver_map_return_code_to_text(lora_driver_save_mac()));
     f4a:	0e 94 d8 22 	call	0x45b0	; 0x45b0 <lora_driver_save_mac>
     f4e:	0e 94 f4 24 	call	0x49e8	; 0x49e8 <lora_driver_map_return_code_to_text>
     f52:	9f 93       	push	r25
     f54:	8f 93       	push	r24
     f56:	8b eb       	ldi	r24, 0xBB	; 187
     f58:	94 e0       	ldi	r25, 0x04	; 4
     f5a:	9f 93       	push	r25
     f5c:	8f 93       	push	r24
     f5e:	0e 94 b1 2f 	call	0x5f62	; 0x5f62 <printf>

	//END OF ONE TIME USE CODE
	
	
	// Enable Adaptive Data Rate
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_map_return_code_to_text(lora_driver_set_adaptive_data_rate(LoRa_ON)));
     f62:	8d b7       	in	r24, 0x3d	; 61
     f64:	9e b7       	in	r25, 0x3e	; 62
     f66:	82 96       	adiw	r24, 0x22	; 34
     f68:	0f b6       	in	r0, 0x3f	; 63
     f6a:	f8 94       	cli
     f6c:	9e bf       	out	0x3e, r25	; 62
     f6e:	0f be       	out	0x3f, r0	; 63
     f70:	8d bf       	out	0x3d, r24	; 61
     f72:	81 e0       	ldi	r24, 0x01	; 1
     f74:	0e 94 d2 23 	call	0x47a4	; 0x47a4 <lora_driver_set_adaptive_data_rate>
     f78:	0e 94 f4 24 	call	0x49e8	; 0x49e8 <lora_driver_map_return_code_to_text>
     f7c:	9f 93       	push	r25
     f7e:	8f 93       	push	r24
     f80:	8a ec       	ldi	r24, 0xCA	; 202
     f82:	94 e0       	ldi	r25, 0x04	; 4
     f84:	9f 93       	push	r25
     f86:	8f 93       	push	r24
     f88:	0e 94 b1 2f 	call	0x5f62	; 0x5f62 <printf>

	// Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	printf("Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_map_return_code_to_text(lora_driver_set_receive_delay(500)));
     f8c:	84 ef       	ldi	r24, 0xF4	; 244
     f8e:	91 e0       	ldi	r25, 0x01	; 1
     f90:	0e 94 dd 23 	call	0x47ba	; 0x47ba <lora_driver_set_receive_delay>
     f94:	0e 94 f4 24 	call	0x49e8	; 0x49e8 <lora_driver_map_return_code_to_text>
     f98:	9f 93       	push	r25
     f9a:	8f 93       	push	r24
     f9c:	81 e0       	ldi	r24, 0x01	; 1
     f9e:	8f 93       	push	r24
     fa0:	84 ef       	ldi	r24, 0xF4	; 244
     fa2:	8f 93       	push	r24
     fa4:	8b ee       	ldi	r24, 0xEB	; 235
     fa6:	94 e0       	ldi	r25, 0x04	; 4
     fa8:	9f 93       	push	r25
     faa:	8f 93       	push	r24
     fac:	0e 94 b1 2f 	call	0x5f62	; 0x5f62 <printf>
     fb0:	8d b7       	in	r24, 0x3d	; 61
     fb2:	9e b7       	in	r25, 0x3e	; 62
     fb4:	0a 96       	adiw	r24, 0x0a	; 10
     fb6:	0f b6       	in	r0, 0x3f	; 63
     fb8:	f8 94       	cli
     fba:	9e bf       	out	0x3e, r25	; 62
     fbc:	0f be       	out	0x3f, r0	; 63
     fbe:	8d bf       	out	0x3d, r24	; 61
     fc0:	ca e0       	ldi	r28, 0x0A	; 10
     fc2:	d0 e0       	ldi	r29, 0x00	; 0
	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
	
	do {
		rc = lora_driver_join(LoRa_OTAA);
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_map_return_code_to_text(rc));
     fc4:	0b e0       	ldi	r16, 0x0B	; 11
     fc6:	15 e0       	ldi	r17, 0x05	; 5

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
	
	do {
		rc = lora_driver_join(LoRa_OTAA);
     fc8:	80 e0       	ldi	r24, 0x00	; 0
     fca:	0e 94 de 22 	call	0x45bc	; 0x45bc <lora_driver_join>
     fce:	d8 2e       	mov	r13, r24
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_map_return_code_to_text(rc));
     fd0:	0e 94 f4 24 	call	0x49e8	; 0x49e8 <lora_driver_map_return_code_to_text>
     fd4:	9f 93       	push	r25
     fd6:	8f 93       	push	r24
     fd8:	df 93       	push	r29
     fda:	cf 93       	push	r28
     fdc:	1f 93       	push	r17
     fde:	0f 93       	push	r16
     fe0:	0e 94 b1 2f 	call	0x5f62	; 0x5f62 <printf>

		if ( rc != LoRa_ACCEPTED)
     fe4:	0f 90       	pop	r0
     fe6:	0f 90       	pop	r0
     fe8:	0f 90       	pop	r0
     fea:	0f 90       	pop	r0
     fec:	0f 90       	pop	r0
     fee:	0f 90       	pop	r0
     ff0:	88 e0       	ldi	r24, 0x08	; 8
     ff2:	d8 16       	cp	r13, r24
     ff4:	09 f4       	brne	.+2      	; 0xff8 <lora_UpLinkHandler_task+0x19c>
     ff6:	62 c0       	rjmp	.+196    	; 0x10bc <lora_UpLinkHandler_task+0x260>
		{
			// Make the red led pulse to tell something went wrong
			led_long_puls(led_ST1); // OPTIONAL
     ff8:	80 e0       	ldi	r24, 0x00	; 0
     ffa:	0e 94 dd 20 	call	0x41ba	; 0x41ba <led_long_puls>
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
     ffe:	66 e3       	ldi	r22, 0x36	; 54
    1000:	71 e0       	ldi	r23, 0x01	; 1
    1002:	80 e0       	ldi	r24, 0x00	; 0
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	0e 94 41 17 	call	0x2e82	; 0x2e82 <vTaskDelay>
    100a:	21 97       	sbiw	r28, 0x01	; 1
		}
		else
		{
			break;
		}
	} while (--maxJoinTriesLeft);
    100c:	e9 f6       	brne	.-70     	; 0xfc8 <lora_UpLinkHandler_task+0x16c>
    100e:	5d c0       	rjmp	.+186    	; 0x10ca <lora_UpLinkHandler_task+0x26e>
		led_fast_blink(led_ST1); // OPTIONAL

		// Lets stay here
		while (1)
		{
			taskYIELD();
    1010:	76 d4       	rcall	.+2284   	; 0x18fe <vPortYield>
    1012:	fe cf       	rjmp	.-4      	; 0x1010 <lora_UpLinkHandler_task+0x1b4>
			isSet=true;
		}
		

		
		xBytesToSend = xMessageBufferReceive(xMessageBuffer, (void*) &_uplink_payload,
    1014:	00 e0       	ldi	r16, 0x00	; 0
    1016:	10 e0       	ldi	r17, 0x00	; 0
    1018:	98 01       	movw	r18, r16
    101a:	42 e3       	ldi	r20, 0x32	; 50
    101c:	50 e0       	ldi	r21, 0x00	; 0
    101e:	61 e1       	ldi	r22, 0x11	; 17
    1020:	79 e0       	ldi	r23, 0x09	; 9
    1022:	c7 01       	movw	r24, r14
    1024:	0e 94 3e 13 	call	0x267c	; 0x267c <xStreamBufferReceive>
		sizeof(rxData),0);
		if(xBytesToSend >= sizeof(uint8_t)*2)
    1028:	02 97       	sbiw	r24, 0x02	; 2
    102a:	08 f4       	brcc	.+2      	; 0x102e <lora_UpLinkHandler_task+0x1d2>
    102c:	40 c0       	rjmp	.+128    	; 0x10ae <lora_UpLinkHandler_task+0x252>
			//_uplink_payload = (_uplink_payload) &rxData;
			
			/**< Status led ST4 (BLUE)*/
			//Makes the led light up in a short period.
			
			led_short_puls(led_ST4);
    102e:	83 e0       	ldi	r24, 0x03	; 3
    1030:	0e 94 ef 20 	call	0x41de	; 0x41de <led_short_puls>
			//_uplink_payload.port_no = 1;
			//_uplink_payload.len = 4;
			
			printf("The temperature in upLink is: %d\n", _uplink_payload.bytes[0]);
    1034:	c1 e1       	ldi	r28, 0x11	; 17
    1036:	d9 e0       	ldi	r29, 0x09	; 9
    1038:	8a 81       	ldd	r24, Y+2	; 0x02
    103a:	1f 92       	push	r1
    103c:	8f 93       	push	r24
    103e:	8b e2       	ldi	r24, 0x2B	; 43
    1040:	95 e0       	ldi	r25, 0x05	; 5
    1042:	9f 93       	push	r25
    1044:	8f 93       	push	r24
    1046:	0e 94 b1 2f 	call	0x5f62	; 0x5f62 <printf>
			printf("The temperature2 in upLink is: %d\n", _uplink_payload.bytes[1]);
    104a:	8b 81       	ldd	r24, Y+3	; 0x03
    104c:	1f 92       	push	r1
    104e:	8f 93       	push	r24
    1050:	8d e4       	ldi	r24, 0x4D	; 77
    1052:	95 e0       	ldi	r25, 0x05	; 5
    1054:	9f 93       	push	r25
    1056:	8f 93       	push	r24
    1058:	0e 94 b1 2f 	call	0x5f62	; 0x5f62 <printf>
			printf("The humidity in upLink is: %u\n", _uplink_payload.bytes[2]);
    105c:	8c 81       	ldd	r24, Y+4	; 0x04
    105e:	1f 92       	push	r1
    1060:	8f 93       	push	r24
    1062:	80 e7       	ldi	r24, 0x70	; 112
    1064:	95 e0       	ldi	r25, 0x05	; 5
    1066:	9f 93       	push	r25
    1068:	8f 93       	push	r24
    106a:	0e 94 b1 2f 	call	0x5f62	; 0x5f62 <printf>
			printf("The humidity2 in upLink is: %u\n", _uplink_payload.bytes[3]);
    106e:	8d 81       	ldd	r24, Y+5	; 0x05
    1070:	1f 92       	push	r1
    1072:	8f 93       	push	r24
    1074:	8f e8       	ldi	r24, 0x8F	; 143
    1076:	95 e0       	ldi	r25, 0x05	; 5
    1078:	9f 93       	push	r25
    107a:	8f 93       	push	r24
    107c:	0e 94 b1 2f 	call	0x5f62	; 0x5f62 <printf>
			
			
			printf("Upload Message >%s<\n", lora_driver_map_return_code_to_text(lora_driver_sent_upload_message(false, &_uplink_payload)));
    1080:	be 01       	movw	r22, r28
    1082:	80 e0       	ldi	r24, 0x00	; 0
    1084:	0e 94 07 23 	call	0x460e	; 0x460e <lora_driver_sent_upload_message>
    1088:	0e 94 f4 24 	call	0x49e8	; 0x49e8 <lora_driver_map_return_code_to_text>
    108c:	9f 93       	push	r25
    108e:	8f 93       	push	r24
    1090:	8f ea       	ldi	r24, 0xAF	; 175
    1092:	95 e0       	ldi	r25, 0x05	; 5
    1094:	9f 93       	push	r25
    1096:	8f 93       	push	r24
    1098:	0e 94 b1 2f 	call	0x5f62	; 0x5f62 <printf>
    109c:	8d b7       	in	r24, 0x3d	; 61
    109e:	9e b7       	in	r25, 0x3e	; 62
    10a0:	44 96       	adiw	r24, 0x14	; 20
    10a2:	0f b6       	in	r0, 0x3f	; 63
    10a4:	f8 94       	cli
    10a6:	9e bf       	out	0x3e, r25	; 62
    10a8:	0f be       	out	0x3f, r0	; 63
    10aa:	8d bf       	out	0x3d, r24	; 61
    10ac:	15 c0       	rjmp	.+42     	; 0x10d8 <lora_UpLinkHandler_task+0x27c>
		}
		else
		{
			vTaskDelay(2000);
    10ae:	60 ed       	ldi	r22, 0xD0	; 208
    10b0:	77 e0       	ldi	r23, 0x07	; 7
    10b2:	80 e0       	ldi	r24, 0x00	; 0
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	0e 94 41 17 	call	0x2e82	; 0x2e82 <vTaskDelay>
		}
	}
    10ba:	0e c0       	rjmp	.+28     	; 0x10d8 <lora_UpLinkHandler_task+0x27c>

	if (rc == LoRa_ACCEPTED)
	{
		// Connected to LoRaWAN :-)
		// Make the green led steady
		led_led_on(led_ST2); // OPTIONAL
    10bc:	81 e0       	ldi	r24, 0x01	; 1
    10be:	0e 94 bf 20 	call	0x417e	; 0x417e <led_led_on>
			vTaskDelay(150);

			lora_driver_flush_buffers(); // get rid of first version string from module after reset!

			_lora_setup();
			isSet=true;
    10c2:	81 e0       	ldi	r24, 0x01	; 1
    10c4:	80 93 10 09 	sts	0x0910, r24	; 0x800910 <isSet>
    10c8:	a5 cf       	rjmp	.-182    	; 0x1014 <lora_UpLinkHandler_task+0x1b8>
	}
	else
	{
		// Something went wrong
		// Turn off the green led
		led_led_off(led_ST2); // OPTIONAL
    10ca:	81 e0       	ldi	r24, 0x01	; 1
    10cc:	0e 94 ce 20 	call	0x419c	; 0x419c <led_led_off>
		// Make the red led blink fast to tell something went wrong
		led_fast_blink(led_ST1); // OPTIONAL
    10d0:	80 e0       	ldi	r24, 0x00	; 0
    10d2:	0e 94 98 20 	call	0x4130	; 0x4130 <led_fast_blink>
    10d6:	9c cf       	rjmp	.-200    	; 0x1010 <lora_UpLinkHandler_task+0x1b4>
		}
		else
		{
			vTaskDelay(2000);
		}
	}
    10d8:	df 91       	pop	r29
    10da:	cf 91       	pop	r28
    10dc:	1f 91       	pop	r17
    10de:	0f 91       	pop	r16
    10e0:	ff 90       	pop	r15
    10e2:	ef 90       	pop	r14
    10e4:	df 90       	pop	r13
    10e6:	08 95       	ret

000010e8 <lora_UpLinkHandler_startTask>:
static bool isSet=false;

/*Check for the parameters*/


void lora_UpLinkHandler_startTask(void* xMessageBuffer){
    10e8:	ec 01       	movw	r28, r24
	for(;;)
	{
		lora_UpLinkHandler_task((MessageBufferHandle_t)xMessageBuffer);
    10ea:	ce 01       	movw	r24, r28
    10ec:	b7 de       	rcall	.-658    	; 0xe5c <lora_UpLinkHandler_task>
		vTaskDelay(3000);
    10ee:	68 eb       	ldi	r22, 0xB8	; 184
    10f0:	7b e0       	ldi	r23, 0x0B	; 11
    10f2:	80 e0       	ldi	r24, 0x00	; 0
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	0e 94 41 17 	call	0x2e82	; 0x2e82 <vTaskDelay>
    10fa:	f7 cf       	rjmp	.-18     	; 0x10ea <lora_UpLinkHandler_startTask+0x2>

000010fc <trace_init>:
	 #if (configUSE_TRACE_FACILITY == 1)
	 #ifdef HAL_DEFS_H_

	 #else
		// Used on VIA MEGA Shield rev. 2.0.0
		DDRK |= _BV(DDK0) | _BV(DDK1) | _BV(DDK2) | _BV(DDK3);
    10fc:	e7 e0       	ldi	r30, 0x07	; 7
    10fe:	f1 e0       	ldi	r31, 0x01	; 1
    1100:	80 81       	ld	r24, Z
    1102:	8f 60       	ori	r24, 0x0F	; 15
    1104:	80 83       	st	Z, r24
    1106:	08 95       	ret

00001108 <task_switch_in>:
	void task_switch_in(uint8_t task_no) {
		 #ifdef HAL_DEFS_H_

		 #else
		 // Used on VIA MEGA Shield rev. 2.0.0
		 PORTK &= 0b11110000;
    1108:	e8 e0       	ldi	r30, 0x08	; 8
    110a:	f1 e0       	ldi	r31, 0x01	; 1
    110c:	90 81       	ld	r25, Z
    110e:	90 7f       	andi	r25, 0xF0	; 240
    1110:	90 83       	st	Z, r25
		 PORTK |= (task_no & 0b00001111);
    1112:	90 81       	ld	r25, Z
    1114:	8f 70       	andi	r24, 0x0F	; 15
    1116:	98 2b       	or	r25, r24
    1118:	90 83       	st	Z, r25
    111a:	08 95       	ret

0000111c <task_switch_out>:
	void task_switch_out(uint8_t task_no) {
		#ifdef HAL_DEFS_H_

		#else
		// Used on VIA MEGA Shield rev. 2.0.0
		PORTK &= 0b11110000;
    111c:	e8 e0       	ldi	r30, 0x08	; 8
    111e:	f1 e0       	ldi	r31, 0x01	; 1
    1120:	80 81       	ld	r24, Z
    1122:	80 7f       	andi	r24, 0xF0	; 240
    1124:	80 83       	st	Z, r24
    1126:	08 95       	ret

00001128 <xEventGroupCreate>:
        uxReturn = pxEventBits->uxEventBits;
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
    1128:	cf 93       	push	r28
    112a:	df 93       	push	r29
    112c:	80 e1       	ldi	r24, 0x10	; 16
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	b4 d1       	rcall	.+872    	; 0x149a <pvPortMalloc>
    1132:	ec 01       	movw	r28, r24
    1134:	00 97       	sbiw	r24, 0x00	; 0
    1136:	39 f0       	breq	.+14     	; 0x1146 <xEventGroupCreate+0x1e>
    1138:	fc 01       	movw	r30, r24
    113a:	11 92       	st	Z+, r1
    113c:	11 92       	st	Z+, r1
    113e:	11 92       	st	Z+, r1
    1140:	11 92       	st	Z+, r1
    1142:	cf 01       	movw	r24, r30
    1144:	94 d2       	rcall	.+1320   	; 0x166e <vListInitialise>
    1146:	ce 01       	movw	r24, r28
    1148:	df 91       	pop	r29
    114a:	cf 91       	pop	r28
    114c:	08 95       	ret

0000114e <xEventGroupWaitBits>:
    114e:	2f 92       	push	r2
    1150:	3f 92       	push	r3
    1152:	4f 92       	push	r4
    1154:	5f 92       	push	r5
    1156:	6f 92       	push	r6
    1158:	7f 92       	push	r7
    115a:	8f 92       	push	r8
    115c:	9f 92       	push	r9
    115e:	af 92       	push	r10
    1160:	bf 92       	push	r11
    1162:	cf 92       	push	r12
    1164:	df 92       	push	r13
    1166:	ef 92       	push	r14
    1168:	ff 92       	push	r15
    116a:	0f 93       	push	r16
    116c:	1f 93       	push	r17
    116e:	cf 93       	push	r28
    1170:	df 93       	push	r29
    1172:	ec 01       	movw	r28, r24
    1174:	4a 01       	movw	r8, r20
    1176:	5b 01       	movw	r10, r22
    1178:	62 2e       	mov	r6, r18
    117a:	70 2e       	mov	r7, r16
    117c:	0e 94 dc 15 	call	0x2bb8	; 0x2bb8 <vTaskSuspendAll>
    1180:	28 80       	ld	r2, Y
    1182:	39 80       	ldd	r3, Y+1	; 0x01
    1184:	4a 80       	ldd	r4, Y+2	; 0x02
    1186:	5b 80       	ldd	r5, Y+3	; 0x03
    1188:	01 11       	cpse	r16, r1
    118a:	0d c0       	rjmp	.+26     	; 0x11a6 <xEventGroupWaitBits+0x58>
    118c:	81 e0       	ldi	r24, 0x01	; 1
    118e:	b2 01       	movw	r22, r4
    1190:	a1 01       	movw	r20, r2
    1192:	48 21       	and	r20, r8
    1194:	59 21       	and	r21, r9
    1196:	6a 21       	and	r22, r10
    1198:	7b 21       	and	r23, r11
    119a:	45 2b       	or	r20, r21
    119c:	46 2b       	or	r20, r22
    119e:	47 2b       	or	r20, r23
    11a0:	79 f4       	brne	.+30     	; 0x11c0 <xEventGroupWaitBits+0x72>
    11a2:	80 e0       	ldi	r24, 0x00	; 0
    11a4:	0d c0       	rjmp	.+26     	; 0x11c0 <xEventGroupWaitBits+0x72>
    11a6:	81 e0       	ldi	r24, 0x01	; 1
    11a8:	b2 01       	movw	r22, r4
    11aa:	a1 01       	movw	r20, r2
    11ac:	48 21       	and	r20, r8
    11ae:	59 21       	and	r21, r9
    11b0:	6a 21       	and	r22, r10
    11b2:	7b 21       	and	r23, r11
    11b4:	48 15       	cp	r20, r8
    11b6:	59 05       	cpc	r21, r9
    11b8:	6a 05       	cpc	r22, r10
    11ba:	7b 05       	cpc	r23, r11
    11bc:	09 f0       	breq	.+2      	; 0x11c0 <xEventGroupWaitBits+0x72>
    11be:	80 e0       	ldi	r24, 0x00	; 0
    11c0:	88 23       	and	r24, r24
    11c2:	81 f0       	breq	.+32     	; 0x11e4 <xEventGroupWaitBits+0x96>
    11c4:	66 20       	and	r6, r6
    11c6:	09 f4       	brne	.+2      	; 0x11ca <xEventGroupWaitBits+0x7c>
    11c8:	6b c0       	rjmp	.+214    	; 0x12a0 <xEventGroupWaitBits+0x152>
    11ca:	80 94       	com	r8
    11cc:	90 94       	com	r9
    11ce:	a0 94       	com	r10
    11d0:	b0 94       	com	r11
    11d2:	82 20       	and	r8, r2
    11d4:	93 20       	and	r9, r3
    11d6:	a4 20       	and	r10, r4
    11d8:	b5 20       	and	r11, r5
    11da:	88 82       	st	Y, r8
    11dc:	99 82       	std	Y+1, r9	; 0x01
    11de:	aa 82       	std	Y+2, r10	; 0x02
    11e0:	bb 82       	std	Y+3, r11	; 0x03
    11e2:	5e c0       	rjmp	.+188    	; 0x12a0 <xEventGroupWaitBits+0x152>
    11e4:	c1 14       	cp	r12, r1
    11e6:	d1 04       	cpc	r13, r1
    11e8:	e1 04       	cpc	r14, r1
    11ea:	f1 04       	cpc	r15, r1
    11ec:	09 f4       	brne	.+2      	; 0x11f0 <xEventGroupWaitBits+0xa2>
    11ee:	58 c0       	rjmp	.+176    	; 0x12a0 <xEventGroupWaitBits+0x152>
    11f0:	66 20       	and	r6, r6
    11f2:	29 f0       	breq	.+10     	; 0x11fe <xEventGroupWaitBits+0xb0>
    11f4:	40 e0       	ldi	r20, 0x00	; 0
    11f6:	50 e0       	ldi	r21, 0x00	; 0
    11f8:	60 e0       	ldi	r22, 0x00	; 0
    11fa:	71 e0       	ldi	r23, 0x01	; 1
    11fc:	03 c0       	rjmp	.+6      	; 0x1204 <xEventGroupWaitBits+0xb6>
    11fe:	40 e0       	ldi	r20, 0x00	; 0
    1200:	50 e0       	ldi	r21, 0x00	; 0
    1202:	ba 01       	movw	r22, r20
    1204:	71 10       	cpse	r7, r1
    1206:	74 60       	ori	r23, 0x04	; 4
    1208:	48 29       	or	r20, r8
    120a:	59 29       	or	r21, r9
    120c:	6a 29       	or	r22, r10
    120e:	7b 29       	or	r23, r11
    1210:	97 01       	movw	r18, r14
    1212:	86 01       	movw	r16, r12
    1214:	ce 01       	movw	r24, r28
    1216:	04 96       	adiw	r24, 0x04	; 4
    1218:	0e 94 f0 17 	call	0x2fe0	; 0x2fe0 <vTaskPlaceOnUnorderedEventList>
    121c:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <xTaskResumeAll>
    1220:	81 11       	cpse	r24, r1
    1222:	01 c0       	rjmp	.+2      	; 0x1226 <xEventGroupWaitBits+0xd8>
    1224:	6c d3       	rcall	.+1752   	; 0x18fe <vPortYield>
    1226:	0e 94 37 1a 	call	0x346e	; 0x346e <uxTaskResetEventItemValue>
    122a:	91 fd       	sbrc	r25, 1
    122c:	35 c0       	rjmp	.+106    	; 0x1298 <xEventGroupWaitBits+0x14a>
    122e:	0f b6       	in	r0, 0x3f	; 63
    1230:	f8 94       	cli
    1232:	0f 92       	push	r0
    1234:	68 81       	ld	r22, Y
    1236:	79 81       	ldd	r23, Y+1	; 0x01
    1238:	8a 81       	ldd	r24, Y+2	; 0x02
    123a:	9b 81       	ldd	r25, Y+3	; 0x03
    123c:	71 10       	cpse	r7, r1
    123e:	0d c0       	rjmp	.+26     	; 0x125a <xEventGroupWaitBits+0x10c>
    1240:	21 e0       	ldi	r18, 0x01	; 1
    1242:	75 01       	movw	r14, r10
    1244:	64 01       	movw	r12, r8
    1246:	c6 22       	and	r12, r22
    1248:	d7 22       	and	r13, r23
    124a:	e8 22       	and	r14, r24
    124c:	f9 22       	and	r15, r25
    124e:	cd 28       	or	r12, r13
    1250:	ce 28       	or	r12, r14
    1252:	cf 28       	or	r12, r15
    1254:	79 f4       	brne	.+30     	; 0x1274 <xEventGroupWaitBits+0x126>
    1256:	20 e0       	ldi	r18, 0x00	; 0
    1258:	0d c0       	rjmp	.+26     	; 0x1274 <xEventGroupWaitBits+0x126>
    125a:	21 e0       	ldi	r18, 0x01	; 1
    125c:	75 01       	movw	r14, r10
    125e:	64 01       	movw	r12, r8
    1260:	c6 22       	and	r12, r22
    1262:	d7 22       	and	r13, r23
    1264:	e8 22       	and	r14, r24
    1266:	f9 22       	and	r15, r25
    1268:	c8 14       	cp	r12, r8
    126a:	d9 04       	cpc	r13, r9
    126c:	ea 04       	cpc	r14, r10
    126e:	fb 04       	cpc	r15, r11
    1270:	09 f0       	breq	.+2      	; 0x1274 <xEventGroupWaitBits+0x126>
    1272:	20 e0       	ldi	r18, 0x00	; 0
    1274:	22 23       	and	r18, r18
    1276:	71 f0       	breq	.+28     	; 0x1294 <xEventGroupWaitBits+0x146>
    1278:	66 20       	and	r6, r6
    127a:	61 f0       	breq	.+24     	; 0x1294 <xEventGroupWaitBits+0x146>
    127c:	80 94       	com	r8
    127e:	90 94       	com	r9
    1280:	a0 94       	com	r10
    1282:	b0 94       	com	r11
    1284:	86 22       	and	r8, r22
    1286:	97 22       	and	r9, r23
    1288:	a8 22       	and	r10, r24
    128a:	b9 22       	and	r11, r25
    128c:	88 82       	st	Y, r8
    128e:	99 82       	std	Y+1, r9	; 0x01
    1290:	aa 82       	std	Y+2, r10	; 0x02
    1292:	bb 82       	std	Y+3, r11	; 0x03
    1294:	0f 90       	pop	r0
    1296:	0f be       	out	0x3f, r0	; 63
    1298:	1b 01       	movw	r2, r22
    129a:	2c 01       	movw	r4, r24
    129c:	55 24       	eor	r5, r5
    129e:	02 c0       	rjmp	.+4      	; 0x12a4 <xEventGroupWaitBits+0x156>
    12a0:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <xTaskResumeAll>
    12a4:	c2 01       	movw	r24, r4
    12a6:	b1 01       	movw	r22, r2
    12a8:	df 91       	pop	r29
    12aa:	cf 91       	pop	r28
    12ac:	1f 91       	pop	r17
    12ae:	0f 91       	pop	r16
    12b0:	ff 90       	pop	r15
    12b2:	ef 90       	pop	r14
    12b4:	df 90       	pop	r13
    12b6:	cf 90       	pop	r12
    12b8:	bf 90       	pop	r11
    12ba:	af 90       	pop	r10
    12bc:	9f 90       	pop	r9
    12be:	8f 90       	pop	r8
    12c0:	7f 90       	pop	r7
    12c2:	6f 90       	pop	r6
    12c4:	5f 90       	pop	r5
    12c6:	4f 90       	pop	r4
    12c8:	3f 90       	pop	r3
    12ca:	2f 90       	pop	r2
    12cc:	08 95       	ret

000012ce <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
    12ce:	4f 92       	push	r4
    12d0:	5f 92       	push	r5
    12d2:	6f 92       	push	r6
    12d4:	7f 92       	push	r7
    12d6:	8f 92       	push	r8
    12d8:	9f 92       	push	r9
    12da:	af 92       	push	r10
    12dc:	bf 92       	push	r11
    12de:	cf 92       	push	r12
    12e0:	df 92       	push	r13
    12e2:	ef 92       	push	r14
    12e4:	ff 92       	push	r15
    12e6:	0f 93       	push	r16
    12e8:	1f 93       	push	r17
    12ea:	cf 93       	push	r28
    12ec:	df 93       	push	r29
    12ee:	ec 01       	movw	r28, r24
    12f0:	6a 01       	movw	r12, r20
    12f2:	7b 01       	movw	r14, r22
    itself. */
    configASSERT( xEventGroup );
    configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

    pxList = &( pxEventBits->xTasksWaitingForBits );
    pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    12f4:	8c 01       	movw	r16, r24
    12f6:	09 5f       	subi	r16, 0xF9	; 249
    12f8:	1f 4f       	sbci	r17, 0xFF	; 255
    vTaskSuspendAll();
    12fa:	0e 94 dc 15 	call	0x2bb8	; 0x2bb8 <vTaskSuspendAll>
    {
        traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

        pxListItem = listGET_HEAD_ENTRY( pxList );
    12fe:	eb 85       	ldd	r30, Y+11	; 0x0b
    1300:	fc 85       	ldd	r31, Y+12	; 0x0c

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;
    1302:	88 81       	ld	r24, Y
    1304:	99 81       	ldd	r25, Y+1	; 0x01
    1306:	aa 81       	ldd	r26, Y+2	; 0x02
    1308:	bb 81       	ldd	r27, Y+3	; 0x03
    130a:	c8 2a       	or	r12, r24
    130c:	d9 2a       	or	r13, r25
    130e:	ea 2a       	or	r14, r26
    1310:	fb 2a       	or	r15, r27
    1312:	c8 82       	st	Y, r12
    1314:	d9 82       	std	Y+1, r13	; 0x01
    1316:	ea 82       	std	Y+2, r14	; 0x02
    1318:	fb 82       	std	Y+3, r15	; 0x03

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
    131a:	0e 17       	cp	r16, r30
    131c:	1f 07       	cpc	r17, r31
    131e:	09 f4       	brne	.+2      	; 0x1322 <xEventGroupSetBits+0x54>
    1320:	45 c0       	rjmp	.+138    	; 0x13ac <xEventGroupSetBits+0xde>
    1322:	c1 2c       	mov	r12, r1
    1324:	d1 2c       	mov	r13, r1
    1326:	76 01       	movw	r14, r12
            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
                {
                    xMatchFound = pdTRUE;
    1328:	99 24       	eor	r9, r9
    132a:	93 94       	inc	r9
    132c:	81 2c       	mov	r8, r1
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
    132e:	a4 80       	ldd	r10, Z+4	; 0x04
    1330:	b5 80       	ldd	r11, Z+5	; 0x05
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
    1332:	80 81       	ld	r24, Z
    1334:	91 81       	ldd	r25, Z+1	; 0x01
    1336:	a2 81       	ldd	r26, Z+2	; 0x02
    1338:	b3 81       	ldd	r27, Z+3	; 0x03
            xMatchFound = pdFALSE;

            /* Split the bits waited for from the control bits. */
            uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
            uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
    133a:	ac 01       	movw	r20, r24
    133c:	bd 01       	movw	r22, r26
    133e:	77 27       	eor	r23, r23

            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
    1340:	b2 fd       	sbrc	r27, 2
    1342:	0f c0       	rjmp	.+30     	; 0x1362 <xEventGroupSetBits+0x94>
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
                {
                    xMatchFound = pdTRUE;
    1344:	48 80       	ld	r4, Y
    1346:	59 80       	ldd	r5, Y+1	; 0x01
    1348:	6a 80       	ldd	r6, Y+2	; 0x02
    134a:	7b 80       	ldd	r7, Y+3	; 0x03
    134c:	44 22       	and	r4, r20
    134e:	55 22       	and	r5, r21
    1350:	66 22       	and	r6, r22
    1352:	77 22       	and	r7, r23
    1354:	29 2d       	mov	r18, r9
    1356:	45 28       	or	r4, r5
    1358:	46 28       	or	r4, r6
    135a:	47 28       	or	r4, r7
    135c:	89 f4       	brne	.+34     	; 0x1380 <xEventGroupSetBits+0xb2>
    135e:	28 2d       	mov	r18, r8
    1360:	0f c0       	rjmp	.+30     	; 0x1380 <xEventGroupSetBits+0xb2>
    1362:	48 80       	ld	r4, Y
    1364:	59 80       	ldd	r5, Y+1	; 0x01
    1366:	6a 80       	ldd	r6, Y+2	; 0x02
    1368:	7b 80       	ldd	r7, Y+3	; 0x03
    136a:	44 22       	and	r4, r20
    136c:	55 22       	and	r5, r21
    136e:	66 22       	and	r6, r22
    1370:	77 22       	and	r7, r23
    1372:	29 2d       	mov	r18, r9
    1374:	44 16       	cp	r4, r20
    1376:	55 06       	cpc	r5, r21
    1378:	66 06       	cpc	r6, r22
    137a:	77 06       	cpc	r7, r23
    137c:	09 f0       	breq	.+2      	; 0x1380 <xEventGroupSetBits+0xb2>
    137e:	28 2d       	mov	r18, r8
            else
            {
                /* Need all bits to be set, but not all the bits were set. */
            }

            if( xMatchFound != pdFALSE )
    1380:	22 23       	and	r18, r18
    1382:	71 f0       	breq	.+28     	; 0x13a0 <xEventGroupSetBits+0xd2>
            {
                /* The bits match.  Should the bits be cleared on exit? */
                if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
    1384:	b0 ff       	sbrs	r27, 0
    1386:	04 c0       	rjmp	.+8      	; 0x1390 <xEventGroupSetBits+0xc2>
                {
                    uxBitsToClear |= uxBitsWaitedFor;
    1388:	c4 2a       	or	r12, r20
    138a:	d5 2a       	or	r13, r21
    138c:	e6 2a       	or	r14, r22
    138e:	f7 2a       	or	r15, r23
                /* Store the actual event flag value in the task's event list
                item before removing the task from the event list.  The
                eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                that is was unblocked due to its required bits matching, rather
                than because it timed out. */
                vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
    1390:	48 81       	ld	r20, Y
    1392:	59 81       	ldd	r21, Y+1	; 0x01
    1394:	6a 81       	ldd	r22, Y+2	; 0x02
    1396:	7b 81       	ldd	r23, Y+3	; 0x03
    1398:	72 60       	ori	r23, 0x02	; 2
    139a:	cf 01       	movw	r24, r30
    139c:	0e 94 76 18 	call	0x30ec	; 0x30ec <vTaskRemoveFromUnorderedEventList>
    13a0:	ea 2d       	mov	r30, r10
    13a2:	fb 2d       	mov	r31, r11

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
    13a4:	0e 17       	cp	r16, r30
    13a6:	1f 07       	cpc	r17, r31
    13a8:	11 f6       	brne	.-124    	; 0x132e <xEventGroupSetBits+0x60>
    13aa:	03 c0       	rjmp	.+6      	; 0x13b2 <xEventGroupSetBits+0xe4>
EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
    13ac:	c1 2c       	mov	r12, r1
    13ae:	d1 2c       	mov	r13, r1
    13b0:	76 01       	movw	r14, r12
            pxListItem = pxNext;
        }

        /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
        bit was set in the control word. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
    13b2:	c0 94       	com	r12
    13b4:	d0 94       	com	r13
    13b6:	e0 94       	com	r14
    13b8:	f0 94       	com	r15
    13ba:	88 81       	ld	r24, Y
    13bc:	99 81       	ldd	r25, Y+1	; 0x01
    13be:	aa 81       	ldd	r26, Y+2	; 0x02
    13c0:	bb 81       	ldd	r27, Y+3	; 0x03
    13c2:	c8 22       	and	r12, r24
    13c4:	d9 22       	and	r13, r25
    13c6:	ea 22       	and	r14, r26
    13c8:	fb 22       	and	r15, r27
    13ca:	c8 82       	st	Y, r12
    13cc:	d9 82       	std	Y+1, r13	; 0x01
    13ce:	ea 82       	std	Y+2, r14	; 0x02
    13d0:	fb 82       	std	Y+3, r15	; 0x03
    }
    ( void ) xTaskResumeAll();
    13d2:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <xTaskResumeAll>

    return pxEventBits->uxEventBits;
    13d6:	68 81       	ld	r22, Y
    13d8:	79 81       	ldd	r23, Y+1	; 0x01
    13da:	8a 81       	ldd	r24, Y+2	; 0x02
    13dc:	9b 81       	ldd	r25, Y+3	; 0x03
}
    13de:	df 91       	pop	r29
    13e0:	cf 91       	pop	r28
    13e2:	1f 91       	pop	r17
    13e4:	0f 91       	pop	r16
    13e6:	ff 90       	pop	r15
    13e8:	ef 90       	pop	r14
    13ea:	df 90       	pop	r13
    13ec:	cf 90       	pop	r12
    13ee:	bf 90       	pop	r11
    13f0:	af 90       	pop	r10
    13f2:	9f 90       	pop	r9
    13f4:	8f 90       	pop	r8
    13f6:	7f 90       	pop	r7
    13f8:	6f 90       	pop	r6
    13fa:	5f 90       	pop	r5
    13fc:	4f 90       	pop	r4
    13fe:	08 95       	ret

00001400 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
    1400:	cf 93       	push	r28
    1402:	df 93       	push	r29
    1404:	dc 01       	movw	r26, r24
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
    1406:	e3 e9       	ldi	r30, 0x93	; 147
    1408:	f9 e0       	ldi	r31, 0x09	; 9
    140a:	01 c0       	rjmp	.+2      	; 0x140e <prvInsertBlockIntoFreeList+0xe>
    140c:	f9 01       	movw	r30, r18
    140e:	20 81       	ld	r18, Z
    1410:	31 81       	ldd	r19, Z+1	; 0x01
    1412:	2a 17       	cp	r18, r26
    1414:	3b 07       	cpc	r19, r27
    1416:	d0 f3       	brcs	.-12     	; 0x140c <prvInsertBlockIntoFreeList+0xc>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
    1418:	82 81       	ldd	r24, Z+2	; 0x02
    141a:	93 81       	ldd	r25, Z+3	; 0x03
    141c:	af 01       	movw	r20, r30
    141e:	48 0f       	add	r20, r24
    1420:	59 1f       	adc	r21, r25
    1422:	a4 17       	cp	r26, r20
    1424:	b5 07       	cpc	r27, r21
    1426:	49 f4       	brne	.+18     	; 0x143a <prvInsertBlockIntoFreeList+0x3a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
    1428:	12 96       	adiw	r26, 0x02	; 2
    142a:	4d 91       	ld	r20, X+
    142c:	5c 91       	ld	r21, X
    142e:	13 97       	sbiw	r26, 0x03	; 3
    1430:	84 0f       	add	r24, r20
    1432:	95 1f       	adc	r25, r21
    1434:	93 83       	std	Z+3, r25	; 0x03
    1436:	82 83       	std	Z+2, r24	; 0x02
    1438:	df 01       	movw	r26, r30
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
    143a:	12 96       	adiw	r26, 0x02	; 2
    143c:	8d 91       	ld	r24, X+
    143e:	9c 91       	ld	r25, X
    1440:	13 97       	sbiw	r26, 0x03	; 3
    1442:	ed 01       	movw	r28, r26
    1444:	c8 0f       	add	r28, r24
    1446:	d9 1f       	adc	r29, r25
    1448:	2c 17       	cp	r18, r28
    144a:	3d 07       	cpc	r19, r29
    144c:	d9 f4       	brne	.+54     	; 0x1484 <prvInsertBlockIntoFreeList+0x84>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
    144e:	20 91 91 09 	lds	r18, 0x0991	; 0x800991 <pxEnd>
    1452:	30 91 92 09 	lds	r19, 0x0992	; 0x800992 <pxEnd+0x1>
    1456:	c2 17       	cp	r28, r18
    1458:	d3 07       	cpc	r29, r19
    145a:	81 f0       	breq	.+32     	; 0x147c <prvInsertBlockIntoFreeList+0x7c>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
    145c:	2a 81       	ldd	r18, Y+2	; 0x02
    145e:	3b 81       	ldd	r19, Y+3	; 0x03
    1460:	82 0f       	add	r24, r18
    1462:	93 1f       	adc	r25, r19
    1464:	13 96       	adiw	r26, 0x03	; 3
    1466:	9c 93       	st	X, r25
    1468:	8e 93       	st	-X, r24
    146a:	12 97       	sbiw	r26, 0x02	; 2
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
    146c:	c0 81       	ld	r28, Z
    146e:	d1 81       	ldd	r29, Z+1	; 0x01
    1470:	88 81       	ld	r24, Y
    1472:	99 81       	ldd	r25, Y+1	; 0x01
    1474:	11 96       	adiw	r26, 0x01	; 1
    1476:	9c 93       	st	X, r25
    1478:	8e 93       	st	-X, r24
    147a:	07 c0       	rjmp	.+14     	; 0x148a <prvInsertBlockIntoFreeList+0x8a>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
    147c:	11 96       	adiw	r26, 0x01	; 1
    147e:	dc 93       	st	X, r29
    1480:	ce 93       	st	-X, r28
    1482:	03 c0       	rjmp	.+6      	; 0x148a <prvInsertBlockIntoFreeList+0x8a>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
    1484:	11 96       	adiw	r26, 0x01	; 1
    1486:	3c 93       	st	X, r19
    1488:	2e 93       	st	-X, r18

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
    148a:	ae 17       	cp	r26, r30
    148c:	bf 07       	cpc	r27, r31
    148e:	11 f0       	breq	.+4      	; 0x1494 <prvInsertBlockIntoFreeList+0x94>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
    1490:	b1 83       	std	Z+1, r27	; 0x01
    1492:	a0 83       	st	Z, r26
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    1494:	df 91       	pop	r29
    1496:	cf 91       	pop	r28
    1498:	08 95       	ret

0000149a <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    149a:	cf 92       	push	r12
    149c:	df 92       	push	r13
    149e:	ef 92       	push	r14
    14a0:	ff 92       	push	r15
    14a2:	0f 93       	push	r16
    14a4:	1f 93       	push	r17
    14a6:	cf 93       	push	r28
    14a8:	df 93       	push	r29
    14aa:	ec 01       	movw	r28, r24
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
    14ac:	0e 94 dc 15 	call	0x2bb8	; 0x2bb8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
    14b0:	80 91 91 09 	lds	r24, 0x0991	; 0x800991 <pxEnd>
    14b4:	90 91 92 09 	lds	r25, 0x0992	; 0x800992 <pxEnd+0x1>
    14b8:	89 2b       	or	r24, r25
    14ba:	41 f5       	brne	.+80     	; 0x150c <pvPortMalloc+0x72>

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
    14bc:	e3 e9       	ldi	r30, 0x93	; 147
    14be:	f9 e0       	ldi	r31, 0x09	; 9
    14c0:	a7 e9       	ldi	r26, 0x97	; 151
    14c2:	b9 e0       	ldi	r27, 0x09	; 9
    14c4:	b1 83       	std	Z+1, r27	; 0x01
    14c6:	a0 83       	st	Z, r26
	xStart.xBlockSize = ( size_t ) 0;
    14c8:	13 82       	std	Z+3, r1	; 0x03
    14ca:	12 82       	std	Z+2, r1	; 0x02
	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
	uxAddress -= xHeapStructSize;
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
	pxEnd = ( void * ) uxAddress;
    14cc:	e3 e3       	ldi	r30, 0x33	; 51
    14ce:	f9 e1       	ldi	r31, 0x19	; 25
    14d0:	f0 93 92 09 	sts	0x0992, r31	; 0x800992 <pxEnd+0x1>
    14d4:	e0 93 91 09 	sts	0x0991, r30	; 0x800991 <pxEnd>
	pxEnd->xBlockSize = 0;
    14d8:	13 82       	std	Z+3, r1	; 0x03
    14da:	12 82       	std	Z+2, r1	; 0x02
	pxEnd->pxNextFreeBlock = NULL;
    14dc:	11 82       	std	Z+1, r1	; 0x01
    14de:	10 82       	st	Z, r1

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
    14e0:	8c e9       	ldi	r24, 0x9C	; 156
    14e2:	9f e0       	ldi	r25, 0x0F	; 15
    14e4:	13 96       	adiw	r26, 0x03	; 3
    14e6:	9c 93       	st	X, r25
    14e8:	8e 93       	st	-X, r24
    14ea:	12 97       	sbiw	r26, 0x02	; 2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
    14ec:	ed 93       	st	X+, r30
    14ee:	fc 93       	st	X, r31

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
    14f0:	90 93 8e 09 	sts	0x098E, r25	; 0x80098e <xMinimumEverFreeBytesRemaining+0x1>
    14f4:	80 93 8d 09 	sts	0x098D, r24	; 0x80098d <xMinimumEverFreeBytesRemaining>
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
    14f8:	90 93 90 09 	sts	0x0990, r25	; 0x800990 <xFreeBytesRemaining+0x1>
    14fc:	80 93 8f 09 	sts	0x098F, r24	; 0x80098f <xFreeBytesRemaining>

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
    1500:	80 e0       	ldi	r24, 0x00	; 0
    1502:	90 e8       	ldi	r25, 0x80	; 128
    1504:	90 93 8c 09 	sts	0x098C, r25	; 0x80098c <xBlockAllocatedBit+0x1>
    1508:	80 93 8b 09 	sts	0x098B, r24	; 0x80098b <xBlockAllocatedBit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
    150c:	e0 90 8b 09 	lds	r14, 0x098B	; 0x80098b <xBlockAllocatedBit>
    1510:	f0 90 8c 09 	lds	r15, 0x098C	; 0x80098c <xBlockAllocatedBit+0x1>
    1514:	c7 01       	movw	r24, r14
    1516:	8c 23       	and	r24, r28
    1518:	9d 23       	and	r25, r29
    151a:	89 2b       	or	r24, r25
    151c:	09 f0       	breq	.+2      	; 0x1520 <pvPortMalloc+0x86>
    151e:	66 c0       	rjmp	.+204    	; 0x15ec <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
    1520:	20 97       	sbiw	r28, 0x00	; 0
    1522:	09 f4       	brne	.+2      	; 0x1526 <pvPortMalloc+0x8c>
    1524:	66 c0       	rjmp	.+204    	; 0x15f2 <pvPortMalloc+0x158>
			{
				xWantedSize += xHeapStructSize;
    1526:	ae 01       	movw	r20, r28
    1528:	4c 5f       	subi	r20, 0xFC	; 252
    152a:	5f 4f       	sbci	r21, 0xFF	; 255
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
    152c:	09 f4       	brne	.+2      	; 0x1530 <pvPortMalloc+0x96>
    152e:	5e c0       	rjmp	.+188    	; 0x15ec <pvPortMalloc+0x152>
    1530:	00 91 8f 09 	lds	r16, 0x098F	; 0x80098f <xFreeBytesRemaining>
    1534:	10 91 90 09 	lds	r17, 0x0990	; 0x800990 <xFreeBytesRemaining+0x1>
    1538:	04 17       	cp	r16, r20
    153a:	15 07       	cpc	r17, r21
    153c:	08 f4       	brcc	.+2      	; 0x1540 <pvPortMalloc+0xa6>
    153e:	56 c0       	rjmp	.+172    	; 0x15ec <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
    1540:	c0 91 93 09 	lds	r28, 0x0993	; 0x800993 <xStart>
    1544:	d0 91 94 09 	lds	r29, 0x0994	; 0x800994 <xStart+0x1>

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
    1548:	e3 e9       	ldi	r30, 0x93	; 147
    154a:	f9 e0       	ldi	r31, 0x09	; 9
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    154c:	02 c0       	rjmp	.+4      	; 0x1552 <pvPortMalloc+0xb8>
    154e:	fe 01       	movw	r30, r28
				{
					pxPreviousBlock = pxBlock;
					pxBlock = pxBlock->pxNextFreeBlock;
    1550:	e9 01       	movw	r28, r18
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    1552:	2a 81       	ldd	r18, Y+2	; 0x02
    1554:	3b 81       	ldd	r19, Y+3	; 0x03
    1556:	24 17       	cp	r18, r20
    1558:	35 07       	cpc	r19, r21
    155a:	28 f4       	brcc	.+10     	; 0x1566 <pvPortMalloc+0xcc>
    155c:	28 81       	ld	r18, Y
    155e:	39 81       	ldd	r19, Y+1	; 0x01
    1560:	21 15       	cp	r18, r1
    1562:	31 05       	cpc	r19, r1
    1564:	a1 f7       	brne	.-24     	; 0x154e <pvPortMalloc+0xb4>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
    1566:	80 91 91 09 	lds	r24, 0x0991	; 0x800991 <pxEnd>
    156a:	90 91 92 09 	lds	r25, 0x0992	; 0x800992 <pxEnd+0x1>
    156e:	c8 17       	cp	r28, r24
    1570:	d9 07       	cpc	r29, r25
    1572:	e1 f1       	breq	.+120    	; 0x15ec <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
    1574:	c0 80       	ld	r12, Z
    1576:	d1 80       	ldd	r13, Z+1	; 0x01
    1578:	84 e0       	ldi	r24, 0x04	; 4
    157a:	c8 0e       	add	r12, r24
    157c:	d1 1c       	adc	r13, r1

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    157e:	88 81       	ld	r24, Y
    1580:	99 81       	ldd	r25, Y+1	; 0x01
    1582:	91 83       	std	Z+1, r25	; 0x01
    1584:	80 83       	st	Z, r24

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    1586:	2a 81       	ldd	r18, Y+2	; 0x02
    1588:	3b 81       	ldd	r19, Y+3	; 0x03
    158a:	24 1b       	sub	r18, r20
    158c:	35 0b       	sbc	r19, r21
    158e:	29 30       	cpi	r18, 0x09	; 9
    1590:	31 05       	cpc	r19, r1
    1592:	48 f0       	brcs	.+18     	; 0x15a6 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
    1594:	ce 01       	movw	r24, r28
    1596:	84 0f       	add	r24, r20
    1598:	95 1f       	adc	r25, r21
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    159a:	fc 01       	movw	r30, r24
    159c:	33 83       	std	Z+3, r19	; 0x03
    159e:	22 83       	std	Z+2, r18	; 0x02
						pxBlock->xBlockSize = xWantedSize;
    15a0:	5b 83       	std	Y+3, r21	; 0x03
    15a2:	4a 83       	std	Y+2, r20	; 0x02

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
    15a4:	2d df       	rcall	.-422    	; 0x1400 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
    15a6:	8a 81       	ldd	r24, Y+2	; 0x02
    15a8:	9b 81       	ldd	r25, Y+3	; 0x03
    15aa:	08 1b       	sub	r16, r24
    15ac:	19 0b       	sbc	r17, r25
    15ae:	10 93 90 09 	sts	0x0990, r17	; 0x800990 <xFreeBytesRemaining+0x1>
    15b2:	00 93 8f 09 	sts	0x098F, r16	; 0x80098f <xFreeBytesRemaining>

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
    15b6:	20 91 8d 09 	lds	r18, 0x098D	; 0x80098d <xMinimumEverFreeBytesRemaining>
    15ba:	30 91 8e 09 	lds	r19, 0x098E	; 0x80098e <xMinimumEverFreeBytesRemaining+0x1>
    15be:	02 17       	cp	r16, r18
    15c0:	13 07       	cpc	r17, r19
    15c2:	20 f4       	brcc	.+8      	; 0x15cc <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
    15c4:	10 93 8e 09 	sts	0x098E, r17	; 0x80098e <xMinimumEverFreeBytesRemaining+0x1>
    15c8:	00 93 8d 09 	sts	0x098D, r16	; 0x80098d <xMinimumEverFreeBytesRemaining>
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
    15cc:	e8 2a       	or	r14, r24
    15ce:	f9 2a       	or	r15, r25
    15d0:	fb 82       	std	Y+3, r15	; 0x03
    15d2:	ea 82       	std	Y+2, r14	; 0x02
					pxBlock->pxNextFreeBlock = NULL;
    15d4:	19 82       	std	Y+1, r1	; 0x01
    15d6:	18 82       	st	Y, r1
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    15d8:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
    15dc:	c1 14       	cp	r12, r1
    15de:	d1 04       	cpc	r13, r1
    15e0:	59 f4       	brne	.+22     	; 0x15f8 <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
    15e2:	0e 94 98 1d 	call	0x3b30	; 0x3b30 <vApplicationMallocFailedHook>
    15e6:	c1 2c       	mov	r12, r1
    15e8:	d1 2c       	mov	r13, r1
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
    15ea:	06 c0       	rjmp	.+12     	; 0x15f8 <pvPortMalloc+0x15e>
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    15ec:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <xTaskResumeAll>
    15f0:	f8 cf       	rjmp	.-16     	; 0x15e2 <pvPortMalloc+0x148>
    15f2:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <xTaskResumeAll>
    15f6:	f5 cf       	rjmp	.-22     	; 0x15e2 <pvPortMalloc+0x148>
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
}
    15f8:	c6 01       	movw	r24, r12
    15fa:	df 91       	pop	r29
    15fc:	cf 91       	pop	r28
    15fe:	1f 91       	pop	r17
    1600:	0f 91       	pop	r16
    1602:	ff 90       	pop	r15
    1604:	ef 90       	pop	r14
    1606:	df 90       	pop	r13
    1608:	cf 90       	pop	r12
    160a:	08 95       	ret

0000160c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    160c:	cf 93       	push	r28
    160e:	df 93       	push	r29
uint8_t *puc = ( uint8_t * ) pv;
BlockLink_t *pxLink;

	if( pv != NULL )
    1610:	00 97       	sbiw	r24, 0x00	; 0
    1612:	51 f1       	breq	.+84     	; 0x1668 <vPortFree+0x5c>

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
		configASSERT( pxLink->pxNextFreeBlock == NULL );

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
    1614:	fc 01       	movw	r30, r24
    1616:	34 97       	sbiw	r30, 0x04	; 4
    1618:	22 81       	ldd	r18, Z+2	; 0x02
    161a:	33 81       	ldd	r19, Z+3	; 0x03
    161c:	40 91 8b 09 	lds	r20, 0x098B	; 0x80098b <xBlockAllocatedBit>
    1620:	50 91 8c 09 	lds	r21, 0x098C	; 0x80098c <xBlockAllocatedBit+0x1>
    1624:	b9 01       	movw	r22, r18
    1626:	64 23       	and	r22, r20
    1628:	75 23       	and	r23, r21
    162a:	67 2b       	or	r22, r23
    162c:	e9 f0       	breq	.+58     	; 0x1668 <vPortFree+0x5c>
		{
			if( pxLink->pxNextFreeBlock == NULL )
    162e:	60 81       	ld	r22, Z
    1630:	71 81       	ldd	r23, Z+1	; 0x01
    1632:	67 2b       	or	r22, r23
    1634:	c9 f4       	brne	.+50     	; 0x1668 <vPortFree+0x5c>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
    1636:	ef 01       	movw	r28, r30
    1638:	40 95       	com	r20
    163a:	50 95       	com	r21
    163c:	24 23       	and	r18, r20
    163e:	35 23       	and	r19, r21
    1640:	33 83       	std	Z+3, r19	; 0x03
    1642:	22 83       	std	Z+2, r18	; 0x02

				vTaskSuspendAll();
    1644:	0e 94 dc 15 	call	0x2bb8	; 0x2bb8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
    1648:	20 91 8f 09 	lds	r18, 0x098F	; 0x80098f <xFreeBytesRemaining>
    164c:	30 91 90 09 	lds	r19, 0x0990	; 0x800990 <xFreeBytesRemaining+0x1>
    1650:	8a 81       	ldd	r24, Y+2	; 0x02
    1652:	9b 81       	ldd	r25, Y+3	; 0x03
    1654:	82 0f       	add	r24, r18
    1656:	93 1f       	adc	r25, r19
    1658:	90 93 90 09 	sts	0x0990, r25	; 0x800990 <xFreeBytesRemaining+0x1>
    165c:	80 93 8f 09 	sts	0x098F, r24	; 0x80098f <xFreeBytesRemaining>
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
    1660:	ce 01       	movw	r24, r28
    1662:	ce de       	rcall	.-612    	; 0x1400 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
    1664:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
    1668:	df 91       	pop	r29
    166a:	cf 91       	pop	r28
    166c:	08 95       	ret

0000166e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    166e:	fc 01       	movw	r30, r24
    /* The list structure contains a list item which is used to mark the
    end of the list.  To initialise the list the list end is inserted
    as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );            /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1670:	03 96       	adiw	r24, 0x03	; 3
    1672:	92 83       	std	Z+2, r25	; 0x02
    1674:	81 83       	std	Z+1, r24	; 0x01

    /* The list end value is the highest possible value in the list to
    ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
    1676:	4f ef       	ldi	r20, 0xFF	; 255
    1678:	5f ef       	ldi	r21, 0xFF	; 255
    167a:	ba 01       	movw	r22, r20
    167c:	43 83       	std	Z+3, r20	; 0x03
    167e:	54 83       	std	Z+4, r21	; 0x04
    1680:	65 83       	std	Z+5, r22	; 0x05
    1682:	76 83       	std	Z+6, r23	; 0x06

    /* The list end next and previous pointers point to itself so we know
    when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );    /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1684:	90 87       	std	Z+8, r25	; 0x08
    1686:	87 83       	std	Z+7, r24	; 0x07
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1688:	92 87       	std	Z+10, r25	; 0x0a
    168a:	81 87       	std	Z+9, r24	; 0x09

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    168c:	10 82       	st	Z, r1
    168e:	08 95       	ret

00001690 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
    1690:	fc 01       	movw	r30, r24
    1692:	13 86       	std	Z+11, r1	; 0x0b
    1694:	12 86       	std	Z+10, r1	; 0x0a
    1696:	08 95       	ret

00001698 <vListInsertEnd>:
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    1698:	cf 93       	push	r28
    169a:	df 93       	push	r29
    169c:	9c 01       	movw	r18, r24
    169e:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
    16a0:	dc 01       	movw	r26, r24
    16a2:	11 96       	adiw	r26, 0x01	; 1
    16a4:	cd 91       	ld	r28, X+
    16a6:	dc 91       	ld	r29, X
    16a8:	12 97       	sbiw	r26, 0x02	; 2
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
    makes the new list item the last item to be removed by a call to
    listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
    16aa:	d5 83       	std	Z+5, r29	; 0x05
    16ac:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    16ae:	8e 81       	ldd	r24, Y+6	; 0x06
    16b0:	9f 81       	ldd	r25, Y+7	; 0x07
    16b2:	97 83       	std	Z+7, r25	; 0x07
    16b4:	86 83       	std	Z+6, r24	; 0x06

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
    16b6:	8e 81       	ldd	r24, Y+6	; 0x06
    16b8:	9f 81       	ldd	r25, Y+7	; 0x07
    16ba:	dc 01       	movw	r26, r24
    16bc:	15 96       	adiw	r26, 0x05	; 5
    16be:	7c 93       	st	X, r23
    16c0:	6e 93       	st	-X, r22
    16c2:	14 97       	sbiw	r26, 0x04	; 4
    pxIndex->pxPrevious = pxNewListItem;
    16c4:	7f 83       	std	Y+7, r23	; 0x07
    16c6:	6e 83       	std	Y+6, r22	; 0x06

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
    16c8:	33 87       	std	Z+11, r19	; 0x0b
    16ca:	22 87       	std	Z+10, r18	; 0x0a

    ( pxList->uxNumberOfItems )++;
    16cc:	f9 01       	movw	r30, r18
    16ce:	80 81       	ld	r24, Z
    16d0:	8f 5f       	subi	r24, 0xFF	; 255
    16d2:	80 83       	st	Z, r24
}
    16d4:	df 91       	pop	r29
    16d6:	cf 91       	pop	r28
    16d8:	08 95       	ret

000016da <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    16da:	0f 93       	push	r16
    16dc:	1f 93       	push	r17
    16de:	cf 93       	push	r28
    16e0:	df 93       	push	r29
    16e2:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    16e4:	08 81       	ld	r16, Y
    16e6:	19 81       	ldd	r17, Y+1	; 0x01
    16e8:	2a 81       	ldd	r18, Y+2	; 0x02
    16ea:	3b 81       	ldd	r19, Y+3	; 0x03
    new list item should be placed after it.  This ensures that TCBs which are
    stored in ready lists (all of which have the same xItemValue value) get a
    share of the CPU.  However, if the xItemValue is the same as the back marker
    the iteration loop below will not end.  Therefore the value is checked
    first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
    16ec:	0f 3f       	cpi	r16, 0xFF	; 255
    16ee:	4f ef       	ldi	r20, 0xFF	; 255
    16f0:	14 07       	cpc	r17, r20
    16f2:	24 07       	cpc	r18, r20
    16f4:	34 07       	cpc	r19, r20
    16f6:	21 f4       	brne	.+8      	; 0x1700 <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
    16f8:	fc 01       	movw	r30, r24
    16fa:	a1 85       	ldd	r26, Z+9	; 0x09
    16fc:	b2 85       	ldd	r27, Z+10	; 0x0a
    16fe:	11 c0       	rjmp	.+34     	; 0x1722 <vListInsert+0x48>
            4) Using a queue or semaphore before it has been initialised or
               before the scheduler has been started (are interrupts firing
               before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
    1700:	dc 01       	movw	r26, r24
    1702:	13 96       	adiw	r26, 0x03	; 3
    1704:	01 c0       	rjmp	.+2      	; 0x1708 <vListInsert+0x2e>
    1706:	df 01       	movw	r26, r30
    1708:	14 96       	adiw	r26, 0x04	; 4
    170a:	ed 91       	ld	r30, X+
    170c:	fc 91       	ld	r31, X
    170e:	15 97       	sbiw	r26, 0x05	; 5
    1710:	40 81       	ld	r20, Z
    1712:	51 81       	ldd	r21, Z+1	; 0x01
    1714:	62 81       	ldd	r22, Z+2	; 0x02
    1716:	73 81       	ldd	r23, Z+3	; 0x03
    1718:	04 17       	cp	r16, r20
    171a:	15 07       	cpc	r17, r21
    171c:	26 07       	cpc	r18, r22
    171e:	37 07       	cpc	r19, r23
    1720:	90 f7       	brcc	.-28     	; 0x1706 <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
            insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
    1722:	14 96       	adiw	r26, 0x04	; 4
    1724:	ed 91       	ld	r30, X+
    1726:	fc 91       	ld	r31, X
    1728:	15 97       	sbiw	r26, 0x05	; 5
    172a:	fd 83       	std	Y+5, r31	; 0x05
    172c:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    172e:	d7 83       	std	Z+7, r29	; 0x07
    1730:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
    1732:	bf 83       	std	Y+7, r27	; 0x07
    1734:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
    1736:	15 96       	adiw	r26, 0x05	; 5
    1738:	dc 93       	st	X, r29
    173a:	ce 93       	st	-X, r28
    173c:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
    item later. */
    pxNewListItem->pxContainer = pxList;
    173e:	9b 87       	std	Y+11, r25	; 0x0b
    1740:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
    1742:	fc 01       	movw	r30, r24
    1744:	20 81       	ld	r18, Z
    1746:	2f 5f       	subi	r18, 0xFF	; 255
    1748:	20 83       	st	Z, r18
}
    174a:	df 91       	pop	r29
    174c:	cf 91       	pop	r28
    174e:	1f 91       	pop	r17
    1750:	0f 91       	pop	r16
    1752:	08 95       	ret

00001754 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    1754:	cf 93       	push	r28
    1756:	df 93       	push	r29
    1758:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
    175a:	a2 85       	ldd	r26, Z+10	; 0x0a
    175c:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    175e:	c4 81       	ldd	r28, Z+4	; 0x04
    1760:	d5 81       	ldd	r29, Z+5	; 0x05
    1762:	86 81       	ldd	r24, Z+6	; 0x06
    1764:	97 81       	ldd	r25, Z+7	; 0x07
    1766:	9f 83       	std	Y+7, r25	; 0x07
    1768:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    176a:	c6 81       	ldd	r28, Z+6	; 0x06
    176c:	d7 81       	ldd	r29, Z+7	; 0x07
    176e:	84 81       	ldd	r24, Z+4	; 0x04
    1770:	95 81       	ldd	r25, Z+5	; 0x05
    1772:	9d 83       	std	Y+5, r25	; 0x05
    1774:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
    1776:	11 96       	adiw	r26, 0x01	; 1
    1778:	8d 91       	ld	r24, X+
    177a:	9c 91       	ld	r25, X
    177c:	12 97       	sbiw	r26, 0x02	; 2
    177e:	e8 17       	cp	r30, r24
    1780:	f9 07       	cpc	r31, r25
    1782:	31 f4       	brne	.+12     	; 0x1790 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
    1784:	86 81       	ldd	r24, Z+6	; 0x06
    1786:	97 81       	ldd	r25, Z+7	; 0x07
    1788:	12 96       	adiw	r26, 0x02	; 2
    178a:	9c 93       	st	X, r25
    178c:	8e 93       	st	-X, r24
    178e:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
    1790:	13 86       	std	Z+11, r1	; 0x0b
    1792:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
    1794:	8c 91       	ld	r24, X
    1796:	81 50       	subi	r24, 0x01	; 1
    1798:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
    179a:	8c 91       	ld	r24, X
}
    179c:	df 91       	pop	r29
    179e:	cf 91       	pop	r28
    17a0:	08 95       	ret

000017a2 <pxPortInitialiseStack>:
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    17a2:	31 e1       	ldi	r19, 0x11	; 17
    17a4:	fc 01       	movw	r30, r24
    17a6:	30 83       	st	Z, r19
    17a8:	31 97       	sbiw	r30, 0x01	; 1
    17aa:	22 e2       	ldi	r18, 0x22	; 34
    17ac:	20 83       	st	Z, r18
    17ae:	31 97       	sbiw	r30, 0x01	; 1
    17b0:	a3 e3       	ldi	r26, 0x33	; 51
    17b2:	a0 83       	st	Z, r26
    17b4:	31 97       	sbiw	r30, 0x01	; 1
    17b6:	60 83       	st	Z, r22
    17b8:	31 97       	sbiw	r30, 0x01	; 1
    17ba:	70 83       	st	Z, r23
    17bc:	31 97       	sbiw	r30, 0x01	; 1
    17be:	10 82       	st	Z, r1
    17c0:	31 97       	sbiw	r30, 0x01	; 1
    17c2:	10 82       	st	Z, r1
    17c4:	31 97       	sbiw	r30, 0x01	; 1
    17c6:	60 e8       	ldi	r22, 0x80	; 128
    17c8:	60 83       	st	Z, r22
    17ca:	31 97       	sbiw	r30, 0x01	; 1
    17cc:	10 82       	st	Z, r1
    17ce:	31 97       	sbiw	r30, 0x01	; 1
    17d0:	10 82       	st	Z, r1
    17d2:	31 97       	sbiw	r30, 0x01	; 1
    17d4:	10 82       	st	Z, r1
    17d6:	31 97       	sbiw	r30, 0x01	; 1
    17d8:	62 e0       	ldi	r22, 0x02	; 2
    17da:	60 83       	st	Z, r22
    17dc:	31 97       	sbiw	r30, 0x01	; 1
    17de:	63 e0       	ldi	r22, 0x03	; 3
    17e0:	60 83       	st	Z, r22
    17e2:	31 97       	sbiw	r30, 0x01	; 1
    17e4:	64 e0       	ldi	r22, 0x04	; 4
    17e6:	60 83       	st	Z, r22
    17e8:	31 97       	sbiw	r30, 0x01	; 1
    17ea:	65 e0       	ldi	r22, 0x05	; 5
    17ec:	60 83       	st	Z, r22
    17ee:	31 97       	sbiw	r30, 0x01	; 1
    17f0:	66 e0       	ldi	r22, 0x06	; 6
    17f2:	60 83       	st	Z, r22
    17f4:	31 97       	sbiw	r30, 0x01	; 1
    17f6:	67 e0       	ldi	r22, 0x07	; 7
    17f8:	60 83       	st	Z, r22
    17fa:	31 97       	sbiw	r30, 0x01	; 1
    17fc:	68 e0       	ldi	r22, 0x08	; 8
    17fe:	60 83       	st	Z, r22
    1800:	31 97       	sbiw	r30, 0x01	; 1
    1802:	69 e0       	ldi	r22, 0x09	; 9
    1804:	60 83       	st	Z, r22
    1806:	31 97       	sbiw	r30, 0x01	; 1
    1808:	60 e1       	ldi	r22, 0x10	; 16
    180a:	60 83       	st	Z, r22
    180c:	31 97       	sbiw	r30, 0x01	; 1
    180e:	30 83       	st	Z, r19
    1810:	31 97       	sbiw	r30, 0x01	; 1
    1812:	32 e1       	ldi	r19, 0x12	; 18
    1814:	30 83       	st	Z, r19
    1816:	31 97       	sbiw	r30, 0x01	; 1
    1818:	33 e1       	ldi	r19, 0x13	; 19
    181a:	30 83       	st	Z, r19
    181c:	31 97       	sbiw	r30, 0x01	; 1
    181e:	34 e1       	ldi	r19, 0x14	; 20
    1820:	30 83       	st	Z, r19
    1822:	31 97       	sbiw	r30, 0x01	; 1
    1824:	35 e1       	ldi	r19, 0x15	; 21
    1826:	30 83       	st	Z, r19
    1828:	31 97       	sbiw	r30, 0x01	; 1
    182a:	36 e1       	ldi	r19, 0x16	; 22
    182c:	30 83       	st	Z, r19
    182e:	31 97       	sbiw	r30, 0x01	; 1
    1830:	37 e1       	ldi	r19, 0x17	; 23
    1832:	30 83       	st	Z, r19
    1834:	31 97       	sbiw	r30, 0x01	; 1
    1836:	38 e1       	ldi	r19, 0x18	; 24
    1838:	30 83       	st	Z, r19
    183a:	31 97       	sbiw	r30, 0x01	; 1
    183c:	39 e1       	ldi	r19, 0x19	; 25
    183e:	30 83       	st	Z, r19
    1840:	31 97       	sbiw	r30, 0x01	; 1
    1842:	30 e2       	ldi	r19, 0x20	; 32
    1844:	30 83       	st	Z, r19
    1846:	31 97       	sbiw	r30, 0x01	; 1
    1848:	31 e2       	ldi	r19, 0x21	; 33
    184a:	30 83       	st	Z, r19
    184c:	31 97       	sbiw	r30, 0x01	; 1
    184e:	20 83       	st	Z, r18
    1850:	31 97       	sbiw	r30, 0x01	; 1
    1852:	23 e2       	ldi	r18, 0x23	; 35
    1854:	20 83       	st	Z, r18
    1856:	31 97       	sbiw	r30, 0x01	; 1
    1858:	40 83       	st	Z, r20
    185a:	31 97       	sbiw	r30, 0x01	; 1
    185c:	50 83       	st	Z, r21
    185e:	31 97       	sbiw	r30, 0x01	; 1
    1860:	26 e2       	ldi	r18, 0x26	; 38
    1862:	20 83       	st	Z, r18
    1864:	31 97       	sbiw	r30, 0x01	; 1
    1866:	27 e2       	ldi	r18, 0x27	; 39
    1868:	20 83       	st	Z, r18
    186a:	31 97       	sbiw	r30, 0x01	; 1
    186c:	28 e2       	ldi	r18, 0x28	; 40
    186e:	20 83       	st	Z, r18
    1870:	31 97       	sbiw	r30, 0x01	; 1
    1872:	29 e2       	ldi	r18, 0x29	; 41
    1874:	20 83       	st	Z, r18
    1876:	31 97       	sbiw	r30, 0x01	; 1
    1878:	20 e3       	ldi	r18, 0x30	; 48
    187a:	20 83       	st	Z, r18
    187c:	31 97       	sbiw	r30, 0x01	; 1
    187e:	21 e3       	ldi	r18, 0x31	; 49
    1880:	20 83       	st	Z, r18
    1882:	89 97       	sbiw	r24, 0x29	; 41
    1884:	08 95       	ret

00001886 <xPortStartScheduler>:
    1886:	a8 95       	wdr
    1888:	90 ec       	ldi	r25, 0xC0	; 192
    188a:	88 e1       	ldi	r24, 0x18	; 24
    188c:	0f b6       	in	r0, 0x3f	; 63
    188e:	f8 94       	cli
    1890:	a8 95       	wdr
    1892:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    1896:	0f be       	out	0x3f, r0	; 63
    1898:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    189c:	a0 91 b1 19 	lds	r26, 0x19B1	; 0x8019b1 <pxCurrentTCB>
    18a0:	b0 91 b2 19 	lds	r27, 0x19B2	; 0x8019b2 <pxCurrentTCB+0x1>
    18a4:	cd 91       	ld	r28, X+
    18a6:	cd bf       	out	0x3d, r28	; 61
    18a8:	dd 91       	ld	r29, X+
    18aa:	de bf       	out	0x3e, r29	; 62
    18ac:	ff 91       	pop	r31
    18ae:	ef 91       	pop	r30
    18b0:	df 91       	pop	r29
    18b2:	cf 91       	pop	r28
    18b4:	bf 91       	pop	r27
    18b6:	af 91       	pop	r26
    18b8:	9f 91       	pop	r25
    18ba:	8f 91       	pop	r24
    18bc:	7f 91       	pop	r23
    18be:	6f 91       	pop	r22
    18c0:	5f 91       	pop	r21
    18c2:	4f 91       	pop	r20
    18c4:	3f 91       	pop	r19
    18c6:	2f 91       	pop	r18
    18c8:	1f 91       	pop	r17
    18ca:	0f 91       	pop	r16
    18cc:	ff 90       	pop	r15
    18ce:	ef 90       	pop	r14
    18d0:	df 90       	pop	r13
    18d2:	cf 90       	pop	r12
    18d4:	bf 90       	pop	r11
    18d6:	af 90       	pop	r10
    18d8:	9f 90       	pop	r9
    18da:	8f 90       	pop	r8
    18dc:	7f 90       	pop	r7
    18de:	6f 90       	pop	r6
    18e0:	5f 90       	pop	r5
    18e2:	4f 90       	pop	r4
    18e4:	3f 90       	pop	r3
    18e6:	2f 90       	pop	r2
    18e8:	1f 90       	pop	r1
    18ea:	0f 90       	pop	r0
    18ec:	0c be       	out	0x3c, r0	; 60
    18ee:	0f 90       	pop	r0
    18f0:	0b be       	out	0x3b, r0	; 59
    18f2:	0f 90       	pop	r0
    18f4:	0f be       	out	0x3f, r0	; 63
    18f6:	0f 90       	pop	r0
    18f8:	08 95       	ret
    18fa:	81 e0       	ldi	r24, 0x01	; 1
    18fc:	08 95       	ret

000018fe <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYield( void )
{
    portSAVE_CONTEXT();
    18fe:	0f 92       	push	r0
    1900:	0f b6       	in	r0, 0x3f	; 63
    1902:	f8 94       	cli
    1904:	0f 92       	push	r0
    1906:	0b b6       	in	r0, 0x3b	; 59
    1908:	0f 92       	push	r0
    190a:	0c b6       	in	r0, 0x3c	; 60
    190c:	0f 92       	push	r0
    190e:	1f 92       	push	r1
    1910:	11 24       	eor	r1, r1
    1912:	2f 92       	push	r2
    1914:	3f 92       	push	r3
    1916:	4f 92       	push	r4
    1918:	5f 92       	push	r5
    191a:	6f 92       	push	r6
    191c:	7f 92       	push	r7
    191e:	8f 92       	push	r8
    1920:	9f 92       	push	r9
    1922:	af 92       	push	r10
    1924:	bf 92       	push	r11
    1926:	cf 92       	push	r12
    1928:	df 92       	push	r13
    192a:	ef 92       	push	r14
    192c:	ff 92       	push	r15
    192e:	0f 93       	push	r16
    1930:	1f 93       	push	r17
    1932:	2f 93       	push	r18
    1934:	3f 93       	push	r19
    1936:	4f 93       	push	r20
    1938:	5f 93       	push	r21
    193a:	6f 93       	push	r22
    193c:	7f 93       	push	r23
    193e:	8f 93       	push	r24
    1940:	9f 93       	push	r25
    1942:	af 93       	push	r26
    1944:	bf 93       	push	r27
    1946:	cf 93       	push	r28
    1948:	df 93       	push	r29
    194a:	ef 93       	push	r30
    194c:	ff 93       	push	r31
    194e:	a0 91 b1 19 	lds	r26, 0x19B1	; 0x8019b1 <pxCurrentTCB>
    1952:	b0 91 b2 19 	lds	r27, 0x19B2	; 0x8019b2 <pxCurrentTCB+0x1>
    1956:	0d b6       	in	r0, 0x3d	; 61
    1958:	0d 92       	st	X+, r0
    195a:	0e b6       	in	r0, 0x3e	; 62
    195c:	0d 92       	st	X+, r0
    vTaskSwitchContext();
    195e:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <vTaskSwitchContext>
    portRESTORE_CONTEXT();
    1962:	a0 91 b1 19 	lds	r26, 0x19B1	; 0x8019b1 <pxCurrentTCB>
    1966:	b0 91 b2 19 	lds	r27, 0x19B2	; 0x8019b2 <pxCurrentTCB+0x1>
    196a:	cd 91       	ld	r28, X+
    196c:	cd bf       	out	0x3d, r28	; 61
    196e:	dd 91       	ld	r29, X+
    1970:	de bf       	out	0x3e, r29	; 62
    1972:	ff 91       	pop	r31
    1974:	ef 91       	pop	r30
    1976:	df 91       	pop	r29
    1978:	cf 91       	pop	r28
    197a:	bf 91       	pop	r27
    197c:	af 91       	pop	r26
    197e:	9f 91       	pop	r25
    1980:	8f 91       	pop	r24
    1982:	7f 91       	pop	r23
    1984:	6f 91       	pop	r22
    1986:	5f 91       	pop	r21
    1988:	4f 91       	pop	r20
    198a:	3f 91       	pop	r19
    198c:	2f 91       	pop	r18
    198e:	1f 91       	pop	r17
    1990:	0f 91       	pop	r16
    1992:	ff 90       	pop	r15
    1994:	ef 90       	pop	r14
    1996:	df 90       	pop	r13
    1998:	cf 90       	pop	r12
    199a:	bf 90       	pop	r11
    199c:	af 90       	pop	r10
    199e:	9f 90       	pop	r9
    19a0:	8f 90       	pop	r8
    19a2:	7f 90       	pop	r7
    19a4:	6f 90       	pop	r6
    19a6:	5f 90       	pop	r5
    19a8:	4f 90       	pop	r4
    19aa:	3f 90       	pop	r3
    19ac:	2f 90       	pop	r2
    19ae:	1f 90       	pop	r1
    19b0:	0f 90       	pop	r0
    19b2:	0c be       	out	0x3c, r0	; 60
    19b4:	0f 90       	pop	r0
    19b6:	0b be       	out	0x3b, r0	; 59
    19b8:	0f 90       	pop	r0
    19ba:	0f be       	out	0x3f, r0	; 63
    19bc:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
    19be:	08 95       	ret

000019c0 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
    19c0:	0f 92       	push	r0
    19c2:	0f b6       	in	r0, 0x3f	; 63
    19c4:	f8 94       	cli
    19c6:	0f 92       	push	r0
    19c8:	0b b6       	in	r0, 0x3b	; 59
    19ca:	0f 92       	push	r0
    19cc:	0c b6       	in	r0, 0x3c	; 60
    19ce:	0f 92       	push	r0
    19d0:	1f 92       	push	r1
    19d2:	11 24       	eor	r1, r1
    19d4:	2f 92       	push	r2
    19d6:	3f 92       	push	r3
    19d8:	4f 92       	push	r4
    19da:	5f 92       	push	r5
    19dc:	6f 92       	push	r6
    19de:	7f 92       	push	r7
    19e0:	8f 92       	push	r8
    19e2:	9f 92       	push	r9
    19e4:	af 92       	push	r10
    19e6:	bf 92       	push	r11
    19e8:	cf 92       	push	r12
    19ea:	df 92       	push	r13
    19ec:	ef 92       	push	r14
    19ee:	ff 92       	push	r15
    19f0:	0f 93       	push	r16
    19f2:	1f 93       	push	r17
    19f4:	2f 93       	push	r18
    19f6:	3f 93       	push	r19
    19f8:	4f 93       	push	r20
    19fa:	5f 93       	push	r21
    19fc:	6f 93       	push	r22
    19fe:	7f 93       	push	r23
    1a00:	8f 93       	push	r24
    1a02:	9f 93       	push	r25
    1a04:	af 93       	push	r26
    1a06:	bf 93       	push	r27
    1a08:	cf 93       	push	r28
    1a0a:	df 93       	push	r29
    1a0c:	ef 93       	push	r30
    1a0e:	ff 93       	push	r31
    1a10:	a0 91 b1 19 	lds	r26, 0x19B1	; 0x8019b1 <pxCurrentTCB>
    1a14:	b0 91 b2 19 	lds	r27, 0x19B2	; 0x8019b2 <pxCurrentTCB+0x1>
    1a18:	0d b6       	in	r0, 0x3d	; 61
    1a1a:	0d 92       	st	X+, r0
    1a1c:	0e b6       	in	r0, 0x3e	; 62
    1a1e:	0d 92       	st	X+, r0

    sleep_reset();        //     reset the sleep_mode() faster than sleep_disable();
    1a20:	13 be       	out	0x33, r1	; 51

    if( xTaskIncrementTick() != pdFALSE )
    1a22:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <xTaskIncrementTick>
    1a26:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
    1a28:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <vTaskSwitchContext>
    }

    portRESTORE_CONTEXT();
    1a2c:	a0 91 b1 19 	lds	r26, 0x19B1	; 0x8019b1 <pxCurrentTCB>
    1a30:	b0 91 b2 19 	lds	r27, 0x19B2	; 0x8019b2 <pxCurrentTCB+0x1>
    1a34:	cd 91       	ld	r28, X+
    1a36:	cd bf       	out	0x3d, r28	; 61
    1a38:	dd 91       	ld	r29, X+
    1a3a:	de bf       	out	0x3e, r29	; 62
    1a3c:	ff 91       	pop	r31
    1a3e:	ef 91       	pop	r30
    1a40:	df 91       	pop	r29
    1a42:	cf 91       	pop	r28
    1a44:	bf 91       	pop	r27
    1a46:	af 91       	pop	r26
    1a48:	9f 91       	pop	r25
    1a4a:	8f 91       	pop	r24
    1a4c:	7f 91       	pop	r23
    1a4e:	6f 91       	pop	r22
    1a50:	5f 91       	pop	r21
    1a52:	4f 91       	pop	r20
    1a54:	3f 91       	pop	r19
    1a56:	2f 91       	pop	r18
    1a58:	1f 91       	pop	r17
    1a5a:	0f 91       	pop	r16
    1a5c:	ff 90       	pop	r15
    1a5e:	ef 90       	pop	r14
    1a60:	df 90       	pop	r13
    1a62:	cf 90       	pop	r12
    1a64:	bf 90       	pop	r11
    1a66:	af 90       	pop	r10
    1a68:	9f 90       	pop	r9
    1a6a:	8f 90       	pop	r8
    1a6c:	7f 90       	pop	r7
    1a6e:	6f 90       	pop	r6
    1a70:	5f 90       	pop	r5
    1a72:	4f 90       	pop	r4
    1a74:	3f 90       	pop	r3
    1a76:	2f 90       	pop	r2
    1a78:	1f 90       	pop	r1
    1a7a:	0f 90       	pop	r0
    1a7c:	0c be       	out	0x3c, r0	; 60
    1a7e:	0f 90       	pop	r0
    1a80:	0b be       	out	0x3b, r0	; 59
    1a82:	0f 90       	pop	r0
    1a84:	0f be       	out	0x3f, r0	; 63
    1a86:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
    1a88:	08 95       	ret

00001a8a <__vector_12>:
     */
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
//  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
    1a8a:	9a df       	rcall	.-204    	; 0x19c0 <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
    1a8c:	18 95       	reti

00001a8e <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    1a8e:	0f b6       	in	r0, 0x3f	; 63
    1a90:	f8 94       	cli
    1a92:	0f 92       	push	r0
    1a94:	fc 01       	movw	r30, r24
    1a96:	96 8d       	ldd	r25, Z+30	; 0x1e
    1a98:	0f 90       	pop	r0
    1a9a:	0f be       	out	0x3f, r0	; 63
    1a9c:	81 e0       	ldi	r24, 0x01	; 1
    1a9e:	91 11       	cpse	r25, r1
    1aa0:	80 e0       	ldi	r24, 0x00	; 0
    1aa2:	08 95       	ret

00001aa4 <prvCopyDataToQueue>:
    1aa4:	0f 93       	push	r16
    1aa6:	1f 93       	push	r17
    1aa8:	cf 93       	push	r28
    1aaa:	df 93       	push	r29
    1aac:	ec 01       	movw	r28, r24
    1aae:	04 2f       	mov	r16, r20
    1ab0:	1e 8d       	ldd	r17, Y+30	; 0x1e
    1ab2:	48 a1       	ldd	r20, Y+32	; 0x20
    1ab4:	41 11       	cpse	r20, r1
    1ab6:	0c c0       	rjmp	.+24     	; 0x1ad0 <prvCopyDataToQueue+0x2c>
    1ab8:	88 81       	ld	r24, Y
    1aba:	99 81       	ldd	r25, Y+1	; 0x01
    1abc:	89 2b       	or	r24, r25
    1abe:	09 f0       	breq	.+2      	; 0x1ac2 <prvCopyDataToQueue+0x1e>
    1ac0:	42 c0       	rjmp	.+132    	; 0x1b46 <prvCopyDataToQueue+0xa2>
    1ac2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ac4:	9d 81       	ldd	r25, Y+5	; 0x05
    1ac6:	0e 94 ab 19 	call	0x3356	; 0x3356 <xTaskPriorityDisinherit>
    1aca:	1d 82       	std	Y+5, r1	; 0x05
    1acc:	1c 82       	std	Y+4, r1	; 0x04
    1ace:	42 c0       	rjmp	.+132    	; 0x1b54 <prvCopyDataToQueue+0xb0>
    1ad0:	01 11       	cpse	r16, r1
    1ad2:	17 c0       	rjmp	.+46     	; 0x1b02 <prvCopyDataToQueue+0x5e>
    1ad4:	50 e0       	ldi	r21, 0x00	; 0
    1ad6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad8:	9b 81       	ldd	r25, Y+3	; 0x03
    1ada:	0e 94 52 2f 	call	0x5ea4	; 0x5ea4 <memcpy>
    1ade:	28 a1       	ldd	r18, Y+32	; 0x20
    1ae0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae2:	9b 81       	ldd	r25, Y+3	; 0x03
    1ae4:	82 0f       	add	r24, r18
    1ae6:	91 1d       	adc	r25, r1
    1ae8:	9b 83       	std	Y+3, r25	; 0x03
    1aea:	8a 83       	std	Y+2, r24	; 0x02
    1aec:	2c 81       	ldd	r18, Y+4	; 0x04
    1aee:	3d 81       	ldd	r19, Y+5	; 0x05
    1af0:	82 17       	cp	r24, r18
    1af2:	93 07       	cpc	r25, r19
    1af4:	50 f1       	brcs	.+84     	; 0x1b4a <prvCopyDataToQueue+0xa6>
    1af6:	88 81       	ld	r24, Y
    1af8:	99 81       	ldd	r25, Y+1	; 0x01
    1afa:	9b 83       	std	Y+3, r25	; 0x03
    1afc:	8a 83       	std	Y+2, r24	; 0x02
    1afe:	80 e0       	ldi	r24, 0x00	; 0
    1b00:	29 c0       	rjmp	.+82     	; 0x1b54 <prvCopyDataToQueue+0xb0>
    1b02:	50 e0       	ldi	r21, 0x00	; 0
    1b04:	8e 81       	ldd	r24, Y+6	; 0x06
    1b06:	9f 81       	ldd	r25, Y+7	; 0x07
    1b08:	0e 94 52 2f 	call	0x5ea4	; 0x5ea4 <memcpy>
    1b0c:	88 a1       	ldd	r24, Y+32	; 0x20
    1b0e:	90 e0       	ldi	r25, 0x00	; 0
    1b10:	91 95       	neg	r25
    1b12:	81 95       	neg	r24
    1b14:	91 09       	sbc	r25, r1
    1b16:	2e 81       	ldd	r18, Y+6	; 0x06
    1b18:	3f 81       	ldd	r19, Y+7	; 0x07
    1b1a:	28 0f       	add	r18, r24
    1b1c:	39 1f       	adc	r19, r25
    1b1e:	3f 83       	std	Y+7, r19	; 0x07
    1b20:	2e 83       	std	Y+6, r18	; 0x06
    1b22:	48 81       	ld	r20, Y
    1b24:	59 81       	ldd	r21, Y+1	; 0x01
    1b26:	24 17       	cp	r18, r20
    1b28:	35 07       	cpc	r19, r21
    1b2a:	30 f4       	brcc	.+12     	; 0x1b38 <prvCopyDataToQueue+0x94>
    1b2c:	2c 81       	ldd	r18, Y+4	; 0x04
    1b2e:	3d 81       	ldd	r19, Y+5	; 0x05
    1b30:	82 0f       	add	r24, r18
    1b32:	93 1f       	adc	r25, r19
    1b34:	9f 83       	std	Y+7, r25	; 0x07
    1b36:	8e 83       	std	Y+6, r24	; 0x06
    1b38:	02 30       	cpi	r16, 0x02	; 2
    1b3a:	49 f4       	brne	.+18     	; 0x1b4e <prvCopyDataToQueue+0xaa>
    1b3c:	11 23       	and	r17, r17
    1b3e:	49 f0       	breq	.+18     	; 0x1b52 <prvCopyDataToQueue+0xae>
    1b40:	11 50       	subi	r17, 0x01	; 1
    1b42:	80 e0       	ldi	r24, 0x00	; 0
    1b44:	07 c0       	rjmp	.+14     	; 0x1b54 <prvCopyDataToQueue+0xb0>
    1b46:	80 e0       	ldi	r24, 0x00	; 0
    1b48:	05 c0       	rjmp	.+10     	; 0x1b54 <prvCopyDataToQueue+0xb0>
    1b4a:	80 e0       	ldi	r24, 0x00	; 0
    1b4c:	03 c0       	rjmp	.+6      	; 0x1b54 <prvCopyDataToQueue+0xb0>
    1b4e:	80 e0       	ldi	r24, 0x00	; 0
    1b50:	01 c0       	rjmp	.+2      	; 0x1b54 <prvCopyDataToQueue+0xb0>
    1b52:	80 e0       	ldi	r24, 0x00	; 0
    1b54:	1f 5f       	subi	r17, 0xFF	; 255
    1b56:	1e 8f       	std	Y+30, r17	; 0x1e
    1b58:	df 91       	pop	r29
    1b5a:	cf 91       	pop	r28
    1b5c:	1f 91       	pop	r17
    1b5e:	0f 91       	pop	r16
    1b60:	08 95       	ret

00001b62 <prvCopyDataFromQueue>:
    1b62:	fc 01       	movw	r30, r24
    1b64:	40 a1       	ldd	r20, Z+32	; 0x20
    1b66:	44 23       	and	r20, r20
    1b68:	a9 f0       	breq	.+42     	; 0x1b94 <prvCopyDataFromQueue+0x32>
    1b6a:	50 e0       	ldi	r21, 0x00	; 0
    1b6c:	26 81       	ldd	r18, Z+6	; 0x06
    1b6e:	37 81       	ldd	r19, Z+7	; 0x07
    1b70:	24 0f       	add	r18, r20
    1b72:	35 1f       	adc	r19, r21
    1b74:	37 83       	std	Z+7, r19	; 0x07
    1b76:	26 83       	std	Z+6, r18	; 0x06
    1b78:	84 81       	ldd	r24, Z+4	; 0x04
    1b7a:	95 81       	ldd	r25, Z+5	; 0x05
    1b7c:	28 17       	cp	r18, r24
    1b7e:	39 07       	cpc	r19, r25
    1b80:	20 f0       	brcs	.+8      	; 0x1b8a <prvCopyDataFromQueue+0x28>
    1b82:	80 81       	ld	r24, Z
    1b84:	91 81       	ldd	r25, Z+1	; 0x01
    1b86:	97 83       	std	Z+7, r25	; 0x07
    1b88:	86 83       	std	Z+6, r24	; 0x06
    1b8a:	cb 01       	movw	r24, r22
    1b8c:	66 81       	ldd	r22, Z+6	; 0x06
    1b8e:	77 81       	ldd	r23, Z+7	; 0x07
    1b90:	0c 94 52 2f 	jmp	0x5ea4	; 0x5ea4 <memcpy>
    1b94:	08 95       	ret

00001b96 <prvUnlockQueue>:
    1b96:	ef 92       	push	r14
    1b98:	ff 92       	push	r15
    1b9a:	0f 93       	push	r16
    1b9c:	1f 93       	push	r17
    1b9e:	cf 93       	push	r28
    1ba0:	8c 01       	movw	r16, r24
    1ba2:	0f b6       	in	r0, 0x3f	; 63
    1ba4:	f8 94       	cli
    1ba6:	0f 92       	push	r0
    1ba8:	fc 01       	movw	r30, r24
    1baa:	c2 a1       	ldd	r28, Z+34	; 0x22
    1bac:	1c 16       	cp	r1, r28
    1bae:	ac f4       	brge	.+42     	; 0x1bda <prvUnlockQueue+0x44>
    1bb0:	83 89       	ldd	r24, Z+19	; 0x13
    1bb2:	81 11       	cpse	r24, r1
    1bb4:	06 c0       	rjmp	.+12     	; 0x1bc2 <prvUnlockQueue+0x2c>
    1bb6:	11 c0       	rjmp	.+34     	; 0x1bda <prvUnlockQueue+0x44>
    1bb8:	f8 01       	movw	r30, r16
    1bba:	83 89       	ldd	r24, Z+19	; 0x13
    1bbc:	81 11       	cpse	r24, r1
    1bbe:	05 c0       	rjmp	.+10     	; 0x1bca <prvUnlockQueue+0x34>
    1bc0:	0c c0       	rjmp	.+24     	; 0x1bda <prvUnlockQueue+0x44>
    1bc2:	78 01       	movw	r14, r16
    1bc4:	f3 e1       	ldi	r31, 0x13	; 19
    1bc6:	ef 0e       	add	r14, r31
    1bc8:	f1 1c       	adc	r15, r1
    1bca:	c7 01       	movw	r24, r14
    1bcc:	0e 94 34 18 	call	0x3068	; 0x3068 <xTaskRemoveFromEventList>
    1bd0:	81 11       	cpse	r24, r1
    1bd2:	0e 94 26 19 	call	0x324c	; 0x324c <vTaskMissedYield>
    1bd6:	c1 50       	subi	r28, 0x01	; 1
    1bd8:	79 f7       	brne	.-34     	; 0x1bb8 <prvUnlockQueue+0x22>
    1bda:	8f ef       	ldi	r24, 0xFF	; 255
    1bdc:	f8 01       	movw	r30, r16
    1bde:	82 a3       	std	Z+34, r24	; 0x22
    1be0:	0f 90       	pop	r0
    1be2:	0f be       	out	0x3f, r0	; 63
    1be4:	0f b6       	in	r0, 0x3f	; 63
    1be6:	f8 94       	cli
    1be8:	0f 92       	push	r0
    1bea:	c1 a1       	ldd	r28, Z+33	; 0x21
    1bec:	1c 16       	cp	r1, r28
    1bee:	ac f4       	brge	.+42     	; 0x1c1a <prvUnlockQueue+0x84>
    1bf0:	80 85       	ldd	r24, Z+8	; 0x08
    1bf2:	81 11       	cpse	r24, r1
    1bf4:	06 c0       	rjmp	.+12     	; 0x1c02 <prvUnlockQueue+0x6c>
    1bf6:	11 c0       	rjmp	.+34     	; 0x1c1a <prvUnlockQueue+0x84>
    1bf8:	f8 01       	movw	r30, r16
    1bfa:	80 85       	ldd	r24, Z+8	; 0x08
    1bfc:	81 11       	cpse	r24, r1
    1bfe:	05 c0       	rjmp	.+10     	; 0x1c0a <prvUnlockQueue+0x74>
    1c00:	0c c0       	rjmp	.+24     	; 0x1c1a <prvUnlockQueue+0x84>
    1c02:	78 01       	movw	r14, r16
    1c04:	f8 e0       	ldi	r31, 0x08	; 8
    1c06:	ef 0e       	add	r14, r31
    1c08:	f1 1c       	adc	r15, r1
    1c0a:	c7 01       	movw	r24, r14
    1c0c:	0e 94 34 18 	call	0x3068	; 0x3068 <xTaskRemoveFromEventList>
    1c10:	81 11       	cpse	r24, r1
    1c12:	0e 94 26 19 	call	0x324c	; 0x324c <vTaskMissedYield>
    1c16:	c1 50       	subi	r28, 0x01	; 1
    1c18:	79 f7       	brne	.-34     	; 0x1bf8 <prvUnlockQueue+0x62>
    1c1a:	8f ef       	ldi	r24, 0xFF	; 255
    1c1c:	f8 01       	movw	r30, r16
    1c1e:	81 a3       	std	Z+33, r24	; 0x21
    1c20:	0f 90       	pop	r0
    1c22:	0f be       	out	0x3f, r0	; 63
    1c24:	cf 91       	pop	r28
    1c26:	1f 91       	pop	r17
    1c28:	0f 91       	pop	r16
    1c2a:	ff 90       	pop	r15
    1c2c:	ef 90       	pop	r14
    1c2e:	08 95       	ret

00001c30 <xQueueGenericReset>:
    1c30:	cf 93       	push	r28
    1c32:	df 93       	push	r29
    1c34:	ec 01       	movw	r28, r24
    1c36:	0f b6       	in	r0, 0x3f	; 63
    1c38:	f8 94       	cli
    1c3a:	0f 92       	push	r0
    1c3c:	e8 81       	ld	r30, Y
    1c3e:	f9 81       	ldd	r31, Y+1	; 0x01
    1c40:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1c42:	28 a1       	ldd	r18, Y+32	; 0x20
    1c44:	90 e0       	ldi	r25, 0x00	; 0
    1c46:	30 e0       	ldi	r19, 0x00	; 0
    1c48:	82 9f       	mul	r24, r18
    1c4a:	a0 01       	movw	r20, r0
    1c4c:	83 9f       	mul	r24, r19
    1c4e:	50 0d       	add	r21, r0
    1c50:	92 9f       	mul	r25, r18
    1c52:	50 0d       	add	r21, r0
    1c54:	11 24       	eor	r1, r1
    1c56:	4e 0f       	add	r20, r30
    1c58:	5f 1f       	adc	r21, r31
    1c5a:	5d 83       	std	Y+5, r21	; 0x05
    1c5c:	4c 83       	std	Y+4, r20	; 0x04
    1c5e:	1e 8e       	std	Y+30, r1	; 0x1e
    1c60:	fb 83       	std	Y+3, r31	; 0x03
    1c62:	ea 83       	std	Y+2, r30	; 0x02
    1c64:	01 97       	sbiw	r24, 0x01	; 1
    1c66:	82 9f       	mul	r24, r18
    1c68:	a0 01       	movw	r20, r0
    1c6a:	83 9f       	mul	r24, r19
    1c6c:	50 0d       	add	r21, r0
    1c6e:	92 9f       	mul	r25, r18
    1c70:	50 0d       	add	r21, r0
    1c72:	11 24       	eor	r1, r1
    1c74:	cf 01       	movw	r24, r30
    1c76:	84 0f       	add	r24, r20
    1c78:	95 1f       	adc	r25, r21
    1c7a:	9f 83       	std	Y+7, r25	; 0x07
    1c7c:	8e 83       	std	Y+6, r24	; 0x06
    1c7e:	8f ef       	ldi	r24, 0xFF	; 255
    1c80:	89 a3       	std	Y+33, r24	; 0x21
    1c82:	8a a3       	std	Y+34, r24	; 0x22
    1c84:	61 11       	cpse	r22, r1
    1c86:	0b c0       	rjmp	.+22     	; 0x1c9e <xQueueGenericReset+0x6e>
    1c88:	88 85       	ldd	r24, Y+8	; 0x08
    1c8a:	88 23       	and	r24, r24
    1c8c:	71 f0       	breq	.+28     	; 0x1caa <xQueueGenericReset+0x7a>
    1c8e:	ce 01       	movw	r24, r28
    1c90:	08 96       	adiw	r24, 0x08	; 8
    1c92:	0e 94 34 18 	call	0x3068	; 0x3068 <xTaskRemoveFromEventList>
    1c96:	88 23       	and	r24, r24
    1c98:	41 f0       	breq	.+16     	; 0x1caa <xQueueGenericReset+0x7a>
    1c9a:	31 de       	rcall	.-926    	; 0x18fe <vPortYield>
    1c9c:	06 c0       	rjmp	.+12     	; 0x1caa <xQueueGenericReset+0x7a>
    1c9e:	ce 01       	movw	r24, r28
    1ca0:	08 96       	adiw	r24, 0x08	; 8
    1ca2:	e5 dc       	rcall	.-1590   	; 0x166e <vListInitialise>
    1ca4:	ce 01       	movw	r24, r28
    1ca6:	43 96       	adiw	r24, 0x13	; 19
    1ca8:	e2 dc       	rcall	.-1596   	; 0x166e <vListInitialise>
    1caa:	0f 90       	pop	r0
    1cac:	0f be       	out	0x3f, r0	; 63
    1cae:	81 e0       	ldi	r24, 0x01	; 1
    1cb0:	df 91       	pop	r29
    1cb2:	cf 91       	pop	r28
    1cb4:	08 95       	ret

00001cb6 <xQueueGenericCreate>:
    1cb6:	ff 92       	push	r15
    1cb8:	0f 93       	push	r16
    1cba:	1f 93       	push	r17
    1cbc:	cf 93       	push	r28
    1cbe:	df 93       	push	r29
    1cc0:	08 2f       	mov	r16, r24
    1cc2:	16 2f       	mov	r17, r22
    1cc4:	f4 2e       	mov	r15, r20
    1cc6:	66 23       	and	r22, r22
    1cc8:	b9 f0       	breq	.+46     	; 0x1cf8 <xQueueGenericCreate+0x42>
    1cca:	86 9f       	mul	r24, r22
    1ccc:	c0 01       	movw	r24, r0
    1cce:	11 24       	eor	r1, r1
    1cd0:	85 96       	adiw	r24, 0x25	; 37
    1cd2:	e3 db       	rcall	.-2106   	; 0x149a <pvPortMalloc>
    1cd4:	ec 01       	movw	r28, r24
    1cd6:	00 97       	sbiw	r24, 0x00	; 0
    1cd8:	41 f4       	brne	.+16     	; 0x1cea <xQueueGenericCreate+0x34>
    1cda:	14 c0       	rjmp	.+40     	; 0x1d04 <xQueueGenericCreate+0x4e>
    1cdc:	0f 8f       	std	Y+31, r16	; 0x1f
    1cde:	18 a3       	std	Y+32, r17	; 0x20
    1ce0:	61 e0       	ldi	r22, 0x01	; 1
    1ce2:	ce 01       	movw	r24, r28
    1ce4:	a5 df       	rcall	.-182    	; 0x1c30 <xQueueGenericReset>
    1ce6:	fc a2       	std	Y+36, r15	; 0x24
    1ce8:	0d c0       	rjmp	.+26     	; 0x1d04 <xQueueGenericCreate+0x4e>
    1cea:	85 96       	adiw	r24, 0x25	; 37
    1cec:	99 83       	std	Y+1, r25	; 0x01
    1cee:	88 83       	st	Y, r24
    1cf0:	f5 cf       	rjmp	.-22     	; 0x1cdc <xQueueGenericCreate+0x26>
    1cf2:	d9 83       	std	Y+1, r29	; 0x01
    1cf4:	c8 83       	st	Y, r28
    1cf6:	f2 cf       	rjmp	.-28     	; 0x1cdc <xQueueGenericCreate+0x26>
    1cf8:	85 e2       	ldi	r24, 0x25	; 37
    1cfa:	90 e0       	ldi	r25, 0x00	; 0
    1cfc:	ce db       	rcall	.-2148   	; 0x149a <pvPortMalloc>
    1cfe:	ec 01       	movw	r28, r24
    1d00:	89 2b       	or	r24, r25
    1d02:	b9 f7       	brne	.-18     	; 0x1cf2 <xQueueGenericCreate+0x3c>
    1d04:	ce 01       	movw	r24, r28
    1d06:	df 91       	pop	r29
    1d08:	cf 91       	pop	r28
    1d0a:	1f 91       	pop	r17
    1d0c:	0f 91       	pop	r16
    1d0e:	ff 90       	pop	r15
    1d10:	08 95       	ret

00001d12 <xQueueGenericSend>:
    1d12:	9f 92       	push	r9
    1d14:	af 92       	push	r10
    1d16:	bf 92       	push	r11
    1d18:	cf 92       	push	r12
    1d1a:	df 92       	push	r13
    1d1c:	ef 92       	push	r14
    1d1e:	ff 92       	push	r15
    1d20:	0f 93       	push	r16
    1d22:	1f 93       	push	r17
    1d24:	cf 93       	push	r28
    1d26:	df 93       	push	r29
    1d28:	cd b7       	in	r28, 0x3d	; 61
    1d2a:	de b7       	in	r29, 0x3e	; 62
    1d2c:	29 97       	sbiw	r28, 0x09	; 9
    1d2e:	0f b6       	in	r0, 0x3f	; 63
    1d30:	f8 94       	cli
    1d32:	de bf       	out	0x3e, r29	; 62
    1d34:	0f be       	out	0x3f, r0	; 63
    1d36:	cd bf       	out	0x3d, r28	; 61
    1d38:	7c 01       	movw	r14, r24
    1d3a:	5b 01       	movw	r10, r22
    1d3c:	2e 83       	std	Y+6, r18	; 0x06
    1d3e:	3f 83       	std	Y+7, r19	; 0x07
    1d40:	48 87       	std	Y+8, r20	; 0x08
    1d42:	59 87       	std	Y+9, r21	; 0x09
    1d44:	10 e0       	ldi	r17, 0x00	; 0
    1d46:	99 24       	eor	r9, r9
    1d48:	93 94       	inc	r9
    1d4a:	6c 01       	movw	r12, r24
    1d4c:	88 e0       	ldi	r24, 0x08	; 8
    1d4e:	c8 0e       	add	r12, r24
    1d50:	d1 1c       	adc	r13, r1
    1d52:	0f b6       	in	r0, 0x3f	; 63
    1d54:	f8 94       	cli
    1d56:	0f 92       	push	r0
    1d58:	f7 01       	movw	r30, r14
    1d5a:	96 8d       	ldd	r25, Z+30	; 0x1e
    1d5c:	87 8d       	ldd	r24, Z+31	; 0x1f
    1d5e:	98 17       	cp	r25, r24
    1d60:	10 f0       	brcs	.+4      	; 0x1d66 <xQueueGenericSend+0x54>
    1d62:	02 30       	cpi	r16, 0x02	; 2
    1d64:	b1 f4       	brne	.+44     	; 0x1d92 <xQueueGenericSend+0x80>
    1d66:	40 2f       	mov	r20, r16
    1d68:	b5 01       	movw	r22, r10
    1d6a:	c7 01       	movw	r24, r14
    1d6c:	9b de       	rcall	.-714    	; 0x1aa4 <prvCopyDataToQueue>
    1d6e:	f7 01       	movw	r30, r14
    1d70:	93 89       	ldd	r25, Z+19	; 0x13
    1d72:	99 23       	and	r25, r25
    1d74:	41 f0       	breq	.+16     	; 0x1d86 <xQueueGenericSend+0x74>
    1d76:	c7 01       	movw	r24, r14
    1d78:	43 96       	adiw	r24, 0x13	; 19
    1d7a:	0e 94 34 18 	call	0x3068	; 0x3068 <xTaskRemoveFromEventList>
    1d7e:	88 23       	and	r24, r24
    1d80:	21 f0       	breq	.+8      	; 0x1d8a <xQueueGenericSend+0x78>
    1d82:	bd dd       	rcall	.-1158   	; 0x18fe <vPortYield>
    1d84:	02 c0       	rjmp	.+4      	; 0x1d8a <xQueueGenericSend+0x78>
    1d86:	81 11       	cpse	r24, r1
    1d88:	ba dd       	rcall	.-1164   	; 0x18fe <vPortYield>
    1d8a:	0f 90       	pop	r0
    1d8c:	0f be       	out	0x3f, r0	; 63
    1d8e:	81 e0       	ldi	r24, 0x01	; 1
    1d90:	4e c0       	rjmp	.+156    	; 0x1e2e <xQueueGenericSend+0x11c>
    1d92:	8e 81       	ldd	r24, Y+6	; 0x06
    1d94:	9f 81       	ldd	r25, Y+7	; 0x07
    1d96:	a8 85       	ldd	r26, Y+8	; 0x08
    1d98:	b9 85       	ldd	r27, Y+9	; 0x09
    1d9a:	89 2b       	or	r24, r25
    1d9c:	8a 2b       	or	r24, r26
    1d9e:	8b 2b       	or	r24, r27
    1da0:	21 f4       	brne	.+8      	; 0x1daa <xQueueGenericSend+0x98>
    1da2:	0f 90       	pop	r0
    1da4:	0f be       	out	0x3f, r0	; 63
    1da6:	80 e0       	ldi	r24, 0x00	; 0
    1da8:	42 c0       	rjmp	.+132    	; 0x1e2e <xQueueGenericSend+0x11c>
    1daa:	11 11       	cpse	r17, r1
    1dac:	05 c0       	rjmp	.+10     	; 0x1db8 <xQueueGenericSend+0xa6>
    1dae:	ce 01       	movw	r24, r28
    1db0:	01 96       	adiw	r24, 0x01	; 1
    1db2:	0e 94 c0 18 	call	0x3180	; 0x3180 <vTaskInternalSetTimeOutState>
    1db6:	19 2d       	mov	r17, r9
    1db8:	0f 90       	pop	r0
    1dba:	0f be       	out	0x3f, r0	; 63
    1dbc:	fd d6       	rcall	.+3578   	; 0x2bb8 <vTaskSuspendAll>
    1dbe:	0f b6       	in	r0, 0x3f	; 63
    1dc0:	f8 94       	cli
    1dc2:	0f 92       	push	r0
    1dc4:	f7 01       	movw	r30, r14
    1dc6:	81 a1       	ldd	r24, Z+33	; 0x21
    1dc8:	8f 3f       	cpi	r24, 0xFF	; 255
    1dca:	09 f4       	brne	.+2      	; 0x1dce <xQueueGenericSend+0xbc>
    1dcc:	11 a2       	std	Z+33, r1	; 0x21
    1dce:	f7 01       	movw	r30, r14
    1dd0:	82 a1       	ldd	r24, Z+34	; 0x22
    1dd2:	8f 3f       	cpi	r24, 0xFF	; 255
    1dd4:	09 f4       	brne	.+2      	; 0x1dd8 <xQueueGenericSend+0xc6>
    1dd6:	12 a2       	std	Z+34, r1	; 0x22
    1dd8:	0f 90       	pop	r0
    1dda:	0f be       	out	0x3f, r0	; 63
    1ddc:	be 01       	movw	r22, r28
    1dde:	6a 5f       	subi	r22, 0xFA	; 250
    1de0:	7f 4f       	sbci	r23, 0xFF	; 255
    1de2:	ce 01       	movw	r24, r28
    1de4:	01 96       	adiw	r24, 0x01	; 1
    1de6:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <xTaskCheckForTimeOut>
    1dea:	81 11       	cpse	r24, r1
    1dec:	1c c0       	rjmp	.+56     	; 0x1e26 <xQueueGenericSend+0x114>
    1dee:	0f b6       	in	r0, 0x3f	; 63
    1df0:	f8 94       	cli
    1df2:	0f 92       	push	r0
    1df4:	f7 01       	movw	r30, r14
    1df6:	96 8d       	ldd	r25, Z+30	; 0x1e
    1df8:	87 8d       	ldd	r24, Z+31	; 0x1f
    1dfa:	0f 90       	pop	r0
    1dfc:	0f be       	out	0x3f, r0	; 63
    1dfe:	98 13       	cpse	r25, r24
    1e00:	0e c0       	rjmp	.+28     	; 0x1e1e <xQueueGenericSend+0x10c>
    1e02:	4e 81       	ldd	r20, Y+6	; 0x06
    1e04:	5f 81       	ldd	r21, Y+7	; 0x07
    1e06:	68 85       	ldd	r22, Y+8	; 0x08
    1e08:	79 85       	ldd	r23, Y+9	; 0x09
    1e0a:	c6 01       	movw	r24, r12
    1e0c:	0e 94 d9 17 	call	0x2fb2	; 0x2fb2 <vTaskPlaceOnEventList>
    1e10:	c7 01       	movw	r24, r14
    1e12:	c1 de       	rcall	.-638    	; 0x1b96 <prvUnlockQueue>
    1e14:	ba d7       	rcall	.+3956   	; 0x2d8a <xTaskResumeAll>
    1e16:	81 11       	cpse	r24, r1
    1e18:	9c cf       	rjmp	.-200    	; 0x1d52 <xQueueGenericSend+0x40>
    1e1a:	71 dd       	rcall	.-1310   	; 0x18fe <vPortYield>
    1e1c:	9a cf       	rjmp	.-204    	; 0x1d52 <xQueueGenericSend+0x40>
    1e1e:	c7 01       	movw	r24, r14
    1e20:	ba de       	rcall	.-652    	; 0x1b96 <prvUnlockQueue>
    1e22:	b3 d7       	rcall	.+3942   	; 0x2d8a <xTaskResumeAll>
    1e24:	96 cf       	rjmp	.-212    	; 0x1d52 <xQueueGenericSend+0x40>
    1e26:	c7 01       	movw	r24, r14
    1e28:	b6 de       	rcall	.-660    	; 0x1b96 <prvUnlockQueue>
    1e2a:	af d7       	rcall	.+3934   	; 0x2d8a <xTaskResumeAll>
    1e2c:	80 e0       	ldi	r24, 0x00	; 0
    1e2e:	29 96       	adiw	r28, 0x09	; 9
    1e30:	0f b6       	in	r0, 0x3f	; 63
    1e32:	f8 94       	cli
    1e34:	de bf       	out	0x3e, r29	; 62
    1e36:	0f be       	out	0x3f, r0	; 63
    1e38:	cd bf       	out	0x3d, r28	; 61
    1e3a:	df 91       	pop	r29
    1e3c:	cf 91       	pop	r28
    1e3e:	1f 91       	pop	r17
    1e40:	0f 91       	pop	r16
    1e42:	ff 90       	pop	r15
    1e44:	ef 90       	pop	r14
    1e46:	df 90       	pop	r13
    1e48:	cf 90       	pop	r12
    1e4a:	bf 90       	pop	r11
    1e4c:	af 90       	pop	r10
    1e4e:	9f 90       	pop	r9
    1e50:	08 95       	ret

00001e52 <xQueueCreateMutex>:
    1e52:	0f 93       	push	r16
    1e54:	cf 93       	push	r28
    1e56:	df 93       	push	r29
    1e58:	48 2f       	mov	r20, r24
    1e5a:	60 e0       	ldi	r22, 0x00	; 0
    1e5c:	81 e0       	ldi	r24, 0x01	; 1
    1e5e:	2b df       	rcall	.-426    	; 0x1cb6 <xQueueGenericCreate>
    1e60:	ec 01       	movw	r28, r24
    1e62:	00 97       	sbiw	r24, 0x00	; 0
    1e64:	61 f0       	breq	.+24     	; 0x1e7e <xQueueCreateMutex+0x2c>
    1e66:	1d 82       	std	Y+5, r1	; 0x05
    1e68:	1c 82       	std	Y+4, r1	; 0x04
    1e6a:	19 82       	std	Y+1, r1	; 0x01
    1e6c:	18 82       	st	Y, r1
    1e6e:	1e 82       	std	Y+6, r1	; 0x06
    1e70:	00 e0       	ldi	r16, 0x00	; 0
    1e72:	20 e0       	ldi	r18, 0x00	; 0
    1e74:	30 e0       	ldi	r19, 0x00	; 0
    1e76:	a9 01       	movw	r20, r18
    1e78:	60 e0       	ldi	r22, 0x00	; 0
    1e7a:	70 e0       	ldi	r23, 0x00	; 0
    1e7c:	4a df       	rcall	.-364    	; 0x1d12 <xQueueGenericSend>
    1e7e:	ce 01       	movw	r24, r28
    1e80:	df 91       	pop	r29
    1e82:	cf 91       	pop	r28
    1e84:	0f 91       	pop	r16
    1e86:	08 95       	ret

00001e88 <xQueueGenericSendFromISR>:
    1e88:	ef 92       	push	r14
    1e8a:	ff 92       	push	r15
    1e8c:	0f 93       	push	r16
    1e8e:	1f 93       	push	r17
    1e90:	cf 93       	push	r28
    1e92:	df 93       	push	r29
    1e94:	8a 01       	movw	r16, r20
    1e96:	fc 01       	movw	r30, r24
    1e98:	56 8d       	ldd	r21, Z+30	; 0x1e
    1e9a:	37 8d       	ldd	r19, Z+31	; 0x1f
    1e9c:	53 17       	cp	r21, r19
    1e9e:	10 f0       	brcs	.+4      	; 0x1ea4 <xQueueGenericSendFromISR+0x1c>
    1ea0:	22 30       	cpi	r18, 0x02	; 2
    1ea2:	e9 f4       	brne	.+58     	; 0x1ede <xQueueGenericSendFromISR+0x56>
    1ea4:	42 2f       	mov	r20, r18
    1ea6:	78 01       	movw	r14, r16
    1ea8:	ec 01       	movw	r28, r24
    1eaa:	1a a1       	ldd	r17, Y+34	; 0x22
    1eac:	fb dd       	rcall	.-1034   	; 0x1aa4 <prvCopyDataToQueue>
    1eae:	1f 3f       	cpi	r17, 0xFF	; 255
    1eb0:	81 f4       	brne	.+32     	; 0x1ed2 <xQueueGenericSendFromISR+0x4a>
    1eb2:	8b 89       	ldd	r24, Y+19	; 0x13
    1eb4:	88 23       	and	r24, r24
    1eb6:	a9 f0       	breq	.+42     	; 0x1ee2 <xQueueGenericSendFromISR+0x5a>
    1eb8:	ce 01       	movw	r24, r28
    1eba:	43 96       	adiw	r24, 0x13	; 19
    1ebc:	0e 94 34 18 	call	0x3068	; 0x3068 <xTaskRemoveFromEventList>
    1ec0:	88 23       	and	r24, r24
    1ec2:	89 f0       	breq	.+34     	; 0x1ee6 <xQueueGenericSendFromISR+0x5e>
    1ec4:	e1 14       	cp	r14, r1
    1ec6:	f1 04       	cpc	r15, r1
    1ec8:	81 f0       	breq	.+32     	; 0x1eea <xQueueGenericSendFromISR+0x62>
    1eca:	81 e0       	ldi	r24, 0x01	; 1
    1ecc:	f7 01       	movw	r30, r14
    1ece:	80 83       	st	Z, r24
    1ed0:	0d c0       	rjmp	.+26     	; 0x1eec <xQueueGenericSendFromISR+0x64>
    1ed2:	ff 24       	eor	r15, r15
    1ed4:	f3 94       	inc	r15
    1ed6:	f1 0e       	add	r15, r17
    1ed8:	fa a2       	std	Y+34, r15	; 0x22
    1eda:	81 e0       	ldi	r24, 0x01	; 1
    1edc:	07 c0       	rjmp	.+14     	; 0x1eec <xQueueGenericSendFromISR+0x64>
    1ede:	80 e0       	ldi	r24, 0x00	; 0
    1ee0:	05 c0       	rjmp	.+10     	; 0x1eec <xQueueGenericSendFromISR+0x64>
    1ee2:	81 e0       	ldi	r24, 0x01	; 1
    1ee4:	03 c0       	rjmp	.+6      	; 0x1eec <xQueueGenericSendFromISR+0x64>
    1ee6:	81 e0       	ldi	r24, 0x01	; 1
    1ee8:	01 c0       	rjmp	.+2      	; 0x1eec <xQueueGenericSendFromISR+0x64>
    1eea:	81 e0       	ldi	r24, 0x01	; 1
    1eec:	df 91       	pop	r29
    1eee:	cf 91       	pop	r28
    1ef0:	1f 91       	pop	r17
    1ef2:	0f 91       	pop	r16
    1ef4:	ff 90       	pop	r15
    1ef6:	ef 90       	pop	r14
    1ef8:	08 95       	ret

00001efa <xQueueReceive>:
    1efa:	9f 92       	push	r9
    1efc:	af 92       	push	r10
    1efe:	bf 92       	push	r11
    1f00:	cf 92       	push	r12
    1f02:	df 92       	push	r13
    1f04:	ef 92       	push	r14
    1f06:	ff 92       	push	r15
    1f08:	0f 93       	push	r16
    1f0a:	1f 93       	push	r17
    1f0c:	cf 93       	push	r28
    1f0e:	df 93       	push	r29
    1f10:	cd b7       	in	r28, 0x3d	; 61
    1f12:	de b7       	in	r29, 0x3e	; 62
    1f14:	29 97       	sbiw	r28, 0x09	; 9
    1f16:	0f b6       	in	r0, 0x3f	; 63
    1f18:	f8 94       	cli
    1f1a:	de bf       	out	0x3e, r29	; 62
    1f1c:	0f be       	out	0x3f, r0	; 63
    1f1e:	cd bf       	out	0x3d, r28	; 61
    1f20:	8c 01       	movw	r16, r24
    1f22:	5b 01       	movw	r10, r22
    1f24:	2e 83       	std	Y+6, r18	; 0x06
    1f26:	3f 83       	std	Y+7, r19	; 0x07
    1f28:	48 87       	std	Y+8, r20	; 0x08
    1f2a:	59 87       	std	Y+9, r21	; 0x09
    1f2c:	e1 2c       	mov	r14, r1
    1f2e:	99 24       	eor	r9, r9
    1f30:	93 94       	inc	r9
    1f32:	6c 01       	movw	r12, r24
    1f34:	83 e1       	ldi	r24, 0x13	; 19
    1f36:	c8 0e       	add	r12, r24
    1f38:	d1 1c       	adc	r13, r1
    1f3a:	0f b6       	in	r0, 0x3f	; 63
    1f3c:	f8 94       	cli
    1f3e:	0f 92       	push	r0
    1f40:	f8 01       	movw	r30, r16
    1f42:	f6 8c       	ldd	r15, Z+30	; 0x1e
    1f44:	ff 20       	and	r15, r15
    1f46:	99 f0       	breq	.+38     	; 0x1f6e <xQueueReceive+0x74>
    1f48:	b5 01       	movw	r22, r10
    1f4a:	c8 01       	movw	r24, r16
    1f4c:	0a de       	rcall	.-1004   	; 0x1b62 <prvCopyDataFromQueue>
    1f4e:	fa 94       	dec	r15
    1f50:	f8 01       	movw	r30, r16
    1f52:	f6 8e       	std	Z+30, r15	; 0x1e
    1f54:	80 85       	ldd	r24, Z+8	; 0x08
    1f56:	88 23       	and	r24, r24
    1f58:	31 f0       	breq	.+12     	; 0x1f66 <xQueueReceive+0x6c>
    1f5a:	c8 01       	movw	r24, r16
    1f5c:	08 96       	adiw	r24, 0x08	; 8
    1f5e:	0e 94 34 18 	call	0x3068	; 0x3068 <xTaskRemoveFromEventList>
    1f62:	81 11       	cpse	r24, r1
    1f64:	cc dc       	rcall	.-1640   	; 0x18fe <vPortYield>
    1f66:	0f 90       	pop	r0
    1f68:	0f be       	out	0x3f, r0	; 63
    1f6a:	81 e0       	ldi	r24, 0x01	; 1
    1f6c:	4c c0       	rjmp	.+152    	; 0x2006 <xQueueReceive+0x10c>
    1f6e:	8e 81       	ldd	r24, Y+6	; 0x06
    1f70:	9f 81       	ldd	r25, Y+7	; 0x07
    1f72:	a8 85       	ldd	r26, Y+8	; 0x08
    1f74:	b9 85       	ldd	r27, Y+9	; 0x09
    1f76:	89 2b       	or	r24, r25
    1f78:	8a 2b       	or	r24, r26
    1f7a:	8b 2b       	or	r24, r27
    1f7c:	21 f4       	brne	.+8      	; 0x1f86 <xQueueReceive+0x8c>
    1f7e:	0f 90       	pop	r0
    1f80:	0f be       	out	0x3f, r0	; 63
    1f82:	80 e0       	ldi	r24, 0x00	; 0
    1f84:	40 c0       	rjmp	.+128    	; 0x2006 <xQueueReceive+0x10c>
    1f86:	e1 10       	cpse	r14, r1
    1f88:	05 c0       	rjmp	.+10     	; 0x1f94 <xQueueReceive+0x9a>
    1f8a:	ce 01       	movw	r24, r28
    1f8c:	01 96       	adiw	r24, 0x01	; 1
    1f8e:	0e 94 c0 18 	call	0x3180	; 0x3180 <vTaskInternalSetTimeOutState>
    1f92:	e9 2c       	mov	r14, r9
    1f94:	0f 90       	pop	r0
    1f96:	0f be       	out	0x3f, r0	; 63
    1f98:	0f d6       	rcall	.+3102   	; 0x2bb8 <vTaskSuspendAll>
    1f9a:	0f b6       	in	r0, 0x3f	; 63
    1f9c:	f8 94       	cli
    1f9e:	0f 92       	push	r0
    1fa0:	f8 01       	movw	r30, r16
    1fa2:	81 a1       	ldd	r24, Z+33	; 0x21
    1fa4:	8f 3f       	cpi	r24, 0xFF	; 255
    1fa6:	09 f4       	brne	.+2      	; 0x1faa <xQueueReceive+0xb0>
    1fa8:	11 a2       	std	Z+33, r1	; 0x21
    1faa:	f8 01       	movw	r30, r16
    1fac:	82 a1       	ldd	r24, Z+34	; 0x22
    1fae:	8f 3f       	cpi	r24, 0xFF	; 255
    1fb0:	09 f4       	brne	.+2      	; 0x1fb4 <xQueueReceive+0xba>
    1fb2:	12 a2       	std	Z+34, r1	; 0x22
    1fb4:	0f 90       	pop	r0
    1fb6:	0f be       	out	0x3f, r0	; 63
    1fb8:	be 01       	movw	r22, r28
    1fba:	6a 5f       	subi	r22, 0xFA	; 250
    1fbc:	7f 4f       	sbci	r23, 0xFF	; 255
    1fbe:	ce 01       	movw	r24, r28
    1fc0:	01 96       	adiw	r24, 0x01	; 1
    1fc2:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <xTaskCheckForTimeOut>
    1fc6:	81 11       	cpse	r24, r1
    1fc8:	15 c0       	rjmp	.+42     	; 0x1ff4 <xQueueReceive+0xfa>
    1fca:	c8 01       	movw	r24, r16
    1fcc:	60 dd       	rcall	.-1344   	; 0x1a8e <prvIsQueueEmpty>
    1fce:	88 23       	and	r24, r24
    1fd0:	69 f0       	breq	.+26     	; 0x1fec <xQueueReceive+0xf2>
    1fd2:	4e 81       	ldd	r20, Y+6	; 0x06
    1fd4:	5f 81       	ldd	r21, Y+7	; 0x07
    1fd6:	68 85       	ldd	r22, Y+8	; 0x08
    1fd8:	79 85       	ldd	r23, Y+9	; 0x09
    1fda:	c6 01       	movw	r24, r12
    1fdc:	ea d7       	rcall	.+4052   	; 0x2fb2 <vTaskPlaceOnEventList>
    1fde:	c8 01       	movw	r24, r16
    1fe0:	da dd       	rcall	.-1100   	; 0x1b96 <prvUnlockQueue>
    1fe2:	d3 d6       	rcall	.+3494   	; 0x2d8a <xTaskResumeAll>
    1fe4:	81 11       	cpse	r24, r1
    1fe6:	a9 cf       	rjmp	.-174    	; 0x1f3a <xQueueReceive+0x40>
    1fe8:	8a dc       	rcall	.-1772   	; 0x18fe <vPortYield>
    1fea:	a7 cf       	rjmp	.-178    	; 0x1f3a <xQueueReceive+0x40>
    1fec:	c8 01       	movw	r24, r16
    1fee:	d3 dd       	rcall	.-1114   	; 0x1b96 <prvUnlockQueue>
    1ff0:	cc d6       	rcall	.+3480   	; 0x2d8a <xTaskResumeAll>
    1ff2:	a3 cf       	rjmp	.-186    	; 0x1f3a <xQueueReceive+0x40>
    1ff4:	c8 01       	movw	r24, r16
    1ff6:	cf dd       	rcall	.-1122   	; 0x1b96 <prvUnlockQueue>
    1ff8:	c8 d6       	rcall	.+3472   	; 0x2d8a <xTaskResumeAll>
    1ffa:	c8 01       	movw	r24, r16
    1ffc:	48 dd       	rcall	.-1392   	; 0x1a8e <prvIsQueueEmpty>
    1ffe:	88 23       	and	r24, r24
    2000:	09 f4       	brne	.+2      	; 0x2004 <xQueueReceive+0x10a>
    2002:	9b cf       	rjmp	.-202    	; 0x1f3a <xQueueReceive+0x40>
    2004:	80 e0       	ldi	r24, 0x00	; 0
    2006:	29 96       	adiw	r28, 0x09	; 9
    2008:	0f b6       	in	r0, 0x3f	; 63
    200a:	f8 94       	cli
    200c:	de bf       	out	0x3e, r29	; 62
    200e:	0f be       	out	0x3f, r0	; 63
    2010:	cd bf       	out	0x3d, r28	; 61
    2012:	df 91       	pop	r29
    2014:	cf 91       	pop	r28
    2016:	1f 91       	pop	r17
    2018:	0f 91       	pop	r16
    201a:	ff 90       	pop	r15
    201c:	ef 90       	pop	r14
    201e:	df 90       	pop	r13
    2020:	cf 90       	pop	r12
    2022:	bf 90       	pop	r11
    2024:	af 90       	pop	r10
    2026:	9f 90       	pop	r9
    2028:	08 95       	ret

0000202a <xQueueSemaphoreTake>:
    202a:	bf 92       	push	r11
    202c:	cf 92       	push	r12
    202e:	df 92       	push	r13
    2030:	ef 92       	push	r14
    2032:	ff 92       	push	r15
    2034:	0f 93       	push	r16
    2036:	1f 93       	push	r17
    2038:	cf 93       	push	r28
    203a:	df 93       	push	r29
    203c:	cd b7       	in	r28, 0x3d	; 61
    203e:	de b7       	in	r29, 0x3e	; 62
    2040:	29 97       	sbiw	r28, 0x09	; 9
    2042:	0f b6       	in	r0, 0x3f	; 63
    2044:	f8 94       	cli
    2046:	de bf       	out	0x3e, r29	; 62
    2048:	0f be       	out	0x3f, r0	; 63
    204a:	cd bf       	out	0x3d, r28	; 61
    204c:	8c 01       	movw	r16, r24
    204e:	4e 83       	std	Y+6, r20	; 0x06
    2050:	5f 83       	std	Y+7, r21	; 0x07
    2052:	68 87       	std	Y+8, r22	; 0x08
    2054:	79 87       	std	Y+9, r23	; 0x09
    2056:	b1 2c       	mov	r11, r1
    2058:	d1 2c       	mov	r13, r1
    205a:	cc 24       	eor	r12, r12
    205c:	c3 94       	inc	r12
    205e:	7c 01       	movw	r14, r24
    2060:	83 e1       	ldi	r24, 0x13	; 19
    2062:	e8 0e       	add	r14, r24
    2064:	f1 1c       	adc	r15, r1
    2066:	0f b6       	in	r0, 0x3f	; 63
    2068:	f8 94       	cli
    206a:	0f 92       	push	r0
    206c:	d8 01       	movw	r26, r16
    206e:	5e 96       	adiw	r26, 0x1e	; 30
    2070:	8c 91       	ld	r24, X
    2072:	5e 97       	sbiw	r26, 0x1e	; 30
    2074:	88 23       	and	r24, r24
    2076:	d9 f0       	breq	.+54     	; 0x20ae <xQueueSemaphoreTake+0x84>
    2078:	81 50       	subi	r24, 0x01	; 1
    207a:	5e 96       	adiw	r26, 0x1e	; 30
    207c:	8c 93       	st	X, r24
    207e:	5e 97       	sbiw	r26, 0x1e	; 30
    2080:	8d 91       	ld	r24, X+
    2082:	9c 91       	ld	r25, X
    2084:	89 2b       	or	r24, r25
    2086:	29 f4       	brne	.+10     	; 0x2092 <xQueueSemaphoreTake+0x68>
    2088:	0e 94 5f 1a 	call	0x34be	; 0x34be <pvTaskIncrementMutexHeldCount>
    208c:	f8 01       	movw	r30, r16
    208e:	95 83       	std	Z+5, r25	; 0x05
    2090:	84 83       	std	Z+4, r24	; 0x04
    2092:	d8 01       	movw	r26, r16
    2094:	18 96       	adiw	r26, 0x08	; 8
    2096:	8c 91       	ld	r24, X
    2098:	88 23       	and	r24, r24
    209a:	29 f0       	breq	.+10     	; 0x20a6 <xQueueSemaphoreTake+0x7c>
    209c:	c8 01       	movw	r24, r16
    209e:	08 96       	adiw	r24, 0x08	; 8
    20a0:	e3 d7       	rcall	.+4038   	; 0x3068 <xTaskRemoveFromEventList>
    20a2:	81 11       	cpse	r24, r1
    20a4:	2c dc       	rcall	.-1960   	; 0x18fe <vPortYield>
    20a6:	0f 90       	pop	r0
    20a8:	0f be       	out	0x3f, r0	; 63
    20aa:	81 e0       	ldi	r24, 0x01	; 1
    20ac:	7a c0       	rjmp	.+244    	; 0x21a2 <xQueueSemaphoreTake+0x178>
    20ae:	8e 81       	ldd	r24, Y+6	; 0x06
    20b0:	9f 81       	ldd	r25, Y+7	; 0x07
    20b2:	a8 85       	ldd	r26, Y+8	; 0x08
    20b4:	b9 85       	ldd	r27, Y+9	; 0x09
    20b6:	89 2b       	or	r24, r25
    20b8:	8a 2b       	or	r24, r26
    20ba:	8b 2b       	or	r24, r27
    20bc:	21 f4       	brne	.+8      	; 0x20c6 <xQueueSemaphoreTake+0x9c>
    20be:	0f 90       	pop	r0
    20c0:	0f be       	out	0x3f, r0	; 63
    20c2:	80 e0       	ldi	r24, 0x00	; 0
    20c4:	6e c0       	rjmp	.+220    	; 0x21a2 <xQueueSemaphoreTake+0x178>
    20c6:	d1 10       	cpse	r13, r1
    20c8:	05 c0       	rjmp	.+10     	; 0x20d4 <xQueueSemaphoreTake+0xaa>
    20ca:	ce 01       	movw	r24, r28
    20cc:	01 96       	adiw	r24, 0x01	; 1
    20ce:	0e 94 c0 18 	call	0x3180	; 0x3180 <vTaskInternalSetTimeOutState>
    20d2:	dc 2c       	mov	r13, r12
    20d4:	0f 90       	pop	r0
    20d6:	0f be       	out	0x3f, r0	; 63
    20d8:	6f d5       	rcall	.+2782   	; 0x2bb8 <vTaskSuspendAll>
    20da:	0f b6       	in	r0, 0x3f	; 63
    20dc:	f8 94       	cli
    20de:	0f 92       	push	r0
    20e0:	f8 01       	movw	r30, r16
    20e2:	81 a1       	ldd	r24, Z+33	; 0x21
    20e4:	8f 3f       	cpi	r24, 0xFF	; 255
    20e6:	09 f4       	brne	.+2      	; 0x20ea <xQueueSemaphoreTake+0xc0>
    20e8:	11 a2       	std	Z+33, r1	; 0x21
    20ea:	d8 01       	movw	r26, r16
    20ec:	92 96       	adiw	r26, 0x22	; 34
    20ee:	8c 91       	ld	r24, X
    20f0:	92 97       	sbiw	r26, 0x22	; 34
    20f2:	8f 3f       	cpi	r24, 0xFF	; 255
    20f4:	11 f4       	brne	.+4      	; 0x20fa <xQueueSemaphoreTake+0xd0>
    20f6:	92 96       	adiw	r26, 0x22	; 34
    20f8:	1c 92       	st	X, r1
    20fa:	0f 90       	pop	r0
    20fc:	0f be       	out	0x3f, r0	; 63
    20fe:	be 01       	movw	r22, r28
    2100:	6a 5f       	subi	r22, 0xFA	; 250
    2102:	7f 4f       	sbci	r23, 0xFF	; 255
    2104:	ce 01       	movw	r24, r28
    2106:	01 96       	adiw	r24, 0x01	; 1
    2108:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <xTaskCheckForTimeOut>
    210c:	81 11       	cpse	r24, r1
    210e:	24 c0       	rjmp	.+72     	; 0x2158 <xQueueSemaphoreTake+0x12e>
    2110:	c8 01       	movw	r24, r16
    2112:	bd dc       	rcall	.-1670   	; 0x1a8e <prvIsQueueEmpty>
    2114:	88 23       	and	r24, r24
    2116:	e1 f0       	breq	.+56     	; 0x2150 <xQueueSemaphoreTake+0x126>
    2118:	f8 01       	movw	r30, r16
    211a:	80 81       	ld	r24, Z
    211c:	91 81       	ldd	r25, Z+1	; 0x01
    211e:	89 2b       	or	r24, r25
    2120:	51 f4       	brne	.+20     	; 0x2136 <xQueueSemaphoreTake+0x10c>
    2122:	0f b6       	in	r0, 0x3f	; 63
    2124:	f8 94       	cli
    2126:	0f 92       	push	r0
    2128:	84 81       	ldd	r24, Z+4	; 0x04
    212a:	95 81       	ldd	r25, Z+5	; 0x05
    212c:	0e 94 3d 19 	call	0x327a	; 0x327a <xTaskPriorityInherit>
    2130:	b8 2e       	mov	r11, r24
    2132:	0f 90       	pop	r0
    2134:	0f be       	out	0x3f, r0	; 63
    2136:	4e 81       	ldd	r20, Y+6	; 0x06
    2138:	5f 81       	ldd	r21, Y+7	; 0x07
    213a:	68 85       	ldd	r22, Y+8	; 0x08
    213c:	79 85       	ldd	r23, Y+9	; 0x09
    213e:	c7 01       	movw	r24, r14
    2140:	38 d7       	rcall	.+3696   	; 0x2fb2 <vTaskPlaceOnEventList>
    2142:	c8 01       	movw	r24, r16
    2144:	28 dd       	rcall	.-1456   	; 0x1b96 <prvUnlockQueue>
    2146:	21 d6       	rcall	.+3138   	; 0x2d8a <xTaskResumeAll>
    2148:	81 11       	cpse	r24, r1
    214a:	8d cf       	rjmp	.-230    	; 0x2066 <xQueueSemaphoreTake+0x3c>
    214c:	d8 db       	rcall	.-2128   	; 0x18fe <vPortYield>
    214e:	8b cf       	rjmp	.-234    	; 0x2066 <xQueueSemaphoreTake+0x3c>
    2150:	c8 01       	movw	r24, r16
    2152:	21 dd       	rcall	.-1470   	; 0x1b96 <prvUnlockQueue>
    2154:	1a d6       	rcall	.+3124   	; 0x2d8a <xTaskResumeAll>
    2156:	87 cf       	rjmp	.-242    	; 0x2066 <xQueueSemaphoreTake+0x3c>
    2158:	c8 01       	movw	r24, r16
    215a:	1d dd       	rcall	.-1478   	; 0x1b96 <prvUnlockQueue>
    215c:	16 d6       	rcall	.+3116   	; 0x2d8a <xTaskResumeAll>
    215e:	c8 01       	movw	r24, r16
    2160:	96 dc       	rcall	.-1748   	; 0x1a8e <prvIsQueueEmpty>
    2162:	88 23       	and	r24, r24
    2164:	09 f4       	brne	.+2      	; 0x2168 <xQueueSemaphoreTake+0x13e>
    2166:	7f cf       	rjmp	.-258    	; 0x2066 <xQueueSemaphoreTake+0x3c>
    2168:	bb 20       	and	r11, r11
    216a:	d1 f0       	breq	.+52     	; 0x21a0 <xQueueSemaphoreTake+0x176>
    216c:	0f b6       	in	r0, 0x3f	; 63
    216e:	f8 94       	cli
    2170:	0f 92       	push	r0
    2172:	f8 01       	movw	r30, r16
    2174:	83 89       	ldd	r24, Z+19	; 0x13
    2176:	88 23       	and	r24, r24
    2178:	39 f0       	breq	.+14     	; 0x2188 <xQueueSemaphoreTake+0x15e>
    217a:	02 8c       	ldd	r0, Z+26	; 0x1a
    217c:	f3 8d       	ldd	r31, Z+27	; 0x1b
    217e:	e0 2d       	mov	r30, r0
    2180:	80 81       	ld	r24, Z
    2182:	64 e0       	ldi	r22, 0x04	; 4
    2184:	68 1b       	sub	r22, r24
    2186:	01 c0       	rjmp	.+2      	; 0x218a <xQueueSemaphoreTake+0x160>
    2188:	60 e0       	ldi	r22, 0x00	; 0
    218a:	d8 01       	movw	r26, r16
    218c:	14 96       	adiw	r26, 0x04	; 4
    218e:	8d 91       	ld	r24, X+
    2190:	9c 91       	ld	r25, X
    2192:	15 97       	sbiw	r26, 0x05	; 5
    2194:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <vTaskPriorityDisinheritAfterTimeout>
    2198:	0f 90       	pop	r0
    219a:	0f be       	out	0x3f, r0	; 63
    219c:	80 e0       	ldi	r24, 0x00	; 0
    219e:	01 c0       	rjmp	.+2      	; 0x21a2 <xQueueSemaphoreTake+0x178>
    21a0:	80 e0       	ldi	r24, 0x00	; 0
    21a2:	29 96       	adiw	r28, 0x09	; 9
    21a4:	0f b6       	in	r0, 0x3f	; 63
    21a6:	f8 94       	cli
    21a8:	de bf       	out	0x3e, r29	; 62
    21aa:	0f be       	out	0x3f, r0	; 63
    21ac:	cd bf       	out	0x3d, r28	; 61
    21ae:	df 91       	pop	r29
    21b0:	cf 91       	pop	r28
    21b2:	1f 91       	pop	r17
    21b4:	0f 91       	pop	r16
    21b6:	ff 90       	pop	r15
    21b8:	ef 90       	pop	r14
    21ba:	df 90       	pop	r13
    21bc:	cf 90       	pop	r12
    21be:	bf 90       	pop	r11
    21c0:	08 95       	ret

000021c2 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
    {
    21c2:	cf 93       	push	r28
    21c4:	df 93       	push	r29
    21c6:	ec 01       	movw	r28, r24
        will not actually cause the task to block, just place it on a blocked
        list.  It will not block until the scheduler is unlocked - at which
        time a yield will be performed.  If an item is added to the queue while
        the queue is locked, and the calling task blocks on the queue, then the
        calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    21c8:	0f b6       	in	r0, 0x3f	; 63
    21ca:	f8 94       	cli
    21cc:	0f 92       	push	r0
    21ce:	89 a1       	ldd	r24, Y+33	; 0x21
    21d0:	8f 3f       	cpi	r24, 0xFF	; 255
    21d2:	09 f4       	brne	.+2      	; 0x21d6 <vQueueWaitForMessageRestricted+0x14>
    21d4:	19 a2       	std	Y+33, r1	; 0x21
    21d6:	8a a1       	ldd	r24, Y+34	; 0x22
    21d8:	8f 3f       	cpi	r24, 0xFF	; 255
    21da:	09 f4       	brne	.+2      	; 0x21de <vQueueWaitForMessageRestricted+0x1c>
    21dc:	1a a2       	std	Y+34, r1	; 0x22
    21de:	0f 90       	pop	r0
    21e0:	0f be       	out	0x3f, r0	; 63
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    21e2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    21e4:	81 11       	cpse	r24, r1
    21e6:	03 c0       	rjmp	.+6      	; 0x21ee <vQueueWaitForMessageRestricted+0x2c>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    21e8:	ce 01       	movw	r24, r28
    21ea:	43 96       	adiw	r24, 0x13	; 19
    21ec:	1d d7       	rcall	.+3642   	; 0x3028 <vTaskPlaceOnEventListRestricted>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
        prvUnlockQueue( pxQueue );
    21ee:	ce 01       	movw	r24, r28
    21f0:	d2 dc       	rcall	.-1628   	; 0x1b96 <prvUnlockQueue>
    }
    21f2:	df 91       	pop	r29
    21f4:	cf 91       	pop	r28
    21f6:	08 95       	ret

000021f8 <prvBytesInBuffer>:

    configASSERT( pxStreamBuffer );

    xReturn = prvBytesInBuffer( pxStreamBuffer );
    return xReturn;
}
    21f8:	fc 01       	movw	r30, r24
    21fa:	44 81       	ldd	r20, Z+4	; 0x04
    21fc:	55 81       	ldd	r21, Z+5	; 0x05
    21fe:	22 81       	ldd	r18, Z+2	; 0x02
    2200:	33 81       	ldd	r19, Z+3	; 0x03
    2202:	24 0f       	add	r18, r20
    2204:	35 1f       	adc	r19, r21
    2206:	80 81       	ld	r24, Z
    2208:	91 81       	ldd	r25, Z+1	; 0x01
    220a:	b9 01       	movw	r22, r18
    220c:	68 1b       	sub	r22, r24
    220e:	79 0b       	sbc	r23, r25
    2210:	cb 01       	movw	r24, r22
    2212:	64 17       	cp	r22, r20
    2214:	75 07       	cpc	r23, r21
    2216:	10 f0       	brcs	.+4      	; 0x221c <__stack+0x1d>
    2218:	84 1b       	sub	r24, r20
    221a:	95 0b       	sbc	r25, r21
    221c:	08 95       	ret

0000221e <prvWriteBytesToBuffer>:
    221e:	af 92       	push	r10
    2220:	bf 92       	push	r11
    2222:	cf 92       	push	r12
    2224:	df 92       	push	r13
    2226:	ef 92       	push	r14
    2228:	ff 92       	push	r15
    222a:	0f 93       	push	r16
    222c:	1f 93       	push	r17
    222e:	cf 93       	push	r28
    2230:	df 93       	push	r29
    2232:	6c 01       	movw	r12, r24
    2234:	5b 01       	movw	r10, r22
    2236:	7a 01       	movw	r14, r20
    2238:	fc 01       	movw	r30, r24
    223a:	c2 81       	ldd	r28, Z+2	; 0x02
    223c:	d3 81       	ldd	r29, Z+3	; 0x03
    223e:	04 81       	ldd	r16, Z+4	; 0x04
    2240:	15 81       	ldd	r17, Z+5	; 0x05
    2242:	0c 1b       	sub	r16, r28
    2244:	1d 0b       	sbc	r17, r29
    2246:	40 17       	cp	r20, r16
    2248:	51 07       	cpc	r21, r17
    224a:	08 f4       	brcc	.+2      	; 0x224e <prvWriteBytesToBuffer+0x30>
    224c:	8a 01       	movw	r16, r20
    224e:	f6 01       	movw	r30, r12
    2250:	84 85       	ldd	r24, Z+12	; 0x0c
    2252:	95 85       	ldd	r25, Z+13	; 0x0d
    2254:	a8 01       	movw	r20, r16
    2256:	b5 01       	movw	r22, r10
    2258:	8c 0f       	add	r24, r28
    225a:	9d 1f       	adc	r25, r29
    225c:	0e 94 52 2f 	call	0x5ea4	; 0x5ea4 <memcpy>
    2260:	0e 15       	cp	r16, r14
    2262:	1f 05       	cpc	r17, r15
    2264:	58 f4       	brcc	.+22     	; 0x227c <prvWriteBytesToBuffer+0x5e>
    2266:	a7 01       	movw	r20, r14
    2268:	40 1b       	sub	r20, r16
    226a:	51 0b       	sbc	r21, r17
    226c:	b5 01       	movw	r22, r10
    226e:	60 0f       	add	r22, r16
    2270:	71 1f       	adc	r23, r17
    2272:	f6 01       	movw	r30, r12
    2274:	84 85       	ldd	r24, Z+12	; 0x0c
    2276:	95 85       	ldd	r25, Z+13	; 0x0d
    2278:	0e 94 52 2f 	call	0x5ea4	; 0x5ea4 <memcpy>
    227c:	ce 01       	movw	r24, r28
    227e:	8e 0d       	add	r24, r14
    2280:	9f 1d       	adc	r25, r15
    2282:	f6 01       	movw	r30, r12
    2284:	24 81       	ldd	r18, Z+4	; 0x04
    2286:	35 81       	ldd	r19, Z+5	; 0x05
    2288:	82 17       	cp	r24, r18
    228a:	93 07       	cpc	r25, r19
    228c:	10 f0       	brcs	.+4      	; 0x2292 <prvWriteBytesToBuffer+0x74>
    228e:	82 1b       	sub	r24, r18
    2290:	93 0b       	sbc	r25, r19
    2292:	f6 01       	movw	r30, r12
    2294:	93 83       	std	Z+3, r25	; 0x03
    2296:	82 83       	std	Z+2, r24	; 0x02
    2298:	c7 01       	movw	r24, r14
    229a:	df 91       	pop	r29
    229c:	cf 91       	pop	r28
    229e:	1f 91       	pop	r17
    22a0:	0f 91       	pop	r16
    22a2:	ff 90       	pop	r15
    22a4:	ef 90       	pop	r14
    22a6:	df 90       	pop	r13
    22a8:	cf 90       	pop	r12
    22aa:	bf 90       	pop	r11
    22ac:	af 90       	pop	r10
    22ae:	08 95       	ret

000022b0 <prvWriteMessageToBuffer>:
    22b0:	cf 92       	push	r12
    22b2:	df 92       	push	r13
    22b4:	ef 92       	push	r14
    22b6:	ff 92       	push	r15
    22b8:	0f 93       	push	r16
    22ba:	1f 93       	push	r17
    22bc:	cf 93       	push	r28
    22be:	df 93       	push	r29
    22c0:	1f 92       	push	r1
    22c2:	1f 92       	push	r1
    22c4:	cd b7       	in	r28, 0x3d	; 61
    22c6:	de b7       	in	r29, 0x3e	; 62
    22c8:	5a 83       	std	Y+2, r21	; 0x02
    22ca:	49 83       	std	Y+1, r20	; 0x01
    22cc:	21 15       	cp	r18, r1
    22ce:	31 05       	cpc	r19, r1
    22d0:	c9 f0       	breq	.+50     	; 0x2304 <prvWriteMessageToBuffer+0x54>
    22d2:	6b 01       	movw	r12, r22
    22d4:	7c 01       	movw	r14, r24
    22d6:	fc 01       	movw	r30, r24
    22d8:	86 85       	ldd	r24, Z+14	; 0x0e
    22da:	80 fd       	sbrc	r24, 0
    22dc:	08 c0       	rjmp	.+16     	; 0x22ee <prvWriteMessageToBuffer+0x3e>
    22de:	ca 01       	movw	r24, r20
    22e0:	24 17       	cp	r18, r20
    22e2:	35 07       	cpc	r19, r21
    22e4:	08 f4       	brcc	.+2      	; 0x22e8 <prvWriteMessageToBuffer+0x38>
    22e6:	c9 01       	movw	r24, r18
    22e8:	9a 83       	std	Y+2, r25	; 0x02
    22ea:	89 83       	std	Y+1, r24	; 0x01
    22ec:	11 c0       	rjmp	.+34     	; 0x2310 <prvWriteMessageToBuffer+0x60>
    22ee:	20 17       	cp	r18, r16
    22f0:	31 07       	cpc	r19, r17
    22f2:	58 f0       	brcs	.+22     	; 0x230a <prvWriteMessageToBuffer+0x5a>
    22f4:	42 e0       	ldi	r20, 0x02	; 2
    22f6:	50 e0       	ldi	r21, 0x00	; 0
    22f8:	be 01       	movw	r22, r28
    22fa:	6f 5f       	subi	r22, 0xFF	; 255
    22fc:	7f 4f       	sbci	r23, 0xFF	; 255
    22fe:	c7 01       	movw	r24, r14
    2300:	8e df       	rcall	.-228    	; 0x221e <prvWriteBytesToBuffer>
    2302:	06 c0       	rjmp	.+12     	; 0x2310 <prvWriteMessageToBuffer+0x60>
    2304:	80 e0       	ldi	r24, 0x00	; 0
    2306:	90 e0       	ldi	r25, 0x00	; 0
    2308:	08 c0       	rjmp	.+16     	; 0x231a <prvWriteMessageToBuffer+0x6a>
    230a:	80 e0       	ldi	r24, 0x00	; 0
    230c:	90 e0       	ldi	r25, 0x00	; 0
    230e:	05 c0       	rjmp	.+10     	; 0x231a <prvWriteMessageToBuffer+0x6a>
    2310:	49 81       	ldd	r20, Y+1	; 0x01
    2312:	5a 81       	ldd	r21, Y+2	; 0x02
    2314:	b6 01       	movw	r22, r12
    2316:	c7 01       	movw	r24, r14
    2318:	82 df       	rcall	.-252    	; 0x221e <prvWriteBytesToBuffer>
    231a:	0f 90       	pop	r0
    231c:	0f 90       	pop	r0
    231e:	df 91       	pop	r29
    2320:	cf 91       	pop	r28
    2322:	1f 91       	pop	r17
    2324:	0f 91       	pop	r16
    2326:	ff 90       	pop	r15
    2328:	ef 90       	pop	r14
    232a:	df 90       	pop	r13
    232c:	cf 90       	pop	r12
    232e:	08 95       	ret

00002330 <prvReadBytesFromBuffer>:
    2330:	af 92       	push	r10
    2332:	bf 92       	push	r11
    2334:	cf 92       	push	r12
    2336:	df 92       	push	r13
    2338:	ef 92       	push	r14
    233a:	ff 92       	push	r15
    233c:	0f 93       	push	r16
    233e:	1f 93       	push	r17
    2340:	cf 93       	push	r28
    2342:	df 93       	push	r29
    2344:	7c 01       	movw	r14, r24
    2346:	5b 01       	movw	r10, r22
    2348:	e9 01       	movw	r28, r18
    234a:	42 17       	cp	r20, r18
    234c:	53 07       	cpc	r21, r19
    234e:	08 f4       	brcc	.+2      	; 0x2352 <prvReadBytesFromBuffer+0x22>
    2350:	ea 01       	movw	r28, r20
    2352:	20 97       	sbiw	r28, 0x00	; 0
    2354:	79 f1       	breq	.+94     	; 0x23b4 <prvReadBytesFromBuffer+0x84>
    2356:	f7 01       	movw	r30, r14
    2358:	00 81       	ld	r16, Z
    235a:	11 81       	ldd	r17, Z+1	; 0x01
    235c:	c4 80       	ldd	r12, Z+4	; 0x04
    235e:	d5 80       	ldd	r13, Z+5	; 0x05
    2360:	c0 1a       	sub	r12, r16
    2362:	d1 0a       	sbc	r13, r17
    2364:	cc 15       	cp	r28, r12
    2366:	dd 05       	cpc	r29, r13
    2368:	08 f4       	brcc	.+2      	; 0x236c <prvReadBytesFromBuffer+0x3c>
    236a:	6e 01       	movw	r12, r28
    236c:	f7 01       	movw	r30, r14
    236e:	64 85       	ldd	r22, Z+12	; 0x0c
    2370:	75 85       	ldd	r23, Z+13	; 0x0d
    2372:	60 0f       	add	r22, r16
    2374:	71 1f       	adc	r23, r17
    2376:	a6 01       	movw	r20, r12
    2378:	c5 01       	movw	r24, r10
    237a:	0e 94 52 2f 	call	0x5ea4	; 0x5ea4 <memcpy>
    237e:	cc 16       	cp	r12, r28
    2380:	dd 06       	cpc	r13, r29
    2382:	58 f4       	brcc	.+22     	; 0x239a <prvReadBytesFromBuffer+0x6a>
    2384:	ae 01       	movw	r20, r28
    2386:	4c 19       	sub	r20, r12
    2388:	5d 09       	sbc	r21, r13
    238a:	f7 01       	movw	r30, r14
    238c:	64 85       	ldd	r22, Z+12	; 0x0c
    238e:	75 85       	ldd	r23, Z+13	; 0x0d
    2390:	c5 01       	movw	r24, r10
    2392:	8c 0d       	add	r24, r12
    2394:	9d 1d       	adc	r25, r13
    2396:	0e 94 52 2f 	call	0x5ea4	; 0x5ea4 <memcpy>
    239a:	0c 0f       	add	r16, r28
    239c:	1d 1f       	adc	r17, r29
    239e:	f7 01       	movw	r30, r14
    23a0:	84 81       	ldd	r24, Z+4	; 0x04
    23a2:	95 81       	ldd	r25, Z+5	; 0x05
    23a4:	08 17       	cp	r16, r24
    23a6:	19 07       	cpc	r17, r25
    23a8:	10 f0       	brcs	.+4      	; 0x23ae <prvReadBytesFromBuffer+0x7e>
    23aa:	08 1b       	sub	r16, r24
    23ac:	19 0b       	sbc	r17, r25
    23ae:	f7 01       	movw	r30, r14
    23b0:	11 83       	std	Z+1, r17	; 0x01
    23b2:	00 83       	st	Z, r16
    23b4:	ce 01       	movw	r24, r28
    23b6:	df 91       	pop	r29
    23b8:	cf 91       	pop	r28
    23ba:	1f 91       	pop	r17
    23bc:	0f 91       	pop	r16
    23be:	ff 90       	pop	r15
    23c0:	ef 90       	pop	r14
    23c2:	df 90       	pop	r13
    23c4:	cf 90       	pop	r12
    23c6:	bf 90       	pop	r11
    23c8:	af 90       	pop	r10
    23ca:	08 95       	ret

000023cc <xStreamBufferGenericCreate>:
    23cc:	ef 92       	push	r14
    23ce:	ff 92       	push	r15
    23d0:	1f 93       	push	r17
    23d2:	cf 93       	push	r28
    23d4:	df 93       	push	r29
    23d6:	eb 01       	movw	r28, r22
    23d8:	11 e0       	ldi	r17, 0x01	; 1
    23da:	41 30       	cpi	r20, 0x01	; 1
    23dc:	09 f0       	breq	.+2      	; 0x23e0 <xStreamBufferGenericCreate+0x14>
    23de:	10 e0       	ldi	r17, 0x00	; 0
    23e0:	20 97       	sbiw	r28, 0x00	; 0
    23e2:	11 f4       	brne	.+4      	; 0x23e8 <xStreamBufferGenericCreate+0x1c>
    23e4:	c1 e0       	ldi	r28, 0x01	; 1
    23e6:	d0 e0       	ldi	r29, 0x00	; 0
    23e8:	7c 01       	movw	r14, r24
    23ea:	2f ef       	ldi	r18, 0xFF	; 255
    23ec:	e2 1a       	sub	r14, r18
    23ee:	f2 0a       	sbc	r15, r18
    23f0:	41 96       	adiw	r24, 0x11	; 17
    23f2:	53 d8       	rcall	.-3930   	; 0x149a <pvPortMalloc>
    23f4:	00 97       	sbiw	r24, 0x00	; 0
    23f6:	81 f0       	breq	.+32     	; 0x2418 <xStreamBufferGenericCreate+0x4c>
    23f8:	20 e1       	ldi	r18, 0x10	; 16
    23fa:	fc 01       	movw	r30, r24
    23fc:	11 92       	st	Z+, r1
    23fe:	2a 95       	dec	r18
    2400:	e9 f7       	brne	.-6      	; 0x23fc <xStreamBufferGenericCreate+0x30>
    2402:	9c 01       	movw	r18, r24
    2404:	20 5f       	subi	r18, 0xF0	; 240
    2406:	3f 4f       	sbci	r19, 0xFF	; 255
    2408:	fc 01       	movw	r30, r24
    240a:	35 87       	std	Z+13, r19	; 0x0d
    240c:	24 87       	std	Z+12, r18	; 0x0c
    240e:	f5 82       	std	Z+5, r15	; 0x05
    2410:	e4 82       	std	Z+4, r14	; 0x04
    2412:	d7 83       	std	Z+7, r29	; 0x07
    2414:	c6 83       	std	Z+6, r28	; 0x06
    2416:	16 87       	std	Z+14, r17	; 0x0e
    2418:	df 91       	pop	r29
    241a:	cf 91       	pop	r28
    241c:	1f 91       	pop	r17
    241e:	ff 90       	pop	r15
    2420:	ef 90       	pop	r14
    2422:	08 95       	ret

00002424 <xStreamBufferReset>:
    2424:	cf 93       	push	r28
    2426:	df 93       	push	r29
    2428:	fc 01       	movw	r30, r24
    242a:	27 85       	ldd	r18, Z+15	; 0x0f
    242c:	0f b6       	in	r0, 0x3f	; 63
    242e:	f8 94       	cli
    2430:	0f 92       	push	r0
    2432:	80 85       	ldd	r24, Z+8	; 0x08
    2434:	91 85       	ldd	r25, Z+9	; 0x09
    2436:	89 2b       	or	r24, r25
    2438:	d1 f4       	brne	.+52     	; 0x246e <xStreamBufferReset+0x4a>
    243a:	82 85       	ldd	r24, Z+10	; 0x0a
    243c:	93 85       	ldd	r25, Z+11	; 0x0b
    243e:	89 2b       	or	r24, r25
    2440:	c1 f4       	brne	.+48     	; 0x2472 <xStreamBufferReset+0x4e>
    2442:	86 85       	ldd	r24, Z+14	; 0x0e
    2444:	46 81       	ldd	r20, Z+6	; 0x06
    2446:	57 81       	ldd	r21, Z+7	; 0x07
    2448:	64 81       	ldd	r22, Z+4	; 0x04
    244a:	75 81       	ldd	r23, Z+5	; 0x05
    244c:	a4 85       	ldd	r26, Z+12	; 0x0c
    244e:	b5 85       	ldd	r27, Z+13	; 0x0d
    2450:	90 e1       	ldi	r25, 0x10	; 16
    2452:	ef 01       	movw	r28, r30
    2454:	19 92       	st	Y+, r1
    2456:	9a 95       	dec	r25
    2458:	e9 f7       	brne	.-6      	; 0x2454 <xStreamBufferReset+0x30>
    245a:	b5 87       	std	Z+13, r27	; 0x0d
    245c:	a4 87       	std	Z+12, r26	; 0x0c
    245e:	75 83       	std	Z+5, r23	; 0x05
    2460:	64 83       	std	Z+4, r22	; 0x04
    2462:	57 83       	std	Z+7, r21	; 0x07
    2464:	46 83       	std	Z+6, r20	; 0x06
    2466:	86 87       	std	Z+14, r24	; 0x0e
    2468:	27 87       	std	Z+15, r18	; 0x0f
    246a:	81 e0       	ldi	r24, 0x01	; 1
    246c:	03 c0       	rjmp	.+6      	; 0x2474 <xStreamBufferReset+0x50>
    246e:	80 e0       	ldi	r24, 0x00	; 0
    2470:	01 c0       	rjmp	.+2      	; 0x2474 <xStreamBufferReset+0x50>
    2472:	80 e0       	ldi	r24, 0x00	; 0
    2474:	0f 90       	pop	r0
    2476:	0f be       	out	0x3f, r0	; 63
    2478:	df 91       	pop	r29
    247a:	cf 91       	pop	r28
    247c:	08 95       	ret

0000247e <xStreamBufferSpacesAvailable>:
    247e:	fc 01       	movw	r30, r24
    2480:	24 81       	ldd	r18, Z+4	; 0x04
    2482:	35 81       	ldd	r19, Z+5	; 0x05
    2484:	80 81       	ld	r24, Z
    2486:	91 81       	ldd	r25, Z+1	; 0x01
    2488:	42 81       	ldd	r20, Z+2	; 0x02
    248a:	53 81       	ldd	r21, Z+3	; 0x03
    248c:	82 0f       	add	r24, r18
    248e:	93 1f       	adc	r25, r19
    2490:	01 97       	sbiw	r24, 0x01	; 1
    2492:	84 1b       	sub	r24, r20
    2494:	95 0b       	sbc	r25, r21
    2496:	82 17       	cp	r24, r18
    2498:	93 07       	cpc	r25, r19
    249a:	10 f0       	brcs	.+4      	; 0x24a0 <xStreamBufferSpacesAvailable+0x22>
    249c:	82 1b       	sub	r24, r18
    249e:	93 0b       	sbc	r25, r19
    24a0:	08 95       	ret

000024a2 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void *pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    24a2:	2f 92       	push	r2
    24a4:	3f 92       	push	r3
    24a6:	4f 92       	push	r4
    24a8:	5f 92       	push	r5
    24aa:	6f 92       	push	r6
    24ac:	7f 92       	push	r7
    24ae:	8f 92       	push	r8
    24b0:	9f 92       	push	r9
    24b2:	af 92       	push	r10
    24b4:	bf 92       	push	r11
    24b6:	cf 92       	push	r12
    24b8:	df 92       	push	r13
    24ba:	ef 92       	push	r14
    24bc:	ff 92       	push	r15
    24be:	0f 93       	push	r16
    24c0:	1f 93       	push	r17
    24c2:	cf 93       	push	r28
    24c4:	df 93       	push	r29
    24c6:	cd b7       	in	r28, 0x3d	; 61
    24c8:	de b7       	in	r29, 0x3e	; 62
    24ca:	29 97       	sbiw	r28, 0x09	; 9
    24cc:	0f b6       	in	r0, 0x3f	; 63
    24ce:	f8 94       	cli
    24d0:	de bf       	out	0x3e, r29	; 62
    24d2:	0f be       	out	0x3f, r0	; 63
    24d4:	cd bf       	out	0x3d, r28	; 61
    24d6:	5c 01       	movw	r10, r24
    24d8:	1b 01       	movw	r2, r22
    24da:	2a 01       	movw	r4, r20
    24dc:	0e 83       	std	Y+6, r16	; 0x06
    24de:	1f 83       	std	Y+7, r17	; 0x07
    24e0:	28 87       	std	Y+8, r18	; 0x08
    24e2:	39 87       	std	Y+9, r19	; 0x09

    /* This send function is used to write to both message buffers and stream
    buffers.  If this is a message buffer then the space needed must be
    increased by the amount of bytes needed to store the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    24e4:	fc 01       	movw	r30, r24
    24e6:	86 85       	ldd	r24, Z+14	; 0x0e
    24e8:	80 ff       	sbrs	r24, 0
    24ea:	05 c0       	rjmp	.+10     	; 0x24f6 <xStreamBufferSend+0x54>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    24ec:	3a 01       	movw	r6, r20
    24ee:	f2 e0       	ldi	r31, 0x02	; 2
    24f0:	6f 0e       	add	r6, r31
    24f2:	71 1c       	adc	r7, r1
    24f4:	01 c0       	rjmp	.+2      	; 0x24f8 <xStreamBufferSend+0x56>
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReturn, xSpace = 0;
size_t xRequiredSpace = xDataLengthBytes;
    24f6:	3a 01       	movw	r6, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    24f8:	8e 81       	ldd	r24, Y+6	; 0x06
    24fa:	9f 81       	ldd	r25, Y+7	; 0x07
    24fc:	a8 85       	ldd	r26, Y+8	; 0x08
    24fe:	b9 85       	ldd	r27, Y+9	; 0x09
    2500:	89 2b       	or	r24, r25
    2502:	8a 2b       	or	r24, r26
    2504:	8b 2b       	or	r24, r27
    2506:	09 f4       	brne	.+2      	; 0x250a <xStreamBufferSend+0x68>
    2508:	34 c0       	rjmp	.+104    	; 0x2572 <xStreamBufferSend+0xd0>
    {
        vTaskSetTimeOutState( &xTimeOut );
    250a:	ce 01       	movw	r24, r28
    250c:	01 96       	adiw	r24, 0x01	; 1
    250e:	22 d6       	rcall	.+3140   	; 0x3154 <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
            buffer. */
            taskENTER_CRITICAL();
    2510:	0f b6       	in	r0, 0x3f	; 63
    2512:	f8 94       	cli
    2514:	0f 92       	push	r0
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    2516:	c5 01       	movw	r24, r10
    2518:	b2 df       	rcall	.-156    	; 0x247e <xStreamBufferSpacesAvailable>
    251a:	4c 01       	movw	r8, r24

                if( xSpace < xRequiredSpace )
    251c:	86 15       	cp	r24, r6
    251e:	97 05       	cpc	r25, r7
    2520:	18 f5       	brcc	.+70     	; 0x2568 <xStreamBufferSend+0xc6>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClear( NULL );
    2522:	80 e0       	ldi	r24, 0x00	; 0
    2524:	90 e0       	ldi	r25, 0x00	; 0
    2526:	0e 94 fc 1b 	call	0x37f8	; 0x37f8 <xTaskNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    252a:	94 d6       	rcall	.+3368   	; 0x3254 <xTaskGetCurrentTaskHandle>
    252c:	f5 01       	movw	r30, r10
    252e:	93 87       	std	Z+11, r25	; 0x0b
    2530:	82 87       	std	Z+10, r24	; 0x0a
                {
                    taskEXIT_CRITICAL();
                    break;
                }
            }
            taskEXIT_CRITICAL();
    2532:	0f 90       	pop	r0
    2534:	0f be       	out	0x3f, r0	; 63

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    2536:	ce 80       	ldd	r12, Y+6	; 0x06
    2538:	df 80       	ldd	r13, Y+7	; 0x07
    253a:	e8 84       	ldd	r14, Y+8	; 0x08
    253c:	f9 84       	ldd	r15, Y+9	; 0x09
    253e:	00 e0       	ldi	r16, 0x00	; 0
    2540:	10 e0       	ldi	r17, 0x00	; 0
    2542:	20 e0       	ldi	r18, 0x00	; 0
    2544:	30 e0       	ldi	r19, 0x00	; 0
    2546:	a9 01       	movw	r20, r18
    2548:	60 e0       	ldi	r22, 0x00	; 0
    254a:	70 e0       	ldi	r23, 0x00	; 0
    254c:	cb 01       	movw	r24, r22
    254e:	c9 d7       	rcall	.+3986   	; 0x34e2 <xTaskNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
    2550:	f5 01       	movw	r30, r10
    2552:	13 86       	std	Z+11, r1	; 0x0b
    2554:	12 86       	std	Z+10, r1	; 0x0a

        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    2556:	be 01       	movw	r22, r28
    2558:	6a 5f       	subi	r22, 0xFA	; 250
    255a:	7f 4f       	sbci	r23, 0xFF	; 255
    255c:	ce 01       	movw	r24, r28
    255e:	01 96       	adiw	r24, 0x01	; 1
    2560:	20 d6       	rcall	.+3136   	; 0x31a2 <xTaskCheckForTimeOut>
    2562:	88 23       	and	r24, r24
    2564:	a9 f2       	breq	.-86     	; 0x2510 <xStreamBufferSend+0x6e>
    2566:	02 c0       	rjmp	.+4      	; 0x256c <xStreamBufferSend+0xca>
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
                }
                else
                {
                    taskEXIT_CRITICAL();
    2568:	0f 90       	pop	r0
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
    256a:	0f be       	out	0x3f, r0	; 63
    256c:	81 14       	cp	r8, r1
    256e:	91 04       	cpc	r9, r1
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    2570:	19 f4       	brne	.+6      	; 0x2578 <xStreamBufferSend+0xd6>
    2572:	c5 01       	movw	r24, r10
    2574:	84 df       	rcall	.-248    	; 0x247e <xStreamBufferSpacesAvailable>
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    2576:	4c 01       	movw	r8, r24
    2578:	83 01       	movw	r16, r6
    257a:	94 01       	movw	r18, r8
    257c:	a2 01       	movw	r20, r4
    257e:	b1 01       	movw	r22, r2
    2580:	c5 01       	movw	r24, r10
    2582:	96 de       	rcall	.-724    	; 0x22b0 <prvWriteMessageToBuffer>

    if( xReturn > ( size_t ) 0 )
    2584:	7c 01       	movw	r14, r24
    2586:	89 2b       	or	r24, r25
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    2588:	e1 f0       	breq	.+56     	; 0x25c2 <xStreamBufferSend+0x120>
    258a:	c5 01       	movw	r24, r10
    258c:	35 de       	rcall	.-918    	; 0x21f8 <prvBytesInBuffer>
    258e:	f5 01       	movw	r30, r10
    2590:	26 81       	ldd	r18, Z+6	; 0x06
    2592:	37 81       	ldd	r19, Z+7	; 0x07
    2594:	82 17       	cp	r24, r18
    2596:	93 07       	cpc	r25, r19
        {
            sbSEND_COMPLETED( pxStreamBuffer );
    2598:	a0 f0       	brcs	.+40     	; 0x25c2 <xStreamBufferSend+0x120>
    259a:	0e d3       	rcall	.+1564   	; 0x2bb8 <vTaskSuspendAll>
    259c:	f5 01       	movw	r30, r10
    259e:	80 85       	ldd	r24, Z+8	; 0x08
    25a0:	91 85       	ldd	r25, Z+9	; 0x09
    25a2:	89 2b       	or	r24, r25
    25a4:	69 f0       	breq	.+26     	; 0x25c0 <xStreamBufferSend+0x11e>
    25a6:	80 85       	ldd	r24, Z+8	; 0x08
    25a8:	91 85       	ldd	r25, Z+9	; 0x09
    25aa:	00 e0       	ldi	r16, 0x00	; 0
    25ac:	10 e0       	ldi	r17, 0x00	; 0
    25ae:	20 e0       	ldi	r18, 0x00	; 0
    25b0:	40 e0       	ldi	r20, 0x00	; 0
    25b2:	50 e0       	ldi	r21, 0x00	; 0
    25b4:	ba 01       	movw	r22, r20
    25b6:	0e 94 fb 1a 	call	0x35f6	; 0x35f6 <xTaskGenericNotify>
    25ba:	f5 01       	movw	r30, r10
    25bc:	11 86       	std	Z+9, r1	; 0x09
    25be:	10 86       	std	Z+8, r1	; 0x08
    25c0:	e4 d3       	rcall	.+1992   	; 0x2d8a <xTaskResumeAll>
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    25c2:	c7 01       	movw	r24, r14
    25c4:	29 96       	adiw	r28, 0x09	; 9
    25c6:	0f b6       	in	r0, 0x3f	; 63
    25c8:	f8 94       	cli
    25ca:	de bf       	out	0x3e, r29	; 62
    25cc:	0f be       	out	0x3f, r0	; 63
    25ce:	cd bf       	out	0x3d, r28	; 61
    25d0:	df 91       	pop	r29
    25d2:	cf 91       	pop	r28
    25d4:	1f 91       	pop	r17
    25d6:	0f 91       	pop	r16
    25d8:	ff 90       	pop	r15
    25da:	ef 90       	pop	r14
    25dc:	df 90       	pop	r13
    25de:	cf 90       	pop	r12
    25e0:	bf 90       	pop	r11
    25e2:	af 90       	pop	r10
    25e4:	9f 90       	pop	r9
    25e6:	8f 90       	pop	r8
    25e8:	7f 90       	pop	r7
    25ea:	6f 90       	pop	r6
    25ec:	5f 90       	pop	r5
    25ee:	4f 90       	pop	r4
    25f0:	3f 90       	pop	r3
    25f2:	2f 90       	pop	r2
    25f4:	08 95       	ret

000025f6 <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void *pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    25f6:	af 92       	push	r10
    25f8:	bf 92       	push	r11
    25fa:	cf 92       	push	r12
    25fc:	df 92       	push	r13
    25fe:	ef 92       	push	r14
    2600:	ff 92       	push	r15
    2602:	0f 93       	push	r16
    2604:	1f 93       	push	r17
    2606:	cf 93       	push	r28
    2608:	df 93       	push	r29
    260a:	ec 01       	movw	r28, r24
    260c:	5b 01       	movw	r10, r22
    260e:	6a 01       	movw	r12, r20
    2610:	79 01       	movw	r14, r18

    /* This send function is used to write to both message buffers and stream
    buffers.  If this is a message buffer then the space needed must be
    increased by the amount of bytes needed to store the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    2612:	8e 85       	ldd	r24, Y+14	; 0x0e
    2614:	80 ff       	sbrs	r24, 0
    2616:	04 c0       	rjmp	.+8      	; 0x2620 <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    2618:	8a 01       	movw	r16, r20
    261a:	0e 5f       	subi	r16, 0xFE	; 254
    261c:	1f 4f       	sbci	r17, 0xFF	; 255
    261e:	01 c0       	rjmp	.+2      	; 0x2622 <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReturn, xSpace;
size_t xRequiredSpace = xDataLengthBytes;
    2620:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    2622:	ce 01       	movw	r24, r28
    2624:	2c df       	rcall	.-424    	; 0x247e <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    2626:	9c 01       	movw	r18, r24
    2628:	a6 01       	movw	r20, r12
    262a:	b5 01       	movw	r22, r10
    262c:	ce 01       	movw	r24, r28
    262e:	40 de       	rcall	.-896    	; 0x22b0 <prvWriteMessageToBuffer>
    2630:	6c 01       	movw	r12, r24

    if( xReturn > ( size_t ) 0 )
    2632:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    2634:	b9 f0       	breq	.+46     	; 0x2664 <xStreamBufferSendFromISR+0x6e>
    2636:	ce 01       	movw	r24, r28
    2638:	df dd       	rcall	.-1090   	; 0x21f8 <prvBytesInBuffer>
    263a:	2e 81       	ldd	r18, Y+6	; 0x06
    263c:	3f 81       	ldd	r19, Y+7	; 0x07
    263e:	82 17       	cp	r24, r18
    2640:	93 07       	cpc	r25, r19
    2642:	80 f0       	brcs	.+32     	; 0x2664 <xStreamBufferSendFromISR+0x6e>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    2644:	88 85       	ldd	r24, Y+8	; 0x08
    2646:	99 85       	ldd	r25, Y+9	; 0x09
    2648:	89 2b       	or	r24, r25
    264a:	61 f0       	breq	.+24     	; 0x2664 <xStreamBufferSendFromISR+0x6e>
    264c:	88 85       	ldd	r24, Y+8	; 0x08
    264e:	99 85       	ldd	r25, Y+9	; 0x09
    2650:	00 e0       	ldi	r16, 0x00	; 0
    2652:	10 e0       	ldi	r17, 0x00	; 0
    2654:	20 e0       	ldi	r18, 0x00	; 0
    2656:	40 e0       	ldi	r20, 0x00	; 0
    2658:	50 e0       	ldi	r21, 0x00	; 0
    265a:	ba 01       	movw	r22, r20
    265c:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <xTaskGenericNotifyFromISR>
    2660:	19 86       	std	Y+9, r1	; 0x09
    2662:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    2664:	c6 01       	movw	r24, r12
    2666:	df 91       	pop	r29
    2668:	cf 91       	pop	r28
    266a:	1f 91       	pop	r17
    266c:	0f 91       	pop	r16
    266e:	ff 90       	pop	r15
    2670:	ef 90       	pop	r14
    2672:	df 90       	pop	r13
    2674:	cf 90       	pop	r12
    2676:	bf 90       	pop	r11
    2678:	af 90       	pop	r10
    267a:	08 95       	ret

0000267c <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void *pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    267c:	4f 92       	push	r4
    267e:	5f 92       	push	r5
    2680:	6f 92       	push	r6
    2682:	7f 92       	push	r7
    2684:	8f 92       	push	r8
    2686:	9f 92       	push	r9
    2688:	af 92       	push	r10
    268a:	bf 92       	push	r11
    268c:	cf 92       	push	r12
    268e:	df 92       	push	r13
    2690:	ef 92       	push	r14
    2692:	ff 92       	push	r15
    2694:	0f 93       	push	r16
    2696:	1f 93       	push	r17
    2698:	cf 93       	push	r28
    269a:	df 93       	push	r29
    269c:	1f 92       	push	r1
    269e:	1f 92       	push	r1
    26a0:	cd b7       	in	r28, 0x3d	; 61
    26a2:	de b7       	in	r29, 0x3e	; 62
    26a4:	5c 01       	movw	r10, r24
    26a6:	2b 01       	movw	r4, r22
    26a8:	3a 01       	movw	r6, r20
    26aa:	68 01       	movw	r12, r16
    26ac:	79 01       	movw	r14, r18
    /* This receive function is used by both message buffers, which store
    discrete messages, and stream buffers, which store a continuous stream of
    bytes.  Discrete messages include an additional
    sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    26ae:	fc 01       	movw	r30, r24
    26b0:	86 85       	ldd	r24, Z+14	; 0x0e
    26b2:	80 fd       	sbrc	r24, 0
    26b4:	03 c0       	rjmp	.+6      	; 0x26bc <xStreamBufferReceive+0x40>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    26b6:	81 2c       	mov	r8, r1
    26b8:	91 2c       	mov	r9, r1
    26ba:	04 c0       	rjmp	.+8      	; 0x26c4 <xStreamBufferReceive+0x48>
    bytes.  Discrete messages include an additional
    sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    26bc:	68 94       	set
    26be:	88 24       	eor	r8, r8
    26c0:	81 f8       	bld	r8, 1
    26c2:	91 2c       	mov	r9, r1
    else
    {
        xBytesToStoreMessageLength = 0;
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    26c4:	c1 14       	cp	r12, r1
    26c6:	d1 04       	cpc	r13, r1
    26c8:	e1 04       	cpc	r14, r1
    26ca:	f1 04       	cpc	r15, r1
    26cc:	31 f1       	breq	.+76     	; 0x271a <xStreamBufferReceive+0x9e>
    {
        /* Checking if there is data and clearing the notification state must be
        performed atomically. */
        taskENTER_CRITICAL();
    26ce:	0f b6       	in	r0, 0x3f	; 63
    26d0:	f8 94       	cli
    26d2:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    26d4:	c5 01       	movw	r24, r10
    26d6:	90 dd       	rcall	.-1248   	; 0x21f8 <prvBytesInBuffer>
    26d8:	8c 01       	movw	r16, r24
            /* If this function was invoked by a message buffer read then
            xBytesToStoreMessageLength holds the number of bytes used to hold
            the length of the next discrete message.  If this function was
            invoked by a stream buffer read then xBytesToStoreMessageLength will
            be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    26da:	88 16       	cp	r8, r24
    26dc:	99 06       	cpc	r9, r25
    26de:	40 f0       	brcs	.+16     	; 0x26f0 <xStreamBufferReceive+0x74>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    26e0:	80 e0       	ldi	r24, 0x00	; 0
    26e2:	90 e0       	ldi	r25, 0x00	; 0
    26e4:	0e 94 fc 1b 	call	0x37f8	; 0x37f8 <xTaskNotifyStateClear>

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    26e8:	b5 d5       	rcall	.+2922   	; 0x3254 <xTaskGetCurrentTaskHandle>
    26ea:	f5 01       	movw	r30, r10
    26ec:	91 87       	std	Z+9, r25	; 0x09
    26ee:	80 87       	std	Z+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    26f0:	0f 90       	pop	r0
    26f2:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    26f4:	80 16       	cp	r8, r16
    26f6:	91 06       	cpc	r9, r17
    26f8:	b0 f0       	brcs	.+44     	; 0x2726 <xStreamBufferReceive+0xaa>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    26fa:	00 e0       	ldi	r16, 0x00	; 0
    26fc:	10 e0       	ldi	r17, 0x00	; 0
    26fe:	20 e0       	ldi	r18, 0x00	; 0
    2700:	30 e0       	ldi	r19, 0x00	; 0
    2702:	a9 01       	movw	r20, r18
    2704:	60 e0       	ldi	r22, 0x00	; 0
    2706:	70 e0       	ldi	r23, 0x00	; 0
    2708:	cb 01       	movw	r24, r22
    270a:	eb d6       	rcall	.+3542   	; 0x34e2 <xTaskNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    270c:	f5 01       	movw	r30, r10
    270e:	11 86       	std	Z+9, r1	; 0x09

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    2710:	10 86       	std	Z+8, r1	; 0x08
    2712:	c5 01       	movw	r24, r10
    2714:	71 dd       	rcall	.-1310   	; 0x21f8 <prvBytesInBuffer>
    2716:	8c 01       	movw	r16, r24
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    2718:	03 c0       	rjmp	.+6      	; 0x2720 <xStreamBufferReceive+0xa4>
    271a:	c5 01       	movw	r24, r10
    271c:	6d dd       	rcall	.-1318   	; 0x21f8 <prvBytesInBuffer>
    271e:	8c 01       	movw	r16, r24
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
    holds the number of bytes used to store the message length) or a stream of
    bytes (where xBytesToStoreMessageLength is zero), the number of bytes
    available must be greater than xBytesToStoreMessageLength to be able to
    read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    2720:	80 16       	cp	r8, r16
    2722:	91 06       	cpc	r9, r17
    2724:	b8 f5       	brcc	.+110    	; 0x2794 <xStreamBufferReceive+0x118>
                                        size_t xBytesToStoreMessageLength )
{
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

    if( xBytesToStoreMessageLength != ( size_t ) 0 )
    2726:	81 14       	cp	r8, r1
    2728:	91 04       	cpc	r9, r1
    272a:	c1 f0       	breq	.+48     	; 0x275c <xStreamBufferReceive+0xe0>
    {
        /* A discrete message is being received.  First receive the length
        of the message.  A copy of the tail is stored so the buffer can be
        returned to its prior state if the length of the message is too
        large for the provided buffer. */
        xOriginalTail = pxStreamBuffer->xTail;
    272c:	f5 01       	movw	r30, r10
    272e:	e0 80       	ld	r14, Z
    2730:	f1 80       	ldd	r15, Z+1	; 0x01
        ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
    2732:	98 01       	movw	r18, r16
    2734:	a4 01       	movw	r20, r8
    2736:	be 01       	movw	r22, r28
    2738:	6f 5f       	subi	r22, 0xFF	; 255
    273a:	7f 4f       	sbci	r23, 0xFF	; 255
    273c:	c5 01       	movw	r24, r10
    273e:	f8 dd       	rcall	.-1040   	; 0x2330 <prvReadBytesFromBuffer>
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
    2740:	89 81       	ldd	r24, Y+1	; 0x01
    2742:	9a 81       	ldd	r25, Y+2	; 0x02

        /* Reduce the number of bytes available by the number of bytes just
        read out. */
        xBytesAvailable -= xBytesToStoreMessageLength;
    2744:	08 19       	sub	r16, r8
    2746:	19 09       	sbc	r17, r9

        /* Check there is enough space in the buffer provided by the
        user. */
        if( xNextMessageLength > xBufferLengthBytes )
    2748:	68 16       	cp	r6, r24
    274a:	79 06       	cpc	r7, r25
    274c:	30 f4       	brcc	.+12     	; 0x275a <xStreamBufferReceive+0xde>
        {
            /* The user has provided insufficient space to read the message
            so return the buffer to its previous state (so the length of
            the message is in the buffer again). */
            pxStreamBuffer->xTail = xOriginalTail;
    274e:	f5 01       	movw	r30, r10
    2750:	f1 82       	std	Z+1, r15	; 0x01
    2752:	e0 82       	st	Z, r14
            xNextMessageLength = 0;
    2754:	61 2c       	mov	r6, r1
    2756:	71 2c       	mov	r7, r1
        of the message.  A copy of the tail is stored so the buffer can be
        returned to its prior state if the length of the message is too
        large for the provided buffer. */
        xOriginalTail = pxStreamBuffer->xTail;
        ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
    2758:	01 c0       	rjmp	.+2      	; 0x275c <xStreamBufferReceive+0xe0>
        message), so read as many bytes as possible. */
        xNextMessageLength = xBufferLengthBytes;
    }

    /* Read the actual data. */
    xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
    275a:	3c 01       	movw	r6, r24
    275c:	98 01       	movw	r18, r16
    275e:	a3 01       	movw	r20, r6
    2760:	b2 01       	movw	r22, r4
    2762:	c5 01       	movw	r24, r10
    2764:	e5 dd       	rcall	.-1078   	; 0x2330 <prvReadBytesFromBuffer>
    if( xBytesAvailable > xBytesToStoreMessageLength )
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    2766:	7c 01       	movw	r14, r24
    2768:	89 2b       	or	r24, r25
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    276a:	b1 f0       	breq	.+44     	; 0x2798 <xStreamBufferReceive+0x11c>
    276c:	25 d2       	rcall	.+1098   	; 0x2bb8 <vTaskSuspendAll>
    276e:	f5 01       	movw	r30, r10
    2770:	82 85       	ldd	r24, Z+10	; 0x0a
    2772:	93 85       	ldd	r25, Z+11	; 0x0b
    2774:	89 2b       	or	r24, r25
    2776:	61 f0       	breq	.+24     	; 0x2790 <xStreamBufferReceive+0x114>
    2778:	82 85       	ldd	r24, Z+10	; 0x0a
    277a:	93 85       	ldd	r25, Z+11	; 0x0b
    277c:	00 e0       	ldi	r16, 0x00	; 0
    277e:	10 e0       	ldi	r17, 0x00	; 0
    2780:	20 e0       	ldi	r18, 0x00	; 0
    2782:	40 e0       	ldi	r20, 0x00	; 0
    2784:	50 e0       	ldi	r21, 0x00	; 0
    2786:	ba 01       	movw	r22, r20
    2788:	36 d7       	rcall	.+3692   	; 0x35f6 <xTaskGenericNotify>
    278a:	f5 01       	movw	r30, r10
    278c:	13 86       	std	Z+11, r1	; 0x0b
    278e:	12 86       	std	Z+10, r1	; 0x0a
    2790:	fc d2       	rcall	.+1528   	; 0x2d8a <xTaskResumeAll>
    2792:	02 c0       	rjmp	.+4      	; 0x2798 <xStreamBufferReceive+0x11c>
                             void *pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    2794:	e1 2c       	mov	r14, r1
    2796:	f1 2c       	mov	r15, r1
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    2798:	c7 01       	movw	r24, r14
    279a:	0f 90       	pop	r0
    279c:	0f 90       	pop	r0
    279e:	df 91       	pop	r29
    27a0:	cf 91       	pop	r28
    27a2:	1f 91       	pop	r17
    27a4:	0f 91       	pop	r16
    27a6:	ff 90       	pop	r15
    27a8:	ef 90       	pop	r14
    27aa:	df 90       	pop	r13
    27ac:	cf 90       	pop	r12
    27ae:	bf 90       	pop	r11
    27b0:	af 90       	pop	r10
    27b2:	9f 90       	pop	r9
    27b4:	8f 90       	pop	r8
    27b6:	7f 90       	pop	r7
    27b8:	6f 90       	pop	r6
    27ba:	5f 90       	pop	r5
    27bc:	4f 90       	pop	r4
    27be:	08 95       	ret

000027c0 <prvResetNextTaskUnblockTime>:
    27c0:	e0 91 6d 19 	lds	r30, 0x196D	; 0x80196d <pxDelayedTaskList>
    27c4:	f0 91 6e 19 	lds	r31, 0x196E	; 0x80196e <pxDelayedTaskList+0x1>
    27c8:	80 81       	ld	r24, Z
    27ca:	81 11       	cpse	r24, r1
    27cc:	0c c0       	rjmp	.+24     	; 0x27e6 <prvResetNextTaskUnblockTime+0x26>
    27ce:	8f ef       	ldi	r24, 0xFF	; 255
    27d0:	9f ef       	ldi	r25, 0xFF	; 255
    27d2:	dc 01       	movw	r26, r24
    27d4:	80 93 3a 19 	sts	0x193A, r24	; 0x80193a <xNextTaskUnblockTime>
    27d8:	90 93 3b 19 	sts	0x193B, r25	; 0x80193b <xNextTaskUnblockTime+0x1>
    27dc:	a0 93 3c 19 	sts	0x193C, r26	; 0x80193c <xNextTaskUnblockTime+0x2>
    27e0:	b0 93 3d 19 	sts	0x193D, r27	; 0x80193d <xNextTaskUnblockTime+0x3>
    27e4:	08 95       	ret
    27e6:	e0 91 6d 19 	lds	r30, 0x196D	; 0x80196d <pxDelayedTaskList>
    27ea:	f0 91 6e 19 	lds	r31, 0x196E	; 0x80196e <pxDelayedTaskList+0x1>
    27ee:	07 80       	ldd	r0, Z+7	; 0x07
    27f0:	f0 85       	ldd	r31, Z+8	; 0x08
    27f2:	e0 2d       	mov	r30, r0
    27f4:	00 84       	ldd	r0, Z+8	; 0x08
    27f6:	f1 85       	ldd	r31, Z+9	; 0x09
    27f8:	e0 2d       	mov	r30, r0
    27fa:	82 81       	ldd	r24, Z+2	; 0x02
    27fc:	93 81       	ldd	r25, Z+3	; 0x03
    27fe:	a4 81       	ldd	r26, Z+4	; 0x04
    2800:	b5 81       	ldd	r27, Z+5	; 0x05
    2802:	80 93 3a 19 	sts	0x193A, r24	; 0x80193a <xNextTaskUnblockTime>
    2806:	90 93 3b 19 	sts	0x193B, r25	; 0x80193b <xNextTaskUnblockTime+0x1>
    280a:	a0 93 3c 19 	sts	0x193C, r26	; 0x80193c <xNextTaskUnblockTime+0x2>
    280e:	b0 93 3d 19 	sts	0x193D, r27	; 0x80193d <xNextTaskUnblockTime+0x3>
    2812:	08 95       	ret

00002814 <prvAddCurrentTaskToDelayedList>:
    2814:	8f 92       	push	r8
    2816:	9f 92       	push	r9
    2818:	af 92       	push	r10
    281a:	bf 92       	push	r11
    281c:	cf 92       	push	r12
    281e:	df 92       	push	r13
    2820:	ef 92       	push	r14
    2822:	ff 92       	push	r15
    2824:	cf 93       	push	r28
    2826:	6b 01       	movw	r12, r22
    2828:	7c 01       	movw	r14, r24
    282a:	c4 2f       	mov	r28, r20
    282c:	80 90 44 19 	lds	r8, 0x1944	; 0x801944 <xTickCount>
    2830:	90 90 45 19 	lds	r9, 0x1945	; 0x801945 <xTickCount+0x1>
    2834:	a0 90 46 19 	lds	r10, 0x1946	; 0x801946 <xTickCount+0x2>
    2838:	b0 90 47 19 	lds	r11, 0x1947	; 0x801947 <xTickCount+0x3>
    283c:	80 91 b1 19 	lds	r24, 0x19B1	; 0x8019b1 <pxCurrentTCB>
    2840:	90 91 b2 19 	lds	r25, 0x19B2	; 0x8019b2 <pxCurrentTCB+0x1>
    2844:	02 96       	adiw	r24, 0x02	; 2
    2846:	0e 94 aa 0b 	call	0x1754	; 0x1754 <uxListRemove>
    284a:	8f ef       	ldi	r24, 0xFF	; 255
    284c:	c8 16       	cp	r12, r24
    284e:	d8 06       	cpc	r13, r24
    2850:	e8 06       	cpc	r14, r24
    2852:	f8 06       	cpc	r15, r24
    2854:	69 f4       	brne	.+26     	; 0x2870 <prvAddCurrentTaskToDelayedList+0x5c>
    2856:	cc 23       	and	r28, r28
    2858:	59 f0       	breq	.+22     	; 0x2870 <prvAddCurrentTaskToDelayedList+0x5c>
    285a:	60 91 b1 19 	lds	r22, 0x19B1	; 0x8019b1 <pxCurrentTCB>
    285e:	70 91 b2 19 	lds	r23, 0x19B2	; 0x8019b2 <pxCurrentTCB+0x1>
    2862:	6e 5f       	subi	r22, 0xFE	; 254
    2864:	7f 4f       	sbci	r23, 0xFF	; 255
    2866:	89 e4       	ldi	r24, 0x49	; 73
    2868:	99 e1       	ldi	r25, 0x19	; 25
    286a:	0e 94 4c 0b 	call	0x1698	; 0x1698 <vListInsertEnd>
    286e:	3f c0       	rjmp	.+126    	; 0x28ee <prvAddCurrentTaskToDelayedList+0xda>
    2870:	c8 0c       	add	r12, r8
    2872:	d9 1c       	adc	r13, r9
    2874:	ea 1c       	adc	r14, r10
    2876:	fb 1c       	adc	r15, r11
    2878:	e0 91 b1 19 	lds	r30, 0x19B1	; 0x8019b1 <pxCurrentTCB>
    287c:	f0 91 b2 19 	lds	r31, 0x19B2	; 0x8019b2 <pxCurrentTCB+0x1>
    2880:	c2 82       	std	Z+2, r12	; 0x02
    2882:	d3 82       	std	Z+3, r13	; 0x03
    2884:	e4 82       	std	Z+4, r14	; 0x04
    2886:	f5 82       	std	Z+5, r15	; 0x05
    2888:	c8 14       	cp	r12, r8
    288a:	d9 04       	cpc	r13, r9
    288c:	ea 04       	cpc	r14, r10
    288e:	fb 04       	cpc	r15, r11
    2890:	68 f4       	brcc	.+26     	; 0x28ac <prvAddCurrentTaskToDelayedList+0x98>
    2892:	60 91 b1 19 	lds	r22, 0x19B1	; 0x8019b1 <pxCurrentTCB>
    2896:	70 91 b2 19 	lds	r23, 0x19B2	; 0x8019b2 <pxCurrentTCB+0x1>
    289a:	80 91 6b 19 	lds	r24, 0x196B	; 0x80196b <pxOverflowDelayedTaskList>
    289e:	90 91 6c 19 	lds	r25, 0x196C	; 0x80196c <pxOverflowDelayedTaskList+0x1>
    28a2:	6e 5f       	subi	r22, 0xFE	; 254
    28a4:	7f 4f       	sbci	r23, 0xFF	; 255
    28a6:	0e 94 6d 0b 	call	0x16da	; 0x16da <vListInsert>
    28aa:	21 c0       	rjmp	.+66     	; 0x28ee <prvAddCurrentTaskToDelayedList+0xda>
    28ac:	60 91 b1 19 	lds	r22, 0x19B1	; 0x8019b1 <pxCurrentTCB>
    28b0:	70 91 b2 19 	lds	r23, 0x19B2	; 0x8019b2 <pxCurrentTCB+0x1>
    28b4:	80 91 6d 19 	lds	r24, 0x196D	; 0x80196d <pxDelayedTaskList>
    28b8:	90 91 6e 19 	lds	r25, 0x196E	; 0x80196e <pxDelayedTaskList+0x1>
    28bc:	6e 5f       	subi	r22, 0xFE	; 254
    28be:	7f 4f       	sbci	r23, 0xFF	; 255
    28c0:	0e 94 6d 0b 	call	0x16da	; 0x16da <vListInsert>
    28c4:	80 91 3a 19 	lds	r24, 0x193A	; 0x80193a <xNextTaskUnblockTime>
    28c8:	90 91 3b 19 	lds	r25, 0x193B	; 0x80193b <xNextTaskUnblockTime+0x1>
    28cc:	a0 91 3c 19 	lds	r26, 0x193C	; 0x80193c <xNextTaskUnblockTime+0x2>
    28d0:	b0 91 3d 19 	lds	r27, 0x193D	; 0x80193d <xNextTaskUnblockTime+0x3>
    28d4:	c8 16       	cp	r12, r24
    28d6:	d9 06       	cpc	r13, r25
    28d8:	ea 06       	cpc	r14, r26
    28da:	fb 06       	cpc	r15, r27
    28dc:	40 f4       	brcc	.+16     	; 0x28ee <prvAddCurrentTaskToDelayedList+0xda>
    28de:	c0 92 3a 19 	sts	0x193A, r12	; 0x80193a <xNextTaskUnblockTime>
    28e2:	d0 92 3b 19 	sts	0x193B, r13	; 0x80193b <xNextTaskUnblockTime+0x1>
    28e6:	e0 92 3c 19 	sts	0x193C, r14	; 0x80193c <xNextTaskUnblockTime+0x2>
    28ea:	f0 92 3d 19 	sts	0x193D, r15	; 0x80193d <xNextTaskUnblockTime+0x3>
    28ee:	cf 91       	pop	r28
    28f0:	ff 90       	pop	r15
    28f2:	ef 90       	pop	r14
    28f4:	df 90       	pop	r13
    28f6:	cf 90       	pop	r12
    28f8:	bf 90       	pop	r11
    28fa:	af 90       	pop	r10
    28fc:	9f 90       	pop	r9
    28fe:	8f 90       	pop	r8
    2900:	08 95       	ret

00002902 <xTaskCreate>:
    2902:	4f 92       	push	r4
    2904:	5f 92       	push	r5
    2906:	6f 92       	push	r6
    2908:	7f 92       	push	r7
    290a:	8f 92       	push	r8
    290c:	9f 92       	push	r9
    290e:	af 92       	push	r10
    2910:	bf 92       	push	r11
    2912:	cf 92       	push	r12
    2914:	df 92       	push	r13
    2916:	ef 92       	push	r14
    2918:	ff 92       	push	r15
    291a:	0f 93       	push	r16
    291c:	cf 93       	push	r28
    291e:	df 93       	push	r29
    2920:	4c 01       	movw	r8, r24
    2922:	6b 01       	movw	r12, r22
    2924:	5a 01       	movw	r10, r20
    2926:	29 01       	movw	r4, r18
    2928:	ca 01       	movw	r24, r20
    292a:	0e 94 4d 0a 	call	0x149a	; 0x149a <pvPortMalloc>
    292e:	3c 01       	movw	r6, r24
    2930:	89 2b       	or	r24, r25
    2932:	09 f4       	brne	.+2      	; 0x2936 <xTaskCreate+0x34>
    2934:	f4 c0       	rjmp	.+488    	; 0x2b1e <xTaskCreate+0x21c>
    2936:	80 e3       	ldi	r24, 0x30	; 48
    2938:	90 e0       	ldi	r25, 0x00	; 0
    293a:	0e 94 4d 0a 	call	0x149a	; 0x149a <pvPortMalloc>
    293e:	ec 01       	movw	r28, r24
    2940:	89 2b       	or	r24, r25
    2942:	99 f0       	breq	.+38     	; 0x296a <xTaskCreate+0x68>
    2944:	7c 8e       	std	Y+28, r7	; 0x1c
    2946:	6b 8e       	std	Y+27, r6	; 0x1b
    2948:	a5 01       	movw	r20, r10
    294a:	65 ea       	ldi	r22, 0xA5	; 165
    294c:	70 e0       	ldi	r23, 0x00	; 0
    294e:	c3 01       	movw	r24, r6
    2950:	0e 94 5b 2f 	call	0x5eb6	; 0x5eb6 <memset>
    2954:	21 e0       	ldi	r18, 0x01	; 1
    2956:	a2 1a       	sub	r10, r18
    2958:	b1 08       	sbc	r11, r1
    295a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    295c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    295e:	a8 0e       	add	r10, r24
    2960:	b9 1e       	adc	r11, r25
    2962:	c1 14       	cp	r12, r1
    2964:	d1 04       	cpc	r13, r1
    2966:	29 f4       	brne	.+10     	; 0x2972 <xTaskCreate+0x70>
    2968:	20 c0       	rjmp	.+64     	; 0x29aa <xTaskCreate+0xa8>
    296a:	c3 01       	movw	r24, r6
    296c:	0e 94 06 0b 	call	0x160c	; 0x160c <vPortFree>
    2970:	d6 c0       	rjmp	.+428    	; 0x2b1e <xTaskCreate+0x21c>
    2972:	d6 01       	movw	r26, r12
    2974:	8c 91       	ld	r24, X
    2976:	8d 8f       	std	Y+29, r24	; 0x1d
    2978:	8c 91       	ld	r24, X
    297a:	88 23       	and	r24, r24
    297c:	a1 f0       	breq	.+40     	; 0x29a6 <xTaskCreate+0xa4>
    297e:	ae 01       	movw	r20, r28
    2980:	42 5e       	subi	r20, 0xE2	; 226
    2982:	5f 4f       	sbci	r21, 0xFF	; 255
    2984:	f6 01       	movw	r30, r12
    2986:	31 96       	adiw	r30, 0x01	; 1
    2988:	b8 e0       	ldi	r27, 0x08	; 8
    298a:	cb 0e       	add	r12, r27
    298c:	d1 1c       	adc	r13, r1
    298e:	cf 01       	movw	r24, r30
    2990:	21 91       	ld	r18, Z+
    2992:	da 01       	movw	r26, r20
    2994:	2d 93       	st	X+, r18
    2996:	ad 01       	movw	r20, r26
    2998:	dc 01       	movw	r26, r24
    299a:	8c 91       	ld	r24, X
    299c:	88 23       	and	r24, r24
    299e:	19 f0       	breq	.+6      	; 0x29a6 <xTaskCreate+0xa4>
    29a0:	ec 15       	cp	r30, r12
    29a2:	fd 05       	cpc	r31, r13
    29a4:	a1 f7       	brne	.-24     	; 0x298e <xTaskCreate+0x8c>
    29a6:	1c a2       	std	Y+36, r1	; 0x24
    29a8:	01 c0       	rjmp	.+2      	; 0x29ac <xTaskCreate+0xaa>
    29aa:	1d 8e       	std	Y+29, r1	; 0x1d
    29ac:	04 30       	cpi	r16, 0x04	; 4
    29ae:	08 f0       	brcs	.+2      	; 0x29b2 <xTaskCreate+0xb0>
    29b0:	03 e0       	ldi	r16, 0x03	; 3
    29b2:	0a 8f       	std	Y+26, r16	; 0x1a
    29b4:	0f a3       	std	Y+39, r16	; 0x27
    29b6:	18 a6       	std	Y+40, r1	; 0x28
    29b8:	6e 01       	movw	r12, r28
    29ba:	b2 e0       	ldi	r27, 0x02	; 2
    29bc:	cb 0e       	add	r12, r27
    29be:	d1 1c       	adc	r13, r1
    29c0:	c6 01       	movw	r24, r12
    29c2:	0e 94 48 0b 	call	0x1690	; 0x1690 <vListInitialiseItem>
    29c6:	ce 01       	movw	r24, r28
    29c8:	0e 96       	adiw	r24, 0x0e	; 14
    29ca:	0e 94 48 0b 	call	0x1690	; 0x1690 <vListInitialiseItem>
    29ce:	db 87       	std	Y+11, r29	; 0x0b
    29d0:	ca 87       	std	Y+10, r28	; 0x0a
    29d2:	84 e0       	ldi	r24, 0x04	; 4
    29d4:	90 e0       	ldi	r25, 0x00	; 0
    29d6:	a0 e0       	ldi	r26, 0x00	; 0
    29d8:	b0 e0       	ldi	r27, 0x00	; 0
    29da:	80 1b       	sub	r24, r16
    29dc:	91 09       	sbc	r25, r1
    29de:	a1 09       	sbc	r26, r1
    29e0:	b1 09       	sbc	r27, r1
    29e2:	8e 87       	std	Y+14, r24	; 0x0e
    29e4:	9f 87       	std	Y+15, r25	; 0x0f
    29e6:	a8 8b       	std	Y+16, r26	; 0x10
    29e8:	b9 8b       	std	Y+17, r27	; 0x11
    29ea:	df 8b       	std	Y+23, r29	; 0x17
    29ec:	ce 8b       	std	Y+22, r28	; 0x16
    29ee:	1a a6       	std	Y+42, r1	; 0x2a
    29f0:	19 a6       	std	Y+41, r1	; 0x29
    29f2:	1b a6       	std	Y+43, r1	; 0x2b
    29f4:	1c a6       	std	Y+44, r1	; 0x2c
    29f6:	1d a6       	std	Y+45, r1	; 0x2d
    29f8:	1e a6       	std	Y+46, r1	; 0x2e
    29fa:	1f a6       	std	Y+47, r1	; 0x2f
    29fc:	a2 01       	movw	r20, r4
    29fe:	b4 01       	movw	r22, r8
    2a00:	c5 01       	movw	r24, r10
    2a02:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <pxPortInitialiseStack>
    2a06:	99 83       	std	Y+1, r25	; 0x01
    2a08:	88 83       	st	Y, r24
    2a0a:	e1 14       	cp	r14, r1
    2a0c:	f1 04       	cpc	r15, r1
    2a0e:	19 f0       	breq	.+6      	; 0x2a16 <xTaskCreate+0x114>
    2a10:	f7 01       	movw	r30, r14
    2a12:	d1 83       	std	Z+1, r29	; 0x01
    2a14:	c0 83       	st	Z, r28
    2a16:	0f b6       	in	r0, 0x3f	; 63
    2a18:	f8 94       	cli
    2a1a:	0f 92       	push	r0
    2a1c:	80 91 48 19 	lds	r24, 0x1948	; 0x801948 <uxCurrentNumberOfTasks>
    2a20:	8f 5f       	subi	r24, 0xFF	; 255
    2a22:	80 93 48 19 	sts	0x1948, r24	; 0x801948 <uxCurrentNumberOfTasks>
    2a26:	80 91 b1 19 	lds	r24, 0x19B1	; 0x8019b1 <pxCurrentTCB>
    2a2a:	90 91 b2 19 	lds	r25, 0x19B2	; 0x8019b2 <pxCurrentTCB+0x1>
    2a2e:	89 2b       	or	r24, r25
    2a30:	d1 f5       	brne	.+116    	; 0x2aa6 <xTaskCreate+0x1a4>
    2a32:	d0 93 b2 19 	sts	0x19B2, r29	; 0x8019b2 <pxCurrentTCB+0x1>
    2a36:	c0 93 b1 19 	sts	0x19B1, r28	; 0x8019b1 <pxCurrentTCB>
    2a3a:	80 91 48 19 	lds	r24, 0x1948	; 0x801948 <uxCurrentNumberOfTasks>
    2a3e:	81 30       	cpi	r24, 0x01	; 1
    2a40:	09 f0       	breq	.+2      	; 0x2a44 <xTaskCreate+0x142>
    2a42:	41 c0       	rjmp	.+130    	; 0x2ac6 <xTaskCreate+0x1c4>
    2a44:	85 e8       	ldi	r24, 0x85	; 133
    2a46:	99 e1       	ldi	r25, 0x19	; 25
    2a48:	0e 94 37 0b 	call	0x166e	; 0x166e <vListInitialise>
    2a4c:	80 e9       	ldi	r24, 0x90	; 144
    2a4e:	99 e1       	ldi	r25, 0x19	; 25
    2a50:	0e 94 37 0b 	call	0x166e	; 0x166e <vListInitialise>
    2a54:	8b e9       	ldi	r24, 0x9B	; 155
    2a56:	99 e1       	ldi	r25, 0x19	; 25
    2a58:	0e 94 37 0b 	call	0x166e	; 0x166e <vListInitialise>
    2a5c:	86 ea       	ldi	r24, 0xA6	; 166
    2a5e:	99 e1       	ldi	r25, 0x19	; 25
    2a60:	0e 94 37 0b 	call	0x166e	; 0x166e <vListInitialise>
    2a64:	8a e7       	ldi	r24, 0x7A	; 122
    2a66:	99 e1       	ldi	r25, 0x19	; 25
    2a68:	0e 94 37 0b 	call	0x166e	; 0x166e <vListInitialise>
    2a6c:	8f e6       	ldi	r24, 0x6F	; 111
    2a6e:	99 e1       	ldi	r25, 0x19	; 25
    2a70:	0e 94 37 0b 	call	0x166e	; 0x166e <vListInitialise>
    2a74:	80 e6       	ldi	r24, 0x60	; 96
    2a76:	99 e1       	ldi	r25, 0x19	; 25
    2a78:	0e 94 37 0b 	call	0x166e	; 0x166e <vListInitialise>
    2a7c:	85 e5       	ldi	r24, 0x55	; 85
    2a7e:	99 e1       	ldi	r25, 0x19	; 25
    2a80:	0e 94 37 0b 	call	0x166e	; 0x166e <vListInitialise>
    2a84:	89 e4       	ldi	r24, 0x49	; 73
    2a86:	99 e1       	ldi	r25, 0x19	; 25
    2a88:	0e 94 37 0b 	call	0x166e	; 0x166e <vListInitialise>
    2a8c:	8a e7       	ldi	r24, 0x7A	; 122
    2a8e:	99 e1       	ldi	r25, 0x19	; 25
    2a90:	90 93 6e 19 	sts	0x196E, r25	; 0x80196e <pxDelayedTaskList+0x1>
    2a94:	80 93 6d 19 	sts	0x196D, r24	; 0x80196d <pxDelayedTaskList>
    2a98:	8f e6       	ldi	r24, 0x6F	; 111
    2a9a:	99 e1       	ldi	r25, 0x19	; 25
    2a9c:	90 93 6c 19 	sts	0x196C, r25	; 0x80196c <pxOverflowDelayedTaskList+0x1>
    2aa0:	80 93 6b 19 	sts	0x196B, r24	; 0x80196b <pxOverflowDelayedTaskList>
    2aa4:	10 c0       	rjmp	.+32     	; 0x2ac6 <xTaskCreate+0x1c4>
    2aa6:	80 91 42 19 	lds	r24, 0x1942	; 0x801942 <xSchedulerRunning>
    2aaa:	81 11       	cpse	r24, r1
    2aac:	0c c0       	rjmp	.+24     	; 0x2ac6 <xTaskCreate+0x1c4>
    2aae:	e0 91 b1 19 	lds	r30, 0x19B1	; 0x8019b1 <pxCurrentTCB>
    2ab2:	f0 91 b2 19 	lds	r31, 0x19B2	; 0x8019b2 <pxCurrentTCB+0x1>
    2ab6:	92 8d       	ldd	r25, Z+26	; 0x1a
    2ab8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2aba:	89 17       	cp	r24, r25
    2abc:	20 f0       	brcs	.+8      	; 0x2ac6 <xTaskCreate+0x1c4>
    2abe:	d0 93 b2 19 	sts	0x19B2, r29	; 0x8019b2 <pxCurrentTCB+0x1>
    2ac2:	c0 93 b1 19 	sts	0x19B1, r28	; 0x8019b1 <pxCurrentTCB>
    2ac6:	80 91 3e 19 	lds	r24, 0x193E	; 0x80193e <uxTaskNumber>
    2aca:	8f 5f       	subi	r24, 0xFF	; 255
    2acc:	80 93 3e 19 	sts	0x193E, r24	; 0x80193e <uxTaskNumber>
    2ad0:	8d a3       	std	Y+37, r24	; 0x25
    2ad2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2ad4:	90 91 43 19 	lds	r25, 0x1943	; 0x801943 <uxTopReadyPriority>
    2ad8:	98 17       	cp	r25, r24
    2ada:	10 f4       	brcc	.+4      	; 0x2ae0 <xTaskCreate+0x1de>
    2adc:	80 93 43 19 	sts	0x1943, r24	; 0x801943 <uxTopReadyPriority>
    2ae0:	fb e0       	ldi	r31, 0x0B	; 11
    2ae2:	8f 9f       	mul	r24, r31
    2ae4:	c0 01       	movw	r24, r0
    2ae6:	11 24       	eor	r1, r1
    2ae8:	b6 01       	movw	r22, r12
    2aea:	8b 57       	subi	r24, 0x7B	; 123
    2aec:	96 4e       	sbci	r25, 0xE6	; 230
    2aee:	0e 94 4c 0b 	call	0x1698	; 0x1698 <vListInsertEnd>
    2af2:	0f 90       	pop	r0
    2af4:	0f be       	out	0x3f, r0	; 63
    2af6:	80 91 42 19 	lds	r24, 0x1942	; 0x801942 <xSchedulerRunning>
    2afa:	88 23       	and	r24, r24
    2afc:	61 f0       	breq	.+24     	; 0x2b16 <xTaskCreate+0x214>
    2afe:	e0 91 b1 19 	lds	r30, 0x19B1	; 0x8019b1 <pxCurrentTCB>
    2b02:	f0 91 b2 19 	lds	r31, 0x19B2	; 0x8019b2 <pxCurrentTCB+0x1>
    2b06:	92 8d       	ldd	r25, Z+26	; 0x1a
    2b08:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2b0a:	98 17       	cp	r25, r24
    2b0c:	30 f4       	brcc	.+12     	; 0x2b1a <xTaskCreate+0x218>
    2b0e:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <vPortYield>
    2b12:	81 e0       	ldi	r24, 0x01	; 1
    2b14:	05 c0       	rjmp	.+10     	; 0x2b20 <xTaskCreate+0x21e>
    2b16:	81 e0       	ldi	r24, 0x01	; 1
    2b18:	03 c0       	rjmp	.+6      	; 0x2b20 <xTaskCreate+0x21e>
    2b1a:	81 e0       	ldi	r24, 0x01	; 1
    2b1c:	01 c0       	rjmp	.+2      	; 0x2b20 <xTaskCreate+0x21e>
    2b1e:	8f ef       	ldi	r24, 0xFF	; 255
    2b20:	df 91       	pop	r29
    2b22:	cf 91       	pop	r28
    2b24:	0f 91       	pop	r16
    2b26:	ff 90       	pop	r15
    2b28:	ef 90       	pop	r14
    2b2a:	df 90       	pop	r13
    2b2c:	cf 90       	pop	r12
    2b2e:	bf 90       	pop	r11
    2b30:	af 90       	pop	r10
    2b32:	9f 90       	pop	r9
    2b34:	8f 90       	pop	r8
    2b36:	7f 90       	pop	r7
    2b38:	6f 90       	pop	r6
    2b3a:	5f 90       	pop	r5
    2b3c:	4f 90       	pop	r4
    2b3e:	08 95       	ret

00002b40 <vTaskStartScheduler>:
    2b40:	ef 92       	push	r14
    2b42:	ff 92       	push	r15
    2b44:	0f 93       	push	r16
    2b46:	0f 2e       	mov	r0, r31
    2b48:	f8 e3       	ldi	r31, 0x38	; 56
    2b4a:	ef 2e       	mov	r14, r31
    2b4c:	f9 e1       	ldi	r31, 0x19	; 25
    2b4e:	ff 2e       	mov	r15, r31
    2b50:	f0 2d       	mov	r31, r0
    2b52:	00 e0       	ldi	r16, 0x00	; 0
    2b54:	20 e0       	ldi	r18, 0x00	; 0
    2b56:	30 e0       	ldi	r19, 0x00	; 0
    2b58:	40 ec       	ldi	r20, 0xC0	; 192
    2b5a:	50 e0       	ldi	r21, 0x00	; 0
    2b5c:	64 ec       	ldi	r22, 0xC4	; 196
    2b5e:	75 e0       	ldi	r23, 0x05	; 5
    2b60:	8d ec       	ldi	r24, 0xCD	; 205
    2b62:	90 e0       	ldi	r25, 0x00	; 0
    2b64:	ce de       	rcall	.-612    	; 0x2902 <xTaskCreate>
    2b66:	81 30       	cpi	r24, 0x01	; 1
    2b68:	19 f5       	brne	.+70     	; 0x2bb0 <vTaskStartScheduler+0x70>
    2b6a:	cc d6       	rcall	.+3480   	; 0x3904 <xTimerCreateTimerTask>
    2b6c:	81 30       	cpi	r24, 0x01	; 1
    2b6e:	01 f5       	brne	.+64     	; 0x2bb0 <vTaskStartScheduler+0x70>
    2b70:	f8 94       	cli
    2b72:	8f ef       	ldi	r24, 0xFF	; 255
    2b74:	9f ef       	ldi	r25, 0xFF	; 255
    2b76:	dc 01       	movw	r26, r24
    2b78:	80 93 3a 19 	sts	0x193A, r24	; 0x80193a <xNextTaskUnblockTime>
    2b7c:	90 93 3b 19 	sts	0x193B, r25	; 0x80193b <xNextTaskUnblockTime+0x1>
    2b80:	a0 93 3c 19 	sts	0x193C, r26	; 0x80193c <xNextTaskUnblockTime+0x2>
    2b84:	b0 93 3d 19 	sts	0x193D, r27	; 0x80193d <xNextTaskUnblockTime+0x3>
    2b88:	81 e0       	ldi	r24, 0x01	; 1
    2b8a:	80 93 42 19 	sts	0x1942, r24	; 0x801942 <xSchedulerRunning>
    2b8e:	10 92 44 19 	sts	0x1944, r1	; 0x801944 <xTickCount>
    2b92:	10 92 45 19 	sts	0x1945, r1	; 0x801945 <xTickCount+0x1>
    2b96:	10 92 46 19 	sts	0x1946, r1	; 0x801946 <xTickCount+0x2>
    2b9a:	10 92 47 19 	sts	0x1947, r1	; 0x801947 <xTickCount+0x3>
    2b9e:	e0 91 b1 19 	lds	r30, 0x19B1	; 0x8019b1 <pxCurrentTCB>
    2ba2:	f0 91 b2 19 	lds	r31, 0x19B2	; 0x8019b2 <pxCurrentTCB+0x1>
    2ba6:	81 a5       	ldd	r24, Z+41	; 0x29
    2ba8:	0e 94 84 08 	call	0x1108	; 0x1108 <task_switch_in>
    2bac:	0e 94 43 0c 	call	0x1886	; 0x1886 <xPortStartScheduler>
    2bb0:	0f 91       	pop	r16
    2bb2:	ff 90       	pop	r15
    2bb4:	ef 90       	pop	r14
    2bb6:	08 95       	ret

00002bb8 <vTaskSuspendAll>:
    2bb8:	80 91 37 19 	lds	r24, 0x1937	; 0x801937 <uxSchedulerSuspended>
    2bbc:	8f 5f       	subi	r24, 0xFF	; 255
    2bbe:	80 93 37 19 	sts	0x1937, r24	; 0x801937 <uxSchedulerSuspended>
    2bc2:	08 95       	ret

00002bc4 <xTaskGetTickCount>:
    2bc4:	0f b6       	in	r0, 0x3f	; 63
    2bc6:	f8 94       	cli
    2bc8:	0f 92       	push	r0
    2bca:	60 91 44 19 	lds	r22, 0x1944	; 0x801944 <xTickCount>
    2bce:	70 91 45 19 	lds	r23, 0x1945	; 0x801945 <xTickCount+0x1>
    2bd2:	80 91 46 19 	lds	r24, 0x1946	; 0x801946 <xTickCount+0x2>
    2bd6:	90 91 47 19 	lds	r25, 0x1947	; 0x801947 <xTickCount+0x3>
    2bda:	0f 90       	pop	r0
    2bdc:	0f be       	out	0x3f, r0	; 63
    2bde:	08 95       	ret

00002be0 <xTaskIncrementTick>:
    2be0:	9f 92       	push	r9
    2be2:	af 92       	push	r10
    2be4:	bf 92       	push	r11
    2be6:	cf 92       	push	r12
    2be8:	df 92       	push	r13
    2bea:	ef 92       	push	r14
    2bec:	ff 92       	push	r15
    2bee:	0f 93       	push	r16
    2bf0:	1f 93       	push	r17
    2bf2:	cf 93       	push	r28
    2bf4:	df 93       	push	r29
    2bf6:	80 91 37 19 	lds	r24, 0x1937	; 0x801937 <uxSchedulerSuspended>
    2bfa:	81 11       	cpse	r24, r1
    2bfc:	ad c0       	rjmp	.+346    	; 0x2d58 <xTaskIncrementTick+0x178>
    2bfe:	c0 90 44 19 	lds	r12, 0x1944	; 0x801944 <xTickCount>
    2c02:	d0 90 45 19 	lds	r13, 0x1945	; 0x801945 <xTickCount+0x1>
    2c06:	e0 90 46 19 	lds	r14, 0x1946	; 0x801946 <xTickCount+0x2>
    2c0a:	f0 90 47 19 	lds	r15, 0x1947	; 0x801947 <xTickCount+0x3>
    2c0e:	8f ef       	ldi	r24, 0xFF	; 255
    2c10:	c8 1a       	sub	r12, r24
    2c12:	d8 0a       	sbc	r13, r24
    2c14:	e8 0a       	sbc	r14, r24
    2c16:	f8 0a       	sbc	r15, r24
    2c18:	c0 92 44 19 	sts	0x1944, r12	; 0x801944 <xTickCount>
    2c1c:	d0 92 45 19 	sts	0x1945, r13	; 0x801945 <xTickCount+0x1>
    2c20:	e0 92 46 19 	sts	0x1946, r14	; 0x801946 <xTickCount+0x2>
    2c24:	f0 92 47 19 	sts	0x1947, r15	; 0x801947 <xTickCount+0x3>
    2c28:	c1 14       	cp	r12, r1
    2c2a:	d1 04       	cpc	r13, r1
    2c2c:	e1 04       	cpc	r14, r1
    2c2e:	f1 04       	cpc	r15, r1
    2c30:	b1 f4       	brne	.+44     	; 0x2c5e <xTaskIncrementTick+0x7e>
    2c32:	80 91 6d 19 	lds	r24, 0x196D	; 0x80196d <pxDelayedTaskList>
    2c36:	90 91 6e 19 	lds	r25, 0x196E	; 0x80196e <pxDelayedTaskList+0x1>
    2c3a:	20 91 6b 19 	lds	r18, 0x196B	; 0x80196b <pxOverflowDelayedTaskList>
    2c3e:	30 91 6c 19 	lds	r19, 0x196C	; 0x80196c <pxOverflowDelayedTaskList+0x1>
    2c42:	30 93 6e 19 	sts	0x196E, r19	; 0x80196e <pxDelayedTaskList+0x1>
    2c46:	20 93 6d 19 	sts	0x196D, r18	; 0x80196d <pxDelayedTaskList>
    2c4a:	90 93 6c 19 	sts	0x196C, r25	; 0x80196c <pxOverflowDelayedTaskList+0x1>
    2c4e:	80 93 6b 19 	sts	0x196B, r24	; 0x80196b <pxOverflowDelayedTaskList>
    2c52:	80 91 3f 19 	lds	r24, 0x193F	; 0x80193f <xNumOfOverflows>
    2c56:	8f 5f       	subi	r24, 0xFF	; 255
    2c58:	80 93 3f 19 	sts	0x193F, r24	; 0x80193f <xNumOfOverflows>
    2c5c:	b1 dd       	rcall	.-1182   	; 0x27c0 <prvResetNextTaskUnblockTime>
    2c5e:	80 91 3a 19 	lds	r24, 0x193A	; 0x80193a <xNextTaskUnblockTime>
    2c62:	90 91 3b 19 	lds	r25, 0x193B	; 0x80193b <xNextTaskUnblockTime+0x1>
    2c66:	a0 91 3c 19 	lds	r26, 0x193C	; 0x80193c <xNextTaskUnblockTime+0x2>
    2c6a:	b0 91 3d 19 	lds	r27, 0x193D	; 0x80193d <xNextTaskUnblockTime+0x3>
    2c6e:	c8 16       	cp	r12, r24
    2c70:	d9 06       	cpc	r13, r25
    2c72:	ea 06       	cpc	r14, r26
    2c74:	fb 06       	cpc	r15, r27
    2c76:	10 f4       	brcc	.+4      	; 0x2c7c <xTaskIncrementTick+0x9c>
    2c78:	b1 2c       	mov	r11, r1
    2c7a:	5d c0       	rjmp	.+186    	; 0x2d36 <xTaskIncrementTick+0x156>
    2c7c:	b1 2c       	mov	r11, r1
    2c7e:	0f 2e       	mov	r0, r31
    2c80:	fb e0       	ldi	r31, 0x0B	; 11
    2c82:	af 2e       	mov	r10, r31
    2c84:	f0 2d       	mov	r31, r0
    2c86:	99 24       	eor	r9, r9
    2c88:	93 94       	inc	r9
    2c8a:	e0 91 6d 19 	lds	r30, 0x196D	; 0x80196d <pxDelayedTaskList>
    2c8e:	f0 91 6e 19 	lds	r31, 0x196E	; 0x80196e <pxDelayedTaskList+0x1>
    2c92:	80 81       	ld	r24, Z
    2c94:	81 11       	cpse	r24, r1
    2c96:	0c c0       	rjmp	.+24     	; 0x2cb0 <xTaskIncrementTick+0xd0>
    2c98:	8f ef       	ldi	r24, 0xFF	; 255
    2c9a:	9f ef       	ldi	r25, 0xFF	; 255
    2c9c:	dc 01       	movw	r26, r24
    2c9e:	80 93 3a 19 	sts	0x193A, r24	; 0x80193a <xNextTaskUnblockTime>
    2ca2:	90 93 3b 19 	sts	0x193B, r25	; 0x80193b <xNextTaskUnblockTime+0x1>
    2ca6:	a0 93 3c 19 	sts	0x193C, r26	; 0x80193c <xNextTaskUnblockTime+0x2>
    2caa:	b0 93 3d 19 	sts	0x193D, r27	; 0x80193d <xNextTaskUnblockTime+0x3>
    2cae:	43 c0       	rjmp	.+134    	; 0x2d36 <xTaskIncrementTick+0x156>
    2cb0:	e0 91 6d 19 	lds	r30, 0x196D	; 0x80196d <pxDelayedTaskList>
    2cb4:	f0 91 6e 19 	lds	r31, 0x196E	; 0x80196e <pxDelayedTaskList+0x1>
    2cb8:	07 80       	ldd	r0, Z+7	; 0x07
    2cba:	f0 85       	ldd	r31, Z+8	; 0x08
    2cbc:	e0 2d       	mov	r30, r0
    2cbe:	c0 85       	ldd	r28, Z+8	; 0x08
    2cc0:	d1 85       	ldd	r29, Z+9	; 0x09
    2cc2:	8a 81       	ldd	r24, Y+2	; 0x02
    2cc4:	9b 81       	ldd	r25, Y+3	; 0x03
    2cc6:	ac 81       	ldd	r26, Y+4	; 0x04
    2cc8:	bd 81       	ldd	r27, Y+5	; 0x05
    2cca:	c8 16       	cp	r12, r24
    2ccc:	d9 06       	cpc	r13, r25
    2cce:	ea 06       	cpc	r14, r26
    2cd0:	fb 06       	cpc	r15, r27
    2cd2:	48 f4       	brcc	.+18     	; 0x2ce6 <xTaskIncrementTick+0x106>
    2cd4:	80 93 3a 19 	sts	0x193A, r24	; 0x80193a <xNextTaskUnblockTime>
    2cd8:	90 93 3b 19 	sts	0x193B, r25	; 0x80193b <xNextTaskUnblockTime+0x1>
    2cdc:	a0 93 3c 19 	sts	0x193C, r26	; 0x80193c <xNextTaskUnblockTime+0x2>
    2ce0:	b0 93 3d 19 	sts	0x193D, r27	; 0x80193d <xNextTaskUnblockTime+0x3>
    2ce4:	28 c0       	rjmp	.+80     	; 0x2d36 <xTaskIncrementTick+0x156>
    2ce6:	8e 01       	movw	r16, r28
    2ce8:	0e 5f       	subi	r16, 0xFE	; 254
    2cea:	1f 4f       	sbci	r17, 0xFF	; 255
    2cec:	c8 01       	movw	r24, r16
    2cee:	0e 94 aa 0b 	call	0x1754	; 0x1754 <uxListRemove>
    2cf2:	88 8d       	ldd	r24, Y+24	; 0x18
    2cf4:	99 8d       	ldd	r25, Y+25	; 0x19
    2cf6:	89 2b       	or	r24, r25
    2cf8:	21 f0       	breq	.+8      	; 0x2d02 <xTaskIncrementTick+0x122>
    2cfa:	ce 01       	movw	r24, r28
    2cfc:	0e 96       	adiw	r24, 0x0e	; 14
    2cfe:	0e 94 aa 0b 	call	0x1754	; 0x1754 <uxListRemove>
    2d02:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2d04:	90 91 43 19 	lds	r25, 0x1943	; 0x801943 <uxTopReadyPriority>
    2d08:	98 17       	cp	r25, r24
    2d0a:	10 f4       	brcc	.+4      	; 0x2d10 <xTaskIncrementTick+0x130>
    2d0c:	80 93 43 19 	sts	0x1943, r24	; 0x801943 <uxTopReadyPriority>
    2d10:	a8 9e       	mul	r10, r24
    2d12:	c0 01       	movw	r24, r0
    2d14:	11 24       	eor	r1, r1
    2d16:	b8 01       	movw	r22, r16
    2d18:	8b 57       	subi	r24, 0x7B	; 123
    2d1a:	96 4e       	sbci	r25, 0xE6	; 230
    2d1c:	0e 94 4c 0b 	call	0x1698	; 0x1698 <vListInsertEnd>
    2d20:	e0 91 b1 19 	lds	r30, 0x19B1	; 0x8019b1 <pxCurrentTCB>
    2d24:	f0 91 b2 19 	lds	r31, 0x19B2	; 0x8019b2 <pxCurrentTCB+0x1>
    2d28:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2d2a:	82 8d       	ldd	r24, Z+26	; 0x1a
    2d2c:	98 17       	cp	r25, r24
    2d2e:	08 f4       	brcc	.+2      	; 0x2d32 <xTaskIncrementTick+0x152>
    2d30:	ac cf       	rjmp	.-168    	; 0x2c8a <xTaskIncrementTick+0xaa>
    2d32:	b9 2c       	mov	r11, r9
    2d34:	aa cf       	rjmp	.-172    	; 0x2c8a <xTaskIncrementTick+0xaa>
    2d36:	e0 91 b1 19 	lds	r30, 0x19B1	; 0x8019b1 <pxCurrentTCB>
    2d3a:	f0 91 b2 19 	lds	r31, 0x19B2	; 0x8019b2 <pxCurrentTCB+0x1>
    2d3e:	e2 8d       	ldd	r30, Z+26	; 0x1a
    2d40:	8b e0       	ldi	r24, 0x0B	; 11
    2d42:	e8 9f       	mul	r30, r24
    2d44:	f0 01       	movw	r30, r0
    2d46:	11 24       	eor	r1, r1
    2d48:	eb 57       	subi	r30, 0x7B	; 123
    2d4a:	f6 4e       	sbci	r31, 0xE6	; 230
    2d4c:	80 81       	ld	r24, Z
    2d4e:	82 30       	cpi	r24, 0x02	; 2
    2d50:	48 f0       	brcs	.+18     	; 0x2d64 <xTaskIncrementTick+0x184>
    2d52:	bb 24       	eor	r11, r11
    2d54:	b3 94       	inc	r11
    2d56:	06 c0       	rjmp	.+12     	; 0x2d64 <xTaskIncrementTick+0x184>
    2d58:	80 91 41 19 	lds	r24, 0x1941	; 0x801941 <uxPendedTicks>
    2d5c:	8f 5f       	subi	r24, 0xFF	; 255
    2d5e:	80 93 41 19 	sts	0x1941, r24	; 0x801941 <uxPendedTicks>
    2d62:	b1 2c       	mov	r11, r1
    2d64:	80 91 40 19 	lds	r24, 0x1940	; 0x801940 <xYieldPending>
    2d68:	88 23       	and	r24, r24
    2d6a:	11 f0       	breq	.+4      	; 0x2d70 <xTaskIncrementTick+0x190>
    2d6c:	bb 24       	eor	r11, r11
    2d6e:	b3 94       	inc	r11
    2d70:	8b 2d       	mov	r24, r11
    2d72:	df 91       	pop	r29
    2d74:	cf 91       	pop	r28
    2d76:	1f 91       	pop	r17
    2d78:	0f 91       	pop	r16
    2d7a:	ff 90       	pop	r15
    2d7c:	ef 90       	pop	r14
    2d7e:	df 90       	pop	r13
    2d80:	cf 90       	pop	r12
    2d82:	bf 90       	pop	r11
    2d84:	af 90       	pop	r10
    2d86:	9f 90       	pop	r9
    2d88:	08 95       	ret

00002d8a <xTaskResumeAll>:
    2d8a:	cf 92       	push	r12
    2d8c:	df 92       	push	r13
    2d8e:	ef 92       	push	r14
    2d90:	ff 92       	push	r15
    2d92:	0f 93       	push	r16
    2d94:	1f 93       	push	r17
    2d96:	cf 93       	push	r28
    2d98:	df 93       	push	r29
    2d9a:	0f b6       	in	r0, 0x3f	; 63
    2d9c:	f8 94       	cli
    2d9e:	0f 92       	push	r0
    2da0:	80 91 37 19 	lds	r24, 0x1937	; 0x801937 <uxSchedulerSuspended>
    2da4:	81 50       	subi	r24, 0x01	; 1
    2da6:	80 93 37 19 	sts	0x1937, r24	; 0x801937 <uxSchedulerSuspended>
    2daa:	80 91 37 19 	lds	r24, 0x1937	; 0x801937 <uxSchedulerSuspended>
    2dae:	81 11       	cpse	r24, r1
    2db0:	5a c0       	rjmp	.+180    	; 0x2e66 <xTaskResumeAll+0xdc>
    2db2:	80 91 48 19 	lds	r24, 0x1948	; 0x801948 <uxCurrentNumberOfTasks>
    2db6:	81 11       	cpse	r24, r1
    2db8:	2c c0       	rjmp	.+88     	; 0x2e12 <xTaskResumeAll+0x88>
    2dba:	58 c0       	rjmp	.+176    	; 0x2e6c <xTaskResumeAll+0xe2>
    2dbc:	d7 01       	movw	r26, r14
    2dbe:	17 96       	adiw	r26, 0x07	; 7
    2dc0:	ed 91       	ld	r30, X+
    2dc2:	fc 91       	ld	r31, X
    2dc4:	18 97       	sbiw	r26, 0x08	; 8
    2dc6:	c0 85       	ldd	r28, Z+8	; 0x08
    2dc8:	d1 85       	ldd	r29, Z+9	; 0x09
    2dca:	ce 01       	movw	r24, r28
    2dcc:	0e 96       	adiw	r24, 0x0e	; 14
    2dce:	0e 94 aa 0b 	call	0x1754	; 0x1754 <uxListRemove>
    2dd2:	8e 01       	movw	r16, r28
    2dd4:	0e 5f       	subi	r16, 0xFE	; 254
    2dd6:	1f 4f       	sbci	r17, 0xFF	; 255
    2dd8:	c8 01       	movw	r24, r16
    2dda:	0e 94 aa 0b 	call	0x1754	; 0x1754 <uxListRemove>
    2dde:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2de0:	90 91 43 19 	lds	r25, 0x1943	; 0x801943 <uxTopReadyPriority>
    2de4:	98 17       	cp	r25, r24
    2de6:	10 f4       	brcc	.+4      	; 0x2dec <xTaskResumeAll+0x62>
    2de8:	80 93 43 19 	sts	0x1943, r24	; 0x801943 <uxTopReadyPriority>
    2dec:	d8 9e       	mul	r13, r24
    2dee:	c0 01       	movw	r24, r0
    2df0:	11 24       	eor	r1, r1
    2df2:	b8 01       	movw	r22, r16
    2df4:	8b 57       	subi	r24, 0x7B	; 123
    2df6:	96 4e       	sbci	r25, 0xE6	; 230
    2df8:	0e 94 4c 0b 	call	0x1698	; 0x1698 <vListInsertEnd>
    2dfc:	e0 91 b1 19 	lds	r30, 0x19B1	; 0x8019b1 <pxCurrentTCB>
    2e00:	f0 91 b2 19 	lds	r31, 0x19B2	; 0x8019b2 <pxCurrentTCB+0x1>
    2e04:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2e06:	82 8d       	ldd	r24, Z+26	; 0x1a
    2e08:	98 17       	cp	r25, r24
    2e0a:	88 f0       	brcs	.+34     	; 0x2e2e <xTaskResumeAll+0xa4>
    2e0c:	c0 92 40 19 	sts	0x1940, r12	; 0x801940 <xYieldPending>
    2e10:	0e c0       	rjmp	.+28     	; 0x2e2e <xTaskResumeAll+0xa4>
    2e12:	c0 e0       	ldi	r28, 0x00	; 0
    2e14:	d0 e0       	ldi	r29, 0x00	; 0
    2e16:	0f 2e       	mov	r0, r31
    2e18:	f0 e6       	ldi	r31, 0x60	; 96
    2e1a:	ef 2e       	mov	r14, r31
    2e1c:	f9 e1       	ldi	r31, 0x19	; 25
    2e1e:	ff 2e       	mov	r15, r31
    2e20:	f0 2d       	mov	r31, r0
    2e22:	0f 2e       	mov	r0, r31
    2e24:	fb e0       	ldi	r31, 0x0B	; 11
    2e26:	df 2e       	mov	r13, r31
    2e28:	f0 2d       	mov	r31, r0
    2e2a:	cc 24       	eor	r12, r12
    2e2c:	c3 94       	inc	r12
    2e2e:	f7 01       	movw	r30, r14
    2e30:	80 81       	ld	r24, Z
    2e32:	81 11       	cpse	r24, r1
    2e34:	c3 cf       	rjmp	.-122    	; 0x2dbc <xTaskResumeAll+0x32>
    2e36:	cd 2b       	or	r28, r29
    2e38:	09 f0       	breq	.+2      	; 0x2e3c <xTaskResumeAll+0xb2>
    2e3a:	c2 dc       	rcall	.-1660   	; 0x27c0 <prvResetNextTaskUnblockTime>
    2e3c:	c0 91 41 19 	lds	r28, 0x1941	; 0x801941 <uxPendedTicks>
    2e40:	cc 23       	and	r28, r28
    2e42:	49 f0       	breq	.+18     	; 0x2e56 <xTaskResumeAll+0xcc>
    2e44:	d1 e0       	ldi	r29, 0x01	; 1
    2e46:	cc de       	rcall	.-616    	; 0x2be0 <xTaskIncrementTick>
    2e48:	81 11       	cpse	r24, r1
    2e4a:	d0 93 40 19 	sts	0x1940, r29	; 0x801940 <xYieldPending>
    2e4e:	c1 50       	subi	r28, 0x01	; 1
    2e50:	d1 f7       	brne	.-12     	; 0x2e46 <xTaskResumeAll+0xbc>
    2e52:	10 92 41 19 	sts	0x1941, r1	; 0x801941 <uxPendedTicks>
    2e56:	80 91 40 19 	lds	r24, 0x1940	; 0x801940 <xYieldPending>
    2e5a:	88 23       	and	r24, r24
    2e5c:	31 f0       	breq	.+12     	; 0x2e6a <xTaskResumeAll+0xe0>
    2e5e:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <vPortYield>
    2e62:	81 e0       	ldi	r24, 0x01	; 1
    2e64:	03 c0       	rjmp	.+6      	; 0x2e6c <xTaskResumeAll+0xe2>
    2e66:	80 e0       	ldi	r24, 0x00	; 0
    2e68:	01 c0       	rjmp	.+2      	; 0x2e6c <xTaskResumeAll+0xe2>
    2e6a:	80 e0       	ldi	r24, 0x00	; 0
    2e6c:	0f 90       	pop	r0
    2e6e:	0f be       	out	0x3f, r0	; 63
    2e70:	df 91       	pop	r29
    2e72:	cf 91       	pop	r28
    2e74:	1f 91       	pop	r17
    2e76:	0f 91       	pop	r16
    2e78:	ff 90       	pop	r15
    2e7a:	ef 90       	pop	r14
    2e7c:	df 90       	pop	r13
    2e7e:	cf 90       	pop	r12
    2e80:	08 95       	ret

00002e82 <vTaskDelay>:
    2e82:	cf 92       	push	r12
    2e84:	df 92       	push	r13
    2e86:	ef 92       	push	r14
    2e88:	ff 92       	push	r15
    2e8a:	6b 01       	movw	r12, r22
    2e8c:	7c 01       	movw	r14, r24
    2e8e:	67 2b       	or	r22, r23
    2e90:	68 2b       	or	r22, r24
    2e92:	69 2b       	or	r22, r25
    2e94:	41 f0       	breq	.+16     	; 0x2ea6 <vTaskDelay+0x24>
    2e96:	90 de       	rcall	.-736    	; 0x2bb8 <vTaskSuspendAll>
    2e98:	40 e0       	ldi	r20, 0x00	; 0
    2e9a:	c7 01       	movw	r24, r14
    2e9c:	b6 01       	movw	r22, r12
    2e9e:	ba dc       	rcall	.-1676   	; 0x2814 <prvAddCurrentTaskToDelayedList>
    2ea0:	74 df       	rcall	.-280    	; 0x2d8a <xTaskResumeAll>
    2ea2:	81 11       	cpse	r24, r1
    2ea4:	02 c0       	rjmp	.+4      	; 0x2eaa <vTaskDelay+0x28>
    2ea6:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <vPortYield>
    2eaa:	ff 90       	pop	r15
    2eac:	ef 90       	pop	r14
    2eae:	df 90       	pop	r13
    2eb0:	cf 90       	pop	r12
    2eb2:	08 95       	ret

00002eb4 <vTaskSwitchContext>:
    2eb4:	80 91 37 19 	lds	r24, 0x1937	; 0x801937 <uxSchedulerSuspended>
    2eb8:	88 23       	and	r24, r24
    2eba:	21 f0       	breq	.+8      	; 0x2ec4 <vTaskSwitchContext+0x10>
    2ebc:	81 e0       	ldi	r24, 0x01	; 1
    2ebe:	80 93 40 19 	sts	0x1940, r24	; 0x801940 <xYieldPending>
    2ec2:	08 95       	ret
    2ec4:	10 92 40 19 	sts	0x1940, r1	; 0x801940 <xYieldPending>
    2ec8:	e0 91 b1 19 	lds	r30, 0x19B1	; 0x8019b1 <pxCurrentTCB>
    2ecc:	f0 91 b2 19 	lds	r31, 0x19B2	; 0x8019b2 <pxCurrentTCB+0x1>
    2ed0:	81 a5       	ldd	r24, Z+41	; 0x29
    2ed2:	0e 94 8e 08 	call	0x111c	; 0x111c <task_switch_out>
    2ed6:	a0 91 b1 19 	lds	r26, 0x19B1	; 0x8019b1 <pxCurrentTCB>
    2eda:	b0 91 b2 19 	lds	r27, 0x19B2	; 0x8019b2 <pxCurrentTCB+0x1>
    2ede:	e0 91 b1 19 	lds	r30, 0x19B1	; 0x8019b1 <pxCurrentTCB>
    2ee2:	f0 91 b2 19 	lds	r31, 0x19B2	; 0x8019b2 <pxCurrentTCB+0x1>
    2ee6:	2d 91       	ld	r18, X+
    2ee8:	3c 91       	ld	r19, X
    2eea:	83 8d       	ldd	r24, Z+27	; 0x1b
    2eec:	94 8d       	ldd	r25, Z+28	; 0x1c
    2eee:	82 17       	cp	r24, r18
    2ef0:	93 07       	cpc	r25, r19
    2ef2:	58 f0       	brcs	.+22     	; 0x2f0a <vTaskSwitchContext+0x56>
    2ef4:	60 91 b1 19 	lds	r22, 0x19B1	; 0x8019b1 <pxCurrentTCB>
    2ef8:	70 91 b2 19 	lds	r23, 0x19B2	; 0x8019b2 <pxCurrentTCB+0x1>
    2efc:	80 91 b1 19 	lds	r24, 0x19B1	; 0x8019b1 <pxCurrentTCB>
    2f00:	90 91 b2 19 	lds	r25, 0x19B2	; 0x8019b2 <pxCurrentTCB+0x1>
    2f04:	63 5e       	subi	r22, 0xE3	; 227
    2f06:	7f 4f       	sbci	r23, 0xFF	; 255
    2f08:	20 d6       	rcall	.+3136   	; 0x3b4a <vApplicationStackOverflowHook>
    2f0a:	80 91 43 19 	lds	r24, 0x1943	; 0x801943 <uxTopReadyPriority>
    2f0e:	28 2f       	mov	r18, r24
    2f10:	30 e0       	ldi	r19, 0x00	; 0
    2f12:	9b e0       	ldi	r25, 0x0B	; 11
    2f14:	89 9f       	mul	r24, r25
    2f16:	f0 01       	movw	r30, r0
    2f18:	11 24       	eor	r1, r1
    2f1a:	eb 57       	subi	r30, 0x7B	; 123
    2f1c:	f6 4e       	sbci	r31, 0xE6	; 230
    2f1e:	90 81       	ld	r25, Z
    2f20:	91 11       	cpse	r25, r1
    2f22:	0e c0       	rjmp	.+28     	; 0x2f40 <vTaskSwitchContext+0x8c>
    2f24:	4b e0       	ldi	r20, 0x0B	; 11
    2f26:	81 50       	subi	r24, 0x01	; 1
    2f28:	28 2f       	mov	r18, r24
    2f2a:	30 e0       	ldi	r19, 0x00	; 0
    2f2c:	42 9f       	mul	r20, r18
    2f2e:	f0 01       	movw	r30, r0
    2f30:	43 9f       	mul	r20, r19
    2f32:	f0 0d       	add	r31, r0
    2f34:	11 24       	eor	r1, r1
    2f36:	eb 57       	subi	r30, 0x7B	; 123
    2f38:	f6 4e       	sbci	r31, 0xE6	; 230
    2f3a:	90 81       	ld	r25, Z
    2f3c:	99 23       	and	r25, r25
    2f3e:	99 f3       	breq	.-26     	; 0x2f26 <vTaskSwitchContext+0x72>
    2f40:	9b e0       	ldi	r25, 0x0B	; 11
    2f42:	92 9f       	mul	r25, r18
    2f44:	a0 01       	movw	r20, r0
    2f46:	93 9f       	mul	r25, r19
    2f48:	50 0d       	add	r21, r0
    2f4a:	11 24       	eor	r1, r1
    2f4c:	da 01       	movw	r26, r20
    2f4e:	ab 57       	subi	r26, 0x7B	; 123
    2f50:	b6 4e       	sbci	r27, 0xE6	; 230
    2f52:	11 96       	adiw	r26, 0x01	; 1
    2f54:	ed 91       	ld	r30, X+
    2f56:	fc 91       	ld	r31, X
    2f58:	12 97       	sbiw	r26, 0x02	; 2
    2f5a:	04 80       	ldd	r0, Z+4	; 0x04
    2f5c:	f5 81       	ldd	r31, Z+5	; 0x05
    2f5e:	e0 2d       	mov	r30, r0
    2f60:	12 96       	adiw	r26, 0x02	; 2
    2f62:	fc 93       	st	X, r31
    2f64:	ee 93       	st	-X, r30
    2f66:	11 97       	sbiw	r26, 0x01	; 1
    2f68:	48 57       	subi	r20, 0x78	; 120
    2f6a:	56 4e       	sbci	r21, 0xE6	; 230
    2f6c:	e4 17       	cp	r30, r20
    2f6e:	f5 07       	cpc	r31, r21
    2f70:	29 f4       	brne	.+10     	; 0x2f7c <vTaskSwitchContext+0xc8>
    2f72:	44 81       	ldd	r20, Z+4	; 0x04
    2f74:	55 81       	ldd	r21, Z+5	; 0x05
    2f76:	fd 01       	movw	r30, r26
    2f78:	52 83       	std	Z+2, r21	; 0x02
    2f7a:	41 83       	std	Z+1, r20	; 0x01
    2f7c:	9b e0       	ldi	r25, 0x0B	; 11
    2f7e:	92 9f       	mul	r25, r18
    2f80:	f0 01       	movw	r30, r0
    2f82:	93 9f       	mul	r25, r19
    2f84:	f0 0d       	add	r31, r0
    2f86:	11 24       	eor	r1, r1
    2f88:	eb 57       	subi	r30, 0x7B	; 123
    2f8a:	f6 4e       	sbci	r31, 0xE6	; 230
    2f8c:	01 80       	ldd	r0, Z+1	; 0x01
    2f8e:	f2 81       	ldd	r31, Z+2	; 0x02
    2f90:	e0 2d       	mov	r30, r0
    2f92:	20 85       	ldd	r18, Z+8	; 0x08
    2f94:	31 85       	ldd	r19, Z+9	; 0x09
    2f96:	30 93 b2 19 	sts	0x19B2, r19	; 0x8019b2 <pxCurrentTCB+0x1>
    2f9a:	20 93 b1 19 	sts	0x19B1, r18	; 0x8019b1 <pxCurrentTCB>
    2f9e:	80 93 43 19 	sts	0x1943, r24	; 0x801943 <uxTopReadyPriority>
    2fa2:	e0 91 b1 19 	lds	r30, 0x19B1	; 0x8019b1 <pxCurrentTCB>
    2fa6:	f0 91 b2 19 	lds	r31, 0x19B2	; 0x8019b2 <pxCurrentTCB+0x1>
    2faa:	81 a5       	ldd	r24, Z+41	; 0x29
    2fac:	0c 94 84 08 	jmp	0x1108	; 0x1108 <task_switch_in>
    2fb0:	08 95       	ret

00002fb2 <vTaskPlaceOnEventList>:
    2fb2:	cf 92       	push	r12
    2fb4:	df 92       	push	r13
    2fb6:	ef 92       	push	r14
    2fb8:	ff 92       	push	r15
    2fba:	6a 01       	movw	r12, r20
    2fbc:	7b 01       	movw	r14, r22
    2fbe:	60 91 b1 19 	lds	r22, 0x19B1	; 0x8019b1 <pxCurrentTCB>
    2fc2:	70 91 b2 19 	lds	r23, 0x19B2	; 0x8019b2 <pxCurrentTCB+0x1>
    2fc6:	62 5f       	subi	r22, 0xF2	; 242
    2fc8:	7f 4f       	sbci	r23, 0xFF	; 255
    2fca:	0e 94 6d 0b 	call	0x16da	; 0x16da <vListInsert>
    2fce:	41 e0       	ldi	r20, 0x01	; 1
    2fd0:	c7 01       	movw	r24, r14
    2fd2:	b6 01       	movw	r22, r12
    2fd4:	1f dc       	rcall	.-1986   	; 0x2814 <prvAddCurrentTaskToDelayedList>
    2fd6:	ff 90       	pop	r15
    2fd8:	ef 90       	pop	r14
    2fda:	df 90       	pop	r13
    2fdc:	cf 90       	pop	r12
    2fde:	08 95       	ret

00002fe0 <vTaskPlaceOnUnorderedEventList>:
    2fe0:	cf 92       	push	r12
    2fe2:	df 92       	push	r13
    2fe4:	ef 92       	push	r14
    2fe6:	ff 92       	push	r15
    2fe8:	0f 93       	push	r16
    2fea:	1f 93       	push	r17
    2fec:	68 01       	movw	r12, r16
    2fee:	79 01       	movw	r14, r18
    2ff0:	e0 91 b1 19 	lds	r30, 0x19B1	; 0x8019b1 <pxCurrentTCB>
    2ff4:	f0 91 b2 19 	lds	r31, 0x19B2	; 0x8019b2 <pxCurrentTCB+0x1>
    2ff8:	70 68       	ori	r23, 0x80	; 128
    2ffa:	46 87       	std	Z+14, r20	; 0x0e
    2ffc:	57 87       	std	Z+15, r21	; 0x0f
    2ffe:	60 8b       	std	Z+16, r22	; 0x10
    3000:	71 8b       	std	Z+17, r23	; 0x11
    3002:	60 91 b1 19 	lds	r22, 0x19B1	; 0x8019b1 <pxCurrentTCB>
    3006:	70 91 b2 19 	lds	r23, 0x19B2	; 0x8019b2 <pxCurrentTCB+0x1>
    300a:	62 5f       	subi	r22, 0xF2	; 242
    300c:	7f 4f       	sbci	r23, 0xFF	; 255
    300e:	0e 94 4c 0b 	call	0x1698	; 0x1698 <vListInsertEnd>
    3012:	41 e0       	ldi	r20, 0x01	; 1
    3014:	c7 01       	movw	r24, r14
    3016:	b6 01       	movw	r22, r12
    3018:	fd db       	rcall	.-2054   	; 0x2814 <prvAddCurrentTaskToDelayedList>
    301a:	1f 91       	pop	r17
    301c:	0f 91       	pop	r16
    301e:	ff 90       	pop	r15
    3020:	ef 90       	pop	r14
    3022:	df 90       	pop	r13
    3024:	cf 90       	pop	r12
    3026:	08 95       	ret

00003028 <vTaskPlaceOnEventListRestricted>:
    3028:	cf 92       	push	r12
    302a:	df 92       	push	r13
    302c:	ef 92       	push	r14
    302e:	ff 92       	push	r15
    3030:	cf 93       	push	r28
    3032:	6a 01       	movw	r12, r20
    3034:	7b 01       	movw	r14, r22
    3036:	c2 2f       	mov	r28, r18
    3038:	60 91 b1 19 	lds	r22, 0x19B1	; 0x8019b1 <pxCurrentTCB>
    303c:	70 91 b2 19 	lds	r23, 0x19B2	; 0x8019b2 <pxCurrentTCB+0x1>
    3040:	62 5f       	subi	r22, 0xF2	; 242
    3042:	7f 4f       	sbci	r23, 0xFF	; 255
    3044:	0e 94 4c 0b 	call	0x1698	; 0x1698 <vListInsertEnd>
    3048:	cc 23       	and	r28, r28
    304a:	21 f0       	breq	.+8      	; 0x3054 <vTaskPlaceOnEventListRestricted+0x2c>
    304c:	cc 24       	eor	r12, r12
    304e:	ca 94       	dec	r12
    3050:	dc 2c       	mov	r13, r12
    3052:	76 01       	movw	r14, r12
    3054:	4c 2f       	mov	r20, r28
    3056:	c7 01       	movw	r24, r14
    3058:	b6 01       	movw	r22, r12
    305a:	dc db       	rcall	.-2120   	; 0x2814 <prvAddCurrentTaskToDelayedList>
    305c:	cf 91       	pop	r28
    305e:	ff 90       	pop	r15
    3060:	ef 90       	pop	r14
    3062:	df 90       	pop	r13
    3064:	cf 90       	pop	r12
    3066:	08 95       	ret

00003068 <xTaskRemoveFromEventList>:
    3068:	0f 93       	push	r16
    306a:	1f 93       	push	r17
    306c:	cf 93       	push	r28
    306e:	df 93       	push	r29
    3070:	dc 01       	movw	r26, r24
    3072:	17 96       	adiw	r26, 0x07	; 7
    3074:	ed 91       	ld	r30, X+
    3076:	fc 91       	ld	r31, X
    3078:	18 97       	sbiw	r26, 0x08	; 8
    307a:	c0 85       	ldd	r28, Z+8	; 0x08
    307c:	d1 85       	ldd	r29, Z+9	; 0x09
    307e:	8e 01       	movw	r16, r28
    3080:	02 5f       	subi	r16, 0xF2	; 242
    3082:	1f 4f       	sbci	r17, 0xFF	; 255
    3084:	c8 01       	movw	r24, r16
    3086:	0e 94 aa 0b 	call	0x1754	; 0x1754 <uxListRemove>
    308a:	80 91 37 19 	lds	r24, 0x1937	; 0x801937 <uxSchedulerSuspended>
    308e:	81 11       	cpse	r24, r1
    3090:	16 c0       	rjmp	.+44     	; 0x30be <xTaskRemoveFromEventList+0x56>
    3092:	0c 50       	subi	r16, 0x0C	; 12
    3094:	11 09       	sbc	r17, r1
    3096:	c8 01       	movw	r24, r16
    3098:	0e 94 aa 0b 	call	0x1754	; 0x1754 <uxListRemove>
    309c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    309e:	90 91 43 19 	lds	r25, 0x1943	; 0x801943 <uxTopReadyPriority>
    30a2:	98 17       	cp	r25, r24
    30a4:	10 f4       	brcc	.+4      	; 0x30aa <xTaskRemoveFromEventList+0x42>
    30a6:	80 93 43 19 	sts	0x1943, r24	; 0x801943 <uxTopReadyPriority>
    30aa:	bb e0       	ldi	r27, 0x0B	; 11
    30ac:	8b 9f       	mul	r24, r27
    30ae:	c0 01       	movw	r24, r0
    30b0:	11 24       	eor	r1, r1
    30b2:	b8 01       	movw	r22, r16
    30b4:	8b 57       	subi	r24, 0x7B	; 123
    30b6:	96 4e       	sbci	r25, 0xE6	; 230
    30b8:	0e 94 4c 0b 	call	0x1698	; 0x1698 <vListInsertEnd>
    30bc:	05 c0       	rjmp	.+10     	; 0x30c8 <xTaskRemoveFromEventList+0x60>
    30be:	b8 01       	movw	r22, r16
    30c0:	80 e6       	ldi	r24, 0x60	; 96
    30c2:	99 e1       	ldi	r25, 0x19	; 25
    30c4:	0e 94 4c 0b 	call	0x1698	; 0x1698 <vListInsertEnd>
    30c8:	e0 91 b1 19 	lds	r30, 0x19B1	; 0x8019b1 <pxCurrentTCB>
    30cc:	f0 91 b2 19 	lds	r31, 0x19B2	; 0x8019b2 <pxCurrentTCB+0x1>
    30d0:	9a 8d       	ldd	r25, Y+26	; 0x1a
    30d2:	82 8d       	ldd	r24, Z+26	; 0x1a
    30d4:	89 17       	cp	r24, r25
    30d6:	20 f4       	brcc	.+8      	; 0x30e0 <xTaskRemoveFromEventList+0x78>
    30d8:	81 e0       	ldi	r24, 0x01	; 1
    30da:	80 93 40 19 	sts	0x1940, r24	; 0x801940 <xYieldPending>
    30de:	01 c0       	rjmp	.+2      	; 0x30e2 <xTaskRemoveFromEventList+0x7a>
    30e0:	80 e0       	ldi	r24, 0x00	; 0
    30e2:	df 91       	pop	r29
    30e4:	cf 91       	pop	r28
    30e6:	1f 91       	pop	r17
    30e8:	0f 91       	pop	r16
    30ea:	08 95       	ret

000030ec <vTaskRemoveFromUnorderedEventList>:
    30ec:	0f 93       	push	r16
    30ee:	1f 93       	push	r17
    30f0:	cf 93       	push	r28
    30f2:	df 93       	push	r29
    30f4:	70 68       	ori	r23, 0x80	; 128
    30f6:	fc 01       	movw	r30, r24
    30f8:	40 83       	st	Z, r20
    30fa:	51 83       	std	Z+1, r21	; 0x01
    30fc:	62 83       	std	Z+2, r22	; 0x02
    30fe:	73 83       	std	Z+3, r23	; 0x03
    3100:	c0 85       	ldd	r28, Z+8	; 0x08
    3102:	d1 85       	ldd	r29, Z+9	; 0x09
    3104:	0e 94 aa 0b 	call	0x1754	; 0x1754 <uxListRemove>
    3108:	8e 01       	movw	r16, r28
    310a:	0e 5f       	subi	r16, 0xFE	; 254
    310c:	1f 4f       	sbci	r17, 0xFF	; 255
    310e:	c8 01       	movw	r24, r16
    3110:	0e 94 aa 0b 	call	0x1754	; 0x1754 <uxListRemove>
    3114:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3116:	90 91 43 19 	lds	r25, 0x1943	; 0x801943 <uxTopReadyPriority>
    311a:	98 17       	cp	r25, r24
    311c:	10 f4       	brcc	.+4      	; 0x3122 <vTaskRemoveFromUnorderedEventList+0x36>
    311e:	80 93 43 19 	sts	0x1943, r24	; 0x801943 <uxTopReadyPriority>
    3122:	fb e0       	ldi	r31, 0x0B	; 11
    3124:	8f 9f       	mul	r24, r31
    3126:	c0 01       	movw	r24, r0
    3128:	11 24       	eor	r1, r1
    312a:	b8 01       	movw	r22, r16
    312c:	8b 57       	subi	r24, 0x7B	; 123
    312e:	96 4e       	sbci	r25, 0xE6	; 230
    3130:	0e 94 4c 0b 	call	0x1698	; 0x1698 <vListInsertEnd>
    3134:	e0 91 b1 19 	lds	r30, 0x19B1	; 0x8019b1 <pxCurrentTCB>
    3138:	f0 91 b2 19 	lds	r31, 0x19B2	; 0x8019b2 <pxCurrentTCB+0x1>
    313c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    313e:	82 8d       	ldd	r24, Z+26	; 0x1a
    3140:	89 17       	cp	r24, r25
    3142:	18 f4       	brcc	.+6      	; 0x314a <vTaskRemoveFromUnorderedEventList+0x5e>
    3144:	81 e0       	ldi	r24, 0x01	; 1
    3146:	80 93 40 19 	sts	0x1940, r24	; 0x801940 <xYieldPending>
    314a:	df 91       	pop	r29
    314c:	cf 91       	pop	r28
    314e:	1f 91       	pop	r17
    3150:	0f 91       	pop	r16
    3152:	08 95       	ret

00003154 <vTaskSetTimeOutState>:
    3154:	0f b6       	in	r0, 0x3f	; 63
    3156:	f8 94       	cli
    3158:	0f 92       	push	r0
    315a:	20 91 3f 19 	lds	r18, 0x193F	; 0x80193f <xNumOfOverflows>
    315e:	fc 01       	movw	r30, r24
    3160:	20 83       	st	Z, r18
    3162:	40 91 44 19 	lds	r20, 0x1944	; 0x801944 <xTickCount>
    3166:	50 91 45 19 	lds	r21, 0x1945	; 0x801945 <xTickCount+0x1>
    316a:	60 91 46 19 	lds	r22, 0x1946	; 0x801946 <xTickCount+0x2>
    316e:	70 91 47 19 	lds	r23, 0x1947	; 0x801947 <xTickCount+0x3>
    3172:	41 83       	std	Z+1, r20	; 0x01
    3174:	52 83       	std	Z+2, r21	; 0x02
    3176:	63 83       	std	Z+3, r22	; 0x03
    3178:	74 83       	std	Z+4, r23	; 0x04
    317a:	0f 90       	pop	r0
    317c:	0f be       	out	0x3f, r0	; 63
    317e:	08 95       	ret

00003180 <vTaskInternalSetTimeOutState>:
    3180:	20 91 3f 19 	lds	r18, 0x193F	; 0x80193f <xNumOfOverflows>
    3184:	fc 01       	movw	r30, r24
    3186:	20 83       	st	Z, r18
    3188:	40 91 44 19 	lds	r20, 0x1944	; 0x801944 <xTickCount>
    318c:	50 91 45 19 	lds	r21, 0x1945	; 0x801945 <xTickCount+0x1>
    3190:	60 91 46 19 	lds	r22, 0x1946	; 0x801946 <xTickCount+0x2>
    3194:	70 91 47 19 	lds	r23, 0x1947	; 0x801947 <xTickCount+0x3>
    3198:	41 83       	std	Z+1, r20	; 0x01
    319a:	52 83       	std	Z+2, r21	; 0x02
    319c:	63 83       	std	Z+3, r22	; 0x03
    319e:	74 83       	std	Z+4, r23	; 0x04
    31a0:	08 95       	ret

000031a2 <xTaskCheckForTimeOut>:
    31a2:	cf 92       	push	r12
    31a4:	df 92       	push	r13
    31a6:	ef 92       	push	r14
    31a8:	ff 92       	push	r15
    31aa:	0f 93       	push	r16
    31ac:	1f 93       	push	r17
    31ae:	cf 93       	push	r28
    31b0:	df 93       	push	r29
    31b2:	fb 01       	movw	r30, r22
    31b4:	0f b6       	in	r0, 0x3f	; 63
    31b6:	f8 94       	cli
    31b8:	0f 92       	push	r0
    31ba:	40 91 44 19 	lds	r20, 0x1944	; 0x801944 <xTickCount>
    31be:	50 91 45 19 	lds	r21, 0x1945	; 0x801945 <xTickCount+0x1>
    31c2:	60 91 46 19 	lds	r22, 0x1946	; 0x801946 <xTickCount+0x2>
    31c6:	70 91 47 19 	lds	r23, 0x1947	; 0x801947 <xTickCount+0x3>
    31ca:	00 81       	ld	r16, Z
    31cc:	11 81       	ldd	r17, Z+1	; 0x01
    31ce:	22 81       	ldd	r18, Z+2	; 0x02
    31d0:	33 81       	ldd	r19, Z+3	; 0x03
    31d2:	0f 3f       	cpi	r16, 0xFF	; 255
    31d4:	af ef       	ldi	r26, 0xFF	; 255
    31d6:	1a 07       	cpc	r17, r26
    31d8:	2a 07       	cpc	r18, r26
    31da:	3a 07       	cpc	r19, r26
    31dc:	49 f1       	breq	.+82     	; 0x3230 <xTaskCheckForTimeOut+0x8e>
    31de:	ec 01       	movw	r28, r24
    31e0:	c9 80       	ldd	r12, Y+1	; 0x01
    31e2:	da 80       	ldd	r13, Y+2	; 0x02
    31e4:	eb 80       	ldd	r14, Y+3	; 0x03
    31e6:	fc 80       	ldd	r15, Y+4	; 0x04
    31e8:	a0 91 3f 19 	lds	r26, 0x193F	; 0x80193f <xNumOfOverflows>
    31ec:	b8 81       	ld	r27, Y
    31ee:	ba 17       	cp	r27, r26
    31f0:	29 f0       	breq	.+10     	; 0x31fc <xTaskCheckForTimeOut+0x5a>
    31f2:	4c 15       	cp	r20, r12
    31f4:	5d 05       	cpc	r21, r13
    31f6:	6e 05       	cpc	r22, r14
    31f8:	7f 05       	cpc	r23, r15
    31fa:	e0 f4       	brcc	.+56     	; 0x3234 <xTaskCheckForTimeOut+0x92>
    31fc:	4c 19       	sub	r20, r12
    31fe:	5d 09       	sbc	r21, r13
    3200:	6e 09       	sbc	r22, r14
    3202:	7f 09       	sbc	r23, r15
    3204:	40 17       	cp	r20, r16
    3206:	51 07       	cpc	r21, r17
    3208:	62 07       	cpc	r22, r18
    320a:	73 07       	cpc	r23, r19
    320c:	58 f4       	brcc	.+22     	; 0x3224 <xTaskCheckForTimeOut+0x82>
    320e:	04 1b       	sub	r16, r20
    3210:	15 0b       	sbc	r17, r21
    3212:	26 0b       	sbc	r18, r22
    3214:	37 0b       	sbc	r19, r23
    3216:	00 83       	st	Z, r16
    3218:	11 83       	std	Z+1, r17	; 0x01
    321a:	22 83       	std	Z+2, r18	; 0x02
    321c:	33 83       	std	Z+3, r19	; 0x03
    321e:	b0 df       	rcall	.-160    	; 0x3180 <vTaskInternalSetTimeOutState>
    3220:	80 e0       	ldi	r24, 0x00	; 0
    3222:	09 c0       	rjmp	.+18     	; 0x3236 <xTaskCheckForTimeOut+0x94>
    3224:	10 82       	st	Z, r1
    3226:	11 82       	std	Z+1, r1	; 0x01
    3228:	12 82       	std	Z+2, r1	; 0x02
    322a:	13 82       	std	Z+3, r1	; 0x03
    322c:	81 e0       	ldi	r24, 0x01	; 1
    322e:	03 c0       	rjmp	.+6      	; 0x3236 <xTaskCheckForTimeOut+0x94>
    3230:	80 e0       	ldi	r24, 0x00	; 0
    3232:	01 c0       	rjmp	.+2      	; 0x3236 <xTaskCheckForTimeOut+0x94>
    3234:	81 e0       	ldi	r24, 0x01	; 1
    3236:	0f 90       	pop	r0
    3238:	0f be       	out	0x3f, r0	; 63
    323a:	df 91       	pop	r29
    323c:	cf 91       	pop	r28
    323e:	1f 91       	pop	r17
    3240:	0f 91       	pop	r16
    3242:	ff 90       	pop	r15
    3244:	ef 90       	pop	r14
    3246:	df 90       	pop	r13
    3248:	cf 90       	pop	r12
    324a:	08 95       	ret

0000324c <vTaskMissedYield>:
    324c:	81 e0       	ldi	r24, 0x01	; 1
    324e:	80 93 40 19 	sts	0x1940, r24	; 0x801940 <xYieldPending>
    3252:	08 95       	ret

00003254 <xTaskGetCurrentTaskHandle>:
    3254:	80 91 b1 19 	lds	r24, 0x19B1	; 0x8019b1 <pxCurrentTCB>
    3258:	90 91 b2 19 	lds	r25, 0x19B2	; 0x8019b2 <pxCurrentTCB+0x1>
    325c:	08 95       	ret

0000325e <xTaskGetSchedulerState>:
    325e:	80 91 42 19 	lds	r24, 0x1942	; 0x801942 <xSchedulerRunning>
    3262:	88 23       	and	r24, r24
    3264:	31 f0       	breq	.+12     	; 0x3272 <xTaskGetSchedulerState+0x14>
    3266:	80 91 37 19 	lds	r24, 0x1937	; 0x801937 <uxSchedulerSuspended>
    326a:	88 23       	and	r24, r24
    326c:	21 f0       	breq	.+8      	; 0x3276 <xTaskGetSchedulerState+0x18>
    326e:	80 e0       	ldi	r24, 0x00	; 0
    3270:	08 95       	ret
    3272:	81 e0       	ldi	r24, 0x01	; 1
    3274:	08 95       	ret
    3276:	82 e0       	ldi	r24, 0x02	; 2
    3278:	08 95       	ret

0000327a <xTaskPriorityInherit>:
    327a:	0f 93       	push	r16
    327c:	1f 93       	push	r17
    327e:	cf 93       	push	r28
    3280:	df 93       	push	r29
    3282:	fc 01       	movw	r30, r24
    3284:	89 2b       	or	r24, r25
    3286:	09 f4       	brne	.+2      	; 0x328a <xTaskPriorityInherit+0x10>
    3288:	60 c0       	rjmp	.+192    	; 0x334a <xTaskPriorityInherit+0xd0>
    328a:	82 8d       	ldd	r24, Z+26	; 0x1a
    328c:	a0 91 b1 19 	lds	r26, 0x19B1	; 0x8019b1 <pxCurrentTCB>
    3290:	b0 91 b2 19 	lds	r27, 0x19B2	; 0x8019b2 <pxCurrentTCB+0x1>
    3294:	5a 96       	adiw	r26, 0x1a	; 26
    3296:	9c 91       	ld	r25, X
    3298:	89 17       	cp	r24, r25
    329a:	08 f0       	brcs	.+2      	; 0x329e <xTaskPriorityInherit+0x24>
    329c:	4a c0       	rjmp	.+148    	; 0x3332 <xTaskPriorityInherit+0xb8>
    329e:	46 85       	ldd	r20, Z+14	; 0x0e
    32a0:	57 85       	ldd	r21, Z+15	; 0x0f
    32a2:	60 89       	ldd	r22, Z+16	; 0x10
    32a4:	71 89       	ldd	r23, Z+17	; 0x11
    32a6:	77 23       	and	r23, r23
    32a8:	94 f0       	brlt	.+36     	; 0x32ce <xTaskPriorityInherit+0x54>
    32aa:	a0 91 b1 19 	lds	r26, 0x19B1	; 0x8019b1 <pxCurrentTCB>
    32ae:	b0 91 b2 19 	lds	r27, 0x19B2	; 0x8019b2 <pxCurrentTCB+0x1>
    32b2:	5a 96       	adiw	r26, 0x1a	; 26
    32b4:	9c 91       	ld	r25, X
    32b6:	44 e0       	ldi	r20, 0x04	; 4
    32b8:	50 e0       	ldi	r21, 0x00	; 0
    32ba:	60 e0       	ldi	r22, 0x00	; 0
    32bc:	70 e0       	ldi	r23, 0x00	; 0
    32be:	49 1b       	sub	r20, r25
    32c0:	51 09       	sbc	r21, r1
    32c2:	61 09       	sbc	r22, r1
    32c4:	71 09       	sbc	r23, r1
    32c6:	46 87       	std	Z+14, r20	; 0x0e
    32c8:	57 87       	std	Z+15, r21	; 0x0f
    32ca:	60 8b       	std	Z+16, r22	; 0x10
    32cc:	71 8b       	std	Z+17, r23	; 0x11
    32ce:	2b e0       	ldi	r18, 0x0B	; 11
    32d0:	82 9f       	mul	r24, r18
    32d2:	c0 01       	movw	r24, r0
    32d4:	11 24       	eor	r1, r1
    32d6:	8b 57       	subi	r24, 0x7B	; 123
    32d8:	96 4e       	sbci	r25, 0xE6	; 230
    32da:	24 85       	ldd	r18, Z+12	; 0x0c
    32dc:	35 85       	ldd	r19, Z+13	; 0x0d
    32de:	28 17       	cp	r18, r24
    32e0:	39 07       	cpc	r19, r25
    32e2:	f1 f4       	brne	.+60     	; 0x3320 <xTaskPriorityInherit+0xa6>
    32e4:	8f 01       	movw	r16, r30
    32e6:	ef 01       	movw	r28, r30
    32e8:	22 96       	adiw	r28, 0x02	; 2
    32ea:	ce 01       	movw	r24, r28
    32ec:	0e 94 aa 0b 	call	0x1754	; 0x1754 <uxListRemove>
    32f0:	e0 91 b1 19 	lds	r30, 0x19B1	; 0x8019b1 <pxCurrentTCB>
    32f4:	f0 91 b2 19 	lds	r31, 0x19B2	; 0x8019b2 <pxCurrentTCB+0x1>
    32f8:	82 8d       	ldd	r24, Z+26	; 0x1a
    32fa:	f8 01       	movw	r30, r16
    32fc:	82 8f       	std	Z+26, r24	; 0x1a
    32fe:	90 91 43 19 	lds	r25, 0x1943	; 0x801943 <uxTopReadyPriority>
    3302:	98 17       	cp	r25, r24
    3304:	10 f4       	brcc	.+4      	; 0x330a <xTaskPriorityInherit+0x90>
    3306:	80 93 43 19 	sts	0x1943, r24	; 0x801943 <uxTopReadyPriority>
    330a:	fb e0       	ldi	r31, 0x0B	; 11
    330c:	8f 9f       	mul	r24, r31
    330e:	c0 01       	movw	r24, r0
    3310:	11 24       	eor	r1, r1
    3312:	be 01       	movw	r22, r28
    3314:	8b 57       	subi	r24, 0x7B	; 123
    3316:	96 4e       	sbci	r25, 0xE6	; 230
    3318:	0e 94 4c 0b 	call	0x1698	; 0x1698 <vListInsertEnd>
    331c:	81 e0       	ldi	r24, 0x01	; 1
    331e:	16 c0       	rjmp	.+44     	; 0x334c <xTaskPriorityInherit+0xd2>
    3320:	a0 91 b1 19 	lds	r26, 0x19B1	; 0x8019b1 <pxCurrentTCB>
    3324:	b0 91 b2 19 	lds	r27, 0x19B2	; 0x8019b2 <pxCurrentTCB+0x1>
    3328:	5a 96       	adiw	r26, 0x1a	; 26
    332a:	8c 91       	ld	r24, X
    332c:	82 8f       	std	Z+26, r24	; 0x1a
    332e:	81 e0       	ldi	r24, 0x01	; 1
    3330:	0d c0       	rjmp	.+26     	; 0x334c <xTaskPriorityInherit+0xd2>
    3332:	a0 91 b1 19 	lds	r26, 0x19B1	; 0x8019b1 <pxCurrentTCB>
    3336:	b0 91 b2 19 	lds	r27, 0x19B2	; 0x8019b2 <pxCurrentTCB+0x1>
    333a:	81 e0       	ldi	r24, 0x01	; 1
    333c:	27 a1       	ldd	r18, Z+39	; 0x27
    333e:	5a 96       	adiw	r26, 0x1a	; 26
    3340:	9c 91       	ld	r25, X
    3342:	29 17       	cp	r18, r25
    3344:	18 f0       	brcs	.+6      	; 0x334c <xTaskPriorityInherit+0xd2>
    3346:	80 e0       	ldi	r24, 0x00	; 0
    3348:	01 c0       	rjmp	.+2      	; 0x334c <xTaskPriorityInherit+0xd2>
    334a:	80 e0       	ldi	r24, 0x00	; 0
    334c:	df 91       	pop	r29
    334e:	cf 91       	pop	r28
    3350:	1f 91       	pop	r17
    3352:	0f 91       	pop	r16
    3354:	08 95       	ret

00003356 <xTaskPriorityDisinherit>:
    3356:	0f 93       	push	r16
    3358:	1f 93       	push	r17
    335a:	cf 93       	push	r28
    335c:	df 93       	push	r29
    335e:	fc 01       	movw	r30, r24
    3360:	89 2b       	or	r24, r25
    3362:	79 f1       	breq	.+94     	; 0x33c2 <xTaskPriorityDisinherit+0x6c>
    3364:	80 a5       	ldd	r24, Z+40	; 0x28
    3366:	81 50       	subi	r24, 0x01	; 1
    3368:	80 a7       	std	Z+40, r24	; 0x28
    336a:	22 8d       	ldd	r18, Z+26	; 0x1a
    336c:	97 a1       	ldd	r25, Z+39	; 0x27
    336e:	29 17       	cp	r18, r25
    3370:	51 f1       	breq	.+84     	; 0x33c6 <xTaskPriorityDisinherit+0x70>
    3372:	81 11       	cpse	r24, r1
    3374:	2a c0       	rjmp	.+84     	; 0x33ca <xTaskPriorityDisinherit+0x74>
    3376:	ef 01       	movw	r28, r30
    3378:	8f 01       	movw	r16, r30
    337a:	0e 5f       	subi	r16, 0xFE	; 254
    337c:	1f 4f       	sbci	r17, 0xFF	; 255
    337e:	c8 01       	movw	r24, r16
    3380:	0e 94 aa 0b 	call	0x1754	; 0x1754 <uxListRemove>
    3384:	8f a1       	ldd	r24, Y+39	; 0x27
    3386:	8a 8f       	std	Y+26, r24	; 0x1a
    3388:	44 e0       	ldi	r20, 0x04	; 4
    338a:	50 e0       	ldi	r21, 0x00	; 0
    338c:	60 e0       	ldi	r22, 0x00	; 0
    338e:	70 e0       	ldi	r23, 0x00	; 0
    3390:	48 1b       	sub	r20, r24
    3392:	51 09       	sbc	r21, r1
    3394:	61 09       	sbc	r22, r1
    3396:	71 09       	sbc	r23, r1
    3398:	4e 87       	std	Y+14, r20	; 0x0e
    339a:	5f 87       	std	Y+15, r21	; 0x0f
    339c:	68 8b       	std	Y+16, r22	; 0x10
    339e:	79 8b       	std	Y+17, r23	; 0x11
    33a0:	90 91 43 19 	lds	r25, 0x1943	; 0x801943 <uxTopReadyPriority>
    33a4:	98 17       	cp	r25, r24
    33a6:	10 f4       	brcc	.+4      	; 0x33ac <xTaskPriorityDisinherit+0x56>
    33a8:	80 93 43 19 	sts	0x1943, r24	; 0x801943 <uxTopReadyPriority>
    33ac:	2b e0       	ldi	r18, 0x0B	; 11
    33ae:	82 9f       	mul	r24, r18
    33b0:	c0 01       	movw	r24, r0
    33b2:	11 24       	eor	r1, r1
    33b4:	b8 01       	movw	r22, r16
    33b6:	8b 57       	subi	r24, 0x7B	; 123
    33b8:	96 4e       	sbci	r25, 0xE6	; 230
    33ba:	0e 94 4c 0b 	call	0x1698	; 0x1698 <vListInsertEnd>
    33be:	81 e0       	ldi	r24, 0x01	; 1
    33c0:	05 c0       	rjmp	.+10     	; 0x33cc <xTaskPriorityDisinherit+0x76>
    33c2:	80 e0       	ldi	r24, 0x00	; 0
    33c4:	03 c0       	rjmp	.+6      	; 0x33cc <xTaskPriorityDisinherit+0x76>
    33c6:	80 e0       	ldi	r24, 0x00	; 0
    33c8:	01 c0       	rjmp	.+2      	; 0x33cc <xTaskPriorityDisinherit+0x76>
    33ca:	80 e0       	ldi	r24, 0x00	; 0
    33cc:	df 91       	pop	r29
    33ce:	cf 91       	pop	r28
    33d0:	1f 91       	pop	r17
    33d2:	0f 91       	pop	r16
    33d4:	08 95       	ret

000033d6 <vTaskPriorityDisinheritAfterTimeout>:
    33d6:	0f 93       	push	r16
    33d8:	1f 93       	push	r17
    33da:	cf 93       	push	r28
    33dc:	df 93       	push	r29
    33de:	fc 01       	movw	r30, r24
    33e0:	89 2b       	or	r24, r25
    33e2:	09 f4       	brne	.+2      	; 0x33e6 <vTaskPriorityDisinheritAfterTimeout+0x10>
    33e4:	3f c0       	rjmp	.+126    	; 0x3464 <vTaskPriorityDisinheritAfterTimeout+0x8e>
    33e6:	87 a1       	ldd	r24, Z+39	; 0x27
    33e8:	86 17       	cp	r24, r22
    33ea:	08 f4       	brcc	.+2      	; 0x33ee <vTaskPriorityDisinheritAfterTimeout+0x18>
    33ec:	86 2f       	mov	r24, r22
    33ee:	92 8d       	ldd	r25, Z+26	; 0x1a
    33f0:	98 17       	cp	r25, r24
    33f2:	c1 f1       	breq	.+112    	; 0x3464 <vTaskPriorityDisinheritAfterTimeout+0x8e>
    33f4:	20 a5       	ldd	r18, Z+40	; 0x28
    33f6:	21 30       	cpi	r18, 0x01	; 1
    33f8:	a9 f5       	brne	.+106    	; 0x3464 <vTaskPriorityDisinheritAfterTimeout+0x8e>
    33fa:	82 8f       	std	Z+26, r24	; 0x1a
    33fc:	46 85       	ldd	r20, Z+14	; 0x0e
    33fe:	57 85       	ldd	r21, Z+15	; 0x0f
    3400:	60 89       	ldd	r22, Z+16	; 0x10
    3402:	71 89       	ldd	r23, Z+17	; 0x11
    3404:	77 23       	and	r23, r23
    3406:	64 f0       	brlt	.+24     	; 0x3420 <vTaskPriorityDisinheritAfterTimeout+0x4a>
    3408:	44 e0       	ldi	r20, 0x04	; 4
    340a:	50 e0       	ldi	r21, 0x00	; 0
    340c:	60 e0       	ldi	r22, 0x00	; 0
    340e:	70 e0       	ldi	r23, 0x00	; 0
    3410:	48 1b       	sub	r20, r24
    3412:	51 09       	sbc	r21, r1
    3414:	61 09       	sbc	r22, r1
    3416:	71 09       	sbc	r23, r1
    3418:	46 87       	std	Z+14, r20	; 0x0e
    341a:	57 87       	std	Z+15, r21	; 0x0f
    341c:	60 8b       	std	Z+16, r22	; 0x10
    341e:	71 8b       	std	Z+17, r23	; 0x11
    3420:	2b e0       	ldi	r18, 0x0B	; 11
    3422:	92 9f       	mul	r25, r18
    3424:	c0 01       	movw	r24, r0
    3426:	11 24       	eor	r1, r1
    3428:	8b 57       	subi	r24, 0x7B	; 123
    342a:	96 4e       	sbci	r25, 0xE6	; 230
    342c:	24 85       	ldd	r18, Z+12	; 0x0c
    342e:	35 85       	ldd	r19, Z+13	; 0x0d
    3430:	28 17       	cp	r18, r24
    3432:	39 07       	cpc	r19, r25
    3434:	b9 f4       	brne	.+46     	; 0x3464 <vTaskPriorityDisinheritAfterTimeout+0x8e>
    3436:	ef 01       	movw	r28, r30
    3438:	8f 01       	movw	r16, r30
    343a:	0e 5f       	subi	r16, 0xFE	; 254
    343c:	1f 4f       	sbci	r17, 0xFF	; 255
    343e:	c8 01       	movw	r24, r16
    3440:	0e 94 aa 0b 	call	0x1754	; 0x1754 <uxListRemove>
    3444:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3446:	90 91 43 19 	lds	r25, 0x1943	; 0x801943 <uxTopReadyPriority>
    344a:	98 17       	cp	r25, r24
    344c:	10 f4       	brcc	.+4      	; 0x3452 <vTaskPriorityDisinheritAfterTimeout+0x7c>
    344e:	80 93 43 19 	sts	0x1943, r24	; 0x801943 <uxTopReadyPriority>
    3452:	2b e0       	ldi	r18, 0x0B	; 11
    3454:	82 9f       	mul	r24, r18
    3456:	c0 01       	movw	r24, r0
    3458:	11 24       	eor	r1, r1
    345a:	b8 01       	movw	r22, r16
    345c:	8b 57       	subi	r24, 0x7B	; 123
    345e:	96 4e       	sbci	r25, 0xE6	; 230
    3460:	0e 94 4c 0b 	call	0x1698	; 0x1698 <vListInsertEnd>
    3464:	df 91       	pop	r29
    3466:	cf 91       	pop	r28
    3468:	1f 91       	pop	r17
    346a:	0f 91       	pop	r16
    346c:	08 95       	ret

0000346e <uxTaskResetEventItemValue>:
    346e:	cf 92       	push	r12
    3470:	df 92       	push	r13
    3472:	ef 92       	push	r14
    3474:	ff 92       	push	r15
    3476:	e0 91 b1 19 	lds	r30, 0x19B1	; 0x8019b1 <pxCurrentTCB>
    347a:	f0 91 b2 19 	lds	r31, 0x19B2	; 0x8019b2 <pxCurrentTCB+0x1>
    347e:	66 85       	ldd	r22, Z+14	; 0x0e
    3480:	77 85       	ldd	r23, Z+15	; 0x0f
    3482:	80 89       	ldd	r24, Z+16	; 0x10
    3484:	91 89       	ldd	r25, Z+17	; 0x11
    3486:	e0 91 b1 19 	lds	r30, 0x19B1	; 0x8019b1 <pxCurrentTCB>
    348a:	f0 91 b2 19 	lds	r31, 0x19B2	; 0x8019b2 <pxCurrentTCB+0x1>
    348e:	a0 91 b1 19 	lds	r26, 0x19B1	; 0x8019b1 <pxCurrentTCB>
    3492:	b0 91 b2 19 	lds	r27, 0x19B2	; 0x8019b2 <pxCurrentTCB+0x1>
    3496:	5a 96       	adiw	r26, 0x1a	; 26
    3498:	2c 91       	ld	r18, X
    349a:	c1 2c       	mov	r12, r1
    349c:	d1 2c       	mov	r13, r1
    349e:	76 01       	movw	r14, r12
    34a0:	68 94       	set
    34a2:	c2 f8       	bld	r12, 2
    34a4:	c2 1a       	sub	r12, r18
    34a6:	d1 08       	sbc	r13, r1
    34a8:	e1 08       	sbc	r14, r1
    34aa:	f1 08       	sbc	r15, r1
    34ac:	c6 86       	std	Z+14, r12	; 0x0e
    34ae:	d7 86       	std	Z+15, r13	; 0x0f
    34b0:	e0 8a       	std	Z+16, r14	; 0x10
    34b2:	f1 8a       	std	Z+17, r15	; 0x11
    34b4:	ff 90       	pop	r15
    34b6:	ef 90       	pop	r14
    34b8:	df 90       	pop	r13
    34ba:	cf 90       	pop	r12
    34bc:	08 95       	ret

000034be <pvTaskIncrementMutexHeldCount>:
    34be:	80 91 b1 19 	lds	r24, 0x19B1	; 0x8019b1 <pxCurrentTCB>
    34c2:	90 91 b2 19 	lds	r25, 0x19B2	; 0x8019b2 <pxCurrentTCB+0x1>
    34c6:	89 2b       	or	r24, r25
    34c8:	39 f0       	breq	.+14     	; 0x34d8 <pvTaskIncrementMutexHeldCount+0x1a>
    34ca:	e0 91 b1 19 	lds	r30, 0x19B1	; 0x8019b1 <pxCurrentTCB>
    34ce:	f0 91 b2 19 	lds	r31, 0x19B2	; 0x8019b2 <pxCurrentTCB+0x1>
    34d2:	80 a5       	ldd	r24, Z+40	; 0x28
    34d4:	8f 5f       	subi	r24, 0xFF	; 255
    34d6:	80 a7       	std	Z+40, r24	; 0x28
    34d8:	80 91 b1 19 	lds	r24, 0x19B1	; 0x8019b1 <pxCurrentTCB>
    34dc:	90 91 b2 19 	lds	r25, 0x19B2	; 0x8019b2 <pxCurrentTCB+0x1>
    34e0:	08 95       	ret

000034e2 <xTaskNotifyWait>:
    34e2:	4f 92       	push	r4
    34e4:	5f 92       	push	r5
    34e6:	6f 92       	push	r6
    34e8:	7f 92       	push	r7
    34ea:	8f 92       	push	r8
    34ec:	9f 92       	push	r9
    34ee:	af 92       	push	r10
    34f0:	bf 92       	push	r11
    34f2:	cf 92       	push	r12
    34f4:	df 92       	push	r13
    34f6:	ef 92       	push	r14
    34f8:	ff 92       	push	r15
    34fa:	0f 93       	push	r16
    34fc:	1f 93       	push	r17
    34fe:	49 01       	movw	r8, r18
    3500:	5a 01       	movw	r10, r20
    3502:	0f b6       	in	r0, 0x3f	; 63
    3504:	f8 94       	cli
    3506:	0f 92       	push	r0
    3508:	e0 91 b1 19 	lds	r30, 0x19B1	; 0x8019b1 <pxCurrentTCB>
    350c:	f0 91 b2 19 	lds	r31, 0x19B2	; 0x8019b2 <pxCurrentTCB+0x1>
    3510:	27 a5       	ldd	r18, Z+47	; 0x2f
    3512:	22 30       	cpi	r18, 0x02	; 2
    3514:	39 f1       	breq	.+78     	; 0x3564 <xTaskNotifyWait+0x82>
    3516:	e0 91 b1 19 	lds	r30, 0x19B1	; 0x8019b1 <pxCurrentTCB>
    351a:	f0 91 b2 19 	lds	r31, 0x19B2	; 0x8019b2 <pxCurrentTCB+0x1>
    351e:	43 a4       	ldd	r4, Z+43	; 0x2b
    3520:	54 a4       	ldd	r5, Z+44	; 0x2c
    3522:	65 a4       	ldd	r6, Z+45	; 0x2d
    3524:	76 a4       	ldd	r7, Z+46	; 0x2e
    3526:	dc 01       	movw	r26, r24
    3528:	cb 01       	movw	r24, r22
    352a:	80 95       	com	r24
    352c:	90 95       	com	r25
    352e:	a0 95       	com	r26
    3530:	b0 95       	com	r27
    3532:	84 21       	and	r24, r4
    3534:	95 21       	and	r25, r5
    3536:	a6 21       	and	r26, r6
    3538:	b7 21       	and	r27, r7
    353a:	83 a7       	std	Z+43, r24	; 0x2b
    353c:	94 a7       	std	Z+44, r25	; 0x2c
    353e:	a5 a7       	std	Z+45, r26	; 0x2d
    3540:	b6 a7       	std	Z+46, r27	; 0x2e
    3542:	e0 91 b1 19 	lds	r30, 0x19B1	; 0x8019b1 <pxCurrentTCB>
    3546:	f0 91 b2 19 	lds	r31, 0x19B2	; 0x8019b2 <pxCurrentTCB+0x1>
    354a:	81 e0       	ldi	r24, 0x01	; 1
    354c:	87 a7       	std	Z+47, r24	; 0x2f
    354e:	c1 14       	cp	r12, r1
    3550:	d1 04       	cpc	r13, r1
    3552:	e1 04       	cpc	r14, r1
    3554:	f1 04       	cpc	r15, r1
    3556:	31 f0       	breq	.+12     	; 0x3564 <xTaskNotifyWait+0x82>
    3558:	41 e0       	ldi	r20, 0x01	; 1
    355a:	c7 01       	movw	r24, r14
    355c:	b6 01       	movw	r22, r12
    355e:	5a d9       	rcall	.-3404   	; 0x2814 <prvAddCurrentTaskToDelayedList>
    3560:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <vPortYield>
    3564:	0f 90       	pop	r0
    3566:	0f be       	out	0x3f, r0	; 63
    3568:	0f b6       	in	r0, 0x3f	; 63
    356a:	f8 94       	cli
    356c:	0f 92       	push	r0
    356e:	01 15       	cp	r16, r1
    3570:	11 05       	cpc	r17, r1
    3572:	69 f0       	breq	.+26     	; 0x358e <xTaskNotifyWait+0xac>
    3574:	e0 91 b1 19 	lds	r30, 0x19B1	; 0x8019b1 <pxCurrentTCB>
    3578:	f0 91 b2 19 	lds	r31, 0x19B2	; 0x8019b2 <pxCurrentTCB+0x1>
    357c:	83 a5       	ldd	r24, Z+43	; 0x2b
    357e:	94 a5       	ldd	r25, Z+44	; 0x2c
    3580:	a5 a5       	ldd	r26, Z+45	; 0x2d
    3582:	b6 a5       	ldd	r27, Z+46	; 0x2e
    3584:	f8 01       	movw	r30, r16
    3586:	80 83       	st	Z, r24
    3588:	91 83       	std	Z+1, r25	; 0x01
    358a:	a2 83       	std	Z+2, r26	; 0x02
    358c:	b3 83       	std	Z+3, r27	; 0x03
    358e:	e0 91 b1 19 	lds	r30, 0x19B1	; 0x8019b1 <pxCurrentTCB>
    3592:	f0 91 b2 19 	lds	r31, 0x19B2	; 0x8019b2 <pxCurrentTCB+0x1>
    3596:	87 a5       	ldd	r24, Z+47	; 0x2f
    3598:	82 30       	cpi	r24, 0x02	; 2
    359a:	b1 f4       	brne	.+44     	; 0x35c8 <xTaskNotifyWait+0xe6>
    359c:	e0 91 b1 19 	lds	r30, 0x19B1	; 0x8019b1 <pxCurrentTCB>
    35a0:	f0 91 b2 19 	lds	r31, 0x19B2	; 0x8019b2 <pxCurrentTCB+0x1>
    35a4:	83 a5       	ldd	r24, Z+43	; 0x2b
    35a6:	94 a5       	ldd	r25, Z+44	; 0x2c
    35a8:	a5 a5       	ldd	r26, Z+45	; 0x2d
    35aa:	b6 a5       	ldd	r27, Z+46	; 0x2e
    35ac:	80 94       	com	r8
    35ae:	90 94       	com	r9
    35b0:	a0 94       	com	r10
    35b2:	b0 94       	com	r11
    35b4:	88 22       	and	r8, r24
    35b6:	99 22       	and	r9, r25
    35b8:	aa 22       	and	r10, r26
    35ba:	bb 22       	and	r11, r27
    35bc:	83 a6       	std	Z+43, r8	; 0x2b
    35be:	94 a6       	std	Z+44, r9	; 0x2c
    35c0:	a5 a6       	std	Z+45, r10	; 0x2d
    35c2:	b6 a6       	std	Z+46, r11	; 0x2e
    35c4:	81 e0       	ldi	r24, 0x01	; 1
    35c6:	01 c0       	rjmp	.+2      	; 0x35ca <xTaskNotifyWait+0xe8>
    35c8:	80 e0       	ldi	r24, 0x00	; 0
    35ca:	e0 91 b1 19 	lds	r30, 0x19B1	; 0x8019b1 <pxCurrentTCB>
    35ce:	f0 91 b2 19 	lds	r31, 0x19B2	; 0x8019b2 <pxCurrentTCB+0x1>
    35d2:	17 a6       	std	Z+47, r1	; 0x2f
    35d4:	0f 90       	pop	r0
    35d6:	0f be       	out	0x3f, r0	; 63
    35d8:	1f 91       	pop	r17
    35da:	0f 91       	pop	r16
    35dc:	ff 90       	pop	r15
    35de:	ef 90       	pop	r14
    35e0:	df 90       	pop	r13
    35e2:	cf 90       	pop	r12
    35e4:	bf 90       	pop	r11
    35e6:	af 90       	pop	r10
    35e8:	9f 90       	pop	r9
    35ea:	8f 90       	pop	r8
    35ec:	7f 90       	pop	r7
    35ee:	6f 90       	pop	r6
    35f0:	5f 90       	pop	r5
    35f2:	4f 90       	pop	r4
    35f4:	08 95       	ret

000035f6 <xTaskGenericNotify>:
    35f6:	0f 93       	push	r16
    35f8:	1f 93       	push	r17
    35fa:	cf 93       	push	r28
    35fc:	df 93       	push	r29
    35fe:	fc 01       	movw	r30, r24
    3600:	0f b6       	in	r0, 0x3f	; 63
    3602:	f8 94       	cli
    3604:	0f 92       	push	r0
    3606:	01 15       	cp	r16, r1
    3608:	11 05       	cpc	r17, r1
    360a:	49 f0       	breq	.+18     	; 0x361e <xTaskGenericNotify+0x28>
    360c:	83 a5       	ldd	r24, Z+43	; 0x2b
    360e:	94 a5       	ldd	r25, Z+44	; 0x2c
    3610:	a5 a5       	ldd	r26, Z+45	; 0x2d
    3612:	b6 a5       	ldd	r27, Z+46	; 0x2e
    3614:	e8 01       	movw	r28, r16
    3616:	88 83       	st	Y, r24
    3618:	99 83       	std	Y+1, r25	; 0x01
    361a:	aa 83       	std	Y+2, r26	; 0x02
    361c:	bb 83       	std	Y+3, r27	; 0x03
    361e:	87 a5       	ldd	r24, Z+47	; 0x2f
    3620:	92 e0       	ldi	r25, 0x02	; 2
    3622:	97 a7       	std	Z+47, r25	; 0x2f
    3624:	22 30       	cpi	r18, 0x02	; 2
    3626:	b1 f0       	breq	.+44     	; 0x3654 <xTaskGenericNotify+0x5e>
    3628:	18 f4       	brcc	.+6      	; 0x3630 <xTaskGenericNotify+0x3a>
    362a:	21 30       	cpi	r18, 0x01	; 1
    362c:	31 f0       	breq	.+12     	; 0x363a <xTaskGenericNotify+0x44>
    362e:	2a c0       	rjmp	.+84     	; 0x3684 <xTaskGenericNotify+0x8e>
    3630:	23 30       	cpi	r18, 0x03	; 3
    3632:	e9 f0       	breq	.+58     	; 0x366e <xTaskGenericNotify+0x78>
    3634:	24 30       	cpi	r18, 0x04	; 4
    3636:	01 f1       	breq	.+64     	; 0x3678 <xTaskGenericNotify+0x82>
    3638:	25 c0       	rjmp	.+74     	; 0x3684 <xTaskGenericNotify+0x8e>
    363a:	03 a5       	ldd	r16, Z+43	; 0x2b
    363c:	14 a5       	ldd	r17, Z+44	; 0x2c
    363e:	25 a5       	ldd	r18, Z+45	; 0x2d
    3640:	36 a5       	ldd	r19, Z+46	; 0x2e
    3642:	40 2b       	or	r20, r16
    3644:	51 2b       	or	r21, r17
    3646:	62 2b       	or	r22, r18
    3648:	73 2b       	or	r23, r19
    364a:	43 a7       	std	Z+43, r20	; 0x2b
    364c:	54 a7       	std	Z+44, r21	; 0x2c
    364e:	65 a7       	std	Z+45, r22	; 0x2d
    3650:	76 a7       	std	Z+46, r23	; 0x2e
    3652:	18 c0       	rjmp	.+48     	; 0x3684 <xTaskGenericNotify+0x8e>
    3654:	43 a5       	ldd	r20, Z+43	; 0x2b
    3656:	54 a5       	ldd	r21, Z+44	; 0x2c
    3658:	65 a5       	ldd	r22, Z+45	; 0x2d
    365a:	76 a5       	ldd	r23, Z+46	; 0x2e
    365c:	4f 5f       	subi	r20, 0xFF	; 255
    365e:	5f 4f       	sbci	r21, 0xFF	; 255
    3660:	6f 4f       	sbci	r22, 0xFF	; 255
    3662:	7f 4f       	sbci	r23, 0xFF	; 255
    3664:	43 a7       	std	Z+43, r20	; 0x2b
    3666:	54 a7       	std	Z+44, r21	; 0x2c
    3668:	65 a7       	std	Z+45, r22	; 0x2d
    366a:	76 a7       	std	Z+46, r23	; 0x2e
    366c:	0b c0       	rjmp	.+22     	; 0x3684 <xTaskGenericNotify+0x8e>
    366e:	43 a7       	std	Z+43, r20	; 0x2b
    3670:	54 a7       	std	Z+44, r21	; 0x2c
    3672:	65 a7       	std	Z+45, r22	; 0x2d
    3674:	76 a7       	std	Z+46, r23	; 0x2e
    3676:	06 c0       	rjmp	.+12     	; 0x3684 <xTaskGenericNotify+0x8e>
    3678:	82 30       	cpi	r24, 0x02	; 2
    367a:	49 f1       	breq	.+82     	; 0x36ce <xTaskGenericNotify+0xd8>
    367c:	43 a7       	std	Z+43, r20	; 0x2b
    367e:	54 a7       	std	Z+44, r21	; 0x2c
    3680:	65 a7       	std	Z+45, r22	; 0x2d
    3682:	76 a7       	std	Z+46, r23	; 0x2e
    3684:	81 30       	cpi	r24, 0x01	; 1
    3686:	29 f5       	brne	.+74     	; 0x36d2 <xTaskGenericNotify+0xdc>
    3688:	ef 01       	movw	r28, r30
    368a:	8f 01       	movw	r16, r30
    368c:	0e 5f       	subi	r16, 0xFE	; 254
    368e:	1f 4f       	sbci	r17, 0xFF	; 255
    3690:	c8 01       	movw	r24, r16
    3692:	0e 94 aa 0b 	call	0x1754	; 0x1754 <uxListRemove>
    3696:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3698:	90 91 43 19 	lds	r25, 0x1943	; 0x801943 <uxTopReadyPriority>
    369c:	98 17       	cp	r25, r24
    369e:	10 f4       	brcc	.+4      	; 0x36a4 <xTaskGenericNotify+0xae>
    36a0:	80 93 43 19 	sts	0x1943, r24	; 0x801943 <uxTopReadyPriority>
    36a4:	2b e0       	ldi	r18, 0x0B	; 11
    36a6:	82 9f       	mul	r24, r18
    36a8:	c0 01       	movw	r24, r0
    36aa:	11 24       	eor	r1, r1
    36ac:	b8 01       	movw	r22, r16
    36ae:	8b 57       	subi	r24, 0x7B	; 123
    36b0:	96 4e       	sbci	r25, 0xE6	; 230
    36b2:	0e 94 4c 0b 	call	0x1698	; 0x1698 <vListInsertEnd>
    36b6:	e0 91 b1 19 	lds	r30, 0x19B1	; 0x8019b1 <pxCurrentTCB>
    36ba:	f0 91 b2 19 	lds	r31, 0x19B2	; 0x8019b2 <pxCurrentTCB+0x1>
    36be:	9a 8d       	ldd	r25, Y+26	; 0x1a
    36c0:	82 8d       	ldd	r24, Z+26	; 0x1a
    36c2:	89 17       	cp	r24, r25
    36c4:	40 f4       	brcc	.+16     	; 0x36d6 <xTaskGenericNotify+0xe0>
    36c6:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <vPortYield>
    36ca:	81 e0       	ldi	r24, 0x01	; 1
    36cc:	05 c0       	rjmp	.+10     	; 0x36d8 <xTaskGenericNotify+0xe2>
    36ce:	80 e0       	ldi	r24, 0x00	; 0
    36d0:	03 c0       	rjmp	.+6      	; 0x36d8 <xTaskGenericNotify+0xe2>
    36d2:	81 e0       	ldi	r24, 0x01	; 1
    36d4:	01 c0       	rjmp	.+2      	; 0x36d8 <xTaskGenericNotify+0xe2>
    36d6:	81 e0       	ldi	r24, 0x01	; 1
    36d8:	0f 90       	pop	r0
    36da:	0f be       	out	0x3f, r0	; 63
    36dc:	df 91       	pop	r29
    36de:	cf 91       	pop	r28
    36e0:	1f 91       	pop	r17
    36e2:	0f 91       	pop	r16
    36e4:	08 95       	ret

000036e6 <xTaskGenericNotifyFromISR>:
    36e6:	ef 92       	push	r14
    36e8:	ff 92       	push	r15
    36ea:	0f 93       	push	r16
    36ec:	1f 93       	push	r17
    36ee:	cf 93       	push	r28
    36f0:	df 93       	push	r29
    36f2:	fc 01       	movw	r30, r24
    36f4:	01 15       	cp	r16, r1
    36f6:	11 05       	cpc	r17, r1
    36f8:	49 f0       	breq	.+18     	; 0x370c <xTaskGenericNotifyFromISR+0x26>
    36fa:	83 a5       	ldd	r24, Z+43	; 0x2b
    36fc:	94 a5       	ldd	r25, Z+44	; 0x2c
    36fe:	a5 a5       	ldd	r26, Z+45	; 0x2d
    3700:	b6 a5       	ldd	r27, Z+46	; 0x2e
    3702:	e8 01       	movw	r28, r16
    3704:	88 83       	st	Y, r24
    3706:	99 83       	std	Y+1, r25	; 0x01
    3708:	aa 83       	std	Y+2, r26	; 0x02
    370a:	bb 83       	std	Y+3, r27	; 0x03
    370c:	87 a5       	ldd	r24, Z+47	; 0x2f
    370e:	92 e0       	ldi	r25, 0x02	; 2
    3710:	97 a7       	std	Z+47, r25	; 0x2f
    3712:	22 30       	cpi	r18, 0x02	; 2
    3714:	b1 f0       	breq	.+44     	; 0x3742 <xTaskGenericNotifyFromISR+0x5c>
    3716:	18 f4       	brcc	.+6      	; 0x371e <xTaskGenericNotifyFromISR+0x38>
    3718:	21 30       	cpi	r18, 0x01	; 1
    371a:	31 f0       	breq	.+12     	; 0x3728 <xTaskGenericNotifyFromISR+0x42>
    371c:	2a c0       	rjmp	.+84     	; 0x3772 <xTaskGenericNotifyFromISR+0x8c>
    371e:	23 30       	cpi	r18, 0x03	; 3
    3720:	e9 f0       	breq	.+58     	; 0x375c <xTaskGenericNotifyFromISR+0x76>
    3722:	24 30       	cpi	r18, 0x04	; 4
    3724:	01 f1       	breq	.+64     	; 0x3766 <xTaskGenericNotifyFromISR+0x80>
    3726:	25 c0       	rjmp	.+74     	; 0x3772 <xTaskGenericNotifyFromISR+0x8c>
    3728:	03 a5       	ldd	r16, Z+43	; 0x2b
    372a:	14 a5       	ldd	r17, Z+44	; 0x2c
    372c:	25 a5       	ldd	r18, Z+45	; 0x2d
    372e:	36 a5       	ldd	r19, Z+46	; 0x2e
    3730:	40 2b       	or	r20, r16
    3732:	51 2b       	or	r21, r17
    3734:	62 2b       	or	r22, r18
    3736:	73 2b       	or	r23, r19
    3738:	43 a7       	std	Z+43, r20	; 0x2b
    373a:	54 a7       	std	Z+44, r21	; 0x2c
    373c:	65 a7       	std	Z+45, r22	; 0x2d
    373e:	76 a7       	std	Z+46, r23	; 0x2e
    3740:	18 c0       	rjmp	.+48     	; 0x3772 <xTaskGenericNotifyFromISR+0x8c>
    3742:	43 a5       	ldd	r20, Z+43	; 0x2b
    3744:	54 a5       	ldd	r21, Z+44	; 0x2c
    3746:	65 a5       	ldd	r22, Z+45	; 0x2d
    3748:	76 a5       	ldd	r23, Z+46	; 0x2e
    374a:	4f 5f       	subi	r20, 0xFF	; 255
    374c:	5f 4f       	sbci	r21, 0xFF	; 255
    374e:	6f 4f       	sbci	r22, 0xFF	; 255
    3750:	7f 4f       	sbci	r23, 0xFF	; 255
    3752:	43 a7       	std	Z+43, r20	; 0x2b
    3754:	54 a7       	std	Z+44, r21	; 0x2c
    3756:	65 a7       	std	Z+45, r22	; 0x2d
    3758:	76 a7       	std	Z+46, r23	; 0x2e
    375a:	0b c0       	rjmp	.+22     	; 0x3772 <xTaskGenericNotifyFromISR+0x8c>
    375c:	43 a7       	std	Z+43, r20	; 0x2b
    375e:	54 a7       	std	Z+44, r21	; 0x2c
    3760:	65 a7       	std	Z+45, r22	; 0x2d
    3762:	76 a7       	std	Z+46, r23	; 0x2e
    3764:	06 c0       	rjmp	.+12     	; 0x3772 <xTaskGenericNotifyFromISR+0x8c>
    3766:	82 30       	cpi	r24, 0x02	; 2
    3768:	d9 f1       	breq	.+118    	; 0x37e0 <xTaskGenericNotifyFromISR+0xfa>
    376a:	43 a7       	std	Z+43, r20	; 0x2b
    376c:	54 a7       	std	Z+44, r21	; 0x2c
    376e:	65 a7       	std	Z+45, r22	; 0x2d
    3770:	76 a7       	std	Z+46, r23	; 0x2e
    3772:	81 30       	cpi	r24, 0x01	; 1
    3774:	b9 f5       	brne	.+110    	; 0x37e4 <xTaskGenericNotifyFromISR+0xfe>
    3776:	ef 01       	movw	r28, r30
    3778:	80 91 37 19 	lds	r24, 0x1937	; 0x801937 <uxSchedulerSuspended>
    377c:	81 11       	cpse	r24, r1
    377e:	17 c0       	rjmp	.+46     	; 0x37ae <xTaskGenericNotifyFromISR+0xc8>
    3780:	8f 01       	movw	r16, r30
    3782:	0e 5f       	subi	r16, 0xFE	; 254
    3784:	1f 4f       	sbci	r17, 0xFF	; 255
    3786:	c8 01       	movw	r24, r16
    3788:	0e 94 aa 0b 	call	0x1754	; 0x1754 <uxListRemove>
    378c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    378e:	90 91 43 19 	lds	r25, 0x1943	; 0x801943 <uxTopReadyPriority>
    3792:	98 17       	cp	r25, r24
    3794:	10 f4       	brcc	.+4      	; 0x379a <xTaskGenericNotifyFromISR+0xb4>
    3796:	80 93 43 19 	sts	0x1943, r24	; 0x801943 <uxTopReadyPriority>
    379a:	eb e0       	ldi	r30, 0x0B	; 11
    379c:	8e 9f       	mul	r24, r30
    379e:	c0 01       	movw	r24, r0
    37a0:	11 24       	eor	r1, r1
    37a2:	b8 01       	movw	r22, r16
    37a4:	8b 57       	subi	r24, 0x7B	; 123
    37a6:	96 4e       	sbci	r25, 0xE6	; 230
    37a8:	0e 94 4c 0b 	call	0x1698	; 0x1698 <vListInsertEnd>
    37ac:	07 c0       	rjmp	.+14     	; 0x37bc <xTaskGenericNotifyFromISR+0xd6>
    37ae:	bf 01       	movw	r22, r30
    37b0:	62 5f       	subi	r22, 0xF2	; 242
    37b2:	7f 4f       	sbci	r23, 0xFF	; 255
    37b4:	80 e6       	ldi	r24, 0x60	; 96
    37b6:	99 e1       	ldi	r25, 0x19	; 25
    37b8:	0e 94 4c 0b 	call	0x1698	; 0x1698 <vListInsertEnd>
    37bc:	e0 91 b1 19 	lds	r30, 0x19B1	; 0x8019b1 <pxCurrentTCB>
    37c0:	f0 91 b2 19 	lds	r31, 0x19B2	; 0x8019b2 <pxCurrentTCB+0x1>
    37c4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    37c6:	82 8d       	ldd	r24, Z+26	; 0x1a
    37c8:	89 17       	cp	r24, r25
    37ca:	70 f4       	brcc	.+28     	; 0x37e8 <xTaskGenericNotifyFromISR+0x102>
    37cc:	e1 14       	cp	r14, r1
    37ce:	f1 04       	cpc	r15, r1
    37d0:	19 f0       	breq	.+6      	; 0x37d8 <xTaskGenericNotifyFromISR+0xf2>
    37d2:	81 e0       	ldi	r24, 0x01	; 1
    37d4:	e7 01       	movw	r28, r14
    37d6:	88 83       	st	Y, r24
    37d8:	81 e0       	ldi	r24, 0x01	; 1
    37da:	80 93 40 19 	sts	0x1940, r24	; 0x801940 <xYieldPending>
    37de:	05 c0       	rjmp	.+10     	; 0x37ea <xTaskGenericNotifyFromISR+0x104>
    37e0:	80 e0       	ldi	r24, 0x00	; 0
    37e2:	03 c0       	rjmp	.+6      	; 0x37ea <xTaskGenericNotifyFromISR+0x104>
    37e4:	81 e0       	ldi	r24, 0x01	; 1
    37e6:	01 c0       	rjmp	.+2      	; 0x37ea <xTaskGenericNotifyFromISR+0x104>
    37e8:	81 e0       	ldi	r24, 0x01	; 1
    37ea:	df 91       	pop	r29
    37ec:	cf 91       	pop	r28
    37ee:	1f 91       	pop	r17
    37f0:	0f 91       	pop	r16
    37f2:	ff 90       	pop	r15
    37f4:	ef 90       	pop	r14
    37f6:	08 95       	ret

000037f8 <xTaskNotifyStateClear>:
    TCB_t *pxTCB;
    BaseType_t xReturn;

        /* If null is passed in here then it is the calling task that is having
        its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    37f8:	00 97       	sbiw	r24, 0x00	; 0
    37fa:	21 f4       	brne	.+8      	; 0x3804 <xTaskNotifyStateClear+0xc>
    37fc:	80 91 b1 19 	lds	r24, 0x19B1	; 0x8019b1 <pxCurrentTCB>
    3800:	90 91 b2 19 	lds	r25, 0x19B2	; 0x8019b2 <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    3804:	0f b6       	in	r0, 0x3f	; 63
    3806:	f8 94       	cli
    3808:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
    380a:	fc 01       	movw	r30, r24
    380c:	27 a5       	ldd	r18, Z+47	; 0x2f
    380e:	22 30       	cpi	r18, 0x02	; 2
    3810:	19 f4       	brne	.+6      	; 0x3818 <xTaskNotifyStateClear+0x20>
            {
                pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    3812:	17 a6       	std	Z+47, r1	; 0x2f
                xReturn = pdPASS;
    3814:	81 e0       	ldi	r24, 0x01	; 1
    3816:	01 c0       	rjmp	.+2      	; 0x381a <xTaskNotifyStateClear+0x22>
            }
            else
            {
                xReturn = pdFAIL;
    3818:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    381a:	0f 90       	pop	r0
    381c:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    381e:	08 95       	ret

00003820 <prvInsertTimerInActiveList>:
    3820:	cf 92       	push	r12
    3822:	df 92       	push	r13
    3824:	ef 92       	push	r14
    3826:	ff 92       	push	r15
    3828:	0f 93       	push	r16
    382a:	1f 93       	push	r17
    382c:	fc 01       	movw	r30, r24
    382e:	42 83       	std	Z+2, r20	; 0x02
    3830:	53 83       	std	Z+3, r21	; 0x03
    3832:	64 83       	std	Z+4, r22	; 0x04
    3834:	75 83       	std	Z+5, r23	; 0x05
    3836:	93 87       	std	Z+11, r25	; 0x0b
    3838:	82 87       	std	Z+10, r24	; 0x0a
    383a:	04 17       	cp	r16, r20
    383c:	15 07       	cpc	r17, r21
    383e:	26 07       	cpc	r18, r22
    3840:	37 07       	cpc	r19, r23
    3842:	c0 f0       	brcs	.+48     	; 0x3874 <prvInsertTimerInActiveList+0x54>
    3844:	0c 19       	sub	r16, r12
    3846:	1d 09       	sbc	r17, r13
    3848:	2e 09       	sbc	r18, r14
    384a:	3f 09       	sbc	r19, r15
    384c:	86 85       	ldd	r24, Z+14	; 0x0e
    384e:	97 85       	ldd	r25, Z+15	; 0x0f
    3850:	a0 89       	ldd	r26, Z+16	; 0x10
    3852:	b1 89       	ldd	r27, Z+17	; 0x11
    3854:	08 17       	cp	r16, r24
    3856:	19 07       	cpc	r17, r25
    3858:	2a 07       	cpc	r18, r26
    385a:	3b 07       	cpc	r19, r27
    385c:	00 f5       	brcc	.+64     	; 0x389e <prvInsertTimerInActiveList+0x7e>
    385e:	bf 01       	movw	r22, r30
    3860:	6e 5f       	subi	r22, 0xFE	; 254
    3862:	7f 4f       	sbci	r23, 0xFF	; 255
    3864:	80 91 bb 19 	lds	r24, 0x19BB	; 0x8019bb <pxOverflowTimerList>
    3868:	90 91 bc 19 	lds	r25, 0x19BC	; 0x8019bc <pxOverflowTimerList+0x1>
    386c:	0e 94 6d 0b 	call	0x16da	; 0x16da <vListInsert>
    3870:	80 e0       	ldi	r24, 0x00	; 0
    3872:	18 c0       	rjmp	.+48     	; 0x38a4 <prvInsertTimerInActiveList+0x84>
    3874:	0c 15       	cp	r16, r12
    3876:	1d 05       	cpc	r17, r13
    3878:	2e 05       	cpc	r18, r14
    387a:	3f 05       	cpc	r19, r15
    387c:	28 f4       	brcc	.+10     	; 0x3888 <prvInsertTimerInActiveList+0x68>
    387e:	4c 15       	cp	r20, r12
    3880:	5d 05       	cpc	r21, r13
    3882:	6e 05       	cpc	r22, r14
    3884:	7f 05       	cpc	r23, r15
    3886:	68 f4       	brcc	.+26     	; 0x38a2 <prvInsertTimerInActiveList+0x82>
    3888:	bf 01       	movw	r22, r30
    388a:	6e 5f       	subi	r22, 0xFE	; 254
    388c:	7f 4f       	sbci	r23, 0xFF	; 255
    388e:	80 91 bd 19 	lds	r24, 0x19BD	; 0x8019bd <pxCurrentTimerList>
    3892:	90 91 be 19 	lds	r25, 0x19BE	; 0x8019be <pxCurrentTimerList+0x1>
    3896:	0e 94 6d 0b 	call	0x16da	; 0x16da <vListInsert>
    389a:	80 e0       	ldi	r24, 0x00	; 0
    389c:	03 c0       	rjmp	.+6      	; 0x38a4 <prvInsertTimerInActiveList+0x84>
    389e:	81 e0       	ldi	r24, 0x01	; 1
    38a0:	01 c0       	rjmp	.+2      	; 0x38a4 <prvInsertTimerInActiveList+0x84>
    38a2:	81 e0       	ldi	r24, 0x01	; 1
    38a4:	1f 91       	pop	r17
    38a6:	0f 91       	pop	r16
    38a8:	ff 90       	pop	r15
    38aa:	ef 90       	pop	r14
    38ac:	df 90       	pop	r13
    38ae:	cf 90       	pop	r12
    38b0:	08 95       	ret

000038b2 <prvCheckForValidListAndQueue>:
    38b2:	0f b6       	in	r0, 0x3f	; 63
    38b4:	f8 94       	cli
    38b6:	0f 92       	push	r0
    38b8:	80 91 b9 19 	lds	r24, 0x19B9	; 0x8019b9 <xTimerQueue>
    38bc:	90 91 ba 19 	lds	r25, 0x19BA	; 0x8019ba <xTimerQueue+0x1>
    38c0:	89 2b       	or	r24, r25
    38c2:	e9 f4       	brne	.+58     	; 0x38fe <prvCheckForValidListAndQueue+0x4c>
    38c4:	8a ec       	ldi	r24, 0xCA	; 202
    38c6:	99 e1       	ldi	r25, 0x19	; 25
    38c8:	0e 94 37 0b 	call	0x166e	; 0x166e <vListInitialise>
    38cc:	8f eb       	ldi	r24, 0xBF	; 191
    38ce:	99 e1       	ldi	r25, 0x19	; 25
    38d0:	0e 94 37 0b 	call	0x166e	; 0x166e <vListInitialise>
    38d4:	8a ec       	ldi	r24, 0xCA	; 202
    38d6:	99 e1       	ldi	r25, 0x19	; 25
    38d8:	90 93 be 19 	sts	0x19BE, r25	; 0x8019be <pxCurrentTimerList+0x1>
    38dc:	80 93 bd 19 	sts	0x19BD, r24	; 0x8019bd <pxCurrentTimerList>
    38e0:	8f eb       	ldi	r24, 0xBF	; 191
    38e2:	99 e1       	ldi	r25, 0x19	; 25
    38e4:	90 93 bc 19 	sts	0x19BC, r25	; 0x8019bc <pxOverflowTimerList+0x1>
    38e8:	80 93 bb 19 	sts	0x19BB, r24	; 0x8019bb <pxOverflowTimerList>
    38ec:	40 e0       	ldi	r20, 0x00	; 0
    38ee:	67 e0       	ldi	r22, 0x07	; 7
    38f0:	8a e0       	ldi	r24, 0x0A	; 10
    38f2:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <xQueueGenericCreate>
    38f6:	90 93 ba 19 	sts	0x19BA, r25	; 0x8019ba <xTimerQueue+0x1>
    38fa:	80 93 b9 19 	sts	0x19B9, r24	; 0x8019b9 <xTimerQueue>
    38fe:	0f 90       	pop	r0
    3900:	0f be       	out	0x3f, r0	; 63
    3902:	08 95       	ret

00003904 <xTimerCreateTimerTask>:
    3904:	ef 92       	push	r14
    3906:	ff 92       	push	r15
    3908:	0f 93       	push	r16
    390a:	d3 df       	rcall	.-90     	; 0x38b2 <prvCheckForValidListAndQueue>
    390c:	80 91 b9 19 	lds	r24, 0x19B9	; 0x8019b9 <xTimerQueue>
    3910:	90 91 ba 19 	lds	r25, 0x19BA	; 0x8019ba <xTimerQueue+0x1>
    3914:	89 2b       	or	r24, r25
    3916:	91 f0       	breq	.+36     	; 0x393c <xTimerCreateTimerTask+0x38>
    3918:	0f 2e       	mov	r0, r31
    391a:	f7 eb       	ldi	r31, 0xB7	; 183
    391c:	ef 2e       	mov	r14, r31
    391e:	f9 e1       	ldi	r31, 0x19	; 25
    3920:	ff 2e       	mov	r15, r31
    3922:	f0 2d       	mov	r31, r0
    3924:	03 e0       	ldi	r16, 0x03	; 3
    3926:	20 e0       	ldi	r18, 0x00	; 0
    3928:	30 e0       	ldi	r19, 0x00	; 0
    392a:	45 e5       	ldi	r20, 0x55	; 85
    392c:	50 e0       	ldi	r21, 0x00	; 0
    392e:	69 ec       	ldi	r22, 0xC9	; 201
    3930:	75 e0       	ldi	r23, 0x05	; 5
    3932:	87 e0       	ldi	r24, 0x07	; 7
    3934:	91 e0       	ldi	r25, 0x01	; 1
    3936:	0e 94 81 14 	call	0x2902	; 0x2902 <xTaskCreate>
    393a:	01 c0       	rjmp	.+2      	; 0x393e <xTimerCreateTimerTask+0x3a>
    393c:	80 e0       	ldi	r24, 0x00	; 0
    393e:	0f 91       	pop	r16
    3940:	ff 90       	pop	r15
    3942:	ef 90       	pop	r14
    3944:	08 95       	ret

00003946 <xTimerGenericCommand>:
    }
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    3946:	8f 92       	push	r8
    3948:	9f 92       	push	r9
    394a:	af 92       	push	r10
    394c:	bf 92       	push	r11
    394e:	cf 92       	push	r12
    3950:	df 92       	push	r13
    3952:	ef 92       	push	r14
    3954:	ff 92       	push	r15
    3956:	0f 93       	push	r16
    3958:	1f 93       	push	r17
    395a:	cf 93       	push	r28
    395c:	df 93       	push	r29
    395e:	cd b7       	in	r28, 0x3d	; 61
    3960:	de b7       	in	r29, 0x3e	; 62
    3962:	27 97       	sbiw	r28, 0x07	; 7
    3964:	0f b6       	in	r0, 0x3f	; 63
    3966:	f8 94       	cli
    3968:	de bf       	out	0x3e, r29	; 62
    396a:	0f be       	out	0x3f, r0	; 63
    396c:	cd bf       	out	0x3d, r28	; 61

    configASSERT( xTimer );

    /* Send a message to the timer service task to perform a particular action
    on a particular timer definition. */
    if( xTimerQueue != NULL )
    396e:	e0 91 b9 19 	lds	r30, 0x19B9	; 0x8019b9 <xTimerQueue>
    3972:	f0 91 ba 19 	lds	r31, 0x19BA	; 0x8019ba <xTimerQueue+0x1>
    3976:	30 97       	sbiw	r30, 0x00	; 0
    3978:	81 f1       	breq	.+96     	; 0x39da <xTimerGenericCommand+0x94>
    {
        /* Send a command to the timer service task to start the xTimer timer. */
        xMessage.xMessageID = xCommandID;
    397a:	69 83       	std	Y+1, r22	; 0x01
        xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    397c:	2a 83       	std	Y+2, r18	; 0x02
    397e:	3b 83       	std	Y+3, r19	; 0x03
    3980:	4c 83       	std	Y+4, r20	; 0x04
    3982:	5d 83       	std	Y+5, r21	; 0x05
        xMessage.u.xTimerParameters.pxTimer = xTimer;
    3984:	9f 83       	std	Y+7, r25	; 0x07
    3986:	8e 83       	std	Y+6, r24	; 0x06

        if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    3988:	66 30       	cpi	r22, 0x06	; 6
    398a:	f4 f4       	brge	.+60     	; 0x39c8 <xTimerGenericCommand+0x82>
        {
            if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    398c:	68 dc       	rcall	.-1840   	; 0x325e <xTaskGetSchedulerState>
    398e:	82 30       	cpi	r24, 0x02	; 2
    3990:	69 f4       	brne	.+26     	; 0x39ac <xTimerGenericCommand+0x66>
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    3992:	00 e0       	ldi	r16, 0x00	; 0
    3994:	a7 01       	movw	r20, r14
    3996:	96 01       	movw	r18, r12
    3998:	be 01       	movw	r22, r28
    399a:	6f 5f       	subi	r22, 0xFF	; 255
    399c:	7f 4f       	sbci	r23, 0xFF	; 255
    399e:	80 91 b9 19 	lds	r24, 0x19B9	; 0x8019b9 <xTimerQueue>
    39a2:	90 91 ba 19 	lds	r25, 0x19BA	; 0x8019ba <xTimerQueue+0x1>
    39a6:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <xQueueGenericSend>
    39aa:	18 c0       	rjmp	.+48     	; 0x39dc <xTimerGenericCommand+0x96>
            }
            else
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    39ac:	00 e0       	ldi	r16, 0x00	; 0
    39ae:	20 e0       	ldi	r18, 0x00	; 0
    39b0:	30 e0       	ldi	r19, 0x00	; 0
    39b2:	a9 01       	movw	r20, r18
    39b4:	be 01       	movw	r22, r28
    39b6:	6f 5f       	subi	r22, 0xFF	; 255
    39b8:	7f 4f       	sbci	r23, 0xFF	; 255
    39ba:	80 91 b9 19 	lds	r24, 0x19B9	; 0x8019b9 <xTimerQueue>
    39be:	90 91 ba 19 	lds	r25, 0x19BA	; 0x8019ba <xTimerQueue+0x1>
    39c2:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <xQueueGenericSend>
    39c6:	0a c0       	rjmp	.+20     	; 0x39dc <xTimerGenericCommand+0x96>
            }
        }
        else
        {
            xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    39c8:	20 e0       	ldi	r18, 0x00	; 0
    39ca:	a8 01       	movw	r20, r16
    39cc:	be 01       	movw	r22, r28
    39ce:	6f 5f       	subi	r22, 0xFF	; 255
    39d0:	7f 4f       	sbci	r23, 0xFF	; 255
    39d2:	cf 01       	movw	r24, r30
    39d4:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <xQueueGenericSendFromISR>
    39d8:	01 c0       	rjmp	.+2      	; 0x39dc <xTimerGenericCommand+0x96>
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
    39da:	80 e0       	ldi	r24, 0x00	; 0
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xReturn;
}
    39dc:	27 96       	adiw	r28, 0x07	; 7
    39de:	0f b6       	in	r0, 0x3f	; 63
    39e0:	f8 94       	cli
    39e2:	de bf       	out	0x3e, r29	; 62
    39e4:	0f be       	out	0x3f, r0	; 63
    39e6:	cd bf       	out	0x3d, r28	; 61
    39e8:	df 91       	pop	r29
    39ea:	cf 91       	pop	r28
    39ec:	1f 91       	pop	r17
    39ee:	0f 91       	pop	r16
    39f0:	ff 90       	pop	r15
    39f2:	ef 90       	pop	r14
    39f4:	df 90       	pop	r13
    39f6:	cf 90       	pop	r12
    39f8:	bf 90       	pop	r11
    39fa:	af 90       	pop	r10
    39fc:	9f 90       	pop	r9
    39fe:	8f 90       	pop	r8
    3a00:	08 95       	ret

00003a02 <prvSampleTimeNow>:
    return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    3a02:	2f 92       	push	r2
    3a04:	3f 92       	push	r3
    3a06:	4f 92       	push	r4
    3a08:	5f 92       	push	r5
    3a0a:	6f 92       	push	r6
    3a0c:	7f 92       	push	r7
    3a0e:	8f 92       	push	r8
    3a10:	9f 92       	push	r9
    3a12:	af 92       	push	r10
    3a14:	bf 92       	push	r11
    3a16:	cf 92       	push	r12
    3a18:	df 92       	push	r13
    3a1a:	ef 92       	push	r14
    3a1c:	ff 92       	push	r15
    3a1e:	0f 93       	push	r16
    3a20:	1f 93       	push	r17
    3a22:	cf 93       	push	r28
    3a24:	df 93       	push	r29
    3a26:	1c 01       	movw	r2, r24
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

    xTimeNow = xTaskGetTickCount();
    3a28:	cd d8       	rcall	.-3686   	; 0x2bc4 <xTaskGetTickCount>
    3a2a:	2b 01       	movw	r4, r22
    3a2c:	3c 01       	movw	r6, r24

    if( xTimeNow < xLastTime )
    3a2e:	80 91 b3 19 	lds	r24, 0x19B3	; 0x8019b3 <xLastTime.2432>
    3a32:	90 91 b4 19 	lds	r25, 0x19B4	; 0x8019b4 <xLastTime.2432+0x1>
    3a36:	a0 91 b5 19 	lds	r26, 0x19B5	; 0x8019b5 <xLastTime.2432+0x2>
    3a3a:	b0 91 b6 19 	lds	r27, 0x19B6	; 0x8019b6 <xLastTime.2432+0x3>
    3a3e:	48 16       	cp	r4, r24
    3a40:	59 06       	cpc	r5, r25
    3a42:	6a 06       	cpc	r6, r26
    3a44:	7b 06       	cpc	r7, r27
    3a46:	08 f0       	brcs	.+2      	; 0x3a4a <prvSampleTimeNow+0x48>
    3a48:	53 c0       	rjmp	.+166    	; 0x3af0 <prvSampleTimeNow+0xee>
    3a4a:	3b c0       	rjmp	.+118    	; 0x3ac2 <prvSampleTimeNow+0xc0>
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    {
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    3a4c:	07 80       	ldd	r0, Z+7	; 0x07
    3a4e:	f0 85       	ldd	r31, Z+8	; 0x08
    3a50:	e0 2d       	mov	r30, r0
    3a52:	80 80       	ld	r8, Z
    3a54:	91 80       	ldd	r9, Z+1	; 0x01
    3a56:	a2 80       	ldd	r10, Z+2	; 0x02
    3a58:	b3 80       	ldd	r11, Z+3	; 0x03

        /* Remove the timer from the list. */
        pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    3a5a:	c0 85       	ldd	r28, Z+8	; 0x08
    3a5c:	d1 85       	ldd	r29, Z+9	; 0x09
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3a5e:	8e 01       	movw	r16, r28
    3a60:	0e 5f       	subi	r16, 0xFE	; 254
    3a62:	1f 4f       	sbci	r17, 0xFF	; 255
    3a64:	c8 01       	movw	r24, r16
    3a66:	0e 94 aa 0b 	call	0x1754	; 0x1754 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* Execute its callback, then send a command to restart the timer if
        it is an auto-reload timer.  It cannot be restarted here as the lists
        have not yet been switched. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3a6a:	ec 89       	ldd	r30, Y+20	; 0x14
    3a6c:	fd 89       	ldd	r31, Y+21	; 0x15
    3a6e:	ce 01       	movw	r24, r28
    3a70:	19 95       	eicall

        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    3a72:	8f 89       	ldd	r24, Y+23	; 0x17
    3a74:	82 ff       	sbrs	r24, 2
    3a76:	25 c0       	rjmp	.+74     	; 0x3ac2 <prvSampleTimeNow+0xc0>
            the timer going into the same timer list then it has already expired
            and the timer should be re-inserted into the current list so it is
            processed again within this loop.  Otherwise a command should be sent
            to restart the timer to ensure it is only inserted into a list after
            the lists have been swapped. */
            xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    3a78:	8e 85       	ldd	r24, Y+14	; 0x0e
    3a7a:	9f 85       	ldd	r25, Y+15	; 0x0f
    3a7c:	a8 89       	ldd	r26, Y+16	; 0x10
    3a7e:	b9 89       	ldd	r27, Y+17	; 0x11
    3a80:	88 0d       	add	r24, r8
    3a82:	99 1d       	adc	r25, r9
    3a84:	aa 1d       	adc	r26, r10
    3a86:	bb 1d       	adc	r27, r11
            if( xReloadTime > xNextExpireTime )
    3a88:	88 16       	cp	r8, r24
    3a8a:	99 06       	cpc	r9, r25
    3a8c:	aa 06       	cpc	r10, r26
    3a8e:	bb 06       	cpc	r11, r27
    3a90:	70 f4       	brcc	.+28     	; 0x3aae <prvSampleTimeNow+0xac>
            {
                listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    3a92:	8a 83       	std	Y+2, r24	; 0x02
    3a94:	9b 83       	std	Y+3, r25	; 0x03
    3a96:	ac 83       	std	Y+4, r26	; 0x04
    3a98:	bd 83       	std	Y+5, r27	; 0x05
                listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    3a9a:	db 87       	std	Y+11, r29	; 0x0b
    3a9c:	ca 87       	std	Y+10, r28	; 0x0a
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    3a9e:	b8 01       	movw	r22, r16
    3aa0:	80 91 bd 19 	lds	r24, 0x19BD	; 0x8019bd <pxCurrentTimerList>
    3aa4:	90 91 be 19 	lds	r25, 0x19BE	; 0x8019be <pxCurrentTimerList+0x1>
    3aa8:	0e 94 6d 0b 	call	0x16da	; 0x16da <vListInsert>
    3aac:	0a c0       	rjmp	.+20     	; 0x3ac2 <prvSampleTimeNow+0xc0>
            }
            else
            {
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    3aae:	c1 2c       	mov	r12, r1
    3ab0:	d1 2c       	mov	r13, r1
    3ab2:	76 01       	movw	r14, r12
    3ab4:	00 e0       	ldi	r16, 0x00	; 0
    3ab6:	10 e0       	ldi	r17, 0x00	; 0
    3ab8:	a5 01       	movw	r20, r10
    3aba:	94 01       	movw	r18, r8
    3abc:	60 e0       	ldi	r22, 0x00	; 0
    3abe:	ce 01       	movw	r24, r28
    3ac0:	42 df       	rcall	.-380    	; 0x3946 <xTimerGenericCommand>

    /* The tick count has overflowed.  The timer lists must be switched.
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    3ac2:	e0 91 bd 19 	lds	r30, 0x19BD	; 0x8019bd <pxCurrentTimerList>
    3ac6:	f0 91 be 19 	lds	r31, 0x19BE	; 0x8019be <pxCurrentTimerList+0x1>
    3aca:	80 81       	ld	r24, Z
    3acc:	81 11       	cpse	r24, r1
    3ace:	be cf       	rjmp	.-132    	; 0x3a4c <prvSampleTimeNow+0x4a>
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxTemp = pxCurrentTimerList;
    pxCurrentTimerList = pxOverflowTimerList;
    3ad0:	80 91 bb 19 	lds	r24, 0x19BB	; 0x8019bb <pxOverflowTimerList>
    3ad4:	90 91 bc 19 	lds	r25, 0x19BC	; 0x8019bc <pxOverflowTimerList+0x1>
    3ad8:	90 93 be 19 	sts	0x19BE, r25	; 0x8019be <pxCurrentTimerList+0x1>
    3adc:	80 93 bd 19 	sts	0x19BD, r24	; 0x8019bd <pxCurrentTimerList>
    pxOverflowTimerList = pxTemp;
    3ae0:	f0 93 bc 19 	sts	0x19BC, r31	; 0x8019bc <pxOverflowTimerList+0x1>
    3ae4:	e0 93 bb 19 	sts	0x19BB, r30	; 0x8019bb <pxOverflowTimerList>
    xTimeNow = xTaskGetTickCount();

    if( xTimeNow < xLastTime )
    {
        prvSwitchTimerLists();
        *pxTimerListsWereSwitched = pdTRUE;
    3ae8:	81 e0       	ldi	r24, 0x01	; 1
    3aea:	f1 01       	movw	r30, r2
    3aec:	80 83       	st	Z, r24
    3aee:	02 c0       	rjmp	.+4      	; 0x3af4 <prvSampleTimeNow+0xf2>
    }
    else
    {
        *pxTimerListsWereSwitched = pdFALSE;
    3af0:	f1 01       	movw	r30, r2
    3af2:	10 82       	st	Z, r1
    }

    xLastTime = xTimeNow;
    3af4:	40 92 b3 19 	sts	0x19B3, r4	; 0x8019b3 <xLastTime.2432>
    3af8:	50 92 b4 19 	sts	0x19B4, r5	; 0x8019b4 <xLastTime.2432+0x1>
    3afc:	60 92 b5 19 	sts	0x19B5, r6	; 0x8019b5 <xLastTime.2432+0x2>
    3b00:	70 92 b6 19 	sts	0x19B6, r7	; 0x8019b6 <xLastTime.2432+0x3>

    return xTimeNow;
}
    3b04:	c3 01       	movw	r24, r6
    3b06:	b2 01       	movw	r22, r4
    3b08:	df 91       	pop	r29
    3b0a:	cf 91       	pop	r28
    3b0c:	1f 91       	pop	r17
    3b0e:	0f 91       	pop	r16
    3b10:	ff 90       	pop	r15
    3b12:	ef 90       	pop	r14
    3b14:	df 90       	pop	r13
    3b16:	cf 90       	pop	r12
    3b18:	bf 90       	pop	r11
    3b1a:	af 90       	pop	r10
    3b1c:	9f 90       	pop	r9
    3b1e:	8f 90       	pop	r8
    3b20:	7f 90       	pop	r7
    3b22:	6f 90       	pop	r6
    3b24:	5f 90       	pop	r5
    3b26:	4f 90       	pop	r4
    3b28:	3f 90       	pop	r3
    3b2a:	2f 90       	pop	r2
    3b2c:	08 95       	ret

00003b2e <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    3b2e:	08 95       	ret

00003b30 <vApplicationMallocFailedHook>:
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    3b30:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    3b32:	2f 9a       	sbi	0x05, 7	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3b34:	2f ef       	ldi	r18, 0xFF	; 255
    3b36:	80 e7       	ldi	r24, 0x70	; 112
    3b38:	92 e0       	ldi	r25, 0x02	; 2
    3b3a:	21 50       	subi	r18, 0x01	; 1
    3b3c:	80 40       	sbci	r24, 0x00	; 0
    3b3e:	90 40       	sbci	r25, 0x00	; 0
    3b40:	e1 f7       	brne	.-8      	; 0x3b3a <vApplicationMallocFailedHook+0xa>
    3b42:	00 c0       	rjmp	.+0      	; 0x3b44 <vApplicationMallocFailedHook+0x14>
    3b44:	00 00       	nop
    for(;;)
    {
        _delay_ms(50);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED fast blink.
    3b46:	1f 9a       	sbi	0x03, 7	; 3
    3b48:	f5 cf       	rjmp	.-22     	; 0x3b34 <vApplicationMallocFailedHook+0x4>

00003b4a <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook( TaskHandle_t xTask, portCHAR *pcTaskName ) __attribute__((weak));

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)), portCHAR *pcTaskName __attribute__((unused))  )
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    3b4a:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    3b4c:	2f 9a       	sbi	0x05, 7	; 5
    3b4e:	2f ef       	ldi	r18, 0xFF	; 255
    3b50:	87 ea       	ldi	r24, 0xA7	; 167
    3b52:	91 e6       	ldi	r25, 0x61	; 97
    3b54:	21 50       	subi	r18, 0x01	; 1
    3b56:	80 40       	sbci	r24, 0x00	; 0
    3b58:	90 40       	sbci	r25, 0x00	; 0
    3b5a:	e1 f7       	brne	.-8      	; 0x3b54 <vApplicationStackOverflowHook+0xa>
    3b5c:	00 c0       	rjmp	.+0      	; 0x3b5e <vApplicationStackOverflowHook+0x14>
    3b5e:	00 00       	nop
    for(;;)
    {
        _delay_ms(2000);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED slow blink.
    3b60:	1f 9a       	sbi	0x03, 7	; 3
    3b62:	f5 cf       	rjmp	.-22     	; 0x3b4e <vApplicationStackOverflowHook+0x4>

00003b64 <create_tasks_and_semaphores>:
	hih8120Create();
	
}

void doStuff()
{
    3b64:	8f 92       	push	r8
    3b66:	9f 92       	push	r9
    3b68:	af 92       	push	r10
    3b6a:	bf 92       	push	r11
    3b6c:	cf 92       	push	r12
    3b6e:	df 92       	push	r13
    3b70:	ef 92       	push	r14
    3b72:	ff 92       	push	r15
    3b74:	0f 93       	push	r16
    3b76:	1f 93       	push	r17
    3b78:	cf 93       	push	r28
    3b7a:	df 93       	push	r29
    3b7c:	0e 94 94 08 	call	0x1128	; 0x1128 <xEventGroupCreate>
    3b80:	90 93 50 1b 	sts	0x1B50, r25	; 0x801b50 <startMeasureEventGroup+0x1>
    3b84:	80 93 4f 1b 	sts	0x1B4F, r24	; 0x801b4f <startMeasureEventGroup>
    3b88:	0e 94 94 08 	call	0x1128	; 0x1128 <xEventGroupCreate>
    3b8c:	90 93 36 1b 	sts	0x1B36, r25	; 0x801b36 <readyEventGroup+0x1>
    3b90:	80 93 35 1b 	sts	0x1B35, r24	; 0x801b35 <readyEventGroup>
    3b94:	41 e0       	ldi	r20, 0x01	; 1
    3b96:	60 e0       	ldi	r22, 0x00	; 0
    3b98:	70 e0       	ldi	r23, 0x00	; 0
    3b9a:	84 e6       	ldi	r24, 0x64	; 100
    3b9c:	90 e0       	ldi	r25, 0x00	; 0
    3b9e:	0e 94 e6 11 	call	0x23cc	; 0x23cc <xStreamBufferGenericCreate>
    3ba2:	90 93 32 1b 	sts	0x1B32, r25	; 0x801b32 <xMessageBuffer+0x1>
    3ba6:	80 93 31 1b 	sts	0x1B31, r24	; 0x801b31 <xMessageBuffer>
    3baa:	41 e0       	ldi	r20, 0x01	; 1
    3bac:	60 e0       	ldi	r22, 0x00	; 0
    3bae:	70 e0       	ldi	r23, 0x00	; 0
    3bb0:	8c e2       	ldi	r24, 0x2C	; 44
    3bb2:	90 e0       	ldi	r25, 0x00	; 0
    3bb4:	0e 94 e6 11 	call	0x23cc	; 0x23cc <xStreamBufferGenericCreate>
    3bb8:	90 93 34 1b 	sts	0x1B34, r25	; 0x801b34 <_downlinkMessagebuffer+0x1>
    3bbc:	80 93 33 1b 	sts	0x1B33, r24	; 0x801b33 <_downlinkMessagebuffer>
    3bc0:	0e 94 41 03 	call	0x682	; 0x682 <configuration_create>
    3bc4:	e0 90 35 1b 	lds	r14, 0x1B35	; 0x801b35 <readyEventGroup>
    3bc8:	f0 90 36 1b 	lds	r15, 0x1B36	; 0x801b36 <readyEventGroup+0x1>
    3bcc:	40 91 4f 1b 	lds	r20, 0x1B4F	; 0x801b4f <startMeasureEventGroup>
    3bd0:	50 91 50 1b 	lds	r21, 0x1B50	; 0x801b50 <startMeasureEventGroup+0x1>
    3bd4:	a1 2c       	mov	r10, r1
    3bd6:	b1 2c       	mov	r11, r1
    3bd8:	65 01       	movw	r12, r10
    3bda:	68 94       	set
    3bdc:	a4 f8       	bld	r10, 4
    3bde:	01 e0       	ldi	r16, 0x01	; 1
    3be0:	10 e0       	ldi	r17, 0x00	; 0
    3be2:	20 e0       	ldi	r18, 0x00	; 0
    3be4:	30 e0       	ldi	r19, 0x00	; 0
    3be6:	60 ec       	ldi	r22, 0xC0	; 192
    3be8:	81 e0       	ldi	r24, 0x01	; 1
    3bea:	0e 94 48 06 	call	0xc90	; 0xc90 <humAndTempReader_create>
    3bee:	c8 2f       	mov	r28, r24
    3bf0:	d9 2f       	mov	r29, r25
    3bf2:	e0 90 35 1b 	lds	r14, 0x1B35	; 0x801b35 <readyEventGroup>
    3bf6:	f0 90 36 1b 	lds	r15, 0x1B36	; 0x801b36 <readyEventGroup+0x1>
    3bfa:	40 91 4f 1b 	lds	r20, 0x1B4F	; 0x801b4f <startMeasureEventGroup>
    3bfe:	50 91 50 1b 	lds	r21, 0x1B50	; 0x801b50 <startMeasureEventGroup+0x1>
    3c02:	a1 2c       	mov	r10, r1
    3c04:	b1 2c       	mov	r11, r1
    3c06:	65 01       	movw	r12, r10
    3c08:	68 94       	set
    3c0a:	a5 f8       	bld	r10, 5
    3c0c:	02 e0       	ldi	r16, 0x02	; 2
    3c0e:	10 e0       	ldi	r17, 0x00	; 0
    3c10:	20 e0       	ldi	r18, 0x00	; 0
    3c12:	30 e0       	ldi	r19, 0x00	; 0
    3c14:	60 ec       	ldi	r22, 0xC0	; 192
    3c16:	81 e0       	ldi	r24, 0x01	; 1
    3c18:	0e 94 84 02 	call	0x508	; 0x508 <co2Reader_create>
    3c1c:	e0 90 35 1b 	lds	r14, 0x1B35	; 0x801b35 <readyEventGroup>
    3c20:	f0 90 36 1b 	lds	r15, 0x1B36	; 0x801b36 <readyEventGroup+0x1>
    3c24:	40 91 4f 1b 	lds	r20, 0x1B4F	; 0x801b4f <startMeasureEventGroup>
    3c28:	50 91 50 1b 	lds	r21, 0x1B50	; 0x801b50 <startMeasureEventGroup+0x1>
    3c2c:	20 91 32 1b 	lds	r18, 0x1B32	; 0x801b32 <xMessageBuffer+0x1>
    3c30:	2f 93       	push	r18
    3c32:	20 91 31 1b 	lds	r18, 0x1B31	; 0x801b31 <xMessageBuffer>
    3c36:	2f 93       	push	r18
    3c38:	df 93       	push	r29
    3c3a:	cf 93       	push	r28
    3c3c:	4c 01       	movw	r8, r24
    3c3e:	0f 2e       	mov	r0, r31
    3c40:	f0 e3       	ldi	r31, 0x30	; 48
    3c42:	af 2e       	mov	r10, r31
    3c44:	b1 2c       	mov	r11, r1
    3c46:	c1 2c       	mov	r12, r1
    3c48:	d1 2c       	mov	r13, r1
    3c4a:	f0 2d       	mov	r31, r0
    3c4c:	03 e0       	ldi	r16, 0x03	; 3
    3c4e:	10 e0       	ldi	r17, 0x00	; 0
    3c50:	20 e0       	ldi	r18, 0x00	; 0
    3c52:	30 e0       	ldi	r19, 0x00	; 0
    3c54:	60 ec       	ldi	r22, 0xC0	; 192
    3c56:	83 e0       	ldi	r24, 0x03	; 3
    3c58:	0e 94 20 04 	call	0x840	; 0x840 <device_create>
    3c5c:	60 91 31 1b 	lds	r22, 0x1B31	; 0x801b31 <xMessageBuffer>
    3c60:	70 91 32 1b 	lds	r23, 0x1B32	; 0x801b32 <xMessageBuffer+0x1>
    3c64:	83 e0       	ldi	r24, 0x03	; 3
    3c66:	0e 94 1b 07 	call	0xe36	; 0xe36 <lora_UpLinkHandler_create>
    3c6a:	60 91 33 1b 	lds	r22, 0x1B33	; 0x801b33 <_downlinkMessagebuffer>
    3c6e:	70 91 34 1b 	lds	r23, 0x1B34	; 0x801b34 <_downlinkMessagebuffer+0x1>
    3c72:	82 e0       	ldi	r24, 0x02	; 2
    3c74:	0e 94 94 05 	call	0xb28	; 0xb28 <lora_DownLinkHandler_create>
    3c78:	0f 90       	pop	r0
    3c7a:	0f 90       	pop	r0
    3c7c:	0f 90       	pop	r0
    3c7e:	0f 90       	pop	r0
    3c80:	df 91       	pop	r29
    3c82:	cf 91       	pop	r28
    3c84:	1f 91       	pop	r17
    3c86:	0f 91       	pop	r16
    3c88:	ff 90       	pop	r15
    3c8a:	ef 90       	pop	r14
    3c8c:	df 90       	pop	r13
    3c8e:	cf 90       	pop	r12
    3c90:	bf 90       	pop	r11
    3c92:	af 90       	pop	r10
    3c94:	9f 90       	pop	r9
    3c96:	8f 90       	pop	r8
    3c98:	08 95       	ret

00003c9a <initialiseSystem>:
    3c9a:	81 b1       	in	r24, 0x01	; 1
    3c9c:	81 68       	ori	r24, 0x81	; 129
    3c9e:	81 b9       	out	0x01, r24	; 1
    3ca0:	0e 94 7e 08 	call	0x10fc	; 0x10fc <trace_init>
    3ca4:	80 e0       	ldi	r24, 0x00	; 0
    3ca6:	0e 94 17 2a 	call	0x542e	; 0x542e <stdioCreate>
    3caa:	85 e0       	ldi	r24, 0x05	; 5
    3cac:	11 d0       	rcall	.+34     	; 0x3cd0 <hal_create>
    3cae:	60 91 33 1b 	lds	r22, 0x1B33	; 0x801b33 <_downlinkMessagebuffer>
    3cb2:	70 91 34 1b 	lds	r23, 0x1B34	; 0x801b34 <_downlinkMessagebuffer+0x1>
    3cb6:	81 e0       	ldi	r24, 0x01	; 1
    3cb8:	c3 d3       	rcall	.+1926   	; 0x4440 <lora_driver_create>
    3cba:	69 c0       	rjmp	.+210    	; 0x3d8e <hih8120Create>
    3cbc:	08 95       	ret

00003cbe <main>:
	//bytesToSend=xMessageBufferSend(xMessageBuffer,(void*) &payload,sizeof(payload),portMAX_DELAY);
}
/*-----------------------------------------------------------*/
int main(void)
{
	initialiseSystem(); // Must be done as the very first thing!!
    3cbe:	ed df       	rcall	.-38     	; 0x3c9a <initialiseSystem>
	printf("Program Started!!\n");
    3cc0:	81 ed       	ldi	r24, 0xD1	; 209
    3cc2:	95 e0       	ldi	r25, 0x05	; 5
    3cc4:	0e 94 c4 2f 	call	0x5f88	; 0x5f88 <puts>
	create_tasks_and_semaphores();
    3cc8:	4d df       	rcall	.-358    	; 0x3b64 <create_tasks_and_semaphores>
	vTaskStartScheduler(); // Initialise and run the freeRTOS scheduler. Execution should never return from here.
    3cca:	0e 94 a0 15 	call	0x2b40	; 0x2b40 <vTaskStartScheduler>
    3cce:	ff cf       	rjmp	.-2      	; 0x3cce <main+0x10>

00003cd0 <hal_create>:
    3cd0:	e1 e5       	ldi	r30, 0x51	; 81
    3cd2:	fb e1       	ldi	r31, 0x1B	; 27
    3cd4:	25 e7       	ldi	r18, 0x75	; 117
    3cd6:	35 e2       	ldi	r19, 0x25	; 37
    3cd8:	31 83       	std	Z+1, r19	; 0x01
    3cda:	20 83       	st	Z, r18
    3cdc:	28 e7       	ldi	r18, 0x78	; 120
    3cde:	35 e2       	ldi	r19, 0x25	; 37
    3ce0:	33 83       	std	Z+3, r19	; 0x03
    3ce2:	22 83       	std	Z+2, r18	; 0x02
    3ce4:	23 e8       	ldi	r18, 0x83	; 131
    3ce6:	35 e2       	ldi	r19, 0x25	; 37
    3ce8:	35 83       	std	Z+5, r19	; 0x05
    3cea:	24 83       	std	Z+4, r18	; 0x04
    3cec:	27 e8       	ldi	r18, 0x87	; 135
    3cee:	35 e2       	ldi	r19, 0x25	; 37
    3cf0:	37 83       	std	Z+7, r19	; 0x07
    3cf2:	26 83       	std	Z+6, r18	; 0x06
    3cf4:	2d e8       	ldi	r18, 0x8D	; 141
    3cf6:	35 e2       	ldi	r19, 0x25	; 37
    3cf8:	31 87       	std	Z+9, r19	; 0x09
    3cfa:	20 87       	std	Z+8, r18	; 0x08
    3cfc:	29 e9       	ldi	r18, 0x99	; 153
    3cfe:	35 e2       	ldi	r19, 0x25	; 37
    3d00:	33 87       	std	Z+11, r19	; 0x0b
    3d02:	22 87       	std	Z+10, r18	; 0x0a
    3d04:	2e e9       	ldi	r18, 0x9E	; 158
    3d06:	35 e2       	ldi	r19, 0x25	; 37
    3d08:	35 87       	std	Z+13, r19	; 0x0d
    3d0a:	24 87       	std	Z+12, r18	; 0x0c
    3d0c:	2a ea       	ldi	r18, 0xAA	; 170
    3d0e:	35 e2       	ldi	r19, 0x25	; 37
    3d10:	37 87       	std	Z+15, r19	; 0x0f
    3d12:	26 87       	std	Z+14, r18	; 0x0e
    3d14:	2a e8       	ldi	r18, 0x8A	; 138
    3d16:	35 e2       	ldi	r19, 0x25	; 37
    3d18:	31 8b       	std	Z+17, r19	; 0x11
    3d1a:	20 8b       	std	Z+16, r18	; 0x10
    3d1c:	2f ea       	ldi	r18, 0xAF	; 175
    3d1e:	35 e2       	ldi	r19, 0x25	; 37
    3d20:	33 8b       	std	Z+19, r19	; 0x13
    3d22:	22 8b       	std	Z+18, r18	; 0x12
    3d24:	2c eb       	ldi	r18, 0xBC	; 188
    3d26:	35 e2       	ldi	r19, 0x25	; 37
    3d28:	35 8b       	std	Z+21, r19	; 0x15
    3d2a:	24 8b       	std	Z+20, r18	; 0x14
    3d2c:	68 2f       	mov	r22, r24
    3d2e:	cf 01       	movw	r24, r30
    3d30:	53 c1       	rjmp	.+678    	; 0x3fd8 <led_create>
    3d32:	08 95       	ret

00003d34 <_hihTwiCallback>:
    3d34:	65 30       	cpi	r22, 0x05	; 5
    3d36:	f1 f4       	brne	.+60     	; 0x3d74 <_hihTwiCallback+0x40>
    3d38:	fa 01       	movw	r30, r20
    3d3a:	80 81       	ld	r24, Z
    3d3c:	8f 73       	andi	r24, 0x3F	; 63
    3d3e:	90 e0       	ldi	r25, 0x00	; 0
    3d40:	98 2f       	mov	r25, r24
    3d42:	88 27       	eor	r24, r24
    3d44:	21 81       	ldd	r18, Z+1	; 0x01
    3d46:	82 2b       	or	r24, r18
    3d48:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <_hum+0x1>
    3d4c:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <_hum>
    3d50:	82 81       	ldd	r24, Z+2	; 0x02
    3d52:	f0 e4       	ldi	r31, 0x40	; 64
    3d54:	8f 9f       	mul	r24, r31
    3d56:	c0 01       	movw	r24, r0
    3d58:	11 24       	eor	r1, r1
    3d5a:	fa 01       	movw	r30, r20
    3d5c:	23 81       	ldd	r18, Z+3	; 0x03
    3d5e:	26 95       	lsr	r18
    3d60:	26 95       	lsr	r18
    3d62:	82 2b       	or	r24, r18
    3d64:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <_temp+0x1>
    3d68:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <_temp>
    3d6c:	81 e0       	ldi	r24, 0x01	; 1
    3d6e:	80 93 d5 19 	sts	0x19D5, r24	; 0x8019d5 <_measuringIsReady>
    3d72:	08 95       	ret
    3d74:	64 30       	cpi	r22, 0x04	; 4
    3d76:	51 f0       	breq	.+20     	; 0x3d8c <_hihTwiCallback+0x58>
    3d78:	80 e0       	ldi	r24, 0x00	; 0
    3d7a:	90 e4       	ldi	r25, 0x40	; 64
    3d7c:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <_temp+0x1>
    3d80:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <_temp>
    3d84:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <_hum+0x1>
    3d88:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <_hum>
    3d8c:	08 95       	ret

00003d8e <hih8120Create>:
    3d8e:	0f 93       	push	r16
    3d90:	1f 93       	push	r17
    3d92:	0a e9       	ldi	r16, 0x9A	; 154
    3d94:	1e e1       	ldi	r17, 0x1E	; 30
    3d96:	20 e0       	ldi	r18, 0x00	; 0
    3d98:	34 e2       	ldi	r19, 0x24	; 36
    3d9a:	44 ef       	ldi	r20, 0xF4	; 244
    3d9c:	50 e0       	ldi	r21, 0x00	; 0
    3d9e:	60 e0       	ldi	r22, 0x00	; 0
    3da0:	87 e2       	ldi	r24, 0x27	; 39
    3da2:	0e 94 51 2a 	call	0x54a2	; 0x54a2 <twiCreate>
    3da6:	90 93 d7 19 	sts	0x19D7, r25	; 0x8019d7 <_hih8120Handler+0x1>
    3daa:	80 93 d6 19 	sts	0x19D6, r24	; 0x8019d6 <_hih8120Handler>
    3dae:	21 e0       	ldi	r18, 0x01	; 1
    3db0:	89 2b       	or	r24, r25
    3db2:	09 f0       	breq	.+2      	; 0x3db6 <hih8120Create+0x28>
    3db4:	20 e0       	ldi	r18, 0x00	; 0
    3db6:	82 2f       	mov	r24, r18
    3db8:	1f 91       	pop	r17
    3dba:	0f 91       	pop	r16
    3dbc:	08 95       	ret

00003dbe <hih8120IsReady>:
    3dbe:	80 91 d5 19 	lds	r24, 0x19D5	; 0x8019d5 <_measuringIsReady>
    3dc2:	08 95       	ret

00003dc4 <hih8120Wakeup>:
    3dc4:	80 91 d6 19 	lds	r24, 0x19D6	; 0x8019d6 <_hih8120Handler>
    3dc8:	90 91 d7 19 	lds	r25, 0x19D7	; 0x8019d7 <_hih8120Handler+0x1>
    3dcc:	00 97       	sbiw	r24, 0x00	; 0
    3dce:	59 f0       	breq	.+22     	; 0x3de6 <hih8120Wakeup+0x22>
    3dd0:	40 e0       	ldi	r20, 0x00	; 0
    3dd2:	60 e0       	ldi	r22, 0x00	; 0
    3dd4:	70 e0       	ldi	r23, 0x00	; 0
    3dd6:	0e 94 a2 2a 	call	0x5544	; 0x5544 <twiTransmit>
    3dda:	84 30       	cpi	r24, 0x04	; 4
    3ddc:	31 f4       	brne	.+12     	; 0x3dea <hih8120Wakeup+0x26>
    3dde:	10 92 d5 19 	sts	0x19D5, r1	; 0x8019d5 <_measuringIsReady>
    3de2:	80 e0       	ldi	r24, 0x00	; 0
    3de4:	08 95       	ret
    3de6:	82 e0       	ldi	r24, 0x02	; 2
    3de8:	08 95       	ret
    3dea:	83 e0       	ldi	r24, 0x03	; 3
    3dec:	08 95       	ret

00003dee <hih8120Meassure>:
    3dee:	80 91 d6 19 	lds	r24, 0x19D6	; 0x8019d6 <_hih8120Handler>
    3df2:	90 91 d7 19 	lds	r25, 0x19D7	; 0x8019d7 <_hih8120Handler+0x1>
    3df6:	00 97       	sbiw	r24, 0x00	; 0
    3df8:	39 f0       	breq	.+14     	; 0x3e08 <hih8120Meassure+0x1a>
    3dfa:	64 e0       	ldi	r22, 0x04	; 4
    3dfc:	0e 94 ee 2a 	call	0x55dc	; 0x55dc <twiReceive>
    3e00:	85 30       	cpi	r24, 0x05	; 5
    3e02:	21 f0       	breq	.+8      	; 0x3e0c <hih8120Meassure+0x1e>
    3e04:	83 e0       	ldi	r24, 0x03	; 3
    3e06:	08 95       	ret
    3e08:	82 e0       	ldi	r24, 0x02	; 2
    3e0a:	08 95       	ret
    3e0c:	80 e0       	ldi	r24, 0x00	; 0
    3e0e:	08 95       	ret

00003e10 <hih8120GetHumidity>:
    3e10:	60 91 08 02 	lds	r22, 0x0208	; 0x800208 <_hum>
    3e14:	70 91 09 02 	lds	r23, 0x0209	; 0x800209 <_hum+0x1>
    3e18:	80 e0       	ldi	r24, 0x00	; 0
    3e1a:	90 e0       	ldi	r25, 0x00	; 0
    3e1c:	0e 94 f8 2c 	call	0x59f0	; 0x59f0 <__floatunsisf>
    3e20:	20 e0       	ldi	r18, 0x00	; 0
    3e22:	30 e0       	ldi	r19, 0x00	; 0
    3e24:	48 ec       	ldi	r20, 0xC8	; 200
    3e26:	52 e4       	ldi	r21, 0x42	; 66
    3e28:	0e 94 86 2d 	call	0x5b0c	; 0x5b0c <__mulsf3>
    3e2c:	20 e0       	ldi	r18, 0x00	; 0
    3e2e:	38 ef       	ldi	r19, 0xF8	; 248
    3e30:	4f e7       	ldi	r20, 0x7F	; 127
    3e32:	56 e4       	ldi	r21, 0x46	; 70
    3e34:	0c 94 5f 2c 	jmp	0x58be	; 0x58be <__divsf3>
    3e38:	08 95       	ret

00003e3a <hih8120GetHumidityPercent_x10>:
    3e3a:	ea df       	rcall	.-44     	; 0x3e10 <hih8120GetHumidity>
    3e3c:	20 e0       	ldi	r18, 0x00	; 0
    3e3e:	30 e0       	ldi	r19, 0x00	; 0
    3e40:	40 e2       	ldi	r20, 0x20	; 32
    3e42:	51 e4       	ldi	r21, 0x41	; 65
    3e44:	0e 94 86 2d 	call	0x5b0c	; 0x5b0c <__mulsf3>
    3e48:	0e 94 cc 2c 	call	0x5998	; 0x5998 <__fixunssfsi>
    3e4c:	cb 01       	movw	r24, r22
    3e4e:	08 95       	ret

00003e50 <hih8120GetTemperature>:
    3e50:	60 91 06 02 	lds	r22, 0x0206	; 0x800206 <_temp>
    3e54:	70 91 07 02 	lds	r23, 0x0207	; 0x800207 <_temp+0x1>
    3e58:	80 e0       	ldi	r24, 0x00	; 0
    3e5a:	90 e0       	ldi	r25, 0x00	; 0
    3e5c:	0e 94 f8 2c 	call	0x59f0	; 0x59f0 <__floatunsisf>
    3e60:	20 e0       	ldi	r18, 0x00	; 0
    3e62:	30 e0       	ldi	r19, 0x00	; 0
    3e64:	45 e2       	ldi	r20, 0x25	; 37
    3e66:	53 e4       	ldi	r21, 0x43	; 67
    3e68:	0e 94 86 2d 	call	0x5b0c	; 0x5b0c <__mulsf3>
    3e6c:	20 e0       	ldi	r18, 0x00	; 0
    3e6e:	38 ef       	ldi	r19, 0xF8	; 248
    3e70:	4f e7       	ldi	r20, 0x7F	; 127
    3e72:	56 e4       	ldi	r21, 0x46	; 70
    3e74:	0e 94 5f 2c 	call	0x58be	; 0x58be <__divsf3>
    3e78:	20 e0       	ldi	r18, 0x00	; 0
    3e7a:	30 e0       	ldi	r19, 0x00	; 0
    3e7c:	40 e2       	ldi	r20, 0x20	; 32
    3e7e:	52 e4       	ldi	r21, 0x42	; 66
    3e80:	0c 94 fa 2b 	jmp	0x57f4	; 0x57f4 <__subsf3>
    3e84:	08 95       	ret

00003e86 <hih8120GetTemperature_x10>:
    3e86:	e4 df       	rcall	.-56     	; 0x3e50 <hih8120GetTemperature>
    3e88:	20 e0       	ldi	r18, 0x00	; 0
    3e8a:	30 e0       	ldi	r19, 0x00	; 0
    3e8c:	40 e2       	ldi	r20, 0x20	; 32
    3e8e:	51 e4       	ldi	r21, 0x41	; 65
    3e90:	0e 94 86 2d 	call	0x5b0c	; 0x5b0c <__mulsf3>
    3e94:	0e 94 c7 2c 	call	0x598e	; 0x598e <__fixsfsi>
    3e98:	cb 01       	movw	r24, r22
    3e9a:	08 95       	ret

00003e9c <_turn_off>:
    3e9c:	cf 93       	push	r28
    3e9e:	df 93       	push	r29
    3ea0:	90 e0       	ldi	r25, 0x00	; 0
    3ea2:	fc 01       	movw	r30, r24
    3ea4:	ee 0f       	add	r30, r30
    3ea6:	ff 1f       	adc	r31, r31
    3ea8:	e8 0f       	add	r30, r24
    3eaa:	f9 1f       	adc	r31, r25
    3eac:	ee 0f       	add	r30, r30
    3eae:	ff 1f       	adc	r31, r31
    3eb0:	e8 52       	subi	r30, 0x28	; 40
    3eb2:	f6 4e       	sbci	r31, 0xE6	; 230
    3eb4:	23 81       	ldd	r18, Z+3	; 0x03
    3eb6:	21 11       	cpse	r18, r1
    3eb8:	0a c0       	rjmp	.+20     	; 0x3ece <_turn_off+0x32>
    3eba:	ef 01       	movw	r28, r30
    3ebc:	e0 91 59 1b 	lds	r30, 0x1B59	; 0x801b59 <register_access+0x8>
    3ec0:	f0 91 5a 1b 	lds	r31, 0x1B5A	; 0x801b5a <register_access+0x9>
    3ec4:	6a 81       	ldd	r22, Y+2	; 0x02
    3ec6:	88 81       	ld	r24, Y
    3ec8:	99 81       	ldd	r25, Y+1	; 0x01
    3eca:	19 95       	eicall
    3ecc:	12 c0       	rjmp	.+36     	; 0x3ef2 <_turn_off+0x56>
    3ece:	dc 01       	movw	r26, r24
    3ed0:	aa 0f       	add	r26, r26
    3ed2:	bb 1f       	adc	r27, r27
    3ed4:	ed 01       	movw	r28, r26
    3ed6:	c8 0f       	add	r28, r24
    3ed8:	d9 1f       	adc	r29, r25
    3eda:	cc 0f       	add	r28, r28
    3edc:	dd 1f       	adc	r29, r29
    3ede:	c8 52       	subi	r28, 0x28	; 40
    3ee0:	d6 4e       	sbci	r29, 0xE6	; 230
    3ee2:	e0 91 63 1b 	lds	r30, 0x1B63	; 0x801b63 <register_access+0x12>
    3ee6:	f0 91 64 1b 	lds	r31, 0x1B64	; 0x801b64 <register_access+0x13>
    3eea:	6a 81       	ldd	r22, Y+2	; 0x02
    3eec:	88 81       	ld	r24, Y
    3eee:	99 81       	ldd	r25, Y+1	; 0x01
    3ef0:	19 95       	eicall
    3ef2:	df 91       	pop	r29
    3ef4:	cf 91       	pop	r28
    3ef6:	08 95       	ret

00003ef8 <_turn_on>:
    3ef8:	cf 93       	push	r28
    3efa:	df 93       	push	r29
    3efc:	90 e0       	ldi	r25, 0x00	; 0
    3efe:	fc 01       	movw	r30, r24
    3f00:	ee 0f       	add	r30, r30
    3f02:	ff 1f       	adc	r31, r31
    3f04:	e8 0f       	add	r30, r24
    3f06:	f9 1f       	adc	r31, r25
    3f08:	ee 0f       	add	r30, r30
    3f0a:	ff 1f       	adc	r31, r31
    3f0c:	e8 52       	subi	r30, 0x28	; 40
    3f0e:	f6 4e       	sbci	r31, 0xE6	; 230
    3f10:	23 81       	ldd	r18, Z+3	; 0x03
    3f12:	21 11       	cpse	r18, r1
    3f14:	0a c0       	rjmp	.+20     	; 0x3f2a <_turn_on+0x32>
    3f16:	ef 01       	movw	r28, r30
    3f18:	e0 91 63 1b 	lds	r30, 0x1B63	; 0x801b63 <register_access+0x12>
    3f1c:	f0 91 64 1b 	lds	r31, 0x1B64	; 0x801b64 <register_access+0x13>
    3f20:	6a 81       	ldd	r22, Y+2	; 0x02
    3f22:	88 81       	ld	r24, Y
    3f24:	99 81       	ldd	r25, Y+1	; 0x01
    3f26:	19 95       	eicall
    3f28:	12 c0       	rjmp	.+36     	; 0x3f4e <_turn_on+0x56>
    3f2a:	dc 01       	movw	r26, r24
    3f2c:	aa 0f       	add	r26, r26
    3f2e:	bb 1f       	adc	r27, r27
    3f30:	ed 01       	movw	r28, r26
    3f32:	c8 0f       	add	r28, r24
    3f34:	d9 1f       	adc	r29, r25
    3f36:	cc 0f       	add	r28, r28
    3f38:	dd 1f       	adc	r29, r29
    3f3a:	c8 52       	subi	r28, 0x28	; 40
    3f3c:	d6 4e       	sbci	r29, 0xE6	; 230
    3f3e:	e0 91 59 1b 	lds	r30, 0x1B59	; 0x801b59 <register_access+0x8>
    3f42:	f0 91 5a 1b 	lds	r31, 0x1B5A	; 0x801b5a <register_access+0x9>
    3f46:	6a 81       	ldd	r22, Y+2	; 0x02
    3f48:	88 81       	ld	r24, Y
    3f4a:	99 81       	ldd	r25, Y+1	; 0x01
    3f4c:	19 95       	eicall
    3f4e:	df 91       	pop	r29
    3f50:	cf 91       	pop	r28
    3f52:	08 95       	ret

00003f54 <_hal_led_task>:
    3f54:	0f 2e       	mov	r0, r31
    3f56:	f1 e5       	ldi	r31, 0x51	; 81
    3f58:	cf 2e       	mov	r12, r31
    3f5a:	fb e1       	ldi	r31, 0x1B	; 27
    3f5c:	df 2e       	mov	r13, r31
    3f5e:	f0 2d       	mov	r31, r0
    3f60:	04 e0       	ldi	r16, 0x04	; 4
    3f62:	c8 ed       	ldi	r28, 0xD8	; 216
    3f64:	d9 e1       	ldi	r29, 0x19	; 25
    3f66:	10 e0       	ldi	r17, 0x00	; 0
    3f68:	8c 81       	ldd	r24, Y+4	; 0x04
    3f6a:	81 30       	cpi	r24, 0x01	; 1
    3f6c:	69 f0       	breq	.+26     	; 0x3f88 <_hal_led_task+0x34>
    3f6e:	e8 f0       	brcs	.+58     	; 0x3faa <_hal_led_task+0x56>
    3f70:	82 30       	cpi	r24, 0x02	; 2
    3f72:	39 f5       	brne	.+78     	; 0x3fc2 <_hal_led_task+0x6e>
    3f74:	d6 01       	movw	r26, r12
    3f76:	1c 96       	adiw	r26, 0x0c	; 12
    3f78:	ed 91       	ld	r30, X+
    3f7a:	fc 91       	ld	r31, X
    3f7c:	1d 97       	sbiw	r26, 0x0d	; 13
    3f7e:	6a 81       	ldd	r22, Y+2	; 0x02
    3f80:	88 81       	ld	r24, Y
    3f82:	99 81       	ldd	r25, Y+1	; 0x01
    3f84:	19 95       	eicall
    3f86:	1d c0       	rjmp	.+58     	; 0x3fc2 <_hal_led_task+0x6e>
    3f88:	8d 81       	ldd	r24, Y+5	; 0x05
    3f8a:	8f 5f       	subi	r24, 0xFF	; 255
    3f8c:	8a 30       	cpi	r24, 0x0A	; 10
    3f8e:	10 f4       	brcc	.+4      	; 0x3f94 <_hal_led_task+0x40>
    3f90:	8d 83       	std	Y+5, r24	; 0x05
    3f92:	17 c0       	rjmp	.+46     	; 0x3fc2 <_hal_led_task+0x6e>
    3f94:	1d 82       	std	Y+5, r1	; 0x05
    3f96:	d6 01       	movw	r26, r12
    3f98:	1c 96       	adiw	r26, 0x0c	; 12
    3f9a:	ed 91       	ld	r30, X+
    3f9c:	fc 91       	ld	r31, X
    3f9e:	1d 97       	sbiw	r26, 0x0d	; 13
    3fa0:	6a 81       	ldd	r22, Y+2	; 0x02
    3fa2:	88 81       	ld	r24, Y
    3fa4:	99 81       	ldd	r25, Y+1	; 0x01
    3fa6:	19 95       	eicall
    3fa8:	0c c0       	rjmp	.+24     	; 0x3fc2 <_hal_led_task+0x6e>
    3faa:	8d 81       	ldd	r24, Y+5	; 0x05
    3fac:	88 23       	and	r24, r24
    3fae:	31 f0       	breq	.+12     	; 0x3fbc <_hal_led_task+0x68>
    3fb0:	81 2f       	mov	r24, r17
    3fb2:	a2 df       	rcall	.-188    	; 0x3ef8 <_turn_on>
    3fb4:	8d 81       	ldd	r24, Y+5	; 0x05
    3fb6:	81 50       	subi	r24, 0x01	; 1
    3fb8:	8d 83       	std	Y+5, r24	; 0x05
    3fba:	03 c0       	rjmp	.+6      	; 0x3fc2 <_hal_led_task+0x6e>
    3fbc:	0c 83       	std	Y+4, r16	; 0x04
    3fbe:	81 2f       	mov	r24, r17
    3fc0:	6d df       	rcall	.-294    	; 0x3e9c <_turn_off>
    3fc2:	1f 5f       	subi	r17, 0xFF	; 255
    3fc4:	26 96       	adiw	r28, 0x06	; 6
    3fc6:	14 30       	cpi	r17, 0x04	; 4
    3fc8:	79 f6       	brne	.-98     	; 0x3f68 <_hal_led_task+0x14>
    3fca:	65 e0       	ldi	r22, 0x05	; 5
    3fcc:	70 e0       	ldi	r23, 0x00	; 0
    3fce:	80 e0       	ldi	r24, 0x00	; 0
    3fd0:	90 e0       	ldi	r25, 0x00	; 0
    3fd2:	0e 94 41 17 	call	0x2e82	; 0x2e82 <vTaskDelay>
    3fd6:	c5 cf       	rjmp	.-118    	; 0x3f62 <_hal_led_task+0xe>

00003fd8 <led_create>:
    3fd8:	cf 92       	push	r12
    3fda:	df 92       	push	r13
    3fdc:	ef 92       	push	r14
    3fde:	ff 92       	push	r15
    3fe0:	0f 93       	push	r16
    3fe2:	1f 93       	push	r17
    3fe4:	cf 93       	push	r28
    3fe6:	df 93       	push	r29
    3fe8:	06 2f       	mov	r16, r22
    3fea:	0f 2e       	mov	r0, r31
    3fec:	f1 e5       	ldi	r31, 0x51	; 81
    3fee:	ef 2e       	mov	r14, r31
    3ff0:	fb e1       	ldi	r31, 0x1B	; 27
    3ff2:	ff 2e       	mov	r15, r31
    3ff4:	f0 2d       	mov	r31, r0
    3ff6:	d7 01       	movw	r26, r14
    3ff8:	18 96       	adiw	r26, 0x08	; 8
    3ffa:	ed 91       	ld	r30, X+
    3ffc:	fc 91       	ld	r31, X
    3ffe:	19 97       	sbiw	r26, 0x09	; 9
    4000:	66 e0       	ldi	r22, 0x06	; 6
    4002:	87 e2       	ldi	r24, 0x27	; 39
    4004:	90 e0       	ldi	r25, 0x00	; 0
    4006:	19 95       	eicall
    4008:	c8 ed       	ldi	r28, 0xD8	; 216
    400a:	d9 e1       	ldi	r29, 0x19	; 25
    400c:	0f 2e       	mov	r0, r31
    400e:	f8 e2       	ldi	r31, 0x28	; 40
    4010:	cf 2e       	mov	r12, r31
    4012:	d1 2c       	mov	r13, r1
    4014:	f0 2d       	mov	r31, r0
    4016:	d9 82       	std	Y+1, r13	; 0x01
    4018:	c8 82       	st	Y, r12
    401a:	86 e0       	ldi	r24, 0x06	; 6
    401c:	8a 83       	std	Y+2, r24	; 0x02
    401e:	1b 82       	std	Y+3, r1	; 0x03
    4020:	14 e0       	ldi	r17, 0x04	; 4
    4022:	1c 83       	std	Y+4, r17	; 0x04
    4024:	80 e0       	ldi	r24, 0x00	; 0
    4026:	3a df       	rcall	.-396    	; 0x3e9c <_turn_off>
    4028:	d7 01       	movw	r26, r14
    402a:	18 96       	adiw	r26, 0x08	; 8
    402c:	ed 91       	ld	r30, X+
    402e:	fc 91       	ld	r31, X
    4030:	19 97       	sbiw	r26, 0x09	; 9
    4032:	67 e0       	ldi	r22, 0x07	; 7
    4034:	87 e2       	ldi	r24, 0x27	; 39
    4036:	90 e0       	ldi	r25, 0x00	; 0
    4038:	19 95       	eicall
    403a:	df 82       	std	Y+7, r13	; 0x07
    403c:	ce 82       	std	Y+6, r12	; 0x06
    403e:	87 e0       	ldi	r24, 0x07	; 7
    4040:	88 87       	std	Y+8, r24	; 0x08
    4042:	19 86       	std	Y+9, r1	; 0x09
    4044:	1a 87       	std	Y+10, r17	; 0x0a
    4046:	81 e0       	ldi	r24, 0x01	; 1
    4048:	29 df       	rcall	.-430    	; 0x3e9c <_turn_off>
    404a:	d7 01       	movw	r26, r14
    404c:	18 96       	adiw	r26, 0x08	; 8
    404e:	ed 91       	ld	r30, X+
    4050:	fc 91       	ld	r31, X
    4052:	19 97       	sbiw	r26, 0x09	; 9
    4054:	65 e0       	ldi	r22, 0x05	; 5
    4056:	83 e3       	ldi	r24, 0x33	; 51
    4058:	90 e0       	ldi	r25, 0x00	; 0
    405a:	19 95       	eicall
    405c:	d7 01       	movw	r26, r14
    405e:	18 96       	adiw	r26, 0x08	; 8
    4060:	ed 91       	ld	r30, X+
    4062:	fc 91       	ld	r31, X
    4064:	19 97       	sbiw	r26, 0x09	; 9
    4066:	61 e0       	ldi	r22, 0x01	; 1
    4068:	84 e3       	ldi	r24, 0x34	; 52
    406a:	90 e0       	ldi	r25, 0x00	; 0
    406c:	19 95       	eicall
    406e:	84 e3       	ldi	r24, 0x34	; 52
    4070:	90 e0       	ldi	r25, 0x00	; 0
    4072:	9d 87       	std	Y+13, r25	; 0x0d
    4074:	8c 87       	std	Y+12, r24	; 0x0c
    4076:	85 e0       	ldi	r24, 0x05	; 5
    4078:	8e 87       	std	Y+14, r24	; 0x0e
    407a:	1f 86       	std	Y+15, r1	; 0x0f
    407c:	18 8b       	std	Y+16, r17	; 0x10
    407e:	82 e0       	ldi	r24, 0x02	; 2
    4080:	0d df       	rcall	.-486    	; 0x3e9c <_turn_off>
    4082:	d7 01       	movw	r26, r14
    4084:	18 96       	adiw	r26, 0x08	; 8
    4086:	ed 91       	ld	r30, X+
    4088:	fc 91       	ld	r31, X
    408a:	19 97       	sbiw	r26, 0x09	; 9
    408c:	64 e0       	ldi	r22, 0x04	; 4
    408e:	81 e0       	ldi	r24, 0x01	; 1
    4090:	91 e0       	ldi	r25, 0x01	; 1
    4092:	19 95       	eicall
    4094:	d7 01       	movw	r26, r14
    4096:	18 96       	adiw	r26, 0x08	; 8
    4098:	ed 91       	ld	r30, X+
    409a:	fc 91       	ld	r31, X
    409c:	19 97       	sbiw	r26, 0x09	; 9
    409e:	61 e0       	ldi	r22, 0x01	; 1
    40a0:	82 e0       	ldi	r24, 0x02	; 2
    40a2:	91 e0       	ldi	r25, 0x01	; 1
    40a4:	19 95       	eicall
    40a6:	82 e0       	ldi	r24, 0x02	; 2
    40a8:	91 e0       	ldi	r25, 0x01	; 1
    40aa:	9b 8b       	std	Y+19, r25	; 0x13
    40ac:	8a 8b       	std	Y+18, r24	; 0x12
    40ae:	1c 8b       	std	Y+20, r17	; 0x14
    40b0:	1d 8a       	std	Y+21, r1	; 0x15
    40b2:	1e 8b       	std	Y+22, r17	; 0x16
    40b4:	83 e0       	ldi	r24, 0x03	; 3
    40b6:	f2 de       	rcall	.-540    	; 0x3e9c <_turn_off>
    40b8:	e1 2c       	mov	r14, r1
    40ba:	f1 2c       	mov	r15, r1
    40bc:	20 e0       	ldi	r18, 0x00	; 0
    40be:	30 e0       	ldi	r19, 0x00	; 0
    40c0:	40 ec       	ldi	r20, 0xC0	; 192
    40c2:	50 e0       	ldi	r21, 0x00	; 0
    40c4:	63 ee       	ldi	r22, 0xE3	; 227
    40c6:	75 e0       	ldi	r23, 0x05	; 5
    40c8:	8a ea       	ldi	r24, 0xAA	; 170
    40ca:	9f e1       	ldi	r25, 0x1F	; 31
    40cc:	0e 94 81 14 	call	0x2902	; 0x2902 <xTaskCreate>
    40d0:	df 91       	pop	r29
    40d2:	cf 91       	pop	r28
    40d4:	1f 91       	pop	r17
    40d6:	0f 91       	pop	r16
    40d8:	ff 90       	pop	r15
    40da:	ef 90       	pop	r14
    40dc:	df 90       	pop	r13
    40de:	cf 90       	pop	r12
    40e0:	08 95       	ret

000040e2 <led_slow_blink>:
    40e2:	0f 93       	push	r16
    40e4:	1f 93       	push	r17
    40e6:	cf 93       	push	r28
    40e8:	df 93       	push	r29
    40ea:	c8 2f       	mov	r28, r24
    40ec:	d0 e0       	ldi	r29, 0x00	; 0
    40ee:	8e 01       	movw	r16, r28
    40f0:	00 0f       	add	r16, r16
    40f2:	11 1f       	adc	r17, r17
    40f4:	d8 01       	movw	r26, r16
    40f6:	ac 0f       	add	r26, r28
    40f8:	bd 1f       	adc	r27, r29
    40fa:	aa 0f       	add	r26, r26
    40fc:	bb 1f       	adc	r27, r27
    40fe:	a8 52       	subi	r26, 0x28	; 40
    4100:	b6 4e       	sbci	r27, 0xE6	; 230
    4102:	e0 91 5d 1b 	lds	r30, 0x1B5D	; 0x801b5d <register_access+0xc>
    4106:	f0 91 5e 1b 	lds	r31, 0x1B5E	; 0x801b5e <register_access+0xd>
    410a:	12 96       	adiw	r26, 0x02	; 2
    410c:	6c 91       	ld	r22, X
    410e:	12 97       	sbiw	r26, 0x02	; 2
    4110:	8d 91       	ld	r24, X+
    4112:	9c 91       	ld	r25, X
    4114:	19 95       	eicall
    4116:	c0 0f       	add	r28, r16
    4118:	d1 1f       	adc	r29, r17
    411a:	cc 0f       	add	r28, r28
    411c:	dd 1f       	adc	r29, r29
    411e:	c8 52       	subi	r28, 0x28	; 40
    4120:	d6 4e       	sbci	r29, 0xE6	; 230
    4122:	81 e0       	ldi	r24, 0x01	; 1
    4124:	8c 83       	std	Y+4, r24	; 0x04
    4126:	df 91       	pop	r29
    4128:	cf 91       	pop	r28
    412a:	1f 91       	pop	r17
    412c:	0f 91       	pop	r16
    412e:	08 95       	ret

00004130 <led_fast_blink>:
    4130:	0f 93       	push	r16
    4132:	1f 93       	push	r17
    4134:	cf 93       	push	r28
    4136:	df 93       	push	r29
    4138:	c8 2f       	mov	r28, r24
    413a:	d0 e0       	ldi	r29, 0x00	; 0
    413c:	8e 01       	movw	r16, r28
    413e:	00 0f       	add	r16, r16
    4140:	11 1f       	adc	r17, r17
    4142:	d8 01       	movw	r26, r16
    4144:	ac 0f       	add	r26, r28
    4146:	bd 1f       	adc	r27, r29
    4148:	aa 0f       	add	r26, r26
    414a:	bb 1f       	adc	r27, r27
    414c:	a8 52       	subi	r26, 0x28	; 40
    414e:	b6 4e       	sbci	r27, 0xE6	; 230
    4150:	e0 91 5d 1b 	lds	r30, 0x1B5D	; 0x801b5d <register_access+0xc>
    4154:	f0 91 5e 1b 	lds	r31, 0x1B5E	; 0x801b5e <register_access+0xd>
    4158:	12 96       	adiw	r26, 0x02	; 2
    415a:	6c 91       	ld	r22, X
    415c:	12 97       	sbiw	r26, 0x02	; 2
    415e:	8d 91       	ld	r24, X+
    4160:	9c 91       	ld	r25, X
    4162:	19 95       	eicall
    4164:	c0 0f       	add	r28, r16
    4166:	d1 1f       	adc	r29, r17
    4168:	cc 0f       	add	r28, r28
    416a:	dd 1f       	adc	r29, r29
    416c:	c8 52       	subi	r28, 0x28	; 40
    416e:	d6 4e       	sbci	r29, 0xE6	; 230
    4170:	82 e0       	ldi	r24, 0x02	; 2
    4172:	8c 83       	std	Y+4, r24	; 0x04
    4174:	df 91       	pop	r29
    4176:	cf 91       	pop	r28
    4178:	1f 91       	pop	r17
    417a:	0f 91       	pop	r16
    417c:	08 95       	ret

0000417e <led_led_on>:
    417e:	28 2f       	mov	r18, r24
    4180:	30 e0       	ldi	r19, 0x00	; 0
    4182:	f9 01       	movw	r30, r18
    4184:	ee 0f       	add	r30, r30
    4186:	ff 1f       	adc	r31, r31
    4188:	e2 0f       	add	r30, r18
    418a:	f3 1f       	adc	r31, r19
    418c:	ee 0f       	add	r30, r30
    418e:	ff 1f       	adc	r31, r31
    4190:	e8 52       	subi	r30, 0x28	; 40
    4192:	f6 4e       	sbci	r31, 0xE6	; 230
    4194:	93 e0       	ldi	r25, 0x03	; 3
    4196:	94 83       	std	Z+4, r25	; 0x04
    4198:	af ce       	rjmp	.-674    	; 0x3ef8 <_turn_on>
    419a:	08 95       	ret

0000419c <led_led_off>:
    419c:	28 2f       	mov	r18, r24
    419e:	30 e0       	ldi	r19, 0x00	; 0
    41a0:	f9 01       	movw	r30, r18
    41a2:	ee 0f       	add	r30, r30
    41a4:	ff 1f       	adc	r31, r31
    41a6:	e2 0f       	add	r30, r18
    41a8:	f3 1f       	adc	r31, r19
    41aa:	ee 0f       	add	r30, r30
    41ac:	ff 1f       	adc	r31, r31
    41ae:	e8 52       	subi	r30, 0x28	; 40
    41b0:	f6 4e       	sbci	r31, 0xE6	; 230
    41b2:	94 e0       	ldi	r25, 0x04	; 4
    41b4:	94 83       	std	Z+4, r25	; 0x04
    41b6:	72 ce       	rjmp	.-796    	; 0x3e9c <_turn_off>
    41b8:	08 95       	ret

000041ba <led_long_puls>:
    41ba:	90 e0       	ldi	r25, 0x00	; 0
    41bc:	fc 01       	movw	r30, r24
    41be:	ee 0f       	add	r30, r30
    41c0:	ff 1f       	adc	r31, r31
    41c2:	df 01       	movw	r26, r30
    41c4:	a8 0f       	add	r26, r24
    41c6:	b9 1f       	adc	r27, r25
    41c8:	aa 0f       	add	r26, r26
    41ca:	bb 1f       	adc	r27, r27
    41cc:	a8 52       	subi	r26, 0x28	; 40
    41ce:	b6 4e       	sbci	r27, 0xE6	; 230
    41d0:	24 e0       	ldi	r18, 0x04	; 4
    41d2:	15 96       	adiw	r26, 0x05	; 5
    41d4:	2c 93       	st	X, r18
    41d6:	15 97       	sbiw	r26, 0x05	; 5
    41d8:	fd 01       	movw	r30, r26
    41da:	14 82       	std	Z+4, r1	; 0x04
    41dc:	08 95       	ret

000041de <led_short_puls>:
    41de:	90 e0       	ldi	r25, 0x00	; 0
    41e0:	fc 01       	movw	r30, r24
    41e2:	ee 0f       	add	r30, r30
    41e4:	ff 1f       	adc	r31, r31
    41e6:	df 01       	movw	r26, r30
    41e8:	a8 0f       	add	r26, r24
    41ea:	b9 1f       	adc	r27, r25
    41ec:	aa 0f       	add	r26, r26
    41ee:	bb 1f       	adc	r27, r27
    41f0:	a8 52       	subi	r26, 0x28	; 40
    41f2:	b6 4e       	sbci	r27, 0xE6	; 230
    41f4:	21 e0       	ldi	r18, 0x01	; 1
    41f6:	15 96       	adiw	r26, 0x05	; 5
    41f8:	2c 93       	st	X, r18
    41fa:	15 97       	sbiw	r26, 0x05	; 5
    41fc:	fd 01       	movw	r30, r26
    41fe:	14 82       	std	Z+4, r1	; 0x04
    4200:	08 95       	ret

00004202 <_serial_call_back>:
    4202:	0f 93       	push	r16
    4204:	1f 93       	push	r17
    4206:	cf 93       	push	r28
    4208:	df 93       	push	r29
    420a:	1f 92       	push	r1
    420c:	1f 92       	push	r1
    420e:	cd b7       	in	r28, 0x3d	; 61
    4210:	de b7       	in	r29, 0x3e	; 62
    4212:	8c 01       	movw	r16, r24
    4214:	19 82       	std	Y+1, r1	; 0x01
    4216:	2d c0       	rjmp	.+90     	; 0x4272 <_serial_call_back+0x70>
    4218:	e0 91 54 1a 	lds	r30, 0x1A54	; 0x801a54 <rec_buf_inp.2947>
    421c:	ec 32       	cpi	r30, 0x2C	; 44
    421e:	50 f4       	brcc	.+20     	; 0x4234 <_serial_call_back+0x32>
    4220:	81 e0       	ldi	r24, 0x01	; 1
    4222:	8e 0f       	add	r24, r30
    4224:	80 93 54 1a 	sts	0x1A54, r24	; 0x801a54 <rec_buf_inp.2947>
    4228:	f0 e0       	ldi	r31, 0x00	; 0
    422a:	ea 57       	subi	r30, 0x7A	; 122
    422c:	f5 4e       	sbci	r31, 0xE5	; 229
    422e:	8a 81       	ldd	r24, Y+2	; 0x02
    4230:	80 83       	st	Z, r24
    4232:	02 c0       	rjmp	.+4      	; 0x4238 <_serial_call_back+0x36>
    4234:	10 92 54 1a 	sts	0x1A54, r1	; 0x801a54 <rec_buf_inp.2947>
    4238:	8a 81       	ldd	r24, Y+2	; 0x02
    423a:	8a 30       	cpi	r24, 0x0A	; 10
    423c:	d1 f4       	brne	.+52     	; 0x4272 <_serial_call_back+0x70>
    423e:	40 91 54 1a 	lds	r20, 0x1A54	; 0x801a54 <rec_buf_inp.2947>
    4242:	50 e0       	ldi	r21, 0x00	; 0
    4244:	fa 01       	movw	r30, r20
    4246:	ec 57       	subi	r30, 0x7C	; 124
    4248:	f5 4e       	sbci	r31, 0xE5	; 229
    424a:	10 82       	st	Z, r1
    424c:	41 50       	subi	r20, 0x01	; 1
    424e:	51 09       	sbc	r21, r1
    4250:	9e 01       	movw	r18, r28
    4252:	2f 5f       	subi	r18, 0xFF	; 255
    4254:	3f 4f       	sbci	r19, 0xFF	; 255
    4256:	66 e8       	ldi	r22, 0x86	; 134
    4258:	7a e1       	ldi	r23, 0x1A	; 26
    425a:	80 91 57 1a 	lds	r24, 0x1A57	; 0x801a57 <_serial_reply_buffer_handle>
    425e:	90 91 58 1a 	lds	r25, 0x1A58	; 0x801a58 <_serial_reply_buffer_handle+0x1>
    4262:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <xStreamBufferSendFromISR>
    4266:	89 81       	ldd	r24, Y+1	; 0x01
    4268:	81 11       	cpse	r24, r1
    426a:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <vPortYield>
    426e:	10 92 54 1a 	sts	0x1A54, r1	; 0x801a54 <rec_buf_inp.2947>
    4272:	be 01       	movw	r22, r28
    4274:	6e 5f       	subi	r22, 0xFE	; 254
    4276:	7f 4f       	sbci	r23, 0xFF	; 255
    4278:	c8 01       	movw	r24, r16
    427a:	47 d6       	rcall	.+3214   	; 0x4f0a <serial_get_byte>
    427c:	88 23       	and	r24, r24
    427e:	61 f2       	breq	.-104    	; 0x4218 <_serial_call_back+0x16>
    4280:	0f 90       	pop	r0
    4282:	0f 90       	pop	r0
    4284:	df 91       	pop	r29
    4286:	cf 91       	pop	r28
    4288:	1f 91       	pop	r17
    428a:	0f 91       	pop	r16
    428c:	08 95       	ret

0000428e <_upload_message>:
    428e:	0f 93       	push	r16
    4290:	1f 93       	push	r17
    4292:	cf 93       	push	r28
    4294:	df 93       	push	r29
    4296:	8c 01       	movw	r16, r24
    4298:	eb 01       	movw	r28, r22
    429a:	80 91 57 1a 	lds	r24, 0x1A57	; 0x801a57 <_serial_reply_buffer_handle>
    429e:	90 91 58 1a 	lds	r25, 0x1A58	; 0x801a58 <_serial_reply_buffer_handle+0x1>
    42a2:	0e 94 12 12 	call	0x2424	; 0x2424 <xStreamBufferReset>
    42a6:	b8 01       	movw	r22, r16
    42a8:	80 ef       	ldi	r24, 0xF0	; 240
    42aa:	99 e1       	ldi	r25, 0x19	; 25
    42ac:	0e 94 92 2f 	call	0x5f24	; 0x5f24 <strcpy>
    42b0:	20 97       	sbiw	r28, 0x00	; 0
    42b2:	79 f0       	breq	.+30     	; 0x42d2 <_upload_message+0x44>
    42b4:	e0 ef       	ldi	r30, 0xF0	; 240
    42b6:	f9 e1       	ldi	r31, 0x19	; 25
    42b8:	01 90       	ld	r0, Z+
    42ba:	00 20       	and	r0, r0
    42bc:	e9 f7       	brne	.-6      	; 0x42b8 <_upload_message+0x2a>
    42be:	31 97       	sbiw	r30, 0x01	; 1
    42c0:	80 e2       	ldi	r24, 0x20	; 32
    42c2:	90 e0       	ldi	r25, 0x00	; 0
    42c4:	91 83       	std	Z+1, r25	; 0x01
    42c6:	80 83       	st	Z, r24
    42c8:	be 01       	movw	r22, r28
    42ca:	80 ef       	ldi	r24, 0xF0	; 240
    42cc:	99 e1       	ldi	r25, 0x19	; 25
    42ce:	0e 94 87 2f 	call	0x5f0e	; 0x5f0e <strcat>
    42d2:	e0 ef       	ldi	r30, 0xF0	; 240
    42d4:	f9 e1       	ldi	r31, 0x19	; 25
    42d6:	df 01       	movw	r26, r30
    42d8:	0d 90       	ld	r0, X+
    42da:	00 20       	and	r0, r0
    42dc:	e9 f7       	brne	.-6      	; 0x42d8 <_upload_message+0x4a>
    42de:	11 97       	sbiw	r26, 0x01	; 1
    42e0:	8d e0       	ldi	r24, 0x0D	; 13
    42e2:	9a e0       	ldi	r25, 0x0A	; 10
    42e4:	11 96       	adiw	r26, 0x01	; 1
    42e6:	9c 93       	st	X, r25
    42e8:	8e 93       	st	-X, r24
    42ea:	12 96       	adiw	r26, 0x02	; 2
    42ec:	1c 92       	st	X, r1
    42ee:	01 90       	ld	r0, Z+
    42f0:	00 20       	and	r0, r0
    42f2:	e9 f7       	brne	.-6      	; 0x42ee <_upload_message+0x60>
    42f4:	31 97       	sbiw	r30, 0x01	; 1
    42f6:	e0 5f       	subi	r30, 0xF0	; 240
    42f8:	f9 41       	sbci	r31, 0x19	; 25
    42fa:	ae 2f       	mov	r26, r30
    42fc:	80 ef       	ldi	r24, 0xF0	; 240
    42fe:	99 e1       	ldi	r25, 0x19	; 25
    4300:	ac 01       	movw	r20, r24
    4302:	6a 2f       	mov	r22, r26
    4304:	80 91 59 1a 	lds	r24, 0x1A59	; 0x801a59 <_rn2483_serial>
    4308:	90 91 5a 1a 	lds	r25, 0x1A5A	; 0x801a5a <_rn2483_serial+0x1>
    430c:	ae d5       	rcall	.+2908   	; 0x4e6a <serial_send_bytes>
    430e:	81 11       	cpse	r24, r1
    4310:	11 c0       	rjmp	.+34     	; 0x4334 <_upload_message+0xa6>
    4312:	08 e2       	ldi	r16, 0x28	; 40
    4314:	15 e0       	ldi	r17, 0x05	; 5
    4316:	20 e0       	ldi	r18, 0x00	; 0
    4318:	30 e0       	ldi	r19, 0x00	; 0
    431a:	4d e2       	ldi	r20, 0x2D	; 45
    431c:	50 e0       	ldi	r21, 0x00	; 0
    431e:	60 ee       	ldi	r22, 0xE0	; 224
    4320:	7a e1       	ldi	r23, 0x1A	; 26
    4322:	80 91 57 1a 	lds	r24, 0x1A57	; 0x801a57 <_serial_reply_buffer_handle>
    4326:	90 91 58 1a 	lds	r25, 0x1A58	; 0x801a58 <_serial_reply_buffer_handle+0x1>
    432a:	0e 94 3e 13 	call	0x267c	; 0x267c <xStreamBufferReceive>
    432e:	80 ee       	ldi	r24, 0xE0	; 224
    4330:	9a e1       	ldi	r25, 0x1A	; 26
    4332:	02 c0       	rjmp	.+4      	; 0x4338 <_upload_message+0xaa>
    4334:	80 e0       	ldi	r24, 0x00	; 0
    4336:	90 e0       	ldi	r25, 0x00	; 0
    4338:	df 91       	pop	r29
    433a:	cf 91       	pop	r28
    433c:	1f 91       	pop	r17
    433e:	0f 91       	pop	r16
    4340:	08 95       	ret

00004342 <_reply2return_code>:
    4342:	2f 92       	push	r2
    4344:	3f 92       	push	r3
    4346:	4f 92       	push	r4
    4348:	5f 92       	push	r5
    434a:	6f 92       	push	r6
    434c:	7f 92       	push	r7
    434e:	8f 92       	push	r8
    4350:	9f 92       	push	r9
    4352:	af 92       	push	r10
    4354:	bf 92       	push	r11
    4356:	cf 92       	push	r12
    4358:	df 92       	push	r13
    435a:	ef 92       	push	r14
    435c:	ff 92       	push	r15
    435e:	0f 93       	push	r16
    4360:	1f 93       	push	r17
    4362:	cf 93       	push	r28
    4364:	df 93       	push	r29
    4366:	5c 01       	movw	r10, r24
    4368:	fc 01       	movw	r30, r24
    436a:	01 90       	ld	r0, Z+
    436c:	00 20       	and	r0, r0
    436e:	e9 f7       	brne	.-6      	; 0x436a <_reply2return_code+0x28>
    4370:	31 97       	sbiw	r30, 0x01	; 1
    4372:	6f 01       	movw	r12, r30
    4374:	c8 1a       	sub	r12, r24
    4376:	d9 0a       	sbc	r13, r25
    4378:	5c 2c       	mov	r5, r12
    437a:	0f 2e       	mov	r0, r31
    437c:	f4 e8       	ldi	r31, 0x84	; 132
    437e:	8f 2e       	mov	r8, r31
    4380:	f8 e0       	ldi	r31, 0x08	; 8
    4382:	9f 2e       	mov	r9, r31
    4384:	f0 2d       	mov	r31, r0
    4386:	e1 2c       	mov	r14, r1
    4388:	f1 2c       	mov	r15, r1
    438a:	4c 2c       	mov	r4, r12
    438c:	37 01       	movw	r6, r14
    438e:	f4 01       	movw	r30, r8
    4390:	01 81       	ldd	r16, Z+1	; 0x01
    4392:	12 81       	ldd	r17, Z+2	; 0x02
    4394:	e8 01       	movw	r28, r16
    4396:	09 90       	ld	r0, Y+
    4398:	00 20       	and	r0, r0
    439a:	e9 f7       	brne	.-6      	; 0x4396 <_reply2return_code+0x54>
    439c:	21 97       	sbiw	r28, 0x01	; 1
    439e:	c0 1b       	sub	r28, r16
    43a0:	d1 0b       	sbc	r29, r17
    43a2:	3c 2e       	mov	r3, r28
    43a4:	f9 e0       	ldi	r31, 0x09	; 9
    43a6:	cf 16       	cp	r12, r31
    43a8:	d1 04       	cpc	r13, r1
    43aa:	58 f0       	brcs	.+22     	; 0x43c2 <_reply2return_code+0x80>
    43ac:	f4 01       	movw	r30, r8
    43ae:	20 80       	ld	r2, Z
    43b0:	fe e0       	ldi	r31, 0x0E	; 14
    43b2:	2f 12       	cpse	r2, r31
    43b4:	06 c0       	rjmp	.+12     	; 0x43c2 <_reply2return_code+0x80>
    43b6:	b8 01       	movw	r22, r16
    43b8:	c5 01       	movw	r24, r10
    43ba:	0e 94 62 2f 	call	0x5ec4	; 0x5ec4 <strcasestr>
    43be:	89 2b       	or	r24, r25
    43c0:	09 f5       	brne	.+66     	; 0x4404 <_reply2return_code+0xc2>
    43c2:	44 2d       	mov	r20, r4
    43c4:	35 14       	cp	r3, r5
    43c6:	08 f4       	brcc	.+2      	; 0x43ca <_reply2return_code+0x88>
    43c8:	4c 2f       	mov	r20, r28
    43ca:	50 e0       	ldi	r21, 0x00	; 0
    43cc:	b8 01       	movw	r22, r16
    43ce:	c5 01       	movw	r24, r10
    43d0:	0e 94 99 2f 	call	0x5f32	; 0x5f32 <strncasecmp>
    43d4:	89 2b       	or	r24, r25
    43d6:	49 f4       	brne	.+18     	; 0x43ea <_reply2return_code+0xa8>
    43d8:	f3 01       	movw	r30, r6
    43da:	ee 0f       	add	r30, r30
    43dc:	ff 1f       	adc	r31, r31
    43de:	e6 0d       	add	r30, r6
    43e0:	f7 1d       	adc	r31, r7
    43e2:	ec 57       	subi	r30, 0x7C	; 124
    43e4:	f7 4f       	sbci	r31, 0xF7	; 247
    43e6:	20 80       	ld	r2, Z
    43e8:	0d c0       	rjmp	.+26     	; 0x4404 <_reply2return_code+0xc2>
    43ea:	8f ef       	ldi	r24, 0xFF	; 255
    43ec:	e8 1a       	sub	r14, r24
    43ee:	f8 0a       	sbc	r15, r24
    43f0:	e3 e0       	ldi	r30, 0x03	; 3
    43f2:	8e 0e       	add	r8, r30
    43f4:	91 1c       	adc	r9, r1
    43f6:	f1 e1       	ldi	r31, 0x11	; 17
    43f8:	ef 16       	cp	r14, r31
    43fa:	f1 04       	cpc	r15, r1
    43fc:	39 f6       	brne	.-114    	; 0x438c <_reply2return_code+0x4a>
    43fe:	68 94       	set
    4400:	22 24       	eor	r2, r2
    4402:	24 f8       	bld	r2, 4
    4404:	82 2d       	mov	r24, r2
    4406:	df 91       	pop	r29
    4408:	cf 91       	pop	r28
    440a:	1f 91       	pop	r17
    440c:	0f 91       	pop	r16
    440e:	ff 90       	pop	r15
    4410:	ef 90       	pop	r14
    4412:	df 90       	pop	r13
    4414:	cf 90       	pop	r12
    4416:	bf 90       	pop	r11
    4418:	af 90       	pop	r10
    441a:	9f 90       	pop	r9
    441c:	8f 90       	pop	r8
    441e:	7f 90       	pop	r7
    4420:	6f 90       	pop	r6
    4422:	5f 90       	pop	r5
    4424:	4f 90       	pop	r4
    4426:	3f 90       	pop	r3
    4428:	2f 90       	pop	r2
    442a:	08 95       	ret

0000442c <_upload_message_rc>:
    442c:	30 df       	rcall	.-416    	; 0x428e <_upload_message>
    442e:	89 cf       	rjmp	.-238    	; 0x4342 <_reply2return_code>
    4430:	08 95       	ret

00004432 <lora_driver_flush_buffers>:
    4432:	80 91 57 1a 	lds	r24, 0x1A57	; 0x801a57 <_serial_reply_buffer_handle>
    4436:	90 91 58 1a 	lds	r25, 0x1A58	; 0x801a58 <_serial_reply_buffer_handle+0x1>
    443a:	0c 94 12 12 	jmp	0x2424	; 0x2424 <xStreamBufferReset>
    443e:	08 95       	ret

00004440 <lora_driver_create>:
    4440:	8f 92       	push	r8
    4442:	9f 92       	push	r9
    4444:	af 92       	push	r10
    4446:	cf 92       	push	r12
    4448:	ef 92       	push	r14
    444a:	0f 93       	push	r16
    444c:	1f 93       	push	r17
    444e:	cf 93       	push	r28
    4450:	c8 2f       	mov	r28, r24
    4452:	8b 01       	movw	r16, r22
    4454:	41 e0       	ldi	r20, 0x01	; 1
    4456:	60 e0       	ldi	r22, 0x00	; 0
    4458:	70 e0       	ldi	r23, 0x00	; 0
    445a:	88 ec       	ldi	r24, 0xC8	; 200
    445c:	90 e0       	ldi	r25, 0x00	; 0
    445e:	0e 94 e6 11 	call	0x23cc	; 0x23cc <xStreamBufferGenericCreate>
    4462:	90 93 58 1a 	sts	0x1A58, r25	; 0x801a58 <_serial_reply_buffer_handle+0x1>
    4466:	80 93 57 1a 	sts	0x1A57, r24	; 0x801a57 <_serial_reply_buffer_handle>
    446a:	10 93 56 1a 	sts	0x1A56, r17	; 0x801a56 <_downlinkMessageBuffer+0x1>
    446e:	00 93 55 1a 	sts	0x1A55, r16	; 0x801a55 <_downlinkMessageBuffer>
    4472:	0f 2e       	mov	r0, r31
    4474:	f1 e0       	ldi	r31, 0x01	; 1
    4476:	8f 2e       	mov	r8, r31
    4478:	f1 e2       	ldi	r31, 0x21	; 33
    447a:	9f 2e       	mov	r9, r31
    447c:	f0 2d       	mov	r31, r0
    447e:	68 94       	set
    4480:	aa 24       	eor	r10, r10
    4482:	a6 f8       	bld	r10, 6
    4484:	68 94       	set
    4486:	cc 24       	eor	r12, r12
    4488:	c6 f8       	bld	r12, 6
    448a:	e1 2c       	mov	r14, r1
    448c:	00 e0       	ldi	r16, 0x00	; 0
    448e:	23 e0       	ldi	r18, 0x03	; 3
    4490:	40 e0       	ldi	r20, 0x00	; 0
    4492:	51 ee       	ldi	r21, 0xE1	; 225
    4494:	60 e0       	ldi	r22, 0x00	; 0
    4496:	70 e0       	ldi	r23, 0x00	; 0
    4498:	8c 2f       	mov	r24, r28
    449a:	2c d4       	rcall	.+2136   	; 0x4cf4 <serial_new_instance>
    449c:	90 93 5a 1a 	sts	0x1A5A, r25	; 0x801a5a <_rn2483_serial+0x1>
    44a0:	80 93 59 1a 	sts	0x1A59, r24	; 0x801a59 <_rn2483_serial>
    44a4:	e0 91 59 1b 	lds	r30, 0x1B59	; 0x801b59 <register_access+0x8>
    44a8:	f0 91 5a 1b 	lds	r31, 0x1B5A	; 0x801b5a <register_access+0x9>
    44ac:	64 e0       	ldi	r22, 0x04	; 4
    44ae:	87 e0       	ldi	r24, 0x07	; 7
    44b0:	91 e0       	ldi	r25, 0x01	; 1
    44b2:	19 95       	eicall
    44b4:	cf 91       	pop	r28
    44b6:	1f 91       	pop	r17
    44b8:	0f 91       	pop	r16
    44ba:	ef 90       	pop	r14
    44bc:	cf 90       	pop	r12
    44be:	af 90       	pop	r10
    44c0:	9f 90       	pop	r9
    44c2:	8f 90       	pop	r8
    44c4:	08 95       	ret

000044c6 <lora_driver_reset_rn2483>:
    44c6:	88 23       	and	r24, r24
    44c8:	49 f0       	breq	.+18     	; 0x44dc <lora_driver_reset_rn2483+0x16>
    44ca:	e0 91 63 1b 	lds	r30, 0x1B63	; 0x801b63 <register_access+0x12>
    44ce:	f0 91 64 1b 	lds	r31, 0x1B64	; 0x801b64 <register_access+0x13>
    44d2:	64 e0       	ldi	r22, 0x04	; 4
    44d4:	88 e0       	ldi	r24, 0x08	; 8
    44d6:	91 e0       	ldi	r25, 0x01	; 1
    44d8:	19 95       	eicall
    44da:	08 95       	ret
    44dc:	e0 91 59 1b 	lds	r30, 0x1B59	; 0x801b59 <register_access+0x8>
    44e0:	f0 91 5a 1b 	lds	r31, 0x1B5A	; 0x801b5a <register_access+0x9>
    44e4:	64 e0       	ldi	r22, 0x04	; 4
    44e6:	88 e0       	ldi	r24, 0x08	; 8
    44e8:	91 e0       	ldi	r25, 0x01	; 1
    44ea:	19 95       	eicall
    44ec:	08 95       	ret

000044ee <lora_driver_rn2483_factory_reset>:
    44ee:	60 e0       	ldi	r22, 0x00	; 0
    44f0:	70 e0       	ldi	r23, 0x00	; 0
    44f2:	8a e0       	ldi	r24, 0x0A	; 10
    44f4:	96 e0       	ldi	r25, 0x06	; 6
    44f6:	cb de       	rcall	.-618    	; 0x428e <_upload_message>
    44f8:	e0 ee       	ldi	r30, 0xE0	; 224
    44fa:	fa e1       	ldi	r31, 0x1A	; 26
    44fc:	01 90       	ld	r0, Z+
    44fe:	00 20       	and	r0, r0
    4500:	e9 f7       	brne	.-6      	; 0x44fc <lora_driver_rn2483_factory_reset+0xe>
    4502:	31 97       	sbiw	r30, 0x01	; 1
    4504:	e0 5e       	subi	r30, 0xE0	; 224
    4506:	fa 41       	sbci	r31, 0x1A	; 26
    4508:	81 e0       	ldi	r24, 0x01	; 1
    450a:	75 97       	sbiw	r30, 0x15	; 21
    450c:	08 f0       	brcs	.+2      	; 0x4510 <lora_driver_rn2483_factory_reset+0x22>
    450e:	80 e0       	ldi	r24, 0x00	; 0
    4510:	08 95       	ret

00004512 <lora_driver_get_rn2483_hweui>:
    4512:	cf 93       	push	r28
    4514:	df 93       	push	r29
    4516:	ec 01       	movw	r28, r24
    4518:	60 e0       	ldi	r22, 0x00	; 0
    451a:	70 e0       	ldi	r23, 0x00	; 0
    451c:	8b e1       	ldi	r24, 0x1B	; 27
    451e:	96 e0       	ldi	r25, 0x06	; 6
    4520:	b6 de       	rcall	.-660    	; 0x428e <_upload_message>
    4522:	e0 ee       	ldi	r30, 0xE0	; 224
    4524:	fa e1       	ldi	r31, 0x1A	; 26
    4526:	01 90       	ld	r0, Z+
    4528:	00 20       	and	r0, r0
    452a:	e9 f7       	brne	.-6      	; 0x4526 <lora_driver_get_rn2483_hweui+0x14>
    452c:	e1 5f       	subi	r30, 0xF1	; 241
    452e:	fa 41       	sbci	r31, 0x1A	; 26
    4530:	39 f4       	brne	.+14     	; 0x4540 <lora_driver_get_rn2483_hweui+0x2e>
    4532:	60 ee       	ldi	r22, 0xE0	; 224
    4534:	7a e1       	ldi	r23, 0x1A	; 26
    4536:	ce 01       	movw	r24, r28
    4538:	0e 94 92 2f 	call	0x5f24	; 0x5f24 <strcpy>
    453c:	80 e0       	ldi	r24, 0x00	; 0
    453e:	02 c0       	rjmp	.+4      	; 0x4544 <lora_driver_get_rn2483_hweui+0x32>
    4540:	18 82       	st	Y, r1
    4542:	81 e0       	ldi	r24, 0x01	; 1
    4544:	df 91       	pop	r29
    4546:	cf 91       	pop	r28
    4548:	08 95       	ret

0000454a <lora_driver_set_device_identifier>:
    454a:	fc 01       	movw	r30, r24
    454c:	01 90       	ld	r0, Z+
    454e:	00 20       	and	r0, r0
    4550:	e9 f7       	brne	.-6      	; 0x454c <lora_driver_set_device_identifier+0x2>
    4552:	9f 01       	movw	r18, r30
    4554:	21 51       	subi	r18, 0x11	; 17
    4556:	31 09       	sbc	r19, r1
    4558:	28 17       	cp	r18, r24
    455a:	39 07       	cpc	r19, r25
    455c:	29 f4       	brne	.+10     	; 0x4568 <lora_driver_set_device_identifier+0x1e>
    455e:	bc 01       	movw	r22, r24
    4560:	89 e4       	ldi	r24, 0x49	; 73
    4562:	96 e0       	ldi	r25, 0x06	; 6
    4564:	63 cf       	rjmp	.-314    	; 0x442c <_upload_message_rc>
    4566:	08 95       	ret
    4568:	89 e0       	ldi	r24, 0x09	; 9
    456a:	08 95       	ret

0000456c <lora_driver_set_application_identifier>:
    456c:	fc 01       	movw	r30, r24
    456e:	01 90       	ld	r0, Z+
    4570:	00 20       	and	r0, r0
    4572:	e9 f7       	brne	.-6      	; 0x456e <lora_driver_set_application_identifier+0x2>
    4574:	9f 01       	movw	r18, r30
    4576:	21 51       	subi	r18, 0x11	; 17
    4578:	31 09       	sbc	r19, r1
    457a:	28 17       	cp	r18, r24
    457c:	39 07       	cpc	r19, r25
    457e:	29 f4       	brne	.+10     	; 0x458a <lora_driver_set_application_identifier+0x1e>
    4580:	bc 01       	movw	r22, r24
    4582:	88 e5       	ldi	r24, 0x58	; 88
    4584:	96 e0       	ldi	r25, 0x06	; 6
    4586:	52 cf       	rjmp	.-348    	; 0x442c <_upload_message_rc>
    4588:	08 95       	ret
    458a:	89 e0       	ldi	r24, 0x09	; 9
    458c:	08 95       	ret

0000458e <lora_driver_set_application_key>:
    458e:	fc 01       	movw	r30, r24
    4590:	01 90       	ld	r0, Z+
    4592:	00 20       	and	r0, r0
    4594:	e9 f7       	brne	.-6      	; 0x4590 <lora_driver_set_application_key+0x2>
    4596:	9f 01       	movw	r18, r30
    4598:	21 52       	subi	r18, 0x21	; 33
    459a:	31 09       	sbc	r19, r1
    459c:	28 17       	cp	r18, r24
    459e:	39 07       	cpc	r19, r25
    45a0:	29 f4       	brne	.+10     	; 0x45ac <lora_driver_set_application_key+0x1e>
    45a2:	bc 01       	movw	r22, r24
    45a4:	87 e6       	ldi	r24, 0x67	; 103
    45a6:	96 e0       	ldi	r25, 0x06	; 6
    45a8:	41 cf       	rjmp	.-382    	; 0x442c <_upload_message_rc>
    45aa:	08 95       	ret
    45ac:	89 e0       	ldi	r24, 0x09	; 9
    45ae:	08 95       	ret

000045b0 <lora_driver_save_mac>:
    45b0:	60 e0       	ldi	r22, 0x00	; 0
    45b2:	70 e0       	ldi	r23, 0x00	; 0
    45b4:	86 ea       	ldi	r24, 0xA6	; 166
    45b6:	96 e0       	ldi	r25, 0x06	; 6
    45b8:	39 cf       	rjmp	.-398    	; 0x442c <_upload_message_rc>
    45ba:	08 95       	ret

000045bc <lora_driver_join>:
    45bc:	0f 93       	push	r16
    45be:	1f 93       	push	r17
    45c0:	e8 2f       	mov	r30, r24
    45c2:	f0 e0       	ldi	r31, 0x00	; 0
    45c4:	ee 0f       	add	r30, r30
    45c6:	ff 1f       	adc	r31, r31
    45c8:	e0 58       	subi	r30, 0x80	; 128
    45ca:	f7 4f       	sbci	r31, 0xF7	; 247
    45cc:	60 81       	ld	r22, Z
    45ce:	71 81       	ldd	r23, Z+1	; 0x01
    45d0:	8f ea       	ldi	r24, 0xAF	; 175
    45d2:	96 e0       	ldi	r25, 0x06	; 6
    45d4:	2b df       	rcall	.-426    	; 0x442c <_upload_message_rc>
    45d6:	81 11       	cpse	r24, r1
    45d8:	14 c0       	rjmp	.+40     	; 0x4602 <lora_driver_join+0x46>
    45da:	08 e2       	ldi	r16, 0x28	; 40
    45dc:	15 e0       	ldi	r17, 0x05	; 5
    45de:	20 e0       	ldi	r18, 0x00	; 0
    45e0:	30 e0       	ldi	r19, 0x00	; 0
    45e2:	4d e2       	ldi	r20, 0x2D	; 45
    45e4:	50 e0       	ldi	r21, 0x00	; 0
    45e6:	60 ee       	ldi	r22, 0xE0	; 224
    45e8:	7a e1       	ldi	r23, 0x1A	; 26
    45ea:	80 91 57 1a 	lds	r24, 0x1A57	; 0x801a57 <_serial_reply_buffer_handle>
    45ee:	90 91 58 1a 	lds	r25, 0x1A58	; 0x801a58 <_serial_reply_buffer_handle+0x1>
    45f2:	0e 94 3e 13 	call	0x267c	; 0x267c <xStreamBufferReceive>
    45f6:	88 23       	and	r24, r24
    45f8:	21 f0       	breq	.+8      	; 0x4602 <lora_driver_join+0x46>
    45fa:	80 ee       	ldi	r24, 0xE0	; 224
    45fc:	9a e1       	ldi	r25, 0x1A	; 26
    45fe:	a1 de       	rcall	.-702    	; 0x4342 <_reply2return_code>
    4600:	03 c0       	rjmp	.+6      	; 0x4608 <lora_driver_join+0x4c>
    4602:	80 ee       	ldi	r24, 0xE0	; 224
    4604:	9a e1       	ldi	r25, 0x1A	; 26
    4606:	9d de       	rcall	.-710    	; 0x4342 <_reply2return_code>
    4608:	1f 91       	pop	r17
    460a:	0f 91       	pop	r16
    460c:	08 95       	ret

0000460e <lora_driver_sent_upload_message>:
    460e:	0f 93       	push	r16
    4610:	1f 93       	push	r17
    4612:	cf 93       	push	r28
    4614:	df 93       	push	r29
    4616:	1f 92       	push	r1
    4618:	cd b7       	in	r28, 0x3d	; 61
    461a:	de b7       	in	r29, 0x3e	; 62
    461c:	db 01       	movw	r26, r22
    461e:	11 96       	adiw	r26, 0x01	; 1
    4620:	9c 91       	ld	r25, X
    4622:	11 97       	sbiw	r26, 0x01	; 1
    4624:	95 31       	cpi	r25, 0x15	; 21
    4626:	08 f0       	brcs	.+2      	; 0x462a <lora_driver_sent_upload_message+0x1c>
    4628:	b4 c0       	rjmp	.+360    	; 0x4792 <lora_driver_sent_upload_message+0x184>
    462a:	99 23       	and	r25, r25
    462c:	81 f1       	breq	.+96     	; 0x468e <lora_driver_sent_upload_message+0x80>
    462e:	60 e0       	ldi	r22, 0x00	; 0
    4630:	70 e0       	ldi	r23, 0x00	; 0
    4632:	27 2f       	mov	r18, r23
    4634:	30 e0       	ldi	r19, 0x00	; 0
    4636:	46 2f       	mov	r20, r22
    4638:	50 e0       	ldi	r21, 0x00	; 0
    463a:	fd 01       	movw	r30, r26
    463c:	e4 0f       	add	r30, r20
    463e:	f5 1f       	adc	r31, r21
    4640:	92 81       	ldd	r25, Z+2	; 0x02
    4642:	92 95       	swap	r25
    4644:	9f 70       	andi	r25, 0x0F	; 15
    4646:	9a 30       	cpi	r25, 0x0A	; 10
    4648:	10 f0       	brcs	.+4      	; 0x464e <lora_driver_sent_upload_message+0x40>
    464a:	99 5c       	subi	r25, 0xC9	; 201
    464c:	01 c0       	rjmp	.+2      	; 0x4650 <lora_driver_sent_upload_message+0x42>
    464e:	90 5d       	subi	r25, 0xD0	; 208
    4650:	f9 01       	movw	r30, r18
    4652:	ef 58       	subi	r30, 0x8F	; 143
    4654:	f5 4e       	sbci	r31, 0xE5	; 229
    4656:	90 83       	st	Z, r25
    4658:	2f 5f       	subi	r18, 0xFF	; 255
    465a:	3f 4f       	sbci	r19, 0xFF	; 255
    465c:	fd 01       	movw	r30, r26
    465e:	e4 0f       	add	r30, r20
    4660:	f5 1f       	adc	r31, r21
    4662:	92 81       	ldd	r25, Z+2	; 0x02
    4664:	9f 70       	andi	r25, 0x0F	; 15
    4666:	49 2f       	mov	r20, r25
    4668:	50 e0       	ldi	r21, 0x00	; 0
    466a:	4a 30       	cpi	r20, 0x0A	; 10
    466c:	51 05       	cpc	r21, r1
    466e:	14 f0       	brlt	.+4      	; 0x4674 <lora_driver_sent_upload_message+0x66>
    4670:	99 5c       	subi	r25, 0xC9	; 201
    4672:	01 c0       	rjmp	.+2      	; 0x4676 <lora_driver_sent_upload_message+0x68>
    4674:	90 5d       	subi	r25, 0xD0	; 208
    4676:	f9 01       	movw	r30, r18
    4678:	ef 58       	subi	r30, 0x8F	; 143
    467a:	f5 4e       	sbci	r31, 0xE5	; 229
    467c:	90 83       	st	Z, r25
    467e:	7e 5f       	subi	r23, 0xFE	; 254
    4680:	6f 5f       	subi	r22, 0xFF	; 255
    4682:	11 96       	adiw	r26, 0x01	; 1
    4684:	9c 91       	ld	r25, X
    4686:	11 97       	sbiw	r26, 0x01	; 1
    4688:	69 17       	cp	r22, r25
    468a:	98 f2       	brcs	.-90     	; 0x4632 <lora_driver_sent_upload_message+0x24>
    468c:	01 c0       	rjmp	.+2      	; 0x4690 <lora_driver_sent_upload_message+0x82>
    468e:	70 e0       	ldi	r23, 0x00	; 0
    4690:	e7 2f       	mov	r30, r23
    4692:	f0 e0       	ldi	r31, 0x00	; 0
    4694:	ef 58       	subi	r30, 0x8F	; 143
    4696:	f5 4e       	sbci	r31, 0xE5	; 229
    4698:	10 82       	st	Z, r1
    469a:	4c 91       	ld	r20, X
    469c:	81 11       	cpse	r24, r1
    469e:	03 c0       	rjmp	.+6      	; 0x46a6 <lora_driver_sent_upload_message+0x98>
    46a0:	88 eb       	ldi	r24, 0xB8	; 184
    46a2:	96 e0       	ldi	r25, 0x06	; 6
    46a4:	02 c0       	rjmp	.+4      	; 0x46aa <lora_driver_sent_upload_message+0x9c>
    46a6:	8a eb       	ldi	r24, 0xBA	; 186
    46a8:	96 e0       	ldi	r25, 0x06	; 6
    46aa:	21 e7       	ldi	r18, 0x71	; 113
    46ac:	3a e1       	ldi	r19, 0x1A	; 26
    46ae:	3f 93       	push	r19
    46b0:	2f 93       	push	r18
    46b2:	1f 92       	push	r1
    46b4:	4f 93       	push	r20
    46b6:	9f 93       	push	r25
    46b8:	8f 93       	push	r24
    46ba:	8e eb       	ldi	r24, 0xBE	; 190
    46bc:	96 e0       	ldi	r25, 0x06	; 6
    46be:	9f 93       	push	r25
    46c0:	8f 93       	push	r24
    46c2:	83 eb       	ldi	r24, 0xB3	; 179
    46c4:	9a e1       	ldi	r25, 0x1A	; 26
    46c6:	9f 93       	push	r25
    46c8:	8f 93       	push	r24
    46ca:	0e 94 f4 2f 	call	0x5fe8	; 0x5fe8 <sprintf>
    46ce:	60 e0       	ldi	r22, 0x00	; 0
    46d0:	70 e0       	ldi	r23, 0x00	; 0
    46d2:	83 eb       	ldi	r24, 0xB3	; 179
    46d4:	9a e1       	ldi	r25, 0x1A	; 26
    46d6:	aa de       	rcall	.-684    	; 0x442c <_upload_message_rc>
    46d8:	0f b6       	in	r0, 0x3f	; 63
    46da:	f8 94       	cli
    46dc:	de bf       	out	0x3e, r29	; 62
    46de:	0f be       	out	0x3f, r0	; 63
    46e0:	cd bf       	out	0x3d, r28	; 61
    46e2:	81 11       	cpse	r24, r1
    46e4:	59 c0       	rjmp	.+178    	; 0x4798 <lora_driver_sent_upload_message+0x18a>
    46e6:	08 e2       	ldi	r16, 0x28	; 40
    46e8:	15 e0       	ldi	r17, 0x05	; 5
    46ea:	20 e0       	ldi	r18, 0x00	; 0
    46ec:	30 e0       	ldi	r19, 0x00	; 0
    46ee:	4d e2       	ldi	r20, 0x2D	; 45
    46f0:	50 e0       	ldi	r21, 0x00	; 0
    46f2:	60 ee       	ldi	r22, 0xE0	; 224
    46f4:	7a e1       	ldi	r23, 0x1A	; 26
    46f6:	80 91 57 1a 	lds	r24, 0x1A57	; 0x801a57 <_serial_reply_buffer_handle>
    46fa:	90 91 58 1a 	lds	r25, 0x1A58	; 0x801a58 <_serial_reply_buffer_handle+0x1>
    46fe:	0e 94 3e 13 	call	0x267c	; 0x267c <xStreamBufferReceive>
    4702:	88 23       	and	r24, r24
    4704:	09 f4       	brne	.+2      	; 0x4708 <lora_driver_sent_upload_message+0xfa>
    4706:	47 c0       	rjmp	.+142    	; 0x4796 <lora_driver_sent_upload_message+0x188>
    4708:	80 ee       	ldi	r24, 0xE0	; 224
    470a:	9a e1       	ldi	r25, 0x1A	; 26
    470c:	1a de       	rcall	.-972    	; 0x4342 <_reply2return_code>
    470e:	8e 30       	cpi	r24, 0x0E	; 14
    4710:	09 f0       	breq	.+2      	; 0x4714 <lora_driver_sent_upload_message+0x106>
    4712:	42 c0       	rjmp	.+132    	; 0x4798 <lora_driver_sent_upload_message+0x18a>
    4714:	87 e0       	ldi	r24, 0x07	; 7
    4716:	89 83       	std	Y+1, r24	; 0x01
    4718:	80 91 55 1a 	lds	r24, 0x1A55	; 0x801a55 <_downlinkMessageBuffer>
    471c:	90 91 56 1a 	lds	r25, 0x1A56	; 0x801a56 <_downlinkMessageBuffer+0x1>
    4720:	89 2b       	or	r24, r25
    4722:	a9 f1       	breq	.+106    	; 0x478e <lora_driver_sent_upload_message+0x180>
    4724:	be 01       	movw	r22, r28
    4726:	6f 5f       	subi	r22, 0xFF	; 255
    4728:	7f 4f       	sbci	r23, 0xFF	; 255
    472a:	80 ee       	ldi	r24, 0xE0	; 224
    472c:	9a e1       	ldi	r25, 0x1A	; 26
    472e:	68 d1       	rcall	.+720    	; 0x4a00 <decode_port_no>
    4730:	80 93 5b 1a 	sts	0x1A5B, r24	; 0x801a5b <_downlink_payload>
    4734:	e9 81       	ldd	r30, Y+1	; 0x01
    4736:	f0 e0       	ldi	r31, 0x00	; 0
    4738:	e0 52       	subi	r30, 0x20	; 32
    473a:	f5 4e       	sbci	r31, 0xE5	; 229
    473c:	df 01       	movw	r26, r30
    473e:	0d 90       	ld	r0, X+
    4740:	00 20       	and	r0, r0
    4742:	e9 f7       	brne	.-6      	; 0x473e <lora_driver_sent_upload_message+0x130>
    4744:	11 97       	sbiw	r26, 0x01	; 1
    4746:	ae 1b       	sub	r26, r30
    4748:	bf 0b       	sbc	r27, r31
    474a:	aa 23       	and	r26, r26
    474c:	91 f0       	breq	.+36     	; 0x4772 <lora_driver_sent_upload_message+0x164>
    474e:	bb 27       	eor	r27, r27
    4750:	cd 01       	movw	r24, r26
    4752:	01 97       	sbiw	r24, 0x01	; 1
    4754:	9c 01       	movw	r18, r24
    4756:	12 f4       	brpl	.+4      	; 0x475c <lora_driver_sent_upload_message+0x14e>
    4758:	2f 5f       	subi	r18, 0xFF	; 255
    475a:	3f 4f       	sbci	r19, 0xFF	; 255
    475c:	35 95       	asr	r19
    475e:	27 95       	ror	r18
    4760:	20 93 5c 1a 	sts	0x1A5C, r18	; 0x801a5c <_downlink_payload+0x1>
    4764:	af 01       	movw	r20, r30
    4766:	4f 5f       	subi	r20, 0xFF	; 255
    4768:	5f 4f       	sbci	r21, 0xFF	; 255
    476a:	64 e1       	ldi	r22, 0x14	; 20
    476c:	8d e5       	ldi	r24, 0x5D	; 93
    476e:	9a e1       	ldi	r25, 0x1A	; 26
    4770:	73 d1       	rcall	.+742    	; 0x4a58 <decode_hexadecimal_string_bytes>
    4772:	01 e0       	ldi	r16, 0x01	; 1
    4774:	10 e0       	ldi	r17, 0x00	; 0
    4776:	20 e0       	ldi	r18, 0x00	; 0
    4778:	30 e0       	ldi	r19, 0x00	; 0
    477a:	46 e1       	ldi	r20, 0x16	; 22
    477c:	50 e0       	ldi	r21, 0x00	; 0
    477e:	6b e5       	ldi	r22, 0x5B	; 91
    4780:	7a e1       	ldi	r23, 0x1A	; 26
    4782:	80 91 55 1a 	lds	r24, 0x1A55	; 0x801a55 <_downlinkMessageBuffer>
    4786:	90 91 56 1a 	lds	r25, 0x1A56	; 0x801a56 <_downlinkMessageBuffer+0x1>
    478a:	0e 94 51 12 	call	0x24a2	; 0x24a2 <xStreamBufferSend>
    478e:	8e e0       	ldi	r24, 0x0E	; 14
    4790:	03 c0       	rjmp	.+6      	; 0x4798 <lora_driver_sent_upload_message+0x18a>
    4792:	84 e1       	ldi	r24, 0x14	; 20
    4794:	01 c0       	rjmp	.+2      	; 0x4798 <lora_driver_sent_upload_message+0x18a>
    4796:	80 e0       	ldi	r24, 0x00	; 0
    4798:	0f 90       	pop	r0
    479a:	df 91       	pop	r29
    479c:	cf 91       	pop	r28
    479e:	1f 91       	pop	r17
    47a0:	0f 91       	pop	r16
    47a2:	08 95       	ret

000047a4 <lora_driver_set_adaptive_data_rate>:
    47a4:	81 30       	cpi	r24, 0x01	; 1
    47a6:	19 f0       	breq	.+6      	; 0x47ae <lora_driver_set_adaptive_data_rate+0xa>
    47a8:	6e ec       	ldi	r22, 0xCE	; 206
    47aa:	76 e0       	ldi	r23, 0x06	; 6
    47ac:	02 c0       	rjmp	.+4      	; 0x47b2 <lora_driver_set_adaptive_data_rate+0xe>
    47ae:	67 ea       	ldi	r22, 0xA7	; 167
    47b0:	77 e0       	ldi	r23, 0x07	; 7
    47b2:	82 ed       	ldi	r24, 0xD2	; 210
    47b4:	96 e0       	ldi	r25, 0x06	; 6
    47b6:	3a ce       	rjmp	.-908    	; 0x442c <_upload_message_rc>
    47b8:	08 95       	ret

000047ba <lora_driver_set_receive_delay>:
    47ba:	9f 93       	push	r25
    47bc:	8f 93       	push	r24
    47be:	83 e0       	ldi	r24, 0x03	; 3
    47c0:	97 e0       	ldi	r25, 0x07	; 7
    47c2:	9f 93       	push	r25
    47c4:	8f 93       	push	r24
    47c6:	83 eb       	ldi	r24, 0xB3	; 179
    47c8:	9a e1       	ldi	r25, 0x1A	; 26
    47ca:	9f 93       	push	r25
    47cc:	8f 93       	push	r24
    47ce:	0e 94 f4 2f 	call	0x5fe8	; 0x5fe8 <sprintf>
    47d2:	60 e0       	ldi	r22, 0x00	; 0
    47d4:	70 e0       	ldi	r23, 0x00	; 0
    47d6:	83 eb       	ldi	r24, 0xB3	; 179
    47d8:	9a e1       	ldi	r25, 0x1A	; 26
    47da:	28 de       	rcall	.-944    	; 0x442c <_upload_message_rc>
    47dc:	0f 90       	pop	r0
    47de:	0f 90       	pop	r0
    47e0:	0f 90       	pop	r0
    47e2:	0f 90       	pop	r0
    47e4:	0f 90       	pop	r0
    47e6:	0f 90       	pop	r0
    47e8:	08 95       	ret

000047ea <lora_driver_configure_to_eu868>:
    47ea:	2f 92       	push	r2
    47ec:	3f 92       	push	r3
    47ee:	4f 92       	push	r4
    47f0:	5f 92       	push	r5
    47f2:	6f 92       	push	r6
    47f4:	7f 92       	push	r7
    47f6:	8f 92       	push	r8
    47f8:	9f 92       	push	r9
    47fa:	af 92       	push	r10
    47fc:	bf 92       	push	r11
    47fe:	cf 92       	push	r12
    4800:	df 92       	push	r13
    4802:	ef 92       	push	r14
    4804:	ff 92       	push	r15
    4806:	0f 93       	push	r16
    4808:	1f 93       	push	r17
    480a:	cf 93       	push	r28
    480c:	df 93       	push	r29
    480e:	cd b7       	in	r28, 0x3d	; 61
    4810:	de b7       	in	r29, 0x3e	; 62
    4812:	a0 97       	sbiw	r28, 0x20	; 32
    4814:	0f b6       	in	r0, 0x3f	; 63
    4816:	f8 94       	cli
    4818:	de bf       	out	0x3e, r29	; 62
    481a:	0f be       	out	0x3f, r0	; 63
    481c:	cd bf       	out	0x3d, r28	; 61
    481e:	60 e3       	ldi	r22, 0x30	; 48
    4820:	77 e0       	ldi	r23, 0x07	; 7
    4822:	8c e3       	ldi	r24, 0x3C	; 60
    4824:	97 e0       	ldi	r25, 0x07	; 7
    4826:	33 dd       	rcall	.-1434   	; 0x428e <_upload_message>
    4828:	8c dd       	rcall	.-1256   	; 0x4342 <_reply2return_code>
    482a:	81 11       	cpse	r24, r1
    482c:	a3 c0       	rjmp	.+326    	; 0x4974 <lora_driver_configure_to_eu868+0x18a>
    482e:	80 e2       	ldi	r24, 0x20	; 32
    4830:	e1 e2       	ldi	r30, 0x21	; 33
    4832:	f2 e0       	ldi	r31, 0x02	; 2
    4834:	de 01       	movw	r26, r28
    4836:	11 96       	adiw	r26, 0x01	; 1
    4838:	01 90       	ld	r0, Z+
    483a:	0d 92       	st	X+, r0
    483c:	8a 95       	dec	r24
    483e:	e1 f7       	brne	.-8      	; 0x4838 <lora_driver_configure_to_eu868+0x4e>
    4840:	9e 01       	movw	r18, r28
    4842:	2f 5f       	subi	r18, 0xFF	; 255
    4844:	3f 4f       	sbci	r19, 0xFF	; 255
    4846:	69 01       	movw	r12, r18
    4848:	e1 2c       	mov	r14, r1
    484a:	f1 2c       	mov	r15, r1
    484c:	0f 2e       	mov	r0, r31
    484e:	f8 e4       	ldi	r31, 0x48	; 72
    4850:	af 2e       	mov	r10, r31
    4852:	f7 e0       	ldi	r31, 0x07	; 7
    4854:	bf 2e       	mov	r11, r31
    4856:	f0 2d       	mov	r31, r0
    4858:	03 eb       	ldi	r16, 0xB3	; 179
    485a:	1a e1       	ldi	r17, 0x1A	; 26
    485c:	0f 2e       	mov	r0, r31
    485e:	f1 e6       	ldi	r31, 0x61	; 97
    4860:	4f 2e       	mov	r4, r31
    4862:	f7 e0       	ldi	r31, 0x07	; 7
    4864:	5f 2e       	mov	r5, r31
    4866:	f0 2d       	mov	r31, r0
    4868:	0f 2e       	mov	r0, r31
    486a:	f8 e7       	ldi	r31, 0x78	; 120
    486c:	8f 2e       	mov	r8, r31
    486e:	f7 e0       	ldi	r31, 0x07	; 7
    4870:	9f 2e       	mov	r9, r31
    4872:	f0 2d       	mov	r31, r0
    4874:	0f 2e       	mov	r0, r31
    4876:	f2 e9       	ldi	r31, 0x92	; 146
    4878:	6f 2e       	mov	r6, r31
    487a:	f7 e0       	ldi	r31, 0x07	; 7
    487c:	7f 2e       	mov	r7, r31
    487e:	f0 2d       	mov	r31, r0
    4880:	3e 2c       	mov	r3, r14
    4882:	2f 2c       	mov	r2, r15
    4884:	ff 92       	push	r15
    4886:	ef 92       	push	r14
    4888:	bf 92       	push	r11
    488a:	af 92       	push	r10
    488c:	1f 93       	push	r17
    488e:	0f 93       	push	r16
    4890:	0e 94 f4 2f 	call	0x5fe8	; 0x5fe8 <sprintf>
    4894:	60 e0       	ldi	r22, 0x00	; 0
    4896:	70 e0       	ldi	r23, 0x00	; 0
    4898:	c8 01       	movw	r24, r16
    489a:	f9 dc       	rcall	.-1550   	; 0x428e <_upload_message>
    489c:	52 dd       	rcall	.-1372   	; 0x4342 <_reply2return_code>
    489e:	0f 90       	pop	r0
    48a0:	0f 90       	pop	r0
    48a2:	0f 90       	pop	r0
    48a4:	0f 90       	pop	r0
    48a6:	0f 90       	pop	r0
    48a8:	0f 90       	pop	r0
    48aa:	81 11       	cpse	r24, r1
    48ac:	63 c0       	rjmp	.+198    	; 0x4974 <lora_driver_configure_to_eu868+0x18a>
    48ae:	32 e0       	ldi	r19, 0x02	; 2
    48b0:	3e 15       	cp	r19, r14
    48b2:	e8 f4       	brcc	.+58     	; 0x48ee <lora_driver_configure_to_eu868+0x104>
    48b4:	f6 01       	movw	r30, r12
    48b6:	83 81       	ldd	r24, Z+3	; 0x03
    48b8:	8f 93       	push	r24
    48ba:	82 81       	ldd	r24, Z+2	; 0x02
    48bc:	8f 93       	push	r24
    48be:	81 81       	ldd	r24, Z+1	; 0x01
    48c0:	8f 93       	push	r24
    48c2:	80 81       	ld	r24, Z
    48c4:	8f 93       	push	r24
    48c6:	ff 92       	push	r15
    48c8:	ef 92       	push	r14
    48ca:	5f 92       	push	r5
    48cc:	4f 92       	push	r4
    48ce:	1f 93       	push	r17
    48d0:	0f 93       	push	r16
    48d2:	0e 94 f4 2f 	call	0x5fe8	; 0x5fe8 <sprintf>
    48d6:	60 e0       	ldi	r22, 0x00	; 0
    48d8:	70 e0       	ldi	r23, 0x00	; 0
    48da:	c8 01       	movw	r24, r16
    48dc:	d8 dc       	rcall	.-1616   	; 0x428e <_upload_message>
    48de:	31 dd       	rcall	.-1438   	; 0x4342 <_reply2return_code>
    48e0:	0f b6       	in	r0, 0x3f	; 63
    48e2:	f8 94       	cli
    48e4:	de bf       	out	0x3e, r29	; 62
    48e6:	0f be       	out	0x3f, r0	; 63
    48e8:	cd bf       	out	0x3d, r28	; 61
    48ea:	81 11       	cpse	r24, r1
    48ec:	43 c0       	rjmp	.+134    	; 0x4974 <lora_driver_configure_to_eu868+0x18a>
    48ee:	2f 92       	push	r2
    48f0:	3f 92       	push	r3
    48f2:	9f 92       	push	r9
    48f4:	8f 92       	push	r8
    48f6:	1f 93       	push	r17
    48f8:	0f 93       	push	r16
    48fa:	0e 94 f4 2f 	call	0x5fe8	; 0x5fe8 <sprintf>
    48fe:	60 e0       	ldi	r22, 0x00	; 0
    4900:	70 e0       	ldi	r23, 0x00	; 0
    4902:	c8 01       	movw	r24, r16
    4904:	c4 dc       	rcall	.-1656   	; 0x428e <_upload_message>
    4906:	1d dd       	rcall	.-1478   	; 0x4342 <_reply2return_code>
    4908:	0f 90       	pop	r0
    490a:	0f 90       	pop	r0
    490c:	0f 90       	pop	r0
    490e:	0f 90       	pop	r0
    4910:	0f 90       	pop	r0
    4912:	0f 90       	pop	r0
    4914:	81 11       	cpse	r24, r1
    4916:	2e c0       	rjmp	.+92     	; 0x4974 <lora_driver_configure_to_eu868+0x18a>
    4918:	2f 92       	push	r2
    491a:	3f 92       	push	r3
    491c:	7f 92       	push	r7
    491e:	6f 92       	push	r6
    4920:	1f 93       	push	r17
    4922:	0f 93       	push	r16
    4924:	0e 94 f4 2f 	call	0x5fe8	; 0x5fe8 <sprintf>
    4928:	60 e0       	ldi	r22, 0x00	; 0
    492a:	70 e0       	ldi	r23, 0x00	; 0
    492c:	c8 01       	movw	r24, r16
    492e:	af dc       	rcall	.-1698   	; 0x428e <_upload_message>
    4930:	08 dd       	rcall	.-1520   	; 0x4342 <_reply2return_code>
    4932:	0f 90       	pop	r0
    4934:	0f 90       	pop	r0
    4936:	0f 90       	pop	r0
    4938:	0f 90       	pop	r0
    493a:	0f 90       	pop	r0
    493c:	0f 90       	pop	r0
    493e:	81 11       	cpse	r24, r1
    4940:	19 c0       	rjmp	.+50     	; 0x4974 <lora_driver_configure_to_eu868+0x18a>
    4942:	3f ef       	ldi	r19, 0xFF	; 255
    4944:	e3 1a       	sub	r14, r19
    4946:	f3 0a       	sbc	r15, r19
    4948:	84 e0       	ldi	r24, 0x04	; 4
    494a:	c8 0e       	add	r12, r24
    494c:	d1 1c       	adc	r13, r1
    494e:	98 e0       	ldi	r25, 0x08	; 8
    4950:	e9 16       	cp	r14, r25
    4952:	f1 04       	cpc	r15, r1
    4954:	09 f0       	breq	.+2      	; 0x4958 <lora_driver_configure_to_eu868+0x16e>
    4956:	94 cf       	rjmp	.-216    	; 0x4880 <lora_driver_configure_to_eu868+0x96>
    4958:	60 e0       	ldi	r22, 0x00	; 0
    495a:	70 e0       	ldi	r23, 0x00	; 0
    495c:	8a ea       	ldi	r24, 0xAA	; 170
    495e:	97 e0       	ldi	r25, 0x07	; 7
    4960:	96 dc       	rcall	.-1748   	; 0x428e <_upload_message>
    4962:	ef dc       	rcall	.-1570   	; 0x4342 <_reply2return_code>
    4964:	81 11       	cpse	r24, r1
    4966:	06 c0       	rjmp	.+12     	; 0x4974 <lora_driver_configure_to_eu868+0x18a>
    4968:	60 e0       	ldi	r22, 0x00	; 0
    496a:	70 e0       	ldi	r23, 0x00	; 0
    496c:	8b eb       	ldi	r24, 0xBB	; 187
    496e:	97 e0       	ldi	r25, 0x07	; 7
    4970:	8e dc       	rcall	.-1764   	; 0x428e <_upload_message>
    4972:	e7 dc       	rcall	.-1586   	; 0x4342 <_reply2return_code>
    4974:	a0 96       	adiw	r28, 0x20	; 32
    4976:	0f b6       	in	r0, 0x3f	; 63
    4978:	f8 94       	cli
    497a:	de bf       	out	0x3e, r29	; 62
    497c:	0f be       	out	0x3f, r0	; 63
    497e:	cd bf       	out	0x3d, r28	; 61
    4980:	df 91       	pop	r29
    4982:	cf 91       	pop	r28
    4984:	1f 91       	pop	r17
    4986:	0f 91       	pop	r16
    4988:	ff 90       	pop	r15
    498a:	ef 90       	pop	r14
    498c:	df 90       	pop	r13
    498e:	cf 90       	pop	r12
    4990:	bf 90       	pop	r11
    4992:	af 90       	pop	r10
    4994:	9f 90       	pop	r9
    4996:	8f 90       	pop	r8
    4998:	7f 90       	pop	r7
    499a:	6f 90       	pop	r6
    499c:	5f 90       	pop	r5
    499e:	4f 90       	pop	r4
    49a0:	3f 90       	pop	r3
    49a2:	2f 90       	pop	r2
    49a4:	08 95       	ret

000049a6 <lora_driver_set_otaa_identity>:
    49a6:	ef 92       	push	r14
    49a8:	ff 92       	push	r15
    49aa:	0f 93       	push	r16
    49ac:	1f 93       	push	r17
    49ae:	cf 93       	push	r28
    49b0:	df 93       	push	r29
    49b2:	ec 01       	movw	r28, r24
    49b4:	8b 01       	movw	r16, r22
    49b6:	7a 01       	movw	r14, r20
    49b8:	81 e0       	ldi	r24, 0x01	; 1
    49ba:	f4 de       	rcall	.-536    	; 0x47a4 <lora_driver_set_adaptive_data_rate>
    49bc:	81 11       	cpse	r24, r1
    49be:	0d c0       	rjmp	.+26     	; 0x49da <lora_driver_set_otaa_identity+0x34>
    49c0:	ce 01       	movw	r24, r28
    49c2:	d4 dd       	rcall	.-1112   	; 0x456c <lora_driver_set_application_identifier>
    49c4:	81 11       	cpse	r24, r1
    49c6:	09 c0       	rjmp	.+18     	; 0x49da <lora_driver_set_otaa_identity+0x34>
    49c8:	c8 01       	movw	r24, r16
    49ca:	e1 dd       	rcall	.-1086   	; 0x458e <lora_driver_set_application_key>
    49cc:	81 11       	cpse	r24, r1
    49ce:	05 c0       	rjmp	.+10     	; 0x49da <lora_driver_set_otaa_identity+0x34>
    49d0:	c7 01       	movw	r24, r14
    49d2:	bb dd       	rcall	.-1162   	; 0x454a <lora_driver_set_device_identifier>
    49d4:	81 11       	cpse	r24, r1
    49d6:	01 c0       	rjmp	.+2      	; 0x49da <lora_driver_set_otaa_identity+0x34>
    49d8:	eb dd       	rcall	.-1066   	; 0x45b0 <lora_driver_save_mac>
    49da:	df 91       	pop	r29
    49dc:	cf 91       	pop	r28
    49de:	1f 91       	pop	r17
    49e0:	0f 91       	pop	r16
    49e2:	ff 90       	pop	r15
    49e4:	ef 90       	pop	r14
    49e6:	08 95       	ret

000049e8 <lora_driver_map_return_code_to_text>:
    49e8:	90 e0       	ldi	r25, 0x00	; 0
    49ea:	fc 01       	movw	r30, r24
    49ec:	ee 0f       	add	r30, r30
    49ee:	ff 1f       	adc	r31, r31
    49f0:	8e 0f       	add	r24, r30
    49f2:	9f 1f       	adc	r25, r31
    49f4:	fc 01       	movw	r30, r24
    49f6:	ec 57       	subi	r30, 0x7C	; 124
    49f8:	f7 4f       	sbci	r31, 0xF7	; 247
    49fa:	81 81       	ldd	r24, Z+1	; 0x01
    49fc:	92 81       	ldd	r25, Z+2	; 0x02
    49fe:	08 95       	ret

00004a00 <decode_port_no>:
    4a00:	dc 01       	movw	r26, r24
    4a02:	00 97       	sbiw	r24, 0x00	; 0
    4a04:	29 f1       	breq	.+74     	; 0x4a50 <decode_port_no+0x50>
    4a06:	fb 01       	movw	r30, r22
    4a08:	20 81       	ld	r18, Z
    4a0a:	fc 01       	movw	r30, r24
    4a0c:	01 90       	ld	r0, Z+
    4a0e:	00 20       	and	r0, r0
    4a10:	e9 f7       	brne	.-6      	; 0x4a0c <decode_port_no+0xc>
    4a12:	31 97       	sbiw	r30, 0x01	; 1
    4a14:	e8 1b       	sub	r30, r24
    4a16:	f9 0b       	sbc	r31, r25
    4a18:	82 2f       	mov	r24, r18
    4a1a:	90 e0       	ldi	r25, 0x00	; 0
    4a1c:	e8 17       	cp	r30, r24
    4a1e:	f9 07       	cpc	r31, r25
    4a20:	c8 f0       	brcs	.+50     	; 0x4a54 <decode_port_no+0x54>
    4a22:	80 e0       	ldi	r24, 0x00	; 0
    4a24:	08 c0       	rjmp	.+16     	; 0x4a36 <decode_port_no+0x36>
    4a26:	88 0f       	add	r24, r24
    4a28:	38 2f       	mov	r19, r24
    4a2a:	33 0f       	add	r19, r19
    4a2c:	33 0f       	add	r19, r19
    4a2e:	83 0f       	add	r24, r19
    4a30:	80 53       	subi	r24, 0x30	; 48
    4a32:	89 0f       	add	r24, r25
    4a34:	2f 5f       	subi	r18, 0xFF	; 255
    4a36:	fd 01       	movw	r30, r26
    4a38:	e2 0f       	add	r30, r18
    4a3a:	f1 1d       	adc	r31, r1
    4a3c:	90 81       	ld	r25, Z
    4a3e:	30 ed       	ldi	r19, 0xD0	; 208
    4a40:	39 0f       	add	r19, r25
    4a42:	3a 30       	cpi	r19, 0x0A	; 10
    4a44:	10 f4       	brcc	.+4      	; 0x4a4a <decode_port_no+0x4a>
    4a46:	91 11       	cpse	r25, r1
    4a48:	ee cf       	rjmp	.-36     	; 0x4a26 <decode_port_no+0x26>
    4a4a:	fb 01       	movw	r30, r22
    4a4c:	20 83       	st	Z, r18
    4a4e:	08 95       	ret
    4a50:	80 e0       	ldi	r24, 0x00	; 0
    4a52:	08 95       	ret
    4a54:	80 e0       	ldi	r24, 0x00	; 0
    4a56:	08 95       	ret

00004a58 <decode_hexadecimal_string_bytes>:
    4a58:	0f 93       	push	r16
    4a5a:	1f 93       	push	r17
    4a5c:	cf 93       	push	r28
    4a5e:	df 93       	push	r29
    4a60:	dc 01       	movw	r26, r24
    4a62:	ea 01       	movw	r28, r20
    4a64:	20 97       	sbiw	r28, 0x00	; 0
    4a66:	e1 f1       	breq	.+120    	; 0x4ae0 <decode_hexadecimal_string_bytes+0x88>
    4a68:	fa 01       	movw	r30, r20
    4a6a:	01 90       	ld	r0, Z+
    4a6c:	00 20       	and	r0, r0
    4a6e:	e9 f7       	brne	.-6      	; 0x4a6a <decode_hexadecimal_string_bytes+0x12>
    4a70:	31 97       	sbiw	r30, 0x01	; 1
    4a72:	e4 1b       	sub	r30, r20
    4a74:	f5 0b       	sbc	r31, r21
    4a76:	32 97       	sbiw	r30, 0x02	; 2
    4a78:	10 f5       	brcc	.+68     	; 0x4abe <decode_hexadecimal_string_bytes+0x66>
    4a7a:	32 c0       	rjmp	.+100    	; 0x4ae0 <decode_hexadecimal_string_bytes+0x88>
    4a7c:	8d 01       	movw	r16, r26
    4a7e:	04 0f       	add	r16, r20
    4a80:	15 1f       	adc	r17, r21
    4a82:	30 e0       	ldi	r19, 0x00	; 0
    4a84:	ae 01       	movw	r20, r28
    4a86:	42 0f       	add	r20, r18
    4a88:	53 1f       	adc	r21, r19
    4a8a:	fa 01       	movw	r30, r20
    4a8c:	90 81       	ld	r25, Z
    4a8e:	91 34       	cpi	r25, 0x41	; 65
    4a90:	28 f0       	brcs	.+10     	; 0x4a9c <decode_hexadecimal_string_bytes+0x44>
    4a92:	97 53       	subi	r25, 0x37	; 55
    4a94:	59 2f       	mov	r21, r25
    4a96:	52 95       	swap	r21
    4a98:	50 7f       	andi	r21, 0xF0	; 240
    4a9a:	03 c0       	rjmp	.+6      	; 0x4aa2 <decode_hexadecimal_string_bytes+0x4a>
    4a9c:	59 2f       	mov	r21, r25
    4a9e:	52 95       	swap	r21
    4aa0:	50 7f       	andi	r21, 0xF0	; 240
    4aa2:	2c 0f       	add	r18, r28
    4aa4:	3d 1f       	adc	r19, r29
    4aa6:	f9 01       	movw	r30, r18
    4aa8:	91 81       	ldd	r25, Z+1	; 0x01
    4aaa:	91 34       	cpi	r25, 0x41	; 65
    4aac:	10 f0       	brcs	.+4      	; 0x4ab2 <decode_hexadecimal_string_bytes+0x5a>
    4aae:	97 53       	subi	r25, 0x37	; 55
    4ab0:	01 c0       	rjmp	.+2      	; 0x4ab4 <decode_hexadecimal_string_bytes+0x5c>
    4ab2:	90 53       	subi	r25, 0x30	; 48
    4ab4:	95 0f       	add	r25, r21
    4ab6:	f8 01       	movw	r30, r16
    4ab8:	90 83       	st	Z, r25
    4aba:	8f 5f       	subi	r24, 0xFF	; 255
    4abc:	01 c0       	rjmp	.+2      	; 0x4ac0 <decode_hexadecimal_string_bytes+0x68>
    4abe:	80 e0       	ldi	r24, 0x00	; 0
    4ac0:	28 2f       	mov	r18, r24
    4ac2:	22 0f       	add	r18, r18
    4ac4:	48 2f       	mov	r20, r24
    4ac6:	50 e0       	ldi	r21, 0x00	; 0
    4ac8:	fe 01       	movw	r30, r28
    4aca:	01 90       	ld	r0, Z+
    4acc:	00 20       	and	r0, r0
    4ace:	e9 f7       	brne	.-6      	; 0x4aca <decode_hexadecimal_string_bytes+0x72>
    4ad0:	31 97       	sbiw	r30, 0x01	; 1
    4ad2:	ec 1b       	sub	r30, r28
    4ad4:	fd 0b       	sbc	r31, r29
    4ad6:	4e 17       	cp	r20, r30
    4ad8:	5f 07       	cpc	r21, r31
    4ada:	10 f4       	brcc	.+4      	; 0x4ae0 <decode_hexadecimal_string_bytes+0x88>
    4adc:	86 13       	cpse	r24, r22
    4ade:	ce cf       	rjmp	.-100    	; 0x4a7c <decode_hexadecimal_string_bytes+0x24>
    4ae0:	df 91       	pop	r29
    4ae2:	cf 91       	pop	r28
    4ae4:	1f 91       	pop	r17
    4ae6:	0f 91       	pop	r16
    4ae8:	08 95       	ret

00004aea <reg_read_register>:
    4aea:	fc 01       	movw	r30, r24
    4aec:	80 81       	ld	r24, Z
    4aee:	08 95       	ret

00004af0 <reg_read_bit>:
    4af0:	fc 01       	movw	r30, r24
    4af2:	20 81       	ld	r18, Z
    4af4:	81 e0       	ldi	r24, 0x01	; 1
    4af6:	90 e0       	ldi	r25, 0x00	; 0
    4af8:	02 c0       	rjmp	.+4      	; 0x4afe <reg_read_bit+0xe>
    4afa:	88 0f       	add	r24, r24
    4afc:	99 1f       	adc	r25, r25
    4afe:	6a 95       	dec	r22
    4b00:	e2 f7       	brpl	.-8      	; 0x4afa <reg_read_bit+0xa>
    4b02:	82 23       	and	r24, r18
    4b04:	08 95       	ret

00004b06 <reg_read_bits>:
    4b06:	fc 01       	movw	r30, r24
    4b08:	80 81       	ld	r24, Z
    4b0a:	86 23       	and	r24, r22
    4b0c:	08 95       	ret

00004b0e <reg_set_register>:
    4b0e:	fc 01       	movw	r30, r24
    4b10:	60 83       	st	Z, r22
    4b12:	08 95       	ret

00004b14 <reg_clear_register>:
    4b14:	fc 01       	movw	r30, r24
    4b16:	10 82       	st	Z, r1
    4b18:	08 95       	ret

00004b1a <reg_set_bit>:
    4b1a:	fc 01       	movw	r30, r24
    4b1c:	40 81       	ld	r20, Z
    4b1e:	21 e0       	ldi	r18, 0x01	; 1
    4b20:	30 e0       	ldi	r19, 0x00	; 0
    4b22:	02 c0       	rjmp	.+4      	; 0x4b28 <reg_set_bit+0xe>
    4b24:	22 0f       	add	r18, r18
    4b26:	33 1f       	adc	r19, r19
    4b28:	6a 95       	dec	r22
    4b2a:	e2 f7       	brpl	.-8      	; 0x4b24 <reg_set_bit+0xa>
    4b2c:	24 2b       	or	r18, r20
    4b2e:	20 83       	st	Z, r18
    4b30:	08 95       	ret

00004b32 <reg_set_bits>:
    4b32:	fc 01       	movw	r30, r24
    4b34:	20 81       	ld	r18, Z
    4b36:	62 2b       	or	r22, r18
    4b38:	60 83       	st	Z, r22
    4b3a:	08 95       	ret

00004b3c <reg_toggle_bit>:
    4b3c:	fc 01       	movw	r30, r24
    4b3e:	40 81       	ld	r20, Z
    4b40:	21 e0       	ldi	r18, 0x01	; 1
    4b42:	30 e0       	ldi	r19, 0x00	; 0
    4b44:	02 c0       	rjmp	.+4      	; 0x4b4a <reg_toggle_bit+0xe>
    4b46:	22 0f       	add	r18, r18
    4b48:	33 1f       	adc	r19, r19
    4b4a:	6a 95       	dec	r22
    4b4c:	e2 f7       	brpl	.-8      	; 0x4b46 <reg_toggle_bit+0xa>
    4b4e:	24 27       	eor	r18, r20
    4b50:	20 83       	st	Z, r18
    4b52:	08 95       	ret

00004b54 <reg_toggle_bits>:
    4b54:	fc 01       	movw	r30, r24
    4b56:	20 81       	ld	r18, Z
    4b58:	62 27       	eor	r22, r18
    4b5a:	60 83       	st	Z, r22
    4b5c:	08 95       	ret

00004b5e <reg_clear_bit>:
    4b5e:	fc 01       	movw	r30, r24
    4b60:	90 81       	ld	r25, Z
    4b62:	21 e0       	ldi	r18, 0x01	; 1
    4b64:	30 e0       	ldi	r19, 0x00	; 0
    4b66:	02 c0       	rjmp	.+4      	; 0x4b6c <reg_clear_bit+0xe>
    4b68:	22 0f       	add	r18, r18
    4b6a:	33 1f       	adc	r19, r19
    4b6c:	6a 95       	dec	r22
    4b6e:	e2 f7       	brpl	.-8      	; 0x4b68 <reg_clear_bit+0xa>
    4b70:	20 95       	com	r18
    4b72:	29 23       	and	r18, r25
    4b74:	20 83       	st	Z, r18
    4b76:	08 95       	ret

00004b78 <reg_clear_bits>:
    4b78:	fc 01       	movw	r30, r24
    4b7a:	90 81       	ld	r25, Z
    4b7c:	60 95       	com	r22
    4b7e:	69 23       	and	r22, r25
    4b80:	60 83       	st	Z, r22
    4b82:	08 95       	ret

00004b84 <_serial_call_back>:
    4b84:	80 91 10 1b 	lds	r24, 0x1B10	; 0x801b10 <crc_sum.1941>
    4b88:	86 0f       	add	r24, r22
    4b8a:	80 93 10 1b 	sts	0x1B10, r24	; 0x801b10 <crc_sum.1941>
    4b8e:	90 91 13 1b 	lds	r25, 0x1B13	; 0x801b13 <_mh_state>
    4b92:	91 30       	cpi	r25, 0x01	; 1
    4b94:	79 f0       	breq	.+30     	; 0x4bb4 <_serial_call_back+0x30>
    4b96:	28 f0       	brcs	.+10     	; 0x4ba2 <_serial_call_back+0x1e>
    4b98:	92 30       	cpi	r25, 0x02	; 2
    4b9a:	a9 f0       	breq	.+42     	; 0x4bc6 <_serial_call_back+0x42>
    4b9c:	93 30       	cpi	r25, 0x03	; 3
    4b9e:	19 f1       	breq	.+70     	; 0x4be6 <_serial_call_back+0x62>
    4ba0:	08 95       	ret
    4ba2:	6f 3f       	cpi	r22, 0xFF	; 255
    4ba4:	09 f0       	breq	.+2      	; 0x4ba8 <_serial_call_back+0x24>
    4ba6:	48 c0       	rjmp	.+144    	; 0x4c38 <_serial_call_back+0xb4>
    4ba8:	10 92 10 1b 	sts	0x1B10, r1	; 0x801b10 <crc_sum.1941>
    4bac:	81 e0       	ldi	r24, 0x01	; 1
    4bae:	80 93 13 1b 	sts	0x1B13, r24	; 0x801b13 <_mh_state>
    4bb2:	08 95       	ret
    4bb4:	66 38       	cpi	r22, 0x86	; 134
    4bb6:	09 f0       	breq	.+2      	; 0x4bba <_serial_call_back+0x36>
    4bb8:	3f c0       	rjmp	.+126    	; 0x4c38 <_serial_call_back+0xb4>
    4bba:	10 92 0f 1b 	sts	0x1B0F, r1	; 0x801b0f <inDex.1939>
    4bbe:	82 e0       	ldi	r24, 0x02	; 2
    4bc0:	80 93 13 1b 	sts	0x1B13, r24	; 0x801b13 <_mh_state>
    4bc4:	08 95       	ret
    4bc6:	e0 91 0f 1b 	lds	r30, 0x1B0F	; 0x801b0f <inDex.1939>
    4bca:	81 e0       	ldi	r24, 0x01	; 1
    4bcc:	8e 0f       	add	r24, r30
    4bce:	80 93 0f 1b 	sts	0x1B0F, r24	; 0x801b0f <inDex.1939>
    4bd2:	f0 e0       	ldi	r31, 0x00	; 0
    4bd4:	e3 5f       	subi	r30, 0xF3	; 243
    4bd6:	f4 4e       	sbci	r31, 0xE4	; 228
    4bd8:	60 83       	st	Z, r22
    4bda:	82 30       	cpi	r24, 0x02	; 2
    4bdc:	69 f5       	brne	.+90     	; 0x4c38 <_serial_call_back+0xb4>
    4bde:	83 e0       	ldi	r24, 0x03	; 3
    4be0:	80 93 13 1b 	sts	0x1B13, r24	; 0x801b13 <_mh_state>
    4be4:	08 95       	ret
    4be6:	90 91 0f 1b 	lds	r25, 0x1B0F	; 0x801b0f <inDex.1939>
    4bea:	21 e0       	ldi	r18, 0x01	; 1
    4bec:	29 0f       	add	r18, r25
    4bee:	20 93 0f 1b 	sts	0x1B0F, r18	; 0x801b0f <inDex.1939>
    4bf2:	96 30       	cpi	r25, 0x06	; 6
    4bf4:	09 f5       	brne	.+66     	; 0x4c38 <_serial_call_back+0xb4>
    4bf6:	81 11       	cpse	r24, r1
    4bf8:	0e c0       	rjmp	.+28     	; 0x4c16 <_serial_call_back+0x92>
    4bfa:	ed e0       	ldi	r30, 0x0D	; 13
    4bfc:	fb e1       	ldi	r31, 0x1B	; 27
    4bfe:	80 81       	ld	r24, Z
    4c00:	90 e0       	ldi	r25, 0x00	; 0
    4c02:	98 2f       	mov	r25, r24
    4c04:	88 27       	eor	r24, r24
    4c06:	21 81       	ldd	r18, Z+1	; 0x01
    4c08:	82 0f       	add	r24, r18
    4c0a:	91 1d       	adc	r25, r1
    4c0c:	90 93 15 1b 	sts	0x1B15, r25	; 0x801b15 <_ppm+0x1>
    4c10:	80 93 14 1b 	sts	0x1B14, r24	; 0x801b14 <_ppm>
    4c14:	04 c0       	rjmp	.+8      	; 0x4c1e <_serial_call_back+0x9a>
    4c16:	10 92 15 1b 	sts	0x1B15, r1	; 0x801b15 <_ppm+0x1>
    4c1a:	10 92 14 1b 	sts	0x1B14, r1	; 0x801b14 <_ppm>
    4c1e:	10 92 13 1b 	sts	0x1B13, r1	; 0x801b13 <_mh_state>
    4c22:	e0 91 11 1b 	lds	r30, 0x1B11	; 0x801b11 <_app_call_back>
    4c26:	f0 91 12 1b 	lds	r31, 0x1B12	; 0x801b12 <_app_call_back+0x1>
    4c2a:	30 97       	sbiw	r30, 0x00	; 0
    4c2c:	29 f0       	breq	.+10     	; 0x4c38 <_serial_call_back+0xb4>
    4c2e:	80 91 14 1b 	lds	r24, 0x1B14	; 0x801b14 <_ppm>
    4c32:	90 91 15 1b 	lds	r25, 0x1B15	; 0x801b15 <_ppm+0x1>
    4c36:	19 95       	eicall
    4c38:	08 95       	ret

00004c3a <mh_z19_create>:
    4c3a:	8f 92       	push	r8
    4c3c:	9f 92       	push	r9
    4c3e:	af 92       	push	r10
    4c40:	cf 92       	push	r12
    4c42:	ef 92       	push	r14
    4c44:	0f 93       	push	r16
    4c46:	cf 93       	push	r28
    4c48:	df 93       	push	r29
    4c4a:	eb 01       	movw	r28, r22
    4c4c:	0f 2e       	mov	r0, r31
    4c4e:	f2 ec       	ldi	r31, 0xC2	; 194
    4c50:	8f 2e       	mov	r8, r31
    4c52:	f5 e2       	ldi	r31, 0x25	; 37
    4c54:	9f 2e       	mov	r9, r31
    4c56:	f0 2d       	mov	r31, r0
    4c58:	68 94       	set
    4c5a:	aa 24       	eor	r10, r10
    4c5c:	a4 f8       	bld	r10, 4
    4c5e:	68 94       	set
    4c60:	cc 24       	eor	r12, r12
    4c62:	c4 f8       	bld	r12, 4
    4c64:	e1 2c       	mov	r14, r1
    4c66:	00 e0       	ldi	r16, 0x00	; 0
    4c68:	23 e0       	ldi	r18, 0x03	; 3
    4c6a:	40 e8       	ldi	r20, 0x80	; 128
    4c6c:	55 e2       	ldi	r21, 0x25	; 37
    4c6e:	60 e0       	ldi	r22, 0x00	; 0
    4c70:	70 e0       	ldi	r23, 0x00	; 0
    4c72:	40 d0       	rcall	.+128    	; 0x4cf4 <serial_new_instance>
    4c74:	90 93 17 1b 	sts	0x1B17, r25	; 0x801b17 <_serial+0x1>
    4c78:	80 93 16 1b 	sts	0x1B16, r24	; 0x801b16 <_serial>
    4c7c:	d0 93 12 1b 	sts	0x1B12, r29	; 0x801b12 <_app_call_back+0x1>
    4c80:	c0 93 11 1b 	sts	0x1B11, r28	; 0x801b11 <_app_call_back>
    4c84:	df 91       	pop	r29
    4c86:	cf 91       	pop	r28
    4c88:	0f 91       	pop	r16
    4c8a:	ef 90       	pop	r14
    4c8c:	cf 90       	pop	r12
    4c8e:	af 90       	pop	r10
    4c90:	9f 90       	pop	r9
    4c92:	8f 90       	pop	r8
    4c94:	08 95       	ret

00004c96 <mh_z19_take_meassuring>:
    4c96:	cf 93       	push	r28
    4c98:	df 93       	push	r29
    4c9a:	cd b7       	in	r28, 0x3d	; 61
    4c9c:	de b7       	in	r29, 0x3e	; 62
    4c9e:	29 97       	sbiw	r28, 0x09	; 9
    4ca0:	0f b6       	in	r0, 0x3f	; 63
    4ca2:	f8 94       	cli
    4ca4:	de bf       	out	0x3e, r29	; 62
    4ca6:	0f be       	out	0x3f, r0	; 63
    4ca8:	cd bf       	out	0x3d, r28	; 61
    4caa:	89 e0       	ldi	r24, 0x09	; 9
    4cac:	e1 e4       	ldi	r30, 0x41	; 65
    4cae:	f2 e0       	ldi	r31, 0x02	; 2
    4cb0:	9e 01       	movw	r18, r28
    4cb2:	2f 5f       	subi	r18, 0xFF	; 255
    4cb4:	3f 4f       	sbci	r19, 0xFF	; 255
    4cb6:	d9 01       	movw	r26, r18
    4cb8:	01 90       	ld	r0, Z+
    4cba:	0d 92       	st	X+, r0
    4cbc:	8a 95       	dec	r24
    4cbe:	e1 f7       	brne	.-8      	; 0x4cb8 <mh_z19_take_meassuring+0x22>
    4cc0:	10 92 15 1b 	sts	0x1B15, r1	; 0x801b15 <_ppm+0x1>
    4cc4:	10 92 14 1b 	sts	0x1B14, r1	; 0x801b14 <_ppm>
    4cc8:	80 91 16 1b 	lds	r24, 0x1B16	; 0x801b16 <_serial>
    4ccc:	90 91 17 1b 	lds	r25, 0x1B17	; 0x801b17 <_serial+0x1>
    4cd0:	00 97       	sbiw	r24, 0x00	; 0
    4cd2:	31 f0       	breq	.+12     	; 0x4ce0 <mh_z19_take_meassuring+0x4a>
    4cd4:	42 2f       	mov	r20, r18
    4cd6:	53 2f       	mov	r21, r19
    4cd8:	69 e0       	ldi	r22, 0x09	; 9
    4cda:	c7 d0       	rcall	.+398    	; 0x4e6a <serial_send_bytes>
    4cdc:	80 e0       	ldi	r24, 0x00	; 0
    4cde:	01 c0       	rjmp	.+2      	; 0x4ce2 <mh_z19_take_meassuring+0x4c>
    4ce0:	82 e0       	ldi	r24, 0x02	; 2
    4ce2:	29 96       	adiw	r28, 0x09	; 9
    4ce4:	0f b6       	in	r0, 0x3f	; 63
    4ce6:	f8 94       	cli
    4ce8:	de bf       	out	0x3e, r29	; 62
    4cea:	0f be       	out	0x3f, r0	; 63
    4cec:	cd bf       	out	0x3d, r28	; 61
    4cee:	df 91       	pop	r29
    4cf0:	cf 91       	pop	r28
    4cf2:	08 95       	ret

00004cf4 <serial_new_instance>:
    4cf4:	2f 92       	push	r2
    4cf6:	3f 92       	push	r3
    4cf8:	4f 92       	push	r4
    4cfa:	5f 92       	push	r5
    4cfc:	6f 92       	push	r6
    4cfe:	7f 92       	push	r7
    4d00:	8f 92       	push	r8
    4d02:	9f 92       	push	r9
    4d04:	af 92       	push	r10
    4d06:	cf 92       	push	r12
    4d08:	ef 92       	push	r14
    4d0a:	ff 92       	push	r15
    4d0c:	0f 93       	push	r16
    4d0e:	1f 93       	push	r17
    4d10:	cf 93       	push	r28
    4d12:	df 93       	push	r29
    4d14:	cd b7       	in	r28, 0x3d	; 61
    4d16:	de b7       	in	r29, 0x3e	; 62
    4d18:	f8 2e       	mov	r15, r24
    4d1a:	2a 01       	movw	r4, r20
    4d1c:	3b 01       	movw	r6, r22
    4d1e:	88 e0       	ldi	r24, 0x08	; 8
    4d20:	90 e0       	ldi	r25, 0x00	; 0
    4d22:	9b d7       	rcall	.+3894   	; 0x5c5a <malloc>
    4d24:	8c 01       	movw	r16, r24
    4d26:	8f 2d       	mov	r24, r15
    4d28:	90 e0       	ldi	r25, 0x00	; 0
    4d2a:	88 0f       	add	r24, r24
    4d2c:	99 1f       	adc	r25, r25
    4d2e:	fc 01       	movw	r30, r24
    4d30:	e8 5e       	subi	r30, 0xE8	; 232
    4d32:	f4 4e       	sbci	r31, 0xE4	; 228
    4d34:	11 83       	std	Z+1, r17	; 0x01
    4d36:	00 83       	st	Z, r16
    4d38:	fc 01       	movw	r30, r24
    4d3a:	e6 5f       	subi	r30, 0xF6	; 246
    4d3c:	fd 4f       	sbci	r31, 0xFD	; 253
    4d3e:	80 81       	ld	r24, Z
    4d40:	91 81       	ldd	r25, Z+1	; 0x01
    4d42:	d8 01       	movw	r26, r16
    4d44:	8d 93       	st	X+, r24
    4d46:	9c 93       	st	X, r25
    4d48:	6c 2d       	mov	r22, r12
    4d4a:	70 e0       	ldi	r23, 0x00	; 0
    4d4c:	84 e0       	ldi	r24, 0x04	; 4
    4d4e:	90 e0       	ldi	r25, 0x00	; 0
    4d50:	6a d7       	rcall	.+3796   	; 0x5c26 <calloc>
    4d52:	1c 01       	movw	r2, r24
    4d54:	61 e0       	ldi	r22, 0x01	; 1
    4d56:	70 e0       	ldi	r23, 0x00	; 0
    4d58:	86 e0       	ldi	r24, 0x06	; 6
    4d5a:	90 e0       	ldi	r25, 0x00	; 0
    4d5c:	64 d7       	rcall	.+3784   	; 0x5c26 <calloc>
    4d5e:	7c 01       	movw	r14, r24
    4d60:	4c 2d       	mov	r20, r12
    4d62:	b1 01       	movw	r22, r2
    4d64:	2b d5       	rcall	.+2646   	; 0x57bc <fifo_init>
    4d66:	f8 01       	movw	r30, r16
    4d68:	f5 82       	std	Z+5, r15	; 0x05
    4d6a:	e4 82       	std	Z+4, r14	; 0x04
    4d6c:	6a 2d       	mov	r22, r10
    4d6e:	70 e0       	ldi	r23, 0x00	; 0
    4d70:	84 e0       	ldi	r24, 0x04	; 4
    4d72:	90 e0       	ldi	r25, 0x00	; 0
    4d74:	58 d7       	rcall	.+3760   	; 0x5c26 <calloc>
    4d76:	1c 01       	movw	r2, r24
    4d78:	61 e0       	ldi	r22, 0x01	; 1
    4d7a:	70 e0       	ldi	r23, 0x00	; 0
    4d7c:	86 e0       	ldi	r24, 0x06	; 6
    4d7e:	90 e0       	ldi	r25, 0x00	; 0
    4d80:	52 d7       	rcall	.+3748   	; 0x5c26 <calloc>
    4d82:	7c 01       	movw	r14, r24
    4d84:	4a 2d       	mov	r20, r10
    4d86:	b1 01       	movw	r22, r2
    4d88:	19 d5       	rcall	.+2610   	; 0x57bc <fifo_init>
    4d8a:	d8 01       	movw	r26, r16
    4d8c:	13 96       	adiw	r26, 0x03	; 3
    4d8e:	fc 92       	st	X, r15
    4d90:	ee 92       	st	-X, r14
    4d92:	12 97       	sbiw	r26, 0x02	; 2
    4d94:	17 96       	adiw	r26, 0x07	; 7
    4d96:	9c 92       	st	X, r9
    4d98:	8e 92       	st	-X, r8
    4d9a:	16 97       	sbiw	r26, 0x06	; 6
    4d9c:	ff b6       	in	r15, 0x3f	; 63
    4d9e:	f8 94       	cli
    4da0:	ed 91       	ld	r30, X+
    4da2:	fc 91       	ld	r31, X
    4da4:	11 97       	sbiw	r26, 0x01	; 1
    4da6:	36 97       	sbiw	r30, 0x06	; 6
    4da8:	80 81       	ld	r24, Z
    4daa:	82 60       	ori	r24, 0x02	; 2
    4dac:	80 83       	st	Z, r24
    4dae:	8d 90       	ld	r8, X+
    4db0:	9c 90       	ld	r9, X
    4db2:	c3 01       	movw	r24, r6
    4db4:	b2 01       	movw	r22, r4
    4db6:	1c d6       	rcall	.+3128   	; 0x59f0 <__floatunsisf>
    4db8:	20 e0       	ldi	r18, 0x00	; 0
    4dba:	30 e0       	ldi	r19, 0x00	; 0
    4dbc:	40 e0       	ldi	r20, 0x00	; 0
    4dbe:	51 e4       	ldi	r21, 0x41	; 65
    4dc0:	a5 d6       	rcall	.+3402   	; 0x5b0c <__mulsf3>
    4dc2:	9b 01       	movw	r18, r22
    4dc4:	ac 01       	movw	r20, r24
    4dc6:	60 e0       	ldi	r22, 0x00	; 0
    4dc8:	74 e2       	ldi	r23, 0x24	; 36
    4dca:	84 e7       	ldi	r24, 0x74	; 116
    4dcc:	9b e4       	ldi	r25, 0x4B	; 75
    4dce:	77 d5       	rcall	.+2798   	; 0x58be <__divsf3>
    4dd0:	20 e0       	ldi	r18, 0x00	; 0
    4dd2:	30 e0       	ldi	r19, 0x00	; 0
    4dd4:	40 e8       	ldi	r20, 0x80	; 128
    4dd6:	5f e3       	ldi	r21, 0x3F	; 63
    4dd8:	0d d5       	rcall	.+2586   	; 0x57f4 <__subsf3>
    4dda:	de d5       	rcall	.+3004   	; 0x5998 <__fixunssfsi>
    4ddc:	f4 01       	movw	r30, r8
    4dde:	32 97       	sbiw	r30, 0x02	; 2
    4de0:	60 83       	st	Z, r22
    4de2:	d8 01       	movw	r26, r16
    4de4:	ed 91       	ld	r30, X+
    4de6:	fc 91       	ld	r31, X
    4de8:	11 97       	sbiw	r26, 0x01	; 1
    4dea:	35 97       	sbiw	r30, 0x05	; 5
    4dec:	88 e9       	ldi	r24, 0x98	; 152
    4dee:	80 83       	st	Z, r24
    4df0:	ed 91       	ld	r30, X+
    4df2:	fc 91       	ld	r31, X
    4df4:	34 97       	sbiw	r30, 0x04	; 4
    4df6:	86 e0       	ldi	r24, 0x06	; 6
    4df8:	80 83       	st	Z, r24
    4dfa:	ff be       	out	0x3f, r15	; 63
    4dfc:	c8 01       	movw	r24, r16
    4dfe:	df 91       	pop	r29
    4e00:	cf 91       	pop	r28
    4e02:	1f 91       	pop	r17
    4e04:	0f 91       	pop	r16
    4e06:	ff 90       	pop	r15
    4e08:	ef 90       	pop	r14
    4e0a:	cf 90       	pop	r12
    4e0c:	af 90       	pop	r10
    4e0e:	9f 90       	pop	r9
    4e10:	8f 90       	pop	r8
    4e12:	7f 90       	pop	r7
    4e14:	6f 90       	pop	r6
    4e16:	5f 90       	pop	r5
    4e18:	4f 90       	pop	r4
    4e1a:	3f 90       	pop	r3
    4e1c:	2f 90       	pop	r2
    4e1e:	08 95       	ret

00004e20 <serial_send_byte>:
    4e20:	cf 93       	push	r28
    4e22:	df 93       	push	r29
    4e24:	ec 01       	movw	r28, r24
    4e26:	ea 81       	ldd	r30, Y+2	; 0x02
    4e28:	fb 81       	ldd	r31, Y+3	; 0x03
    4e2a:	93 81       	ldd	r25, Z+3	; 0x03
    4e2c:	82 81       	ldd	r24, Z+2	; 0x02
    4e2e:	25 81       	ldd	r18, Z+5	; 0x05
    4e30:	98 1b       	sub	r25, r24
    4e32:	92 23       	and	r25, r18
    4e34:	84 81       	ldd	r24, Z+4	; 0x04
    4e36:	98 17       	cp	r25, r24
    4e38:	a1 f0       	breq	.+40     	; 0x4e62 <serial_send_byte+0x42>
    4e3a:	93 81       	ldd	r25, Z+3	; 0x03
    4e3c:	26 95       	lsr	r18
    4e3e:	29 23       	and	r18, r25
    4e40:	a0 81       	ld	r26, Z
    4e42:	b1 81       	ldd	r27, Z+1	; 0x01
    4e44:	a2 0f       	add	r26, r18
    4e46:	b1 1d       	adc	r27, r1
    4e48:	6c 93       	st	X, r22
    4e4a:	9f 5f       	subi	r25, 0xFF	; 255
    4e4c:	25 81       	ldd	r18, Z+5	; 0x05
    4e4e:	92 23       	and	r25, r18
    4e50:	93 83       	std	Z+3, r25	; 0x03
    4e52:	e8 81       	ld	r30, Y
    4e54:	f9 81       	ldd	r31, Y+1	; 0x01
    4e56:	35 97       	sbiw	r30, 0x05	; 5
    4e58:	80 81       	ld	r24, Z
    4e5a:	80 62       	ori	r24, 0x20	; 32
    4e5c:	80 83       	st	Z, r24
    4e5e:	80 e0       	ldi	r24, 0x00	; 0
    4e60:	01 c0       	rjmp	.+2      	; 0x4e64 <serial_send_byte+0x44>
    4e62:	82 e0       	ldi	r24, 0x02	; 2
    4e64:	df 91       	pop	r29
    4e66:	cf 91       	pop	r28
    4e68:	08 95       	ret

00004e6a <serial_send_bytes>:
    4e6a:	ef 92       	push	r14
    4e6c:	ff 92       	push	r15
    4e6e:	0f 93       	push	r16
    4e70:	1f 93       	push	r17
    4e72:	cf 93       	push	r28
    4e74:	df 93       	push	r29
    4e76:	7c 01       	movw	r14, r24
    4e78:	dc 01       	movw	r26, r24
    4e7a:	12 96       	adiw	r26, 0x02	; 2
    4e7c:	ed 91       	ld	r30, X+
    4e7e:	fc 91       	ld	r31, X
    4e80:	13 97       	sbiw	r26, 0x03	; 3
    4e82:	93 81       	ldd	r25, Z+3	; 0x03
    4e84:	82 81       	ldd	r24, Z+2	; 0x02
    4e86:	98 1b       	sub	r25, r24
    4e88:	85 81       	ldd	r24, Z+5	; 0x05
    4e8a:	98 23       	and	r25, r24
    4e8c:	84 81       	ldd	r24, Z+4	; 0x04
    4e8e:	89 1b       	sub	r24, r25
    4e90:	86 17       	cp	r24, r22
    4e92:	98 f1       	brcs	.+102    	; 0x4efa <serial_send_bytes+0x90>
    4e94:	66 23       	and	r22, r22
    4e96:	41 f1       	breq	.+80     	; 0x4ee8 <serial_send_bytes+0x7e>
    4e98:	84 2f       	mov	r24, r20
    4e9a:	95 2f       	mov	r25, r21
    4e9c:	dc 01       	movw	r26, r24
    4e9e:	61 50       	subi	r22, 0x01	; 1
    4ea0:	46 2f       	mov	r20, r22
    4ea2:	50 e0       	ldi	r21, 0x00	; 0
    4ea4:	4f 5f       	subi	r20, 0xFF	; 255
    4ea6:	5f 4f       	sbci	r21, 0xFF	; 255
    4ea8:	48 0f       	add	r20, r24
    4eaa:	59 1f       	adc	r21, r25
    4eac:	e7 01       	movw	r28, r14
    4eae:	ea 81       	ldd	r30, Y+2	; 0x02
    4eb0:	fb 81       	ldd	r31, Y+3	; 0x03
    4eb2:	93 81       	ldd	r25, Z+3	; 0x03
    4eb4:	82 81       	ldd	r24, Z+2	; 0x02
    4eb6:	25 81       	ldd	r18, Z+5	; 0x05
    4eb8:	98 1b       	sub	r25, r24
    4eba:	92 23       	and	r25, r18
    4ebc:	84 81       	ldd	r24, Z+4	; 0x04
    4ebe:	98 17       	cp	r25, r24
    4ec0:	79 f0       	breq	.+30     	; 0x4ee0 <serial_send_bytes+0x76>
    4ec2:	8c 91       	ld	r24, X
    4ec4:	93 81       	ldd	r25, Z+3	; 0x03
    4ec6:	26 95       	lsr	r18
    4ec8:	29 23       	and	r18, r25
    4eca:	60 81       	ld	r22, Z
    4ecc:	71 81       	ldd	r23, Z+1	; 0x01
    4ece:	8b 01       	movw	r16, r22
    4ed0:	02 0f       	add	r16, r18
    4ed2:	11 1d       	adc	r17, r1
    4ed4:	e8 01       	movw	r28, r16
    4ed6:	88 83       	st	Y, r24
    4ed8:	9f 5f       	subi	r25, 0xFF	; 255
    4eda:	85 81       	ldd	r24, Z+5	; 0x05
    4edc:	98 23       	and	r25, r24
    4ede:	93 83       	std	Z+3, r25	; 0x03
    4ee0:	11 96       	adiw	r26, 0x01	; 1
    4ee2:	a4 17       	cp	r26, r20
    4ee4:	b5 07       	cpc	r27, r21
    4ee6:	11 f7       	brne	.-60     	; 0x4eac <serial_send_bytes+0x42>
    4ee8:	d7 01       	movw	r26, r14
    4eea:	ed 91       	ld	r30, X+
    4eec:	fc 91       	ld	r31, X
    4eee:	35 97       	sbiw	r30, 0x05	; 5
    4ef0:	80 81       	ld	r24, Z
    4ef2:	80 62       	ori	r24, 0x20	; 32
    4ef4:	80 83       	st	Z, r24
    4ef6:	80 e0       	ldi	r24, 0x00	; 0
    4ef8:	01 c0       	rjmp	.+2      	; 0x4efc <serial_send_bytes+0x92>
    4efa:	82 e0       	ldi	r24, 0x02	; 2
    4efc:	df 91       	pop	r29
    4efe:	cf 91       	pop	r28
    4f00:	1f 91       	pop	r17
    4f02:	0f 91       	pop	r16
    4f04:	ff 90       	pop	r15
    4f06:	ef 90       	pop	r14
    4f08:	08 95       	ret

00004f0a <serial_get_byte>:
    4f0a:	dc 01       	movw	r26, r24
    4f0c:	14 96       	adiw	r26, 0x04	; 4
    4f0e:	ed 91       	ld	r30, X+
    4f10:	fc 91       	ld	r31, X
    4f12:	15 97       	sbiw	r26, 0x05	; 5
    4f14:	93 81       	ldd	r25, Z+3	; 0x03
    4f16:	82 81       	ldd	r24, Z+2	; 0x02
    4f18:	98 17       	cp	r25, r24
    4f1a:	89 f0       	breq	.+34     	; 0x4f3e <serial_get_byte+0x34>
    4f1c:	92 81       	ldd	r25, Z+2	; 0x02
    4f1e:	85 81       	ldd	r24, Z+5	; 0x05
    4f20:	86 95       	lsr	r24
    4f22:	89 23       	and	r24, r25
    4f24:	a0 81       	ld	r26, Z
    4f26:	b1 81       	ldd	r27, Z+1	; 0x01
    4f28:	a8 0f       	add	r26, r24
    4f2a:	b1 1d       	adc	r27, r1
    4f2c:	8c 91       	ld	r24, X
    4f2e:	db 01       	movw	r26, r22
    4f30:	8c 93       	st	X, r24
    4f32:	9f 5f       	subi	r25, 0xFF	; 255
    4f34:	85 81       	ldd	r24, Z+5	; 0x05
    4f36:	98 23       	and	r25, r24
    4f38:	92 83       	std	Z+2, r25	; 0x02
    4f3a:	80 e0       	ldi	r24, 0x00	; 0
    4f3c:	08 95       	ret
    4f3e:	83 e0       	ldi	r24, 0x03	; 3
    4f40:	08 95       	ret

00004f42 <__vector_25>:
    4f42:	1f 92       	push	r1
    4f44:	0f 92       	push	r0
    4f46:	0f b6       	in	r0, 0x3f	; 63
    4f48:	0f 92       	push	r0
    4f4a:	11 24       	eor	r1, r1
    4f4c:	0b b6       	in	r0, 0x3b	; 59
    4f4e:	0f 92       	push	r0
    4f50:	2f 93       	push	r18
    4f52:	3f 93       	push	r19
    4f54:	4f 93       	push	r20
    4f56:	5f 93       	push	r21
    4f58:	6f 93       	push	r22
    4f5a:	7f 93       	push	r23
    4f5c:	8f 93       	push	r24
    4f5e:	9f 93       	push	r25
    4f60:	af 93       	push	r26
    4f62:	bf 93       	push	r27
    4f64:	cf 93       	push	r28
    4f66:	df 93       	push	r29
    4f68:	ef 93       	push	r30
    4f6a:	ff 93       	push	r31
    4f6c:	a0 91 18 1b 	lds	r26, 0x1B18	; 0x801b18 <_ser_handle>
    4f70:	b0 91 19 1b 	lds	r27, 0x1B19	; 0x801b19 <_ser_handle+0x1>
    4f74:	10 97       	sbiw	r26, 0x00	; 0
    4f76:	11 f1       	breq	.+68     	; 0x4fbc <__vector_25+0x7a>
    4f78:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    4f7c:	14 96       	adiw	r26, 0x04	; 4
    4f7e:	ed 91       	ld	r30, X+
    4f80:	fc 91       	ld	r31, X
    4f82:	15 97       	sbiw	r26, 0x05	; 5
    4f84:	93 81       	ldd	r25, Z+3	; 0x03
    4f86:	82 81       	ldd	r24, Z+2	; 0x02
    4f88:	25 81       	ldd	r18, Z+5	; 0x05
    4f8a:	98 1b       	sub	r25, r24
    4f8c:	92 23       	and	r25, r18
    4f8e:	84 81       	ldd	r24, Z+4	; 0x04
    4f90:	98 17       	cp	r25, r24
    4f92:	61 f0       	breq	.+24     	; 0x4fac <__vector_25+0x6a>
    4f94:	83 81       	ldd	r24, Z+3	; 0x03
    4f96:	26 95       	lsr	r18
    4f98:	28 23       	and	r18, r24
    4f9a:	c0 81       	ld	r28, Z
    4f9c:	d1 81       	ldd	r29, Z+1	; 0x01
    4f9e:	c2 0f       	add	r28, r18
    4fa0:	d1 1d       	adc	r29, r1
    4fa2:	68 83       	st	Y, r22
    4fa4:	8f 5f       	subi	r24, 0xFF	; 255
    4fa6:	95 81       	ldd	r25, Z+5	; 0x05
    4fa8:	89 23       	and	r24, r25
    4faa:	83 83       	std	Z+3, r24	; 0x03
    4fac:	16 96       	adiw	r26, 0x06	; 6
    4fae:	ed 91       	ld	r30, X+
    4fb0:	fc 91       	ld	r31, X
    4fb2:	17 97       	sbiw	r26, 0x07	; 7
    4fb4:	30 97       	sbiw	r30, 0x00	; 0
    4fb6:	11 f0       	breq	.+4      	; 0x4fbc <__vector_25+0x7a>
    4fb8:	cd 01       	movw	r24, r26
    4fba:	19 95       	eicall
    4fbc:	ff 91       	pop	r31
    4fbe:	ef 91       	pop	r30
    4fc0:	df 91       	pop	r29
    4fc2:	cf 91       	pop	r28
    4fc4:	bf 91       	pop	r27
    4fc6:	af 91       	pop	r26
    4fc8:	9f 91       	pop	r25
    4fca:	8f 91       	pop	r24
    4fcc:	7f 91       	pop	r23
    4fce:	6f 91       	pop	r22
    4fd0:	5f 91       	pop	r21
    4fd2:	4f 91       	pop	r20
    4fd4:	3f 91       	pop	r19
    4fd6:	2f 91       	pop	r18
    4fd8:	0f 90       	pop	r0
    4fda:	0b be       	out	0x3b, r0	; 59
    4fdc:	0f 90       	pop	r0
    4fde:	0f be       	out	0x3f, r0	; 63
    4fe0:	0f 90       	pop	r0
    4fe2:	1f 90       	pop	r1
    4fe4:	18 95       	reti

00004fe6 <__vector_26>:
    4fe6:	1f 92       	push	r1
    4fe8:	0f 92       	push	r0
    4fea:	0f b6       	in	r0, 0x3f	; 63
    4fec:	0f 92       	push	r0
    4fee:	11 24       	eor	r1, r1
    4ff0:	0b b6       	in	r0, 0x3b	; 59
    4ff2:	0f 92       	push	r0
    4ff4:	2f 93       	push	r18
    4ff6:	8f 93       	push	r24
    4ff8:	9f 93       	push	r25
    4ffa:	af 93       	push	r26
    4ffc:	bf 93       	push	r27
    4ffe:	ef 93       	push	r30
    5000:	ff 93       	push	r31
    5002:	e0 91 18 1b 	lds	r30, 0x1B18	; 0x801b18 <_ser_handle>
    5006:	f0 91 19 1b 	lds	r31, 0x1B19	; 0x801b19 <_ser_handle+0x1>
    500a:	30 97       	sbiw	r30, 0x00	; 0
    500c:	b9 f0       	breq	.+46     	; 0x503c <__vector_26+0x56>
    500e:	02 80       	ldd	r0, Z+2	; 0x02
    5010:	f3 81       	ldd	r31, Z+3	; 0x03
    5012:	e0 2d       	mov	r30, r0
    5014:	93 81       	ldd	r25, Z+3	; 0x03
    5016:	82 81       	ldd	r24, Z+2	; 0x02
    5018:	98 17       	cp	r25, r24
    501a:	b1 f0       	breq	.+44     	; 0x5048 <__vector_26+0x62>
    501c:	92 81       	ldd	r25, Z+2	; 0x02
    501e:	85 81       	ldd	r24, Z+5	; 0x05
    5020:	28 2f       	mov	r18, r24
    5022:	26 95       	lsr	r18
    5024:	29 23       	and	r18, r25
    5026:	a0 81       	ld	r26, Z
    5028:	b1 81       	ldd	r27, Z+1	; 0x01
    502a:	a2 0f       	add	r26, r18
    502c:	b1 1d       	adc	r27, r1
    502e:	2c 91       	ld	r18, X
    5030:	9f 5f       	subi	r25, 0xFF	; 255
    5032:	89 23       	and	r24, r25
    5034:	82 83       	std	Z+2, r24	; 0x02
    5036:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    503a:	0b c0       	rjmp	.+22     	; 0x5052 <__vector_26+0x6c>
    503c:	e1 ec       	ldi	r30, 0xC1	; 193
    503e:	f0 e0       	ldi	r31, 0x00	; 0
    5040:	80 81       	ld	r24, Z
    5042:	8f 7d       	andi	r24, 0xDF	; 223
    5044:	80 83       	st	Z, r24
    5046:	05 c0       	rjmp	.+10     	; 0x5052 <__vector_26+0x6c>
    5048:	e1 ec       	ldi	r30, 0xC1	; 193
    504a:	f0 e0       	ldi	r31, 0x00	; 0
    504c:	80 81       	ld	r24, Z
    504e:	8f 7d       	andi	r24, 0xDF	; 223
    5050:	80 83       	st	Z, r24
    5052:	ff 91       	pop	r31
    5054:	ef 91       	pop	r30
    5056:	bf 91       	pop	r27
    5058:	af 91       	pop	r26
    505a:	9f 91       	pop	r25
    505c:	8f 91       	pop	r24
    505e:	2f 91       	pop	r18
    5060:	0f 90       	pop	r0
    5062:	0b be       	out	0x3b, r0	; 59
    5064:	0f 90       	pop	r0
    5066:	0f be       	out	0x3f, r0	; 63
    5068:	0f 90       	pop	r0
    506a:	1f 90       	pop	r1
    506c:	18 95       	reti

0000506e <__vector_36>:
    506e:	1f 92       	push	r1
    5070:	0f 92       	push	r0
    5072:	0f b6       	in	r0, 0x3f	; 63
    5074:	0f 92       	push	r0
    5076:	11 24       	eor	r1, r1
    5078:	0b b6       	in	r0, 0x3b	; 59
    507a:	0f 92       	push	r0
    507c:	2f 93       	push	r18
    507e:	3f 93       	push	r19
    5080:	4f 93       	push	r20
    5082:	5f 93       	push	r21
    5084:	6f 93       	push	r22
    5086:	7f 93       	push	r23
    5088:	8f 93       	push	r24
    508a:	9f 93       	push	r25
    508c:	af 93       	push	r26
    508e:	bf 93       	push	r27
    5090:	cf 93       	push	r28
    5092:	df 93       	push	r29
    5094:	ef 93       	push	r30
    5096:	ff 93       	push	r31
    5098:	a0 91 1a 1b 	lds	r26, 0x1B1A	; 0x801b1a <_ser_handle+0x2>
    509c:	b0 91 1b 1b 	lds	r27, 0x1B1B	; 0x801b1b <_ser_handle+0x3>
    50a0:	10 97       	sbiw	r26, 0x00	; 0
    50a2:	11 f1       	breq	.+68     	; 0x50e8 <__vector_36+0x7a>
    50a4:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    50a8:	14 96       	adiw	r26, 0x04	; 4
    50aa:	ed 91       	ld	r30, X+
    50ac:	fc 91       	ld	r31, X
    50ae:	15 97       	sbiw	r26, 0x05	; 5
    50b0:	93 81       	ldd	r25, Z+3	; 0x03
    50b2:	82 81       	ldd	r24, Z+2	; 0x02
    50b4:	25 81       	ldd	r18, Z+5	; 0x05
    50b6:	98 1b       	sub	r25, r24
    50b8:	92 23       	and	r25, r18
    50ba:	84 81       	ldd	r24, Z+4	; 0x04
    50bc:	98 17       	cp	r25, r24
    50be:	61 f0       	breq	.+24     	; 0x50d8 <__vector_36+0x6a>
    50c0:	83 81       	ldd	r24, Z+3	; 0x03
    50c2:	26 95       	lsr	r18
    50c4:	28 23       	and	r18, r24
    50c6:	c0 81       	ld	r28, Z
    50c8:	d1 81       	ldd	r29, Z+1	; 0x01
    50ca:	c2 0f       	add	r28, r18
    50cc:	d1 1d       	adc	r29, r1
    50ce:	68 83       	st	Y, r22
    50d0:	8f 5f       	subi	r24, 0xFF	; 255
    50d2:	95 81       	ldd	r25, Z+5	; 0x05
    50d4:	89 23       	and	r24, r25
    50d6:	83 83       	std	Z+3, r24	; 0x03
    50d8:	16 96       	adiw	r26, 0x06	; 6
    50da:	ed 91       	ld	r30, X+
    50dc:	fc 91       	ld	r31, X
    50de:	17 97       	sbiw	r26, 0x07	; 7
    50e0:	30 97       	sbiw	r30, 0x00	; 0
    50e2:	11 f0       	breq	.+4      	; 0x50e8 <__vector_36+0x7a>
    50e4:	cd 01       	movw	r24, r26
    50e6:	19 95       	eicall
    50e8:	ff 91       	pop	r31
    50ea:	ef 91       	pop	r30
    50ec:	df 91       	pop	r29
    50ee:	cf 91       	pop	r28
    50f0:	bf 91       	pop	r27
    50f2:	af 91       	pop	r26
    50f4:	9f 91       	pop	r25
    50f6:	8f 91       	pop	r24
    50f8:	7f 91       	pop	r23
    50fa:	6f 91       	pop	r22
    50fc:	5f 91       	pop	r21
    50fe:	4f 91       	pop	r20
    5100:	3f 91       	pop	r19
    5102:	2f 91       	pop	r18
    5104:	0f 90       	pop	r0
    5106:	0b be       	out	0x3b, r0	; 59
    5108:	0f 90       	pop	r0
    510a:	0f be       	out	0x3f, r0	; 63
    510c:	0f 90       	pop	r0
    510e:	1f 90       	pop	r1
    5110:	18 95       	reti

00005112 <__vector_37>:
    5112:	1f 92       	push	r1
    5114:	0f 92       	push	r0
    5116:	0f b6       	in	r0, 0x3f	; 63
    5118:	0f 92       	push	r0
    511a:	11 24       	eor	r1, r1
    511c:	0b b6       	in	r0, 0x3b	; 59
    511e:	0f 92       	push	r0
    5120:	2f 93       	push	r18
    5122:	8f 93       	push	r24
    5124:	9f 93       	push	r25
    5126:	af 93       	push	r26
    5128:	bf 93       	push	r27
    512a:	ef 93       	push	r30
    512c:	ff 93       	push	r31
    512e:	e0 91 1a 1b 	lds	r30, 0x1B1A	; 0x801b1a <_ser_handle+0x2>
    5132:	f0 91 1b 1b 	lds	r31, 0x1B1B	; 0x801b1b <_ser_handle+0x3>
    5136:	30 97       	sbiw	r30, 0x00	; 0
    5138:	b9 f0       	breq	.+46     	; 0x5168 <__vector_37+0x56>
    513a:	02 80       	ldd	r0, Z+2	; 0x02
    513c:	f3 81       	ldd	r31, Z+3	; 0x03
    513e:	e0 2d       	mov	r30, r0
    5140:	93 81       	ldd	r25, Z+3	; 0x03
    5142:	82 81       	ldd	r24, Z+2	; 0x02
    5144:	98 17       	cp	r25, r24
    5146:	b1 f0       	breq	.+44     	; 0x5174 <__vector_37+0x62>
    5148:	92 81       	ldd	r25, Z+2	; 0x02
    514a:	85 81       	ldd	r24, Z+5	; 0x05
    514c:	28 2f       	mov	r18, r24
    514e:	26 95       	lsr	r18
    5150:	29 23       	and	r18, r25
    5152:	a0 81       	ld	r26, Z
    5154:	b1 81       	ldd	r27, Z+1	; 0x01
    5156:	a2 0f       	add	r26, r18
    5158:	b1 1d       	adc	r27, r1
    515a:	2c 91       	ld	r18, X
    515c:	9f 5f       	subi	r25, 0xFF	; 255
    515e:	89 23       	and	r24, r25
    5160:	82 83       	std	Z+2, r24	; 0x02
    5162:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    5166:	0b c0       	rjmp	.+22     	; 0x517e <__vector_37+0x6c>
    5168:	e9 ec       	ldi	r30, 0xC9	; 201
    516a:	f0 e0       	ldi	r31, 0x00	; 0
    516c:	80 81       	ld	r24, Z
    516e:	8f 7d       	andi	r24, 0xDF	; 223
    5170:	80 83       	st	Z, r24
    5172:	05 c0       	rjmp	.+10     	; 0x517e <__vector_37+0x6c>
    5174:	e9 ec       	ldi	r30, 0xC9	; 201
    5176:	f0 e0       	ldi	r31, 0x00	; 0
    5178:	80 81       	ld	r24, Z
    517a:	8f 7d       	andi	r24, 0xDF	; 223
    517c:	80 83       	st	Z, r24
    517e:	ff 91       	pop	r31
    5180:	ef 91       	pop	r30
    5182:	bf 91       	pop	r27
    5184:	af 91       	pop	r26
    5186:	9f 91       	pop	r25
    5188:	8f 91       	pop	r24
    518a:	2f 91       	pop	r18
    518c:	0f 90       	pop	r0
    518e:	0b be       	out	0x3b, r0	; 59
    5190:	0f 90       	pop	r0
    5192:	0f be       	out	0x3f, r0	; 63
    5194:	0f 90       	pop	r0
    5196:	1f 90       	pop	r1
    5198:	18 95       	reti

0000519a <__vector_51>:
    519a:	1f 92       	push	r1
    519c:	0f 92       	push	r0
    519e:	0f b6       	in	r0, 0x3f	; 63
    51a0:	0f 92       	push	r0
    51a2:	11 24       	eor	r1, r1
    51a4:	0b b6       	in	r0, 0x3b	; 59
    51a6:	0f 92       	push	r0
    51a8:	2f 93       	push	r18
    51aa:	3f 93       	push	r19
    51ac:	4f 93       	push	r20
    51ae:	5f 93       	push	r21
    51b0:	6f 93       	push	r22
    51b2:	7f 93       	push	r23
    51b4:	8f 93       	push	r24
    51b6:	9f 93       	push	r25
    51b8:	af 93       	push	r26
    51ba:	bf 93       	push	r27
    51bc:	cf 93       	push	r28
    51be:	df 93       	push	r29
    51c0:	ef 93       	push	r30
    51c2:	ff 93       	push	r31
    51c4:	a0 91 1c 1b 	lds	r26, 0x1B1C	; 0x801b1c <_ser_handle+0x4>
    51c8:	b0 91 1d 1b 	lds	r27, 0x1B1D	; 0x801b1d <_ser_handle+0x5>
    51cc:	10 97       	sbiw	r26, 0x00	; 0
    51ce:	11 f1       	breq	.+68     	; 0x5214 <__vector_51+0x7a>
    51d0:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    51d4:	14 96       	adiw	r26, 0x04	; 4
    51d6:	ed 91       	ld	r30, X+
    51d8:	fc 91       	ld	r31, X
    51da:	15 97       	sbiw	r26, 0x05	; 5
    51dc:	93 81       	ldd	r25, Z+3	; 0x03
    51de:	82 81       	ldd	r24, Z+2	; 0x02
    51e0:	25 81       	ldd	r18, Z+5	; 0x05
    51e2:	98 1b       	sub	r25, r24
    51e4:	92 23       	and	r25, r18
    51e6:	84 81       	ldd	r24, Z+4	; 0x04
    51e8:	98 17       	cp	r25, r24
    51ea:	61 f0       	breq	.+24     	; 0x5204 <__vector_51+0x6a>
    51ec:	83 81       	ldd	r24, Z+3	; 0x03
    51ee:	26 95       	lsr	r18
    51f0:	28 23       	and	r18, r24
    51f2:	c0 81       	ld	r28, Z
    51f4:	d1 81       	ldd	r29, Z+1	; 0x01
    51f6:	c2 0f       	add	r28, r18
    51f8:	d1 1d       	adc	r29, r1
    51fa:	68 83       	st	Y, r22
    51fc:	8f 5f       	subi	r24, 0xFF	; 255
    51fe:	95 81       	ldd	r25, Z+5	; 0x05
    5200:	89 23       	and	r24, r25
    5202:	83 83       	std	Z+3, r24	; 0x03
    5204:	16 96       	adiw	r26, 0x06	; 6
    5206:	ed 91       	ld	r30, X+
    5208:	fc 91       	ld	r31, X
    520a:	17 97       	sbiw	r26, 0x07	; 7
    520c:	30 97       	sbiw	r30, 0x00	; 0
    520e:	11 f0       	breq	.+4      	; 0x5214 <__vector_51+0x7a>
    5210:	cd 01       	movw	r24, r26
    5212:	19 95       	eicall
    5214:	ff 91       	pop	r31
    5216:	ef 91       	pop	r30
    5218:	df 91       	pop	r29
    521a:	cf 91       	pop	r28
    521c:	bf 91       	pop	r27
    521e:	af 91       	pop	r26
    5220:	9f 91       	pop	r25
    5222:	8f 91       	pop	r24
    5224:	7f 91       	pop	r23
    5226:	6f 91       	pop	r22
    5228:	5f 91       	pop	r21
    522a:	4f 91       	pop	r20
    522c:	3f 91       	pop	r19
    522e:	2f 91       	pop	r18
    5230:	0f 90       	pop	r0
    5232:	0b be       	out	0x3b, r0	; 59
    5234:	0f 90       	pop	r0
    5236:	0f be       	out	0x3f, r0	; 63
    5238:	0f 90       	pop	r0
    523a:	1f 90       	pop	r1
    523c:	18 95       	reti

0000523e <__vector_52>:
    523e:	1f 92       	push	r1
    5240:	0f 92       	push	r0
    5242:	0f b6       	in	r0, 0x3f	; 63
    5244:	0f 92       	push	r0
    5246:	11 24       	eor	r1, r1
    5248:	0b b6       	in	r0, 0x3b	; 59
    524a:	0f 92       	push	r0
    524c:	2f 93       	push	r18
    524e:	8f 93       	push	r24
    5250:	9f 93       	push	r25
    5252:	af 93       	push	r26
    5254:	bf 93       	push	r27
    5256:	ef 93       	push	r30
    5258:	ff 93       	push	r31
    525a:	e0 91 1c 1b 	lds	r30, 0x1B1C	; 0x801b1c <_ser_handle+0x4>
    525e:	f0 91 1d 1b 	lds	r31, 0x1B1D	; 0x801b1d <_ser_handle+0x5>
    5262:	30 97       	sbiw	r30, 0x00	; 0
    5264:	b9 f0       	breq	.+46     	; 0x5294 <__vector_52+0x56>
    5266:	02 80       	ldd	r0, Z+2	; 0x02
    5268:	f3 81       	ldd	r31, Z+3	; 0x03
    526a:	e0 2d       	mov	r30, r0
    526c:	93 81       	ldd	r25, Z+3	; 0x03
    526e:	82 81       	ldd	r24, Z+2	; 0x02
    5270:	98 17       	cp	r25, r24
    5272:	b1 f0       	breq	.+44     	; 0x52a0 <__vector_52+0x62>
    5274:	92 81       	ldd	r25, Z+2	; 0x02
    5276:	85 81       	ldd	r24, Z+5	; 0x05
    5278:	28 2f       	mov	r18, r24
    527a:	26 95       	lsr	r18
    527c:	29 23       	and	r18, r25
    527e:	a0 81       	ld	r26, Z
    5280:	b1 81       	ldd	r27, Z+1	; 0x01
    5282:	a2 0f       	add	r26, r18
    5284:	b1 1d       	adc	r27, r1
    5286:	2c 91       	ld	r18, X
    5288:	9f 5f       	subi	r25, 0xFF	; 255
    528a:	89 23       	and	r24, r25
    528c:	82 83       	std	Z+2, r24	; 0x02
    528e:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    5292:	0b c0       	rjmp	.+22     	; 0x52aa <__vector_52+0x6c>
    5294:	e1 ed       	ldi	r30, 0xD1	; 209
    5296:	f0 e0       	ldi	r31, 0x00	; 0
    5298:	80 81       	ld	r24, Z
    529a:	8f 7d       	andi	r24, 0xDF	; 223
    529c:	80 83       	st	Z, r24
    529e:	05 c0       	rjmp	.+10     	; 0x52aa <__vector_52+0x6c>
    52a0:	e1 ed       	ldi	r30, 0xD1	; 209
    52a2:	f0 e0       	ldi	r31, 0x00	; 0
    52a4:	80 81       	ld	r24, Z
    52a6:	8f 7d       	andi	r24, 0xDF	; 223
    52a8:	80 83       	st	Z, r24
    52aa:	ff 91       	pop	r31
    52ac:	ef 91       	pop	r30
    52ae:	bf 91       	pop	r27
    52b0:	af 91       	pop	r26
    52b2:	9f 91       	pop	r25
    52b4:	8f 91       	pop	r24
    52b6:	2f 91       	pop	r18
    52b8:	0f 90       	pop	r0
    52ba:	0b be       	out	0x3b, r0	; 59
    52bc:	0f 90       	pop	r0
    52be:	0f be       	out	0x3f, r0	; 63
    52c0:	0f 90       	pop	r0
    52c2:	1f 90       	pop	r1
    52c4:	18 95       	reti

000052c6 <__vector_54>:
    52c6:	1f 92       	push	r1
    52c8:	0f 92       	push	r0
    52ca:	0f b6       	in	r0, 0x3f	; 63
    52cc:	0f 92       	push	r0
    52ce:	11 24       	eor	r1, r1
    52d0:	0b b6       	in	r0, 0x3b	; 59
    52d2:	0f 92       	push	r0
    52d4:	2f 93       	push	r18
    52d6:	3f 93       	push	r19
    52d8:	4f 93       	push	r20
    52da:	5f 93       	push	r21
    52dc:	6f 93       	push	r22
    52de:	7f 93       	push	r23
    52e0:	8f 93       	push	r24
    52e2:	9f 93       	push	r25
    52e4:	af 93       	push	r26
    52e6:	bf 93       	push	r27
    52e8:	cf 93       	push	r28
    52ea:	df 93       	push	r29
    52ec:	ef 93       	push	r30
    52ee:	ff 93       	push	r31
    52f0:	a0 91 1e 1b 	lds	r26, 0x1B1E	; 0x801b1e <_ser_handle+0x6>
    52f4:	b0 91 1f 1b 	lds	r27, 0x1B1F	; 0x801b1f <_ser_handle+0x7>
    52f8:	10 97       	sbiw	r26, 0x00	; 0
    52fa:	11 f1       	breq	.+68     	; 0x5340 <__vector_54+0x7a>
    52fc:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    5300:	14 96       	adiw	r26, 0x04	; 4
    5302:	ed 91       	ld	r30, X+
    5304:	fc 91       	ld	r31, X
    5306:	15 97       	sbiw	r26, 0x05	; 5
    5308:	93 81       	ldd	r25, Z+3	; 0x03
    530a:	82 81       	ldd	r24, Z+2	; 0x02
    530c:	25 81       	ldd	r18, Z+5	; 0x05
    530e:	98 1b       	sub	r25, r24
    5310:	92 23       	and	r25, r18
    5312:	84 81       	ldd	r24, Z+4	; 0x04
    5314:	98 17       	cp	r25, r24
    5316:	61 f0       	breq	.+24     	; 0x5330 <__vector_54+0x6a>
    5318:	83 81       	ldd	r24, Z+3	; 0x03
    531a:	26 95       	lsr	r18
    531c:	28 23       	and	r18, r24
    531e:	c0 81       	ld	r28, Z
    5320:	d1 81       	ldd	r29, Z+1	; 0x01
    5322:	c2 0f       	add	r28, r18
    5324:	d1 1d       	adc	r29, r1
    5326:	68 83       	st	Y, r22
    5328:	8f 5f       	subi	r24, 0xFF	; 255
    532a:	95 81       	ldd	r25, Z+5	; 0x05
    532c:	89 23       	and	r24, r25
    532e:	83 83       	std	Z+3, r24	; 0x03
    5330:	16 96       	adiw	r26, 0x06	; 6
    5332:	ed 91       	ld	r30, X+
    5334:	fc 91       	ld	r31, X
    5336:	17 97       	sbiw	r26, 0x07	; 7
    5338:	30 97       	sbiw	r30, 0x00	; 0
    533a:	11 f0       	breq	.+4      	; 0x5340 <__vector_54+0x7a>
    533c:	cd 01       	movw	r24, r26
    533e:	19 95       	eicall
    5340:	ff 91       	pop	r31
    5342:	ef 91       	pop	r30
    5344:	df 91       	pop	r29
    5346:	cf 91       	pop	r28
    5348:	bf 91       	pop	r27
    534a:	af 91       	pop	r26
    534c:	9f 91       	pop	r25
    534e:	8f 91       	pop	r24
    5350:	7f 91       	pop	r23
    5352:	6f 91       	pop	r22
    5354:	5f 91       	pop	r21
    5356:	4f 91       	pop	r20
    5358:	3f 91       	pop	r19
    535a:	2f 91       	pop	r18
    535c:	0f 90       	pop	r0
    535e:	0b be       	out	0x3b, r0	; 59
    5360:	0f 90       	pop	r0
    5362:	0f be       	out	0x3f, r0	; 63
    5364:	0f 90       	pop	r0
    5366:	1f 90       	pop	r1
    5368:	18 95       	reti

0000536a <__vector_55>:
    536a:	1f 92       	push	r1
    536c:	0f 92       	push	r0
    536e:	0f b6       	in	r0, 0x3f	; 63
    5370:	0f 92       	push	r0
    5372:	11 24       	eor	r1, r1
    5374:	0b b6       	in	r0, 0x3b	; 59
    5376:	0f 92       	push	r0
    5378:	2f 93       	push	r18
    537a:	8f 93       	push	r24
    537c:	9f 93       	push	r25
    537e:	af 93       	push	r26
    5380:	bf 93       	push	r27
    5382:	ef 93       	push	r30
    5384:	ff 93       	push	r31
    5386:	e0 91 1e 1b 	lds	r30, 0x1B1E	; 0x801b1e <_ser_handle+0x6>
    538a:	f0 91 1f 1b 	lds	r31, 0x1B1F	; 0x801b1f <_ser_handle+0x7>
    538e:	30 97       	sbiw	r30, 0x00	; 0
    5390:	b9 f0       	breq	.+46     	; 0x53c0 <__vector_55+0x56>
    5392:	02 80       	ldd	r0, Z+2	; 0x02
    5394:	f3 81       	ldd	r31, Z+3	; 0x03
    5396:	e0 2d       	mov	r30, r0
    5398:	93 81       	ldd	r25, Z+3	; 0x03
    539a:	82 81       	ldd	r24, Z+2	; 0x02
    539c:	98 17       	cp	r25, r24
    539e:	b1 f0       	breq	.+44     	; 0x53cc <__vector_55+0x62>
    53a0:	92 81       	ldd	r25, Z+2	; 0x02
    53a2:	85 81       	ldd	r24, Z+5	; 0x05
    53a4:	28 2f       	mov	r18, r24
    53a6:	26 95       	lsr	r18
    53a8:	29 23       	and	r18, r25
    53aa:	a0 81       	ld	r26, Z
    53ac:	b1 81       	ldd	r27, Z+1	; 0x01
    53ae:	a2 0f       	add	r26, r18
    53b0:	b1 1d       	adc	r27, r1
    53b2:	2c 91       	ld	r18, X
    53b4:	9f 5f       	subi	r25, 0xFF	; 255
    53b6:	89 23       	and	r24, r25
    53b8:	82 83       	std	Z+2, r24	; 0x02
    53ba:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    53be:	0b c0       	rjmp	.+22     	; 0x53d6 <__vector_55+0x6c>
    53c0:	e1 e3       	ldi	r30, 0x31	; 49
    53c2:	f1 e0       	ldi	r31, 0x01	; 1
    53c4:	80 81       	ld	r24, Z
    53c6:	8f 7d       	andi	r24, 0xDF	; 223
    53c8:	80 83       	st	Z, r24
    53ca:	05 c0       	rjmp	.+10     	; 0x53d6 <__vector_55+0x6c>
    53cc:	e1 e3       	ldi	r30, 0x31	; 49
    53ce:	f1 e0       	ldi	r31, 0x01	; 1
    53d0:	80 81       	ld	r24, Z
    53d2:	8f 7d       	andi	r24, 0xDF	; 223
    53d4:	80 83       	st	Z, r24
    53d6:	ff 91       	pop	r31
    53d8:	ef 91       	pop	r30
    53da:	bf 91       	pop	r27
    53dc:	af 91       	pop	r26
    53de:	9f 91       	pop	r25
    53e0:	8f 91       	pop	r24
    53e2:	2f 91       	pop	r18
    53e4:	0f 90       	pop	r0
    53e6:	0b be       	out	0x3b, r0	; 59
    53e8:	0f 90       	pop	r0
    53ea:	0f be       	out	0x3f, r0	; 63
    53ec:	0f 90       	pop	r0
    53ee:	1f 90       	pop	r1
    53f0:	18 95       	reti

000053f2 <usart_getchar>:
    53f2:	cf 93       	push	r28
    53f4:	df 93       	push	r29
    53f6:	1f 92       	push	r1
    53f8:	cd b7       	in	r28, 0x3d	; 61
    53fa:	de b7       	in	r29, 0x3e	; 62
    53fc:	be 01       	movw	r22, r28
    53fe:	6f 5f       	subi	r22, 0xFF	; 255
    5400:	7f 4f       	sbci	r23, 0xFF	; 255
    5402:	80 91 20 1b 	lds	r24, 0x1B20	; 0x801b20 <_com_serial_instance>
    5406:	90 91 21 1b 	lds	r25, 0x1B21	; 0x801b21 <_com_serial_instance+0x1>
    540a:	7f dd       	rcall	.-1282   	; 0x4f0a <serial_get_byte>
    540c:	81 11       	cpse	r24, r1
    540e:	f6 cf       	rjmp	.-20     	; 0x53fc <usart_getchar+0xa>
    5410:	89 81       	ldd	r24, Y+1	; 0x01
    5412:	90 e0       	ldi	r25, 0x00	; 0
    5414:	0f 90       	pop	r0
    5416:	df 91       	pop	r29
    5418:	cf 91       	pop	r28
    541a:	08 95       	ret

0000541c <usart_putchar>:
    541c:	68 2f       	mov	r22, r24
    541e:	80 91 20 1b 	lds	r24, 0x1B20	; 0x801b20 <_com_serial_instance>
    5422:	90 91 21 1b 	lds	r25, 0x1B21	; 0x801b21 <_com_serial_instance+0x1>
    5426:	fc dc       	rcall	.-1544   	; 0x4e20 <serial_send_byte>
    5428:	80 e0       	ldi	r24, 0x00	; 0
    542a:	90 e0       	ldi	r25, 0x00	; 0
    542c:	08 95       	ret

0000542e <stdioCreate>:
    542e:	8f 92       	push	r8
    5430:	9f 92       	push	r9
    5432:	af 92       	push	r10
    5434:	cf 92       	push	r12
    5436:	ef 92       	push	r14
    5438:	0f 93       	push	r16
    543a:	81 2c       	mov	r8, r1
    543c:	91 2c       	mov	r9, r1
    543e:	68 94       	set
    5440:	aa 24       	eor	r10, r10
    5442:	a7 f8       	bld	r10, 7
    5444:	68 94       	set
    5446:	cc 24       	eor	r12, r12
    5448:	c7 f8       	bld	r12, 7
    544a:	e1 2c       	mov	r14, r1
    544c:	00 e0       	ldi	r16, 0x00	; 0
    544e:	23 e0       	ldi	r18, 0x03	; 3
    5450:	40 e0       	ldi	r20, 0x00	; 0
    5452:	51 ee       	ldi	r21, 0xE1	; 225
    5454:	60 e0       	ldi	r22, 0x00	; 0
    5456:	70 e0       	ldi	r23, 0x00	; 0
    5458:	4d dc       	rcall	.-1894   	; 0x4cf4 <serial_new_instance>
    545a:	90 93 21 1b 	sts	0x1B21, r25	; 0x801b21 <_com_serial_instance+0x1>
    545e:	80 93 20 1b 	sts	0x1B20, r24	; 0x801b20 <_com_serial_instance>
    5462:	eb e6       	ldi	r30, 0x6B	; 107
    5464:	fb e1       	ldi	r31, 0x1B	; 27
    5466:	82 e1       	ldi	r24, 0x12	; 18
    5468:	92 e0       	ldi	r25, 0x02	; 2
    546a:	91 83       	std	Z+1, r25	; 0x01
    546c:	80 83       	st	Z, r24
    546e:	93 83       	std	Z+3, r25	; 0x03
    5470:	82 83       	std	Z+2, r24	; 0x02
    5472:	0f 91       	pop	r16
    5474:	ef 90       	pop	r14
    5476:	cf 90       	pop	r12
    5478:	af 90       	pop	r10
    547a:	9f 90       	pop	r9
    547c:	8f 90       	pop	r8
    547e:	08 95       	ret

00005480 <_initTwiInterface>:
    5480:	80 91 30 1b 	lds	r24, 0x1B30	; 0x801b30 <_twiIsInitiated>
    5484:	81 11       	cpse	r24, r1
    5486:	0c c0       	rjmp	.+24     	; 0x54a0 <_initTwiInterface+0x20>
    5488:	8c e0       	ldi	r24, 0x0C	; 12
    548a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    548e:	8f ef       	ldi	r24, 0xFF	; 255
    5490:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    5494:	84 e0       	ldi	r24, 0x04	; 4
    5496:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    549a:	81 e0       	ldi	r24, 0x01	; 1
    549c:	80 93 30 1b 	sts	0x1B30, r24	; 0x801b30 <_twiIsInitiated>
    54a0:	08 95       	ret

000054a2 <twiCreate>:
    54a2:	af 92       	push	r10
    54a4:	bf 92       	push	r11
    54a6:	cf 92       	push	r12
    54a8:	df 92       	push	r13
    54aa:	ef 92       	push	r14
    54ac:	ff 92       	push	r15
    54ae:	0f 93       	push	r16
    54b0:	1f 93       	push	r17
    54b2:	cf 93       	push	r28
    54b4:	df 93       	push	r29
    54b6:	a8 2e       	mov	r10, r24
    54b8:	b6 2e       	mov	r11, r22
    54ba:	69 01       	movw	r12, r18
    54bc:	7a 01       	movw	r14, r20
    54be:	84 e0       	ldi	r24, 0x04	; 4
    54c0:	90 e0       	ldi	r25, 0x00	; 0
    54c2:	cb d3       	rcall	.+1942   	; 0x5c5a <malloc>
    54c4:	ec 01       	movw	r28, r24
    54c6:	89 2b       	or	r24, r25
    54c8:	61 f1       	breq	.+88     	; 0x5522 <twiCreate+0x80>
    54ca:	a8 82       	st	Y, r10
    54cc:	81 e0       	ldi	r24, 0x01	; 1
    54ce:	b8 12       	cpse	r11, r24
    54d0:	12 c0       	rjmp	.+36     	; 0x54f6 <twiCreate+0x54>
    54d2:	c7 01       	movw	r24, r14
    54d4:	b6 01       	movw	r22, r12
    54d6:	20 ea       	ldi	r18, 0xA0	; 160
    54d8:	36 e8       	ldi	r19, 0x86	; 134
    54da:	41 e0       	ldi	r20, 0x01	; 1
    54dc:	50 e0       	ldi	r21, 0x00	; 0
    54de:	79 d3       	rcall	.+1778   	; 0x5bd2 <__udivmodsi4>
    54e0:	da 01       	movw	r26, r20
    54e2:	c9 01       	movw	r24, r18
    54e4:	40 97       	sbiw	r24, 0x10	; 16
    54e6:	a1 09       	sbc	r26, r1
    54e8:	b1 09       	sbc	r27, r1
    54ea:	b6 95       	lsr	r27
    54ec:	a7 95       	ror	r26
    54ee:	97 95       	ror	r25
    54f0:	87 95       	ror	r24
    54f2:	89 83       	std	Y+1, r24	; 0x01
    54f4:	11 c0       	rjmp	.+34     	; 0x5518 <twiCreate+0x76>
    54f6:	c7 01       	movw	r24, r14
    54f8:	b6 01       	movw	r22, r12
    54fa:	20 e8       	ldi	r18, 0x80	; 128
    54fc:	3a e1       	ldi	r19, 0x1A	; 26
    54fe:	46 e0       	ldi	r20, 0x06	; 6
    5500:	50 e0       	ldi	r21, 0x00	; 0
    5502:	67 d3       	rcall	.+1742   	; 0x5bd2 <__udivmodsi4>
    5504:	da 01       	movw	r26, r20
    5506:	c9 01       	movw	r24, r18
    5508:	40 97       	sbiw	r24, 0x10	; 16
    550a:	a1 09       	sbc	r26, r1
    550c:	b1 09       	sbc	r27, r1
    550e:	b6 95       	lsr	r27
    5510:	a7 95       	ror	r26
    5512:	97 95       	ror	r25
    5514:	87 95       	ror	r24
    5516:	89 83       	std	Y+1, r24	; 0x01
    5518:	1b 83       	std	Y+3, r17	; 0x03
    551a:	0a 83       	std	Y+2, r16	; 0x02
    551c:	8c 2f       	mov	r24, r28
    551e:	9d 2f       	mov	r25, r29
    5520:	02 c0       	rjmp	.+4      	; 0x5526 <twiCreate+0x84>
    5522:	80 e0       	ldi	r24, 0x00	; 0
    5524:	90 e0       	ldi	r25, 0x00	; 0
    5526:	df 91       	pop	r29
    5528:	cf 91       	pop	r28
    552a:	1f 91       	pop	r17
    552c:	0f 91       	pop	r16
    552e:	ff 90       	pop	r15
    5530:	ef 90       	pop	r14
    5532:	df 90       	pop	r13
    5534:	cf 90       	pop	r12
    5536:	bf 90       	pop	r11
    5538:	af 90       	pop	r10
    553a:	08 95       	ret

0000553c <twiIsBusy>:
    553c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    5540:	81 70       	andi	r24, 0x01	; 1
    5542:	08 95       	ret

00005544 <twiTransmit>:
    5544:	ff 92       	push	r15
    5546:	0f 93       	push	r16
    5548:	1f 93       	push	r17
    554a:	cf 93       	push	r28
    554c:	df 93       	push	r29
    554e:	00 97       	sbiw	r24, 0x00	; 0
    5550:	d1 f1       	breq	.+116    	; 0x55c6 <twiTransmit+0x82>
    5552:	4a 30       	cpi	r20, 0x0A	; 10
    5554:	d0 f5       	brcc	.+116    	; 0x55ca <twiTransmit+0x86>
    5556:	f4 2e       	mov	r15, r20
    5558:	8b 01       	movw	r16, r22
    555a:	ec 01       	movw	r28, r24
    555c:	ef df       	rcall	.-34     	; 0x553c <twiIsBusy>
    555e:	81 11       	cpse	r24, r1
    5560:	36 c0       	rjmp	.+108    	; 0x55ce <twiTransmit+0x8a>
    5562:	80 91 23 1b 	lds	r24, 0x1B23	; 0x801b23 <_twiCurrentHandler>
    5566:	90 91 24 1b 	lds	r25, 0x1B24	; 0x801b24 <_twiCurrentHandler+0x1>
    556a:	c8 17       	cp	r28, r24
    556c:	d9 07       	cpc	r29, r25
    556e:	41 f0       	breq	.+16     	; 0x5580 <twiTransmit+0x3c>
    5570:	87 df       	rcall	.-242    	; 0x5480 <_initTwiInterface>
    5572:	89 81       	ldd	r24, Y+1	; 0x01
    5574:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    5578:	d0 93 24 1b 	sts	0x1B24, r29	; 0x801b24 <_twiCurrentHandler+0x1>
    557c:	c0 93 23 1b 	sts	0x1B23, r28	; 0x801b23 <_twiCurrentHandler>
    5580:	81 e0       	ldi	r24, 0x01	; 1
    5582:	8f 0d       	add	r24, r15
    5584:	80 93 25 1b 	sts	0x1B25, r24	; 0x801b25 <_twiMessageLen>
    5588:	88 81       	ld	r24, Y
    558a:	88 0f       	add	r24, r24
    558c:	80 93 26 1b 	sts	0x1B26, r24	; 0x801b26 <_twiMessageBuffer>
    5590:	ff 20       	and	r15, r15
    5592:	89 f0       	breq	.+34     	; 0x55b6 <twiTransmit+0x72>
    5594:	f8 01       	movw	r30, r16
    5596:	a7 e2       	ldi	r26, 0x27	; 39
    5598:	bb e1       	ldi	r27, 0x1B	; 27
    559a:	4f ef       	ldi	r20, 0xFF	; 255
    559c:	4f 0d       	add	r20, r15
    559e:	64 2f       	mov	r22, r20
    55a0:	70 e0       	ldi	r23, 0x00	; 0
    55a2:	cb 01       	movw	r24, r22
    55a4:	01 96       	adiw	r24, 0x01	; 1
    55a6:	b8 01       	movw	r22, r16
    55a8:	68 0f       	add	r22, r24
    55aa:	79 1f       	adc	r23, r25
    55ac:	81 91       	ld	r24, Z+
    55ae:	8d 93       	st	X+, r24
    55b0:	e6 17       	cp	r30, r22
    55b2:	f7 07       	cpc	r31, r23
    55b4:	d9 f7       	brne	.-10     	; 0x55ac <twiTransmit+0x68>
    55b6:	88 ef       	ldi	r24, 0xF8	; 248
    55b8:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <_twiCurrentState>
    55bc:	85 ea       	ldi	r24, 0xA5	; 165
    55be:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    55c2:	84 e0       	ldi	r24, 0x04	; 4
    55c4:	05 c0       	rjmp	.+10     	; 0x55d0 <twiTransmit+0x8c>
    55c6:	86 e0       	ldi	r24, 0x06	; 6
    55c8:	03 c0       	rjmp	.+6      	; 0x55d0 <twiTransmit+0x8c>
    55ca:	87 e0       	ldi	r24, 0x07	; 7
    55cc:	01 c0       	rjmp	.+2      	; 0x55d0 <twiTransmit+0x8c>
    55ce:	82 e0       	ldi	r24, 0x02	; 2
    55d0:	df 91       	pop	r29
    55d2:	cf 91       	pop	r28
    55d4:	1f 91       	pop	r17
    55d6:	0f 91       	pop	r16
    55d8:	ff 90       	pop	r15
    55da:	08 95       	ret

000055dc <twiReceive>:
    55dc:	1f 93       	push	r17
    55de:	cf 93       	push	r28
    55e0:	df 93       	push	r29
    55e2:	00 97       	sbiw	r24, 0x00	; 0
    55e4:	29 f1       	breq	.+74     	; 0x5630 <twiReceive+0x54>
    55e6:	6b 30       	cpi	r22, 0x0B	; 11
    55e8:	28 f5       	brcc	.+74     	; 0x5634 <twiReceive+0x58>
    55ea:	16 2f       	mov	r17, r22
    55ec:	ec 01       	movw	r28, r24
    55ee:	a6 df       	rcall	.-180    	; 0x553c <twiIsBusy>
    55f0:	81 11       	cpse	r24, r1
    55f2:	22 c0       	rjmp	.+68     	; 0x5638 <twiReceive+0x5c>
    55f4:	80 91 23 1b 	lds	r24, 0x1B23	; 0x801b23 <_twiCurrentHandler>
    55f8:	90 91 24 1b 	lds	r25, 0x1B24	; 0x801b24 <_twiCurrentHandler+0x1>
    55fc:	c8 17       	cp	r28, r24
    55fe:	d9 07       	cpc	r29, r25
    5600:	41 f0       	breq	.+16     	; 0x5612 <twiReceive+0x36>
    5602:	3e df       	rcall	.-388    	; 0x5480 <_initTwiInterface>
    5604:	89 81       	ldd	r24, Y+1	; 0x01
    5606:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    560a:	d0 93 24 1b 	sts	0x1B24, r29	; 0x801b24 <_twiCurrentHandler+0x1>
    560e:	c0 93 23 1b 	sts	0x1B23, r28	; 0x801b23 <_twiCurrentHandler>
    5612:	10 93 25 1b 	sts	0x1B25, r17	; 0x801b25 <_twiMessageLen>
    5616:	88 81       	ld	r24, Y
    5618:	88 0f       	add	r24, r24
    561a:	81 60       	ori	r24, 0x01	; 1
    561c:	80 93 26 1b 	sts	0x1B26, r24	; 0x801b26 <_twiMessageBuffer>
    5620:	88 ef       	ldi	r24, 0xF8	; 248
    5622:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <_twiCurrentState>
    5626:	85 ea       	ldi	r24, 0xA5	; 165
    5628:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    562c:	85 e0       	ldi	r24, 0x05	; 5
    562e:	05 c0       	rjmp	.+10     	; 0x563a <twiReceive+0x5e>
    5630:	86 e0       	ldi	r24, 0x06	; 6
    5632:	03 c0       	rjmp	.+6      	; 0x563a <twiReceive+0x5e>
    5634:	87 e0       	ldi	r24, 0x07	; 7
    5636:	01 c0       	rjmp	.+2      	; 0x563a <twiReceive+0x5e>
    5638:	82 e0       	ldi	r24, 0x02	; 2
    563a:	df 91       	pop	r29
    563c:	cf 91       	pop	r28
    563e:	1f 91       	pop	r17
    5640:	08 95       	ret

00005642 <__vector_39>:
    5642:	1f 92       	push	r1
    5644:	0f 92       	push	r0
    5646:	0f b6       	in	r0, 0x3f	; 63
    5648:	0f 92       	push	r0
    564a:	11 24       	eor	r1, r1
    564c:	0b b6       	in	r0, 0x3b	; 59
    564e:	0f 92       	push	r0
    5650:	2f 93       	push	r18
    5652:	3f 93       	push	r19
    5654:	4f 93       	push	r20
    5656:	5f 93       	push	r21
    5658:	6f 93       	push	r22
    565a:	7f 93       	push	r23
    565c:	8f 93       	push	r24
    565e:	9f 93       	push	r25
    5660:	af 93       	push	r26
    5662:	bf 93       	push	r27
    5664:	ef 93       	push	r30
    5666:	ff 93       	push	r31
    5668:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    566c:	8e 2f       	mov	r24, r30
    566e:	90 e0       	ldi	r25, 0x00	; 0
    5670:	fc 01       	movw	r30, r24
    5672:	38 97       	sbiw	r30, 0x08	; 8
    5674:	e1 35       	cpi	r30, 0x51	; 81
    5676:	f1 05       	cpc	r31, r1
    5678:	08 f0       	brcs	.+2      	; 0x567c <__vector_39+0x3a>
    567a:	75 c0       	rjmp	.+234    	; 0x5766 <__vector_39+0x124>
    567c:	88 27       	eor	r24, r24
    567e:	e4 58       	subi	r30, 0x84	; 132
    5680:	ff 4f       	sbci	r31, 0xFF	; 255
    5682:	8f 4f       	sbci	r24, 0xFF	; 255
    5684:	c8 c2       	rjmp	.+1424   	; 0x5c16 <__tablejump2__>
    5686:	10 92 22 1b 	sts	0x1B22, r1	; 0x801b22 <_index.1885>
    568a:	e0 91 22 1b 	lds	r30, 0x1B22	; 0x801b22 <_index.1885>
    568e:	80 91 25 1b 	lds	r24, 0x1B25	; 0x801b25 <_twiMessageLen>
    5692:	e8 17       	cp	r30, r24
    5694:	70 f4       	brcc	.+28     	; 0x56b2 <__vector_39+0x70>
    5696:	81 e0       	ldi	r24, 0x01	; 1
    5698:	8e 0f       	add	r24, r30
    569a:	80 93 22 1b 	sts	0x1B22, r24	; 0x801b22 <_index.1885>
    569e:	f0 e0       	ldi	r31, 0x00	; 0
    56a0:	ea 5d       	subi	r30, 0xDA	; 218
    56a2:	f4 4e       	sbci	r31, 0xE4	; 228
    56a4:	80 81       	ld	r24, Z
    56a6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    56aa:	85 e8       	ldi	r24, 0x85	; 133
    56ac:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    56b0:	72 c0       	rjmp	.+228    	; 0x5796 <__vector_39+0x154>
    56b2:	84 e9       	ldi	r24, 0x94	; 148
    56b4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    56b8:	80 91 23 1b 	lds	r24, 0x1B23	; 0x801b23 <_twiCurrentHandler>
    56bc:	90 91 24 1b 	lds	r25, 0x1B24	; 0x801b24 <_twiCurrentHandler+0x1>
    56c0:	dc 01       	movw	r26, r24
    56c2:	12 96       	adiw	r26, 0x02	; 2
    56c4:	ed 91       	ld	r30, X+
    56c6:	fc 91       	ld	r31, X
    56c8:	13 97       	sbiw	r26, 0x03	; 3
    56ca:	30 97       	sbiw	r30, 0x00	; 0
    56cc:	09 f4       	brne	.+2      	; 0x56d0 <__vector_39+0x8e>
    56ce:	63 c0       	rjmp	.+198    	; 0x5796 <__vector_39+0x154>
    56d0:	20 e0       	ldi	r18, 0x00	; 0
    56d2:	40 e0       	ldi	r20, 0x00	; 0
    56d4:	50 e0       	ldi	r21, 0x00	; 0
    56d6:	64 e0       	ldi	r22, 0x04	; 4
    56d8:	19 95       	eicall
    56da:	5d c0       	rjmp	.+186    	; 0x5796 <__vector_39+0x154>
    56dc:	e0 91 22 1b 	lds	r30, 0x1B22	; 0x801b22 <_index.1885>
    56e0:	81 e0       	ldi	r24, 0x01	; 1
    56e2:	8e 0f       	add	r24, r30
    56e4:	80 93 22 1b 	sts	0x1B22, r24	; 0x801b22 <_index.1885>
    56e8:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    56ec:	f0 e0       	ldi	r31, 0x00	; 0
    56ee:	ea 5d       	subi	r30, 0xDA	; 218
    56f0:	f4 4e       	sbci	r31, 0xE4	; 228
    56f2:	80 83       	st	Z, r24
    56f4:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    56f8:	80 34       	cpi	r24, 0x40	; 64
    56fa:	11 f4       	brne	.+4      	; 0x5700 <__vector_39+0xbe>
    56fc:	10 92 22 1b 	sts	0x1B22, r1	; 0x801b22 <_index.1885>
    5700:	20 91 22 1b 	lds	r18, 0x1B22	; 0x801b22 <_index.1885>
    5704:	30 e0       	ldi	r19, 0x00	; 0
    5706:	80 91 25 1b 	lds	r24, 0x1B25	; 0x801b25 <_twiMessageLen>
    570a:	90 e0       	ldi	r25, 0x00	; 0
    570c:	01 97       	sbiw	r24, 0x01	; 1
    570e:	28 17       	cp	r18, r24
    5710:	39 07       	cpc	r19, r25
    5712:	24 f4       	brge	.+8      	; 0x571c <__vector_39+0xda>
    5714:	85 ec       	ldi	r24, 0xC5	; 197
    5716:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    571a:	3d c0       	rjmp	.+122    	; 0x5796 <__vector_39+0x154>
    571c:	85 e8       	ldi	r24, 0x85	; 133
    571e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    5722:	39 c0       	rjmp	.+114    	; 0x5796 <__vector_39+0x154>
    5724:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    5728:	e0 91 22 1b 	lds	r30, 0x1B22	; 0x801b22 <_index.1885>
    572c:	f0 e0       	ldi	r31, 0x00	; 0
    572e:	ea 5d       	subi	r30, 0xDA	; 218
    5730:	f4 4e       	sbci	r31, 0xE4	; 228
    5732:	80 83       	st	Z, r24
    5734:	84 e9       	ldi	r24, 0x94	; 148
    5736:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    573a:	80 91 23 1b 	lds	r24, 0x1B23	; 0x801b23 <_twiCurrentHandler>
    573e:	90 91 24 1b 	lds	r25, 0x1B24	; 0x801b24 <_twiCurrentHandler+0x1>
    5742:	dc 01       	movw	r26, r24
    5744:	12 96       	adiw	r26, 0x02	; 2
    5746:	ed 91       	ld	r30, X+
    5748:	fc 91       	ld	r31, X
    574a:	13 97       	sbiw	r26, 0x03	; 3
    574c:	30 97       	sbiw	r30, 0x00	; 0
    574e:	19 f1       	breq	.+70     	; 0x5796 <__vector_39+0x154>
    5750:	20 91 25 1b 	lds	r18, 0x1B25	; 0x801b25 <_twiMessageLen>
    5754:	46 e2       	ldi	r20, 0x26	; 38
    5756:	5b e1       	ldi	r21, 0x1B	; 27
    5758:	65 e0       	ldi	r22, 0x05	; 5
    575a:	19 95       	eicall
    575c:	1c c0       	rjmp	.+56     	; 0x5796 <__vector_39+0x154>
    575e:	85 ea       	ldi	r24, 0xA5	; 165
    5760:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    5764:	18 c0       	rjmp	.+48     	; 0x5796 <__vector_39+0x154>
    5766:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    576a:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <_twiCurrentState>
    576e:	84 e0       	ldi	r24, 0x04	; 4
    5770:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    5774:	80 91 23 1b 	lds	r24, 0x1B23	; 0x801b23 <_twiCurrentHandler>
    5778:	90 91 24 1b 	lds	r25, 0x1B24	; 0x801b24 <_twiCurrentHandler+0x1>
    577c:	dc 01       	movw	r26, r24
    577e:	12 96       	adiw	r26, 0x02	; 2
    5780:	ed 91       	ld	r30, X+
    5782:	fc 91       	ld	r31, X
    5784:	13 97       	sbiw	r26, 0x03	; 3
    5786:	30 97       	sbiw	r30, 0x00	; 0
    5788:	31 f0       	breq	.+12     	; 0x5796 <__vector_39+0x154>
    578a:	20 e0       	ldi	r18, 0x00	; 0
    578c:	40 e0       	ldi	r20, 0x00	; 0
    578e:	50 e0       	ldi	r21, 0x00	; 0
    5790:	60 91 20 02 	lds	r22, 0x0220	; 0x800220 <_twiCurrentState>
    5794:	19 95       	eicall
    5796:	ff 91       	pop	r31
    5798:	ef 91       	pop	r30
    579a:	bf 91       	pop	r27
    579c:	af 91       	pop	r26
    579e:	9f 91       	pop	r25
    57a0:	8f 91       	pop	r24
    57a2:	7f 91       	pop	r23
    57a4:	6f 91       	pop	r22
    57a6:	5f 91       	pop	r21
    57a8:	4f 91       	pop	r20
    57aa:	3f 91       	pop	r19
    57ac:	2f 91       	pop	r18
    57ae:	0f 90       	pop	r0
    57b0:	0b be       	out	0x3b, r0	; 59
    57b2:	0f 90       	pop	r0
    57b4:	0f be       	out	0x3f, r0	; 63
    57b6:	0f 90       	pop	r0
    57b8:	1f 90       	pop	r1
    57ba:	18 95       	reti

000057bc <fifo_init>:
    57bc:	fc 01       	movw	r30, r24
    57be:	41 11       	cpse	r20, r1
    57c0:	01 c0       	rjmp	.+2      	; 0x57c4 <fifo_init+0x8>
    57c2:	6c d3       	rcall	.+1752   	; 0x5e9c <abort>
    57c4:	84 2f       	mov	r24, r20
    57c6:	90 e0       	ldi	r25, 0x00	; 0
    57c8:	9c 01       	movw	r18, r24
    57ca:	21 50       	subi	r18, 0x01	; 1
    57cc:	31 09       	sbc	r19, r1
    57ce:	82 23       	and	r24, r18
    57d0:	93 23       	and	r25, r19
    57d2:	89 2b       	or	r24, r25
    57d4:	09 f0       	breq	.+2      	; 0x57d8 <fifo_init+0x1c>
    57d6:	62 d3       	rcall	.+1732   	; 0x5e9c <abort>
    57d8:	41 38       	cpi	r20, 0x81	; 129
    57da:	08 f0       	brcs	.+2      	; 0x57de <fifo_init+0x22>
    57dc:	5f d3       	rcall	.+1726   	; 0x5e9c <abort>
    57de:	12 82       	std	Z+2, r1	; 0x02
    57e0:	13 82       	std	Z+3, r1	; 0x03
    57e2:	44 83       	std	Z+4, r20	; 0x04
    57e4:	44 0f       	add	r20, r20
    57e6:	41 50       	subi	r20, 0x01	; 1
    57e8:	45 83       	std	Z+5, r20	; 0x05
    57ea:	71 83       	std	Z+1, r23	; 0x01
    57ec:	60 83       	st	Z, r22
    57ee:	80 e0       	ldi	r24, 0x00	; 0
    57f0:	90 e0       	ldi	r25, 0x00	; 0
    57f2:	08 95       	ret

000057f4 <__subsf3>:
    57f4:	50 58       	subi	r21, 0x80	; 128

000057f6 <__addsf3>:
    57f6:	bb 27       	eor	r27, r27
    57f8:	aa 27       	eor	r26, r26
    57fa:	0e d0       	rcall	.+28     	; 0x5818 <__addsf3x>
    57fc:	4d c1       	rjmp	.+666    	; 0x5a98 <__fp_round>
    57fe:	3e d1       	rcall	.+636    	; 0x5a7c <__fp_pscA>
    5800:	30 f0       	brcs	.+12     	; 0x580e <__addsf3+0x18>
    5802:	43 d1       	rcall	.+646    	; 0x5a8a <__fp_pscB>
    5804:	20 f0       	brcs	.+8      	; 0x580e <__addsf3+0x18>
    5806:	31 f4       	brne	.+12     	; 0x5814 <__addsf3+0x1e>
    5808:	9f 3f       	cpi	r25, 0xFF	; 255
    580a:	11 f4       	brne	.+4      	; 0x5810 <__addsf3+0x1a>
    580c:	1e f4       	brtc	.+6      	; 0x5814 <__addsf3+0x1e>
    580e:	33 c1       	rjmp	.+614    	; 0x5a76 <__fp_nan>
    5810:	0e f4       	brtc	.+2      	; 0x5814 <__addsf3+0x1e>
    5812:	e0 95       	com	r30
    5814:	e7 fb       	bst	r30, 7
    5816:	29 c1       	rjmp	.+594    	; 0x5a6a <__fp_inf>

00005818 <__addsf3x>:
    5818:	e9 2f       	mov	r30, r25
    581a:	4f d1       	rcall	.+670    	; 0x5aba <__fp_split3>
    581c:	80 f3       	brcs	.-32     	; 0x57fe <__addsf3+0x8>
    581e:	ba 17       	cp	r27, r26
    5820:	62 07       	cpc	r22, r18
    5822:	73 07       	cpc	r23, r19
    5824:	84 07       	cpc	r24, r20
    5826:	95 07       	cpc	r25, r21
    5828:	18 f0       	brcs	.+6      	; 0x5830 <__addsf3x+0x18>
    582a:	71 f4       	brne	.+28     	; 0x5848 <__addsf3x+0x30>
    582c:	9e f5       	brtc	.+102    	; 0x5894 <__addsf3x+0x7c>
    582e:	67 c1       	rjmp	.+718    	; 0x5afe <__fp_zero>
    5830:	0e f4       	brtc	.+2      	; 0x5834 <__addsf3x+0x1c>
    5832:	e0 95       	com	r30
    5834:	0b 2e       	mov	r0, r27
    5836:	ba 2f       	mov	r27, r26
    5838:	a0 2d       	mov	r26, r0
    583a:	0b 01       	movw	r0, r22
    583c:	b9 01       	movw	r22, r18
    583e:	90 01       	movw	r18, r0
    5840:	0c 01       	movw	r0, r24
    5842:	ca 01       	movw	r24, r20
    5844:	a0 01       	movw	r20, r0
    5846:	11 24       	eor	r1, r1
    5848:	ff 27       	eor	r31, r31
    584a:	59 1b       	sub	r21, r25
    584c:	99 f0       	breq	.+38     	; 0x5874 <__addsf3x+0x5c>
    584e:	59 3f       	cpi	r21, 0xF9	; 249
    5850:	50 f4       	brcc	.+20     	; 0x5866 <__addsf3x+0x4e>
    5852:	50 3e       	cpi	r21, 0xE0	; 224
    5854:	68 f1       	brcs	.+90     	; 0x58b0 <__addsf3x+0x98>
    5856:	1a 16       	cp	r1, r26
    5858:	f0 40       	sbci	r31, 0x00	; 0
    585a:	a2 2f       	mov	r26, r18
    585c:	23 2f       	mov	r18, r19
    585e:	34 2f       	mov	r19, r20
    5860:	44 27       	eor	r20, r20
    5862:	58 5f       	subi	r21, 0xF8	; 248
    5864:	f3 cf       	rjmp	.-26     	; 0x584c <__addsf3x+0x34>
    5866:	46 95       	lsr	r20
    5868:	37 95       	ror	r19
    586a:	27 95       	ror	r18
    586c:	a7 95       	ror	r26
    586e:	f0 40       	sbci	r31, 0x00	; 0
    5870:	53 95       	inc	r21
    5872:	c9 f7       	brne	.-14     	; 0x5866 <__addsf3x+0x4e>
    5874:	7e f4       	brtc	.+30     	; 0x5894 <__addsf3x+0x7c>
    5876:	1f 16       	cp	r1, r31
    5878:	ba 0b       	sbc	r27, r26
    587a:	62 0b       	sbc	r22, r18
    587c:	73 0b       	sbc	r23, r19
    587e:	84 0b       	sbc	r24, r20
    5880:	ba f0       	brmi	.+46     	; 0x58b0 <__addsf3x+0x98>
    5882:	91 50       	subi	r25, 0x01	; 1
    5884:	a1 f0       	breq	.+40     	; 0x58ae <__addsf3x+0x96>
    5886:	ff 0f       	add	r31, r31
    5888:	bb 1f       	adc	r27, r27
    588a:	66 1f       	adc	r22, r22
    588c:	77 1f       	adc	r23, r23
    588e:	88 1f       	adc	r24, r24
    5890:	c2 f7       	brpl	.-16     	; 0x5882 <__addsf3x+0x6a>
    5892:	0e c0       	rjmp	.+28     	; 0x58b0 <__addsf3x+0x98>
    5894:	ba 0f       	add	r27, r26
    5896:	62 1f       	adc	r22, r18
    5898:	73 1f       	adc	r23, r19
    589a:	84 1f       	adc	r24, r20
    589c:	48 f4       	brcc	.+18     	; 0x58b0 <__addsf3x+0x98>
    589e:	87 95       	ror	r24
    58a0:	77 95       	ror	r23
    58a2:	67 95       	ror	r22
    58a4:	b7 95       	ror	r27
    58a6:	f7 95       	ror	r31
    58a8:	9e 3f       	cpi	r25, 0xFE	; 254
    58aa:	08 f0       	brcs	.+2      	; 0x58ae <__addsf3x+0x96>
    58ac:	b3 cf       	rjmp	.-154    	; 0x5814 <__addsf3+0x1e>
    58ae:	93 95       	inc	r25
    58b0:	88 0f       	add	r24, r24
    58b2:	08 f0       	brcs	.+2      	; 0x58b6 <__addsf3x+0x9e>
    58b4:	99 27       	eor	r25, r25
    58b6:	ee 0f       	add	r30, r30
    58b8:	97 95       	ror	r25
    58ba:	87 95       	ror	r24
    58bc:	08 95       	ret

000058be <__divsf3>:
    58be:	0c d0       	rcall	.+24     	; 0x58d8 <__divsf3x>
    58c0:	eb c0       	rjmp	.+470    	; 0x5a98 <__fp_round>
    58c2:	e3 d0       	rcall	.+454    	; 0x5a8a <__fp_pscB>
    58c4:	40 f0       	brcs	.+16     	; 0x58d6 <__divsf3+0x18>
    58c6:	da d0       	rcall	.+436    	; 0x5a7c <__fp_pscA>
    58c8:	30 f0       	brcs	.+12     	; 0x58d6 <__divsf3+0x18>
    58ca:	21 f4       	brne	.+8      	; 0x58d4 <__divsf3+0x16>
    58cc:	5f 3f       	cpi	r21, 0xFF	; 255
    58ce:	19 f0       	breq	.+6      	; 0x58d6 <__divsf3+0x18>
    58d0:	cc c0       	rjmp	.+408    	; 0x5a6a <__fp_inf>
    58d2:	51 11       	cpse	r21, r1
    58d4:	15 c1       	rjmp	.+554    	; 0x5b00 <__fp_szero>
    58d6:	cf c0       	rjmp	.+414    	; 0x5a76 <__fp_nan>

000058d8 <__divsf3x>:
    58d8:	f0 d0       	rcall	.+480    	; 0x5aba <__fp_split3>
    58da:	98 f3       	brcs	.-26     	; 0x58c2 <__divsf3+0x4>

000058dc <__divsf3_pse>:
    58dc:	99 23       	and	r25, r25
    58de:	c9 f3       	breq	.-14     	; 0x58d2 <__divsf3+0x14>
    58e0:	55 23       	and	r21, r21
    58e2:	b1 f3       	breq	.-20     	; 0x58d0 <__divsf3+0x12>
    58e4:	95 1b       	sub	r25, r21
    58e6:	55 0b       	sbc	r21, r21
    58e8:	bb 27       	eor	r27, r27
    58ea:	aa 27       	eor	r26, r26
    58ec:	62 17       	cp	r22, r18
    58ee:	73 07       	cpc	r23, r19
    58f0:	84 07       	cpc	r24, r20
    58f2:	38 f0       	brcs	.+14     	; 0x5902 <__divsf3_pse+0x26>
    58f4:	9f 5f       	subi	r25, 0xFF	; 255
    58f6:	5f 4f       	sbci	r21, 0xFF	; 255
    58f8:	22 0f       	add	r18, r18
    58fa:	33 1f       	adc	r19, r19
    58fc:	44 1f       	adc	r20, r20
    58fe:	aa 1f       	adc	r26, r26
    5900:	a9 f3       	breq	.-22     	; 0x58ec <__divsf3_pse+0x10>
    5902:	33 d0       	rcall	.+102    	; 0x596a <__divsf3_pse+0x8e>
    5904:	0e 2e       	mov	r0, r30
    5906:	3a f0       	brmi	.+14     	; 0x5916 <__divsf3_pse+0x3a>
    5908:	e0 e8       	ldi	r30, 0x80	; 128
    590a:	30 d0       	rcall	.+96     	; 0x596c <__divsf3_pse+0x90>
    590c:	91 50       	subi	r25, 0x01	; 1
    590e:	50 40       	sbci	r21, 0x00	; 0
    5910:	e6 95       	lsr	r30
    5912:	00 1c       	adc	r0, r0
    5914:	ca f7       	brpl	.-14     	; 0x5908 <__divsf3_pse+0x2c>
    5916:	29 d0       	rcall	.+82     	; 0x596a <__divsf3_pse+0x8e>
    5918:	fe 2f       	mov	r31, r30
    591a:	27 d0       	rcall	.+78     	; 0x596a <__divsf3_pse+0x8e>
    591c:	66 0f       	add	r22, r22
    591e:	77 1f       	adc	r23, r23
    5920:	88 1f       	adc	r24, r24
    5922:	bb 1f       	adc	r27, r27
    5924:	26 17       	cp	r18, r22
    5926:	37 07       	cpc	r19, r23
    5928:	48 07       	cpc	r20, r24
    592a:	ab 07       	cpc	r26, r27
    592c:	b0 e8       	ldi	r27, 0x80	; 128
    592e:	09 f0       	breq	.+2      	; 0x5932 <__divsf3_pse+0x56>
    5930:	bb 0b       	sbc	r27, r27
    5932:	80 2d       	mov	r24, r0
    5934:	bf 01       	movw	r22, r30
    5936:	ff 27       	eor	r31, r31
    5938:	93 58       	subi	r25, 0x83	; 131
    593a:	5f 4f       	sbci	r21, 0xFF	; 255
    593c:	2a f0       	brmi	.+10     	; 0x5948 <__divsf3_pse+0x6c>
    593e:	9e 3f       	cpi	r25, 0xFE	; 254
    5940:	51 05       	cpc	r21, r1
    5942:	68 f0       	brcs	.+26     	; 0x595e <__divsf3_pse+0x82>
    5944:	92 c0       	rjmp	.+292    	; 0x5a6a <__fp_inf>
    5946:	dc c0       	rjmp	.+440    	; 0x5b00 <__fp_szero>
    5948:	5f 3f       	cpi	r21, 0xFF	; 255
    594a:	ec f3       	brlt	.-6      	; 0x5946 <__divsf3_pse+0x6a>
    594c:	98 3e       	cpi	r25, 0xE8	; 232
    594e:	dc f3       	brlt	.-10     	; 0x5946 <__divsf3_pse+0x6a>
    5950:	86 95       	lsr	r24
    5952:	77 95       	ror	r23
    5954:	67 95       	ror	r22
    5956:	b7 95       	ror	r27
    5958:	f7 95       	ror	r31
    595a:	9f 5f       	subi	r25, 0xFF	; 255
    595c:	c9 f7       	brne	.-14     	; 0x5950 <__divsf3_pse+0x74>
    595e:	88 0f       	add	r24, r24
    5960:	91 1d       	adc	r25, r1
    5962:	96 95       	lsr	r25
    5964:	87 95       	ror	r24
    5966:	97 f9       	bld	r25, 7
    5968:	08 95       	ret
    596a:	e1 e0       	ldi	r30, 0x01	; 1
    596c:	66 0f       	add	r22, r22
    596e:	77 1f       	adc	r23, r23
    5970:	88 1f       	adc	r24, r24
    5972:	bb 1f       	adc	r27, r27
    5974:	62 17       	cp	r22, r18
    5976:	73 07       	cpc	r23, r19
    5978:	84 07       	cpc	r24, r20
    597a:	ba 07       	cpc	r27, r26
    597c:	20 f0       	brcs	.+8      	; 0x5986 <__divsf3_pse+0xaa>
    597e:	62 1b       	sub	r22, r18
    5980:	73 0b       	sbc	r23, r19
    5982:	84 0b       	sbc	r24, r20
    5984:	ba 0b       	sbc	r27, r26
    5986:	ee 1f       	adc	r30, r30
    5988:	88 f7       	brcc	.-30     	; 0x596c <__divsf3_pse+0x90>
    598a:	e0 95       	com	r30
    598c:	08 95       	ret

0000598e <__fixsfsi>:
    598e:	04 d0       	rcall	.+8      	; 0x5998 <__fixunssfsi>
    5990:	68 94       	set
    5992:	b1 11       	cpse	r27, r1
    5994:	b5 c0       	rjmp	.+362    	; 0x5b00 <__fp_szero>
    5996:	08 95       	ret

00005998 <__fixunssfsi>:
    5998:	98 d0       	rcall	.+304    	; 0x5aca <__fp_splitA>
    599a:	88 f0       	brcs	.+34     	; 0x59be <__fixunssfsi+0x26>
    599c:	9f 57       	subi	r25, 0x7F	; 127
    599e:	90 f0       	brcs	.+36     	; 0x59c4 <__fixunssfsi+0x2c>
    59a0:	b9 2f       	mov	r27, r25
    59a2:	99 27       	eor	r25, r25
    59a4:	b7 51       	subi	r27, 0x17	; 23
    59a6:	a0 f0       	brcs	.+40     	; 0x59d0 <__fixunssfsi+0x38>
    59a8:	d1 f0       	breq	.+52     	; 0x59de <__fixunssfsi+0x46>
    59aa:	66 0f       	add	r22, r22
    59ac:	77 1f       	adc	r23, r23
    59ae:	88 1f       	adc	r24, r24
    59b0:	99 1f       	adc	r25, r25
    59b2:	1a f0       	brmi	.+6      	; 0x59ba <__fixunssfsi+0x22>
    59b4:	ba 95       	dec	r27
    59b6:	c9 f7       	brne	.-14     	; 0x59aa <__fixunssfsi+0x12>
    59b8:	12 c0       	rjmp	.+36     	; 0x59de <__fixunssfsi+0x46>
    59ba:	b1 30       	cpi	r27, 0x01	; 1
    59bc:	81 f0       	breq	.+32     	; 0x59de <__fixunssfsi+0x46>
    59be:	9f d0       	rcall	.+318    	; 0x5afe <__fp_zero>
    59c0:	b1 e0       	ldi	r27, 0x01	; 1
    59c2:	08 95       	ret
    59c4:	9c c0       	rjmp	.+312    	; 0x5afe <__fp_zero>
    59c6:	67 2f       	mov	r22, r23
    59c8:	78 2f       	mov	r23, r24
    59ca:	88 27       	eor	r24, r24
    59cc:	b8 5f       	subi	r27, 0xF8	; 248
    59ce:	39 f0       	breq	.+14     	; 0x59de <__fixunssfsi+0x46>
    59d0:	b9 3f       	cpi	r27, 0xF9	; 249
    59d2:	cc f3       	brlt	.-14     	; 0x59c6 <__fixunssfsi+0x2e>
    59d4:	86 95       	lsr	r24
    59d6:	77 95       	ror	r23
    59d8:	67 95       	ror	r22
    59da:	b3 95       	inc	r27
    59dc:	d9 f7       	brne	.-10     	; 0x59d4 <__fixunssfsi+0x3c>
    59de:	3e f4       	brtc	.+14     	; 0x59ee <__fixunssfsi+0x56>
    59e0:	90 95       	com	r25
    59e2:	80 95       	com	r24
    59e4:	70 95       	com	r23
    59e6:	61 95       	neg	r22
    59e8:	7f 4f       	sbci	r23, 0xFF	; 255
    59ea:	8f 4f       	sbci	r24, 0xFF	; 255
    59ec:	9f 4f       	sbci	r25, 0xFF	; 255
    59ee:	08 95       	ret

000059f0 <__floatunsisf>:
    59f0:	e8 94       	clt
    59f2:	09 c0       	rjmp	.+18     	; 0x5a06 <__floatsisf+0x12>

000059f4 <__floatsisf>:
    59f4:	97 fb       	bst	r25, 7
    59f6:	3e f4       	brtc	.+14     	; 0x5a06 <__floatsisf+0x12>
    59f8:	90 95       	com	r25
    59fa:	80 95       	com	r24
    59fc:	70 95       	com	r23
    59fe:	61 95       	neg	r22
    5a00:	7f 4f       	sbci	r23, 0xFF	; 255
    5a02:	8f 4f       	sbci	r24, 0xFF	; 255
    5a04:	9f 4f       	sbci	r25, 0xFF	; 255
    5a06:	99 23       	and	r25, r25
    5a08:	a9 f0       	breq	.+42     	; 0x5a34 <__floatsisf+0x40>
    5a0a:	f9 2f       	mov	r31, r25
    5a0c:	96 e9       	ldi	r25, 0x96	; 150
    5a0e:	bb 27       	eor	r27, r27
    5a10:	93 95       	inc	r25
    5a12:	f6 95       	lsr	r31
    5a14:	87 95       	ror	r24
    5a16:	77 95       	ror	r23
    5a18:	67 95       	ror	r22
    5a1a:	b7 95       	ror	r27
    5a1c:	f1 11       	cpse	r31, r1
    5a1e:	f8 cf       	rjmp	.-16     	; 0x5a10 <__floatsisf+0x1c>
    5a20:	fa f4       	brpl	.+62     	; 0x5a60 <__floatsisf+0x6c>
    5a22:	bb 0f       	add	r27, r27
    5a24:	11 f4       	brne	.+4      	; 0x5a2a <__floatsisf+0x36>
    5a26:	60 ff       	sbrs	r22, 0
    5a28:	1b c0       	rjmp	.+54     	; 0x5a60 <__floatsisf+0x6c>
    5a2a:	6f 5f       	subi	r22, 0xFF	; 255
    5a2c:	7f 4f       	sbci	r23, 0xFF	; 255
    5a2e:	8f 4f       	sbci	r24, 0xFF	; 255
    5a30:	9f 4f       	sbci	r25, 0xFF	; 255
    5a32:	16 c0       	rjmp	.+44     	; 0x5a60 <__floatsisf+0x6c>
    5a34:	88 23       	and	r24, r24
    5a36:	11 f0       	breq	.+4      	; 0x5a3c <__floatsisf+0x48>
    5a38:	96 e9       	ldi	r25, 0x96	; 150
    5a3a:	11 c0       	rjmp	.+34     	; 0x5a5e <__floatsisf+0x6a>
    5a3c:	77 23       	and	r23, r23
    5a3e:	21 f0       	breq	.+8      	; 0x5a48 <__floatsisf+0x54>
    5a40:	9e e8       	ldi	r25, 0x8E	; 142
    5a42:	87 2f       	mov	r24, r23
    5a44:	76 2f       	mov	r23, r22
    5a46:	05 c0       	rjmp	.+10     	; 0x5a52 <__floatsisf+0x5e>
    5a48:	66 23       	and	r22, r22
    5a4a:	71 f0       	breq	.+28     	; 0x5a68 <__floatsisf+0x74>
    5a4c:	96 e8       	ldi	r25, 0x86	; 134
    5a4e:	86 2f       	mov	r24, r22
    5a50:	70 e0       	ldi	r23, 0x00	; 0
    5a52:	60 e0       	ldi	r22, 0x00	; 0
    5a54:	2a f0       	brmi	.+10     	; 0x5a60 <__floatsisf+0x6c>
    5a56:	9a 95       	dec	r25
    5a58:	66 0f       	add	r22, r22
    5a5a:	77 1f       	adc	r23, r23
    5a5c:	88 1f       	adc	r24, r24
    5a5e:	da f7       	brpl	.-10     	; 0x5a56 <__floatsisf+0x62>
    5a60:	88 0f       	add	r24, r24
    5a62:	96 95       	lsr	r25
    5a64:	87 95       	ror	r24
    5a66:	97 f9       	bld	r25, 7
    5a68:	08 95       	ret

00005a6a <__fp_inf>:
    5a6a:	97 f9       	bld	r25, 7
    5a6c:	9f 67       	ori	r25, 0x7F	; 127
    5a6e:	80 e8       	ldi	r24, 0x80	; 128
    5a70:	70 e0       	ldi	r23, 0x00	; 0
    5a72:	60 e0       	ldi	r22, 0x00	; 0
    5a74:	08 95       	ret

00005a76 <__fp_nan>:
    5a76:	9f ef       	ldi	r25, 0xFF	; 255
    5a78:	80 ec       	ldi	r24, 0xC0	; 192
    5a7a:	08 95       	ret

00005a7c <__fp_pscA>:
    5a7c:	00 24       	eor	r0, r0
    5a7e:	0a 94       	dec	r0
    5a80:	16 16       	cp	r1, r22
    5a82:	17 06       	cpc	r1, r23
    5a84:	18 06       	cpc	r1, r24
    5a86:	09 06       	cpc	r0, r25
    5a88:	08 95       	ret

00005a8a <__fp_pscB>:
    5a8a:	00 24       	eor	r0, r0
    5a8c:	0a 94       	dec	r0
    5a8e:	12 16       	cp	r1, r18
    5a90:	13 06       	cpc	r1, r19
    5a92:	14 06       	cpc	r1, r20
    5a94:	05 06       	cpc	r0, r21
    5a96:	08 95       	ret

00005a98 <__fp_round>:
    5a98:	09 2e       	mov	r0, r25
    5a9a:	03 94       	inc	r0
    5a9c:	00 0c       	add	r0, r0
    5a9e:	11 f4       	brne	.+4      	; 0x5aa4 <__fp_round+0xc>
    5aa0:	88 23       	and	r24, r24
    5aa2:	52 f0       	brmi	.+20     	; 0x5ab8 <__fp_round+0x20>
    5aa4:	bb 0f       	add	r27, r27
    5aa6:	40 f4       	brcc	.+16     	; 0x5ab8 <__fp_round+0x20>
    5aa8:	bf 2b       	or	r27, r31
    5aaa:	11 f4       	brne	.+4      	; 0x5ab0 <__fp_round+0x18>
    5aac:	60 ff       	sbrs	r22, 0
    5aae:	04 c0       	rjmp	.+8      	; 0x5ab8 <__fp_round+0x20>
    5ab0:	6f 5f       	subi	r22, 0xFF	; 255
    5ab2:	7f 4f       	sbci	r23, 0xFF	; 255
    5ab4:	8f 4f       	sbci	r24, 0xFF	; 255
    5ab6:	9f 4f       	sbci	r25, 0xFF	; 255
    5ab8:	08 95       	ret

00005aba <__fp_split3>:
    5aba:	57 fd       	sbrc	r21, 7
    5abc:	90 58       	subi	r25, 0x80	; 128
    5abe:	44 0f       	add	r20, r20
    5ac0:	55 1f       	adc	r21, r21
    5ac2:	59 f0       	breq	.+22     	; 0x5ada <__fp_splitA+0x10>
    5ac4:	5f 3f       	cpi	r21, 0xFF	; 255
    5ac6:	71 f0       	breq	.+28     	; 0x5ae4 <__fp_splitA+0x1a>
    5ac8:	47 95       	ror	r20

00005aca <__fp_splitA>:
    5aca:	88 0f       	add	r24, r24
    5acc:	97 fb       	bst	r25, 7
    5ace:	99 1f       	adc	r25, r25
    5ad0:	61 f0       	breq	.+24     	; 0x5aea <__fp_splitA+0x20>
    5ad2:	9f 3f       	cpi	r25, 0xFF	; 255
    5ad4:	79 f0       	breq	.+30     	; 0x5af4 <__fp_splitA+0x2a>
    5ad6:	87 95       	ror	r24
    5ad8:	08 95       	ret
    5ada:	12 16       	cp	r1, r18
    5adc:	13 06       	cpc	r1, r19
    5ade:	14 06       	cpc	r1, r20
    5ae0:	55 1f       	adc	r21, r21
    5ae2:	f2 cf       	rjmp	.-28     	; 0x5ac8 <__fp_split3+0xe>
    5ae4:	46 95       	lsr	r20
    5ae6:	f1 df       	rcall	.-30     	; 0x5aca <__fp_splitA>
    5ae8:	08 c0       	rjmp	.+16     	; 0x5afa <__fp_splitA+0x30>
    5aea:	16 16       	cp	r1, r22
    5aec:	17 06       	cpc	r1, r23
    5aee:	18 06       	cpc	r1, r24
    5af0:	99 1f       	adc	r25, r25
    5af2:	f1 cf       	rjmp	.-30     	; 0x5ad6 <__fp_splitA+0xc>
    5af4:	86 95       	lsr	r24
    5af6:	71 05       	cpc	r23, r1
    5af8:	61 05       	cpc	r22, r1
    5afa:	08 94       	sec
    5afc:	08 95       	ret

00005afe <__fp_zero>:
    5afe:	e8 94       	clt

00005b00 <__fp_szero>:
    5b00:	bb 27       	eor	r27, r27
    5b02:	66 27       	eor	r22, r22
    5b04:	77 27       	eor	r23, r23
    5b06:	cb 01       	movw	r24, r22
    5b08:	97 f9       	bld	r25, 7
    5b0a:	08 95       	ret

00005b0c <__mulsf3>:
    5b0c:	0b d0       	rcall	.+22     	; 0x5b24 <__mulsf3x>
    5b0e:	c4 cf       	rjmp	.-120    	; 0x5a98 <__fp_round>
    5b10:	b5 df       	rcall	.-150    	; 0x5a7c <__fp_pscA>
    5b12:	28 f0       	brcs	.+10     	; 0x5b1e <__mulsf3+0x12>
    5b14:	ba df       	rcall	.-140    	; 0x5a8a <__fp_pscB>
    5b16:	18 f0       	brcs	.+6      	; 0x5b1e <__mulsf3+0x12>
    5b18:	95 23       	and	r25, r21
    5b1a:	09 f0       	breq	.+2      	; 0x5b1e <__mulsf3+0x12>
    5b1c:	a6 cf       	rjmp	.-180    	; 0x5a6a <__fp_inf>
    5b1e:	ab cf       	rjmp	.-170    	; 0x5a76 <__fp_nan>
    5b20:	11 24       	eor	r1, r1
    5b22:	ee cf       	rjmp	.-36     	; 0x5b00 <__fp_szero>

00005b24 <__mulsf3x>:
    5b24:	ca df       	rcall	.-108    	; 0x5aba <__fp_split3>
    5b26:	a0 f3       	brcs	.-24     	; 0x5b10 <__mulsf3+0x4>

00005b28 <__mulsf3_pse>:
    5b28:	95 9f       	mul	r25, r21
    5b2a:	d1 f3       	breq	.-12     	; 0x5b20 <__mulsf3+0x14>
    5b2c:	95 0f       	add	r25, r21
    5b2e:	50 e0       	ldi	r21, 0x00	; 0
    5b30:	55 1f       	adc	r21, r21
    5b32:	62 9f       	mul	r22, r18
    5b34:	f0 01       	movw	r30, r0
    5b36:	72 9f       	mul	r23, r18
    5b38:	bb 27       	eor	r27, r27
    5b3a:	f0 0d       	add	r31, r0
    5b3c:	b1 1d       	adc	r27, r1
    5b3e:	63 9f       	mul	r22, r19
    5b40:	aa 27       	eor	r26, r26
    5b42:	f0 0d       	add	r31, r0
    5b44:	b1 1d       	adc	r27, r1
    5b46:	aa 1f       	adc	r26, r26
    5b48:	64 9f       	mul	r22, r20
    5b4a:	66 27       	eor	r22, r22
    5b4c:	b0 0d       	add	r27, r0
    5b4e:	a1 1d       	adc	r26, r1
    5b50:	66 1f       	adc	r22, r22
    5b52:	82 9f       	mul	r24, r18
    5b54:	22 27       	eor	r18, r18
    5b56:	b0 0d       	add	r27, r0
    5b58:	a1 1d       	adc	r26, r1
    5b5a:	62 1f       	adc	r22, r18
    5b5c:	73 9f       	mul	r23, r19
    5b5e:	b0 0d       	add	r27, r0
    5b60:	a1 1d       	adc	r26, r1
    5b62:	62 1f       	adc	r22, r18
    5b64:	83 9f       	mul	r24, r19
    5b66:	a0 0d       	add	r26, r0
    5b68:	61 1d       	adc	r22, r1
    5b6a:	22 1f       	adc	r18, r18
    5b6c:	74 9f       	mul	r23, r20
    5b6e:	33 27       	eor	r19, r19
    5b70:	a0 0d       	add	r26, r0
    5b72:	61 1d       	adc	r22, r1
    5b74:	23 1f       	adc	r18, r19
    5b76:	84 9f       	mul	r24, r20
    5b78:	60 0d       	add	r22, r0
    5b7a:	21 1d       	adc	r18, r1
    5b7c:	82 2f       	mov	r24, r18
    5b7e:	76 2f       	mov	r23, r22
    5b80:	6a 2f       	mov	r22, r26
    5b82:	11 24       	eor	r1, r1
    5b84:	9f 57       	subi	r25, 0x7F	; 127
    5b86:	50 40       	sbci	r21, 0x00	; 0
    5b88:	8a f0       	brmi	.+34     	; 0x5bac <__mulsf3_pse+0x84>
    5b8a:	e1 f0       	breq	.+56     	; 0x5bc4 <__mulsf3_pse+0x9c>
    5b8c:	88 23       	and	r24, r24
    5b8e:	4a f0       	brmi	.+18     	; 0x5ba2 <__mulsf3_pse+0x7a>
    5b90:	ee 0f       	add	r30, r30
    5b92:	ff 1f       	adc	r31, r31
    5b94:	bb 1f       	adc	r27, r27
    5b96:	66 1f       	adc	r22, r22
    5b98:	77 1f       	adc	r23, r23
    5b9a:	88 1f       	adc	r24, r24
    5b9c:	91 50       	subi	r25, 0x01	; 1
    5b9e:	50 40       	sbci	r21, 0x00	; 0
    5ba0:	a9 f7       	brne	.-22     	; 0x5b8c <__mulsf3_pse+0x64>
    5ba2:	9e 3f       	cpi	r25, 0xFE	; 254
    5ba4:	51 05       	cpc	r21, r1
    5ba6:	70 f0       	brcs	.+28     	; 0x5bc4 <__mulsf3_pse+0x9c>
    5ba8:	60 cf       	rjmp	.-320    	; 0x5a6a <__fp_inf>
    5baa:	aa cf       	rjmp	.-172    	; 0x5b00 <__fp_szero>
    5bac:	5f 3f       	cpi	r21, 0xFF	; 255
    5bae:	ec f3       	brlt	.-6      	; 0x5baa <__mulsf3_pse+0x82>
    5bb0:	98 3e       	cpi	r25, 0xE8	; 232
    5bb2:	dc f3       	brlt	.-10     	; 0x5baa <__mulsf3_pse+0x82>
    5bb4:	86 95       	lsr	r24
    5bb6:	77 95       	ror	r23
    5bb8:	67 95       	ror	r22
    5bba:	b7 95       	ror	r27
    5bbc:	f7 95       	ror	r31
    5bbe:	e7 95       	ror	r30
    5bc0:	9f 5f       	subi	r25, 0xFF	; 255
    5bc2:	c1 f7       	brne	.-16     	; 0x5bb4 <__mulsf3_pse+0x8c>
    5bc4:	fe 2b       	or	r31, r30
    5bc6:	88 0f       	add	r24, r24
    5bc8:	91 1d       	adc	r25, r1
    5bca:	96 95       	lsr	r25
    5bcc:	87 95       	ror	r24
    5bce:	97 f9       	bld	r25, 7
    5bd0:	08 95       	ret

00005bd2 <__udivmodsi4>:
    5bd2:	a1 e2       	ldi	r26, 0x21	; 33
    5bd4:	1a 2e       	mov	r1, r26
    5bd6:	aa 1b       	sub	r26, r26
    5bd8:	bb 1b       	sub	r27, r27
    5bda:	fd 01       	movw	r30, r26
    5bdc:	0d c0       	rjmp	.+26     	; 0x5bf8 <__udivmodsi4_ep>

00005bde <__udivmodsi4_loop>:
    5bde:	aa 1f       	adc	r26, r26
    5be0:	bb 1f       	adc	r27, r27
    5be2:	ee 1f       	adc	r30, r30
    5be4:	ff 1f       	adc	r31, r31
    5be6:	a2 17       	cp	r26, r18
    5be8:	b3 07       	cpc	r27, r19
    5bea:	e4 07       	cpc	r30, r20
    5bec:	f5 07       	cpc	r31, r21
    5bee:	20 f0       	brcs	.+8      	; 0x5bf8 <__udivmodsi4_ep>
    5bf0:	a2 1b       	sub	r26, r18
    5bf2:	b3 0b       	sbc	r27, r19
    5bf4:	e4 0b       	sbc	r30, r20
    5bf6:	f5 0b       	sbc	r31, r21

00005bf8 <__udivmodsi4_ep>:
    5bf8:	66 1f       	adc	r22, r22
    5bfa:	77 1f       	adc	r23, r23
    5bfc:	88 1f       	adc	r24, r24
    5bfe:	99 1f       	adc	r25, r25
    5c00:	1a 94       	dec	r1
    5c02:	69 f7       	brne	.-38     	; 0x5bde <__udivmodsi4_loop>
    5c04:	60 95       	com	r22
    5c06:	70 95       	com	r23
    5c08:	80 95       	com	r24
    5c0a:	90 95       	com	r25
    5c0c:	9b 01       	movw	r18, r22
    5c0e:	ac 01       	movw	r20, r24
    5c10:	bd 01       	movw	r22, r26
    5c12:	cf 01       	movw	r24, r30
    5c14:	08 95       	ret

00005c16 <__tablejump2__>:
    5c16:	ee 0f       	add	r30, r30
    5c18:	ff 1f       	adc	r31, r31
    5c1a:	88 1f       	adc	r24, r24
    5c1c:	8b bf       	out	0x3b, r24	; 59
    5c1e:	07 90       	elpm	r0, Z+
    5c20:	f6 91       	elpm	r31, Z
    5c22:	e0 2d       	mov	r30, r0
    5c24:	19 94       	eijmp

00005c26 <calloc>:
    5c26:	0f 93       	push	r16
    5c28:	1f 93       	push	r17
    5c2a:	cf 93       	push	r28
    5c2c:	df 93       	push	r29
    5c2e:	86 9f       	mul	r24, r22
    5c30:	80 01       	movw	r16, r0
    5c32:	87 9f       	mul	r24, r23
    5c34:	10 0d       	add	r17, r0
    5c36:	96 9f       	mul	r25, r22
    5c38:	10 0d       	add	r17, r0
    5c3a:	11 24       	eor	r1, r1
    5c3c:	c8 01       	movw	r24, r16
    5c3e:	0d d0       	rcall	.+26     	; 0x5c5a <malloc>
    5c40:	ec 01       	movw	r28, r24
    5c42:	00 97       	sbiw	r24, 0x00	; 0
    5c44:	21 f0       	breq	.+8      	; 0x5c4e <calloc+0x28>
    5c46:	a8 01       	movw	r20, r16
    5c48:	60 e0       	ldi	r22, 0x00	; 0
    5c4a:	70 e0       	ldi	r23, 0x00	; 0
    5c4c:	34 d1       	rcall	.+616    	; 0x5eb6 <memset>
    5c4e:	ce 01       	movw	r24, r28
    5c50:	df 91       	pop	r29
    5c52:	cf 91       	pop	r28
    5c54:	1f 91       	pop	r17
    5c56:	0f 91       	pop	r16
    5c58:	08 95       	ret

00005c5a <malloc>:
    5c5a:	0f 93       	push	r16
    5c5c:	1f 93       	push	r17
    5c5e:	cf 93       	push	r28
    5c60:	df 93       	push	r29
    5c62:	82 30       	cpi	r24, 0x02	; 2
    5c64:	91 05       	cpc	r25, r1
    5c66:	10 f4       	brcc	.+4      	; 0x5c6c <malloc+0x12>
    5c68:	82 e0       	ldi	r24, 0x02	; 2
    5c6a:	90 e0       	ldi	r25, 0x00	; 0
    5c6c:	e0 91 69 1b 	lds	r30, 0x1B69	; 0x801b69 <__flp>
    5c70:	f0 91 6a 1b 	lds	r31, 0x1B6A	; 0x801b6a <__flp+0x1>
    5c74:	20 e0       	ldi	r18, 0x00	; 0
    5c76:	30 e0       	ldi	r19, 0x00	; 0
    5c78:	a0 e0       	ldi	r26, 0x00	; 0
    5c7a:	b0 e0       	ldi	r27, 0x00	; 0
    5c7c:	30 97       	sbiw	r30, 0x00	; 0
    5c7e:	19 f1       	breq	.+70     	; 0x5cc6 <malloc+0x6c>
    5c80:	40 81       	ld	r20, Z
    5c82:	51 81       	ldd	r21, Z+1	; 0x01
    5c84:	02 81       	ldd	r16, Z+2	; 0x02
    5c86:	13 81       	ldd	r17, Z+3	; 0x03
    5c88:	48 17       	cp	r20, r24
    5c8a:	59 07       	cpc	r21, r25
    5c8c:	c8 f0       	brcs	.+50     	; 0x5cc0 <malloc+0x66>
    5c8e:	84 17       	cp	r24, r20
    5c90:	95 07       	cpc	r25, r21
    5c92:	69 f4       	brne	.+26     	; 0x5cae <malloc+0x54>
    5c94:	10 97       	sbiw	r26, 0x00	; 0
    5c96:	31 f0       	breq	.+12     	; 0x5ca4 <malloc+0x4a>
    5c98:	12 96       	adiw	r26, 0x02	; 2
    5c9a:	0c 93       	st	X, r16
    5c9c:	12 97       	sbiw	r26, 0x02	; 2
    5c9e:	13 96       	adiw	r26, 0x03	; 3
    5ca0:	1c 93       	st	X, r17
    5ca2:	27 c0       	rjmp	.+78     	; 0x5cf2 <malloc+0x98>
    5ca4:	00 93 69 1b 	sts	0x1B69, r16	; 0x801b69 <__flp>
    5ca8:	10 93 6a 1b 	sts	0x1B6A, r17	; 0x801b6a <__flp+0x1>
    5cac:	22 c0       	rjmp	.+68     	; 0x5cf2 <malloc+0x98>
    5cae:	21 15       	cp	r18, r1
    5cb0:	31 05       	cpc	r19, r1
    5cb2:	19 f0       	breq	.+6      	; 0x5cba <malloc+0x60>
    5cb4:	42 17       	cp	r20, r18
    5cb6:	53 07       	cpc	r21, r19
    5cb8:	18 f4       	brcc	.+6      	; 0x5cc0 <malloc+0x66>
    5cba:	9a 01       	movw	r18, r20
    5cbc:	bd 01       	movw	r22, r26
    5cbe:	ef 01       	movw	r28, r30
    5cc0:	df 01       	movw	r26, r30
    5cc2:	f8 01       	movw	r30, r16
    5cc4:	db cf       	rjmp	.-74     	; 0x5c7c <malloc+0x22>
    5cc6:	21 15       	cp	r18, r1
    5cc8:	31 05       	cpc	r19, r1
    5cca:	f9 f0       	breq	.+62     	; 0x5d0a <malloc+0xb0>
    5ccc:	28 1b       	sub	r18, r24
    5cce:	39 0b       	sbc	r19, r25
    5cd0:	24 30       	cpi	r18, 0x04	; 4
    5cd2:	31 05       	cpc	r19, r1
    5cd4:	80 f4       	brcc	.+32     	; 0x5cf6 <malloc+0x9c>
    5cd6:	8a 81       	ldd	r24, Y+2	; 0x02
    5cd8:	9b 81       	ldd	r25, Y+3	; 0x03
    5cda:	61 15       	cp	r22, r1
    5cdc:	71 05       	cpc	r23, r1
    5cde:	21 f0       	breq	.+8      	; 0x5ce8 <malloc+0x8e>
    5ce0:	fb 01       	movw	r30, r22
    5ce2:	93 83       	std	Z+3, r25	; 0x03
    5ce4:	82 83       	std	Z+2, r24	; 0x02
    5ce6:	04 c0       	rjmp	.+8      	; 0x5cf0 <malloc+0x96>
    5ce8:	90 93 6a 1b 	sts	0x1B6A, r25	; 0x801b6a <__flp+0x1>
    5cec:	80 93 69 1b 	sts	0x1B69, r24	; 0x801b69 <__flp>
    5cf0:	fe 01       	movw	r30, r28
    5cf2:	32 96       	adiw	r30, 0x02	; 2
    5cf4:	44 c0       	rjmp	.+136    	; 0x5d7e <malloc+0x124>
    5cf6:	fe 01       	movw	r30, r28
    5cf8:	e2 0f       	add	r30, r18
    5cfa:	f3 1f       	adc	r31, r19
    5cfc:	81 93       	st	Z+, r24
    5cfe:	91 93       	st	Z+, r25
    5d00:	22 50       	subi	r18, 0x02	; 2
    5d02:	31 09       	sbc	r19, r1
    5d04:	39 83       	std	Y+1, r19	; 0x01
    5d06:	28 83       	st	Y, r18
    5d08:	3a c0       	rjmp	.+116    	; 0x5d7e <malloc+0x124>
    5d0a:	20 91 67 1b 	lds	r18, 0x1B67	; 0x801b67 <__brkval>
    5d0e:	30 91 68 1b 	lds	r19, 0x1B68	; 0x801b68 <__brkval+0x1>
    5d12:	23 2b       	or	r18, r19
    5d14:	41 f4       	brne	.+16     	; 0x5d26 <malloc+0xcc>
    5d16:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    5d1a:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    5d1e:	30 93 68 1b 	sts	0x1B68, r19	; 0x801b68 <__brkval+0x1>
    5d22:	20 93 67 1b 	sts	0x1B67, r18	; 0x801b67 <__brkval>
    5d26:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    5d2a:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    5d2e:	21 15       	cp	r18, r1
    5d30:	31 05       	cpc	r19, r1
    5d32:	41 f4       	brne	.+16     	; 0x5d44 <malloc+0xea>
    5d34:	2d b7       	in	r18, 0x3d	; 61
    5d36:	3e b7       	in	r19, 0x3e	; 62
    5d38:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    5d3c:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    5d40:	24 1b       	sub	r18, r20
    5d42:	35 0b       	sbc	r19, r21
    5d44:	e0 91 67 1b 	lds	r30, 0x1B67	; 0x801b67 <__brkval>
    5d48:	f0 91 68 1b 	lds	r31, 0x1B68	; 0x801b68 <__brkval+0x1>
    5d4c:	e2 17       	cp	r30, r18
    5d4e:	f3 07       	cpc	r31, r19
    5d50:	a0 f4       	brcc	.+40     	; 0x5d7a <malloc+0x120>
    5d52:	2e 1b       	sub	r18, r30
    5d54:	3f 0b       	sbc	r19, r31
    5d56:	28 17       	cp	r18, r24
    5d58:	39 07       	cpc	r19, r25
    5d5a:	78 f0       	brcs	.+30     	; 0x5d7a <malloc+0x120>
    5d5c:	ac 01       	movw	r20, r24
    5d5e:	4e 5f       	subi	r20, 0xFE	; 254
    5d60:	5f 4f       	sbci	r21, 0xFF	; 255
    5d62:	24 17       	cp	r18, r20
    5d64:	35 07       	cpc	r19, r21
    5d66:	48 f0       	brcs	.+18     	; 0x5d7a <malloc+0x120>
    5d68:	4e 0f       	add	r20, r30
    5d6a:	5f 1f       	adc	r21, r31
    5d6c:	50 93 68 1b 	sts	0x1B68, r21	; 0x801b68 <__brkval+0x1>
    5d70:	40 93 67 1b 	sts	0x1B67, r20	; 0x801b67 <__brkval>
    5d74:	81 93       	st	Z+, r24
    5d76:	91 93       	st	Z+, r25
    5d78:	02 c0       	rjmp	.+4      	; 0x5d7e <malloc+0x124>
    5d7a:	e0 e0       	ldi	r30, 0x00	; 0
    5d7c:	f0 e0       	ldi	r31, 0x00	; 0
    5d7e:	cf 01       	movw	r24, r30
    5d80:	df 91       	pop	r29
    5d82:	cf 91       	pop	r28
    5d84:	1f 91       	pop	r17
    5d86:	0f 91       	pop	r16
    5d88:	08 95       	ret

00005d8a <free>:
    5d8a:	cf 93       	push	r28
    5d8c:	df 93       	push	r29
    5d8e:	00 97       	sbiw	r24, 0x00	; 0
    5d90:	09 f4       	brne	.+2      	; 0x5d94 <free+0xa>
    5d92:	81 c0       	rjmp	.+258    	; 0x5e96 <free+0x10c>
    5d94:	fc 01       	movw	r30, r24
    5d96:	32 97       	sbiw	r30, 0x02	; 2
    5d98:	13 82       	std	Z+3, r1	; 0x03
    5d9a:	12 82       	std	Z+2, r1	; 0x02
    5d9c:	a0 91 69 1b 	lds	r26, 0x1B69	; 0x801b69 <__flp>
    5da0:	b0 91 6a 1b 	lds	r27, 0x1B6A	; 0x801b6a <__flp+0x1>
    5da4:	10 97       	sbiw	r26, 0x00	; 0
    5da6:	81 f4       	brne	.+32     	; 0x5dc8 <free+0x3e>
    5da8:	20 81       	ld	r18, Z
    5daa:	31 81       	ldd	r19, Z+1	; 0x01
    5dac:	82 0f       	add	r24, r18
    5dae:	93 1f       	adc	r25, r19
    5db0:	20 91 67 1b 	lds	r18, 0x1B67	; 0x801b67 <__brkval>
    5db4:	30 91 68 1b 	lds	r19, 0x1B68	; 0x801b68 <__brkval+0x1>
    5db8:	28 17       	cp	r18, r24
    5dba:	39 07       	cpc	r19, r25
    5dbc:	51 f5       	brne	.+84     	; 0x5e12 <free+0x88>
    5dbe:	f0 93 68 1b 	sts	0x1B68, r31	; 0x801b68 <__brkval+0x1>
    5dc2:	e0 93 67 1b 	sts	0x1B67, r30	; 0x801b67 <__brkval>
    5dc6:	67 c0       	rjmp	.+206    	; 0x5e96 <free+0x10c>
    5dc8:	ed 01       	movw	r28, r26
    5dca:	20 e0       	ldi	r18, 0x00	; 0
    5dcc:	30 e0       	ldi	r19, 0x00	; 0
    5dce:	ce 17       	cp	r28, r30
    5dd0:	df 07       	cpc	r29, r31
    5dd2:	40 f4       	brcc	.+16     	; 0x5de4 <free+0x5a>
    5dd4:	4a 81       	ldd	r20, Y+2	; 0x02
    5dd6:	5b 81       	ldd	r21, Y+3	; 0x03
    5dd8:	9e 01       	movw	r18, r28
    5dda:	41 15       	cp	r20, r1
    5ddc:	51 05       	cpc	r21, r1
    5dde:	f1 f0       	breq	.+60     	; 0x5e1c <free+0x92>
    5de0:	ea 01       	movw	r28, r20
    5de2:	f5 cf       	rjmp	.-22     	; 0x5dce <free+0x44>
    5de4:	d3 83       	std	Z+3, r29	; 0x03
    5de6:	c2 83       	std	Z+2, r28	; 0x02
    5de8:	40 81       	ld	r20, Z
    5dea:	51 81       	ldd	r21, Z+1	; 0x01
    5dec:	84 0f       	add	r24, r20
    5dee:	95 1f       	adc	r25, r21
    5df0:	c8 17       	cp	r28, r24
    5df2:	d9 07       	cpc	r29, r25
    5df4:	59 f4       	brne	.+22     	; 0x5e0c <free+0x82>
    5df6:	88 81       	ld	r24, Y
    5df8:	99 81       	ldd	r25, Y+1	; 0x01
    5dfa:	84 0f       	add	r24, r20
    5dfc:	95 1f       	adc	r25, r21
    5dfe:	02 96       	adiw	r24, 0x02	; 2
    5e00:	91 83       	std	Z+1, r25	; 0x01
    5e02:	80 83       	st	Z, r24
    5e04:	8a 81       	ldd	r24, Y+2	; 0x02
    5e06:	9b 81       	ldd	r25, Y+3	; 0x03
    5e08:	93 83       	std	Z+3, r25	; 0x03
    5e0a:	82 83       	std	Z+2, r24	; 0x02
    5e0c:	21 15       	cp	r18, r1
    5e0e:	31 05       	cpc	r19, r1
    5e10:	29 f4       	brne	.+10     	; 0x5e1c <free+0x92>
    5e12:	f0 93 6a 1b 	sts	0x1B6A, r31	; 0x801b6a <__flp+0x1>
    5e16:	e0 93 69 1b 	sts	0x1B69, r30	; 0x801b69 <__flp>
    5e1a:	3d c0       	rjmp	.+122    	; 0x5e96 <free+0x10c>
    5e1c:	e9 01       	movw	r28, r18
    5e1e:	fb 83       	std	Y+3, r31	; 0x03
    5e20:	ea 83       	std	Y+2, r30	; 0x02
    5e22:	49 91       	ld	r20, Y+
    5e24:	59 91       	ld	r21, Y+
    5e26:	c4 0f       	add	r28, r20
    5e28:	d5 1f       	adc	r29, r21
    5e2a:	ec 17       	cp	r30, r28
    5e2c:	fd 07       	cpc	r31, r29
    5e2e:	61 f4       	brne	.+24     	; 0x5e48 <free+0xbe>
    5e30:	80 81       	ld	r24, Z
    5e32:	91 81       	ldd	r25, Z+1	; 0x01
    5e34:	84 0f       	add	r24, r20
    5e36:	95 1f       	adc	r25, r21
    5e38:	02 96       	adiw	r24, 0x02	; 2
    5e3a:	e9 01       	movw	r28, r18
    5e3c:	99 83       	std	Y+1, r25	; 0x01
    5e3e:	88 83       	st	Y, r24
    5e40:	82 81       	ldd	r24, Z+2	; 0x02
    5e42:	93 81       	ldd	r25, Z+3	; 0x03
    5e44:	9b 83       	std	Y+3, r25	; 0x03
    5e46:	8a 83       	std	Y+2, r24	; 0x02
    5e48:	e0 e0       	ldi	r30, 0x00	; 0
    5e4a:	f0 e0       	ldi	r31, 0x00	; 0
    5e4c:	12 96       	adiw	r26, 0x02	; 2
    5e4e:	8d 91       	ld	r24, X+
    5e50:	9c 91       	ld	r25, X
    5e52:	13 97       	sbiw	r26, 0x03	; 3
    5e54:	00 97       	sbiw	r24, 0x00	; 0
    5e56:	19 f0       	breq	.+6      	; 0x5e5e <free+0xd4>
    5e58:	fd 01       	movw	r30, r26
    5e5a:	dc 01       	movw	r26, r24
    5e5c:	f7 cf       	rjmp	.-18     	; 0x5e4c <free+0xc2>
    5e5e:	8d 91       	ld	r24, X+
    5e60:	9c 91       	ld	r25, X
    5e62:	11 97       	sbiw	r26, 0x01	; 1
    5e64:	9d 01       	movw	r18, r26
    5e66:	2e 5f       	subi	r18, 0xFE	; 254
    5e68:	3f 4f       	sbci	r19, 0xFF	; 255
    5e6a:	82 0f       	add	r24, r18
    5e6c:	93 1f       	adc	r25, r19
    5e6e:	20 91 67 1b 	lds	r18, 0x1B67	; 0x801b67 <__brkval>
    5e72:	30 91 68 1b 	lds	r19, 0x1B68	; 0x801b68 <__brkval+0x1>
    5e76:	28 17       	cp	r18, r24
    5e78:	39 07       	cpc	r19, r25
    5e7a:	69 f4       	brne	.+26     	; 0x5e96 <free+0x10c>
    5e7c:	30 97       	sbiw	r30, 0x00	; 0
    5e7e:	29 f4       	brne	.+10     	; 0x5e8a <free+0x100>
    5e80:	10 92 6a 1b 	sts	0x1B6A, r1	; 0x801b6a <__flp+0x1>
    5e84:	10 92 69 1b 	sts	0x1B69, r1	; 0x801b69 <__flp>
    5e88:	02 c0       	rjmp	.+4      	; 0x5e8e <free+0x104>
    5e8a:	13 82       	std	Z+3, r1	; 0x03
    5e8c:	12 82       	std	Z+2, r1	; 0x02
    5e8e:	b0 93 68 1b 	sts	0x1B68, r27	; 0x801b68 <__brkval+0x1>
    5e92:	a0 93 67 1b 	sts	0x1B67, r26	; 0x801b67 <__brkval>
    5e96:	df 91       	pop	r29
    5e98:	cf 91       	pop	r28
    5e9a:	08 95       	ret

00005e9c <abort>:
    5e9c:	81 e0       	ldi	r24, 0x01	; 1
    5e9e:	90 e0       	ldi	r25, 0x00	; 0
    5ea0:	f8 94       	cli
    5ea2:	7d c3       	rjmp	.+1786   	; 0x659e <_exit>

00005ea4 <memcpy>:
    5ea4:	fb 01       	movw	r30, r22
    5ea6:	dc 01       	movw	r26, r24
    5ea8:	02 c0       	rjmp	.+4      	; 0x5eae <memcpy+0xa>
    5eaa:	01 90       	ld	r0, Z+
    5eac:	0d 92       	st	X+, r0
    5eae:	41 50       	subi	r20, 0x01	; 1
    5eb0:	50 40       	sbci	r21, 0x00	; 0
    5eb2:	d8 f7       	brcc	.-10     	; 0x5eaa <memcpy+0x6>
    5eb4:	08 95       	ret

00005eb6 <memset>:
    5eb6:	dc 01       	movw	r26, r24
    5eb8:	01 c0       	rjmp	.+2      	; 0x5ebc <memset+0x6>
    5eba:	6d 93       	st	X+, r22
    5ebc:	41 50       	subi	r20, 0x01	; 1
    5ebe:	50 40       	sbci	r21, 0x00	; 0
    5ec0:	e0 f7       	brcc	.-8      	; 0x5eba <memset+0x4>
    5ec2:	08 95       	ret

00005ec4 <strcasestr>:
    5ec4:	fb 01       	movw	r30, r22
    5ec6:	51 91       	ld	r21, Z+
    5ec8:	55 23       	and	r21, r21
    5eca:	b1 f0       	breq	.+44     	; 0x5ef8 <strcasestr+0x34>
    5ecc:	bf 01       	movw	r22, r30
    5ece:	dc 01       	movw	r26, r24
    5ed0:	05 2e       	mov	r0, r21
    5ed2:	4d 91       	ld	r20, X+
    5ed4:	44 23       	and	r20, r20
    5ed6:	69 f0       	breq	.+26     	; 0x5ef2 <strcasestr+0x2e>
    5ed8:	10 d0       	rcall	.+32     	; 0x5efa <strcasestr+0x36>
    5eda:	d9 f7       	brne	.-10     	; 0x5ed2 <strcasestr+0xe>
    5edc:	cd 01       	movw	r24, r26
    5ede:	01 90       	ld	r0, Z+
    5ee0:	00 20       	and	r0, r0
    5ee2:	49 f0       	breq	.+18     	; 0x5ef6 <strcasestr+0x32>
    5ee4:	4d 91       	ld	r20, X+
    5ee6:	41 11       	cpse	r20, r1
    5ee8:	08 d0       	rcall	.+16     	; 0x5efa <strcasestr+0x36>
    5eea:	c9 f3       	breq	.-14     	; 0x5ede <strcasestr+0x1a>
    5eec:	fb 01       	movw	r30, r22
    5eee:	41 11       	cpse	r20, r1
    5ef0:	ee cf       	rjmp	.-36     	; 0x5ece <strcasestr+0xa>
    5ef2:	81 e0       	ldi	r24, 0x01	; 1
    5ef4:	90 e0       	ldi	r25, 0x00	; 0
    5ef6:	01 97       	sbiw	r24, 0x01	; 1
    5ef8:	08 95       	ret
    5efa:	40 25       	eor	r20, r0
    5efc:	39 f0       	breq	.+14     	; 0x5f0c <strcasestr+0x48>
    5efe:	40 32       	cpi	r20, 0x20	; 32
    5f00:	29 f4       	brne	.+10     	; 0x5f0c <strcasestr+0x48>
    5f02:	40 29       	or	r20, r0
    5f04:	4b 57       	subi	r20, 0x7B	; 123
    5f06:	46 5e       	subi	r20, 0xE6	; 230
    5f08:	08 f0       	brcs	.+2      	; 0x5f0c <strcasestr+0x48>
    5f0a:	18 94       	sez
    5f0c:	08 95       	ret

00005f0e <strcat>:
    5f0e:	fb 01       	movw	r30, r22
    5f10:	dc 01       	movw	r26, r24
    5f12:	0d 90       	ld	r0, X+
    5f14:	00 20       	and	r0, r0
    5f16:	e9 f7       	brne	.-6      	; 0x5f12 <strcat+0x4>
    5f18:	11 97       	sbiw	r26, 0x01	; 1
    5f1a:	01 90       	ld	r0, Z+
    5f1c:	0d 92       	st	X+, r0
    5f1e:	00 20       	and	r0, r0
    5f20:	e1 f7       	brne	.-8      	; 0x5f1a <strcat+0xc>
    5f22:	08 95       	ret

00005f24 <strcpy>:
    5f24:	fb 01       	movw	r30, r22
    5f26:	dc 01       	movw	r26, r24
    5f28:	01 90       	ld	r0, Z+
    5f2a:	0d 92       	st	X+, r0
    5f2c:	00 20       	and	r0, r0
    5f2e:	e1 f7       	brne	.-8      	; 0x5f28 <strcpy+0x4>
    5f30:	08 95       	ret

00005f32 <strncasecmp>:
    5f32:	fb 01       	movw	r30, r22
    5f34:	dc 01       	movw	r26, r24
    5f36:	41 50       	subi	r20, 0x01	; 1
    5f38:	50 40       	sbci	r21, 0x00	; 0
    5f3a:	88 f0       	brcs	.+34     	; 0x5f5e <strncasecmp+0x2c>
    5f3c:	8d 91       	ld	r24, X+
    5f3e:	81 34       	cpi	r24, 0x41	; 65
    5f40:	1c f0       	brlt	.+6      	; 0x5f48 <strncasecmp+0x16>
    5f42:	8b 35       	cpi	r24, 0x5B	; 91
    5f44:	0c f4       	brge	.+2      	; 0x5f48 <strncasecmp+0x16>
    5f46:	80 5e       	subi	r24, 0xE0	; 224
    5f48:	61 91       	ld	r22, Z+
    5f4a:	61 34       	cpi	r22, 0x41	; 65
    5f4c:	1c f0       	brlt	.+6      	; 0x5f54 <strncasecmp+0x22>
    5f4e:	6b 35       	cpi	r22, 0x5B	; 91
    5f50:	0c f4       	brge	.+2      	; 0x5f54 <strncasecmp+0x22>
    5f52:	60 5e       	subi	r22, 0xE0	; 224
    5f54:	86 1b       	sub	r24, r22
    5f56:	61 11       	cpse	r22, r1
    5f58:	71 f3       	breq	.-36     	; 0x5f36 <strncasecmp+0x4>
    5f5a:	99 0b       	sbc	r25, r25
    5f5c:	08 95       	ret
    5f5e:	88 1b       	sub	r24, r24
    5f60:	fc cf       	rjmp	.-8      	; 0x5f5a <strncasecmp+0x28>

00005f62 <printf>:
    5f62:	cf 93       	push	r28
    5f64:	df 93       	push	r29
    5f66:	cd b7       	in	r28, 0x3d	; 61
    5f68:	de b7       	in	r29, 0x3e	; 62
    5f6a:	ae 01       	movw	r20, r28
    5f6c:	4a 5f       	subi	r20, 0xFA	; 250
    5f6e:	5f 4f       	sbci	r21, 0xFF	; 255
    5f70:	fa 01       	movw	r30, r20
    5f72:	61 91       	ld	r22, Z+
    5f74:	71 91       	ld	r23, Z+
    5f76:	af 01       	movw	r20, r30
    5f78:	80 91 6d 1b 	lds	r24, 0x1B6D	; 0x801b6d <__iob+0x2>
    5f7c:	90 91 6e 1b 	lds	r25, 0x1B6E	; 0x801b6e <__iob+0x3>
    5f80:	61 d0       	rcall	.+194    	; 0x6044 <vfprintf>
    5f82:	df 91       	pop	r29
    5f84:	cf 91       	pop	r28
    5f86:	08 95       	ret

00005f88 <puts>:
    5f88:	0f 93       	push	r16
    5f8a:	1f 93       	push	r17
    5f8c:	cf 93       	push	r28
    5f8e:	df 93       	push	r29
    5f90:	e0 91 6d 1b 	lds	r30, 0x1B6D	; 0x801b6d <__iob+0x2>
    5f94:	f0 91 6e 1b 	lds	r31, 0x1B6E	; 0x801b6e <__iob+0x3>
    5f98:	23 81       	ldd	r18, Z+3	; 0x03
    5f9a:	21 ff       	sbrs	r18, 1
    5f9c:	1b c0       	rjmp	.+54     	; 0x5fd4 <puts+0x4c>
    5f9e:	8c 01       	movw	r16, r24
    5fa0:	d0 e0       	ldi	r29, 0x00	; 0
    5fa2:	c0 e0       	ldi	r28, 0x00	; 0
    5fa4:	f8 01       	movw	r30, r16
    5fa6:	81 91       	ld	r24, Z+
    5fa8:	8f 01       	movw	r16, r30
    5faa:	60 91 6d 1b 	lds	r22, 0x1B6D	; 0x801b6d <__iob+0x2>
    5fae:	70 91 6e 1b 	lds	r23, 0x1B6E	; 0x801b6e <__iob+0x3>
    5fb2:	db 01       	movw	r26, r22
    5fb4:	18 96       	adiw	r26, 0x08	; 8
    5fb6:	ed 91       	ld	r30, X+
    5fb8:	fc 91       	ld	r31, X
    5fba:	19 97       	sbiw	r26, 0x09	; 9
    5fbc:	88 23       	and	r24, r24
    5fbe:	31 f0       	breq	.+12     	; 0x5fcc <puts+0x44>
    5fc0:	19 95       	eicall
    5fc2:	89 2b       	or	r24, r25
    5fc4:	79 f3       	breq	.-34     	; 0x5fa4 <puts+0x1c>
    5fc6:	df ef       	ldi	r29, 0xFF	; 255
    5fc8:	cf ef       	ldi	r28, 0xFF	; 255
    5fca:	ec cf       	rjmp	.-40     	; 0x5fa4 <puts+0x1c>
    5fcc:	8a e0       	ldi	r24, 0x0A	; 10
    5fce:	19 95       	eicall
    5fd0:	89 2b       	or	r24, r25
    5fd2:	19 f0       	breq	.+6      	; 0x5fda <puts+0x52>
    5fd4:	8f ef       	ldi	r24, 0xFF	; 255
    5fd6:	9f ef       	ldi	r25, 0xFF	; 255
    5fd8:	02 c0       	rjmp	.+4      	; 0x5fde <puts+0x56>
    5fda:	8d 2f       	mov	r24, r29
    5fdc:	9c 2f       	mov	r25, r28
    5fde:	df 91       	pop	r29
    5fe0:	cf 91       	pop	r28
    5fe2:	1f 91       	pop	r17
    5fe4:	0f 91       	pop	r16
    5fe6:	08 95       	ret

00005fe8 <sprintf>:
    5fe8:	0f 93       	push	r16
    5fea:	1f 93       	push	r17
    5fec:	cf 93       	push	r28
    5fee:	df 93       	push	r29
    5ff0:	cd b7       	in	r28, 0x3d	; 61
    5ff2:	de b7       	in	r29, 0x3e	; 62
    5ff4:	2e 97       	sbiw	r28, 0x0e	; 14
    5ff6:	0f b6       	in	r0, 0x3f	; 63
    5ff8:	f8 94       	cli
    5ffa:	de bf       	out	0x3e, r29	; 62
    5ffc:	0f be       	out	0x3f, r0	; 63
    5ffe:	cd bf       	out	0x3d, r28	; 61
    6000:	0e 89       	ldd	r16, Y+22	; 0x16
    6002:	1f 89       	ldd	r17, Y+23	; 0x17
    6004:	86 e0       	ldi	r24, 0x06	; 6
    6006:	8c 83       	std	Y+4, r24	; 0x04
    6008:	1a 83       	std	Y+2, r17	; 0x02
    600a:	09 83       	std	Y+1, r16	; 0x01
    600c:	8f ef       	ldi	r24, 0xFF	; 255
    600e:	9f e7       	ldi	r25, 0x7F	; 127
    6010:	9e 83       	std	Y+6, r25	; 0x06
    6012:	8d 83       	std	Y+5, r24	; 0x05
    6014:	ae 01       	movw	r20, r28
    6016:	46 5e       	subi	r20, 0xE6	; 230
    6018:	5f 4f       	sbci	r21, 0xFF	; 255
    601a:	68 8d       	ldd	r22, Y+24	; 0x18
    601c:	79 8d       	ldd	r23, Y+25	; 0x19
    601e:	ce 01       	movw	r24, r28
    6020:	01 96       	adiw	r24, 0x01	; 1
    6022:	10 d0       	rcall	.+32     	; 0x6044 <vfprintf>
    6024:	ef 81       	ldd	r30, Y+7	; 0x07
    6026:	f8 85       	ldd	r31, Y+8	; 0x08
    6028:	e0 0f       	add	r30, r16
    602a:	f1 1f       	adc	r31, r17
    602c:	10 82       	st	Z, r1
    602e:	2e 96       	adiw	r28, 0x0e	; 14
    6030:	0f b6       	in	r0, 0x3f	; 63
    6032:	f8 94       	cli
    6034:	de bf       	out	0x3e, r29	; 62
    6036:	0f be       	out	0x3f, r0	; 63
    6038:	cd bf       	out	0x3d, r28	; 61
    603a:	df 91       	pop	r29
    603c:	cf 91       	pop	r28
    603e:	1f 91       	pop	r17
    6040:	0f 91       	pop	r16
    6042:	08 95       	ret

00006044 <vfprintf>:
    6044:	2f 92       	push	r2
    6046:	3f 92       	push	r3
    6048:	4f 92       	push	r4
    604a:	5f 92       	push	r5
    604c:	6f 92       	push	r6
    604e:	7f 92       	push	r7
    6050:	8f 92       	push	r8
    6052:	9f 92       	push	r9
    6054:	af 92       	push	r10
    6056:	bf 92       	push	r11
    6058:	cf 92       	push	r12
    605a:	df 92       	push	r13
    605c:	ef 92       	push	r14
    605e:	ff 92       	push	r15
    6060:	0f 93       	push	r16
    6062:	1f 93       	push	r17
    6064:	cf 93       	push	r28
    6066:	df 93       	push	r29
    6068:	cd b7       	in	r28, 0x3d	; 61
    606a:	de b7       	in	r29, 0x3e	; 62
    606c:	2b 97       	sbiw	r28, 0x0b	; 11
    606e:	0f b6       	in	r0, 0x3f	; 63
    6070:	f8 94       	cli
    6072:	de bf       	out	0x3e, r29	; 62
    6074:	0f be       	out	0x3f, r0	; 63
    6076:	cd bf       	out	0x3d, r28	; 61
    6078:	6c 01       	movw	r12, r24
    607a:	7b 01       	movw	r14, r22
    607c:	8a 01       	movw	r16, r20
    607e:	fc 01       	movw	r30, r24
    6080:	17 82       	std	Z+7, r1	; 0x07
    6082:	16 82       	std	Z+6, r1	; 0x06
    6084:	83 81       	ldd	r24, Z+3	; 0x03
    6086:	81 ff       	sbrs	r24, 1
    6088:	bf c1       	rjmp	.+894    	; 0x6408 <vfprintf+0x3c4>
    608a:	ce 01       	movw	r24, r28
    608c:	01 96       	adiw	r24, 0x01	; 1
    608e:	3c 01       	movw	r6, r24
    6090:	f6 01       	movw	r30, r12
    6092:	93 81       	ldd	r25, Z+3	; 0x03
    6094:	f7 01       	movw	r30, r14
    6096:	93 fd       	sbrc	r25, 3
    6098:	85 91       	lpm	r24, Z+
    609a:	93 ff       	sbrs	r25, 3
    609c:	81 91       	ld	r24, Z+
    609e:	7f 01       	movw	r14, r30
    60a0:	88 23       	and	r24, r24
    60a2:	09 f4       	brne	.+2      	; 0x60a6 <vfprintf+0x62>
    60a4:	ad c1       	rjmp	.+858    	; 0x6400 <vfprintf+0x3bc>
    60a6:	85 32       	cpi	r24, 0x25	; 37
    60a8:	39 f4       	brne	.+14     	; 0x60b8 <vfprintf+0x74>
    60aa:	93 fd       	sbrc	r25, 3
    60ac:	85 91       	lpm	r24, Z+
    60ae:	93 ff       	sbrs	r25, 3
    60b0:	81 91       	ld	r24, Z+
    60b2:	7f 01       	movw	r14, r30
    60b4:	85 32       	cpi	r24, 0x25	; 37
    60b6:	21 f4       	brne	.+8      	; 0x60c0 <vfprintf+0x7c>
    60b8:	b6 01       	movw	r22, r12
    60ba:	90 e0       	ldi	r25, 0x00	; 0
    60bc:	d6 d1       	rcall	.+940    	; 0x646a <fputc>
    60be:	e8 cf       	rjmp	.-48     	; 0x6090 <vfprintf+0x4c>
    60c0:	91 2c       	mov	r9, r1
    60c2:	21 2c       	mov	r2, r1
    60c4:	31 2c       	mov	r3, r1
    60c6:	ff e1       	ldi	r31, 0x1F	; 31
    60c8:	f3 15       	cp	r31, r3
    60ca:	d8 f0       	brcs	.+54     	; 0x6102 <vfprintf+0xbe>
    60cc:	8b 32       	cpi	r24, 0x2B	; 43
    60ce:	79 f0       	breq	.+30     	; 0x60ee <vfprintf+0xaa>
    60d0:	38 f4       	brcc	.+14     	; 0x60e0 <vfprintf+0x9c>
    60d2:	80 32       	cpi	r24, 0x20	; 32
    60d4:	79 f0       	breq	.+30     	; 0x60f4 <vfprintf+0xb0>
    60d6:	83 32       	cpi	r24, 0x23	; 35
    60d8:	a1 f4       	brne	.+40     	; 0x6102 <vfprintf+0xbe>
    60da:	23 2d       	mov	r18, r3
    60dc:	20 61       	ori	r18, 0x10	; 16
    60de:	1d c0       	rjmp	.+58     	; 0x611a <vfprintf+0xd6>
    60e0:	8d 32       	cpi	r24, 0x2D	; 45
    60e2:	61 f0       	breq	.+24     	; 0x60fc <vfprintf+0xb8>
    60e4:	80 33       	cpi	r24, 0x30	; 48
    60e6:	69 f4       	brne	.+26     	; 0x6102 <vfprintf+0xbe>
    60e8:	23 2d       	mov	r18, r3
    60ea:	21 60       	ori	r18, 0x01	; 1
    60ec:	16 c0       	rjmp	.+44     	; 0x611a <vfprintf+0xd6>
    60ee:	83 2d       	mov	r24, r3
    60f0:	82 60       	ori	r24, 0x02	; 2
    60f2:	38 2e       	mov	r3, r24
    60f4:	e3 2d       	mov	r30, r3
    60f6:	e4 60       	ori	r30, 0x04	; 4
    60f8:	3e 2e       	mov	r3, r30
    60fa:	2a c0       	rjmp	.+84     	; 0x6150 <vfprintf+0x10c>
    60fc:	f3 2d       	mov	r31, r3
    60fe:	f8 60       	ori	r31, 0x08	; 8
    6100:	1d c0       	rjmp	.+58     	; 0x613c <vfprintf+0xf8>
    6102:	37 fc       	sbrc	r3, 7
    6104:	2d c0       	rjmp	.+90     	; 0x6160 <vfprintf+0x11c>
    6106:	20 ed       	ldi	r18, 0xD0	; 208
    6108:	28 0f       	add	r18, r24
    610a:	2a 30       	cpi	r18, 0x0A	; 10
    610c:	40 f0       	brcs	.+16     	; 0x611e <vfprintf+0xda>
    610e:	8e 32       	cpi	r24, 0x2E	; 46
    6110:	b9 f4       	brne	.+46     	; 0x6140 <vfprintf+0xfc>
    6112:	36 fc       	sbrc	r3, 6
    6114:	75 c1       	rjmp	.+746    	; 0x6400 <vfprintf+0x3bc>
    6116:	23 2d       	mov	r18, r3
    6118:	20 64       	ori	r18, 0x40	; 64
    611a:	32 2e       	mov	r3, r18
    611c:	19 c0       	rjmp	.+50     	; 0x6150 <vfprintf+0x10c>
    611e:	36 fe       	sbrs	r3, 6
    6120:	06 c0       	rjmp	.+12     	; 0x612e <vfprintf+0xea>
    6122:	8a e0       	ldi	r24, 0x0A	; 10
    6124:	98 9e       	mul	r9, r24
    6126:	20 0d       	add	r18, r0
    6128:	11 24       	eor	r1, r1
    612a:	92 2e       	mov	r9, r18
    612c:	11 c0       	rjmp	.+34     	; 0x6150 <vfprintf+0x10c>
    612e:	ea e0       	ldi	r30, 0x0A	; 10
    6130:	2e 9e       	mul	r2, r30
    6132:	20 0d       	add	r18, r0
    6134:	11 24       	eor	r1, r1
    6136:	22 2e       	mov	r2, r18
    6138:	f3 2d       	mov	r31, r3
    613a:	f0 62       	ori	r31, 0x20	; 32
    613c:	3f 2e       	mov	r3, r31
    613e:	08 c0       	rjmp	.+16     	; 0x6150 <vfprintf+0x10c>
    6140:	8c 36       	cpi	r24, 0x6C	; 108
    6142:	21 f4       	brne	.+8      	; 0x614c <vfprintf+0x108>
    6144:	83 2d       	mov	r24, r3
    6146:	80 68       	ori	r24, 0x80	; 128
    6148:	38 2e       	mov	r3, r24
    614a:	02 c0       	rjmp	.+4      	; 0x6150 <vfprintf+0x10c>
    614c:	88 36       	cpi	r24, 0x68	; 104
    614e:	41 f4       	brne	.+16     	; 0x6160 <vfprintf+0x11c>
    6150:	f7 01       	movw	r30, r14
    6152:	93 fd       	sbrc	r25, 3
    6154:	85 91       	lpm	r24, Z+
    6156:	93 ff       	sbrs	r25, 3
    6158:	81 91       	ld	r24, Z+
    615a:	7f 01       	movw	r14, r30
    615c:	81 11       	cpse	r24, r1
    615e:	b3 cf       	rjmp	.-154    	; 0x60c6 <vfprintf+0x82>
    6160:	98 2f       	mov	r25, r24
    6162:	9f 7d       	andi	r25, 0xDF	; 223
    6164:	95 54       	subi	r25, 0x45	; 69
    6166:	93 30       	cpi	r25, 0x03	; 3
    6168:	28 f4       	brcc	.+10     	; 0x6174 <vfprintf+0x130>
    616a:	0c 5f       	subi	r16, 0xFC	; 252
    616c:	1f 4f       	sbci	r17, 0xFF	; 255
    616e:	9f e3       	ldi	r25, 0x3F	; 63
    6170:	99 83       	std	Y+1, r25	; 0x01
    6172:	0d c0       	rjmp	.+26     	; 0x618e <vfprintf+0x14a>
    6174:	83 36       	cpi	r24, 0x63	; 99
    6176:	31 f0       	breq	.+12     	; 0x6184 <vfprintf+0x140>
    6178:	83 37       	cpi	r24, 0x73	; 115
    617a:	71 f0       	breq	.+28     	; 0x6198 <vfprintf+0x154>
    617c:	83 35       	cpi	r24, 0x53	; 83
    617e:	09 f0       	breq	.+2      	; 0x6182 <vfprintf+0x13e>
    6180:	55 c0       	rjmp	.+170    	; 0x622c <vfprintf+0x1e8>
    6182:	20 c0       	rjmp	.+64     	; 0x61c4 <vfprintf+0x180>
    6184:	f8 01       	movw	r30, r16
    6186:	80 81       	ld	r24, Z
    6188:	89 83       	std	Y+1, r24	; 0x01
    618a:	0e 5f       	subi	r16, 0xFE	; 254
    618c:	1f 4f       	sbci	r17, 0xFF	; 255
    618e:	88 24       	eor	r8, r8
    6190:	83 94       	inc	r8
    6192:	91 2c       	mov	r9, r1
    6194:	53 01       	movw	r10, r6
    6196:	12 c0       	rjmp	.+36     	; 0x61bc <vfprintf+0x178>
    6198:	28 01       	movw	r4, r16
    619a:	f2 e0       	ldi	r31, 0x02	; 2
    619c:	4f 0e       	add	r4, r31
    619e:	51 1c       	adc	r5, r1
    61a0:	f8 01       	movw	r30, r16
    61a2:	a0 80       	ld	r10, Z
    61a4:	b1 80       	ldd	r11, Z+1	; 0x01
    61a6:	36 fe       	sbrs	r3, 6
    61a8:	03 c0       	rjmp	.+6      	; 0x61b0 <vfprintf+0x16c>
    61aa:	69 2d       	mov	r22, r9
    61ac:	70 e0       	ldi	r23, 0x00	; 0
    61ae:	02 c0       	rjmp	.+4      	; 0x61b4 <vfprintf+0x170>
    61b0:	6f ef       	ldi	r22, 0xFF	; 255
    61b2:	7f ef       	ldi	r23, 0xFF	; 255
    61b4:	c5 01       	movw	r24, r10
    61b6:	4e d1       	rcall	.+668    	; 0x6454 <strnlen>
    61b8:	4c 01       	movw	r8, r24
    61ba:	82 01       	movw	r16, r4
    61bc:	f3 2d       	mov	r31, r3
    61be:	ff 77       	andi	r31, 0x7F	; 127
    61c0:	3f 2e       	mov	r3, r31
    61c2:	15 c0       	rjmp	.+42     	; 0x61ee <vfprintf+0x1aa>
    61c4:	28 01       	movw	r4, r16
    61c6:	22 e0       	ldi	r18, 0x02	; 2
    61c8:	42 0e       	add	r4, r18
    61ca:	51 1c       	adc	r5, r1
    61cc:	f8 01       	movw	r30, r16
    61ce:	a0 80       	ld	r10, Z
    61d0:	b1 80       	ldd	r11, Z+1	; 0x01
    61d2:	36 fe       	sbrs	r3, 6
    61d4:	03 c0       	rjmp	.+6      	; 0x61dc <vfprintf+0x198>
    61d6:	69 2d       	mov	r22, r9
    61d8:	70 e0       	ldi	r23, 0x00	; 0
    61da:	02 c0       	rjmp	.+4      	; 0x61e0 <vfprintf+0x19c>
    61dc:	6f ef       	ldi	r22, 0xFF	; 255
    61de:	7f ef       	ldi	r23, 0xFF	; 255
    61e0:	c5 01       	movw	r24, r10
    61e2:	2d d1       	rcall	.+602    	; 0x643e <strnlen_P>
    61e4:	4c 01       	movw	r8, r24
    61e6:	f3 2d       	mov	r31, r3
    61e8:	f0 68       	ori	r31, 0x80	; 128
    61ea:	3f 2e       	mov	r3, r31
    61ec:	82 01       	movw	r16, r4
    61ee:	33 fc       	sbrc	r3, 3
    61f0:	19 c0       	rjmp	.+50     	; 0x6224 <vfprintf+0x1e0>
    61f2:	82 2d       	mov	r24, r2
    61f4:	90 e0       	ldi	r25, 0x00	; 0
    61f6:	88 16       	cp	r8, r24
    61f8:	99 06       	cpc	r9, r25
    61fa:	a0 f4       	brcc	.+40     	; 0x6224 <vfprintf+0x1e0>
    61fc:	b6 01       	movw	r22, r12
    61fe:	80 e2       	ldi	r24, 0x20	; 32
    6200:	90 e0       	ldi	r25, 0x00	; 0
    6202:	33 d1       	rcall	.+614    	; 0x646a <fputc>
    6204:	2a 94       	dec	r2
    6206:	f5 cf       	rjmp	.-22     	; 0x61f2 <vfprintf+0x1ae>
    6208:	f5 01       	movw	r30, r10
    620a:	37 fc       	sbrc	r3, 7
    620c:	85 91       	lpm	r24, Z+
    620e:	37 fe       	sbrs	r3, 7
    6210:	81 91       	ld	r24, Z+
    6212:	5f 01       	movw	r10, r30
    6214:	b6 01       	movw	r22, r12
    6216:	90 e0       	ldi	r25, 0x00	; 0
    6218:	28 d1       	rcall	.+592    	; 0x646a <fputc>
    621a:	21 10       	cpse	r2, r1
    621c:	2a 94       	dec	r2
    621e:	21 e0       	ldi	r18, 0x01	; 1
    6220:	82 1a       	sub	r8, r18
    6222:	91 08       	sbc	r9, r1
    6224:	81 14       	cp	r8, r1
    6226:	91 04       	cpc	r9, r1
    6228:	79 f7       	brne	.-34     	; 0x6208 <vfprintf+0x1c4>
    622a:	e1 c0       	rjmp	.+450    	; 0x63ee <vfprintf+0x3aa>
    622c:	84 36       	cpi	r24, 0x64	; 100
    622e:	11 f0       	breq	.+4      	; 0x6234 <vfprintf+0x1f0>
    6230:	89 36       	cpi	r24, 0x69	; 105
    6232:	39 f5       	brne	.+78     	; 0x6282 <vfprintf+0x23e>
    6234:	f8 01       	movw	r30, r16
    6236:	37 fe       	sbrs	r3, 7
    6238:	07 c0       	rjmp	.+14     	; 0x6248 <vfprintf+0x204>
    623a:	60 81       	ld	r22, Z
    623c:	71 81       	ldd	r23, Z+1	; 0x01
    623e:	82 81       	ldd	r24, Z+2	; 0x02
    6240:	93 81       	ldd	r25, Z+3	; 0x03
    6242:	0c 5f       	subi	r16, 0xFC	; 252
    6244:	1f 4f       	sbci	r17, 0xFF	; 255
    6246:	08 c0       	rjmp	.+16     	; 0x6258 <vfprintf+0x214>
    6248:	60 81       	ld	r22, Z
    624a:	71 81       	ldd	r23, Z+1	; 0x01
    624c:	07 2e       	mov	r0, r23
    624e:	00 0c       	add	r0, r0
    6250:	88 0b       	sbc	r24, r24
    6252:	99 0b       	sbc	r25, r25
    6254:	0e 5f       	subi	r16, 0xFE	; 254
    6256:	1f 4f       	sbci	r17, 0xFF	; 255
    6258:	f3 2d       	mov	r31, r3
    625a:	ff 76       	andi	r31, 0x6F	; 111
    625c:	3f 2e       	mov	r3, r31
    625e:	97 ff       	sbrs	r25, 7
    6260:	09 c0       	rjmp	.+18     	; 0x6274 <vfprintf+0x230>
    6262:	90 95       	com	r25
    6264:	80 95       	com	r24
    6266:	70 95       	com	r23
    6268:	61 95       	neg	r22
    626a:	7f 4f       	sbci	r23, 0xFF	; 255
    626c:	8f 4f       	sbci	r24, 0xFF	; 255
    626e:	9f 4f       	sbci	r25, 0xFF	; 255
    6270:	f0 68       	ori	r31, 0x80	; 128
    6272:	3f 2e       	mov	r3, r31
    6274:	2a e0       	ldi	r18, 0x0A	; 10
    6276:	30 e0       	ldi	r19, 0x00	; 0
    6278:	a3 01       	movw	r20, r6
    627a:	33 d1       	rcall	.+614    	; 0x64e2 <__ultoa_invert>
    627c:	88 2e       	mov	r8, r24
    627e:	86 18       	sub	r8, r6
    6280:	44 c0       	rjmp	.+136    	; 0x630a <vfprintf+0x2c6>
    6282:	85 37       	cpi	r24, 0x75	; 117
    6284:	31 f4       	brne	.+12     	; 0x6292 <vfprintf+0x24e>
    6286:	23 2d       	mov	r18, r3
    6288:	2f 7e       	andi	r18, 0xEF	; 239
    628a:	b2 2e       	mov	r11, r18
    628c:	2a e0       	ldi	r18, 0x0A	; 10
    628e:	30 e0       	ldi	r19, 0x00	; 0
    6290:	25 c0       	rjmp	.+74     	; 0x62dc <vfprintf+0x298>
    6292:	93 2d       	mov	r25, r3
    6294:	99 7f       	andi	r25, 0xF9	; 249
    6296:	b9 2e       	mov	r11, r25
    6298:	8f 36       	cpi	r24, 0x6F	; 111
    629a:	c1 f0       	breq	.+48     	; 0x62cc <vfprintf+0x288>
    629c:	18 f4       	brcc	.+6      	; 0x62a4 <vfprintf+0x260>
    629e:	88 35       	cpi	r24, 0x58	; 88
    62a0:	79 f0       	breq	.+30     	; 0x62c0 <vfprintf+0x27c>
    62a2:	ae c0       	rjmp	.+348    	; 0x6400 <vfprintf+0x3bc>
    62a4:	80 37       	cpi	r24, 0x70	; 112
    62a6:	19 f0       	breq	.+6      	; 0x62ae <vfprintf+0x26a>
    62a8:	88 37       	cpi	r24, 0x78	; 120
    62aa:	21 f0       	breq	.+8      	; 0x62b4 <vfprintf+0x270>
    62ac:	a9 c0       	rjmp	.+338    	; 0x6400 <vfprintf+0x3bc>
    62ae:	e9 2f       	mov	r30, r25
    62b0:	e0 61       	ori	r30, 0x10	; 16
    62b2:	be 2e       	mov	r11, r30
    62b4:	b4 fe       	sbrs	r11, 4
    62b6:	0d c0       	rjmp	.+26     	; 0x62d2 <vfprintf+0x28e>
    62b8:	fb 2d       	mov	r31, r11
    62ba:	f4 60       	ori	r31, 0x04	; 4
    62bc:	bf 2e       	mov	r11, r31
    62be:	09 c0       	rjmp	.+18     	; 0x62d2 <vfprintf+0x28e>
    62c0:	34 fe       	sbrs	r3, 4
    62c2:	0a c0       	rjmp	.+20     	; 0x62d8 <vfprintf+0x294>
    62c4:	29 2f       	mov	r18, r25
    62c6:	26 60       	ori	r18, 0x06	; 6
    62c8:	b2 2e       	mov	r11, r18
    62ca:	06 c0       	rjmp	.+12     	; 0x62d8 <vfprintf+0x294>
    62cc:	28 e0       	ldi	r18, 0x08	; 8
    62ce:	30 e0       	ldi	r19, 0x00	; 0
    62d0:	05 c0       	rjmp	.+10     	; 0x62dc <vfprintf+0x298>
    62d2:	20 e1       	ldi	r18, 0x10	; 16
    62d4:	30 e0       	ldi	r19, 0x00	; 0
    62d6:	02 c0       	rjmp	.+4      	; 0x62dc <vfprintf+0x298>
    62d8:	20 e1       	ldi	r18, 0x10	; 16
    62da:	32 e0       	ldi	r19, 0x02	; 2
    62dc:	f8 01       	movw	r30, r16
    62de:	b7 fe       	sbrs	r11, 7
    62e0:	07 c0       	rjmp	.+14     	; 0x62f0 <vfprintf+0x2ac>
    62e2:	60 81       	ld	r22, Z
    62e4:	71 81       	ldd	r23, Z+1	; 0x01
    62e6:	82 81       	ldd	r24, Z+2	; 0x02
    62e8:	93 81       	ldd	r25, Z+3	; 0x03
    62ea:	0c 5f       	subi	r16, 0xFC	; 252
    62ec:	1f 4f       	sbci	r17, 0xFF	; 255
    62ee:	06 c0       	rjmp	.+12     	; 0x62fc <vfprintf+0x2b8>
    62f0:	60 81       	ld	r22, Z
    62f2:	71 81       	ldd	r23, Z+1	; 0x01
    62f4:	80 e0       	ldi	r24, 0x00	; 0
    62f6:	90 e0       	ldi	r25, 0x00	; 0
    62f8:	0e 5f       	subi	r16, 0xFE	; 254
    62fa:	1f 4f       	sbci	r17, 0xFF	; 255
    62fc:	a3 01       	movw	r20, r6
    62fe:	f1 d0       	rcall	.+482    	; 0x64e2 <__ultoa_invert>
    6300:	88 2e       	mov	r8, r24
    6302:	86 18       	sub	r8, r6
    6304:	fb 2d       	mov	r31, r11
    6306:	ff 77       	andi	r31, 0x7F	; 127
    6308:	3f 2e       	mov	r3, r31
    630a:	36 fe       	sbrs	r3, 6
    630c:	0d c0       	rjmp	.+26     	; 0x6328 <vfprintf+0x2e4>
    630e:	23 2d       	mov	r18, r3
    6310:	2e 7f       	andi	r18, 0xFE	; 254
    6312:	a2 2e       	mov	r10, r18
    6314:	89 14       	cp	r8, r9
    6316:	58 f4       	brcc	.+22     	; 0x632e <vfprintf+0x2ea>
    6318:	34 fe       	sbrs	r3, 4
    631a:	0b c0       	rjmp	.+22     	; 0x6332 <vfprintf+0x2ee>
    631c:	32 fc       	sbrc	r3, 2
    631e:	09 c0       	rjmp	.+18     	; 0x6332 <vfprintf+0x2ee>
    6320:	83 2d       	mov	r24, r3
    6322:	8e 7e       	andi	r24, 0xEE	; 238
    6324:	a8 2e       	mov	r10, r24
    6326:	05 c0       	rjmp	.+10     	; 0x6332 <vfprintf+0x2ee>
    6328:	b8 2c       	mov	r11, r8
    632a:	a3 2c       	mov	r10, r3
    632c:	03 c0       	rjmp	.+6      	; 0x6334 <vfprintf+0x2f0>
    632e:	b8 2c       	mov	r11, r8
    6330:	01 c0       	rjmp	.+2      	; 0x6334 <vfprintf+0x2f0>
    6332:	b9 2c       	mov	r11, r9
    6334:	a4 fe       	sbrs	r10, 4
    6336:	0f c0       	rjmp	.+30     	; 0x6356 <vfprintf+0x312>
    6338:	fe 01       	movw	r30, r28
    633a:	e8 0d       	add	r30, r8
    633c:	f1 1d       	adc	r31, r1
    633e:	80 81       	ld	r24, Z
    6340:	80 33       	cpi	r24, 0x30	; 48
    6342:	21 f4       	brne	.+8      	; 0x634c <vfprintf+0x308>
    6344:	9a 2d       	mov	r25, r10
    6346:	99 7e       	andi	r25, 0xE9	; 233
    6348:	a9 2e       	mov	r10, r25
    634a:	09 c0       	rjmp	.+18     	; 0x635e <vfprintf+0x31a>
    634c:	a2 fe       	sbrs	r10, 2
    634e:	06 c0       	rjmp	.+12     	; 0x635c <vfprintf+0x318>
    6350:	b3 94       	inc	r11
    6352:	b3 94       	inc	r11
    6354:	04 c0       	rjmp	.+8      	; 0x635e <vfprintf+0x31a>
    6356:	8a 2d       	mov	r24, r10
    6358:	86 78       	andi	r24, 0x86	; 134
    635a:	09 f0       	breq	.+2      	; 0x635e <vfprintf+0x31a>
    635c:	b3 94       	inc	r11
    635e:	a3 fc       	sbrc	r10, 3
    6360:	10 c0       	rjmp	.+32     	; 0x6382 <vfprintf+0x33e>
    6362:	a0 fe       	sbrs	r10, 0
    6364:	06 c0       	rjmp	.+12     	; 0x6372 <vfprintf+0x32e>
    6366:	b2 14       	cp	r11, r2
    6368:	80 f4       	brcc	.+32     	; 0x638a <vfprintf+0x346>
    636a:	28 0c       	add	r2, r8
    636c:	92 2c       	mov	r9, r2
    636e:	9b 18       	sub	r9, r11
    6370:	0d c0       	rjmp	.+26     	; 0x638c <vfprintf+0x348>
    6372:	b2 14       	cp	r11, r2
    6374:	58 f4       	brcc	.+22     	; 0x638c <vfprintf+0x348>
    6376:	b6 01       	movw	r22, r12
    6378:	80 e2       	ldi	r24, 0x20	; 32
    637a:	90 e0       	ldi	r25, 0x00	; 0
    637c:	76 d0       	rcall	.+236    	; 0x646a <fputc>
    637e:	b3 94       	inc	r11
    6380:	f8 cf       	rjmp	.-16     	; 0x6372 <vfprintf+0x32e>
    6382:	b2 14       	cp	r11, r2
    6384:	18 f4       	brcc	.+6      	; 0x638c <vfprintf+0x348>
    6386:	2b 18       	sub	r2, r11
    6388:	02 c0       	rjmp	.+4      	; 0x638e <vfprintf+0x34a>
    638a:	98 2c       	mov	r9, r8
    638c:	21 2c       	mov	r2, r1
    638e:	a4 fe       	sbrs	r10, 4
    6390:	0f c0       	rjmp	.+30     	; 0x63b0 <vfprintf+0x36c>
    6392:	b6 01       	movw	r22, r12
    6394:	80 e3       	ldi	r24, 0x30	; 48
    6396:	90 e0       	ldi	r25, 0x00	; 0
    6398:	68 d0       	rcall	.+208    	; 0x646a <fputc>
    639a:	a2 fe       	sbrs	r10, 2
    639c:	16 c0       	rjmp	.+44     	; 0x63ca <vfprintf+0x386>
    639e:	a1 fc       	sbrc	r10, 1
    63a0:	03 c0       	rjmp	.+6      	; 0x63a8 <vfprintf+0x364>
    63a2:	88 e7       	ldi	r24, 0x78	; 120
    63a4:	90 e0       	ldi	r25, 0x00	; 0
    63a6:	02 c0       	rjmp	.+4      	; 0x63ac <vfprintf+0x368>
    63a8:	88 e5       	ldi	r24, 0x58	; 88
    63aa:	90 e0       	ldi	r25, 0x00	; 0
    63ac:	b6 01       	movw	r22, r12
    63ae:	0c c0       	rjmp	.+24     	; 0x63c8 <vfprintf+0x384>
    63b0:	8a 2d       	mov	r24, r10
    63b2:	86 78       	andi	r24, 0x86	; 134
    63b4:	51 f0       	breq	.+20     	; 0x63ca <vfprintf+0x386>
    63b6:	a1 fe       	sbrs	r10, 1
    63b8:	02 c0       	rjmp	.+4      	; 0x63be <vfprintf+0x37a>
    63ba:	8b e2       	ldi	r24, 0x2B	; 43
    63bc:	01 c0       	rjmp	.+2      	; 0x63c0 <vfprintf+0x37c>
    63be:	80 e2       	ldi	r24, 0x20	; 32
    63c0:	a7 fc       	sbrc	r10, 7
    63c2:	8d e2       	ldi	r24, 0x2D	; 45
    63c4:	b6 01       	movw	r22, r12
    63c6:	90 e0       	ldi	r25, 0x00	; 0
    63c8:	50 d0       	rcall	.+160    	; 0x646a <fputc>
    63ca:	89 14       	cp	r8, r9
    63cc:	30 f4       	brcc	.+12     	; 0x63da <vfprintf+0x396>
    63ce:	b6 01       	movw	r22, r12
    63d0:	80 e3       	ldi	r24, 0x30	; 48
    63d2:	90 e0       	ldi	r25, 0x00	; 0
    63d4:	4a d0       	rcall	.+148    	; 0x646a <fputc>
    63d6:	9a 94       	dec	r9
    63d8:	f8 cf       	rjmp	.-16     	; 0x63ca <vfprintf+0x386>
    63da:	8a 94       	dec	r8
    63dc:	f3 01       	movw	r30, r6
    63de:	e8 0d       	add	r30, r8
    63e0:	f1 1d       	adc	r31, r1
    63e2:	80 81       	ld	r24, Z
    63e4:	b6 01       	movw	r22, r12
    63e6:	90 e0       	ldi	r25, 0x00	; 0
    63e8:	40 d0       	rcall	.+128    	; 0x646a <fputc>
    63ea:	81 10       	cpse	r8, r1
    63ec:	f6 cf       	rjmp	.-20     	; 0x63da <vfprintf+0x396>
    63ee:	22 20       	and	r2, r2
    63f0:	09 f4       	brne	.+2      	; 0x63f4 <vfprintf+0x3b0>
    63f2:	4e ce       	rjmp	.-868    	; 0x6090 <vfprintf+0x4c>
    63f4:	b6 01       	movw	r22, r12
    63f6:	80 e2       	ldi	r24, 0x20	; 32
    63f8:	90 e0       	ldi	r25, 0x00	; 0
    63fa:	37 d0       	rcall	.+110    	; 0x646a <fputc>
    63fc:	2a 94       	dec	r2
    63fe:	f7 cf       	rjmp	.-18     	; 0x63ee <vfprintf+0x3aa>
    6400:	f6 01       	movw	r30, r12
    6402:	86 81       	ldd	r24, Z+6	; 0x06
    6404:	97 81       	ldd	r25, Z+7	; 0x07
    6406:	02 c0       	rjmp	.+4      	; 0x640c <vfprintf+0x3c8>
    6408:	8f ef       	ldi	r24, 0xFF	; 255
    640a:	9f ef       	ldi	r25, 0xFF	; 255
    640c:	2b 96       	adiw	r28, 0x0b	; 11
    640e:	0f b6       	in	r0, 0x3f	; 63
    6410:	f8 94       	cli
    6412:	de bf       	out	0x3e, r29	; 62
    6414:	0f be       	out	0x3f, r0	; 63
    6416:	cd bf       	out	0x3d, r28	; 61
    6418:	df 91       	pop	r29
    641a:	cf 91       	pop	r28
    641c:	1f 91       	pop	r17
    641e:	0f 91       	pop	r16
    6420:	ff 90       	pop	r15
    6422:	ef 90       	pop	r14
    6424:	df 90       	pop	r13
    6426:	cf 90       	pop	r12
    6428:	bf 90       	pop	r11
    642a:	af 90       	pop	r10
    642c:	9f 90       	pop	r9
    642e:	8f 90       	pop	r8
    6430:	7f 90       	pop	r7
    6432:	6f 90       	pop	r6
    6434:	5f 90       	pop	r5
    6436:	4f 90       	pop	r4
    6438:	3f 90       	pop	r3
    643a:	2f 90       	pop	r2
    643c:	08 95       	ret

0000643e <strnlen_P>:
    643e:	fc 01       	movw	r30, r24
    6440:	05 90       	lpm	r0, Z+
    6442:	61 50       	subi	r22, 0x01	; 1
    6444:	70 40       	sbci	r23, 0x00	; 0
    6446:	01 10       	cpse	r0, r1
    6448:	d8 f7       	brcc	.-10     	; 0x6440 <strnlen_P+0x2>
    644a:	80 95       	com	r24
    644c:	90 95       	com	r25
    644e:	8e 0f       	add	r24, r30
    6450:	9f 1f       	adc	r25, r31
    6452:	08 95       	ret

00006454 <strnlen>:
    6454:	fc 01       	movw	r30, r24
    6456:	61 50       	subi	r22, 0x01	; 1
    6458:	70 40       	sbci	r23, 0x00	; 0
    645a:	01 90       	ld	r0, Z+
    645c:	01 10       	cpse	r0, r1
    645e:	d8 f7       	brcc	.-10     	; 0x6456 <strnlen+0x2>
    6460:	80 95       	com	r24
    6462:	90 95       	com	r25
    6464:	8e 0f       	add	r24, r30
    6466:	9f 1f       	adc	r25, r31
    6468:	08 95       	ret

0000646a <fputc>:
    646a:	0f 93       	push	r16
    646c:	1f 93       	push	r17
    646e:	cf 93       	push	r28
    6470:	df 93       	push	r29
    6472:	fb 01       	movw	r30, r22
    6474:	23 81       	ldd	r18, Z+3	; 0x03
    6476:	21 fd       	sbrc	r18, 1
    6478:	03 c0       	rjmp	.+6      	; 0x6480 <fputc+0x16>
    647a:	8f ef       	ldi	r24, 0xFF	; 255
    647c:	9f ef       	ldi	r25, 0xFF	; 255
    647e:	2c c0       	rjmp	.+88     	; 0x64d8 <fputc+0x6e>
    6480:	22 ff       	sbrs	r18, 2
    6482:	16 c0       	rjmp	.+44     	; 0x64b0 <fputc+0x46>
    6484:	46 81       	ldd	r20, Z+6	; 0x06
    6486:	57 81       	ldd	r21, Z+7	; 0x07
    6488:	24 81       	ldd	r18, Z+4	; 0x04
    648a:	35 81       	ldd	r19, Z+5	; 0x05
    648c:	42 17       	cp	r20, r18
    648e:	53 07       	cpc	r21, r19
    6490:	44 f4       	brge	.+16     	; 0x64a2 <fputc+0x38>
    6492:	a0 81       	ld	r26, Z
    6494:	b1 81       	ldd	r27, Z+1	; 0x01
    6496:	9d 01       	movw	r18, r26
    6498:	2f 5f       	subi	r18, 0xFF	; 255
    649a:	3f 4f       	sbci	r19, 0xFF	; 255
    649c:	31 83       	std	Z+1, r19	; 0x01
    649e:	20 83       	st	Z, r18
    64a0:	8c 93       	st	X, r24
    64a2:	26 81       	ldd	r18, Z+6	; 0x06
    64a4:	37 81       	ldd	r19, Z+7	; 0x07
    64a6:	2f 5f       	subi	r18, 0xFF	; 255
    64a8:	3f 4f       	sbci	r19, 0xFF	; 255
    64aa:	37 83       	std	Z+7, r19	; 0x07
    64ac:	26 83       	std	Z+6, r18	; 0x06
    64ae:	14 c0       	rjmp	.+40     	; 0x64d8 <fputc+0x6e>
    64b0:	8b 01       	movw	r16, r22
    64b2:	ec 01       	movw	r28, r24
    64b4:	fb 01       	movw	r30, r22
    64b6:	00 84       	ldd	r0, Z+8	; 0x08
    64b8:	f1 85       	ldd	r31, Z+9	; 0x09
    64ba:	e0 2d       	mov	r30, r0
    64bc:	19 95       	eicall
    64be:	89 2b       	or	r24, r25
    64c0:	e1 f6       	brne	.-72     	; 0x647a <fputc+0x10>
    64c2:	d8 01       	movw	r26, r16
    64c4:	16 96       	adiw	r26, 0x06	; 6
    64c6:	8d 91       	ld	r24, X+
    64c8:	9c 91       	ld	r25, X
    64ca:	17 97       	sbiw	r26, 0x07	; 7
    64cc:	01 96       	adiw	r24, 0x01	; 1
    64ce:	17 96       	adiw	r26, 0x07	; 7
    64d0:	9c 93       	st	X, r25
    64d2:	8e 93       	st	-X, r24
    64d4:	16 97       	sbiw	r26, 0x06	; 6
    64d6:	ce 01       	movw	r24, r28
    64d8:	df 91       	pop	r29
    64da:	cf 91       	pop	r28
    64dc:	1f 91       	pop	r17
    64de:	0f 91       	pop	r16
    64e0:	08 95       	ret

000064e2 <__ultoa_invert>:
    64e2:	fa 01       	movw	r30, r20
    64e4:	aa 27       	eor	r26, r26
    64e6:	28 30       	cpi	r18, 0x08	; 8
    64e8:	51 f1       	breq	.+84     	; 0x653e <__ultoa_invert+0x5c>
    64ea:	20 31       	cpi	r18, 0x10	; 16
    64ec:	81 f1       	breq	.+96     	; 0x654e <__ultoa_invert+0x6c>
    64ee:	e8 94       	clt
    64f0:	6f 93       	push	r22
    64f2:	6e 7f       	andi	r22, 0xFE	; 254
    64f4:	6e 5f       	subi	r22, 0xFE	; 254
    64f6:	7f 4f       	sbci	r23, 0xFF	; 255
    64f8:	8f 4f       	sbci	r24, 0xFF	; 255
    64fa:	9f 4f       	sbci	r25, 0xFF	; 255
    64fc:	af 4f       	sbci	r26, 0xFF	; 255
    64fe:	b1 e0       	ldi	r27, 0x01	; 1
    6500:	3e d0       	rcall	.+124    	; 0x657e <__ultoa_invert+0x9c>
    6502:	b4 e0       	ldi	r27, 0x04	; 4
    6504:	3c d0       	rcall	.+120    	; 0x657e <__ultoa_invert+0x9c>
    6506:	67 0f       	add	r22, r23
    6508:	78 1f       	adc	r23, r24
    650a:	89 1f       	adc	r24, r25
    650c:	9a 1f       	adc	r25, r26
    650e:	a1 1d       	adc	r26, r1
    6510:	68 0f       	add	r22, r24
    6512:	79 1f       	adc	r23, r25
    6514:	8a 1f       	adc	r24, r26
    6516:	91 1d       	adc	r25, r1
    6518:	a1 1d       	adc	r26, r1
    651a:	6a 0f       	add	r22, r26
    651c:	71 1d       	adc	r23, r1
    651e:	81 1d       	adc	r24, r1
    6520:	91 1d       	adc	r25, r1
    6522:	a1 1d       	adc	r26, r1
    6524:	20 d0       	rcall	.+64     	; 0x6566 <__ultoa_invert+0x84>
    6526:	09 f4       	brne	.+2      	; 0x652a <__ultoa_invert+0x48>
    6528:	68 94       	set
    652a:	3f 91       	pop	r19
    652c:	2a e0       	ldi	r18, 0x0A	; 10
    652e:	26 9f       	mul	r18, r22
    6530:	11 24       	eor	r1, r1
    6532:	30 19       	sub	r19, r0
    6534:	30 5d       	subi	r19, 0xD0	; 208
    6536:	31 93       	st	Z+, r19
    6538:	de f6       	brtc	.-74     	; 0x64f0 <__ultoa_invert+0xe>
    653a:	cf 01       	movw	r24, r30
    653c:	08 95       	ret
    653e:	46 2f       	mov	r20, r22
    6540:	47 70       	andi	r20, 0x07	; 7
    6542:	40 5d       	subi	r20, 0xD0	; 208
    6544:	41 93       	st	Z+, r20
    6546:	b3 e0       	ldi	r27, 0x03	; 3
    6548:	0f d0       	rcall	.+30     	; 0x6568 <__ultoa_invert+0x86>
    654a:	c9 f7       	brne	.-14     	; 0x653e <__ultoa_invert+0x5c>
    654c:	f6 cf       	rjmp	.-20     	; 0x653a <__ultoa_invert+0x58>
    654e:	46 2f       	mov	r20, r22
    6550:	4f 70       	andi	r20, 0x0F	; 15
    6552:	40 5d       	subi	r20, 0xD0	; 208
    6554:	4a 33       	cpi	r20, 0x3A	; 58
    6556:	18 f0       	brcs	.+6      	; 0x655e <__ultoa_invert+0x7c>
    6558:	49 5d       	subi	r20, 0xD9	; 217
    655a:	31 fd       	sbrc	r19, 1
    655c:	40 52       	subi	r20, 0x20	; 32
    655e:	41 93       	st	Z+, r20
    6560:	02 d0       	rcall	.+4      	; 0x6566 <__ultoa_invert+0x84>
    6562:	a9 f7       	brne	.-22     	; 0x654e <__ultoa_invert+0x6c>
    6564:	ea cf       	rjmp	.-44     	; 0x653a <__ultoa_invert+0x58>
    6566:	b4 e0       	ldi	r27, 0x04	; 4
    6568:	a6 95       	lsr	r26
    656a:	97 95       	ror	r25
    656c:	87 95       	ror	r24
    656e:	77 95       	ror	r23
    6570:	67 95       	ror	r22
    6572:	ba 95       	dec	r27
    6574:	c9 f7       	brne	.-14     	; 0x6568 <__ultoa_invert+0x86>
    6576:	00 97       	sbiw	r24, 0x00	; 0
    6578:	61 05       	cpc	r22, r1
    657a:	71 05       	cpc	r23, r1
    657c:	08 95       	ret
    657e:	9b 01       	movw	r18, r22
    6580:	ac 01       	movw	r20, r24
    6582:	0a 2e       	mov	r0, r26
    6584:	06 94       	lsr	r0
    6586:	57 95       	ror	r21
    6588:	47 95       	ror	r20
    658a:	37 95       	ror	r19
    658c:	27 95       	ror	r18
    658e:	ba 95       	dec	r27
    6590:	c9 f7       	brne	.-14     	; 0x6584 <__ultoa_invert+0xa2>
    6592:	62 0f       	add	r22, r18
    6594:	73 1f       	adc	r23, r19
    6596:	84 1f       	adc	r24, r20
    6598:	95 1f       	adc	r25, r21
    659a:	a0 1d       	adc	r26, r0
    659c:	08 95       	ret

0000659e <_exit>:
    659e:	f8 94       	cli

000065a0 <__stop_program>:
    65a0:	ff cf       	rjmp	.-2      	; 0x65a0 <__stop_program>
