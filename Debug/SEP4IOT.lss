
SEP4IOT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000684  00800200  00005e9c  00005f30  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005e9c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000128f  00800884  00800884  000065b4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000065b4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006610  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000b80  00000000  00000000  00006650  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000e6fb  00000000  00000000  000071d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003a9d  00000000  00000000  000158cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00006d98  00000000  00000000  00019368  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002844  00000000  00000000  00020100  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000044dc  00000000  00000000  00022944  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000d63d  00000000  00000000  00026e20  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000ba0  00000000  00000000  0003445d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	4f c2       	rjmp	.+1182   	; 0x4a0 <__ctors_end>
       2:	00 00       	nop
       4:	6e c2       	rjmp	.+1244   	; 0x4e2 <__bad_interrupt>
       6:	00 00       	nop
       8:	6c c2       	rjmp	.+1240   	; 0x4e2 <__bad_interrupt>
       a:	00 00       	nop
       c:	6a c2       	rjmp	.+1236   	; 0x4e2 <__bad_interrupt>
       e:	00 00       	nop
      10:	68 c2       	rjmp	.+1232   	; 0x4e2 <__bad_interrupt>
      12:	00 00       	nop
      14:	66 c2       	rjmp	.+1228   	; 0x4e2 <__bad_interrupt>
      16:	00 00       	nop
      18:	64 c2       	rjmp	.+1224   	; 0x4e2 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	62 c2       	rjmp	.+1220   	; 0x4e2 <__bad_interrupt>
      1e:	00 00       	nop
      20:	60 c2       	rjmp	.+1216   	; 0x4e2 <__bad_interrupt>
      22:	00 00       	nop
      24:	5e c2       	rjmp	.+1212   	; 0x4e2 <__bad_interrupt>
      26:	00 00       	nop
      28:	5c c2       	rjmp	.+1208   	; 0x4e2 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	5a c2       	rjmp	.+1204   	; 0x4e2 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 1c 0c 	jmp	0x1838	; 0x1838 <__vector_12>
      34:	56 c2       	rjmp	.+1196   	; 0x4e2 <__bad_interrupt>
      36:	00 00       	nop
      38:	54 c2       	rjmp	.+1192   	; 0x4e2 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	52 c2       	rjmp	.+1188   	; 0x4e2 <__bad_interrupt>
      3e:	00 00       	nop
      40:	50 c2       	rjmp	.+1184   	; 0x4e2 <__bad_interrupt>
      42:	00 00       	nop
      44:	4e c2       	rjmp	.+1180   	; 0x4e2 <__bad_interrupt>
      46:	00 00       	nop
      48:	4c c2       	rjmp	.+1176   	; 0x4e2 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	4a c2       	rjmp	.+1172   	; 0x4e2 <__bad_interrupt>
      4e:	00 00       	nop
      50:	48 c2       	rjmp	.+1168   	; 0x4e2 <__bad_interrupt>
      52:	00 00       	nop
      54:	46 c2       	rjmp	.+1164   	; 0x4e2 <__bad_interrupt>
      56:	00 00       	nop
      58:	44 c2       	rjmp	.+1160   	; 0x4e2 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	42 c2       	rjmp	.+1156   	; 0x4e2 <__bad_interrupt>
      5e:	00 00       	nop
      60:	40 c2       	rjmp	.+1152   	; 0x4e2 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 1e 24 	jmp	0x483c	; 0x483c <__vector_25>
      68:	0c 94 70 24 	jmp	0x48e0	; 0x48e0 <__vector_26>
      6c:	3a c2       	rjmp	.+1140   	; 0x4e2 <__bad_interrupt>
      6e:	00 00       	nop
      70:	38 c2       	rjmp	.+1136   	; 0x4e2 <__bad_interrupt>
      72:	00 00       	nop
      74:	36 c2       	rjmp	.+1132   	; 0x4e2 <__bad_interrupt>
      76:	00 00       	nop
      78:	34 c2       	rjmp	.+1128   	; 0x4e2 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	32 c2       	rjmp	.+1124   	; 0x4e2 <__bad_interrupt>
      7e:	00 00       	nop
      80:	30 c2       	rjmp	.+1120   	; 0x4e2 <__bad_interrupt>
      82:	00 00       	nop
      84:	2e c2       	rjmp	.+1116   	; 0x4e2 <__bad_interrupt>
      86:	00 00       	nop
      88:	2c c2       	rjmp	.+1112   	; 0x4e2 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	2a c2       	rjmp	.+1108   	; 0x4e2 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 b4 24 	jmp	0x4968	; 0x4968 <__vector_36>
      94:	0c 94 06 25 	jmp	0x4a0c	; 0x4a0c <__vector_37>
      98:	24 c2       	rjmp	.+1096   	; 0x4e2 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 9e 27 	jmp	0x4f3c	; 0x4f3c <__vector_39>
      a0:	20 c2       	rjmp	.+1088   	; 0x4e2 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	1e c2       	rjmp	.+1084   	; 0x4e2 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	1c c2       	rjmp	.+1080   	; 0x4e2 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	1a c2       	rjmp	.+1076   	; 0x4e2 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	18 c2       	rjmp	.+1072   	; 0x4e2 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	16 c2       	rjmp	.+1068   	; 0x4e2 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	14 c2       	rjmp	.+1064   	; 0x4e2 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	12 c2       	rjmp	.+1060   	; 0x4e2 <__bad_interrupt>
      be:	00 00       	nop
      c0:	10 c2       	rjmp	.+1056   	; 0x4e2 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	0e c2       	rjmp	.+1052   	; 0x4e2 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	0c c2       	rjmp	.+1048   	; 0x4e2 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 4a 25 	jmp	0x4a94	; 0x4a94 <__vector_51>
      d0:	0c 94 9c 25 	jmp	0x4b38	; 0x4b38 <__vector_52>
      d4:	06 c2       	rjmp	.+1036   	; 0x4e2 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 e0 25 	jmp	0x4bc0	; 0x4bc0 <__vector_54>
      dc:	0c 94 32 26 	jmp	0x4c64	; 0x4c64 <__vector_55>
      e0:	00 c2       	rjmp	.+1024   	; 0x4e2 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	c6 01       	movw	r24, r12
      e6:	c6 01       	movw	r24, r12
      e8:	c6 01       	movw	r24, r12
      ea:	00 02       	muls	r16, r16
      ec:	08 02       	muls	r16, r24
      ee:	1e 02       	muls	r17, r30
      f0:	c6 01       	movw	r24, r12
      f2:	c6 01       	movw	r24, r12
      f4:	00 02       	muls	r16, r16
      f6:	08 02       	muls	r16, r24
      f8:	c0 27       	eor	r28, r16
      fa:	30 28       	or	r3, r0
      fc:	30 28       	or	r3, r0
      fe:	30 28       	or	r3, r0
     100:	30 28       	or	r3, r0
     102:	30 28       	or	r3, r0
     104:	30 28       	or	r3, r0
     106:	30 28       	or	r3, r0
     108:	c0 27       	eor	r28, r16
     10a:	30 28       	or	r3, r0
     10c:	30 28       	or	r3, r0
     10e:	30 28       	or	r3, r0
     110:	30 28       	or	r3, r0
     112:	30 28       	or	r3, r0
     114:	30 28       	or	r3, r0
     116:	30 28       	or	r3, r0
     118:	c2 27       	eor	r28, r18
     11a:	30 28       	or	r3, r0
     11c:	30 28       	or	r3, r0
     11e:	30 28       	or	r3, r0
     120:	30 28       	or	r3, r0
     122:	30 28       	or	r3, r0
     124:	30 28       	or	r3, r0
     126:	30 28       	or	r3, r0
     128:	30 28       	or	r3, r0
     12a:	30 28       	or	r3, r0
     12c:	30 28       	or	r3, r0
     12e:	30 28       	or	r3, r0
     130:	30 28       	or	r3, r0
     132:	30 28       	or	r3, r0
     134:	30 28       	or	r3, r0
     136:	30 28       	or	r3, r0
     138:	c2 27       	eor	r28, r18
     13a:	30 28       	or	r3, r0
     13c:	30 28       	or	r3, r0
     13e:	30 28       	or	r3, r0
     140:	30 28       	or	r3, r0
     142:	30 28       	or	r3, r0
     144:	30 28       	or	r3, r0
     146:	30 28       	or	r3, r0
     148:	30 28       	or	r3, r0
     14a:	30 28       	or	r3, r0
     14c:	30 28       	or	r3, r0
     14e:	30 28       	or	r3, r0
     150:	30 28       	or	r3, r0
     152:	30 28       	or	r3, r0
     154:	30 28       	or	r3, r0
     156:	30 28       	or	r3, r0
     158:	2c 28       	or	r2, r12
     15a:	30 28       	or	r3, r0
     15c:	30 28       	or	r3, r0
     15e:	30 28       	or	r3, r0
     160:	30 28       	or	r3, r0
     162:	30 28       	or	r3, r0
     164:	30 28       	or	r3, r0
     166:	30 28       	or	r3, r0
     168:	f7 27       	eor	r31, r23
     16a:	30 28       	or	r3, r0
     16c:	30 28       	or	r3, r0
     16e:	30 28       	or	r3, r0
     170:	30 28       	or	r3, r0
     172:	30 28       	or	r3, r0
     174:	30 28       	or	r3, r0
     176:	30 28       	or	r3, r0
     178:	30 28       	or	r3, r0
     17a:	30 28       	or	r3, r0
     17c:	30 28       	or	r3, r0
     17e:	30 28       	or	r3, r0
     180:	30 28       	or	r3, r0
     182:	30 28       	or	r3, r0
     184:	30 28       	or	r3, r0
     186:	30 28       	or	r3, r0
     188:	eb 27       	eor	r30, r27
     18a:	30 28       	or	r3, r0
     18c:	30 28       	or	r3, r0
     18e:	30 28       	or	r3, r0
     190:	30 28       	or	r3, r0
     192:	30 28       	or	r3, r0
     194:	30 28       	or	r3, r0
     196:	30 28       	or	r3, r0
     198:	0f 28       	or	r0, r15

0000019a <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     19a:	04 e0       	ldi	r16, 0x04	; 4
     19c:	19 e1       	ldi	r17, 0x19	; 25
     19e:	0f 2e       	mov	r0, r31
     1a0:	f4 e3       	ldi	r31, 0x34	; 52
     1a2:	ef 2e       	mov	r14, r31
     1a4:	f9 e1       	ldi	r31, 0x19	; 25
     1a6:	ff 2e       	mov	r15, r31
     1a8:	f0 2d       	mov	r31, r0
     1aa:	80 91 03 19 	lds	r24, 0x1903	; 0x801903 <uxDeletedTasksWaitingCleanUp>
     1ae:	88 23       	and	r24, r24
     1b0:	29 f1       	breq	.+74     	; 0x1fc <prvIdleTask+0x62>
     1b2:	0f b6       	in	r0, 0x3f	; 63
     1b4:	f8 94       	cli
     1b6:	0f 92       	push	r0
     1b8:	d8 01       	movw	r26, r16
     1ba:	17 96       	adiw	r26, 0x07	; 7
     1bc:	ed 91       	ld	r30, X+
     1be:	fc 91       	ld	r31, X
     1c0:	18 97       	sbiw	r26, 0x08	; 8
     1c2:	c0 85       	ldd	r28, Z+8	; 0x08
     1c4:	d1 85       	ldd	r29, Z+9	; 0x09
     1c6:	ce 01       	movw	r24, r28
     1c8:	02 96       	adiw	r24, 0x02	; 2
     1ca:	0e 94 81 0a 	call	0x1502	; 0x1502 <uxListRemove>
     1ce:	80 91 f7 18 	lds	r24, 0x18F7	; 0x8018f7 <uxCurrentNumberOfTasks>
     1d2:	81 50       	subi	r24, 0x01	; 1
     1d4:	80 93 f7 18 	sts	0x18F7, r24	; 0x8018f7 <uxCurrentNumberOfTasks>
     1d8:	80 91 03 19 	lds	r24, 0x1903	; 0x801903 <uxDeletedTasksWaitingCleanUp>
     1dc:	81 50       	subi	r24, 0x01	; 1
     1de:	80 93 03 19 	sts	0x1903, r24	; 0x801903 <uxDeletedTasksWaitingCleanUp>
     1e2:	0f 90       	pop	r0
     1e4:	0f be       	out	0x3f, r0	; 63
     1e6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     1e8:	9c 8d       	ldd	r25, Y+28	; 0x1c
     1ea:	0e 94 dd 09 	call	0x13ba	; 0x13ba <vPortFree>
     1ee:	ce 01       	movw	r24, r28
     1f0:	0e 94 dd 09 	call	0x13ba	; 0x13ba <vPortFree>
     1f4:	80 91 03 19 	lds	r24, 0x1903	; 0x801903 <uxDeletedTasksWaitingCleanUp>
     1f8:	81 11       	cpse	r24, r1
     1fa:	db cf       	rjmp	.-74     	; 0x1b2 <prvIdleTask+0x18>
     1fc:	f7 01       	movw	r30, r14
     1fe:	80 81       	ld	r24, Z
     200:	82 30       	cpi	r24, 0x02	; 2
     202:	10 f0       	brcs	.+4      	; 0x208 <prvIdleTask+0x6e>
     204:	0e 94 56 0b 	call	0x16ac	; 0x16ac <vPortYield>
     208:	0e 94 d0 1a 	call	0x35a0	; 0x35a0 <vApplicationIdleHook>
     20c:	ce cf       	rjmp	.-100    	; 0x1aa <prvIdleTask+0x10>

0000020e <prvTimerTask>:
            pxNewTimer->ucStatus = 0x00;
            prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
        }

        return pxNewTimer;
    }
     20e:	cf 93       	push	r28
     210:	df 93       	push	r29
     212:	cd b7       	in	r28, 0x3d	; 61
     214:	de b7       	in	r29, 0x3e	; 62
     216:	60 97       	sbiw	r28, 0x10	; 16
     218:	0f b6       	in	r0, 0x3f	; 63
     21a:	f8 94       	cli
     21c:	de bf       	out	0x3e, r29	; 62
     21e:	0f be       	out	0x3f, r0	; 63
     220:	cd bf       	out	0x3d, r28	; 61
     222:	ce 01       	movw	r24, r28
     224:	01 96       	adiw	r24, 0x01	; 1
     226:	9a 87       	std	Y+10, r25	; 0x0a
     228:	89 87       	std	Y+9, r24	; 0x09
     22a:	81 2c       	mov	r8, r1
     22c:	91 2c       	mov	r9, r1
     22e:	a1 2c       	mov	r10, r1
     230:	b1 2c       	mov	r11, r1
     232:	69 84       	ldd	r6, Y+9	; 0x09
     234:	7a 84       	ldd	r7, Y+10	; 0x0a
     236:	e0 91 6c 19 	lds	r30, 0x196C	; 0x80196c <pxCurrentTimerList>
     23a:	f0 91 6d 19 	lds	r31, 0x196D	; 0x80196d <pxCurrentTimerList+0x1>
     23e:	80 81       	ld	r24, Z
     240:	88 23       	and	r24, r24
     242:	09 f4       	brne	.+2      	; 0x246 <prvTimerTask+0x38>
     244:	13 c1       	rjmp	.+550    	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
     246:	07 80       	ldd	r0, Z+7	; 0x07
     248:	f0 85       	ldd	r31, Z+8	; 0x08
     24a:	e0 2d       	mov	r30, r0
     24c:	20 80       	ld	r2, Z
     24e:	31 80       	ldd	r3, Z+1	; 0x01
     250:	42 80       	ldd	r4, Z+2	; 0x02
     252:	53 80       	ldd	r5, Z+3	; 0x03
     254:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <vTaskSuspendAll>
     258:	ce 01       	movw	r24, r28
     25a:	01 96       	adiw	r24, 0x01	; 1
     25c:	0e 94 3a 1a 	call	0x3474	; 0x3474 <prvSampleTimeNow>
     260:	6b 87       	std	Y+11, r22	; 0x0b
     262:	7c 87       	std	Y+12, r23	; 0x0c
     264:	8d 87       	std	Y+13, r24	; 0x0d
     266:	9e 87       	std	Y+14, r25	; 0x0e
     268:	89 81       	ldd	r24, Y+1	; 0x01
     26a:	81 11       	cpse	r24, r1
     26c:	67 c0       	rjmp	.+206    	; 0x33c <prvTimerTask+0x12e>
     26e:	8b 85       	ldd	r24, Y+11	; 0x0b
     270:	9c 85       	ldd	r25, Y+12	; 0x0c
     272:	ad 85       	ldd	r26, Y+13	; 0x0d
     274:	be 85       	ldd	r27, Y+14	; 0x0e
     276:	82 15       	cp	r24, r2
     278:	93 05       	cpc	r25, r3
     27a:	a4 05       	cpc	r26, r4
     27c:	b5 05       	cpc	r27, r5
     27e:	08 f4       	brcc	.+2      	; 0x282 <prvTimerTask+0x74>
     280:	45 c0       	rjmp	.+138    	; 0x30c <prvTimerTask+0xfe>
     282:	0e 94 cb 14 	call	0x2996	; 0x2996 <xTaskResumeAll>
     286:	e0 91 6c 19 	lds	r30, 0x196C	; 0x80196c <pxCurrentTimerList>
     28a:	f0 91 6d 19 	lds	r31, 0x196D	; 0x80196d <pxCurrentTimerList+0x1>
     28e:	07 80       	ldd	r0, Z+7	; 0x07
     290:	f0 85       	ldd	r31, Z+8	; 0x08
     292:	e0 2d       	mov	r30, r0
     294:	a0 85       	ldd	r26, Z+8	; 0x08
     296:	b1 85       	ldd	r27, Z+9	; 0x09
     298:	b8 8b       	std	Y+16, r27	; 0x10
     29a:	af 87       	std	Y+15, r26	; 0x0f
     29c:	cd 01       	movw	r24, r26
     29e:	02 96       	adiw	r24, 0x02	; 2
     2a0:	0e 94 81 0a 	call	0x1502	; 0x1502 <uxListRemove>
     2a4:	ef 85       	ldd	r30, Y+15	; 0x0f
     2a6:	f8 89       	ldd	r31, Y+16	; 0x10
     2a8:	87 89       	ldd	r24, Z+23	; 0x17
     2aa:	82 ff       	sbrs	r24, 2
     2ac:	21 c0       	rjmp	.+66     	; 0x2f0 <prvTimerTask+0xe2>
     2ae:	46 85       	ldd	r20, Z+14	; 0x0e
     2b0:	57 85       	ldd	r21, Z+15	; 0x0f
     2b2:	60 89       	ldd	r22, Z+16	; 0x10
     2b4:	71 89       	ldd	r23, Z+17	; 0x11
     2b6:	42 0d       	add	r20, r2
     2b8:	53 1d       	adc	r21, r3
     2ba:	64 1d       	adc	r22, r4
     2bc:	75 1d       	adc	r23, r5
     2be:	72 01       	movw	r14, r4
     2c0:	61 01       	movw	r12, r2
     2c2:	0b 85       	ldd	r16, Y+11	; 0x0b
     2c4:	1c 85       	ldd	r17, Y+12	; 0x0c
     2c6:	2d 85       	ldd	r18, Y+13	; 0x0d
     2c8:	3e 85       	ldd	r19, Y+14	; 0x0e
     2ca:	cf 01       	movw	r24, r30
     2cc:	0e 94 4a 19 	call	0x3294	; 0x3294 <prvInsertTimerInActiveList>
     2d0:	88 23       	and	r24, r24
     2d2:	99 f0       	breq	.+38     	; 0x2fa <prvTimerTask+0xec>
     2d4:	c8 2c       	mov	r12, r8
     2d6:	d9 2c       	mov	r13, r9
     2d8:	ea 2c       	mov	r14, r10
     2da:	fb 2c       	mov	r15, r11
     2dc:	00 e0       	ldi	r16, 0x00	; 0
     2de:	10 e0       	ldi	r17, 0x00	; 0
     2e0:	a2 01       	movw	r20, r4
     2e2:	91 01       	movw	r18, r2
     2e4:	60 e0       	ldi	r22, 0x00	; 0
     2e6:	8f 85       	ldd	r24, Y+15	; 0x0f
     2e8:	98 89       	ldd	r25, Y+16	; 0x10
     2ea:	0e 94 dc 19 	call	0x33b8	; 0x33b8 <xTimerGenericCommand>
     2ee:	05 c0       	rjmp	.+10     	; 0x2fa <prvTimerTask+0xec>
     2f0:	8e 7f       	andi	r24, 0xFE	; 254
     2f2:	af 85       	ldd	r26, Y+15	; 0x0f
     2f4:	b8 89       	ldd	r27, Y+16	; 0x10
     2f6:	57 96       	adiw	r26, 0x17	; 23
     2f8:	8c 93       	st	X, r24
     2fa:	af 85       	ldd	r26, Y+15	; 0x0f
     2fc:	b8 89       	ldd	r27, Y+16	; 0x10
     2fe:	54 96       	adiw	r26, 0x14	; 20
     300:	ed 91       	ld	r30, X+
     302:	fc 91       	ld	r31, X
     304:	55 97       	sbiw	r26, 0x15	; 21
     306:	cd 01       	movw	r24, r26
     308:	19 95       	eicall
     30a:	a1 c0       	rjmp	.+322    	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     30c:	20 e0       	ldi	r18, 0x00	; 0
     30e:	b2 01       	movw	r22, r4
     310:	a1 01       	movw	r20, r2
     312:	8b 85       	ldd	r24, Y+11	; 0x0b
     314:	9c 85       	ldd	r25, Y+12	; 0x0c
     316:	ad 85       	ldd	r26, Y+13	; 0x0d
     318:	be 85       	ldd	r27, Y+14	; 0x0e
     31a:	48 1b       	sub	r20, r24
     31c:	59 0b       	sbc	r21, r25
     31e:	6a 0b       	sbc	r22, r26
     320:	7b 0b       	sbc	r23, r27
     322:	80 91 68 19 	lds	r24, 0x1968	; 0x801968 <xTimerQueue>
     326:	90 91 69 19 	lds	r25, 0x1969	; 0x801969 <xTimerQueue+0x1>
     32a:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <vQueueWaitForMessageRestricted>
     32e:	0e 94 cb 14 	call	0x2996	; 0x2996 <xTaskResumeAll>
     332:	81 11       	cpse	r24, r1
     334:	8c c0       	rjmp	.+280    	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     336:	0e 94 56 0b 	call	0x16ac	; 0x16ac <vPortYield>
     33a:	89 c0       	rjmp	.+274    	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     33c:	0e 94 cb 14 	call	0x2996	; 0x2996 <xTaskResumeAll>
     340:	86 c0       	rjmp	.+268    	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     342:	89 81       	ldd	r24, Y+1	; 0x01
     344:	88 23       	and	r24, r24
     346:	0c f4       	brge	.+2      	; 0x34a <prvTimerTask+0x13c>
     348:	82 c0       	rjmp	.+260    	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     34a:	4e 80       	ldd	r4, Y+6	; 0x06
     34c:	5f 80       	ldd	r5, Y+7	; 0x07
     34e:	d2 01       	movw	r26, r4
     350:	1c 96       	adiw	r26, 0x0c	; 12
     352:	8d 91       	ld	r24, X+
     354:	9c 91       	ld	r25, X
     356:	1d 97       	sbiw	r26, 0x0d	; 13
     358:	89 2b       	or	r24, r25
     35a:	21 f0       	breq	.+8      	; 0x364 <prvTimerTask+0x156>
     35c:	c2 01       	movw	r24, r4
     35e:	02 96       	adiw	r24, 0x02	; 2
     360:	0e 94 81 0a 	call	0x1502	; 0x1502 <uxListRemove>
     364:	ce 01       	movw	r24, r28
     366:	08 96       	adiw	r24, 0x08	; 8
     368:	0e 94 3a 1a 	call	0x3474	; 0x3474 <prvSampleTimeNow>
     36c:	8b 01       	movw	r16, r22
     36e:	9c 01       	movw	r18, r24
     370:	e9 81       	ldd	r30, Y+1	; 0x01
     372:	0e 2e       	mov	r0, r30
     374:	00 0c       	add	r0, r0
     376:	ff 0b       	sbc	r31, r31
     378:	ea 30       	cpi	r30, 0x0A	; 10
     37a:	f1 05       	cpc	r31, r1
     37c:	08 f0       	brcs	.+2      	; 0x380 <prvTimerTask+0x172>
     37e:	67 c0       	rjmp	.+206    	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     380:	88 27       	eor	r24, r24
     382:	ee 58       	subi	r30, 0x8E	; 142
     384:	ff 4f       	sbci	r31, 0xFF	; 255
     386:	8f 4f       	sbci	r24, 0xFF	; 255
     388:	0c 94 88 2a 	jmp	0x5510	; 0x5510 <__tablejump2__>
     38c:	f2 01       	movw	r30, r4
     38e:	87 89       	ldd	r24, Z+23	; 0x17
     390:	81 60       	ori	r24, 0x01	; 1
     392:	87 8b       	std	Z+23, r24	; 0x17
     394:	ca 80       	ldd	r12, Y+2	; 0x02
     396:	db 80       	ldd	r13, Y+3	; 0x03
     398:	ec 80       	ldd	r14, Y+4	; 0x04
     39a:	fd 80       	ldd	r15, Y+5	; 0x05
     39c:	46 85       	ldd	r20, Z+14	; 0x0e
     39e:	57 85       	ldd	r21, Z+15	; 0x0f
     3a0:	60 89       	ldd	r22, Z+16	; 0x10
     3a2:	71 89       	ldd	r23, Z+17	; 0x11
     3a4:	4c 0d       	add	r20, r12
     3a6:	5d 1d       	adc	r21, r13
     3a8:	6e 1d       	adc	r22, r14
     3aa:	7f 1d       	adc	r23, r15
     3ac:	c2 01       	movw	r24, r4
     3ae:	0e 94 4a 19 	call	0x3294	; 0x3294 <prvInsertTimerInActiveList>
     3b2:	88 23       	and	r24, r24
     3b4:	09 f4       	brne	.+2      	; 0x3b8 <prvTimerTask+0x1aa>
     3b6:	4b c0       	rjmp	.+150    	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     3b8:	d2 01       	movw	r26, r4
     3ba:	54 96       	adiw	r26, 0x14	; 20
     3bc:	ed 91       	ld	r30, X+
     3be:	fc 91       	ld	r31, X
     3c0:	55 97       	sbiw	r26, 0x15	; 21
     3c2:	c2 01       	movw	r24, r4
     3c4:	19 95       	eicall
     3c6:	f2 01       	movw	r30, r4
     3c8:	87 89       	ldd	r24, Z+23	; 0x17
     3ca:	82 ff       	sbrs	r24, 2
     3cc:	40 c0       	rjmp	.+128    	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     3ce:	4a 81       	ldd	r20, Y+2	; 0x02
     3d0:	5b 81       	ldd	r21, Y+3	; 0x03
     3d2:	6c 81       	ldd	r22, Y+4	; 0x04
     3d4:	7d 81       	ldd	r23, Y+5	; 0x05
     3d6:	86 85       	ldd	r24, Z+14	; 0x0e
     3d8:	97 85       	ldd	r25, Z+15	; 0x0f
     3da:	a0 89       	ldd	r26, Z+16	; 0x10
     3dc:	b1 89       	ldd	r27, Z+17	; 0x11
     3de:	9a 01       	movw	r18, r20
     3e0:	ab 01       	movw	r20, r22
     3e2:	28 0f       	add	r18, r24
     3e4:	39 1f       	adc	r19, r25
     3e6:	4a 1f       	adc	r20, r26
     3e8:	5b 1f       	adc	r21, r27
     3ea:	c8 2c       	mov	r12, r8
     3ec:	d9 2c       	mov	r13, r9
     3ee:	ea 2c       	mov	r14, r10
     3f0:	fb 2c       	mov	r15, r11
     3f2:	00 e0       	ldi	r16, 0x00	; 0
     3f4:	10 e0       	ldi	r17, 0x00	; 0
     3f6:	60 e0       	ldi	r22, 0x00	; 0
     3f8:	c2 01       	movw	r24, r4
     3fa:	0e 94 dc 19 	call	0x33b8	; 0x33b8 <xTimerGenericCommand>
     3fe:	27 c0       	rjmp	.+78     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     400:	d2 01       	movw	r26, r4
     402:	57 96       	adiw	r26, 0x17	; 23
     404:	8c 91       	ld	r24, X
     406:	57 97       	sbiw	r26, 0x17	; 23
     408:	8e 7f       	andi	r24, 0xFE	; 254
     40a:	57 96       	adiw	r26, 0x17	; 23
     40c:	8c 93       	st	X, r24
     40e:	1f c0       	rjmp	.+62     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     410:	f2 01       	movw	r30, r4
     412:	87 89       	ldd	r24, Z+23	; 0x17
     414:	81 60       	ori	r24, 0x01	; 1
     416:	87 8b       	std	Z+23, r24	; 0x17
     418:	4a 81       	ldd	r20, Y+2	; 0x02
     41a:	5b 81       	ldd	r21, Y+3	; 0x03
     41c:	6c 81       	ldd	r22, Y+4	; 0x04
     41e:	7d 81       	ldd	r23, Y+5	; 0x05
     420:	46 87       	std	Z+14, r20	; 0x0e
     422:	57 87       	std	Z+15, r21	; 0x0f
     424:	60 8b       	std	Z+16, r22	; 0x10
     426:	71 8b       	std	Z+17, r23	; 0x11
     428:	40 0f       	add	r20, r16
     42a:	51 1f       	adc	r21, r17
     42c:	62 1f       	adc	r22, r18
     42e:	73 1f       	adc	r23, r19
     430:	68 01       	movw	r12, r16
     432:	79 01       	movw	r14, r18
     434:	c2 01       	movw	r24, r4
     436:	0e 94 4a 19 	call	0x3294	; 0x3294 <prvInsertTimerInActiveList>
     43a:	09 c0       	rjmp	.+18     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     43c:	f2 01       	movw	r30, r4
     43e:	87 89       	ldd	r24, Z+23	; 0x17
     440:	81 fd       	sbrc	r24, 1
     442:	03 c0       	rjmp	.+6      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
     444:	c2 01       	movw	r24, r4
     446:	b9 d7       	rcall	.+3954   	; 0x13ba <vPortFree>
     448:	02 c0       	rjmp	.+4      	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     44a:	8e 7f       	andi	r24, 0xFE	; 254
     44c:	87 8b       	std	Z+23, r24	; 0x17
     44e:	28 2d       	mov	r18, r8
     450:	39 2d       	mov	r19, r9
     452:	4a 2d       	mov	r20, r10
     454:	5b 2d       	mov	r21, r11
     456:	66 2d       	mov	r22, r6
     458:	77 2d       	mov	r23, r7
     45a:	80 91 68 19 	lds	r24, 0x1968	; 0x801968 <xTimerQueue>
     45e:	90 91 69 19 	lds	r25, 0x1969	; 0x801969 <xTimerQueue+0x1>
     462:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <xQueueReceive>
     466:	81 11       	cpse	r24, r1
     468:	6c cf       	rjmp	.-296    	; 0x342 <prvTimerTask+0x134>
     46a:	e5 ce       	rjmp	.-566    	; 0x236 <prvTimerTask+0x28>
     46c:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <vTaskSuspendAll>
     470:	ce 01       	movw	r24, r28
     472:	01 96       	adiw	r24, 0x01	; 1
     474:	0e 94 3a 1a 	call	0x3474	; 0x3474 <prvSampleTimeNow>
     478:	6b 87       	std	Y+11, r22	; 0x0b
     47a:	7c 87       	std	Y+12, r23	; 0x0c
     47c:	8d 87       	std	Y+13, r24	; 0x0d
     47e:	9e 87       	std	Y+14, r25	; 0x0e
     480:	89 81       	ldd	r24, Y+1	; 0x01
     482:	81 11       	cpse	r24, r1
     484:	5b cf       	rjmp	.-330    	; 0x33c <prvTimerTask+0x12e>
     486:	e0 91 6a 19 	lds	r30, 0x196A	; 0x80196a <pxOverflowTimerList>
     48a:	f0 91 6b 19 	lds	r31, 0x196B	; 0x80196b <pxOverflowTimerList+0x1>
     48e:	80 81       	ld	r24, Z
     490:	21 e0       	ldi	r18, 0x01	; 1
     492:	81 11       	cpse	r24, r1
     494:	20 e0       	ldi	r18, 0x00	; 0
     496:	28 2c       	mov	r2, r8
     498:	39 2c       	mov	r3, r9
     49a:	4a 2c       	mov	r4, r10
     49c:	5b 2c       	mov	r5, r11
     49e:	37 cf       	rjmp	.-402    	; 0x30e <prvTimerTask+0x100>

000004a0 <__ctors_end>:
     4a0:	11 24       	eor	r1, r1
     4a2:	1f be       	out	0x3f, r1	; 63
     4a4:	cf ef       	ldi	r28, 0xFF	; 255
     4a6:	d1 e2       	ldi	r29, 0x21	; 33
     4a8:	de bf       	out	0x3e, r29	; 62
     4aa:	cd bf       	out	0x3d, r28	; 61
     4ac:	00 e0       	ldi	r16, 0x00	; 0
     4ae:	0c bf       	out	0x3c, r16	; 60

000004b0 <__do_copy_data>:
     4b0:	18 e0       	ldi	r17, 0x08	; 8
     4b2:	a0 e0       	ldi	r26, 0x00	; 0
     4b4:	b2 e0       	ldi	r27, 0x02	; 2
     4b6:	ec e9       	ldi	r30, 0x9C	; 156
     4b8:	fe e5       	ldi	r31, 0x5E	; 94
     4ba:	00 e0       	ldi	r16, 0x00	; 0
     4bc:	0b bf       	out	0x3b, r16	; 59
     4be:	02 c0       	rjmp	.+4      	; 0x4c4 <__do_copy_data+0x14>
     4c0:	07 90       	elpm	r0, Z+
     4c2:	0d 92       	st	X+, r0
     4c4:	a4 38       	cpi	r26, 0x84	; 132
     4c6:	b1 07       	cpc	r27, r17
     4c8:	d9 f7       	brne	.-10     	; 0x4c0 <__do_copy_data+0x10>

000004ca <__do_clear_bss>:
     4ca:	2b e1       	ldi	r18, 0x1B	; 27
     4cc:	a4 e8       	ldi	r26, 0x84	; 132
     4ce:	b8 e0       	ldi	r27, 0x08	; 8
     4d0:	01 c0       	rjmp	.+2      	; 0x4d4 <.do_clear_bss_start>

000004d2 <.do_clear_bss_loop>:
     4d2:	1d 92       	st	X+, r1

000004d4 <.do_clear_bss_start>:
     4d4:	a3 31       	cpi	r26, 0x13	; 19
     4d6:	b2 07       	cpc	r27, r18
     4d8:	e1 f7       	brne	.-8      	; 0x4d2 <.do_clear_bss_loop>
     4da:	0e 94 96 1b 	call	0x372c	; 0x372c <main>
     4de:	0c 94 4c 2f 	jmp	0x5e98	; 0x5e98 <_exit>

000004e2 <__bad_interrupt>:
     4e2:	8e cd       	rjmp	.-1252   	; 0x0 <__vectors>

000004e4 <co2Reader_create>:

	return _new_reader;
}

//	RETURN TO DESTROY METHODS
void co2Reader_destroy(co2reader_t self) {
     4e4:	2f 92       	push	r2
     4e6:	3f 92       	push	r3
     4e8:	4f 92       	push	r4
     4ea:	5f 92       	push	r5
     4ec:	6f 92       	push	r6
     4ee:	7f 92       	push	r7
     4f0:	8f 92       	push	r8
     4f2:	9f 92       	push	r9
     4f4:	af 92       	push	r10
     4f6:	bf 92       	push	r11
     4f8:	cf 92       	push	r12
     4fa:	df 92       	push	r13
     4fc:	ef 92       	push	r14
     4fe:	ff 92       	push	r15
     500:	0f 93       	push	r16
     502:	1f 93       	push	r17
     504:	cf 93       	push	r28
     506:	df 93       	push	r29
     508:	88 2e       	mov	r8, r24
     50a:	96 2e       	mov	r9, r22
     50c:	1a 01       	movw	r2, r20
     50e:	28 01       	movw	r4, r16
     510:	39 01       	movw	r6, r18
     512:	61 e0       	ldi	r22, 0x01	; 1
     514:	70 e0       	ldi	r23, 0x00	; 0
     516:	83 e0       	ldi	r24, 0x03	; 3
     518:	90 e0       	ldi	r25, 0x00	; 0
     51a:	0e 94 90 2a 	call	0x5520	; 0x5520 <calloc>
     51e:	ec 01       	movw	r28, r24
     520:	00 97       	sbiw	r24, 0x00	; 0
     522:	69 f1       	breq	.+90     	; 0x57e <co2Reader_create+0x9a>
     524:	fc 01       	movw	r30, r24
     526:	11 92       	st	Z+, r1
     528:	30 92 8f 08 	sts	0x088F, r3	; 0x80088f <_startMeasureEventGroup+0x1>
     52c:	20 92 8e 08 	sts	0x088E, r2	; 0x80088e <_startMeasureEventGroup>
     530:	40 92 8a 08 	sts	0x088A, r4	; 0x80088a <_startMeasureBit>
     534:	50 92 8b 08 	sts	0x088B, r5	; 0x80088b <_startMeasureBit+0x1>
     538:	60 92 8c 08 	sts	0x088C, r6	; 0x80088c <_startMeasureBit+0x2>
     53c:	70 92 8d 08 	sts	0x088D, r7	; 0x80088d <_startMeasureBit+0x3>
     540:	f0 92 89 08 	sts	0x0889, r15	; 0x800889 <_readyEventGroup+0x1>
     544:	e0 92 88 08 	sts	0x0888, r14	; 0x800888 <_readyEventGroup>
     548:	a0 92 84 08 	sts	0x0884, r10	; 0x800884 <__data_end>
     54c:	b0 92 85 08 	sts	0x0885, r11	; 0x800885 <__data_end+0x1>
     550:	c0 92 86 08 	sts	0x0886, r12	; 0x800886 <__data_end+0x2>
     554:	d0 92 87 08 	sts	0x0887, r13	; 0x800887 <__data_end+0x3>
     558:	49 2d       	mov	r20, r9
     55a:	50 e0       	ldi	r21, 0x00	; 0
     55c:	7f 01       	movw	r14, r30
     55e:	08 2d       	mov	r16, r8
     560:	9c 01       	movw	r18, r24
     562:	63 e4       	ldi	r22, 0x43	; 67
     564:	72 e0       	ldi	r23, 0x02	; 2
     566:	89 e2       	ldi	r24, 0x29	; 41
     568:	93 e0       	ldi	r25, 0x03	; 3
     56a:	0e 94 87 12 	call	0x250e	; 0x250e <xTaskCreate>
     56e:	8d e4       	ldi	r24, 0x4D	; 77
     570:	92 e0       	ldi	r25, 0x02	; 2
     572:	9f 93       	push	r25
     574:	8f 93       	push	r24
     576:	0e 94 2e 2c 	call	0x585c	; 0x585c <printf>
     57a:	0f 90       	pop	r0
     57c:	0f 90       	pop	r0
     57e:	ce 01       	movw	r24, r28
     580:	df 91       	pop	r29
     582:	cf 91       	pop	r28
     584:	1f 91       	pop	r17
     586:	0f 91       	pop	r16
     588:	ff 90       	pop	r15
     58a:	ef 90       	pop	r14
     58c:	df 90       	pop	r13
     58e:	cf 90       	pop	r12
     590:	bf 90       	pop	r11
     592:	af 90       	pop	r10
     594:	9f 90       	pop	r9
     596:	8f 90       	pop	r8
     598:	7f 90       	pop	r7
     59a:	6f 90       	pop	r6
     59c:	5f 90       	pop	r5
     59e:	4f 90       	pop	r4
     5a0:	3f 90       	pop	r3
     5a2:	2f 90       	pop	r2
     5a4:	08 95       	ret

000005a6 <co2Reader_measure>:
	for (;;) {
		co2Reader_measure(self);
	}
}

void co2Reader_measure(co2reader_t self) {//dummy
     5a6:	cf 92       	push	r12
     5a8:	df 92       	push	r13
     5aa:	ef 92       	push	r14
     5ac:	ff 92       	push	r15
     5ae:	0f 93       	push	r16
     5b0:	1f 93       	push	r17
     5b2:	cf 93       	push	r28
     5b4:	df 93       	push	r29
     5b6:	ec 01       	movw	r28, r24
	EventBits_t uxBits = xEventGroupWaitBits(_startMeasureEventGroup, //eventGroup
     5b8:	40 91 8a 08 	lds	r20, 0x088A	; 0x80088a <_startMeasureBit>
     5bc:	50 91 8b 08 	lds	r21, 0x088B	; 0x80088b <_startMeasureBit+0x1>
     5c0:	60 91 8c 08 	lds	r22, 0x088C	; 0x80088c <_startMeasureBit+0x2>
     5c4:	70 91 8d 08 	lds	r23, 0x088D	; 0x80088d <_startMeasureBit+0x3>
     5c8:	cc 24       	eor	r12, r12
     5ca:	ca 94       	dec	r12
     5cc:	dc 2c       	mov	r13, r12
     5ce:	76 01       	movw	r14, r12
     5d0:	01 e0       	ldi	r16, 0x01	; 1
     5d2:	21 e0       	ldi	r18, 0x01	; 1
     5d4:	80 91 8e 08 	lds	r24, 0x088E	; 0x80088e <_startMeasureEventGroup>
     5d8:	90 91 8f 08 	lds	r25, 0x088F	; 0x80088f <_startMeasureEventGroup+0x1>
     5dc:	8f d4       	rcall	.+2334   	; 0xefc <xEventGroupWaitBits>
	_startMeasureBit, //bits it is interested in
	pdTRUE, //clears the bits
	pdTRUE, //waits for both bits to be set
	portMAX_DELAY); //wait

	if ((uxBits & (_startMeasureBit)) == (_startMeasureBit)) {
     5de:	00 91 8a 08 	lds	r16, 0x088A	; 0x80088a <_startMeasureBit>
     5e2:	10 91 8b 08 	lds	r17, 0x088B	; 0x80088b <_startMeasureBit+0x1>
     5e6:	20 91 8c 08 	lds	r18, 0x088C	; 0x80088c <_startMeasureBit+0x2>
     5ea:	30 91 8d 08 	lds	r19, 0x088D	; 0x80088d <_startMeasureBit+0x3>
     5ee:	dc 01       	movw	r26, r24
     5f0:	cb 01       	movw	r24, r22
     5f2:	80 23       	and	r24, r16
     5f4:	91 23       	and	r25, r17
     5f6:	a2 23       	and	r26, r18
     5f8:	b3 23       	and	r27, r19
     5fa:	08 17       	cp	r16, r24
     5fc:	19 07       	cpc	r17, r25
     5fe:	2a 07       	cpc	r18, r26
     600:	3b 07       	cpc	r19, r27
     602:	f1 f4       	brne	.+60     	; 0x640 <co2Reader_measure+0x9a>
		uint8_t no = self->value;
     604:	88 81       	ld	r24, Y
		no++;
		self->value = no;
     606:	8f 5f       	subi	r24, 0xFF	; 255
     608:	88 83       	st	Y, r24
		printf("co2 done bit set");
     60a:	84 e5       	ldi	r24, 0x54	; 84
     60c:	92 e0       	ldi	r25, 0x02	; 2
     60e:	9f 93       	push	r25
     610:	8f 93       	push	r24
     612:	0e 94 2e 2c 	call	0x585c	; 0x585c <printf>

		vTaskDelay(2500); //pretend it takes some time
     616:	64 ec       	ldi	r22, 0xC4	; 196
     618:	79 e0       	ldi	r23, 0x09	; 9
     61a:	80 e0       	ldi	r24, 0x00	; 0
     61c:	90 e0       	ldi	r25, 0x00	; 0
     61e:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <vTaskDelay>

		//set done bit so that device knows meassurement is done
		xEventGroupSetBits(_readyEventGroup, _readyBit);
     622:	40 91 84 08 	lds	r20, 0x0884	; 0x800884 <__data_end>
     626:	50 91 85 08 	lds	r21, 0x0885	; 0x800885 <__data_end+0x1>
     62a:	60 91 86 08 	lds	r22, 0x0886	; 0x800886 <__data_end+0x2>
     62e:	70 91 87 08 	lds	r23, 0x0887	; 0x800887 <__data_end+0x3>
     632:	80 91 88 08 	lds	r24, 0x0888	; 0x800888 <_readyEventGroup>
     636:	90 91 89 08 	lds	r25, 0x0889	; 0x800889 <_readyEventGroup+0x1>
     63a:	20 d5       	rcall	.+2624   	; 0x107c <xEventGroupSetBits>
     63c:	0f 90       	pop	r0
     63e:	0f 90       	pop	r0
	}
}
     640:	df 91       	pop	r29
     642:	cf 91       	pop	r28
     644:	1f 91       	pop	r17
     646:	0f 91       	pop	r16
     648:	ff 90       	pop	r15
     64a:	ef 90       	pop	r14
     64c:	df 90       	pop	r13
     64e:	cf 90       	pop	r12
     650:	08 95       	ret

00000652 <co2Reader_executeTask>:
	//free(self->value);
	//free(self);
}

//actual task, methods devided so that it is possible to test
void co2Reader_executeTask(co2reader_t self) {
     652:	ec 01       	movw	r28, r24
	for (;;) {
		co2Reader_measure(self);
     654:	ce 01       	movw	r24, r28
     656:	a7 df       	rcall	.-178    	; 0x5a6 <co2Reader_measure>
     658:	fd cf       	rjmp	.-6      	; 0x654 <co2Reader_executeTask+0x2>

0000065a <co2Reader_getCO2>:
	}
}

uint8_t co2Reader_getCO2(co2reader_t self) {
	return self->value;
     65a:	fc 01       	movw	r30, r24
     65c:	80 81       	ld	r24, Z
     65e:	08 95       	ret

00000660 <currentCondition_create>:
	//free(self->co2Data);
	//free(self->temperatureData);
	//free(self->humidityData);
	//free(self->soundData);
	//free(self);
	vPortFree(self->humidityData);//maybe use this
     660:	cf 93       	push	r28
     662:	df 93       	push	r29
     664:	ec 01       	movw	r28, r24
     666:	61 e0       	ldi	r22, 0x01	; 1
     668:	70 e0       	ldi	r23, 0x00	; 0
     66a:	8a e0       	ldi	r24, 0x0A	; 10
     66c:	90 e0       	ldi	r25, 0x00	; 0
     66e:	0e 94 90 2a 	call	0x5520	; 0x5520 <calloc>
     672:	00 97       	sbiw	r24, 0x00	; 0
     674:	49 f0       	breq	.+18     	; 0x688 <currentCondition_create+0x28>
     676:	fc 01       	movw	r30, r24
     678:	d1 83       	std	Z+1, r29	; 0x01
     67a:	c0 83       	st	Z, r28
     67c:	15 82       	std	Z+5, r1	; 0x05
     67e:	14 82       	std	Z+4, r1	; 0x04
     680:	17 82       	std	Z+7, r1	; 0x07
     682:	16 82       	std	Z+6, r1	; 0x06
     684:	13 82       	std	Z+3, r1	; 0x03
     686:	12 82       	std	Z+2, r1	; 0x02
     688:	df 91       	pop	r29
     68a:	cf 91       	pop	r28
     68c:	08 95       	ret

0000068e <currentCondition_setCO2>:
     68e:	00 97       	sbiw	r24, 0x00	; 0
     690:	19 f0       	breq	.+6      	; 0x698 <currentCondition_setCO2+0xa>
     692:	fc 01       	movw	r30, r24
     694:	73 83       	std	Z+3, r23	; 0x03
     696:	62 83       	std	Z+2, r22	; 0x02
     698:	08 95       	ret

0000069a <currentCondition_setHumidity>:
     69a:	00 97       	sbiw	r24, 0x00	; 0
     69c:	19 f0       	breq	.+6      	; 0x6a4 <currentCondition_setHumidity+0xa>
     69e:	fc 01       	movw	r30, r24
     6a0:	77 83       	std	Z+7, r23	; 0x07
     6a2:	66 83       	std	Z+6, r22	; 0x06
     6a4:	08 95       	ret

000006a6 <currentCondition_setTemperature>:
     6a6:	00 97       	sbiw	r24, 0x00	; 0
     6a8:	19 f0       	breq	.+6      	; 0x6b0 <currentCondition_setTemperature+0xa>
     6aa:	fc 01       	movw	r30, r24
     6ac:	75 83       	std	Z+5, r23	; 0x05
     6ae:	64 83       	std	Z+4, r22	; 0x04
     6b0:	08 95       	ret

000006b2 <getcurrentConditionPayload>:
}
lora_payload_t getcurrentConditionPayload(currentCondition_t self)
{
     6b2:	fc 01       	movw	r30, r24
     6b4:	db 01       	movw	r26, r22
	lora_payload_t payload;
	payload.port_no = 1;
	payload.len = 4;
	
	payload.bytes[0] = self->temperatureData >> 8;
     6b6:	14 96       	adiw	r26, 0x04	; 4
     6b8:	2c 91       	ld	r18, X
     6ba:	14 97       	sbiw	r26, 0x04	; 4
     6bc:	15 96       	adiw	r26, 0x05	; 5
     6be:	3c 91       	ld	r19, X
     6c0:	15 97       	sbiw	r26, 0x05	; 5
	payload.bytes[1] = self->temperatureData & 0xFF;

	payload.bytes[2] = self->humidityData >> 8;
     6c2:	16 96       	adiw	r26, 0x06	; 6
     6c4:	8c 91       	ld	r24, X
     6c6:	16 97       	sbiw	r26, 0x06	; 6
     6c8:	17 96       	adiw	r26, 0x07	; 7
     6ca:	9c 91       	ld	r25, X
	payload.bytes[3] = self->humidityData & 0xFF;
	return payload;
     6cc:	41 e0       	ldi	r20, 0x01	; 1
     6ce:	40 83       	st	Z, r20
     6d0:	44 e0       	ldi	r20, 0x04	; 4
     6d2:	41 83       	std	Z+1, r20	; 0x01
     6d4:	32 83       	std	Z+2, r19	; 0x02
     6d6:	23 83       	std	Z+3, r18	; 0x03
     6d8:	94 83       	std	Z+4, r25	; 0x04
     6da:	85 83       	std	Z+5, r24	; 0x05
	
     6dc:	cf 01       	movw	r24, r30
     6de:	08 95       	ret

000006e0 <device_create>:
	free(self);*/
}

currentCondition_t device_getCurrentCondition(device_t self) {
	return self->currentCondition;
}
     6e0:	2f 92       	push	r2
     6e2:	3f 92       	push	r3
     6e4:	4f 92       	push	r4
     6e6:	5f 92       	push	r5
     6e8:	6f 92       	push	r6
     6ea:	7f 92       	push	r7
     6ec:	8f 92       	push	r8
     6ee:	9f 92       	push	r9
     6f0:	af 92       	push	r10
     6f2:	bf 92       	push	r11
     6f4:	cf 92       	push	r12
     6f6:	df 92       	push	r13
     6f8:	ef 92       	push	r14
     6fa:	ff 92       	push	r15
     6fc:	0f 93       	push	r16
     6fe:	1f 93       	push	r17
     700:	cf 93       	push	r28
     702:	df 93       	push	r29
     704:	00 d0       	rcall	.+0      	; 0x706 <device_create+0x26>
     706:	1f 92       	push	r1
     708:	cd b7       	in	r28, 0x3d	; 61
     70a:	de b7       	in	r29, 0x3e	; 62
     70c:	28 2e       	mov	r2, r24
     70e:	36 2e       	mov	r3, r22
     710:	5c 83       	std	Y+4, r21	; 0x04
     712:	4b 83       	std	Y+3, r20	; 0x03
     714:	28 01       	movw	r4, r16
     716:	39 01       	movw	r6, r18
     718:	61 e0       	ldi	r22, 0x01	; 1
     71a:	70 e0       	ldi	r23, 0x00	; 0
     71c:	88 e0       	ldi	r24, 0x08	; 8
     71e:	90 e0       	ldi	r25, 0x00	; 0
     720:	0e 94 90 2a 	call	0x5520	; 0x5520 <calloc>
     724:	9a 83       	std	Y+2, r25	; 0x02
     726:	89 83       	std	Y+1, r24	; 0x01
     728:	00 97       	sbiw	r24, 0x00	; 0
     72a:	09 f4       	brne	.+2      	; 0x72e <device_create+0x4e>
     72c:	46 c0       	rjmp	.+140    	; 0x7ba <device_create+0xda>
     72e:	fc 01       	movw	r30, r24
     730:	91 82       	std	Z+1, r9	; 0x01
     732:	80 82       	st	Z, r8
     734:	8a 8d       	ldd	r24, Y+26	; 0x1a
     736:	9b 8d       	ldd	r25, Y+27	; 0x1b
     738:	93 83       	std	Z+3, r25	; 0x03
     73a:	82 83       	std	Z+2, r24	; 0x02
     73c:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <deviceId>
     740:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <deviceId+0x1>
     744:	8d df       	rcall	.-230    	; 0x660 <currentCondition_create>
     746:	e9 81       	ldd	r30, Y+1	; 0x01
     748:	fa 81       	ldd	r31, Y+2	; 0x02
     74a:	95 83       	std	Z+5, r25	; 0x05
     74c:	84 83       	std	Z+4, r24	; 0x04
     74e:	8b 81       	ldd	r24, Y+3	; 0x03
     750:	9c 81       	ldd	r25, Y+4	; 0x04
     752:	90 93 b3 08 	sts	0x08B3, r25	; 0x8008b3 <_startMeasureEventGroup+0x1>
     756:	80 93 b2 08 	sts	0x08B2, r24	; 0x8008b2 <_startMeasureEventGroup>
     75a:	40 92 ae 08 	sts	0x08AE, r4	; 0x8008ae <_startMeasureBit>
     75e:	50 92 af 08 	sts	0x08AF, r5	; 0x8008af <_startMeasureBit+0x1>
     762:	60 92 b0 08 	sts	0x08B0, r6	; 0x8008b0 <_startMeasureBit+0x2>
     766:	70 92 b1 08 	sts	0x08B1, r7	; 0x8008b1 <_startMeasureBit+0x3>
     76a:	f0 92 ad 08 	sts	0x08AD, r15	; 0x8008ad <_readyEventGroup+0x1>
     76e:	e0 92 ac 08 	sts	0x08AC, r14	; 0x8008ac <_readyEventGroup>
     772:	a0 92 a8 08 	sts	0x08A8, r10	; 0x8008a8 <_readyBit>
     776:	b0 92 a9 08 	sts	0x08A9, r11	; 0x8008a9 <_readyBit+0x1>
     77a:	c0 92 aa 08 	sts	0x08AA, r12	; 0x8008aa <_readyBit+0x2>
     77e:	d0 92 ab 08 	sts	0x08AB, r13	; 0x8008ab <_readyBit+0x3>
     782:	8c 8d       	ldd	r24, Y+28	; 0x1c
     784:	9d 8d       	ldd	r25, Y+29	; 0x1d
     786:	90 93 a7 08 	sts	0x08A7, r25	; 0x8008a7 <_uplinkmessageBuffer+0x1>
     78a:	80 93 a6 08 	sts	0x08A6, r24	; 0x8008a6 <_uplinkmessageBuffer>
     78e:	43 2d       	mov	r20, r3
     790:	50 e0       	ldi	r21, 0x00	; 0
     792:	7f 01       	movw	r14, r30
     794:	96 e0       	ldi	r25, 0x06	; 6
     796:	e9 0e       	add	r14, r25
     798:	f1 1c       	adc	r15, r1
     79a:	02 2d       	mov	r16, r2
     79c:	9f 01       	movw	r18, r30
     79e:	65 e6       	ldi	r22, 0x65	; 101
     7a0:	72 e0       	ldi	r23, 0x02	; 2
     7a2:	82 e0       	ldi	r24, 0x02	; 2
     7a4:	95 e0       	ldi	r25, 0x05	; 5
     7a6:	0e 94 87 12 	call	0x250e	; 0x250e <xTaskCreate>
     7aa:	8c e6       	ldi	r24, 0x6C	; 108
     7ac:	92 e0       	ldi	r25, 0x02	; 2
     7ae:	9f 93       	push	r25
     7b0:	8f 93       	push	r24
     7b2:	0e 94 2e 2c 	call	0x585c	; 0x585c <printf>
     7b6:	0f 90       	pop	r0
     7b8:	0f 90       	pop	r0
     7ba:	89 81       	ldd	r24, Y+1	; 0x01
     7bc:	9a 81       	ldd	r25, Y+2	; 0x02
     7be:	0f 90       	pop	r0
     7c0:	0f 90       	pop	r0
     7c2:	0f 90       	pop	r0
     7c4:	0f 90       	pop	r0
     7c6:	df 91       	pop	r29
     7c8:	cf 91       	pop	r28
     7ca:	1f 91       	pop	r17
     7cc:	0f 91       	pop	r16
     7ce:	ff 90       	pop	r15
     7d0:	ef 90       	pop	r14
     7d2:	df 90       	pop	r13
     7d4:	cf 90       	pop	r12
     7d6:	bf 90       	pop	r11
     7d8:	af 90       	pop	r10
     7da:	9f 90       	pop	r9
     7dc:	8f 90       	pop	r8
     7de:	7f 90       	pop	r7
     7e0:	6f 90       	pop	r6
     7e2:	5f 90       	pop	r5
     7e4:	4f 90       	pop	r4
     7e6:	3f 90       	pop	r3
     7e8:	2f 90       	pop	r2
     7ea:	08 95       	ret

000007ec <device_setHumidityToCurrent>:

void device_setHumidityToCurrent(device_t self, uint16_t value)
{
	currentCondition_setHumidity(self->currentCondition,value);
     7ec:	fc 01       	movw	r30, r24
     7ee:	84 81       	ldd	r24, Z+4	; 0x04
     7f0:	95 81       	ldd	r25, Z+5	; 0x05
     7f2:	53 cf       	rjmp	.-346    	; 0x69a <currentCondition_setHumidity>
     7f4:	08 95       	ret

000007f6 <device_getHumidityData>:
}


uint16_t device_getHumidityData(device_t self)
{
	if (self->humAndTempReader!=NULL)
     7f6:	fc 01       	movw	r30, r24
     7f8:	82 81       	ldd	r24, Z+2	; 0x02
     7fa:	93 81       	ldd	r25, Z+3	; 0x03
     7fc:	00 97       	sbiw	r24, 0x00	; 0
     7fe:	11 f0       	breq	.+4      	; 0x804 <device_getHumidityData+0xe>
	{
		return humAndTempReader_getHumidity(self->humAndTempReader);
     800:	f1 c1       	rjmp	.+994    	; 0xbe4 <humAndTempReader_getHumidity>
     802:	08 95       	ret
	}
	else
	return -1;
     804:	8f ef       	ldi	r24, 0xFF	; 255
     806:	9f ef       	ldi	r25, 0xFF	; 255
}
     808:	08 95       	ret

0000080a <device_setCO2ToCurrent>:

void device_setCO2ToCurrent(device_t self, uint16_t value) {
	currentCondition_setCO2(self->currentCondition, value);
     80a:	fc 01       	movw	r30, r24
     80c:	84 81       	ldd	r24, Z+4	; 0x04
     80e:	95 81       	ldd	r25, Z+5	; 0x05
     810:	3e cf       	rjmp	.-388    	; 0x68e <currentCondition_setCO2>
     812:	08 95       	ret

00000814 <device_getCO2Data>:
}

uint16_t device_getCO2Data(device_t self) {
	if (self->co2reader != NULL)
     814:	fc 01       	movw	r30, r24
     816:	80 81       	ld	r24, Z
     818:	91 81       	ldd	r25, Z+1	; 0x01
     81a:	00 97       	sbiw	r24, 0x00	; 0
     81c:	19 f0       	breq	.+6      	; 0x824 <device_getCO2Data+0x10>
		return co2Reader_getCO2(self->co2reader);
     81e:	1d df       	rcall	.-454    	; 0x65a <co2Reader_getCO2>
     820:	90 e0       	ldi	r25, 0x00	; 0
     822:	08 95       	ret
	else return -1;
     824:	8f ef       	ldi	r24, 0xFF	; 255
     826:	9f ef       	ldi	r25, 0xFF	; 255
}
     828:	08 95       	ret

0000082a <device_setTemperatureToCurrent>:

void device_setTemperatureToCurrent(device_t self, int16_t value)
{
	
	currentCondition_setTemperature(self->currentCondition,value);
     82a:	fc 01       	movw	r30, r24
     82c:	84 81       	ldd	r24, Z+4	; 0x04
     82e:	95 81       	ldd	r25, Z+5	; 0x05
     830:	3a cf       	rjmp	.-396    	; 0x6a6 <currentCondition_setTemperature>
     832:	08 95       	ret

00000834 <device_getTemperatureData>:
}


int16_t device_getTemperatureData(device_t self)
{
	if (self->humAndTempReader!=NULL)
     834:	fc 01       	movw	r30, r24
     836:	82 81       	ldd	r24, Z+2	; 0x02
     838:	93 81       	ldd	r25, Z+3	; 0x03
     83a:	00 97       	sbiw	r24, 0x00	; 0
     83c:	11 f0       	breq	.+4      	; 0x842 <device_getTemperatureData+0xe>
	{
		return humAndTempReader_getTemperature(self->humAndTempReader);
     83e:	d6 c1       	rjmp	.+940    	; 0xbec <humAndTempReader_getTemperature>
     840:	08 95       	ret
	}
	else
	return -1;
     842:	8f ef       	ldi	r24, 0xFF	; 255
     844:	9f ef       	ldi	r25, 0xFF	; 255
	
     846:	08 95       	ret

00000848 <device_startMeasuring>:
void device_executeTask(device_t self) {
	for (;;)
		device_startMeasuring(self);
}

void device_startMeasuring(device_t self) {
     848:	af 92       	push	r10
     84a:	bf 92       	push	r11
     84c:	cf 92       	push	r12
     84e:	df 92       	push	r13
     850:	ef 92       	push	r14
     852:	ff 92       	push	r15
     854:	0f 93       	push	r16
     856:	1f 93       	push	r17
     858:	cf 93       	push	r28
     85a:	df 93       	push	r29
     85c:	cd b7       	in	r28, 0x3d	; 61
     85e:	de b7       	in	r29, 0x3e	; 62
     860:	66 97       	sbiw	r28, 0x16	; 22
     862:	0f b6       	in	r0, 0x3f	; 63
     864:	f8 94       	cli
     866:	de bf       	out	0x3e, r29	; 62
     868:	0f be       	out	0x3f, r0	; 63
     86a:	cd bf       	out	0x3d, r28	; 61
     86c:	5c 01       	movw	r10, r24
	//we should first check if device is on, get that from lora and add new eventBit 

	//tell sensors to start meassuring 
	xEventGroupSetBits(_startMeasureEventGroup, _startMeasureBit);
     86e:	40 91 ae 08 	lds	r20, 0x08AE	; 0x8008ae <_startMeasureBit>
     872:	50 91 af 08 	lds	r21, 0x08AF	; 0x8008af <_startMeasureBit+0x1>
     876:	60 91 b0 08 	lds	r22, 0x08B0	; 0x8008b0 <_startMeasureBit+0x2>
     87a:	70 91 b1 08 	lds	r23, 0x08B1	; 0x8008b1 <_startMeasureBit+0x3>
     87e:	80 91 b2 08 	lds	r24, 0x08B2	; 0x8008b2 <_startMeasureEventGroup>
     882:	90 91 b3 08 	lds	r25, 0x08B3	; 0x8008b3 <_startMeasureEventGroup+0x1>
     886:	fa d3       	rcall	.+2036   	; 0x107c <xEventGroupSetBits>
	printf("device has set bits");
     888:	86 e7       	ldi	r24, 0x76	; 118
     88a:	92 e0       	ldi	r25, 0x02	; 2
     88c:	9f 93       	push	r25
     88e:	8f 93       	push	r24
     890:	0e 94 2e 2c 	call	0x585c	; 0x585c <printf>

	//wait for sensors to read data
	EventBits_t uxBits = xEventGroupWaitBits(_readyEventGroup, //eventGroup it is interested in
     894:	40 91 a8 08 	lds	r20, 0x08A8	; 0x8008a8 <_readyBit>
     898:	50 91 a9 08 	lds	r21, 0x08A9	; 0x8008a9 <_readyBit+0x1>
     89c:	60 91 aa 08 	lds	r22, 0x08AA	; 0x8008aa <_readyBit+0x2>
     8a0:	70 91 ab 08 	lds	r23, 0x08AB	; 0x8008ab <_readyBit+0x3>
     8a4:	cc 24       	eor	r12, r12
     8a6:	ca 94       	dec	r12
     8a8:	dc 2c       	mov	r13, r12
     8aa:	76 01       	movw	r14, r12
     8ac:	01 e0       	ldi	r16, 0x01	; 1
     8ae:	21 e0       	ldi	r18, 0x01	; 1
     8b0:	80 91 ac 08 	lds	r24, 0x08AC	; 0x8008ac <_readyEventGroup>
     8b4:	90 91 ad 08 	lds	r25, 0x08AD	; 0x8008ad <_readyEventGroup+0x1>
     8b8:	21 d3       	rcall	.+1602   	; 0xefc <xEventGroupWaitBits>
		_readyBit, //bits it is interested in
		pdTRUE, //clears the bits 
		pdTRUE, //waits for both bits to be set
		portMAX_DELAY); //waits forever if needed

	if ((uxBits & (_readyBit)) == (_readyBit)) {
     8ba:	00 91 a8 08 	lds	r16, 0x08A8	; 0x8008a8 <_readyBit>
     8be:	10 91 a9 08 	lds	r17, 0x08A9	; 0x8008a9 <_readyBit+0x1>
     8c2:	20 91 aa 08 	lds	r18, 0x08AA	; 0x8008aa <_readyBit+0x2>
     8c6:	30 91 ab 08 	lds	r19, 0x08AB	; 0x8008ab <_readyBit+0x3>
     8ca:	dc 01       	movw	r26, r24
     8cc:	cb 01       	movw	r24, r22
     8ce:	80 23       	and	r24, r16
     8d0:	91 23       	and	r25, r17
     8d2:	a2 23       	and	r26, r18
     8d4:	b3 23       	and	r27, r19
     8d6:	0f 90       	pop	r0
     8d8:	0f 90       	pop	r0
     8da:	08 17       	cp	r16, r24
     8dc:	19 07       	cpc	r17, r25
     8de:	2a 07       	cpc	r18, r26
     8e0:	3b 07       	cpc	r19, r27
     8e2:	09 f0       	breq	.+2      	; 0x8e6 <device_startMeasuring+0x9e>
		device_setCO2ToCurrent(self, device_getCO2Data(self));
     8e4:	7e c0       	rjmp	.+252    	; 0x9e2 <device_startMeasuring+0x19a>
     8e6:	c5 01       	movw	r24, r10
     8e8:	95 df       	rcall	.-214    	; 0x814 <device_getCO2Data>
     8ea:	bc 01       	movw	r22, r24
     8ec:	c5 01       	movw	r24, r10
		device_setTemperatureToCurrent(self, device_getTemperatureData(self));
     8ee:	8d df       	rcall	.-230    	; 0x80a <device_setCO2ToCurrent>
     8f0:	c5 01       	movw	r24, r10
     8f2:	a0 df       	rcall	.-192    	; 0x834 <device_getTemperatureData>
     8f4:	bc 01       	movw	r22, r24
     8f6:	c5 01       	movw	r24, r10
		device_setHumidityToCurrent(self, device_getHumidityData(self));
     8f8:	98 df       	rcall	.-208    	; 0x82a <device_setTemperatureToCurrent>
     8fa:	c5 01       	movw	r24, r10
     8fc:	7c df       	rcall	.-264    	; 0x7f6 <device_getHumidityData>
     8fe:	bc 01       	movw	r22, r24
     900:	c5 01       	movw	r24, r10
     902:	74 df       	rcall	.-280    	; 0x7ec <device_setHumidityToCurrent>
		
		printf("device got done bit\n");
     904:	8a e8       	ldi	r24, 0x8A	; 138
     906:	92 e0       	ldi	r25, 0x02	; 2
     908:	0e 94 41 2c 	call	0x5882	; 0x5882 <puts>
		
		printf("CO2 is: %u\n", co2Reader_getCO2(self->co2reader));
     90c:	f5 01       	movw	r30, r10
     90e:	80 81       	ld	r24, Z
     910:	91 81       	ldd	r25, Z+1	; 0x01
     912:	a3 de       	rcall	.-698    	; 0x65a <co2Reader_getCO2>
     914:	1f 92       	push	r1
     916:	8f 93       	push	r24
     918:	8e e9       	ldi	r24, 0x9E	; 158
     91a:	92 e0       	ldi	r25, 0x02	; 2
     91c:	9f 93       	push	r25
     91e:	8f 93       	push	r24
     920:	0e 94 2e 2c 	call	0x585c	; 0x585c <printf>
		printf("Temperature is: %d\n", device_getTemperatureData(self));
     924:	c5 01       	movw	r24, r10
     926:	86 df       	rcall	.-244    	; 0x834 <device_getTemperatureData>
     928:	9f 93       	push	r25
     92a:	8f 93       	push	r24
     92c:	8a ea       	ldi	r24, 0xAA	; 170
     92e:	92 e0       	ldi	r25, 0x02	; 2
     930:	9f 93       	push	r25
     932:	8f 93       	push	r24
     934:	0e 94 2e 2c 	call	0x585c	; 0x585c <printf>
		printf("Humidity is: %d\n", device_getHumidityData(self));
     938:	c5 01       	movw	r24, r10
     93a:	5d df       	rcall	.-326    	; 0x7f6 <device_getHumidityData>
     93c:	9f 93       	push	r25
     93e:	8f 93       	push	r24
     940:	8e eb       	ldi	r24, 0xBE	; 190
     942:	92 e0       	ldi	r25, 0x02	; 2
     944:	9f 93       	push	r25
     946:	8f 93       	push	r24
     948:	0e 94 2e 2c 	call	0x585c	; 0x585c <printf>
		
		
		
		
		/*Perhaps loraPayload is not a good idea to be here*/
		_uplink_payload = getcurrentConditionPayload(self->currentCondition);
     94c:	f5 01       	movw	r30, r10
     94e:	64 81       	ldd	r22, Z+4	; 0x04
     950:	75 81       	ldd	r23, Z+5	; 0x05
     952:	ce 01       	movw	r24, r28
     954:	01 96       	adiw	r24, 0x01	; 1
     956:	ad de       	rcall	.-678    	; 0x6b2 <getcurrentConditionPayload>
     958:	86 e1       	ldi	r24, 0x16	; 22
     95a:	fe 01       	movw	r30, r28
     95c:	31 96       	adiw	r30, 0x01	; 1
     95e:	a0 e9       	ldi	r26, 0x90	; 144
     960:	b8 e0       	ldi	r27, 0x08	; 8
     962:	01 90       	ld	r0, Z+
     964:	0d 92       	st	X+, r0
     966:	8a 95       	dec	r24
     968:	e1 f7       	brne	.-8      	; 0x962 <device_startMeasuring+0x11a>
     96a:	00 e9       	ldi	r16, 0x90	; 144
		
		//vTaskDelay(1000);
		
		printf("The temperature in device is: %d\n", _uplink_payload.bytes[0]);
     96c:	18 e0       	ldi	r17, 0x08	; 8
     96e:	f8 01       	movw	r30, r16
     970:	82 81       	ldd	r24, Z+2	; 0x02
     972:	1f 92       	push	r1
     974:	8f 93       	push	r24
     976:	8f ec       	ldi	r24, 0xCF	; 207
     978:	92 e0       	ldi	r25, 0x02	; 2
     97a:	9f 93       	push	r25
     97c:	8f 93       	push	r24
     97e:	0e 94 2e 2c 	call	0x585c	; 0x585c <printf>
     982:	f8 01       	movw	r30, r16
		printf("The temperature2 in device is: %d\n", _uplink_payload.bytes[1]);
     984:	83 81       	ldd	r24, Z+3	; 0x03
     986:	1f 92       	push	r1
     988:	8f 93       	push	r24
     98a:	81 ef       	ldi	r24, 0xF1	; 241
     98c:	92 e0       	ldi	r25, 0x02	; 2
     98e:	9f 93       	push	r25
     990:	8f 93       	push	r24
     992:	0e 94 2e 2c 	call	0x585c	; 0x585c <printf>
     996:	f8 01       	movw	r30, r16
		printf("The humidity in device is: %d\n", _uplink_payload.bytes[2]);
     998:	84 81       	ldd	r24, Z+4	; 0x04
     99a:	1f 92       	push	r1
     99c:	8f 93       	push	r24
     99e:	84 e1       	ldi	r24, 0x14	; 20
     9a0:	93 e0       	ldi	r25, 0x03	; 3
     9a2:	9f 93       	push	r25
     9a4:	8f 93       	push	r24
     9a6:	0e 94 2e 2c 	call	0x585c	; 0x585c <printf>
     9aa:	f8 01       	movw	r30, r16
		printf("The humidity2 in device is: %d\n", _uplink_payload.bytes[3]);		
     9ac:	85 81       	ldd	r24, Z+5	; 0x05
     9ae:	1f 92       	push	r1
     9b0:	8f 93       	push	r24
     9b2:	83 e3       	ldi	r24, 0x33	; 51
     9b4:	93 e0       	ldi	r25, 0x03	; 3
     9b6:	9f 93       	push	r25
     9b8:	8f 93       	push	r24
     9ba:	0e 94 2e 2c 	call	0x585c	; 0x585c <printf>
     9be:	0f ef       	ldi	r16, 0xFF	; 255
		
		xMessageBufferSend(_uplinkmessageBuffer,(void*) &_uplink_payload,sizeof(_uplink_payload),portMAX_DELAY);
     9c0:	1f ef       	ldi	r17, 0xFF	; 255
     9c2:	98 01       	movw	r18, r16
     9c4:	46 e1       	ldi	r20, 0x16	; 22
     9c6:	50 e0       	ldi	r21, 0x00	; 0
     9c8:	60 e9       	ldi	r22, 0x90	; 144
     9ca:	78 e0       	ldi	r23, 0x08	; 8
     9cc:	80 91 a6 08 	lds	r24, 0x08A6	; 0x8008a6 <_uplinkmessageBuffer>
     9d0:	90 91 a7 08 	lds	r25, 0x08A7	; 0x8008a7 <_uplinkmessageBuffer+0x1>
     9d4:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <xStreamBufferSend>
     9d8:	0f b6       	in	r0, 0x3f	; 63
     9da:	f8 94       	cli
     9dc:	de bf       	out	0x3e, r29	; 62
     9de:	0f be       	out	0x3f, r0	; 63
     9e0:	cd bf       	out	0x3d, r28	; 61
     9e2:	66 96       	adiw	r28, 0x16	; 22
		
		
	}
}
     9e4:	0f b6       	in	r0, 0x3f	; 63
     9e6:	f8 94       	cli
     9e8:	de bf       	out	0x3e, r29	; 62
     9ea:	0f be       	out	0x3f, r0	; 63
     9ec:	cd bf       	out	0x3d, r28	; 61
     9ee:	df 91       	pop	r29
     9f0:	cf 91       	pop	r28
     9f2:	1f 91       	pop	r17
     9f4:	0f 91       	pop	r16
     9f6:	ff 90       	pop	r15
     9f8:	ef 90       	pop	r14
     9fa:	df 90       	pop	r13
     9fc:	cf 90       	pop	r12
     9fe:	bf 90       	pop	r11
     a00:	af 90       	pop	r10
     a02:	08 95       	ret

00000a04 <device_executeTask>:
     a04:	ec 01       	movw	r28, r24
}

//devided so we can test
void device_executeTask(device_t self) {
	for (;;)
		device_startMeasuring(self);
     a06:	ce 01       	movw	r24, r28
     a08:	1f df       	rcall	.-450    	; 0x848 <device_startMeasuring>
     a0a:	fd cf       	rjmp	.-6      	; 0xa06 <device_executeTask+0x2>

00000a0c <humAndTempReader_create>:
void humAndTempReader_destroy(humAndTempReader_t self) {
	if (self == NULL)
	return;

	//delete will clear the allocated memory to the task + we need to remove everything else
	vTaskDelete(self->handleTask);
     a0c:	2f 92       	push	r2
     a0e:	3f 92       	push	r3
     a10:	4f 92       	push	r4
     a12:	5f 92       	push	r5
     a14:	6f 92       	push	r6
     a16:	7f 92       	push	r7
     a18:	8f 92       	push	r8
     a1a:	9f 92       	push	r9
     a1c:	af 92       	push	r10
     a1e:	bf 92       	push	r11
     a20:	cf 92       	push	r12
     a22:	df 92       	push	r13
     a24:	ef 92       	push	r14
     a26:	ff 92       	push	r15
     a28:	0f 93       	push	r16
     a2a:	1f 93       	push	r17
     a2c:	cf 93       	push	r28
     a2e:	df 93       	push	r29
     a30:	88 2e       	mov	r8, r24
     a32:	96 2e       	mov	r9, r22
     a34:	1a 01       	movw	r2, r20
     a36:	28 01       	movw	r4, r16
     a38:	39 01       	movw	r6, r18
     a3a:	61 e0       	ldi	r22, 0x01	; 1
     a3c:	70 e0       	ldi	r23, 0x00	; 0
     a3e:	86 e0       	ldi	r24, 0x06	; 6
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	0e 94 90 2a 	call	0x5520	; 0x5520 <calloc>
     a46:	ec 01       	movw	r28, r24
     a48:	00 97       	sbiw	r24, 0x00	; 0
     a4a:	91 f1       	breq	.+100    	; 0xab0 <humAndTempReader_create+0xa4>
     a4c:	19 82       	std	Y+1, r1	; 0x01
     a4e:	18 82       	st	Y, r1
     a50:	1b 82       	std	Y+3, r1	; 0x03
     a52:	1a 82       	std	Y+2, r1	; 0x02
     a54:	30 92 bf 08 	sts	0x08BF, r3	; 0x8008bf <_startMeasureEventGroup+0x1>
     a58:	20 92 be 08 	sts	0x08BE, r2	; 0x8008be <_startMeasureEventGroup>
     a5c:	40 92 ba 08 	sts	0x08BA, r4	; 0x8008ba <_startMeasureBit>
     a60:	50 92 bb 08 	sts	0x08BB, r5	; 0x8008bb <_startMeasureBit+0x1>
     a64:	60 92 bc 08 	sts	0x08BC, r6	; 0x8008bc <_startMeasureBit+0x2>
     a68:	70 92 bd 08 	sts	0x08BD, r7	; 0x8008bd <_startMeasureBit+0x3>
     a6c:	f0 92 b9 08 	sts	0x08B9, r15	; 0x8008b9 <_readyEventGroup+0x1>
     a70:	e0 92 b8 08 	sts	0x08B8, r14	; 0x8008b8 <_readyEventGroup>
     a74:	a0 92 b4 08 	sts	0x08B4, r10	; 0x8008b4 <_readyBit>
     a78:	b0 92 b5 08 	sts	0x08B5, r11	; 0x8008b5 <_readyBit+0x1>
     a7c:	c0 92 b6 08 	sts	0x08B6, r12	; 0x8008b6 <_readyBit+0x2>
     a80:	d0 92 b7 08 	sts	0x08B7, r13	; 0x8008b7 <_readyBit+0x3>
     a84:	49 2d       	mov	r20, r9
     a86:	50 e0       	ldi	r21, 0x00	; 0
     a88:	7c 01       	movw	r14, r24
     a8a:	84 e0       	ldi	r24, 0x04	; 4
     a8c:	e8 0e       	add	r14, r24
     a8e:	f1 1c       	adc	r15, r1
     a90:	08 2d       	mov	r16, r8
     a92:	9e 01       	movw	r18, r28
     a94:	63 e5       	ldi	r22, 0x53	; 83
     a96:	73 e0       	ldi	r23, 0x03	; 3
     a98:	8e ee       	ldi	r24, 0xEE	; 238
     a9a:	95 e0       	ldi	r25, 0x05	; 5
     a9c:	0e 94 87 12 	call	0x250e	; 0x250e <xTaskCreate>
     aa0:	84 e6       	ldi	r24, 0x64	; 100
     aa2:	93 e0       	ldi	r25, 0x03	; 3
     aa4:	9f 93       	push	r25
     aa6:	8f 93       	push	r24
     aa8:	0e 94 2e 2c 	call	0x585c	; 0x585c <printf>
     aac:	0f 90       	pop	r0
     aae:	0f 90       	pop	r0
     ab0:	ce 01       	movw	r24, r28
     ab2:	df 91       	pop	r29
     ab4:	cf 91       	pop	r28
     ab6:	1f 91       	pop	r17
     ab8:	0f 91       	pop	r16
     aba:	ff 90       	pop	r15
     abc:	ef 90       	pop	r14
     abe:	df 90       	pop	r13
     ac0:	cf 90       	pop	r12
     ac2:	bf 90       	pop	r11
     ac4:	af 90       	pop	r10
     ac6:	9f 90       	pop	r9
     ac8:	8f 90       	pop	r8
     aca:	7f 90       	pop	r7
     acc:	6f 90       	pop	r6
     ace:	5f 90       	pop	r5
     ad0:	4f 90       	pop	r4
     ad2:	3f 90       	pop	r3
     ad4:	2f 90       	pop	r2
     ad6:	08 95       	ret

00000ad8 <humAndTempReader_measure>:
	for (;;) {
		humAndTempReader_measure(self);
	}
}

void humAndTempReader_measure(humAndTempReader_t self) {//dummy
     ad8:	cf 92       	push	r12
     ada:	df 92       	push	r13
     adc:	ef 92       	push	r14
     ade:	ff 92       	push	r15
     ae0:	0f 93       	push	r16
     ae2:	1f 93       	push	r17
     ae4:	cf 93       	push	r28
     ae6:	df 93       	push	r29
     ae8:	ec 01       	movw	r28, r24
	EventBits_t uxBits = xEventGroupWaitBits(_startMeasureEventGroup, //eventGroup
     aea:	40 91 ba 08 	lds	r20, 0x08BA	; 0x8008ba <_startMeasureBit>
     aee:	50 91 bb 08 	lds	r21, 0x08BB	; 0x8008bb <_startMeasureBit+0x1>
     af2:	60 91 bc 08 	lds	r22, 0x08BC	; 0x8008bc <_startMeasureBit+0x2>
     af6:	70 91 bd 08 	lds	r23, 0x08BD	; 0x8008bd <_startMeasureBit+0x3>
     afa:	cc 24       	eor	r12, r12
     afc:	ca 94       	dec	r12
     afe:	dc 2c       	mov	r13, r12
     b00:	76 01       	movw	r14, r12
     b02:	01 e0       	ldi	r16, 0x01	; 1
     b04:	21 e0       	ldi	r18, 0x01	; 1
     b06:	80 91 be 08 	lds	r24, 0x08BE	; 0x8008be <_startMeasureEventGroup>
     b0a:	90 91 bf 08 	lds	r25, 0x08BF	; 0x8008bf <_startMeasureEventGroup+0x1>
     b0e:	f6 d1       	rcall	.+1004   	; 0xefc <xEventGroupWaitBits>
	_startMeasureBit, //bits it is interested i
	pdTRUE, //clears the bits
	pdTRUE, //waits for both bits to be set
	portMAX_DELAY); //wait

	if ((uxBits & (_startMeasureBit)) == (_startMeasureBit)) {
     b10:	00 91 ba 08 	lds	r16, 0x08BA	; 0x8008ba <_startMeasureBit>
     b14:	10 91 bb 08 	lds	r17, 0x08BB	; 0x8008bb <_startMeasureBit+0x1>
     b18:	20 91 bc 08 	lds	r18, 0x08BC	; 0x8008bc <_startMeasureBit+0x2>
     b1c:	30 91 bd 08 	lds	r19, 0x08BD	; 0x8008bd <_startMeasureBit+0x3>
     b20:	dc 01       	movw	r26, r24
     b22:	cb 01       	movw	r24, r22
     b24:	80 23       	and	r24, r16
     b26:	91 23       	and	r25, r17
     b28:	a2 23       	and	r26, r18
     b2a:	b3 23       	and	r27, r19
     b2c:	08 17       	cp	r16, r24
     b2e:	19 07       	cpc	r17, r25
     b30:	2a 07       	cpc	r18, r26
     b32:	3b 07       	cpc	r19, r27
     b34:	09 f0       	breq	.+2      	; 0xb38 <humAndTempReader_measure+0x60>
     b36:	49 c0       	rjmp	.+146    	; 0xbca <humAndTempReader_measure+0xf2>
		hih8120Wakeup();
     b38:	0e 94 18 1c 	call	0x3830	; 0x3830 <hih8120Wakeup>
		vTaskDelay(50);
     b3c:	62 e3       	ldi	r22, 0x32	; 50
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	90 e0       	ldi	r25, 0x00	; 0
     b44:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <vTaskDelay>
		hih8120Meassure();
     b48:	0e 94 2d 1c 	call	0x385a	; 0x385a <hih8120Meassure>
		vTaskDelay(5);
     b4c:	65 e0       	ldi	r22, 0x05	; 5
     b4e:	70 e0       	ldi	r23, 0x00	; 0
     b50:	80 e0       	ldi	r24, 0x00	; 0
     b52:	90 e0       	ldi	r25, 0x00	; 0
     b54:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <vTaskDelay>
		if(hih8120IsReady())
     b58:	0e 94 15 1c 	call	0x382a	; 0x382a <hih8120IsReady>
     b5c:	88 23       	and	r24, r24
     b5e:	41 f1       	breq	.+80     	; 0xbb0 <humAndTempReader_measure+0xd8>
		{
			self->humidity = hih8120GetHumidityPercent_x10();
     b60:	0e 94 53 1c 	call	0x38a6	; 0x38a6 <hih8120GetHumidityPercent_x10>
     b64:	99 83       	std	Y+1, r25	; 0x01
     b66:	88 83       	st	Y, r24
			self->temperature = hih8120GetTemperature_x10();
     b68:	0e 94 79 1c 	call	0x38f2	; 0x38f2 <hih8120GetTemperature_x10>
     b6c:	9b 83       	std	Y+3, r25	; 0x03
     b6e:	8a 83       	std	Y+2, r24	; 0x02
			printf("humidity and temperature done bit set\n");
     b70:	83 e8       	ldi	r24, 0x83	; 131
     b72:	93 e0       	ldi	r25, 0x03	; 3
     b74:	0e 94 41 2c 	call	0x5882	; 0x5882 <puts>
			printf("Humidity: %u\n", self->humidity);
     b78:	89 81       	ldd	r24, Y+1	; 0x01
     b7a:	8f 93       	push	r24
     b7c:	88 81       	ld	r24, Y
     b7e:	8f 93       	push	r24
     b80:	89 ea       	ldi	r24, 0xA9	; 169
     b82:	93 e0       	ldi	r25, 0x03	; 3
     b84:	9f 93       	push	r25
     b86:	8f 93       	push	r24
     b88:	0e 94 2e 2c 	call	0x585c	; 0x585c <printf>
			printf("TEMP: %d\n", self->temperature);
     b8c:	8b 81       	ldd	r24, Y+3	; 0x03
     b8e:	8f 93       	push	r24
     b90:	8a 81       	ldd	r24, Y+2	; 0x02
     b92:	8f 93       	push	r24
     b94:	87 eb       	ldi	r24, 0xB7	; 183
     b96:	93 e0       	ldi	r25, 0x03	; 3
     b98:	9f 93       	push	r25
     b9a:	8f 93       	push	r24
     b9c:	0e 94 2e 2c 	call	0x585c	; 0x585c <printf>
     ba0:	8d b7       	in	r24, 0x3d	; 61
     ba2:	9e b7       	in	r25, 0x3e	; 62
     ba4:	08 96       	adiw	r24, 0x08	; 8
     ba6:	0f b6       	in	r0, 0x3f	; 63
     ba8:	f8 94       	cli
     baa:	9e bf       	out	0x3e, r25	; 62
     bac:	0f be       	out	0x3f, r0	; 63
     bae:	8d bf       	out	0x3d, r24	; 61
		}
		//set done bit so that device knows meassurement is done
		xEventGroupSetBits(_readyEventGroup, _readyBit);
     bb0:	40 91 b4 08 	lds	r20, 0x08B4	; 0x8008b4 <_readyBit>
     bb4:	50 91 b5 08 	lds	r21, 0x08B5	; 0x8008b5 <_readyBit+0x1>
     bb8:	60 91 b6 08 	lds	r22, 0x08B6	; 0x8008b6 <_readyBit+0x2>
     bbc:	70 91 b7 08 	lds	r23, 0x08B7	; 0x8008b7 <_readyBit+0x3>
     bc0:	80 91 b8 08 	lds	r24, 0x08B8	; 0x8008b8 <_readyEventGroup>
     bc4:	90 91 b9 08 	lds	r25, 0x08B9	; 0x8008b9 <_readyEventGroup+0x1>
     bc8:	59 d2       	rcall	.+1202   	; 0x107c <xEventGroupSetBits>
	}
}
     bca:	df 91       	pop	r29
     bcc:	cf 91       	pop	r28
     bce:	1f 91       	pop	r17
     bd0:	0f 91       	pop	r16
     bd2:	ff 90       	pop	r15
     bd4:	ef 90       	pop	r14
     bd6:	df 90       	pop	r13
     bd8:	cf 90       	pop	r12
     bda:	08 95       	ret

00000bdc <humAndTempReader_executeTask>:
	//free(self->temperature);
	//free(self);
}

//actual task, methods devided so that it is possible to test
void humAndTempReader_executeTask(humAndTempReader_t self) {
     bdc:	ec 01       	movw	r28, r24
	for (;;) {
		humAndTempReader_measure(self);
     bde:	ce 01       	movw	r24, r28
     be0:	7b df       	rcall	.-266    	; 0xad8 <humAndTempReader_measure>
     be2:	fd cf       	rjmp	.-6      	; 0xbde <humAndTempReader_executeTask+0x2>

00000be4 <humAndTempReader_getHumidity>:
	}
}

uint16_t humAndTempReader_getHumidity(humAndTempReader_t self){
	return self->humidity;
}
     be4:	fc 01       	movw	r30, r24
     be6:	80 81       	ld	r24, Z
     be8:	91 81       	ldd	r25, Z+1	; 0x01
     bea:	08 95       	ret

00000bec <humAndTempReader_getTemperature>:

int16_t humAndTempReader_getTemperature(humAndTempReader_t self){
	return self->temperature;
}
     bec:	fc 01       	movw	r30, r24
     bee:	82 81       	ldd	r24, Z+2	; 0x02
     bf0:	93 81       	ldd	r25, Z+3	; 0x03
     bf2:	08 95       	ret

00000bf4 <lora_UpLinkHandler_create>:
/*Check for the parameters*/



void lora_UpLinkHandler_create(UBaseType_t lora_handler_task_priority, MessageBufferHandle_t xMessageBuffer)
{
     bf4:	ef 92       	push	r14
     bf6:	ff 92       	push	r15
     bf8:	0f 93       	push	r16
     bfa:	9b 01       	movw	r18, r22
	_buffer = xMessageBuffer;
	
	
	
	xTaskCreate(
     bfc:	e1 2c       	mov	r14, r1
     bfe:	f1 2c       	mov	r15, r1
     c00:	08 2f       	mov	r16, r24
     c02:	48 e8       	ldi	r20, 0x88	; 136
     c04:	51 e0       	ldi	r21, 0x01	; 1
     c06:	61 ec       	ldi	r22, 0xC1	; 193
     c08:	73 e0       	ldi	r23, 0x03	; 3
     c0a:	8b e4       	ldi	r24, 0x4B	; 75
     c0c:	97 e0       	ldi	r25, 0x07	; 7
     c0e:	0e 94 87 12 	call	0x250e	; 0x250e <xTaskCreate>
	,  (const portCHAR *)"LRUpHand"  // A name just for humans
	,  configMINIMAL_STACK_SIZE+200  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  xMessageBuffer
	,  lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}
     c12:	0f 91       	pop	r16
     c14:	ff 90       	pop	r15
     c16:	ef 90       	pop	r14
     c18:	08 95       	ret

00000c1a <lora_UpLinkHandler_task>:
	
	/*Receives message from message buffer shared between it and the application responsible for gathering the data
	--> Should be called every 5 minutes from application
	*/
	void lora_UpLinkHandler_task(MessageBufferHandle_t xMessageBuffer)
	{	
     c1a:	df 92       	push	r13
     c1c:	ef 92       	push	r14
     c1e:	ff 92       	push	r15
     c20:	0f 93       	push	r16
     c22:	1f 93       	push	r17
     c24:	cf 93       	push	r28
     c26:	df 93       	push	r29
     c28:	7c 01       	movw	r14, r24
		size_t xBytesToSend;
		char rxData[50];
		
		// Hardware reset of LoRaWAN transceiver
		lora_driver_reset_rn2483(1);
     c2a:	81 e0       	ldi	r24, 0x01	; 1
     c2c:	0e 94 98 1f 	call	0x3f30	; 0x3f30 <lora_driver_reset_rn2483>
		vTaskDelay(2);
     c30:	62 e0       	ldi	r22, 0x02	; 2
     c32:	70 e0       	ldi	r23, 0x00	; 0
     c34:	80 e0       	ldi	r24, 0x00	; 0
     c36:	90 e0       	ldi	r25, 0x00	; 0
     c38:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <vTaskDelay>
		lora_driver_reset_rn2483(0);
     c3c:	80 e0       	ldi	r24, 0x00	; 0
     c3e:	0e 94 98 1f 	call	0x3f30	; 0x3f30 <lora_driver_reset_rn2483>
		// Give it a chance to wakeup
		vTaskDelay(150);
     c42:	66 e9       	ldi	r22, 0x96	; 150
     c44:	70 e0       	ldi	r23, 0x00	; 0
     c46:	80 e0       	ldi	r24, 0x00	; 0
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <vTaskDelay>

		lora_driver_flush_buffers(); // get rid of first version string from module after reset!
     c4e:	0e 94 4e 1f 	call	0x3e9c	; 0x3e9c <lora_driver_flush_buffers>


static void _lora_setup(void)
{
	e_LoRa_return_code_t rc;
	led_slow_blink(led_ST2); // OPTIONAL: Led the green led blink slowly while we are setting up LoRa
     c52:	81 e0       	ldi	r24, 0x01	; 1
     c54:	0e 94 a6 1d 	call	0x3b4c	; 0x3b4c <led_slow_blink>
	//The below code is required to be executed only once due to the fact that these MAC settings
	// can be stored inside of the tranciever
	//START ON ONE TIME USE CODE

	// Factory reset the transceiver
	printf("FactoryReset >%s<\n", lora_driver_map_return_code_to_text(lora_driver_rn2483_factory_reset()));
     c58:	0e 94 ac 1f 	call	0x3f58	; 0x3f58 <lora_driver_rn2483_factory_reset>
     c5c:	0e 94 29 22 	call	0x4452	; 0x4452 <lora_driver_map_return_code_to_text>
     c60:	9f 93       	push	r25
     c62:	8f 93       	push	r24
     c64:	8a ec       	ldi	r24, 0xCA	; 202
     c66:	93 e0       	ldi	r25, 0x03	; 3
     c68:	9f 93       	push	r25
     c6a:	8f 93       	push	r24
     c6c:	0e 94 2e 2c 	call	0x585c	; 0x585c <printf>
	
	// Configure to EU868 LoRaWAN standards
	printf("Configure to EU868 >%s<\n", lora_driver_map_return_code_to_text(lora_driver_configure_to_eu868()));
     c70:	0e 94 2a 21 	call	0x4254	; 0x4254 <lora_driver_configure_to_eu868>
     c74:	0e 94 29 22 	call	0x4452	; 0x4452 <lora_driver_map_return_code_to_text>
     c78:	9f 93       	push	r25
     c7a:	8f 93       	push	r24
     c7c:	8d ed       	ldi	r24, 0xDD	; 221
     c7e:	93 e0       	ldi	r25, 0x03	; 3
     c80:	9f 93       	push	r25
     c82:	8f 93       	push	r24
     c84:	0e 94 2e 2c 	call	0x585c	; 0x585c <printf>

	// Get the transceivers HW EUI
	rc = lora_driver_get_rn2483_hweui(_out_buf);
     c88:	86 ed       	ldi	r24, 0xD6	; 214
     c8a:	98 e0       	ldi	r25, 0x08	; 8
     c8c:	0e 94 be 1f 	call	0x3f7c	; 0x3f7c <lora_driver_get_rn2483_hweui>
	printf("Get HWEUI >%s<: %s\n",lora_driver_map_return_code_to_text(rc), _out_buf);
     c90:	0e 94 29 22 	call	0x4452	; 0x4452 <lora_driver_map_return_code_to_text>
     c94:	c6 ed       	ldi	r28, 0xD6	; 214
     c96:	d8 e0       	ldi	r29, 0x08	; 8
     c98:	df 93       	push	r29
     c9a:	cf 93       	push	r28
     c9c:	9f 93       	push	r25
     c9e:	8f 93       	push	r24
     ca0:	86 ef       	ldi	r24, 0xF6	; 246
     ca2:	93 e0       	ldi	r25, 0x03	; 3
     ca4:	9f 93       	push	r25
     ca6:	8f 93       	push	r24
     ca8:	0e 94 2e 2c 	call	0x585c	; 0x585c <printf>

	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_map_return_code_to_text(lora_driver_set_device_identifier(_out_buf)));
     cac:	ce 01       	movw	r24, r28
     cae:	0e 94 da 1f 	call	0x3fb4	; 0x3fb4 <lora_driver_set_device_identifier>
     cb2:	0e 94 29 22 	call	0x4452	; 0x4452 <lora_driver_map_return_code_to_text>
     cb6:	9f 93       	push	r25
     cb8:	8f 93       	push	r24
     cba:	df 93       	push	r29
     cbc:	cf 93       	push	r28
     cbe:	8a e0       	ldi	r24, 0x0A	; 10
     cc0:	94 e0       	ldi	r25, 0x04	; 4
     cc2:	9f 93       	push	r25
     cc4:	8f 93       	push	r24
     cc6:	0e 94 2e 2c 	call	0x585c	; 0x585c <printf>

	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_map_return_code_to_text(lora_driver_set_otaa_identity(LORA_appEUI,LORA_appKEY,_out_buf)));
     cca:	ae 01       	movw	r20, r28
     ccc:	6f e1       	ldi	r22, 0x1F	; 31
     cce:	74 e0       	ldi	r23, 0x04	; 4
     cd0:	80 e4       	ldi	r24, 0x40	; 64
     cd2:	94 e0       	ldi	r25, 0x04	; 4
     cd4:	0e 94 08 22 	call	0x4410	; 0x4410 <lora_driver_set_otaa_identity>
     cd8:	0e 94 29 22 	call	0x4452	; 0x4452 <lora_driver_map_return_code_to_text>
     cdc:	9f 93       	push	r25
     cde:	8f 93       	push	r24
     ce0:	df 93       	push	r29
     ce2:	cf 93       	push	r28
     ce4:	8f e1       	ldi	r24, 0x1F	; 31
     ce6:	94 e0       	ldi	r25, 0x04	; 4
     ce8:	9f 93       	push	r25
     cea:	8f 93       	push	r24
     cec:	80 e4       	ldi	r24, 0x40	; 64
     cee:	94 e0       	ldi	r25, 0x04	; 4
     cf0:	9f 93       	push	r25
     cf2:	8f 93       	push	r24
     cf4:	81 e5       	ldi	r24, 0x51	; 81
     cf6:	94 e0       	ldi	r25, 0x04	; 4
     cf8:	9f 93       	push	r25
     cfa:	8f 93       	push	r24
     cfc:	0e 94 2e 2c 	call	0x585c	; 0x585c <printf>

	// Save all the MAC settings in the transceiver
	printf("Save mac >%s<\n",lora_driver_map_return_code_to_text(lora_driver_save_mac()));
     d00:	0e 94 0d 20 	call	0x401a	; 0x401a <lora_driver_save_mac>
     d04:	0e 94 29 22 	call	0x4452	; 0x4452 <lora_driver_map_return_code_to_text>
     d08:	9f 93       	push	r25
     d0a:	8f 93       	push	r24
     d0c:	87 e8       	ldi	r24, 0x87	; 135
     d0e:	94 e0       	ldi	r25, 0x04	; 4
     d10:	9f 93       	push	r25
     d12:	8f 93       	push	r24
     d14:	0e 94 2e 2c 	call	0x585c	; 0x585c <printf>

	//END OF ONE TIME USE CODE
	
	
	// Enable Adaptive Data Rate
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_map_return_code_to_text(lora_driver_set_adaptive_data_rate(LoRa_ON)));
     d18:	8d b7       	in	r24, 0x3d	; 61
     d1a:	9e b7       	in	r25, 0x3e	; 62
     d1c:	82 96       	adiw	r24, 0x22	; 34
     d1e:	0f b6       	in	r0, 0x3f	; 63
     d20:	f8 94       	cli
     d22:	9e bf       	out	0x3e, r25	; 62
     d24:	0f be       	out	0x3f, r0	; 63
     d26:	8d bf       	out	0x3d, r24	; 61
     d28:	81 e0       	ldi	r24, 0x01	; 1
     d2a:	0e 94 07 21 	call	0x420e	; 0x420e <lora_driver_set_adaptive_data_rate>
     d2e:	0e 94 29 22 	call	0x4452	; 0x4452 <lora_driver_map_return_code_to_text>
     d32:	9f 93       	push	r25
     d34:	8f 93       	push	r24
     d36:	86 e9       	ldi	r24, 0x96	; 150
     d38:	94 e0       	ldi	r25, 0x04	; 4
     d3a:	9f 93       	push	r25
     d3c:	8f 93       	push	r24
     d3e:	0e 94 2e 2c 	call	0x585c	; 0x585c <printf>

	// Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	printf("Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_map_return_code_to_text(lora_driver_set_receive_delay(500)));
     d42:	84 ef       	ldi	r24, 0xF4	; 244
     d44:	91 e0       	ldi	r25, 0x01	; 1
     d46:	0e 94 12 21 	call	0x4224	; 0x4224 <lora_driver_set_receive_delay>
     d4a:	0e 94 29 22 	call	0x4452	; 0x4452 <lora_driver_map_return_code_to_text>
     d4e:	9f 93       	push	r25
     d50:	8f 93       	push	r24
     d52:	81 e0       	ldi	r24, 0x01	; 1
     d54:	8f 93       	push	r24
     d56:	84 ef       	ldi	r24, 0xF4	; 244
     d58:	8f 93       	push	r24
     d5a:	87 eb       	ldi	r24, 0xB7	; 183
     d5c:	94 e0       	ldi	r25, 0x04	; 4
     d5e:	9f 93       	push	r25
     d60:	8f 93       	push	r24
     d62:	0e 94 2e 2c 	call	0x585c	; 0x585c <printf>
     d66:	8d b7       	in	r24, 0x3d	; 61
     d68:	9e b7       	in	r25, 0x3e	; 62
     d6a:	0a 96       	adiw	r24, 0x0a	; 10
     d6c:	0f b6       	in	r0, 0x3f	; 63
     d6e:	f8 94       	cli
     d70:	9e bf       	out	0x3e, r25	; 62
     d72:	0f be       	out	0x3f, r0	; 63
     d74:	8d bf       	out	0x3d, r24	; 61
     d76:	ca e0       	ldi	r28, 0x0A	; 10
     d78:	d0 e0       	ldi	r29, 0x00	; 0
	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
	
	do {
		rc = lora_driver_join(LoRa_OTAA);
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_map_return_code_to_text(rc));
     d7a:	07 ed       	ldi	r16, 0xD7	; 215
     d7c:	14 e0       	ldi	r17, 0x04	; 4

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
	
	do {
		rc = lora_driver_join(LoRa_OTAA);
     d7e:	80 e0       	ldi	r24, 0x00	; 0
     d80:	0e 94 13 20 	call	0x4026	; 0x4026 <lora_driver_join>
     d84:	d8 2e       	mov	r13, r24
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_map_return_code_to_text(rc));
     d86:	0e 94 29 22 	call	0x4452	; 0x4452 <lora_driver_map_return_code_to_text>
     d8a:	9f 93       	push	r25
     d8c:	8f 93       	push	r24
     d8e:	df 93       	push	r29
     d90:	cf 93       	push	r28
     d92:	1f 93       	push	r17
     d94:	0f 93       	push	r16
     d96:	0e 94 2e 2c 	call	0x585c	; 0x585c <printf>

		if ( rc != LoRa_ACCEPTED)
     d9a:	0f 90       	pop	r0
     d9c:	0f 90       	pop	r0
     d9e:	0f 90       	pop	r0
     da0:	0f 90       	pop	r0
     da2:	0f 90       	pop	r0
     da4:	0f 90       	pop	r0
     da6:	88 e0       	ldi	r24, 0x08	; 8
     da8:	d8 16       	cp	r13, r24
     daa:	09 f4       	brne	.+2      	; 0xdae <lora_UpLinkHandler_task+0x194>
     dac:	5c c0       	rjmp	.+184    	; 0xe66 <lora_UpLinkHandler_task+0x24c>
		{
			// Make the red led pulse to tell something went wrong
			led_long_puls(led_ST1); // OPTIONAL
     dae:	80 e0       	ldi	r24, 0x00	; 0
     db0:	0e 94 12 1e 	call	0x3c24	; 0x3c24 <led_long_puls>
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
     db4:	66 e3       	ldi	r22, 0x36	; 54
     db6:	71 e0       	ldi	r23, 0x01	; 1
     db8:	80 e0       	ldi	r24, 0x00	; 0
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <vTaskDelay>
     dc0:	21 97       	sbiw	r28, 0x01	; 1
		}
		else
		{
			break;
		}
	} while (--maxJoinTriesLeft);
     dc2:	e9 f6       	brne	.-70     	; 0xd7e <lora_UpLinkHandler_task+0x164>
     dc4:	49 c0       	rjmp	.+146    	; 0xe58 <lora_UpLinkHandler_task+0x23e>
		led_fast_blink(led_ST1); // OPTIONAL

		// Lets stay here
		while (1)
		{
			taskYIELD();
     dc6:	72 d4       	rcall	.+2276   	; 0x16ac <vPortYield>
     dc8:	fe cf       	rjmp	.-4      	; 0xdc6 <lora_UpLinkHandler_task+0x1ac>
			//_uplink_payload = (_uplink_payload) &rxData;
			
			/**< Status led ST4 (BLUE)*/
			//Makes the led light up in a short period.
			
			led_short_puls(led_ST4);
     dca:	83 e0       	ldi	r24, 0x03	; 3
     dcc:	0e 94 24 1e 	call	0x3c48	; 0x3c48 <led_short_puls>
			//_uplink_payload.port_no = 1;
			//_uplink_payload.len = 4;
			
			printf("The temperature in upLink is: %d\n", _uplink_payload.bytes[0]);
     dd0:	c0 ec       	ldi	r28, 0xC0	; 192
     dd2:	d8 e0       	ldi	r29, 0x08	; 8
     dd4:	8a 81       	ldd	r24, Y+2	; 0x02
     dd6:	1f 92       	push	r1
     dd8:	8f 93       	push	r24
     dda:	87 ef       	ldi	r24, 0xF7	; 247
     ddc:	94 e0       	ldi	r25, 0x04	; 4
     dde:	9f 93       	push	r25
     de0:	8f 93       	push	r24
     de2:	0e 94 2e 2c 	call	0x585c	; 0x585c <printf>
			printf("The temperature2 in upLink is: %d\n", _uplink_payload.bytes[1]);
     de6:	8b 81       	ldd	r24, Y+3	; 0x03
     de8:	1f 92       	push	r1
     dea:	8f 93       	push	r24
     dec:	89 e1       	ldi	r24, 0x19	; 25
     dee:	95 e0       	ldi	r25, 0x05	; 5
     df0:	9f 93       	push	r25
     df2:	8f 93       	push	r24
     df4:	0e 94 2e 2c 	call	0x585c	; 0x585c <printf>
			printf("The humidity in upLink is: %u\n", _uplink_payload.bytes[2]);
     df8:	8c 81       	ldd	r24, Y+4	; 0x04
     dfa:	1f 92       	push	r1
     dfc:	8f 93       	push	r24
     dfe:	8c e3       	ldi	r24, 0x3C	; 60
     e00:	95 e0       	ldi	r25, 0x05	; 5
     e02:	9f 93       	push	r25
     e04:	8f 93       	push	r24
     e06:	0e 94 2e 2c 	call	0x585c	; 0x585c <printf>
			printf("The humidity2 in upLink is: %u\n", _uplink_payload.bytes[3]);
     e0a:	8d 81       	ldd	r24, Y+5	; 0x05
     e0c:	1f 92       	push	r1
     e0e:	8f 93       	push	r24
     e10:	8b e5       	ldi	r24, 0x5B	; 91
     e12:	95 e0       	ldi	r25, 0x05	; 5
     e14:	9f 93       	push	r25
     e16:	8f 93       	push	r24
     e18:	0e 94 2e 2c 	call	0x585c	; 0x585c <printf>
			
			
			printf("Upload Message >%s<\n", lora_driver_map_return_code_to_text(lora_driver_sent_upload_message(false, &_uplink_payload)));
     e1c:	be 01       	movw	r22, r28
     e1e:	80 e0       	ldi	r24, 0x00	; 0
     e20:	0e 94 3c 20 	call	0x4078	; 0x4078 <lora_driver_sent_upload_message>
     e24:	0e 94 29 22 	call	0x4452	; 0x4452 <lora_driver_map_return_code_to_text>
     e28:	9f 93       	push	r25
     e2a:	8f 93       	push	r24
     e2c:	8b e7       	ldi	r24, 0x7B	; 123
     e2e:	95 e0       	ldi	r25, 0x05	; 5
     e30:	9f 93       	push	r25
     e32:	8f 93       	push	r24
     e34:	0e 94 2e 2c 	call	0x585c	; 0x585c <printf>
     e38:	8d b7       	in	r24, 0x3d	; 61
     e3a:	9e b7       	in	r25, 0x3e	; 62
     e3c:	44 96       	adiw	r24, 0x14	; 20
     e3e:	0f b6       	in	r0, 0x3f	; 63
     e40:	f8 94       	cli
     e42:	9e bf       	out	0x3e, r25	; 62
     e44:	0f be       	out	0x3f, r0	; 63
     e46:	8d bf       	out	0x3d, r24	; 61
     e48:	1e c0       	rjmp	.+60     	; 0xe86 <lora_UpLinkHandler_task+0x26c>
		}
		else
		{
			vTaskDelay(2000);
     e4a:	60 ed       	ldi	r22, 0xD0	; 208
     e4c:	77 e0       	ldi	r23, 0x07	; 7
     e4e:	80 e0       	ldi	r24, 0x00	; 0
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <vTaskDelay>
		}
	}
     e56:	17 c0       	rjmp	.+46     	; 0xe86 <lora_UpLinkHandler_task+0x26c>
	}
	else
	{
		// Something went wrong
		// Turn off the green led
		led_led_off(led_ST2); // OPTIONAL
     e58:	81 e0       	ldi	r24, 0x01	; 1
     e5a:	0e 94 03 1e 	call	0x3c06	; 0x3c06 <led_led_off>
		// Make the red led blink fast to tell something went wrong
		led_fast_blink(led_ST1); // OPTIONAL
     e5e:	80 e0       	ldi	r24, 0x00	; 0
     e60:	0e 94 cd 1d 	call	0x3b9a	; 0x3b9a <led_fast_blink>
     e64:	b0 cf       	rjmp	.-160    	; 0xdc6 <lora_UpLinkHandler_task+0x1ac>

	if (rc == LoRa_ACCEPTED)
	{
		// Connected to LoRaWAN :-)
		// Make the green led steady
		led_led_on(led_ST2); // OPTIONAL
     e66:	81 e0       	ldi	r24, 0x01	; 1
     e68:	0e 94 f4 1d 	call	0x3be8	; 0x3be8 <led_led_on>
		lora_driver_flush_buffers(); // get rid of first version string from module after reset!

		_lora_setup();

		
		xBytesToSend = xMessageBufferReceive(xMessageBuffer, (void*) &_uplink_payload,
     e6c:	00 e0       	ldi	r16, 0x00	; 0
     e6e:	10 e0       	ldi	r17, 0x00	; 0
     e70:	98 01       	movw	r18, r16
     e72:	42 e3       	ldi	r20, 0x32	; 50
     e74:	50 e0       	ldi	r21, 0x00	; 0
     e76:	60 ec       	ldi	r22, 0xC0	; 192
     e78:	78 e0       	ldi	r23, 0x08	; 8
     e7a:	c7 01       	movw	r24, r14
     e7c:	0e 94 46 11 	call	0x228c	; 0x228c <xStreamBufferReceive>
		sizeof(rxData),0);
		if(xBytesToSend > sizeof(uint8_t)*2)
     e80:	03 97       	sbiw	r24, 0x03	; 3
     e82:	18 f3       	brcs	.-58     	; 0xe4a <lora_UpLinkHandler_task+0x230>
     e84:	a2 cf       	rjmp	.-188    	; 0xdca <lora_UpLinkHandler_task+0x1b0>
		}
		else
		{
			vTaskDelay(2000);
		}
	}
     e86:	df 91       	pop	r29
     e88:	cf 91       	pop	r28
     e8a:	1f 91       	pop	r17
     e8c:	0f 91       	pop	r16
     e8e:	ff 90       	pop	r15
     e90:	ef 90       	pop	r14
     e92:	df 90       	pop	r13
     e94:	08 95       	ret

00000e96 <lora_UpLinkHandler_startTask>:
	
	void lora_UpLinkHandler_startTask(MessageBufferHandle_t xMessageBuffer){
     e96:	ec 01       	movw	r28, r24
		for(;;)
		{
			lora_UpLinkHandler_task(xMessageBuffer);
     e98:	ce 01       	movw	r24, r28
     e9a:	bf de       	rcall	.-642    	; 0xc1a <lora_UpLinkHandler_task>
			vTaskDelay(3000);
     e9c:	68 eb       	ldi	r22, 0xB8	; 184
     e9e:	7b e0       	ldi	r23, 0x0B	; 11
     ea0:	80 e0       	ldi	r24, 0x00	; 0
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <vTaskDelay>
     ea8:	f7 cf       	rjmp	.-18     	; 0xe98 <lora_UpLinkHandler_startTask+0x2>

00000eaa <trace_init>:
	 #if (configUSE_TRACE_FACILITY == 1)
	 #ifdef HAL_DEFS_H_

	 #else
		// Used on VIA MEGA Shield rev. 2.0.0
		DDRK |= _BV(DDK0) | _BV(DDK1) | _BV(DDK2) | _BV(DDK3);
     eaa:	e7 e0       	ldi	r30, 0x07	; 7
     eac:	f1 e0       	ldi	r31, 0x01	; 1
     eae:	80 81       	ld	r24, Z
     eb0:	8f 60       	ori	r24, 0x0F	; 15
     eb2:	80 83       	st	Z, r24
     eb4:	08 95       	ret

00000eb6 <task_switch_in>:
	void task_switch_in(uint8_t task_no) {
		 #ifdef HAL_DEFS_H_

		 #else
		 // Used on VIA MEGA Shield rev. 2.0.0
		 PORTK &= 0b11110000;
     eb6:	e8 e0       	ldi	r30, 0x08	; 8
     eb8:	f1 e0       	ldi	r31, 0x01	; 1
     eba:	90 81       	ld	r25, Z
     ebc:	90 7f       	andi	r25, 0xF0	; 240
     ebe:	90 83       	st	Z, r25
		 PORTK |= (task_no & 0b00001111);
     ec0:	90 81       	ld	r25, Z
     ec2:	8f 70       	andi	r24, 0x0F	; 15
     ec4:	98 2b       	or	r25, r24
     ec6:	90 83       	st	Z, r25
     ec8:	08 95       	ret

00000eca <task_switch_out>:
	void task_switch_out(uint8_t task_no) {
		#ifdef HAL_DEFS_H_

		#else
		// Used on VIA MEGA Shield rev. 2.0.0
		PORTK &= 0b11110000;
     eca:	e8 e0       	ldi	r30, 0x08	; 8
     ecc:	f1 e0       	ldi	r31, 0x01	; 1
     ece:	80 81       	ld	r24, Z
     ed0:	80 7f       	andi	r24, 0xF0	; 240
     ed2:	80 83       	st	Z, r24
     ed4:	08 95       	ret

00000ed6 <xEventGroupCreate>:
        uxReturn = pxEventBits->uxEventBits;
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
     ed6:	cf 93       	push	r28
     ed8:	df 93       	push	r29
     eda:	80 e1       	ldi	r24, 0x10	; 16
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	b4 d1       	rcall	.+872    	; 0x1248 <pvPortMalloc>
     ee0:	ec 01       	movw	r28, r24
     ee2:	00 97       	sbiw	r24, 0x00	; 0
     ee4:	39 f0       	breq	.+14     	; 0xef4 <xEventGroupCreate+0x1e>
     ee6:	fc 01       	movw	r30, r24
     ee8:	11 92       	st	Z+, r1
     eea:	11 92       	st	Z+, r1
     eec:	11 92       	st	Z+, r1
     eee:	11 92       	st	Z+, r1
     ef0:	cf 01       	movw	r24, r30
     ef2:	94 d2       	rcall	.+1320   	; 0x141c <vListInitialise>
     ef4:	ce 01       	movw	r24, r28
     ef6:	df 91       	pop	r29
     ef8:	cf 91       	pop	r28
     efa:	08 95       	ret

00000efc <xEventGroupWaitBits>:
     efc:	2f 92       	push	r2
     efe:	3f 92       	push	r3
     f00:	4f 92       	push	r4
     f02:	5f 92       	push	r5
     f04:	6f 92       	push	r6
     f06:	7f 92       	push	r7
     f08:	8f 92       	push	r8
     f0a:	9f 92       	push	r9
     f0c:	af 92       	push	r10
     f0e:	bf 92       	push	r11
     f10:	cf 92       	push	r12
     f12:	df 92       	push	r13
     f14:	ef 92       	push	r14
     f16:	ff 92       	push	r15
     f18:	0f 93       	push	r16
     f1a:	1f 93       	push	r17
     f1c:	cf 93       	push	r28
     f1e:	df 93       	push	r29
     f20:	ec 01       	movw	r28, r24
     f22:	4a 01       	movw	r8, r20
     f24:	5b 01       	movw	r10, r22
     f26:	62 2e       	mov	r6, r18
     f28:	70 2e       	mov	r7, r16
     f2a:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <vTaskSuspendAll>
     f2e:	28 80       	ld	r2, Y
     f30:	39 80       	ldd	r3, Y+1	; 0x01
     f32:	4a 80       	ldd	r4, Y+2	; 0x02
     f34:	5b 80       	ldd	r5, Y+3	; 0x03
     f36:	01 11       	cpse	r16, r1
     f38:	0d c0       	rjmp	.+26     	; 0xf54 <xEventGroupWaitBits+0x58>
     f3a:	81 e0       	ldi	r24, 0x01	; 1
     f3c:	b2 01       	movw	r22, r4
     f3e:	a1 01       	movw	r20, r2
     f40:	48 21       	and	r20, r8
     f42:	59 21       	and	r21, r9
     f44:	6a 21       	and	r22, r10
     f46:	7b 21       	and	r23, r11
     f48:	45 2b       	or	r20, r21
     f4a:	46 2b       	or	r20, r22
     f4c:	47 2b       	or	r20, r23
     f4e:	79 f4       	brne	.+30     	; 0xf6e <xEventGroupWaitBits+0x72>
     f50:	80 e0       	ldi	r24, 0x00	; 0
     f52:	0d c0       	rjmp	.+26     	; 0xf6e <xEventGroupWaitBits+0x72>
     f54:	81 e0       	ldi	r24, 0x01	; 1
     f56:	b2 01       	movw	r22, r4
     f58:	a1 01       	movw	r20, r2
     f5a:	48 21       	and	r20, r8
     f5c:	59 21       	and	r21, r9
     f5e:	6a 21       	and	r22, r10
     f60:	7b 21       	and	r23, r11
     f62:	48 15       	cp	r20, r8
     f64:	59 05       	cpc	r21, r9
     f66:	6a 05       	cpc	r22, r10
     f68:	7b 05       	cpc	r23, r11
     f6a:	09 f0       	breq	.+2      	; 0xf6e <xEventGroupWaitBits+0x72>
     f6c:	80 e0       	ldi	r24, 0x00	; 0
     f6e:	88 23       	and	r24, r24
     f70:	81 f0       	breq	.+32     	; 0xf92 <xEventGroupWaitBits+0x96>
     f72:	66 20       	and	r6, r6
     f74:	09 f4       	brne	.+2      	; 0xf78 <xEventGroupWaitBits+0x7c>
     f76:	6b c0       	rjmp	.+214    	; 0x104e <xEventGroupWaitBits+0x152>
     f78:	80 94       	com	r8
     f7a:	90 94       	com	r9
     f7c:	a0 94       	com	r10
     f7e:	b0 94       	com	r11
     f80:	82 20       	and	r8, r2
     f82:	93 20       	and	r9, r3
     f84:	a4 20       	and	r10, r4
     f86:	b5 20       	and	r11, r5
     f88:	88 82       	st	Y, r8
     f8a:	99 82       	std	Y+1, r9	; 0x01
     f8c:	aa 82       	std	Y+2, r10	; 0x02
     f8e:	bb 82       	std	Y+3, r11	; 0x03
     f90:	5e c0       	rjmp	.+188    	; 0x104e <xEventGroupWaitBits+0x152>
     f92:	c1 14       	cp	r12, r1
     f94:	d1 04       	cpc	r13, r1
     f96:	e1 04       	cpc	r14, r1
     f98:	f1 04       	cpc	r15, r1
     f9a:	09 f4       	brne	.+2      	; 0xf9e <xEventGroupWaitBits+0xa2>
     f9c:	58 c0       	rjmp	.+176    	; 0x104e <xEventGroupWaitBits+0x152>
     f9e:	66 20       	and	r6, r6
     fa0:	29 f0       	breq	.+10     	; 0xfac <xEventGroupWaitBits+0xb0>
     fa2:	40 e0       	ldi	r20, 0x00	; 0
     fa4:	50 e0       	ldi	r21, 0x00	; 0
     fa6:	60 e0       	ldi	r22, 0x00	; 0
     fa8:	71 e0       	ldi	r23, 0x01	; 1
     faa:	03 c0       	rjmp	.+6      	; 0xfb2 <xEventGroupWaitBits+0xb6>
     fac:	40 e0       	ldi	r20, 0x00	; 0
     fae:	50 e0       	ldi	r21, 0x00	; 0
     fb0:	ba 01       	movw	r22, r20
     fb2:	71 10       	cpse	r7, r1
     fb4:	74 60       	ori	r23, 0x04	; 4
     fb6:	48 29       	or	r20, r8
     fb8:	59 29       	or	r21, r9
     fba:	6a 29       	or	r22, r10
     fbc:	7b 29       	or	r23, r11
     fbe:	97 01       	movw	r18, r14
     fc0:	86 01       	movw	r16, r12
     fc2:	ce 01       	movw	r24, r28
     fc4:	04 96       	adiw	r24, 0x04	; 4
     fc6:	0e 94 f6 15 	call	0x2bec	; 0x2bec <vTaskPlaceOnUnorderedEventList>
     fca:	0e 94 cb 14 	call	0x2996	; 0x2996 <xTaskResumeAll>
     fce:	81 11       	cpse	r24, r1
     fd0:	01 c0       	rjmp	.+2      	; 0xfd4 <xEventGroupWaitBits+0xd8>
     fd2:	6c d3       	rcall	.+1752   	; 0x16ac <vPortYield>
     fd4:	0e 94 83 17 	call	0x2f06	; 0x2f06 <uxTaskResetEventItemValue>
     fd8:	91 fd       	sbrc	r25, 1
     fda:	35 c0       	rjmp	.+106    	; 0x1046 <xEventGroupWaitBits+0x14a>
     fdc:	0f b6       	in	r0, 0x3f	; 63
     fde:	f8 94       	cli
     fe0:	0f 92       	push	r0
     fe2:	68 81       	ld	r22, Y
     fe4:	79 81       	ldd	r23, Y+1	; 0x01
     fe6:	8a 81       	ldd	r24, Y+2	; 0x02
     fe8:	9b 81       	ldd	r25, Y+3	; 0x03
     fea:	71 10       	cpse	r7, r1
     fec:	0d c0       	rjmp	.+26     	; 0x1008 <xEventGroupWaitBits+0x10c>
     fee:	21 e0       	ldi	r18, 0x01	; 1
     ff0:	75 01       	movw	r14, r10
     ff2:	64 01       	movw	r12, r8
     ff4:	c6 22       	and	r12, r22
     ff6:	d7 22       	and	r13, r23
     ff8:	e8 22       	and	r14, r24
     ffa:	f9 22       	and	r15, r25
     ffc:	cd 28       	or	r12, r13
     ffe:	ce 28       	or	r12, r14
    1000:	cf 28       	or	r12, r15
    1002:	79 f4       	brne	.+30     	; 0x1022 <xEventGroupWaitBits+0x126>
    1004:	20 e0       	ldi	r18, 0x00	; 0
    1006:	0d c0       	rjmp	.+26     	; 0x1022 <xEventGroupWaitBits+0x126>
    1008:	21 e0       	ldi	r18, 0x01	; 1
    100a:	75 01       	movw	r14, r10
    100c:	64 01       	movw	r12, r8
    100e:	c6 22       	and	r12, r22
    1010:	d7 22       	and	r13, r23
    1012:	e8 22       	and	r14, r24
    1014:	f9 22       	and	r15, r25
    1016:	c8 14       	cp	r12, r8
    1018:	d9 04       	cpc	r13, r9
    101a:	ea 04       	cpc	r14, r10
    101c:	fb 04       	cpc	r15, r11
    101e:	09 f0       	breq	.+2      	; 0x1022 <xEventGroupWaitBits+0x126>
    1020:	20 e0       	ldi	r18, 0x00	; 0
    1022:	22 23       	and	r18, r18
    1024:	71 f0       	breq	.+28     	; 0x1042 <xEventGroupWaitBits+0x146>
    1026:	66 20       	and	r6, r6
    1028:	61 f0       	breq	.+24     	; 0x1042 <xEventGroupWaitBits+0x146>
    102a:	80 94       	com	r8
    102c:	90 94       	com	r9
    102e:	a0 94       	com	r10
    1030:	b0 94       	com	r11
    1032:	86 22       	and	r8, r22
    1034:	97 22       	and	r9, r23
    1036:	a8 22       	and	r10, r24
    1038:	b9 22       	and	r11, r25
    103a:	88 82       	st	Y, r8
    103c:	99 82       	std	Y+1, r9	; 0x01
    103e:	aa 82       	std	Y+2, r10	; 0x02
    1040:	bb 82       	std	Y+3, r11	; 0x03
    1042:	0f 90       	pop	r0
    1044:	0f be       	out	0x3f, r0	; 63
    1046:	1b 01       	movw	r2, r22
    1048:	2c 01       	movw	r4, r24
    104a:	55 24       	eor	r5, r5
    104c:	02 c0       	rjmp	.+4      	; 0x1052 <xEventGroupWaitBits+0x156>
    104e:	0e 94 cb 14 	call	0x2996	; 0x2996 <xTaskResumeAll>
    1052:	c2 01       	movw	r24, r4
    1054:	b1 01       	movw	r22, r2
    1056:	df 91       	pop	r29
    1058:	cf 91       	pop	r28
    105a:	1f 91       	pop	r17
    105c:	0f 91       	pop	r16
    105e:	ff 90       	pop	r15
    1060:	ef 90       	pop	r14
    1062:	df 90       	pop	r13
    1064:	cf 90       	pop	r12
    1066:	bf 90       	pop	r11
    1068:	af 90       	pop	r10
    106a:	9f 90       	pop	r9
    106c:	8f 90       	pop	r8
    106e:	7f 90       	pop	r7
    1070:	6f 90       	pop	r6
    1072:	5f 90       	pop	r5
    1074:	4f 90       	pop	r4
    1076:	3f 90       	pop	r3
    1078:	2f 90       	pop	r2
    107a:	08 95       	ret

0000107c <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
    107c:	4f 92       	push	r4
    107e:	5f 92       	push	r5
    1080:	6f 92       	push	r6
    1082:	7f 92       	push	r7
    1084:	8f 92       	push	r8
    1086:	9f 92       	push	r9
    1088:	af 92       	push	r10
    108a:	bf 92       	push	r11
    108c:	cf 92       	push	r12
    108e:	df 92       	push	r13
    1090:	ef 92       	push	r14
    1092:	ff 92       	push	r15
    1094:	0f 93       	push	r16
    1096:	1f 93       	push	r17
    1098:	cf 93       	push	r28
    109a:	df 93       	push	r29
    109c:	ec 01       	movw	r28, r24
    109e:	6a 01       	movw	r12, r20
    10a0:	7b 01       	movw	r14, r22
    itself. */
    configASSERT( xEventGroup );
    configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

    pxList = &( pxEventBits->xTasksWaitingForBits );
    pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    10a2:	8c 01       	movw	r16, r24
    10a4:	09 5f       	subi	r16, 0xF9	; 249
    10a6:	1f 4f       	sbci	r17, 0xFF	; 255
    vTaskSuspendAll();
    10a8:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <vTaskSuspendAll>
    {
        traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

        pxListItem = listGET_HEAD_ENTRY( pxList );
    10ac:	eb 85       	ldd	r30, Y+11	; 0x0b
    10ae:	fc 85       	ldd	r31, Y+12	; 0x0c

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;
    10b0:	88 81       	ld	r24, Y
    10b2:	99 81       	ldd	r25, Y+1	; 0x01
    10b4:	aa 81       	ldd	r26, Y+2	; 0x02
    10b6:	bb 81       	ldd	r27, Y+3	; 0x03
    10b8:	c8 2a       	or	r12, r24
    10ba:	d9 2a       	or	r13, r25
    10bc:	ea 2a       	or	r14, r26
    10be:	fb 2a       	or	r15, r27
    10c0:	c8 82       	st	Y, r12
    10c2:	d9 82       	std	Y+1, r13	; 0x01
    10c4:	ea 82       	std	Y+2, r14	; 0x02
    10c6:	fb 82       	std	Y+3, r15	; 0x03

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
    10c8:	0e 17       	cp	r16, r30
    10ca:	1f 07       	cpc	r17, r31
    10cc:	09 f4       	brne	.+2      	; 0x10d0 <xEventGroupSetBits+0x54>
    10ce:	45 c0       	rjmp	.+138    	; 0x115a <xEventGroupSetBits+0xde>
    10d0:	c1 2c       	mov	r12, r1
    10d2:	d1 2c       	mov	r13, r1
    10d4:	76 01       	movw	r14, r12
            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
                {
                    xMatchFound = pdTRUE;
    10d6:	99 24       	eor	r9, r9
    10d8:	93 94       	inc	r9
    10da:	81 2c       	mov	r8, r1
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
    10dc:	a4 80       	ldd	r10, Z+4	; 0x04
    10de:	b5 80       	ldd	r11, Z+5	; 0x05
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
    10e0:	80 81       	ld	r24, Z
    10e2:	91 81       	ldd	r25, Z+1	; 0x01
    10e4:	a2 81       	ldd	r26, Z+2	; 0x02
    10e6:	b3 81       	ldd	r27, Z+3	; 0x03
            xMatchFound = pdFALSE;

            /* Split the bits waited for from the control bits. */
            uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
            uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
    10e8:	ac 01       	movw	r20, r24
    10ea:	bd 01       	movw	r22, r26
    10ec:	77 27       	eor	r23, r23

            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
    10ee:	b2 fd       	sbrc	r27, 2
    10f0:	0f c0       	rjmp	.+30     	; 0x1110 <xEventGroupSetBits+0x94>
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
                {
                    xMatchFound = pdTRUE;
    10f2:	48 80       	ld	r4, Y
    10f4:	59 80       	ldd	r5, Y+1	; 0x01
    10f6:	6a 80       	ldd	r6, Y+2	; 0x02
    10f8:	7b 80       	ldd	r7, Y+3	; 0x03
    10fa:	44 22       	and	r4, r20
    10fc:	55 22       	and	r5, r21
    10fe:	66 22       	and	r6, r22
    1100:	77 22       	and	r7, r23
    1102:	29 2d       	mov	r18, r9
    1104:	45 28       	or	r4, r5
    1106:	46 28       	or	r4, r6
    1108:	47 28       	or	r4, r7
    110a:	89 f4       	brne	.+34     	; 0x112e <xEventGroupSetBits+0xb2>
    110c:	28 2d       	mov	r18, r8
    110e:	0f c0       	rjmp	.+30     	; 0x112e <xEventGroupSetBits+0xb2>
    1110:	48 80       	ld	r4, Y
    1112:	59 80       	ldd	r5, Y+1	; 0x01
    1114:	6a 80       	ldd	r6, Y+2	; 0x02
    1116:	7b 80       	ldd	r7, Y+3	; 0x03
    1118:	44 22       	and	r4, r20
    111a:	55 22       	and	r5, r21
    111c:	66 22       	and	r6, r22
    111e:	77 22       	and	r7, r23
    1120:	29 2d       	mov	r18, r9
    1122:	44 16       	cp	r4, r20
    1124:	55 06       	cpc	r5, r21
    1126:	66 06       	cpc	r6, r22
    1128:	77 06       	cpc	r7, r23
    112a:	09 f0       	breq	.+2      	; 0x112e <xEventGroupSetBits+0xb2>
    112c:	28 2d       	mov	r18, r8
            else
            {
                /* Need all bits to be set, but not all the bits were set. */
            }

            if( xMatchFound != pdFALSE )
    112e:	22 23       	and	r18, r18
    1130:	71 f0       	breq	.+28     	; 0x114e <xEventGroupSetBits+0xd2>
            {
                /* The bits match.  Should the bits be cleared on exit? */
                if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
    1132:	b0 ff       	sbrs	r27, 0
    1134:	04 c0       	rjmp	.+8      	; 0x113e <xEventGroupSetBits+0xc2>
                {
                    uxBitsToClear |= uxBitsWaitedFor;
    1136:	c4 2a       	or	r12, r20
    1138:	d5 2a       	or	r13, r21
    113a:	e6 2a       	or	r14, r22
    113c:	f7 2a       	or	r15, r23
                /* Store the actual event flag value in the task's event list
                item before removing the task from the event list.  The
                eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                that is was unblocked due to its required bits matching, rather
                than because it timed out. */
                vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
    113e:	48 81       	ld	r20, Y
    1140:	59 81       	ldd	r21, Y+1	; 0x01
    1142:	6a 81       	ldd	r22, Y+2	; 0x02
    1144:	7b 81       	ldd	r23, Y+3	; 0x03
    1146:	72 60       	ori	r23, 0x02	; 2
    1148:	cf 01       	movw	r24, r30
    114a:	0e 94 7c 16 	call	0x2cf8	; 0x2cf8 <vTaskRemoveFromUnorderedEventList>
    114e:	ea 2d       	mov	r30, r10
    1150:	fb 2d       	mov	r31, r11

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
    1152:	0e 17       	cp	r16, r30
    1154:	1f 07       	cpc	r17, r31
    1156:	11 f6       	brne	.-124    	; 0x10dc <xEventGroupSetBits+0x60>
    1158:	03 c0       	rjmp	.+6      	; 0x1160 <xEventGroupSetBits+0xe4>
EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
    115a:	c1 2c       	mov	r12, r1
    115c:	d1 2c       	mov	r13, r1
    115e:	76 01       	movw	r14, r12
            pxListItem = pxNext;
        }

        /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
        bit was set in the control word. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
    1160:	c0 94       	com	r12
    1162:	d0 94       	com	r13
    1164:	e0 94       	com	r14
    1166:	f0 94       	com	r15
    1168:	88 81       	ld	r24, Y
    116a:	99 81       	ldd	r25, Y+1	; 0x01
    116c:	aa 81       	ldd	r26, Y+2	; 0x02
    116e:	bb 81       	ldd	r27, Y+3	; 0x03
    1170:	c8 22       	and	r12, r24
    1172:	d9 22       	and	r13, r25
    1174:	ea 22       	and	r14, r26
    1176:	fb 22       	and	r15, r27
    1178:	c8 82       	st	Y, r12
    117a:	d9 82       	std	Y+1, r13	; 0x01
    117c:	ea 82       	std	Y+2, r14	; 0x02
    117e:	fb 82       	std	Y+3, r15	; 0x03
    }
    ( void ) xTaskResumeAll();
    1180:	0e 94 cb 14 	call	0x2996	; 0x2996 <xTaskResumeAll>

    return pxEventBits->uxEventBits;
    1184:	68 81       	ld	r22, Y
    1186:	79 81       	ldd	r23, Y+1	; 0x01
    1188:	8a 81       	ldd	r24, Y+2	; 0x02
    118a:	9b 81       	ldd	r25, Y+3	; 0x03
}
    118c:	df 91       	pop	r29
    118e:	cf 91       	pop	r28
    1190:	1f 91       	pop	r17
    1192:	0f 91       	pop	r16
    1194:	ff 90       	pop	r15
    1196:	ef 90       	pop	r14
    1198:	df 90       	pop	r13
    119a:	cf 90       	pop	r12
    119c:	bf 90       	pop	r11
    119e:	af 90       	pop	r10
    11a0:	9f 90       	pop	r9
    11a2:	8f 90       	pop	r8
    11a4:	7f 90       	pop	r7
    11a6:	6f 90       	pop	r6
    11a8:	5f 90       	pop	r5
    11aa:	4f 90       	pop	r4
    11ac:	08 95       	ret

000011ae <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
    11ae:	cf 93       	push	r28
    11b0:	df 93       	push	r29
    11b2:	dc 01       	movw	r26, r24
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
    11b4:	e2 e4       	ldi	r30, 0x42	; 66
    11b6:	f9 e0       	ldi	r31, 0x09	; 9
    11b8:	01 c0       	rjmp	.+2      	; 0x11bc <prvInsertBlockIntoFreeList+0xe>
    11ba:	f9 01       	movw	r30, r18
    11bc:	20 81       	ld	r18, Z
    11be:	31 81       	ldd	r19, Z+1	; 0x01
    11c0:	2a 17       	cp	r18, r26
    11c2:	3b 07       	cpc	r19, r27
    11c4:	d0 f3       	brcs	.-12     	; 0x11ba <prvInsertBlockIntoFreeList+0xc>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
    11c6:	82 81       	ldd	r24, Z+2	; 0x02
    11c8:	93 81       	ldd	r25, Z+3	; 0x03
    11ca:	af 01       	movw	r20, r30
    11cc:	48 0f       	add	r20, r24
    11ce:	59 1f       	adc	r21, r25
    11d0:	a4 17       	cp	r26, r20
    11d2:	b5 07       	cpc	r27, r21
    11d4:	49 f4       	brne	.+18     	; 0x11e8 <prvInsertBlockIntoFreeList+0x3a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
    11d6:	12 96       	adiw	r26, 0x02	; 2
    11d8:	4d 91       	ld	r20, X+
    11da:	5c 91       	ld	r21, X
    11dc:	13 97       	sbiw	r26, 0x03	; 3
    11de:	84 0f       	add	r24, r20
    11e0:	95 1f       	adc	r25, r21
    11e2:	93 83       	std	Z+3, r25	; 0x03
    11e4:	82 83       	std	Z+2, r24	; 0x02
    11e6:	df 01       	movw	r26, r30
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
    11e8:	12 96       	adiw	r26, 0x02	; 2
    11ea:	8d 91       	ld	r24, X+
    11ec:	9c 91       	ld	r25, X
    11ee:	13 97       	sbiw	r26, 0x03	; 3
    11f0:	ed 01       	movw	r28, r26
    11f2:	c8 0f       	add	r28, r24
    11f4:	d9 1f       	adc	r29, r25
    11f6:	2c 17       	cp	r18, r28
    11f8:	3d 07       	cpc	r19, r29
    11fa:	d9 f4       	brne	.+54     	; 0x1232 <prvInsertBlockIntoFreeList+0x84>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
    11fc:	20 91 40 09 	lds	r18, 0x0940	; 0x800940 <pxEnd>
    1200:	30 91 41 09 	lds	r19, 0x0941	; 0x800941 <pxEnd+0x1>
    1204:	c2 17       	cp	r28, r18
    1206:	d3 07       	cpc	r29, r19
    1208:	81 f0       	breq	.+32     	; 0x122a <prvInsertBlockIntoFreeList+0x7c>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
    120a:	2a 81       	ldd	r18, Y+2	; 0x02
    120c:	3b 81       	ldd	r19, Y+3	; 0x03
    120e:	82 0f       	add	r24, r18
    1210:	93 1f       	adc	r25, r19
    1212:	13 96       	adiw	r26, 0x03	; 3
    1214:	9c 93       	st	X, r25
    1216:	8e 93       	st	-X, r24
    1218:	12 97       	sbiw	r26, 0x02	; 2
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
    121a:	c0 81       	ld	r28, Z
    121c:	d1 81       	ldd	r29, Z+1	; 0x01
    121e:	88 81       	ld	r24, Y
    1220:	99 81       	ldd	r25, Y+1	; 0x01
    1222:	11 96       	adiw	r26, 0x01	; 1
    1224:	9c 93       	st	X, r25
    1226:	8e 93       	st	-X, r24
    1228:	07 c0       	rjmp	.+14     	; 0x1238 <prvInsertBlockIntoFreeList+0x8a>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
    122a:	11 96       	adiw	r26, 0x01	; 1
    122c:	dc 93       	st	X, r29
    122e:	ce 93       	st	-X, r28
    1230:	03 c0       	rjmp	.+6      	; 0x1238 <prvInsertBlockIntoFreeList+0x8a>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
    1232:	11 96       	adiw	r26, 0x01	; 1
    1234:	3c 93       	st	X, r19
    1236:	2e 93       	st	-X, r18

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
    1238:	ae 17       	cp	r26, r30
    123a:	bf 07       	cpc	r27, r31
    123c:	11 f0       	breq	.+4      	; 0x1242 <prvInsertBlockIntoFreeList+0x94>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
    123e:	b1 83       	std	Z+1, r27	; 0x01
    1240:	a0 83       	st	Z, r26
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    1242:	df 91       	pop	r29
    1244:	cf 91       	pop	r28
    1246:	08 95       	ret

00001248 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    1248:	cf 92       	push	r12
    124a:	df 92       	push	r13
    124c:	ef 92       	push	r14
    124e:	ff 92       	push	r15
    1250:	0f 93       	push	r16
    1252:	1f 93       	push	r17
    1254:	cf 93       	push	r28
    1256:	df 93       	push	r29
    1258:	ec 01       	movw	r28, r24
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
    125a:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
    125e:	80 91 40 09 	lds	r24, 0x0940	; 0x800940 <pxEnd>
    1262:	90 91 41 09 	lds	r25, 0x0941	; 0x800941 <pxEnd+0x1>
    1266:	89 2b       	or	r24, r25
    1268:	41 f5       	brne	.+80     	; 0x12ba <pvPortMalloc+0x72>

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
    126a:	e2 e4       	ldi	r30, 0x42	; 66
    126c:	f9 e0       	ldi	r31, 0x09	; 9
    126e:	a6 e4       	ldi	r26, 0x46	; 70
    1270:	b9 e0       	ldi	r27, 0x09	; 9
    1272:	b1 83       	std	Z+1, r27	; 0x01
    1274:	a0 83       	st	Z, r26
	xStart.xBlockSize = ( size_t ) 0;
    1276:	13 82       	std	Z+3, r1	; 0x03
    1278:	12 82       	std	Z+2, r1	; 0x02
	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
	uxAddress -= xHeapStructSize;
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
	pxEnd = ( void * ) uxAddress;
    127a:	e2 ee       	ldi	r30, 0xE2	; 226
    127c:	f8 e1       	ldi	r31, 0x18	; 24
    127e:	f0 93 41 09 	sts	0x0941, r31	; 0x800941 <pxEnd+0x1>
    1282:	e0 93 40 09 	sts	0x0940, r30	; 0x800940 <pxEnd>
	pxEnd->xBlockSize = 0;
    1286:	13 82       	std	Z+3, r1	; 0x03
    1288:	12 82       	std	Z+2, r1	; 0x02
	pxEnd->pxNextFreeBlock = NULL;
    128a:	11 82       	std	Z+1, r1	; 0x01
    128c:	10 82       	st	Z, r1

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
    128e:	8c e9       	ldi	r24, 0x9C	; 156
    1290:	9f e0       	ldi	r25, 0x0F	; 15
    1292:	13 96       	adiw	r26, 0x03	; 3
    1294:	9c 93       	st	X, r25
    1296:	8e 93       	st	-X, r24
    1298:	12 97       	sbiw	r26, 0x02	; 2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
    129a:	ed 93       	st	X+, r30
    129c:	fc 93       	st	X, r31

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
    129e:	90 93 3d 09 	sts	0x093D, r25	; 0x80093d <xMinimumEverFreeBytesRemaining+0x1>
    12a2:	80 93 3c 09 	sts	0x093C, r24	; 0x80093c <xMinimumEverFreeBytesRemaining>
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
    12a6:	90 93 3f 09 	sts	0x093F, r25	; 0x80093f <xFreeBytesRemaining+0x1>
    12aa:	80 93 3e 09 	sts	0x093E, r24	; 0x80093e <xFreeBytesRemaining>

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
    12ae:	80 e0       	ldi	r24, 0x00	; 0
    12b0:	90 e8       	ldi	r25, 0x80	; 128
    12b2:	90 93 3b 09 	sts	0x093B, r25	; 0x80093b <xBlockAllocatedBit+0x1>
    12b6:	80 93 3a 09 	sts	0x093A, r24	; 0x80093a <xBlockAllocatedBit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
    12ba:	e0 90 3a 09 	lds	r14, 0x093A	; 0x80093a <xBlockAllocatedBit>
    12be:	f0 90 3b 09 	lds	r15, 0x093B	; 0x80093b <xBlockAllocatedBit+0x1>
    12c2:	c7 01       	movw	r24, r14
    12c4:	8c 23       	and	r24, r28
    12c6:	9d 23       	and	r25, r29
    12c8:	89 2b       	or	r24, r25
    12ca:	09 f0       	breq	.+2      	; 0x12ce <pvPortMalloc+0x86>
    12cc:	66 c0       	rjmp	.+204    	; 0x139a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
    12ce:	20 97       	sbiw	r28, 0x00	; 0
    12d0:	09 f4       	brne	.+2      	; 0x12d4 <pvPortMalloc+0x8c>
    12d2:	66 c0       	rjmp	.+204    	; 0x13a0 <pvPortMalloc+0x158>
			{
				xWantedSize += xHeapStructSize;
    12d4:	ae 01       	movw	r20, r28
    12d6:	4c 5f       	subi	r20, 0xFC	; 252
    12d8:	5f 4f       	sbci	r21, 0xFF	; 255
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
    12da:	09 f4       	brne	.+2      	; 0x12de <pvPortMalloc+0x96>
    12dc:	5e c0       	rjmp	.+188    	; 0x139a <pvPortMalloc+0x152>
    12de:	00 91 3e 09 	lds	r16, 0x093E	; 0x80093e <xFreeBytesRemaining>
    12e2:	10 91 3f 09 	lds	r17, 0x093F	; 0x80093f <xFreeBytesRemaining+0x1>
    12e6:	04 17       	cp	r16, r20
    12e8:	15 07       	cpc	r17, r21
    12ea:	08 f4       	brcc	.+2      	; 0x12ee <pvPortMalloc+0xa6>
    12ec:	56 c0       	rjmp	.+172    	; 0x139a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
    12ee:	c0 91 42 09 	lds	r28, 0x0942	; 0x800942 <xStart>
    12f2:	d0 91 43 09 	lds	r29, 0x0943	; 0x800943 <xStart+0x1>

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
    12f6:	e2 e4       	ldi	r30, 0x42	; 66
    12f8:	f9 e0       	ldi	r31, 0x09	; 9
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    12fa:	02 c0       	rjmp	.+4      	; 0x1300 <pvPortMalloc+0xb8>
    12fc:	fe 01       	movw	r30, r28
				{
					pxPreviousBlock = pxBlock;
					pxBlock = pxBlock->pxNextFreeBlock;
    12fe:	e9 01       	movw	r28, r18
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    1300:	2a 81       	ldd	r18, Y+2	; 0x02
    1302:	3b 81       	ldd	r19, Y+3	; 0x03
    1304:	24 17       	cp	r18, r20
    1306:	35 07       	cpc	r19, r21
    1308:	28 f4       	brcc	.+10     	; 0x1314 <pvPortMalloc+0xcc>
    130a:	28 81       	ld	r18, Y
    130c:	39 81       	ldd	r19, Y+1	; 0x01
    130e:	21 15       	cp	r18, r1
    1310:	31 05       	cpc	r19, r1
    1312:	a1 f7       	brne	.-24     	; 0x12fc <pvPortMalloc+0xb4>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
    1314:	80 91 40 09 	lds	r24, 0x0940	; 0x800940 <pxEnd>
    1318:	90 91 41 09 	lds	r25, 0x0941	; 0x800941 <pxEnd+0x1>
    131c:	c8 17       	cp	r28, r24
    131e:	d9 07       	cpc	r29, r25
    1320:	e1 f1       	breq	.+120    	; 0x139a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
    1322:	c0 80       	ld	r12, Z
    1324:	d1 80       	ldd	r13, Z+1	; 0x01
    1326:	84 e0       	ldi	r24, 0x04	; 4
    1328:	c8 0e       	add	r12, r24
    132a:	d1 1c       	adc	r13, r1

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    132c:	88 81       	ld	r24, Y
    132e:	99 81       	ldd	r25, Y+1	; 0x01
    1330:	91 83       	std	Z+1, r25	; 0x01
    1332:	80 83       	st	Z, r24

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    1334:	2a 81       	ldd	r18, Y+2	; 0x02
    1336:	3b 81       	ldd	r19, Y+3	; 0x03
    1338:	24 1b       	sub	r18, r20
    133a:	35 0b       	sbc	r19, r21
    133c:	29 30       	cpi	r18, 0x09	; 9
    133e:	31 05       	cpc	r19, r1
    1340:	48 f0       	brcs	.+18     	; 0x1354 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
    1342:	ce 01       	movw	r24, r28
    1344:	84 0f       	add	r24, r20
    1346:	95 1f       	adc	r25, r21
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    1348:	fc 01       	movw	r30, r24
    134a:	33 83       	std	Z+3, r19	; 0x03
    134c:	22 83       	std	Z+2, r18	; 0x02
						pxBlock->xBlockSize = xWantedSize;
    134e:	5b 83       	std	Y+3, r21	; 0x03
    1350:	4a 83       	std	Y+2, r20	; 0x02

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
    1352:	2d df       	rcall	.-422    	; 0x11ae <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
    1354:	8a 81       	ldd	r24, Y+2	; 0x02
    1356:	9b 81       	ldd	r25, Y+3	; 0x03
    1358:	08 1b       	sub	r16, r24
    135a:	19 0b       	sbc	r17, r25
    135c:	10 93 3f 09 	sts	0x093F, r17	; 0x80093f <xFreeBytesRemaining+0x1>
    1360:	00 93 3e 09 	sts	0x093E, r16	; 0x80093e <xFreeBytesRemaining>

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
    1364:	20 91 3c 09 	lds	r18, 0x093C	; 0x80093c <xMinimumEverFreeBytesRemaining>
    1368:	30 91 3d 09 	lds	r19, 0x093D	; 0x80093d <xMinimumEverFreeBytesRemaining+0x1>
    136c:	02 17       	cp	r16, r18
    136e:	13 07       	cpc	r17, r19
    1370:	20 f4       	brcc	.+8      	; 0x137a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
    1372:	10 93 3d 09 	sts	0x093D, r17	; 0x80093d <xMinimumEverFreeBytesRemaining+0x1>
    1376:	00 93 3c 09 	sts	0x093C, r16	; 0x80093c <xMinimumEverFreeBytesRemaining>
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
    137a:	e8 2a       	or	r14, r24
    137c:	f9 2a       	or	r15, r25
    137e:	fb 82       	std	Y+3, r15	; 0x03
    1380:	ea 82       	std	Y+2, r14	; 0x02
					pxBlock->pxNextFreeBlock = NULL;
    1382:	19 82       	std	Y+1, r1	; 0x01
    1384:	18 82       	st	Y, r1
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    1386:	0e 94 cb 14 	call	0x2996	; 0x2996 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
    138a:	c1 14       	cp	r12, r1
    138c:	d1 04       	cpc	r13, r1
    138e:	59 f4       	brne	.+22     	; 0x13a6 <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
    1390:	0e 94 d1 1a 	call	0x35a2	; 0x35a2 <vApplicationMallocFailedHook>
    1394:	c1 2c       	mov	r12, r1
    1396:	d1 2c       	mov	r13, r1
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
    1398:	06 c0       	rjmp	.+12     	; 0x13a6 <pvPortMalloc+0x15e>
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    139a:	0e 94 cb 14 	call	0x2996	; 0x2996 <xTaskResumeAll>
    139e:	f8 cf       	rjmp	.-16     	; 0x1390 <pvPortMalloc+0x148>
    13a0:	0e 94 cb 14 	call	0x2996	; 0x2996 <xTaskResumeAll>
    13a4:	f5 cf       	rjmp	.-22     	; 0x1390 <pvPortMalloc+0x148>
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
}
    13a6:	c6 01       	movw	r24, r12
    13a8:	df 91       	pop	r29
    13aa:	cf 91       	pop	r28
    13ac:	1f 91       	pop	r17
    13ae:	0f 91       	pop	r16
    13b0:	ff 90       	pop	r15
    13b2:	ef 90       	pop	r14
    13b4:	df 90       	pop	r13
    13b6:	cf 90       	pop	r12
    13b8:	08 95       	ret

000013ba <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    13ba:	cf 93       	push	r28
    13bc:	df 93       	push	r29
uint8_t *puc = ( uint8_t * ) pv;
BlockLink_t *pxLink;

	if( pv != NULL )
    13be:	00 97       	sbiw	r24, 0x00	; 0
    13c0:	51 f1       	breq	.+84     	; 0x1416 <vPortFree+0x5c>

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
		configASSERT( pxLink->pxNextFreeBlock == NULL );

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
    13c2:	fc 01       	movw	r30, r24
    13c4:	34 97       	sbiw	r30, 0x04	; 4
    13c6:	22 81       	ldd	r18, Z+2	; 0x02
    13c8:	33 81       	ldd	r19, Z+3	; 0x03
    13ca:	40 91 3a 09 	lds	r20, 0x093A	; 0x80093a <xBlockAllocatedBit>
    13ce:	50 91 3b 09 	lds	r21, 0x093B	; 0x80093b <xBlockAllocatedBit+0x1>
    13d2:	b9 01       	movw	r22, r18
    13d4:	64 23       	and	r22, r20
    13d6:	75 23       	and	r23, r21
    13d8:	67 2b       	or	r22, r23
    13da:	e9 f0       	breq	.+58     	; 0x1416 <vPortFree+0x5c>
		{
			if( pxLink->pxNextFreeBlock == NULL )
    13dc:	60 81       	ld	r22, Z
    13de:	71 81       	ldd	r23, Z+1	; 0x01
    13e0:	67 2b       	or	r22, r23
    13e2:	c9 f4       	brne	.+50     	; 0x1416 <vPortFree+0x5c>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
    13e4:	ef 01       	movw	r28, r30
    13e6:	40 95       	com	r20
    13e8:	50 95       	com	r21
    13ea:	24 23       	and	r18, r20
    13ec:	35 23       	and	r19, r21
    13ee:	33 83       	std	Z+3, r19	; 0x03
    13f0:	22 83       	std	Z+2, r18	; 0x02

				vTaskSuspendAll();
    13f2:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
    13f6:	20 91 3e 09 	lds	r18, 0x093E	; 0x80093e <xFreeBytesRemaining>
    13fa:	30 91 3f 09 	lds	r19, 0x093F	; 0x80093f <xFreeBytesRemaining+0x1>
    13fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1400:	9b 81       	ldd	r25, Y+3	; 0x03
    1402:	82 0f       	add	r24, r18
    1404:	93 1f       	adc	r25, r19
    1406:	90 93 3f 09 	sts	0x093F, r25	; 0x80093f <xFreeBytesRemaining+0x1>
    140a:	80 93 3e 09 	sts	0x093E, r24	; 0x80093e <xFreeBytesRemaining>
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
    140e:	ce 01       	movw	r24, r28
    1410:	ce de       	rcall	.-612    	; 0x11ae <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
    1412:	0e 94 cb 14 	call	0x2996	; 0x2996 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
    1416:	df 91       	pop	r29
    1418:	cf 91       	pop	r28
    141a:	08 95       	ret

0000141c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    141c:	fc 01       	movw	r30, r24
    /* The list structure contains a list item which is used to mark the
    end of the list.  To initialise the list the list end is inserted
    as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );            /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    141e:	03 96       	adiw	r24, 0x03	; 3
    1420:	92 83       	std	Z+2, r25	; 0x02
    1422:	81 83       	std	Z+1, r24	; 0x01

    /* The list end value is the highest possible value in the list to
    ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
    1424:	4f ef       	ldi	r20, 0xFF	; 255
    1426:	5f ef       	ldi	r21, 0xFF	; 255
    1428:	ba 01       	movw	r22, r20
    142a:	43 83       	std	Z+3, r20	; 0x03
    142c:	54 83       	std	Z+4, r21	; 0x04
    142e:	65 83       	std	Z+5, r22	; 0x05
    1430:	76 83       	std	Z+6, r23	; 0x06

    /* The list end next and previous pointers point to itself so we know
    when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );    /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1432:	90 87       	std	Z+8, r25	; 0x08
    1434:	87 83       	std	Z+7, r24	; 0x07
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1436:	92 87       	std	Z+10, r25	; 0x0a
    1438:	81 87       	std	Z+9, r24	; 0x09

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    143a:	10 82       	st	Z, r1
    143c:	08 95       	ret

0000143e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
    143e:	fc 01       	movw	r30, r24
    1440:	13 86       	std	Z+11, r1	; 0x0b
    1442:	12 86       	std	Z+10, r1	; 0x0a
    1444:	08 95       	ret

00001446 <vListInsertEnd>:
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    1446:	cf 93       	push	r28
    1448:	df 93       	push	r29
    144a:	9c 01       	movw	r18, r24
    144c:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
    144e:	dc 01       	movw	r26, r24
    1450:	11 96       	adiw	r26, 0x01	; 1
    1452:	cd 91       	ld	r28, X+
    1454:	dc 91       	ld	r29, X
    1456:	12 97       	sbiw	r26, 0x02	; 2
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
    makes the new list item the last item to be removed by a call to
    listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
    1458:	d5 83       	std	Z+5, r29	; 0x05
    145a:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    145c:	8e 81       	ldd	r24, Y+6	; 0x06
    145e:	9f 81       	ldd	r25, Y+7	; 0x07
    1460:	97 83       	std	Z+7, r25	; 0x07
    1462:	86 83       	std	Z+6, r24	; 0x06

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
    1464:	8e 81       	ldd	r24, Y+6	; 0x06
    1466:	9f 81       	ldd	r25, Y+7	; 0x07
    1468:	dc 01       	movw	r26, r24
    146a:	15 96       	adiw	r26, 0x05	; 5
    146c:	7c 93       	st	X, r23
    146e:	6e 93       	st	-X, r22
    1470:	14 97       	sbiw	r26, 0x04	; 4
    pxIndex->pxPrevious = pxNewListItem;
    1472:	7f 83       	std	Y+7, r23	; 0x07
    1474:	6e 83       	std	Y+6, r22	; 0x06

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
    1476:	33 87       	std	Z+11, r19	; 0x0b
    1478:	22 87       	std	Z+10, r18	; 0x0a

    ( pxList->uxNumberOfItems )++;
    147a:	f9 01       	movw	r30, r18
    147c:	80 81       	ld	r24, Z
    147e:	8f 5f       	subi	r24, 0xFF	; 255
    1480:	80 83       	st	Z, r24
}
    1482:	df 91       	pop	r29
    1484:	cf 91       	pop	r28
    1486:	08 95       	ret

00001488 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    1488:	0f 93       	push	r16
    148a:	1f 93       	push	r17
    148c:	cf 93       	push	r28
    148e:	df 93       	push	r29
    1490:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    1492:	08 81       	ld	r16, Y
    1494:	19 81       	ldd	r17, Y+1	; 0x01
    1496:	2a 81       	ldd	r18, Y+2	; 0x02
    1498:	3b 81       	ldd	r19, Y+3	; 0x03
    new list item should be placed after it.  This ensures that TCBs which are
    stored in ready lists (all of which have the same xItemValue value) get a
    share of the CPU.  However, if the xItemValue is the same as the back marker
    the iteration loop below will not end.  Therefore the value is checked
    first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
    149a:	0f 3f       	cpi	r16, 0xFF	; 255
    149c:	4f ef       	ldi	r20, 0xFF	; 255
    149e:	14 07       	cpc	r17, r20
    14a0:	24 07       	cpc	r18, r20
    14a2:	34 07       	cpc	r19, r20
    14a4:	21 f4       	brne	.+8      	; 0x14ae <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
    14a6:	fc 01       	movw	r30, r24
    14a8:	a1 85       	ldd	r26, Z+9	; 0x09
    14aa:	b2 85       	ldd	r27, Z+10	; 0x0a
    14ac:	11 c0       	rjmp	.+34     	; 0x14d0 <vListInsert+0x48>
            4) Using a queue or semaphore before it has been initialised or
               before the scheduler has been started (are interrupts firing
               before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
    14ae:	dc 01       	movw	r26, r24
    14b0:	13 96       	adiw	r26, 0x03	; 3
    14b2:	01 c0       	rjmp	.+2      	; 0x14b6 <vListInsert+0x2e>
    14b4:	df 01       	movw	r26, r30
    14b6:	14 96       	adiw	r26, 0x04	; 4
    14b8:	ed 91       	ld	r30, X+
    14ba:	fc 91       	ld	r31, X
    14bc:	15 97       	sbiw	r26, 0x05	; 5
    14be:	40 81       	ld	r20, Z
    14c0:	51 81       	ldd	r21, Z+1	; 0x01
    14c2:	62 81       	ldd	r22, Z+2	; 0x02
    14c4:	73 81       	ldd	r23, Z+3	; 0x03
    14c6:	04 17       	cp	r16, r20
    14c8:	15 07       	cpc	r17, r21
    14ca:	26 07       	cpc	r18, r22
    14cc:	37 07       	cpc	r19, r23
    14ce:	90 f7       	brcc	.-28     	; 0x14b4 <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
            insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
    14d0:	14 96       	adiw	r26, 0x04	; 4
    14d2:	ed 91       	ld	r30, X+
    14d4:	fc 91       	ld	r31, X
    14d6:	15 97       	sbiw	r26, 0x05	; 5
    14d8:	fd 83       	std	Y+5, r31	; 0x05
    14da:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    14dc:	d7 83       	std	Z+7, r29	; 0x07
    14de:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
    14e0:	bf 83       	std	Y+7, r27	; 0x07
    14e2:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
    14e4:	15 96       	adiw	r26, 0x05	; 5
    14e6:	dc 93       	st	X, r29
    14e8:	ce 93       	st	-X, r28
    14ea:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
    item later. */
    pxNewListItem->pxContainer = pxList;
    14ec:	9b 87       	std	Y+11, r25	; 0x0b
    14ee:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
    14f0:	fc 01       	movw	r30, r24
    14f2:	20 81       	ld	r18, Z
    14f4:	2f 5f       	subi	r18, 0xFF	; 255
    14f6:	20 83       	st	Z, r18
}
    14f8:	df 91       	pop	r29
    14fa:	cf 91       	pop	r28
    14fc:	1f 91       	pop	r17
    14fe:	0f 91       	pop	r16
    1500:	08 95       	ret

00001502 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    1502:	cf 93       	push	r28
    1504:	df 93       	push	r29
    1506:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
    1508:	a2 85       	ldd	r26, Z+10	; 0x0a
    150a:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    150c:	c4 81       	ldd	r28, Z+4	; 0x04
    150e:	d5 81       	ldd	r29, Z+5	; 0x05
    1510:	86 81       	ldd	r24, Z+6	; 0x06
    1512:	97 81       	ldd	r25, Z+7	; 0x07
    1514:	9f 83       	std	Y+7, r25	; 0x07
    1516:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    1518:	c6 81       	ldd	r28, Z+6	; 0x06
    151a:	d7 81       	ldd	r29, Z+7	; 0x07
    151c:	84 81       	ldd	r24, Z+4	; 0x04
    151e:	95 81       	ldd	r25, Z+5	; 0x05
    1520:	9d 83       	std	Y+5, r25	; 0x05
    1522:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
    1524:	11 96       	adiw	r26, 0x01	; 1
    1526:	8d 91       	ld	r24, X+
    1528:	9c 91       	ld	r25, X
    152a:	12 97       	sbiw	r26, 0x02	; 2
    152c:	e8 17       	cp	r30, r24
    152e:	f9 07       	cpc	r31, r25
    1530:	31 f4       	brne	.+12     	; 0x153e <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
    1532:	86 81       	ldd	r24, Z+6	; 0x06
    1534:	97 81       	ldd	r25, Z+7	; 0x07
    1536:	12 96       	adiw	r26, 0x02	; 2
    1538:	9c 93       	st	X, r25
    153a:	8e 93       	st	-X, r24
    153c:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
    153e:	13 86       	std	Z+11, r1	; 0x0b
    1540:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
    1542:	8c 91       	ld	r24, X
    1544:	81 50       	subi	r24, 0x01	; 1
    1546:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
    1548:	8c 91       	ld	r24, X
}
    154a:	df 91       	pop	r29
    154c:	cf 91       	pop	r28
    154e:	08 95       	ret

00001550 <pxPortInitialiseStack>:
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    1550:	31 e1       	ldi	r19, 0x11	; 17
    1552:	fc 01       	movw	r30, r24
    1554:	30 83       	st	Z, r19
    1556:	31 97       	sbiw	r30, 0x01	; 1
    1558:	22 e2       	ldi	r18, 0x22	; 34
    155a:	20 83       	st	Z, r18
    155c:	31 97       	sbiw	r30, 0x01	; 1
    155e:	a3 e3       	ldi	r26, 0x33	; 51
    1560:	a0 83       	st	Z, r26
    1562:	31 97       	sbiw	r30, 0x01	; 1
    1564:	60 83       	st	Z, r22
    1566:	31 97       	sbiw	r30, 0x01	; 1
    1568:	70 83       	st	Z, r23
    156a:	31 97       	sbiw	r30, 0x01	; 1
    156c:	10 82       	st	Z, r1
    156e:	31 97       	sbiw	r30, 0x01	; 1
    1570:	10 82       	st	Z, r1
    1572:	31 97       	sbiw	r30, 0x01	; 1
    1574:	60 e8       	ldi	r22, 0x80	; 128
    1576:	60 83       	st	Z, r22
    1578:	31 97       	sbiw	r30, 0x01	; 1
    157a:	10 82       	st	Z, r1
    157c:	31 97       	sbiw	r30, 0x01	; 1
    157e:	10 82       	st	Z, r1
    1580:	31 97       	sbiw	r30, 0x01	; 1
    1582:	10 82       	st	Z, r1
    1584:	31 97       	sbiw	r30, 0x01	; 1
    1586:	62 e0       	ldi	r22, 0x02	; 2
    1588:	60 83       	st	Z, r22
    158a:	31 97       	sbiw	r30, 0x01	; 1
    158c:	63 e0       	ldi	r22, 0x03	; 3
    158e:	60 83       	st	Z, r22
    1590:	31 97       	sbiw	r30, 0x01	; 1
    1592:	64 e0       	ldi	r22, 0x04	; 4
    1594:	60 83       	st	Z, r22
    1596:	31 97       	sbiw	r30, 0x01	; 1
    1598:	65 e0       	ldi	r22, 0x05	; 5
    159a:	60 83       	st	Z, r22
    159c:	31 97       	sbiw	r30, 0x01	; 1
    159e:	66 e0       	ldi	r22, 0x06	; 6
    15a0:	60 83       	st	Z, r22
    15a2:	31 97       	sbiw	r30, 0x01	; 1
    15a4:	67 e0       	ldi	r22, 0x07	; 7
    15a6:	60 83       	st	Z, r22
    15a8:	31 97       	sbiw	r30, 0x01	; 1
    15aa:	68 e0       	ldi	r22, 0x08	; 8
    15ac:	60 83       	st	Z, r22
    15ae:	31 97       	sbiw	r30, 0x01	; 1
    15b0:	69 e0       	ldi	r22, 0x09	; 9
    15b2:	60 83       	st	Z, r22
    15b4:	31 97       	sbiw	r30, 0x01	; 1
    15b6:	60 e1       	ldi	r22, 0x10	; 16
    15b8:	60 83       	st	Z, r22
    15ba:	31 97       	sbiw	r30, 0x01	; 1
    15bc:	30 83       	st	Z, r19
    15be:	31 97       	sbiw	r30, 0x01	; 1
    15c0:	32 e1       	ldi	r19, 0x12	; 18
    15c2:	30 83       	st	Z, r19
    15c4:	31 97       	sbiw	r30, 0x01	; 1
    15c6:	33 e1       	ldi	r19, 0x13	; 19
    15c8:	30 83       	st	Z, r19
    15ca:	31 97       	sbiw	r30, 0x01	; 1
    15cc:	34 e1       	ldi	r19, 0x14	; 20
    15ce:	30 83       	st	Z, r19
    15d0:	31 97       	sbiw	r30, 0x01	; 1
    15d2:	35 e1       	ldi	r19, 0x15	; 21
    15d4:	30 83       	st	Z, r19
    15d6:	31 97       	sbiw	r30, 0x01	; 1
    15d8:	36 e1       	ldi	r19, 0x16	; 22
    15da:	30 83       	st	Z, r19
    15dc:	31 97       	sbiw	r30, 0x01	; 1
    15de:	37 e1       	ldi	r19, 0x17	; 23
    15e0:	30 83       	st	Z, r19
    15e2:	31 97       	sbiw	r30, 0x01	; 1
    15e4:	38 e1       	ldi	r19, 0x18	; 24
    15e6:	30 83       	st	Z, r19
    15e8:	31 97       	sbiw	r30, 0x01	; 1
    15ea:	39 e1       	ldi	r19, 0x19	; 25
    15ec:	30 83       	st	Z, r19
    15ee:	31 97       	sbiw	r30, 0x01	; 1
    15f0:	30 e2       	ldi	r19, 0x20	; 32
    15f2:	30 83       	st	Z, r19
    15f4:	31 97       	sbiw	r30, 0x01	; 1
    15f6:	31 e2       	ldi	r19, 0x21	; 33
    15f8:	30 83       	st	Z, r19
    15fa:	31 97       	sbiw	r30, 0x01	; 1
    15fc:	20 83       	st	Z, r18
    15fe:	31 97       	sbiw	r30, 0x01	; 1
    1600:	23 e2       	ldi	r18, 0x23	; 35
    1602:	20 83       	st	Z, r18
    1604:	31 97       	sbiw	r30, 0x01	; 1
    1606:	40 83       	st	Z, r20
    1608:	31 97       	sbiw	r30, 0x01	; 1
    160a:	50 83       	st	Z, r21
    160c:	31 97       	sbiw	r30, 0x01	; 1
    160e:	26 e2       	ldi	r18, 0x26	; 38
    1610:	20 83       	st	Z, r18
    1612:	31 97       	sbiw	r30, 0x01	; 1
    1614:	27 e2       	ldi	r18, 0x27	; 39
    1616:	20 83       	st	Z, r18
    1618:	31 97       	sbiw	r30, 0x01	; 1
    161a:	28 e2       	ldi	r18, 0x28	; 40
    161c:	20 83       	st	Z, r18
    161e:	31 97       	sbiw	r30, 0x01	; 1
    1620:	29 e2       	ldi	r18, 0x29	; 41
    1622:	20 83       	st	Z, r18
    1624:	31 97       	sbiw	r30, 0x01	; 1
    1626:	20 e3       	ldi	r18, 0x30	; 48
    1628:	20 83       	st	Z, r18
    162a:	31 97       	sbiw	r30, 0x01	; 1
    162c:	21 e3       	ldi	r18, 0x31	; 49
    162e:	20 83       	st	Z, r18
    1630:	89 97       	sbiw	r24, 0x29	; 41
    1632:	08 95       	ret

00001634 <xPortStartScheduler>:
    1634:	a8 95       	wdr
    1636:	90 ec       	ldi	r25, 0xC0	; 192
    1638:	88 e1       	ldi	r24, 0x18	; 24
    163a:	0f b6       	in	r0, 0x3f	; 63
    163c:	f8 94       	cli
    163e:	a8 95       	wdr
    1640:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    1644:	0f be       	out	0x3f, r0	; 63
    1646:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    164a:	a0 91 60 19 	lds	r26, 0x1960	; 0x801960 <pxCurrentTCB>
    164e:	b0 91 61 19 	lds	r27, 0x1961	; 0x801961 <pxCurrentTCB+0x1>
    1652:	cd 91       	ld	r28, X+
    1654:	cd bf       	out	0x3d, r28	; 61
    1656:	dd 91       	ld	r29, X+
    1658:	de bf       	out	0x3e, r29	; 62
    165a:	ff 91       	pop	r31
    165c:	ef 91       	pop	r30
    165e:	df 91       	pop	r29
    1660:	cf 91       	pop	r28
    1662:	bf 91       	pop	r27
    1664:	af 91       	pop	r26
    1666:	9f 91       	pop	r25
    1668:	8f 91       	pop	r24
    166a:	7f 91       	pop	r23
    166c:	6f 91       	pop	r22
    166e:	5f 91       	pop	r21
    1670:	4f 91       	pop	r20
    1672:	3f 91       	pop	r19
    1674:	2f 91       	pop	r18
    1676:	1f 91       	pop	r17
    1678:	0f 91       	pop	r16
    167a:	ff 90       	pop	r15
    167c:	ef 90       	pop	r14
    167e:	df 90       	pop	r13
    1680:	cf 90       	pop	r12
    1682:	bf 90       	pop	r11
    1684:	af 90       	pop	r10
    1686:	9f 90       	pop	r9
    1688:	8f 90       	pop	r8
    168a:	7f 90       	pop	r7
    168c:	6f 90       	pop	r6
    168e:	5f 90       	pop	r5
    1690:	4f 90       	pop	r4
    1692:	3f 90       	pop	r3
    1694:	2f 90       	pop	r2
    1696:	1f 90       	pop	r1
    1698:	0f 90       	pop	r0
    169a:	0c be       	out	0x3c, r0	; 60
    169c:	0f 90       	pop	r0
    169e:	0b be       	out	0x3b, r0	; 59
    16a0:	0f 90       	pop	r0
    16a2:	0f be       	out	0x3f, r0	; 63
    16a4:	0f 90       	pop	r0
    16a6:	08 95       	ret
    16a8:	81 e0       	ldi	r24, 0x01	; 1
    16aa:	08 95       	ret

000016ac <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYield( void )
{
    portSAVE_CONTEXT();
    16ac:	0f 92       	push	r0
    16ae:	0f b6       	in	r0, 0x3f	; 63
    16b0:	f8 94       	cli
    16b2:	0f 92       	push	r0
    16b4:	0b b6       	in	r0, 0x3b	; 59
    16b6:	0f 92       	push	r0
    16b8:	0c b6       	in	r0, 0x3c	; 60
    16ba:	0f 92       	push	r0
    16bc:	1f 92       	push	r1
    16be:	11 24       	eor	r1, r1
    16c0:	2f 92       	push	r2
    16c2:	3f 92       	push	r3
    16c4:	4f 92       	push	r4
    16c6:	5f 92       	push	r5
    16c8:	6f 92       	push	r6
    16ca:	7f 92       	push	r7
    16cc:	8f 92       	push	r8
    16ce:	9f 92       	push	r9
    16d0:	af 92       	push	r10
    16d2:	bf 92       	push	r11
    16d4:	cf 92       	push	r12
    16d6:	df 92       	push	r13
    16d8:	ef 92       	push	r14
    16da:	ff 92       	push	r15
    16dc:	0f 93       	push	r16
    16de:	1f 93       	push	r17
    16e0:	2f 93       	push	r18
    16e2:	3f 93       	push	r19
    16e4:	4f 93       	push	r20
    16e6:	5f 93       	push	r21
    16e8:	6f 93       	push	r22
    16ea:	7f 93       	push	r23
    16ec:	8f 93       	push	r24
    16ee:	9f 93       	push	r25
    16f0:	af 93       	push	r26
    16f2:	bf 93       	push	r27
    16f4:	cf 93       	push	r28
    16f6:	df 93       	push	r29
    16f8:	ef 93       	push	r30
    16fa:	ff 93       	push	r31
    16fc:	a0 91 60 19 	lds	r26, 0x1960	; 0x801960 <pxCurrentTCB>
    1700:	b0 91 61 19 	lds	r27, 0x1961	; 0x801961 <pxCurrentTCB+0x1>
    1704:	0d b6       	in	r0, 0x3d	; 61
    1706:	0d 92       	st	X+, r0
    1708:	0e b6       	in	r0, 0x3e	; 62
    170a:	0d 92       	st	X+, r0
    vTaskSwitchContext();
    170c:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <vTaskSwitchContext>
    portRESTORE_CONTEXT();
    1710:	a0 91 60 19 	lds	r26, 0x1960	; 0x801960 <pxCurrentTCB>
    1714:	b0 91 61 19 	lds	r27, 0x1961	; 0x801961 <pxCurrentTCB+0x1>
    1718:	cd 91       	ld	r28, X+
    171a:	cd bf       	out	0x3d, r28	; 61
    171c:	dd 91       	ld	r29, X+
    171e:	de bf       	out	0x3e, r29	; 62
    1720:	ff 91       	pop	r31
    1722:	ef 91       	pop	r30
    1724:	df 91       	pop	r29
    1726:	cf 91       	pop	r28
    1728:	bf 91       	pop	r27
    172a:	af 91       	pop	r26
    172c:	9f 91       	pop	r25
    172e:	8f 91       	pop	r24
    1730:	7f 91       	pop	r23
    1732:	6f 91       	pop	r22
    1734:	5f 91       	pop	r21
    1736:	4f 91       	pop	r20
    1738:	3f 91       	pop	r19
    173a:	2f 91       	pop	r18
    173c:	1f 91       	pop	r17
    173e:	0f 91       	pop	r16
    1740:	ff 90       	pop	r15
    1742:	ef 90       	pop	r14
    1744:	df 90       	pop	r13
    1746:	cf 90       	pop	r12
    1748:	bf 90       	pop	r11
    174a:	af 90       	pop	r10
    174c:	9f 90       	pop	r9
    174e:	8f 90       	pop	r8
    1750:	7f 90       	pop	r7
    1752:	6f 90       	pop	r6
    1754:	5f 90       	pop	r5
    1756:	4f 90       	pop	r4
    1758:	3f 90       	pop	r3
    175a:	2f 90       	pop	r2
    175c:	1f 90       	pop	r1
    175e:	0f 90       	pop	r0
    1760:	0c be       	out	0x3c, r0	; 60
    1762:	0f 90       	pop	r0
    1764:	0b be       	out	0x3b, r0	; 59
    1766:	0f 90       	pop	r0
    1768:	0f be       	out	0x3f, r0	; 63
    176a:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
    176c:	08 95       	ret

0000176e <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
    176e:	0f 92       	push	r0
    1770:	0f b6       	in	r0, 0x3f	; 63
    1772:	f8 94       	cli
    1774:	0f 92       	push	r0
    1776:	0b b6       	in	r0, 0x3b	; 59
    1778:	0f 92       	push	r0
    177a:	0c b6       	in	r0, 0x3c	; 60
    177c:	0f 92       	push	r0
    177e:	1f 92       	push	r1
    1780:	11 24       	eor	r1, r1
    1782:	2f 92       	push	r2
    1784:	3f 92       	push	r3
    1786:	4f 92       	push	r4
    1788:	5f 92       	push	r5
    178a:	6f 92       	push	r6
    178c:	7f 92       	push	r7
    178e:	8f 92       	push	r8
    1790:	9f 92       	push	r9
    1792:	af 92       	push	r10
    1794:	bf 92       	push	r11
    1796:	cf 92       	push	r12
    1798:	df 92       	push	r13
    179a:	ef 92       	push	r14
    179c:	ff 92       	push	r15
    179e:	0f 93       	push	r16
    17a0:	1f 93       	push	r17
    17a2:	2f 93       	push	r18
    17a4:	3f 93       	push	r19
    17a6:	4f 93       	push	r20
    17a8:	5f 93       	push	r21
    17aa:	6f 93       	push	r22
    17ac:	7f 93       	push	r23
    17ae:	8f 93       	push	r24
    17b0:	9f 93       	push	r25
    17b2:	af 93       	push	r26
    17b4:	bf 93       	push	r27
    17b6:	cf 93       	push	r28
    17b8:	df 93       	push	r29
    17ba:	ef 93       	push	r30
    17bc:	ff 93       	push	r31
    17be:	a0 91 60 19 	lds	r26, 0x1960	; 0x801960 <pxCurrentTCB>
    17c2:	b0 91 61 19 	lds	r27, 0x1961	; 0x801961 <pxCurrentTCB+0x1>
    17c6:	0d b6       	in	r0, 0x3d	; 61
    17c8:	0d 92       	st	X+, r0
    17ca:	0e b6       	in	r0, 0x3e	; 62
    17cc:	0d 92       	st	X+, r0

    sleep_reset();        //     reset the sleep_mode() faster than sleep_disable();
    17ce:	13 be       	out	0x33, r1	; 51

    if( xTaskIncrementTick() != pdFALSE )
    17d0:	0e 94 f6 13 	call	0x27ec	; 0x27ec <xTaskIncrementTick>
    17d4:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
    17d6:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <vTaskSwitchContext>
    }

    portRESTORE_CONTEXT();
    17da:	a0 91 60 19 	lds	r26, 0x1960	; 0x801960 <pxCurrentTCB>
    17de:	b0 91 61 19 	lds	r27, 0x1961	; 0x801961 <pxCurrentTCB+0x1>
    17e2:	cd 91       	ld	r28, X+
    17e4:	cd bf       	out	0x3d, r28	; 61
    17e6:	dd 91       	ld	r29, X+
    17e8:	de bf       	out	0x3e, r29	; 62
    17ea:	ff 91       	pop	r31
    17ec:	ef 91       	pop	r30
    17ee:	df 91       	pop	r29
    17f0:	cf 91       	pop	r28
    17f2:	bf 91       	pop	r27
    17f4:	af 91       	pop	r26
    17f6:	9f 91       	pop	r25
    17f8:	8f 91       	pop	r24
    17fa:	7f 91       	pop	r23
    17fc:	6f 91       	pop	r22
    17fe:	5f 91       	pop	r21
    1800:	4f 91       	pop	r20
    1802:	3f 91       	pop	r19
    1804:	2f 91       	pop	r18
    1806:	1f 91       	pop	r17
    1808:	0f 91       	pop	r16
    180a:	ff 90       	pop	r15
    180c:	ef 90       	pop	r14
    180e:	df 90       	pop	r13
    1810:	cf 90       	pop	r12
    1812:	bf 90       	pop	r11
    1814:	af 90       	pop	r10
    1816:	9f 90       	pop	r9
    1818:	8f 90       	pop	r8
    181a:	7f 90       	pop	r7
    181c:	6f 90       	pop	r6
    181e:	5f 90       	pop	r5
    1820:	4f 90       	pop	r4
    1822:	3f 90       	pop	r3
    1824:	2f 90       	pop	r2
    1826:	1f 90       	pop	r1
    1828:	0f 90       	pop	r0
    182a:	0c be       	out	0x3c, r0	; 60
    182c:	0f 90       	pop	r0
    182e:	0b be       	out	0x3b, r0	; 59
    1830:	0f 90       	pop	r0
    1832:	0f be       	out	0x3f, r0	; 63
    1834:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
    1836:	08 95       	ret

00001838 <__vector_12>:
     */
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
//  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
    1838:	9a df       	rcall	.-204    	; 0x176e <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
    183a:	18 95       	reti

0000183c <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    183c:	0f b6       	in	r0, 0x3f	; 63
    183e:	f8 94       	cli
    1840:	0f 92       	push	r0
    1842:	fc 01       	movw	r30, r24
    1844:	96 8d       	ldd	r25, Z+30	; 0x1e
    1846:	0f 90       	pop	r0
    1848:	0f be       	out	0x3f, r0	; 63
    184a:	81 e0       	ldi	r24, 0x01	; 1
    184c:	91 11       	cpse	r25, r1
    184e:	80 e0       	ldi	r24, 0x00	; 0
    1850:	08 95       	ret

00001852 <prvCopyDataToQueue>:
    1852:	0f 93       	push	r16
    1854:	1f 93       	push	r17
    1856:	cf 93       	push	r28
    1858:	df 93       	push	r29
    185a:	ec 01       	movw	r28, r24
    185c:	04 2f       	mov	r16, r20
    185e:	1e 8d       	ldd	r17, Y+30	; 0x1e
    1860:	48 a1       	ldd	r20, Y+32	; 0x20
    1862:	41 11       	cpse	r20, r1
    1864:	0c c0       	rjmp	.+24     	; 0x187e <prvCopyDataToQueue+0x2c>
    1866:	88 81       	ld	r24, Y
    1868:	99 81       	ldd	r25, Y+1	; 0x01
    186a:	89 2b       	or	r24, r25
    186c:	09 f0       	breq	.+2      	; 0x1870 <prvCopyDataToQueue+0x1e>
    186e:	42 c0       	rjmp	.+132    	; 0x18f4 <prvCopyDataToQueue+0xa2>
    1870:	8c 81       	ldd	r24, Y+4	; 0x04
    1872:	9d 81       	ldd	r25, Y+5	; 0x05
    1874:	0e 94 43 17 	call	0x2e86	; 0x2e86 <xTaskPriorityDisinherit>
    1878:	1d 82       	std	Y+5, r1	; 0x05
    187a:	1c 82       	std	Y+4, r1	; 0x04
    187c:	42 c0       	rjmp	.+132    	; 0x1902 <prvCopyDataToQueue+0xb0>
    187e:	01 11       	cpse	r16, r1
    1880:	17 c0       	rjmp	.+46     	; 0x18b0 <prvCopyDataToQueue+0x5e>
    1882:	50 e0       	ldi	r21, 0x00	; 0
    1884:	8a 81       	ldd	r24, Y+2	; 0x02
    1886:	9b 81       	ldd	r25, Y+3	; 0x03
    1888:	0e 94 cf 2b 	call	0x579e	; 0x579e <memcpy>
    188c:	28 a1       	ldd	r18, Y+32	; 0x20
    188e:	8a 81       	ldd	r24, Y+2	; 0x02
    1890:	9b 81       	ldd	r25, Y+3	; 0x03
    1892:	82 0f       	add	r24, r18
    1894:	91 1d       	adc	r25, r1
    1896:	9b 83       	std	Y+3, r25	; 0x03
    1898:	8a 83       	std	Y+2, r24	; 0x02
    189a:	2c 81       	ldd	r18, Y+4	; 0x04
    189c:	3d 81       	ldd	r19, Y+5	; 0x05
    189e:	82 17       	cp	r24, r18
    18a0:	93 07       	cpc	r25, r19
    18a2:	50 f1       	brcs	.+84     	; 0x18f8 <prvCopyDataToQueue+0xa6>
    18a4:	88 81       	ld	r24, Y
    18a6:	99 81       	ldd	r25, Y+1	; 0x01
    18a8:	9b 83       	std	Y+3, r25	; 0x03
    18aa:	8a 83       	std	Y+2, r24	; 0x02
    18ac:	80 e0       	ldi	r24, 0x00	; 0
    18ae:	29 c0       	rjmp	.+82     	; 0x1902 <prvCopyDataToQueue+0xb0>
    18b0:	50 e0       	ldi	r21, 0x00	; 0
    18b2:	8e 81       	ldd	r24, Y+6	; 0x06
    18b4:	9f 81       	ldd	r25, Y+7	; 0x07
    18b6:	0e 94 cf 2b 	call	0x579e	; 0x579e <memcpy>
    18ba:	88 a1       	ldd	r24, Y+32	; 0x20
    18bc:	90 e0       	ldi	r25, 0x00	; 0
    18be:	91 95       	neg	r25
    18c0:	81 95       	neg	r24
    18c2:	91 09       	sbc	r25, r1
    18c4:	2e 81       	ldd	r18, Y+6	; 0x06
    18c6:	3f 81       	ldd	r19, Y+7	; 0x07
    18c8:	28 0f       	add	r18, r24
    18ca:	39 1f       	adc	r19, r25
    18cc:	3f 83       	std	Y+7, r19	; 0x07
    18ce:	2e 83       	std	Y+6, r18	; 0x06
    18d0:	48 81       	ld	r20, Y
    18d2:	59 81       	ldd	r21, Y+1	; 0x01
    18d4:	24 17       	cp	r18, r20
    18d6:	35 07       	cpc	r19, r21
    18d8:	30 f4       	brcc	.+12     	; 0x18e6 <prvCopyDataToQueue+0x94>
    18da:	2c 81       	ldd	r18, Y+4	; 0x04
    18dc:	3d 81       	ldd	r19, Y+5	; 0x05
    18de:	82 0f       	add	r24, r18
    18e0:	93 1f       	adc	r25, r19
    18e2:	9f 83       	std	Y+7, r25	; 0x07
    18e4:	8e 83       	std	Y+6, r24	; 0x06
    18e6:	02 30       	cpi	r16, 0x02	; 2
    18e8:	49 f4       	brne	.+18     	; 0x18fc <prvCopyDataToQueue+0xaa>
    18ea:	11 23       	and	r17, r17
    18ec:	49 f0       	breq	.+18     	; 0x1900 <prvCopyDataToQueue+0xae>
    18ee:	11 50       	subi	r17, 0x01	; 1
    18f0:	80 e0       	ldi	r24, 0x00	; 0
    18f2:	07 c0       	rjmp	.+14     	; 0x1902 <prvCopyDataToQueue+0xb0>
    18f4:	80 e0       	ldi	r24, 0x00	; 0
    18f6:	05 c0       	rjmp	.+10     	; 0x1902 <prvCopyDataToQueue+0xb0>
    18f8:	80 e0       	ldi	r24, 0x00	; 0
    18fa:	03 c0       	rjmp	.+6      	; 0x1902 <prvCopyDataToQueue+0xb0>
    18fc:	80 e0       	ldi	r24, 0x00	; 0
    18fe:	01 c0       	rjmp	.+2      	; 0x1902 <prvCopyDataToQueue+0xb0>
    1900:	80 e0       	ldi	r24, 0x00	; 0
    1902:	1f 5f       	subi	r17, 0xFF	; 255
    1904:	1e 8f       	std	Y+30, r17	; 0x1e
    1906:	df 91       	pop	r29
    1908:	cf 91       	pop	r28
    190a:	1f 91       	pop	r17
    190c:	0f 91       	pop	r16
    190e:	08 95       	ret

00001910 <prvCopyDataFromQueue>:
    1910:	fc 01       	movw	r30, r24
    1912:	40 a1       	ldd	r20, Z+32	; 0x20
    1914:	44 23       	and	r20, r20
    1916:	a9 f0       	breq	.+42     	; 0x1942 <prvCopyDataFromQueue+0x32>
    1918:	50 e0       	ldi	r21, 0x00	; 0
    191a:	26 81       	ldd	r18, Z+6	; 0x06
    191c:	37 81       	ldd	r19, Z+7	; 0x07
    191e:	24 0f       	add	r18, r20
    1920:	35 1f       	adc	r19, r21
    1922:	37 83       	std	Z+7, r19	; 0x07
    1924:	26 83       	std	Z+6, r18	; 0x06
    1926:	84 81       	ldd	r24, Z+4	; 0x04
    1928:	95 81       	ldd	r25, Z+5	; 0x05
    192a:	28 17       	cp	r18, r24
    192c:	39 07       	cpc	r19, r25
    192e:	20 f0       	brcs	.+8      	; 0x1938 <prvCopyDataFromQueue+0x28>
    1930:	80 81       	ld	r24, Z
    1932:	91 81       	ldd	r25, Z+1	; 0x01
    1934:	97 83       	std	Z+7, r25	; 0x07
    1936:	86 83       	std	Z+6, r24	; 0x06
    1938:	cb 01       	movw	r24, r22
    193a:	66 81       	ldd	r22, Z+6	; 0x06
    193c:	77 81       	ldd	r23, Z+7	; 0x07
    193e:	0c 94 cf 2b 	jmp	0x579e	; 0x579e <memcpy>
    1942:	08 95       	ret

00001944 <prvUnlockQueue>:
    1944:	ef 92       	push	r14
    1946:	ff 92       	push	r15
    1948:	0f 93       	push	r16
    194a:	1f 93       	push	r17
    194c:	cf 93       	push	r28
    194e:	8c 01       	movw	r16, r24
    1950:	0f b6       	in	r0, 0x3f	; 63
    1952:	f8 94       	cli
    1954:	0f 92       	push	r0
    1956:	fc 01       	movw	r30, r24
    1958:	c2 a1       	ldd	r28, Z+34	; 0x22
    195a:	1c 16       	cp	r1, r28
    195c:	ac f4       	brge	.+42     	; 0x1988 <prvUnlockQueue+0x44>
    195e:	83 89       	ldd	r24, Z+19	; 0x13
    1960:	81 11       	cpse	r24, r1
    1962:	06 c0       	rjmp	.+12     	; 0x1970 <prvUnlockQueue+0x2c>
    1964:	11 c0       	rjmp	.+34     	; 0x1988 <prvUnlockQueue+0x44>
    1966:	f8 01       	movw	r30, r16
    1968:	83 89       	ldd	r24, Z+19	; 0x13
    196a:	81 11       	cpse	r24, r1
    196c:	05 c0       	rjmp	.+10     	; 0x1978 <prvUnlockQueue+0x34>
    196e:	0c c0       	rjmp	.+24     	; 0x1988 <prvUnlockQueue+0x44>
    1970:	78 01       	movw	r14, r16
    1972:	f3 e1       	ldi	r31, 0x13	; 19
    1974:	ef 0e       	add	r14, r31
    1976:	f1 1c       	adc	r15, r1
    1978:	c7 01       	movw	r24, r14
    197a:	0e 94 3a 16 	call	0x2c74	; 0x2c74 <xTaskRemoveFromEventList>
    197e:	81 11       	cpse	r24, r1
    1980:	0e 94 2c 17 	call	0x2e58	; 0x2e58 <vTaskMissedYield>
    1984:	c1 50       	subi	r28, 0x01	; 1
    1986:	79 f7       	brne	.-34     	; 0x1966 <prvUnlockQueue+0x22>
    1988:	8f ef       	ldi	r24, 0xFF	; 255
    198a:	f8 01       	movw	r30, r16
    198c:	82 a3       	std	Z+34, r24	; 0x22
    198e:	0f 90       	pop	r0
    1990:	0f be       	out	0x3f, r0	; 63
    1992:	0f b6       	in	r0, 0x3f	; 63
    1994:	f8 94       	cli
    1996:	0f 92       	push	r0
    1998:	c1 a1       	ldd	r28, Z+33	; 0x21
    199a:	1c 16       	cp	r1, r28
    199c:	ac f4       	brge	.+42     	; 0x19c8 <prvUnlockQueue+0x84>
    199e:	80 85       	ldd	r24, Z+8	; 0x08
    19a0:	81 11       	cpse	r24, r1
    19a2:	06 c0       	rjmp	.+12     	; 0x19b0 <prvUnlockQueue+0x6c>
    19a4:	11 c0       	rjmp	.+34     	; 0x19c8 <prvUnlockQueue+0x84>
    19a6:	f8 01       	movw	r30, r16
    19a8:	80 85       	ldd	r24, Z+8	; 0x08
    19aa:	81 11       	cpse	r24, r1
    19ac:	05 c0       	rjmp	.+10     	; 0x19b8 <prvUnlockQueue+0x74>
    19ae:	0c c0       	rjmp	.+24     	; 0x19c8 <prvUnlockQueue+0x84>
    19b0:	78 01       	movw	r14, r16
    19b2:	f8 e0       	ldi	r31, 0x08	; 8
    19b4:	ef 0e       	add	r14, r31
    19b6:	f1 1c       	adc	r15, r1
    19b8:	c7 01       	movw	r24, r14
    19ba:	0e 94 3a 16 	call	0x2c74	; 0x2c74 <xTaskRemoveFromEventList>
    19be:	81 11       	cpse	r24, r1
    19c0:	0e 94 2c 17 	call	0x2e58	; 0x2e58 <vTaskMissedYield>
    19c4:	c1 50       	subi	r28, 0x01	; 1
    19c6:	79 f7       	brne	.-34     	; 0x19a6 <prvUnlockQueue+0x62>
    19c8:	8f ef       	ldi	r24, 0xFF	; 255
    19ca:	f8 01       	movw	r30, r16
    19cc:	81 a3       	std	Z+33, r24	; 0x21
    19ce:	0f 90       	pop	r0
    19d0:	0f be       	out	0x3f, r0	; 63
    19d2:	cf 91       	pop	r28
    19d4:	1f 91       	pop	r17
    19d6:	0f 91       	pop	r16
    19d8:	ff 90       	pop	r15
    19da:	ef 90       	pop	r14
    19dc:	08 95       	ret

000019de <xQueueGenericReset>:
    19de:	cf 93       	push	r28
    19e0:	df 93       	push	r29
    19e2:	ec 01       	movw	r28, r24
    19e4:	0f b6       	in	r0, 0x3f	; 63
    19e6:	f8 94       	cli
    19e8:	0f 92       	push	r0
    19ea:	e8 81       	ld	r30, Y
    19ec:	f9 81       	ldd	r31, Y+1	; 0x01
    19ee:	8f 8d       	ldd	r24, Y+31	; 0x1f
    19f0:	28 a1       	ldd	r18, Y+32	; 0x20
    19f2:	90 e0       	ldi	r25, 0x00	; 0
    19f4:	30 e0       	ldi	r19, 0x00	; 0
    19f6:	82 9f       	mul	r24, r18
    19f8:	a0 01       	movw	r20, r0
    19fa:	83 9f       	mul	r24, r19
    19fc:	50 0d       	add	r21, r0
    19fe:	92 9f       	mul	r25, r18
    1a00:	50 0d       	add	r21, r0
    1a02:	11 24       	eor	r1, r1
    1a04:	4e 0f       	add	r20, r30
    1a06:	5f 1f       	adc	r21, r31
    1a08:	5d 83       	std	Y+5, r21	; 0x05
    1a0a:	4c 83       	std	Y+4, r20	; 0x04
    1a0c:	1e 8e       	std	Y+30, r1	; 0x1e
    1a0e:	fb 83       	std	Y+3, r31	; 0x03
    1a10:	ea 83       	std	Y+2, r30	; 0x02
    1a12:	01 97       	sbiw	r24, 0x01	; 1
    1a14:	82 9f       	mul	r24, r18
    1a16:	a0 01       	movw	r20, r0
    1a18:	83 9f       	mul	r24, r19
    1a1a:	50 0d       	add	r21, r0
    1a1c:	92 9f       	mul	r25, r18
    1a1e:	50 0d       	add	r21, r0
    1a20:	11 24       	eor	r1, r1
    1a22:	cf 01       	movw	r24, r30
    1a24:	84 0f       	add	r24, r20
    1a26:	95 1f       	adc	r25, r21
    1a28:	9f 83       	std	Y+7, r25	; 0x07
    1a2a:	8e 83       	std	Y+6, r24	; 0x06
    1a2c:	8f ef       	ldi	r24, 0xFF	; 255
    1a2e:	89 a3       	std	Y+33, r24	; 0x21
    1a30:	8a a3       	std	Y+34, r24	; 0x22
    1a32:	61 11       	cpse	r22, r1
    1a34:	0b c0       	rjmp	.+22     	; 0x1a4c <xQueueGenericReset+0x6e>
    1a36:	88 85       	ldd	r24, Y+8	; 0x08
    1a38:	88 23       	and	r24, r24
    1a3a:	71 f0       	breq	.+28     	; 0x1a58 <xQueueGenericReset+0x7a>
    1a3c:	ce 01       	movw	r24, r28
    1a3e:	08 96       	adiw	r24, 0x08	; 8
    1a40:	0e 94 3a 16 	call	0x2c74	; 0x2c74 <xTaskRemoveFromEventList>
    1a44:	88 23       	and	r24, r24
    1a46:	41 f0       	breq	.+16     	; 0x1a58 <xQueueGenericReset+0x7a>
    1a48:	31 de       	rcall	.-926    	; 0x16ac <vPortYield>
    1a4a:	06 c0       	rjmp	.+12     	; 0x1a58 <xQueueGenericReset+0x7a>
    1a4c:	ce 01       	movw	r24, r28
    1a4e:	08 96       	adiw	r24, 0x08	; 8
    1a50:	e5 dc       	rcall	.-1590   	; 0x141c <vListInitialise>
    1a52:	ce 01       	movw	r24, r28
    1a54:	43 96       	adiw	r24, 0x13	; 19
    1a56:	e2 dc       	rcall	.-1596   	; 0x141c <vListInitialise>
    1a58:	0f 90       	pop	r0
    1a5a:	0f be       	out	0x3f, r0	; 63
    1a5c:	81 e0       	ldi	r24, 0x01	; 1
    1a5e:	df 91       	pop	r29
    1a60:	cf 91       	pop	r28
    1a62:	08 95       	ret

00001a64 <xQueueGenericCreate>:
    1a64:	ff 92       	push	r15
    1a66:	0f 93       	push	r16
    1a68:	1f 93       	push	r17
    1a6a:	cf 93       	push	r28
    1a6c:	df 93       	push	r29
    1a6e:	08 2f       	mov	r16, r24
    1a70:	16 2f       	mov	r17, r22
    1a72:	f4 2e       	mov	r15, r20
    1a74:	66 23       	and	r22, r22
    1a76:	b9 f0       	breq	.+46     	; 0x1aa6 <xQueueGenericCreate+0x42>
    1a78:	86 9f       	mul	r24, r22
    1a7a:	c0 01       	movw	r24, r0
    1a7c:	11 24       	eor	r1, r1
    1a7e:	85 96       	adiw	r24, 0x25	; 37
    1a80:	e3 db       	rcall	.-2106   	; 0x1248 <pvPortMalloc>
    1a82:	ec 01       	movw	r28, r24
    1a84:	00 97       	sbiw	r24, 0x00	; 0
    1a86:	41 f4       	brne	.+16     	; 0x1a98 <xQueueGenericCreate+0x34>
    1a88:	14 c0       	rjmp	.+40     	; 0x1ab2 <xQueueGenericCreate+0x4e>
    1a8a:	0f 8f       	std	Y+31, r16	; 0x1f
    1a8c:	18 a3       	std	Y+32, r17	; 0x20
    1a8e:	61 e0       	ldi	r22, 0x01	; 1
    1a90:	ce 01       	movw	r24, r28
    1a92:	a5 df       	rcall	.-182    	; 0x19de <xQueueGenericReset>
    1a94:	fc a2       	std	Y+36, r15	; 0x24
    1a96:	0d c0       	rjmp	.+26     	; 0x1ab2 <xQueueGenericCreate+0x4e>
    1a98:	85 96       	adiw	r24, 0x25	; 37
    1a9a:	99 83       	std	Y+1, r25	; 0x01
    1a9c:	88 83       	st	Y, r24
    1a9e:	f5 cf       	rjmp	.-22     	; 0x1a8a <xQueueGenericCreate+0x26>
    1aa0:	d9 83       	std	Y+1, r29	; 0x01
    1aa2:	c8 83       	st	Y, r28
    1aa4:	f2 cf       	rjmp	.-28     	; 0x1a8a <xQueueGenericCreate+0x26>
    1aa6:	85 e2       	ldi	r24, 0x25	; 37
    1aa8:	90 e0       	ldi	r25, 0x00	; 0
    1aaa:	ce db       	rcall	.-2148   	; 0x1248 <pvPortMalloc>
    1aac:	ec 01       	movw	r28, r24
    1aae:	89 2b       	or	r24, r25
    1ab0:	b9 f7       	brne	.-18     	; 0x1aa0 <xQueueGenericCreate+0x3c>
    1ab2:	ce 01       	movw	r24, r28
    1ab4:	df 91       	pop	r29
    1ab6:	cf 91       	pop	r28
    1ab8:	1f 91       	pop	r17
    1aba:	0f 91       	pop	r16
    1abc:	ff 90       	pop	r15
    1abe:	08 95       	ret

00001ac0 <xQueueGenericSend>:
    1ac0:	9f 92       	push	r9
    1ac2:	af 92       	push	r10
    1ac4:	bf 92       	push	r11
    1ac6:	cf 92       	push	r12
    1ac8:	df 92       	push	r13
    1aca:	ef 92       	push	r14
    1acc:	ff 92       	push	r15
    1ace:	0f 93       	push	r16
    1ad0:	1f 93       	push	r17
    1ad2:	cf 93       	push	r28
    1ad4:	df 93       	push	r29
    1ad6:	cd b7       	in	r28, 0x3d	; 61
    1ad8:	de b7       	in	r29, 0x3e	; 62
    1ada:	29 97       	sbiw	r28, 0x09	; 9
    1adc:	0f b6       	in	r0, 0x3f	; 63
    1ade:	f8 94       	cli
    1ae0:	de bf       	out	0x3e, r29	; 62
    1ae2:	0f be       	out	0x3f, r0	; 63
    1ae4:	cd bf       	out	0x3d, r28	; 61
    1ae6:	7c 01       	movw	r14, r24
    1ae8:	5b 01       	movw	r10, r22
    1aea:	2e 83       	std	Y+6, r18	; 0x06
    1aec:	3f 83       	std	Y+7, r19	; 0x07
    1aee:	48 87       	std	Y+8, r20	; 0x08
    1af0:	59 87       	std	Y+9, r21	; 0x09
    1af2:	10 e0       	ldi	r17, 0x00	; 0
    1af4:	99 24       	eor	r9, r9
    1af6:	93 94       	inc	r9
    1af8:	6c 01       	movw	r12, r24
    1afa:	88 e0       	ldi	r24, 0x08	; 8
    1afc:	c8 0e       	add	r12, r24
    1afe:	d1 1c       	adc	r13, r1
    1b00:	0f b6       	in	r0, 0x3f	; 63
    1b02:	f8 94       	cli
    1b04:	0f 92       	push	r0
    1b06:	f7 01       	movw	r30, r14
    1b08:	96 8d       	ldd	r25, Z+30	; 0x1e
    1b0a:	87 8d       	ldd	r24, Z+31	; 0x1f
    1b0c:	98 17       	cp	r25, r24
    1b0e:	10 f0       	brcs	.+4      	; 0x1b14 <xQueueGenericSend+0x54>
    1b10:	02 30       	cpi	r16, 0x02	; 2
    1b12:	b1 f4       	brne	.+44     	; 0x1b40 <xQueueGenericSend+0x80>
    1b14:	40 2f       	mov	r20, r16
    1b16:	b5 01       	movw	r22, r10
    1b18:	c7 01       	movw	r24, r14
    1b1a:	9b de       	rcall	.-714    	; 0x1852 <prvCopyDataToQueue>
    1b1c:	f7 01       	movw	r30, r14
    1b1e:	93 89       	ldd	r25, Z+19	; 0x13
    1b20:	99 23       	and	r25, r25
    1b22:	41 f0       	breq	.+16     	; 0x1b34 <xQueueGenericSend+0x74>
    1b24:	c7 01       	movw	r24, r14
    1b26:	43 96       	adiw	r24, 0x13	; 19
    1b28:	0e 94 3a 16 	call	0x2c74	; 0x2c74 <xTaskRemoveFromEventList>
    1b2c:	88 23       	and	r24, r24
    1b2e:	21 f0       	breq	.+8      	; 0x1b38 <xQueueGenericSend+0x78>
    1b30:	bd dd       	rcall	.-1158   	; 0x16ac <vPortYield>
    1b32:	02 c0       	rjmp	.+4      	; 0x1b38 <xQueueGenericSend+0x78>
    1b34:	81 11       	cpse	r24, r1
    1b36:	ba dd       	rcall	.-1164   	; 0x16ac <vPortYield>
    1b38:	0f 90       	pop	r0
    1b3a:	0f be       	out	0x3f, r0	; 63
    1b3c:	81 e0       	ldi	r24, 0x01	; 1
    1b3e:	4e c0       	rjmp	.+156    	; 0x1bdc <xQueueGenericSend+0x11c>
    1b40:	8e 81       	ldd	r24, Y+6	; 0x06
    1b42:	9f 81       	ldd	r25, Y+7	; 0x07
    1b44:	a8 85       	ldd	r26, Y+8	; 0x08
    1b46:	b9 85       	ldd	r27, Y+9	; 0x09
    1b48:	89 2b       	or	r24, r25
    1b4a:	8a 2b       	or	r24, r26
    1b4c:	8b 2b       	or	r24, r27
    1b4e:	21 f4       	brne	.+8      	; 0x1b58 <xQueueGenericSend+0x98>
    1b50:	0f 90       	pop	r0
    1b52:	0f be       	out	0x3f, r0	; 63
    1b54:	80 e0       	ldi	r24, 0x00	; 0
    1b56:	42 c0       	rjmp	.+132    	; 0x1bdc <xQueueGenericSend+0x11c>
    1b58:	11 11       	cpse	r17, r1
    1b5a:	05 c0       	rjmp	.+10     	; 0x1b66 <xQueueGenericSend+0xa6>
    1b5c:	ce 01       	movw	r24, r28
    1b5e:	01 96       	adiw	r24, 0x01	; 1
    1b60:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <vTaskInternalSetTimeOutState>
    1b64:	19 2d       	mov	r17, r9
    1b66:	0f 90       	pop	r0
    1b68:	0f be       	out	0x3f, r0	; 63
    1b6a:	2c d6       	rcall	.+3160   	; 0x27c4 <vTaskSuspendAll>
    1b6c:	0f b6       	in	r0, 0x3f	; 63
    1b6e:	f8 94       	cli
    1b70:	0f 92       	push	r0
    1b72:	f7 01       	movw	r30, r14
    1b74:	81 a1       	ldd	r24, Z+33	; 0x21
    1b76:	8f 3f       	cpi	r24, 0xFF	; 255
    1b78:	09 f4       	brne	.+2      	; 0x1b7c <xQueueGenericSend+0xbc>
    1b7a:	11 a2       	std	Z+33, r1	; 0x21
    1b7c:	f7 01       	movw	r30, r14
    1b7e:	82 a1       	ldd	r24, Z+34	; 0x22
    1b80:	8f 3f       	cpi	r24, 0xFF	; 255
    1b82:	09 f4       	brne	.+2      	; 0x1b86 <xQueueGenericSend+0xc6>
    1b84:	12 a2       	std	Z+34, r1	; 0x22
    1b86:	0f 90       	pop	r0
    1b88:	0f be       	out	0x3f, r0	; 63
    1b8a:	be 01       	movw	r22, r28
    1b8c:	6a 5f       	subi	r22, 0xFA	; 250
    1b8e:	7f 4f       	sbci	r23, 0xFF	; 255
    1b90:	ce 01       	movw	r24, r28
    1b92:	01 96       	adiw	r24, 0x01	; 1
    1b94:	0e 94 d7 16 	call	0x2dae	; 0x2dae <xTaskCheckForTimeOut>
    1b98:	81 11       	cpse	r24, r1
    1b9a:	1c c0       	rjmp	.+56     	; 0x1bd4 <xQueueGenericSend+0x114>
    1b9c:	0f b6       	in	r0, 0x3f	; 63
    1b9e:	f8 94       	cli
    1ba0:	0f 92       	push	r0
    1ba2:	f7 01       	movw	r30, r14
    1ba4:	96 8d       	ldd	r25, Z+30	; 0x1e
    1ba6:	87 8d       	ldd	r24, Z+31	; 0x1f
    1ba8:	0f 90       	pop	r0
    1baa:	0f be       	out	0x3f, r0	; 63
    1bac:	98 13       	cpse	r25, r24
    1bae:	0e c0       	rjmp	.+28     	; 0x1bcc <xQueueGenericSend+0x10c>
    1bb0:	4e 81       	ldd	r20, Y+6	; 0x06
    1bb2:	5f 81       	ldd	r21, Y+7	; 0x07
    1bb4:	68 85       	ldd	r22, Y+8	; 0x08
    1bb6:	79 85       	ldd	r23, Y+9	; 0x09
    1bb8:	c6 01       	movw	r24, r12
    1bba:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <vTaskPlaceOnEventList>
    1bbe:	c7 01       	movw	r24, r14
    1bc0:	c1 de       	rcall	.-638    	; 0x1944 <prvUnlockQueue>
    1bc2:	e9 d6       	rcall	.+3538   	; 0x2996 <xTaskResumeAll>
    1bc4:	81 11       	cpse	r24, r1
    1bc6:	9c cf       	rjmp	.-200    	; 0x1b00 <xQueueGenericSend+0x40>
    1bc8:	71 dd       	rcall	.-1310   	; 0x16ac <vPortYield>
    1bca:	9a cf       	rjmp	.-204    	; 0x1b00 <xQueueGenericSend+0x40>
    1bcc:	c7 01       	movw	r24, r14
    1bce:	ba de       	rcall	.-652    	; 0x1944 <prvUnlockQueue>
    1bd0:	e2 d6       	rcall	.+3524   	; 0x2996 <xTaskResumeAll>
    1bd2:	96 cf       	rjmp	.-212    	; 0x1b00 <xQueueGenericSend+0x40>
    1bd4:	c7 01       	movw	r24, r14
    1bd6:	b6 de       	rcall	.-660    	; 0x1944 <prvUnlockQueue>
    1bd8:	de d6       	rcall	.+3516   	; 0x2996 <xTaskResumeAll>
    1bda:	80 e0       	ldi	r24, 0x00	; 0
    1bdc:	29 96       	adiw	r28, 0x09	; 9
    1bde:	0f b6       	in	r0, 0x3f	; 63
    1be0:	f8 94       	cli
    1be2:	de bf       	out	0x3e, r29	; 62
    1be4:	0f be       	out	0x3f, r0	; 63
    1be6:	cd bf       	out	0x3d, r28	; 61
    1be8:	df 91       	pop	r29
    1bea:	cf 91       	pop	r28
    1bec:	1f 91       	pop	r17
    1bee:	0f 91       	pop	r16
    1bf0:	ff 90       	pop	r15
    1bf2:	ef 90       	pop	r14
    1bf4:	df 90       	pop	r13
    1bf6:	cf 90       	pop	r12
    1bf8:	bf 90       	pop	r11
    1bfa:	af 90       	pop	r10
    1bfc:	9f 90       	pop	r9
    1bfe:	08 95       	ret

00001c00 <xQueueCreateMutex>:
    1c00:	0f 93       	push	r16
    1c02:	cf 93       	push	r28
    1c04:	df 93       	push	r29
    1c06:	48 2f       	mov	r20, r24
    1c08:	60 e0       	ldi	r22, 0x00	; 0
    1c0a:	81 e0       	ldi	r24, 0x01	; 1
    1c0c:	2b df       	rcall	.-426    	; 0x1a64 <xQueueGenericCreate>
    1c0e:	ec 01       	movw	r28, r24
    1c10:	00 97       	sbiw	r24, 0x00	; 0
    1c12:	61 f0       	breq	.+24     	; 0x1c2c <xQueueCreateMutex+0x2c>
    1c14:	1d 82       	std	Y+5, r1	; 0x05
    1c16:	1c 82       	std	Y+4, r1	; 0x04
    1c18:	19 82       	std	Y+1, r1	; 0x01
    1c1a:	18 82       	st	Y, r1
    1c1c:	1e 82       	std	Y+6, r1	; 0x06
    1c1e:	00 e0       	ldi	r16, 0x00	; 0
    1c20:	20 e0       	ldi	r18, 0x00	; 0
    1c22:	30 e0       	ldi	r19, 0x00	; 0
    1c24:	a9 01       	movw	r20, r18
    1c26:	60 e0       	ldi	r22, 0x00	; 0
    1c28:	70 e0       	ldi	r23, 0x00	; 0
    1c2a:	4a df       	rcall	.-364    	; 0x1ac0 <xQueueGenericSend>
    1c2c:	ce 01       	movw	r24, r28
    1c2e:	df 91       	pop	r29
    1c30:	cf 91       	pop	r28
    1c32:	0f 91       	pop	r16
    1c34:	08 95       	ret

00001c36 <xQueueGenericSendFromISR>:
    1c36:	ef 92       	push	r14
    1c38:	ff 92       	push	r15
    1c3a:	0f 93       	push	r16
    1c3c:	1f 93       	push	r17
    1c3e:	cf 93       	push	r28
    1c40:	df 93       	push	r29
    1c42:	8a 01       	movw	r16, r20
    1c44:	fc 01       	movw	r30, r24
    1c46:	56 8d       	ldd	r21, Z+30	; 0x1e
    1c48:	37 8d       	ldd	r19, Z+31	; 0x1f
    1c4a:	53 17       	cp	r21, r19
    1c4c:	10 f0       	brcs	.+4      	; 0x1c52 <xQueueGenericSendFromISR+0x1c>
    1c4e:	22 30       	cpi	r18, 0x02	; 2
    1c50:	e9 f4       	brne	.+58     	; 0x1c8c <xQueueGenericSendFromISR+0x56>
    1c52:	42 2f       	mov	r20, r18
    1c54:	78 01       	movw	r14, r16
    1c56:	ec 01       	movw	r28, r24
    1c58:	1a a1       	ldd	r17, Y+34	; 0x22
    1c5a:	fb dd       	rcall	.-1034   	; 0x1852 <prvCopyDataToQueue>
    1c5c:	1f 3f       	cpi	r17, 0xFF	; 255
    1c5e:	81 f4       	brne	.+32     	; 0x1c80 <xQueueGenericSendFromISR+0x4a>
    1c60:	8b 89       	ldd	r24, Y+19	; 0x13
    1c62:	88 23       	and	r24, r24
    1c64:	a9 f0       	breq	.+42     	; 0x1c90 <xQueueGenericSendFromISR+0x5a>
    1c66:	ce 01       	movw	r24, r28
    1c68:	43 96       	adiw	r24, 0x13	; 19
    1c6a:	0e 94 3a 16 	call	0x2c74	; 0x2c74 <xTaskRemoveFromEventList>
    1c6e:	88 23       	and	r24, r24
    1c70:	89 f0       	breq	.+34     	; 0x1c94 <xQueueGenericSendFromISR+0x5e>
    1c72:	e1 14       	cp	r14, r1
    1c74:	f1 04       	cpc	r15, r1
    1c76:	81 f0       	breq	.+32     	; 0x1c98 <xQueueGenericSendFromISR+0x62>
    1c78:	81 e0       	ldi	r24, 0x01	; 1
    1c7a:	f7 01       	movw	r30, r14
    1c7c:	80 83       	st	Z, r24
    1c7e:	0d c0       	rjmp	.+26     	; 0x1c9a <xQueueGenericSendFromISR+0x64>
    1c80:	ff 24       	eor	r15, r15
    1c82:	f3 94       	inc	r15
    1c84:	f1 0e       	add	r15, r17
    1c86:	fa a2       	std	Y+34, r15	; 0x22
    1c88:	81 e0       	ldi	r24, 0x01	; 1
    1c8a:	07 c0       	rjmp	.+14     	; 0x1c9a <xQueueGenericSendFromISR+0x64>
    1c8c:	80 e0       	ldi	r24, 0x00	; 0
    1c8e:	05 c0       	rjmp	.+10     	; 0x1c9a <xQueueGenericSendFromISR+0x64>
    1c90:	81 e0       	ldi	r24, 0x01	; 1
    1c92:	03 c0       	rjmp	.+6      	; 0x1c9a <xQueueGenericSendFromISR+0x64>
    1c94:	81 e0       	ldi	r24, 0x01	; 1
    1c96:	01 c0       	rjmp	.+2      	; 0x1c9a <xQueueGenericSendFromISR+0x64>
    1c98:	81 e0       	ldi	r24, 0x01	; 1
    1c9a:	df 91       	pop	r29
    1c9c:	cf 91       	pop	r28
    1c9e:	1f 91       	pop	r17
    1ca0:	0f 91       	pop	r16
    1ca2:	ff 90       	pop	r15
    1ca4:	ef 90       	pop	r14
    1ca6:	08 95       	ret

00001ca8 <xQueueReceive>:
    1ca8:	9f 92       	push	r9
    1caa:	af 92       	push	r10
    1cac:	bf 92       	push	r11
    1cae:	cf 92       	push	r12
    1cb0:	df 92       	push	r13
    1cb2:	ef 92       	push	r14
    1cb4:	ff 92       	push	r15
    1cb6:	0f 93       	push	r16
    1cb8:	1f 93       	push	r17
    1cba:	cf 93       	push	r28
    1cbc:	df 93       	push	r29
    1cbe:	cd b7       	in	r28, 0x3d	; 61
    1cc0:	de b7       	in	r29, 0x3e	; 62
    1cc2:	29 97       	sbiw	r28, 0x09	; 9
    1cc4:	0f b6       	in	r0, 0x3f	; 63
    1cc6:	f8 94       	cli
    1cc8:	de bf       	out	0x3e, r29	; 62
    1cca:	0f be       	out	0x3f, r0	; 63
    1ccc:	cd bf       	out	0x3d, r28	; 61
    1cce:	8c 01       	movw	r16, r24
    1cd0:	5b 01       	movw	r10, r22
    1cd2:	2e 83       	std	Y+6, r18	; 0x06
    1cd4:	3f 83       	std	Y+7, r19	; 0x07
    1cd6:	48 87       	std	Y+8, r20	; 0x08
    1cd8:	59 87       	std	Y+9, r21	; 0x09
    1cda:	e1 2c       	mov	r14, r1
    1cdc:	99 24       	eor	r9, r9
    1cde:	93 94       	inc	r9
    1ce0:	6c 01       	movw	r12, r24
    1ce2:	83 e1       	ldi	r24, 0x13	; 19
    1ce4:	c8 0e       	add	r12, r24
    1ce6:	d1 1c       	adc	r13, r1
    1ce8:	0f b6       	in	r0, 0x3f	; 63
    1cea:	f8 94       	cli
    1cec:	0f 92       	push	r0
    1cee:	f8 01       	movw	r30, r16
    1cf0:	f6 8c       	ldd	r15, Z+30	; 0x1e
    1cf2:	ff 20       	and	r15, r15
    1cf4:	91 f0       	breq	.+36     	; 0x1d1a <xQueueReceive+0x72>
    1cf6:	b5 01       	movw	r22, r10
    1cf8:	c8 01       	movw	r24, r16
    1cfa:	0a de       	rcall	.-1004   	; 0x1910 <prvCopyDataFromQueue>
    1cfc:	fa 94       	dec	r15
    1cfe:	f8 01       	movw	r30, r16
    1d00:	f6 8e       	std	Z+30, r15	; 0x1e
    1d02:	80 85       	ldd	r24, Z+8	; 0x08
    1d04:	88 23       	and	r24, r24
    1d06:	29 f0       	breq	.+10     	; 0x1d12 <xQueueReceive+0x6a>
    1d08:	c8 01       	movw	r24, r16
    1d0a:	08 96       	adiw	r24, 0x08	; 8
    1d0c:	b3 d7       	rcall	.+3942   	; 0x2c74 <xTaskRemoveFromEventList>
    1d0e:	81 11       	cpse	r24, r1
    1d10:	cd dc       	rcall	.-1638   	; 0x16ac <vPortYield>
    1d12:	0f 90       	pop	r0
    1d14:	0f be       	out	0x3f, r0	; 63
    1d16:	81 e0       	ldi	r24, 0x01	; 1
    1d18:	4c c0       	rjmp	.+152    	; 0x1db2 <xQueueReceive+0x10a>
    1d1a:	8e 81       	ldd	r24, Y+6	; 0x06
    1d1c:	9f 81       	ldd	r25, Y+7	; 0x07
    1d1e:	a8 85       	ldd	r26, Y+8	; 0x08
    1d20:	b9 85       	ldd	r27, Y+9	; 0x09
    1d22:	89 2b       	or	r24, r25
    1d24:	8a 2b       	or	r24, r26
    1d26:	8b 2b       	or	r24, r27
    1d28:	21 f4       	brne	.+8      	; 0x1d32 <xQueueReceive+0x8a>
    1d2a:	0f 90       	pop	r0
    1d2c:	0f be       	out	0x3f, r0	; 63
    1d2e:	80 e0       	ldi	r24, 0x00	; 0
    1d30:	40 c0       	rjmp	.+128    	; 0x1db2 <xQueueReceive+0x10a>
    1d32:	e1 10       	cpse	r14, r1
    1d34:	05 c0       	rjmp	.+10     	; 0x1d40 <xQueueReceive+0x98>
    1d36:	ce 01       	movw	r24, r28
    1d38:	01 96       	adiw	r24, 0x01	; 1
    1d3a:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <vTaskInternalSetTimeOutState>
    1d3e:	e9 2c       	mov	r14, r9
    1d40:	0f 90       	pop	r0
    1d42:	0f be       	out	0x3f, r0	; 63
    1d44:	3f d5       	rcall	.+2686   	; 0x27c4 <vTaskSuspendAll>
    1d46:	0f b6       	in	r0, 0x3f	; 63
    1d48:	f8 94       	cli
    1d4a:	0f 92       	push	r0
    1d4c:	f8 01       	movw	r30, r16
    1d4e:	81 a1       	ldd	r24, Z+33	; 0x21
    1d50:	8f 3f       	cpi	r24, 0xFF	; 255
    1d52:	09 f4       	brne	.+2      	; 0x1d56 <xQueueReceive+0xae>
    1d54:	11 a2       	std	Z+33, r1	; 0x21
    1d56:	f8 01       	movw	r30, r16
    1d58:	82 a1       	ldd	r24, Z+34	; 0x22
    1d5a:	8f 3f       	cpi	r24, 0xFF	; 255
    1d5c:	09 f4       	brne	.+2      	; 0x1d60 <xQueueReceive+0xb8>
    1d5e:	12 a2       	std	Z+34, r1	; 0x22
    1d60:	0f 90       	pop	r0
    1d62:	0f be       	out	0x3f, r0	; 63
    1d64:	be 01       	movw	r22, r28
    1d66:	6a 5f       	subi	r22, 0xFA	; 250
    1d68:	7f 4f       	sbci	r23, 0xFF	; 255
    1d6a:	ce 01       	movw	r24, r28
    1d6c:	01 96       	adiw	r24, 0x01	; 1
    1d6e:	0e 94 d7 16 	call	0x2dae	; 0x2dae <xTaskCheckForTimeOut>
    1d72:	81 11       	cpse	r24, r1
    1d74:	15 c0       	rjmp	.+42     	; 0x1da0 <xQueueReceive+0xf8>
    1d76:	c8 01       	movw	r24, r16
    1d78:	61 dd       	rcall	.-1342   	; 0x183c <prvIsQueueEmpty>
    1d7a:	88 23       	and	r24, r24
    1d7c:	69 f0       	breq	.+26     	; 0x1d98 <xQueueReceive+0xf0>
    1d7e:	4e 81       	ldd	r20, Y+6	; 0x06
    1d80:	5f 81       	ldd	r21, Y+7	; 0x07
    1d82:	68 85       	ldd	r22, Y+8	; 0x08
    1d84:	79 85       	ldd	r23, Y+9	; 0x09
    1d86:	c6 01       	movw	r24, r12
    1d88:	1a d7       	rcall	.+3636   	; 0x2bbe <vTaskPlaceOnEventList>
    1d8a:	c8 01       	movw	r24, r16
    1d8c:	db dd       	rcall	.-1098   	; 0x1944 <prvUnlockQueue>
    1d8e:	03 d6       	rcall	.+3078   	; 0x2996 <xTaskResumeAll>
    1d90:	81 11       	cpse	r24, r1
    1d92:	aa cf       	rjmp	.-172    	; 0x1ce8 <xQueueReceive+0x40>
    1d94:	8b dc       	rcall	.-1770   	; 0x16ac <vPortYield>
    1d96:	a8 cf       	rjmp	.-176    	; 0x1ce8 <xQueueReceive+0x40>
    1d98:	c8 01       	movw	r24, r16
    1d9a:	d4 dd       	rcall	.-1112   	; 0x1944 <prvUnlockQueue>
    1d9c:	fc d5       	rcall	.+3064   	; 0x2996 <xTaskResumeAll>
    1d9e:	a4 cf       	rjmp	.-184    	; 0x1ce8 <xQueueReceive+0x40>
    1da0:	c8 01       	movw	r24, r16
    1da2:	d0 dd       	rcall	.-1120   	; 0x1944 <prvUnlockQueue>
    1da4:	f8 d5       	rcall	.+3056   	; 0x2996 <xTaskResumeAll>
    1da6:	c8 01       	movw	r24, r16
    1da8:	49 dd       	rcall	.-1390   	; 0x183c <prvIsQueueEmpty>
    1daa:	88 23       	and	r24, r24
    1dac:	09 f4       	brne	.+2      	; 0x1db0 <xQueueReceive+0x108>
    1dae:	9c cf       	rjmp	.-200    	; 0x1ce8 <xQueueReceive+0x40>
    1db0:	80 e0       	ldi	r24, 0x00	; 0
    1db2:	29 96       	adiw	r28, 0x09	; 9
    1db4:	0f b6       	in	r0, 0x3f	; 63
    1db6:	f8 94       	cli
    1db8:	de bf       	out	0x3e, r29	; 62
    1dba:	0f be       	out	0x3f, r0	; 63
    1dbc:	cd bf       	out	0x3d, r28	; 61
    1dbe:	df 91       	pop	r29
    1dc0:	cf 91       	pop	r28
    1dc2:	1f 91       	pop	r17
    1dc4:	0f 91       	pop	r16
    1dc6:	ff 90       	pop	r15
    1dc8:	ef 90       	pop	r14
    1dca:	df 90       	pop	r13
    1dcc:	cf 90       	pop	r12
    1dce:	bf 90       	pop	r11
    1dd0:	af 90       	pop	r10
    1dd2:	9f 90       	pop	r9
    1dd4:	08 95       	ret

00001dd6 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
    {
    1dd6:	cf 93       	push	r28
    1dd8:	df 93       	push	r29
    1dda:	ec 01       	movw	r28, r24
        will not actually cause the task to block, just place it on a blocked
        list.  It will not block until the scheduler is unlocked - at which
        time a yield will be performed.  If an item is added to the queue while
        the queue is locked, and the calling task blocks on the queue, then the
        calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    1ddc:	0f b6       	in	r0, 0x3f	; 63
    1dde:	f8 94       	cli
    1de0:	0f 92       	push	r0
    1de2:	89 a1       	ldd	r24, Y+33	; 0x21
    1de4:	8f 3f       	cpi	r24, 0xFF	; 255
    1de6:	09 f4       	brne	.+2      	; 0x1dea <vQueueWaitForMessageRestricted+0x14>
    1de8:	19 a2       	std	Y+33, r1	; 0x21
    1dea:	8a a1       	ldd	r24, Y+34	; 0x22
    1dec:	8f 3f       	cpi	r24, 0xFF	; 255
    1dee:	09 f4       	brne	.+2      	; 0x1df2 <vQueueWaitForMessageRestricted+0x1c>
    1df0:	1a a2       	std	Y+34, r1	; 0x22
    1df2:	0f 90       	pop	r0
    1df4:	0f be       	out	0x3f, r0	; 63
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    1df6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1df8:	81 11       	cpse	r24, r1
    1dfa:	03 c0       	rjmp	.+6      	; 0x1e02 <vQueueWaitForMessageRestricted+0x2c>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    1dfc:	ce 01       	movw	r24, r28
    1dfe:	43 96       	adiw	r24, 0x13	; 19
    1e00:	19 d7       	rcall	.+3634   	; 0x2c34 <vTaskPlaceOnEventListRestricted>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
        prvUnlockQueue( pxQueue );
    1e02:	ce 01       	movw	r24, r28
    1e04:	9f dd       	rcall	.-1218   	; 0x1944 <prvUnlockQueue>
    }
    1e06:	df 91       	pop	r29
    1e08:	cf 91       	pop	r28
    1e0a:	08 95       	ret

00001e0c <prvBytesInBuffer>:

    configASSERT( pxStreamBuffer );

    xReturn = prvBytesInBuffer( pxStreamBuffer );
    return xReturn;
}
    1e0c:	fc 01       	movw	r30, r24
    1e0e:	44 81       	ldd	r20, Z+4	; 0x04
    1e10:	55 81       	ldd	r21, Z+5	; 0x05
    1e12:	22 81       	ldd	r18, Z+2	; 0x02
    1e14:	33 81       	ldd	r19, Z+3	; 0x03
    1e16:	24 0f       	add	r18, r20
    1e18:	35 1f       	adc	r19, r21
    1e1a:	80 81       	ld	r24, Z
    1e1c:	91 81       	ldd	r25, Z+1	; 0x01
    1e1e:	b9 01       	movw	r22, r18
    1e20:	68 1b       	sub	r22, r24
    1e22:	79 0b       	sbc	r23, r25
    1e24:	cb 01       	movw	r24, r22
    1e26:	64 17       	cp	r22, r20
    1e28:	75 07       	cpc	r23, r21
    1e2a:	10 f0       	brcs	.+4      	; 0x1e30 <prvBytesInBuffer+0x24>
    1e2c:	84 1b       	sub	r24, r20
    1e2e:	95 0b       	sbc	r25, r21
    1e30:	08 95       	ret

00001e32 <prvWriteBytesToBuffer>:
    1e32:	af 92       	push	r10
    1e34:	bf 92       	push	r11
    1e36:	cf 92       	push	r12
    1e38:	df 92       	push	r13
    1e3a:	ef 92       	push	r14
    1e3c:	ff 92       	push	r15
    1e3e:	0f 93       	push	r16
    1e40:	1f 93       	push	r17
    1e42:	cf 93       	push	r28
    1e44:	df 93       	push	r29
    1e46:	6c 01       	movw	r12, r24
    1e48:	5b 01       	movw	r10, r22
    1e4a:	7a 01       	movw	r14, r20
    1e4c:	fc 01       	movw	r30, r24
    1e4e:	c2 81       	ldd	r28, Z+2	; 0x02
    1e50:	d3 81       	ldd	r29, Z+3	; 0x03
    1e52:	04 81       	ldd	r16, Z+4	; 0x04
    1e54:	15 81       	ldd	r17, Z+5	; 0x05
    1e56:	0c 1b       	sub	r16, r28
    1e58:	1d 0b       	sbc	r17, r29
    1e5a:	40 17       	cp	r20, r16
    1e5c:	51 07       	cpc	r21, r17
    1e5e:	08 f4       	brcc	.+2      	; 0x1e62 <prvWriteBytesToBuffer+0x30>
    1e60:	8a 01       	movw	r16, r20
    1e62:	f6 01       	movw	r30, r12
    1e64:	84 85       	ldd	r24, Z+12	; 0x0c
    1e66:	95 85       	ldd	r25, Z+13	; 0x0d
    1e68:	a8 01       	movw	r20, r16
    1e6a:	b5 01       	movw	r22, r10
    1e6c:	8c 0f       	add	r24, r28
    1e6e:	9d 1f       	adc	r25, r29
    1e70:	0e 94 cf 2b 	call	0x579e	; 0x579e <memcpy>
    1e74:	0e 15       	cp	r16, r14
    1e76:	1f 05       	cpc	r17, r15
    1e78:	58 f4       	brcc	.+22     	; 0x1e90 <prvWriteBytesToBuffer+0x5e>
    1e7a:	a7 01       	movw	r20, r14
    1e7c:	40 1b       	sub	r20, r16
    1e7e:	51 0b       	sbc	r21, r17
    1e80:	b5 01       	movw	r22, r10
    1e82:	60 0f       	add	r22, r16
    1e84:	71 1f       	adc	r23, r17
    1e86:	f6 01       	movw	r30, r12
    1e88:	84 85       	ldd	r24, Z+12	; 0x0c
    1e8a:	95 85       	ldd	r25, Z+13	; 0x0d
    1e8c:	0e 94 cf 2b 	call	0x579e	; 0x579e <memcpy>
    1e90:	ce 01       	movw	r24, r28
    1e92:	8e 0d       	add	r24, r14
    1e94:	9f 1d       	adc	r25, r15
    1e96:	f6 01       	movw	r30, r12
    1e98:	24 81       	ldd	r18, Z+4	; 0x04
    1e9a:	35 81       	ldd	r19, Z+5	; 0x05
    1e9c:	82 17       	cp	r24, r18
    1e9e:	93 07       	cpc	r25, r19
    1ea0:	10 f0       	brcs	.+4      	; 0x1ea6 <prvWriteBytesToBuffer+0x74>
    1ea2:	82 1b       	sub	r24, r18
    1ea4:	93 0b       	sbc	r25, r19
    1ea6:	f6 01       	movw	r30, r12
    1ea8:	93 83       	std	Z+3, r25	; 0x03
    1eaa:	82 83       	std	Z+2, r24	; 0x02
    1eac:	c7 01       	movw	r24, r14
    1eae:	df 91       	pop	r29
    1eb0:	cf 91       	pop	r28
    1eb2:	1f 91       	pop	r17
    1eb4:	0f 91       	pop	r16
    1eb6:	ff 90       	pop	r15
    1eb8:	ef 90       	pop	r14
    1eba:	df 90       	pop	r13
    1ebc:	cf 90       	pop	r12
    1ebe:	bf 90       	pop	r11
    1ec0:	af 90       	pop	r10
    1ec2:	08 95       	ret

00001ec4 <prvWriteMessageToBuffer>:
    1ec4:	cf 92       	push	r12
    1ec6:	df 92       	push	r13
    1ec8:	ef 92       	push	r14
    1eca:	ff 92       	push	r15
    1ecc:	0f 93       	push	r16
    1ece:	1f 93       	push	r17
    1ed0:	cf 93       	push	r28
    1ed2:	df 93       	push	r29
    1ed4:	1f 92       	push	r1
    1ed6:	1f 92       	push	r1
    1ed8:	cd b7       	in	r28, 0x3d	; 61
    1eda:	de b7       	in	r29, 0x3e	; 62
    1edc:	5a 83       	std	Y+2, r21	; 0x02
    1ede:	49 83       	std	Y+1, r20	; 0x01
    1ee0:	21 15       	cp	r18, r1
    1ee2:	31 05       	cpc	r19, r1
    1ee4:	c9 f0       	breq	.+50     	; 0x1f18 <prvWriteMessageToBuffer+0x54>
    1ee6:	6b 01       	movw	r12, r22
    1ee8:	7c 01       	movw	r14, r24
    1eea:	fc 01       	movw	r30, r24
    1eec:	86 85       	ldd	r24, Z+14	; 0x0e
    1eee:	80 fd       	sbrc	r24, 0
    1ef0:	08 c0       	rjmp	.+16     	; 0x1f02 <prvWriteMessageToBuffer+0x3e>
    1ef2:	ca 01       	movw	r24, r20
    1ef4:	24 17       	cp	r18, r20
    1ef6:	35 07       	cpc	r19, r21
    1ef8:	08 f4       	brcc	.+2      	; 0x1efc <prvWriteMessageToBuffer+0x38>
    1efa:	c9 01       	movw	r24, r18
    1efc:	9a 83       	std	Y+2, r25	; 0x02
    1efe:	89 83       	std	Y+1, r24	; 0x01
    1f00:	11 c0       	rjmp	.+34     	; 0x1f24 <prvWriteMessageToBuffer+0x60>
    1f02:	20 17       	cp	r18, r16
    1f04:	31 07       	cpc	r19, r17
    1f06:	58 f0       	brcs	.+22     	; 0x1f1e <prvWriteMessageToBuffer+0x5a>
    1f08:	42 e0       	ldi	r20, 0x02	; 2
    1f0a:	50 e0       	ldi	r21, 0x00	; 0
    1f0c:	be 01       	movw	r22, r28
    1f0e:	6f 5f       	subi	r22, 0xFF	; 255
    1f10:	7f 4f       	sbci	r23, 0xFF	; 255
    1f12:	c7 01       	movw	r24, r14
    1f14:	8e df       	rcall	.-228    	; 0x1e32 <prvWriteBytesToBuffer>
    1f16:	06 c0       	rjmp	.+12     	; 0x1f24 <prvWriteMessageToBuffer+0x60>
    1f18:	80 e0       	ldi	r24, 0x00	; 0
    1f1a:	90 e0       	ldi	r25, 0x00	; 0
    1f1c:	08 c0       	rjmp	.+16     	; 0x1f2e <prvWriteMessageToBuffer+0x6a>
    1f1e:	80 e0       	ldi	r24, 0x00	; 0
    1f20:	90 e0       	ldi	r25, 0x00	; 0
    1f22:	05 c0       	rjmp	.+10     	; 0x1f2e <prvWriteMessageToBuffer+0x6a>
    1f24:	49 81       	ldd	r20, Y+1	; 0x01
    1f26:	5a 81       	ldd	r21, Y+2	; 0x02
    1f28:	b6 01       	movw	r22, r12
    1f2a:	c7 01       	movw	r24, r14
    1f2c:	82 df       	rcall	.-252    	; 0x1e32 <prvWriteBytesToBuffer>
    1f2e:	0f 90       	pop	r0
    1f30:	0f 90       	pop	r0
    1f32:	df 91       	pop	r29
    1f34:	cf 91       	pop	r28
    1f36:	1f 91       	pop	r17
    1f38:	0f 91       	pop	r16
    1f3a:	ff 90       	pop	r15
    1f3c:	ef 90       	pop	r14
    1f3e:	df 90       	pop	r13
    1f40:	cf 90       	pop	r12
    1f42:	08 95       	ret

00001f44 <prvReadBytesFromBuffer>:
    1f44:	af 92       	push	r10
    1f46:	bf 92       	push	r11
    1f48:	cf 92       	push	r12
    1f4a:	df 92       	push	r13
    1f4c:	ef 92       	push	r14
    1f4e:	ff 92       	push	r15
    1f50:	0f 93       	push	r16
    1f52:	1f 93       	push	r17
    1f54:	cf 93       	push	r28
    1f56:	df 93       	push	r29
    1f58:	7c 01       	movw	r14, r24
    1f5a:	5b 01       	movw	r10, r22
    1f5c:	e9 01       	movw	r28, r18
    1f5e:	42 17       	cp	r20, r18
    1f60:	53 07       	cpc	r21, r19
    1f62:	08 f4       	brcc	.+2      	; 0x1f66 <prvReadBytesFromBuffer+0x22>
    1f64:	ea 01       	movw	r28, r20
    1f66:	20 97       	sbiw	r28, 0x00	; 0
    1f68:	79 f1       	breq	.+94     	; 0x1fc8 <prvReadBytesFromBuffer+0x84>
    1f6a:	f7 01       	movw	r30, r14
    1f6c:	00 81       	ld	r16, Z
    1f6e:	11 81       	ldd	r17, Z+1	; 0x01
    1f70:	c4 80       	ldd	r12, Z+4	; 0x04
    1f72:	d5 80       	ldd	r13, Z+5	; 0x05
    1f74:	c0 1a       	sub	r12, r16
    1f76:	d1 0a       	sbc	r13, r17
    1f78:	cc 15       	cp	r28, r12
    1f7a:	dd 05       	cpc	r29, r13
    1f7c:	08 f4       	brcc	.+2      	; 0x1f80 <prvReadBytesFromBuffer+0x3c>
    1f7e:	6e 01       	movw	r12, r28
    1f80:	f7 01       	movw	r30, r14
    1f82:	64 85       	ldd	r22, Z+12	; 0x0c
    1f84:	75 85       	ldd	r23, Z+13	; 0x0d
    1f86:	60 0f       	add	r22, r16
    1f88:	71 1f       	adc	r23, r17
    1f8a:	a6 01       	movw	r20, r12
    1f8c:	c5 01       	movw	r24, r10
    1f8e:	0e 94 cf 2b 	call	0x579e	; 0x579e <memcpy>
    1f92:	cc 16       	cp	r12, r28
    1f94:	dd 06       	cpc	r13, r29
    1f96:	58 f4       	brcc	.+22     	; 0x1fae <prvReadBytesFromBuffer+0x6a>
    1f98:	ae 01       	movw	r20, r28
    1f9a:	4c 19       	sub	r20, r12
    1f9c:	5d 09       	sbc	r21, r13
    1f9e:	f7 01       	movw	r30, r14
    1fa0:	64 85       	ldd	r22, Z+12	; 0x0c
    1fa2:	75 85       	ldd	r23, Z+13	; 0x0d
    1fa4:	c5 01       	movw	r24, r10
    1fa6:	8c 0d       	add	r24, r12
    1fa8:	9d 1d       	adc	r25, r13
    1faa:	0e 94 cf 2b 	call	0x579e	; 0x579e <memcpy>
    1fae:	0c 0f       	add	r16, r28
    1fb0:	1d 1f       	adc	r17, r29
    1fb2:	f7 01       	movw	r30, r14
    1fb4:	84 81       	ldd	r24, Z+4	; 0x04
    1fb6:	95 81       	ldd	r25, Z+5	; 0x05
    1fb8:	08 17       	cp	r16, r24
    1fba:	19 07       	cpc	r17, r25
    1fbc:	10 f0       	brcs	.+4      	; 0x1fc2 <prvReadBytesFromBuffer+0x7e>
    1fbe:	08 1b       	sub	r16, r24
    1fc0:	19 0b       	sbc	r17, r25
    1fc2:	f7 01       	movw	r30, r14
    1fc4:	11 83       	std	Z+1, r17	; 0x01
    1fc6:	00 83       	st	Z, r16
    1fc8:	ce 01       	movw	r24, r28
    1fca:	df 91       	pop	r29
    1fcc:	cf 91       	pop	r28
    1fce:	1f 91       	pop	r17
    1fd0:	0f 91       	pop	r16
    1fd2:	ff 90       	pop	r15
    1fd4:	ef 90       	pop	r14
    1fd6:	df 90       	pop	r13
    1fd8:	cf 90       	pop	r12
    1fda:	bf 90       	pop	r11
    1fdc:	af 90       	pop	r10
    1fde:	08 95       	ret

00001fe0 <xStreamBufferGenericCreate>:
    1fe0:	ef 92       	push	r14
    1fe2:	ff 92       	push	r15
    1fe4:	1f 93       	push	r17
    1fe6:	cf 93       	push	r28
    1fe8:	df 93       	push	r29
    1fea:	eb 01       	movw	r28, r22
    1fec:	11 e0       	ldi	r17, 0x01	; 1
    1fee:	41 30       	cpi	r20, 0x01	; 1
    1ff0:	09 f0       	breq	.+2      	; 0x1ff4 <xStreamBufferGenericCreate+0x14>
    1ff2:	10 e0       	ldi	r17, 0x00	; 0
    1ff4:	20 97       	sbiw	r28, 0x00	; 0
    1ff6:	11 f4       	brne	.+4      	; 0x1ffc <xStreamBufferGenericCreate+0x1c>
    1ff8:	c1 e0       	ldi	r28, 0x01	; 1
    1ffa:	d0 e0       	ldi	r29, 0x00	; 0
    1ffc:	7c 01       	movw	r14, r24
    1ffe:	2f ef       	ldi	r18, 0xFF	; 255
    2000:	e2 1a       	sub	r14, r18
    2002:	f2 0a       	sbc	r15, r18
    2004:	41 96       	adiw	r24, 0x11	; 17
    2006:	20 d9       	rcall	.-3520   	; 0x1248 <pvPortMalloc>
    2008:	00 97       	sbiw	r24, 0x00	; 0
    200a:	81 f0       	breq	.+32     	; 0x202c <xStreamBufferGenericCreate+0x4c>
    200c:	20 e1       	ldi	r18, 0x10	; 16
    200e:	fc 01       	movw	r30, r24
    2010:	11 92       	st	Z+, r1
    2012:	2a 95       	dec	r18
    2014:	e9 f7       	brne	.-6      	; 0x2010 <xStreamBufferGenericCreate+0x30>
    2016:	9c 01       	movw	r18, r24
    2018:	20 5f       	subi	r18, 0xF0	; 240
    201a:	3f 4f       	sbci	r19, 0xFF	; 255
    201c:	fc 01       	movw	r30, r24
    201e:	35 87       	std	Z+13, r19	; 0x0d
    2020:	24 87       	std	Z+12, r18	; 0x0c
    2022:	f5 82       	std	Z+5, r15	; 0x05
    2024:	e4 82       	std	Z+4, r14	; 0x04
    2026:	d7 83       	std	Z+7, r29	; 0x07
    2028:	c6 83       	std	Z+6, r28	; 0x06
    202a:	16 87       	std	Z+14, r17	; 0x0e
    202c:	df 91       	pop	r29
    202e:	cf 91       	pop	r28
    2030:	1f 91       	pop	r17
    2032:	ff 90       	pop	r15
    2034:	ef 90       	pop	r14
    2036:	08 95       	ret

00002038 <xStreamBufferReset>:
    2038:	cf 93       	push	r28
    203a:	df 93       	push	r29
    203c:	fc 01       	movw	r30, r24
    203e:	27 85       	ldd	r18, Z+15	; 0x0f
    2040:	0f b6       	in	r0, 0x3f	; 63
    2042:	f8 94       	cli
    2044:	0f 92       	push	r0
    2046:	80 85       	ldd	r24, Z+8	; 0x08
    2048:	91 85       	ldd	r25, Z+9	; 0x09
    204a:	89 2b       	or	r24, r25
    204c:	d1 f4       	brne	.+52     	; 0x2082 <xStreamBufferReset+0x4a>
    204e:	82 85       	ldd	r24, Z+10	; 0x0a
    2050:	93 85       	ldd	r25, Z+11	; 0x0b
    2052:	89 2b       	or	r24, r25
    2054:	c1 f4       	brne	.+48     	; 0x2086 <xStreamBufferReset+0x4e>
    2056:	86 85       	ldd	r24, Z+14	; 0x0e
    2058:	46 81       	ldd	r20, Z+6	; 0x06
    205a:	57 81       	ldd	r21, Z+7	; 0x07
    205c:	64 81       	ldd	r22, Z+4	; 0x04
    205e:	75 81       	ldd	r23, Z+5	; 0x05
    2060:	a4 85       	ldd	r26, Z+12	; 0x0c
    2062:	b5 85       	ldd	r27, Z+13	; 0x0d
    2064:	90 e1       	ldi	r25, 0x10	; 16
    2066:	ef 01       	movw	r28, r30
    2068:	19 92       	st	Y+, r1
    206a:	9a 95       	dec	r25
    206c:	e9 f7       	brne	.-6      	; 0x2068 <xStreamBufferReset+0x30>
    206e:	b5 87       	std	Z+13, r27	; 0x0d
    2070:	a4 87       	std	Z+12, r26	; 0x0c
    2072:	75 83       	std	Z+5, r23	; 0x05
    2074:	64 83       	std	Z+4, r22	; 0x04
    2076:	57 83       	std	Z+7, r21	; 0x07
    2078:	46 83       	std	Z+6, r20	; 0x06
    207a:	86 87       	std	Z+14, r24	; 0x0e
    207c:	27 87       	std	Z+15, r18	; 0x0f
    207e:	81 e0       	ldi	r24, 0x01	; 1
    2080:	03 c0       	rjmp	.+6      	; 0x2088 <xStreamBufferReset+0x50>
    2082:	80 e0       	ldi	r24, 0x00	; 0
    2084:	01 c0       	rjmp	.+2      	; 0x2088 <xStreamBufferReset+0x50>
    2086:	80 e0       	ldi	r24, 0x00	; 0
    2088:	0f 90       	pop	r0
    208a:	0f be       	out	0x3f, r0	; 63
    208c:	df 91       	pop	r29
    208e:	cf 91       	pop	r28
    2090:	08 95       	ret

00002092 <xStreamBufferSpacesAvailable>:
    2092:	fc 01       	movw	r30, r24
    2094:	24 81       	ldd	r18, Z+4	; 0x04
    2096:	35 81       	ldd	r19, Z+5	; 0x05
    2098:	80 81       	ld	r24, Z
    209a:	91 81       	ldd	r25, Z+1	; 0x01
    209c:	42 81       	ldd	r20, Z+2	; 0x02
    209e:	53 81       	ldd	r21, Z+3	; 0x03
    20a0:	82 0f       	add	r24, r18
    20a2:	93 1f       	adc	r25, r19
    20a4:	01 97       	sbiw	r24, 0x01	; 1
    20a6:	84 1b       	sub	r24, r20
    20a8:	95 0b       	sbc	r25, r21
    20aa:	82 17       	cp	r24, r18
    20ac:	93 07       	cpc	r25, r19
    20ae:	10 f0       	brcs	.+4      	; 0x20b4 <xStreamBufferSpacesAvailable+0x22>
    20b0:	82 1b       	sub	r24, r18
    20b2:	93 0b       	sbc	r25, r19
    20b4:	08 95       	ret

000020b6 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void *pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    20b6:	2f 92       	push	r2
    20b8:	3f 92       	push	r3
    20ba:	4f 92       	push	r4
    20bc:	5f 92       	push	r5
    20be:	6f 92       	push	r6
    20c0:	7f 92       	push	r7
    20c2:	8f 92       	push	r8
    20c4:	9f 92       	push	r9
    20c6:	af 92       	push	r10
    20c8:	bf 92       	push	r11
    20ca:	cf 92       	push	r12
    20cc:	df 92       	push	r13
    20ce:	ef 92       	push	r14
    20d0:	ff 92       	push	r15
    20d2:	0f 93       	push	r16
    20d4:	1f 93       	push	r17
    20d6:	cf 93       	push	r28
    20d8:	df 93       	push	r29
    20da:	cd b7       	in	r28, 0x3d	; 61
    20dc:	de b7       	in	r29, 0x3e	; 62
    20de:	29 97       	sbiw	r28, 0x09	; 9
    20e0:	0f b6       	in	r0, 0x3f	; 63
    20e2:	f8 94       	cli
    20e4:	de bf       	out	0x3e, r29	; 62
    20e6:	0f be       	out	0x3f, r0	; 63
    20e8:	cd bf       	out	0x3d, r28	; 61
    20ea:	5c 01       	movw	r10, r24
    20ec:	1b 01       	movw	r2, r22
    20ee:	2a 01       	movw	r4, r20
    20f0:	0e 83       	std	Y+6, r16	; 0x06
    20f2:	1f 83       	std	Y+7, r17	; 0x07
    20f4:	28 87       	std	Y+8, r18	; 0x08
    20f6:	39 87       	std	Y+9, r19	; 0x09

    /* This send function is used to write to both message buffers and stream
    buffers.  If this is a message buffer then the space needed must be
    increased by the amount of bytes needed to store the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    20f8:	fc 01       	movw	r30, r24
    20fa:	86 85       	ldd	r24, Z+14	; 0x0e
    20fc:	80 ff       	sbrs	r24, 0
    20fe:	05 c0       	rjmp	.+10     	; 0x210a <xStreamBufferSend+0x54>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    2100:	3a 01       	movw	r6, r20
    2102:	f2 e0       	ldi	r31, 0x02	; 2
    2104:	6f 0e       	add	r6, r31
    2106:	71 1c       	adc	r7, r1
    2108:	01 c0       	rjmp	.+2      	; 0x210c <xStreamBufferSend+0x56>
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReturn, xSpace = 0;
size_t xRequiredSpace = xDataLengthBytes;
    210a:	3a 01       	movw	r6, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    210c:	8e 81       	ldd	r24, Y+6	; 0x06
    210e:	9f 81       	ldd	r25, Y+7	; 0x07
    2110:	a8 85       	ldd	r26, Y+8	; 0x08
    2112:	b9 85       	ldd	r27, Y+9	; 0x09
    2114:	89 2b       	or	r24, r25
    2116:	8a 2b       	or	r24, r26
    2118:	8b 2b       	or	r24, r27
    211a:	09 f4       	brne	.+2      	; 0x211e <xStreamBufferSend+0x68>
    211c:	34 c0       	rjmp	.+104    	; 0x2186 <xStreamBufferSend+0xd0>
    {
        vTaskSetTimeOutState( &xTimeOut );
    211e:	ce 01       	movw	r24, r28
    2120:	01 96       	adiw	r24, 0x01	; 1
    2122:	1e d6       	rcall	.+3132   	; 0x2d60 <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
            buffer. */
            taskENTER_CRITICAL();
    2124:	0f b6       	in	r0, 0x3f	; 63
    2126:	f8 94       	cli
    2128:	0f 92       	push	r0
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    212a:	c5 01       	movw	r24, r10
    212c:	b2 df       	rcall	.-156    	; 0x2092 <xStreamBufferSpacesAvailable>
    212e:	4c 01       	movw	r8, r24

                if( xSpace < xRequiredSpace )
    2130:	86 15       	cp	r24, r6
    2132:	97 05       	cpc	r25, r7
    2134:	18 f5       	brcc	.+70     	; 0x217c <xStreamBufferSend+0xc6>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClear( NULL );
    2136:	80 e0       	ldi	r24, 0x00	; 0
    2138:	90 e0       	ldi	r25, 0x00	; 0
    213a:	0e 94 36 19 	call	0x326c	; 0x326c <xTaskNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    213e:	90 d6       	rcall	.+3360   	; 0x2e60 <xTaskGetCurrentTaskHandle>
    2140:	f5 01       	movw	r30, r10
    2142:	93 87       	std	Z+11, r25	; 0x0b
    2144:	82 87       	std	Z+10, r24	; 0x0a
                {
                    taskEXIT_CRITICAL();
                    break;
                }
            }
            taskEXIT_CRITICAL();
    2146:	0f 90       	pop	r0
    2148:	0f be       	out	0x3f, r0	; 63

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    214a:	ce 80       	ldd	r12, Y+6	; 0x06
    214c:	df 80       	ldd	r13, Y+7	; 0x07
    214e:	e8 84       	ldd	r14, Y+8	; 0x08
    2150:	f9 84       	ldd	r15, Y+9	; 0x09
    2152:	00 e0       	ldi	r16, 0x00	; 0
    2154:	10 e0       	ldi	r17, 0x00	; 0
    2156:	20 e0       	ldi	r18, 0x00	; 0
    2158:	30 e0       	ldi	r19, 0x00	; 0
    215a:	a9 01       	movw	r20, r18
    215c:	60 e0       	ldi	r22, 0x00	; 0
    215e:	70 e0       	ldi	r23, 0x00	; 0
    2160:	cb 01       	movw	r24, r22
    2162:	f9 d6       	rcall	.+3570   	; 0x2f56 <xTaskNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
    2164:	f5 01       	movw	r30, r10
    2166:	13 86       	std	Z+11, r1	; 0x0b
    2168:	12 86       	std	Z+10, r1	; 0x0a

        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    216a:	be 01       	movw	r22, r28
    216c:	6a 5f       	subi	r22, 0xFA	; 250
    216e:	7f 4f       	sbci	r23, 0xFF	; 255
    2170:	ce 01       	movw	r24, r28
    2172:	01 96       	adiw	r24, 0x01	; 1
    2174:	1c d6       	rcall	.+3128   	; 0x2dae <xTaskCheckForTimeOut>
    2176:	88 23       	and	r24, r24
    2178:	a9 f2       	breq	.-86     	; 0x2124 <xStreamBufferSend+0x6e>
    217a:	02 c0       	rjmp	.+4      	; 0x2180 <xStreamBufferSend+0xca>
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
                }
                else
                {
                    taskEXIT_CRITICAL();
    217c:	0f 90       	pop	r0
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
    217e:	0f be       	out	0x3f, r0	; 63
    2180:	81 14       	cp	r8, r1
    2182:	91 04       	cpc	r9, r1
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    2184:	19 f4       	brne	.+6      	; 0x218c <xStreamBufferSend+0xd6>
    2186:	c5 01       	movw	r24, r10
    2188:	84 df       	rcall	.-248    	; 0x2092 <xStreamBufferSpacesAvailable>
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    218a:	4c 01       	movw	r8, r24
    218c:	83 01       	movw	r16, r6
    218e:	94 01       	movw	r18, r8
    2190:	a2 01       	movw	r20, r4
    2192:	b1 01       	movw	r22, r2
    2194:	c5 01       	movw	r24, r10
    2196:	96 de       	rcall	.-724    	; 0x1ec4 <prvWriteMessageToBuffer>

    if( xReturn > ( size_t ) 0 )
    2198:	7c 01       	movw	r14, r24
    219a:	89 2b       	or	r24, r25
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    219c:	d9 f0       	breq	.+54     	; 0x21d4 <xStreamBufferSend+0x11e>
    219e:	c5 01       	movw	r24, r10
    21a0:	35 de       	rcall	.-918    	; 0x1e0c <prvBytesInBuffer>
    21a2:	f5 01       	movw	r30, r10
    21a4:	26 81       	ldd	r18, Z+6	; 0x06
    21a6:	37 81       	ldd	r19, Z+7	; 0x07
    21a8:	82 17       	cp	r24, r18
    21aa:	93 07       	cpc	r25, r19
        {
            sbSEND_COMPLETED( pxStreamBuffer );
    21ac:	98 f0       	brcs	.+38     	; 0x21d4 <xStreamBufferSend+0x11e>
    21ae:	0a d3       	rcall	.+1556   	; 0x27c4 <vTaskSuspendAll>
    21b0:	f5 01       	movw	r30, r10
    21b2:	80 85       	ldd	r24, Z+8	; 0x08
    21b4:	91 85       	ldd	r25, Z+9	; 0x09
    21b6:	89 2b       	or	r24, r25
    21b8:	61 f0       	breq	.+24     	; 0x21d2 <xStreamBufferSend+0x11c>
    21ba:	80 85       	ldd	r24, Z+8	; 0x08
    21bc:	91 85       	ldd	r25, Z+9	; 0x09
    21be:	00 e0       	ldi	r16, 0x00	; 0
    21c0:	10 e0       	ldi	r17, 0x00	; 0
    21c2:	20 e0       	ldi	r18, 0x00	; 0
    21c4:	40 e0       	ldi	r20, 0x00	; 0
    21c6:	50 e0       	ldi	r21, 0x00	; 0
    21c8:	ba 01       	movw	r22, r20
    21ca:	4f d7       	rcall	.+3742   	; 0x306a <xTaskGenericNotify>
    21cc:	f5 01       	movw	r30, r10
    21ce:	11 86       	std	Z+9, r1	; 0x09
    21d0:	10 86       	std	Z+8, r1	; 0x08
    21d2:	e1 d3       	rcall	.+1986   	; 0x2996 <xTaskResumeAll>
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    21d4:	c7 01       	movw	r24, r14
    21d6:	29 96       	adiw	r28, 0x09	; 9
    21d8:	0f b6       	in	r0, 0x3f	; 63
    21da:	f8 94       	cli
    21dc:	de bf       	out	0x3e, r29	; 62
    21de:	0f be       	out	0x3f, r0	; 63
    21e0:	cd bf       	out	0x3d, r28	; 61
    21e2:	df 91       	pop	r29
    21e4:	cf 91       	pop	r28
    21e6:	1f 91       	pop	r17
    21e8:	0f 91       	pop	r16
    21ea:	ff 90       	pop	r15
    21ec:	ef 90       	pop	r14
    21ee:	df 90       	pop	r13
    21f0:	cf 90       	pop	r12
    21f2:	bf 90       	pop	r11
    21f4:	af 90       	pop	r10
    21f6:	9f 90       	pop	r9
    21f8:	8f 90       	pop	r8
    21fa:	7f 90       	pop	r7
    21fc:	6f 90       	pop	r6
    21fe:	5f 90       	pop	r5
    2200:	4f 90       	pop	r4
    2202:	3f 90       	pop	r3
    2204:	2f 90       	pop	r2
    2206:	08 95       	ret

00002208 <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void *pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    2208:	af 92       	push	r10
    220a:	bf 92       	push	r11
    220c:	cf 92       	push	r12
    220e:	df 92       	push	r13
    2210:	ef 92       	push	r14
    2212:	ff 92       	push	r15
    2214:	0f 93       	push	r16
    2216:	1f 93       	push	r17
    2218:	cf 93       	push	r28
    221a:	df 93       	push	r29
    221c:	ec 01       	movw	r28, r24
    221e:	5b 01       	movw	r10, r22
    2220:	6a 01       	movw	r12, r20
    2222:	79 01       	movw	r14, r18

    /* This send function is used to write to both message buffers and stream
    buffers.  If this is a message buffer then the space needed must be
    increased by the amount of bytes needed to store the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    2224:	8e 85       	ldd	r24, Y+14	; 0x0e
    2226:	80 ff       	sbrs	r24, 0
    2228:	04 c0       	rjmp	.+8      	; 0x2232 <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    222a:	8a 01       	movw	r16, r20
    222c:	0e 5f       	subi	r16, 0xFE	; 254
    222e:	1f 4f       	sbci	r17, 0xFF	; 255
    2230:	01 c0       	rjmp	.+2      	; 0x2234 <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReturn, xSpace;
size_t xRequiredSpace = xDataLengthBytes;
    2232:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    2234:	ce 01       	movw	r24, r28
    2236:	2d df       	rcall	.-422    	; 0x2092 <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    2238:	9c 01       	movw	r18, r24
    223a:	a6 01       	movw	r20, r12
    223c:	b5 01       	movw	r22, r10
    223e:	ce 01       	movw	r24, r28
    2240:	41 de       	rcall	.-894    	; 0x1ec4 <prvWriteMessageToBuffer>
    2242:	6c 01       	movw	r12, r24

    if( xReturn > ( size_t ) 0 )
    2244:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    2246:	b1 f0       	breq	.+44     	; 0x2274 <xStreamBufferSendFromISR+0x6c>
    2248:	ce 01       	movw	r24, r28
    224a:	e0 dd       	rcall	.-1088   	; 0x1e0c <prvBytesInBuffer>
    224c:	2e 81       	ldd	r18, Y+6	; 0x06
    224e:	3f 81       	ldd	r19, Y+7	; 0x07
    2250:	82 17       	cp	r24, r18
    2252:	93 07       	cpc	r25, r19
    2254:	78 f0       	brcs	.+30     	; 0x2274 <xStreamBufferSendFromISR+0x6c>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    2256:	88 85       	ldd	r24, Y+8	; 0x08
    2258:	99 85       	ldd	r25, Y+9	; 0x09
    225a:	89 2b       	or	r24, r25
    225c:	59 f0       	breq	.+22     	; 0x2274 <xStreamBufferSendFromISR+0x6c>
    225e:	88 85       	ldd	r24, Y+8	; 0x08
    2260:	99 85       	ldd	r25, Y+9	; 0x09
    2262:	00 e0       	ldi	r16, 0x00	; 0
    2264:	10 e0       	ldi	r17, 0x00	; 0
    2266:	20 e0       	ldi	r18, 0x00	; 0
    2268:	40 e0       	ldi	r20, 0x00	; 0
    226a:	50 e0       	ldi	r21, 0x00	; 0
    226c:	ba 01       	movw	r22, r20
    226e:	75 d7       	rcall	.+3818   	; 0x315a <xTaskGenericNotifyFromISR>
    2270:	19 86       	std	Y+9, r1	; 0x09
    2272:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    2274:	c6 01       	movw	r24, r12
    2276:	df 91       	pop	r29
    2278:	cf 91       	pop	r28
    227a:	1f 91       	pop	r17
    227c:	0f 91       	pop	r16
    227e:	ff 90       	pop	r15
    2280:	ef 90       	pop	r14
    2282:	df 90       	pop	r13
    2284:	cf 90       	pop	r12
    2286:	bf 90       	pop	r11
    2288:	af 90       	pop	r10
    228a:	08 95       	ret

0000228c <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void *pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    228c:	4f 92       	push	r4
    228e:	5f 92       	push	r5
    2290:	6f 92       	push	r6
    2292:	7f 92       	push	r7
    2294:	8f 92       	push	r8
    2296:	9f 92       	push	r9
    2298:	af 92       	push	r10
    229a:	bf 92       	push	r11
    229c:	cf 92       	push	r12
    229e:	df 92       	push	r13
    22a0:	ef 92       	push	r14
    22a2:	ff 92       	push	r15
    22a4:	0f 93       	push	r16
    22a6:	1f 93       	push	r17
    22a8:	cf 93       	push	r28
    22aa:	df 93       	push	r29
    22ac:	1f 92       	push	r1
    22ae:	1f 92       	push	r1
    22b0:	cd b7       	in	r28, 0x3d	; 61
    22b2:	de b7       	in	r29, 0x3e	; 62
    22b4:	5c 01       	movw	r10, r24
    22b6:	2b 01       	movw	r4, r22
    22b8:	3a 01       	movw	r6, r20
    22ba:	68 01       	movw	r12, r16
    22bc:	79 01       	movw	r14, r18
    /* This receive function is used by both message buffers, which store
    discrete messages, and stream buffers, which store a continuous stream of
    bytes.  Discrete messages include an additional
    sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    22be:	fc 01       	movw	r30, r24
    22c0:	86 85       	ldd	r24, Z+14	; 0x0e
    22c2:	80 fd       	sbrc	r24, 0
    22c4:	03 c0       	rjmp	.+6      	; 0x22cc <xStreamBufferReceive+0x40>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    22c6:	81 2c       	mov	r8, r1
    22c8:	91 2c       	mov	r9, r1
    22ca:	04 c0       	rjmp	.+8      	; 0x22d4 <xStreamBufferReceive+0x48>
    bytes.  Discrete messages include an additional
    sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    22cc:	68 94       	set
    22ce:	88 24       	eor	r8, r8
    22d0:	81 f8       	bld	r8, 1
    22d2:	91 2c       	mov	r9, r1
    else
    {
        xBytesToStoreMessageLength = 0;
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    22d4:	c1 14       	cp	r12, r1
    22d6:	d1 04       	cpc	r13, r1
    22d8:	e1 04       	cpc	r14, r1
    22da:	f1 04       	cpc	r15, r1
    22dc:	29 f1       	breq	.+74     	; 0x2328 <xStreamBufferReceive+0x9c>
    {
        /* Checking if there is data and clearing the notification state must be
        performed atomically. */
        taskENTER_CRITICAL();
    22de:	0f b6       	in	r0, 0x3f	; 63
    22e0:	f8 94       	cli
    22e2:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    22e4:	c5 01       	movw	r24, r10
    22e6:	92 dd       	rcall	.-1244   	; 0x1e0c <prvBytesInBuffer>
    22e8:	8c 01       	movw	r16, r24
            /* If this function was invoked by a message buffer read then
            xBytesToStoreMessageLength holds the number of bytes used to hold
            the length of the next discrete message.  If this function was
            invoked by a stream buffer read then xBytesToStoreMessageLength will
            be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    22ea:	88 16       	cp	r8, r24
    22ec:	99 06       	cpc	r9, r25
    22ee:	38 f0       	brcs	.+14     	; 0x22fe <xStreamBufferReceive+0x72>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    22f0:	80 e0       	ldi	r24, 0x00	; 0
    22f2:	90 e0       	ldi	r25, 0x00	; 0

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    22f4:	bb d7       	rcall	.+3958   	; 0x326c <xTaskNotifyStateClear>
    22f6:	b4 d5       	rcall	.+2920   	; 0x2e60 <xTaskGetCurrentTaskHandle>
    22f8:	f5 01       	movw	r30, r10
    22fa:	91 87       	std	Z+9, r25	; 0x09
    22fc:	80 87       	std	Z+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    22fe:	0f 90       	pop	r0
    2300:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    2302:	80 16       	cp	r8, r16
    2304:	91 06       	cpc	r9, r17
    2306:	b0 f0       	brcs	.+44     	; 0x2334 <xStreamBufferReceive+0xa8>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    2308:	00 e0       	ldi	r16, 0x00	; 0
    230a:	10 e0       	ldi	r17, 0x00	; 0
    230c:	20 e0       	ldi	r18, 0x00	; 0
    230e:	30 e0       	ldi	r19, 0x00	; 0
    2310:	a9 01       	movw	r20, r18
    2312:	60 e0       	ldi	r22, 0x00	; 0
    2314:	70 e0       	ldi	r23, 0x00	; 0
    2316:	cb 01       	movw	r24, r22
    2318:	1e d6       	rcall	.+3132   	; 0x2f56 <xTaskNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    231a:	f5 01       	movw	r30, r10
    231c:	11 86       	std	Z+9, r1	; 0x09

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    231e:	10 86       	std	Z+8, r1	; 0x08
    2320:	c5 01       	movw	r24, r10
    2322:	74 dd       	rcall	.-1304   	; 0x1e0c <prvBytesInBuffer>
    2324:	8c 01       	movw	r16, r24
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    2326:	03 c0       	rjmp	.+6      	; 0x232e <xStreamBufferReceive+0xa2>
    2328:	c5 01       	movw	r24, r10
    232a:	70 dd       	rcall	.-1312   	; 0x1e0c <prvBytesInBuffer>
    232c:	8c 01       	movw	r16, r24
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
    holds the number of bytes used to store the message length) or a stream of
    bytes (where xBytesToStoreMessageLength is zero), the number of bytes
    available must be greater than xBytesToStoreMessageLength to be able to
    read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    232e:	80 16       	cp	r8, r16
    2330:	91 06       	cpc	r9, r17
    2332:	b8 f5       	brcc	.+110    	; 0x23a2 <xStreamBufferReceive+0x116>
                                        size_t xBytesToStoreMessageLength )
{
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

    if( xBytesToStoreMessageLength != ( size_t ) 0 )
    2334:	81 14       	cp	r8, r1
    2336:	91 04       	cpc	r9, r1
    2338:	c1 f0       	breq	.+48     	; 0x236a <xStreamBufferReceive+0xde>
    {
        /* A discrete message is being received.  First receive the length
        of the message.  A copy of the tail is stored so the buffer can be
        returned to its prior state if the length of the message is too
        large for the provided buffer. */
        xOriginalTail = pxStreamBuffer->xTail;
    233a:	f5 01       	movw	r30, r10
    233c:	e0 80       	ld	r14, Z
    233e:	f1 80       	ldd	r15, Z+1	; 0x01
        ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
    2340:	98 01       	movw	r18, r16
    2342:	a4 01       	movw	r20, r8
    2344:	be 01       	movw	r22, r28
    2346:	6f 5f       	subi	r22, 0xFF	; 255
    2348:	7f 4f       	sbci	r23, 0xFF	; 255
    234a:	c5 01       	movw	r24, r10
    234c:	fb dd       	rcall	.-1034   	; 0x1f44 <prvReadBytesFromBuffer>
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
    234e:	89 81       	ldd	r24, Y+1	; 0x01
    2350:	9a 81       	ldd	r25, Y+2	; 0x02

        /* Reduce the number of bytes available by the number of bytes just
        read out. */
        xBytesAvailable -= xBytesToStoreMessageLength;
    2352:	08 19       	sub	r16, r8
    2354:	19 09       	sbc	r17, r9

        /* Check there is enough space in the buffer provided by the
        user. */
        if( xNextMessageLength > xBufferLengthBytes )
    2356:	68 16       	cp	r6, r24
    2358:	79 06       	cpc	r7, r25
    235a:	30 f4       	brcc	.+12     	; 0x2368 <xStreamBufferReceive+0xdc>
        {
            /* The user has provided insufficient space to read the message
            so return the buffer to its previous state (so the length of
            the message is in the buffer again). */
            pxStreamBuffer->xTail = xOriginalTail;
    235c:	f5 01       	movw	r30, r10
    235e:	f1 82       	std	Z+1, r15	; 0x01
    2360:	e0 82       	st	Z, r14
            xNextMessageLength = 0;
    2362:	61 2c       	mov	r6, r1
    2364:	71 2c       	mov	r7, r1
        of the message.  A copy of the tail is stored so the buffer can be
        returned to its prior state if the length of the message is too
        large for the provided buffer. */
        xOriginalTail = pxStreamBuffer->xTail;
        ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
    2366:	01 c0       	rjmp	.+2      	; 0x236a <xStreamBufferReceive+0xde>
        message), so read as many bytes as possible. */
        xNextMessageLength = xBufferLengthBytes;
    }

    /* Read the actual data. */
    xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
    2368:	3c 01       	movw	r6, r24
    236a:	98 01       	movw	r18, r16
    236c:	a3 01       	movw	r20, r6
    236e:	b2 01       	movw	r22, r4
    2370:	c5 01       	movw	r24, r10
    2372:	e8 dd       	rcall	.-1072   	; 0x1f44 <prvReadBytesFromBuffer>
    if( xBytesAvailable > xBytesToStoreMessageLength )
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    2374:	7c 01       	movw	r14, r24
    2376:	89 2b       	or	r24, r25
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    2378:	b1 f0       	breq	.+44     	; 0x23a6 <xStreamBufferReceive+0x11a>
    237a:	24 d2       	rcall	.+1096   	; 0x27c4 <vTaskSuspendAll>
    237c:	f5 01       	movw	r30, r10
    237e:	82 85       	ldd	r24, Z+10	; 0x0a
    2380:	93 85       	ldd	r25, Z+11	; 0x0b
    2382:	89 2b       	or	r24, r25
    2384:	61 f0       	breq	.+24     	; 0x239e <xStreamBufferReceive+0x112>
    2386:	82 85       	ldd	r24, Z+10	; 0x0a
    2388:	93 85       	ldd	r25, Z+11	; 0x0b
    238a:	00 e0       	ldi	r16, 0x00	; 0
    238c:	10 e0       	ldi	r17, 0x00	; 0
    238e:	20 e0       	ldi	r18, 0x00	; 0
    2390:	40 e0       	ldi	r20, 0x00	; 0
    2392:	50 e0       	ldi	r21, 0x00	; 0
    2394:	ba 01       	movw	r22, r20
    2396:	69 d6       	rcall	.+3282   	; 0x306a <xTaskGenericNotify>
    2398:	f5 01       	movw	r30, r10
    239a:	13 86       	std	Z+11, r1	; 0x0b
    239c:	12 86       	std	Z+10, r1	; 0x0a
    239e:	fb d2       	rcall	.+1526   	; 0x2996 <xTaskResumeAll>
    23a0:	02 c0       	rjmp	.+4      	; 0x23a6 <xStreamBufferReceive+0x11a>
                             void *pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    23a2:	e1 2c       	mov	r14, r1
    23a4:	f1 2c       	mov	r15, r1
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    23a6:	c7 01       	movw	r24, r14
    23a8:	0f 90       	pop	r0
    23aa:	0f 90       	pop	r0
    23ac:	df 91       	pop	r29
    23ae:	cf 91       	pop	r28
    23b0:	1f 91       	pop	r17
    23b2:	0f 91       	pop	r16
    23b4:	ff 90       	pop	r15
    23b6:	ef 90       	pop	r14
    23b8:	df 90       	pop	r13
    23ba:	cf 90       	pop	r12
    23bc:	bf 90       	pop	r11
    23be:	af 90       	pop	r10
    23c0:	9f 90       	pop	r9
    23c2:	8f 90       	pop	r8
    23c4:	7f 90       	pop	r7
    23c6:	6f 90       	pop	r6
    23c8:	5f 90       	pop	r5
    23ca:	4f 90       	pop	r4
    23cc:	08 95       	ret

000023ce <prvResetNextTaskUnblockTime>:
    23ce:	e0 91 1c 19 	lds	r30, 0x191C	; 0x80191c <pxDelayedTaskList>
    23d2:	f0 91 1d 19 	lds	r31, 0x191D	; 0x80191d <pxDelayedTaskList+0x1>
    23d6:	80 81       	ld	r24, Z
    23d8:	81 11       	cpse	r24, r1
    23da:	0c c0       	rjmp	.+24     	; 0x23f4 <prvResetNextTaskUnblockTime+0x26>
    23dc:	8f ef       	ldi	r24, 0xFF	; 255
    23de:	9f ef       	ldi	r25, 0xFF	; 255
    23e0:	dc 01       	movw	r26, r24
    23e2:	80 93 e9 18 	sts	0x18E9, r24	; 0x8018e9 <xNextTaskUnblockTime>
    23e6:	90 93 ea 18 	sts	0x18EA, r25	; 0x8018ea <xNextTaskUnblockTime+0x1>
    23ea:	a0 93 eb 18 	sts	0x18EB, r26	; 0x8018eb <xNextTaskUnblockTime+0x2>
    23ee:	b0 93 ec 18 	sts	0x18EC, r27	; 0x8018ec <xNextTaskUnblockTime+0x3>
    23f2:	08 95       	ret
    23f4:	e0 91 1c 19 	lds	r30, 0x191C	; 0x80191c <pxDelayedTaskList>
    23f8:	f0 91 1d 19 	lds	r31, 0x191D	; 0x80191d <pxDelayedTaskList+0x1>
    23fc:	07 80       	ldd	r0, Z+7	; 0x07
    23fe:	f0 85       	ldd	r31, Z+8	; 0x08
    2400:	e0 2d       	mov	r30, r0
    2402:	00 84       	ldd	r0, Z+8	; 0x08
    2404:	f1 85       	ldd	r31, Z+9	; 0x09
    2406:	e0 2d       	mov	r30, r0
    2408:	82 81       	ldd	r24, Z+2	; 0x02
    240a:	93 81       	ldd	r25, Z+3	; 0x03
    240c:	a4 81       	ldd	r26, Z+4	; 0x04
    240e:	b5 81       	ldd	r27, Z+5	; 0x05
    2410:	80 93 e9 18 	sts	0x18E9, r24	; 0x8018e9 <xNextTaskUnblockTime>
    2414:	90 93 ea 18 	sts	0x18EA, r25	; 0x8018ea <xNextTaskUnblockTime+0x1>
    2418:	a0 93 eb 18 	sts	0x18EB, r26	; 0x8018eb <xNextTaskUnblockTime+0x2>
    241c:	b0 93 ec 18 	sts	0x18EC, r27	; 0x8018ec <xNextTaskUnblockTime+0x3>
    2420:	08 95       	ret

00002422 <prvAddCurrentTaskToDelayedList>:
    2422:	8f 92       	push	r8
    2424:	9f 92       	push	r9
    2426:	af 92       	push	r10
    2428:	bf 92       	push	r11
    242a:	cf 92       	push	r12
    242c:	df 92       	push	r13
    242e:	ef 92       	push	r14
    2430:	ff 92       	push	r15
    2432:	cf 93       	push	r28
    2434:	6b 01       	movw	r12, r22
    2436:	7c 01       	movw	r14, r24
    2438:	c4 2f       	mov	r28, r20
    243a:	80 90 f3 18 	lds	r8, 0x18F3	; 0x8018f3 <xTickCount>
    243e:	90 90 f4 18 	lds	r9, 0x18F4	; 0x8018f4 <xTickCount+0x1>
    2442:	a0 90 f5 18 	lds	r10, 0x18F5	; 0x8018f5 <xTickCount+0x2>
    2446:	b0 90 f6 18 	lds	r11, 0x18F6	; 0x8018f6 <xTickCount+0x3>
    244a:	80 91 60 19 	lds	r24, 0x1960	; 0x801960 <pxCurrentTCB>
    244e:	90 91 61 19 	lds	r25, 0x1961	; 0x801961 <pxCurrentTCB+0x1>
    2452:	02 96       	adiw	r24, 0x02	; 2
    2454:	56 d8       	rcall	.-3924   	; 0x1502 <uxListRemove>
    2456:	8f ef       	ldi	r24, 0xFF	; 255
    2458:	c8 16       	cp	r12, r24
    245a:	d8 06       	cpc	r13, r24
    245c:	e8 06       	cpc	r14, r24
    245e:	f8 06       	cpc	r15, r24
    2460:	69 f4       	brne	.+26     	; 0x247c <prvAddCurrentTaskToDelayedList+0x5a>
    2462:	cc 23       	and	r28, r28
    2464:	59 f0       	breq	.+22     	; 0x247c <prvAddCurrentTaskToDelayedList+0x5a>
    2466:	60 91 60 19 	lds	r22, 0x1960	; 0x801960 <pxCurrentTCB>
    246a:	70 91 61 19 	lds	r23, 0x1961	; 0x801961 <pxCurrentTCB+0x1>
    246e:	6e 5f       	subi	r22, 0xFE	; 254
    2470:	7f 4f       	sbci	r23, 0xFF	; 255
    2472:	88 ef       	ldi	r24, 0xF8	; 248
    2474:	98 e1       	ldi	r25, 0x18	; 24
    2476:	0e 94 23 0a 	call	0x1446	; 0x1446 <vListInsertEnd>
    247a:	3f c0       	rjmp	.+126    	; 0x24fa <prvAddCurrentTaskToDelayedList+0xd8>
    247c:	c8 0c       	add	r12, r8
    247e:	d9 1c       	adc	r13, r9
    2480:	ea 1c       	adc	r14, r10
    2482:	fb 1c       	adc	r15, r11
    2484:	e0 91 60 19 	lds	r30, 0x1960	; 0x801960 <pxCurrentTCB>
    2488:	f0 91 61 19 	lds	r31, 0x1961	; 0x801961 <pxCurrentTCB+0x1>
    248c:	c2 82       	std	Z+2, r12	; 0x02
    248e:	d3 82       	std	Z+3, r13	; 0x03
    2490:	e4 82       	std	Z+4, r14	; 0x04
    2492:	f5 82       	std	Z+5, r15	; 0x05
    2494:	c8 14       	cp	r12, r8
    2496:	d9 04       	cpc	r13, r9
    2498:	ea 04       	cpc	r14, r10
    249a:	fb 04       	cpc	r15, r11
    249c:	68 f4       	brcc	.+26     	; 0x24b8 <prvAddCurrentTaskToDelayedList+0x96>
    249e:	60 91 60 19 	lds	r22, 0x1960	; 0x801960 <pxCurrentTCB>
    24a2:	70 91 61 19 	lds	r23, 0x1961	; 0x801961 <pxCurrentTCB+0x1>
    24a6:	80 91 1a 19 	lds	r24, 0x191A	; 0x80191a <pxOverflowDelayedTaskList>
    24aa:	90 91 1b 19 	lds	r25, 0x191B	; 0x80191b <pxOverflowDelayedTaskList+0x1>
    24ae:	6e 5f       	subi	r22, 0xFE	; 254
    24b0:	7f 4f       	sbci	r23, 0xFF	; 255
    24b2:	0e 94 44 0a 	call	0x1488	; 0x1488 <vListInsert>
    24b6:	21 c0       	rjmp	.+66     	; 0x24fa <prvAddCurrentTaskToDelayedList+0xd8>
    24b8:	60 91 60 19 	lds	r22, 0x1960	; 0x801960 <pxCurrentTCB>
    24bc:	70 91 61 19 	lds	r23, 0x1961	; 0x801961 <pxCurrentTCB+0x1>
    24c0:	80 91 1c 19 	lds	r24, 0x191C	; 0x80191c <pxDelayedTaskList>
    24c4:	90 91 1d 19 	lds	r25, 0x191D	; 0x80191d <pxDelayedTaskList+0x1>
    24c8:	6e 5f       	subi	r22, 0xFE	; 254
    24ca:	7f 4f       	sbci	r23, 0xFF	; 255
    24cc:	0e 94 44 0a 	call	0x1488	; 0x1488 <vListInsert>
    24d0:	80 91 e9 18 	lds	r24, 0x18E9	; 0x8018e9 <xNextTaskUnblockTime>
    24d4:	90 91 ea 18 	lds	r25, 0x18EA	; 0x8018ea <xNextTaskUnblockTime+0x1>
    24d8:	a0 91 eb 18 	lds	r26, 0x18EB	; 0x8018eb <xNextTaskUnblockTime+0x2>
    24dc:	b0 91 ec 18 	lds	r27, 0x18EC	; 0x8018ec <xNextTaskUnblockTime+0x3>
    24e0:	c8 16       	cp	r12, r24
    24e2:	d9 06       	cpc	r13, r25
    24e4:	ea 06       	cpc	r14, r26
    24e6:	fb 06       	cpc	r15, r27
    24e8:	40 f4       	brcc	.+16     	; 0x24fa <prvAddCurrentTaskToDelayedList+0xd8>
    24ea:	c0 92 e9 18 	sts	0x18E9, r12	; 0x8018e9 <xNextTaskUnblockTime>
    24ee:	d0 92 ea 18 	sts	0x18EA, r13	; 0x8018ea <xNextTaskUnblockTime+0x1>
    24f2:	e0 92 eb 18 	sts	0x18EB, r14	; 0x8018eb <xNextTaskUnblockTime+0x2>
    24f6:	f0 92 ec 18 	sts	0x18EC, r15	; 0x8018ec <xNextTaskUnblockTime+0x3>
    24fa:	cf 91       	pop	r28
    24fc:	ff 90       	pop	r15
    24fe:	ef 90       	pop	r14
    2500:	df 90       	pop	r13
    2502:	cf 90       	pop	r12
    2504:	bf 90       	pop	r11
    2506:	af 90       	pop	r10
    2508:	9f 90       	pop	r9
    250a:	8f 90       	pop	r8
    250c:	08 95       	ret

0000250e <xTaskCreate>:
    250e:	4f 92       	push	r4
    2510:	5f 92       	push	r5
    2512:	6f 92       	push	r6
    2514:	7f 92       	push	r7
    2516:	8f 92       	push	r8
    2518:	9f 92       	push	r9
    251a:	af 92       	push	r10
    251c:	bf 92       	push	r11
    251e:	cf 92       	push	r12
    2520:	df 92       	push	r13
    2522:	ef 92       	push	r14
    2524:	ff 92       	push	r15
    2526:	0f 93       	push	r16
    2528:	cf 93       	push	r28
    252a:	df 93       	push	r29
    252c:	4c 01       	movw	r8, r24
    252e:	6b 01       	movw	r12, r22
    2530:	5a 01       	movw	r10, r20
    2532:	29 01       	movw	r4, r18
    2534:	ca 01       	movw	r24, r20
    2536:	0e 94 24 09 	call	0x1248	; 0x1248 <pvPortMalloc>
    253a:	3c 01       	movw	r6, r24
    253c:	89 2b       	or	r24, r25
    253e:	09 f4       	brne	.+2      	; 0x2542 <xTaskCreate+0x34>
    2540:	f4 c0       	rjmp	.+488    	; 0x272a <xTaskCreate+0x21c>
    2542:	80 e3       	ldi	r24, 0x30	; 48
    2544:	90 e0       	ldi	r25, 0x00	; 0
    2546:	0e 94 24 09 	call	0x1248	; 0x1248 <pvPortMalloc>
    254a:	ec 01       	movw	r28, r24
    254c:	89 2b       	or	r24, r25
    254e:	99 f0       	breq	.+38     	; 0x2576 <xTaskCreate+0x68>
    2550:	7c 8e       	std	Y+28, r7	; 0x1c
    2552:	6b 8e       	std	Y+27, r6	; 0x1b
    2554:	a5 01       	movw	r20, r10
    2556:	65 ea       	ldi	r22, 0xA5	; 165
    2558:	70 e0       	ldi	r23, 0x00	; 0
    255a:	c3 01       	movw	r24, r6
    255c:	0e 94 d8 2b 	call	0x57b0	; 0x57b0 <memset>
    2560:	21 e0       	ldi	r18, 0x01	; 1
    2562:	a2 1a       	sub	r10, r18
    2564:	b1 08       	sbc	r11, r1
    2566:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2568:	9c 8d       	ldd	r25, Y+28	; 0x1c
    256a:	a8 0e       	add	r10, r24
    256c:	b9 1e       	adc	r11, r25
    256e:	c1 14       	cp	r12, r1
    2570:	d1 04       	cpc	r13, r1
    2572:	29 f4       	brne	.+10     	; 0x257e <xTaskCreate+0x70>
    2574:	20 c0       	rjmp	.+64     	; 0x25b6 <xTaskCreate+0xa8>
    2576:	c3 01       	movw	r24, r6
    2578:	0e 94 dd 09 	call	0x13ba	; 0x13ba <vPortFree>
    257c:	d6 c0       	rjmp	.+428    	; 0x272a <xTaskCreate+0x21c>
    257e:	d6 01       	movw	r26, r12
    2580:	8c 91       	ld	r24, X
    2582:	8d 8f       	std	Y+29, r24	; 0x1d
    2584:	8c 91       	ld	r24, X
    2586:	88 23       	and	r24, r24
    2588:	a1 f0       	breq	.+40     	; 0x25b2 <xTaskCreate+0xa4>
    258a:	ae 01       	movw	r20, r28
    258c:	42 5e       	subi	r20, 0xE2	; 226
    258e:	5f 4f       	sbci	r21, 0xFF	; 255
    2590:	f6 01       	movw	r30, r12
    2592:	31 96       	adiw	r30, 0x01	; 1
    2594:	b8 e0       	ldi	r27, 0x08	; 8
    2596:	cb 0e       	add	r12, r27
    2598:	d1 1c       	adc	r13, r1
    259a:	cf 01       	movw	r24, r30
    259c:	21 91       	ld	r18, Z+
    259e:	da 01       	movw	r26, r20
    25a0:	2d 93       	st	X+, r18
    25a2:	ad 01       	movw	r20, r26
    25a4:	dc 01       	movw	r26, r24
    25a6:	8c 91       	ld	r24, X
    25a8:	88 23       	and	r24, r24
    25aa:	19 f0       	breq	.+6      	; 0x25b2 <xTaskCreate+0xa4>
    25ac:	ec 15       	cp	r30, r12
    25ae:	fd 05       	cpc	r31, r13
    25b0:	a1 f7       	brne	.-24     	; 0x259a <xTaskCreate+0x8c>
    25b2:	1c a2       	std	Y+36, r1	; 0x24
    25b4:	01 c0       	rjmp	.+2      	; 0x25b8 <xTaskCreate+0xaa>
    25b6:	1d 8e       	std	Y+29, r1	; 0x1d
    25b8:	04 30       	cpi	r16, 0x04	; 4
    25ba:	08 f0       	brcs	.+2      	; 0x25be <xTaskCreate+0xb0>
    25bc:	03 e0       	ldi	r16, 0x03	; 3
    25be:	0a 8f       	std	Y+26, r16	; 0x1a
    25c0:	0f a3       	std	Y+39, r16	; 0x27
    25c2:	18 a6       	std	Y+40, r1	; 0x28
    25c4:	6e 01       	movw	r12, r28
    25c6:	b2 e0       	ldi	r27, 0x02	; 2
    25c8:	cb 0e       	add	r12, r27
    25ca:	d1 1c       	adc	r13, r1
    25cc:	c6 01       	movw	r24, r12
    25ce:	0e 94 1f 0a 	call	0x143e	; 0x143e <vListInitialiseItem>
    25d2:	ce 01       	movw	r24, r28
    25d4:	0e 96       	adiw	r24, 0x0e	; 14
    25d6:	0e 94 1f 0a 	call	0x143e	; 0x143e <vListInitialiseItem>
    25da:	db 87       	std	Y+11, r29	; 0x0b
    25dc:	ca 87       	std	Y+10, r28	; 0x0a
    25de:	84 e0       	ldi	r24, 0x04	; 4
    25e0:	90 e0       	ldi	r25, 0x00	; 0
    25e2:	a0 e0       	ldi	r26, 0x00	; 0
    25e4:	b0 e0       	ldi	r27, 0x00	; 0
    25e6:	80 1b       	sub	r24, r16
    25e8:	91 09       	sbc	r25, r1
    25ea:	a1 09       	sbc	r26, r1
    25ec:	b1 09       	sbc	r27, r1
    25ee:	8e 87       	std	Y+14, r24	; 0x0e
    25f0:	9f 87       	std	Y+15, r25	; 0x0f
    25f2:	a8 8b       	std	Y+16, r26	; 0x10
    25f4:	b9 8b       	std	Y+17, r27	; 0x11
    25f6:	df 8b       	std	Y+23, r29	; 0x17
    25f8:	ce 8b       	std	Y+22, r28	; 0x16
    25fa:	1a a6       	std	Y+42, r1	; 0x2a
    25fc:	19 a6       	std	Y+41, r1	; 0x29
    25fe:	1b a6       	std	Y+43, r1	; 0x2b
    2600:	1c a6       	std	Y+44, r1	; 0x2c
    2602:	1d a6       	std	Y+45, r1	; 0x2d
    2604:	1e a6       	std	Y+46, r1	; 0x2e
    2606:	1f a6       	std	Y+47, r1	; 0x2f
    2608:	a2 01       	movw	r20, r4
    260a:	b4 01       	movw	r22, r8
    260c:	c5 01       	movw	r24, r10
    260e:	0e 94 a8 0a 	call	0x1550	; 0x1550 <pxPortInitialiseStack>
    2612:	99 83       	std	Y+1, r25	; 0x01
    2614:	88 83       	st	Y, r24
    2616:	e1 14       	cp	r14, r1
    2618:	f1 04       	cpc	r15, r1
    261a:	19 f0       	breq	.+6      	; 0x2622 <xTaskCreate+0x114>
    261c:	f7 01       	movw	r30, r14
    261e:	d1 83       	std	Z+1, r29	; 0x01
    2620:	c0 83       	st	Z, r28
    2622:	0f b6       	in	r0, 0x3f	; 63
    2624:	f8 94       	cli
    2626:	0f 92       	push	r0
    2628:	80 91 f7 18 	lds	r24, 0x18F7	; 0x8018f7 <uxCurrentNumberOfTasks>
    262c:	8f 5f       	subi	r24, 0xFF	; 255
    262e:	80 93 f7 18 	sts	0x18F7, r24	; 0x8018f7 <uxCurrentNumberOfTasks>
    2632:	80 91 60 19 	lds	r24, 0x1960	; 0x801960 <pxCurrentTCB>
    2636:	90 91 61 19 	lds	r25, 0x1961	; 0x801961 <pxCurrentTCB+0x1>
    263a:	89 2b       	or	r24, r25
    263c:	d1 f5       	brne	.+116    	; 0x26b2 <xTaskCreate+0x1a4>
    263e:	d0 93 61 19 	sts	0x1961, r29	; 0x801961 <pxCurrentTCB+0x1>
    2642:	c0 93 60 19 	sts	0x1960, r28	; 0x801960 <pxCurrentTCB>
    2646:	80 91 f7 18 	lds	r24, 0x18F7	; 0x8018f7 <uxCurrentNumberOfTasks>
    264a:	81 30       	cpi	r24, 0x01	; 1
    264c:	09 f0       	breq	.+2      	; 0x2650 <xTaskCreate+0x142>
    264e:	41 c0       	rjmp	.+130    	; 0x26d2 <xTaskCreate+0x1c4>
    2650:	84 e3       	ldi	r24, 0x34	; 52
    2652:	99 e1       	ldi	r25, 0x19	; 25
    2654:	0e 94 0e 0a 	call	0x141c	; 0x141c <vListInitialise>
    2658:	8f e3       	ldi	r24, 0x3F	; 63
    265a:	99 e1       	ldi	r25, 0x19	; 25
    265c:	0e 94 0e 0a 	call	0x141c	; 0x141c <vListInitialise>
    2660:	8a e4       	ldi	r24, 0x4A	; 74
    2662:	99 e1       	ldi	r25, 0x19	; 25
    2664:	0e 94 0e 0a 	call	0x141c	; 0x141c <vListInitialise>
    2668:	85 e5       	ldi	r24, 0x55	; 85
    266a:	99 e1       	ldi	r25, 0x19	; 25
    266c:	0e 94 0e 0a 	call	0x141c	; 0x141c <vListInitialise>
    2670:	89 e2       	ldi	r24, 0x29	; 41
    2672:	99 e1       	ldi	r25, 0x19	; 25
    2674:	0e 94 0e 0a 	call	0x141c	; 0x141c <vListInitialise>
    2678:	8e e1       	ldi	r24, 0x1E	; 30
    267a:	99 e1       	ldi	r25, 0x19	; 25
    267c:	0e 94 0e 0a 	call	0x141c	; 0x141c <vListInitialise>
    2680:	8f e0       	ldi	r24, 0x0F	; 15
    2682:	99 e1       	ldi	r25, 0x19	; 25
    2684:	0e 94 0e 0a 	call	0x141c	; 0x141c <vListInitialise>
    2688:	84 e0       	ldi	r24, 0x04	; 4
    268a:	99 e1       	ldi	r25, 0x19	; 25
    268c:	0e 94 0e 0a 	call	0x141c	; 0x141c <vListInitialise>
    2690:	88 ef       	ldi	r24, 0xF8	; 248
    2692:	98 e1       	ldi	r25, 0x18	; 24
    2694:	0e 94 0e 0a 	call	0x141c	; 0x141c <vListInitialise>
    2698:	89 e2       	ldi	r24, 0x29	; 41
    269a:	99 e1       	ldi	r25, 0x19	; 25
    269c:	90 93 1d 19 	sts	0x191D, r25	; 0x80191d <pxDelayedTaskList+0x1>
    26a0:	80 93 1c 19 	sts	0x191C, r24	; 0x80191c <pxDelayedTaskList>
    26a4:	8e e1       	ldi	r24, 0x1E	; 30
    26a6:	99 e1       	ldi	r25, 0x19	; 25
    26a8:	90 93 1b 19 	sts	0x191B, r25	; 0x80191b <pxOverflowDelayedTaskList+0x1>
    26ac:	80 93 1a 19 	sts	0x191A, r24	; 0x80191a <pxOverflowDelayedTaskList>
    26b0:	10 c0       	rjmp	.+32     	; 0x26d2 <xTaskCreate+0x1c4>
    26b2:	80 91 f1 18 	lds	r24, 0x18F1	; 0x8018f1 <xSchedulerRunning>
    26b6:	81 11       	cpse	r24, r1
    26b8:	0c c0       	rjmp	.+24     	; 0x26d2 <xTaskCreate+0x1c4>
    26ba:	e0 91 60 19 	lds	r30, 0x1960	; 0x801960 <pxCurrentTCB>
    26be:	f0 91 61 19 	lds	r31, 0x1961	; 0x801961 <pxCurrentTCB+0x1>
    26c2:	92 8d       	ldd	r25, Z+26	; 0x1a
    26c4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    26c6:	89 17       	cp	r24, r25
    26c8:	20 f0       	brcs	.+8      	; 0x26d2 <xTaskCreate+0x1c4>
    26ca:	d0 93 61 19 	sts	0x1961, r29	; 0x801961 <pxCurrentTCB+0x1>
    26ce:	c0 93 60 19 	sts	0x1960, r28	; 0x801960 <pxCurrentTCB>
    26d2:	80 91 ed 18 	lds	r24, 0x18ED	; 0x8018ed <uxTaskNumber>
    26d6:	8f 5f       	subi	r24, 0xFF	; 255
    26d8:	80 93 ed 18 	sts	0x18ED, r24	; 0x8018ed <uxTaskNumber>
    26dc:	8d a3       	std	Y+37, r24	; 0x25
    26de:	8a 8d       	ldd	r24, Y+26	; 0x1a
    26e0:	90 91 f2 18 	lds	r25, 0x18F2	; 0x8018f2 <uxTopReadyPriority>
    26e4:	98 17       	cp	r25, r24
    26e6:	10 f4       	brcc	.+4      	; 0x26ec <xTaskCreate+0x1de>
    26e8:	80 93 f2 18 	sts	0x18F2, r24	; 0x8018f2 <uxTopReadyPriority>
    26ec:	fb e0       	ldi	r31, 0x0B	; 11
    26ee:	8f 9f       	mul	r24, r31
    26f0:	c0 01       	movw	r24, r0
    26f2:	11 24       	eor	r1, r1
    26f4:	b6 01       	movw	r22, r12
    26f6:	8c 5c       	subi	r24, 0xCC	; 204
    26f8:	96 4e       	sbci	r25, 0xE6	; 230
    26fa:	0e 94 23 0a 	call	0x1446	; 0x1446 <vListInsertEnd>
    26fe:	0f 90       	pop	r0
    2700:	0f be       	out	0x3f, r0	; 63
    2702:	80 91 f1 18 	lds	r24, 0x18F1	; 0x8018f1 <xSchedulerRunning>
    2706:	88 23       	and	r24, r24
    2708:	61 f0       	breq	.+24     	; 0x2722 <xTaskCreate+0x214>
    270a:	e0 91 60 19 	lds	r30, 0x1960	; 0x801960 <pxCurrentTCB>
    270e:	f0 91 61 19 	lds	r31, 0x1961	; 0x801961 <pxCurrentTCB+0x1>
    2712:	92 8d       	ldd	r25, Z+26	; 0x1a
    2714:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2716:	98 17       	cp	r25, r24
    2718:	30 f4       	brcc	.+12     	; 0x2726 <xTaskCreate+0x218>
    271a:	0e 94 56 0b 	call	0x16ac	; 0x16ac <vPortYield>
    271e:	81 e0       	ldi	r24, 0x01	; 1
    2720:	05 c0       	rjmp	.+10     	; 0x272c <xTaskCreate+0x21e>
    2722:	81 e0       	ldi	r24, 0x01	; 1
    2724:	03 c0       	rjmp	.+6      	; 0x272c <xTaskCreate+0x21e>
    2726:	81 e0       	ldi	r24, 0x01	; 1
    2728:	01 c0       	rjmp	.+2      	; 0x272c <xTaskCreate+0x21e>
    272a:	8f ef       	ldi	r24, 0xFF	; 255
    272c:	df 91       	pop	r29
    272e:	cf 91       	pop	r28
    2730:	0f 91       	pop	r16
    2732:	ff 90       	pop	r15
    2734:	ef 90       	pop	r14
    2736:	df 90       	pop	r13
    2738:	cf 90       	pop	r12
    273a:	bf 90       	pop	r11
    273c:	af 90       	pop	r10
    273e:	9f 90       	pop	r9
    2740:	8f 90       	pop	r8
    2742:	7f 90       	pop	r7
    2744:	6f 90       	pop	r6
    2746:	5f 90       	pop	r5
    2748:	4f 90       	pop	r4
    274a:	08 95       	ret

0000274c <vTaskStartScheduler>:
    274c:	ef 92       	push	r14
    274e:	ff 92       	push	r15
    2750:	0f 93       	push	r16
    2752:	0f 2e       	mov	r0, r31
    2754:	f7 ee       	ldi	r31, 0xE7	; 231
    2756:	ef 2e       	mov	r14, r31
    2758:	f8 e1       	ldi	r31, 0x18	; 24
    275a:	ff 2e       	mov	r15, r31
    275c:	f0 2d       	mov	r31, r0
    275e:	00 e0       	ldi	r16, 0x00	; 0
    2760:	20 e0       	ldi	r18, 0x00	; 0
    2762:	30 e0       	ldi	r19, 0x00	; 0
    2764:	40 ec       	ldi	r20, 0xC0	; 192
    2766:	50 e0       	ldi	r21, 0x00	; 0
    2768:	60 e9       	ldi	r22, 0x90	; 144
    276a:	75 e0       	ldi	r23, 0x05	; 5
    276c:	8d ec       	ldi	r24, 0xCD	; 205
    276e:	90 e0       	ldi	r25, 0x00	; 0
    2770:	ce de       	rcall	.-612    	; 0x250e <xTaskCreate>
    2772:	81 30       	cpi	r24, 0x01	; 1
    2774:	19 f5       	brne	.+70     	; 0x27bc <vTaskStartScheduler+0x70>
    2776:	00 d6       	rcall	.+3072   	; 0x3378 <xTimerCreateTimerTask>
    2778:	81 30       	cpi	r24, 0x01	; 1
    277a:	01 f5       	brne	.+64     	; 0x27bc <vTaskStartScheduler+0x70>
    277c:	f8 94       	cli
    277e:	8f ef       	ldi	r24, 0xFF	; 255
    2780:	9f ef       	ldi	r25, 0xFF	; 255
    2782:	dc 01       	movw	r26, r24
    2784:	80 93 e9 18 	sts	0x18E9, r24	; 0x8018e9 <xNextTaskUnblockTime>
    2788:	90 93 ea 18 	sts	0x18EA, r25	; 0x8018ea <xNextTaskUnblockTime+0x1>
    278c:	a0 93 eb 18 	sts	0x18EB, r26	; 0x8018eb <xNextTaskUnblockTime+0x2>
    2790:	b0 93 ec 18 	sts	0x18EC, r27	; 0x8018ec <xNextTaskUnblockTime+0x3>
    2794:	81 e0       	ldi	r24, 0x01	; 1
    2796:	80 93 f1 18 	sts	0x18F1, r24	; 0x8018f1 <xSchedulerRunning>
    279a:	10 92 f3 18 	sts	0x18F3, r1	; 0x8018f3 <xTickCount>
    279e:	10 92 f4 18 	sts	0x18F4, r1	; 0x8018f4 <xTickCount+0x1>
    27a2:	10 92 f5 18 	sts	0x18F5, r1	; 0x8018f5 <xTickCount+0x2>
    27a6:	10 92 f6 18 	sts	0x18F6, r1	; 0x8018f6 <xTickCount+0x3>
    27aa:	e0 91 60 19 	lds	r30, 0x1960	; 0x801960 <pxCurrentTCB>
    27ae:	f0 91 61 19 	lds	r31, 0x1961	; 0x801961 <pxCurrentTCB+0x1>
    27b2:	81 a5       	ldd	r24, Z+41	; 0x29
    27b4:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <task_switch_in>
    27b8:	0e 94 1a 0b 	call	0x1634	; 0x1634 <xPortStartScheduler>
    27bc:	0f 91       	pop	r16
    27be:	ff 90       	pop	r15
    27c0:	ef 90       	pop	r14
    27c2:	08 95       	ret

000027c4 <vTaskSuspendAll>:
    27c4:	80 91 e6 18 	lds	r24, 0x18E6	; 0x8018e6 <uxSchedulerSuspended>
    27c8:	8f 5f       	subi	r24, 0xFF	; 255
    27ca:	80 93 e6 18 	sts	0x18E6, r24	; 0x8018e6 <uxSchedulerSuspended>
    27ce:	08 95       	ret

000027d0 <xTaskGetTickCount>:
    27d0:	0f b6       	in	r0, 0x3f	; 63
    27d2:	f8 94       	cli
    27d4:	0f 92       	push	r0
    27d6:	60 91 f3 18 	lds	r22, 0x18F3	; 0x8018f3 <xTickCount>
    27da:	70 91 f4 18 	lds	r23, 0x18F4	; 0x8018f4 <xTickCount+0x1>
    27de:	80 91 f5 18 	lds	r24, 0x18F5	; 0x8018f5 <xTickCount+0x2>
    27e2:	90 91 f6 18 	lds	r25, 0x18F6	; 0x8018f6 <xTickCount+0x3>
    27e6:	0f 90       	pop	r0
    27e8:	0f be       	out	0x3f, r0	; 63
    27ea:	08 95       	ret

000027ec <xTaskIncrementTick>:
    27ec:	9f 92       	push	r9
    27ee:	af 92       	push	r10
    27f0:	bf 92       	push	r11
    27f2:	cf 92       	push	r12
    27f4:	df 92       	push	r13
    27f6:	ef 92       	push	r14
    27f8:	ff 92       	push	r15
    27fa:	0f 93       	push	r16
    27fc:	1f 93       	push	r17
    27fe:	cf 93       	push	r28
    2800:	df 93       	push	r29
    2802:	80 91 e6 18 	lds	r24, 0x18E6	; 0x8018e6 <uxSchedulerSuspended>
    2806:	81 11       	cpse	r24, r1
    2808:	ad c0       	rjmp	.+346    	; 0x2964 <xTaskIncrementTick+0x178>
    280a:	c0 90 f3 18 	lds	r12, 0x18F3	; 0x8018f3 <xTickCount>
    280e:	d0 90 f4 18 	lds	r13, 0x18F4	; 0x8018f4 <xTickCount+0x1>
    2812:	e0 90 f5 18 	lds	r14, 0x18F5	; 0x8018f5 <xTickCount+0x2>
    2816:	f0 90 f6 18 	lds	r15, 0x18F6	; 0x8018f6 <xTickCount+0x3>
    281a:	8f ef       	ldi	r24, 0xFF	; 255
    281c:	c8 1a       	sub	r12, r24
    281e:	d8 0a       	sbc	r13, r24
    2820:	e8 0a       	sbc	r14, r24
    2822:	f8 0a       	sbc	r15, r24
    2824:	c0 92 f3 18 	sts	0x18F3, r12	; 0x8018f3 <xTickCount>
    2828:	d0 92 f4 18 	sts	0x18F4, r13	; 0x8018f4 <xTickCount+0x1>
    282c:	e0 92 f5 18 	sts	0x18F5, r14	; 0x8018f5 <xTickCount+0x2>
    2830:	f0 92 f6 18 	sts	0x18F6, r15	; 0x8018f6 <xTickCount+0x3>
    2834:	c1 14       	cp	r12, r1
    2836:	d1 04       	cpc	r13, r1
    2838:	e1 04       	cpc	r14, r1
    283a:	f1 04       	cpc	r15, r1
    283c:	b1 f4       	brne	.+44     	; 0x286a <xTaskIncrementTick+0x7e>
    283e:	80 91 1c 19 	lds	r24, 0x191C	; 0x80191c <pxDelayedTaskList>
    2842:	90 91 1d 19 	lds	r25, 0x191D	; 0x80191d <pxDelayedTaskList+0x1>
    2846:	20 91 1a 19 	lds	r18, 0x191A	; 0x80191a <pxOverflowDelayedTaskList>
    284a:	30 91 1b 19 	lds	r19, 0x191B	; 0x80191b <pxOverflowDelayedTaskList+0x1>
    284e:	30 93 1d 19 	sts	0x191D, r19	; 0x80191d <pxDelayedTaskList+0x1>
    2852:	20 93 1c 19 	sts	0x191C, r18	; 0x80191c <pxDelayedTaskList>
    2856:	90 93 1b 19 	sts	0x191B, r25	; 0x80191b <pxOverflowDelayedTaskList+0x1>
    285a:	80 93 1a 19 	sts	0x191A, r24	; 0x80191a <pxOverflowDelayedTaskList>
    285e:	80 91 ee 18 	lds	r24, 0x18EE	; 0x8018ee <xNumOfOverflows>
    2862:	8f 5f       	subi	r24, 0xFF	; 255
    2864:	80 93 ee 18 	sts	0x18EE, r24	; 0x8018ee <xNumOfOverflows>
    2868:	b2 dd       	rcall	.-1180   	; 0x23ce <prvResetNextTaskUnblockTime>
    286a:	80 91 e9 18 	lds	r24, 0x18E9	; 0x8018e9 <xNextTaskUnblockTime>
    286e:	90 91 ea 18 	lds	r25, 0x18EA	; 0x8018ea <xNextTaskUnblockTime+0x1>
    2872:	a0 91 eb 18 	lds	r26, 0x18EB	; 0x8018eb <xNextTaskUnblockTime+0x2>
    2876:	b0 91 ec 18 	lds	r27, 0x18EC	; 0x8018ec <xNextTaskUnblockTime+0x3>
    287a:	c8 16       	cp	r12, r24
    287c:	d9 06       	cpc	r13, r25
    287e:	ea 06       	cpc	r14, r26
    2880:	fb 06       	cpc	r15, r27
    2882:	10 f4       	brcc	.+4      	; 0x2888 <xTaskIncrementTick+0x9c>
    2884:	b1 2c       	mov	r11, r1
    2886:	5d c0       	rjmp	.+186    	; 0x2942 <xTaskIncrementTick+0x156>
    2888:	b1 2c       	mov	r11, r1
    288a:	0f 2e       	mov	r0, r31
    288c:	fb e0       	ldi	r31, 0x0B	; 11
    288e:	af 2e       	mov	r10, r31
    2890:	f0 2d       	mov	r31, r0
    2892:	99 24       	eor	r9, r9
    2894:	93 94       	inc	r9
    2896:	e0 91 1c 19 	lds	r30, 0x191C	; 0x80191c <pxDelayedTaskList>
    289a:	f0 91 1d 19 	lds	r31, 0x191D	; 0x80191d <pxDelayedTaskList+0x1>
    289e:	80 81       	ld	r24, Z
    28a0:	81 11       	cpse	r24, r1
    28a2:	0c c0       	rjmp	.+24     	; 0x28bc <xTaskIncrementTick+0xd0>
    28a4:	8f ef       	ldi	r24, 0xFF	; 255
    28a6:	9f ef       	ldi	r25, 0xFF	; 255
    28a8:	dc 01       	movw	r26, r24
    28aa:	80 93 e9 18 	sts	0x18E9, r24	; 0x8018e9 <xNextTaskUnblockTime>
    28ae:	90 93 ea 18 	sts	0x18EA, r25	; 0x8018ea <xNextTaskUnblockTime+0x1>
    28b2:	a0 93 eb 18 	sts	0x18EB, r26	; 0x8018eb <xNextTaskUnblockTime+0x2>
    28b6:	b0 93 ec 18 	sts	0x18EC, r27	; 0x8018ec <xNextTaskUnblockTime+0x3>
    28ba:	43 c0       	rjmp	.+134    	; 0x2942 <xTaskIncrementTick+0x156>
    28bc:	e0 91 1c 19 	lds	r30, 0x191C	; 0x80191c <pxDelayedTaskList>
    28c0:	f0 91 1d 19 	lds	r31, 0x191D	; 0x80191d <pxDelayedTaskList+0x1>
    28c4:	07 80       	ldd	r0, Z+7	; 0x07
    28c6:	f0 85       	ldd	r31, Z+8	; 0x08
    28c8:	e0 2d       	mov	r30, r0
    28ca:	c0 85       	ldd	r28, Z+8	; 0x08
    28cc:	d1 85       	ldd	r29, Z+9	; 0x09
    28ce:	8a 81       	ldd	r24, Y+2	; 0x02
    28d0:	9b 81       	ldd	r25, Y+3	; 0x03
    28d2:	ac 81       	ldd	r26, Y+4	; 0x04
    28d4:	bd 81       	ldd	r27, Y+5	; 0x05
    28d6:	c8 16       	cp	r12, r24
    28d8:	d9 06       	cpc	r13, r25
    28da:	ea 06       	cpc	r14, r26
    28dc:	fb 06       	cpc	r15, r27
    28de:	48 f4       	brcc	.+18     	; 0x28f2 <xTaskIncrementTick+0x106>
    28e0:	80 93 e9 18 	sts	0x18E9, r24	; 0x8018e9 <xNextTaskUnblockTime>
    28e4:	90 93 ea 18 	sts	0x18EA, r25	; 0x8018ea <xNextTaskUnblockTime+0x1>
    28e8:	a0 93 eb 18 	sts	0x18EB, r26	; 0x8018eb <xNextTaskUnblockTime+0x2>
    28ec:	b0 93 ec 18 	sts	0x18EC, r27	; 0x8018ec <xNextTaskUnblockTime+0x3>
    28f0:	28 c0       	rjmp	.+80     	; 0x2942 <xTaskIncrementTick+0x156>
    28f2:	8e 01       	movw	r16, r28
    28f4:	0e 5f       	subi	r16, 0xFE	; 254
    28f6:	1f 4f       	sbci	r17, 0xFF	; 255
    28f8:	c8 01       	movw	r24, r16
    28fa:	0e 94 81 0a 	call	0x1502	; 0x1502 <uxListRemove>
    28fe:	88 8d       	ldd	r24, Y+24	; 0x18
    2900:	99 8d       	ldd	r25, Y+25	; 0x19
    2902:	89 2b       	or	r24, r25
    2904:	21 f0       	breq	.+8      	; 0x290e <xTaskIncrementTick+0x122>
    2906:	ce 01       	movw	r24, r28
    2908:	0e 96       	adiw	r24, 0x0e	; 14
    290a:	0e 94 81 0a 	call	0x1502	; 0x1502 <uxListRemove>
    290e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2910:	90 91 f2 18 	lds	r25, 0x18F2	; 0x8018f2 <uxTopReadyPriority>
    2914:	98 17       	cp	r25, r24
    2916:	10 f4       	brcc	.+4      	; 0x291c <xTaskIncrementTick+0x130>
    2918:	80 93 f2 18 	sts	0x18F2, r24	; 0x8018f2 <uxTopReadyPriority>
    291c:	a8 9e       	mul	r10, r24
    291e:	c0 01       	movw	r24, r0
    2920:	11 24       	eor	r1, r1
    2922:	b8 01       	movw	r22, r16
    2924:	8c 5c       	subi	r24, 0xCC	; 204
    2926:	96 4e       	sbci	r25, 0xE6	; 230
    2928:	0e 94 23 0a 	call	0x1446	; 0x1446 <vListInsertEnd>
    292c:	e0 91 60 19 	lds	r30, 0x1960	; 0x801960 <pxCurrentTCB>
    2930:	f0 91 61 19 	lds	r31, 0x1961	; 0x801961 <pxCurrentTCB+0x1>
    2934:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2936:	82 8d       	ldd	r24, Z+26	; 0x1a
    2938:	98 17       	cp	r25, r24
    293a:	08 f4       	brcc	.+2      	; 0x293e <xTaskIncrementTick+0x152>
    293c:	ac cf       	rjmp	.-168    	; 0x2896 <xTaskIncrementTick+0xaa>
    293e:	b9 2c       	mov	r11, r9
    2940:	aa cf       	rjmp	.-172    	; 0x2896 <xTaskIncrementTick+0xaa>
    2942:	e0 91 60 19 	lds	r30, 0x1960	; 0x801960 <pxCurrentTCB>
    2946:	f0 91 61 19 	lds	r31, 0x1961	; 0x801961 <pxCurrentTCB+0x1>
    294a:	e2 8d       	ldd	r30, Z+26	; 0x1a
    294c:	8b e0       	ldi	r24, 0x0B	; 11
    294e:	e8 9f       	mul	r30, r24
    2950:	f0 01       	movw	r30, r0
    2952:	11 24       	eor	r1, r1
    2954:	ec 5c       	subi	r30, 0xCC	; 204
    2956:	f6 4e       	sbci	r31, 0xE6	; 230
    2958:	80 81       	ld	r24, Z
    295a:	82 30       	cpi	r24, 0x02	; 2
    295c:	48 f0       	brcs	.+18     	; 0x2970 <xTaskIncrementTick+0x184>
    295e:	bb 24       	eor	r11, r11
    2960:	b3 94       	inc	r11
    2962:	06 c0       	rjmp	.+12     	; 0x2970 <xTaskIncrementTick+0x184>
    2964:	80 91 f0 18 	lds	r24, 0x18F0	; 0x8018f0 <uxPendedTicks>
    2968:	8f 5f       	subi	r24, 0xFF	; 255
    296a:	80 93 f0 18 	sts	0x18F0, r24	; 0x8018f0 <uxPendedTicks>
    296e:	b1 2c       	mov	r11, r1
    2970:	80 91 ef 18 	lds	r24, 0x18EF	; 0x8018ef <xYieldPending>
    2974:	88 23       	and	r24, r24
    2976:	11 f0       	breq	.+4      	; 0x297c <xTaskIncrementTick+0x190>
    2978:	bb 24       	eor	r11, r11
    297a:	b3 94       	inc	r11
    297c:	8b 2d       	mov	r24, r11
    297e:	df 91       	pop	r29
    2980:	cf 91       	pop	r28
    2982:	1f 91       	pop	r17
    2984:	0f 91       	pop	r16
    2986:	ff 90       	pop	r15
    2988:	ef 90       	pop	r14
    298a:	df 90       	pop	r13
    298c:	cf 90       	pop	r12
    298e:	bf 90       	pop	r11
    2990:	af 90       	pop	r10
    2992:	9f 90       	pop	r9
    2994:	08 95       	ret

00002996 <xTaskResumeAll>:
    2996:	cf 92       	push	r12
    2998:	df 92       	push	r13
    299a:	ef 92       	push	r14
    299c:	ff 92       	push	r15
    299e:	0f 93       	push	r16
    29a0:	1f 93       	push	r17
    29a2:	cf 93       	push	r28
    29a4:	df 93       	push	r29
    29a6:	0f b6       	in	r0, 0x3f	; 63
    29a8:	f8 94       	cli
    29aa:	0f 92       	push	r0
    29ac:	80 91 e6 18 	lds	r24, 0x18E6	; 0x8018e6 <uxSchedulerSuspended>
    29b0:	81 50       	subi	r24, 0x01	; 1
    29b2:	80 93 e6 18 	sts	0x18E6, r24	; 0x8018e6 <uxSchedulerSuspended>
    29b6:	80 91 e6 18 	lds	r24, 0x18E6	; 0x8018e6 <uxSchedulerSuspended>
    29ba:	81 11       	cpse	r24, r1
    29bc:	5a c0       	rjmp	.+180    	; 0x2a72 <xTaskResumeAll+0xdc>
    29be:	80 91 f7 18 	lds	r24, 0x18F7	; 0x8018f7 <uxCurrentNumberOfTasks>
    29c2:	81 11       	cpse	r24, r1
    29c4:	2c c0       	rjmp	.+88     	; 0x2a1e <xTaskResumeAll+0x88>
    29c6:	58 c0       	rjmp	.+176    	; 0x2a78 <xTaskResumeAll+0xe2>
    29c8:	d7 01       	movw	r26, r14
    29ca:	17 96       	adiw	r26, 0x07	; 7
    29cc:	ed 91       	ld	r30, X+
    29ce:	fc 91       	ld	r31, X
    29d0:	18 97       	sbiw	r26, 0x08	; 8
    29d2:	c0 85       	ldd	r28, Z+8	; 0x08
    29d4:	d1 85       	ldd	r29, Z+9	; 0x09
    29d6:	ce 01       	movw	r24, r28
    29d8:	0e 96       	adiw	r24, 0x0e	; 14
    29da:	0e 94 81 0a 	call	0x1502	; 0x1502 <uxListRemove>
    29de:	8e 01       	movw	r16, r28
    29e0:	0e 5f       	subi	r16, 0xFE	; 254
    29e2:	1f 4f       	sbci	r17, 0xFF	; 255
    29e4:	c8 01       	movw	r24, r16
    29e6:	0e 94 81 0a 	call	0x1502	; 0x1502 <uxListRemove>
    29ea:	8a 8d       	ldd	r24, Y+26	; 0x1a
    29ec:	90 91 f2 18 	lds	r25, 0x18F2	; 0x8018f2 <uxTopReadyPriority>
    29f0:	98 17       	cp	r25, r24
    29f2:	10 f4       	brcc	.+4      	; 0x29f8 <xTaskResumeAll+0x62>
    29f4:	80 93 f2 18 	sts	0x18F2, r24	; 0x8018f2 <uxTopReadyPriority>
    29f8:	d8 9e       	mul	r13, r24
    29fa:	c0 01       	movw	r24, r0
    29fc:	11 24       	eor	r1, r1
    29fe:	b8 01       	movw	r22, r16
    2a00:	8c 5c       	subi	r24, 0xCC	; 204
    2a02:	96 4e       	sbci	r25, 0xE6	; 230
    2a04:	0e 94 23 0a 	call	0x1446	; 0x1446 <vListInsertEnd>
    2a08:	e0 91 60 19 	lds	r30, 0x1960	; 0x801960 <pxCurrentTCB>
    2a0c:	f0 91 61 19 	lds	r31, 0x1961	; 0x801961 <pxCurrentTCB+0x1>
    2a10:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2a12:	82 8d       	ldd	r24, Z+26	; 0x1a
    2a14:	98 17       	cp	r25, r24
    2a16:	88 f0       	brcs	.+34     	; 0x2a3a <xTaskResumeAll+0xa4>
    2a18:	c0 92 ef 18 	sts	0x18EF, r12	; 0x8018ef <xYieldPending>
    2a1c:	0e c0       	rjmp	.+28     	; 0x2a3a <xTaskResumeAll+0xa4>
    2a1e:	c0 e0       	ldi	r28, 0x00	; 0
    2a20:	d0 e0       	ldi	r29, 0x00	; 0
    2a22:	0f 2e       	mov	r0, r31
    2a24:	ff e0       	ldi	r31, 0x0F	; 15
    2a26:	ef 2e       	mov	r14, r31
    2a28:	f9 e1       	ldi	r31, 0x19	; 25
    2a2a:	ff 2e       	mov	r15, r31
    2a2c:	f0 2d       	mov	r31, r0
    2a2e:	0f 2e       	mov	r0, r31
    2a30:	fb e0       	ldi	r31, 0x0B	; 11
    2a32:	df 2e       	mov	r13, r31
    2a34:	f0 2d       	mov	r31, r0
    2a36:	cc 24       	eor	r12, r12
    2a38:	c3 94       	inc	r12
    2a3a:	f7 01       	movw	r30, r14
    2a3c:	80 81       	ld	r24, Z
    2a3e:	81 11       	cpse	r24, r1
    2a40:	c3 cf       	rjmp	.-122    	; 0x29c8 <xTaskResumeAll+0x32>
    2a42:	cd 2b       	or	r28, r29
    2a44:	09 f0       	breq	.+2      	; 0x2a48 <xTaskResumeAll+0xb2>
    2a46:	c3 dc       	rcall	.-1658   	; 0x23ce <prvResetNextTaskUnblockTime>
    2a48:	c0 91 f0 18 	lds	r28, 0x18F0	; 0x8018f0 <uxPendedTicks>
    2a4c:	cc 23       	and	r28, r28
    2a4e:	49 f0       	breq	.+18     	; 0x2a62 <xTaskResumeAll+0xcc>
    2a50:	d1 e0       	ldi	r29, 0x01	; 1
    2a52:	cc de       	rcall	.-616    	; 0x27ec <xTaskIncrementTick>
    2a54:	81 11       	cpse	r24, r1
    2a56:	d0 93 ef 18 	sts	0x18EF, r29	; 0x8018ef <xYieldPending>
    2a5a:	c1 50       	subi	r28, 0x01	; 1
    2a5c:	d1 f7       	brne	.-12     	; 0x2a52 <xTaskResumeAll+0xbc>
    2a5e:	10 92 f0 18 	sts	0x18F0, r1	; 0x8018f0 <uxPendedTicks>
    2a62:	80 91 ef 18 	lds	r24, 0x18EF	; 0x8018ef <xYieldPending>
    2a66:	88 23       	and	r24, r24
    2a68:	31 f0       	breq	.+12     	; 0x2a76 <xTaskResumeAll+0xe0>
    2a6a:	0e 94 56 0b 	call	0x16ac	; 0x16ac <vPortYield>
    2a6e:	81 e0       	ldi	r24, 0x01	; 1
    2a70:	03 c0       	rjmp	.+6      	; 0x2a78 <xTaskResumeAll+0xe2>
    2a72:	80 e0       	ldi	r24, 0x00	; 0
    2a74:	01 c0       	rjmp	.+2      	; 0x2a78 <xTaskResumeAll+0xe2>
    2a76:	80 e0       	ldi	r24, 0x00	; 0
    2a78:	0f 90       	pop	r0
    2a7a:	0f be       	out	0x3f, r0	; 63
    2a7c:	df 91       	pop	r29
    2a7e:	cf 91       	pop	r28
    2a80:	1f 91       	pop	r17
    2a82:	0f 91       	pop	r16
    2a84:	ff 90       	pop	r15
    2a86:	ef 90       	pop	r14
    2a88:	df 90       	pop	r13
    2a8a:	cf 90       	pop	r12
    2a8c:	08 95       	ret

00002a8e <vTaskDelay>:
    2a8e:	cf 92       	push	r12
    2a90:	df 92       	push	r13
    2a92:	ef 92       	push	r14
    2a94:	ff 92       	push	r15
    2a96:	6b 01       	movw	r12, r22
    2a98:	7c 01       	movw	r14, r24
    2a9a:	67 2b       	or	r22, r23
    2a9c:	68 2b       	or	r22, r24
    2a9e:	69 2b       	or	r22, r25
    2aa0:	41 f0       	breq	.+16     	; 0x2ab2 <vTaskDelay+0x24>
    2aa2:	90 de       	rcall	.-736    	; 0x27c4 <vTaskSuspendAll>
    2aa4:	40 e0       	ldi	r20, 0x00	; 0
    2aa6:	c7 01       	movw	r24, r14
    2aa8:	b6 01       	movw	r22, r12
    2aaa:	bb dc       	rcall	.-1674   	; 0x2422 <prvAddCurrentTaskToDelayedList>
    2aac:	74 df       	rcall	.-280    	; 0x2996 <xTaskResumeAll>
    2aae:	81 11       	cpse	r24, r1
    2ab0:	02 c0       	rjmp	.+4      	; 0x2ab6 <vTaskDelay+0x28>
    2ab2:	0e 94 56 0b 	call	0x16ac	; 0x16ac <vPortYield>
    2ab6:	ff 90       	pop	r15
    2ab8:	ef 90       	pop	r14
    2aba:	df 90       	pop	r13
    2abc:	cf 90       	pop	r12
    2abe:	08 95       	ret

00002ac0 <vTaskSwitchContext>:
    2ac0:	80 91 e6 18 	lds	r24, 0x18E6	; 0x8018e6 <uxSchedulerSuspended>
    2ac4:	88 23       	and	r24, r24
    2ac6:	21 f0       	breq	.+8      	; 0x2ad0 <vTaskSwitchContext+0x10>
    2ac8:	81 e0       	ldi	r24, 0x01	; 1
    2aca:	80 93 ef 18 	sts	0x18EF, r24	; 0x8018ef <xYieldPending>
    2ace:	08 95       	ret
    2ad0:	10 92 ef 18 	sts	0x18EF, r1	; 0x8018ef <xYieldPending>
    2ad4:	e0 91 60 19 	lds	r30, 0x1960	; 0x801960 <pxCurrentTCB>
    2ad8:	f0 91 61 19 	lds	r31, 0x1961	; 0x801961 <pxCurrentTCB+0x1>
    2adc:	81 a5       	ldd	r24, Z+41	; 0x29
    2ade:	0e 94 65 07 	call	0xeca	; 0xeca <task_switch_out>
    2ae2:	a0 91 60 19 	lds	r26, 0x1960	; 0x801960 <pxCurrentTCB>
    2ae6:	b0 91 61 19 	lds	r27, 0x1961	; 0x801961 <pxCurrentTCB+0x1>
    2aea:	e0 91 60 19 	lds	r30, 0x1960	; 0x801960 <pxCurrentTCB>
    2aee:	f0 91 61 19 	lds	r31, 0x1961	; 0x801961 <pxCurrentTCB+0x1>
    2af2:	2d 91       	ld	r18, X+
    2af4:	3c 91       	ld	r19, X
    2af6:	83 8d       	ldd	r24, Z+27	; 0x1b
    2af8:	94 8d       	ldd	r25, Z+28	; 0x1c
    2afa:	82 17       	cp	r24, r18
    2afc:	93 07       	cpc	r25, r19
    2afe:	58 f0       	brcs	.+22     	; 0x2b16 <vTaskSwitchContext+0x56>
    2b00:	60 91 60 19 	lds	r22, 0x1960	; 0x801960 <pxCurrentTCB>
    2b04:	70 91 61 19 	lds	r23, 0x1961	; 0x801961 <pxCurrentTCB+0x1>
    2b08:	80 91 60 19 	lds	r24, 0x1960	; 0x801960 <pxCurrentTCB>
    2b0c:	90 91 61 19 	lds	r25, 0x1961	; 0x801961 <pxCurrentTCB+0x1>
    2b10:	63 5e       	subi	r22, 0xE3	; 227
    2b12:	7f 4f       	sbci	r23, 0xFF	; 255
    2b14:	53 d5       	rcall	.+2726   	; 0x35bc <vApplicationStackOverflowHook>
    2b16:	80 91 f2 18 	lds	r24, 0x18F2	; 0x8018f2 <uxTopReadyPriority>
    2b1a:	28 2f       	mov	r18, r24
    2b1c:	30 e0       	ldi	r19, 0x00	; 0
    2b1e:	9b e0       	ldi	r25, 0x0B	; 11
    2b20:	89 9f       	mul	r24, r25
    2b22:	f0 01       	movw	r30, r0
    2b24:	11 24       	eor	r1, r1
    2b26:	ec 5c       	subi	r30, 0xCC	; 204
    2b28:	f6 4e       	sbci	r31, 0xE6	; 230
    2b2a:	90 81       	ld	r25, Z
    2b2c:	91 11       	cpse	r25, r1
    2b2e:	0e c0       	rjmp	.+28     	; 0x2b4c <vTaskSwitchContext+0x8c>
    2b30:	4b e0       	ldi	r20, 0x0B	; 11
    2b32:	81 50       	subi	r24, 0x01	; 1
    2b34:	28 2f       	mov	r18, r24
    2b36:	30 e0       	ldi	r19, 0x00	; 0
    2b38:	42 9f       	mul	r20, r18
    2b3a:	f0 01       	movw	r30, r0
    2b3c:	43 9f       	mul	r20, r19
    2b3e:	f0 0d       	add	r31, r0
    2b40:	11 24       	eor	r1, r1
    2b42:	ec 5c       	subi	r30, 0xCC	; 204
    2b44:	f6 4e       	sbci	r31, 0xE6	; 230
    2b46:	90 81       	ld	r25, Z
    2b48:	99 23       	and	r25, r25
    2b4a:	99 f3       	breq	.-26     	; 0x2b32 <vTaskSwitchContext+0x72>
    2b4c:	9b e0       	ldi	r25, 0x0B	; 11
    2b4e:	92 9f       	mul	r25, r18
    2b50:	a0 01       	movw	r20, r0
    2b52:	93 9f       	mul	r25, r19
    2b54:	50 0d       	add	r21, r0
    2b56:	11 24       	eor	r1, r1
    2b58:	da 01       	movw	r26, r20
    2b5a:	ac 5c       	subi	r26, 0xCC	; 204
    2b5c:	b6 4e       	sbci	r27, 0xE6	; 230
    2b5e:	11 96       	adiw	r26, 0x01	; 1
    2b60:	ed 91       	ld	r30, X+
    2b62:	fc 91       	ld	r31, X
    2b64:	12 97       	sbiw	r26, 0x02	; 2
    2b66:	04 80       	ldd	r0, Z+4	; 0x04
    2b68:	f5 81       	ldd	r31, Z+5	; 0x05
    2b6a:	e0 2d       	mov	r30, r0
    2b6c:	12 96       	adiw	r26, 0x02	; 2
    2b6e:	fc 93       	st	X, r31
    2b70:	ee 93       	st	-X, r30
    2b72:	11 97       	sbiw	r26, 0x01	; 1
    2b74:	49 5c       	subi	r20, 0xC9	; 201
    2b76:	56 4e       	sbci	r21, 0xE6	; 230
    2b78:	e4 17       	cp	r30, r20
    2b7a:	f5 07       	cpc	r31, r21
    2b7c:	29 f4       	brne	.+10     	; 0x2b88 <vTaskSwitchContext+0xc8>
    2b7e:	44 81       	ldd	r20, Z+4	; 0x04
    2b80:	55 81       	ldd	r21, Z+5	; 0x05
    2b82:	fd 01       	movw	r30, r26
    2b84:	52 83       	std	Z+2, r21	; 0x02
    2b86:	41 83       	std	Z+1, r20	; 0x01
    2b88:	9b e0       	ldi	r25, 0x0B	; 11
    2b8a:	92 9f       	mul	r25, r18
    2b8c:	f0 01       	movw	r30, r0
    2b8e:	93 9f       	mul	r25, r19
    2b90:	f0 0d       	add	r31, r0
    2b92:	11 24       	eor	r1, r1
    2b94:	ec 5c       	subi	r30, 0xCC	; 204
    2b96:	f6 4e       	sbci	r31, 0xE6	; 230
    2b98:	01 80       	ldd	r0, Z+1	; 0x01
    2b9a:	f2 81       	ldd	r31, Z+2	; 0x02
    2b9c:	e0 2d       	mov	r30, r0
    2b9e:	20 85       	ldd	r18, Z+8	; 0x08
    2ba0:	31 85       	ldd	r19, Z+9	; 0x09
    2ba2:	30 93 61 19 	sts	0x1961, r19	; 0x801961 <pxCurrentTCB+0x1>
    2ba6:	20 93 60 19 	sts	0x1960, r18	; 0x801960 <pxCurrentTCB>
    2baa:	80 93 f2 18 	sts	0x18F2, r24	; 0x8018f2 <uxTopReadyPriority>
    2bae:	e0 91 60 19 	lds	r30, 0x1960	; 0x801960 <pxCurrentTCB>
    2bb2:	f0 91 61 19 	lds	r31, 0x1961	; 0x801961 <pxCurrentTCB+0x1>
    2bb6:	81 a5       	ldd	r24, Z+41	; 0x29
    2bb8:	0c 94 5b 07 	jmp	0xeb6	; 0xeb6 <task_switch_in>
    2bbc:	08 95       	ret

00002bbe <vTaskPlaceOnEventList>:
    2bbe:	cf 92       	push	r12
    2bc0:	df 92       	push	r13
    2bc2:	ef 92       	push	r14
    2bc4:	ff 92       	push	r15
    2bc6:	6a 01       	movw	r12, r20
    2bc8:	7b 01       	movw	r14, r22
    2bca:	60 91 60 19 	lds	r22, 0x1960	; 0x801960 <pxCurrentTCB>
    2bce:	70 91 61 19 	lds	r23, 0x1961	; 0x801961 <pxCurrentTCB+0x1>
    2bd2:	62 5f       	subi	r22, 0xF2	; 242
    2bd4:	7f 4f       	sbci	r23, 0xFF	; 255
    2bd6:	0e 94 44 0a 	call	0x1488	; 0x1488 <vListInsert>
    2bda:	41 e0       	ldi	r20, 0x01	; 1
    2bdc:	c7 01       	movw	r24, r14
    2bde:	b6 01       	movw	r22, r12
    2be0:	20 dc       	rcall	.-1984   	; 0x2422 <prvAddCurrentTaskToDelayedList>
    2be2:	ff 90       	pop	r15
    2be4:	ef 90       	pop	r14
    2be6:	df 90       	pop	r13
    2be8:	cf 90       	pop	r12
    2bea:	08 95       	ret

00002bec <vTaskPlaceOnUnorderedEventList>:
    2bec:	cf 92       	push	r12
    2bee:	df 92       	push	r13
    2bf0:	ef 92       	push	r14
    2bf2:	ff 92       	push	r15
    2bf4:	0f 93       	push	r16
    2bf6:	1f 93       	push	r17
    2bf8:	68 01       	movw	r12, r16
    2bfa:	79 01       	movw	r14, r18
    2bfc:	e0 91 60 19 	lds	r30, 0x1960	; 0x801960 <pxCurrentTCB>
    2c00:	f0 91 61 19 	lds	r31, 0x1961	; 0x801961 <pxCurrentTCB+0x1>
    2c04:	70 68       	ori	r23, 0x80	; 128
    2c06:	46 87       	std	Z+14, r20	; 0x0e
    2c08:	57 87       	std	Z+15, r21	; 0x0f
    2c0a:	60 8b       	std	Z+16, r22	; 0x10
    2c0c:	71 8b       	std	Z+17, r23	; 0x11
    2c0e:	60 91 60 19 	lds	r22, 0x1960	; 0x801960 <pxCurrentTCB>
    2c12:	70 91 61 19 	lds	r23, 0x1961	; 0x801961 <pxCurrentTCB+0x1>
    2c16:	62 5f       	subi	r22, 0xF2	; 242
    2c18:	7f 4f       	sbci	r23, 0xFF	; 255
    2c1a:	0e 94 23 0a 	call	0x1446	; 0x1446 <vListInsertEnd>
    2c1e:	41 e0       	ldi	r20, 0x01	; 1
    2c20:	c7 01       	movw	r24, r14
    2c22:	b6 01       	movw	r22, r12
    2c24:	fe db       	rcall	.-2052   	; 0x2422 <prvAddCurrentTaskToDelayedList>
    2c26:	1f 91       	pop	r17
    2c28:	0f 91       	pop	r16
    2c2a:	ff 90       	pop	r15
    2c2c:	ef 90       	pop	r14
    2c2e:	df 90       	pop	r13
    2c30:	cf 90       	pop	r12
    2c32:	08 95       	ret

00002c34 <vTaskPlaceOnEventListRestricted>:
    2c34:	cf 92       	push	r12
    2c36:	df 92       	push	r13
    2c38:	ef 92       	push	r14
    2c3a:	ff 92       	push	r15
    2c3c:	cf 93       	push	r28
    2c3e:	6a 01       	movw	r12, r20
    2c40:	7b 01       	movw	r14, r22
    2c42:	c2 2f       	mov	r28, r18
    2c44:	60 91 60 19 	lds	r22, 0x1960	; 0x801960 <pxCurrentTCB>
    2c48:	70 91 61 19 	lds	r23, 0x1961	; 0x801961 <pxCurrentTCB+0x1>
    2c4c:	62 5f       	subi	r22, 0xF2	; 242
    2c4e:	7f 4f       	sbci	r23, 0xFF	; 255
    2c50:	0e 94 23 0a 	call	0x1446	; 0x1446 <vListInsertEnd>
    2c54:	cc 23       	and	r28, r28
    2c56:	21 f0       	breq	.+8      	; 0x2c60 <vTaskPlaceOnEventListRestricted+0x2c>
    2c58:	cc 24       	eor	r12, r12
    2c5a:	ca 94       	dec	r12
    2c5c:	dc 2c       	mov	r13, r12
    2c5e:	76 01       	movw	r14, r12
    2c60:	4c 2f       	mov	r20, r28
    2c62:	c7 01       	movw	r24, r14
    2c64:	b6 01       	movw	r22, r12
    2c66:	dd db       	rcall	.-2118   	; 0x2422 <prvAddCurrentTaskToDelayedList>
    2c68:	cf 91       	pop	r28
    2c6a:	ff 90       	pop	r15
    2c6c:	ef 90       	pop	r14
    2c6e:	df 90       	pop	r13
    2c70:	cf 90       	pop	r12
    2c72:	08 95       	ret

00002c74 <xTaskRemoveFromEventList>:
    2c74:	0f 93       	push	r16
    2c76:	1f 93       	push	r17
    2c78:	cf 93       	push	r28
    2c7a:	df 93       	push	r29
    2c7c:	dc 01       	movw	r26, r24
    2c7e:	17 96       	adiw	r26, 0x07	; 7
    2c80:	ed 91       	ld	r30, X+
    2c82:	fc 91       	ld	r31, X
    2c84:	18 97       	sbiw	r26, 0x08	; 8
    2c86:	c0 85       	ldd	r28, Z+8	; 0x08
    2c88:	d1 85       	ldd	r29, Z+9	; 0x09
    2c8a:	8e 01       	movw	r16, r28
    2c8c:	02 5f       	subi	r16, 0xF2	; 242
    2c8e:	1f 4f       	sbci	r17, 0xFF	; 255
    2c90:	c8 01       	movw	r24, r16
    2c92:	0e 94 81 0a 	call	0x1502	; 0x1502 <uxListRemove>
    2c96:	80 91 e6 18 	lds	r24, 0x18E6	; 0x8018e6 <uxSchedulerSuspended>
    2c9a:	81 11       	cpse	r24, r1
    2c9c:	16 c0       	rjmp	.+44     	; 0x2cca <xTaskRemoveFromEventList+0x56>
    2c9e:	0c 50       	subi	r16, 0x0C	; 12
    2ca0:	11 09       	sbc	r17, r1
    2ca2:	c8 01       	movw	r24, r16
    2ca4:	0e 94 81 0a 	call	0x1502	; 0x1502 <uxListRemove>
    2ca8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2caa:	90 91 f2 18 	lds	r25, 0x18F2	; 0x8018f2 <uxTopReadyPriority>
    2cae:	98 17       	cp	r25, r24
    2cb0:	10 f4       	brcc	.+4      	; 0x2cb6 <xTaskRemoveFromEventList+0x42>
    2cb2:	80 93 f2 18 	sts	0x18F2, r24	; 0x8018f2 <uxTopReadyPriority>
    2cb6:	bb e0       	ldi	r27, 0x0B	; 11
    2cb8:	8b 9f       	mul	r24, r27
    2cba:	c0 01       	movw	r24, r0
    2cbc:	11 24       	eor	r1, r1
    2cbe:	b8 01       	movw	r22, r16
    2cc0:	8c 5c       	subi	r24, 0xCC	; 204
    2cc2:	96 4e       	sbci	r25, 0xE6	; 230
    2cc4:	0e 94 23 0a 	call	0x1446	; 0x1446 <vListInsertEnd>
    2cc8:	05 c0       	rjmp	.+10     	; 0x2cd4 <xTaskRemoveFromEventList+0x60>
    2cca:	b8 01       	movw	r22, r16
    2ccc:	8f e0       	ldi	r24, 0x0F	; 15
    2cce:	99 e1       	ldi	r25, 0x19	; 25
    2cd0:	0e 94 23 0a 	call	0x1446	; 0x1446 <vListInsertEnd>
    2cd4:	e0 91 60 19 	lds	r30, 0x1960	; 0x801960 <pxCurrentTCB>
    2cd8:	f0 91 61 19 	lds	r31, 0x1961	; 0x801961 <pxCurrentTCB+0x1>
    2cdc:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2cde:	82 8d       	ldd	r24, Z+26	; 0x1a
    2ce0:	89 17       	cp	r24, r25
    2ce2:	20 f4       	brcc	.+8      	; 0x2cec <xTaskRemoveFromEventList+0x78>
    2ce4:	81 e0       	ldi	r24, 0x01	; 1
    2ce6:	80 93 ef 18 	sts	0x18EF, r24	; 0x8018ef <xYieldPending>
    2cea:	01 c0       	rjmp	.+2      	; 0x2cee <xTaskRemoveFromEventList+0x7a>
    2cec:	80 e0       	ldi	r24, 0x00	; 0
    2cee:	df 91       	pop	r29
    2cf0:	cf 91       	pop	r28
    2cf2:	1f 91       	pop	r17
    2cf4:	0f 91       	pop	r16
    2cf6:	08 95       	ret

00002cf8 <vTaskRemoveFromUnorderedEventList>:
    2cf8:	0f 93       	push	r16
    2cfa:	1f 93       	push	r17
    2cfc:	cf 93       	push	r28
    2cfe:	df 93       	push	r29
    2d00:	70 68       	ori	r23, 0x80	; 128
    2d02:	fc 01       	movw	r30, r24
    2d04:	40 83       	st	Z, r20
    2d06:	51 83       	std	Z+1, r21	; 0x01
    2d08:	62 83       	std	Z+2, r22	; 0x02
    2d0a:	73 83       	std	Z+3, r23	; 0x03
    2d0c:	c0 85       	ldd	r28, Z+8	; 0x08
    2d0e:	d1 85       	ldd	r29, Z+9	; 0x09
    2d10:	0e 94 81 0a 	call	0x1502	; 0x1502 <uxListRemove>
    2d14:	8e 01       	movw	r16, r28
    2d16:	0e 5f       	subi	r16, 0xFE	; 254
    2d18:	1f 4f       	sbci	r17, 0xFF	; 255
    2d1a:	c8 01       	movw	r24, r16
    2d1c:	0e 94 81 0a 	call	0x1502	; 0x1502 <uxListRemove>
    2d20:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2d22:	90 91 f2 18 	lds	r25, 0x18F2	; 0x8018f2 <uxTopReadyPriority>
    2d26:	98 17       	cp	r25, r24
    2d28:	10 f4       	brcc	.+4      	; 0x2d2e <vTaskRemoveFromUnorderedEventList+0x36>
    2d2a:	80 93 f2 18 	sts	0x18F2, r24	; 0x8018f2 <uxTopReadyPriority>
    2d2e:	fb e0       	ldi	r31, 0x0B	; 11
    2d30:	8f 9f       	mul	r24, r31
    2d32:	c0 01       	movw	r24, r0
    2d34:	11 24       	eor	r1, r1
    2d36:	b8 01       	movw	r22, r16
    2d38:	8c 5c       	subi	r24, 0xCC	; 204
    2d3a:	96 4e       	sbci	r25, 0xE6	; 230
    2d3c:	0e 94 23 0a 	call	0x1446	; 0x1446 <vListInsertEnd>
    2d40:	e0 91 60 19 	lds	r30, 0x1960	; 0x801960 <pxCurrentTCB>
    2d44:	f0 91 61 19 	lds	r31, 0x1961	; 0x801961 <pxCurrentTCB+0x1>
    2d48:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2d4a:	82 8d       	ldd	r24, Z+26	; 0x1a
    2d4c:	89 17       	cp	r24, r25
    2d4e:	18 f4       	brcc	.+6      	; 0x2d56 <vTaskRemoveFromUnorderedEventList+0x5e>
    2d50:	81 e0       	ldi	r24, 0x01	; 1
    2d52:	80 93 ef 18 	sts	0x18EF, r24	; 0x8018ef <xYieldPending>
    2d56:	df 91       	pop	r29
    2d58:	cf 91       	pop	r28
    2d5a:	1f 91       	pop	r17
    2d5c:	0f 91       	pop	r16
    2d5e:	08 95       	ret

00002d60 <vTaskSetTimeOutState>:
    2d60:	0f b6       	in	r0, 0x3f	; 63
    2d62:	f8 94       	cli
    2d64:	0f 92       	push	r0
    2d66:	20 91 ee 18 	lds	r18, 0x18EE	; 0x8018ee <xNumOfOverflows>
    2d6a:	fc 01       	movw	r30, r24
    2d6c:	20 83       	st	Z, r18
    2d6e:	40 91 f3 18 	lds	r20, 0x18F3	; 0x8018f3 <xTickCount>
    2d72:	50 91 f4 18 	lds	r21, 0x18F4	; 0x8018f4 <xTickCount+0x1>
    2d76:	60 91 f5 18 	lds	r22, 0x18F5	; 0x8018f5 <xTickCount+0x2>
    2d7a:	70 91 f6 18 	lds	r23, 0x18F6	; 0x8018f6 <xTickCount+0x3>
    2d7e:	41 83       	std	Z+1, r20	; 0x01
    2d80:	52 83       	std	Z+2, r21	; 0x02
    2d82:	63 83       	std	Z+3, r22	; 0x03
    2d84:	74 83       	std	Z+4, r23	; 0x04
    2d86:	0f 90       	pop	r0
    2d88:	0f be       	out	0x3f, r0	; 63
    2d8a:	08 95       	ret

00002d8c <vTaskInternalSetTimeOutState>:
    2d8c:	20 91 ee 18 	lds	r18, 0x18EE	; 0x8018ee <xNumOfOverflows>
    2d90:	fc 01       	movw	r30, r24
    2d92:	20 83       	st	Z, r18
    2d94:	40 91 f3 18 	lds	r20, 0x18F3	; 0x8018f3 <xTickCount>
    2d98:	50 91 f4 18 	lds	r21, 0x18F4	; 0x8018f4 <xTickCount+0x1>
    2d9c:	60 91 f5 18 	lds	r22, 0x18F5	; 0x8018f5 <xTickCount+0x2>
    2da0:	70 91 f6 18 	lds	r23, 0x18F6	; 0x8018f6 <xTickCount+0x3>
    2da4:	41 83       	std	Z+1, r20	; 0x01
    2da6:	52 83       	std	Z+2, r21	; 0x02
    2da8:	63 83       	std	Z+3, r22	; 0x03
    2daa:	74 83       	std	Z+4, r23	; 0x04
    2dac:	08 95       	ret

00002dae <xTaskCheckForTimeOut>:
    2dae:	cf 92       	push	r12
    2db0:	df 92       	push	r13
    2db2:	ef 92       	push	r14
    2db4:	ff 92       	push	r15
    2db6:	0f 93       	push	r16
    2db8:	1f 93       	push	r17
    2dba:	cf 93       	push	r28
    2dbc:	df 93       	push	r29
    2dbe:	fb 01       	movw	r30, r22
    2dc0:	0f b6       	in	r0, 0x3f	; 63
    2dc2:	f8 94       	cli
    2dc4:	0f 92       	push	r0
    2dc6:	40 91 f3 18 	lds	r20, 0x18F3	; 0x8018f3 <xTickCount>
    2dca:	50 91 f4 18 	lds	r21, 0x18F4	; 0x8018f4 <xTickCount+0x1>
    2dce:	60 91 f5 18 	lds	r22, 0x18F5	; 0x8018f5 <xTickCount+0x2>
    2dd2:	70 91 f6 18 	lds	r23, 0x18F6	; 0x8018f6 <xTickCount+0x3>
    2dd6:	00 81       	ld	r16, Z
    2dd8:	11 81       	ldd	r17, Z+1	; 0x01
    2dda:	22 81       	ldd	r18, Z+2	; 0x02
    2ddc:	33 81       	ldd	r19, Z+3	; 0x03
    2dde:	0f 3f       	cpi	r16, 0xFF	; 255
    2de0:	af ef       	ldi	r26, 0xFF	; 255
    2de2:	1a 07       	cpc	r17, r26
    2de4:	2a 07       	cpc	r18, r26
    2de6:	3a 07       	cpc	r19, r26
    2de8:	49 f1       	breq	.+82     	; 0x2e3c <xTaskCheckForTimeOut+0x8e>
    2dea:	ec 01       	movw	r28, r24
    2dec:	c9 80       	ldd	r12, Y+1	; 0x01
    2dee:	da 80       	ldd	r13, Y+2	; 0x02
    2df0:	eb 80       	ldd	r14, Y+3	; 0x03
    2df2:	fc 80       	ldd	r15, Y+4	; 0x04
    2df4:	a0 91 ee 18 	lds	r26, 0x18EE	; 0x8018ee <xNumOfOverflows>
    2df8:	b8 81       	ld	r27, Y
    2dfa:	ba 17       	cp	r27, r26
    2dfc:	29 f0       	breq	.+10     	; 0x2e08 <xTaskCheckForTimeOut+0x5a>
    2dfe:	4c 15       	cp	r20, r12
    2e00:	5d 05       	cpc	r21, r13
    2e02:	6e 05       	cpc	r22, r14
    2e04:	7f 05       	cpc	r23, r15
    2e06:	e0 f4       	brcc	.+56     	; 0x2e40 <xTaskCheckForTimeOut+0x92>
    2e08:	4c 19       	sub	r20, r12
    2e0a:	5d 09       	sbc	r21, r13
    2e0c:	6e 09       	sbc	r22, r14
    2e0e:	7f 09       	sbc	r23, r15
    2e10:	40 17       	cp	r20, r16
    2e12:	51 07       	cpc	r21, r17
    2e14:	62 07       	cpc	r22, r18
    2e16:	73 07       	cpc	r23, r19
    2e18:	58 f4       	brcc	.+22     	; 0x2e30 <xTaskCheckForTimeOut+0x82>
    2e1a:	04 1b       	sub	r16, r20
    2e1c:	15 0b       	sbc	r17, r21
    2e1e:	26 0b       	sbc	r18, r22
    2e20:	37 0b       	sbc	r19, r23
    2e22:	00 83       	st	Z, r16
    2e24:	11 83       	std	Z+1, r17	; 0x01
    2e26:	22 83       	std	Z+2, r18	; 0x02
    2e28:	33 83       	std	Z+3, r19	; 0x03
    2e2a:	b0 df       	rcall	.-160    	; 0x2d8c <vTaskInternalSetTimeOutState>
    2e2c:	80 e0       	ldi	r24, 0x00	; 0
    2e2e:	09 c0       	rjmp	.+18     	; 0x2e42 <xTaskCheckForTimeOut+0x94>
    2e30:	10 82       	st	Z, r1
    2e32:	11 82       	std	Z+1, r1	; 0x01
    2e34:	12 82       	std	Z+2, r1	; 0x02
    2e36:	13 82       	std	Z+3, r1	; 0x03
    2e38:	81 e0       	ldi	r24, 0x01	; 1
    2e3a:	03 c0       	rjmp	.+6      	; 0x2e42 <xTaskCheckForTimeOut+0x94>
    2e3c:	80 e0       	ldi	r24, 0x00	; 0
    2e3e:	01 c0       	rjmp	.+2      	; 0x2e42 <xTaskCheckForTimeOut+0x94>
    2e40:	81 e0       	ldi	r24, 0x01	; 1
    2e42:	0f 90       	pop	r0
    2e44:	0f be       	out	0x3f, r0	; 63
    2e46:	df 91       	pop	r29
    2e48:	cf 91       	pop	r28
    2e4a:	1f 91       	pop	r17
    2e4c:	0f 91       	pop	r16
    2e4e:	ff 90       	pop	r15
    2e50:	ef 90       	pop	r14
    2e52:	df 90       	pop	r13
    2e54:	cf 90       	pop	r12
    2e56:	08 95       	ret

00002e58 <vTaskMissedYield>:
    2e58:	81 e0       	ldi	r24, 0x01	; 1
    2e5a:	80 93 ef 18 	sts	0x18EF, r24	; 0x8018ef <xYieldPending>
    2e5e:	08 95       	ret

00002e60 <xTaskGetCurrentTaskHandle>:
    2e60:	80 91 60 19 	lds	r24, 0x1960	; 0x801960 <pxCurrentTCB>
    2e64:	90 91 61 19 	lds	r25, 0x1961	; 0x801961 <pxCurrentTCB+0x1>
    2e68:	08 95       	ret

00002e6a <xTaskGetSchedulerState>:
    2e6a:	80 91 f1 18 	lds	r24, 0x18F1	; 0x8018f1 <xSchedulerRunning>
    2e6e:	88 23       	and	r24, r24
    2e70:	31 f0       	breq	.+12     	; 0x2e7e <xTaskGetSchedulerState+0x14>
    2e72:	80 91 e6 18 	lds	r24, 0x18E6	; 0x8018e6 <uxSchedulerSuspended>
    2e76:	88 23       	and	r24, r24
    2e78:	21 f0       	breq	.+8      	; 0x2e82 <xTaskGetSchedulerState+0x18>
    2e7a:	80 e0       	ldi	r24, 0x00	; 0
    2e7c:	08 95       	ret
    2e7e:	81 e0       	ldi	r24, 0x01	; 1
    2e80:	08 95       	ret
    2e82:	82 e0       	ldi	r24, 0x02	; 2
    2e84:	08 95       	ret

00002e86 <xTaskPriorityDisinherit>:
    2e86:	0f 93       	push	r16
    2e88:	1f 93       	push	r17
    2e8a:	cf 93       	push	r28
    2e8c:	df 93       	push	r29
    2e8e:	fc 01       	movw	r30, r24
    2e90:	89 2b       	or	r24, r25
    2e92:	79 f1       	breq	.+94     	; 0x2ef2 <xTaskPriorityDisinherit+0x6c>
    2e94:	80 a5       	ldd	r24, Z+40	; 0x28
    2e96:	81 50       	subi	r24, 0x01	; 1
    2e98:	80 a7       	std	Z+40, r24	; 0x28
    2e9a:	22 8d       	ldd	r18, Z+26	; 0x1a
    2e9c:	97 a1       	ldd	r25, Z+39	; 0x27
    2e9e:	29 17       	cp	r18, r25
    2ea0:	51 f1       	breq	.+84     	; 0x2ef6 <xTaskPriorityDisinherit+0x70>
    2ea2:	81 11       	cpse	r24, r1
    2ea4:	2a c0       	rjmp	.+84     	; 0x2efa <xTaskPriorityDisinherit+0x74>
    2ea6:	ef 01       	movw	r28, r30
    2ea8:	8f 01       	movw	r16, r30
    2eaa:	0e 5f       	subi	r16, 0xFE	; 254
    2eac:	1f 4f       	sbci	r17, 0xFF	; 255
    2eae:	c8 01       	movw	r24, r16
    2eb0:	0e 94 81 0a 	call	0x1502	; 0x1502 <uxListRemove>
    2eb4:	8f a1       	ldd	r24, Y+39	; 0x27
    2eb6:	8a 8f       	std	Y+26, r24	; 0x1a
    2eb8:	44 e0       	ldi	r20, 0x04	; 4
    2eba:	50 e0       	ldi	r21, 0x00	; 0
    2ebc:	60 e0       	ldi	r22, 0x00	; 0
    2ebe:	70 e0       	ldi	r23, 0x00	; 0
    2ec0:	48 1b       	sub	r20, r24
    2ec2:	51 09       	sbc	r21, r1
    2ec4:	61 09       	sbc	r22, r1
    2ec6:	71 09       	sbc	r23, r1
    2ec8:	4e 87       	std	Y+14, r20	; 0x0e
    2eca:	5f 87       	std	Y+15, r21	; 0x0f
    2ecc:	68 8b       	std	Y+16, r22	; 0x10
    2ece:	79 8b       	std	Y+17, r23	; 0x11
    2ed0:	90 91 f2 18 	lds	r25, 0x18F2	; 0x8018f2 <uxTopReadyPriority>
    2ed4:	98 17       	cp	r25, r24
    2ed6:	10 f4       	brcc	.+4      	; 0x2edc <xTaskPriorityDisinherit+0x56>
    2ed8:	80 93 f2 18 	sts	0x18F2, r24	; 0x8018f2 <uxTopReadyPriority>
    2edc:	2b e0       	ldi	r18, 0x0B	; 11
    2ede:	82 9f       	mul	r24, r18
    2ee0:	c0 01       	movw	r24, r0
    2ee2:	11 24       	eor	r1, r1
    2ee4:	b8 01       	movw	r22, r16
    2ee6:	8c 5c       	subi	r24, 0xCC	; 204
    2ee8:	96 4e       	sbci	r25, 0xE6	; 230
    2eea:	0e 94 23 0a 	call	0x1446	; 0x1446 <vListInsertEnd>
    2eee:	81 e0       	ldi	r24, 0x01	; 1
    2ef0:	05 c0       	rjmp	.+10     	; 0x2efc <xTaskPriorityDisinherit+0x76>
    2ef2:	80 e0       	ldi	r24, 0x00	; 0
    2ef4:	03 c0       	rjmp	.+6      	; 0x2efc <xTaskPriorityDisinherit+0x76>
    2ef6:	80 e0       	ldi	r24, 0x00	; 0
    2ef8:	01 c0       	rjmp	.+2      	; 0x2efc <xTaskPriorityDisinherit+0x76>
    2efa:	80 e0       	ldi	r24, 0x00	; 0
    2efc:	df 91       	pop	r29
    2efe:	cf 91       	pop	r28
    2f00:	1f 91       	pop	r17
    2f02:	0f 91       	pop	r16
    2f04:	08 95       	ret

00002f06 <uxTaskResetEventItemValue>:
    2f06:	cf 92       	push	r12
    2f08:	df 92       	push	r13
    2f0a:	ef 92       	push	r14
    2f0c:	ff 92       	push	r15
    2f0e:	e0 91 60 19 	lds	r30, 0x1960	; 0x801960 <pxCurrentTCB>
    2f12:	f0 91 61 19 	lds	r31, 0x1961	; 0x801961 <pxCurrentTCB+0x1>
    2f16:	66 85       	ldd	r22, Z+14	; 0x0e
    2f18:	77 85       	ldd	r23, Z+15	; 0x0f
    2f1a:	80 89       	ldd	r24, Z+16	; 0x10
    2f1c:	91 89       	ldd	r25, Z+17	; 0x11
    2f1e:	e0 91 60 19 	lds	r30, 0x1960	; 0x801960 <pxCurrentTCB>
    2f22:	f0 91 61 19 	lds	r31, 0x1961	; 0x801961 <pxCurrentTCB+0x1>
    2f26:	a0 91 60 19 	lds	r26, 0x1960	; 0x801960 <pxCurrentTCB>
    2f2a:	b0 91 61 19 	lds	r27, 0x1961	; 0x801961 <pxCurrentTCB+0x1>
    2f2e:	5a 96       	adiw	r26, 0x1a	; 26
    2f30:	2c 91       	ld	r18, X
    2f32:	c1 2c       	mov	r12, r1
    2f34:	d1 2c       	mov	r13, r1
    2f36:	76 01       	movw	r14, r12
    2f38:	68 94       	set
    2f3a:	c2 f8       	bld	r12, 2
    2f3c:	c2 1a       	sub	r12, r18
    2f3e:	d1 08       	sbc	r13, r1
    2f40:	e1 08       	sbc	r14, r1
    2f42:	f1 08       	sbc	r15, r1
    2f44:	c6 86       	std	Z+14, r12	; 0x0e
    2f46:	d7 86       	std	Z+15, r13	; 0x0f
    2f48:	e0 8a       	std	Z+16, r14	; 0x10
    2f4a:	f1 8a       	std	Z+17, r15	; 0x11
    2f4c:	ff 90       	pop	r15
    2f4e:	ef 90       	pop	r14
    2f50:	df 90       	pop	r13
    2f52:	cf 90       	pop	r12
    2f54:	08 95       	ret

00002f56 <xTaskNotifyWait>:
    2f56:	4f 92       	push	r4
    2f58:	5f 92       	push	r5
    2f5a:	6f 92       	push	r6
    2f5c:	7f 92       	push	r7
    2f5e:	8f 92       	push	r8
    2f60:	9f 92       	push	r9
    2f62:	af 92       	push	r10
    2f64:	bf 92       	push	r11
    2f66:	cf 92       	push	r12
    2f68:	df 92       	push	r13
    2f6a:	ef 92       	push	r14
    2f6c:	ff 92       	push	r15
    2f6e:	0f 93       	push	r16
    2f70:	1f 93       	push	r17
    2f72:	49 01       	movw	r8, r18
    2f74:	5a 01       	movw	r10, r20
    2f76:	0f b6       	in	r0, 0x3f	; 63
    2f78:	f8 94       	cli
    2f7a:	0f 92       	push	r0
    2f7c:	e0 91 60 19 	lds	r30, 0x1960	; 0x801960 <pxCurrentTCB>
    2f80:	f0 91 61 19 	lds	r31, 0x1961	; 0x801961 <pxCurrentTCB+0x1>
    2f84:	27 a5       	ldd	r18, Z+47	; 0x2f
    2f86:	22 30       	cpi	r18, 0x02	; 2
    2f88:	39 f1       	breq	.+78     	; 0x2fd8 <xTaskNotifyWait+0x82>
    2f8a:	e0 91 60 19 	lds	r30, 0x1960	; 0x801960 <pxCurrentTCB>
    2f8e:	f0 91 61 19 	lds	r31, 0x1961	; 0x801961 <pxCurrentTCB+0x1>
    2f92:	43 a4       	ldd	r4, Z+43	; 0x2b
    2f94:	54 a4       	ldd	r5, Z+44	; 0x2c
    2f96:	65 a4       	ldd	r6, Z+45	; 0x2d
    2f98:	76 a4       	ldd	r7, Z+46	; 0x2e
    2f9a:	dc 01       	movw	r26, r24
    2f9c:	cb 01       	movw	r24, r22
    2f9e:	80 95       	com	r24
    2fa0:	90 95       	com	r25
    2fa2:	a0 95       	com	r26
    2fa4:	b0 95       	com	r27
    2fa6:	84 21       	and	r24, r4
    2fa8:	95 21       	and	r25, r5
    2faa:	a6 21       	and	r26, r6
    2fac:	b7 21       	and	r27, r7
    2fae:	83 a7       	std	Z+43, r24	; 0x2b
    2fb0:	94 a7       	std	Z+44, r25	; 0x2c
    2fb2:	a5 a7       	std	Z+45, r26	; 0x2d
    2fb4:	b6 a7       	std	Z+46, r27	; 0x2e
    2fb6:	e0 91 60 19 	lds	r30, 0x1960	; 0x801960 <pxCurrentTCB>
    2fba:	f0 91 61 19 	lds	r31, 0x1961	; 0x801961 <pxCurrentTCB+0x1>
    2fbe:	81 e0       	ldi	r24, 0x01	; 1
    2fc0:	87 a7       	std	Z+47, r24	; 0x2f
    2fc2:	c1 14       	cp	r12, r1
    2fc4:	d1 04       	cpc	r13, r1
    2fc6:	e1 04       	cpc	r14, r1
    2fc8:	f1 04       	cpc	r15, r1
    2fca:	31 f0       	breq	.+12     	; 0x2fd8 <xTaskNotifyWait+0x82>
    2fcc:	41 e0       	ldi	r20, 0x01	; 1
    2fce:	c7 01       	movw	r24, r14
    2fd0:	b6 01       	movw	r22, r12
    2fd2:	27 da       	rcall	.-2994   	; 0x2422 <prvAddCurrentTaskToDelayedList>
    2fd4:	0e 94 56 0b 	call	0x16ac	; 0x16ac <vPortYield>
    2fd8:	0f 90       	pop	r0
    2fda:	0f be       	out	0x3f, r0	; 63
    2fdc:	0f b6       	in	r0, 0x3f	; 63
    2fde:	f8 94       	cli
    2fe0:	0f 92       	push	r0
    2fe2:	01 15       	cp	r16, r1
    2fe4:	11 05       	cpc	r17, r1
    2fe6:	69 f0       	breq	.+26     	; 0x3002 <xTaskNotifyWait+0xac>
    2fe8:	e0 91 60 19 	lds	r30, 0x1960	; 0x801960 <pxCurrentTCB>
    2fec:	f0 91 61 19 	lds	r31, 0x1961	; 0x801961 <pxCurrentTCB+0x1>
    2ff0:	83 a5       	ldd	r24, Z+43	; 0x2b
    2ff2:	94 a5       	ldd	r25, Z+44	; 0x2c
    2ff4:	a5 a5       	ldd	r26, Z+45	; 0x2d
    2ff6:	b6 a5       	ldd	r27, Z+46	; 0x2e
    2ff8:	f8 01       	movw	r30, r16
    2ffa:	80 83       	st	Z, r24
    2ffc:	91 83       	std	Z+1, r25	; 0x01
    2ffe:	a2 83       	std	Z+2, r26	; 0x02
    3000:	b3 83       	std	Z+3, r27	; 0x03
    3002:	e0 91 60 19 	lds	r30, 0x1960	; 0x801960 <pxCurrentTCB>
    3006:	f0 91 61 19 	lds	r31, 0x1961	; 0x801961 <pxCurrentTCB+0x1>
    300a:	87 a5       	ldd	r24, Z+47	; 0x2f
    300c:	82 30       	cpi	r24, 0x02	; 2
    300e:	b1 f4       	brne	.+44     	; 0x303c <xTaskNotifyWait+0xe6>
    3010:	e0 91 60 19 	lds	r30, 0x1960	; 0x801960 <pxCurrentTCB>
    3014:	f0 91 61 19 	lds	r31, 0x1961	; 0x801961 <pxCurrentTCB+0x1>
    3018:	83 a5       	ldd	r24, Z+43	; 0x2b
    301a:	94 a5       	ldd	r25, Z+44	; 0x2c
    301c:	a5 a5       	ldd	r26, Z+45	; 0x2d
    301e:	b6 a5       	ldd	r27, Z+46	; 0x2e
    3020:	80 94       	com	r8
    3022:	90 94       	com	r9
    3024:	a0 94       	com	r10
    3026:	b0 94       	com	r11
    3028:	88 22       	and	r8, r24
    302a:	99 22       	and	r9, r25
    302c:	aa 22       	and	r10, r26
    302e:	bb 22       	and	r11, r27
    3030:	83 a6       	std	Z+43, r8	; 0x2b
    3032:	94 a6       	std	Z+44, r9	; 0x2c
    3034:	a5 a6       	std	Z+45, r10	; 0x2d
    3036:	b6 a6       	std	Z+46, r11	; 0x2e
    3038:	81 e0       	ldi	r24, 0x01	; 1
    303a:	01 c0       	rjmp	.+2      	; 0x303e <xTaskNotifyWait+0xe8>
    303c:	80 e0       	ldi	r24, 0x00	; 0
    303e:	e0 91 60 19 	lds	r30, 0x1960	; 0x801960 <pxCurrentTCB>
    3042:	f0 91 61 19 	lds	r31, 0x1961	; 0x801961 <pxCurrentTCB+0x1>
    3046:	17 a6       	std	Z+47, r1	; 0x2f
    3048:	0f 90       	pop	r0
    304a:	0f be       	out	0x3f, r0	; 63
    304c:	1f 91       	pop	r17
    304e:	0f 91       	pop	r16
    3050:	ff 90       	pop	r15
    3052:	ef 90       	pop	r14
    3054:	df 90       	pop	r13
    3056:	cf 90       	pop	r12
    3058:	bf 90       	pop	r11
    305a:	af 90       	pop	r10
    305c:	9f 90       	pop	r9
    305e:	8f 90       	pop	r8
    3060:	7f 90       	pop	r7
    3062:	6f 90       	pop	r6
    3064:	5f 90       	pop	r5
    3066:	4f 90       	pop	r4
    3068:	08 95       	ret

0000306a <xTaskGenericNotify>:
    306a:	0f 93       	push	r16
    306c:	1f 93       	push	r17
    306e:	cf 93       	push	r28
    3070:	df 93       	push	r29
    3072:	fc 01       	movw	r30, r24
    3074:	0f b6       	in	r0, 0x3f	; 63
    3076:	f8 94       	cli
    3078:	0f 92       	push	r0
    307a:	01 15       	cp	r16, r1
    307c:	11 05       	cpc	r17, r1
    307e:	49 f0       	breq	.+18     	; 0x3092 <xTaskGenericNotify+0x28>
    3080:	83 a5       	ldd	r24, Z+43	; 0x2b
    3082:	94 a5       	ldd	r25, Z+44	; 0x2c
    3084:	a5 a5       	ldd	r26, Z+45	; 0x2d
    3086:	b6 a5       	ldd	r27, Z+46	; 0x2e
    3088:	e8 01       	movw	r28, r16
    308a:	88 83       	st	Y, r24
    308c:	99 83       	std	Y+1, r25	; 0x01
    308e:	aa 83       	std	Y+2, r26	; 0x02
    3090:	bb 83       	std	Y+3, r27	; 0x03
    3092:	87 a5       	ldd	r24, Z+47	; 0x2f
    3094:	92 e0       	ldi	r25, 0x02	; 2
    3096:	97 a7       	std	Z+47, r25	; 0x2f
    3098:	22 30       	cpi	r18, 0x02	; 2
    309a:	b1 f0       	breq	.+44     	; 0x30c8 <xTaskGenericNotify+0x5e>
    309c:	18 f4       	brcc	.+6      	; 0x30a4 <xTaskGenericNotify+0x3a>
    309e:	21 30       	cpi	r18, 0x01	; 1
    30a0:	31 f0       	breq	.+12     	; 0x30ae <xTaskGenericNotify+0x44>
    30a2:	2a c0       	rjmp	.+84     	; 0x30f8 <xTaskGenericNotify+0x8e>
    30a4:	23 30       	cpi	r18, 0x03	; 3
    30a6:	e9 f0       	breq	.+58     	; 0x30e2 <xTaskGenericNotify+0x78>
    30a8:	24 30       	cpi	r18, 0x04	; 4
    30aa:	01 f1       	breq	.+64     	; 0x30ec <xTaskGenericNotify+0x82>
    30ac:	25 c0       	rjmp	.+74     	; 0x30f8 <xTaskGenericNotify+0x8e>
    30ae:	03 a5       	ldd	r16, Z+43	; 0x2b
    30b0:	14 a5       	ldd	r17, Z+44	; 0x2c
    30b2:	25 a5       	ldd	r18, Z+45	; 0x2d
    30b4:	36 a5       	ldd	r19, Z+46	; 0x2e
    30b6:	40 2b       	or	r20, r16
    30b8:	51 2b       	or	r21, r17
    30ba:	62 2b       	or	r22, r18
    30bc:	73 2b       	or	r23, r19
    30be:	43 a7       	std	Z+43, r20	; 0x2b
    30c0:	54 a7       	std	Z+44, r21	; 0x2c
    30c2:	65 a7       	std	Z+45, r22	; 0x2d
    30c4:	76 a7       	std	Z+46, r23	; 0x2e
    30c6:	18 c0       	rjmp	.+48     	; 0x30f8 <xTaskGenericNotify+0x8e>
    30c8:	43 a5       	ldd	r20, Z+43	; 0x2b
    30ca:	54 a5       	ldd	r21, Z+44	; 0x2c
    30cc:	65 a5       	ldd	r22, Z+45	; 0x2d
    30ce:	76 a5       	ldd	r23, Z+46	; 0x2e
    30d0:	4f 5f       	subi	r20, 0xFF	; 255
    30d2:	5f 4f       	sbci	r21, 0xFF	; 255
    30d4:	6f 4f       	sbci	r22, 0xFF	; 255
    30d6:	7f 4f       	sbci	r23, 0xFF	; 255
    30d8:	43 a7       	std	Z+43, r20	; 0x2b
    30da:	54 a7       	std	Z+44, r21	; 0x2c
    30dc:	65 a7       	std	Z+45, r22	; 0x2d
    30de:	76 a7       	std	Z+46, r23	; 0x2e
    30e0:	0b c0       	rjmp	.+22     	; 0x30f8 <xTaskGenericNotify+0x8e>
    30e2:	43 a7       	std	Z+43, r20	; 0x2b
    30e4:	54 a7       	std	Z+44, r21	; 0x2c
    30e6:	65 a7       	std	Z+45, r22	; 0x2d
    30e8:	76 a7       	std	Z+46, r23	; 0x2e
    30ea:	06 c0       	rjmp	.+12     	; 0x30f8 <xTaskGenericNotify+0x8e>
    30ec:	82 30       	cpi	r24, 0x02	; 2
    30ee:	49 f1       	breq	.+82     	; 0x3142 <xTaskGenericNotify+0xd8>
    30f0:	43 a7       	std	Z+43, r20	; 0x2b
    30f2:	54 a7       	std	Z+44, r21	; 0x2c
    30f4:	65 a7       	std	Z+45, r22	; 0x2d
    30f6:	76 a7       	std	Z+46, r23	; 0x2e
    30f8:	81 30       	cpi	r24, 0x01	; 1
    30fa:	29 f5       	brne	.+74     	; 0x3146 <xTaskGenericNotify+0xdc>
    30fc:	ef 01       	movw	r28, r30
    30fe:	8f 01       	movw	r16, r30
    3100:	0e 5f       	subi	r16, 0xFE	; 254
    3102:	1f 4f       	sbci	r17, 0xFF	; 255
    3104:	c8 01       	movw	r24, r16
    3106:	0e 94 81 0a 	call	0x1502	; 0x1502 <uxListRemove>
    310a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    310c:	90 91 f2 18 	lds	r25, 0x18F2	; 0x8018f2 <uxTopReadyPriority>
    3110:	98 17       	cp	r25, r24
    3112:	10 f4       	brcc	.+4      	; 0x3118 <xTaskGenericNotify+0xae>
    3114:	80 93 f2 18 	sts	0x18F2, r24	; 0x8018f2 <uxTopReadyPriority>
    3118:	2b e0       	ldi	r18, 0x0B	; 11
    311a:	82 9f       	mul	r24, r18
    311c:	c0 01       	movw	r24, r0
    311e:	11 24       	eor	r1, r1
    3120:	b8 01       	movw	r22, r16
    3122:	8c 5c       	subi	r24, 0xCC	; 204
    3124:	96 4e       	sbci	r25, 0xE6	; 230
    3126:	0e 94 23 0a 	call	0x1446	; 0x1446 <vListInsertEnd>
    312a:	e0 91 60 19 	lds	r30, 0x1960	; 0x801960 <pxCurrentTCB>
    312e:	f0 91 61 19 	lds	r31, 0x1961	; 0x801961 <pxCurrentTCB+0x1>
    3132:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3134:	82 8d       	ldd	r24, Z+26	; 0x1a
    3136:	89 17       	cp	r24, r25
    3138:	40 f4       	brcc	.+16     	; 0x314a <xTaskGenericNotify+0xe0>
    313a:	0e 94 56 0b 	call	0x16ac	; 0x16ac <vPortYield>
    313e:	81 e0       	ldi	r24, 0x01	; 1
    3140:	05 c0       	rjmp	.+10     	; 0x314c <xTaskGenericNotify+0xe2>
    3142:	80 e0       	ldi	r24, 0x00	; 0
    3144:	03 c0       	rjmp	.+6      	; 0x314c <xTaskGenericNotify+0xe2>
    3146:	81 e0       	ldi	r24, 0x01	; 1
    3148:	01 c0       	rjmp	.+2      	; 0x314c <xTaskGenericNotify+0xe2>
    314a:	81 e0       	ldi	r24, 0x01	; 1
    314c:	0f 90       	pop	r0
    314e:	0f be       	out	0x3f, r0	; 63
    3150:	df 91       	pop	r29
    3152:	cf 91       	pop	r28
    3154:	1f 91       	pop	r17
    3156:	0f 91       	pop	r16
    3158:	08 95       	ret

0000315a <xTaskGenericNotifyFromISR>:
    315a:	ef 92       	push	r14
    315c:	ff 92       	push	r15
    315e:	0f 93       	push	r16
    3160:	1f 93       	push	r17
    3162:	cf 93       	push	r28
    3164:	df 93       	push	r29
    3166:	fc 01       	movw	r30, r24
    3168:	01 15       	cp	r16, r1
    316a:	11 05       	cpc	r17, r1
    316c:	49 f0       	breq	.+18     	; 0x3180 <xTaskGenericNotifyFromISR+0x26>
    316e:	83 a5       	ldd	r24, Z+43	; 0x2b
    3170:	94 a5       	ldd	r25, Z+44	; 0x2c
    3172:	a5 a5       	ldd	r26, Z+45	; 0x2d
    3174:	b6 a5       	ldd	r27, Z+46	; 0x2e
    3176:	e8 01       	movw	r28, r16
    3178:	88 83       	st	Y, r24
    317a:	99 83       	std	Y+1, r25	; 0x01
    317c:	aa 83       	std	Y+2, r26	; 0x02
    317e:	bb 83       	std	Y+3, r27	; 0x03
    3180:	87 a5       	ldd	r24, Z+47	; 0x2f
    3182:	92 e0       	ldi	r25, 0x02	; 2
    3184:	97 a7       	std	Z+47, r25	; 0x2f
    3186:	22 30       	cpi	r18, 0x02	; 2
    3188:	b1 f0       	breq	.+44     	; 0x31b6 <xTaskGenericNotifyFromISR+0x5c>
    318a:	18 f4       	brcc	.+6      	; 0x3192 <xTaskGenericNotifyFromISR+0x38>
    318c:	21 30       	cpi	r18, 0x01	; 1
    318e:	31 f0       	breq	.+12     	; 0x319c <xTaskGenericNotifyFromISR+0x42>
    3190:	2a c0       	rjmp	.+84     	; 0x31e6 <xTaskGenericNotifyFromISR+0x8c>
    3192:	23 30       	cpi	r18, 0x03	; 3
    3194:	e9 f0       	breq	.+58     	; 0x31d0 <xTaskGenericNotifyFromISR+0x76>
    3196:	24 30       	cpi	r18, 0x04	; 4
    3198:	01 f1       	breq	.+64     	; 0x31da <xTaskGenericNotifyFromISR+0x80>
    319a:	25 c0       	rjmp	.+74     	; 0x31e6 <xTaskGenericNotifyFromISR+0x8c>
    319c:	03 a5       	ldd	r16, Z+43	; 0x2b
    319e:	14 a5       	ldd	r17, Z+44	; 0x2c
    31a0:	25 a5       	ldd	r18, Z+45	; 0x2d
    31a2:	36 a5       	ldd	r19, Z+46	; 0x2e
    31a4:	40 2b       	or	r20, r16
    31a6:	51 2b       	or	r21, r17
    31a8:	62 2b       	or	r22, r18
    31aa:	73 2b       	or	r23, r19
    31ac:	43 a7       	std	Z+43, r20	; 0x2b
    31ae:	54 a7       	std	Z+44, r21	; 0x2c
    31b0:	65 a7       	std	Z+45, r22	; 0x2d
    31b2:	76 a7       	std	Z+46, r23	; 0x2e
    31b4:	18 c0       	rjmp	.+48     	; 0x31e6 <xTaskGenericNotifyFromISR+0x8c>
    31b6:	43 a5       	ldd	r20, Z+43	; 0x2b
    31b8:	54 a5       	ldd	r21, Z+44	; 0x2c
    31ba:	65 a5       	ldd	r22, Z+45	; 0x2d
    31bc:	76 a5       	ldd	r23, Z+46	; 0x2e
    31be:	4f 5f       	subi	r20, 0xFF	; 255
    31c0:	5f 4f       	sbci	r21, 0xFF	; 255
    31c2:	6f 4f       	sbci	r22, 0xFF	; 255
    31c4:	7f 4f       	sbci	r23, 0xFF	; 255
    31c6:	43 a7       	std	Z+43, r20	; 0x2b
    31c8:	54 a7       	std	Z+44, r21	; 0x2c
    31ca:	65 a7       	std	Z+45, r22	; 0x2d
    31cc:	76 a7       	std	Z+46, r23	; 0x2e
    31ce:	0b c0       	rjmp	.+22     	; 0x31e6 <xTaskGenericNotifyFromISR+0x8c>
    31d0:	43 a7       	std	Z+43, r20	; 0x2b
    31d2:	54 a7       	std	Z+44, r21	; 0x2c
    31d4:	65 a7       	std	Z+45, r22	; 0x2d
    31d6:	76 a7       	std	Z+46, r23	; 0x2e
    31d8:	06 c0       	rjmp	.+12     	; 0x31e6 <xTaskGenericNotifyFromISR+0x8c>
    31da:	82 30       	cpi	r24, 0x02	; 2
    31dc:	d9 f1       	breq	.+118    	; 0x3254 <xTaskGenericNotifyFromISR+0xfa>
    31de:	43 a7       	std	Z+43, r20	; 0x2b
    31e0:	54 a7       	std	Z+44, r21	; 0x2c
    31e2:	65 a7       	std	Z+45, r22	; 0x2d
    31e4:	76 a7       	std	Z+46, r23	; 0x2e
    31e6:	81 30       	cpi	r24, 0x01	; 1
    31e8:	b9 f5       	brne	.+110    	; 0x3258 <xTaskGenericNotifyFromISR+0xfe>
    31ea:	ef 01       	movw	r28, r30
    31ec:	80 91 e6 18 	lds	r24, 0x18E6	; 0x8018e6 <uxSchedulerSuspended>
    31f0:	81 11       	cpse	r24, r1
    31f2:	17 c0       	rjmp	.+46     	; 0x3222 <xTaskGenericNotifyFromISR+0xc8>
    31f4:	8f 01       	movw	r16, r30
    31f6:	0e 5f       	subi	r16, 0xFE	; 254
    31f8:	1f 4f       	sbci	r17, 0xFF	; 255
    31fa:	c8 01       	movw	r24, r16
    31fc:	0e 94 81 0a 	call	0x1502	; 0x1502 <uxListRemove>
    3200:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3202:	90 91 f2 18 	lds	r25, 0x18F2	; 0x8018f2 <uxTopReadyPriority>
    3206:	98 17       	cp	r25, r24
    3208:	10 f4       	brcc	.+4      	; 0x320e <xTaskGenericNotifyFromISR+0xb4>
    320a:	80 93 f2 18 	sts	0x18F2, r24	; 0x8018f2 <uxTopReadyPriority>
    320e:	eb e0       	ldi	r30, 0x0B	; 11
    3210:	8e 9f       	mul	r24, r30
    3212:	c0 01       	movw	r24, r0
    3214:	11 24       	eor	r1, r1
    3216:	b8 01       	movw	r22, r16
    3218:	8c 5c       	subi	r24, 0xCC	; 204
    321a:	96 4e       	sbci	r25, 0xE6	; 230
    321c:	0e 94 23 0a 	call	0x1446	; 0x1446 <vListInsertEnd>
    3220:	07 c0       	rjmp	.+14     	; 0x3230 <xTaskGenericNotifyFromISR+0xd6>
    3222:	bf 01       	movw	r22, r30
    3224:	62 5f       	subi	r22, 0xF2	; 242
    3226:	7f 4f       	sbci	r23, 0xFF	; 255
    3228:	8f e0       	ldi	r24, 0x0F	; 15
    322a:	99 e1       	ldi	r25, 0x19	; 25
    322c:	0e 94 23 0a 	call	0x1446	; 0x1446 <vListInsertEnd>
    3230:	e0 91 60 19 	lds	r30, 0x1960	; 0x801960 <pxCurrentTCB>
    3234:	f0 91 61 19 	lds	r31, 0x1961	; 0x801961 <pxCurrentTCB+0x1>
    3238:	9a 8d       	ldd	r25, Y+26	; 0x1a
    323a:	82 8d       	ldd	r24, Z+26	; 0x1a
    323c:	89 17       	cp	r24, r25
    323e:	70 f4       	brcc	.+28     	; 0x325c <xTaskGenericNotifyFromISR+0x102>
    3240:	e1 14       	cp	r14, r1
    3242:	f1 04       	cpc	r15, r1
    3244:	19 f0       	breq	.+6      	; 0x324c <xTaskGenericNotifyFromISR+0xf2>
    3246:	81 e0       	ldi	r24, 0x01	; 1
    3248:	e7 01       	movw	r28, r14
    324a:	88 83       	st	Y, r24
    324c:	81 e0       	ldi	r24, 0x01	; 1
    324e:	80 93 ef 18 	sts	0x18EF, r24	; 0x8018ef <xYieldPending>
    3252:	05 c0       	rjmp	.+10     	; 0x325e <xTaskGenericNotifyFromISR+0x104>
    3254:	80 e0       	ldi	r24, 0x00	; 0
    3256:	03 c0       	rjmp	.+6      	; 0x325e <xTaskGenericNotifyFromISR+0x104>
    3258:	81 e0       	ldi	r24, 0x01	; 1
    325a:	01 c0       	rjmp	.+2      	; 0x325e <xTaskGenericNotifyFromISR+0x104>
    325c:	81 e0       	ldi	r24, 0x01	; 1
    325e:	df 91       	pop	r29
    3260:	cf 91       	pop	r28
    3262:	1f 91       	pop	r17
    3264:	0f 91       	pop	r16
    3266:	ff 90       	pop	r15
    3268:	ef 90       	pop	r14
    326a:	08 95       	ret

0000326c <xTaskNotifyStateClear>:
    TCB_t *pxTCB;
    BaseType_t xReturn;

        /* If null is passed in here then it is the calling task that is having
        its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    326c:	00 97       	sbiw	r24, 0x00	; 0
    326e:	21 f4       	brne	.+8      	; 0x3278 <xTaskNotifyStateClear+0xc>
    3270:	80 91 60 19 	lds	r24, 0x1960	; 0x801960 <pxCurrentTCB>
    3274:	90 91 61 19 	lds	r25, 0x1961	; 0x801961 <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    3278:	0f b6       	in	r0, 0x3f	; 63
    327a:	f8 94       	cli
    327c:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
    327e:	fc 01       	movw	r30, r24
    3280:	27 a5       	ldd	r18, Z+47	; 0x2f
    3282:	22 30       	cpi	r18, 0x02	; 2
    3284:	19 f4       	brne	.+6      	; 0x328c <xTaskNotifyStateClear+0x20>
            {
                pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    3286:	17 a6       	std	Z+47, r1	; 0x2f
                xReturn = pdPASS;
    3288:	81 e0       	ldi	r24, 0x01	; 1
    328a:	01 c0       	rjmp	.+2      	; 0x328e <xTaskNotifyStateClear+0x22>
            }
            else
            {
                xReturn = pdFAIL;
    328c:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    328e:	0f 90       	pop	r0
    3290:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    3292:	08 95       	ret

00003294 <prvInsertTimerInActiveList>:
    3294:	cf 92       	push	r12
    3296:	df 92       	push	r13
    3298:	ef 92       	push	r14
    329a:	ff 92       	push	r15
    329c:	0f 93       	push	r16
    329e:	1f 93       	push	r17
    32a0:	fc 01       	movw	r30, r24
    32a2:	42 83       	std	Z+2, r20	; 0x02
    32a4:	53 83       	std	Z+3, r21	; 0x03
    32a6:	64 83       	std	Z+4, r22	; 0x04
    32a8:	75 83       	std	Z+5, r23	; 0x05
    32aa:	93 87       	std	Z+11, r25	; 0x0b
    32ac:	82 87       	std	Z+10, r24	; 0x0a
    32ae:	04 17       	cp	r16, r20
    32b0:	15 07       	cpc	r17, r21
    32b2:	26 07       	cpc	r18, r22
    32b4:	37 07       	cpc	r19, r23
    32b6:	c0 f0       	brcs	.+48     	; 0x32e8 <prvInsertTimerInActiveList+0x54>
    32b8:	0c 19       	sub	r16, r12
    32ba:	1d 09       	sbc	r17, r13
    32bc:	2e 09       	sbc	r18, r14
    32be:	3f 09       	sbc	r19, r15
    32c0:	86 85       	ldd	r24, Z+14	; 0x0e
    32c2:	97 85       	ldd	r25, Z+15	; 0x0f
    32c4:	a0 89       	ldd	r26, Z+16	; 0x10
    32c6:	b1 89       	ldd	r27, Z+17	; 0x11
    32c8:	08 17       	cp	r16, r24
    32ca:	19 07       	cpc	r17, r25
    32cc:	2a 07       	cpc	r18, r26
    32ce:	3b 07       	cpc	r19, r27
    32d0:	00 f5       	brcc	.+64     	; 0x3312 <prvInsertTimerInActiveList+0x7e>
    32d2:	bf 01       	movw	r22, r30
    32d4:	6e 5f       	subi	r22, 0xFE	; 254
    32d6:	7f 4f       	sbci	r23, 0xFF	; 255
    32d8:	80 91 6a 19 	lds	r24, 0x196A	; 0x80196a <pxOverflowTimerList>
    32dc:	90 91 6b 19 	lds	r25, 0x196B	; 0x80196b <pxOverflowTimerList+0x1>
    32e0:	0e 94 44 0a 	call	0x1488	; 0x1488 <vListInsert>
    32e4:	80 e0       	ldi	r24, 0x00	; 0
    32e6:	18 c0       	rjmp	.+48     	; 0x3318 <prvInsertTimerInActiveList+0x84>
    32e8:	0c 15       	cp	r16, r12
    32ea:	1d 05       	cpc	r17, r13
    32ec:	2e 05       	cpc	r18, r14
    32ee:	3f 05       	cpc	r19, r15
    32f0:	28 f4       	brcc	.+10     	; 0x32fc <prvInsertTimerInActiveList+0x68>
    32f2:	4c 15       	cp	r20, r12
    32f4:	5d 05       	cpc	r21, r13
    32f6:	6e 05       	cpc	r22, r14
    32f8:	7f 05       	cpc	r23, r15
    32fa:	68 f4       	brcc	.+26     	; 0x3316 <prvInsertTimerInActiveList+0x82>
    32fc:	bf 01       	movw	r22, r30
    32fe:	6e 5f       	subi	r22, 0xFE	; 254
    3300:	7f 4f       	sbci	r23, 0xFF	; 255
    3302:	80 91 6c 19 	lds	r24, 0x196C	; 0x80196c <pxCurrentTimerList>
    3306:	90 91 6d 19 	lds	r25, 0x196D	; 0x80196d <pxCurrentTimerList+0x1>
    330a:	0e 94 44 0a 	call	0x1488	; 0x1488 <vListInsert>
    330e:	80 e0       	ldi	r24, 0x00	; 0
    3310:	03 c0       	rjmp	.+6      	; 0x3318 <prvInsertTimerInActiveList+0x84>
    3312:	81 e0       	ldi	r24, 0x01	; 1
    3314:	01 c0       	rjmp	.+2      	; 0x3318 <prvInsertTimerInActiveList+0x84>
    3316:	81 e0       	ldi	r24, 0x01	; 1
    3318:	1f 91       	pop	r17
    331a:	0f 91       	pop	r16
    331c:	ff 90       	pop	r15
    331e:	ef 90       	pop	r14
    3320:	df 90       	pop	r13
    3322:	cf 90       	pop	r12
    3324:	08 95       	ret

00003326 <prvCheckForValidListAndQueue>:
    3326:	0f b6       	in	r0, 0x3f	; 63
    3328:	f8 94       	cli
    332a:	0f 92       	push	r0
    332c:	80 91 68 19 	lds	r24, 0x1968	; 0x801968 <xTimerQueue>
    3330:	90 91 69 19 	lds	r25, 0x1969	; 0x801969 <xTimerQueue+0x1>
    3334:	89 2b       	or	r24, r25
    3336:	e9 f4       	brne	.+58     	; 0x3372 <prvCheckForValidListAndQueue+0x4c>
    3338:	89 e7       	ldi	r24, 0x79	; 121
    333a:	99 e1       	ldi	r25, 0x19	; 25
    333c:	0e 94 0e 0a 	call	0x141c	; 0x141c <vListInitialise>
    3340:	8e e6       	ldi	r24, 0x6E	; 110
    3342:	99 e1       	ldi	r25, 0x19	; 25
    3344:	0e 94 0e 0a 	call	0x141c	; 0x141c <vListInitialise>
    3348:	89 e7       	ldi	r24, 0x79	; 121
    334a:	99 e1       	ldi	r25, 0x19	; 25
    334c:	90 93 6d 19 	sts	0x196D, r25	; 0x80196d <pxCurrentTimerList+0x1>
    3350:	80 93 6c 19 	sts	0x196C, r24	; 0x80196c <pxCurrentTimerList>
    3354:	8e e6       	ldi	r24, 0x6E	; 110
    3356:	99 e1       	ldi	r25, 0x19	; 25
    3358:	90 93 6b 19 	sts	0x196B, r25	; 0x80196b <pxOverflowTimerList+0x1>
    335c:	80 93 6a 19 	sts	0x196A, r24	; 0x80196a <pxOverflowTimerList>
    3360:	40 e0       	ldi	r20, 0x00	; 0
    3362:	67 e0       	ldi	r22, 0x07	; 7
    3364:	8a e0       	ldi	r24, 0x0A	; 10
    3366:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <xQueueGenericCreate>
    336a:	90 93 69 19 	sts	0x1969, r25	; 0x801969 <xTimerQueue+0x1>
    336e:	80 93 68 19 	sts	0x1968, r24	; 0x801968 <xTimerQueue>
    3372:	0f 90       	pop	r0
    3374:	0f be       	out	0x3f, r0	; 63
    3376:	08 95       	ret

00003378 <xTimerCreateTimerTask>:
    3378:	ef 92       	push	r14
    337a:	ff 92       	push	r15
    337c:	0f 93       	push	r16
    337e:	d3 df       	rcall	.-90     	; 0x3326 <prvCheckForValidListAndQueue>
    3380:	80 91 68 19 	lds	r24, 0x1968	; 0x801968 <xTimerQueue>
    3384:	90 91 69 19 	lds	r25, 0x1969	; 0x801969 <xTimerQueue+0x1>
    3388:	89 2b       	or	r24, r25
    338a:	89 f0       	breq	.+34     	; 0x33ae <xTimerCreateTimerTask+0x36>
    338c:	0f 2e       	mov	r0, r31
    338e:	f6 e6       	ldi	r31, 0x66	; 102
    3390:	ef 2e       	mov	r14, r31
    3392:	f9 e1       	ldi	r31, 0x19	; 25
    3394:	ff 2e       	mov	r15, r31
    3396:	f0 2d       	mov	r31, r0
    3398:	03 e0       	ldi	r16, 0x03	; 3
    339a:	20 e0       	ldi	r18, 0x00	; 0
    339c:	30 e0       	ldi	r19, 0x00	; 0
    339e:	45 e5       	ldi	r20, 0x55	; 85
    33a0:	50 e0       	ldi	r21, 0x00	; 0
    33a2:	65 e9       	ldi	r22, 0x95	; 149
    33a4:	75 e0       	ldi	r23, 0x05	; 5
    33a6:	87 e0       	ldi	r24, 0x07	; 7
    33a8:	91 e0       	ldi	r25, 0x01	; 1
    33aa:	b1 d8       	rcall	.-3742   	; 0x250e <xTaskCreate>
    33ac:	01 c0       	rjmp	.+2      	; 0x33b0 <xTimerCreateTimerTask+0x38>
    33ae:	80 e0       	ldi	r24, 0x00	; 0
    33b0:	0f 91       	pop	r16
    33b2:	ff 90       	pop	r15
    33b4:	ef 90       	pop	r14
    33b6:	08 95       	ret

000033b8 <xTimerGenericCommand>:
    }
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    33b8:	8f 92       	push	r8
    33ba:	9f 92       	push	r9
    33bc:	af 92       	push	r10
    33be:	bf 92       	push	r11
    33c0:	cf 92       	push	r12
    33c2:	df 92       	push	r13
    33c4:	ef 92       	push	r14
    33c6:	ff 92       	push	r15
    33c8:	0f 93       	push	r16
    33ca:	1f 93       	push	r17
    33cc:	cf 93       	push	r28
    33ce:	df 93       	push	r29
    33d0:	cd b7       	in	r28, 0x3d	; 61
    33d2:	de b7       	in	r29, 0x3e	; 62
    33d4:	27 97       	sbiw	r28, 0x07	; 7
    33d6:	0f b6       	in	r0, 0x3f	; 63
    33d8:	f8 94       	cli
    33da:	de bf       	out	0x3e, r29	; 62
    33dc:	0f be       	out	0x3f, r0	; 63
    33de:	cd bf       	out	0x3d, r28	; 61

    configASSERT( xTimer );

    /* Send a message to the timer service task to perform a particular action
    on a particular timer definition. */
    if( xTimerQueue != NULL )
    33e0:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <xTimerQueue>
    33e4:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <xTimerQueue+0x1>
    33e8:	30 97       	sbiw	r30, 0x00	; 0
    33ea:	81 f1       	breq	.+96     	; 0x344c <xTimerGenericCommand+0x94>
    {
        /* Send a command to the timer service task to start the xTimer timer. */
        xMessage.xMessageID = xCommandID;
    33ec:	69 83       	std	Y+1, r22	; 0x01
        xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    33ee:	2a 83       	std	Y+2, r18	; 0x02
    33f0:	3b 83       	std	Y+3, r19	; 0x03
    33f2:	4c 83       	std	Y+4, r20	; 0x04
    33f4:	5d 83       	std	Y+5, r21	; 0x05
        xMessage.u.xTimerParameters.pxTimer = xTimer;
    33f6:	9f 83       	std	Y+7, r25	; 0x07
    33f8:	8e 83       	std	Y+6, r24	; 0x06

        if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    33fa:	66 30       	cpi	r22, 0x06	; 6
    33fc:	f4 f4       	brge	.+60     	; 0x343a <xTimerGenericCommand+0x82>
        {
            if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    33fe:	35 dd       	rcall	.-1430   	; 0x2e6a <xTaskGetSchedulerState>
    3400:	82 30       	cpi	r24, 0x02	; 2
    3402:	69 f4       	brne	.+26     	; 0x341e <xTimerGenericCommand+0x66>
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    3404:	00 e0       	ldi	r16, 0x00	; 0
    3406:	a7 01       	movw	r20, r14
    3408:	96 01       	movw	r18, r12
    340a:	be 01       	movw	r22, r28
    340c:	6f 5f       	subi	r22, 0xFF	; 255
    340e:	7f 4f       	sbci	r23, 0xFF	; 255
    3410:	80 91 68 19 	lds	r24, 0x1968	; 0x801968 <xTimerQueue>
    3414:	90 91 69 19 	lds	r25, 0x1969	; 0x801969 <xTimerQueue+0x1>
    3418:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <xQueueGenericSend>
    341c:	18 c0       	rjmp	.+48     	; 0x344e <xTimerGenericCommand+0x96>
            }
            else
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    341e:	00 e0       	ldi	r16, 0x00	; 0
    3420:	20 e0       	ldi	r18, 0x00	; 0
    3422:	30 e0       	ldi	r19, 0x00	; 0
    3424:	a9 01       	movw	r20, r18
    3426:	be 01       	movw	r22, r28
    3428:	6f 5f       	subi	r22, 0xFF	; 255
    342a:	7f 4f       	sbci	r23, 0xFF	; 255
    342c:	80 91 68 19 	lds	r24, 0x1968	; 0x801968 <xTimerQueue>
    3430:	90 91 69 19 	lds	r25, 0x1969	; 0x801969 <xTimerQueue+0x1>
    3434:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <xQueueGenericSend>
    3438:	0a c0       	rjmp	.+20     	; 0x344e <xTimerGenericCommand+0x96>
            }
        }
        else
        {
            xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    343a:	20 e0       	ldi	r18, 0x00	; 0
    343c:	a8 01       	movw	r20, r16
    343e:	be 01       	movw	r22, r28
    3440:	6f 5f       	subi	r22, 0xFF	; 255
    3442:	7f 4f       	sbci	r23, 0xFF	; 255
    3444:	cf 01       	movw	r24, r30
    3446:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <xQueueGenericSendFromISR>
    344a:	01 c0       	rjmp	.+2      	; 0x344e <xTimerGenericCommand+0x96>
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
    344c:	80 e0       	ldi	r24, 0x00	; 0
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xReturn;
}
    344e:	27 96       	adiw	r28, 0x07	; 7
    3450:	0f b6       	in	r0, 0x3f	; 63
    3452:	f8 94       	cli
    3454:	de bf       	out	0x3e, r29	; 62
    3456:	0f be       	out	0x3f, r0	; 63
    3458:	cd bf       	out	0x3d, r28	; 61
    345a:	df 91       	pop	r29
    345c:	cf 91       	pop	r28
    345e:	1f 91       	pop	r17
    3460:	0f 91       	pop	r16
    3462:	ff 90       	pop	r15
    3464:	ef 90       	pop	r14
    3466:	df 90       	pop	r13
    3468:	cf 90       	pop	r12
    346a:	bf 90       	pop	r11
    346c:	af 90       	pop	r10
    346e:	9f 90       	pop	r9
    3470:	8f 90       	pop	r8
    3472:	08 95       	ret

00003474 <prvSampleTimeNow>:
    return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    3474:	2f 92       	push	r2
    3476:	3f 92       	push	r3
    3478:	4f 92       	push	r4
    347a:	5f 92       	push	r5
    347c:	6f 92       	push	r6
    347e:	7f 92       	push	r7
    3480:	8f 92       	push	r8
    3482:	9f 92       	push	r9
    3484:	af 92       	push	r10
    3486:	bf 92       	push	r11
    3488:	cf 92       	push	r12
    348a:	df 92       	push	r13
    348c:	ef 92       	push	r14
    348e:	ff 92       	push	r15
    3490:	0f 93       	push	r16
    3492:	1f 93       	push	r17
    3494:	cf 93       	push	r28
    3496:	df 93       	push	r29
    3498:	1c 01       	movw	r2, r24
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

    xTimeNow = xTaskGetTickCount();
    349a:	9a d9       	rcall	.-3276   	; 0x27d0 <xTaskGetTickCount>
    349c:	2b 01       	movw	r4, r22
    349e:	3c 01       	movw	r6, r24

    if( xTimeNow < xLastTime )
    34a0:	80 91 62 19 	lds	r24, 0x1962	; 0x801962 <xLastTime.2432>
    34a4:	90 91 63 19 	lds	r25, 0x1963	; 0x801963 <xLastTime.2432+0x1>
    34a8:	a0 91 64 19 	lds	r26, 0x1964	; 0x801964 <xLastTime.2432+0x2>
    34ac:	b0 91 65 19 	lds	r27, 0x1965	; 0x801965 <xLastTime.2432+0x3>
    34b0:	48 16       	cp	r4, r24
    34b2:	59 06       	cpc	r5, r25
    34b4:	6a 06       	cpc	r6, r26
    34b6:	7b 06       	cpc	r7, r27
    34b8:	08 f0       	brcs	.+2      	; 0x34bc <prvSampleTimeNow+0x48>
    34ba:	53 c0       	rjmp	.+166    	; 0x3562 <prvSampleTimeNow+0xee>
    34bc:	3b c0       	rjmp	.+118    	; 0x3534 <prvSampleTimeNow+0xc0>
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    {
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    34be:	07 80       	ldd	r0, Z+7	; 0x07
    34c0:	f0 85       	ldd	r31, Z+8	; 0x08
    34c2:	e0 2d       	mov	r30, r0
    34c4:	80 80       	ld	r8, Z
    34c6:	91 80       	ldd	r9, Z+1	; 0x01
    34c8:	a2 80       	ldd	r10, Z+2	; 0x02
    34ca:	b3 80       	ldd	r11, Z+3	; 0x03

        /* Remove the timer from the list. */
        pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    34cc:	c0 85       	ldd	r28, Z+8	; 0x08
    34ce:	d1 85       	ldd	r29, Z+9	; 0x09
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    34d0:	8e 01       	movw	r16, r28
    34d2:	0e 5f       	subi	r16, 0xFE	; 254
    34d4:	1f 4f       	sbci	r17, 0xFF	; 255
    34d6:	c8 01       	movw	r24, r16
    34d8:	0e 94 81 0a 	call	0x1502	; 0x1502 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* Execute its callback, then send a command to restart the timer if
        it is an auto-reload timer.  It cannot be restarted here as the lists
        have not yet been switched. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    34dc:	ec 89       	ldd	r30, Y+20	; 0x14
    34de:	fd 89       	ldd	r31, Y+21	; 0x15
    34e0:	ce 01       	movw	r24, r28
    34e2:	19 95       	eicall

        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    34e4:	8f 89       	ldd	r24, Y+23	; 0x17
    34e6:	82 ff       	sbrs	r24, 2
    34e8:	25 c0       	rjmp	.+74     	; 0x3534 <prvSampleTimeNow+0xc0>
            the timer going into the same timer list then it has already expired
            and the timer should be re-inserted into the current list so it is
            processed again within this loop.  Otherwise a command should be sent
            to restart the timer to ensure it is only inserted into a list after
            the lists have been swapped. */
            xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    34ea:	8e 85       	ldd	r24, Y+14	; 0x0e
    34ec:	9f 85       	ldd	r25, Y+15	; 0x0f
    34ee:	a8 89       	ldd	r26, Y+16	; 0x10
    34f0:	b9 89       	ldd	r27, Y+17	; 0x11
    34f2:	88 0d       	add	r24, r8
    34f4:	99 1d       	adc	r25, r9
    34f6:	aa 1d       	adc	r26, r10
    34f8:	bb 1d       	adc	r27, r11
            if( xReloadTime > xNextExpireTime )
    34fa:	88 16       	cp	r8, r24
    34fc:	99 06       	cpc	r9, r25
    34fe:	aa 06       	cpc	r10, r26
    3500:	bb 06       	cpc	r11, r27
    3502:	70 f4       	brcc	.+28     	; 0x3520 <prvSampleTimeNow+0xac>
            {
                listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    3504:	8a 83       	std	Y+2, r24	; 0x02
    3506:	9b 83       	std	Y+3, r25	; 0x03
    3508:	ac 83       	std	Y+4, r26	; 0x04
    350a:	bd 83       	std	Y+5, r27	; 0x05
                listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    350c:	db 87       	std	Y+11, r29	; 0x0b
    350e:	ca 87       	std	Y+10, r28	; 0x0a
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    3510:	b8 01       	movw	r22, r16
    3512:	80 91 6c 19 	lds	r24, 0x196C	; 0x80196c <pxCurrentTimerList>
    3516:	90 91 6d 19 	lds	r25, 0x196D	; 0x80196d <pxCurrentTimerList+0x1>
    351a:	0e 94 44 0a 	call	0x1488	; 0x1488 <vListInsert>
    351e:	0a c0       	rjmp	.+20     	; 0x3534 <prvSampleTimeNow+0xc0>
            }
            else
            {
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    3520:	c1 2c       	mov	r12, r1
    3522:	d1 2c       	mov	r13, r1
    3524:	76 01       	movw	r14, r12
    3526:	00 e0       	ldi	r16, 0x00	; 0
    3528:	10 e0       	ldi	r17, 0x00	; 0
    352a:	a5 01       	movw	r20, r10
    352c:	94 01       	movw	r18, r8
    352e:	60 e0       	ldi	r22, 0x00	; 0
    3530:	ce 01       	movw	r24, r28
    3532:	42 df       	rcall	.-380    	; 0x33b8 <xTimerGenericCommand>

    /* The tick count has overflowed.  The timer lists must be switched.
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    3534:	e0 91 6c 19 	lds	r30, 0x196C	; 0x80196c <pxCurrentTimerList>
    3538:	f0 91 6d 19 	lds	r31, 0x196D	; 0x80196d <pxCurrentTimerList+0x1>
    353c:	80 81       	ld	r24, Z
    353e:	81 11       	cpse	r24, r1
    3540:	be cf       	rjmp	.-132    	; 0x34be <prvSampleTimeNow+0x4a>
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxTemp = pxCurrentTimerList;
    pxCurrentTimerList = pxOverflowTimerList;
    3542:	80 91 6a 19 	lds	r24, 0x196A	; 0x80196a <pxOverflowTimerList>
    3546:	90 91 6b 19 	lds	r25, 0x196B	; 0x80196b <pxOverflowTimerList+0x1>
    354a:	90 93 6d 19 	sts	0x196D, r25	; 0x80196d <pxCurrentTimerList+0x1>
    354e:	80 93 6c 19 	sts	0x196C, r24	; 0x80196c <pxCurrentTimerList>
    pxOverflowTimerList = pxTemp;
    3552:	f0 93 6b 19 	sts	0x196B, r31	; 0x80196b <pxOverflowTimerList+0x1>
    3556:	e0 93 6a 19 	sts	0x196A, r30	; 0x80196a <pxOverflowTimerList>
    xTimeNow = xTaskGetTickCount();

    if( xTimeNow < xLastTime )
    {
        prvSwitchTimerLists();
        *pxTimerListsWereSwitched = pdTRUE;
    355a:	81 e0       	ldi	r24, 0x01	; 1
    355c:	f1 01       	movw	r30, r2
    355e:	80 83       	st	Z, r24
    3560:	02 c0       	rjmp	.+4      	; 0x3566 <prvSampleTimeNow+0xf2>
    }
    else
    {
        *pxTimerListsWereSwitched = pdFALSE;
    3562:	f1 01       	movw	r30, r2
    3564:	10 82       	st	Z, r1
    }

    xLastTime = xTimeNow;
    3566:	40 92 62 19 	sts	0x1962, r4	; 0x801962 <xLastTime.2432>
    356a:	50 92 63 19 	sts	0x1963, r5	; 0x801963 <xLastTime.2432+0x1>
    356e:	60 92 64 19 	sts	0x1964, r6	; 0x801964 <xLastTime.2432+0x2>
    3572:	70 92 65 19 	sts	0x1965, r7	; 0x801965 <xLastTime.2432+0x3>

    return xTimeNow;
}
    3576:	c3 01       	movw	r24, r6
    3578:	b2 01       	movw	r22, r4
    357a:	df 91       	pop	r29
    357c:	cf 91       	pop	r28
    357e:	1f 91       	pop	r17
    3580:	0f 91       	pop	r16
    3582:	ff 90       	pop	r15
    3584:	ef 90       	pop	r14
    3586:	df 90       	pop	r13
    3588:	cf 90       	pop	r12
    358a:	bf 90       	pop	r11
    358c:	af 90       	pop	r10
    358e:	9f 90       	pop	r9
    3590:	8f 90       	pop	r8
    3592:	7f 90       	pop	r7
    3594:	6f 90       	pop	r6
    3596:	5f 90       	pop	r5
    3598:	4f 90       	pop	r4
    359a:	3f 90       	pop	r3
    359c:	2f 90       	pop	r2
    359e:	08 95       	ret

000035a0 <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    35a0:	08 95       	ret

000035a2 <vApplicationMallocFailedHook>:
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    35a2:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    35a4:	2f 9a       	sbi	0x05, 7	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    35a6:	2f ef       	ldi	r18, 0xFF	; 255
    35a8:	80 e7       	ldi	r24, 0x70	; 112
    35aa:	92 e0       	ldi	r25, 0x02	; 2
    35ac:	21 50       	subi	r18, 0x01	; 1
    35ae:	80 40       	sbci	r24, 0x00	; 0
    35b0:	90 40       	sbci	r25, 0x00	; 0
    35b2:	e1 f7       	brne	.-8      	; 0x35ac <vApplicationMallocFailedHook+0xa>
    35b4:	00 c0       	rjmp	.+0      	; 0x35b6 <vApplicationMallocFailedHook+0x14>
    35b6:	00 00       	nop
    for(;;)
    {
        _delay_ms(50);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED fast blink.
    35b8:	1f 9a       	sbi	0x03, 7	; 3
    35ba:	f5 cf       	rjmp	.-22     	; 0x35a6 <vApplicationMallocFailedHook+0x4>

000035bc <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook( TaskHandle_t xTask, portCHAR *pcTaskName ) __attribute__((weak));

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)), portCHAR *pcTaskName __attribute__((unused))  )
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    35bc:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    35be:	2f 9a       	sbi	0x05, 7	; 5
    35c0:	2f ef       	ldi	r18, 0xFF	; 255
    35c2:	87 ea       	ldi	r24, 0xA7	; 167
    35c4:	91 e6       	ldi	r25, 0x61	; 97
    35c6:	21 50       	subi	r18, 0x01	; 1
    35c8:	80 40       	sbci	r24, 0x00	; 0
    35ca:	90 40       	sbci	r25, 0x00	; 0
    35cc:	e1 f7       	brne	.-8      	; 0x35c6 <vApplicationStackOverflowHook+0xa>
    35ce:	00 c0       	rjmp	.+0      	; 0x35d0 <vApplicationStackOverflowHook+0x14>
    35d0:	00 00       	nop
    for(;;)
    {
        _delay_ms(2000);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED slow blink.
    35d2:	1f 9a       	sbi	0x03, 7	; 3
    35d4:	f5 cf       	rjmp	.-22     	; 0x35c0 <vApplicationStackOverflowHook+0x4>

000035d6 <create_tasks_and_semaphores>:
	hih8120Create();
	
}

void doStuff()
{
    35d6:	8f 92       	push	r8
    35d8:	9f 92       	push	r9
    35da:	af 92       	push	r10
    35dc:	bf 92       	push	r11
    35de:	cf 92       	push	r12
    35e0:	df 92       	push	r13
    35e2:	ef 92       	push	r14
    35e4:	ff 92       	push	r15
    35e6:	0f 93       	push	r16
    35e8:	1f 93       	push	r17
    35ea:	cf 93       	push	r28
    35ec:	df 93       	push	r29
    35ee:	80 91 d9 1a 	lds	r24, 0x1AD9	; 0x801ad9 <xTestSemaphore>
    35f2:	90 91 da 1a 	lds	r25, 0x1ADA	; 0x801ada <xTestSemaphore+0x1>
    35f6:	89 2b       	or	r24, r25
    35f8:	89 f4       	brne	.+34     	; 0x361c <create_tasks_and_semaphores+0x46>
    35fa:	81 e0       	ldi	r24, 0x01	; 1
    35fc:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <xQueueCreateMutex>
    3600:	90 93 da 1a 	sts	0x1ADA, r25	; 0x801ada <xTestSemaphore+0x1>
    3604:	80 93 d9 1a 	sts	0x1AD9, r24	; 0x801ad9 <xTestSemaphore>
    3608:	00 97       	sbiw	r24, 0x00	; 0
    360a:	41 f0       	breq	.+16     	; 0x361c <create_tasks_and_semaphores+0x46>
    360c:	00 e0       	ldi	r16, 0x00	; 0
    360e:	20 e0       	ldi	r18, 0x00	; 0
    3610:	30 e0       	ldi	r19, 0x00	; 0
    3612:	a9 01       	movw	r20, r18
    3614:	60 e0       	ldi	r22, 0x00	; 0
    3616:	70 e0       	ldi	r23, 0x00	; 0
    3618:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <xQueueGenericSend>
    361c:	0e 94 6b 07 	call	0xed6	; 0xed6 <xEventGroupCreate>
    3620:	90 93 f2 1a 	sts	0x1AF2, r25	; 0x801af2 <startMeasureEventGroup+0x1>
    3624:	80 93 f1 1a 	sts	0x1AF1, r24	; 0x801af1 <startMeasureEventGroup>
    3628:	0e 94 6b 07 	call	0xed6	; 0xed6 <xEventGroupCreate>
    362c:	90 93 d8 1a 	sts	0x1AD8, r25	; 0x801ad8 <readyEventGroup+0x1>
    3630:	80 93 d7 1a 	sts	0x1AD7, r24	; 0x801ad7 <readyEventGroup>
    3634:	41 e0       	ldi	r20, 0x01	; 1
    3636:	60 e0       	ldi	r22, 0x00	; 0
    3638:	70 e0       	ldi	r23, 0x00	; 0
    363a:	84 e6       	ldi	r24, 0x64	; 100
    363c:	90 e0       	ldi	r25, 0x00	; 0
    363e:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <xStreamBufferGenericCreate>
    3642:	90 93 d6 1a 	sts	0x1AD6, r25	; 0x801ad6 <xMessageBuffer+0x1>
    3646:	80 93 d5 1a 	sts	0x1AD5, r24	; 0x801ad5 <xMessageBuffer>
    364a:	bc 01       	movw	r22, r24
    364c:	81 e0       	ldi	r24, 0x01	; 1
    364e:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <lora_UpLinkHandler_create>
    3652:	e0 90 d7 1a 	lds	r14, 0x1AD7	; 0x801ad7 <readyEventGroup>
    3656:	f0 90 d8 1a 	lds	r15, 0x1AD8	; 0x801ad8 <readyEventGroup+0x1>
    365a:	40 91 f1 1a 	lds	r20, 0x1AF1	; 0x801af1 <startMeasureEventGroup>
    365e:	50 91 f2 1a 	lds	r21, 0x1AF2	; 0x801af2 <startMeasureEventGroup+0x1>
    3662:	a1 2c       	mov	r10, r1
    3664:	b1 2c       	mov	r11, r1
    3666:	65 01       	movw	r12, r10
    3668:	68 94       	set
    366a:	a4 f8       	bld	r10, 4
    366c:	01 e0       	ldi	r16, 0x01	; 1
    366e:	10 e0       	ldi	r17, 0x00	; 0
    3670:	20 e0       	ldi	r18, 0x00	; 0
    3672:	30 e0       	ldi	r19, 0x00	; 0
    3674:	60 ec       	ldi	r22, 0xC0	; 192
    3676:	81 e0       	ldi	r24, 0x01	; 1
    3678:	0e 94 06 05 	call	0xa0c	; 0xa0c <humAndTempReader_create>
    367c:	c8 2f       	mov	r28, r24
    367e:	d9 2f       	mov	r29, r25
    3680:	e0 90 d7 1a 	lds	r14, 0x1AD7	; 0x801ad7 <readyEventGroup>
    3684:	f0 90 d8 1a 	lds	r15, 0x1AD8	; 0x801ad8 <readyEventGroup+0x1>
    3688:	40 91 f1 1a 	lds	r20, 0x1AF1	; 0x801af1 <startMeasureEventGroup>
    368c:	50 91 f2 1a 	lds	r21, 0x1AF2	; 0x801af2 <startMeasureEventGroup+0x1>
    3690:	a1 2c       	mov	r10, r1
    3692:	b1 2c       	mov	r11, r1
    3694:	65 01       	movw	r12, r10
    3696:	68 94       	set
    3698:	a5 f8       	bld	r10, 5
    369a:	02 e0       	ldi	r16, 0x02	; 2
    369c:	10 e0       	ldi	r17, 0x00	; 0
    369e:	20 e0       	ldi	r18, 0x00	; 0
    36a0:	30 e0       	ldi	r19, 0x00	; 0
    36a2:	60 ec       	ldi	r22, 0xC0	; 192
    36a4:	81 e0       	ldi	r24, 0x01	; 1
    36a6:	0e 94 72 02 	call	0x4e4	; 0x4e4 <co2Reader_create>
    36aa:	e0 90 d7 1a 	lds	r14, 0x1AD7	; 0x801ad7 <readyEventGroup>
    36ae:	f0 90 d8 1a 	lds	r15, 0x1AD8	; 0x801ad8 <readyEventGroup+0x1>
    36b2:	40 91 f1 1a 	lds	r20, 0x1AF1	; 0x801af1 <startMeasureEventGroup>
    36b6:	50 91 f2 1a 	lds	r21, 0x1AF2	; 0x801af2 <startMeasureEventGroup+0x1>
    36ba:	20 91 d6 1a 	lds	r18, 0x1AD6	; 0x801ad6 <xMessageBuffer+0x1>
    36be:	2f 93       	push	r18
    36c0:	20 91 d5 1a 	lds	r18, 0x1AD5	; 0x801ad5 <xMessageBuffer>
    36c4:	2f 93       	push	r18
    36c6:	df 93       	push	r29
    36c8:	cf 93       	push	r28
    36ca:	4c 01       	movw	r8, r24
    36cc:	0f 2e       	mov	r0, r31
    36ce:	f0 e3       	ldi	r31, 0x30	; 48
    36d0:	af 2e       	mov	r10, r31
    36d2:	b1 2c       	mov	r11, r1
    36d4:	c1 2c       	mov	r12, r1
    36d6:	d1 2c       	mov	r13, r1
    36d8:	f0 2d       	mov	r31, r0
    36da:	03 e0       	ldi	r16, 0x03	; 3
    36dc:	10 e0       	ldi	r17, 0x00	; 0
    36de:	20 e0       	ldi	r18, 0x00	; 0
    36e0:	30 e0       	ldi	r19, 0x00	; 0
    36e2:	60 ec       	ldi	r22, 0xC0	; 192
    36e4:	82 e0       	ldi	r24, 0x02	; 2
    36e6:	0e 94 70 03 	call	0x6e0	; 0x6e0 <device_create>
    36ea:	0f 90       	pop	r0
    36ec:	0f 90       	pop	r0
    36ee:	0f 90       	pop	r0
    36f0:	0f 90       	pop	r0
    36f2:	df 91       	pop	r29
    36f4:	cf 91       	pop	r28
    36f6:	1f 91       	pop	r17
    36f8:	0f 91       	pop	r16
    36fa:	ff 90       	pop	r15
    36fc:	ef 90       	pop	r14
    36fe:	df 90       	pop	r13
    3700:	cf 90       	pop	r12
    3702:	bf 90       	pop	r11
    3704:	af 90       	pop	r10
    3706:	9f 90       	pop	r9
    3708:	8f 90       	pop	r8
    370a:	08 95       	ret

0000370c <initialiseSystem>:
    370c:	81 b1       	in	r24, 0x01	; 1
    370e:	81 68       	ori	r24, 0x81	; 129
    3710:	81 b9       	out	0x01, r24	; 1
    3712:	0e 94 55 07 	call	0xeaa	; 0xeaa <trace_init>
    3716:	80 e0       	ldi	r24, 0x00	; 0
    3718:	0e 94 94 26 	call	0x4d28	; 0x4d28 <stdioCreate>
    371c:	85 e0       	ldi	r24, 0x05	; 5
    371e:	0e d0       	rcall	.+28     	; 0x373c <hal_create>
    3720:	60 e0       	ldi	r22, 0x00	; 0
    3722:	70 e0       	ldi	r23, 0x00	; 0
    3724:	81 e0       	ldi	r24, 0x01	; 1
    3726:	c1 d3       	rcall	.+1922   	; 0x3eaa <lora_driver_create>
    3728:	68 c0       	rjmp	.+208    	; 0x37fa <hih8120Create>
    372a:	08 95       	ret

0000372c <main>:
	//bytesToSend=xMessageBufferSend(xMessageBuffer,(void*) &payload,sizeof(payload),portMAX_DELAY);
}
/*-----------------------------------------------------------*/
int main(void)
{
	initialiseSystem(); // Must be done as the very first thing!!
    372c:	ef df       	rcall	.-34     	; 0x370c <initialiseSystem>
	printf("Program Started!!\n");
    372e:	8d e9       	ldi	r24, 0x9D	; 157
    3730:	95 e0       	ldi	r25, 0x05	; 5
    3732:	0e 94 41 2c 	call	0x5882	; 0x5882 <puts>
	create_tasks_and_semaphores();
	vTaskStartScheduler(); // Initialise and run the freeRTOS scheduler. Execution should never return from here.
    3736:	4f df       	rcall	.-354    	; 0x35d6 <create_tasks_and_semaphores>
    3738:	09 d8       	rcall	.-4078   	; 0x274c <vTaskStartScheduler>
    373a:	ff cf       	rjmp	.-2      	; 0x373a <main+0xe>

0000373c <hal_create>:
    373c:	e3 ef       	ldi	r30, 0xF3	; 243
    373e:	fa e1       	ldi	r31, 0x1A	; 26
    3740:	2a ea       	ldi	r18, 0xAA	; 170
    3742:	32 e2       	ldi	r19, 0x22	; 34
    3744:	31 83       	std	Z+1, r19	; 0x01
    3746:	20 83       	st	Z, r18
    3748:	2d ea       	ldi	r18, 0xAD	; 173
    374a:	32 e2       	ldi	r19, 0x22	; 34
    374c:	33 83       	std	Z+3, r19	; 0x03
    374e:	22 83       	std	Z+2, r18	; 0x02
    3750:	28 eb       	ldi	r18, 0xB8	; 184
    3752:	32 e2       	ldi	r19, 0x22	; 34
    3754:	35 83       	std	Z+5, r19	; 0x05
    3756:	24 83       	std	Z+4, r18	; 0x04
    3758:	2c eb       	ldi	r18, 0xBC	; 188
    375a:	32 e2       	ldi	r19, 0x22	; 34
    375c:	37 83       	std	Z+7, r19	; 0x07
    375e:	26 83       	std	Z+6, r18	; 0x06
    3760:	22 ec       	ldi	r18, 0xC2	; 194
    3762:	32 e2       	ldi	r19, 0x22	; 34
    3764:	31 87       	std	Z+9, r19	; 0x09
    3766:	20 87       	std	Z+8, r18	; 0x08
    3768:	2e ec       	ldi	r18, 0xCE	; 206
    376a:	32 e2       	ldi	r19, 0x22	; 34
    376c:	33 87       	std	Z+11, r19	; 0x0b
    376e:	22 87       	std	Z+10, r18	; 0x0a
    3770:	23 ed       	ldi	r18, 0xD3	; 211
    3772:	32 e2       	ldi	r19, 0x22	; 34
    3774:	35 87       	std	Z+13, r19	; 0x0d
    3776:	24 87       	std	Z+12, r18	; 0x0c
    3778:	2f ed       	ldi	r18, 0xDF	; 223
    377a:	32 e2       	ldi	r19, 0x22	; 34
    377c:	37 87       	std	Z+15, r19	; 0x0f
    377e:	26 87       	std	Z+14, r18	; 0x0e
    3780:	2f eb       	ldi	r18, 0xBF	; 191
    3782:	32 e2       	ldi	r19, 0x22	; 34
    3784:	31 8b       	std	Z+17, r19	; 0x11
    3786:	20 8b       	std	Z+16, r18	; 0x10
    3788:	24 ee       	ldi	r18, 0xE4	; 228
    378a:	32 e2       	ldi	r19, 0x22	; 34
    378c:	33 8b       	std	Z+19, r19	; 0x13
    378e:	22 8b       	std	Z+18, r18	; 0x12
    3790:	21 ef       	ldi	r18, 0xF1	; 241
    3792:	32 e2       	ldi	r19, 0x22	; 34
    3794:	35 8b       	std	Z+21, r19	; 0x15
    3796:	24 8b       	std	Z+20, r18	; 0x14
    3798:	68 2f       	mov	r22, r24
    379a:	cf 01       	movw	r24, r30
    379c:	52 c1       	rjmp	.+676    	; 0x3a42 <led_create>
    379e:	08 95       	ret

000037a0 <_hihTwiCallback>:
    37a0:	65 30       	cpi	r22, 0x05	; 5
    37a2:	f1 f4       	brne	.+60     	; 0x37e0 <_hihTwiCallback+0x40>
    37a4:	fa 01       	movw	r30, r20
    37a6:	80 81       	ld	r24, Z
    37a8:	8f 73       	andi	r24, 0x3F	; 63
    37aa:	90 e0       	ldi	r25, 0x00	; 0
    37ac:	98 2f       	mov	r25, r24
    37ae:	88 27       	eor	r24, r24
    37b0:	21 81       	ldd	r18, Z+1	; 0x01
    37b2:	82 2b       	or	r24, r18
    37b4:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <_hum+0x1>
    37b8:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <_hum>
    37bc:	82 81       	ldd	r24, Z+2	; 0x02
    37be:	f0 e4       	ldi	r31, 0x40	; 64
    37c0:	8f 9f       	mul	r24, r31
    37c2:	c0 01       	movw	r24, r0
    37c4:	11 24       	eor	r1, r1
    37c6:	fa 01       	movw	r30, r20
    37c8:	23 81       	ldd	r18, Z+3	; 0x03
    37ca:	26 95       	lsr	r18
    37cc:	26 95       	lsr	r18
    37ce:	82 2b       	or	r24, r18
    37d0:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <_temp+0x1>
    37d4:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <_temp>
    37d8:	81 e0       	ldi	r24, 0x01	; 1
    37da:	80 93 84 19 	sts	0x1984, r24	; 0x801984 <_measuringIsReady>
    37de:	08 95       	ret
    37e0:	64 30       	cpi	r22, 0x04	; 4
    37e2:	51 f0       	breq	.+20     	; 0x37f8 <_hihTwiCallback+0x58>
    37e4:	80 e0       	ldi	r24, 0x00	; 0
    37e6:	90 e4       	ldi	r25, 0x40	; 64
    37e8:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <_temp+0x1>
    37ec:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <_temp>
    37f0:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <_hum+0x1>
    37f4:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <_hum>
    37f8:	08 95       	ret

000037fa <hih8120Create>:
    37fa:	0f 93       	push	r16
    37fc:	1f 93       	push	r17
    37fe:	00 ed       	ldi	r16, 0xD0	; 208
    3800:	1b e1       	ldi	r17, 0x1B	; 27
    3802:	20 e0       	ldi	r18, 0x00	; 0
    3804:	34 e2       	ldi	r19, 0x24	; 36
    3806:	44 ef       	ldi	r20, 0xF4	; 244
    3808:	50 e0       	ldi	r21, 0x00	; 0
    380a:	60 e0       	ldi	r22, 0x00	; 0
    380c:	87 e2       	ldi	r24, 0x27	; 39
    380e:	0e 94 ce 26 	call	0x4d9c	; 0x4d9c <twiCreate>
    3812:	90 93 86 19 	sts	0x1986, r25	; 0x801986 <_hih8120Handler+0x1>
    3816:	80 93 85 19 	sts	0x1985, r24	; 0x801985 <_hih8120Handler>
    381a:	21 e0       	ldi	r18, 0x01	; 1
    381c:	89 2b       	or	r24, r25
    381e:	09 f0       	breq	.+2      	; 0x3822 <hih8120Create+0x28>
    3820:	20 e0       	ldi	r18, 0x00	; 0
    3822:	82 2f       	mov	r24, r18
    3824:	1f 91       	pop	r17
    3826:	0f 91       	pop	r16
    3828:	08 95       	ret

0000382a <hih8120IsReady>:
    382a:	80 91 84 19 	lds	r24, 0x1984	; 0x801984 <_measuringIsReady>
    382e:	08 95       	ret

00003830 <hih8120Wakeup>:
    3830:	80 91 85 19 	lds	r24, 0x1985	; 0x801985 <_hih8120Handler>
    3834:	90 91 86 19 	lds	r25, 0x1986	; 0x801986 <_hih8120Handler+0x1>
    3838:	00 97       	sbiw	r24, 0x00	; 0
    383a:	59 f0       	breq	.+22     	; 0x3852 <hih8120Wakeup+0x22>
    383c:	40 e0       	ldi	r20, 0x00	; 0
    383e:	60 e0       	ldi	r22, 0x00	; 0
    3840:	70 e0       	ldi	r23, 0x00	; 0
    3842:	0e 94 1f 27 	call	0x4e3e	; 0x4e3e <twiTransmit>
    3846:	84 30       	cpi	r24, 0x04	; 4
    3848:	31 f4       	brne	.+12     	; 0x3856 <hih8120Wakeup+0x26>
    384a:	10 92 84 19 	sts	0x1984, r1	; 0x801984 <_measuringIsReady>
    384e:	80 e0       	ldi	r24, 0x00	; 0
    3850:	08 95       	ret
    3852:	82 e0       	ldi	r24, 0x02	; 2
    3854:	08 95       	ret
    3856:	83 e0       	ldi	r24, 0x03	; 3
    3858:	08 95       	ret

0000385a <hih8120Meassure>:
    385a:	80 91 85 19 	lds	r24, 0x1985	; 0x801985 <_hih8120Handler>
    385e:	90 91 86 19 	lds	r25, 0x1986	; 0x801986 <_hih8120Handler+0x1>
    3862:	00 97       	sbiw	r24, 0x00	; 0
    3864:	39 f0       	breq	.+14     	; 0x3874 <hih8120Meassure+0x1a>
    3866:	64 e0       	ldi	r22, 0x04	; 4
    3868:	0e 94 6b 27 	call	0x4ed6	; 0x4ed6 <twiReceive>
    386c:	85 30       	cpi	r24, 0x05	; 5
    386e:	21 f0       	breq	.+8      	; 0x3878 <hih8120Meassure+0x1e>
    3870:	83 e0       	ldi	r24, 0x03	; 3
    3872:	08 95       	ret
    3874:	82 e0       	ldi	r24, 0x02	; 2
    3876:	08 95       	ret
    3878:	80 e0       	ldi	r24, 0x00	; 0
    387a:	08 95       	ret

0000387c <hih8120GetHumidity>:
    387c:	60 91 0a 02 	lds	r22, 0x020A	; 0x80020a <_hum>
    3880:	70 91 0b 02 	lds	r23, 0x020B	; 0x80020b <_hum+0x1>
    3884:	80 e0       	ldi	r24, 0x00	; 0
    3886:	90 e0       	ldi	r25, 0x00	; 0
    3888:	0e 94 75 29 	call	0x52ea	; 0x52ea <__floatunsisf>
    388c:	20 e0       	ldi	r18, 0x00	; 0
    388e:	30 e0       	ldi	r19, 0x00	; 0
    3890:	48 ec       	ldi	r20, 0xC8	; 200
    3892:	52 e4       	ldi	r21, 0x42	; 66
    3894:	0e 94 03 2a 	call	0x5406	; 0x5406 <__mulsf3>
    3898:	20 e0       	ldi	r18, 0x00	; 0
    389a:	38 ef       	ldi	r19, 0xF8	; 248
    389c:	4f e7       	ldi	r20, 0x7F	; 127
    389e:	56 e4       	ldi	r21, 0x46	; 70
    38a0:	0c 94 dc 28 	jmp	0x51b8	; 0x51b8 <__divsf3>
    38a4:	08 95       	ret

000038a6 <hih8120GetHumidityPercent_x10>:
    38a6:	ea df       	rcall	.-44     	; 0x387c <hih8120GetHumidity>
    38a8:	20 e0       	ldi	r18, 0x00	; 0
    38aa:	30 e0       	ldi	r19, 0x00	; 0
    38ac:	40 e2       	ldi	r20, 0x20	; 32
    38ae:	51 e4       	ldi	r21, 0x41	; 65
    38b0:	0e 94 03 2a 	call	0x5406	; 0x5406 <__mulsf3>
    38b4:	0e 94 49 29 	call	0x5292	; 0x5292 <__fixunssfsi>
    38b8:	cb 01       	movw	r24, r22
    38ba:	08 95       	ret

000038bc <hih8120GetTemperature>:
    38bc:	60 91 08 02 	lds	r22, 0x0208	; 0x800208 <_temp>
    38c0:	70 91 09 02 	lds	r23, 0x0209	; 0x800209 <_temp+0x1>
    38c4:	80 e0       	ldi	r24, 0x00	; 0
    38c6:	90 e0       	ldi	r25, 0x00	; 0
    38c8:	0e 94 75 29 	call	0x52ea	; 0x52ea <__floatunsisf>
    38cc:	20 e0       	ldi	r18, 0x00	; 0
    38ce:	30 e0       	ldi	r19, 0x00	; 0
    38d0:	45 e2       	ldi	r20, 0x25	; 37
    38d2:	53 e4       	ldi	r21, 0x43	; 67
    38d4:	0e 94 03 2a 	call	0x5406	; 0x5406 <__mulsf3>
    38d8:	20 e0       	ldi	r18, 0x00	; 0
    38da:	38 ef       	ldi	r19, 0xF8	; 248
    38dc:	4f e7       	ldi	r20, 0x7F	; 127
    38de:	56 e4       	ldi	r21, 0x46	; 70
    38e0:	0e 94 dc 28 	call	0x51b8	; 0x51b8 <__divsf3>
    38e4:	20 e0       	ldi	r18, 0x00	; 0
    38e6:	30 e0       	ldi	r19, 0x00	; 0
    38e8:	40 e2       	ldi	r20, 0x20	; 32
    38ea:	52 e4       	ldi	r21, 0x42	; 66
    38ec:	0c 94 77 28 	jmp	0x50ee	; 0x50ee <__subsf3>
    38f0:	08 95       	ret

000038f2 <hih8120GetTemperature_x10>:
    38f2:	e4 df       	rcall	.-56     	; 0x38bc <hih8120GetTemperature>
    38f4:	20 e0       	ldi	r18, 0x00	; 0
    38f6:	30 e0       	ldi	r19, 0x00	; 0
    38f8:	40 e2       	ldi	r20, 0x20	; 32
    38fa:	51 e4       	ldi	r21, 0x41	; 65
    38fc:	0e 94 03 2a 	call	0x5406	; 0x5406 <__mulsf3>
    3900:	0e 94 44 29 	call	0x5288	; 0x5288 <__fixsfsi>
    3904:	cb 01       	movw	r24, r22
    3906:	08 95       	ret

00003908 <_turn_off>:
    3908:	cf 93       	push	r28
    390a:	df 93       	push	r29
    390c:	90 e0       	ldi	r25, 0x00	; 0
    390e:	fc 01       	movw	r30, r24
    3910:	ee 0f       	add	r30, r30
    3912:	ff 1f       	adc	r31, r31
    3914:	e8 0f       	add	r30, r24
    3916:	f9 1f       	adc	r31, r25
    3918:	ee 0f       	add	r30, r30
    391a:	ff 1f       	adc	r31, r31
    391c:	e9 57       	subi	r30, 0x79	; 121
    391e:	f6 4e       	sbci	r31, 0xE6	; 230
    3920:	23 81       	ldd	r18, Z+3	; 0x03
    3922:	21 11       	cpse	r18, r1
    3924:	0a c0       	rjmp	.+20     	; 0x393a <_turn_off+0x32>
    3926:	ef 01       	movw	r28, r30
    3928:	e0 91 fb 1a 	lds	r30, 0x1AFB	; 0x801afb <register_access+0x8>
    392c:	f0 91 fc 1a 	lds	r31, 0x1AFC	; 0x801afc <register_access+0x9>
    3930:	6a 81       	ldd	r22, Y+2	; 0x02
    3932:	88 81       	ld	r24, Y
    3934:	99 81       	ldd	r25, Y+1	; 0x01
    3936:	19 95       	eicall
    3938:	12 c0       	rjmp	.+36     	; 0x395e <_turn_off+0x56>
    393a:	dc 01       	movw	r26, r24
    393c:	aa 0f       	add	r26, r26
    393e:	bb 1f       	adc	r27, r27
    3940:	ed 01       	movw	r28, r26
    3942:	c8 0f       	add	r28, r24
    3944:	d9 1f       	adc	r29, r25
    3946:	cc 0f       	add	r28, r28
    3948:	dd 1f       	adc	r29, r29
    394a:	c9 57       	subi	r28, 0x79	; 121
    394c:	d6 4e       	sbci	r29, 0xE6	; 230
    394e:	e0 91 05 1b 	lds	r30, 0x1B05	; 0x801b05 <register_access+0x12>
    3952:	f0 91 06 1b 	lds	r31, 0x1B06	; 0x801b06 <register_access+0x13>
    3956:	6a 81       	ldd	r22, Y+2	; 0x02
    3958:	88 81       	ld	r24, Y
    395a:	99 81       	ldd	r25, Y+1	; 0x01
    395c:	19 95       	eicall
    395e:	df 91       	pop	r29
    3960:	cf 91       	pop	r28
    3962:	08 95       	ret

00003964 <_turn_on>:
    3964:	cf 93       	push	r28
    3966:	df 93       	push	r29
    3968:	90 e0       	ldi	r25, 0x00	; 0
    396a:	fc 01       	movw	r30, r24
    396c:	ee 0f       	add	r30, r30
    396e:	ff 1f       	adc	r31, r31
    3970:	e8 0f       	add	r30, r24
    3972:	f9 1f       	adc	r31, r25
    3974:	ee 0f       	add	r30, r30
    3976:	ff 1f       	adc	r31, r31
    3978:	e9 57       	subi	r30, 0x79	; 121
    397a:	f6 4e       	sbci	r31, 0xE6	; 230
    397c:	23 81       	ldd	r18, Z+3	; 0x03
    397e:	21 11       	cpse	r18, r1
    3980:	0a c0       	rjmp	.+20     	; 0x3996 <_turn_on+0x32>
    3982:	ef 01       	movw	r28, r30
    3984:	e0 91 05 1b 	lds	r30, 0x1B05	; 0x801b05 <register_access+0x12>
    3988:	f0 91 06 1b 	lds	r31, 0x1B06	; 0x801b06 <register_access+0x13>
    398c:	6a 81       	ldd	r22, Y+2	; 0x02
    398e:	88 81       	ld	r24, Y
    3990:	99 81       	ldd	r25, Y+1	; 0x01
    3992:	19 95       	eicall
    3994:	12 c0       	rjmp	.+36     	; 0x39ba <_turn_on+0x56>
    3996:	dc 01       	movw	r26, r24
    3998:	aa 0f       	add	r26, r26
    399a:	bb 1f       	adc	r27, r27
    399c:	ed 01       	movw	r28, r26
    399e:	c8 0f       	add	r28, r24
    39a0:	d9 1f       	adc	r29, r25
    39a2:	cc 0f       	add	r28, r28
    39a4:	dd 1f       	adc	r29, r29
    39a6:	c9 57       	subi	r28, 0x79	; 121
    39a8:	d6 4e       	sbci	r29, 0xE6	; 230
    39aa:	e0 91 fb 1a 	lds	r30, 0x1AFB	; 0x801afb <register_access+0x8>
    39ae:	f0 91 fc 1a 	lds	r31, 0x1AFC	; 0x801afc <register_access+0x9>
    39b2:	6a 81       	ldd	r22, Y+2	; 0x02
    39b4:	88 81       	ld	r24, Y
    39b6:	99 81       	ldd	r25, Y+1	; 0x01
    39b8:	19 95       	eicall
    39ba:	df 91       	pop	r29
    39bc:	cf 91       	pop	r28
    39be:	08 95       	ret

000039c0 <_hal_led_task>:
    39c0:	0f 2e       	mov	r0, r31
    39c2:	f3 ef       	ldi	r31, 0xF3	; 243
    39c4:	cf 2e       	mov	r12, r31
    39c6:	fa e1       	ldi	r31, 0x1A	; 26
    39c8:	df 2e       	mov	r13, r31
    39ca:	f0 2d       	mov	r31, r0
    39cc:	04 e0       	ldi	r16, 0x04	; 4
    39ce:	c7 e8       	ldi	r28, 0x87	; 135
    39d0:	d9 e1       	ldi	r29, 0x19	; 25
    39d2:	10 e0       	ldi	r17, 0x00	; 0
    39d4:	8c 81       	ldd	r24, Y+4	; 0x04
    39d6:	81 30       	cpi	r24, 0x01	; 1
    39d8:	69 f0       	breq	.+26     	; 0x39f4 <_hal_led_task+0x34>
    39da:	e8 f0       	brcs	.+58     	; 0x3a16 <_hal_led_task+0x56>
    39dc:	82 30       	cpi	r24, 0x02	; 2
    39de:	39 f5       	brne	.+78     	; 0x3a2e <_hal_led_task+0x6e>
    39e0:	d6 01       	movw	r26, r12
    39e2:	1c 96       	adiw	r26, 0x0c	; 12
    39e4:	ed 91       	ld	r30, X+
    39e6:	fc 91       	ld	r31, X
    39e8:	1d 97       	sbiw	r26, 0x0d	; 13
    39ea:	6a 81       	ldd	r22, Y+2	; 0x02
    39ec:	88 81       	ld	r24, Y
    39ee:	99 81       	ldd	r25, Y+1	; 0x01
    39f0:	19 95       	eicall
    39f2:	1d c0       	rjmp	.+58     	; 0x3a2e <_hal_led_task+0x6e>
    39f4:	8d 81       	ldd	r24, Y+5	; 0x05
    39f6:	8f 5f       	subi	r24, 0xFF	; 255
    39f8:	8a 30       	cpi	r24, 0x0A	; 10
    39fa:	10 f4       	brcc	.+4      	; 0x3a00 <_hal_led_task+0x40>
    39fc:	8d 83       	std	Y+5, r24	; 0x05
    39fe:	17 c0       	rjmp	.+46     	; 0x3a2e <_hal_led_task+0x6e>
    3a00:	1d 82       	std	Y+5, r1	; 0x05
    3a02:	d6 01       	movw	r26, r12
    3a04:	1c 96       	adiw	r26, 0x0c	; 12
    3a06:	ed 91       	ld	r30, X+
    3a08:	fc 91       	ld	r31, X
    3a0a:	1d 97       	sbiw	r26, 0x0d	; 13
    3a0c:	6a 81       	ldd	r22, Y+2	; 0x02
    3a0e:	88 81       	ld	r24, Y
    3a10:	99 81       	ldd	r25, Y+1	; 0x01
    3a12:	19 95       	eicall
    3a14:	0c c0       	rjmp	.+24     	; 0x3a2e <_hal_led_task+0x6e>
    3a16:	8d 81       	ldd	r24, Y+5	; 0x05
    3a18:	88 23       	and	r24, r24
    3a1a:	31 f0       	breq	.+12     	; 0x3a28 <_hal_led_task+0x68>
    3a1c:	81 2f       	mov	r24, r17
    3a1e:	a2 df       	rcall	.-188    	; 0x3964 <_turn_on>
    3a20:	8d 81       	ldd	r24, Y+5	; 0x05
    3a22:	81 50       	subi	r24, 0x01	; 1
    3a24:	8d 83       	std	Y+5, r24	; 0x05
    3a26:	03 c0       	rjmp	.+6      	; 0x3a2e <_hal_led_task+0x6e>
    3a28:	0c 83       	std	Y+4, r16	; 0x04
    3a2a:	81 2f       	mov	r24, r17
    3a2c:	6d df       	rcall	.-294    	; 0x3908 <_turn_off>
    3a2e:	1f 5f       	subi	r17, 0xFF	; 255
    3a30:	26 96       	adiw	r28, 0x06	; 6
    3a32:	14 30       	cpi	r17, 0x04	; 4
    3a34:	79 f6       	brne	.-98     	; 0x39d4 <_hal_led_task+0x14>
    3a36:	65 e0       	ldi	r22, 0x05	; 5
    3a38:	70 e0       	ldi	r23, 0x00	; 0
    3a3a:	80 e0       	ldi	r24, 0x00	; 0
    3a3c:	90 e0       	ldi	r25, 0x00	; 0
    3a3e:	27 d8       	rcall	.-4018   	; 0x2a8e <vTaskDelay>
    3a40:	c6 cf       	rjmp	.-116    	; 0x39ce <_hal_led_task+0xe>

00003a42 <led_create>:
    3a42:	cf 92       	push	r12
    3a44:	df 92       	push	r13
    3a46:	ef 92       	push	r14
    3a48:	ff 92       	push	r15
    3a4a:	0f 93       	push	r16
    3a4c:	1f 93       	push	r17
    3a4e:	cf 93       	push	r28
    3a50:	df 93       	push	r29
    3a52:	06 2f       	mov	r16, r22
    3a54:	0f 2e       	mov	r0, r31
    3a56:	f3 ef       	ldi	r31, 0xF3	; 243
    3a58:	ef 2e       	mov	r14, r31
    3a5a:	fa e1       	ldi	r31, 0x1A	; 26
    3a5c:	ff 2e       	mov	r15, r31
    3a5e:	f0 2d       	mov	r31, r0
    3a60:	d7 01       	movw	r26, r14
    3a62:	18 96       	adiw	r26, 0x08	; 8
    3a64:	ed 91       	ld	r30, X+
    3a66:	fc 91       	ld	r31, X
    3a68:	19 97       	sbiw	r26, 0x09	; 9
    3a6a:	66 e0       	ldi	r22, 0x06	; 6
    3a6c:	87 e2       	ldi	r24, 0x27	; 39
    3a6e:	90 e0       	ldi	r25, 0x00	; 0
    3a70:	19 95       	eicall
    3a72:	c7 e8       	ldi	r28, 0x87	; 135
    3a74:	d9 e1       	ldi	r29, 0x19	; 25
    3a76:	0f 2e       	mov	r0, r31
    3a78:	f8 e2       	ldi	r31, 0x28	; 40
    3a7a:	cf 2e       	mov	r12, r31
    3a7c:	d1 2c       	mov	r13, r1
    3a7e:	f0 2d       	mov	r31, r0
    3a80:	d9 82       	std	Y+1, r13	; 0x01
    3a82:	c8 82       	st	Y, r12
    3a84:	86 e0       	ldi	r24, 0x06	; 6
    3a86:	8a 83       	std	Y+2, r24	; 0x02
    3a88:	1b 82       	std	Y+3, r1	; 0x03
    3a8a:	14 e0       	ldi	r17, 0x04	; 4
    3a8c:	1c 83       	std	Y+4, r17	; 0x04
    3a8e:	80 e0       	ldi	r24, 0x00	; 0
    3a90:	3b df       	rcall	.-394    	; 0x3908 <_turn_off>
    3a92:	d7 01       	movw	r26, r14
    3a94:	18 96       	adiw	r26, 0x08	; 8
    3a96:	ed 91       	ld	r30, X+
    3a98:	fc 91       	ld	r31, X
    3a9a:	19 97       	sbiw	r26, 0x09	; 9
    3a9c:	67 e0       	ldi	r22, 0x07	; 7
    3a9e:	87 e2       	ldi	r24, 0x27	; 39
    3aa0:	90 e0       	ldi	r25, 0x00	; 0
    3aa2:	19 95       	eicall
    3aa4:	df 82       	std	Y+7, r13	; 0x07
    3aa6:	ce 82       	std	Y+6, r12	; 0x06
    3aa8:	87 e0       	ldi	r24, 0x07	; 7
    3aaa:	88 87       	std	Y+8, r24	; 0x08
    3aac:	19 86       	std	Y+9, r1	; 0x09
    3aae:	1a 87       	std	Y+10, r17	; 0x0a
    3ab0:	81 e0       	ldi	r24, 0x01	; 1
    3ab2:	2a df       	rcall	.-428    	; 0x3908 <_turn_off>
    3ab4:	d7 01       	movw	r26, r14
    3ab6:	18 96       	adiw	r26, 0x08	; 8
    3ab8:	ed 91       	ld	r30, X+
    3aba:	fc 91       	ld	r31, X
    3abc:	19 97       	sbiw	r26, 0x09	; 9
    3abe:	65 e0       	ldi	r22, 0x05	; 5
    3ac0:	83 e3       	ldi	r24, 0x33	; 51
    3ac2:	90 e0       	ldi	r25, 0x00	; 0
    3ac4:	19 95       	eicall
    3ac6:	d7 01       	movw	r26, r14
    3ac8:	18 96       	adiw	r26, 0x08	; 8
    3aca:	ed 91       	ld	r30, X+
    3acc:	fc 91       	ld	r31, X
    3ace:	19 97       	sbiw	r26, 0x09	; 9
    3ad0:	61 e0       	ldi	r22, 0x01	; 1
    3ad2:	84 e3       	ldi	r24, 0x34	; 52
    3ad4:	90 e0       	ldi	r25, 0x00	; 0
    3ad6:	19 95       	eicall
    3ad8:	84 e3       	ldi	r24, 0x34	; 52
    3ada:	90 e0       	ldi	r25, 0x00	; 0
    3adc:	9d 87       	std	Y+13, r25	; 0x0d
    3ade:	8c 87       	std	Y+12, r24	; 0x0c
    3ae0:	85 e0       	ldi	r24, 0x05	; 5
    3ae2:	8e 87       	std	Y+14, r24	; 0x0e
    3ae4:	1f 86       	std	Y+15, r1	; 0x0f
    3ae6:	18 8b       	std	Y+16, r17	; 0x10
    3ae8:	82 e0       	ldi	r24, 0x02	; 2
    3aea:	0e df       	rcall	.-484    	; 0x3908 <_turn_off>
    3aec:	d7 01       	movw	r26, r14
    3aee:	18 96       	adiw	r26, 0x08	; 8
    3af0:	ed 91       	ld	r30, X+
    3af2:	fc 91       	ld	r31, X
    3af4:	19 97       	sbiw	r26, 0x09	; 9
    3af6:	64 e0       	ldi	r22, 0x04	; 4
    3af8:	81 e0       	ldi	r24, 0x01	; 1
    3afa:	91 e0       	ldi	r25, 0x01	; 1
    3afc:	19 95       	eicall
    3afe:	d7 01       	movw	r26, r14
    3b00:	18 96       	adiw	r26, 0x08	; 8
    3b02:	ed 91       	ld	r30, X+
    3b04:	fc 91       	ld	r31, X
    3b06:	19 97       	sbiw	r26, 0x09	; 9
    3b08:	61 e0       	ldi	r22, 0x01	; 1
    3b0a:	82 e0       	ldi	r24, 0x02	; 2
    3b0c:	91 e0       	ldi	r25, 0x01	; 1
    3b0e:	19 95       	eicall
    3b10:	82 e0       	ldi	r24, 0x02	; 2
    3b12:	91 e0       	ldi	r25, 0x01	; 1
    3b14:	9b 8b       	std	Y+19, r25	; 0x13
    3b16:	8a 8b       	std	Y+18, r24	; 0x12
    3b18:	1c 8b       	std	Y+20, r17	; 0x14
    3b1a:	1d 8a       	std	Y+21, r1	; 0x15
    3b1c:	1e 8b       	std	Y+22, r17	; 0x16
    3b1e:	83 e0       	ldi	r24, 0x03	; 3
    3b20:	f3 de       	rcall	.-538    	; 0x3908 <_turn_off>
    3b22:	e1 2c       	mov	r14, r1
    3b24:	f1 2c       	mov	r15, r1
    3b26:	20 e0       	ldi	r18, 0x00	; 0
    3b28:	30 e0       	ldi	r19, 0x00	; 0
    3b2a:	40 ec       	ldi	r20, 0xC0	; 192
    3b2c:	50 e0       	ldi	r21, 0x00	; 0
    3b2e:	6f ea       	ldi	r22, 0xAF	; 175
    3b30:	75 e0       	ldi	r23, 0x05	; 5
    3b32:	80 ee       	ldi	r24, 0xE0	; 224
    3b34:	9c e1       	ldi	r25, 0x1C	; 28
    3b36:	0e 94 87 12 	call	0x250e	; 0x250e <xTaskCreate>
    3b3a:	df 91       	pop	r29
    3b3c:	cf 91       	pop	r28
    3b3e:	1f 91       	pop	r17
    3b40:	0f 91       	pop	r16
    3b42:	ff 90       	pop	r15
    3b44:	ef 90       	pop	r14
    3b46:	df 90       	pop	r13
    3b48:	cf 90       	pop	r12
    3b4a:	08 95       	ret

00003b4c <led_slow_blink>:
    3b4c:	0f 93       	push	r16
    3b4e:	1f 93       	push	r17
    3b50:	cf 93       	push	r28
    3b52:	df 93       	push	r29
    3b54:	c8 2f       	mov	r28, r24
    3b56:	d0 e0       	ldi	r29, 0x00	; 0
    3b58:	8e 01       	movw	r16, r28
    3b5a:	00 0f       	add	r16, r16
    3b5c:	11 1f       	adc	r17, r17
    3b5e:	d8 01       	movw	r26, r16
    3b60:	ac 0f       	add	r26, r28
    3b62:	bd 1f       	adc	r27, r29
    3b64:	aa 0f       	add	r26, r26
    3b66:	bb 1f       	adc	r27, r27
    3b68:	a9 57       	subi	r26, 0x79	; 121
    3b6a:	b6 4e       	sbci	r27, 0xE6	; 230
    3b6c:	e0 91 ff 1a 	lds	r30, 0x1AFF	; 0x801aff <register_access+0xc>
    3b70:	f0 91 00 1b 	lds	r31, 0x1B00	; 0x801b00 <register_access+0xd>
    3b74:	12 96       	adiw	r26, 0x02	; 2
    3b76:	6c 91       	ld	r22, X
    3b78:	12 97       	sbiw	r26, 0x02	; 2
    3b7a:	8d 91       	ld	r24, X+
    3b7c:	9c 91       	ld	r25, X
    3b7e:	19 95       	eicall
    3b80:	c0 0f       	add	r28, r16
    3b82:	d1 1f       	adc	r29, r17
    3b84:	cc 0f       	add	r28, r28
    3b86:	dd 1f       	adc	r29, r29
    3b88:	c9 57       	subi	r28, 0x79	; 121
    3b8a:	d6 4e       	sbci	r29, 0xE6	; 230
    3b8c:	81 e0       	ldi	r24, 0x01	; 1
    3b8e:	8c 83       	std	Y+4, r24	; 0x04
    3b90:	df 91       	pop	r29
    3b92:	cf 91       	pop	r28
    3b94:	1f 91       	pop	r17
    3b96:	0f 91       	pop	r16
    3b98:	08 95       	ret

00003b9a <led_fast_blink>:
    3b9a:	0f 93       	push	r16
    3b9c:	1f 93       	push	r17
    3b9e:	cf 93       	push	r28
    3ba0:	df 93       	push	r29
    3ba2:	c8 2f       	mov	r28, r24
    3ba4:	d0 e0       	ldi	r29, 0x00	; 0
    3ba6:	8e 01       	movw	r16, r28
    3ba8:	00 0f       	add	r16, r16
    3baa:	11 1f       	adc	r17, r17
    3bac:	d8 01       	movw	r26, r16
    3bae:	ac 0f       	add	r26, r28
    3bb0:	bd 1f       	adc	r27, r29
    3bb2:	aa 0f       	add	r26, r26
    3bb4:	bb 1f       	adc	r27, r27
    3bb6:	a9 57       	subi	r26, 0x79	; 121
    3bb8:	b6 4e       	sbci	r27, 0xE6	; 230
    3bba:	e0 91 ff 1a 	lds	r30, 0x1AFF	; 0x801aff <register_access+0xc>
    3bbe:	f0 91 00 1b 	lds	r31, 0x1B00	; 0x801b00 <register_access+0xd>
    3bc2:	12 96       	adiw	r26, 0x02	; 2
    3bc4:	6c 91       	ld	r22, X
    3bc6:	12 97       	sbiw	r26, 0x02	; 2
    3bc8:	8d 91       	ld	r24, X+
    3bca:	9c 91       	ld	r25, X
    3bcc:	19 95       	eicall
    3bce:	c0 0f       	add	r28, r16
    3bd0:	d1 1f       	adc	r29, r17
    3bd2:	cc 0f       	add	r28, r28
    3bd4:	dd 1f       	adc	r29, r29
    3bd6:	c9 57       	subi	r28, 0x79	; 121
    3bd8:	d6 4e       	sbci	r29, 0xE6	; 230
    3bda:	82 e0       	ldi	r24, 0x02	; 2
    3bdc:	8c 83       	std	Y+4, r24	; 0x04
    3bde:	df 91       	pop	r29
    3be0:	cf 91       	pop	r28
    3be2:	1f 91       	pop	r17
    3be4:	0f 91       	pop	r16
    3be6:	08 95       	ret

00003be8 <led_led_on>:
    3be8:	28 2f       	mov	r18, r24
    3bea:	30 e0       	ldi	r19, 0x00	; 0
    3bec:	f9 01       	movw	r30, r18
    3bee:	ee 0f       	add	r30, r30
    3bf0:	ff 1f       	adc	r31, r31
    3bf2:	e2 0f       	add	r30, r18
    3bf4:	f3 1f       	adc	r31, r19
    3bf6:	ee 0f       	add	r30, r30
    3bf8:	ff 1f       	adc	r31, r31
    3bfa:	e9 57       	subi	r30, 0x79	; 121
    3bfc:	f6 4e       	sbci	r31, 0xE6	; 230
    3bfe:	93 e0       	ldi	r25, 0x03	; 3
    3c00:	94 83       	std	Z+4, r25	; 0x04
    3c02:	b0 ce       	rjmp	.-672    	; 0x3964 <_turn_on>
    3c04:	08 95       	ret

00003c06 <led_led_off>:
    3c06:	28 2f       	mov	r18, r24
    3c08:	30 e0       	ldi	r19, 0x00	; 0
    3c0a:	f9 01       	movw	r30, r18
    3c0c:	ee 0f       	add	r30, r30
    3c0e:	ff 1f       	adc	r31, r31
    3c10:	e2 0f       	add	r30, r18
    3c12:	f3 1f       	adc	r31, r19
    3c14:	ee 0f       	add	r30, r30
    3c16:	ff 1f       	adc	r31, r31
    3c18:	e9 57       	subi	r30, 0x79	; 121
    3c1a:	f6 4e       	sbci	r31, 0xE6	; 230
    3c1c:	94 e0       	ldi	r25, 0x04	; 4
    3c1e:	94 83       	std	Z+4, r25	; 0x04
    3c20:	73 ce       	rjmp	.-794    	; 0x3908 <_turn_off>
    3c22:	08 95       	ret

00003c24 <led_long_puls>:
    3c24:	90 e0       	ldi	r25, 0x00	; 0
    3c26:	fc 01       	movw	r30, r24
    3c28:	ee 0f       	add	r30, r30
    3c2a:	ff 1f       	adc	r31, r31
    3c2c:	df 01       	movw	r26, r30
    3c2e:	a8 0f       	add	r26, r24
    3c30:	b9 1f       	adc	r27, r25
    3c32:	aa 0f       	add	r26, r26
    3c34:	bb 1f       	adc	r27, r27
    3c36:	a9 57       	subi	r26, 0x79	; 121
    3c38:	b6 4e       	sbci	r27, 0xE6	; 230
    3c3a:	24 e0       	ldi	r18, 0x04	; 4
    3c3c:	15 96       	adiw	r26, 0x05	; 5
    3c3e:	2c 93       	st	X, r18
    3c40:	15 97       	sbiw	r26, 0x05	; 5
    3c42:	fd 01       	movw	r30, r26
    3c44:	14 82       	std	Z+4, r1	; 0x04
    3c46:	08 95       	ret

00003c48 <led_short_puls>:
    3c48:	90 e0       	ldi	r25, 0x00	; 0
    3c4a:	fc 01       	movw	r30, r24
    3c4c:	ee 0f       	add	r30, r30
    3c4e:	ff 1f       	adc	r31, r31
    3c50:	df 01       	movw	r26, r30
    3c52:	a8 0f       	add	r26, r24
    3c54:	b9 1f       	adc	r27, r25
    3c56:	aa 0f       	add	r26, r26
    3c58:	bb 1f       	adc	r27, r27
    3c5a:	a9 57       	subi	r26, 0x79	; 121
    3c5c:	b6 4e       	sbci	r27, 0xE6	; 230
    3c5e:	21 e0       	ldi	r18, 0x01	; 1
    3c60:	15 96       	adiw	r26, 0x05	; 5
    3c62:	2c 93       	st	X, r18
    3c64:	15 97       	sbiw	r26, 0x05	; 5
    3c66:	fd 01       	movw	r30, r26
    3c68:	14 82       	std	Z+4, r1	; 0x04
    3c6a:	08 95       	ret

00003c6c <_serial_call_back>:
    3c6c:	0f 93       	push	r16
    3c6e:	1f 93       	push	r17
    3c70:	cf 93       	push	r28
    3c72:	df 93       	push	r29
    3c74:	1f 92       	push	r1
    3c76:	1f 92       	push	r1
    3c78:	cd b7       	in	r28, 0x3d	; 61
    3c7a:	de b7       	in	r29, 0x3e	; 62
    3c7c:	8c 01       	movw	r16, r24
    3c7e:	19 82       	std	Y+1, r1	; 0x01
    3c80:	2d c0       	rjmp	.+90     	; 0x3cdc <_serial_call_back+0x70>
    3c82:	e0 91 03 1a 	lds	r30, 0x1A03	; 0x801a03 <rec_buf_inp.2947>
    3c86:	ec 32       	cpi	r30, 0x2C	; 44
    3c88:	50 f4       	brcc	.+20     	; 0x3c9e <_serial_call_back+0x32>
    3c8a:	81 e0       	ldi	r24, 0x01	; 1
    3c8c:	8e 0f       	add	r24, r30
    3c8e:	80 93 03 1a 	sts	0x1A03, r24	; 0x801a03 <rec_buf_inp.2947>
    3c92:	f0 e0       	ldi	r31, 0x00	; 0
    3c94:	eb 5c       	subi	r30, 0xCB	; 203
    3c96:	f5 4e       	sbci	r31, 0xE5	; 229
    3c98:	8a 81       	ldd	r24, Y+2	; 0x02
    3c9a:	80 83       	st	Z, r24
    3c9c:	02 c0       	rjmp	.+4      	; 0x3ca2 <_serial_call_back+0x36>
    3c9e:	10 92 03 1a 	sts	0x1A03, r1	; 0x801a03 <rec_buf_inp.2947>
    3ca2:	8a 81       	ldd	r24, Y+2	; 0x02
    3ca4:	8a 30       	cpi	r24, 0x0A	; 10
    3ca6:	d1 f4       	brne	.+52     	; 0x3cdc <_serial_call_back+0x70>
    3ca8:	40 91 03 1a 	lds	r20, 0x1A03	; 0x801a03 <rec_buf_inp.2947>
    3cac:	50 e0       	ldi	r21, 0x00	; 0
    3cae:	fa 01       	movw	r30, r20
    3cb0:	ed 5c       	subi	r30, 0xCD	; 205
    3cb2:	f5 4e       	sbci	r31, 0xE5	; 229
    3cb4:	10 82       	st	Z, r1
    3cb6:	41 50       	subi	r20, 0x01	; 1
    3cb8:	51 09       	sbc	r21, r1
    3cba:	9e 01       	movw	r18, r28
    3cbc:	2f 5f       	subi	r18, 0xFF	; 255
    3cbe:	3f 4f       	sbci	r19, 0xFF	; 255
    3cc0:	65 e3       	ldi	r22, 0x35	; 53
    3cc2:	7a e1       	ldi	r23, 0x1A	; 26
    3cc4:	80 91 06 1a 	lds	r24, 0x1A06	; 0x801a06 <_serial_reply_buffer_handle>
    3cc8:	90 91 07 1a 	lds	r25, 0x1A07	; 0x801a07 <_serial_reply_buffer_handle+0x1>
    3ccc:	0e 94 04 11 	call	0x2208	; 0x2208 <xStreamBufferSendFromISR>
    3cd0:	89 81       	ldd	r24, Y+1	; 0x01
    3cd2:	81 11       	cpse	r24, r1
    3cd4:	0e 94 56 0b 	call	0x16ac	; 0x16ac <vPortYield>
    3cd8:	10 92 03 1a 	sts	0x1A03, r1	; 0x801a03 <rec_buf_inp.2947>
    3cdc:	be 01       	movw	r22, r28
    3cde:	6e 5f       	subi	r22, 0xFE	; 254
    3ce0:	7f 4f       	sbci	r23, 0xFF	; 255
    3ce2:	c8 01       	movw	r24, r16
    3ce4:	8f d5       	rcall	.+2846   	; 0x4804 <serial_get_byte>
    3ce6:	88 23       	and	r24, r24
    3ce8:	61 f2       	breq	.-104    	; 0x3c82 <_serial_call_back+0x16>
    3cea:	0f 90       	pop	r0
    3cec:	0f 90       	pop	r0
    3cee:	df 91       	pop	r29
    3cf0:	cf 91       	pop	r28
    3cf2:	1f 91       	pop	r17
    3cf4:	0f 91       	pop	r16
    3cf6:	08 95       	ret

00003cf8 <_upload_message>:
    3cf8:	0f 93       	push	r16
    3cfa:	1f 93       	push	r17
    3cfc:	cf 93       	push	r28
    3cfe:	df 93       	push	r29
    3d00:	8c 01       	movw	r16, r24
    3d02:	eb 01       	movw	r28, r22
    3d04:	80 91 06 1a 	lds	r24, 0x1A06	; 0x801a06 <_serial_reply_buffer_handle>
    3d08:	90 91 07 1a 	lds	r25, 0x1A07	; 0x801a07 <_serial_reply_buffer_handle+0x1>
    3d0c:	0e 94 1c 10 	call	0x2038	; 0x2038 <xStreamBufferReset>
    3d10:	b8 01       	movw	r22, r16
    3d12:	8f e9       	ldi	r24, 0x9F	; 159
    3d14:	99 e1       	ldi	r25, 0x19	; 25
    3d16:	0e 94 0f 2c 	call	0x581e	; 0x581e <strcpy>
    3d1a:	20 97       	sbiw	r28, 0x00	; 0
    3d1c:	79 f0       	breq	.+30     	; 0x3d3c <_upload_message+0x44>
    3d1e:	ef e9       	ldi	r30, 0x9F	; 159
    3d20:	f9 e1       	ldi	r31, 0x19	; 25
    3d22:	01 90       	ld	r0, Z+
    3d24:	00 20       	and	r0, r0
    3d26:	e9 f7       	brne	.-6      	; 0x3d22 <_upload_message+0x2a>
    3d28:	31 97       	sbiw	r30, 0x01	; 1
    3d2a:	80 e2       	ldi	r24, 0x20	; 32
    3d2c:	90 e0       	ldi	r25, 0x00	; 0
    3d2e:	91 83       	std	Z+1, r25	; 0x01
    3d30:	80 83       	st	Z, r24
    3d32:	be 01       	movw	r22, r28
    3d34:	8f e9       	ldi	r24, 0x9F	; 159
    3d36:	99 e1       	ldi	r25, 0x19	; 25
    3d38:	0e 94 04 2c 	call	0x5808	; 0x5808 <strcat>
    3d3c:	ef e9       	ldi	r30, 0x9F	; 159
    3d3e:	f9 e1       	ldi	r31, 0x19	; 25
    3d40:	df 01       	movw	r26, r30
    3d42:	0d 90       	ld	r0, X+
    3d44:	00 20       	and	r0, r0
    3d46:	e9 f7       	brne	.-6      	; 0x3d42 <_upload_message+0x4a>
    3d48:	11 97       	sbiw	r26, 0x01	; 1
    3d4a:	8d e0       	ldi	r24, 0x0D	; 13
    3d4c:	9a e0       	ldi	r25, 0x0A	; 10
    3d4e:	11 96       	adiw	r26, 0x01	; 1
    3d50:	9c 93       	st	X, r25
    3d52:	8e 93       	st	-X, r24
    3d54:	12 96       	adiw	r26, 0x02	; 2
    3d56:	1c 92       	st	X, r1
    3d58:	01 90       	ld	r0, Z+
    3d5a:	00 20       	and	r0, r0
    3d5c:	e9 f7       	brne	.-6      	; 0x3d58 <_upload_message+0x60>
    3d5e:	31 97       	sbiw	r30, 0x01	; 1
    3d60:	ef 59       	subi	r30, 0x9F	; 159
    3d62:	f9 41       	sbci	r31, 0x19	; 25
    3d64:	ae 2f       	mov	r26, r30
    3d66:	8f e9       	ldi	r24, 0x9F	; 159
    3d68:	99 e1       	ldi	r25, 0x19	; 25
    3d6a:	ac 01       	movw	r20, r24
    3d6c:	6a 2f       	mov	r22, r26
    3d6e:	80 91 08 1a 	lds	r24, 0x1A08	; 0x801a08 <_rn2483_serial>
    3d72:	90 91 09 1a 	lds	r25, 0x1A09	; 0x801a09 <_rn2483_serial+0x1>
    3d76:	f6 d4       	rcall	.+2540   	; 0x4764 <serial_send_bytes>
    3d78:	81 11       	cpse	r24, r1
    3d7a:	11 c0       	rjmp	.+34     	; 0x3d9e <_upload_message+0xa6>
    3d7c:	08 e2       	ldi	r16, 0x28	; 40
    3d7e:	15 e0       	ldi	r17, 0x05	; 5
    3d80:	20 e0       	ldi	r18, 0x00	; 0
    3d82:	30 e0       	ldi	r19, 0x00	; 0
    3d84:	4d e2       	ldi	r20, 0x2D	; 45
    3d86:	50 e0       	ldi	r21, 0x00	; 0
    3d88:	6f e8       	ldi	r22, 0x8F	; 143
    3d8a:	7a e1       	ldi	r23, 0x1A	; 26
    3d8c:	80 91 06 1a 	lds	r24, 0x1A06	; 0x801a06 <_serial_reply_buffer_handle>
    3d90:	90 91 07 1a 	lds	r25, 0x1A07	; 0x801a07 <_serial_reply_buffer_handle+0x1>
    3d94:	0e 94 46 11 	call	0x228c	; 0x228c <xStreamBufferReceive>
    3d98:	8f e8       	ldi	r24, 0x8F	; 143
    3d9a:	9a e1       	ldi	r25, 0x1A	; 26
    3d9c:	02 c0       	rjmp	.+4      	; 0x3da2 <_upload_message+0xaa>
    3d9e:	80 e0       	ldi	r24, 0x00	; 0
    3da0:	90 e0       	ldi	r25, 0x00	; 0
    3da2:	df 91       	pop	r29
    3da4:	cf 91       	pop	r28
    3da6:	1f 91       	pop	r17
    3da8:	0f 91       	pop	r16
    3daa:	08 95       	ret

00003dac <_reply2return_code>:
    3dac:	2f 92       	push	r2
    3dae:	3f 92       	push	r3
    3db0:	4f 92       	push	r4
    3db2:	5f 92       	push	r5
    3db4:	6f 92       	push	r6
    3db6:	7f 92       	push	r7
    3db8:	8f 92       	push	r8
    3dba:	9f 92       	push	r9
    3dbc:	af 92       	push	r10
    3dbe:	bf 92       	push	r11
    3dc0:	cf 92       	push	r12
    3dc2:	df 92       	push	r13
    3dc4:	ef 92       	push	r14
    3dc6:	ff 92       	push	r15
    3dc8:	0f 93       	push	r16
    3dca:	1f 93       	push	r17
    3dcc:	cf 93       	push	r28
    3dce:	df 93       	push	r29
    3dd0:	5c 01       	movw	r10, r24
    3dd2:	fc 01       	movw	r30, r24
    3dd4:	01 90       	ld	r0, Z+
    3dd6:	00 20       	and	r0, r0
    3dd8:	e9 f7       	brne	.-6      	; 0x3dd4 <_reply2return_code+0x28>
    3dda:	31 97       	sbiw	r30, 0x01	; 1
    3ddc:	6f 01       	movw	r12, r30
    3dde:	c8 1a       	sub	r12, r24
    3de0:	d9 0a       	sbc	r13, r25
    3de2:	5c 2c       	mov	r5, r12
    3de4:	0f 2e       	mov	r0, r31
    3de6:	f0 e5       	ldi	r31, 0x50	; 80
    3de8:	8f 2e       	mov	r8, r31
    3dea:	f8 e0       	ldi	r31, 0x08	; 8
    3dec:	9f 2e       	mov	r9, r31
    3dee:	f0 2d       	mov	r31, r0
    3df0:	e1 2c       	mov	r14, r1
    3df2:	f1 2c       	mov	r15, r1
    3df4:	4c 2c       	mov	r4, r12
    3df6:	37 01       	movw	r6, r14
    3df8:	f4 01       	movw	r30, r8
    3dfa:	01 81       	ldd	r16, Z+1	; 0x01
    3dfc:	12 81       	ldd	r17, Z+2	; 0x02
    3dfe:	e8 01       	movw	r28, r16
    3e00:	09 90       	ld	r0, Y+
    3e02:	00 20       	and	r0, r0
    3e04:	e9 f7       	brne	.-6      	; 0x3e00 <_reply2return_code+0x54>
    3e06:	21 97       	sbiw	r28, 0x01	; 1
    3e08:	c0 1b       	sub	r28, r16
    3e0a:	d1 0b       	sbc	r29, r17
    3e0c:	3c 2e       	mov	r3, r28
    3e0e:	f9 e0       	ldi	r31, 0x09	; 9
    3e10:	cf 16       	cp	r12, r31
    3e12:	d1 04       	cpc	r13, r1
    3e14:	58 f0       	brcs	.+22     	; 0x3e2c <_reply2return_code+0x80>
    3e16:	f4 01       	movw	r30, r8
    3e18:	20 80       	ld	r2, Z
    3e1a:	fe e0       	ldi	r31, 0x0E	; 14
    3e1c:	2f 12       	cpse	r2, r31
    3e1e:	06 c0       	rjmp	.+12     	; 0x3e2c <_reply2return_code+0x80>
    3e20:	b8 01       	movw	r22, r16
    3e22:	c5 01       	movw	r24, r10
    3e24:	0e 94 df 2b 	call	0x57be	; 0x57be <strcasestr>
    3e28:	89 2b       	or	r24, r25
    3e2a:	09 f5       	brne	.+66     	; 0x3e6e <_reply2return_code+0xc2>
    3e2c:	44 2d       	mov	r20, r4
    3e2e:	35 14       	cp	r3, r5
    3e30:	08 f4       	brcc	.+2      	; 0x3e34 <_reply2return_code+0x88>
    3e32:	4c 2f       	mov	r20, r28
    3e34:	50 e0       	ldi	r21, 0x00	; 0
    3e36:	b8 01       	movw	r22, r16
    3e38:	c5 01       	movw	r24, r10
    3e3a:	0e 94 16 2c 	call	0x582c	; 0x582c <strncasecmp>
    3e3e:	89 2b       	or	r24, r25
    3e40:	49 f4       	brne	.+18     	; 0x3e54 <_reply2return_code+0xa8>
    3e42:	f3 01       	movw	r30, r6
    3e44:	ee 0f       	add	r30, r30
    3e46:	ff 1f       	adc	r31, r31
    3e48:	e6 0d       	add	r30, r6
    3e4a:	f7 1d       	adc	r31, r7
    3e4c:	e0 5b       	subi	r30, 0xB0	; 176
    3e4e:	f7 4f       	sbci	r31, 0xF7	; 247
    3e50:	20 80       	ld	r2, Z
    3e52:	0d c0       	rjmp	.+26     	; 0x3e6e <_reply2return_code+0xc2>
    3e54:	8f ef       	ldi	r24, 0xFF	; 255
    3e56:	e8 1a       	sub	r14, r24
    3e58:	f8 0a       	sbc	r15, r24
    3e5a:	e3 e0       	ldi	r30, 0x03	; 3
    3e5c:	8e 0e       	add	r8, r30
    3e5e:	91 1c       	adc	r9, r1
    3e60:	f1 e1       	ldi	r31, 0x11	; 17
    3e62:	ef 16       	cp	r14, r31
    3e64:	f1 04       	cpc	r15, r1
    3e66:	39 f6       	brne	.-114    	; 0x3df6 <_reply2return_code+0x4a>
    3e68:	68 94       	set
    3e6a:	22 24       	eor	r2, r2
    3e6c:	24 f8       	bld	r2, 4
    3e6e:	82 2d       	mov	r24, r2
    3e70:	df 91       	pop	r29
    3e72:	cf 91       	pop	r28
    3e74:	1f 91       	pop	r17
    3e76:	0f 91       	pop	r16
    3e78:	ff 90       	pop	r15
    3e7a:	ef 90       	pop	r14
    3e7c:	df 90       	pop	r13
    3e7e:	cf 90       	pop	r12
    3e80:	bf 90       	pop	r11
    3e82:	af 90       	pop	r10
    3e84:	9f 90       	pop	r9
    3e86:	8f 90       	pop	r8
    3e88:	7f 90       	pop	r7
    3e8a:	6f 90       	pop	r6
    3e8c:	5f 90       	pop	r5
    3e8e:	4f 90       	pop	r4
    3e90:	3f 90       	pop	r3
    3e92:	2f 90       	pop	r2
    3e94:	08 95       	ret

00003e96 <_upload_message_rc>:
    3e96:	30 df       	rcall	.-416    	; 0x3cf8 <_upload_message>
    3e98:	89 cf       	rjmp	.-238    	; 0x3dac <_reply2return_code>
    3e9a:	08 95       	ret

00003e9c <lora_driver_flush_buffers>:
    3e9c:	80 91 06 1a 	lds	r24, 0x1A06	; 0x801a06 <_serial_reply_buffer_handle>
    3ea0:	90 91 07 1a 	lds	r25, 0x1A07	; 0x801a07 <_serial_reply_buffer_handle+0x1>
    3ea4:	0c 94 1c 10 	jmp	0x2038	; 0x2038 <xStreamBufferReset>
    3ea8:	08 95       	ret

00003eaa <lora_driver_create>:
    3eaa:	8f 92       	push	r8
    3eac:	9f 92       	push	r9
    3eae:	af 92       	push	r10
    3eb0:	cf 92       	push	r12
    3eb2:	ef 92       	push	r14
    3eb4:	0f 93       	push	r16
    3eb6:	1f 93       	push	r17
    3eb8:	cf 93       	push	r28
    3eba:	c8 2f       	mov	r28, r24
    3ebc:	8b 01       	movw	r16, r22
    3ebe:	41 e0       	ldi	r20, 0x01	; 1
    3ec0:	60 e0       	ldi	r22, 0x00	; 0
    3ec2:	70 e0       	ldi	r23, 0x00	; 0
    3ec4:	88 ec       	ldi	r24, 0xC8	; 200
    3ec6:	90 e0       	ldi	r25, 0x00	; 0
    3ec8:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <xStreamBufferGenericCreate>
    3ecc:	90 93 07 1a 	sts	0x1A07, r25	; 0x801a07 <_serial_reply_buffer_handle+0x1>
    3ed0:	80 93 06 1a 	sts	0x1A06, r24	; 0x801a06 <_serial_reply_buffer_handle>
    3ed4:	10 93 05 1a 	sts	0x1A05, r17	; 0x801a05 <_downlinkMessageBuffer+0x1>
    3ed8:	00 93 04 1a 	sts	0x1A04, r16	; 0x801a04 <_downlinkMessageBuffer>
    3edc:	0f 2e       	mov	r0, r31
    3ede:	f6 e3       	ldi	r31, 0x36	; 54
    3ee0:	8f 2e       	mov	r8, r31
    3ee2:	fe e1       	ldi	r31, 0x1E	; 30
    3ee4:	9f 2e       	mov	r9, r31
    3ee6:	f0 2d       	mov	r31, r0
    3ee8:	68 94       	set
    3eea:	aa 24       	eor	r10, r10
    3eec:	a6 f8       	bld	r10, 6
    3eee:	68 94       	set
    3ef0:	cc 24       	eor	r12, r12
    3ef2:	c6 f8       	bld	r12, 6
    3ef4:	e1 2c       	mov	r14, r1
    3ef6:	00 e0       	ldi	r16, 0x00	; 0
    3ef8:	23 e0       	ldi	r18, 0x03	; 3
    3efa:	40 e0       	ldi	r20, 0x00	; 0
    3efc:	51 ee       	ldi	r21, 0xE1	; 225
    3efe:	60 e0       	ldi	r22, 0x00	; 0
    3f00:	70 e0       	ldi	r23, 0x00	; 0
    3f02:	8c 2f       	mov	r24, r28
    3f04:	74 d3       	rcall	.+1768   	; 0x45ee <serial_new_instance>
    3f06:	90 93 09 1a 	sts	0x1A09, r25	; 0x801a09 <_rn2483_serial+0x1>
    3f0a:	80 93 08 1a 	sts	0x1A08, r24	; 0x801a08 <_rn2483_serial>
    3f0e:	e0 91 fb 1a 	lds	r30, 0x1AFB	; 0x801afb <register_access+0x8>
    3f12:	f0 91 fc 1a 	lds	r31, 0x1AFC	; 0x801afc <register_access+0x9>
    3f16:	64 e0       	ldi	r22, 0x04	; 4
    3f18:	87 e0       	ldi	r24, 0x07	; 7
    3f1a:	91 e0       	ldi	r25, 0x01	; 1
    3f1c:	19 95       	eicall
    3f1e:	cf 91       	pop	r28
    3f20:	1f 91       	pop	r17
    3f22:	0f 91       	pop	r16
    3f24:	ef 90       	pop	r14
    3f26:	cf 90       	pop	r12
    3f28:	af 90       	pop	r10
    3f2a:	9f 90       	pop	r9
    3f2c:	8f 90       	pop	r8
    3f2e:	08 95       	ret

00003f30 <lora_driver_reset_rn2483>:
    3f30:	88 23       	and	r24, r24
    3f32:	49 f0       	breq	.+18     	; 0x3f46 <lora_driver_reset_rn2483+0x16>
    3f34:	e0 91 05 1b 	lds	r30, 0x1B05	; 0x801b05 <register_access+0x12>
    3f38:	f0 91 06 1b 	lds	r31, 0x1B06	; 0x801b06 <register_access+0x13>
    3f3c:	64 e0       	ldi	r22, 0x04	; 4
    3f3e:	88 e0       	ldi	r24, 0x08	; 8
    3f40:	91 e0       	ldi	r25, 0x01	; 1
    3f42:	19 95       	eicall
    3f44:	08 95       	ret
    3f46:	e0 91 fb 1a 	lds	r30, 0x1AFB	; 0x801afb <register_access+0x8>
    3f4a:	f0 91 fc 1a 	lds	r31, 0x1AFC	; 0x801afc <register_access+0x9>
    3f4e:	64 e0       	ldi	r22, 0x04	; 4
    3f50:	88 e0       	ldi	r24, 0x08	; 8
    3f52:	91 e0       	ldi	r25, 0x01	; 1
    3f54:	19 95       	eicall
    3f56:	08 95       	ret

00003f58 <lora_driver_rn2483_factory_reset>:
    3f58:	60 e0       	ldi	r22, 0x00	; 0
    3f5a:	70 e0       	ldi	r23, 0x00	; 0
    3f5c:	86 ed       	ldi	r24, 0xD6	; 214
    3f5e:	95 e0       	ldi	r25, 0x05	; 5
    3f60:	cb de       	rcall	.-618    	; 0x3cf8 <_upload_message>
    3f62:	ef e8       	ldi	r30, 0x8F	; 143
    3f64:	fa e1       	ldi	r31, 0x1A	; 26
    3f66:	01 90       	ld	r0, Z+
    3f68:	00 20       	and	r0, r0
    3f6a:	e9 f7       	brne	.-6      	; 0x3f66 <lora_driver_rn2483_factory_reset+0xe>
    3f6c:	31 97       	sbiw	r30, 0x01	; 1
    3f6e:	ef 58       	subi	r30, 0x8F	; 143
    3f70:	fa 41       	sbci	r31, 0x1A	; 26
    3f72:	81 e0       	ldi	r24, 0x01	; 1
    3f74:	75 97       	sbiw	r30, 0x15	; 21
    3f76:	08 f0       	brcs	.+2      	; 0x3f7a <lora_driver_rn2483_factory_reset+0x22>
    3f78:	80 e0       	ldi	r24, 0x00	; 0
    3f7a:	08 95       	ret

00003f7c <lora_driver_get_rn2483_hweui>:
    3f7c:	cf 93       	push	r28
    3f7e:	df 93       	push	r29
    3f80:	ec 01       	movw	r28, r24
    3f82:	60 e0       	ldi	r22, 0x00	; 0
    3f84:	70 e0       	ldi	r23, 0x00	; 0
    3f86:	87 ee       	ldi	r24, 0xE7	; 231
    3f88:	95 e0       	ldi	r25, 0x05	; 5
    3f8a:	b6 de       	rcall	.-660    	; 0x3cf8 <_upload_message>
    3f8c:	ef e8       	ldi	r30, 0x8F	; 143
    3f8e:	fa e1       	ldi	r31, 0x1A	; 26
    3f90:	01 90       	ld	r0, Z+
    3f92:	00 20       	and	r0, r0
    3f94:	e9 f7       	brne	.-6      	; 0x3f90 <lora_driver_get_rn2483_hweui+0x14>
    3f96:	e0 5a       	subi	r30, 0xA0	; 160
    3f98:	fa 41       	sbci	r31, 0x1A	; 26
    3f9a:	39 f4       	brne	.+14     	; 0x3faa <lora_driver_get_rn2483_hweui+0x2e>
    3f9c:	6f e8       	ldi	r22, 0x8F	; 143
    3f9e:	7a e1       	ldi	r23, 0x1A	; 26
    3fa0:	ce 01       	movw	r24, r28
    3fa2:	0e 94 0f 2c 	call	0x581e	; 0x581e <strcpy>
    3fa6:	80 e0       	ldi	r24, 0x00	; 0
    3fa8:	02 c0       	rjmp	.+4      	; 0x3fae <lora_driver_get_rn2483_hweui+0x32>
    3faa:	18 82       	st	Y, r1
    3fac:	81 e0       	ldi	r24, 0x01	; 1
    3fae:	df 91       	pop	r29
    3fb0:	cf 91       	pop	r28
    3fb2:	08 95       	ret

00003fb4 <lora_driver_set_device_identifier>:
    3fb4:	fc 01       	movw	r30, r24
    3fb6:	01 90       	ld	r0, Z+
    3fb8:	00 20       	and	r0, r0
    3fba:	e9 f7       	brne	.-6      	; 0x3fb6 <lora_driver_set_device_identifier+0x2>
    3fbc:	9f 01       	movw	r18, r30
    3fbe:	21 51       	subi	r18, 0x11	; 17
    3fc0:	31 09       	sbc	r19, r1
    3fc2:	28 17       	cp	r18, r24
    3fc4:	39 07       	cpc	r19, r25
    3fc6:	29 f4       	brne	.+10     	; 0x3fd2 <lora_driver_set_device_identifier+0x1e>
    3fc8:	bc 01       	movw	r22, r24
    3fca:	85 e1       	ldi	r24, 0x15	; 21
    3fcc:	96 e0       	ldi	r25, 0x06	; 6
    3fce:	63 cf       	rjmp	.-314    	; 0x3e96 <_upload_message_rc>
    3fd0:	08 95       	ret
    3fd2:	89 e0       	ldi	r24, 0x09	; 9
    3fd4:	08 95       	ret

00003fd6 <lora_driver_set_application_identifier>:
    3fd6:	fc 01       	movw	r30, r24
    3fd8:	01 90       	ld	r0, Z+
    3fda:	00 20       	and	r0, r0
    3fdc:	e9 f7       	brne	.-6      	; 0x3fd8 <lora_driver_set_application_identifier+0x2>
    3fde:	9f 01       	movw	r18, r30
    3fe0:	21 51       	subi	r18, 0x11	; 17
    3fe2:	31 09       	sbc	r19, r1
    3fe4:	28 17       	cp	r18, r24
    3fe6:	39 07       	cpc	r19, r25
    3fe8:	29 f4       	brne	.+10     	; 0x3ff4 <lora_driver_set_application_identifier+0x1e>
    3fea:	bc 01       	movw	r22, r24
    3fec:	84 e2       	ldi	r24, 0x24	; 36
    3fee:	96 e0       	ldi	r25, 0x06	; 6
    3ff0:	52 cf       	rjmp	.-348    	; 0x3e96 <_upload_message_rc>
    3ff2:	08 95       	ret
    3ff4:	89 e0       	ldi	r24, 0x09	; 9
    3ff6:	08 95       	ret

00003ff8 <lora_driver_set_application_key>:
    3ff8:	fc 01       	movw	r30, r24
    3ffa:	01 90       	ld	r0, Z+
    3ffc:	00 20       	and	r0, r0
    3ffe:	e9 f7       	brne	.-6      	; 0x3ffa <lora_driver_set_application_key+0x2>
    4000:	9f 01       	movw	r18, r30
    4002:	21 52       	subi	r18, 0x21	; 33
    4004:	31 09       	sbc	r19, r1
    4006:	28 17       	cp	r18, r24
    4008:	39 07       	cpc	r19, r25
    400a:	29 f4       	brne	.+10     	; 0x4016 <lora_driver_set_application_key+0x1e>
    400c:	bc 01       	movw	r22, r24
    400e:	83 e3       	ldi	r24, 0x33	; 51
    4010:	96 e0       	ldi	r25, 0x06	; 6
    4012:	41 cf       	rjmp	.-382    	; 0x3e96 <_upload_message_rc>
    4014:	08 95       	ret
    4016:	89 e0       	ldi	r24, 0x09	; 9
    4018:	08 95       	ret

0000401a <lora_driver_save_mac>:
    401a:	60 e0       	ldi	r22, 0x00	; 0
    401c:	70 e0       	ldi	r23, 0x00	; 0
    401e:	82 e7       	ldi	r24, 0x72	; 114
    4020:	96 e0       	ldi	r25, 0x06	; 6
    4022:	39 cf       	rjmp	.-398    	; 0x3e96 <_upload_message_rc>
    4024:	08 95       	ret

00004026 <lora_driver_join>:
    4026:	0f 93       	push	r16
    4028:	1f 93       	push	r17
    402a:	e8 2f       	mov	r30, r24
    402c:	f0 e0       	ldi	r31, 0x00	; 0
    402e:	ee 0f       	add	r30, r30
    4030:	ff 1f       	adc	r31, r31
    4032:	e4 5b       	subi	r30, 0xB4	; 180
    4034:	f7 4f       	sbci	r31, 0xF7	; 247
    4036:	60 81       	ld	r22, Z
    4038:	71 81       	ldd	r23, Z+1	; 0x01
    403a:	8b e7       	ldi	r24, 0x7B	; 123
    403c:	96 e0       	ldi	r25, 0x06	; 6
    403e:	2b df       	rcall	.-426    	; 0x3e96 <_upload_message_rc>
    4040:	81 11       	cpse	r24, r1
    4042:	14 c0       	rjmp	.+40     	; 0x406c <lora_driver_join+0x46>
    4044:	08 e2       	ldi	r16, 0x28	; 40
    4046:	15 e0       	ldi	r17, 0x05	; 5
    4048:	20 e0       	ldi	r18, 0x00	; 0
    404a:	30 e0       	ldi	r19, 0x00	; 0
    404c:	4d e2       	ldi	r20, 0x2D	; 45
    404e:	50 e0       	ldi	r21, 0x00	; 0
    4050:	6f e8       	ldi	r22, 0x8F	; 143
    4052:	7a e1       	ldi	r23, 0x1A	; 26
    4054:	80 91 06 1a 	lds	r24, 0x1A06	; 0x801a06 <_serial_reply_buffer_handle>
    4058:	90 91 07 1a 	lds	r25, 0x1A07	; 0x801a07 <_serial_reply_buffer_handle+0x1>
    405c:	0e 94 46 11 	call	0x228c	; 0x228c <xStreamBufferReceive>
    4060:	88 23       	and	r24, r24
    4062:	21 f0       	breq	.+8      	; 0x406c <lora_driver_join+0x46>
    4064:	8f e8       	ldi	r24, 0x8F	; 143
    4066:	9a e1       	ldi	r25, 0x1A	; 26
    4068:	a1 de       	rcall	.-702    	; 0x3dac <_reply2return_code>
    406a:	03 c0       	rjmp	.+6      	; 0x4072 <lora_driver_join+0x4c>
    406c:	8f e8       	ldi	r24, 0x8F	; 143
    406e:	9a e1       	ldi	r25, 0x1A	; 26
    4070:	9d de       	rcall	.-710    	; 0x3dac <_reply2return_code>
    4072:	1f 91       	pop	r17
    4074:	0f 91       	pop	r16
    4076:	08 95       	ret

00004078 <lora_driver_sent_upload_message>:
    4078:	0f 93       	push	r16
    407a:	1f 93       	push	r17
    407c:	cf 93       	push	r28
    407e:	df 93       	push	r29
    4080:	1f 92       	push	r1
    4082:	cd b7       	in	r28, 0x3d	; 61
    4084:	de b7       	in	r29, 0x3e	; 62
    4086:	db 01       	movw	r26, r22
    4088:	11 96       	adiw	r26, 0x01	; 1
    408a:	9c 91       	ld	r25, X
    408c:	11 97       	sbiw	r26, 0x01	; 1
    408e:	95 31       	cpi	r25, 0x15	; 21
    4090:	08 f0       	brcs	.+2      	; 0x4094 <lora_driver_sent_upload_message+0x1c>
    4092:	b4 c0       	rjmp	.+360    	; 0x41fc <lora_driver_sent_upload_message+0x184>
    4094:	99 23       	and	r25, r25
    4096:	81 f1       	breq	.+96     	; 0x40f8 <lora_driver_sent_upload_message+0x80>
    4098:	60 e0       	ldi	r22, 0x00	; 0
    409a:	70 e0       	ldi	r23, 0x00	; 0
    409c:	27 2f       	mov	r18, r23
    409e:	30 e0       	ldi	r19, 0x00	; 0
    40a0:	46 2f       	mov	r20, r22
    40a2:	50 e0       	ldi	r21, 0x00	; 0
    40a4:	fd 01       	movw	r30, r26
    40a6:	e4 0f       	add	r30, r20
    40a8:	f5 1f       	adc	r31, r21
    40aa:	92 81       	ldd	r25, Z+2	; 0x02
    40ac:	92 95       	swap	r25
    40ae:	9f 70       	andi	r25, 0x0F	; 15
    40b0:	9a 30       	cpi	r25, 0x0A	; 10
    40b2:	10 f0       	brcs	.+4      	; 0x40b8 <lora_driver_sent_upload_message+0x40>
    40b4:	99 5c       	subi	r25, 0xC9	; 201
    40b6:	01 c0       	rjmp	.+2      	; 0x40ba <lora_driver_sent_upload_message+0x42>
    40b8:	90 5d       	subi	r25, 0xD0	; 208
    40ba:	f9 01       	movw	r30, r18
    40bc:	e0 5e       	subi	r30, 0xE0	; 224
    40be:	f5 4e       	sbci	r31, 0xE5	; 229
    40c0:	90 83       	st	Z, r25
    40c2:	2f 5f       	subi	r18, 0xFF	; 255
    40c4:	3f 4f       	sbci	r19, 0xFF	; 255
    40c6:	fd 01       	movw	r30, r26
    40c8:	e4 0f       	add	r30, r20
    40ca:	f5 1f       	adc	r31, r21
    40cc:	92 81       	ldd	r25, Z+2	; 0x02
    40ce:	9f 70       	andi	r25, 0x0F	; 15
    40d0:	49 2f       	mov	r20, r25
    40d2:	50 e0       	ldi	r21, 0x00	; 0
    40d4:	4a 30       	cpi	r20, 0x0A	; 10
    40d6:	51 05       	cpc	r21, r1
    40d8:	14 f0       	brlt	.+4      	; 0x40de <lora_driver_sent_upload_message+0x66>
    40da:	99 5c       	subi	r25, 0xC9	; 201
    40dc:	01 c0       	rjmp	.+2      	; 0x40e0 <lora_driver_sent_upload_message+0x68>
    40de:	90 5d       	subi	r25, 0xD0	; 208
    40e0:	f9 01       	movw	r30, r18
    40e2:	e0 5e       	subi	r30, 0xE0	; 224
    40e4:	f5 4e       	sbci	r31, 0xE5	; 229
    40e6:	90 83       	st	Z, r25
    40e8:	7e 5f       	subi	r23, 0xFE	; 254
    40ea:	6f 5f       	subi	r22, 0xFF	; 255
    40ec:	11 96       	adiw	r26, 0x01	; 1
    40ee:	9c 91       	ld	r25, X
    40f0:	11 97       	sbiw	r26, 0x01	; 1
    40f2:	69 17       	cp	r22, r25
    40f4:	98 f2       	brcs	.-90     	; 0x409c <lora_driver_sent_upload_message+0x24>
    40f6:	01 c0       	rjmp	.+2      	; 0x40fa <lora_driver_sent_upload_message+0x82>
    40f8:	70 e0       	ldi	r23, 0x00	; 0
    40fa:	e7 2f       	mov	r30, r23
    40fc:	f0 e0       	ldi	r31, 0x00	; 0
    40fe:	e0 5e       	subi	r30, 0xE0	; 224
    4100:	f5 4e       	sbci	r31, 0xE5	; 229
    4102:	10 82       	st	Z, r1
    4104:	4c 91       	ld	r20, X
    4106:	81 11       	cpse	r24, r1
    4108:	03 c0       	rjmp	.+6      	; 0x4110 <lora_driver_sent_upload_message+0x98>
    410a:	84 e8       	ldi	r24, 0x84	; 132
    410c:	96 e0       	ldi	r25, 0x06	; 6
    410e:	02 c0       	rjmp	.+4      	; 0x4114 <lora_driver_sent_upload_message+0x9c>
    4110:	86 e8       	ldi	r24, 0x86	; 134
    4112:	96 e0       	ldi	r25, 0x06	; 6
    4114:	20 e2       	ldi	r18, 0x20	; 32
    4116:	3a e1       	ldi	r19, 0x1A	; 26
    4118:	3f 93       	push	r19
    411a:	2f 93       	push	r18
    411c:	1f 92       	push	r1
    411e:	4f 93       	push	r20
    4120:	9f 93       	push	r25
    4122:	8f 93       	push	r24
    4124:	8a e8       	ldi	r24, 0x8A	; 138
    4126:	96 e0       	ldi	r25, 0x06	; 6
    4128:	9f 93       	push	r25
    412a:	8f 93       	push	r24
    412c:	82 e6       	ldi	r24, 0x62	; 98
    412e:	9a e1       	ldi	r25, 0x1A	; 26
    4130:	9f 93       	push	r25
    4132:	8f 93       	push	r24
    4134:	0e 94 71 2c 	call	0x58e2	; 0x58e2 <sprintf>
    4138:	60 e0       	ldi	r22, 0x00	; 0
    413a:	70 e0       	ldi	r23, 0x00	; 0
    413c:	82 e6       	ldi	r24, 0x62	; 98
    413e:	9a e1       	ldi	r25, 0x1A	; 26
    4140:	aa de       	rcall	.-684    	; 0x3e96 <_upload_message_rc>
    4142:	0f b6       	in	r0, 0x3f	; 63
    4144:	f8 94       	cli
    4146:	de bf       	out	0x3e, r29	; 62
    4148:	0f be       	out	0x3f, r0	; 63
    414a:	cd bf       	out	0x3d, r28	; 61
    414c:	81 11       	cpse	r24, r1
    414e:	59 c0       	rjmp	.+178    	; 0x4202 <lora_driver_sent_upload_message+0x18a>
    4150:	08 e2       	ldi	r16, 0x28	; 40
    4152:	15 e0       	ldi	r17, 0x05	; 5
    4154:	20 e0       	ldi	r18, 0x00	; 0
    4156:	30 e0       	ldi	r19, 0x00	; 0
    4158:	4d e2       	ldi	r20, 0x2D	; 45
    415a:	50 e0       	ldi	r21, 0x00	; 0
    415c:	6f e8       	ldi	r22, 0x8F	; 143
    415e:	7a e1       	ldi	r23, 0x1A	; 26
    4160:	80 91 06 1a 	lds	r24, 0x1A06	; 0x801a06 <_serial_reply_buffer_handle>
    4164:	90 91 07 1a 	lds	r25, 0x1A07	; 0x801a07 <_serial_reply_buffer_handle+0x1>
    4168:	0e 94 46 11 	call	0x228c	; 0x228c <xStreamBufferReceive>
    416c:	88 23       	and	r24, r24
    416e:	09 f4       	brne	.+2      	; 0x4172 <lora_driver_sent_upload_message+0xfa>
    4170:	47 c0       	rjmp	.+142    	; 0x4200 <lora_driver_sent_upload_message+0x188>
    4172:	8f e8       	ldi	r24, 0x8F	; 143
    4174:	9a e1       	ldi	r25, 0x1A	; 26
    4176:	1a de       	rcall	.-972    	; 0x3dac <_reply2return_code>
    4178:	8e 30       	cpi	r24, 0x0E	; 14
    417a:	09 f0       	breq	.+2      	; 0x417e <lora_driver_sent_upload_message+0x106>
    417c:	42 c0       	rjmp	.+132    	; 0x4202 <lora_driver_sent_upload_message+0x18a>
    417e:	87 e0       	ldi	r24, 0x07	; 7
    4180:	89 83       	std	Y+1, r24	; 0x01
    4182:	80 91 04 1a 	lds	r24, 0x1A04	; 0x801a04 <_downlinkMessageBuffer>
    4186:	90 91 05 1a 	lds	r25, 0x1A05	; 0x801a05 <_downlinkMessageBuffer+0x1>
    418a:	89 2b       	or	r24, r25
    418c:	a9 f1       	breq	.+106    	; 0x41f8 <lora_driver_sent_upload_message+0x180>
    418e:	be 01       	movw	r22, r28
    4190:	6f 5f       	subi	r22, 0xFF	; 255
    4192:	7f 4f       	sbci	r23, 0xFF	; 255
    4194:	8f e8       	ldi	r24, 0x8F	; 143
    4196:	9a e1       	ldi	r25, 0x1A	; 26
    4198:	68 d1       	rcall	.+720    	; 0x446a <decode_port_no>
    419a:	80 93 0a 1a 	sts	0x1A0A, r24	; 0x801a0a <_downlink_payload>
    419e:	e9 81       	ldd	r30, Y+1	; 0x01
    41a0:	f0 e0       	ldi	r31, 0x00	; 0
    41a2:	e1 57       	subi	r30, 0x71	; 113
    41a4:	f5 4e       	sbci	r31, 0xE5	; 229
    41a6:	df 01       	movw	r26, r30
    41a8:	0d 90       	ld	r0, X+
    41aa:	00 20       	and	r0, r0
    41ac:	e9 f7       	brne	.-6      	; 0x41a8 <lora_driver_sent_upload_message+0x130>
    41ae:	11 97       	sbiw	r26, 0x01	; 1
    41b0:	ae 1b       	sub	r26, r30
    41b2:	bf 0b       	sbc	r27, r31
    41b4:	aa 23       	and	r26, r26
    41b6:	91 f0       	breq	.+36     	; 0x41dc <lora_driver_sent_upload_message+0x164>
    41b8:	bb 27       	eor	r27, r27
    41ba:	cd 01       	movw	r24, r26
    41bc:	01 97       	sbiw	r24, 0x01	; 1
    41be:	9c 01       	movw	r18, r24
    41c0:	12 f4       	brpl	.+4      	; 0x41c6 <lora_driver_sent_upload_message+0x14e>
    41c2:	2f 5f       	subi	r18, 0xFF	; 255
    41c4:	3f 4f       	sbci	r19, 0xFF	; 255
    41c6:	35 95       	asr	r19
    41c8:	27 95       	ror	r18
    41ca:	20 93 0b 1a 	sts	0x1A0B, r18	; 0x801a0b <_downlink_payload+0x1>
    41ce:	af 01       	movw	r20, r30
    41d0:	4f 5f       	subi	r20, 0xFF	; 255
    41d2:	5f 4f       	sbci	r21, 0xFF	; 255
    41d4:	64 e1       	ldi	r22, 0x14	; 20
    41d6:	8c e0       	ldi	r24, 0x0C	; 12
    41d8:	9a e1       	ldi	r25, 0x1A	; 26
    41da:	73 d1       	rcall	.+742    	; 0x44c2 <decode_hexadecimal_string_bytes>
    41dc:	01 e0       	ldi	r16, 0x01	; 1
    41de:	10 e0       	ldi	r17, 0x00	; 0
    41e0:	20 e0       	ldi	r18, 0x00	; 0
    41e2:	30 e0       	ldi	r19, 0x00	; 0
    41e4:	46 e1       	ldi	r20, 0x16	; 22
    41e6:	50 e0       	ldi	r21, 0x00	; 0
    41e8:	6a e0       	ldi	r22, 0x0A	; 10
    41ea:	7a e1       	ldi	r23, 0x1A	; 26
    41ec:	80 91 04 1a 	lds	r24, 0x1A04	; 0x801a04 <_downlinkMessageBuffer>
    41f0:	90 91 05 1a 	lds	r25, 0x1A05	; 0x801a05 <_downlinkMessageBuffer+0x1>
    41f4:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <xStreamBufferSend>
    41f8:	8e e0       	ldi	r24, 0x0E	; 14
    41fa:	03 c0       	rjmp	.+6      	; 0x4202 <lora_driver_sent_upload_message+0x18a>
    41fc:	84 e1       	ldi	r24, 0x14	; 20
    41fe:	01 c0       	rjmp	.+2      	; 0x4202 <lora_driver_sent_upload_message+0x18a>
    4200:	80 e0       	ldi	r24, 0x00	; 0
    4202:	0f 90       	pop	r0
    4204:	df 91       	pop	r29
    4206:	cf 91       	pop	r28
    4208:	1f 91       	pop	r17
    420a:	0f 91       	pop	r16
    420c:	08 95       	ret

0000420e <lora_driver_set_adaptive_data_rate>:
    420e:	81 30       	cpi	r24, 0x01	; 1
    4210:	19 f0       	breq	.+6      	; 0x4218 <lora_driver_set_adaptive_data_rate+0xa>
    4212:	6a e9       	ldi	r22, 0x9A	; 154
    4214:	76 e0       	ldi	r23, 0x06	; 6
    4216:	02 c0       	rjmp	.+4      	; 0x421c <lora_driver_set_adaptive_data_rate+0xe>
    4218:	63 e7       	ldi	r22, 0x73	; 115
    421a:	77 e0       	ldi	r23, 0x07	; 7
    421c:	8e e9       	ldi	r24, 0x9E	; 158
    421e:	96 e0       	ldi	r25, 0x06	; 6
    4220:	3a ce       	rjmp	.-908    	; 0x3e96 <_upload_message_rc>
    4222:	08 95       	ret

00004224 <lora_driver_set_receive_delay>:
    4224:	9f 93       	push	r25
    4226:	8f 93       	push	r24
    4228:	8f ec       	ldi	r24, 0xCF	; 207
    422a:	96 e0       	ldi	r25, 0x06	; 6
    422c:	9f 93       	push	r25
    422e:	8f 93       	push	r24
    4230:	82 e6       	ldi	r24, 0x62	; 98
    4232:	9a e1       	ldi	r25, 0x1A	; 26
    4234:	9f 93       	push	r25
    4236:	8f 93       	push	r24
    4238:	0e 94 71 2c 	call	0x58e2	; 0x58e2 <sprintf>
    423c:	60 e0       	ldi	r22, 0x00	; 0
    423e:	70 e0       	ldi	r23, 0x00	; 0
    4240:	82 e6       	ldi	r24, 0x62	; 98
    4242:	9a e1       	ldi	r25, 0x1A	; 26
    4244:	28 de       	rcall	.-944    	; 0x3e96 <_upload_message_rc>
    4246:	0f 90       	pop	r0
    4248:	0f 90       	pop	r0
    424a:	0f 90       	pop	r0
    424c:	0f 90       	pop	r0
    424e:	0f 90       	pop	r0
    4250:	0f 90       	pop	r0
    4252:	08 95       	ret

00004254 <lora_driver_configure_to_eu868>:
    4254:	2f 92       	push	r2
    4256:	3f 92       	push	r3
    4258:	4f 92       	push	r4
    425a:	5f 92       	push	r5
    425c:	6f 92       	push	r6
    425e:	7f 92       	push	r7
    4260:	8f 92       	push	r8
    4262:	9f 92       	push	r9
    4264:	af 92       	push	r10
    4266:	bf 92       	push	r11
    4268:	cf 92       	push	r12
    426a:	df 92       	push	r13
    426c:	ef 92       	push	r14
    426e:	ff 92       	push	r15
    4270:	0f 93       	push	r16
    4272:	1f 93       	push	r17
    4274:	cf 93       	push	r28
    4276:	df 93       	push	r29
    4278:	cd b7       	in	r28, 0x3d	; 61
    427a:	de b7       	in	r29, 0x3e	; 62
    427c:	a0 97       	sbiw	r28, 0x20	; 32
    427e:	0f b6       	in	r0, 0x3f	; 63
    4280:	f8 94       	cli
    4282:	de bf       	out	0x3e, r29	; 62
    4284:	0f be       	out	0x3f, r0	; 63
    4286:	cd bf       	out	0x3d, r28	; 61
    4288:	6c ef       	ldi	r22, 0xFC	; 252
    428a:	76 e0       	ldi	r23, 0x06	; 6
    428c:	88 e0       	ldi	r24, 0x08	; 8
    428e:	97 e0       	ldi	r25, 0x07	; 7
    4290:	33 dd       	rcall	.-1434   	; 0x3cf8 <_upload_message>
    4292:	8c dd       	rcall	.-1256   	; 0x3dac <_reply2return_code>
    4294:	81 11       	cpse	r24, r1
    4296:	a3 c0       	rjmp	.+326    	; 0x43de <lora_driver_configure_to_eu868+0x18a>
    4298:	80 e2       	ldi	r24, 0x20	; 32
    429a:	e3 e2       	ldi	r30, 0x23	; 35
    429c:	f2 e0       	ldi	r31, 0x02	; 2
    429e:	de 01       	movw	r26, r28
    42a0:	11 96       	adiw	r26, 0x01	; 1
    42a2:	01 90       	ld	r0, Z+
    42a4:	0d 92       	st	X+, r0
    42a6:	8a 95       	dec	r24
    42a8:	e1 f7       	brne	.-8      	; 0x42a2 <lora_driver_configure_to_eu868+0x4e>
    42aa:	9e 01       	movw	r18, r28
    42ac:	2f 5f       	subi	r18, 0xFF	; 255
    42ae:	3f 4f       	sbci	r19, 0xFF	; 255
    42b0:	69 01       	movw	r12, r18
    42b2:	e1 2c       	mov	r14, r1
    42b4:	f1 2c       	mov	r15, r1
    42b6:	0f 2e       	mov	r0, r31
    42b8:	f4 e1       	ldi	r31, 0x14	; 20
    42ba:	af 2e       	mov	r10, r31
    42bc:	f7 e0       	ldi	r31, 0x07	; 7
    42be:	bf 2e       	mov	r11, r31
    42c0:	f0 2d       	mov	r31, r0
    42c2:	02 e6       	ldi	r16, 0x62	; 98
    42c4:	1a e1       	ldi	r17, 0x1A	; 26
    42c6:	0f 2e       	mov	r0, r31
    42c8:	fd e2       	ldi	r31, 0x2D	; 45
    42ca:	4f 2e       	mov	r4, r31
    42cc:	f7 e0       	ldi	r31, 0x07	; 7
    42ce:	5f 2e       	mov	r5, r31
    42d0:	f0 2d       	mov	r31, r0
    42d2:	0f 2e       	mov	r0, r31
    42d4:	f4 e4       	ldi	r31, 0x44	; 68
    42d6:	8f 2e       	mov	r8, r31
    42d8:	f7 e0       	ldi	r31, 0x07	; 7
    42da:	9f 2e       	mov	r9, r31
    42dc:	f0 2d       	mov	r31, r0
    42de:	0f 2e       	mov	r0, r31
    42e0:	fe e5       	ldi	r31, 0x5E	; 94
    42e2:	6f 2e       	mov	r6, r31
    42e4:	f7 e0       	ldi	r31, 0x07	; 7
    42e6:	7f 2e       	mov	r7, r31
    42e8:	f0 2d       	mov	r31, r0
    42ea:	3e 2c       	mov	r3, r14
    42ec:	2f 2c       	mov	r2, r15
    42ee:	ff 92       	push	r15
    42f0:	ef 92       	push	r14
    42f2:	bf 92       	push	r11
    42f4:	af 92       	push	r10
    42f6:	1f 93       	push	r17
    42f8:	0f 93       	push	r16
    42fa:	0e 94 71 2c 	call	0x58e2	; 0x58e2 <sprintf>
    42fe:	60 e0       	ldi	r22, 0x00	; 0
    4300:	70 e0       	ldi	r23, 0x00	; 0
    4302:	c8 01       	movw	r24, r16
    4304:	f9 dc       	rcall	.-1550   	; 0x3cf8 <_upload_message>
    4306:	52 dd       	rcall	.-1372   	; 0x3dac <_reply2return_code>
    4308:	0f 90       	pop	r0
    430a:	0f 90       	pop	r0
    430c:	0f 90       	pop	r0
    430e:	0f 90       	pop	r0
    4310:	0f 90       	pop	r0
    4312:	0f 90       	pop	r0
    4314:	81 11       	cpse	r24, r1
    4316:	63 c0       	rjmp	.+198    	; 0x43de <lora_driver_configure_to_eu868+0x18a>
    4318:	32 e0       	ldi	r19, 0x02	; 2
    431a:	3e 15       	cp	r19, r14
    431c:	e8 f4       	brcc	.+58     	; 0x4358 <lora_driver_configure_to_eu868+0x104>
    431e:	f6 01       	movw	r30, r12
    4320:	83 81       	ldd	r24, Z+3	; 0x03
    4322:	8f 93       	push	r24
    4324:	82 81       	ldd	r24, Z+2	; 0x02
    4326:	8f 93       	push	r24
    4328:	81 81       	ldd	r24, Z+1	; 0x01
    432a:	8f 93       	push	r24
    432c:	80 81       	ld	r24, Z
    432e:	8f 93       	push	r24
    4330:	ff 92       	push	r15
    4332:	ef 92       	push	r14
    4334:	5f 92       	push	r5
    4336:	4f 92       	push	r4
    4338:	1f 93       	push	r17
    433a:	0f 93       	push	r16
    433c:	0e 94 71 2c 	call	0x58e2	; 0x58e2 <sprintf>
    4340:	60 e0       	ldi	r22, 0x00	; 0
    4342:	70 e0       	ldi	r23, 0x00	; 0
    4344:	c8 01       	movw	r24, r16
    4346:	d8 dc       	rcall	.-1616   	; 0x3cf8 <_upload_message>
    4348:	31 dd       	rcall	.-1438   	; 0x3dac <_reply2return_code>
    434a:	0f b6       	in	r0, 0x3f	; 63
    434c:	f8 94       	cli
    434e:	de bf       	out	0x3e, r29	; 62
    4350:	0f be       	out	0x3f, r0	; 63
    4352:	cd bf       	out	0x3d, r28	; 61
    4354:	81 11       	cpse	r24, r1
    4356:	43 c0       	rjmp	.+134    	; 0x43de <lora_driver_configure_to_eu868+0x18a>
    4358:	2f 92       	push	r2
    435a:	3f 92       	push	r3
    435c:	9f 92       	push	r9
    435e:	8f 92       	push	r8
    4360:	1f 93       	push	r17
    4362:	0f 93       	push	r16
    4364:	0e 94 71 2c 	call	0x58e2	; 0x58e2 <sprintf>
    4368:	60 e0       	ldi	r22, 0x00	; 0
    436a:	70 e0       	ldi	r23, 0x00	; 0
    436c:	c8 01       	movw	r24, r16
    436e:	c4 dc       	rcall	.-1656   	; 0x3cf8 <_upload_message>
    4370:	1d dd       	rcall	.-1478   	; 0x3dac <_reply2return_code>
    4372:	0f 90       	pop	r0
    4374:	0f 90       	pop	r0
    4376:	0f 90       	pop	r0
    4378:	0f 90       	pop	r0
    437a:	0f 90       	pop	r0
    437c:	0f 90       	pop	r0
    437e:	81 11       	cpse	r24, r1
    4380:	2e c0       	rjmp	.+92     	; 0x43de <lora_driver_configure_to_eu868+0x18a>
    4382:	2f 92       	push	r2
    4384:	3f 92       	push	r3
    4386:	7f 92       	push	r7
    4388:	6f 92       	push	r6
    438a:	1f 93       	push	r17
    438c:	0f 93       	push	r16
    438e:	0e 94 71 2c 	call	0x58e2	; 0x58e2 <sprintf>
    4392:	60 e0       	ldi	r22, 0x00	; 0
    4394:	70 e0       	ldi	r23, 0x00	; 0
    4396:	c8 01       	movw	r24, r16
    4398:	af dc       	rcall	.-1698   	; 0x3cf8 <_upload_message>
    439a:	08 dd       	rcall	.-1520   	; 0x3dac <_reply2return_code>
    439c:	0f 90       	pop	r0
    439e:	0f 90       	pop	r0
    43a0:	0f 90       	pop	r0
    43a2:	0f 90       	pop	r0
    43a4:	0f 90       	pop	r0
    43a6:	0f 90       	pop	r0
    43a8:	81 11       	cpse	r24, r1
    43aa:	19 c0       	rjmp	.+50     	; 0x43de <lora_driver_configure_to_eu868+0x18a>
    43ac:	3f ef       	ldi	r19, 0xFF	; 255
    43ae:	e3 1a       	sub	r14, r19
    43b0:	f3 0a       	sbc	r15, r19
    43b2:	84 e0       	ldi	r24, 0x04	; 4
    43b4:	c8 0e       	add	r12, r24
    43b6:	d1 1c       	adc	r13, r1
    43b8:	98 e0       	ldi	r25, 0x08	; 8
    43ba:	e9 16       	cp	r14, r25
    43bc:	f1 04       	cpc	r15, r1
    43be:	09 f0       	breq	.+2      	; 0x43c2 <lora_driver_configure_to_eu868+0x16e>
    43c0:	94 cf       	rjmp	.-216    	; 0x42ea <lora_driver_configure_to_eu868+0x96>
    43c2:	60 e0       	ldi	r22, 0x00	; 0
    43c4:	70 e0       	ldi	r23, 0x00	; 0
    43c6:	86 e7       	ldi	r24, 0x76	; 118
    43c8:	97 e0       	ldi	r25, 0x07	; 7
    43ca:	96 dc       	rcall	.-1748   	; 0x3cf8 <_upload_message>
    43cc:	ef dc       	rcall	.-1570   	; 0x3dac <_reply2return_code>
    43ce:	81 11       	cpse	r24, r1
    43d0:	06 c0       	rjmp	.+12     	; 0x43de <lora_driver_configure_to_eu868+0x18a>
    43d2:	60 e0       	ldi	r22, 0x00	; 0
    43d4:	70 e0       	ldi	r23, 0x00	; 0
    43d6:	87 e8       	ldi	r24, 0x87	; 135
    43d8:	97 e0       	ldi	r25, 0x07	; 7
    43da:	8e dc       	rcall	.-1764   	; 0x3cf8 <_upload_message>
    43dc:	e7 dc       	rcall	.-1586   	; 0x3dac <_reply2return_code>
    43de:	a0 96       	adiw	r28, 0x20	; 32
    43e0:	0f b6       	in	r0, 0x3f	; 63
    43e2:	f8 94       	cli
    43e4:	de bf       	out	0x3e, r29	; 62
    43e6:	0f be       	out	0x3f, r0	; 63
    43e8:	cd bf       	out	0x3d, r28	; 61
    43ea:	df 91       	pop	r29
    43ec:	cf 91       	pop	r28
    43ee:	1f 91       	pop	r17
    43f0:	0f 91       	pop	r16
    43f2:	ff 90       	pop	r15
    43f4:	ef 90       	pop	r14
    43f6:	df 90       	pop	r13
    43f8:	cf 90       	pop	r12
    43fa:	bf 90       	pop	r11
    43fc:	af 90       	pop	r10
    43fe:	9f 90       	pop	r9
    4400:	8f 90       	pop	r8
    4402:	7f 90       	pop	r7
    4404:	6f 90       	pop	r6
    4406:	5f 90       	pop	r5
    4408:	4f 90       	pop	r4
    440a:	3f 90       	pop	r3
    440c:	2f 90       	pop	r2
    440e:	08 95       	ret

00004410 <lora_driver_set_otaa_identity>:
    4410:	ef 92       	push	r14
    4412:	ff 92       	push	r15
    4414:	0f 93       	push	r16
    4416:	1f 93       	push	r17
    4418:	cf 93       	push	r28
    441a:	df 93       	push	r29
    441c:	ec 01       	movw	r28, r24
    441e:	8b 01       	movw	r16, r22
    4420:	7a 01       	movw	r14, r20
    4422:	81 e0       	ldi	r24, 0x01	; 1
    4424:	f4 de       	rcall	.-536    	; 0x420e <lora_driver_set_adaptive_data_rate>
    4426:	81 11       	cpse	r24, r1
    4428:	0d c0       	rjmp	.+26     	; 0x4444 <lora_driver_set_otaa_identity+0x34>
    442a:	ce 01       	movw	r24, r28
    442c:	d4 dd       	rcall	.-1112   	; 0x3fd6 <lora_driver_set_application_identifier>
    442e:	81 11       	cpse	r24, r1
    4430:	09 c0       	rjmp	.+18     	; 0x4444 <lora_driver_set_otaa_identity+0x34>
    4432:	c8 01       	movw	r24, r16
    4434:	e1 dd       	rcall	.-1086   	; 0x3ff8 <lora_driver_set_application_key>
    4436:	81 11       	cpse	r24, r1
    4438:	05 c0       	rjmp	.+10     	; 0x4444 <lora_driver_set_otaa_identity+0x34>
    443a:	c7 01       	movw	r24, r14
    443c:	bb dd       	rcall	.-1162   	; 0x3fb4 <lora_driver_set_device_identifier>
    443e:	81 11       	cpse	r24, r1
    4440:	01 c0       	rjmp	.+2      	; 0x4444 <lora_driver_set_otaa_identity+0x34>
    4442:	eb dd       	rcall	.-1066   	; 0x401a <lora_driver_save_mac>
    4444:	df 91       	pop	r29
    4446:	cf 91       	pop	r28
    4448:	1f 91       	pop	r17
    444a:	0f 91       	pop	r16
    444c:	ff 90       	pop	r15
    444e:	ef 90       	pop	r14
    4450:	08 95       	ret

00004452 <lora_driver_map_return_code_to_text>:
    4452:	90 e0       	ldi	r25, 0x00	; 0
    4454:	fc 01       	movw	r30, r24
    4456:	ee 0f       	add	r30, r30
    4458:	ff 1f       	adc	r31, r31
    445a:	8e 0f       	add	r24, r30
    445c:	9f 1f       	adc	r25, r31
    445e:	fc 01       	movw	r30, r24
    4460:	e0 5b       	subi	r30, 0xB0	; 176
    4462:	f7 4f       	sbci	r31, 0xF7	; 247
    4464:	81 81       	ldd	r24, Z+1	; 0x01
    4466:	92 81       	ldd	r25, Z+2	; 0x02
    4468:	08 95       	ret

0000446a <decode_port_no>:
    446a:	dc 01       	movw	r26, r24
    446c:	00 97       	sbiw	r24, 0x00	; 0
    446e:	29 f1       	breq	.+74     	; 0x44ba <decode_port_no+0x50>
    4470:	fb 01       	movw	r30, r22
    4472:	20 81       	ld	r18, Z
    4474:	fc 01       	movw	r30, r24
    4476:	01 90       	ld	r0, Z+
    4478:	00 20       	and	r0, r0
    447a:	e9 f7       	brne	.-6      	; 0x4476 <decode_port_no+0xc>
    447c:	31 97       	sbiw	r30, 0x01	; 1
    447e:	e8 1b       	sub	r30, r24
    4480:	f9 0b       	sbc	r31, r25
    4482:	82 2f       	mov	r24, r18
    4484:	90 e0       	ldi	r25, 0x00	; 0
    4486:	e8 17       	cp	r30, r24
    4488:	f9 07       	cpc	r31, r25
    448a:	c8 f0       	brcs	.+50     	; 0x44be <decode_port_no+0x54>
    448c:	80 e0       	ldi	r24, 0x00	; 0
    448e:	08 c0       	rjmp	.+16     	; 0x44a0 <decode_port_no+0x36>
    4490:	88 0f       	add	r24, r24
    4492:	38 2f       	mov	r19, r24
    4494:	33 0f       	add	r19, r19
    4496:	33 0f       	add	r19, r19
    4498:	83 0f       	add	r24, r19
    449a:	80 53       	subi	r24, 0x30	; 48
    449c:	89 0f       	add	r24, r25
    449e:	2f 5f       	subi	r18, 0xFF	; 255
    44a0:	fd 01       	movw	r30, r26
    44a2:	e2 0f       	add	r30, r18
    44a4:	f1 1d       	adc	r31, r1
    44a6:	90 81       	ld	r25, Z
    44a8:	30 ed       	ldi	r19, 0xD0	; 208
    44aa:	39 0f       	add	r19, r25
    44ac:	3a 30       	cpi	r19, 0x0A	; 10
    44ae:	10 f4       	brcc	.+4      	; 0x44b4 <decode_port_no+0x4a>
    44b0:	91 11       	cpse	r25, r1
    44b2:	ee cf       	rjmp	.-36     	; 0x4490 <decode_port_no+0x26>
    44b4:	fb 01       	movw	r30, r22
    44b6:	20 83       	st	Z, r18
    44b8:	08 95       	ret
    44ba:	80 e0       	ldi	r24, 0x00	; 0
    44bc:	08 95       	ret
    44be:	80 e0       	ldi	r24, 0x00	; 0
    44c0:	08 95       	ret

000044c2 <decode_hexadecimal_string_bytes>:
    44c2:	0f 93       	push	r16
    44c4:	1f 93       	push	r17
    44c6:	cf 93       	push	r28
    44c8:	df 93       	push	r29
    44ca:	dc 01       	movw	r26, r24
    44cc:	ea 01       	movw	r28, r20
    44ce:	20 97       	sbiw	r28, 0x00	; 0
    44d0:	e1 f1       	breq	.+120    	; 0x454a <decode_hexadecimal_string_bytes+0x88>
    44d2:	fa 01       	movw	r30, r20
    44d4:	01 90       	ld	r0, Z+
    44d6:	00 20       	and	r0, r0
    44d8:	e9 f7       	brne	.-6      	; 0x44d4 <decode_hexadecimal_string_bytes+0x12>
    44da:	31 97       	sbiw	r30, 0x01	; 1
    44dc:	e4 1b       	sub	r30, r20
    44de:	f5 0b       	sbc	r31, r21
    44e0:	32 97       	sbiw	r30, 0x02	; 2
    44e2:	10 f5       	brcc	.+68     	; 0x4528 <decode_hexadecimal_string_bytes+0x66>
    44e4:	32 c0       	rjmp	.+100    	; 0x454a <decode_hexadecimal_string_bytes+0x88>
    44e6:	8d 01       	movw	r16, r26
    44e8:	04 0f       	add	r16, r20
    44ea:	15 1f       	adc	r17, r21
    44ec:	30 e0       	ldi	r19, 0x00	; 0
    44ee:	ae 01       	movw	r20, r28
    44f0:	42 0f       	add	r20, r18
    44f2:	53 1f       	adc	r21, r19
    44f4:	fa 01       	movw	r30, r20
    44f6:	90 81       	ld	r25, Z
    44f8:	91 34       	cpi	r25, 0x41	; 65
    44fa:	28 f0       	brcs	.+10     	; 0x4506 <decode_hexadecimal_string_bytes+0x44>
    44fc:	97 53       	subi	r25, 0x37	; 55
    44fe:	59 2f       	mov	r21, r25
    4500:	52 95       	swap	r21
    4502:	50 7f       	andi	r21, 0xF0	; 240
    4504:	03 c0       	rjmp	.+6      	; 0x450c <decode_hexadecimal_string_bytes+0x4a>
    4506:	59 2f       	mov	r21, r25
    4508:	52 95       	swap	r21
    450a:	50 7f       	andi	r21, 0xF0	; 240
    450c:	2c 0f       	add	r18, r28
    450e:	3d 1f       	adc	r19, r29
    4510:	f9 01       	movw	r30, r18
    4512:	91 81       	ldd	r25, Z+1	; 0x01
    4514:	91 34       	cpi	r25, 0x41	; 65
    4516:	10 f0       	brcs	.+4      	; 0x451c <decode_hexadecimal_string_bytes+0x5a>
    4518:	97 53       	subi	r25, 0x37	; 55
    451a:	01 c0       	rjmp	.+2      	; 0x451e <decode_hexadecimal_string_bytes+0x5c>
    451c:	90 53       	subi	r25, 0x30	; 48
    451e:	95 0f       	add	r25, r21
    4520:	f8 01       	movw	r30, r16
    4522:	90 83       	st	Z, r25
    4524:	8f 5f       	subi	r24, 0xFF	; 255
    4526:	01 c0       	rjmp	.+2      	; 0x452a <decode_hexadecimal_string_bytes+0x68>
    4528:	80 e0       	ldi	r24, 0x00	; 0
    452a:	28 2f       	mov	r18, r24
    452c:	22 0f       	add	r18, r18
    452e:	48 2f       	mov	r20, r24
    4530:	50 e0       	ldi	r21, 0x00	; 0
    4532:	fe 01       	movw	r30, r28
    4534:	01 90       	ld	r0, Z+
    4536:	00 20       	and	r0, r0
    4538:	e9 f7       	brne	.-6      	; 0x4534 <decode_hexadecimal_string_bytes+0x72>
    453a:	31 97       	sbiw	r30, 0x01	; 1
    453c:	ec 1b       	sub	r30, r28
    453e:	fd 0b       	sbc	r31, r29
    4540:	4e 17       	cp	r20, r30
    4542:	5f 07       	cpc	r21, r31
    4544:	10 f4       	brcc	.+4      	; 0x454a <decode_hexadecimal_string_bytes+0x88>
    4546:	86 13       	cpse	r24, r22
    4548:	ce cf       	rjmp	.-100    	; 0x44e6 <decode_hexadecimal_string_bytes+0x24>
    454a:	df 91       	pop	r29
    454c:	cf 91       	pop	r28
    454e:	1f 91       	pop	r17
    4550:	0f 91       	pop	r16
    4552:	08 95       	ret

00004554 <reg_read_register>:
    4554:	fc 01       	movw	r30, r24
    4556:	80 81       	ld	r24, Z
    4558:	08 95       	ret

0000455a <reg_read_bit>:
    455a:	fc 01       	movw	r30, r24
    455c:	20 81       	ld	r18, Z
    455e:	81 e0       	ldi	r24, 0x01	; 1
    4560:	90 e0       	ldi	r25, 0x00	; 0
    4562:	02 c0       	rjmp	.+4      	; 0x4568 <reg_read_bit+0xe>
    4564:	88 0f       	add	r24, r24
    4566:	99 1f       	adc	r25, r25
    4568:	6a 95       	dec	r22
    456a:	e2 f7       	brpl	.-8      	; 0x4564 <reg_read_bit+0xa>
    456c:	82 23       	and	r24, r18
    456e:	08 95       	ret

00004570 <reg_read_bits>:
    4570:	fc 01       	movw	r30, r24
    4572:	80 81       	ld	r24, Z
    4574:	86 23       	and	r24, r22
    4576:	08 95       	ret

00004578 <reg_set_register>:
    4578:	fc 01       	movw	r30, r24
    457a:	60 83       	st	Z, r22
    457c:	08 95       	ret

0000457e <reg_clear_register>:
    457e:	fc 01       	movw	r30, r24
    4580:	10 82       	st	Z, r1
    4582:	08 95       	ret

00004584 <reg_set_bit>:
    4584:	fc 01       	movw	r30, r24
    4586:	40 81       	ld	r20, Z
    4588:	21 e0       	ldi	r18, 0x01	; 1
    458a:	30 e0       	ldi	r19, 0x00	; 0
    458c:	02 c0       	rjmp	.+4      	; 0x4592 <reg_set_bit+0xe>
    458e:	22 0f       	add	r18, r18
    4590:	33 1f       	adc	r19, r19
    4592:	6a 95       	dec	r22
    4594:	e2 f7       	brpl	.-8      	; 0x458e <reg_set_bit+0xa>
    4596:	24 2b       	or	r18, r20
    4598:	20 83       	st	Z, r18
    459a:	08 95       	ret

0000459c <reg_set_bits>:
    459c:	fc 01       	movw	r30, r24
    459e:	20 81       	ld	r18, Z
    45a0:	62 2b       	or	r22, r18
    45a2:	60 83       	st	Z, r22
    45a4:	08 95       	ret

000045a6 <reg_toggle_bit>:
    45a6:	fc 01       	movw	r30, r24
    45a8:	40 81       	ld	r20, Z
    45aa:	21 e0       	ldi	r18, 0x01	; 1
    45ac:	30 e0       	ldi	r19, 0x00	; 0
    45ae:	02 c0       	rjmp	.+4      	; 0x45b4 <reg_toggle_bit+0xe>
    45b0:	22 0f       	add	r18, r18
    45b2:	33 1f       	adc	r19, r19
    45b4:	6a 95       	dec	r22
    45b6:	e2 f7       	brpl	.-8      	; 0x45b0 <reg_toggle_bit+0xa>
    45b8:	24 27       	eor	r18, r20
    45ba:	20 83       	st	Z, r18
    45bc:	08 95       	ret

000045be <reg_toggle_bits>:
    45be:	fc 01       	movw	r30, r24
    45c0:	20 81       	ld	r18, Z
    45c2:	62 27       	eor	r22, r18
    45c4:	60 83       	st	Z, r22
    45c6:	08 95       	ret

000045c8 <reg_clear_bit>:
    45c8:	fc 01       	movw	r30, r24
    45ca:	90 81       	ld	r25, Z
    45cc:	21 e0       	ldi	r18, 0x01	; 1
    45ce:	30 e0       	ldi	r19, 0x00	; 0
    45d0:	02 c0       	rjmp	.+4      	; 0x45d6 <reg_clear_bit+0xe>
    45d2:	22 0f       	add	r18, r18
    45d4:	33 1f       	adc	r19, r19
    45d6:	6a 95       	dec	r22
    45d8:	e2 f7       	brpl	.-8      	; 0x45d2 <reg_clear_bit+0xa>
    45da:	20 95       	com	r18
    45dc:	29 23       	and	r18, r25
    45de:	20 83       	st	Z, r18
    45e0:	08 95       	ret

000045e2 <reg_clear_bits>:
    45e2:	fc 01       	movw	r30, r24
    45e4:	90 81       	ld	r25, Z
    45e6:	60 95       	com	r22
    45e8:	69 23       	and	r22, r25
    45ea:	60 83       	st	Z, r22
    45ec:	08 95       	ret

000045ee <serial_new_instance>:
    45ee:	2f 92       	push	r2
    45f0:	3f 92       	push	r3
    45f2:	4f 92       	push	r4
    45f4:	5f 92       	push	r5
    45f6:	6f 92       	push	r6
    45f8:	7f 92       	push	r7
    45fa:	8f 92       	push	r8
    45fc:	9f 92       	push	r9
    45fe:	af 92       	push	r10
    4600:	cf 92       	push	r12
    4602:	ef 92       	push	r14
    4604:	ff 92       	push	r15
    4606:	0f 93       	push	r16
    4608:	1f 93       	push	r17
    460a:	cf 93       	push	r28
    460c:	df 93       	push	r29
    460e:	cd b7       	in	r28, 0x3d	; 61
    4610:	de b7       	in	r29, 0x3e	; 62
    4612:	f8 2e       	mov	r15, r24
    4614:	2a 01       	movw	r4, r20
    4616:	3b 01       	movw	r6, r22
    4618:	88 e0       	ldi	r24, 0x08	; 8
    461a:	90 e0       	ldi	r25, 0x00	; 0
    461c:	9b d7       	rcall	.+3894   	; 0x5554 <malloc>
    461e:	8c 01       	movw	r16, r24
    4620:	8f 2d       	mov	r24, r15
    4622:	90 e0       	ldi	r25, 0x00	; 0
    4624:	88 0f       	add	r24, r24
    4626:	99 1f       	adc	r25, r25
    4628:	fc 01       	movw	r30, r24
    462a:	e4 54       	subi	r30, 0x44	; 68
    462c:	f5 4e       	sbci	r31, 0xE5	; 229
    462e:	11 83       	std	Z+1, r17	; 0x01
    4630:	00 83       	st	Z, r16
    4632:	fc 01       	movw	r30, r24
    4634:	e4 5f       	subi	r30, 0xF4	; 244
    4636:	fd 4f       	sbci	r31, 0xFD	; 253
    4638:	80 81       	ld	r24, Z
    463a:	91 81       	ldd	r25, Z+1	; 0x01
    463c:	d8 01       	movw	r26, r16
    463e:	8d 93       	st	X+, r24
    4640:	9c 93       	st	X, r25
    4642:	6c 2d       	mov	r22, r12
    4644:	70 e0       	ldi	r23, 0x00	; 0
    4646:	84 e0       	ldi	r24, 0x04	; 4
    4648:	90 e0       	ldi	r25, 0x00	; 0
    464a:	6a d7       	rcall	.+3796   	; 0x5520 <calloc>
    464c:	1c 01       	movw	r2, r24
    464e:	61 e0       	ldi	r22, 0x01	; 1
    4650:	70 e0       	ldi	r23, 0x00	; 0
    4652:	86 e0       	ldi	r24, 0x06	; 6
    4654:	90 e0       	ldi	r25, 0x00	; 0
    4656:	64 d7       	rcall	.+3784   	; 0x5520 <calloc>
    4658:	7c 01       	movw	r14, r24
    465a:	4c 2d       	mov	r20, r12
    465c:	b1 01       	movw	r22, r2
    465e:	2b d5       	rcall	.+2646   	; 0x50b6 <fifo_init>
    4660:	f8 01       	movw	r30, r16
    4662:	f5 82       	std	Z+5, r15	; 0x05
    4664:	e4 82       	std	Z+4, r14	; 0x04
    4666:	6a 2d       	mov	r22, r10
    4668:	70 e0       	ldi	r23, 0x00	; 0
    466a:	84 e0       	ldi	r24, 0x04	; 4
    466c:	90 e0       	ldi	r25, 0x00	; 0
    466e:	58 d7       	rcall	.+3760   	; 0x5520 <calloc>
    4670:	1c 01       	movw	r2, r24
    4672:	61 e0       	ldi	r22, 0x01	; 1
    4674:	70 e0       	ldi	r23, 0x00	; 0
    4676:	86 e0       	ldi	r24, 0x06	; 6
    4678:	90 e0       	ldi	r25, 0x00	; 0
    467a:	52 d7       	rcall	.+3748   	; 0x5520 <calloc>
    467c:	7c 01       	movw	r14, r24
    467e:	4a 2d       	mov	r20, r10
    4680:	b1 01       	movw	r22, r2
    4682:	19 d5       	rcall	.+2610   	; 0x50b6 <fifo_init>
    4684:	d8 01       	movw	r26, r16
    4686:	13 96       	adiw	r26, 0x03	; 3
    4688:	fc 92       	st	X, r15
    468a:	ee 92       	st	-X, r14
    468c:	12 97       	sbiw	r26, 0x02	; 2
    468e:	17 96       	adiw	r26, 0x07	; 7
    4690:	9c 92       	st	X, r9
    4692:	8e 92       	st	-X, r8
    4694:	16 97       	sbiw	r26, 0x06	; 6
    4696:	ff b6       	in	r15, 0x3f	; 63
    4698:	f8 94       	cli
    469a:	ed 91       	ld	r30, X+
    469c:	fc 91       	ld	r31, X
    469e:	11 97       	sbiw	r26, 0x01	; 1
    46a0:	36 97       	sbiw	r30, 0x06	; 6
    46a2:	80 81       	ld	r24, Z
    46a4:	82 60       	ori	r24, 0x02	; 2
    46a6:	80 83       	st	Z, r24
    46a8:	8d 90       	ld	r8, X+
    46aa:	9c 90       	ld	r9, X
    46ac:	c3 01       	movw	r24, r6
    46ae:	b2 01       	movw	r22, r4
    46b0:	1c d6       	rcall	.+3128   	; 0x52ea <__floatunsisf>
    46b2:	20 e0       	ldi	r18, 0x00	; 0
    46b4:	30 e0       	ldi	r19, 0x00	; 0
    46b6:	40 e0       	ldi	r20, 0x00	; 0
    46b8:	51 e4       	ldi	r21, 0x41	; 65
    46ba:	a5 d6       	rcall	.+3402   	; 0x5406 <__mulsf3>
    46bc:	9b 01       	movw	r18, r22
    46be:	ac 01       	movw	r20, r24
    46c0:	60 e0       	ldi	r22, 0x00	; 0
    46c2:	74 e2       	ldi	r23, 0x24	; 36
    46c4:	84 e7       	ldi	r24, 0x74	; 116
    46c6:	9b e4       	ldi	r25, 0x4B	; 75
    46c8:	77 d5       	rcall	.+2798   	; 0x51b8 <__divsf3>
    46ca:	20 e0       	ldi	r18, 0x00	; 0
    46cc:	30 e0       	ldi	r19, 0x00	; 0
    46ce:	40 e8       	ldi	r20, 0x80	; 128
    46d0:	5f e3       	ldi	r21, 0x3F	; 63
    46d2:	0d d5       	rcall	.+2586   	; 0x50ee <__subsf3>
    46d4:	de d5       	rcall	.+3004   	; 0x5292 <__fixunssfsi>
    46d6:	f4 01       	movw	r30, r8
    46d8:	32 97       	sbiw	r30, 0x02	; 2
    46da:	60 83       	st	Z, r22
    46dc:	d8 01       	movw	r26, r16
    46de:	ed 91       	ld	r30, X+
    46e0:	fc 91       	ld	r31, X
    46e2:	11 97       	sbiw	r26, 0x01	; 1
    46e4:	35 97       	sbiw	r30, 0x05	; 5
    46e6:	88 e9       	ldi	r24, 0x98	; 152
    46e8:	80 83       	st	Z, r24
    46ea:	ed 91       	ld	r30, X+
    46ec:	fc 91       	ld	r31, X
    46ee:	34 97       	sbiw	r30, 0x04	; 4
    46f0:	86 e0       	ldi	r24, 0x06	; 6
    46f2:	80 83       	st	Z, r24
    46f4:	ff be       	out	0x3f, r15	; 63
    46f6:	c8 01       	movw	r24, r16
    46f8:	df 91       	pop	r29
    46fa:	cf 91       	pop	r28
    46fc:	1f 91       	pop	r17
    46fe:	0f 91       	pop	r16
    4700:	ff 90       	pop	r15
    4702:	ef 90       	pop	r14
    4704:	cf 90       	pop	r12
    4706:	af 90       	pop	r10
    4708:	9f 90       	pop	r9
    470a:	8f 90       	pop	r8
    470c:	7f 90       	pop	r7
    470e:	6f 90       	pop	r6
    4710:	5f 90       	pop	r5
    4712:	4f 90       	pop	r4
    4714:	3f 90       	pop	r3
    4716:	2f 90       	pop	r2
    4718:	08 95       	ret

0000471a <serial_send_byte>:
    471a:	cf 93       	push	r28
    471c:	df 93       	push	r29
    471e:	ec 01       	movw	r28, r24
    4720:	ea 81       	ldd	r30, Y+2	; 0x02
    4722:	fb 81       	ldd	r31, Y+3	; 0x03
    4724:	93 81       	ldd	r25, Z+3	; 0x03
    4726:	82 81       	ldd	r24, Z+2	; 0x02
    4728:	25 81       	ldd	r18, Z+5	; 0x05
    472a:	98 1b       	sub	r25, r24
    472c:	92 23       	and	r25, r18
    472e:	84 81       	ldd	r24, Z+4	; 0x04
    4730:	98 17       	cp	r25, r24
    4732:	a1 f0       	breq	.+40     	; 0x475c <serial_send_byte+0x42>
    4734:	93 81       	ldd	r25, Z+3	; 0x03
    4736:	26 95       	lsr	r18
    4738:	29 23       	and	r18, r25
    473a:	a0 81       	ld	r26, Z
    473c:	b1 81       	ldd	r27, Z+1	; 0x01
    473e:	a2 0f       	add	r26, r18
    4740:	b1 1d       	adc	r27, r1
    4742:	6c 93       	st	X, r22
    4744:	9f 5f       	subi	r25, 0xFF	; 255
    4746:	25 81       	ldd	r18, Z+5	; 0x05
    4748:	92 23       	and	r25, r18
    474a:	93 83       	std	Z+3, r25	; 0x03
    474c:	e8 81       	ld	r30, Y
    474e:	f9 81       	ldd	r31, Y+1	; 0x01
    4750:	35 97       	sbiw	r30, 0x05	; 5
    4752:	80 81       	ld	r24, Z
    4754:	80 62       	ori	r24, 0x20	; 32
    4756:	80 83       	st	Z, r24
    4758:	80 e0       	ldi	r24, 0x00	; 0
    475a:	01 c0       	rjmp	.+2      	; 0x475e <serial_send_byte+0x44>
    475c:	82 e0       	ldi	r24, 0x02	; 2
    475e:	df 91       	pop	r29
    4760:	cf 91       	pop	r28
    4762:	08 95       	ret

00004764 <serial_send_bytes>:
    4764:	ef 92       	push	r14
    4766:	ff 92       	push	r15
    4768:	0f 93       	push	r16
    476a:	1f 93       	push	r17
    476c:	cf 93       	push	r28
    476e:	df 93       	push	r29
    4770:	7c 01       	movw	r14, r24
    4772:	dc 01       	movw	r26, r24
    4774:	12 96       	adiw	r26, 0x02	; 2
    4776:	ed 91       	ld	r30, X+
    4778:	fc 91       	ld	r31, X
    477a:	13 97       	sbiw	r26, 0x03	; 3
    477c:	93 81       	ldd	r25, Z+3	; 0x03
    477e:	82 81       	ldd	r24, Z+2	; 0x02
    4780:	98 1b       	sub	r25, r24
    4782:	85 81       	ldd	r24, Z+5	; 0x05
    4784:	98 23       	and	r25, r24
    4786:	84 81       	ldd	r24, Z+4	; 0x04
    4788:	89 1b       	sub	r24, r25
    478a:	86 17       	cp	r24, r22
    478c:	98 f1       	brcs	.+102    	; 0x47f4 <serial_send_bytes+0x90>
    478e:	66 23       	and	r22, r22
    4790:	41 f1       	breq	.+80     	; 0x47e2 <serial_send_bytes+0x7e>
    4792:	84 2f       	mov	r24, r20
    4794:	95 2f       	mov	r25, r21
    4796:	dc 01       	movw	r26, r24
    4798:	61 50       	subi	r22, 0x01	; 1
    479a:	46 2f       	mov	r20, r22
    479c:	50 e0       	ldi	r21, 0x00	; 0
    479e:	4f 5f       	subi	r20, 0xFF	; 255
    47a0:	5f 4f       	sbci	r21, 0xFF	; 255
    47a2:	48 0f       	add	r20, r24
    47a4:	59 1f       	adc	r21, r25
    47a6:	e7 01       	movw	r28, r14
    47a8:	ea 81       	ldd	r30, Y+2	; 0x02
    47aa:	fb 81       	ldd	r31, Y+3	; 0x03
    47ac:	93 81       	ldd	r25, Z+3	; 0x03
    47ae:	82 81       	ldd	r24, Z+2	; 0x02
    47b0:	25 81       	ldd	r18, Z+5	; 0x05
    47b2:	98 1b       	sub	r25, r24
    47b4:	92 23       	and	r25, r18
    47b6:	84 81       	ldd	r24, Z+4	; 0x04
    47b8:	98 17       	cp	r25, r24
    47ba:	79 f0       	breq	.+30     	; 0x47da <serial_send_bytes+0x76>
    47bc:	8c 91       	ld	r24, X
    47be:	93 81       	ldd	r25, Z+3	; 0x03
    47c0:	26 95       	lsr	r18
    47c2:	29 23       	and	r18, r25
    47c4:	60 81       	ld	r22, Z
    47c6:	71 81       	ldd	r23, Z+1	; 0x01
    47c8:	8b 01       	movw	r16, r22
    47ca:	02 0f       	add	r16, r18
    47cc:	11 1d       	adc	r17, r1
    47ce:	e8 01       	movw	r28, r16
    47d0:	88 83       	st	Y, r24
    47d2:	9f 5f       	subi	r25, 0xFF	; 255
    47d4:	85 81       	ldd	r24, Z+5	; 0x05
    47d6:	98 23       	and	r25, r24
    47d8:	93 83       	std	Z+3, r25	; 0x03
    47da:	11 96       	adiw	r26, 0x01	; 1
    47dc:	a4 17       	cp	r26, r20
    47de:	b5 07       	cpc	r27, r21
    47e0:	11 f7       	brne	.-60     	; 0x47a6 <serial_send_bytes+0x42>
    47e2:	d7 01       	movw	r26, r14
    47e4:	ed 91       	ld	r30, X+
    47e6:	fc 91       	ld	r31, X
    47e8:	35 97       	sbiw	r30, 0x05	; 5
    47ea:	80 81       	ld	r24, Z
    47ec:	80 62       	ori	r24, 0x20	; 32
    47ee:	80 83       	st	Z, r24
    47f0:	80 e0       	ldi	r24, 0x00	; 0
    47f2:	01 c0       	rjmp	.+2      	; 0x47f6 <serial_send_bytes+0x92>
    47f4:	82 e0       	ldi	r24, 0x02	; 2
    47f6:	df 91       	pop	r29
    47f8:	cf 91       	pop	r28
    47fa:	1f 91       	pop	r17
    47fc:	0f 91       	pop	r16
    47fe:	ff 90       	pop	r15
    4800:	ef 90       	pop	r14
    4802:	08 95       	ret

00004804 <serial_get_byte>:
    4804:	dc 01       	movw	r26, r24
    4806:	14 96       	adiw	r26, 0x04	; 4
    4808:	ed 91       	ld	r30, X+
    480a:	fc 91       	ld	r31, X
    480c:	15 97       	sbiw	r26, 0x05	; 5
    480e:	93 81       	ldd	r25, Z+3	; 0x03
    4810:	82 81       	ldd	r24, Z+2	; 0x02
    4812:	98 17       	cp	r25, r24
    4814:	89 f0       	breq	.+34     	; 0x4838 <serial_get_byte+0x34>
    4816:	92 81       	ldd	r25, Z+2	; 0x02
    4818:	85 81       	ldd	r24, Z+5	; 0x05
    481a:	86 95       	lsr	r24
    481c:	89 23       	and	r24, r25
    481e:	a0 81       	ld	r26, Z
    4820:	b1 81       	ldd	r27, Z+1	; 0x01
    4822:	a8 0f       	add	r26, r24
    4824:	b1 1d       	adc	r27, r1
    4826:	8c 91       	ld	r24, X
    4828:	db 01       	movw	r26, r22
    482a:	8c 93       	st	X, r24
    482c:	9f 5f       	subi	r25, 0xFF	; 255
    482e:	85 81       	ldd	r24, Z+5	; 0x05
    4830:	98 23       	and	r25, r24
    4832:	92 83       	std	Z+2, r25	; 0x02
    4834:	80 e0       	ldi	r24, 0x00	; 0
    4836:	08 95       	ret
    4838:	83 e0       	ldi	r24, 0x03	; 3
    483a:	08 95       	ret

0000483c <__vector_25>:
    483c:	1f 92       	push	r1
    483e:	0f 92       	push	r0
    4840:	0f b6       	in	r0, 0x3f	; 63
    4842:	0f 92       	push	r0
    4844:	11 24       	eor	r1, r1
    4846:	0b b6       	in	r0, 0x3b	; 59
    4848:	0f 92       	push	r0
    484a:	2f 93       	push	r18
    484c:	3f 93       	push	r19
    484e:	4f 93       	push	r20
    4850:	5f 93       	push	r21
    4852:	6f 93       	push	r22
    4854:	7f 93       	push	r23
    4856:	8f 93       	push	r24
    4858:	9f 93       	push	r25
    485a:	af 93       	push	r26
    485c:	bf 93       	push	r27
    485e:	cf 93       	push	r28
    4860:	df 93       	push	r29
    4862:	ef 93       	push	r30
    4864:	ff 93       	push	r31
    4866:	a0 91 bc 1a 	lds	r26, 0x1ABC	; 0x801abc <_ser_handle>
    486a:	b0 91 bd 1a 	lds	r27, 0x1ABD	; 0x801abd <_ser_handle+0x1>
    486e:	10 97       	sbiw	r26, 0x00	; 0
    4870:	11 f1       	breq	.+68     	; 0x48b6 <__vector_25+0x7a>
    4872:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    4876:	14 96       	adiw	r26, 0x04	; 4
    4878:	ed 91       	ld	r30, X+
    487a:	fc 91       	ld	r31, X
    487c:	15 97       	sbiw	r26, 0x05	; 5
    487e:	93 81       	ldd	r25, Z+3	; 0x03
    4880:	82 81       	ldd	r24, Z+2	; 0x02
    4882:	25 81       	ldd	r18, Z+5	; 0x05
    4884:	98 1b       	sub	r25, r24
    4886:	92 23       	and	r25, r18
    4888:	84 81       	ldd	r24, Z+4	; 0x04
    488a:	98 17       	cp	r25, r24
    488c:	61 f0       	breq	.+24     	; 0x48a6 <__vector_25+0x6a>
    488e:	83 81       	ldd	r24, Z+3	; 0x03
    4890:	26 95       	lsr	r18
    4892:	28 23       	and	r18, r24
    4894:	c0 81       	ld	r28, Z
    4896:	d1 81       	ldd	r29, Z+1	; 0x01
    4898:	c2 0f       	add	r28, r18
    489a:	d1 1d       	adc	r29, r1
    489c:	68 83       	st	Y, r22
    489e:	8f 5f       	subi	r24, 0xFF	; 255
    48a0:	95 81       	ldd	r25, Z+5	; 0x05
    48a2:	89 23       	and	r24, r25
    48a4:	83 83       	std	Z+3, r24	; 0x03
    48a6:	16 96       	adiw	r26, 0x06	; 6
    48a8:	ed 91       	ld	r30, X+
    48aa:	fc 91       	ld	r31, X
    48ac:	17 97       	sbiw	r26, 0x07	; 7
    48ae:	30 97       	sbiw	r30, 0x00	; 0
    48b0:	11 f0       	breq	.+4      	; 0x48b6 <__vector_25+0x7a>
    48b2:	cd 01       	movw	r24, r26
    48b4:	19 95       	eicall
    48b6:	ff 91       	pop	r31
    48b8:	ef 91       	pop	r30
    48ba:	df 91       	pop	r29
    48bc:	cf 91       	pop	r28
    48be:	bf 91       	pop	r27
    48c0:	af 91       	pop	r26
    48c2:	9f 91       	pop	r25
    48c4:	8f 91       	pop	r24
    48c6:	7f 91       	pop	r23
    48c8:	6f 91       	pop	r22
    48ca:	5f 91       	pop	r21
    48cc:	4f 91       	pop	r20
    48ce:	3f 91       	pop	r19
    48d0:	2f 91       	pop	r18
    48d2:	0f 90       	pop	r0
    48d4:	0b be       	out	0x3b, r0	; 59
    48d6:	0f 90       	pop	r0
    48d8:	0f be       	out	0x3f, r0	; 63
    48da:	0f 90       	pop	r0
    48dc:	1f 90       	pop	r1
    48de:	18 95       	reti

000048e0 <__vector_26>:
    48e0:	1f 92       	push	r1
    48e2:	0f 92       	push	r0
    48e4:	0f b6       	in	r0, 0x3f	; 63
    48e6:	0f 92       	push	r0
    48e8:	11 24       	eor	r1, r1
    48ea:	0b b6       	in	r0, 0x3b	; 59
    48ec:	0f 92       	push	r0
    48ee:	2f 93       	push	r18
    48f0:	8f 93       	push	r24
    48f2:	9f 93       	push	r25
    48f4:	af 93       	push	r26
    48f6:	bf 93       	push	r27
    48f8:	ef 93       	push	r30
    48fa:	ff 93       	push	r31
    48fc:	e0 91 bc 1a 	lds	r30, 0x1ABC	; 0x801abc <_ser_handle>
    4900:	f0 91 bd 1a 	lds	r31, 0x1ABD	; 0x801abd <_ser_handle+0x1>
    4904:	30 97       	sbiw	r30, 0x00	; 0
    4906:	b9 f0       	breq	.+46     	; 0x4936 <__vector_26+0x56>
    4908:	02 80       	ldd	r0, Z+2	; 0x02
    490a:	f3 81       	ldd	r31, Z+3	; 0x03
    490c:	e0 2d       	mov	r30, r0
    490e:	93 81       	ldd	r25, Z+3	; 0x03
    4910:	82 81       	ldd	r24, Z+2	; 0x02
    4912:	98 17       	cp	r25, r24
    4914:	b1 f0       	breq	.+44     	; 0x4942 <__vector_26+0x62>
    4916:	92 81       	ldd	r25, Z+2	; 0x02
    4918:	85 81       	ldd	r24, Z+5	; 0x05
    491a:	28 2f       	mov	r18, r24
    491c:	26 95       	lsr	r18
    491e:	29 23       	and	r18, r25
    4920:	a0 81       	ld	r26, Z
    4922:	b1 81       	ldd	r27, Z+1	; 0x01
    4924:	a2 0f       	add	r26, r18
    4926:	b1 1d       	adc	r27, r1
    4928:	2c 91       	ld	r18, X
    492a:	9f 5f       	subi	r25, 0xFF	; 255
    492c:	89 23       	and	r24, r25
    492e:	82 83       	std	Z+2, r24	; 0x02
    4930:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    4934:	0b c0       	rjmp	.+22     	; 0x494c <__vector_26+0x6c>
    4936:	e1 ec       	ldi	r30, 0xC1	; 193
    4938:	f0 e0       	ldi	r31, 0x00	; 0
    493a:	80 81       	ld	r24, Z
    493c:	8f 7d       	andi	r24, 0xDF	; 223
    493e:	80 83       	st	Z, r24
    4940:	05 c0       	rjmp	.+10     	; 0x494c <__vector_26+0x6c>
    4942:	e1 ec       	ldi	r30, 0xC1	; 193
    4944:	f0 e0       	ldi	r31, 0x00	; 0
    4946:	80 81       	ld	r24, Z
    4948:	8f 7d       	andi	r24, 0xDF	; 223
    494a:	80 83       	st	Z, r24
    494c:	ff 91       	pop	r31
    494e:	ef 91       	pop	r30
    4950:	bf 91       	pop	r27
    4952:	af 91       	pop	r26
    4954:	9f 91       	pop	r25
    4956:	8f 91       	pop	r24
    4958:	2f 91       	pop	r18
    495a:	0f 90       	pop	r0
    495c:	0b be       	out	0x3b, r0	; 59
    495e:	0f 90       	pop	r0
    4960:	0f be       	out	0x3f, r0	; 63
    4962:	0f 90       	pop	r0
    4964:	1f 90       	pop	r1
    4966:	18 95       	reti

00004968 <__vector_36>:
    4968:	1f 92       	push	r1
    496a:	0f 92       	push	r0
    496c:	0f b6       	in	r0, 0x3f	; 63
    496e:	0f 92       	push	r0
    4970:	11 24       	eor	r1, r1
    4972:	0b b6       	in	r0, 0x3b	; 59
    4974:	0f 92       	push	r0
    4976:	2f 93       	push	r18
    4978:	3f 93       	push	r19
    497a:	4f 93       	push	r20
    497c:	5f 93       	push	r21
    497e:	6f 93       	push	r22
    4980:	7f 93       	push	r23
    4982:	8f 93       	push	r24
    4984:	9f 93       	push	r25
    4986:	af 93       	push	r26
    4988:	bf 93       	push	r27
    498a:	cf 93       	push	r28
    498c:	df 93       	push	r29
    498e:	ef 93       	push	r30
    4990:	ff 93       	push	r31
    4992:	a0 91 be 1a 	lds	r26, 0x1ABE	; 0x801abe <_ser_handle+0x2>
    4996:	b0 91 bf 1a 	lds	r27, 0x1ABF	; 0x801abf <_ser_handle+0x3>
    499a:	10 97       	sbiw	r26, 0x00	; 0
    499c:	11 f1       	breq	.+68     	; 0x49e2 <__vector_36+0x7a>
    499e:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    49a2:	14 96       	adiw	r26, 0x04	; 4
    49a4:	ed 91       	ld	r30, X+
    49a6:	fc 91       	ld	r31, X
    49a8:	15 97       	sbiw	r26, 0x05	; 5
    49aa:	93 81       	ldd	r25, Z+3	; 0x03
    49ac:	82 81       	ldd	r24, Z+2	; 0x02
    49ae:	25 81       	ldd	r18, Z+5	; 0x05
    49b0:	98 1b       	sub	r25, r24
    49b2:	92 23       	and	r25, r18
    49b4:	84 81       	ldd	r24, Z+4	; 0x04
    49b6:	98 17       	cp	r25, r24
    49b8:	61 f0       	breq	.+24     	; 0x49d2 <__vector_36+0x6a>
    49ba:	83 81       	ldd	r24, Z+3	; 0x03
    49bc:	26 95       	lsr	r18
    49be:	28 23       	and	r18, r24
    49c0:	c0 81       	ld	r28, Z
    49c2:	d1 81       	ldd	r29, Z+1	; 0x01
    49c4:	c2 0f       	add	r28, r18
    49c6:	d1 1d       	adc	r29, r1
    49c8:	68 83       	st	Y, r22
    49ca:	8f 5f       	subi	r24, 0xFF	; 255
    49cc:	95 81       	ldd	r25, Z+5	; 0x05
    49ce:	89 23       	and	r24, r25
    49d0:	83 83       	std	Z+3, r24	; 0x03
    49d2:	16 96       	adiw	r26, 0x06	; 6
    49d4:	ed 91       	ld	r30, X+
    49d6:	fc 91       	ld	r31, X
    49d8:	17 97       	sbiw	r26, 0x07	; 7
    49da:	30 97       	sbiw	r30, 0x00	; 0
    49dc:	11 f0       	breq	.+4      	; 0x49e2 <__vector_36+0x7a>
    49de:	cd 01       	movw	r24, r26
    49e0:	19 95       	eicall
    49e2:	ff 91       	pop	r31
    49e4:	ef 91       	pop	r30
    49e6:	df 91       	pop	r29
    49e8:	cf 91       	pop	r28
    49ea:	bf 91       	pop	r27
    49ec:	af 91       	pop	r26
    49ee:	9f 91       	pop	r25
    49f0:	8f 91       	pop	r24
    49f2:	7f 91       	pop	r23
    49f4:	6f 91       	pop	r22
    49f6:	5f 91       	pop	r21
    49f8:	4f 91       	pop	r20
    49fa:	3f 91       	pop	r19
    49fc:	2f 91       	pop	r18
    49fe:	0f 90       	pop	r0
    4a00:	0b be       	out	0x3b, r0	; 59
    4a02:	0f 90       	pop	r0
    4a04:	0f be       	out	0x3f, r0	; 63
    4a06:	0f 90       	pop	r0
    4a08:	1f 90       	pop	r1
    4a0a:	18 95       	reti

00004a0c <__vector_37>:
    4a0c:	1f 92       	push	r1
    4a0e:	0f 92       	push	r0
    4a10:	0f b6       	in	r0, 0x3f	; 63
    4a12:	0f 92       	push	r0
    4a14:	11 24       	eor	r1, r1
    4a16:	0b b6       	in	r0, 0x3b	; 59
    4a18:	0f 92       	push	r0
    4a1a:	2f 93       	push	r18
    4a1c:	8f 93       	push	r24
    4a1e:	9f 93       	push	r25
    4a20:	af 93       	push	r26
    4a22:	bf 93       	push	r27
    4a24:	ef 93       	push	r30
    4a26:	ff 93       	push	r31
    4a28:	e0 91 be 1a 	lds	r30, 0x1ABE	; 0x801abe <_ser_handle+0x2>
    4a2c:	f0 91 bf 1a 	lds	r31, 0x1ABF	; 0x801abf <_ser_handle+0x3>
    4a30:	30 97       	sbiw	r30, 0x00	; 0
    4a32:	b9 f0       	breq	.+46     	; 0x4a62 <__vector_37+0x56>
    4a34:	02 80       	ldd	r0, Z+2	; 0x02
    4a36:	f3 81       	ldd	r31, Z+3	; 0x03
    4a38:	e0 2d       	mov	r30, r0
    4a3a:	93 81       	ldd	r25, Z+3	; 0x03
    4a3c:	82 81       	ldd	r24, Z+2	; 0x02
    4a3e:	98 17       	cp	r25, r24
    4a40:	b1 f0       	breq	.+44     	; 0x4a6e <__vector_37+0x62>
    4a42:	92 81       	ldd	r25, Z+2	; 0x02
    4a44:	85 81       	ldd	r24, Z+5	; 0x05
    4a46:	28 2f       	mov	r18, r24
    4a48:	26 95       	lsr	r18
    4a4a:	29 23       	and	r18, r25
    4a4c:	a0 81       	ld	r26, Z
    4a4e:	b1 81       	ldd	r27, Z+1	; 0x01
    4a50:	a2 0f       	add	r26, r18
    4a52:	b1 1d       	adc	r27, r1
    4a54:	2c 91       	ld	r18, X
    4a56:	9f 5f       	subi	r25, 0xFF	; 255
    4a58:	89 23       	and	r24, r25
    4a5a:	82 83       	std	Z+2, r24	; 0x02
    4a5c:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    4a60:	0b c0       	rjmp	.+22     	; 0x4a78 <__vector_37+0x6c>
    4a62:	e9 ec       	ldi	r30, 0xC9	; 201
    4a64:	f0 e0       	ldi	r31, 0x00	; 0
    4a66:	80 81       	ld	r24, Z
    4a68:	8f 7d       	andi	r24, 0xDF	; 223
    4a6a:	80 83       	st	Z, r24
    4a6c:	05 c0       	rjmp	.+10     	; 0x4a78 <__vector_37+0x6c>
    4a6e:	e9 ec       	ldi	r30, 0xC9	; 201
    4a70:	f0 e0       	ldi	r31, 0x00	; 0
    4a72:	80 81       	ld	r24, Z
    4a74:	8f 7d       	andi	r24, 0xDF	; 223
    4a76:	80 83       	st	Z, r24
    4a78:	ff 91       	pop	r31
    4a7a:	ef 91       	pop	r30
    4a7c:	bf 91       	pop	r27
    4a7e:	af 91       	pop	r26
    4a80:	9f 91       	pop	r25
    4a82:	8f 91       	pop	r24
    4a84:	2f 91       	pop	r18
    4a86:	0f 90       	pop	r0
    4a88:	0b be       	out	0x3b, r0	; 59
    4a8a:	0f 90       	pop	r0
    4a8c:	0f be       	out	0x3f, r0	; 63
    4a8e:	0f 90       	pop	r0
    4a90:	1f 90       	pop	r1
    4a92:	18 95       	reti

00004a94 <__vector_51>:
    4a94:	1f 92       	push	r1
    4a96:	0f 92       	push	r0
    4a98:	0f b6       	in	r0, 0x3f	; 63
    4a9a:	0f 92       	push	r0
    4a9c:	11 24       	eor	r1, r1
    4a9e:	0b b6       	in	r0, 0x3b	; 59
    4aa0:	0f 92       	push	r0
    4aa2:	2f 93       	push	r18
    4aa4:	3f 93       	push	r19
    4aa6:	4f 93       	push	r20
    4aa8:	5f 93       	push	r21
    4aaa:	6f 93       	push	r22
    4aac:	7f 93       	push	r23
    4aae:	8f 93       	push	r24
    4ab0:	9f 93       	push	r25
    4ab2:	af 93       	push	r26
    4ab4:	bf 93       	push	r27
    4ab6:	cf 93       	push	r28
    4ab8:	df 93       	push	r29
    4aba:	ef 93       	push	r30
    4abc:	ff 93       	push	r31
    4abe:	a0 91 c0 1a 	lds	r26, 0x1AC0	; 0x801ac0 <_ser_handle+0x4>
    4ac2:	b0 91 c1 1a 	lds	r27, 0x1AC1	; 0x801ac1 <_ser_handle+0x5>
    4ac6:	10 97       	sbiw	r26, 0x00	; 0
    4ac8:	11 f1       	breq	.+68     	; 0x4b0e <__vector_51+0x7a>
    4aca:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    4ace:	14 96       	adiw	r26, 0x04	; 4
    4ad0:	ed 91       	ld	r30, X+
    4ad2:	fc 91       	ld	r31, X
    4ad4:	15 97       	sbiw	r26, 0x05	; 5
    4ad6:	93 81       	ldd	r25, Z+3	; 0x03
    4ad8:	82 81       	ldd	r24, Z+2	; 0x02
    4ada:	25 81       	ldd	r18, Z+5	; 0x05
    4adc:	98 1b       	sub	r25, r24
    4ade:	92 23       	and	r25, r18
    4ae0:	84 81       	ldd	r24, Z+4	; 0x04
    4ae2:	98 17       	cp	r25, r24
    4ae4:	61 f0       	breq	.+24     	; 0x4afe <__vector_51+0x6a>
    4ae6:	83 81       	ldd	r24, Z+3	; 0x03
    4ae8:	26 95       	lsr	r18
    4aea:	28 23       	and	r18, r24
    4aec:	c0 81       	ld	r28, Z
    4aee:	d1 81       	ldd	r29, Z+1	; 0x01
    4af0:	c2 0f       	add	r28, r18
    4af2:	d1 1d       	adc	r29, r1
    4af4:	68 83       	st	Y, r22
    4af6:	8f 5f       	subi	r24, 0xFF	; 255
    4af8:	95 81       	ldd	r25, Z+5	; 0x05
    4afa:	89 23       	and	r24, r25
    4afc:	83 83       	std	Z+3, r24	; 0x03
    4afe:	16 96       	adiw	r26, 0x06	; 6
    4b00:	ed 91       	ld	r30, X+
    4b02:	fc 91       	ld	r31, X
    4b04:	17 97       	sbiw	r26, 0x07	; 7
    4b06:	30 97       	sbiw	r30, 0x00	; 0
    4b08:	11 f0       	breq	.+4      	; 0x4b0e <__vector_51+0x7a>
    4b0a:	cd 01       	movw	r24, r26
    4b0c:	19 95       	eicall
    4b0e:	ff 91       	pop	r31
    4b10:	ef 91       	pop	r30
    4b12:	df 91       	pop	r29
    4b14:	cf 91       	pop	r28
    4b16:	bf 91       	pop	r27
    4b18:	af 91       	pop	r26
    4b1a:	9f 91       	pop	r25
    4b1c:	8f 91       	pop	r24
    4b1e:	7f 91       	pop	r23
    4b20:	6f 91       	pop	r22
    4b22:	5f 91       	pop	r21
    4b24:	4f 91       	pop	r20
    4b26:	3f 91       	pop	r19
    4b28:	2f 91       	pop	r18
    4b2a:	0f 90       	pop	r0
    4b2c:	0b be       	out	0x3b, r0	; 59
    4b2e:	0f 90       	pop	r0
    4b30:	0f be       	out	0x3f, r0	; 63
    4b32:	0f 90       	pop	r0
    4b34:	1f 90       	pop	r1
    4b36:	18 95       	reti

00004b38 <__vector_52>:
    4b38:	1f 92       	push	r1
    4b3a:	0f 92       	push	r0
    4b3c:	0f b6       	in	r0, 0x3f	; 63
    4b3e:	0f 92       	push	r0
    4b40:	11 24       	eor	r1, r1
    4b42:	0b b6       	in	r0, 0x3b	; 59
    4b44:	0f 92       	push	r0
    4b46:	2f 93       	push	r18
    4b48:	8f 93       	push	r24
    4b4a:	9f 93       	push	r25
    4b4c:	af 93       	push	r26
    4b4e:	bf 93       	push	r27
    4b50:	ef 93       	push	r30
    4b52:	ff 93       	push	r31
    4b54:	e0 91 c0 1a 	lds	r30, 0x1AC0	; 0x801ac0 <_ser_handle+0x4>
    4b58:	f0 91 c1 1a 	lds	r31, 0x1AC1	; 0x801ac1 <_ser_handle+0x5>
    4b5c:	30 97       	sbiw	r30, 0x00	; 0
    4b5e:	b9 f0       	breq	.+46     	; 0x4b8e <__vector_52+0x56>
    4b60:	02 80       	ldd	r0, Z+2	; 0x02
    4b62:	f3 81       	ldd	r31, Z+3	; 0x03
    4b64:	e0 2d       	mov	r30, r0
    4b66:	93 81       	ldd	r25, Z+3	; 0x03
    4b68:	82 81       	ldd	r24, Z+2	; 0x02
    4b6a:	98 17       	cp	r25, r24
    4b6c:	b1 f0       	breq	.+44     	; 0x4b9a <__vector_52+0x62>
    4b6e:	92 81       	ldd	r25, Z+2	; 0x02
    4b70:	85 81       	ldd	r24, Z+5	; 0x05
    4b72:	28 2f       	mov	r18, r24
    4b74:	26 95       	lsr	r18
    4b76:	29 23       	and	r18, r25
    4b78:	a0 81       	ld	r26, Z
    4b7a:	b1 81       	ldd	r27, Z+1	; 0x01
    4b7c:	a2 0f       	add	r26, r18
    4b7e:	b1 1d       	adc	r27, r1
    4b80:	2c 91       	ld	r18, X
    4b82:	9f 5f       	subi	r25, 0xFF	; 255
    4b84:	89 23       	and	r24, r25
    4b86:	82 83       	std	Z+2, r24	; 0x02
    4b88:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    4b8c:	0b c0       	rjmp	.+22     	; 0x4ba4 <__vector_52+0x6c>
    4b8e:	e1 ed       	ldi	r30, 0xD1	; 209
    4b90:	f0 e0       	ldi	r31, 0x00	; 0
    4b92:	80 81       	ld	r24, Z
    4b94:	8f 7d       	andi	r24, 0xDF	; 223
    4b96:	80 83       	st	Z, r24
    4b98:	05 c0       	rjmp	.+10     	; 0x4ba4 <__vector_52+0x6c>
    4b9a:	e1 ed       	ldi	r30, 0xD1	; 209
    4b9c:	f0 e0       	ldi	r31, 0x00	; 0
    4b9e:	80 81       	ld	r24, Z
    4ba0:	8f 7d       	andi	r24, 0xDF	; 223
    4ba2:	80 83       	st	Z, r24
    4ba4:	ff 91       	pop	r31
    4ba6:	ef 91       	pop	r30
    4ba8:	bf 91       	pop	r27
    4baa:	af 91       	pop	r26
    4bac:	9f 91       	pop	r25
    4bae:	8f 91       	pop	r24
    4bb0:	2f 91       	pop	r18
    4bb2:	0f 90       	pop	r0
    4bb4:	0b be       	out	0x3b, r0	; 59
    4bb6:	0f 90       	pop	r0
    4bb8:	0f be       	out	0x3f, r0	; 63
    4bba:	0f 90       	pop	r0
    4bbc:	1f 90       	pop	r1
    4bbe:	18 95       	reti

00004bc0 <__vector_54>:
    4bc0:	1f 92       	push	r1
    4bc2:	0f 92       	push	r0
    4bc4:	0f b6       	in	r0, 0x3f	; 63
    4bc6:	0f 92       	push	r0
    4bc8:	11 24       	eor	r1, r1
    4bca:	0b b6       	in	r0, 0x3b	; 59
    4bcc:	0f 92       	push	r0
    4bce:	2f 93       	push	r18
    4bd0:	3f 93       	push	r19
    4bd2:	4f 93       	push	r20
    4bd4:	5f 93       	push	r21
    4bd6:	6f 93       	push	r22
    4bd8:	7f 93       	push	r23
    4bda:	8f 93       	push	r24
    4bdc:	9f 93       	push	r25
    4bde:	af 93       	push	r26
    4be0:	bf 93       	push	r27
    4be2:	cf 93       	push	r28
    4be4:	df 93       	push	r29
    4be6:	ef 93       	push	r30
    4be8:	ff 93       	push	r31
    4bea:	a0 91 c2 1a 	lds	r26, 0x1AC2	; 0x801ac2 <_ser_handle+0x6>
    4bee:	b0 91 c3 1a 	lds	r27, 0x1AC3	; 0x801ac3 <_ser_handle+0x7>
    4bf2:	10 97       	sbiw	r26, 0x00	; 0
    4bf4:	11 f1       	breq	.+68     	; 0x4c3a <__vector_54+0x7a>
    4bf6:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    4bfa:	14 96       	adiw	r26, 0x04	; 4
    4bfc:	ed 91       	ld	r30, X+
    4bfe:	fc 91       	ld	r31, X
    4c00:	15 97       	sbiw	r26, 0x05	; 5
    4c02:	93 81       	ldd	r25, Z+3	; 0x03
    4c04:	82 81       	ldd	r24, Z+2	; 0x02
    4c06:	25 81       	ldd	r18, Z+5	; 0x05
    4c08:	98 1b       	sub	r25, r24
    4c0a:	92 23       	and	r25, r18
    4c0c:	84 81       	ldd	r24, Z+4	; 0x04
    4c0e:	98 17       	cp	r25, r24
    4c10:	61 f0       	breq	.+24     	; 0x4c2a <__vector_54+0x6a>
    4c12:	83 81       	ldd	r24, Z+3	; 0x03
    4c14:	26 95       	lsr	r18
    4c16:	28 23       	and	r18, r24
    4c18:	c0 81       	ld	r28, Z
    4c1a:	d1 81       	ldd	r29, Z+1	; 0x01
    4c1c:	c2 0f       	add	r28, r18
    4c1e:	d1 1d       	adc	r29, r1
    4c20:	68 83       	st	Y, r22
    4c22:	8f 5f       	subi	r24, 0xFF	; 255
    4c24:	95 81       	ldd	r25, Z+5	; 0x05
    4c26:	89 23       	and	r24, r25
    4c28:	83 83       	std	Z+3, r24	; 0x03
    4c2a:	16 96       	adiw	r26, 0x06	; 6
    4c2c:	ed 91       	ld	r30, X+
    4c2e:	fc 91       	ld	r31, X
    4c30:	17 97       	sbiw	r26, 0x07	; 7
    4c32:	30 97       	sbiw	r30, 0x00	; 0
    4c34:	11 f0       	breq	.+4      	; 0x4c3a <__vector_54+0x7a>
    4c36:	cd 01       	movw	r24, r26
    4c38:	19 95       	eicall
    4c3a:	ff 91       	pop	r31
    4c3c:	ef 91       	pop	r30
    4c3e:	df 91       	pop	r29
    4c40:	cf 91       	pop	r28
    4c42:	bf 91       	pop	r27
    4c44:	af 91       	pop	r26
    4c46:	9f 91       	pop	r25
    4c48:	8f 91       	pop	r24
    4c4a:	7f 91       	pop	r23
    4c4c:	6f 91       	pop	r22
    4c4e:	5f 91       	pop	r21
    4c50:	4f 91       	pop	r20
    4c52:	3f 91       	pop	r19
    4c54:	2f 91       	pop	r18
    4c56:	0f 90       	pop	r0
    4c58:	0b be       	out	0x3b, r0	; 59
    4c5a:	0f 90       	pop	r0
    4c5c:	0f be       	out	0x3f, r0	; 63
    4c5e:	0f 90       	pop	r0
    4c60:	1f 90       	pop	r1
    4c62:	18 95       	reti

00004c64 <__vector_55>:
    4c64:	1f 92       	push	r1
    4c66:	0f 92       	push	r0
    4c68:	0f b6       	in	r0, 0x3f	; 63
    4c6a:	0f 92       	push	r0
    4c6c:	11 24       	eor	r1, r1
    4c6e:	0b b6       	in	r0, 0x3b	; 59
    4c70:	0f 92       	push	r0
    4c72:	2f 93       	push	r18
    4c74:	8f 93       	push	r24
    4c76:	9f 93       	push	r25
    4c78:	af 93       	push	r26
    4c7a:	bf 93       	push	r27
    4c7c:	ef 93       	push	r30
    4c7e:	ff 93       	push	r31
    4c80:	e0 91 c2 1a 	lds	r30, 0x1AC2	; 0x801ac2 <_ser_handle+0x6>
    4c84:	f0 91 c3 1a 	lds	r31, 0x1AC3	; 0x801ac3 <_ser_handle+0x7>
    4c88:	30 97       	sbiw	r30, 0x00	; 0
    4c8a:	b9 f0       	breq	.+46     	; 0x4cba <__vector_55+0x56>
    4c8c:	02 80       	ldd	r0, Z+2	; 0x02
    4c8e:	f3 81       	ldd	r31, Z+3	; 0x03
    4c90:	e0 2d       	mov	r30, r0
    4c92:	93 81       	ldd	r25, Z+3	; 0x03
    4c94:	82 81       	ldd	r24, Z+2	; 0x02
    4c96:	98 17       	cp	r25, r24
    4c98:	b1 f0       	breq	.+44     	; 0x4cc6 <__vector_55+0x62>
    4c9a:	92 81       	ldd	r25, Z+2	; 0x02
    4c9c:	85 81       	ldd	r24, Z+5	; 0x05
    4c9e:	28 2f       	mov	r18, r24
    4ca0:	26 95       	lsr	r18
    4ca2:	29 23       	and	r18, r25
    4ca4:	a0 81       	ld	r26, Z
    4ca6:	b1 81       	ldd	r27, Z+1	; 0x01
    4ca8:	a2 0f       	add	r26, r18
    4caa:	b1 1d       	adc	r27, r1
    4cac:	2c 91       	ld	r18, X
    4cae:	9f 5f       	subi	r25, 0xFF	; 255
    4cb0:	89 23       	and	r24, r25
    4cb2:	82 83       	std	Z+2, r24	; 0x02
    4cb4:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    4cb8:	0b c0       	rjmp	.+22     	; 0x4cd0 <__vector_55+0x6c>
    4cba:	e1 e3       	ldi	r30, 0x31	; 49
    4cbc:	f1 e0       	ldi	r31, 0x01	; 1
    4cbe:	80 81       	ld	r24, Z
    4cc0:	8f 7d       	andi	r24, 0xDF	; 223
    4cc2:	80 83       	st	Z, r24
    4cc4:	05 c0       	rjmp	.+10     	; 0x4cd0 <__vector_55+0x6c>
    4cc6:	e1 e3       	ldi	r30, 0x31	; 49
    4cc8:	f1 e0       	ldi	r31, 0x01	; 1
    4cca:	80 81       	ld	r24, Z
    4ccc:	8f 7d       	andi	r24, 0xDF	; 223
    4cce:	80 83       	st	Z, r24
    4cd0:	ff 91       	pop	r31
    4cd2:	ef 91       	pop	r30
    4cd4:	bf 91       	pop	r27
    4cd6:	af 91       	pop	r26
    4cd8:	9f 91       	pop	r25
    4cda:	8f 91       	pop	r24
    4cdc:	2f 91       	pop	r18
    4cde:	0f 90       	pop	r0
    4ce0:	0b be       	out	0x3b, r0	; 59
    4ce2:	0f 90       	pop	r0
    4ce4:	0f be       	out	0x3f, r0	; 63
    4ce6:	0f 90       	pop	r0
    4ce8:	1f 90       	pop	r1
    4cea:	18 95       	reti

00004cec <usart_getchar>:
    4cec:	cf 93       	push	r28
    4cee:	df 93       	push	r29
    4cf0:	1f 92       	push	r1
    4cf2:	cd b7       	in	r28, 0x3d	; 61
    4cf4:	de b7       	in	r29, 0x3e	; 62
    4cf6:	be 01       	movw	r22, r28
    4cf8:	6f 5f       	subi	r22, 0xFF	; 255
    4cfa:	7f 4f       	sbci	r23, 0xFF	; 255
    4cfc:	80 91 c4 1a 	lds	r24, 0x1AC4	; 0x801ac4 <_com_serial_instance>
    4d00:	90 91 c5 1a 	lds	r25, 0x1AC5	; 0x801ac5 <_com_serial_instance+0x1>
    4d04:	7f dd       	rcall	.-1282   	; 0x4804 <serial_get_byte>
    4d06:	81 11       	cpse	r24, r1
    4d08:	f6 cf       	rjmp	.-20     	; 0x4cf6 <usart_getchar+0xa>
    4d0a:	89 81       	ldd	r24, Y+1	; 0x01
    4d0c:	90 e0       	ldi	r25, 0x00	; 0
    4d0e:	0f 90       	pop	r0
    4d10:	df 91       	pop	r29
    4d12:	cf 91       	pop	r28
    4d14:	08 95       	ret

00004d16 <usart_putchar>:
    4d16:	68 2f       	mov	r22, r24
    4d18:	80 91 c4 1a 	lds	r24, 0x1AC4	; 0x801ac4 <_com_serial_instance>
    4d1c:	90 91 c5 1a 	lds	r25, 0x1AC5	; 0x801ac5 <_com_serial_instance+0x1>
    4d20:	fc dc       	rcall	.-1544   	; 0x471a <serial_send_byte>
    4d22:	80 e0       	ldi	r24, 0x00	; 0
    4d24:	90 e0       	ldi	r25, 0x00	; 0
    4d26:	08 95       	ret

00004d28 <stdioCreate>:
    4d28:	8f 92       	push	r8
    4d2a:	9f 92       	push	r9
    4d2c:	af 92       	push	r10
    4d2e:	cf 92       	push	r12
    4d30:	ef 92       	push	r14
    4d32:	0f 93       	push	r16
    4d34:	81 2c       	mov	r8, r1
    4d36:	91 2c       	mov	r9, r1
    4d38:	68 94       	set
    4d3a:	aa 24       	eor	r10, r10
    4d3c:	a7 f8       	bld	r10, 7
    4d3e:	68 94       	set
    4d40:	cc 24       	eor	r12, r12
    4d42:	c7 f8       	bld	r12, 7
    4d44:	e1 2c       	mov	r14, r1
    4d46:	00 e0       	ldi	r16, 0x00	; 0
    4d48:	23 e0       	ldi	r18, 0x03	; 3
    4d4a:	40 e0       	ldi	r20, 0x00	; 0
    4d4c:	51 ee       	ldi	r21, 0xE1	; 225
    4d4e:	60 e0       	ldi	r22, 0x00	; 0
    4d50:	70 e0       	ldi	r23, 0x00	; 0
    4d52:	4d dc       	rcall	.-1894   	; 0x45ee <serial_new_instance>
    4d54:	90 93 c5 1a 	sts	0x1AC5, r25	; 0x801ac5 <_com_serial_instance+0x1>
    4d58:	80 93 c4 1a 	sts	0x1AC4, r24	; 0x801ac4 <_com_serial_instance>
    4d5c:	ed e0       	ldi	r30, 0x0D	; 13
    4d5e:	fb e1       	ldi	r31, 0x1B	; 27
    4d60:	84 e1       	ldi	r24, 0x14	; 20
    4d62:	92 e0       	ldi	r25, 0x02	; 2
    4d64:	91 83       	std	Z+1, r25	; 0x01
    4d66:	80 83       	st	Z, r24
    4d68:	93 83       	std	Z+3, r25	; 0x03
    4d6a:	82 83       	std	Z+2, r24	; 0x02
    4d6c:	0f 91       	pop	r16
    4d6e:	ef 90       	pop	r14
    4d70:	cf 90       	pop	r12
    4d72:	af 90       	pop	r10
    4d74:	9f 90       	pop	r9
    4d76:	8f 90       	pop	r8
    4d78:	08 95       	ret

00004d7a <_initTwiInterface>:
    4d7a:	80 91 d4 1a 	lds	r24, 0x1AD4	; 0x801ad4 <_twiIsInitiated>
    4d7e:	81 11       	cpse	r24, r1
    4d80:	0c c0       	rjmp	.+24     	; 0x4d9a <_initTwiInterface+0x20>
    4d82:	8c e0       	ldi	r24, 0x0C	; 12
    4d84:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    4d88:	8f ef       	ldi	r24, 0xFF	; 255
    4d8a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    4d8e:	84 e0       	ldi	r24, 0x04	; 4
    4d90:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4d94:	81 e0       	ldi	r24, 0x01	; 1
    4d96:	80 93 d4 1a 	sts	0x1AD4, r24	; 0x801ad4 <_twiIsInitiated>
    4d9a:	08 95       	ret

00004d9c <twiCreate>:
    4d9c:	af 92       	push	r10
    4d9e:	bf 92       	push	r11
    4da0:	cf 92       	push	r12
    4da2:	df 92       	push	r13
    4da4:	ef 92       	push	r14
    4da6:	ff 92       	push	r15
    4da8:	0f 93       	push	r16
    4daa:	1f 93       	push	r17
    4dac:	cf 93       	push	r28
    4dae:	df 93       	push	r29
    4db0:	a8 2e       	mov	r10, r24
    4db2:	b6 2e       	mov	r11, r22
    4db4:	69 01       	movw	r12, r18
    4db6:	7a 01       	movw	r14, r20
    4db8:	84 e0       	ldi	r24, 0x04	; 4
    4dba:	90 e0       	ldi	r25, 0x00	; 0
    4dbc:	cb d3       	rcall	.+1942   	; 0x5554 <malloc>
    4dbe:	ec 01       	movw	r28, r24
    4dc0:	89 2b       	or	r24, r25
    4dc2:	61 f1       	breq	.+88     	; 0x4e1c <twiCreate+0x80>
    4dc4:	a8 82       	st	Y, r10
    4dc6:	81 e0       	ldi	r24, 0x01	; 1
    4dc8:	b8 12       	cpse	r11, r24
    4dca:	12 c0       	rjmp	.+36     	; 0x4df0 <twiCreate+0x54>
    4dcc:	c7 01       	movw	r24, r14
    4dce:	b6 01       	movw	r22, r12
    4dd0:	20 ea       	ldi	r18, 0xA0	; 160
    4dd2:	36 e8       	ldi	r19, 0x86	; 134
    4dd4:	41 e0       	ldi	r20, 0x01	; 1
    4dd6:	50 e0       	ldi	r21, 0x00	; 0
    4dd8:	79 d3       	rcall	.+1778   	; 0x54cc <__udivmodsi4>
    4dda:	da 01       	movw	r26, r20
    4ddc:	c9 01       	movw	r24, r18
    4dde:	40 97       	sbiw	r24, 0x10	; 16
    4de0:	a1 09       	sbc	r26, r1
    4de2:	b1 09       	sbc	r27, r1
    4de4:	b6 95       	lsr	r27
    4de6:	a7 95       	ror	r26
    4de8:	97 95       	ror	r25
    4dea:	87 95       	ror	r24
    4dec:	89 83       	std	Y+1, r24	; 0x01
    4dee:	11 c0       	rjmp	.+34     	; 0x4e12 <twiCreate+0x76>
    4df0:	c7 01       	movw	r24, r14
    4df2:	b6 01       	movw	r22, r12
    4df4:	20 e8       	ldi	r18, 0x80	; 128
    4df6:	3a e1       	ldi	r19, 0x1A	; 26
    4df8:	46 e0       	ldi	r20, 0x06	; 6
    4dfa:	50 e0       	ldi	r21, 0x00	; 0
    4dfc:	67 d3       	rcall	.+1742   	; 0x54cc <__udivmodsi4>
    4dfe:	da 01       	movw	r26, r20
    4e00:	c9 01       	movw	r24, r18
    4e02:	40 97       	sbiw	r24, 0x10	; 16
    4e04:	a1 09       	sbc	r26, r1
    4e06:	b1 09       	sbc	r27, r1
    4e08:	b6 95       	lsr	r27
    4e0a:	a7 95       	ror	r26
    4e0c:	97 95       	ror	r25
    4e0e:	87 95       	ror	r24
    4e10:	89 83       	std	Y+1, r24	; 0x01
    4e12:	1b 83       	std	Y+3, r17	; 0x03
    4e14:	0a 83       	std	Y+2, r16	; 0x02
    4e16:	8c 2f       	mov	r24, r28
    4e18:	9d 2f       	mov	r25, r29
    4e1a:	02 c0       	rjmp	.+4      	; 0x4e20 <twiCreate+0x84>
    4e1c:	80 e0       	ldi	r24, 0x00	; 0
    4e1e:	90 e0       	ldi	r25, 0x00	; 0
    4e20:	df 91       	pop	r29
    4e22:	cf 91       	pop	r28
    4e24:	1f 91       	pop	r17
    4e26:	0f 91       	pop	r16
    4e28:	ff 90       	pop	r15
    4e2a:	ef 90       	pop	r14
    4e2c:	df 90       	pop	r13
    4e2e:	cf 90       	pop	r12
    4e30:	bf 90       	pop	r11
    4e32:	af 90       	pop	r10
    4e34:	08 95       	ret

00004e36 <twiIsBusy>:
    4e36:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4e3a:	81 70       	andi	r24, 0x01	; 1
    4e3c:	08 95       	ret

00004e3e <twiTransmit>:
    4e3e:	ff 92       	push	r15
    4e40:	0f 93       	push	r16
    4e42:	1f 93       	push	r17
    4e44:	cf 93       	push	r28
    4e46:	df 93       	push	r29
    4e48:	00 97       	sbiw	r24, 0x00	; 0
    4e4a:	d1 f1       	breq	.+116    	; 0x4ec0 <twiTransmit+0x82>
    4e4c:	4a 30       	cpi	r20, 0x0A	; 10
    4e4e:	d0 f5       	brcc	.+116    	; 0x4ec4 <twiTransmit+0x86>
    4e50:	f4 2e       	mov	r15, r20
    4e52:	8b 01       	movw	r16, r22
    4e54:	ec 01       	movw	r28, r24
    4e56:	ef df       	rcall	.-34     	; 0x4e36 <twiIsBusy>
    4e58:	81 11       	cpse	r24, r1
    4e5a:	36 c0       	rjmp	.+108    	; 0x4ec8 <twiTransmit+0x8a>
    4e5c:	80 91 c7 1a 	lds	r24, 0x1AC7	; 0x801ac7 <_twiCurrentHandler>
    4e60:	90 91 c8 1a 	lds	r25, 0x1AC8	; 0x801ac8 <_twiCurrentHandler+0x1>
    4e64:	c8 17       	cp	r28, r24
    4e66:	d9 07       	cpc	r29, r25
    4e68:	41 f0       	breq	.+16     	; 0x4e7a <twiTransmit+0x3c>
    4e6a:	87 df       	rcall	.-242    	; 0x4d7a <_initTwiInterface>
    4e6c:	89 81       	ldd	r24, Y+1	; 0x01
    4e6e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    4e72:	d0 93 c8 1a 	sts	0x1AC8, r29	; 0x801ac8 <_twiCurrentHandler+0x1>
    4e76:	c0 93 c7 1a 	sts	0x1AC7, r28	; 0x801ac7 <_twiCurrentHandler>
    4e7a:	81 e0       	ldi	r24, 0x01	; 1
    4e7c:	8f 0d       	add	r24, r15
    4e7e:	80 93 c9 1a 	sts	0x1AC9, r24	; 0x801ac9 <_twiMessageLen>
    4e82:	88 81       	ld	r24, Y
    4e84:	88 0f       	add	r24, r24
    4e86:	80 93 ca 1a 	sts	0x1ACA, r24	; 0x801aca <_twiMessageBuffer>
    4e8a:	ff 20       	and	r15, r15
    4e8c:	89 f0       	breq	.+34     	; 0x4eb0 <twiTransmit+0x72>
    4e8e:	f8 01       	movw	r30, r16
    4e90:	ab ec       	ldi	r26, 0xCB	; 203
    4e92:	ba e1       	ldi	r27, 0x1A	; 26
    4e94:	4f ef       	ldi	r20, 0xFF	; 255
    4e96:	4f 0d       	add	r20, r15
    4e98:	64 2f       	mov	r22, r20
    4e9a:	70 e0       	ldi	r23, 0x00	; 0
    4e9c:	cb 01       	movw	r24, r22
    4e9e:	01 96       	adiw	r24, 0x01	; 1
    4ea0:	b8 01       	movw	r22, r16
    4ea2:	68 0f       	add	r22, r24
    4ea4:	79 1f       	adc	r23, r25
    4ea6:	81 91       	ld	r24, Z+
    4ea8:	8d 93       	st	X+, r24
    4eaa:	e6 17       	cp	r30, r22
    4eac:	f7 07       	cpc	r31, r23
    4eae:	d9 f7       	brne	.-10     	; 0x4ea6 <twiTransmit+0x68>
    4eb0:	88 ef       	ldi	r24, 0xF8	; 248
    4eb2:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <_twiCurrentState>
    4eb6:	85 ea       	ldi	r24, 0xA5	; 165
    4eb8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4ebc:	84 e0       	ldi	r24, 0x04	; 4
    4ebe:	05 c0       	rjmp	.+10     	; 0x4eca <twiTransmit+0x8c>
    4ec0:	86 e0       	ldi	r24, 0x06	; 6
    4ec2:	03 c0       	rjmp	.+6      	; 0x4eca <twiTransmit+0x8c>
    4ec4:	87 e0       	ldi	r24, 0x07	; 7
    4ec6:	01 c0       	rjmp	.+2      	; 0x4eca <twiTransmit+0x8c>
    4ec8:	82 e0       	ldi	r24, 0x02	; 2
    4eca:	df 91       	pop	r29
    4ecc:	cf 91       	pop	r28
    4ece:	1f 91       	pop	r17
    4ed0:	0f 91       	pop	r16
    4ed2:	ff 90       	pop	r15
    4ed4:	08 95       	ret

00004ed6 <twiReceive>:
    4ed6:	1f 93       	push	r17
    4ed8:	cf 93       	push	r28
    4eda:	df 93       	push	r29
    4edc:	00 97       	sbiw	r24, 0x00	; 0
    4ede:	29 f1       	breq	.+74     	; 0x4f2a <twiReceive+0x54>
    4ee0:	6b 30       	cpi	r22, 0x0B	; 11
    4ee2:	28 f5       	brcc	.+74     	; 0x4f2e <twiReceive+0x58>
    4ee4:	16 2f       	mov	r17, r22
    4ee6:	ec 01       	movw	r28, r24
    4ee8:	a6 df       	rcall	.-180    	; 0x4e36 <twiIsBusy>
    4eea:	81 11       	cpse	r24, r1
    4eec:	22 c0       	rjmp	.+68     	; 0x4f32 <twiReceive+0x5c>
    4eee:	80 91 c7 1a 	lds	r24, 0x1AC7	; 0x801ac7 <_twiCurrentHandler>
    4ef2:	90 91 c8 1a 	lds	r25, 0x1AC8	; 0x801ac8 <_twiCurrentHandler+0x1>
    4ef6:	c8 17       	cp	r28, r24
    4ef8:	d9 07       	cpc	r29, r25
    4efa:	41 f0       	breq	.+16     	; 0x4f0c <twiReceive+0x36>
    4efc:	3e df       	rcall	.-388    	; 0x4d7a <_initTwiInterface>
    4efe:	89 81       	ldd	r24, Y+1	; 0x01
    4f00:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    4f04:	d0 93 c8 1a 	sts	0x1AC8, r29	; 0x801ac8 <_twiCurrentHandler+0x1>
    4f08:	c0 93 c7 1a 	sts	0x1AC7, r28	; 0x801ac7 <_twiCurrentHandler>
    4f0c:	10 93 c9 1a 	sts	0x1AC9, r17	; 0x801ac9 <_twiMessageLen>
    4f10:	88 81       	ld	r24, Y
    4f12:	88 0f       	add	r24, r24
    4f14:	81 60       	ori	r24, 0x01	; 1
    4f16:	80 93 ca 1a 	sts	0x1ACA, r24	; 0x801aca <_twiMessageBuffer>
    4f1a:	88 ef       	ldi	r24, 0xF8	; 248
    4f1c:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <_twiCurrentState>
    4f20:	85 ea       	ldi	r24, 0xA5	; 165
    4f22:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4f26:	85 e0       	ldi	r24, 0x05	; 5
    4f28:	05 c0       	rjmp	.+10     	; 0x4f34 <twiReceive+0x5e>
    4f2a:	86 e0       	ldi	r24, 0x06	; 6
    4f2c:	03 c0       	rjmp	.+6      	; 0x4f34 <twiReceive+0x5e>
    4f2e:	87 e0       	ldi	r24, 0x07	; 7
    4f30:	01 c0       	rjmp	.+2      	; 0x4f34 <twiReceive+0x5e>
    4f32:	82 e0       	ldi	r24, 0x02	; 2
    4f34:	df 91       	pop	r29
    4f36:	cf 91       	pop	r28
    4f38:	1f 91       	pop	r17
    4f3a:	08 95       	ret

00004f3c <__vector_39>:
    4f3c:	1f 92       	push	r1
    4f3e:	0f 92       	push	r0
    4f40:	0f b6       	in	r0, 0x3f	; 63
    4f42:	0f 92       	push	r0
    4f44:	11 24       	eor	r1, r1
    4f46:	0b b6       	in	r0, 0x3b	; 59
    4f48:	0f 92       	push	r0
    4f4a:	2f 93       	push	r18
    4f4c:	3f 93       	push	r19
    4f4e:	4f 93       	push	r20
    4f50:	5f 93       	push	r21
    4f52:	6f 93       	push	r22
    4f54:	7f 93       	push	r23
    4f56:	8f 93       	push	r24
    4f58:	9f 93       	push	r25
    4f5a:	af 93       	push	r26
    4f5c:	bf 93       	push	r27
    4f5e:	ef 93       	push	r30
    4f60:	ff 93       	push	r31
    4f62:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    4f66:	8e 2f       	mov	r24, r30
    4f68:	90 e0       	ldi	r25, 0x00	; 0
    4f6a:	fc 01       	movw	r30, r24
    4f6c:	38 97       	sbiw	r30, 0x08	; 8
    4f6e:	e1 35       	cpi	r30, 0x51	; 81
    4f70:	f1 05       	cpc	r31, r1
    4f72:	08 f0       	brcs	.+2      	; 0x4f76 <__vector_39+0x3a>
    4f74:	75 c0       	rjmp	.+234    	; 0x5060 <__vector_39+0x124>
    4f76:	88 27       	eor	r24, r24
    4f78:	e4 58       	subi	r30, 0x84	; 132
    4f7a:	ff 4f       	sbci	r31, 0xFF	; 255
    4f7c:	8f 4f       	sbci	r24, 0xFF	; 255
    4f7e:	c8 c2       	rjmp	.+1424   	; 0x5510 <__tablejump2__>
    4f80:	10 92 c6 1a 	sts	0x1AC6, r1	; 0x801ac6 <_index.1885>
    4f84:	e0 91 c6 1a 	lds	r30, 0x1AC6	; 0x801ac6 <_index.1885>
    4f88:	80 91 c9 1a 	lds	r24, 0x1AC9	; 0x801ac9 <_twiMessageLen>
    4f8c:	e8 17       	cp	r30, r24
    4f8e:	70 f4       	brcc	.+28     	; 0x4fac <__vector_39+0x70>
    4f90:	81 e0       	ldi	r24, 0x01	; 1
    4f92:	8e 0f       	add	r24, r30
    4f94:	80 93 c6 1a 	sts	0x1AC6, r24	; 0x801ac6 <_index.1885>
    4f98:	f0 e0       	ldi	r31, 0x00	; 0
    4f9a:	e6 53       	subi	r30, 0x36	; 54
    4f9c:	f5 4e       	sbci	r31, 0xE5	; 229
    4f9e:	80 81       	ld	r24, Z
    4fa0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    4fa4:	85 e8       	ldi	r24, 0x85	; 133
    4fa6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4faa:	72 c0       	rjmp	.+228    	; 0x5090 <__vector_39+0x154>
    4fac:	84 e9       	ldi	r24, 0x94	; 148
    4fae:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4fb2:	80 91 c7 1a 	lds	r24, 0x1AC7	; 0x801ac7 <_twiCurrentHandler>
    4fb6:	90 91 c8 1a 	lds	r25, 0x1AC8	; 0x801ac8 <_twiCurrentHandler+0x1>
    4fba:	dc 01       	movw	r26, r24
    4fbc:	12 96       	adiw	r26, 0x02	; 2
    4fbe:	ed 91       	ld	r30, X+
    4fc0:	fc 91       	ld	r31, X
    4fc2:	13 97       	sbiw	r26, 0x03	; 3
    4fc4:	30 97       	sbiw	r30, 0x00	; 0
    4fc6:	09 f4       	brne	.+2      	; 0x4fca <__vector_39+0x8e>
    4fc8:	63 c0       	rjmp	.+198    	; 0x5090 <__vector_39+0x154>
    4fca:	20 e0       	ldi	r18, 0x00	; 0
    4fcc:	40 e0       	ldi	r20, 0x00	; 0
    4fce:	50 e0       	ldi	r21, 0x00	; 0
    4fd0:	64 e0       	ldi	r22, 0x04	; 4
    4fd2:	19 95       	eicall
    4fd4:	5d c0       	rjmp	.+186    	; 0x5090 <__vector_39+0x154>
    4fd6:	e0 91 c6 1a 	lds	r30, 0x1AC6	; 0x801ac6 <_index.1885>
    4fda:	81 e0       	ldi	r24, 0x01	; 1
    4fdc:	8e 0f       	add	r24, r30
    4fde:	80 93 c6 1a 	sts	0x1AC6, r24	; 0x801ac6 <_index.1885>
    4fe2:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    4fe6:	f0 e0       	ldi	r31, 0x00	; 0
    4fe8:	e6 53       	subi	r30, 0x36	; 54
    4fea:	f5 4e       	sbci	r31, 0xE5	; 229
    4fec:	80 83       	st	Z, r24
    4fee:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    4ff2:	80 34       	cpi	r24, 0x40	; 64
    4ff4:	11 f4       	brne	.+4      	; 0x4ffa <__vector_39+0xbe>
    4ff6:	10 92 c6 1a 	sts	0x1AC6, r1	; 0x801ac6 <_index.1885>
    4ffa:	20 91 c6 1a 	lds	r18, 0x1AC6	; 0x801ac6 <_index.1885>
    4ffe:	30 e0       	ldi	r19, 0x00	; 0
    5000:	80 91 c9 1a 	lds	r24, 0x1AC9	; 0x801ac9 <_twiMessageLen>
    5004:	90 e0       	ldi	r25, 0x00	; 0
    5006:	01 97       	sbiw	r24, 0x01	; 1
    5008:	28 17       	cp	r18, r24
    500a:	39 07       	cpc	r19, r25
    500c:	24 f4       	brge	.+8      	; 0x5016 <__vector_39+0xda>
    500e:	85 ec       	ldi	r24, 0xC5	; 197
    5010:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    5014:	3d c0       	rjmp	.+122    	; 0x5090 <__vector_39+0x154>
    5016:	85 e8       	ldi	r24, 0x85	; 133
    5018:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    501c:	39 c0       	rjmp	.+114    	; 0x5090 <__vector_39+0x154>
    501e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    5022:	e0 91 c6 1a 	lds	r30, 0x1AC6	; 0x801ac6 <_index.1885>
    5026:	f0 e0       	ldi	r31, 0x00	; 0
    5028:	e6 53       	subi	r30, 0x36	; 54
    502a:	f5 4e       	sbci	r31, 0xE5	; 229
    502c:	80 83       	st	Z, r24
    502e:	84 e9       	ldi	r24, 0x94	; 148
    5030:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    5034:	80 91 c7 1a 	lds	r24, 0x1AC7	; 0x801ac7 <_twiCurrentHandler>
    5038:	90 91 c8 1a 	lds	r25, 0x1AC8	; 0x801ac8 <_twiCurrentHandler+0x1>
    503c:	dc 01       	movw	r26, r24
    503e:	12 96       	adiw	r26, 0x02	; 2
    5040:	ed 91       	ld	r30, X+
    5042:	fc 91       	ld	r31, X
    5044:	13 97       	sbiw	r26, 0x03	; 3
    5046:	30 97       	sbiw	r30, 0x00	; 0
    5048:	19 f1       	breq	.+70     	; 0x5090 <__vector_39+0x154>
    504a:	20 91 c9 1a 	lds	r18, 0x1AC9	; 0x801ac9 <_twiMessageLen>
    504e:	4a ec       	ldi	r20, 0xCA	; 202
    5050:	5a e1       	ldi	r21, 0x1A	; 26
    5052:	65 e0       	ldi	r22, 0x05	; 5
    5054:	19 95       	eicall
    5056:	1c c0       	rjmp	.+56     	; 0x5090 <__vector_39+0x154>
    5058:	85 ea       	ldi	r24, 0xA5	; 165
    505a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    505e:	18 c0       	rjmp	.+48     	; 0x5090 <__vector_39+0x154>
    5060:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    5064:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <_twiCurrentState>
    5068:	84 e0       	ldi	r24, 0x04	; 4
    506a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    506e:	80 91 c7 1a 	lds	r24, 0x1AC7	; 0x801ac7 <_twiCurrentHandler>
    5072:	90 91 c8 1a 	lds	r25, 0x1AC8	; 0x801ac8 <_twiCurrentHandler+0x1>
    5076:	dc 01       	movw	r26, r24
    5078:	12 96       	adiw	r26, 0x02	; 2
    507a:	ed 91       	ld	r30, X+
    507c:	fc 91       	ld	r31, X
    507e:	13 97       	sbiw	r26, 0x03	; 3
    5080:	30 97       	sbiw	r30, 0x00	; 0
    5082:	31 f0       	breq	.+12     	; 0x5090 <__vector_39+0x154>
    5084:	20 e0       	ldi	r18, 0x00	; 0
    5086:	40 e0       	ldi	r20, 0x00	; 0
    5088:	50 e0       	ldi	r21, 0x00	; 0
    508a:	60 91 22 02 	lds	r22, 0x0222	; 0x800222 <_twiCurrentState>
    508e:	19 95       	eicall
    5090:	ff 91       	pop	r31
    5092:	ef 91       	pop	r30
    5094:	bf 91       	pop	r27
    5096:	af 91       	pop	r26
    5098:	9f 91       	pop	r25
    509a:	8f 91       	pop	r24
    509c:	7f 91       	pop	r23
    509e:	6f 91       	pop	r22
    50a0:	5f 91       	pop	r21
    50a2:	4f 91       	pop	r20
    50a4:	3f 91       	pop	r19
    50a6:	2f 91       	pop	r18
    50a8:	0f 90       	pop	r0
    50aa:	0b be       	out	0x3b, r0	; 59
    50ac:	0f 90       	pop	r0
    50ae:	0f be       	out	0x3f, r0	; 63
    50b0:	0f 90       	pop	r0
    50b2:	1f 90       	pop	r1
    50b4:	18 95       	reti

000050b6 <fifo_init>:
    50b6:	fc 01       	movw	r30, r24
    50b8:	41 11       	cpse	r20, r1
    50ba:	01 c0       	rjmp	.+2      	; 0x50be <fifo_init+0x8>
    50bc:	6c d3       	rcall	.+1752   	; 0x5796 <abort>
    50be:	84 2f       	mov	r24, r20
    50c0:	90 e0       	ldi	r25, 0x00	; 0
    50c2:	9c 01       	movw	r18, r24
    50c4:	21 50       	subi	r18, 0x01	; 1
    50c6:	31 09       	sbc	r19, r1
    50c8:	82 23       	and	r24, r18
    50ca:	93 23       	and	r25, r19
    50cc:	89 2b       	or	r24, r25
    50ce:	09 f0       	breq	.+2      	; 0x50d2 <fifo_init+0x1c>
    50d0:	62 d3       	rcall	.+1732   	; 0x5796 <abort>
    50d2:	41 38       	cpi	r20, 0x81	; 129
    50d4:	08 f0       	brcs	.+2      	; 0x50d8 <fifo_init+0x22>
    50d6:	5f d3       	rcall	.+1726   	; 0x5796 <abort>
    50d8:	12 82       	std	Z+2, r1	; 0x02
    50da:	13 82       	std	Z+3, r1	; 0x03
    50dc:	44 83       	std	Z+4, r20	; 0x04
    50de:	44 0f       	add	r20, r20
    50e0:	41 50       	subi	r20, 0x01	; 1
    50e2:	45 83       	std	Z+5, r20	; 0x05
    50e4:	71 83       	std	Z+1, r23	; 0x01
    50e6:	60 83       	st	Z, r22
    50e8:	80 e0       	ldi	r24, 0x00	; 0
    50ea:	90 e0       	ldi	r25, 0x00	; 0
    50ec:	08 95       	ret

000050ee <__subsf3>:
    50ee:	50 58       	subi	r21, 0x80	; 128

000050f0 <__addsf3>:
    50f0:	bb 27       	eor	r27, r27
    50f2:	aa 27       	eor	r26, r26
    50f4:	0e d0       	rcall	.+28     	; 0x5112 <__addsf3x>
    50f6:	4d c1       	rjmp	.+666    	; 0x5392 <__fp_round>
    50f8:	3e d1       	rcall	.+636    	; 0x5376 <__fp_pscA>
    50fa:	30 f0       	brcs	.+12     	; 0x5108 <__addsf3+0x18>
    50fc:	43 d1       	rcall	.+646    	; 0x5384 <__fp_pscB>
    50fe:	20 f0       	brcs	.+8      	; 0x5108 <__addsf3+0x18>
    5100:	31 f4       	brne	.+12     	; 0x510e <__addsf3+0x1e>
    5102:	9f 3f       	cpi	r25, 0xFF	; 255
    5104:	11 f4       	brne	.+4      	; 0x510a <__addsf3+0x1a>
    5106:	1e f4       	brtc	.+6      	; 0x510e <__addsf3+0x1e>
    5108:	33 c1       	rjmp	.+614    	; 0x5370 <__fp_nan>
    510a:	0e f4       	brtc	.+2      	; 0x510e <__addsf3+0x1e>
    510c:	e0 95       	com	r30
    510e:	e7 fb       	bst	r30, 7
    5110:	29 c1       	rjmp	.+594    	; 0x5364 <__fp_inf>

00005112 <__addsf3x>:
    5112:	e9 2f       	mov	r30, r25
    5114:	4f d1       	rcall	.+670    	; 0x53b4 <__fp_split3>
    5116:	80 f3       	brcs	.-32     	; 0x50f8 <__addsf3+0x8>
    5118:	ba 17       	cp	r27, r26
    511a:	62 07       	cpc	r22, r18
    511c:	73 07       	cpc	r23, r19
    511e:	84 07       	cpc	r24, r20
    5120:	95 07       	cpc	r25, r21
    5122:	18 f0       	brcs	.+6      	; 0x512a <__addsf3x+0x18>
    5124:	71 f4       	brne	.+28     	; 0x5142 <__addsf3x+0x30>
    5126:	9e f5       	brtc	.+102    	; 0x518e <__addsf3x+0x7c>
    5128:	67 c1       	rjmp	.+718    	; 0x53f8 <__fp_zero>
    512a:	0e f4       	brtc	.+2      	; 0x512e <__addsf3x+0x1c>
    512c:	e0 95       	com	r30
    512e:	0b 2e       	mov	r0, r27
    5130:	ba 2f       	mov	r27, r26
    5132:	a0 2d       	mov	r26, r0
    5134:	0b 01       	movw	r0, r22
    5136:	b9 01       	movw	r22, r18
    5138:	90 01       	movw	r18, r0
    513a:	0c 01       	movw	r0, r24
    513c:	ca 01       	movw	r24, r20
    513e:	a0 01       	movw	r20, r0
    5140:	11 24       	eor	r1, r1
    5142:	ff 27       	eor	r31, r31
    5144:	59 1b       	sub	r21, r25
    5146:	99 f0       	breq	.+38     	; 0x516e <__addsf3x+0x5c>
    5148:	59 3f       	cpi	r21, 0xF9	; 249
    514a:	50 f4       	brcc	.+20     	; 0x5160 <__addsf3x+0x4e>
    514c:	50 3e       	cpi	r21, 0xE0	; 224
    514e:	68 f1       	brcs	.+90     	; 0x51aa <__addsf3x+0x98>
    5150:	1a 16       	cp	r1, r26
    5152:	f0 40       	sbci	r31, 0x00	; 0
    5154:	a2 2f       	mov	r26, r18
    5156:	23 2f       	mov	r18, r19
    5158:	34 2f       	mov	r19, r20
    515a:	44 27       	eor	r20, r20
    515c:	58 5f       	subi	r21, 0xF8	; 248
    515e:	f3 cf       	rjmp	.-26     	; 0x5146 <__addsf3x+0x34>
    5160:	46 95       	lsr	r20
    5162:	37 95       	ror	r19
    5164:	27 95       	ror	r18
    5166:	a7 95       	ror	r26
    5168:	f0 40       	sbci	r31, 0x00	; 0
    516a:	53 95       	inc	r21
    516c:	c9 f7       	brne	.-14     	; 0x5160 <__addsf3x+0x4e>
    516e:	7e f4       	brtc	.+30     	; 0x518e <__addsf3x+0x7c>
    5170:	1f 16       	cp	r1, r31
    5172:	ba 0b       	sbc	r27, r26
    5174:	62 0b       	sbc	r22, r18
    5176:	73 0b       	sbc	r23, r19
    5178:	84 0b       	sbc	r24, r20
    517a:	ba f0       	brmi	.+46     	; 0x51aa <__addsf3x+0x98>
    517c:	91 50       	subi	r25, 0x01	; 1
    517e:	a1 f0       	breq	.+40     	; 0x51a8 <__addsf3x+0x96>
    5180:	ff 0f       	add	r31, r31
    5182:	bb 1f       	adc	r27, r27
    5184:	66 1f       	adc	r22, r22
    5186:	77 1f       	adc	r23, r23
    5188:	88 1f       	adc	r24, r24
    518a:	c2 f7       	brpl	.-16     	; 0x517c <__addsf3x+0x6a>
    518c:	0e c0       	rjmp	.+28     	; 0x51aa <__addsf3x+0x98>
    518e:	ba 0f       	add	r27, r26
    5190:	62 1f       	adc	r22, r18
    5192:	73 1f       	adc	r23, r19
    5194:	84 1f       	adc	r24, r20
    5196:	48 f4       	brcc	.+18     	; 0x51aa <__addsf3x+0x98>
    5198:	87 95       	ror	r24
    519a:	77 95       	ror	r23
    519c:	67 95       	ror	r22
    519e:	b7 95       	ror	r27
    51a0:	f7 95       	ror	r31
    51a2:	9e 3f       	cpi	r25, 0xFE	; 254
    51a4:	08 f0       	brcs	.+2      	; 0x51a8 <__addsf3x+0x96>
    51a6:	b3 cf       	rjmp	.-154    	; 0x510e <__addsf3+0x1e>
    51a8:	93 95       	inc	r25
    51aa:	88 0f       	add	r24, r24
    51ac:	08 f0       	brcs	.+2      	; 0x51b0 <__addsf3x+0x9e>
    51ae:	99 27       	eor	r25, r25
    51b0:	ee 0f       	add	r30, r30
    51b2:	97 95       	ror	r25
    51b4:	87 95       	ror	r24
    51b6:	08 95       	ret

000051b8 <__divsf3>:
    51b8:	0c d0       	rcall	.+24     	; 0x51d2 <__divsf3x>
    51ba:	eb c0       	rjmp	.+470    	; 0x5392 <__fp_round>
    51bc:	e3 d0       	rcall	.+454    	; 0x5384 <__fp_pscB>
    51be:	40 f0       	brcs	.+16     	; 0x51d0 <__divsf3+0x18>
    51c0:	da d0       	rcall	.+436    	; 0x5376 <__fp_pscA>
    51c2:	30 f0       	brcs	.+12     	; 0x51d0 <__divsf3+0x18>
    51c4:	21 f4       	brne	.+8      	; 0x51ce <__divsf3+0x16>
    51c6:	5f 3f       	cpi	r21, 0xFF	; 255
    51c8:	19 f0       	breq	.+6      	; 0x51d0 <__divsf3+0x18>
    51ca:	cc c0       	rjmp	.+408    	; 0x5364 <__fp_inf>
    51cc:	51 11       	cpse	r21, r1
    51ce:	15 c1       	rjmp	.+554    	; 0x53fa <__fp_szero>
    51d0:	cf c0       	rjmp	.+414    	; 0x5370 <__fp_nan>

000051d2 <__divsf3x>:
    51d2:	f0 d0       	rcall	.+480    	; 0x53b4 <__fp_split3>
    51d4:	98 f3       	brcs	.-26     	; 0x51bc <__divsf3+0x4>

000051d6 <__divsf3_pse>:
    51d6:	99 23       	and	r25, r25
    51d8:	c9 f3       	breq	.-14     	; 0x51cc <__divsf3+0x14>
    51da:	55 23       	and	r21, r21
    51dc:	b1 f3       	breq	.-20     	; 0x51ca <__divsf3+0x12>
    51de:	95 1b       	sub	r25, r21
    51e0:	55 0b       	sbc	r21, r21
    51e2:	bb 27       	eor	r27, r27
    51e4:	aa 27       	eor	r26, r26
    51e6:	62 17       	cp	r22, r18
    51e8:	73 07       	cpc	r23, r19
    51ea:	84 07       	cpc	r24, r20
    51ec:	38 f0       	brcs	.+14     	; 0x51fc <__divsf3_pse+0x26>
    51ee:	9f 5f       	subi	r25, 0xFF	; 255
    51f0:	5f 4f       	sbci	r21, 0xFF	; 255
    51f2:	22 0f       	add	r18, r18
    51f4:	33 1f       	adc	r19, r19
    51f6:	44 1f       	adc	r20, r20
    51f8:	aa 1f       	adc	r26, r26
    51fa:	a9 f3       	breq	.-22     	; 0x51e6 <__divsf3_pse+0x10>
    51fc:	33 d0       	rcall	.+102    	; 0x5264 <__divsf3_pse+0x8e>
    51fe:	0e 2e       	mov	r0, r30
    5200:	3a f0       	brmi	.+14     	; 0x5210 <__divsf3_pse+0x3a>
    5202:	e0 e8       	ldi	r30, 0x80	; 128
    5204:	30 d0       	rcall	.+96     	; 0x5266 <__divsf3_pse+0x90>
    5206:	91 50       	subi	r25, 0x01	; 1
    5208:	50 40       	sbci	r21, 0x00	; 0
    520a:	e6 95       	lsr	r30
    520c:	00 1c       	adc	r0, r0
    520e:	ca f7       	brpl	.-14     	; 0x5202 <__divsf3_pse+0x2c>
    5210:	29 d0       	rcall	.+82     	; 0x5264 <__divsf3_pse+0x8e>
    5212:	fe 2f       	mov	r31, r30
    5214:	27 d0       	rcall	.+78     	; 0x5264 <__divsf3_pse+0x8e>
    5216:	66 0f       	add	r22, r22
    5218:	77 1f       	adc	r23, r23
    521a:	88 1f       	adc	r24, r24
    521c:	bb 1f       	adc	r27, r27
    521e:	26 17       	cp	r18, r22
    5220:	37 07       	cpc	r19, r23
    5222:	48 07       	cpc	r20, r24
    5224:	ab 07       	cpc	r26, r27
    5226:	b0 e8       	ldi	r27, 0x80	; 128
    5228:	09 f0       	breq	.+2      	; 0x522c <__divsf3_pse+0x56>
    522a:	bb 0b       	sbc	r27, r27
    522c:	80 2d       	mov	r24, r0
    522e:	bf 01       	movw	r22, r30
    5230:	ff 27       	eor	r31, r31
    5232:	93 58       	subi	r25, 0x83	; 131
    5234:	5f 4f       	sbci	r21, 0xFF	; 255
    5236:	2a f0       	brmi	.+10     	; 0x5242 <__divsf3_pse+0x6c>
    5238:	9e 3f       	cpi	r25, 0xFE	; 254
    523a:	51 05       	cpc	r21, r1
    523c:	68 f0       	brcs	.+26     	; 0x5258 <__divsf3_pse+0x82>
    523e:	92 c0       	rjmp	.+292    	; 0x5364 <__fp_inf>
    5240:	dc c0       	rjmp	.+440    	; 0x53fa <__fp_szero>
    5242:	5f 3f       	cpi	r21, 0xFF	; 255
    5244:	ec f3       	brlt	.-6      	; 0x5240 <__divsf3_pse+0x6a>
    5246:	98 3e       	cpi	r25, 0xE8	; 232
    5248:	dc f3       	brlt	.-10     	; 0x5240 <__divsf3_pse+0x6a>
    524a:	86 95       	lsr	r24
    524c:	77 95       	ror	r23
    524e:	67 95       	ror	r22
    5250:	b7 95       	ror	r27
    5252:	f7 95       	ror	r31
    5254:	9f 5f       	subi	r25, 0xFF	; 255
    5256:	c9 f7       	brne	.-14     	; 0x524a <__divsf3_pse+0x74>
    5258:	88 0f       	add	r24, r24
    525a:	91 1d       	adc	r25, r1
    525c:	96 95       	lsr	r25
    525e:	87 95       	ror	r24
    5260:	97 f9       	bld	r25, 7
    5262:	08 95       	ret
    5264:	e1 e0       	ldi	r30, 0x01	; 1
    5266:	66 0f       	add	r22, r22
    5268:	77 1f       	adc	r23, r23
    526a:	88 1f       	adc	r24, r24
    526c:	bb 1f       	adc	r27, r27
    526e:	62 17       	cp	r22, r18
    5270:	73 07       	cpc	r23, r19
    5272:	84 07       	cpc	r24, r20
    5274:	ba 07       	cpc	r27, r26
    5276:	20 f0       	brcs	.+8      	; 0x5280 <__divsf3_pse+0xaa>
    5278:	62 1b       	sub	r22, r18
    527a:	73 0b       	sbc	r23, r19
    527c:	84 0b       	sbc	r24, r20
    527e:	ba 0b       	sbc	r27, r26
    5280:	ee 1f       	adc	r30, r30
    5282:	88 f7       	brcc	.-30     	; 0x5266 <__divsf3_pse+0x90>
    5284:	e0 95       	com	r30
    5286:	08 95       	ret

00005288 <__fixsfsi>:
    5288:	04 d0       	rcall	.+8      	; 0x5292 <__fixunssfsi>
    528a:	68 94       	set
    528c:	b1 11       	cpse	r27, r1
    528e:	b5 c0       	rjmp	.+362    	; 0x53fa <__fp_szero>
    5290:	08 95       	ret

00005292 <__fixunssfsi>:
    5292:	98 d0       	rcall	.+304    	; 0x53c4 <__fp_splitA>
    5294:	88 f0       	brcs	.+34     	; 0x52b8 <__fixunssfsi+0x26>
    5296:	9f 57       	subi	r25, 0x7F	; 127
    5298:	90 f0       	brcs	.+36     	; 0x52be <__fixunssfsi+0x2c>
    529a:	b9 2f       	mov	r27, r25
    529c:	99 27       	eor	r25, r25
    529e:	b7 51       	subi	r27, 0x17	; 23
    52a0:	a0 f0       	brcs	.+40     	; 0x52ca <__fixunssfsi+0x38>
    52a2:	d1 f0       	breq	.+52     	; 0x52d8 <__fixunssfsi+0x46>
    52a4:	66 0f       	add	r22, r22
    52a6:	77 1f       	adc	r23, r23
    52a8:	88 1f       	adc	r24, r24
    52aa:	99 1f       	adc	r25, r25
    52ac:	1a f0       	brmi	.+6      	; 0x52b4 <__fixunssfsi+0x22>
    52ae:	ba 95       	dec	r27
    52b0:	c9 f7       	brne	.-14     	; 0x52a4 <__fixunssfsi+0x12>
    52b2:	12 c0       	rjmp	.+36     	; 0x52d8 <__fixunssfsi+0x46>
    52b4:	b1 30       	cpi	r27, 0x01	; 1
    52b6:	81 f0       	breq	.+32     	; 0x52d8 <__fixunssfsi+0x46>
    52b8:	9f d0       	rcall	.+318    	; 0x53f8 <__fp_zero>
    52ba:	b1 e0       	ldi	r27, 0x01	; 1
    52bc:	08 95       	ret
    52be:	9c c0       	rjmp	.+312    	; 0x53f8 <__fp_zero>
    52c0:	67 2f       	mov	r22, r23
    52c2:	78 2f       	mov	r23, r24
    52c4:	88 27       	eor	r24, r24
    52c6:	b8 5f       	subi	r27, 0xF8	; 248
    52c8:	39 f0       	breq	.+14     	; 0x52d8 <__fixunssfsi+0x46>
    52ca:	b9 3f       	cpi	r27, 0xF9	; 249
    52cc:	cc f3       	brlt	.-14     	; 0x52c0 <__fixunssfsi+0x2e>
    52ce:	86 95       	lsr	r24
    52d0:	77 95       	ror	r23
    52d2:	67 95       	ror	r22
    52d4:	b3 95       	inc	r27
    52d6:	d9 f7       	brne	.-10     	; 0x52ce <__fixunssfsi+0x3c>
    52d8:	3e f4       	brtc	.+14     	; 0x52e8 <__fixunssfsi+0x56>
    52da:	90 95       	com	r25
    52dc:	80 95       	com	r24
    52de:	70 95       	com	r23
    52e0:	61 95       	neg	r22
    52e2:	7f 4f       	sbci	r23, 0xFF	; 255
    52e4:	8f 4f       	sbci	r24, 0xFF	; 255
    52e6:	9f 4f       	sbci	r25, 0xFF	; 255
    52e8:	08 95       	ret

000052ea <__floatunsisf>:
    52ea:	e8 94       	clt
    52ec:	09 c0       	rjmp	.+18     	; 0x5300 <__floatsisf+0x12>

000052ee <__floatsisf>:
    52ee:	97 fb       	bst	r25, 7
    52f0:	3e f4       	brtc	.+14     	; 0x5300 <__floatsisf+0x12>
    52f2:	90 95       	com	r25
    52f4:	80 95       	com	r24
    52f6:	70 95       	com	r23
    52f8:	61 95       	neg	r22
    52fa:	7f 4f       	sbci	r23, 0xFF	; 255
    52fc:	8f 4f       	sbci	r24, 0xFF	; 255
    52fe:	9f 4f       	sbci	r25, 0xFF	; 255
    5300:	99 23       	and	r25, r25
    5302:	a9 f0       	breq	.+42     	; 0x532e <__floatsisf+0x40>
    5304:	f9 2f       	mov	r31, r25
    5306:	96 e9       	ldi	r25, 0x96	; 150
    5308:	bb 27       	eor	r27, r27
    530a:	93 95       	inc	r25
    530c:	f6 95       	lsr	r31
    530e:	87 95       	ror	r24
    5310:	77 95       	ror	r23
    5312:	67 95       	ror	r22
    5314:	b7 95       	ror	r27
    5316:	f1 11       	cpse	r31, r1
    5318:	f8 cf       	rjmp	.-16     	; 0x530a <__floatsisf+0x1c>
    531a:	fa f4       	brpl	.+62     	; 0x535a <__floatsisf+0x6c>
    531c:	bb 0f       	add	r27, r27
    531e:	11 f4       	brne	.+4      	; 0x5324 <__floatsisf+0x36>
    5320:	60 ff       	sbrs	r22, 0
    5322:	1b c0       	rjmp	.+54     	; 0x535a <__floatsisf+0x6c>
    5324:	6f 5f       	subi	r22, 0xFF	; 255
    5326:	7f 4f       	sbci	r23, 0xFF	; 255
    5328:	8f 4f       	sbci	r24, 0xFF	; 255
    532a:	9f 4f       	sbci	r25, 0xFF	; 255
    532c:	16 c0       	rjmp	.+44     	; 0x535a <__floatsisf+0x6c>
    532e:	88 23       	and	r24, r24
    5330:	11 f0       	breq	.+4      	; 0x5336 <__floatsisf+0x48>
    5332:	96 e9       	ldi	r25, 0x96	; 150
    5334:	11 c0       	rjmp	.+34     	; 0x5358 <__floatsisf+0x6a>
    5336:	77 23       	and	r23, r23
    5338:	21 f0       	breq	.+8      	; 0x5342 <__floatsisf+0x54>
    533a:	9e e8       	ldi	r25, 0x8E	; 142
    533c:	87 2f       	mov	r24, r23
    533e:	76 2f       	mov	r23, r22
    5340:	05 c0       	rjmp	.+10     	; 0x534c <__floatsisf+0x5e>
    5342:	66 23       	and	r22, r22
    5344:	71 f0       	breq	.+28     	; 0x5362 <__floatsisf+0x74>
    5346:	96 e8       	ldi	r25, 0x86	; 134
    5348:	86 2f       	mov	r24, r22
    534a:	70 e0       	ldi	r23, 0x00	; 0
    534c:	60 e0       	ldi	r22, 0x00	; 0
    534e:	2a f0       	brmi	.+10     	; 0x535a <__floatsisf+0x6c>
    5350:	9a 95       	dec	r25
    5352:	66 0f       	add	r22, r22
    5354:	77 1f       	adc	r23, r23
    5356:	88 1f       	adc	r24, r24
    5358:	da f7       	brpl	.-10     	; 0x5350 <__floatsisf+0x62>
    535a:	88 0f       	add	r24, r24
    535c:	96 95       	lsr	r25
    535e:	87 95       	ror	r24
    5360:	97 f9       	bld	r25, 7
    5362:	08 95       	ret

00005364 <__fp_inf>:
    5364:	97 f9       	bld	r25, 7
    5366:	9f 67       	ori	r25, 0x7F	; 127
    5368:	80 e8       	ldi	r24, 0x80	; 128
    536a:	70 e0       	ldi	r23, 0x00	; 0
    536c:	60 e0       	ldi	r22, 0x00	; 0
    536e:	08 95       	ret

00005370 <__fp_nan>:
    5370:	9f ef       	ldi	r25, 0xFF	; 255
    5372:	80 ec       	ldi	r24, 0xC0	; 192
    5374:	08 95       	ret

00005376 <__fp_pscA>:
    5376:	00 24       	eor	r0, r0
    5378:	0a 94       	dec	r0
    537a:	16 16       	cp	r1, r22
    537c:	17 06       	cpc	r1, r23
    537e:	18 06       	cpc	r1, r24
    5380:	09 06       	cpc	r0, r25
    5382:	08 95       	ret

00005384 <__fp_pscB>:
    5384:	00 24       	eor	r0, r0
    5386:	0a 94       	dec	r0
    5388:	12 16       	cp	r1, r18
    538a:	13 06       	cpc	r1, r19
    538c:	14 06       	cpc	r1, r20
    538e:	05 06       	cpc	r0, r21
    5390:	08 95       	ret

00005392 <__fp_round>:
    5392:	09 2e       	mov	r0, r25
    5394:	03 94       	inc	r0
    5396:	00 0c       	add	r0, r0
    5398:	11 f4       	brne	.+4      	; 0x539e <__fp_round+0xc>
    539a:	88 23       	and	r24, r24
    539c:	52 f0       	brmi	.+20     	; 0x53b2 <__fp_round+0x20>
    539e:	bb 0f       	add	r27, r27
    53a0:	40 f4       	brcc	.+16     	; 0x53b2 <__fp_round+0x20>
    53a2:	bf 2b       	or	r27, r31
    53a4:	11 f4       	brne	.+4      	; 0x53aa <__fp_round+0x18>
    53a6:	60 ff       	sbrs	r22, 0
    53a8:	04 c0       	rjmp	.+8      	; 0x53b2 <__fp_round+0x20>
    53aa:	6f 5f       	subi	r22, 0xFF	; 255
    53ac:	7f 4f       	sbci	r23, 0xFF	; 255
    53ae:	8f 4f       	sbci	r24, 0xFF	; 255
    53b0:	9f 4f       	sbci	r25, 0xFF	; 255
    53b2:	08 95       	ret

000053b4 <__fp_split3>:
    53b4:	57 fd       	sbrc	r21, 7
    53b6:	90 58       	subi	r25, 0x80	; 128
    53b8:	44 0f       	add	r20, r20
    53ba:	55 1f       	adc	r21, r21
    53bc:	59 f0       	breq	.+22     	; 0x53d4 <__fp_splitA+0x10>
    53be:	5f 3f       	cpi	r21, 0xFF	; 255
    53c0:	71 f0       	breq	.+28     	; 0x53de <__fp_splitA+0x1a>
    53c2:	47 95       	ror	r20

000053c4 <__fp_splitA>:
    53c4:	88 0f       	add	r24, r24
    53c6:	97 fb       	bst	r25, 7
    53c8:	99 1f       	adc	r25, r25
    53ca:	61 f0       	breq	.+24     	; 0x53e4 <__fp_splitA+0x20>
    53cc:	9f 3f       	cpi	r25, 0xFF	; 255
    53ce:	79 f0       	breq	.+30     	; 0x53ee <__fp_splitA+0x2a>
    53d0:	87 95       	ror	r24
    53d2:	08 95       	ret
    53d4:	12 16       	cp	r1, r18
    53d6:	13 06       	cpc	r1, r19
    53d8:	14 06       	cpc	r1, r20
    53da:	55 1f       	adc	r21, r21
    53dc:	f2 cf       	rjmp	.-28     	; 0x53c2 <__fp_split3+0xe>
    53de:	46 95       	lsr	r20
    53e0:	f1 df       	rcall	.-30     	; 0x53c4 <__fp_splitA>
    53e2:	08 c0       	rjmp	.+16     	; 0x53f4 <__fp_splitA+0x30>
    53e4:	16 16       	cp	r1, r22
    53e6:	17 06       	cpc	r1, r23
    53e8:	18 06       	cpc	r1, r24
    53ea:	99 1f       	adc	r25, r25
    53ec:	f1 cf       	rjmp	.-30     	; 0x53d0 <__fp_splitA+0xc>
    53ee:	86 95       	lsr	r24
    53f0:	71 05       	cpc	r23, r1
    53f2:	61 05       	cpc	r22, r1
    53f4:	08 94       	sec
    53f6:	08 95       	ret

000053f8 <__fp_zero>:
    53f8:	e8 94       	clt

000053fa <__fp_szero>:
    53fa:	bb 27       	eor	r27, r27
    53fc:	66 27       	eor	r22, r22
    53fe:	77 27       	eor	r23, r23
    5400:	cb 01       	movw	r24, r22
    5402:	97 f9       	bld	r25, 7
    5404:	08 95       	ret

00005406 <__mulsf3>:
    5406:	0b d0       	rcall	.+22     	; 0x541e <__mulsf3x>
    5408:	c4 cf       	rjmp	.-120    	; 0x5392 <__fp_round>
    540a:	b5 df       	rcall	.-150    	; 0x5376 <__fp_pscA>
    540c:	28 f0       	brcs	.+10     	; 0x5418 <__mulsf3+0x12>
    540e:	ba df       	rcall	.-140    	; 0x5384 <__fp_pscB>
    5410:	18 f0       	brcs	.+6      	; 0x5418 <__mulsf3+0x12>
    5412:	95 23       	and	r25, r21
    5414:	09 f0       	breq	.+2      	; 0x5418 <__mulsf3+0x12>
    5416:	a6 cf       	rjmp	.-180    	; 0x5364 <__fp_inf>
    5418:	ab cf       	rjmp	.-170    	; 0x5370 <__fp_nan>
    541a:	11 24       	eor	r1, r1
    541c:	ee cf       	rjmp	.-36     	; 0x53fa <__fp_szero>

0000541e <__mulsf3x>:
    541e:	ca df       	rcall	.-108    	; 0x53b4 <__fp_split3>
    5420:	a0 f3       	brcs	.-24     	; 0x540a <__mulsf3+0x4>

00005422 <__mulsf3_pse>:
    5422:	95 9f       	mul	r25, r21
    5424:	d1 f3       	breq	.-12     	; 0x541a <__mulsf3+0x14>
    5426:	95 0f       	add	r25, r21
    5428:	50 e0       	ldi	r21, 0x00	; 0
    542a:	55 1f       	adc	r21, r21
    542c:	62 9f       	mul	r22, r18
    542e:	f0 01       	movw	r30, r0
    5430:	72 9f       	mul	r23, r18
    5432:	bb 27       	eor	r27, r27
    5434:	f0 0d       	add	r31, r0
    5436:	b1 1d       	adc	r27, r1
    5438:	63 9f       	mul	r22, r19
    543a:	aa 27       	eor	r26, r26
    543c:	f0 0d       	add	r31, r0
    543e:	b1 1d       	adc	r27, r1
    5440:	aa 1f       	adc	r26, r26
    5442:	64 9f       	mul	r22, r20
    5444:	66 27       	eor	r22, r22
    5446:	b0 0d       	add	r27, r0
    5448:	a1 1d       	adc	r26, r1
    544a:	66 1f       	adc	r22, r22
    544c:	82 9f       	mul	r24, r18
    544e:	22 27       	eor	r18, r18
    5450:	b0 0d       	add	r27, r0
    5452:	a1 1d       	adc	r26, r1
    5454:	62 1f       	adc	r22, r18
    5456:	73 9f       	mul	r23, r19
    5458:	b0 0d       	add	r27, r0
    545a:	a1 1d       	adc	r26, r1
    545c:	62 1f       	adc	r22, r18
    545e:	83 9f       	mul	r24, r19
    5460:	a0 0d       	add	r26, r0
    5462:	61 1d       	adc	r22, r1
    5464:	22 1f       	adc	r18, r18
    5466:	74 9f       	mul	r23, r20
    5468:	33 27       	eor	r19, r19
    546a:	a0 0d       	add	r26, r0
    546c:	61 1d       	adc	r22, r1
    546e:	23 1f       	adc	r18, r19
    5470:	84 9f       	mul	r24, r20
    5472:	60 0d       	add	r22, r0
    5474:	21 1d       	adc	r18, r1
    5476:	82 2f       	mov	r24, r18
    5478:	76 2f       	mov	r23, r22
    547a:	6a 2f       	mov	r22, r26
    547c:	11 24       	eor	r1, r1
    547e:	9f 57       	subi	r25, 0x7F	; 127
    5480:	50 40       	sbci	r21, 0x00	; 0
    5482:	8a f0       	brmi	.+34     	; 0x54a6 <__mulsf3_pse+0x84>
    5484:	e1 f0       	breq	.+56     	; 0x54be <__mulsf3_pse+0x9c>
    5486:	88 23       	and	r24, r24
    5488:	4a f0       	brmi	.+18     	; 0x549c <__mulsf3_pse+0x7a>
    548a:	ee 0f       	add	r30, r30
    548c:	ff 1f       	adc	r31, r31
    548e:	bb 1f       	adc	r27, r27
    5490:	66 1f       	adc	r22, r22
    5492:	77 1f       	adc	r23, r23
    5494:	88 1f       	adc	r24, r24
    5496:	91 50       	subi	r25, 0x01	; 1
    5498:	50 40       	sbci	r21, 0x00	; 0
    549a:	a9 f7       	brne	.-22     	; 0x5486 <__mulsf3_pse+0x64>
    549c:	9e 3f       	cpi	r25, 0xFE	; 254
    549e:	51 05       	cpc	r21, r1
    54a0:	70 f0       	brcs	.+28     	; 0x54be <__mulsf3_pse+0x9c>
    54a2:	60 cf       	rjmp	.-320    	; 0x5364 <__fp_inf>
    54a4:	aa cf       	rjmp	.-172    	; 0x53fa <__fp_szero>
    54a6:	5f 3f       	cpi	r21, 0xFF	; 255
    54a8:	ec f3       	brlt	.-6      	; 0x54a4 <__mulsf3_pse+0x82>
    54aa:	98 3e       	cpi	r25, 0xE8	; 232
    54ac:	dc f3       	brlt	.-10     	; 0x54a4 <__mulsf3_pse+0x82>
    54ae:	86 95       	lsr	r24
    54b0:	77 95       	ror	r23
    54b2:	67 95       	ror	r22
    54b4:	b7 95       	ror	r27
    54b6:	f7 95       	ror	r31
    54b8:	e7 95       	ror	r30
    54ba:	9f 5f       	subi	r25, 0xFF	; 255
    54bc:	c1 f7       	brne	.-16     	; 0x54ae <__mulsf3_pse+0x8c>
    54be:	fe 2b       	or	r31, r30
    54c0:	88 0f       	add	r24, r24
    54c2:	91 1d       	adc	r25, r1
    54c4:	96 95       	lsr	r25
    54c6:	87 95       	ror	r24
    54c8:	97 f9       	bld	r25, 7
    54ca:	08 95       	ret

000054cc <__udivmodsi4>:
    54cc:	a1 e2       	ldi	r26, 0x21	; 33
    54ce:	1a 2e       	mov	r1, r26
    54d0:	aa 1b       	sub	r26, r26
    54d2:	bb 1b       	sub	r27, r27
    54d4:	fd 01       	movw	r30, r26
    54d6:	0d c0       	rjmp	.+26     	; 0x54f2 <__udivmodsi4_ep>

000054d8 <__udivmodsi4_loop>:
    54d8:	aa 1f       	adc	r26, r26
    54da:	bb 1f       	adc	r27, r27
    54dc:	ee 1f       	adc	r30, r30
    54de:	ff 1f       	adc	r31, r31
    54e0:	a2 17       	cp	r26, r18
    54e2:	b3 07       	cpc	r27, r19
    54e4:	e4 07       	cpc	r30, r20
    54e6:	f5 07       	cpc	r31, r21
    54e8:	20 f0       	brcs	.+8      	; 0x54f2 <__udivmodsi4_ep>
    54ea:	a2 1b       	sub	r26, r18
    54ec:	b3 0b       	sbc	r27, r19
    54ee:	e4 0b       	sbc	r30, r20
    54f0:	f5 0b       	sbc	r31, r21

000054f2 <__udivmodsi4_ep>:
    54f2:	66 1f       	adc	r22, r22
    54f4:	77 1f       	adc	r23, r23
    54f6:	88 1f       	adc	r24, r24
    54f8:	99 1f       	adc	r25, r25
    54fa:	1a 94       	dec	r1
    54fc:	69 f7       	brne	.-38     	; 0x54d8 <__udivmodsi4_loop>
    54fe:	60 95       	com	r22
    5500:	70 95       	com	r23
    5502:	80 95       	com	r24
    5504:	90 95       	com	r25
    5506:	9b 01       	movw	r18, r22
    5508:	ac 01       	movw	r20, r24
    550a:	bd 01       	movw	r22, r26
    550c:	cf 01       	movw	r24, r30
    550e:	08 95       	ret

00005510 <__tablejump2__>:
    5510:	ee 0f       	add	r30, r30
    5512:	ff 1f       	adc	r31, r31
    5514:	88 1f       	adc	r24, r24
    5516:	8b bf       	out	0x3b, r24	; 59
    5518:	07 90       	elpm	r0, Z+
    551a:	f6 91       	elpm	r31, Z
    551c:	e0 2d       	mov	r30, r0
    551e:	19 94       	eijmp

00005520 <calloc>:
    5520:	0f 93       	push	r16
    5522:	1f 93       	push	r17
    5524:	cf 93       	push	r28
    5526:	df 93       	push	r29
    5528:	86 9f       	mul	r24, r22
    552a:	80 01       	movw	r16, r0
    552c:	87 9f       	mul	r24, r23
    552e:	10 0d       	add	r17, r0
    5530:	96 9f       	mul	r25, r22
    5532:	10 0d       	add	r17, r0
    5534:	11 24       	eor	r1, r1
    5536:	c8 01       	movw	r24, r16
    5538:	0d d0       	rcall	.+26     	; 0x5554 <malloc>
    553a:	ec 01       	movw	r28, r24
    553c:	00 97       	sbiw	r24, 0x00	; 0
    553e:	21 f0       	breq	.+8      	; 0x5548 <calloc+0x28>
    5540:	a8 01       	movw	r20, r16
    5542:	60 e0       	ldi	r22, 0x00	; 0
    5544:	70 e0       	ldi	r23, 0x00	; 0
    5546:	34 d1       	rcall	.+616    	; 0x57b0 <memset>
    5548:	ce 01       	movw	r24, r28
    554a:	df 91       	pop	r29
    554c:	cf 91       	pop	r28
    554e:	1f 91       	pop	r17
    5550:	0f 91       	pop	r16
    5552:	08 95       	ret

00005554 <malloc>:
    5554:	0f 93       	push	r16
    5556:	1f 93       	push	r17
    5558:	cf 93       	push	r28
    555a:	df 93       	push	r29
    555c:	82 30       	cpi	r24, 0x02	; 2
    555e:	91 05       	cpc	r25, r1
    5560:	10 f4       	brcc	.+4      	; 0x5566 <malloc+0x12>
    5562:	82 e0       	ldi	r24, 0x02	; 2
    5564:	90 e0       	ldi	r25, 0x00	; 0
    5566:	e0 91 0b 1b 	lds	r30, 0x1B0B	; 0x801b0b <__flp>
    556a:	f0 91 0c 1b 	lds	r31, 0x1B0C	; 0x801b0c <__flp+0x1>
    556e:	20 e0       	ldi	r18, 0x00	; 0
    5570:	30 e0       	ldi	r19, 0x00	; 0
    5572:	a0 e0       	ldi	r26, 0x00	; 0
    5574:	b0 e0       	ldi	r27, 0x00	; 0
    5576:	30 97       	sbiw	r30, 0x00	; 0
    5578:	19 f1       	breq	.+70     	; 0x55c0 <malloc+0x6c>
    557a:	40 81       	ld	r20, Z
    557c:	51 81       	ldd	r21, Z+1	; 0x01
    557e:	02 81       	ldd	r16, Z+2	; 0x02
    5580:	13 81       	ldd	r17, Z+3	; 0x03
    5582:	48 17       	cp	r20, r24
    5584:	59 07       	cpc	r21, r25
    5586:	c8 f0       	brcs	.+50     	; 0x55ba <malloc+0x66>
    5588:	84 17       	cp	r24, r20
    558a:	95 07       	cpc	r25, r21
    558c:	69 f4       	brne	.+26     	; 0x55a8 <malloc+0x54>
    558e:	10 97       	sbiw	r26, 0x00	; 0
    5590:	31 f0       	breq	.+12     	; 0x559e <malloc+0x4a>
    5592:	12 96       	adiw	r26, 0x02	; 2
    5594:	0c 93       	st	X, r16
    5596:	12 97       	sbiw	r26, 0x02	; 2
    5598:	13 96       	adiw	r26, 0x03	; 3
    559a:	1c 93       	st	X, r17
    559c:	27 c0       	rjmp	.+78     	; 0x55ec <malloc+0x98>
    559e:	00 93 0b 1b 	sts	0x1B0B, r16	; 0x801b0b <__flp>
    55a2:	10 93 0c 1b 	sts	0x1B0C, r17	; 0x801b0c <__flp+0x1>
    55a6:	22 c0       	rjmp	.+68     	; 0x55ec <malloc+0x98>
    55a8:	21 15       	cp	r18, r1
    55aa:	31 05       	cpc	r19, r1
    55ac:	19 f0       	breq	.+6      	; 0x55b4 <malloc+0x60>
    55ae:	42 17       	cp	r20, r18
    55b0:	53 07       	cpc	r21, r19
    55b2:	18 f4       	brcc	.+6      	; 0x55ba <malloc+0x66>
    55b4:	9a 01       	movw	r18, r20
    55b6:	bd 01       	movw	r22, r26
    55b8:	ef 01       	movw	r28, r30
    55ba:	df 01       	movw	r26, r30
    55bc:	f8 01       	movw	r30, r16
    55be:	db cf       	rjmp	.-74     	; 0x5576 <malloc+0x22>
    55c0:	21 15       	cp	r18, r1
    55c2:	31 05       	cpc	r19, r1
    55c4:	f9 f0       	breq	.+62     	; 0x5604 <malloc+0xb0>
    55c6:	28 1b       	sub	r18, r24
    55c8:	39 0b       	sbc	r19, r25
    55ca:	24 30       	cpi	r18, 0x04	; 4
    55cc:	31 05       	cpc	r19, r1
    55ce:	80 f4       	brcc	.+32     	; 0x55f0 <malloc+0x9c>
    55d0:	8a 81       	ldd	r24, Y+2	; 0x02
    55d2:	9b 81       	ldd	r25, Y+3	; 0x03
    55d4:	61 15       	cp	r22, r1
    55d6:	71 05       	cpc	r23, r1
    55d8:	21 f0       	breq	.+8      	; 0x55e2 <malloc+0x8e>
    55da:	fb 01       	movw	r30, r22
    55dc:	93 83       	std	Z+3, r25	; 0x03
    55de:	82 83       	std	Z+2, r24	; 0x02
    55e0:	04 c0       	rjmp	.+8      	; 0x55ea <malloc+0x96>
    55e2:	90 93 0c 1b 	sts	0x1B0C, r25	; 0x801b0c <__flp+0x1>
    55e6:	80 93 0b 1b 	sts	0x1B0B, r24	; 0x801b0b <__flp>
    55ea:	fe 01       	movw	r30, r28
    55ec:	32 96       	adiw	r30, 0x02	; 2
    55ee:	44 c0       	rjmp	.+136    	; 0x5678 <malloc+0x124>
    55f0:	fe 01       	movw	r30, r28
    55f2:	e2 0f       	add	r30, r18
    55f4:	f3 1f       	adc	r31, r19
    55f6:	81 93       	st	Z+, r24
    55f8:	91 93       	st	Z+, r25
    55fa:	22 50       	subi	r18, 0x02	; 2
    55fc:	31 09       	sbc	r19, r1
    55fe:	39 83       	std	Y+1, r19	; 0x01
    5600:	28 83       	st	Y, r18
    5602:	3a c0       	rjmp	.+116    	; 0x5678 <malloc+0x124>
    5604:	20 91 09 1b 	lds	r18, 0x1B09	; 0x801b09 <__brkval>
    5608:	30 91 0a 1b 	lds	r19, 0x1B0A	; 0x801b0a <__brkval+0x1>
    560c:	23 2b       	or	r18, r19
    560e:	41 f4       	brne	.+16     	; 0x5620 <malloc+0xcc>
    5610:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    5614:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    5618:	30 93 0a 1b 	sts	0x1B0A, r19	; 0x801b0a <__brkval+0x1>
    561c:	20 93 09 1b 	sts	0x1B09, r18	; 0x801b09 <__brkval>
    5620:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    5624:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    5628:	21 15       	cp	r18, r1
    562a:	31 05       	cpc	r19, r1
    562c:	41 f4       	brne	.+16     	; 0x563e <malloc+0xea>
    562e:	2d b7       	in	r18, 0x3d	; 61
    5630:	3e b7       	in	r19, 0x3e	; 62
    5632:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    5636:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    563a:	24 1b       	sub	r18, r20
    563c:	35 0b       	sbc	r19, r21
    563e:	e0 91 09 1b 	lds	r30, 0x1B09	; 0x801b09 <__brkval>
    5642:	f0 91 0a 1b 	lds	r31, 0x1B0A	; 0x801b0a <__brkval+0x1>
    5646:	e2 17       	cp	r30, r18
    5648:	f3 07       	cpc	r31, r19
    564a:	a0 f4       	brcc	.+40     	; 0x5674 <malloc+0x120>
    564c:	2e 1b       	sub	r18, r30
    564e:	3f 0b       	sbc	r19, r31
    5650:	28 17       	cp	r18, r24
    5652:	39 07       	cpc	r19, r25
    5654:	78 f0       	brcs	.+30     	; 0x5674 <malloc+0x120>
    5656:	ac 01       	movw	r20, r24
    5658:	4e 5f       	subi	r20, 0xFE	; 254
    565a:	5f 4f       	sbci	r21, 0xFF	; 255
    565c:	24 17       	cp	r18, r20
    565e:	35 07       	cpc	r19, r21
    5660:	48 f0       	brcs	.+18     	; 0x5674 <malloc+0x120>
    5662:	4e 0f       	add	r20, r30
    5664:	5f 1f       	adc	r21, r31
    5666:	50 93 0a 1b 	sts	0x1B0A, r21	; 0x801b0a <__brkval+0x1>
    566a:	40 93 09 1b 	sts	0x1B09, r20	; 0x801b09 <__brkval>
    566e:	81 93       	st	Z+, r24
    5670:	91 93       	st	Z+, r25
    5672:	02 c0       	rjmp	.+4      	; 0x5678 <malloc+0x124>
    5674:	e0 e0       	ldi	r30, 0x00	; 0
    5676:	f0 e0       	ldi	r31, 0x00	; 0
    5678:	cf 01       	movw	r24, r30
    567a:	df 91       	pop	r29
    567c:	cf 91       	pop	r28
    567e:	1f 91       	pop	r17
    5680:	0f 91       	pop	r16
    5682:	08 95       	ret

00005684 <free>:
    5684:	cf 93       	push	r28
    5686:	df 93       	push	r29
    5688:	00 97       	sbiw	r24, 0x00	; 0
    568a:	09 f4       	brne	.+2      	; 0x568e <free+0xa>
    568c:	81 c0       	rjmp	.+258    	; 0x5790 <free+0x10c>
    568e:	fc 01       	movw	r30, r24
    5690:	32 97       	sbiw	r30, 0x02	; 2
    5692:	13 82       	std	Z+3, r1	; 0x03
    5694:	12 82       	std	Z+2, r1	; 0x02
    5696:	a0 91 0b 1b 	lds	r26, 0x1B0B	; 0x801b0b <__flp>
    569a:	b0 91 0c 1b 	lds	r27, 0x1B0C	; 0x801b0c <__flp+0x1>
    569e:	10 97       	sbiw	r26, 0x00	; 0
    56a0:	81 f4       	brne	.+32     	; 0x56c2 <free+0x3e>
    56a2:	20 81       	ld	r18, Z
    56a4:	31 81       	ldd	r19, Z+1	; 0x01
    56a6:	82 0f       	add	r24, r18
    56a8:	93 1f       	adc	r25, r19
    56aa:	20 91 09 1b 	lds	r18, 0x1B09	; 0x801b09 <__brkval>
    56ae:	30 91 0a 1b 	lds	r19, 0x1B0A	; 0x801b0a <__brkval+0x1>
    56b2:	28 17       	cp	r18, r24
    56b4:	39 07       	cpc	r19, r25
    56b6:	51 f5       	brne	.+84     	; 0x570c <free+0x88>
    56b8:	f0 93 0a 1b 	sts	0x1B0A, r31	; 0x801b0a <__brkval+0x1>
    56bc:	e0 93 09 1b 	sts	0x1B09, r30	; 0x801b09 <__brkval>
    56c0:	67 c0       	rjmp	.+206    	; 0x5790 <free+0x10c>
    56c2:	ed 01       	movw	r28, r26
    56c4:	20 e0       	ldi	r18, 0x00	; 0
    56c6:	30 e0       	ldi	r19, 0x00	; 0
    56c8:	ce 17       	cp	r28, r30
    56ca:	df 07       	cpc	r29, r31
    56cc:	40 f4       	brcc	.+16     	; 0x56de <free+0x5a>
    56ce:	4a 81       	ldd	r20, Y+2	; 0x02
    56d0:	5b 81       	ldd	r21, Y+3	; 0x03
    56d2:	9e 01       	movw	r18, r28
    56d4:	41 15       	cp	r20, r1
    56d6:	51 05       	cpc	r21, r1
    56d8:	f1 f0       	breq	.+60     	; 0x5716 <free+0x92>
    56da:	ea 01       	movw	r28, r20
    56dc:	f5 cf       	rjmp	.-22     	; 0x56c8 <free+0x44>
    56de:	d3 83       	std	Z+3, r29	; 0x03
    56e0:	c2 83       	std	Z+2, r28	; 0x02
    56e2:	40 81       	ld	r20, Z
    56e4:	51 81       	ldd	r21, Z+1	; 0x01
    56e6:	84 0f       	add	r24, r20
    56e8:	95 1f       	adc	r25, r21
    56ea:	c8 17       	cp	r28, r24
    56ec:	d9 07       	cpc	r29, r25
    56ee:	59 f4       	brne	.+22     	; 0x5706 <free+0x82>
    56f0:	88 81       	ld	r24, Y
    56f2:	99 81       	ldd	r25, Y+1	; 0x01
    56f4:	84 0f       	add	r24, r20
    56f6:	95 1f       	adc	r25, r21
    56f8:	02 96       	adiw	r24, 0x02	; 2
    56fa:	91 83       	std	Z+1, r25	; 0x01
    56fc:	80 83       	st	Z, r24
    56fe:	8a 81       	ldd	r24, Y+2	; 0x02
    5700:	9b 81       	ldd	r25, Y+3	; 0x03
    5702:	93 83       	std	Z+3, r25	; 0x03
    5704:	82 83       	std	Z+2, r24	; 0x02
    5706:	21 15       	cp	r18, r1
    5708:	31 05       	cpc	r19, r1
    570a:	29 f4       	brne	.+10     	; 0x5716 <free+0x92>
    570c:	f0 93 0c 1b 	sts	0x1B0C, r31	; 0x801b0c <__flp+0x1>
    5710:	e0 93 0b 1b 	sts	0x1B0B, r30	; 0x801b0b <__flp>
    5714:	3d c0       	rjmp	.+122    	; 0x5790 <free+0x10c>
    5716:	e9 01       	movw	r28, r18
    5718:	fb 83       	std	Y+3, r31	; 0x03
    571a:	ea 83       	std	Y+2, r30	; 0x02
    571c:	49 91       	ld	r20, Y+
    571e:	59 91       	ld	r21, Y+
    5720:	c4 0f       	add	r28, r20
    5722:	d5 1f       	adc	r29, r21
    5724:	ec 17       	cp	r30, r28
    5726:	fd 07       	cpc	r31, r29
    5728:	61 f4       	brne	.+24     	; 0x5742 <free+0xbe>
    572a:	80 81       	ld	r24, Z
    572c:	91 81       	ldd	r25, Z+1	; 0x01
    572e:	84 0f       	add	r24, r20
    5730:	95 1f       	adc	r25, r21
    5732:	02 96       	adiw	r24, 0x02	; 2
    5734:	e9 01       	movw	r28, r18
    5736:	99 83       	std	Y+1, r25	; 0x01
    5738:	88 83       	st	Y, r24
    573a:	82 81       	ldd	r24, Z+2	; 0x02
    573c:	93 81       	ldd	r25, Z+3	; 0x03
    573e:	9b 83       	std	Y+3, r25	; 0x03
    5740:	8a 83       	std	Y+2, r24	; 0x02
    5742:	e0 e0       	ldi	r30, 0x00	; 0
    5744:	f0 e0       	ldi	r31, 0x00	; 0
    5746:	12 96       	adiw	r26, 0x02	; 2
    5748:	8d 91       	ld	r24, X+
    574a:	9c 91       	ld	r25, X
    574c:	13 97       	sbiw	r26, 0x03	; 3
    574e:	00 97       	sbiw	r24, 0x00	; 0
    5750:	19 f0       	breq	.+6      	; 0x5758 <free+0xd4>
    5752:	fd 01       	movw	r30, r26
    5754:	dc 01       	movw	r26, r24
    5756:	f7 cf       	rjmp	.-18     	; 0x5746 <free+0xc2>
    5758:	8d 91       	ld	r24, X+
    575a:	9c 91       	ld	r25, X
    575c:	11 97       	sbiw	r26, 0x01	; 1
    575e:	9d 01       	movw	r18, r26
    5760:	2e 5f       	subi	r18, 0xFE	; 254
    5762:	3f 4f       	sbci	r19, 0xFF	; 255
    5764:	82 0f       	add	r24, r18
    5766:	93 1f       	adc	r25, r19
    5768:	20 91 09 1b 	lds	r18, 0x1B09	; 0x801b09 <__brkval>
    576c:	30 91 0a 1b 	lds	r19, 0x1B0A	; 0x801b0a <__brkval+0x1>
    5770:	28 17       	cp	r18, r24
    5772:	39 07       	cpc	r19, r25
    5774:	69 f4       	brne	.+26     	; 0x5790 <free+0x10c>
    5776:	30 97       	sbiw	r30, 0x00	; 0
    5778:	29 f4       	brne	.+10     	; 0x5784 <free+0x100>
    577a:	10 92 0c 1b 	sts	0x1B0C, r1	; 0x801b0c <__flp+0x1>
    577e:	10 92 0b 1b 	sts	0x1B0B, r1	; 0x801b0b <__flp>
    5782:	02 c0       	rjmp	.+4      	; 0x5788 <free+0x104>
    5784:	13 82       	std	Z+3, r1	; 0x03
    5786:	12 82       	std	Z+2, r1	; 0x02
    5788:	b0 93 0a 1b 	sts	0x1B0A, r27	; 0x801b0a <__brkval+0x1>
    578c:	a0 93 09 1b 	sts	0x1B09, r26	; 0x801b09 <__brkval>
    5790:	df 91       	pop	r29
    5792:	cf 91       	pop	r28
    5794:	08 95       	ret

00005796 <abort>:
    5796:	81 e0       	ldi	r24, 0x01	; 1
    5798:	90 e0       	ldi	r25, 0x00	; 0
    579a:	f8 94       	cli
    579c:	7d c3       	rjmp	.+1786   	; 0x5e98 <_exit>

0000579e <memcpy>:
    579e:	fb 01       	movw	r30, r22
    57a0:	dc 01       	movw	r26, r24
    57a2:	02 c0       	rjmp	.+4      	; 0x57a8 <memcpy+0xa>
    57a4:	01 90       	ld	r0, Z+
    57a6:	0d 92       	st	X+, r0
    57a8:	41 50       	subi	r20, 0x01	; 1
    57aa:	50 40       	sbci	r21, 0x00	; 0
    57ac:	d8 f7       	brcc	.-10     	; 0x57a4 <memcpy+0x6>
    57ae:	08 95       	ret

000057b0 <memset>:
    57b0:	dc 01       	movw	r26, r24
    57b2:	01 c0       	rjmp	.+2      	; 0x57b6 <memset+0x6>
    57b4:	6d 93       	st	X+, r22
    57b6:	41 50       	subi	r20, 0x01	; 1
    57b8:	50 40       	sbci	r21, 0x00	; 0
    57ba:	e0 f7       	brcc	.-8      	; 0x57b4 <memset+0x4>
    57bc:	08 95       	ret

000057be <strcasestr>:
    57be:	fb 01       	movw	r30, r22
    57c0:	51 91       	ld	r21, Z+
    57c2:	55 23       	and	r21, r21
    57c4:	b1 f0       	breq	.+44     	; 0x57f2 <strcasestr+0x34>
    57c6:	bf 01       	movw	r22, r30
    57c8:	dc 01       	movw	r26, r24
    57ca:	05 2e       	mov	r0, r21
    57cc:	4d 91       	ld	r20, X+
    57ce:	44 23       	and	r20, r20
    57d0:	69 f0       	breq	.+26     	; 0x57ec <strcasestr+0x2e>
    57d2:	10 d0       	rcall	.+32     	; 0x57f4 <strcasestr+0x36>
    57d4:	d9 f7       	brne	.-10     	; 0x57cc <strcasestr+0xe>
    57d6:	cd 01       	movw	r24, r26
    57d8:	01 90       	ld	r0, Z+
    57da:	00 20       	and	r0, r0
    57dc:	49 f0       	breq	.+18     	; 0x57f0 <strcasestr+0x32>
    57de:	4d 91       	ld	r20, X+
    57e0:	41 11       	cpse	r20, r1
    57e2:	08 d0       	rcall	.+16     	; 0x57f4 <strcasestr+0x36>
    57e4:	c9 f3       	breq	.-14     	; 0x57d8 <strcasestr+0x1a>
    57e6:	fb 01       	movw	r30, r22
    57e8:	41 11       	cpse	r20, r1
    57ea:	ee cf       	rjmp	.-36     	; 0x57c8 <strcasestr+0xa>
    57ec:	81 e0       	ldi	r24, 0x01	; 1
    57ee:	90 e0       	ldi	r25, 0x00	; 0
    57f0:	01 97       	sbiw	r24, 0x01	; 1
    57f2:	08 95       	ret
    57f4:	40 25       	eor	r20, r0
    57f6:	39 f0       	breq	.+14     	; 0x5806 <strcasestr+0x48>
    57f8:	40 32       	cpi	r20, 0x20	; 32
    57fa:	29 f4       	brne	.+10     	; 0x5806 <strcasestr+0x48>
    57fc:	40 29       	or	r20, r0
    57fe:	4b 57       	subi	r20, 0x7B	; 123
    5800:	46 5e       	subi	r20, 0xE6	; 230
    5802:	08 f0       	brcs	.+2      	; 0x5806 <strcasestr+0x48>
    5804:	18 94       	sez
    5806:	08 95       	ret

00005808 <strcat>:
    5808:	fb 01       	movw	r30, r22
    580a:	dc 01       	movw	r26, r24
    580c:	0d 90       	ld	r0, X+
    580e:	00 20       	and	r0, r0
    5810:	e9 f7       	brne	.-6      	; 0x580c <strcat+0x4>
    5812:	11 97       	sbiw	r26, 0x01	; 1
    5814:	01 90       	ld	r0, Z+
    5816:	0d 92       	st	X+, r0
    5818:	00 20       	and	r0, r0
    581a:	e1 f7       	brne	.-8      	; 0x5814 <strcat+0xc>
    581c:	08 95       	ret

0000581e <strcpy>:
    581e:	fb 01       	movw	r30, r22
    5820:	dc 01       	movw	r26, r24
    5822:	01 90       	ld	r0, Z+
    5824:	0d 92       	st	X+, r0
    5826:	00 20       	and	r0, r0
    5828:	e1 f7       	brne	.-8      	; 0x5822 <strcpy+0x4>
    582a:	08 95       	ret

0000582c <strncasecmp>:
    582c:	fb 01       	movw	r30, r22
    582e:	dc 01       	movw	r26, r24
    5830:	41 50       	subi	r20, 0x01	; 1
    5832:	50 40       	sbci	r21, 0x00	; 0
    5834:	88 f0       	brcs	.+34     	; 0x5858 <strncasecmp+0x2c>
    5836:	8d 91       	ld	r24, X+
    5838:	81 34       	cpi	r24, 0x41	; 65
    583a:	1c f0       	brlt	.+6      	; 0x5842 <strncasecmp+0x16>
    583c:	8b 35       	cpi	r24, 0x5B	; 91
    583e:	0c f4       	brge	.+2      	; 0x5842 <strncasecmp+0x16>
    5840:	80 5e       	subi	r24, 0xE0	; 224
    5842:	61 91       	ld	r22, Z+
    5844:	61 34       	cpi	r22, 0x41	; 65
    5846:	1c f0       	brlt	.+6      	; 0x584e <strncasecmp+0x22>
    5848:	6b 35       	cpi	r22, 0x5B	; 91
    584a:	0c f4       	brge	.+2      	; 0x584e <strncasecmp+0x22>
    584c:	60 5e       	subi	r22, 0xE0	; 224
    584e:	86 1b       	sub	r24, r22
    5850:	61 11       	cpse	r22, r1
    5852:	71 f3       	breq	.-36     	; 0x5830 <strncasecmp+0x4>
    5854:	99 0b       	sbc	r25, r25
    5856:	08 95       	ret
    5858:	88 1b       	sub	r24, r24
    585a:	fc cf       	rjmp	.-8      	; 0x5854 <strncasecmp+0x28>

0000585c <printf>:
    585c:	cf 93       	push	r28
    585e:	df 93       	push	r29
    5860:	cd b7       	in	r28, 0x3d	; 61
    5862:	de b7       	in	r29, 0x3e	; 62
    5864:	ae 01       	movw	r20, r28
    5866:	4a 5f       	subi	r20, 0xFA	; 250
    5868:	5f 4f       	sbci	r21, 0xFF	; 255
    586a:	fa 01       	movw	r30, r20
    586c:	61 91       	ld	r22, Z+
    586e:	71 91       	ld	r23, Z+
    5870:	af 01       	movw	r20, r30
    5872:	80 91 0f 1b 	lds	r24, 0x1B0F	; 0x801b0f <__iob+0x2>
    5876:	90 91 10 1b 	lds	r25, 0x1B10	; 0x801b10 <__iob+0x3>
    587a:	61 d0       	rcall	.+194    	; 0x593e <vfprintf>
    587c:	df 91       	pop	r29
    587e:	cf 91       	pop	r28
    5880:	08 95       	ret

00005882 <puts>:
    5882:	0f 93       	push	r16
    5884:	1f 93       	push	r17
    5886:	cf 93       	push	r28
    5888:	df 93       	push	r29
    588a:	e0 91 0f 1b 	lds	r30, 0x1B0F	; 0x801b0f <__iob+0x2>
    588e:	f0 91 10 1b 	lds	r31, 0x1B10	; 0x801b10 <__iob+0x3>
    5892:	23 81       	ldd	r18, Z+3	; 0x03
    5894:	21 ff       	sbrs	r18, 1
    5896:	1b c0       	rjmp	.+54     	; 0x58ce <puts+0x4c>
    5898:	8c 01       	movw	r16, r24
    589a:	d0 e0       	ldi	r29, 0x00	; 0
    589c:	c0 e0       	ldi	r28, 0x00	; 0
    589e:	f8 01       	movw	r30, r16
    58a0:	81 91       	ld	r24, Z+
    58a2:	8f 01       	movw	r16, r30
    58a4:	60 91 0f 1b 	lds	r22, 0x1B0F	; 0x801b0f <__iob+0x2>
    58a8:	70 91 10 1b 	lds	r23, 0x1B10	; 0x801b10 <__iob+0x3>
    58ac:	db 01       	movw	r26, r22
    58ae:	18 96       	adiw	r26, 0x08	; 8
    58b0:	ed 91       	ld	r30, X+
    58b2:	fc 91       	ld	r31, X
    58b4:	19 97       	sbiw	r26, 0x09	; 9
    58b6:	88 23       	and	r24, r24
    58b8:	31 f0       	breq	.+12     	; 0x58c6 <puts+0x44>
    58ba:	19 95       	eicall
    58bc:	89 2b       	or	r24, r25
    58be:	79 f3       	breq	.-34     	; 0x589e <puts+0x1c>
    58c0:	df ef       	ldi	r29, 0xFF	; 255
    58c2:	cf ef       	ldi	r28, 0xFF	; 255
    58c4:	ec cf       	rjmp	.-40     	; 0x589e <puts+0x1c>
    58c6:	8a e0       	ldi	r24, 0x0A	; 10
    58c8:	19 95       	eicall
    58ca:	89 2b       	or	r24, r25
    58cc:	19 f0       	breq	.+6      	; 0x58d4 <puts+0x52>
    58ce:	8f ef       	ldi	r24, 0xFF	; 255
    58d0:	9f ef       	ldi	r25, 0xFF	; 255
    58d2:	02 c0       	rjmp	.+4      	; 0x58d8 <puts+0x56>
    58d4:	8d 2f       	mov	r24, r29
    58d6:	9c 2f       	mov	r25, r28
    58d8:	df 91       	pop	r29
    58da:	cf 91       	pop	r28
    58dc:	1f 91       	pop	r17
    58de:	0f 91       	pop	r16
    58e0:	08 95       	ret

000058e2 <sprintf>:
    58e2:	0f 93       	push	r16
    58e4:	1f 93       	push	r17
    58e6:	cf 93       	push	r28
    58e8:	df 93       	push	r29
    58ea:	cd b7       	in	r28, 0x3d	; 61
    58ec:	de b7       	in	r29, 0x3e	; 62
    58ee:	2e 97       	sbiw	r28, 0x0e	; 14
    58f0:	0f b6       	in	r0, 0x3f	; 63
    58f2:	f8 94       	cli
    58f4:	de bf       	out	0x3e, r29	; 62
    58f6:	0f be       	out	0x3f, r0	; 63
    58f8:	cd bf       	out	0x3d, r28	; 61
    58fa:	0e 89       	ldd	r16, Y+22	; 0x16
    58fc:	1f 89       	ldd	r17, Y+23	; 0x17
    58fe:	86 e0       	ldi	r24, 0x06	; 6
    5900:	8c 83       	std	Y+4, r24	; 0x04
    5902:	1a 83       	std	Y+2, r17	; 0x02
    5904:	09 83       	std	Y+1, r16	; 0x01
    5906:	8f ef       	ldi	r24, 0xFF	; 255
    5908:	9f e7       	ldi	r25, 0x7F	; 127
    590a:	9e 83       	std	Y+6, r25	; 0x06
    590c:	8d 83       	std	Y+5, r24	; 0x05
    590e:	ae 01       	movw	r20, r28
    5910:	46 5e       	subi	r20, 0xE6	; 230
    5912:	5f 4f       	sbci	r21, 0xFF	; 255
    5914:	68 8d       	ldd	r22, Y+24	; 0x18
    5916:	79 8d       	ldd	r23, Y+25	; 0x19
    5918:	ce 01       	movw	r24, r28
    591a:	01 96       	adiw	r24, 0x01	; 1
    591c:	10 d0       	rcall	.+32     	; 0x593e <vfprintf>
    591e:	ef 81       	ldd	r30, Y+7	; 0x07
    5920:	f8 85       	ldd	r31, Y+8	; 0x08
    5922:	e0 0f       	add	r30, r16
    5924:	f1 1f       	adc	r31, r17
    5926:	10 82       	st	Z, r1
    5928:	2e 96       	adiw	r28, 0x0e	; 14
    592a:	0f b6       	in	r0, 0x3f	; 63
    592c:	f8 94       	cli
    592e:	de bf       	out	0x3e, r29	; 62
    5930:	0f be       	out	0x3f, r0	; 63
    5932:	cd bf       	out	0x3d, r28	; 61
    5934:	df 91       	pop	r29
    5936:	cf 91       	pop	r28
    5938:	1f 91       	pop	r17
    593a:	0f 91       	pop	r16
    593c:	08 95       	ret

0000593e <vfprintf>:
    593e:	2f 92       	push	r2
    5940:	3f 92       	push	r3
    5942:	4f 92       	push	r4
    5944:	5f 92       	push	r5
    5946:	6f 92       	push	r6
    5948:	7f 92       	push	r7
    594a:	8f 92       	push	r8
    594c:	9f 92       	push	r9
    594e:	af 92       	push	r10
    5950:	bf 92       	push	r11
    5952:	cf 92       	push	r12
    5954:	df 92       	push	r13
    5956:	ef 92       	push	r14
    5958:	ff 92       	push	r15
    595a:	0f 93       	push	r16
    595c:	1f 93       	push	r17
    595e:	cf 93       	push	r28
    5960:	df 93       	push	r29
    5962:	cd b7       	in	r28, 0x3d	; 61
    5964:	de b7       	in	r29, 0x3e	; 62
    5966:	2b 97       	sbiw	r28, 0x0b	; 11
    5968:	0f b6       	in	r0, 0x3f	; 63
    596a:	f8 94       	cli
    596c:	de bf       	out	0x3e, r29	; 62
    596e:	0f be       	out	0x3f, r0	; 63
    5970:	cd bf       	out	0x3d, r28	; 61
    5972:	6c 01       	movw	r12, r24
    5974:	7b 01       	movw	r14, r22
    5976:	8a 01       	movw	r16, r20
    5978:	fc 01       	movw	r30, r24
    597a:	17 82       	std	Z+7, r1	; 0x07
    597c:	16 82       	std	Z+6, r1	; 0x06
    597e:	83 81       	ldd	r24, Z+3	; 0x03
    5980:	81 ff       	sbrs	r24, 1
    5982:	bf c1       	rjmp	.+894    	; 0x5d02 <vfprintf+0x3c4>
    5984:	ce 01       	movw	r24, r28
    5986:	01 96       	adiw	r24, 0x01	; 1
    5988:	3c 01       	movw	r6, r24
    598a:	f6 01       	movw	r30, r12
    598c:	93 81       	ldd	r25, Z+3	; 0x03
    598e:	f7 01       	movw	r30, r14
    5990:	93 fd       	sbrc	r25, 3
    5992:	85 91       	lpm	r24, Z+
    5994:	93 ff       	sbrs	r25, 3
    5996:	81 91       	ld	r24, Z+
    5998:	7f 01       	movw	r14, r30
    599a:	88 23       	and	r24, r24
    599c:	09 f4       	brne	.+2      	; 0x59a0 <vfprintf+0x62>
    599e:	ad c1       	rjmp	.+858    	; 0x5cfa <vfprintf+0x3bc>
    59a0:	85 32       	cpi	r24, 0x25	; 37
    59a2:	39 f4       	brne	.+14     	; 0x59b2 <vfprintf+0x74>
    59a4:	93 fd       	sbrc	r25, 3
    59a6:	85 91       	lpm	r24, Z+
    59a8:	93 ff       	sbrs	r25, 3
    59aa:	81 91       	ld	r24, Z+
    59ac:	7f 01       	movw	r14, r30
    59ae:	85 32       	cpi	r24, 0x25	; 37
    59b0:	21 f4       	brne	.+8      	; 0x59ba <vfprintf+0x7c>
    59b2:	b6 01       	movw	r22, r12
    59b4:	90 e0       	ldi	r25, 0x00	; 0
    59b6:	d6 d1       	rcall	.+940    	; 0x5d64 <fputc>
    59b8:	e8 cf       	rjmp	.-48     	; 0x598a <vfprintf+0x4c>
    59ba:	91 2c       	mov	r9, r1
    59bc:	21 2c       	mov	r2, r1
    59be:	31 2c       	mov	r3, r1
    59c0:	ff e1       	ldi	r31, 0x1F	; 31
    59c2:	f3 15       	cp	r31, r3
    59c4:	d8 f0       	brcs	.+54     	; 0x59fc <vfprintf+0xbe>
    59c6:	8b 32       	cpi	r24, 0x2B	; 43
    59c8:	79 f0       	breq	.+30     	; 0x59e8 <vfprintf+0xaa>
    59ca:	38 f4       	brcc	.+14     	; 0x59da <vfprintf+0x9c>
    59cc:	80 32       	cpi	r24, 0x20	; 32
    59ce:	79 f0       	breq	.+30     	; 0x59ee <vfprintf+0xb0>
    59d0:	83 32       	cpi	r24, 0x23	; 35
    59d2:	a1 f4       	brne	.+40     	; 0x59fc <vfprintf+0xbe>
    59d4:	23 2d       	mov	r18, r3
    59d6:	20 61       	ori	r18, 0x10	; 16
    59d8:	1d c0       	rjmp	.+58     	; 0x5a14 <vfprintf+0xd6>
    59da:	8d 32       	cpi	r24, 0x2D	; 45
    59dc:	61 f0       	breq	.+24     	; 0x59f6 <vfprintf+0xb8>
    59de:	80 33       	cpi	r24, 0x30	; 48
    59e0:	69 f4       	brne	.+26     	; 0x59fc <vfprintf+0xbe>
    59e2:	23 2d       	mov	r18, r3
    59e4:	21 60       	ori	r18, 0x01	; 1
    59e6:	16 c0       	rjmp	.+44     	; 0x5a14 <vfprintf+0xd6>
    59e8:	83 2d       	mov	r24, r3
    59ea:	82 60       	ori	r24, 0x02	; 2
    59ec:	38 2e       	mov	r3, r24
    59ee:	e3 2d       	mov	r30, r3
    59f0:	e4 60       	ori	r30, 0x04	; 4
    59f2:	3e 2e       	mov	r3, r30
    59f4:	2a c0       	rjmp	.+84     	; 0x5a4a <vfprintf+0x10c>
    59f6:	f3 2d       	mov	r31, r3
    59f8:	f8 60       	ori	r31, 0x08	; 8
    59fa:	1d c0       	rjmp	.+58     	; 0x5a36 <vfprintf+0xf8>
    59fc:	37 fc       	sbrc	r3, 7
    59fe:	2d c0       	rjmp	.+90     	; 0x5a5a <vfprintf+0x11c>
    5a00:	20 ed       	ldi	r18, 0xD0	; 208
    5a02:	28 0f       	add	r18, r24
    5a04:	2a 30       	cpi	r18, 0x0A	; 10
    5a06:	40 f0       	brcs	.+16     	; 0x5a18 <vfprintf+0xda>
    5a08:	8e 32       	cpi	r24, 0x2E	; 46
    5a0a:	b9 f4       	brne	.+46     	; 0x5a3a <vfprintf+0xfc>
    5a0c:	36 fc       	sbrc	r3, 6
    5a0e:	75 c1       	rjmp	.+746    	; 0x5cfa <vfprintf+0x3bc>
    5a10:	23 2d       	mov	r18, r3
    5a12:	20 64       	ori	r18, 0x40	; 64
    5a14:	32 2e       	mov	r3, r18
    5a16:	19 c0       	rjmp	.+50     	; 0x5a4a <vfprintf+0x10c>
    5a18:	36 fe       	sbrs	r3, 6
    5a1a:	06 c0       	rjmp	.+12     	; 0x5a28 <vfprintf+0xea>
    5a1c:	8a e0       	ldi	r24, 0x0A	; 10
    5a1e:	98 9e       	mul	r9, r24
    5a20:	20 0d       	add	r18, r0
    5a22:	11 24       	eor	r1, r1
    5a24:	92 2e       	mov	r9, r18
    5a26:	11 c0       	rjmp	.+34     	; 0x5a4a <vfprintf+0x10c>
    5a28:	ea e0       	ldi	r30, 0x0A	; 10
    5a2a:	2e 9e       	mul	r2, r30
    5a2c:	20 0d       	add	r18, r0
    5a2e:	11 24       	eor	r1, r1
    5a30:	22 2e       	mov	r2, r18
    5a32:	f3 2d       	mov	r31, r3
    5a34:	f0 62       	ori	r31, 0x20	; 32
    5a36:	3f 2e       	mov	r3, r31
    5a38:	08 c0       	rjmp	.+16     	; 0x5a4a <vfprintf+0x10c>
    5a3a:	8c 36       	cpi	r24, 0x6C	; 108
    5a3c:	21 f4       	brne	.+8      	; 0x5a46 <vfprintf+0x108>
    5a3e:	83 2d       	mov	r24, r3
    5a40:	80 68       	ori	r24, 0x80	; 128
    5a42:	38 2e       	mov	r3, r24
    5a44:	02 c0       	rjmp	.+4      	; 0x5a4a <vfprintf+0x10c>
    5a46:	88 36       	cpi	r24, 0x68	; 104
    5a48:	41 f4       	brne	.+16     	; 0x5a5a <vfprintf+0x11c>
    5a4a:	f7 01       	movw	r30, r14
    5a4c:	93 fd       	sbrc	r25, 3
    5a4e:	85 91       	lpm	r24, Z+
    5a50:	93 ff       	sbrs	r25, 3
    5a52:	81 91       	ld	r24, Z+
    5a54:	7f 01       	movw	r14, r30
    5a56:	81 11       	cpse	r24, r1
    5a58:	b3 cf       	rjmp	.-154    	; 0x59c0 <vfprintf+0x82>
    5a5a:	98 2f       	mov	r25, r24
    5a5c:	9f 7d       	andi	r25, 0xDF	; 223
    5a5e:	95 54       	subi	r25, 0x45	; 69
    5a60:	93 30       	cpi	r25, 0x03	; 3
    5a62:	28 f4       	brcc	.+10     	; 0x5a6e <vfprintf+0x130>
    5a64:	0c 5f       	subi	r16, 0xFC	; 252
    5a66:	1f 4f       	sbci	r17, 0xFF	; 255
    5a68:	9f e3       	ldi	r25, 0x3F	; 63
    5a6a:	99 83       	std	Y+1, r25	; 0x01
    5a6c:	0d c0       	rjmp	.+26     	; 0x5a88 <vfprintf+0x14a>
    5a6e:	83 36       	cpi	r24, 0x63	; 99
    5a70:	31 f0       	breq	.+12     	; 0x5a7e <vfprintf+0x140>
    5a72:	83 37       	cpi	r24, 0x73	; 115
    5a74:	71 f0       	breq	.+28     	; 0x5a92 <vfprintf+0x154>
    5a76:	83 35       	cpi	r24, 0x53	; 83
    5a78:	09 f0       	breq	.+2      	; 0x5a7c <vfprintf+0x13e>
    5a7a:	55 c0       	rjmp	.+170    	; 0x5b26 <vfprintf+0x1e8>
    5a7c:	20 c0       	rjmp	.+64     	; 0x5abe <vfprintf+0x180>
    5a7e:	f8 01       	movw	r30, r16
    5a80:	80 81       	ld	r24, Z
    5a82:	89 83       	std	Y+1, r24	; 0x01
    5a84:	0e 5f       	subi	r16, 0xFE	; 254
    5a86:	1f 4f       	sbci	r17, 0xFF	; 255
    5a88:	88 24       	eor	r8, r8
    5a8a:	83 94       	inc	r8
    5a8c:	91 2c       	mov	r9, r1
    5a8e:	53 01       	movw	r10, r6
    5a90:	12 c0       	rjmp	.+36     	; 0x5ab6 <vfprintf+0x178>
    5a92:	28 01       	movw	r4, r16
    5a94:	f2 e0       	ldi	r31, 0x02	; 2
    5a96:	4f 0e       	add	r4, r31
    5a98:	51 1c       	adc	r5, r1
    5a9a:	f8 01       	movw	r30, r16
    5a9c:	a0 80       	ld	r10, Z
    5a9e:	b1 80       	ldd	r11, Z+1	; 0x01
    5aa0:	36 fe       	sbrs	r3, 6
    5aa2:	03 c0       	rjmp	.+6      	; 0x5aaa <vfprintf+0x16c>
    5aa4:	69 2d       	mov	r22, r9
    5aa6:	70 e0       	ldi	r23, 0x00	; 0
    5aa8:	02 c0       	rjmp	.+4      	; 0x5aae <vfprintf+0x170>
    5aaa:	6f ef       	ldi	r22, 0xFF	; 255
    5aac:	7f ef       	ldi	r23, 0xFF	; 255
    5aae:	c5 01       	movw	r24, r10
    5ab0:	4e d1       	rcall	.+668    	; 0x5d4e <strnlen>
    5ab2:	4c 01       	movw	r8, r24
    5ab4:	82 01       	movw	r16, r4
    5ab6:	f3 2d       	mov	r31, r3
    5ab8:	ff 77       	andi	r31, 0x7F	; 127
    5aba:	3f 2e       	mov	r3, r31
    5abc:	15 c0       	rjmp	.+42     	; 0x5ae8 <vfprintf+0x1aa>
    5abe:	28 01       	movw	r4, r16
    5ac0:	22 e0       	ldi	r18, 0x02	; 2
    5ac2:	42 0e       	add	r4, r18
    5ac4:	51 1c       	adc	r5, r1
    5ac6:	f8 01       	movw	r30, r16
    5ac8:	a0 80       	ld	r10, Z
    5aca:	b1 80       	ldd	r11, Z+1	; 0x01
    5acc:	36 fe       	sbrs	r3, 6
    5ace:	03 c0       	rjmp	.+6      	; 0x5ad6 <vfprintf+0x198>
    5ad0:	69 2d       	mov	r22, r9
    5ad2:	70 e0       	ldi	r23, 0x00	; 0
    5ad4:	02 c0       	rjmp	.+4      	; 0x5ada <vfprintf+0x19c>
    5ad6:	6f ef       	ldi	r22, 0xFF	; 255
    5ad8:	7f ef       	ldi	r23, 0xFF	; 255
    5ada:	c5 01       	movw	r24, r10
    5adc:	2d d1       	rcall	.+602    	; 0x5d38 <strnlen_P>
    5ade:	4c 01       	movw	r8, r24
    5ae0:	f3 2d       	mov	r31, r3
    5ae2:	f0 68       	ori	r31, 0x80	; 128
    5ae4:	3f 2e       	mov	r3, r31
    5ae6:	82 01       	movw	r16, r4
    5ae8:	33 fc       	sbrc	r3, 3
    5aea:	19 c0       	rjmp	.+50     	; 0x5b1e <vfprintf+0x1e0>
    5aec:	82 2d       	mov	r24, r2
    5aee:	90 e0       	ldi	r25, 0x00	; 0
    5af0:	88 16       	cp	r8, r24
    5af2:	99 06       	cpc	r9, r25
    5af4:	a0 f4       	brcc	.+40     	; 0x5b1e <vfprintf+0x1e0>
    5af6:	b6 01       	movw	r22, r12
    5af8:	80 e2       	ldi	r24, 0x20	; 32
    5afa:	90 e0       	ldi	r25, 0x00	; 0
    5afc:	33 d1       	rcall	.+614    	; 0x5d64 <fputc>
    5afe:	2a 94       	dec	r2
    5b00:	f5 cf       	rjmp	.-22     	; 0x5aec <vfprintf+0x1ae>
    5b02:	f5 01       	movw	r30, r10
    5b04:	37 fc       	sbrc	r3, 7
    5b06:	85 91       	lpm	r24, Z+
    5b08:	37 fe       	sbrs	r3, 7
    5b0a:	81 91       	ld	r24, Z+
    5b0c:	5f 01       	movw	r10, r30
    5b0e:	b6 01       	movw	r22, r12
    5b10:	90 e0       	ldi	r25, 0x00	; 0
    5b12:	28 d1       	rcall	.+592    	; 0x5d64 <fputc>
    5b14:	21 10       	cpse	r2, r1
    5b16:	2a 94       	dec	r2
    5b18:	21 e0       	ldi	r18, 0x01	; 1
    5b1a:	82 1a       	sub	r8, r18
    5b1c:	91 08       	sbc	r9, r1
    5b1e:	81 14       	cp	r8, r1
    5b20:	91 04       	cpc	r9, r1
    5b22:	79 f7       	brne	.-34     	; 0x5b02 <vfprintf+0x1c4>
    5b24:	e1 c0       	rjmp	.+450    	; 0x5ce8 <vfprintf+0x3aa>
    5b26:	84 36       	cpi	r24, 0x64	; 100
    5b28:	11 f0       	breq	.+4      	; 0x5b2e <vfprintf+0x1f0>
    5b2a:	89 36       	cpi	r24, 0x69	; 105
    5b2c:	39 f5       	brne	.+78     	; 0x5b7c <vfprintf+0x23e>
    5b2e:	f8 01       	movw	r30, r16
    5b30:	37 fe       	sbrs	r3, 7
    5b32:	07 c0       	rjmp	.+14     	; 0x5b42 <vfprintf+0x204>
    5b34:	60 81       	ld	r22, Z
    5b36:	71 81       	ldd	r23, Z+1	; 0x01
    5b38:	82 81       	ldd	r24, Z+2	; 0x02
    5b3a:	93 81       	ldd	r25, Z+3	; 0x03
    5b3c:	0c 5f       	subi	r16, 0xFC	; 252
    5b3e:	1f 4f       	sbci	r17, 0xFF	; 255
    5b40:	08 c0       	rjmp	.+16     	; 0x5b52 <vfprintf+0x214>
    5b42:	60 81       	ld	r22, Z
    5b44:	71 81       	ldd	r23, Z+1	; 0x01
    5b46:	07 2e       	mov	r0, r23
    5b48:	00 0c       	add	r0, r0
    5b4a:	88 0b       	sbc	r24, r24
    5b4c:	99 0b       	sbc	r25, r25
    5b4e:	0e 5f       	subi	r16, 0xFE	; 254
    5b50:	1f 4f       	sbci	r17, 0xFF	; 255
    5b52:	f3 2d       	mov	r31, r3
    5b54:	ff 76       	andi	r31, 0x6F	; 111
    5b56:	3f 2e       	mov	r3, r31
    5b58:	97 ff       	sbrs	r25, 7
    5b5a:	09 c0       	rjmp	.+18     	; 0x5b6e <vfprintf+0x230>
    5b5c:	90 95       	com	r25
    5b5e:	80 95       	com	r24
    5b60:	70 95       	com	r23
    5b62:	61 95       	neg	r22
    5b64:	7f 4f       	sbci	r23, 0xFF	; 255
    5b66:	8f 4f       	sbci	r24, 0xFF	; 255
    5b68:	9f 4f       	sbci	r25, 0xFF	; 255
    5b6a:	f0 68       	ori	r31, 0x80	; 128
    5b6c:	3f 2e       	mov	r3, r31
    5b6e:	2a e0       	ldi	r18, 0x0A	; 10
    5b70:	30 e0       	ldi	r19, 0x00	; 0
    5b72:	a3 01       	movw	r20, r6
    5b74:	33 d1       	rcall	.+614    	; 0x5ddc <__ultoa_invert>
    5b76:	88 2e       	mov	r8, r24
    5b78:	86 18       	sub	r8, r6
    5b7a:	44 c0       	rjmp	.+136    	; 0x5c04 <vfprintf+0x2c6>
    5b7c:	85 37       	cpi	r24, 0x75	; 117
    5b7e:	31 f4       	brne	.+12     	; 0x5b8c <vfprintf+0x24e>
    5b80:	23 2d       	mov	r18, r3
    5b82:	2f 7e       	andi	r18, 0xEF	; 239
    5b84:	b2 2e       	mov	r11, r18
    5b86:	2a e0       	ldi	r18, 0x0A	; 10
    5b88:	30 e0       	ldi	r19, 0x00	; 0
    5b8a:	25 c0       	rjmp	.+74     	; 0x5bd6 <vfprintf+0x298>
    5b8c:	93 2d       	mov	r25, r3
    5b8e:	99 7f       	andi	r25, 0xF9	; 249
    5b90:	b9 2e       	mov	r11, r25
    5b92:	8f 36       	cpi	r24, 0x6F	; 111
    5b94:	c1 f0       	breq	.+48     	; 0x5bc6 <vfprintf+0x288>
    5b96:	18 f4       	brcc	.+6      	; 0x5b9e <vfprintf+0x260>
    5b98:	88 35       	cpi	r24, 0x58	; 88
    5b9a:	79 f0       	breq	.+30     	; 0x5bba <vfprintf+0x27c>
    5b9c:	ae c0       	rjmp	.+348    	; 0x5cfa <vfprintf+0x3bc>
    5b9e:	80 37       	cpi	r24, 0x70	; 112
    5ba0:	19 f0       	breq	.+6      	; 0x5ba8 <vfprintf+0x26a>
    5ba2:	88 37       	cpi	r24, 0x78	; 120
    5ba4:	21 f0       	breq	.+8      	; 0x5bae <vfprintf+0x270>
    5ba6:	a9 c0       	rjmp	.+338    	; 0x5cfa <vfprintf+0x3bc>
    5ba8:	e9 2f       	mov	r30, r25
    5baa:	e0 61       	ori	r30, 0x10	; 16
    5bac:	be 2e       	mov	r11, r30
    5bae:	b4 fe       	sbrs	r11, 4
    5bb0:	0d c0       	rjmp	.+26     	; 0x5bcc <vfprintf+0x28e>
    5bb2:	fb 2d       	mov	r31, r11
    5bb4:	f4 60       	ori	r31, 0x04	; 4
    5bb6:	bf 2e       	mov	r11, r31
    5bb8:	09 c0       	rjmp	.+18     	; 0x5bcc <vfprintf+0x28e>
    5bba:	34 fe       	sbrs	r3, 4
    5bbc:	0a c0       	rjmp	.+20     	; 0x5bd2 <vfprintf+0x294>
    5bbe:	29 2f       	mov	r18, r25
    5bc0:	26 60       	ori	r18, 0x06	; 6
    5bc2:	b2 2e       	mov	r11, r18
    5bc4:	06 c0       	rjmp	.+12     	; 0x5bd2 <vfprintf+0x294>
    5bc6:	28 e0       	ldi	r18, 0x08	; 8
    5bc8:	30 e0       	ldi	r19, 0x00	; 0
    5bca:	05 c0       	rjmp	.+10     	; 0x5bd6 <vfprintf+0x298>
    5bcc:	20 e1       	ldi	r18, 0x10	; 16
    5bce:	30 e0       	ldi	r19, 0x00	; 0
    5bd0:	02 c0       	rjmp	.+4      	; 0x5bd6 <vfprintf+0x298>
    5bd2:	20 e1       	ldi	r18, 0x10	; 16
    5bd4:	32 e0       	ldi	r19, 0x02	; 2
    5bd6:	f8 01       	movw	r30, r16
    5bd8:	b7 fe       	sbrs	r11, 7
    5bda:	07 c0       	rjmp	.+14     	; 0x5bea <vfprintf+0x2ac>
    5bdc:	60 81       	ld	r22, Z
    5bde:	71 81       	ldd	r23, Z+1	; 0x01
    5be0:	82 81       	ldd	r24, Z+2	; 0x02
    5be2:	93 81       	ldd	r25, Z+3	; 0x03
    5be4:	0c 5f       	subi	r16, 0xFC	; 252
    5be6:	1f 4f       	sbci	r17, 0xFF	; 255
    5be8:	06 c0       	rjmp	.+12     	; 0x5bf6 <vfprintf+0x2b8>
    5bea:	60 81       	ld	r22, Z
    5bec:	71 81       	ldd	r23, Z+1	; 0x01
    5bee:	80 e0       	ldi	r24, 0x00	; 0
    5bf0:	90 e0       	ldi	r25, 0x00	; 0
    5bf2:	0e 5f       	subi	r16, 0xFE	; 254
    5bf4:	1f 4f       	sbci	r17, 0xFF	; 255
    5bf6:	a3 01       	movw	r20, r6
    5bf8:	f1 d0       	rcall	.+482    	; 0x5ddc <__ultoa_invert>
    5bfa:	88 2e       	mov	r8, r24
    5bfc:	86 18       	sub	r8, r6
    5bfe:	fb 2d       	mov	r31, r11
    5c00:	ff 77       	andi	r31, 0x7F	; 127
    5c02:	3f 2e       	mov	r3, r31
    5c04:	36 fe       	sbrs	r3, 6
    5c06:	0d c0       	rjmp	.+26     	; 0x5c22 <vfprintf+0x2e4>
    5c08:	23 2d       	mov	r18, r3
    5c0a:	2e 7f       	andi	r18, 0xFE	; 254
    5c0c:	a2 2e       	mov	r10, r18
    5c0e:	89 14       	cp	r8, r9
    5c10:	58 f4       	brcc	.+22     	; 0x5c28 <vfprintf+0x2ea>
    5c12:	34 fe       	sbrs	r3, 4
    5c14:	0b c0       	rjmp	.+22     	; 0x5c2c <vfprintf+0x2ee>
    5c16:	32 fc       	sbrc	r3, 2
    5c18:	09 c0       	rjmp	.+18     	; 0x5c2c <vfprintf+0x2ee>
    5c1a:	83 2d       	mov	r24, r3
    5c1c:	8e 7e       	andi	r24, 0xEE	; 238
    5c1e:	a8 2e       	mov	r10, r24
    5c20:	05 c0       	rjmp	.+10     	; 0x5c2c <vfprintf+0x2ee>
    5c22:	b8 2c       	mov	r11, r8
    5c24:	a3 2c       	mov	r10, r3
    5c26:	03 c0       	rjmp	.+6      	; 0x5c2e <vfprintf+0x2f0>
    5c28:	b8 2c       	mov	r11, r8
    5c2a:	01 c0       	rjmp	.+2      	; 0x5c2e <vfprintf+0x2f0>
    5c2c:	b9 2c       	mov	r11, r9
    5c2e:	a4 fe       	sbrs	r10, 4
    5c30:	0f c0       	rjmp	.+30     	; 0x5c50 <vfprintf+0x312>
    5c32:	fe 01       	movw	r30, r28
    5c34:	e8 0d       	add	r30, r8
    5c36:	f1 1d       	adc	r31, r1
    5c38:	80 81       	ld	r24, Z
    5c3a:	80 33       	cpi	r24, 0x30	; 48
    5c3c:	21 f4       	brne	.+8      	; 0x5c46 <vfprintf+0x308>
    5c3e:	9a 2d       	mov	r25, r10
    5c40:	99 7e       	andi	r25, 0xE9	; 233
    5c42:	a9 2e       	mov	r10, r25
    5c44:	09 c0       	rjmp	.+18     	; 0x5c58 <vfprintf+0x31a>
    5c46:	a2 fe       	sbrs	r10, 2
    5c48:	06 c0       	rjmp	.+12     	; 0x5c56 <vfprintf+0x318>
    5c4a:	b3 94       	inc	r11
    5c4c:	b3 94       	inc	r11
    5c4e:	04 c0       	rjmp	.+8      	; 0x5c58 <vfprintf+0x31a>
    5c50:	8a 2d       	mov	r24, r10
    5c52:	86 78       	andi	r24, 0x86	; 134
    5c54:	09 f0       	breq	.+2      	; 0x5c58 <vfprintf+0x31a>
    5c56:	b3 94       	inc	r11
    5c58:	a3 fc       	sbrc	r10, 3
    5c5a:	10 c0       	rjmp	.+32     	; 0x5c7c <vfprintf+0x33e>
    5c5c:	a0 fe       	sbrs	r10, 0
    5c5e:	06 c0       	rjmp	.+12     	; 0x5c6c <vfprintf+0x32e>
    5c60:	b2 14       	cp	r11, r2
    5c62:	80 f4       	brcc	.+32     	; 0x5c84 <vfprintf+0x346>
    5c64:	28 0c       	add	r2, r8
    5c66:	92 2c       	mov	r9, r2
    5c68:	9b 18       	sub	r9, r11
    5c6a:	0d c0       	rjmp	.+26     	; 0x5c86 <vfprintf+0x348>
    5c6c:	b2 14       	cp	r11, r2
    5c6e:	58 f4       	brcc	.+22     	; 0x5c86 <vfprintf+0x348>
    5c70:	b6 01       	movw	r22, r12
    5c72:	80 e2       	ldi	r24, 0x20	; 32
    5c74:	90 e0       	ldi	r25, 0x00	; 0
    5c76:	76 d0       	rcall	.+236    	; 0x5d64 <fputc>
    5c78:	b3 94       	inc	r11
    5c7a:	f8 cf       	rjmp	.-16     	; 0x5c6c <vfprintf+0x32e>
    5c7c:	b2 14       	cp	r11, r2
    5c7e:	18 f4       	brcc	.+6      	; 0x5c86 <vfprintf+0x348>
    5c80:	2b 18       	sub	r2, r11
    5c82:	02 c0       	rjmp	.+4      	; 0x5c88 <vfprintf+0x34a>
    5c84:	98 2c       	mov	r9, r8
    5c86:	21 2c       	mov	r2, r1
    5c88:	a4 fe       	sbrs	r10, 4
    5c8a:	0f c0       	rjmp	.+30     	; 0x5caa <vfprintf+0x36c>
    5c8c:	b6 01       	movw	r22, r12
    5c8e:	80 e3       	ldi	r24, 0x30	; 48
    5c90:	90 e0       	ldi	r25, 0x00	; 0
    5c92:	68 d0       	rcall	.+208    	; 0x5d64 <fputc>
    5c94:	a2 fe       	sbrs	r10, 2
    5c96:	16 c0       	rjmp	.+44     	; 0x5cc4 <vfprintf+0x386>
    5c98:	a1 fc       	sbrc	r10, 1
    5c9a:	03 c0       	rjmp	.+6      	; 0x5ca2 <vfprintf+0x364>
    5c9c:	88 e7       	ldi	r24, 0x78	; 120
    5c9e:	90 e0       	ldi	r25, 0x00	; 0
    5ca0:	02 c0       	rjmp	.+4      	; 0x5ca6 <vfprintf+0x368>
    5ca2:	88 e5       	ldi	r24, 0x58	; 88
    5ca4:	90 e0       	ldi	r25, 0x00	; 0
    5ca6:	b6 01       	movw	r22, r12
    5ca8:	0c c0       	rjmp	.+24     	; 0x5cc2 <vfprintf+0x384>
    5caa:	8a 2d       	mov	r24, r10
    5cac:	86 78       	andi	r24, 0x86	; 134
    5cae:	51 f0       	breq	.+20     	; 0x5cc4 <vfprintf+0x386>
    5cb0:	a1 fe       	sbrs	r10, 1
    5cb2:	02 c0       	rjmp	.+4      	; 0x5cb8 <vfprintf+0x37a>
    5cb4:	8b e2       	ldi	r24, 0x2B	; 43
    5cb6:	01 c0       	rjmp	.+2      	; 0x5cba <vfprintf+0x37c>
    5cb8:	80 e2       	ldi	r24, 0x20	; 32
    5cba:	a7 fc       	sbrc	r10, 7
    5cbc:	8d e2       	ldi	r24, 0x2D	; 45
    5cbe:	b6 01       	movw	r22, r12
    5cc0:	90 e0       	ldi	r25, 0x00	; 0
    5cc2:	50 d0       	rcall	.+160    	; 0x5d64 <fputc>
    5cc4:	89 14       	cp	r8, r9
    5cc6:	30 f4       	brcc	.+12     	; 0x5cd4 <vfprintf+0x396>
    5cc8:	b6 01       	movw	r22, r12
    5cca:	80 e3       	ldi	r24, 0x30	; 48
    5ccc:	90 e0       	ldi	r25, 0x00	; 0
    5cce:	4a d0       	rcall	.+148    	; 0x5d64 <fputc>
    5cd0:	9a 94       	dec	r9
    5cd2:	f8 cf       	rjmp	.-16     	; 0x5cc4 <vfprintf+0x386>
    5cd4:	8a 94       	dec	r8
    5cd6:	f3 01       	movw	r30, r6
    5cd8:	e8 0d       	add	r30, r8
    5cda:	f1 1d       	adc	r31, r1
    5cdc:	80 81       	ld	r24, Z
    5cde:	b6 01       	movw	r22, r12
    5ce0:	90 e0       	ldi	r25, 0x00	; 0
    5ce2:	40 d0       	rcall	.+128    	; 0x5d64 <fputc>
    5ce4:	81 10       	cpse	r8, r1
    5ce6:	f6 cf       	rjmp	.-20     	; 0x5cd4 <vfprintf+0x396>
    5ce8:	22 20       	and	r2, r2
    5cea:	09 f4       	brne	.+2      	; 0x5cee <vfprintf+0x3b0>
    5cec:	4e ce       	rjmp	.-868    	; 0x598a <vfprintf+0x4c>
    5cee:	b6 01       	movw	r22, r12
    5cf0:	80 e2       	ldi	r24, 0x20	; 32
    5cf2:	90 e0       	ldi	r25, 0x00	; 0
    5cf4:	37 d0       	rcall	.+110    	; 0x5d64 <fputc>
    5cf6:	2a 94       	dec	r2
    5cf8:	f7 cf       	rjmp	.-18     	; 0x5ce8 <vfprintf+0x3aa>
    5cfa:	f6 01       	movw	r30, r12
    5cfc:	86 81       	ldd	r24, Z+6	; 0x06
    5cfe:	97 81       	ldd	r25, Z+7	; 0x07
    5d00:	02 c0       	rjmp	.+4      	; 0x5d06 <vfprintf+0x3c8>
    5d02:	8f ef       	ldi	r24, 0xFF	; 255
    5d04:	9f ef       	ldi	r25, 0xFF	; 255
    5d06:	2b 96       	adiw	r28, 0x0b	; 11
    5d08:	0f b6       	in	r0, 0x3f	; 63
    5d0a:	f8 94       	cli
    5d0c:	de bf       	out	0x3e, r29	; 62
    5d0e:	0f be       	out	0x3f, r0	; 63
    5d10:	cd bf       	out	0x3d, r28	; 61
    5d12:	df 91       	pop	r29
    5d14:	cf 91       	pop	r28
    5d16:	1f 91       	pop	r17
    5d18:	0f 91       	pop	r16
    5d1a:	ff 90       	pop	r15
    5d1c:	ef 90       	pop	r14
    5d1e:	df 90       	pop	r13
    5d20:	cf 90       	pop	r12
    5d22:	bf 90       	pop	r11
    5d24:	af 90       	pop	r10
    5d26:	9f 90       	pop	r9
    5d28:	8f 90       	pop	r8
    5d2a:	7f 90       	pop	r7
    5d2c:	6f 90       	pop	r6
    5d2e:	5f 90       	pop	r5
    5d30:	4f 90       	pop	r4
    5d32:	3f 90       	pop	r3
    5d34:	2f 90       	pop	r2
    5d36:	08 95       	ret

00005d38 <strnlen_P>:
    5d38:	fc 01       	movw	r30, r24
    5d3a:	05 90       	lpm	r0, Z+
    5d3c:	61 50       	subi	r22, 0x01	; 1
    5d3e:	70 40       	sbci	r23, 0x00	; 0
    5d40:	01 10       	cpse	r0, r1
    5d42:	d8 f7       	brcc	.-10     	; 0x5d3a <strnlen_P+0x2>
    5d44:	80 95       	com	r24
    5d46:	90 95       	com	r25
    5d48:	8e 0f       	add	r24, r30
    5d4a:	9f 1f       	adc	r25, r31
    5d4c:	08 95       	ret

00005d4e <strnlen>:
    5d4e:	fc 01       	movw	r30, r24
    5d50:	61 50       	subi	r22, 0x01	; 1
    5d52:	70 40       	sbci	r23, 0x00	; 0
    5d54:	01 90       	ld	r0, Z+
    5d56:	01 10       	cpse	r0, r1
    5d58:	d8 f7       	brcc	.-10     	; 0x5d50 <strnlen+0x2>
    5d5a:	80 95       	com	r24
    5d5c:	90 95       	com	r25
    5d5e:	8e 0f       	add	r24, r30
    5d60:	9f 1f       	adc	r25, r31
    5d62:	08 95       	ret

00005d64 <fputc>:
    5d64:	0f 93       	push	r16
    5d66:	1f 93       	push	r17
    5d68:	cf 93       	push	r28
    5d6a:	df 93       	push	r29
    5d6c:	fb 01       	movw	r30, r22
    5d6e:	23 81       	ldd	r18, Z+3	; 0x03
    5d70:	21 fd       	sbrc	r18, 1
    5d72:	03 c0       	rjmp	.+6      	; 0x5d7a <fputc+0x16>
    5d74:	8f ef       	ldi	r24, 0xFF	; 255
    5d76:	9f ef       	ldi	r25, 0xFF	; 255
    5d78:	2c c0       	rjmp	.+88     	; 0x5dd2 <fputc+0x6e>
    5d7a:	22 ff       	sbrs	r18, 2
    5d7c:	16 c0       	rjmp	.+44     	; 0x5daa <fputc+0x46>
    5d7e:	46 81       	ldd	r20, Z+6	; 0x06
    5d80:	57 81       	ldd	r21, Z+7	; 0x07
    5d82:	24 81       	ldd	r18, Z+4	; 0x04
    5d84:	35 81       	ldd	r19, Z+5	; 0x05
    5d86:	42 17       	cp	r20, r18
    5d88:	53 07       	cpc	r21, r19
    5d8a:	44 f4       	brge	.+16     	; 0x5d9c <fputc+0x38>
    5d8c:	a0 81       	ld	r26, Z
    5d8e:	b1 81       	ldd	r27, Z+1	; 0x01
    5d90:	9d 01       	movw	r18, r26
    5d92:	2f 5f       	subi	r18, 0xFF	; 255
    5d94:	3f 4f       	sbci	r19, 0xFF	; 255
    5d96:	31 83       	std	Z+1, r19	; 0x01
    5d98:	20 83       	st	Z, r18
    5d9a:	8c 93       	st	X, r24
    5d9c:	26 81       	ldd	r18, Z+6	; 0x06
    5d9e:	37 81       	ldd	r19, Z+7	; 0x07
    5da0:	2f 5f       	subi	r18, 0xFF	; 255
    5da2:	3f 4f       	sbci	r19, 0xFF	; 255
    5da4:	37 83       	std	Z+7, r19	; 0x07
    5da6:	26 83       	std	Z+6, r18	; 0x06
    5da8:	14 c0       	rjmp	.+40     	; 0x5dd2 <fputc+0x6e>
    5daa:	8b 01       	movw	r16, r22
    5dac:	ec 01       	movw	r28, r24
    5dae:	fb 01       	movw	r30, r22
    5db0:	00 84       	ldd	r0, Z+8	; 0x08
    5db2:	f1 85       	ldd	r31, Z+9	; 0x09
    5db4:	e0 2d       	mov	r30, r0
    5db6:	19 95       	eicall
    5db8:	89 2b       	or	r24, r25
    5dba:	e1 f6       	brne	.-72     	; 0x5d74 <fputc+0x10>
    5dbc:	d8 01       	movw	r26, r16
    5dbe:	16 96       	adiw	r26, 0x06	; 6
    5dc0:	8d 91       	ld	r24, X+
    5dc2:	9c 91       	ld	r25, X
    5dc4:	17 97       	sbiw	r26, 0x07	; 7
    5dc6:	01 96       	adiw	r24, 0x01	; 1
    5dc8:	17 96       	adiw	r26, 0x07	; 7
    5dca:	9c 93       	st	X, r25
    5dcc:	8e 93       	st	-X, r24
    5dce:	16 97       	sbiw	r26, 0x06	; 6
    5dd0:	ce 01       	movw	r24, r28
    5dd2:	df 91       	pop	r29
    5dd4:	cf 91       	pop	r28
    5dd6:	1f 91       	pop	r17
    5dd8:	0f 91       	pop	r16
    5dda:	08 95       	ret

00005ddc <__ultoa_invert>:
    5ddc:	fa 01       	movw	r30, r20
    5dde:	aa 27       	eor	r26, r26
    5de0:	28 30       	cpi	r18, 0x08	; 8
    5de2:	51 f1       	breq	.+84     	; 0x5e38 <__ultoa_invert+0x5c>
    5de4:	20 31       	cpi	r18, 0x10	; 16
    5de6:	81 f1       	breq	.+96     	; 0x5e48 <__ultoa_invert+0x6c>
    5de8:	e8 94       	clt
    5dea:	6f 93       	push	r22
    5dec:	6e 7f       	andi	r22, 0xFE	; 254
    5dee:	6e 5f       	subi	r22, 0xFE	; 254
    5df0:	7f 4f       	sbci	r23, 0xFF	; 255
    5df2:	8f 4f       	sbci	r24, 0xFF	; 255
    5df4:	9f 4f       	sbci	r25, 0xFF	; 255
    5df6:	af 4f       	sbci	r26, 0xFF	; 255
    5df8:	b1 e0       	ldi	r27, 0x01	; 1
    5dfa:	3e d0       	rcall	.+124    	; 0x5e78 <__ultoa_invert+0x9c>
    5dfc:	b4 e0       	ldi	r27, 0x04	; 4
    5dfe:	3c d0       	rcall	.+120    	; 0x5e78 <__ultoa_invert+0x9c>
    5e00:	67 0f       	add	r22, r23
    5e02:	78 1f       	adc	r23, r24
    5e04:	89 1f       	adc	r24, r25
    5e06:	9a 1f       	adc	r25, r26
    5e08:	a1 1d       	adc	r26, r1
    5e0a:	68 0f       	add	r22, r24
    5e0c:	79 1f       	adc	r23, r25
    5e0e:	8a 1f       	adc	r24, r26
    5e10:	91 1d       	adc	r25, r1
    5e12:	a1 1d       	adc	r26, r1
    5e14:	6a 0f       	add	r22, r26
    5e16:	71 1d       	adc	r23, r1
    5e18:	81 1d       	adc	r24, r1
    5e1a:	91 1d       	adc	r25, r1
    5e1c:	a1 1d       	adc	r26, r1
    5e1e:	20 d0       	rcall	.+64     	; 0x5e60 <__ultoa_invert+0x84>
    5e20:	09 f4       	brne	.+2      	; 0x5e24 <__ultoa_invert+0x48>
    5e22:	68 94       	set
    5e24:	3f 91       	pop	r19
    5e26:	2a e0       	ldi	r18, 0x0A	; 10
    5e28:	26 9f       	mul	r18, r22
    5e2a:	11 24       	eor	r1, r1
    5e2c:	30 19       	sub	r19, r0
    5e2e:	30 5d       	subi	r19, 0xD0	; 208
    5e30:	31 93       	st	Z+, r19
    5e32:	de f6       	brtc	.-74     	; 0x5dea <__ultoa_invert+0xe>
    5e34:	cf 01       	movw	r24, r30
    5e36:	08 95       	ret
    5e38:	46 2f       	mov	r20, r22
    5e3a:	47 70       	andi	r20, 0x07	; 7
    5e3c:	40 5d       	subi	r20, 0xD0	; 208
    5e3e:	41 93       	st	Z+, r20
    5e40:	b3 e0       	ldi	r27, 0x03	; 3
    5e42:	0f d0       	rcall	.+30     	; 0x5e62 <__ultoa_invert+0x86>
    5e44:	c9 f7       	brne	.-14     	; 0x5e38 <__ultoa_invert+0x5c>
    5e46:	f6 cf       	rjmp	.-20     	; 0x5e34 <__ultoa_invert+0x58>
    5e48:	46 2f       	mov	r20, r22
    5e4a:	4f 70       	andi	r20, 0x0F	; 15
    5e4c:	40 5d       	subi	r20, 0xD0	; 208
    5e4e:	4a 33       	cpi	r20, 0x3A	; 58
    5e50:	18 f0       	brcs	.+6      	; 0x5e58 <__ultoa_invert+0x7c>
    5e52:	49 5d       	subi	r20, 0xD9	; 217
    5e54:	31 fd       	sbrc	r19, 1
    5e56:	40 52       	subi	r20, 0x20	; 32
    5e58:	41 93       	st	Z+, r20
    5e5a:	02 d0       	rcall	.+4      	; 0x5e60 <__ultoa_invert+0x84>
    5e5c:	a9 f7       	brne	.-22     	; 0x5e48 <__ultoa_invert+0x6c>
    5e5e:	ea cf       	rjmp	.-44     	; 0x5e34 <__ultoa_invert+0x58>
    5e60:	b4 e0       	ldi	r27, 0x04	; 4
    5e62:	a6 95       	lsr	r26
    5e64:	97 95       	ror	r25
    5e66:	87 95       	ror	r24
    5e68:	77 95       	ror	r23
    5e6a:	67 95       	ror	r22
    5e6c:	ba 95       	dec	r27
    5e6e:	c9 f7       	brne	.-14     	; 0x5e62 <__ultoa_invert+0x86>
    5e70:	00 97       	sbiw	r24, 0x00	; 0
    5e72:	61 05       	cpc	r22, r1
    5e74:	71 05       	cpc	r23, r1
    5e76:	08 95       	ret
    5e78:	9b 01       	movw	r18, r22
    5e7a:	ac 01       	movw	r20, r24
    5e7c:	0a 2e       	mov	r0, r26
    5e7e:	06 94       	lsr	r0
    5e80:	57 95       	ror	r21
    5e82:	47 95       	ror	r20
    5e84:	37 95       	ror	r19
    5e86:	27 95       	ror	r18
    5e88:	ba 95       	dec	r27
    5e8a:	c9 f7       	brne	.-14     	; 0x5e7e <__ultoa_invert+0xa2>
    5e8c:	62 0f       	add	r22, r18
    5e8e:	73 1f       	adc	r23, r19
    5e90:	84 1f       	adc	r24, r20
    5e92:	95 1f       	adc	r25, r21
    5e94:	a0 1d       	adc	r26, r0
    5e96:	08 95       	ret

00005e98 <_exit>:
    5e98:	f8 94       	cli

00005e9a <__stop_program>:
    5e9a:	ff cf       	rjmp	.-2      	; 0x5e9a <__stop_program>
