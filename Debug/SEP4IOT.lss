
SEP4IOT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000005c0  00800200  00006a62  00006af6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006a62  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000012e9  008007c0  008007c0  000070b6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000070b6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00007114  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000ca0  00000000  00000000  00007154  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000fba9  00000000  00000000  00007df4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004116  00000000  00000000  0001799d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000077c4  00000000  00000000  0001bab3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002b4c  00000000  00000000  00023278  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004884  00000000  00000000  00025dc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000e151  00000000  00000000  0002a648  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000c68  00000000  00000000  00038799  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	50 c2       	rjmp	.+1184   	; 0x4a2 <__ctors_end>
       2:	00 00       	nop
       4:	6f c2       	rjmp	.+1246   	; 0x4e4 <__bad_interrupt>
       6:	00 00       	nop
       8:	6d c2       	rjmp	.+1242   	; 0x4e4 <__bad_interrupt>
       a:	00 00       	nop
       c:	6b c2       	rjmp	.+1238   	; 0x4e4 <__bad_interrupt>
       e:	00 00       	nop
      10:	69 c2       	rjmp	.+1234   	; 0x4e4 <__bad_interrupt>
      12:	00 00       	nop
      14:	67 c2       	rjmp	.+1230   	; 0x4e4 <__bad_interrupt>
      16:	00 00       	nop
      18:	65 c2       	rjmp	.+1226   	; 0x4e4 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	63 c2       	rjmp	.+1222   	; 0x4e4 <__bad_interrupt>
      1e:	00 00       	nop
      20:	61 c2       	rjmp	.+1218   	; 0x4e4 <__bad_interrupt>
      22:	00 00       	nop
      24:	5f c2       	rjmp	.+1214   	; 0x4e4 <__bad_interrupt>
      26:	00 00       	nop
      28:	5d c2       	rjmp	.+1210   	; 0x4e4 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	5b c2       	rjmp	.+1206   	; 0x4e4 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 64 0e 	jmp	0x1cc8	; 0x1cc8 <__vector_12>
      34:	57 c2       	rjmp	.+1198   	; 0x4e4 <__bad_interrupt>
      36:	00 00       	nop
      38:	55 c2       	rjmp	.+1194   	; 0x4e4 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	53 c2       	rjmp	.+1190   	; 0x4e4 <__bad_interrupt>
      3e:	00 00       	nop
      40:	51 c2       	rjmp	.+1186   	; 0x4e4 <__bad_interrupt>
      42:	00 00       	nop
      44:	4f c2       	rjmp	.+1182   	; 0x4e4 <__bad_interrupt>
      46:	00 00       	nop
      48:	4d c2       	rjmp	.+1178   	; 0x4e4 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	4b c2       	rjmp	.+1174   	; 0x4e4 <__bad_interrupt>
      4e:	00 00       	nop
      50:	49 c2       	rjmp	.+1170   	; 0x4e4 <__bad_interrupt>
      52:	00 00       	nop
      54:	47 c2       	rjmp	.+1166   	; 0x4e4 <__bad_interrupt>
      56:	00 00       	nop
      58:	45 c2       	rjmp	.+1162   	; 0x4e4 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	43 c2       	rjmp	.+1158   	; 0x4e4 <__bad_interrupt>
      5e:	00 00       	nop
      60:	41 c2       	rjmp	.+1154   	; 0x4e4 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 4a 29 	jmp	0x5294	; 0x5294 <__vector_25>
      68:	0c 94 9c 29 	jmp	0x5338	; 0x5338 <__vector_26>
      6c:	3b c2       	rjmp	.+1142   	; 0x4e4 <__bad_interrupt>
      6e:	00 00       	nop
      70:	39 c2       	rjmp	.+1138   	; 0x4e4 <__bad_interrupt>
      72:	00 00       	nop
      74:	37 c2       	rjmp	.+1134   	; 0x4e4 <__bad_interrupt>
      76:	00 00       	nop
      78:	35 c2       	rjmp	.+1130   	; 0x4e4 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	33 c2       	rjmp	.+1126   	; 0x4e4 <__bad_interrupt>
      7e:	00 00       	nop
      80:	31 c2       	rjmp	.+1122   	; 0x4e4 <__bad_interrupt>
      82:	00 00       	nop
      84:	2f c2       	rjmp	.+1118   	; 0x4e4 <__bad_interrupt>
      86:	00 00       	nop
      88:	2d c2       	rjmp	.+1114   	; 0x4e4 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	2b c2       	rjmp	.+1110   	; 0x4e4 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 e0 29 	jmp	0x53c0	; 0x53c0 <__vector_36>
      94:	0c 94 32 2a 	jmp	0x5464	; 0x5464 <__vector_37>
      98:	25 c2       	rjmp	.+1098   	; 0x4e4 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 ca 2c 	jmp	0x5994	; 0x5994 <__vector_39>
      a0:	21 c2       	rjmp	.+1090   	; 0x4e4 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	1f c2       	rjmp	.+1086   	; 0x4e4 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	1d c2       	rjmp	.+1082   	; 0x4e4 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	1b c2       	rjmp	.+1078   	; 0x4e4 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	19 c2       	rjmp	.+1074   	; 0x4e4 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	17 c2       	rjmp	.+1070   	; 0x4e4 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	15 c2       	rjmp	.+1066   	; 0x4e4 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	13 c2       	rjmp	.+1062   	; 0x4e4 <__bad_interrupt>
      be:	00 00       	nop
      c0:	11 c2       	rjmp	.+1058   	; 0x4e4 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	0f c2       	rjmp	.+1054   	; 0x4e4 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	0d c2       	rjmp	.+1050   	; 0x4e4 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 76 2a 	jmp	0x54ec	; 0x54ec <__vector_51>
      d0:	0c 94 c8 2a 	jmp	0x5590	; 0x5590 <__vector_52>
      d4:	07 c2       	rjmp	.+1038   	; 0x4e4 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 0c 2b 	jmp	0x5618	; 0x5618 <__vector_54>
      dc:	0c 94 5e 2b 	jmp	0x56bc	; 0x56bc <__vector_55>
      e0:	01 c2       	rjmp	.+1026   	; 0x4e4 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	c6 01       	movw	r24, r12
      e6:	c6 01       	movw	r24, r12
      e8:	c6 01       	movw	r24, r12
      ea:	00 02       	muls	r16, r16
      ec:	08 02       	muls	r16, r24
      ee:	1e 02       	muls	r17, r30
      f0:	c6 01       	movw	r24, r12
      f2:	c6 01       	movw	r24, r12
      f4:	00 02       	muls	r16, r16
      f6:	08 02       	muls	r16, r24
      f8:	ec 2c       	mov	r14, r12
      fa:	5c 2d       	mov	r21, r12
      fc:	5c 2d       	mov	r21, r12
      fe:	5c 2d       	mov	r21, r12
     100:	5c 2d       	mov	r21, r12
     102:	5c 2d       	mov	r21, r12
     104:	5c 2d       	mov	r21, r12
     106:	5c 2d       	mov	r21, r12
     108:	ec 2c       	mov	r14, r12
     10a:	5c 2d       	mov	r21, r12
     10c:	5c 2d       	mov	r21, r12
     10e:	5c 2d       	mov	r21, r12
     110:	5c 2d       	mov	r21, r12
     112:	5c 2d       	mov	r21, r12
     114:	5c 2d       	mov	r21, r12
     116:	5c 2d       	mov	r21, r12
     118:	ee 2c       	mov	r14, r14
     11a:	5c 2d       	mov	r21, r12
     11c:	5c 2d       	mov	r21, r12
     11e:	5c 2d       	mov	r21, r12
     120:	5c 2d       	mov	r21, r12
     122:	5c 2d       	mov	r21, r12
     124:	5c 2d       	mov	r21, r12
     126:	5c 2d       	mov	r21, r12
     128:	5c 2d       	mov	r21, r12
     12a:	5c 2d       	mov	r21, r12
     12c:	5c 2d       	mov	r21, r12
     12e:	5c 2d       	mov	r21, r12
     130:	5c 2d       	mov	r21, r12
     132:	5c 2d       	mov	r21, r12
     134:	5c 2d       	mov	r21, r12
     136:	5c 2d       	mov	r21, r12
     138:	ee 2c       	mov	r14, r14
     13a:	5c 2d       	mov	r21, r12
     13c:	5c 2d       	mov	r21, r12
     13e:	5c 2d       	mov	r21, r12
     140:	5c 2d       	mov	r21, r12
     142:	5c 2d       	mov	r21, r12
     144:	5c 2d       	mov	r21, r12
     146:	5c 2d       	mov	r21, r12
     148:	5c 2d       	mov	r21, r12
     14a:	5c 2d       	mov	r21, r12
     14c:	5c 2d       	mov	r21, r12
     14e:	5c 2d       	mov	r21, r12
     150:	5c 2d       	mov	r21, r12
     152:	5c 2d       	mov	r21, r12
     154:	5c 2d       	mov	r21, r12
     156:	5c 2d       	mov	r21, r12
     158:	58 2d       	mov	r21, r8
     15a:	5c 2d       	mov	r21, r12
     15c:	5c 2d       	mov	r21, r12
     15e:	5c 2d       	mov	r21, r12
     160:	5c 2d       	mov	r21, r12
     162:	5c 2d       	mov	r21, r12
     164:	5c 2d       	mov	r21, r12
     166:	5c 2d       	mov	r21, r12
     168:	23 2d       	mov	r18, r3
     16a:	5c 2d       	mov	r21, r12
     16c:	5c 2d       	mov	r21, r12
     16e:	5c 2d       	mov	r21, r12
     170:	5c 2d       	mov	r21, r12
     172:	5c 2d       	mov	r21, r12
     174:	5c 2d       	mov	r21, r12
     176:	5c 2d       	mov	r21, r12
     178:	5c 2d       	mov	r21, r12
     17a:	5c 2d       	mov	r21, r12
     17c:	5c 2d       	mov	r21, r12
     17e:	5c 2d       	mov	r21, r12
     180:	5c 2d       	mov	r21, r12
     182:	5c 2d       	mov	r21, r12
     184:	5c 2d       	mov	r21, r12
     186:	5c 2d       	mov	r21, r12
     188:	17 2d       	mov	r17, r7
     18a:	5c 2d       	mov	r21, r12
     18c:	5c 2d       	mov	r21, r12
     18e:	5c 2d       	mov	r21, r12
     190:	5c 2d       	mov	r21, r12
     192:	5c 2d       	mov	r21, r12
     194:	5c 2d       	mov	r21, r12
     196:	5c 2d       	mov	r21, r12
     198:	3b 2d       	mov	r19, r11

0000019a <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     19a:	03 e7       	ldi	r16, 0x73	; 115
     19c:	18 e1       	ldi	r17, 0x18	; 24
     19e:	0f 2e       	mov	r0, r31
     1a0:	f3 ea       	ldi	r31, 0xA3	; 163
     1a2:	ef 2e       	mov	r14, r31
     1a4:	f8 e1       	ldi	r31, 0x18	; 24
     1a6:	ff 2e       	mov	r15, r31
     1a8:	f0 2d       	mov	r31, r0
     1aa:	80 91 72 18 	lds	r24, 0x1872	; 0x801872 <uxDeletedTasksWaitingCleanUp>
     1ae:	88 23       	and	r24, r24
     1b0:	29 f1       	breq	.+74     	; 0x1fc <prvIdleTask+0x62>
     1b2:	0f b6       	in	r0, 0x3f	; 63
     1b4:	f8 94       	cli
     1b6:	0f 92       	push	r0
     1b8:	d8 01       	movw	r26, r16
     1ba:	17 96       	adiw	r26, 0x07	; 7
     1bc:	ed 91       	ld	r30, X+
     1be:	fc 91       	ld	r31, X
     1c0:	18 97       	sbiw	r26, 0x08	; 8
     1c2:	c0 85       	ldd	r28, Z+8	; 0x08
     1c4:	d1 85       	ldd	r29, Z+9	; 0x09
     1c6:	ce 01       	movw	r24, r28
     1c8:	02 96       	adiw	r24, 0x02	; 2
     1ca:	0e 94 c9 0c 	call	0x1992	; 0x1992 <uxListRemove>
     1ce:	80 91 66 18 	lds	r24, 0x1866	; 0x801866 <uxCurrentNumberOfTasks>
     1d2:	81 50       	subi	r24, 0x01	; 1
     1d4:	80 93 66 18 	sts	0x1866, r24	; 0x801866 <uxCurrentNumberOfTasks>
     1d8:	80 91 72 18 	lds	r24, 0x1872	; 0x801872 <uxDeletedTasksWaitingCleanUp>
     1dc:	81 50       	subi	r24, 0x01	; 1
     1de:	80 93 72 18 	sts	0x1872, r24	; 0x801872 <uxDeletedTasksWaitingCleanUp>
     1e2:	0f 90       	pop	r0
     1e4:	0f be       	out	0x3f, r0	; 63
     1e6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     1e8:	9c 8d       	ldd	r25, Y+28	; 0x1c
     1ea:	0e 94 25 0c 	call	0x184a	; 0x184a <vPortFree>
     1ee:	ce 01       	movw	r24, r28
     1f0:	0e 94 25 0c 	call	0x184a	; 0x184a <vPortFree>
     1f4:	80 91 72 18 	lds	r24, 0x1872	; 0x801872 <uxDeletedTasksWaitingCleanUp>
     1f8:	81 11       	cpse	r24, r1
     1fa:	db cf       	rjmp	.-74     	; 0x1b2 <prvIdleTask+0x18>
     1fc:	f7 01       	movw	r30, r14
     1fe:	80 81       	ld	r24, Z
     200:	82 30       	cpi	r24, 0x02	; 2
     202:	10 f0       	brcs	.+4      	; 0x208 <prvIdleTask+0x6e>
     204:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <vPortYield>
     208:	0e 94 c5 1e 	call	0x3d8a	; 0x3d8a <vApplicationIdleHook>
     20c:	ce cf       	rjmp	.-100    	; 0x1aa <prvIdleTask+0x10>

0000020e <prvTimerTask>:
            pxNewTimer->ucStatus = 0x00;
            prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
        }

        return pxNewTimer;
    }
     20e:	cf 93       	push	r28
     210:	df 93       	push	r29
     212:	cd b7       	in	r28, 0x3d	; 61
     214:	de b7       	in	r29, 0x3e	; 62
     216:	60 97       	sbiw	r28, 0x10	; 16
     218:	0f b6       	in	r0, 0x3f	; 63
     21a:	f8 94       	cli
     21c:	de bf       	out	0x3e, r29	; 62
     21e:	0f be       	out	0x3f, r0	; 63
     220:	cd bf       	out	0x3d, r28	; 61
     222:	ce 01       	movw	r24, r28
     224:	01 96       	adiw	r24, 0x01	; 1
     226:	9a 87       	std	Y+10, r25	; 0x0a
     228:	89 87       	std	Y+9, r24	; 0x09
     22a:	81 2c       	mov	r8, r1
     22c:	91 2c       	mov	r9, r1
     22e:	a1 2c       	mov	r10, r1
     230:	b1 2c       	mov	r11, r1
     232:	69 84       	ldd	r6, Y+9	; 0x09
     234:	7a 84       	ldd	r7, Y+10	; 0x0a
     236:	e0 91 f1 18 	lds	r30, 0x18F1	; 0x8018f1 <pxCurrentTimerList>
     23a:	f0 91 f2 18 	lds	r31, 0x18F2	; 0x8018f2 <pxCurrentTimerList+0x1>
     23e:	80 81       	ld	r24, Z
     240:	88 23       	and	r24, r24
     242:	09 f4       	brne	.+2      	; 0x246 <prvTimerTask+0x38>
     244:	14 c1       	rjmp	.+552    	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
     246:	07 80       	ldd	r0, Z+7	; 0x07
     248:	f0 85       	ldd	r31, Z+8	; 0x08
     24a:	e0 2d       	mov	r30, r0
     24c:	20 80       	ld	r2, Z
     24e:	31 80       	ldd	r3, Z+1	; 0x01
     250:	42 80       	ldd	r4, Z+2	; 0x02
     252:	53 80       	ldd	r5, Z+3	; 0x03
     254:	0e 94 08 17 	call	0x2e10	; 0x2e10 <vTaskSuspendAll>
     258:	ce 01       	movw	r24, r28
     25a:	01 96       	adiw	r24, 0x01	; 1
     25c:	0e 94 2f 1e 	call	0x3c5e	; 0x3c5e <prvSampleTimeNow>
     260:	6b 87       	std	Y+11, r22	; 0x0b
     262:	7c 87       	std	Y+12, r23	; 0x0c
     264:	8d 87       	std	Y+13, r24	; 0x0d
     266:	9e 87       	std	Y+14, r25	; 0x0e
     268:	89 81       	ldd	r24, Y+1	; 0x01
     26a:	81 11       	cpse	r24, r1
     26c:	67 c0       	rjmp	.+206    	; 0x33c <prvTimerTask+0x12e>
     26e:	8b 85       	ldd	r24, Y+11	; 0x0b
     270:	9c 85       	ldd	r25, Y+12	; 0x0c
     272:	ad 85       	ldd	r26, Y+13	; 0x0d
     274:	be 85       	ldd	r27, Y+14	; 0x0e
     276:	82 15       	cp	r24, r2
     278:	93 05       	cpc	r25, r3
     27a:	a4 05       	cpc	r26, r4
     27c:	b5 05       	cpc	r27, r5
     27e:	08 f4       	brcc	.+2      	; 0x282 <prvTimerTask+0x74>
     280:	45 c0       	rjmp	.+138    	; 0x30c <prvTimerTask+0xfe>
     282:	0e 94 f1 17 	call	0x2fe2	; 0x2fe2 <xTaskResumeAll>
     286:	e0 91 f1 18 	lds	r30, 0x18F1	; 0x8018f1 <pxCurrentTimerList>
     28a:	f0 91 f2 18 	lds	r31, 0x18F2	; 0x8018f2 <pxCurrentTimerList+0x1>
     28e:	07 80       	ldd	r0, Z+7	; 0x07
     290:	f0 85       	ldd	r31, Z+8	; 0x08
     292:	e0 2d       	mov	r30, r0
     294:	a0 85       	ldd	r26, Z+8	; 0x08
     296:	b1 85       	ldd	r27, Z+9	; 0x09
     298:	b8 8b       	std	Y+16, r27	; 0x10
     29a:	af 87       	std	Y+15, r26	; 0x0f
     29c:	cd 01       	movw	r24, r26
     29e:	02 96       	adiw	r24, 0x02	; 2
     2a0:	0e 94 c9 0c 	call	0x1992	; 0x1992 <uxListRemove>
     2a4:	ef 85       	ldd	r30, Y+15	; 0x0f
     2a6:	f8 89       	ldd	r31, Y+16	; 0x10
     2a8:	87 89       	ldd	r24, Z+23	; 0x17
     2aa:	82 ff       	sbrs	r24, 2
     2ac:	21 c0       	rjmp	.+66     	; 0x2f0 <prvTimerTask+0xe2>
     2ae:	46 85       	ldd	r20, Z+14	; 0x0e
     2b0:	57 85       	ldd	r21, Z+15	; 0x0f
     2b2:	60 89       	ldd	r22, Z+16	; 0x10
     2b4:	71 89       	ldd	r23, Z+17	; 0x11
     2b6:	42 0d       	add	r20, r2
     2b8:	53 1d       	adc	r21, r3
     2ba:	64 1d       	adc	r22, r4
     2bc:	75 1d       	adc	r23, r5
     2be:	72 01       	movw	r14, r4
     2c0:	61 01       	movw	r12, r2
     2c2:	0b 85       	ldd	r16, Y+11	; 0x0b
     2c4:	1c 85       	ldd	r17, Y+12	; 0x0c
     2c6:	2d 85       	ldd	r18, Y+13	; 0x0d
     2c8:	3e 85       	ldd	r19, Y+14	; 0x0e
     2ca:	cf 01       	movw	r24, r30
     2cc:	0e 94 3e 1d 	call	0x3a7c	; 0x3a7c <prvInsertTimerInActiveList>
     2d0:	88 23       	and	r24, r24
     2d2:	99 f0       	breq	.+38     	; 0x2fa <prvTimerTask+0xec>
     2d4:	c8 2c       	mov	r12, r8
     2d6:	d9 2c       	mov	r13, r9
     2d8:	ea 2c       	mov	r14, r10
     2da:	fb 2c       	mov	r15, r11
     2dc:	00 e0       	ldi	r16, 0x00	; 0
     2de:	10 e0       	ldi	r17, 0x00	; 0
     2e0:	a2 01       	movw	r20, r4
     2e2:	91 01       	movw	r18, r2
     2e4:	60 e0       	ldi	r22, 0x00	; 0
     2e6:	8f 85       	ldd	r24, Y+15	; 0x0f
     2e8:	98 89       	ldd	r25, Y+16	; 0x10
     2ea:	0e 94 d1 1d 	call	0x3ba2	; 0x3ba2 <xTimerGenericCommand>
     2ee:	05 c0       	rjmp	.+10     	; 0x2fa <prvTimerTask+0xec>
     2f0:	8e 7f       	andi	r24, 0xFE	; 254
     2f2:	af 85       	ldd	r26, Y+15	; 0x0f
     2f4:	b8 89       	ldd	r27, Y+16	; 0x10
     2f6:	57 96       	adiw	r26, 0x17	; 23
     2f8:	8c 93       	st	X, r24
     2fa:	af 85       	ldd	r26, Y+15	; 0x0f
     2fc:	b8 89       	ldd	r27, Y+16	; 0x10
     2fe:	54 96       	adiw	r26, 0x14	; 20
     300:	ed 91       	ld	r30, X+
     302:	fc 91       	ld	r31, X
     304:	55 97       	sbiw	r26, 0x15	; 21
     306:	cd 01       	movw	r24, r26
     308:	19 95       	eicall
     30a:	a2 c0       	rjmp	.+324    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     30c:	20 e0       	ldi	r18, 0x00	; 0
     30e:	b2 01       	movw	r22, r4
     310:	a1 01       	movw	r20, r2
     312:	8b 85       	ldd	r24, Y+11	; 0x0b
     314:	9c 85       	ldd	r25, Y+12	; 0x0c
     316:	ad 85       	ldd	r26, Y+13	; 0x0d
     318:	be 85       	ldd	r27, Y+14	; 0x0e
     31a:	48 1b       	sub	r20, r24
     31c:	59 0b       	sbc	r21, r25
     31e:	6a 0b       	sbc	r22, r26
     320:	7b 0b       	sbc	r23, r27
     322:	80 91 ed 18 	lds	r24, 0x18ED	; 0x8018ed <xTimerQueue>
     326:	90 91 ee 18 	lds	r25, 0x18EE	; 0x8018ee <xTimerQueue+0x1>
     32a:	0e 94 00 12 	call	0x2400	; 0x2400 <vQueueWaitForMessageRestricted>
     32e:	0e 94 f1 17 	call	0x2fe2	; 0x2fe2 <xTaskResumeAll>
     332:	81 11       	cpse	r24, r1
     334:	8d c0       	rjmp	.+282    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     336:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <vPortYield>
     33a:	8a c0       	rjmp	.+276    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     33c:	0e 94 f1 17 	call	0x2fe2	; 0x2fe2 <xTaskResumeAll>
     340:	87 c0       	rjmp	.+270    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     342:	89 81       	ldd	r24, Y+1	; 0x01
     344:	88 23       	and	r24, r24
     346:	0c f4       	brge	.+2      	; 0x34a <prvTimerTask+0x13c>
     348:	83 c0       	rjmp	.+262    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     34a:	4e 80       	ldd	r4, Y+6	; 0x06
     34c:	5f 80       	ldd	r5, Y+7	; 0x07
     34e:	d2 01       	movw	r26, r4
     350:	1c 96       	adiw	r26, 0x0c	; 12
     352:	8d 91       	ld	r24, X+
     354:	9c 91       	ld	r25, X
     356:	1d 97       	sbiw	r26, 0x0d	; 13
     358:	89 2b       	or	r24, r25
     35a:	21 f0       	breq	.+8      	; 0x364 <prvTimerTask+0x156>
     35c:	c2 01       	movw	r24, r4
     35e:	02 96       	adiw	r24, 0x02	; 2
     360:	0e 94 c9 0c 	call	0x1992	; 0x1992 <uxListRemove>
     364:	ce 01       	movw	r24, r28
     366:	08 96       	adiw	r24, 0x08	; 8
     368:	0e 94 2f 1e 	call	0x3c5e	; 0x3c5e <prvSampleTimeNow>
     36c:	8b 01       	movw	r16, r22
     36e:	9c 01       	movw	r18, r24
     370:	e9 81       	ldd	r30, Y+1	; 0x01
     372:	0e 2e       	mov	r0, r30
     374:	00 0c       	add	r0, r0
     376:	ff 0b       	sbc	r31, r31
     378:	ea 30       	cpi	r30, 0x0A	; 10
     37a:	f1 05       	cpc	r31, r1
     37c:	08 f0       	brcs	.+2      	; 0x380 <prvTimerTask+0x172>
     37e:	68 c0       	rjmp	.+208    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     380:	88 27       	eor	r24, r24
     382:	ee 58       	subi	r30, 0x8E	; 142
     384:	ff 4f       	sbci	r31, 0xFF	; 255
     386:	8f 4f       	sbci	r24, 0xFF	; 255
     388:	0c 94 c7 2f 	jmp	0x5f8e	; 0x5f8e <__tablejump2__>
     38c:	f2 01       	movw	r30, r4
     38e:	87 89       	ldd	r24, Z+23	; 0x17
     390:	81 60       	ori	r24, 0x01	; 1
     392:	87 8b       	std	Z+23, r24	; 0x17
     394:	ca 80       	ldd	r12, Y+2	; 0x02
     396:	db 80       	ldd	r13, Y+3	; 0x03
     398:	ec 80       	ldd	r14, Y+4	; 0x04
     39a:	fd 80       	ldd	r15, Y+5	; 0x05
     39c:	46 85       	ldd	r20, Z+14	; 0x0e
     39e:	57 85       	ldd	r21, Z+15	; 0x0f
     3a0:	60 89       	ldd	r22, Z+16	; 0x10
     3a2:	71 89       	ldd	r23, Z+17	; 0x11
     3a4:	4c 0d       	add	r20, r12
     3a6:	5d 1d       	adc	r21, r13
     3a8:	6e 1d       	adc	r22, r14
     3aa:	7f 1d       	adc	r23, r15
     3ac:	c2 01       	movw	r24, r4
     3ae:	0e 94 3e 1d 	call	0x3a7c	; 0x3a7c <prvInsertTimerInActiveList>
     3b2:	88 23       	and	r24, r24
     3b4:	09 f4       	brne	.+2      	; 0x3b8 <prvTimerTask+0x1aa>
     3b6:	4c c0       	rjmp	.+152    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     3b8:	d2 01       	movw	r26, r4
     3ba:	54 96       	adiw	r26, 0x14	; 20
     3bc:	ed 91       	ld	r30, X+
     3be:	fc 91       	ld	r31, X
     3c0:	55 97       	sbiw	r26, 0x15	; 21
     3c2:	c2 01       	movw	r24, r4
     3c4:	19 95       	eicall
     3c6:	f2 01       	movw	r30, r4
     3c8:	87 89       	ldd	r24, Z+23	; 0x17
     3ca:	82 ff       	sbrs	r24, 2
     3cc:	41 c0       	rjmp	.+130    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     3ce:	4a 81       	ldd	r20, Y+2	; 0x02
     3d0:	5b 81       	ldd	r21, Y+3	; 0x03
     3d2:	6c 81       	ldd	r22, Y+4	; 0x04
     3d4:	7d 81       	ldd	r23, Y+5	; 0x05
     3d6:	86 85       	ldd	r24, Z+14	; 0x0e
     3d8:	97 85       	ldd	r25, Z+15	; 0x0f
     3da:	a0 89       	ldd	r26, Z+16	; 0x10
     3dc:	b1 89       	ldd	r27, Z+17	; 0x11
     3de:	9a 01       	movw	r18, r20
     3e0:	ab 01       	movw	r20, r22
     3e2:	28 0f       	add	r18, r24
     3e4:	39 1f       	adc	r19, r25
     3e6:	4a 1f       	adc	r20, r26
     3e8:	5b 1f       	adc	r21, r27
     3ea:	c8 2c       	mov	r12, r8
     3ec:	d9 2c       	mov	r13, r9
     3ee:	ea 2c       	mov	r14, r10
     3f0:	fb 2c       	mov	r15, r11
     3f2:	00 e0       	ldi	r16, 0x00	; 0
     3f4:	10 e0       	ldi	r17, 0x00	; 0
     3f6:	60 e0       	ldi	r22, 0x00	; 0
     3f8:	c2 01       	movw	r24, r4
     3fa:	0e 94 d1 1d 	call	0x3ba2	; 0x3ba2 <xTimerGenericCommand>
     3fe:	28 c0       	rjmp	.+80     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     400:	d2 01       	movw	r26, r4
     402:	57 96       	adiw	r26, 0x17	; 23
     404:	8c 91       	ld	r24, X
     406:	57 97       	sbiw	r26, 0x17	; 23
     408:	8e 7f       	andi	r24, 0xFE	; 254
     40a:	57 96       	adiw	r26, 0x17	; 23
     40c:	8c 93       	st	X, r24
     40e:	20 c0       	rjmp	.+64     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     410:	f2 01       	movw	r30, r4
     412:	87 89       	ldd	r24, Z+23	; 0x17
     414:	81 60       	ori	r24, 0x01	; 1
     416:	87 8b       	std	Z+23, r24	; 0x17
     418:	4a 81       	ldd	r20, Y+2	; 0x02
     41a:	5b 81       	ldd	r21, Y+3	; 0x03
     41c:	6c 81       	ldd	r22, Y+4	; 0x04
     41e:	7d 81       	ldd	r23, Y+5	; 0x05
     420:	46 87       	std	Z+14, r20	; 0x0e
     422:	57 87       	std	Z+15, r21	; 0x0f
     424:	60 8b       	std	Z+16, r22	; 0x10
     426:	71 8b       	std	Z+17, r23	; 0x11
     428:	40 0f       	add	r20, r16
     42a:	51 1f       	adc	r21, r17
     42c:	62 1f       	adc	r22, r18
     42e:	73 1f       	adc	r23, r19
     430:	68 01       	movw	r12, r16
     432:	79 01       	movw	r14, r18
     434:	c2 01       	movw	r24, r4
     436:	0e 94 3e 1d 	call	0x3a7c	; 0x3a7c <prvInsertTimerInActiveList>
     43a:	0a c0       	rjmp	.+20     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     43c:	f2 01       	movw	r30, r4
     43e:	87 89       	ldd	r24, Z+23	; 0x17
     440:	81 fd       	sbrc	r24, 1
     442:	04 c0       	rjmp	.+8      	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
     444:	c2 01       	movw	r24, r4
     446:	0e 94 25 0c 	call	0x184a	; 0x184a <vPortFree>
     44a:	02 c0       	rjmp	.+4      	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     44c:	8e 7f       	andi	r24, 0xFE	; 254
     44e:	87 8b       	std	Z+23, r24	; 0x17
     450:	28 2d       	mov	r18, r8
     452:	39 2d       	mov	r19, r9
     454:	4a 2d       	mov	r20, r10
     456:	5b 2d       	mov	r21, r11
     458:	66 2d       	mov	r22, r6
     45a:	77 2d       	mov	r23, r7
     45c:	80 91 ed 18 	lds	r24, 0x18ED	; 0x8018ed <xTimerQueue>
     460:	90 91 ee 18 	lds	r25, 0x18EE	; 0x8018ee <xTimerQueue+0x1>
     464:	0e 94 9c 10 	call	0x2138	; 0x2138 <xQueueReceive>
     468:	81 11       	cpse	r24, r1
     46a:	6b cf       	rjmp	.-298    	; 0x342 <prvTimerTask+0x134>
     46c:	e4 ce       	rjmp	.-568    	; 0x236 <prvTimerTask+0x28>
     46e:	0e 94 08 17 	call	0x2e10	; 0x2e10 <vTaskSuspendAll>
     472:	ce 01       	movw	r24, r28
     474:	01 96       	adiw	r24, 0x01	; 1
     476:	0e 94 2f 1e 	call	0x3c5e	; 0x3c5e <prvSampleTimeNow>
     47a:	6b 87       	std	Y+11, r22	; 0x0b
     47c:	7c 87       	std	Y+12, r23	; 0x0c
     47e:	8d 87       	std	Y+13, r24	; 0x0d
     480:	9e 87       	std	Y+14, r25	; 0x0e
     482:	89 81       	ldd	r24, Y+1	; 0x01
     484:	81 11       	cpse	r24, r1
     486:	5a cf       	rjmp	.-332    	; 0x33c <prvTimerTask+0x12e>
     488:	e0 91 ef 18 	lds	r30, 0x18EF	; 0x8018ef <pxOverflowTimerList>
     48c:	f0 91 f0 18 	lds	r31, 0x18F0	; 0x8018f0 <pxOverflowTimerList+0x1>
     490:	80 81       	ld	r24, Z
     492:	21 e0       	ldi	r18, 0x01	; 1
     494:	81 11       	cpse	r24, r1
     496:	20 e0       	ldi	r18, 0x00	; 0
     498:	28 2c       	mov	r2, r8
     49a:	39 2c       	mov	r3, r9
     49c:	4a 2c       	mov	r4, r10
     49e:	5b 2c       	mov	r5, r11
     4a0:	36 cf       	rjmp	.-404    	; 0x30e <prvTimerTask+0x100>

000004a2 <__ctors_end>:
     4a2:	11 24       	eor	r1, r1
     4a4:	1f be       	out	0x3f, r1	; 63
     4a6:	cf ef       	ldi	r28, 0xFF	; 255
     4a8:	d1 e2       	ldi	r29, 0x21	; 33
     4aa:	de bf       	out	0x3e, r29	; 62
     4ac:	cd bf       	out	0x3d, r28	; 61
     4ae:	00 e0       	ldi	r16, 0x00	; 0
     4b0:	0c bf       	out	0x3c, r16	; 60

000004b2 <__do_copy_data>:
     4b2:	17 e0       	ldi	r17, 0x07	; 7
     4b4:	a0 e0       	ldi	r26, 0x00	; 0
     4b6:	b2 e0       	ldi	r27, 0x02	; 2
     4b8:	e2 e6       	ldi	r30, 0x62	; 98
     4ba:	fa e6       	ldi	r31, 0x6A	; 106
     4bc:	00 e0       	ldi	r16, 0x00	; 0
     4be:	0b bf       	out	0x3b, r16	; 59
     4c0:	02 c0       	rjmp	.+4      	; 0x4c6 <__do_copy_data+0x14>
     4c2:	07 90       	elpm	r0, Z+
     4c4:	0d 92       	st	X+, r0
     4c6:	a0 3c       	cpi	r26, 0xC0	; 192
     4c8:	b1 07       	cpc	r27, r17
     4ca:	d9 f7       	brne	.-10     	; 0x4c2 <__do_copy_data+0x10>

000004cc <__do_clear_bss>:
     4cc:	2a e1       	ldi	r18, 0x1A	; 26
     4ce:	a0 ec       	ldi	r26, 0xC0	; 192
     4d0:	b7 e0       	ldi	r27, 0x07	; 7
     4d2:	01 c0       	rjmp	.+2      	; 0x4d6 <.do_clear_bss_start>

000004d4 <.do_clear_bss_loop>:
     4d4:	1d 92       	st	X+, r1

000004d6 <.do_clear_bss_start>:
     4d6:	a9 3a       	cpi	r26, 0xA9	; 169
     4d8:	b2 07       	cpc	r27, r18
     4da:	e1 f7       	brne	.-8      	; 0x4d4 <.do_clear_bss_loop>
     4dc:	0e 94 c3 1f 	call	0x3f86	; 0x3f86 <main>
     4e0:	0c 94 2f 35 	jmp	0x6a5e	; 0x6a5e <_exit>

000004e4 <__bad_interrupt>:
     4e4:	8d cd       	rjmp	.-1254   	; 0x0 <__vectors>

000004e6 <time>:
     4e6:	fc 01       	movw	r30, r24
     4e8:	0f b6       	in	r0, 0x3f	; 63
     4ea:	f8 94       	cli
     4ec:	60 91 a5 1a 	lds	r22, 0x1AA5	; 0x801aa5 <__system_time>
     4f0:	70 91 a6 1a 	lds	r23, 0x1AA6	; 0x801aa6 <__system_time+0x1>
     4f4:	80 91 a7 1a 	lds	r24, 0x1AA7	; 0x801aa7 <__system_time+0x2>
     4f8:	90 91 a8 1a 	lds	r25, 0x1AA8	; 0x801aa8 <__system_time+0x3>
     4fc:	0f be       	out	0x3f, r0	; 63
     4fe:	30 97       	sbiw	r30, 0x00	; 0
     500:	21 f0       	breq	.+8      	; 0x50a <time+0x24>
     502:	60 83       	st	Z, r22
     504:	71 83       	std	Z+1, r23	; 0x01
     506:	82 83       	std	Z+2, r24	; 0x02
     508:	93 83       	std	Z+3, r25	; 0x03
     50a:	08 95       	ret

0000050c <co2Reader_create>:
void co2Reader_destroy(co2reader_t self) {
	if (self == NULL)
		return;
	vTaskDelete(self->handleTask);
	vPortFree(self);
}
     50c:	2f 92       	push	r2
     50e:	3f 92       	push	r3
     510:	4f 92       	push	r4
     512:	5f 92       	push	r5
     514:	6f 92       	push	r6
     516:	7f 92       	push	r7
     518:	8f 92       	push	r8
     51a:	9f 92       	push	r9
     51c:	af 92       	push	r10
     51e:	bf 92       	push	r11
     520:	cf 92       	push	r12
     522:	df 92       	push	r13
     524:	ef 92       	push	r14
     526:	ff 92       	push	r15
     528:	0f 93       	push	r16
     52a:	1f 93       	push	r17
     52c:	cf 93       	push	r28
     52e:	df 93       	push	r29
     530:	d8 2f       	mov	r29, r24
     532:	c6 2f       	mov	r28, r22
     534:	1a 01       	movw	r2, r20
     536:	28 01       	movw	r4, r16
     538:	39 01       	movw	r6, r18
     53a:	87 01       	movw	r16, r14
     53c:	64 e0       	ldi	r22, 0x04	; 4
     53e:	70 e0       	ldi	r23, 0x00	; 0
     540:	81 e0       	ldi	r24, 0x01	; 1
     542:	90 e0       	ldi	r25, 0x00	; 0
     544:	0e 94 e3 2f 	call	0x5fc6	; 0x5fc6 <calloc>
     548:	4c 01       	movw	r8, r24
     54a:	89 2b       	or	r24, r25
     54c:	69 f1       	breq	.+90     	; 0x5a8 <co2Reader_create+0x9c>
     54e:	f4 01       	movw	r30, r8
     550:	11 92       	st	Z+, r1
     552:	11 92       	st	Z+, r1
     554:	7f 01       	movw	r14, r30
     556:	30 92 cb 07 	sts	0x07CB, r3	; 0x8007cb <_startMeasureEventGroup+0x1>
     55a:	20 92 ca 07 	sts	0x07CA, r2	; 0x8007ca <_startMeasureEventGroup>
     55e:	40 92 c6 07 	sts	0x07C6, r4	; 0x8007c6 <_startMeasureBit>
     562:	50 92 c7 07 	sts	0x07C7, r5	; 0x8007c7 <_startMeasureBit+0x1>
     566:	60 92 c8 07 	sts	0x07C8, r6	; 0x8007c8 <_startMeasureBit+0x2>
     56a:	70 92 c9 07 	sts	0x07C9, r7	; 0x8007c9 <_startMeasureBit+0x3>
     56e:	10 93 c5 07 	sts	0x07C5, r17	; 0x8007c5 <_readyEventGroup+0x1>
     572:	00 93 c4 07 	sts	0x07C4, r16	; 0x8007c4 <_readyEventGroup>
     576:	a0 92 c0 07 	sts	0x07C0, r10	; 0x8007c0 <__data_end>
     57a:	b0 92 c1 07 	sts	0x07C1, r11	; 0x8007c1 <__data_end+0x1>
     57e:	c0 92 c2 07 	sts	0x07C2, r12	; 0x8007c2 <__data_end+0x2>
     582:	d0 92 c3 07 	sts	0x07C3, r13	; 0x8007c3 <__data_end+0x3>
     586:	60 e0       	ldi	r22, 0x00	; 0
     588:	70 e0       	ldi	r23, 0x00	; 0
     58a:	83 e0       	ldi	r24, 0x03	; 3
     58c:	0e 94 81 27 	call	0x4f02	; 0x4f02 <mh_z19_create>
     590:	4c 2f       	mov	r20, r28
     592:	50 e0       	ldi	r21, 0x00	; 0
     594:	48 53       	subi	r20, 0x38	; 56
     596:	5f 4f       	sbci	r21, 0xFF	; 255
     598:	0d 2f       	mov	r16, r29
     59a:	94 01       	movw	r18, r8
     59c:	62 e7       	ldi	r22, 0x72	; 114
     59e:	72 e0       	ldi	r23, 0x02	; 2
     5a0:	8b e3       	ldi	r24, 0x3B	; 59
     5a2:	93 e0       	ldi	r25, 0x03	; 3
     5a4:	0e 94 ab 15 	call	0x2b56	; 0x2b56 <xTaskCreate>
     5a8:	c4 01       	movw	r24, r8
     5aa:	df 91       	pop	r29
     5ac:	cf 91       	pop	r28
     5ae:	1f 91       	pop	r17
     5b0:	0f 91       	pop	r16
     5b2:	ff 90       	pop	r15
     5b4:	ef 90       	pop	r14
     5b6:	df 90       	pop	r13
     5b8:	cf 90       	pop	r12
     5ba:	bf 90       	pop	r11
     5bc:	af 90       	pop	r10
     5be:	9f 90       	pop	r9
     5c0:	8f 90       	pop	r8
     5c2:	7f 90       	pop	r7
     5c4:	6f 90       	pop	r6
     5c6:	5f 90       	pop	r5
     5c8:	4f 90       	pop	r4
     5ca:	3f 90       	pop	r3
     5cc:	2f 90       	pop	r2
     5ce:	08 95       	ret

000005d0 <co2Reader_measure>:


void co2Reader_measure(co2reader_t self) {
     5d0:	cf 92       	push	r12
     5d2:	df 92       	push	r13
     5d4:	ef 92       	push	r14
     5d6:	ff 92       	push	r15
     5d8:	0f 93       	push	r16
     5da:	1f 93       	push	r17
     5dc:	cf 93       	push	r28
     5de:	df 93       	push	r29
     5e0:	ec 01       	movw	r28, r24
	
	EventBits_t uxBits = xEventGroupWaitBits(_startMeasureEventGroup, //eventGroup
     5e2:	40 91 c6 07 	lds	r20, 0x07C6	; 0x8007c6 <_startMeasureBit>
     5e6:	50 91 c7 07 	lds	r21, 0x07C7	; 0x8007c7 <_startMeasureBit+0x1>
     5ea:	60 91 c8 07 	lds	r22, 0x07C8	; 0x8007c8 <_startMeasureBit+0x2>
     5ee:	70 91 c9 07 	lds	r23, 0x07C9	; 0x8007c9 <_startMeasureBit+0x3>
     5f2:	cc 24       	eor	r12, r12
     5f4:	ca 94       	dec	r12
     5f6:	dc 2c       	mov	r13, r12
     5f8:	76 01       	movw	r14, r12
     5fa:	01 e0       	ldi	r16, 0x01	; 1
     5fc:	21 e0       	ldi	r18, 0x01	; 1
     5fe:	80 91 ca 07 	lds	r24, 0x07CA	; 0x8007ca <_startMeasureEventGroup>
     602:	90 91 cb 07 	lds	r25, 0x07CB	; 0x8007cb <_startMeasureEventGroup+0x1>
     606:	c2 d6       	rcall	.+3460   	; 0x138c <xEventGroupWaitBits>
	_startMeasureBit, //bits it is interested in
	pdTRUE, //clears the bits
	pdTRUE, //waits for both bits to be set
	portMAX_DELAY); //wait

	if ((uxBits & (_startMeasureBit)) == (_startMeasureBit)) {
     608:	00 91 c6 07 	lds	r16, 0x07C6	; 0x8007c6 <_startMeasureBit>
     60c:	10 91 c7 07 	lds	r17, 0x07C7	; 0x8007c7 <_startMeasureBit+0x1>
     610:	20 91 c8 07 	lds	r18, 0x07C8	; 0x8007c8 <_startMeasureBit+0x2>
     614:	30 91 c9 07 	lds	r19, 0x07C9	; 0x8007c9 <_startMeasureBit+0x3>
     618:	dc 01       	movw	r26, r24
     61a:	cb 01       	movw	r24, r22
     61c:	80 23       	and	r24, r16
     61e:	91 23       	and	r25, r17
     620:	a2 23       	and	r26, r18
     622:	b3 23       	and	r27, r19
     624:	08 17       	cp	r16, r24
     626:	19 07       	cpc	r17, r25
     628:	2a 07       	cpc	r18, r26
     62a:	3b 07       	cpc	r19, r27
     62c:	d9 f4       	brne	.+54     	; 0x664 <co2Reader_measure+0x94>

		
		mh_z19_return_code_t return_code_co2_measurement = mh_z19_take_meassuring();
     62e:	0e 94 af 27 	call	0x4f5e	; 0x4f5e <mh_z19_take_meassuring>
     632:	18 2f       	mov	r17, r24
		vTaskDelay(300);
     634:	6c e2       	ldi	r22, 0x2C	; 44
     636:	71 e0       	ldi	r23, 0x01	; 1
     638:	80 e0       	ldi	r24, 0x00	; 0
     63a:	90 e0       	ldi	r25, 0x00	; 0
     63c:	0e 94 6d 18 	call	0x30da	; 0x30da <vTaskDelay>
		if(return_code_co2_measurement == MHZ19_OK) {
     640:	11 11       	cpse	r17, r1
     642:	03 c0       	rjmp	.+6      	; 0x64a <co2Reader_measure+0x7a>
			mh_z19_get_co2_ppm(&self->value);
     644:	ce 01       	movw	r24, r28
     646:	0e 94 de 27 	call	0x4fbc	; 0x4fbc <mh_z19_get_co2_ppm>
		}
		
		//set done bit so that device knows measurement is done
		xEventGroupSetBits(_readyEventGroup, _readyBit);
     64a:	40 91 c0 07 	lds	r20, 0x07C0	; 0x8007c0 <__data_end>
     64e:	50 91 c1 07 	lds	r21, 0x07C1	; 0x8007c1 <__data_end+0x1>
     652:	60 91 c2 07 	lds	r22, 0x07C2	; 0x8007c2 <__data_end+0x2>
     656:	70 91 c3 07 	lds	r23, 0x07C3	; 0x8007c3 <__data_end+0x3>
     65a:	80 91 c4 07 	lds	r24, 0x07C4	; 0x8007c4 <_readyEventGroup>
     65e:	90 91 c5 07 	lds	r25, 0x07C5	; 0x8007c5 <_readyEventGroup+0x1>
     662:	54 d7       	rcall	.+3752   	; 0x150c <xEventGroupSetBits>
	}
}
     664:	df 91       	pop	r29
     666:	cf 91       	pop	r28
     668:	1f 91       	pop	r17
     66a:	0f 91       	pop	r16
     66c:	ff 90       	pop	r15
     66e:	ef 90       	pop	r14
     670:	df 90       	pop	r13
     672:	cf 90       	pop	r12
     674:	08 95       	ret

00000676 <co2Reader_executeTask>:
	uint16_t value;
	TaskHandle_t handleTask;
}co2reader;

//actual task, methods devided so that it is possible to test
void co2Reader_executeTask(void* self) {
     676:	ec 01       	movw	r28, r24
	for (;;) {
		co2Reader_measure((co2reader_t)self);
     678:	ce 01       	movw	r24, r28
     67a:	aa df       	rcall	.-172    	; 0x5d0 <co2Reader_measure>
     67c:	fd cf       	rjmp	.-6      	; 0x678 <co2Reader_executeTask+0x2>

0000067e <co2Reader_getCO2>:
	}
}

uint16_t co2Reader_getCO2(co2reader_t self) {
	return self->value;
}
     67e:	fc 01       	movw	r30, r24
     680:	80 81       	ld	r24, Z
     682:	91 81       	ldd	r25, Z+1	; 0x01
     684:	08 95       	ret

00000686 <configuration_create>:
//it is created only once, before starting the scheduler + will never be destroyed
	_working = calloc(1, sizeof(bool));
	_ventilation = calloc(1, sizeof(bool));

	//by default, device should work, not to ventilate
	_working = true;
     686:	81 e0       	ldi	r24, 0x01	; 1
     688:	80 93 cf 07 	sts	0x07CF, r24	; 0x8007cf <_working>
	_ventilation = false;
     68c:	10 92 ce 07 	sts	0x07CE, r1	; 0x8007ce <_ventilation>

	_semaphore = xSemaphoreCreateMutex();
     690:	0e 94 48 10 	call	0x2090	; 0x2090 <xQueueCreateMutex>
     694:	90 93 cd 07 	sts	0x07CD, r25	; 0x8007cd <_semaphore+0x1>
     698:	80 93 cc 07 	sts	0x07CC, r24	; 0x8007cc <_semaphore>
     69c:	08 95       	ret

0000069e <configuration_setWorking>:
}

//if the semaphore is initialized, take it and give it back, if not, just do the work 
void configuration_setWorking(bool value) {
     69e:	0f 93       	push	r16
     6a0:	cf 93       	push	r28
	if (_semaphore != NULL) {
     6a2:	20 91 cc 07 	lds	r18, 0x07CC	; 0x8007cc <_semaphore>
     6a6:	30 91 cd 07 	lds	r19, 0x07CD	; 0x8007cd <_semaphore+0x1>
     6aa:	21 15       	cp	r18, r1
     6ac:	31 05       	cpc	r19, r1
     6ae:	b1 f0       	breq	.+44     	; 0x6dc <configuration_setWorking+0x3e>
     6b0:	c8 2f       	mov	r28, r24
		xSemaphoreTake(_semaphore, portMAX_DELAY);
     6b2:	4f ef       	ldi	r20, 0xFF	; 255
     6b4:	5f ef       	ldi	r21, 0xFF	; 255
     6b6:	ba 01       	movw	r22, r20
     6b8:	c9 01       	movw	r24, r18
     6ba:	0e 94 34 11 	call	0x2268	; 0x2268 <xQueueSemaphoreTake>
		_working = value;
     6be:	c0 93 cf 07 	sts	0x07CF, r28	; 0x8007cf <_working>
		xSemaphoreGive(_semaphore);
     6c2:	00 e0       	ldi	r16, 0x00	; 0
     6c4:	20 e0       	ldi	r18, 0x00	; 0
     6c6:	30 e0       	ldi	r19, 0x00	; 0
     6c8:	a9 01       	movw	r20, r18
     6ca:	60 e0       	ldi	r22, 0x00	; 0
     6cc:	70 e0       	ldi	r23, 0x00	; 0
     6ce:	80 91 cc 07 	lds	r24, 0x07CC	; 0x8007cc <_semaphore>
     6d2:	90 91 cd 07 	lds	r25, 0x07CD	; 0x8007cd <_semaphore+0x1>
     6d6:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <xQueueGenericSend>
     6da:	02 c0       	rjmp	.+4      	; 0x6e0 <configuration_setWorking+0x42>
	}
	else _working = value;
     6dc:	80 93 cf 07 	sts	0x07CF, r24	; 0x8007cf <_working>
}
     6e0:	cf 91       	pop	r28
     6e2:	0f 91       	pop	r16
     6e4:	08 95       	ret

000006e6 <configuration_getWorking>:

void configuration_getWorking(bool* working) {
     6e6:	0f 93       	push	r16
     6e8:	cf 93       	push	r28
     6ea:	df 93       	push	r29
	if (_semaphore != NULL) {
     6ec:	20 91 cc 07 	lds	r18, 0x07CC	; 0x8007cc <_semaphore>
     6f0:	30 91 cd 07 	lds	r19, 0x07CD	; 0x8007cd <_semaphore+0x1>
     6f4:	21 15       	cp	r18, r1
     6f6:	31 05       	cpc	r19, r1
     6f8:	b9 f0       	breq	.+46     	; 0x728 <configuration_getWorking+0x42>
     6fa:	ec 01       	movw	r28, r24
		xSemaphoreTake(_semaphore, portMAX_DELAY);
     6fc:	4f ef       	ldi	r20, 0xFF	; 255
     6fe:	5f ef       	ldi	r21, 0xFF	; 255
     700:	ba 01       	movw	r22, r20
     702:	c9 01       	movw	r24, r18
     704:	0e 94 34 11 	call	0x2268	; 0x2268 <xQueueSemaphoreTake>
		*working = _working;
     708:	80 91 cf 07 	lds	r24, 0x07CF	; 0x8007cf <_working>
     70c:	88 83       	st	Y, r24
		xSemaphoreGive(_semaphore);
     70e:	00 e0       	ldi	r16, 0x00	; 0
     710:	20 e0       	ldi	r18, 0x00	; 0
     712:	30 e0       	ldi	r19, 0x00	; 0
     714:	a9 01       	movw	r20, r18
     716:	60 e0       	ldi	r22, 0x00	; 0
     718:	70 e0       	ldi	r23, 0x00	; 0
     71a:	80 91 cc 07 	lds	r24, 0x07CC	; 0x8007cc <_semaphore>
     71e:	90 91 cd 07 	lds	r25, 0x07CD	; 0x8007cd <_semaphore+0x1>
     722:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <xQueueGenericSend>
     726:	04 c0       	rjmp	.+8      	; 0x730 <configuration_getWorking+0x4a>
	}
	else *working = _working;
     728:	20 91 cf 07 	lds	r18, 0x07CF	; 0x8007cf <_working>
     72c:	fc 01       	movw	r30, r24
     72e:	20 83       	st	Z, r18
}
     730:	df 91       	pop	r29
     732:	cf 91       	pop	r28
     734:	0f 91       	pop	r16
     736:	08 95       	ret

00000738 <configuration_setVentilation>:

void configuration_setVentilation(bool value) {
     738:	0f 93       	push	r16
     73a:	cf 93       	push	r28
	if (_semaphore != NULL) {
     73c:	20 91 cc 07 	lds	r18, 0x07CC	; 0x8007cc <_semaphore>
     740:	30 91 cd 07 	lds	r19, 0x07CD	; 0x8007cd <_semaphore+0x1>
     744:	21 15       	cp	r18, r1
     746:	31 05       	cpc	r19, r1
     748:	b1 f0       	breq	.+44     	; 0x776 <configuration_setVentilation+0x3e>
     74a:	c8 2f       	mov	r28, r24
		xSemaphoreTake(_semaphore, portMAX_DELAY);
     74c:	4f ef       	ldi	r20, 0xFF	; 255
     74e:	5f ef       	ldi	r21, 0xFF	; 255
     750:	ba 01       	movw	r22, r20
     752:	c9 01       	movw	r24, r18
     754:	0e 94 34 11 	call	0x2268	; 0x2268 <xQueueSemaphoreTake>
		_ventilation = value;
     758:	c0 93 ce 07 	sts	0x07CE, r28	; 0x8007ce <_ventilation>
		xSemaphoreGive(_semaphore);
     75c:	00 e0       	ldi	r16, 0x00	; 0
     75e:	20 e0       	ldi	r18, 0x00	; 0
     760:	30 e0       	ldi	r19, 0x00	; 0
     762:	a9 01       	movw	r20, r18
     764:	60 e0       	ldi	r22, 0x00	; 0
     766:	70 e0       	ldi	r23, 0x00	; 0
     768:	80 91 cc 07 	lds	r24, 0x07CC	; 0x8007cc <_semaphore>
     76c:	90 91 cd 07 	lds	r25, 0x07CD	; 0x8007cd <_semaphore+0x1>
     770:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <xQueueGenericSend>
     774:	02 c0       	rjmp	.+4      	; 0x77a <configuration_setVentilation+0x42>
	}
	else _ventilation = value;
     776:	80 93 ce 07 	sts	0x07CE, r24	; 0x8007ce <_ventilation>
}
     77a:	cf 91       	pop	r28
     77c:	0f 91       	pop	r16
     77e:	08 95       	ret

00000780 <configuration_getVentilation>:

void configuration_getVentilation(bool* ventilation) {
     780:	0f 93       	push	r16
     782:	cf 93       	push	r28
     784:	df 93       	push	r29
	if (_semaphore != NULL) {
     786:	20 91 cc 07 	lds	r18, 0x07CC	; 0x8007cc <_semaphore>
     78a:	30 91 cd 07 	lds	r19, 0x07CD	; 0x8007cd <_semaphore+0x1>
     78e:	21 15       	cp	r18, r1
     790:	31 05       	cpc	r19, r1
     792:	b9 f0       	breq	.+46     	; 0x7c2 <configuration_getVentilation+0x42>
     794:	ec 01       	movw	r28, r24
		xSemaphoreTake(_semaphore, portMAX_DELAY);
     796:	4f ef       	ldi	r20, 0xFF	; 255
     798:	5f ef       	ldi	r21, 0xFF	; 255
     79a:	ba 01       	movw	r22, r20
     79c:	c9 01       	movw	r24, r18
     79e:	0e 94 34 11 	call	0x2268	; 0x2268 <xQueueSemaphoreTake>
		*ventilation = _ventilation;
     7a2:	80 91 ce 07 	lds	r24, 0x07CE	; 0x8007ce <_ventilation>
     7a6:	88 83       	st	Y, r24
		xSemaphoreGive(_semaphore);
     7a8:	00 e0       	ldi	r16, 0x00	; 0
     7aa:	20 e0       	ldi	r18, 0x00	; 0
     7ac:	30 e0       	ldi	r19, 0x00	; 0
     7ae:	a9 01       	movw	r20, r18
     7b0:	60 e0       	ldi	r22, 0x00	; 0
     7b2:	70 e0       	ldi	r23, 0x00	; 0
     7b4:	80 91 cc 07 	lds	r24, 0x07CC	; 0x8007cc <_semaphore>
     7b8:	90 91 cd 07 	lds	r25, 0x07CD	; 0x8007cd <_semaphore+0x1>
     7bc:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <xQueueGenericSend>
     7c0:	04 c0       	rjmp	.+8      	; 0x7ca <configuration_getVentilation+0x4a>
	}
	else *ventilation = _ventilation;
     7c2:	20 91 ce 07 	lds	r18, 0x07CE	; 0x8007ce <_ventilation>
     7c6:	fc 01       	movw	r30, r24
     7c8:	20 83       	st	Z, r18
     7ca:	df 91       	pop	r29
     7cc:	cf 91       	pop	r28
     7ce:	0f 91       	pop	r16
     7d0:	08 95       	ret

000007d2 <currentCondition_create>:
	}
	
}

void currentCondition_destroy(currentCondition_t self) {
	vPortFree(self);
     7d2:	68 e0       	ldi	r22, 0x08	; 8
     7d4:	70 e0       	ldi	r23, 0x00	; 0
     7d6:	81 e0       	ldi	r24, 0x01	; 1
     7d8:	90 e0       	ldi	r25, 0x00	; 0
     7da:	0e 94 e3 2f 	call	0x5fc6	; 0x5fc6 <calloc>
     7de:	00 97       	sbiw	r24, 0x00	; 0
     7e0:	49 f0       	breq	.+18     	; 0x7f4 <currentCondition_create+0x22>
     7e2:	fc 01       	movw	r30, r24
     7e4:	13 82       	std	Z+3, r1	; 0x03
     7e6:	12 82       	std	Z+2, r1	; 0x02
     7e8:	15 82       	std	Z+5, r1	; 0x05
     7ea:	14 82       	std	Z+4, r1	; 0x04
     7ec:	11 82       	std	Z+1, r1	; 0x01
     7ee:	10 82       	st	Z, r1
     7f0:	17 82       	std	Z+7, r1	; 0x07
     7f2:	16 82       	std	Z+6, r1	; 0x06
     7f4:	08 95       	ret

000007f6 <currentCondition_setCO2>:
     7f6:	00 97       	sbiw	r24, 0x00	; 0
     7f8:	49 f0       	breq	.+18     	; 0x80c <currentCondition_setCO2+0x16>
     7fa:	9b 01       	movw	r18, r22
     7fc:	28 5c       	subi	r18, 0xC8	; 200
     7fe:	31 09       	sbc	r19, r1
     800:	29 34       	cpi	r18, 0x49	; 73
     802:	36 42       	sbci	r19, 0x26	; 38
     804:	18 f4       	brcc	.+6      	; 0x80c <currentCondition_setCO2+0x16>
     806:	fc 01       	movw	r30, r24
     808:	71 83       	std	Z+1, r23	; 0x01
     80a:	60 83       	st	Z, r22
     80c:	08 95       	ret

0000080e <currentCondition_setHumidity>:
     80e:	00 97       	sbiw	r24, 0x00	; 0
     810:	39 f0       	breq	.+14     	; 0x820 <currentCondition_setHumidity+0x12>
     812:	69 3e       	cpi	r22, 0xE9	; 233
     814:	23 e0       	ldi	r18, 0x03	; 3
     816:	72 07       	cpc	r23, r18
     818:	18 f4       	brcc	.+6      	; 0x820 <currentCondition_setHumidity+0x12>
     81a:	fc 01       	movw	r30, r24
     81c:	75 83       	std	Z+5, r23	; 0x05
     81e:	64 83       	std	Z+4, r22	; 0x04
     820:	08 95       	ret

00000822 <currentCondition_setTemperature>:
     822:	00 97       	sbiw	r24, 0x00	; 0
     824:	49 f0       	breq	.+18     	; 0x838 <currentCondition_setTemperature+0x16>
     826:	9b 01       	movw	r18, r22
     828:	20 57       	subi	r18, 0x70	; 112
     82a:	3e 4f       	sbci	r19, 0xFE	; 254
     82c:	27 3b       	cpi	r18, 0xB7	; 183
     82e:	33 40       	sbci	r19, 0x03	; 3
     830:	18 f4       	brcc	.+6      	; 0x838 <currentCondition_setTemperature+0x16>
     832:	fc 01       	movw	r30, r24
     834:	73 83       	std	Z+3, r23	; 0x03
     836:	62 83       	std	Z+2, r22	; 0x02
     838:	08 95       	ret

0000083a <currentCondition_setSound>:
     83a:	00 97       	sbiw	r24, 0x00	; 0
     83c:	31 f0       	breq	.+12     	; 0x84a <currentCondition_setSound+0x10>
     83e:	67 39       	cpi	r22, 0x97	; 151
     840:	71 05       	cpc	r23, r1
     842:	18 f4       	brcc	.+6      	; 0x84a <currentCondition_setSound+0x10>
     844:	fc 01       	movw	r30, r24
     846:	77 83       	std	Z+7, r23	; 0x07
     848:	66 83       	std	Z+6, r22	; 0x06
     84a:	08 95       	ret

0000084c <getcurrentConditionPayload>:
}

lora_payload_t getcurrentConditionPayload(currentCondition_t self)
{
     84c:	fc 01       	movw	r30, r24
     84e:	db 01       	movw	r26, r22
	lora_payload_t payload;
	payload.port_no = 1;
	payload.len = 8;
	
	int16_t tempData = self->temperatureData;
     850:	12 96       	adiw	r26, 0x02	; 2
     852:	6c 91       	ld	r22, X
     854:	12 97       	sbiw	r26, 0x02	; 2
     856:	13 96       	adiw	r26, 0x03	; 3
     858:	7c 91       	ld	r23, X
     85a:	13 97       	sbiw	r26, 0x03	; 3
	
	payload.bytes[0] = tempData >> 8;
	payload.bytes[1] = tempData & 0xFF;

	payload.bytes[2] = self->humidityData >> 8;
     85c:	14 96       	adiw	r26, 0x04	; 4
     85e:	4c 91       	ld	r20, X
     860:	14 97       	sbiw	r26, 0x04	; 4
     862:	15 96       	adiw	r26, 0x05	; 5
     864:	5c 91       	ld	r21, X
     866:	15 97       	sbiw	r26, 0x05	; 5
	payload.bytes[3] = self->humidityData & 0xFF;
	
	payload.bytes[4] = self->co2Data >> 8;
     868:	2c 91       	ld	r18, X
     86a:	11 96       	adiw	r26, 0x01	; 1
     86c:	3c 91       	ld	r19, X
     86e:	11 97       	sbiw	r26, 0x01	; 1
	payload.bytes[5] = self->co2Data & 0xFF;
	
	payload.bytes[6] = self->soundData >> 8;
     870:	16 96       	adiw	r26, 0x06	; 6
     872:	8c 91       	ld	r24, X
     874:	16 97       	sbiw	r26, 0x06	; 6
     876:	17 96       	adiw	r26, 0x07	; 7
     878:	9c 91       	ld	r25, X
	payload.bytes[7] = self->soundData & 0xFF;
	
	return payload;
     87a:	a1 e0       	ldi	r26, 0x01	; 1
     87c:	a0 83       	st	Z, r26
     87e:	a8 e0       	ldi	r26, 0x08	; 8
     880:	a1 83       	std	Z+1, r26	; 0x01
     882:	72 83       	std	Z+2, r23	; 0x02
     884:	63 83       	std	Z+3, r22	; 0x03
     886:	54 83       	std	Z+4, r21	; 0x04
     888:	45 83       	std	Z+5, r20	; 0x05
     88a:	36 83       	std	Z+6, r19	; 0x06
     88c:	27 83       	std	Z+7, r18	; 0x07
     88e:	90 87       	std	Z+8, r25	; 0x08
     890:	81 87       	std	Z+9, r24	; 0x09
	
}
     892:	cf 01       	movw	r24, r30
     894:	08 95       	ret

00000896 <getSimplePayload>:
	
	uint16_t one = 0;
	payload.bytes[0] = one >> 8;
	payload.bytes[1] = one & 0xFF;
	
	return payload;
     896:	21 e0       	ldi	r18, 0x01	; 1
     898:	fc 01       	movw	r30, r24
     89a:	20 83       	st	Z, r18
     89c:	22 e0       	ldi	r18, 0x02	; 2
     89e:	21 83       	std	Z+1, r18	; 0x01
     8a0:	12 82       	std	Z+2, r1	; 0x02
     8a2:	13 82       	std	Z+3, r1	; 0x03
     8a4:	08 95       	ret

000008a6 <device_create>:
		//vTaskDelay(5000);
	}
}

device_t device_create(UBaseType_t priority, UBaseType_t stack, EventGroupHandle_t startMeasureEventGroup, EventBits_t startMeasureBit,
EventGroupHandle_t readyEventGroup, EventBits_t readyBit, co2reader_t co2Reader, humAndTempReader_t humAndTempReader,soundReader_t soundReader, MessageBufferHandle_t uplinkMessageBuffer, EventGroupHandle_t waitEventGroup, EventBits_t deviceBit){
     8a6:	2f 92       	push	r2
     8a8:	3f 92       	push	r3
     8aa:	4f 92       	push	r4
     8ac:	5f 92       	push	r5
     8ae:	6f 92       	push	r6
     8b0:	7f 92       	push	r7
     8b2:	8f 92       	push	r8
     8b4:	9f 92       	push	r9
     8b6:	af 92       	push	r10
     8b8:	bf 92       	push	r11
     8ba:	cf 92       	push	r12
     8bc:	df 92       	push	r13
     8be:	ef 92       	push	r14
     8c0:	ff 92       	push	r15
     8c2:	0f 93       	push	r16
     8c4:	1f 93       	push	r17
     8c6:	cf 93       	push	r28
     8c8:	df 93       	push	r29
     8ca:	00 d0       	rcall	.+0      	; 0x8cc <device_create+0x26>
     8cc:	1f 92       	push	r1
     8ce:	cd b7       	in	r28, 0x3d	; 61
     8d0:	de b7       	in	r29, 0x3e	; 62
     8d2:	28 2e       	mov	r2, r24
     8d4:	36 2e       	mov	r3, r22
     8d6:	5c 83       	std	Y+4, r21	; 0x04
     8d8:	4b 83       	std	Y+3, r20	; 0x03
     8da:	28 01       	movw	r4, r16
     8dc:	39 01       	movw	r6, r18

	device_t _new_device = calloc(1, sizeof(device));
     8de:	6a e0       	ldi	r22, 0x0A	; 10
     8e0:	70 e0       	ldi	r23, 0x00	; 0
     8e2:	81 e0       	ldi	r24, 0x01	; 1
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	0e 94 e3 2f 	call	0x5fc6	; 0x5fc6 <calloc>
     8ea:	9a 83       	std	Y+2, r25	; 0x02
     8ec:	89 83       	std	Y+1, r24	; 0x01
	if (_new_device == NULL)
     8ee:	00 97       	sbiw	r24, 0x00	; 0
     8f0:	09 f4       	brne	.+2      	; 0x8f4 <device_create+0x4e>
     8f2:	52 c0       	rjmp	.+164    	; 0x998 <device_create+0xf2>
		return NULL;

	_new_device->co2reader = co2Reader;
     8f4:	fc 01       	movw	r30, r24
     8f6:	91 82       	std	Z+1, r9	; 0x01
     8f8:	80 82       	st	Z, r8
	_new_device->humAndTempReader = humAndTempReader;
     8fa:	8a 8d       	ldd	r24, Y+26	; 0x1a
     8fc:	9b 8d       	ldd	r25, Y+27	; 0x1b
     8fe:	93 83       	std	Z+3, r25	; 0x03
     900:	82 83       	std	Z+2, r24	; 0x02
	_new_device->soundReader=soundReader;
     902:	8c 8d       	ldd	r24, Y+28	; 0x1c
     904:	9d 8d       	ldd	r25, Y+29	; 0x1d
     906:	95 83       	std	Z+5, r25	; 0x05
     908:	84 83       	std	Z+4, r24	; 0x04
	currentCondition_t currentCond = currentCondition_create();
     90a:	63 df       	rcall	.-314    	; 0x7d2 <currentCondition_create>
	_new_device->currentCondition = currentCond;
     90c:	e9 81       	ldd	r30, Y+1	; 0x01
     90e:	fa 81       	ldd	r31, Y+2	; 0x02
     910:	97 83       	std	Z+7, r25	; 0x07
     912:	86 83       	std	Z+6, r24	; 0x06

	_startMeasureEventGroup = startMeasureEventGroup;
     914:	8b 81       	ldd	r24, Y+3	; 0x03
     916:	9c 81       	ldd	r25, Y+4	; 0x04
     918:	90 93 f9 07 	sts	0x07F9, r25	; 0x8007f9 <_startMeasureEventGroup+0x1>
     91c:	80 93 f8 07 	sts	0x07F8, r24	; 0x8007f8 <_startMeasureEventGroup>
	_startMeasureBit = startMeasureBit;
     920:	40 92 f4 07 	sts	0x07F4, r4	; 0x8007f4 <_startMeasureBit>
     924:	50 92 f5 07 	sts	0x07F5, r5	; 0x8007f5 <_startMeasureBit+0x1>
     928:	60 92 f6 07 	sts	0x07F6, r6	; 0x8007f6 <_startMeasureBit+0x2>
     92c:	70 92 f7 07 	sts	0x07F7, r7	; 0x8007f7 <_startMeasureBit+0x3>

	_readyEventGroup = readyEventGroup;
     930:	f0 92 f3 07 	sts	0x07F3, r15	; 0x8007f3 <_readyEventGroup+0x1>
     934:	e0 92 f2 07 	sts	0x07F2, r14	; 0x8007f2 <_readyEventGroup>
	_readyBit = readyBit;
     938:	a0 92 ee 07 	sts	0x07EE, r10	; 0x8007ee <_readyBit>
     93c:	b0 92 ef 07 	sts	0x07EF, r11	; 0x8007ef <_readyBit+0x1>
     940:	c0 92 f0 07 	sts	0x07F0, r12	; 0x8007f0 <_readyBit+0x2>
     944:	d0 92 f1 07 	sts	0x07F1, r13	; 0x8007f1 <_readyBit+0x3>
	
	_uplinkmessageBuffer=uplinkMessageBuffer;
     948:	8e 8d       	ldd	r24, Y+30	; 0x1e
     94a:	9f 8d       	ldd	r25, Y+31	; 0x1f
     94c:	90 93 ed 07 	sts	0x07ED, r25	; 0x8007ed <_uplinkmessageBuffer+0x1>
     950:	80 93 ec 07 	sts	0x07EC, r24	; 0x8007ec <_uplinkmessageBuffer>
	
	_waitEventGroup = waitEventGroup;
     954:	88 a1       	ldd	r24, Y+32	; 0x20
     956:	99 a1       	ldd	r25, Y+33	; 0x21
     958:	90 93 d5 07 	sts	0x07D5, r25	; 0x8007d5 <_waitEventGroup+0x1>
     95c:	80 93 d4 07 	sts	0x07D4, r24	; 0x8007d4 <_waitEventGroup>
	_deviceBit = deviceBit;
     960:	8a a1       	ldd	r24, Y+34	; 0x22
     962:	9b a1       	ldd	r25, Y+35	; 0x23
     964:	ac a1       	ldd	r26, Y+36	; 0x24
     966:	bd a1       	ldd	r27, Y+37	; 0x25
     968:	80 93 d0 07 	sts	0x07D0, r24	; 0x8007d0 <_deviceBit>
     96c:	90 93 d1 07 	sts	0x07D1, r25	; 0x8007d1 <_deviceBit+0x1>
     970:	a0 93 d2 07 	sts	0x07D2, r26	; 0x8007d2 <_deviceBit+0x2>
     974:	b0 93 d3 07 	sts	0x07D3, r27	; 0x8007d3 <_deviceBit+0x3>

	xTaskCreate(
     978:	43 2d       	mov	r20, r3
     97a:	50 e0       	ldi	r21, 0x00	; 0
     97c:	48 53       	subi	r20, 0x38	; 56
     97e:	5f 4f       	sbci	r21, 0xFF	; 255
     980:	7f 01       	movw	r14, r30
     982:	98 e0       	ldi	r25, 0x08	; 8
     984:	e9 0e       	add	r14, r25
     986:	f1 1c       	adc	r15, r1
     988:	02 2d       	mov	r16, r2
     98a:	9f 01       	movw	r18, r30
     98c:	6c e7       	ldi	r22, 0x7C	; 124
     98e:	72 e0       	ldi	r23, 0x02	; 2
     990:	8c e0       	ldi	r24, 0x0C	; 12
     992:	96 e0       	ldi	r25, 0x06	; 6
     994:	0e 94 ab 15 	call	0x2b56	; 0x2b56 <xTaskCreate>
	);

	//printf("device up\n");

	return _new_device;
}
     998:	89 81       	ldd	r24, Y+1	; 0x01
     99a:	9a 81       	ldd	r25, Y+2	; 0x02
     99c:	0f 90       	pop	r0
     99e:	0f 90       	pop	r0
     9a0:	0f 90       	pop	r0
     9a2:	0f 90       	pop	r0
     9a4:	df 91       	pop	r29
     9a6:	cf 91       	pop	r28
     9a8:	1f 91       	pop	r17
     9aa:	0f 91       	pop	r16
     9ac:	ff 90       	pop	r15
     9ae:	ef 90       	pop	r14
     9b0:	df 90       	pop	r13
     9b2:	cf 90       	pop	r12
     9b4:	bf 90       	pop	r11
     9b6:	af 90       	pop	r10
     9b8:	9f 90       	pop	r9
     9ba:	8f 90       	pop	r8
     9bc:	7f 90       	pop	r7
     9be:	6f 90       	pop	r6
     9c0:	5f 90       	pop	r5
     9c2:	4f 90       	pop	r4
     9c4:	3f 90       	pop	r3
     9c6:	2f 90       	pop	r2
     9c8:	08 95       	ret

000009ca <device_startMeasuring>:




void device_startMeasuring(device_t self) {
     9ca:	af 92       	push	r10
     9cc:	bf 92       	push	r11
     9ce:	cf 92       	push	r12
     9d0:	df 92       	push	r13
     9d2:	ef 92       	push	r14
     9d4:	ff 92       	push	r15
     9d6:	0f 93       	push	r16
     9d8:	1f 93       	push	r17
     9da:	cf 93       	push	r28
     9dc:	df 93       	push	r29
     9de:	cd b7       	in	r28, 0x3d	; 61
     9e0:	de b7       	in	r29, 0x3e	; 62
     9e2:	66 97       	sbiw	r28, 0x16	; 22
     9e4:	0f b6       	in	r0, 0x3f	; 63
     9e6:	f8 94       	cli
     9e8:	de bf       	out	0x3e, r29	; 62
     9ea:	0f be       	out	0x3f, r0	; 63
     9ec:	cd bf       	out	0x3d, r28	; 61
     9ee:	5c 01       	movw	r10, r24
	//we should first check if device is on, get that from lora and add new eventBit 
	
	bool* works = pvPortMalloc(sizeof(bool));
     9f0:	81 e0       	ldi	r24, 0x01	; 1
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	71 d6       	rcall	.+3298   	; 0x16d8 <pvPortMalloc>
     9f6:	8c 01       	movw	r16, r24
	configuration_getWorking(works);
     9f8:	76 de       	rcall	.-788    	; 0x6e6 <configuration_getWorking>
     9fa:	f8 01       	movw	r30, r16
	if (*works == true)
     9fc:	80 81       	ld	r24, Z
     9fe:	88 23       	and	r24, r24
     a00:	09 f4       	brne	.+2      	; 0xa04 <device_startMeasuring+0x3a>
     a02:	d7 c0       	rjmp	.+430    	; 0xbb2 <device_startMeasuring+0x1e8>
     a04:	81 e0       	ldi	r24, 0x01	; 1
	{

		bool* ventilate = pvPortMalloc(sizeof(bool));
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	67 d6       	rcall	.+3278   	; 0x16d8 <pvPortMalloc>
     a0a:	8c 01       	movw	r16, r24
		configuration_getVentilation(ventilate);
     a0c:	b9 de       	rcall	.-654    	; 0x780 <configuration_getVentilation>
     a0e:	f8 01       	movw	r30, r16
		if(*ventilate == true)
     a10:	80 81       	ld	r24, Z
     a12:	88 23       	and	r24, r24
		{
			servo_open();
     a14:	11 f0       	breq	.+4      	; 0xa1a <device_startMeasuring+0x50>
     a16:	84 d2       	rcall	.+1288   	; 0xf20 <servo_open>
     a18:	01 c0       	rjmp	.+2      	; 0xa1c <device_startMeasuring+0x52>
		} 
		else
		{
			servo_close();
     a1a:	87 d2       	rcall	.+1294   	; 0xf2a <servo_close>
     a1c:	80 91 ec 07 	lds	r24, 0x07EC	; 0x8007ec <_uplinkmessageBuffer>
		}

	if(xMessageBufferIsEmpty(_uplinkmessageBuffer) == pdFALSE)
     a20:	90 91 ed 07 	lds	r25, 0x07ED	; 0x8007ed <_uplinkmessageBuffer+0x1>
     a24:	0e 94 ff 14 	call	0x29fe	; 0x29fe <xStreamBufferIsEmpty>
     a28:	81 11       	cpse	r24, r1
     a2a:	13 c0       	rjmp	.+38     	; 0xa52 <device_startMeasuring+0x88>
     a2c:	40 91 d0 07 	lds	r20, 0x07D0	; 0x8007d0 <_deviceBit>
	{
		EventBits_t uxBits = xEventGroupWaitBits(_waitEventGroup, //eventGroup it is interested in
     a30:	50 91 d1 07 	lds	r21, 0x07D1	; 0x8007d1 <_deviceBit+0x1>
     a34:	60 91 d2 07 	lds	r22, 0x07D2	; 0x8007d2 <_deviceBit+0x2>
     a38:	70 91 d3 07 	lds	r23, 0x07D3	; 0x8007d3 <_deviceBit+0x3>
     a3c:	cc 24       	eor	r12, r12
     a3e:	ca 94       	dec	r12
     a40:	dc 2c       	mov	r13, r12
     a42:	76 01       	movw	r14, r12
     a44:	01 e0       	ldi	r16, 0x01	; 1
     a46:	21 e0       	ldi	r18, 0x01	; 1
     a48:	80 91 d4 07 	lds	r24, 0x07D4	; 0x8007d4 <_waitEventGroup>
     a4c:	90 91 d5 07 	lds	r25, 0x07D5	; 0x8007d5 <_waitEventGroup+0x1>
     a50:	9d d4       	rcall	.+2362   	; 0x138c <xEventGroupWaitBits>
     a52:	40 91 f4 07 	lds	r20, 0x07F4	; 0x8007f4 <_startMeasureBit>
		pdTRUE, //waits for both bits to be set
		portMAX_DELAY); //waits forever if needed
	}
	
	////tell sensors to start meassuring 
	xEventGroupSetBits(_startMeasureEventGroup, _startMeasureBit);
     a56:	50 91 f5 07 	lds	r21, 0x07F5	; 0x8007f5 <_startMeasureBit+0x1>
     a5a:	60 91 f6 07 	lds	r22, 0x07F6	; 0x8007f6 <_startMeasureBit+0x2>
     a5e:	70 91 f7 07 	lds	r23, 0x07F7	; 0x8007f7 <_startMeasureBit+0x3>
     a62:	80 91 f8 07 	lds	r24, 0x07F8	; 0x8007f8 <_startMeasureEventGroup>
     a66:	90 91 f9 07 	lds	r25, 0x07F9	; 0x8007f9 <_startMeasureEventGroup+0x1>
     a6a:	50 d5       	rcall	.+2720   	; 0x150c <xEventGroupSetBits>
     a6c:	40 91 ee 07 	lds	r20, 0x07EE	; 0x8007ee <_readyBit>
	//printf("device has set bits\n");

	//wait for sensors to read data
	EventBits_t uxBits = xEventGroupWaitBits(_readyEventGroup, //eventGroup it is interested in
     a70:	50 91 ef 07 	lds	r21, 0x07EF	; 0x8007ef <_readyBit+0x1>
     a74:	60 91 f0 07 	lds	r22, 0x07F0	; 0x8007f0 <_readyBit+0x2>
     a78:	70 91 f1 07 	lds	r23, 0x07F1	; 0x8007f1 <_readyBit+0x3>
     a7c:	cc 24       	eor	r12, r12
     a7e:	ca 94       	dec	r12
     a80:	dc 2c       	mov	r13, r12
     a82:	76 01       	movw	r14, r12
     a84:	01 e0       	ldi	r16, 0x01	; 1
     a86:	21 e0       	ldi	r18, 0x01	; 1
     a88:	80 91 f2 07 	lds	r24, 0x07F2	; 0x8007f2 <_readyEventGroup>
     a8c:	90 91 f3 07 	lds	r25, 0x07F3	; 0x8007f3 <_readyEventGroup+0x1>
     a90:	7d d4       	rcall	.+2298   	; 0x138c <xEventGroupWaitBits>
     a92:	00 91 ee 07 	lds	r16, 0x07EE	; 0x8007ee <_readyBit>
		_readyBit, //bits it is interested in
		pdTRUE, //clears the bits 
		pdTRUE, //waits for both bits to be set
		portMAX_DELAY); //waits forever if needed
	
	if ((uxBits & (_readyBit)) == (_readyBit)) {
     a96:	10 91 ef 07 	lds	r17, 0x07EF	; 0x8007ef <_readyBit+0x1>
     a9a:	20 91 f0 07 	lds	r18, 0x07F0	; 0x8007f0 <_readyBit+0x2>
     a9e:	30 91 f1 07 	lds	r19, 0x07F1	; 0x8007f1 <_readyBit+0x3>
     aa2:	dc 01       	movw	r26, r24
     aa4:	cb 01       	movw	r24, r22
     aa6:	80 23       	and	r24, r16
     aa8:	91 23       	and	r25, r17
     aaa:	a2 23       	and	r26, r18
     aac:	b3 23       	and	r27, r19
     aae:	08 17       	cp	r16, r24
     ab0:	19 07       	cpc	r17, r25
     ab2:	2a 07       	cpc	r18, r26
     ab4:	3b 07       	cpc	r19, r27
     ab6:	09 f0       	breq	.+2      	; 0xaba <device_startMeasuring+0xf0>
     ab8:	9e c0       	rjmp	.+316    	; 0xbf6 <device_startMeasuring+0x22c>
		currentCondition_setCO2(self->currentCondition,co2Reader_getCO2(self->co2reader));
     aba:	f5 01       	movw	r30, r10
     abc:	80 81       	ld	r24, Z
     abe:	91 81       	ldd	r25, Z+1	; 0x01
     ac0:	de dd       	rcall	.-1092   	; 0x67e <co2Reader_getCO2>
     ac2:	bc 01       	movw	r22, r24
     ac4:	f5 01       	movw	r30, r10
     ac6:	86 81       	ldd	r24, Z+6	; 0x06
     ac8:	97 81       	ldd	r25, Z+7	; 0x07
     aca:	95 de       	rcall	.-726    	; 0x7f6 <currentCondition_setCO2>
		
		currentCondition_setSound(self->currentCondition,soundReader_getSound(self->soundReader));
     acc:	f5 01       	movw	r30, r10
     ace:	84 81       	ldd	r24, Z+4	; 0x04
     ad0:	95 81       	ldd	r25, Z+5	; 0x05
     ad2:	e8 d2       	rcall	.+1488   	; 0x10a4 <soundReader_getSound>
     ad4:	bc 01       	movw	r22, r24
     ad6:	f5 01       	movw	r30, r10
     ad8:	86 81       	ldd	r24, Z+6	; 0x06
     ada:	97 81       	ldd	r25, Z+7	; 0x07
     adc:	ae de       	rcall	.-676    	; 0x83a <currentCondition_setSound>
		
		currentCondition_setTemperature(self->currentCondition,humAndTempReader_getTemperature(self->humAndTempReader));
     ade:	f5 01       	movw	r30, r10
     ae0:	82 81       	ldd	r24, Z+2	; 0x02
     ae2:	93 81       	ldd	r25, Z+3	; 0x03
     ae4:	16 d2       	rcall	.+1068   	; 0xf12 <humAndTempReader_getTemperature>
     ae6:	bc 01       	movw	r22, r24
     ae8:	f5 01       	movw	r30, r10
     aea:	86 81       	ldd	r24, Z+6	; 0x06
     aec:	97 81       	ldd	r25, Z+7	; 0x07
     aee:	99 de       	rcall	.-718    	; 0x822 <currentCondition_setTemperature>
		
		int16_t humidity = humAndTempReader_getHumidity(self->humAndTempReader);
     af0:	f5 01       	movw	r30, r10
     af2:	82 81       	ldd	r24, Z+2	; 0x02
     af4:	93 81       	ldd	r25, Z+3	; 0x03
     af6:	09 d2       	rcall	.+1042   	; 0xf0a <humAndTempReader_getHumidity>
     af8:	bc 01       	movw	r22, r24
		currentCondition_setHumidity(self->currentCondition, humidity);
     afa:	f5 01       	movw	r30, r10
     afc:	86 81       	ldd	r24, Z+6	; 0x06
     afe:	97 81       	ldd	r25, Z+7	; 0x07
     b00:	86 de       	rcall	.-756    	; 0x80e <currentCondition_setHumidity>
     b02:	f5 01       	movw	r30, r10
		
		//printf("device got done bit\n");
		
		printf("CO2 is: %u\n", co2Reader_getCO2(self->co2reader));
     b04:	80 81       	ld	r24, Z
     b06:	91 81       	ldd	r25, Z+1	; 0x01
     b08:	ba dd       	rcall	.-1164   	; 0x67e <co2Reader_getCO2>
     b0a:	9f 93       	push	r25
     b0c:	8f 93       	push	r24
     b0e:	83 e8       	ldi	r24, 0x83	; 131
     b10:	92 e0       	ldi	r25, 0x02	; 2
     b12:	9f 93       	push	r25
     b14:	8f 93       	push	r24
     b16:	0e 94 d6 31 	call	0x63ac	; 0x63ac <printf>
     b1a:	f5 01       	movw	r30, r10
		printf("Temperature is: %d\n", humAndTempReader_getTemperature(self->humAndTempReader));
     b1c:	82 81       	ldd	r24, Z+2	; 0x02
     b1e:	93 81       	ldd	r25, Z+3	; 0x03
     b20:	f8 d1       	rcall	.+1008   	; 0xf12 <humAndTempReader_getTemperature>
     b22:	9f 93       	push	r25
     b24:	8f 93       	push	r24
     b26:	8f e8       	ldi	r24, 0x8F	; 143
     b28:	92 e0       	ldi	r25, 0x02	; 2
     b2a:	9f 93       	push	r25
     b2c:	8f 93       	push	r24
     b2e:	0e 94 d6 31 	call	0x63ac	; 0x63ac <printf>
     b32:	f5 01       	movw	r30, r10
		printf("Humidity is: %u\n", humAndTempReader_getHumidity(self->humAndTempReader));
     b34:	82 81       	ldd	r24, Z+2	; 0x02
     b36:	93 81       	ldd	r25, Z+3	; 0x03
     b38:	e8 d1       	rcall	.+976    	; 0xf0a <humAndTempReader_getHumidity>
     b3a:	9f 93       	push	r25
     b3c:	8f 93       	push	r24
     b3e:	83 ea       	ldi	r24, 0xA3	; 163
     b40:	92 e0       	ldi	r25, 0x02	; 2
     b42:	9f 93       	push	r25
     b44:	8f 93       	push	r24
     b46:	0e 94 d6 31 	call	0x63ac	; 0x63ac <printf>
     b4a:	f5 01       	movw	r30, r10
		printf("Sound is: %u\n", soundReader_getSound(self->soundReader));
     b4c:	84 81       	ldd	r24, Z+4	; 0x04
     b4e:	95 81       	ldd	r25, Z+5	; 0x05
     b50:	a9 d2       	rcall	.+1362   	; 0x10a4 <soundReader_getSound>
     b52:	9f 93       	push	r25
     b54:	8f 93       	push	r24
     b56:	84 eb       	ldi	r24, 0xB4	; 180
     b58:	92 e0       	ldi	r25, 0x02	; 2
     b5a:	9f 93       	push	r25
     b5c:	8f 93       	push	r24
     b5e:	0e 94 d6 31 	call	0x63ac	; 0x63ac <printf>
     b62:	f5 01       	movw	r30, r10
     b64:	66 81       	ldd	r22, Z+6	; 0x06
		
		/*Perhaps loraPayload is not a good idea to be here*/
		_uplink_payload = getcurrentConditionPayload(self->currentCondition);
     b66:	77 81       	ldd	r23, Z+7	; 0x07
     b68:	ce 01       	movw	r24, r28
     b6a:	01 96       	adiw	r24, 0x01	; 1
     b6c:	6f de       	rcall	.-802    	; 0x84c <getcurrentConditionPayload>
     b6e:	86 e1       	ldi	r24, 0x16	; 22
     b70:	fe 01       	movw	r30, r28
     b72:	31 96       	adiw	r30, 0x01	; 1
     b74:	a6 ed       	ldi	r26, 0xD6	; 214
     b76:	b7 e0       	ldi	r27, 0x07	; 7
     b78:	01 90       	ld	r0, Z+
     b7a:	0d 92       	st	X+, r0
     b7c:	8a 95       	dec	r24
     b7e:	e1 f7       	brne	.-8      	; 0xb78 <device_startMeasuring+0x1ae>
     b80:	0f ef       	ldi	r16, 0xFF	; 255
     b82:	1f ef       	ldi	r17, 0xFF	; 255
     b84:	98 01       	movw	r18, r16
		
		xMessageBufferSend(_uplinkmessageBuffer,(void*) &_uplink_payload,sizeof(_uplink_payload),portMAX_DELAY);
     b86:	46 e1       	ldi	r20, 0x16	; 22
     b88:	50 e0       	ldi	r21, 0x00	; 0
     b8a:	66 ed       	ldi	r22, 0xD6	; 214
     b8c:	77 e0       	ldi	r23, 0x07	; 7
     b8e:	80 91 ec 07 	lds	r24, 0x07EC	; 0x8007ec <_uplinkmessageBuffer>
     b92:	90 91 ed 07 	lds	r25, 0x07ED	; 0x8007ed <_uplinkmessageBuffer+0x1>
     b96:	0e 94 70 13 	call	0x26e0	; 0x26e0 <xStreamBufferSend>
     b9a:	60 ed       	ldi	r22, 0xD0	; 208
     b9c:	77 e0       	ldi	r23, 0x07	; 7
     b9e:	80 e0       	ldi	r24, 0x00	; 0
		
		vTaskDelay(2000);
     ba0:	90 e0       	ldi	r25, 0x00	; 0
     ba2:	0e 94 6d 18 	call	0x30da	; 0x30da <vTaskDelay>
     ba6:	0f b6       	in	r0, 0x3f	; 63
     ba8:	f8 94       	cli
     baa:	de bf       	out	0x3e, r29	; 62
     bac:	0f be       	out	0x3f, r0	; 63
     bae:	cd bf       	out	0x3d, r28	; 61
     bb0:	22 c0       	rjmp	.+68     	; 0xbf6 <device_startMeasuring+0x22c>
     bb2:	68 e8       	ldi	r22, 0x88	; 136
     bb4:	73 e1       	ldi	r23, 0x13	; 19
	//if the device is not on, wait a bit and check if anything is changed
	}
	else
	{
		//put 30 000 for 5 mins
		vTaskDelay(5000);
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	90 e0       	ldi	r25, 0x00	; 0
     bba:	0e 94 6d 18 	call	0x30da	; 0x30da <vTaskDelay>
     bbe:	f5 01       	movw	r30, r10
     bc0:	66 81       	ldd	r22, Z+6	; 0x06
		_uplink_payload = getSimplePayload(self->currentCondition);
     bc2:	77 81       	ldd	r23, Z+7	; 0x07
     bc4:	ce 01       	movw	r24, r28
     bc6:	01 96       	adiw	r24, 0x01	; 1
     bc8:	66 de       	rcall	.-820    	; 0x896 <getSimplePayload>
     bca:	86 e1       	ldi	r24, 0x16	; 22
     bcc:	fe 01       	movw	r30, r28
     bce:	31 96       	adiw	r30, 0x01	; 1
     bd0:	a6 ed       	ldi	r26, 0xD6	; 214
     bd2:	b7 e0       	ldi	r27, 0x07	; 7
     bd4:	01 90       	ld	r0, Z+
     bd6:	0d 92       	st	X+, r0
     bd8:	8a 95       	dec	r24
     bda:	e1 f7       	brne	.-8      	; 0xbd4 <device_startMeasuring+0x20a>
     bdc:	0f ef       	ldi	r16, 0xFF	; 255
     bde:	1f ef       	ldi	r17, 0xFF	; 255
     be0:	98 01       	movw	r18, r16
		xMessageBufferSend(_uplinkmessageBuffer,(void*) &_uplink_payload,sizeof(_uplink_payload),portMAX_DELAY);
     be2:	46 e1       	ldi	r20, 0x16	; 22
     be4:	50 e0       	ldi	r21, 0x00	; 0
     be6:	66 ed       	ldi	r22, 0xD6	; 214
     be8:	77 e0       	ldi	r23, 0x07	; 7
     bea:	80 91 ec 07 	lds	r24, 0x07EC	; 0x8007ec <_uplinkmessageBuffer>
     bee:	90 91 ed 07 	lds	r25, 0x07ED	; 0x8007ed <_uplinkmessageBuffer+0x1>
     bf2:	0e 94 70 13 	call	0x26e0	; 0x26e0 <xStreamBufferSend>
     bf6:	66 96       	adiw	r28, 0x16	; 22
     bf8:	0f b6       	in	r0, 0x3f	; 63
     bfa:	f8 94       	cli
	} 
}
     bfc:	de bf       	out	0x3e, r29	; 62
     bfe:	0f be       	out	0x3f, r0	; 63
     c00:	cd bf       	out	0x3d, r28	; 61
     c02:	df 91       	pop	r29
     c04:	cf 91       	pop	r28
     c06:	1f 91       	pop	r17
     c08:	0f 91       	pop	r16
     c0a:	ff 90       	pop	r15
     c0c:	ef 90       	pop	r14
     c0e:	df 90       	pop	r13
     c10:	cf 90       	pop	r12
     c12:	bf 90       	pop	r11
     c14:	af 90       	pop	r10
     c16:	08 95       	ret

00000c18 <device_executeTask>:
     c18:	ec 01       	movw	r28, r24
     c1a:	ce 01       	movw	r24, r28
     c1c:	d6 de       	rcall	.-596    	; 0x9ca <device_startMeasuring>

//devided so we can test
void device_executeTask(void* self) {
	for (;;)
	{
		device_startMeasuring((device_t)self);
     c1e:	fd cf       	rjmp	.-6      	; 0xc1a <device_executeTask+0x2>

00000c20 <lora_DownLinkHandler_create>:
		
	}
}

void lora_DownLinkHandler_create(UBaseType_t lora_handler_task_priority, MessageBufferHandle_t xMessageBuffer)
{
     c20:	ef 92       	push	r14
     c22:	ff 92       	push	r15
     c24:	0f 93       	push	r16
     c26:	9b 01       	movw	r18, r22
	
	//_isSet=isSet;
	xTaskCreate(
     c28:	e1 2c       	mov	r14, r1
     c2a:	f1 2c       	mov	r15, r1
     c2c:	08 2f       	mov	r16, r24
     c2e:	48 e8       	ldi	r20, 0x88	; 136
     c30:	51 e0       	ldi	r21, 0x01	; 1
     c32:	62 ec       	ldi	r22, 0xC2	; 194
     c34:	72 e0       	ldi	r23, 0x02	; 2
     c36:	86 eb       	ldi	r24, 0xB6	; 182
     c38:	96 e0       	ldi	r25, 0x06	; 6
     c3a:	0e 94 ab 15 	call	0x2b56	; 0x2b56 <xTaskCreate>
	,  configMINIMAL_STACK_SIZE+200  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  xMessageBuffer
	,  lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
	
}
     c3e:	0f 91       	pop	r16
     c40:	ff 90       	pop	r15
     c42:	ef 90       	pop	r14
     c44:	08 95       	ret

00000c46 <lora_DownLinkHandler_task>:


	void lora_DownLinkHandler_task(MessageBufferHandle_t xMessageBuffer)
	{
     c46:	0f 93       	push	r16
     c48:	1f 93       	push	r17
     c4a:	cf 93       	push	r28
     c4c:	df 93       	push	r29
				
		//size_t xBytesReceived;
		//xBytesReceived = 
		xMessageBufferReceive(xMessageBuffer,(void*) &_downlink_payload,sizeof(lora_payload_t),portMAX_DELAY);
     c4e:	0f ef       	ldi	r16, 0xFF	; 255
     c50:	1f ef       	ldi	r17, 0xFF	; 255
     c52:	98 01       	movw	r18, r16
     c54:	46 e1       	ldi	r20, 0x16	; 22
     c56:	50 e0       	ldi	r21, 0x00	; 0
     c58:	6a ef       	ldi	r22, 0xFA	; 250
     c5a:	77 e0       	ldi	r23, 0x07	; 7
     c5c:	0e 94 5d 14 	call	0x28ba	; 0x28ba <xStreamBufferReceive>
		printf("PayLoad bytes are: %d, %d\n Payload lenght is %d\n", _downlink_payload.bytes[0] ,_downlink_payload.bytes[1],_downlink_payload.len);
     c60:	ca ef       	ldi	r28, 0xFA	; 250
     c62:	d7 e0       	ldi	r29, 0x07	; 7
     c64:	89 81       	ldd	r24, Y+1	; 0x01
     c66:	1f 92       	push	r1
     c68:	8f 93       	push	r24
     c6a:	8b 81       	ldd	r24, Y+3	; 0x03
     c6c:	1f 92       	push	r1
     c6e:	8f 93       	push	r24
     c70:	8a 81       	ldd	r24, Y+2	; 0x02
     c72:	1f 92       	push	r1
     c74:	8f 93       	push	r24
     c76:	8b ec       	ldi	r24, 0xCB	; 203
     c78:	92 e0       	ldi	r25, 0x02	; 2
     c7a:	9f 93       	push	r25
     c7c:	8f 93       	push	r24
     c7e:	0e 94 d6 31 	call	0x63ac	; 0x63ac <printf>
		
		//Two bytes eg. 44/33
		if(_downlink_payload.len==2)
     c82:	8d b7       	in	r24, 0x3d	; 61
     c84:	9e b7       	in	r25, 0x3e	; 62
     c86:	08 96       	adiw	r24, 0x08	; 8
     c88:	0f b6       	in	r0, 0x3f	; 63
     c8a:	f8 94       	cli
     c8c:	9e bf       	out	0x3e, r25	; 62
     c8e:	0f be       	out	0x3f, r0	; 63
     c90:	8d bf       	out	0x3d, r24	; 61
     c92:	89 81       	ldd	r24, Y+1	; 0x01
     c94:	82 30       	cpi	r24, 0x02	; 2
     c96:	09 f0       	breq	.+2      	; 0xc9a <lora_DownLinkHandler_task+0x54>
     c98:	64 c0       	rjmp	.+200    	; 0xd62 <lora_DownLinkHandler_task+0x11c>
		{
			uint8_t command = _downlink_payload.bytes[0] + _downlink_payload.bytes[1];
     c9a:	fe 01       	movw	r30, r28
     c9c:	ca 81       	ldd	r28, Y+2	; 0x02
     c9e:	83 81       	ldd	r24, Z+3	; 0x03
     ca0:	c8 0f       	add	r28, r24
			bool* value = pvPortMalloc(sizeof(bool));
     ca2:	81 e0       	ldi	r24, 0x01	; 1
     ca4:	90 e0       	ldi	r25, 0x00	; 0
     ca6:	18 d5       	rcall	.+2608   	; 0x16d8 <pvPortMalloc>
     ca8:	8c 01       	movw	r16, r24
			
		
			switch(command)
     caa:	c5 37       	cpi	r28, 0x75	; 117
     cac:	e9 f0       	breq	.+58     	; 0xce8 <lora_DownLinkHandler_task+0xa2>
     cae:	18 f4       	brcc	.+6      	; 0xcb6 <lora_DownLinkHandler_task+0x70>
     cb0:	c4 37       	cpi	r28, 0x74	; 116
     cb2:	39 f0       	breq	.+14     	; 0xcc2 <lora_DownLinkHandler_task+0x7c>
     cb4:	52 c0       	rjmp	.+164    	; 0xd5a <lora_DownLinkHandler_task+0x114>
     cb6:	c6 38       	cpi	r28, 0x86	; 134
     cb8:	51 f1       	breq	.+84     	; 0xd0e <lora_DownLinkHandler_task+0xc8>
     cba:	c7 38       	cpi	r28, 0x87	; 135
     cbc:	09 f4       	brne	.+2      	; 0xcc0 <lora_DownLinkHandler_task+0x7a>
     cbe:	3a c0       	rjmp	.+116    	; 0xd34 <lora_DownLinkHandler_task+0xee>
     cc0:	4c c0       	rjmp	.+152    	; 0xd5a <lora_DownLinkHandler_task+0x114>
			{
			//D0
			case 0x74:
				configuration_setWorking(false);
     cc2:	80 e0       	ldi	r24, 0x00	; 0
     cc4:	ec dc       	rcall	.-1576   	; 0x69e <configuration_setWorking>
				configuration_getWorking(value);
     cc6:	c8 01       	movw	r24, r16
     cc8:	0e dd       	rcall	.-1508   	; 0x6e6 <configuration_getWorking>
     cca:	f8 01       	movw	r30, r16
				printf("The bool for device is set to %d\n",*value);
     ccc:	80 81       	ld	r24, Z
     cce:	1f 92       	push	r1
     cd0:	8f 93       	push	r24
     cd2:	8c ef       	ldi	r24, 0xFC	; 252
     cd4:	92 e0       	ldi	r25, 0x02	; 2
     cd6:	9f 93       	push	r25
     cd8:	8f 93       	push	r24
     cda:	0e 94 d6 31 	call	0x63ac	; 0x63ac <printf>
     cde:	0f 90       	pop	r0
				break;
     ce0:	0f 90       	pop	r0
     ce2:	0f 90       	pop	r0
     ce4:	0f 90       	pop	r0
     ce6:	3d c0       	rjmp	.+122    	; 0xd62 <lora_DownLinkHandler_task+0x11c>
			//D1
			case 0x75 :
				configuration_setWorking(true);
     ce8:	81 e0       	ldi	r24, 0x01	; 1
     cea:	d9 dc       	rcall	.-1614   	; 0x69e <configuration_setWorking>
				configuration_getWorking(value);
     cec:	c8 01       	movw	r24, r16
     cee:	fb dc       	rcall	.-1546   	; 0x6e6 <configuration_getWorking>
     cf0:	f8 01       	movw	r30, r16
				printf("The bool for device is set to %d\n",*value);
     cf2:	80 81       	ld	r24, Z
     cf4:	1f 92       	push	r1
     cf6:	8f 93       	push	r24
     cf8:	8c ef       	ldi	r24, 0xFC	; 252
     cfa:	92 e0       	ldi	r25, 0x02	; 2
     cfc:	9f 93       	push	r25
     cfe:	8f 93       	push	r24
     d00:	0e 94 d6 31 	call	0x63ac	; 0x63ac <printf>
     d04:	0f 90       	pop	r0
				break;
     d06:	0f 90       	pop	r0
     d08:	0f 90       	pop	r0
     d0a:	0f 90       	pop	r0
			//V0
			case 0x86:
				configuration_setVentilation(false);
     d0c:	2a c0       	rjmp	.+84     	; 0xd62 <lora_DownLinkHandler_task+0x11c>
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	13 dd       	rcall	.-1498   	; 0x738 <configuration_setVentilation>
				configuration_getVentilation(value);
     d12:	c8 01       	movw	r24, r16
     d14:	35 dd       	rcall	.-1430   	; 0x780 <configuration_getVentilation>
     d16:	f8 01       	movw	r30, r16
				printf("The bool for ventilation is set to %d\n",*value);
     d18:	80 81       	ld	r24, Z
     d1a:	1f 92       	push	r1
     d1c:	8f 93       	push	r24
     d1e:	8e e1       	ldi	r24, 0x1E	; 30
     d20:	93 e0       	ldi	r25, 0x03	; 3
     d22:	9f 93       	push	r25
     d24:	8f 93       	push	r24
     d26:	0e 94 d6 31 	call	0x63ac	; 0x63ac <printf>
			break;
     d2a:	0f 90       	pop	r0
     d2c:	0f 90       	pop	r0
     d2e:	0f 90       	pop	r0
     d30:	0f 90       	pop	r0
			//V1
			case 0x87:
				configuration_setVentilation(true);
     d32:	17 c0       	rjmp	.+46     	; 0xd62 <lora_DownLinkHandler_task+0x11c>
     d34:	81 e0       	ldi	r24, 0x01	; 1
     d36:	00 dd       	rcall	.-1536   	; 0x738 <configuration_setVentilation>
				configuration_getVentilation(value);
     d38:	c8 01       	movw	r24, r16
     d3a:	22 dd       	rcall	.-1468   	; 0x780 <configuration_getVentilation>
     d3c:	f8 01       	movw	r30, r16
				printf("The bool for ventilation is set to %d\n",*value);
     d3e:	80 81       	ld	r24, Z
     d40:	1f 92       	push	r1
     d42:	8f 93       	push	r24
     d44:	8e e1       	ldi	r24, 0x1E	; 30
     d46:	93 e0       	ldi	r25, 0x03	; 3
     d48:	9f 93       	push	r25
     d4a:	8f 93       	push	r24
     d4c:	0e 94 d6 31 	call	0x63ac	; 0x63ac <printf>
     d50:	0f 90       	pop	r0
				break;
     d52:	0f 90       	pop	r0
     d54:	0f 90       	pop	r0
     d56:	0f 90       	pop	r0
     d58:	04 c0       	rjmp	.+8      	; 0xd62 <lora_DownLinkHandler_task+0x11c>
     d5a:	85 e4       	ldi	r24, 0x45	; 69
			default:
				printf("Invalid command\n");
     d5c:	93 e0       	ldi	r25, 0x03	; 3
     d5e:	0e 94 e9 31 	call	0x63d2	; 0x63d2 <puts>
     d62:	df 91       	pop	r29
				break;
		}
	}
						
}
     d64:	cf 91       	pop	r28
     d66:	1f 91       	pop	r17
     d68:	0f 91       	pop	r16
     d6a:	08 95       	ret

00000d6c <lora_DownLinkHandler_startTask>:
     d6c:	ec 01       	movw	r28, r24
//int16_t temperature_setting; // Temperature

void lora_DownLinkHandler_startTask(void* xMessageBuffer){
	for(;;)
	{
		lora_DownLinkHandler_task((MessageBufferHandle_t)xMessageBuffer);
     d6e:	ce 01       	movw	r24, r28
     d70:	6a df       	rcall	.-300    	; 0xc46 <lora_DownLinkHandler_task>
     d72:	fd cf       	rjmp	.-6      	; 0xd6e <lora_DownLinkHandler_startTask+0x2>

00000d74 <humAndTempReader_create>:
		return;

	//delete will clear the allocated memory to the task + we need to remove everything else
	vTaskDelete(self->handleTask);
	free(self);
}
     d74:	2f 92       	push	r2
     d76:	3f 92       	push	r3
     d78:	4f 92       	push	r4
     d7a:	5f 92       	push	r5
     d7c:	6f 92       	push	r6
     d7e:	7f 92       	push	r7
     d80:	8f 92       	push	r8
     d82:	9f 92       	push	r9
     d84:	af 92       	push	r10
     d86:	bf 92       	push	r11
     d88:	cf 92       	push	r12
     d8a:	df 92       	push	r13
     d8c:	ef 92       	push	r14
     d8e:	ff 92       	push	r15
     d90:	0f 93       	push	r16
     d92:	1f 93       	push	r17
     d94:	cf 93       	push	r28
     d96:	df 93       	push	r29
     d98:	88 2e       	mov	r8, r24
     d9a:	96 2e       	mov	r9, r22
     d9c:	1a 01       	movw	r2, r20
     d9e:	28 01       	movw	r4, r16
     da0:	39 01       	movw	r6, r18
     da2:	66 e0       	ldi	r22, 0x06	; 6
     da4:	70 e0       	ldi	r23, 0x00	; 0
     da6:	81 e0       	ldi	r24, 0x01	; 1
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	0e 94 e3 2f 	call	0x5fc6	; 0x5fc6 <calloc>
     dae:	ec 01       	movw	r28, r24
     db0:	00 97       	sbiw	r24, 0x00	; 0
     db2:	61 f1       	breq	.+88     	; 0xe0c <humAndTempReader_create+0x98>
     db4:	19 82       	std	Y+1, r1	; 0x01
     db6:	18 82       	st	Y, r1
     db8:	1b 82       	std	Y+3, r1	; 0x03
     dba:	1a 82       	std	Y+2, r1	; 0x02
     dbc:	30 92 1b 08 	sts	0x081B, r3	; 0x80081b <_startMeasureEventGroup+0x1>
     dc0:	20 92 1a 08 	sts	0x081A, r2	; 0x80081a <_startMeasureEventGroup>
     dc4:	40 92 16 08 	sts	0x0816, r4	; 0x800816 <_startMeasureBit>
     dc8:	50 92 17 08 	sts	0x0817, r5	; 0x800817 <_startMeasureBit+0x1>
     dcc:	60 92 18 08 	sts	0x0818, r6	; 0x800818 <_startMeasureBit+0x2>
     dd0:	70 92 19 08 	sts	0x0819, r7	; 0x800819 <_startMeasureBit+0x3>
     dd4:	f0 92 15 08 	sts	0x0815, r15	; 0x800815 <_readyEventGroup+0x1>
     dd8:	e0 92 14 08 	sts	0x0814, r14	; 0x800814 <_readyEventGroup>
     ddc:	a0 92 10 08 	sts	0x0810, r10	; 0x800810 <_readyBit>
     de0:	b0 92 11 08 	sts	0x0811, r11	; 0x800811 <_readyBit+0x1>
     de4:	c0 92 12 08 	sts	0x0812, r12	; 0x800812 <_readyBit+0x2>
     de8:	d0 92 13 08 	sts	0x0813, r13	; 0x800813 <_readyBit+0x3>
     dec:	49 2d       	mov	r20, r9
     dee:	50 e0       	ldi	r21, 0x00	; 0
     df0:	48 53       	subi	r20, 0x38	; 56
     df2:	5f 4f       	sbci	r21, 0xFF	; 255
     df4:	7c 01       	movw	r14, r24
     df6:	84 e0       	ldi	r24, 0x04	; 4
     df8:	e8 0e       	add	r14, r24
     dfa:	f1 1c       	adc	r15, r1
     dfc:	08 2d       	mov	r16, r8
     dfe:	9e 01       	movw	r18, r28
     e00:	65 e5       	ldi	r22, 0x55	; 85
     e02:	73 e0       	ldi	r23, 0x03	; 3
     e04:	81 e8       	ldi	r24, 0x81	; 129
     e06:	97 e0       	ldi	r25, 0x07	; 7
     e08:	0e 94 ab 15 	call	0x2b56	; 0x2b56 <xTaskCreate>
     e0c:	ce 01       	movw	r24, r28
     e0e:	df 91       	pop	r29
     e10:	cf 91       	pop	r28
     e12:	1f 91       	pop	r17
     e14:	0f 91       	pop	r16
     e16:	ff 90       	pop	r15
     e18:	ef 90       	pop	r14
     e1a:	df 90       	pop	r13
     e1c:	cf 90       	pop	r12
     e1e:	bf 90       	pop	r11
     e20:	af 90       	pop	r10
     e22:	9f 90       	pop	r9
     e24:	8f 90       	pop	r8
     e26:	7f 90       	pop	r7
     e28:	6f 90       	pop	r6
     e2a:	5f 90       	pop	r5
     e2c:	4f 90       	pop	r4
     e2e:	3f 90       	pop	r3
     e30:	2f 90       	pop	r2
     e32:	08 95       	ret

00000e34 <humAndTempReader_measure>:



void humAndTempReader_measure(humAndTempReader_t self) {//dummy
     e34:	cf 92       	push	r12
     e36:	df 92       	push	r13
     e38:	ef 92       	push	r14
     e3a:	ff 92       	push	r15
     e3c:	0f 93       	push	r16
     e3e:	1f 93       	push	r17
     e40:	cf 93       	push	r28
     e42:	df 93       	push	r29
     e44:	ec 01       	movw	r28, r24
	EventBits_t uxBits = xEventGroupWaitBits(_startMeasureEventGroup, //eventGroup
     e46:	40 91 16 08 	lds	r20, 0x0816	; 0x800816 <_startMeasureBit>
     e4a:	50 91 17 08 	lds	r21, 0x0817	; 0x800817 <_startMeasureBit+0x1>
     e4e:	60 91 18 08 	lds	r22, 0x0818	; 0x800818 <_startMeasureBit+0x2>
     e52:	70 91 19 08 	lds	r23, 0x0819	; 0x800819 <_startMeasureBit+0x3>
     e56:	cc 24       	eor	r12, r12
     e58:	ca 94       	dec	r12
     e5a:	dc 2c       	mov	r13, r12
     e5c:	76 01       	movw	r14, r12
     e5e:	01 e0       	ldi	r16, 0x01	; 1
     e60:	21 e0       	ldi	r18, 0x01	; 1
     e62:	80 91 1a 08 	lds	r24, 0x081A	; 0x80081a <_startMeasureEventGroup>
     e66:	90 91 1b 08 	lds	r25, 0x081B	; 0x80081b <_startMeasureEventGroup+0x1>
     e6a:	90 d2       	rcall	.+1312   	; 0x138c <xEventGroupWaitBits>
	_startMeasureBit, //bits it is interested i
	pdTRUE, //clears the bits
	pdTRUE, //waits for both bits to be set
	portMAX_DELAY); //wait

	if ((uxBits & (_startMeasureBit)) == (_startMeasureBit)) {
     e6c:	00 91 16 08 	lds	r16, 0x0816	; 0x800816 <_startMeasureBit>
     e70:	10 91 17 08 	lds	r17, 0x0817	; 0x800817 <_startMeasureBit+0x1>
     e74:	20 91 18 08 	lds	r18, 0x0818	; 0x800818 <_startMeasureBit+0x2>
     e78:	30 91 19 08 	lds	r19, 0x0819	; 0x800819 <_startMeasureBit+0x3>
     e7c:	dc 01       	movw	r26, r24
     e7e:	cb 01       	movw	r24, r22
     e80:	80 23       	and	r24, r16
     e82:	91 23       	and	r25, r17
     e84:	a2 23       	and	r26, r18
     e86:	b3 23       	and	r27, r19
     e88:	08 17       	cp	r16, r24
     e8a:	19 07       	cpc	r17, r25
     e8c:	2a 07       	cpc	r18, r26
     e8e:	3b 07       	cpc	r19, r27
     e90:	79 f5       	brne	.+94     	; 0xef0 <humAndTempReader_measure+0xbc>
		hih8120Wakeup();
     e92:	0e 94 46 20 	call	0x408c	; 0x408c <hih8120Wakeup>
		vTaskDelay(50);
     e96:	62 e3       	ldi	r22, 0x32	; 50
     e98:	70 e0       	ldi	r23, 0x00	; 0
     e9a:	80 e0       	ldi	r24, 0x00	; 0
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	0e 94 6d 18 	call	0x30da	; 0x30da <vTaskDelay>
		hih8120Meassure();
     ea2:	0e 94 5b 20 	call	0x40b6	; 0x40b6 <hih8120Meassure>
		vTaskDelay(5);
     ea6:	65 e0       	ldi	r22, 0x05	; 5
     ea8:	70 e0       	ldi	r23, 0x00	; 0
     eaa:	80 e0       	ldi	r24, 0x00	; 0
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	0e 94 6d 18 	call	0x30da	; 0x30da <vTaskDelay>
		if(hih8120IsReady())
     eb2:	0e 94 43 20 	call	0x4086	; 0x4086 <hih8120IsReady>
     eb6:	88 23       	and	r24, r24
     eb8:	41 f0       	breq	.+16     	; 0xeca <humAndTempReader_measure+0x96>
		{
			self->humidity = hih8120GetHumidityPercent_x10();
     eba:	0e 94 81 20 	call	0x4102	; 0x4102 <hih8120GetHumidityPercent_x10>
     ebe:	99 83       	std	Y+1, r25	; 0x01
     ec0:	88 83       	st	Y, r24
			self->temperature = hih8120GetTemperature_x10();
     ec2:	0e 94 a7 20 	call	0x414e	; 0x414e <hih8120GetTemperature_x10>
     ec6:	9b 83       	std	Y+3, r25	; 0x03
     ec8:	8a 83       	std	Y+2, r24	; 0x02
			//printf("humidity and temperature done bit set\n");
		}
		
		vTaskDelay(1000);
     eca:	68 ee       	ldi	r22, 0xE8	; 232
     ecc:	73 e0       	ldi	r23, 0x03	; 3
     ece:	80 e0       	ldi	r24, 0x00	; 0
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	0e 94 6d 18 	call	0x30da	; 0x30da <vTaskDelay>
		//set done bit so that device knows meassurement is done
		xEventGroupSetBits(_readyEventGroup, _readyBit);
     ed6:	40 91 10 08 	lds	r20, 0x0810	; 0x800810 <_readyBit>
     eda:	50 91 11 08 	lds	r21, 0x0811	; 0x800811 <_readyBit+0x1>
     ede:	60 91 12 08 	lds	r22, 0x0812	; 0x800812 <_readyBit+0x2>
     ee2:	70 91 13 08 	lds	r23, 0x0813	; 0x800813 <_readyBit+0x3>
     ee6:	80 91 14 08 	lds	r24, 0x0814	; 0x800814 <_readyEventGroup>
     eea:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <_readyEventGroup+0x1>
     eee:	0e d3       	rcall	.+1564   	; 0x150c <xEventGroupSetBits>
	}
}
     ef0:	df 91       	pop	r29
     ef2:	cf 91       	pop	r28
     ef4:	1f 91       	pop	r17
     ef6:	0f 91       	pop	r16
     ef8:	ff 90       	pop	r15
     efa:	ef 90       	pop	r14
     efc:	df 90       	pop	r13
     efe:	cf 90       	pop	r12
     f00:	08 95       	ret

00000f02 <humAndTempReader_executeTask>:
	int16_t temperature;
	TaskHandle_t handleTask;
}humidityAndTemperature;

//actual task, methods devided so that it is possible to test
void humAndTempReader_executeTask(void* self) {
     f02:	ec 01       	movw	r28, r24
	for (;;) {
		humAndTempReader_measure((humAndTempReader_t)self);
     f04:	ce 01       	movw	r24, r28
     f06:	96 df       	rcall	.-212    	; 0xe34 <humAndTempReader_measure>
     f08:	fd cf       	rjmp	.-6      	; 0xf04 <humAndTempReader_executeTask+0x2>

00000f0a <humAndTempReader_getHumidity>:
	}
}

uint16_t humAndTempReader_getHumidity(humAndTempReader_t self){
	return self->humidity;
}
     f0a:	fc 01       	movw	r30, r24
     f0c:	80 81       	ld	r24, Z
     f0e:	91 81       	ldd	r25, Z+1	; 0x01
     f10:	08 95       	ret

00000f12 <humAndTempReader_getTemperature>:

int16_t humAndTempReader_getTemperature(humAndTempReader_t self){
	return self->temperature;
}
     f12:	fc 01       	movw	r30, r24
     f14:	82 81       	ldd	r24, Z+2	; 0x02
     f16:	93 81       	ldd	r25, Z+3	; 0x03
     f18:	08 95       	ret

00000f1a <servo_initialise>:
#include "Servo.h"


void servo_initialise()
{
	rcServoCreate();		
     f1a:	0c 94 07 28 	jmp	0x500e	; 0x500e <rcServoCreate>
     f1e:	08 95       	ret

00000f20 <servo_open>:
	//printf("Servo is up\n");
}

void servo_open()
{
	rcServoSet(0, 100);
     f20:	64 e6       	ldi	r22, 0x64	; 100
     f22:	80 e0       	ldi	r24, 0x00	; 0
     f24:	0c 94 ef 27 	jmp	0x4fde	; 0x4fde <rcServoSet>
     f28:	08 95       	ret

00000f2a <servo_close>:
}
void servo_close()
{
	rcServoSet(0, -100);
     f2a:	6c e9       	ldi	r22, 0x9C	; 156
     f2c:	80 e0       	ldi	r24, 0x00	; 0
     f2e:	0c 94 ef 27 	jmp	0x4fde	; 0x4fde <rcServoSet>
     f32:	08 95       	ret

00000f34 <soundReader_create>:
}



//	RETURN TO DESTROY METHODS
void soundReader_destroy(soundReader_t self) {
     f34:	2f 92       	push	r2
     f36:	3f 92       	push	r3
     f38:	4f 92       	push	r4
     f3a:	5f 92       	push	r5
     f3c:	6f 92       	push	r6
     f3e:	7f 92       	push	r7
     f40:	8f 92       	push	r8
     f42:	9f 92       	push	r9
     f44:	af 92       	push	r10
     f46:	bf 92       	push	r11
     f48:	cf 92       	push	r12
     f4a:	df 92       	push	r13
     f4c:	ef 92       	push	r14
     f4e:	ff 92       	push	r15
     f50:	0f 93       	push	r16
     f52:	1f 93       	push	r17
     f54:	cf 93       	push	r28
     f56:	df 93       	push	r29
     f58:	88 2e       	mov	r8, r24
     f5a:	96 2e       	mov	r9, r22
     f5c:	1a 01       	movw	r2, r20
     f5e:	28 01       	movw	r4, r16
     f60:	39 01       	movw	r6, r18
     f62:	64 e0       	ldi	r22, 0x04	; 4
     f64:	70 e0       	ldi	r23, 0x00	; 0
     f66:	81 e0       	ldi	r24, 0x01	; 1
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	0e 94 e3 2f 	call	0x5fc6	; 0x5fc6 <calloc>
     f6e:	ec 01       	movw	r28, r24
     f70:	00 97       	sbiw	r24, 0x00	; 0
     f72:	61 f1       	breq	.+88     	; 0xfcc <soundReader_create+0x98>
     f74:	fc 01       	movw	r30, r24
     f76:	11 92       	st	Z+, r1
     f78:	11 92       	st	Z+, r1
     f7a:	30 92 27 08 	sts	0x0827, r3	; 0x800827 <_startMeasureEventGroup+0x1>
     f7e:	20 92 26 08 	sts	0x0826, r2	; 0x800826 <_startMeasureEventGroup>
     f82:	40 92 22 08 	sts	0x0822, r4	; 0x800822 <_startMeasureBit>
     f86:	50 92 23 08 	sts	0x0823, r5	; 0x800823 <_startMeasureBit+0x1>
     f8a:	60 92 24 08 	sts	0x0824, r6	; 0x800824 <_startMeasureBit+0x2>
     f8e:	70 92 25 08 	sts	0x0825, r7	; 0x800825 <_startMeasureBit+0x3>
     f92:	f0 92 21 08 	sts	0x0821, r15	; 0x800821 <_readyEventGroup+0x1>
     f96:	e0 92 20 08 	sts	0x0820, r14	; 0x800820 <_readyEventGroup>
     f9a:	a0 92 1c 08 	sts	0x081C, r10	; 0x80081c <_readyBit>
     f9e:	b0 92 1d 08 	sts	0x081D, r11	; 0x80081d <_readyBit+0x1>
     fa2:	c0 92 1e 08 	sts	0x081E, r12	; 0x80081e <_readyBit+0x2>
     fa6:	d0 92 1f 08 	sts	0x081F, r13	; 0x80081f <_readyBit+0x3>
     faa:	49 2d       	mov	r20, r9
     fac:	50 e0       	ldi	r21, 0x00	; 0
     fae:	48 53       	subi	r20, 0x38	; 56
     fb0:	5f 4f       	sbci	r21, 0xFF	; 255
     fb2:	7f 01       	movw	r14, r30
     fb4:	08 2d       	mov	r16, r8
     fb6:	9c 01       	movw	r18, r24
     fb8:	66 e6       	ldi	r22, 0x66	; 102
     fba:	73 e0       	ldi	r23, 0x03	; 3
     fbc:	8e e4       	ldi	r24, 0x4E	; 78
     fbe:	98 e0       	ldi	r25, 0x08	; 8
     fc0:	0e 94 ab 15 	call	0x2b56	; 0x2b56 <xTaskCreate>
     fc4:	82 e7       	ldi	r24, 0x72	; 114
     fc6:	93 e0       	ldi	r25, 0x03	; 3
     fc8:	0e 94 e9 31 	call	0x63d2	; 0x63d2 <puts>
     fcc:	ce 01       	movw	r24, r28
     fce:	df 91       	pop	r29
     fd0:	cf 91       	pop	r28
     fd2:	1f 91       	pop	r17
     fd4:	0f 91       	pop	r16
     fd6:	ff 90       	pop	r15
     fd8:	ef 90       	pop	r14
     fda:	df 90       	pop	r13
     fdc:	cf 90       	pop	r12
     fde:	bf 90       	pop	r11
     fe0:	af 90       	pop	r10
     fe2:	9f 90       	pop	r9
     fe4:	8f 90       	pop	r8
     fe6:	7f 90       	pop	r7
     fe8:	6f 90       	pop	r6
     fea:	5f 90       	pop	r5
     fec:	4f 90       	pop	r4
     fee:	3f 90       	pop	r3
     ff0:	2f 90       	pop	r2
     ff2:	08 95       	ret

00000ff4 <soundReader_measure>:
}

//actual task, methods devided so that it is possible to test


void soundReader_measure(soundReader_t self) {
     ff4:	cf 92       	push	r12
     ff6:	df 92       	push	r13
     ff8:	ef 92       	push	r14
     ffa:	ff 92       	push	r15
     ffc:	0f 93       	push	r16
     ffe:	1f 93       	push	r17
    1000:	cf 93       	push	r28
    1002:	df 93       	push	r29
    1004:	ec 01       	movw	r28, r24
	
	EventBits_t uxBits = xEventGroupWaitBits(_startMeasureEventGroup, //eventGroup
    1006:	40 91 22 08 	lds	r20, 0x0822	; 0x800822 <_startMeasureBit>
    100a:	50 91 23 08 	lds	r21, 0x0823	; 0x800823 <_startMeasureBit+0x1>
    100e:	60 91 24 08 	lds	r22, 0x0824	; 0x800824 <_startMeasureBit+0x2>
    1012:	70 91 25 08 	lds	r23, 0x0825	; 0x800825 <_startMeasureBit+0x3>
    1016:	cc 24       	eor	r12, r12
    1018:	ca 94       	dec	r12
    101a:	dc 2c       	mov	r13, r12
    101c:	76 01       	movw	r14, r12
    101e:	01 e0       	ldi	r16, 0x01	; 1
    1020:	21 e0       	ldi	r18, 0x01	; 1
    1022:	80 91 26 08 	lds	r24, 0x0826	; 0x800826 <_startMeasureEventGroup>
    1026:	90 91 27 08 	lds	r25, 0x0827	; 0x800827 <_startMeasureEventGroup+0x1>
    102a:	b0 d1       	rcall	.+864    	; 0x138c <xEventGroupWaitBits>
	_startMeasureBit, //bits it is interested in
	pdTRUE, //clears the bits
	pdTRUE, //waits for both bits to be set
	portMAX_DELAY); //wait

	if ((uxBits & (_startMeasureBit)) == (_startMeasureBit)) {
    102c:	00 91 22 08 	lds	r16, 0x0822	; 0x800822 <_startMeasureBit>
    1030:	10 91 23 08 	lds	r17, 0x0823	; 0x800823 <_startMeasureBit+0x1>
    1034:	20 91 24 08 	lds	r18, 0x0824	; 0x800824 <_startMeasureBit+0x2>
    1038:	30 91 25 08 	lds	r19, 0x0825	; 0x800825 <_startMeasureBit+0x3>
    103c:	dc 01       	movw	r26, r24
    103e:	cb 01       	movw	r24, r22
    1040:	80 23       	and	r24, r16
    1042:	91 23       	and	r25, r17
    1044:	a2 23       	and	r26, r18
    1046:	b3 23       	and	r27, r19
    1048:	08 17       	cp	r16, r24
    104a:	19 07       	cpc	r17, r25
    104c:	2a 07       	cpc	r18, r26
    104e:	3b 07       	cpc	r19, r27
    1050:	e1 f4       	brne	.+56     	; 0x108a <soundReader_measure+0x96>

		
		srand(time(NULL));
    1052:	80 e0       	ldi	r24, 0x00	; 0
    1054:	90 e0       	ldi	r25, 0x00	; 0
    1056:	47 da       	rcall	.-2930   	; 0x4e6 <time>
    1058:	cb 01       	movw	r24, r22
    105a:	0e 94 68 31 	call	0x62d0	; 0x62d0 <srand>
		self->value = rand()%105 + 15;
    105e:	0e 94 65 31 	call	0x62ca	; 0x62ca <rand>
    1062:	69 e6       	ldi	r22, 0x69	; 105
    1064:	70 e0       	ldi	r23, 0x00	; 0
    1066:	0e 94 92 2f 	call	0x5f24	; 0x5f24 <__divmodhi4>
    106a:	0f 96       	adiw	r24, 0x0f	; 15
    106c:	99 83       	std	Y+1, r25	; 0x01
    106e:	88 83       	st	Y, r24
		
		
		//set done bit so that device knows measurement is done
		xEventGroupSetBits(_readyEventGroup, _readyBit);
    1070:	40 91 1c 08 	lds	r20, 0x081C	; 0x80081c <_readyBit>
    1074:	50 91 1d 08 	lds	r21, 0x081D	; 0x80081d <_readyBit+0x1>
    1078:	60 91 1e 08 	lds	r22, 0x081E	; 0x80081e <_readyBit+0x2>
    107c:	70 91 1f 08 	lds	r23, 0x081F	; 0x80081f <_readyBit+0x3>
    1080:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <_readyEventGroup>
    1084:	90 91 21 08 	lds	r25, 0x0821	; 0x800821 <_readyEventGroup+0x1>
    1088:	41 d2       	rcall	.+1154   	; 0x150c <xEventGroupSetBits>
		//printf("SoundReader done bit set\n");
	}
}
    108a:	df 91       	pop	r29
    108c:	cf 91       	pop	r28
    108e:	1f 91       	pop	r17
    1090:	0f 91       	pop	r16
    1092:	ff 90       	pop	r15
    1094:	ef 90       	pop	r14
    1096:	df 90       	pop	r13
    1098:	cf 90       	pop	r12
    109a:	08 95       	ret

0000109c <soundReader_executeTask>:
	TaskHandle_t handleTask;
}soundReader;



void soundReader_executeTask(void* self) {
    109c:	ec 01       	movw	r28, r24
	for (;;) {
		soundReader_measure((soundReader_t)self);
    109e:	ce 01       	movw	r24, r28
    10a0:	a9 df       	rcall	.-174    	; 0xff4 <soundReader_measure>
    10a2:	fd cf       	rjmp	.-6      	; 0x109e <soundReader_executeTask+0x2>

000010a4 <soundReader_getSound>:
	}
}

uint16_t soundReader_getSound(soundReader_t self) {
	return self->value;
}
    10a4:	fc 01       	movw	r30, r24
    10a6:	80 81       	ld	r24, Z
    10a8:	91 81       	ldd	r25, Z+1	; 0x01
    10aa:	08 95       	ret

000010ac <lora_UpLinkHandler_create>:
	}
}


void lora_UpLinkHandler_create(UBaseType_t lora_handler_task_priority, MessageBufferHandle_t xMessageBuffer, EventGroupHandle_t waitEventGroup, EventBits_t deviceBit)
{
    10ac:	ef 92       	push	r14
    10ae:	ff 92       	push	r15
    10b0:	0f 93       	push	r16
    10b2:	1f 93       	push	r17
	_buffer = xMessageBuffer;
	_waitEventGroup = waitEventGroup;
    10b4:	50 93 2d 08 	sts	0x082D, r21	; 0x80082d <_waitEventGroup+0x1>
    10b8:	40 93 2c 08 	sts	0x082C, r20	; 0x80082c <_waitEventGroup>
	_deviceBit = deviceBit;
    10bc:	00 93 28 08 	sts	0x0828, r16	; 0x800828 <_deviceBit>
    10c0:	10 93 29 08 	sts	0x0829, r17	; 0x800829 <_deviceBit+0x1>
    10c4:	20 93 2a 08 	sts	0x082A, r18	; 0x80082a <_deviceBit+0x2>
    10c8:	30 93 2b 08 	sts	0x082B, r19	; 0x80082b <_deviceBit+0x3>
	
	xTaskCreate(
    10cc:	e1 2c       	mov	r14, r1
    10ce:	f1 2c       	mov	r15, r1
    10d0:	08 2f       	mov	r16, r24
    10d2:	9b 01       	movw	r18, r22
    10d4:	48 e8       	ldi	r20, 0x88	; 136
    10d6:	51 e0       	ldi	r21, 0x01	; 1
    10d8:	61 e8       	ldi	r22, 0x81	; 129
    10da:	73 e0       	ldi	r23, 0x03	; 3
    10dc:	8f e9       	ldi	r24, 0x9F	; 159
    10de:	99 e0       	ldi	r25, 0x09	; 9
    10e0:	0e 94 ab 15 	call	0x2b56	; 0x2b56 <xTaskCreate>
	,  (const portCHAR *)"LRUpHand"  // A name just for humans
	,  configMINIMAL_STACK_SIZE+200  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  xMessageBuffer
	,  lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}
    10e4:	1f 91       	pop	r17
    10e6:	0f 91       	pop	r16
    10e8:	ff 90       	pop	r15
    10ea:	ef 90       	pop	r14
    10ec:	08 95       	ret

000010ee <lora_UpLinkHandler_task>:
	
	/*Receives message from message buffer shared between it and the application responsible for gathering the data
	--> Should be called every 5 minutes from application
	*/
	void lora_UpLinkHandler_task(MessageBufferHandle_t xMessageBuffer)
	{	
    10ee:	df 92       	push	r13
    10f0:	ef 92       	push	r14
    10f2:	ff 92       	push	r15
    10f4:	0f 93       	push	r16
    10f6:	1f 93       	push	r17
    10f8:	cf 93       	push	r28
    10fa:	df 93       	push	r29
    10fc:	7c 01       	movw	r14, r24
		size_t xBytesToSend;
		char rxData[50];
		if (!isSet)
    10fe:	80 91 2e 08 	lds	r24, 0x082E	; 0x80082e <isSet>
    1102:	81 11       	cpse	r24, r1
    1104:	d0 c0       	rjmp	.+416    	; 0x12a6 <lora_UpLinkHandler_task+0x1b8>
		{
			// Hardware reset of LoRaWAN transceiver
			lora_driver_reset_rn2483(1);
    1106:	81 e0       	ldi	r24, 0x01	; 1
    1108:	0e 94 c7 23 	call	0x478e	; 0x478e <lora_driver_reset_rn2483>
			vTaskDelay(2);
    110c:	62 e0       	ldi	r22, 0x02	; 2
    110e:	70 e0       	ldi	r23, 0x00	; 0
    1110:	80 e0       	ldi	r24, 0x00	; 0
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	0e 94 6d 18 	call	0x30da	; 0x30da <vTaskDelay>
			lora_driver_reset_rn2483(0);
    1118:	80 e0       	ldi	r24, 0x00	; 0
    111a:	0e 94 c7 23 	call	0x478e	; 0x478e <lora_driver_reset_rn2483>
			// Give it a chance to wakeup
			vTaskDelay(150);
    111e:	66 e9       	ldi	r22, 0x96	; 150
    1120:	70 e0       	ldi	r23, 0x00	; 0
    1122:	80 e0       	ldi	r24, 0x00	; 0
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	0e 94 6d 18 	call	0x30da	; 0x30da <vTaskDelay>

			lora_driver_flush_buffers(); // get rid of first version string from module after reset!
    112a:	0e 94 7d 23 	call	0x46fa	; 0x46fa <lora_driver_flush_buffers>


static void _lora_setup(void)
{
	e_LoRa_return_code_t rc;
	led_slow_blink(led_ST2); // OPTIONAL: Led the green led blink slowly while we are setting up LoRa
    112e:	81 e0       	ldi	r24, 0x01	; 1
    1130:	0e 94 d5 21 	call	0x43aa	; 0x43aa <led_slow_blink>
	//The below code is required to be executed only once due to the fact that these MAC settings
	// can be stored inside of the tranciever
	//START ON ONE TIME USE CODE

	// Factory reset the transceiver
	printf("FactoryReset >%s<\n", lora_driver_map_return_code_to_text(lora_driver_rn2483_factory_reset()));
    1134:	0e 94 db 23 	call	0x47b6	; 0x47b6 <lora_driver_rn2483_factory_reset>
    1138:	0e 94 58 26 	call	0x4cb0	; 0x4cb0 <lora_driver_map_return_code_to_text>
    113c:	9f 93       	push	r25
    113e:	8f 93       	push	r24
    1140:	8a e8       	ldi	r24, 0x8A	; 138
    1142:	93 e0       	ldi	r25, 0x03	; 3
    1144:	9f 93       	push	r25
    1146:	8f 93       	push	r24
    1148:	0e 94 d6 31 	call	0x63ac	; 0x63ac <printf>
	
	// Configure to EU868 LoRaWAN standards
	printf("Configure to EU868 >%s<\n", lora_driver_map_return_code_to_text(lora_driver_configure_to_eu868()));
    114c:	0e 94 59 25 	call	0x4ab2	; 0x4ab2 <lora_driver_configure_to_eu868>
    1150:	0e 94 58 26 	call	0x4cb0	; 0x4cb0 <lora_driver_map_return_code_to_text>
    1154:	9f 93       	push	r25
    1156:	8f 93       	push	r24
    1158:	8d e9       	ldi	r24, 0x9D	; 157
    115a:	93 e0       	ldi	r25, 0x03	; 3
    115c:	9f 93       	push	r25
    115e:	8f 93       	push	r24
    1160:	0e 94 d6 31 	call	0x63ac	; 0x63ac <printf>

	// Get the transceivers HW EUI
	rc = lora_driver_get_rn2483_hweui(_out_buf);
    1164:	85 e4       	ldi	r24, 0x45	; 69
    1166:	98 e0       	ldi	r25, 0x08	; 8
    1168:	0e 94 ed 23 	call	0x47da	; 0x47da <lora_driver_get_rn2483_hweui>
	printf("Get HWEUI >%s<: %s\n",lora_driver_map_return_code_to_text(rc), _out_buf);
    116c:	0e 94 58 26 	call	0x4cb0	; 0x4cb0 <lora_driver_map_return_code_to_text>
    1170:	c5 e4       	ldi	r28, 0x45	; 69
    1172:	d8 e0       	ldi	r29, 0x08	; 8
    1174:	df 93       	push	r29
    1176:	cf 93       	push	r28
    1178:	9f 93       	push	r25
    117a:	8f 93       	push	r24
    117c:	86 eb       	ldi	r24, 0xB6	; 182
    117e:	93 e0       	ldi	r25, 0x03	; 3
    1180:	9f 93       	push	r25
    1182:	8f 93       	push	r24
    1184:	0e 94 d6 31 	call	0x63ac	; 0x63ac <printf>

	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_map_return_code_to_text(lora_driver_set_device_identifier(_out_buf)));
    1188:	ce 01       	movw	r24, r28
    118a:	0e 94 09 24 	call	0x4812	; 0x4812 <lora_driver_set_device_identifier>
    118e:	0e 94 58 26 	call	0x4cb0	; 0x4cb0 <lora_driver_map_return_code_to_text>
    1192:	9f 93       	push	r25
    1194:	8f 93       	push	r24
    1196:	df 93       	push	r29
    1198:	cf 93       	push	r28
    119a:	8a ec       	ldi	r24, 0xCA	; 202
    119c:	93 e0       	ldi	r25, 0x03	; 3
    119e:	9f 93       	push	r25
    11a0:	8f 93       	push	r24
    11a2:	0e 94 d6 31 	call	0x63ac	; 0x63ac <printf>

	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_map_return_code_to_text(lora_driver_set_otaa_identity(LORA_appEUI,LORA_appKEY,_out_buf)));
    11a6:	ae 01       	movw	r20, r28
    11a8:	6f ed       	ldi	r22, 0xDF	; 223
    11aa:	73 e0       	ldi	r23, 0x03	; 3
    11ac:	80 e0       	ldi	r24, 0x00	; 0
    11ae:	94 e0       	ldi	r25, 0x04	; 4
    11b0:	0e 94 37 26 	call	0x4c6e	; 0x4c6e <lora_driver_set_otaa_identity>
    11b4:	0e 94 58 26 	call	0x4cb0	; 0x4cb0 <lora_driver_map_return_code_to_text>
    11b8:	9f 93       	push	r25
    11ba:	8f 93       	push	r24
    11bc:	df 93       	push	r29
    11be:	cf 93       	push	r28
    11c0:	8f ed       	ldi	r24, 0xDF	; 223
    11c2:	93 e0       	ldi	r25, 0x03	; 3
    11c4:	9f 93       	push	r25
    11c6:	8f 93       	push	r24
    11c8:	80 e0       	ldi	r24, 0x00	; 0
    11ca:	94 e0       	ldi	r25, 0x04	; 4
    11cc:	9f 93       	push	r25
    11ce:	8f 93       	push	r24
    11d0:	81 e1       	ldi	r24, 0x11	; 17
    11d2:	94 e0       	ldi	r25, 0x04	; 4
    11d4:	9f 93       	push	r25
    11d6:	8f 93       	push	r24
    11d8:	0e 94 d6 31 	call	0x63ac	; 0x63ac <printf>

	// Save all the MAC settings in the transceiver
	printf("Save mac >%s<\n",lora_driver_map_return_code_to_text(lora_driver_save_mac()));
    11dc:	0e 94 3c 24 	call	0x4878	; 0x4878 <lora_driver_save_mac>
    11e0:	0e 94 58 26 	call	0x4cb0	; 0x4cb0 <lora_driver_map_return_code_to_text>
    11e4:	9f 93       	push	r25
    11e6:	8f 93       	push	r24
    11e8:	87 e4       	ldi	r24, 0x47	; 71
    11ea:	94 e0       	ldi	r25, 0x04	; 4
    11ec:	9f 93       	push	r25
    11ee:	8f 93       	push	r24
    11f0:	0e 94 d6 31 	call	0x63ac	; 0x63ac <printf>

	//END OF ONE TIME USE CODE
	
	
	// Enable Adaptive Data Rate
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_map_return_code_to_text(lora_driver_set_adaptive_data_rate(LoRa_ON)));
    11f4:	8d b7       	in	r24, 0x3d	; 61
    11f6:	9e b7       	in	r25, 0x3e	; 62
    11f8:	82 96       	adiw	r24, 0x22	; 34
    11fa:	0f b6       	in	r0, 0x3f	; 63
    11fc:	f8 94       	cli
    11fe:	9e bf       	out	0x3e, r25	; 62
    1200:	0f be       	out	0x3f, r0	; 63
    1202:	8d bf       	out	0x3d, r24	; 61
    1204:	81 e0       	ldi	r24, 0x01	; 1
    1206:	0e 94 36 25 	call	0x4a6c	; 0x4a6c <lora_driver_set_adaptive_data_rate>
    120a:	0e 94 58 26 	call	0x4cb0	; 0x4cb0 <lora_driver_map_return_code_to_text>
    120e:	9f 93       	push	r25
    1210:	8f 93       	push	r24
    1212:	86 e5       	ldi	r24, 0x56	; 86
    1214:	94 e0       	ldi	r25, 0x04	; 4
    1216:	9f 93       	push	r25
    1218:	8f 93       	push	r24
    121a:	0e 94 d6 31 	call	0x63ac	; 0x63ac <printf>

	// Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	printf("Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_map_return_code_to_text(lora_driver_set_receive_delay(500)));
    121e:	84 ef       	ldi	r24, 0xF4	; 244
    1220:	91 e0       	ldi	r25, 0x01	; 1
    1222:	0e 94 41 25 	call	0x4a82	; 0x4a82 <lora_driver_set_receive_delay>
    1226:	0e 94 58 26 	call	0x4cb0	; 0x4cb0 <lora_driver_map_return_code_to_text>
    122a:	9f 93       	push	r25
    122c:	8f 93       	push	r24
    122e:	81 e0       	ldi	r24, 0x01	; 1
    1230:	8f 93       	push	r24
    1232:	84 ef       	ldi	r24, 0xF4	; 244
    1234:	8f 93       	push	r24
    1236:	87 e7       	ldi	r24, 0x77	; 119
    1238:	94 e0       	ldi	r25, 0x04	; 4
    123a:	9f 93       	push	r25
    123c:	8f 93       	push	r24
    123e:	0e 94 d6 31 	call	0x63ac	; 0x63ac <printf>
    1242:	8d b7       	in	r24, 0x3d	; 61
    1244:	9e b7       	in	r25, 0x3e	; 62
    1246:	0a 96       	adiw	r24, 0x0a	; 10
    1248:	0f b6       	in	r0, 0x3f	; 63
    124a:	f8 94       	cli
    124c:	9e bf       	out	0x3e, r25	; 62
    124e:	0f be       	out	0x3f, r0	; 63
    1250:	8d bf       	out	0x3d, r24	; 61
    1252:	ca e0       	ldi	r28, 0x0A	; 10
    1254:	d0 e0       	ldi	r29, 0x00	; 0
	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
	
	do {
		rc = lora_driver_join(LoRa_OTAA);
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_map_return_code_to_text(rc));
    1256:	07 e9       	ldi	r16, 0x97	; 151
    1258:	14 e0       	ldi	r17, 0x04	; 4

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
	
	do {
		rc = lora_driver_join(LoRa_OTAA);
    125a:	80 e0       	ldi	r24, 0x00	; 0
    125c:	0e 94 42 24 	call	0x4884	; 0x4884 <lora_driver_join>
    1260:	d8 2e       	mov	r13, r24
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_map_return_code_to_text(rc));
    1262:	0e 94 58 26 	call	0x4cb0	; 0x4cb0 <lora_driver_map_return_code_to_text>
    1266:	9f 93       	push	r25
    1268:	8f 93       	push	r24
    126a:	df 93       	push	r29
    126c:	cf 93       	push	r28
    126e:	1f 93       	push	r17
    1270:	0f 93       	push	r16
    1272:	0e 94 d6 31 	call	0x63ac	; 0x63ac <printf>

		if ( rc != LoRa_ACCEPTED)
    1276:	0f 90       	pop	r0
    1278:	0f 90       	pop	r0
    127a:	0f 90       	pop	r0
    127c:	0f 90       	pop	r0
    127e:	0f 90       	pop	r0
    1280:	0f 90       	pop	r0
    1282:	88 e0       	ldi	r24, 0x08	; 8
    1284:	d8 16       	cp	r13, r24
    1286:	09 f4       	brne	.+2      	; 0x128a <lora_UpLinkHandler_task+0x19c>
    1288:	44 c0       	rjmp	.+136    	; 0x1312 <lora_UpLinkHandler_task+0x224>
		{
			// Make the red led pulse to tell something went wrong
			led_long_puls(led_ST1); // OPTIONAL
    128a:	80 e0       	ldi	r24, 0x00	; 0
    128c:	0e 94 41 22 	call	0x4482	; 0x4482 <led_long_puls>
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
    1290:	66 e3       	ldi	r22, 0x36	; 54
    1292:	71 e0       	ldi	r23, 0x01	; 1
    1294:	80 e0       	ldi	r24, 0x00	; 0
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	0e 94 6d 18 	call	0x30da	; 0x30da <vTaskDelay>
    129c:	21 97       	sbiw	r28, 0x01	; 1
		}
		else
		{
			break;
		}
	} while (--maxJoinTriesLeft);
    129e:	e9 f6       	brne	.-70     	; 0x125a <lora_UpLinkHandler_task+0x16c>
    12a0:	3f c0       	rjmp	.+126    	; 0x1320 <lora_UpLinkHandler_task+0x232>
		led_fast_blink(led_ST1); // OPTIONAL

		// Lets stay here
		while (1)
		{
			taskYIELD();
    12a2:	4c d4       	rcall	.+2200   	; 0x1b3c <vPortYield>
    12a4:	fe cf       	rjmp	.-4      	; 0x12a2 <lora_UpLinkHandler_task+0x1b4>
			isSet=true;
		}
		

		
		xBytesToSend = xMessageBufferReceive(xMessageBuffer, (void*) &_uplink_payload,
    12a6:	00 e0       	ldi	r16, 0x00	; 0
    12a8:	10 e0       	ldi	r17, 0x00	; 0
    12aa:	98 01       	movw	r18, r16
    12ac:	42 e3       	ldi	r20, 0x32	; 50
    12ae:	50 e0       	ldi	r21, 0x00	; 0
    12b0:	6f e2       	ldi	r22, 0x2F	; 47
    12b2:	78 e0       	ldi	r23, 0x08	; 8
    12b4:	c7 01       	movw	r24, r14
    12b6:	0e 94 5d 14 	call	0x28ba	; 0x28ba <xStreamBufferReceive>
		sizeof(rxData),0);
		if(xBytesToSend >= sizeof(uint8_t)*2)
    12ba:	02 97       	sbiw	r24, 0x02	; 2
    12bc:	c0 f1       	brcs	.+112    	; 0x132e <lora_UpLinkHandler_task+0x240>
			//_uplink_payload = (_uplink_payload) &rxData;
			
			/**< Status led ST4 (BLUE)*/
			//Makes the led light up in a short period.
			
			led_short_puls(led_ST4);
    12be:	83 e0       	ldi	r24, 0x03	; 3
    12c0:	0e 94 53 22 	call	0x44a6	; 0x44a6 <led_short_puls>
			//printf("The temperature2 in upLink is: %d\n", _uplink_payload.bytes[1]);
			//printf("The humidity in upLink is: %u\n", _uplink_payload.bytes[2]);
			//printf("The humidity2 in upLink is: %u\n", _uplink_payload.bytes[3]);
			
			
			printf("Upload Message >%s<\n", lora_driver_map_return_code_to_text(lora_driver_sent_upload_message(false, &_uplink_payload)));
    12c4:	6f e2       	ldi	r22, 0x2F	; 47
    12c6:	78 e0       	ldi	r23, 0x08	; 8
    12c8:	80 e0       	ldi	r24, 0x00	; 0
    12ca:	0e 94 6b 24 	call	0x48d6	; 0x48d6 <lora_driver_sent_upload_message>
    12ce:	0e 94 58 26 	call	0x4cb0	; 0x4cb0 <lora_driver_map_return_code_to_text>
    12d2:	9f 93       	push	r25
    12d4:	8f 93       	push	r24
    12d6:	87 eb       	ldi	r24, 0xB7	; 183
    12d8:	94 e0       	ldi	r25, 0x04	; 4
    12da:	9f 93       	push	r25
    12dc:	8f 93       	push	r24
    12de:	0e 94 d6 31 	call	0x63ac	; 0x63ac <printf>
			vTaskDelay(30000);
    12e2:	60 e3       	ldi	r22, 0x30	; 48
    12e4:	75 e7       	ldi	r23, 0x75	; 117
    12e6:	80 e0       	ldi	r24, 0x00	; 0
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	0e 94 6d 18 	call	0x30da	; 0x30da <vTaskDelay>
			xEventGroupSetBits(_waitEventGroup, _deviceBit);
    12ee:	40 91 28 08 	lds	r20, 0x0828	; 0x800828 <_deviceBit>
    12f2:	50 91 29 08 	lds	r21, 0x0829	; 0x800829 <_deviceBit+0x1>
    12f6:	60 91 2a 08 	lds	r22, 0x082A	; 0x80082a <_deviceBit+0x2>
    12fa:	70 91 2b 08 	lds	r23, 0x082B	; 0x80082b <_deviceBit+0x3>
    12fe:	80 91 2c 08 	lds	r24, 0x082C	; 0x80082c <_waitEventGroup>
    1302:	90 91 2d 08 	lds	r25, 0x082D	; 0x80082d <_waitEventGroup+0x1>
    1306:	02 d1       	rcall	.+516    	; 0x150c <xEventGroupSetBits>
    1308:	0f 90       	pop	r0
    130a:	0f 90       	pop	r0
    130c:	0f 90       	pop	r0
    130e:	0f 90       	pop	r0
		}
	}
    1310:	0e c0       	rjmp	.+28     	; 0x132e <lora_UpLinkHandler_task+0x240>

	if (rc == LoRa_ACCEPTED)
	{
		// Connected to LoRaWAN :-)
		// Make the green led steady
		led_led_on(led_ST2); // OPTIONAL
    1312:	81 e0       	ldi	r24, 0x01	; 1
    1314:	0e 94 23 22 	call	0x4446	; 0x4446 <led_led_on>
			vTaskDelay(150);

			lora_driver_flush_buffers(); // get rid of first version string from module after reset!

			_lora_setup();
			isSet=true;
    1318:	81 e0       	ldi	r24, 0x01	; 1
    131a:	80 93 2e 08 	sts	0x082E, r24	; 0x80082e <isSet>
    131e:	c3 cf       	rjmp	.-122    	; 0x12a6 <lora_UpLinkHandler_task+0x1b8>
	}
	else
	{
		// Something went wrong
		// Turn off the green led
		led_led_off(led_ST2); // OPTIONAL
    1320:	81 e0       	ldi	r24, 0x01	; 1
    1322:	0e 94 32 22 	call	0x4464	; 0x4464 <led_led_off>
		// Make the red led blink fast to tell something went wrong
		led_fast_blink(led_ST1); // OPTIONAL
    1326:	80 e0       	ldi	r24, 0x00	; 0
    1328:	0e 94 fc 21 	call	0x43f8	; 0x43f8 <led_fast_blink>
    132c:	ba cf       	rjmp	.-140    	; 0x12a2 <lora_UpLinkHandler_task+0x1b4>
			
			printf("Upload Message >%s<\n", lora_driver_map_return_code_to_text(lora_driver_sent_upload_message(false, &_uplink_payload)));
			vTaskDelay(30000);
			xEventGroupSetBits(_waitEventGroup, _deviceBit);
		}
	}
    132e:	df 91       	pop	r29
    1330:	cf 91       	pop	r28
    1332:	1f 91       	pop	r17
    1334:	0f 91       	pop	r16
    1336:	ff 90       	pop	r15
    1338:	ef 90       	pop	r14
    133a:	df 90       	pop	r13
    133c:	08 95       	ret

0000133e <lora_UpLinkHandler_startTask>:
static EventBits_t _deviceBit;

/*Check for the parameters*/


void lora_UpLinkHandler_startTask(void* xMessageBuffer){
    133e:	ec 01       	movw	r28, r24
	for(;;)
	{
		lora_UpLinkHandler_task((MessageBufferHandle_t)xMessageBuffer);
    1340:	ce 01       	movw	r24, r28
    1342:	d5 de       	rcall	.-598    	; 0x10ee <lora_UpLinkHandler_task>
    1344:	fd cf       	rjmp	.-6      	; 0x1340 <lora_UpLinkHandler_startTask+0x2>

00001346 <task_switch_in>:
	void task_switch_in(uint8_t task_no) {
		 #ifdef HAL_DEFS_H_

		 #else
		 // Used on VIA MEGA Shield rev. 2.0.0
		 PORTK &= 0b11110000;
    1346:	e8 e0       	ldi	r30, 0x08	; 8
    1348:	f1 e0       	ldi	r31, 0x01	; 1
    134a:	90 81       	ld	r25, Z
    134c:	90 7f       	andi	r25, 0xF0	; 240
    134e:	90 83       	st	Z, r25
		 PORTK |= (task_no & 0b00001111);
    1350:	90 81       	ld	r25, Z
    1352:	8f 70       	andi	r24, 0x0F	; 15
    1354:	98 2b       	or	r25, r24
    1356:	90 83       	st	Z, r25
    1358:	08 95       	ret

0000135a <task_switch_out>:
	void task_switch_out(uint8_t task_no) {
		#ifdef HAL_DEFS_H_

		#else
		// Used on VIA MEGA Shield rev. 2.0.0
		PORTK &= 0b11110000;
    135a:	e8 e0       	ldi	r30, 0x08	; 8
    135c:	f1 e0       	ldi	r31, 0x01	; 1
    135e:	80 81       	ld	r24, Z
    1360:	80 7f       	andi	r24, 0xF0	; 240
    1362:	80 83       	st	Z, r24
    1364:	08 95       	ret

00001366 <xEventGroupCreate>:
        uxReturn = pxEventBits->uxEventBits;
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
    1366:	cf 93       	push	r28
    1368:	df 93       	push	r29
    136a:	80 e1       	ldi	r24, 0x10	; 16
    136c:	90 e0       	ldi	r25, 0x00	; 0
    136e:	b4 d1       	rcall	.+872    	; 0x16d8 <pvPortMalloc>
    1370:	ec 01       	movw	r28, r24
    1372:	00 97       	sbiw	r24, 0x00	; 0
    1374:	39 f0       	breq	.+14     	; 0x1384 <xEventGroupCreate+0x1e>
    1376:	fc 01       	movw	r30, r24
    1378:	11 92       	st	Z+, r1
    137a:	11 92       	st	Z+, r1
    137c:	11 92       	st	Z+, r1
    137e:	11 92       	st	Z+, r1
    1380:	cf 01       	movw	r24, r30
    1382:	94 d2       	rcall	.+1320   	; 0x18ac <vListInitialise>
    1384:	ce 01       	movw	r24, r28
    1386:	df 91       	pop	r29
    1388:	cf 91       	pop	r28
    138a:	08 95       	ret

0000138c <xEventGroupWaitBits>:
    138c:	2f 92       	push	r2
    138e:	3f 92       	push	r3
    1390:	4f 92       	push	r4
    1392:	5f 92       	push	r5
    1394:	6f 92       	push	r6
    1396:	7f 92       	push	r7
    1398:	8f 92       	push	r8
    139a:	9f 92       	push	r9
    139c:	af 92       	push	r10
    139e:	bf 92       	push	r11
    13a0:	cf 92       	push	r12
    13a2:	df 92       	push	r13
    13a4:	ef 92       	push	r14
    13a6:	ff 92       	push	r15
    13a8:	0f 93       	push	r16
    13aa:	1f 93       	push	r17
    13ac:	cf 93       	push	r28
    13ae:	df 93       	push	r29
    13b0:	ec 01       	movw	r28, r24
    13b2:	4a 01       	movw	r8, r20
    13b4:	5b 01       	movw	r10, r22
    13b6:	62 2e       	mov	r6, r18
    13b8:	70 2e       	mov	r7, r16
    13ba:	0e 94 08 17 	call	0x2e10	; 0x2e10 <vTaskSuspendAll>
    13be:	28 80       	ld	r2, Y
    13c0:	39 80       	ldd	r3, Y+1	; 0x01
    13c2:	4a 80       	ldd	r4, Y+2	; 0x02
    13c4:	5b 80       	ldd	r5, Y+3	; 0x03
    13c6:	01 11       	cpse	r16, r1
    13c8:	0d c0       	rjmp	.+26     	; 0x13e4 <xEventGroupWaitBits+0x58>
    13ca:	81 e0       	ldi	r24, 0x01	; 1
    13cc:	b2 01       	movw	r22, r4
    13ce:	a1 01       	movw	r20, r2
    13d0:	48 21       	and	r20, r8
    13d2:	59 21       	and	r21, r9
    13d4:	6a 21       	and	r22, r10
    13d6:	7b 21       	and	r23, r11
    13d8:	45 2b       	or	r20, r21
    13da:	46 2b       	or	r20, r22
    13dc:	47 2b       	or	r20, r23
    13de:	79 f4       	brne	.+30     	; 0x13fe <xEventGroupWaitBits+0x72>
    13e0:	80 e0       	ldi	r24, 0x00	; 0
    13e2:	0d c0       	rjmp	.+26     	; 0x13fe <xEventGroupWaitBits+0x72>
    13e4:	81 e0       	ldi	r24, 0x01	; 1
    13e6:	b2 01       	movw	r22, r4
    13e8:	a1 01       	movw	r20, r2
    13ea:	48 21       	and	r20, r8
    13ec:	59 21       	and	r21, r9
    13ee:	6a 21       	and	r22, r10
    13f0:	7b 21       	and	r23, r11
    13f2:	48 15       	cp	r20, r8
    13f4:	59 05       	cpc	r21, r9
    13f6:	6a 05       	cpc	r22, r10
    13f8:	7b 05       	cpc	r23, r11
    13fa:	09 f0       	breq	.+2      	; 0x13fe <xEventGroupWaitBits+0x72>
    13fc:	80 e0       	ldi	r24, 0x00	; 0
    13fe:	88 23       	and	r24, r24
    1400:	81 f0       	breq	.+32     	; 0x1422 <xEventGroupWaitBits+0x96>
    1402:	66 20       	and	r6, r6
    1404:	09 f4       	brne	.+2      	; 0x1408 <xEventGroupWaitBits+0x7c>
    1406:	6b c0       	rjmp	.+214    	; 0x14de <xEventGroupWaitBits+0x152>
    1408:	80 94       	com	r8
    140a:	90 94       	com	r9
    140c:	a0 94       	com	r10
    140e:	b0 94       	com	r11
    1410:	82 20       	and	r8, r2
    1412:	93 20       	and	r9, r3
    1414:	a4 20       	and	r10, r4
    1416:	b5 20       	and	r11, r5
    1418:	88 82       	st	Y, r8
    141a:	99 82       	std	Y+1, r9	; 0x01
    141c:	aa 82       	std	Y+2, r10	; 0x02
    141e:	bb 82       	std	Y+3, r11	; 0x03
    1420:	5e c0       	rjmp	.+188    	; 0x14de <xEventGroupWaitBits+0x152>
    1422:	c1 14       	cp	r12, r1
    1424:	d1 04       	cpc	r13, r1
    1426:	e1 04       	cpc	r14, r1
    1428:	f1 04       	cpc	r15, r1
    142a:	09 f4       	brne	.+2      	; 0x142e <xEventGroupWaitBits+0xa2>
    142c:	58 c0       	rjmp	.+176    	; 0x14de <xEventGroupWaitBits+0x152>
    142e:	66 20       	and	r6, r6
    1430:	29 f0       	breq	.+10     	; 0x143c <xEventGroupWaitBits+0xb0>
    1432:	40 e0       	ldi	r20, 0x00	; 0
    1434:	50 e0       	ldi	r21, 0x00	; 0
    1436:	60 e0       	ldi	r22, 0x00	; 0
    1438:	71 e0       	ldi	r23, 0x01	; 1
    143a:	03 c0       	rjmp	.+6      	; 0x1442 <xEventGroupWaitBits+0xb6>
    143c:	40 e0       	ldi	r20, 0x00	; 0
    143e:	50 e0       	ldi	r21, 0x00	; 0
    1440:	ba 01       	movw	r22, r20
    1442:	71 10       	cpse	r7, r1
    1444:	74 60       	ori	r23, 0x04	; 4
    1446:	48 29       	or	r20, r8
    1448:	59 29       	or	r21, r9
    144a:	6a 29       	or	r22, r10
    144c:	7b 29       	or	r23, r11
    144e:	97 01       	movw	r18, r14
    1450:	86 01       	movw	r16, r12
    1452:	ce 01       	movw	r24, r28
    1454:	04 96       	adiw	r24, 0x04	; 4
    1456:	0e 94 1c 19 	call	0x3238	; 0x3238 <vTaskPlaceOnUnorderedEventList>
    145a:	0e 94 f1 17 	call	0x2fe2	; 0x2fe2 <xTaskResumeAll>
    145e:	81 11       	cpse	r24, r1
    1460:	01 c0       	rjmp	.+2      	; 0x1464 <xEventGroupWaitBits+0xd8>
    1462:	6c d3       	rcall	.+1752   	; 0x1b3c <vPortYield>
    1464:	0e 94 63 1b 	call	0x36c6	; 0x36c6 <uxTaskResetEventItemValue>
    1468:	91 fd       	sbrc	r25, 1
    146a:	35 c0       	rjmp	.+106    	; 0x14d6 <xEventGroupWaitBits+0x14a>
    146c:	0f b6       	in	r0, 0x3f	; 63
    146e:	f8 94       	cli
    1470:	0f 92       	push	r0
    1472:	68 81       	ld	r22, Y
    1474:	79 81       	ldd	r23, Y+1	; 0x01
    1476:	8a 81       	ldd	r24, Y+2	; 0x02
    1478:	9b 81       	ldd	r25, Y+3	; 0x03
    147a:	71 10       	cpse	r7, r1
    147c:	0d c0       	rjmp	.+26     	; 0x1498 <xEventGroupWaitBits+0x10c>
    147e:	21 e0       	ldi	r18, 0x01	; 1
    1480:	75 01       	movw	r14, r10
    1482:	64 01       	movw	r12, r8
    1484:	c6 22       	and	r12, r22
    1486:	d7 22       	and	r13, r23
    1488:	e8 22       	and	r14, r24
    148a:	f9 22       	and	r15, r25
    148c:	cd 28       	or	r12, r13
    148e:	ce 28       	or	r12, r14
    1490:	cf 28       	or	r12, r15
    1492:	79 f4       	brne	.+30     	; 0x14b2 <xEventGroupWaitBits+0x126>
    1494:	20 e0       	ldi	r18, 0x00	; 0
    1496:	0d c0       	rjmp	.+26     	; 0x14b2 <xEventGroupWaitBits+0x126>
    1498:	21 e0       	ldi	r18, 0x01	; 1
    149a:	75 01       	movw	r14, r10
    149c:	64 01       	movw	r12, r8
    149e:	c6 22       	and	r12, r22
    14a0:	d7 22       	and	r13, r23
    14a2:	e8 22       	and	r14, r24
    14a4:	f9 22       	and	r15, r25
    14a6:	c8 14       	cp	r12, r8
    14a8:	d9 04       	cpc	r13, r9
    14aa:	ea 04       	cpc	r14, r10
    14ac:	fb 04       	cpc	r15, r11
    14ae:	09 f0       	breq	.+2      	; 0x14b2 <xEventGroupWaitBits+0x126>
    14b0:	20 e0       	ldi	r18, 0x00	; 0
    14b2:	22 23       	and	r18, r18
    14b4:	71 f0       	breq	.+28     	; 0x14d2 <xEventGroupWaitBits+0x146>
    14b6:	66 20       	and	r6, r6
    14b8:	61 f0       	breq	.+24     	; 0x14d2 <xEventGroupWaitBits+0x146>
    14ba:	80 94       	com	r8
    14bc:	90 94       	com	r9
    14be:	a0 94       	com	r10
    14c0:	b0 94       	com	r11
    14c2:	86 22       	and	r8, r22
    14c4:	97 22       	and	r9, r23
    14c6:	a8 22       	and	r10, r24
    14c8:	b9 22       	and	r11, r25
    14ca:	88 82       	st	Y, r8
    14cc:	99 82       	std	Y+1, r9	; 0x01
    14ce:	aa 82       	std	Y+2, r10	; 0x02
    14d0:	bb 82       	std	Y+3, r11	; 0x03
    14d2:	0f 90       	pop	r0
    14d4:	0f be       	out	0x3f, r0	; 63
    14d6:	1b 01       	movw	r2, r22
    14d8:	2c 01       	movw	r4, r24
    14da:	55 24       	eor	r5, r5
    14dc:	02 c0       	rjmp	.+4      	; 0x14e2 <xEventGroupWaitBits+0x156>
    14de:	0e 94 f1 17 	call	0x2fe2	; 0x2fe2 <xTaskResumeAll>
    14e2:	c2 01       	movw	r24, r4
    14e4:	b1 01       	movw	r22, r2
    14e6:	df 91       	pop	r29
    14e8:	cf 91       	pop	r28
    14ea:	1f 91       	pop	r17
    14ec:	0f 91       	pop	r16
    14ee:	ff 90       	pop	r15
    14f0:	ef 90       	pop	r14
    14f2:	df 90       	pop	r13
    14f4:	cf 90       	pop	r12
    14f6:	bf 90       	pop	r11
    14f8:	af 90       	pop	r10
    14fa:	9f 90       	pop	r9
    14fc:	8f 90       	pop	r8
    14fe:	7f 90       	pop	r7
    1500:	6f 90       	pop	r6
    1502:	5f 90       	pop	r5
    1504:	4f 90       	pop	r4
    1506:	3f 90       	pop	r3
    1508:	2f 90       	pop	r2
    150a:	08 95       	ret

0000150c <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
    150c:	4f 92       	push	r4
    150e:	5f 92       	push	r5
    1510:	6f 92       	push	r6
    1512:	7f 92       	push	r7
    1514:	8f 92       	push	r8
    1516:	9f 92       	push	r9
    1518:	af 92       	push	r10
    151a:	bf 92       	push	r11
    151c:	cf 92       	push	r12
    151e:	df 92       	push	r13
    1520:	ef 92       	push	r14
    1522:	ff 92       	push	r15
    1524:	0f 93       	push	r16
    1526:	1f 93       	push	r17
    1528:	cf 93       	push	r28
    152a:	df 93       	push	r29
    152c:	ec 01       	movw	r28, r24
    152e:	6a 01       	movw	r12, r20
    1530:	7b 01       	movw	r14, r22
    itself. */
    configASSERT( xEventGroup );
    configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

    pxList = &( pxEventBits->xTasksWaitingForBits );
    pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1532:	8c 01       	movw	r16, r24
    1534:	09 5f       	subi	r16, 0xF9	; 249
    1536:	1f 4f       	sbci	r17, 0xFF	; 255
    vTaskSuspendAll();
    1538:	0e 94 08 17 	call	0x2e10	; 0x2e10 <vTaskSuspendAll>
    {
        traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

        pxListItem = listGET_HEAD_ENTRY( pxList );
    153c:	eb 85       	ldd	r30, Y+11	; 0x0b
    153e:	fc 85       	ldd	r31, Y+12	; 0x0c

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;
    1540:	88 81       	ld	r24, Y
    1542:	99 81       	ldd	r25, Y+1	; 0x01
    1544:	aa 81       	ldd	r26, Y+2	; 0x02
    1546:	bb 81       	ldd	r27, Y+3	; 0x03
    1548:	c8 2a       	or	r12, r24
    154a:	d9 2a       	or	r13, r25
    154c:	ea 2a       	or	r14, r26
    154e:	fb 2a       	or	r15, r27
    1550:	c8 82       	st	Y, r12
    1552:	d9 82       	std	Y+1, r13	; 0x01
    1554:	ea 82       	std	Y+2, r14	; 0x02
    1556:	fb 82       	std	Y+3, r15	; 0x03

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
    1558:	0e 17       	cp	r16, r30
    155a:	1f 07       	cpc	r17, r31
    155c:	09 f4       	brne	.+2      	; 0x1560 <xEventGroupSetBits+0x54>
    155e:	45 c0       	rjmp	.+138    	; 0x15ea <xEventGroupSetBits+0xde>
    1560:	c1 2c       	mov	r12, r1
    1562:	d1 2c       	mov	r13, r1
    1564:	76 01       	movw	r14, r12
            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
                {
                    xMatchFound = pdTRUE;
    1566:	99 24       	eor	r9, r9
    1568:	93 94       	inc	r9
    156a:	81 2c       	mov	r8, r1
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
    156c:	a4 80       	ldd	r10, Z+4	; 0x04
    156e:	b5 80       	ldd	r11, Z+5	; 0x05
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
    1570:	80 81       	ld	r24, Z
    1572:	91 81       	ldd	r25, Z+1	; 0x01
    1574:	a2 81       	ldd	r26, Z+2	; 0x02
    1576:	b3 81       	ldd	r27, Z+3	; 0x03
            xMatchFound = pdFALSE;

            /* Split the bits waited for from the control bits. */
            uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
            uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
    1578:	ac 01       	movw	r20, r24
    157a:	bd 01       	movw	r22, r26
    157c:	77 27       	eor	r23, r23

            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
    157e:	b2 fd       	sbrc	r27, 2
    1580:	0f c0       	rjmp	.+30     	; 0x15a0 <xEventGroupSetBits+0x94>
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
                {
                    xMatchFound = pdTRUE;
    1582:	48 80       	ld	r4, Y
    1584:	59 80       	ldd	r5, Y+1	; 0x01
    1586:	6a 80       	ldd	r6, Y+2	; 0x02
    1588:	7b 80       	ldd	r7, Y+3	; 0x03
    158a:	44 22       	and	r4, r20
    158c:	55 22       	and	r5, r21
    158e:	66 22       	and	r6, r22
    1590:	77 22       	and	r7, r23
    1592:	29 2d       	mov	r18, r9
    1594:	45 28       	or	r4, r5
    1596:	46 28       	or	r4, r6
    1598:	47 28       	or	r4, r7
    159a:	89 f4       	brne	.+34     	; 0x15be <xEventGroupSetBits+0xb2>
    159c:	28 2d       	mov	r18, r8
    159e:	0f c0       	rjmp	.+30     	; 0x15be <xEventGroupSetBits+0xb2>
    15a0:	48 80       	ld	r4, Y
    15a2:	59 80       	ldd	r5, Y+1	; 0x01
    15a4:	6a 80       	ldd	r6, Y+2	; 0x02
    15a6:	7b 80       	ldd	r7, Y+3	; 0x03
    15a8:	44 22       	and	r4, r20
    15aa:	55 22       	and	r5, r21
    15ac:	66 22       	and	r6, r22
    15ae:	77 22       	and	r7, r23
    15b0:	29 2d       	mov	r18, r9
    15b2:	44 16       	cp	r4, r20
    15b4:	55 06       	cpc	r5, r21
    15b6:	66 06       	cpc	r6, r22
    15b8:	77 06       	cpc	r7, r23
    15ba:	09 f0       	breq	.+2      	; 0x15be <xEventGroupSetBits+0xb2>
    15bc:	28 2d       	mov	r18, r8
            else
            {
                /* Need all bits to be set, but not all the bits were set. */
            }

            if( xMatchFound != pdFALSE )
    15be:	22 23       	and	r18, r18
    15c0:	71 f0       	breq	.+28     	; 0x15de <xEventGroupSetBits+0xd2>
            {
                /* The bits match.  Should the bits be cleared on exit? */
                if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
    15c2:	b0 ff       	sbrs	r27, 0
    15c4:	04 c0       	rjmp	.+8      	; 0x15ce <xEventGroupSetBits+0xc2>
                {
                    uxBitsToClear |= uxBitsWaitedFor;
    15c6:	c4 2a       	or	r12, r20
    15c8:	d5 2a       	or	r13, r21
    15ca:	e6 2a       	or	r14, r22
    15cc:	f7 2a       	or	r15, r23
                /* Store the actual event flag value in the task's event list
                item before removing the task from the event list.  The
                eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                that is was unblocked due to its required bits matching, rather
                than because it timed out. */
                vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
    15ce:	48 81       	ld	r20, Y
    15d0:	59 81       	ldd	r21, Y+1	; 0x01
    15d2:	6a 81       	ldd	r22, Y+2	; 0x02
    15d4:	7b 81       	ldd	r23, Y+3	; 0x03
    15d6:	72 60       	ori	r23, 0x02	; 2
    15d8:	cf 01       	movw	r24, r30
    15da:	0e 94 a2 19 	call	0x3344	; 0x3344 <vTaskRemoveFromUnorderedEventList>
    15de:	ea 2d       	mov	r30, r10
    15e0:	fb 2d       	mov	r31, r11

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
    15e2:	0e 17       	cp	r16, r30
    15e4:	1f 07       	cpc	r17, r31
    15e6:	11 f6       	brne	.-124    	; 0x156c <xEventGroupSetBits+0x60>
    15e8:	03 c0       	rjmp	.+6      	; 0x15f0 <xEventGroupSetBits+0xe4>
EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
    15ea:	c1 2c       	mov	r12, r1
    15ec:	d1 2c       	mov	r13, r1
    15ee:	76 01       	movw	r14, r12
            pxListItem = pxNext;
        }

        /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
        bit was set in the control word. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
    15f0:	c0 94       	com	r12
    15f2:	d0 94       	com	r13
    15f4:	e0 94       	com	r14
    15f6:	f0 94       	com	r15
    15f8:	88 81       	ld	r24, Y
    15fa:	99 81       	ldd	r25, Y+1	; 0x01
    15fc:	aa 81       	ldd	r26, Y+2	; 0x02
    15fe:	bb 81       	ldd	r27, Y+3	; 0x03
    1600:	c8 22       	and	r12, r24
    1602:	d9 22       	and	r13, r25
    1604:	ea 22       	and	r14, r26
    1606:	fb 22       	and	r15, r27
    1608:	c8 82       	st	Y, r12
    160a:	d9 82       	std	Y+1, r13	; 0x01
    160c:	ea 82       	std	Y+2, r14	; 0x02
    160e:	fb 82       	std	Y+3, r15	; 0x03
    }
    ( void ) xTaskResumeAll();
    1610:	0e 94 f1 17 	call	0x2fe2	; 0x2fe2 <xTaskResumeAll>

    return pxEventBits->uxEventBits;
    1614:	68 81       	ld	r22, Y
    1616:	79 81       	ldd	r23, Y+1	; 0x01
    1618:	8a 81       	ldd	r24, Y+2	; 0x02
    161a:	9b 81       	ldd	r25, Y+3	; 0x03
}
    161c:	df 91       	pop	r29
    161e:	cf 91       	pop	r28
    1620:	1f 91       	pop	r17
    1622:	0f 91       	pop	r16
    1624:	ff 90       	pop	r15
    1626:	ef 90       	pop	r14
    1628:	df 90       	pop	r13
    162a:	cf 90       	pop	r12
    162c:	bf 90       	pop	r11
    162e:	af 90       	pop	r10
    1630:	9f 90       	pop	r9
    1632:	8f 90       	pop	r8
    1634:	7f 90       	pop	r7
    1636:	6f 90       	pop	r6
    1638:	5f 90       	pop	r5
    163a:	4f 90       	pop	r4
    163c:	08 95       	ret

0000163e <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
    163e:	cf 93       	push	r28
    1640:	df 93       	push	r29
    1642:	dc 01       	movw	r26, r24
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
    1644:	e1 eb       	ldi	r30, 0xB1	; 177
    1646:	f8 e0       	ldi	r31, 0x08	; 8
    1648:	01 c0       	rjmp	.+2      	; 0x164c <prvInsertBlockIntoFreeList+0xe>
    164a:	f9 01       	movw	r30, r18
    164c:	20 81       	ld	r18, Z
    164e:	31 81       	ldd	r19, Z+1	; 0x01
    1650:	2a 17       	cp	r18, r26
    1652:	3b 07       	cpc	r19, r27
    1654:	d0 f3       	brcs	.-12     	; 0x164a <prvInsertBlockIntoFreeList+0xc>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
    1656:	82 81       	ldd	r24, Z+2	; 0x02
    1658:	93 81       	ldd	r25, Z+3	; 0x03
    165a:	af 01       	movw	r20, r30
    165c:	48 0f       	add	r20, r24
    165e:	59 1f       	adc	r21, r25
    1660:	a4 17       	cp	r26, r20
    1662:	b5 07       	cpc	r27, r21
    1664:	49 f4       	brne	.+18     	; 0x1678 <prvInsertBlockIntoFreeList+0x3a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
    1666:	12 96       	adiw	r26, 0x02	; 2
    1668:	4d 91       	ld	r20, X+
    166a:	5c 91       	ld	r21, X
    166c:	13 97       	sbiw	r26, 0x03	; 3
    166e:	84 0f       	add	r24, r20
    1670:	95 1f       	adc	r25, r21
    1672:	93 83       	std	Z+3, r25	; 0x03
    1674:	82 83       	std	Z+2, r24	; 0x02
    1676:	df 01       	movw	r26, r30
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
    1678:	12 96       	adiw	r26, 0x02	; 2
    167a:	8d 91       	ld	r24, X+
    167c:	9c 91       	ld	r25, X
    167e:	13 97       	sbiw	r26, 0x03	; 3
    1680:	ed 01       	movw	r28, r26
    1682:	c8 0f       	add	r28, r24
    1684:	d9 1f       	adc	r29, r25
    1686:	2c 17       	cp	r18, r28
    1688:	3d 07       	cpc	r19, r29
    168a:	d9 f4       	brne	.+54     	; 0x16c2 <prvInsertBlockIntoFreeList+0x84>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
    168c:	20 91 af 08 	lds	r18, 0x08AF	; 0x8008af <pxEnd>
    1690:	30 91 b0 08 	lds	r19, 0x08B0	; 0x8008b0 <pxEnd+0x1>
    1694:	c2 17       	cp	r28, r18
    1696:	d3 07       	cpc	r29, r19
    1698:	81 f0       	breq	.+32     	; 0x16ba <prvInsertBlockIntoFreeList+0x7c>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
    169a:	2a 81       	ldd	r18, Y+2	; 0x02
    169c:	3b 81       	ldd	r19, Y+3	; 0x03
    169e:	82 0f       	add	r24, r18
    16a0:	93 1f       	adc	r25, r19
    16a2:	13 96       	adiw	r26, 0x03	; 3
    16a4:	9c 93       	st	X, r25
    16a6:	8e 93       	st	-X, r24
    16a8:	12 97       	sbiw	r26, 0x02	; 2
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
    16aa:	c0 81       	ld	r28, Z
    16ac:	d1 81       	ldd	r29, Z+1	; 0x01
    16ae:	88 81       	ld	r24, Y
    16b0:	99 81       	ldd	r25, Y+1	; 0x01
    16b2:	11 96       	adiw	r26, 0x01	; 1
    16b4:	9c 93       	st	X, r25
    16b6:	8e 93       	st	-X, r24
    16b8:	07 c0       	rjmp	.+14     	; 0x16c8 <prvInsertBlockIntoFreeList+0x8a>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
    16ba:	11 96       	adiw	r26, 0x01	; 1
    16bc:	dc 93       	st	X, r29
    16be:	ce 93       	st	-X, r28
    16c0:	03 c0       	rjmp	.+6      	; 0x16c8 <prvInsertBlockIntoFreeList+0x8a>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
    16c2:	11 96       	adiw	r26, 0x01	; 1
    16c4:	3c 93       	st	X, r19
    16c6:	2e 93       	st	-X, r18

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
    16c8:	ae 17       	cp	r26, r30
    16ca:	bf 07       	cpc	r27, r31
    16cc:	11 f0       	breq	.+4      	; 0x16d2 <prvInsertBlockIntoFreeList+0x94>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
    16ce:	b1 83       	std	Z+1, r27	; 0x01
    16d0:	a0 83       	st	Z, r26
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    16d2:	df 91       	pop	r29
    16d4:	cf 91       	pop	r28
    16d6:	08 95       	ret

000016d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    16d8:	cf 92       	push	r12
    16da:	df 92       	push	r13
    16dc:	ef 92       	push	r14
    16de:	ff 92       	push	r15
    16e0:	0f 93       	push	r16
    16e2:	1f 93       	push	r17
    16e4:	cf 93       	push	r28
    16e6:	df 93       	push	r29
    16e8:	ec 01       	movw	r28, r24
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
    16ea:	0e 94 08 17 	call	0x2e10	; 0x2e10 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
    16ee:	80 91 af 08 	lds	r24, 0x08AF	; 0x8008af <pxEnd>
    16f2:	90 91 b0 08 	lds	r25, 0x08B0	; 0x8008b0 <pxEnd+0x1>
    16f6:	89 2b       	or	r24, r25
    16f8:	41 f5       	brne	.+80     	; 0x174a <pvPortMalloc+0x72>

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
    16fa:	e1 eb       	ldi	r30, 0xB1	; 177
    16fc:	f8 e0       	ldi	r31, 0x08	; 8
    16fe:	a5 eb       	ldi	r26, 0xB5	; 181
    1700:	b8 e0       	ldi	r27, 0x08	; 8
    1702:	b1 83       	std	Z+1, r27	; 0x01
    1704:	a0 83       	st	Z, r26
	xStart.xBlockSize = ( size_t ) 0;
    1706:	13 82       	std	Z+3, r1	; 0x03
    1708:	12 82       	std	Z+2, r1	; 0x02
	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
	uxAddress -= xHeapStructSize;
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
	pxEnd = ( void * ) uxAddress;
    170a:	e1 e5       	ldi	r30, 0x51	; 81
    170c:	f8 e1       	ldi	r31, 0x18	; 24
    170e:	f0 93 b0 08 	sts	0x08B0, r31	; 0x8008b0 <pxEnd+0x1>
    1712:	e0 93 af 08 	sts	0x08AF, r30	; 0x8008af <pxEnd>
	pxEnd->xBlockSize = 0;
    1716:	13 82       	std	Z+3, r1	; 0x03
    1718:	12 82       	std	Z+2, r1	; 0x02
	pxEnd->pxNextFreeBlock = NULL;
    171a:	11 82       	std	Z+1, r1	; 0x01
    171c:	10 82       	st	Z, r1

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
    171e:	8c e9       	ldi	r24, 0x9C	; 156
    1720:	9f e0       	ldi	r25, 0x0F	; 15
    1722:	13 96       	adiw	r26, 0x03	; 3
    1724:	9c 93       	st	X, r25
    1726:	8e 93       	st	-X, r24
    1728:	12 97       	sbiw	r26, 0x02	; 2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
    172a:	ed 93       	st	X+, r30
    172c:	fc 93       	st	X, r31

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
    172e:	90 93 ac 08 	sts	0x08AC, r25	; 0x8008ac <xMinimumEverFreeBytesRemaining+0x1>
    1732:	80 93 ab 08 	sts	0x08AB, r24	; 0x8008ab <xMinimumEverFreeBytesRemaining>
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
    1736:	90 93 ae 08 	sts	0x08AE, r25	; 0x8008ae <xFreeBytesRemaining+0x1>
    173a:	80 93 ad 08 	sts	0x08AD, r24	; 0x8008ad <xFreeBytesRemaining>

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
    173e:	80 e0       	ldi	r24, 0x00	; 0
    1740:	90 e8       	ldi	r25, 0x80	; 128
    1742:	90 93 aa 08 	sts	0x08AA, r25	; 0x8008aa <xBlockAllocatedBit+0x1>
    1746:	80 93 a9 08 	sts	0x08A9, r24	; 0x8008a9 <xBlockAllocatedBit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
    174a:	e0 90 a9 08 	lds	r14, 0x08A9	; 0x8008a9 <xBlockAllocatedBit>
    174e:	f0 90 aa 08 	lds	r15, 0x08AA	; 0x8008aa <xBlockAllocatedBit+0x1>
    1752:	c7 01       	movw	r24, r14
    1754:	8c 23       	and	r24, r28
    1756:	9d 23       	and	r25, r29
    1758:	89 2b       	or	r24, r25
    175a:	09 f0       	breq	.+2      	; 0x175e <pvPortMalloc+0x86>
    175c:	66 c0       	rjmp	.+204    	; 0x182a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
    175e:	20 97       	sbiw	r28, 0x00	; 0
    1760:	09 f4       	brne	.+2      	; 0x1764 <pvPortMalloc+0x8c>
    1762:	66 c0       	rjmp	.+204    	; 0x1830 <pvPortMalloc+0x158>
			{
				xWantedSize += xHeapStructSize;
    1764:	ae 01       	movw	r20, r28
    1766:	4c 5f       	subi	r20, 0xFC	; 252
    1768:	5f 4f       	sbci	r21, 0xFF	; 255
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
    176a:	09 f4       	brne	.+2      	; 0x176e <pvPortMalloc+0x96>
    176c:	5e c0       	rjmp	.+188    	; 0x182a <pvPortMalloc+0x152>
    176e:	00 91 ad 08 	lds	r16, 0x08AD	; 0x8008ad <xFreeBytesRemaining>
    1772:	10 91 ae 08 	lds	r17, 0x08AE	; 0x8008ae <xFreeBytesRemaining+0x1>
    1776:	04 17       	cp	r16, r20
    1778:	15 07       	cpc	r17, r21
    177a:	08 f4       	brcc	.+2      	; 0x177e <pvPortMalloc+0xa6>
    177c:	56 c0       	rjmp	.+172    	; 0x182a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
    177e:	c0 91 b1 08 	lds	r28, 0x08B1	; 0x8008b1 <xStart>
    1782:	d0 91 b2 08 	lds	r29, 0x08B2	; 0x8008b2 <xStart+0x1>

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
    1786:	e1 eb       	ldi	r30, 0xB1	; 177
    1788:	f8 e0       	ldi	r31, 0x08	; 8
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    178a:	02 c0       	rjmp	.+4      	; 0x1790 <pvPortMalloc+0xb8>
    178c:	fe 01       	movw	r30, r28
				{
					pxPreviousBlock = pxBlock;
					pxBlock = pxBlock->pxNextFreeBlock;
    178e:	e9 01       	movw	r28, r18
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    1790:	2a 81       	ldd	r18, Y+2	; 0x02
    1792:	3b 81       	ldd	r19, Y+3	; 0x03
    1794:	24 17       	cp	r18, r20
    1796:	35 07       	cpc	r19, r21
    1798:	28 f4       	brcc	.+10     	; 0x17a4 <pvPortMalloc+0xcc>
    179a:	28 81       	ld	r18, Y
    179c:	39 81       	ldd	r19, Y+1	; 0x01
    179e:	21 15       	cp	r18, r1
    17a0:	31 05       	cpc	r19, r1
    17a2:	a1 f7       	brne	.-24     	; 0x178c <pvPortMalloc+0xb4>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
    17a4:	80 91 af 08 	lds	r24, 0x08AF	; 0x8008af <pxEnd>
    17a8:	90 91 b0 08 	lds	r25, 0x08B0	; 0x8008b0 <pxEnd+0x1>
    17ac:	c8 17       	cp	r28, r24
    17ae:	d9 07       	cpc	r29, r25
    17b0:	e1 f1       	breq	.+120    	; 0x182a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
    17b2:	c0 80       	ld	r12, Z
    17b4:	d1 80       	ldd	r13, Z+1	; 0x01
    17b6:	84 e0       	ldi	r24, 0x04	; 4
    17b8:	c8 0e       	add	r12, r24
    17ba:	d1 1c       	adc	r13, r1

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    17bc:	88 81       	ld	r24, Y
    17be:	99 81       	ldd	r25, Y+1	; 0x01
    17c0:	91 83       	std	Z+1, r25	; 0x01
    17c2:	80 83       	st	Z, r24

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    17c4:	2a 81       	ldd	r18, Y+2	; 0x02
    17c6:	3b 81       	ldd	r19, Y+3	; 0x03
    17c8:	24 1b       	sub	r18, r20
    17ca:	35 0b       	sbc	r19, r21
    17cc:	29 30       	cpi	r18, 0x09	; 9
    17ce:	31 05       	cpc	r19, r1
    17d0:	48 f0       	brcs	.+18     	; 0x17e4 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
    17d2:	ce 01       	movw	r24, r28
    17d4:	84 0f       	add	r24, r20
    17d6:	95 1f       	adc	r25, r21
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    17d8:	fc 01       	movw	r30, r24
    17da:	33 83       	std	Z+3, r19	; 0x03
    17dc:	22 83       	std	Z+2, r18	; 0x02
						pxBlock->xBlockSize = xWantedSize;
    17de:	5b 83       	std	Y+3, r21	; 0x03
    17e0:	4a 83       	std	Y+2, r20	; 0x02

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
    17e2:	2d df       	rcall	.-422    	; 0x163e <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
    17e4:	8a 81       	ldd	r24, Y+2	; 0x02
    17e6:	9b 81       	ldd	r25, Y+3	; 0x03
    17e8:	08 1b       	sub	r16, r24
    17ea:	19 0b       	sbc	r17, r25
    17ec:	10 93 ae 08 	sts	0x08AE, r17	; 0x8008ae <xFreeBytesRemaining+0x1>
    17f0:	00 93 ad 08 	sts	0x08AD, r16	; 0x8008ad <xFreeBytesRemaining>

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
    17f4:	20 91 ab 08 	lds	r18, 0x08AB	; 0x8008ab <xMinimumEverFreeBytesRemaining>
    17f8:	30 91 ac 08 	lds	r19, 0x08AC	; 0x8008ac <xMinimumEverFreeBytesRemaining+0x1>
    17fc:	02 17       	cp	r16, r18
    17fe:	13 07       	cpc	r17, r19
    1800:	20 f4       	brcc	.+8      	; 0x180a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
    1802:	10 93 ac 08 	sts	0x08AC, r17	; 0x8008ac <xMinimumEverFreeBytesRemaining+0x1>
    1806:	00 93 ab 08 	sts	0x08AB, r16	; 0x8008ab <xMinimumEverFreeBytesRemaining>
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
    180a:	e8 2a       	or	r14, r24
    180c:	f9 2a       	or	r15, r25
    180e:	fb 82       	std	Y+3, r15	; 0x03
    1810:	ea 82       	std	Y+2, r14	; 0x02
					pxBlock->pxNextFreeBlock = NULL;
    1812:	19 82       	std	Y+1, r1	; 0x01
    1814:	18 82       	st	Y, r1
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    1816:	0e 94 f1 17 	call	0x2fe2	; 0x2fe2 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
    181a:	c1 14       	cp	r12, r1
    181c:	d1 04       	cpc	r13, r1
    181e:	59 f4       	brne	.+22     	; 0x1836 <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
    1820:	0e 94 c6 1e 	call	0x3d8c	; 0x3d8c <vApplicationMallocFailedHook>
    1824:	c1 2c       	mov	r12, r1
    1826:	d1 2c       	mov	r13, r1
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
    1828:	06 c0       	rjmp	.+12     	; 0x1836 <pvPortMalloc+0x15e>
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    182a:	0e 94 f1 17 	call	0x2fe2	; 0x2fe2 <xTaskResumeAll>
    182e:	f8 cf       	rjmp	.-16     	; 0x1820 <pvPortMalloc+0x148>
    1830:	0e 94 f1 17 	call	0x2fe2	; 0x2fe2 <xTaskResumeAll>
    1834:	f5 cf       	rjmp	.-22     	; 0x1820 <pvPortMalloc+0x148>
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
}
    1836:	c6 01       	movw	r24, r12
    1838:	df 91       	pop	r29
    183a:	cf 91       	pop	r28
    183c:	1f 91       	pop	r17
    183e:	0f 91       	pop	r16
    1840:	ff 90       	pop	r15
    1842:	ef 90       	pop	r14
    1844:	df 90       	pop	r13
    1846:	cf 90       	pop	r12
    1848:	08 95       	ret

0000184a <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    184a:	cf 93       	push	r28
    184c:	df 93       	push	r29
uint8_t *puc = ( uint8_t * ) pv;
BlockLink_t *pxLink;

	if( pv != NULL )
    184e:	00 97       	sbiw	r24, 0x00	; 0
    1850:	51 f1       	breq	.+84     	; 0x18a6 <vPortFree+0x5c>

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
		configASSERT( pxLink->pxNextFreeBlock == NULL );

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
    1852:	fc 01       	movw	r30, r24
    1854:	34 97       	sbiw	r30, 0x04	; 4
    1856:	22 81       	ldd	r18, Z+2	; 0x02
    1858:	33 81       	ldd	r19, Z+3	; 0x03
    185a:	40 91 a9 08 	lds	r20, 0x08A9	; 0x8008a9 <xBlockAllocatedBit>
    185e:	50 91 aa 08 	lds	r21, 0x08AA	; 0x8008aa <xBlockAllocatedBit+0x1>
    1862:	b9 01       	movw	r22, r18
    1864:	64 23       	and	r22, r20
    1866:	75 23       	and	r23, r21
    1868:	67 2b       	or	r22, r23
    186a:	e9 f0       	breq	.+58     	; 0x18a6 <vPortFree+0x5c>
		{
			if( pxLink->pxNextFreeBlock == NULL )
    186c:	60 81       	ld	r22, Z
    186e:	71 81       	ldd	r23, Z+1	; 0x01
    1870:	67 2b       	or	r22, r23
    1872:	c9 f4       	brne	.+50     	; 0x18a6 <vPortFree+0x5c>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
    1874:	ef 01       	movw	r28, r30
    1876:	40 95       	com	r20
    1878:	50 95       	com	r21
    187a:	24 23       	and	r18, r20
    187c:	35 23       	and	r19, r21
    187e:	33 83       	std	Z+3, r19	; 0x03
    1880:	22 83       	std	Z+2, r18	; 0x02

				vTaskSuspendAll();
    1882:	0e 94 08 17 	call	0x2e10	; 0x2e10 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
    1886:	20 91 ad 08 	lds	r18, 0x08AD	; 0x8008ad <xFreeBytesRemaining>
    188a:	30 91 ae 08 	lds	r19, 0x08AE	; 0x8008ae <xFreeBytesRemaining+0x1>
    188e:	8a 81       	ldd	r24, Y+2	; 0x02
    1890:	9b 81       	ldd	r25, Y+3	; 0x03
    1892:	82 0f       	add	r24, r18
    1894:	93 1f       	adc	r25, r19
    1896:	90 93 ae 08 	sts	0x08AE, r25	; 0x8008ae <xFreeBytesRemaining+0x1>
    189a:	80 93 ad 08 	sts	0x08AD, r24	; 0x8008ad <xFreeBytesRemaining>
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
    189e:	ce 01       	movw	r24, r28
    18a0:	ce de       	rcall	.-612    	; 0x163e <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
    18a2:	0e 94 f1 17 	call	0x2fe2	; 0x2fe2 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
    18a6:	df 91       	pop	r29
    18a8:	cf 91       	pop	r28
    18aa:	08 95       	ret

000018ac <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    18ac:	fc 01       	movw	r30, r24
    /* The list structure contains a list item which is used to mark the
    end of the list.  To initialise the list the list end is inserted
    as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );            /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    18ae:	03 96       	adiw	r24, 0x03	; 3
    18b0:	92 83       	std	Z+2, r25	; 0x02
    18b2:	81 83       	std	Z+1, r24	; 0x01

    /* The list end value is the highest possible value in the list to
    ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
    18b4:	4f ef       	ldi	r20, 0xFF	; 255
    18b6:	5f ef       	ldi	r21, 0xFF	; 255
    18b8:	ba 01       	movw	r22, r20
    18ba:	43 83       	std	Z+3, r20	; 0x03
    18bc:	54 83       	std	Z+4, r21	; 0x04
    18be:	65 83       	std	Z+5, r22	; 0x05
    18c0:	76 83       	std	Z+6, r23	; 0x06

    /* The list end next and previous pointers point to itself so we know
    when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );    /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    18c2:	90 87       	std	Z+8, r25	; 0x08
    18c4:	87 83       	std	Z+7, r24	; 0x07
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    18c6:	92 87       	std	Z+10, r25	; 0x0a
    18c8:	81 87       	std	Z+9, r24	; 0x09

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    18ca:	10 82       	st	Z, r1
    18cc:	08 95       	ret

000018ce <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
    18ce:	fc 01       	movw	r30, r24
    18d0:	13 86       	std	Z+11, r1	; 0x0b
    18d2:	12 86       	std	Z+10, r1	; 0x0a
    18d4:	08 95       	ret

000018d6 <vListInsertEnd>:
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    18d6:	cf 93       	push	r28
    18d8:	df 93       	push	r29
    18da:	9c 01       	movw	r18, r24
    18dc:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
    18de:	dc 01       	movw	r26, r24
    18e0:	11 96       	adiw	r26, 0x01	; 1
    18e2:	cd 91       	ld	r28, X+
    18e4:	dc 91       	ld	r29, X
    18e6:	12 97       	sbiw	r26, 0x02	; 2
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
    makes the new list item the last item to be removed by a call to
    listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
    18e8:	d5 83       	std	Z+5, r29	; 0x05
    18ea:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    18ec:	8e 81       	ldd	r24, Y+6	; 0x06
    18ee:	9f 81       	ldd	r25, Y+7	; 0x07
    18f0:	97 83       	std	Z+7, r25	; 0x07
    18f2:	86 83       	std	Z+6, r24	; 0x06

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
    18f4:	8e 81       	ldd	r24, Y+6	; 0x06
    18f6:	9f 81       	ldd	r25, Y+7	; 0x07
    18f8:	dc 01       	movw	r26, r24
    18fa:	15 96       	adiw	r26, 0x05	; 5
    18fc:	7c 93       	st	X, r23
    18fe:	6e 93       	st	-X, r22
    1900:	14 97       	sbiw	r26, 0x04	; 4
    pxIndex->pxPrevious = pxNewListItem;
    1902:	7f 83       	std	Y+7, r23	; 0x07
    1904:	6e 83       	std	Y+6, r22	; 0x06

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
    1906:	33 87       	std	Z+11, r19	; 0x0b
    1908:	22 87       	std	Z+10, r18	; 0x0a

    ( pxList->uxNumberOfItems )++;
    190a:	f9 01       	movw	r30, r18
    190c:	80 81       	ld	r24, Z
    190e:	8f 5f       	subi	r24, 0xFF	; 255
    1910:	80 83       	st	Z, r24
}
    1912:	df 91       	pop	r29
    1914:	cf 91       	pop	r28
    1916:	08 95       	ret

00001918 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    1918:	0f 93       	push	r16
    191a:	1f 93       	push	r17
    191c:	cf 93       	push	r28
    191e:	df 93       	push	r29
    1920:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    1922:	08 81       	ld	r16, Y
    1924:	19 81       	ldd	r17, Y+1	; 0x01
    1926:	2a 81       	ldd	r18, Y+2	; 0x02
    1928:	3b 81       	ldd	r19, Y+3	; 0x03
    new list item should be placed after it.  This ensures that TCBs which are
    stored in ready lists (all of which have the same xItemValue value) get a
    share of the CPU.  However, if the xItemValue is the same as the back marker
    the iteration loop below will not end.  Therefore the value is checked
    first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
    192a:	0f 3f       	cpi	r16, 0xFF	; 255
    192c:	4f ef       	ldi	r20, 0xFF	; 255
    192e:	14 07       	cpc	r17, r20
    1930:	24 07       	cpc	r18, r20
    1932:	34 07       	cpc	r19, r20
    1934:	21 f4       	brne	.+8      	; 0x193e <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
    1936:	fc 01       	movw	r30, r24
    1938:	a1 85       	ldd	r26, Z+9	; 0x09
    193a:	b2 85       	ldd	r27, Z+10	; 0x0a
    193c:	11 c0       	rjmp	.+34     	; 0x1960 <vListInsert+0x48>
            4) Using a queue or semaphore before it has been initialised or
               before the scheduler has been started (are interrupts firing
               before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
    193e:	dc 01       	movw	r26, r24
    1940:	13 96       	adiw	r26, 0x03	; 3
    1942:	01 c0       	rjmp	.+2      	; 0x1946 <vListInsert+0x2e>
    1944:	df 01       	movw	r26, r30
    1946:	14 96       	adiw	r26, 0x04	; 4
    1948:	ed 91       	ld	r30, X+
    194a:	fc 91       	ld	r31, X
    194c:	15 97       	sbiw	r26, 0x05	; 5
    194e:	40 81       	ld	r20, Z
    1950:	51 81       	ldd	r21, Z+1	; 0x01
    1952:	62 81       	ldd	r22, Z+2	; 0x02
    1954:	73 81       	ldd	r23, Z+3	; 0x03
    1956:	04 17       	cp	r16, r20
    1958:	15 07       	cpc	r17, r21
    195a:	26 07       	cpc	r18, r22
    195c:	37 07       	cpc	r19, r23
    195e:	90 f7       	brcc	.-28     	; 0x1944 <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
            insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
    1960:	14 96       	adiw	r26, 0x04	; 4
    1962:	ed 91       	ld	r30, X+
    1964:	fc 91       	ld	r31, X
    1966:	15 97       	sbiw	r26, 0x05	; 5
    1968:	fd 83       	std	Y+5, r31	; 0x05
    196a:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    196c:	d7 83       	std	Z+7, r29	; 0x07
    196e:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
    1970:	bf 83       	std	Y+7, r27	; 0x07
    1972:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
    1974:	15 96       	adiw	r26, 0x05	; 5
    1976:	dc 93       	st	X, r29
    1978:	ce 93       	st	-X, r28
    197a:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
    item later. */
    pxNewListItem->pxContainer = pxList;
    197c:	9b 87       	std	Y+11, r25	; 0x0b
    197e:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
    1980:	fc 01       	movw	r30, r24
    1982:	20 81       	ld	r18, Z
    1984:	2f 5f       	subi	r18, 0xFF	; 255
    1986:	20 83       	st	Z, r18
}
    1988:	df 91       	pop	r29
    198a:	cf 91       	pop	r28
    198c:	1f 91       	pop	r17
    198e:	0f 91       	pop	r16
    1990:	08 95       	ret

00001992 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    1992:	cf 93       	push	r28
    1994:	df 93       	push	r29
    1996:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
    1998:	a2 85       	ldd	r26, Z+10	; 0x0a
    199a:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    199c:	c4 81       	ldd	r28, Z+4	; 0x04
    199e:	d5 81       	ldd	r29, Z+5	; 0x05
    19a0:	86 81       	ldd	r24, Z+6	; 0x06
    19a2:	97 81       	ldd	r25, Z+7	; 0x07
    19a4:	9f 83       	std	Y+7, r25	; 0x07
    19a6:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    19a8:	c6 81       	ldd	r28, Z+6	; 0x06
    19aa:	d7 81       	ldd	r29, Z+7	; 0x07
    19ac:	84 81       	ldd	r24, Z+4	; 0x04
    19ae:	95 81       	ldd	r25, Z+5	; 0x05
    19b0:	9d 83       	std	Y+5, r25	; 0x05
    19b2:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
    19b4:	11 96       	adiw	r26, 0x01	; 1
    19b6:	8d 91       	ld	r24, X+
    19b8:	9c 91       	ld	r25, X
    19ba:	12 97       	sbiw	r26, 0x02	; 2
    19bc:	e8 17       	cp	r30, r24
    19be:	f9 07       	cpc	r31, r25
    19c0:	31 f4       	brne	.+12     	; 0x19ce <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
    19c2:	86 81       	ldd	r24, Z+6	; 0x06
    19c4:	97 81       	ldd	r25, Z+7	; 0x07
    19c6:	12 96       	adiw	r26, 0x02	; 2
    19c8:	9c 93       	st	X, r25
    19ca:	8e 93       	st	-X, r24
    19cc:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
    19ce:	13 86       	std	Z+11, r1	; 0x0b
    19d0:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
    19d2:	8c 91       	ld	r24, X
    19d4:	81 50       	subi	r24, 0x01	; 1
    19d6:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
    19d8:	8c 91       	ld	r24, X
}
    19da:	df 91       	pop	r29
    19dc:	cf 91       	pop	r28
    19de:	08 95       	ret

000019e0 <pxPortInitialiseStack>:
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    19e0:	31 e1       	ldi	r19, 0x11	; 17
    19e2:	fc 01       	movw	r30, r24
    19e4:	30 83       	st	Z, r19
    19e6:	31 97       	sbiw	r30, 0x01	; 1
    19e8:	22 e2       	ldi	r18, 0x22	; 34
    19ea:	20 83       	st	Z, r18
    19ec:	31 97       	sbiw	r30, 0x01	; 1
    19ee:	a3 e3       	ldi	r26, 0x33	; 51
    19f0:	a0 83       	st	Z, r26
    19f2:	31 97       	sbiw	r30, 0x01	; 1
    19f4:	60 83       	st	Z, r22
    19f6:	31 97       	sbiw	r30, 0x01	; 1
    19f8:	70 83       	st	Z, r23
    19fa:	31 97       	sbiw	r30, 0x01	; 1
    19fc:	10 82       	st	Z, r1
    19fe:	31 97       	sbiw	r30, 0x01	; 1
    1a00:	10 82       	st	Z, r1
    1a02:	31 97       	sbiw	r30, 0x01	; 1
    1a04:	60 e8       	ldi	r22, 0x80	; 128
    1a06:	60 83       	st	Z, r22
    1a08:	31 97       	sbiw	r30, 0x01	; 1
    1a0a:	10 82       	st	Z, r1
    1a0c:	31 97       	sbiw	r30, 0x01	; 1
    1a0e:	10 82       	st	Z, r1
    1a10:	31 97       	sbiw	r30, 0x01	; 1
    1a12:	10 82       	st	Z, r1
    1a14:	31 97       	sbiw	r30, 0x01	; 1
    1a16:	62 e0       	ldi	r22, 0x02	; 2
    1a18:	60 83       	st	Z, r22
    1a1a:	31 97       	sbiw	r30, 0x01	; 1
    1a1c:	63 e0       	ldi	r22, 0x03	; 3
    1a1e:	60 83       	st	Z, r22
    1a20:	31 97       	sbiw	r30, 0x01	; 1
    1a22:	64 e0       	ldi	r22, 0x04	; 4
    1a24:	60 83       	st	Z, r22
    1a26:	31 97       	sbiw	r30, 0x01	; 1
    1a28:	65 e0       	ldi	r22, 0x05	; 5
    1a2a:	60 83       	st	Z, r22
    1a2c:	31 97       	sbiw	r30, 0x01	; 1
    1a2e:	66 e0       	ldi	r22, 0x06	; 6
    1a30:	60 83       	st	Z, r22
    1a32:	31 97       	sbiw	r30, 0x01	; 1
    1a34:	67 e0       	ldi	r22, 0x07	; 7
    1a36:	60 83       	st	Z, r22
    1a38:	31 97       	sbiw	r30, 0x01	; 1
    1a3a:	68 e0       	ldi	r22, 0x08	; 8
    1a3c:	60 83       	st	Z, r22
    1a3e:	31 97       	sbiw	r30, 0x01	; 1
    1a40:	69 e0       	ldi	r22, 0x09	; 9
    1a42:	60 83       	st	Z, r22
    1a44:	31 97       	sbiw	r30, 0x01	; 1
    1a46:	60 e1       	ldi	r22, 0x10	; 16
    1a48:	60 83       	st	Z, r22
    1a4a:	31 97       	sbiw	r30, 0x01	; 1
    1a4c:	30 83       	st	Z, r19
    1a4e:	31 97       	sbiw	r30, 0x01	; 1
    1a50:	32 e1       	ldi	r19, 0x12	; 18
    1a52:	30 83       	st	Z, r19
    1a54:	31 97       	sbiw	r30, 0x01	; 1
    1a56:	33 e1       	ldi	r19, 0x13	; 19
    1a58:	30 83       	st	Z, r19
    1a5a:	31 97       	sbiw	r30, 0x01	; 1
    1a5c:	34 e1       	ldi	r19, 0x14	; 20
    1a5e:	30 83       	st	Z, r19
    1a60:	31 97       	sbiw	r30, 0x01	; 1
    1a62:	35 e1       	ldi	r19, 0x15	; 21
    1a64:	30 83       	st	Z, r19
    1a66:	31 97       	sbiw	r30, 0x01	; 1
    1a68:	36 e1       	ldi	r19, 0x16	; 22
    1a6a:	30 83       	st	Z, r19
    1a6c:	31 97       	sbiw	r30, 0x01	; 1
    1a6e:	37 e1       	ldi	r19, 0x17	; 23
    1a70:	30 83       	st	Z, r19
    1a72:	31 97       	sbiw	r30, 0x01	; 1
    1a74:	38 e1       	ldi	r19, 0x18	; 24
    1a76:	30 83       	st	Z, r19
    1a78:	31 97       	sbiw	r30, 0x01	; 1
    1a7a:	39 e1       	ldi	r19, 0x19	; 25
    1a7c:	30 83       	st	Z, r19
    1a7e:	31 97       	sbiw	r30, 0x01	; 1
    1a80:	30 e2       	ldi	r19, 0x20	; 32
    1a82:	30 83       	st	Z, r19
    1a84:	31 97       	sbiw	r30, 0x01	; 1
    1a86:	31 e2       	ldi	r19, 0x21	; 33
    1a88:	30 83       	st	Z, r19
    1a8a:	31 97       	sbiw	r30, 0x01	; 1
    1a8c:	20 83       	st	Z, r18
    1a8e:	31 97       	sbiw	r30, 0x01	; 1
    1a90:	23 e2       	ldi	r18, 0x23	; 35
    1a92:	20 83       	st	Z, r18
    1a94:	31 97       	sbiw	r30, 0x01	; 1
    1a96:	40 83       	st	Z, r20
    1a98:	31 97       	sbiw	r30, 0x01	; 1
    1a9a:	50 83       	st	Z, r21
    1a9c:	31 97       	sbiw	r30, 0x01	; 1
    1a9e:	26 e2       	ldi	r18, 0x26	; 38
    1aa0:	20 83       	st	Z, r18
    1aa2:	31 97       	sbiw	r30, 0x01	; 1
    1aa4:	27 e2       	ldi	r18, 0x27	; 39
    1aa6:	20 83       	st	Z, r18
    1aa8:	31 97       	sbiw	r30, 0x01	; 1
    1aaa:	28 e2       	ldi	r18, 0x28	; 40
    1aac:	20 83       	st	Z, r18
    1aae:	31 97       	sbiw	r30, 0x01	; 1
    1ab0:	29 e2       	ldi	r18, 0x29	; 41
    1ab2:	20 83       	st	Z, r18
    1ab4:	31 97       	sbiw	r30, 0x01	; 1
    1ab6:	20 e3       	ldi	r18, 0x30	; 48
    1ab8:	20 83       	st	Z, r18
    1aba:	31 97       	sbiw	r30, 0x01	; 1
    1abc:	21 e3       	ldi	r18, 0x31	; 49
    1abe:	20 83       	st	Z, r18
    1ac0:	89 97       	sbiw	r24, 0x29	; 41
    1ac2:	08 95       	ret

00001ac4 <xPortStartScheduler>:
    1ac4:	a8 95       	wdr
    1ac6:	90 ec       	ldi	r25, 0xC0	; 192
    1ac8:	88 e1       	ldi	r24, 0x18	; 24
    1aca:	0f b6       	in	r0, 0x3f	; 63
    1acc:	f8 94       	cli
    1ace:	a8 95       	wdr
    1ad0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    1ad4:	0f be       	out	0x3f, r0	; 63
    1ad6:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    1ada:	a0 91 e5 18 	lds	r26, 0x18E5	; 0x8018e5 <pxCurrentTCB>
    1ade:	b0 91 e6 18 	lds	r27, 0x18E6	; 0x8018e6 <pxCurrentTCB+0x1>
    1ae2:	cd 91       	ld	r28, X+
    1ae4:	cd bf       	out	0x3d, r28	; 61
    1ae6:	dd 91       	ld	r29, X+
    1ae8:	de bf       	out	0x3e, r29	; 62
    1aea:	ff 91       	pop	r31
    1aec:	ef 91       	pop	r30
    1aee:	df 91       	pop	r29
    1af0:	cf 91       	pop	r28
    1af2:	bf 91       	pop	r27
    1af4:	af 91       	pop	r26
    1af6:	9f 91       	pop	r25
    1af8:	8f 91       	pop	r24
    1afa:	7f 91       	pop	r23
    1afc:	6f 91       	pop	r22
    1afe:	5f 91       	pop	r21
    1b00:	4f 91       	pop	r20
    1b02:	3f 91       	pop	r19
    1b04:	2f 91       	pop	r18
    1b06:	1f 91       	pop	r17
    1b08:	0f 91       	pop	r16
    1b0a:	ff 90       	pop	r15
    1b0c:	ef 90       	pop	r14
    1b0e:	df 90       	pop	r13
    1b10:	cf 90       	pop	r12
    1b12:	bf 90       	pop	r11
    1b14:	af 90       	pop	r10
    1b16:	9f 90       	pop	r9
    1b18:	8f 90       	pop	r8
    1b1a:	7f 90       	pop	r7
    1b1c:	6f 90       	pop	r6
    1b1e:	5f 90       	pop	r5
    1b20:	4f 90       	pop	r4
    1b22:	3f 90       	pop	r3
    1b24:	2f 90       	pop	r2
    1b26:	1f 90       	pop	r1
    1b28:	0f 90       	pop	r0
    1b2a:	0c be       	out	0x3c, r0	; 60
    1b2c:	0f 90       	pop	r0
    1b2e:	0b be       	out	0x3b, r0	; 59
    1b30:	0f 90       	pop	r0
    1b32:	0f be       	out	0x3f, r0	; 63
    1b34:	0f 90       	pop	r0
    1b36:	08 95       	ret
    1b38:	81 e0       	ldi	r24, 0x01	; 1
    1b3a:	08 95       	ret

00001b3c <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYield( void )
{
    portSAVE_CONTEXT();
    1b3c:	0f 92       	push	r0
    1b3e:	0f b6       	in	r0, 0x3f	; 63
    1b40:	f8 94       	cli
    1b42:	0f 92       	push	r0
    1b44:	0b b6       	in	r0, 0x3b	; 59
    1b46:	0f 92       	push	r0
    1b48:	0c b6       	in	r0, 0x3c	; 60
    1b4a:	0f 92       	push	r0
    1b4c:	1f 92       	push	r1
    1b4e:	11 24       	eor	r1, r1
    1b50:	2f 92       	push	r2
    1b52:	3f 92       	push	r3
    1b54:	4f 92       	push	r4
    1b56:	5f 92       	push	r5
    1b58:	6f 92       	push	r6
    1b5a:	7f 92       	push	r7
    1b5c:	8f 92       	push	r8
    1b5e:	9f 92       	push	r9
    1b60:	af 92       	push	r10
    1b62:	bf 92       	push	r11
    1b64:	cf 92       	push	r12
    1b66:	df 92       	push	r13
    1b68:	ef 92       	push	r14
    1b6a:	ff 92       	push	r15
    1b6c:	0f 93       	push	r16
    1b6e:	1f 93       	push	r17
    1b70:	2f 93       	push	r18
    1b72:	3f 93       	push	r19
    1b74:	4f 93       	push	r20
    1b76:	5f 93       	push	r21
    1b78:	6f 93       	push	r22
    1b7a:	7f 93       	push	r23
    1b7c:	8f 93       	push	r24
    1b7e:	9f 93       	push	r25
    1b80:	af 93       	push	r26
    1b82:	bf 93       	push	r27
    1b84:	cf 93       	push	r28
    1b86:	df 93       	push	r29
    1b88:	ef 93       	push	r30
    1b8a:	ff 93       	push	r31
    1b8c:	a0 91 e5 18 	lds	r26, 0x18E5	; 0x8018e5 <pxCurrentTCB>
    1b90:	b0 91 e6 18 	lds	r27, 0x18E6	; 0x8018e6 <pxCurrentTCB+0x1>
    1b94:	0d b6       	in	r0, 0x3d	; 61
    1b96:	0d 92       	st	X+, r0
    1b98:	0e b6       	in	r0, 0x3e	; 62
    1b9a:	0d 92       	st	X+, r0
    vTaskSwitchContext();
    1b9c:	0e 94 86 18 	call	0x310c	; 0x310c <vTaskSwitchContext>
    portRESTORE_CONTEXT();
    1ba0:	a0 91 e5 18 	lds	r26, 0x18E5	; 0x8018e5 <pxCurrentTCB>
    1ba4:	b0 91 e6 18 	lds	r27, 0x18E6	; 0x8018e6 <pxCurrentTCB+0x1>
    1ba8:	cd 91       	ld	r28, X+
    1baa:	cd bf       	out	0x3d, r28	; 61
    1bac:	dd 91       	ld	r29, X+
    1bae:	de bf       	out	0x3e, r29	; 62
    1bb0:	ff 91       	pop	r31
    1bb2:	ef 91       	pop	r30
    1bb4:	df 91       	pop	r29
    1bb6:	cf 91       	pop	r28
    1bb8:	bf 91       	pop	r27
    1bba:	af 91       	pop	r26
    1bbc:	9f 91       	pop	r25
    1bbe:	8f 91       	pop	r24
    1bc0:	7f 91       	pop	r23
    1bc2:	6f 91       	pop	r22
    1bc4:	5f 91       	pop	r21
    1bc6:	4f 91       	pop	r20
    1bc8:	3f 91       	pop	r19
    1bca:	2f 91       	pop	r18
    1bcc:	1f 91       	pop	r17
    1bce:	0f 91       	pop	r16
    1bd0:	ff 90       	pop	r15
    1bd2:	ef 90       	pop	r14
    1bd4:	df 90       	pop	r13
    1bd6:	cf 90       	pop	r12
    1bd8:	bf 90       	pop	r11
    1bda:	af 90       	pop	r10
    1bdc:	9f 90       	pop	r9
    1bde:	8f 90       	pop	r8
    1be0:	7f 90       	pop	r7
    1be2:	6f 90       	pop	r6
    1be4:	5f 90       	pop	r5
    1be6:	4f 90       	pop	r4
    1be8:	3f 90       	pop	r3
    1bea:	2f 90       	pop	r2
    1bec:	1f 90       	pop	r1
    1bee:	0f 90       	pop	r0
    1bf0:	0c be       	out	0x3c, r0	; 60
    1bf2:	0f 90       	pop	r0
    1bf4:	0b be       	out	0x3b, r0	; 59
    1bf6:	0f 90       	pop	r0
    1bf8:	0f be       	out	0x3f, r0	; 63
    1bfa:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
    1bfc:	08 95       	ret

00001bfe <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
    1bfe:	0f 92       	push	r0
    1c00:	0f b6       	in	r0, 0x3f	; 63
    1c02:	f8 94       	cli
    1c04:	0f 92       	push	r0
    1c06:	0b b6       	in	r0, 0x3b	; 59
    1c08:	0f 92       	push	r0
    1c0a:	0c b6       	in	r0, 0x3c	; 60
    1c0c:	0f 92       	push	r0
    1c0e:	1f 92       	push	r1
    1c10:	11 24       	eor	r1, r1
    1c12:	2f 92       	push	r2
    1c14:	3f 92       	push	r3
    1c16:	4f 92       	push	r4
    1c18:	5f 92       	push	r5
    1c1a:	6f 92       	push	r6
    1c1c:	7f 92       	push	r7
    1c1e:	8f 92       	push	r8
    1c20:	9f 92       	push	r9
    1c22:	af 92       	push	r10
    1c24:	bf 92       	push	r11
    1c26:	cf 92       	push	r12
    1c28:	df 92       	push	r13
    1c2a:	ef 92       	push	r14
    1c2c:	ff 92       	push	r15
    1c2e:	0f 93       	push	r16
    1c30:	1f 93       	push	r17
    1c32:	2f 93       	push	r18
    1c34:	3f 93       	push	r19
    1c36:	4f 93       	push	r20
    1c38:	5f 93       	push	r21
    1c3a:	6f 93       	push	r22
    1c3c:	7f 93       	push	r23
    1c3e:	8f 93       	push	r24
    1c40:	9f 93       	push	r25
    1c42:	af 93       	push	r26
    1c44:	bf 93       	push	r27
    1c46:	cf 93       	push	r28
    1c48:	df 93       	push	r29
    1c4a:	ef 93       	push	r30
    1c4c:	ff 93       	push	r31
    1c4e:	a0 91 e5 18 	lds	r26, 0x18E5	; 0x8018e5 <pxCurrentTCB>
    1c52:	b0 91 e6 18 	lds	r27, 0x18E6	; 0x8018e6 <pxCurrentTCB+0x1>
    1c56:	0d b6       	in	r0, 0x3d	; 61
    1c58:	0d 92       	st	X+, r0
    1c5a:	0e b6       	in	r0, 0x3e	; 62
    1c5c:	0d 92       	st	X+, r0

    sleep_reset();        //     reset the sleep_mode() faster than sleep_disable();
    1c5e:	13 be       	out	0x33, r1	; 51

    if( xTaskIncrementTick() != pdFALSE )
    1c60:	0e 94 1c 17 	call	0x2e38	; 0x2e38 <xTaskIncrementTick>
    1c64:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
    1c66:	0e 94 86 18 	call	0x310c	; 0x310c <vTaskSwitchContext>
    }

    portRESTORE_CONTEXT();
    1c6a:	a0 91 e5 18 	lds	r26, 0x18E5	; 0x8018e5 <pxCurrentTCB>
    1c6e:	b0 91 e6 18 	lds	r27, 0x18E6	; 0x8018e6 <pxCurrentTCB+0x1>
    1c72:	cd 91       	ld	r28, X+
    1c74:	cd bf       	out	0x3d, r28	; 61
    1c76:	dd 91       	ld	r29, X+
    1c78:	de bf       	out	0x3e, r29	; 62
    1c7a:	ff 91       	pop	r31
    1c7c:	ef 91       	pop	r30
    1c7e:	df 91       	pop	r29
    1c80:	cf 91       	pop	r28
    1c82:	bf 91       	pop	r27
    1c84:	af 91       	pop	r26
    1c86:	9f 91       	pop	r25
    1c88:	8f 91       	pop	r24
    1c8a:	7f 91       	pop	r23
    1c8c:	6f 91       	pop	r22
    1c8e:	5f 91       	pop	r21
    1c90:	4f 91       	pop	r20
    1c92:	3f 91       	pop	r19
    1c94:	2f 91       	pop	r18
    1c96:	1f 91       	pop	r17
    1c98:	0f 91       	pop	r16
    1c9a:	ff 90       	pop	r15
    1c9c:	ef 90       	pop	r14
    1c9e:	df 90       	pop	r13
    1ca0:	cf 90       	pop	r12
    1ca2:	bf 90       	pop	r11
    1ca4:	af 90       	pop	r10
    1ca6:	9f 90       	pop	r9
    1ca8:	8f 90       	pop	r8
    1caa:	7f 90       	pop	r7
    1cac:	6f 90       	pop	r6
    1cae:	5f 90       	pop	r5
    1cb0:	4f 90       	pop	r4
    1cb2:	3f 90       	pop	r3
    1cb4:	2f 90       	pop	r2
    1cb6:	1f 90       	pop	r1
    1cb8:	0f 90       	pop	r0
    1cba:	0c be       	out	0x3c, r0	; 60
    1cbc:	0f 90       	pop	r0
    1cbe:	0b be       	out	0x3b, r0	; 59
    1cc0:	0f 90       	pop	r0
    1cc2:	0f be       	out	0x3f, r0	; 63
    1cc4:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
    1cc6:	08 95       	ret

00001cc8 <__vector_12>:
     */
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
//  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
    1cc8:	9a df       	rcall	.-204    	; 0x1bfe <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
    1cca:	18 95       	reti

00001ccc <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    1ccc:	0f b6       	in	r0, 0x3f	; 63
    1cce:	f8 94       	cli
    1cd0:	0f 92       	push	r0
    1cd2:	fc 01       	movw	r30, r24
    1cd4:	96 8d       	ldd	r25, Z+30	; 0x1e
    1cd6:	0f 90       	pop	r0
    1cd8:	0f be       	out	0x3f, r0	; 63
    1cda:	81 e0       	ldi	r24, 0x01	; 1
    1cdc:	91 11       	cpse	r25, r1
    1cde:	80 e0       	ldi	r24, 0x00	; 0
    1ce0:	08 95       	ret

00001ce2 <prvCopyDataToQueue>:
    1ce2:	0f 93       	push	r16
    1ce4:	1f 93       	push	r17
    1ce6:	cf 93       	push	r28
    1ce8:	df 93       	push	r29
    1cea:	ec 01       	movw	r28, r24
    1cec:	04 2f       	mov	r16, r20
    1cee:	1e 8d       	ldd	r17, Y+30	; 0x1e
    1cf0:	48 a1       	ldd	r20, Y+32	; 0x20
    1cf2:	41 11       	cpse	r20, r1
    1cf4:	0c c0       	rjmp	.+24     	; 0x1d0e <prvCopyDataToQueue+0x2c>
    1cf6:	88 81       	ld	r24, Y
    1cf8:	99 81       	ldd	r25, Y+1	; 0x01
    1cfa:	89 2b       	or	r24, r25
    1cfc:	09 f0       	breq	.+2      	; 0x1d00 <prvCopyDataToQueue+0x1e>
    1cfe:	42 c0       	rjmp	.+132    	; 0x1d84 <prvCopyDataToQueue+0xa2>
    1d00:	8c 81       	ldd	r24, Y+4	; 0x04
    1d02:	9d 81       	ldd	r25, Y+5	; 0x05
    1d04:	0e 94 d7 1a 	call	0x35ae	; 0x35ae <xTaskPriorityDisinherit>
    1d08:	1d 82       	std	Y+5, r1	; 0x05
    1d0a:	1c 82       	std	Y+4, r1	; 0x04
    1d0c:	42 c0       	rjmp	.+132    	; 0x1d92 <prvCopyDataToQueue+0xb0>
    1d0e:	01 11       	cpse	r16, r1
    1d10:	17 c0       	rjmp	.+46     	; 0x1d40 <prvCopyDataToQueue+0x5e>
    1d12:	50 e0       	ldi	r21, 0x00	; 0
    1d14:	8a 81       	ldd	r24, Y+2	; 0x02
    1d16:	9b 81       	ldd	r25, Y+3	; 0x03
    1d18:	0e 94 77 31 	call	0x62ee	; 0x62ee <memcpy>
    1d1c:	28 a1       	ldd	r18, Y+32	; 0x20
    1d1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d20:	9b 81       	ldd	r25, Y+3	; 0x03
    1d22:	82 0f       	add	r24, r18
    1d24:	91 1d       	adc	r25, r1
    1d26:	9b 83       	std	Y+3, r25	; 0x03
    1d28:	8a 83       	std	Y+2, r24	; 0x02
    1d2a:	2c 81       	ldd	r18, Y+4	; 0x04
    1d2c:	3d 81       	ldd	r19, Y+5	; 0x05
    1d2e:	82 17       	cp	r24, r18
    1d30:	93 07       	cpc	r25, r19
    1d32:	50 f1       	brcs	.+84     	; 0x1d88 <prvCopyDataToQueue+0xa6>
    1d34:	88 81       	ld	r24, Y
    1d36:	99 81       	ldd	r25, Y+1	; 0x01
    1d38:	9b 83       	std	Y+3, r25	; 0x03
    1d3a:	8a 83       	std	Y+2, r24	; 0x02
    1d3c:	80 e0       	ldi	r24, 0x00	; 0
    1d3e:	29 c0       	rjmp	.+82     	; 0x1d92 <prvCopyDataToQueue+0xb0>
    1d40:	50 e0       	ldi	r21, 0x00	; 0
    1d42:	8e 81       	ldd	r24, Y+6	; 0x06
    1d44:	9f 81       	ldd	r25, Y+7	; 0x07
    1d46:	0e 94 77 31 	call	0x62ee	; 0x62ee <memcpy>
    1d4a:	88 a1       	ldd	r24, Y+32	; 0x20
    1d4c:	90 e0       	ldi	r25, 0x00	; 0
    1d4e:	91 95       	neg	r25
    1d50:	81 95       	neg	r24
    1d52:	91 09       	sbc	r25, r1
    1d54:	2e 81       	ldd	r18, Y+6	; 0x06
    1d56:	3f 81       	ldd	r19, Y+7	; 0x07
    1d58:	28 0f       	add	r18, r24
    1d5a:	39 1f       	adc	r19, r25
    1d5c:	3f 83       	std	Y+7, r19	; 0x07
    1d5e:	2e 83       	std	Y+6, r18	; 0x06
    1d60:	48 81       	ld	r20, Y
    1d62:	59 81       	ldd	r21, Y+1	; 0x01
    1d64:	24 17       	cp	r18, r20
    1d66:	35 07       	cpc	r19, r21
    1d68:	30 f4       	brcc	.+12     	; 0x1d76 <prvCopyDataToQueue+0x94>
    1d6a:	2c 81       	ldd	r18, Y+4	; 0x04
    1d6c:	3d 81       	ldd	r19, Y+5	; 0x05
    1d6e:	82 0f       	add	r24, r18
    1d70:	93 1f       	adc	r25, r19
    1d72:	9f 83       	std	Y+7, r25	; 0x07
    1d74:	8e 83       	std	Y+6, r24	; 0x06
    1d76:	02 30       	cpi	r16, 0x02	; 2
    1d78:	49 f4       	brne	.+18     	; 0x1d8c <prvCopyDataToQueue+0xaa>
    1d7a:	11 23       	and	r17, r17
    1d7c:	49 f0       	breq	.+18     	; 0x1d90 <prvCopyDataToQueue+0xae>
    1d7e:	11 50       	subi	r17, 0x01	; 1
    1d80:	80 e0       	ldi	r24, 0x00	; 0
    1d82:	07 c0       	rjmp	.+14     	; 0x1d92 <prvCopyDataToQueue+0xb0>
    1d84:	80 e0       	ldi	r24, 0x00	; 0
    1d86:	05 c0       	rjmp	.+10     	; 0x1d92 <prvCopyDataToQueue+0xb0>
    1d88:	80 e0       	ldi	r24, 0x00	; 0
    1d8a:	03 c0       	rjmp	.+6      	; 0x1d92 <prvCopyDataToQueue+0xb0>
    1d8c:	80 e0       	ldi	r24, 0x00	; 0
    1d8e:	01 c0       	rjmp	.+2      	; 0x1d92 <prvCopyDataToQueue+0xb0>
    1d90:	80 e0       	ldi	r24, 0x00	; 0
    1d92:	1f 5f       	subi	r17, 0xFF	; 255
    1d94:	1e 8f       	std	Y+30, r17	; 0x1e
    1d96:	df 91       	pop	r29
    1d98:	cf 91       	pop	r28
    1d9a:	1f 91       	pop	r17
    1d9c:	0f 91       	pop	r16
    1d9e:	08 95       	ret

00001da0 <prvCopyDataFromQueue>:
    1da0:	fc 01       	movw	r30, r24
    1da2:	40 a1       	ldd	r20, Z+32	; 0x20
    1da4:	44 23       	and	r20, r20
    1da6:	a9 f0       	breq	.+42     	; 0x1dd2 <prvCopyDataFromQueue+0x32>
    1da8:	50 e0       	ldi	r21, 0x00	; 0
    1daa:	26 81       	ldd	r18, Z+6	; 0x06
    1dac:	37 81       	ldd	r19, Z+7	; 0x07
    1dae:	24 0f       	add	r18, r20
    1db0:	35 1f       	adc	r19, r21
    1db2:	37 83       	std	Z+7, r19	; 0x07
    1db4:	26 83       	std	Z+6, r18	; 0x06
    1db6:	84 81       	ldd	r24, Z+4	; 0x04
    1db8:	95 81       	ldd	r25, Z+5	; 0x05
    1dba:	28 17       	cp	r18, r24
    1dbc:	39 07       	cpc	r19, r25
    1dbe:	20 f0       	brcs	.+8      	; 0x1dc8 <prvCopyDataFromQueue+0x28>
    1dc0:	80 81       	ld	r24, Z
    1dc2:	91 81       	ldd	r25, Z+1	; 0x01
    1dc4:	97 83       	std	Z+7, r25	; 0x07
    1dc6:	86 83       	std	Z+6, r24	; 0x06
    1dc8:	cb 01       	movw	r24, r22
    1dca:	66 81       	ldd	r22, Z+6	; 0x06
    1dcc:	77 81       	ldd	r23, Z+7	; 0x07
    1dce:	0c 94 77 31 	jmp	0x62ee	; 0x62ee <memcpy>
    1dd2:	08 95       	ret

00001dd4 <prvUnlockQueue>:
    1dd4:	ef 92       	push	r14
    1dd6:	ff 92       	push	r15
    1dd8:	0f 93       	push	r16
    1dda:	1f 93       	push	r17
    1ddc:	cf 93       	push	r28
    1dde:	8c 01       	movw	r16, r24
    1de0:	0f b6       	in	r0, 0x3f	; 63
    1de2:	f8 94       	cli
    1de4:	0f 92       	push	r0
    1de6:	fc 01       	movw	r30, r24
    1de8:	c2 a1       	ldd	r28, Z+34	; 0x22
    1dea:	1c 16       	cp	r1, r28
    1dec:	ac f4       	brge	.+42     	; 0x1e18 <prvUnlockQueue+0x44>
    1dee:	83 89       	ldd	r24, Z+19	; 0x13
    1df0:	81 11       	cpse	r24, r1
    1df2:	06 c0       	rjmp	.+12     	; 0x1e00 <prvUnlockQueue+0x2c>
    1df4:	11 c0       	rjmp	.+34     	; 0x1e18 <prvUnlockQueue+0x44>
    1df6:	f8 01       	movw	r30, r16
    1df8:	83 89       	ldd	r24, Z+19	; 0x13
    1dfa:	81 11       	cpse	r24, r1
    1dfc:	05 c0       	rjmp	.+10     	; 0x1e08 <prvUnlockQueue+0x34>
    1dfe:	0c c0       	rjmp	.+24     	; 0x1e18 <prvUnlockQueue+0x44>
    1e00:	78 01       	movw	r14, r16
    1e02:	f3 e1       	ldi	r31, 0x13	; 19
    1e04:	ef 0e       	add	r14, r31
    1e06:	f1 1c       	adc	r15, r1
    1e08:	c7 01       	movw	r24, r14
    1e0a:	0e 94 60 19 	call	0x32c0	; 0x32c0 <xTaskRemoveFromEventList>
    1e0e:	81 11       	cpse	r24, r1
    1e10:	0e 94 52 1a 	call	0x34a4	; 0x34a4 <vTaskMissedYield>
    1e14:	c1 50       	subi	r28, 0x01	; 1
    1e16:	79 f7       	brne	.-34     	; 0x1df6 <prvUnlockQueue+0x22>
    1e18:	8f ef       	ldi	r24, 0xFF	; 255
    1e1a:	f8 01       	movw	r30, r16
    1e1c:	82 a3       	std	Z+34, r24	; 0x22
    1e1e:	0f 90       	pop	r0
    1e20:	0f be       	out	0x3f, r0	; 63
    1e22:	0f b6       	in	r0, 0x3f	; 63
    1e24:	f8 94       	cli
    1e26:	0f 92       	push	r0
    1e28:	c1 a1       	ldd	r28, Z+33	; 0x21
    1e2a:	1c 16       	cp	r1, r28
    1e2c:	ac f4       	brge	.+42     	; 0x1e58 <prvUnlockQueue+0x84>
    1e2e:	80 85       	ldd	r24, Z+8	; 0x08
    1e30:	81 11       	cpse	r24, r1
    1e32:	06 c0       	rjmp	.+12     	; 0x1e40 <prvUnlockQueue+0x6c>
    1e34:	11 c0       	rjmp	.+34     	; 0x1e58 <prvUnlockQueue+0x84>
    1e36:	f8 01       	movw	r30, r16
    1e38:	80 85       	ldd	r24, Z+8	; 0x08
    1e3a:	81 11       	cpse	r24, r1
    1e3c:	05 c0       	rjmp	.+10     	; 0x1e48 <prvUnlockQueue+0x74>
    1e3e:	0c c0       	rjmp	.+24     	; 0x1e58 <prvUnlockQueue+0x84>
    1e40:	78 01       	movw	r14, r16
    1e42:	f8 e0       	ldi	r31, 0x08	; 8
    1e44:	ef 0e       	add	r14, r31
    1e46:	f1 1c       	adc	r15, r1
    1e48:	c7 01       	movw	r24, r14
    1e4a:	0e 94 60 19 	call	0x32c0	; 0x32c0 <xTaskRemoveFromEventList>
    1e4e:	81 11       	cpse	r24, r1
    1e50:	0e 94 52 1a 	call	0x34a4	; 0x34a4 <vTaskMissedYield>
    1e54:	c1 50       	subi	r28, 0x01	; 1
    1e56:	79 f7       	brne	.-34     	; 0x1e36 <prvUnlockQueue+0x62>
    1e58:	8f ef       	ldi	r24, 0xFF	; 255
    1e5a:	f8 01       	movw	r30, r16
    1e5c:	81 a3       	std	Z+33, r24	; 0x21
    1e5e:	0f 90       	pop	r0
    1e60:	0f be       	out	0x3f, r0	; 63
    1e62:	cf 91       	pop	r28
    1e64:	1f 91       	pop	r17
    1e66:	0f 91       	pop	r16
    1e68:	ff 90       	pop	r15
    1e6a:	ef 90       	pop	r14
    1e6c:	08 95       	ret

00001e6e <xQueueGenericReset>:
    1e6e:	cf 93       	push	r28
    1e70:	df 93       	push	r29
    1e72:	ec 01       	movw	r28, r24
    1e74:	0f b6       	in	r0, 0x3f	; 63
    1e76:	f8 94       	cli
    1e78:	0f 92       	push	r0
    1e7a:	e8 81       	ld	r30, Y
    1e7c:	f9 81       	ldd	r31, Y+1	; 0x01
    1e7e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1e80:	28 a1       	ldd	r18, Y+32	; 0x20
    1e82:	90 e0       	ldi	r25, 0x00	; 0
    1e84:	30 e0       	ldi	r19, 0x00	; 0
    1e86:	82 9f       	mul	r24, r18
    1e88:	a0 01       	movw	r20, r0
    1e8a:	83 9f       	mul	r24, r19
    1e8c:	50 0d       	add	r21, r0
    1e8e:	92 9f       	mul	r25, r18
    1e90:	50 0d       	add	r21, r0
    1e92:	11 24       	eor	r1, r1
    1e94:	4e 0f       	add	r20, r30
    1e96:	5f 1f       	adc	r21, r31
    1e98:	5d 83       	std	Y+5, r21	; 0x05
    1e9a:	4c 83       	std	Y+4, r20	; 0x04
    1e9c:	1e 8e       	std	Y+30, r1	; 0x1e
    1e9e:	fb 83       	std	Y+3, r31	; 0x03
    1ea0:	ea 83       	std	Y+2, r30	; 0x02
    1ea2:	01 97       	sbiw	r24, 0x01	; 1
    1ea4:	82 9f       	mul	r24, r18
    1ea6:	a0 01       	movw	r20, r0
    1ea8:	83 9f       	mul	r24, r19
    1eaa:	50 0d       	add	r21, r0
    1eac:	92 9f       	mul	r25, r18
    1eae:	50 0d       	add	r21, r0
    1eb0:	11 24       	eor	r1, r1
    1eb2:	cf 01       	movw	r24, r30
    1eb4:	84 0f       	add	r24, r20
    1eb6:	95 1f       	adc	r25, r21
    1eb8:	9f 83       	std	Y+7, r25	; 0x07
    1eba:	8e 83       	std	Y+6, r24	; 0x06
    1ebc:	8f ef       	ldi	r24, 0xFF	; 255
    1ebe:	89 a3       	std	Y+33, r24	; 0x21
    1ec0:	8a a3       	std	Y+34, r24	; 0x22
    1ec2:	61 11       	cpse	r22, r1
    1ec4:	0b c0       	rjmp	.+22     	; 0x1edc <xQueueGenericReset+0x6e>
    1ec6:	88 85       	ldd	r24, Y+8	; 0x08
    1ec8:	88 23       	and	r24, r24
    1eca:	71 f0       	breq	.+28     	; 0x1ee8 <xQueueGenericReset+0x7a>
    1ecc:	ce 01       	movw	r24, r28
    1ece:	08 96       	adiw	r24, 0x08	; 8
    1ed0:	0e 94 60 19 	call	0x32c0	; 0x32c0 <xTaskRemoveFromEventList>
    1ed4:	88 23       	and	r24, r24
    1ed6:	41 f0       	breq	.+16     	; 0x1ee8 <xQueueGenericReset+0x7a>
    1ed8:	31 de       	rcall	.-926    	; 0x1b3c <vPortYield>
    1eda:	06 c0       	rjmp	.+12     	; 0x1ee8 <xQueueGenericReset+0x7a>
    1edc:	ce 01       	movw	r24, r28
    1ede:	08 96       	adiw	r24, 0x08	; 8
    1ee0:	e5 dc       	rcall	.-1590   	; 0x18ac <vListInitialise>
    1ee2:	ce 01       	movw	r24, r28
    1ee4:	43 96       	adiw	r24, 0x13	; 19
    1ee6:	e2 dc       	rcall	.-1596   	; 0x18ac <vListInitialise>
    1ee8:	0f 90       	pop	r0
    1eea:	0f be       	out	0x3f, r0	; 63
    1eec:	81 e0       	ldi	r24, 0x01	; 1
    1eee:	df 91       	pop	r29
    1ef0:	cf 91       	pop	r28
    1ef2:	08 95       	ret

00001ef4 <xQueueGenericCreate>:
    1ef4:	ff 92       	push	r15
    1ef6:	0f 93       	push	r16
    1ef8:	1f 93       	push	r17
    1efa:	cf 93       	push	r28
    1efc:	df 93       	push	r29
    1efe:	08 2f       	mov	r16, r24
    1f00:	16 2f       	mov	r17, r22
    1f02:	f4 2e       	mov	r15, r20
    1f04:	66 23       	and	r22, r22
    1f06:	b9 f0       	breq	.+46     	; 0x1f36 <xQueueGenericCreate+0x42>
    1f08:	86 9f       	mul	r24, r22
    1f0a:	c0 01       	movw	r24, r0
    1f0c:	11 24       	eor	r1, r1
    1f0e:	85 96       	adiw	r24, 0x25	; 37
    1f10:	e3 db       	rcall	.-2106   	; 0x16d8 <pvPortMalloc>
    1f12:	ec 01       	movw	r28, r24
    1f14:	00 97       	sbiw	r24, 0x00	; 0
    1f16:	41 f4       	brne	.+16     	; 0x1f28 <xQueueGenericCreate+0x34>
    1f18:	14 c0       	rjmp	.+40     	; 0x1f42 <xQueueGenericCreate+0x4e>
    1f1a:	0f 8f       	std	Y+31, r16	; 0x1f
    1f1c:	18 a3       	std	Y+32, r17	; 0x20
    1f1e:	61 e0       	ldi	r22, 0x01	; 1
    1f20:	ce 01       	movw	r24, r28
    1f22:	a5 df       	rcall	.-182    	; 0x1e6e <xQueueGenericReset>
    1f24:	fc a2       	std	Y+36, r15	; 0x24
    1f26:	0d c0       	rjmp	.+26     	; 0x1f42 <xQueueGenericCreate+0x4e>
    1f28:	85 96       	adiw	r24, 0x25	; 37
    1f2a:	99 83       	std	Y+1, r25	; 0x01
    1f2c:	88 83       	st	Y, r24
    1f2e:	f5 cf       	rjmp	.-22     	; 0x1f1a <xQueueGenericCreate+0x26>
    1f30:	d9 83       	std	Y+1, r29	; 0x01
    1f32:	c8 83       	st	Y, r28
    1f34:	f2 cf       	rjmp	.-28     	; 0x1f1a <xQueueGenericCreate+0x26>
    1f36:	85 e2       	ldi	r24, 0x25	; 37
    1f38:	90 e0       	ldi	r25, 0x00	; 0
    1f3a:	ce db       	rcall	.-2148   	; 0x16d8 <pvPortMalloc>
    1f3c:	ec 01       	movw	r28, r24
    1f3e:	89 2b       	or	r24, r25
    1f40:	b9 f7       	brne	.-18     	; 0x1f30 <xQueueGenericCreate+0x3c>
    1f42:	ce 01       	movw	r24, r28
    1f44:	df 91       	pop	r29
    1f46:	cf 91       	pop	r28
    1f48:	1f 91       	pop	r17
    1f4a:	0f 91       	pop	r16
    1f4c:	ff 90       	pop	r15
    1f4e:	08 95       	ret

00001f50 <xQueueGenericSend>:
    1f50:	9f 92       	push	r9
    1f52:	af 92       	push	r10
    1f54:	bf 92       	push	r11
    1f56:	cf 92       	push	r12
    1f58:	df 92       	push	r13
    1f5a:	ef 92       	push	r14
    1f5c:	ff 92       	push	r15
    1f5e:	0f 93       	push	r16
    1f60:	1f 93       	push	r17
    1f62:	cf 93       	push	r28
    1f64:	df 93       	push	r29
    1f66:	cd b7       	in	r28, 0x3d	; 61
    1f68:	de b7       	in	r29, 0x3e	; 62
    1f6a:	29 97       	sbiw	r28, 0x09	; 9
    1f6c:	0f b6       	in	r0, 0x3f	; 63
    1f6e:	f8 94       	cli
    1f70:	de bf       	out	0x3e, r29	; 62
    1f72:	0f be       	out	0x3f, r0	; 63
    1f74:	cd bf       	out	0x3d, r28	; 61
    1f76:	7c 01       	movw	r14, r24
    1f78:	5b 01       	movw	r10, r22
    1f7a:	2e 83       	std	Y+6, r18	; 0x06
    1f7c:	3f 83       	std	Y+7, r19	; 0x07
    1f7e:	48 87       	std	Y+8, r20	; 0x08
    1f80:	59 87       	std	Y+9, r21	; 0x09
    1f82:	10 e0       	ldi	r17, 0x00	; 0
    1f84:	99 24       	eor	r9, r9
    1f86:	93 94       	inc	r9
    1f88:	6c 01       	movw	r12, r24
    1f8a:	88 e0       	ldi	r24, 0x08	; 8
    1f8c:	c8 0e       	add	r12, r24
    1f8e:	d1 1c       	adc	r13, r1
    1f90:	0f b6       	in	r0, 0x3f	; 63
    1f92:	f8 94       	cli
    1f94:	0f 92       	push	r0
    1f96:	f7 01       	movw	r30, r14
    1f98:	96 8d       	ldd	r25, Z+30	; 0x1e
    1f9a:	87 8d       	ldd	r24, Z+31	; 0x1f
    1f9c:	98 17       	cp	r25, r24
    1f9e:	10 f0       	brcs	.+4      	; 0x1fa4 <xQueueGenericSend+0x54>
    1fa0:	02 30       	cpi	r16, 0x02	; 2
    1fa2:	b1 f4       	brne	.+44     	; 0x1fd0 <xQueueGenericSend+0x80>
    1fa4:	40 2f       	mov	r20, r16
    1fa6:	b5 01       	movw	r22, r10
    1fa8:	c7 01       	movw	r24, r14
    1faa:	9b de       	rcall	.-714    	; 0x1ce2 <prvCopyDataToQueue>
    1fac:	f7 01       	movw	r30, r14
    1fae:	93 89       	ldd	r25, Z+19	; 0x13
    1fb0:	99 23       	and	r25, r25
    1fb2:	41 f0       	breq	.+16     	; 0x1fc4 <xQueueGenericSend+0x74>
    1fb4:	c7 01       	movw	r24, r14
    1fb6:	43 96       	adiw	r24, 0x13	; 19
    1fb8:	0e 94 60 19 	call	0x32c0	; 0x32c0 <xTaskRemoveFromEventList>
    1fbc:	88 23       	and	r24, r24
    1fbe:	21 f0       	breq	.+8      	; 0x1fc8 <xQueueGenericSend+0x78>
    1fc0:	bd dd       	rcall	.-1158   	; 0x1b3c <vPortYield>
    1fc2:	02 c0       	rjmp	.+4      	; 0x1fc8 <xQueueGenericSend+0x78>
    1fc4:	81 11       	cpse	r24, r1
    1fc6:	ba dd       	rcall	.-1164   	; 0x1b3c <vPortYield>
    1fc8:	0f 90       	pop	r0
    1fca:	0f be       	out	0x3f, r0	; 63
    1fcc:	81 e0       	ldi	r24, 0x01	; 1
    1fce:	4e c0       	rjmp	.+156    	; 0x206c <xQueueGenericSend+0x11c>
    1fd0:	8e 81       	ldd	r24, Y+6	; 0x06
    1fd2:	9f 81       	ldd	r25, Y+7	; 0x07
    1fd4:	a8 85       	ldd	r26, Y+8	; 0x08
    1fd6:	b9 85       	ldd	r27, Y+9	; 0x09
    1fd8:	89 2b       	or	r24, r25
    1fda:	8a 2b       	or	r24, r26
    1fdc:	8b 2b       	or	r24, r27
    1fde:	21 f4       	brne	.+8      	; 0x1fe8 <xQueueGenericSend+0x98>
    1fe0:	0f 90       	pop	r0
    1fe2:	0f be       	out	0x3f, r0	; 63
    1fe4:	80 e0       	ldi	r24, 0x00	; 0
    1fe6:	42 c0       	rjmp	.+132    	; 0x206c <xQueueGenericSend+0x11c>
    1fe8:	11 11       	cpse	r17, r1
    1fea:	05 c0       	rjmp	.+10     	; 0x1ff6 <xQueueGenericSend+0xa6>
    1fec:	ce 01       	movw	r24, r28
    1fee:	01 96       	adiw	r24, 0x01	; 1
    1ff0:	0e 94 ec 19 	call	0x33d8	; 0x33d8 <vTaskInternalSetTimeOutState>
    1ff4:	19 2d       	mov	r17, r9
    1ff6:	0f 90       	pop	r0
    1ff8:	0f be       	out	0x3f, r0	; 63
    1ffa:	0a d7       	rcall	.+3604   	; 0x2e10 <vTaskSuspendAll>
    1ffc:	0f b6       	in	r0, 0x3f	; 63
    1ffe:	f8 94       	cli
    2000:	0f 92       	push	r0
    2002:	f7 01       	movw	r30, r14
    2004:	81 a1       	ldd	r24, Z+33	; 0x21
    2006:	8f 3f       	cpi	r24, 0xFF	; 255
    2008:	09 f4       	brne	.+2      	; 0x200c <xQueueGenericSend+0xbc>
    200a:	11 a2       	std	Z+33, r1	; 0x21
    200c:	f7 01       	movw	r30, r14
    200e:	82 a1       	ldd	r24, Z+34	; 0x22
    2010:	8f 3f       	cpi	r24, 0xFF	; 255
    2012:	09 f4       	brne	.+2      	; 0x2016 <xQueueGenericSend+0xc6>
    2014:	12 a2       	std	Z+34, r1	; 0x22
    2016:	0f 90       	pop	r0
    2018:	0f be       	out	0x3f, r0	; 63
    201a:	be 01       	movw	r22, r28
    201c:	6a 5f       	subi	r22, 0xFA	; 250
    201e:	7f 4f       	sbci	r23, 0xFF	; 255
    2020:	ce 01       	movw	r24, r28
    2022:	01 96       	adiw	r24, 0x01	; 1
    2024:	0e 94 fd 19 	call	0x33fa	; 0x33fa <xTaskCheckForTimeOut>
    2028:	81 11       	cpse	r24, r1
    202a:	1c c0       	rjmp	.+56     	; 0x2064 <xQueueGenericSend+0x114>
    202c:	0f b6       	in	r0, 0x3f	; 63
    202e:	f8 94       	cli
    2030:	0f 92       	push	r0
    2032:	f7 01       	movw	r30, r14
    2034:	96 8d       	ldd	r25, Z+30	; 0x1e
    2036:	87 8d       	ldd	r24, Z+31	; 0x1f
    2038:	0f 90       	pop	r0
    203a:	0f be       	out	0x3f, r0	; 63
    203c:	98 13       	cpse	r25, r24
    203e:	0e c0       	rjmp	.+28     	; 0x205c <xQueueGenericSend+0x10c>
    2040:	4e 81       	ldd	r20, Y+6	; 0x06
    2042:	5f 81       	ldd	r21, Y+7	; 0x07
    2044:	68 85       	ldd	r22, Y+8	; 0x08
    2046:	79 85       	ldd	r23, Y+9	; 0x09
    2048:	c6 01       	movw	r24, r12
    204a:	0e 94 05 19 	call	0x320a	; 0x320a <vTaskPlaceOnEventList>
    204e:	c7 01       	movw	r24, r14
    2050:	c1 de       	rcall	.-638    	; 0x1dd4 <prvUnlockQueue>
    2052:	c7 d7       	rcall	.+3982   	; 0x2fe2 <xTaskResumeAll>
    2054:	81 11       	cpse	r24, r1
    2056:	9c cf       	rjmp	.-200    	; 0x1f90 <xQueueGenericSend+0x40>
    2058:	71 dd       	rcall	.-1310   	; 0x1b3c <vPortYield>
    205a:	9a cf       	rjmp	.-204    	; 0x1f90 <xQueueGenericSend+0x40>
    205c:	c7 01       	movw	r24, r14
    205e:	ba de       	rcall	.-652    	; 0x1dd4 <prvUnlockQueue>
    2060:	c0 d7       	rcall	.+3968   	; 0x2fe2 <xTaskResumeAll>
    2062:	96 cf       	rjmp	.-212    	; 0x1f90 <xQueueGenericSend+0x40>
    2064:	c7 01       	movw	r24, r14
    2066:	b6 de       	rcall	.-660    	; 0x1dd4 <prvUnlockQueue>
    2068:	bc d7       	rcall	.+3960   	; 0x2fe2 <xTaskResumeAll>
    206a:	80 e0       	ldi	r24, 0x00	; 0
    206c:	29 96       	adiw	r28, 0x09	; 9
    206e:	0f b6       	in	r0, 0x3f	; 63
    2070:	f8 94       	cli
    2072:	de bf       	out	0x3e, r29	; 62
    2074:	0f be       	out	0x3f, r0	; 63
    2076:	cd bf       	out	0x3d, r28	; 61
    2078:	df 91       	pop	r29
    207a:	cf 91       	pop	r28
    207c:	1f 91       	pop	r17
    207e:	0f 91       	pop	r16
    2080:	ff 90       	pop	r15
    2082:	ef 90       	pop	r14
    2084:	df 90       	pop	r13
    2086:	cf 90       	pop	r12
    2088:	bf 90       	pop	r11
    208a:	af 90       	pop	r10
    208c:	9f 90       	pop	r9
    208e:	08 95       	ret

00002090 <xQueueCreateMutex>:
    2090:	0f 93       	push	r16
    2092:	cf 93       	push	r28
    2094:	df 93       	push	r29
    2096:	48 2f       	mov	r20, r24
    2098:	60 e0       	ldi	r22, 0x00	; 0
    209a:	81 e0       	ldi	r24, 0x01	; 1
    209c:	2b df       	rcall	.-426    	; 0x1ef4 <xQueueGenericCreate>
    209e:	ec 01       	movw	r28, r24
    20a0:	00 97       	sbiw	r24, 0x00	; 0
    20a2:	61 f0       	breq	.+24     	; 0x20bc <xQueueCreateMutex+0x2c>
    20a4:	1d 82       	std	Y+5, r1	; 0x05
    20a6:	1c 82       	std	Y+4, r1	; 0x04
    20a8:	19 82       	std	Y+1, r1	; 0x01
    20aa:	18 82       	st	Y, r1
    20ac:	1e 82       	std	Y+6, r1	; 0x06
    20ae:	00 e0       	ldi	r16, 0x00	; 0
    20b0:	20 e0       	ldi	r18, 0x00	; 0
    20b2:	30 e0       	ldi	r19, 0x00	; 0
    20b4:	a9 01       	movw	r20, r18
    20b6:	60 e0       	ldi	r22, 0x00	; 0
    20b8:	70 e0       	ldi	r23, 0x00	; 0
    20ba:	4a df       	rcall	.-364    	; 0x1f50 <xQueueGenericSend>
    20bc:	ce 01       	movw	r24, r28
    20be:	df 91       	pop	r29
    20c0:	cf 91       	pop	r28
    20c2:	0f 91       	pop	r16
    20c4:	08 95       	ret

000020c6 <xQueueGenericSendFromISR>:
    20c6:	ef 92       	push	r14
    20c8:	ff 92       	push	r15
    20ca:	0f 93       	push	r16
    20cc:	1f 93       	push	r17
    20ce:	cf 93       	push	r28
    20d0:	df 93       	push	r29
    20d2:	8a 01       	movw	r16, r20
    20d4:	fc 01       	movw	r30, r24
    20d6:	56 8d       	ldd	r21, Z+30	; 0x1e
    20d8:	37 8d       	ldd	r19, Z+31	; 0x1f
    20da:	53 17       	cp	r21, r19
    20dc:	10 f0       	brcs	.+4      	; 0x20e2 <xQueueGenericSendFromISR+0x1c>
    20de:	22 30       	cpi	r18, 0x02	; 2
    20e0:	e9 f4       	brne	.+58     	; 0x211c <xQueueGenericSendFromISR+0x56>
    20e2:	42 2f       	mov	r20, r18
    20e4:	78 01       	movw	r14, r16
    20e6:	ec 01       	movw	r28, r24
    20e8:	1a a1       	ldd	r17, Y+34	; 0x22
    20ea:	fb dd       	rcall	.-1034   	; 0x1ce2 <prvCopyDataToQueue>
    20ec:	1f 3f       	cpi	r17, 0xFF	; 255
    20ee:	81 f4       	brne	.+32     	; 0x2110 <xQueueGenericSendFromISR+0x4a>
    20f0:	8b 89       	ldd	r24, Y+19	; 0x13
    20f2:	88 23       	and	r24, r24
    20f4:	a9 f0       	breq	.+42     	; 0x2120 <xQueueGenericSendFromISR+0x5a>
    20f6:	ce 01       	movw	r24, r28
    20f8:	43 96       	adiw	r24, 0x13	; 19
    20fa:	0e 94 60 19 	call	0x32c0	; 0x32c0 <xTaskRemoveFromEventList>
    20fe:	88 23       	and	r24, r24
    2100:	89 f0       	breq	.+34     	; 0x2124 <xQueueGenericSendFromISR+0x5e>
    2102:	e1 14       	cp	r14, r1
    2104:	f1 04       	cpc	r15, r1
    2106:	81 f0       	breq	.+32     	; 0x2128 <xQueueGenericSendFromISR+0x62>
    2108:	81 e0       	ldi	r24, 0x01	; 1
    210a:	f7 01       	movw	r30, r14
    210c:	80 83       	st	Z, r24
    210e:	0d c0       	rjmp	.+26     	; 0x212a <xQueueGenericSendFromISR+0x64>
    2110:	ff 24       	eor	r15, r15
    2112:	f3 94       	inc	r15
    2114:	f1 0e       	add	r15, r17
    2116:	fa a2       	std	Y+34, r15	; 0x22
    2118:	81 e0       	ldi	r24, 0x01	; 1
    211a:	07 c0       	rjmp	.+14     	; 0x212a <xQueueGenericSendFromISR+0x64>
    211c:	80 e0       	ldi	r24, 0x00	; 0
    211e:	05 c0       	rjmp	.+10     	; 0x212a <xQueueGenericSendFromISR+0x64>
    2120:	81 e0       	ldi	r24, 0x01	; 1
    2122:	03 c0       	rjmp	.+6      	; 0x212a <xQueueGenericSendFromISR+0x64>
    2124:	81 e0       	ldi	r24, 0x01	; 1
    2126:	01 c0       	rjmp	.+2      	; 0x212a <xQueueGenericSendFromISR+0x64>
    2128:	81 e0       	ldi	r24, 0x01	; 1
    212a:	df 91       	pop	r29
    212c:	cf 91       	pop	r28
    212e:	1f 91       	pop	r17
    2130:	0f 91       	pop	r16
    2132:	ff 90       	pop	r15
    2134:	ef 90       	pop	r14
    2136:	08 95       	ret

00002138 <xQueueReceive>:
    2138:	9f 92       	push	r9
    213a:	af 92       	push	r10
    213c:	bf 92       	push	r11
    213e:	cf 92       	push	r12
    2140:	df 92       	push	r13
    2142:	ef 92       	push	r14
    2144:	ff 92       	push	r15
    2146:	0f 93       	push	r16
    2148:	1f 93       	push	r17
    214a:	cf 93       	push	r28
    214c:	df 93       	push	r29
    214e:	cd b7       	in	r28, 0x3d	; 61
    2150:	de b7       	in	r29, 0x3e	; 62
    2152:	29 97       	sbiw	r28, 0x09	; 9
    2154:	0f b6       	in	r0, 0x3f	; 63
    2156:	f8 94       	cli
    2158:	de bf       	out	0x3e, r29	; 62
    215a:	0f be       	out	0x3f, r0	; 63
    215c:	cd bf       	out	0x3d, r28	; 61
    215e:	8c 01       	movw	r16, r24
    2160:	5b 01       	movw	r10, r22
    2162:	2e 83       	std	Y+6, r18	; 0x06
    2164:	3f 83       	std	Y+7, r19	; 0x07
    2166:	48 87       	std	Y+8, r20	; 0x08
    2168:	59 87       	std	Y+9, r21	; 0x09
    216a:	e1 2c       	mov	r14, r1
    216c:	99 24       	eor	r9, r9
    216e:	93 94       	inc	r9
    2170:	6c 01       	movw	r12, r24
    2172:	83 e1       	ldi	r24, 0x13	; 19
    2174:	c8 0e       	add	r12, r24
    2176:	d1 1c       	adc	r13, r1
    2178:	0f b6       	in	r0, 0x3f	; 63
    217a:	f8 94       	cli
    217c:	0f 92       	push	r0
    217e:	f8 01       	movw	r30, r16
    2180:	f6 8c       	ldd	r15, Z+30	; 0x1e
    2182:	ff 20       	and	r15, r15
    2184:	99 f0       	breq	.+38     	; 0x21ac <xQueueReceive+0x74>
    2186:	b5 01       	movw	r22, r10
    2188:	c8 01       	movw	r24, r16
    218a:	0a de       	rcall	.-1004   	; 0x1da0 <prvCopyDataFromQueue>
    218c:	fa 94       	dec	r15
    218e:	f8 01       	movw	r30, r16
    2190:	f6 8e       	std	Z+30, r15	; 0x1e
    2192:	80 85       	ldd	r24, Z+8	; 0x08
    2194:	88 23       	and	r24, r24
    2196:	31 f0       	breq	.+12     	; 0x21a4 <xQueueReceive+0x6c>
    2198:	c8 01       	movw	r24, r16
    219a:	08 96       	adiw	r24, 0x08	; 8
    219c:	0e 94 60 19 	call	0x32c0	; 0x32c0 <xTaskRemoveFromEventList>
    21a0:	81 11       	cpse	r24, r1
    21a2:	cc dc       	rcall	.-1640   	; 0x1b3c <vPortYield>
    21a4:	0f 90       	pop	r0
    21a6:	0f be       	out	0x3f, r0	; 63
    21a8:	81 e0       	ldi	r24, 0x01	; 1
    21aa:	4c c0       	rjmp	.+152    	; 0x2244 <__stack+0x45>
    21ac:	8e 81       	ldd	r24, Y+6	; 0x06
    21ae:	9f 81       	ldd	r25, Y+7	; 0x07
    21b0:	a8 85       	ldd	r26, Y+8	; 0x08
    21b2:	b9 85       	ldd	r27, Y+9	; 0x09
    21b4:	89 2b       	or	r24, r25
    21b6:	8a 2b       	or	r24, r26
    21b8:	8b 2b       	or	r24, r27
    21ba:	21 f4       	brne	.+8      	; 0x21c4 <xQueueReceive+0x8c>
    21bc:	0f 90       	pop	r0
    21be:	0f be       	out	0x3f, r0	; 63
    21c0:	80 e0       	ldi	r24, 0x00	; 0
    21c2:	40 c0       	rjmp	.+128    	; 0x2244 <__stack+0x45>
    21c4:	e1 10       	cpse	r14, r1
    21c6:	05 c0       	rjmp	.+10     	; 0x21d2 <xQueueReceive+0x9a>
    21c8:	ce 01       	movw	r24, r28
    21ca:	01 96       	adiw	r24, 0x01	; 1
    21cc:	0e 94 ec 19 	call	0x33d8	; 0x33d8 <vTaskInternalSetTimeOutState>
    21d0:	e9 2c       	mov	r14, r9
    21d2:	0f 90       	pop	r0
    21d4:	0f be       	out	0x3f, r0	; 63
    21d6:	1c d6       	rcall	.+3128   	; 0x2e10 <vTaskSuspendAll>
    21d8:	0f b6       	in	r0, 0x3f	; 63
    21da:	f8 94       	cli
    21dc:	0f 92       	push	r0
    21de:	f8 01       	movw	r30, r16
    21e0:	81 a1       	ldd	r24, Z+33	; 0x21
    21e2:	8f 3f       	cpi	r24, 0xFF	; 255
    21e4:	09 f4       	brne	.+2      	; 0x21e8 <xQueueReceive+0xb0>
    21e6:	11 a2       	std	Z+33, r1	; 0x21
    21e8:	f8 01       	movw	r30, r16
    21ea:	82 a1       	ldd	r24, Z+34	; 0x22
    21ec:	8f 3f       	cpi	r24, 0xFF	; 255
    21ee:	09 f4       	brne	.+2      	; 0x21f2 <xQueueReceive+0xba>
    21f0:	12 a2       	std	Z+34, r1	; 0x22
    21f2:	0f 90       	pop	r0
    21f4:	0f be       	out	0x3f, r0	; 63
    21f6:	be 01       	movw	r22, r28
    21f8:	6a 5f       	subi	r22, 0xFA	; 250
    21fa:	7f 4f       	sbci	r23, 0xFF	; 255
    21fc:	ce 01       	movw	r24, r28
    21fe:	01 96       	adiw	r24, 0x01	; 1
    2200:	0e 94 fd 19 	call	0x33fa	; 0x33fa <xTaskCheckForTimeOut>
    2204:	81 11       	cpse	r24, r1
    2206:	15 c0       	rjmp	.+42     	; 0x2232 <__stack+0x33>
    2208:	c8 01       	movw	r24, r16
    220a:	60 dd       	rcall	.-1344   	; 0x1ccc <prvIsQueueEmpty>
    220c:	88 23       	and	r24, r24
    220e:	69 f0       	breq	.+26     	; 0x222a <__stack+0x2b>
    2210:	4e 81       	ldd	r20, Y+6	; 0x06
    2212:	5f 81       	ldd	r21, Y+7	; 0x07
    2214:	68 85       	ldd	r22, Y+8	; 0x08
    2216:	79 85       	ldd	r23, Y+9	; 0x09
    2218:	c6 01       	movw	r24, r12
    221a:	f7 d7       	rcall	.+4078   	; 0x320a <vTaskPlaceOnEventList>
    221c:	c8 01       	movw	r24, r16
    221e:	da dd       	rcall	.-1100   	; 0x1dd4 <prvUnlockQueue>
    2220:	e0 d6       	rcall	.+3520   	; 0x2fe2 <xTaskResumeAll>
    2222:	81 11       	cpse	r24, r1
    2224:	a9 cf       	rjmp	.-174    	; 0x2178 <xQueueReceive+0x40>
    2226:	8a dc       	rcall	.-1772   	; 0x1b3c <vPortYield>
    2228:	a7 cf       	rjmp	.-178    	; 0x2178 <xQueueReceive+0x40>
    222a:	c8 01       	movw	r24, r16
    222c:	d3 dd       	rcall	.-1114   	; 0x1dd4 <prvUnlockQueue>
    222e:	d9 d6       	rcall	.+3506   	; 0x2fe2 <xTaskResumeAll>
    2230:	a3 cf       	rjmp	.-186    	; 0x2178 <xQueueReceive+0x40>
    2232:	c8 01       	movw	r24, r16
    2234:	cf dd       	rcall	.-1122   	; 0x1dd4 <prvUnlockQueue>
    2236:	d5 d6       	rcall	.+3498   	; 0x2fe2 <xTaskResumeAll>
    2238:	c8 01       	movw	r24, r16
    223a:	48 dd       	rcall	.-1392   	; 0x1ccc <prvIsQueueEmpty>
    223c:	88 23       	and	r24, r24
    223e:	09 f4       	brne	.+2      	; 0x2242 <__stack+0x43>
    2240:	9b cf       	rjmp	.-202    	; 0x2178 <xQueueReceive+0x40>
    2242:	80 e0       	ldi	r24, 0x00	; 0
    2244:	29 96       	adiw	r28, 0x09	; 9
    2246:	0f b6       	in	r0, 0x3f	; 63
    2248:	f8 94       	cli
    224a:	de bf       	out	0x3e, r29	; 62
    224c:	0f be       	out	0x3f, r0	; 63
    224e:	cd bf       	out	0x3d, r28	; 61
    2250:	df 91       	pop	r29
    2252:	cf 91       	pop	r28
    2254:	1f 91       	pop	r17
    2256:	0f 91       	pop	r16
    2258:	ff 90       	pop	r15
    225a:	ef 90       	pop	r14
    225c:	df 90       	pop	r13
    225e:	cf 90       	pop	r12
    2260:	bf 90       	pop	r11
    2262:	af 90       	pop	r10
    2264:	9f 90       	pop	r9
    2266:	08 95       	ret

00002268 <xQueueSemaphoreTake>:
    2268:	bf 92       	push	r11
    226a:	cf 92       	push	r12
    226c:	df 92       	push	r13
    226e:	ef 92       	push	r14
    2270:	ff 92       	push	r15
    2272:	0f 93       	push	r16
    2274:	1f 93       	push	r17
    2276:	cf 93       	push	r28
    2278:	df 93       	push	r29
    227a:	cd b7       	in	r28, 0x3d	; 61
    227c:	de b7       	in	r29, 0x3e	; 62
    227e:	29 97       	sbiw	r28, 0x09	; 9
    2280:	0f b6       	in	r0, 0x3f	; 63
    2282:	f8 94       	cli
    2284:	de bf       	out	0x3e, r29	; 62
    2286:	0f be       	out	0x3f, r0	; 63
    2288:	cd bf       	out	0x3d, r28	; 61
    228a:	8c 01       	movw	r16, r24
    228c:	4e 83       	std	Y+6, r20	; 0x06
    228e:	5f 83       	std	Y+7, r21	; 0x07
    2290:	68 87       	std	Y+8, r22	; 0x08
    2292:	79 87       	std	Y+9, r23	; 0x09
    2294:	b1 2c       	mov	r11, r1
    2296:	d1 2c       	mov	r13, r1
    2298:	cc 24       	eor	r12, r12
    229a:	c3 94       	inc	r12
    229c:	7c 01       	movw	r14, r24
    229e:	83 e1       	ldi	r24, 0x13	; 19
    22a0:	e8 0e       	add	r14, r24
    22a2:	f1 1c       	adc	r15, r1
    22a4:	0f b6       	in	r0, 0x3f	; 63
    22a6:	f8 94       	cli
    22a8:	0f 92       	push	r0
    22aa:	d8 01       	movw	r26, r16
    22ac:	5e 96       	adiw	r26, 0x1e	; 30
    22ae:	8c 91       	ld	r24, X
    22b0:	5e 97       	sbiw	r26, 0x1e	; 30
    22b2:	88 23       	and	r24, r24
    22b4:	d9 f0       	breq	.+54     	; 0x22ec <xQueueSemaphoreTake+0x84>
    22b6:	81 50       	subi	r24, 0x01	; 1
    22b8:	5e 96       	adiw	r26, 0x1e	; 30
    22ba:	8c 93       	st	X, r24
    22bc:	5e 97       	sbiw	r26, 0x1e	; 30
    22be:	8d 91       	ld	r24, X+
    22c0:	9c 91       	ld	r25, X
    22c2:	89 2b       	or	r24, r25
    22c4:	29 f4       	brne	.+10     	; 0x22d0 <xQueueSemaphoreTake+0x68>
    22c6:	0e 94 8d 1b 	call	0x371a	; 0x371a <pvTaskIncrementMutexHeldCount>
    22ca:	f8 01       	movw	r30, r16
    22cc:	95 83       	std	Z+5, r25	; 0x05
    22ce:	84 83       	std	Z+4, r24	; 0x04
    22d0:	d8 01       	movw	r26, r16
    22d2:	18 96       	adiw	r26, 0x08	; 8
    22d4:	8c 91       	ld	r24, X
    22d6:	88 23       	and	r24, r24
    22d8:	29 f0       	breq	.+10     	; 0x22e4 <xQueueSemaphoreTake+0x7c>
    22da:	c8 01       	movw	r24, r16
    22dc:	08 96       	adiw	r24, 0x08	; 8
    22de:	f0 d7       	rcall	.+4064   	; 0x32c0 <xTaskRemoveFromEventList>
    22e0:	81 11       	cpse	r24, r1
    22e2:	2c dc       	rcall	.-1960   	; 0x1b3c <vPortYield>
    22e4:	0f 90       	pop	r0
    22e6:	0f be       	out	0x3f, r0	; 63
    22e8:	81 e0       	ldi	r24, 0x01	; 1
    22ea:	7a c0       	rjmp	.+244    	; 0x23e0 <xQueueSemaphoreTake+0x178>
    22ec:	8e 81       	ldd	r24, Y+6	; 0x06
    22ee:	9f 81       	ldd	r25, Y+7	; 0x07
    22f0:	a8 85       	ldd	r26, Y+8	; 0x08
    22f2:	b9 85       	ldd	r27, Y+9	; 0x09
    22f4:	89 2b       	or	r24, r25
    22f6:	8a 2b       	or	r24, r26
    22f8:	8b 2b       	or	r24, r27
    22fa:	21 f4       	brne	.+8      	; 0x2304 <xQueueSemaphoreTake+0x9c>
    22fc:	0f 90       	pop	r0
    22fe:	0f be       	out	0x3f, r0	; 63
    2300:	80 e0       	ldi	r24, 0x00	; 0
    2302:	6e c0       	rjmp	.+220    	; 0x23e0 <xQueueSemaphoreTake+0x178>
    2304:	d1 10       	cpse	r13, r1
    2306:	05 c0       	rjmp	.+10     	; 0x2312 <xQueueSemaphoreTake+0xaa>
    2308:	ce 01       	movw	r24, r28
    230a:	01 96       	adiw	r24, 0x01	; 1
    230c:	0e 94 ec 19 	call	0x33d8	; 0x33d8 <vTaskInternalSetTimeOutState>
    2310:	dc 2c       	mov	r13, r12
    2312:	0f 90       	pop	r0
    2314:	0f be       	out	0x3f, r0	; 63
    2316:	7c d5       	rcall	.+2808   	; 0x2e10 <vTaskSuspendAll>
    2318:	0f b6       	in	r0, 0x3f	; 63
    231a:	f8 94       	cli
    231c:	0f 92       	push	r0
    231e:	f8 01       	movw	r30, r16
    2320:	81 a1       	ldd	r24, Z+33	; 0x21
    2322:	8f 3f       	cpi	r24, 0xFF	; 255
    2324:	09 f4       	brne	.+2      	; 0x2328 <xQueueSemaphoreTake+0xc0>
    2326:	11 a2       	std	Z+33, r1	; 0x21
    2328:	d8 01       	movw	r26, r16
    232a:	92 96       	adiw	r26, 0x22	; 34
    232c:	8c 91       	ld	r24, X
    232e:	92 97       	sbiw	r26, 0x22	; 34
    2330:	8f 3f       	cpi	r24, 0xFF	; 255
    2332:	11 f4       	brne	.+4      	; 0x2338 <xQueueSemaphoreTake+0xd0>
    2334:	92 96       	adiw	r26, 0x22	; 34
    2336:	1c 92       	st	X, r1
    2338:	0f 90       	pop	r0
    233a:	0f be       	out	0x3f, r0	; 63
    233c:	be 01       	movw	r22, r28
    233e:	6a 5f       	subi	r22, 0xFA	; 250
    2340:	7f 4f       	sbci	r23, 0xFF	; 255
    2342:	ce 01       	movw	r24, r28
    2344:	01 96       	adiw	r24, 0x01	; 1
    2346:	0e 94 fd 19 	call	0x33fa	; 0x33fa <xTaskCheckForTimeOut>
    234a:	81 11       	cpse	r24, r1
    234c:	24 c0       	rjmp	.+72     	; 0x2396 <xQueueSemaphoreTake+0x12e>
    234e:	c8 01       	movw	r24, r16
    2350:	bd dc       	rcall	.-1670   	; 0x1ccc <prvIsQueueEmpty>
    2352:	88 23       	and	r24, r24
    2354:	e1 f0       	breq	.+56     	; 0x238e <xQueueSemaphoreTake+0x126>
    2356:	f8 01       	movw	r30, r16
    2358:	80 81       	ld	r24, Z
    235a:	91 81       	ldd	r25, Z+1	; 0x01
    235c:	89 2b       	or	r24, r25
    235e:	51 f4       	brne	.+20     	; 0x2374 <xQueueSemaphoreTake+0x10c>
    2360:	0f b6       	in	r0, 0x3f	; 63
    2362:	f8 94       	cli
    2364:	0f 92       	push	r0
    2366:	84 81       	ldd	r24, Z+4	; 0x04
    2368:	95 81       	ldd	r25, Z+5	; 0x05
    236a:	0e 94 69 1a 	call	0x34d2	; 0x34d2 <xTaskPriorityInherit>
    236e:	b8 2e       	mov	r11, r24
    2370:	0f 90       	pop	r0
    2372:	0f be       	out	0x3f, r0	; 63
    2374:	4e 81       	ldd	r20, Y+6	; 0x06
    2376:	5f 81       	ldd	r21, Y+7	; 0x07
    2378:	68 85       	ldd	r22, Y+8	; 0x08
    237a:	79 85       	ldd	r23, Y+9	; 0x09
    237c:	c7 01       	movw	r24, r14
    237e:	45 d7       	rcall	.+3722   	; 0x320a <vTaskPlaceOnEventList>
    2380:	c8 01       	movw	r24, r16
    2382:	28 dd       	rcall	.-1456   	; 0x1dd4 <prvUnlockQueue>
    2384:	2e d6       	rcall	.+3164   	; 0x2fe2 <xTaskResumeAll>
    2386:	81 11       	cpse	r24, r1
    2388:	8d cf       	rjmp	.-230    	; 0x22a4 <xQueueSemaphoreTake+0x3c>
    238a:	d8 db       	rcall	.-2128   	; 0x1b3c <vPortYield>
    238c:	8b cf       	rjmp	.-234    	; 0x22a4 <xQueueSemaphoreTake+0x3c>
    238e:	c8 01       	movw	r24, r16
    2390:	21 dd       	rcall	.-1470   	; 0x1dd4 <prvUnlockQueue>
    2392:	27 d6       	rcall	.+3150   	; 0x2fe2 <xTaskResumeAll>
    2394:	87 cf       	rjmp	.-242    	; 0x22a4 <xQueueSemaphoreTake+0x3c>
    2396:	c8 01       	movw	r24, r16
    2398:	1d dd       	rcall	.-1478   	; 0x1dd4 <prvUnlockQueue>
    239a:	23 d6       	rcall	.+3142   	; 0x2fe2 <xTaskResumeAll>
    239c:	c8 01       	movw	r24, r16
    239e:	96 dc       	rcall	.-1748   	; 0x1ccc <prvIsQueueEmpty>
    23a0:	88 23       	and	r24, r24
    23a2:	09 f4       	brne	.+2      	; 0x23a6 <xQueueSemaphoreTake+0x13e>
    23a4:	7f cf       	rjmp	.-258    	; 0x22a4 <xQueueSemaphoreTake+0x3c>
    23a6:	bb 20       	and	r11, r11
    23a8:	d1 f0       	breq	.+52     	; 0x23de <xQueueSemaphoreTake+0x176>
    23aa:	0f b6       	in	r0, 0x3f	; 63
    23ac:	f8 94       	cli
    23ae:	0f 92       	push	r0
    23b0:	f8 01       	movw	r30, r16
    23b2:	83 89       	ldd	r24, Z+19	; 0x13
    23b4:	88 23       	and	r24, r24
    23b6:	39 f0       	breq	.+14     	; 0x23c6 <xQueueSemaphoreTake+0x15e>
    23b8:	02 8c       	ldd	r0, Z+26	; 0x1a
    23ba:	f3 8d       	ldd	r31, Z+27	; 0x1b
    23bc:	e0 2d       	mov	r30, r0
    23be:	80 81       	ld	r24, Z
    23c0:	66 e0       	ldi	r22, 0x06	; 6
    23c2:	68 1b       	sub	r22, r24
    23c4:	01 c0       	rjmp	.+2      	; 0x23c8 <xQueueSemaphoreTake+0x160>
    23c6:	60 e0       	ldi	r22, 0x00	; 0
    23c8:	d8 01       	movw	r26, r16
    23ca:	14 96       	adiw	r26, 0x04	; 4
    23cc:	8d 91       	ld	r24, X+
    23ce:	9c 91       	ld	r25, X
    23d0:	15 97       	sbiw	r26, 0x05	; 5
    23d2:	0e 94 17 1b 	call	0x362e	; 0x362e <vTaskPriorityDisinheritAfterTimeout>
    23d6:	0f 90       	pop	r0
    23d8:	0f be       	out	0x3f, r0	; 63
    23da:	80 e0       	ldi	r24, 0x00	; 0
    23dc:	01 c0       	rjmp	.+2      	; 0x23e0 <xQueueSemaphoreTake+0x178>
    23de:	80 e0       	ldi	r24, 0x00	; 0
    23e0:	29 96       	adiw	r28, 0x09	; 9
    23e2:	0f b6       	in	r0, 0x3f	; 63
    23e4:	f8 94       	cli
    23e6:	de bf       	out	0x3e, r29	; 62
    23e8:	0f be       	out	0x3f, r0	; 63
    23ea:	cd bf       	out	0x3d, r28	; 61
    23ec:	df 91       	pop	r29
    23ee:	cf 91       	pop	r28
    23f0:	1f 91       	pop	r17
    23f2:	0f 91       	pop	r16
    23f4:	ff 90       	pop	r15
    23f6:	ef 90       	pop	r14
    23f8:	df 90       	pop	r13
    23fa:	cf 90       	pop	r12
    23fc:	bf 90       	pop	r11
    23fe:	08 95       	ret

00002400 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
    {
    2400:	cf 93       	push	r28
    2402:	df 93       	push	r29
    2404:	ec 01       	movw	r28, r24
        will not actually cause the task to block, just place it on a blocked
        list.  It will not block until the scheduler is unlocked - at which
        time a yield will be performed.  If an item is added to the queue while
        the queue is locked, and the calling task blocks on the queue, then the
        calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    2406:	0f b6       	in	r0, 0x3f	; 63
    2408:	f8 94       	cli
    240a:	0f 92       	push	r0
    240c:	89 a1       	ldd	r24, Y+33	; 0x21
    240e:	8f 3f       	cpi	r24, 0xFF	; 255
    2410:	09 f4       	brne	.+2      	; 0x2414 <vQueueWaitForMessageRestricted+0x14>
    2412:	19 a2       	std	Y+33, r1	; 0x21
    2414:	8a a1       	ldd	r24, Y+34	; 0x22
    2416:	8f 3f       	cpi	r24, 0xFF	; 255
    2418:	09 f4       	brne	.+2      	; 0x241c <vQueueWaitForMessageRestricted+0x1c>
    241a:	1a a2       	std	Y+34, r1	; 0x22
    241c:	0f 90       	pop	r0
    241e:	0f be       	out	0x3f, r0	; 63
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    2420:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2422:	81 11       	cpse	r24, r1
    2424:	03 c0       	rjmp	.+6      	; 0x242c <vQueueWaitForMessageRestricted+0x2c>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    2426:	ce 01       	movw	r24, r28
    2428:	43 96       	adiw	r24, 0x13	; 19
    242a:	2a d7       	rcall	.+3668   	; 0x3280 <vTaskPlaceOnEventListRestricted>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
        prvUnlockQueue( pxQueue );
    242c:	ce 01       	movw	r24, r28
    242e:	d2 dc       	rcall	.-1628   	; 0x1dd4 <prvUnlockQueue>
    }
    2430:	df 91       	pop	r29
    2432:	cf 91       	pop	r28
    2434:	08 95       	ret

00002436 <prvBytesInBuffer>:
    }

    traceSTREAM_BUFFER_RECEIVE_FROM_ISR( xStreamBuffer, xReceivedLength );

    return xReceivedLength;
}
    2436:	fc 01       	movw	r30, r24
    2438:	44 81       	ldd	r20, Z+4	; 0x04
    243a:	55 81       	ldd	r21, Z+5	; 0x05
    243c:	22 81       	ldd	r18, Z+2	; 0x02
    243e:	33 81       	ldd	r19, Z+3	; 0x03
    2440:	24 0f       	add	r18, r20
    2442:	35 1f       	adc	r19, r21
    2444:	80 81       	ld	r24, Z
    2446:	91 81       	ldd	r25, Z+1	; 0x01
    2448:	b9 01       	movw	r22, r18
    244a:	68 1b       	sub	r22, r24
    244c:	79 0b       	sbc	r23, r25
    244e:	cb 01       	movw	r24, r22
    2450:	64 17       	cp	r22, r20
    2452:	75 07       	cpc	r23, r21
    2454:	10 f0       	brcs	.+4      	; 0x245a <prvBytesInBuffer+0x24>
    2456:	84 1b       	sub	r24, r20
    2458:	95 0b       	sbc	r25, r21
    245a:	08 95       	ret

0000245c <prvWriteBytesToBuffer>:
    245c:	af 92       	push	r10
    245e:	bf 92       	push	r11
    2460:	cf 92       	push	r12
    2462:	df 92       	push	r13
    2464:	ef 92       	push	r14
    2466:	ff 92       	push	r15
    2468:	0f 93       	push	r16
    246a:	1f 93       	push	r17
    246c:	cf 93       	push	r28
    246e:	df 93       	push	r29
    2470:	6c 01       	movw	r12, r24
    2472:	5b 01       	movw	r10, r22
    2474:	7a 01       	movw	r14, r20
    2476:	fc 01       	movw	r30, r24
    2478:	c2 81       	ldd	r28, Z+2	; 0x02
    247a:	d3 81       	ldd	r29, Z+3	; 0x03
    247c:	04 81       	ldd	r16, Z+4	; 0x04
    247e:	15 81       	ldd	r17, Z+5	; 0x05
    2480:	0c 1b       	sub	r16, r28
    2482:	1d 0b       	sbc	r17, r29
    2484:	40 17       	cp	r20, r16
    2486:	51 07       	cpc	r21, r17
    2488:	08 f4       	brcc	.+2      	; 0x248c <prvWriteBytesToBuffer+0x30>
    248a:	8a 01       	movw	r16, r20
    248c:	f6 01       	movw	r30, r12
    248e:	84 85       	ldd	r24, Z+12	; 0x0c
    2490:	95 85       	ldd	r25, Z+13	; 0x0d
    2492:	a8 01       	movw	r20, r16
    2494:	b5 01       	movw	r22, r10
    2496:	8c 0f       	add	r24, r28
    2498:	9d 1f       	adc	r25, r29
    249a:	0e 94 77 31 	call	0x62ee	; 0x62ee <memcpy>
    249e:	0e 15       	cp	r16, r14
    24a0:	1f 05       	cpc	r17, r15
    24a2:	58 f4       	brcc	.+22     	; 0x24ba <prvWriteBytesToBuffer+0x5e>
    24a4:	a7 01       	movw	r20, r14
    24a6:	40 1b       	sub	r20, r16
    24a8:	51 0b       	sbc	r21, r17
    24aa:	b5 01       	movw	r22, r10
    24ac:	60 0f       	add	r22, r16
    24ae:	71 1f       	adc	r23, r17
    24b0:	f6 01       	movw	r30, r12
    24b2:	84 85       	ldd	r24, Z+12	; 0x0c
    24b4:	95 85       	ldd	r25, Z+13	; 0x0d
    24b6:	0e 94 77 31 	call	0x62ee	; 0x62ee <memcpy>
    24ba:	ce 01       	movw	r24, r28
    24bc:	8e 0d       	add	r24, r14
    24be:	9f 1d       	adc	r25, r15
    24c0:	f6 01       	movw	r30, r12
    24c2:	24 81       	ldd	r18, Z+4	; 0x04
    24c4:	35 81       	ldd	r19, Z+5	; 0x05
    24c6:	82 17       	cp	r24, r18
    24c8:	93 07       	cpc	r25, r19
    24ca:	10 f0       	brcs	.+4      	; 0x24d0 <prvWriteBytesToBuffer+0x74>
    24cc:	82 1b       	sub	r24, r18
    24ce:	93 0b       	sbc	r25, r19
    24d0:	f6 01       	movw	r30, r12
    24d2:	93 83       	std	Z+3, r25	; 0x03
    24d4:	82 83       	std	Z+2, r24	; 0x02
    24d6:	c7 01       	movw	r24, r14
    24d8:	df 91       	pop	r29
    24da:	cf 91       	pop	r28
    24dc:	1f 91       	pop	r17
    24de:	0f 91       	pop	r16
    24e0:	ff 90       	pop	r15
    24e2:	ef 90       	pop	r14
    24e4:	df 90       	pop	r13
    24e6:	cf 90       	pop	r12
    24e8:	bf 90       	pop	r11
    24ea:	af 90       	pop	r10
    24ec:	08 95       	ret

000024ee <prvWriteMessageToBuffer>:
    24ee:	cf 92       	push	r12
    24f0:	df 92       	push	r13
    24f2:	ef 92       	push	r14
    24f4:	ff 92       	push	r15
    24f6:	0f 93       	push	r16
    24f8:	1f 93       	push	r17
    24fa:	cf 93       	push	r28
    24fc:	df 93       	push	r29
    24fe:	1f 92       	push	r1
    2500:	1f 92       	push	r1
    2502:	cd b7       	in	r28, 0x3d	; 61
    2504:	de b7       	in	r29, 0x3e	; 62
    2506:	5a 83       	std	Y+2, r21	; 0x02
    2508:	49 83       	std	Y+1, r20	; 0x01
    250a:	21 15       	cp	r18, r1
    250c:	31 05       	cpc	r19, r1
    250e:	c9 f0       	breq	.+50     	; 0x2542 <prvWriteMessageToBuffer+0x54>
    2510:	6b 01       	movw	r12, r22
    2512:	7c 01       	movw	r14, r24
    2514:	fc 01       	movw	r30, r24
    2516:	86 85       	ldd	r24, Z+14	; 0x0e
    2518:	80 fd       	sbrc	r24, 0
    251a:	08 c0       	rjmp	.+16     	; 0x252c <prvWriteMessageToBuffer+0x3e>
    251c:	ca 01       	movw	r24, r20
    251e:	24 17       	cp	r18, r20
    2520:	35 07       	cpc	r19, r21
    2522:	08 f4       	brcc	.+2      	; 0x2526 <prvWriteMessageToBuffer+0x38>
    2524:	c9 01       	movw	r24, r18
    2526:	9a 83       	std	Y+2, r25	; 0x02
    2528:	89 83       	std	Y+1, r24	; 0x01
    252a:	11 c0       	rjmp	.+34     	; 0x254e <prvWriteMessageToBuffer+0x60>
    252c:	20 17       	cp	r18, r16
    252e:	31 07       	cpc	r19, r17
    2530:	58 f0       	brcs	.+22     	; 0x2548 <prvWriteMessageToBuffer+0x5a>
    2532:	42 e0       	ldi	r20, 0x02	; 2
    2534:	50 e0       	ldi	r21, 0x00	; 0
    2536:	be 01       	movw	r22, r28
    2538:	6f 5f       	subi	r22, 0xFF	; 255
    253a:	7f 4f       	sbci	r23, 0xFF	; 255
    253c:	c7 01       	movw	r24, r14
    253e:	8e df       	rcall	.-228    	; 0x245c <prvWriteBytesToBuffer>
    2540:	06 c0       	rjmp	.+12     	; 0x254e <prvWriteMessageToBuffer+0x60>
    2542:	80 e0       	ldi	r24, 0x00	; 0
    2544:	90 e0       	ldi	r25, 0x00	; 0
    2546:	08 c0       	rjmp	.+16     	; 0x2558 <prvWriteMessageToBuffer+0x6a>
    2548:	80 e0       	ldi	r24, 0x00	; 0
    254a:	90 e0       	ldi	r25, 0x00	; 0
    254c:	05 c0       	rjmp	.+10     	; 0x2558 <prvWriteMessageToBuffer+0x6a>
    254e:	49 81       	ldd	r20, Y+1	; 0x01
    2550:	5a 81       	ldd	r21, Y+2	; 0x02
    2552:	b6 01       	movw	r22, r12
    2554:	c7 01       	movw	r24, r14
    2556:	82 df       	rcall	.-252    	; 0x245c <prvWriteBytesToBuffer>
    2558:	0f 90       	pop	r0
    255a:	0f 90       	pop	r0
    255c:	df 91       	pop	r29
    255e:	cf 91       	pop	r28
    2560:	1f 91       	pop	r17
    2562:	0f 91       	pop	r16
    2564:	ff 90       	pop	r15
    2566:	ef 90       	pop	r14
    2568:	df 90       	pop	r13
    256a:	cf 90       	pop	r12
    256c:	08 95       	ret

0000256e <prvReadBytesFromBuffer>:
    256e:	af 92       	push	r10
    2570:	bf 92       	push	r11
    2572:	cf 92       	push	r12
    2574:	df 92       	push	r13
    2576:	ef 92       	push	r14
    2578:	ff 92       	push	r15
    257a:	0f 93       	push	r16
    257c:	1f 93       	push	r17
    257e:	cf 93       	push	r28
    2580:	df 93       	push	r29
    2582:	7c 01       	movw	r14, r24
    2584:	5b 01       	movw	r10, r22
    2586:	e9 01       	movw	r28, r18
    2588:	42 17       	cp	r20, r18
    258a:	53 07       	cpc	r21, r19
    258c:	08 f4       	brcc	.+2      	; 0x2590 <prvReadBytesFromBuffer+0x22>
    258e:	ea 01       	movw	r28, r20
    2590:	20 97       	sbiw	r28, 0x00	; 0
    2592:	79 f1       	breq	.+94     	; 0x25f2 <prvReadBytesFromBuffer+0x84>
    2594:	f7 01       	movw	r30, r14
    2596:	00 81       	ld	r16, Z
    2598:	11 81       	ldd	r17, Z+1	; 0x01
    259a:	c4 80       	ldd	r12, Z+4	; 0x04
    259c:	d5 80       	ldd	r13, Z+5	; 0x05
    259e:	c0 1a       	sub	r12, r16
    25a0:	d1 0a       	sbc	r13, r17
    25a2:	cc 15       	cp	r28, r12
    25a4:	dd 05       	cpc	r29, r13
    25a6:	08 f4       	brcc	.+2      	; 0x25aa <prvReadBytesFromBuffer+0x3c>
    25a8:	6e 01       	movw	r12, r28
    25aa:	f7 01       	movw	r30, r14
    25ac:	64 85       	ldd	r22, Z+12	; 0x0c
    25ae:	75 85       	ldd	r23, Z+13	; 0x0d
    25b0:	60 0f       	add	r22, r16
    25b2:	71 1f       	adc	r23, r17
    25b4:	a6 01       	movw	r20, r12
    25b6:	c5 01       	movw	r24, r10
    25b8:	0e 94 77 31 	call	0x62ee	; 0x62ee <memcpy>
    25bc:	cc 16       	cp	r12, r28
    25be:	dd 06       	cpc	r13, r29
    25c0:	58 f4       	brcc	.+22     	; 0x25d8 <prvReadBytesFromBuffer+0x6a>
    25c2:	ae 01       	movw	r20, r28
    25c4:	4c 19       	sub	r20, r12
    25c6:	5d 09       	sbc	r21, r13
    25c8:	f7 01       	movw	r30, r14
    25ca:	64 85       	ldd	r22, Z+12	; 0x0c
    25cc:	75 85       	ldd	r23, Z+13	; 0x0d
    25ce:	c5 01       	movw	r24, r10
    25d0:	8c 0d       	add	r24, r12
    25d2:	9d 1d       	adc	r25, r13
    25d4:	0e 94 77 31 	call	0x62ee	; 0x62ee <memcpy>
    25d8:	0c 0f       	add	r16, r28
    25da:	1d 1f       	adc	r17, r29
    25dc:	f7 01       	movw	r30, r14
    25de:	84 81       	ldd	r24, Z+4	; 0x04
    25e0:	95 81       	ldd	r25, Z+5	; 0x05
    25e2:	08 17       	cp	r16, r24
    25e4:	19 07       	cpc	r17, r25
    25e6:	10 f0       	brcs	.+4      	; 0x25ec <prvReadBytesFromBuffer+0x7e>
    25e8:	08 1b       	sub	r16, r24
    25ea:	19 0b       	sbc	r17, r25
    25ec:	f7 01       	movw	r30, r14
    25ee:	11 83       	std	Z+1, r17	; 0x01
    25f0:	00 83       	st	Z, r16
    25f2:	ce 01       	movw	r24, r28
    25f4:	df 91       	pop	r29
    25f6:	cf 91       	pop	r28
    25f8:	1f 91       	pop	r17
    25fa:	0f 91       	pop	r16
    25fc:	ff 90       	pop	r15
    25fe:	ef 90       	pop	r14
    2600:	df 90       	pop	r13
    2602:	cf 90       	pop	r12
    2604:	bf 90       	pop	r11
    2606:	af 90       	pop	r10
    2608:	08 95       	ret

0000260a <xStreamBufferGenericCreate>:
    260a:	ef 92       	push	r14
    260c:	ff 92       	push	r15
    260e:	1f 93       	push	r17
    2610:	cf 93       	push	r28
    2612:	df 93       	push	r29
    2614:	eb 01       	movw	r28, r22
    2616:	11 e0       	ldi	r17, 0x01	; 1
    2618:	41 30       	cpi	r20, 0x01	; 1
    261a:	09 f0       	breq	.+2      	; 0x261e <xStreamBufferGenericCreate+0x14>
    261c:	10 e0       	ldi	r17, 0x00	; 0
    261e:	20 97       	sbiw	r28, 0x00	; 0
    2620:	11 f4       	brne	.+4      	; 0x2626 <xStreamBufferGenericCreate+0x1c>
    2622:	c1 e0       	ldi	r28, 0x01	; 1
    2624:	d0 e0       	ldi	r29, 0x00	; 0
    2626:	7c 01       	movw	r14, r24
    2628:	2f ef       	ldi	r18, 0xFF	; 255
    262a:	e2 1a       	sub	r14, r18
    262c:	f2 0a       	sbc	r15, r18
    262e:	41 96       	adiw	r24, 0x11	; 17
    2630:	53 d8       	rcall	.-3930   	; 0x16d8 <pvPortMalloc>
    2632:	00 97       	sbiw	r24, 0x00	; 0
    2634:	81 f0       	breq	.+32     	; 0x2656 <xStreamBufferGenericCreate+0x4c>
    2636:	20 e1       	ldi	r18, 0x10	; 16
    2638:	fc 01       	movw	r30, r24
    263a:	11 92       	st	Z+, r1
    263c:	2a 95       	dec	r18
    263e:	e9 f7       	brne	.-6      	; 0x263a <xStreamBufferGenericCreate+0x30>
    2640:	9c 01       	movw	r18, r24
    2642:	20 5f       	subi	r18, 0xF0	; 240
    2644:	3f 4f       	sbci	r19, 0xFF	; 255
    2646:	fc 01       	movw	r30, r24
    2648:	35 87       	std	Z+13, r19	; 0x0d
    264a:	24 87       	std	Z+12, r18	; 0x0c
    264c:	f5 82       	std	Z+5, r15	; 0x05
    264e:	e4 82       	std	Z+4, r14	; 0x04
    2650:	d7 83       	std	Z+7, r29	; 0x07
    2652:	c6 83       	std	Z+6, r28	; 0x06
    2654:	16 87       	std	Z+14, r17	; 0x0e
    2656:	df 91       	pop	r29
    2658:	cf 91       	pop	r28
    265a:	1f 91       	pop	r17
    265c:	ff 90       	pop	r15
    265e:	ef 90       	pop	r14
    2660:	08 95       	ret

00002662 <xStreamBufferReset>:
    2662:	cf 93       	push	r28
    2664:	df 93       	push	r29
    2666:	fc 01       	movw	r30, r24
    2668:	27 85       	ldd	r18, Z+15	; 0x0f
    266a:	0f b6       	in	r0, 0x3f	; 63
    266c:	f8 94       	cli
    266e:	0f 92       	push	r0
    2670:	80 85       	ldd	r24, Z+8	; 0x08
    2672:	91 85       	ldd	r25, Z+9	; 0x09
    2674:	89 2b       	or	r24, r25
    2676:	d1 f4       	brne	.+52     	; 0x26ac <xStreamBufferReset+0x4a>
    2678:	82 85       	ldd	r24, Z+10	; 0x0a
    267a:	93 85       	ldd	r25, Z+11	; 0x0b
    267c:	89 2b       	or	r24, r25
    267e:	c1 f4       	brne	.+48     	; 0x26b0 <xStreamBufferReset+0x4e>
    2680:	86 85       	ldd	r24, Z+14	; 0x0e
    2682:	46 81       	ldd	r20, Z+6	; 0x06
    2684:	57 81       	ldd	r21, Z+7	; 0x07
    2686:	64 81       	ldd	r22, Z+4	; 0x04
    2688:	75 81       	ldd	r23, Z+5	; 0x05
    268a:	a4 85       	ldd	r26, Z+12	; 0x0c
    268c:	b5 85       	ldd	r27, Z+13	; 0x0d
    268e:	90 e1       	ldi	r25, 0x10	; 16
    2690:	ef 01       	movw	r28, r30
    2692:	19 92       	st	Y+, r1
    2694:	9a 95       	dec	r25
    2696:	e9 f7       	brne	.-6      	; 0x2692 <xStreamBufferReset+0x30>
    2698:	b5 87       	std	Z+13, r27	; 0x0d
    269a:	a4 87       	std	Z+12, r26	; 0x0c
    269c:	75 83       	std	Z+5, r23	; 0x05
    269e:	64 83       	std	Z+4, r22	; 0x04
    26a0:	57 83       	std	Z+7, r21	; 0x07
    26a2:	46 83       	std	Z+6, r20	; 0x06
    26a4:	86 87       	std	Z+14, r24	; 0x0e
    26a6:	27 87       	std	Z+15, r18	; 0x0f
    26a8:	81 e0       	ldi	r24, 0x01	; 1
    26aa:	03 c0       	rjmp	.+6      	; 0x26b2 <xStreamBufferReset+0x50>
    26ac:	80 e0       	ldi	r24, 0x00	; 0
    26ae:	01 c0       	rjmp	.+2      	; 0x26b2 <xStreamBufferReset+0x50>
    26b0:	80 e0       	ldi	r24, 0x00	; 0
    26b2:	0f 90       	pop	r0
    26b4:	0f be       	out	0x3f, r0	; 63
    26b6:	df 91       	pop	r29
    26b8:	cf 91       	pop	r28
    26ba:	08 95       	ret

000026bc <xStreamBufferSpacesAvailable>:
    26bc:	fc 01       	movw	r30, r24
    26be:	24 81       	ldd	r18, Z+4	; 0x04
    26c0:	35 81       	ldd	r19, Z+5	; 0x05
    26c2:	80 81       	ld	r24, Z
    26c4:	91 81       	ldd	r25, Z+1	; 0x01
    26c6:	42 81       	ldd	r20, Z+2	; 0x02
    26c8:	53 81       	ldd	r21, Z+3	; 0x03
    26ca:	82 0f       	add	r24, r18
    26cc:	93 1f       	adc	r25, r19
    26ce:	01 97       	sbiw	r24, 0x01	; 1
    26d0:	84 1b       	sub	r24, r20
    26d2:	95 0b       	sbc	r25, r21
    26d4:	82 17       	cp	r24, r18
    26d6:	93 07       	cpc	r25, r19
    26d8:	10 f0       	brcs	.+4      	; 0x26de <xStreamBufferSpacesAvailable+0x22>
    26da:	82 1b       	sub	r24, r18
    26dc:	93 0b       	sbc	r25, r19
    26de:	08 95       	ret

000026e0 <xStreamBufferSend>:
    26e0:	2f 92       	push	r2
    26e2:	3f 92       	push	r3
    26e4:	4f 92       	push	r4
    26e6:	5f 92       	push	r5
    26e8:	6f 92       	push	r6
    26ea:	7f 92       	push	r7
    26ec:	8f 92       	push	r8
    26ee:	9f 92       	push	r9
    26f0:	af 92       	push	r10
    26f2:	bf 92       	push	r11
    26f4:	cf 92       	push	r12
    26f6:	df 92       	push	r13
    26f8:	ef 92       	push	r14
    26fa:	ff 92       	push	r15
    26fc:	0f 93       	push	r16
    26fe:	1f 93       	push	r17
    2700:	cf 93       	push	r28
    2702:	df 93       	push	r29
    2704:	cd b7       	in	r28, 0x3d	; 61
    2706:	de b7       	in	r29, 0x3e	; 62
    2708:	29 97       	sbiw	r28, 0x09	; 9
    270a:	0f b6       	in	r0, 0x3f	; 63
    270c:	f8 94       	cli
    270e:	de bf       	out	0x3e, r29	; 62
    2710:	0f be       	out	0x3f, r0	; 63
    2712:	cd bf       	out	0x3d, r28	; 61
    2714:	5c 01       	movw	r10, r24
    2716:	1b 01       	movw	r2, r22
    2718:	2a 01       	movw	r4, r20
    271a:	0e 83       	std	Y+6, r16	; 0x06
    271c:	1f 83       	std	Y+7, r17	; 0x07
    271e:	28 87       	std	Y+8, r18	; 0x08
    2720:	39 87       	std	Y+9, r19	; 0x09
    2722:	fc 01       	movw	r30, r24
    2724:	86 85       	ldd	r24, Z+14	; 0x0e
    2726:	80 ff       	sbrs	r24, 0
    2728:	05 c0       	rjmp	.+10     	; 0x2734 <xStreamBufferSend+0x54>
    272a:	3a 01       	movw	r6, r20
    272c:	f2 e0       	ldi	r31, 0x02	; 2
    272e:	6f 0e       	add	r6, r31
    2730:	71 1c       	adc	r7, r1
    2732:	01 c0       	rjmp	.+2      	; 0x2736 <xStreamBufferSend+0x56>
    2734:	3a 01       	movw	r6, r20
    2736:	8e 81       	ldd	r24, Y+6	; 0x06
    2738:	9f 81       	ldd	r25, Y+7	; 0x07
    273a:	a8 85       	ldd	r26, Y+8	; 0x08
    273c:	b9 85       	ldd	r27, Y+9	; 0x09
    273e:	89 2b       	or	r24, r25
    2740:	8a 2b       	or	r24, r26
    2742:	8b 2b       	or	r24, r27
    2744:	09 f4       	brne	.+2      	; 0x2748 <xStreamBufferSend+0x68>
    2746:	34 c0       	rjmp	.+104    	; 0x27b0 <xStreamBufferSend+0xd0>
    2748:	ce 01       	movw	r24, r28
    274a:	01 96       	adiw	r24, 0x01	; 1
    274c:	2f d6       	rcall	.+3166   	; 0x33ac <vTaskSetTimeOutState>
    274e:	0f b6       	in	r0, 0x3f	; 63
    2750:	f8 94       	cli
    2752:	0f 92       	push	r0
    2754:	c5 01       	movw	r24, r10
    2756:	b2 df       	rcall	.-156    	; 0x26bc <xStreamBufferSpacesAvailable>
    2758:	4c 01       	movw	r8, r24
    275a:	86 15       	cp	r24, r6
    275c:	97 05       	cpc	r25, r7
    275e:	18 f5       	brcc	.+70     	; 0x27a6 <xStreamBufferSend+0xc6>
    2760:	80 e0       	ldi	r24, 0x00	; 0
    2762:	90 e0       	ldi	r25, 0x00	; 0
    2764:	0e 94 2a 1d 	call	0x3a54	; 0x3a54 <xTaskNotifyStateClear>
    2768:	a1 d6       	rcall	.+3394   	; 0x34ac <xTaskGetCurrentTaskHandle>
    276a:	f5 01       	movw	r30, r10
    276c:	93 87       	std	Z+11, r25	; 0x0b
    276e:	82 87       	std	Z+10, r24	; 0x0a
    2770:	0f 90       	pop	r0
    2772:	0f be       	out	0x3f, r0	; 63
    2774:	ce 80       	ldd	r12, Y+6	; 0x06
    2776:	df 80       	ldd	r13, Y+7	; 0x07
    2778:	e8 84       	ldd	r14, Y+8	; 0x08
    277a:	f9 84       	ldd	r15, Y+9	; 0x09
    277c:	00 e0       	ldi	r16, 0x00	; 0
    277e:	10 e0       	ldi	r17, 0x00	; 0
    2780:	20 e0       	ldi	r18, 0x00	; 0
    2782:	30 e0       	ldi	r19, 0x00	; 0
    2784:	a9 01       	movw	r20, r18
    2786:	60 e0       	ldi	r22, 0x00	; 0
    2788:	70 e0       	ldi	r23, 0x00	; 0
    278a:	cb 01       	movw	r24, r22
    278c:	d8 d7       	rcall	.+4016   	; 0x373e <xTaskNotifyWait>
    278e:	f5 01       	movw	r30, r10
    2790:	13 86       	std	Z+11, r1	; 0x0b
    2792:	12 86       	std	Z+10, r1	; 0x0a
    2794:	be 01       	movw	r22, r28
    2796:	6a 5f       	subi	r22, 0xFA	; 250
    2798:	7f 4f       	sbci	r23, 0xFF	; 255
    279a:	ce 01       	movw	r24, r28
    279c:	01 96       	adiw	r24, 0x01	; 1
    279e:	2d d6       	rcall	.+3162   	; 0x33fa <xTaskCheckForTimeOut>
    27a0:	88 23       	and	r24, r24
    27a2:	a9 f2       	breq	.-86     	; 0x274e <xStreamBufferSend+0x6e>
    27a4:	02 c0       	rjmp	.+4      	; 0x27aa <xStreamBufferSend+0xca>
    27a6:	0f 90       	pop	r0
    27a8:	0f be       	out	0x3f, r0	; 63
    27aa:	81 14       	cp	r8, r1
    27ac:	91 04       	cpc	r9, r1
    27ae:	19 f4       	brne	.+6      	; 0x27b6 <xStreamBufferSend+0xd6>
    27b0:	c5 01       	movw	r24, r10
    27b2:	84 df       	rcall	.-248    	; 0x26bc <xStreamBufferSpacesAvailable>
    27b4:	4c 01       	movw	r8, r24
    27b6:	83 01       	movw	r16, r6
    27b8:	94 01       	movw	r18, r8
    27ba:	a2 01       	movw	r20, r4
    27bc:	b1 01       	movw	r22, r2
    27be:	c5 01       	movw	r24, r10
    27c0:	96 de       	rcall	.-724    	; 0x24ee <prvWriteMessageToBuffer>
    27c2:	7c 01       	movw	r14, r24
    27c4:	89 2b       	or	r24, r25
    27c6:	e1 f0       	breq	.+56     	; 0x2800 <xStreamBufferSend+0x120>
    27c8:	c5 01       	movw	r24, r10
    27ca:	35 de       	rcall	.-918    	; 0x2436 <prvBytesInBuffer>
    27cc:	f5 01       	movw	r30, r10
    27ce:	26 81       	ldd	r18, Z+6	; 0x06
    27d0:	37 81       	ldd	r19, Z+7	; 0x07
    27d2:	82 17       	cp	r24, r18
    27d4:	93 07       	cpc	r25, r19
    27d6:	a0 f0       	brcs	.+40     	; 0x2800 <xStreamBufferSend+0x120>
    27d8:	1b d3       	rcall	.+1590   	; 0x2e10 <vTaskSuspendAll>
    27da:	f5 01       	movw	r30, r10
    27dc:	80 85       	ldd	r24, Z+8	; 0x08
    27de:	91 85       	ldd	r25, Z+9	; 0x09
    27e0:	89 2b       	or	r24, r25
    27e2:	69 f0       	breq	.+26     	; 0x27fe <xStreamBufferSend+0x11e>
    27e4:	80 85       	ldd	r24, Z+8	; 0x08
    27e6:	91 85       	ldd	r25, Z+9	; 0x09
    27e8:	00 e0       	ldi	r16, 0x00	; 0
    27ea:	10 e0       	ldi	r17, 0x00	; 0
    27ec:	20 e0       	ldi	r18, 0x00	; 0
    27ee:	40 e0       	ldi	r20, 0x00	; 0
    27f0:	50 e0       	ldi	r21, 0x00	; 0
    27f2:	ba 01       	movw	r22, r20
    27f4:	0e 94 29 1c 	call	0x3852	; 0x3852 <xTaskGenericNotify>
    27f8:	f5 01       	movw	r30, r10
    27fa:	11 86       	std	Z+9, r1	; 0x09
    27fc:	10 86       	std	Z+8, r1	; 0x08
    27fe:	f1 d3       	rcall	.+2018   	; 0x2fe2 <xTaskResumeAll>
    2800:	c7 01       	movw	r24, r14
    2802:	29 96       	adiw	r28, 0x09	; 9
    2804:	0f b6       	in	r0, 0x3f	; 63
    2806:	f8 94       	cli
    2808:	de bf       	out	0x3e, r29	; 62
    280a:	0f be       	out	0x3f, r0	; 63
    280c:	cd bf       	out	0x3d, r28	; 61
    280e:	df 91       	pop	r29
    2810:	cf 91       	pop	r28
    2812:	1f 91       	pop	r17
    2814:	0f 91       	pop	r16
    2816:	ff 90       	pop	r15
    2818:	ef 90       	pop	r14
    281a:	df 90       	pop	r13
    281c:	cf 90       	pop	r12
    281e:	bf 90       	pop	r11
    2820:	af 90       	pop	r10
    2822:	9f 90       	pop	r9
    2824:	8f 90       	pop	r8
    2826:	7f 90       	pop	r7
    2828:	6f 90       	pop	r6
    282a:	5f 90       	pop	r5
    282c:	4f 90       	pop	r4
    282e:	3f 90       	pop	r3
    2830:	2f 90       	pop	r2
    2832:	08 95       	ret

00002834 <xStreamBufferSendFromISR>:
    2834:	af 92       	push	r10
    2836:	bf 92       	push	r11
    2838:	cf 92       	push	r12
    283a:	df 92       	push	r13
    283c:	ef 92       	push	r14
    283e:	ff 92       	push	r15
    2840:	0f 93       	push	r16
    2842:	1f 93       	push	r17
    2844:	cf 93       	push	r28
    2846:	df 93       	push	r29
    2848:	ec 01       	movw	r28, r24
    284a:	5b 01       	movw	r10, r22
    284c:	6a 01       	movw	r12, r20
    284e:	79 01       	movw	r14, r18
    2850:	8e 85       	ldd	r24, Y+14	; 0x0e
    2852:	80 ff       	sbrs	r24, 0
    2854:	04 c0       	rjmp	.+8      	; 0x285e <xStreamBufferSendFromISR+0x2a>
    2856:	8a 01       	movw	r16, r20
    2858:	0e 5f       	subi	r16, 0xFE	; 254
    285a:	1f 4f       	sbci	r17, 0xFF	; 255
    285c:	01 c0       	rjmp	.+2      	; 0x2860 <xStreamBufferSendFromISR+0x2c>
    285e:	8a 01       	movw	r16, r20
    2860:	ce 01       	movw	r24, r28
    2862:	2c df       	rcall	.-424    	; 0x26bc <xStreamBufferSpacesAvailable>
    2864:	9c 01       	movw	r18, r24
    2866:	a6 01       	movw	r20, r12
    2868:	b5 01       	movw	r22, r10
    286a:	ce 01       	movw	r24, r28
    286c:	40 de       	rcall	.-896    	; 0x24ee <prvWriteMessageToBuffer>
    286e:	6c 01       	movw	r12, r24
    2870:	89 2b       	or	r24, r25
    2872:	b9 f0       	breq	.+46     	; 0x28a2 <xStreamBufferSendFromISR+0x6e>
    2874:	ce 01       	movw	r24, r28
    2876:	df dd       	rcall	.-1090   	; 0x2436 <prvBytesInBuffer>
    2878:	2e 81       	ldd	r18, Y+6	; 0x06
    287a:	3f 81       	ldd	r19, Y+7	; 0x07
    287c:	82 17       	cp	r24, r18
    287e:	93 07       	cpc	r25, r19
    2880:	80 f0       	brcs	.+32     	; 0x28a2 <xStreamBufferSendFromISR+0x6e>
    2882:	88 85       	ldd	r24, Y+8	; 0x08
    2884:	99 85       	ldd	r25, Y+9	; 0x09
    2886:	89 2b       	or	r24, r25
    2888:	61 f0       	breq	.+24     	; 0x28a2 <xStreamBufferSendFromISR+0x6e>
    288a:	88 85       	ldd	r24, Y+8	; 0x08
    288c:	99 85       	ldd	r25, Y+9	; 0x09
    288e:	00 e0       	ldi	r16, 0x00	; 0
    2890:	10 e0       	ldi	r17, 0x00	; 0
    2892:	20 e0       	ldi	r18, 0x00	; 0
    2894:	40 e0       	ldi	r20, 0x00	; 0
    2896:	50 e0       	ldi	r21, 0x00	; 0
    2898:	ba 01       	movw	r22, r20
    289a:	0e 94 a1 1c 	call	0x3942	; 0x3942 <xTaskGenericNotifyFromISR>
    289e:	19 86       	std	Y+9, r1	; 0x09
    28a0:	18 86       	std	Y+8, r1	; 0x08
    28a2:	c6 01       	movw	r24, r12
    28a4:	df 91       	pop	r29
    28a6:	cf 91       	pop	r28
    28a8:	1f 91       	pop	r17
    28aa:	0f 91       	pop	r16
    28ac:	ff 90       	pop	r15
    28ae:	ef 90       	pop	r14
    28b0:	df 90       	pop	r13
    28b2:	cf 90       	pop	r12
    28b4:	bf 90       	pop	r11
    28b6:	af 90       	pop	r10
    28b8:	08 95       	ret

000028ba <xStreamBufferReceive>:
    28ba:	4f 92       	push	r4
    28bc:	5f 92       	push	r5
    28be:	6f 92       	push	r6
    28c0:	7f 92       	push	r7
    28c2:	8f 92       	push	r8
    28c4:	9f 92       	push	r9
    28c6:	af 92       	push	r10
    28c8:	bf 92       	push	r11
    28ca:	cf 92       	push	r12
    28cc:	df 92       	push	r13
    28ce:	ef 92       	push	r14
    28d0:	ff 92       	push	r15
    28d2:	0f 93       	push	r16
    28d4:	1f 93       	push	r17
    28d6:	cf 93       	push	r28
    28d8:	df 93       	push	r29
    28da:	1f 92       	push	r1
    28dc:	1f 92       	push	r1
    28de:	cd b7       	in	r28, 0x3d	; 61
    28e0:	de b7       	in	r29, 0x3e	; 62
    28e2:	5c 01       	movw	r10, r24
    28e4:	2b 01       	movw	r4, r22
    28e6:	3a 01       	movw	r6, r20
    28e8:	68 01       	movw	r12, r16
    28ea:	79 01       	movw	r14, r18
    28ec:	fc 01       	movw	r30, r24
    28ee:	86 85       	ldd	r24, Z+14	; 0x0e
    28f0:	80 fd       	sbrc	r24, 0
    28f2:	03 c0       	rjmp	.+6      	; 0x28fa <xStreamBufferReceive+0x40>
    28f4:	81 2c       	mov	r8, r1
    28f6:	91 2c       	mov	r9, r1
    28f8:	04 c0       	rjmp	.+8      	; 0x2902 <xStreamBufferReceive+0x48>
    28fa:	68 94       	set
    28fc:	88 24       	eor	r8, r8
    28fe:	81 f8       	bld	r8, 1
    2900:	91 2c       	mov	r9, r1
    2902:	c1 14       	cp	r12, r1
    2904:	d1 04       	cpc	r13, r1
    2906:	e1 04       	cpc	r14, r1
    2908:	f1 04       	cpc	r15, r1
    290a:	31 f1       	breq	.+76     	; 0x2958 <xStreamBufferReceive+0x9e>
    290c:	0f b6       	in	r0, 0x3f	; 63
    290e:	f8 94       	cli
    2910:	0f 92       	push	r0
    2912:	c5 01       	movw	r24, r10
    2914:	90 dd       	rcall	.-1248   	; 0x2436 <prvBytesInBuffer>
    2916:	8c 01       	movw	r16, r24
    2918:	88 16       	cp	r8, r24
    291a:	99 06       	cpc	r9, r25
    291c:	40 f0       	brcs	.+16     	; 0x292e <xStreamBufferReceive+0x74>
    291e:	80 e0       	ldi	r24, 0x00	; 0
    2920:	90 e0       	ldi	r25, 0x00	; 0
    2922:	0e 94 2a 1d 	call	0x3a54	; 0x3a54 <xTaskNotifyStateClear>
    2926:	c2 d5       	rcall	.+2948   	; 0x34ac <xTaskGetCurrentTaskHandle>
    2928:	f5 01       	movw	r30, r10
    292a:	91 87       	std	Z+9, r25	; 0x09
    292c:	80 87       	std	Z+8, r24	; 0x08
    292e:	0f 90       	pop	r0
    2930:	0f be       	out	0x3f, r0	; 63
    2932:	80 16       	cp	r8, r16
    2934:	91 06       	cpc	r9, r17
    2936:	b0 f0       	brcs	.+44     	; 0x2964 <xStreamBufferReceive+0xaa>
    2938:	00 e0       	ldi	r16, 0x00	; 0
    293a:	10 e0       	ldi	r17, 0x00	; 0
    293c:	20 e0       	ldi	r18, 0x00	; 0
    293e:	30 e0       	ldi	r19, 0x00	; 0
    2940:	a9 01       	movw	r20, r18
    2942:	60 e0       	ldi	r22, 0x00	; 0
    2944:	70 e0       	ldi	r23, 0x00	; 0
    2946:	cb 01       	movw	r24, r22
    2948:	fa d6       	rcall	.+3572   	; 0x373e <xTaskNotifyWait>
    294a:	f5 01       	movw	r30, r10
    294c:	11 86       	std	Z+9, r1	; 0x09
    294e:	10 86       	std	Z+8, r1	; 0x08
    2950:	c5 01       	movw	r24, r10
    2952:	71 dd       	rcall	.-1310   	; 0x2436 <prvBytesInBuffer>
    2954:	8c 01       	movw	r16, r24
    2956:	03 c0       	rjmp	.+6      	; 0x295e <xStreamBufferReceive+0xa4>
    2958:	c5 01       	movw	r24, r10
    295a:	6d dd       	rcall	.-1318   	; 0x2436 <prvBytesInBuffer>
    295c:	8c 01       	movw	r16, r24
    295e:	80 16       	cp	r8, r16
    2960:	91 06       	cpc	r9, r17
    2962:	b8 f5       	brcc	.+110    	; 0x29d2 <xStreamBufferReceive+0x118>
    2964:	81 14       	cp	r8, r1
    2966:	91 04       	cpc	r9, r1
    2968:	c1 f0       	breq	.+48     	; 0x299a <xStreamBufferReceive+0xe0>
    296a:	f5 01       	movw	r30, r10
    296c:	e0 80       	ld	r14, Z
    296e:	f1 80       	ldd	r15, Z+1	; 0x01
    2970:	98 01       	movw	r18, r16
    2972:	a4 01       	movw	r20, r8
    2974:	be 01       	movw	r22, r28
    2976:	6f 5f       	subi	r22, 0xFF	; 255
    2978:	7f 4f       	sbci	r23, 0xFF	; 255
    297a:	c5 01       	movw	r24, r10
    297c:	f8 dd       	rcall	.-1040   	; 0x256e <prvReadBytesFromBuffer>
    297e:	89 81       	ldd	r24, Y+1	; 0x01
    2980:	9a 81       	ldd	r25, Y+2	; 0x02
    2982:	08 19       	sub	r16, r8
    2984:	19 09       	sbc	r17, r9
    2986:	68 16       	cp	r6, r24
    2988:	79 06       	cpc	r7, r25
    298a:	30 f4       	brcc	.+12     	; 0x2998 <xStreamBufferReceive+0xde>
    298c:	f5 01       	movw	r30, r10
    298e:	f1 82       	std	Z+1, r15	; 0x01
    2990:	e0 82       	st	Z, r14
    2992:	61 2c       	mov	r6, r1
    2994:	71 2c       	mov	r7, r1
    2996:	01 c0       	rjmp	.+2      	; 0x299a <xStreamBufferReceive+0xe0>
    2998:	3c 01       	movw	r6, r24
    299a:	98 01       	movw	r18, r16
    299c:	a3 01       	movw	r20, r6
    299e:	b2 01       	movw	r22, r4
    29a0:	c5 01       	movw	r24, r10
    29a2:	e5 dd       	rcall	.-1078   	; 0x256e <prvReadBytesFromBuffer>
    29a4:	7c 01       	movw	r14, r24
    29a6:	89 2b       	or	r24, r25
    29a8:	b1 f0       	breq	.+44     	; 0x29d6 <xStreamBufferReceive+0x11c>
    29aa:	32 d2       	rcall	.+1124   	; 0x2e10 <vTaskSuspendAll>
    29ac:	f5 01       	movw	r30, r10
    29ae:	82 85       	ldd	r24, Z+10	; 0x0a
    29b0:	93 85       	ldd	r25, Z+11	; 0x0b
    29b2:	89 2b       	or	r24, r25
    29b4:	61 f0       	breq	.+24     	; 0x29ce <xStreamBufferReceive+0x114>
    29b6:	82 85       	ldd	r24, Z+10	; 0x0a
    29b8:	93 85       	ldd	r25, Z+11	; 0x0b
    29ba:	00 e0       	ldi	r16, 0x00	; 0
    29bc:	10 e0       	ldi	r17, 0x00	; 0
    29be:	20 e0       	ldi	r18, 0x00	; 0
    29c0:	40 e0       	ldi	r20, 0x00	; 0
    29c2:	50 e0       	ldi	r21, 0x00	; 0
    29c4:	ba 01       	movw	r22, r20
    29c6:	45 d7       	rcall	.+3722   	; 0x3852 <xTaskGenericNotify>
    29c8:	f5 01       	movw	r30, r10
    29ca:	13 86       	std	Z+11, r1	; 0x0b
    29cc:	12 86       	std	Z+10, r1	; 0x0a
    29ce:	09 d3       	rcall	.+1554   	; 0x2fe2 <xTaskResumeAll>
    29d0:	02 c0       	rjmp	.+4      	; 0x29d6 <xStreamBufferReceive+0x11c>
    29d2:	e1 2c       	mov	r14, r1
    29d4:	f1 2c       	mov	r15, r1
    29d6:	c7 01       	movw	r24, r14
    29d8:	0f 90       	pop	r0
    29da:	0f 90       	pop	r0
    29dc:	df 91       	pop	r29
    29de:	cf 91       	pop	r28
    29e0:	1f 91       	pop	r17
    29e2:	0f 91       	pop	r16
    29e4:	ff 90       	pop	r15
    29e6:	ef 90       	pop	r14
    29e8:	df 90       	pop	r13
    29ea:	cf 90       	pop	r12
    29ec:	bf 90       	pop	r11
    29ee:	af 90       	pop	r10
    29f0:	9f 90       	pop	r9
    29f2:	8f 90       	pop	r8
    29f4:	7f 90       	pop	r7
    29f6:	6f 90       	pop	r6
    29f8:	5f 90       	pop	r5
    29fa:	4f 90       	pop	r4
    29fc:	08 95       	ret

000029fe <xStreamBufferIsEmpty>:
size_t xTail;

    configASSERT( pxStreamBuffer );

    /* True if no bytes are available. */
    xTail = pxStreamBuffer->xTail;
    29fe:	fc 01       	movw	r30, r24
    2a00:	40 81       	ld	r20, Z
    2a02:	51 81       	ldd	r21, Z+1	; 0x01
    if( pxStreamBuffer->xHead == xTail )
    2a04:	22 81       	ldd	r18, Z+2	; 0x02
    2a06:	33 81       	ldd	r19, Z+3	; 0x03
    else
    {
        xReturn = pdFALSE;
    }

    return xReturn;
    2a08:	81 e0       	ldi	r24, 0x01	; 1
    2a0a:	42 17       	cp	r20, r18
    2a0c:	53 07       	cpc	r21, r19
    2a0e:	09 f0       	breq	.+2      	; 0x2a12 <xStreamBufferIsEmpty+0x14>
    2a10:	80 e0       	ldi	r24, 0x00	; 0
}
    2a12:	08 95       	ret

00002a14 <prvResetNextTaskUnblockTime>:
    2a14:	e0 91 8b 18 	lds	r30, 0x188B	; 0x80188b <pxDelayedTaskList>
    2a18:	f0 91 8c 18 	lds	r31, 0x188C	; 0x80188c <pxDelayedTaskList+0x1>
    2a1c:	80 81       	ld	r24, Z
    2a1e:	81 11       	cpse	r24, r1
    2a20:	0c c0       	rjmp	.+24     	; 0x2a3a <prvResetNextTaskUnblockTime+0x26>
    2a22:	8f ef       	ldi	r24, 0xFF	; 255
    2a24:	9f ef       	ldi	r25, 0xFF	; 255
    2a26:	dc 01       	movw	r26, r24
    2a28:	80 93 58 18 	sts	0x1858, r24	; 0x801858 <xNextTaskUnblockTime>
    2a2c:	90 93 59 18 	sts	0x1859, r25	; 0x801859 <xNextTaskUnblockTime+0x1>
    2a30:	a0 93 5a 18 	sts	0x185A, r26	; 0x80185a <xNextTaskUnblockTime+0x2>
    2a34:	b0 93 5b 18 	sts	0x185B, r27	; 0x80185b <xNextTaskUnblockTime+0x3>
    2a38:	08 95       	ret
    2a3a:	e0 91 8b 18 	lds	r30, 0x188B	; 0x80188b <pxDelayedTaskList>
    2a3e:	f0 91 8c 18 	lds	r31, 0x188C	; 0x80188c <pxDelayedTaskList+0x1>
    2a42:	07 80       	ldd	r0, Z+7	; 0x07
    2a44:	f0 85       	ldd	r31, Z+8	; 0x08
    2a46:	e0 2d       	mov	r30, r0
    2a48:	00 84       	ldd	r0, Z+8	; 0x08
    2a4a:	f1 85       	ldd	r31, Z+9	; 0x09
    2a4c:	e0 2d       	mov	r30, r0
    2a4e:	82 81       	ldd	r24, Z+2	; 0x02
    2a50:	93 81       	ldd	r25, Z+3	; 0x03
    2a52:	a4 81       	ldd	r26, Z+4	; 0x04
    2a54:	b5 81       	ldd	r27, Z+5	; 0x05
    2a56:	80 93 58 18 	sts	0x1858, r24	; 0x801858 <xNextTaskUnblockTime>
    2a5a:	90 93 59 18 	sts	0x1859, r25	; 0x801859 <xNextTaskUnblockTime+0x1>
    2a5e:	a0 93 5a 18 	sts	0x185A, r26	; 0x80185a <xNextTaskUnblockTime+0x2>
    2a62:	b0 93 5b 18 	sts	0x185B, r27	; 0x80185b <xNextTaskUnblockTime+0x3>
    2a66:	08 95       	ret

00002a68 <prvAddCurrentTaskToDelayedList>:
    2a68:	8f 92       	push	r8
    2a6a:	9f 92       	push	r9
    2a6c:	af 92       	push	r10
    2a6e:	bf 92       	push	r11
    2a70:	cf 92       	push	r12
    2a72:	df 92       	push	r13
    2a74:	ef 92       	push	r14
    2a76:	ff 92       	push	r15
    2a78:	cf 93       	push	r28
    2a7a:	6b 01       	movw	r12, r22
    2a7c:	7c 01       	movw	r14, r24
    2a7e:	c4 2f       	mov	r28, r20
    2a80:	80 90 62 18 	lds	r8, 0x1862	; 0x801862 <xTickCount>
    2a84:	90 90 63 18 	lds	r9, 0x1863	; 0x801863 <xTickCount+0x1>
    2a88:	a0 90 64 18 	lds	r10, 0x1864	; 0x801864 <xTickCount+0x2>
    2a8c:	b0 90 65 18 	lds	r11, 0x1865	; 0x801865 <xTickCount+0x3>
    2a90:	80 91 e5 18 	lds	r24, 0x18E5	; 0x8018e5 <pxCurrentTCB>
    2a94:	90 91 e6 18 	lds	r25, 0x18E6	; 0x8018e6 <pxCurrentTCB+0x1>
    2a98:	02 96       	adiw	r24, 0x02	; 2
    2a9a:	0e 94 c9 0c 	call	0x1992	; 0x1992 <uxListRemove>
    2a9e:	8f ef       	ldi	r24, 0xFF	; 255
    2aa0:	c8 16       	cp	r12, r24
    2aa2:	d8 06       	cpc	r13, r24
    2aa4:	e8 06       	cpc	r14, r24
    2aa6:	f8 06       	cpc	r15, r24
    2aa8:	69 f4       	brne	.+26     	; 0x2ac4 <prvAddCurrentTaskToDelayedList+0x5c>
    2aaa:	cc 23       	and	r28, r28
    2aac:	59 f0       	breq	.+22     	; 0x2ac4 <prvAddCurrentTaskToDelayedList+0x5c>
    2aae:	60 91 e5 18 	lds	r22, 0x18E5	; 0x8018e5 <pxCurrentTCB>
    2ab2:	70 91 e6 18 	lds	r23, 0x18E6	; 0x8018e6 <pxCurrentTCB+0x1>
    2ab6:	6e 5f       	subi	r22, 0xFE	; 254
    2ab8:	7f 4f       	sbci	r23, 0xFF	; 255
    2aba:	87 e6       	ldi	r24, 0x67	; 103
    2abc:	98 e1       	ldi	r25, 0x18	; 24
    2abe:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <vListInsertEnd>
    2ac2:	3f c0       	rjmp	.+126    	; 0x2b42 <prvAddCurrentTaskToDelayedList+0xda>
    2ac4:	c8 0c       	add	r12, r8
    2ac6:	d9 1c       	adc	r13, r9
    2ac8:	ea 1c       	adc	r14, r10
    2aca:	fb 1c       	adc	r15, r11
    2acc:	e0 91 e5 18 	lds	r30, 0x18E5	; 0x8018e5 <pxCurrentTCB>
    2ad0:	f0 91 e6 18 	lds	r31, 0x18E6	; 0x8018e6 <pxCurrentTCB+0x1>
    2ad4:	c2 82       	std	Z+2, r12	; 0x02
    2ad6:	d3 82       	std	Z+3, r13	; 0x03
    2ad8:	e4 82       	std	Z+4, r14	; 0x04
    2ada:	f5 82       	std	Z+5, r15	; 0x05
    2adc:	c8 14       	cp	r12, r8
    2ade:	d9 04       	cpc	r13, r9
    2ae0:	ea 04       	cpc	r14, r10
    2ae2:	fb 04       	cpc	r15, r11
    2ae4:	68 f4       	brcc	.+26     	; 0x2b00 <prvAddCurrentTaskToDelayedList+0x98>
    2ae6:	60 91 e5 18 	lds	r22, 0x18E5	; 0x8018e5 <pxCurrentTCB>
    2aea:	70 91 e6 18 	lds	r23, 0x18E6	; 0x8018e6 <pxCurrentTCB+0x1>
    2aee:	80 91 89 18 	lds	r24, 0x1889	; 0x801889 <pxOverflowDelayedTaskList>
    2af2:	90 91 8a 18 	lds	r25, 0x188A	; 0x80188a <pxOverflowDelayedTaskList+0x1>
    2af6:	6e 5f       	subi	r22, 0xFE	; 254
    2af8:	7f 4f       	sbci	r23, 0xFF	; 255
    2afa:	0e 94 8c 0c 	call	0x1918	; 0x1918 <vListInsert>
    2afe:	21 c0       	rjmp	.+66     	; 0x2b42 <prvAddCurrentTaskToDelayedList+0xda>
    2b00:	60 91 e5 18 	lds	r22, 0x18E5	; 0x8018e5 <pxCurrentTCB>
    2b04:	70 91 e6 18 	lds	r23, 0x18E6	; 0x8018e6 <pxCurrentTCB+0x1>
    2b08:	80 91 8b 18 	lds	r24, 0x188B	; 0x80188b <pxDelayedTaskList>
    2b0c:	90 91 8c 18 	lds	r25, 0x188C	; 0x80188c <pxDelayedTaskList+0x1>
    2b10:	6e 5f       	subi	r22, 0xFE	; 254
    2b12:	7f 4f       	sbci	r23, 0xFF	; 255
    2b14:	0e 94 8c 0c 	call	0x1918	; 0x1918 <vListInsert>
    2b18:	80 91 58 18 	lds	r24, 0x1858	; 0x801858 <xNextTaskUnblockTime>
    2b1c:	90 91 59 18 	lds	r25, 0x1859	; 0x801859 <xNextTaskUnblockTime+0x1>
    2b20:	a0 91 5a 18 	lds	r26, 0x185A	; 0x80185a <xNextTaskUnblockTime+0x2>
    2b24:	b0 91 5b 18 	lds	r27, 0x185B	; 0x80185b <xNextTaskUnblockTime+0x3>
    2b28:	c8 16       	cp	r12, r24
    2b2a:	d9 06       	cpc	r13, r25
    2b2c:	ea 06       	cpc	r14, r26
    2b2e:	fb 06       	cpc	r15, r27
    2b30:	40 f4       	brcc	.+16     	; 0x2b42 <prvAddCurrentTaskToDelayedList+0xda>
    2b32:	c0 92 58 18 	sts	0x1858, r12	; 0x801858 <xNextTaskUnblockTime>
    2b36:	d0 92 59 18 	sts	0x1859, r13	; 0x801859 <xNextTaskUnblockTime+0x1>
    2b3a:	e0 92 5a 18 	sts	0x185A, r14	; 0x80185a <xNextTaskUnblockTime+0x2>
    2b3e:	f0 92 5b 18 	sts	0x185B, r15	; 0x80185b <xNextTaskUnblockTime+0x3>
    2b42:	cf 91       	pop	r28
    2b44:	ff 90       	pop	r15
    2b46:	ef 90       	pop	r14
    2b48:	df 90       	pop	r13
    2b4a:	cf 90       	pop	r12
    2b4c:	bf 90       	pop	r11
    2b4e:	af 90       	pop	r10
    2b50:	9f 90       	pop	r9
    2b52:	8f 90       	pop	r8
    2b54:	08 95       	ret

00002b56 <xTaskCreate>:
    2b56:	4f 92       	push	r4
    2b58:	5f 92       	push	r5
    2b5a:	6f 92       	push	r6
    2b5c:	7f 92       	push	r7
    2b5e:	8f 92       	push	r8
    2b60:	9f 92       	push	r9
    2b62:	af 92       	push	r10
    2b64:	bf 92       	push	r11
    2b66:	cf 92       	push	r12
    2b68:	df 92       	push	r13
    2b6a:	ef 92       	push	r14
    2b6c:	ff 92       	push	r15
    2b6e:	0f 93       	push	r16
    2b70:	1f 93       	push	r17
    2b72:	cf 93       	push	r28
    2b74:	df 93       	push	r29
    2b76:	4c 01       	movw	r8, r24
    2b78:	6b 01       	movw	r12, r22
    2b7a:	5a 01       	movw	r10, r20
    2b7c:	29 01       	movw	r4, r18
    2b7e:	ca 01       	movw	r24, r20
    2b80:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <pvPortMalloc>
    2b84:	3c 01       	movw	r6, r24
    2b86:	89 2b       	or	r24, r25
    2b88:	09 f4       	brne	.+2      	; 0x2b8c <xTaskCreate+0x36>
    2b8a:	f4 c0       	rjmp	.+488    	; 0x2d74 <xTaskCreate+0x21e>
    2b8c:	80 e3       	ldi	r24, 0x30	; 48
    2b8e:	90 e0       	ldi	r25, 0x00	; 0
    2b90:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <pvPortMalloc>
    2b94:	ec 01       	movw	r28, r24
    2b96:	89 2b       	or	r24, r25
    2b98:	99 f0       	breq	.+38     	; 0x2bc0 <xTaskCreate+0x6a>
    2b9a:	7c 8e       	std	Y+28, r7	; 0x1c
    2b9c:	6b 8e       	std	Y+27, r6	; 0x1b
    2b9e:	a5 01       	movw	r20, r10
    2ba0:	65 ea       	ldi	r22, 0xA5	; 165
    2ba2:	70 e0       	ldi	r23, 0x00	; 0
    2ba4:	c3 01       	movw	r24, r6
    2ba6:	0e 94 80 31 	call	0x6300	; 0x6300 <memset>
    2baa:	21 e0       	ldi	r18, 0x01	; 1
    2bac:	a2 1a       	sub	r10, r18
    2bae:	b1 08       	sbc	r11, r1
    2bb0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2bb2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2bb4:	a8 0e       	add	r10, r24
    2bb6:	b9 1e       	adc	r11, r25
    2bb8:	c1 14       	cp	r12, r1
    2bba:	d1 04       	cpc	r13, r1
    2bbc:	29 f4       	brne	.+10     	; 0x2bc8 <xTaskCreate+0x72>
    2bbe:	20 c0       	rjmp	.+64     	; 0x2c00 <xTaskCreate+0xaa>
    2bc0:	c3 01       	movw	r24, r6
    2bc2:	0e 94 25 0c 	call	0x184a	; 0x184a <vPortFree>
    2bc6:	d6 c0       	rjmp	.+428    	; 0x2d74 <xTaskCreate+0x21e>
    2bc8:	d6 01       	movw	r26, r12
    2bca:	8c 91       	ld	r24, X
    2bcc:	8d 8f       	std	Y+29, r24	; 0x1d
    2bce:	8c 91       	ld	r24, X
    2bd0:	88 23       	and	r24, r24
    2bd2:	a1 f0       	breq	.+40     	; 0x2bfc <xTaskCreate+0xa6>
    2bd4:	ae 01       	movw	r20, r28
    2bd6:	42 5e       	subi	r20, 0xE2	; 226
    2bd8:	5f 4f       	sbci	r21, 0xFF	; 255
    2bda:	f6 01       	movw	r30, r12
    2bdc:	31 96       	adiw	r30, 0x01	; 1
    2bde:	b8 e0       	ldi	r27, 0x08	; 8
    2be0:	cb 0e       	add	r12, r27
    2be2:	d1 1c       	adc	r13, r1
    2be4:	cf 01       	movw	r24, r30
    2be6:	21 91       	ld	r18, Z+
    2be8:	da 01       	movw	r26, r20
    2bea:	2d 93       	st	X+, r18
    2bec:	ad 01       	movw	r20, r26
    2bee:	dc 01       	movw	r26, r24
    2bf0:	8c 91       	ld	r24, X
    2bf2:	88 23       	and	r24, r24
    2bf4:	19 f0       	breq	.+6      	; 0x2bfc <xTaskCreate+0xa6>
    2bf6:	ce 16       	cp	r12, r30
    2bf8:	df 06       	cpc	r13, r31
    2bfa:	a1 f7       	brne	.-24     	; 0x2be4 <xTaskCreate+0x8e>
    2bfc:	1c a2       	std	Y+36, r1	; 0x24
    2bfe:	01 c0       	rjmp	.+2      	; 0x2c02 <xTaskCreate+0xac>
    2c00:	1d 8e       	std	Y+29, r1	; 0x1d
    2c02:	06 30       	cpi	r16, 0x06	; 6
    2c04:	08 f0       	brcs	.+2      	; 0x2c08 <xTaskCreate+0xb2>
    2c06:	05 e0       	ldi	r16, 0x05	; 5
    2c08:	0a 8f       	std	Y+26, r16	; 0x1a
    2c0a:	0f a3       	std	Y+39, r16	; 0x27
    2c0c:	18 a6       	std	Y+40, r1	; 0x28
    2c0e:	6e 01       	movw	r12, r28
    2c10:	b2 e0       	ldi	r27, 0x02	; 2
    2c12:	cb 0e       	add	r12, r27
    2c14:	d1 1c       	adc	r13, r1
    2c16:	c6 01       	movw	r24, r12
    2c18:	0e 94 67 0c 	call	0x18ce	; 0x18ce <vListInitialiseItem>
    2c1c:	ce 01       	movw	r24, r28
    2c1e:	0e 96       	adiw	r24, 0x0e	; 14
    2c20:	0e 94 67 0c 	call	0x18ce	; 0x18ce <vListInitialiseItem>
    2c24:	db 87       	std	Y+11, r29	; 0x0b
    2c26:	ca 87       	std	Y+10, r28	; 0x0a
    2c28:	86 e0       	ldi	r24, 0x06	; 6
    2c2a:	90 e0       	ldi	r25, 0x00	; 0
    2c2c:	a0 e0       	ldi	r26, 0x00	; 0
    2c2e:	b0 e0       	ldi	r27, 0x00	; 0
    2c30:	80 1b       	sub	r24, r16
    2c32:	91 09       	sbc	r25, r1
    2c34:	a1 09       	sbc	r26, r1
    2c36:	b1 09       	sbc	r27, r1
    2c38:	8e 87       	std	Y+14, r24	; 0x0e
    2c3a:	9f 87       	std	Y+15, r25	; 0x0f
    2c3c:	a8 8b       	std	Y+16, r26	; 0x10
    2c3e:	b9 8b       	std	Y+17, r27	; 0x11
    2c40:	df 8b       	std	Y+23, r29	; 0x17
    2c42:	ce 8b       	std	Y+22, r28	; 0x16
    2c44:	1a a6       	std	Y+42, r1	; 0x2a
    2c46:	19 a6       	std	Y+41, r1	; 0x29
    2c48:	1b a6       	std	Y+43, r1	; 0x2b
    2c4a:	1c a6       	std	Y+44, r1	; 0x2c
    2c4c:	1d a6       	std	Y+45, r1	; 0x2d
    2c4e:	1e a6       	std	Y+46, r1	; 0x2e
    2c50:	1f a6       	std	Y+47, r1	; 0x2f
    2c52:	a2 01       	movw	r20, r4
    2c54:	b4 01       	movw	r22, r8
    2c56:	c5 01       	movw	r24, r10
    2c58:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <pxPortInitialiseStack>
    2c5c:	99 83       	std	Y+1, r25	; 0x01
    2c5e:	88 83       	st	Y, r24
    2c60:	e1 14       	cp	r14, r1
    2c62:	f1 04       	cpc	r15, r1
    2c64:	19 f0       	breq	.+6      	; 0x2c6c <xTaskCreate+0x116>
    2c66:	f7 01       	movw	r30, r14
    2c68:	d1 83       	std	Z+1, r29	; 0x01
    2c6a:	c0 83       	st	Z, r28
    2c6c:	0f b6       	in	r0, 0x3f	; 63
    2c6e:	f8 94       	cli
    2c70:	0f 92       	push	r0
    2c72:	80 91 66 18 	lds	r24, 0x1866	; 0x801866 <uxCurrentNumberOfTasks>
    2c76:	8f 5f       	subi	r24, 0xFF	; 255
    2c78:	80 93 66 18 	sts	0x1866, r24	; 0x801866 <uxCurrentNumberOfTasks>
    2c7c:	80 91 e5 18 	lds	r24, 0x18E5	; 0x8018e5 <pxCurrentTCB>
    2c80:	90 91 e6 18 	lds	r25, 0x18E6	; 0x8018e6 <pxCurrentTCB+0x1>
    2c84:	89 2b       	or	r24, r25
    2c86:	d1 f5       	brne	.+116    	; 0x2cfc <xTaskCreate+0x1a6>
    2c88:	d0 93 e6 18 	sts	0x18E6, r29	; 0x8018e6 <pxCurrentTCB+0x1>
    2c8c:	c0 93 e5 18 	sts	0x18E5, r28	; 0x8018e5 <pxCurrentTCB>
    2c90:	80 91 66 18 	lds	r24, 0x1866	; 0x801866 <uxCurrentNumberOfTasks>
    2c94:	81 30       	cpi	r24, 0x01	; 1
    2c96:	09 f0       	breq	.+2      	; 0x2c9a <xTaskCreate+0x144>
    2c98:	41 c0       	rjmp	.+130    	; 0x2d1c <xTaskCreate+0x1c6>
    2c9a:	03 ea       	ldi	r16, 0xA3	; 163
    2c9c:	18 e1       	ldi	r17, 0x18	; 24
    2c9e:	0f 2e       	mov	r0, r31
    2ca0:	f5 ee       	ldi	r31, 0xE5	; 229
    2ca2:	ef 2e       	mov	r14, r31
    2ca4:	f8 e1       	ldi	r31, 0x18	; 24
    2ca6:	ff 2e       	mov	r15, r31
    2ca8:	f0 2d       	mov	r31, r0
    2caa:	c8 01       	movw	r24, r16
    2cac:	0e 94 56 0c 	call	0x18ac	; 0x18ac <vListInitialise>
    2cb0:	05 5f       	subi	r16, 0xF5	; 245
    2cb2:	1f 4f       	sbci	r17, 0xFF	; 255
    2cb4:	0e 15       	cp	r16, r14
    2cb6:	1f 05       	cpc	r17, r15
    2cb8:	c1 f7       	brne	.-16     	; 0x2caa <xTaskCreate+0x154>
    2cba:	88 e9       	ldi	r24, 0x98	; 152
    2cbc:	98 e1       	ldi	r25, 0x18	; 24
    2cbe:	0e 94 56 0c 	call	0x18ac	; 0x18ac <vListInitialise>
    2cc2:	8d e8       	ldi	r24, 0x8D	; 141
    2cc4:	98 e1       	ldi	r25, 0x18	; 24
    2cc6:	0e 94 56 0c 	call	0x18ac	; 0x18ac <vListInitialise>
    2cca:	8e e7       	ldi	r24, 0x7E	; 126
    2ccc:	98 e1       	ldi	r25, 0x18	; 24
    2cce:	0e 94 56 0c 	call	0x18ac	; 0x18ac <vListInitialise>
    2cd2:	83 e7       	ldi	r24, 0x73	; 115
    2cd4:	98 e1       	ldi	r25, 0x18	; 24
    2cd6:	0e 94 56 0c 	call	0x18ac	; 0x18ac <vListInitialise>
    2cda:	87 e6       	ldi	r24, 0x67	; 103
    2cdc:	98 e1       	ldi	r25, 0x18	; 24
    2cde:	0e 94 56 0c 	call	0x18ac	; 0x18ac <vListInitialise>
    2ce2:	88 e9       	ldi	r24, 0x98	; 152
    2ce4:	98 e1       	ldi	r25, 0x18	; 24
    2ce6:	90 93 8c 18 	sts	0x188C, r25	; 0x80188c <pxDelayedTaskList+0x1>
    2cea:	80 93 8b 18 	sts	0x188B, r24	; 0x80188b <pxDelayedTaskList>
    2cee:	8d e8       	ldi	r24, 0x8D	; 141
    2cf0:	98 e1       	ldi	r25, 0x18	; 24
    2cf2:	90 93 8a 18 	sts	0x188A, r25	; 0x80188a <pxOverflowDelayedTaskList+0x1>
    2cf6:	80 93 89 18 	sts	0x1889, r24	; 0x801889 <pxOverflowDelayedTaskList>
    2cfa:	10 c0       	rjmp	.+32     	; 0x2d1c <xTaskCreate+0x1c6>
    2cfc:	80 91 60 18 	lds	r24, 0x1860	; 0x801860 <xSchedulerRunning>
    2d00:	81 11       	cpse	r24, r1
    2d02:	0c c0       	rjmp	.+24     	; 0x2d1c <xTaskCreate+0x1c6>
    2d04:	e0 91 e5 18 	lds	r30, 0x18E5	; 0x8018e5 <pxCurrentTCB>
    2d08:	f0 91 e6 18 	lds	r31, 0x18E6	; 0x8018e6 <pxCurrentTCB+0x1>
    2d0c:	92 8d       	ldd	r25, Z+26	; 0x1a
    2d0e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2d10:	89 17       	cp	r24, r25
    2d12:	20 f0       	brcs	.+8      	; 0x2d1c <xTaskCreate+0x1c6>
    2d14:	d0 93 e6 18 	sts	0x18E6, r29	; 0x8018e6 <pxCurrentTCB+0x1>
    2d18:	c0 93 e5 18 	sts	0x18E5, r28	; 0x8018e5 <pxCurrentTCB>
    2d1c:	80 91 5c 18 	lds	r24, 0x185C	; 0x80185c <uxTaskNumber>
    2d20:	8f 5f       	subi	r24, 0xFF	; 255
    2d22:	80 93 5c 18 	sts	0x185C, r24	; 0x80185c <uxTaskNumber>
    2d26:	8d a3       	std	Y+37, r24	; 0x25
    2d28:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2d2a:	90 91 61 18 	lds	r25, 0x1861	; 0x801861 <uxTopReadyPriority>
    2d2e:	98 17       	cp	r25, r24
    2d30:	10 f4       	brcc	.+4      	; 0x2d36 <xTaskCreate+0x1e0>
    2d32:	80 93 61 18 	sts	0x1861, r24	; 0x801861 <uxTopReadyPriority>
    2d36:	fb e0       	ldi	r31, 0x0B	; 11
    2d38:	8f 9f       	mul	r24, r31
    2d3a:	c0 01       	movw	r24, r0
    2d3c:	11 24       	eor	r1, r1
    2d3e:	b6 01       	movw	r22, r12
    2d40:	8d 55       	subi	r24, 0x5D	; 93
    2d42:	97 4e       	sbci	r25, 0xE7	; 231
    2d44:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <vListInsertEnd>
    2d48:	0f 90       	pop	r0
    2d4a:	0f be       	out	0x3f, r0	; 63
    2d4c:	80 91 60 18 	lds	r24, 0x1860	; 0x801860 <xSchedulerRunning>
    2d50:	88 23       	and	r24, r24
    2d52:	61 f0       	breq	.+24     	; 0x2d6c <xTaskCreate+0x216>
    2d54:	e0 91 e5 18 	lds	r30, 0x18E5	; 0x8018e5 <pxCurrentTCB>
    2d58:	f0 91 e6 18 	lds	r31, 0x18E6	; 0x8018e6 <pxCurrentTCB+0x1>
    2d5c:	92 8d       	ldd	r25, Z+26	; 0x1a
    2d5e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2d60:	98 17       	cp	r25, r24
    2d62:	30 f4       	brcc	.+12     	; 0x2d70 <xTaskCreate+0x21a>
    2d64:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <vPortYield>
    2d68:	81 e0       	ldi	r24, 0x01	; 1
    2d6a:	05 c0       	rjmp	.+10     	; 0x2d76 <xTaskCreate+0x220>
    2d6c:	81 e0       	ldi	r24, 0x01	; 1
    2d6e:	03 c0       	rjmp	.+6      	; 0x2d76 <xTaskCreate+0x220>
    2d70:	81 e0       	ldi	r24, 0x01	; 1
    2d72:	01 c0       	rjmp	.+2      	; 0x2d76 <xTaskCreate+0x220>
    2d74:	8f ef       	ldi	r24, 0xFF	; 255
    2d76:	df 91       	pop	r29
    2d78:	cf 91       	pop	r28
    2d7a:	1f 91       	pop	r17
    2d7c:	0f 91       	pop	r16
    2d7e:	ff 90       	pop	r15
    2d80:	ef 90       	pop	r14
    2d82:	df 90       	pop	r13
    2d84:	cf 90       	pop	r12
    2d86:	bf 90       	pop	r11
    2d88:	af 90       	pop	r10
    2d8a:	9f 90       	pop	r9
    2d8c:	8f 90       	pop	r8
    2d8e:	7f 90       	pop	r7
    2d90:	6f 90       	pop	r6
    2d92:	5f 90       	pop	r5
    2d94:	4f 90       	pop	r4
    2d96:	08 95       	ret

00002d98 <vTaskStartScheduler>:
    2d98:	ef 92       	push	r14
    2d9a:	ff 92       	push	r15
    2d9c:	0f 93       	push	r16
    2d9e:	0f 2e       	mov	r0, r31
    2da0:	f6 e5       	ldi	r31, 0x56	; 86
    2da2:	ef 2e       	mov	r14, r31
    2da4:	f8 e1       	ldi	r31, 0x18	; 24
    2da6:	ff 2e       	mov	r15, r31
    2da8:	f0 2d       	mov	r31, r0
    2daa:	00 e0       	ldi	r16, 0x00	; 0
    2dac:	20 e0       	ldi	r18, 0x00	; 0
    2dae:	30 e0       	ldi	r19, 0x00	; 0
    2db0:	40 ec       	ldi	r20, 0xC0	; 192
    2db2:	50 e0       	ldi	r21, 0x00	; 0
    2db4:	6c ec       	ldi	r22, 0xCC	; 204
    2db6:	74 e0       	ldi	r23, 0x04	; 4
    2db8:	8d ec       	ldi	r24, 0xCD	; 205
    2dba:	90 e0       	ldi	r25, 0x00	; 0
    2dbc:	cc de       	rcall	.-616    	; 0x2b56 <xTaskCreate>
    2dbe:	81 30       	cpi	r24, 0x01	; 1
    2dc0:	19 f5       	brne	.+70     	; 0x2e08 <vTaskStartScheduler+0x70>
    2dc2:	ce d6       	rcall	.+3484   	; 0x3b60 <xTimerCreateTimerTask>
    2dc4:	81 30       	cpi	r24, 0x01	; 1
    2dc6:	01 f5       	brne	.+64     	; 0x2e08 <vTaskStartScheduler+0x70>
    2dc8:	f8 94       	cli
    2dca:	8f ef       	ldi	r24, 0xFF	; 255
    2dcc:	9f ef       	ldi	r25, 0xFF	; 255
    2dce:	dc 01       	movw	r26, r24
    2dd0:	80 93 58 18 	sts	0x1858, r24	; 0x801858 <xNextTaskUnblockTime>
    2dd4:	90 93 59 18 	sts	0x1859, r25	; 0x801859 <xNextTaskUnblockTime+0x1>
    2dd8:	a0 93 5a 18 	sts	0x185A, r26	; 0x80185a <xNextTaskUnblockTime+0x2>
    2ddc:	b0 93 5b 18 	sts	0x185B, r27	; 0x80185b <xNextTaskUnblockTime+0x3>
    2de0:	81 e0       	ldi	r24, 0x01	; 1
    2de2:	80 93 60 18 	sts	0x1860, r24	; 0x801860 <xSchedulerRunning>
    2de6:	10 92 62 18 	sts	0x1862, r1	; 0x801862 <xTickCount>
    2dea:	10 92 63 18 	sts	0x1863, r1	; 0x801863 <xTickCount+0x1>
    2dee:	10 92 64 18 	sts	0x1864, r1	; 0x801864 <xTickCount+0x2>
    2df2:	10 92 65 18 	sts	0x1865, r1	; 0x801865 <xTickCount+0x3>
    2df6:	e0 91 e5 18 	lds	r30, 0x18E5	; 0x8018e5 <pxCurrentTCB>
    2dfa:	f0 91 e6 18 	lds	r31, 0x18E6	; 0x8018e6 <pxCurrentTCB+0x1>
    2dfe:	81 a5       	ldd	r24, Z+41	; 0x29
    2e00:	0e 94 a3 09 	call	0x1346	; 0x1346 <task_switch_in>
    2e04:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <xPortStartScheduler>
    2e08:	0f 91       	pop	r16
    2e0a:	ff 90       	pop	r15
    2e0c:	ef 90       	pop	r14
    2e0e:	08 95       	ret

00002e10 <vTaskSuspendAll>:
    2e10:	80 91 55 18 	lds	r24, 0x1855	; 0x801855 <uxSchedulerSuspended>
    2e14:	8f 5f       	subi	r24, 0xFF	; 255
    2e16:	80 93 55 18 	sts	0x1855, r24	; 0x801855 <uxSchedulerSuspended>
    2e1a:	08 95       	ret

00002e1c <xTaskGetTickCount>:
    2e1c:	0f b6       	in	r0, 0x3f	; 63
    2e1e:	f8 94       	cli
    2e20:	0f 92       	push	r0
    2e22:	60 91 62 18 	lds	r22, 0x1862	; 0x801862 <xTickCount>
    2e26:	70 91 63 18 	lds	r23, 0x1863	; 0x801863 <xTickCount+0x1>
    2e2a:	80 91 64 18 	lds	r24, 0x1864	; 0x801864 <xTickCount+0x2>
    2e2e:	90 91 65 18 	lds	r25, 0x1865	; 0x801865 <xTickCount+0x3>
    2e32:	0f 90       	pop	r0
    2e34:	0f be       	out	0x3f, r0	; 63
    2e36:	08 95       	ret

00002e38 <xTaskIncrementTick>:
    2e38:	9f 92       	push	r9
    2e3a:	af 92       	push	r10
    2e3c:	bf 92       	push	r11
    2e3e:	cf 92       	push	r12
    2e40:	df 92       	push	r13
    2e42:	ef 92       	push	r14
    2e44:	ff 92       	push	r15
    2e46:	0f 93       	push	r16
    2e48:	1f 93       	push	r17
    2e4a:	cf 93       	push	r28
    2e4c:	df 93       	push	r29
    2e4e:	80 91 55 18 	lds	r24, 0x1855	; 0x801855 <uxSchedulerSuspended>
    2e52:	81 11       	cpse	r24, r1
    2e54:	ad c0       	rjmp	.+346    	; 0x2fb0 <xTaskIncrementTick+0x178>
    2e56:	c0 90 62 18 	lds	r12, 0x1862	; 0x801862 <xTickCount>
    2e5a:	d0 90 63 18 	lds	r13, 0x1863	; 0x801863 <xTickCount+0x1>
    2e5e:	e0 90 64 18 	lds	r14, 0x1864	; 0x801864 <xTickCount+0x2>
    2e62:	f0 90 65 18 	lds	r15, 0x1865	; 0x801865 <xTickCount+0x3>
    2e66:	8f ef       	ldi	r24, 0xFF	; 255
    2e68:	c8 1a       	sub	r12, r24
    2e6a:	d8 0a       	sbc	r13, r24
    2e6c:	e8 0a       	sbc	r14, r24
    2e6e:	f8 0a       	sbc	r15, r24
    2e70:	c0 92 62 18 	sts	0x1862, r12	; 0x801862 <xTickCount>
    2e74:	d0 92 63 18 	sts	0x1863, r13	; 0x801863 <xTickCount+0x1>
    2e78:	e0 92 64 18 	sts	0x1864, r14	; 0x801864 <xTickCount+0x2>
    2e7c:	f0 92 65 18 	sts	0x1865, r15	; 0x801865 <xTickCount+0x3>
    2e80:	c1 14       	cp	r12, r1
    2e82:	d1 04       	cpc	r13, r1
    2e84:	e1 04       	cpc	r14, r1
    2e86:	f1 04       	cpc	r15, r1
    2e88:	b1 f4       	brne	.+44     	; 0x2eb6 <xTaskIncrementTick+0x7e>
    2e8a:	80 91 8b 18 	lds	r24, 0x188B	; 0x80188b <pxDelayedTaskList>
    2e8e:	90 91 8c 18 	lds	r25, 0x188C	; 0x80188c <pxDelayedTaskList+0x1>
    2e92:	20 91 89 18 	lds	r18, 0x1889	; 0x801889 <pxOverflowDelayedTaskList>
    2e96:	30 91 8a 18 	lds	r19, 0x188A	; 0x80188a <pxOverflowDelayedTaskList+0x1>
    2e9a:	30 93 8c 18 	sts	0x188C, r19	; 0x80188c <pxDelayedTaskList+0x1>
    2e9e:	20 93 8b 18 	sts	0x188B, r18	; 0x80188b <pxDelayedTaskList>
    2ea2:	90 93 8a 18 	sts	0x188A, r25	; 0x80188a <pxOverflowDelayedTaskList+0x1>
    2ea6:	80 93 89 18 	sts	0x1889, r24	; 0x801889 <pxOverflowDelayedTaskList>
    2eaa:	80 91 5d 18 	lds	r24, 0x185D	; 0x80185d <xNumOfOverflows>
    2eae:	8f 5f       	subi	r24, 0xFF	; 255
    2eb0:	80 93 5d 18 	sts	0x185D, r24	; 0x80185d <xNumOfOverflows>
    2eb4:	af dd       	rcall	.-1186   	; 0x2a14 <prvResetNextTaskUnblockTime>
    2eb6:	80 91 58 18 	lds	r24, 0x1858	; 0x801858 <xNextTaskUnblockTime>
    2eba:	90 91 59 18 	lds	r25, 0x1859	; 0x801859 <xNextTaskUnblockTime+0x1>
    2ebe:	a0 91 5a 18 	lds	r26, 0x185A	; 0x80185a <xNextTaskUnblockTime+0x2>
    2ec2:	b0 91 5b 18 	lds	r27, 0x185B	; 0x80185b <xNextTaskUnblockTime+0x3>
    2ec6:	c8 16       	cp	r12, r24
    2ec8:	d9 06       	cpc	r13, r25
    2eca:	ea 06       	cpc	r14, r26
    2ecc:	fb 06       	cpc	r15, r27
    2ece:	10 f4       	brcc	.+4      	; 0x2ed4 <xTaskIncrementTick+0x9c>
    2ed0:	b1 2c       	mov	r11, r1
    2ed2:	5d c0       	rjmp	.+186    	; 0x2f8e <xTaskIncrementTick+0x156>
    2ed4:	b1 2c       	mov	r11, r1
    2ed6:	0f 2e       	mov	r0, r31
    2ed8:	fb e0       	ldi	r31, 0x0B	; 11
    2eda:	af 2e       	mov	r10, r31
    2edc:	f0 2d       	mov	r31, r0
    2ede:	99 24       	eor	r9, r9
    2ee0:	93 94       	inc	r9
    2ee2:	e0 91 8b 18 	lds	r30, 0x188B	; 0x80188b <pxDelayedTaskList>
    2ee6:	f0 91 8c 18 	lds	r31, 0x188C	; 0x80188c <pxDelayedTaskList+0x1>
    2eea:	80 81       	ld	r24, Z
    2eec:	81 11       	cpse	r24, r1
    2eee:	0c c0       	rjmp	.+24     	; 0x2f08 <xTaskIncrementTick+0xd0>
    2ef0:	8f ef       	ldi	r24, 0xFF	; 255
    2ef2:	9f ef       	ldi	r25, 0xFF	; 255
    2ef4:	dc 01       	movw	r26, r24
    2ef6:	80 93 58 18 	sts	0x1858, r24	; 0x801858 <xNextTaskUnblockTime>
    2efa:	90 93 59 18 	sts	0x1859, r25	; 0x801859 <xNextTaskUnblockTime+0x1>
    2efe:	a0 93 5a 18 	sts	0x185A, r26	; 0x80185a <xNextTaskUnblockTime+0x2>
    2f02:	b0 93 5b 18 	sts	0x185B, r27	; 0x80185b <xNextTaskUnblockTime+0x3>
    2f06:	43 c0       	rjmp	.+134    	; 0x2f8e <xTaskIncrementTick+0x156>
    2f08:	e0 91 8b 18 	lds	r30, 0x188B	; 0x80188b <pxDelayedTaskList>
    2f0c:	f0 91 8c 18 	lds	r31, 0x188C	; 0x80188c <pxDelayedTaskList+0x1>
    2f10:	07 80       	ldd	r0, Z+7	; 0x07
    2f12:	f0 85       	ldd	r31, Z+8	; 0x08
    2f14:	e0 2d       	mov	r30, r0
    2f16:	c0 85       	ldd	r28, Z+8	; 0x08
    2f18:	d1 85       	ldd	r29, Z+9	; 0x09
    2f1a:	8a 81       	ldd	r24, Y+2	; 0x02
    2f1c:	9b 81       	ldd	r25, Y+3	; 0x03
    2f1e:	ac 81       	ldd	r26, Y+4	; 0x04
    2f20:	bd 81       	ldd	r27, Y+5	; 0x05
    2f22:	c8 16       	cp	r12, r24
    2f24:	d9 06       	cpc	r13, r25
    2f26:	ea 06       	cpc	r14, r26
    2f28:	fb 06       	cpc	r15, r27
    2f2a:	48 f4       	brcc	.+18     	; 0x2f3e <xTaskIncrementTick+0x106>
    2f2c:	80 93 58 18 	sts	0x1858, r24	; 0x801858 <xNextTaskUnblockTime>
    2f30:	90 93 59 18 	sts	0x1859, r25	; 0x801859 <xNextTaskUnblockTime+0x1>
    2f34:	a0 93 5a 18 	sts	0x185A, r26	; 0x80185a <xNextTaskUnblockTime+0x2>
    2f38:	b0 93 5b 18 	sts	0x185B, r27	; 0x80185b <xNextTaskUnblockTime+0x3>
    2f3c:	28 c0       	rjmp	.+80     	; 0x2f8e <xTaskIncrementTick+0x156>
    2f3e:	8e 01       	movw	r16, r28
    2f40:	0e 5f       	subi	r16, 0xFE	; 254
    2f42:	1f 4f       	sbci	r17, 0xFF	; 255
    2f44:	c8 01       	movw	r24, r16
    2f46:	0e 94 c9 0c 	call	0x1992	; 0x1992 <uxListRemove>
    2f4a:	88 8d       	ldd	r24, Y+24	; 0x18
    2f4c:	99 8d       	ldd	r25, Y+25	; 0x19
    2f4e:	89 2b       	or	r24, r25
    2f50:	21 f0       	breq	.+8      	; 0x2f5a <xTaskIncrementTick+0x122>
    2f52:	ce 01       	movw	r24, r28
    2f54:	0e 96       	adiw	r24, 0x0e	; 14
    2f56:	0e 94 c9 0c 	call	0x1992	; 0x1992 <uxListRemove>
    2f5a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2f5c:	90 91 61 18 	lds	r25, 0x1861	; 0x801861 <uxTopReadyPriority>
    2f60:	98 17       	cp	r25, r24
    2f62:	10 f4       	brcc	.+4      	; 0x2f68 <xTaskIncrementTick+0x130>
    2f64:	80 93 61 18 	sts	0x1861, r24	; 0x801861 <uxTopReadyPriority>
    2f68:	a8 9e       	mul	r10, r24
    2f6a:	c0 01       	movw	r24, r0
    2f6c:	11 24       	eor	r1, r1
    2f6e:	b8 01       	movw	r22, r16
    2f70:	8d 55       	subi	r24, 0x5D	; 93
    2f72:	97 4e       	sbci	r25, 0xE7	; 231
    2f74:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <vListInsertEnd>
    2f78:	e0 91 e5 18 	lds	r30, 0x18E5	; 0x8018e5 <pxCurrentTCB>
    2f7c:	f0 91 e6 18 	lds	r31, 0x18E6	; 0x8018e6 <pxCurrentTCB+0x1>
    2f80:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2f82:	82 8d       	ldd	r24, Z+26	; 0x1a
    2f84:	98 17       	cp	r25, r24
    2f86:	08 f4       	brcc	.+2      	; 0x2f8a <xTaskIncrementTick+0x152>
    2f88:	ac cf       	rjmp	.-168    	; 0x2ee2 <xTaskIncrementTick+0xaa>
    2f8a:	b9 2c       	mov	r11, r9
    2f8c:	aa cf       	rjmp	.-172    	; 0x2ee2 <xTaskIncrementTick+0xaa>
    2f8e:	e0 91 e5 18 	lds	r30, 0x18E5	; 0x8018e5 <pxCurrentTCB>
    2f92:	f0 91 e6 18 	lds	r31, 0x18E6	; 0x8018e6 <pxCurrentTCB+0x1>
    2f96:	e2 8d       	ldd	r30, Z+26	; 0x1a
    2f98:	8b e0       	ldi	r24, 0x0B	; 11
    2f9a:	e8 9f       	mul	r30, r24
    2f9c:	f0 01       	movw	r30, r0
    2f9e:	11 24       	eor	r1, r1
    2fa0:	ed 55       	subi	r30, 0x5D	; 93
    2fa2:	f7 4e       	sbci	r31, 0xE7	; 231
    2fa4:	80 81       	ld	r24, Z
    2fa6:	82 30       	cpi	r24, 0x02	; 2
    2fa8:	48 f0       	brcs	.+18     	; 0x2fbc <xTaskIncrementTick+0x184>
    2faa:	bb 24       	eor	r11, r11
    2fac:	b3 94       	inc	r11
    2fae:	06 c0       	rjmp	.+12     	; 0x2fbc <xTaskIncrementTick+0x184>
    2fb0:	80 91 5f 18 	lds	r24, 0x185F	; 0x80185f <uxPendedTicks>
    2fb4:	8f 5f       	subi	r24, 0xFF	; 255
    2fb6:	80 93 5f 18 	sts	0x185F, r24	; 0x80185f <uxPendedTicks>
    2fba:	b1 2c       	mov	r11, r1
    2fbc:	80 91 5e 18 	lds	r24, 0x185E	; 0x80185e <xYieldPending>
    2fc0:	88 23       	and	r24, r24
    2fc2:	11 f0       	breq	.+4      	; 0x2fc8 <xTaskIncrementTick+0x190>
    2fc4:	bb 24       	eor	r11, r11
    2fc6:	b3 94       	inc	r11
    2fc8:	8b 2d       	mov	r24, r11
    2fca:	df 91       	pop	r29
    2fcc:	cf 91       	pop	r28
    2fce:	1f 91       	pop	r17
    2fd0:	0f 91       	pop	r16
    2fd2:	ff 90       	pop	r15
    2fd4:	ef 90       	pop	r14
    2fd6:	df 90       	pop	r13
    2fd8:	cf 90       	pop	r12
    2fda:	bf 90       	pop	r11
    2fdc:	af 90       	pop	r10
    2fde:	9f 90       	pop	r9
    2fe0:	08 95       	ret

00002fe2 <xTaskResumeAll>:
    2fe2:	cf 92       	push	r12
    2fe4:	df 92       	push	r13
    2fe6:	ef 92       	push	r14
    2fe8:	ff 92       	push	r15
    2fea:	0f 93       	push	r16
    2fec:	1f 93       	push	r17
    2fee:	cf 93       	push	r28
    2ff0:	df 93       	push	r29
    2ff2:	0f b6       	in	r0, 0x3f	; 63
    2ff4:	f8 94       	cli
    2ff6:	0f 92       	push	r0
    2ff8:	80 91 55 18 	lds	r24, 0x1855	; 0x801855 <uxSchedulerSuspended>
    2ffc:	81 50       	subi	r24, 0x01	; 1
    2ffe:	80 93 55 18 	sts	0x1855, r24	; 0x801855 <uxSchedulerSuspended>
    3002:	80 91 55 18 	lds	r24, 0x1855	; 0x801855 <uxSchedulerSuspended>
    3006:	81 11       	cpse	r24, r1
    3008:	5a c0       	rjmp	.+180    	; 0x30be <xTaskResumeAll+0xdc>
    300a:	80 91 66 18 	lds	r24, 0x1866	; 0x801866 <uxCurrentNumberOfTasks>
    300e:	81 11       	cpse	r24, r1
    3010:	2c c0       	rjmp	.+88     	; 0x306a <xTaskResumeAll+0x88>
    3012:	58 c0       	rjmp	.+176    	; 0x30c4 <xTaskResumeAll+0xe2>
    3014:	d7 01       	movw	r26, r14
    3016:	17 96       	adiw	r26, 0x07	; 7
    3018:	ed 91       	ld	r30, X+
    301a:	fc 91       	ld	r31, X
    301c:	18 97       	sbiw	r26, 0x08	; 8
    301e:	c0 85       	ldd	r28, Z+8	; 0x08
    3020:	d1 85       	ldd	r29, Z+9	; 0x09
    3022:	ce 01       	movw	r24, r28
    3024:	0e 96       	adiw	r24, 0x0e	; 14
    3026:	0e 94 c9 0c 	call	0x1992	; 0x1992 <uxListRemove>
    302a:	8e 01       	movw	r16, r28
    302c:	0e 5f       	subi	r16, 0xFE	; 254
    302e:	1f 4f       	sbci	r17, 0xFF	; 255
    3030:	c8 01       	movw	r24, r16
    3032:	0e 94 c9 0c 	call	0x1992	; 0x1992 <uxListRemove>
    3036:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3038:	90 91 61 18 	lds	r25, 0x1861	; 0x801861 <uxTopReadyPriority>
    303c:	98 17       	cp	r25, r24
    303e:	10 f4       	brcc	.+4      	; 0x3044 <xTaskResumeAll+0x62>
    3040:	80 93 61 18 	sts	0x1861, r24	; 0x801861 <uxTopReadyPriority>
    3044:	d8 9e       	mul	r13, r24
    3046:	c0 01       	movw	r24, r0
    3048:	11 24       	eor	r1, r1
    304a:	b8 01       	movw	r22, r16
    304c:	8d 55       	subi	r24, 0x5D	; 93
    304e:	97 4e       	sbci	r25, 0xE7	; 231
    3050:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <vListInsertEnd>
    3054:	e0 91 e5 18 	lds	r30, 0x18E5	; 0x8018e5 <pxCurrentTCB>
    3058:	f0 91 e6 18 	lds	r31, 0x18E6	; 0x8018e6 <pxCurrentTCB+0x1>
    305c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    305e:	82 8d       	ldd	r24, Z+26	; 0x1a
    3060:	98 17       	cp	r25, r24
    3062:	88 f0       	brcs	.+34     	; 0x3086 <xTaskResumeAll+0xa4>
    3064:	c0 92 5e 18 	sts	0x185E, r12	; 0x80185e <xYieldPending>
    3068:	0e c0       	rjmp	.+28     	; 0x3086 <xTaskResumeAll+0xa4>
    306a:	c0 e0       	ldi	r28, 0x00	; 0
    306c:	d0 e0       	ldi	r29, 0x00	; 0
    306e:	0f 2e       	mov	r0, r31
    3070:	fe e7       	ldi	r31, 0x7E	; 126
    3072:	ef 2e       	mov	r14, r31
    3074:	f8 e1       	ldi	r31, 0x18	; 24
    3076:	ff 2e       	mov	r15, r31
    3078:	f0 2d       	mov	r31, r0
    307a:	0f 2e       	mov	r0, r31
    307c:	fb e0       	ldi	r31, 0x0B	; 11
    307e:	df 2e       	mov	r13, r31
    3080:	f0 2d       	mov	r31, r0
    3082:	cc 24       	eor	r12, r12
    3084:	c3 94       	inc	r12
    3086:	f7 01       	movw	r30, r14
    3088:	80 81       	ld	r24, Z
    308a:	81 11       	cpse	r24, r1
    308c:	c3 cf       	rjmp	.-122    	; 0x3014 <xTaskResumeAll+0x32>
    308e:	cd 2b       	or	r28, r29
    3090:	09 f0       	breq	.+2      	; 0x3094 <xTaskResumeAll+0xb2>
    3092:	c0 dc       	rcall	.-1664   	; 0x2a14 <prvResetNextTaskUnblockTime>
    3094:	c0 91 5f 18 	lds	r28, 0x185F	; 0x80185f <uxPendedTicks>
    3098:	cc 23       	and	r28, r28
    309a:	49 f0       	breq	.+18     	; 0x30ae <xTaskResumeAll+0xcc>
    309c:	d1 e0       	ldi	r29, 0x01	; 1
    309e:	cc de       	rcall	.-616    	; 0x2e38 <xTaskIncrementTick>
    30a0:	81 11       	cpse	r24, r1
    30a2:	d0 93 5e 18 	sts	0x185E, r29	; 0x80185e <xYieldPending>
    30a6:	c1 50       	subi	r28, 0x01	; 1
    30a8:	d1 f7       	brne	.-12     	; 0x309e <xTaskResumeAll+0xbc>
    30aa:	10 92 5f 18 	sts	0x185F, r1	; 0x80185f <uxPendedTicks>
    30ae:	80 91 5e 18 	lds	r24, 0x185E	; 0x80185e <xYieldPending>
    30b2:	88 23       	and	r24, r24
    30b4:	31 f0       	breq	.+12     	; 0x30c2 <xTaskResumeAll+0xe0>
    30b6:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <vPortYield>
    30ba:	81 e0       	ldi	r24, 0x01	; 1
    30bc:	03 c0       	rjmp	.+6      	; 0x30c4 <xTaskResumeAll+0xe2>
    30be:	80 e0       	ldi	r24, 0x00	; 0
    30c0:	01 c0       	rjmp	.+2      	; 0x30c4 <xTaskResumeAll+0xe2>
    30c2:	80 e0       	ldi	r24, 0x00	; 0
    30c4:	0f 90       	pop	r0
    30c6:	0f be       	out	0x3f, r0	; 63
    30c8:	df 91       	pop	r29
    30ca:	cf 91       	pop	r28
    30cc:	1f 91       	pop	r17
    30ce:	0f 91       	pop	r16
    30d0:	ff 90       	pop	r15
    30d2:	ef 90       	pop	r14
    30d4:	df 90       	pop	r13
    30d6:	cf 90       	pop	r12
    30d8:	08 95       	ret

000030da <vTaskDelay>:
    30da:	cf 92       	push	r12
    30dc:	df 92       	push	r13
    30de:	ef 92       	push	r14
    30e0:	ff 92       	push	r15
    30e2:	6b 01       	movw	r12, r22
    30e4:	7c 01       	movw	r14, r24
    30e6:	67 2b       	or	r22, r23
    30e8:	68 2b       	or	r22, r24
    30ea:	69 2b       	or	r22, r25
    30ec:	41 f0       	breq	.+16     	; 0x30fe <vTaskDelay+0x24>
    30ee:	90 de       	rcall	.-736    	; 0x2e10 <vTaskSuspendAll>
    30f0:	40 e0       	ldi	r20, 0x00	; 0
    30f2:	c7 01       	movw	r24, r14
    30f4:	b6 01       	movw	r22, r12
    30f6:	b8 dc       	rcall	.-1680   	; 0x2a68 <prvAddCurrentTaskToDelayedList>
    30f8:	74 df       	rcall	.-280    	; 0x2fe2 <xTaskResumeAll>
    30fa:	81 11       	cpse	r24, r1
    30fc:	02 c0       	rjmp	.+4      	; 0x3102 <vTaskDelay+0x28>
    30fe:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <vPortYield>
    3102:	ff 90       	pop	r15
    3104:	ef 90       	pop	r14
    3106:	df 90       	pop	r13
    3108:	cf 90       	pop	r12
    310a:	08 95       	ret

0000310c <vTaskSwitchContext>:
    310c:	80 91 55 18 	lds	r24, 0x1855	; 0x801855 <uxSchedulerSuspended>
    3110:	88 23       	and	r24, r24
    3112:	21 f0       	breq	.+8      	; 0x311c <vTaskSwitchContext+0x10>
    3114:	81 e0       	ldi	r24, 0x01	; 1
    3116:	80 93 5e 18 	sts	0x185E, r24	; 0x80185e <xYieldPending>
    311a:	08 95       	ret
    311c:	10 92 5e 18 	sts	0x185E, r1	; 0x80185e <xYieldPending>
    3120:	e0 91 e5 18 	lds	r30, 0x18E5	; 0x8018e5 <pxCurrentTCB>
    3124:	f0 91 e6 18 	lds	r31, 0x18E6	; 0x8018e6 <pxCurrentTCB+0x1>
    3128:	81 a5       	ldd	r24, Z+41	; 0x29
    312a:	0e 94 ad 09 	call	0x135a	; 0x135a <task_switch_out>
    312e:	a0 91 e5 18 	lds	r26, 0x18E5	; 0x8018e5 <pxCurrentTCB>
    3132:	b0 91 e6 18 	lds	r27, 0x18E6	; 0x8018e6 <pxCurrentTCB+0x1>
    3136:	e0 91 e5 18 	lds	r30, 0x18E5	; 0x8018e5 <pxCurrentTCB>
    313a:	f0 91 e6 18 	lds	r31, 0x18E6	; 0x8018e6 <pxCurrentTCB+0x1>
    313e:	2d 91       	ld	r18, X+
    3140:	3c 91       	ld	r19, X
    3142:	83 8d       	ldd	r24, Z+27	; 0x1b
    3144:	94 8d       	ldd	r25, Z+28	; 0x1c
    3146:	82 17       	cp	r24, r18
    3148:	93 07       	cpc	r25, r19
    314a:	58 f0       	brcs	.+22     	; 0x3162 <vTaskSwitchContext+0x56>
    314c:	60 91 e5 18 	lds	r22, 0x18E5	; 0x8018e5 <pxCurrentTCB>
    3150:	70 91 e6 18 	lds	r23, 0x18E6	; 0x8018e6 <pxCurrentTCB+0x1>
    3154:	80 91 e5 18 	lds	r24, 0x18E5	; 0x8018e5 <pxCurrentTCB>
    3158:	90 91 e6 18 	lds	r25, 0x18E6	; 0x8018e6 <pxCurrentTCB+0x1>
    315c:	63 5e       	subi	r22, 0xE3	; 227
    315e:	7f 4f       	sbci	r23, 0xFF	; 255
    3160:	22 d6       	rcall	.+3140   	; 0x3da6 <vApplicationStackOverflowHook>
    3162:	80 91 61 18 	lds	r24, 0x1861	; 0x801861 <uxTopReadyPriority>
    3166:	28 2f       	mov	r18, r24
    3168:	30 e0       	ldi	r19, 0x00	; 0
    316a:	9b e0       	ldi	r25, 0x0B	; 11
    316c:	89 9f       	mul	r24, r25
    316e:	f0 01       	movw	r30, r0
    3170:	11 24       	eor	r1, r1
    3172:	ed 55       	subi	r30, 0x5D	; 93
    3174:	f7 4e       	sbci	r31, 0xE7	; 231
    3176:	90 81       	ld	r25, Z
    3178:	91 11       	cpse	r25, r1
    317a:	0e c0       	rjmp	.+28     	; 0x3198 <vTaskSwitchContext+0x8c>
    317c:	4b e0       	ldi	r20, 0x0B	; 11
    317e:	81 50       	subi	r24, 0x01	; 1
    3180:	28 2f       	mov	r18, r24
    3182:	30 e0       	ldi	r19, 0x00	; 0
    3184:	42 9f       	mul	r20, r18
    3186:	f0 01       	movw	r30, r0
    3188:	43 9f       	mul	r20, r19
    318a:	f0 0d       	add	r31, r0
    318c:	11 24       	eor	r1, r1
    318e:	ed 55       	subi	r30, 0x5D	; 93
    3190:	f7 4e       	sbci	r31, 0xE7	; 231
    3192:	90 81       	ld	r25, Z
    3194:	99 23       	and	r25, r25
    3196:	99 f3       	breq	.-26     	; 0x317e <vTaskSwitchContext+0x72>
    3198:	9b e0       	ldi	r25, 0x0B	; 11
    319a:	92 9f       	mul	r25, r18
    319c:	a0 01       	movw	r20, r0
    319e:	93 9f       	mul	r25, r19
    31a0:	50 0d       	add	r21, r0
    31a2:	11 24       	eor	r1, r1
    31a4:	da 01       	movw	r26, r20
    31a6:	ad 55       	subi	r26, 0x5D	; 93
    31a8:	b7 4e       	sbci	r27, 0xE7	; 231
    31aa:	11 96       	adiw	r26, 0x01	; 1
    31ac:	ed 91       	ld	r30, X+
    31ae:	fc 91       	ld	r31, X
    31b0:	12 97       	sbiw	r26, 0x02	; 2
    31b2:	04 80       	ldd	r0, Z+4	; 0x04
    31b4:	f5 81       	ldd	r31, Z+5	; 0x05
    31b6:	e0 2d       	mov	r30, r0
    31b8:	12 96       	adiw	r26, 0x02	; 2
    31ba:	fc 93       	st	X, r31
    31bc:	ee 93       	st	-X, r30
    31be:	11 97       	sbiw	r26, 0x01	; 1
    31c0:	4a 55       	subi	r20, 0x5A	; 90
    31c2:	57 4e       	sbci	r21, 0xE7	; 231
    31c4:	e4 17       	cp	r30, r20
    31c6:	f5 07       	cpc	r31, r21
    31c8:	29 f4       	brne	.+10     	; 0x31d4 <vTaskSwitchContext+0xc8>
    31ca:	44 81       	ldd	r20, Z+4	; 0x04
    31cc:	55 81       	ldd	r21, Z+5	; 0x05
    31ce:	fd 01       	movw	r30, r26
    31d0:	52 83       	std	Z+2, r21	; 0x02
    31d2:	41 83       	std	Z+1, r20	; 0x01
    31d4:	9b e0       	ldi	r25, 0x0B	; 11
    31d6:	92 9f       	mul	r25, r18
    31d8:	f0 01       	movw	r30, r0
    31da:	93 9f       	mul	r25, r19
    31dc:	f0 0d       	add	r31, r0
    31de:	11 24       	eor	r1, r1
    31e0:	ed 55       	subi	r30, 0x5D	; 93
    31e2:	f7 4e       	sbci	r31, 0xE7	; 231
    31e4:	01 80       	ldd	r0, Z+1	; 0x01
    31e6:	f2 81       	ldd	r31, Z+2	; 0x02
    31e8:	e0 2d       	mov	r30, r0
    31ea:	20 85       	ldd	r18, Z+8	; 0x08
    31ec:	31 85       	ldd	r19, Z+9	; 0x09
    31ee:	30 93 e6 18 	sts	0x18E6, r19	; 0x8018e6 <pxCurrentTCB+0x1>
    31f2:	20 93 e5 18 	sts	0x18E5, r18	; 0x8018e5 <pxCurrentTCB>
    31f6:	80 93 61 18 	sts	0x1861, r24	; 0x801861 <uxTopReadyPriority>
    31fa:	e0 91 e5 18 	lds	r30, 0x18E5	; 0x8018e5 <pxCurrentTCB>
    31fe:	f0 91 e6 18 	lds	r31, 0x18E6	; 0x8018e6 <pxCurrentTCB+0x1>
    3202:	81 a5       	ldd	r24, Z+41	; 0x29
    3204:	0c 94 a3 09 	jmp	0x1346	; 0x1346 <task_switch_in>
    3208:	08 95       	ret

0000320a <vTaskPlaceOnEventList>:
    320a:	cf 92       	push	r12
    320c:	df 92       	push	r13
    320e:	ef 92       	push	r14
    3210:	ff 92       	push	r15
    3212:	6a 01       	movw	r12, r20
    3214:	7b 01       	movw	r14, r22
    3216:	60 91 e5 18 	lds	r22, 0x18E5	; 0x8018e5 <pxCurrentTCB>
    321a:	70 91 e6 18 	lds	r23, 0x18E6	; 0x8018e6 <pxCurrentTCB+0x1>
    321e:	62 5f       	subi	r22, 0xF2	; 242
    3220:	7f 4f       	sbci	r23, 0xFF	; 255
    3222:	0e 94 8c 0c 	call	0x1918	; 0x1918 <vListInsert>
    3226:	41 e0       	ldi	r20, 0x01	; 1
    3228:	c7 01       	movw	r24, r14
    322a:	b6 01       	movw	r22, r12
    322c:	1d dc       	rcall	.-1990   	; 0x2a68 <prvAddCurrentTaskToDelayedList>
    322e:	ff 90       	pop	r15
    3230:	ef 90       	pop	r14
    3232:	df 90       	pop	r13
    3234:	cf 90       	pop	r12
    3236:	08 95       	ret

00003238 <vTaskPlaceOnUnorderedEventList>:
    3238:	cf 92       	push	r12
    323a:	df 92       	push	r13
    323c:	ef 92       	push	r14
    323e:	ff 92       	push	r15
    3240:	0f 93       	push	r16
    3242:	1f 93       	push	r17
    3244:	68 01       	movw	r12, r16
    3246:	79 01       	movw	r14, r18
    3248:	e0 91 e5 18 	lds	r30, 0x18E5	; 0x8018e5 <pxCurrentTCB>
    324c:	f0 91 e6 18 	lds	r31, 0x18E6	; 0x8018e6 <pxCurrentTCB+0x1>
    3250:	70 68       	ori	r23, 0x80	; 128
    3252:	46 87       	std	Z+14, r20	; 0x0e
    3254:	57 87       	std	Z+15, r21	; 0x0f
    3256:	60 8b       	std	Z+16, r22	; 0x10
    3258:	71 8b       	std	Z+17, r23	; 0x11
    325a:	60 91 e5 18 	lds	r22, 0x18E5	; 0x8018e5 <pxCurrentTCB>
    325e:	70 91 e6 18 	lds	r23, 0x18E6	; 0x8018e6 <pxCurrentTCB+0x1>
    3262:	62 5f       	subi	r22, 0xF2	; 242
    3264:	7f 4f       	sbci	r23, 0xFF	; 255
    3266:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <vListInsertEnd>
    326a:	41 e0       	ldi	r20, 0x01	; 1
    326c:	c7 01       	movw	r24, r14
    326e:	b6 01       	movw	r22, r12
    3270:	fb db       	rcall	.-2058   	; 0x2a68 <prvAddCurrentTaskToDelayedList>
    3272:	1f 91       	pop	r17
    3274:	0f 91       	pop	r16
    3276:	ff 90       	pop	r15
    3278:	ef 90       	pop	r14
    327a:	df 90       	pop	r13
    327c:	cf 90       	pop	r12
    327e:	08 95       	ret

00003280 <vTaskPlaceOnEventListRestricted>:
    3280:	cf 92       	push	r12
    3282:	df 92       	push	r13
    3284:	ef 92       	push	r14
    3286:	ff 92       	push	r15
    3288:	cf 93       	push	r28
    328a:	6a 01       	movw	r12, r20
    328c:	7b 01       	movw	r14, r22
    328e:	c2 2f       	mov	r28, r18
    3290:	60 91 e5 18 	lds	r22, 0x18E5	; 0x8018e5 <pxCurrentTCB>
    3294:	70 91 e6 18 	lds	r23, 0x18E6	; 0x8018e6 <pxCurrentTCB+0x1>
    3298:	62 5f       	subi	r22, 0xF2	; 242
    329a:	7f 4f       	sbci	r23, 0xFF	; 255
    329c:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <vListInsertEnd>
    32a0:	cc 23       	and	r28, r28
    32a2:	21 f0       	breq	.+8      	; 0x32ac <vTaskPlaceOnEventListRestricted+0x2c>
    32a4:	cc 24       	eor	r12, r12
    32a6:	ca 94       	dec	r12
    32a8:	dc 2c       	mov	r13, r12
    32aa:	76 01       	movw	r14, r12
    32ac:	4c 2f       	mov	r20, r28
    32ae:	c7 01       	movw	r24, r14
    32b0:	b6 01       	movw	r22, r12
    32b2:	da db       	rcall	.-2124   	; 0x2a68 <prvAddCurrentTaskToDelayedList>
    32b4:	cf 91       	pop	r28
    32b6:	ff 90       	pop	r15
    32b8:	ef 90       	pop	r14
    32ba:	df 90       	pop	r13
    32bc:	cf 90       	pop	r12
    32be:	08 95       	ret

000032c0 <xTaskRemoveFromEventList>:
    32c0:	0f 93       	push	r16
    32c2:	1f 93       	push	r17
    32c4:	cf 93       	push	r28
    32c6:	df 93       	push	r29
    32c8:	dc 01       	movw	r26, r24
    32ca:	17 96       	adiw	r26, 0x07	; 7
    32cc:	ed 91       	ld	r30, X+
    32ce:	fc 91       	ld	r31, X
    32d0:	18 97       	sbiw	r26, 0x08	; 8
    32d2:	c0 85       	ldd	r28, Z+8	; 0x08
    32d4:	d1 85       	ldd	r29, Z+9	; 0x09
    32d6:	8e 01       	movw	r16, r28
    32d8:	02 5f       	subi	r16, 0xF2	; 242
    32da:	1f 4f       	sbci	r17, 0xFF	; 255
    32dc:	c8 01       	movw	r24, r16
    32de:	0e 94 c9 0c 	call	0x1992	; 0x1992 <uxListRemove>
    32e2:	80 91 55 18 	lds	r24, 0x1855	; 0x801855 <uxSchedulerSuspended>
    32e6:	81 11       	cpse	r24, r1
    32e8:	16 c0       	rjmp	.+44     	; 0x3316 <xTaskRemoveFromEventList+0x56>
    32ea:	0c 50       	subi	r16, 0x0C	; 12
    32ec:	11 09       	sbc	r17, r1
    32ee:	c8 01       	movw	r24, r16
    32f0:	0e 94 c9 0c 	call	0x1992	; 0x1992 <uxListRemove>
    32f4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    32f6:	90 91 61 18 	lds	r25, 0x1861	; 0x801861 <uxTopReadyPriority>
    32fa:	98 17       	cp	r25, r24
    32fc:	10 f4       	brcc	.+4      	; 0x3302 <xTaskRemoveFromEventList+0x42>
    32fe:	80 93 61 18 	sts	0x1861, r24	; 0x801861 <uxTopReadyPriority>
    3302:	bb e0       	ldi	r27, 0x0B	; 11
    3304:	8b 9f       	mul	r24, r27
    3306:	c0 01       	movw	r24, r0
    3308:	11 24       	eor	r1, r1
    330a:	b8 01       	movw	r22, r16
    330c:	8d 55       	subi	r24, 0x5D	; 93
    330e:	97 4e       	sbci	r25, 0xE7	; 231
    3310:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <vListInsertEnd>
    3314:	05 c0       	rjmp	.+10     	; 0x3320 <xTaskRemoveFromEventList+0x60>
    3316:	b8 01       	movw	r22, r16
    3318:	8e e7       	ldi	r24, 0x7E	; 126
    331a:	98 e1       	ldi	r25, 0x18	; 24
    331c:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <vListInsertEnd>
    3320:	e0 91 e5 18 	lds	r30, 0x18E5	; 0x8018e5 <pxCurrentTCB>
    3324:	f0 91 e6 18 	lds	r31, 0x18E6	; 0x8018e6 <pxCurrentTCB+0x1>
    3328:	9a 8d       	ldd	r25, Y+26	; 0x1a
    332a:	82 8d       	ldd	r24, Z+26	; 0x1a
    332c:	89 17       	cp	r24, r25
    332e:	20 f4       	brcc	.+8      	; 0x3338 <xTaskRemoveFromEventList+0x78>
    3330:	81 e0       	ldi	r24, 0x01	; 1
    3332:	80 93 5e 18 	sts	0x185E, r24	; 0x80185e <xYieldPending>
    3336:	01 c0       	rjmp	.+2      	; 0x333a <xTaskRemoveFromEventList+0x7a>
    3338:	80 e0       	ldi	r24, 0x00	; 0
    333a:	df 91       	pop	r29
    333c:	cf 91       	pop	r28
    333e:	1f 91       	pop	r17
    3340:	0f 91       	pop	r16
    3342:	08 95       	ret

00003344 <vTaskRemoveFromUnorderedEventList>:
    3344:	0f 93       	push	r16
    3346:	1f 93       	push	r17
    3348:	cf 93       	push	r28
    334a:	df 93       	push	r29
    334c:	70 68       	ori	r23, 0x80	; 128
    334e:	fc 01       	movw	r30, r24
    3350:	40 83       	st	Z, r20
    3352:	51 83       	std	Z+1, r21	; 0x01
    3354:	62 83       	std	Z+2, r22	; 0x02
    3356:	73 83       	std	Z+3, r23	; 0x03
    3358:	c0 85       	ldd	r28, Z+8	; 0x08
    335a:	d1 85       	ldd	r29, Z+9	; 0x09
    335c:	0e 94 c9 0c 	call	0x1992	; 0x1992 <uxListRemove>
    3360:	8e 01       	movw	r16, r28
    3362:	0e 5f       	subi	r16, 0xFE	; 254
    3364:	1f 4f       	sbci	r17, 0xFF	; 255
    3366:	c8 01       	movw	r24, r16
    3368:	0e 94 c9 0c 	call	0x1992	; 0x1992 <uxListRemove>
    336c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    336e:	90 91 61 18 	lds	r25, 0x1861	; 0x801861 <uxTopReadyPriority>
    3372:	98 17       	cp	r25, r24
    3374:	10 f4       	brcc	.+4      	; 0x337a <vTaskRemoveFromUnorderedEventList+0x36>
    3376:	80 93 61 18 	sts	0x1861, r24	; 0x801861 <uxTopReadyPriority>
    337a:	fb e0       	ldi	r31, 0x0B	; 11
    337c:	8f 9f       	mul	r24, r31
    337e:	c0 01       	movw	r24, r0
    3380:	11 24       	eor	r1, r1
    3382:	b8 01       	movw	r22, r16
    3384:	8d 55       	subi	r24, 0x5D	; 93
    3386:	97 4e       	sbci	r25, 0xE7	; 231
    3388:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <vListInsertEnd>
    338c:	e0 91 e5 18 	lds	r30, 0x18E5	; 0x8018e5 <pxCurrentTCB>
    3390:	f0 91 e6 18 	lds	r31, 0x18E6	; 0x8018e6 <pxCurrentTCB+0x1>
    3394:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3396:	82 8d       	ldd	r24, Z+26	; 0x1a
    3398:	89 17       	cp	r24, r25
    339a:	18 f4       	brcc	.+6      	; 0x33a2 <vTaskRemoveFromUnorderedEventList+0x5e>
    339c:	81 e0       	ldi	r24, 0x01	; 1
    339e:	80 93 5e 18 	sts	0x185E, r24	; 0x80185e <xYieldPending>
    33a2:	df 91       	pop	r29
    33a4:	cf 91       	pop	r28
    33a6:	1f 91       	pop	r17
    33a8:	0f 91       	pop	r16
    33aa:	08 95       	ret

000033ac <vTaskSetTimeOutState>:
    33ac:	0f b6       	in	r0, 0x3f	; 63
    33ae:	f8 94       	cli
    33b0:	0f 92       	push	r0
    33b2:	20 91 5d 18 	lds	r18, 0x185D	; 0x80185d <xNumOfOverflows>
    33b6:	fc 01       	movw	r30, r24
    33b8:	20 83       	st	Z, r18
    33ba:	40 91 62 18 	lds	r20, 0x1862	; 0x801862 <xTickCount>
    33be:	50 91 63 18 	lds	r21, 0x1863	; 0x801863 <xTickCount+0x1>
    33c2:	60 91 64 18 	lds	r22, 0x1864	; 0x801864 <xTickCount+0x2>
    33c6:	70 91 65 18 	lds	r23, 0x1865	; 0x801865 <xTickCount+0x3>
    33ca:	41 83       	std	Z+1, r20	; 0x01
    33cc:	52 83       	std	Z+2, r21	; 0x02
    33ce:	63 83       	std	Z+3, r22	; 0x03
    33d0:	74 83       	std	Z+4, r23	; 0x04
    33d2:	0f 90       	pop	r0
    33d4:	0f be       	out	0x3f, r0	; 63
    33d6:	08 95       	ret

000033d8 <vTaskInternalSetTimeOutState>:
    33d8:	20 91 5d 18 	lds	r18, 0x185D	; 0x80185d <xNumOfOverflows>
    33dc:	fc 01       	movw	r30, r24
    33de:	20 83       	st	Z, r18
    33e0:	40 91 62 18 	lds	r20, 0x1862	; 0x801862 <xTickCount>
    33e4:	50 91 63 18 	lds	r21, 0x1863	; 0x801863 <xTickCount+0x1>
    33e8:	60 91 64 18 	lds	r22, 0x1864	; 0x801864 <xTickCount+0x2>
    33ec:	70 91 65 18 	lds	r23, 0x1865	; 0x801865 <xTickCount+0x3>
    33f0:	41 83       	std	Z+1, r20	; 0x01
    33f2:	52 83       	std	Z+2, r21	; 0x02
    33f4:	63 83       	std	Z+3, r22	; 0x03
    33f6:	74 83       	std	Z+4, r23	; 0x04
    33f8:	08 95       	ret

000033fa <xTaskCheckForTimeOut>:
    33fa:	cf 92       	push	r12
    33fc:	df 92       	push	r13
    33fe:	ef 92       	push	r14
    3400:	ff 92       	push	r15
    3402:	0f 93       	push	r16
    3404:	1f 93       	push	r17
    3406:	cf 93       	push	r28
    3408:	df 93       	push	r29
    340a:	fb 01       	movw	r30, r22
    340c:	0f b6       	in	r0, 0x3f	; 63
    340e:	f8 94       	cli
    3410:	0f 92       	push	r0
    3412:	40 91 62 18 	lds	r20, 0x1862	; 0x801862 <xTickCount>
    3416:	50 91 63 18 	lds	r21, 0x1863	; 0x801863 <xTickCount+0x1>
    341a:	60 91 64 18 	lds	r22, 0x1864	; 0x801864 <xTickCount+0x2>
    341e:	70 91 65 18 	lds	r23, 0x1865	; 0x801865 <xTickCount+0x3>
    3422:	00 81       	ld	r16, Z
    3424:	11 81       	ldd	r17, Z+1	; 0x01
    3426:	22 81       	ldd	r18, Z+2	; 0x02
    3428:	33 81       	ldd	r19, Z+3	; 0x03
    342a:	0f 3f       	cpi	r16, 0xFF	; 255
    342c:	af ef       	ldi	r26, 0xFF	; 255
    342e:	1a 07       	cpc	r17, r26
    3430:	2a 07       	cpc	r18, r26
    3432:	3a 07       	cpc	r19, r26
    3434:	49 f1       	breq	.+82     	; 0x3488 <xTaskCheckForTimeOut+0x8e>
    3436:	ec 01       	movw	r28, r24
    3438:	c9 80       	ldd	r12, Y+1	; 0x01
    343a:	da 80       	ldd	r13, Y+2	; 0x02
    343c:	eb 80       	ldd	r14, Y+3	; 0x03
    343e:	fc 80       	ldd	r15, Y+4	; 0x04
    3440:	a0 91 5d 18 	lds	r26, 0x185D	; 0x80185d <xNumOfOverflows>
    3444:	b8 81       	ld	r27, Y
    3446:	ba 17       	cp	r27, r26
    3448:	29 f0       	breq	.+10     	; 0x3454 <xTaskCheckForTimeOut+0x5a>
    344a:	4c 15       	cp	r20, r12
    344c:	5d 05       	cpc	r21, r13
    344e:	6e 05       	cpc	r22, r14
    3450:	7f 05       	cpc	r23, r15
    3452:	e0 f4       	brcc	.+56     	; 0x348c <xTaskCheckForTimeOut+0x92>
    3454:	4c 19       	sub	r20, r12
    3456:	5d 09       	sbc	r21, r13
    3458:	6e 09       	sbc	r22, r14
    345a:	7f 09       	sbc	r23, r15
    345c:	40 17       	cp	r20, r16
    345e:	51 07       	cpc	r21, r17
    3460:	62 07       	cpc	r22, r18
    3462:	73 07       	cpc	r23, r19
    3464:	58 f4       	brcc	.+22     	; 0x347c <xTaskCheckForTimeOut+0x82>
    3466:	04 1b       	sub	r16, r20
    3468:	15 0b       	sbc	r17, r21
    346a:	26 0b       	sbc	r18, r22
    346c:	37 0b       	sbc	r19, r23
    346e:	00 83       	st	Z, r16
    3470:	11 83       	std	Z+1, r17	; 0x01
    3472:	22 83       	std	Z+2, r18	; 0x02
    3474:	33 83       	std	Z+3, r19	; 0x03
    3476:	b0 df       	rcall	.-160    	; 0x33d8 <vTaskInternalSetTimeOutState>
    3478:	80 e0       	ldi	r24, 0x00	; 0
    347a:	09 c0       	rjmp	.+18     	; 0x348e <xTaskCheckForTimeOut+0x94>
    347c:	10 82       	st	Z, r1
    347e:	11 82       	std	Z+1, r1	; 0x01
    3480:	12 82       	std	Z+2, r1	; 0x02
    3482:	13 82       	std	Z+3, r1	; 0x03
    3484:	81 e0       	ldi	r24, 0x01	; 1
    3486:	03 c0       	rjmp	.+6      	; 0x348e <xTaskCheckForTimeOut+0x94>
    3488:	80 e0       	ldi	r24, 0x00	; 0
    348a:	01 c0       	rjmp	.+2      	; 0x348e <xTaskCheckForTimeOut+0x94>
    348c:	81 e0       	ldi	r24, 0x01	; 1
    348e:	0f 90       	pop	r0
    3490:	0f be       	out	0x3f, r0	; 63
    3492:	df 91       	pop	r29
    3494:	cf 91       	pop	r28
    3496:	1f 91       	pop	r17
    3498:	0f 91       	pop	r16
    349a:	ff 90       	pop	r15
    349c:	ef 90       	pop	r14
    349e:	df 90       	pop	r13
    34a0:	cf 90       	pop	r12
    34a2:	08 95       	ret

000034a4 <vTaskMissedYield>:
    34a4:	81 e0       	ldi	r24, 0x01	; 1
    34a6:	80 93 5e 18 	sts	0x185E, r24	; 0x80185e <xYieldPending>
    34aa:	08 95       	ret

000034ac <xTaskGetCurrentTaskHandle>:
    34ac:	80 91 e5 18 	lds	r24, 0x18E5	; 0x8018e5 <pxCurrentTCB>
    34b0:	90 91 e6 18 	lds	r25, 0x18E6	; 0x8018e6 <pxCurrentTCB+0x1>
    34b4:	08 95       	ret

000034b6 <xTaskGetSchedulerState>:
    34b6:	80 91 60 18 	lds	r24, 0x1860	; 0x801860 <xSchedulerRunning>
    34ba:	88 23       	and	r24, r24
    34bc:	31 f0       	breq	.+12     	; 0x34ca <xTaskGetSchedulerState+0x14>
    34be:	80 91 55 18 	lds	r24, 0x1855	; 0x801855 <uxSchedulerSuspended>
    34c2:	88 23       	and	r24, r24
    34c4:	21 f0       	breq	.+8      	; 0x34ce <xTaskGetSchedulerState+0x18>
    34c6:	80 e0       	ldi	r24, 0x00	; 0
    34c8:	08 95       	ret
    34ca:	81 e0       	ldi	r24, 0x01	; 1
    34cc:	08 95       	ret
    34ce:	82 e0       	ldi	r24, 0x02	; 2
    34d0:	08 95       	ret

000034d2 <xTaskPriorityInherit>:
    34d2:	0f 93       	push	r16
    34d4:	1f 93       	push	r17
    34d6:	cf 93       	push	r28
    34d8:	df 93       	push	r29
    34da:	fc 01       	movw	r30, r24
    34dc:	89 2b       	or	r24, r25
    34de:	09 f4       	brne	.+2      	; 0x34e2 <xTaskPriorityInherit+0x10>
    34e0:	60 c0       	rjmp	.+192    	; 0x35a2 <xTaskPriorityInherit+0xd0>
    34e2:	82 8d       	ldd	r24, Z+26	; 0x1a
    34e4:	a0 91 e5 18 	lds	r26, 0x18E5	; 0x8018e5 <pxCurrentTCB>
    34e8:	b0 91 e6 18 	lds	r27, 0x18E6	; 0x8018e6 <pxCurrentTCB+0x1>
    34ec:	5a 96       	adiw	r26, 0x1a	; 26
    34ee:	9c 91       	ld	r25, X
    34f0:	89 17       	cp	r24, r25
    34f2:	08 f0       	brcs	.+2      	; 0x34f6 <xTaskPriorityInherit+0x24>
    34f4:	4a c0       	rjmp	.+148    	; 0x358a <xTaskPriorityInherit+0xb8>
    34f6:	46 85       	ldd	r20, Z+14	; 0x0e
    34f8:	57 85       	ldd	r21, Z+15	; 0x0f
    34fa:	60 89       	ldd	r22, Z+16	; 0x10
    34fc:	71 89       	ldd	r23, Z+17	; 0x11
    34fe:	77 23       	and	r23, r23
    3500:	94 f0       	brlt	.+36     	; 0x3526 <xTaskPriorityInherit+0x54>
    3502:	a0 91 e5 18 	lds	r26, 0x18E5	; 0x8018e5 <pxCurrentTCB>
    3506:	b0 91 e6 18 	lds	r27, 0x18E6	; 0x8018e6 <pxCurrentTCB+0x1>
    350a:	5a 96       	adiw	r26, 0x1a	; 26
    350c:	9c 91       	ld	r25, X
    350e:	46 e0       	ldi	r20, 0x06	; 6
    3510:	50 e0       	ldi	r21, 0x00	; 0
    3512:	60 e0       	ldi	r22, 0x00	; 0
    3514:	70 e0       	ldi	r23, 0x00	; 0
    3516:	49 1b       	sub	r20, r25
    3518:	51 09       	sbc	r21, r1
    351a:	61 09       	sbc	r22, r1
    351c:	71 09       	sbc	r23, r1
    351e:	46 87       	std	Z+14, r20	; 0x0e
    3520:	57 87       	std	Z+15, r21	; 0x0f
    3522:	60 8b       	std	Z+16, r22	; 0x10
    3524:	71 8b       	std	Z+17, r23	; 0x11
    3526:	2b e0       	ldi	r18, 0x0B	; 11
    3528:	82 9f       	mul	r24, r18
    352a:	c0 01       	movw	r24, r0
    352c:	11 24       	eor	r1, r1
    352e:	8d 55       	subi	r24, 0x5D	; 93
    3530:	97 4e       	sbci	r25, 0xE7	; 231
    3532:	24 85       	ldd	r18, Z+12	; 0x0c
    3534:	35 85       	ldd	r19, Z+13	; 0x0d
    3536:	28 17       	cp	r18, r24
    3538:	39 07       	cpc	r19, r25
    353a:	f1 f4       	brne	.+60     	; 0x3578 <xTaskPriorityInherit+0xa6>
    353c:	8f 01       	movw	r16, r30
    353e:	ef 01       	movw	r28, r30
    3540:	22 96       	adiw	r28, 0x02	; 2
    3542:	ce 01       	movw	r24, r28
    3544:	0e 94 c9 0c 	call	0x1992	; 0x1992 <uxListRemove>
    3548:	e0 91 e5 18 	lds	r30, 0x18E5	; 0x8018e5 <pxCurrentTCB>
    354c:	f0 91 e6 18 	lds	r31, 0x18E6	; 0x8018e6 <pxCurrentTCB+0x1>
    3550:	82 8d       	ldd	r24, Z+26	; 0x1a
    3552:	f8 01       	movw	r30, r16
    3554:	82 8f       	std	Z+26, r24	; 0x1a
    3556:	90 91 61 18 	lds	r25, 0x1861	; 0x801861 <uxTopReadyPriority>
    355a:	98 17       	cp	r25, r24
    355c:	10 f4       	brcc	.+4      	; 0x3562 <xTaskPriorityInherit+0x90>
    355e:	80 93 61 18 	sts	0x1861, r24	; 0x801861 <uxTopReadyPriority>
    3562:	fb e0       	ldi	r31, 0x0B	; 11
    3564:	8f 9f       	mul	r24, r31
    3566:	c0 01       	movw	r24, r0
    3568:	11 24       	eor	r1, r1
    356a:	be 01       	movw	r22, r28
    356c:	8d 55       	subi	r24, 0x5D	; 93
    356e:	97 4e       	sbci	r25, 0xE7	; 231
    3570:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <vListInsertEnd>
    3574:	81 e0       	ldi	r24, 0x01	; 1
    3576:	16 c0       	rjmp	.+44     	; 0x35a4 <xTaskPriorityInherit+0xd2>
    3578:	a0 91 e5 18 	lds	r26, 0x18E5	; 0x8018e5 <pxCurrentTCB>
    357c:	b0 91 e6 18 	lds	r27, 0x18E6	; 0x8018e6 <pxCurrentTCB+0x1>
    3580:	5a 96       	adiw	r26, 0x1a	; 26
    3582:	8c 91       	ld	r24, X
    3584:	82 8f       	std	Z+26, r24	; 0x1a
    3586:	81 e0       	ldi	r24, 0x01	; 1
    3588:	0d c0       	rjmp	.+26     	; 0x35a4 <xTaskPriorityInherit+0xd2>
    358a:	a0 91 e5 18 	lds	r26, 0x18E5	; 0x8018e5 <pxCurrentTCB>
    358e:	b0 91 e6 18 	lds	r27, 0x18E6	; 0x8018e6 <pxCurrentTCB+0x1>
    3592:	81 e0       	ldi	r24, 0x01	; 1
    3594:	27 a1       	ldd	r18, Z+39	; 0x27
    3596:	5a 96       	adiw	r26, 0x1a	; 26
    3598:	9c 91       	ld	r25, X
    359a:	29 17       	cp	r18, r25
    359c:	18 f0       	brcs	.+6      	; 0x35a4 <xTaskPriorityInherit+0xd2>
    359e:	80 e0       	ldi	r24, 0x00	; 0
    35a0:	01 c0       	rjmp	.+2      	; 0x35a4 <xTaskPriorityInherit+0xd2>
    35a2:	80 e0       	ldi	r24, 0x00	; 0
    35a4:	df 91       	pop	r29
    35a6:	cf 91       	pop	r28
    35a8:	1f 91       	pop	r17
    35aa:	0f 91       	pop	r16
    35ac:	08 95       	ret

000035ae <xTaskPriorityDisinherit>:
    35ae:	0f 93       	push	r16
    35b0:	1f 93       	push	r17
    35b2:	cf 93       	push	r28
    35b4:	df 93       	push	r29
    35b6:	fc 01       	movw	r30, r24
    35b8:	89 2b       	or	r24, r25
    35ba:	79 f1       	breq	.+94     	; 0x361a <xTaskPriorityDisinherit+0x6c>
    35bc:	80 a5       	ldd	r24, Z+40	; 0x28
    35be:	81 50       	subi	r24, 0x01	; 1
    35c0:	80 a7       	std	Z+40, r24	; 0x28
    35c2:	22 8d       	ldd	r18, Z+26	; 0x1a
    35c4:	97 a1       	ldd	r25, Z+39	; 0x27
    35c6:	29 17       	cp	r18, r25
    35c8:	51 f1       	breq	.+84     	; 0x361e <xTaskPriorityDisinherit+0x70>
    35ca:	81 11       	cpse	r24, r1
    35cc:	2a c0       	rjmp	.+84     	; 0x3622 <xTaskPriorityDisinherit+0x74>
    35ce:	ef 01       	movw	r28, r30
    35d0:	8f 01       	movw	r16, r30
    35d2:	0e 5f       	subi	r16, 0xFE	; 254
    35d4:	1f 4f       	sbci	r17, 0xFF	; 255
    35d6:	c8 01       	movw	r24, r16
    35d8:	0e 94 c9 0c 	call	0x1992	; 0x1992 <uxListRemove>
    35dc:	8f a1       	ldd	r24, Y+39	; 0x27
    35de:	8a 8f       	std	Y+26, r24	; 0x1a
    35e0:	46 e0       	ldi	r20, 0x06	; 6
    35e2:	50 e0       	ldi	r21, 0x00	; 0
    35e4:	60 e0       	ldi	r22, 0x00	; 0
    35e6:	70 e0       	ldi	r23, 0x00	; 0
    35e8:	48 1b       	sub	r20, r24
    35ea:	51 09       	sbc	r21, r1
    35ec:	61 09       	sbc	r22, r1
    35ee:	71 09       	sbc	r23, r1
    35f0:	4e 87       	std	Y+14, r20	; 0x0e
    35f2:	5f 87       	std	Y+15, r21	; 0x0f
    35f4:	68 8b       	std	Y+16, r22	; 0x10
    35f6:	79 8b       	std	Y+17, r23	; 0x11
    35f8:	90 91 61 18 	lds	r25, 0x1861	; 0x801861 <uxTopReadyPriority>
    35fc:	98 17       	cp	r25, r24
    35fe:	10 f4       	brcc	.+4      	; 0x3604 <xTaskPriorityDisinherit+0x56>
    3600:	80 93 61 18 	sts	0x1861, r24	; 0x801861 <uxTopReadyPriority>
    3604:	2b e0       	ldi	r18, 0x0B	; 11
    3606:	82 9f       	mul	r24, r18
    3608:	c0 01       	movw	r24, r0
    360a:	11 24       	eor	r1, r1
    360c:	b8 01       	movw	r22, r16
    360e:	8d 55       	subi	r24, 0x5D	; 93
    3610:	97 4e       	sbci	r25, 0xE7	; 231
    3612:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <vListInsertEnd>
    3616:	81 e0       	ldi	r24, 0x01	; 1
    3618:	05 c0       	rjmp	.+10     	; 0x3624 <xTaskPriorityDisinherit+0x76>
    361a:	80 e0       	ldi	r24, 0x00	; 0
    361c:	03 c0       	rjmp	.+6      	; 0x3624 <xTaskPriorityDisinherit+0x76>
    361e:	80 e0       	ldi	r24, 0x00	; 0
    3620:	01 c0       	rjmp	.+2      	; 0x3624 <xTaskPriorityDisinherit+0x76>
    3622:	80 e0       	ldi	r24, 0x00	; 0
    3624:	df 91       	pop	r29
    3626:	cf 91       	pop	r28
    3628:	1f 91       	pop	r17
    362a:	0f 91       	pop	r16
    362c:	08 95       	ret

0000362e <vTaskPriorityDisinheritAfterTimeout>:
    362e:	0f 93       	push	r16
    3630:	1f 93       	push	r17
    3632:	cf 93       	push	r28
    3634:	df 93       	push	r29
    3636:	fc 01       	movw	r30, r24
    3638:	89 2b       	or	r24, r25
    363a:	09 f4       	brne	.+2      	; 0x363e <vTaskPriorityDisinheritAfterTimeout+0x10>
    363c:	3f c0       	rjmp	.+126    	; 0x36bc <vTaskPriorityDisinheritAfterTimeout+0x8e>
    363e:	87 a1       	ldd	r24, Z+39	; 0x27
    3640:	86 17       	cp	r24, r22
    3642:	08 f4       	brcc	.+2      	; 0x3646 <vTaskPriorityDisinheritAfterTimeout+0x18>
    3644:	86 2f       	mov	r24, r22
    3646:	92 8d       	ldd	r25, Z+26	; 0x1a
    3648:	98 17       	cp	r25, r24
    364a:	c1 f1       	breq	.+112    	; 0x36bc <vTaskPriorityDisinheritAfterTimeout+0x8e>
    364c:	20 a5       	ldd	r18, Z+40	; 0x28
    364e:	21 30       	cpi	r18, 0x01	; 1
    3650:	a9 f5       	brne	.+106    	; 0x36bc <vTaskPriorityDisinheritAfterTimeout+0x8e>
    3652:	82 8f       	std	Z+26, r24	; 0x1a
    3654:	46 85       	ldd	r20, Z+14	; 0x0e
    3656:	57 85       	ldd	r21, Z+15	; 0x0f
    3658:	60 89       	ldd	r22, Z+16	; 0x10
    365a:	71 89       	ldd	r23, Z+17	; 0x11
    365c:	77 23       	and	r23, r23
    365e:	64 f0       	brlt	.+24     	; 0x3678 <vTaskPriorityDisinheritAfterTimeout+0x4a>
    3660:	46 e0       	ldi	r20, 0x06	; 6
    3662:	50 e0       	ldi	r21, 0x00	; 0
    3664:	60 e0       	ldi	r22, 0x00	; 0
    3666:	70 e0       	ldi	r23, 0x00	; 0
    3668:	48 1b       	sub	r20, r24
    366a:	51 09       	sbc	r21, r1
    366c:	61 09       	sbc	r22, r1
    366e:	71 09       	sbc	r23, r1
    3670:	46 87       	std	Z+14, r20	; 0x0e
    3672:	57 87       	std	Z+15, r21	; 0x0f
    3674:	60 8b       	std	Z+16, r22	; 0x10
    3676:	71 8b       	std	Z+17, r23	; 0x11
    3678:	2b e0       	ldi	r18, 0x0B	; 11
    367a:	92 9f       	mul	r25, r18
    367c:	c0 01       	movw	r24, r0
    367e:	11 24       	eor	r1, r1
    3680:	8d 55       	subi	r24, 0x5D	; 93
    3682:	97 4e       	sbci	r25, 0xE7	; 231
    3684:	24 85       	ldd	r18, Z+12	; 0x0c
    3686:	35 85       	ldd	r19, Z+13	; 0x0d
    3688:	28 17       	cp	r18, r24
    368a:	39 07       	cpc	r19, r25
    368c:	b9 f4       	brne	.+46     	; 0x36bc <vTaskPriorityDisinheritAfterTimeout+0x8e>
    368e:	ef 01       	movw	r28, r30
    3690:	8f 01       	movw	r16, r30
    3692:	0e 5f       	subi	r16, 0xFE	; 254
    3694:	1f 4f       	sbci	r17, 0xFF	; 255
    3696:	c8 01       	movw	r24, r16
    3698:	0e 94 c9 0c 	call	0x1992	; 0x1992 <uxListRemove>
    369c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    369e:	90 91 61 18 	lds	r25, 0x1861	; 0x801861 <uxTopReadyPriority>
    36a2:	98 17       	cp	r25, r24
    36a4:	10 f4       	brcc	.+4      	; 0x36aa <vTaskPriorityDisinheritAfterTimeout+0x7c>
    36a6:	80 93 61 18 	sts	0x1861, r24	; 0x801861 <uxTopReadyPriority>
    36aa:	2b e0       	ldi	r18, 0x0B	; 11
    36ac:	82 9f       	mul	r24, r18
    36ae:	c0 01       	movw	r24, r0
    36b0:	11 24       	eor	r1, r1
    36b2:	b8 01       	movw	r22, r16
    36b4:	8d 55       	subi	r24, 0x5D	; 93
    36b6:	97 4e       	sbci	r25, 0xE7	; 231
    36b8:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <vListInsertEnd>
    36bc:	df 91       	pop	r29
    36be:	cf 91       	pop	r28
    36c0:	1f 91       	pop	r17
    36c2:	0f 91       	pop	r16
    36c4:	08 95       	ret

000036c6 <uxTaskResetEventItemValue>:
    36c6:	cf 92       	push	r12
    36c8:	df 92       	push	r13
    36ca:	ef 92       	push	r14
    36cc:	ff 92       	push	r15
    36ce:	e0 91 e5 18 	lds	r30, 0x18E5	; 0x8018e5 <pxCurrentTCB>
    36d2:	f0 91 e6 18 	lds	r31, 0x18E6	; 0x8018e6 <pxCurrentTCB+0x1>
    36d6:	66 85       	ldd	r22, Z+14	; 0x0e
    36d8:	77 85       	ldd	r23, Z+15	; 0x0f
    36da:	80 89       	ldd	r24, Z+16	; 0x10
    36dc:	91 89       	ldd	r25, Z+17	; 0x11
    36de:	e0 91 e5 18 	lds	r30, 0x18E5	; 0x8018e5 <pxCurrentTCB>
    36e2:	f0 91 e6 18 	lds	r31, 0x18E6	; 0x8018e6 <pxCurrentTCB+0x1>
    36e6:	a0 91 e5 18 	lds	r26, 0x18E5	; 0x8018e5 <pxCurrentTCB>
    36ea:	b0 91 e6 18 	lds	r27, 0x18E6	; 0x8018e6 <pxCurrentTCB+0x1>
    36ee:	5a 96       	adiw	r26, 0x1a	; 26
    36f0:	2c 91       	ld	r18, X
    36f2:	0f 2e       	mov	r0, r31
    36f4:	f6 e0       	ldi	r31, 0x06	; 6
    36f6:	cf 2e       	mov	r12, r31
    36f8:	d1 2c       	mov	r13, r1
    36fa:	e1 2c       	mov	r14, r1
    36fc:	f1 2c       	mov	r15, r1
    36fe:	f0 2d       	mov	r31, r0
    3700:	c2 1a       	sub	r12, r18
    3702:	d1 08       	sbc	r13, r1
    3704:	e1 08       	sbc	r14, r1
    3706:	f1 08       	sbc	r15, r1
    3708:	c6 86       	std	Z+14, r12	; 0x0e
    370a:	d7 86       	std	Z+15, r13	; 0x0f
    370c:	e0 8a       	std	Z+16, r14	; 0x10
    370e:	f1 8a       	std	Z+17, r15	; 0x11
    3710:	ff 90       	pop	r15
    3712:	ef 90       	pop	r14
    3714:	df 90       	pop	r13
    3716:	cf 90       	pop	r12
    3718:	08 95       	ret

0000371a <pvTaskIncrementMutexHeldCount>:
    371a:	80 91 e5 18 	lds	r24, 0x18E5	; 0x8018e5 <pxCurrentTCB>
    371e:	90 91 e6 18 	lds	r25, 0x18E6	; 0x8018e6 <pxCurrentTCB+0x1>
    3722:	89 2b       	or	r24, r25
    3724:	39 f0       	breq	.+14     	; 0x3734 <pvTaskIncrementMutexHeldCount+0x1a>
    3726:	e0 91 e5 18 	lds	r30, 0x18E5	; 0x8018e5 <pxCurrentTCB>
    372a:	f0 91 e6 18 	lds	r31, 0x18E6	; 0x8018e6 <pxCurrentTCB+0x1>
    372e:	80 a5       	ldd	r24, Z+40	; 0x28
    3730:	8f 5f       	subi	r24, 0xFF	; 255
    3732:	80 a7       	std	Z+40, r24	; 0x28
    3734:	80 91 e5 18 	lds	r24, 0x18E5	; 0x8018e5 <pxCurrentTCB>
    3738:	90 91 e6 18 	lds	r25, 0x18E6	; 0x8018e6 <pxCurrentTCB+0x1>
    373c:	08 95       	ret

0000373e <xTaskNotifyWait>:
    373e:	4f 92       	push	r4
    3740:	5f 92       	push	r5
    3742:	6f 92       	push	r6
    3744:	7f 92       	push	r7
    3746:	8f 92       	push	r8
    3748:	9f 92       	push	r9
    374a:	af 92       	push	r10
    374c:	bf 92       	push	r11
    374e:	cf 92       	push	r12
    3750:	df 92       	push	r13
    3752:	ef 92       	push	r14
    3754:	ff 92       	push	r15
    3756:	0f 93       	push	r16
    3758:	1f 93       	push	r17
    375a:	49 01       	movw	r8, r18
    375c:	5a 01       	movw	r10, r20
    375e:	0f b6       	in	r0, 0x3f	; 63
    3760:	f8 94       	cli
    3762:	0f 92       	push	r0
    3764:	e0 91 e5 18 	lds	r30, 0x18E5	; 0x8018e5 <pxCurrentTCB>
    3768:	f0 91 e6 18 	lds	r31, 0x18E6	; 0x8018e6 <pxCurrentTCB+0x1>
    376c:	27 a5       	ldd	r18, Z+47	; 0x2f
    376e:	22 30       	cpi	r18, 0x02	; 2
    3770:	39 f1       	breq	.+78     	; 0x37c0 <xTaskNotifyWait+0x82>
    3772:	e0 91 e5 18 	lds	r30, 0x18E5	; 0x8018e5 <pxCurrentTCB>
    3776:	f0 91 e6 18 	lds	r31, 0x18E6	; 0x8018e6 <pxCurrentTCB+0x1>
    377a:	43 a4       	ldd	r4, Z+43	; 0x2b
    377c:	54 a4       	ldd	r5, Z+44	; 0x2c
    377e:	65 a4       	ldd	r6, Z+45	; 0x2d
    3780:	76 a4       	ldd	r7, Z+46	; 0x2e
    3782:	dc 01       	movw	r26, r24
    3784:	cb 01       	movw	r24, r22
    3786:	80 95       	com	r24
    3788:	90 95       	com	r25
    378a:	a0 95       	com	r26
    378c:	b0 95       	com	r27
    378e:	84 21       	and	r24, r4
    3790:	95 21       	and	r25, r5
    3792:	a6 21       	and	r26, r6
    3794:	b7 21       	and	r27, r7
    3796:	83 a7       	std	Z+43, r24	; 0x2b
    3798:	94 a7       	std	Z+44, r25	; 0x2c
    379a:	a5 a7       	std	Z+45, r26	; 0x2d
    379c:	b6 a7       	std	Z+46, r27	; 0x2e
    379e:	e0 91 e5 18 	lds	r30, 0x18E5	; 0x8018e5 <pxCurrentTCB>
    37a2:	f0 91 e6 18 	lds	r31, 0x18E6	; 0x8018e6 <pxCurrentTCB+0x1>
    37a6:	81 e0       	ldi	r24, 0x01	; 1
    37a8:	87 a7       	std	Z+47, r24	; 0x2f
    37aa:	c1 14       	cp	r12, r1
    37ac:	d1 04       	cpc	r13, r1
    37ae:	e1 04       	cpc	r14, r1
    37b0:	f1 04       	cpc	r15, r1
    37b2:	31 f0       	breq	.+12     	; 0x37c0 <xTaskNotifyWait+0x82>
    37b4:	41 e0       	ldi	r20, 0x01	; 1
    37b6:	c7 01       	movw	r24, r14
    37b8:	b6 01       	movw	r22, r12
    37ba:	56 d9       	rcall	.-3412   	; 0x2a68 <prvAddCurrentTaskToDelayedList>
    37bc:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <vPortYield>
    37c0:	0f 90       	pop	r0
    37c2:	0f be       	out	0x3f, r0	; 63
    37c4:	0f b6       	in	r0, 0x3f	; 63
    37c6:	f8 94       	cli
    37c8:	0f 92       	push	r0
    37ca:	01 15       	cp	r16, r1
    37cc:	11 05       	cpc	r17, r1
    37ce:	69 f0       	breq	.+26     	; 0x37ea <xTaskNotifyWait+0xac>
    37d0:	e0 91 e5 18 	lds	r30, 0x18E5	; 0x8018e5 <pxCurrentTCB>
    37d4:	f0 91 e6 18 	lds	r31, 0x18E6	; 0x8018e6 <pxCurrentTCB+0x1>
    37d8:	83 a5       	ldd	r24, Z+43	; 0x2b
    37da:	94 a5       	ldd	r25, Z+44	; 0x2c
    37dc:	a5 a5       	ldd	r26, Z+45	; 0x2d
    37de:	b6 a5       	ldd	r27, Z+46	; 0x2e
    37e0:	f8 01       	movw	r30, r16
    37e2:	80 83       	st	Z, r24
    37e4:	91 83       	std	Z+1, r25	; 0x01
    37e6:	a2 83       	std	Z+2, r26	; 0x02
    37e8:	b3 83       	std	Z+3, r27	; 0x03
    37ea:	e0 91 e5 18 	lds	r30, 0x18E5	; 0x8018e5 <pxCurrentTCB>
    37ee:	f0 91 e6 18 	lds	r31, 0x18E6	; 0x8018e6 <pxCurrentTCB+0x1>
    37f2:	87 a5       	ldd	r24, Z+47	; 0x2f
    37f4:	82 30       	cpi	r24, 0x02	; 2
    37f6:	b1 f4       	brne	.+44     	; 0x3824 <xTaskNotifyWait+0xe6>
    37f8:	e0 91 e5 18 	lds	r30, 0x18E5	; 0x8018e5 <pxCurrentTCB>
    37fc:	f0 91 e6 18 	lds	r31, 0x18E6	; 0x8018e6 <pxCurrentTCB+0x1>
    3800:	83 a5       	ldd	r24, Z+43	; 0x2b
    3802:	94 a5       	ldd	r25, Z+44	; 0x2c
    3804:	a5 a5       	ldd	r26, Z+45	; 0x2d
    3806:	b6 a5       	ldd	r27, Z+46	; 0x2e
    3808:	80 94       	com	r8
    380a:	90 94       	com	r9
    380c:	a0 94       	com	r10
    380e:	b0 94       	com	r11
    3810:	88 22       	and	r8, r24
    3812:	99 22       	and	r9, r25
    3814:	aa 22       	and	r10, r26
    3816:	bb 22       	and	r11, r27
    3818:	83 a6       	std	Z+43, r8	; 0x2b
    381a:	94 a6       	std	Z+44, r9	; 0x2c
    381c:	a5 a6       	std	Z+45, r10	; 0x2d
    381e:	b6 a6       	std	Z+46, r11	; 0x2e
    3820:	81 e0       	ldi	r24, 0x01	; 1
    3822:	01 c0       	rjmp	.+2      	; 0x3826 <xTaskNotifyWait+0xe8>
    3824:	80 e0       	ldi	r24, 0x00	; 0
    3826:	e0 91 e5 18 	lds	r30, 0x18E5	; 0x8018e5 <pxCurrentTCB>
    382a:	f0 91 e6 18 	lds	r31, 0x18E6	; 0x8018e6 <pxCurrentTCB+0x1>
    382e:	17 a6       	std	Z+47, r1	; 0x2f
    3830:	0f 90       	pop	r0
    3832:	0f be       	out	0x3f, r0	; 63
    3834:	1f 91       	pop	r17
    3836:	0f 91       	pop	r16
    3838:	ff 90       	pop	r15
    383a:	ef 90       	pop	r14
    383c:	df 90       	pop	r13
    383e:	cf 90       	pop	r12
    3840:	bf 90       	pop	r11
    3842:	af 90       	pop	r10
    3844:	9f 90       	pop	r9
    3846:	8f 90       	pop	r8
    3848:	7f 90       	pop	r7
    384a:	6f 90       	pop	r6
    384c:	5f 90       	pop	r5
    384e:	4f 90       	pop	r4
    3850:	08 95       	ret

00003852 <xTaskGenericNotify>:
    3852:	0f 93       	push	r16
    3854:	1f 93       	push	r17
    3856:	cf 93       	push	r28
    3858:	df 93       	push	r29
    385a:	fc 01       	movw	r30, r24
    385c:	0f b6       	in	r0, 0x3f	; 63
    385e:	f8 94       	cli
    3860:	0f 92       	push	r0
    3862:	01 15       	cp	r16, r1
    3864:	11 05       	cpc	r17, r1
    3866:	49 f0       	breq	.+18     	; 0x387a <xTaskGenericNotify+0x28>
    3868:	83 a5       	ldd	r24, Z+43	; 0x2b
    386a:	94 a5       	ldd	r25, Z+44	; 0x2c
    386c:	a5 a5       	ldd	r26, Z+45	; 0x2d
    386e:	b6 a5       	ldd	r27, Z+46	; 0x2e
    3870:	e8 01       	movw	r28, r16
    3872:	88 83       	st	Y, r24
    3874:	99 83       	std	Y+1, r25	; 0x01
    3876:	aa 83       	std	Y+2, r26	; 0x02
    3878:	bb 83       	std	Y+3, r27	; 0x03
    387a:	87 a5       	ldd	r24, Z+47	; 0x2f
    387c:	92 e0       	ldi	r25, 0x02	; 2
    387e:	97 a7       	std	Z+47, r25	; 0x2f
    3880:	22 30       	cpi	r18, 0x02	; 2
    3882:	b1 f0       	breq	.+44     	; 0x38b0 <xTaskGenericNotify+0x5e>
    3884:	18 f4       	brcc	.+6      	; 0x388c <xTaskGenericNotify+0x3a>
    3886:	21 30       	cpi	r18, 0x01	; 1
    3888:	31 f0       	breq	.+12     	; 0x3896 <xTaskGenericNotify+0x44>
    388a:	2a c0       	rjmp	.+84     	; 0x38e0 <xTaskGenericNotify+0x8e>
    388c:	23 30       	cpi	r18, 0x03	; 3
    388e:	e9 f0       	breq	.+58     	; 0x38ca <xTaskGenericNotify+0x78>
    3890:	24 30       	cpi	r18, 0x04	; 4
    3892:	01 f1       	breq	.+64     	; 0x38d4 <xTaskGenericNotify+0x82>
    3894:	25 c0       	rjmp	.+74     	; 0x38e0 <xTaskGenericNotify+0x8e>
    3896:	03 a5       	ldd	r16, Z+43	; 0x2b
    3898:	14 a5       	ldd	r17, Z+44	; 0x2c
    389a:	25 a5       	ldd	r18, Z+45	; 0x2d
    389c:	36 a5       	ldd	r19, Z+46	; 0x2e
    389e:	40 2b       	or	r20, r16
    38a0:	51 2b       	or	r21, r17
    38a2:	62 2b       	or	r22, r18
    38a4:	73 2b       	or	r23, r19
    38a6:	43 a7       	std	Z+43, r20	; 0x2b
    38a8:	54 a7       	std	Z+44, r21	; 0x2c
    38aa:	65 a7       	std	Z+45, r22	; 0x2d
    38ac:	76 a7       	std	Z+46, r23	; 0x2e
    38ae:	18 c0       	rjmp	.+48     	; 0x38e0 <xTaskGenericNotify+0x8e>
    38b0:	43 a5       	ldd	r20, Z+43	; 0x2b
    38b2:	54 a5       	ldd	r21, Z+44	; 0x2c
    38b4:	65 a5       	ldd	r22, Z+45	; 0x2d
    38b6:	76 a5       	ldd	r23, Z+46	; 0x2e
    38b8:	4f 5f       	subi	r20, 0xFF	; 255
    38ba:	5f 4f       	sbci	r21, 0xFF	; 255
    38bc:	6f 4f       	sbci	r22, 0xFF	; 255
    38be:	7f 4f       	sbci	r23, 0xFF	; 255
    38c0:	43 a7       	std	Z+43, r20	; 0x2b
    38c2:	54 a7       	std	Z+44, r21	; 0x2c
    38c4:	65 a7       	std	Z+45, r22	; 0x2d
    38c6:	76 a7       	std	Z+46, r23	; 0x2e
    38c8:	0b c0       	rjmp	.+22     	; 0x38e0 <xTaskGenericNotify+0x8e>
    38ca:	43 a7       	std	Z+43, r20	; 0x2b
    38cc:	54 a7       	std	Z+44, r21	; 0x2c
    38ce:	65 a7       	std	Z+45, r22	; 0x2d
    38d0:	76 a7       	std	Z+46, r23	; 0x2e
    38d2:	06 c0       	rjmp	.+12     	; 0x38e0 <xTaskGenericNotify+0x8e>
    38d4:	82 30       	cpi	r24, 0x02	; 2
    38d6:	49 f1       	breq	.+82     	; 0x392a <xTaskGenericNotify+0xd8>
    38d8:	43 a7       	std	Z+43, r20	; 0x2b
    38da:	54 a7       	std	Z+44, r21	; 0x2c
    38dc:	65 a7       	std	Z+45, r22	; 0x2d
    38de:	76 a7       	std	Z+46, r23	; 0x2e
    38e0:	81 30       	cpi	r24, 0x01	; 1
    38e2:	29 f5       	brne	.+74     	; 0x392e <xTaskGenericNotify+0xdc>
    38e4:	ef 01       	movw	r28, r30
    38e6:	8f 01       	movw	r16, r30
    38e8:	0e 5f       	subi	r16, 0xFE	; 254
    38ea:	1f 4f       	sbci	r17, 0xFF	; 255
    38ec:	c8 01       	movw	r24, r16
    38ee:	0e 94 c9 0c 	call	0x1992	; 0x1992 <uxListRemove>
    38f2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    38f4:	90 91 61 18 	lds	r25, 0x1861	; 0x801861 <uxTopReadyPriority>
    38f8:	98 17       	cp	r25, r24
    38fa:	10 f4       	brcc	.+4      	; 0x3900 <xTaskGenericNotify+0xae>
    38fc:	80 93 61 18 	sts	0x1861, r24	; 0x801861 <uxTopReadyPriority>
    3900:	2b e0       	ldi	r18, 0x0B	; 11
    3902:	82 9f       	mul	r24, r18
    3904:	c0 01       	movw	r24, r0
    3906:	11 24       	eor	r1, r1
    3908:	b8 01       	movw	r22, r16
    390a:	8d 55       	subi	r24, 0x5D	; 93
    390c:	97 4e       	sbci	r25, 0xE7	; 231
    390e:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <vListInsertEnd>
    3912:	e0 91 e5 18 	lds	r30, 0x18E5	; 0x8018e5 <pxCurrentTCB>
    3916:	f0 91 e6 18 	lds	r31, 0x18E6	; 0x8018e6 <pxCurrentTCB+0x1>
    391a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    391c:	82 8d       	ldd	r24, Z+26	; 0x1a
    391e:	89 17       	cp	r24, r25
    3920:	40 f4       	brcc	.+16     	; 0x3932 <xTaskGenericNotify+0xe0>
    3922:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <vPortYield>
    3926:	81 e0       	ldi	r24, 0x01	; 1
    3928:	05 c0       	rjmp	.+10     	; 0x3934 <xTaskGenericNotify+0xe2>
    392a:	80 e0       	ldi	r24, 0x00	; 0
    392c:	03 c0       	rjmp	.+6      	; 0x3934 <xTaskGenericNotify+0xe2>
    392e:	81 e0       	ldi	r24, 0x01	; 1
    3930:	01 c0       	rjmp	.+2      	; 0x3934 <xTaskGenericNotify+0xe2>
    3932:	81 e0       	ldi	r24, 0x01	; 1
    3934:	0f 90       	pop	r0
    3936:	0f be       	out	0x3f, r0	; 63
    3938:	df 91       	pop	r29
    393a:	cf 91       	pop	r28
    393c:	1f 91       	pop	r17
    393e:	0f 91       	pop	r16
    3940:	08 95       	ret

00003942 <xTaskGenericNotifyFromISR>:
    3942:	ef 92       	push	r14
    3944:	ff 92       	push	r15
    3946:	0f 93       	push	r16
    3948:	1f 93       	push	r17
    394a:	cf 93       	push	r28
    394c:	df 93       	push	r29
    394e:	fc 01       	movw	r30, r24
    3950:	01 15       	cp	r16, r1
    3952:	11 05       	cpc	r17, r1
    3954:	49 f0       	breq	.+18     	; 0x3968 <xTaskGenericNotifyFromISR+0x26>
    3956:	83 a5       	ldd	r24, Z+43	; 0x2b
    3958:	94 a5       	ldd	r25, Z+44	; 0x2c
    395a:	a5 a5       	ldd	r26, Z+45	; 0x2d
    395c:	b6 a5       	ldd	r27, Z+46	; 0x2e
    395e:	e8 01       	movw	r28, r16
    3960:	88 83       	st	Y, r24
    3962:	99 83       	std	Y+1, r25	; 0x01
    3964:	aa 83       	std	Y+2, r26	; 0x02
    3966:	bb 83       	std	Y+3, r27	; 0x03
    3968:	87 a5       	ldd	r24, Z+47	; 0x2f
    396a:	92 e0       	ldi	r25, 0x02	; 2
    396c:	97 a7       	std	Z+47, r25	; 0x2f
    396e:	22 30       	cpi	r18, 0x02	; 2
    3970:	b1 f0       	breq	.+44     	; 0x399e <xTaskGenericNotifyFromISR+0x5c>
    3972:	18 f4       	brcc	.+6      	; 0x397a <xTaskGenericNotifyFromISR+0x38>
    3974:	21 30       	cpi	r18, 0x01	; 1
    3976:	31 f0       	breq	.+12     	; 0x3984 <xTaskGenericNotifyFromISR+0x42>
    3978:	2a c0       	rjmp	.+84     	; 0x39ce <xTaskGenericNotifyFromISR+0x8c>
    397a:	23 30       	cpi	r18, 0x03	; 3
    397c:	e9 f0       	breq	.+58     	; 0x39b8 <xTaskGenericNotifyFromISR+0x76>
    397e:	24 30       	cpi	r18, 0x04	; 4
    3980:	01 f1       	breq	.+64     	; 0x39c2 <xTaskGenericNotifyFromISR+0x80>
    3982:	25 c0       	rjmp	.+74     	; 0x39ce <xTaskGenericNotifyFromISR+0x8c>
    3984:	03 a5       	ldd	r16, Z+43	; 0x2b
    3986:	14 a5       	ldd	r17, Z+44	; 0x2c
    3988:	25 a5       	ldd	r18, Z+45	; 0x2d
    398a:	36 a5       	ldd	r19, Z+46	; 0x2e
    398c:	40 2b       	or	r20, r16
    398e:	51 2b       	or	r21, r17
    3990:	62 2b       	or	r22, r18
    3992:	73 2b       	or	r23, r19
    3994:	43 a7       	std	Z+43, r20	; 0x2b
    3996:	54 a7       	std	Z+44, r21	; 0x2c
    3998:	65 a7       	std	Z+45, r22	; 0x2d
    399a:	76 a7       	std	Z+46, r23	; 0x2e
    399c:	18 c0       	rjmp	.+48     	; 0x39ce <xTaskGenericNotifyFromISR+0x8c>
    399e:	43 a5       	ldd	r20, Z+43	; 0x2b
    39a0:	54 a5       	ldd	r21, Z+44	; 0x2c
    39a2:	65 a5       	ldd	r22, Z+45	; 0x2d
    39a4:	76 a5       	ldd	r23, Z+46	; 0x2e
    39a6:	4f 5f       	subi	r20, 0xFF	; 255
    39a8:	5f 4f       	sbci	r21, 0xFF	; 255
    39aa:	6f 4f       	sbci	r22, 0xFF	; 255
    39ac:	7f 4f       	sbci	r23, 0xFF	; 255
    39ae:	43 a7       	std	Z+43, r20	; 0x2b
    39b0:	54 a7       	std	Z+44, r21	; 0x2c
    39b2:	65 a7       	std	Z+45, r22	; 0x2d
    39b4:	76 a7       	std	Z+46, r23	; 0x2e
    39b6:	0b c0       	rjmp	.+22     	; 0x39ce <xTaskGenericNotifyFromISR+0x8c>
    39b8:	43 a7       	std	Z+43, r20	; 0x2b
    39ba:	54 a7       	std	Z+44, r21	; 0x2c
    39bc:	65 a7       	std	Z+45, r22	; 0x2d
    39be:	76 a7       	std	Z+46, r23	; 0x2e
    39c0:	06 c0       	rjmp	.+12     	; 0x39ce <xTaskGenericNotifyFromISR+0x8c>
    39c2:	82 30       	cpi	r24, 0x02	; 2
    39c4:	d9 f1       	breq	.+118    	; 0x3a3c <xTaskGenericNotifyFromISR+0xfa>
    39c6:	43 a7       	std	Z+43, r20	; 0x2b
    39c8:	54 a7       	std	Z+44, r21	; 0x2c
    39ca:	65 a7       	std	Z+45, r22	; 0x2d
    39cc:	76 a7       	std	Z+46, r23	; 0x2e
    39ce:	81 30       	cpi	r24, 0x01	; 1
    39d0:	b9 f5       	brne	.+110    	; 0x3a40 <xTaskGenericNotifyFromISR+0xfe>
    39d2:	ef 01       	movw	r28, r30
    39d4:	80 91 55 18 	lds	r24, 0x1855	; 0x801855 <uxSchedulerSuspended>
    39d8:	81 11       	cpse	r24, r1
    39da:	17 c0       	rjmp	.+46     	; 0x3a0a <xTaskGenericNotifyFromISR+0xc8>
    39dc:	8f 01       	movw	r16, r30
    39de:	0e 5f       	subi	r16, 0xFE	; 254
    39e0:	1f 4f       	sbci	r17, 0xFF	; 255
    39e2:	c8 01       	movw	r24, r16
    39e4:	0e 94 c9 0c 	call	0x1992	; 0x1992 <uxListRemove>
    39e8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    39ea:	90 91 61 18 	lds	r25, 0x1861	; 0x801861 <uxTopReadyPriority>
    39ee:	98 17       	cp	r25, r24
    39f0:	10 f4       	brcc	.+4      	; 0x39f6 <xTaskGenericNotifyFromISR+0xb4>
    39f2:	80 93 61 18 	sts	0x1861, r24	; 0x801861 <uxTopReadyPriority>
    39f6:	eb e0       	ldi	r30, 0x0B	; 11
    39f8:	8e 9f       	mul	r24, r30
    39fa:	c0 01       	movw	r24, r0
    39fc:	11 24       	eor	r1, r1
    39fe:	b8 01       	movw	r22, r16
    3a00:	8d 55       	subi	r24, 0x5D	; 93
    3a02:	97 4e       	sbci	r25, 0xE7	; 231
    3a04:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <vListInsertEnd>
    3a08:	07 c0       	rjmp	.+14     	; 0x3a18 <xTaskGenericNotifyFromISR+0xd6>
    3a0a:	bf 01       	movw	r22, r30
    3a0c:	62 5f       	subi	r22, 0xF2	; 242
    3a0e:	7f 4f       	sbci	r23, 0xFF	; 255
    3a10:	8e e7       	ldi	r24, 0x7E	; 126
    3a12:	98 e1       	ldi	r25, 0x18	; 24
    3a14:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <vListInsertEnd>
    3a18:	e0 91 e5 18 	lds	r30, 0x18E5	; 0x8018e5 <pxCurrentTCB>
    3a1c:	f0 91 e6 18 	lds	r31, 0x18E6	; 0x8018e6 <pxCurrentTCB+0x1>
    3a20:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3a22:	82 8d       	ldd	r24, Z+26	; 0x1a
    3a24:	89 17       	cp	r24, r25
    3a26:	70 f4       	brcc	.+28     	; 0x3a44 <xTaskGenericNotifyFromISR+0x102>
    3a28:	e1 14       	cp	r14, r1
    3a2a:	f1 04       	cpc	r15, r1
    3a2c:	19 f0       	breq	.+6      	; 0x3a34 <xTaskGenericNotifyFromISR+0xf2>
    3a2e:	81 e0       	ldi	r24, 0x01	; 1
    3a30:	e7 01       	movw	r28, r14
    3a32:	88 83       	st	Y, r24
    3a34:	81 e0       	ldi	r24, 0x01	; 1
    3a36:	80 93 5e 18 	sts	0x185E, r24	; 0x80185e <xYieldPending>
    3a3a:	05 c0       	rjmp	.+10     	; 0x3a46 <xTaskGenericNotifyFromISR+0x104>
    3a3c:	80 e0       	ldi	r24, 0x00	; 0
    3a3e:	03 c0       	rjmp	.+6      	; 0x3a46 <xTaskGenericNotifyFromISR+0x104>
    3a40:	81 e0       	ldi	r24, 0x01	; 1
    3a42:	01 c0       	rjmp	.+2      	; 0x3a46 <xTaskGenericNotifyFromISR+0x104>
    3a44:	81 e0       	ldi	r24, 0x01	; 1
    3a46:	df 91       	pop	r29
    3a48:	cf 91       	pop	r28
    3a4a:	1f 91       	pop	r17
    3a4c:	0f 91       	pop	r16
    3a4e:	ff 90       	pop	r15
    3a50:	ef 90       	pop	r14
    3a52:	08 95       	ret

00003a54 <xTaskNotifyStateClear>:
    TCB_t *pxTCB;
    BaseType_t xReturn;

        /* If null is passed in here then it is the calling task that is having
        its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    3a54:	00 97       	sbiw	r24, 0x00	; 0
    3a56:	21 f4       	brne	.+8      	; 0x3a60 <xTaskNotifyStateClear+0xc>
    3a58:	80 91 e5 18 	lds	r24, 0x18E5	; 0x8018e5 <pxCurrentTCB>
    3a5c:	90 91 e6 18 	lds	r25, 0x18E6	; 0x8018e6 <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    3a60:	0f b6       	in	r0, 0x3f	; 63
    3a62:	f8 94       	cli
    3a64:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
    3a66:	fc 01       	movw	r30, r24
    3a68:	27 a5       	ldd	r18, Z+47	; 0x2f
    3a6a:	22 30       	cpi	r18, 0x02	; 2
    3a6c:	19 f4       	brne	.+6      	; 0x3a74 <xTaskNotifyStateClear+0x20>
            {
                pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    3a6e:	17 a6       	std	Z+47, r1	; 0x2f
                xReturn = pdPASS;
    3a70:	81 e0       	ldi	r24, 0x01	; 1
    3a72:	01 c0       	rjmp	.+2      	; 0x3a76 <xTaskNotifyStateClear+0x22>
            }
            else
            {
                xReturn = pdFAIL;
    3a74:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    3a76:	0f 90       	pop	r0
    3a78:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    3a7a:	08 95       	ret

00003a7c <prvInsertTimerInActiveList>:
    3a7c:	cf 92       	push	r12
    3a7e:	df 92       	push	r13
    3a80:	ef 92       	push	r14
    3a82:	ff 92       	push	r15
    3a84:	0f 93       	push	r16
    3a86:	1f 93       	push	r17
    3a88:	fc 01       	movw	r30, r24
    3a8a:	42 83       	std	Z+2, r20	; 0x02
    3a8c:	53 83       	std	Z+3, r21	; 0x03
    3a8e:	64 83       	std	Z+4, r22	; 0x04
    3a90:	75 83       	std	Z+5, r23	; 0x05
    3a92:	93 87       	std	Z+11, r25	; 0x0b
    3a94:	82 87       	std	Z+10, r24	; 0x0a
    3a96:	04 17       	cp	r16, r20
    3a98:	15 07       	cpc	r17, r21
    3a9a:	26 07       	cpc	r18, r22
    3a9c:	37 07       	cpc	r19, r23
    3a9e:	c0 f0       	brcs	.+48     	; 0x3ad0 <prvInsertTimerInActiveList+0x54>
    3aa0:	0c 19       	sub	r16, r12
    3aa2:	1d 09       	sbc	r17, r13
    3aa4:	2e 09       	sbc	r18, r14
    3aa6:	3f 09       	sbc	r19, r15
    3aa8:	86 85       	ldd	r24, Z+14	; 0x0e
    3aaa:	97 85       	ldd	r25, Z+15	; 0x0f
    3aac:	a0 89       	ldd	r26, Z+16	; 0x10
    3aae:	b1 89       	ldd	r27, Z+17	; 0x11
    3ab0:	08 17       	cp	r16, r24
    3ab2:	19 07       	cpc	r17, r25
    3ab4:	2a 07       	cpc	r18, r26
    3ab6:	3b 07       	cpc	r19, r27
    3ab8:	00 f5       	brcc	.+64     	; 0x3afa <prvInsertTimerInActiveList+0x7e>
    3aba:	bf 01       	movw	r22, r30
    3abc:	6e 5f       	subi	r22, 0xFE	; 254
    3abe:	7f 4f       	sbci	r23, 0xFF	; 255
    3ac0:	80 91 ef 18 	lds	r24, 0x18EF	; 0x8018ef <pxOverflowTimerList>
    3ac4:	90 91 f0 18 	lds	r25, 0x18F0	; 0x8018f0 <pxOverflowTimerList+0x1>
    3ac8:	0e 94 8c 0c 	call	0x1918	; 0x1918 <vListInsert>
    3acc:	80 e0       	ldi	r24, 0x00	; 0
    3ace:	18 c0       	rjmp	.+48     	; 0x3b00 <prvInsertTimerInActiveList+0x84>
    3ad0:	0c 15       	cp	r16, r12
    3ad2:	1d 05       	cpc	r17, r13
    3ad4:	2e 05       	cpc	r18, r14
    3ad6:	3f 05       	cpc	r19, r15
    3ad8:	28 f4       	brcc	.+10     	; 0x3ae4 <prvInsertTimerInActiveList+0x68>
    3ada:	4c 15       	cp	r20, r12
    3adc:	5d 05       	cpc	r21, r13
    3ade:	6e 05       	cpc	r22, r14
    3ae0:	7f 05       	cpc	r23, r15
    3ae2:	68 f4       	brcc	.+26     	; 0x3afe <prvInsertTimerInActiveList+0x82>
    3ae4:	bf 01       	movw	r22, r30
    3ae6:	6e 5f       	subi	r22, 0xFE	; 254
    3ae8:	7f 4f       	sbci	r23, 0xFF	; 255
    3aea:	80 91 f1 18 	lds	r24, 0x18F1	; 0x8018f1 <pxCurrentTimerList>
    3aee:	90 91 f2 18 	lds	r25, 0x18F2	; 0x8018f2 <pxCurrentTimerList+0x1>
    3af2:	0e 94 8c 0c 	call	0x1918	; 0x1918 <vListInsert>
    3af6:	80 e0       	ldi	r24, 0x00	; 0
    3af8:	03 c0       	rjmp	.+6      	; 0x3b00 <prvInsertTimerInActiveList+0x84>
    3afa:	81 e0       	ldi	r24, 0x01	; 1
    3afc:	01 c0       	rjmp	.+2      	; 0x3b00 <prvInsertTimerInActiveList+0x84>
    3afe:	81 e0       	ldi	r24, 0x01	; 1
    3b00:	1f 91       	pop	r17
    3b02:	0f 91       	pop	r16
    3b04:	ff 90       	pop	r15
    3b06:	ef 90       	pop	r14
    3b08:	df 90       	pop	r13
    3b0a:	cf 90       	pop	r12
    3b0c:	08 95       	ret

00003b0e <prvCheckForValidListAndQueue>:
    3b0e:	0f b6       	in	r0, 0x3f	; 63
    3b10:	f8 94       	cli
    3b12:	0f 92       	push	r0
    3b14:	80 91 ed 18 	lds	r24, 0x18ED	; 0x8018ed <xTimerQueue>
    3b18:	90 91 ee 18 	lds	r25, 0x18EE	; 0x8018ee <xTimerQueue+0x1>
    3b1c:	89 2b       	or	r24, r25
    3b1e:	e9 f4       	brne	.+58     	; 0x3b5a <prvCheckForValidListAndQueue+0x4c>
    3b20:	8e ef       	ldi	r24, 0xFE	; 254
    3b22:	98 e1       	ldi	r25, 0x18	; 24
    3b24:	0e 94 56 0c 	call	0x18ac	; 0x18ac <vListInitialise>
    3b28:	83 ef       	ldi	r24, 0xF3	; 243
    3b2a:	98 e1       	ldi	r25, 0x18	; 24
    3b2c:	0e 94 56 0c 	call	0x18ac	; 0x18ac <vListInitialise>
    3b30:	8e ef       	ldi	r24, 0xFE	; 254
    3b32:	98 e1       	ldi	r25, 0x18	; 24
    3b34:	90 93 f2 18 	sts	0x18F2, r25	; 0x8018f2 <pxCurrentTimerList+0x1>
    3b38:	80 93 f1 18 	sts	0x18F1, r24	; 0x8018f1 <pxCurrentTimerList>
    3b3c:	83 ef       	ldi	r24, 0xF3	; 243
    3b3e:	98 e1       	ldi	r25, 0x18	; 24
    3b40:	90 93 f0 18 	sts	0x18F0, r25	; 0x8018f0 <pxOverflowTimerList+0x1>
    3b44:	80 93 ef 18 	sts	0x18EF, r24	; 0x8018ef <pxOverflowTimerList>
    3b48:	40 e0       	ldi	r20, 0x00	; 0
    3b4a:	67 e0       	ldi	r22, 0x07	; 7
    3b4c:	8a e0       	ldi	r24, 0x0A	; 10
    3b4e:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <xQueueGenericCreate>
    3b52:	90 93 ee 18 	sts	0x18EE, r25	; 0x8018ee <xTimerQueue+0x1>
    3b56:	80 93 ed 18 	sts	0x18ED, r24	; 0x8018ed <xTimerQueue>
    3b5a:	0f 90       	pop	r0
    3b5c:	0f be       	out	0x3f, r0	; 63
    3b5e:	08 95       	ret

00003b60 <xTimerCreateTimerTask>:
    3b60:	ef 92       	push	r14
    3b62:	ff 92       	push	r15
    3b64:	0f 93       	push	r16
    3b66:	d3 df       	rcall	.-90     	; 0x3b0e <prvCheckForValidListAndQueue>
    3b68:	80 91 ed 18 	lds	r24, 0x18ED	; 0x8018ed <xTimerQueue>
    3b6c:	90 91 ee 18 	lds	r25, 0x18EE	; 0x8018ee <xTimerQueue+0x1>
    3b70:	89 2b       	or	r24, r25
    3b72:	91 f0       	breq	.+36     	; 0x3b98 <xTimerCreateTimerTask+0x38>
    3b74:	0f 2e       	mov	r0, r31
    3b76:	fb ee       	ldi	r31, 0xEB	; 235
    3b78:	ef 2e       	mov	r14, r31
    3b7a:	f8 e1       	ldi	r31, 0x18	; 24
    3b7c:	ff 2e       	mov	r15, r31
    3b7e:	f0 2d       	mov	r31, r0
    3b80:	03 e0       	ldi	r16, 0x03	; 3
    3b82:	20 e0       	ldi	r18, 0x00	; 0
    3b84:	30 e0       	ldi	r19, 0x00	; 0
    3b86:	45 e5       	ldi	r20, 0x55	; 85
    3b88:	50 e0       	ldi	r21, 0x00	; 0
    3b8a:	61 ed       	ldi	r22, 0xD1	; 209
    3b8c:	74 e0       	ldi	r23, 0x04	; 4
    3b8e:	87 e0       	ldi	r24, 0x07	; 7
    3b90:	91 e0       	ldi	r25, 0x01	; 1
    3b92:	0e 94 ab 15 	call	0x2b56	; 0x2b56 <xTaskCreate>
    3b96:	01 c0       	rjmp	.+2      	; 0x3b9a <xTimerCreateTimerTask+0x3a>
    3b98:	80 e0       	ldi	r24, 0x00	; 0
    3b9a:	0f 91       	pop	r16
    3b9c:	ff 90       	pop	r15
    3b9e:	ef 90       	pop	r14
    3ba0:	08 95       	ret

00003ba2 <xTimerGenericCommand>:
    }
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    3ba2:	8f 92       	push	r8
    3ba4:	9f 92       	push	r9
    3ba6:	af 92       	push	r10
    3ba8:	bf 92       	push	r11
    3baa:	cf 92       	push	r12
    3bac:	df 92       	push	r13
    3bae:	ef 92       	push	r14
    3bb0:	ff 92       	push	r15
    3bb2:	0f 93       	push	r16
    3bb4:	1f 93       	push	r17
    3bb6:	cf 93       	push	r28
    3bb8:	df 93       	push	r29
    3bba:	cd b7       	in	r28, 0x3d	; 61
    3bbc:	de b7       	in	r29, 0x3e	; 62
    3bbe:	27 97       	sbiw	r28, 0x07	; 7
    3bc0:	0f b6       	in	r0, 0x3f	; 63
    3bc2:	f8 94       	cli
    3bc4:	de bf       	out	0x3e, r29	; 62
    3bc6:	0f be       	out	0x3f, r0	; 63
    3bc8:	cd bf       	out	0x3d, r28	; 61

    configASSERT( xTimer );

    /* Send a message to the timer service task to perform a particular action
    on a particular timer definition. */
    if( xTimerQueue != NULL )
    3bca:	e0 91 ed 18 	lds	r30, 0x18ED	; 0x8018ed <xTimerQueue>
    3bce:	f0 91 ee 18 	lds	r31, 0x18EE	; 0x8018ee <xTimerQueue+0x1>
    3bd2:	30 97       	sbiw	r30, 0x00	; 0
    3bd4:	81 f1       	breq	.+96     	; 0x3c36 <xTimerGenericCommand+0x94>
    {
        /* Send a command to the timer service task to start the xTimer timer. */
        xMessage.xMessageID = xCommandID;
    3bd6:	69 83       	std	Y+1, r22	; 0x01
        xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    3bd8:	2a 83       	std	Y+2, r18	; 0x02
    3bda:	3b 83       	std	Y+3, r19	; 0x03
    3bdc:	4c 83       	std	Y+4, r20	; 0x04
    3bde:	5d 83       	std	Y+5, r21	; 0x05
        xMessage.u.xTimerParameters.pxTimer = xTimer;
    3be0:	9f 83       	std	Y+7, r25	; 0x07
    3be2:	8e 83       	std	Y+6, r24	; 0x06

        if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    3be4:	66 30       	cpi	r22, 0x06	; 6
    3be6:	f4 f4       	brge	.+60     	; 0x3c24 <xTimerGenericCommand+0x82>
        {
            if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    3be8:	66 dc       	rcall	.-1844   	; 0x34b6 <xTaskGetSchedulerState>
    3bea:	82 30       	cpi	r24, 0x02	; 2
    3bec:	69 f4       	brne	.+26     	; 0x3c08 <xTimerGenericCommand+0x66>
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    3bee:	00 e0       	ldi	r16, 0x00	; 0
    3bf0:	a7 01       	movw	r20, r14
    3bf2:	96 01       	movw	r18, r12
    3bf4:	be 01       	movw	r22, r28
    3bf6:	6f 5f       	subi	r22, 0xFF	; 255
    3bf8:	7f 4f       	sbci	r23, 0xFF	; 255
    3bfa:	80 91 ed 18 	lds	r24, 0x18ED	; 0x8018ed <xTimerQueue>
    3bfe:	90 91 ee 18 	lds	r25, 0x18EE	; 0x8018ee <xTimerQueue+0x1>
    3c02:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <xQueueGenericSend>
    3c06:	18 c0       	rjmp	.+48     	; 0x3c38 <xTimerGenericCommand+0x96>
            }
            else
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    3c08:	00 e0       	ldi	r16, 0x00	; 0
    3c0a:	20 e0       	ldi	r18, 0x00	; 0
    3c0c:	30 e0       	ldi	r19, 0x00	; 0
    3c0e:	a9 01       	movw	r20, r18
    3c10:	be 01       	movw	r22, r28
    3c12:	6f 5f       	subi	r22, 0xFF	; 255
    3c14:	7f 4f       	sbci	r23, 0xFF	; 255
    3c16:	80 91 ed 18 	lds	r24, 0x18ED	; 0x8018ed <xTimerQueue>
    3c1a:	90 91 ee 18 	lds	r25, 0x18EE	; 0x8018ee <xTimerQueue+0x1>
    3c1e:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <xQueueGenericSend>
    3c22:	0a c0       	rjmp	.+20     	; 0x3c38 <xTimerGenericCommand+0x96>
            }
        }
        else
        {
            xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    3c24:	20 e0       	ldi	r18, 0x00	; 0
    3c26:	a8 01       	movw	r20, r16
    3c28:	be 01       	movw	r22, r28
    3c2a:	6f 5f       	subi	r22, 0xFF	; 255
    3c2c:	7f 4f       	sbci	r23, 0xFF	; 255
    3c2e:	cf 01       	movw	r24, r30
    3c30:	0e 94 63 10 	call	0x20c6	; 0x20c6 <xQueueGenericSendFromISR>
    3c34:	01 c0       	rjmp	.+2      	; 0x3c38 <xTimerGenericCommand+0x96>
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
    3c36:	80 e0       	ldi	r24, 0x00	; 0
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xReturn;
}
    3c38:	27 96       	adiw	r28, 0x07	; 7
    3c3a:	0f b6       	in	r0, 0x3f	; 63
    3c3c:	f8 94       	cli
    3c3e:	de bf       	out	0x3e, r29	; 62
    3c40:	0f be       	out	0x3f, r0	; 63
    3c42:	cd bf       	out	0x3d, r28	; 61
    3c44:	df 91       	pop	r29
    3c46:	cf 91       	pop	r28
    3c48:	1f 91       	pop	r17
    3c4a:	0f 91       	pop	r16
    3c4c:	ff 90       	pop	r15
    3c4e:	ef 90       	pop	r14
    3c50:	df 90       	pop	r13
    3c52:	cf 90       	pop	r12
    3c54:	bf 90       	pop	r11
    3c56:	af 90       	pop	r10
    3c58:	9f 90       	pop	r9
    3c5a:	8f 90       	pop	r8
    3c5c:	08 95       	ret

00003c5e <prvSampleTimeNow>:
    return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    3c5e:	2f 92       	push	r2
    3c60:	3f 92       	push	r3
    3c62:	4f 92       	push	r4
    3c64:	5f 92       	push	r5
    3c66:	6f 92       	push	r6
    3c68:	7f 92       	push	r7
    3c6a:	8f 92       	push	r8
    3c6c:	9f 92       	push	r9
    3c6e:	af 92       	push	r10
    3c70:	bf 92       	push	r11
    3c72:	cf 92       	push	r12
    3c74:	df 92       	push	r13
    3c76:	ef 92       	push	r14
    3c78:	ff 92       	push	r15
    3c7a:	0f 93       	push	r16
    3c7c:	1f 93       	push	r17
    3c7e:	cf 93       	push	r28
    3c80:	df 93       	push	r29
    3c82:	1c 01       	movw	r2, r24
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

    xTimeNow = xTaskGetTickCount();
    3c84:	cb d8       	rcall	.-3690   	; 0x2e1c <xTaskGetTickCount>
    3c86:	2b 01       	movw	r4, r22
    3c88:	3c 01       	movw	r6, r24

    if( xTimeNow < xLastTime )
    3c8a:	80 91 e7 18 	lds	r24, 0x18E7	; 0x8018e7 <xLastTime.2432>
    3c8e:	90 91 e8 18 	lds	r25, 0x18E8	; 0x8018e8 <xLastTime.2432+0x1>
    3c92:	a0 91 e9 18 	lds	r26, 0x18E9	; 0x8018e9 <xLastTime.2432+0x2>
    3c96:	b0 91 ea 18 	lds	r27, 0x18EA	; 0x8018ea <xLastTime.2432+0x3>
    3c9a:	48 16       	cp	r4, r24
    3c9c:	59 06       	cpc	r5, r25
    3c9e:	6a 06       	cpc	r6, r26
    3ca0:	7b 06       	cpc	r7, r27
    3ca2:	08 f0       	brcs	.+2      	; 0x3ca6 <prvSampleTimeNow+0x48>
    3ca4:	53 c0       	rjmp	.+166    	; 0x3d4c <prvSampleTimeNow+0xee>
    3ca6:	3b c0       	rjmp	.+118    	; 0x3d1e <prvSampleTimeNow+0xc0>
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    {
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    3ca8:	07 80       	ldd	r0, Z+7	; 0x07
    3caa:	f0 85       	ldd	r31, Z+8	; 0x08
    3cac:	e0 2d       	mov	r30, r0
    3cae:	80 80       	ld	r8, Z
    3cb0:	91 80       	ldd	r9, Z+1	; 0x01
    3cb2:	a2 80       	ldd	r10, Z+2	; 0x02
    3cb4:	b3 80       	ldd	r11, Z+3	; 0x03

        /* Remove the timer from the list. */
        pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    3cb6:	c0 85       	ldd	r28, Z+8	; 0x08
    3cb8:	d1 85       	ldd	r29, Z+9	; 0x09
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3cba:	8e 01       	movw	r16, r28
    3cbc:	0e 5f       	subi	r16, 0xFE	; 254
    3cbe:	1f 4f       	sbci	r17, 0xFF	; 255
    3cc0:	c8 01       	movw	r24, r16
    3cc2:	0e 94 c9 0c 	call	0x1992	; 0x1992 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* Execute its callback, then send a command to restart the timer if
        it is an auto-reload timer.  It cannot be restarted here as the lists
        have not yet been switched. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3cc6:	ec 89       	ldd	r30, Y+20	; 0x14
    3cc8:	fd 89       	ldd	r31, Y+21	; 0x15
    3cca:	ce 01       	movw	r24, r28
    3ccc:	19 95       	eicall

        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    3cce:	8f 89       	ldd	r24, Y+23	; 0x17
    3cd0:	82 ff       	sbrs	r24, 2
    3cd2:	25 c0       	rjmp	.+74     	; 0x3d1e <prvSampleTimeNow+0xc0>
            the timer going into the same timer list then it has already expired
            and the timer should be re-inserted into the current list so it is
            processed again within this loop.  Otherwise a command should be sent
            to restart the timer to ensure it is only inserted into a list after
            the lists have been swapped. */
            xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    3cd4:	8e 85       	ldd	r24, Y+14	; 0x0e
    3cd6:	9f 85       	ldd	r25, Y+15	; 0x0f
    3cd8:	a8 89       	ldd	r26, Y+16	; 0x10
    3cda:	b9 89       	ldd	r27, Y+17	; 0x11
    3cdc:	88 0d       	add	r24, r8
    3cde:	99 1d       	adc	r25, r9
    3ce0:	aa 1d       	adc	r26, r10
    3ce2:	bb 1d       	adc	r27, r11
            if( xReloadTime > xNextExpireTime )
    3ce4:	88 16       	cp	r8, r24
    3ce6:	99 06       	cpc	r9, r25
    3ce8:	aa 06       	cpc	r10, r26
    3cea:	bb 06       	cpc	r11, r27
    3cec:	70 f4       	brcc	.+28     	; 0x3d0a <prvSampleTimeNow+0xac>
            {
                listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    3cee:	8a 83       	std	Y+2, r24	; 0x02
    3cf0:	9b 83       	std	Y+3, r25	; 0x03
    3cf2:	ac 83       	std	Y+4, r26	; 0x04
    3cf4:	bd 83       	std	Y+5, r27	; 0x05
                listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    3cf6:	db 87       	std	Y+11, r29	; 0x0b
    3cf8:	ca 87       	std	Y+10, r28	; 0x0a
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    3cfa:	b8 01       	movw	r22, r16
    3cfc:	80 91 f1 18 	lds	r24, 0x18F1	; 0x8018f1 <pxCurrentTimerList>
    3d00:	90 91 f2 18 	lds	r25, 0x18F2	; 0x8018f2 <pxCurrentTimerList+0x1>
    3d04:	0e 94 8c 0c 	call	0x1918	; 0x1918 <vListInsert>
    3d08:	0a c0       	rjmp	.+20     	; 0x3d1e <prvSampleTimeNow+0xc0>
            }
            else
            {
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    3d0a:	c1 2c       	mov	r12, r1
    3d0c:	d1 2c       	mov	r13, r1
    3d0e:	76 01       	movw	r14, r12
    3d10:	00 e0       	ldi	r16, 0x00	; 0
    3d12:	10 e0       	ldi	r17, 0x00	; 0
    3d14:	a5 01       	movw	r20, r10
    3d16:	94 01       	movw	r18, r8
    3d18:	60 e0       	ldi	r22, 0x00	; 0
    3d1a:	ce 01       	movw	r24, r28
    3d1c:	42 df       	rcall	.-380    	; 0x3ba2 <xTimerGenericCommand>

    /* The tick count has overflowed.  The timer lists must be switched.
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    3d1e:	e0 91 f1 18 	lds	r30, 0x18F1	; 0x8018f1 <pxCurrentTimerList>
    3d22:	f0 91 f2 18 	lds	r31, 0x18F2	; 0x8018f2 <pxCurrentTimerList+0x1>
    3d26:	80 81       	ld	r24, Z
    3d28:	81 11       	cpse	r24, r1
    3d2a:	be cf       	rjmp	.-132    	; 0x3ca8 <prvSampleTimeNow+0x4a>
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxTemp = pxCurrentTimerList;
    pxCurrentTimerList = pxOverflowTimerList;
    3d2c:	80 91 ef 18 	lds	r24, 0x18EF	; 0x8018ef <pxOverflowTimerList>
    3d30:	90 91 f0 18 	lds	r25, 0x18F0	; 0x8018f0 <pxOverflowTimerList+0x1>
    3d34:	90 93 f2 18 	sts	0x18F2, r25	; 0x8018f2 <pxCurrentTimerList+0x1>
    3d38:	80 93 f1 18 	sts	0x18F1, r24	; 0x8018f1 <pxCurrentTimerList>
    pxOverflowTimerList = pxTemp;
    3d3c:	f0 93 f0 18 	sts	0x18F0, r31	; 0x8018f0 <pxOverflowTimerList+0x1>
    3d40:	e0 93 ef 18 	sts	0x18EF, r30	; 0x8018ef <pxOverflowTimerList>
    xTimeNow = xTaskGetTickCount();

    if( xTimeNow < xLastTime )
    {
        prvSwitchTimerLists();
        *pxTimerListsWereSwitched = pdTRUE;
    3d44:	81 e0       	ldi	r24, 0x01	; 1
    3d46:	f1 01       	movw	r30, r2
    3d48:	80 83       	st	Z, r24
    3d4a:	02 c0       	rjmp	.+4      	; 0x3d50 <prvSampleTimeNow+0xf2>
    }
    else
    {
        *pxTimerListsWereSwitched = pdFALSE;
    3d4c:	f1 01       	movw	r30, r2
    3d4e:	10 82       	st	Z, r1
    }

    xLastTime = xTimeNow;
    3d50:	40 92 e7 18 	sts	0x18E7, r4	; 0x8018e7 <xLastTime.2432>
    3d54:	50 92 e8 18 	sts	0x18E8, r5	; 0x8018e8 <xLastTime.2432+0x1>
    3d58:	60 92 e9 18 	sts	0x18E9, r6	; 0x8018e9 <xLastTime.2432+0x2>
    3d5c:	70 92 ea 18 	sts	0x18EA, r7	; 0x8018ea <xLastTime.2432+0x3>

    return xTimeNow;
}
    3d60:	c3 01       	movw	r24, r6
    3d62:	b2 01       	movw	r22, r4
    3d64:	df 91       	pop	r29
    3d66:	cf 91       	pop	r28
    3d68:	1f 91       	pop	r17
    3d6a:	0f 91       	pop	r16
    3d6c:	ff 90       	pop	r15
    3d6e:	ef 90       	pop	r14
    3d70:	df 90       	pop	r13
    3d72:	cf 90       	pop	r12
    3d74:	bf 90       	pop	r11
    3d76:	af 90       	pop	r10
    3d78:	9f 90       	pop	r9
    3d7a:	8f 90       	pop	r8
    3d7c:	7f 90       	pop	r7
    3d7e:	6f 90       	pop	r6
    3d80:	5f 90       	pop	r5
    3d82:	4f 90       	pop	r4
    3d84:	3f 90       	pop	r3
    3d86:	2f 90       	pop	r2
    3d88:	08 95       	ret

00003d8a <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    3d8a:	08 95       	ret

00003d8c <vApplicationMallocFailedHook>:
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    3d8c:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    3d8e:	2f 9a       	sbi	0x05, 7	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3d90:	2f ef       	ldi	r18, 0xFF	; 255
    3d92:	80 e7       	ldi	r24, 0x70	; 112
    3d94:	92 e0       	ldi	r25, 0x02	; 2
    3d96:	21 50       	subi	r18, 0x01	; 1
    3d98:	80 40       	sbci	r24, 0x00	; 0
    3d9a:	90 40       	sbci	r25, 0x00	; 0
    3d9c:	e1 f7       	brne	.-8      	; 0x3d96 <vApplicationMallocFailedHook+0xa>
    3d9e:	00 c0       	rjmp	.+0      	; 0x3da0 <vApplicationMallocFailedHook+0x14>
    3da0:	00 00       	nop
    for(;;)
    {
        _delay_ms(50);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED fast blink.
    3da2:	1f 9a       	sbi	0x03, 7	; 3
    3da4:	f5 cf       	rjmp	.-22     	; 0x3d90 <vApplicationMallocFailedHook+0x4>

00003da6 <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook( TaskHandle_t xTask, portCHAR *pcTaskName ) __attribute__((weak));

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)), portCHAR *pcTaskName __attribute__((unused))  )
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    3da6:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    3da8:	2f 9a       	sbi	0x05, 7	; 5
    3daa:	2f ef       	ldi	r18, 0xFF	; 255
    3dac:	87 ea       	ldi	r24, 0xA7	; 167
    3dae:	91 e6       	ldi	r25, 0x61	; 97
    3db0:	21 50       	subi	r18, 0x01	; 1
    3db2:	80 40       	sbci	r24, 0x00	; 0
    3db4:	90 40       	sbci	r25, 0x00	; 0
    3db6:	e1 f7       	brne	.-8      	; 0x3db0 <vApplicationStackOverflowHook+0xa>
    3db8:	00 c0       	rjmp	.+0      	; 0x3dba <vApplicationStackOverflowHook+0x14>
    3dba:	00 00       	nop
    for(;;)
    {
        _delay_ms(2000);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED slow blink.
    3dbc:	1f 9a       	sbi	0x03, 7	; 3
    3dbe:	f5 cf       	rjmp	.-22     	; 0x3daa <vApplicationStackOverflowHook+0x4>

00003dc0 <create_tasks_and_semaphores>:
// Prototype for LoRaWAN handler
void lora_handler_create(UBaseType_t lora_handler_task_priority);

/*-----------------------------------------------------------*/
void create_tasks_and_semaphores(void)
{
    3dc0:	8f 92       	push	r8
    3dc2:	9f 92       	push	r9
    3dc4:	af 92       	push	r10
    3dc6:	bf 92       	push	r11
    3dc8:	cf 92       	push	r12
    3dca:	df 92       	push	r13
    3dcc:	ef 92       	push	r14
    3dce:	ff 92       	push	r15
    3dd0:	0f 93       	push	r16
    3dd2:	1f 93       	push	r17
    3dd4:	cf 93       	push	r28
    3dd6:	df 93       	push	r29
	//xMessageBuffer = xMessageBufferCreate(100);
	//_semaphore = xSemaphoreCreateMutex();
	
	//_downlinkMessagebuffer = xMessageBufferCreate(sizeof(lora_payload_t)*2);
	
	configuration_create();
    3dd8:	0e 94 43 03 	call	0x686	; 0x686 <configuration_create>
	
	humAndTempReader_t humidityAndTemperature = humAndTempReader_create(TASK_HUMIDITY_SENSOR_PRIORITY, HUMIDITY_TASK_STACK, 
    3ddc:	e0 90 69 1a 	lds	r14, 0x1A69	; 0x801a69 <readyEventGroup>
    3de0:	f0 90 6a 1a 	lds	r15, 0x1A6A	; 0x801a6a <readyEventGroup+0x1>
    3de4:	40 91 83 1a 	lds	r20, 0x1A83	; 0x801a83 <startMeasureEventGroup>
    3de8:	50 91 84 1a 	lds	r21, 0x1A84	; 0x801a84 <startMeasureEventGroup+0x1>
    3dec:	a1 2c       	mov	r10, r1
    3dee:	b1 2c       	mov	r11, r1
    3df0:	65 01       	movw	r12, r10
    3df2:	68 94       	set
    3df4:	a4 f8       	bld	r10, 4
    3df6:	01 e0       	ldi	r16, 0x01	; 1
    3df8:	10 e0       	ldi	r17, 0x00	; 0
    3dfa:	20 e0       	ldi	r18, 0x00	; 0
    3dfc:	30 e0       	ldi	r19, 0x00	; 0
    3dfe:	60 ec       	ldi	r22, 0xC0	; 192
    3e00:	82 e0       	ldi	r24, 0x02	; 2
    3e02:	0e 94 ba 06 	call	0xd74	; 0xd74 <humAndTempReader_create>
    3e06:	c8 2f       	mov	r28, r24
    3e08:	d9 2f       	mov	r29, r25
	startMeasureEventGroup, BIT_MEASURE_HUMIDITY, readyEventGroup, BIT_DONE_MEASURE_HUMIDITY);
	
	co2reader_t co2reader = co2Reader_create(TASK_CO2_SENSOR_PRIORITY, CO2_TASK_STACK, startMeasureEventGroup, BIT_MEASURE_CO2,
    3e0a:	e0 90 69 1a 	lds	r14, 0x1A69	; 0x801a69 <readyEventGroup>
    3e0e:	f0 90 6a 1a 	lds	r15, 0x1A6A	; 0x801a6a <readyEventGroup+0x1>
    3e12:	40 91 83 1a 	lds	r20, 0x1A83	; 0x801a83 <startMeasureEventGroup>
    3e16:	50 91 84 1a 	lds	r21, 0x1A84	; 0x801a84 <startMeasureEventGroup+0x1>
    3e1a:	a1 2c       	mov	r10, r1
    3e1c:	b1 2c       	mov	r11, r1
    3e1e:	65 01       	movw	r12, r10
    3e20:	68 94       	set
    3e22:	a5 f8       	bld	r10, 5
    3e24:	08 e0       	ldi	r16, 0x08	; 8
    3e26:	10 e0       	ldi	r17, 0x00	; 0
    3e28:	20 e0       	ldi	r18, 0x00	; 0
    3e2a:	30 e0       	ldi	r19, 0x00	; 0
    3e2c:	60 ec       	ldi	r22, 0xC0	; 192
    3e2e:	82 e0       	ldi	r24, 0x02	; 2
    3e30:	0e 94 86 02 	call	0x50c	; 0x50c <co2Reader_create>
    3e34:	4c 01       	movw	r8, r24
	
	//co2reader_t co2reader = NULL;
	
	
	
	soundReader_t soundReader = soundReader_create(TASK_SOUND_SENSOR_PRIORITY, SOUND_TASK_STACK, startMeasureEventGroup, BIT_MEASURE_SOUND,
    3e36:	e0 90 69 1a 	lds	r14, 0x1A69	; 0x801a69 <readyEventGroup>
    3e3a:	f0 90 6a 1a 	lds	r15, 0x1A6A	; 0x801a6a <readyEventGroup+0x1>
    3e3e:	40 91 83 1a 	lds	r20, 0x1A83	; 0x801a83 <startMeasureEventGroup>
    3e42:	50 91 84 1a 	lds	r21, 0x1A84	; 0x801a84 <startMeasureEventGroup+0x1>
    3e46:	a1 2c       	mov	r10, r1
    3e48:	b1 2c       	mov	r11, r1
    3e4a:	65 01       	movw	r12, r10
    3e4c:	68 94       	set
    3e4e:	a6 f8       	bld	r10, 6
    3e50:	04 e0       	ldi	r16, 0x04	; 4
    3e52:	10 e0       	ldi	r17, 0x00	; 0
    3e54:	20 e0       	ldi	r18, 0x00	; 0
    3e56:	30 e0       	ldi	r19, 0x00	; 0
    3e58:	60 ec       	ldi	r22, 0xC0	; 192
    3e5a:	82 e0       	ldi	r24, 0x02	; 2
    3e5c:	0e 94 9a 07 	call	0xf34	; 0xf34 <soundReader_create>
    3e60:	18 2f       	mov	r17, r24
    3e62:	09 2f       	mov	r16, r25
	readyEventGroup, BIT_DONE_MEASURE_SOUND);	
	//soundReader_t soundReader = NULL;
	
	servo_initialise();
    3e64:	0e 94 8d 07 	call	0xf1a	; 0xf1a <servo_initialise>
	
	device_create(TASK_DEVICE_PRIORITY, DEVICE_TASK_STACK, startMeasureEventGroup, ALL_BIT_MEASURE,
    3e68:	e0 90 69 1a 	lds	r14, 0x1A69	; 0x801a69 <readyEventGroup>
    3e6c:	f0 90 6a 1a 	lds	r15, 0x1A6A	; 0x801a6a <readyEventGroup+0x1>
    3e70:	40 91 83 1a 	lds	r20, 0x1A83	; 0x801a83 <startMeasureEventGroup>
    3e74:	50 91 84 1a 	lds	r21, 0x1A84	; 0x801a84 <startMeasureEventGroup+0x1>
    3e78:	1f 92       	push	r1
    3e7a:	1f 92       	push	r1
    3e7c:	1f 92       	push	r1
    3e7e:	82 e0       	ldi	r24, 0x02	; 2
    3e80:	8f 93       	push	r24
    3e82:	80 91 6c 1a 	lds	r24, 0x1A6C	; 0x801a6c <waitEventGroup+0x1>
    3e86:	8f 93       	push	r24
    3e88:	80 91 6b 1a 	lds	r24, 0x1A6B	; 0x801a6b <waitEventGroup>
    3e8c:	8f 93       	push	r24
    3e8e:	80 91 66 1a 	lds	r24, 0x1A66	; 0x801a66 <xMessageBuffer+0x1>
    3e92:	8f 93       	push	r24
    3e94:	80 91 65 1a 	lds	r24, 0x1A65	; 0x801a65 <xMessageBuffer>
    3e98:	8f 93       	push	r24
    3e9a:	0f 93       	push	r16
    3e9c:	1f 93       	push	r17
    3e9e:	df 93       	push	r29
    3ea0:	cf 93       	push	r28
    3ea2:	0f 2e       	mov	r0, r31
    3ea4:	f0 e7       	ldi	r31, 0x70	; 112
    3ea6:	af 2e       	mov	r10, r31
    3ea8:	b1 2c       	mov	r11, r1
    3eaa:	c1 2c       	mov	r12, r1
    3eac:	d1 2c       	mov	r13, r1
    3eae:	f0 2d       	mov	r31, r0
    3eb0:	0d e0       	ldi	r16, 0x0D	; 13
    3eb2:	10 e0       	ldi	r17, 0x00	; 0
    3eb4:	20 e0       	ldi	r18, 0x00	; 0
    3eb6:	30 e0       	ldi	r19, 0x00	; 0
    3eb8:	60 ec       	ldi	r22, 0xC0	; 192
    3eba:	84 e0       	ldi	r24, 0x04	; 4
    3ebc:	0e 94 53 04 	call	0x8a6	; 0x8a6 <device_create>
	readyEventGroup, ALL_BIT_DONE_MEASURE, co2reader, humidityAndTemperature,soundReader, xMessageBuffer, waitEventGroup, DEVICE_SET_BIT);
	
	lora_UpLinkHandler_create(TASK_LORA_DRIVER_PRIORITY,xMessageBuffer, waitEventGroup, DEVICE_SET_BIT);
    3ec0:	40 91 6b 1a 	lds	r20, 0x1A6B	; 0x801a6b <waitEventGroup>
    3ec4:	50 91 6c 1a 	lds	r21, 0x1A6C	; 0x801a6c <waitEventGroup+0x1>
    3ec8:	60 91 65 1a 	lds	r22, 0x1A65	; 0x801a65 <xMessageBuffer>
    3ecc:	70 91 66 1a 	lds	r23, 0x1A66	; 0x801a66 <xMessageBuffer+0x1>
    3ed0:	02 e0       	ldi	r16, 0x02	; 2
    3ed2:	10 e0       	ldi	r17, 0x00	; 0
    3ed4:	20 e0       	ldi	r18, 0x00	; 0
    3ed6:	30 e0       	ldi	r19, 0x00	; 0
    3ed8:	81 e0       	ldi	r24, 0x01	; 1
    3eda:	0e 94 56 08 	call	0x10ac	; 0x10ac <lora_UpLinkHandler_create>
	lora_DownLinkHandler_create(TASK_LORA_DRIVER_PRIORITYDOWN,_downlinkMessagebuffer);
    3ede:	60 91 67 1a 	lds	r22, 0x1A67	; 0x801a67 <_downlinkMessagebuffer>
    3ee2:	70 91 68 1a 	lds	r23, 0x1A68	; 0x801a68 <_downlinkMessagebuffer+0x1>
    3ee6:	81 e0       	ldi	r24, 0x01	; 1
    3ee8:	0e 94 10 06 	call	0xc20	; 0xc20 <lora_DownLinkHandler_create>
}
    3eec:	8d b7       	in	r24, 0x3d	; 61
    3eee:	9e b7       	in	r25, 0x3e	; 62
    3ef0:	0c 96       	adiw	r24, 0x0c	; 12
    3ef2:	0f b6       	in	r0, 0x3f	; 63
    3ef4:	f8 94       	cli
    3ef6:	9e bf       	out	0x3e, r25	; 62
    3ef8:	0f be       	out	0x3f, r0	; 63
    3efa:	8d bf       	out	0x3d, r24	; 61
    3efc:	df 91       	pop	r29
    3efe:	cf 91       	pop	r28
    3f00:	1f 91       	pop	r17
    3f02:	0f 91       	pop	r16
    3f04:	ff 90       	pop	r15
    3f06:	ef 90       	pop	r14
    3f08:	df 90       	pop	r13
    3f0a:	cf 90       	pop	r12
    3f0c:	bf 90       	pop	r11
    3f0e:	af 90       	pop	r10
    3f10:	9f 90       	pop	r9
    3f12:	8f 90       	pop	r8
    3f14:	08 95       	ret

00003f16 <initialiseSystem>:

/*-----------------------------------------------------------*/
void initialiseSystem()
{
	startMeasureEventGroup = xEventGroupCreate();
    3f16:	0e 94 b3 09 	call	0x1366	; 0x1366 <xEventGroupCreate>
    3f1a:	90 93 84 1a 	sts	0x1A84, r25	; 0x801a84 <startMeasureEventGroup+0x1>
    3f1e:	80 93 83 1a 	sts	0x1A83, r24	; 0x801a83 <startMeasureEventGroup>
	readyEventGroup = xEventGroupCreate();
    3f22:	0e 94 b3 09 	call	0x1366	; 0x1366 <xEventGroupCreate>
    3f26:	90 93 6a 1a 	sts	0x1A6A, r25	; 0x801a6a <readyEventGroup+0x1>
    3f2a:	80 93 69 1a 	sts	0x1A69, r24	; 0x801a69 <readyEventGroup>
	waitEventGroup = xEventGroupCreate();
    3f2e:	0e 94 b3 09 	call	0x1366	; 0x1366 <xEventGroupCreate>
    3f32:	90 93 6c 1a 	sts	0x1A6C, r25	; 0x801a6c <waitEventGroup+0x1>
    3f36:	80 93 6b 1a 	sts	0x1A6B, r24	; 0x801a6b <waitEventGroup>

	xMessageBuffer = xMessageBufferCreate(100);
    3f3a:	41 e0       	ldi	r20, 0x01	; 1
    3f3c:	60 e0       	ldi	r22, 0x00	; 0
    3f3e:	70 e0       	ldi	r23, 0x00	; 0
    3f40:	84 e6       	ldi	r24, 0x64	; 100
    3f42:	90 e0       	ldi	r25, 0x00	; 0
    3f44:	0e 94 05 13 	call	0x260a	; 0x260a <xStreamBufferGenericCreate>
    3f48:	90 93 66 1a 	sts	0x1A66, r25	; 0x801a66 <xMessageBuffer+0x1>
    3f4c:	80 93 65 1a 	sts	0x1A65, r24	; 0x801a65 <xMessageBuffer>

	_downlinkMessagebuffer = xMessageBufferCreate(sizeof(lora_payload_t)*2);
    3f50:	41 e0       	ldi	r20, 0x01	; 1
    3f52:	60 e0       	ldi	r22, 0x00	; 0
    3f54:	70 e0       	ldi	r23, 0x00	; 0
    3f56:	8c e2       	ldi	r24, 0x2C	; 44
    3f58:	90 e0       	ldi	r25, 0x00	; 0
    3f5a:	0e 94 05 13 	call	0x260a	; 0x260a <xStreamBufferGenericCreate>
    3f5e:	90 93 68 1a 	sts	0x1A68, r25	; 0x801a68 <_downlinkMessagebuffer+0x1>
    3f62:	80 93 67 1a 	sts	0x1A67, r24	; 0x801a67 <_downlinkMessagebuffer>
	// Set output ports for leds used in the example
	DDRA |= _BV(DDA0) | _BV(DDA7);
    3f66:	81 b1       	in	r24, 0x01	; 1
    3f68:	81 68       	ori	r24, 0x81	; 129
    3f6a:	81 b9       	out	0x01, r24	; 1
	//// Initialise the trace-driver to be used together with the R2R-Network
	//trace_init();
	// Make it possible to use stdio on COM port 0 (USB) on Arduino board - Setting 57600,8,N,1
	stdioCreate(ser_USART0);
    3f6c:	80 e0       	ldi	r24, 0x00	; 0
    3f6e:	0e 94 c0 2b 	call	0x5780	; 0x5780 <stdioCreate>
	
	
	
	// vvvvvvvvvvvvvvvvv BELOW IS LoRaWAN initialisation vvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
	// Initialise the HAL layer and use 5 for LED driver priority
	hal_create(5);
    3f72:	85 e0       	ldi	r24, 0x05	; 5
    3f74:	11 d0       	rcall	.+34     	; 0x3f98 <hal_create>
	// Initialise the LoRaWAN driver with a down-link buffer
	
	
	lora_driver_create(LORA_USART, _downlinkMessagebuffer);
    3f76:	60 91 67 1a 	lds	r22, 0x1A67	; 0x801a67 <_downlinkMessagebuffer>
    3f7a:	70 91 68 1a 	lds	r23, 0x1A68	; 0x801a68 <_downlinkMessagebuffer+0x1>
    3f7e:	81 e0       	ldi	r24, 0x01	; 1
	// Create LoRaWAN task and start it up with priority 3 
	
	hih8120Create();
    3f80:	c3 d3       	rcall	.+1926   	; 0x4708 <lora_driver_create>
    3f82:	69 c0       	rjmp	.+210    	; 0x4056 <hih8120Create>
    3f84:	08 95       	ret

00003f86 <main>:
	
}
/*-----------------------------------------------------------*/
int main(void)
{
	initialiseSystem(); // Must be done as the very first thing!!
    3f86:	c7 df       	rcall	.-114    	; 0x3f16 <initialiseSystem>
	create_tasks_and_semaphores();
    3f88:	1b df       	rcall	.-458    	; 0x3dc0 <create_tasks_and_semaphores>
    3f8a:	89 ed       	ldi	r24, 0xD9	; 217
	printf("Program Started!!\n");
    3f8c:	94 e0       	ldi	r25, 0x04	; 4
    3f8e:	0e 94 e9 31 	call	0x63d2	; 0x63d2 <puts>
    3f92:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <vTaskStartScheduler>
	vTaskStartScheduler(); // Initialise and run the freeRTOS scheduler. Execution should never return from here.
    3f96:	ff cf       	rjmp	.-2      	; 0x3f96 <main+0x10>

00003f98 <hal_create>:
    3f98:	e5 e8       	ldi	r30, 0x85	; 133
    3f9a:	fa e1       	ldi	r31, 0x1A	; 26
    3f9c:	29 ed       	ldi	r18, 0xD9	; 217
    3f9e:	36 e2       	ldi	r19, 0x26	; 38
    3fa0:	31 83       	std	Z+1, r19	; 0x01
    3fa2:	20 83       	st	Z, r18
    3fa4:	2c ed       	ldi	r18, 0xDC	; 220
    3fa6:	36 e2       	ldi	r19, 0x26	; 38
    3fa8:	33 83       	std	Z+3, r19	; 0x03
    3faa:	22 83       	std	Z+2, r18	; 0x02
    3fac:	27 ee       	ldi	r18, 0xE7	; 231
    3fae:	36 e2       	ldi	r19, 0x26	; 38
    3fb0:	35 83       	std	Z+5, r19	; 0x05
    3fb2:	24 83       	std	Z+4, r18	; 0x04
    3fb4:	2b ee       	ldi	r18, 0xEB	; 235
    3fb6:	36 e2       	ldi	r19, 0x26	; 38
    3fb8:	37 83       	std	Z+7, r19	; 0x07
    3fba:	26 83       	std	Z+6, r18	; 0x06
    3fbc:	21 ef       	ldi	r18, 0xF1	; 241
    3fbe:	36 e2       	ldi	r19, 0x26	; 38
    3fc0:	31 87       	std	Z+9, r19	; 0x09
    3fc2:	20 87       	std	Z+8, r18	; 0x08
    3fc4:	2d ef       	ldi	r18, 0xFD	; 253
    3fc6:	36 e2       	ldi	r19, 0x26	; 38
    3fc8:	33 87       	std	Z+11, r19	; 0x0b
    3fca:	22 87       	std	Z+10, r18	; 0x0a
    3fcc:	22 e0       	ldi	r18, 0x02	; 2
    3fce:	37 e2       	ldi	r19, 0x27	; 39
    3fd0:	35 87       	std	Z+13, r19	; 0x0d
    3fd2:	24 87       	std	Z+12, r18	; 0x0c
    3fd4:	2e e0       	ldi	r18, 0x0E	; 14
    3fd6:	37 e2       	ldi	r19, 0x27	; 39
    3fd8:	37 87       	std	Z+15, r19	; 0x0f
    3fda:	26 87       	std	Z+14, r18	; 0x0e
    3fdc:	2e ee       	ldi	r18, 0xEE	; 238
    3fde:	36 e2       	ldi	r19, 0x26	; 38
    3fe0:	31 8b       	std	Z+17, r19	; 0x11
    3fe2:	20 8b       	std	Z+16, r18	; 0x10
    3fe4:	23 e1       	ldi	r18, 0x13	; 19
    3fe6:	37 e2       	ldi	r19, 0x27	; 39
    3fe8:	33 8b       	std	Z+19, r19	; 0x13
    3fea:	22 8b       	std	Z+18, r18	; 0x12
    3fec:	20 e2       	ldi	r18, 0x20	; 32
    3fee:	37 e2       	ldi	r19, 0x27	; 39
    3ff0:	35 8b       	std	Z+21, r19	; 0x15
    3ff2:	24 8b       	std	Z+20, r18	; 0x14
    3ff4:	68 2f       	mov	r22, r24
    3ff6:	cf 01       	movw	r24, r30
    3ff8:	53 c1       	rjmp	.+678    	; 0x42a0 <led_create>
    3ffa:	08 95       	ret

00003ffc <_hihTwiCallback>:
    3ffc:	65 30       	cpi	r22, 0x05	; 5
    3ffe:	f1 f4       	brne	.+60     	; 0x403c <_hihTwiCallback+0x40>
    4000:	fa 01       	movw	r30, r20
    4002:	80 81       	ld	r24, Z
    4004:	8f 73       	andi	r24, 0x3F	; 63
    4006:	90 e0       	ldi	r25, 0x00	; 0
    4008:	98 2f       	mov	r25, r24
    400a:	88 27       	eor	r24, r24
    400c:	21 81       	ldd	r18, Z+1	; 0x01
    400e:	82 2b       	or	r24, r18
    4010:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <_hum+0x1>
    4014:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <_hum>
    4018:	82 81       	ldd	r24, Z+2	; 0x02
    401a:	f0 e4       	ldi	r31, 0x40	; 64
    401c:	8f 9f       	mul	r24, r31
    401e:	c0 01       	movw	r24, r0
    4020:	11 24       	eor	r1, r1
    4022:	fa 01       	movw	r30, r20
    4024:	23 81       	ldd	r18, Z+3	; 0x03
    4026:	26 95       	lsr	r18
    4028:	26 95       	lsr	r18
    402a:	82 2b       	or	r24, r18
    402c:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <_temp+0x1>
    4030:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <_temp>
    4034:	81 e0       	ldi	r24, 0x01	; 1
    4036:	80 93 09 19 	sts	0x1909, r24	; 0x801909 <_measuringIsReady>
    403a:	08 95       	ret
    403c:	64 30       	cpi	r22, 0x04	; 4
    403e:	51 f0       	breq	.+20     	; 0x4054 <_hihTwiCallback+0x58>
    4040:	80 e0       	ldi	r24, 0x00	; 0
    4042:	90 e4       	ldi	r25, 0x40	; 64
    4044:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <_temp+0x1>
    4048:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <_temp>
    404c:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <_hum+0x1>
    4050:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <_hum>
    4054:	08 95       	ret

00004056 <hih8120Create>:
    4056:	0f 93       	push	r16
    4058:	1f 93       	push	r17
    405a:	0e ef       	ldi	r16, 0xFE	; 254
    405c:	1f e1       	ldi	r17, 0x1F	; 31
    405e:	20 e0       	ldi	r18, 0x00	; 0
    4060:	34 e2       	ldi	r19, 0x24	; 36
    4062:	44 ef       	ldi	r20, 0xF4	; 244
    4064:	50 e0       	ldi	r21, 0x00	; 0
    4066:	60 e0       	ldi	r22, 0x00	; 0
    4068:	87 e2       	ldi	r24, 0x27	; 39
    406a:	0e 94 fa 2b 	call	0x57f4	; 0x57f4 <twiCreate>
    406e:	90 93 0b 19 	sts	0x190B, r25	; 0x80190b <_hih8120Handler+0x1>
    4072:	80 93 0a 19 	sts	0x190A, r24	; 0x80190a <_hih8120Handler>
    4076:	21 e0       	ldi	r18, 0x01	; 1
    4078:	89 2b       	or	r24, r25
    407a:	09 f0       	breq	.+2      	; 0x407e <hih8120Create+0x28>
    407c:	20 e0       	ldi	r18, 0x00	; 0
    407e:	82 2f       	mov	r24, r18
    4080:	1f 91       	pop	r17
    4082:	0f 91       	pop	r16
    4084:	08 95       	ret

00004086 <hih8120IsReady>:
    4086:	80 91 09 19 	lds	r24, 0x1909	; 0x801909 <_measuringIsReady>
    408a:	08 95       	ret

0000408c <hih8120Wakeup>:
    408c:	80 91 0a 19 	lds	r24, 0x190A	; 0x80190a <_hih8120Handler>
    4090:	90 91 0b 19 	lds	r25, 0x190B	; 0x80190b <_hih8120Handler+0x1>
    4094:	00 97       	sbiw	r24, 0x00	; 0
    4096:	59 f0       	breq	.+22     	; 0x40ae <hih8120Wakeup+0x22>
    4098:	40 e0       	ldi	r20, 0x00	; 0
    409a:	60 e0       	ldi	r22, 0x00	; 0
    409c:	70 e0       	ldi	r23, 0x00	; 0
    409e:	0e 94 4b 2c 	call	0x5896	; 0x5896 <twiTransmit>
    40a2:	84 30       	cpi	r24, 0x04	; 4
    40a4:	31 f4       	brne	.+12     	; 0x40b2 <hih8120Wakeup+0x26>
    40a6:	10 92 09 19 	sts	0x1909, r1	; 0x801909 <_measuringIsReady>
    40aa:	80 e0       	ldi	r24, 0x00	; 0
    40ac:	08 95       	ret
    40ae:	82 e0       	ldi	r24, 0x02	; 2
    40b0:	08 95       	ret
    40b2:	83 e0       	ldi	r24, 0x03	; 3
    40b4:	08 95       	ret

000040b6 <hih8120Meassure>:
    40b6:	80 91 0a 19 	lds	r24, 0x190A	; 0x80190a <_hih8120Handler>
    40ba:	90 91 0b 19 	lds	r25, 0x190B	; 0x80190b <_hih8120Handler+0x1>
    40be:	00 97       	sbiw	r24, 0x00	; 0
    40c0:	39 f0       	breq	.+14     	; 0x40d0 <hih8120Meassure+0x1a>
    40c2:	64 e0       	ldi	r22, 0x04	; 4
    40c4:	0e 94 97 2c 	call	0x592e	; 0x592e <twiReceive>
    40c8:	85 30       	cpi	r24, 0x05	; 5
    40ca:	21 f0       	breq	.+8      	; 0x40d4 <hih8120Meassure+0x1e>
    40cc:	83 e0       	ldi	r24, 0x03	; 3
    40ce:	08 95       	ret
    40d0:	82 e0       	ldi	r24, 0x02	; 2
    40d2:	08 95       	ret
    40d4:	80 e0       	ldi	r24, 0x00	; 0
    40d6:	08 95       	ret

000040d8 <hih8120GetHumidity>:
    40d8:	60 91 0c 02 	lds	r22, 0x020C	; 0x80020c <_hum>
    40dc:	70 91 0d 02 	lds	r23, 0x020D	; 0x80020d <_hum+0x1>
    40e0:	80 e0       	ldi	r24, 0x00	; 0
    40e2:	90 e0       	ldi	r25, 0x00	; 0
    40e4:	0e 94 a1 2e 	call	0x5d42	; 0x5d42 <__floatunsisf>
    40e8:	20 e0       	ldi	r18, 0x00	; 0
    40ea:	30 e0       	ldi	r19, 0x00	; 0
    40ec:	48 ec       	ldi	r20, 0xC8	; 200
    40ee:	52 e4       	ldi	r21, 0x42	; 66
    40f0:	0e 94 2f 2f 	call	0x5e5e	; 0x5e5e <__mulsf3>
    40f4:	20 e0       	ldi	r18, 0x00	; 0
    40f6:	38 ef       	ldi	r19, 0xF8	; 248
    40f8:	4f e7       	ldi	r20, 0x7F	; 127
    40fa:	56 e4       	ldi	r21, 0x46	; 70
    40fc:	0c 94 08 2e 	jmp	0x5c10	; 0x5c10 <__divsf3>
    4100:	08 95       	ret

00004102 <hih8120GetHumidityPercent_x10>:
    4102:	ea df       	rcall	.-44     	; 0x40d8 <hih8120GetHumidity>
    4104:	20 e0       	ldi	r18, 0x00	; 0
    4106:	30 e0       	ldi	r19, 0x00	; 0
    4108:	40 e2       	ldi	r20, 0x20	; 32
    410a:	51 e4       	ldi	r21, 0x41	; 65
    410c:	0e 94 2f 2f 	call	0x5e5e	; 0x5e5e <__mulsf3>
    4110:	0e 94 75 2e 	call	0x5cea	; 0x5cea <__fixunssfsi>
    4114:	cb 01       	movw	r24, r22
    4116:	08 95       	ret

00004118 <hih8120GetTemperature>:
    4118:	60 91 0a 02 	lds	r22, 0x020A	; 0x80020a <_temp>
    411c:	70 91 0b 02 	lds	r23, 0x020B	; 0x80020b <_temp+0x1>
    4120:	80 e0       	ldi	r24, 0x00	; 0
    4122:	90 e0       	ldi	r25, 0x00	; 0
    4124:	0e 94 a1 2e 	call	0x5d42	; 0x5d42 <__floatunsisf>
    4128:	20 e0       	ldi	r18, 0x00	; 0
    412a:	30 e0       	ldi	r19, 0x00	; 0
    412c:	45 e2       	ldi	r20, 0x25	; 37
    412e:	53 e4       	ldi	r21, 0x43	; 67
    4130:	0e 94 2f 2f 	call	0x5e5e	; 0x5e5e <__mulsf3>
    4134:	20 e0       	ldi	r18, 0x00	; 0
    4136:	38 ef       	ldi	r19, 0xF8	; 248
    4138:	4f e7       	ldi	r20, 0x7F	; 127
    413a:	56 e4       	ldi	r21, 0x46	; 70
    413c:	0e 94 08 2e 	call	0x5c10	; 0x5c10 <__divsf3>
    4140:	20 e0       	ldi	r18, 0x00	; 0
    4142:	30 e0       	ldi	r19, 0x00	; 0
    4144:	40 e2       	ldi	r20, 0x20	; 32
    4146:	52 e4       	ldi	r21, 0x42	; 66
    4148:	0c 94 a3 2d 	jmp	0x5b46	; 0x5b46 <__subsf3>
    414c:	08 95       	ret

0000414e <hih8120GetTemperature_x10>:
    414e:	e4 df       	rcall	.-56     	; 0x4118 <hih8120GetTemperature>
    4150:	20 e0       	ldi	r18, 0x00	; 0
    4152:	30 e0       	ldi	r19, 0x00	; 0
    4154:	40 e2       	ldi	r20, 0x20	; 32
    4156:	51 e4       	ldi	r21, 0x41	; 65
    4158:	0e 94 2f 2f 	call	0x5e5e	; 0x5e5e <__mulsf3>
    415c:	0e 94 70 2e 	call	0x5ce0	; 0x5ce0 <__fixsfsi>
    4160:	cb 01       	movw	r24, r22
    4162:	08 95       	ret

00004164 <_turn_off>:
    4164:	cf 93       	push	r28
    4166:	df 93       	push	r29
    4168:	90 e0       	ldi	r25, 0x00	; 0
    416a:	fc 01       	movw	r30, r24
    416c:	ee 0f       	add	r30, r30
    416e:	ff 1f       	adc	r31, r31
    4170:	e8 0f       	add	r30, r24
    4172:	f9 1f       	adc	r31, r25
    4174:	ee 0f       	add	r30, r30
    4176:	ff 1f       	adc	r31, r31
    4178:	e4 5f       	subi	r30, 0xF4	; 244
    417a:	f6 4e       	sbci	r31, 0xE6	; 230
    417c:	23 81       	ldd	r18, Z+3	; 0x03
    417e:	21 11       	cpse	r18, r1
    4180:	0a c0       	rjmp	.+20     	; 0x4196 <_turn_off+0x32>
    4182:	ef 01       	movw	r28, r30
    4184:	e0 91 8d 1a 	lds	r30, 0x1A8D	; 0x801a8d <register_access+0x8>
    4188:	f0 91 8e 1a 	lds	r31, 0x1A8E	; 0x801a8e <register_access+0x9>
    418c:	6a 81       	ldd	r22, Y+2	; 0x02
    418e:	88 81       	ld	r24, Y
    4190:	99 81       	ldd	r25, Y+1	; 0x01
    4192:	19 95       	eicall
    4194:	12 c0       	rjmp	.+36     	; 0x41ba <_turn_off+0x56>
    4196:	dc 01       	movw	r26, r24
    4198:	aa 0f       	add	r26, r26
    419a:	bb 1f       	adc	r27, r27
    419c:	ed 01       	movw	r28, r26
    419e:	c8 0f       	add	r28, r24
    41a0:	d9 1f       	adc	r29, r25
    41a2:	cc 0f       	add	r28, r28
    41a4:	dd 1f       	adc	r29, r29
    41a6:	c4 5f       	subi	r28, 0xF4	; 244
    41a8:	d6 4e       	sbci	r29, 0xE6	; 230
    41aa:	e0 91 97 1a 	lds	r30, 0x1A97	; 0x801a97 <register_access+0x12>
    41ae:	f0 91 98 1a 	lds	r31, 0x1A98	; 0x801a98 <register_access+0x13>
    41b2:	6a 81       	ldd	r22, Y+2	; 0x02
    41b4:	88 81       	ld	r24, Y
    41b6:	99 81       	ldd	r25, Y+1	; 0x01
    41b8:	19 95       	eicall
    41ba:	df 91       	pop	r29
    41bc:	cf 91       	pop	r28
    41be:	08 95       	ret

000041c0 <_turn_on>:
    41c0:	cf 93       	push	r28
    41c2:	df 93       	push	r29
    41c4:	90 e0       	ldi	r25, 0x00	; 0
    41c6:	fc 01       	movw	r30, r24
    41c8:	ee 0f       	add	r30, r30
    41ca:	ff 1f       	adc	r31, r31
    41cc:	e8 0f       	add	r30, r24
    41ce:	f9 1f       	adc	r31, r25
    41d0:	ee 0f       	add	r30, r30
    41d2:	ff 1f       	adc	r31, r31
    41d4:	e4 5f       	subi	r30, 0xF4	; 244
    41d6:	f6 4e       	sbci	r31, 0xE6	; 230
    41d8:	23 81       	ldd	r18, Z+3	; 0x03
    41da:	21 11       	cpse	r18, r1
    41dc:	0a c0       	rjmp	.+20     	; 0x41f2 <_turn_on+0x32>
    41de:	ef 01       	movw	r28, r30
    41e0:	e0 91 97 1a 	lds	r30, 0x1A97	; 0x801a97 <register_access+0x12>
    41e4:	f0 91 98 1a 	lds	r31, 0x1A98	; 0x801a98 <register_access+0x13>
    41e8:	6a 81       	ldd	r22, Y+2	; 0x02
    41ea:	88 81       	ld	r24, Y
    41ec:	99 81       	ldd	r25, Y+1	; 0x01
    41ee:	19 95       	eicall
    41f0:	12 c0       	rjmp	.+36     	; 0x4216 <_turn_on+0x56>
    41f2:	dc 01       	movw	r26, r24
    41f4:	aa 0f       	add	r26, r26
    41f6:	bb 1f       	adc	r27, r27
    41f8:	ed 01       	movw	r28, r26
    41fa:	c8 0f       	add	r28, r24
    41fc:	d9 1f       	adc	r29, r25
    41fe:	cc 0f       	add	r28, r28
    4200:	dd 1f       	adc	r29, r29
    4202:	c4 5f       	subi	r28, 0xF4	; 244
    4204:	d6 4e       	sbci	r29, 0xE6	; 230
    4206:	e0 91 8d 1a 	lds	r30, 0x1A8D	; 0x801a8d <register_access+0x8>
    420a:	f0 91 8e 1a 	lds	r31, 0x1A8E	; 0x801a8e <register_access+0x9>
    420e:	6a 81       	ldd	r22, Y+2	; 0x02
    4210:	88 81       	ld	r24, Y
    4212:	99 81       	ldd	r25, Y+1	; 0x01
    4214:	19 95       	eicall
    4216:	df 91       	pop	r29
    4218:	cf 91       	pop	r28
    421a:	08 95       	ret

0000421c <_hal_led_task>:
    421c:	0f 2e       	mov	r0, r31
    421e:	f5 e8       	ldi	r31, 0x85	; 133
    4220:	cf 2e       	mov	r12, r31
    4222:	fa e1       	ldi	r31, 0x1A	; 26
    4224:	df 2e       	mov	r13, r31
    4226:	f0 2d       	mov	r31, r0
    4228:	04 e0       	ldi	r16, 0x04	; 4
    422a:	cc e0       	ldi	r28, 0x0C	; 12
    422c:	d9 e1       	ldi	r29, 0x19	; 25
    422e:	10 e0       	ldi	r17, 0x00	; 0
    4230:	8c 81       	ldd	r24, Y+4	; 0x04
    4232:	81 30       	cpi	r24, 0x01	; 1
    4234:	69 f0       	breq	.+26     	; 0x4250 <_hal_led_task+0x34>
    4236:	e8 f0       	brcs	.+58     	; 0x4272 <_hal_led_task+0x56>
    4238:	82 30       	cpi	r24, 0x02	; 2
    423a:	39 f5       	brne	.+78     	; 0x428a <_hal_led_task+0x6e>
    423c:	d6 01       	movw	r26, r12
    423e:	1c 96       	adiw	r26, 0x0c	; 12
    4240:	ed 91       	ld	r30, X+
    4242:	fc 91       	ld	r31, X
    4244:	1d 97       	sbiw	r26, 0x0d	; 13
    4246:	6a 81       	ldd	r22, Y+2	; 0x02
    4248:	88 81       	ld	r24, Y
    424a:	99 81       	ldd	r25, Y+1	; 0x01
    424c:	19 95       	eicall
    424e:	1d c0       	rjmp	.+58     	; 0x428a <_hal_led_task+0x6e>
    4250:	8d 81       	ldd	r24, Y+5	; 0x05
    4252:	8f 5f       	subi	r24, 0xFF	; 255
    4254:	8a 30       	cpi	r24, 0x0A	; 10
    4256:	10 f4       	brcc	.+4      	; 0x425c <_hal_led_task+0x40>
    4258:	8d 83       	std	Y+5, r24	; 0x05
    425a:	17 c0       	rjmp	.+46     	; 0x428a <_hal_led_task+0x6e>
    425c:	1d 82       	std	Y+5, r1	; 0x05
    425e:	d6 01       	movw	r26, r12
    4260:	1c 96       	adiw	r26, 0x0c	; 12
    4262:	ed 91       	ld	r30, X+
    4264:	fc 91       	ld	r31, X
    4266:	1d 97       	sbiw	r26, 0x0d	; 13
    4268:	6a 81       	ldd	r22, Y+2	; 0x02
    426a:	88 81       	ld	r24, Y
    426c:	99 81       	ldd	r25, Y+1	; 0x01
    426e:	19 95       	eicall
    4270:	0c c0       	rjmp	.+24     	; 0x428a <_hal_led_task+0x6e>
    4272:	8d 81       	ldd	r24, Y+5	; 0x05
    4274:	88 23       	and	r24, r24
    4276:	31 f0       	breq	.+12     	; 0x4284 <_hal_led_task+0x68>
    4278:	81 2f       	mov	r24, r17
    427a:	a2 df       	rcall	.-188    	; 0x41c0 <_turn_on>
    427c:	8d 81       	ldd	r24, Y+5	; 0x05
    427e:	81 50       	subi	r24, 0x01	; 1
    4280:	8d 83       	std	Y+5, r24	; 0x05
    4282:	03 c0       	rjmp	.+6      	; 0x428a <_hal_led_task+0x6e>
    4284:	0c 83       	std	Y+4, r16	; 0x04
    4286:	81 2f       	mov	r24, r17
    4288:	6d df       	rcall	.-294    	; 0x4164 <_turn_off>
    428a:	1f 5f       	subi	r17, 0xFF	; 255
    428c:	26 96       	adiw	r28, 0x06	; 6
    428e:	14 30       	cpi	r17, 0x04	; 4
    4290:	79 f6       	brne	.-98     	; 0x4230 <_hal_led_task+0x14>
    4292:	65 e0       	ldi	r22, 0x05	; 5
    4294:	70 e0       	ldi	r23, 0x00	; 0
    4296:	80 e0       	ldi	r24, 0x00	; 0
    4298:	90 e0       	ldi	r25, 0x00	; 0
    429a:	0e 94 6d 18 	call	0x30da	; 0x30da <vTaskDelay>
    429e:	c5 cf       	rjmp	.-118    	; 0x422a <_hal_led_task+0xe>

000042a0 <led_create>:
    42a0:	cf 92       	push	r12
    42a2:	df 92       	push	r13
    42a4:	ef 92       	push	r14
    42a6:	ff 92       	push	r15
    42a8:	0f 93       	push	r16
    42aa:	1f 93       	push	r17
    42ac:	cf 93       	push	r28
    42ae:	df 93       	push	r29
    42b0:	06 2f       	mov	r16, r22
    42b2:	0f 2e       	mov	r0, r31
    42b4:	f5 e8       	ldi	r31, 0x85	; 133
    42b6:	ef 2e       	mov	r14, r31
    42b8:	fa e1       	ldi	r31, 0x1A	; 26
    42ba:	ff 2e       	mov	r15, r31
    42bc:	f0 2d       	mov	r31, r0
    42be:	d7 01       	movw	r26, r14
    42c0:	18 96       	adiw	r26, 0x08	; 8
    42c2:	ed 91       	ld	r30, X+
    42c4:	fc 91       	ld	r31, X
    42c6:	19 97       	sbiw	r26, 0x09	; 9
    42c8:	66 e0       	ldi	r22, 0x06	; 6
    42ca:	87 e2       	ldi	r24, 0x27	; 39
    42cc:	90 e0       	ldi	r25, 0x00	; 0
    42ce:	19 95       	eicall
    42d0:	cc e0       	ldi	r28, 0x0C	; 12
    42d2:	d9 e1       	ldi	r29, 0x19	; 25
    42d4:	0f 2e       	mov	r0, r31
    42d6:	f8 e2       	ldi	r31, 0x28	; 40
    42d8:	cf 2e       	mov	r12, r31
    42da:	d1 2c       	mov	r13, r1
    42dc:	f0 2d       	mov	r31, r0
    42de:	d9 82       	std	Y+1, r13	; 0x01
    42e0:	c8 82       	st	Y, r12
    42e2:	86 e0       	ldi	r24, 0x06	; 6
    42e4:	8a 83       	std	Y+2, r24	; 0x02
    42e6:	1b 82       	std	Y+3, r1	; 0x03
    42e8:	14 e0       	ldi	r17, 0x04	; 4
    42ea:	1c 83       	std	Y+4, r17	; 0x04
    42ec:	80 e0       	ldi	r24, 0x00	; 0
    42ee:	3a df       	rcall	.-396    	; 0x4164 <_turn_off>
    42f0:	d7 01       	movw	r26, r14
    42f2:	18 96       	adiw	r26, 0x08	; 8
    42f4:	ed 91       	ld	r30, X+
    42f6:	fc 91       	ld	r31, X
    42f8:	19 97       	sbiw	r26, 0x09	; 9
    42fa:	67 e0       	ldi	r22, 0x07	; 7
    42fc:	87 e2       	ldi	r24, 0x27	; 39
    42fe:	90 e0       	ldi	r25, 0x00	; 0
    4300:	19 95       	eicall
    4302:	df 82       	std	Y+7, r13	; 0x07
    4304:	ce 82       	std	Y+6, r12	; 0x06
    4306:	87 e0       	ldi	r24, 0x07	; 7
    4308:	88 87       	std	Y+8, r24	; 0x08
    430a:	19 86       	std	Y+9, r1	; 0x09
    430c:	1a 87       	std	Y+10, r17	; 0x0a
    430e:	81 e0       	ldi	r24, 0x01	; 1
    4310:	29 df       	rcall	.-430    	; 0x4164 <_turn_off>
    4312:	d7 01       	movw	r26, r14
    4314:	18 96       	adiw	r26, 0x08	; 8
    4316:	ed 91       	ld	r30, X+
    4318:	fc 91       	ld	r31, X
    431a:	19 97       	sbiw	r26, 0x09	; 9
    431c:	65 e0       	ldi	r22, 0x05	; 5
    431e:	83 e3       	ldi	r24, 0x33	; 51
    4320:	90 e0       	ldi	r25, 0x00	; 0
    4322:	19 95       	eicall
    4324:	d7 01       	movw	r26, r14
    4326:	18 96       	adiw	r26, 0x08	; 8
    4328:	ed 91       	ld	r30, X+
    432a:	fc 91       	ld	r31, X
    432c:	19 97       	sbiw	r26, 0x09	; 9
    432e:	61 e0       	ldi	r22, 0x01	; 1
    4330:	84 e3       	ldi	r24, 0x34	; 52
    4332:	90 e0       	ldi	r25, 0x00	; 0
    4334:	19 95       	eicall
    4336:	84 e3       	ldi	r24, 0x34	; 52
    4338:	90 e0       	ldi	r25, 0x00	; 0
    433a:	9d 87       	std	Y+13, r25	; 0x0d
    433c:	8c 87       	std	Y+12, r24	; 0x0c
    433e:	85 e0       	ldi	r24, 0x05	; 5
    4340:	8e 87       	std	Y+14, r24	; 0x0e
    4342:	1f 86       	std	Y+15, r1	; 0x0f
    4344:	18 8b       	std	Y+16, r17	; 0x10
    4346:	82 e0       	ldi	r24, 0x02	; 2
    4348:	0d df       	rcall	.-486    	; 0x4164 <_turn_off>
    434a:	d7 01       	movw	r26, r14
    434c:	18 96       	adiw	r26, 0x08	; 8
    434e:	ed 91       	ld	r30, X+
    4350:	fc 91       	ld	r31, X
    4352:	19 97       	sbiw	r26, 0x09	; 9
    4354:	64 e0       	ldi	r22, 0x04	; 4
    4356:	81 e0       	ldi	r24, 0x01	; 1
    4358:	91 e0       	ldi	r25, 0x01	; 1
    435a:	19 95       	eicall
    435c:	d7 01       	movw	r26, r14
    435e:	18 96       	adiw	r26, 0x08	; 8
    4360:	ed 91       	ld	r30, X+
    4362:	fc 91       	ld	r31, X
    4364:	19 97       	sbiw	r26, 0x09	; 9
    4366:	61 e0       	ldi	r22, 0x01	; 1
    4368:	82 e0       	ldi	r24, 0x02	; 2
    436a:	91 e0       	ldi	r25, 0x01	; 1
    436c:	19 95       	eicall
    436e:	82 e0       	ldi	r24, 0x02	; 2
    4370:	91 e0       	ldi	r25, 0x01	; 1
    4372:	9b 8b       	std	Y+19, r25	; 0x13
    4374:	8a 8b       	std	Y+18, r24	; 0x12
    4376:	1c 8b       	std	Y+20, r17	; 0x14
    4378:	1d 8a       	std	Y+21, r1	; 0x15
    437a:	1e 8b       	std	Y+22, r17	; 0x16
    437c:	83 e0       	ldi	r24, 0x03	; 3
    437e:	f2 de       	rcall	.-540    	; 0x4164 <_turn_off>
    4380:	e1 2c       	mov	r14, r1
    4382:	f1 2c       	mov	r15, r1
    4384:	20 e0       	ldi	r18, 0x00	; 0
    4386:	30 e0       	ldi	r19, 0x00	; 0
    4388:	40 ec       	ldi	r20, 0xC0	; 192
    438a:	50 e0       	ldi	r21, 0x00	; 0
    438c:	6b ee       	ldi	r22, 0xEB	; 235
    438e:	74 e0       	ldi	r23, 0x04	; 4
    4390:	8e e0       	ldi	r24, 0x0E	; 14
    4392:	91 e2       	ldi	r25, 0x21	; 33
    4394:	0e 94 ab 15 	call	0x2b56	; 0x2b56 <xTaskCreate>
    4398:	df 91       	pop	r29
    439a:	cf 91       	pop	r28
    439c:	1f 91       	pop	r17
    439e:	0f 91       	pop	r16
    43a0:	ff 90       	pop	r15
    43a2:	ef 90       	pop	r14
    43a4:	df 90       	pop	r13
    43a6:	cf 90       	pop	r12
    43a8:	08 95       	ret

000043aa <led_slow_blink>:
    43aa:	0f 93       	push	r16
    43ac:	1f 93       	push	r17
    43ae:	cf 93       	push	r28
    43b0:	df 93       	push	r29
    43b2:	c8 2f       	mov	r28, r24
    43b4:	d0 e0       	ldi	r29, 0x00	; 0
    43b6:	8e 01       	movw	r16, r28
    43b8:	00 0f       	add	r16, r16
    43ba:	11 1f       	adc	r17, r17
    43bc:	d8 01       	movw	r26, r16
    43be:	ac 0f       	add	r26, r28
    43c0:	bd 1f       	adc	r27, r29
    43c2:	aa 0f       	add	r26, r26
    43c4:	bb 1f       	adc	r27, r27
    43c6:	a4 5f       	subi	r26, 0xF4	; 244
    43c8:	b6 4e       	sbci	r27, 0xE6	; 230
    43ca:	e0 91 91 1a 	lds	r30, 0x1A91	; 0x801a91 <register_access+0xc>
    43ce:	f0 91 92 1a 	lds	r31, 0x1A92	; 0x801a92 <register_access+0xd>
    43d2:	12 96       	adiw	r26, 0x02	; 2
    43d4:	6c 91       	ld	r22, X
    43d6:	12 97       	sbiw	r26, 0x02	; 2
    43d8:	8d 91       	ld	r24, X+
    43da:	9c 91       	ld	r25, X
    43dc:	19 95       	eicall
    43de:	c0 0f       	add	r28, r16
    43e0:	d1 1f       	adc	r29, r17
    43e2:	cc 0f       	add	r28, r28
    43e4:	dd 1f       	adc	r29, r29
    43e6:	c4 5f       	subi	r28, 0xF4	; 244
    43e8:	d6 4e       	sbci	r29, 0xE6	; 230
    43ea:	81 e0       	ldi	r24, 0x01	; 1
    43ec:	8c 83       	std	Y+4, r24	; 0x04
    43ee:	df 91       	pop	r29
    43f0:	cf 91       	pop	r28
    43f2:	1f 91       	pop	r17
    43f4:	0f 91       	pop	r16
    43f6:	08 95       	ret

000043f8 <led_fast_blink>:
    43f8:	0f 93       	push	r16
    43fa:	1f 93       	push	r17
    43fc:	cf 93       	push	r28
    43fe:	df 93       	push	r29
    4400:	c8 2f       	mov	r28, r24
    4402:	d0 e0       	ldi	r29, 0x00	; 0
    4404:	8e 01       	movw	r16, r28
    4406:	00 0f       	add	r16, r16
    4408:	11 1f       	adc	r17, r17
    440a:	d8 01       	movw	r26, r16
    440c:	ac 0f       	add	r26, r28
    440e:	bd 1f       	adc	r27, r29
    4410:	aa 0f       	add	r26, r26
    4412:	bb 1f       	adc	r27, r27
    4414:	a4 5f       	subi	r26, 0xF4	; 244
    4416:	b6 4e       	sbci	r27, 0xE6	; 230
    4418:	e0 91 91 1a 	lds	r30, 0x1A91	; 0x801a91 <register_access+0xc>
    441c:	f0 91 92 1a 	lds	r31, 0x1A92	; 0x801a92 <register_access+0xd>
    4420:	12 96       	adiw	r26, 0x02	; 2
    4422:	6c 91       	ld	r22, X
    4424:	12 97       	sbiw	r26, 0x02	; 2
    4426:	8d 91       	ld	r24, X+
    4428:	9c 91       	ld	r25, X
    442a:	19 95       	eicall
    442c:	c0 0f       	add	r28, r16
    442e:	d1 1f       	adc	r29, r17
    4430:	cc 0f       	add	r28, r28
    4432:	dd 1f       	adc	r29, r29
    4434:	c4 5f       	subi	r28, 0xF4	; 244
    4436:	d6 4e       	sbci	r29, 0xE6	; 230
    4438:	82 e0       	ldi	r24, 0x02	; 2
    443a:	8c 83       	std	Y+4, r24	; 0x04
    443c:	df 91       	pop	r29
    443e:	cf 91       	pop	r28
    4440:	1f 91       	pop	r17
    4442:	0f 91       	pop	r16
    4444:	08 95       	ret

00004446 <led_led_on>:
    4446:	28 2f       	mov	r18, r24
    4448:	30 e0       	ldi	r19, 0x00	; 0
    444a:	f9 01       	movw	r30, r18
    444c:	ee 0f       	add	r30, r30
    444e:	ff 1f       	adc	r31, r31
    4450:	e2 0f       	add	r30, r18
    4452:	f3 1f       	adc	r31, r19
    4454:	ee 0f       	add	r30, r30
    4456:	ff 1f       	adc	r31, r31
    4458:	e4 5f       	subi	r30, 0xF4	; 244
    445a:	f6 4e       	sbci	r31, 0xE6	; 230
    445c:	93 e0       	ldi	r25, 0x03	; 3
    445e:	94 83       	std	Z+4, r25	; 0x04
    4460:	af ce       	rjmp	.-674    	; 0x41c0 <_turn_on>
    4462:	08 95       	ret

00004464 <led_led_off>:
    4464:	28 2f       	mov	r18, r24
    4466:	30 e0       	ldi	r19, 0x00	; 0
    4468:	f9 01       	movw	r30, r18
    446a:	ee 0f       	add	r30, r30
    446c:	ff 1f       	adc	r31, r31
    446e:	e2 0f       	add	r30, r18
    4470:	f3 1f       	adc	r31, r19
    4472:	ee 0f       	add	r30, r30
    4474:	ff 1f       	adc	r31, r31
    4476:	e4 5f       	subi	r30, 0xF4	; 244
    4478:	f6 4e       	sbci	r31, 0xE6	; 230
    447a:	94 e0       	ldi	r25, 0x04	; 4
    447c:	94 83       	std	Z+4, r25	; 0x04
    447e:	72 ce       	rjmp	.-796    	; 0x4164 <_turn_off>
    4480:	08 95       	ret

00004482 <led_long_puls>:
    4482:	90 e0       	ldi	r25, 0x00	; 0
    4484:	fc 01       	movw	r30, r24
    4486:	ee 0f       	add	r30, r30
    4488:	ff 1f       	adc	r31, r31
    448a:	df 01       	movw	r26, r30
    448c:	a8 0f       	add	r26, r24
    448e:	b9 1f       	adc	r27, r25
    4490:	aa 0f       	add	r26, r26
    4492:	bb 1f       	adc	r27, r27
    4494:	a4 5f       	subi	r26, 0xF4	; 244
    4496:	b6 4e       	sbci	r27, 0xE6	; 230
    4498:	24 e0       	ldi	r18, 0x04	; 4
    449a:	15 96       	adiw	r26, 0x05	; 5
    449c:	2c 93       	st	X, r18
    449e:	15 97       	sbiw	r26, 0x05	; 5
    44a0:	fd 01       	movw	r30, r26
    44a2:	14 82       	std	Z+4, r1	; 0x04
    44a4:	08 95       	ret

000044a6 <led_short_puls>:
    44a6:	90 e0       	ldi	r25, 0x00	; 0
    44a8:	fc 01       	movw	r30, r24
    44aa:	ee 0f       	add	r30, r30
    44ac:	ff 1f       	adc	r31, r31
    44ae:	df 01       	movw	r26, r30
    44b0:	a8 0f       	add	r26, r24
    44b2:	b9 1f       	adc	r27, r25
    44b4:	aa 0f       	add	r26, r26
    44b6:	bb 1f       	adc	r27, r27
    44b8:	a4 5f       	subi	r26, 0xF4	; 244
    44ba:	b6 4e       	sbci	r27, 0xE6	; 230
    44bc:	21 e0       	ldi	r18, 0x01	; 1
    44be:	15 96       	adiw	r26, 0x05	; 5
    44c0:	2c 93       	st	X, r18
    44c2:	15 97       	sbiw	r26, 0x05	; 5
    44c4:	fd 01       	movw	r30, r26
    44c6:	14 82       	std	Z+4, r1	; 0x04
    44c8:	08 95       	ret

000044ca <_serial_call_back>:
    44ca:	0f 93       	push	r16
    44cc:	1f 93       	push	r17
    44ce:	cf 93       	push	r28
    44d0:	df 93       	push	r29
    44d2:	1f 92       	push	r1
    44d4:	1f 92       	push	r1
    44d6:	cd b7       	in	r28, 0x3d	; 61
    44d8:	de b7       	in	r29, 0x3e	; 62
    44da:	8c 01       	movw	r16, r24
    44dc:	19 82       	std	Y+1, r1	; 0x01
    44de:	2d c0       	rjmp	.+90     	; 0x453a <_serial_call_back+0x70>
    44e0:	e0 91 88 19 	lds	r30, 0x1988	; 0x801988 <rec_buf_inp.2947>
    44e4:	ec 32       	cpi	r30, 0x2C	; 44
    44e6:	50 f4       	brcc	.+20     	; 0x44fc <_serial_call_back+0x32>
    44e8:	81 e0       	ldi	r24, 0x01	; 1
    44ea:	8e 0f       	add	r24, r30
    44ec:	80 93 88 19 	sts	0x1988, r24	; 0x801988 <rec_buf_inp.2947>
    44f0:	f0 e0       	ldi	r31, 0x00	; 0
    44f2:	e6 54       	subi	r30, 0x46	; 70
    44f4:	f6 4e       	sbci	r31, 0xE6	; 230
    44f6:	8a 81       	ldd	r24, Y+2	; 0x02
    44f8:	80 83       	st	Z, r24
    44fa:	02 c0       	rjmp	.+4      	; 0x4500 <_serial_call_back+0x36>
    44fc:	10 92 88 19 	sts	0x1988, r1	; 0x801988 <rec_buf_inp.2947>
    4500:	8a 81       	ldd	r24, Y+2	; 0x02
    4502:	8a 30       	cpi	r24, 0x0A	; 10
    4504:	d1 f4       	brne	.+52     	; 0x453a <_serial_call_back+0x70>
    4506:	40 91 88 19 	lds	r20, 0x1988	; 0x801988 <rec_buf_inp.2947>
    450a:	50 e0       	ldi	r21, 0x00	; 0
    450c:	fa 01       	movw	r30, r20
    450e:	e8 54       	subi	r30, 0x48	; 72
    4510:	f6 4e       	sbci	r31, 0xE6	; 230
    4512:	10 82       	st	Z, r1
    4514:	41 50       	subi	r20, 0x01	; 1
    4516:	51 09       	sbc	r21, r1
    4518:	9e 01       	movw	r18, r28
    451a:	2f 5f       	subi	r18, 0xFF	; 255
    451c:	3f 4f       	sbci	r19, 0xFF	; 255
    451e:	6a eb       	ldi	r22, 0xBA	; 186
    4520:	79 e1       	ldi	r23, 0x19	; 25
    4522:	80 91 8b 19 	lds	r24, 0x198B	; 0x80198b <_serial_reply_buffer_handle>
    4526:	90 91 8c 19 	lds	r25, 0x198C	; 0x80198c <_serial_reply_buffer_handle+0x1>
    452a:	0e 94 1a 14 	call	0x2834	; 0x2834 <xStreamBufferSendFromISR>
    452e:	89 81       	ldd	r24, Y+1	; 0x01
    4530:	81 11       	cpse	r24, r1
    4532:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <vPortYield>
    4536:	10 92 88 19 	sts	0x1988, r1	; 0x801988 <rec_buf_inp.2947>
    453a:	be 01       	movw	r22, r28
    453c:	6e 5f       	subi	r22, 0xFE	; 254
    453e:	7f 4f       	sbci	r23, 0xFF	; 255
    4540:	c8 01       	movw	r24, r16
    4542:	8c d6       	rcall	.+3352   	; 0x525c <serial_get_byte>
    4544:	88 23       	and	r24, r24
    4546:	61 f2       	breq	.-104    	; 0x44e0 <_serial_call_back+0x16>
    4548:	0f 90       	pop	r0
    454a:	0f 90       	pop	r0
    454c:	df 91       	pop	r29
    454e:	cf 91       	pop	r28
    4550:	1f 91       	pop	r17
    4552:	0f 91       	pop	r16
    4554:	08 95       	ret

00004556 <_upload_message>:
    4556:	0f 93       	push	r16
    4558:	1f 93       	push	r17
    455a:	cf 93       	push	r28
    455c:	df 93       	push	r29
    455e:	8c 01       	movw	r16, r24
    4560:	eb 01       	movw	r28, r22
    4562:	80 91 8b 19 	lds	r24, 0x198B	; 0x80198b <_serial_reply_buffer_handle>
    4566:	90 91 8c 19 	lds	r25, 0x198C	; 0x80198c <_serial_reply_buffer_handle+0x1>
    456a:	0e 94 31 13 	call	0x2662	; 0x2662 <xStreamBufferReset>
    456e:	b8 01       	movw	r22, r16
    4570:	84 e2       	ldi	r24, 0x24	; 36
    4572:	99 e1       	ldi	r25, 0x19	; 25
    4574:	0e 94 b7 31 	call	0x636e	; 0x636e <strcpy>
    4578:	20 97       	sbiw	r28, 0x00	; 0
    457a:	79 f0       	breq	.+30     	; 0x459a <_upload_message+0x44>
    457c:	e4 e2       	ldi	r30, 0x24	; 36
    457e:	f9 e1       	ldi	r31, 0x19	; 25
    4580:	01 90       	ld	r0, Z+
    4582:	00 20       	and	r0, r0
    4584:	e9 f7       	brne	.-6      	; 0x4580 <_upload_message+0x2a>
    4586:	31 97       	sbiw	r30, 0x01	; 1
    4588:	80 e2       	ldi	r24, 0x20	; 32
    458a:	90 e0       	ldi	r25, 0x00	; 0
    458c:	91 83       	std	Z+1, r25	; 0x01
    458e:	80 83       	st	Z, r24
    4590:	be 01       	movw	r22, r28
    4592:	84 e2       	ldi	r24, 0x24	; 36
    4594:	99 e1       	ldi	r25, 0x19	; 25
    4596:	0e 94 ac 31 	call	0x6358	; 0x6358 <strcat>
    459a:	e4 e2       	ldi	r30, 0x24	; 36
    459c:	f9 e1       	ldi	r31, 0x19	; 25
    459e:	df 01       	movw	r26, r30
    45a0:	0d 90       	ld	r0, X+
    45a2:	00 20       	and	r0, r0
    45a4:	e9 f7       	brne	.-6      	; 0x45a0 <_upload_message+0x4a>
    45a6:	11 97       	sbiw	r26, 0x01	; 1
    45a8:	8d e0       	ldi	r24, 0x0D	; 13
    45aa:	9a e0       	ldi	r25, 0x0A	; 10
    45ac:	11 96       	adiw	r26, 0x01	; 1
    45ae:	9c 93       	st	X, r25
    45b0:	8e 93       	st	-X, r24
    45b2:	12 96       	adiw	r26, 0x02	; 2
    45b4:	1c 92       	st	X, r1
    45b6:	01 90       	ld	r0, Z+
    45b8:	00 20       	and	r0, r0
    45ba:	e9 f7       	brne	.-6      	; 0x45b6 <_upload_message+0x60>
    45bc:	31 97       	sbiw	r30, 0x01	; 1
    45be:	e4 52       	subi	r30, 0x24	; 36
    45c0:	f9 41       	sbci	r31, 0x19	; 25
    45c2:	ae 2f       	mov	r26, r30
    45c4:	84 e2       	ldi	r24, 0x24	; 36
    45c6:	99 e1       	ldi	r25, 0x19	; 25
    45c8:	ac 01       	movw	r20, r24
    45ca:	6a 2f       	mov	r22, r26
    45cc:	80 91 8d 19 	lds	r24, 0x198D	; 0x80198d <_rn2483_serial>
    45d0:	90 91 8e 19 	lds	r25, 0x198E	; 0x80198e <_rn2483_serial+0x1>
    45d4:	f3 d5       	rcall	.+3046   	; 0x51bc <serial_send_bytes>
    45d6:	81 11       	cpse	r24, r1
    45d8:	11 c0       	rjmp	.+34     	; 0x45fc <_upload_message+0xa6>
    45da:	08 e2       	ldi	r16, 0x28	; 40
    45dc:	15 e0       	ldi	r17, 0x05	; 5
    45de:	20 e0       	ldi	r18, 0x00	; 0
    45e0:	30 e0       	ldi	r19, 0x00	; 0
    45e2:	4d e2       	ldi	r20, 0x2D	; 45
    45e4:	50 e0       	ldi	r21, 0x00	; 0
    45e6:	64 e1       	ldi	r22, 0x14	; 20
    45e8:	7a e1       	ldi	r23, 0x1A	; 26
    45ea:	80 91 8b 19 	lds	r24, 0x198B	; 0x80198b <_serial_reply_buffer_handle>
    45ee:	90 91 8c 19 	lds	r25, 0x198C	; 0x80198c <_serial_reply_buffer_handle+0x1>
    45f2:	0e 94 5d 14 	call	0x28ba	; 0x28ba <xStreamBufferReceive>
    45f6:	84 e1       	ldi	r24, 0x14	; 20
    45f8:	9a e1       	ldi	r25, 0x1A	; 26
    45fa:	02 c0       	rjmp	.+4      	; 0x4600 <_upload_message+0xaa>
    45fc:	80 e0       	ldi	r24, 0x00	; 0
    45fe:	90 e0       	ldi	r25, 0x00	; 0
    4600:	df 91       	pop	r29
    4602:	cf 91       	pop	r28
    4604:	1f 91       	pop	r17
    4606:	0f 91       	pop	r16
    4608:	08 95       	ret

0000460a <_reply2return_code>:
    460a:	2f 92       	push	r2
    460c:	3f 92       	push	r3
    460e:	4f 92       	push	r4
    4610:	5f 92       	push	r5
    4612:	6f 92       	push	r6
    4614:	7f 92       	push	r7
    4616:	8f 92       	push	r8
    4618:	9f 92       	push	r9
    461a:	af 92       	push	r10
    461c:	bf 92       	push	r11
    461e:	cf 92       	push	r12
    4620:	df 92       	push	r13
    4622:	ef 92       	push	r14
    4624:	ff 92       	push	r15
    4626:	0f 93       	push	r16
    4628:	1f 93       	push	r17
    462a:	cf 93       	push	r28
    462c:	df 93       	push	r29
    462e:	5c 01       	movw	r10, r24
    4630:	fc 01       	movw	r30, r24
    4632:	01 90       	ld	r0, Z+
    4634:	00 20       	and	r0, r0
    4636:	e9 f7       	brne	.-6      	; 0x4632 <_reply2return_code+0x28>
    4638:	31 97       	sbiw	r30, 0x01	; 1
    463a:	6f 01       	movw	r12, r30
    463c:	c8 1a       	sub	r12, r24
    463e:	d9 0a       	sbc	r13, r25
    4640:	5c 2c       	mov	r5, r12
    4642:	0f 2e       	mov	r0, r31
    4644:	fc e8       	ldi	r31, 0x8C	; 140
    4646:	8f 2e       	mov	r8, r31
    4648:	f7 e0       	ldi	r31, 0x07	; 7
    464a:	9f 2e       	mov	r9, r31
    464c:	f0 2d       	mov	r31, r0
    464e:	e1 2c       	mov	r14, r1
    4650:	f1 2c       	mov	r15, r1
    4652:	4c 2c       	mov	r4, r12
    4654:	37 01       	movw	r6, r14
    4656:	f4 01       	movw	r30, r8
    4658:	01 81       	ldd	r16, Z+1	; 0x01
    465a:	12 81       	ldd	r17, Z+2	; 0x02
    465c:	e8 01       	movw	r28, r16
    465e:	09 90       	ld	r0, Y+
    4660:	00 20       	and	r0, r0
    4662:	e9 f7       	brne	.-6      	; 0x465e <_reply2return_code+0x54>
    4664:	21 97       	sbiw	r28, 0x01	; 1
    4666:	c0 1b       	sub	r28, r16
    4668:	d1 0b       	sbc	r29, r17
    466a:	3c 2e       	mov	r3, r28
    466c:	f9 e0       	ldi	r31, 0x09	; 9
    466e:	cf 16       	cp	r12, r31
    4670:	d1 04       	cpc	r13, r1
    4672:	58 f0       	brcs	.+22     	; 0x468a <_reply2return_code+0x80>
    4674:	f4 01       	movw	r30, r8
    4676:	20 80       	ld	r2, Z
    4678:	fe e0       	ldi	r31, 0x0E	; 14
    467a:	2f 12       	cpse	r2, r31
    467c:	06 c0       	rjmp	.+12     	; 0x468a <_reply2return_code+0x80>
    467e:	b8 01       	movw	r22, r16
    4680:	c5 01       	movw	r24, r10
    4682:	0e 94 87 31 	call	0x630e	; 0x630e <strcasestr>
    4686:	89 2b       	or	r24, r25
    4688:	09 f5       	brne	.+66     	; 0x46cc <_reply2return_code+0xc2>
    468a:	44 2d       	mov	r20, r4
    468c:	35 14       	cp	r3, r5
    468e:	08 f4       	brcc	.+2      	; 0x4692 <_reply2return_code+0x88>
    4690:	4c 2f       	mov	r20, r28
    4692:	50 e0       	ldi	r21, 0x00	; 0
    4694:	b8 01       	movw	r22, r16
    4696:	c5 01       	movw	r24, r10
    4698:	0e 94 be 31 	call	0x637c	; 0x637c <strncasecmp>
    469c:	89 2b       	or	r24, r25
    469e:	49 f4       	brne	.+18     	; 0x46b2 <_reply2return_code+0xa8>
    46a0:	f3 01       	movw	r30, r6
    46a2:	ee 0f       	add	r30, r30
    46a4:	ff 1f       	adc	r31, r31
    46a6:	e6 0d       	add	r30, r6
    46a8:	f7 1d       	adc	r31, r7
    46aa:	e4 57       	subi	r30, 0x74	; 116
    46ac:	f8 4f       	sbci	r31, 0xF8	; 248
    46ae:	20 80       	ld	r2, Z
    46b0:	0d c0       	rjmp	.+26     	; 0x46cc <_reply2return_code+0xc2>
    46b2:	8f ef       	ldi	r24, 0xFF	; 255
    46b4:	e8 1a       	sub	r14, r24
    46b6:	f8 0a       	sbc	r15, r24
    46b8:	e3 e0       	ldi	r30, 0x03	; 3
    46ba:	8e 0e       	add	r8, r30
    46bc:	91 1c       	adc	r9, r1
    46be:	f1 e1       	ldi	r31, 0x11	; 17
    46c0:	ef 16       	cp	r14, r31
    46c2:	f1 04       	cpc	r15, r1
    46c4:	39 f6       	brne	.-114    	; 0x4654 <_reply2return_code+0x4a>
    46c6:	68 94       	set
    46c8:	22 24       	eor	r2, r2
    46ca:	24 f8       	bld	r2, 4
    46cc:	82 2d       	mov	r24, r2
    46ce:	df 91       	pop	r29
    46d0:	cf 91       	pop	r28
    46d2:	1f 91       	pop	r17
    46d4:	0f 91       	pop	r16
    46d6:	ff 90       	pop	r15
    46d8:	ef 90       	pop	r14
    46da:	df 90       	pop	r13
    46dc:	cf 90       	pop	r12
    46de:	bf 90       	pop	r11
    46e0:	af 90       	pop	r10
    46e2:	9f 90       	pop	r9
    46e4:	8f 90       	pop	r8
    46e6:	7f 90       	pop	r7
    46e8:	6f 90       	pop	r6
    46ea:	5f 90       	pop	r5
    46ec:	4f 90       	pop	r4
    46ee:	3f 90       	pop	r3
    46f0:	2f 90       	pop	r2
    46f2:	08 95       	ret

000046f4 <_upload_message_rc>:
    46f4:	30 df       	rcall	.-416    	; 0x4556 <_upload_message>
    46f6:	89 cf       	rjmp	.-238    	; 0x460a <_reply2return_code>
    46f8:	08 95       	ret

000046fa <lora_driver_flush_buffers>:
    46fa:	80 91 8b 19 	lds	r24, 0x198B	; 0x80198b <_serial_reply_buffer_handle>
    46fe:	90 91 8c 19 	lds	r25, 0x198C	; 0x80198c <_serial_reply_buffer_handle+0x1>
    4702:	0c 94 31 13 	jmp	0x2662	; 0x2662 <xStreamBufferReset>
    4706:	08 95       	ret

00004708 <lora_driver_create>:
    4708:	8f 92       	push	r8
    470a:	9f 92       	push	r9
    470c:	af 92       	push	r10
    470e:	cf 92       	push	r12
    4710:	ef 92       	push	r14
    4712:	0f 93       	push	r16
    4714:	1f 93       	push	r17
    4716:	cf 93       	push	r28
    4718:	c8 2f       	mov	r28, r24
    471a:	8b 01       	movw	r16, r22
    471c:	41 e0       	ldi	r20, 0x01	; 1
    471e:	60 e0       	ldi	r22, 0x00	; 0
    4720:	70 e0       	ldi	r23, 0x00	; 0
    4722:	88 ec       	ldi	r24, 0xC8	; 200
    4724:	90 e0       	ldi	r25, 0x00	; 0
    4726:	0e 94 05 13 	call	0x260a	; 0x260a <xStreamBufferGenericCreate>
    472a:	90 93 8c 19 	sts	0x198C, r25	; 0x80198c <_serial_reply_buffer_handle+0x1>
    472e:	80 93 8b 19 	sts	0x198B, r24	; 0x80198b <_serial_reply_buffer_handle>
    4732:	10 93 8a 19 	sts	0x198A, r17	; 0x80198a <_downlinkMessageBuffer+0x1>
    4736:	00 93 89 19 	sts	0x1989, r16	; 0x801989 <_downlinkMessageBuffer>
    473a:	0f 2e       	mov	r0, r31
    473c:	f5 e6       	ldi	r31, 0x65	; 101
    473e:	8f 2e       	mov	r8, r31
    4740:	f2 e2       	ldi	r31, 0x22	; 34
    4742:	9f 2e       	mov	r9, r31
    4744:	f0 2d       	mov	r31, r0
    4746:	68 94       	set
    4748:	aa 24       	eor	r10, r10
    474a:	a6 f8       	bld	r10, 6
    474c:	68 94       	set
    474e:	cc 24       	eor	r12, r12
    4750:	c6 f8       	bld	r12, 6
    4752:	e1 2c       	mov	r14, r1
    4754:	00 e0       	ldi	r16, 0x00	; 0
    4756:	23 e0       	ldi	r18, 0x03	; 3
    4758:	40 e0       	ldi	r20, 0x00	; 0
    475a:	51 ee       	ldi	r21, 0xE1	; 225
    475c:	60 e0       	ldi	r22, 0x00	; 0
    475e:	70 e0       	ldi	r23, 0x00	; 0
    4760:	8c 2f       	mov	r24, r28
    4762:	71 d4       	rcall	.+2274   	; 0x5046 <serial_new_instance>
    4764:	90 93 8e 19 	sts	0x198E, r25	; 0x80198e <_rn2483_serial+0x1>
    4768:	80 93 8d 19 	sts	0x198D, r24	; 0x80198d <_rn2483_serial>
    476c:	e0 91 8d 1a 	lds	r30, 0x1A8D	; 0x801a8d <register_access+0x8>
    4770:	f0 91 8e 1a 	lds	r31, 0x1A8E	; 0x801a8e <register_access+0x9>
    4774:	64 e0       	ldi	r22, 0x04	; 4
    4776:	87 e0       	ldi	r24, 0x07	; 7
    4778:	91 e0       	ldi	r25, 0x01	; 1
    477a:	19 95       	eicall
    477c:	cf 91       	pop	r28
    477e:	1f 91       	pop	r17
    4780:	0f 91       	pop	r16
    4782:	ef 90       	pop	r14
    4784:	cf 90       	pop	r12
    4786:	af 90       	pop	r10
    4788:	9f 90       	pop	r9
    478a:	8f 90       	pop	r8
    478c:	08 95       	ret

0000478e <lora_driver_reset_rn2483>:
    478e:	88 23       	and	r24, r24
    4790:	49 f0       	breq	.+18     	; 0x47a4 <lora_driver_reset_rn2483+0x16>
    4792:	e0 91 97 1a 	lds	r30, 0x1A97	; 0x801a97 <register_access+0x12>
    4796:	f0 91 98 1a 	lds	r31, 0x1A98	; 0x801a98 <register_access+0x13>
    479a:	64 e0       	ldi	r22, 0x04	; 4
    479c:	88 e0       	ldi	r24, 0x08	; 8
    479e:	91 e0       	ldi	r25, 0x01	; 1
    47a0:	19 95       	eicall
    47a2:	08 95       	ret
    47a4:	e0 91 8d 1a 	lds	r30, 0x1A8D	; 0x801a8d <register_access+0x8>
    47a8:	f0 91 8e 1a 	lds	r31, 0x1A8E	; 0x801a8e <register_access+0x9>
    47ac:	64 e0       	ldi	r22, 0x04	; 4
    47ae:	88 e0       	ldi	r24, 0x08	; 8
    47b0:	91 e0       	ldi	r25, 0x01	; 1
    47b2:	19 95       	eicall
    47b4:	08 95       	ret

000047b6 <lora_driver_rn2483_factory_reset>:
    47b6:	60 e0       	ldi	r22, 0x00	; 0
    47b8:	70 e0       	ldi	r23, 0x00	; 0
    47ba:	82 e1       	ldi	r24, 0x12	; 18
    47bc:	95 e0       	ldi	r25, 0x05	; 5
    47be:	cb de       	rcall	.-618    	; 0x4556 <_upload_message>
    47c0:	e4 e1       	ldi	r30, 0x14	; 20
    47c2:	fa e1       	ldi	r31, 0x1A	; 26
    47c4:	01 90       	ld	r0, Z+
    47c6:	00 20       	and	r0, r0
    47c8:	e9 f7       	brne	.-6      	; 0x47c4 <lora_driver_rn2483_factory_reset+0xe>
    47ca:	31 97       	sbiw	r30, 0x01	; 1
    47cc:	e4 51       	subi	r30, 0x14	; 20
    47ce:	fa 41       	sbci	r31, 0x1A	; 26
    47d0:	81 e0       	ldi	r24, 0x01	; 1
    47d2:	75 97       	sbiw	r30, 0x15	; 21
    47d4:	08 f0       	brcs	.+2      	; 0x47d8 <lora_driver_rn2483_factory_reset+0x22>
    47d6:	80 e0       	ldi	r24, 0x00	; 0
    47d8:	08 95       	ret

000047da <lora_driver_get_rn2483_hweui>:
    47da:	cf 93       	push	r28
    47dc:	df 93       	push	r29
    47de:	ec 01       	movw	r28, r24
    47e0:	60 e0       	ldi	r22, 0x00	; 0
    47e2:	70 e0       	ldi	r23, 0x00	; 0
    47e4:	83 e2       	ldi	r24, 0x23	; 35
    47e6:	95 e0       	ldi	r25, 0x05	; 5
    47e8:	b6 de       	rcall	.-660    	; 0x4556 <_upload_message>
    47ea:	e4 e1       	ldi	r30, 0x14	; 20
    47ec:	fa e1       	ldi	r31, 0x1A	; 26
    47ee:	01 90       	ld	r0, Z+
    47f0:	00 20       	and	r0, r0
    47f2:	e9 f7       	brne	.-6      	; 0x47ee <lora_driver_get_rn2483_hweui+0x14>
    47f4:	e5 52       	subi	r30, 0x25	; 37
    47f6:	fa 41       	sbci	r31, 0x1A	; 26
    47f8:	39 f4       	brne	.+14     	; 0x4808 <lora_driver_get_rn2483_hweui+0x2e>
    47fa:	64 e1       	ldi	r22, 0x14	; 20
    47fc:	7a e1       	ldi	r23, 0x1A	; 26
    47fe:	ce 01       	movw	r24, r28
    4800:	0e 94 b7 31 	call	0x636e	; 0x636e <strcpy>
    4804:	80 e0       	ldi	r24, 0x00	; 0
    4806:	02 c0       	rjmp	.+4      	; 0x480c <lora_driver_get_rn2483_hweui+0x32>
    4808:	18 82       	st	Y, r1
    480a:	81 e0       	ldi	r24, 0x01	; 1
    480c:	df 91       	pop	r29
    480e:	cf 91       	pop	r28
    4810:	08 95       	ret

00004812 <lora_driver_set_device_identifier>:
    4812:	fc 01       	movw	r30, r24
    4814:	01 90       	ld	r0, Z+
    4816:	00 20       	and	r0, r0
    4818:	e9 f7       	brne	.-6      	; 0x4814 <lora_driver_set_device_identifier+0x2>
    481a:	9f 01       	movw	r18, r30
    481c:	21 51       	subi	r18, 0x11	; 17
    481e:	31 09       	sbc	r19, r1
    4820:	28 17       	cp	r18, r24
    4822:	39 07       	cpc	r19, r25
    4824:	29 f4       	brne	.+10     	; 0x4830 <lora_driver_set_device_identifier+0x1e>
    4826:	bc 01       	movw	r22, r24
    4828:	81 e5       	ldi	r24, 0x51	; 81
    482a:	95 e0       	ldi	r25, 0x05	; 5
    482c:	63 cf       	rjmp	.-314    	; 0x46f4 <_upload_message_rc>
    482e:	08 95       	ret
    4830:	89 e0       	ldi	r24, 0x09	; 9
    4832:	08 95       	ret

00004834 <lora_driver_set_application_identifier>:
    4834:	fc 01       	movw	r30, r24
    4836:	01 90       	ld	r0, Z+
    4838:	00 20       	and	r0, r0
    483a:	e9 f7       	brne	.-6      	; 0x4836 <lora_driver_set_application_identifier+0x2>
    483c:	9f 01       	movw	r18, r30
    483e:	21 51       	subi	r18, 0x11	; 17
    4840:	31 09       	sbc	r19, r1
    4842:	28 17       	cp	r18, r24
    4844:	39 07       	cpc	r19, r25
    4846:	29 f4       	brne	.+10     	; 0x4852 <lora_driver_set_application_identifier+0x1e>
    4848:	bc 01       	movw	r22, r24
    484a:	80 e6       	ldi	r24, 0x60	; 96
    484c:	95 e0       	ldi	r25, 0x05	; 5
    484e:	52 cf       	rjmp	.-348    	; 0x46f4 <_upload_message_rc>
    4850:	08 95       	ret
    4852:	89 e0       	ldi	r24, 0x09	; 9
    4854:	08 95       	ret

00004856 <lora_driver_set_application_key>:
    4856:	fc 01       	movw	r30, r24
    4858:	01 90       	ld	r0, Z+
    485a:	00 20       	and	r0, r0
    485c:	e9 f7       	brne	.-6      	; 0x4858 <lora_driver_set_application_key+0x2>
    485e:	9f 01       	movw	r18, r30
    4860:	21 52       	subi	r18, 0x21	; 33
    4862:	31 09       	sbc	r19, r1
    4864:	28 17       	cp	r18, r24
    4866:	39 07       	cpc	r19, r25
    4868:	29 f4       	brne	.+10     	; 0x4874 <lora_driver_set_application_key+0x1e>
    486a:	bc 01       	movw	r22, r24
    486c:	8f e6       	ldi	r24, 0x6F	; 111
    486e:	95 e0       	ldi	r25, 0x05	; 5
    4870:	41 cf       	rjmp	.-382    	; 0x46f4 <_upload_message_rc>
    4872:	08 95       	ret
    4874:	89 e0       	ldi	r24, 0x09	; 9
    4876:	08 95       	ret

00004878 <lora_driver_save_mac>:
    4878:	60 e0       	ldi	r22, 0x00	; 0
    487a:	70 e0       	ldi	r23, 0x00	; 0
    487c:	8e ea       	ldi	r24, 0xAE	; 174
    487e:	95 e0       	ldi	r25, 0x05	; 5
    4880:	39 cf       	rjmp	.-398    	; 0x46f4 <_upload_message_rc>
    4882:	08 95       	ret

00004884 <lora_driver_join>:
    4884:	0f 93       	push	r16
    4886:	1f 93       	push	r17
    4888:	e8 2f       	mov	r30, r24
    488a:	f0 e0       	ldi	r31, 0x00	; 0
    488c:	ee 0f       	add	r30, r30
    488e:	ff 1f       	adc	r31, r31
    4890:	e8 57       	subi	r30, 0x78	; 120
    4892:	f8 4f       	sbci	r31, 0xF8	; 248
    4894:	60 81       	ld	r22, Z
    4896:	71 81       	ldd	r23, Z+1	; 0x01
    4898:	87 eb       	ldi	r24, 0xB7	; 183
    489a:	95 e0       	ldi	r25, 0x05	; 5
    489c:	2b df       	rcall	.-426    	; 0x46f4 <_upload_message_rc>
    489e:	81 11       	cpse	r24, r1
    48a0:	14 c0       	rjmp	.+40     	; 0x48ca <lora_driver_join+0x46>
    48a2:	08 e2       	ldi	r16, 0x28	; 40
    48a4:	15 e0       	ldi	r17, 0x05	; 5
    48a6:	20 e0       	ldi	r18, 0x00	; 0
    48a8:	30 e0       	ldi	r19, 0x00	; 0
    48aa:	4d e2       	ldi	r20, 0x2D	; 45
    48ac:	50 e0       	ldi	r21, 0x00	; 0
    48ae:	64 e1       	ldi	r22, 0x14	; 20
    48b0:	7a e1       	ldi	r23, 0x1A	; 26
    48b2:	80 91 8b 19 	lds	r24, 0x198B	; 0x80198b <_serial_reply_buffer_handle>
    48b6:	90 91 8c 19 	lds	r25, 0x198C	; 0x80198c <_serial_reply_buffer_handle+0x1>
    48ba:	0e 94 5d 14 	call	0x28ba	; 0x28ba <xStreamBufferReceive>
    48be:	88 23       	and	r24, r24
    48c0:	21 f0       	breq	.+8      	; 0x48ca <lora_driver_join+0x46>
    48c2:	84 e1       	ldi	r24, 0x14	; 20
    48c4:	9a e1       	ldi	r25, 0x1A	; 26
    48c6:	a1 de       	rcall	.-702    	; 0x460a <_reply2return_code>
    48c8:	03 c0       	rjmp	.+6      	; 0x48d0 <lora_driver_join+0x4c>
    48ca:	84 e1       	ldi	r24, 0x14	; 20
    48cc:	9a e1       	ldi	r25, 0x1A	; 26
    48ce:	9d de       	rcall	.-710    	; 0x460a <_reply2return_code>
    48d0:	1f 91       	pop	r17
    48d2:	0f 91       	pop	r16
    48d4:	08 95       	ret

000048d6 <lora_driver_sent_upload_message>:
    48d6:	0f 93       	push	r16
    48d8:	1f 93       	push	r17
    48da:	cf 93       	push	r28
    48dc:	df 93       	push	r29
    48de:	1f 92       	push	r1
    48e0:	cd b7       	in	r28, 0x3d	; 61
    48e2:	de b7       	in	r29, 0x3e	; 62
    48e4:	db 01       	movw	r26, r22
    48e6:	11 96       	adiw	r26, 0x01	; 1
    48e8:	9c 91       	ld	r25, X
    48ea:	11 97       	sbiw	r26, 0x01	; 1
    48ec:	95 31       	cpi	r25, 0x15	; 21
    48ee:	08 f0       	brcs	.+2      	; 0x48f2 <lora_driver_sent_upload_message+0x1c>
    48f0:	b4 c0       	rjmp	.+360    	; 0x4a5a <lora_driver_sent_upload_message+0x184>
    48f2:	99 23       	and	r25, r25
    48f4:	81 f1       	breq	.+96     	; 0x4956 <lora_driver_sent_upload_message+0x80>
    48f6:	60 e0       	ldi	r22, 0x00	; 0
    48f8:	70 e0       	ldi	r23, 0x00	; 0
    48fa:	27 2f       	mov	r18, r23
    48fc:	30 e0       	ldi	r19, 0x00	; 0
    48fe:	46 2f       	mov	r20, r22
    4900:	50 e0       	ldi	r21, 0x00	; 0
    4902:	fd 01       	movw	r30, r26
    4904:	e4 0f       	add	r30, r20
    4906:	f5 1f       	adc	r31, r21
    4908:	92 81       	ldd	r25, Z+2	; 0x02
    490a:	92 95       	swap	r25
    490c:	9f 70       	andi	r25, 0x0F	; 15
    490e:	9a 30       	cpi	r25, 0x0A	; 10
    4910:	10 f0       	brcs	.+4      	; 0x4916 <lora_driver_sent_upload_message+0x40>
    4912:	99 5c       	subi	r25, 0xC9	; 201
    4914:	01 c0       	rjmp	.+2      	; 0x4918 <lora_driver_sent_upload_message+0x42>
    4916:	90 5d       	subi	r25, 0xD0	; 208
    4918:	f9 01       	movw	r30, r18
    491a:	eb 55       	subi	r30, 0x5B	; 91
    491c:	f6 4e       	sbci	r31, 0xE6	; 230
    491e:	90 83       	st	Z, r25
    4920:	2f 5f       	subi	r18, 0xFF	; 255
    4922:	3f 4f       	sbci	r19, 0xFF	; 255
    4924:	fd 01       	movw	r30, r26
    4926:	e4 0f       	add	r30, r20
    4928:	f5 1f       	adc	r31, r21
    492a:	92 81       	ldd	r25, Z+2	; 0x02
    492c:	9f 70       	andi	r25, 0x0F	; 15
    492e:	49 2f       	mov	r20, r25
    4930:	50 e0       	ldi	r21, 0x00	; 0
    4932:	4a 30       	cpi	r20, 0x0A	; 10
    4934:	51 05       	cpc	r21, r1
    4936:	14 f0       	brlt	.+4      	; 0x493c <lora_driver_sent_upload_message+0x66>
    4938:	99 5c       	subi	r25, 0xC9	; 201
    493a:	01 c0       	rjmp	.+2      	; 0x493e <lora_driver_sent_upload_message+0x68>
    493c:	90 5d       	subi	r25, 0xD0	; 208
    493e:	f9 01       	movw	r30, r18
    4940:	eb 55       	subi	r30, 0x5B	; 91
    4942:	f6 4e       	sbci	r31, 0xE6	; 230
    4944:	90 83       	st	Z, r25
    4946:	7e 5f       	subi	r23, 0xFE	; 254
    4948:	6f 5f       	subi	r22, 0xFF	; 255
    494a:	11 96       	adiw	r26, 0x01	; 1
    494c:	9c 91       	ld	r25, X
    494e:	11 97       	sbiw	r26, 0x01	; 1
    4950:	69 17       	cp	r22, r25
    4952:	98 f2       	brcs	.-90     	; 0x48fa <lora_driver_sent_upload_message+0x24>
    4954:	01 c0       	rjmp	.+2      	; 0x4958 <lora_driver_sent_upload_message+0x82>
    4956:	70 e0       	ldi	r23, 0x00	; 0
    4958:	e7 2f       	mov	r30, r23
    495a:	f0 e0       	ldi	r31, 0x00	; 0
    495c:	eb 55       	subi	r30, 0x5B	; 91
    495e:	f6 4e       	sbci	r31, 0xE6	; 230
    4960:	10 82       	st	Z, r1
    4962:	4c 91       	ld	r20, X
    4964:	81 11       	cpse	r24, r1
    4966:	03 c0       	rjmp	.+6      	; 0x496e <lora_driver_sent_upload_message+0x98>
    4968:	80 ec       	ldi	r24, 0xC0	; 192
    496a:	95 e0       	ldi	r25, 0x05	; 5
    496c:	02 c0       	rjmp	.+4      	; 0x4972 <lora_driver_sent_upload_message+0x9c>
    496e:	82 ec       	ldi	r24, 0xC2	; 194
    4970:	95 e0       	ldi	r25, 0x05	; 5
    4972:	25 ea       	ldi	r18, 0xA5	; 165
    4974:	39 e1       	ldi	r19, 0x19	; 25
    4976:	3f 93       	push	r19
    4978:	2f 93       	push	r18
    497a:	1f 92       	push	r1
    497c:	4f 93       	push	r20
    497e:	9f 93       	push	r25
    4980:	8f 93       	push	r24
    4982:	86 ec       	ldi	r24, 0xC6	; 198
    4984:	95 e0       	ldi	r25, 0x05	; 5
    4986:	9f 93       	push	r25
    4988:	8f 93       	push	r24
    498a:	87 ee       	ldi	r24, 0xE7	; 231
    498c:	99 e1       	ldi	r25, 0x19	; 25
    498e:	9f 93       	push	r25
    4990:	8f 93       	push	r24
    4992:	0e 94 19 32 	call	0x6432	; 0x6432 <sprintf>
    4996:	60 e0       	ldi	r22, 0x00	; 0
    4998:	70 e0       	ldi	r23, 0x00	; 0
    499a:	87 ee       	ldi	r24, 0xE7	; 231
    499c:	99 e1       	ldi	r25, 0x19	; 25
    499e:	aa de       	rcall	.-684    	; 0x46f4 <_upload_message_rc>
    49a0:	0f b6       	in	r0, 0x3f	; 63
    49a2:	f8 94       	cli
    49a4:	de bf       	out	0x3e, r29	; 62
    49a6:	0f be       	out	0x3f, r0	; 63
    49a8:	cd bf       	out	0x3d, r28	; 61
    49aa:	81 11       	cpse	r24, r1
    49ac:	59 c0       	rjmp	.+178    	; 0x4a60 <lora_driver_sent_upload_message+0x18a>
    49ae:	08 e2       	ldi	r16, 0x28	; 40
    49b0:	15 e0       	ldi	r17, 0x05	; 5
    49b2:	20 e0       	ldi	r18, 0x00	; 0
    49b4:	30 e0       	ldi	r19, 0x00	; 0
    49b6:	4d e2       	ldi	r20, 0x2D	; 45
    49b8:	50 e0       	ldi	r21, 0x00	; 0
    49ba:	64 e1       	ldi	r22, 0x14	; 20
    49bc:	7a e1       	ldi	r23, 0x1A	; 26
    49be:	80 91 8b 19 	lds	r24, 0x198B	; 0x80198b <_serial_reply_buffer_handle>
    49c2:	90 91 8c 19 	lds	r25, 0x198C	; 0x80198c <_serial_reply_buffer_handle+0x1>
    49c6:	0e 94 5d 14 	call	0x28ba	; 0x28ba <xStreamBufferReceive>
    49ca:	88 23       	and	r24, r24
    49cc:	09 f4       	brne	.+2      	; 0x49d0 <lora_driver_sent_upload_message+0xfa>
    49ce:	47 c0       	rjmp	.+142    	; 0x4a5e <lora_driver_sent_upload_message+0x188>
    49d0:	84 e1       	ldi	r24, 0x14	; 20
    49d2:	9a e1       	ldi	r25, 0x1A	; 26
    49d4:	1a de       	rcall	.-972    	; 0x460a <_reply2return_code>
    49d6:	8e 30       	cpi	r24, 0x0E	; 14
    49d8:	09 f0       	breq	.+2      	; 0x49dc <lora_driver_sent_upload_message+0x106>
    49da:	42 c0       	rjmp	.+132    	; 0x4a60 <lora_driver_sent_upload_message+0x18a>
    49dc:	87 e0       	ldi	r24, 0x07	; 7
    49de:	89 83       	std	Y+1, r24	; 0x01
    49e0:	80 91 89 19 	lds	r24, 0x1989	; 0x801989 <_downlinkMessageBuffer>
    49e4:	90 91 8a 19 	lds	r25, 0x198A	; 0x80198a <_downlinkMessageBuffer+0x1>
    49e8:	89 2b       	or	r24, r25
    49ea:	a9 f1       	breq	.+106    	; 0x4a56 <lora_driver_sent_upload_message+0x180>
    49ec:	be 01       	movw	r22, r28
    49ee:	6f 5f       	subi	r22, 0xFF	; 255
    49f0:	7f 4f       	sbci	r23, 0xFF	; 255
    49f2:	84 e1       	ldi	r24, 0x14	; 20
    49f4:	9a e1       	ldi	r25, 0x1A	; 26
    49f6:	68 d1       	rcall	.+720    	; 0x4cc8 <decode_port_no>
    49f8:	80 93 8f 19 	sts	0x198F, r24	; 0x80198f <_downlink_payload>
    49fc:	e9 81       	ldd	r30, Y+1	; 0x01
    49fe:	f0 e0       	ldi	r31, 0x00	; 0
    4a00:	ec 5e       	subi	r30, 0xEC	; 236
    4a02:	f5 4e       	sbci	r31, 0xE5	; 229
    4a04:	df 01       	movw	r26, r30
    4a06:	0d 90       	ld	r0, X+
    4a08:	00 20       	and	r0, r0
    4a0a:	e9 f7       	brne	.-6      	; 0x4a06 <lora_driver_sent_upload_message+0x130>
    4a0c:	11 97       	sbiw	r26, 0x01	; 1
    4a0e:	ae 1b       	sub	r26, r30
    4a10:	bf 0b       	sbc	r27, r31
    4a12:	aa 23       	and	r26, r26
    4a14:	91 f0       	breq	.+36     	; 0x4a3a <lora_driver_sent_upload_message+0x164>
    4a16:	bb 27       	eor	r27, r27
    4a18:	cd 01       	movw	r24, r26
    4a1a:	01 97       	sbiw	r24, 0x01	; 1
    4a1c:	9c 01       	movw	r18, r24
    4a1e:	12 f4       	brpl	.+4      	; 0x4a24 <lora_driver_sent_upload_message+0x14e>
    4a20:	2f 5f       	subi	r18, 0xFF	; 255
    4a22:	3f 4f       	sbci	r19, 0xFF	; 255
    4a24:	35 95       	asr	r19
    4a26:	27 95       	ror	r18
    4a28:	20 93 90 19 	sts	0x1990, r18	; 0x801990 <_downlink_payload+0x1>
    4a2c:	af 01       	movw	r20, r30
    4a2e:	4f 5f       	subi	r20, 0xFF	; 255
    4a30:	5f 4f       	sbci	r21, 0xFF	; 255
    4a32:	64 e1       	ldi	r22, 0x14	; 20
    4a34:	81 e9       	ldi	r24, 0x91	; 145
    4a36:	99 e1       	ldi	r25, 0x19	; 25
    4a38:	73 d1       	rcall	.+742    	; 0x4d20 <decode_hexadecimal_string_bytes>
    4a3a:	01 e0       	ldi	r16, 0x01	; 1
    4a3c:	10 e0       	ldi	r17, 0x00	; 0
    4a3e:	20 e0       	ldi	r18, 0x00	; 0
    4a40:	30 e0       	ldi	r19, 0x00	; 0
    4a42:	46 e1       	ldi	r20, 0x16	; 22
    4a44:	50 e0       	ldi	r21, 0x00	; 0
    4a46:	6f e8       	ldi	r22, 0x8F	; 143
    4a48:	79 e1       	ldi	r23, 0x19	; 25
    4a4a:	80 91 89 19 	lds	r24, 0x1989	; 0x801989 <_downlinkMessageBuffer>
    4a4e:	90 91 8a 19 	lds	r25, 0x198A	; 0x80198a <_downlinkMessageBuffer+0x1>
    4a52:	0e 94 70 13 	call	0x26e0	; 0x26e0 <xStreamBufferSend>
    4a56:	8e e0       	ldi	r24, 0x0E	; 14
    4a58:	03 c0       	rjmp	.+6      	; 0x4a60 <lora_driver_sent_upload_message+0x18a>
    4a5a:	84 e1       	ldi	r24, 0x14	; 20
    4a5c:	01 c0       	rjmp	.+2      	; 0x4a60 <lora_driver_sent_upload_message+0x18a>
    4a5e:	80 e0       	ldi	r24, 0x00	; 0
    4a60:	0f 90       	pop	r0
    4a62:	df 91       	pop	r29
    4a64:	cf 91       	pop	r28
    4a66:	1f 91       	pop	r17
    4a68:	0f 91       	pop	r16
    4a6a:	08 95       	ret

00004a6c <lora_driver_set_adaptive_data_rate>:
    4a6c:	81 30       	cpi	r24, 0x01	; 1
    4a6e:	19 f0       	breq	.+6      	; 0x4a76 <lora_driver_set_adaptive_data_rate+0xa>
    4a70:	66 ed       	ldi	r22, 0xD6	; 214
    4a72:	75 e0       	ldi	r23, 0x05	; 5
    4a74:	02 c0       	rjmp	.+4      	; 0x4a7a <lora_driver_set_adaptive_data_rate+0xe>
    4a76:	6f ea       	ldi	r22, 0xAF	; 175
    4a78:	76 e0       	ldi	r23, 0x06	; 6
    4a7a:	8a ed       	ldi	r24, 0xDA	; 218
    4a7c:	95 e0       	ldi	r25, 0x05	; 5
    4a7e:	3a ce       	rjmp	.-908    	; 0x46f4 <_upload_message_rc>
    4a80:	08 95       	ret

00004a82 <lora_driver_set_receive_delay>:
    4a82:	9f 93       	push	r25
    4a84:	8f 93       	push	r24
    4a86:	8b e0       	ldi	r24, 0x0B	; 11
    4a88:	96 e0       	ldi	r25, 0x06	; 6
    4a8a:	9f 93       	push	r25
    4a8c:	8f 93       	push	r24
    4a8e:	87 ee       	ldi	r24, 0xE7	; 231
    4a90:	99 e1       	ldi	r25, 0x19	; 25
    4a92:	9f 93       	push	r25
    4a94:	8f 93       	push	r24
    4a96:	0e 94 19 32 	call	0x6432	; 0x6432 <sprintf>
    4a9a:	60 e0       	ldi	r22, 0x00	; 0
    4a9c:	70 e0       	ldi	r23, 0x00	; 0
    4a9e:	87 ee       	ldi	r24, 0xE7	; 231
    4aa0:	99 e1       	ldi	r25, 0x19	; 25
    4aa2:	28 de       	rcall	.-944    	; 0x46f4 <_upload_message_rc>
    4aa4:	0f 90       	pop	r0
    4aa6:	0f 90       	pop	r0
    4aa8:	0f 90       	pop	r0
    4aaa:	0f 90       	pop	r0
    4aac:	0f 90       	pop	r0
    4aae:	0f 90       	pop	r0
    4ab0:	08 95       	ret

00004ab2 <lora_driver_configure_to_eu868>:
    4ab2:	2f 92       	push	r2
    4ab4:	3f 92       	push	r3
    4ab6:	4f 92       	push	r4
    4ab8:	5f 92       	push	r5
    4aba:	6f 92       	push	r6
    4abc:	7f 92       	push	r7
    4abe:	8f 92       	push	r8
    4ac0:	9f 92       	push	r9
    4ac2:	af 92       	push	r10
    4ac4:	bf 92       	push	r11
    4ac6:	cf 92       	push	r12
    4ac8:	df 92       	push	r13
    4aca:	ef 92       	push	r14
    4acc:	ff 92       	push	r15
    4ace:	0f 93       	push	r16
    4ad0:	1f 93       	push	r17
    4ad2:	cf 93       	push	r28
    4ad4:	df 93       	push	r29
    4ad6:	cd b7       	in	r28, 0x3d	; 61
    4ad8:	de b7       	in	r29, 0x3e	; 62
    4ada:	a0 97       	sbiw	r28, 0x20	; 32
    4adc:	0f b6       	in	r0, 0x3f	; 63
    4ade:	f8 94       	cli
    4ae0:	de bf       	out	0x3e, r29	; 62
    4ae2:	0f be       	out	0x3f, r0	; 63
    4ae4:	cd bf       	out	0x3d, r28	; 61
    4ae6:	68 e3       	ldi	r22, 0x38	; 56
    4ae8:	76 e0       	ldi	r23, 0x06	; 6
    4aea:	84 e4       	ldi	r24, 0x44	; 68
    4aec:	96 e0       	ldi	r25, 0x06	; 6
    4aee:	33 dd       	rcall	.-1434   	; 0x4556 <_upload_message>
    4af0:	8c dd       	rcall	.-1256   	; 0x460a <_reply2return_code>
    4af2:	81 11       	cpse	r24, r1
    4af4:	a3 c0       	rjmp	.+326    	; 0x4c3c <lora_driver_configure_to_eu868+0x18a>
    4af6:	80 e2       	ldi	r24, 0x20	; 32
    4af8:	e5 e2       	ldi	r30, 0x25	; 37
    4afa:	f2 e0       	ldi	r31, 0x02	; 2
    4afc:	de 01       	movw	r26, r28
    4afe:	11 96       	adiw	r26, 0x01	; 1
    4b00:	01 90       	ld	r0, Z+
    4b02:	0d 92       	st	X+, r0
    4b04:	8a 95       	dec	r24
    4b06:	e1 f7       	brne	.-8      	; 0x4b00 <lora_driver_configure_to_eu868+0x4e>
    4b08:	9e 01       	movw	r18, r28
    4b0a:	2f 5f       	subi	r18, 0xFF	; 255
    4b0c:	3f 4f       	sbci	r19, 0xFF	; 255
    4b0e:	69 01       	movw	r12, r18
    4b10:	e1 2c       	mov	r14, r1
    4b12:	f1 2c       	mov	r15, r1
    4b14:	0f 2e       	mov	r0, r31
    4b16:	f0 e5       	ldi	r31, 0x50	; 80
    4b18:	af 2e       	mov	r10, r31
    4b1a:	f6 e0       	ldi	r31, 0x06	; 6
    4b1c:	bf 2e       	mov	r11, r31
    4b1e:	f0 2d       	mov	r31, r0
    4b20:	07 ee       	ldi	r16, 0xE7	; 231
    4b22:	19 e1       	ldi	r17, 0x19	; 25
    4b24:	0f 2e       	mov	r0, r31
    4b26:	f9 e6       	ldi	r31, 0x69	; 105
    4b28:	4f 2e       	mov	r4, r31
    4b2a:	f6 e0       	ldi	r31, 0x06	; 6
    4b2c:	5f 2e       	mov	r5, r31
    4b2e:	f0 2d       	mov	r31, r0
    4b30:	0f 2e       	mov	r0, r31
    4b32:	f0 e8       	ldi	r31, 0x80	; 128
    4b34:	8f 2e       	mov	r8, r31
    4b36:	f6 e0       	ldi	r31, 0x06	; 6
    4b38:	9f 2e       	mov	r9, r31
    4b3a:	f0 2d       	mov	r31, r0
    4b3c:	0f 2e       	mov	r0, r31
    4b3e:	fa e9       	ldi	r31, 0x9A	; 154
    4b40:	6f 2e       	mov	r6, r31
    4b42:	f6 e0       	ldi	r31, 0x06	; 6
    4b44:	7f 2e       	mov	r7, r31
    4b46:	f0 2d       	mov	r31, r0
    4b48:	3e 2c       	mov	r3, r14
    4b4a:	2f 2c       	mov	r2, r15
    4b4c:	ff 92       	push	r15
    4b4e:	ef 92       	push	r14
    4b50:	bf 92       	push	r11
    4b52:	af 92       	push	r10
    4b54:	1f 93       	push	r17
    4b56:	0f 93       	push	r16
    4b58:	0e 94 19 32 	call	0x6432	; 0x6432 <sprintf>
    4b5c:	60 e0       	ldi	r22, 0x00	; 0
    4b5e:	70 e0       	ldi	r23, 0x00	; 0
    4b60:	c8 01       	movw	r24, r16
    4b62:	f9 dc       	rcall	.-1550   	; 0x4556 <_upload_message>
    4b64:	52 dd       	rcall	.-1372   	; 0x460a <_reply2return_code>
    4b66:	0f 90       	pop	r0
    4b68:	0f 90       	pop	r0
    4b6a:	0f 90       	pop	r0
    4b6c:	0f 90       	pop	r0
    4b6e:	0f 90       	pop	r0
    4b70:	0f 90       	pop	r0
    4b72:	81 11       	cpse	r24, r1
    4b74:	63 c0       	rjmp	.+198    	; 0x4c3c <lora_driver_configure_to_eu868+0x18a>
    4b76:	32 e0       	ldi	r19, 0x02	; 2
    4b78:	3e 15       	cp	r19, r14
    4b7a:	e8 f4       	brcc	.+58     	; 0x4bb6 <lora_driver_configure_to_eu868+0x104>
    4b7c:	f6 01       	movw	r30, r12
    4b7e:	83 81       	ldd	r24, Z+3	; 0x03
    4b80:	8f 93       	push	r24
    4b82:	82 81       	ldd	r24, Z+2	; 0x02
    4b84:	8f 93       	push	r24
    4b86:	81 81       	ldd	r24, Z+1	; 0x01
    4b88:	8f 93       	push	r24
    4b8a:	80 81       	ld	r24, Z
    4b8c:	8f 93       	push	r24
    4b8e:	ff 92       	push	r15
    4b90:	ef 92       	push	r14
    4b92:	5f 92       	push	r5
    4b94:	4f 92       	push	r4
    4b96:	1f 93       	push	r17
    4b98:	0f 93       	push	r16
    4b9a:	0e 94 19 32 	call	0x6432	; 0x6432 <sprintf>
    4b9e:	60 e0       	ldi	r22, 0x00	; 0
    4ba0:	70 e0       	ldi	r23, 0x00	; 0
    4ba2:	c8 01       	movw	r24, r16
    4ba4:	d8 dc       	rcall	.-1616   	; 0x4556 <_upload_message>
    4ba6:	31 dd       	rcall	.-1438   	; 0x460a <_reply2return_code>
    4ba8:	0f b6       	in	r0, 0x3f	; 63
    4baa:	f8 94       	cli
    4bac:	de bf       	out	0x3e, r29	; 62
    4bae:	0f be       	out	0x3f, r0	; 63
    4bb0:	cd bf       	out	0x3d, r28	; 61
    4bb2:	81 11       	cpse	r24, r1
    4bb4:	43 c0       	rjmp	.+134    	; 0x4c3c <lora_driver_configure_to_eu868+0x18a>
    4bb6:	2f 92       	push	r2
    4bb8:	3f 92       	push	r3
    4bba:	9f 92       	push	r9
    4bbc:	8f 92       	push	r8
    4bbe:	1f 93       	push	r17
    4bc0:	0f 93       	push	r16
    4bc2:	0e 94 19 32 	call	0x6432	; 0x6432 <sprintf>
    4bc6:	60 e0       	ldi	r22, 0x00	; 0
    4bc8:	70 e0       	ldi	r23, 0x00	; 0
    4bca:	c8 01       	movw	r24, r16
    4bcc:	c4 dc       	rcall	.-1656   	; 0x4556 <_upload_message>
    4bce:	1d dd       	rcall	.-1478   	; 0x460a <_reply2return_code>
    4bd0:	0f 90       	pop	r0
    4bd2:	0f 90       	pop	r0
    4bd4:	0f 90       	pop	r0
    4bd6:	0f 90       	pop	r0
    4bd8:	0f 90       	pop	r0
    4bda:	0f 90       	pop	r0
    4bdc:	81 11       	cpse	r24, r1
    4bde:	2e c0       	rjmp	.+92     	; 0x4c3c <lora_driver_configure_to_eu868+0x18a>
    4be0:	2f 92       	push	r2
    4be2:	3f 92       	push	r3
    4be4:	7f 92       	push	r7
    4be6:	6f 92       	push	r6
    4be8:	1f 93       	push	r17
    4bea:	0f 93       	push	r16
    4bec:	0e 94 19 32 	call	0x6432	; 0x6432 <sprintf>
    4bf0:	60 e0       	ldi	r22, 0x00	; 0
    4bf2:	70 e0       	ldi	r23, 0x00	; 0
    4bf4:	c8 01       	movw	r24, r16
    4bf6:	af dc       	rcall	.-1698   	; 0x4556 <_upload_message>
    4bf8:	08 dd       	rcall	.-1520   	; 0x460a <_reply2return_code>
    4bfa:	0f 90       	pop	r0
    4bfc:	0f 90       	pop	r0
    4bfe:	0f 90       	pop	r0
    4c00:	0f 90       	pop	r0
    4c02:	0f 90       	pop	r0
    4c04:	0f 90       	pop	r0
    4c06:	81 11       	cpse	r24, r1
    4c08:	19 c0       	rjmp	.+50     	; 0x4c3c <lora_driver_configure_to_eu868+0x18a>
    4c0a:	3f ef       	ldi	r19, 0xFF	; 255
    4c0c:	e3 1a       	sub	r14, r19
    4c0e:	f3 0a       	sbc	r15, r19
    4c10:	84 e0       	ldi	r24, 0x04	; 4
    4c12:	c8 0e       	add	r12, r24
    4c14:	d1 1c       	adc	r13, r1
    4c16:	98 e0       	ldi	r25, 0x08	; 8
    4c18:	e9 16       	cp	r14, r25
    4c1a:	f1 04       	cpc	r15, r1
    4c1c:	09 f0       	breq	.+2      	; 0x4c20 <lora_driver_configure_to_eu868+0x16e>
    4c1e:	94 cf       	rjmp	.-216    	; 0x4b48 <lora_driver_configure_to_eu868+0x96>
    4c20:	60 e0       	ldi	r22, 0x00	; 0
    4c22:	70 e0       	ldi	r23, 0x00	; 0
    4c24:	82 eb       	ldi	r24, 0xB2	; 178
    4c26:	96 e0       	ldi	r25, 0x06	; 6
    4c28:	96 dc       	rcall	.-1748   	; 0x4556 <_upload_message>
    4c2a:	ef dc       	rcall	.-1570   	; 0x460a <_reply2return_code>
    4c2c:	81 11       	cpse	r24, r1
    4c2e:	06 c0       	rjmp	.+12     	; 0x4c3c <lora_driver_configure_to_eu868+0x18a>
    4c30:	60 e0       	ldi	r22, 0x00	; 0
    4c32:	70 e0       	ldi	r23, 0x00	; 0
    4c34:	83 ec       	ldi	r24, 0xC3	; 195
    4c36:	96 e0       	ldi	r25, 0x06	; 6
    4c38:	8e dc       	rcall	.-1764   	; 0x4556 <_upload_message>
    4c3a:	e7 dc       	rcall	.-1586   	; 0x460a <_reply2return_code>
    4c3c:	a0 96       	adiw	r28, 0x20	; 32
    4c3e:	0f b6       	in	r0, 0x3f	; 63
    4c40:	f8 94       	cli
    4c42:	de bf       	out	0x3e, r29	; 62
    4c44:	0f be       	out	0x3f, r0	; 63
    4c46:	cd bf       	out	0x3d, r28	; 61
    4c48:	df 91       	pop	r29
    4c4a:	cf 91       	pop	r28
    4c4c:	1f 91       	pop	r17
    4c4e:	0f 91       	pop	r16
    4c50:	ff 90       	pop	r15
    4c52:	ef 90       	pop	r14
    4c54:	df 90       	pop	r13
    4c56:	cf 90       	pop	r12
    4c58:	bf 90       	pop	r11
    4c5a:	af 90       	pop	r10
    4c5c:	9f 90       	pop	r9
    4c5e:	8f 90       	pop	r8
    4c60:	7f 90       	pop	r7
    4c62:	6f 90       	pop	r6
    4c64:	5f 90       	pop	r5
    4c66:	4f 90       	pop	r4
    4c68:	3f 90       	pop	r3
    4c6a:	2f 90       	pop	r2
    4c6c:	08 95       	ret

00004c6e <lora_driver_set_otaa_identity>:
    4c6e:	ef 92       	push	r14
    4c70:	ff 92       	push	r15
    4c72:	0f 93       	push	r16
    4c74:	1f 93       	push	r17
    4c76:	cf 93       	push	r28
    4c78:	df 93       	push	r29
    4c7a:	ec 01       	movw	r28, r24
    4c7c:	8b 01       	movw	r16, r22
    4c7e:	7a 01       	movw	r14, r20
    4c80:	81 e0       	ldi	r24, 0x01	; 1
    4c82:	f4 de       	rcall	.-536    	; 0x4a6c <lora_driver_set_adaptive_data_rate>
    4c84:	81 11       	cpse	r24, r1
    4c86:	0d c0       	rjmp	.+26     	; 0x4ca2 <lora_driver_set_otaa_identity+0x34>
    4c88:	ce 01       	movw	r24, r28
    4c8a:	d4 dd       	rcall	.-1112   	; 0x4834 <lora_driver_set_application_identifier>
    4c8c:	81 11       	cpse	r24, r1
    4c8e:	09 c0       	rjmp	.+18     	; 0x4ca2 <lora_driver_set_otaa_identity+0x34>
    4c90:	c8 01       	movw	r24, r16
    4c92:	e1 dd       	rcall	.-1086   	; 0x4856 <lora_driver_set_application_key>
    4c94:	81 11       	cpse	r24, r1
    4c96:	05 c0       	rjmp	.+10     	; 0x4ca2 <lora_driver_set_otaa_identity+0x34>
    4c98:	c7 01       	movw	r24, r14
    4c9a:	bb dd       	rcall	.-1162   	; 0x4812 <lora_driver_set_device_identifier>
    4c9c:	81 11       	cpse	r24, r1
    4c9e:	01 c0       	rjmp	.+2      	; 0x4ca2 <lora_driver_set_otaa_identity+0x34>
    4ca0:	eb dd       	rcall	.-1066   	; 0x4878 <lora_driver_save_mac>
    4ca2:	df 91       	pop	r29
    4ca4:	cf 91       	pop	r28
    4ca6:	1f 91       	pop	r17
    4ca8:	0f 91       	pop	r16
    4caa:	ff 90       	pop	r15
    4cac:	ef 90       	pop	r14
    4cae:	08 95       	ret

00004cb0 <lora_driver_map_return_code_to_text>:
    4cb0:	90 e0       	ldi	r25, 0x00	; 0
    4cb2:	fc 01       	movw	r30, r24
    4cb4:	ee 0f       	add	r30, r30
    4cb6:	ff 1f       	adc	r31, r31
    4cb8:	8e 0f       	add	r24, r30
    4cba:	9f 1f       	adc	r25, r31
    4cbc:	fc 01       	movw	r30, r24
    4cbe:	e4 57       	subi	r30, 0x74	; 116
    4cc0:	f8 4f       	sbci	r31, 0xF8	; 248
    4cc2:	81 81       	ldd	r24, Z+1	; 0x01
    4cc4:	92 81       	ldd	r25, Z+2	; 0x02
    4cc6:	08 95       	ret

00004cc8 <decode_port_no>:
    4cc8:	dc 01       	movw	r26, r24
    4cca:	00 97       	sbiw	r24, 0x00	; 0
    4ccc:	29 f1       	breq	.+74     	; 0x4d18 <decode_port_no+0x50>
    4cce:	fb 01       	movw	r30, r22
    4cd0:	20 81       	ld	r18, Z
    4cd2:	fc 01       	movw	r30, r24
    4cd4:	01 90       	ld	r0, Z+
    4cd6:	00 20       	and	r0, r0
    4cd8:	e9 f7       	brne	.-6      	; 0x4cd4 <decode_port_no+0xc>
    4cda:	31 97       	sbiw	r30, 0x01	; 1
    4cdc:	e8 1b       	sub	r30, r24
    4cde:	f9 0b       	sbc	r31, r25
    4ce0:	82 2f       	mov	r24, r18
    4ce2:	90 e0       	ldi	r25, 0x00	; 0
    4ce4:	e8 17       	cp	r30, r24
    4ce6:	f9 07       	cpc	r31, r25
    4ce8:	c8 f0       	brcs	.+50     	; 0x4d1c <decode_port_no+0x54>
    4cea:	80 e0       	ldi	r24, 0x00	; 0
    4cec:	08 c0       	rjmp	.+16     	; 0x4cfe <decode_port_no+0x36>
    4cee:	88 0f       	add	r24, r24
    4cf0:	38 2f       	mov	r19, r24
    4cf2:	33 0f       	add	r19, r19
    4cf4:	33 0f       	add	r19, r19
    4cf6:	83 0f       	add	r24, r19
    4cf8:	80 53       	subi	r24, 0x30	; 48
    4cfa:	89 0f       	add	r24, r25
    4cfc:	2f 5f       	subi	r18, 0xFF	; 255
    4cfe:	fd 01       	movw	r30, r26
    4d00:	e2 0f       	add	r30, r18
    4d02:	f1 1d       	adc	r31, r1
    4d04:	90 81       	ld	r25, Z
    4d06:	30 ed       	ldi	r19, 0xD0	; 208
    4d08:	39 0f       	add	r19, r25
    4d0a:	3a 30       	cpi	r19, 0x0A	; 10
    4d0c:	10 f4       	brcc	.+4      	; 0x4d12 <decode_port_no+0x4a>
    4d0e:	91 11       	cpse	r25, r1
    4d10:	ee cf       	rjmp	.-36     	; 0x4cee <decode_port_no+0x26>
    4d12:	fb 01       	movw	r30, r22
    4d14:	20 83       	st	Z, r18
    4d16:	08 95       	ret
    4d18:	80 e0       	ldi	r24, 0x00	; 0
    4d1a:	08 95       	ret
    4d1c:	80 e0       	ldi	r24, 0x00	; 0
    4d1e:	08 95       	ret

00004d20 <decode_hexadecimal_string_bytes>:
    4d20:	0f 93       	push	r16
    4d22:	1f 93       	push	r17
    4d24:	cf 93       	push	r28
    4d26:	df 93       	push	r29
    4d28:	dc 01       	movw	r26, r24
    4d2a:	ea 01       	movw	r28, r20
    4d2c:	20 97       	sbiw	r28, 0x00	; 0
    4d2e:	e1 f1       	breq	.+120    	; 0x4da8 <decode_hexadecimal_string_bytes+0x88>
    4d30:	fa 01       	movw	r30, r20
    4d32:	01 90       	ld	r0, Z+
    4d34:	00 20       	and	r0, r0
    4d36:	e9 f7       	brne	.-6      	; 0x4d32 <decode_hexadecimal_string_bytes+0x12>
    4d38:	31 97       	sbiw	r30, 0x01	; 1
    4d3a:	e4 1b       	sub	r30, r20
    4d3c:	f5 0b       	sbc	r31, r21
    4d3e:	32 97       	sbiw	r30, 0x02	; 2
    4d40:	10 f5       	brcc	.+68     	; 0x4d86 <decode_hexadecimal_string_bytes+0x66>
    4d42:	32 c0       	rjmp	.+100    	; 0x4da8 <decode_hexadecimal_string_bytes+0x88>
    4d44:	8d 01       	movw	r16, r26
    4d46:	04 0f       	add	r16, r20
    4d48:	15 1f       	adc	r17, r21
    4d4a:	30 e0       	ldi	r19, 0x00	; 0
    4d4c:	ae 01       	movw	r20, r28
    4d4e:	42 0f       	add	r20, r18
    4d50:	53 1f       	adc	r21, r19
    4d52:	fa 01       	movw	r30, r20
    4d54:	90 81       	ld	r25, Z
    4d56:	91 34       	cpi	r25, 0x41	; 65
    4d58:	28 f0       	brcs	.+10     	; 0x4d64 <decode_hexadecimal_string_bytes+0x44>
    4d5a:	97 53       	subi	r25, 0x37	; 55
    4d5c:	59 2f       	mov	r21, r25
    4d5e:	52 95       	swap	r21
    4d60:	50 7f       	andi	r21, 0xF0	; 240
    4d62:	03 c0       	rjmp	.+6      	; 0x4d6a <decode_hexadecimal_string_bytes+0x4a>
    4d64:	59 2f       	mov	r21, r25
    4d66:	52 95       	swap	r21
    4d68:	50 7f       	andi	r21, 0xF0	; 240
    4d6a:	2c 0f       	add	r18, r28
    4d6c:	3d 1f       	adc	r19, r29
    4d6e:	f9 01       	movw	r30, r18
    4d70:	91 81       	ldd	r25, Z+1	; 0x01
    4d72:	91 34       	cpi	r25, 0x41	; 65
    4d74:	10 f0       	brcs	.+4      	; 0x4d7a <decode_hexadecimal_string_bytes+0x5a>
    4d76:	97 53       	subi	r25, 0x37	; 55
    4d78:	01 c0       	rjmp	.+2      	; 0x4d7c <decode_hexadecimal_string_bytes+0x5c>
    4d7a:	90 53       	subi	r25, 0x30	; 48
    4d7c:	95 0f       	add	r25, r21
    4d7e:	f8 01       	movw	r30, r16
    4d80:	90 83       	st	Z, r25
    4d82:	8f 5f       	subi	r24, 0xFF	; 255
    4d84:	01 c0       	rjmp	.+2      	; 0x4d88 <decode_hexadecimal_string_bytes+0x68>
    4d86:	80 e0       	ldi	r24, 0x00	; 0
    4d88:	28 2f       	mov	r18, r24
    4d8a:	22 0f       	add	r18, r18
    4d8c:	48 2f       	mov	r20, r24
    4d8e:	50 e0       	ldi	r21, 0x00	; 0
    4d90:	fe 01       	movw	r30, r28
    4d92:	01 90       	ld	r0, Z+
    4d94:	00 20       	and	r0, r0
    4d96:	e9 f7       	brne	.-6      	; 0x4d92 <decode_hexadecimal_string_bytes+0x72>
    4d98:	31 97       	sbiw	r30, 0x01	; 1
    4d9a:	ec 1b       	sub	r30, r28
    4d9c:	fd 0b       	sbc	r31, r29
    4d9e:	4e 17       	cp	r20, r30
    4da0:	5f 07       	cpc	r21, r31
    4da2:	10 f4       	brcc	.+4      	; 0x4da8 <decode_hexadecimal_string_bytes+0x88>
    4da4:	86 13       	cpse	r24, r22
    4da6:	ce cf       	rjmp	.-100    	; 0x4d44 <decode_hexadecimal_string_bytes+0x24>
    4da8:	df 91       	pop	r29
    4daa:	cf 91       	pop	r28
    4dac:	1f 91       	pop	r17
    4dae:	0f 91       	pop	r16
    4db0:	08 95       	ret

00004db2 <reg_read_register>:
    4db2:	fc 01       	movw	r30, r24
    4db4:	80 81       	ld	r24, Z
    4db6:	08 95       	ret

00004db8 <reg_read_bit>:
    4db8:	fc 01       	movw	r30, r24
    4dba:	20 81       	ld	r18, Z
    4dbc:	81 e0       	ldi	r24, 0x01	; 1
    4dbe:	90 e0       	ldi	r25, 0x00	; 0
    4dc0:	02 c0       	rjmp	.+4      	; 0x4dc6 <reg_read_bit+0xe>
    4dc2:	88 0f       	add	r24, r24
    4dc4:	99 1f       	adc	r25, r25
    4dc6:	6a 95       	dec	r22
    4dc8:	e2 f7       	brpl	.-8      	; 0x4dc2 <reg_read_bit+0xa>
    4dca:	82 23       	and	r24, r18
    4dcc:	08 95       	ret

00004dce <reg_read_bits>:
    4dce:	fc 01       	movw	r30, r24
    4dd0:	80 81       	ld	r24, Z
    4dd2:	86 23       	and	r24, r22
    4dd4:	08 95       	ret

00004dd6 <reg_set_register>:
    4dd6:	fc 01       	movw	r30, r24
    4dd8:	60 83       	st	Z, r22
    4dda:	08 95       	ret

00004ddc <reg_clear_register>:
    4ddc:	fc 01       	movw	r30, r24
    4dde:	10 82       	st	Z, r1
    4de0:	08 95       	ret

00004de2 <reg_set_bit>:
    4de2:	fc 01       	movw	r30, r24
    4de4:	40 81       	ld	r20, Z
    4de6:	21 e0       	ldi	r18, 0x01	; 1
    4de8:	30 e0       	ldi	r19, 0x00	; 0
    4dea:	02 c0       	rjmp	.+4      	; 0x4df0 <reg_set_bit+0xe>
    4dec:	22 0f       	add	r18, r18
    4dee:	33 1f       	adc	r19, r19
    4df0:	6a 95       	dec	r22
    4df2:	e2 f7       	brpl	.-8      	; 0x4dec <reg_set_bit+0xa>
    4df4:	24 2b       	or	r18, r20
    4df6:	20 83       	st	Z, r18
    4df8:	08 95       	ret

00004dfa <reg_set_bits>:
    4dfa:	fc 01       	movw	r30, r24
    4dfc:	20 81       	ld	r18, Z
    4dfe:	62 2b       	or	r22, r18
    4e00:	60 83       	st	Z, r22
    4e02:	08 95       	ret

00004e04 <reg_toggle_bit>:
    4e04:	fc 01       	movw	r30, r24
    4e06:	40 81       	ld	r20, Z
    4e08:	21 e0       	ldi	r18, 0x01	; 1
    4e0a:	30 e0       	ldi	r19, 0x00	; 0
    4e0c:	02 c0       	rjmp	.+4      	; 0x4e12 <reg_toggle_bit+0xe>
    4e0e:	22 0f       	add	r18, r18
    4e10:	33 1f       	adc	r19, r19
    4e12:	6a 95       	dec	r22
    4e14:	e2 f7       	brpl	.-8      	; 0x4e0e <reg_toggle_bit+0xa>
    4e16:	24 27       	eor	r18, r20
    4e18:	20 83       	st	Z, r18
    4e1a:	08 95       	ret

00004e1c <reg_toggle_bits>:
    4e1c:	fc 01       	movw	r30, r24
    4e1e:	20 81       	ld	r18, Z
    4e20:	62 27       	eor	r22, r18
    4e22:	60 83       	st	Z, r22
    4e24:	08 95       	ret

00004e26 <reg_clear_bit>:
    4e26:	fc 01       	movw	r30, r24
    4e28:	90 81       	ld	r25, Z
    4e2a:	21 e0       	ldi	r18, 0x01	; 1
    4e2c:	30 e0       	ldi	r19, 0x00	; 0
    4e2e:	02 c0       	rjmp	.+4      	; 0x4e34 <reg_clear_bit+0xe>
    4e30:	22 0f       	add	r18, r18
    4e32:	33 1f       	adc	r19, r19
    4e34:	6a 95       	dec	r22
    4e36:	e2 f7       	brpl	.-8      	; 0x4e30 <reg_clear_bit+0xa>
    4e38:	20 95       	com	r18
    4e3a:	29 23       	and	r18, r25
    4e3c:	20 83       	st	Z, r18
    4e3e:	08 95       	ret

00004e40 <reg_clear_bits>:
    4e40:	fc 01       	movw	r30, r24
    4e42:	90 81       	ld	r25, Z
    4e44:	60 95       	com	r22
    4e46:	69 23       	and	r22, r25
    4e48:	60 83       	st	Z, r22
    4e4a:	08 95       	ret

00004e4c <_serial_call_back>:
    4e4c:	80 91 44 1a 	lds	r24, 0x1A44	; 0x801a44 <crc_sum.1941>
    4e50:	86 0f       	add	r24, r22
    4e52:	80 93 44 1a 	sts	0x1A44, r24	; 0x801a44 <crc_sum.1941>
    4e56:	90 91 47 1a 	lds	r25, 0x1A47	; 0x801a47 <_mh_state>
    4e5a:	91 30       	cpi	r25, 0x01	; 1
    4e5c:	79 f0       	breq	.+30     	; 0x4e7c <_serial_call_back+0x30>
    4e5e:	28 f0       	brcs	.+10     	; 0x4e6a <_serial_call_back+0x1e>
    4e60:	92 30       	cpi	r25, 0x02	; 2
    4e62:	a9 f0       	breq	.+42     	; 0x4e8e <_serial_call_back+0x42>
    4e64:	93 30       	cpi	r25, 0x03	; 3
    4e66:	19 f1       	breq	.+70     	; 0x4eae <_serial_call_back+0x62>
    4e68:	08 95       	ret
    4e6a:	6f 3f       	cpi	r22, 0xFF	; 255
    4e6c:	09 f0       	breq	.+2      	; 0x4e70 <_serial_call_back+0x24>
    4e6e:	48 c0       	rjmp	.+144    	; 0x4f00 <_serial_call_back+0xb4>
    4e70:	10 92 44 1a 	sts	0x1A44, r1	; 0x801a44 <crc_sum.1941>
    4e74:	81 e0       	ldi	r24, 0x01	; 1
    4e76:	80 93 47 1a 	sts	0x1A47, r24	; 0x801a47 <_mh_state>
    4e7a:	08 95       	ret
    4e7c:	66 38       	cpi	r22, 0x86	; 134
    4e7e:	09 f0       	breq	.+2      	; 0x4e82 <_serial_call_back+0x36>
    4e80:	3f c0       	rjmp	.+126    	; 0x4f00 <_serial_call_back+0xb4>
    4e82:	10 92 43 1a 	sts	0x1A43, r1	; 0x801a43 <inDex.1939>
    4e86:	82 e0       	ldi	r24, 0x02	; 2
    4e88:	80 93 47 1a 	sts	0x1A47, r24	; 0x801a47 <_mh_state>
    4e8c:	08 95       	ret
    4e8e:	e0 91 43 1a 	lds	r30, 0x1A43	; 0x801a43 <inDex.1939>
    4e92:	81 e0       	ldi	r24, 0x01	; 1
    4e94:	8e 0f       	add	r24, r30
    4e96:	80 93 43 1a 	sts	0x1A43, r24	; 0x801a43 <inDex.1939>
    4e9a:	f0 e0       	ldi	r31, 0x00	; 0
    4e9c:	ef 5b       	subi	r30, 0xBF	; 191
    4e9e:	f5 4e       	sbci	r31, 0xE5	; 229
    4ea0:	60 83       	st	Z, r22
    4ea2:	82 30       	cpi	r24, 0x02	; 2
    4ea4:	69 f5       	brne	.+90     	; 0x4f00 <_serial_call_back+0xb4>
    4ea6:	83 e0       	ldi	r24, 0x03	; 3
    4ea8:	80 93 47 1a 	sts	0x1A47, r24	; 0x801a47 <_mh_state>
    4eac:	08 95       	ret
    4eae:	90 91 43 1a 	lds	r25, 0x1A43	; 0x801a43 <inDex.1939>
    4eb2:	21 e0       	ldi	r18, 0x01	; 1
    4eb4:	29 0f       	add	r18, r25
    4eb6:	20 93 43 1a 	sts	0x1A43, r18	; 0x801a43 <inDex.1939>
    4eba:	96 30       	cpi	r25, 0x06	; 6
    4ebc:	09 f5       	brne	.+66     	; 0x4f00 <_serial_call_back+0xb4>
    4ebe:	81 11       	cpse	r24, r1
    4ec0:	0e c0       	rjmp	.+28     	; 0x4ede <_serial_call_back+0x92>
    4ec2:	e1 e4       	ldi	r30, 0x41	; 65
    4ec4:	fa e1       	ldi	r31, 0x1A	; 26
    4ec6:	80 81       	ld	r24, Z
    4ec8:	90 e0       	ldi	r25, 0x00	; 0
    4eca:	98 2f       	mov	r25, r24
    4ecc:	88 27       	eor	r24, r24
    4ece:	21 81       	ldd	r18, Z+1	; 0x01
    4ed0:	82 0f       	add	r24, r18
    4ed2:	91 1d       	adc	r25, r1
    4ed4:	90 93 49 1a 	sts	0x1A49, r25	; 0x801a49 <_ppm+0x1>
    4ed8:	80 93 48 1a 	sts	0x1A48, r24	; 0x801a48 <_ppm>
    4edc:	04 c0       	rjmp	.+8      	; 0x4ee6 <_serial_call_back+0x9a>
    4ede:	10 92 49 1a 	sts	0x1A49, r1	; 0x801a49 <_ppm+0x1>
    4ee2:	10 92 48 1a 	sts	0x1A48, r1	; 0x801a48 <_ppm>
    4ee6:	10 92 47 1a 	sts	0x1A47, r1	; 0x801a47 <_mh_state>
    4eea:	e0 91 45 1a 	lds	r30, 0x1A45	; 0x801a45 <_app_call_back>
    4eee:	f0 91 46 1a 	lds	r31, 0x1A46	; 0x801a46 <_app_call_back+0x1>
    4ef2:	30 97       	sbiw	r30, 0x00	; 0
    4ef4:	29 f0       	breq	.+10     	; 0x4f00 <_serial_call_back+0xb4>
    4ef6:	80 91 48 1a 	lds	r24, 0x1A48	; 0x801a48 <_ppm>
    4efa:	90 91 49 1a 	lds	r25, 0x1A49	; 0x801a49 <_ppm+0x1>
    4efe:	19 95       	eicall
    4f00:	08 95       	ret

00004f02 <mh_z19_create>:
    4f02:	8f 92       	push	r8
    4f04:	9f 92       	push	r9
    4f06:	af 92       	push	r10
    4f08:	cf 92       	push	r12
    4f0a:	ef 92       	push	r14
    4f0c:	0f 93       	push	r16
    4f0e:	cf 93       	push	r28
    4f10:	df 93       	push	r29
    4f12:	eb 01       	movw	r28, r22
    4f14:	0f 2e       	mov	r0, r31
    4f16:	f6 e2       	ldi	r31, 0x26	; 38
    4f18:	8f 2e       	mov	r8, r31
    4f1a:	f7 e2       	ldi	r31, 0x27	; 39
    4f1c:	9f 2e       	mov	r9, r31
    4f1e:	f0 2d       	mov	r31, r0
    4f20:	68 94       	set
    4f22:	aa 24       	eor	r10, r10
    4f24:	a4 f8       	bld	r10, 4
    4f26:	68 94       	set
    4f28:	cc 24       	eor	r12, r12
    4f2a:	c4 f8       	bld	r12, 4
    4f2c:	e1 2c       	mov	r14, r1
    4f2e:	00 e0       	ldi	r16, 0x00	; 0
    4f30:	23 e0       	ldi	r18, 0x03	; 3
    4f32:	40 e8       	ldi	r20, 0x80	; 128
    4f34:	55 e2       	ldi	r21, 0x25	; 37
    4f36:	60 e0       	ldi	r22, 0x00	; 0
    4f38:	70 e0       	ldi	r23, 0x00	; 0
    4f3a:	85 d0       	rcall	.+266    	; 0x5046 <serial_new_instance>
    4f3c:	90 93 4b 1a 	sts	0x1A4B, r25	; 0x801a4b <_serial+0x1>
    4f40:	80 93 4a 1a 	sts	0x1A4A, r24	; 0x801a4a <_serial>
    4f44:	d0 93 46 1a 	sts	0x1A46, r29	; 0x801a46 <_app_call_back+0x1>
    4f48:	c0 93 45 1a 	sts	0x1A45, r28	; 0x801a45 <_app_call_back>
    4f4c:	df 91       	pop	r29
    4f4e:	cf 91       	pop	r28
    4f50:	0f 91       	pop	r16
    4f52:	ef 90       	pop	r14
    4f54:	cf 90       	pop	r12
    4f56:	af 90       	pop	r10
    4f58:	9f 90       	pop	r9
    4f5a:	8f 90       	pop	r8
    4f5c:	08 95       	ret

00004f5e <mh_z19_take_meassuring>:
    4f5e:	cf 93       	push	r28
    4f60:	df 93       	push	r29
    4f62:	cd b7       	in	r28, 0x3d	; 61
    4f64:	de b7       	in	r29, 0x3e	; 62
    4f66:	29 97       	sbiw	r28, 0x09	; 9
    4f68:	0f b6       	in	r0, 0x3f	; 63
    4f6a:	f8 94       	cli
    4f6c:	de bf       	out	0x3e, r29	; 62
    4f6e:	0f be       	out	0x3f, r0	; 63
    4f70:	cd bf       	out	0x3d, r28	; 61
    4f72:	89 e0       	ldi	r24, 0x09	; 9
    4f74:	e5 e4       	ldi	r30, 0x45	; 69
    4f76:	f2 e0       	ldi	r31, 0x02	; 2
    4f78:	9e 01       	movw	r18, r28
    4f7a:	2f 5f       	subi	r18, 0xFF	; 255
    4f7c:	3f 4f       	sbci	r19, 0xFF	; 255
    4f7e:	d9 01       	movw	r26, r18
    4f80:	01 90       	ld	r0, Z+
    4f82:	0d 92       	st	X+, r0
    4f84:	8a 95       	dec	r24
    4f86:	e1 f7       	brne	.-8      	; 0x4f80 <mh_z19_take_meassuring+0x22>
    4f88:	10 92 49 1a 	sts	0x1A49, r1	; 0x801a49 <_ppm+0x1>
    4f8c:	10 92 48 1a 	sts	0x1A48, r1	; 0x801a48 <_ppm>
    4f90:	80 91 4a 1a 	lds	r24, 0x1A4A	; 0x801a4a <_serial>
    4f94:	90 91 4b 1a 	lds	r25, 0x1A4B	; 0x801a4b <_serial+0x1>
    4f98:	00 97       	sbiw	r24, 0x00	; 0
    4f9a:	31 f0       	breq	.+12     	; 0x4fa8 <mh_z19_take_meassuring+0x4a>
    4f9c:	42 2f       	mov	r20, r18
    4f9e:	53 2f       	mov	r21, r19
    4fa0:	69 e0       	ldi	r22, 0x09	; 9
    4fa2:	0c d1       	rcall	.+536    	; 0x51bc <serial_send_bytes>
    4fa4:	80 e0       	ldi	r24, 0x00	; 0
    4fa6:	01 c0       	rjmp	.+2      	; 0x4faa <mh_z19_take_meassuring+0x4c>
    4fa8:	82 e0       	ldi	r24, 0x02	; 2
    4faa:	29 96       	adiw	r28, 0x09	; 9
    4fac:	0f b6       	in	r0, 0x3f	; 63
    4fae:	f8 94       	cli
    4fb0:	de bf       	out	0x3e, r29	; 62
    4fb2:	0f be       	out	0x3f, r0	; 63
    4fb4:	cd bf       	out	0x3d, r28	; 61
    4fb6:	df 91       	pop	r29
    4fb8:	cf 91       	pop	r28
    4fba:	08 95       	ret

00004fbc <mh_z19_get_co2_ppm>:
    4fbc:	20 91 48 1a 	lds	r18, 0x1A48	; 0x801a48 <_ppm>
    4fc0:	30 91 49 1a 	lds	r19, 0x1A49	; 0x801a49 <_ppm+0x1>
    4fc4:	21 15       	cp	r18, r1
    4fc6:	31 05       	cpc	r19, r1
    4fc8:	29 f4       	brne	.+10     	; 0x4fd4 <mh_z19_get_co2_ppm+0x18>
    4fca:	fc 01       	movw	r30, r24
    4fcc:	11 82       	std	Z+1, r1	; 0x01
    4fce:	10 82       	st	Z, r1
    4fd0:	81 e0       	ldi	r24, 0x01	; 1
    4fd2:	08 95       	ret
    4fd4:	fc 01       	movw	r30, r24
    4fd6:	31 83       	std	Z+1, r19	; 0x01
    4fd8:	20 83       	st	Z, r18
    4fda:	80 e0       	ldi	r24, 0x00	; 0
    4fdc:	08 95       	ret

00004fde <rcServoSet>:
    4fde:	65 36       	cpi	r22, 0x65	; 101
    4fe0:	0c f0       	brlt	.+2      	; 0x4fe4 <rcServoSet+0x6>
    4fe2:	64 e6       	ldi	r22, 0x64	; 100
    4fe4:	6c 39       	cpi	r22, 0x9C	; 156
    4fe6:	0c f4       	brge	.+2      	; 0x4fea <rcServoSet+0xc>
    4fe8:	6c e9       	ldi	r22, 0x9C	; 156
    4fea:	96 ef       	ldi	r25, 0xF6	; 246
    4fec:	69 02       	muls	r22, r25
    4fee:	b0 01       	movw	r22, r0
    4ff0:	11 24       	eor	r1, r1
    4ff2:	68 54       	subi	r22, 0x48	; 72
    4ff4:	74 4f       	sbci	r23, 0xF4	; 244
    4ff6:	81 11       	cpse	r24, r1
    4ff8:	05 c0       	rjmp	.+10     	; 0x5004 <rcServoSet+0x26>
    4ffa:	70 93 29 01 	sts	0x0129, r23	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
    4ffe:	60 93 28 01 	sts	0x0128, r22	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
    5002:	08 95       	ret
    5004:	70 93 2b 01 	sts	0x012B, r23	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
    5008:	60 93 2a 01 	sts	0x012A, r22	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
    500c:	08 95       	ret

0000500e <rcServoCreate>:
    500e:	ea e0       	ldi	r30, 0x0A	; 10
    5010:	f1 e0       	ldi	r31, 0x01	; 1
    5012:	80 81       	ld	r24, Z
    5014:	88 61       	ori	r24, 0x18	; 24
    5016:	80 83       	st	Z, r24
    5018:	8f e3       	ldi	r24, 0x3F	; 63
    501a:	9c e9       	ldi	r25, 0x9C	; 156
    501c:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__TEXT_REGION_LENGTH__+0x700127>
    5020:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__TEXT_REGION_LENGTH__+0x700126>
    5024:	60 e0       	ldi	r22, 0x00	; 0
    5026:	80 e0       	ldi	r24, 0x00	; 0
    5028:	da df       	rcall	.-76     	; 0x4fde <rcServoSet>
    502a:	60 e0       	ldi	r22, 0x00	; 0
    502c:	81 e0       	ldi	r24, 0x01	; 1
    502e:	d7 df       	rcall	.-82     	; 0x4fde <rcServoSet>
    5030:	e0 e2       	ldi	r30, 0x20	; 32
    5032:	f1 e0       	ldi	r31, 0x01	; 1
    5034:	80 81       	ld	r24, Z
    5036:	82 6a       	ori	r24, 0xA2	; 162
    5038:	80 83       	st	Z, r24
    503a:	e1 e2       	ldi	r30, 0x21	; 33
    503c:	f1 e0       	ldi	r31, 0x01	; 1
    503e:	80 81       	ld	r24, Z
    5040:	8a 61       	ori	r24, 0x1A	; 26
    5042:	80 83       	st	Z, r24
    5044:	08 95       	ret

00005046 <serial_new_instance>:
    5046:	2f 92       	push	r2
    5048:	3f 92       	push	r3
    504a:	4f 92       	push	r4
    504c:	5f 92       	push	r5
    504e:	6f 92       	push	r6
    5050:	7f 92       	push	r7
    5052:	8f 92       	push	r8
    5054:	9f 92       	push	r9
    5056:	af 92       	push	r10
    5058:	cf 92       	push	r12
    505a:	ef 92       	push	r14
    505c:	ff 92       	push	r15
    505e:	0f 93       	push	r16
    5060:	1f 93       	push	r17
    5062:	cf 93       	push	r28
    5064:	df 93       	push	r29
    5066:	cd b7       	in	r28, 0x3d	; 61
    5068:	de b7       	in	r29, 0x3e	; 62
    506a:	f8 2e       	mov	r15, r24
    506c:	2a 01       	movw	r4, r20
    506e:	3b 01       	movw	r6, r22
    5070:	88 e0       	ldi	r24, 0x08	; 8
    5072:	90 e0       	ldi	r25, 0x00	; 0
    5074:	c2 d7       	rcall	.+3972   	; 0x5ffa <malloc>
    5076:	8c 01       	movw	r16, r24
    5078:	8f 2d       	mov	r24, r15
    507a:	90 e0       	ldi	r25, 0x00	; 0
    507c:	88 0f       	add	r24, r24
    507e:	99 1f       	adc	r25, r25
    5080:	fc 01       	movw	r30, r24
    5082:	e4 5b       	subi	r30, 0xB4	; 180
    5084:	f5 4e       	sbci	r31, 0xE5	; 229
    5086:	11 83       	std	Z+1, r17	; 0x01
    5088:	00 83       	st	Z, r16
    508a:	fc 01       	movw	r30, r24
    508c:	e2 5f       	subi	r30, 0xF2	; 242
    508e:	fd 4f       	sbci	r31, 0xFD	; 253
    5090:	80 81       	ld	r24, Z
    5092:	91 81       	ldd	r25, Z+1	; 0x01
    5094:	d8 01       	movw	r26, r16
    5096:	8d 93       	st	X+, r24
    5098:	9c 93       	st	X, r25
    509a:	6c 2d       	mov	r22, r12
    509c:	70 e0       	ldi	r23, 0x00	; 0
    509e:	84 e0       	ldi	r24, 0x04	; 4
    50a0:	90 e0       	ldi	r25, 0x00	; 0
    50a2:	91 d7       	rcall	.+3874   	; 0x5fc6 <calloc>
    50a4:	1c 01       	movw	r2, r24
    50a6:	61 e0       	ldi	r22, 0x01	; 1
    50a8:	70 e0       	ldi	r23, 0x00	; 0
    50aa:	86 e0       	ldi	r24, 0x06	; 6
    50ac:	90 e0       	ldi	r25, 0x00	; 0
    50ae:	8b d7       	rcall	.+3862   	; 0x5fc6 <calloc>
    50b0:	7c 01       	movw	r14, r24
    50b2:	4c 2d       	mov	r20, r12
    50b4:	b1 01       	movw	r22, r2
    50b6:	2b d5       	rcall	.+2646   	; 0x5b0e <fifo_init>
    50b8:	f8 01       	movw	r30, r16
    50ba:	f5 82       	std	Z+5, r15	; 0x05
    50bc:	e4 82       	std	Z+4, r14	; 0x04
    50be:	6a 2d       	mov	r22, r10
    50c0:	70 e0       	ldi	r23, 0x00	; 0
    50c2:	84 e0       	ldi	r24, 0x04	; 4
    50c4:	90 e0       	ldi	r25, 0x00	; 0
    50c6:	7f d7       	rcall	.+3838   	; 0x5fc6 <calloc>
    50c8:	1c 01       	movw	r2, r24
    50ca:	61 e0       	ldi	r22, 0x01	; 1
    50cc:	70 e0       	ldi	r23, 0x00	; 0
    50ce:	86 e0       	ldi	r24, 0x06	; 6
    50d0:	90 e0       	ldi	r25, 0x00	; 0
    50d2:	79 d7       	rcall	.+3826   	; 0x5fc6 <calloc>
    50d4:	7c 01       	movw	r14, r24
    50d6:	4a 2d       	mov	r20, r10
    50d8:	b1 01       	movw	r22, r2
    50da:	19 d5       	rcall	.+2610   	; 0x5b0e <fifo_init>
    50dc:	d8 01       	movw	r26, r16
    50de:	13 96       	adiw	r26, 0x03	; 3
    50e0:	fc 92       	st	X, r15
    50e2:	ee 92       	st	-X, r14
    50e4:	12 97       	sbiw	r26, 0x02	; 2
    50e6:	17 96       	adiw	r26, 0x07	; 7
    50e8:	9c 92       	st	X, r9
    50ea:	8e 92       	st	-X, r8
    50ec:	16 97       	sbiw	r26, 0x06	; 6
    50ee:	ff b6       	in	r15, 0x3f	; 63
    50f0:	f8 94       	cli
    50f2:	ed 91       	ld	r30, X+
    50f4:	fc 91       	ld	r31, X
    50f6:	11 97       	sbiw	r26, 0x01	; 1
    50f8:	36 97       	sbiw	r30, 0x06	; 6
    50fa:	80 81       	ld	r24, Z
    50fc:	82 60       	ori	r24, 0x02	; 2
    50fe:	80 83       	st	Z, r24
    5100:	8d 90       	ld	r8, X+
    5102:	9c 90       	ld	r9, X
    5104:	c3 01       	movw	r24, r6
    5106:	b2 01       	movw	r22, r4
    5108:	1c d6       	rcall	.+3128   	; 0x5d42 <__floatunsisf>
    510a:	20 e0       	ldi	r18, 0x00	; 0
    510c:	30 e0       	ldi	r19, 0x00	; 0
    510e:	40 e0       	ldi	r20, 0x00	; 0
    5110:	51 e4       	ldi	r21, 0x41	; 65
    5112:	a5 d6       	rcall	.+3402   	; 0x5e5e <__mulsf3>
    5114:	9b 01       	movw	r18, r22
    5116:	ac 01       	movw	r20, r24
    5118:	60 e0       	ldi	r22, 0x00	; 0
    511a:	74 e2       	ldi	r23, 0x24	; 36
    511c:	84 e7       	ldi	r24, 0x74	; 116
    511e:	9b e4       	ldi	r25, 0x4B	; 75
    5120:	77 d5       	rcall	.+2798   	; 0x5c10 <__divsf3>
    5122:	20 e0       	ldi	r18, 0x00	; 0
    5124:	30 e0       	ldi	r19, 0x00	; 0
    5126:	40 e8       	ldi	r20, 0x80	; 128
    5128:	5f e3       	ldi	r21, 0x3F	; 63
    512a:	0d d5       	rcall	.+2586   	; 0x5b46 <__subsf3>
    512c:	de d5       	rcall	.+3004   	; 0x5cea <__fixunssfsi>
    512e:	f4 01       	movw	r30, r8
    5130:	32 97       	sbiw	r30, 0x02	; 2
    5132:	60 83       	st	Z, r22
    5134:	d8 01       	movw	r26, r16
    5136:	ed 91       	ld	r30, X+
    5138:	fc 91       	ld	r31, X
    513a:	11 97       	sbiw	r26, 0x01	; 1
    513c:	35 97       	sbiw	r30, 0x05	; 5
    513e:	88 e9       	ldi	r24, 0x98	; 152
    5140:	80 83       	st	Z, r24
    5142:	ed 91       	ld	r30, X+
    5144:	fc 91       	ld	r31, X
    5146:	34 97       	sbiw	r30, 0x04	; 4
    5148:	86 e0       	ldi	r24, 0x06	; 6
    514a:	80 83       	st	Z, r24
    514c:	ff be       	out	0x3f, r15	; 63
    514e:	c8 01       	movw	r24, r16
    5150:	df 91       	pop	r29
    5152:	cf 91       	pop	r28
    5154:	1f 91       	pop	r17
    5156:	0f 91       	pop	r16
    5158:	ff 90       	pop	r15
    515a:	ef 90       	pop	r14
    515c:	cf 90       	pop	r12
    515e:	af 90       	pop	r10
    5160:	9f 90       	pop	r9
    5162:	8f 90       	pop	r8
    5164:	7f 90       	pop	r7
    5166:	6f 90       	pop	r6
    5168:	5f 90       	pop	r5
    516a:	4f 90       	pop	r4
    516c:	3f 90       	pop	r3
    516e:	2f 90       	pop	r2
    5170:	08 95       	ret

00005172 <serial_send_byte>:
    5172:	cf 93       	push	r28
    5174:	df 93       	push	r29
    5176:	ec 01       	movw	r28, r24
    5178:	ea 81       	ldd	r30, Y+2	; 0x02
    517a:	fb 81       	ldd	r31, Y+3	; 0x03
    517c:	93 81       	ldd	r25, Z+3	; 0x03
    517e:	82 81       	ldd	r24, Z+2	; 0x02
    5180:	25 81       	ldd	r18, Z+5	; 0x05
    5182:	98 1b       	sub	r25, r24
    5184:	92 23       	and	r25, r18
    5186:	84 81       	ldd	r24, Z+4	; 0x04
    5188:	98 17       	cp	r25, r24
    518a:	a1 f0       	breq	.+40     	; 0x51b4 <serial_send_byte+0x42>
    518c:	93 81       	ldd	r25, Z+3	; 0x03
    518e:	26 95       	lsr	r18
    5190:	29 23       	and	r18, r25
    5192:	a0 81       	ld	r26, Z
    5194:	b1 81       	ldd	r27, Z+1	; 0x01
    5196:	a2 0f       	add	r26, r18
    5198:	b1 1d       	adc	r27, r1
    519a:	6c 93       	st	X, r22
    519c:	9f 5f       	subi	r25, 0xFF	; 255
    519e:	25 81       	ldd	r18, Z+5	; 0x05
    51a0:	92 23       	and	r25, r18
    51a2:	93 83       	std	Z+3, r25	; 0x03
    51a4:	e8 81       	ld	r30, Y
    51a6:	f9 81       	ldd	r31, Y+1	; 0x01
    51a8:	35 97       	sbiw	r30, 0x05	; 5
    51aa:	80 81       	ld	r24, Z
    51ac:	80 62       	ori	r24, 0x20	; 32
    51ae:	80 83       	st	Z, r24
    51b0:	80 e0       	ldi	r24, 0x00	; 0
    51b2:	01 c0       	rjmp	.+2      	; 0x51b6 <serial_send_byte+0x44>
    51b4:	82 e0       	ldi	r24, 0x02	; 2
    51b6:	df 91       	pop	r29
    51b8:	cf 91       	pop	r28
    51ba:	08 95       	ret

000051bc <serial_send_bytes>:
    51bc:	ef 92       	push	r14
    51be:	ff 92       	push	r15
    51c0:	0f 93       	push	r16
    51c2:	1f 93       	push	r17
    51c4:	cf 93       	push	r28
    51c6:	df 93       	push	r29
    51c8:	7c 01       	movw	r14, r24
    51ca:	dc 01       	movw	r26, r24
    51cc:	12 96       	adiw	r26, 0x02	; 2
    51ce:	ed 91       	ld	r30, X+
    51d0:	fc 91       	ld	r31, X
    51d2:	13 97       	sbiw	r26, 0x03	; 3
    51d4:	93 81       	ldd	r25, Z+3	; 0x03
    51d6:	82 81       	ldd	r24, Z+2	; 0x02
    51d8:	98 1b       	sub	r25, r24
    51da:	85 81       	ldd	r24, Z+5	; 0x05
    51dc:	98 23       	and	r25, r24
    51de:	84 81       	ldd	r24, Z+4	; 0x04
    51e0:	89 1b       	sub	r24, r25
    51e2:	86 17       	cp	r24, r22
    51e4:	98 f1       	brcs	.+102    	; 0x524c <serial_send_bytes+0x90>
    51e6:	66 23       	and	r22, r22
    51e8:	41 f1       	breq	.+80     	; 0x523a <serial_send_bytes+0x7e>
    51ea:	84 2f       	mov	r24, r20
    51ec:	95 2f       	mov	r25, r21
    51ee:	dc 01       	movw	r26, r24
    51f0:	61 50       	subi	r22, 0x01	; 1
    51f2:	46 2f       	mov	r20, r22
    51f4:	50 e0       	ldi	r21, 0x00	; 0
    51f6:	4f 5f       	subi	r20, 0xFF	; 255
    51f8:	5f 4f       	sbci	r21, 0xFF	; 255
    51fa:	48 0f       	add	r20, r24
    51fc:	59 1f       	adc	r21, r25
    51fe:	e7 01       	movw	r28, r14
    5200:	ea 81       	ldd	r30, Y+2	; 0x02
    5202:	fb 81       	ldd	r31, Y+3	; 0x03
    5204:	93 81       	ldd	r25, Z+3	; 0x03
    5206:	82 81       	ldd	r24, Z+2	; 0x02
    5208:	25 81       	ldd	r18, Z+5	; 0x05
    520a:	98 1b       	sub	r25, r24
    520c:	92 23       	and	r25, r18
    520e:	84 81       	ldd	r24, Z+4	; 0x04
    5210:	98 17       	cp	r25, r24
    5212:	79 f0       	breq	.+30     	; 0x5232 <serial_send_bytes+0x76>
    5214:	8c 91       	ld	r24, X
    5216:	93 81       	ldd	r25, Z+3	; 0x03
    5218:	26 95       	lsr	r18
    521a:	29 23       	and	r18, r25
    521c:	60 81       	ld	r22, Z
    521e:	71 81       	ldd	r23, Z+1	; 0x01
    5220:	8b 01       	movw	r16, r22
    5222:	02 0f       	add	r16, r18
    5224:	11 1d       	adc	r17, r1
    5226:	e8 01       	movw	r28, r16
    5228:	88 83       	st	Y, r24
    522a:	9f 5f       	subi	r25, 0xFF	; 255
    522c:	85 81       	ldd	r24, Z+5	; 0x05
    522e:	98 23       	and	r25, r24
    5230:	93 83       	std	Z+3, r25	; 0x03
    5232:	11 96       	adiw	r26, 0x01	; 1
    5234:	a4 17       	cp	r26, r20
    5236:	b5 07       	cpc	r27, r21
    5238:	11 f7       	brne	.-60     	; 0x51fe <serial_send_bytes+0x42>
    523a:	d7 01       	movw	r26, r14
    523c:	ed 91       	ld	r30, X+
    523e:	fc 91       	ld	r31, X
    5240:	35 97       	sbiw	r30, 0x05	; 5
    5242:	80 81       	ld	r24, Z
    5244:	80 62       	ori	r24, 0x20	; 32
    5246:	80 83       	st	Z, r24
    5248:	80 e0       	ldi	r24, 0x00	; 0
    524a:	01 c0       	rjmp	.+2      	; 0x524e <serial_send_bytes+0x92>
    524c:	82 e0       	ldi	r24, 0x02	; 2
    524e:	df 91       	pop	r29
    5250:	cf 91       	pop	r28
    5252:	1f 91       	pop	r17
    5254:	0f 91       	pop	r16
    5256:	ff 90       	pop	r15
    5258:	ef 90       	pop	r14
    525a:	08 95       	ret

0000525c <serial_get_byte>:
    525c:	dc 01       	movw	r26, r24
    525e:	14 96       	adiw	r26, 0x04	; 4
    5260:	ed 91       	ld	r30, X+
    5262:	fc 91       	ld	r31, X
    5264:	15 97       	sbiw	r26, 0x05	; 5
    5266:	93 81       	ldd	r25, Z+3	; 0x03
    5268:	82 81       	ldd	r24, Z+2	; 0x02
    526a:	98 17       	cp	r25, r24
    526c:	89 f0       	breq	.+34     	; 0x5290 <serial_get_byte+0x34>
    526e:	92 81       	ldd	r25, Z+2	; 0x02
    5270:	85 81       	ldd	r24, Z+5	; 0x05
    5272:	86 95       	lsr	r24
    5274:	89 23       	and	r24, r25
    5276:	a0 81       	ld	r26, Z
    5278:	b1 81       	ldd	r27, Z+1	; 0x01
    527a:	a8 0f       	add	r26, r24
    527c:	b1 1d       	adc	r27, r1
    527e:	8c 91       	ld	r24, X
    5280:	db 01       	movw	r26, r22
    5282:	8c 93       	st	X, r24
    5284:	9f 5f       	subi	r25, 0xFF	; 255
    5286:	85 81       	ldd	r24, Z+5	; 0x05
    5288:	98 23       	and	r25, r24
    528a:	92 83       	std	Z+2, r25	; 0x02
    528c:	80 e0       	ldi	r24, 0x00	; 0
    528e:	08 95       	ret
    5290:	83 e0       	ldi	r24, 0x03	; 3
    5292:	08 95       	ret

00005294 <__vector_25>:
    5294:	1f 92       	push	r1
    5296:	0f 92       	push	r0
    5298:	0f b6       	in	r0, 0x3f	; 63
    529a:	0f 92       	push	r0
    529c:	11 24       	eor	r1, r1
    529e:	0b b6       	in	r0, 0x3b	; 59
    52a0:	0f 92       	push	r0
    52a2:	2f 93       	push	r18
    52a4:	3f 93       	push	r19
    52a6:	4f 93       	push	r20
    52a8:	5f 93       	push	r21
    52aa:	6f 93       	push	r22
    52ac:	7f 93       	push	r23
    52ae:	8f 93       	push	r24
    52b0:	9f 93       	push	r25
    52b2:	af 93       	push	r26
    52b4:	bf 93       	push	r27
    52b6:	cf 93       	push	r28
    52b8:	df 93       	push	r29
    52ba:	ef 93       	push	r30
    52bc:	ff 93       	push	r31
    52be:	a0 91 4c 1a 	lds	r26, 0x1A4C	; 0x801a4c <_ser_handle>
    52c2:	b0 91 4d 1a 	lds	r27, 0x1A4D	; 0x801a4d <_ser_handle+0x1>
    52c6:	10 97       	sbiw	r26, 0x00	; 0
    52c8:	11 f1       	breq	.+68     	; 0x530e <__vector_25+0x7a>
    52ca:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    52ce:	14 96       	adiw	r26, 0x04	; 4
    52d0:	ed 91       	ld	r30, X+
    52d2:	fc 91       	ld	r31, X
    52d4:	15 97       	sbiw	r26, 0x05	; 5
    52d6:	93 81       	ldd	r25, Z+3	; 0x03
    52d8:	82 81       	ldd	r24, Z+2	; 0x02
    52da:	25 81       	ldd	r18, Z+5	; 0x05
    52dc:	98 1b       	sub	r25, r24
    52de:	92 23       	and	r25, r18
    52e0:	84 81       	ldd	r24, Z+4	; 0x04
    52e2:	98 17       	cp	r25, r24
    52e4:	61 f0       	breq	.+24     	; 0x52fe <__vector_25+0x6a>
    52e6:	83 81       	ldd	r24, Z+3	; 0x03
    52e8:	26 95       	lsr	r18
    52ea:	28 23       	and	r18, r24
    52ec:	c0 81       	ld	r28, Z
    52ee:	d1 81       	ldd	r29, Z+1	; 0x01
    52f0:	c2 0f       	add	r28, r18
    52f2:	d1 1d       	adc	r29, r1
    52f4:	68 83       	st	Y, r22
    52f6:	8f 5f       	subi	r24, 0xFF	; 255
    52f8:	95 81       	ldd	r25, Z+5	; 0x05
    52fa:	89 23       	and	r24, r25
    52fc:	83 83       	std	Z+3, r24	; 0x03
    52fe:	16 96       	adiw	r26, 0x06	; 6
    5300:	ed 91       	ld	r30, X+
    5302:	fc 91       	ld	r31, X
    5304:	17 97       	sbiw	r26, 0x07	; 7
    5306:	30 97       	sbiw	r30, 0x00	; 0
    5308:	11 f0       	breq	.+4      	; 0x530e <__vector_25+0x7a>
    530a:	cd 01       	movw	r24, r26
    530c:	19 95       	eicall
    530e:	ff 91       	pop	r31
    5310:	ef 91       	pop	r30
    5312:	df 91       	pop	r29
    5314:	cf 91       	pop	r28
    5316:	bf 91       	pop	r27
    5318:	af 91       	pop	r26
    531a:	9f 91       	pop	r25
    531c:	8f 91       	pop	r24
    531e:	7f 91       	pop	r23
    5320:	6f 91       	pop	r22
    5322:	5f 91       	pop	r21
    5324:	4f 91       	pop	r20
    5326:	3f 91       	pop	r19
    5328:	2f 91       	pop	r18
    532a:	0f 90       	pop	r0
    532c:	0b be       	out	0x3b, r0	; 59
    532e:	0f 90       	pop	r0
    5330:	0f be       	out	0x3f, r0	; 63
    5332:	0f 90       	pop	r0
    5334:	1f 90       	pop	r1
    5336:	18 95       	reti

00005338 <__vector_26>:
    5338:	1f 92       	push	r1
    533a:	0f 92       	push	r0
    533c:	0f b6       	in	r0, 0x3f	; 63
    533e:	0f 92       	push	r0
    5340:	11 24       	eor	r1, r1
    5342:	0b b6       	in	r0, 0x3b	; 59
    5344:	0f 92       	push	r0
    5346:	2f 93       	push	r18
    5348:	8f 93       	push	r24
    534a:	9f 93       	push	r25
    534c:	af 93       	push	r26
    534e:	bf 93       	push	r27
    5350:	ef 93       	push	r30
    5352:	ff 93       	push	r31
    5354:	e0 91 4c 1a 	lds	r30, 0x1A4C	; 0x801a4c <_ser_handle>
    5358:	f0 91 4d 1a 	lds	r31, 0x1A4D	; 0x801a4d <_ser_handle+0x1>
    535c:	30 97       	sbiw	r30, 0x00	; 0
    535e:	b9 f0       	breq	.+46     	; 0x538e <__vector_26+0x56>
    5360:	02 80       	ldd	r0, Z+2	; 0x02
    5362:	f3 81       	ldd	r31, Z+3	; 0x03
    5364:	e0 2d       	mov	r30, r0
    5366:	93 81       	ldd	r25, Z+3	; 0x03
    5368:	82 81       	ldd	r24, Z+2	; 0x02
    536a:	98 17       	cp	r25, r24
    536c:	b1 f0       	breq	.+44     	; 0x539a <__vector_26+0x62>
    536e:	92 81       	ldd	r25, Z+2	; 0x02
    5370:	85 81       	ldd	r24, Z+5	; 0x05
    5372:	28 2f       	mov	r18, r24
    5374:	26 95       	lsr	r18
    5376:	29 23       	and	r18, r25
    5378:	a0 81       	ld	r26, Z
    537a:	b1 81       	ldd	r27, Z+1	; 0x01
    537c:	a2 0f       	add	r26, r18
    537e:	b1 1d       	adc	r27, r1
    5380:	2c 91       	ld	r18, X
    5382:	9f 5f       	subi	r25, 0xFF	; 255
    5384:	89 23       	and	r24, r25
    5386:	82 83       	std	Z+2, r24	; 0x02
    5388:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    538c:	0b c0       	rjmp	.+22     	; 0x53a4 <__vector_26+0x6c>
    538e:	e1 ec       	ldi	r30, 0xC1	; 193
    5390:	f0 e0       	ldi	r31, 0x00	; 0
    5392:	80 81       	ld	r24, Z
    5394:	8f 7d       	andi	r24, 0xDF	; 223
    5396:	80 83       	st	Z, r24
    5398:	05 c0       	rjmp	.+10     	; 0x53a4 <__vector_26+0x6c>
    539a:	e1 ec       	ldi	r30, 0xC1	; 193
    539c:	f0 e0       	ldi	r31, 0x00	; 0
    539e:	80 81       	ld	r24, Z
    53a0:	8f 7d       	andi	r24, 0xDF	; 223
    53a2:	80 83       	st	Z, r24
    53a4:	ff 91       	pop	r31
    53a6:	ef 91       	pop	r30
    53a8:	bf 91       	pop	r27
    53aa:	af 91       	pop	r26
    53ac:	9f 91       	pop	r25
    53ae:	8f 91       	pop	r24
    53b0:	2f 91       	pop	r18
    53b2:	0f 90       	pop	r0
    53b4:	0b be       	out	0x3b, r0	; 59
    53b6:	0f 90       	pop	r0
    53b8:	0f be       	out	0x3f, r0	; 63
    53ba:	0f 90       	pop	r0
    53bc:	1f 90       	pop	r1
    53be:	18 95       	reti

000053c0 <__vector_36>:
    53c0:	1f 92       	push	r1
    53c2:	0f 92       	push	r0
    53c4:	0f b6       	in	r0, 0x3f	; 63
    53c6:	0f 92       	push	r0
    53c8:	11 24       	eor	r1, r1
    53ca:	0b b6       	in	r0, 0x3b	; 59
    53cc:	0f 92       	push	r0
    53ce:	2f 93       	push	r18
    53d0:	3f 93       	push	r19
    53d2:	4f 93       	push	r20
    53d4:	5f 93       	push	r21
    53d6:	6f 93       	push	r22
    53d8:	7f 93       	push	r23
    53da:	8f 93       	push	r24
    53dc:	9f 93       	push	r25
    53de:	af 93       	push	r26
    53e0:	bf 93       	push	r27
    53e2:	cf 93       	push	r28
    53e4:	df 93       	push	r29
    53e6:	ef 93       	push	r30
    53e8:	ff 93       	push	r31
    53ea:	a0 91 4e 1a 	lds	r26, 0x1A4E	; 0x801a4e <_ser_handle+0x2>
    53ee:	b0 91 4f 1a 	lds	r27, 0x1A4F	; 0x801a4f <_ser_handle+0x3>
    53f2:	10 97       	sbiw	r26, 0x00	; 0
    53f4:	11 f1       	breq	.+68     	; 0x543a <__vector_36+0x7a>
    53f6:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    53fa:	14 96       	adiw	r26, 0x04	; 4
    53fc:	ed 91       	ld	r30, X+
    53fe:	fc 91       	ld	r31, X
    5400:	15 97       	sbiw	r26, 0x05	; 5
    5402:	93 81       	ldd	r25, Z+3	; 0x03
    5404:	82 81       	ldd	r24, Z+2	; 0x02
    5406:	25 81       	ldd	r18, Z+5	; 0x05
    5408:	98 1b       	sub	r25, r24
    540a:	92 23       	and	r25, r18
    540c:	84 81       	ldd	r24, Z+4	; 0x04
    540e:	98 17       	cp	r25, r24
    5410:	61 f0       	breq	.+24     	; 0x542a <__vector_36+0x6a>
    5412:	83 81       	ldd	r24, Z+3	; 0x03
    5414:	26 95       	lsr	r18
    5416:	28 23       	and	r18, r24
    5418:	c0 81       	ld	r28, Z
    541a:	d1 81       	ldd	r29, Z+1	; 0x01
    541c:	c2 0f       	add	r28, r18
    541e:	d1 1d       	adc	r29, r1
    5420:	68 83       	st	Y, r22
    5422:	8f 5f       	subi	r24, 0xFF	; 255
    5424:	95 81       	ldd	r25, Z+5	; 0x05
    5426:	89 23       	and	r24, r25
    5428:	83 83       	std	Z+3, r24	; 0x03
    542a:	16 96       	adiw	r26, 0x06	; 6
    542c:	ed 91       	ld	r30, X+
    542e:	fc 91       	ld	r31, X
    5430:	17 97       	sbiw	r26, 0x07	; 7
    5432:	30 97       	sbiw	r30, 0x00	; 0
    5434:	11 f0       	breq	.+4      	; 0x543a <__vector_36+0x7a>
    5436:	cd 01       	movw	r24, r26
    5438:	19 95       	eicall
    543a:	ff 91       	pop	r31
    543c:	ef 91       	pop	r30
    543e:	df 91       	pop	r29
    5440:	cf 91       	pop	r28
    5442:	bf 91       	pop	r27
    5444:	af 91       	pop	r26
    5446:	9f 91       	pop	r25
    5448:	8f 91       	pop	r24
    544a:	7f 91       	pop	r23
    544c:	6f 91       	pop	r22
    544e:	5f 91       	pop	r21
    5450:	4f 91       	pop	r20
    5452:	3f 91       	pop	r19
    5454:	2f 91       	pop	r18
    5456:	0f 90       	pop	r0
    5458:	0b be       	out	0x3b, r0	; 59
    545a:	0f 90       	pop	r0
    545c:	0f be       	out	0x3f, r0	; 63
    545e:	0f 90       	pop	r0
    5460:	1f 90       	pop	r1
    5462:	18 95       	reti

00005464 <__vector_37>:
    5464:	1f 92       	push	r1
    5466:	0f 92       	push	r0
    5468:	0f b6       	in	r0, 0x3f	; 63
    546a:	0f 92       	push	r0
    546c:	11 24       	eor	r1, r1
    546e:	0b b6       	in	r0, 0x3b	; 59
    5470:	0f 92       	push	r0
    5472:	2f 93       	push	r18
    5474:	8f 93       	push	r24
    5476:	9f 93       	push	r25
    5478:	af 93       	push	r26
    547a:	bf 93       	push	r27
    547c:	ef 93       	push	r30
    547e:	ff 93       	push	r31
    5480:	e0 91 4e 1a 	lds	r30, 0x1A4E	; 0x801a4e <_ser_handle+0x2>
    5484:	f0 91 4f 1a 	lds	r31, 0x1A4F	; 0x801a4f <_ser_handle+0x3>
    5488:	30 97       	sbiw	r30, 0x00	; 0
    548a:	b9 f0       	breq	.+46     	; 0x54ba <__vector_37+0x56>
    548c:	02 80       	ldd	r0, Z+2	; 0x02
    548e:	f3 81       	ldd	r31, Z+3	; 0x03
    5490:	e0 2d       	mov	r30, r0
    5492:	93 81       	ldd	r25, Z+3	; 0x03
    5494:	82 81       	ldd	r24, Z+2	; 0x02
    5496:	98 17       	cp	r25, r24
    5498:	b1 f0       	breq	.+44     	; 0x54c6 <__vector_37+0x62>
    549a:	92 81       	ldd	r25, Z+2	; 0x02
    549c:	85 81       	ldd	r24, Z+5	; 0x05
    549e:	28 2f       	mov	r18, r24
    54a0:	26 95       	lsr	r18
    54a2:	29 23       	and	r18, r25
    54a4:	a0 81       	ld	r26, Z
    54a6:	b1 81       	ldd	r27, Z+1	; 0x01
    54a8:	a2 0f       	add	r26, r18
    54aa:	b1 1d       	adc	r27, r1
    54ac:	2c 91       	ld	r18, X
    54ae:	9f 5f       	subi	r25, 0xFF	; 255
    54b0:	89 23       	and	r24, r25
    54b2:	82 83       	std	Z+2, r24	; 0x02
    54b4:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    54b8:	0b c0       	rjmp	.+22     	; 0x54d0 <__vector_37+0x6c>
    54ba:	e9 ec       	ldi	r30, 0xC9	; 201
    54bc:	f0 e0       	ldi	r31, 0x00	; 0
    54be:	80 81       	ld	r24, Z
    54c0:	8f 7d       	andi	r24, 0xDF	; 223
    54c2:	80 83       	st	Z, r24
    54c4:	05 c0       	rjmp	.+10     	; 0x54d0 <__vector_37+0x6c>
    54c6:	e9 ec       	ldi	r30, 0xC9	; 201
    54c8:	f0 e0       	ldi	r31, 0x00	; 0
    54ca:	80 81       	ld	r24, Z
    54cc:	8f 7d       	andi	r24, 0xDF	; 223
    54ce:	80 83       	st	Z, r24
    54d0:	ff 91       	pop	r31
    54d2:	ef 91       	pop	r30
    54d4:	bf 91       	pop	r27
    54d6:	af 91       	pop	r26
    54d8:	9f 91       	pop	r25
    54da:	8f 91       	pop	r24
    54dc:	2f 91       	pop	r18
    54de:	0f 90       	pop	r0
    54e0:	0b be       	out	0x3b, r0	; 59
    54e2:	0f 90       	pop	r0
    54e4:	0f be       	out	0x3f, r0	; 63
    54e6:	0f 90       	pop	r0
    54e8:	1f 90       	pop	r1
    54ea:	18 95       	reti

000054ec <__vector_51>:
    54ec:	1f 92       	push	r1
    54ee:	0f 92       	push	r0
    54f0:	0f b6       	in	r0, 0x3f	; 63
    54f2:	0f 92       	push	r0
    54f4:	11 24       	eor	r1, r1
    54f6:	0b b6       	in	r0, 0x3b	; 59
    54f8:	0f 92       	push	r0
    54fa:	2f 93       	push	r18
    54fc:	3f 93       	push	r19
    54fe:	4f 93       	push	r20
    5500:	5f 93       	push	r21
    5502:	6f 93       	push	r22
    5504:	7f 93       	push	r23
    5506:	8f 93       	push	r24
    5508:	9f 93       	push	r25
    550a:	af 93       	push	r26
    550c:	bf 93       	push	r27
    550e:	cf 93       	push	r28
    5510:	df 93       	push	r29
    5512:	ef 93       	push	r30
    5514:	ff 93       	push	r31
    5516:	a0 91 50 1a 	lds	r26, 0x1A50	; 0x801a50 <_ser_handle+0x4>
    551a:	b0 91 51 1a 	lds	r27, 0x1A51	; 0x801a51 <_ser_handle+0x5>
    551e:	10 97       	sbiw	r26, 0x00	; 0
    5520:	11 f1       	breq	.+68     	; 0x5566 <__vector_51+0x7a>
    5522:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    5526:	14 96       	adiw	r26, 0x04	; 4
    5528:	ed 91       	ld	r30, X+
    552a:	fc 91       	ld	r31, X
    552c:	15 97       	sbiw	r26, 0x05	; 5
    552e:	93 81       	ldd	r25, Z+3	; 0x03
    5530:	82 81       	ldd	r24, Z+2	; 0x02
    5532:	25 81       	ldd	r18, Z+5	; 0x05
    5534:	98 1b       	sub	r25, r24
    5536:	92 23       	and	r25, r18
    5538:	84 81       	ldd	r24, Z+4	; 0x04
    553a:	98 17       	cp	r25, r24
    553c:	61 f0       	breq	.+24     	; 0x5556 <__vector_51+0x6a>
    553e:	83 81       	ldd	r24, Z+3	; 0x03
    5540:	26 95       	lsr	r18
    5542:	28 23       	and	r18, r24
    5544:	c0 81       	ld	r28, Z
    5546:	d1 81       	ldd	r29, Z+1	; 0x01
    5548:	c2 0f       	add	r28, r18
    554a:	d1 1d       	adc	r29, r1
    554c:	68 83       	st	Y, r22
    554e:	8f 5f       	subi	r24, 0xFF	; 255
    5550:	95 81       	ldd	r25, Z+5	; 0x05
    5552:	89 23       	and	r24, r25
    5554:	83 83       	std	Z+3, r24	; 0x03
    5556:	16 96       	adiw	r26, 0x06	; 6
    5558:	ed 91       	ld	r30, X+
    555a:	fc 91       	ld	r31, X
    555c:	17 97       	sbiw	r26, 0x07	; 7
    555e:	30 97       	sbiw	r30, 0x00	; 0
    5560:	11 f0       	breq	.+4      	; 0x5566 <__vector_51+0x7a>
    5562:	cd 01       	movw	r24, r26
    5564:	19 95       	eicall
    5566:	ff 91       	pop	r31
    5568:	ef 91       	pop	r30
    556a:	df 91       	pop	r29
    556c:	cf 91       	pop	r28
    556e:	bf 91       	pop	r27
    5570:	af 91       	pop	r26
    5572:	9f 91       	pop	r25
    5574:	8f 91       	pop	r24
    5576:	7f 91       	pop	r23
    5578:	6f 91       	pop	r22
    557a:	5f 91       	pop	r21
    557c:	4f 91       	pop	r20
    557e:	3f 91       	pop	r19
    5580:	2f 91       	pop	r18
    5582:	0f 90       	pop	r0
    5584:	0b be       	out	0x3b, r0	; 59
    5586:	0f 90       	pop	r0
    5588:	0f be       	out	0x3f, r0	; 63
    558a:	0f 90       	pop	r0
    558c:	1f 90       	pop	r1
    558e:	18 95       	reti

00005590 <__vector_52>:
    5590:	1f 92       	push	r1
    5592:	0f 92       	push	r0
    5594:	0f b6       	in	r0, 0x3f	; 63
    5596:	0f 92       	push	r0
    5598:	11 24       	eor	r1, r1
    559a:	0b b6       	in	r0, 0x3b	; 59
    559c:	0f 92       	push	r0
    559e:	2f 93       	push	r18
    55a0:	8f 93       	push	r24
    55a2:	9f 93       	push	r25
    55a4:	af 93       	push	r26
    55a6:	bf 93       	push	r27
    55a8:	ef 93       	push	r30
    55aa:	ff 93       	push	r31
    55ac:	e0 91 50 1a 	lds	r30, 0x1A50	; 0x801a50 <_ser_handle+0x4>
    55b0:	f0 91 51 1a 	lds	r31, 0x1A51	; 0x801a51 <_ser_handle+0x5>
    55b4:	30 97       	sbiw	r30, 0x00	; 0
    55b6:	b9 f0       	breq	.+46     	; 0x55e6 <__vector_52+0x56>
    55b8:	02 80       	ldd	r0, Z+2	; 0x02
    55ba:	f3 81       	ldd	r31, Z+3	; 0x03
    55bc:	e0 2d       	mov	r30, r0
    55be:	93 81       	ldd	r25, Z+3	; 0x03
    55c0:	82 81       	ldd	r24, Z+2	; 0x02
    55c2:	98 17       	cp	r25, r24
    55c4:	b1 f0       	breq	.+44     	; 0x55f2 <__vector_52+0x62>
    55c6:	92 81       	ldd	r25, Z+2	; 0x02
    55c8:	85 81       	ldd	r24, Z+5	; 0x05
    55ca:	28 2f       	mov	r18, r24
    55cc:	26 95       	lsr	r18
    55ce:	29 23       	and	r18, r25
    55d0:	a0 81       	ld	r26, Z
    55d2:	b1 81       	ldd	r27, Z+1	; 0x01
    55d4:	a2 0f       	add	r26, r18
    55d6:	b1 1d       	adc	r27, r1
    55d8:	2c 91       	ld	r18, X
    55da:	9f 5f       	subi	r25, 0xFF	; 255
    55dc:	89 23       	and	r24, r25
    55de:	82 83       	std	Z+2, r24	; 0x02
    55e0:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    55e4:	0b c0       	rjmp	.+22     	; 0x55fc <__vector_52+0x6c>
    55e6:	e1 ed       	ldi	r30, 0xD1	; 209
    55e8:	f0 e0       	ldi	r31, 0x00	; 0
    55ea:	80 81       	ld	r24, Z
    55ec:	8f 7d       	andi	r24, 0xDF	; 223
    55ee:	80 83       	st	Z, r24
    55f0:	05 c0       	rjmp	.+10     	; 0x55fc <__vector_52+0x6c>
    55f2:	e1 ed       	ldi	r30, 0xD1	; 209
    55f4:	f0 e0       	ldi	r31, 0x00	; 0
    55f6:	80 81       	ld	r24, Z
    55f8:	8f 7d       	andi	r24, 0xDF	; 223
    55fa:	80 83       	st	Z, r24
    55fc:	ff 91       	pop	r31
    55fe:	ef 91       	pop	r30
    5600:	bf 91       	pop	r27
    5602:	af 91       	pop	r26
    5604:	9f 91       	pop	r25
    5606:	8f 91       	pop	r24
    5608:	2f 91       	pop	r18
    560a:	0f 90       	pop	r0
    560c:	0b be       	out	0x3b, r0	; 59
    560e:	0f 90       	pop	r0
    5610:	0f be       	out	0x3f, r0	; 63
    5612:	0f 90       	pop	r0
    5614:	1f 90       	pop	r1
    5616:	18 95       	reti

00005618 <__vector_54>:
    5618:	1f 92       	push	r1
    561a:	0f 92       	push	r0
    561c:	0f b6       	in	r0, 0x3f	; 63
    561e:	0f 92       	push	r0
    5620:	11 24       	eor	r1, r1
    5622:	0b b6       	in	r0, 0x3b	; 59
    5624:	0f 92       	push	r0
    5626:	2f 93       	push	r18
    5628:	3f 93       	push	r19
    562a:	4f 93       	push	r20
    562c:	5f 93       	push	r21
    562e:	6f 93       	push	r22
    5630:	7f 93       	push	r23
    5632:	8f 93       	push	r24
    5634:	9f 93       	push	r25
    5636:	af 93       	push	r26
    5638:	bf 93       	push	r27
    563a:	cf 93       	push	r28
    563c:	df 93       	push	r29
    563e:	ef 93       	push	r30
    5640:	ff 93       	push	r31
    5642:	a0 91 52 1a 	lds	r26, 0x1A52	; 0x801a52 <_ser_handle+0x6>
    5646:	b0 91 53 1a 	lds	r27, 0x1A53	; 0x801a53 <_ser_handle+0x7>
    564a:	10 97       	sbiw	r26, 0x00	; 0
    564c:	11 f1       	breq	.+68     	; 0x5692 <__vector_54+0x7a>
    564e:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    5652:	14 96       	adiw	r26, 0x04	; 4
    5654:	ed 91       	ld	r30, X+
    5656:	fc 91       	ld	r31, X
    5658:	15 97       	sbiw	r26, 0x05	; 5
    565a:	93 81       	ldd	r25, Z+3	; 0x03
    565c:	82 81       	ldd	r24, Z+2	; 0x02
    565e:	25 81       	ldd	r18, Z+5	; 0x05
    5660:	98 1b       	sub	r25, r24
    5662:	92 23       	and	r25, r18
    5664:	84 81       	ldd	r24, Z+4	; 0x04
    5666:	98 17       	cp	r25, r24
    5668:	61 f0       	breq	.+24     	; 0x5682 <__vector_54+0x6a>
    566a:	83 81       	ldd	r24, Z+3	; 0x03
    566c:	26 95       	lsr	r18
    566e:	28 23       	and	r18, r24
    5670:	c0 81       	ld	r28, Z
    5672:	d1 81       	ldd	r29, Z+1	; 0x01
    5674:	c2 0f       	add	r28, r18
    5676:	d1 1d       	adc	r29, r1
    5678:	68 83       	st	Y, r22
    567a:	8f 5f       	subi	r24, 0xFF	; 255
    567c:	95 81       	ldd	r25, Z+5	; 0x05
    567e:	89 23       	and	r24, r25
    5680:	83 83       	std	Z+3, r24	; 0x03
    5682:	16 96       	adiw	r26, 0x06	; 6
    5684:	ed 91       	ld	r30, X+
    5686:	fc 91       	ld	r31, X
    5688:	17 97       	sbiw	r26, 0x07	; 7
    568a:	30 97       	sbiw	r30, 0x00	; 0
    568c:	11 f0       	breq	.+4      	; 0x5692 <__vector_54+0x7a>
    568e:	cd 01       	movw	r24, r26
    5690:	19 95       	eicall
    5692:	ff 91       	pop	r31
    5694:	ef 91       	pop	r30
    5696:	df 91       	pop	r29
    5698:	cf 91       	pop	r28
    569a:	bf 91       	pop	r27
    569c:	af 91       	pop	r26
    569e:	9f 91       	pop	r25
    56a0:	8f 91       	pop	r24
    56a2:	7f 91       	pop	r23
    56a4:	6f 91       	pop	r22
    56a6:	5f 91       	pop	r21
    56a8:	4f 91       	pop	r20
    56aa:	3f 91       	pop	r19
    56ac:	2f 91       	pop	r18
    56ae:	0f 90       	pop	r0
    56b0:	0b be       	out	0x3b, r0	; 59
    56b2:	0f 90       	pop	r0
    56b4:	0f be       	out	0x3f, r0	; 63
    56b6:	0f 90       	pop	r0
    56b8:	1f 90       	pop	r1
    56ba:	18 95       	reti

000056bc <__vector_55>:
    56bc:	1f 92       	push	r1
    56be:	0f 92       	push	r0
    56c0:	0f b6       	in	r0, 0x3f	; 63
    56c2:	0f 92       	push	r0
    56c4:	11 24       	eor	r1, r1
    56c6:	0b b6       	in	r0, 0x3b	; 59
    56c8:	0f 92       	push	r0
    56ca:	2f 93       	push	r18
    56cc:	8f 93       	push	r24
    56ce:	9f 93       	push	r25
    56d0:	af 93       	push	r26
    56d2:	bf 93       	push	r27
    56d4:	ef 93       	push	r30
    56d6:	ff 93       	push	r31
    56d8:	e0 91 52 1a 	lds	r30, 0x1A52	; 0x801a52 <_ser_handle+0x6>
    56dc:	f0 91 53 1a 	lds	r31, 0x1A53	; 0x801a53 <_ser_handle+0x7>
    56e0:	30 97       	sbiw	r30, 0x00	; 0
    56e2:	b9 f0       	breq	.+46     	; 0x5712 <__vector_55+0x56>
    56e4:	02 80       	ldd	r0, Z+2	; 0x02
    56e6:	f3 81       	ldd	r31, Z+3	; 0x03
    56e8:	e0 2d       	mov	r30, r0
    56ea:	93 81       	ldd	r25, Z+3	; 0x03
    56ec:	82 81       	ldd	r24, Z+2	; 0x02
    56ee:	98 17       	cp	r25, r24
    56f0:	b1 f0       	breq	.+44     	; 0x571e <__vector_55+0x62>
    56f2:	92 81       	ldd	r25, Z+2	; 0x02
    56f4:	85 81       	ldd	r24, Z+5	; 0x05
    56f6:	28 2f       	mov	r18, r24
    56f8:	26 95       	lsr	r18
    56fa:	29 23       	and	r18, r25
    56fc:	a0 81       	ld	r26, Z
    56fe:	b1 81       	ldd	r27, Z+1	; 0x01
    5700:	a2 0f       	add	r26, r18
    5702:	b1 1d       	adc	r27, r1
    5704:	2c 91       	ld	r18, X
    5706:	9f 5f       	subi	r25, 0xFF	; 255
    5708:	89 23       	and	r24, r25
    570a:	82 83       	std	Z+2, r24	; 0x02
    570c:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    5710:	0b c0       	rjmp	.+22     	; 0x5728 <__vector_55+0x6c>
    5712:	e1 e3       	ldi	r30, 0x31	; 49
    5714:	f1 e0       	ldi	r31, 0x01	; 1
    5716:	80 81       	ld	r24, Z
    5718:	8f 7d       	andi	r24, 0xDF	; 223
    571a:	80 83       	st	Z, r24
    571c:	05 c0       	rjmp	.+10     	; 0x5728 <__vector_55+0x6c>
    571e:	e1 e3       	ldi	r30, 0x31	; 49
    5720:	f1 e0       	ldi	r31, 0x01	; 1
    5722:	80 81       	ld	r24, Z
    5724:	8f 7d       	andi	r24, 0xDF	; 223
    5726:	80 83       	st	Z, r24
    5728:	ff 91       	pop	r31
    572a:	ef 91       	pop	r30
    572c:	bf 91       	pop	r27
    572e:	af 91       	pop	r26
    5730:	9f 91       	pop	r25
    5732:	8f 91       	pop	r24
    5734:	2f 91       	pop	r18
    5736:	0f 90       	pop	r0
    5738:	0b be       	out	0x3b, r0	; 59
    573a:	0f 90       	pop	r0
    573c:	0f be       	out	0x3f, r0	; 63
    573e:	0f 90       	pop	r0
    5740:	1f 90       	pop	r1
    5742:	18 95       	reti

00005744 <usart_getchar>:
    5744:	cf 93       	push	r28
    5746:	df 93       	push	r29
    5748:	1f 92       	push	r1
    574a:	cd b7       	in	r28, 0x3d	; 61
    574c:	de b7       	in	r29, 0x3e	; 62
    574e:	be 01       	movw	r22, r28
    5750:	6f 5f       	subi	r22, 0xFF	; 255
    5752:	7f 4f       	sbci	r23, 0xFF	; 255
    5754:	80 91 54 1a 	lds	r24, 0x1A54	; 0x801a54 <_com_serial_instance>
    5758:	90 91 55 1a 	lds	r25, 0x1A55	; 0x801a55 <_com_serial_instance+0x1>
    575c:	7f dd       	rcall	.-1282   	; 0x525c <serial_get_byte>
    575e:	81 11       	cpse	r24, r1
    5760:	f6 cf       	rjmp	.-20     	; 0x574e <usart_getchar+0xa>
    5762:	89 81       	ldd	r24, Y+1	; 0x01
    5764:	90 e0       	ldi	r25, 0x00	; 0
    5766:	0f 90       	pop	r0
    5768:	df 91       	pop	r29
    576a:	cf 91       	pop	r28
    576c:	08 95       	ret

0000576e <usart_putchar>:
    576e:	68 2f       	mov	r22, r24
    5770:	80 91 54 1a 	lds	r24, 0x1A54	; 0x801a54 <_com_serial_instance>
    5774:	90 91 55 1a 	lds	r25, 0x1A55	; 0x801a55 <_com_serial_instance+0x1>
    5778:	fc dc       	rcall	.-1544   	; 0x5172 <serial_send_byte>
    577a:	80 e0       	ldi	r24, 0x00	; 0
    577c:	90 e0       	ldi	r25, 0x00	; 0
    577e:	08 95       	ret

00005780 <stdioCreate>:
    5780:	8f 92       	push	r8
    5782:	9f 92       	push	r9
    5784:	af 92       	push	r10
    5786:	cf 92       	push	r12
    5788:	ef 92       	push	r14
    578a:	0f 93       	push	r16
    578c:	81 2c       	mov	r8, r1
    578e:	91 2c       	mov	r9, r1
    5790:	68 94       	set
    5792:	aa 24       	eor	r10, r10
    5794:	a7 f8       	bld	r10, 7
    5796:	68 94       	set
    5798:	cc 24       	eor	r12, r12
    579a:	c7 f8       	bld	r12, 7
    579c:	e1 2c       	mov	r14, r1
    579e:	00 e0       	ldi	r16, 0x00	; 0
    57a0:	23 e0       	ldi	r18, 0x03	; 3
    57a2:	40 e0       	ldi	r20, 0x00	; 0
    57a4:	51 ee       	ldi	r21, 0xE1	; 225
    57a6:	60 e0       	ldi	r22, 0x00	; 0
    57a8:	70 e0       	ldi	r23, 0x00	; 0
    57aa:	4d dc       	rcall	.-1894   	; 0x5046 <serial_new_instance>
    57ac:	90 93 55 1a 	sts	0x1A55, r25	; 0x801a55 <_com_serial_instance+0x1>
    57b0:	80 93 54 1a 	sts	0x1A54, r24	; 0x801a54 <_com_serial_instance>
    57b4:	ef e9       	ldi	r30, 0x9F	; 159
    57b6:	fa e1       	ldi	r31, 0x1A	; 26
    57b8:	86 e1       	ldi	r24, 0x16	; 22
    57ba:	92 e0       	ldi	r25, 0x02	; 2
    57bc:	91 83       	std	Z+1, r25	; 0x01
    57be:	80 83       	st	Z, r24
    57c0:	93 83       	std	Z+3, r25	; 0x03
    57c2:	82 83       	std	Z+2, r24	; 0x02
    57c4:	0f 91       	pop	r16
    57c6:	ef 90       	pop	r14
    57c8:	cf 90       	pop	r12
    57ca:	af 90       	pop	r10
    57cc:	9f 90       	pop	r9
    57ce:	8f 90       	pop	r8
    57d0:	08 95       	ret

000057d2 <_initTwiInterface>:
    57d2:	80 91 64 1a 	lds	r24, 0x1A64	; 0x801a64 <_twiIsInitiated>
    57d6:	81 11       	cpse	r24, r1
    57d8:	0c c0       	rjmp	.+24     	; 0x57f2 <_initTwiInterface+0x20>
    57da:	8c e0       	ldi	r24, 0x0C	; 12
    57dc:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    57e0:	8f ef       	ldi	r24, 0xFF	; 255
    57e2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    57e6:	84 e0       	ldi	r24, 0x04	; 4
    57e8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    57ec:	81 e0       	ldi	r24, 0x01	; 1
    57ee:	80 93 64 1a 	sts	0x1A64, r24	; 0x801a64 <_twiIsInitiated>
    57f2:	08 95       	ret

000057f4 <twiCreate>:
    57f4:	af 92       	push	r10
    57f6:	bf 92       	push	r11
    57f8:	cf 92       	push	r12
    57fa:	df 92       	push	r13
    57fc:	ef 92       	push	r14
    57fe:	ff 92       	push	r15
    5800:	0f 93       	push	r16
    5802:	1f 93       	push	r17
    5804:	cf 93       	push	r28
    5806:	df 93       	push	r29
    5808:	a8 2e       	mov	r10, r24
    580a:	b6 2e       	mov	r11, r22
    580c:	69 01       	movw	r12, r18
    580e:	7a 01       	movw	r14, r20
    5810:	84 e0       	ldi	r24, 0x04	; 4
    5812:	90 e0       	ldi	r25, 0x00	; 0
    5814:	f2 d3       	rcall	.+2020   	; 0x5ffa <malloc>
    5816:	ec 01       	movw	r28, r24
    5818:	89 2b       	or	r24, r25
    581a:	61 f1       	breq	.+88     	; 0x5874 <twiCreate+0x80>
    581c:	a8 82       	st	Y, r10
    581e:	81 e0       	ldi	r24, 0x01	; 1
    5820:	b8 12       	cpse	r11, r24
    5822:	12 c0       	rjmp	.+36     	; 0x5848 <twiCreate+0x54>
    5824:	c7 01       	movw	r24, r14
    5826:	b6 01       	movw	r22, r12
    5828:	20 ea       	ldi	r18, 0xA0	; 160
    582a:	36 e8       	ldi	r19, 0x86	; 134
    582c:	41 e0       	ldi	r20, 0x01	; 1
    582e:	50 e0       	ldi	r21, 0x00	; 0
    5830:	8c d3       	rcall	.+1816   	; 0x5f4a <__udivmodsi4>
    5832:	da 01       	movw	r26, r20
    5834:	c9 01       	movw	r24, r18
    5836:	40 97       	sbiw	r24, 0x10	; 16
    5838:	a1 09       	sbc	r26, r1
    583a:	b1 09       	sbc	r27, r1
    583c:	b6 95       	lsr	r27
    583e:	a7 95       	ror	r26
    5840:	97 95       	ror	r25
    5842:	87 95       	ror	r24
    5844:	89 83       	std	Y+1, r24	; 0x01
    5846:	11 c0       	rjmp	.+34     	; 0x586a <twiCreate+0x76>
    5848:	c7 01       	movw	r24, r14
    584a:	b6 01       	movw	r22, r12
    584c:	20 e8       	ldi	r18, 0x80	; 128
    584e:	3a e1       	ldi	r19, 0x1A	; 26
    5850:	46 e0       	ldi	r20, 0x06	; 6
    5852:	50 e0       	ldi	r21, 0x00	; 0
    5854:	7a d3       	rcall	.+1780   	; 0x5f4a <__udivmodsi4>
    5856:	da 01       	movw	r26, r20
    5858:	c9 01       	movw	r24, r18
    585a:	40 97       	sbiw	r24, 0x10	; 16
    585c:	a1 09       	sbc	r26, r1
    585e:	b1 09       	sbc	r27, r1
    5860:	b6 95       	lsr	r27
    5862:	a7 95       	ror	r26
    5864:	97 95       	ror	r25
    5866:	87 95       	ror	r24
    5868:	89 83       	std	Y+1, r24	; 0x01
    586a:	1b 83       	std	Y+3, r17	; 0x03
    586c:	0a 83       	std	Y+2, r16	; 0x02
    586e:	8c 2f       	mov	r24, r28
    5870:	9d 2f       	mov	r25, r29
    5872:	02 c0       	rjmp	.+4      	; 0x5878 <twiCreate+0x84>
    5874:	80 e0       	ldi	r24, 0x00	; 0
    5876:	90 e0       	ldi	r25, 0x00	; 0
    5878:	df 91       	pop	r29
    587a:	cf 91       	pop	r28
    587c:	1f 91       	pop	r17
    587e:	0f 91       	pop	r16
    5880:	ff 90       	pop	r15
    5882:	ef 90       	pop	r14
    5884:	df 90       	pop	r13
    5886:	cf 90       	pop	r12
    5888:	bf 90       	pop	r11
    588a:	af 90       	pop	r10
    588c:	08 95       	ret

0000588e <twiIsBusy>:
    588e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    5892:	81 70       	andi	r24, 0x01	; 1
    5894:	08 95       	ret

00005896 <twiTransmit>:
    5896:	ff 92       	push	r15
    5898:	0f 93       	push	r16
    589a:	1f 93       	push	r17
    589c:	cf 93       	push	r28
    589e:	df 93       	push	r29
    58a0:	00 97       	sbiw	r24, 0x00	; 0
    58a2:	d1 f1       	breq	.+116    	; 0x5918 <twiTransmit+0x82>
    58a4:	4a 30       	cpi	r20, 0x0A	; 10
    58a6:	d0 f5       	brcc	.+116    	; 0x591c <twiTransmit+0x86>
    58a8:	f4 2e       	mov	r15, r20
    58aa:	8b 01       	movw	r16, r22
    58ac:	ec 01       	movw	r28, r24
    58ae:	ef df       	rcall	.-34     	; 0x588e <twiIsBusy>
    58b0:	81 11       	cpse	r24, r1
    58b2:	36 c0       	rjmp	.+108    	; 0x5920 <twiTransmit+0x8a>
    58b4:	80 91 57 1a 	lds	r24, 0x1A57	; 0x801a57 <_twiCurrentHandler>
    58b8:	90 91 58 1a 	lds	r25, 0x1A58	; 0x801a58 <_twiCurrentHandler+0x1>
    58bc:	c8 17       	cp	r28, r24
    58be:	d9 07       	cpc	r29, r25
    58c0:	41 f0       	breq	.+16     	; 0x58d2 <twiTransmit+0x3c>
    58c2:	87 df       	rcall	.-242    	; 0x57d2 <_initTwiInterface>
    58c4:	89 81       	ldd	r24, Y+1	; 0x01
    58c6:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    58ca:	d0 93 58 1a 	sts	0x1A58, r29	; 0x801a58 <_twiCurrentHandler+0x1>
    58ce:	c0 93 57 1a 	sts	0x1A57, r28	; 0x801a57 <_twiCurrentHandler>
    58d2:	81 e0       	ldi	r24, 0x01	; 1
    58d4:	8f 0d       	add	r24, r15
    58d6:	80 93 59 1a 	sts	0x1A59, r24	; 0x801a59 <_twiMessageLen>
    58da:	88 81       	ld	r24, Y
    58dc:	88 0f       	add	r24, r24
    58de:	80 93 5a 1a 	sts	0x1A5A, r24	; 0x801a5a <_twiMessageBuffer>
    58e2:	ff 20       	and	r15, r15
    58e4:	89 f0       	breq	.+34     	; 0x5908 <twiTransmit+0x72>
    58e6:	f8 01       	movw	r30, r16
    58e8:	ab e5       	ldi	r26, 0x5B	; 91
    58ea:	ba e1       	ldi	r27, 0x1A	; 26
    58ec:	4f ef       	ldi	r20, 0xFF	; 255
    58ee:	4f 0d       	add	r20, r15
    58f0:	64 2f       	mov	r22, r20
    58f2:	70 e0       	ldi	r23, 0x00	; 0
    58f4:	cb 01       	movw	r24, r22
    58f6:	01 96       	adiw	r24, 0x01	; 1
    58f8:	b8 01       	movw	r22, r16
    58fa:	68 0f       	add	r22, r24
    58fc:	79 1f       	adc	r23, r25
    58fe:	81 91       	ld	r24, Z+
    5900:	8d 93       	st	X+, r24
    5902:	e6 17       	cp	r30, r22
    5904:	f7 07       	cpc	r31, r23
    5906:	d9 f7       	brne	.-10     	; 0x58fe <twiTransmit+0x68>
    5908:	88 ef       	ldi	r24, 0xF8	; 248
    590a:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <_twiCurrentState>
    590e:	85 ea       	ldi	r24, 0xA5	; 165
    5910:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    5914:	84 e0       	ldi	r24, 0x04	; 4
    5916:	05 c0       	rjmp	.+10     	; 0x5922 <twiTransmit+0x8c>
    5918:	86 e0       	ldi	r24, 0x06	; 6
    591a:	03 c0       	rjmp	.+6      	; 0x5922 <twiTransmit+0x8c>
    591c:	87 e0       	ldi	r24, 0x07	; 7
    591e:	01 c0       	rjmp	.+2      	; 0x5922 <twiTransmit+0x8c>
    5920:	82 e0       	ldi	r24, 0x02	; 2
    5922:	df 91       	pop	r29
    5924:	cf 91       	pop	r28
    5926:	1f 91       	pop	r17
    5928:	0f 91       	pop	r16
    592a:	ff 90       	pop	r15
    592c:	08 95       	ret

0000592e <twiReceive>:
    592e:	1f 93       	push	r17
    5930:	cf 93       	push	r28
    5932:	df 93       	push	r29
    5934:	00 97       	sbiw	r24, 0x00	; 0
    5936:	29 f1       	breq	.+74     	; 0x5982 <twiReceive+0x54>
    5938:	6b 30       	cpi	r22, 0x0B	; 11
    593a:	28 f5       	brcc	.+74     	; 0x5986 <twiReceive+0x58>
    593c:	16 2f       	mov	r17, r22
    593e:	ec 01       	movw	r28, r24
    5940:	a6 df       	rcall	.-180    	; 0x588e <twiIsBusy>
    5942:	81 11       	cpse	r24, r1
    5944:	22 c0       	rjmp	.+68     	; 0x598a <twiReceive+0x5c>
    5946:	80 91 57 1a 	lds	r24, 0x1A57	; 0x801a57 <_twiCurrentHandler>
    594a:	90 91 58 1a 	lds	r25, 0x1A58	; 0x801a58 <_twiCurrentHandler+0x1>
    594e:	c8 17       	cp	r28, r24
    5950:	d9 07       	cpc	r29, r25
    5952:	41 f0       	breq	.+16     	; 0x5964 <twiReceive+0x36>
    5954:	3e df       	rcall	.-388    	; 0x57d2 <_initTwiInterface>
    5956:	89 81       	ldd	r24, Y+1	; 0x01
    5958:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    595c:	d0 93 58 1a 	sts	0x1A58, r29	; 0x801a58 <_twiCurrentHandler+0x1>
    5960:	c0 93 57 1a 	sts	0x1A57, r28	; 0x801a57 <_twiCurrentHandler>
    5964:	10 93 59 1a 	sts	0x1A59, r17	; 0x801a59 <_twiMessageLen>
    5968:	88 81       	ld	r24, Y
    596a:	88 0f       	add	r24, r24
    596c:	81 60       	ori	r24, 0x01	; 1
    596e:	80 93 5a 1a 	sts	0x1A5A, r24	; 0x801a5a <_twiMessageBuffer>
    5972:	88 ef       	ldi	r24, 0xF8	; 248
    5974:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <_twiCurrentState>
    5978:	85 ea       	ldi	r24, 0xA5	; 165
    597a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    597e:	85 e0       	ldi	r24, 0x05	; 5
    5980:	05 c0       	rjmp	.+10     	; 0x598c <twiReceive+0x5e>
    5982:	86 e0       	ldi	r24, 0x06	; 6
    5984:	03 c0       	rjmp	.+6      	; 0x598c <twiReceive+0x5e>
    5986:	87 e0       	ldi	r24, 0x07	; 7
    5988:	01 c0       	rjmp	.+2      	; 0x598c <twiReceive+0x5e>
    598a:	82 e0       	ldi	r24, 0x02	; 2
    598c:	df 91       	pop	r29
    598e:	cf 91       	pop	r28
    5990:	1f 91       	pop	r17
    5992:	08 95       	ret

00005994 <__vector_39>:
    5994:	1f 92       	push	r1
    5996:	0f 92       	push	r0
    5998:	0f b6       	in	r0, 0x3f	; 63
    599a:	0f 92       	push	r0
    599c:	11 24       	eor	r1, r1
    599e:	0b b6       	in	r0, 0x3b	; 59
    59a0:	0f 92       	push	r0
    59a2:	2f 93       	push	r18
    59a4:	3f 93       	push	r19
    59a6:	4f 93       	push	r20
    59a8:	5f 93       	push	r21
    59aa:	6f 93       	push	r22
    59ac:	7f 93       	push	r23
    59ae:	8f 93       	push	r24
    59b0:	9f 93       	push	r25
    59b2:	af 93       	push	r26
    59b4:	bf 93       	push	r27
    59b6:	ef 93       	push	r30
    59b8:	ff 93       	push	r31
    59ba:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    59be:	8e 2f       	mov	r24, r30
    59c0:	90 e0       	ldi	r25, 0x00	; 0
    59c2:	fc 01       	movw	r30, r24
    59c4:	38 97       	sbiw	r30, 0x08	; 8
    59c6:	e1 35       	cpi	r30, 0x51	; 81
    59c8:	f1 05       	cpc	r31, r1
    59ca:	08 f0       	brcs	.+2      	; 0x59ce <__vector_39+0x3a>
    59cc:	75 c0       	rjmp	.+234    	; 0x5ab8 <__vector_39+0x124>
    59ce:	88 27       	eor	r24, r24
    59d0:	e4 58       	subi	r30, 0x84	; 132
    59d2:	ff 4f       	sbci	r31, 0xFF	; 255
    59d4:	8f 4f       	sbci	r24, 0xFF	; 255
    59d6:	db c2       	rjmp	.+1462   	; 0x5f8e <__tablejump2__>
    59d8:	10 92 56 1a 	sts	0x1A56, r1	; 0x801a56 <_index.1885>
    59dc:	e0 91 56 1a 	lds	r30, 0x1A56	; 0x801a56 <_index.1885>
    59e0:	80 91 59 1a 	lds	r24, 0x1A59	; 0x801a59 <_twiMessageLen>
    59e4:	e8 17       	cp	r30, r24
    59e6:	70 f4       	brcc	.+28     	; 0x5a04 <__vector_39+0x70>
    59e8:	81 e0       	ldi	r24, 0x01	; 1
    59ea:	8e 0f       	add	r24, r30
    59ec:	80 93 56 1a 	sts	0x1A56, r24	; 0x801a56 <_index.1885>
    59f0:	f0 e0       	ldi	r31, 0x00	; 0
    59f2:	e6 5a       	subi	r30, 0xA6	; 166
    59f4:	f5 4e       	sbci	r31, 0xE5	; 229
    59f6:	80 81       	ld	r24, Z
    59f8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    59fc:	85 e8       	ldi	r24, 0x85	; 133
    59fe:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    5a02:	72 c0       	rjmp	.+228    	; 0x5ae8 <__vector_39+0x154>
    5a04:	84 e9       	ldi	r24, 0x94	; 148
    5a06:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    5a0a:	80 91 57 1a 	lds	r24, 0x1A57	; 0x801a57 <_twiCurrentHandler>
    5a0e:	90 91 58 1a 	lds	r25, 0x1A58	; 0x801a58 <_twiCurrentHandler+0x1>
    5a12:	dc 01       	movw	r26, r24
    5a14:	12 96       	adiw	r26, 0x02	; 2
    5a16:	ed 91       	ld	r30, X+
    5a18:	fc 91       	ld	r31, X
    5a1a:	13 97       	sbiw	r26, 0x03	; 3
    5a1c:	30 97       	sbiw	r30, 0x00	; 0
    5a1e:	09 f4       	brne	.+2      	; 0x5a22 <__vector_39+0x8e>
    5a20:	63 c0       	rjmp	.+198    	; 0x5ae8 <__vector_39+0x154>
    5a22:	20 e0       	ldi	r18, 0x00	; 0
    5a24:	40 e0       	ldi	r20, 0x00	; 0
    5a26:	50 e0       	ldi	r21, 0x00	; 0
    5a28:	64 e0       	ldi	r22, 0x04	; 4
    5a2a:	19 95       	eicall
    5a2c:	5d c0       	rjmp	.+186    	; 0x5ae8 <__vector_39+0x154>
    5a2e:	e0 91 56 1a 	lds	r30, 0x1A56	; 0x801a56 <_index.1885>
    5a32:	81 e0       	ldi	r24, 0x01	; 1
    5a34:	8e 0f       	add	r24, r30
    5a36:	80 93 56 1a 	sts	0x1A56, r24	; 0x801a56 <_index.1885>
    5a3a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    5a3e:	f0 e0       	ldi	r31, 0x00	; 0
    5a40:	e6 5a       	subi	r30, 0xA6	; 166
    5a42:	f5 4e       	sbci	r31, 0xE5	; 229
    5a44:	80 83       	st	Z, r24
    5a46:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    5a4a:	80 34       	cpi	r24, 0x40	; 64
    5a4c:	11 f4       	brne	.+4      	; 0x5a52 <__vector_39+0xbe>
    5a4e:	10 92 56 1a 	sts	0x1A56, r1	; 0x801a56 <_index.1885>
    5a52:	20 91 56 1a 	lds	r18, 0x1A56	; 0x801a56 <_index.1885>
    5a56:	30 e0       	ldi	r19, 0x00	; 0
    5a58:	80 91 59 1a 	lds	r24, 0x1A59	; 0x801a59 <_twiMessageLen>
    5a5c:	90 e0       	ldi	r25, 0x00	; 0
    5a5e:	01 97       	sbiw	r24, 0x01	; 1
    5a60:	28 17       	cp	r18, r24
    5a62:	39 07       	cpc	r19, r25
    5a64:	24 f4       	brge	.+8      	; 0x5a6e <__vector_39+0xda>
    5a66:	85 ec       	ldi	r24, 0xC5	; 197
    5a68:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    5a6c:	3d c0       	rjmp	.+122    	; 0x5ae8 <__vector_39+0x154>
    5a6e:	85 e8       	ldi	r24, 0x85	; 133
    5a70:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    5a74:	39 c0       	rjmp	.+114    	; 0x5ae8 <__vector_39+0x154>
    5a76:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    5a7a:	e0 91 56 1a 	lds	r30, 0x1A56	; 0x801a56 <_index.1885>
    5a7e:	f0 e0       	ldi	r31, 0x00	; 0
    5a80:	e6 5a       	subi	r30, 0xA6	; 166
    5a82:	f5 4e       	sbci	r31, 0xE5	; 229
    5a84:	80 83       	st	Z, r24
    5a86:	84 e9       	ldi	r24, 0x94	; 148
    5a88:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    5a8c:	80 91 57 1a 	lds	r24, 0x1A57	; 0x801a57 <_twiCurrentHandler>
    5a90:	90 91 58 1a 	lds	r25, 0x1A58	; 0x801a58 <_twiCurrentHandler+0x1>
    5a94:	dc 01       	movw	r26, r24
    5a96:	12 96       	adiw	r26, 0x02	; 2
    5a98:	ed 91       	ld	r30, X+
    5a9a:	fc 91       	ld	r31, X
    5a9c:	13 97       	sbiw	r26, 0x03	; 3
    5a9e:	30 97       	sbiw	r30, 0x00	; 0
    5aa0:	19 f1       	breq	.+70     	; 0x5ae8 <__vector_39+0x154>
    5aa2:	20 91 59 1a 	lds	r18, 0x1A59	; 0x801a59 <_twiMessageLen>
    5aa6:	4a e5       	ldi	r20, 0x5A	; 90
    5aa8:	5a e1       	ldi	r21, 0x1A	; 26
    5aaa:	65 e0       	ldi	r22, 0x05	; 5
    5aac:	19 95       	eicall
    5aae:	1c c0       	rjmp	.+56     	; 0x5ae8 <__vector_39+0x154>
    5ab0:	85 ea       	ldi	r24, 0xA5	; 165
    5ab2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    5ab6:	18 c0       	rjmp	.+48     	; 0x5ae8 <__vector_39+0x154>
    5ab8:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    5abc:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <_twiCurrentState>
    5ac0:	84 e0       	ldi	r24, 0x04	; 4
    5ac2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    5ac6:	80 91 57 1a 	lds	r24, 0x1A57	; 0x801a57 <_twiCurrentHandler>
    5aca:	90 91 58 1a 	lds	r25, 0x1A58	; 0x801a58 <_twiCurrentHandler+0x1>
    5ace:	dc 01       	movw	r26, r24
    5ad0:	12 96       	adiw	r26, 0x02	; 2
    5ad2:	ed 91       	ld	r30, X+
    5ad4:	fc 91       	ld	r31, X
    5ad6:	13 97       	sbiw	r26, 0x03	; 3
    5ad8:	30 97       	sbiw	r30, 0x00	; 0
    5ada:	31 f0       	breq	.+12     	; 0x5ae8 <__vector_39+0x154>
    5adc:	20 e0       	ldi	r18, 0x00	; 0
    5ade:	40 e0       	ldi	r20, 0x00	; 0
    5ae0:	50 e0       	ldi	r21, 0x00	; 0
    5ae2:	60 91 24 02 	lds	r22, 0x0224	; 0x800224 <_twiCurrentState>
    5ae6:	19 95       	eicall
    5ae8:	ff 91       	pop	r31
    5aea:	ef 91       	pop	r30
    5aec:	bf 91       	pop	r27
    5aee:	af 91       	pop	r26
    5af0:	9f 91       	pop	r25
    5af2:	8f 91       	pop	r24
    5af4:	7f 91       	pop	r23
    5af6:	6f 91       	pop	r22
    5af8:	5f 91       	pop	r21
    5afa:	4f 91       	pop	r20
    5afc:	3f 91       	pop	r19
    5afe:	2f 91       	pop	r18
    5b00:	0f 90       	pop	r0
    5b02:	0b be       	out	0x3b, r0	; 59
    5b04:	0f 90       	pop	r0
    5b06:	0f be       	out	0x3f, r0	; 63
    5b08:	0f 90       	pop	r0
    5b0a:	1f 90       	pop	r1
    5b0c:	18 95       	reti

00005b0e <fifo_init>:
    5b0e:	fc 01       	movw	r30, r24
    5b10:	41 11       	cpse	r20, r1
    5b12:	01 c0       	rjmp	.+2      	; 0x5b16 <fifo_init+0x8>
    5b14:	e8 d3       	rcall	.+2000   	; 0x62e6 <abort>
    5b16:	84 2f       	mov	r24, r20
    5b18:	90 e0       	ldi	r25, 0x00	; 0
    5b1a:	9c 01       	movw	r18, r24
    5b1c:	21 50       	subi	r18, 0x01	; 1
    5b1e:	31 09       	sbc	r19, r1
    5b20:	82 23       	and	r24, r18
    5b22:	93 23       	and	r25, r19
    5b24:	89 2b       	or	r24, r25
    5b26:	09 f0       	breq	.+2      	; 0x5b2a <fifo_init+0x1c>
    5b28:	de d3       	rcall	.+1980   	; 0x62e6 <abort>
    5b2a:	41 38       	cpi	r20, 0x81	; 129
    5b2c:	08 f0       	brcs	.+2      	; 0x5b30 <fifo_init+0x22>
    5b2e:	db d3       	rcall	.+1974   	; 0x62e6 <abort>
    5b30:	12 82       	std	Z+2, r1	; 0x02
    5b32:	13 82       	std	Z+3, r1	; 0x03
    5b34:	44 83       	std	Z+4, r20	; 0x04
    5b36:	44 0f       	add	r20, r20
    5b38:	41 50       	subi	r20, 0x01	; 1
    5b3a:	45 83       	std	Z+5, r20	; 0x05
    5b3c:	71 83       	std	Z+1, r23	; 0x01
    5b3e:	60 83       	st	Z, r22
    5b40:	80 e0       	ldi	r24, 0x00	; 0
    5b42:	90 e0       	ldi	r25, 0x00	; 0
    5b44:	08 95       	ret

00005b46 <__subsf3>:
    5b46:	50 58       	subi	r21, 0x80	; 128

00005b48 <__addsf3>:
    5b48:	bb 27       	eor	r27, r27
    5b4a:	aa 27       	eor	r26, r26
    5b4c:	0e d0       	rcall	.+28     	; 0x5b6a <__addsf3x>
    5b4e:	4d c1       	rjmp	.+666    	; 0x5dea <__fp_round>
    5b50:	3e d1       	rcall	.+636    	; 0x5dce <__fp_pscA>
    5b52:	30 f0       	brcs	.+12     	; 0x5b60 <__addsf3+0x18>
    5b54:	43 d1       	rcall	.+646    	; 0x5ddc <__fp_pscB>
    5b56:	20 f0       	brcs	.+8      	; 0x5b60 <__addsf3+0x18>
    5b58:	31 f4       	brne	.+12     	; 0x5b66 <__addsf3+0x1e>
    5b5a:	9f 3f       	cpi	r25, 0xFF	; 255
    5b5c:	11 f4       	brne	.+4      	; 0x5b62 <__addsf3+0x1a>
    5b5e:	1e f4       	brtc	.+6      	; 0x5b66 <__addsf3+0x1e>
    5b60:	33 c1       	rjmp	.+614    	; 0x5dc8 <__fp_nan>
    5b62:	0e f4       	brtc	.+2      	; 0x5b66 <__addsf3+0x1e>
    5b64:	e0 95       	com	r30
    5b66:	e7 fb       	bst	r30, 7
    5b68:	29 c1       	rjmp	.+594    	; 0x5dbc <__fp_inf>

00005b6a <__addsf3x>:
    5b6a:	e9 2f       	mov	r30, r25
    5b6c:	4f d1       	rcall	.+670    	; 0x5e0c <__fp_split3>
    5b6e:	80 f3       	brcs	.-32     	; 0x5b50 <__addsf3+0x8>
    5b70:	ba 17       	cp	r27, r26
    5b72:	62 07       	cpc	r22, r18
    5b74:	73 07       	cpc	r23, r19
    5b76:	84 07       	cpc	r24, r20
    5b78:	95 07       	cpc	r25, r21
    5b7a:	18 f0       	brcs	.+6      	; 0x5b82 <__addsf3x+0x18>
    5b7c:	71 f4       	brne	.+28     	; 0x5b9a <__addsf3x+0x30>
    5b7e:	9e f5       	brtc	.+102    	; 0x5be6 <__addsf3x+0x7c>
    5b80:	67 c1       	rjmp	.+718    	; 0x5e50 <__fp_zero>
    5b82:	0e f4       	brtc	.+2      	; 0x5b86 <__addsf3x+0x1c>
    5b84:	e0 95       	com	r30
    5b86:	0b 2e       	mov	r0, r27
    5b88:	ba 2f       	mov	r27, r26
    5b8a:	a0 2d       	mov	r26, r0
    5b8c:	0b 01       	movw	r0, r22
    5b8e:	b9 01       	movw	r22, r18
    5b90:	90 01       	movw	r18, r0
    5b92:	0c 01       	movw	r0, r24
    5b94:	ca 01       	movw	r24, r20
    5b96:	a0 01       	movw	r20, r0
    5b98:	11 24       	eor	r1, r1
    5b9a:	ff 27       	eor	r31, r31
    5b9c:	59 1b       	sub	r21, r25
    5b9e:	99 f0       	breq	.+38     	; 0x5bc6 <__addsf3x+0x5c>
    5ba0:	59 3f       	cpi	r21, 0xF9	; 249
    5ba2:	50 f4       	brcc	.+20     	; 0x5bb8 <__addsf3x+0x4e>
    5ba4:	50 3e       	cpi	r21, 0xE0	; 224
    5ba6:	68 f1       	brcs	.+90     	; 0x5c02 <__addsf3x+0x98>
    5ba8:	1a 16       	cp	r1, r26
    5baa:	f0 40       	sbci	r31, 0x00	; 0
    5bac:	a2 2f       	mov	r26, r18
    5bae:	23 2f       	mov	r18, r19
    5bb0:	34 2f       	mov	r19, r20
    5bb2:	44 27       	eor	r20, r20
    5bb4:	58 5f       	subi	r21, 0xF8	; 248
    5bb6:	f3 cf       	rjmp	.-26     	; 0x5b9e <__addsf3x+0x34>
    5bb8:	46 95       	lsr	r20
    5bba:	37 95       	ror	r19
    5bbc:	27 95       	ror	r18
    5bbe:	a7 95       	ror	r26
    5bc0:	f0 40       	sbci	r31, 0x00	; 0
    5bc2:	53 95       	inc	r21
    5bc4:	c9 f7       	brne	.-14     	; 0x5bb8 <__addsf3x+0x4e>
    5bc6:	7e f4       	brtc	.+30     	; 0x5be6 <__addsf3x+0x7c>
    5bc8:	1f 16       	cp	r1, r31
    5bca:	ba 0b       	sbc	r27, r26
    5bcc:	62 0b       	sbc	r22, r18
    5bce:	73 0b       	sbc	r23, r19
    5bd0:	84 0b       	sbc	r24, r20
    5bd2:	ba f0       	brmi	.+46     	; 0x5c02 <__addsf3x+0x98>
    5bd4:	91 50       	subi	r25, 0x01	; 1
    5bd6:	a1 f0       	breq	.+40     	; 0x5c00 <__addsf3x+0x96>
    5bd8:	ff 0f       	add	r31, r31
    5bda:	bb 1f       	adc	r27, r27
    5bdc:	66 1f       	adc	r22, r22
    5bde:	77 1f       	adc	r23, r23
    5be0:	88 1f       	adc	r24, r24
    5be2:	c2 f7       	brpl	.-16     	; 0x5bd4 <__addsf3x+0x6a>
    5be4:	0e c0       	rjmp	.+28     	; 0x5c02 <__addsf3x+0x98>
    5be6:	ba 0f       	add	r27, r26
    5be8:	62 1f       	adc	r22, r18
    5bea:	73 1f       	adc	r23, r19
    5bec:	84 1f       	adc	r24, r20
    5bee:	48 f4       	brcc	.+18     	; 0x5c02 <__addsf3x+0x98>
    5bf0:	87 95       	ror	r24
    5bf2:	77 95       	ror	r23
    5bf4:	67 95       	ror	r22
    5bf6:	b7 95       	ror	r27
    5bf8:	f7 95       	ror	r31
    5bfa:	9e 3f       	cpi	r25, 0xFE	; 254
    5bfc:	08 f0       	brcs	.+2      	; 0x5c00 <__addsf3x+0x96>
    5bfe:	b3 cf       	rjmp	.-154    	; 0x5b66 <__addsf3+0x1e>
    5c00:	93 95       	inc	r25
    5c02:	88 0f       	add	r24, r24
    5c04:	08 f0       	brcs	.+2      	; 0x5c08 <__addsf3x+0x9e>
    5c06:	99 27       	eor	r25, r25
    5c08:	ee 0f       	add	r30, r30
    5c0a:	97 95       	ror	r25
    5c0c:	87 95       	ror	r24
    5c0e:	08 95       	ret

00005c10 <__divsf3>:
    5c10:	0c d0       	rcall	.+24     	; 0x5c2a <__divsf3x>
    5c12:	eb c0       	rjmp	.+470    	; 0x5dea <__fp_round>
    5c14:	e3 d0       	rcall	.+454    	; 0x5ddc <__fp_pscB>
    5c16:	40 f0       	brcs	.+16     	; 0x5c28 <__divsf3+0x18>
    5c18:	da d0       	rcall	.+436    	; 0x5dce <__fp_pscA>
    5c1a:	30 f0       	brcs	.+12     	; 0x5c28 <__divsf3+0x18>
    5c1c:	21 f4       	brne	.+8      	; 0x5c26 <__divsf3+0x16>
    5c1e:	5f 3f       	cpi	r21, 0xFF	; 255
    5c20:	19 f0       	breq	.+6      	; 0x5c28 <__divsf3+0x18>
    5c22:	cc c0       	rjmp	.+408    	; 0x5dbc <__fp_inf>
    5c24:	51 11       	cpse	r21, r1
    5c26:	15 c1       	rjmp	.+554    	; 0x5e52 <__fp_szero>
    5c28:	cf c0       	rjmp	.+414    	; 0x5dc8 <__fp_nan>

00005c2a <__divsf3x>:
    5c2a:	f0 d0       	rcall	.+480    	; 0x5e0c <__fp_split3>
    5c2c:	98 f3       	brcs	.-26     	; 0x5c14 <__divsf3+0x4>

00005c2e <__divsf3_pse>:
    5c2e:	99 23       	and	r25, r25
    5c30:	c9 f3       	breq	.-14     	; 0x5c24 <__divsf3+0x14>
    5c32:	55 23       	and	r21, r21
    5c34:	b1 f3       	breq	.-20     	; 0x5c22 <__divsf3+0x12>
    5c36:	95 1b       	sub	r25, r21
    5c38:	55 0b       	sbc	r21, r21
    5c3a:	bb 27       	eor	r27, r27
    5c3c:	aa 27       	eor	r26, r26
    5c3e:	62 17       	cp	r22, r18
    5c40:	73 07       	cpc	r23, r19
    5c42:	84 07       	cpc	r24, r20
    5c44:	38 f0       	brcs	.+14     	; 0x5c54 <__divsf3_pse+0x26>
    5c46:	9f 5f       	subi	r25, 0xFF	; 255
    5c48:	5f 4f       	sbci	r21, 0xFF	; 255
    5c4a:	22 0f       	add	r18, r18
    5c4c:	33 1f       	adc	r19, r19
    5c4e:	44 1f       	adc	r20, r20
    5c50:	aa 1f       	adc	r26, r26
    5c52:	a9 f3       	breq	.-22     	; 0x5c3e <__divsf3_pse+0x10>
    5c54:	33 d0       	rcall	.+102    	; 0x5cbc <__divsf3_pse+0x8e>
    5c56:	0e 2e       	mov	r0, r30
    5c58:	3a f0       	brmi	.+14     	; 0x5c68 <__divsf3_pse+0x3a>
    5c5a:	e0 e8       	ldi	r30, 0x80	; 128
    5c5c:	30 d0       	rcall	.+96     	; 0x5cbe <__divsf3_pse+0x90>
    5c5e:	91 50       	subi	r25, 0x01	; 1
    5c60:	50 40       	sbci	r21, 0x00	; 0
    5c62:	e6 95       	lsr	r30
    5c64:	00 1c       	adc	r0, r0
    5c66:	ca f7       	brpl	.-14     	; 0x5c5a <__divsf3_pse+0x2c>
    5c68:	29 d0       	rcall	.+82     	; 0x5cbc <__divsf3_pse+0x8e>
    5c6a:	fe 2f       	mov	r31, r30
    5c6c:	27 d0       	rcall	.+78     	; 0x5cbc <__divsf3_pse+0x8e>
    5c6e:	66 0f       	add	r22, r22
    5c70:	77 1f       	adc	r23, r23
    5c72:	88 1f       	adc	r24, r24
    5c74:	bb 1f       	adc	r27, r27
    5c76:	26 17       	cp	r18, r22
    5c78:	37 07       	cpc	r19, r23
    5c7a:	48 07       	cpc	r20, r24
    5c7c:	ab 07       	cpc	r26, r27
    5c7e:	b0 e8       	ldi	r27, 0x80	; 128
    5c80:	09 f0       	breq	.+2      	; 0x5c84 <__divsf3_pse+0x56>
    5c82:	bb 0b       	sbc	r27, r27
    5c84:	80 2d       	mov	r24, r0
    5c86:	bf 01       	movw	r22, r30
    5c88:	ff 27       	eor	r31, r31
    5c8a:	93 58       	subi	r25, 0x83	; 131
    5c8c:	5f 4f       	sbci	r21, 0xFF	; 255
    5c8e:	2a f0       	brmi	.+10     	; 0x5c9a <__divsf3_pse+0x6c>
    5c90:	9e 3f       	cpi	r25, 0xFE	; 254
    5c92:	51 05       	cpc	r21, r1
    5c94:	68 f0       	brcs	.+26     	; 0x5cb0 <__divsf3_pse+0x82>
    5c96:	92 c0       	rjmp	.+292    	; 0x5dbc <__fp_inf>
    5c98:	dc c0       	rjmp	.+440    	; 0x5e52 <__fp_szero>
    5c9a:	5f 3f       	cpi	r21, 0xFF	; 255
    5c9c:	ec f3       	brlt	.-6      	; 0x5c98 <__divsf3_pse+0x6a>
    5c9e:	98 3e       	cpi	r25, 0xE8	; 232
    5ca0:	dc f3       	brlt	.-10     	; 0x5c98 <__divsf3_pse+0x6a>
    5ca2:	86 95       	lsr	r24
    5ca4:	77 95       	ror	r23
    5ca6:	67 95       	ror	r22
    5ca8:	b7 95       	ror	r27
    5caa:	f7 95       	ror	r31
    5cac:	9f 5f       	subi	r25, 0xFF	; 255
    5cae:	c9 f7       	brne	.-14     	; 0x5ca2 <__divsf3_pse+0x74>
    5cb0:	88 0f       	add	r24, r24
    5cb2:	91 1d       	adc	r25, r1
    5cb4:	96 95       	lsr	r25
    5cb6:	87 95       	ror	r24
    5cb8:	97 f9       	bld	r25, 7
    5cba:	08 95       	ret
    5cbc:	e1 e0       	ldi	r30, 0x01	; 1
    5cbe:	66 0f       	add	r22, r22
    5cc0:	77 1f       	adc	r23, r23
    5cc2:	88 1f       	adc	r24, r24
    5cc4:	bb 1f       	adc	r27, r27
    5cc6:	62 17       	cp	r22, r18
    5cc8:	73 07       	cpc	r23, r19
    5cca:	84 07       	cpc	r24, r20
    5ccc:	ba 07       	cpc	r27, r26
    5cce:	20 f0       	brcs	.+8      	; 0x5cd8 <__divsf3_pse+0xaa>
    5cd0:	62 1b       	sub	r22, r18
    5cd2:	73 0b       	sbc	r23, r19
    5cd4:	84 0b       	sbc	r24, r20
    5cd6:	ba 0b       	sbc	r27, r26
    5cd8:	ee 1f       	adc	r30, r30
    5cda:	88 f7       	brcc	.-30     	; 0x5cbe <__divsf3_pse+0x90>
    5cdc:	e0 95       	com	r30
    5cde:	08 95       	ret

00005ce0 <__fixsfsi>:
    5ce0:	04 d0       	rcall	.+8      	; 0x5cea <__fixunssfsi>
    5ce2:	68 94       	set
    5ce4:	b1 11       	cpse	r27, r1
    5ce6:	b5 c0       	rjmp	.+362    	; 0x5e52 <__fp_szero>
    5ce8:	08 95       	ret

00005cea <__fixunssfsi>:
    5cea:	98 d0       	rcall	.+304    	; 0x5e1c <__fp_splitA>
    5cec:	88 f0       	brcs	.+34     	; 0x5d10 <__fixunssfsi+0x26>
    5cee:	9f 57       	subi	r25, 0x7F	; 127
    5cf0:	90 f0       	brcs	.+36     	; 0x5d16 <__fixunssfsi+0x2c>
    5cf2:	b9 2f       	mov	r27, r25
    5cf4:	99 27       	eor	r25, r25
    5cf6:	b7 51       	subi	r27, 0x17	; 23
    5cf8:	a0 f0       	brcs	.+40     	; 0x5d22 <__fixunssfsi+0x38>
    5cfa:	d1 f0       	breq	.+52     	; 0x5d30 <__fixunssfsi+0x46>
    5cfc:	66 0f       	add	r22, r22
    5cfe:	77 1f       	adc	r23, r23
    5d00:	88 1f       	adc	r24, r24
    5d02:	99 1f       	adc	r25, r25
    5d04:	1a f0       	brmi	.+6      	; 0x5d0c <__fixunssfsi+0x22>
    5d06:	ba 95       	dec	r27
    5d08:	c9 f7       	brne	.-14     	; 0x5cfc <__fixunssfsi+0x12>
    5d0a:	12 c0       	rjmp	.+36     	; 0x5d30 <__fixunssfsi+0x46>
    5d0c:	b1 30       	cpi	r27, 0x01	; 1
    5d0e:	81 f0       	breq	.+32     	; 0x5d30 <__fixunssfsi+0x46>
    5d10:	9f d0       	rcall	.+318    	; 0x5e50 <__fp_zero>
    5d12:	b1 e0       	ldi	r27, 0x01	; 1
    5d14:	08 95       	ret
    5d16:	9c c0       	rjmp	.+312    	; 0x5e50 <__fp_zero>
    5d18:	67 2f       	mov	r22, r23
    5d1a:	78 2f       	mov	r23, r24
    5d1c:	88 27       	eor	r24, r24
    5d1e:	b8 5f       	subi	r27, 0xF8	; 248
    5d20:	39 f0       	breq	.+14     	; 0x5d30 <__fixunssfsi+0x46>
    5d22:	b9 3f       	cpi	r27, 0xF9	; 249
    5d24:	cc f3       	brlt	.-14     	; 0x5d18 <__fixunssfsi+0x2e>
    5d26:	86 95       	lsr	r24
    5d28:	77 95       	ror	r23
    5d2a:	67 95       	ror	r22
    5d2c:	b3 95       	inc	r27
    5d2e:	d9 f7       	brne	.-10     	; 0x5d26 <__fixunssfsi+0x3c>
    5d30:	3e f4       	brtc	.+14     	; 0x5d40 <__fixunssfsi+0x56>
    5d32:	90 95       	com	r25
    5d34:	80 95       	com	r24
    5d36:	70 95       	com	r23
    5d38:	61 95       	neg	r22
    5d3a:	7f 4f       	sbci	r23, 0xFF	; 255
    5d3c:	8f 4f       	sbci	r24, 0xFF	; 255
    5d3e:	9f 4f       	sbci	r25, 0xFF	; 255
    5d40:	08 95       	ret

00005d42 <__floatunsisf>:
    5d42:	e8 94       	clt
    5d44:	09 c0       	rjmp	.+18     	; 0x5d58 <__floatsisf+0x12>

00005d46 <__floatsisf>:
    5d46:	97 fb       	bst	r25, 7
    5d48:	3e f4       	brtc	.+14     	; 0x5d58 <__floatsisf+0x12>
    5d4a:	90 95       	com	r25
    5d4c:	80 95       	com	r24
    5d4e:	70 95       	com	r23
    5d50:	61 95       	neg	r22
    5d52:	7f 4f       	sbci	r23, 0xFF	; 255
    5d54:	8f 4f       	sbci	r24, 0xFF	; 255
    5d56:	9f 4f       	sbci	r25, 0xFF	; 255
    5d58:	99 23       	and	r25, r25
    5d5a:	a9 f0       	breq	.+42     	; 0x5d86 <__floatsisf+0x40>
    5d5c:	f9 2f       	mov	r31, r25
    5d5e:	96 e9       	ldi	r25, 0x96	; 150
    5d60:	bb 27       	eor	r27, r27
    5d62:	93 95       	inc	r25
    5d64:	f6 95       	lsr	r31
    5d66:	87 95       	ror	r24
    5d68:	77 95       	ror	r23
    5d6a:	67 95       	ror	r22
    5d6c:	b7 95       	ror	r27
    5d6e:	f1 11       	cpse	r31, r1
    5d70:	f8 cf       	rjmp	.-16     	; 0x5d62 <__floatsisf+0x1c>
    5d72:	fa f4       	brpl	.+62     	; 0x5db2 <__floatsisf+0x6c>
    5d74:	bb 0f       	add	r27, r27
    5d76:	11 f4       	brne	.+4      	; 0x5d7c <__floatsisf+0x36>
    5d78:	60 ff       	sbrs	r22, 0
    5d7a:	1b c0       	rjmp	.+54     	; 0x5db2 <__floatsisf+0x6c>
    5d7c:	6f 5f       	subi	r22, 0xFF	; 255
    5d7e:	7f 4f       	sbci	r23, 0xFF	; 255
    5d80:	8f 4f       	sbci	r24, 0xFF	; 255
    5d82:	9f 4f       	sbci	r25, 0xFF	; 255
    5d84:	16 c0       	rjmp	.+44     	; 0x5db2 <__floatsisf+0x6c>
    5d86:	88 23       	and	r24, r24
    5d88:	11 f0       	breq	.+4      	; 0x5d8e <__floatsisf+0x48>
    5d8a:	96 e9       	ldi	r25, 0x96	; 150
    5d8c:	11 c0       	rjmp	.+34     	; 0x5db0 <__floatsisf+0x6a>
    5d8e:	77 23       	and	r23, r23
    5d90:	21 f0       	breq	.+8      	; 0x5d9a <__floatsisf+0x54>
    5d92:	9e e8       	ldi	r25, 0x8E	; 142
    5d94:	87 2f       	mov	r24, r23
    5d96:	76 2f       	mov	r23, r22
    5d98:	05 c0       	rjmp	.+10     	; 0x5da4 <__floatsisf+0x5e>
    5d9a:	66 23       	and	r22, r22
    5d9c:	71 f0       	breq	.+28     	; 0x5dba <__floatsisf+0x74>
    5d9e:	96 e8       	ldi	r25, 0x86	; 134
    5da0:	86 2f       	mov	r24, r22
    5da2:	70 e0       	ldi	r23, 0x00	; 0
    5da4:	60 e0       	ldi	r22, 0x00	; 0
    5da6:	2a f0       	brmi	.+10     	; 0x5db2 <__floatsisf+0x6c>
    5da8:	9a 95       	dec	r25
    5daa:	66 0f       	add	r22, r22
    5dac:	77 1f       	adc	r23, r23
    5dae:	88 1f       	adc	r24, r24
    5db0:	da f7       	brpl	.-10     	; 0x5da8 <__floatsisf+0x62>
    5db2:	88 0f       	add	r24, r24
    5db4:	96 95       	lsr	r25
    5db6:	87 95       	ror	r24
    5db8:	97 f9       	bld	r25, 7
    5dba:	08 95       	ret

00005dbc <__fp_inf>:
    5dbc:	97 f9       	bld	r25, 7
    5dbe:	9f 67       	ori	r25, 0x7F	; 127
    5dc0:	80 e8       	ldi	r24, 0x80	; 128
    5dc2:	70 e0       	ldi	r23, 0x00	; 0
    5dc4:	60 e0       	ldi	r22, 0x00	; 0
    5dc6:	08 95       	ret

00005dc8 <__fp_nan>:
    5dc8:	9f ef       	ldi	r25, 0xFF	; 255
    5dca:	80 ec       	ldi	r24, 0xC0	; 192
    5dcc:	08 95       	ret

00005dce <__fp_pscA>:
    5dce:	00 24       	eor	r0, r0
    5dd0:	0a 94       	dec	r0
    5dd2:	16 16       	cp	r1, r22
    5dd4:	17 06       	cpc	r1, r23
    5dd6:	18 06       	cpc	r1, r24
    5dd8:	09 06       	cpc	r0, r25
    5dda:	08 95       	ret

00005ddc <__fp_pscB>:
    5ddc:	00 24       	eor	r0, r0
    5dde:	0a 94       	dec	r0
    5de0:	12 16       	cp	r1, r18
    5de2:	13 06       	cpc	r1, r19
    5de4:	14 06       	cpc	r1, r20
    5de6:	05 06       	cpc	r0, r21
    5de8:	08 95       	ret

00005dea <__fp_round>:
    5dea:	09 2e       	mov	r0, r25
    5dec:	03 94       	inc	r0
    5dee:	00 0c       	add	r0, r0
    5df0:	11 f4       	brne	.+4      	; 0x5df6 <__fp_round+0xc>
    5df2:	88 23       	and	r24, r24
    5df4:	52 f0       	brmi	.+20     	; 0x5e0a <__fp_round+0x20>
    5df6:	bb 0f       	add	r27, r27
    5df8:	40 f4       	brcc	.+16     	; 0x5e0a <__fp_round+0x20>
    5dfa:	bf 2b       	or	r27, r31
    5dfc:	11 f4       	brne	.+4      	; 0x5e02 <__fp_round+0x18>
    5dfe:	60 ff       	sbrs	r22, 0
    5e00:	04 c0       	rjmp	.+8      	; 0x5e0a <__fp_round+0x20>
    5e02:	6f 5f       	subi	r22, 0xFF	; 255
    5e04:	7f 4f       	sbci	r23, 0xFF	; 255
    5e06:	8f 4f       	sbci	r24, 0xFF	; 255
    5e08:	9f 4f       	sbci	r25, 0xFF	; 255
    5e0a:	08 95       	ret

00005e0c <__fp_split3>:
    5e0c:	57 fd       	sbrc	r21, 7
    5e0e:	90 58       	subi	r25, 0x80	; 128
    5e10:	44 0f       	add	r20, r20
    5e12:	55 1f       	adc	r21, r21
    5e14:	59 f0       	breq	.+22     	; 0x5e2c <__fp_splitA+0x10>
    5e16:	5f 3f       	cpi	r21, 0xFF	; 255
    5e18:	71 f0       	breq	.+28     	; 0x5e36 <__fp_splitA+0x1a>
    5e1a:	47 95       	ror	r20

00005e1c <__fp_splitA>:
    5e1c:	88 0f       	add	r24, r24
    5e1e:	97 fb       	bst	r25, 7
    5e20:	99 1f       	adc	r25, r25
    5e22:	61 f0       	breq	.+24     	; 0x5e3c <__fp_splitA+0x20>
    5e24:	9f 3f       	cpi	r25, 0xFF	; 255
    5e26:	79 f0       	breq	.+30     	; 0x5e46 <__fp_splitA+0x2a>
    5e28:	87 95       	ror	r24
    5e2a:	08 95       	ret
    5e2c:	12 16       	cp	r1, r18
    5e2e:	13 06       	cpc	r1, r19
    5e30:	14 06       	cpc	r1, r20
    5e32:	55 1f       	adc	r21, r21
    5e34:	f2 cf       	rjmp	.-28     	; 0x5e1a <__fp_split3+0xe>
    5e36:	46 95       	lsr	r20
    5e38:	f1 df       	rcall	.-30     	; 0x5e1c <__fp_splitA>
    5e3a:	08 c0       	rjmp	.+16     	; 0x5e4c <__fp_splitA+0x30>
    5e3c:	16 16       	cp	r1, r22
    5e3e:	17 06       	cpc	r1, r23
    5e40:	18 06       	cpc	r1, r24
    5e42:	99 1f       	adc	r25, r25
    5e44:	f1 cf       	rjmp	.-30     	; 0x5e28 <__fp_splitA+0xc>
    5e46:	86 95       	lsr	r24
    5e48:	71 05       	cpc	r23, r1
    5e4a:	61 05       	cpc	r22, r1
    5e4c:	08 94       	sec
    5e4e:	08 95       	ret

00005e50 <__fp_zero>:
    5e50:	e8 94       	clt

00005e52 <__fp_szero>:
    5e52:	bb 27       	eor	r27, r27
    5e54:	66 27       	eor	r22, r22
    5e56:	77 27       	eor	r23, r23
    5e58:	cb 01       	movw	r24, r22
    5e5a:	97 f9       	bld	r25, 7
    5e5c:	08 95       	ret

00005e5e <__mulsf3>:
    5e5e:	0b d0       	rcall	.+22     	; 0x5e76 <__mulsf3x>
    5e60:	c4 cf       	rjmp	.-120    	; 0x5dea <__fp_round>
    5e62:	b5 df       	rcall	.-150    	; 0x5dce <__fp_pscA>
    5e64:	28 f0       	brcs	.+10     	; 0x5e70 <__mulsf3+0x12>
    5e66:	ba df       	rcall	.-140    	; 0x5ddc <__fp_pscB>
    5e68:	18 f0       	brcs	.+6      	; 0x5e70 <__mulsf3+0x12>
    5e6a:	95 23       	and	r25, r21
    5e6c:	09 f0       	breq	.+2      	; 0x5e70 <__mulsf3+0x12>
    5e6e:	a6 cf       	rjmp	.-180    	; 0x5dbc <__fp_inf>
    5e70:	ab cf       	rjmp	.-170    	; 0x5dc8 <__fp_nan>
    5e72:	11 24       	eor	r1, r1
    5e74:	ee cf       	rjmp	.-36     	; 0x5e52 <__fp_szero>

00005e76 <__mulsf3x>:
    5e76:	ca df       	rcall	.-108    	; 0x5e0c <__fp_split3>
    5e78:	a0 f3       	brcs	.-24     	; 0x5e62 <__mulsf3+0x4>

00005e7a <__mulsf3_pse>:
    5e7a:	95 9f       	mul	r25, r21
    5e7c:	d1 f3       	breq	.-12     	; 0x5e72 <__mulsf3+0x14>
    5e7e:	95 0f       	add	r25, r21
    5e80:	50 e0       	ldi	r21, 0x00	; 0
    5e82:	55 1f       	adc	r21, r21
    5e84:	62 9f       	mul	r22, r18
    5e86:	f0 01       	movw	r30, r0
    5e88:	72 9f       	mul	r23, r18
    5e8a:	bb 27       	eor	r27, r27
    5e8c:	f0 0d       	add	r31, r0
    5e8e:	b1 1d       	adc	r27, r1
    5e90:	63 9f       	mul	r22, r19
    5e92:	aa 27       	eor	r26, r26
    5e94:	f0 0d       	add	r31, r0
    5e96:	b1 1d       	adc	r27, r1
    5e98:	aa 1f       	adc	r26, r26
    5e9a:	64 9f       	mul	r22, r20
    5e9c:	66 27       	eor	r22, r22
    5e9e:	b0 0d       	add	r27, r0
    5ea0:	a1 1d       	adc	r26, r1
    5ea2:	66 1f       	adc	r22, r22
    5ea4:	82 9f       	mul	r24, r18
    5ea6:	22 27       	eor	r18, r18
    5ea8:	b0 0d       	add	r27, r0
    5eaa:	a1 1d       	adc	r26, r1
    5eac:	62 1f       	adc	r22, r18
    5eae:	73 9f       	mul	r23, r19
    5eb0:	b0 0d       	add	r27, r0
    5eb2:	a1 1d       	adc	r26, r1
    5eb4:	62 1f       	adc	r22, r18
    5eb6:	83 9f       	mul	r24, r19
    5eb8:	a0 0d       	add	r26, r0
    5eba:	61 1d       	adc	r22, r1
    5ebc:	22 1f       	adc	r18, r18
    5ebe:	74 9f       	mul	r23, r20
    5ec0:	33 27       	eor	r19, r19
    5ec2:	a0 0d       	add	r26, r0
    5ec4:	61 1d       	adc	r22, r1
    5ec6:	23 1f       	adc	r18, r19
    5ec8:	84 9f       	mul	r24, r20
    5eca:	60 0d       	add	r22, r0
    5ecc:	21 1d       	adc	r18, r1
    5ece:	82 2f       	mov	r24, r18
    5ed0:	76 2f       	mov	r23, r22
    5ed2:	6a 2f       	mov	r22, r26
    5ed4:	11 24       	eor	r1, r1
    5ed6:	9f 57       	subi	r25, 0x7F	; 127
    5ed8:	50 40       	sbci	r21, 0x00	; 0
    5eda:	8a f0       	brmi	.+34     	; 0x5efe <__mulsf3_pse+0x84>
    5edc:	e1 f0       	breq	.+56     	; 0x5f16 <__mulsf3_pse+0x9c>
    5ede:	88 23       	and	r24, r24
    5ee0:	4a f0       	brmi	.+18     	; 0x5ef4 <__mulsf3_pse+0x7a>
    5ee2:	ee 0f       	add	r30, r30
    5ee4:	ff 1f       	adc	r31, r31
    5ee6:	bb 1f       	adc	r27, r27
    5ee8:	66 1f       	adc	r22, r22
    5eea:	77 1f       	adc	r23, r23
    5eec:	88 1f       	adc	r24, r24
    5eee:	91 50       	subi	r25, 0x01	; 1
    5ef0:	50 40       	sbci	r21, 0x00	; 0
    5ef2:	a9 f7       	brne	.-22     	; 0x5ede <__mulsf3_pse+0x64>
    5ef4:	9e 3f       	cpi	r25, 0xFE	; 254
    5ef6:	51 05       	cpc	r21, r1
    5ef8:	70 f0       	brcs	.+28     	; 0x5f16 <__mulsf3_pse+0x9c>
    5efa:	60 cf       	rjmp	.-320    	; 0x5dbc <__fp_inf>
    5efc:	aa cf       	rjmp	.-172    	; 0x5e52 <__fp_szero>
    5efe:	5f 3f       	cpi	r21, 0xFF	; 255
    5f00:	ec f3       	brlt	.-6      	; 0x5efc <__mulsf3_pse+0x82>
    5f02:	98 3e       	cpi	r25, 0xE8	; 232
    5f04:	dc f3       	brlt	.-10     	; 0x5efc <__mulsf3_pse+0x82>
    5f06:	86 95       	lsr	r24
    5f08:	77 95       	ror	r23
    5f0a:	67 95       	ror	r22
    5f0c:	b7 95       	ror	r27
    5f0e:	f7 95       	ror	r31
    5f10:	e7 95       	ror	r30
    5f12:	9f 5f       	subi	r25, 0xFF	; 255
    5f14:	c1 f7       	brne	.-16     	; 0x5f06 <__mulsf3_pse+0x8c>
    5f16:	fe 2b       	or	r31, r30
    5f18:	88 0f       	add	r24, r24
    5f1a:	91 1d       	adc	r25, r1
    5f1c:	96 95       	lsr	r25
    5f1e:	87 95       	ror	r24
    5f20:	97 f9       	bld	r25, 7
    5f22:	08 95       	ret

00005f24 <__divmodhi4>:
    5f24:	97 fb       	bst	r25, 7
    5f26:	07 2e       	mov	r0, r23
    5f28:	16 f4       	brtc	.+4      	; 0x5f2e <__divmodhi4+0xa>
    5f2a:	00 94       	com	r0
    5f2c:	06 d0       	rcall	.+12     	; 0x5f3a <__divmodhi4_neg1>
    5f2e:	77 fd       	sbrc	r23, 7
    5f30:	08 d0       	rcall	.+16     	; 0x5f42 <__divmodhi4_neg2>
    5f32:	35 d0       	rcall	.+106    	; 0x5f9e <__udivmodhi4>
    5f34:	07 fc       	sbrc	r0, 7
    5f36:	05 d0       	rcall	.+10     	; 0x5f42 <__divmodhi4_neg2>
    5f38:	3e f4       	brtc	.+14     	; 0x5f48 <__divmodhi4_exit>

00005f3a <__divmodhi4_neg1>:
    5f3a:	90 95       	com	r25
    5f3c:	81 95       	neg	r24
    5f3e:	9f 4f       	sbci	r25, 0xFF	; 255
    5f40:	08 95       	ret

00005f42 <__divmodhi4_neg2>:
    5f42:	70 95       	com	r23
    5f44:	61 95       	neg	r22
    5f46:	7f 4f       	sbci	r23, 0xFF	; 255

00005f48 <__divmodhi4_exit>:
    5f48:	08 95       	ret

00005f4a <__udivmodsi4>:
    5f4a:	a1 e2       	ldi	r26, 0x21	; 33
    5f4c:	1a 2e       	mov	r1, r26
    5f4e:	aa 1b       	sub	r26, r26
    5f50:	bb 1b       	sub	r27, r27
    5f52:	fd 01       	movw	r30, r26
    5f54:	0d c0       	rjmp	.+26     	; 0x5f70 <__udivmodsi4_ep>

00005f56 <__udivmodsi4_loop>:
    5f56:	aa 1f       	adc	r26, r26
    5f58:	bb 1f       	adc	r27, r27
    5f5a:	ee 1f       	adc	r30, r30
    5f5c:	ff 1f       	adc	r31, r31
    5f5e:	a2 17       	cp	r26, r18
    5f60:	b3 07       	cpc	r27, r19
    5f62:	e4 07       	cpc	r30, r20
    5f64:	f5 07       	cpc	r31, r21
    5f66:	20 f0       	brcs	.+8      	; 0x5f70 <__udivmodsi4_ep>
    5f68:	a2 1b       	sub	r26, r18
    5f6a:	b3 0b       	sbc	r27, r19
    5f6c:	e4 0b       	sbc	r30, r20
    5f6e:	f5 0b       	sbc	r31, r21

00005f70 <__udivmodsi4_ep>:
    5f70:	66 1f       	adc	r22, r22
    5f72:	77 1f       	adc	r23, r23
    5f74:	88 1f       	adc	r24, r24
    5f76:	99 1f       	adc	r25, r25
    5f78:	1a 94       	dec	r1
    5f7a:	69 f7       	brne	.-38     	; 0x5f56 <__udivmodsi4_loop>
    5f7c:	60 95       	com	r22
    5f7e:	70 95       	com	r23
    5f80:	80 95       	com	r24
    5f82:	90 95       	com	r25
    5f84:	9b 01       	movw	r18, r22
    5f86:	ac 01       	movw	r20, r24
    5f88:	bd 01       	movw	r22, r26
    5f8a:	cf 01       	movw	r24, r30
    5f8c:	08 95       	ret

00005f8e <__tablejump2__>:
    5f8e:	ee 0f       	add	r30, r30
    5f90:	ff 1f       	adc	r31, r31
    5f92:	88 1f       	adc	r24, r24
    5f94:	8b bf       	out	0x3b, r24	; 59
    5f96:	07 90       	elpm	r0, Z+
    5f98:	f6 91       	elpm	r31, Z
    5f9a:	e0 2d       	mov	r30, r0
    5f9c:	19 94       	eijmp

00005f9e <__udivmodhi4>:
    5f9e:	aa 1b       	sub	r26, r26
    5fa0:	bb 1b       	sub	r27, r27
    5fa2:	51 e1       	ldi	r21, 0x11	; 17
    5fa4:	07 c0       	rjmp	.+14     	; 0x5fb4 <__udivmodhi4_ep>

00005fa6 <__udivmodhi4_loop>:
    5fa6:	aa 1f       	adc	r26, r26
    5fa8:	bb 1f       	adc	r27, r27
    5faa:	a6 17       	cp	r26, r22
    5fac:	b7 07       	cpc	r27, r23
    5fae:	10 f0       	brcs	.+4      	; 0x5fb4 <__udivmodhi4_ep>
    5fb0:	a6 1b       	sub	r26, r22
    5fb2:	b7 0b       	sbc	r27, r23

00005fb4 <__udivmodhi4_ep>:
    5fb4:	88 1f       	adc	r24, r24
    5fb6:	99 1f       	adc	r25, r25
    5fb8:	5a 95       	dec	r21
    5fba:	a9 f7       	brne	.-22     	; 0x5fa6 <__udivmodhi4_loop>
    5fbc:	80 95       	com	r24
    5fbe:	90 95       	com	r25
    5fc0:	bc 01       	movw	r22, r24
    5fc2:	cd 01       	movw	r24, r26
    5fc4:	08 95       	ret

00005fc6 <calloc>:
    5fc6:	0f 93       	push	r16
    5fc8:	1f 93       	push	r17
    5fca:	cf 93       	push	r28
    5fcc:	df 93       	push	r29
    5fce:	86 9f       	mul	r24, r22
    5fd0:	80 01       	movw	r16, r0
    5fd2:	87 9f       	mul	r24, r23
    5fd4:	10 0d       	add	r17, r0
    5fd6:	96 9f       	mul	r25, r22
    5fd8:	10 0d       	add	r17, r0
    5fda:	11 24       	eor	r1, r1
    5fdc:	c8 01       	movw	r24, r16
    5fde:	0d d0       	rcall	.+26     	; 0x5ffa <malloc>
    5fe0:	ec 01       	movw	r28, r24
    5fe2:	00 97       	sbiw	r24, 0x00	; 0
    5fe4:	21 f0       	breq	.+8      	; 0x5fee <calloc+0x28>
    5fe6:	a8 01       	movw	r20, r16
    5fe8:	60 e0       	ldi	r22, 0x00	; 0
    5fea:	70 e0       	ldi	r23, 0x00	; 0
    5fec:	89 d1       	rcall	.+786    	; 0x6300 <memset>
    5fee:	ce 01       	movw	r24, r28
    5ff0:	df 91       	pop	r29
    5ff2:	cf 91       	pop	r28
    5ff4:	1f 91       	pop	r17
    5ff6:	0f 91       	pop	r16
    5ff8:	08 95       	ret

00005ffa <malloc>:
    5ffa:	0f 93       	push	r16
    5ffc:	1f 93       	push	r17
    5ffe:	cf 93       	push	r28
    6000:	df 93       	push	r29
    6002:	82 30       	cpi	r24, 0x02	; 2
    6004:	91 05       	cpc	r25, r1
    6006:	10 f4       	brcc	.+4      	; 0x600c <malloc+0x12>
    6008:	82 e0       	ldi	r24, 0x02	; 2
    600a:	90 e0       	ldi	r25, 0x00	; 0
    600c:	e0 91 9d 1a 	lds	r30, 0x1A9D	; 0x801a9d <__flp>
    6010:	f0 91 9e 1a 	lds	r31, 0x1A9E	; 0x801a9e <__flp+0x1>
    6014:	20 e0       	ldi	r18, 0x00	; 0
    6016:	30 e0       	ldi	r19, 0x00	; 0
    6018:	a0 e0       	ldi	r26, 0x00	; 0
    601a:	b0 e0       	ldi	r27, 0x00	; 0
    601c:	30 97       	sbiw	r30, 0x00	; 0
    601e:	19 f1       	breq	.+70     	; 0x6066 <malloc+0x6c>
    6020:	40 81       	ld	r20, Z
    6022:	51 81       	ldd	r21, Z+1	; 0x01
    6024:	02 81       	ldd	r16, Z+2	; 0x02
    6026:	13 81       	ldd	r17, Z+3	; 0x03
    6028:	48 17       	cp	r20, r24
    602a:	59 07       	cpc	r21, r25
    602c:	c8 f0       	brcs	.+50     	; 0x6060 <malloc+0x66>
    602e:	84 17       	cp	r24, r20
    6030:	95 07       	cpc	r25, r21
    6032:	69 f4       	brne	.+26     	; 0x604e <malloc+0x54>
    6034:	10 97       	sbiw	r26, 0x00	; 0
    6036:	31 f0       	breq	.+12     	; 0x6044 <malloc+0x4a>
    6038:	12 96       	adiw	r26, 0x02	; 2
    603a:	0c 93       	st	X, r16
    603c:	12 97       	sbiw	r26, 0x02	; 2
    603e:	13 96       	adiw	r26, 0x03	; 3
    6040:	1c 93       	st	X, r17
    6042:	27 c0       	rjmp	.+78     	; 0x6092 <malloc+0x98>
    6044:	00 93 9d 1a 	sts	0x1A9D, r16	; 0x801a9d <__flp>
    6048:	10 93 9e 1a 	sts	0x1A9E, r17	; 0x801a9e <__flp+0x1>
    604c:	22 c0       	rjmp	.+68     	; 0x6092 <malloc+0x98>
    604e:	21 15       	cp	r18, r1
    6050:	31 05       	cpc	r19, r1
    6052:	19 f0       	breq	.+6      	; 0x605a <malloc+0x60>
    6054:	42 17       	cp	r20, r18
    6056:	53 07       	cpc	r21, r19
    6058:	18 f4       	brcc	.+6      	; 0x6060 <malloc+0x66>
    605a:	9a 01       	movw	r18, r20
    605c:	bd 01       	movw	r22, r26
    605e:	ef 01       	movw	r28, r30
    6060:	df 01       	movw	r26, r30
    6062:	f8 01       	movw	r30, r16
    6064:	db cf       	rjmp	.-74     	; 0x601c <malloc+0x22>
    6066:	21 15       	cp	r18, r1
    6068:	31 05       	cpc	r19, r1
    606a:	f9 f0       	breq	.+62     	; 0x60aa <malloc+0xb0>
    606c:	28 1b       	sub	r18, r24
    606e:	39 0b       	sbc	r19, r25
    6070:	24 30       	cpi	r18, 0x04	; 4
    6072:	31 05       	cpc	r19, r1
    6074:	80 f4       	brcc	.+32     	; 0x6096 <malloc+0x9c>
    6076:	8a 81       	ldd	r24, Y+2	; 0x02
    6078:	9b 81       	ldd	r25, Y+3	; 0x03
    607a:	61 15       	cp	r22, r1
    607c:	71 05       	cpc	r23, r1
    607e:	21 f0       	breq	.+8      	; 0x6088 <malloc+0x8e>
    6080:	fb 01       	movw	r30, r22
    6082:	93 83       	std	Z+3, r25	; 0x03
    6084:	82 83       	std	Z+2, r24	; 0x02
    6086:	04 c0       	rjmp	.+8      	; 0x6090 <malloc+0x96>
    6088:	90 93 9e 1a 	sts	0x1A9E, r25	; 0x801a9e <__flp+0x1>
    608c:	80 93 9d 1a 	sts	0x1A9D, r24	; 0x801a9d <__flp>
    6090:	fe 01       	movw	r30, r28
    6092:	32 96       	adiw	r30, 0x02	; 2
    6094:	44 c0       	rjmp	.+136    	; 0x611e <malloc+0x124>
    6096:	fe 01       	movw	r30, r28
    6098:	e2 0f       	add	r30, r18
    609a:	f3 1f       	adc	r31, r19
    609c:	81 93       	st	Z+, r24
    609e:	91 93       	st	Z+, r25
    60a0:	22 50       	subi	r18, 0x02	; 2
    60a2:	31 09       	sbc	r19, r1
    60a4:	39 83       	std	Y+1, r19	; 0x01
    60a6:	28 83       	st	Y, r18
    60a8:	3a c0       	rjmp	.+116    	; 0x611e <malloc+0x124>
    60aa:	20 91 9b 1a 	lds	r18, 0x1A9B	; 0x801a9b <__brkval>
    60ae:	30 91 9c 1a 	lds	r19, 0x1A9C	; 0x801a9c <__brkval+0x1>
    60b2:	23 2b       	or	r18, r19
    60b4:	41 f4       	brne	.+16     	; 0x60c6 <malloc+0xcc>
    60b6:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    60ba:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    60be:	30 93 9c 1a 	sts	0x1A9C, r19	; 0x801a9c <__brkval+0x1>
    60c2:	20 93 9b 1a 	sts	0x1A9B, r18	; 0x801a9b <__brkval>
    60c6:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    60ca:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    60ce:	21 15       	cp	r18, r1
    60d0:	31 05       	cpc	r19, r1
    60d2:	41 f4       	brne	.+16     	; 0x60e4 <malloc+0xea>
    60d4:	2d b7       	in	r18, 0x3d	; 61
    60d6:	3e b7       	in	r19, 0x3e	; 62
    60d8:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    60dc:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    60e0:	24 1b       	sub	r18, r20
    60e2:	35 0b       	sbc	r19, r21
    60e4:	e0 91 9b 1a 	lds	r30, 0x1A9B	; 0x801a9b <__brkval>
    60e8:	f0 91 9c 1a 	lds	r31, 0x1A9C	; 0x801a9c <__brkval+0x1>
    60ec:	e2 17       	cp	r30, r18
    60ee:	f3 07       	cpc	r31, r19
    60f0:	a0 f4       	brcc	.+40     	; 0x611a <malloc+0x120>
    60f2:	2e 1b       	sub	r18, r30
    60f4:	3f 0b       	sbc	r19, r31
    60f6:	28 17       	cp	r18, r24
    60f8:	39 07       	cpc	r19, r25
    60fa:	78 f0       	brcs	.+30     	; 0x611a <malloc+0x120>
    60fc:	ac 01       	movw	r20, r24
    60fe:	4e 5f       	subi	r20, 0xFE	; 254
    6100:	5f 4f       	sbci	r21, 0xFF	; 255
    6102:	24 17       	cp	r18, r20
    6104:	35 07       	cpc	r19, r21
    6106:	48 f0       	brcs	.+18     	; 0x611a <malloc+0x120>
    6108:	4e 0f       	add	r20, r30
    610a:	5f 1f       	adc	r21, r31
    610c:	50 93 9c 1a 	sts	0x1A9C, r21	; 0x801a9c <__brkval+0x1>
    6110:	40 93 9b 1a 	sts	0x1A9B, r20	; 0x801a9b <__brkval>
    6114:	81 93       	st	Z+, r24
    6116:	91 93       	st	Z+, r25
    6118:	02 c0       	rjmp	.+4      	; 0x611e <malloc+0x124>
    611a:	e0 e0       	ldi	r30, 0x00	; 0
    611c:	f0 e0       	ldi	r31, 0x00	; 0
    611e:	cf 01       	movw	r24, r30
    6120:	df 91       	pop	r29
    6122:	cf 91       	pop	r28
    6124:	1f 91       	pop	r17
    6126:	0f 91       	pop	r16
    6128:	08 95       	ret

0000612a <free>:
    612a:	cf 93       	push	r28
    612c:	df 93       	push	r29
    612e:	00 97       	sbiw	r24, 0x00	; 0
    6130:	09 f4       	brne	.+2      	; 0x6134 <free+0xa>
    6132:	81 c0       	rjmp	.+258    	; 0x6236 <free+0x10c>
    6134:	fc 01       	movw	r30, r24
    6136:	32 97       	sbiw	r30, 0x02	; 2
    6138:	13 82       	std	Z+3, r1	; 0x03
    613a:	12 82       	std	Z+2, r1	; 0x02
    613c:	a0 91 9d 1a 	lds	r26, 0x1A9D	; 0x801a9d <__flp>
    6140:	b0 91 9e 1a 	lds	r27, 0x1A9E	; 0x801a9e <__flp+0x1>
    6144:	10 97       	sbiw	r26, 0x00	; 0
    6146:	81 f4       	brne	.+32     	; 0x6168 <free+0x3e>
    6148:	20 81       	ld	r18, Z
    614a:	31 81       	ldd	r19, Z+1	; 0x01
    614c:	82 0f       	add	r24, r18
    614e:	93 1f       	adc	r25, r19
    6150:	20 91 9b 1a 	lds	r18, 0x1A9B	; 0x801a9b <__brkval>
    6154:	30 91 9c 1a 	lds	r19, 0x1A9C	; 0x801a9c <__brkval+0x1>
    6158:	28 17       	cp	r18, r24
    615a:	39 07       	cpc	r19, r25
    615c:	51 f5       	brne	.+84     	; 0x61b2 <free+0x88>
    615e:	f0 93 9c 1a 	sts	0x1A9C, r31	; 0x801a9c <__brkval+0x1>
    6162:	e0 93 9b 1a 	sts	0x1A9B, r30	; 0x801a9b <__brkval>
    6166:	67 c0       	rjmp	.+206    	; 0x6236 <free+0x10c>
    6168:	ed 01       	movw	r28, r26
    616a:	20 e0       	ldi	r18, 0x00	; 0
    616c:	30 e0       	ldi	r19, 0x00	; 0
    616e:	ce 17       	cp	r28, r30
    6170:	df 07       	cpc	r29, r31
    6172:	40 f4       	brcc	.+16     	; 0x6184 <free+0x5a>
    6174:	4a 81       	ldd	r20, Y+2	; 0x02
    6176:	5b 81       	ldd	r21, Y+3	; 0x03
    6178:	9e 01       	movw	r18, r28
    617a:	41 15       	cp	r20, r1
    617c:	51 05       	cpc	r21, r1
    617e:	f1 f0       	breq	.+60     	; 0x61bc <free+0x92>
    6180:	ea 01       	movw	r28, r20
    6182:	f5 cf       	rjmp	.-22     	; 0x616e <free+0x44>
    6184:	d3 83       	std	Z+3, r29	; 0x03
    6186:	c2 83       	std	Z+2, r28	; 0x02
    6188:	40 81       	ld	r20, Z
    618a:	51 81       	ldd	r21, Z+1	; 0x01
    618c:	84 0f       	add	r24, r20
    618e:	95 1f       	adc	r25, r21
    6190:	c8 17       	cp	r28, r24
    6192:	d9 07       	cpc	r29, r25
    6194:	59 f4       	brne	.+22     	; 0x61ac <free+0x82>
    6196:	88 81       	ld	r24, Y
    6198:	99 81       	ldd	r25, Y+1	; 0x01
    619a:	84 0f       	add	r24, r20
    619c:	95 1f       	adc	r25, r21
    619e:	02 96       	adiw	r24, 0x02	; 2
    61a0:	91 83       	std	Z+1, r25	; 0x01
    61a2:	80 83       	st	Z, r24
    61a4:	8a 81       	ldd	r24, Y+2	; 0x02
    61a6:	9b 81       	ldd	r25, Y+3	; 0x03
    61a8:	93 83       	std	Z+3, r25	; 0x03
    61aa:	82 83       	std	Z+2, r24	; 0x02
    61ac:	21 15       	cp	r18, r1
    61ae:	31 05       	cpc	r19, r1
    61b0:	29 f4       	brne	.+10     	; 0x61bc <free+0x92>
    61b2:	f0 93 9e 1a 	sts	0x1A9E, r31	; 0x801a9e <__flp+0x1>
    61b6:	e0 93 9d 1a 	sts	0x1A9D, r30	; 0x801a9d <__flp>
    61ba:	3d c0       	rjmp	.+122    	; 0x6236 <free+0x10c>
    61bc:	e9 01       	movw	r28, r18
    61be:	fb 83       	std	Y+3, r31	; 0x03
    61c0:	ea 83       	std	Y+2, r30	; 0x02
    61c2:	49 91       	ld	r20, Y+
    61c4:	59 91       	ld	r21, Y+
    61c6:	c4 0f       	add	r28, r20
    61c8:	d5 1f       	adc	r29, r21
    61ca:	ec 17       	cp	r30, r28
    61cc:	fd 07       	cpc	r31, r29
    61ce:	61 f4       	brne	.+24     	; 0x61e8 <free+0xbe>
    61d0:	80 81       	ld	r24, Z
    61d2:	91 81       	ldd	r25, Z+1	; 0x01
    61d4:	84 0f       	add	r24, r20
    61d6:	95 1f       	adc	r25, r21
    61d8:	02 96       	adiw	r24, 0x02	; 2
    61da:	e9 01       	movw	r28, r18
    61dc:	99 83       	std	Y+1, r25	; 0x01
    61de:	88 83       	st	Y, r24
    61e0:	82 81       	ldd	r24, Z+2	; 0x02
    61e2:	93 81       	ldd	r25, Z+3	; 0x03
    61e4:	9b 83       	std	Y+3, r25	; 0x03
    61e6:	8a 83       	std	Y+2, r24	; 0x02
    61e8:	e0 e0       	ldi	r30, 0x00	; 0
    61ea:	f0 e0       	ldi	r31, 0x00	; 0
    61ec:	12 96       	adiw	r26, 0x02	; 2
    61ee:	8d 91       	ld	r24, X+
    61f0:	9c 91       	ld	r25, X
    61f2:	13 97       	sbiw	r26, 0x03	; 3
    61f4:	00 97       	sbiw	r24, 0x00	; 0
    61f6:	19 f0       	breq	.+6      	; 0x61fe <free+0xd4>
    61f8:	fd 01       	movw	r30, r26
    61fa:	dc 01       	movw	r26, r24
    61fc:	f7 cf       	rjmp	.-18     	; 0x61ec <free+0xc2>
    61fe:	8d 91       	ld	r24, X+
    6200:	9c 91       	ld	r25, X
    6202:	11 97       	sbiw	r26, 0x01	; 1
    6204:	9d 01       	movw	r18, r26
    6206:	2e 5f       	subi	r18, 0xFE	; 254
    6208:	3f 4f       	sbci	r19, 0xFF	; 255
    620a:	82 0f       	add	r24, r18
    620c:	93 1f       	adc	r25, r19
    620e:	20 91 9b 1a 	lds	r18, 0x1A9B	; 0x801a9b <__brkval>
    6212:	30 91 9c 1a 	lds	r19, 0x1A9C	; 0x801a9c <__brkval+0x1>
    6216:	28 17       	cp	r18, r24
    6218:	39 07       	cpc	r19, r25
    621a:	69 f4       	brne	.+26     	; 0x6236 <free+0x10c>
    621c:	30 97       	sbiw	r30, 0x00	; 0
    621e:	29 f4       	brne	.+10     	; 0x622a <free+0x100>
    6220:	10 92 9e 1a 	sts	0x1A9E, r1	; 0x801a9e <__flp+0x1>
    6224:	10 92 9d 1a 	sts	0x1A9D, r1	; 0x801a9d <__flp>
    6228:	02 c0       	rjmp	.+4      	; 0x622e <free+0x104>
    622a:	13 82       	std	Z+3, r1	; 0x03
    622c:	12 82       	std	Z+2, r1	; 0x02
    622e:	b0 93 9c 1a 	sts	0x1A9C, r27	; 0x801a9c <__brkval+0x1>
    6232:	a0 93 9b 1a 	sts	0x1A9B, r26	; 0x801a9b <__brkval>
    6236:	df 91       	pop	r29
    6238:	cf 91       	pop	r28
    623a:	08 95       	ret

0000623c <do_rand>:
    623c:	8f 92       	push	r8
    623e:	9f 92       	push	r9
    6240:	af 92       	push	r10
    6242:	bf 92       	push	r11
    6244:	cf 92       	push	r12
    6246:	df 92       	push	r13
    6248:	ef 92       	push	r14
    624a:	ff 92       	push	r15
    624c:	cf 93       	push	r28
    624e:	df 93       	push	r29
    6250:	ec 01       	movw	r28, r24
    6252:	68 81       	ld	r22, Y
    6254:	79 81       	ldd	r23, Y+1	; 0x01
    6256:	8a 81       	ldd	r24, Y+2	; 0x02
    6258:	9b 81       	ldd	r25, Y+3	; 0x03
    625a:	61 15       	cp	r22, r1
    625c:	71 05       	cpc	r23, r1
    625e:	81 05       	cpc	r24, r1
    6260:	91 05       	cpc	r25, r1
    6262:	21 f4       	brne	.+8      	; 0x626c <do_rand+0x30>
    6264:	64 e2       	ldi	r22, 0x24	; 36
    6266:	79 ed       	ldi	r23, 0xD9	; 217
    6268:	8b e5       	ldi	r24, 0x5B	; 91
    626a:	97 e0       	ldi	r25, 0x07	; 7
    626c:	2d e1       	ldi	r18, 0x1D	; 29
    626e:	33 ef       	ldi	r19, 0xF3	; 243
    6270:	41 e0       	ldi	r20, 0x01	; 1
    6272:	50 e0       	ldi	r21, 0x00	; 0
    6274:	b9 d3       	rcall	.+1906   	; 0x69e8 <__divmodsi4>
    6276:	49 01       	movw	r8, r18
    6278:	5a 01       	movw	r10, r20
    627a:	9b 01       	movw	r18, r22
    627c:	ac 01       	movw	r20, r24
    627e:	a7 ea       	ldi	r26, 0xA7	; 167
    6280:	b1 e4       	ldi	r27, 0x41	; 65
    6282:	ce d3       	rcall	.+1948   	; 0x6a20 <__muluhisi3>
    6284:	6b 01       	movw	r12, r22
    6286:	7c 01       	movw	r14, r24
    6288:	ac ee       	ldi	r26, 0xEC	; 236
    628a:	b4 ef       	ldi	r27, 0xF4	; 244
    628c:	a5 01       	movw	r20, r10
    628e:	94 01       	movw	r18, r8
    6290:	d3 d3       	rcall	.+1958   	; 0x6a38 <__mulohisi3>
    6292:	dc 01       	movw	r26, r24
    6294:	cb 01       	movw	r24, r22
    6296:	8c 0d       	add	r24, r12
    6298:	9d 1d       	adc	r25, r13
    629a:	ae 1d       	adc	r26, r14
    629c:	bf 1d       	adc	r27, r15
    629e:	b7 ff       	sbrs	r27, 7
    62a0:	03 c0       	rjmp	.+6      	; 0x62a8 <do_rand+0x6c>
    62a2:	01 97       	sbiw	r24, 0x01	; 1
    62a4:	a1 09       	sbc	r26, r1
    62a6:	b0 48       	sbci	r27, 0x80	; 128
    62a8:	88 83       	st	Y, r24
    62aa:	99 83       	std	Y+1, r25	; 0x01
    62ac:	aa 83       	std	Y+2, r26	; 0x02
    62ae:	bb 83       	std	Y+3, r27	; 0x03
    62b0:	9f 77       	andi	r25, 0x7F	; 127
    62b2:	df 91       	pop	r29
    62b4:	cf 91       	pop	r28
    62b6:	ff 90       	pop	r15
    62b8:	ef 90       	pop	r14
    62ba:	df 90       	pop	r13
    62bc:	cf 90       	pop	r12
    62be:	bf 90       	pop	r11
    62c0:	af 90       	pop	r10
    62c2:	9f 90       	pop	r9
    62c4:	8f 90       	pop	r8
    62c6:	08 95       	ret

000062c8 <rand_r>:
    62c8:	b9 cf       	rjmp	.-142    	; 0x623c <do_rand>

000062ca <rand>:
    62ca:	86 e0       	ldi	r24, 0x06	; 6
    62cc:	92 e0       	ldi	r25, 0x02	; 2
    62ce:	b6 cf       	rjmp	.-148    	; 0x623c <do_rand>

000062d0 <srand>:
    62d0:	a0 e0       	ldi	r26, 0x00	; 0
    62d2:	b0 e0       	ldi	r27, 0x00	; 0
    62d4:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <next>
    62d8:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <next+0x1>
    62dc:	a0 93 08 02 	sts	0x0208, r26	; 0x800208 <next+0x2>
    62e0:	b0 93 09 02 	sts	0x0209, r27	; 0x800209 <next+0x3>
    62e4:	08 95       	ret

000062e6 <abort>:
    62e6:	81 e0       	ldi	r24, 0x01	; 1
    62e8:	90 e0       	ldi	r25, 0x00	; 0
    62ea:	f8 94       	cli
    62ec:	b8 c3       	rjmp	.+1904   	; 0x6a5e <_exit>

000062ee <memcpy>:
    62ee:	fb 01       	movw	r30, r22
    62f0:	dc 01       	movw	r26, r24
    62f2:	02 c0       	rjmp	.+4      	; 0x62f8 <memcpy+0xa>
    62f4:	01 90       	ld	r0, Z+
    62f6:	0d 92       	st	X+, r0
    62f8:	41 50       	subi	r20, 0x01	; 1
    62fa:	50 40       	sbci	r21, 0x00	; 0
    62fc:	d8 f7       	brcc	.-10     	; 0x62f4 <memcpy+0x6>
    62fe:	08 95       	ret

00006300 <memset>:
    6300:	dc 01       	movw	r26, r24
    6302:	01 c0       	rjmp	.+2      	; 0x6306 <memset+0x6>
    6304:	6d 93       	st	X+, r22
    6306:	41 50       	subi	r20, 0x01	; 1
    6308:	50 40       	sbci	r21, 0x00	; 0
    630a:	e0 f7       	brcc	.-8      	; 0x6304 <memset+0x4>
    630c:	08 95       	ret

0000630e <strcasestr>:
    630e:	fb 01       	movw	r30, r22
    6310:	51 91       	ld	r21, Z+
    6312:	55 23       	and	r21, r21
    6314:	b1 f0       	breq	.+44     	; 0x6342 <strcasestr+0x34>
    6316:	bf 01       	movw	r22, r30
    6318:	dc 01       	movw	r26, r24
    631a:	05 2e       	mov	r0, r21
    631c:	4d 91       	ld	r20, X+
    631e:	44 23       	and	r20, r20
    6320:	69 f0       	breq	.+26     	; 0x633c <strcasestr+0x2e>
    6322:	10 d0       	rcall	.+32     	; 0x6344 <strcasestr+0x36>
    6324:	d9 f7       	brne	.-10     	; 0x631c <strcasestr+0xe>
    6326:	cd 01       	movw	r24, r26
    6328:	01 90       	ld	r0, Z+
    632a:	00 20       	and	r0, r0
    632c:	49 f0       	breq	.+18     	; 0x6340 <strcasestr+0x32>
    632e:	4d 91       	ld	r20, X+
    6330:	41 11       	cpse	r20, r1
    6332:	08 d0       	rcall	.+16     	; 0x6344 <strcasestr+0x36>
    6334:	c9 f3       	breq	.-14     	; 0x6328 <strcasestr+0x1a>
    6336:	fb 01       	movw	r30, r22
    6338:	41 11       	cpse	r20, r1
    633a:	ee cf       	rjmp	.-36     	; 0x6318 <strcasestr+0xa>
    633c:	81 e0       	ldi	r24, 0x01	; 1
    633e:	90 e0       	ldi	r25, 0x00	; 0
    6340:	01 97       	sbiw	r24, 0x01	; 1
    6342:	08 95       	ret
    6344:	40 25       	eor	r20, r0
    6346:	39 f0       	breq	.+14     	; 0x6356 <strcasestr+0x48>
    6348:	40 32       	cpi	r20, 0x20	; 32
    634a:	29 f4       	brne	.+10     	; 0x6356 <strcasestr+0x48>
    634c:	40 29       	or	r20, r0
    634e:	4b 57       	subi	r20, 0x7B	; 123
    6350:	46 5e       	subi	r20, 0xE6	; 230
    6352:	08 f0       	brcs	.+2      	; 0x6356 <strcasestr+0x48>
    6354:	18 94       	sez
    6356:	08 95       	ret

00006358 <strcat>:
    6358:	fb 01       	movw	r30, r22
    635a:	dc 01       	movw	r26, r24
    635c:	0d 90       	ld	r0, X+
    635e:	00 20       	and	r0, r0
    6360:	e9 f7       	brne	.-6      	; 0x635c <strcat+0x4>
    6362:	11 97       	sbiw	r26, 0x01	; 1
    6364:	01 90       	ld	r0, Z+
    6366:	0d 92       	st	X+, r0
    6368:	00 20       	and	r0, r0
    636a:	e1 f7       	brne	.-8      	; 0x6364 <strcat+0xc>
    636c:	08 95       	ret

0000636e <strcpy>:
    636e:	fb 01       	movw	r30, r22
    6370:	dc 01       	movw	r26, r24
    6372:	01 90       	ld	r0, Z+
    6374:	0d 92       	st	X+, r0
    6376:	00 20       	and	r0, r0
    6378:	e1 f7       	brne	.-8      	; 0x6372 <strcpy+0x4>
    637a:	08 95       	ret

0000637c <strncasecmp>:
    637c:	fb 01       	movw	r30, r22
    637e:	dc 01       	movw	r26, r24
    6380:	41 50       	subi	r20, 0x01	; 1
    6382:	50 40       	sbci	r21, 0x00	; 0
    6384:	88 f0       	brcs	.+34     	; 0x63a8 <strncasecmp+0x2c>
    6386:	8d 91       	ld	r24, X+
    6388:	81 34       	cpi	r24, 0x41	; 65
    638a:	1c f0       	brlt	.+6      	; 0x6392 <strncasecmp+0x16>
    638c:	8b 35       	cpi	r24, 0x5B	; 91
    638e:	0c f4       	brge	.+2      	; 0x6392 <strncasecmp+0x16>
    6390:	80 5e       	subi	r24, 0xE0	; 224
    6392:	61 91       	ld	r22, Z+
    6394:	61 34       	cpi	r22, 0x41	; 65
    6396:	1c f0       	brlt	.+6      	; 0x639e <strncasecmp+0x22>
    6398:	6b 35       	cpi	r22, 0x5B	; 91
    639a:	0c f4       	brge	.+2      	; 0x639e <strncasecmp+0x22>
    639c:	60 5e       	subi	r22, 0xE0	; 224
    639e:	86 1b       	sub	r24, r22
    63a0:	61 11       	cpse	r22, r1
    63a2:	71 f3       	breq	.-36     	; 0x6380 <strncasecmp+0x4>
    63a4:	99 0b       	sbc	r25, r25
    63a6:	08 95       	ret
    63a8:	88 1b       	sub	r24, r24
    63aa:	fc cf       	rjmp	.-8      	; 0x63a4 <strncasecmp+0x28>

000063ac <printf>:
    63ac:	cf 93       	push	r28
    63ae:	df 93       	push	r29
    63b0:	cd b7       	in	r28, 0x3d	; 61
    63b2:	de b7       	in	r29, 0x3e	; 62
    63b4:	ae 01       	movw	r20, r28
    63b6:	4a 5f       	subi	r20, 0xFA	; 250
    63b8:	5f 4f       	sbci	r21, 0xFF	; 255
    63ba:	fa 01       	movw	r30, r20
    63bc:	61 91       	ld	r22, Z+
    63be:	71 91       	ld	r23, Z+
    63c0:	af 01       	movw	r20, r30
    63c2:	80 91 a1 1a 	lds	r24, 0x1AA1	; 0x801aa1 <__iob+0x2>
    63c6:	90 91 a2 1a 	lds	r25, 0x1AA2	; 0x801aa2 <__iob+0x3>
    63ca:	61 d0       	rcall	.+194    	; 0x648e <vfprintf>
    63cc:	df 91       	pop	r29
    63ce:	cf 91       	pop	r28
    63d0:	08 95       	ret

000063d2 <puts>:
    63d2:	0f 93       	push	r16
    63d4:	1f 93       	push	r17
    63d6:	cf 93       	push	r28
    63d8:	df 93       	push	r29
    63da:	e0 91 a1 1a 	lds	r30, 0x1AA1	; 0x801aa1 <__iob+0x2>
    63de:	f0 91 a2 1a 	lds	r31, 0x1AA2	; 0x801aa2 <__iob+0x3>
    63e2:	23 81       	ldd	r18, Z+3	; 0x03
    63e4:	21 ff       	sbrs	r18, 1
    63e6:	1b c0       	rjmp	.+54     	; 0x641e <puts+0x4c>
    63e8:	8c 01       	movw	r16, r24
    63ea:	d0 e0       	ldi	r29, 0x00	; 0
    63ec:	c0 e0       	ldi	r28, 0x00	; 0
    63ee:	f8 01       	movw	r30, r16
    63f0:	81 91       	ld	r24, Z+
    63f2:	8f 01       	movw	r16, r30
    63f4:	60 91 a1 1a 	lds	r22, 0x1AA1	; 0x801aa1 <__iob+0x2>
    63f8:	70 91 a2 1a 	lds	r23, 0x1AA2	; 0x801aa2 <__iob+0x3>
    63fc:	db 01       	movw	r26, r22
    63fe:	18 96       	adiw	r26, 0x08	; 8
    6400:	ed 91       	ld	r30, X+
    6402:	fc 91       	ld	r31, X
    6404:	19 97       	sbiw	r26, 0x09	; 9
    6406:	88 23       	and	r24, r24
    6408:	31 f0       	breq	.+12     	; 0x6416 <puts+0x44>
    640a:	19 95       	eicall
    640c:	89 2b       	or	r24, r25
    640e:	79 f3       	breq	.-34     	; 0x63ee <puts+0x1c>
    6410:	df ef       	ldi	r29, 0xFF	; 255
    6412:	cf ef       	ldi	r28, 0xFF	; 255
    6414:	ec cf       	rjmp	.-40     	; 0x63ee <puts+0x1c>
    6416:	8a e0       	ldi	r24, 0x0A	; 10
    6418:	19 95       	eicall
    641a:	89 2b       	or	r24, r25
    641c:	19 f0       	breq	.+6      	; 0x6424 <puts+0x52>
    641e:	8f ef       	ldi	r24, 0xFF	; 255
    6420:	9f ef       	ldi	r25, 0xFF	; 255
    6422:	02 c0       	rjmp	.+4      	; 0x6428 <puts+0x56>
    6424:	8d 2f       	mov	r24, r29
    6426:	9c 2f       	mov	r25, r28
    6428:	df 91       	pop	r29
    642a:	cf 91       	pop	r28
    642c:	1f 91       	pop	r17
    642e:	0f 91       	pop	r16
    6430:	08 95       	ret

00006432 <sprintf>:
    6432:	0f 93       	push	r16
    6434:	1f 93       	push	r17
    6436:	cf 93       	push	r28
    6438:	df 93       	push	r29
    643a:	cd b7       	in	r28, 0x3d	; 61
    643c:	de b7       	in	r29, 0x3e	; 62
    643e:	2e 97       	sbiw	r28, 0x0e	; 14
    6440:	0f b6       	in	r0, 0x3f	; 63
    6442:	f8 94       	cli
    6444:	de bf       	out	0x3e, r29	; 62
    6446:	0f be       	out	0x3f, r0	; 63
    6448:	cd bf       	out	0x3d, r28	; 61
    644a:	0e 89       	ldd	r16, Y+22	; 0x16
    644c:	1f 89       	ldd	r17, Y+23	; 0x17
    644e:	86 e0       	ldi	r24, 0x06	; 6
    6450:	8c 83       	std	Y+4, r24	; 0x04
    6452:	1a 83       	std	Y+2, r17	; 0x02
    6454:	09 83       	std	Y+1, r16	; 0x01
    6456:	8f ef       	ldi	r24, 0xFF	; 255
    6458:	9f e7       	ldi	r25, 0x7F	; 127
    645a:	9e 83       	std	Y+6, r25	; 0x06
    645c:	8d 83       	std	Y+5, r24	; 0x05
    645e:	ae 01       	movw	r20, r28
    6460:	46 5e       	subi	r20, 0xE6	; 230
    6462:	5f 4f       	sbci	r21, 0xFF	; 255
    6464:	68 8d       	ldd	r22, Y+24	; 0x18
    6466:	79 8d       	ldd	r23, Y+25	; 0x19
    6468:	ce 01       	movw	r24, r28
    646a:	01 96       	adiw	r24, 0x01	; 1
    646c:	10 d0       	rcall	.+32     	; 0x648e <vfprintf>
    646e:	ef 81       	ldd	r30, Y+7	; 0x07
    6470:	f8 85       	ldd	r31, Y+8	; 0x08
    6472:	e0 0f       	add	r30, r16
    6474:	f1 1f       	adc	r31, r17
    6476:	10 82       	st	Z, r1
    6478:	2e 96       	adiw	r28, 0x0e	; 14
    647a:	0f b6       	in	r0, 0x3f	; 63
    647c:	f8 94       	cli
    647e:	de bf       	out	0x3e, r29	; 62
    6480:	0f be       	out	0x3f, r0	; 63
    6482:	cd bf       	out	0x3d, r28	; 61
    6484:	df 91       	pop	r29
    6486:	cf 91       	pop	r28
    6488:	1f 91       	pop	r17
    648a:	0f 91       	pop	r16
    648c:	08 95       	ret

0000648e <vfprintf>:
    648e:	2f 92       	push	r2
    6490:	3f 92       	push	r3
    6492:	4f 92       	push	r4
    6494:	5f 92       	push	r5
    6496:	6f 92       	push	r6
    6498:	7f 92       	push	r7
    649a:	8f 92       	push	r8
    649c:	9f 92       	push	r9
    649e:	af 92       	push	r10
    64a0:	bf 92       	push	r11
    64a2:	cf 92       	push	r12
    64a4:	df 92       	push	r13
    64a6:	ef 92       	push	r14
    64a8:	ff 92       	push	r15
    64aa:	0f 93       	push	r16
    64ac:	1f 93       	push	r17
    64ae:	cf 93       	push	r28
    64b0:	df 93       	push	r29
    64b2:	cd b7       	in	r28, 0x3d	; 61
    64b4:	de b7       	in	r29, 0x3e	; 62
    64b6:	2b 97       	sbiw	r28, 0x0b	; 11
    64b8:	0f b6       	in	r0, 0x3f	; 63
    64ba:	f8 94       	cli
    64bc:	de bf       	out	0x3e, r29	; 62
    64be:	0f be       	out	0x3f, r0	; 63
    64c0:	cd bf       	out	0x3d, r28	; 61
    64c2:	6c 01       	movw	r12, r24
    64c4:	7b 01       	movw	r14, r22
    64c6:	8a 01       	movw	r16, r20
    64c8:	fc 01       	movw	r30, r24
    64ca:	17 82       	std	Z+7, r1	; 0x07
    64cc:	16 82       	std	Z+6, r1	; 0x06
    64ce:	83 81       	ldd	r24, Z+3	; 0x03
    64d0:	81 ff       	sbrs	r24, 1
    64d2:	bf c1       	rjmp	.+894    	; 0x6852 <vfprintf+0x3c4>
    64d4:	ce 01       	movw	r24, r28
    64d6:	01 96       	adiw	r24, 0x01	; 1
    64d8:	3c 01       	movw	r6, r24
    64da:	f6 01       	movw	r30, r12
    64dc:	93 81       	ldd	r25, Z+3	; 0x03
    64de:	f7 01       	movw	r30, r14
    64e0:	93 fd       	sbrc	r25, 3
    64e2:	85 91       	lpm	r24, Z+
    64e4:	93 ff       	sbrs	r25, 3
    64e6:	81 91       	ld	r24, Z+
    64e8:	7f 01       	movw	r14, r30
    64ea:	88 23       	and	r24, r24
    64ec:	09 f4       	brne	.+2      	; 0x64f0 <vfprintf+0x62>
    64ee:	ad c1       	rjmp	.+858    	; 0x684a <vfprintf+0x3bc>
    64f0:	85 32       	cpi	r24, 0x25	; 37
    64f2:	39 f4       	brne	.+14     	; 0x6502 <vfprintf+0x74>
    64f4:	93 fd       	sbrc	r25, 3
    64f6:	85 91       	lpm	r24, Z+
    64f8:	93 ff       	sbrs	r25, 3
    64fa:	81 91       	ld	r24, Z+
    64fc:	7f 01       	movw	r14, r30
    64fe:	85 32       	cpi	r24, 0x25	; 37
    6500:	21 f4       	brne	.+8      	; 0x650a <vfprintf+0x7c>
    6502:	b6 01       	movw	r22, r12
    6504:	90 e0       	ldi	r25, 0x00	; 0
    6506:	d6 d1       	rcall	.+940    	; 0x68b4 <fputc>
    6508:	e8 cf       	rjmp	.-48     	; 0x64da <vfprintf+0x4c>
    650a:	91 2c       	mov	r9, r1
    650c:	21 2c       	mov	r2, r1
    650e:	31 2c       	mov	r3, r1
    6510:	ff e1       	ldi	r31, 0x1F	; 31
    6512:	f3 15       	cp	r31, r3
    6514:	d8 f0       	brcs	.+54     	; 0x654c <vfprintf+0xbe>
    6516:	8b 32       	cpi	r24, 0x2B	; 43
    6518:	79 f0       	breq	.+30     	; 0x6538 <vfprintf+0xaa>
    651a:	38 f4       	brcc	.+14     	; 0x652a <vfprintf+0x9c>
    651c:	80 32       	cpi	r24, 0x20	; 32
    651e:	79 f0       	breq	.+30     	; 0x653e <vfprintf+0xb0>
    6520:	83 32       	cpi	r24, 0x23	; 35
    6522:	a1 f4       	brne	.+40     	; 0x654c <vfprintf+0xbe>
    6524:	23 2d       	mov	r18, r3
    6526:	20 61       	ori	r18, 0x10	; 16
    6528:	1d c0       	rjmp	.+58     	; 0x6564 <vfprintf+0xd6>
    652a:	8d 32       	cpi	r24, 0x2D	; 45
    652c:	61 f0       	breq	.+24     	; 0x6546 <vfprintf+0xb8>
    652e:	80 33       	cpi	r24, 0x30	; 48
    6530:	69 f4       	brne	.+26     	; 0x654c <vfprintf+0xbe>
    6532:	23 2d       	mov	r18, r3
    6534:	21 60       	ori	r18, 0x01	; 1
    6536:	16 c0       	rjmp	.+44     	; 0x6564 <vfprintf+0xd6>
    6538:	83 2d       	mov	r24, r3
    653a:	82 60       	ori	r24, 0x02	; 2
    653c:	38 2e       	mov	r3, r24
    653e:	e3 2d       	mov	r30, r3
    6540:	e4 60       	ori	r30, 0x04	; 4
    6542:	3e 2e       	mov	r3, r30
    6544:	2a c0       	rjmp	.+84     	; 0x659a <vfprintf+0x10c>
    6546:	f3 2d       	mov	r31, r3
    6548:	f8 60       	ori	r31, 0x08	; 8
    654a:	1d c0       	rjmp	.+58     	; 0x6586 <vfprintf+0xf8>
    654c:	37 fc       	sbrc	r3, 7
    654e:	2d c0       	rjmp	.+90     	; 0x65aa <vfprintf+0x11c>
    6550:	20 ed       	ldi	r18, 0xD0	; 208
    6552:	28 0f       	add	r18, r24
    6554:	2a 30       	cpi	r18, 0x0A	; 10
    6556:	40 f0       	brcs	.+16     	; 0x6568 <vfprintf+0xda>
    6558:	8e 32       	cpi	r24, 0x2E	; 46
    655a:	b9 f4       	brne	.+46     	; 0x658a <vfprintf+0xfc>
    655c:	36 fc       	sbrc	r3, 6
    655e:	75 c1       	rjmp	.+746    	; 0x684a <vfprintf+0x3bc>
    6560:	23 2d       	mov	r18, r3
    6562:	20 64       	ori	r18, 0x40	; 64
    6564:	32 2e       	mov	r3, r18
    6566:	19 c0       	rjmp	.+50     	; 0x659a <vfprintf+0x10c>
    6568:	36 fe       	sbrs	r3, 6
    656a:	06 c0       	rjmp	.+12     	; 0x6578 <vfprintf+0xea>
    656c:	8a e0       	ldi	r24, 0x0A	; 10
    656e:	98 9e       	mul	r9, r24
    6570:	20 0d       	add	r18, r0
    6572:	11 24       	eor	r1, r1
    6574:	92 2e       	mov	r9, r18
    6576:	11 c0       	rjmp	.+34     	; 0x659a <vfprintf+0x10c>
    6578:	ea e0       	ldi	r30, 0x0A	; 10
    657a:	2e 9e       	mul	r2, r30
    657c:	20 0d       	add	r18, r0
    657e:	11 24       	eor	r1, r1
    6580:	22 2e       	mov	r2, r18
    6582:	f3 2d       	mov	r31, r3
    6584:	f0 62       	ori	r31, 0x20	; 32
    6586:	3f 2e       	mov	r3, r31
    6588:	08 c0       	rjmp	.+16     	; 0x659a <vfprintf+0x10c>
    658a:	8c 36       	cpi	r24, 0x6C	; 108
    658c:	21 f4       	brne	.+8      	; 0x6596 <vfprintf+0x108>
    658e:	83 2d       	mov	r24, r3
    6590:	80 68       	ori	r24, 0x80	; 128
    6592:	38 2e       	mov	r3, r24
    6594:	02 c0       	rjmp	.+4      	; 0x659a <vfprintf+0x10c>
    6596:	88 36       	cpi	r24, 0x68	; 104
    6598:	41 f4       	brne	.+16     	; 0x65aa <vfprintf+0x11c>
    659a:	f7 01       	movw	r30, r14
    659c:	93 fd       	sbrc	r25, 3
    659e:	85 91       	lpm	r24, Z+
    65a0:	93 ff       	sbrs	r25, 3
    65a2:	81 91       	ld	r24, Z+
    65a4:	7f 01       	movw	r14, r30
    65a6:	81 11       	cpse	r24, r1
    65a8:	b3 cf       	rjmp	.-154    	; 0x6510 <vfprintf+0x82>
    65aa:	98 2f       	mov	r25, r24
    65ac:	9f 7d       	andi	r25, 0xDF	; 223
    65ae:	95 54       	subi	r25, 0x45	; 69
    65b0:	93 30       	cpi	r25, 0x03	; 3
    65b2:	28 f4       	brcc	.+10     	; 0x65be <vfprintf+0x130>
    65b4:	0c 5f       	subi	r16, 0xFC	; 252
    65b6:	1f 4f       	sbci	r17, 0xFF	; 255
    65b8:	9f e3       	ldi	r25, 0x3F	; 63
    65ba:	99 83       	std	Y+1, r25	; 0x01
    65bc:	0d c0       	rjmp	.+26     	; 0x65d8 <vfprintf+0x14a>
    65be:	83 36       	cpi	r24, 0x63	; 99
    65c0:	31 f0       	breq	.+12     	; 0x65ce <vfprintf+0x140>
    65c2:	83 37       	cpi	r24, 0x73	; 115
    65c4:	71 f0       	breq	.+28     	; 0x65e2 <vfprintf+0x154>
    65c6:	83 35       	cpi	r24, 0x53	; 83
    65c8:	09 f0       	breq	.+2      	; 0x65cc <vfprintf+0x13e>
    65ca:	55 c0       	rjmp	.+170    	; 0x6676 <vfprintf+0x1e8>
    65cc:	20 c0       	rjmp	.+64     	; 0x660e <vfprintf+0x180>
    65ce:	f8 01       	movw	r30, r16
    65d0:	80 81       	ld	r24, Z
    65d2:	89 83       	std	Y+1, r24	; 0x01
    65d4:	0e 5f       	subi	r16, 0xFE	; 254
    65d6:	1f 4f       	sbci	r17, 0xFF	; 255
    65d8:	88 24       	eor	r8, r8
    65da:	83 94       	inc	r8
    65dc:	91 2c       	mov	r9, r1
    65de:	53 01       	movw	r10, r6
    65e0:	12 c0       	rjmp	.+36     	; 0x6606 <vfprintf+0x178>
    65e2:	28 01       	movw	r4, r16
    65e4:	f2 e0       	ldi	r31, 0x02	; 2
    65e6:	4f 0e       	add	r4, r31
    65e8:	51 1c       	adc	r5, r1
    65ea:	f8 01       	movw	r30, r16
    65ec:	a0 80       	ld	r10, Z
    65ee:	b1 80       	ldd	r11, Z+1	; 0x01
    65f0:	36 fe       	sbrs	r3, 6
    65f2:	03 c0       	rjmp	.+6      	; 0x65fa <vfprintf+0x16c>
    65f4:	69 2d       	mov	r22, r9
    65f6:	70 e0       	ldi	r23, 0x00	; 0
    65f8:	02 c0       	rjmp	.+4      	; 0x65fe <vfprintf+0x170>
    65fa:	6f ef       	ldi	r22, 0xFF	; 255
    65fc:	7f ef       	ldi	r23, 0xFF	; 255
    65fe:	c5 01       	movw	r24, r10
    6600:	4e d1       	rcall	.+668    	; 0x689e <strnlen>
    6602:	4c 01       	movw	r8, r24
    6604:	82 01       	movw	r16, r4
    6606:	f3 2d       	mov	r31, r3
    6608:	ff 77       	andi	r31, 0x7F	; 127
    660a:	3f 2e       	mov	r3, r31
    660c:	15 c0       	rjmp	.+42     	; 0x6638 <vfprintf+0x1aa>
    660e:	28 01       	movw	r4, r16
    6610:	22 e0       	ldi	r18, 0x02	; 2
    6612:	42 0e       	add	r4, r18
    6614:	51 1c       	adc	r5, r1
    6616:	f8 01       	movw	r30, r16
    6618:	a0 80       	ld	r10, Z
    661a:	b1 80       	ldd	r11, Z+1	; 0x01
    661c:	36 fe       	sbrs	r3, 6
    661e:	03 c0       	rjmp	.+6      	; 0x6626 <vfprintf+0x198>
    6620:	69 2d       	mov	r22, r9
    6622:	70 e0       	ldi	r23, 0x00	; 0
    6624:	02 c0       	rjmp	.+4      	; 0x662a <vfprintf+0x19c>
    6626:	6f ef       	ldi	r22, 0xFF	; 255
    6628:	7f ef       	ldi	r23, 0xFF	; 255
    662a:	c5 01       	movw	r24, r10
    662c:	2d d1       	rcall	.+602    	; 0x6888 <strnlen_P>
    662e:	4c 01       	movw	r8, r24
    6630:	f3 2d       	mov	r31, r3
    6632:	f0 68       	ori	r31, 0x80	; 128
    6634:	3f 2e       	mov	r3, r31
    6636:	82 01       	movw	r16, r4
    6638:	33 fc       	sbrc	r3, 3
    663a:	19 c0       	rjmp	.+50     	; 0x666e <vfprintf+0x1e0>
    663c:	82 2d       	mov	r24, r2
    663e:	90 e0       	ldi	r25, 0x00	; 0
    6640:	88 16       	cp	r8, r24
    6642:	99 06       	cpc	r9, r25
    6644:	a0 f4       	brcc	.+40     	; 0x666e <vfprintf+0x1e0>
    6646:	b6 01       	movw	r22, r12
    6648:	80 e2       	ldi	r24, 0x20	; 32
    664a:	90 e0       	ldi	r25, 0x00	; 0
    664c:	33 d1       	rcall	.+614    	; 0x68b4 <fputc>
    664e:	2a 94       	dec	r2
    6650:	f5 cf       	rjmp	.-22     	; 0x663c <vfprintf+0x1ae>
    6652:	f5 01       	movw	r30, r10
    6654:	37 fc       	sbrc	r3, 7
    6656:	85 91       	lpm	r24, Z+
    6658:	37 fe       	sbrs	r3, 7
    665a:	81 91       	ld	r24, Z+
    665c:	5f 01       	movw	r10, r30
    665e:	b6 01       	movw	r22, r12
    6660:	90 e0       	ldi	r25, 0x00	; 0
    6662:	28 d1       	rcall	.+592    	; 0x68b4 <fputc>
    6664:	21 10       	cpse	r2, r1
    6666:	2a 94       	dec	r2
    6668:	21 e0       	ldi	r18, 0x01	; 1
    666a:	82 1a       	sub	r8, r18
    666c:	91 08       	sbc	r9, r1
    666e:	81 14       	cp	r8, r1
    6670:	91 04       	cpc	r9, r1
    6672:	79 f7       	brne	.-34     	; 0x6652 <vfprintf+0x1c4>
    6674:	e1 c0       	rjmp	.+450    	; 0x6838 <vfprintf+0x3aa>
    6676:	84 36       	cpi	r24, 0x64	; 100
    6678:	11 f0       	breq	.+4      	; 0x667e <vfprintf+0x1f0>
    667a:	89 36       	cpi	r24, 0x69	; 105
    667c:	39 f5       	brne	.+78     	; 0x66cc <vfprintf+0x23e>
    667e:	f8 01       	movw	r30, r16
    6680:	37 fe       	sbrs	r3, 7
    6682:	07 c0       	rjmp	.+14     	; 0x6692 <vfprintf+0x204>
    6684:	60 81       	ld	r22, Z
    6686:	71 81       	ldd	r23, Z+1	; 0x01
    6688:	82 81       	ldd	r24, Z+2	; 0x02
    668a:	93 81       	ldd	r25, Z+3	; 0x03
    668c:	0c 5f       	subi	r16, 0xFC	; 252
    668e:	1f 4f       	sbci	r17, 0xFF	; 255
    6690:	08 c0       	rjmp	.+16     	; 0x66a2 <vfprintf+0x214>
    6692:	60 81       	ld	r22, Z
    6694:	71 81       	ldd	r23, Z+1	; 0x01
    6696:	07 2e       	mov	r0, r23
    6698:	00 0c       	add	r0, r0
    669a:	88 0b       	sbc	r24, r24
    669c:	99 0b       	sbc	r25, r25
    669e:	0e 5f       	subi	r16, 0xFE	; 254
    66a0:	1f 4f       	sbci	r17, 0xFF	; 255
    66a2:	f3 2d       	mov	r31, r3
    66a4:	ff 76       	andi	r31, 0x6F	; 111
    66a6:	3f 2e       	mov	r3, r31
    66a8:	97 ff       	sbrs	r25, 7
    66aa:	09 c0       	rjmp	.+18     	; 0x66be <vfprintf+0x230>
    66ac:	90 95       	com	r25
    66ae:	80 95       	com	r24
    66b0:	70 95       	com	r23
    66b2:	61 95       	neg	r22
    66b4:	7f 4f       	sbci	r23, 0xFF	; 255
    66b6:	8f 4f       	sbci	r24, 0xFF	; 255
    66b8:	9f 4f       	sbci	r25, 0xFF	; 255
    66ba:	f0 68       	ori	r31, 0x80	; 128
    66bc:	3f 2e       	mov	r3, r31
    66be:	2a e0       	ldi	r18, 0x0A	; 10
    66c0:	30 e0       	ldi	r19, 0x00	; 0
    66c2:	a3 01       	movw	r20, r6
    66c4:	33 d1       	rcall	.+614    	; 0x692c <__ultoa_invert>
    66c6:	88 2e       	mov	r8, r24
    66c8:	86 18       	sub	r8, r6
    66ca:	44 c0       	rjmp	.+136    	; 0x6754 <vfprintf+0x2c6>
    66cc:	85 37       	cpi	r24, 0x75	; 117
    66ce:	31 f4       	brne	.+12     	; 0x66dc <vfprintf+0x24e>
    66d0:	23 2d       	mov	r18, r3
    66d2:	2f 7e       	andi	r18, 0xEF	; 239
    66d4:	b2 2e       	mov	r11, r18
    66d6:	2a e0       	ldi	r18, 0x0A	; 10
    66d8:	30 e0       	ldi	r19, 0x00	; 0
    66da:	25 c0       	rjmp	.+74     	; 0x6726 <vfprintf+0x298>
    66dc:	93 2d       	mov	r25, r3
    66de:	99 7f       	andi	r25, 0xF9	; 249
    66e0:	b9 2e       	mov	r11, r25
    66e2:	8f 36       	cpi	r24, 0x6F	; 111
    66e4:	c1 f0       	breq	.+48     	; 0x6716 <vfprintf+0x288>
    66e6:	18 f4       	brcc	.+6      	; 0x66ee <vfprintf+0x260>
    66e8:	88 35       	cpi	r24, 0x58	; 88
    66ea:	79 f0       	breq	.+30     	; 0x670a <vfprintf+0x27c>
    66ec:	ae c0       	rjmp	.+348    	; 0x684a <vfprintf+0x3bc>
    66ee:	80 37       	cpi	r24, 0x70	; 112
    66f0:	19 f0       	breq	.+6      	; 0x66f8 <vfprintf+0x26a>
    66f2:	88 37       	cpi	r24, 0x78	; 120
    66f4:	21 f0       	breq	.+8      	; 0x66fe <vfprintf+0x270>
    66f6:	a9 c0       	rjmp	.+338    	; 0x684a <vfprintf+0x3bc>
    66f8:	e9 2f       	mov	r30, r25
    66fa:	e0 61       	ori	r30, 0x10	; 16
    66fc:	be 2e       	mov	r11, r30
    66fe:	b4 fe       	sbrs	r11, 4
    6700:	0d c0       	rjmp	.+26     	; 0x671c <vfprintf+0x28e>
    6702:	fb 2d       	mov	r31, r11
    6704:	f4 60       	ori	r31, 0x04	; 4
    6706:	bf 2e       	mov	r11, r31
    6708:	09 c0       	rjmp	.+18     	; 0x671c <vfprintf+0x28e>
    670a:	34 fe       	sbrs	r3, 4
    670c:	0a c0       	rjmp	.+20     	; 0x6722 <vfprintf+0x294>
    670e:	29 2f       	mov	r18, r25
    6710:	26 60       	ori	r18, 0x06	; 6
    6712:	b2 2e       	mov	r11, r18
    6714:	06 c0       	rjmp	.+12     	; 0x6722 <vfprintf+0x294>
    6716:	28 e0       	ldi	r18, 0x08	; 8
    6718:	30 e0       	ldi	r19, 0x00	; 0
    671a:	05 c0       	rjmp	.+10     	; 0x6726 <vfprintf+0x298>
    671c:	20 e1       	ldi	r18, 0x10	; 16
    671e:	30 e0       	ldi	r19, 0x00	; 0
    6720:	02 c0       	rjmp	.+4      	; 0x6726 <vfprintf+0x298>
    6722:	20 e1       	ldi	r18, 0x10	; 16
    6724:	32 e0       	ldi	r19, 0x02	; 2
    6726:	f8 01       	movw	r30, r16
    6728:	b7 fe       	sbrs	r11, 7
    672a:	07 c0       	rjmp	.+14     	; 0x673a <vfprintf+0x2ac>
    672c:	60 81       	ld	r22, Z
    672e:	71 81       	ldd	r23, Z+1	; 0x01
    6730:	82 81       	ldd	r24, Z+2	; 0x02
    6732:	93 81       	ldd	r25, Z+3	; 0x03
    6734:	0c 5f       	subi	r16, 0xFC	; 252
    6736:	1f 4f       	sbci	r17, 0xFF	; 255
    6738:	06 c0       	rjmp	.+12     	; 0x6746 <vfprintf+0x2b8>
    673a:	60 81       	ld	r22, Z
    673c:	71 81       	ldd	r23, Z+1	; 0x01
    673e:	80 e0       	ldi	r24, 0x00	; 0
    6740:	90 e0       	ldi	r25, 0x00	; 0
    6742:	0e 5f       	subi	r16, 0xFE	; 254
    6744:	1f 4f       	sbci	r17, 0xFF	; 255
    6746:	a3 01       	movw	r20, r6
    6748:	f1 d0       	rcall	.+482    	; 0x692c <__ultoa_invert>
    674a:	88 2e       	mov	r8, r24
    674c:	86 18       	sub	r8, r6
    674e:	fb 2d       	mov	r31, r11
    6750:	ff 77       	andi	r31, 0x7F	; 127
    6752:	3f 2e       	mov	r3, r31
    6754:	36 fe       	sbrs	r3, 6
    6756:	0d c0       	rjmp	.+26     	; 0x6772 <vfprintf+0x2e4>
    6758:	23 2d       	mov	r18, r3
    675a:	2e 7f       	andi	r18, 0xFE	; 254
    675c:	a2 2e       	mov	r10, r18
    675e:	89 14       	cp	r8, r9
    6760:	58 f4       	brcc	.+22     	; 0x6778 <vfprintf+0x2ea>
    6762:	34 fe       	sbrs	r3, 4
    6764:	0b c0       	rjmp	.+22     	; 0x677c <vfprintf+0x2ee>
    6766:	32 fc       	sbrc	r3, 2
    6768:	09 c0       	rjmp	.+18     	; 0x677c <vfprintf+0x2ee>
    676a:	83 2d       	mov	r24, r3
    676c:	8e 7e       	andi	r24, 0xEE	; 238
    676e:	a8 2e       	mov	r10, r24
    6770:	05 c0       	rjmp	.+10     	; 0x677c <vfprintf+0x2ee>
    6772:	b8 2c       	mov	r11, r8
    6774:	a3 2c       	mov	r10, r3
    6776:	03 c0       	rjmp	.+6      	; 0x677e <vfprintf+0x2f0>
    6778:	b8 2c       	mov	r11, r8
    677a:	01 c0       	rjmp	.+2      	; 0x677e <vfprintf+0x2f0>
    677c:	b9 2c       	mov	r11, r9
    677e:	a4 fe       	sbrs	r10, 4
    6780:	0f c0       	rjmp	.+30     	; 0x67a0 <vfprintf+0x312>
    6782:	fe 01       	movw	r30, r28
    6784:	e8 0d       	add	r30, r8
    6786:	f1 1d       	adc	r31, r1
    6788:	80 81       	ld	r24, Z
    678a:	80 33       	cpi	r24, 0x30	; 48
    678c:	21 f4       	brne	.+8      	; 0x6796 <vfprintf+0x308>
    678e:	9a 2d       	mov	r25, r10
    6790:	99 7e       	andi	r25, 0xE9	; 233
    6792:	a9 2e       	mov	r10, r25
    6794:	09 c0       	rjmp	.+18     	; 0x67a8 <vfprintf+0x31a>
    6796:	a2 fe       	sbrs	r10, 2
    6798:	06 c0       	rjmp	.+12     	; 0x67a6 <vfprintf+0x318>
    679a:	b3 94       	inc	r11
    679c:	b3 94       	inc	r11
    679e:	04 c0       	rjmp	.+8      	; 0x67a8 <vfprintf+0x31a>
    67a0:	8a 2d       	mov	r24, r10
    67a2:	86 78       	andi	r24, 0x86	; 134
    67a4:	09 f0       	breq	.+2      	; 0x67a8 <vfprintf+0x31a>
    67a6:	b3 94       	inc	r11
    67a8:	a3 fc       	sbrc	r10, 3
    67aa:	10 c0       	rjmp	.+32     	; 0x67cc <vfprintf+0x33e>
    67ac:	a0 fe       	sbrs	r10, 0
    67ae:	06 c0       	rjmp	.+12     	; 0x67bc <vfprintf+0x32e>
    67b0:	b2 14       	cp	r11, r2
    67b2:	80 f4       	brcc	.+32     	; 0x67d4 <vfprintf+0x346>
    67b4:	28 0c       	add	r2, r8
    67b6:	92 2c       	mov	r9, r2
    67b8:	9b 18       	sub	r9, r11
    67ba:	0d c0       	rjmp	.+26     	; 0x67d6 <vfprintf+0x348>
    67bc:	b2 14       	cp	r11, r2
    67be:	58 f4       	brcc	.+22     	; 0x67d6 <vfprintf+0x348>
    67c0:	b6 01       	movw	r22, r12
    67c2:	80 e2       	ldi	r24, 0x20	; 32
    67c4:	90 e0       	ldi	r25, 0x00	; 0
    67c6:	76 d0       	rcall	.+236    	; 0x68b4 <fputc>
    67c8:	b3 94       	inc	r11
    67ca:	f8 cf       	rjmp	.-16     	; 0x67bc <vfprintf+0x32e>
    67cc:	b2 14       	cp	r11, r2
    67ce:	18 f4       	brcc	.+6      	; 0x67d6 <vfprintf+0x348>
    67d0:	2b 18       	sub	r2, r11
    67d2:	02 c0       	rjmp	.+4      	; 0x67d8 <vfprintf+0x34a>
    67d4:	98 2c       	mov	r9, r8
    67d6:	21 2c       	mov	r2, r1
    67d8:	a4 fe       	sbrs	r10, 4
    67da:	0f c0       	rjmp	.+30     	; 0x67fa <vfprintf+0x36c>
    67dc:	b6 01       	movw	r22, r12
    67de:	80 e3       	ldi	r24, 0x30	; 48
    67e0:	90 e0       	ldi	r25, 0x00	; 0
    67e2:	68 d0       	rcall	.+208    	; 0x68b4 <fputc>
    67e4:	a2 fe       	sbrs	r10, 2
    67e6:	16 c0       	rjmp	.+44     	; 0x6814 <vfprintf+0x386>
    67e8:	a1 fc       	sbrc	r10, 1
    67ea:	03 c0       	rjmp	.+6      	; 0x67f2 <vfprintf+0x364>
    67ec:	88 e7       	ldi	r24, 0x78	; 120
    67ee:	90 e0       	ldi	r25, 0x00	; 0
    67f0:	02 c0       	rjmp	.+4      	; 0x67f6 <vfprintf+0x368>
    67f2:	88 e5       	ldi	r24, 0x58	; 88
    67f4:	90 e0       	ldi	r25, 0x00	; 0
    67f6:	b6 01       	movw	r22, r12
    67f8:	0c c0       	rjmp	.+24     	; 0x6812 <vfprintf+0x384>
    67fa:	8a 2d       	mov	r24, r10
    67fc:	86 78       	andi	r24, 0x86	; 134
    67fe:	51 f0       	breq	.+20     	; 0x6814 <vfprintf+0x386>
    6800:	a1 fe       	sbrs	r10, 1
    6802:	02 c0       	rjmp	.+4      	; 0x6808 <vfprintf+0x37a>
    6804:	8b e2       	ldi	r24, 0x2B	; 43
    6806:	01 c0       	rjmp	.+2      	; 0x680a <vfprintf+0x37c>
    6808:	80 e2       	ldi	r24, 0x20	; 32
    680a:	a7 fc       	sbrc	r10, 7
    680c:	8d e2       	ldi	r24, 0x2D	; 45
    680e:	b6 01       	movw	r22, r12
    6810:	90 e0       	ldi	r25, 0x00	; 0
    6812:	50 d0       	rcall	.+160    	; 0x68b4 <fputc>
    6814:	89 14       	cp	r8, r9
    6816:	30 f4       	brcc	.+12     	; 0x6824 <vfprintf+0x396>
    6818:	b6 01       	movw	r22, r12
    681a:	80 e3       	ldi	r24, 0x30	; 48
    681c:	90 e0       	ldi	r25, 0x00	; 0
    681e:	4a d0       	rcall	.+148    	; 0x68b4 <fputc>
    6820:	9a 94       	dec	r9
    6822:	f8 cf       	rjmp	.-16     	; 0x6814 <vfprintf+0x386>
    6824:	8a 94       	dec	r8
    6826:	f3 01       	movw	r30, r6
    6828:	e8 0d       	add	r30, r8
    682a:	f1 1d       	adc	r31, r1
    682c:	80 81       	ld	r24, Z
    682e:	b6 01       	movw	r22, r12
    6830:	90 e0       	ldi	r25, 0x00	; 0
    6832:	40 d0       	rcall	.+128    	; 0x68b4 <fputc>
    6834:	81 10       	cpse	r8, r1
    6836:	f6 cf       	rjmp	.-20     	; 0x6824 <vfprintf+0x396>
    6838:	22 20       	and	r2, r2
    683a:	09 f4       	brne	.+2      	; 0x683e <vfprintf+0x3b0>
    683c:	4e ce       	rjmp	.-868    	; 0x64da <vfprintf+0x4c>
    683e:	b6 01       	movw	r22, r12
    6840:	80 e2       	ldi	r24, 0x20	; 32
    6842:	90 e0       	ldi	r25, 0x00	; 0
    6844:	37 d0       	rcall	.+110    	; 0x68b4 <fputc>
    6846:	2a 94       	dec	r2
    6848:	f7 cf       	rjmp	.-18     	; 0x6838 <vfprintf+0x3aa>
    684a:	f6 01       	movw	r30, r12
    684c:	86 81       	ldd	r24, Z+6	; 0x06
    684e:	97 81       	ldd	r25, Z+7	; 0x07
    6850:	02 c0       	rjmp	.+4      	; 0x6856 <vfprintf+0x3c8>
    6852:	8f ef       	ldi	r24, 0xFF	; 255
    6854:	9f ef       	ldi	r25, 0xFF	; 255
    6856:	2b 96       	adiw	r28, 0x0b	; 11
    6858:	0f b6       	in	r0, 0x3f	; 63
    685a:	f8 94       	cli
    685c:	de bf       	out	0x3e, r29	; 62
    685e:	0f be       	out	0x3f, r0	; 63
    6860:	cd bf       	out	0x3d, r28	; 61
    6862:	df 91       	pop	r29
    6864:	cf 91       	pop	r28
    6866:	1f 91       	pop	r17
    6868:	0f 91       	pop	r16
    686a:	ff 90       	pop	r15
    686c:	ef 90       	pop	r14
    686e:	df 90       	pop	r13
    6870:	cf 90       	pop	r12
    6872:	bf 90       	pop	r11
    6874:	af 90       	pop	r10
    6876:	9f 90       	pop	r9
    6878:	8f 90       	pop	r8
    687a:	7f 90       	pop	r7
    687c:	6f 90       	pop	r6
    687e:	5f 90       	pop	r5
    6880:	4f 90       	pop	r4
    6882:	3f 90       	pop	r3
    6884:	2f 90       	pop	r2
    6886:	08 95       	ret

00006888 <strnlen_P>:
    6888:	fc 01       	movw	r30, r24
    688a:	05 90       	lpm	r0, Z+
    688c:	61 50       	subi	r22, 0x01	; 1
    688e:	70 40       	sbci	r23, 0x00	; 0
    6890:	01 10       	cpse	r0, r1
    6892:	d8 f7       	brcc	.-10     	; 0x688a <strnlen_P+0x2>
    6894:	80 95       	com	r24
    6896:	90 95       	com	r25
    6898:	8e 0f       	add	r24, r30
    689a:	9f 1f       	adc	r25, r31
    689c:	08 95       	ret

0000689e <strnlen>:
    689e:	fc 01       	movw	r30, r24
    68a0:	61 50       	subi	r22, 0x01	; 1
    68a2:	70 40       	sbci	r23, 0x00	; 0
    68a4:	01 90       	ld	r0, Z+
    68a6:	01 10       	cpse	r0, r1
    68a8:	d8 f7       	brcc	.-10     	; 0x68a0 <strnlen+0x2>
    68aa:	80 95       	com	r24
    68ac:	90 95       	com	r25
    68ae:	8e 0f       	add	r24, r30
    68b0:	9f 1f       	adc	r25, r31
    68b2:	08 95       	ret

000068b4 <fputc>:
    68b4:	0f 93       	push	r16
    68b6:	1f 93       	push	r17
    68b8:	cf 93       	push	r28
    68ba:	df 93       	push	r29
    68bc:	fb 01       	movw	r30, r22
    68be:	23 81       	ldd	r18, Z+3	; 0x03
    68c0:	21 fd       	sbrc	r18, 1
    68c2:	03 c0       	rjmp	.+6      	; 0x68ca <fputc+0x16>
    68c4:	8f ef       	ldi	r24, 0xFF	; 255
    68c6:	9f ef       	ldi	r25, 0xFF	; 255
    68c8:	2c c0       	rjmp	.+88     	; 0x6922 <fputc+0x6e>
    68ca:	22 ff       	sbrs	r18, 2
    68cc:	16 c0       	rjmp	.+44     	; 0x68fa <fputc+0x46>
    68ce:	46 81       	ldd	r20, Z+6	; 0x06
    68d0:	57 81       	ldd	r21, Z+7	; 0x07
    68d2:	24 81       	ldd	r18, Z+4	; 0x04
    68d4:	35 81       	ldd	r19, Z+5	; 0x05
    68d6:	42 17       	cp	r20, r18
    68d8:	53 07       	cpc	r21, r19
    68da:	44 f4       	brge	.+16     	; 0x68ec <fputc+0x38>
    68dc:	a0 81       	ld	r26, Z
    68de:	b1 81       	ldd	r27, Z+1	; 0x01
    68e0:	9d 01       	movw	r18, r26
    68e2:	2f 5f       	subi	r18, 0xFF	; 255
    68e4:	3f 4f       	sbci	r19, 0xFF	; 255
    68e6:	31 83       	std	Z+1, r19	; 0x01
    68e8:	20 83       	st	Z, r18
    68ea:	8c 93       	st	X, r24
    68ec:	26 81       	ldd	r18, Z+6	; 0x06
    68ee:	37 81       	ldd	r19, Z+7	; 0x07
    68f0:	2f 5f       	subi	r18, 0xFF	; 255
    68f2:	3f 4f       	sbci	r19, 0xFF	; 255
    68f4:	37 83       	std	Z+7, r19	; 0x07
    68f6:	26 83       	std	Z+6, r18	; 0x06
    68f8:	14 c0       	rjmp	.+40     	; 0x6922 <fputc+0x6e>
    68fa:	8b 01       	movw	r16, r22
    68fc:	ec 01       	movw	r28, r24
    68fe:	fb 01       	movw	r30, r22
    6900:	00 84       	ldd	r0, Z+8	; 0x08
    6902:	f1 85       	ldd	r31, Z+9	; 0x09
    6904:	e0 2d       	mov	r30, r0
    6906:	19 95       	eicall
    6908:	89 2b       	or	r24, r25
    690a:	e1 f6       	brne	.-72     	; 0x68c4 <fputc+0x10>
    690c:	d8 01       	movw	r26, r16
    690e:	16 96       	adiw	r26, 0x06	; 6
    6910:	8d 91       	ld	r24, X+
    6912:	9c 91       	ld	r25, X
    6914:	17 97       	sbiw	r26, 0x07	; 7
    6916:	01 96       	adiw	r24, 0x01	; 1
    6918:	17 96       	adiw	r26, 0x07	; 7
    691a:	9c 93       	st	X, r25
    691c:	8e 93       	st	-X, r24
    691e:	16 97       	sbiw	r26, 0x06	; 6
    6920:	ce 01       	movw	r24, r28
    6922:	df 91       	pop	r29
    6924:	cf 91       	pop	r28
    6926:	1f 91       	pop	r17
    6928:	0f 91       	pop	r16
    692a:	08 95       	ret

0000692c <__ultoa_invert>:
    692c:	fa 01       	movw	r30, r20
    692e:	aa 27       	eor	r26, r26
    6930:	28 30       	cpi	r18, 0x08	; 8
    6932:	51 f1       	breq	.+84     	; 0x6988 <__ultoa_invert+0x5c>
    6934:	20 31       	cpi	r18, 0x10	; 16
    6936:	81 f1       	breq	.+96     	; 0x6998 <__ultoa_invert+0x6c>
    6938:	e8 94       	clt
    693a:	6f 93       	push	r22
    693c:	6e 7f       	andi	r22, 0xFE	; 254
    693e:	6e 5f       	subi	r22, 0xFE	; 254
    6940:	7f 4f       	sbci	r23, 0xFF	; 255
    6942:	8f 4f       	sbci	r24, 0xFF	; 255
    6944:	9f 4f       	sbci	r25, 0xFF	; 255
    6946:	af 4f       	sbci	r26, 0xFF	; 255
    6948:	b1 e0       	ldi	r27, 0x01	; 1
    694a:	3e d0       	rcall	.+124    	; 0x69c8 <__ultoa_invert+0x9c>
    694c:	b4 e0       	ldi	r27, 0x04	; 4
    694e:	3c d0       	rcall	.+120    	; 0x69c8 <__ultoa_invert+0x9c>
    6950:	67 0f       	add	r22, r23
    6952:	78 1f       	adc	r23, r24
    6954:	89 1f       	adc	r24, r25
    6956:	9a 1f       	adc	r25, r26
    6958:	a1 1d       	adc	r26, r1
    695a:	68 0f       	add	r22, r24
    695c:	79 1f       	adc	r23, r25
    695e:	8a 1f       	adc	r24, r26
    6960:	91 1d       	adc	r25, r1
    6962:	a1 1d       	adc	r26, r1
    6964:	6a 0f       	add	r22, r26
    6966:	71 1d       	adc	r23, r1
    6968:	81 1d       	adc	r24, r1
    696a:	91 1d       	adc	r25, r1
    696c:	a1 1d       	adc	r26, r1
    696e:	20 d0       	rcall	.+64     	; 0x69b0 <__ultoa_invert+0x84>
    6970:	09 f4       	brne	.+2      	; 0x6974 <__ultoa_invert+0x48>
    6972:	68 94       	set
    6974:	3f 91       	pop	r19
    6976:	2a e0       	ldi	r18, 0x0A	; 10
    6978:	26 9f       	mul	r18, r22
    697a:	11 24       	eor	r1, r1
    697c:	30 19       	sub	r19, r0
    697e:	30 5d       	subi	r19, 0xD0	; 208
    6980:	31 93       	st	Z+, r19
    6982:	de f6       	brtc	.-74     	; 0x693a <__ultoa_invert+0xe>
    6984:	cf 01       	movw	r24, r30
    6986:	08 95       	ret
    6988:	46 2f       	mov	r20, r22
    698a:	47 70       	andi	r20, 0x07	; 7
    698c:	40 5d       	subi	r20, 0xD0	; 208
    698e:	41 93       	st	Z+, r20
    6990:	b3 e0       	ldi	r27, 0x03	; 3
    6992:	0f d0       	rcall	.+30     	; 0x69b2 <__ultoa_invert+0x86>
    6994:	c9 f7       	brne	.-14     	; 0x6988 <__ultoa_invert+0x5c>
    6996:	f6 cf       	rjmp	.-20     	; 0x6984 <__ultoa_invert+0x58>
    6998:	46 2f       	mov	r20, r22
    699a:	4f 70       	andi	r20, 0x0F	; 15
    699c:	40 5d       	subi	r20, 0xD0	; 208
    699e:	4a 33       	cpi	r20, 0x3A	; 58
    69a0:	18 f0       	brcs	.+6      	; 0x69a8 <__ultoa_invert+0x7c>
    69a2:	49 5d       	subi	r20, 0xD9	; 217
    69a4:	31 fd       	sbrc	r19, 1
    69a6:	40 52       	subi	r20, 0x20	; 32
    69a8:	41 93       	st	Z+, r20
    69aa:	02 d0       	rcall	.+4      	; 0x69b0 <__ultoa_invert+0x84>
    69ac:	a9 f7       	brne	.-22     	; 0x6998 <__ultoa_invert+0x6c>
    69ae:	ea cf       	rjmp	.-44     	; 0x6984 <__ultoa_invert+0x58>
    69b0:	b4 e0       	ldi	r27, 0x04	; 4
    69b2:	a6 95       	lsr	r26
    69b4:	97 95       	ror	r25
    69b6:	87 95       	ror	r24
    69b8:	77 95       	ror	r23
    69ba:	67 95       	ror	r22
    69bc:	ba 95       	dec	r27
    69be:	c9 f7       	brne	.-14     	; 0x69b2 <__ultoa_invert+0x86>
    69c0:	00 97       	sbiw	r24, 0x00	; 0
    69c2:	61 05       	cpc	r22, r1
    69c4:	71 05       	cpc	r23, r1
    69c6:	08 95       	ret
    69c8:	9b 01       	movw	r18, r22
    69ca:	ac 01       	movw	r20, r24
    69cc:	0a 2e       	mov	r0, r26
    69ce:	06 94       	lsr	r0
    69d0:	57 95       	ror	r21
    69d2:	47 95       	ror	r20
    69d4:	37 95       	ror	r19
    69d6:	27 95       	ror	r18
    69d8:	ba 95       	dec	r27
    69da:	c9 f7       	brne	.-14     	; 0x69ce <__ultoa_invert+0xa2>
    69dc:	62 0f       	add	r22, r18
    69de:	73 1f       	adc	r23, r19
    69e0:	84 1f       	adc	r24, r20
    69e2:	95 1f       	adc	r25, r21
    69e4:	a0 1d       	adc	r26, r0
    69e6:	08 95       	ret

000069e8 <__divmodsi4>:
    69e8:	05 2e       	mov	r0, r21
    69ea:	97 fb       	bst	r25, 7
    69ec:	16 f4       	brtc	.+4      	; 0x69f2 <__divmodsi4+0xa>
    69ee:	00 94       	com	r0
    69f0:	0f d0       	rcall	.+30     	; 0x6a10 <__negsi2>
    69f2:	57 fd       	sbrc	r21, 7
    69f4:	05 d0       	rcall	.+10     	; 0x6a00 <__divmodsi4_neg2>
    69f6:	a9 da       	rcall	.-2734   	; 0x5f4a <__udivmodsi4>
    69f8:	07 fc       	sbrc	r0, 7
    69fa:	02 d0       	rcall	.+4      	; 0x6a00 <__divmodsi4_neg2>
    69fc:	46 f4       	brtc	.+16     	; 0x6a0e <__divmodsi4_exit>
    69fe:	08 c0       	rjmp	.+16     	; 0x6a10 <__negsi2>

00006a00 <__divmodsi4_neg2>:
    6a00:	50 95       	com	r21
    6a02:	40 95       	com	r20
    6a04:	30 95       	com	r19
    6a06:	21 95       	neg	r18
    6a08:	3f 4f       	sbci	r19, 0xFF	; 255
    6a0a:	4f 4f       	sbci	r20, 0xFF	; 255
    6a0c:	5f 4f       	sbci	r21, 0xFF	; 255

00006a0e <__divmodsi4_exit>:
    6a0e:	08 95       	ret

00006a10 <__negsi2>:
    6a10:	90 95       	com	r25
    6a12:	80 95       	com	r24
    6a14:	70 95       	com	r23
    6a16:	61 95       	neg	r22
    6a18:	7f 4f       	sbci	r23, 0xFF	; 255
    6a1a:	8f 4f       	sbci	r24, 0xFF	; 255
    6a1c:	9f 4f       	sbci	r25, 0xFF	; 255
    6a1e:	08 95       	ret

00006a20 <__muluhisi3>:
    6a20:	0f d0       	rcall	.+30     	; 0x6a40 <__umulhisi3>
    6a22:	a5 9f       	mul	r26, r21
    6a24:	90 0d       	add	r25, r0
    6a26:	b4 9f       	mul	r27, r20
    6a28:	90 0d       	add	r25, r0
    6a2a:	a4 9f       	mul	r26, r20
    6a2c:	80 0d       	add	r24, r0
    6a2e:	91 1d       	adc	r25, r1
    6a30:	11 24       	eor	r1, r1
    6a32:	08 95       	ret

00006a34 <__mulshisi3>:
    6a34:	b7 ff       	sbrs	r27, 7
    6a36:	f4 cf       	rjmp	.-24     	; 0x6a20 <__muluhisi3>

00006a38 <__mulohisi3>:
    6a38:	f3 df       	rcall	.-26     	; 0x6a20 <__muluhisi3>
    6a3a:	82 1b       	sub	r24, r18
    6a3c:	93 0b       	sbc	r25, r19
    6a3e:	08 95       	ret

00006a40 <__umulhisi3>:
    6a40:	a2 9f       	mul	r26, r18
    6a42:	b0 01       	movw	r22, r0
    6a44:	b3 9f       	mul	r27, r19
    6a46:	c0 01       	movw	r24, r0
    6a48:	a3 9f       	mul	r26, r19
    6a4a:	70 0d       	add	r23, r0
    6a4c:	81 1d       	adc	r24, r1
    6a4e:	11 24       	eor	r1, r1
    6a50:	91 1d       	adc	r25, r1
    6a52:	b2 9f       	mul	r27, r18
    6a54:	70 0d       	add	r23, r0
    6a56:	81 1d       	adc	r24, r1
    6a58:	11 24       	eor	r1, r1
    6a5a:	91 1d       	adc	r25, r1
    6a5c:	08 95       	ret

00006a5e <_exit>:
    6a5e:	f8 94       	cli

00006a60 <__stop_program>:
    6a60:	ff cf       	rjmp	.-2      	; 0x6a60 <__stop_program>
