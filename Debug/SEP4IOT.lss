
SEP4IOT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000005b0  00800200  00006984  00006a18  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006984  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000012dd  008007b0  008007b0  00006fc8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00006fc8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00007024  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000cc0  00000000  00000000  00007064  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000fb84  00000000  00000000  00007d24  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000040dc  00000000  00000000  000178a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00007806  00000000  00000000  0001b984  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002b84  00000000  00000000  0002318c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000048dc  00000000  00000000  00025d10  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000e17c  00000000  00000000  0002a5ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000c88  00000000  00000000  00038768  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	50 c2       	rjmp	.+1184   	; 0x4a2 <__ctors_end>
       2:	00 00       	nop
       4:	6f c2       	rjmp	.+1246   	; 0x4e4 <__bad_interrupt>
       6:	00 00       	nop
       8:	6d c2       	rjmp	.+1242   	; 0x4e4 <__bad_interrupt>
       a:	00 00       	nop
       c:	6b c2       	rjmp	.+1238   	; 0x4e4 <__bad_interrupt>
       e:	00 00       	nop
      10:	69 c2       	rjmp	.+1234   	; 0x4e4 <__bad_interrupt>
      12:	00 00       	nop
      14:	67 c2       	rjmp	.+1230   	; 0x4e4 <__bad_interrupt>
      16:	00 00       	nop
      18:	65 c2       	rjmp	.+1226   	; 0x4e4 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	63 c2       	rjmp	.+1222   	; 0x4e4 <__bad_interrupt>
      1e:	00 00       	nop
      20:	61 c2       	rjmp	.+1218   	; 0x4e4 <__bad_interrupt>
      22:	00 00       	nop
      24:	5f c2       	rjmp	.+1214   	; 0x4e4 <__bad_interrupt>
      26:	00 00       	nop
      28:	5d c2       	rjmp	.+1210   	; 0x4e4 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	5b c2       	rjmp	.+1206   	; 0x4e4 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 11 0e 	jmp	0x1c22	; 0x1c22 <__vector_12>
      34:	57 c2       	rjmp	.+1198   	; 0x4e4 <__bad_interrupt>
      36:	00 00       	nop
      38:	55 c2       	rjmp	.+1194   	; 0x4e4 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	53 c2       	rjmp	.+1190   	; 0x4e4 <__bad_interrupt>
      3e:	00 00       	nop
      40:	51 c2       	rjmp	.+1186   	; 0x4e4 <__bad_interrupt>
      42:	00 00       	nop
      44:	4f c2       	rjmp	.+1182   	; 0x4e4 <__bad_interrupt>
      46:	00 00       	nop
      48:	4d c2       	rjmp	.+1178   	; 0x4e4 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	4b c2       	rjmp	.+1174   	; 0x4e4 <__bad_interrupt>
      4e:	00 00       	nop
      50:	49 c2       	rjmp	.+1170   	; 0x4e4 <__bad_interrupt>
      52:	00 00       	nop
      54:	47 c2       	rjmp	.+1166   	; 0x4e4 <__bad_interrupt>
      56:	00 00       	nop
      58:	45 c2       	rjmp	.+1162   	; 0x4e4 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	43 c2       	rjmp	.+1158   	; 0x4e4 <__bad_interrupt>
      5e:	00 00       	nop
      60:	41 c2       	rjmp	.+1154   	; 0x4e4 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 db 28 	jmp	0x51b6	; 0x51b6 <__vector_25>
      68:	0c 94 2d 29 	jmp	0x525a	; 0x525a <__vector_26>
      6c:	3b c2       	rjmp	.+1142   	; 0x4e4 <__bad_interrupt>
      6e:	00 00       	nop
      70:	39 c2       	rjmp	.+1138   	; 0x4e4 <__bad_interrupt>
      72:	00 00       	nop
      74:	37 c2       	rjmp	.+1134   	; 0x4e4 <__bad_interrupt>
      76:	00 00       	nop
      78:	35 c2       	rjmp	.+1130   	; 0x4e4 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	33 c2       	rjmp	.+1126   	; 0x4e4 <__bad_interrupt>
      7e:	00 00       	nop
      80:	31 c2       	rjmp	.+1122   	; 0x4e4 <__bad_interrupt>
      82:	00 00       	nop
      84:	2f c2       	rjmp	.+1118   	; 0x4e4 <__bad_interrupt>
      86:	00 00       	nop
      88:	2d c2       	rjmp	.+1114   	; 0x4e4 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	2b c2       	rjmp	.+1110   	; 0x4e4 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 71 29 	jmp	0x52e2	; 0x52e2 <__vector_36>
      94:	0c 94 c3 29 	jmp	0x5386	; 0x5386 <__vector_37>
      98:	25 c2       	rjmp	.+1098   	; 0x4e4 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 5b 2c 	jmp	0x58b6	; 0x58b6 <__vector_39>
      a0:	21 c2       	rjmp	.+1090   	; 0x4e4 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	1f c2       	rjmp	.+1086   	; 0x4e4 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	1d c2       	rjmp	.+1082   	; 0x4e4 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	1b c2       	rjmp	.+1078   	; 0x4e4 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	19 c2       	rjmp	.+1074   	; 0x4e4 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	17 c2       	rjmp	.+1070   	; 0x4e4 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	15 c2       	rjmp	.+1066   	; 0x4e4 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	13 c2       	rjmp	.+1062   	; 0x4e4 <__bad_interrupt>
      be:	00 00       	nop
      c0:	11 c2       	rjmp	.+1058   	; 0x4e4 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	0f c2       	rjmp	.+1054   	; 0x4e4 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	0d c2       	rjmp	.+1050   	; 0x4e4 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 07 2a 	jmp	0x540e	; 0x540e <__vector_51>
      d0:	0c 94 59 2a 	jmp	0x54b2	; 0x54b2 <__vector_52>
      d4:	07 c2       	rjmp	.+1038   	; 0x4e4 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 9d 2a 	jmp	0x553a	; 0x553a <__vector_54>
      dc:	0c 94 ef 2a 	jmp	0x55de	; 0x55de <__vector_55>
      e0:	01 c2       	rjmp	.+1026   	; 0x4e4 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	c6 01       	movw	r24, r12
      e6:	c6 01       	movw	r24, r12
      e8:	c6 01       	movw	r24, r12
      ea:	00 02       	muls	r16, r16
      ec:	08 02       	muls	r16, r24
      ee:	1e 02       	muls	r17, r30
      f0:	c6 01       	movw	r24, r12
      f2:	c6 01       	movw	r24, r12
      f4:	00 02       	muls	r16, r16
      f6:	08 02       	muls	r16, r24
      f8:	7d 2c       	mov	r7, r13
      fa:	ed 2c       	mov	r14, r13
      fc:	ed 2c       	mov	r14, r13
      fe:	ed 2c       	mov	r14, r13
     100:	ed 2c       	mov	r14, r13
     102:	ed 2c       	mov	r14, r13
     104:	ed 2c       	mov	r14, r13
     106:	ed 2c       	mov	r14, r13
     108:	7d 2c       	mov	r7, r13
     10a:	ed 2c       	mov	r14, r13
     10c:	ed 2c       	mov	r14, r13
     10e:	ed 2c       	mov	r14, r13
     110:	ed 2c       	mov	r14, r13
     112:	ed 2c       	mov	r14, r13
     114:	ed 2c       	mov	r14, r13
     116:	ed 2c       	mov	r14, r13
     118:	7f 2c       	mov	r7, r15
     11a:	ed 2c       	mov	r14, r13
     11c:	ed 2c       	mov	r14, r13
     11e:	ed 2c       	mov	r14, r13
     120:	ed 2c       	mov	r14, r13
     122:	ed 2c       	mov	r14, r13
     124:	ed 2c       	mov	r14, r13
     126:	ed 2c       	mov	r14, r13
     128:	ed 2c       	mov	r14, r13
     12a:	ed 2c       	mov	r14, r13
     12c:	ed 2c       	mov	r14, r13
     12e:	ed 2c       	mov	r14, r13
     130:	ed 2c       	mov	r14, r13
     132:	ed 2c       	mov	r14, r13
     134:	ed 2c       	mov	r14, r13
     136:	ed 2c       	mov	r14, r13
     138:	7f 2c       	mov	r7, r15
     13a:	ed 2c       	mov	r14, r13
     13c:	ed 2c       	mov	r14, r13
     13e:	ed 2c       	mov	r14, r13
     140:	ed 2c       	mov	r14, r13
     142:	ed 2c       	mov	r14, r13
     144:	ed 2c       	mov	r14, r13
     146:	ed 2c       	mov	r14, r13
     148:	ed 2c       	mov	r14, r13
     14a:	ed 2c       	mov	r14, r13
     14c:	ed 2c       	mov	r14, r13
     14e:	ed 2c       	mov	r14, r13
     150:	ed 2c       	mov	r14, r13
     152:	ed 2c       	mov	r14, r13
     154:	ed 2c       	mov	r14, r13
     156:	ed 2c       	mov	r14, r13
     158:	e9 2c       	mov	r14, r9
     15a:	ed 2c       	mov	r14, r13
     15c:	ed 2c       	mov	r14, r13
     15e:	ed 2c       	mov	r14, r13
     160:	ed 2c       	mov	r14, r13
     162:	ed 2c       	mov	r14, r13
     164:	ed 2c       	mov	r14, r13
     166:	ed 2c       	mov	r14, r13
     168:	b4 2c       	mov	r11, r4
     16a:	ed 2c       	mov	r14, r13
     16c:	ed 2c       	mov	r14, r13
     16e:	ed 2c       	mov	r14, r13
     170:	ed 2c       	mov	r14, r13
     172:	ed 2c       	mov	r14, r13
     174:	ed 2c       	mov	r14, r13
     176:	ed 2c       	mov	r14, r13
     178:	ed 2c       	mov	r14, r13
     17a:	ed 2c       	mov	r14, r13
     17c:	ed 2c       	mov	r14, r13
     17e:	ed 2c       	mov	r14, r13
     180:	ed 2c       	mov	r14, r13
     182:	ed 2c       	mov	r14, r13
     184:	ed 2c       	mov	r14, r13
     186:	ed 2c       	mov	r14, r13
     188:	a8 2c       	mov	r10, r8
     18a:	ed 2c       	mov	r14, r13
     18c:	ed 2c       	mov	r14, r13
     18e:	ed 2c       	mov	r14, r13
     190:	ed 2c       	mov	r14, r13
     192:	ed 2c       	mov	r14, r13
     194:	ed 2c       	mov	r14, r13
     196:	ed 2c       	mov	r14, r13
     198:	cc 2c       	mov	r12, r12

0000019a <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     19a:	07 e5       	ldi	r16, 0x57	; 87
     19c:	18 e1       	ldi	r17, 0x18	; 24
     19e:	0f 2e       	mov	r0, r31
     1a0:	f7 e8       	ldi	r31, 0x87	; 135
     1a2:	ef 2e       	mov	r14, r31
     1a4:	f8 e1       	ldi	r31, 0x18	; 24
     1a6:	ff 2e       	mov	r15, r31
     1a8:	f0 2d       	mov	r31, r0
     1aa:	80 91 56 18 	lds	r24, 0x1856	; 0x801856 <uxDeletedTasksWaitingCleanUp>
     1ae:	88 23       	and	r24, r24
     1b0:	29 f1       	breq	.+74     	; 0x1fc <prvIdleTask+0x62>
     1b2:	0f b6       	in	r0, 0x3f	; 63
     1b4:	f8 94       	cli
     1b6:	0f 92       	push	r0
     1b8:	d8 01       	movw	r26, r16
     1ba:	17 96       	adiw	r26, 0x07	; 7
     1bc:	ed 91       	ld	r30, X+
     1be:	fc 91       	ld	r31, X
     1c0:	18 97       	sbiw	r26, 0x08	; 8
     1c2:	c0 85       	ldd	r28, Z+8	; 0x08
     1c4:	d1 85       	ldd	r29, Z+9	; 0x09
     1c6:	ce 01       	movw	r24, r28
     1c8:	02 96       	adiw	r24, 0x02	; 2
     1ca:	0e 94 76 0c 	call	0x18ec	; 0x18ec <uxListRemove>
     1ce:	80 91 4a 18 	lds	r24, 0x184A	; 0x80184a <uxCurrentNumberOfTasks>
     1d2:	81 50       	subi	r24, 0x01	; 1
     1d4:	80 93 4a 18 	sts	0x184A, r24	; 0x80184a <uxCurrentNumberOfTasks>
     1d8:	80 91 56 18 	lds	r24, 0x1856	; 0x801856 <uxDeletedTasksWaitingCleanUp>
     1dc:	81 50       	subi	r24, 0x01	; 1
     1de:	80 93 56 18 	sts	0x1856, r24	; 0x801856 <uxDeletedTasksWaitingCleanUp>
     1e2:	0f 90       	pop	r0
     1e4:	0f be       	out	0x3f, r0	; 63
     1e6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     1e8:	9c 8d       	ldd	r25, Y+28	; 0x1c
     1ea:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <vPortFree>
     1ee:	ce 01       	movw	r24, r28
     1f0:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <vPortFree>
     1f4:	80 91 56 18 	lds	r24, 0x1856	; 0x801856 <uxDeletedTasksWaitingCleanUp>
     1f8:	81 11       	cpse	r24, r1
     1fa:	db cf       	rjmp	.-74     	; 0x1b2 <prvIdleTask+0x18>
     1fc:	f7 01       	movw	r30, r14
     1fe:	80 81       	ld	r24, Z
     200:	82 30       	cpi	r24, 0x02	; 2
     202:	10 f0       	brcs	.+4      	; 0x208 <prvIdleTask+0x6e>
     204:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <vPortYield>
     208:	0e 94 67 1e 	call	0x3cce	; 0x3cce <vApplicationIdleHook>
     20c:	ce cf       	rjmp	.-100    	; 0x1aa <prvIdleTask+0x10>

0000020e <prvTimerTask>:
            pxNewTimer->ucStatus = 0x00;
            prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
        }

        return pxNewTimer;
    }
     20e:	cf 93       	push	r28
     210:	df 93       	push	r29
     212:	cd b7       	in	r28, 0x3d	; 61
     214:	de b7       	in	r29, 0x3e	; 62
     216:	60 97       	sbiw	r28, 0x10	; 16
     218:	0f b6       	in	r0, 0x3f	; 63
     21a:	f8 94       	cli
     21c:	de bf       	out	0x3e, r29	; 62
     21e:	0f be       	out	0x3f, r0	; 63
     220:	cd bf       	out	0x3d, r28	; 61
     222:	ce 01       	movw	r24, r28
     224:	01 96       	adiw	r24, 0x01	; 1
     226:	9a 87       	std	Y+10, r25	; 0x0a
     228:	89 87       	std	Y+9, r24	; 0x09
     22a:	81 2c       	mov	r8, r1
     22c:	91 2c       	mov	r9, r1
     22e:	a1 2c       	mov	r10, r1
     230:	b1 2c       	mov	r11, r1
     232:	69 84       	ldd	r6, Y+9	; 0x09
     234:	7a 84       	ldd	r7, Y+10	; 0x0a
     236:	e0 91 d5 18 	lds	r30, 0x18D5	; 0x8018d5 <pxCurrentTimerList>
     23a:	f0 91 d6 18 	lds	r31, 0x18D6	; 0x8018d6 <pxCurrentTimerList+0x1>
     23e:	80 81       	ld	r24, Z
     240:	88 23       	and	r24, r24
     242:	09 f4       	brne	.+2      	; 0x246 <prvTimerTask+0x38>
     244:	14 c1       	rjmp	.+552    	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
     246:	07 80       	ldd	r0, Z+7	; 0x07
     248:	f0 85       	ldd	r31, Z+8	; 0x08
     24a:	e0 2d       	mov	r30, r0
     24c:	20 80       	ld	r2, Z
     24e:	31 80       	ldd	r3, Z+1	; 0x01
     250:	42 80       	ldd	r4, Z+2	; 0x02
     252:	53 80       	ldd	r5, Z+3	; 0x03
     254:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <vTaskSuspendAll>
     258:	ce 01       	movw	r24, r28
     25a:	01 96       	adiw	r24, 0x01	; 1
     25c:	0e 94 d1 1d 	call	0x3ba2	; 0x3ba2 <prvSampleTimeNow>
     260:	6b 87       	std	Y+11, r22	; 0x0b
     262:	7c 87       	std	Y+12, r23	; 0x0c
     264:	8d 87       	std	Y+13, r24	; 0x0d
     266:	9e 87       	std	Y+14, r25	; 0x0e
     268:	89 81       	ldd	r24, Y+1	; 0x01
     26a:	81 11       	cpse	r24, r1
     26c:	67 c0       	rjmp	.+206    	; 0x33c <prvTimerTask+0x12e>
     26e:	8b 85       	ldd	r24, Y+11	; 0x0b
     270:	9c 85       	ldd	r25, Y+12	; 0x0c
     272:	ad 85       	ldd	r26, Y+13	; 0x0d
     274:	be 85       	ldd	r27, Y+14	; 0x0e
     276:	82 15       	cp	r24, r2
     278:	93 05       	cpc	r25, r3
     27a:	a4 05       	cpc	r26, r4
     27c:	b5 05       	cpc	r27, r5
     27e:	08 f4       	brcc	.+2      	; 0x282 <prvTimerTask+0x74>
     280:	45 c0       	rjmp	.+138    	; 0x30c <prvTimerTask+0xfe>
     282:	0e 94 93 17 	call	0x2f26	; 0x2f26 <xTaskResumeAll>
     286:	e0 91 d5 18 	lds	r30, 0x18D5	; 0x8018d5 <pxCurrentTimerList>
     28a:	f0 91 d6 18 	lds	r31, 0x18D6	; 0x8018d6 <pxCurrentTimerList+0x1>
     28e:	07 80       	ldd	r0, Z+7	; 0x07
     290:	f0 85       	ldd	r31, Z+8	; 0x08
     292:	e0 2d       	mov	r30, r0
     294:	a0 85       	ldd	r26, Z+8	; 0x08
     296:	b1 85       	ldd	r27, Z+9	; 0x09
     298:	b8 8b       	std	Y+16, r27	; 0x10
     29a:	af 87       	std	Y+15, r26	; 0x0f
     29c:	cd 01       	movw	r24, r26
     29e:	02 96       	adiw	r24, 0x02	; 2
     2a0:	0e 94 76 0c 	call	0x18ec	; 0x18ec <uxListRemove>
     2a4:	ef 85       	ldd	r30, Y+15	; 0x0f
     2a6:	f8 89       	ldd	r31, Y+16	; 0x10
     2a8:	87 89       	ldd	r24, Z+23	; 0x17
     2aa:	82 ff       	sbrs	r24, 2
     2ac:	21 c0       	rjmp	.+66     	; 0x2f0 <prvTimerTask+0xe2>
     2ae:	46 85       	ldd	r20, Z+14	; 0x0e
     2b0:	57 85       	ldd	r21, Z+15	; 0x0f
     2b2:	60 89       	ldd	r22, Z+16	; 0x10
     2b4:	71 89       	ldd	r23, Z+17	; 0x11
     2b6:	42 0d       	add	r20, r2
     2b8:	53 1d       	adc	r21, r3
     2ba:	64 1d       	adc	r22, r4
     2bc:	75 1d       	adc	r23, r5
     2be:	72 01       	movw	r14, r4
     2c0:	61 01       	movw	r12, r2
     2c2:	0b 85       	ldd	r16, Y+11	; 0x0b
     2c4:	1c 85       	ldd	r17, Y+12	; 0x0c
     2c6:	2d 85       	ldd	r18, Y+13	; 0x0d
     2c8:	3e 85       	ldd	r19, Y+14	; 0x0e
     2ca:	cf 01       	movw	r24, r30
     2cc:	0e 94 e0 1c 	call	0x39c0	; 0x39c0 <prvInsertTimerInActiveList>
     2d0:	88 23       	and	r24, r24
     2d2:	99 f0       	breq	.+38     	; 0x2fa <prvTimerTask+0xec>
     2d4:	c8 2c       	mov	r12, r8
     2d6:	d9 2c       	mov	r13, r9
     2d8:	ea 2c       	mov	r14, r10
     2da:	fb 2c       	mov	r15, r11
     2dc:	00 e0       	ldi	r16, 0x00	; 0
     2de:	10 e0       	ldi	r17, 0x00	; 0
     2e0:	a2 01       	movw	r20, r4
     2e2:	91 01       	movw	r18, r2
     2e4:	60 e0       	ldi	r22, 0x00	; 0
     2e6:	8f 85       	ldd	r24, Y+15	; 0x0f
     2e8:	98 89       	ldd	r25, Y+16	; 0x10
     2ea:	0e 94 73 1d 	call	0x3ae6	; 0x3ae6 <xTimerGenericCommand>
     2ee:	05 c0       	rjmp	.+10     	; 0x2fa <prvTimerTask+0xec>
     2f0:	8e 7f       	andi	r24, 0xFE	; 254
     2f2:	af 85       	ldd	r26, Y+15	; 0x0f
     2f4:	b8 89       	ldd	r27, Y+16	; 0x10
     2f6:	57 96       	adiw	r26, 0x17	; 23
     2f8:	8c 93       	st	X, r24
     2fa:	af 85       	ldd	r26, Y+15	; 0x0f
     2fc:	b8 89       	ldd	r27, Y+16	; 0x10
     2fe:	54 96       	adiw	r26, 0x14	; 20
     300:	ed 91       	ld	r30, X+
     302:	fc 91       	ld	r31, X
     304:	55 97       	sbiw	r26, 0x15	; 21
     306:	cd 01       	movw	r24, r26
     308:	19 95       	eicall
     30a:	a2 c0       	rjmp	.+324    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     30c:	20 e0       	ldi	r18, 0x00	; 0
     30e:	b2 01       	movw	r22, r4
     310:	a1 01       	movw	r20, r2
     312:	8b 85       	ldd	r24, Y+11	; 0x0b
     314:	9c 85       	ldd	r25, Y+12	; 0x0c
     316:	ad 85       	ldd	r26, Y+13	; 0x0d
     318:	be 85       	ldd	r27, Y+14	; 0x0e
     31a:	48 1b       	sub	r20, r24
     31c:	59 0b       	sbc	r21, r25
     31e:	6a 0b       	sbc	r22, r26
     320:	7b 0b       	sbc	r23, r27
     322:	80 91 d1 18 	lds	r24, 0x18D1	; 0x8018d1 <xTimerQueue>
     326:	90 91 d2 18 	lds	r25, 0x18D2	; 0x8018d2 <xTimerQueue+0x1>
     32a:	0e 94 ad 11 	call	0x235a	; 0x235a <vQueueWaitForMessageRestricted>
     32e:	0e 94 93 17 	call	0x2f26	; 0x2f26 <xTaskResumeAll>
     332:	81 11       	cpse	r24, r1
     334:	8d c0       	rjmp	.+282    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     336:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <vPortYield>
     33a:	8a c0       	rjmp	.+276    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     33c:	0e 94 93 17 	call	0x2f26	; 0x2f26 <xTaskResumeAll>
     340:	87 c0       	rjmp	.+270    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     342:	89 81       	ldd	r24, Y+1	; 0x01
     344:	88 23       	and	r24, r24
     346:	0c f4       	brge	.+2      	; 0x34a <prvTimerTask+0x13c>
     348:	83 c0       	rjmp	.+262    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     34a:	4e 80       	ldd	r4, Y+6	; 0x06
     34c:	5f 80       	ldd	r5, Y+7	; 0x07
     34e:	d2 01       	movw	r26, r4
     350:	1c 96       	adiw	r26, 0x0c	; 12
     352:	8d 91       	ld	r24, X+
     354:	9c 91       	ld	r25, X
     356:	1d 97       	sbiw	r26, 0x0d	; 13
     358:	89 2b       	or	r24, r25
     35a:	21 f0       	breq	.+8      	; 0x364 <prvTimerTask+0x156>
     35c:	c2 01       	movw	r24, r4
     35e:	02 96       	adiw	r24, 0x02	; 2
     360:	0e 94 76 0c 	call	0x18ec	; 0x18ec <uxListRemove>
     364:	ce 01       	movw	r24, r28
     366:	08 96       	adiw	r24, 0x08	; 8
     368:	0e 94 d1 1d 	call	0x3ba2	; 0x3ba2 <prvSampleTimeNow>
     36c:	8b 01       	movw	r16, r22
     36e:	9c 01       	movw	r18, r24
     370:	e9 81       	ldd	r30, Y+1	; 0x01
     372:	0e 2e       	mov	r0, r30
     374:	00 0c       	add	r0, r0
     376:	ff 0b       	sbc	r31, r31
     378:	ea 30       	cpi	r30, 0x0A	; 10
     37a:	f1 05       	cpc	r31, r1
     37c:	08 f0       	brcs	.+2      	; 0x380 <prvTimerTask+0x172>
     37e:	68 c0       	rjmp	.+208    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     380:	88 27       	eor	r24, r24
     382:	ee 58       	subi	r30, 0x8E	; 142
     384:	ff 4f       	sbci	r31, 0xFF	; 255
     386:	8f 4f       	sbci	r24, 0xFF	; 255
     388:	0c 94 58 2f 	jmp	0x5eb0	; 0x5eb0 <__tablejump2__>
     38c:	f2 01       	movw	r30, r4
     38e:	87 89       	ldd	r24, Z+23	; 0x17
     390:	81 60       	ori	r24, 0x01	; 1
     392:	87 8b       	std	Z+23, r24	; 0x17
     394:	ca 80       	ldd	r12, Y+2	; 0x02
     396:	db 80       	ldd	r13, Y+3	; 0x03
     398:	ec 80       	ldd	r14, Y+4	; 0x04
     39a:	fd 80       	ldd	r15, Y+5	; 0x05
     39c:	46 85       	ldd	r20, Z+14	; 0x0e
     39e:	57 85       	ldd	r21, Z+15	; 0x0f
     3a0:	60 89       	ldd	r22, Z+16	; 0x10
     3a2:	71 89       	ldd	r23, Z+17	; 0x11
     3a4:	4c 0d       	add	r20, r12
     3a6:	5d 1d       	adc	r21, r13
     3a8:	6e 1d       	adc	r22, r14
     3aa:	7f 1d       	adc	r23, r15
     3ac:	c2 01       	movw	r24, r4
     3ae:	0e 94 e0 1c 	call	0x39c0	; 0x39c0 <prvInsertTimerInActiveList>
     3b2:	88 23       	and	r24, r24
     3b4:	09 f4       	brne	.+2      	; 0x3b8 <prvTimerTask+0x1aa>
     3b6:	4c c0       	rjmp	.+152    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     3b8:	d2 01       	movw	r26, r4
     3ba:	54 96       	adiw	r26, 0x14	; 20
     3bc:	ed 91       	ld	r30, X+
     3be:	fc 91       	ld	r31, X
     3c0:	55 97       	sbiw	r26, 0x15	; 21
     3c2:	c2 01       	movw	r24, r4
     3c4:	19 95       	eicall
     3c6:	f2 01       	movw	r30, r4
     3c8:	87 89       	ldd	r24, Z+23	; 0x17
     3ca:	82 ff       	sbrs	r24, 2
     3cc:	41 c0       	rjmp	.+130    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     3ce:	4a 81       	ldd	r20, Y+2	; 0x02
     3d0:	5b 81       	ldd	r21, Y+3	; 0x03
     3d2:	6c 81       	ldd	r22, Y+4	; 0x04
     3d4:	7d 81       	ldd	r23, Y+5	; 0x05
     3d6:	86 85       	ldd	r24, Z+14	; 0x0e
     3d8:	97 85       	ldd	r25, Z+15	; 0x0f
     3da:	a0 89       	ldd	r26, Z+16	; 0x10
     3dc:	b1 89       	ldd	r27, Z+17	; 0x11
     3de:	9a 01       	movw	r18, r20
     3e0:	ab 01       	movw	r20, r22
     3e2:	28 0f       	add	r18, r24
     3e4:	39 1f       	adc	r19, r25
     3e6:	4a 1f       	adc	r20, r26
     3e8:	5b 1f       	adc	r21, r27
     3ea:	c8 2c       	mov	r12, r8
     3ec:	d9 2c       	mov	r13, r9
     3ee:	ea 2c       	mov	r14, r10
     3f0:	fb 2c       	mov	r15, r11
     3f2:	00 e0       	ldi	r16, 0x00	; 0
     3f4:	10 e0       	ldi	r17, 0x00	; 0
     3f6:	60 e0       	ldi	r22, 0x00	; 0
     3f8:	c2 01       	movw	r24, r4
     3fa:	0e 94 73 1d 	call	0x3ae6	; 0x3ae6 <xTimerGenericCommand>
     3fe:	28 c0       	rjmp	.+80     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     400:	d2 01       	movw	r26, r4
     402:	57 96       	adiw	r26, 0x17	; 23
     404:	8c 91       	ld	r24, X
     406:	57 97       	sbiw	r26, 0x17	; 23
     408:	8e 7f       	andi	r24, 0xFE	; 254
     40a:	57 96       	adiw	r26, 0x17	; 23
     40c:	8c 93       	st	X, r24
     40e:	20 c0       	rjmp	.+64     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     410:	f2 01       	movw	r30, r4
     412:	87 89       	ldd	r24, Z+23	; 0x17
     414:	81 60       	ori	r24, 0x01	; 1
     416:	87 8b       	std	Z+23, r24	; 0x17
     418:	4a 81       	ldd	r20, Y+2	; 0x02
     41a:	5b 81       	ldd	r21, Y+3	; 0x03
     41c:	6c 81       	ldd	r22, Y+4	; 0x04
     41e:	7d 81       	ldd	r23, Y+5	; 0x05
     420:	46 87       	std	Z+14, r20	; 0x0e
     422:	57 87       	std	Z+15, r21	; 0x0f
     424:	60 8b       	std	Z+16, r22	; 0x10
     426:	71 8b       	std	Z+17, r23	; 0x11
     428:	40 0f       	add	r20, r16
     42a:	51 1f       	adc	r21, r17
     42c:	62 1f       	adc	r22, r18
     42e:	73 1f       	adc	r23, r19
     430:	68 01       	movw	r12, r16
     432:	79 01       	movw	r14, r18
     434:	c2 01       	movw	r24, r4
     436:	0e 94 e0 1c 	call	0x39c0	; 0x39c0 <prvInsertTimerInActiveList>
     43a:	0a c0       	rjmp	.+20     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     43c:	f2 01       	movw	r30, r4
     43e:	87 89       	ldd	r24, Z+23	; 0x17
     440:	81 fd       	sbrc	r24, 1
     442:	04 c0       	rjmp	.+8      	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
     444:	c2 01       	movw	r24, r4
     446:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <vPortFree>
     44a:	02 c0       	rjmp	.+4      	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     44c:	8e 7f       	andi	r24, 0xFE	; 254
     44e:	87 8b       	std	Z+23, r24	; 0x17
     450:	28 2d       	mov	r18, r8
     452:	39 2d       	mov	r19, r9
     454:	4a 2d       	mov	r20, r10
     456:	5b 2d       	mov	r21, r11
     458:	66 2d       	mov	r22, r6
     45a:	77 2d       	mov	r23, r7
     45c:	80 91 d1 18 	lds	r24, 0x18D1	; 0x8018d1 <xTimerQueue>
     460:	90 91 d2 18 	lds	r25, 0x18D2	; 0x8018d2 <xTimerQueue+0x1>
     464:	0e 94 49 10 	call	0x2092	; 0x2092 <xQueueReceive>
     468:	81 11       	cpse	r24, r1
     46a:	6b cf       	rjmp	.-298    	; 0x342 <prvTimerTask+0x134>
     46c:	e4 ce       	rjmp	.-568    	; 0x236 <prvTimerTask+0x28>
     46e:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <vTaskSuspendAll>
     472:	ce 01       	movw	r24, r28
     474:	01 96       	adiw	r24, 0x01	; 1
     476:	0e 94 d1 1d 	call	0x3ba2	; 0x3ba2 <prvSampleTimeNow>
     47a:	6b 87       	std	Y+11, r22	; 0x0b
     47c:	7c 87       	std	Y+12, r23	; 0x0c
     47e:	8d 87       	std	Y+13, r24	; 0x0d
     480:	9e 87       	std	Y+14, r25	; 0x0e
     482:	89 81       	ldd	r24, Y+1	; 0x01
     484:	81 11       	cpse	r24, r1
     486:	5a cf       	rjmp	.-332    	; 0x33c <prvTimerTask+0x12e>
     488:	e0 91 d3 18 	lds	r30, 0x18D3	; 0x8018d3 <pxOverflowTimerList>
     48c:	f0 91 d4 18 	lds	r31, 0x18D4	; 0x8018d4 <pxOverflowTimerList+0x1>
     490:	80 81       	ld	r24, Z
     492:	21 e0       	ldi	r18, 0x01	; 1
     494:	81 11       	cpse	r24, r1
     496:	20 e0       	ldi	r18, 0x00	; 0
     498:	28 2c       	mov	r2, r8
     49a:	39 2c       	mov	r3, r9
     49c:	4a 2c       	mov	r4, r10
     49e:	5b 2c       	mov	r5, r11
     4a0:	36 cf       	rjmp	.-404    	; 0x30e <prvTimerTask+0x100>

000004a2 <__ctors_end>:
     4a2:	11 24       	eor	r1, r1
     4a4:	1f be       	out	0x3f, r1	; 63
     4a6:	cf ef       	ldi	r28, 0xFF	; 255
     4a8:	d1 e2       	ldi	r29, 0x21	; 33
     4aa:	de bf       	out	0x3e, r29	; 62
     4ac:	cd bf       	out	0x3d, r28	; 61
     4ae:	00 e0       	ldi	r16, 0x00	; 0
     4b0:	0c bf       	out	0x3c, r16	; 60

000004b2 <__do_copy_data>:
     4b2:	17 e0       	ldi	r17, 0x07	; 7
     4b4:	a0 e0       	ldi	r26, 0x00	; 0
     4b6:	b2 e0       	ldi	r27, 0x02	; 2
     4b8:	e4 e8       	ldi	r30, 0x84	; 132
     4ba:	f9 e6       	ldi	r31, 0x69	; 105
     4bc:	00 e0       	ldi	r16, 0x00	; 0
     4be:	0b bf       	out	0x3b, r16	; 59
     4c0:	02 c0       	rjmp	.+4      	; 0x4c6 <__do_copy_data+0x14>
     4c2:	07 90       	elpm	r0, Z+
     4c4:	0d 92       	st	X+, r0
     4c6:	a0 3b       	cpi	r26, 0xB0	; 176
     4c8:	b1 07       	cpc	r27, r17
     4ca:	d9 f7       	brne	.-10     	; 0x4c2 <__do_copy_data+0x10>

000004cc <__do_clear_bss>:
     4cc:	2a e1       	ldi	r18, 0x1A	; 26
     4ce:	a0 eb       	ldi	r26, 0xB0	; 176
     4d0:	b7 e0       	ldi	r27, 0x07	; 7
     4d2:	01 c0       	rjmp	.+2      	; 0x4d6 <.do_clear_bss_start>

000004d4 <.do_clear_bss_loop>:
     4d4:	1d 92       	st	X+, r1

000004d6 <.do_clear_bss_start>:
     4d6:	ad 38       	cpi	r26, 0x8D	; 141
     4d8:	b2 07       	cpc	r27, r18
     4da:	e1 f7       	brne	.-8      	; 0x4d4 <.do_clear_bss_loop>
     4dc:	0e 94 54 1f 	call	0x3ea8	; 0x3ea8 <main>
     4e0:	0c 94 c0 34 	jmp	0x6980	; 0x6980 <_exit>

000004e4 <__bad_interrupt>:
     4e4:	8d cd       	rjmp	.-1254   	; 0x0 <__vectors>

000004e6 <time>:
     4e6:	fc 01       	movw	r30, r24
     4e8:	0f b6       	in	r0, 0x3f	; 63
     4ea:	f8 94       	cli
     4ec:	60 91 89 1a 	lds	r22, 0x1A89	; 0x801a89 <__system_time>
     4f0:	70 91 8a 1a 	lds	r23, 0x1A8A	; 0x801a8a <__system_time+0x1>
     4f4:	80 91 8b 1a 	lds	r24, 0x1A8B	; 0x801a8b <__system_time+0x2>
     4f8:	90 91 8c 1a 	lds	r25, 0x1A8C	; 0x801a8c <__system_time+0x3>
     4fc:	0f be       	out	0x3f, r0	; 63
     4fe:	30 97       	sbiw	r30, 0x00	; 0
     500:	21 f0       	breq	.+8      	; 0x50a <time+0x24>
     502:	60 83       	st	Z, r22
     504:	71 83       	std	Z+1, r23	; 0x01
     506:	82 83       	std	Z+2, r24	; 0x02
     508:	93 83       	std	Z+3, r25	; 0x03
     50a:	08 95       	ret

0000050c <co2Reader_create>:
void co2Reader_destroy(co2reader_t self) {
	if (self == NULL)
		return;
	vTaskDelete(self->handleTask);
	vPortFree(self);
}
     50c:	2f 92       	push	r2
     50e:	3f 92       	push	r3
     510:	4f 92       	push	r4
     512:	5f 92       	push	r5
     514:	6f 92       	push	r6
     516:	7f 92       	push	r7
     518:	8f 92       	push	r8
     51a:	9f 92       	push	r9
     51c:	af 92       	push	r10
     51e:	bf 92       	push	r11
     520:	cf 92       	push	r12
     522:	df 92       	push	r13
     524:	ef 92       	push	r14
     526:	ff 92       	push	r15
     528:	0f 93       	push	r16
     52a:	1f 93       	push	r17
     52c:	cf 93       	push	r28
     52e:	df 93       	push	r29
     530:	d8 2f       	mov	r29, r24
     532:	c6 2f       	mov	r28, r22
     534:	1a 01       	movw	r2, r20
     536:	28 01       	movw	r4, r16
     538:	39 01       	movw	r6, r18
     53a:	87 01       	movw	r16, r14
     53c:	64 e0       	ldi	r22, 0x04	; 4
     53e:	70 e0       	ldi	r23, 0x00	; 0
     540:	81 e0       	ldi	r24, 0x01	; 1
     542:	90 e0       	ldi	r25, 0x00	; 0
     544:	0e 94 74 2f 	call	0x5ee8	; 0x5ee8 <calloc>
     548:	4c 01       	movw	r8, r24
     54a:	89 2b       	or	r24, r25
     54c:	69 f1       	breq	.+90     	; 0x5a8 <co2Reader_create+0x9c>
     54e:	f4 01       	movw	r30, r8
     550:	11 92       	st	Z+, r1
     552:	11 92       	st	Z+, r1
     554:	7f 01       	movw	r14, r30
     556:	30 92 bb 07 	sts	0x07BB, r3	; 0x8007bb <_startMeasureEventGroup+0x1>
     55a:	20 92 ba 07 	sts	0x07BA, r2	; 0x8007ba <_startMeasureEventGroup>
     55e:	40 92 b6 07 	sts	0x07B6, r4	; 0x8007b6 <_startMeasureBit>
     562:	50 92 b7 07 	sts	0x07B7, r5	; 0x8007b7 <_startMeasureBit+0x1>
     566:	60 92 b8 07 	sts	0x07B8, r6	; 0x8007b8 <_startMeasureBit+0x2>
     56a:	70 92 b9 07 	sts	0x07B9, r7	; 0x8007b9 <_startMeasureBit+0x3>
     56e:	10 93 b5 07 	sts	0x07B5, r17	; 0x8007b5 <_readyEventGroup+0x1>
     572:	00 93 b4 07 	sts	0x07B4, r16	; 0x8007b4 <_readyEventGroup>
     576:	a0 92 b0 07 	sts	0x07B0, r10	; 0x8007b0 <__data_end>
     57a:	b0 92 b1 07 	sts	0x07B1, r11	; 0x8007b1 <__data_end+0x1>
     57e:	c0 92 b2 07 	sts	0x07B2, r12	; 0x8007b2 <__data_end+0x2>
     582:	d0 92 b3 07 	sts	0x07B3, r13	; 0x8007b3 <__data_end+0x3>
     586:	60 e0       	ldi	r22, 0x00	; 0
     588:	70 e0       	ldi	r23, 0x00	; 0
     58a:	83 e0       	ldi	r24, 0x03	; 3
     58c:	0e 94 12 27 	call	0x4e24	; 0x4e24 <mh_z19_create>
     590:	4c 2f       	mov	r20, r28
     592:	50 e0       	ldi	r21, 0x00	; 0
     594:	48 53       	subi	r20, 0x38	; 56
     596:	5f 4f       	sbci	r21, 0xFF	; 255
     598:	0d 2f       	mov	r16, r29
     59a:	94 01       	movw	r18, r8
     59c:	62 e7       	ldi	r22, 0x72	; 114
     59e:	72 e0       	ldi	r23, 0x02	; 2
     5a0:	8b e3       	ldi	r24, 0x3B	; 59
     5a2:	93 e0       	ldi	r25, 0x03	; 3
     5a4:	0e 94 4d 15 	call	0x2a9a	; 0x2a9a <xTaskCreate>
     5a8:	c4 01       	movw	r24, r8
     5aa:	df 91       	pop	r29
     5ac:	cf 91       	pop	r28
     5ae:	1f 91       	pop	r17
     5b0:	0f 91       	pop	r16
     5b2:	ff 90       	pop	r15
     5b4:	ef 90       	pop	r14
     5b6:	df 90       	pop	r13
     5b8:	cf 90       	pop	r12
     5ba:	bf 90       	pop	r11
     5bc:	af 90       	pop	r10
     5be:	9f 90       	pop	r9
     5c0:	8f 90       	pop	r8
     5c2:	7f 90       	pop	r7
     5c4:	6f 90       	pop	r6
     5c6:	5f 90       	pop	r5
     5c8:	4f 90       	pop	r4
     5ca:	3f 90       	pop	r3
     5cc:	2f 90       	pop	r2
     5ce:	08 95       	ret

000005d0 <co2Reader_measure>:


void co2Reader_measure(co2reader_t self) {
     5d0:	cf 92       	push	r12
     5d2:	df 92       	push	r13
     5d4:	ef 92       	push	r14
     5d6:	ff 92       	push	r15
     5d8:	0f 93       	push	r16
     5da:	1f 93       	push	r17
     5dc:	cf 93       	push	r28
     5de:	df 93       	push	r29
     5e0:	ec 01       	movw	r28, r24
	
	EventBits_t uxBits = xEventGroupWaitBits(_startMeasureEventGroup,
     5e2:	40 91 b6 07 	lds	r20, 0x07B6	; 0x8007b6 <_startMeasureBit>
     5e6:	50 91 b7 07 	lds	r21, 0x07B7	; 0x8007b7 <_startMeasureBit+0x1>
     5ea:	60 91 b8 07 	lds	r22, 0x07B8	; 0x8007b8 <_startMeasureBit+0x2>
     5ee:	70 91 b9 07 	lds	r23, 0x07B9	; 0x8007b9 <_startMeasureBit+0x3>
     5f2:	cc 24       	eor	r12, r12
     5f4:	ca 94       	dec	r12
     5f6:	dc 2c       	mov	r13, r12
     5f8:	76 01       	movw	r14, r12
     5fa:	01 e0       	ldi	r16, 0x01	; 1
     5fc:	21 e0       	ldi	r18, 0x01	; 1
     5fe:	80 91 ba 07 	lds	r24, 0x07BA	; 0x8007ba <_startMeasureEventGroup>
     602:	90 91 bb 07 	lds	r25, 0x07BB	; 0x8007bb <_startMeasureEventGroup+0x1>
     606:	6f d6       	rcall	.+3294   	; 0x12e6 <xEventGroupWaitBits>
	_startMeasureBit,
	pdTRUE,
	pdTRUE, 
	portMAX_DELAY);
	
	if ((uxBits & (_startMeasureBit)) == (_startMeasureBit)) {
     608:	00 91 b6 07 	lds	r16, 0x07B6	; 0x8007b6 <_startMeasureBit>
     60c:	10 91 b7 07 	lds	r17, 0x07B7	; 0x8007b7 <_startMeasureBit+0x1>
     610:	20 91 b8 07 	lds	r18, 0x07B8	; 0x8007b8 <_startMeasureBit+0x2>
     614:	30 91 b9 07 	lds	r19, 0x07B9	; 0x8007b9 <_startMeasureBit+0x3>
     618:	dc 01       	movw	r26, r24
     61a:	cb 01       	movw	r24, r22
     61c:	80 23       	and	r24, r16
     61e:	91 23       	and	r25, r17
     620:	a2 23       	and	r26, r18
     622:	b3 23       	and	r27, r19
     624:	08 17       	cp	r16, r24
     626:	19 07       	cpc	r17, r25
     628:	2a 07       	cpc	r18, r26
     62a:	3b 07       	cpc	r19, r27
     62c:	d9 f4       	brne	.+54     	; 0x664 <co2Reader_measure+0x94>
				
		mh_z19_return_code_t return_code_co2_measurement = mh_z19_take_meassuring();
     62e:	0e 94 40 27 	call	0x4e80	; 0x4e80 <mh_z19_take_meassuring>
     632:	18 2f       	mov	r17, r24
		vTaskDelay(300);
     634:	6c e2       	ldi	r22, 0x2C	; 44
     636:	71 e0       	ldi	r23, 0x01	; 1
     638:	80 e0       	ldi	r24, 0x00	; 0
     63a:	90 e0       	ldi	r25, 0x00	; 0
     63c:	0e 94 0f 18 	call	0x301e	; 0x301e <vTaskDelay>
		if(return_code_co2_measurement == MHZ19_OK) {
     640:	11 11       	cpse	r17, r1
     642:	03 c0       	rjmp	.+6      	; 0x64a <co2Reader_measure+0x7a>
			mh_z19_get_co2_ppm(&self->value);
     644:	ce 01       	movw	r24, r28
     646:	0e 94 6f 27 	call	0x4ede	; 0x4ede <mh_z19_get_co2_ppm>
		}
		xEventGroupSetBits(_readyEventGroup, _readyBit);
     64a:	40 91 b0 07 	lds	r20, 0x07B0	; 0x8007b0 <__data_end>
     64e:	50 91 b1 07 	lds	r21, 0x07B1	; 0x8007b1 <__data_end+0x1>
     652:	60 91 b2 07 	lds	r22, 0x07B2	; 0x8007b2 <__data_end+0x2>
     656:	70 91 b3 07 	lds	r23, 0x07B3	; 0x8007b3 <__data_end+0x3>
     65a:	80 91 b4 07 	lds	r24, 0x07B4	; 0x8007b4 <_readyEventGroup>
     65e:	90 91 b5 07 	lds	r25, 0x07B5	; 0x8007b5 <_readyEventGroup+0x1>
     662:	01 d7       	rcall	.+3586   	; 0x1466 <xEventGroupSetBits>
	}
}
     664:	df 91       	pop	r29
     666:	cf 91       	pop	r28
     668:	1f 91       	pop	r17
     66a:	0f 91       	pop	r16
     66c:	ff 90       	pop	r15
     66e:	ef 90       	pop	r14
     670:	df 90       	pop	r13
     672:	cf 90       	pop	r12
     674:	08 95       	ret

00000676 <co2Reader_executeTask>:
typedef struct co2reader {
	uint16_t value;
	TaskHandle_t handleTask;
}co2reader;

void co2Reader_executeTask(void* self) {
     676:	ec 01       	movw	r28, r24
	for (;;) {
		co2Reader_measure((co2reader_t)self);
     678:	ce 01       	movw	r24, r28
     67a:	aa df       	rcall	.-172    	; 0x5d0 <co2Reader_measure>
     67c:	fd cf       	rjmp	.-6      	; 0x678 <co2Reader_executeTask+0x2>

0000067e <co2Reader_getCO2>:
	}
}

uint16_t co2Reader_getCO2(co2reader_t self) {
	return self->value;
}
     67e:	fc 01       	movw	r30, r24
     680:	80 81       	ld	r24, Z
     682:	91 81       	ldd	r25, Z+1	; 0x01
     684:	08 95       	ret

00000686 <configuration_create>:

void configuration_create(SemaphoreHandle_t semaphore) {
	_working = calloc(1, sizeof(bool));
	_ventilation = calloc(1, sizeof(bool));

	_working = true;
     686:	21 e0       	ldi	r18, 0x01	; 1
     688:	20 93 bf 07 	sts	0x07BF, r18	; 0x8007bf <_working>
	_ventilation = false;
     68c:	10 92 be 07 	sts	0x07BE, r1	; 0x8007be <_ventilation>

	_semaphore = semaphore;
     690:	90 93 bd 07 	sts	0x07BD, r25	; 0x8007bd <_semaphore+0x1>
     694:	80 93 bc 07 	sts	0x07BC, r24	; 0x8007bc <_semaphore>
     698:	08 95       	ret

0000069a <configuration_setWorking>:
}

void configuration_setWorking(bool value) {
     69a:	0f 93       	push	r16
     69c:	cf 93       	push	r28
	if (_semaphore != NULL) {
     69e:	20 91 bc 07 	lds	r18, 0x07BC	; 0x8007bc <_semaphore>
     6a2:	30 91 bd 07 	lds	r19, 0x07BD	; 0x8007bd <_semaphore+0x1>
     6a6:	21 15       	cp	r18, r1
     6a8:	31 05       	cpc	r19, r1
     6aa:	b1 f0       	breq	.+44     	; 0x6d8 <configuration_setWorking+0x3e>
     6ac:	c8 2f       	mov	r28, r24
		xSemaphoreTake(_semaphore, portMAX_DELAY);
     6ae:	4f ef       	ldi	r20, 0xFF	; 255
     6b0:	5f ef       	ldi	r21, 0xFF	; 255
     6b2:	ba 01       	movw	r22, r20
     6b4:	c9 01       	movw	r24, r18
     6b6:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <xQueueSemaphoreTake>
		_working = value;
     6ba:	c0 93 bf 07 	sts	0x07BF, r28	; 0x8007bf <_working>
		xSemaphoreGive(_semaphore);
     6be:	00 e0       	ldi	r16, 0x00	; 0
     6c0:	20 e0       	ldi	r18, 0x00	; 0
     6c2:	30 e0       	ldi	r19, 0x00	; 0
     6c4:	a9 01       	movw	r20, r18
     6c6:	60 e0       	ldi	r22, 0x00	; 0
     6c8:	70 e0       	ldi	r23, 0x00	; 0
     6ca:	80 91 bc 07 	lds	r24, 0x07BC	; 0x8007bc <_semaphore>
     6ce:	90 91 bd 07 	lds	r25, 0x07BD	; 0x8007bd <_semaphore+0x1>
     6d2:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <xQueueGenericSend>
     6d6:	02 c0       	rjmp	.+4      	; 0x6dc <configuration_setWorking+0x42>
	}
	else _working = value;
     6d8:	80 93 bf 07 	sts	0x07BF, r24	; 0x8007bf <_working>
}
     6dc:	cf 91       	pop	r28
     6de:	0f 91       	pop	r16
     6e0:	08 95       	ret

000006e2 <configuration_getWorking>:

void configuration_getWorking(bool* working) {
     6e2:	0f 93       	push	r16
     6e4:	cf 93       	push	r28
     6e6:	df 93       	push	r29
	if (_semaphore != NULL) {
     6e8:	20 91 bc 07 	lds	r18, 0x07BC	; 0x8007bc <_semaphore>
     6ec:	30 91 bd 07 	lds	r19, 0x07BD	; 0x8007bd <_semaphore+0x1>
     6f0:	21 15       	cp	r18, r1
     6f2:	31 05       	cpc	r19, r1
     6f4:	b9 f0       	breq	.+46     	; 0x724 <configuration_getWorking+0x42>
     6f6:	ec 01       	movw	r28, r24
		xSemaphoreTake(_semaphore, portMAX_DELAY);
     6f8:	4f ef       	ldi	r20, 0xFF	; 255
     6fa:	5f ef       	ldi	r21, 0xFF	; 255
     6fc:	ba 01       	movw	r22, r20
     6fe:	c9 01       	movw	r24, r18
     700:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <xQueueSemaphoreTake>
		*working = _working;
     704:	80 91 bf 07 	lds	r24, 0x07BF	; 0x8007bf <_working>
     708:	88 83       	st	Y, r24
		xSemaphoreGive(_semaphore);
     70a:	00 e0       	ldi	r16, 0x00	; 0
     70c:	20 e0       	ldi	r18, 0x00	; 0
     70e:	30 e0       	ldi	r19, 0x00	; 0
     710:	a9 01       	movw	r20, r18
     712:	60 e0       	ldi	r22, 0x00	; 0
     714:	70 e0       	ldi	r23, 0x00	; 0
     716:	80 91 bc 07 	lds	r24, 0x07BC	; 0x8007bc <_semaphore>
     71a:	90 91 bd 07 	lds	r25, 0x07BD	; 0x8007bd <_semaphore+0x1>
     71e:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <xQueueGenericSend>
     722:	04 c0       	rjmp	.+8      	; 0x72c <configuration_getWorking+0x4a>
	}
	else *working = _working;
     724:	20 91 bf 07 	lds	r18, 0x07BF	; 0x8007bf <_working>
     728:	fc 01       	movw	r30, r24
     72a:	20 83       	st	Z, r18
}
     72c:	df 91       	pop	r29
     72e:	cf 91       	pop	r28
     730:	0f 91       	pop	r16
     732:	08 95       	ret

00000734 <configuration_setVentilation>:

void configuration_setVentilation(bool value) {
     734:	0f 93       	push	r16
     736:	cf 93       	push	r28
	if (_semaphore != NULL) {
     738:	20 91 bc 07 	lds	r18, 0x07BC	; 0x8007bc <_semaphore>
     73c:	30 91 bd 07 	lds	r19, 0x07BD	; 0x8007bd <_semaphore+0x1>
     740:	21 15       	cp	r18, r1
     742:	31 05       	cpc	r19, r1
     744:	b1 f0       	breq	.+44     	; 0x772 <configuration_setVentilation+0x3e>
     746:	c8 2f       	mov	r28, r24
		xSemaphoreTake(_semaphore, portMAX_DELAY);
     748:	4f ef       	ldi	r20, 0xFF	; 255
     74a:	5f ef       	ldi	r21, 0xFF	; 255
     74c:	ba 01       	movw	r22, r20
     74e:	c9 01       	movw	r24, r18
     750:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <xQueueSemaphoreTake>
		_ventilation = value;
     754:	c0 93 be 07 	sts	0x07BE, r28	; 0x8007be <_ventilation>
		xSemaphoreGive(_semaphore);
     758:	00 e0       	ldi	r16, 0x00	; 0
     75a:	20 e0       	ldi	r18, 0x00	; 0
     75c:	30 e0       	ldi	r19, 0x00	; 0
     75e:	a9 01       	movw	r20, r18
     760:	60 e0       	ldi	r22, 0x00	; 0
     762:	70 e0       	ldi	r23, 0x00	; 0
     764:	80 91 bc 07 	lds	r24, 0x07BC	; 0x8007bc <_semaphore>
     768:	90 91 bd 07 	lds	r25, 0x07BD	; 0x8007bd <_semaphore+0x1>
     76c:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <xQueueGenericSend>
     770:	02 c0       	rjmp	.+4      	; 0x776 <configuration_setVentilation+0x42>
	}
	else _ventilation = value;
     772:	80 93 be 07 	sts	0x07BE, r24	; 0x8007be <_ventilation>
}
     776:	cf 91       	pop	r28
     778:	0f 91       	pop	r16
     77a:	08 95       	ret

0000077c <configuration_getVentilation>:

void configuration_getVentilation(bool* ventilation) {
     77c:	0f 93       	push	r16
     77e:	cf 93       	push	r28
     780:	df 93       	push	r29
	if (_semaphore != NULL) {
     782:	20 91 bc 07 	lds	r18, 0x07BC	; 0x8007bc <_semaphore>
     786:	30 91 bd 07 	lds	r19, 0x07BD	; 0x8007bd <_semaphore+0x1>
     78a:	21 15       	cp	r18, r1
     78c:	31 05       	cpc	r19, r1
     78e:	b9 f0       	breq	.+46     	; 0x7be <configuration_getVentilation+0x42>
     790:	ec 01       	movw	r28, r24
		xSemaphoreTake(_semaphore, portMAX_DELAY);
     792:	4f ef       	ldi	r20, 0xFF	; 255
     794:	5f ef       	ldi	r21, 0xFF	; 255
     796:	ba 01       	movw	r22, r20
     798:	c9 01       	movw	r24, r18
     79a:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <xQueueSemaphoreTake>
		*ventilation = _ventilation;
     79e:	80 91 be 07 	lds	r24, 0x07BE	; 0x8007be <_ventilation>
     7a2:	88 83       	st	Y, r24
		xSemaphoreGive(_semaphore);
     7a4:	00 e0       	ldi	r16, 0x00	; 0
     7a6:	20 e0       	ldi	r18, 0x00	; 0
     7a8:	30 e0       	ldi	r19, 0x00	; 0
     7aa:	a9 01       	movw	r20, r18
     7ac:	60 e0       	ldi	r22, 0x00	; 0
     7ae:	70 e0       	ldi	r23, 0x00	; 0
     7b0:	80 91 bc 07 	lds	r24, 0x07BC	; 0x8007bc <_semaphore>
     7b4:	90 91 bd 07 	lds	r25, 0x07BD	; 0x8007bd <_semaphore+0x1>
     7b8:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <xQueueGenericSend>
     7bc:	04 c0       	rjmp	.+8      	; 0x7c6 <configuration_getVentilation+0x4a>
	}
	else *ventilation = _ventilation;
     7be:	20 91 be 07 	lds	r18, 0x07BE	; 0x8007be <_ventilation>
     7c2:	fc 01       	movw	r30, r24
     7c4:	20 83       	st	Z, r18
     7c6:	df 91       	pop	r29
     7c8:	cf 91       	pop	r28
     7ca:	0f 91       	pop	r16
     7cc:	08 95       	ret

000007ce <currentCondition_create>:
}

uint16_t currentCondition_getSound(currentCondition_t self)
{
	return self->soundData;
}
     7ce:	68 e0       	ldi	r22, 0x08	; 8
     7d0:	70 e0       	ldi	r23, 0x00	; 0
     7d2:	81 e0       	ldi	r24, 0x01	; 1
     7d4:	90 e0       	ldi	r25, 0x00	; 0
     7d6:	0e 94 74 2f 	call	0x5ee8	; 0x5ee8 <calloc>
     7da:	00 97       	sbiw	r24, 0x00	; 0
     7dc:	49 f0       	breq	.+18     	; 0x7f0 <currentCondition_create+0x22>
     7de:	fc 01       	movw	r30, r24
     7e0:	13 82       	std	Z+3, r1	; 0x03
     7e2:	12 82       	std	Z+2, r1	; 0x02
     7e4:	15 82       	std	Z+5, r1	; 0x05
     7e6:	14 82       	std	Z+4, r1	; 0x04
     7e8:	11 82       	std	Z+1, r1	; 0x01
     7ea:	10 82       	st	Z, r1
     7ec:	17 82       	std	Z+7, r1	; 0x07
     7ee:	16 82       	std	Z+6, r1	; 0x06
     7f0:	08 95       	ret

000007f2 <currentCondition_setCO2>:
     7f2:	00 97       	sbiw	r24, 0x00	; 0
     7f4:	49 f0       	breq	.+18     	; 0x808 <currentCondition_setCO2+0x16>
     7f6:	9b 01       	movw	r18, r22
     7f8:	28 5c       	subi	r18, 0xC8	; 200
     7fa:	31 09       	sbc	r19, r1
     7fc:	29 34       	cpi	r18, 0x49	; 73
     7fe:	36 42       	sbci	r19, 0x26	; 38
     800:	18 f4       	brcc	.+6      	; 0x808 <currentCondition_setCO2+0x16>
     802:	fc 01       	movw	r30, r24
     804:	71 83       	std	Z+1, r23	; 0x01
     806:	60 83       	st	Z, r22
     808:	08 95       	ret

0000080a <currentCondition_setHumidity>:
     80a:	00 97       	sbiw	r24, 0x00	; 0
     80c:	39 f0       	breq	.+14     	; 0x81c <currentCondition_setHumidity+0x12>
     80e:	69 3e       	cpi	r22, 0xE9	; 233
     810:	23 e0       	ldi	r18, 0x03	; 3
     812:	72 07       	cpc	r23, r18
     814:	18 f4       	brcc	.+6      	; 0x81c <currentCondition_setHumidity+0x12>
     816:	fc 01       	movw	r30, r24
     818:	75 83       	std	Z+5, r23	; 0x05
     81a:	64 83       	std	Z+4, r22	; 0x04
     81c:	08 95       	ret

0000081e <currentCondition_setTemperature>:
     81e:	00 97       	sbiw	r24, 0x00	; 0
     820:	49 f0       	breq	.+18     	; 0x834 <currentCondition_setTemperature+0x16>
     822:	9b 01       	movw	r18, r22
     824:	20 57       	subi	r18, 0x70	; 112
     826:	3e 4f       	sbci	r19, 0xFE	; 254
     828:	27 3b       	cpi	r18, 0xB7	; 183
     82a:	33 40       	sbci	r19, 0x03	; 3
     82c:	18 f4       	brcc	.+6      	; 0x834 <currentCondition_setTemperature+0x16>
     82e:	fc 01       	movw	r30, r24
     830:	73 83       	std	Z+3, r23	; 0x03
     832:	62 83       	std	Z+2, r22	; 0x02
     834:	08 95       	ret

00000836 <currentCondition_setSound>:
     836:	00 97       	sbiw	r24, 0x00	; 0
     838:	31 f0       	breq	.+12     	; 0x846 <currentCondition_setSound+0x10>
     83a:	67 39       	cpi	r22, 0x97	; 151
     83c:	71 05       	cpc	r23, r1
     83e:	18 f4       	brcc	.+6      	; 0x846 <currentCondition_setSound+0x10>
     840:	fc 01       	movw	r30, r24
     842:	77 83       	std	Z+7, r23	; 0x07
     844:	66 83       	std	Z+6, r22	; 0x06
     846:	08 95       	ret

00000848 <getcurrentConditionPayload>:

lora_payload_t getcurrentConditionPayload(currentCondition_t self)
{
     848:	fc 01       	movw	r30, r24
     84a:	db 01       	movw	r26, r22
	lora_payload_t payload;
	payload.port_no = 1;
	payload.len = 8;
	
	int16_t tempData = self->temperatureData;
     84c:	12 96       	adiw	r26, 0x02	; 2
     84e:	6c 91       	ld	r22, X
     850:	12 97       	sbiw	r26, 0x02	; 2
     852:	13 96       	adiw	r26, 0x03	; 3
     854:	7c 91       	ld	r23, X
     856:	13 97       	sbiw	r26, 0x03	; 3
	
	payload.bytes[0] = tempData >> 8;
	payload.bytes[1] = tempData & 0xFF;

	payload.bytes[2] = self->humidityData >> 8;
     858:	14 96       	adiw	r26, 0x04	; 4
     85a:	4c 91       	ld	r20, X
     85c:	14 97       	sbiw	r26, 0x04	; 4
     85e:	15 96       	adiw	r26, 0x05	; 5
     860:	5c 91       	ld	r21, X
     862:	15 97       	sbiw	r26, 0x05	; 5
	payload.bytes[3] = self->humidityData & 0xFF;
	
	payload.bytes[4] = self->co2Data >> 8;
     864:	2c 91       	ld	r18, X
     866:	11 96       	adiw	r26, 0x01	; 1
     868:	3c 91       	ld	r19, X
     86a:	11 97       	sbiw	r26, 0x01	; 1
	payload.bytes[5] = self->co2Data & 0xFF;
	
	payload.bytes[6] = self->soundData >> 8;
     86c:	16 96       	adiw	r26, 0x06	; 6
     86e:	8c 91       	ld	r24, X
     870:	16 97       	sbiw	r26, 0x06	; 6
     872:	17 96       	adiw	r26, 0x07	; 7
     874:	9c 91       	ld	r25, X
	payload.bytes[7] = self->soundData & 0xFF;
	
	return payload;
     876:	a1 e0       	ldi	r26, 0x01	; 1
     878:	a0 83       	st	Z, r26
     87a:	a8 e0       	ldi	r26, 0x08	; 8
     87c:	a1 83       	std	Z+1, r26	; 0x01
     87e:	72 83       	std	Z+2, r23	; 0x02
     880:	63 83       	std	Z+3, r22	; 0x03
     882:	54 83       	std	Z+4, r21	; 0x04
     884:	45 83       	std	Z+5, r20	; 0x05
     886:	36 83       	std	Z+6, r19	; 0x06
     888:	27 83       	std	Z+7, r18	; 0x07
     88a:	90 87       	std	Z+8, r25	; 0x08
     88c:	81 87       	std	Z+9, r24	; 0x09
	
}
     88e:	cf 01       	movw	r24, r30
     890:	08 95       	ret

00000892 <getSimplePayload>:
	
	uint16_t one = 0;
	payload.bytes[0] = one >> 8;
	payload.bytes[1] = one & 0xFF;
	
	return payload;
     892:	21 e0       	ldi	r18, 0x01	; 1
     894:	fc 01       	movw	r30, r24
     896:	20 83       	st	Z, r18
     898:	22 e0       	ldi	r18, 0x02	; 2
     89a:	21 83       	std	Z+1, r18	; 0x01
     89c:	12 82       	std	Z+2, r1	; 0x02
     89e:	13 82       	std	Z+3, r1	; 0x03
     8a0:	08 95       	ret

000008a2 <device_create>:
		device_startMeasuring((device_t)self);
	}
}

device_t device_create(UBaseType_t priority, UBaseType_t stack, EventGroupHandle_t startMeasureEventGroup, EventBits_t startMeasureBit,
EventGroupHandle_t readyEventGroup, EventBits_t readyBit, co2reader_t co2Reader, humAndTempReader_t humAndTempReader,soundReader_t soundReader, MessageBufferHandle_t uplinkMessageBuffer){
     8a2:	2f 92       	push	r2
     8a4:	3f 92       	push	r3
     8a6:	4f 92       	push	r4
     8a8:	5f 92       	push	r5
     8aa:	6f 92       	push	r6
     8ac:	7f 92       	push	r7
     8ae:	8f 92       	push	r8
     8b0:	9f 92       	push	r9
     8b2:	af 92       	push	r10
     8b4:	bf 92       	push	r11
     8b6:	cf 92       	push	r12
     8b8:	df 92       	push	r13
     8ba:	ef 92       	push	r14
     8bc:	ff 92       	push	r15
     8be:	0f 93       	push	r16
     8c0:	1f 93       	push	r17
     8c2:	cf 93       	push	r28
     8c4:	df 93       	push	r29
     8c6:	00 d0       	rcall	.+0      	; 0x8c8 <device_create+0x26>
     8c8:	1f 92       	push	r1
     8ca:	cd b7       	in	r28, 0x3d	; 61
     8cc:	de b7       	in	r29, 0x3e	; 62
     8ce:	28 2e       	mov	r2, r24
     8d0:	36 2e       	mov	r3, r22
     8d2:	5c 83       	std	Y+4, r21	; 0x04
     8d4:	4b 83       	std	Y+3, r20	; 0x03
     8d6:	28 01       	movw	r4, r16
     8d8:	39 01       	movw	r6, r18

	device_t _new_device = calloc(1, sizeof(device));
     8da:	6a e0       	ldi	r22, 0x0A	; 10
     8dc:	70 e0       	ldi	r23, 0x00	; 0
     8de:	81 e0       	ldi	r24, 0x01	; 1
     8e0:	90 e0       	ldi	r25, 0x00	; 0
     8e2:	0e 94 74 2f 	call	0x5ee8	; 0x5ee8 <calloc>
     8e6:	9a 83       	std	Y+2, r25	; 0x02
     8e8:	89 83       	std	Y+1, r24	; 0x01
	if (_new_device == NULL)
     8ea:	00 97       	sbiw	r24, 0x00	; 0
     8ec:	09 f4       	brne	.+2      	; 0x8f0 <device_create+0x4e>
     8ee:	40 c0       	rjmp	.+128    	; 0x970 <device_create+0xce>
		return NULL;

	_new_device->co2reader = co2Reader;
     8f0:	fc 01       	movw	r30, r24
     8f2:	91 82       	std	Z+1, r9	; 0x01
     8f4:	80 82       	st	Z, r8
	_new_device->humAndTempReader = humAndTempReader;
     8f6:	8a 8d       	ldd	r24, Y+26	; 0x1a
     8f8:	9b 8d       	ldd	r25, Y+27	; 0x1b
     8fa:	93 83       	std	Z+3, r25	; 0x03
     8fc:	82 83       	std	Z+2, r24	; 0x02
	_new_device->soundReader=soundReader;
     8fe:	8c 8d       	ldd	r24, Y+28	; 0x1c
     900:	9d 8d       	ldd	r25, Y+29	; 0x1d
     902:	95 83       	std	Z+5, r25	; 0x05
     904:	84 83       	std	Z+4, r24	; 0x04
	currentCondition_t currentCond = currentCondition_create();
     906:	63 df       	rcall	.-314    	; 0x7ce <currentCondition_create>
	_new_device->currentCondition = currentCond;
     908:	e9 81       	ldd	r30, Y+1	; 0x01
     90a:	fa 81       	ldd	r31, Y+2	; 0x02
     90c:	97 83       	std	Z+7, r25	; 0x07
     90e:	86 83       	std	Z+6, r24	; 0x06

	_startMeasureEventGroup = startMeasureEventGroup;
     910:	8b 81       	ldd	r24, Y+3	; 0x03
     912:	9c 81       	ldd	r25, Y+4	; 0x04
     914:	90 93 e3 07 	sts	0x07E3, r25	; 0x8007e3 <_startMeasureEventGroup+0x1>
     918:	80 93 e2 07 	sts	0x07E2, r24	; 0x8007e2 <_startMeasureEventGroup>
	_startMeasureBit = startMeasureBit;
     91c:	40 92 de 07 	sts	0x07DE, r4	; 0x8007de <_startMeasureBit>
     920:	50 92 df 07 	sts	0x07DF, r5	; 0x8007df <_startMeasureBit+0x1>
     924:	60 92 e0 07 	sts	0x07E0, r6	; 0x8007e0 <_startMeasureBit+0x2>
     928:	70 92 e1 07 	sts	0x07E1, r7	; 0x8007e1 <_startMeasureBit+0x3>

	_readyEventGroup = readyEventGroup;
     92c:	f0 92 dd 07 	sts	0x07DD, r15	; 0x8007dd <_readyEventGroup+0x1>
     930:	e0 92 dc 07 	sts	0x07DC, r14	; 0x8007dc <_readyEventGroup>
	_readyBit = readyBit;
     934:	a0 92 d8 07 	sts	0x07D8, r10	; 0x8007d8 <_readyBit>
     938:	b0 92 d9 07 	sts	0x07D9, r11	; 0x8007d9 <_readyBit+0x1>
     93c:	c0 92 da 07 	sts	0x07DA, r12	; 0x8007da <_readyBit+0x2>
     940:	d0 92 db 07 	sts	0x07DB, r13	; 0x8007db <_readyBit+0x3>
	
	_uplinkmessageBuffer=uplinkMessageBuffer;
     944:	8e 8d       	ldd	r24, Y+30	; 0x1e
     946:	9f 8d       	ldd	r25, Y+31	; 0x1f
     948:	90 93 d7 07 	sts	0x07D7, r25	; 0x8007d7 <_uplinkmessageBuffer+0x1>
     94c:	80 93 d6 07 	sts	0x07D6, r24	; 0x8007d6 <_uplinkmessageBuffer>

	xTaskCreate(
     950:	43 2d       	mov	r20, r3
     952:	50 e0       	ldi	r21, 0x00	; 0
     954:	48 53       	subi	r20, 0x38	; 56
     956:	5f 4f       	sbci	r21, 0xFF	; 255
     958:	7f 01       	movw	r14, r30
     95a:	98 e0       	ldi	r25, 0x08	; 8
     95c:	e9 0e       	add	r14, r25
     95e:	f1 1c       	adc	r15, r1
     960:	02 2d       	mov	r16, r2
     962:	9f 01       	movw	r18, r30
     964:	6c e7       	ldi	r22, 0x7C	; 124
     966:	72 e0       	ldi	r23, 0x02	; 2
     968:	8d ed       	ldi	r24, 0xDD	; 221
     96a:	95 e0       	ldi	r25, 0x05	; 5
     96c:	0e 94 4d 15 	call	0x2a9a	; 0x2a9a <xTaskCreate>
		priority,
		&_new_device->handleTask
	);

	return _new_device;
}
     970:	89 81       	ldd	r24, Y+1	; 0x01
     972:	9a 81       	ldd	r25, Y+2	; 0x02
     974:	0f 90       	pop	r0
     976:	0f 90       	pop	r0
     978:	0f 90       	pop	r0
     97a:	0f 90       	pop	r0
     97c:	df 91       	pop	r29
     97e:	cf 91       	pop	r28
     980:	1f 91       	pop	r17
     982:	0f 91       	pop	r16
     984:	ff 90       	pop	r15
     986:	ef 90       	pop	r14
     988:	df 90       	pop	r13
     98a:	cf 90       	pop	r12
     98c:	bf 90       	pop	r11
     98e:	af 90       	pop	r10
     990:	9f 90       	pop	r9
     992:	8f 90       	pop	r8
     994:	7f 90       	pop	r7
     996:	6f 90       	pop	r6
     998:	5f 90       	pop	r5
     99a:	4f 90       	pop	r4
     99c:	3f 90       	pop	r3
     99e:	2f 90       	pop	r2
     9a0:	08 95       	ret

000009a2 <device_startMeasuring>:

void device_startMeasuring(device_t self) {
     9a2:	af 92       	push	r10
     9a4:	bf 92       	push	r11
     9a6:	cf 92       	push	r12
     9a8:	df 92       	push	r13
     9aa:	ef 92       	push	r14
     9ac:	ff 92       	push	r15
     9ae:	0f 93       	push	r16
     9b0:	1f 93       	push	r17
     9b2:	cf 93       	push	r28
     9b4:	df 93       	push	r29
     9b6:	cd b7       	in	r28, 0x3d	; 61
     9b8:	de b7       	in	r29, 0x3e	; 62
     9ba:	66 97       	sbiw	r28, 0x16	; 22
     9bc:	0f b6       	in	r0, 0x3f	; 63
     9be:	f8 94       	cli
     9c0:	de bf       	out	0x3e, r29	; 62
     9c2:	0f be       	out	0x3f, r0	; 63
     9c4:	cd bf       	out	0x3d, r28	; 61
     9c6:	5c 01       	movw	r10, r24
	//we should first check if device is on, get that from lora and add new eventBit 
	
	bool* works = pvPortMalloc(sizeof(bool));
     9c8:	81 e0       	ldi	r24, 0x01	; 1
     9ca:	90 e0       	ldi	r25, 0x00	; 0
     9cc:	32 d6       	rcall	.+3172   	; 0x1632 <pvPortMalloc>
     9ce:	8c 01       	movw	r16, r24
	configuration_getWorking(works);
     9d0:	88 de       	rcall	.-752    	; 0x6e2 <configuration_getWorking>
     9d2:	f8 01       	movw	r30, r16
	if (*works == true)
     9d4:	80 81       	ld	r24, Z
     9d6:	88 23       	and	r24, r24
     9d8:	09 f4       	brne	.+2      	; 0x9dc <device_startMeasuring+0x3a>
     9da:	bc c0       	rjmp	.+376    	; 0xb54 <device_startMeasuring+0x1b2>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
	{

		bool* ventilate = pvPortMalloc(sizeof(bool));
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	28 d6       	rcall	.+3152   	; 0x1632 <pvPortMalloc>
     9e2:	8c 01       	movw	r16, r24
		configuration_getVentilation(ventilate);
     9e4:	cb de       	rcall	.-618    	; 0x77c <configuration_getVentilation>
     9e6:	f8 01       	movw	r30, r16
		if(*ventilate == true)
     9e8:	80 81       	ld	r24, Z
     9ea:	88 23       	and	r24, r24
		{
			servo_open();
     9ec:	11 f0       	breq	.+4      	; 0x9f2 <device_startMeasuring+0x50>
     9ee:	6b d2       	rcall	.+1238   	; 0xec6 <servo_open>
     9f0:	01 c0       	rjmp	.+2      	; 0x9f4 <device_startMeasuring+0x52>
		} 
		else
		{
			servo_close();
     9f2:	6e d2       	rcall	.+1244   	; 0xed0 <servo_close>
     9f4:	40 91 de 07 	lds	r20, 0x07DE	; 0x8007de <_startMeasureBit>
		}

	////tell sensors to start meassuring 
	xEventGroupSetBits(_startMeasureEventGroup, _startMeasureBit);
     9f8:	50 91 df 07 	lds	r21, 0x07DF	; 0x8007df <_startMeasureBit+0x1>
     9fc:	60 91 e0 07 	lds	r22, 0x07E0	; 0x8007e0 <_startMeasureBit+0x2>
     a00:	70 91 e1 07 	lds	r23, 0x07E1	; 0x8007e1 <_startMeasureBit+0x3>
     a04:	80 91 e2 07 	lds	r24, 0x07E2	; 0x8007e2 <_startMeasureEventGroup>
     a08:	90 91 e3 07 	lds	r25, 0x07E3	; 0x8007e3 <_startMeasureEventGroup+0x1>
     a0c:	2c d5       	rcall	.+2648   	; 0x1466 <xEventGroupSetBits>
     a0e:	40 91 d8 07 	lds	r20, 0x07D8	; 0x8007d8 <_readyBit>

	//wait for sensors to read data
	EventBits_t uxBits = xEventGroupWaitBits(_readyEventGroup, 
     a12:	50 91 d9 07 	lds	r21, 0x07D9	; 0x8007d9 <_readyBit+0x1>
     a16:	60 91 da 07 	lds	r22, 0x07DA	; 0x8007da <_readyBit+0x2>
     a1a:	70 91 db 07 	lds	r23, 0x07DB	; 0x8007db <_readyBit+0x3>
     a1e:	cc 24       	eor	r12, r12
     a20:	ca 94       	dec	r12
     a22:	dc 2c       	mov	r13, r12
     a24:	76 01       	movw	r14, r12
     a26:	01 e0       	ldi	r16, 0x01	; 1
     a28:	21 e0       	ldi	r18, 0x01	; 1
     a2a:	80 91 dc 07 	lds	r24, 0x07DC	; 0x8007dc <_readyEventGroup>
     a2e:	90 91 dd 07 	lds	r25, 0x07DD	; 0x8007dd <_readyEventGroup+0x1>
     a32:	59 d4       	rcall	.+2226   	; 0x12e6 <xEventGroupWaitBits>
     a34:	00 91 d8 07 	lds	r16, 0x07D8	; 0x8007d8 <_readyBit>
		_readyBit, 
		pdTRUE, 
		pdTRUE,
		portMAX_DELAY);
	
	if ((uxBits & (_readyBit)) == (_readyBit)) {
     a38:	10 91 d9 07 	lds	r17, 0x07D9	; 0x8007d9 <_readyBit+0x1>
     a3c:	20 91 da 07 	lds	r18, 0x07DA	; 0x8007da <_readyBit+0x2>
     a40:	30 91 db 07 	lds	r19, 0x07DB	; 0x8007db <_readyBit+0x3>
     a44:	dc 01       	movw	r26, r24
     a46:	cb 01       	movw	r24, r22
     a48:	80 23       	and	r24, r16
     a4a:	91 23       	and	r25, r17
     a4c:	a2 23       	and	r26, r18
     a4e:	b3 23       	and	r27, r19
     a50:	08 17       	cp	r16, r24
     a52:	19 07       	cpc	r17, r25
     a54:	2a 07       	cpc	r18, r26
     a56:	3b 07       	cpc	r19, r27
     a58:	09 f0       	breq	.+2      	; 0xa5c <device_startMeasuring+0xba>
     a5a:	9e c0       	rjmp	.+316    	; 0xb98 <device_startMeasuring+0x1f6>
		currentCondition_setCO2(self->currentCondition,co2Reader_getCO2(self->co2reader));
     a5c:	f5 01       	movw	r30, r10
     a5e:	80 81       	ld	r24, Z
     a60:	91 81       	ldd	r25, Z+1	; 0x01
     a62:	0d de       	rcall	.-998    	; 0x67e <co2Reader_getCO2>
     a64:	bc 01       	movw	r22, r24
     a66:	f5 01       	movw	r30, r10
     a68:	86 81       	ldd	r24, Z+6	; 0x06
     a6a:	97 81       	ldd	r25, Z+7	; 0x07
     a6c:	c2 de       	rcall	.-636    	; 0x7f2 <currentCondition_setCO2>
		
		currentCondition_setSound(self->currentCondition,soundReader_getSound(self->soundReader));
     a6e:	f5 01       	movw	r30, r10
     a70:	84 81       	ldd	r24, Z+4	; 0x04
     a72:	95 81       	ldd	r25, Z+5	; 0x05
     a74:	e6 d2       	rcall	.+1484   	; 0x1042 <soundReader_getSound>
     a76:	bc 01       	movw	r22, r24
     a78:	f5 01       	movw	r30, r10
     a7a:	86 81       	ldd	r24, Z+6	; 0x06
     a7c:	97 81       	ldd	r25, Z+7	; 0x07
     a7e:	db de       	rcall	.-586    	; 0x836 <currentCondition_setSound>
		
		currentCondition_setTemperature(self->currentCondition,humAndTempReader_getTemperature(self->humAndTempReader));
     a80:	f5 01       	movw	r30, r10
     a82:	82 81       	ldd	r24, Z+2	; 0x02
     a84:	93 81       	ldd	r25, Z+3	; 0x03
     a86:	18 d2       	rcall	.+1072   	; 0xeb8 <humAndTempReader_getTemperature>
     a88:	bc 01       	movw	r22, r24
     a8a:	f5 01       	movw	r30, r10
     a8c:	86 81       	ldd	r24, Z+6	; 0x06
     a8e:	97 81       	ldd	r25, Z+7	; 0x07
     a90:	c6 de       	rcall	.-628    	; 0x81e <currentCondition_setTemperature>
		
		int16_t humidity = humAndTempReader_getHumidity(self->humAndTempReader);
     a92:	f5 01       	movw	r30, r10
     a94:	82 81       	ldd	r24, Z+2	; 0x02
     a96:	93 81       	ldd	r25, Z+3	; 0x03
     a98:	0b d2       	rcall	.+1046   	; 0xeb0 <humAndTempReader_getHumidity>
     a9a:	bc 01       	movw	r22, r24
		currentCondition_setHumidity(self->currentCondition, humidity);
     a9c:	f5 01       	movw	r30, r10
     a9e:	86 81       	ldd	r24, Z+6	; 0x06
     aa0:	97 81       	ldd	r25, Z+7	; 0x07
     aa2:	b3 de       	rcall	.-666    	; 0x80a <currentCondition_setHumidity>
     aa4:	f5 01       	movw	r30, r10
		
		
		printf("CO2 is: %u\n", co2Reader_getCO2(self->co2reader));
     aa6:	80 81       	ld	r24, Z
     aa8:	91 81       	ldd	r25, Z+1	; 0x01
     aaa:	e9 dd       	rcall	.-1070   	; 0x67e <co2Reader_getCO2>
     aac:	9f 93       	push	r25
     aae:	8f 93       	push	r24
     ab0:	83 e8       	ldi	r24, 0x83	; 131
     ab2:	92 e0       	ldi	r25, 0x02	; 2
     ab4:	9f 93       	push	r25
     ab6:	8f 93       	push	r24
     ab8:	0e 94 67 31 	call	0x62ce	; 0x62ce <printf>
     abc:	f5 01       	movw	r30, r10
		printf("Temperature is: %d\n", humAndTempReader_getTemperature(self->humAndTempReader));
     abe:	82 81       	ldd	r24, Z+2	; 0x02
     ac0:	93 81       	ldd	r25, Z+3	; 0x03
     ac2:	fa d1       	rcall	.+1012   	; 0xeb8 <humAndTempReader_getTemperature>
     ac4:	9f 93       	push	r25
     ac6:	8f 93       	push	r24
     ac8:	8f e8       	ldi	r24, 0x8F	; 143
     aca:	92 e0       	ldi	r25, 0x02	; 2
     acc:	9f 93       	push	r25
     ace:	8f 93       	push	r24
     ad0:	0e 94 67 31 	call	0x62ce	; 0x62ce <printf>
     ad4:	f5 01       	movw	r30, r10
		printf("Humidity is: %u\n", humAndTempReader_getHumidity(self->humAndTempReader));
     ad6:	82 81       	ldd	r24, Z+2	; 0x02
     ad8:	93 81       	ldd	r25, Z+3	; 0x03
     ada:	ea d1       	rcall	.+980    	; 0xeb0 <humAndTempReader_getHumidity>
     adc:	9f 93       	push	r25
     ade:	8f 93       	push	r24
     ae0:	83 ea       	ldi	r24, 0xA3	; 163
     ae2:	92 e0       	ldi	r25, 0x02	; 2
     ae4:	9f 93       	push	r25
     ae6:	8f 93       	push	r24
     ae8:	0e 94 67 31 	call	0x62ce	; 0x62ce <printf>
     aec:	f5 01       	movw	r30, r10
		printf("Sound is: %u\n", soundReader_getSound(self->soundReader));
     aee:	84 81       	ldd	r24, Z+4	; 0x04
     af0:	95 81       	ldd	r25, Z+5	; 0x05
     af2:	a7 d2       	rcall	.+1358   	; 0x1042 <soundReader_getSound>
     af4:	9f 93       	push	r25
     af6:	8f 93       	push	r24
     af8:	84 eb       	ldi	r24, 0xB4	; 180
     afa:	92 e0       	ldi	r25, 0x02	; 2
     afc:	9f 93       	push	r25
     afe:	8f 93       	push	r24
     b00:	0e 94 67 31 	call	0x62ce	; 0x62ce <printf>
     b04:	f5 01       	movw	r30, r10
     b06:	66 81       	ldd	r22, Z+6	; 0x06
		
		/*Perhaps loraPayload is not a good idea to be here*/
		_uplink_payload = getcurrentConditionPayload(self->currentCondition);
     b08:	77 81       	ldd	r23, Z+7	; 0x07
     b0a:	ce 01       	movw	r24, r28
     b0c:	01 96       	adiw	r24, 0x01	; 1
     b0e:	9c de       	rcall	.-712    	; 0x848 <getcurrentConditionPayload>
     b10:	86 e1       	ldi	r24, 0x16	; 22
     b12:	fe 01       	movw	r30, r28
     b14:	31 96       	adiw	r30, 0x01	; 1
     b16:	a0 ec       	ldi	r26, 0xC0	; 192
     b18:	b7 e0       	ldi	r27, 0x07	; 7
     b1a:	01 90       	ld	r0, Z+
     b1c:	0d 92       	st	X+, r0
     b1e:	8a 95       	dec	r24
     b20:	e1 f7       	brne	.-8      	; 0xb1a <device_startMeasuring+0x178>
     b22:	0f ef       	ldi	r16, 0xFF	; 255
     b24:	1f ef       	ldi	r17, 0xFF	; 255
     b26:	98 01       	movw	r18, r16
		
		xMessageBufferSend(_uplinkmessageBuffer,(void*) &_uplink_payload,sizeof(_uplink_payload),portMAX_DELAY);
     b28:	46 e1       	ldi	r20, 0x16	; 22
     b2a:	50 e0       	ldi	r21, 0x00	; 0
     b2c:	60 ec       	ldi	r22, 0xC0	; 192
     b2e:	77 e0       	ldi	r23, 0x07	; 7
     b30:	80 91 d6 07 	lds	r24, 0x07D6	; 0x8007d6 <_uplinkmessageBuffer>
     b34:	90 91 d7 07 	lds	r25, 0x07D7	; 0x8007d7 <_uplinkmessageBuffer+0x1>
     b38:	0e 94 1d 13 	call	0x263a	; 0x263a <xStreamBufferSend>
     b3c:	60 e3       	ldi	r22, 0x30	; 48
     b3e:	75 e7       	ldi	r23, 0x75	; 117
		vTaskDelay(30000);
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	90 e0       	ldi	r25, 0x00	; 0
     b44:	0e 94 0f 18 	call	0x301e	; 0x301e <vTaskDelay>
     b48:	0f b6       	in	r0, 0x3f	; 63
     b4a:	f8 94       	cli
     b4c:	de bf       	out	0x3e, r29	; 62
     b4e:	0f be       	out	0x3f, r0	; 63
     b50:	cd bf       	out	0x3d, r28	; 61
     b52:	22 c0       	rjmp	.+68     	; 0xb98 <device_startMeasuring+0x1f6>
     b54:	f5 01       	movw	r30, r10
     b56:	66 81       	ldd	r22, Z+6	; 0x06
	}
	//if the device is not on, wait a bit and check if anything is changed
	}
	else
	{
		_uplink_payload = getSimplePayload(self->currentCondition);
     b58:	77 81       	ldd	r23, Z+7	; 0x07
     b5a:	ce 01       	movw	r24, r28
     b5c:	01 96       	adiw	r24, 0x01	; 1
     b5e:	99 de       	rcall	.-718    	; 0x892 <getSimplePayload>
     b60:	86 e1       	ldi	r24, 0x16	; 22
     b62:	fe 01       	movw	r30, r28
     b64:	31 96       	adiw	r30, 0x01	; 1
     b66:	a0 ec       	ldi	r26, 0xC0	; 192
     b68:	b7 e0       	ldi	r27, 0x07	; 7
     b6a:	01 90       	ld	r0, Z+
     b6c:	0d 92       	st	X+, r0
     b6e:	8a 95       	dec	r24
     b70:	e1 f7       	brne	.-8      	; 0xb6a <device_startMeasuring+0x1c8>
     b72:	0f ef       	ldi	r16, 0xFF	; 255
     b74:	1f ef       	ldi	r17, 0xFF	; 255
     b76:	98 01       	movw	r18, r16
		xMessageBufferSend(_uplinkmessageBuffer,(void*) &_uplink_payload,sizeof(_uplink_payload),portMAX_DELAY);
     b78:	46 e1       	ldi	r20, 0x16	; 22
     b7a:	50 e0       	ldi	r21, 0x00	; 0
     b7c:	60 ec       	ldi	r22, 0xC0	; 192
     b7e:	77 e0       	ldi	r23, 0x07	; 7
     b80:	80 91 d6 07 	lds	r24, 0x07D6	; 0x8007d6 <_uplinkmessageBuffer>
     b84:	90 91 d7 07 	lds	r25, 0x07D7	; 0x8007d7 <_uplinkmessageBuffer+0x1>
     b88:	0e 94 1d 13 	call	0x263a	; 0x263a <xStreamBufferSend>
     b8c:	60 e3       	ldi	r22, 0x30	; 48
     b8e:	75 e7       	ldi	r23, 0x75	; 117
     b90:	80 e0       	ldi	r24, 0x00	; 0
		vTaskDelay(30000);
     b92:	90 e0       	ldi	r25, 0x00	; 0
     b94:	0e 94 0f 18 	call	0x301e	; 0x301e <vTaskDelay>
     b98:	66 96       	adiw	r28, 0x16	; 22
     b9a:	0f b6       	in	r0, 0x3f	; 63
     b9c:	f8 94       	cli
	} 
}
     b9e:	de bf       	out	0x3e, r29	; 62
     ba0:	0f be       	out	0x3f, r0	; 63
     ba2:	cd bf       	out	0x3d, r28	; 61
     ba4:	df 91       	pop	r29
     ba6:	cf 91       	pop	r28
     ba8:	1f 91       	pop	r17
     baa:	0f 91       	pop	r16
     bac:	ff 90       	pop	r15
     bae:	ef 90       	pop	r14
     bb0:	df 90       	pop	r13
     bb2:	cf 90       	pop	r12
     bb4:	bf 90       	pop	r11
     bb6:	af 90       	pop	r10
     bb8:	08 95       	ret

00000bba <device_executeTask>:
     bba:	ec 01       	movw	r28, r24
     bbc:	ce 01       	movw	r24, r28
     bbe:	f1 de       	rcall	.-542    	; 0x9a2 <device_startMeasuring>

//devided so we can test
void device_executeTask(void* self) {
	for (;;)
	{
		device_startMeasuring((device_t)self);
     bc0:	fd cf       	rjmp	.-6      	; 0xbbc <device_executeTask+0x2>

00000bc2 <lora_DownLinkHandler_create>:
		
	}
}

void lora_DownLinkHandler_create(UBaseType_t lora_handler_task_priority, MessageBufferHandle_t xMessageBuffer)
{
     bc2:	ef 92       	push	r14
     bc4:	ff 92       	push	r15
     bc6:	0f 93       	push	r16
     bc8:	9b 01       	movw	r18, r22
	
	
	xTaskCreate(
     bca:	e1 2c       	mov	r14, r1
     bcc:	f1 2c       	mov	r15, r1
     bce:	08 2f       	mov	r16, r24
     bd0:	48 e8       	ldi	r20, 0x88	; 136
     bd2:	51 e0       	ldi	r21, 0x01	; 1
     bd4:	62 ec       	ldi	r22, 0xC2	; 194
     bd6:	72 e0       	ldi	r23, 0x02	; 2
     bd8:	87 e8       	ldi	r24, 0x87	; 135
     bda:	96 e0       	ldi	r25, 0x06	; 6
     bdc:	0e 94 4d 15 	call	0x2a9a	; 0x2a9a <xTaskCreate>
	,  configMINIMAL_STACK_SIZE+200  
	,  xMessageBuffer
	,  lora_handler_task_priority  
	,  NULL );
	
}
     be0:	0f 91       	pop	r16
     be2:	ff 90       	pop	r15
     be4:	ef 90       	pop	r14
     be6:	08 95       	ret

00000be8 <lora_DownLinkHandler_task>:


	void lora_DownLinkHandler_task(MessageBufferHandle_t xMessageBuffer)
	{
     be8:	0f 93       	push	r16
     bea:	1f 93       	push	r17
     bec:	cf 93       	push	r28
     bee:	df 93       	push	r29
				
		xMessageBufferReceive(xMessageBuffer,(void*) &_downlink_payload,sizeof(lora_payload_t),portMAX_DELAY);
     bf0:	0f ef       	ldi	r16, 0xFF	; 255
     bf2:	1f ef       	ldi	r17, 0xFF	; 255
     bf4:	98 01       	movw	r18, r16
     bf6:	46 e1       	ldi	r20, 0x16	; 22
     bf8:	50 e0       	ldi	r21, 0x00	; 0
     bfa:	64 ee       	ldi	r22, 0xE4	; 228
     bfc:	77 e0       	ldi	r23, 0x07	; 7
     bfe:	0e 94 0a 14 	call	0x2814	; 0x2814 <xStreamBufferReceive>
		printf("PayLoad bytes are: %d, %d\n Payload lenght is %d\n", _downlink_payload.bytes[0] ,_downlink_payload.bytes[1],_downlink_payload.len);
     c02:	c4 ee       	ldi	r28, 0xE4	; 228
     c04:	d7 e0       	ldi	r29, 0x07	; 7
     c06:	89 81       	ldd	r24, Y+1	; 0x01
     c08:	1f 92       	push	r1
     c0a:	8f 93       	push	r24
     c0c:	8b 81       	ldd	r24, Y+3	; 0x03
     c0e:	1f 92       	push	r1
     c10:	8f 93       	push	r24
     c12:	8a 81       	ldd	r24, Y+2	; 0x02
     c14:	1f 92       	push	r1
     c16:	8f 93       	push	r24
     c18:	8b ec       	ldi	r24, 0xCB	; 203
     c1a:	92 e0       	ldi	r25, 0x02	; 2
     c1c:	9f 93       	push	r25
     c1e:	8f 93       	push	r24
     c20:	0e 94 67 31 	call	0x62ce	; 0x62ce <printf>
		

		if(_downlink_payload.len==2)
     c24:	8d b7       	in	r24, 0x3d	; 61
     c26:	9e b7       	in	r25, 0x3e	; 62
     c28:	08 96       	adiw	r24, 0x08	; 8
     c2a:	0f b6       	in	r0, 0x3f	; 63
     c2c:	f8 94       	cli
     c2e:	9e bf       	out	0x3e, r25	; 62
     c30:	0f be       	out	0x3f, r0	; 63
     c32:	8d bf       	out	0x3d, r24	; 61
     c34:	89 81       	ldd	r24, Y+1	; 0x01
     c36:	82 30       	cpi	r24, 0x02	; 2
     c38:	09 f0       	breq	.+2      	; 0xc3c <lora_DownLinkHandler_task+0x54>
     c3a:	64 c0       	rjmp	.+200    	; 0xd04 <lora_DownLinkHandler_task+0x11c>
		{
			uint8_t command = _downlink_payload.bytes[0] + _downlink_payload.bytes[1];
     c3c:	fe 01       	movw	r30, r28
     c3e:	ca 81       	ldd	r28, Y+2	; 0x02
     c40:	83 81       	ldd	r24, Z+3	; 0x03
     c42:	c8 0f       	add	r28, r24
			bool* value = pvPortMalloc(sizeof(bool));
     c44:	81 e0       	ldi	r24, 0x01	; 1
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	f4 d4       	rcall	.+2536   	; 0x1632 <pvPortMalloc>
     c4a:	8c 01       	movw	r16, r24
			
			switch(command)
     c4c:	c5 37       	cpi	r28, 0x75	; 117
     c4e:	e9 f0       	breq	.+58     	; 0xc8a <lora_DownLinkHandler_task+0xa2>
     c50:	18 f4       	brcc	.+6      	; 0xc58 <lora_DownLinkHandler_task+0x70>
     c52:	c4 37       	cpi	r28, 0x74	; 116
     c54:	39 f0       	breq	.+14     	; 0xc64 <lora_DownLinkHandler_task+0x7c>
     c56:	52 c0       	rjmp	.+164    	; 0xcfc <lora_DownLinkHandler_task+0x114>
     c58:	c6 38       	cpi	r28, 0x86	; 134
     c5a:	51 f1       	breq	.+84     	; 0xcb0 <lora_DownLinkHandler_task+0xc8>
     c5c:	c7 38       	cpi	r28, 0x87	; 135
     c5e:	09 f4       	brne	.+2      	; 0xc62 <lora_DownLinkHandler_task+0x7a>
     c60:	3a c0       	rjmp	.+116    	; 0xcd6 <lora_DownLinkHandler_task+0xee>
     c62:	4c c0       	rjmp	.+152    	; 0xcfc <lora_DownLinkHandler_task+0x114>
			{
			//D0
			case 0x74:
				configuration_setWorking(false);
     c64:	80 e0       	ldi	r24, 0x00	; 0
     c66:	19 dd       	rcall	.-1486   	; 0x69a <configuration_setWorking>
				configuration_getWorking(value);
     c68:	c8 01       	movw	r24, r16
     c6a:	3b dd       	rcall	.-1418   	; 0x6e2 <configuration_getWorking>
     c6c:	f8 01       	movw	r30, r16
				printf("The bool for device is set to %d\n",*value);
     c6e:	80 81       	ld	r24, Z
     c70:	1f 92       	push	r1
     c72:	8f 93       	push	r24
     c74:	8c ef       	ldi	r24, 0xFC	; 252
     c76:	92 e0       	ldi	r25, 0x02	; 2
     c78:	9f 93       	push	r25
     c7a:	8f 93       	push	r24
     c7c:	0e 94 67 31 	call	0x62ce	; 0x62ce <printf>
     c80:	0f 90       	pop	r0
				break;
     c82:	0f 90       	pop	r0
     c84:	0f 90       	pop	r0
     c86:	0f 90       	pop	r0
     c88:	3d c0       	rjmp	.+122    	; 0xd04 <lora_DownLinkHandler_task+0x11c>
			//D1
			case 0x75 :
				configuration_setWorking(true);
     c8a:	81 e0       	ldi	r24, 0x01	; 1
     c8c:	06 dd       	rcall	.-1524   	; 0x69a <configuration_setWorking>
				configuration_getWorking(value);
     c8e:	c8 01       	movw	r24, r16
     c90:	28 dd       	rcall	.-1456   	; 0x6e2 <configuration_getWorking>
     c92:	f8 01       	movw	r30, r16
				printf("The bool for device is set to %d\n",*value);
     c94:	80 81       	ld	r24, Z
     c96:	1f 92       	push	r1
     c98:	8f 93       	push	r24
     c9a:	8c ef       	ldi	r24, 0xFC	; 252
     c9c:	92 e0       	ldi	r25, 0x02	; 2
     c9e:	9f 93       	push	r25
     ca0:	8f 93       	push	r24
     ca2:	0e 94 67 31 	call	0x62ce	; 0x62ce <printf>
     ca6:	0f 90       	pop	r0
				break;
     ca8:	0f 90       	pop	r0
     caa:	0f 90       	pop	r0
     cac:	0f 90       	pop	r0
			//V0
			case 0x86:
				configuration_setVentilation(false);
     cae:	2a c0       	rjmp	.+84     	; 0xd04 <lora_DownLinkHandler_task+0x11c>
     cb0:	80 e0       	ldi	r24, 0x00	; 0
     cb2:	40 dd       	rcall	.-1408   	; 0x734 <configuration_setVentilation>
				configuration_getVentilation(value);
     cb4:	c8 01       	movw	r24, r16
     cb6:	62 dd       	rcall	.-1340   	; 0x77c <configuration_getVentilation>
     cb8:	f8 01       	movw	r30, r16
				printf("The bool for ventilation is set to %d\n",*value);
     cba:	80 81       	ld	r24, Z
     cbc:	1f 92       	push	r1
     cbe:	8f 93       	push	r24
     cc0:	8e e1       	ldi	r24, 0x1E	; 30
     cc2:	93 e0       	ldi	r25, 0x03	; 3
     cc4:	9f 93       	push	r25
     cc6:	8f 93       	push	r24
     cc8:	0e 94 67 31 	call	0x62ce	; 0x62ce <printf>
			break;
     ccc:	0f 90       	pop	r0
     cce:	0f 90       	pop	r0
     cd0:	0f 90       	pop	r0
     cd2:	0f 90       	pop	r0
			//V1
			case 0x87:
				configuration_setVentilation(true);
     cd4:	17 c0       	rjmp	.+46     	; 0xd04 <lora_DownLinkHandler_task+0x11c>
     cd6:	81 e0       	ldi	r24, 0x01	; 1
     cd8:	2d dd       	rcall	.-1446   	; 0x734 <configuration_setVentilation>
				configuration_getVentilation(value);
     cda:	c8 01       	movw	r24, r16
     cdc:	4f dd       	rcall	.-1378   	; 0x77c <configuration_getVentilation>
     cde:	f8 01       	movw	r30, r16
				printf("The bool for ventilation is set to %d\n",*value);
     ce0:	80 81       	ld	r24, Z
     ce2:	1f 92       	push	r1
     ce4:	8f 93       	push	r24
     ce6:	8e e1       	ldi	r24, 0x1E	; 30
     ce8:	93 e0       	ldi	r25, 0x03	; 3
     cea:	9f 93       	push	r25
     cec:	8f 93       	push	r24
     cee:	0e 94 67 31 	call	0x62ce	; 0x62ce <printf>
     cf2:	0f 90       	pop	r0
				break;
     cf4:	0f 90       	pop	r0
     cf6:	0f 90       	pop	r0
     cf8:	0f 90       	pop	r0
     cfa:	04 c0       	rjmp	.+8      	; 0xd04 <lora_DownLinkHandler_task+0x11c>
     cfc:	85 e4       	ldi	r24, 0x45	; 69
			default:
				printf("Invalid command\n");
     cfe:	93 e0       	ldi	r25, 0x03	; 3
     d00:	0e 94 7a 31 	call	0x62f4	; 0x62f4 <puts>
     d04:	df 91       	pop	r29
				break;
		}
	}
						
}
     d06:	cf 91       	pop	r28
     d08:	1f 91       	pop	r17
     d0a:	0f 91       	pop	r16
     d0c:	08 95       	ret

00000d0e <lora_DownLinkHandler_startTask>:
     d0e:	ec 01       	movw	r28, r24
static lora_payload_t _downlink_payload;

void lora_DownLinkHandler_startTask(void* xMessageBuffer){
	for(;;)
	{
		lora_DownLinkHandler_task((MessageBufferHandle_t)xMessageBuffer);
     d10:	ce 01       	movw	r24, r28
     d12:	6a df       	rcall	.-300    	; 0xbe8 <lora_DownLinkHandler_task>
     d14:	fd cf       	rjmp	.-6      	; 0xd10 <lora_DownLinkHandler_startTask+0x2>

00000d16 <humAndTempReader_create>:
void humAndTempReader_destroy(humAndTempReader_t self) {
	if (self == NULL)
		return;
	vTaskDelete(self->handleTask);
	vPortFree(self);
}
     d16:	2f 92       	push	r2
     d18:	3f 92       	push	r3
     d1a:	4f 92       	push	r4
     d1c:	5f 92       	push	r5
     d1e:	6f 92       	push	r6
     d20:	7f 92       	push	r7
     d22:	8f 92       	push	r8
     d24:	9f 92       	push	r9
     d26:	af 92       	push	r10
     d28:	bf 92       	push	r11
     d2a:	cf 92       	push	r12
     d2c:	df 92       	push	r13
     d2e:	ef 92       	push	r14
     d30:	ff 92       	push	r15
     d32:	0f 93       	push	r16
     d34:	1f 93       	push	r17
     d36:	cf 93       	push	r28
     d38:	df 93       	push	r29
     d3a:	88 2e       	mov	r8, r24
     d3c:	96 2e       	mov	r9, r22
     d3e:	1a 01       	movw	r2, r20
     d40:	28 01       	movw	r4, r16
     d42:	39 01       	movw	r6, r18
     d44:	66 e0       	ldi	r22, 0x06	; 6
     d46:	70 e0       	ldi	r23, 0x00	; 0
     d48:	81 e0       	ldi	r24, 0x01	; 1
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	0e 94 74 2f 	call	0x5ee8	; 0x5ee8 <calloc>
     d50:	ec 01       	movw	r28, r24
     d52:	89 2b       	or	r24, r25
     d54:	71 f1       	breq	.+92     	; 0xdb2 <humAndTempReader_create+0x9c>
     d56:	19 82       	std	Y+1, r1	; 0x01
     d58:	18 82       	st	Y, r1
     d5a:	1b 82       	std	Y+3, r1	; 0x03
     d5c:	1a 82       	std	Y+2, r1	; 0x02
     d5e:	30 92 05 08 	sts	0x0805, r3	; 0x800805 <_startMeasureEventGroup+0x1>
     d62:	20 92 04 08 	sts	0x0804, r2	; 0x800804 <_startMeasureEventGroup>
     d66:	40 92 00 08 	sts	0x0800, r4	; 0x800800 <_startMeasureBit>
     d6a:	50 92 01 08 	sts	0x0801, r5	; 0x800801 <_startMeasureBit+0x1>
     d6e:	60 92 02 08 	sts	0x0802, r6	; 0x800802 <_startMeasureBit+0x2>
     d72:	70 92 03 08 	sts	0x0803, r7	; 0x800803 <_startMeasureBit+0x3>
     d76:	f0 92 ff 07 	sts	0x07FF, r15	; 0x8007ff <_readyEventGroup+0x1>
     d7a:	e0 92 fe 07 	sts	0x07FE, r14	; 0x8007fe <_readyEventGroup>
     d7e:	a0 92 fa 07 	sts	0x07FA, r10	; 0x8007fa <_readyBit>
     d82:	b0 92 fb 07 	sts	0x07FB, r11	; 0x8007fb <_readyBit+0x1>
     d86:	c0 92 fc 07 	sts	0x07FC, r12	; 0x8007fc <_readyBit+0x2>
     d8a:	d0 92 fd 07 	sts	0x07FD, r13	; 0x8007fd <_readyBit+0x3>
     d8e:	0e 94 bc 1f 	call	0x3f78	; 0x3f78 <hih8120Create>
     d92:	49 2d       	mov	r20, r9
     d94:	50 e0       	ldi	r21, 0x00	; 0
     d96:	48 53       	subi	r20, 0x38	; 56
     d98:	5f 4f       	sbci	r21, 0xFF	; 255
     d9a:	7e 01       	movw	r14, r28
     d9c:	84 e0       	ldi	r24, 0x04	; 4
     d9e:	e8 0e       	add	r14, r24
     da0:	f1 1c       	adc	r15, r1
     da2:	08 2d       	mov	r16, r8
     da4:	9e 01       	movw	r18, r28
     da6:	65 e5       	ldi	r22, 0x55	; 85
     da8:	73 e0       	ldi	r23, 0x03	; 3
     daa:	84 e5       	ldi	r24, 0x54	; 84
     dac:	97 e0       	ldi	r25, 0x07	; 7
     dae:	0e 94 4d 15 	call	0x2a9a	; 0x2a9a <xTaskCreate>
     db2:	ce 01       	movw	r24, r28
     db4:	df 91       	pop	r29
     db6:	cf 91       	pop	r28
     db8:	1f 91       	pop	r17
     dba:	0f 91       	pop	r16
     dbc:	ff 90       	pop	r15
     dbe:	ef 90       	pop	r14
     dc0:	df 90       	pop	r13
     dc2:	cf 90       	pop	r12
     dc4:	bf 90       	pop	r11
     dc6:	af 90       	pop	r10
     dc8:	9f 90       	pop	r9
     dca:	8f 90       	pop	r8
     dcc:	7f 90       	pop	r7
     dce:	6f 90       	pop	r6
     dd0:	5f 90       	pop	r5
     dd2:	4f 90       	pop	r4
     dd4:	3f 90       	pop	r3
     dd6:	2f 90       	pop	r2
     dd8:	08 95       	ret

00000dda <humAndTempReader_measure>:

void humAndTempReader_measure(humAndTempReader_t self) {
     dda:	cf 92       	push	r12
     ddc:	df 92       	push	r13
     dde:	ef 92       	push	r14
     de0:	ff 92       	push	r15
     de2:	0f 93       	push	r16
     de4:	1f 93       	push	r17
     de6:	cf 93       	push	r28
     de8:	df 93       	push	r29
     dea:	ec 01       	movw	r28, r24
	EventBits_t uxBits = xEventGroupWaitBits(_startMeasureEventGroup, 
     dec:	40 91 00 08 	lds	r20, 0x0800	; 0x800800 <_startMeasureBit>
     df0:	50 91 01 08 	lds	r21, 0x0801	; 0x800801 <_startMeasureBit+0x1>
     df4:	60 91 02 08 	lds	r22, 0x0802	; 0x800802 <_startMeasureBit+0x2>
     df8:	70 91 03 08 	lds	r23, 0x0803	; 0x800803 <_startMeasureBit+0x3>
     dfc:	cc 24       	eor	r12, r12
     dfe:	ca 94       	dec	r12
     e00:	dc 2c       	mov	r13, r12
     e02:	76 01       	movw	r14, r12
     e04:	01 e0       	ldi	r16, 0x01	; 1
     e06:	21 e0       	ldi	r18, 0x01	; 1
     e08:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <_startMeasureEventGroup>
     e0c:	90 91 05 08 	lds	r25, 0x0805	; 0x800805 <_startMeasureEventGroup+0x1>
     e10:	6a d2       	rcall	.+1236   	; 0x12e6 <xEventGroupWaitBits>
	_startMeasureBit, 
	pdTRUE, 
	pdTRUE, 
	portMAX_DELAY);

	if ((uxBits & (_startMeasureBit)) == (_startMeasureBit)) {
     e12:	00 91 00 08 	lds	r16, 0x0800	; 0x800800 <_startMeasureBit>
     e16:	10 91 01 08 	lds	r17, 0x0801	; 0x800801 <_startMeasureBit+0x1>
     e1a:	20 91 02 08 	lds	r18, 0x0802	; 0x800802 <_startMeasureBit+0x2>
     e1e:	30 91 03 08 	lds	r19, 0x0803	; 0x800803 <_startMeasureBit+0x3>
     e22:	dc 01       	movw	r26, r24
     e24:	cb 01       	movw	r24, r22
     e26:	80 23       	and	r24, r16
     e28:	91 23       	and	r25, r17
     e2a:	a2 23       	and	r26, r18
     e2c:	b3 23       	and	r27, r19
     e2e:	08 17       	cp	r16, r24
     e30:	19 07       	cpc	r17, r25
     e32:	2a 07       	cpc	r18, r26
     e34:	3b 07       	cpc	r19, r27
     e36:	79 f5       	brne	.+94     	; 0xe96 <humAndTempReader_measure+0xbc>
		hih8120Wakeup();
     e38:	0e 94 d7 1f 	call	0x3fae	; 0x3fae <hih8120Wakeup>
		vTaskDelay(50);
     e3c:	62 e3       	ldi	r22, 0x32	; 50
     e3e:	70 e0       	ldi	r23, 0x00	; 0
     e40:	80 e0       	ldi	r24, 0x00	; 0
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	0e 94 0f 18 	call	0x301e	; 0x301e <vTaskDelay>
		hih8120Meassure();
     e48:	0e 94 ec 1f 	call	0x3fd8	; 0x3fd8 <hih8120Meassure>
		vTaskDelay(5);
     e4c:	65 e0       	ldi	r22, 0x05	; 5
     e4e:	70 e0       	ldi	r23, 0x00	; 0
     e50:	80 e0       	ldi	r24, 0x00	; 0
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	0e 94 0f 18 	call	0x301e	; 0x301e <vTaskDelay>
		if(hih8120IsReady())
     e58:	0e 94 d4 1f 	call	0x3fa8	; 0x3fa8 <hih8120IsReady>
     e5c:	88 23       	and	r24, r24
     e5e:	41 f0       	breq	.+16     	; 0xe70 <humAndTempReader_measure+0x96>
		{
			self->humidity = hih8120GetHumidityPercent_x10();
     e60:	0e 94 12 20 	call	0x4024	; 0x4024 <hih8120GetHumidityPercent_x10>
     e64:	99 83       	std	Y+1, r25	; 0x01
     e66:	88 83       	st	Y, r24
			self->temperature = hih8120GetTemperature_x10();
     e68:	0e 94 38 20 	call	0x4070	; 0x4070 <hih8120GetTemperature_x10>
     e6c:	9b 83       	std	Y+3, r25	; 0x03
     e6e:	8a 83       	std	Y+2, r24	; 0x02
		}
		vTaskDelay(1000);
     e70:	68 ee       	ldi	r22, 0xE8	; 232
     e72:	73 e0       	ldi	r23, 0x03	; 3
     e74:	80 e0       	ldi	r24, 0x00	; 0
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	0e 94 0f 18 	call	0x301e	; 0x301e <vTaskDelay>
		xEventGroupSetBits(_readyEventGroup, _readyBit);
     e7c:	40 91 fa 07 	lds	r20, 0x07FA	; 0x8007fa <_readyBit>
     e80:	50 91 fb 07 	lds	r21, 0x07FB	; 0x8007fb <_readyBit+0x1>
     e84:	60 91 fc 07 	lds	r22, 0x07FC	; 0x8007fc <_readyBit+0x2>
     e88:	70 91 fd 07 	lds	r23, 0x07FD	; 0x8007fd <_readyBit+0x3>
     e8c:	80 91 fe 07 	lds	r24, 0x07FE	; 0x8007fe <_readyEventGroup>
     e90:	90 91 ff 07 	lds	r25, 0x07FF	; 0x8007ff <_readyEventGroup+0x1>
     e94:	e8 d2       	rcall	.+1488   	; 0x1466 <xEventGroupSetBits>
	}
}
     e96:	df 91       	pop	r29
     e98:	cf 91       	pop	r28
     e9a:	1f 91       	pop	r17
     e9c:	0f 91       	pop	r16
     e9e:	ff 90       	pop	r15
     ea0:	ef 90       	pop	r14
     ea2:	df 90       	pop	r13
     ea4:	cf 90       	pop	r12
     ea6:	08 95       	ret

00000ea8 <humAndTempReader_executeTask>:
	uint16_t humidity;
	int16_t temperature;
	TaskHandle_t handleTask;
}humidityAndTemperature;

void humAndTempReader_executeTask(void* self) {
     ea8:	ec 01       	movw	r28, r24
	for (;;) {
		humAndTempReader_measure((humAndTempReader_t)self);
     eaa:	ce 01       	movw	r24, r28
     eac:	96 df       	rcall	.-212    	; 0xdda <humAndTempReader_measure>
     eae:	fd cf       	rjmp	.-6      	; 0xeaa <humAndTempReader_executeTask+0x2>

00000eb0 <humAndTempReader_getHumidity>:
	}
}

uint16_t humAndTempReader_getHumidity(humAndTempReader_t self){
	return self->humidity;
}
     eb0:	fc 01       	movw	r30, r24
     eb2:	80 81       	ld	r24, Z
     eb4:	91 81       	ldd	r25, Z+1	; 0x01
     eb6:	08 95       	ret

00000eb8 <humAndTempReader_getTemperature>:

int16_t humAndTempReader_getTemperature(humAndTempReader_t self){
	return self->temperature;
}
     eb8:	fc 01       	movw	r30, r24
     eba:	82 81       	ldd	r24, Z+2	; 0x02
     ebc:	93 81       	ldd	r25, Z+3	; 0x03
     ebe:	08 95       	ret

00000ec0 <servo_initialise>:
#include "Servo.h"


void servo_initialise()
{
	rcServoCreate();		
     ec0:	0c 94 98 27 	jmp	0x4f30	; 0x4f30 <rcServoCreate>
     ec4:	08 95       	ret

00000ec6 <servo_open>:
	//printf("Servo is up\n");
}

void servo_open()
{
	rcServoSet(0, 100);
     ec6:	64 e6       	ldi	r22, 0x64	; 100
     ec8:	80 e0       	ldi	r24, 0x00	; 0
     eca:	0c 94 80 27 	jmp	0x4f00	; 0x4f00 <rcServoSet>
     ece:	08 95       	ret

00000ed0 <servo_close>:
}
void servo_close()
{
	rcServoSet(0, -100);
     ed0:	6c e9       	ldi	r22, 0x9C	; 156
     ed2:	80 e0       	ldi	r24, 0x00	; 0
     ed4:	0c 94 80 27 	jmp	0x4f00	; 0x4f00 <rcServoSet>
     ed8:	08 95       	ret

00000eda <soundReader_create>:
	if (self == NULL)
		return;

	vTaskDelete(self->handleTask);
	vPortFree(self);
}
     eda:	2f 92       	push	r2
     edc:	3f 92       	push	r3
     ede:	4f 92       	push	r4
     ee0:	5f 92       	push	r5
     ee2:	6f 92       	push	r6
     ee4:	7f 92       	push	r7
     ee6:	8f 92       	push	r8
     ee8:	9f 92       	push	r9
     eea:	af 92       	push	r10
     eec:	bf 92       	push	r11
     eee:	cf 92       	push	r12
     ef0:	df 92       	push	r13
     ef2:	ef 92       	push	r14
     ef4:	ff 92       	push	r15
     ef6:	0f 93       	push	r16
     ef8:	1f 93       	push	r17
     efa:	cf 93       	push	r28
     efc:	df 93       	push	r29
     efe:	88 2e       	mov	r8, r24
     f00:	96 2e       	mov	r9, r22
     f02:	1a 01       	movw	r2, r20
     f04:	28 01       	movw	r4, r16
     f06:	39 01       	movw	r6, r18
     f08:	64 e0       	ldi	r22, 0x04	; 4
     f0a:	70 e0       	ldi	r23, 0x00	; 0
     f0c:	81 e0       	ldi	r24, 0x01	; 1
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	0e 94 74 2f 	call	0x5ee8	; 0x5ee8 <calloc>
     f14:	ec 01       	movw	r28, r24
     f16:	00 97       	sbiw	r24, 0x00	; 0
     f18:	41 f1       	breq	.+80     	; 0xf6a <soundReader_create+0x90>
     f1a:	fc 01       	movw	r30, r24
     f1c:	11 92       	st	Z+, r1
     f1e:	11 92       	st	Z+, r1
     f20:	30 92 11 08 	sts	0x0811, r3	; 0x800811 <_startMeasureEventGroup+0x1>
     f24:	20 92 10 08 	sts	0x0810, r2	; 0x800810 <_startMeasureEventGroup>
     f28:	40 92 0c 08 	sts	0x080C, r4	; 0x80080c <_startMeasureBit>
     f2c:	50 92 0d 08 	sts	0x080D, r5	; 0x80080d <_startMeasureBit+0x1>
     f30:	60 92 0e 08 	sts	0x080E, r6	; 0x80080e <_startMeasureBit+0x2>
     f34:	70 92 0f 08 	sts	0x080F, r7	; 0x80080f <_startMeasureBit+0x3>
     f38:	f0 92 0b 08 	sts	0x080B, r15	; 0x80080b <_readyEventGroup+0x1>
     f3c:	e0 92 0a 08 	sts	0x080A, r14	; 0x80080a <_readyEventGroup>
     f40:	a0 92 06 08 	sts	0x0806, r10	; 0x800806 <_readyBit>
     f44:	b0 92 07 08 	sts	0x0807, r11	; 0x800807 <_readyBit+0x1>
     f48:	c0 92 08 08 	sts	0x0808, r12	; 0x800808 <_readyBit+0x2>
     f4c:	d0 92 09 08 	sts	0x0809, r13	; 0x800809 <_readyBit+0x3>
     f50:	49 2d       	mov	r20, r9
     f52:	50 e0       	ldi	r21, 0x00	; 0
     f54:	48 53       	subi	r20, 0x38	; 56
     f56:	5f 4f       	sbci	r21, 0xFF	; 255
     f58:	7f 01       	movw	r14, r30
     f5a:	08 2d       	mov	r16, r8
     f5c:	9c 01       	movw	r18, r24
     f5e:	66 e6       	ldi	r22, 0x66	; 102
     f60:	73 e0       	ldi	r23, 0x03	; 3
     f62:	8d e1       	ldi	r24, 0x1D	; 29
     f64:	98 e0       	ldi	r25, 0x08	; 8
     f66:	0e 94 4d 15 	call	0x2a9a	; 0x2a9a <xTaskCreate>
     f6a:	ce 01       	movw	r24, r28
     f6c:	df 91       	pop	r29
     f6e:	cf 91       	pop	r28
     f70:	1f 91       	pop	r17
     f72:	0f 91       	pop	r16
     f74:	ff 90       	pop	r15
     f76:	ef 90       	pop	r14
     f78:	df 90       	pop	r13
     f7a:	cf 90       	pop	r12
     f7c:	bf 90       	pop	r11
     f7e:	af 90       	pop	r10
     f80:	9f 90       	pop	r9
     f82:	8f 90       	pop	r8
     f84:	7f 90       	pop	r7
     f86:	6f 90       	pop	r6
     f88:	5f 90       	pop	r5
     f8a:	4f 90       	pop	r4
     f8c:	3f 90       	pop	r3
     f8e:	2f 90       	pop	r2
     f90:	08 95       	ret

00000f92 <soundReader_measure>:


void soundReader_measure(soundReader_t self) {
     f92:	cf 92       	push	r12
     f94:	df 92       	push	r13
     f96:	ef 92       	push	r14
     f98:	ff 92       	push	r15
     f9a:	0f 93       	push	r16
     f9c:	1f 93       	push	r17
     f9e:	cf 93       	push	r28
     fa0:	df 93       	push	r29
     fa2:	ec 01       	movw	r28, r24
	
	EventBits_t uxBits = xEventGroupWaitBits(_startMeasureEventGroup, 
     fa4:	40 91 0c 08 	lds	r20, 0x080C	; 0x80080c <_startMeasureBit>
     fa8:	50 91 0d 08 	lds	r21, 0x080D	; 0x80080d <_startMeasureBit+0x1>
     fac:	60 91 0e 08 	lds	r22, 0x080E	; 0x80080e <_startMeasureBit+0x2>
     fb0:	70 91 0f 08 	lds	r23, 0x080F	; 0x80080f <_startMeasureBit+0x3>
     fb4:	cc 24       	eor	r12, r12
     fb6:	ca 94       	dec	r12
     fb8:	dc 2c       	mov	r13, r12
     fba:	76 01       	movw	r14, r12
     fbc:	01 e0       	ldi	r16, 0x01	; 1
     fbe:	21 e0       	ldi	r18, 0x01	; 1
     fc0:	80 91 10 08 	lds	r24, 0x0810	; 0x800810 <_startMeasureEventGroup>
     fc4:	90 91 11 08 	lds	r25, 0x0811	; 0x800811 <_startMeasureEventGroup+0x1>
     fc8:	8e d1       	rcall	.+796    	; 0x12e6 <xEventGroupWaitBits>
	_startMeasureBit, 
	pdTRUE, 
	pdTRUE, 
	portMAX_DELAY); 

	if ((uxBits & (_startMeasureBit)) == (_startMeasureBit)) {
     fca:	00 91 0c 08 	lds	r16, 0x080C	; 0x80080c <_startMeasureBit>
     fce:	10 91 0d 08 	lds	r17, 0x080D	; 0x80080d <_startMeasureBit+0x1>
     fd2:	20 91 0e 08 	lds	r18, 0x080E	; 0x80080e <_startMeasureBit+0x2>
     fd6:	30 91 0f 08 	lds	r19, 0x080F	; 0x80080f <_startMeasureBit+0x3>
     fda:	dc 01       	movw	r26, r24
     fdc:	cb 01       	movw	r24, r22
     fde:	80 23       	and	r24, r16
     fe0:	91 23       	and	r25, r17
     fe2:	a2 23       	and	r26, r18
     fe4:	b3 23       	and	r27, r19
     fe6:	08 17       	cp	r16, r24
     fe8:	19 07       	cpc	r17, r25
     fea:	2a 07       	cpc	r18, r26
     fec:	3b 07       	cpc	r19, r27
     fee:	e1 f4       	brne	.+56     	; 0x1028 <soundReader_measure+0x96>
		srand(time(NULL));
     ff0:	80 e0       	ldi	r24, 0x00	; 0
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	78 da       	rcall	.-2832   	; 0x4e6 <time>
     ff6:	cb 01       	movw	r24, r22
     ff8:	0e 94 f9 30 	call	0x61f2	; 0x61f2 <srand>
		self->value = rand()%105 + 15;
     ffc:	0e 94 f6 30 	call	0x61ec	; 0x61ec <rand>
    1000:	69 e6       	ldi	r22, 0x69	; 105
    1002:	70 e0       	ldi	r23, 0x00	; 0
    1004:	0e 94 23 2f 	call	0x5e46	; 0x5e46 <__divmodhi4>
    1008:	0f 96       	adiw	r24, 0x0f	; 15
    100a:	99 83       	std	Y+1, r25	; 0x01
    100c:	88 83       	st	Y, r24
		
		//set done bit so that device knows measurement is done
		xEventGroupSetBits(_readyEventGroup, _readyBit);
    100e:	40 91 06 08 	lds	r20, 0x0806	; 0x800806 <_readyBit>
    1012:	50 91 07 08 	lds	r21, 0x0807	; 0x800807 <_readyBit+0x1>
    1016:	60 91 08 08 	lds	r22, 0x0808	; 0x800808 <_readyBit+0x2>
    101a:	70 91 09 08 	lds	r23, 0x0809	; 0x800809 <_readyBit+0x3>
    101e:	80 91 0a 08 	lds	r24, 0x080A	; 0x80080a <_readyEventGroup>
    1022:	90 91 0b 08 	lds	r25, 0x080B	; 0x80080b <_readyEventGroup+0x1>
    1026:	1f d2       	rcall	.+1086   	; 0x1466 <xEventGroupSetBits>
	}
}
    1028:	df 91       	pop	r29
    102a:	cf 91       	pop	r28
    102c:	1f 91       	pop	r17
    102e:	0f 91       	pop	r16
    1030:	ff 90       	pop	r15
    1032:	ef 90       	pop	r14
    1034:	df 90       	pop	r13
    1036:	cf 90       	pop	r12
    1038:	08 95       	ret

0000103a <soundReader_executeTask>:
	TaskHandle_t handleTask;
}soundReader;


//actual task, methods devided so that it is possible to test
void soundReader_executeTask(void* self) {
    103a:	ec 01       	movw	r28, r24
	for (;;) {
		soundReader_measure((soundReader_t)self);
    103c:	ce 01       	movw	r24, r28
    103e:	a9 df       	rcall	.-174    	; 0xf92 <soundReader_measure>
    1040:	fd cf       	rjmp	.-6      	; 0x103c <soundReader_executeTask+0x2>

00001042 <soundReader_getSound>:
	}
}

uint16_t soundReader_getSound(soundReader_t self) {
	return self->value;
}
    1042:	fc 01       	movw	r30, r24
    1044:	80 81       	ld	r24, Z
    1046:	91 81       	ldd	r25, Z+1	; 0x01
    1048:	08 95       	ret

0000104a <lora_UpLinkHandler_create>:
	}
}


void lora_UpLinkHandler_create(UBaseType_t lora_handler_task_priority, MessageBufferHandle_t xMessageBuffer)
{
    104a:	ef 92       	push	r14
    104c:	ff 92       	push	r15
    104e:	0f 93       	push	r16
    1050:	9b 01       	movw	r18, r22
	_buffer = xMessageBuffer;
	
	
	
	xTaskCreate(
    1052:	e1 2c       	mov	r14, r1
    1054:	f1 2c       	mov	r15, r1
    1056:	08 2f       	mov	r16, r24
    1058:	48 e8       	ldi	r20, 0x88	; 136
    105a:	51 e0       	ldi	r21, 0x01	; 1
    105c:	62 e7       	ldi	r22, 0x72	; 114
    105e:	73 e0       	ldi	r23, 0x03	; 3
    1060:	8c e4       	ldi	r24, 0x4C	; 76
    1062:	99 e0       	ldi	r25, 0x09	; 9
    1064:	0e 94 4d 15 	call	0x2a9a	; 0x2a9a <xTaskCreate>
	,  (const portCHAR *)"LRUpHand"
	,  configMINIMAL_STACK_SIZE+200
	,  xMessageBuffer
	,  lora_handler_task_priority
	,  NULL );
}
    1068:	0f 91       	pop	r16
    106a:	ff 90       	pop	r15
    106c:	ef 90       	pop	r14
    106e:	08 95       	ret

00001070 <lora_UpLinkHandler_task>:
		}
	}
}

void lora_UpLinkHandler_task(MessageBufferHandle_t xMessageBuffer)
{
    1070:	df 92       	push	r13
    1072:	ef 92       	push	r14
    1074:	ff 92       	push	r15
    1076:	0f 93       	push	r16
    1078:	1f 93       	push	r17
    107a:	cf 93       	push	r28
    107c:	df 93       	push	r29
    107e:	7c 01       	movw	r14, r24
	size_t xBytesToSend;
	char rxData[50];
	if (!isSet)
    1080:	80 91 12 08 	lds	r24, 0x0812	; 0x800812 <isSet>
    1084:	81 11       	cpse	r24, r1
    1086:	cf c0       	rjmp	.+414    	; 0x1226 <lora_UpLinkHandler_task+0x1b6>
	{
		// Hardware reset of LoRaWAN transceiver
		lora_driver_reset_rn2483(1);
    1088:	81 e0       	ldi	r24, 0x01	; 1
    108a:	0e 94 58 23 	call	0x46b0	; 0x46b0 <lora_driver_reset_rn2483>
		vTaskDelay(2);
    108e:	62 e0       	ldi	r22, 0x02	; 2
    1090:	70 e0       	ldi	r23, 0x00	; 0
    1092:	80 e0       	ldi	r24, 0x00	; 0
    1094:	90 e0       	ldi	r25, 0x00	; 0
    1096:	0e 94 0f 18 	call	0x301e	; 0x301e <vTaskDelay>
		lora_driver_reset_rn2483(0);
    109a:	80 e0       	ldi	r24, 0x00	; 0
    109c:	0e 94 58 23 	call	0x46b0	; 0x46b0 <lora_driver_reset_rn2483>
		vTaskDelay(150);
    10a0:	66 e9       	ldi	r22, 0x96	; 150
    10a2:	70 e0       	ldi	r23, 0x00	; 0
    10a4:	80 e0       	ldi	r24, 0x00	; 0
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	0e 94 0f 18 	call	0x301e	; 0x301e <vTaskDelay>

		lora_driver_flush_buffers(); // get rid of first version string from module after reset!
    10ac:	0e 94 0e 23 	call	0x461c	; 0x461c <lora_driver_flush_buffers>


static void _lora_setup(void)
{
	e_LoRa_return_code_t rc;
	led_slow_blink(led_ST2); // OPTIONAL: Led the green led blink slowly while we are setting up LoRa
    10b0:	81 e0       	ldi	r24, 0x01	; 1
    10b2:	0e 94 66 21 	call	0x42cc	; 0x42cc <led_slow_blink>
	//That being said it runs every time when a device is being started.
	
	//START OF ONE TIME USE CODE

	// Factory reset the transceiver
	printf("FactoryReset >%s<\n", lora_driver_map_return_code_to_text(lora_driver_rn2483_factory_reset()));
    10b6:	0e 94 6c 23 	call	0x46d8	; 0x46d8 <lora_driver_rn2483_factory_reset>
    10ba:	0e 94 e9 25 	call	0x4bd2	; 0x4bd2 <lora_driver_map_return_code_to_text>
    10be:	9f 93       	push	r25
    10c0:	8f 93       	push	r24
    10c2:	8b e7       	ldi	r24, 0x7B	; 123
    10c4:	93 e0       	ldi	r25, 0x03	; 3
    10c6:	9f 93       	push	r25
    10c8:	8f 93       	push	r24
    10ca:	0e 94 67 31 	call	0x62ce	; 0x62ce <printf>
	
	// Configure to EU868 LoRaWAN standards
	printf("Configure to EU868 >%s<\n", lora_driver_map_return_code_to_text(lora_driver_configure_to_eu868()));
    10ce:	0e 94 ea 24 	call	0x49d4	; 0x49d4 <lora_driver_configure_to_eu868>
    10d2:	0e 94 e9 25 	call	0x4bd2	; 0x4bd2 <lora_driver_map_return_code_to_text>
    10d6:	9f 93       	push	r25
    10d8:	8f 93       	push	r24
    10da:	8e e8       	ldi	r24, 0x8E	; 142
    10dc:	93 e0       	ldi	r25, 0x03	; 3
    10de:	9f 93       	push	r25
    10e0:	8f 93       	push	r24
    10e2:	0e 94 67 31 	call	0x62ce	; 0x62ce <printf>

	// Get the transceivers HW EUI
	rc = lora_driver_get_rn2483_hweui(_out_buf);
    10e6:	89 e2       	ldi	r24, 0x29	; 41
    10e8:	98 e0       	ldi	r25, 0x08	; 8
    10ea:	0e 94 7e 23 	call	0x46fc	; 0x46fc <lora_driver_get_rn2483_hweui>
	printf("Get HWEUI >%s<: %s\n",lora_driver_map_return_code_to_text(rc), _out_buf);
    10ee:	0e 94 e9 25 	call	0x4bd2	; 0x4bd2 <lora_driver_map_return_code_to_text>
    10f2:	c9 e2       	ldi	r28, 0x29	; 41
    10f4:	d8 e0       	ldi	r29, 0x08	; 8
    10f6:	df 93       	push	r29
    10f8:	cf 93       	push	r28
    10fa:	9f 93       	push	r25
    10fc:	8f 93       	push	r24
    10fe:	87 ea       	ldi	r24, 0xA7	; 167
    1100:	93 e0       	ldi	r25, 0x03	; 3
    1102:	9f 93       	push	r25
    1104:	8f 93       	push	r24
    1106:	0e 94 67 31 	call	0x62ce	; 0x62ce <printf>

	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_map_return_code_to_text(lora_driver_set_device_identifier(_out_buf)));
    110a:	ce 01       	movw	r24, r28
    110c:	0e 94 9a 23 	call	0x4734	; 0x4734 <lora_driver_set_device_identifier>
    1110:	0e 94 e9 25 	call	0x4bd2	; 0x4bd2 <lora_driver_map_return_code_to_text>
    1114:	9f 93       	push	r25
    1116:	8f 93       	push	r24
    1118:	df 93       	push	r29
    111a:	cf 93       	push	r28
    111c:	8b eb       	ldi	r24, 0xBB	; 187
    111e:	93 e0       	ldi	r25, 0x03	; 3
    1120:	9f 93       	push	r25
    1122:	8f 93       	push	r24
    1124:	0e 94 67 31 	call	0x62ce	; 0x62ce <printf>

	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_map_return_code_to_text(lora_driver_set_otaa_identity(LORA_appEUI,LORA_appKEY,_out_buf)));
    1128:	ae 01       	movw	r20, r28
    112a:	60 ed       	ldi	r22, 0xD0	; 208
    112c:	73 e0       	ldi	r23, 0x03	; 3
    112e:	81 ef       	ldi	r24, 0xF1	; 241
    1130:	93 e0       	ldi	r25, 0x03	; 3
    1132:	0e 94 c8 25 	call	0x4b90	; 0x4b90 <lora_driver_set_otaa_identity>
    1136:	0e 94 e9 25 	call	0x4bd2	; 0x4bd2 <lora_driver_map_return_code_to_text>
    113a:	9f 93       	push	r25
    113c:	8f 93       	push	r24
    113e:	df 93       	push	r29
    1140:	cf 93       	push	r28
    1142:	80 ed       	ldi	r24, 0xD0	; 208
    1144:	93 e0       	ldi	r25, 0x03	; 3
    1146:	9f 93       	push	r25
    1148:	8f 93       	push	r24
    114a:	81 ef       	ldi	r24, 0xF1	; 241
    114c:	93 e0       	ldi	r25, 0x03	; 3
    114e:	9f 93       	push	r25
    1150:	8f 93       	push	r24
    1152:	82 e0       	ldi	r24, 0x02	; 2
    1154:	94 e0       	ldi	r25, 0x04	; 4
    1156:	9f 93       	push	r25
    1158:	8f 93       	push	r24
    115a:	0e 94 67 31 	call	0x62ce	; 0x62ce <printf>

	// Save all the MAC settings in the transceiver
	printf("Save mac >%s<\n",lora_driver_map_return_code_to_text(lora_driver_save_mac()));
    115e:	0e 94 cd 23 	call	0x479a	; 0x479a <lora_driver_save_mac>
    1162:	0e 94 e9 25 	call	0x4bd2	; 0x4bd2 <lora_driver_map_return_code_to_text>
    1166:	9f 93       	push	r25
    1168:	8f 93       	push	r24
    116a:	88 e3       	ldi	r24, 0x38	; 56
    116c:	94 e0       	ldi	r25, 0x04	; 4
    116e:	9f 93       	push	r25
    1170:	8f 93       	push	r24
    1172:	0e 94 67 31 	call	0x62ce	; 0x62ce <printf>

	//END OF ONE TIME USE CODE
	
	
	// Enable Adaptive Data Rate
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_map_return_code_to_text(lora_driver_set_adaptive_data_rate(LoRa_ON)));
    1176:	8d b7       	in	r24, 0x3d	; 61
    1178:	9e b7       	in	r25, 0x3e	; 62
    117a:	82 96       	adiw	r24, 0x22	; 34
    117c:	0f b6       	in	r0, 0x3f	; 63
    117e:	f8 94       	cli
    1180:	9e bf       	out	0x3e, r25	; 62
    1182:	0f be       	out	0x3f, r0	; 63
    1184:	8d bf       	out	0x3d, r24	; 61
    1186:	81 e0       	ldi	r24, 0x01	; 1
    1188:	0e 94 c7 24 	call	0x498e	; 0x498e <lora_driver_set_adaptive_data_rate>
    118c:	0e 94 e9 25 	call	0x4bd2	; 0x4bd2 <lora_driver_map_return_code_to_text>
    1190:	9f 93       	push	r25
    1192:	8f 93       	push	r24
    1194:	87 e4       	ldi	r24, 0x47	; 71
    1196:	94 e0       	ldi	r25, 0x04	; 4
    1198:	9f 93       	push	r25
    119a:	8f 93       	push	r24
    119c:	0e 94 67 31 	call	0x62ce	; 0x62ce <printf>

	// Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	printf("Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_map_return_code_to_text(lora_driver_set_receive_delay(500)));
    11a0:	84 ef       	ldi	r24, 0xF4	; 244
    11a2:	91 e0       	ldi	r25, 0x01	; 1
    11a4:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <lora_driver_set_receive_delay>
    11a8:	0e 94 e9 25 	call	0x4bd2	; 0x4bd2 <lora_driver_map_return_code_to_text>
    11ac:	9f 93       	push	r25
    11ae:	8f 93       	push	r24
    11b0:	81 e0       	ldi	r24, 0x01	; 1
    11b2:	8f 93       	push	r24
    11b4:	84 ef       	ldi	r24, 0xF4	; 244
    11b6:	8f 93       	push	r24
    11b8:	88 e6       	ldi	r24, 0x68	; 104
    11ba:	94 e0       	ldi	r25, 0x04	; 4
    11bc:	9f 93       	push	r25
    11be:	8f 93       	push	r24
    11c0:	0e 94 67 31 	call	0x62ce	; 0x62ce <printf>
    11c4:	8d b7       	in	r24, 0x3d	; 61
    11c6:	9e b7       	in	r25, 0x3e	; 62
    11c8:	0a 96       	adiw	r24, 0x0a	; 10
    11ca:	0f b6       	in	r0, 0x3f	; 63
    11cc:	f8 94       	cli
    11ce:	9e bf       	out	0x3e, r25	; 62
    11d0:	0f be       	out	0x3f, r0	; 63
    11d2:	8d bf       	out	0x3d, r24	; 61
    11d4:	ca e0       	ldi	r28, 0x0A	; 10
    11d6:	d0 e0       	ldi	r29, 0x00	; 0
	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
	
	do {
		rc = lora_driver_join(LoRa_OTAA);
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_map_return_code_to_text(rc));
    11d8:	08 e8       	ldi	r16, 0x88	; 136
    11da:	14 e0       	ldi	r17, 0x04	; 4

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
	
	do {
		rc = lora_driver_join(LoRa_OTAA);
    11dc:	80 e0       	ldi	r24, 0x00	; 0
    11de:	0e 94 d3 23 	call	0x47a6	; 0x47a6 <lora_driver_join>
    11e2:	d8 2e       	mov	r13, r24
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_map_return_code_to_text(rc));
    11e4:	0e 94 e9 25 	call	0x4bd2	; 0x4bd2 <lora_driver_map_return_code_to_text>
    11e8:	9f 93       	push	r25
    11ea:	8f 93       	push	r24
    11ec:	df 93       	push	r29
    11ee:	cf 93       	push	r28
    11f0:	1f 93       	push	r17
    11f2:	0f 93       	push	r16
    11f4:	0e 94 67 31 	call	0x62ce	; 0x62ce <printf>

		if ( rc != LoRa_ACCEPTED)
    11f8:	0f 90       	pop	r0
    11fa:	0f 90       	pop	r0
    11fc:	0f 90       	pop	r0
    11fe:	0f 90       	pop	r0
    1200:	0f 90       	pop	r0
    1202:	0f 90       	pop	r0
    1204:	88 e0       	ldi	r24, 0x08	; 8
    1206:	d8 16       	cp	r13, r24
    1208:	89 f1       	breq	.+98     	; 0x126c <lora_UpLinkHandler_task+0x1fc>
		{
			// Make the red led pulse to tell something went wrong
			led_long_puls(led_ST1); // OPTIONAL
    120a:	80 e0       	ldi	r24, 0x00	; 0
    120c:	0e 94 d2 21 	call	0x43a4	; 0x43a4 <led_long_puls>
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
    1210:	66 e3       	ldi	r22, 0x36	; 54
    1212:	71 e0       	ldi	r23, 0x01	; 1
    1214:	80 e0       	ldi	r24, 0x00	; 0
    1216:	90 e0       	ldi	r25, 0x00	; 0
    1218:	0e 94 0f 18 	call	0x301e	; 0x301e <vTaskDelay>
    121c:	21 97       	sbiw	r28, 0x01	; 1
		}
		else
		{
			break;
		}
	} while (--maxJoinTriesLeft);
    121e:	f1 f6       	brne	.-68     	; 0x11dc <lora_UpLinkHandler_task+0x16c>
    1220:	2c c0       	rjmp	.+88     	; 0x127a <lora_UpLinkHandler_task+0x20a>
		// Make the red led blink fast to tell something went wrong
		led_fast_blink(led_ST1);

		while (1)
		{
			taskYIELD();
    1222:	39 d4       	rcall	.+2162   	; 0x1a96 <vPortYield>
    1224:	fe cf       	rjmp	.-4      	; 0x1222 <lora_UpLinkHandler_task+0x1b2>

		_lora_setup();
		isSet=true;
	}
	
	xBytesToSend = xMessageBufferReceive(xMessageBuffer, (void*) &_uplink_payload,
    1226:	00 e0       	ldi	r16, 0x00	; 0
    1228:	10 e0       	ldi	r17, 0x00	; 0
    122a:	98 01       	movw	r18, r16
    122c:	42 e3       	ldi	r20, 0x32	; 50
    122e:	50 e0       	ldi	r21, 0x00	; 0
    1230:	63 e1       	ldi	r22, 0x13	; 19
    1232:	78 e0       	ldi	r23, 0x08	; 8
    1234:	c7 01       	movw	r24, r14
    1236:	0e 94 0a 14 	call	0x2814	; 0x2814 <xStreamBufferReceive>
	sizeof(rxData),0);
	if(xBytesToSend >= sizeof(uint8_t)*2)
    123a:	02 97       	sbiw	r24, 0x02	; 2
    123c:	28 f1       	brcs	.+74     	; 0x1288 <lora_UpLinkHandler_task+0x218>
	{
		/**< Status led ST4 (BLUE)*/
		//Makes the led light up in a short period.
		led_short_puls(led_ST4);
    123e:	83 e0       	ldi	r24, 0x03	; 3
    1240:	0e 94 e4 21 	call	0x43c8	; 0x43c8 <led_short_puls>
		
		printf("Upload Message >%s<\n", lora_driver_map_return_code_to_text(lora_driver_sent_upload_message(false, &_uplink_payload)));
    1244:	63 e1       	ldi	r22, 0x13	; 19
    1246:	78 e0       	ldi	r23, 0x08	; 8
    1248:	80 e0       	ldi	r24, 0x00	; 0
    124a:	0e 94 fc 23 	call	0x47f8	; 0x47f8 <lora_driver_sent_upload_message>
    124e:	0e 94 e9 25 	call	0x4bd2	; 0x4bd2 <lora_driver_map_return_code_to_text>
    1252:	9f 93       	push	r25
    1254:	8f 93       	push	r24
    1256:	88 ea       	ldi	r24, 0xA8	; 168
    1258:	94 e0       	ldi	r25, 0x04	; 4
    125a:	9f 93       	push	r25
    125c:	8f 93       	push	r24
    125e:	0e 94 67 31 	call	0x62ce	; 0x62ce <printf>
    1262:	0f 90       	pop	r0
    1264:	0f 90       	pop	r0
    1266:	0f 90       	pop	r0
    1268:	0f 90       	pop	r0
	}
}
    126a:	0e c0       	rjmp	.+28     	; 0x1288 <lora_UpLinkHandler_task+0x218>

	if (rc == LoRa_ACCEPTED)
	{
		// Connected to LoRaWAN :-)
		// Make the green led steady
		led_led_on(led_ST2); // OPTIONAL
    126c:	81 e0       	ldi	r24, 0x01	; 1
    126e:	0e 94 b4 21 	call	0x4368	; 0x4368 <led_led_on>
		vTaskDelay(150);

		lora_driver_flush_buffers(); // get rid of first version string from module after reset!

		_lora_setup();
		isSet=true;
    1272:	81 e0       	ldi	r24, 0x01	; 1
    1274:	80 93 12 08 	sts	0x0812, r24	; 0x800812 <isSet>
    1278:	d6 cf       	rjmp	.-84     	; 0x1226 <lora_UpLinkHandler_task+0x1b6>
	}
	else
	{
		// Something went wrong
		// Turn off the green led
		led_led_off(led_ST2);
    127a:	81 e0       	ldi	r24, 0x01	; 1
    127c:	0e 94 c3 21 	call	0x4386	; 0x4386 <led_led_off>
		// Make the red led blink fast to tell something went wrong
		led_fast_blink(led_ST1);
    1280:	80 e0       	ldi	r24, 0x00	; 0
    1282:	0e 94 8d 21 	call	0x431a	; 0x431a <led_fast_blink>
    1286:	cd cf       	rjmp	.-102    	; 0x1222 <lora_UpLinkHandler_task+0x1b2>
		//Makes the led light up in a short period.
		led_short_puls(led_ST4);
		
		printf("Upload Message >%s<\n", lora_driver_map_return_code_to_text(lora_driver_sent_upload_message(false, &_uplink_payload)));
	}
}
    1288:	df 91       	pop	r29
    128a:	cf 91       	pop	r28
    128c:	1f 91       	pop	r17
    128e:	0f 91       	pop	r16
    1290:	ff 90       	pop	r15
    1292:	ef 90       	pop	r14
    1294:	df 90       	pop	r13
    1296:	08 95       	ret

00001298 <lora_UpLinkHandler_startTask>:
static MessageBufferHandle_t _buffer;
static bool isSet=false;



void lora_UpLinkHandler_startTask(void* xMessageBuffer){
    1298:	ec 01       	movw	r28, r24
	for(;;)
	{
		lora_UpLinkHandler_task((MessageBufferHandle_t)xMessageBuffer);
    129a:	ce 01       	movw	r24, r28
    129c:	e9 de       	rcall	.-558    	; 0x1070 <lora_UpLinkHandler_task>
    129e:	fd cf       	rjmp	.-6      	; 0x129a <lora_UpLinkHandler_startTask+0x2>

000012a0 <task_switch_in>:
	void task_switch_in(uint8_t task_no) {
		 #ifdef HAL_DEFS_H_

		 #else
		 // Used on VIA MEGA Shield rev. 2.0.0
		 PORTK &= 0b11110000;
    12a0:	e8 e0       	ldi	r30, 0x08	; 8
    12a2:	f1 e0       	ldi	r31, 0x01	; 1
    12a4:	90 81       	ld	r25, Z
    12a6:	90 7f       	andi	r25, 0xF0	; 240
    12a8:	90 83       	st	Z, r25
		 PORTK |= (task_no & 0b00001111);
    12aa:	90 81       	ld	r25, Z
    12ac:	8f 70       	andi	r24, 0x0F	; 15
    12ae:	98 2b       	or	r25, r24
    12b0:	90 83       	st	Z, r25
    12b2:	08 95       	ret

000012b4 <task_switch_out>:
	void task_switch_out(uint8_t task_no) {
		#ifdef HAL_DEFS_H_

		#else
		// Used on VIA MEGA Shield rev. 2.0.0
		PORTK &= 0b11110000;
    12b4:	e8 e0       	ldi	r30, 0x08	; 8
    12b6:	f1 e0       	ldi	r31, 0x01	; 1
    12b8:	80 81       	ld	r24, Z
    12ba:	80 7f       	andi	r24, 0xF0	; 240
    12bc:	80 83       	st	Z, r24
    12be:	08 95       	ret

000012c0 <xEventGroupCreate>:
        uxReturn = pxEventBits->uxEventBits;
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
    12c0:	cf 93       	push	r28
    12c2:	df 93       	push	r29
    12c4:	80 e1       	ldi	r24, 0x10	; 16
    12c6:	90 e0       	ldi	r25, 0x00	; 0
    12c8:	b4 d1       	rcall	.+872    	; 0x1632 <pvPortMalloc>
    12ca:	ec 01       	movw	r28, r24
    12cc:	00 97       	sbiw	r24, 0x00	; 0
    12ce:	39 f0       	breq	.+14     	; 0x12de <xEventGroupCreate+0x1e>
    12d0:	fc 01       	movw	r30, r24
    12d2:	11 92       	st	Z+, r1
    12d4:	11 92       	st	Z+, r1
    12d6:	11 92       	st	Z+, r1
    12d8:	11 92       	st	Z+, r1
    12da:	cf 01       	movw	r24, r30
    12dc:	94 d2       	rcall	.+1320   	; 0x1806 <vListInitialise>
    12de:	ce 01       	movw	r24, r28
    12e0:	df 91       	pop	r29
    12e2:	cf 91       	pop	r28
    12e4:	08 95       	ret

000012e6 <xEventGroupWaitBits>:
    12e6:	2f 92       	push	r2
    12e8:	3f 92       	push	r3
    12ea:	4f 92       	push	r4
    12ec:	5f 92       	push	r5
    12ee:	6f 92       	push	r6
    12f0:	7f 92       	push	r7
    12f2:	8f 92       	push	r8
    12f4:	9f 92       	push	r9
    12f6:	af 92       	push	r10
    12f8:	bf 92       	push	r11
    12fa:	cf 92       	push	r12
    12fc:	df 92       	push	r13
    12fe:	ef 92       	push	r14
    1300:	ff 92       	push	r15
    1302:	0f 93       	push	r16
    1304:	1f 93       	push	r17
    1306:	cf 93       	push	r28
    1308:	df 93       	push	r29
    130a:	ec 01       	movw	r28, r24
    130c:	4a 01       	movw	r8, r20
    130e:	5b 01       	movw	r10, r22
    1310:	62 2e       	mov	r6, r18
    1312:	70 2e       	mov	r7, r16
    1314:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <vTaskSuspendAll>
    1318:	28 80       	ld	r2, Y
    131a:	39 80       	ldd	r3, Y+1	; 0x01
    131c:	4a 80       	ldd	r4, Y+2	; 0x02
    131e:	5b 80       	ldd	r5, Y+3	; 0x03
    1320:	01 11       	cpse	r16, r1
    1322:	0d c0       	rjmp	.+26     	; 0x133e <xEventGroupWaitBits+0x58>
    1324:	81 e0       	ldi	r24, 0x01	; 1
    1326:	b2 01       	movw	r22, r4
    1328:	a1 01       	movw	r20, r2
    132a:	48 21       	and	r20, r8
    132c:	59 21       	and	r21, r9
    132e:	6a 21       	and	r22, r10
    1330:	7b 21       	and	r23, r11
    1332:	45 2b       	or	r20, r21
    1334:	46 2b       	or	r20, r22
    1336:	47 2b       	or	r20, r23
    1338:	79 f4       	brne	.+30     	; 0x1358 <xEventGroupWaitBits+0x72>
    133a:	80 e0       	ldi	r24, 0x00	; 0
    133c:	0d c0       	rjmp	.+26     	; 0x1358 <xEventGroupWaitBits+0x72>
    133e:	81 e0       	ldi	r24, 0x01	; 1
    1340:	b2 01       	movw	r22, r4
    1342:	a1 01       	movw	r20, r2
    1344:	48 21       	and	r20, r8
    1346:	59 21       	and	r21, r9
    1348:	6a 21       	and	r22, r10
    134a:	7b 21       	and	r23, r11
    134c:	48 15       	cp	r20, r8
    134e:	59 05       	cpc	r21, r9
    1350:	6a 05       	cpc	r22, r10
    1352:	7b 05       	cpc	r23, r11
    1354:	09 f0       	breq	.+2      	; 0x1358 <xEventGroupWaitBits+0x72>
    1356:	80 e0       	ldi	r24, 0x00	; 0
    1358:	88 23       	and	r24, r24
    135a:	81 f0       	breq	.+32     	; 0x137c <xEventGroupWaitBits+0x96>
    135c:	66 20       	and	r6, r6
    135e:	09 f4       	brne	.+2      	; 0x1362 <xEventGroupWaitBits+0x7c>
    1360:	6b c0       	rjmp	.+214    	; 0x1438 <xEventGroupWaitBits+0x152>
    1362:	80 94       	com	r8
    1364:	90 94       	com	r9
    1366:	a0 94       	com	r10
    1368:	b0 94       	com	r11
    136a:	82 20       	and	r8, r2
    136c:	93 20       	and	r9, r3
    136e:	a4 20       	and	r10, r4
    1370:	b5 20       	and	r11, r5
    1372:	88 82       	st	Y, r8
    1374:	99 82       	std	Y+1, r9	; 0x01
    1376:	aa 82       	std	Y+2, r10	; 0x02
    1378:	bb 82       	std	Y+3, r11	; 0x03
    137a:	5e c0       	rjmp	.+188    	; 0x1438 <xEventGroupWaitBits+0x152>
    137c:	c1 14       	cp	r12, r1
    137e:	d1 04       	cpc	r13, r1
    1380:	e1 04       	cpc	r14, r1
    1382:	f1 04       	cpc	r15, r1
    1384:	09 f4       	brne	.+2      	; 0x1388 <xEventGroupWaitBits+0xa2>
    1386:	58 c0       	rjmp	.+176    	; 0x1438 <xEventGroupWaitBits+0x152>
    1388:	66 20       	and	r6, r6
    138a:	29 f0       	breq	.+10     	; 0x1396 <xEventGroupWaitBits+0xb0>
    138c:	40 e0       	ldi	r20, 0x00	; 0
    138e:	50 e0       	ldi	r21, 0x00	; 0
    1390:	60 e0       	ldi	r22, 0x00	; 0
    1392:	71 e0       	ldi	r23, 0x01	; 1
    1394:	03 c0       	rjmp	.+6      	; 0x139c <xEventGroupWaitBits+0xb6>
    1396:	40 e0       	ldi	r20, 0x00	; 0
    1398:	50 e0       	ldi	r21, 0x00	; 0
    139a:	ba 01       	movw	r22, r20
    139c:	71 10       	cpse	r7, r1
    139e:	74 60       	ori	r23, 0x04	; 4
    13a0:	48 29       	or	r20, r8
    13a2:	59 29       	or	r21, r9
    13a4:	6a 29       	or	r22, r10
    13a6:	7b 29       	or	r23, r11
    13a8:	97 01       	movw	r18, r14
    13aa:	86 01       	movw	r16, r12
    13ac:	ce 01       	movw	r24, r28
    13ae:	04 96       	adiw	r24, 0x04	; 4
    13b0:	0e 94 be 18 	call	0x317c	; 0x317c <vTaskPlaceOnUnorderedEventList>
    13b4:	0e 94 93 17 	call	0x2f26	; 0x2f26 <xTaskResumeAll>
    13b8:	81 11       	cpse	r24, r1
    13ba:	01 c0       	rjmp	.+2      	; 0x13be <xEventGroupWaitBits+0xd8>
    13bc:	6c d3       	rcall	.+1752   	; 0x1a96 <vPortYield>
    13be:	0e 94 05 1b 	call	0x360a	; 0x360a <uxTaskResetEventItemValue>
    13c2:	91 fd       	sbrc	r25, 1
    13c4:	35 c0       	rjmp	.+106    	; 0x1430 <xEventGroupWaitBits+0x14a>
    13c6:	0f b6       	in	r0, 0x3f	; 63
    13c8:	f8 94       	cli
    13ca:	0f 92       	push	r0
    13cc:	68 81       	ld	r22, Y
    13ce:	79 81       	ldd	r23, Y+1	; 0x01
    13d0:	8a 81       	ldd	r24, Y+2	; 0x02
    13d2:	9b 81       	ldd	r25, Y+3	; 0x03
    13d4:	71 10       	cpse	r7, r1
    13d6:	0d c0       	rjmp	.+26     	; 0x13f2 <xEventGroupWaitBits+0x10c>
    13d8:	21 e0       	ldi	r18, 0x01	; 1
    13da:	75 01       	movw	r14, r10
    13dc:	64 01       	movw	r12, r8
    13de:	c6 22       	and	r12, r22
    13e0:	d7 22       	and	r13, r23
    13e2:	e8 22       	and	r14, r24
    13e4:	f9 22       	and	r15, r25
    13e6:	cd 28       	or	r12, r13
    13e8:	ce 28       	or	r12, r14
    13ea:	cf 28       	or	r12, r15
    13ec:	79 f4       	brne	.+30     	; 0x140c <xEventGroupWaitBits+0x126>
    13ee:	20 e0       	ldi	r18, 0x00	; 0
    13f0:	0d c0       	rjmp	.+26     	; 0x140c <xEventGroupWaitBits+0x126>
    13f2:	21 e0       	ldi	r18, 0x01	; 1
    13f4:	75 01       	movw	r14, r10
    13f6:	64 01       	movw	r12, r8
    13f8:	c6 22       	and	r12, r22
    13fa:	d7 22       	and	r13, r23
    13fc:	e8 22       	and	r14, r24
    13fe:	f9 22       	and	r15, r25
    1400:	c8 14       	cp	r12, r8
    1402:	d9 04       	cpc	r13, r9
    1404:	ea 04       	cpc	r14, r10
    1406:	fb 04       	cpc	r15, r11
    1408:	09 f0       	breq	.+2      	; 0x140c <xEventGroupWaitBits+0x126>
    140a:	20 e0       	ldi	r18, 0x00	; 0
    140c:	22 23       	and	r18, r18
    140e:	71 f0       	breq	.+28     	; 0x142c <xEventGroupWaitBits+0x146>
    1410:	66 20       	and	r6, r6
    1412:	61 f0       	breq	.+24     	; 0x142c <xEventGroupWaitBits+0x146>
    1414:	80 94       	com	r8
    1416:	90 94       	com	r9
    1418:	a0 94       	com	r10
    141a:	b0 94       	com	r11
    141c:	86 22       	and	r8, r22
    141e:	97 22       	and	r9, r23
    1420:	a8 22       	and	r10, r24
    1422:	b9 22       	and	r11, r25
    1424:	88 82       	st	Y, r8
    1426:	99 82       	std	Y+1, r9	; 0x01
    1428:	aa 82       	std	Y+2, r10	; 0x02
    142a:	bb 82       	std	Y+3, r11	; 0x03
    142c:	0f 90       	pop	r0
    142e:	0f be       	out	0x3f, r0	; 63
    1430:	1b 01       	movw	r2, r22
    1432:	2c 01       	movw	r4, r24
    1434:	55 24       	eor	r5, r5
    1436:	02 c0       	rjmp	.+4      	; 0x143c <xEventGroupWaitBits+0x156>
    1438:	0e 94 93 17 	call	0x2f26	; 0x2f26 <xTaskResumeAll>
    143c:	c2 01       	movw	r24, r4
    143e:	b1 01       	movw	r22, r2
    1440:	df 91       	pop	r29
    1442:	cf 91       	pop	r28
    1444:	1f 91       	pop	r17
    1446:	0f 91       	pop	r16
    1448:	ff 90       	pop	r15
    144a:	ef 90       	pop	r14
    144c:	df 90       	pop	r13
    144e:	cf 90       	pop	r12
    1450:	bf 90       	pop	r11
    1452:	af 90       	pop	r10
    1454:	9f 90       	pop	r9
    1456:	8f 90       	pop	r8
    1458:	7f 90       	pop	r7
    145a:	6f 90       	pop	r6
    145c:	5f 90       	pop	r5
    145e:	4f 90       	pop	r4
    1460:	3f 90       	pop	r3
    1462:	2f 90       	pop	r2
    1464:	08 95       	ret

00001466 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
    1466:	4f 92       	push	r4
    1468:	5f 92       	push	r5
    146a:	6f 92       	push	r6
    146c:	7f 92       	push	r7
    146e:	8f 92       	push	r8
    1470:	9f 92       	push	r9
    1472:	af 92       	push	r10
    1474:	bf 92       	push	r11
    1476:	cf 92       	push	r12
    1478:	df 92       	push	r13
    147a:	ef 92       	push	r14
    147c:	ff 92       	push	r15
    147e:	0f 93       	push	r16
    1480:	1f 93       	push	r17
    1482:	cf 93       	push	r28
    1484:	df 93       	push	r29
    1486:	ec 01       	movw	r28, r24
    1488:	6a 01       	movw	r12, r20
    148a:	7b 01       	movw	r14, r22
    itself. */
    configASSERT( xEventGroup );
    configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

    pxList = &( pxEventBits->xTasksWaitingForBits );
    pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    148c:	8c 01       	movw	r16, r24
    148e:	09 5f       	subi	r16, 0xF9	; 249
    1490:	1f 4f       	sbci	r17, 0xFF	; 255
    vTaskSuspendAll();
    1492:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <vTaskSuspendAll>
    {
        traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

        pxListItem = listGET_HEAD_ENTRY( pxList );
    1496:	eb 85       	ldd	r30, Y+11	; 0x0b
    1498:	fc 85       	ldd	r31, Y+12	; 0x0c

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;
    149a:	88 81       	ld	r24, Y
    149c:	99 81       	ldd	r25, Y+1	; 0x01
    149e:	aa 81       	ldd	r26, Y+2	; 0x02
    14a0:	bb 81       	ldd	r27, Y+3	; 0x03
    14a2:	c8 2a       	or	r12, r24
    14a4:	d9 2a       	or	r13, r25
    14a6:	ea 2a       	or	r14, r26
    14a8:	fb 2a       	or	r15, r27
    14aa:	c8 82       	st	Y, r12
    14ac:	d9 82       	std	Y+1, r13	; 0x01
    14ae:	ea 82       	std	Y+2, r14	; 0x02
    14b0:	fb 82       	std	Y+3, r15	; 0x03

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
    14b2:	0e 17       	cp	r16, r30
    14b4:	1f 07       	cpc	r17, r31
    14b6:	09 f4       	brne	.+2      	; 0x14ba <xEventGroupSetBits+0x54>
    14b8:	45 c0       	rjmp	.+138    	; 0x1544 <xEventGroupSetBits+0xde>
    14ba:	c1 2c       	mov	r12, r1
    14bc:	d1 2c       	mov	r13, r1
    14be:	76 01       	movw	r14, r12
            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
                {
                    xMatchFound = pdTRUE;
    14c0:	99 24       	eor	r9, r9
    14c2:	93 94       	inc	r9
    14c4:	81 2c       	mov	r8, r1
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
    14c6:	a4 80       	ldd	r10, Z+4	; 0x04
    14c8:	b5 80       	ldd	r11, Z+5	; 0x05
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
    14ca:	80 81       	ld	r24, Z
    14cc:	91 81       	ldd	r25, Z+1	; 0x01
    14ce:	a2 81       	ldd	r26, Z+2	; 0x02
    14d0:	b3 81       	ldd	r27, Z+3	; 0x03
            xMatchFound = pdFALSE;

            /* Split the bits waited for from the control bits. */
            uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
            uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
    14d2:	ac 01       	movw	r20, r24
    14d4:	bd 01       	movw	r22, r26
    14d6:	77 27       	eor	r23, r23

            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
    14d8:	b2 fd       	sbrc	r27, 2
    14da:	0f c0       	rjmp	.+30     	; 0x14fa <xEventGroupSetBits+0x94>
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
                {
                    xMatchFound = pdTRUE;
    14dc:	48 80       	ld	r4, Y
    14de:	59 80       	ldd	r5, Y+1	; 0x01
    14e0:	6a 80       	ldd	r6, Y+2	; 0x02
    14e2:	7b 80       	ldd	r7, Y+3	; 0x03
    14e4:	44 22       	and	r4, r20
    14e6:	55 22       	and	r5, r21
    14e8:	66 22       	and	r6, r22
    14ea:	77 22       	and	r7, r23
    14ec:	29 2d       	mov	r18, r9
    14ee:	45 28       	or	r4, r5
    14f0:	46 28       	or	r4, r6
    14f2:	47 28       	or	r4, r7
    14f4:	89 f4       	brne	.+34     	; 0x1518 <xEventGroupSetBits+0xb2>
    14f6:	28 2d       	mov	r18, r8
    14f8:	0f c0       	rjmp	.+30     	; 0x1518 <xEventGroupSetBits+0xb2>
    14fa:	48 80       	ld	r4, Y
    14fc:	59 80       	ldd	r5, Y+1	; 0x01
    14fe:	6a 80       	ldd	r6, Y+2	; 0x02
    1500:	7b 80       	ldd	r7, Y+3	; 0x03
    1502:	44 22       	and	r4, r20
    1504:	55 22       	and	r5, r21
    1506:	66 22       	and	r6, r22
    1508:	77 22       	and	r7, r23
    150a:	29 2d       	mov	r18, r9
    150c:	44 16       	cp	r4, r20
    150e:	55 06       	cpc	r5, r21
    1510:	66 06       	cpc	r6, r22
    1512:	77 06       	cpc	r7, r23
    1514:	09 f0       	breq	.+2      	; 0x1518 <xEventGroupSetBits+0xb2>
    1516:	28 2d       	mov	r18, r8
            else
            {
                /* Need all bits to be set, but not all the bits were set. */
            }

            if( xMatchFound != pdFALSE )
    1518:	22 23       	and	r18, r18
    151a:	71 f0       	breq	.+28     	; 0x1538 <xEventGroupSetBits+0xd2>
            {
                /* The bits match.  Should the bits be cleared on exit? */
                if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
    151c:	b0 ff       	sbrs	r27, 0
    151e:	04 c0       	rjmp	.+8      	; 0x1528 <xEventGroupSetBits+0xc2>
                {
                    uxBitsToClear |= uxBitsWaitedFor;
    1520:	c4 2a       	or	r12, r20
    1522:	d5 2a       	or	r13, r21
    1524:	e6 2a       	or	r14, r22
    1526:	f7 2a       	or	r15, r23
                /* Store the actual event flag value in the task's event list
                item before removing the task from the event list.  The
                eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                that is was unblocked due to its required bits matching, rather
                than because it timed out. */
                vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
    1528:	48 81       	ld	r20, Y
    152a:	59 81       	ldd	r21, Y+1	; 0x01
    152c:	6a 81       	ldd	r22, Y+2	; 0x02
    152e:	7b 81       	ldd	r23, Y+3	; 0x03
    1530:	72 60       	ori	r23, 0x02	; 2
    1532:	cf 01       	movw	r24, r30
    1534:	0e 94 44 19 	call	0x3288	; 0x3288 <vTaskRemoveFromUnorderedEventList>
    1538:	ea 2d       	mov	r30, r10
    153a:	fb 2d       	mov	r31, r11

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
    153c:	0e 17       	cp	r16, r30
    153e:	1f 07       	cpc	r17, r31
    1540:	11 f6       	brne	.-124    	; 0x14c6 <xEventGroupSetBits+0x60>
    1542:	03 c0       	rjmp	.+6      	; 0x154a <xEventGroupSetBits+0xe4>
EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
    1544:	c1 2c       	mov	r12, r1
    1546:	d1 2c       	mov	r13, r1
    1548:	76 01       	movw	r14, r12
            pxListItem = pxNext;
        }

        /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
        bit was set in the control word. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
    154a:	c0 94       	com	r12
    154c:	d0 94       	com	r13
    154e:	e0 94       	com	r14
    1550:	f0 94       	com	r15
    1552:	88 81       	ld	r24, Y
    1554:	99 81       	ldd	r25, Y+1	; 0x01
    1556:	aa 81       	ldd	r26, Y+2	; 0x02
    1558:	bb 81       	ldd	r27, Y+3	; 0x03
    155a:	c8 22       	and	r12, r24
    155c:	d9 22       	and	r13, r25
    155e:	ea 22       	and	r14, r26
    1560:	fb 22       	and	r15, r27
    1562:	c8 82       	st	Y, r12
    1564:	d9 82       	std	Y+1, r13	; 0x01
    1566:	ea 82       	std	Y+2, r14	; 0x02
    1568:	fb 82       	std	Y+3, r15	; 0x03
    }
    ( void ) xTaskResumeAll();
    156a:	0e 94 93 17 	call	0x2f26	; 0x2f26 <xTaskResumeAll>

    return pxEventBits->uxEventBits;
    156e:	68 81       	ld	r22, Y
    1570:	79 81       	ldd	r23, Y+1	; 0x01
    1572:	8a 81       	ldd	r24, Y+2	; 0x02
    1574:	9b 81       	ldd	r25, Y+3	; 0x03
}
    1576:	df 91       	pop	r29
    1578:	cf 91       	pop	r28
    157a:	1f 91       	pop	r17
    157c:	0f 91       	pop	r16
    157e:	ff 90       	pop	r15
    1580:	ef 90       	pop	r14
    1582:	df 90       	pop	r13
    1584:	cf 90       	pop	r12
    1586:	bf 90       	pop	r11
    1588:	af 90       	pop	r10
    158a:	9f 90       	pop	r9
    158c:	8f 90       	pop	r8
    158e:	7f 90       	pop	r7
    1590:	6f 90       	pop	r6
    1592:	5f 90       	pop	r5
    1594:	4f 90       	pop	r4
    1596:	08 95       	ret

00001598 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
    1598:	cf 93       	push	r28
    159a:	df 93       	push	r29
    159c:	dc 01       	movw	r26, r24
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
    159e:	e5 e9       	ldi	r30, 0x95	; 149
    15a0:	f8 e0       	ldi	r31, 0x08	; 8
    15a2:	01 c0       	rjmp	.+2      	; 0x15a6 <prvInsertBlockIntoFreeList+0xe>
    15a4:	f9 01       	movw	r30, r18
    15a6:	20 81       	ld	r18, Z
    15a8:	31 81       	ldd	r19, Z+1	; 0x01
    15aa:	2a 17       	cp	r18, r26
    15ac:	3b 07       	cpc	r19, r27
    15ae:	d0 f3       	brcs	.-12     	; 0x15a4 <prvInsertBlockIntoFreeList+0xc>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
    15b0:	82 81       	ldd	r24, Z+2	; 0x02
    15b2:	93 81       	ldd	r25, Z+3	; 0x03
    15b4:	af 01       	movw	r20, r30
    15b6:	48 0f       	add	r20, r24
    15b8:	59 1f       	adc	r21, r25
    15ba:	a4 17       	cp	r26, r20
    15bc:	b5 07       	cpc	r27, r21
    15be:	49 f4       	brne	.+18     	; 0x15d2 <prvInsertBlockIntoFreeList+0x3a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
    15c0:	12 96       	adiw	r26, 0x02	; 2
    15c2:	4d 91       	ld	r20, X+
    15c4:	5c 91       	ld	r21, X
    15c6:	13 97       	sbiw	r26, 0x03	; 3
    15c8:	84 0f       	add	r24, r20
    15ca:	95 1f       	adc	r25, r21
    15cc:	93 83       	std	Z+3, r25	; 0x03
    15ce:	82 83       	std	Z+2, r24	; 0x02
    15d0:	df 01       	movw	r26, r30
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
    15d2:	12 96       	adiw	r26, 0x02	; 2
    15d4:	8d 91       	ld	r24, X+
    15d6:	9c 91       	ld	r25, X
    15d8:	13 97       	sbiw	r26, 0x03	; 3
    15da:	ed 01       	movw	r28, r26
    15dc:	c8 0f       	add	r28, r24
    15de:	d9 1f       	adc	r29, r25
    15e0:	2c 17       	cp	r18, r28
    15e2:	3d 07       	cpc	r19, r29
    15e4:	d9 f4       	brne	.+54     	; 0x161c <prvInsertBlockIntoFreeList+0x84>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
    15e6:	20 91 93 08 	lds	r18, 0x0893	; 0x800893 <pxEnd>
    15ea:	30 91 94 08 	lds	r19, 0x0894	; 0x800894 <pxEnd+0x1>
    15ee:	c2 17       	cp	r28, r18
    15f0:	d3 07       	cpc	r29, r19
    15f2:	81 f0       	breq	.+32     	; 0x1614 <prvInsertBlockIntoFreeList+0x7c>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
    15f4:	2a 81       	ldd	r18, Y+2	; 0x02
    15f6:	3b 81       	ldd	r19, Y+3	; 0x03
    15f8:	82 0f       	add	r24, r18
    15fa:	93 1f       	adc	r25, r19
    15fc:	13 96       	adiw	r26, 0x03	; 3
    15fe:	9c 93       	st	X, r25
    1600:	8e 93       	st	-X, r24
    1602:	12 97       	sbiw	r26, 0x02	; 2
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
    1604:	c0 81       	ld	r28, Z
    1606:	d1 81       	ldd	r29, Z+1	; 0x01
    1608:	88 81       	ld	r24, Y
    160a:	99 81       	ldd	r25, Y+1	; 0x01
    160c:	11 96       	adiw	r26, 0x01	; 1
    160e:	9c 93       	st	X, r25
    1610:	8e 93       	st	-X, r24
    1612:	07 c0       	rjmp	.+14     	; 0x1622 <prvInsertBlockIntoFreeList+0x8a>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
    1614:	11 96       	adiw	r26, 0x01	; 1
    1616:	dc 93       	st	X, r29
    1618:	ce 93       	st	-X, r28
    161a:	03 c0       	rjmp	.+6      	; 0x1622 <prvInsertBlockIntoFreeList+0x8a>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
    161c:	11 96       	adiw	r26, 0x01	; 1
    161e:	3c 93       	st	X, r19
    1620:	2e 93       	st	-X, r18

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
    1622:	ae 17       	cp	r26, r30
    1624:	bf 07       	cpc	r27, r31
    1626:	11 f0       	breq	.+4      	; 0x162c <prvInsertBlockIntoFreeList+0x94>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
    1628:	b1 83       	std	Z+1, r27	; 0x01
    162a:	a0 83       	st	Z, r26
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    162c:	df 91       	pop	r29
    162e:	cf 91       	pop	r28
    1630:	08 95       	ret

00001632 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    1632:	cf 92       	push	r12
    1634:	df 92       	push	r13
    1636:	ef 92       	push	r14
    1638:	ff 92       	push	r15
    163a:	0f 93       	push	r16
    163c:	1f 93       	push	r17
    163e:	cf 93       	push	r28
    1640:	df 93       	push	r29
    1642:	ec 01       	movw	r28, r24
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
    1644:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
    1648:	80 91 93 08 	lds	r24, 0x0893	; 0x800893 <pxEnd>
    164c:	90 91 94 08 	lds	r25, 0x0894	; 0x800894 <pxEnd+0x1>
    1650:	89 2b       	or	r24, r25
    1652:	41 f5       	brne	.+80     	; 0x16a4 <pvPortMalloc+0x72>

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
    1654:	e5 e9       	ldi	r30, 0x95	; 149
    1656:	f8 e0       	ldi	r31, 0x08	; 8
    1658:	a9 e9       	ldi	r26, 0x99	; 153
    165a:	b8 e0       	ldi	r27, 0x08	; 8
    165c:	b1 83       	std	Z+1, r27	; 0x01
    165e:	a0 83       	st	Z, r26
	xStart.xBlockSize = ( size_t ) 0;
    1660:	13 82       	std	Z+3, r1	; 0x03
    1662:	12 82       	std	Z+2, r1	; 0x02
	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
	uxAddress -= xHeapStructSize;
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
	pxEnd = ( void * ) uxAddress;
    1664:	e5 e3       	ldi	r30, 0x35	; 53
    1666:	f8 e1       	ldi	r31, 0x18	; 24
    1668:	f0 93 94 08 	sts	0x0894, r31	; 0x800894 <pxEnd+0x1>
    166c:	e0 93 93 08 	sts	0x0893, r30	; 0x800893 <pxEnd>
	pxEnd->xBlockSize = 0;
    1670:	13 82       	std	Z+3, r1	; 0x03
    1672:	12 82       	std	Z+2, r1	; 0x02
	pxEnd->pxNextFreeBlock = NULL;
    1674:	11 82       	std	Z+1, r1	; 0x01
    1676:	10 82       	st	Z, r1

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
    1678:	8c e9       	ldi	r24, 0x9C	; 156
    167a:	9f e0       	ldi	r25, 0x0F	; 15
    167c:	13 96       	adiw	r26, 0x03	; 3
    167e:	9c 93       	st	X, r25
    1680:	8e 93       	st	-X, r24
    1682:	12 97       	sbiw	r26, 0x02	; 2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
    1684:	ed 93       	st	X+, r30
    1686:	fc 93       	st	X, r31

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
    1688:	90 93 90 08 	sts	0x0890, r25	; 0x800890 <xMinimumEverFreeBytesRemaining+0x1>
    168c:	80 93 8f 08 	sts	0x088F, r24	; 0x80088f <xMinimumEverFreeBytesRemaining>
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
    1690:	90 93 92 08 	sts	0x0892, r25	; 0x800892 <xFreeBytesRemaining+0x1>
    1694:	80 93 91 08 	sts	0x0891, r24	; 0x800891 <xFreeBytesRemaining>

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
    1698:	80 e0       	ldi	r24, 0x00	; 0
    169a:	90 e8       	ldi	r25, 0x80	; 128
    169c:	90 93 8e 08 	sts	0x088E, r25	; 0x80088e <xBlockAllocatedBit+0x1>
    16a0:	80 93 8d 08 	sts	0x088D, r24	; 0x80088d <xBlockAllocatedBit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
    16a4:	e0 90 8d 08 	lds	r14, 0x088D	; 0x80088d <xBlockAllocatedBit>
    16a8:	f0 90 8e 08 	lds	r15, 0x088E	; 0x80088e <xBlockAllocatedBit+0x1>
    16ac:	c7 01       	movw	r24, r14
    16ae:	8c 23       	and	r24, r28
    16b0:	9d 23       	and	r25, r29
    16b2:	89 2b       	or	r24, r25
    16b4:	09 f0       	breq	.+2      	; 0x16b8 <pvPortMalloc+0x86>
    16b6:	66 c0       	rjmp	.+204    	; 0x1784 <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
    16b8:	20 97       	sbiw	r28, 0x00	; 0
    16ba:	09 f4       	brne	.+2      	; 0x16be <pvPortMalloc+0x8c>
    16bc:	66 c0       	rjmp	.+204    	; 0x178a <pvPortMalloc+0x158>
			{
				xWantedSize += xHeapStructSize;
    16be:	ae 01       	movw	r20, r28
    16c0:	4c 5f       	subi	r20, 0xFC	; 252
    16c2:	5f 4f       	sbci	r21, 0xFF	; 255
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
    16c4:	09 f4       	brne	.+2      	; 0x16c8 <pvPortMalloc+0x96>
    16c6:	5e c0       	rjmp	.+188    	; 0x1784 <pvPortMalloc+0x152>
    16c8:	00 91 91 08 	lds	r16, 0x0891	; 0x800891 <xFreeBytesRemaining>
    16cc:	10 91 92 08 	lds	r17, 0x0892	; 0x800892 <xFreeBytesRemaining+0x1>
    16d0:	04 17       	cp	r16, r20
    16d2:	15 07       	cpc	r17, r21
    16d4:	08 f4       	brcc	.+2      	; 0x16d8 <pvPortMalloc+0xa6>
    16d6:	56 c0       	rjmp	.+172    	; 0x1784 <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
    16d8:	c0 91 95 08 	lds	r28, 0x0895	; 0x800895 <xStart>
    16dc:	d0 91 96 08 	lds	r29, 0x0896	; 0x800896 <xStart+0x1>

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
    16e0:	e5 e9       	ldi	r30, 0x95	; 149
    16e2:	f8 e0       	ldi	r31, 0x08	; 8
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    16e4:	02 c0       	rjmp	.+4      	; 0x16ea <pvPortMalloc+0xb8>
    16e6:	fe 01       	movw	r30, r28
				{
					pxPreviousBlock = pxBlock;
					pxBlock = pxBlock->pxNextFreeBlock;
    16e8:	e9 01       	movw	r28, r18
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    16ea:	2a 81       	ldd	r18, Y+2	; 0x02
    16ec:	3b 81       	ldd	r19, Y+3	; 0x03
    16ee:	24 17       	cp	r18, r20
    16f0:	35 07       	cpc	r19, r21
    16f2:	28 f4       	brcc	.+10     	; 0x16fe <pvPortMalloc+0xcc>
    16f4:	28 81       	ld	r18, Y
    16f6:	39 81       	ldd	r19, Y+1	; 0x01
    16f8:	21 15       	cp	r18, r1
    16fa:	31 05       	cpc	r19, r1
    16fc:	a1 f7       	brne	.-24     	; 0x16e6 <pvPortMalloc+0xb4>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
    16fe:	80 91 93 08 	lds	r24, 0x0893	; 0x800893 <pxEnd>
    1702:	90 91 94 08 	lds	r25, 0x0894	; 0x800894 <pxEnd+0x1>
    1706:	c8 17       	cp	r28, r24
    1708:	d9 07       	cpc	r29, r25
    170a:	e1 f1       	breq	.+120    	; 0x1784 <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
    170c:	c0 80       	ld	r12, Z
    170e:	d1 80       	ldd	r13, Z+1	; 0x01
    1710:	84 e0       	ldi	r24, 0x04	; 4
    1712:	c8 0e       	add	r12, r24
    1714:	d1 1c       	adc	r13, r1

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    1716:	88 81       	ld	r24, Y
    1718:	99 81       	ldd	r25, Y+1	; 0x01
    171a:	91 83       	std	Z+1, r25	; 0x01
    171c:	80 83       	st	Z, r24

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    171e:	2a 81       	ldd	r18, Y+2	; 0x02
    1720:	3b 81       	ldd	r19, Y+3	; 0x03
    1722:	24 1b       	sub	r18, r20
    1724:	35 0b       	sbc	r19, r21
    1726:	29 30       	cpi	r18, 0x09	; 9
    1728:	31 05       	cpc	r19, r1
    172a:	48 f0       	brcs	.+18     	; 0x173e <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
    172c:	ce 01       	movw	r24, r28
    172e:	84 0f       	add	r24, r20
    1730:	95 1f       	adc	r25, r21
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    1732:	fc 01       	movw	r30, r24
    1734:	33 83       	std	Z+3, r19	; 0x03
    1736:	22 83       	std	Z+2, r18	; 0x02
						pxBlock->xBlockSize = xWantedSize;
    1738:	5b 83       	std	Y+3, r21	; 0x03
    173a:	4a 83       	std	Y+2, r20	; 0x02

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
    173c:	2d df       	rcall	.-422    	; 0x1598 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
    173e:	8a 81       	ldd	r24, Y+2	; 0x02
    1740:	9b 81       	ldd	r25, Y+3	; 0x03
    1742:	08 1b       	sub	r16, r24
    1744:	19 0b       	sbc	r17, r25
    1746:	10 93 92 08 	sts	0x0892, r17	; 0x800892 <xFreeBytesRemaining+0x1>
    174a:	00 93 91 08 	sts	0x0891, r16	; 0x800891 <xFreeBytesRemaining>

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
    174e:	20 91 8f 08 	lds	r18, 0x088F	; 0x80088f <xMinimumEverFreeBytesRemaining>
    1752:	30 91 90 08 	lds	r19, 0x0890	; 0x800890 <xMinimumEverFreeBytesRemaining+0x1>
    1756:	02 17       	cp	r16, r18
    1758:	13 07       	cpc	r17, r19
    175a:	20 f4       	brcc	.+8      	; 0x1764 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
    175c:	10 93 90 08 	sts	0x0890, r17	; 0x800890 <xMinimumEverFreeBytesRemaining+0x1>
    1760:	00 93 8f 08 	sts	0x088F, r16	; 0x80088f <xMinimumEverFreeBytesRemaining>
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
    1764:	e8 2a       	or	r14, r24
    1766:	f9 2a       	or	r15, r25
    1768:	fb 82       	std	Y+3, r15	; 0x03
    176a:	ea 82       	std	Y+2, r14	; 0x02
					pxBlock->pxNextFreeBlock = NULL;
    176c:	19 82       	std	Y+1, r1	; 0x01
    176e:	18 82       	st	Y, r1
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    1770:	0e 94 93 17 	call	0x2f26	; 0x2f26 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
    1774:	c1 14       	cp	r12, r1
    1776:	d1 04       	cpc	r13, r1
    1778:	59 f4       	brne	.+22     	; 0x1790 <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
    177a:	0e 94 68 1e 	call	0x3cd0	; 0x3cd0 <vApplicationMallocFailedHook>
    177e:	c1 2c       	mov	r12, r1
    1780:	d1 2c       	mov	r13, r1
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
    1782:	06 c0       	rjmp	.+12     	; 0x1790 <pvPortMalloc+0x15e>
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    1784:	0e 94 93 17 	call	0x2f26	; 0x2f26 <xTaskResumeAll>
    1788:	f8 cf       	rjmp	.-16     	; 0x177a <pvPortMalloc+0x148>
    178a:	0e 94 93 17 	call	0x2f26	; 0x2f26 <xTaskResumeAll>
    178e:	f5 cf       	rjmp	.-22     	; 0x177a <pvPortMalloc+0x148>
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
}
    1790:	c6 01       	movw	r24, r12
    1792:	df 91       	pop	r29
    1794:	cf 91       	pop	r28
    1796:	1f 91       	pop	r17
    1798:	0f 91       	pop	r16
    179a:	ff 90       	pop	r15
    179c:	ef 90       	pop	r14
    179e:	df 90       	pop	r13
    17a0:	cf 90       	pop	r12
    17a2:	08 95       	ret

000017a4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    17a4:	cf 93       	push	r28
    17a6:	df 93       	push	r29
uint8_t *puc = ( uint8_t * ) pv;
BlockLink_t *pxLink;

	if( pv != NULL )
    17a8:	00 97       	sbiw	r24, 0x00	; 0
    17aa:	51 f1       	breq	.+84     	; 0x1800 <vPortFree+0x5c>

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
		configASSERT( pxLink->pxNextFreeBlock == NULL );

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
    17ac:	fc 01       	movw	r30, r24
    17ae:	34 97       	sbiw	r30, 0x04	; 4
    17b0:	22 81       	ldd	r18, Z+2	; 0x02
    17b2:	33 81       	ldd	r19, Z+3	; 0x03
    17b4:	40 91 8d 08 	lds	r20, 0x088D	; 0x80088d <xBlockAllocatedBit>
    17b8:	50 91 8e 08 	lds	r21, 0x088E	; 0x80088e <xBlockAllocatedBit+0x1>
    17bc:	b9 01       	movw	r22, r18
    17be:	64 23       	and	r22, r20
    17c0:	75 23       	and	r23, r21
    17c2:	67 2b       	or	r22, r23
    17c4:	e9 f0       	breq	.+58     	; 0x1800 <vPortFree+0x5c>
		{
			if( pxLink->pxNextFreeBlock == NULL )
    17c6:	60 81       	ld	r22, Z
    17c8:	71 81       	ldd	r23, Z+1	; 0x01
    17ca:	67 2b       	or	r22, r23
    17cc:	c9 f4       	brne	.+50     	; 0x1800 <vPortFree+0x5c>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
    17ce:	ef 01       	movw	r28, r30
    17d0:	40 95       	com	r20
    17d2:	50 95       	com	r21
    17d4:	24 23       	and	r18, r20
    17d6:	35 23       	and	r19, r21
    17d8:	33 83       	std	Z+3, r19	; 0x03
    17da:	22 83       	std	Z+2, r18	; 0x02

				vTaskSuspendAll();
    17dc:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
    17e0:	20 91 91 08 	lds	r18, 0x0891	; 0x800891 <xFreeBytesRemaining>
    17e4:	30 91 92 08 	lds	r19, 0x0892	; 0x800892 <xFreeBytesRemaining+0x1>
    17e8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ea:	9b 81       	ldd	r25, Y+3	; 0x03
    17ec:	82 0f       	add	r24, r18
    17ee:	93 1f       	adc	r25, r19
    17f0:	90 93 92 08 	sts	0x0892, r25	; 0x800892 <xFreeBytesRemaining+0x1>
    17f4:	80 93 91 08 	sts	0x0891, r24	; 0x800891 <xFreeBytesRemaining>
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
    17f8:	ce 01       	movw	r24, r28
    17fa:	ce de       	rcall	.-612    	; 0x1598 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
    17fc:	0e 94 93 17 	call	0x2f26	; 0x2f26 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
    1800:	df 91       	pop	r29
    1802:	cf 91       	pop	r28
    1804:	08 95       	ret

00001806 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    1806:	fc 01       	movw	r30, r24
    /* The list structure contains a list item which is used to mark the
    end of the list.  To initialise the list the list end is inserted
    as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );            /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1808:	03 96       	adiw	r24, 0x03	; 3
    180a:	92 83       	std	Z+2, r25	; 0x02
    180c:	81 83       	std	Z+1, r24	; 0x01

    /* The list end value is the highest possible value in the list to
    ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
    180e:	4f ef       	ldi	r20, 0xFF	; 255
    1810:	5f ef       	ldi	r21, 0xFF	; 255
    1812:	ba 01       	movw	r22, r20
    1814:	43 83       	std	Z+3, r20	; 0x03
    1816:	54 83       	std	Z+4, r21	; 0x04
    1818:	65 83       	std	Z+5, r22	; 0x05
    181a:	76 83       	std	Z+6, r23	; 0x06

    /* The list end next and previous pointers point to itself so we know
    when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );    /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    181c:	90 87       	std	Z+8, r25	; 0x08
    181e:	87 83       	std	Z+7, r24	; 0x07
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1820:	92 87       	std	Z+10, r25	; 0x0a
    1822:	81 87       	std	Z+9, r24	; 0x09

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    1824:	10 82       	st	Z, r1
    1826:	08 95       	ret

00001828 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
    1828:	fc 01       	movw	r30, r24
    182a:	13 86       	std	Z+11, r1	; 0x0b
    182c:	12 86       	std	Z+10, r1	; 0x0a
    182e:	08 95       	ret

00001830 <vListInsertEnd>:
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    1830:	cf 93       	push	r28
    1832:	df 93       	push	r29
    1834:	9c 01       	movw	r18, r24
    1836:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
    1838:	dc 01       	movw	r26, r24
    183a:	11 96       	adiw	r26, 0x01	; 1
    183c:	cd 91       	ld	r28, X+
    183e:	dc 91       	ld	r29, X
    1840:	12 97       	sbiw	r26, 0x02	; 2
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
    makes the new list item the last item to be removed by a call to
    listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
    1842:	d5 83       	std	Z+5, r29	; 0x05
    1844:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    1846:	8e 81       	ldd	r24, Y+6	; 0x06
    1848:	9f 81       	ldd	r25, Y+7	; 0x07
    184a:	97 83       	std	Z+7, r25	; 0x07
    184c:	86 83       	std	Z+6, r24	; 0x06

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
    184e:	8e 81       	ldd	r24, Y+6	; 0x06
    1850:	9f 81       	ldd	r25, Y+7	; 0x07
    1852:	dc 01       	movw	r26, r24
    1854:	15 96       	adiw	r26, 0x05	; 5
    1856:	7c 93       	st	X, r23
    1858:	6e 93       	st	-X, r22
    185a:	14 97       	sbiw	r26, 0x04	; 4
    pxIndex->pxPrevious = pxNewListItem;
    185c:	7f 83       	std	Y+7, r23	; 0x07
    185e:	6e 83       	std	Y+6, r22	; 0x06

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
    1860:	33 87       	std	Z+11, r19	; 0x0b
    1862:	22 87       	std	Z+10, r18	; 0x0a

    ( pxList->uxNumberOfItems )++;
    1864:	f9 01       	movw	r30, r18
    1866:	80 81       	ld	r24, Z
    1868:	8f 5f       	subi	r24, 0xFF	; 255
    186a:	80 83       	st	Z, r24
}
    186c:	df 91       	pop	r29
    186e:	cf 91       	pop	r28
    1870:	08 95       	ret

00001872 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    1872:	0f 93       	push	r16
    1874:	1f 93       	push	r17
    1876:	cf 93       	push	r28
    1878:	df 93       	push	r29
    187a:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    187c:	08 81       	ld	r16, Y
    187e:	19 81       	ldd	r17, Y+1	; 0x01
    1880:	2a 81       	ldd	r18, Y+2	; 0x02
    1882:	3b 81       	ldd	r19, Y+3	; 0x03
    new list item should be placed after it.  This ensures that TCBs which are
    stored in ready lists (all of which have the same xItemValue value) get a
    share of the CPU.  However, if the xItemValue is the same as the back marker
    the iteration loop below will not end.  Therefore the value is checked
    first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
    1884:	0f 3f       	cpi	r16, 0xFF	; 255
    1886:	4f ef       	ldi	r20, 0xFF	; 255
    1888:	14 07       	cpc	r17, r20
    188a:	24 07       	cpc	r18, r20
    188c:	34 07       	cpc	r19, r20
    188e:	21 f4       	brne	.+8      	; 0x1898 <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
    1890:	fc 01       	movw	r30, r24
    1892:	a1 85       	ldd	r26, Z+9	; 0x09
    1894:	b2 85       	ldd	r27, Z+10	; 0x0a
    1896:	11 c0       	rjmp	.+34     	; 0x18ba <vListInsert+0x48>
            4) Using a queue or semaphore before it has been initialised or
               before the scheduler has been started (are interrupts firing
               before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
    1898:	dc 01       	movw	r26, r24
    189a:	13 96       	adiw	r26, 0x03	; 3
    189c:	01 c0       	rjmp	.+2      	; 0x18a0 <vListInsert+0x2e>
    189e:	df 01       	movw	r26, r30
    18a0:	14 96       	adiw	r26, 0x04	; 4
    18a2:	ed 91       	ld	r30, X+
    18a4:	fc 91       	ld	r31, X
    18a6:	15 97       	sbiw	r26, 0x05	; 5
    18a8:	40 81       	ld	r20, Z
    18aa:	51 81       	ldd	r21, Z+1	; 0x01
    18ac:	62 81       	ldd	r22, Z+2	; 0x02
    18ae:	73 81       	ldd	r23, Z+3	; 0x03
    18b0:	04 17       	cp	r16, r20
    18b2:	15 07       	cpc	r17, r21
    18b4:	26 07       	cpc	r18, r22
    18b6:	37 07       	cpc	r19, r23
    18b8:	90 f7       	brcc	.-28     	; 0x189e <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
            insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
    18ba:	14 96       	adiw	r26, 0x04	; 4
    18bc:	ed 91       	ld	r30, X+
    18be:	fc 91       	ld	r31, X
    18c0:	15 97       	sbiw	r26, 0x05	; 5
    18c2:	fd 83       	std	Y+5, r31	; 0x05
    18c4:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    18c6:	d7 83       	std	Z+7, r29	; 0x07
    18c8:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
    18ca:	bf 83       	std	Y+7, r27	; 0x07
    18cc:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
    18ce:	15 96       	adiw	r26, 0x05	; 5
    18d0:	dc 93       	st	X, r29
    18d2:	ce 93       	st	-X, r28
    18d4:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
    item later. */
    pxNewListItem->pxContainer = pxList;
    18d6:	9b 87       	std	Y+11, r25	; 0x0b
    18d8:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
    18da:	fc 01       	movw	r30, r24
    18dc:	20 81       	ld	r18, Z
    18de:	2f 5f       	subi	r18, 0xFF	; 255
    18e0:	20 83       	st	Z, r18
}
    18e2:	df 91       	pop	r29
    18e4:	cf 91       	pop	r28
    18e6:	1f 91       	pop	r17
    18e8:	0f 91       	pop	r16
    18ea:	08 95       	ret

000018ec <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    18ec:	cf 93       	push	r28
    18ee:	df 93       	push	r29
    18f0:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
    18f2:	a2 85       	ldd	r26, Z+10	; 0x0a
    18f4:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    18f6:	c4 81       	ldd	r28, Z+4	; 0x04
    18f8:	d5 81       	ldd	r29, Z+5	; 0x05
    18fa:	86 81       	ldd	r24, Z+6	; 0x06
    18fc:	97 81       	ldd	r25, Z+7	; 0x07
    18fe:	9f 83       	std	Y+7, r25	; 0x07
    1900:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    1902:	c6 81       	ldd	r28, Z+6	; 0x06
    1904:	d7 81       	ldd	r29, Z+7	; 0x07
    1906:	84 81       	ldd	r24, Z+4	; 0x04
    1908:	95 81       	ldd	r25, Z+5	; 0x05
    190a:	9d 83       	std	Y+5, r25	; 0x05
    190c:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
    190e:	11 96       	adiw	r26, 0x01	; 1
    1910:	8d 91       	ld	r24, X+
    1912:	9c 91       	ld	r25, X
    1914:	12 97       	sbiw	r26, 0x02	; 2
    1916:	e8 17       	cp	r30, r24
    1918:	f9 07       	cpc	r31, r25
    191a:	31 f4       	brne	.+12     	; 0x1928 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
    191c:	86 81       	ldd	r24, Z+6	; 0x06
    191e:	97 81       	ldd	r25, Z+7	; 0x07
    1920:	12 96       	adiw	r26, 0x02	; 2
    1922:	9c 93       	st	X, r25
    1924:	8e 93       	st	-X, r24
    1926:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
    1928:	13 86       	std	Z+11, r1	; 0x0b
    192a:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
    192c:	8c 91       	ld	r24, X
    192e:	81 50       	subi	r24, 0x01	; 1
    1930:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
    1932:	8c 91       	ld	r24, X
}
    1934:	df 91       	pop	r29
    1936:	cf 91       	pop	r28
    1938:	08 95       	ret

0000193a <pxPortInitialiseStack>:
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    193a:	31 e1       	ldi	r19, 0x11	; 17
    193c:	fc 01       	movw	r30, r24
    193e:	30 83       	st	Z, r19
    1940:	31 97       	sbiw	r30, 0x01	; 1
    1942:	22 e2       	ldi	r18, 0x22	; 34
    1944:	20 83       	st	Z, r18
    1946:	31 97       	sbiw	r30, 0x01	; 1
    1948:	a3 e3       	ldi	r26, 0x33	; 51
    194a:	a0 83       	st	Z, r26
    194c:	31 97       	sbiw	r30, 0x01	; 1
    194e:	60 83       	st	Z, r22
    1950:	31 97       	sbiw	r30, 0x01	; 1
    1952:	70 83       	st	Z, r23
    1954:	31 97       	sbiw	r30, 0x01	; 1
    1956:	10 82       	st	Z, r1
    1958:	31 97       	sbiw	r30, 0x01	; 1
    195a:	10 82       	st	Z, r1
    195c:	31 97       	sbiw	r30, 0x01	; 1
    195e:	60 e8       	ldi	r22, 0x80	; 128
    1960:	60 83       	st	Z, r22
    1962:	31 97       	sbiw	r30, 0x01	; 1
    1964:	10 82       	st	Z, r1
    1966:	31 97       	sbiw	r30, 0x01	; 1
    1968:	10 82       	st	Z, r1
    196a:	31 97       	sbiw	r30, 0x01	; 1
    196c:	10 82       	st	Z, r1
    196e:	31 97       	sbiw	r30, 0x01	; 1
    1970:	62 e0       	ldi	r22, 0x02	; 2
    1972:	60 83       	st	Z, r22
    1974:	31 97       	sbiw	r30, 0x01	; 1
    1976:	63 e0       	ldi	r22, 0x03	; 3
    1978:	60 83       	st	Z, r22
    197a:	31 97       	sbiw	r30, 0x01	; 1
    197c:	64 e0       	ldi	r22, 0x04	; 4
    197e:	60 83       	st	Z, r22
    1980:	31 97       	sbiw	r30, 0x01	; 1
    1982:	65 e0       	ldi	r22, 0x05	; 5
    1984:	60 83       	st	Z, r22
    1986:	31 97       	sbiw	r30, 0x01	; 1
    1988:	66 e0       	ldi	r22, 0x06	; 6
    198a:	60 83       	st	Z, r22
    198c:	31 97       	sbiw	r30, 0x01	; 1
    198e:	67 e0       	ldi	r22, 0x07	; 7
    1990:	60 83       	st	Z, r22
    1992:	31 97       	sbiw	r30, 0x01	; 1
    1994:	68 e0       	ldi	r22, 0x08	; 8
    1996:	60 83       	st	Z, r22
    1998:	31 97       	sbiw	r30, 0x01	; 1
    199a:	69 e0       	ldi	r22, 0x09	; 9
    199c:	60 83       	st	Z, r22
    199e:	31 97       	sbiw	r30, 0x01	; 1
    19a0:	60 e1       	ldi	r22, 0x10	; 16
    19a2:	60 83       	st	Z, r22
    19a4:	31 97       	sbiw	r30, 0x01	; 1
    19a6:	30 83       	st	Z, r19
    19a8:	31 97       	sbiw	r30, 0x01	; 1
    19aa:	32 e1       	ldi	r19, 0x12	; 18
    19ac:	30 83       	st	Z, r19
    19ae:	31 97       	sbiw	r30, 0x01	; 1
    19b0:	33 e1       	ldi	r19, 0x13	; 19
    19b2:	30 83       	st	Z, r19
    19b4:	31 97       	sbiw	r30, 0x01	; 1
    19b6:	34 e1       	ldi	r19, 0x14	; 20
    19b8:	30 83       	st	Z, r19
    19ba:	31 97       	sbiw	r30, 0x01	; 1
    19bc:	35 e1       	ldi	r19, 0x15	; 21
    19be:	30 83       	st	Z, r19
    19c0:	31 97       	sbiw	r30, 0x01	; 1
    19c2:	36 e1       	ldi	r19, 0x16	; 22
    19c4:	30 83       	st	Z, r19
    19c6:	31 97       	sbiw	r30, 0x01	; 1
    19c8:	37 e1       	ldi	r19, 0x17	; 23
    19ca:	30 83       	st	Z, r19
    19cc:	31 97       	sbiw	r30, 0x01	; 1
    19ce:	38 e1       	ldi	r19, 0x18	; 24
    19d0:	30 83       	st	Z, r19
    19d2:	31 97       	sbiw	r30, 0x01	; 1
    19d4:	39 e1       	ldi	r19, 0x19	; 25
    19d6:	30 83       	st	Z, r19
    19d8:	31 97       	sbiw	r30, 0x01	; 1
    19da:	30 e2       	ldi	r19, 0x20	; 32
    19dc:	30 83       	st	Z, r19
    19de:	31 97       	sbiw	r30, 0x01	; 1
    19e0:	31 e2       	ldi	r19, 0x21	; 33
    19e2:	30 83       	st	Z, r19
    19e4:	31 97       	sbiw	r30, 0x01	; 1
    19e6:	20 83       	st	Z, r18
    19e8:	31 97       	sbiw	r30, 0x01	; 1
    19ea:	23 e2       	ldi	r18, 0x23	; 35
    19ec:	20 83       	st	Z, r18
    19ee:	31 97       	sbiw	r30, 0x01	; 1
    19f0:	40 83       	st	Z, r20
    19f2:	31 97       	sbiw	r30, 0x01	; 1
    19f4:	50 83       	st	Z, r21
    19f6:	31 97       	sbiw	r30, 0x01	; 1
    19f8:	26 e2       	ldi	r18, 0x26	; 38
    19fa:	20 83       	st	Z, r18
    19fc:	31 97       	sbiw	r30, 0x01	; 1
    19fe:	27 e2       	ldi	r18, 0x27	; 39
    1a00:	20 83       	st	Z, r18
    1a02:	31 97       	sbiw	r30, 0x01	; 1
    1a04:	28 e2       	ldi	r18, 0x28	; 40
    1a06:	20 83       	st	Z, r18
    1a08:	31 97       	sbiw	r30, 0x01	; 1
    1a0a:	29 e2       	ldi	r18, 0x29	; 41
    1a0c:	20 83       	st	Z, r18
    1a0e:	31 97       	sbiw	r30, 0x01	; 1
    1a10:	20 e3       	ldi	r18, 0x30	; 48
    1a12:	20 83       	st	Z, r18
    1a14:	31 97       	sbiw	r30, 0x01	; 1
    1a16:	21 e3       	ldi	r18, 0x31	; 49
    1a18:	20 83       	st	Z, r18
    1a1a:	89 97       	sbiw	r24, 0x29	; 41
    1a1c:	08 95       	ret

00001a1e <xPortStartScheduler>:
    1a1e:	a8 95       	wdr
    1a20:	90 ec       	ldi	r25, 0xC0	; 192
    1a22:	88 e1       	ldi	r24, 0x18	; 24
    1a24:	0f b6       	in	r0, 0x3f	; 63
    1a26:	f8 94       	cli
    1a28:	a8 95       	wdr
    1a2a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    1a2e:	0f be       	out	0x3f, r0	; 63
    1a30:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    1a34:	a0 91 c9 18 	lds	r26, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    1a38:	b0 91 ca 18 	lds	r27, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    1a3c:	cd 91       	ld	r28, X+
    1a3e:	cd bf       	out	0x3d, r28	; 61
    1a40:	dd 91       	ld	r29, X+
    1a42:	de bf       	out	0x3e, r29	; 62
    1a44:	ff 91       	pop	r31
    1a46:	ef 91       	pop	r30
    1a48:	df 91       	pop	r29
    1a4a:	cf 91       	pop	r28
    1a4c:	bf 91       	pop	r27
    1a4e:	af 91       	pop	r26
    1a50:	9f 91       	pop	r25
    1a52:	8f 91       	pop	r24
    1a54:	7f 91       	pop	r23
    1a56:	6f 91       	pop	r22
    1a58:	5f 91       	pop	r21
    1a5a:	4f 91       	pop	r20
    1a5c:	3f 91       	pop	r19
    1a5e:	2f 91       	pop	r18
    1a60:	1f 91       	pop	r17
    1a62:	0f 91       	pop	r16
    1a64:	ff 90       	pop	r15
    1a66:	ef 90       	pop	r14
    1a68:	df 90       	pop	r13
    1a6a:	cf 90       	pop	r12
    1a6c:	bf 90       	pop	r11
    1a6e:	af 90       	pop	r10
    1a70:	9f 90       	pop	r9
    1a72:	8f 90       	pop	r8
    1a74:	7f 90       	pop	r7
    1a76:	6f 90       	pop	r6
    1a78:	5f 90       	pop	r5
    1a7a:	4f 90       	pop	r4
    1a7c:	3f 90       	pop	r3
    1a7e:	2f 90       	pop	r2
    1a80:	1f 90       	pop	r1
    1a82:	0f 90       	pop	r0
    1a84:	0c be       	out	0x3c, r0	; 60
    1a86:	0f 90       	pop	r0
    1a88:	0b be       	out	0x3b, r0	; 59
    1a8a:	0f 90       	pop	r0
    1a8c:	0f be       	out	0x3f, r0	; 63
    1a8e:	0f 90       	pop	r0
    1a90:	08 95       	ret
    1a92:	81 e0       	ldi	r24, 0x01	; 1
    1a94:	08 95       	ret

00001a96 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYield( void )
{
    portSAVE_CONTEXT();
    1a96:	0f 92       	push	r0
    1a98:	0f b6       	in	r0, 0x3f	; 63
    1a9a:	f8 94       	cli
    1a9c:	0f 92       	push	r0
    1a9e:	0b b6       	in	r0, 0x3b	; 59
    1aa0:	0f 92       	push	r0
    1aa2:	0c b6       	in	r0, 0x3c	; 60
    1aa4:	0f 92       	push	r0
    1aa6:	1f 92       	push	r1
    1aa8:	11 24       	eor	r1, r1
    1aaa:	2f 92       	push	r2
    1aac:	3f 92       	push	r3
    1aae:	4f 92       	push	r4
    1ab0:	5f 92       	push	r5
    1ab2:	6f 92       	push	r6
    1ab4:	7f 92       	push	r7
    1ab6:	8f 92       	push	r8
    1ab8:	9f 92       	push	r9
    1aba:	af 92       	push	r10
    1abc:	bf 92       	push	r11
    1abe:	cf 92       	push	r12
    1ac0:	df 92       	push	r13
    1ac2:	ef 92       	push	r14
    1ac4:	ff 92       	push	r15
    1ac6:	0f 93       	push	r16
    1ac8:	1f 93       	push	r17
    1aca:	2f 93       	push	r18
    1acc:	3f 93       	push	r19
    1ace:	4f 93       	push	r20
    1ad0:	5f 93       	push	r21
    1ad2:	6f 93       	push	r22
    1ad4:	7f 93       	push	r23
    1ad6:	8f 93       	push	r24
    1ad8:	9f 93       	push	r25
    1ada:	af 93       	push	r26
    1adc:	bf 93       	push	r27
    1ade:	cf 93       	push	r28
    1ae0:	df 93       	push	r29
    1ae2:	ef 93       	push	r30
    1ae4:	ff 93       	push	r31
    1ae6:	a0 91 c9 18 	lds	r26, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    1aea:	b0 91 ca 18 	lds	r27, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    1aee:	0d b6       	in	r0, 0x3d	; 61
    1af0:	0d 92       	st	X+, r0
    1af2:	0e b6       	in	r0, 0x3e	; 62
    1af4:	0d 92       	st	X+, r0
    vTaskSwitchContext();
    1af6:	0e 94 28 18 	call	0x3050	; 0x3050 <vTaskSwitchContext>
    portRESTORE_CONTEXT();
    1afa:	a0 91 c9 18 	lds	r26, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    1afe:	b0 91 ca 18 	lds	r27, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    1b02:	cd 91       	ld	r28, X+
    1b04:	cd bf       	out	0x3d, r28	; 61
    1b06:	dd 91       	ld	r29, X+
    1b08:	de bf       	out	0x3e, r29	; 62
    1b0a:	ff 91       	pop	r31
    1b0c:	ef 91       	pop	r30
    1b0e:	df 91       	pop	r29
    1b10:	cf 91       	pop	r28
    1b12:	bf 91       	pop	r27
    1b14:	af 91       	pop	r26
    1b16:	9f 91       	pop	r25
    1b18:	8f 91       	pop	r24
    1b1a:	7f 91       	pop	r23
    1b1c:	6f 91       	pop	r22
    1b1e:	5f 91       	pop	r21
    1b20:	4f 91       	pop	r20
    1b22:	3f 91       	pop	r19
    1b24:	2f 91       	pop	r18
    1b26:	1f 91       	pop	r17
    1b28:	0f 91       	pop	r16
    1b2a:	ff 90       	pop	r15
    1b2c:	ef 90       	pop	r14
    1b2e:	df 90       	pop	r13
    1b30:	cf 90       	pop	r12
    1b32:	bf 90       	pop	r11
    1b34:	af 90       	pop	r10
    1b36:	9f 90       	pop	r9
    1b38:	8f 90       	pop	r8
    1b3a:	7f 90       	pop	r7
    1b3c:	6f 90       	pop	r6
    1b3e:	5f 90       	pop	r5
    1b40:	4f 90       	pop	r4
    1b42:	3f 90       	pop	r3
    1b44:	2f 90       	pop	r2
    1b46:	1f 90       	pop	r1
    1b48:	0f 90       	pop	r0
    1b4a:	0c be       	out	0x3c, r0	; 60
    1b4c:	0f 90       	pop	r0
    1b4e:	0b be       	out	0x3b, r0	; 59
    1b50:	0f 90       	pop	r0
    1b52:	0f be       	out	0x3f, r0	; 63
    1b54:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
    1b56:	08 95       	ret

00001b58 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
    1b58:	0f 92       	push	r0
    1b5a:	0f b6       	in	r0, 0x3f	; 63
    1b5c:	f8 94       	cli
    1b5e:	0f 92       	push	r0
    1b60:	0b b6       	in	r0, 0x3b	; 59
    1b62:	0f 92       	push	r0
    1b64:	0c b6       	in	r0, 0x3c	; 60
    1b66:	0f 92       	push	r0
    1b68:	1f 92       	push	r1
    1b6a:	11 24       	eor	r1, r1
    1b6c:	2f 92       	push	r2
    1b6e:	3f 92       	push	r3
    1b70:	4f 92       	push	r4
    1b72:	5f 92       	push	r5
    1b74:	6f 92       	push	r6
    1b76:	7f 92       	push	r7
    1b78:	8f 92       	push	r8
    1b7a:	9f 92       	push	r9
    1b7c:	af 92       	push	r10
    1b7e:	bf 92       	push	r11
    1b80:	cf 92       	push	r12
    1b82:	df 92       	push	r13
    1b84:	ef 92       	push	r14
    1b86:	ff 92       	push	r15
    1b88:	0f 93       	push	r16
    1b8a:	1f 93       	push	r17
    1b8c:	2f 93       	push	r18
    1b8e:	3f 93       	push	r19
    1b90:	4f 93       	push	r20
    1b92:	5f 93       	push	r21
    1b94:	6f 93       	push	r22
    1b96:	7f 93       	push	r23
    1b98:	8f 93       	push	r24
    1b9a:	9f 93       	push	r25
    1b9c:	af 93       	push	r26
    1b9e:	bf 93       	push	r27
    1ba0:	cf 93       	push	r28
    1ba2:	df 93       	push	r29
    1ba4:	ef 93       	push	r30
    1ba6:	ff 93       	push	r31
    1ba8:	a0 91 c9 18 	lds	r26, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    1bac:	b0 91 ca 18 	lds	r27, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    1bb0:	0d b6       	in	r0, 0x3d	; 61
    1bb2:	0d 92       	st	X+, r0
    1bb4:	0e b6       	in	r0, 0x3e	; 62
    1bb6:	0d 92       	st	X+, r0

    sleep_reset();        //     reset the sleep_mode() faster than sleep_disable();
    1bb8:	13 be       	out	0x33, r1	; 51

    if( xTaskIncrementTick() != pdFALSE )
    1bba:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <xTaskIncrementTick>
    1bbe:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
    1bc0:	0e 94 28 18 	call	0x3050	; 0x3050 <vTaskSwitchContext>
    }

    portRESTORE_CONTEXT();
    1bc4:	a0 91 c9 18 	lds	r26, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    1bc8:	b0 91 ca 18 	lds	r27, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    1bcc:	cd 91       	ld	r28, X+
    1bce:	cd bf       	out	0x3d, r28	; 61
    1bd0:	dd 91       	ld	r29, X+
    1bd2:	de bf       	out	0x3e, r29	; 62
    1bd4:	ff 91       	pop	r31
    1bd6:	ef 91       	pop	r30
    1bd8:	df 91       	pop	r29
    1bda:	cf 91       	pop	r28
    1bdc:	bf 91       	pop	r27
    1bde:	af 91       	pop	r26
    1be0:	9f 91       	pop	r25
    1be2:	8f 91       	pop	r24
    1be4:	7f 91       	pop	r23
    1be6:	6f 91       	pop	r22
    1be8:	5f 91       	pop	r21
    1bea:	4f 91       	pop	r20
    1bec:	3f 91       	pop	r19
    1bee:	2f 91       	pop	r18
    1bf0:	1f 91       	pop	r17
    1bf2:	0f 91       	pop	r16
    1bf4:	ff 90       	pop	r15
    1bf6:	ef 90       	pop	r14
    1bf8:	df 90       	pop	r13
    1bfa:	cf 90       	pop	r12
    1bfc:	bf 90       	pop	r11
    1bfe:	af 90       	pop	r10
    1c00:	9f 90       	pop	r9
    1c02:	8f 90       	pop	r8
    1c04:	7f 90       	pop	r7
    1c06:	6f 90       	pop	r6
    1c08:	5f 90       	pop	r5
    1c0a:	4f 90       	pop	r4
    1c0c:	3f 90       	pop	r3
    1c0e:	2f 90       	pop	r2
    1c10:	1f 90       	pop	r1
    1c12:	0f 90       	pop	r0
    1c14:	0c be       	out	0x3c, r0	; 60
    1c16:	0f 90       	pop	r0
    1c18:	0b be       	out	0x3b, r0	; 59
    1c1a:	0f 90       	pop	r0
    1c1c:	0f be       	out	0x3f, r0	; 63
    1c1e:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
    1c20:	08 95       	ret

00001c22 <__vector_12>:
     */
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
//  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
    1c22:	9a df       	rcall	.-204    	; 0x1b58 <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
    1c24:	18 95       	reti

00001c26 <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    1c26:	0f b6       	in	r0, 0x3f	; 63
    1c28:	f8 94       	cli
    1c2a:	0f 92       	push	r0
    1c2c:	fc 01       	movw	r30, r24
    1c2e:	96 8d       	ldd	r25, Z+30	; 0x1e
    1c30:	0f 90       	pop	r0
    1c32:	0f be       	out	0x3f, r0	; 63
    1c34:	81 e0       	ldi	r24, 0x01	; 1
    1c36:	91 11       	cpse	r25, r1
    1c38:	80 e0       	ldi	r24, 0x00	; 0
    1c3a:	08 95       	ret

00001c3c <prvCopyDataToQueue>:
    1c3c:	0f 93       	push	r16
    1c3e:	1f 93       	push	r17
    1c40:	cf 93       	push	r28
    1c42:	df 93       	push	r29
    1c44:	ec 01       	movw	r28, r24
    1c46:	04 2f       	mov	r16, r20
    1c48:	1e 8d       	ldd	r17, Y+30	; 0x1e
    1c4a:	48 a1       	ldd	r20, Y+32	; 0x20
    1c4c:	41 11       	cpse	r20, r1
    1c4e:	0c c0       	rjmp	.+24     	; 0x1c68 <prvCopyDataToQueue+0x2c>
    1c50:	88 81       	ld	r24, Y
    1c52:	99 81       	ldd	r25, Y+1	; 0x01
    1c54:	89 2b       	or	r24, r25
    1c56:	09 f0       	breq	.+2      	; 0x1c5a <prvCopyDataToQueue+0x1e>
    1c58:	42 c0       	rjmp	.+132    	; 0x1cde <prvCopyDataToQueue+0xa2>
    1c5a:	8c 81       	ldd	r24, Y+4	; 0x04
    1c5c:	9d 81       	ldd	r25, Y+5	; 0x05
    1c5e:	0e 94 79 1a 	call	0x34f2	; 0x34f2 <xTaskPriorityDisinherit>
    1c62:	1d 82       	std	Y+5, r1	; 0x05
    1c64:	1c 82       	std	Y+4, r1	; 0x04
    1c66:	42 c0       	rjmp	.+132    	; 0x1cec <prvCopyDataToQueue+0xb0>
    1c68:	01 11       	cpse	r16, r1
    1c6a:	17 c0       	rjmp	.+46     	; 0x1c9a <prvCopyDataToQueue+0x5e>
    1c6c:	50 e0       	ldi	r21, 0x00	; 0
    1c6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c70:	9b 81       	ldd	r25, Y+3	; 0x03
    1c72:	0e 94 08 31 	call	0x6210	; 0x6210 <memcpy>
    1c76:	28 a1       	ldd	r18, Y+32	; 0x20
    1c78:	8a 81       	ldd	r24, Y+2	; 0x02
    1c7a:	9b 81       	ldd	r25, Y+3	; 0x03
    1c7c:	82 0f       	add	r24, r18
    1c7e:	91 1d       	adc	r25, r1
    1c80:	9b 83       	std	Y+3, r25	; 0x03
    1c82:	8a 83       	std	Y+2, r24	; 0x02
    1c84:	2c 81       	ldd	r18, Y+4	; 0x04
    1c86:	3d 81       	ldd	r19, Y+5	; 0x05
    1c88:	82 17       	cp	r24, r18
    1c8a:	93 07       	cpc	r25, r19
    1c8c:	50 f1       	brcs	.+84     	; 0x1ce2 <prvCopyDataToQueue+0xa6>
    1c8e:	88 81       	ld	r24, Y
    1c90:	99 81       	ldd	r25, Y+1	; 0x01
    1c92:	9b 83       	std	Y+3, r25	; 0x03
    1c94:	8a 83       	std	Y+2, r24	; 0x02
    1c96:	80 e0       	ldi	r24, 0x00	; 0
    1c98:	29 c0       	rjmp	.+82     	; 0x1cec <prvCopyDataToQueue+0xb0>
    1c9a:	50 e0       	ldi	r21, 0x00	; 0
    1c9c:	8e 81       	ldd	r24, Y+6	; 0x06
    1c9e:	9f 81       	ldd	r25, Y+7	; 0x07
    1ca0:	0e 94 08 31 	call	0x6210	; 0x6210 <memcpy>
    1ca4:	88 a1       	ldd	r24, Y+32	; 0x20
    1ca6:	90 e0       	ldi	r25, 0x00	; 0
    1ca8:	91 95       	neg	r25
    1caa:	81 95       	neg	r24
    1cac:	91 09       	sbc	r25, r1
    1cae:	2e 81       	ldd	r18, Y+6	; 0x06
    1cb0:	3f 81       	ldd	r19, Y+7	; 0x07
    1cb2:	28 0f       	add	r18, r24
    1cb4:	39 1f       	adc	r19, r25
    1cb6:	3f 83       	std	Y+7, r19	; 0x07
    1cb8:	2e 83       	std	Y+6, r18	; 0x06
    1cba:	48 81       	ld	r20, Y
    1cbc:	59 81       	ldd	r21, Y+1	; 0x01
    1cbe:	24 17       	cp	r18, r20
    1cc0:	35 07       	cpc	r19, r21
    1cc2:	30 f4       	brcc	.+12     	; 0x1cd0 <prvCopyDataToQueue+0x94>
    1cc4:	2c 81       	ldd	r18, Y+4	; 0x04
    1cc6:	3d 81       	ldd	r19, Y+5	; 0x05
    1cc8:	82 0f       	add	r24, r18
    1cca:	93 1f       	adc	r25, r19
    1ccc:	9f 83       	std	Y+7, r25	; 0x07
    1cce:	8e 83       	std	Y+6, r24	; 0x06
    1cd0:	02 30       	cpi	r16, 0x02	; 2
    1cd2:	49 f4       	brne	.+18     	; 0x1ce6 <prvCopyDataToQueue+0xaa>
    1cd4:	11 23       	and	r17, r17
    1cd6:	49 f0       	breq	.+18     	; 0x1cea <prvCopyDataToQueue+0xae>
    1cd8:	11 50       	subi	r17, 0x01	; 1
    1cda:	80 e0       	ldi	r24, 0x00	; 0
    1cdc:	07 c0       	rjmp	.+14     	; 0x1cec <prvCopyDataToQueue+0xb0>
    1cde:	80 e0       	ldi	r24, 0x00	; 0
    1ce0:	05 c0       	rjmp	.+10     	; 0x1cec <prvCopyDataToQueue+0xb0>
    1ce2:	80 e0       	ldi	r24, 0x00	; 0
    1ce4:	03 c0       	rjmp	.+6      	; 0x1cec <prvCopyDataToQueue+0xb0>
    1ce6:	80 e0       	ldi	r24, 0x00	; 0
    1ce8:	01 c0       	rjmp	.+2      	; 0x1cec <prvCopyDataToQueue+0xb0>
    1cea:	80 e0       	ldi	r24, 0x00	; 0
    1cec:	1f 5f       	subi	r17, 0xFF	; 255
    1cee:	1e 8f       	std	Y+30, r17	; 0x1e
    1cf0:	df 91       	pop	r29
    1cf2:	cf 91       	pop	r28
    1cf4:	1f 91       	pop	r17
    1cf6:	0f 91       	pop	r16
    1cf8:	08 95       	ret

00001cfa <prvCopyDataFromQueue>:
    1cfa:	fc 01       	movw	r30, r24
    1cfc:	40 a1       	ldd	r20, Z+32	; 0x20
    1cfe:	44 23       	and	r20, r20
    1d00:	a9 f0       	breq	.+42     	; 0x1d2c <prvCopyDataFromQueue+0x32>
    1d02:	50 e0       	ldi	r21, 0x00	; 0
    1d04:	26 81       	ldd	r18, Z+6	; 0x06
    1d06:	37 81       	ldd	r19, Z+7	; 0x07
    1d08:	24 0f       	add	r18, r20
    1d0a:	35 1f       	adc	r19, r21
    1d0c:	37 83       	std	Z+7, r19	; 0x07
    1d0e:	26 83       	std	Z+6, r18	; 0x06
    1d10:	84 81       	ldd	r24, Z+4	; 0x04
    1d12:	95 81       	ldd	r25, Z+5	; 0x05
    1d14:	28 17       	cp	r18, r24
    1d16:	39 07       	cpc	r19, r25
    1d18:	20 f0       	brcs	.+8      	; 0x1d22 <prvCopyDataFromQueue+0x28>
    1d1a:	80 81       	ld	r24, Z
    1d1c:	91 81       	ldd	r25, Z+1	; 0x01
    1d1e:	97 83       	std	Z+7, r25	; 0x07
    1d20:	86 83       	std	Z+6, r24	; 0x06
    1d22:	cb 01       	movw	r24, r22
    1d24:	66 81       	ldd	r22, Z+6	; 0x06
    1d26:	77 81       	ldd	r23, Z+7	; 0x07
    1d28:	0c 94 08 31 	jmp	0x6210	; 0x6210 <memcpy>
    1d2c:	08 95       	ret

00001d2e <prvUnlockQueue>:
    1d2e:	ef 92       	push	r14
    1d30:	ff 92       	push	r15
    1d32:	0f 93       	push	r16
    1d34:	1f 93       	push	r17
    1d36:	cf 93       	push	r28
    1d38:	8c 01       	movw	r16, r24
    1d3a:	0f b6       	in	r0, 0x3f	; 63
    1d3c:	f8 94       	cli
    1d3e:	0f 92       	push	r0
    1d40:	fc 01       	movw	r30, r24
    1d42:	c2 a1       	ldd	r28, Z+34	; 0x22
    1d44:	1c 16       	cp	r1, r28
    1d46:	ac f4       	brge	.+42     	; 0x1d72 <prvUnlockQueue+0x44>
    1d48:	83 89       	ldd	r24, Z+19	; 0x13
    1d4a:	81 11       	cpse	r24, r1
    1d4c:	06 c0       	rjmp	.+12     	; 0x1d5a <prvUnlockQueue+0x2c>
    1d4e:	11 c0       	rjmp	.+34     	; 0x1d72 <prvUnlockQueue+0x44>
    1d50:	f8 01       	movw	r30, r16
    1d52:	83 89       	ldd	r24, Z+19	; 0x13
    1d54:	81 11       	cpse	r24, r1
    1d56:	05 c0       	rjmp	.+10     	; 0x1d62 <prvUnlockQueue+0x34>
    1d58:	0c c0       	rjmp	.+24     	; 0x1d72 <prvUnlockQueue+0x44>
    1d5a:	78 01       	movw	r14, r16
    1d5c:	f3 e1       	ldi	r31, 0x13	; 19
    1d5e:	ef 0e       	add	r14, r31
    1d60:	f1 1c       	adc	r15, r1
    1d62:	c7 01       	movw	r24, r14
    1d64:	0e 94 02 19 	call	0x3204	; 0x3204 <xTaskRemoveFromEventList>
    1d68:	81 11       	cpse	r24, r1
    1d6a:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <vTaskMissedYield>
    1d6e:	c1 50       	subi	r28, 0x01	; 1
    1d70:	79 f7       	brne	.-34     	; 0x1d50 <prvUnlockQueue+0x22>
    1d72:	8f ef       	ldi	r24, 0xFF	; 255
    1d74:	f8 01       	movw	r30, r16
    1d76:	82 a3       	std	Z+34, r24	; 0x22
    1d78:	0f 90       	pop	r0
    1d7a:	0f be       	out	0x3f, r0	; 63
    1d7c:	0f b6       	in	r0, 0x3f	; 63
    1d7e:	f8 94       	cli
    1d80:	0f 92       	push	r0
    1d82:	c1 a1       	ldd	r28, Z+33	; 0x21
    1d84:	1c 16       	cp	r1, r28
    1d86:	ac f4       	brge	.+42     	; 0x1db2 <prvUnlockQueue+0x84>
    1d88:	80 85       	ldd	r24, Z+8	; 0x08
    1d8a:	81 11       	cpse	r24, r1
    1d8c:	06 c0       	rjmp	.+12     	; 0x1d9a <prvUnlockQueue+0x6c>
    1d8e:	11 c0       	rjmp	.+34     	; 0x1db2 <prvUnlockQueue+0x84>
    1d90:	f8 01       	movw	r30, r16
    1d92:	80 85       	ldd	r24, Z+8	; 0x08
    1d94:	81 11       	cpse	r24, r1
    1d96:	05 c0       	rjmp	.+10     	; 0x1da2 <prvUnlockQueue+0x74>
    1d98:	0c c0       	rjmp	.+24     	; 0x1db2 <prvUnlockQueue+0x84>
    1d9a:	78 01       	movw	r14, r16
    1d9c:	f8 e0       	ldi	r31, 0x08	; 8
    1d9e:	ef 0e       	add	r14, r31
    1da0:	f1 1c       	adc	r15, r1
    1da2:	c7 01       	movw	r24, r14
    1da4:	0e 94 02 19 	call	0x3204	; 0x3204 <xTaskRemoveFromEventList>
    1da8:	81 11       	cpse	r24, r1
    1daa:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <vTaskMissedYield>
    1dae:	c1 50       	subi	r28, 0x01	; 1
    1db0:	79 f7       	brne	.-34     	; 0x1d90 <prvUnlockQueue+0x62>
    1db2:	8f ef       	ldi	r24, 0xFF	; 255
    1db4:	f8 01       	movw	r30, r16
    1db6:	81 a3       	std	Z+33, r24	; 0x21
    1db8:	0f 90       	pop	r0
    1dba:	0f be       	out	0x3f, r0	; 63
    1dbc:	cf 91       	pop	r28
    1dbe:	1f 91       	pop	r17
    1dc0:	0f 91       	pop	r16
    1dc2:	ff 90       	pop	r15
    1dc4:	ef 90       	pop	r14
    1dc6:	08 95       	ret

00001dc8 <xQueueGenericReset>:
    1dc8:	cf 93       	push	r28
    1dca:	df 93       	push	r29
    1dcc:	ec 01       	movw	r28, r24
    1dce:	0f b6       	in	r0, 0x3f	; 63
    1dd0:	f8 94       	cli
    1dd2:	0f 92       	push	r0
    1dd4:	e8 81       	ld	r30, Y
    1dd6:	f9 81       	ldd	r31, Y+1	; 0x01
    1dd8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1dda:	28 a1       	ldd	r18, Y+32	; 0x20
    1ddc:	90 e0       	ldi	r25, 0x00	; 0
    1dde:	30 e0       	ldi	r19, 0x00	; 0
    1de0:	82 9f       	mul	r24, r18
    1de2:	a0 01       	movw	r20, r0
    1de4:	83 9f       	mul	r24, r19
    1de6:	50 0d       	add	r21, r0
    1de8:	92 9f       	mul	r25, r18
    1dea:	50 0d       	add	r21, r0
    1dec:	11 24       	eor	r1, r1
    1dee:	4e 0f       	add	r20, r30
    1df0:	5f 1f       	adc	r21, r31
    1df2:	5d 83       	std	Y+5, r21	; 0x05
    1df4:	4c 83       	std	Y+4, r20	; 0x04
    1df6:	1e 8e       	std	Y+30, r1	; 0x1e
    1df8:	fb 83       	std	Y+3, r31	; 0x03
    1dfa:	ea 83       	std	Y+2, r30	; 0x02
    1dfc:	01 97       	sbiw	r24, 0x01	; 1
    1dfe:	82 9f       	mul	r24, r18
    1e00:	a0 01       	movw	r20, r0
    1e02:	83 9f       	mul	r24, r19
    1e04:	50 0d       	add	r21, r0
    1e06:	92 9f       	mul	r25, r18
    1e08:	50 0d       	add	r21, r0
    1e0a:	11 24       	eor	r1, r1
    1e0c:	cf 01       	movw	r24, r30
    1e0e:	84 0f       	add	r24, r20
    1e10:	95 1f       	adc	r25, r21
    1e12:	9f 83       	std	Y+7, r25	; 0x07
    1e14:	8e 83       	std	Y+6, r24	; 0x06
    1e16:	8f ef       	ldi	r24, 0xFF	; 255
    1e18:	89 a3       	std	Y+33, r24	; 0x21
    1e1a:	8a a3       	std	Y+34, r24	; 0x22
    1e1c:	61 11       	cpse	r22, r1
    1e1e:	0b c0       	rjmp	.+22     	; 0x1e36 <xQueueGenericReset+0x6e>
    1e20:	88 85       	ldd	r24, Y+8	; 0x08
    1e22:	88 23       	and	r24, r24
    1e24:	71 f0       	breq	.+28     	; 0x1e42 <xQueueGenericReset+0x7a>
    1e26:	ce 01       	movw	r24, r28
    1e28:	08 96       	adiw	r24, 0x08	; 8
    1e2a:	0e 94 02 19 	call	0x3204	; 0x3204 <xTaskRemoveFromEventList>
    1e2e:	88 23       	and	r24, r24
    1e30:	41 f0       	breq	.+16     	; 0x1e42 <xQueueGenericReset+0x7a>
    1e32:	31 de       	rcall	.-926    	; 0x1a96 <vPortYield>
    1e34:	06 c0       	rjmp	.+12     	; 0x1e42 <xQueueGenericReset+0x7a>
    1e36:	ce 01       	movw	r24, r28
    1e38:	08 96       	adiw	r24, 0x08	; 8
    1e3a:	e5 dc       	rcall	.-1590   	; 0x1806 <vListInitialise>
    1e3c:	ce 01       	movw	r24, r28
    1e3e:	43 96       	adiw	r24, 0x13	; 19
    1e40:	e2 dc       	rcall	.-1596   	; 0x1806 <vListInitialise>
    1e42:	0f 90       	pop	r0
    1e44:	0f be       	out	0x3f, r0	; 63
    1e46:	81 e0       	ldi	r24, 0x01	; 1
    1e48:	df 91       	pop	r29
    1e4a:	cf 91       	pop	r28
    1e4c:	08 95       	ret

00001e4e <xQueueGenericCreate>:
    1e4e:	ff 92       	push	r15
    1e50:	0f 93       	push	r16
    1e52:	1f 93       	push	r17
    1e54:	cf 93       	push	r28
    1e56:	df 93       	push	r29
    1e58:	08 2f       	mov	r16, r24
    1e5a:	16 2f       	mov	r17, r22
    1e5c:	f4 2e       	mov	r15, r20
    1e5e:	66 23       	and	r22, r22
    1e60:	b9 f0       	breq	.+46     	; 0x1e90 <xQueueGenericCreate+0x42>
    1e62:	86 9f       	mul	r24, r22
    1e64:	c0 01       	movw	r24, r0
    1e66:	11 24       	eor	r1, r1
    1e68:	85 96       	adiw	r24, 0x25	; 37
    1e6a:	e3 db       	rcall	.-2106   	; 0x1632 <pvPortMalloc>
    1e6c:	ec 01       	movw	r28, r24
    1e6e:	00 97       	sbiw	r24, 0x00	; 0
    1e70:	41 f4       	brne	.+16     	; 0x1e82 <xQueueGenericCreate+0x34>
    1e72:	14 c0       	rjmp	.+40     	; 0x1e9c <xQueueGenericCreate+0x4e>
    1e74:	0f 8f       	std	Y+31, r16	; 0x1f
    1e76:	18 a3       	std	Y+32, r17	; 0x20
    1e78:	61 e0       	ldi	r22, 0x01	; 1
    1e7a:	ce 01       	movw	r24, r28
    1e7c:	a5 df       	rcall	.-182    	; 0x1dc8 <xQueueGenericReset>
    1e7e:	fc a2       	std	Y+36, r15	; 0x24
    1e80:	0d c0       	rjmp	.+26     	; 0x1e9c <xQueueGenericCreate+0x4e>
    1e82:	85 96       	adiw	r24, 0x25	; 37
    1e84:	99 83       	std	Y+1, r25	; 0x01
    1e86:	88 83       	st	Y, r24
    1e88:	f5 cf       	rjmp	.-22     	; 0x1e74 <xQueueGenericCreate+0x26>
    1e8a:	d9 83       	std	Y+1, r29	; 0x01
    1e8c:	c8 83       	st	Y, r28
    1e8e:	f2 cf       	rjmp	.-28     	; 0x1e74 <xQueueGenericCreate+0x26>
    1e90:	85 e2       	ldi	r24, 0x25	; 37
    1e92:	90 e0       	ldi	r25, 0x00	; 0
    1e94:	ce db       	rcall	.-2148   	; 0x1632 <pvPortMalloc>
    1e96:	ec 01       	movw	r28, r24
    1e98:	89 2b       	or	r24, r25
    1e9a:	b9 f7       	brne	.-18     	; 0x1e8a <xQueueGenericCreate+0x3c>
    1e9c:	ce 01       	movw	r24, r28
    1e9e:	df 91       	pop	r29
    1ea0:	cf 91       	pop	r28
    1ea2:	1f 91       	pop	r17
    1ea4:	0f 91       	pop	r16
    1ea6:	ff 90       	pop	r15
    1ea8:	08 95       	ret

00001eaa <xQueueGenericSend>:
    1eaa:	9f 92       	push	r9
    1eac:	af 92       	push	r10
    1eae:	bf 92       	push	r11
    1eb0:	cf 92       	push	r12
    1eb2:	df 92       	push	r13
    1eb4:	ef 92       	push	r14
    1eb6:	ff 92       	push	r15
    1eb8:	0f 93       	push	r16
    1eba:	1f 93       	push	r17
    1ebc:	cf 93       	push	r28
    1ebe:	df 93       	push	r29
    1ec0:	cd b7       	in	r28, 0x3d	; 61
    1ec2:	de b7       	in	r29, 0x3e	; 62
    1ec4:	29 97       	sbiw	r28, 0x09	; 9
    1ec6:	0f b6       	in	r0, 0x3f	; 63
    1ec8:	f8 94       	cli
    1eca:	de bf       	out	0x3e, r29	; 62
    1ecc:	0f be       	out	0x3f, r0	; 63
    1ece:	cd bf       	out	0x3d, r28	; 61
    1ed0:	7c 01       	movw	r14, r24
    1ed2:	5b 01       	movw	r10, r22
    1ed4:	2e 83       	std	Y+6, r18	; 0x06
    1ed6:	3f 83       	std	Y+7, r19	; 0x07
    1ed8:	48 87       	std	Y+8, r20	; 0x08
    1eda:	59 87       	std	Y+9, r21	; 0x09
    1edc:	10 e0       	ldi	r17, 0x00	; 0
    1ede:	99 24       	eor	r9, r9
    1ee0:	93 94       	inc	r9
    1ee2:	6c 01       	movw	r12, r24
    1ee4:	88 e0       	ldi	r24, 0x08	; 8
    1ee6:	c8 0e       	add	r12, r24
    1ee8:	d1 1c       	adc	r13, r1
    1eea:	0f b6       	in	r0, 0x3f	; 63
    1eec:	f8 94       	cli
    1eee:	0f 92       	push	r0
    1ef0:	f7 01       	movw	r30, r14
    1ef2:	96 8d       	ldd	r25, Z+30	; 0x1e
    1ef4:	87 8d       	ldd	r24, Z+31	; 0x1f
    1ef6:	98 17       	cp	r25, r24
    1ef8:	10 f0       	brcs	.+4      	; 0x1efe <xQueueGenericSend+0x54>
    1efa:	02 30       	cpi	r16, 0x02	; 2
    1efc:	b1 f4       	brne	.+44     	; 0x1f2a <xQueueGenericSend+0x80>
    1efe:	40 2f       	mov	r20, r16
    1f00:	b5 01       	movw	r22, r10
    1f02:	c7 01       	movw	r24, r14
    1f04:	9b de       	rcall	.-714    	; 0x1c3c <prvCopyDataToQueue>
    1f06:	f7 01       	movw	r30, r14
    1f08:	93 89       	ldd	r25, Z+19	; 0x13
    1f0a:	99 23       	and	r25, r25
    1f0c:	41 f0       	breq	.+16     	; 0x1f1e <xQueueGenericSend+0x74>
    1f0e:	c7 01       	movw	r24, r14
    1f10:	43 96       	adiw	r24, 0x13	; 19
    1f12:	0e 94 02 19 	call	0x3204	; 0x3204 <xTaskRemoveFromEventList>
    1f16:	88 23       	and	r24, r24
    1f18:	21 f0       	breq	.+8      	; 0x1f22 <xQueueGenericSend+0x78>
    1f1a:	bd dd       	rcall	.-1158   	; 0x1a96 <vPortYield>
    1f1c:	02 c0       	rjmp	.+4      	; 0x1f22 <xQueueGenericSend+0x78>
    1f1e:	81 11       	cpse	r24, r1
    1f20:	ba dd       	rcall	.-1164   	; 0x1a96 <vPortYield>
    1f22:	0f 90       	pop	r0
    1f24:	0f be       	out	0x3f, r0	; 63
    1f26:	81 e0       	ldi	r24, 0x01	; 1
    1f28:	4e c0       	rjmp	.+156    	; 0x1fc6 <xQueueGenericSend+0x11c>
    1f2a:	8e 81       	ldd	r24, Y+6	; 0x06
    1f2c:	9f 81       	ldd	r25, Y+7	; 0x07
    1f2e:	a8 85       	ldd	r26, Y+8	; 0x08
    1f30:	b9 85       	ldd	r27, Y+9	; 0x09
    1f32:	89 2b       	or	r24, r25
    1f34:	8a 2b       	or	r24, r26
    1f36:	8b 2b       	or	r24, r27
    1f38:	21 f4       	brne	.+8      	; 0x1f42 <xQueueGenericSend+0x98>
    1f3a:	0f 90       	pop	r0
    1f3c:	0f be       	out	0x3f, r0	; 63
    1f3e:	80 e0       	ldi	r24, 0x00	; 0
    1f40:	42 c0       	rjmp	.+132    	; 0x1fc6 <xQueueGenericSend+0x11c>
    1f42:	11 11       	cpse	r17, r1
    1f44:	05 c0       	rjmp	.+10     	; 0x1f50 <xQueueGenericSend+0xa6>
    1f46:	ce 01       	movw	r24, r28
    1f48:	01 96       	adiw	r24, 0x01	; 1
    1f4a:	0e 94 8e 19 	call	0x331c	; 0x331c <vTaskInternalSetTimeOutState>
    1f4e:	19 2d       	mov	r17, r9
    1f50:	0f 90       	pop	r0
    1f52:	0f be       	out	0x3f, r0	; 63
    1f54:	ff d6       	rcall	.+3582   	; 0x2d54 <vTaskSuspendAll>
    1f56:	0f b6       	in	r0, 0x3f	; 63
    1f58:	f8 94       	cli
    1f5a:	0f 92       	push	r0
    1f5c:	f7 01       	movw	r30, r14
    1f5e:	81 a1       	ldd	r24, Z+33	; 0x21
    1f60:	8f 3f       	cpi	r24, 0xFF	; 255
    1f62:	09 f4       	brne	.+2      	; 0x1f66 <xQueueGenericSend+0xbc>
    1f64:	11 a2       	std	Z+33, r1	; 0x21
    1f66:	f7 01       	movw	r30, r14
    1f68:	82 a1       	ldd	r24, Z+34	; 0x22
    1f6a:	8f 3f       	cpi	r24, 0xFF	; 255
    1f6c:	09 f4       	brne	.+2      	; 0x1f70 <xQueueGenericSend+0xc6>
    1f6e:	12 a2       	std	Z+34, r1	; 0x22
    1f70:	0f 90       	pop	r0
    1f72:	0f be       	out	0x3f, r0	; 63
    1f74:	be 01       	movw	r22, r28
    1f76:	6a 5f       	subi	r22, 0xFA	; 250
    1f78:	7f 4f       	sbci	r23, 0xFF	; 255
    1f7a:	ce 01       	movw	r24, r28
    1f7c:	01 96       	adiw	r24, 0x01	; 1
    1f7e:	0e 94 9f 19 	call	0x333e	; 0x333e <xTaskCheckForTimeOut>
    1f82:	81 11       	cpse	r24, r1
    1f84:	1c c0       	rjmp	.+56     	; 0x1fbe <xQueueGenericSend+0x114>
    1f86:	0f b6       	in	r0, 0x3f	; 63
    1f88:	f8 94       	cli
    1f8a:	0f 92       	push	r0
    1f8c:	f7 01       	movw	r30, r14
    1f8e:	96 8d       	ldd	r25, Z+30	; 0x1e
    1f90:	87 8d       	ldd	r24, Z+31	; 0x1f
    1f92:	0f 90       	pop	r0
    1f94:	0f be       	out	0x3f, r0	; 63
    1f96:	98 13       	cpse	r25, r24
    1f98:	0e c0       	rjmp	.+28     	; 0x1fb6 <xQueueGenericSend+0x10c>
    1f9a:	4e 81       	ldd	r20, Y+6	; 0x06
    1f9c:	5f 81       	ldd	r21, Y+7	; 0x07
    1f9e:	68 85       	ldd	r22, Y+8	; 0x08
    1fa0:	79 85       	ldd	r23, Y+9	; 0x09
    1fa2:	c6 01       	movw	r24, r12
    1fa4:	0e 94 a7 18 	call	0x314e	; 0x314e <vTaskPlaceOnEventList>
    1fa8:	c7 01       	movw	r24, r14
    1faa:	c1 de       	rcall	.-638    	; 0x1d2e <prvUnlockQueue>
    1fac:	bc d7       	rcall	.+3960   	; 0x2f26 <xTaskResumeAll>
    1fae:	81 11       	cpse	r24, r1
    1fb0:	9c cf       	rjmp	.-200    	; 0x1eea <xQueueGenericSend+0x40>
    1fb2:	71 dd       	rcall	.-1310   	; 0x1a96 <vPortYield>
    1fb4:	9a cf       	rjmp	.-204    	; 0x1eea <xQueueGenericSend+0x40>
    1fb6:	c7 01       	movw	r24, r14
    1fb8:	ba de       	rcall	.-652    	; 0x1d2e <prvUnlockQueue>
    1fba:	b5 d7       	rcall	.+3946   	; 0x2f26 <xTaskResumeAll>
    1fbc:	96 cf       	rjmp	.-212    	; 0x1eea <xQueueGenericSend+0x40>
    1fbe:	c7 01       	movw	r24, r14
    1fc0:	b6 de       	rcall	.-660    	; 0x1d2e <prvUnlockQueue>
    1fc2:	b1 d7       	rcall	.+3938   	; 0x2f26 <xTaskResumeAll>
    1fc4:	80 e0       	ldi	r24, 0x00	; 0
    1fc6:	29 96       	adiw	r28, 0x09	; 9
    1fc8:	0f b6       	in	r0, 0x3f	; 63
    1fca:	f8 94       	cli
    1fcc:	de bf       	out	0x3e, r29	; 62
    1fce:	0f be       	out	0x3f, r0	; 63
    1fd0:	cd bf       	out	0x3d, r28	; 61
    1fd2:	df 91       	pop	r29
    1fd4:	cf 91       	pop	r28
    1fd6:	1f 91       	pop	r17
    1fd8:	0f 91       	pop	r16
    1fda:	ff 90       	pop	r15
    1fdc:	ef 90       	pop	r14
    1fde:	df 90       	pop	r13
    1fe0:	cf 90       	pop	r12
    1fe2:	bf 90       	pop	r11
    1fe4:	af 90       	pop	r10
    1fe6:	9f 90       	pop	r9
    1fe8:	08 95       	ret

00001fea <xQueueCreateMutex>:
    1fea:	0f 93       	push	r16
    1fec:	cf 93       	push	r28
    1fee:	df 93       	push	r29
    1ff0:	48 2f       	mov	r20, r24
    1ff2:	60 e0       	ldi	r22, 0x00	; 0
    1ff4:	81 e0       	ldi	r24, 0x01	; 1
    1ff6:	2b df       	rcall	.-426    	; 0x1e4e <xQueueGenericCreate>
    1ff8:	ec 01       	movw	r28, r24
    1ffa:	00 97       	sbiw	r24, 0x00	; 0
    1ffc:	61 f0       	breq	.+24     	; 0x2016 <xQueueCreateMutex+0x2c>
    1ffe:	1d 82       	std	Y+5, r1	; 0x05
    2000:	1c 82       	std	Y+4, r1	; 0x04
    2002:	19 82       	std	Y+1, r1	; 0x01
    2004:	18 82       	st	Y, r1
    2006:	1e 82       	std	Y+6, r1	; 0x06
    2008:	00 e0       	ldi	r16, 0x00	; 0
    200a:	20 e0       	ldi	r18, 0x00	; 0
    200c:	30 e0       	ldi	r19, 0x00	; 0
    200e:	a9 01       	movw	r20, r18
    2010:	60 e0       	ldi	r22, 0x00	; 0
    2012:	70 e0       	ldi	r23, 0x00	; 0
    2014:	4a df       	rcall	.-364    	; 0x1eaa <xQueueGenericSend>
    2016:	ce 01       	movw	r24, r28
    2018:	df 91       	pop	r29
    201a:	cf 91       	pop	r28
    201c:	0f 91       	pop	r16
    201e:	08 95       	ret

00002020 <xQueueGenericSendFromISR>:
    2020:	ef 92       	push	r14
    2022:	ff 92       	push	r15
    2024:	0f 93       	push	r16
    2026:	1f 93       	push	r17
    2028:	cf 93       	push	r28
    202a:	df 93       	push	r29
    202c:	8a 01       	movw	r16, r20
    202e:	fc 01       	movw	r30, r24
    2030:	56 8d       	ldd	r21, Z+30	; 0x1e
    2032:	37 8d       	ldd	r19, Z+31	; 0x1f
    2034:	53 17       	cp	r21, r19
    2036:	10 f0       	brcs	.+4      	; 0x203c <xQueueGenericSendFromISR+0x1c>
    2038:	22 30       	cpi	r18, 0x02	; 2
    203a:	e9 f4       	brne	.+58     	; 0x2076 <xQueueGenericSendFromISR+0x56>
    203c:	42 2f       	mov	r20, r18
    203e:	78 01       	movw	r14, r16
    2040:	ec 01       	movw	r28, r24
    2042:	1a a1       	ldd	r17, Y+34	; 0x22
    2044:	fb dd       	rcall	.-1034   	; 0x1c3c <prvCopyDataToQueue>
    2046:	1f 3f       	cpi	r17, 0xFF	; 255
    2048:	81 f4       	brne	.+32     	; 0x206a <xQueueGenericSendFromISR+0x4a>
    204a:	8b 89       	ldd	r24, Y+19	; 0x13
    204c:	88 23       	and	r24, r24
    204e:	a9 f0       	breq	.+42     	; 0x207a <xQueueGenericSendFromISR+0x5a>
    2050:	ce 01       	movw	r24, r28
    2052:	43 96       	adiw	r24, 0x13	; 19
    2054:	0e 94 02 19 	call	0x3204	; 0x3204 <xTaskRemoveFromEventList>
    2058:	88 23       	and	r24, r24
    205a:	89 f0       	breq	.+34     	; 0x207e <xQueueGenericSendFromISR+0x5e>
    205c:	e1 14       	cp	r14, r1
    205e:	f1 04       	cpc	r15, r1
    2060:	81 f0       	breq	.+32     	; 0x2082 <xQueueGenericSendFromISR+0x62>
    2062:	81 e0       	ldi	r24, 0x01	; 1
    2064:	f7 01       	movw	r30, r14
    2066:	80 83       	st	Z, r24
    2068:	0d c0       	rjmp	.+26     	; 0x2084 <xQueueGenericSendFromISR+0x64>
    206a:	ff 24       	eor	r15, r15
    206c:	f3 94       	inc	r15
    206e:	f1 0e       	add	r15, r17
    2070:	fa a2       	std	Y+34, r15	; 0x22
    2072:	81 e0       	ldi	r24, 0x01	; 1
    2074:	07 c0       	rjmp	.+14     	; 0x2084 <xQueueGenericSendFromISR+0x64>
    2076:	80 e0       	ldi	r24, 0x00	; 0
    2078:	05 c0       	rjmp	.+10     	; 0x2084 <xQueueGenericSendFromISR+0x64>
    207a:	81 e0       	ldi	r24, 0x01	; 1
    207c:	03 c0       	rjmp	.+6      	; 0x2084 <xQueueGenericSendFromISR+0x64>
    207e:	81 e0       	ldi	r24, 0x01	; 1
    2080:	01 c0       	rjmp	.+2      	; 0x2084 <xQueueGenericSendFromISR+0x64>
    2082:	81 e0       	ldi	r24, 0x01	; 1
    2084:	df 91       	pop	r29
    2086:	cf 91       	pop	r28
    2088:	1f 91       	pop	r17
    208a:	0f 91       	pop	r16
    208c:	ff 90       	pop	r15
    208e:	ef 90       	pop	r14
    2090:	08 95       	ret

00002092 <xQueueReceive>:
    2092:	9f 92       	push	r9
    2094:	af 92       	push	r10
    2096:	bf 92       	push	r11
    2098:	cf 92       	push	r12
    209a:	df 92       	push	r13
    209c:	ef 92       	push	r14
    209e:	ff 92       	push	r15
    20a0:	0f 93       	push	r16
    20a2:	1f 93       	push	r17
    20a4:	cf 93       	push	r28
    20a6:	df 93       	push	r29
    20a8:	cd b7       	in	r28, 0x3d	; 61
    20aa:	de b7       	in	r29, 0x3e	; 62
    20ac:	29 97       	sbiw	r28, 0x09	; 9
    20ae:	0f b6       	in	r0, 0x3f	; 63
    20b0:	f8 94       	cli
    20b2:	de bf       	out	0x3e, r29	; 62
    20b4:	0f be       	out	0x3f, r0	; 63
    20b6:	cd bf       	out	0x3d, r28	; 61
    20b8:	8c 01       	movw	r16, r24
    20ba:	5b 01       	movw	r10, r22
    20bc:	2e 83       	std	Y+6, r18	; 0x06
    20be:	3f 83       	std	Y+7, r19	; 0x07
    20c0:	48 87       	std	Y+8, r20	; 0x08
    20c2:	59 87       	std	Y+9, r21	; 0x09
    20c4:	e1 2c       	mov	r14, r1
    20c6:	99 24       	eor	r9, r9
    20c8:	93 94       	inc	r9
    20ca:	6c 01       	movw	r12, r24
    20cc:	83 e1       	ldi	r24, 0x13	; 19
    20ce:	c8 0e       	add	r12, r24
    20d0:	d1 1c       	adc	r13, r1
    20d2:	0f b6       	in	r0, 0x3f	; 63
    20d4:	f8 94       	cli
    20d6:	0f 92       	push	r0
    20d8:	f8 01       	movw	r30, r16
    20da:	f6 8c       	ldd	r15, Z+30	; 0x1e
    20dc:	ff 20       	and	r15, r15
    20de:	99 f0       	breq	.+38     	; 0x2106 <xQueueReceive+0x74>
    20e0:	b5 01       	movw	r22, r10
    20e2:	c8 01       	movw	r24, r16
    20e4:	0a de       	rcall	.-1004   	; 0x1cfa <prvCopyDataFromQueue>
    20e6:	fa 94       	dec	r15
    20e8:	f8 01       	movw	r30, r16
    20ea:	f6 8e       	std	Z+30, r15	; 0x1e
    20ec:	80 85       	ldd	r24, Z+8	; 0x08
    20ee:	88 23       	and	r24, r24
    20f0:	31 f0       	breq	.+12     	; 0x20fe <xQueueReceive+0x6c>
    20f2:	c8 01       	movw	r24, r16
    20f4:	08 96       	adiw	r24, 0x08	; 8
    20f6:	0e 94 02 19 	call	0x3204	; 0x3204 <xTaskRemoveFromEventList>
    20fa:	81 11       	cpse	r24, r1
    20fc:	cc dc       	rcall	.-1640   	; 0x1a96 <vPortYield>
    20fe:	0f 90       	pop	r0
    2100:	0f be       	out	0x3f, r0	; 63
    2102:	81 e0       	ldi	r24, 0x01	; 1
    2104:	4c c0       	rjmp	.+152    	; 0x219e <xQueueReceive+0x10c>
    2106:	8e 81       	ldd	r24, Y+6	; 0x06
    2108:	9f 81       	ldd	r25, Y+7	; 0x07
    210a:	a8 85       	ldd	r26, Y+8	; 0x08
    210c:	b9 85       	ldd	r27, Y+9	; 0x09
    210e:	89 2b       	or	r24, r25
    2110:	8a 2b       	or	r24, r26
    2112:	8b 2b       	or	r24, r27
    2114:	21 f4       	brne	.+8      	; 0x211e <xQueueReceive+0x8c>
    2116:	0f 90       	pop	r0
    2118:	0f be       	out	0x3f, r0	; 63
    211a:	80 e0       	ldi	r24, 0x00	; 0
    211c:	40 c0       	rjmp	.+128    	; 0x219e <xQueueReceive+0x10c>
    211e:	e1 10       	cpse	r14, r1
    2120:	05 c0       	rjmp	.+10     	; 0x212c <xQueueReceive+0x9a>
    2122:	ce 01       	movw	r24, r28
    2124:	01 96       	adiw	r24, 0x01	; 1
    2126:	0e 94 8e 19 	call	0x331c	; 0x331c <vTaskInternalSetTimeOutState>
    212a:	e9 2c       	mov	r14, r9
    212c:	0f 90       	pop	r0
    212e:	0f be       	out	0x3f, r0	; 63
    2130:	11 d6       	rcall	.+3106   	; 0x2d54 <vTaskSuspendAll>
    2132:	0f b6       	in	r0, 0x3f	; 63
    2134:	f8 94       	cli
    2136:	0f 92       	push	r0
    2138:	f8 01       	movw	r30, r16
    213a:	81 a1       	ldd	r24, Z+33	; 0x21
    213c:	8f 3f       	cpi	r24, 0xFF	; 255
    213e:	09 f4       	brne	.+2      	; 0x2142 <xQueueReceive+0xb0>
    2140:	11 a2       	std	Z+33, r1	; 0x21
    2142:	f8 01       	movw	r30, r16
    2144:	82 a1       	ldd	r24, Z+34	; 0x22
    2146:	8f 3f       	cpi	r24, 0xFF	; 255
    2148:	09 f4       	brne	.+2      	; 0x214c <xQueueReceive+0xba>
    214a:	12 a2       	std	Z+34, r1	; 0x22
    214c:	0f 90       	pop	r0
    214e:	0f be       	out	0x3f, r0	; 63
    2150:	be 01       	movw	r22, r28
    2152:	6a 5f       	subi	r22, 0xFA	; 250
    2154:	7f 4f       	sbci	r23, 0xFF	; 255
    2156:	ce 01       	movw	r24, r28
    2158:	01 96       	adiw	r24, 0x01	; 1
    215a:	0e 94 9f 19 	call	0x333e	; 0x333e <xTaskCheckForTimeOut>
    215e:	81 11       	cpse	r24, r1
    2160:	15 c0       	rjmp	.+42     	; 0x218c <xQueueReceive+0xfa>
    2162:	c8 01       	movw	r24, r16
    2164:	60 dd       	rcall	.-1344   	; 0x1c26 <prvIsQueueEmpty>
    2166:	88 23       	and	r24, r24
    2168:	69 f0       	breq	.+26     	; 0x2184 <xQueueReceive+0xf2>
    216a:	4e 81       	ldd	r20, Y+6	; 0x06
    216c:	5f 81       	ldd	r21, Y+7	; 0x07
    216e:	68 85       	ldd	r22, Y+8	; 0x08
    2170:	79 85       	ldd	r23, Y+9	; 0x09
    2172:	c6 01       	movw	r24, r12
    2174:	ec d7       	rcall	.+4056   	; 0x314e <vTaskPlaceOnEventList>
    2176:	c8 01       	movw	r24, r16
    2178:	da dd       	rcall	.-1100   	; 0x1d2e <prvUnlockQueue>
    217a:	d5 d6       	rcall	.+3498   	; 0x2f26 <xTaskResumeAll>
    217c:	81 11       	cpse	r24, r1
    217e:	a9 cf       	rjmp	.-174    	; 0x20d2 <xQueueReceive+0x40>
    2180:	8a dc       	rcall	.-1772   	; 0x1a96 <vPortYield>
    2182:	a7 cf       	rjmp	.-178    	; 0x20d2 <xQueueReceive+0x40>
    2184:	c8 01       	movw	r24, r16
    2186:	d3 dd       	rcall	.-1114   	; 0x1d2e <prvUnlockQueue>
    2188:	ce d6       	rcall	.+3484   	; 0x2f26 <xTaskResumeAll>
    218a:	a3 cf       	rjmp	.-186    	; 0x20d2 <xQueueReceive+0x40>
    218c:	c8 01       	movw	r24, r16
    218e:	cf dd       	rcall	.-1122   	; 0x1d2e <prvUnlockQueue>
    2190:	ca d6       	rcall	.+3476   	; 0x2f26 <xTaskResumeAll>
    2192:	c8 01       	movw	r24, r16
    2194:	48 dd       	rcall	.-1392   	; 0x1c26 <prvIsQueueEmpty>
    2196:	88 23       	and	r24, r24
    2198:	09 f4       	brne	.+2      	; 0x219c <xQueueReceive+0x10a>
    219a:	9b cf       	rjmp	.-202    	; 0x20d2 <xQueueReceive+0x40>
    219c:	80 e0       	ldi	r24, 0x00	; 0
    219e:	29 96       	adiw	r28, 0x09	; 9
    21a0:	0f b6       	in	r0, 0x3f	; 63
    21a2:	f8 94       	cli
    21a4:	de bf       	out	0x3e, r29	; 62
    21a6:	0f be       	out	0x3f, r0	; 63
    21a8:	cd bf       	out	0x3d, r28	; 61
    21aa:	df 91       	pop	r29
    21ac:	cf 91       	pop	r28
    21ae:	1f 91       	pop	r17
    21b0:	0f 91       	pop	r16
    21b2:	ff 90       	pop	r15
    21b4:	ef 90       	pop	r14
    21b6:	df 90       	pop	r13
    21b8:	cf 90       	pop	r12
    21ba:	bf 90       	pop	r11
    21bc:	af 90       	pop	r10
    21be:	9f 90       	pop	r9
    21c0:	08 95       	ret

000021c2 <xQueueSemaphoreTake>:
    21c2:	bf 92       	push	r11
    21c4:	cf 92       	push	r12
    21c6:	df 92       	push	r13
    21c8:	ef 92       	push	r14
    21ca:	ff 92       	push	r15
    21cc:	0f 93       	push	r16
    21ce:	1f 93       	push	r17
    21d0:	cf 93       	push	r28
    21d2:	df 93       	push	r29
    21d4:	cd b7       	in	r28, 0x3d	; 61
    21d6:	de b7       	in	r29, 0x3e	; 62
    21d8:	29 97       	sbiw	r28, 0x09	; 9
    21da:	0f b6       	in	r0, 0x3f	; 63
    21dc:	f8 94       	cli
    21de:	de bf       	out	0x3e, r29	; 62
    21e0:	0f be       	out	0x3f, r0	; 63
    21e2:	cd bf       	out	0x3d, r28	; 61
    21e4:	8c 01       	movw	r16, r24
    21e6:	4e 83       	std	Y+6, r20	; 0x06
    21e8:	5f 83       	std	Y+7, r21	; 0x07
    21ea:	68 87       	std	Y+8, r22	; 0x08
    21ec:	79 87       	std	Y+9, r23	; 0x09
    21ee:	b1 2c       	mov	r11, r1
    21f0:	d1 2c       	mov	r13, r1
    21f2:	cc 24       	eor	r12, r12
    21f4:	c3 94       	inc	r12
    21f6:	7c 01       	movw	r14, r24
    21f8:	83 e1       	ldi	r24, 0x13	; 19
    21fa:	e8 0e       	add	r14, r24
    21fc:	f1 1c       	adc	r15, r1
    21fe:	0f b6       	in	r0, 0x3f	; 63
    2200:	f8 94       	cli
    2202:	0f 92       	push	r0
    2204:	d8 01       	movw	r26, r16
    2206:	5e 96       	adiw	r26, 0x1e	; 30
    2208:	8c 91       	ld	r24, X
    220a:	5e 97       	sbiw	r26, 0x1e	; 30
    220c:	88 23       	and	r24, r24
    220e:	d9 f0       	breq	.+54     	; 0x2246 <__stack+0x47>
    2210:	81 50       	subi	r24, 0x01	; 1
    2212:	5e 96       	adiw	r26, 0x1e	; 30
    2214:	8c 93       	st	X, r24
    2216:	5e 97       	sbiw	r26, 0x1e	; 30
    2218:	8d 91       	ld	r24, X+
    221a:	9c 91       	ld	r25, X
    221c:	89 2b       	or	r24, r25
    221e:	29 f4       	brne	.+10     	; 0x222a <__stack+0x2b>
    2220:	0e 94 2f 1b 	call	0x365e	; 0x365e <pvTaskIncrementMutexHeldCount>
    2224:	f8 01       	movw	r30, r16
    2226:	95 83       	std	Z+5, r25	; 0x05
    2228:	84 83       	std	Z+4, r24	; 0x04
    222a:	d8 01       	movw	r26, r16
    222c:	18 96       	adiw	r26, 0x08	; 8
    222e:	8c 91       	ld	r24, X
    2230:	88 23       	and	r24, r24
    2232:	29 f0       	breq	.+10     	; 0x223e <__stack+0x3f>
    2234:	c8 01       	movw	r24, r16
    2236:	08 96       	adiw	r24, 0x08	; 8
    2238:	e5 d7       	rcall	.+4042   	; 0x3204 <xTaskRemoveFromEventList>
    223a:	81 11       	cpse	r24, r1
    223c:	2c dc       	rcall	.-1960   	; 0x1a96 <vPortYield>
    223e:	0f 90       	pop	r0
    2240:	0f be       	out	0x3f, r0	; 63
    2242:	81 e0       	ldi	r24, 0x01	; 1
    2244:	7a c0       	rjmp	.+244    	; 0x233a <__stack+0x13b>
    2246:	8e 81       	ldd	r24, Y+6	; 0x06
    2248:	9f 81       	ldd	r25, Y+7	; 0x07
    224a:	a8 85       	ldd	r26, Y+8	; 0x08
    224c:	b9 85       	ldd	r27, Y+9	; 0x09
    224e:	89 2b       	or	r24, r25
    2250:	8a 2b       	or	r24, r26
    2252:	8b 2b       	or	r24, r27
    2254:	21 f4       	brne	.+8      	; 0x225e <__stack+0x5f>
    2256:	0f 90       	pop	r0
    2258:	0f be       	out	0x3f, r0	; 63
    225a:	80 e0       	ldi	r24, 0x00	; 0
    225c:	6e c0       	rjmp	.+220    	; 0x233a <__stack+0x13b>
    225e:	d1 10       	cpse	r13, r1
    2260:	05 c0       	rjmp	.+10     	; 0x226c <__stack+0x6d>
    2262:	ce 01       	movw	r24, r28
    2264:	01 96       	adiw	r24, 0x01	; 1
    2266:	0e 94 8e 19 	call	0x331c	; 0x331c <vTaskInternalSetTimeOutState>
    226a:	dc 2c       	mov	r13, r12
    226c:	0f 90       	pop	r0
    226e:	0f be       	out	0x3f, r0	; 63
    2270:	71 d5       	rcall	.+2786   	; 0x2d54 <vTaskSuspendAll>
    2272:	0f b6       	in	r0, 0x3f	; 63
    2274:	f8 94       	cli
    2276:	0f 92       	push	r0
    2278:	f8 01       	movw	r30, r16
    227a:	81 a1       	ldd	r24, Z+33	; 0x21
    227c:	8f 3f       	cpi	r24, 0xFF	; 255
    227e:	09 f4       	brne	.+2      	; 0x2282 <__stack+0x83>
    2280:	11 a2       	std	Z+33, r1	; 0x21
    2282:	d8 01       	movw	r26, r16
    2284:	92 96       	adiw	r26, 0x22	; 34
    2286:	8c 91       	ld	r24, X
    2288:	92 97       	sbiw	r26, 0x22	; 34
    228a:	8f 3f       	cpi	r24, 0xFF	; 255
    228c:	11 f4       	brne	.+4      	; 0x2292 <__stack+0x93>
    228e:	92 96       	adiw	r26, 0x22	; 34
    2290:	1c 92       	st	X, r1
    2292:	0f 90       	pop	r0
    2294:	0f be       	out	0x3f, r0	; 63
    2296:	be 01       	movw	r22, r28
    2298:	6a 5f       	subi	r22, 0xFA	; 250
    229a:	7f 4f       	sbci	r23, 0xFF	; 255
    229c:	ce 01       	movw	r24, r28
    229e:	01 96       	adiw	r24, 0x01	; 1
    22a0:	0e 94 9f 19 	call	0x333e	; 0x333e <xTaskCheckForTimeOut>
    22a4:	81 11       	cpse	r24, r1
    22a6:	24 c0       	rjmp	.+72     	; 0x22f0 <__stack+0xf1>
    22a8:	c8 01       	movw	r24, r16
    22aa:	bd dc       	rcall	.-1670   	; 0x1c26 <prvIsQueueEmpty>
    22ac:	88 23       	and	r24, r24
    22ae:	e1 f0       	breq	.+56     	; 0x22e8 <__stack+0xe9>
    22b0:	f8 01       	movw	r30, r16
    22b2:	80 81       	ld	r24, Z
    22b4:	91 81       	ldd	r25, Z+1	; 0x01
    22b6:	89 2b       	or	r24, r25
    22b8:	51 f4       	brne	.+20     	; 0x22ce <__stack+0xcf>
    22ba:	0f b6       	in	r0, 0x3f	; 63
    22bc:	f8 94       	cli
    22be:	0f 92       	push	r0
    22c0:	84 81       	ldd	r24, Z+4	; 0x04
    22c2:	95 81       	ldd	r25, Z+5	; 0x05
    22c4:	0e 94 0b 1a 	call	0x3416	; 0x3416 <xTaskPriorityInherit>
    22c8:	b8 2e       	mov	r11, r24
    22ca:	0f 90       	pop	r0
    22cc:	0f be       	out	0x3f, r0	; 63
    22ce:	4e 81       	ldd	r20, Y+6	; 0x06
    22d0:	5f 81       	ldd	r21, Y+7	; 0x07
    22d2:	68 85       	ldd	r22, Y+8	; 0x08
    22d4:	79 85       	ldd	r23, Y+9	; 0x09
    22d6:	c7 01       	movw	r24, r14
    22d8:	3a d7       	rcall	.+3700   	; 0x314e <vTaskPlaceOnEventList>
    22da:	c8 01       	movw	r24, r16
    22dc:	28 dd       	rcall	.-1456   	; 0x1d2e <prvUnlockQueue>
    22de:	23 d6       	rcall	.+3142   	; 0x2f26 <xTaskResumeAll>
    22e0:	81 11       	cpse	r24, r1
    22e2:	8d cf       	rjmp	.-230    	; 0x21fe <xQueueSemaphoreTake+0x3c>
    22e4:	d8 db       	rcall	.-2128   	; 0x1a96 <vPortYield>
    22e6:	8b cf       	rjmp	.-234    	; 0x21fe <xQueueSemaphoreTake+0x3c>
    22e8:	c8 01       	movw	r24, r16
    22ea:	21 dd       	rcall	.-1470   	; 0x1d2e <prvUnlockQueue>
    22ec:	1c d6       	rcall	.+3128   	; 0x2f26 <xTaskResumeAll>
    22ee:	87 cf       	rjmp	.-242    	; 0x21fe <xQueueSemaphoreTake+0x3c>
    22f0:	c8 01       	movw	r24, r16
    22f2:	1d dd       	rcall	.-1478   	; 0x1d2e <prvUnlockQueue>
    22f4:	18 d6       	rcall	.+3120   	; 0x2f26 <xTaskResumeAll>
    22f6:	c8 01       	movw	r24, r16
    22f8:	96 dc       	rcall	.-1748   	; 0x1c26 <prvIsQueueEmpty>
    22fa:	88 23       	and	r24, r24
    22fc:	09 f4       	brne	.+2      	; 0x2300 <__stack+0x101>
    22fe:	7f cf       	rjmp	.-258    	; 0x21fe <xQueueSemaphoreTake+0x3c>
    2300:	bb 20       	and	r11, r11
    2302:	d1 f0       	breq	.+52     	; 0x2338 <__stack+0x139>
    2304:	0f b6       	in	r0, 0x3f	; 63
    2306:	f8 94       	cli
    2308:	0f 92       	push	r0
    230a:	f8 01       	movw	r30, r16
    230c:	83 89       	ldd	r24, Z+19	; 0x13
    230e:	88 23       	and	r24, r24
    2310:	39 f0       	breq	.+14     	; 0x2320 <__stack+0x121>
    2312:	02 8c       	ldd	r0, Z+26	; 0x1a
    2314:	f3 8d       	ldd	r31, Z+27	; 0x1b
    2316:	e0 2d       	mov	r30, r0
    2318:	80 81       	ld	r24, Z
    231a:	66 e0       	ldi	r22, 0x06	; 6
    231c:	68 1b       	sub	r22, r24
    231e:	01 c0       	rjmp	.+2      	; 0x2322 <__stack+0x123>
    2320:	60 e0       	ldi	r22, 0x00	; 0
    2322:	d8 01       	movw	r26, r16
    2324:	14 96       	adiw	r26, 0x04	; 4
    2326:	8d 91       	ld	r24, X+
    2328:	9c 91       	ld	r25, X
    232a:	15 97       	sbiw	r26, 0x05	; 5
    232c:	0e 94 b9 1a 	call	0x3572	; 0x3572 <vTaskPriorityDisinheritAfterTimeout>
    2330:	0f 90       	pop	r0
    2332:	0f be       	out	0x3f, r0	; 63
    2334:	80 e0       	ldi	r24, 0x00	; 0
    2336:	01 c0       	rjmp	.+2      	; 0x233a <__stack+0x13b>
    2338:	80 e0       	ldi	r24, 0x00	; 0
    233a:	29 96       	adiw	r28, 0x09	; 9
    233c:	0f b6       	in	r0, 0x3f	; 63
    233e:	f8 94       	cli
    2340:	de bf       	out	0x3e, r29	; 62
    2342:	0f be       	out	0x3f, r0	; 63
    2344:	cd bf       	out	0x3d, r28	; 61
    2346:	df 91       	pop	r29
    2348:	cf 91       	pop	r28
    234a:	1f 91       	pop	r17
    234c:	0f 91       	pop	r16
    234e:	ff 90       	pop	r15
    2350:	ef 90       	pop	r14
    2352:	df 90       	pop	r13
    2354:	cf 90       	pop	r12
    2356:	bf 90       	pop	r11
    2358:	08 95       	ret

0000235a <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
    {
    235a:	cf 93       	push	r28
    235c:	df 93       	push	r29
    235e:	ec 01       	movw	r28, r24
        will not actually cause the task to block, just place it on a blocked
        list.  It will not block until the scheduler is unlocked - at which
        time a yield will be performed.  If an item is added to the queue while
        the queue is locked, and the calling task blocks on the queue, then the
        calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    2360:	0f b6       	in	r0, 0x3f	; 63
    2362:	f8 94       	cli
    2364:	0f 92       	push	r0
    2366:	89 a1       	ldd	r24, Y+33	; 0x21
    2368:	8f 3f       	cpi	r24, 0xFF	; 255
    236a:	09 f4       	brne	.+2      	; 0x236e <vQueueWaitForMessageRestricted+0x14>
    236c:	19 a2       	std	Y+33, r1	; 0x21
    236e:	8a a1       	ldd	r24, Y+34	; 0x22
    2370:	8f 3f       	cpi	r24, 0xFF	; 255
    2372:	09 f4       	brne	.+2      	; 0x2376 <vQueueWaitForMessageRestricted+0x1c>
    2374:	1a a2       	std	Y+34, r1	; 0x22
    2376:	0f 90       	pop	r0
    2378:	0f be       	out	0x3f, r0	; 63
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    237a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    237c:	81 11       	cpse	r24, r1
    237e:	03 c0       	rjmp	.+6      	; 0x2386 <vQueueWaitForMessageRestricted+0x2c>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    2380:	ce 01       	movw	r24, r28
    2382:	43 96       	adiw	r24, 0x13	; 19
    2384:	1f d7       	rcall	.+3646   	; 0x31c4 <vTaskPlaceOnEventListRestricted>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
        prvUnlockQueue( pxQueue );
    2386:	ce 01       	movw	r24, r28
    2388:	d2 dc       	rcall	.-1628   	; 0x1d2e <prvUnlockQueue>
    }
    238a:	df 91       	pop	r29
    238c:	cf 91       	pop	r28
    238e:	08 95       	ret

00002390 <prvBytesInBuffer>:

    configASSERT( pxStreamBuffer );

    xReturn = prvBytesInBuffer( pxStreamBuffer );
    return xReturn;
}
    2390:	fc 01       	movw	r30, r24
    2392:	44 81       	ldd	r20, Z+4	; 0x04
    2394:	55 81       	ldd	r21, Z+5	; 0x05
    2396:	22 81       	ldd	r18, Z+2	; 0x02
    2398:	33 81       	ldd	r19, Z+3	; 0x03
    239a:	24 0f       	add	r18, r20
    239c:	35 1f       	adc	r19, r21
    239e:	80 81       	ld	r24, Z
    23a0:	91 81       	ldd	r25, Z+1	; 0x01
    23a2:	b9 01       	movw	r22, r18
    23a4:	68 1b       	sub	r22, r24
    23a6:	79 0b       	sbc	r23, r25
    23a8:	cb 01       	movw	r24, r22
    23aa:	64 17       	cp	r22, r20
    23ac:	75 07       	cpc	r23, r21
    23ae:	10 f0       	brcs	.+4      	; 0x23b4 <prvBytesInBuffer+0x24>
    23b0:	84 1b       	sub	r24, r20
    23b2:	95 0b       	sbc	r25, r21
    23b4:	08 95       	ret

000023b6 <prvWriteBytesToBuffer>:
    23b6:	af 92       	push	r10
    23b8:	bf 92       	push	r11
    23ba:	cf 92       	push	r12
    23bc:	df 92       	push	r13
    23be:	ef 92       	push	r14
    23c0:	ff 92       	push	r15
    23c2:	0f 93       	push	r16
    23c4:	1f 93       	push	r17
    23c6:	cf 93       	push	r28
    23c8:	df 93       	push	r29
    23ca:	6c 01       	movw	r12, r24
    23cc:	5b 01       	movw	r10, r22
    23ce:	7a 01       	movw	r14, r20
    23d0:	fc 01       	movw	r30, r24
    23d2:	c2 81       	ldd	r28, Z+2	; 0x02
    23d4:	d3 81       	ldd	r29, Z+3	; 0x03
    23d6:	04 81       	ldd	r16, Z+4	; 0x04
    23d8:	15 81       	ldd	r17, Z+5	; 0x05
    23da:	0c 1b       	sub	r16, r28
    23dc:	1d 0b       	sbc	r17, r29
    23de:	40 17       	cp	r20, r16
    23e0:	51 07       	cpc	r21, r17
    23e2:	08 f4       	brcc	.+2      	; 0x23e6 <prvWriteBytesToBuffer+0x30>
    23e4:	8a 01       	movw	r16, r20
    23e6:	f6 01       	movw	r30, r12
    23e8:	84 85       	ldd	r24, Z+12	; 0x0c
    23ea:	95 85       	ldd	r25, Z+13	; 0x0d
    23ec:	a8 01       	movw	r20, r16
    23ee:	b5 01       	movw	r22, r10
    23f0:	8c 0f       	add	r24, r28
    23f2:	9d 1f       	adc	r25, r29
    23f4:	0e 94 08 31 	call	0x6210	; 0x6210 <memcpy>
    23f8:	0e 15       	cp	r16, r14
    23fa:	1f 05       	cpc	r17, r15
    23fc:	58 f4       	brcc	.+22     	; 0x2414 <prvWriteBytesToBuffer+0x5e>
    23fe:	a7 01       	movw	r20, r14
    2400:	40 1b       	sub	r20, r16
    2402:	51 0b       	sbc	r21, r17
    2404:	b5 01       	movw	r22, r10
    2406:	60 0f       	add	r22, r16
    2408:	71 1f       	adc	r23, r17
    240a:	f6 01       	movw	r30, r12
    240c:	84 85       	ldd	r24, Z+12	; 0x0c
    240e:	95 85       	ldd	r25, Z+13	; 0x0d
    2410:	0e 94 08 31 	call	0x6210	; 0x6210 <memcpy>
    2414:	ce 01       	movw	r24, r28
    2416:	8e 0d       	add	r24, r14
    2418:	9f 1d       	adc	r25, r15
    241a:	f6 01       	movw	r30, r12
    241c:	24 81       	ldd	r18, Z+4	; 0x04
    241e:	35 81       	ldd	r19, Z+5	; 0x05
    2420:	82 17       	cp	r24, r18
    2422:	93 07       	cpc	r25, r19
    2424:	10 f0       	brcs	.+4      	; 0x242a <prvWriteBytesToBuffer+0x74>
    2426:	82 1b       	sub	r24, r18
    2428:	93 0b       	sbc	r25, r19
    242a:	f6 01       	movw	r30, r12
    242c:	93 83       	std	Z+3, r25	; 0x03
    242e:	82 83       	std	Z+2, r24	; 0x02
    2430:	c7 01       	movw	r24, r14
    2432:	df 91       	pop	r29
    2434:	cf 91       	pop	r28
    2436:	1f 91       	pop	r17
    2438:	0f 91       	pop	r16
    243a:	ff 90       	pop	r15
    243c:	ef 90       	pop	r14
    243e:	df 90       	pop	r13
    2440:	cf 90       	pop	r12
    2442:	bf 90       	pop	r11
    2444:	af 90       	pop	r10
    2446:	08 95       	ret

00002448 <prvWriteMessageToBuffer>:
    2448:	cf 92       	push	r12
    244a:	df 92       	push	r13
    244c:	ef 92       	push	r14
    244e:	ff 92       	push	r15
    2450:	0f 93       	push	r16
    2452:	1f 93       	push	r17
    2454:	cf 93       	push	r28
    2456:	df 93       	push	r29
    2458:	1f 92       	push	r1
    245a:	1f 92       	push	r1
    245c:	cd b7       	in	r28, 0x3d	; 61
    245e:	de b7       	in	r29, 0x3e	; 62
    2460:	5a 83       	std	Y+2, r21	; 0x02
    2462:	49 83       	std	Y+1, r20	; 0x01
    2464:	21 15       	cp	r18, r1
    2466:	31 05       	cpc	r19, r1
    2468:	c9 f0       	breq	.+50     	; 0x249c <prvWriteMessageToBuffer+0x54>
    246a:	6b 01       	movw	r12, r22
    246c:	7c 01       	movw	r14, r24
    246e:	fc 01       	movw	r30, r24
    2470:	86 85       	ldd	r24, Z+14	; 0x0e
    2472:	80 fd       	sbrc	r24, 0
    2474:	08 c0       	rjmp	.+16     	; 0x2486 <prvWriteMessageToBuffer+0x3e>
    2476:	ca 01       	movw	r24, r20
    2478:	24 17       	cp	r18, r20
    247a:	35 07       	cpc	r19, r21
    247c:	08 f4       	brcc	.+2      	; 0x2480 <prvWriteMessageToBuffer+0x38>
    247e:	c9 01       	movw	r24, r18
    2480:	9a 83       	std	Y+2, r25	; 0x02
    2482:	89 83       	std	Y+1, r24	; 0x01
    2484:	11 c0       	rjmp	.+34     	; 0x24a8 <prvWriteMessageToBuffer+0x60>
    2486:	20 17       	cp	r18, r16
    2488:	31 07       	cpc	r19, r17
    248a:	58 f0       	brcs	.+22     	; 0x24a2 <prvWriteMessageToBuffer+0x5a>
    248c:	42 e0       	ldi	r20, 0x02	; 2
    248e:	50 e0       	ldi	r21, 0x00	; 0
    2490:	be 01       	movw	r22, r28
    2492:	6f 5f       	subi	r22, 0xFF	; 255
    2494:	7f 4f       	sbci	r23, 0xFF	; 255
    2496:	c7 01       	movw	r24, r14
    2498:	8e df       	rcall	.-228    	; 0x23b6 <prvWriteBytesToBuffer>
    249a:	06 c0       	rjmp	.+12     	; 0x24a8 <prvWriteMessageToBuffer+0x60>
    249c:	80 e0       	ldi	r24, 0x00	; 0
    249e:	90 e0       	ldi	r25, 0x00	; 0
    24a0:	08 c0       	rjmp	.+16     	; 0x24b2 <prvWriteMessageToBuffer+0x6a>
    24a2:	80 e0       	ldi	r24, 0x00	; 0
    24a4:	90 e0       	ldi	r25, 0x00	; 0
    24a6:	05 c0       	rjmp	.+10     	; 0x24b2 <prvWriteMessageToBuffer+0x6a>
    24a8:	49 81       	ldd	r20, Y+1	; 0x01
    24aa:	5a 81       	ldd	r21, Y+2	; 0x02
    24ac:	b6 01       	movw	r22, r12
    24ae:	c7 01       	movw	r24, r14
    24b0:	82 df       	rcall	.-252    	; 0x23b6 <prvWriteBytesToBuffer>
    24b2:	0f 90       	pop	r0
    24b4:	0f 90       	pop	r0
    24b6:	df 91       	pop	r29
    24b8:	cf 91       	pop	r28
    24ba:	1f 91       	pop	r17
    24bc:	0f 91       	pop	r16
    24be:	ff 90       	pop	r15
    24c0:	ef 90       	pop	r14
    24c2:	df 90       	pop	r13
    24c4:	cf 90       	pop	r12
    24c6:	08 95       	ret

000024c8 <prvReadBytesFromBuffer>:
    24c8:	af 92       	push	r10
    24ca:	bf 92       	push	r11
    24cc:	cf 92       	push	r12
    24ce:	df 92       	push	r13
    24d0:	ef 92       	push	r14
    24d2:	ff 92       	push	r15
    24d4:	0f 93       	push	r16
    24d6:	1f 93       	push	r17
    24d8:	cf 93       	push	r28
    24da:	df 93       	push	r29
    24dc:	7c 01       	movw	r14, r24
    24de:	5b 01       	movw	r10, r22
    24e0:	e9 01       	movw	r28, r18
    24e2:	42 17       	cp	r20, r18
    24e4:	53 07       	cpc	r21, r19
    24e6:	08 f4       	brcc	.+2      	; 0x24ea <prvReadBytesFromBuffer+0x22>
    24e8:	ea 01       	movw	r28, r20
    24ea:	20 97       	sbiw	r28, 0x00	; 0
    24ec:	79 f1       	breq	.+94     	; 0x254c <prvReadBytesFromBuffer+0x84>
    24ee:	f7 01       	movw	r30, r14
    24f0:	00 81       	ld	r16, Z
    24f2:	11 81       	ldd	r17, Z+1	; 0x01
    24f4:	c4 80       	ldd	r12, Z+4	; 0x04
    24f6:	d5 80       	ldd	r13, Z+5	; 0x05
    24f8:	c0 1a       	sub	r12, r16
    24fa:	d1 0a       	sbc	r13, r17
    24fc:	cc 15       	cp	r28, r12
    24fe:	dd 05       	cpc	r29, r13
    2500:	08 f4       	brcc	.+2      	; 0x2504 <prvReadBytesFromBuffer+0x3c>
    2502:	6e 01       	movw	r12, r28
    2504:	f7 01       	movw	r30, r14
    2506:	64 85       	ldd	r22, Z+12	; 0x0c
    2508:	75 85       	ldd	r23, Z+13	; 0x0d
    250a:	60 0f       	add	r22, r16
    250c:	71 1f       	adc	r23, r17
    250e:	a6 01       	movw	r20, r12
    2510:	c5 01       	movw	r24, r10
    2512:	0e 94 08 31 	call	0x6210	; 0x6210 <memcpy>
    2516:	cc 16       	cp	r12, r28
    2518:	dd 06       	cpc	r13, r29
    251a:	58 f4       	brcc	.+22     	; 0x2532 <prvReadBytesFromBuffer+0x6a>
    251c:	ae 01       	movw	r20, r28
    251e:	4c 19       	sub	r20, r12
    2520:	5d 09       	sbc	r21, r13
    2522:	f7 01       	movw	r30, r14
    2524:	64 85       	ldd	r22, Z+12	; 0x0c
    2526:	75 85       	ldd	r23, Z+13	; 0x0d
    2528:	c5 01       	movw	r24, r10
    252a:	8c 0d       	add	r24, r12
    252c:	9d 1d       	adc	r25, r13
    252e:	0e 94 08 31 	call	0x6210	; 0x6210 <memcpy>
    2532:	0c 0f       	add	r16, r28
    2534:	1d 1f       	adc	r17, r29
    2536:	f7 01       	movw	r30, r14
    2538:	84 81       	ldd	r24, Z+4	; 0x04
    253a:	95 81       	ldd	r25, Z+5	; 0x05
    253c:	08 17       	cp	r16, r24
    253e:	19 07       	cpc	r17, r25
    2540:	10 f0       	brcs	.+4      	; 0x2546 <prvReadBytesFromBuffer+0x7e>
    2542:	08 1b       	sub	r16, r24
    2544:	19 0b       	sbc	r17, r25
    2546:	f7 01       	movw	r30, r14
    2548:	11 83       	std	Z+1, r17	; 0x01
    254a:	00 83       	st	Z, r16
    254c:	ce 01       	movw	r24, r28
    254e:	df 91       	pop	r29
    2550:	cf 91       	pop	r28
    2552:	1f 91       	pop	r17
    2554:	0f 91       	pop	r16
    2556:	ff 90       	pop	r15
    2558:	ef 90       	pop	r14
    255a:	df 90       	pop	r13
    255c:	cf 90       	pop	r12
    255e:	bf 90       	pop	r11
    2560:	af 90       	pop	r10
    2562:	08 95       	ret

00002564 <xStreamBufferGenericCreate>:
    2564:	ef 92       	push	r14
    2566:	ff 92       	push	r15
    2568:	1f 93       	push	r17
    256a:	cf 93       	push	r28
    256c:	df 93       	push	r29
    256e:	eb 01       	movw	r28, r22
    2570:	11 e0       	ldi	r17, 0x01	; 1
    2572:	41 30       	cpi	r20, 0x01	; 1
    2574:	09 f0       	breq	.+2      	; 0x2578 <xStreamBufferGenericCreate+0x14>
    2576:	10 e0       	ldi	r17, 0x00	; 0
    2578:	20 97       	sbiw	r28, 0x00	; 0
    257a:	11 f4       	brne	.+4      	; 0x2580 <xStreamBufferGenericCreate+0x1c>
    257c:	c1 e0       	ldi	r28, 0x01	; 1
    257e:	d0 e0       	ldi	r29, 0x00	; 0
    2580:	7c 01       	movw	r14, r24
    2582:	2f ef       	ldi	r18, 0xFF	; 255
    2584:	e2 1a       	sub	r14, r18
    2586:	f2 0a       	sbc	r15, r18
    2588:	41 96       	adiw	r24, 0x11	; 17
    258a:	53 d8       	rcall	.-3930   	; 0x1632 <pvPortMalloc>
    258c:	00 97       	sbiw	r24, 0x00	; 0
    258e:	81 f0       	breq	.+32     	; 0x25b0 <xStreamBufferGenericCreate+0x4c>
    2590:	20 e1       	ldi	r18, 0x10	; 16
    2592:	fc 01       	movw	r30, r24
    2594:	11 92       	st	Z+, r1
    2596:	2a 95       	dec	r18
    2598:	e9 f7       	brne	.-6      	; 0x2594 <xStreamBufferGenericCreate+0x30>
    259a:	9c 01       	movw	r18, r24
    259c:	20 5f       	subi	r18, 0xF0	; 240
    259e:	3f 4f       	sbci	r19, 0xFF	; 255
    25a0:	fc 01       	movw	r30, r24
    25a2:	35 87       	std	Z+13, r19	; 0x0d
    25a4:	24 87       	std	Z+12, r18	; 0x0c
    25a6:	f5 82       	std	Z+5, r15	; 0x05
    25a8:	e4 82       	std	Z+4, r14	; 0x04
    25aa:	d7 83       	std	Z+7, r29	; 0x07
    25ac:	c6 83       	std	Z+6, r28	; 0x06
    25ae:	16 87       	std	Z+14, r17	; 0x0e
    25b0:	df 91       	pop	r29
    25b2:	cf 91       	pop	r28
    25b4:	1f 91       	pop	r17
    25b6:	ff 90       	pop	r15
    25b8:	ef 90       	pop	r14
    25ba:	08 95       	ret

000025bc <xStreamBufferReset>:
    25bc:	cf 93       	push	r28
    25be:	df 93       	push	r29
    25c0:	fc 01       	movw	r30, r24
    25c2:	27 85       	ldd	r18, Z+15	; 0x0f
    25c4:	0f b6       	in	r0, 0x3f	; 63
    25c6:	f8 94       	cli
    25c8:	0f 92       	push	r0
    25ca:	80 85       	ldd	r24, Z+8	; 0x08
    25cc:	91 85       	ldd	r25, Z+9	; 0x09
    25ce:	89 2b       	or	r24, r25
    25d0:	d1 f4       	brne	.+52     	; 0x2606 <xStreamBufferReset+0x4a>
    25d2:	82 85       	ldd	r24, Z+10	; 0x0a
    25d4:	93 85       	ldd	r25, Z+11	; 0x0b
    25d6:	89 2b       	or	r24, r25
    25d8:	c1 f4       	brne	.+48     	; 0x260a <xStreamBufferReset+0x4e>
    25da:	86 85       	ldd	r24, Z+14	; 0x0e
    25dc:	46 81       	ldd	r20, Z+6	; 0x06
    25de:	57 81       	ldd	r21, Z+7	; 0x07
    25e0:	64 81       	ldd	r22, Z+4	; 0x04
    25e2:	75 81       	ldd	r23, Z+5	; 0x05
    25e4:	a4 85       	ldd	r26, Z+12	; 0x0c
    25e6:	b5 85       	ldd	r27, Z+13	; 0x0d
    25e8:	90 e1       	ldi	r25, 0x10	; 16
    25ea:	ef 01       	movw	r28, r30
    25ec:	19 92       	st	Y+, r1
    25ee:	9a 95       	dec	r25
    25f0:	e9 f7       	brne	.-6      	; 0x25ec <xStreamBufferReset+0x30>
    25f2:	b5 87       	std	Z+13, r27	; 0x0d
    25f4:	a4 87       	std	Z+12, r26	; 0x0c
    25f6:	75 83       	std	Z+5, r23	; 0x05
    25f8:	64 83       	std	Z+4, r22	; 0x04
    25fa:	57 83       	std	Z+7, r21	; 0x07
    25fc:	46 83       	std	Z+6, r20	; 0x06
    25fe:	86 87       	std	Z+14, r24	; 0x0e
    2600:	27 87       	std	Z+15, r18	; 0x0f
    2602:	81 e0       	ldi	r24, 0x01	; 1
    2604:	03 c0       	rjmp	.+6      	; 0x260c <xStreamBufferReset+0x50>
    2606:	80 e0       	ldi	r24, 0x00	; 0
    2608:	01 c0       	rjmp	.+2      	; 0x260c <xStreamBufferReset+0x50>
    260a:	80 e0       	ldi	r24, 0x00	; 0
    260c:	0f 90       	pop	r0
    260e:	0f be       	out	0x3f, r0	; 63
    2610:	df 91       	pop	r29
    2612:	cf 91       	pop	r28
    2614:	08 95       	ret

00002616 <xStreamBufferSpacesAvailable>:
    2616:	fc 01       	movw	r30, r24
    2618:	24 81       	ldd	r18, Z+4	; 0x04
    261a:	35 81       	ldd	r19, Z+5	; 0x05
    261c:	80 81       	ld	r24, Z
    261e:	91 81       	ldd	r25, Z+1	; 0x01
    2620:	42 81       	ldd	r20, Z+2	; 0x02
    2622:	53 81       	ldd	r21, Z+3	; 0x03
    2624:	82 0f       	add	r24, r18
    2626:	93 1f       	adc	r25, r19
    2628:	01 97       	sbiw	r24, 0x01	; 1
    262a:	84 1b       	sub	r24, r20
    262c:	95 0b       	sbc	r25, r21
    262e:	82 17       	cp	r24, r18
    2630:	93 07       	cpc	r25, r19
    2632:	10 f0       	brcs	.+4      	; 0x2638 <xStreamBufferSpacesAvailable+0x22>
    2634:	82 1b       	sub	r24, r18
    2636:	93 0b       	sbc	r25, r19
    2638:	08 95       	ret

0000263a <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void *pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    263a:	2f 92       	push	r2
    263c:	3f 92       	push	r3
    263e:	4f 92       	push	r4
    2640:	5f 92       	push	r5
    2642:	6f 92       	push	r6
    2644:	7f 92       	push	r7
    2646:	8f 92       	push	r8
    2648:	9f 92       	push	r9
    264a:	af 92       	push	r10
    264c:	bf 92       	push	r11
    264e:	cf 92       	push	r12
    2650:	df 92       	push	r13
    2652:	ef 92       	push	r14
    2654:	ff 92       	push	r15
    2656:	0f 93       	push	r16
    2658:	1f 93       	push	r17
    265a:	cf 93       	push	r28
    265c:	df 93       	push	r29
    265e:	cd b7       	in	r28, 0x3d	; 61
    2660:	de b7       	in	r29, 0x3e	; 62
    2662:	29 97       	sbiw	r28, 0x09	; 9
    2664:	0f b6       	in	r0, 0x3f	; 63
    2666:	f8 94       	cli
    2668:	de bf       	out	0x3e, r29	; 62
    266a:	0f be       	out	0x3f, r0	; 63
    266c:	cd bf       	out	0x3d, r28	; 61
    266e:	5c 01       	movw	r10, r24
    2670:	1b 01       	movw	r2, r22
    2672:	2a 01       	movw	r4, r20
    2674:	0e 83       	std	Y+6, r16	; 0x06
    2676:	1f 83       	std	Y+7, r17	; 0x07
    2678:	28 87       	std	Y+8, r18	; 0x08
    267a:	39 87       	std	Y+9, r19	; 0x09

    /* This send function is used to write to both message buffers and stream
    buffers.  If this is a message buffer then the space needed must be
    increased by the amount of bytes needed to store the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    267c:	fc 01       	movw	r30, r24
    267e:	86 85       	ldd	r24, Z+14	; 0x0e
    2680:	80 ff       	sbrs	r24, 0
    2682:	05 c0       	rjmp	.+10     	; 0x268e <xStreamBufferSend+0x54>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    2684:	3a 01       	movw	r6, r20
    2686:	f2 e0       	ldi	r31, 0x02	; 2
    2688:	6f 0e       	add	r6, r31
    268a:	71 1c       	adc	r7, r1
    268c:	01 c0       	rjmp	.+2      	; 0x2690 <xStreamBufferSend+0x56>
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReturn, xSpace = 0;
size_t xRequiredSpace = xDataLengthBytes;
    268e:	3a 01       	movw	r6, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    2690:	8e 81       	ldd	r24, Y+6	; 0x06
    2692:	9f 81       	ldd	r25, Y+7	; 0x07
    2694:	a8 85       	ldd	r26, Y+8	; 0x08
    2696:	b9 85       	ldd	r27, Y+9	; 0x09
    2698:	89 2b       	or	r24, r25
    269a:	8a 2b       	or	r24, r26
    269c:	8b 2b       	or	r24, r27
    269e:	09 f4       	brne	.+2      	; 0x26a2 <xStreamBufferSend+0x68>
    26a0:	34 c0       	rjmp	.+104    	; 0x270a <xStreamBufferSend+0xd0>
    {
        vTaskSetTimeOutState( &xTimeOut );
    26a2:	ce 01       	movw	r24, r28
    26a4:	01 96       	adiw	r24, 0x01	; 1
    26a6:	24 d6       	rcall	.+3144   	; 0x32f0 <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
            buffer. */
            taskENTER_CRITICAL();
    26a8:	0f b6       	in	r0, 0x3f	; 63
    26aa:	f8 94       	cli
    26ac:	0f 92       	push	r0
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    26ae:	c5 01       	movw	r24, r10
    26b0:	b2 df       	rcall	.-156    	; 0x2616 <xStreamBufferSpacesAvailable>
    26b2:	4c 01       	movw	r8, r24

                if( xSpace < xRequiredSpace )
    26b4:	86 15       	cp	r24, r6
    26b6:	97 05       	cpc	r25, r7
    26b8:	18 f5       	brcc	.+70     	; 0x2700 <xStreamBufferSend+0xc6>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClear( NULL );
    26ba:	80 e0       	ldi	r24, 0x00	; 0
    26bc:	90 e0       	ldi	r25, 0x00	; 0
    26be:	0e 94 cc 1c 	call	0x3998	; 0x3998 <xTaskNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    26c2:	96 d6       	rcall	.+3372   	; 0x33f0 <xTaskGetCurrentTaskHandle>
    26c4:	f5 01       	movw	r30, r10
    26c6:	93 87       	std	Z+11, r25	; 0x0b
    26c8:	82 87       	std	Z+10, r24	; 0x0a
                {
                    taskEXIT_CRITICAL();
                    break;
                }
            }
            taskEXIT_CRITICAL();
    26ca:	0f 90       	pop	r0
    26cc:	0f be       	out	0x3f, r0	; 63

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    26ce:	ce 80       	ldd	r12, Y+6	; 0x06
    26d0:	df 80       	ldd	r13, Y+7	; 0x07
    26d2:	e8 84       	ldd	r14, Y+8	; 0x08
    26d4:	f9 84       	ldd	r15, Y+9	; 0x09
    26d6:	00 e0       	ldi	r16, 0x00	; 0
    26d8:	10 e0       	ldi	r17, 0x00	; 0
    26da:	20 e0       	ldi	r18, 0x00	; 0
    26dc:	30 e0       	ldi	r19, 0x00	; 0
    26de:	a9 01       	movw	r20, r18
    26e0:	60 e0       	ldi	r22, 0x00	; 0
    26e2:	70 e0       	ldi	r23, 0x00	; 0
    26e4:	cb 01       	movw	r24, r22
    26e6:	cd d7       	rcall	.+3994   	; 0x3682 <xTaskNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
    26e8:	f5 01       	movw	r30, r10
    26ea:	13 86       	std	Z+11, r1	; 0x0b
    26ec:	12 86       	std	Z+10, r1	; 0x0a

        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    26ee:	be 01       	movw	r22, r28
    26f0:	6a 5f       	subi	r22, 0xFA	; 250
    26f2:	7f 4f       	sbci	r23, 0xFF	; 255
    26f4:	ce 01       	movw	r24, r28
    26f6:	01 96       	adiw	r24, 0x01	; 1
    26f8:	22 d6       	rcall	.+3140   	; 0x333e <xTaskCheckForTimeOut>
    26fa:	88 23       	and	r24, r24
    26fc:	a9 f2       	breq	.-86     	; 0x26a8 <xStreamBufferSend+0x6e>
    26fe:	02 c0       	rjmp	.+4      	; 0x2704 <xStreamBufferSend+0xca>
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
                }
                else
                {
                    taskEXIT_CRITICAL();
    2700:	0f 90       	pop	r0
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
    2702:	0f be       	out	0x3f, r0	; 63
    2704:	81 14       	cp	r8, r1
    2706:	91 04       	cpc	r9, r1
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    2708:	19 f4       	brne	.+6      	; 0x2710 <xStreamBufferSend+0xd6>
    270a:	c5 01       	movw	r24, r10
    270c:	84 df       	rcall	.-248    	; 0x2616 <xStreamBufferSpacesAvailable>
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    270e:	4c 01       	movw	r8, r24
    2710:	83 01       	movw	r16, r6
    2712:	94 01       	movw	r18, r8
    2714:	a2 01       	movw	r20, r4
    2716:	b1 01       	movw	r22, r2
    2718:	c5 01       	movw	r24, r10
    271a:	96 de       	rcall	.-724    	; 0x2448 <prvWriteMessageToBuffer>

    if( xReturn > ( size_t ) 0 )
    271c:	7c 01       	movw	r14, r24
    271e:	89 2b       	or	r24, r25
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    2720:	e1 f0       	breq	.+56     	; 0x275a <xStreamBufferSend+0x120>
    2722:	c5 01       	movw	r24, r10
    2724:	35 de       	rcall	.-918    	; 0x2390 <prvBytesInBuffer>
    2726:	f5 01       	movw	r30, r10
    2728:	26 81       	ldd	r18, Z+6	; 0x06
    272a:	37 81       	ldd	r19, Z+7	; 0x07
    272c:	82 17       	cp	r24, r18
    272e:	93 07       	cpc	r25, r19
        {
            sbSEND_COMPLETED( pxStreamBuffer );
    2730:	a0 f0       	brcs	.+40     	; 0x275a <xStreamBufferSend+0x120>
    2732:	10 d3       	rcall	.+1568   	; 0x2d54 <vTaskSuspendAll>
    2734:	f5 01       	movw	r30, r10
    2736:	80 85       	ldd	r24, Z+8	; 0x08
    2738:	91 85       	ldd	r25, Z+9	; 0x09
    273a:	89 2b       	or	r24, r25
    273c:	69 f0       	breq	.+26     	; 0x2758 <xStreamBufferSend+0x11e>
    273e:	80 85       	ldd	r24, Z+8	; 0x08
    2740:	91 85       	ldd	r25, Z+9	; 0x09
    2742:	00 e0       	ldi	r16, 0x00	; 0
    2744:	10 e0       	ldi	r17, 0x00	; 0
    2746:	20 e0       	ldi	r18, 0x00	; 0
    2748:	40 e0       	ldi	r20, 0x00	; 0
    274a:	50 e0       	ldi	r21, 0x00	; 0
    274c:	ba 01       	movw	r22, r20
    274e:	0e 94 cb 1b 	call	0x3796	; 0x3796 <xTaskGenericNotify>
    2752:	f5 01       	movw	r30, r10
    2754:	11 86       	std	Z+9, r1	; 0x09
    2756:	10 86       	std	Z+8, r1	; 0x08
    2758:	e6 d3       	rcall	.+1996   	; 0x2f26 <xTaskResumeAll>
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    275a:	c7 01       	movw	r24, r14
    275c:	29 96       	adiw	r28, 0x09	; 9
    275e:	0f b6       	in	r0, 0x3f	; 63
    2760:	f8 94       	cli
    2762:	de bf       	out	0x3e, r29	; 62
    2764:	0f be       	out	0x3f, r0	; 63
    2766:	cd bf       	out	0x3d, r28	; 61
    2768:	df 91       	pop	r29
    276a:	cf 91       	pop	r28
    276c:	1f 91       	pop	r17
    276e:	0f 91       	pop	r16
    2770:	ff 90       	pop	r15
    2772:	ef 90       	pop	r14
    2774:	df 90       	pop	r13
    2776:	cf 90       	pop	r12
    2778:	bf 90       	pop	r11
    277a:	af 90       	pop	r10
    277c:	9f 90       	pop	r9
    277e:	8f 90       	pop	r8
    2780:	7f 90       	pop	r7
    2782:	6f 90       	pop	r6
    2784:	5f 90       	pop	r5
    2786:	4f 90       	pop	r4
    2788:	3f 90       	pop	r3
    278a:	2f 90       	pop	r2
    278c:	08 95       	ret

0000278e <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void *pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    278e:	af 92       	push	r10
    2790:	bf 92       	push	r11
    2792:	cf 92       	push	r12
    2794:	df 92       	push	r13
    2796:	ef 92       	push	r14
    2798:	ff 92       	push	r15
    279a:	0f 93       	push	r16
    279c:	1f 93       	push	r17
    279e:	cf 93       	push	r28
    27a0:	df 93       	push	r29
    27a2:	ec 01       	movw	r28, r24
    27a4:	5b 01       	movw	r10, r22
    27a6:	6a 01       	movw	r12, r20
    27a8:	79 01       	movw	r14, r18

    /* This send function is used to write to both message buffers and stream
    buffers.  If this is a message buffer then the space needed must be
    increased by the amount of bytes needed to store the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    27aa:	8e 85       	ldd	r24, Y+14	; 0x0e
    27ac:	80 ff       	sbrs	r24, 0
    27ae:	04 c0       	rjmp	.+8      	; 0x27b8 <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    27b0:	8a 01       	movw	r16, r20
    27b2:	0e 5f       	subi	r16, 0xFE	; 254
    27b4:	1f 4f       	sbci	r17, 0xFF	; 255
    27b6:	01 c0       	rjmp	.+2      	; 0x27ba <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReturn, xSpace;
size_t xRequiredSpace = xDataLengthBytes;
    27b8:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    27ba:	ce 01       	movw	r24, r28
    27bc:	2c df       	rcall	.-424    	; 0x2616 <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    27be:	9c 01       	movw	r18, r24
    27c0:	a6 01       	movw	r20, r12
    27c2:	b5 01       	movw	r22, r10
    27c4:	ce 01       	movw	r24, r28
    27c6:	40 de       	rcall	.-896    	; 0x2448 <prvWriteMessageToBuffer>
    27c8:	6c 01       	movw	r12, r24

    if( xReturn > ( size_t ) 0 )
    27ca:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    27cc:	b9 f0       	breq	.+46     	; 0x27fc <xStreamBufferSendFromISR+0x6e>
    27ce:	ce 01       	movw	r24, r28
    27d0:	df dd       	rcall	.-1090   	; 0x2390 <prvBytesInBuffer>
    27d2:	2e 81       	ldd	r18, Y+6	; 0x06
    27d4:	3f 81       	ldd	r19, Y+7	; 0x07
    27d6:	82 17       	cp	r24, r18
    27d8:	93 07       	cpc	r25, r19
    27da:	80 f0       	brcs	.+32     	; 0x27fc <xStreamBufferSendFromISR+0x6e>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    27dc:	88 85       	ldd	r24, Y+8	; 0x08
    27de:	99 85       	ldd	r25, Y+9	; 0x09
    27e0:	89 2b       	or	r24, r25
    27e2:	61 f0       	breq	.+24     	; 0x27fc <xStreamBufferSendFromISR+0x6e>
    27e4:	88 85       	ldd	r24, Y+8	; 0x08
    27e6:	99 85       	ldd	r25, Y+9	; 0x09
    27e8:	00 e0       	ldi	r16, 0x00	; 0
    27ea:	10 e0       	ldi	r17, 0x00	; 0
    27ec:	20 e0       	ldi	r18, 0x00	; 0
    27ee:	40 e0       	ldi	r20, 0x00	; 0
    27f0:	50 e0       	ldi	r21, 0x00	; 0
    27f2:	ba 01       	movw	r22, r20
    27f4:	0e 94 43 1c 	call	0x3886	; 0x3886 <xTaskGenericNotifyFromISR>
    27f8:	19 86       	std	Y+9, r1	; 0x09
    27fa:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    27fc:	c6 01       	movw	r24, r12
    27fe:	df 91       	pop	r29
    2800:	cf 91       	pop	r28
    2802:	1f 91       	pop	r17
    2804:	0f 91       	pop	r16
    2806:	ff 90       	pop	r15
    2808:	ef 90       	pop	r14
    280a:	df 90       	pop	r13
    280c:	cf 90       	pop	r12
    280e:	bf 90       	pop	r11
    2810:	af 90       	pop	r10
    2812:	08 95       	ret

00002814 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void *pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    2814:	4f 92       	push	r4
    2816:	5f 92       	push	r5
    2818:	6f 92       	push	r6
    281a:	7f 92       	push	r7
    281c:	8f 92       	push	r8
    281e:	9f 92       	push	r9
    2820:	af 92       	push	r10
    2822:	bf 92       	push	r11
    2824:	cf 92       	push	r12
    2826:	df 92       	push	r13
    2828:	ef 92       	push	r14
    282a:	ff 92       	push	r15
    282c:	0f 93       	push	r16
    282e:	1f 93       	push	r17
    2830:	cf 93       	push	r28
    2832:	df 93       	push	r29
    2834:	1f 92       	push	r1
    2836:	1f 92       	push	r1
    2838:	cd b7       	in	r28, 0x3d	; 61
    283a:	de b7       	in	r29, 0x3e	; 62
    283c:	5c 01       	movw	r10, r24
    283e:	2b 01       	movw	r4, r22
    2840:	3a 01       	movw	r6, r20
    2842:	68 01       	movw	r12, r16
    2844:	79 01       	movw	r14, r18
    /* This receive function is used by both message buffers, which store
    discrete messages, and stream buffers, which store a continuous stream of
    bytes.  Discrete messages include an additional
    sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    2846:	fc 01       	movw	r30, r24
    2848:	86 85       	ldd	r24, Z+14	; 0x0e
    284a:	80 fd       	sbrc	r24, 0
    284c:	03 c0       	rjmp	.+6      	; 0x2854 <xStreamBufferReceive+0x40>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    284e:	81 2c       	mov	r8, r1
    2850:	91 2c       	mov	r9, r1
    2852:	04 c0       	rjmp	.+8      	; 0x285c <xStreamBufferReceive+0x48>
    bytes.  Discrete messages include an additional
    sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    2854:	68 94       	set
    2856:	88 24       	eor	r8, r8
    2858:	81 f8       	bld	r8, 1
    285a:	91 2c       	mov	r9, r1
    else
    {
        xBytesToStoreMessageLength = 0;
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    285c:	c1 14       	cp	r12, r1
    285e:	d1 04       	cpc	r13, r1
    2860:	e1 04       	cpc	r14, r1
    2862:	f1 04       	cpc	r15, r1
    2864:	31 f1       	breq	.+76     	; 0x28b2 <xStreamBufferReceive+0x9e>
    {
        /* Checking if there is data and clearing the notification state must be
        performed atomically. */
        taskENTER_CRITICAL();
    2866:	0f b6       	in	r0, 0x3f	; 63
    2868:	f8 94       	cli
    286a:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    286c:	c5 01       	movw	r24, r10
    286e:	90 dd       	rcall	.-1248   	; 0x2390 <prvBytesInBuffer>
    2870:	8c 01       	movw	r16, r24
            /* If this function was invoked by a message buffer read then
            xBytesToStoreMessageLength holds the number of bytes used to hold
            the length of the next discrete message.  If this function was
            invoked by a stream buffer read then xBytesToStoreMessageLength will
            be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    2872:	88 16       	cp	r8, r24
    2874:	99 06       	cpc	r9, r25
    2876:	40 f0       	brcs	.+16     	; 0x2888 <xStreamBufferReceive+0x74>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    2878:	80 e0       	ldi	r24, 0x00	; 0
    287a:	90 e0       	ldi	r25, 0x00	; 0
    287c:	0e 94 cc 1c 	call	0x3998	; 0x3998 <xTaskNotifyStateClear>

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    2880:	b7 d5       	rcall	.+2926   	; 0x33f0 <xTaskGetCurrentTaskHandle>
    2882:	f5 01       	movw	r30, r10
    2884:	91 87       	std	Z+9, r25	; 0x09
    2886:	80 87       	std	Z+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    2888:	0f 90       	pop	r0
    288a:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    288c:	80 16       	cp	r8, r16
    288e:	91 06       	cpc	r9, r17
    2890:	b0 f0       	brcs	.+44     	; 0x28be <xStreamBufferReceive+0xaa>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    2892:	00 e0       	ldi	r16, 0x00	; 0
    2894:	10 e0       	ldi	r17, 0x00	; 0
    2896:	20 e0       	ldi	r18, 0x00	; 0
    2898:	30 e0       	ldi	r19, 0x00	; 0
    289a:	a9 01       	movw	r20, r18
    289c:	60 e0       	ldi	r22, 0x00	; 0
    289e:	70 e0       	ldi	r23, 0x00	; 0
    28a0:	cb 01       	movw	r24, r22
    28a2:	ef d6       	rcall	.+3550   	; 0x3682 <xTaskNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    28a4:	f5 01       	movw	r30, r10
    28a6:	11 86       	std	Z+9, r1	; 0x09

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    28a8:	10 86       	std	Z+8, r1	; 0x08
    28aa:	c5 01       	movw	r24, r10
    28ac:	71 dd       	rcall	.-1310   	; 0x2390 <prvBytesInBuffer>
    28ae:	8c 01       	movw	r16, r24
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    28b0:	03 c0       	rjmp	.+6      	; 0x28b8 <xStreamBufferReceive+0xa4>
    28b2:	c5 01       	movw	r24, r10
    28b4:	6d dd       	rcall	.-1318   	; 0x2390 <prvBytesInBuffer>
    28b6:	8c 01       	movw	r16, r24
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
    holds the number of bytes used to store the message length) or a stream of
    bytes (where xBytesToStoreMessageLength is zero), the number of bytes
    available must be greater than xBytesToStoreMessageLength to be able to
    read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    28b8:	80 16       	cp	r8, r16
    28ba:	91 06       	cpc	r9, r17
    28bc:	b8 f5       	brcc	.+110    	; 0x292c <xStreamBufferReceive+0x118>
                                        size_t xBytesToStoreMessageLength )
{
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

    if( xBytesToStoreMessageLength != ( size_t ) 0 )
    28be:	81 14       	cp	r8, r1
    28c0:	91 04       	cpc	r9, r1
    28c2:	c1 f0       	breq	.+48     	; 0x28f4 <xStreamBufferReceive+0xe0>
    {
        /* A discrete message is being received.  First receive the length
        of the message.  A copy of the tail is stored so the buffer can be
        returned to its prior state if the length of the message is too
        large for the provided buffer. */
        xOriginalTail = pxStreamBuffer->xTail;
    28c4:	f5 01       	movw	r30, r10
    28c6:	e0 80       	ld	r14, Z
    28c8:	f1 80       	ldd	r15, Z+1	; 0x01
        ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
    28ca:	98 01       	movw	r18, r16
    28cc:	a4 01       	movw	r20, r8
    28ce:	be 01       	movw	r22, r28
    28d0:	6f 5f       	subi	r22, 0xFF	; 255
    28d2:	7f 4f       	sbci	r23, 0xFF	; 255
    28d4:	c5 01       	movw	r24, r10
    28d6:	f8 dd       	rcall	.-1040   	; 0x24c8 <prvReadBytesFromBuffer>
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
    28d8:	89 81       	ldd	r24, Y+1	; 0x01
    28da:	9a 81       	ldd	r25, Y+2	; 0x02

        /* Reduce the number of bytes available by the number of bytes just
        read out. */
        xBytesAvailable -= xBytesToStoreMessageLength;
    28dc:	08 19       	sub	r16, r8
    28de:	19 09       	sbc	r17, r9

        /* Check there is enough space in the buffer provided by the
        user. */
        if( xNextMessageLength > xBufferLengthBytes )
    28e0:	68 16       	cp	r6, r24
    28e2:	79 06       	cpc	r7, r25
    28e4:	30 f4       	brcc	.+12     	; 0x28f2 <xStreamBufferReceive+0xde>
        {
            /* The user has provided insufficient space to read the message
            so return the buffer to its previous state (so the length of
            the message is in the buffer again). */
            pxStreamBuffer->xTail = xOriginalTail;
    28e6:	f5 01       	movw	r30, r10
    28e8:	f1 82       	std	Z+1, r15	; 0x01
    28ea:	e0 82       	st	Z, r14
            xNextMessageLength = 0;
    28ec:	61 2c       	mov	r6, r1
    28ee:	71 2c       	mov	r7, r1
        of the message.  A copy of the tail is stored so the buffer can be
        returned to its prior state if the length of the message is too
        large for the provided buffer. */
        xOriginalTail = pxStreamBuffer->xTail;
        ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
    28f0:	01 c0       	rjmp	.+2      	; 0x28f4 <xStreamBufferReceive+0xe0>
        message), so read as many bytes as possible. */
        xNextMessageLength = xBufferLengthBytes;
    }

    /* Read the actual data. */
    xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
    28f2:	3c 01       	movw	r6, r24
    28f4:	98 01       	movw	r18, r16
    28f6:	a3 01       	movw	r20, r6
    28f8:	b2 01       	movw	r22, r4
    28fa:	c5 01       	movw	r24, r10
    28fc:	e5 dd       	rcall	.-1078   	; 0x24c8 <prvReadBytesFromBuffer>
    if( xBytesAvailable > xBytesToStoreMessageLength )
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    28fe:	7c 01       	movw	r14, r24
    2900:	89 2b       	or	r24, r25
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    2902:	b1 f0       	breq	.+44     	; 0x2930 <xStreamBufferReceive+0x11c>
    2904:	27 d2       	rcall	.+1102   	; 0x2d54 <vTaskSuspendAll>
    2906:	f5 01       	movw	r30, r10
    2908:	82 85       	ldd	r24, Z+10	; 0x0a
    290a:	93 85       	ldd	r25, Z+11	; 0x0b
    290c:	89 2b       	or	r24, r25
    290e:	61 f0       	breq	.+24     	; 0x2928 <xStreamBufferReceive+0x114>
    2910:	82 85       	ldd	r24, Z+10	; 0x0a
    2912:	93 85       	ldd	r25, Z+11	; 0x0b
    2914:	00 e0       	ldi	r16, 0x00	; 0
    2916:	10 e0       	ldi	r17, 0x00	; 0
    2918:	20 e0       	ldi	r18, 0x00	; 0
    291a:	40 e0       	ldi	r20, 0x00	; 0
    291c:	50 e0       	ldi	r21, 0x00	; 0
    291e:	ba 01       	movw	r22, r20
    2920:	3a d7       	rcall	.+3700   	; 0x3796 <xTaskGenericNotify>
    2922:	f5 01       	movw	r30, r10
    2924:	13 86       	std	Z+11, r1	; 0x0b
    2926:	12 86       	std	Z+10, r1	; 0x0a
    2928:	fe d2       	rcall	.+1532   	; 0x2f26 <xTaskResumeAll>
    292a:	02 c0       	rjmp	.+4      	; 0x2930 <xStreamBufferReceive+0x11c>
                             void *pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    292c:	e1 2c       	mov	r14, r1
    292e:	f1 2c       	mov	r15, r1
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    2930:	c7 01       	movw	r24, r14
    2932:	0f 90       	pop	r0
    2934:	0f 90       	pop	r0
    2936:	df 91       	pop	r29
    2938:	cf 91       	pop	r28
    293a:	1f 91       	pop	r17
    293c:	0f 91       	pop	r16
    293e:	ff 90       	pop	r15
    2940:	ef 90       	pop	r14
    2942:	df 90       	pop	r13
    2944:	cf 90       	pop	r12
    2946:	bf 90       	pop	r11
    2948:	af 90       	pop	r10
    294a:	9f 90       	pop	r9
    294c:	8f 90       	pop	r8
    294e:	7f 90       	pop	r7
    2950:	6f 90       	pop	r6
    2952:	5f 90       	pop	r5
    2954:	4f 90       	pop	r4
    2956:	08 95       	ret

00002958 <prvResetNextTaskUnblockTime>:
    2958:	e0 91 6f 18 	lds	r30, 0x186F	; 0x80186f <pxDelayedTaskList>
    295c:	f0 91 70 18 	lds	r31, 0x1870	; 0x801870 <pxDelayedTaskList+0x1>
    2960:	80 81       	ld	r24, Z
    2962:	81 11       	cpse	r24, r1
    2964:	0c c0       	rjmp	.+24     	; 0x297e <prvResetNextTaskUnblockTime+0x26>
    2966:	8f ef       	ldi	r24, 0xFF	; 255
    2968:	9f ef       	ldi	r25, 0xFF	; 255
    296a:	dc 01       	movw	r26, r24
    296c:	80 93 3c 18 	sts	0x183C, r24	; 0x80183c <xNextTaskUnblockTime>
    2970:	90 93 3d 18 	sts	0x183D, r25	; 0x80183d <xNextTaskUnblockTime+0x1>
    2974:	a0 93 3e 18 	sts	0x183E, r26	; 0x80183e <xNextTaskUnblockTime+0x2>
    2978:	b0 93 3f 18 	sts	0x183F, r27	; 0x80183f <xNextTaskUnblockTime+0x3>
    297c:	08 95       	ret
    297e:	e0 91 6f 18 	lds	r30, 0x186F	; 0x80186f <pxDelayedTaskList>
    2982:	f0 91 70 18 	lds	r31, 0x1870	; 0x801870 <pxDelayedTaskList+0x1>
    2986:	07 80       	ldd	r0, Z+7	; 0x07
    2988:	f0 85       	ldd	r31, Z+8	; 0x08
    298a:	e0 2d       	mov	r30, r0
    298c:	00 84       	ldd	r0, Z+8	; 0x08
    298e:	f1 85       	ldd	r31, Z+9	; 0x09
    2990:	e0 2d       	mov	r30, r0
    2992:	82 81       	ldd	r24, Z+2	; 0x02
    2994:	93 81       	ldd	r25, Z+3	; 0x03
    2996:	a4 81       	ldd	r26, Z+4	; 0x04
    2998:	b5 81       	ldd	r27, Z+5	; 0x05
    299a:	80 93 3c 18 	sts	0x183C, r24	; 0x80183c <xNextTaskUnblockTime>
    299e:	90 93 3d 18 	sts	0x183D, r25	; 0x80183d <xNextTaskUnblockTime+0x1>
    29a2:	a0 93 3e 18 	sts	0x183E, r26	; 0x80183e <xNextTaskUnblockTime+0x2>
    29a6:	b0 93 3f 18 	sts	0x183F, r27	; 0x80183f <xNextTaskUnblockTime+0x3>
    29aa:	08 95       	ret

000029ac <prvAddCurrentTaskToDelayedList>:
    29ac:	8f 92       	push	r8
    29ae:	9f 92       	push	r9
    29b0:	af 92       	push	r10
    29b2:	bf 92       	push	r11
    29b4:	cf 92       	push	r12
    29b6:	df 92       	push	r13
    29b8:	ef 92       	push	r14
    29ba:	ff 92       	push	r15
    29bc:	cf 93       	push	r28
    29be:	6b 01       	movw	r12, r22
    29c0:	7c 01       	movw	r14, r24
    29c2:	c4 2f       	mov	r28, r20
    29c4:	80 90 46 18 	lds	r8, 0x1846	; 0x801846 <xTickCount>
    29c8:	90 90 47 18 	lds	r9, 0x1847	; 0x801847 <xTickCount+0x1>
    29cc:	a0 90 48 18 	lds	r10, 0x1848	; 0x801848 <xTickCount+0x2>
    29d0:	b0 90 49 18 	lds	r11, 0x1849	; 0x801849 <xTickCount+0x3>
    29d4:	80 91 c9 18 	lds	r24, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    29d8:	90 91 ca 18 	lds	r25, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    29dc:	02 96       	adiw	r24, 0x02	; 2
    29de:	0e 94 76 0c 	call	0x18ec	; 0x18ec <uxListRemove>
    29e2:	8f ef       	ldi	r24, 0xFF	; 255
    29e4:	c8 16       	cp	r12, r24
    29e6:	d8 06       	cpc	r13, r24
    29e8:	e8 06       	cpc	r14, r24
    29ea:	f8 06       	cpc	r15, r24
    29ec:	69 f4       	brne	.+26     	; 0x2a08 <prvAddCurrentTaskToDelayedList+0x5c>
    29ee:	cc 23       	and	r28, r28
    29f0:	59 f0       	breq	.+22     	; 0x2a08 <prvAddCurrentTaskToDelayedList+0x5c>
    29f2:	60 91 c9 18 	lds	r22, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    29f6:	70 91 ca 18 	lds	r23, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    29fa:	6e 5f       	subi	r22, 0xFE	; 254
    29fc:	7f 4f       	sbci	r23, 0xFF	; 255
    29fe:	8b e4       	ldi	r24, 0x4B	; 75
    2a00:	98 e1       	ldi	r25, 0x18	; 24
    2a02:	0e 94 18 0c 	call	0x1830	; 0x1830 <vListInsertEnd>
    2a06:	3f c0       	rjmp	.+126    	; 0x2a86 <prvAddCurrentTaskToDelayedList+0xda>
    2a08:	c8 0c       	add	r12, r8
    2a0a:	d9 1c       	adc	r13, r9
    2a0c:	ea 1c       	adc	r14, r10
    2a0e:	fb 1c       	adc	r15, r11
    2a10:	e0 91 c9 18 	lds	r30, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    2a14:	f0 91 ca 18 	lds	r31, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    2a18:	c2 82       	std	Z+2, r12	; 0x02
    2a1a:	d3 82       	std	Z+3, r13	; 0x03
    2a1c:	e4 82       	std	Z+4, r14	; 0x04
    2a1e:	f5 82       	std	Z+5, r15	; 0x05
    2a20:	c8 14       	cp	r12, r8
    2a22:	d9 04       	cpc	r13, r9
    2a24:	ea 04       	cpc	r14, r10
    2a26:	fb 04       	cpc	r15, r11
    2a28:	68 f4       	brcc	.+26     	; 0x2a44 <prvAddCurrentTaskToDelayedList+0x98>
    2a2a:	60 91 c9 18 	lds	r22, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    2a2e:	70 91 ca 18 	lds	r23, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    2a32:	80 91 6d 18 	lds	r24, 0x186D	; 0x80186d <pxOverflowDelayedTaskList>
    2a36:	90 91 6e 18 	lds	r25, 0x186E	; 0x80186e <pxOverflowDelayedTaskList+0x1>
    2a3a:	6e 5f       	subi	r22, 0xFE	; 254
    2a3c:	7f 4f       	sbci	r23, 0xFF	; 255
    2a3e:	0e 94 39 0c 	call	0x1872	; 0x1872 <vListInsert>
    2a42:	21 c0       	rjmp	.+66     	; 0x2a86 <prvAddCurrentTaskToDelayedList+0xda>
    2a44:	60 91 c9 18 	lds	r22, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    2a48:	70 91 ca 18 	lds	r23, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    2a4c:	80 91 6f 18 	lds	r24, 0x186F	; 0x80186f <pxDelayedTaskList>
    2a50:	90 91 70 18 	lds	r25, 0x1870	; 0x801870 <pxDelayedTaskList+0x1>
    2a54:	6e 5f       	subi	r22, 0xFE	; 254
    2a56:	7f 4f       	sbci	r23, 0xFF	; 255
    2a58:	0e 94 39 0c 	call	0x1872	; 0x1872 <vListInsert>
    2a5c:	80 91 3c 18 	lds	r24, 0x183C	; 0x80183c <xNextTaskUnblockTime>
    2a60:	90 91 3d 18 	lds	r25, 0x183D	; 0x80183d <xNextTaskUnblockTime+0x1>
    2a64:	a0 91 3e 18 	lds	r26, 0x183E	; 0x80183e <xNextTaskUnblockTime+0x2>
    2a68:	b0 91 3f 18 	lds	r27, 0x183F	; 0x80183f <xNextTaskUnblockTime+0x3>
    2a6c:	c8 16       	cp	r12, r24
    2a6e:	d9 06       	cpc	r13, r25
    2a70:	ea 06       	cpc	r14, r26
    2a72:	fb 06       	cpc	r15, r27
    2a74:	40 f4       	brcc	.+16     	; 0x2a86 <prvAddCurrentTaskToDelayedList+0xda>
    2a76:	c0 92 3c 18 	sts	0x183C, r12	; 0x80183c <xNextTaskUnblockTime>
    2a7a:	d0 92 3d 18 	sts	0x183D, r13	; 0x80183d <xNextTaskUnblockTime+0x1>
    2a7e:	e0 92 3e 18 	sts	0x183E, r14	; 0x80183e <xNextTaskUnblockTime+0x2>
    2a82:	f0 92 3f 18 	sts	0x183F, r15	; 0x80183f <xNextTaskUnblockTime+0x3>
    2a86:	cf 91       	pop	r28
    2a88:	ff 90       	pop	r15
    2a8a:	ef 90       	pop	r14
    2a8c:	df 90       	pop	r13
    2a8e:	cf 90       	pop	r12
    2a90:	bf 90       	pop	r11
    2a92:	af 90       	pop	r10
    2a94:	9f 90       	pop	r9
    2a96:	8f 90       	pop	r8
    2a98:	08 95       	ret

00002a9a <xTaskCreate>:
    2a9a:	4f 92       	push	r4
    2a9c:	5f 92       	push	r5
    2a9e:	6f 92       	push	r6
    2aa0:	7f 92       	push	r7
    2aa2:	8f 92       	push	r8
    2aa4:	9f 92       	push	r9
    2aa6:	af 92       	push	r10
    2aa8:	bf 92       	push	r11
    2aaa:	cf 92       	push	r12
    2aac:	df 92       	push	r13
    2aae:	ef 92       	push	r14
    2ab0:	ff 92       	push	r15
    2ab2:	0f 93       	push	r16
    2ab4:	1f 93       	push	r17
    2ab6:	cf 93       	push	r28
    2ab8:	df 93       	push	r29
    2aba:	4c 01       	movw	r8, r24
    2abc:	6b 01       	movw	r12, r22
    2abe:	5a 01       	movw	r10, r20
    2ac0:	29 01       	movw	r4, r18
    2ac2:	ca 01       	movw	r24, r20
    2ac4:	0e 94 19 0b 	call	0x1632	; 0x1632 <pvPortMalloc>
    2ac8:	3c 01       	movw	r6, r24
    2aca:	89 2b       	or	r24, r25
    2acc:	09 f4       	brne	.+2      	; 0x2ad0 <xTaskCreate+0x36>
    2ace:	f4 c0       	rjmp	.+488    	; 0x2cb8 <xTaskCreate+0x21e>
    2ad0:	80 e3       	ldi	r24, 0x30	; 48
    2ad2:	90 e0       	ldi	r25, 0x00	; 0
    2ad4:	0e 94 19 0b 	call	0x1632	; 0x1632 <pvPortMalloc>
    2ad8:	ec 01       	movw	r28, r24
    2ada:	89 2b       	or	r24, r25
    2adc:	99 f0       	breq	.+38     	; 0x2b04 <xTaskCreate+0x6a>
    2ade:	7c 8e       	std	Y+28, r7	; 0x1c
    2ae0:	6b 8e       	std	Y+27, r6	; 0x1b
    2ae2:	a5 01       	movw	r20, r10
    2ae4:	65 ea       	ldi	r22, 0xA5	; 165
    2ae6:	70 e0       	ldi	r23, 0x00	; 0
    2ae8:	c3 01       	movw	r24, r6
    2aea:	0e 94 11 31 	call	0x6222	; 0x6222 <memset>
    2aee:	21 e0       	ldi	r18, 0x01	; 1
    2af0:	a2 1a       	sub	r10, r18
    2af2:	b1 08       	sbc	r11, r1
    2af4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2af6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2af8:	a8 0e       	add	r10, r24
    2afa:	b9 1e       	adc	r11, r25
    2afc:	c1 14       	cp	r12, r1
    2afe:	d1 04       	cpc	r13, r1
    2b00:	29 f4       	brne	.+10     	; 0x2b0c <xTaskCreate+0x72>
    2b02:	20 c0       	rjmp	.+64     	; 0x2b44 <xTaskCreate+0xaa>
    2b04:	c3 01       	movw	r24, r6
    2b06:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <vPortFree>
    2b0a:	d6 c0       	rjmp	.+428    	; 0x2cb8 <xTaskCreate+0x21e>
    2b0c:	d6 01       	movw	r26, r12
    2b0e:	8c 91       	ld	r24, X
    2b10:	8d 8f       	std	Y+29, r24	; 0x1d
    2b12:	8c 91       	ld	r24, X
    2b14:	88 23       	and	r24, r24
    2b16:	a1 f0       	breq	.+40     	; 0x2b40 <xTaskCreate+0xa6>
    2b18:	ae 01       	movw	r20, r28
    2b1a:	42 5e       	subi	r20, 0xE2	; 226
    2b1c:	5f 4f       	sbci	r21, 0xFF	; 255
    2b1e:	f6 01       	movw	r30, r12
    2b20:	31 96       	adiw	r30, 0x01	; 1
    2b22:	b8 e0       	ldi	r27, 0x08	; 8
    2b24:	cb 0e       	add	r12, r27
    2b26:	d1 1c       	adc	r13, r1
    2b28:	cf 01       	movw	r24, r30
    2b2a:	21 91       	ld	r18, Z+
    2b2c:	da 01       	movw	r26, r20
    2b2e:	2d 93       	st	X+, r18
    2b30:	ad 01       	movw	r20, r26
    2b32:	dc 01       	movw	r26, r24
    2b34:	8c 91       	ld	r24, X
    2b36:	88 23       	and	r24, r24
    2b38:	19 f0       	breq	.+6      	; 0x2b40 <xTaskCreate+0xa6>
    2b3a:	ce 16       	cp	r12, r30
    2b3c:	df 06       	cpc	r13, r31
    2b3e:	a1 f7       	brne	.-24     	; 0x2b28 <xTaskCreate+0x8e>
    2b40:	1c a2       	std	Y+36, r1	; 0x24
    2b42:	01 c0       	rjmp	.+2      	; 0x2b46 <xTaskCreate+0xac>
    2b44:	1d 8e       	std	Y+29, r1	; 0x1d
    2b46:	06 30       	cpi	r16, 0x06	; 6
    2b48:	08 f0       	brcs	.+2      	; 0x2b4c <xTaskCreate+0xb2>
    2b4a:	05 e0       	ldi	r16, 0x05	; 5
    2b4c:	0a 8f       	std	Y+26, r16	; 0x1a
    2b4e:	0f a3       	std	Y+39, r16	; 0x27
    2b50:	18 a6       	std	Y+40, r1	; 0x28
    2b52:	6e 01       	movw	r12, r28
    2b54:	b2 e0       	ldi	r27, 0x02	; 2
    2b56:	cb 0e       	add	r12, r27
    2b58:	d1 1c       	adc	r13, r1
    2b5a:	c6 01       	movw	r24, r12
    2b5c:	0e 94 14 0c 	call	0x1828	; 0x1828 <vListInitialiseItem>
    2b60:	ce 01       	movw	r24, r28
    2b62:	0e 96       	adiw	r24, 0x0e	; 14
    2b64:	0e 94 14 0c 	call	0x1828	; 0x1828 <vListInitialiseItem>
    2b68:	db 87       	std	Y+11, r29	; 0x0b
    2b6a:	ca 87       	std	Y+10, r28	; 0x0a
    2b6c:	86 e0       	ldi	r24, 0x06	; 6
    2b6e:	90 e0       	ldi	r25, 0x00	; 0
    2b70:	a0 e0       	ldi	r26, 0x00	; 0
    2b72:	b0 e0       	ldi	r27, 0x00	; 0
    2b74:	80 1b       	sub	r24, r16
    2b76:	91 09       	sbc	r25, r1
    2b78:	a1 09       	sbc	r26, r1
    2b7a:	b1 09       	sbc	r27, r1
    2b7c:	8e 87       	std	Y+14, r24	; 0x0e
    2b7e:	9f 87       	std	Y+15, r25	; 0x0f
    2b80:	a8 8b       	std	Y+16, r26	; 0x10
    2b82:	b9 8b       	std	Y+17, r27	; 0x11
    2b84:	df 8b       	std	Y+23, r29	; 0x17
    2b86:	ce 8b       	std	Y+22, r28	; 0x16
    2b88:	1a a6       	std	Y+42, r1	; 0x2a
    2b8a:	19 a6       	std	Y+41, r1	; 0x29
    2b8c:	1b a6       	std	Y+43, r1	; 0x2b
    2b8e:	1c a6       	std	Y+44, r1	; 0x2c
    2b90:	1d a6       	std	Y+45, r1	; 0x2d
    2b92:	1e a6       	std	Y+46, r1	; 0x2e
    2b94:	1f a6       	std	Y+47, r1	; 0x2f
    2b96:	a2 01       	movw	r20, r4
    2b98:	b4 01       	movw	r22, r8
    2b9a:	c5 01       	movw	r24, r10
    2b9c:	0e 94 9d 0c 	call	0x193a	; 0x193a <pxPortInitialiseStack>
    2ba0:	99 83       	std	Y+1, r25	; 0x01
    2ba2:	88 83       	st	Y, r24
    2ba4:	e1 14       	cp	r14, r1
    2ba6:	f1 04       	cpc	r15, r1
    2ba8:	19 f0       	breq	.+6      	; 0x2bb0 <xTaskCreate+0x116>
    2baa:	f7 01       	movw	r30, r14
    2bac:	d1 83       	std	Z+1, r29	; 0x01
    2bae:	c0 83       	st	Z, r28
    2bb0:	0f b6       	in	r0, 0x3f	; 63
    2bb2:	f8 94       	cli
    2bb4:	0f 92       	push	r0
    2bb6:	80 91 4a 18 	lds	r24, 0x184A	; 0x80184a <uxCurrentNumberOfTasks>
    2bba:	8f 5f       	subi	r24, 0xFF	; 255
    2bbc:	80 93 4a 18 	sts	0x184A, r24	; 0x80184a <uxCurrentNumberOfTasks>
    2bc0:	80 91 c9 18 	lds	r24, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    2bc4:	90 91 ca 18 	lds	r25, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    2bc8:	89 2b       	or	r24, r25
    2bca:	d1 f5       	brne	.+116    	; 0x2c40 <xTaskCreate+0x1a6>
    2bcc:	d0 93 ca 18 	sts	0x18CA, r29	; 0x8018ca <pxCurrentTCB+0x1>
    2bd0:	c0 93 c9 18 	sts	0x18C9, r28	; 0x8018c9 <pxCurrentTCB>
    2bd4:	80 91 4a 18 	lds	r24, 0x184A	; 0x80184a <uxCurrentNumberOfTasks>
    2bd8:	81 30       	cpi	r24, 0x01	; 1
    2bda:	09 f0       	breq	.+2      	; 0x2bde <xTaskCreate+0x144>
    2bdc:	41 c0       	rjmp	.+130    	; 0x2c60 <xTaskCreate+0x1c6>
    2bde:	07 e8       	ldi	r16, 0x87	; 135
    2be0:	18 e1       	ldi	r17, 0x18	; 24
    2be2:	0f 2e       	mov	r0, r31
    2be4:	f9 ec       	ldi	r31, 0xC9	; 201
    2be6:	ef 2e       	mov	r14, r31
    2be8:	f8 e1       	ldi	r31, 0x18	; 24
    2bea:	ff 2e       	mov	r15, r31
    2bec:	f0 2d       	mov	r31, r0
    2bee:	c8 01       	movw	r24, r16
    2bf0:	0e 94 03 0c 	call	0x1806	; 0x1806 <vListInitialise>
    2bf4:	05 5f       	subi	r16, 0xF5	; 245
    2bf6:	1f 4f       	sbci	r17, 0xFF	; 255
    2bf8:	0e 15       	cp	r16, r14
    2bfa:	1f 05       	cpc	r17, r15
    2bfc:	c1 f7       	brne	.-16     	; 0x2bee <xTaskCreate+0x154>
    2bfe:	8c e7       	ldi	r24, 0x7C	; 124
    2c00:	98 e1       	ldi	r25, 0x18	; 24
    2c02:	0e 94 03 0c 	call	0x1806	; 0x1806 <vListInitialise>
    2c06:	81 e7       	ldi	r24, 0x71	; 113
    2c08:	98 e1       	ldi	r25, 0x18	; 24
    2c0a:	0e 94 03 0c 	call	0x1806	; 0x1806 <vListInitialise>
    2c0e:	82 e6       	ldi	r24, 0x62	; 98
    2c10:	98 e1       	ldi	r25, 0x18	; 24
    2c12:	0e 94 03 0c 	call	0x1806	; 0x1806 <vListInitialise>
    2c16:	87 e5       	ldi	r24, 0x57	; 87
    2c18:	98 e1       	ldi	r25, 0x18	; 24
    2c1a:	0e 94 03 0c 	call	0x1806	; 0x1806 <vListInitialise>
    2c1e:	8b e4       	ldi	r24, 0x4B	; 75
    2c20:	98 e1       	ldi	r25, 0x18	; 24
    2c22:	0e 94 03 0c 	call	0x1806	; 0x1806 <vListInitialise>
    2c26:	8c e7       	ldi	r24, 0x7C	; 124
    2c28:	98 e1       	ldi	r25, 0x18	; 24
    2c2a:	90 93 70 18 	sts	0x1870, r25	; 0x801870 <pxDelayedTaskList+0x1>
    2c2e:	80 93 6f 18 	sts	0x186F, r24	; 0x80186f <pxDelayedTaskList>
    2c32:	81 e7       	ldi	r24, 0x71	; 113
    2c34:	98 e1       	ldi	r25, 0x18	; 24
    2c36:	90 93 6e 18 	sts	0x186E, r25	; 0x80186e <pxOverflowDelayedTaskList+0x1>
    2c3a:	80 93 6d 18 	sts	0x186D, r24	; 0x80186d <pxOverflowDelayedTaskList>
    2c3e:	10 c0       	rjmp	.+32     	; 0x2c60 <xTaskCreate+0x1c6>
    2c40:	80 91 44 18 	lds	r24, 0x1844	; 0x801844 <xSchedulerRunning>
    2c44:	81 11       	cpse	r24, r1
    2c46:	0c c0       	rjmp	.+24     	; 0x2c60 <xTaskCreate+0x1c6>
    2c48:	e0 91 c9 18 	lds	r30, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    2c4c:	f0 91 ca 18 	lds	r31, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    2c50:	92 8d       	ldd	r25, Z+26	; 0x1a
    2c52:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2c54:	89 17       	cp	r24, r25
    2c56:	20 f0       	brcs	.+8      	; 0x2c60 <xTaskCreate+0x1c6>
    2c58:	d0 93 ca 18 	sts	0x18CA, r29	; 0x8018ca <pxCurrentTCB+0x1>
    2c5c:	c0 93 c9 18 	sts	0x18C9, r28	; 0x8018c9 <pxCurrentTCB>
    2c60:	80 91 40 18 	lds	r24, 0x1840	; 0x801840 <uxTaskNumber>
    2c64:	8f 5f       	subi	r24, 0xFF	; 255
    2c66:	80 93 40 18 	sts	0x1840, r24	; 0x801840 <uxTaskNumber>
    2c6a:	8d a3       	std	Y+37, r24	; 0x25
    2c6c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2c6e:	90 91 45 18 	lds	r25, 0x1845	; 0x801845 <uxTopReadyPriority>
    2c72:	98 17       	cp	r25, r24
    2c74:	10 f4       	brcc	.+4      	; 0x2c7a <xTaskCreate+0x1e0>
    2c76:	80 93 45 18 	sts	0x1845, r24	; 0x801845 <uxTopReadyPriority>
    2c7a:	fb e0       	ldi	r31, 0x0B	; 11
    2c7c:	8f 9f       	mul	r24, r31
    2c7e:	c0 01       	movw	r24, r0
    2c80:	11 24       	eor	r1, r1
    2c82:	b6 01       	movw	r22, r12
    2c84:	89 57       	subi	r24, 0x79	; 121
    2c86:	97 4e       	sbci	r25, 0xE7	; 231
    2c88:	0e 94 18 0c 	call	0x1830	; 0x1830 <vListInsertEnd>
    2c8c:	0f 90       	pop	r0
    2c8e:	0f be       	out	0x3f, r0	; 63
    2c90:	80 91 44 18 	lds	r24, 0x1844	; 0x801844 <xSchedulerRunning>
    2c94:	88 23       	and	r24, r24
    2c96:	61 f0       	breq	.+24     	; 0x2cb0 <xTaskCreate+0x216>
    2c98:	e0 91 c9 18 	lds	r30, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    2c9c:	f0 91 ca 18 	lds	r31, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    2ca0:	92 8d       	ldd	r25, Z+26	; 0x1a
    2ca2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2ca4:	98 17       	cp	r25, r24
    2ca6:	30 f4       	brcc	.+12     	; 0x2cb4 <xTaskCreate+0x21a>
    2ca8:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <vPortYield>
    2cac:	81 e0       	ldi	r24, 0x01	; 1
    2cae:	05 c0       	rjmp	.+10     	; 0x2cba <xTaskCreate+0x220>
    2cb0:	81 e0       	ldi	r24, 0x01	; 1
    2cb2:	03 c0       	rjmp	.+6      	; 0x2cba <xTaskCreate+0x220>
    2cb4:	81 e0       	ldi	r24, 0x01	; 1
    2cb6:	01 c0       	rjmp	.+2      	; 0x2cba <xTaskCreate+0x220>
    2cb8:	8f ef       	ldi	r24, 0xFF	; 255
    2cba:	df 91       	pop	r29
    2cbc:	cf 91       	pop	r28
    2cbe:	1f 91       	pop	r17
    2cc0:	0f 91       	pop	r16
    2cc2:	ff 90       	pop	r15
    2cc4:	ef 90       	pop	r14
    2cc6:	df 90       	pop	r13
    2cc8:	cf 90       	pop	r12
    2cca:	bf 90       	pop	r11
    2ccc:	af 90       	pop	r10
    2cce:	9f 90       	pop	r9
    2cd0:	8f 90       	pop	r8
    2cd2:	7f 90       	pop	r7
    2cd4:	6f 90       	pop	r6
    2cd6:	5f 90       	pop	r5
    2cd8:	4f 90       	pop	r4
    2cda:	08 95       	ret

00002cdc <vTaskStartScheduler>:
    2cdc:	ef 92       	push	r14
    2cde:	ff 92       	push	r15
    2ce0:	0f 93       	push	r16
    2ce2:	0f 2e       	mov	r0, r31
    2ce4:	fa e3       	ldi	r31, 0x3A	; 58
    2ce6:	ef 2e       	mov	r14, r31
    2ce8:	f8 e1       	ldi	r31, 0x18	; 24
    2cea:	ff 2e       	mov	r15, r31
    2cec:	f0 2d       	mov	r31, r0
    2cee:	00 e0       	ldi	r16, 0x00	; 0
    2cf0:	20 e0       	ldi	r18, 0x00	; 0
    2cf2:	30 e0       	ldi	r19, 0x00	; 0
    2cf4:	40 ec       	ldi	r20, 0xC0	; 192
    2cf6:	50 e0       	ldi	r21, 0x00	; 0
    2cf8:	6d eb       	ldi	r22, 0xBD	; 189
    2cfa:	74 e0       	ldi	r23, 0x04	; 4
    2cfc:	8d ec       	ldi	r24, 0xCD	; 205
    2cfe:	90 e0       	ldi	r25, 0x00	; 0
    2d00:	cc de       	rcall	.-616    	; 0x2a9a <xTaskCreate>
    2d02:	81 30       	cpi	r24, 0x01	; 1
    2d04:	19 f5       	brne	.+70     	; 0x2d4c <vTaskStartScheduler+0x70>
    2d06:	ce d6       	rcall	.+3484   	; 0x3aa4 <xTimerCreateTimerTask>
    2d08:	81 30       	cpi	r24, 0x01	; 1
    2d0a:	01 f5       	brne	.+64     	; 0x2d4c <vTaskStartScheduler+0x70>
    2d0c:	f8 94       	cli
    2d0e:	8f ef       	ldi	r24, 0xFF	; 255
    2d10:	9f ef       	ldi	r25, 0xFF	; 255
    2d12:	dc 01       	movw	r26, r24
    2d14:	80 93 3c 18 	sts	0x183C, r24	; 0x80183c <xNextTaskUnblockTime>
    2d18:	90 93 3d 18 	sts	0x183D, r25	; 0x80183d <xNextTaskUnblockTime+0x1>
    2d1c:	a0 93 3e 18 	sts	0x183E, r26	; 0x80183e <xNextTaskUnblockTime+0x2>
    2d20:	b0 93 3f 18 	sts	0x183F, r27	; 0x80183f <xNextTaskUnblockTime+0x3>
    2d24:	81 e0       	ldi	r24, 0x01	; 1
    2d26:	80 93 44 18 	sts	0x1844, r24	; 0x801844 <xSchedulerRunning>
    2d2a:	10 92 46 18 	sts	0x1846, r1	; 0x801846 <xTickCount>
    2d2e:	10 92 47 18 	sts	0x1847, r1	; 0x801847 <xTickCount+0x1>
    2d32:	10 92 48 18 	sts	0x1848, r1	; 0x801848 <xTickCount+0x2>
    2d36:	10 92 49 18 	sts	0x1849, r1	; 0x801849 <xTickCount+0x3>
    2d3a:	e0 91 c9 18 	lds	r30, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    2d3e:	f0 91 ca 18 	lds	r31, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    2d42:	81 a5       	ldd	r24, Z+41	; 0x29
    2d44:	0e 94 50 09 	call	0x12a0	; 0x12a0 <task_switch_in>
    2d48:	0e 94 0f 0d 	call	0x1a1e	; 0x1a1e <xPortStartScheduler>
    2d4c:	0f 91       	pop	r16
    2d4e:	ff 90       	pop	r15
    2d50:	ef 90       	pop	r14
    2d52:	08 95       	ret

00002d54 <vTaskSuspendAll>:
    2d54:	80 91 39 18 	lds	r24, 0x1839	; 0x801839 <uxSchedulerSuspended>
    2d58:	8f 5f       	subi	r24, 0xFF	; 255
    2d5a:	80 93 39 18 	sts	0x1839, r24	; 0x801839 <uxSchedulerSuspended>
    2d5e:	08 95       	ret

00002d60 <xTaskGetTickCount>:
    2d60:	0f b6       	in	r0, 0x3f	; 63
    2d62:	f8 94       	cli
    2d64:	0f 92       	push	r0
    2d66:	60 91 46 18 	lds	r22, 0x1846	; 0x801846 <xTickCount>
    2d6a:	70 91 47 18 	lds	r23, 0x1847	; 0x801847 <xTickCount+0x1>
    2d6e:	80 91 48 18 	lds	r24, 0x1848	; 0x801848 <xTickCount+0x2>
    2d72:	90 91 49 18 	lds	r25, 0x1849	; 0x801849 <xTickCount+0x3>
    2d76:	0f 90       	pop	r0
    2d78:	0f be       	out	0x3f, r0	; 63
    2d7a:	08 95       	ret

00002d7c <xTaskIncrementTick>:
    2d7c:	9f 92       	push	r9
    2d7e:	af 92       	push	r10
    2d80:	bf 92       	push	r11
    2d82:	cf 92       	push	r12
    2d84:	df 92       	push	r13
    2d86:	ef 92       	push	r14
    2d88:	ff 92       	push	r15
    2d8a:	0f 93       	push	r16
    2d8c:	1f 93       	push	r17
    2d8e:	cf 93       	push	r28
    2d90:	df 93       	push	r29
    2d92:	80 91 39 18 	lds	r24, 0x1839	; 0x801839 <uxSchedulerSuspended>
    2d96:	81 11       	cpse	r24, r1
    2d98:	ad c0       	rjmp	.+346    	; 0x2ef4 <xTaskIncrementTick+0x178>
    2d9a:	c0 90 46 18 	lds	r12, 0x1846	; 0x801846 <xTickCount>
    2d9e:	d0 90 47 18 	lds	r13, 0x1847	; 0x801847 <xTickCount+0x1>
    2da2:	e0 90 48 18 	lds	r14, 0x1848	; 0x801848 <xTickCount+0x2>
    2da6:	f0 90 49 18 	lds	r15, 0x1849	; 0x801849 <xTickCount+0x3>
    2daa:	8f ef       	ldi	r24, 0xFF	; 255
    2dac:	c8 1a       	sub	r12, r24
    2dae:	d8 0a       	sbc	r13, r24
    2db0:	e8 0a       	sbc	r14, r24
    2db2:	f8 0a       	sbc	r15, r24
    2db4:	c0 92 46 18 	sts	0x1846, r12	; 0x801846 <xTickCount>
    2db8:	d0 92 47 18 	sts	0x1847, r13	; 0x801847 <xTickCount+0x1>
    2dbc:	e0 92 48 18 	sts	0x1848, r14	; 0x801848 <xTickCount+0x2>
    2dc0:	f0 92 49 18 	sts	0x1849, r15	; 0x801849 <xTickCount+0x3>
    2dc4:	c1 14       	cp	r12, r1
    2dc6:	d1 04       	cpc	r13, r1
    2dc8:	e1 04       	cpc	r14, r1
    2dca:	f1 04       	cpc	r15, r1
    2dcc:	b1 f4       	brne	.+44     	; 0x2dfa <xTaskIncrementTick+0x7e>
    2dce:	80 91 6f 18 	lds	r24, 0x186F	; 0x80186f <pxDelayedTaskList>
    2dd2:	90 91 70 18 	lds	r25, 0x1870	; 0x801870 <pxDelayedTaskList+0x1>
    2dd6:	20 91 6d 18 	lds	r18, 0x186D	; 0x80186d <pxOverflowDelayedTaskList>
    2dda:	30 91 6e 18 	lds	r19, 0x186E	; 0x80186e <pxOverflowDelayedTaskList+0x1>
    2dde:	30 93 70 18 	sts	0x1870, r19	; 0x801870 <pxDelayedTaskList+0x1>
    2de2:	20 93 6f 18 	sts	0x186F, r18	; 0x80186f <pxDelayedTaskList>
    2de6:	90 93 6e 18 	sts	0x186E, r25	; 0x80186e <pxOverflowDelayedTaskList+0x1>
    2dea:	80 93 6d 18 	sts	0x186D, r24	; 0x80186d <pxOverflowDelayedTaskList>
    2dee:	80 91 41 18 	lds	r24, 0x1841	; 0x801841 <xNumOfOverflows>
    2df2:	8f 5f       	subi	r24, 0xFF	; 255
    2df4:	80 93 41 18 	sts	0x1841, r24	; 0x801841 <xNumOfOverflows>
    2df8:	af dd       	rcall	.-1186   	; 0x2958 <prvResetNextTaskUnblockTime>
    2dfa:	80 91 3c 18 	lds	r24, 0x183C	; 0x80183c <xNextTaskUnblockTime>
    2dfe:	90 91 3d 18 	lds	r25, 0x183D	; 0x80183d <xNextTaskUnblockTime+0x1>
    2e02:	a0 91 3e 18 	lds	r26, 0x183E	; 0x80183e <xNextTaskUnblockTime+0x2>
    2e06:	b0 91 3f 18 	lds	r27, 0x183F	; 0x80183f <xNextTaskUnblockTime+0x3>
    2e0a:	c8 16       	cp	r12, r24
    2e0c:	d9 06       	cpc	r13, r25
    2e0e:	ea 06       	cpc	r14, r26
    2e10:	fb 06       	cpc	r15, r27
    2e12:	10 f4       	brcc	.+4      	; 0x2e18 <xTaskIncrementTick+0x9c>
    2e14:	b1 2c       	mov	r11, r1
    2e16:	5d c0       	rjmp	.+186    	; 0x2ed2 <xTaskIncrementTick+0x156>
    2e18:	b1 2c       	mov	r11, r1
    2e1a:	0f 2e       	mov	r0, r31
    2e1c:	fb e0       	ldi	r31, 0x0B	; 11
    2e1e:	af 2e       	mov	r10, r31
    2e20:	f0 2d       	mov	r31, r0
    2e22:	99 24       	eor	r9, r9
    2e24:	93 94       	inc	r9
    2e26:	e0 91 6f 18 	lds	r30, 0x186F	; 0x80186f <pxDelayedTaskList>
    2e2a:	f0 91 70 18 	lds	r31, 0x1870	; 0x801870 <pxDelayedTaskList+0x1>
    2e2e:	80 81       	ld	r24, Z
    2e30:	81 11       	cpse	r24, r1
    2e32:	0c c0       	rjmp	.+24     	; 0x2e4c <xTaskIncrementTick+0xd0>
    2e34:	8f ef       	ldi	r24, 0xFF	; 255
    2e36:	9f ef       	ldi	r25, 0xFF	; 255
    2e38:	dc 01       	movw	r26, r24
    2e3a:	80 93 3c 18 	sts	0x183C, r24	; 0x80183c <xNextTaskUnblockTime>
    2e3e:	90 93 3d 18 	sts	0x183D, r25	; 0x80183d <xNextTaskUnblockTime+0x1>
    2e42:	a0 93 3e 18 	sts	0x183E, r26	; 0x80183e <xNextTaskUnblockTime+0x2>
    2e46:	b0 93 3f 18 	sts	0x183F, r27	; 0x80183f <xNextTaskUnblockTime+0x3>
    2e4a:	43 c0       	rjmp	.+134    	; 0x2ed2 <xTaskIncrementTick+0x156>
    2e4c:	e0 91 6f 18 	lds	r30, 0x186F	; 0x80186f <pxDelayedTaskList>
    2e50:	f0 91 70 18 	lds	r31, 0x1870	; 0x801870 <pxDelayedTaskList+0x1>
    2e54:	07 80       	ldd	r0, Z+7	; 0x07
    2e56:	f0 85       	ldd	r31, Z+8	; 0x08
    2e58:	e0 2d       	mov	r30, r0
    2e5a:	c0 85       	ldd	r28, Z+8	; 0x08
    2e5c:	d1 85       	ldd	r29, Z+9	; 0x09
    2e5e:	8a 81       	ldd	r24, Y+2	; 0x02
    2e60:	9b 81       	ldd	r25, Y+3	; 0x03
    2e62:	ac 81       	ldd	r26, Y+4	; 0x04
    2e64:	bd 81       	ldd	r27, Y+5	; 0x05
    2e66:	c8 16       	cp	r12, r24
    2e68:	d9 06       	cpc	r13, r25
    2e6a:	ea 06       	cpc	r14, r26
    2e6c:	fb 06       	cpc	r15, r27
    2e6e:	48 f4       	brcc	.+18     	; 0x2e82 <xTaskIncrementTick+0x106>
    2e70:	80 93 3c 18 	sts	0x183C, r24	; 0x80183c <xNextTaskUnblockTime>
    2e74:	90 93 3d 18 	sts	0x183D, r25	; 0x80183d <xNextTaskUnblockTime+0x1>
    2e78:	a0 93 3e 18 	sts	0x183E, r26	; 0x80183e <xNextTaskUnblockTime+0x2>
    2e7c:	b0 93 3f 18 	sts	0x183F, r27	; 0x80183f <xNextTaskUnblockTime+0x3>
    2e80:	28 c0       	rjmp	.+80     	; 0x2ed2 <xTaskIncrementTick+0x156>
    2e82:	8e 01       	movw	r16, r28
    2e84:	0e 5f       	subi	r16, 0xFE	; 254
    2e86:	1f 4f       	sbci	r17, 0xFF	; 255
    2e88:	c8 01       	movw	r24, r16
    2e8a:	0e 94 76 0c 	call	0x18ec	; 0x18ec <uxListRemove>
    2e8e:	88 8d       	ldd	r24, Y+24	; 0x18
    2e90:	99 8d       	ldd	r25, Y+25	; 0x19
    2e92:	89 2b       	or	r24, r25
    2e94:	21 f0       	breq	.+8      	; 0x2e9e <xTaskIncrementTick+0x122>
    2e96:	ce 01       	movw	r24, r28
    2e98:	0e 96       	adiw	r24, 0x0e	; 14
    2e9a:	0e 94 76 0c 	call	0x18ec	; 0x18ec <uxListRemove>
    2e9e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2ea0:	90 91 45 18 	lds	r25, 0x1845	; 0x801845 <uxTopReadyPriority>
    2ea4:	98 17       	cp	r25, r24
    2ea6:	10 f4       	brcc	.+4      	; 0x2eac <xTaskIncrementTick+0x130>
    2ea8:	80 93 45 18 	sts	0x1845, r24	; 0x801845 <uxTopReadyPriority>
    2eac:	a8 9e       	mul	r10, r24
    2eae:	c0 01       	movw	r24, r0
    2eb0:	11 24       	eor	r1, r1
    2eb2:	b8 01       	movw	r22, r16
    2eb4:	89 57       	subi	r24, 0x79	; 121
    2eb6:	97 4e       	sbci	r25, 0xE7	; 231
    2eb8:	0e 94 18 0c 	call	0x1830	; 0x1830 <vListInsertEnd>
    2ebc:	e0 91 c9 18 	lds	r30, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    2ec0:	f0 91 ca 18 	lds	r31, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    2ec4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2ec6:	82 8d       	ldd	r24, Z+26	; 0x1a
    2ec8:	98 17       	cp	r25, r24
    2eca:	08 f4       	brcc	.+2      	; 0x2ece <xTaskIncrementTick+0x152>
    2ecc:	ac cf       	rjmp	.-168    	; 0x2e26 <xTaskIncrementTick+0xaa>
    2ece:	b9 2c       	mov	r11, r9
    2ed0:	aa cf       	rjmp	.-172    	; 0x2e26 <xTaskIncrementTick+0xaa>
    2ed2:	e0 91 c9 18 	lds	r30, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    2ed6:	f0 91 ca 18 	lds	r31, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    2eda:	e2 8d       	ldd	r30, Z+26	; 0x1a
    2edc:	8b e0       	ldi	r24, 0x0B	; 11
    2ede:	e8 9f       	mul	r30, r24
    2ee0:	f0 01       	movw	r30, r0
    2ee2:	11 24       	eor	r1, r1
    2ee4:	e9 57       	subi	r30, 0x79	; 121
    2ee6:	f7 4e       	sbci	r31, 0xE7	; 231
    2ee8:	80 81       	ld	r24, Z
    2eea:	82 30       	cpi	r24, 0x02	; 2
    2eec:	48 f0       	brcs	.+18     	; 0x2f00 <xTaskIncrementTick+0x184>
    2eee:	bb 24       	eor	r11, r11
    2ef0:	b3 94       	inc	r11
    2ef2:	06 c0       	rjmp	.+12     	; 0x2f00 <xTaskIncrementTick+0x184>
    2ef4:	80 91 43 18 	lds	r24, 0x1843	; 0x801843 <uxPendedTicks>
    2ef8:	8f 5f       	subi	r24, 0xFF	; 255
    2efa:	80 93 43 18 	sts	0x1843, r24	; 0x801843 <uxPendedTicks>
    2efe:	b1 2c       	mov	r11, r1
    2f00:	80 91 42 18 	lds	r24, 0x1842	; 0x801842 <xYieldPending>
    2f04:	88 23       	and	r24, r24
    2f06:	11 f0       	breq	.+4      	; 0x2f0c <xTaskIncrementTick+0x190>
    2f08:	bb 24       	eor	r11, r11
    2f0a:	b3 94       	inc	r11
    2f0c:	8b 2d       	mov	r24, r11
    2f0e:	df 91       	pop	r29
    2f10:	cf 91       	pop	r28
    2f12:	1f 91       	pop	r17
    2f14:	0f 91       	pop	r16
    2f16:	ff 90       	pop	r15
    2f18:	ef 90       	pop	r14
    2f1a:	df 90       	pop	r13
    2f1c:	cf 90       	pop	r12
    2f1e:	bf 90       	pop	r11
    2f20:	af 90       	pop	r10
    2f22:	9f 90       	pop	r9
    2f24:	08 95       	ret

00002f26 <xTaskResumeAll>:
    2f26:	cf 92       	push	r12
    2f28:	df 92       	push	r13
    2f2a:	ef 92       	push	r14
    2f2c:	ff 92       	push	r15
    2f2e:	0f 93       	push	r16
    2f30:	1f 93       	push	r17
    2f32:	cf 93       	push	r28
    2f34:	df 93       	push	r29
    2f36:	0f b6       	in	r0, 0x3f	; 63
    2f38:	f8 94       	cli
    2f3a:	0f 92       	push	r0
    2f3c:	80 91 39 18 	lds	r24, 0x1839	; 0x801839 <uxSchedulerSuspended>
    2f40:	81 50       	subi	r24, 0x01	; 1
    2f42:	80 93 39 18 	sts	0x1839, r24	; 0x801839 <uxSchedulerSuspended>
    2f46:	80 91 39 18 	lds	r24, 0x1839	; 0x801839 <uxSchedulerSuspended>
    2f4a:	81 11       	cpse	r24, r1
    2f4c:	5a c0       	rjmp	.+180    	; 0x3002 <xTaskResumeAll+0xdc>
    2f4e:	80 91 4a 18 	lds	r24, 0x184A	; 0x80184a <uxCurrentNumberOfTasks>
    2f52:	81 11       	cpse	r24, r1
    2f54:	2c c0       	rjmp	.+88     	; 0x2fae <xTaskResumeAll+0x88>
    2f56:	58 c0       	rjmp	.+176    	; 0x3008 <xTaskResumeAll+0xe2>
    2f58:	d7 01       	movw	r26, r14
    2f5a:	17 96       	adiw	r26, 0x07	; 7
    2f5c:	ed 91       	ld	r30, X+
    2f5e:	fc 91       	ld	r31, X
    2f60:	18 97       	sbiw	r26, 0x08	; 8
    2f62:	c0 85       	ldd	r28, Z+8	; 0x08
    2f64:	d1 85       	ldd	r29, Z+9	; 0x09
    2f66:	ce 01       	movw	r24, r28
    2f68:	0e 96       	adiw	r24, 0x0e	; 14
    2f6a:	0e 94 76 0c 	call	0x18ec	; 0x18ec <uxListRemove>
    2f6e:	8e 01       	movw	r16, r28
    2f70:	0e 5f       	subi	r16, 0xFE	; 254
    2f72:	1f 4f       	sbci	r17, 0xFF	; 255
    2f74:	c8 01       	movw	r24, r16
    2f76:	0e 94 76 0c 	call	0x18ec	; 0x18ec <uxListRemove>
    2f7a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2f7c:	90 91 45 18 	lds	r25, 0x1845	; 0x801845 <uxTopReadyPriority>
    2f80:	98 17       	cp	r25, r24
    2f82:	10 f4       	brcc	.+4      	; 0x2f88 <xTaskResumeAll+0x62>
    2f84:	80 93 45 18 	sts	0x1845, r24	; 0x801845 <uxTopReadyPriority>
    2f88:	d8 9e       	mul	r13, r24
    2f8a:	c0 01       	movw	r24, r0
    2f8c:	11 24       	eor	r1, r1
    2f8e:	b8 01       	movw	r22, r16
    2f90:	89 57       	subi	r24, 0x79	; 121
    2f92:	97 4e       	sbci	r25, 0xE7	; 231
    2f94:	0e 94 18 0c 	call	0x1830	; 0x1830 <vListInsertEnd>
    2f98:	e0 91 c9 18 	lds	r30, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    2f9c:	f0 91 ca 18 	lds	r31, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    2fa0:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2fa2:	82 8d       	ldd	r24, Z+26	; 0x1a
    2fa4:	98 17       	cp	r25, r24
    2fa6:	88 f0       	brcs	.+34     	; 0x2fca <xTaskResumeAll+0xa4>
    2fa8:	c0 92 42 18 	sts	0x1842, r12	; 0x801842 <xYieldPending>
    2fac:	0e c0       	rjmp	.+28     	; 0x2fca <xTaskResumeAll+0xa4>
    2fae:	c0 e0       	ldi	r28, 0x00	; 0
    2fb0:	d0 e0       	ldi	r29, 0x00	; 0
    2fb2:	0f 2e       	mov	r0, r31
    2fb4:	f2 e6       	ldi	r31, 0x62	; 98
    2fb6:	ef 2e       	mov	r14, r31
    2fb8:	f8 e1       	ldi	r31, 0x18	; 24
    2fba:	ff 2e       	mov	r15, r31
    2fbc:	f0 2d       	mov	r31, r0
    2fbe:	0f 2e       	mov	r0, r31
    2fc0:	fb e0       	ldi	r31, 0x0B	; 11
    2fc2:	df 2e       	mov	r13, r31
    2fc4:	f0 2d       	mov	r31, r0
    2fc6:	cc 24       	eor	r12, r12
    2fc8:	c3 94       	inc	r12
    2fca:	f7 01       	movw	r30, r14
    2fcc:	80 81       	ld	r24, Z
    2fce:	81 11       	cpse	r24, r1
    2fd0:	c3 cf       	rjmp	.-122    	; 0x2f58 <xTaskResumeAll+0x32>
    2fd2:	cd 2b       	or	r28, r29
    2fd4:	09 f0       	breq	.+2      	; 0x2fd8 <xTaskResumeAll+0xb2>
    2fd6:	c0 dc       	rcall	.-1664   	; 0x2958 <prvResetNextTaskUnblockTime>
    2fd8:	c0 91 43 18 	lds	r28, 0x1843	; 0x801843 <uxPendedTicks>
    2fdc:	cc 23       	and	r28, r28
    2fde:	49 f0       	breq	.+18     	; 0x2ff2 <xTaskResumeAll+0xcc>
    2fe0:	d1 e0       	ldi	r29, 0x01	; 1
    2fe2:	cc de       	rcall	.-616    	; 0x2d7c <xTaskIncrementTick>
    2fe4:	81 11       	cpse	r24, r1
    2fe6:	d0 93 42 18 	sts	0x1842, r29	; 0x801842 <xYieldPending>
    2fea:	c1 50       	subi	r28, 0x01	; 1
    2fec:	d1 f7       	brne	.-12     	; 0x2fe2 <xTaskResumeAll+0xbc>
    2fee:	10 92 43 18 	sts	0x1843, r1	; 0x801843 <uxPendedTicks>
    2ff2:	80 91 42 18 	lds	r24, 0x1842	; 0x801842 <xYieldPending>
    2ff6:	88 23       	and	r24, r24
    2ff8:	31 f0       	breq	.+12     	; 0x3006 <xTaskResumeAll+0xe0>
    2ffa:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <vPortYield>
    2ffe:	81 e0       	ldi	r24, 0x01	; 1
    3000:	03 c0       	rjmp	.+6      	; 0x3008 <xTaskResumeAll+0xe2>
    3002:	80 e0       	ldi	r24, 0x00	; 0
    3004:	01 c0       	rjmp	.+2      	; 0x3008 <xTaskResumeAll+0xe2>
    3006:	80 e0       	ldi	r24, 0x00	; 0
    3008:	0f 90       	pop	r0
    300a:	0f be       	out	0x3f, r0	; 63
    300c:	df 91       	pop	r29
    300e:	cf 91       	pop	r28
    3010:	1f 91       	pop	r17
    3012:	0f 91       	pop	r16
    3014:	ff 90       	pop	r15
    3016:	ef 90       	pop	r14
    3018:	df 90       	pop	r13
    301a:	cf 90       	pop	r12
    301c:	08 95       	ret

0000301e <vTaskDelay>:
    301e:	cf 92       	push	r12
    3020:	df 92       	push	r13
    3022:	ef 92       	push	r14
    3024:	ff 92       	push	r15
    3026:	6b 01       	movw	r12, r22
    3028:	7c 01       	movw	r14, r24
    302a:	67 2b       	or	r22, r23
    302c:	68 2b       	or	r22, r24
    302e:	69 2b       	or	r22, r25
    3030:	41 f0       	breq	.+16     	; 0x3042 <vTaskDelay+0x24>
    3032:	90 de       	rcall	.-736    	; 0x2d54 <vTaskSuspendAll>
    3034:	40 e0       	ldi	r20, 0x00	; 0
    3036:	c7 01       	movw	r24, r14
    3038:	b6 01       	movw	r22, r12
    303a:	b8 dc       	rcall	.-1680   	; 0x29ac <prvAddCurrentTaskToDelayedList>
    303c:	74 df       	rcall	.-280    	; 0x2f26 <xTaskResumeAll>
    303e:	81 11       	cpse	r24, r1
    3040:	02 c0       	rjmp	.+4      	; 0x3046 <vTaskDelay+0x28>
    3042:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <vPortYield>
    3046:	ff 90       	pop	r15
    3048:	ef 90       	pop	r14
    304a:	df 90       	pop	r13
    304c:	cf 90       	pop	r12
    304e:	08 95       	ret

00003050 <vTaskSwitchContext>:
    3050:	80 91 39 18 	lds	r24, 0x1839	; 0x801839 <uxSchedulerSuspended>
    3054:	88 23       	and	r24, r24
    3056:	21 f0       	breq	.+8      	; 0x3060 <vTaskSwitchContext+0x10>
    3058:	81 e0       	ldi	r24, 0x01	; 1
    305a:	80 93 42 18 	sts	0x1842, r24	; 0x801842 <xYieldPending>
    305e:	08 95       	ret
    3060:	10 92 42 18 	sts	0x1842, r1	; 0x801842 <xYieldPending>
    3064:	e0 91 c9 18 	lds	r30, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    3068:	f0 91 ca 18 	lds	r31, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    306c:	81 a5       	ldd	r24, Z+41	; 0x29
    306e:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <task_switch_out>
    3072:	a0 91 c9 18 	lds	r26, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    3076:	b0 91 ca 18 	lds	r27, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    307a:	e0 91 c9 18 	lds	r30, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    307e:	f0 91 ca 18 	lds	r31, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    3082:	2d 91       	ld	r18, X+
    3084:	3c 91       	ld	r19, X
    3086:	83 8d       	ldd	r24, Z+27	; 0x1b
    3088:	94 8d       	ldd	r25, Z+28	; 0x1c
    308a:	82 17       	cp	r24, r18
    308c:	93 07       	cpc	r25, r19
    308e:	58 f0       	brcs	.+22     	; 0x30a6 <vTaskSwitchContext+0x56>
    3090:	60 91 c9 18 	lds	r22, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    3094:	70 91 ca 18 	lds	r23, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    3098:	80 91 c9 18 	lds	r24, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    309c:	90 91 ca 18 	lds	r25, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    30a0:	63 5e       	subi	r22, 0xE3	; 227
    30a2:	7f 4f       	sbci	r23, 0xFF	; 255
    30a4:	22 d6       	rcall	.+3140   	; 0x3cea <vApplicationStackOverflowHook>
    30a6:	80 91 45 18 	lds	r24, 0x1845	; 0x801845 <uxTopReadyPriority>
    30aa:	28 2f       	mov	r18, r24
    30ac:	30 e0       	ldi	r19, 0x00	; 0
    30ae:	9b e0       	ldi	r25, 0x0B	; 11
    30b0:	89 9f       	mul	r24, r25
    30b2:	f0 01       	movw	r30, r0
    30b4:	11 24       	eor	r1, r1
    30b6:	e9 57       	subi	r30, 0x79	; 121
    30b8:	f7 4e       	sbci	r31, 0xE7	; 231
    30ba:	90 81       	ld	r25, Z
    30bc:	91 11       	cpse	r25, r1
    30be:	0e c0       	rjmp	.+28     	; 0x30dc <vTaskSwitchContext+0x8c>
    30c0:	4b e0       	ldi	r20, 0x0B	; 11
    30c2:	81 50       	subi	r24, 0x01	; 1
    30c4:	28 2f       	mov	r18, r24
    30c6:	30 e0       	ldi	r19, 0x00	; 0
    30c8:	42 9f       	mul	r20, r18
    30ca:	f0 01       	movw	r30, r0
    30cc:	43 9f       	mul	r20, r19
    30ce:	f0 0d       	add	r31, r0
    30d0:	11 24       	eor	r1, r1
    30d2:	e9 57       	subi	r30, 0x79	; 121
    30d4:	f7 4e       	sbci	r31, 0xE7	; 231
    30d6:	90 81       	ld	r25, Z
    30d8:	99 23       	and	r25, r25
    30da:	99 f3       	breq	.-26     	; 0x30c2 <vTaskSwitchContext+0x72>
    30dc:	9b e0       	ldi	r25, 0x0B	; 11
    30de:	92 9f       	mul	r25, r18
    30e0:	a0 01       	movw	r20, r0
    30e2:	93 9f       	mul	r25, r19
    30e4:	50 0d       	add	r21, r0
    30e6:	11 24       	eor	r1, r1
    30e8:	da 01       	movw	r26, r20
    30ea:	a9 57       	subi	r26, 0x79	; 121
    30ec:	b7 4e       	sbci	r27, 0xE7	; 231
    30ee:	11 96       	adiw	r26, 0x01	; 1
    30f0:	ed 91       	ld	r30, X+
    30f2:	fc 91       	ld	r31, X
    30f4:	12 97       	sbiw	r26, 0x02	; 2
    30f6:	04 80       	ldd	r0, Z+4	; 0x04
    30f8:	f5 81       	ldd	r31, Z+5	; 0x05
    30fa:	e0 2d       	mov	r30, r0
    30fc:	12 96       	adiw	r26, 0x02	; 2
    30fe:	fc 93       	st	X, r31
    3100:	ee 93       	st	-X, r30
    3102:	11 97       	sbiw	r26, 0x01	; 1
    3104:	46 57       	subi	r20, 0x76	; 118
    3106:	57 4e       	sbci	r21, 0xE7	; 231
    3108:	e4 17       	cp	r30, r20
    310a:	f5 07       	cpc	r31, r21
    310c:	29 f4       	brne	.+10     	; 0x3118 <vTaskSwitchContext+0xc8>
    310e:	44 81       	ldd	r20, Z+4	; 0x04
    3110:	55 81       	ldd	r21, Z+5	; 0x05
    3112:	fd 01       	movw	r30, r26
    3114:	52 83       	std	Z+2, r21	; 0x02
    3116:	41 83       	std	Z+1, r20	; 0x01
    3118:	9b e0       	ldi	r25, 0x0B	; 11
    311a:	92 9f       	mul	r25, r18
    311c:	f0 01       	movw	r30, r0
    311e:	93 9f       	mul	r25, r19
    3120:	f0 0d       	add	r31, r0
    3122:	11 24       	eor	r1, r1
    3124:	e9 57       	subi	r30, 0x79	; 121
    3126:	f7 4e       	sbci	r31, 0xE7	; 231
    3128:	01 80       	ldd	r0, Z+1	; 0x01
    312a:	f2 81       	ldd	r31, Z+2	; 0x02
    312c:	e0 2d       	mov	r30, r0
    312e:	20 85       	ldd	r18, Z+8	; 0x08
    3130:	31 85       	ldd	r19, Z+9	; 0x09
    3132:	30 93 ca 18 	sts	0x18CA, r19	; 0x8018ca <pxCurrentTCB+0x1>
    3136:	20 93 c9 18 	sts	0x18C9, r18	; 0x8018c9 <pxCurrentTCB>
    313a:	80 93 45 18 	sts	0x1845, r24	; 0x801845 <uxTopReadyPriority>
    313e:	e0 91 c9 18 	lds	r30, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    3142:	f0 91 ca 18 	lds	r31, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    3146:	81 a5       	ldd	r24, Z+41	; 0x29
    3148:	0c 94 50 09 	jmp	0x12a0	; 0x12a0 <task_switch_in>
    314c:	08 95       	ret

0000314e <vTaskPlaceOnEventList>:
    314e:	cf 92       	push	r12
    3150:	df 92       	push	r13
    3152:	ef 92       	push	r14
    3154:	ff 92       	push	r15
    3156:	6a 01       	movw	r12, r20
    3158:	7b 01       	movw	r14, r22
    315a:	60 91 c9 18 	lds	r22, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    315e:	70 91 ca 18 	lds	r23, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    3162:	62 5f       	subi	r22, 0xF2	; 242
    3164:	7f 4f       	sbci	r23, 0xFF	; 255
    3166:	0e 94 39 0c 	call	0x1872	; 0x1872 <vListInsert>
    316a:	41 e0       	ldi	r20, 0x01	; 1
    316c:	c7 01       	movw	r24, r14
    316e:	b6 01       	movw	r22, r12
    3170:	1d dc       	rcall	.-1990   	; 0x29ac <prvAddCurrentTaskToDelayedList>
    3172:	ff 90       	pop	r15
    3174:	ef 90       	pop	r14
    3176:	df 90       	pop	r13
    3178:	cf 90       	pop	r12
    317a:	08 95       	ret

0000317c <vTaskPlaceOnUnorderedEventList>:
    317c:	cf 92       	push	r12
    317e:	df 92       	push	r13
    3180:	ef 92       	push	r14
    3182:	ff 92       	push	r15
    3184:	0f 93       	push	r16
    3186:	1f 93       	push	r17
    3188:	68 01       	movw	r12, r16
    318a:	79 01       	movw	r14, r18
    318c:	e0 91 c9 18 	lds	r30, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    3190:	f0 91 ca 18 	lds	r31, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    3194:	70 68       	ori	r23, 0x80	; 128
    3196:	46 87       	std	Z+14, r20	; 0x0e
    3198:	57 87       	std	Z+15, r21	; 0x0f
    319a:	60 8b       	std	Z+16, r22	; 0x10
    319c:	71 8b       	std	Z+17, r23	; 0x11
    319e:	60 91 c9 18 	lds	r22, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    31a2:	70 91 ca 18 	lds	r23, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    31a6:	62 5f       	subi	r22, 0xF2	; 242
    31a8:	7f 4f       	sbci	r23, 0xFF	; 255
    31aa:	0e 94 18 0c 	call	0x1830	; 0x1830 <vListInsertEnd>
    31ae:	41 e0       	ldi	r20, 0x01	; 1
    31b0:	c7 01       	movw	r24, r14
    31b2:	b6 01       	movw	r22, r12
    31b4:	fb db       	rcall	.-2058   	; 0x29ac <prvAddCurrentTaskToDelayedList>
    31b6:	1f 91       	pop	r17
    31b8:	0f 91       	pop	r16
    31ba:	ff 90       	pop	r15
    31bc:	ef 90       	pop	r14
    31be:	df 90       	pop	r13
    31c0:	cf 90       	pop	r12
    31c2:	08 95       	ret

000031c4 <vTaskPlaceOnEventListRestricted>:
    31c4:	cf 92       	push	r12
    31c6:	df 92       	push	r13
    31c8:	ef 92       	push	r14
    31ca:	ff 92       	push	r15
    31cc:	cf 93       	push	r28
    31ce:	6a 01       	movw	r12, r20
    31d0:	7b 01       	movw	r14, r22
    31d2:	c2 2f       	mov	r28, r18
    31d4:	60 91 c9 18 	lds	r22, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    31d8:	70 91 ca 18 	lds	r23, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    31dc:	62 5f       	subi	r22, 0xF2	; 242
    31de:	7f 4f       	sbci	r23, 0xFF	; 255
    31e0:	0e 94 18 0c 	call	0x1830	; 0x1830 <vListInsertEnd>
    31e4:	cc 23       	and	r28, r28
    31e6:	21 f0       	breq	.+8      	; 0x31f0 <vTaskPlaceOnEventListRestricted+0x2c>
    31e8:	cc 24       	eor	r12, r12
    31ea:	ca 94       	dec	r12
    31ec:	dc 2c       	mov	r13, r12
    31ee:	76 01       	movw	r14, r12
    31f0:	4c 2f       	mov	r20, r28
    31f2:	c7 01       	movw	r24, r14
    31f4:	b6 01       	movw	r22, r12
    31f6:	da db       	rcall	.-2124   	; 0x29ac <prvAddCurrentTaskToDelayedList>
    31f8:	cf 91       	pop	r28
    31fa:	ff 90       	pop	r15
    31fc:	ef 90       	pop	r14
    31fe:	df 90       	pop	r13
    3200:	cf 90       	pop	r12
    3202:	08 95       	ret

00003204 <xTaskRemoveFromEventList>:
    3204:	0f 93       	push	r16
    3206:	1f 93       	push	r17
    3208:	cf 93       	push	r28
    320a:	df 93       	push	r29
    320c:	dc 01       	movw	r26, r24
    320e:	17 96       	adiw	r26, 0x07	; 7
    3210:	ed 91       	ld	r30, X+
    3212:	fc 91       	ld	r31, X
    3214:	18 97       	sbiw	r26, 0x08	; 8
    3216:	c0 85       	ldd	r28, Z+8	; 0x08
    3218:	d1 85       	ldd	r29, Z+9	; 0x09
    321a:	8e 01       	movw	r16, r28
    321c:	02 5f       	subi	r16, 0xF2	; 242
    321e:	1f 4f       	sbci	r17, 0xFF	; 255
    3220:	c8 01       	movw	r24, r16
    3222:	0e 94 76 0c 	call	0x18ec	; 0x18ec <uxListRemove>
    3226:	80 91 39 18 	lds	r24, 0x1839	; 0x801839 <uxSchedulerSuspended>
    322a:	81 11       	cpse	r24, r1
    322c:	16 c0       	rjmp	.+44     	; 0x325a <xTaskRemoveFromEventList+0x56>
    322e:	0c 50       	subi	r16, 0x0C	; 12
    3230:	11 09       	sbc	r17, r1
    3232:	c8 01       	movw	r24, r16
    3234:	0e 94 76 0c 	call	0x18ec	; 0x18ec <uxListRemove>
    3238:	8a 8d       	ldd	r24, Y+26	; 0x1a
    323a:	90 91 45 18 	lds	r25, 0x1845	; 0x801845 <uxTopReadyPriority>
    323e:	98 17       	cp	r25, r24
    3240:	10 f4       	brcc	.+4      	; 0x3246 <xTaskRemoveFromEventList+0x42>
    3242:	80 93 45 18 	sts	0x1845, r24	; 0x801845 <uxTopReadyPriority>
    3246:	bb e0       	ldi	r27, 0x0B	; 11
    3248:	8b 9f       	mul	r24, r27
    324a:	c0 01       	movw	r24, r0
    324c:	11 24       	eor	r1, r1
    324e:	b8 01       	movw	r22, r16
    3250:	89 57       	subi	r24, 0x79	; 121
    3252:	97 4e       	sbci	r25, 0xE7	; 231
    3254:	0e 94 18 0c 	call	0x1830	; 0x1830 <vListInsertEnd>
    3258:	05 c0       	rjmp	.+10     	; 0x3264 <xTaskRemoveFromEventList+0x60>
    325a:	b8 01       	movw	r22, r16
    325c:	82 e6       	ldi	r24, 0x62	; 98
    325e:	98 e1       	ldi	r25, 0x18	; 24
    3260:	0e 94 18 0c 	call	0x1830	; 0x1830 <vListInsertEnd>
    3264:	e0 91 c9 18 	lds	r30, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    3268:	f0 91 ca 18 	lds	r31, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    326c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    326e:	82 8d       	ldd	r24, Z+26	; 0x1a
    3270:	89 17       	cp	r24, r25
    3272:	20 f4       	brcc	.+8      	; 0x327c <xTaskRemoveFromEventList+0x78>
    3274:	81 e0       	ldi	r24, 0x01	; 1
    3276:	80 93 42 18 	sts	0x1842, r24	; 0x801842 <xYieldPending>
    327a:	01 c0       	rjmp	.+2      	; 0x327e <xTaskRemoveFromEventList+0x7a>
    327c:	80 e0       	ldi	r24, 0x00	; 0
    327e:	df 91       	pop	r29
    3280:	cf 91       	pop	r28
    3282:	1f 91       	pop	r17
    3284:	0f 91       	pop	r16
    3286:	08 95       	ret

00003288 <vTaskRemoveFromUnorderedEventList>:
    3288:	0f 93       	push	r16
    328a:	1f 93       	push	r17
    328c:	cf 93       	push	r28
    328e:	df 93       	push	r29
    3290:	70 68       	ori	r23, 0x80	; 128
    3292:	fc 01       	movw	r30, r24
    3294:	40 83       	st	Z, r20
    3296:	51 83       	std	Z+1, r21	; 0x01
    3298:	62 83       	std	Z+2, r22	; 0x02
    329a:	73 83       	std	Z+3, r23	; 0x03
    329c:	c0 85       	ldd	r28, Z+8	; 0x08
    329e:	d1 85       	ldd	r29, Z+9	; 0x09
    32a0:	0e 94 76 0c 	call	0x18ec	; 0x18ec <uxListRemove>
    32a4:	8e 01       	movw	r16, r28
    32a6:	0e 5f       	subi	r16, 0xFE	; 254
    32a8:	1f 4f       	sbci	r17, 0xFF	; 255
    32aa:	c8 01       	movw	r24, r16
    32ac:	0e 94 76 0c 	call	0x18ec	; 0x18ec <uxListRemove>
    32b0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    32b2:	90 91 45 18 	lds	r25, 0x1845	; 0x801845 <uxTopReadyPriority>
    32b6:	98 17       	cp	r25, r24
    32b8:	10 f4       	brcc	.+4      	; 0x32be <vTaskRemoveFromUnorderedEventList+0x36>
    32ba:	80 93 45 18 	sts	0x1845, r24	; 0x801845 <uxTopReadyPriority>
    32be:	fb e0       	ldi	r31, 0x0B	; 11
    32c0:	8f 9f       	mul	r24, r31
    32c2:	c0 01       	movw	r24, r0
    32c4:	11 24       	eor	r1, r1
    32c6:	b8 01       	movw	r22, r16
    32c8:	89 57       	subi	r24, 0x79	; 121
    32ca:	97 4e       	sbci	r25, 0xE7	; 231
    32cc:	0e 94 18 0c 	call	0x1830	; 0x1830 <vListInsertEnd>
    32d0:	e0 91 c9 18 	lds	r30, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    32d4:	f0 91 ca 18 	lds	r31, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    32d8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    32da:	82 8d       	ldd	r24, Z+26	; 0x1a
    32dc:	89 17       	cp	r24, r25
    32de:	18 f4       	brcc	.+6      	; 0x32e6 <vTaskRemoveFromUnorderedEventList+0x5e>
    32e0:	81 e0       	ldi	r24, 0x01	; 1
    32e2:	80 93 42 18 	sts	0x1842, r24	; 0x801842 <xYieldPending>
    32e6:	df 91       	pop	r29
    32e8:	cf 91       	pop	r28
    32ea:	1f 91       	pop	r17
    32ec:	0f 91       	pop	r16
    32ee:	08 95       	ret

000032f0 <vTaskSetTimeOutState>:
    32f0:	0f b6       	in	r0, 0x3f	; 63
    32f2:	f8 94       	cli
    32f4:	0f 92       	push	r0
    32f6:	20 91 41 18 	lds	r18, 0x1841	; 0x801841 <xNumOfOverflows>
    32fa:	fc 01       	movw	r30, r24
    32fc:	20 83       	st	Z, r18
    32fe:	40 91 46 18 	lds	r20, 0x1846	; 0x801846 <xTickCount>
    3302:	50 91 47 18 	lds	r21, 0x1847	; 0x801847 <xTickCount+0x1>
    3306:	60 91 48 18 	lds	r22, 0x1848	; 0x801848 <xTickCount+0x2>
    330a:	70 91 49 18 	lds	r23, 0x1849	; 0x801849 <xTickCount+0x3>
    330e:	41 83       	std	Z+1, r20	; 0x01
    3310:	52 83       	std	Z+2, r21	; 0x02
    3312:	63 83       	std	Z+3, r22	; 0x03
    3314:	74 83       	std	Z+4, r23	; 0x04
    3316:	0f 90       	pop	r0
    3318:	0f be       	out	0x3f, r0	; 63
    331a:	08 95       	ret

0000331c <vTaskInternalSetTimeOutState>:
    331c:	20 91 41 18 	lds	r18, 0x1841	; 0x801841 <xNumOfOverflows>
    3320:	fc 01       	movw	r30, r24
    3322:	20 83       	st	Z, r18
    3324:	40 91 46 18 	lds	r20, 0x1846	; 0x801846 <xTickCount>
    3328:	50 91 47 18 	lds	r21, 0x1847	; 0x801847 <xTickCount+0x1>
    332c:	60 91 48 18 	lds	r22, 0x1848	; 0x801848 <xTickCount+0x2>
    3330:	70 91 49 18 	lds	r23, 0x1849	; 0x801849 <xTickCount+0x3>
    3334:	41 83       	std	Z+1, r20	; 0x01
    3336:	52 83       	std	Z+2, r21	; 0x02
    3338:	63 83       	std	Z+3, r22	; 0x03
    333a:	74 83       	std	Z+4, r23	; 0x04
    333c:	08 95       	ret

0000333e <xTaskCheckForTimeOut>:
    333e:	cf 92       	push	r12
    3340:	df 92       	push	r13
    3342:	ef 92       	push	r14
    3344:	ff 92       	push	r15
    3346:	0f 93       	push	r16
    3348:	1f 93       	push	r17
    334a:	cf 93       	push	r28
    334c:	df 93       	push	r29
    334e:	fb 01       	movw	r30, r22
    3350:	0f b6       	in	r0, 0x3f	; 63
    3352:	f8 94       	cli
    3354:	0f 92       	push	r0
    3356:	40 91 46 18 	lds	r20, 0x1846	; 0x801846 <xTickCount>
    335a:	50 91 47 18 	lds	r21, 0x1847	; 0x801847 <xTickCount+0x1>
    335e:	60 91 48 18 	lds	r22, 0x1848	; 0x801848 <xTickCount+0x2>
    3362:	70 91 49 18 	lds	r23, 0x1849	; 0x801849 <xTickCount+0x3>
    3366:	00 81       	ld	r16, Z
    3368:	11 81       	ldd	r17, Z+1	; 0x01
    336a:	22 81       	ldd	r18, Z+2	; 0x02
    336c:	33 81       	ldd	r19, Z+3	; 0x03
    336e:	0f 3f       	cpi	r16, 0xFF	; 255
    3370:	af ef       	ldi	r26, 0xFF	; 255
    3372:	1a 07       	cpc	r17, r26
    3374:	2a 07       	cpc	r18, r26
    3376:	3a 07       	cpc	r19, r26
    3378:	49 f1       	breq	.+82     	; 0x33cc <xTaskCheckForTimeOut+0x8e>
    337a:	ec 01       	movw	r28, r24
    337c:	c9 80       	ldd	r12, Y+1	; 0x01
    337e:	da 80       	ldd	r13, Y+2	; 0x02
    3380:	eb 80       	ldd	r14, Y+3	; 0x03
    3382:	fc 80       	ldd	r15, Y+4	; 0x04
    3384:	a0 91 41 18 	lds	r26, 0x1841	; 0x801841 <xNumOfOverflows>
    3388:	b8 81       	ld	r27, Y
    338a:	ba 17       	cp	r27, r26
    338c:	29 f0       	breq	.+10     	; 0x3398 <xTaskCheckForTimeOut+0x5a>
    338e:	4c 15       	cp	r20, r12
    3390:	5d 05       	cpc	r21, r13
    3392:	6e 05       	cpc	r22, r14
    3394:	7f 05       	cpc	r23, r15
    3396:	e0 f4       	brcc	.+56     	; 0x33d0 <xTaskCheckForTimeOut+0x92>
    3398:	4c 19       	sub	r20, r12
    339a:	5d 09       	sbc	r21, r13
    339c:	6e 09       	sbc	r22, r14
    339e:	7f 09       	sbc	r23, r15
    33a0:	40 17       	cp	r20, r16
    33a2:	51 07       	cpc	r21, r17
    33a4:	62 07       	cpc	r22, r18
    33a6:	73 07       	cpc	r23, r19
    33a8:	58 f4       	brcc	.+22     	; 0x33c0 <xTaskCheckForTimeOut+0x82>
    33aa:	04 1b       	sub	r16, r20
    33ac:	15 0b       	sbc	r17, r21
    33ae:	26 0b       	sbc	r18, r22
    33b0:	37 0b       	sbc	r19, r23
    33b2:	00 83       	st	Z, r16
    33b4:	11 83       	std	Z+1, r17	; 0x01
    33b6:	22 83       	std	Z+2, r18	; 0x02
    33b8:	33 83       	std	Z+3, r19	; 0x03
    33ba:	b0 df       	rcall	.-160    	; 0x331c <vTaskInternalSetTimeOutState>
    33bc:	80 e0       	ldi	r24, 0x00	; 0
    33be:	09 c0       	rjmp	.+18     	; 0x33d2 <xTaskCheckForTimeOut+0x94>
    33c0:	10 82       	st	Z, r1
    33c2:	11 82       	std	Z+1, r1	; 0x01
    33c4:	12 82       	std	Z+2, r1	; 0x02
    33c6:	13 82       	std	Z+3, r1	; 0x03
    33c8:	81 e0       	ldi	r24, 0x01	; 1
    33ca:	03 c0       	rjmp	.+6      	; 0x33d2 <xTaskCheckForTimeOut+0x94>
    33cc:	80 e0       	ldi	r24, 0x00	; 0
    33ce:	01 c0       	rjmp	.+2      	; 0x33d2 <xTaskCheckForTimeOut+0x94>
    33d0:	81 e0       	ldi	r24, 0x01	; 1
    33d2:	0f 90       	pop	r0
    33d4:	0f be       	out	0x3f, r0	; 63
    33d6:	df 91       	pop	r29
    33d8:	cf 91       	pop	r28
    33da:	1f 91       	pop	r17
    33dc:	0f 91       	pop	r16
    33de:	ff 90       	pop	r15
    33e0:	ef 90       	pop	r14
    33e2:	df 90       	pop	r13
    33e4:	cf 90       	pop	r12
    33e6:	08 95       	ret

000033e8 <vTaskMissedYield>:
    33e8:	81 e0       	ldi	r24, 0x01	; 1
    33ea:	80 93 42 18 	sts	0x1842, r24	; 0x801842 <xYieldPending>
    33ee:	08 95       	ret

000033f0 <xTaskGetCurrentTaskHandle>:
    33f0:	80 91 c9 18 	lds	r24, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    33f4:	90 91 ca 18 	lds	r25, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    33f8:	08 95       	ret

000033fa <xTaskGetSchedulerState>:
    33fa:	80 91 44 18 	lds	r24, 0x1844	; 0x801844 <xSchedulerRunning>
    33fe:	88 23       	and	r24, r24
    3400:	31 f0       	breq	.+12     	; 0x340e <xTaskGetSchedulerState+0x14>
    3402:	80 91 39 18 	lds	r24, 0x1839	; 0x801839 <uxSchedulerSuspended>
    3406:	88 23       	and	r24, r24
    3408:	21 f0       	breq	.+8      	; 0x3412 <xTaskGetSchedulerState+0x18>
    340a:	80 e0       	ldi	r24, 0x00	; 0
    340c:	08 95       	ret
    340e:	81 e0       	ldi	r24, 0x01	; 1
    3410:	08 95       	ret
    3412:	82 e0       	ldi	r24, 0x02	; 2
    3414:	08 95       	ret

00003416 <xTaskPriorityInherit>:
    3416:	0f 93       	push	r16
    3418:	1f 93       	push	r17
    341a:	cf 93       	push	r28
    341c:	df 93       	push	r29
    341e:	fc 01       	movw	r30, r24
    3420:	89 2b       	or	r24, r25
    3422:	09 f4       	brne	.+2      	; 0x3426 <xTaskPriorityInherit+0x10>
    3424:	60 c0       	rjmp	.+192    	; 0x34e6 <xTaskPriorityInherit+0xd0>
    3426:	82 8d       	ldd	r24, Z+26	; 0x1a
    3428:	a0 91 c9 18 	lds	r26, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    342c:	b0 91 ca 18 	lds	r27, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    3430:	5a 96       	adiw	r26, 0x1a	; 26
    3432:	9c 91       	ld	r25, X
    3434:	89 17       	cp	r24, r25
    3436:	08 f0       	brcs	.+2      	; 0x343a <xTaskPriorityInherit+0x24>
    3438:	4a c0       	rjmp	.+148    	; 0x34ce <xTaskPriorityInherit+0xb8>
    343a:	46 85       	ldd	r20, Z+14	; 0x0e
    343c:	57 85       	ldd	r21, Z+15	; 0x0f
    343e:	60 89       	ldd	r22, Z+16	; 0x10
    3440:	71 89       	ldd	r23, Z+17	; 0x11
    3442:	77 23       	and	r23, r23
    3444:	94 f0       	brlt	.+36     	; 0x346a <xTaskPriorityInherit+0x54>
    3446:	a0 91 c9 18 	lds	r26, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    344a:	b0 91 ca 18 	lds	r27, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    344e:	5a 96       	adiw	r26, 0x1a	; 26
    3450:	9c 91       	ld	r25, X
    3452:	46 e0       	ldi	r20, 0x06	; 6
    3454:	50 e0       	ldi	r21, 0x00	; 0
    3456:	60 e0       	ldi	r22, 0x00	; 0
    3458:	70 e0       	ldi	r23, 0x00	; 0
    345a:	49 1b       	sub	r20, r25
    345c:	51 09       	sbc	r21, r1
    345e:	61 09       	sbc	r22, r1
    3460:	71 09       	sbc	r23, r1
    3462:	46 87       	std	Z+14, r20	; 0x0e
    3464:	57 87       	std	Z+15, r21	; 0x0f
    3466:	60 8b       	std	Z+16, r22	; 0x10
    3468:	71 8b       	std	Z+17, r23	; 0x11
    346a:	2b e0       	ldi	r18, 0x0B	; 11
    346c:	82 9f       	mul	r24, r18
    346e:	c0 01       	movw	r24, r0
    3470:	11 24       	eor	r1, r1
    3472:	89 57       	subi	r24, 0x79	; 121
    3474:	97 4e       	sbci	r25, 0xE7	; 231
    3476:	24 85       	ldd	r18, Z+12	; 0x0c
    3478:	35 85       	ldd	r19, Z+13	; 0x0d
    347a:	28 17       	cp	r18, r24
    347c:	39 07       	cpc	r19, r25
    347e:	f1 f4       	brne	.+60     	; 0x34bc <xTaskPriorityInherit+0xa6>
    3480:	8f 01       	movw	r16, r30
    3482:	ef 01       	movw	r28, r30
    3484:	22 96       	adiw	r28, 0x02	; 2
    3486:	ce 01       	movw	r24, r28
    3488:	0e 94 76 0c 	call	0x18ec	; 0x18ec <uxListRemove>
    348c:	e0 91 c9 18 	lds	r30, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    3490:	f0 91 ca 18 	lds	r31, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    3494:	82 8d       	ldd	r24, Z+26	; 0x1a
    3496:	f8 01       	movw	r30, r16
    3498:	82 8f       	std	Z+26, r24	; 0x1a
    349a:	90 91 45 18 	lds	r25, 0x1845	; 0x801845 <uxTopReadyPriority>
    349e:	98 17       	cp	r25, r24
    34a0:	10 f4       	brcc	.+4      	; 0x34a6 <xTaskPriorityInherit+0x90>
    34a2:	80 93 45 18 	sts	0x1845, r24	; 0x801845 <uxTopReadyPriority>
    34a6:	fb e0       	ldi	r31, 0x0B	; 11
    34a8:	8f 9f       	mul	r24, r31
    34aa:	c0 01       	movw	r24, r0
    34ac:	11 24       	eor	r1, r1
    34ae:	be 01       	movw	r22, r28
    34b0:	89 57       	subi	r24, 0x79	; 121
    34b2:	97 4e       	sbci	r25, 0xE7	; 231
    34b4:	0e 94 18 0c 	call	0x1830	; 0x1830 <vListInsertEnd>
    34b8:	81 e0       	ldi	r24, 0x01	; 1
    34ba:	16 c0       	rjmp	.+44     	; 0x34e8 <xTaskPriorityInherit+0xd2>
    34bc:	a0 91 c9 18 	lds	r26, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    34c0:	b0 91 ca 18 	lds	r27, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    34c4:	5a 96       	adiw	r26, 0x1a	; 26
    34c6:	8c 91       	ld	r24, X
    34c8:	82 8f       	std	Z+26, r24	; 0x1a
    34ca:	81 e0       	ldi	r24, 0x01	; 1
    34cc:	0d c0       	rjmp	.+26     	; 0x34e8 <xTaskPriorityInherit+0xd2>
    34ce:	a0 91 c9 18 	lds	r26, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    34d2:	b0 91 ca 18 	lds	r27, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    34d6:	81 e0       	ldi	r24, 0x01	; 1
    34d8:	27 a1       	ldd	r18, Z+39	; 0x27
    34da:	5a 96       	adiw	r26, 0x1a	; 26
    34dc:	9c 91       	ld	r25, X
    34de:	29 17       	cp	r18, r25
    34e0:	18 f0       	brcs	.+6      	; 0x34e8 <xTaskPriorityInherit+0xd2>
    34e2:	80 e0       	ldi	r24, 0x00	; 0
    34e4:	01 c0       	rjmp	.+2      	; 0x34e8 <xTaskPriorityInherit+0xd2>
    34e6:	80 e0       	ldi	r24, 0x00	; 0
    34e8:	df 91       	pop	r29
    34ea:	cf 91       	pop	r28
    34ec:	1f 91       	pop	r17
    34ee:	0f 91       	pop	r16
    34f0:	08 95       	ret

000034f2 <xTaskPriorityDisinherit>:
    34f2:	0f 93       	push	r16
    34f4:	1f 93       	push	r17
    34f6:	cf 93       	push	r28
    34f8:	df 93       	push	r29
    34fa:	fc 01       	movw	r30, r24
    34fc:	89 2b       	or	r24, r25
    34fe:	79 f1       	breq	.+94     	; 0x355e <xTaskPriorityDisinherit+0x6c>
    3500:	80 a5       	ldd	r24, Z+40	; 0x28
    3502:	81 50       	subi	r24, 0x01	; 1
    3504:	80 a7       	std	Z+40, r24	; 0x28
    3506:	22 8d       	ldd	r18, Z+26	; 0x1a
    3508:	97 a1       	ldd	r25, Z+39	; 0x27
    350a:	29 17       	cp	r18, r25
    350c:	51 f1       	breq	.+84     	; 0x3562 <xTaskPriorityDisinherit+0x70>
    350e:	81 11       	cpse	r24, r1
    3510:	2a c0       	rjmp	.+84     	; 0x3566 <xTaskPriorityDisinherit+0x74>
    3512:	ef 01       	movw	r28, r30
    3514:	8f 01       	movw	r16, r30
    3516:	0e 5f       	subi	r16, 0xFE	; 254
    3518:	1f 4f       	sbci	r17, 0xFF	; 255
    351a:	c8 01       	movw	r24, r16
    351c:	0e 94 76 0c 	call	0x18ec	; 0x18ec <uxListRemove>
    3520:	8f a1       	ldd	r24, Y+39	; 0x27
    3522:	8a 8f       	std	Y+26, r24	; 0x1a
    3524:	46 e0       	ldi	r20, 0x06	; 6
    3526:	50 e0       	ldi	r21, 0x00	; 0
    3528:	60 e0       	ldi	r22, 0x00	; 0
    352a:	70 e0       	ldi	r23, 0x00	; 0
    352c:	48 1b       	sub	r20, r24
    352e:	51 09       	sbc	r21, r1
    3530:	61 09       	sbc	r22, r1
    3532:	71 09       	sbc	r23, r1
    3534:	4e 87       	std	Y+14, r20	; 0x0e
    3536:	5f 87       	std	Y+15, r21	; 0x0f
    3538:	68 8b       	std	Y+16, r22	; 0x10
    353a:	79 8b       	std	Y+17, r23	; 0x11
    353c:	90 91 45 18 	lds	r25, 0x1845	; 0x801845 <uxTopReadyPriority>
    3540:	98 17       	cp	r25, r24
    3542:	10 f4       	brcc	.+4      	; 0x3548 <xTaskPriorityDisinherit+0x56>
    3544:	80 93 45 18 	sts	0x1845, r24	; 0x801845 <uxTopReadyPriority>
    3548:	2b e0       	ldi	r18, 0x0B	; 11
    354a:	82 9f       	mul	r24, r18
    354c:	c0 01       	movw	r24, r0
    354e:	11 24       	eor	r1, r1
    3550:	b8 01       	movw	r22, r16
    3552:	89 57       	subi	r24, 0x79	; 121
    3554:	97 4e       	sbci	r25, 0xE7	; 231
    3556:	0e 94 18 0c 	call	0x1830	; 0x1830 <vListInsertEnd>
    355a:	81 e0       	ldi	r24, 0x01	; 1
    355c:	05 c0       	rjmp	.+10     	; 0x3568 <xTaskPriorityDisinherit+0x76>
    355e:	80 e0       	ldi	r24, 0x00	; 0
    3560:	03 c0       	rjmp	.+6      	; 0x3568 <xTaskPriorityDisinherit+0x76>
    3562:	80 e0       	ldi	r24, 0x00	; 0
    3564:	01 c0       	rjmp	.+2      	; 0x3568 <xTaskPriorityDisinherit+0x76>
    3566:	80 e0       	ldi	r24, 0x00	; 0
    3568:	df 91       	pop	r29
    356a:	cf 91       	pop	r28
    356c:	1f 91       	pop	r17
    356e:	0f 91       	pop	r16
    3570:	08 95       	ret

00003572 <vTaskPriorityDisinheritAfterTimeout>:
    3572:	0f 93       	push	r16
    3574:	1f 93       	push	r17
    3576:	cf 93       	push	r28
    3578:	df 93       	push	r29
    357a:	fc 01       	movw	r30, r24
    357c:	89 2b       	or	r24, r25
    357e:	09 f4       	brne	.+2      	; 0x3582 <vTaskPriorityDisinheritAfterTimeout+0x10>
    3580:	3f c0       	rjmp	.+126    	; 0x3600 <vTaskPriorityDisinheritAfterTimeout+0x8e>
    3582:	87 a1       	ldd	r24, Z+39	; 0x27
    3584:	86 17       	cp	r24, r22
    3586:	08 f4       	brcc	.+2      	; 0x358a <vTaskPriorityDisinheritAfterTimeout+0x18>
    3588:	86 2f       	mov	r24, r22
    358a:	92 8d       	ldd	r25, Z+26	; 0x1a
    358c:	98 17       	cp	r25, r24
    358e:	c1 f1       	breq	.+112    	; 0x3600 <vTaskPriorityDisinheritAfterTimeout+0x8e>
    3590:	20 a5       	ldd	r18, Z+40	; 0x28
    3592:	21 30       	cpi	r18, 0x01	; 1
    3594:	a9 f5       	brne	.+106    	; 0x3600 <vTaskPriorityDisinheritAfterTimeout+0x8e>
    3596:	82 8f       	std	Z+26, r24	; 0x1a
    3598:	46 85       	ldd	r20, Z+14	; 0x0e
    359a:	57 85       	ldd	r21, Z+15	; 0x0f
    359c:	60 89       	ldd	r22, Z+16	; 0x10
    359e:	71 89       	ldd	r23, Z+17	; 0x11
    35a0:	77 23       	and	r23, r23
    35a2:	64 f0       	brlt	.+24     	; 0x35bc <vTaskPriorityDisinheritAfterTimeout+0x4a>
    35a4:	46 e0       	ldi	r20, 0x06	; 6
    35a6:	50 e0       	ldi	r21, 0x00	; 0
    35a8:	60 e0       	ldi	r22, 0x00	; 0
    35aa:	70 e0       	ldi	r23, 0x00	; 0
    35ac:	48 1b       	sub	r20, r24
    35ae:	51 09       	sbc	r21, r1
    35b0:	61 09       	sbc	r22, r1
    35b2:	71 09       	sbc	r23, r1
    35b4:	46 87       	std	Z+14, r20	; 0x0e
    35b6:	57 87       	std	Z+15, r21	; 0x0f
    35b8:	60 8b       	std	Z+16, r22	; 0x10
    35ba:	71 8b       	std	Z+17, r23	; 0x11
    35bc:	2b e0       	ldi	r18, 0x0B	; 11
    35be:	92 9f       	mul	r25, r18
    35c0:	c0 01       	movw	r24, r0
    35c2:	11 24       	eor	r1, r1
    35c4:	89 57       	subi	r24, 0x79	; 121
    35c6:	97 4e       	sbci	r25, 0xE7	; 231
    35c8:	24 85       	ldd	r18, Z+12	; 0x0c
    35ca:	35 85       	ldd	r19, Z+13	; 0x0d
    35cc:	28 17       	cp	r18, r24
    35ce:	39 07       	cpc	r19, r25
    35d0:	b9 f4       	brne	.+46     	; 0x3600 <vTaskPriorityDisinheritAfterTimeout+0x8e>
    35d2:	ef 01       	movw	r28, r30
    35d4:	8f 01       	movw	r16, r30
    35d6:	0e 5f       	subi	r16, 0xFE	; 254
    35d8:	1f 4f       	sbci	r17, 0xFF	; 255
    35da:	c8 01       	movw	r24, r16
    35dc:	0e 94 76 0c 	call	0x18ec	; 0x18ec <uxListRemove>
    35e0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    35e2:	90 91 45 18 	lds	r25, 0x1845	; 0x801845 <uxTopReadyPriority>
    35e6:	98 17       	cp	r25, r24
    35e8:	10 f4       	brcc	.+4      	; 0x35ee <vTaskPriorityDisinheritAfterTimeout+0x7c>
    35ea:	80 93 45 18 	sts	0x1845, r24	; 0x801845 <uxTopReadyPriority>
    35ee:	2b e0       	ldi	r18, 0x0B	; 11
    35f0:	82 9f       	mul	r24, r18
    35f2:	c0 01       	movw	r24, r0
    35f4:	11 24       	eor	r1, r1
    35f6:	b8 01       	movw	r22, r16
    35f8:	89 57       	subi	r24, 0x79	; 121
    35fa:	97 4e       	sbci	r25, 0xE7	; 231
    35fc:	0e 94 18 0c 	call	0x1830	; 0x1830 <vListInsertEnd>
    3600:	df 91       	pop	r29
    3602:	cf 91       	pop	r28
    3604:	1f 91       	pop	r17
    3606:	0f 91       	pop	r16
    3608:	08 95       	ret

0000360a <uxTaskResetEventItemValue>:
    360a:	cf 92       	push	r12
    360c:	df 92       	push	r13
    360e:	ef 92       	push	r14
    3610:	ff 92       	push	r15
    3612:	e0 91 c9 18 	lds	r30, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    3616:	f0 91 ca 18 	lds	r31, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    361a:	66 85       	ldd	r22, Z+14	; 0x0e
    361c:	77 85       	ldd	r23, Z+15	; 0x0f
    361e:	80 89       	ldd	r24, Z+16	; 0x10
    3620:	91 89       	ldd	r25, Z+17	; 0x11
    3622:	e0 91 c9 18 	lds	r30, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    3626:	f0 91 ca 18 	lds	r31, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    362a:	a0 91 c9 18 	lds	r26, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    362e:	b0 91 ca 18 	lds	r27, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    3632:	5a 96       	adiw	r26, 0x1a	; 26
    3634:	2c 91       	ld	r18, X
    3636:	0f 2e       	mov	r0, r31
    3638:	f6 e0       	ldi	r31, 0x06	; 6
    363a:	cf 2e       	mov	r12, r31
    363c:	d1 2c       	mov	r13, r1
    363e:	e1 2c       	mov	r14, r1
    3640:	f1 2c       	mov	r15, r1
    3642:	f0 2d       	mov	r31, r0
    3644:	c2 1a       	sub	r12, r18
    3646:	d1 08       	sbc	r13, r1
    3648:	e1 08       	sbc	r14, r1
    364a:	f1 08       	sbc	r15, r1
    364c:	c6 86       	std	Z+14, r12	; 0x0e
    364e:	d7 86       	std	Z+15, r13	; 0x0f
    3650:	e0 8a       	std	Z+16, r14	; 0x10
    3652:	f1 8a       	std	Z+17, r15	; 0x11
    3654:	ff 90       	pop	r15
    3656:	ef 90       	pop	r14
    3658:	df 90       	pop	r13
    365a:	cf 90       	pop	r12
    365c:	08 95       	ret

0000365e <pvTaskIncrementMutexHeldCount>:
    365e:	80 91 c9 18 	lds	r24, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    3662:	90 91 ca 18 	lds	r25, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    3666:	89 2b       	or	r24, r25
    3668:	39 f0       	breq	.+14     	; 0x3678 <pvTaskIncrementMutexHeldCount+0x1a>
    366a:	e0 91 c9 18 	lds	r30, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    366e:	f0 91 ca 18 	lds	r31, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    3672:	80 a5       	ldd	r24, Z+40	; 0x28
    3674:	8f 5f       	subi	r24, 0xFF	; 255
    3676:	80 a7       	std	Z+40, r24	; 0x28
    3678:	80 91 c9 18 	lds	r24, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    367c:	90 91 ca 18 	lds	r25, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    3680:	08 95       	ret

00003682 <xTaskNotifyWait>:
    3682:	4f 92       	push	r4
    3684:	5f 92       	push	r5
    3686:	6f 92       	push	r6
    3688:	7f 92       	push	r7
    368a:	8f 92       	push	r8
    368c:	9f 92       	push	r9
    368e:	af 92       	push	r10
    3690:	bf 92       	push	r11
    3692:	cf 92       	push	r12
    3694:	df 92       	push	r13
    3696:	ef 92       	push	r14
    3698:	ff 92       	push	r15
    369a:	0f 93       	push	r16
    369c:	1f 93       	push	r17
    369e:	49 01       	movw	r8, r18
    36a0:	5a 01       	movw	r10, r20
    36a2:	0f b6       	in	r0, 0x3f	; 63
    36a4:	f8 94       	cli
    36a6:	0f 92       	push	r0
    36a8:	e0 91 c9 18 	lds	r30, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    36ac:	f0 91 ca 18 	lds	r31, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    36b0:	27 a5       	ldd	r18, Z+47	; 0x2f
    36b2:	22 30       	cpi	r18, 0x02	; 2
    36b4:	39 f1       	breq	.+78     	; 0x3704 <xTaskNotifyWait+0x82>
    36b6:	e0 91 c9 18 	lds	r30, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    36ba:	f0 91 ca 18 	lds	r31, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    36be:	43 a4       	ldd	r4, Z+43	; 0x2b
    36c0:	54 a4       	ldd	r5, Z+44	; 0x2c
    36c2:	65 a4       	ldd	r6, Z+45	; 0x2d
    36c4:	76 a4       	ldd	r7, Z+46	; 0x2e
    36c6:	dc 01       	movw	r26, r24
    36c8:	cb 01       	movw	r24, r22
    36ca:	80 95       	com	r24
    36cc:	90 95       	com	r25
    36ce:	a0 95       	com	r26
    36d0:	b0 95       	com	r27
    36d2:	84 21       	and	r24, r4
    36d4:	95 21       	and	r25, r5
    36d6:	a6 21       	and	r26, r6
    36d8:	b7 21       	and	r27, r7
    36da:	83 a7       	std	Z+43, r24	; 0x2b
    36dc:	94 a7       	std	Z+44, r25	; 0x2c
    36de:	a5 a7       	std	Z+45, r26	; 0x2d
    36e0:	b6 a7       	std	Z+46, r27	; 0x2e
    36e2:	e0 91 c9 18 	lds	r30, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    36e6:	f0 91 ca 18 	lds	r31, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    36ea:	81 e0       	ldi	r24, 0x01	; 1
    36ec:	87 a7       	std	Z+47, r24	; 0x2f
    36ee:	c1 14       	cp	r12, r1
    36f0:	d1 04       	cpc	r13, r1
    36f2:	e1 04       	cpc	r14, r1
    36f4:	f1 04       	cpc	r15, r1
    36f6:	31 f0       	breq	.+12     	; 0x3704 <xTaskNotifyWait+0x82>
    36f8:	41 e0       	ldi	r20, 0x01	; 1
    36fa:	c7 01       	movw	r24, r14
    36fc:	b6 01       	movw	r22, r12
    36fe:	56 d9       	rcall	.-3412   	; 0x29ac <prvAddCurrentTaskToDelayedList>
    3700:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <vPortYield>
    3704:	0f 90       	pop	r0
    3706:	0f be       	out	0x3f, r0	; 63
    3708:	0f b6       	in	r0, 0x3f	; 63
    370a:	f8 94       	cli
    370c:	0f 92       	push	r0
    370e:	01 15       	cp	r16, r1
    3710:	11 05       	cpc	r17, r1
    3712:	69 f0       	breq	.+26     	; 0x372e <xTaskNotifyWait+0xac>
    3714:	e0 91 c9 18 	lds	r30, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    3718:	f0 91 ca 18 	lds	r31, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    371c:	83 a5       	ldd	r24, Z+43	; 0x2b
    371e:	94 a5       	ldd	r25, Z+44	; 0x2c
    3720:	a5 a5       	ldd	r26, Z+45	; 0x2d
    3722:	b6 a5       	ldd	r27, Z+46	; 0x2e
    3724:	f8 01       	movw	r30, r16
    3726:	80 83       	st	Z, r24
    3728:	91 83       	std	Z+1, r25	; 0x01
    372a:	a2 83       	std	Z+2, r26	; 0x02
    372c:	b3 83       	std	Z+3, r27	; 0x03
    372e:	e0 91 c9 18 	lds	r30, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    3732:	f0 91 ca 18 	lds	r31, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    3736:	87 a5       	ldd	r24, Z+47	; 0x2f
    3738:	82 30       	cpi	r24, 0x02	; 2
    373a:	b1 f4       	brne	.+44     	; 0x3768 <xTaskNotifyWait+0xe6>
    373c:	e0 91 c9 18 	lds	r30, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    3740:	f0 91 ca 18 	lds	r31, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    3744:	83 a5       	ldd	r24, Z+43	; 0x2b
    3746:	94 a5       	ldd	r25, Z+44	; 0x2c
    3748:	a5 a5       	ldd	r26, Z+45	; 0x2d
    374a:	b6 a5       	ldd	r27, Z+46	; 0x2e
    374c:	80 94       	com	r8
    374e:	90 94       	com	r9
    3750:	a0 94       	com	r10
    3752:	b0 94       	com	r11
    3754:	88 22       	and	r8, r24
    3756:	99 22       	and	r9, r25
    3758:	aa 22       	and	r10, r26
    375a:	bb 22       	and	r11, r27
    375c:	83 a6       	std	Z+43, r8	; 0x2b
    375e:	94 a6       	std	Z+44, r9	; 0x2c
    3760:	a5 a6       	std	Z+45, r10	; 0x2d
    3762:	b6 a6       	std	Z+46, r11	; 0x2e
    3764:	81 e0       	ldi	r24, 0x01	; 1
    3766:	01 c0       	rjmp	.+2      	; 0x376a <xTaskNotifyWait+0xe8>
    3768:	80 e0       	ldi	r24, 0x00	; 0
    376a:	e0 91 c9 18 	lds	r30, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    376e:	f0 91 ca 18 	lds	r31, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    3772:	17 a6       	std	Z+47, r1	; 0x2f
    3774:	0f 90       	pop	r0
    3776:	0f be       	out	0x3f, r0	; 63
    3778:	1f 91       	pop	r17
    377a:	0f 91       	pop	r16
    377c:	ff 90       	pop	r15
    377e:	ef 90       	pop	r14
    3780:	df 90       	pop	r13
    3782:	cf 90       	pop	r12
    3784:	bf 90       	pop	r11
    3786:	af 90       	pop	r10
    3788:	9f 90       	pop	r9
    378a:	8f 90       	pop	r8
    378c:	7f 90       	pop	r7
    378e:	6f 90       	pop	r6
    3790:	5f 90       	pop	r5
    3792:	4f 90       	pop	r4
    3794:	08 95       	ret

00003796 <xTaskGenericNotify>:
    3796:	0f 93       	push	r16
    3798:	1f 93       	push	r17
    379a:	cf 93       	push	r28
    379c:	df 93       	push	r29
    379e:	fc 01       	movw	r30, r24
    37a0:	0f b6       	in	r0, 0x3f	; 63
    37a2:	f8 94       	cli
    37a4:	0f 92       	push	r0
    37a6:	01 15       	cp	r16, r1
    37a8:	11 05       	cpc	r17, r1
    37aa:	49 f0       	breq	.+18     	; 0x37be <xTaskGenericNotify+0x28>
    37ac:	83 a5       	ldd	r24, Z+43	; 0x2b
    37ae:	94 a5       	ldd	r25, Z+44	; 0x2c
    37b0:	a5 a5       	ldd	r26, Z+45	; 0x2d
    37b2:	b6 a5       	ldd	r27, Z+46	; 0x2e
    37b4:	e8 01       	movw	r28, r16
    37b6:	88 83       	st	Y, r24
    37b8:	99 83       	std	Y+1, r25	; 0x01
    37ba:	aa 83       	std	Y+2, r26	; 0x02
    37bc:	bb 83       	std	Y+3, r27	; 0x03
    37be:	87 a5       	ldd	r24, Z+47	; 0x2f
    37c0:	92 e0       	ldi	r25, 0x02	; 2
    37c2:	97 a7       	std	Z+47, r25	; 0x2f
    37c4:	22 30       	cpi	r18, 0x02	; 2
    37c6:	b1 f0       	breq	.+44     	; 0x37f4 <xTaskGenericNotify+0x5e>
    37c8:	18 f4       	brcc	.+6      	; 0x37d0 <xTaskGenericNotify+0x3a>
    37ca:	21 30       	cpi	r18, 0x01	; 1
    37cc:	31 f0       	breq	.+12     	; 0x37da <xTaskGenericNotify+0x44>
    37ce:	2a c0       	rjmp	.+84     	; 0x3824 <xTaskGenericNotify+0x8e>
    37d0:	23 30       	cpi	r18, 0x03	; 3
    37d2:	e9 f0       	breq	.+58     	; 0x380e <xTaskGenericNotify+0x78>
    37d4:	24 30       	cpi	r18, 0x04	; 4
    37d6:	01 f1       	breq	.+64     	; 0x3818 <xTaskGenericNotify+0x82>
    37d8:	25 c0       	rjmp	.+74     	; 0x3824 <xTaskGenericNotify+0x8e>
    37da:	03 a5       	ldd	r16, Z+43	; 0x2b
    37dc:	14 a5       	ldd	r17, Z+44	; 0x2c
    37de:	25 a5       	ldd	r18, Z+45	; 0x2d
    37e0:	36 a5       	ldd	r19, Z+46	; 0x2e
    37e2:	40 2b       	or	r20, r16
    37e4:	51 2b       	or	r21, r17
    37e6:	62 2b       	or	r22, r18
    37e8:	73 2b       	or	r23, r19
    37ea:	43 a7       	std	Z+43, r20	; 0x2b
    37ec:	54 a7       	std	Z+44, r21	; 0x2c
    37ee:	65 a7       	std	Z+45, r22	; 0x2d
    37f0:	76 a7       	std	Z+46, r23	; 0x2e
    37f2:	18 c0       	rjmp	.+48     	; 0x3824 <xTaskGenericNotify+0x8e>
    37f4:	43 a5       	ldd	r20, Z+43	; 0x2b
    37f6:	54 a5       	ldd	r21, Z+44	; 0x2c
    37f8:	65 a5       	ldd	r22, Z+45	; 0x2d
    37fa:	76 a5       	ldd	r23, Z+46	; 0x2e
    37fc:	4f 5f       	subi	r20, 0xFF	; 255
    37fe:	5f 4f       	sbci	r21, 0xFF	; 255
    3800:	6f 4f       	sbci	r22, 0xFF	; 255
    3802:	7f 4f       	sbci	r23, 0xFF	; 255
    3804:	43 a7       	std	Z+43, r20	; 0x2b
    3806:	54 a7       	std	Z+44, r21	; 0x2c
    3808:	65 a7       	std	Z+45, r22	; 0x2d
    380a:	76 a7       	std	Z+46, r23	; 0x2e
    380c:	0b c0       	rjmp	.+22     	; 0x3824 <xTaskGenericNotify+0x8e>
    380e:	43 a7       	std	Z+43, r20	; 0x2b
    3810:	54 a7       	std	Z+44, r21	; 0x2c
    3812:	65 a7       	std	Z+45, r22	; 0x2d
    3814:	76 a7       	std	Z+46, r23	; 0x2e
    3816:	06 c0       	rjmp	.+12     	; 0x3824 <xTaskGenericNotify+0x8e>
    3818:	82 30       	cpi	r24, 0x02	; 2
    381a:	49 f1       	breq	.+82     	; 0x386e <xTaskGenericNotify+0xd8>
    381c:	43 a7       	std	Z+43, r20	; 0x2b
    381e:	54 a7       	std	Z+44, r21	; 0x2c
    3820:	65 a7       	std	Z+45, r22	; 0x2d
    3822:	76 a7       	std	Z+46, r23	; 0x2e
    3824:	81 30       	cpi	r24, 0x01	; 1
    3826:	29 f5       	brne	.+74     	; 0x3872 <xTaskGenericNotify+0xdc>
    3828:	ef 01       	movw	r28, r30
    382a:	8f 01       	movw	r16, r30
    382c:	0e 5f       	subi	r16, 0xFE	; 254
    382e:	1f 4f       	sbci	r17, 0xFF	; 255
    3830:	c8 01       	movw	r24, r16
    3832:	0e 94 76 0c 	call	0x18ec	; 0x18ec <uxListRemove>
    3836:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3838:	90 91 45 18 	lds	r25, 0x1845	; 0x801845 <uxTopReadyPriority>
    383c:	98 17       	cp	r25, r24
    383e:	10 f4       	brcc	.+4      	; 0x3844 <xTaskGenericNotify+0xae>
    3840:	80 93 45 18 	sts	0x1845, r24	; 0x801845 <uxTopReadyPriority>
    3844:	2b e0       	ldi	r18, 0x0B	; 11
    3846:	82 9f       	mul	r24, r18
    3848:	c0 01       	movw	r24, r0
    384a:	11 24       	eor	r1, r1
    384c:	b8 01       	movw	r22, r16
    384e:	89 57       	subi	r24, 0x79	; 121
    3850:	97 4e       	sbci	r25, 0xE7	; 231
    3852:	0e 94 18 0c 	call	0x1830	; 0x1830 <vListInsertEnd>
    3856:	e0 91 c9 18 	lds	r30, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    385a:	f0 91 ca 18 	lds	r31, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    385e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3860:	82 8d       	ldd	r24, Z+26	; 0x1a
    3862:	89 17       	cp	r24, r25
    3864:	40 f4       	brcc	.+16     	; 0x3876 <xTaskGenericNotify+0xe0>
    3866:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <vPortYield>
    386a:	81 e0       	ldi	r24, 0x01	; 1
    386c:	05 c0       	rjmp	.+10     	; 0x3878 <xTaskGenericNotify+0xe2>
    386e:	80 e0       	ldi	r24, 0x00	; 0
    3870:	03 c0       	rjmp	.+6      	; 0x3878 <xTaskGenericNotify+0xe2>
    3872:	81 e0       	ldi	r24, 0x01	; 1
    3874:	01 c0       	rjmp	.+2      	; 0x3878 <xTaskGenericNotify+0xe2>
    3876:	81 e0       	ldi	r24, 0x01	; 1
    3878:	0f 90       	pop	r0
    387a:	0f be       	out	0x3f, r0	; 63
    387c:	df 91       	pop	r29
    387e:	cf 91       	pop	r28
    3880:	1f 91       	pop	r17
    3882:	0f 91       	pop	r16
    3884:	08 95       	ret

00003886 <xTaskGenericNotifyFromISR>:
    3886:	ef 92       	push	r14
    3888:	ff 92       	push	r15
    388a:	0f 93       	push	r16
    388c:	1f 93       	push	r17
    388e:	cf 93       	push	r28
    3890:	df 93       	push	r29
    3892:	fc 01       	movw	r30, r24
    3894:	01 15       	cp	r16, r1
    3896:	11 05       	cpc	r17, r1
    3898:	49 f0       	breq	.+18     	; 0x38ac <xTaskGenericNotifyFromISR+0x26>
    389a:	83 a5       	ldd	r24, Z+43	; 0x2b
    389c:	94 a5       	ldd	r25, Z+44	; 0x2c
    389e:	a5 a5       	ldd	r26, Z+45	; 0x2d
    38a0:	b6 a5       	ldd	r27, Z+46	; 0x2e
    38a2:	e8 01       	movw	r28, r16
    38a4:	88 83       	st	Y, r24
    38a6:	99 83       	std	Y+1, r25	; 0x01
    38a8:	aa 83       	std	Y+2, r26	; 0x02
    38aa:	bb 83       	std	Y+3, r27	; 0x03
    38ac:	87 a5       	ldd	r24, Z+47	; 0x2f
    38ae:	92 e0       	ldi	r25, 0x02	; 2
    38b0:	97 a7       	std	Z+47, r25	; 0x2f
    38b2:	22 30       	cpi	r18, 0x02	; 2
    38b4:	b1 f0       	breq	.+44     	; 0x38e2 <xTaskGenericNotifyFromISR+0x5c>
    38b6:	18 f4       	brcc	.+6      	; 0x38be <xTaskGenericNotifyFromISR+0x38>
    38b8:	21 30       	cpi	r18, 0x01	; 1
    38ba:	31 f0       	breq	.+12     	; 0x38c8 <xTaskGenericNotifyFromISR+0x42>
    38bc:	2a c0       	rjmp	.+84     	; 0x3912 <xTaskGenericNotifyFromISR+0x8c>
    38be:	23 30       	cpi	r18, 0x03	; 3
    38c0:	e9 f0       	breq	.+58     	; 0x38fc <xTaskGenericNotifyFromISR+0x76>
    38c2:	24 30       	cpi	r18, 0x04	; 4
    38c4:	01 f1       	breq	.+64     	; 0x3906 <xTaskGenericNotifyFromISR+0x80>
    38c6:	25 c0       	rjmp	.+74     	; 0x3912 <xTaskGenericNotifyFromISR+0x8c>
    38c8:	03 a5       	ldd	r16, Z+43	; 0x2b
    38ca:	14 a5       	ldd	r17, Z+44	; 0x2c
    38cc:	25 a5       	ldd	r18, Z+45	; 0x2d
    38ce:	36 a5       	ldd	r19, Z+46	; 0x2e
    38d0:	40 2b       	or	r20, r16
    38d2:	51 2b       	or	r21, r17
    38d4:	62 2b       	or	r22, r18
    38d6:	73 2b       	or	r23, r19
    38d8:	43 a7       	std	Z+43, r20	; 0x2b
    38da:	54 a7       	std	Z+44, r21	; 0x2c
    38dc:	65 a7       	std	Z+45, r22	; 0x2d
    38de:	76 a7       	std	Z+46, r23	; 0x2e
    38e0:	18 c0       	rjmp	.+48     	; 0x3912 <xTaskGenericNotifyFromISR+0x8c>
    38e2:	43 a5       	ldd	r20, Z+43	; 0x2b
    38e4:	54 a5       	ldd	r21, Z+44	; 0x2c
    38e6:	65 a5       	ldd	r22, Z+45	; 0x2d
    38e8:	76 a5       	ldd	r23, Z+46	; 0x2e
    38ea:	4f 5f       	subi	r20, 0xFF	; 255
    38ec:	5f 4f       	sbci	r21, 0xFF	; 255
    38ee:	6f 4f       	sbci	r22, 0xFF	; 255
    38f0:	7f 4f       	sbci	r23, 0xFF	; 255
    38f2:	43 a7       	std	Z+43, r20	; 0x2b
    38f4:	54 a7       	std	Z+44, r21	; 0x2c
    38f6:	65 a7       	std	Z+45, r22	; 0x2d
    38f8:	76 a7       	std	Z+46, r23	; 0x2e
    38fa:	0b c0       	rjmp	.+22     	; 0x3912 <xTaskGenericNotifyFromISR+0x8c>
    38fc:	43 a7       	std	Z+43, r20	; 0x2b
    38fe:	54 a7       	std	Z+44, r21	; 0x2c
    3900:	65 a7       	std	Z+45, r22	; 0x2d
    3902:	76 a7       	std	Z+46, r23	; 0x2e
    3904:	06 c0       	rjmp	.+12     	; 0x3912 <xTaskGenericNotifyFromISR+0x8c>
    3906:	82 30       	cpi	r24, 0x02	; 2
    3908:	d9 f1       	breq	.+118    	; 0x3980 <xTaskGenericNotifyFromISR+0xfa>
    390a:	43 a7       	std	Z+43, r20	; 0x2b
    390c:	54 a7       	std	Z+44, r21	; 0x2c
    390e:	65 a7       	std	Z+45, r22	; 0x2d
    3910:	76 a7       	std	Z+46, r23	; 0x2e
    3912:	81 30       	cpi	r24, 0x01	; 1
    3914:	b9 f5       	brne	.+110    	; 0x3984 <xTaskGenericNotifyFromISR+0xfe>
    3916:	ef 01       	movw	r28, r30
    3918:	80 91 39 18 	lds	r24, 0x1839	; 0x801839 <uxSchedulerSuspended>
    391c:	81 11       	cpse	r24, r1
    391e:	17 c0       	rjmp	.+46     	; 0x394e <xTaskGenericNotifyFromISR+0xc8>
    3920:	8f 01       	movw	r16, r30
    3922:	0e 5f       	subi	r16, 0xFE	; 254
    3924:	1f 4f       	sbci	r17, 0xFF	; 255
    3926:	c8 01       	movw	r24, r16
    3928:	0e 94 76 0c 	call	0x18ec	; 0x18ec <uxListRemove>
    392c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    392e:	90 91 45 18 	lds	r25, 0x1845	; 0x801845 <uxTopReadyPriority>
    3932:	98 17       	cp	r25, r24
    3934:	10 f4       	brcc	.+4      	; 0x393a <xTaskGenericNotifyFromISR+0xb4>
    3936:	80 93 45 18 	sts	0x1845, r24	; 0x801845 <uxTopReadyPriority>
    393a:	eb e0       	ldi	r30, 0x0B	; 11
    393c:	8e 9f       	mul	r24, r30
    393e:	c0 01       	movw	r24, r0
    3940:	11 24       	eor	r1, r1
    3942:	b8 01       	movw	r22, r16
    3944:	89 57       	subi	r24, 0x79	; 121
    3946:	97 4e       	sbci	r25, 0xE7	; 231
    3948:	0e 94 18 0c 	call	0x1830	; 0x1830 <vListInsertEnd>
    394c:	07 c0       	rjmp	.+14     	; 0x395c <xTaskGenericNotifyFromISR+0xd6>
    394e:	bf 01       	movw	r22, r30
    3950:	62 5f       	subi	r22, 0xF2	; 242
    3952:	7f 4f       	sbci	r23, 0xFF	; 255
    3954:	82 e6       	ldi	r24, 0x62	; 98
    3956:	98 e1       	ldi	r25, 0x18	; 24
    3958:	0e 94 18 0c 	call	0x1830	; 0x1830 <vListInsertEnd>
    395c:	e0 91 c9 18 	lds	r30, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    3960:	f0 91 ca 18 	lds	r31, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    3964:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3966:	82 8d       	ldd	r24, Z+26	; 0x1a
    3968:	89 17       	cp	r24, r25
    396a:	70 f4       	brcc	.+28     	; 0x3988 <xTaskGenericNotifyFromISR+0x102>
    396c:	e1 14       	cp	r14, r1
    396e:	f1 04       	cpc	r15, r1
    3970:	19 f0       	breq	.+6      	; 0x3978 <xTaskGenericNotifyFromISR+0xf2>
    3972:	81 e0       	ldi	r24, 0x01	; 1
    3974:	e7 01       	movw	r28, r14
    3976:	88 83       	st	Y, r24
    3978:	81 e0       	ldi	r24, 0x01	; 1
    397a:	80 93 42 18 	sts	0x1842, r24	; 0x801842 <xYieldPending>
    397e:	05 c0       	rjmp	.+10     	; 0x398a <xTaskGenericNotifyFromISR+0x104>
    3980:	80 e0       	ldi	r24, 0x00	; 0
    3982:	03 c0       	rjmp	.+6      	; 0x398a <xTaskGenericNotifyFromISR+0x104>
    3984:	81 e0       	ldi	r24, 0x01	; 1
    3986:	01 c0       	rjmp	.+2      	; 0x398a <xTaskGenericNotifyFromISR+0x104>
    3988:	81 e0       	ldi	r24, 0x01	; 1
    398a:	df 91       	pop	r29
    398c:	cf 91       	pop	r28
    398e:	1f 91       	pop	r17
    3990:	0f 91       	pop	r16
    3992:	ff 90       	pop	r15
    3994:	ef 90       	pop	r14
    3996:	08 95       	ret

00003998 <xTaskNotifyStateClear>:
    TCB_t *pxTCB;
    BaseType_t xReturn;

        /* If null is passed in here then it is the calling task that is having
        its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    3998:	00 97       	sbiw	r24, 0x00	; 0
    399a:	21 f4       	brne	.+8      	; 0x39a4 <xTaskNotifyStateClear+0xc>
    399c:	80 91 c9 18 	lds	r24, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    39a0:	90 91 ca 18 	lds	r25, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    39a4:	0f b6       	in	r0, 0x3f	; 63
    39a6:	f8 94       	cli
    39a8:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
    39aa:	fc 01       	movw	r30, r24
    39ac:	27 a5       	ldd	r18, Z+47	; 0x2f
    39ae:	22 30       	cpi	r18, 0x02	; 2
    39b0:	19 f4       	brne	.+6      	; 0x39b8 <xTaskNotifyStateClear+0x20>
            {
                pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    39b2:	17 a6       	std	Z+47, r1	; 0x2f
                xReturn = pdPASS;
    39b4:	81 e0       	ldi	r24, 0x01	; 1
    39b6:	01 c0       	rjmp	.+2      	; 0x39ba <xTaskNotifyStateClear+0x22>
            }
            else
            {
                xReturn = pdFAIL;
    39b8:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    39ba:	0f 90       	pop	r0
    39bc:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    39be:	08 95       	ret

000039c0 <prvInsertTimerInActiveList>:
    39c0:	cf 92       	push	r12
    39c2:	df 92       	push	r13
    39c4:	ef 92       	push	r14
    39c6:	ff 92       	push	r15
    39c8:	0f 93       	push	r16
    39ca:	1f 93       	push	r17
    39cc:	fc 01       	movw	r30, r24
    39ce:	42 83       	std	Z+2, r20	; 0x02
    39d0:	53 83       	std	Z+3, r21	; 0x03
    39d2:	64 83       	std	Z+4, r22	; 0x04
    39d4:	75 83       	std	Z+5, r23	; 0x05
    39d6:	93 87       	std	Z+11, r25	; 0x0b
    39d8:	82 87       	std	Z+10, r24	; 0x0a
    39da:	04 17       	cp	r16, r20
    39dc:	15 07       	cpc	r17, r21
    39de:	26 07       	cpc	r18, r22
    39e0:	37 07       	cpc	r19, r23
    39e2:	c0 f0       	brcs	.+48     	; 0x3a14 <prvInsertTimerInActiveList+0x54>
    39e4:	0c 19       	sub	r16, r12
    39e6:	1d 09       	sbc	r17, r13
    39e8:	2e 09       	sbc	r18, r14
    39ea:	3f 09       	sbc	r19, r15
    39ec:	86 85       	ldd	r24, Z+14	; 0x0e
    39ee:	97 85       	ldd	r25, Z+15	; 0x0f
    39f0:	a0 89       	ldd	r26, Z+16	; 0x10
    39f2:	b1 89       	ldd	r27, Z+17	; 0x11
    39f4:	08 17       	cp	r16, r24
    39f6:	19 07       	cpc	r17, r25
    39f8:	2a 07       	cpc	r18, r26
    39fa:	3b 07       	cpc	r19, r27
    39fc:	00 f5       	brcc	.+64     	; 0x3a3e <prvInsertTimerInActiveList+0x7e>
    39fe:	bf 01       	movw	r22, r30
    3a00:	6e 5f       	subi	r22, 0xFE	; 254
    3a02:	7f 4f       	sbci	r23, 0xFF	; 255
    3a04:	80 91 d3 18 	lds	r24, 0x18D3	; 0x8018d3 <pxOverflowTimerList>
    3a08:	90 91 d4 18 	lds	r25, 0x18D4	; 0x8018d4 <pxOverflowTimerList+0x1>
    3a0c:	0e 94 39 0c 	call	0x1872	; 0x1872 <vListInsert>
    3a10:	80 e0       	ldi	r24, 0x00	; 0
    3a12:	18 c0       	rjmp	.+48     	; 0x3a44 <prvInsertTimerInActiveList+0x84>
    3a14:	0c 15       	cp	r16, r12
    3a16:	1d 05       	cpc	r17, r13
    3a18:	2e 05       	cpc	r18, r14
    3a1a:	3f 05       	cpc	r19, r15
    3a1c:	28 f4       	brcc	.+10     	; 0x3a28 <prvInsertTimerInActiveList+0x68>
    3a1e:	4c 15       	cp	r20, r12
    3a20:	5d 05       	cpc	r21, r13
    3a22:	6e 05       	cpc	r22, r14
    3a24:	7f 05       	cpc	r23, r15
    3a26:	68 f4       	brcc	.+26     	; 0x3a42 <prvInsertTimerInActiveList+0x82>
    3a28:	bf 01       	movw	r22, r30
    3a2a:	6e 5f       	subi	r22, 0xFE	; 254
    3a2c:	7f 4f       	sbci	r23, 0xFF	; 255
    3a2e:	80 91 d5 18 	lds	r24, 0x18D5	; 0x8018d5 <pxCurrentTimerList>
    3a32:	90 91 d6 18 	lds	r25, 0x18D6	; 0x8018d6 <pxCurrentTimerList+0x1>
    3a36:	0e 94 39 0c 	call	0x1872	; 0x1872 <vListInsert>
    3a3a:	80 e0       	ldi	r24, 0x00	; 0
    3a3c:	03 c0       	rjmp	.+6      	; 0x3a44 <prvInsertTimerInActiveList+0x84>
    3a3e:	81 e0       	ldi	r24, 0x01	; 1
    3a40:	01 c0       	rjmp	.+2      	; 0x3a44 <prvInsertTimerInActiveList+0x84>
    3a42:	81 e0       	ldi	r24, 0x01	; 1
    3a44:	1f 91       	pop	r17
    3a46:	0f 91       	pop	r16
    3a48:	ff 90       	pop	r15
    3a4a:	ef 90       	pop	r14
    3a4c:	df 90       	pop	r13
    3a4e:	cf 90       	pop	r12
    3a50:	08 95       	ret

00003a52 <prvCheckForValidListAndQueue>:
    3a52:	0f b6       	in	r0, 0x3f	; 63
    3a54:	f8 94       	cli
    3a56:	0f 92       	push	r0
    3a58:	80 91 d1 18 	lds	r24, 0x18D1	; 0x8018d1 <xTimerQueue>
    3a5c:	90 91 d2 18 	lds	r25, 0x18D2	; 0x8018d2 <xTimerQueue+0x1>
    3a60:	89 2b       	or	r24, r25
    3a62:	e9 f4       	brne	.+58     	; 0x3a9e <prvCheckForValidListAndQueue+0x4c>
    3a64:	82 ee       	ldi	r24, 0xE2	; 226
    3a66:	98 e1       	ldi	r25, 0x18	; 24
    3a68:	0e 94 03 0c 	call	0x1806	; 0x1806 <vListInitialise>
    3a6c:	87 ed       	ldi	r24, 0xD7	; 215
    3a6e:	98 e1       	ldi	r25, 0x18	; 24
    3a70:	0e 94 03 0c 	call	0x1806	; 0x1806 <vListInitialise>
    3a74:	82 ee       	ldi	r24, 0xE2	; 226
    3a76:	98 e1       	ldi	r25, 0x18	; 24
    3a78:	90 93 d6 18 	sts	0x18D6, r25	; 0x8018d6 <pxCurrentTimerList+0x1>
    3a7c:	80 93 d5 18 	sts	0x18D5, r24	; 0x8018d5 <pxCurrentTimerList>
    3a80:	87 ed       	ldi	r24, 0xD7	; 215
    3a82:	98 e1       	ldi	r25, 0x18	; 24
    3a84:	90 93 d4 18 	sts	0x18D4, r25	; 0x8018d4 <pxOverflowTimerList+0x1>
    3a88:	80 93 d3 18 	sts	0x18D3, r24	; 0x8018d3 <pxOverflowTimerList>
    3a8c:	40 e0       	ldi	r20, 0x00	; 0
    3a8e:	67 e0       	ldi	r22, 0x07	; 7
    3a90:	8a e0       	ldi	r24, 0x0A	; 10
    3a92:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <xQueueGenericCreate>
    3a96:	90 93 d2 18 	sts	0x18D2, r25	; 0x8018d2 <xTimerQueue+0x1>
    3a9a:	80 93 d1 18 	sts	0x18D1, r24	; 0x8018d1 <xTimerQueue>
    3a9e:	0f 90       	pop	r0
    3aa0:	0f be       	out	0x3f, r0	; 63
    3aa2:	08 95       	ret

00003aa4 <xTimerCreateTimerTask>:
    3aa4:	ef 92       	push	r14
    3aa6:	ff 92       	push	r15
    3aa8:	0f 93       	push	r16
    3aaa:	d3 df       	rcall	.-90     	; 0x3a52 <prvCheckForValidListAndQueue>
    3aac:	80 91 d1 18 	lds	r24, 0x18D1	; 0x8018d1 <xTimerQueue>
    3ab0:	90 91 d2 18 	lds	r25, 0x18D2	; 0x8018d2 <xTimerQueue+0x1>
    3ab4:	89 2b       	or	r24, r25
    3ab6:	91 f0       	breq	.+36     	; 0x3adc <xTimerCreateTimerTask+0x38>
    3ab8:	0f 2e       	mov	r0, r31
    3aba:	ff ec       	ldi	r31, 0xCF	; 207
    3abc:	ef 2e       	mov	r14, r31
    3abe:	f8 e1       	ldi	r31, 0x18	; 24
    3ac0:	ff 2e       	mov	r15, r31
    3ac2:	f0 2d       	mov	r31, r0
    3ac4:	03 e0       	ldi	r16, 0x03	; 3
    3ac6:	20 e0       	ldi	r18, 0x00	; 0
    3ac8:	30 e0       	ldi	r19, 0x00	; 0
    3aca:	45 e5       	ldi	r20, 0x55	; 85
    3acc:	50 e0       	ldi	r21, 0x00	; 0
    3ace:	62 ec       	ldi	r22, 0xC2	; 194
    3ad0:	74 e0       	ldi	r23, 0x04	; 4
    3ad2:	87 e0       	ldi	r24, 0x07	; 7
    3ad4:	91 e0       	ldi	r25, 0x01	; 1
    3ad6:	0e 94 4d 15 	call	0x2a9a	; 0x2a9a <xTaskCreate>
    3ada:	01 c0       	rjmp	.+2      	; 0x3ade <xTimerCreateTimerTask+0x3a>
    3adc:	80 e0       	ldi	r24, 0x00	; 0
    3ade:	0f 91       	pop	r16
    3ae0:	ff 90       	pop	r15
    3ae2:	ef 90       	pop	r14
    3ae4:	08 95       	ret

00003ae6 <xTimerGenericCommand>:
    }
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    3ae6:	8f 92       	push	r8
    3ae8:	9f 92       	push	r9
    3aea:	af 92       	push	r10
    3aec:	bf 92       	push	r11
    3aee:	cf 92       	push	r12
    3af0:	df 92       	push	r13
    3af2:	ef 92       	push	r14
    3af4:	ff 92       	push	r15
    3af6:	0f 93       	push	r16
    3af8:	1f 93       	push	r17
    3afa:	cf 93       	push	r28
    3afc:	df 93       	push	r29
    3afe:	cd b7       	in	r28, 0x3d	; 61
    3b00:	de b7       	in	r29, 0x3e	; 62
    3b02:	27 97       	sbiw	r28, 0x07	; 7
    3b04:	0f b6       	in	r0, 0x3f	; 63
    3b06:	f8 94       	cli
    3b08:	de bf       	out	0x3e, r29	; 62
    3b0a:	0f be       	out	0x3f, r0	; 63
    3b0c:	cd bf       	out	0x3d, r28	; 61

    configASSERT( xTimer );

    /* Send a message to the timer service task to perform a particular action
    on a particular timer definition. */
    if( xTimerQueue != NULL )
    3b0e:	e0 91 d1 18 	lds	r30, 0x18D1	; 0x8018d1 <xTimerQueue>
    3b12:	f0 91 d2 18 	lds	r31, 0x18D2	; 0x8018d2 <xTimerQueue+0x1>
    3b16:	30 97       	sbiw	r30, 0x00	; 0
    3b18:	81 f1       	breq	.+96     	; 0x3b7a <xTimerGenericCommand+0x94>
    {
        /* Send a command to the timer service task to start the xTimer timer. */
        xMessage.xMessageID = xCommandID;
    3b1a:	69 83       	std	Y+1, r22	; 0x01
        xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    3b1c:	2a 83       	std	Y+2, r18	; 0x02
    3b1e:	3b 83       	std	Y+3, r19	; 0x03
    3b20:	4c 83       	std	Y+4, r20	; 0x04
    3b22:	5d 83       	std	Y+5, r21	; 0x05
        xMessage.u.xTimerParameters.pxTimer = xTimer;
    3b24:	9f 83       	std	Y+7, r25	; 0x07
    3b26:	8e 83       	std	Y+6, r24	; 0x06

        if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    3b28:	66 30       	cpi	r22, 0x06	; 6
    3b2a:	f4 f4       	brge	.+60     	; 0x3b68 <xTimerGenericCommand+0x82>
        {
            if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    3b2c:	66 dc       	rcall	.-1844   	; 0x33fa <xTaskGetSchedulerState>
    3b2e:	82 30       	cpi	r24, 0x02	; 2
    3b30:	69 f4       	brne	.+26     	; 0x3b4c <xTimerGenericCommand+0x66>
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    3b32:	00 e0       	ldi	r16, 0x00	; 0
    3b34:	a7 01       	movw	r20, r14
    3b36:	96 01       	movw	r18, r12
    3b38:	be 01       	movw	r22, r28
    3b3a:	6f 5f       	subi	r22, 0xFF	; 255
    3b3c:	7f 4f       	sbci	r23, 0xFF	; 255
    3b3e:	80 91 d1 18 	lds	r24, 0x18D1	; 0x8018d1 <xTimerQueue>
    3b42:	90 91 d2 18 	lds	r25, 0x18D2	; 0x8018d2 <xTimerQueue+0x1>
    3b46:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <xQueueGenericSend>
    3b4a:	18 c0       	rjmp	.+48     	; 0x3b7c <xTimerGenericCommand+0x96>
            }
            else
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    3b4c:	00 e0       	ldi	r16, 0x00	; 0
    3b4e:	20 e0       	ldi	r18, 0x00	; 0
    3b50:	30 e0       	ldi	r19, 0x00	; 0
    3b52:	a9 01       	movw	r20, r18
    3b54:	be 01       	movw	r22, r28
    3b56:	6f 5f       	subi	r22, 0xFF	; 255
    3b58:	7f 4f       	sbci	r23, 0xFF	; 255
    3b5a:	80 91 d1 18 	lds	r24, 0x18D1	; 0x8018d1 <xTimerQueue>
    3b5e:	90 91 d2 18 	lds	r25, 0x18D2	; 0x8018d2 <xTimerQueue+0x1>
    3b62:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <xQueueGenericSend>
    3b66:	0a c0       	rjmp	.+20     	; 0x3b7c <xTimerGenericCommand+0x96>
            }
        }
        else
        {
            xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    3b68:	20 e0       	ldi	r18, 0x00	; 0
    3b6a:	a8 01       	movw	r20, r16
    3b6c:	be 01       	movw	r22, r28
    3b6e:	6f 5f       	subi	r22, 0xFF	; 255
    3b70:	7f 4f       	sbci	r23, 0xFF	; 255
    3b72:	cf 01       	movw	r24, r30
    3b74:	0e 94 10 10 	call	0x2020	; 0x2020 <xQueueGenericSendFromISR>
    3b78:	01 c0       	rjmp	.+2      	; 0x3b7c <xTimerGenericCommand+0x96>
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
    3b7a:	80 e0       	ldi	r24, 0x00	; 0
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xReturn;
}
    3b7c:	27 96       	adiw	r28, 0x07	; 7
    3b7e:	0f b6       	in	r0, 0x3f	; 63
    3b80:	f8 94       	cli
    3b82:	de bf       	out	0x3e, r29	; 62
    3b84:	0f be       	out	0x3f, r0	; 63
    3b86:	cd bf       	out	0x3d, r28	; 61
    3b88:	df 91       	pop	r29
    3b8a:	cf 91       	pop	r28
    3b8c:	1f 91       	pop	r17
    3b8e:	0f 91       	pop	r16
    3b90:	ff 90       	pop	r15
    3b92:	ef 90       	pop	r14
    3b94:	df 90       	pop	r13
    3b96:	cf 90       	pop	r12
    3b98:	bf 90       	pop	r11
    3b9a:	af 90       	pop	r10
    3b9c:	9f 90       	pop	r9
    3b9e:	8f 90       	pop	r8
    3ba0:	08 95       	ret

00003ba2 <prvSampleTimeNow>:
    return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    3ba2:	2f 92       	push	r2
    3ba4:	3f 92       	push	r3
    3ba6:	4f 92       	push	r4
    3ba8:	5f 92       	push	r5
    3baa:	6f 92       	push	r6
    3bac:	7f 92       	push	r7
    3bae:	8f 92       	push	r8
    3bb0:	9f 92       	push	r9
    3bb2:	af 92       	push	r10
    3bb4:	bf 92       	push	r11
    3bb6:	cf 92       	push	r12
    3bb8:	df 92       	push	r13
    3bba:	ef 92       	push	r14
    3bbc:	ff 92       	push	r15
    3bbe:	0f 93       	push	r16
    3bc0:	1f 93       	push	r17
    3bc2:	cf 93       	push	r28
    3bc4:	df 93       	push	r29
    3bc6:	1c 01       	movw	r2, r24
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

    xTimeNow = xTaskGetTickCount();
    3bc8:	cb d8       	rcall	.-3690   	; 0x2d60 <xTaskGetTickCount>
    3bca:	2b 01       	movw	r4, r22
    3bcc:	3c 01       	movw	r6, r24

    if( xTimeNow < xLastTime )
    3bce:	80 91 cb 18 	lds	r24, 0x18CB	; 0x8018cb <xLastTime.2432>
    3bd2:	90 91 cc 18 	lds	r25, 0x18CC	; 0x8018cc <xLastTime.2432+0x1>
    3bd6:	a0 91 cd 18 	lds	r26, 0x18CD	; 0x8018cd <xLastTime.2432+0x2>
    3bda:	b0 91 ce 18 	lds	r27, 0x18CE	; 0x8018ce <xLastTime.2432+0x3>
    3bde:	48 16       	cp	r4, r24
    3be0:	59 06       	cpc	r5, r25
    3be2:	6a 06       	cpc	r6, r26
    3be4:	7b 06       	cpc	r7, r27
    3be6:	08 f0       	brcs	.+2      	; 0x3bea <prvSampleTimeNow+0x48>
    3be8:	53 c0       	rjmp	.+166    	; 0x3c90 <prvSampleTimeNow+0xee>
    3bea:	3b c0       	rjmp	.+118    	; 0x3c62 <prvSampleTimeNow+0xc0>
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    {
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    3bec:	07 80       	ldd	r0, Z+7	; 0x07
    3bee:	f0 85       	ldd	r31, Z+8	; 0x08
    3bf0:	e0 2d       	mov	r30, r0
    3bf2:	80 80       	ld	r8, Z
    3bf4:	91 80       	ldd	r9, Z+1	; 0x01
    3bf6:	a2 80       	ldd	r10, Z+2	; 0x02
    3bf8:	b3 80       	ldd	r11, Z+3	; 0x03

        /* Remove the timer from the list. */
        pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    3bfa:	c0 85       	ldd	r28, Z+8	; 0x08
    3bfc:	d1 85       	ldd	r29, Z+9	; 0x09
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3bfe:	8e 01       	movw	r16, r28
    3c00:	0e 5f       	subi	r16, 0xFE	; 254
    3c02:	1f 4f       	sbci	r17, 0xFF	; 255
    3c04:	c8 01       	movw	r24, r16
    3c06:	0e 94 76 0c 	call	0x18ec	; 0x18ec <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* Execute its callback, then send a command to restart the timer if
        it is an auto-reload timer.  It cannot be restarted here as the lists
        have not yet been switched. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3c0a:	ec 89       	ldd	r30, Y+20	; 0x14
    3c0c:	fd 89       	ldd	r31, Y+21	; 0x15
    3c0e:	ce 01       	movw	r24, r28
    3c10:	19 95       	eicall

        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    3c12:	8f 89       	ldd	r24, Y+23	; 0x17
    3c14:	82 ff       	sbrs	r24, 2
    3c16:	25 c0       	rjmp	.+74     	; 0x3c62 <prvSampleTimeNow+0xc0>
            the timer going into the same timer list then it has already expired
            and the timer should be re-inserted into the current list so it is
            processed again within this loop.  Otherwise a command should be sent
            to restart the timer to ensure it is only inserted into a list after
            the lists have been swapped. */
            xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    3c18:	8e 85       	ldd	r24, Y+14	; 0x0e
    3c1a:	9f 85       	ldd	r25, Y+15	; 0x0f
    3c1c:	a8 89       	ldd	r26, Y+16	; 0x10
    3c1e:	b9 89       	ldd	r27, Y+17	; 0x11
    3c20:	88 0d       	add	r24, r8
    3c22:	99 1d       	adc	r25, r9
    3c24:	aa 1d       	adc	r26, r10
    3c26:	bb 1d       	adc	r27, r11
            if( xReloadTime > xNextExpireTime )
    3c28:	88 16       	cp	r8, r24
    3c2a:	99 06       	cpc	r9, r25
    3c2c:	aa 06       	cpc	r10, r26
    3c2e:	bb 06       	cpc	r11, r27
    3c30:	70 f4       	brcc	.+28     	; 0x3c4e <prvSampleTimeNow+0xac>
            {
                listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    3c32:	8a 83       	std	Y+2, r24	; 0x02
    3c34:	9b 83       	std	Y+3, r25	; 0x03
    3c36:	ac 83       	std	Y+4, r26	; 0x04
    3c38:	bd 83       	std	Y+5, r27	; 0x05
                listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    3c3a:	db 87       	std	Y+11, r29	; 0x0b
    3c3c:	ca 87       	std	Y+10, r28	; 0x0a
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    3c3e:	b8 01       	movw	r22, r16
    3c40:	80 91 d5 18 	lds	r24, 0x18D5	; 0x8018d5 <pxCurrentTimerList>
    3c44:	90 91 d6 18 	lds	r25, 0x18D6	; 0x8018d6 <pxCurrentTimerList+0x1>
    3c48:	0e 94 39 0c 	call	0x1872	; 0x1872 <vListInsert>
    3c4c:	0a c0       	rjmp	.+20     	; 0x3c62 <prvSampleTimeNow+0xc0>
            }
            else
            {
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    3c4e:	c1 2c       	mov	r12, r1
    3c50:	d1 2c       	mov	r13, r1
    3c52:	76 01       	movw	r14, r12
    3c54:	00 e0       	ldi	r16, 0x00	; 0
    3c56:	10 e0       	ldi	r17, 0x00	; 0
    3c58:	a5 01       	movw	r20, r10
    3c5a:	94 01       	movw	r18, r8
    3c5c:	60 e0       	ldi	r22, 0x00	; 0
    3c5e:	ce 01       	movw	r24, r28
    3c60:	42 df       	rcall	.-380    	; 0x3ae6 <xTimerGenericCommand>

    /* The tick count has overflowed.  The timer lists must be switched.
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    3c62:	e0 91 d5 18 	lds	r30, 0x18D5	; 0x8018d5 <pxCurrentTimerList>
    3c66:	f0 91 d6 18 	lds	r31, 0x18D6	; 0x8018d6 <pxCurrentTimerList+0x1>
    3c6a:	80 81       	ld	r24, Z
    3c6c:	81 11       	cpse	r24, r1
    3c6e:	be cf       	rjmp	.-132    	; 0x3bec <prvSampleTimeNow+0x4a>
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxTemp = pxCurrentTimerList;
    pxCurrentTimerList = pxOverflowTimerList;
    3c70:	80 91 d3 18 	lds	r24, 0x18D3	; 0x8018d3 <pxOverflowTimerList>
    3c74:	90 91 d4 18 	lds	r25, 0x18D4	; 0x8018d4 <pxOverflowTimerList+0x1>
    3c78:	90 93 d6 18 	sts	0x18D6, r25	; 0x8018d6 <pxCurrentTimerList+0x1>
    3c7c:	80 93 d5 18 	sts	0x18D5, r24	; 0x8018d5 <pxCurrentTimerList>
    pxOverflowTimerList = pxTemp;
    3c80:	f0 93 d4 18 	sts	0x18D4, r31	; 0x8018d4 <pxOverflowTimerList+0x1>
    3c84:	e0 93 d3 18 	sts	0x18D3, r30	; 0x8018d3 <pxOverflowTimerList>
    xTimeNow = xTaskGetTickCount();

    if( xTimeNow < xLastTime )
    {
        prvSwitchTimerLists();
        *pxTimerListsWereSwitched = pdTRUE;
    3c88:	81 e0       	ldi	r24, 0x01	; 1
    3c8a:	f1 01       	movw	r30, r2
    3c8c:	80 83       	st	Z, r24
    3c8e:	02 c0       	rjmp	.+4      	; 0x3c94 <prvSampleTimeNow+0xf2>
    }
    else
    {
        *pxTimerListsWereSwitched = pdFALSE;
    3c90:	f1 01       	movw	r30, r2
    3c92:	10 82       	st	Z, r1
    }

    xLastTime = xTimeNow;
    3c94:	40 92 cb 18 	sts	0x18CB, r4	; 0x8018cb <xLastTime.2432>
    3c98:	50 92 cc 18 	sts	0x18CC, r5	; 0x8018cc <xLastTime.2432+0x1>
    3c9c:	60 92 cd 18 	sts	0x18CD, r6	; 0x8018cd <xLastTime.2432+0x2>
    3ca0:	70 92 ce 18 	sts	0x18CE, r7	; 0x8018ce <xLastTime.2432+0x3>

    return xTimeNow;
}
    3ca4:	c3 01       	movw	r24, r6
    3ca6:	b2 01       	movw	r22, r4
    3ca8:	df 91       	pop	r29
    3caa:	cf 91       	pop	r28
    3cac:	1f 91       	pop	r17
    3cae:	0f 91       	pop	r16
    3cb0:	ff 90       	pop	r15
    3cb2:	ef 90       	pop	r14
    3cb4:	df 90       	pop	r13
    3cb6:	cf 90       	pop	r12
    3cb8:	bf 90       	pop	r11
    3cba:	af 90       	pop	r10
    3cbc:	9f 90       	pop	r9
    3cbe:	8f 90       	pop	r8
    3cc0:	7f 90       	pop	r7
    3cc2:	6f 90       	pop	r6
    3cc4:	5f 90       	pop	r5
    3cc6:	4f 90       	pop	r4
    3cc8:	3f 90       	pop	r3
    3cca:	2f 90       	pop	r2
    3ccc:	08 95       	ret

00003cce <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    3cce:	08 95       	ret

00003cd0 <vApplicationMallocFailedHook>:
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    3cd0:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    3cd2:	2f 9a       	sbi	0x05, 7	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3cd4:	2f ef       	ldi	r18, 0xFF	; 255
    3cd6:	80 e7       	ldi	r24, 0x70	; 112
    3cd8:	92 e0       	ldi	r25, 0x02	; 2
    3cda:	21 50       	subi	r18, 0x01	; 1
    3cdc:	80 40       	sbci	r24, 0x00	; 0
    3cde:	90 40       	sbci	r25, 0x00	; 0
    3ce0:	e1 f7       	brne	.-8      	; 0x3cda <vApplicationMallocFailedHook+0xa>
    3ce2:	00 c0       	rjmp	.+0      	; 0x3ce4 <vApplicationMallocFailedHook+0x14>
    3ce4:	00 00       	nop
    for(;;)
    {
        _delay_ms(50);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED fast blink.
    3ce6:	1f 9a       	sbi	0x03, 7	; 3
    3ce8:	f5 cf       	rjmp	.-22     	; 0x3cd4 <vApplicationMallocFailedHook+0x4>

00003cea <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook( TaskHandle_t xTask, portCHAR *pcTaskName ) __attribute__((weak));

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)), portCHAR *pcTaskName __attribute__((unused))  )
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    3cea:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    3cec:	2f 9a       	sbi	0x05, 7	; 5
    3cee:	2f ef       	ldi	r18, 0xFF	; 255
    3cf0:	87 ea       	ldi	r24, 0xA7	; 167
    3cf2:	91 e6       	ldi	r25, 0x61	; 97
    3cf4:	21 50       	subi	r18, 0x01	; 1
    3cf6:	80 40       	sbci	r24, 0x00	; 0
    3cf8:	90 40       	sbci	r25, 0x00	; 0
    3cfa:	e1 f7       	brne	.-8      	; 0x3cf4 <vApplicationStackOverflowHook+0xa>
    3cfc:	00 c0       	rjmp	.+0      	; 0x3cfe <vApplicationStackOverflowHook+0x14>
    3cfe:	00 00       	nop
    for(;;)
    {
        _delay_ms(2000);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED slow blink.
    3d00:	1f 9a       	sbi	0x03, 7	; 3
    3d02:	f5 cf       	rjmp	.-22     	; 0x3cee <vApplicationStackOverflowHook+0x4>

00003d04 <create_tasks_and_semaphores>:
// Prototype for LoRaWAN handler
void lora_handler_create(UBaseType_t lora_handler_task_priority);

/*-----------------------------------------------------------*/
void create_tasks_and_semaphores(void)
{
    3d04:	8f 92       	push	r8
    3d06:	9f 92       	push	r9
    3d08:	af 92       	push	r10
    3d0a:	bf 92       	push	r11
    3d0c:	cf 92       	push	r12
    3d0e:	df 92       	push	r13
    3d10:	ef 92       	push	r14
    3d12:	ff 92       	push	r15
    3d14:	0f 93       	push	r16
    3d16:	1f 93       	push	r17
    3d18:	cf 93       	push	r28
    3d1a:	df 93       	push	r29
	configuration_create(_semaphore);
    3d1c:	80 91 4b 1a 	lds	r24, 0x1A4B	; 0x801a4b <_semaphore>
    3d20:	90 91 4c 1a 	lds	r25, 0x1A4C	; 0x801a4c <_semaphore+0x1>
    3d24:	0e 94 43 03 	call	0x686	; 0x686 <configuration_create>
	
	humAndTempReader_t humidityAndTemperature = humAndTempReader_create(TASK_HUMIDITY_SENSOR_PRIORITY, HUMIDITY_TASK_STACK, 
    3d28:	e0 90 4f 1a 	lds	r14, 0x1A4F	; 0x801a4f <readyEventGroup>
    3d2c:	f0 90 50 1a 	lds	r15, 0x1A50	; 0x801a50 <readyEventGroup+0x1>
    3d30:	40 91 67 1a 	lds	r20, 0x1A67	; 0x801a67 <startMeasureEventGroup>
    3d34:	50 91 68 1a 	lds	r21, 0x1A68	; 0x801a68 <startMeasureEventGroup+0x1>
    3d38:	a1 2c       	mov	r10, r1
    3d3a:	b1 2c       	mov	r11, r1
    3d3c:	65 01       	movw	r12, r10
    3d3e:	68 94       	set
    3d40:	a4 f8       	bld	r10, 4
    3d42:	01 e0       	ldi	r16, 0x01	; 1
    3d44:	10 e0       	ldi	r17, 0x00	; 0
    3d46:	20 e0       	ldi	r18, 0x00	; 0
    3d48:	30 e0       	ldi	r19, 0x00	; 0
    3d4a:	60 ec       	ldi	r22, 0xC0	; 192
    3d4c:	82 e0       	ldi	r24, 0x02	; 2
    3d4e:	0e 94 8b 06 	call	0xd16	; 0xd16 <humAndTempReader_create>
    3d52:	c8 2f       	mov	r28, r24
    3d54:	d9 2f       	mov	r29, r25
	startMeasureEventGroup, BIT_MEASURE_HUMIDITY, readyEventGroup, BIT_DONE_MEASURE_HUMIDITY);
	
	co2reader_t co2reader = co2Reader_create(TASK_CO2_SENSOR_PRIORITY, CO2_TASK_STACK, startMeasureEventGroup, BIT_MEASURE_CO2,
    3d56:	e0 90 4f 1a 	lds	r14, 0x1A4F	; 0x801a4f <readyEventGroup>
    3d5a:	f0 90 50 1a 	lds	r15, 0x1A50	; 0x801a50 <readyEventGroup+0x1>
    3d5e:	40 91 67 1a 	lds	r20, 0x1A67	; 0x801a67 <startMeasureEventGroup>
    3d62:	50 91 68 1a 	lds	r21, 0x1A68	; 0x801a68 <startMeasureEventGroup+0x1>
    3d66:	a1 2c       	mov	r10, r1
    3d68:	b1 2c       	mov	r11, r1
    3d6a:	65 01       	movw	r12, r10
    3d6c:	68 94       	set
    3d6e:	a5 f8       	bld	r10, 5
    3d70:	08 e0       	ldi	r16, 0x08	; 8
    3d72:	10 e0       	ldi	r17, 0x00	; 0
    3d74:	20 e0       	ldi	r18, 0x00	; 0
    3d76:	30 e0       	ldi	r19, 0x00	; 0
    3d78:	60 ec       	ldi	r22, 0xC0	; 192
    3d7a:	82 e0       	ldi	r24, 0x02	; 2
    3d7c:	0e 94 86 02 	call	0x50c	; 0x50c <co2Reader_create>
    3d80:	4c 01       	movw	r8, r24
	readyEventGroup, BIT_DONE_MEASURE_CO2);
	
	soundReader_t soundReader = soundReader_create(TASK_SOUND_SENSOR_PRIORITY, SOUND_TASK_STACK, startMeasureEventGroup, BIT_MEASURE_SOUND,
    3d82:	e0 90 4f 1a 	lds	r14, 0x1A4F	; 0x801a4f <readyEventGroup>
    3d86:	f0 90 50 1a 	lds	r15, 0x1A50	; 0x801a50 <readyEventGroup+0x1>
    3d8a:	40 91 67 1a 	lds	r20, 0x1A67	; 0x801a67 <startMeasureEventGroup>
    3d8e:	50 91 68 1a 	lds	r21, 0x1A68	; 0x801a68 <startMeasureEventGroup+0x1>
    3d92:	a1 2c       	mov	r10, r1
    3d94:	b1 2c       	mov	r11, r1
    3d96:	65 01       	movw	r12, r10
    3d98:	68 94       	set
    3d9a:	a6 f8       	bld	r10, 6
    3d9c:	04 e0       	ldi	r16, 0x04	; 4
    3d9e:	10 e0       	ldi	r17, 0x00	; 0
    3da0:	20 e0       	ldi	r18, 0x00	; 0
    3da2:	30 e0       	ldi	r19, 0x00	; 0
    3da4:	60 ec       	ldi	r22, 0xC0	; 192
    3da6:	82 e0       	ldi	r24, 0x02	; 2
    3da8:	0e 94 6d 07 	call	0xeda	; 0xeda <soundReader_create>
    3dac:	18 2f       	mov	r17, r24
    3dae:	09 2f       	mov	r16, r25
	readyEventGroup, BIT_DONE_MEASURE_SOUND);	
	
	servo_initialise();
    3db0:	0e 94 60 07 	call	0xec0	; 0xec0 <servo_initialise>
	
	device_create(TASK_DEVICE_PRIORITY, DEVICE_TASK_STACK, startMeasureEventGroup, ALL_BIT_MEASURE,
    3db4:	e0 90 4f 1a 	lds	r14, 0x1A4F	; 0x801a4f <readyEventGroup>
    3db8:	f0 90 50 1a 	lds	r15, 0x1A50	; 0x801a50 <readyEventGroup+0x1>
    3dbc:	40 91 67 1a 	lds	r20, 0x1A67	; 0x801a67 <startMeasureEventGroup>
    3dc0:	50 91 68 1a 	lds	r21, 0x1A68	; 0x801a68 <startMeasureEventGroup+0x1>
    3dc4:	80 91 4a 1a 	lds	r24, 0x1A4A	; 0x801a4a <xMessageBuffer+0x1>
    3dc8:	8f 93       	push	r24
    3dca:	80 91 49 1a 	lds	r24, 0x1A49	; 0x801a49 <xMessageBuffer>
    3dce:	8f 93       	push	r24
    3dd0:	0f 93       	push	r16
    3dd2:	1f 93       	push	r17
    3dd4:	df 93       	push	r29
    3dd6:	cf 93       	push	r28
    3dd8:	0f 2e       	mov	r0, r31
    3dda:	f0 e7       	ldi	r31, 0x70	; 112
    3ddc:	af 2e       	mov	r10, r31
    3dde:	b1 2c       	mov	r11, r1
    3de0:	c1 2c       	mov	r12, r1
    3de2:	d1 2c       	mov	r13, r1
    3de4:	f0 2d       	mov	r31, r0
    3de6:	0d e0       	ldi	r16, 0x0D	; 13
    3de8:	10 e0       	ldi	r17, 0x00	; 0
    3dea:	20 e0       	ldi	r18, 0x00	; 0
    3dec:	30 e0       	ldi	r19, 0x00	; 0
    3dee:	60 ec       	ldi	r22, 0xC0	; 192
    3df0:	84 e0       	ldi	r24, 0x04	; 4
    3df2:	0e 94 51 04 	call	0x8a2	; 0x8a2 <device_create>
	readyEventGroup, ALL_BIT_DONE_MEASURE, co2reader, humidityAndTemperature,soundReader, xMessageBuffer);
	
	lora_UpLinkHandler_create(TASK_LORA_DRIVER_PRIORITY,xMessageBuffer);
    3df6:	60 91 49 1a 	lds	r22, 0x1A49	; 0x801a49 <xMessageBuffer>
    3dfa:	70 91 4a 1a 	lds	r23, 0x1A4A	; 0x801a4a <xMessageBuffer+0x1>
    3dfe:	81 e0       	ldi	r24, 0x01	; 1
    3e00:	0e 94 25 08 	call	0x104a	; 0x104a <lora_UpLinkHandler_create>
	lora_DownLinkHandler_create(TASK_LORA_DRIVER_PRIORITYDOWN,_downlinkMessagebuffer);
    3e04:	60 91 4d 1a 	lds	r22, 0x1A4D	; 0x801a4d <_downlinkMessagebuffer>
    3e08:	70 91 4e 1a 	lds	r23, 0x1A4E	; 0x801a4e <_downlinkMessagebuffer+0x1>
    3e0c:	81 e0       	ldi	r24, 0x01	; 1
    3e0e:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <lora_DownLinkHandler_create>
}
    3e12:	0f 90       	pop	r0
    3e14:	0f 90       	pop	r0
    3e16:	0f 90       	pop	r0
    3e18:	0f 90       	pop	r0
    3e1a:	0f 90       	pop	r0
    3e1c:	0f 90       	pop	r0
    3e1e:	df 91       	pop	r29
    3e20:	cf 91       	pop	r28
    3e22:	1f 91       	pop	r17
    3e24:	0f 91       	pop	r16
    3e26:	ff 90       	pop	r15
    3e28:	ef 90       	pop	r14
    3e2a:	df 90       	pop	r13
    3e2c:	cf 90       	pop	r12
    3e2e:	bf 90       	pop	r11
    3e30:	af 90       	pop	r10
    3e32:	9f 90       	pop	r9
    3e34:	8f 90       	pop	r8
    3e36:	08 95       	ret

00003e38 <initialiseSystem>:

/*-----------------------------------------------------------*/
void initialiseSystem()
{
	startMeasureEventGroup = xEventGroupCreate();
    3e38:	0e 94 60 09 	call	0x12c0	; 0x12c0 <xEventGroupCreate>
    3e3c:	90 93 68 1a 	sts	0x1A68, r25	; 0x801a68 <startMeasureEventGroup+0x1>
    3e40:	80 93 67 1a 	sts	0x1A67, r24	; 0x801a67 <startMeasureEventGroup>
	readyEventGroup = xEventGroupCreate();
    3e44:	0e 94 60 09 	call	0x12c0	; 0x12c0 <xEventGroupCreate>
    3e48:	90 93 50 1a 	sts	0x1A50, r25	; 0x801a50 <readyEventGroup+0x1>
    3e4c:	80 93 4f 1a 	sts	0x1A4F, r24	; 0x801a4f <readyEventGroup>

	xMessageBuffer = xMessageBufferCreate(100);
    3e50:	41 e0       	ldi	r20, 0x01	; 1
    3e52:	60 e0       	ldi	r22, 0x00	; 0
    3e54:	70 e0       	ldi	r23, 0x00	; 0
    3e56:	84 e6       	ldi	r24, 0x64	; 100
    3e58:	90 e0       	ldi	r25, 0x00	; 0
    3e5a:	0e 94 b2 12 	call	0x2564	; 0x2564 <xStreamBufferGenericCreate>
    3e5e:	90 93 4a 1a 	sts	0x1A4A, r25	; 0x801a4a <xMessageBuffer+0x1>
    3e62:	80 93 49 1a 	sts	0x1A49, r24	; 0x801a49 <xMessageBuffer>
	_semaphore = xSemaphoreCreateMutex();
    3e66:	81 e0       	ldi	r24, 0x01	; 1
    3e68:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <xQueueCreateMutex>
    3e6c:	90 93 4c 1a 	sts	0x1A4C, r25	; 0x801a4c <_semaphore+0x1>
    3e70:	80 93 4b 1a 	sts	0x1A4B, r24	; 0x801a4b <_semaphore>
	_downlinkMessagebuffer = xMessageBufferCreate(sizeof(lora_payload_t)*2);
    3e74:	41 e0       	ldi	r20, 0x01	; 1
    3e76:	60 e0       	ldi	r22, 0x00	; 0
    3e78:	70 e0       	ldi	r23, 0x00	; 0
    3e7a:	8c e2       	ldi	r24, 0x2C	; 44
    3e7c:	90 e0       	ldi	r25, 0x00	; 0
    3e7e:	0e 94 b2 12 	call	0x2564	; 0x2564 <xStreamBufferGenericCreate>
    3e82:	90 93 4e 1a 	sts	0x1A4E, r25	; 0x801a4e <_downlinkMessagebuffer+0x1>
    3e86:	80 93 4d 1a 	sts	0x1A4D, r24	; 0x801a4d <_downlinkMessagebuffer>
	// Set output ports for leds used in the example
	DDRA |= _BV(DDA0) | _BV(DDA7);
    3e8a:	81 b1       	in	r24, 0x01	; 1
    3e8c:	81 68       	ori	r24, 0x81	; 129
    3e8e:	81 b9       	out	0x01, r24	; 1
	//// Initialise the trace-driver to be used together with the R2R-Network
	//trace_init();
	// Make it possible to use stdio on COM port 0 (USB) on Arduino board - Setting 57600,8,N,1
	stdioCreate(ser_USART0);
    3e90:	80 e0       	ldi	r24, 0x00	; 0
    3e92:	0e 94 51 2b 	call	0x56a2	; 0x56a2 <stdioCreate>
	
	
	
	// vvvvvvvvvvvvvvvvv BELOW IS LoRaWAN initialisation vvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
	// Initialise the HAL layer and use 5 for LED driver priority
	hal_create(5);
    3e96:	85 e0       	ldi	r24, 0x05	; 5
    3e98:	10 d0       	rcall	.+32     	; 0x3eba <hal_create>
	// Initialise the LoRaWAN driver with a down-link buffer
	
	
	lora_driver_create(LORA_USART, _downlinkMessagebuffer);
    3e9a:	60 91 4d 1a 	lds	r22, 0x1A4D	; 0x801a4d <_downlinkMessagebuffer>
    3e9e:	70 91 4e 1a 	lds	r23, 0x1A4E	; 0x801a4e <_downlinkMessagebuffer+0x1>
    3ea2:	81 e0       	ldi	r24, 0x01	; 1
    3ea4:	c2 c3       	rjmp	.+1924   	; 0x462a <lora_driver_create>
    3ea6:	08 95       	ret

00003ea8 <main>:
	
}
/*-----------------------------------------------------------*/
int main(void)
{
	initialiseSystem(); // Must be done as the very first thing!!
    3ea8:	c7 df       	rcall	.-114    	; 0x3e38 <initialiseSystem>
	create_tasks_and_semaphores();
    3eaa:	2c df       	rcall	.-424    	; 0x3d04 <create_tasks_and_semaphores>
    3eac:	8a ec       	ldi	r24, 0xCA	; 202
	printf("Program Started!!\n");
    3eae:	94 e0       	ldi	r25, 0x04	; 4
    3eb0:	0e 94 7a 31 	call	0x62f4	; 0x62f4 <puts>
    3eb4:	0e 94 6e 16 	call	0x2cdc	; 0x2cdc <vTaskStartScheduler>
	vTaskStartScheduler(); // Initialise and run the freeRTOS scheduler. Execution should never return from here.
    3eb8:	ff cf       	rjmp	.-2      	; 0x3eb8 <main+0x10>

00003eba <hal_create>:
    3eba:	e9 e6       	ldi	r30, 0x69	; 105
    3ebc:	fa e1       	ldi	r31, 0x1A	; 26
    3ebe:	2a e6       	ldi	r18, 0x6A	; 106
    3ec0:	36 e2       	ldi	r19, 0x26	; 38
    3ec2:	31 83       	std	Z+1, r19	; 0x01
    3ec4:	20 83       	st	Z, r18
    3ec6:	2d e6       	ldi	r18, 0x6D	; 109
    3ec8:	36 e2       	ldi	r19, 0x26	; 38
    3eca:	33 83       	std	Z+3, r19	; 0x03
    3ecc:	22 83       	std	Z+2, r18	; 0x02
    3ece:	28 e7       	ldi	r18, 0x78	; 120
    3ed0:	36 e2       	ldi	r19, 0x26	; 38
    3ed2:	35 83       	std	Z+5, r19	; 0x05
    3ed4:	24 83       	std	Z+4, r18	; 0x04
    3ed6:	2c e7       	ldi	r18, 0x7C	; 124
    3ed8:	36 e2       	ldi	r19, 0x26	; 38
    3eda:	37 83       	std	Z+7, r19	; 0x07
    3edc:	26 83       	std	Z+6, r18	; 0x06
    3ede:	22 e8       	ldi	r18, 0x82	; 130
    3ee0:	36 e2       	ldi	r19, 0x26	; 38
    3ee2:	31 87       	std	Z+9, r19	; 0x09
    3ee4:	20 87       	std	Z+8, r18	; 0x08
    3ee6:	2e e8       	ldi	r18, 0x8E	; 142
    3ee8:	36 e2       	ldi	r19, 0x26	; 38
    3eea:	33 87       	std	Z+11, r19	; 0x0b
    3eec:	22 87       	std	Z+10, r18	; 0x0a
    3eee:	23 e9       	ldi	r18, 0x93	; 147
    3ef0:	36 e2       	ldi	r19, 0x26	; 38
    3ef2:	35 87       	std	Z+13, r19	; 0x0d
    3ef4:	24 87       	std	Z+12, r18	; 0x0c
    3ef6:	2f e9       	ldi	r18, 0x9F	; 159
    3ef8:	36 e2       	ldi	r19, 0x26	; 38
    3efa:	37 87       	std	Z+15, r19	; 0x0f
    3efc:	26 87       	std	Z+14, r18	; 0x0e
    3efe:	2f e7       	ldi	r18, 0x7F	; 127
    3f00:	36 e2       	ldi	r19, 0x26	; 38
    3f02:	31 8b       	std	Z+17, r19	; 0x11
    3f04:	20 8b       	std	Z+16, r18	; 0x10
    3f06:	24 ea       	ldi	r18, 0xA4	; 164
    3f08:	36 e2       	ldi	r19, 0x26	; 38
    3f0a:	33 8b       	std	Z+19, r19	; 0x13
    3f0c:	22 8b       	std	Z+18, r18	; 0x12
    3f0e:	21 eb       	ldi	r18, 0xB1	; 177
    3f10:	36 e2       	ldi	r19, 0x26	; 38
    3f12:	35 8b       	std	Z+21, r19	; 0x15
    3f14:	24 8b       	std	Z+20, r18	; 0x14
    3f16:	68 2f       	mov	r22, r24
    3f18:	cf 01       	movw	r24, r30
    3f1a:	53 c1       	rjmp	.+678    	; 0x41c2 <led_create>
    3f1c:	08 95       	ret

00003f1e <_hihTwiCallback>:
    3f1e:	65 30       	cpi	r22, 0x05	; 5
    3f20:	f1 f4       	brne	.+60     	; 0x3f5e <_hihTwiCallback+0x40>
    3f22:	fa 01       	movw	r30, r20
    3f24:	80 81       	ld	r24, Z
    3f26:	8f 73       	andi	r24, 0x3F	; 63
    3f28:	90 e0       	ldi	r25, 0x00	; 0
    3f2a:	98 2f       	mov	r25, r24
    3f2c:	88 27       	eor	r24, r24
    3f2e:	21 81       	ldd	r18, Z+1	; 0x01
    3f30:	82 2b       	or	r24, r18
    3f32:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <_hum+0x1>
    3f36:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <_hum>
    3f3a:	82 81       	ldd	r24, Z+2	; 0x02
    3f3c:	f0 e4       	ldi	r31, 0x40	; 64
    3f3e:	8f 9f       	mul	r24, r31
    3f40:	c0 01       	movw	r24, r0
    3f42:	11 24       	eor	r1, r1
    3f44:	fa 01       	movw	r30, r20
    3f46:	23 81       	ldd	r18, Z+3	; 0x03
    3f48:	26 95       	lsr	r18
    3f4a:	26 95       	lsr	r18
    3f4c:	82 2b       	or	r24, r18
    3f4e:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <_temp+0x1>
    3f52:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <_temp>
    3f56:	81 e0       	ldi	r24, 0x01	; 1
    3f58:	80 93 ed 18 	sts	0x18ED, r24	; 0x8018ed <_measuringIsReady>
    3f5c:	08 95       	ret
    3f5e:	64 30       	cpi	r22, 0x04	; 4
    3f60:	51 f0       	breq	.+20     	; 0x3f76 <_hihTwiCallback+0x58>
    3f62:	80 e0       	ldi	r24, 0x00	; 0
    3f64:	90 e4       	ldi	r25, 0x40	; 64
    3f66:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <_temp+0x1>
    3f6a:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <_temp>
    3f6e:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <_hum+0x1>
    3f72:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <_hum>
    3f76:	08 95       	ret

00003f78 <hih8120Create>:
    3f78:	0f 93       	push	r16
    3f7a:	1f 93       	push	r17
    3f7c:	0f e8       	ldi	r16, 0x8F	; 143
    3f7e:	1f e1       	ldi	r17, 0x1F	; 31
    3f80:	20 e0       	ldi	r18, 0x00	; 0
    3f82:	34 e2       	ldi	r19, 0x24	; 36
    3f84:	44 ef       	ldi	r20, 0xF4	; 244
    3f86:	50 e0       	ldi	r21, 0x00	; 0
    3f88:	60 e0       	ldi	r22, 0x00	; 0
    3f8a:	87 e2       	ldi	r24, 0x27	; 39
    3f8c:	0e 94 8b 2b 	call	0x5716	; 0x5716 <twiCreate>
    3f90:	90 93 ef 18 	sts	0x18EF, r25	; 0x8018ef <_hih8120Handler+0x1>
    3f94:	80 93 ee 18 	sts	0x18EE, r24	; 0x8018ee <_hih8120Handler>
    3f98:	21 e0       	ldi	r18, 0x01	; 1
    3f9a:	89 2b       	or	r24, r25
    3f9c:	09 f0       	breq	.+2      	; 0x3fa0 <hih8120Create+0x28>
    3f9e:	20 e0       	ldi	r18, 0x00	; 0
    3fa0:	82 2f       	mov	r24, r18
    3fa2:	1f 91       	pop	r17
    3fa4:	0f 91       	pop	r16
    3fa6:	08 95       	ret

00003fa8 <hih8120IsReady>:
    3fa8:	80 91 ed 18 	lds	r24, 0x18ED	; 0x8018ed <_measuringIsReady>
    3fac:	08 95       	ret

00003fae <hih8120Wakeup>:
    3fae:	80 91 ee 18 	lds	r24, 0x18EE	; 0x8018ee <_hih8120Handler>
    3fb2:	90 91 ef 18 	lds	r25, 0x18EF	; 0x8018ef <_hih8120Handler+0x1>
    3fb6:	00 97       	sbiw	r24, 0x00	; 0
    3fb8:	59 f0       	breq	.+22     	; 0x3fd0 <hih8120Wakeup+0x22>
    3fba:	40 e0       	ldi	r20, 0x00	; 0
    3fbc:	60 e0       	ldi	r22, 0x00	; 0
    3fbe:	70 e0       	ldi	r23, 0x00	; 0
    3fc0:	0e 94 dc 2b 	call	0x57b8	; 0x57b8 <twiTransmit>
    3fc4:	84 30       	cpi	r24, 0x04	; 4
    3fc6:	31 f4       	brne	.+12     	; 0x3fd4 <hih8120Wakeup+0x26>
    3fc8:	10 92 ed 18 	sts	0x18ED, r1	; 0x8018ed <_measuringIsReady>
    3fcc:	80 e0       	ldi	r24, 0x00	; 0
    3fce:	08 95       	ret
    3fd0:	82 e0       	ldi	r24, 0x02	; 2
    3fd2:	08 95       	ret
    3fd4:	83 e0       	ldi	r24, 0x03	; 3
    3fd6:	08 95       	ret

00003fd8 <hih8120Meassure>:
    3fd8:	80 91 ee 18 	lds	r24, 0x18EE	; 0x8018ee <_hih8120Handler>
    3fdc:	90 91 ef 18 	lds	r25, 0x18EF	; 0x8018ef <_hih8120Handler+0x1>
    3fe0:	00 97       	sbiw	r24, 0x00	; 0
    3fe2:	39 f0       	breq	.+14     	; 0x3ff2 <hih8120Meassure+0x1a>
    3fe4:	64 e0       	ldi	r22, 0x04	; 4
    3fe6:	0e 94 28 2c 	call	0x5850	; 0x5850 <twiReceive>
    3fea:	85 30       	cpi	r24, 0x05	; 5
    3fec:	21 f0       	breq	.+8      	; 0x3ff6 <hih8120Meassure+0x1e>
    3fee:	83 e0       	ldi	r24, 0x03	; 3
    3ff0:	08 95       	ret
    3ff2:	82 e0       	ldi	r24, 0x02	; 2
    3ff4:	08 95       	ret
    3ff6:	80 e0       	ldi	r24, 0x00	; 0
    3ff8:	08 95       	ret

00003ffa <hih8120GetHumidity>:
    3ffa:	60 91 0c 02 	lds	r22, 0x020C	; 0x80020c <_hum>
    3ffe:	70 91 0d 02 	lds	r23, 0x020D	; 0x80020d <_hum+0x1>
    4002:	80 e0       	ldi	r24, 0x00	; 0
    4004:	90 e0       	ldi	r25, 0x00	; 0
    4006:	0e 94 32 2e 	call	0x5c64	; 0x5c64 <__floatunsisf>
    400a:	20 e0       	ldi	r18, 0x00	; 0
    400c:	30 e0       	ldi	r19, 0x00	; 0
    400e:	48 ec       	ldi	r20, 0xC8	; 200
    4010:	52 e4       	ldi	r21, 0x42	; 66
    4012:	0e 94 c0 2e 	call	0x5d80	; 0x5d80 <__mulsf3>
    4016:	20 e0       	ldi	r18, 0x00	; 0
    4018:	38 ef       	ldi	r19, 0xF8	; 248
    401a:	4f e7       	ldi	r20, 0x7F	; 127
    401c:	56 e4       	ldi	r21, 0x46	; 70
    401e:	0c 94 99 2d 	jmp	0x5b32	; 0x5b32 <__divsf3>
    4022:	08 95       	ret

00004024 <hih8120GetHumidityPercent_x10>:
    4024:	ea df       	rcall	.-44     	; 0x3ffa <hih8120GetHumidity>
    4026:	20 e0       	ldi	r18, 0x00	; 0
    4028:	30 e0       	ldi	r19, 0x00	; 0
    402a:	40 e2       	ldi	r20, 0x20	; 32
    402c:	51 e4       	ldi	r21, 0x41	; 65
    402e:	0e 94 c0 2e 	call	0x5d80	; 0x5d80 <__mulsf3>
    4032:	0e 94 06 2e 	call	0x5c0c	; 0x5c0c <__fixunssfsi>
    4036:	cb 01       	movw	r24, r22
    4038:	08 95       	ret

0000403a <hih8120GetTemperature>:
    403a:	60 91 0a 02 	lds	r22, 0x020A	; 0x80020a <_temp>
    403e:	70 91 0b 02 	lds	r23, 0x020B	; 0x80020b <_temp+0x1>
    4042:	80 e0       	ldi	r24, 0x00	; 0
    4044:	90 e0       	ldi	r25, 0x00	; 0
    4046:	0e 94 32 2e 	call	0x5c64	; 0x5c64 <__floatunsisf>
    404a:	20 e0       	ldi	r18, 0x00	; 0
    404c:	30 e0       	ldi	r19, 0x00	; 0
    404e:	45 e2       	ldi	r20, 0x25	; 37
    4050:	53 e4       	ldi	r21, 0x43	; 67
    4052:	0e 94 c0 2e 	call	0x5d80	; 0x5d80 <__mulsf3>
    4056:	20 e0       	ldi	r18, 0x00	; 0
    4058:	38 ef       	ldi	r19, 0xF8	; 248
    405a:	4f e7       	ldi	r20, 0x7F	; 127
    405c:	56 e4       	ldi	r21, 0x46	; 70
    405e:	0e 94 99 2d 	call	0x5b32	; 0x5b32 <__divsf3>
    4062:	20 e0       	ldi	r18, 0x00	; 0
    4064:	30 e0       	ldi	r19, 0x00	; 0
    4066:	40 e2       	ldi	r20, 0x20	; 32
    4068:	52 e4       	ldi	r21, 0x42	; 66
    406a:	0c 94 34 2d 	jmp	0x5a68	; 0x5a68 <__subsf3>
    406e:	08 95       	ret

00004070 <hih8120GetTemperature_x10>:
    4070:	e4 df       	rcall	.-56     	; 0x403a <hih8120GetTemperature>
    4072:	20 e0       	ldi	r18, 0x00	; 0
    4074:	30 e0       	ldi	r19, 0x00	; 0
    4076:	40 e2       	ldi	r20, 0x20	; 32
    4078:	51 e4       	ldi	r21, 0x41	; 65
    407a:	0e 94 c0 2e 	call	0x5d80	; 0x5d80 <__mulsf3>
    407e:	0e 94 01 2e 	call	0x5c02	; 0x5c02 <__fixsfsi>
    4082:	cb 01       	movw	r24, r22
    4084:	08 95       	ret

00004086 <_turn_off>:
    4086:	cf 93       	push	r28
    4088:	df 93       	push	r29
    408a:	90 e0       	ldi	r25, 0x00	; 0
    408c:	fc 01       	movw	r30, r24
    408e:	ee 0f       	add	r30, r30
    4090:	ff 1f       	adc	r31, r31
    4092:	e8 0f       	add	r30, r24
    4094:	f9 1f       	adc	r31, r25
    4096:	ee 0f       	add	r30, r30
    4098:	ff 1f       	adc	r31, r31
    409a:	e0 51       	subi	r30, 0x10	; 16
    409c:	f7 4e       	sbci	r31, 0xE7	; 231
    409e:	23 81       	ldd	r18, Z+3	; 0x03
    40a0:	21 11       	cpse	r18, r1
    40a2:	0a c0       	rjmp	.+20     	; 0x40b8 <_turn_off+0x32>
    40a4:	ef 01       	movw	r28, r30
    40a6:	e0 91 71 1a 	lds	r30, 0x1A71	; 0x801a71 <register_access+0x8>
    40aa:	f0 91 72 1a 	lds	r31, 0x1A72	; 0x801a72 <register_access+0x9>
    40ae:	6a 81       	ldd	r22, Y+2	; 0x02
    40b0:	88 81       	ld	r24, Y
    40b2:	99 81       	ldd	r25, Y+1	; 0x01
    40b4:	19 95       	eicall
    40b6:	12 c0       	rjmp	.+36     	; 0x40dc <_turn_off+0x56>
    40b8:	dc 01       	movw	r26, r24
    40ba:	aa 0f       	add	r26, r26
    40bc:	bb 1f       	adc	r27, r27
    40be:	ed 01       	movw	r28, r26
    40c0:	c8 0f       	add	r28, r24
    40c2:	d9 1f       	adc	r29, r25
    40c4:	cc 0f       	add	r28, r28
    40c6:	dd 1f       	adc	r29, r29
    40c8:	c0 51       	subi	r28, 0x10	; 16
    40ca:	d7 4e       	sbci	r29, 0xE7	; 231
    40cc:	e0 91 7b 1a 	lds	r30, 0x1A7B	; 0x801a7b <register_access+0x12>
    40d0:	f0 91 7c 1a 	lds	r31, 0x1A7C	; 0x801a7c <register_access+0x13>
    40d4:	6a 81       	ldd	r22, Y+2	; 0x02
    40d6:	88 81       	ld	r24, Y
    40d8:	99 81       	ldd	r25, Y+1	; 0x01
    40da:	19 95       	eicall
    40dc:	df 91       	pop	r29
    40de:	cf 91       	pop	r28
    40e0:	08 95       	ret

000040e2 <_turn_on>:
    40e2:	cf 93       	push	r28
    40e4:	df 93       	push	r29
    40e6:	90 e0       	ldi	r25, 0x00	; 0
    40e8:	fc 01       	movw	r30, r24
    40ea:	ee 0f       	add	r30, r30
    40ec:	ff 1f       	adc	r31, r31
    40ee:	e8 0f       	add	r30, r24
    40f0:	f9 1f       	adc	r31, r25
    40f2:	ee 0f       	add	r30, r30
    40f4:	ff 1f       	adc	r31, r31
    40f6:	e0 51       	subi	r30, 0x10	; 16
    40f8:	f7 4e       	sbci	r31, 0xE7	; 231
    40fa:	23 81       	ldd	r18, Z+3	; 0x03
    40fc:	21 11       	cpse	r18, r1
    40fe:	0a c0       	rjmp	.+20     	; 0x4114 <_turn_on+0x32>
    4100:	ef 01       	movw	r28, r30
    4102:	e0 91 7b 1a 	lds	r30, 0x1A7B	; 0x801a7b <register_access+0x12>
    4106:	f0 91 7c 1a 	lds	r31, 0x1A7C	; 0x801a7c <register_access+0x13>
    410a:	6a 81       	ldd	r22, Y+2	; 0x02
    410c:	88 81       	ld	r24, Y
    410e:	99 81       	ldd	r25, Y+1	; 0x01
    4110:	19 95       	eicall
    4112:	12 c0       	rjmp	.+36     	; 0x4138 <_turn_on+0x56>
    4114:	dc 01       	movw	r26, r24
    4116:	aa 0f       	add	r26, r26
    4118:	bb 1f       	adc	r27, r27
    411a:	ed 01       	movw	r28, r26
    411c:	c8 0f       	add	r28, r24
    411e:	d9 1f       	adc	r29, r25
    4120:	cc 0f       	add	r28, r28
    4122:	dd 1f       	adc	r29, r29
    4124:	c0 51       	subi	r28, 0x10	; 16
    4126:	d7 4e       	sbci	r29, 0xE7	; 231
    4128:	e0 91 71 1a 	lds	r30, 0x1A71	; 0x801a71 <register_access+0x8>
    412c:	f0 91 72 1a 	lds	r31, 0x1A72	; 0x801a72 <register_access+0x9>
    4130:	6a 81       	ldd	r22, Y+2	; 0x02
    4132:	88 81       	ld	r24, Y
    4134:	99 81       	ldd	r25, Y+1	; 0x01
    4136:	19 95       	eicall
    4138:	df 91       	pop	r29
    413a:	cf 91       	pop	r28
    413c:	08 95       	ret

0000413e <_hal_led_task>:
    413e:	0f 2e       	mov	r0, r31
    4140:	f9 e6       	ldi	r31, 0x69	; 105
    4142:	cf 2e       	mov	r12, r31
    4144:	fa e1       	ldi	r31, 0x1A	; 26
    4146:	df 2e       	mov	r13, r31
    4148:	f0 2d       	mov	r31, r0
    414a:	04 e0       	ldi	r16, 0x04	; 4
    414c:	c0 ef       	ldi	r28, 0xF0	; 240
    414e:	d8 e1       	ldi	r29, 0x18	; 24
    4150:	10 e0       	ldi	r17, 0x00	; 0
    4152:	8c 81       	ldd	r24, Y+4	; 0x04
    4154:	81 30       	cpi	r24, 0x01	; 1
    4156:	69 f0       	breq	.+26     	; 0x4172 <_hal_led_task+0x34>
    4158:	e8 f0       	brcs	.+58     	; 0x4194 <_hal_led_task+0x56>
    415a:	82 30       	cpi	r24, 0x02	; 2
    415c:	39 f5       	brne	.+78     	; 0x41ac <_hal_led_task+0x6e>
    415e:	d6 01       	movw	r26, r12
    4160:	1c 96       	adiw	r26, 0x0c	; 12
    4162:	ed 91       	ld	r30, X+
    4164:	fc 91       	ld	r31, X
    4166:	1d 97       	sbiw	r26, 0x0d	; 13
    4168:	6a 81       	ldd	r22, Y+2	; 0x02
    416a:	88 81       	ld	r24, Y
    416c:	99 81       	ldd	r25, Y+1	; 0x01
    416e:	19 95       	eicall
    4170:	1d c0       	rjmp	.+58     	; 0x41ac <_hal_led_task+0x6e>
    4172:	8d 81       	ldd	r24, Y+5	; 0x05
    4174:	8f 5f       	subi	r24, 0xFF	; 255
    4176:	8a 30       	cpi	r24, 0x0A	; 10
    4178:	10 f4       	brcc	.+4      	; 0x417e <_hal_led_task+0x40>
    417a:	8d 83       	std	Y+5, r24	; 0x05
    417c:	17 c0       	rjmp	.+46     	; 0x41ac <_hal_led_task+0x6e>
    417e:	1d 82       	std	Y+5, r1	; 0x05
    4180:	d6 01       	movw	r26, r12
    4182:	1c 96       	adiw	r26, 0x0c	; 12
    4184:	ed 91       	ld	r30, X+
    4186:	fc 91       	ld	r31, X
    4188:	1d 97       	sbiw	r26, 0x0d	; 13
    418a:	6a 81       	ldd	r22, Y+2	; 0x02
    418c:	88 81       	ld	r24, Y
    418e:	99 81       	ldd	r25, Y+1	; 0x01
    4190:	19 95       	eicall
    4192:	0c c0       	rjmp	.+24     	; 0x41ac <_hal_led_task+0x6e>
    4194:	8d 81       	ldd	r24, Y+5	; 0x05
    4196:	88 23       	and	r24, r24
    4198:	31 f0       	breq	.+12     	; 0x41a6 <_hal_led_task+0x68>
    419a:	81 2f       	mov	r24, r17
    419c:	a2 df       	rcall	.-188    	; 0x40e2 <_turn_on>
    419e:	8d 81       	ldd	r24, Y+5	; 0x05
    41a0:	81 50       	subi	r24, 0x01	; 1
    41a2:	8d 83       	std	Y+5, r24	; 0x05
    41a4:	03 c0       	rjmp	.+6      	; 0x41ac <_hal_led_task+0x6e>
    41a6:	0c 83       	std	Y+4, r16	; 0x04
    41a8:	81 2f       	mov	r24, r17
    41aa:	6d df       	rcall	.-294    	; 0x4086 <_turn_off>
    41ac:	1f 5f       	subi	r17, 0xFF	; 255
    41ae:	26 96       	adiw	r28, 0x06	; 6
    41b0:	14 30       	cpi	r17, 0x04	; 4
    41b2:	79 f6       	brne	.-98     	; 0x4152 <_hal_led_task+0x14>
    41b4:	65 e0       	ldi	r22, 0x05	; 5
    41b6:	70 e0       	ldi	r23, 0x00	; 0
    41b8:	80 e0       	ldi	r24, 0x00	; 0
    41ba:	90 e0       	ldi	r25, 0x00	; 0
    41bc:	0e 94 0f 18 	call	0x301e	; 0x301e <vTaskDelay>
    41c0:	c5 cf       	rjmp	.-118    	; 0x414c <_hal_led_task+0xe>

000041c2 <led_create>:
    41c2:	cf 92       	push	r12
    41c4:	df 92       	push	r13
    41c6:	ef 92       	push	r14
    41c8:	ff 92       	push	r15
    41ca:	0f 93       	push	r16
    41cc:	1f 93       	push	r17
    41ce:	cf 93       	push	r28
    41d0:	df 93       	push	r29
    41d2:	06 2f       	mov	r16, r22
    41d4:	0f 2e       	mov	r0, r31
    41d6:	f9 e6       	ldi	r31, 0x69	; 105
    41d8:	ef 2e       	mov	r14, r31
    41da:	fa e1       	ldi	r31, 0x1A	; 26
    41dc:	ff 2e       	mov	r15, r31
    41de:	f0 2d       	mov	r31, r0
    41e0:	d7 01       	movw	r26, r14
    41e2:	18 96       	adiw	r26, 0x08	; 8
    41e4:	ed 91       	ld	r30, X+
    41e6:	fc 91       	ld	r31, X
    41e8:	19 97       	sbiw	r26, 0x09	; 9
    41ea:	66 e0       	ldi	r22, 0x06	; 6
    41ec:	87 e2       	ldi	r24, 0x27	; 39
    41ee:	90 e0       	ldi	r25, 0x00	; 0
    41f0:	19 95       	eicall
    41f2:	c0 ef       	ldi	r28, 0xF0	; 240
    41f4:	d8 e1       	ldi	r29, 0x18	; 24
    41f6:	0f 2e       	mov	r0, r31
    41f8:	f8 e2       	ldi	r31, 0x28	; 40
    41fa:	cf 2e       	mov	r12, r31
    41fc:	d1 2c       	mov	r13, r1
    41fe:	f0 2d       	mov	r31, r0
    4200:	d9 82       	std	Y+1, r13	; 0x01
    4202:	c8 82       	st	Y, r12
    4204:	86 e0       	ldi	r24, 0x06	; 6
    4206:	8a 83       	std	Y+2, r24	; 0x02
    4208:	1b 82       	std	Y+3, r1	; 0x03
    420a:	14 e0       	ldi	r17, 0x04	; 4
    420c:	1c 83       	std	Y+4, r17	; 0x04
    420e:	80 e0       	ldi	r24, 0x00	; 0
    4210:	3a df       	rcall	.-396    	; 0x4086 <_turn_off>
    4212:	d7 01       	movw	r26, r14
    4214:	18 96       	adiw	r26, 0x08	; 8
    4216:	ed 91       	ld	r30, X+
    4218:	fc 91       	ld	r31, X
    421a:	19 97       	sbiw	r26, 0x09	; 9
    421c:	67 e0       	ldi	r22, 0x07	; 7
    421e:	87 e2       	ldi	r24, 0x27	; 39
    4220:	90 e0       	ldi	r25, 0x00	; 0
    4222:	19 95       	eicall
    4224:	df 82       	std	Y+7, r13	; 0x07
    4226:	ce 82       	std	Y+6, r12	; 0x06
    4228:	87 e0       	ldi	r24, 0x07	; 7
    422a:	88 87       	std	Y+8, r24	; 0x08
    422c:	19 86       	std	Y+9, r1	; 0x09
    422e:	1a 87       	std	Y+10, r17	; 0x0a
    4230:	81 e0       	ldi	r24, 0x01	; 1
    4232:	29 df       	rcall	.-430    	; 0x4086 <_turn_off>
    4234:	d7 01       	movw	r26, r14
    4236:	18 96       	adiw	r26, 0x08	; 8
    4238:	ed 91       	ld	r30, X+
    423a:	fc 91       	ld	r31, X
    423c:	19 97       	sbiw	r26, 0x09	; 9
    423e:	65 e0       	ldi	r22, 0x05	; 5
    4240:	83 e3       	ldi	r24, 0x33	; 51
    4242:	90 e0       	ldi	r25, 0x00	; 0
    4244:	19 95       	eicall
    4246:	d7 01       	movw	r26, r14
    4248:	18 96       	adiw	r26, 0x08	; 8
    424a:	ed 91       	ld	r30, X+
    424c:	fc 91       	ld	r31, X
    424e:	19 97       	sbiw	r26, 0x09	; 9
    4250:	61 e0       	ldi	r22, 0x01	; 1
    4252:	84 e3       	ldi	r24, 0x34	; 52
    4254:	90 e0       	ldi	r25, 0x00	; 0
    4256:	19 95       	eicall
    4258:	84 e3       	ldi	r24, 0x34	; 52
    425a:	90 e0       	ldi	r25, 0x00	; 0
    425c:	9d 87       	std	Y+13, r25	; 0x0d
    425e:	8c 87       	std	Y+12, r24	; 0x0c
    4260:	85 e0       	ldi	r24, 0x05	; 5
    4262:	8e 87       	std	Y+14, r24	; 0x0e
    4264:	1f 86       	std	Y+15, r1	; 0x0f
    4266:	18 8b       	std	Y+16, r17	; 0x10
    4268:	82 e0       	ldi	r24, 0x02	; 2
    426a:	0d df       	rcall	.-486    	; 0x4086 <_turn_off>
    426c:	d7 01       	movw	r26, r14
    426e:	18 96       	adiw	r26, 0x08	; 8
    4270:	ed 91       	ld	r30, X+
    4272:	fc 91       	ld	r31, X
    4274:	19 97       	sbiw	r26, 0x09	; 9
    4276:	64 e0       	ldi	r22, 0x04	; 4
    4278:	81 e0       	ldi	r24, 0x01	; 1
    427a:	91 e0       	ldi	r25, 0x01	; 1
    427c:	19 95       	eicall
    427e:	d7 01       	movw	r26, r14
    4280:	18 96       	adiw	r26, 0x08	; 8
    4282:	ed 91       	ld	r30, X+
    4284:	fc 91       	ld	r31, X
    4286:	19 97       	sbiw	r26, 0x09	; 9
    4288:	61 e0       	ldi	r22, 0x01	; 1
    428a:	82 e0       	ldi	r24, 0x02	; 2
    428c:	91 e0       	ldi	r25, 0x01	; 1
    428e:	19 95       	eicall
    4290:	82 e0       	ldi	r24, 0x02	; 2
    4292:	91 e0       	ldi	r25, 0x01	; 1
    4294:	9b 8b       	std	Y+19, r25	; 0x13
    4296:	8a 8b       	std	Y+18, r24	; 0x12
    4298:	1c 8b       	std	Y+20, r17	; 0x14
    429a:	1d 8a       	std	Y+21, r1	; 0x15
    429c:	1e 8b       	std	Y+22, r17	; 0x16
    429e:	83 e0       	ldi	r24, 0x03	; 3
    42a0:	f2 de       	rcall	.-540    	; 0x4086 <_turn_off>
    42a2:	e1 2c       	mov	r14, r1
    42a4:	f1 2c       	mov	r15, r1
    42a6:	20 e0       	ldi	r18, 0x00	; 0
    42a8:	30 e0       	ldi	r19, 0x00	; 0
    42aa:	40 ec       	ldi	r20, 0xC0	; 192
    42ac:	50 e0       	ldi	r21, 0x00	; 0
    42ae:	6c ed       	ldi	r22, 0xDC	; 220
    42b0:	74 e0       	ldi	r23, 0x04	; 4
    42b2:	8f e9       	ldi	r24, 0x9F	; 159
    42b4:	90 e2       	ldi	r25, 0x20	; 32
    42b6:	0e 94 4d 15 	call	0x2a9a	; 0x2a9a <xTaskCreate>
    42ba:	df 91       	pop	r29
    42bc:	cf 91       	pop	r28
    42be:	1f 91       	pop	r17
    42c0:	0f 91       	pop	r16
    42c2:	ff 90       	pop	r15
    42c4:	ef 90       	pop	r14
    42c6:	df 90       	pop	r13
    42c8:	cf 90       	pop	r12
    42ca:	08 95       	ret

000042cc <led_slow_blink>:
    42cc:	0f 93       	push	r16
    42ce:	1f 93       	push	r17
    42d0:	cf 93       	push	r28
    42d2:	df 93       	push	r29
    42d4:	c8 2f       	mov	r28, r24
    42d6:	d0 e0       	ldi	r29, 0x00	; 0
    42d8:	8e 01       	movw	r16, r28
    42da:	00 0f       	add	r16, r16
    42dc:	11 1f       	adc	r17, r17
    42de:	d8 01       	movw	r26, r16
    42e0:	ac 0f       	add	r26, r28
    42e2:	bd 1f       	adc	r27, r29
    42e4:	aa 0f       	add	r26, r26
    42e6:	bb 1f       	adc	r27, r27
    42e8:	a0 51       	subi	r26, 0x10	; 16
    42ea:	b7 4e       	sbci	r27, 0xE7	; 231
    42ec:	e0 91 75 1a 	lds	r30, 0x1A75	; 0x801a75 <register_access+0xc>
    42f0:	f0 91 76 1a 	lds	r31, 0x1A76	; 0x801a76 <register_access+0xd>
    42f4:	12 96       	adiw	r26, 0x02	; 2
    42f6:	6c 91       	ld	r22, X
    42f8:	12 97       	sbiw	r26, 0x02	; 2
    42fa:	8d 91       	ld	r24, X+
    42fc:	9c 91       	ld	r25, X
    42fe:	19 95       	eicall
    4300:	c0 0f       	add	r28, r16
    4302:	d1 1f       	adc	r29, r17
    4304:	cc 0f       	add	r28, r28
    4306:	dd 1f       	adc	r29, r29
    4308:	c0 51       	subi	r28, 0x10	; 16
    430a:	d7 4e       	sbci	r29, 0xE7	; 231
    430c:	81 e0       	ldi	r24, 0x01	; 1
    430e:	8c 83       	std	Y+4, r24	; 0x04
    4310:	df 91       	pop	r29
    4312:	cf 91       	pop	r28
    4314:	1f 91       	pop	r17
    4316:	0f 91       	pop	r16
    4318:	08 95       	ret

0000431a <led_fast_blink>:
    431a:	0f 93       	push	r16
    431c:	1f 93       	push	r17
    431e:	cf 93       	push	r28
    4320:	df 93       	push	r29
    4322:	c8 2f       	mov	r28, r24
    4324:	d0 e0       	ldi	r29, 0x00	; 0
    4326:	8e 01       	movw	r16, r28
    4328:	00 0f       	add	r16, r16
    432a:	11 1f       	adc	r17, r17
    432c:	d8 01       	movw	r26, r16
    432e:	ac 0f       	add	r26, r28
    4330:	bd 1f       	adc	r27, r29
    4332:	aa 0f       	add	r26, r26
    4334:	bb 1f       	adc	r27, r27
    4336:	a0 51       	subi	r26, 0x10	; 16
    4338:	b7 4e       	sbci	r27, 0xE7	; 231
    433a:	e0 91 75 1a 	lds	r30, 0x1A75	; 0x801a75 <register_access+0xc>
    433e:	f0 91 76 1a 	lds	r31, 0x1A76	; 0x801a76 <register_access+0xd>
    4342:	12 96       	adiw	r26, 0x02	; 2
    4344:	6c 91       	ld	r22, X
    4346:	12 97       	sbiw	r26, 0x02	; 2
    4348:	8d 91       	ld	r24, X+
    434a:	9c 91       	ld	r25, X
    434c:	19 95       	eicall
    434e:	c0 0f       	add	r28, r16
    4350:	d1 1f       	adc	r29, r17
    4352:	cc 0f       	add	r28, r28
    4354:	dd 1f       	adc	r29, r29
    4356:	c0 51       	subi	r28, 0x10	; 16
    4358:	d7 4e       	sbci	r29, 0xE7	; 231
    435a:	82 e0       	ldi	r24, 0x02	; 2
    435c:	8c 83       	std	Y+4, r24	; 0x04
    435e:	df 91       	pop	r29
    4360:	cf 91       	pop	r28
    4362:	1f 91       	pop	r17
    4364:	0f 91       	pop	r16
    4366:	08 95       	ret

00004368 <led_led_on>:
    4368:	28 2f       	mov	r18, r24
    436a:	30 e0       	ldi	r19, 0x00	; 0
    436c:	f9 01       	movw	r30, r18
    436e:	ee 0f       	add	r30, r30
    4370:	ff 1f       	adc	r31, r31
    4372:	e2 0f       	add	r30, r18
    4374:	f3 1f       	adc	r31, r19
    4376:	ee 0f       	add	r30, r30
    4378:	ff 1f       	adc	r31, r31
    437a:	e0 51       	subi	r30, 0x10	; 16
    437c:	f7 4e       	sbci	r31, 0xE7	; 231
    437e:	93 e0       	ldi	r25, 0x03	; 3
    4380:	94 83       	std	Z+4, r25	; 0x04
    4382:	af ce       	rjmp	.-674    	; 0x40e2 <_turn_on>
    4384:	08 95       	ret

00004386 <led_led_off>:
    4386:	28 2f       	mov	r18, r24
    4388:	30 e0       	ldi	r19, 0x00	; 0
    438a:	f9 01       	movw	r30, r18
    438c:	ee 0f       	add	r30, r30
    438e:	ff 1f       	adc	r31, r31
    4390:	e2 0f       	add	r30, r18
    4392:	f3 1f       	adc	r31, r19
    4394:	ee 0f       	add	r30, r30
    4396:	ff 1f       	adc	r31, r31
    4398:	e0 51       	subi	r30, 0x10	; 16
    439a:	f7 4e       	sbci	r31, 0xE7	; 231
    439c:	94 e0       	ldi	r25, 0x04	; 4
    439e:	94 83       	std	Z+4, r25	; 0x04
    43a0:	72 ce       	rjmp	.-796    	; 0x4086 <_turn_off>
    43a2:	08 95       	ret

000043a4 <led_long_puls>:
    43a4:	90 e0       	ldi	r25, 0x00	; 0
    43a6:	fc 01       	movw	r30, r24
    43a8:	ee 0f       	add	r30, r30
    43aa:	ff 1f       	adc	r31, r31
    43ac:	df 01       	movw	r26, r30
    43ae:	a8 0f       	add	r26, r24
    43b0:	b9 1f       	adc	r27, r25
    43b2:	aa 0f       	add	r26, r26
    43b4:	bb 1f       	adc	r27, r27
    43b6:	a0 51       	subi	r26, 0x10	; 16
    43b8:	b7 4e       	sbci	r27, 0xE7	; 231
    43ba:	24 e0       	ldi	r18, 0x04	; 4
    43bc:	15 96       	adiw	r26, 0x05	; 5
    43be:	2c 93       	st	X, r18
    43c0:	15 97       	sbiw	r26, 0x05	; 5
    43c2:	fd 01       	movw	r30, r26
    43c4:	14 82       	std	Z+4, r1	; 0x04
    43c6:	08 95       	ret

000043c8 <led_short_puls>:
    43c8:	90 e0       	ldi	r25, 0x00	; 0
    43ca:	fc 01       	movw	r30, r24
    43cc:	ee 0f       	add	r30, r30
    43ce:	ff 1f       	adc	r31, r31
    43d0:	df 01       	movw	r26, r30
    43d2:	a8 0f       	add	r26, r24
    43d4:	b9 1f       	adc	r27, r25
    43d6:	aa 0f       	add	r26, r26
    43d8:	bb 1f       	adc	r27, r27
    43da:	a0 51       	subi	r26, 0x10	; 16
    43dc:	b7 4e       	sbci	r27, 0xE7	; 231
    43de:	21 e0       	ldi	r18, 0x01	; 1
    43e0:	15 96       	adiw	r26, 0x05	; 5
    43e2:	2c 93       	st	X, r18
    43e4:	15 97       	sbiw	r26, 0x05	; 5
    43e6:	fd 01       	movw	r30, r26
    43e8:	14 82       	std	Z+4, r1	; 0x04
    43ea:	08 95       	ret

000043ec <_serial_call_back>:
    43ec:	0f 93       	push	r16
    43ee:	1f 93       	push	r17
    43f0:	cf 93       	push	r28
    43f2:	df 93       	push	r29
    43f4:	1f 92       	push	r1
    43f6:	1f 92       	push	r1
    43f8:	cd b7       	in	r28, 0x3d	; 61
    43fa:	de b7       	in	r29, 0x3e	; 62
    43fc:	8c 01       	movw	r16, r24
    43fe:	19 82       	std	Y+1, r1	; 0x01
    4400:	2d c0       	rjmp	.+90     	; 0x445c <_serial_call_back+0x70>
    4402:	e0 91 6c 19 	lds	r30, 0x196C	; 0x80196c <rec_buf_inp.2947>
    4406:	ec 32       	cpi	r30, 0x2C	; 44
    4408:	50 f4       	brcc	.+20     	; 0x441e <_serial_call_back+0x32>
    440a:	81 e0       	ldi	r24, 0x01	; 1
    440c:	8e 0f       	add	r24, r30
    440e:	80 93 6c 19 	sts	0x196C, r24	; 0x80196c <rec_buf_inp.2947>
    4412:	f0 e0       	ldi	r31, 0x00	; 0
    4414:	e2 56       	subi	r30, 0x62	; 98
    4416:	f6 4e       	sbci	r31, 0xE6	; 230
    4418:	8a 81       	ldd	r24, Y+2	; 0x02
    441a:	80 83       	st	Z, r24
    441c:	02 c0       	rjmp	.+4      	; 0x4422 <_serial_call_back+0x36>
    441e:	10 92 6c 19 	sts	0x196C, r1	; 0x80196c <rec_buf_inp.2947>
    4422:	8a 81       	ldd	r24, Y+2	; 0x02
    4424:	8a 30       	cpi	r24, 0x0A	; 10
    4426:	d1 f4       	brne	.+52     	; 0x445c <_serial_call_back+0x70>
    4428:	40 91 6c 19 	lds	r20, 0x196C	; 0x80196c <rec_buf_inp.2947>
    442c:	50 e0       	ldi	r21, 0x00	; 0
    442e:	fa 01       	movw	r30, r20
    4430:	e4 56       	subi	r30, 0x64	; 100
    4432:	f6 4e       	sbci	r31, 0xE6	; 230
    4434:	10 82       	st	Z, r1
    4436:	41 50       	subi	r20, 0x01	; 1
    4438:	51 09       	sbc	r21, r1
    443a:	9e 01       	movw	r18, r28
    443c:	2f 5f       	subi	r18, 0xFF	; 255
    443e:	3f 4f       	sbci	r19, 0xFF	; 255
    4440:	6e e9       	ldi	r22, 0x9E	; 158
    4442:	79 e1       	ldi	r23, 0x19	; 25
    4444:	80 91 6f 19 	lds	r24, 0x196F	; 0x80196f <_serial_reply_buffer_handle>
    4448:	90 91 70 19 	lds	r25, 0x1970	; 0x801970 <_serial_reply_buffer_handle+0x1>
    444c:	0e 94 c7 13 	call	0x278e	; 0x278e <xStreamBufferSendFromISR>
    4450:	89 81       	ldd	r24, Y+1	; 0x01
    4452:	81 11       	cpse	r24, r1
    4454:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <vPortYield>
    4458:	10 92 6c 19 	sts	0x196C, r1	; 0x80196c <rec_buf_inp.2947>
    445c:	be 01       	movw	r22, r28
    445e:	6e 5f       	subi	r22, 0xFE	; 254
    4460:	7f 4f       	sbci	r23, 0xFF	; 255
    4462:	c8 01       	movw	r24, r16
    4464:	8c d6       	rcall	.+3352   	; 0x517e <serial_get_byte>
    4466:	88 23       	and	r24, r24
    4468:	61 f2       	breq	.-104    	; 0x4402 <_serial_call_back+0x16>
    446a:	0f 90       	pop	r0
    446c:	0f 90       	pop	r0
    446e:	df 91       	pop	r29
    4470:	cf 91       	pop	r28
    4472:	1f 91       	pop	r17
    4474:	0f 91       	pop	r16
    4476:	08 95       	ret

00004478 <_upload_message>:
    4478:	0f 93       	push	r16
    447a:	1f 93       	push	r17
    447c:	cf 93       	push	r28
    447e:	df 93       	push	r29
    4480:	8c 01       	movw	r16, r24
    4482:	eb 01       	movw	r28, r22
    4484:	80 91 6f 19 	lds	r24, 0x196F	; 0x80196f <_serial_reply_buffer_handle>
    4488:	90 91 70 19 	lds	r25, 0x1970	; 0x801970 <_serial_reply_buffer_handle+0x1>
    448c:	0e 94 de 12 	call	0x25bc	; 0x25bc <xStreamBufferReset>
    4490:	b8 01       	movw	r22, r16
    4492:	88 e0       	ldi	r24, 0x08	; 8
    4494:	99 e1       	ldi	r25, 0x19	; 25
    4496:	0e 94 48 31 	call	0x6290	; 0x6290 <strcpy>
    449a:	20 97       	sbiw	r28, 0x00	; 0
    449c:	79 f0       	breq	.+30     	; 0x44bc <_upload_message+0x44>
    449e:	e8 e0       	ldi	r30, 0x08	; 8
    44a0:	f9 e1       	ldi	r31, 0x19	; 25
    44a2:	01 90       	ld	r0, Z+
    44a4:	00 20       	and	r0, r0
    44a6:	e9 f7       	brne	.-6      	; 0x44a2 <_upload_message+0x2a>
    44a8:	31 97       	sbiw	r30, 0x01	; 1
    44aa:	80 e2       	ldi	r24, 0x20	; 32
    44ac:	90 e0       	ldi	r25, 0x00	; 0
    44ae:	91 83       	std	Z+1, r25	; 0x01
    44b0:	80 83       	st	Z, r24
    44b2:	be 01       	movw	r22, r28
    44b4:	88 e0       	ldi	r24, 0x08	; 8
    44b6:	99 e1       	ldi	r25, 0x19	; 25
    44b8:	0e 94 3d 31 	call	0x627a	; 0x627a <strcat>
    44bc:	e8 e0       	ldi	r30, 0x08	; 8
    44be:	f9 e1       	ldi	r31, 0x19	; 25
    44c0:	df 01       	movw	r26, r30
    44c2:	0d 90       	ld	r0, X+
    44c4:	00 20       	and	r0, r0
    44c6:	e9 f7       	brne	.-6      	; 0x44c2 <_upload_message+0x4a>
    44c8:	11 97       	sbiw	r26, 0x01	; 1
    44ca:	8d e0       	ldi	r24, 0x0D	; 13
    44cc:	9a e0       	ldi	r25, 0x0A	; 10
    44ce:	11 96       	adiw	r26, 0x01	; 1
    44d0:	9c 93       	st	X, r25
    44d2:	8e 93       	st	-X, r24
    44d4:	12 96       	adiw	r26, 0x02	; 2
    44d6:	1c 92       	st	X, r1
    44d8:	01 90       	ld	r0, Z+
    44da:	00 20       	and	r0, r0
    44dc:	e9 f7       	brne	.-6      	; 0x44d8 <_upload_message+0x60>
    44de:	31 97       	sbiw	r30, 0x01	; 1
    44e0:	e8 50       	subi	r30, 0x08	; 8
    44e2:	f9 41       	sbci	r31, 0x19	; 25
    44e4:	ae 2f       	mov	r26, r30
    44e6:	88 e0       	ldi	r24, 0x08	; 8
    44e8:	99 e1       	ldi	r25, 0x19	; 25
    44ea:	ac 01       	movw	r20, r24
    44ec:	6a 2f       	mov	r22, r26
    44ee:	80 91 71 19 	lds	r24, 0x1971	; 0x801971 <_rn2483_serial>
    44f2:	90 91 72 19 	lds	r25, 0x1972	; 0x801972 <_rn2483_serial+0x1>
    44f6:	f3 d5       	rcall	.+3046   	; 0x50de <serial_send_bytes>
    44f8:	81 11       	cpse	r24, r1
    44fa:	11 c0       	rjmp	.+34     	; 0x451e <_upload_message+0xa6>
    44fc:	08 e2       	ldi	r16, 0x28	; 40
    44fe:	15 e0       	ldi	r17, 0x05	; 5
    4500:	20 e0       	ldi	r18, 0x00	; 0
    4502:	30 e0       	ldi	r19, 0x00	; 0
    4504:	4d e2       	ldi	r20, 0x2D	; 45
    4506:	50 e0       	ldi	r21, 0x00	; 0
    4508:	68 ef       	ldi	r22, 0xF8	; 248
    450a:	79 e1       	ldi	r23, 0x19	; 25
    450c:	80 91 6f 19 	lds	r24, 0x196F	; 0x80196f <_serial_reply_buffer_handle>
    4510:	90 91 70 19 	lds	r25, 0x1970	; 0x801970 <_serial_reply_buffer_handle+0x1>
    4514:	0e 94 0a 14 	call	0x2814	; 0x2814 <xStreamBufferReceive>
    4518:	88 ef       	ldi	r24, 0xF8	; 248
    451a:	99 e1       	ldi	r25, 0x19	; 25
    451c:	02 c0       	rjmp	.+4      	; 0x4522 <_upload_message+0xaa>
    451e:	80 e0       	ldi	r24, 0x00	; 0
    4520:	90 e0       	ldi	r25, 0x00	; 0
    4522:	df 91       	pop	r29
    4524:	cf 91       	pop	r28
    4526:	1f 91       	pop	r17
    4528:	0f 91       	pop	r16
    452a:	08 95       	ret

0000452c <_reply2return_code>:
    452c:	2f 92       	push	r2
    452e:	3f 92       	push	r3
    4530:	4f 92       	push	r4
    4532:	5f 92       	push	r5
    4534:	6f 92       	push	r6
    4536:	7f 92       	push	r7
    4538:	8f 92       	push	r8
    453a:	9f 92       	push	r9
    453c:	af 92       	push	r10
    453e:	bf 92       	push	r11
    4540:	cf 92       	push	r12
    4542:	df 92       	push	r13
    4544:	ef 92       	push	r14
    4546:	ff 92       	push	r15
    4548:	0f 93       	push	r16
    454a:	1f 93       	push	r17
    454c:	cf 93       	push	r28
    454e:	df 93       	push	r29
    4550:	5c 01       	movw	r10, r24
    4552:	fc 01       	movw	r30, r24
    4554:	01 90       	ld	r0, Z+
    4556:	00 20       	and	r0, r0
    4558:	e9 f7       	brne	.-6      	; 0x4554 <_reply2return_code+0x28>
    455a:	31 97       	sbiw	r30, 0x01	; 1
    455c:	6f 01       	movw	r12, r30
    455e:	c8 1a       	sub	r12, r24
    4560:	d9 0a       	sbc	r13, r25
    4562:	5c 2c       	mov	r5, r12
    4564:	0f 2e       	mov	r0, r31
    4566:	fd e7       	ldi	r31, 0x7D	; 125
    4568:	8f 2e       	mov	r8, r31
    456a:	f7 e0       	ldi	r31, 0x07	; 7
    456c:	9f 2e       	mov	r9, r31
    456e:	f0 2d       	mov	r31, r0
    4570:	e1 2c       	mov	r14, r1
    4572:	f1 2c       	mov	r15, r1
    4574:	4c 2c       	mov	r4, r12
    4576:	37 01       	movw	r6, r14
    4578:	f4 01       	movw	r30, r8
    457a:	01 81       	ldd	r16, Z+1	; 0x01
    457c:	12 81       	ldd	r17, Z+2	; 0x02
    457e:	e8 01       	movw	r28, r16
    4580:	09 90       	ld	r0, Y+
    4582:	00 20       	and	r0, r0
    4584:	e9 f7       	brne	.-6      	; 0x4580 <_reply2return_code+0x54>
    4586:	21 97       	sbiw	r28, 0x01	; 1
    4588:	c0 1b       	sub	r28, r16
    458a:	d1 0b       	sbc	r29, r17
    458c:	3c 2e       	mov	r3, r28
    458e:	f9 e0       	ldi	r31, 0x09	; 9
    4590:	cf 16       	cp	r12, r31
    4592:	d1 04       	cpc	r13, r1
    4594:	58 f0       	brcs	.+22     	; 0x45ac <_reply2return_code+0x80>
    4596:	f4 01       	movw	r30, r8
    4598:	20 80       	ld	r2, Z
    459a:	fe e0       	ldi	r31, 0x0E	; 14
    459c:	2f 12       	cpse	r2, r31
    459e:	06 c0       	rjmp	.+12     	; 0x45ac <_reply2return_code+0x80>
    45a0:	b8 01       	movw	r22, r16
    45a2:	c5 01       	movw	r24, r10
    45a4:	0e 94 18 31 	call	0x6230	; 0x6230 <strcasestr>
    45a8:	89 2b       	or	r24, r25
    45aa:	09 f5       	brne	.+66     	; 0x45ee <_reply2return_code+0xc2>
    45ac:	44 2d       	mov	r20, r4
    45ae:	35 14       	cp	r3, r5
    45b0:	08 f4       	brcc	.+2      	; 0x45b4 <_reply2return_code+0x88>
    45b2:	4c 2f       	mov	r20, r28
    45b4:	50 e0       	ldi	r21, 0x00	; 0
    45b6:	b8 01       	movw	r22, r16
    45b8:	c5 01       	movw	r24, r10
    45ba:	0e 94 4f 31 	call	0x629e	; 0x629e <strncasecmp>
    45be:	89 2b       	or	r24, r25
    45c0:	49 f4       	brne	.+18     	; 0x45d4 <_reply2return_code+0xa8>
    45c2:	f3 01       	movw	r30, r6
    45c4:	ee 0f       	add	r30, r30
    45c6:	ff 1f       	adc	r31, r31
    45c8:	e6 0d       	add	r30, r6
    45ca:	f7 1d       	adc	r31, r7
    45cc:	e3 58       	subi	r30, 0x83	; 131
    45ce:	f8 4f       	sbci	r31, 0xF8	; 248
    45d0:	20 80       	ld	r2, Z
    45d2:	0d c0       	rjmp	.+26     	; 0x45ee <_reply2return_code+0xc2>
    45d4:	8f ef       	ldi	r24, 0xFF	; 255
    45d6:	e8 1a       	sub	r14, r24
    45d8:	f8 0a       	sbc	r15, r24
    45da:	e3 e0       	ldi	r30, 0x03	; 3
    45dc:	8e 0e       	add	r8, r30
    45de:	91 1c       	adc	r9, r1
    45e0:	f1 e1       	ldi	r31, 0x11	; 17
    45e2:	ef 16       	cp	r14, r31
    45e4:	f1 04       	cpc	r15, r1
    45e6:	39 f6       	brne	.-114    	; 0x4576 <_reply2return_code+0x4a>
    45e8:	68 94       	set
    45ea:	22 24       	eor	r2, r2
    45ec:	24 f8       	bld	r2, 4
    45ee:	82 2d       	mov	r24, r2
    45f0:	df 91       	pop	r29
    45f2:	cf 91       	pop	r28
    45f4:	1f 91       	pop	r17
    45f6:	0f 91       	pop	r16
    45f8:	ff 90       	pop	r15
    45fa:	ef 90       	pop	r14
    45fc:	df 90       	pop	r13
    45fe:	cf 90       	pop	r12
    4600:	bf 90       	pop	r11
    4602:	af 90       	pop	r10
    4604:	9f 90       	pop	r9
    4606:	8f 90       	pop	r8
    4608:	7f 90       	pop	r7
    460a:	6f 90       	pop	r6
    460c:	5f 90       	pop	r5
    460e:	4f 90       	pop	r4
    4610:	3f 90       	pop	r3
    4612:	2f 90       	pop	r2
    4614:	08 95       	ret

00004616 <_upload_message_rc>:
    4616:	30 df       	rcall	.-416    	; 0x4478 <_upload_message>
    4618:	89 cf       	rjmp	.-238    	; 0x452c <_reply2return_code>
    461a:	08 95       	ret

0000461c <lora_driver_flush_buffers>:
    461c:	80 91 6f 19 	lds	r24, 0x196F	; 0x80196f <_serial_reply_buffer_handle>
    4620:	90 91 70 19 	lds	r25, 0x1970	; 0x801970 <_serial_reply_buffer_handle+0x1>
    4624:	0c 94 de 12 	jmp	0x25bc	; 0x25bc <xStreamBufferReset>
    4628:	08 95       	ret

0000462a <lora_driver_create>:
    462a:	8f 92       	push	r8
    462c:	9f 92       	push	r9
    462e:	af 92       	push	r10
    4630:	cf 92       	push	r12
    4632:	ef 92       	push	r14
    4634:	0f 93       	push	r16
    4636:	1f 93       	push	r17
    4638:	cf 93       	push	r28
    463a:	c8 2f       	mov	r28, r24
    463c:	8b 01       	movw	r16, r22
    463e:	41 e0       	ldi	r20, 0x01	; 1
    4640:	60 e0       	ldi	r22, 0x00	; 0
    4642:	70 e0       	ldi	r23, 0x00	; 0
    4644:	88 ec       	ldi	r24, 0xC8	; 200
    4646:	90 e0       	ldi	r25, 0x00	; 0
    4648:	0e 94 b2 12 	call	0x2564	; 0x2564 <xStreamBufferGenericCreate>
    464c:	90 93 70 19 	sts	0x1970, r25	; 0x801970 <_serial_reply_buffer_handle+0x1>
    4650:	80 93 6f 19 	sts	0x196F, r24	; 0x80196f <_serial_reply_buffer_handle>
    4654:	10 93 6e 19 	sts	0x196E, r17	; 0x80196e <_downlinkMessageBuffer+0x1>
    4658:	00 93 6d 19 	sts	0x196D, r16	; 0x80196d <_downlinkMessageBuffer>
    465c:	0f 2e       	mov	r0, r31
    465e:	f6 ef       	ldi	r31, 0xF6	; 246
    4660:	8f 2e       	mov	r8, r31
    4662:	f1 e2       	ldi	r31, 0x21	; 33
    4664:	9f 2e       	mov	r9, r31
    4666:	f0 2d       	mov	r31, r0
    4668:	68 94       	set
    466a:	aa 24       	eor	r10, r10
    466c:	a6 f8       	bld	r10, 6
    466e:	68 94       	set
    4670:	cc 24       	eor	r12, r12
    4672:	c6 f8       	bld	r12, 6
    4674:	e1 2c       	mov	r14, r1
    4676:	00 e0       	ldi	r16, 0x00	; 0
    4678:	23 e0       	ldi	r18, 0x03	; 3
    467a:	40 e0       	ldi	r20, 0x00	; 0
    467c:	51 ee       	ldi	r21, 0xE1	; 225
    467e:	60 e0       	ldi	r22, 0x00	; 0
    4680:	70 e0       	ldi	r23, 0x00	; 0
    4682:	8c 2f       	mov	r24, r28
    4684:	71 d4       	rcall	.+2274   	; 0x4f68 <serial_new_instance>
    4686:	90 93 72 19 	sts	0x1972, r25	; 0x801972 <_rn2483_serial+0x1>
    468a:	80 93 71 19 	sts	0x1971, r24	; 0x801971 <_rn2483_serial>
    468e:	e0 91 71 1a 	lds	r30, 0x1A71	; 0x801a71 <register_access+0x8>
    4692:	f0 91 72 1a 	lds	r31, 0x1A72	; 0x801a72 <register_access+0x9>
    4696:	64 e0       	ldi	r22, 0x04	; 4
    4698:	87 e0       	ldi	r24, 0x07	; 7
    469a:	91 e0       	ldi	r25, 0x01	; 1
    469c:	19 95       	eicall
    469e:	cf 91       	pop	r28
    46a0:	1f 91       	pop	r17
    46a2:	0f 91       	pop	r16
    46a4:	ef 90       	pop	r14
    46a6:	cf 90       	pop	r12
    46a8:	af 90       	pop	r10
    46aa:	9f 90       	pop	r9
    46ac:	8f 90       	pop	r8
    46ae:	08 95       	ret

000046b0 <lora_driver_reset_rn2483>:
    46b0:	88 23       	and	r24, r24
    46b2:	49 f0       	breq	.+18     	; 0x46c6 <lora_driver_reset_rn2483+0x16>
    46b4:	e0 91 7b 1a 	lds	r30, 0x1A7B	; 0x801a7b <register_access+0x12>
    46b8:	f0 91 7c 1a 	lds	r31, 0x1A7C	; 0x801a7c <register_access+0x13>
    46bc:	64 e0       	ldi	r22, 0x04	; 4
    46be:	88 e0       	ldi	r24, 0x08	; 8
    46c0:	91 e0       	ldi	r25, 0x01	; 1
    46c2:	19 95       	eicall
    46c4:	08 95       	ret
    46c6:	e0 91 71 1a 	lds	r30, 0x1A71	; 0x801a71 <register_access+0x8>
    46ca:	f0 91 72 1a 	lds	r31, 0x1A72	; 0x801a72 <register_access+0x9>
    46ce:	64 e0       	ldi	r22, 0x04	; 4
    46d0:	88 e0       	ldi	r24, 0x08	; 8
    46d2:	91 e0       	ldi	r25, 0x01	; 1
    46d4:	19 95       	eicall
    46d6:	08 95       	ret

000046d8 <lora_driver_rn2483_factory_reset>:
    46d8:	60 e0       	ldi	r22, 0x00	; 0
    46da:	70 e0       	ldi	r23, 0x00	; 0
    46dc:	83 e0       	ldi	r24, 0x03	; 3
    46de:	95 e0       	ldi	r25, 0x05	; 5
    46e0:	cb de       	rcall	.-618    	; 0x4478 <_upload_message>
    46e2:	e8 ef       	ldi	r30, 0xF8	; 248
    46e4:	f9 e1       	ldi	r31, 0x19	; 25
    46e6:	01 90       	ld	r0, Z+
    46e8:	00 20       	and	r0, r0
    46ea:	e9 f7       	brne	.-6      	; 0x46e6 <lora_driver_rn2483_factory_reset+0xe>
    46ec:	31 97       	sbiw	r30, 0x01	; 1
    46ee:	e8 5f       	subi	r30, 0xF8	; 248
    46f0:	f9 41       	sbci	r31, 0x19	; 25
    46f2:	81 e0       	ldi	r24, 0x01	; 1
    46f4:	75 97       	sbiw	r30, 0x15	; 21
    46f6:	08 f0       	brcs	.+2      	; 0x46fa <lora_driver_rn2483_factory_reset+0x22>
    46f8:	80 e0       	ldi	r24, 0x00	; 0
    46fa:	08 95       	ret

000046fc <lora_driver_get_rn2483_hweui>:
    46fc:	cf 93       	push	r28
    46fe:	df 93       	push	r29
    4700:	ec 01       	movw	r28, r24
    4702:	60 e0       	ldi	r22, 0x00	; 0
    4704:	70 e0       	ldi	r23, 0x00	; 0
    4706:	84 e1       	ldi	r24, 0x14	; 20
    4708:	95 e0       	ldi	r25, 0x05	; 5
    470a:	b6 de       	rcall	.-660    	; 0x4478 <_upload_message>
    470c:	e8 ef       	ldi	r30, 0xF8	; 248
    470e:	f9 e1       	ldi	r31, 0x19	; 25
    4710:	01 90       	ld	r0, Z+
    4712:	00 20       	and	r0, r0
    4714:	e9 f7       	brne	.-6      	; 0x4710 <lora_driver_get_rn2483_hweui+0x14>
    4716:	e9 50       	subi	r30, 0x09	; 9
    4718:	fa 41       	sbci	r31, 0x1A	; 26
    471a:	39 f4       	brne	.+14     	; 0x472a <lora_driver_get_rn2483_hweui+0x2e>
    471c:	68 ef       	ldi	r22, 0xF8	; 248
    471e:	79 e1       	ldi	r23, 0x19	; 25
    4720:	ce 01       	movw	r24, r28
    4722:	0e 94 48 31 	call	0x6290	; 0x6290 <strcpy>
    4726:	80 e0       	ldi	r24, 0x00	; 0
    4728:	02 c0       	rjmp	.+4      	; 0x472e <lora_driver_get_rn2483_hweui+0x32>
    472a:	18 82       	st	Y, r1
    472c:	81 e0       	ldi	r24, 0x01	; 1
    472e:	df 91       	pop	r29
    4730:	cf 91       	pop	r28
    4732:	08 95       	ret

00004734 <lora_driver_set_device_identifier>:
    4734:	fc 01       	movw	r30, r24
    4736:	01 90       	ld	r0, Z+
    4738:	00 20       	and	r0, r0
    473a:	e9 f7       	brne	.-6      	; 0x4736 <lora_driver_set_device_identifier+0x2>
    473c:	9f 01       	movw	r18, r30
    473e:	21 51       	subi	r18, 0x11	; 17
    4740:	31 09       	sbc	r19, r1
    4742:	28 17       	cp	r18, r24
    4744:	39 07       	cpc	r19, r25
    4746:	29 f4       	brne	.+10     	; 0x4752 <lora_driver_set_device_identifier+0x1e>
    4748:	bc 01       	movw	r22, r24
    474a:	82 e4       	ldi	r24, 0x42	; 66
    474c:	95 e0       	ldi	r25, 0x05	; 5
    474e:	63 cf       	rjmp	.-314    	; 0x4616 <_upload_message_rc>
    4750:	08 95       	ret
    4752:	89 e0       	ldi	r24, 0x09	; 9
    4754:	08 95       	ret

00004756 <lora_driver_set_application_identifier>:
    4756:	fc 01       	movw	r30, r24
    4758:	01 90       	ld	r0, Z+
    475a:	00 20       	and	r0, r0
    475c:	e9 f7       	brne	.-6      	; 0x4758 <lora_driver_set_application_identifier+0x2>
    475e:	9f 01       	movw	r18, r30
    4760:	21 51       	subi	r18, 0x11	; 17
    4762:	31 09       	sbc	r19, r1
    4764:	28 17       	cp	r18, r24
    4766:	39 07       	cpc	r19, r25
    4768:	29 f4       	brne	.+10     	; 0x4774 <lora_driver_set_application_identifier+0x1e>
    476a:	bc 01       	movw	r22, r24
    476c:	81 e5       	ldi	r24, 0x51	; 81
    476e:	95 e0       	ldi	r25, 0x05	; 5
    4770:	52 cf       	rjmp	.-348    	; 0x4616 <_upload_message_rc>
    4772:	08 95       	ret
    4774:	89 e0       	ldi	r24, 0x09	; 9
    4776:	08 95       	ret

00004778 <lora_driver_set_application_key>:
    4778:	fc 01       	movw	r30, r24
    477a:	01 90       	ld	r0, Z+
    477c:	00 20       	and	r0, r0
    477e:	e9 f7       	brne	.-6      	; 0x477a <lora_driver_set_application_key+0x2>
    4780:	9f 01       	movw	r18, r30
    4782:	21 52       	subi	r18, 0x21	; 33
    4784:	31 09       	sbc	r19, r1
    4786:	28 17       	cp	r18, r24
    4788:	39 07       	cpc	r19, r25
    478a:	29 f4       	brne	.+10     	; 0x4796 <lora_driver_set_application_key+0x1e>
    478c:	bc 01       	movw	r22, r24
    478e:	80 e6       	ldi	r24, 0x60	; 96
    4790:	95 e0       	ldi	r25, 0x05	; 5
    4792:	41 cf       	rjmp	.-382    	; 0x4616 <_upload_message_rc>
    4794:	08 95       	ret
    4796:	89 e0       	ldi	r24, 0x09	; 9
    4798:	08 95       	ret

0000479a <lora_driver_save_mac>:
    479a:	60 e0       	ldi	r22, 0x00	; 0
    479c:	70 e0       	ldi	r23, 0x00	; 0
    479e:	8f e9       	ldi	r24, 0x9F	; 159
    47a0:	95 e0       	ldi	r25, 0x05	; 5
    47a2:	39 cf       	rjmp	.-398    	; 0x4616 <_upload_message_rc>
    47a4:	08 95       	ret

000047a6 <lora_driver_join>:
    47a6:	0f 93       	push	r16
    47a8:	1f 93       	push	r17
    47aa:	e8 2f       	mov	r30, r24
    47ac:	f0 e0       	ldi	r31, 0x00	; 0
    47ae:	ee 0f       	add	r30, r30
    47b0:	ff 1f       	adc	r31, r31
    47b2:	e7 58       	subi	r30, 0x87	; 135
    47b4:	f8 4f       	sbci	r31, 0xF8	; 248
    47b6:	60 81       	ld	r22, Z
    47b8:	71 81       	ldd	r23, Z+1	; 0x01
    47ba:	88 ea       	ldi	r24, 0xA8	; 168
    47bc:	95 e0       	ldi	r25, 0x05	; 5
    47be:	2b df       	rcall	.-426    	; 0x4616 <_upload_message_rc>
    47c0:	81 11       	cpse	r24, r1
    47c2:	14 c0       	rjmp	.+40     	; 0x47ec <lora_driver_join+0x46>
    47c4:	08 e2       	ldi	r16, 0x28	; 40
    47c6:	15 e0       	ldi	r17, 0x05	; 5
    47c8:	20 e0       	ldi	r18, 0x00	; 0
    47ca:	30 e0       	ldi	r19, 0x00	; 0
    47cc:	4d e2       	ldi	r20, 0x2D	; 45
    47ce:	50 e0       	ldi	r21, 0x00	; 0
    47d0:	68 ef       	ldi	r22, 0xF8	; 248
    47d2:	79 e1       	ldi	r23, 0x19	; 25
    47d4:	80 91 6f 19 	lds	r24, 0x196F	; 0x80196f <_serial_reply_buffer_handle>
    47d8:	90 91 70 19 	lds	r25, 0x1970	; 0x801970 <_serial_reply_buffer_handle+0x1>
    47dc:	0e 94 0a 14 	call	0x2814	; 0x2814 <xStreamBufferReceive>
    47e0:	88 23       	and	r24, r24
    47e2:	21 f0       	breq	.+8      	; 0x47ec <lora_driver_join+0x46>
    47e4:	88 ef       	ldi	r24, 0xF8	; 248
    47e6:	99 e1       	ldi	r25, 0x19	; 25
    47e8:	a1 de       	rcall	.-702    	; 0x452c <_reply2return_code>
    47ea:	03 c0       	rjmp	.+6      	; 0x47f2 <lora_driver_join+0x4c>
    47ec:	88 ef       	ldi	r24, 0xF8	; 248
    47ee:	99 e1       	ldi	r25, 0x19	; 25
    47f0:	9d de       	rcall	.-710    	; 0x452c <_reply2return_code>
    47f2:	1f 91       	pop	r17
    47f4:	0f 91       	pop	r16
    47f6:	08 95       	ret

000047f8 <lora_driver_sent_upload_message>:
    47f8:	0f 93       	push	r16
    47fa:	1f 93       	push	r17
    47fc:	cf 93       	push	r28
    47fe:	df 93       	push	r29
    4800:	1f 92       	push	r1
    4802:	cd b7       	in	r28, 0x3d	; 61
    4804:	de b7       	in	r29, 0x3e	; 62
    4806:	db 01       	movw	r26, r22
    4808:	11 96       	adiw	r26, 0x01	; 1
    480a:	9c 91       	ld	r25, X
    480c:	11 97       	sbiw	r26, 0x01	; 1
    480e:	95 31       	cpi	r25, 0x15	; 21
    4810:	08 f0       	brcs	.+2      	; 0x4814 <lora_driver_sent_upload_message+0x1c>
    4812:	b4 c0       	rjmp	.+360    	; 0x497c <lora_driver_sent_upload_message+0x184>
    4814:	99 23       	and	r25, r25
    4816:	81 f1       	breq	.+96     	; 0x4878 <lora_driver_sent_upload_message+0x80>
    4818:	60 e0       	ldi	r22, 0x00	; 0
    481a:	70 e0       	ldi	r23, 0x00	; 0
    481c:	27 2f       	mov	r18, r23
    481e:	30 e0       	ldi	r19, 0x00	; 0
    4820:	46 2f       	mov	r20, r22
    4822:	50 e0       	ldi	r21, 0x00	; 0
    4824:	fd 01       	movw	r30, r26
    4826:	e4 0f       	add	r30, r20
    4828:	f5 1f       	adc	r31, r21
    482a:	92 81       	ldd	r25, Z+2	; 0x02
    482c:	92 95       	swap	r25
    482e:	9f 70       	andi	r25, 0x0F	; 15
    4830:	9a 30       	cpi	r25, 0x0A	; 10
    4832:	10 f0       	brcs	.+4      	; 0x4838 <lora_driver_sent_upload_message+0x40>
    4834:	99 5c       	subi	r25, 0xC9	; 201
    4836:	01 c0       	rjmp	.+2      	; 0x483a <lora_driver_sent_upload_message+0x42>
    4838:	90 5d       	subi	r25, 0xD0	; 208
    483a:	f9 01       	movw	r30, r18
    483c:	e7 57       	subi	r30, 0x77	; 119
    483e:	f6 4e       	sbci	r31, 0xE6	; 230
    4840:	90 83       	st	Z, r25
    4842:	2f 5f       	subi	r18, 0xFF	; 255
    4844:	3f 4f       	sbci	r19, 0xFF	; 255
    4846:	fd 01       	movw	r30, r26
    4848:	e4 0f       	add	r30, r20
    484a:	f5 1f       	adc	r31, r21
    484c:	92 81       	ldd	r25, Z+2	; 0x02
    484e:	9f 70       	andi	r25, 0x0F	; 15
    4850:	49 2f       	mov	r20, r25
    4852:	50 e0       	ldi	r21, 0x00	; 0
    4854:	4a 30       	cpi	r20, 0x0A	; 10
    4856:	51 05       	cpc	r21, r1
    4858:	14 f0       	brlt	.+4      	; 0x485e <lora_driver_sent_upload_message+0x66>
    485a:	99 5c       	subi	r25, 0xC9	; 201
    485c:	01 c0       	rjmp	.+2      	; 0x4860 <lora_driver_sent_upload_message+0x68>
    485e:	90 5d       	subi	r25, 0xD0	; 208
    4860:	f9 01       	movw	r30, r18
    4862:	e7 57       	subi	r30, 0x77	; 119
    4864:	f6 4e       	sbci	r31, 0xE6	; 230
    4866:	90 83       	st	Z, r25
    4868:	7e 5f       	subi	r23, 0xFE	; 254
    486a:	6f 5f       	subi	r22, 0xFF	; 255
    486c:	11 96       	adiw	r26, 0x01	; 1
    486e:	9c 91       	ld	r25, X
    4870:	11 97       	sbiw	r26, 0x01	; 1
    4872:	69 17       	cp	r22, r25
    4874:	98 f2       	brcs	.-90     	; 0x481c <lora_driver_sent_upload_message+0x24>
    4876:	01 c0       	rjmp	.+2      	; 0x487a <lora_driver_sent_upload_message+0x82>
    4878:	70 e0       	ldi	r23, 0x00	; 0
    487a:	e7 2f       	mov	r30, r23
    487c:	f0 e0       	ldi	r31, 0x00	; 0
    487e:	e7 57       	subi	r30, 0x77	; 119
    4880:	f6 4e       	sbci	r31, 0xE6	; 230
    4882:	10 82       	st	Z, r1
    4884:	4c 91       	ld	r20, X
    4886:	81 11       	cpse	r24, r1
    4888:	03 c0       	rjmp	.+6      	; 0x4890 <lora_driver_sent_upload_message+0x98>
    488a:	81 eb       	ldi	r24, 0xB1	; 177
    488c:	95 e0       	ldi	r25, 0x05	; 5
    488e:	02 c0       	rjmp	.+4      	; 0x4894 <lora_driver_sent_upload_message+0x9c>
    4890:	83 eb       	ldi	r24, 0xB3	; 179
    4892:	95 e0       	ldi	r25, 0x05	; 5
    4894:	29 e8       	ldi	r18, 0x89	; 137
    4896:	39 e1       	ldi	r19, 0x19	; 25
    4898:	3f 93       	push	r19
    489a:	2f 93       	push	r18
    489c:	1f 92       	push	r1
    489e:	4f 93       	push	r20
    48a0:	9f 93       	push	r25
    48a2:	8f 93       	push	r24
    48a4:	87 eb       	ldi	r24, 0xB7	; 183
    48a6:	95 e0       	ldi	r25, 0x05	; 5
    48a8:	9f 93       	push	r25
    48aa:	8f 93       	push	r24
    48ac:	8b ec       	ldi	r24, 0xCB	; 203
    48ae:	99 e1       	ldi	r25, 0x19	; 25
    48b0:	9f 93       	push	r25
    48b2:	8f 93       	push	r24
    48b4:	0e 94 aa 31 	call	0x6354	; 0x6354 <sprintf>
    48b8:	60 e0       	ldi	r22, 0x00	; 0
    48ba:	70 e0       	ldi	r23, 0x00	; 0
    48bc:	8b ec       	ldi	r24, 0xCB	; 203
    48be:	99 e1       	ldi	r25, 0x19	; 25
    48c0:	aa de       	rcall	.-684    	; 0x4616 <_upload_message_rc>
    48c2:	0f b6       	in	r0, 0x3f	; 63
    48c4:	f8 94       	cli
    48c6:	de bf       	out	0x3e, r29	; 62
    48c8:	0f be       	out	0x3f, r0	; 63
    48ca:	cd bf       	out	0x3d, r28	; 61
    48cc:	81 11       	cpse	r24, r1
    48ce:	59 c0       	rjmp	.+178    	; 0x4982 <lora_driver_sent_upload_message+0x18a>
    48d0:	08 e2       	ldi	r16, 0x28	; 40
    48d2:	15 e0       	ldi	r17, 0x05	; 5
    48d4:	20 e0       	ldi	r18, 0x00	; 0
    48d6:	30 e0       	ldi	r19, 0x00	; 0
    48d8:	4d e2       	ldi	r20, 0x2D	; 45
    48da:	50 e0       	ldi	r21, 0x00	; 0
    48dc:	68 ef       	ldi	r22, 0xF8	; 248
    48de:	79 e1       	ldi	r23, 0x19	; 25
    48e0:	80 91 6f 19 	lds	r24, 0x196F	; 0x80196f <_serial_reply_buffer_handle>
    48e4:	90 91 70 19 	lds	r25, 0x1970	; 0x801970 <_serial_reply_buffer_handle+0x1>
    48e8:	0e 94 0a 14 	call	0x2814	; 0x2814 <xStreamBufferReceive>
    48ec:	88 23       	and	r24, r24
    48ee:	09 f4       	brne	.+2      	; 0x48f2 <lora_driver_sent_upload_message+0xfa>
    48f0:	47 c0       	rjmp	.+142    	; 0x4980 <lora_driver_sent_upload_message+0x188>
    48f2:	88 ef       	ldi	r24, 0xF8	; 248
    48f4:	99 e1       	ldi	r25, 0x19	; 25
    48f6:	1a de       	rcall	.-972    	; 0x452c <_reply2return_code>
    48f8:	8e 30       	cpi	r24, 0x0E	; 14
    48fa:	09 f0       	breq	.+2      	; 0x48fe <lora_driver_sent_upload_message+0x106>
    48fc:	42 c0       	rjmp	.+132    	; 0x4982 <lora_driver_sent_upload_message+0x18a>
    48fe:	87 e0       	ldi	r24, 0x07	; 7
    4900:	89 83       	std	Y+1, r24	; 0x01
    4902:	80 91 6d 19 	lds	r24, 0x196D	; 0x80196d <_downlinkMessageBuffer>
    4906:	90 91 6e 19 	lds	r25, 0x196E	; 0x80196e <_downlinkMessageBuffer+0x1>
    490a:	89 2b       	or	r24, r25
    490c:	a9 f1       	breq	.+106    	; 0x4978 <lora_driver_sent_upload_message+0x180>
    490e:	be 01       	movw	r22, r28
    4910:	6f 5f       	subi	r22, 0xFF	; 255
    4912:	7f 4f       	sbci	r23, 0xFF	; 255
    4914:	88 ef       	ldi	r24, 0xF8	; 248
    4916:	99 e1       	ldi	r25, 0x19	; 25
    4918:	68 d1       	rcall	.+720    	; 0x4bea <decode_port_no>
    491a:	80 93 73 19 	sts	0x1973, r24	; 0x801973 <_downlink_payload>
    491e:	e9 81       	ldd	r30, Y+1	; 0x01
    4920:	f0 e0       	ldi	r31, 0x00	; 0
    4922:	e8 50       	subi	r30, 0x08	; 8
    4924:	f6 4e       	sbci	r31, 0xE6	; 230
    4926:	df 01       	movw	r26, r30
    4928:	0d 90       	ld	r0, X+
    492a:	00 20       	and	r0, r0
    492c:	e9 f7       	brne	.-6      	; 0x4928 <lora_driver_sent_upload_message+0x130>
    492e:	11 97       	sbiw	r26, 0x01	; 1
    4930:	ae 1b       	sub	r26, r30
    4932:	bf 0b       	sbc	r27, r31
    4934:	aa 23       	and	r26, r26
    4936:	91 f0       	breq	.+36     	; 0x495c <lora_driver_sent_upload_message+0x164>
    4938:	bb 27       	eor	r27, r27
    493a:	cd 01       	movw	r24, r26
    493c:	01 97       	sbiw	r24, 0x01	; 1
    493e:	9c 01       	movw	r18, r24
    4940:	12 f4       	brpl	.+4      	; 0x4946 <lora_driver_sent_upload_message+0x14e>
    4942:	2f 5f       	subi	r18, 0xFF	; 255
    4944:	3f 4f       	sbci	r19, 0xFF	; 255
    4946:	35 95       	asr	r19
    4948:	27 95       	ror	r18
    494a:	20 93 74 19 	sts	0x1974, r18	; 0x801974 <_downlink_payload+0x1>
    494e:	af 01       	movw	r20, r30
    4950:	4f 5f       	subi	r20, 0xFF	; 255
    4952:	5f 4f       	sbci	r21, 0xFF	; 255
    4954:	64 e1       	ldi	r22, 0x14	; 20
    4956:	85 e7       	ldi	r24, 0x75	; 117
    4958:	99 e1       	ldi	r25, 0x19	; 25
    495a:	73 d1       	rcall	.+742    	; 0x4c42 <decode_hexadecimal_string_bytes>
    495c:	01 e0       	ldi	r16, 0x01	; 1
    495e:	10 e0       	ldi	r17, 0x00	; 0
    4960:	20 e0       	ldi	r18, 0x00	; 0
    4962:	30 e0       	ldi	r19, 0x00	; 0
    4964:	46 e1       	ldi	r20, 0x16	; 22
    4966:	50 e0       	ldi	r21, 0x00	; 0
    4968:	63 e7       	ldi	r22, 0x73	; 115
    496a:	79 e1       	ldi	r23, 0x19	; 25
    496c:	80 91 6d 19 	lds	r24, 0x196D	; 0x80196d <_downlinkMessageBuffer>
    4970:	90 91 6e 19 	lds	r25, 0x196E	; 0x80196e <_downlinkMessageBuffer+0x1>
    4974:	0e 94 1d 13 	call	0x263a	; 0x263a <xStreamBufferSend>
    4978:	8e e0       	ldi	r24, 0x0E	; 14
    497a:	03 c0       	rjmp	.+6      	; 0x4982 <lora_driver_sent_upload_message+0x18a>
    497c:	84 e1       	ldi	r24, 0x14	; 20
    497e:	01 c0       	rjmp	.+2      	; 0x4982 <lora_driver_sent_upload_message+0x18a>
    4980:	80 e0       	ldi	r24, 0x00	; 0
    4982:	0f 90       	pop	r0
    4984:	df 91       	pop	r29
    4986:	cf 91       	pop	r28
    4988:	1f 91       	pop	r17
    498a:	0f 91       	pop	r16
    498c:	08 95       	ret

0000498e <lora_driver_set_adaptive_data_rate>:
    498e:	81 30       	cpi	r24, 0x01	; 1
    4990:	19 f0       	breq	.+6      	; 0x4998 <lora_driver_set_adaptive_data_rate+0xa>
    4992:	67 ec       	ldi	r22, 0xC7	; 199
    4994:	75 e0       	ldi	r23, 0x05	; 5
    4996:	02 c0       	rjmp	.+4      	; 0x499c <lora_driver_set_adaptive_data_rate+0xe>
    4998:	60 ea       	ldi	r22, 0xA0	; 160
    499a:	76 e0       	ldi	r23, 0x06	; 6
    499c:	8b ec       	ldi	r24, 0xCB	; 203
    499e:	95 e0       	ldi	r25, 0x05	; 5
    49a0:	3a ce       	rjmp	.-908    	; 0x4616 <_upload_message_rc>
    49a2:	08 95       	ret

000049a4 <lora_driver_set_receive_delay>:
    49a4:	9f 93       	push	r25
    49a6:	8f 93       	push	r24
    49a8:	8c ef       	ldi	r24, 0xFC	; 252
    49aa:	95 e0       	ldi	r25, 0x05	; 5
    49ac:	9f 93       	push	r25
    49ae:	8f 93       	push	r24
    49b0:	8b ec       	ldi	r24, 0xCB	; 203
    49b2:	99 e1       	ldi	r25, 0x19	; 25
    49b4:	9f 93       	push	r25
    49b6:	8f 93       	push	r24
    49b8:	0e 94 aa 31 	call	0x6354	; 0x6354 <sprintf>
    49bc:	60 e0       	ldi	r22, 0x00	; 0
    49be:	70 e0       	ldi	r23, 0x00	; 0
    49c0:	8b ec       	ldi	r24, 0xCB	; 203
    49c2:	99 e1       	ldi	r25, 0x19	; 25
    49c4:	28 de       	rcall	.-944    	; 0x4616 <_upload_message_rc>
    49c6:	0f 90       	pop	r0
    49c8:	0f 90       	pop	r0
    49ca:	0f 90       	pop	r0
    49cc:	0f 90       	pop	r0
    49ce:	0f 90       	pop	r0
    49d0:	0f 90       	pop	r0
    49d2:	08 95       	ret

000049d4 <lora_driver_configure_to_eu868>:
    49d4:	2f 92       	push	r2
    49d6:	3f 92       	push	r3
    49d8:	4f 92       	push	r4
    49da:	5f 92       	push	r5
    49dc:	6f 92       	push	r6
    49de:	7f 92       	push	r7
    49e0:	8f 92       	push	r8
    49e2:	9f 92       	push	r9
    49e4:	af 92       	push	r10
    49e6:	bf 92       	push	r11
    49e8:	cf 92       	push	r12
    49ea:	df 92       	push	r13
    49ec:	ef 92       	push	r14
    49ee:	ff 92       	push	r15
    49f0:	0f 93       	push	r16
    49f2:	1f 93       	push	r17
    49f4:	cf 93       	push	r28
    49f6:	df 93       	push	r29
    49f8:	cd b7       	in	r28, 0x3d	; 61
    49fa:	de b7       	in	r29, 0x3e	; 62
    49fc:	a0 97       	sbiw	r28, 0x20	; 32
    49fe:	0f b6       	in	r0, 0x3f	; 63
    4a00:	f8 94       	cli
    4a02:	de bf       	out	0x3e, r29	; 62
    4a04:	0f be       	out	0x3f, r0	; 63
    4a06:	cd bf       	out	0x3d, r28	; 61
    4a08:	69 e2       	ldi	r22, 0x29	; 41
    4a0a:	76 e0       	ldi	r23, 0x06	; 6
    4a0c:	85 e3       	ldi	r24, 0x35	; 53
    4a0e:	96 e0       	ldi	r25, 0x06	; 6
    4a10:	33 dd       	rcall	.-1434   	; 0x4478 <_upload_message>
    4a12:	8c dd       	rcall	.-1256   	; 0x452c <_reply2return_code>
    4a14:	81 11       	cpse	r24, r1
    4a16:	a3 c0       	rjmp	.+326    	; 0x4b5e <lora_driver_configure_to_eu868+0x18a>
    4a18:	80 e2       	ldi	r24, 0x20	; 32
    4a1a:	e5 e2       	ldi	r30, 0x25	; 37
    4a1c:	f2 e0       	ldi	r31, 0x02	; 2
    4a1e:	de 01       	movw	r26, r28
    4a20:	11 96       	adiw	r26, 0x01	; 1
    4a22:	01 90       	ld	r0, Z+
    4a24:	0d 92       	st	X+, r0
    4a26:	8a 95       	dec	r24
    4a28:	e1 f7       	brne	.-8      	; 0x4a22 <lora_driver_configure_to_eu868+0x4e>
    4a2a:	9e 01       	movw	r18, r28
    4a2c:	2f 5f       	subi	r18, 0xFF	; 255
    4a2e:	3f 4f       	sbci	r19, 0xFF	; 255
    4a30:	69 01       	movw	r12, r18
    4a32:	e1 2c       	mov	r14, r1
    4a34:	f1 2c       	mov	r15, r1
    4a36:	0f 2e       	mov	r0, r31
    4a38:	f1 e4       	ldi	r31, 0x41	; 65
    4a3a:	af 2e       	mov	r10, r31
    4a3c:	f6 e0       	ldi	r31, 0x06	; 6
    4a3e:	bf 2e       	mov	r11, r31
    4a40:	f0 2d       	mov	r31, r0
    4a42:	0b ec       	ldi	r16, 0xCB	; 203
    4a44:	19 e1       	ldi	r17, 0x19	; 25
    4a46:	0f 2e       	mov	r0, r31
    4a48:	fa e5       	ldi	r31, 0x5A	; 90
    4a4a:	4f 2e       	mov	r4, r31
    4a4c:	f6 e0       	ldi	r31, 0x06	; 6
    4a4e:	5f 2e       	mov	r5, r31
    4a50:	f0 2d       	mov	r31, r0
    4a52:	0f 2e       	mov	r0, r31
    4a54:	f1 e7       	ldi	r31, 0x71	; 113
    4a56:	8f 2e       	mov	r8, r31
    4a58:	f6 e0       	ldi	r31, 0x06	; 6
    4a5a:	9f 2e       	mov	r9, r31
    4a5c:	f0 2d       	mov	r31, r0
    4a5e:	0f 2e       	mov	r0, r31
    4a60:	fb e8       	ldi	r31, 0x8B	; 139
    4a62:	6f 2e       	mov	r6, r31
    4a64:	f6 e0       	ldi	r31, 0x06	; 6
    4a66:	7f 2e       	mov	r7, r31
    4a68:	f0 2d       	mov	r31, r0
    4a6a:	3e 2c       	mov	r3, r14
    4a6c:	2f 2c       	mov	r2, r15
    4a6e:	ff 92       	push	r15
    4a70:	ef 92       	push	r14
    4a72:	bf 92       	push	r11
    4a74:	af 92       	push	r10
    4a76:	1f 93       	push	r17
    4a78:	0f 93       	push	r16
    4a7a:	0e 94 aa 31 	call	0x6354	; 0x6354 <sprintf>
    4a7e:	60 e0       	ldi	r22, 0x00	; 0
    4a80:	70 e0       	ldi	r23, 0x00	; 0
    4a82:	c8 01       	movw	r24, r16
    4a84:	f9 dc       	rcall	.-1550   	; 0x4478 <_upload_message>
    4a86:	52 dd       	rcall	.-1372   	; 0x452c <_reply2return_code>
    4a88:	0f 90       	pop	r0
    4a8a:	0f 90       	pop	r0
    4a8c:	0f 90       	pop	r0
    4a8e:	0f 90       	pop	r0
    4a90:	0f 90       	pop	r0
    4a92:	0f 90       	pop	r0
    4a94:	81 11       	cpse	r24, r1
    4a96:	63 c0       	rjmp	.+198    	; 0x4b5e <lora_driver_configure_to_eu868+0x18a>
    4a98:	32 e0       	ldi	r19, 0x02	; 2
    4a9a:	3e 15       	cp	r19, r14
    4a9c:	e8 f4       	brcc	.+58     	; 0x4ad8 <lora_driver_configure_to_eu868+0x104>
    4a9e:	f6 01       	movw	r30, r12
    4aa0:	83 81       	ldd	r24, Z+3	; 0x03
    4aa2:	8f 93       	push	r24
    4aa4:	82 81       	ldd	r24, Z+2	; 0x02
    4aa6:	8f 93       	push	r24
    4aa8:	81 81       	ldd	r24, Z+1	; 0x01
    4aaa:	8f 93       	push	r24
    4aac:	80 81       	ld	r24, Z
    4aae:	8f 93       	push	r24
    4ab0:	ff 92       	push	r15
    4ab2:	ef 92       	push	r14
    4ab4:	5f 92       	push	r5
    4ab6:	4f 92       	push	r4
    4ab8:	1f 93       	push	r17
    4aba:	0f 93       	push	r16
    4abc:	0e 94 aa 31 	call	0x6354	; 0x6354 <sprintf>
    4ac0:	60 e0       	ldi	r22, 0x00	; 0
    4ac2:	70 e0       	ldi	r23, 0x00	; 0
    4ac4:	c8 01       	movw	r24, r16
    4ac6:	d8 dc       	rcall	.-1616   	; 0x4478 <_upload_message>
    4ac8:	31 dd       	rcall	.-1438   	; 0x452c <_reply2return_code>
    4aca:	0f b6       	in	r0, 0x3f	; 63
    4acc:	f8 94       	cli
    4ace:	de bf       	out	0x3e, r29	; 62
    4ad0:	0f be       	out	0x3f, r0	; 63
    4ad2:	cd bf       	out	0x3d, r28	; 61
    4ad4:	81 11       	cpse	r24, r1
    4ad6:	43 c0       	rjmp	.+134    	; 0x4b5e <lora_driver_configure_to_eu868+0x18a>
    4ad8:	2f 92       	push	r2
    4ada:	3f 92       	push	r3
    4adc:	9f 92       	push	r9
    4ade:	8f 92       	push	r8
    4ae0:	1f 93       	push	r17
    4ae2:	0f 93       	push	r16
    4ae4:	0e 94 aa 31 	call	0x6354	; 0x6354 <sprintf>
    4ae8:	60 e0       	ldi	r22, 0x00	; 0
    4aea:	70 e0       	ldi	r23, 0x00	; 0
    4aec:	c8 01       	movw	r24, r16
    4aee:	c4 dc       	rcall	.-1656   	; 0x4478 <_upload_message>
    4af0:	1d dd       	rcall	.-1478   	; 0x452c <_reply2return_code>
    4af2:	0f 90       	pop	r0
    4af4:	0f 90       	pop	r0
    4af6:	0f 90       	pop	r0
    4af8:	0f 90       	pop	r0
    4afa:	0f 90       	pop	r0
    4afc:	0f 90       	pop	r0
    4afe:	81 11       	cpse	r24, r1
    4b00:	2e c0       	rjmp	.+92     	; 0x4b5e <lora_driver_configure_to_eu868+0x18a>
    4b02:	2f 92       	push	r2
    4b04:	3f 92       	push	r3
    4b06:	7f 92       	push	r7
    4b08:	6f 92       	push	r6
    4b0a:	1f 93       	push	r17
    4b0c:	0f 93       	push	r16
    4b0e:	0e 94 aa 31 	call	0x6354	; 0x6354 <sprintf>
    4b12:	60 e0       	ldi	r22, 0x00	; 0
    4b14:	70 e0       	ldi	r23, 0x00	; 0
    4b16:	c8 01       	movw	r24, r16
    4b18:	af dc       	rcall	.-1698   	; 0x4478 <_upload_message>
    4b1a:	08 dd       	rcall	.-1520   	; 0x452c <_reply2return_code>
    4b1c:	0f 90       	pop	r0
    4b1e:	0f 90       	pop	r0
    4b20:	0f 90       	pop	r0
    4b22:	0f 90       	pop	r0
    4b24:	0f 90       	pop	r0
    4b26:	0f 90       	pop	r0
    4b28:	81 11       	cpse	r24, r1
    4b2a:	19 c0       	rjmp	.+50     	; 0x4b5e <lora_driver_configure_to_eu868+0x18a>
    4b2c:	3f ef       	ldi	r19, 0xFF	; 255
    4b2e:	e3 1a       	sub	r14, r19
    4b30:	f3 0a       	sbc	r15, r19
    4b32:	84 e0       	ldi	r24, 0x04	; 4
    4b34:	c8 0e       	add	r12, r24
    4b36:	d1 1c       	adc	r13, r1
    4b38:	98 e0       	ldi	r25, 0x08	; 8
    4b3a:	e9 16       	cp	r14, r25
    4b3c:	f1 04       	cpc	r15, r1
    4b3e:	09 f0       	breq	.+2      	; 0x4b42 <lora_driver_configure_to_eu868+0x16e>
    4b40:	94 cf       	rjmp	.-216    	; 0x4a6a <lora_driver_configure_to_eu868+0x96>
    4b42:	60 e0       	ldi	r22, 0x00	; 0
    4b44:	70 e0       	ldi	r23, 0x00	; 0
    4b46:	83 ea       	ldi	r24, 0xA3	; 163
    4b48:	96 e0       	ldi	r25, 0x06	; 6
    4b4a:	96 dc       	rcall	.-1748   	; 0x4478 <_upload_message>
    4b4c:	ef dc       	rcall	.-1570   	; 0x452c <_reply2return_code>
    4b4e:	81 11       	cpse	r24, r1
    4b50:	06 c0       	rjmp	.+12     	; 0x4b5e <lora_driver_configure_to_eu868+0x18a>
    4b52:	60 e0       	ldi	r22, 0x00	; 0
    4b54:	70 e0       	ldi	r23, 0x00	; 0
    4b56:	84 eb       	ldi	r24, 0xB4	; 180
    4b58:	96 e0       	ldi	r25, 0x06	; 6
    4b5a:	8e dc       	rcall	.-1764   	; 0x4478 <_upload_message>
    4b5c:	e7 dc       	rcall	.-1586   	; 0x452c <_reply2return_code>
    4b5e:	a0 96       	adiw	r28, 0x20	; 32
    4b60:	0f b6       	in	r0, 0x3f	; 63
    4b62:	f8 94       	cli
    4b64:	de bf       	out	0x3e, r29	; 62
    4b66:	0f be       	out	0x3f, r0	; 63
    4b68:	cd bf       	out	0x3d, r28	; 61
    4b6a:	df 91       	pop	r29
    4b6c:	cf 91       	pop	r28
    4b6e:	1f 91       	pop	r17
    4b70:	0f 91       	pop	r16
    4b72:	ff 90       	pop	r15
    4b74:	ef 90       	pop	r14
    4b76:	df 90       	pop	r13
    4b78:	cf 90       	pop	r12
    4b7a:	bf 90       	pop	r11
    4b7c:	af 90       	pop	r10
    4b7e:	9f 90       	pop	r9
    4b80:	8f 90       	pop	r8
    4b82:	7f 90       	pop	r7
    4b84:	6f 90       	pop	r6
    4b86:	5f 90       	pop	r5
    4b88:	4f 90       	pop	r4
    4b8a:	3f 90       	pop	r3
    4b8c:	2f 90       	pop	r2
    4b8e:	08 95       	ret

00004b90 <lora_driver_set_otaa_identity>:
    4b90:	ef 92       	push	r14
    4b92:	ff 92       	push	r15
    4b94:	0f 93       	push	r16
    4b96:	1f 93       	push	r17
    4b98:	cf 93       	push	r28
    4b9a:	df 93       	push	r29
    4b9c:	ec 01       	movw	r28, r24
    4b9e:	8b 01       	movw	r16, r22
    4ba0:	7a 01       	movw	r14, r20
    4ba2:	81 e0       	ldi	r24, 0x01	; 1
    4ba4:	f4 de       	rcall	.-536    	; 0x498e <lora_driver_set_adaptive_data_rate>
    4ba6:	81 11       	cpse	r24, r1
    4ba8:	0d c0       	rjmp	.+26     	; 0x4bc4 <lora_driver_set_otaa_identity+0x34>
    4baa:	ce 01       	movw	r24, r28
    4bac:	d4 dd       	rcall	.-1112   	; 0x4756 <lora_driver_set_application_identifier>
    4bae:	81 11       	cpse	r24, r1
    4bb0:	09 c0       	rjmp	.+18     	; 0x4bc4 <lora_driver_set_otaa_identity+0x34>
    4bb2:	c8 01       	movw	r24, r16
    4bb4:	e1 dd       	rcall	.-1086   	; 0x4778 <lora_driver_set_application_key>
    4bb6:	81 11       	cpse	r24, r1
    4bb8:	05 c0       	rjmp	.+10     	; 0x4bc4 <lora_driver_set_otaa_identity+0x34>
    4bba:	c7 01       	movw	r24, r14
    4bbc:	bb dd       	rcall	.-1162   	; 0x4734 <lora_driver_set_device_identifier>
    4bbe:	81 11       	cpse	r24, r1
    4bc0:	01 c0       	rjmp	.+2      	; 0x4bc4 <lora_driver_set_otaa_identity+0x34>
    4bc2:	eb dd       	rcall	.-1066   	; 0x479a <lora_driver_save_mac>
    4bc4:	df 91       	pop	r29
    4bc6:	cf 91       	pop	r28
    4bc8:	1f 91       	pop	r17
    4bca:	0f 91       	pop	r16
    4bcc:	ff 90       	pop	r15
    4bce:	ef 90       	pop	r14
    4bd0:	08 95       	ret

00004bd2 <lora_driver_map_return_code_to_text>:
    4bd2:	90 e0       	ldi	r25, 0x00	; 0
    4bd4:	fc 01       	movw	r30, r24
    4bd6:	ee 0f       	add	r30, r30
    4bd8:	ff 1f       	adc	r31, r31
    4bda:	8e 0f       	add	r24, r30
    4bdc:	9f 1f       	adc	r25, r31
    4bde:	fc 01       	movw	r30, r24
    4be0:	e3 58       	subi	r30, 0x83	; 131
    4be2:	f8 4f       	sbci	r31, 0xF8	; 248
    4be4:	81 81       	ldd	r24, Z+1	; 0x01
    4be6:	92 81       	ldd	r25, Z+2	; 0x02
    4be8:	08 95       	ret

00004bea <decode_port_no>:
    4bea:	dc 01       	movw	r26, r24
    4bec:	00 97       	sbiw	r24, 0x00	; 0
    4bee:	29 f1       	breq	.+74     	; 0x4c3a <decode_port_no+0x50>
    4bf0:	fb 01       	movw	r30, r22
    4bf2:	20 81       	ld	r18, Z
    4bf4:	fc 01       	movw	r30, r24
    4bf6:	01 90       	ld	r0, Z+
    4bf8:	00 20       	and	r0, r0
    4bfa:	e9 f7       	brne	.-6      	; 0x4bf6 <decode_port_no+0xc>
    4bfc:	31 97       	sbiw	r30, 0x01	; 1
    4bfe:	e8 1b       	sub	r30, r24
    4c00:	f9 0b       	sbc	r31, r25
    4c02:	82 2f       	mov	r24, r18
    4c04:	90 e0       	ldi	r25, 0x00	; 0
    4c06:	e8 17       	cp	r30, r24
    4c08:	f9 07       	cpc	r31, r25
    4c0a:	c8 f0       	brcs	.+50     	; 0x4c3e <decode_port_no+0x54>
    4c0c:	80 e0       	ldi	r24, 0x00	; 0
    4c0e:	08 c0       	rjmp	.+16     	; 0x4c20 <decode_port_no+0x36>
    4c10:	88 0f       	add	r24, r24
    4c12:	38 2f       	mov	r19, r24
    4c14:	33 0f       	add	r19, r19
    4c16:	33 0f       	add	r19, r19
    4c18:	83 0f       	add	r24, r19
    4c1a:	80 53       	subi	r24, 0x30	; 48
    4c1c:	89 0f       	add	r24, r25
    4c1e:	2f 5f       	subi	r18, 0xFF	; 255
    4c20:	fd 01       	movw	r30, r26
    4c22:	e2 0f       	add	r30, r18
    4c24:	f1 1d       	adc	r31, r1
    4c26:	90 81       	ld	r25, Z
    4c28:	30 ed       	ldi	r19, 0xD0	; 208
    4c2a:	39 0f       	add	r19, r25
    4c2c:	3a 30       	cpi	r19, 0x0A	; 10
    4c2e:	10 f4       	brcc	.+4      	; 0x4c34 <decode_port_no+0x4a>
    4c30:	91 11       	cpse	r25, r1
    4c32:	ee cf       	rjmp	.-36     	; 0x4c10 <decode_port_no+0x26>
    4c34:	fb 01       	movw	r30, r22
    4c36:	20 83       	st	Z, r18
    4c38:	08 95       	ret
    4c3a:	80 e0       	ldi	r24, 0x00	; 0
    4c3c:	08 95       	ret
    4c3e:	80 e0       	ldi	r24, 0x00	; 0
    4c40:	08 95       	ret

00004c42 <decode_hexadecimal_string_bytes>:
    4c42:	0f 93       	push	r16
    4c44:	1f 93       	push	r17
    4c46:	cf 93       	push	r28
    4c48:	df 93       	push	r29
    4c4a:	dc 01       	movw	r26, r24
    4c4c:	ea 01       	movw	r28, r20
    4c4e:	20 97       	sbiw	r28, 0x00	; 0
    4c50:	e1 f1       	breq	.+120    	; 0x4cca <decode_hexadecimal_string_bytes+0x88>
    4c52:	fa 01       	movw	r30, r20
    4c54:	01 90       	ld	r0, Z+
    4c56:	00 20       	and	r0, r0
    4c58:	e9 f7       	brne	.-6      	; 0x4c54 <decode_hexadecimal_string_bytes+0x12>
    4c5a:	31 97       	sbiw	r30, 0x01	; 1
    4c5c:	e4 1b       	sub	r30, r20
    4c5e:	f5 0b       	sbc	r31, r21
    4c60:	32 97       	sbiw	r30, 0x02	; 2
    4c62:	10 f5       	brcc	.+68     	; 0x4ca8 <decode_hexadecimal_string_bytes+0x66>
    4c64:	32 c0       	rjmp	.+100    	; 0x4cca <decode_hexadecimal_string_bytes+0x88>
    4c66:	8d 01       	movw	r16, r26
    4c68:	04 0f       	add	r16, r20
    4c6a:	15 1f       	adc	r17, r21
    4c6c:	30 e0       	ldi	r19, 0x00	; 0
    4c6e:	ae 01       	movw	r20, r28
    4c70:	42 0f       	add	r20, r18
    4c72:	53 1f       	adc	r21, r19
    4c74:	fa 01       	movw	r30, r20
    4c76:	90 81       	ld	r25, Z
    4c78:	91 34       	cpi	r25, 0x41	; 65
    4c7a:	28 f0       	brcs	.+10     	; 0x4c86 <decode_hexadecimal_string_bytes+0x44>
    4c7c:	97 53       	subi	r25, 0x37	; 55
    4c7e:	59 2f       	mov	r21, r25
    4c80:	52 95       	swap	r21
    4c82:	50 7f       	andi	r21, 0xF0	; 240
    4c84:	03 c0       	rjmp	.+6      	; 0x4c8c <decode_hexadecimal_string_bytes+0x4a>
    4c86:	59 2f       	mov	r21, r25
    4c88:	52 95       	swap	r21
    4c8a:	50 7f       	andi	r21, 0xF0	; 240
    4c8c:	2c 0f       	add	r18, r28
    4c8e:	3d 1f       	adc	r19, r29
    4c90:	f9 01       	movw	r30, r18
    4c92:	91 81       	ldd	r25, Z+1	; 0x01
    4c94:	91 34       	cpi	r25, 0x41	; 65
    4c96:	10 f0       	brcs	.+4      	; 0x4c9c <decode_hexadecimal_string_bytes+0x5a>
    4c98:	97 53       	subi	r25, 0x37	; 55
    4c9a:	01 c0       	rjmp	.+2      	; 0x4c9e <decode_hexadecimal_string_bytes+0x5c>
    4c9c:	90 53       	subi	r25, 0x30	; 48
    4c9e:	95 0f       	add	r25, r21
    4ca0:	f8 01       	movw	r30, r16
    4ca2:	90 83       	st	Z, r25
    4ca4:	8f 5f       	subi	r24, 0xFF	; 255
    4ca6:	01 c0       	rjmp	.+2      	; 0x4caa <decode_hexadecimal_string_bytes+0x68>
    4ca8:	80 e0       	ldi	r24, 0x00	; 0
    4caa:	28 2f       	mov	r18, r24
    4cac:	22 0f       	add	r18, r18
    4cae:	48 2f       	mov	r20, r24
    4cb0:	50 e0       	ldi	r21, 0x00	; 0
    4cb2:	fe 01       	movw	r30, r28
    4cb4:	01 90       	ld	r0, Z+
    4cb6:	00 20       	and	r0, r0
    4cb8:	e9 f7       	brne	.-6      	; 0x4cb4 <decode_hexadecimal_string_bytes+0x72>
    4cba:	31 97       	sbiw	r30, 0x01	; 1
    4cbc:	ec 1b       	sub	r30, r28
    4cbe:	fd 0b       	sbc	r31, r29
    4cc0:	4e 17       	cp	r20, r30
    4cc2:	5f 07       	cpc	r21, r31
    4cc4:	10 f4       	brcc	.+4      	; 0x4cca <decode_hexadecimal_string_bytes+0x88>
    4cc6:	86 13       	cpse	r24, r22
    4cc8:	ce cf       	rjmp	.-100    	; 0x4c66 <decode_hexadecimal_string_bytes+0x24>
    4cca:	df 91       	pop	r29
    4ccc:	cf 91       	pop	r28
    4cce:	1f 91       	pop	r17
    4cd0:	0f 91       	pop	r16
    4cd2:	08 95       	ret

00004cd4 <reg_read_register>:
    4cd4:	fc 01       	movw	r30, r24
    4cd6:	80 81       	ld	r24, Z
    4cd8:	08 95       	ret

00004cda <reg_read_bit>:
    4cda:	fc 01       	movw	r30, r24
    4cdc:	20 81       	ld	r18, Z
    4cde:	81 e0       	ldi	r24, 0x01	; 1
    4ce0:	90 e0       	ldi	r25, 0x00	; 0
    4ce2:	02 c0       	rjmp	.+4      	; 0x4ce8 <reg_read_bit+0xe>
    4ce4:	88 0f       	add	r24, r24
    4ce6:	99 1f       	adc	r25, r25
    4ce8:	6a 95       	dec	r22
    4cea:	e2 f7       	brpl	.-8      	; 0x4ce4 <reg_read_bit+0xa>
    4cec:	82 23       	and	r24, r18
    4cee:	08 95       	ret

00004cf0 <reg_read_bits>:
    4cf0:	fc 01       	movw	r30, r24
    4cf2:	80 81       	ld	r24, Z
    4cf4:	86 23       	and	r24, r22
    4cf6:	08 95       	ret

00004cf8 <reg_set_register>:
    4cf8:	fc 01       	movw	r30, r24
    4cfa:	60 83       	st	Z, r22
    4cfc:	08 95       	ret

00004cfe <reg_clear_register>:
    4cfe:	fc 01       	movw	r30, r24
    4d00:	10 82       	st	Z, r1
    4d02:	08 95       	ret

00004d04 <reg_set_bit>:
    4d04:	fc 01       	movw	r30, r24
    4d06:	40 81       	ld	r20, Z
    4d08:	21 e0       	ldi	r18, 0x01	; 1
    4d0a:	30 e0       	ldi	r19, 0x00	; 0
    4d0c:	02 c0       	rjmp	.+4      	; 0x4d12 <reg_set_bit+0xe>
    4d0e:	22 0f       	add	r18, r18
    4d10:	33 1f       	adc	r19, r19
    4d12:	6a 95       	dec	r22
    4d14:	e2 f7       	brpl	.-8      	; 0x4d0e <reg_set_bit+0xa>
    4d16:	24 2b       	or	r18, r20
    4d18:	20 83       	st	Z, r18
    4d1a:	08 95       	ret

00004d1c <reg_set_bits>:
    4d1c:	fc 01       	movw	r30, r24
    4d1e:	20 81       	ld	r18, Z
    4d20:	62 2b       	or	r22, r18
    4d22:	60 83       	st	Z, r22
    4d24:	08 95       	ret

00004d26 <reg_toggle_bit>:
    4d26:	fc 01       	movw	r30, r24
    4d28:	40 81       	ld	r20, Z
    4d2a:	21 e0       	ldi	r18, 0x01	; 1
    4d2c:	30 e0       	ldi	r19, 0x00	; 0
    4d2e:	02 c0       	rjmp	.+4      	; 0x4d34 <reg_toggle_bit+0xe>
    4d30:	22 0f       	add	r18, r18
    4d32:	33 1f       	adc	r19, r19
    4d34:	6a 95       	dec	r22
    4d36:	e2 f7       	brpl	.-8      	; 0x4d30 <reg_toggle_bit+0xa>
    4d38:	24 27       	eor	r18, r20
    4d3a:	20 83       	st	Z, r18
    4d3c:	08 95       	ret

00004d3e <reg_toggle_bits>:
    4d3e:	fc 01       	movw	r30, r24
    4d40:	20 81       	ld	r18, Z
    4d42:	62 27       	eor	r22, r18
    4d44:	60 83       	st	Z, r22
    4d46:	08 95       	ret

00004d48 <reg_clear_bit>:
    4d48:	fc 01       	movw	r30, r24
    4d4a:	90 81       	ld	r25, Z
    4d4c:	21 e0       	ldi	r18, 0x01	; 1
    4d4e:	30 e0       	ldi	r19, 0x00	; 0
    4d50:	02 c0       	rjmp	.+4      	; 0x4d56 <reg_clear_bit+0xe>
    4d52:	22 0f       	add	r18, r18
    4d54:	33 1f       	adc	r19, r19
    4d56:	6a 95       	dec	r22
    4d58:	e2 f7       	brpl	.-8      	; 0x4d52 <reg_clear_bit+0xa>
    4d5a:	20 95       	com	r18
    4d5c:	29 23       	and	r18, r25
    4d5e:	20 83       	st	Z, r18
    4d60:	08 95       	ret

00004d62 <reg_clear_bits>:
    4d62:	fc 01       	movw	r30, r24
    4d64:	90 81       	ld	r25, Z
    4d66:	60 95       	com	r22
    4d68:	69 23       	and	r22, r25
    4d6a:	60 83       	st	Z, r22
    4d6c:	08 95       	ret

00004d6e <_serial_call_back>:
    4d6e:	80 91 28 1a 	lds	r24, 0x1A28	; 0x801a28 <crc_sum.1941>
    4d72:	86 0f       	add	r24, r22
    4d74:	80 93 28 1a 	sts	0x1A28, r24	; 0x801a28 <crc_sum.1941>
    4d78:	90 91 2b 1a 	lds	r25, 0x1A2B	; 0x801a2b <_mh_state>
    4d7c:	91 30       	cpi	r25, 0x01	; 1
    4d7e:	79 f0       	breq	.+30     	; 0x4d9e <_serial_call_back+0x30>
    4d80:	28 f0       	brcs	.+10     	; 0x4d8c <_serial_call_back+0x1e>
    4d82:	92 30       	cpi	r25, 0x02	; 2
    4d84:	a9 f0       	breq	.+42     	; 0x4db0 <_serial_call_back+0x42>
    4d86:	93 30       	cpi	r25, 0x03	; 3
    4d88:	19 f1       	breq	.+70     	; 0x4dd0 <_serial_call_back+0x62>
    4d8a:	08 95       	ret
    4d8c:	6f 3f       	cpi	r22, 0xFF	; 255
    4d8e:	09 f0       	breq	.+2      	; 0x4d92 <_serial_call_back+0x24>
    4d90:	48 c0       	rjmp	.+144    	; 0x4e22 <_serial_call_back+0xb4>
    4d92:	10 92 28 1a 	sts	0x1A28, r1	; 0x801a28 <crc_sum.1941>
    4d96:	81 e0       	ldi	r24, 0x01	; 1
    4d98:	80 93 2b 1a 	sts	0x1A2B, r24	; 0x801a2b <_mh_state>
    4d9c:	08 95       	ret
    4d9e:	66 38       	cpi	r22, 0x86	; 134
    4da0:	09 f0       	breq	.+2      	; 0x4da4 <_serial_call_back+0x36>
    4da2:	3f c0       	rjmp	.+126    	; 0x4e22 <_serial_call_back+0xb4>
    4da4:	10 92 27 1a 	sts	0x1A27, r1	; 0x801a27 <inDex.1939>
    4da8:	82 e0       	ldi	r24, 0x02	; 2
    4daa:	80 93 2b 1a 	sts	0x1A2B, r24	; 0x801a2b <_mh_state>
    4dae:	08 95       	ret
    4db0:	e0 91 27 1a 	lds	r30, 0x1A27	; 0x801a27 <inDex.1939>
    4db4:	81 e0       	ldi	r24, 0x01	; 1
    4db6:	8e 0f       	add	r24, r30
    4db8:	80 93 27 1a 	sts	0x1A27, r24	; 0x801a27 <inDex.1939>
    4dbc:	f0 e0       	ldi	r31, 0x00	; 0
    4dbe:	eb 5d       	subi	r30, 0xDB	; 219
    4dc0:	f5 4e       	sbci	r31, 0xE5	; 229
    4dc2:	60 83       	st	Z, r22
    4dc4:	82 30       	cpi	r24, 0x02	; 2
    4dc6:	69 f5       	brne	.+90     	; 0x4e22 <_serial_call_back+0xb4>
    4dc8:	83 e0       	ldi	r24, 0x03	; 3
    4dca:	80 93 2b 1a 	sts	0x1A2B, r24	; 0x801a2b <_mh_state>
    4dce:	08 95       	ret
    4dd0:	90 91 27 1a 	lds	r25, 0x1A27	; 0x801a27 <inDex.1939>
    4dd4:	21 e0       	ldi	r18, 0x01	; 1
    4dd6:	29 0f       	add	r18, r25
    4dd8:	20 93 27 1a 	sts	0x1A27, r18	; 0x801a27 <inDex.1939>
    4ddc:	96 30       	cpi	r25, 0x06	; 6
    4dde:	09 f5       	brne	.+66     	; 0x4e22 <_serial_call_back+0xb4>
    4de0:	81 11       	cpse	r24, r1
    4de2:	0e c0       	rjmp	.+28     	; 0x4e00 <_serial_call_back+0x92>
    4de4:	e5 e2       	ldi	r30, 0x25	; 37
    4de6:	fa e1       	ldi	r31, 0x1A	; 26
    4de8:	80 81       	ld	r24, Z
    4dea:	90 e0       	ldi	r25, 0x00	; 0
    4dec:	98 2f       	mov	r25, r24
    4dee:	88 27       	eor	r24, r24
    4df0:	21 81       	ldd	r18, Z+1	; 0x01
    4df2:	82 0f       	add	r24, r18
    4df4:	91 1d       	adc	r25, r1
    4df6:	90 93 2d 1a 	sts	0x1A2D, r25	; 0x801a2d <_ppm+0x1>
    4dfa:	80 93 2c 1a 	sts	0x1A2C, r24	; 0x801a2c <_ppm>
    4dfe:	04 c0       	rjmp	.+8      	; 0x4e08 <_serial_call_back+0x9a>
    4e00:	10 92 2d 1a 	sts	0x1A2D, r1	; 0x801a2d <_ppm+0x1>
    4e04:	10 92 2c 1a 	sts	0x1A2C, r1	; 0x801a2c <_ppm>
    4e08:	10 92 2b 1a 	sts	0x1A2B, r1	; 0x801a2b <_mh_state>
    4e0c:	e0 91 29 1a 	lds	r30, 0x1A29	; 0x801a29 <_app_call_back>
    4e10:	f0 91 2a 1a 	lds	r31, 0x1A2A	; 0x801a2a <_app_call_back+0x1>
    4e14:	30 97       	sbiw	r30, 0x00	; 0
    4e16:	29 f0       	breq	.+10     	; 0x4e22 <_serial_call_back+0xb4>
    4e18:	80 91 2c 1a 	lds	r24, 0x1A2C	; 0x801a2c <_ppm>
    4e1c:	90 91 2d 1a 	lds	r25, 0x1A2D	; 0x801a2d <_ppm+0x1>
    4e20:	19 95       	eicall
    4e22:	08 95       	ret

00004e24 <mh_z19_create>:
    4e24:	8f 92       	push	r8
    4e26:	9f 92       	push	r9
    4e28:	af 92       	push	r10
    4e2a:	cf 92       	push	r12
    4e2c:	ef 92       	push	r14
    4e2e:	0f 93       	push	r16
    4e30:	cf 93       	push	r28
    4e32:	df 93       	push	r29
    4e34:	eb 01       	movw	r28, r22
    4e36:	0f 2e       	mov	r0, r31
    4e38:	f7 eb       	ldi	r31, 0xB7	; 183
    4e3a:	8f 2e       	mov	r8, r31
    4e3c:	f6 e2       	ldi	r31, 0x26	; 38
    4e3e:	9f 2e       	mov	r9, r31
    4e40:	f0 2d       	mov	r31, r0
    4e42:	68 94       	set
    4e44:	aa 24       	eor	r10, r10
    4e46:	a4 f8       	bld	r10, 4
    4e48:	68 94       	set
    4e4a:	cc 24       	eor	r12, r12
    4e4c:	c4 f8       	bld	r12, 4
    4e4e:	e1 2c       	mov	r14, r1
    4e50:	00 e0       	ldi	r16, 0x00	; 0
    4e52:	23 e0       	ldi	r18, 0x03	; 3
    4e54:	40 e8       	ldi	r20, 0x80	; 128
    4e56:	55 e2       	ldi	r21, 0x25	; 37
    4e58:	60 e0       	ldi	r22, 0x00	; 0
    4e5a:	70 e0       	ldi	r23, 0x00	; 0
    4e5c:	85 d0       	rcall	.+266    	; 0x4f68 <serial_new_instance>
    4e5e:	90 93 2f 1a 	sts	0x1A2F, r25	; 0x801a2f <_serial+0x1>
    4e62:	80 93 2e 1a 	sts	0x1A2E, r24	; 0x801a2e <_serial>
    4e66:	d0 93 2a 1a 	sts	0x1A2A, r29	; 0x801a2a <_app_call_back+0x1>
    4e6a:	c0 93 29 1a 	sts	0x1A29, r28	; 0x801a29 <_app_call_back>
    4e6e:	df 91       	pop	r29
    4e70:	cf 91       	pop	r28
    4e72:	0f 91       	pop	r16
    4e74:	ef 90       	pop	r14
    4e76:	cf 90       	pop	r12
    4e78:	af 90       	pop	r10
    4e7a:	9f 90       	pop	r9
    4e7c:	8f 90       	pop	r8
    4e7e:	08 95       	ret

00004e80 <mh_z19_take_meassuring>:
    4e80:	cf 93       	push	r28
    4e82:	df 93       	push	r29
    4e84:	cd b7       	in	r28, 0x3d	; 61
    4e86:	de b7       	in	r29, 0x3e	; 62
    4e88:	29 97       	sbiw	r28, 0x09	; 9
    4e8a:	0f b6       	in	r0, 0x3f	; 63
    4e8c:	f8 94       	cli
    4e8e:	de bf       	out	0x3e, r29	; 62
    4e90:	0f be       	out	0x3f, r0	; 63
    4e92:	cd bf       	out	0x3d, r28	; 61
    4e94:	89 e0       	ldi	r24, 0x09	; 9
    4e96:	e5 e4       	ldi	r30, 0x45	; 69
    4e98:	f2 e0       	ldi	r31, 0x02	; 2
    4e9a:	9e 01       	movw	r18, r28
    4e9c:	2f 5f       	subi	r18, 0xFF	; 255
    4e9e:	3f 4f       	sbci	r19, 0xFF	; 255
    4ea0:	d9 01       	movw	r26, r18
    4ea2:	01 90       	ld	r0, Z+
    4ea4:	0d 92       	st	X+, r0
    4ea6:	8a 95       	dec	r24
    4ea8:	e1 f7       	brne	.-8      	; 0x4ea2 <mh_z19_take_meassuring+0x22>
    4eaa:	10 92 2d 1a 	sts	0x1A2D, r1	; 0x801a2d <_ppm+0x1>
    4eae:	10 92 2c 1a 	sts	0x1A2C, r1	; 0x801a2c <_ppm>
    4eb2:	80 91 2e 1a 	lds	r24, 0x1A2E	; 0x801a2e <_serial>
    4eb6:	90 91 2f 1a 	lds	r25, 0x1A2F	; 0x801a2f <_serial+0x1>
    4eba:	00 97       	sbiw	r24, 0x00	; 0
    4ebc:	31 f0       	breq	.+12     	; 0x4eca <mh_z19_take_meassuring+0x4a>
    4ebe:	42 2f       	mov	r20, r18
    4ec0:	53 2f       	mov	r21, r19
    4ec2:	69 e0       	ldi	r22, 0x09	; 9
    4ec4:	0c d1       	rcall	.+536    	; 0x50de <serial_send_bytes>
    4ec6:	80 e0       	ldi	r24, 0x00	; 0
    4ec8:	01 c0       	rjmp	.+2      	; 0x4ecc <mh_z19_take_meassuring+0x4c>
    4eca:	82 e0       	ldi	r24, 0x02	; 2
    4ecc:	29 96       	adiw	r28, 0x09	; 9
    4ece:	0f b6       	in	r0, 0x3f	; 63
    4ed0:	f8 94       	cli
    4ed2:	de bf       	out	0x3e, r29	; 62
    4ed4:	0f be       	out	0x3f, r0	; 63
    4ed6:	cd bf       	out	0x3d, r28	; 61
    4ed8:	df 91       	pop	r29
    4eda:	cf 91       	pop	r28
    4edc:	08 95       	ret

00004ede <mh_z19_get_co2_ppm>:
    4ede:	20 91 2c 1a 	lds	r18, 0x1A2C	; 0x801a2c <_ppm>
    4ee2:	30 91 2d 1a 	lds	r19, 0x1A2D	; 0x801a2d <_ppm+0x1>
    4ee6:	21 15       	cp	r18, r1
    4ee8:	31 05       	cpc	r19, r1
    4eea:	29 f4       	brne	.+10     	; 0x4ef6 <mh_z19_get_co2_ppm+0x18>
    4eec:	fc 01       	movw	r30, r24
    4eee:	11 82       	std	Z+1, r1	; 0x01
    4ef0:	10 82       	st	Z, r1
    4ef2:	81 e0       	ldi	r24, 0x01	; 1
    4ef4:	08 95       	ret
    4ef6:	fc 01       	movw	r30, r24
    4ef8:	31 83       	std	Z+1, r19	; 0x01
    4efa:	20 83       	st	Z, r18
    4efc:	80 e0       	ldi	r24, 0x00	; 0
    4efe:	08 95       	ret

00004f00 <rcServoSet>:
    4f00:	65 36       	cpi	r22, 0x65	; 101
    4f02:	0c f0       	brlt	.+2      	; 0x4f06 <rcServoSet+0x6>
    4f04:	64 e6       	ldi	r22, 0x64	; 100
    4f06:	6c 39       	cpi	r22, 0x9C	; 156
    4f08:	0c f4       	brge	.+2      	; 0x4f0c <rcServoSet+0xc>
    4f0a:	6c e9       	ldi	r22, 0x9C	; 156
    4f0c:	96 ef       	ldi	r25, 0xF6	; 246
    4f0e:	69 02       	muls	r22, r25
    4f10:	b0 01       	movw	r22, r0
    4f12:	11 24       	eor	r1, r1
    4f14:	68 54       	subi	r22, 0x48	; 72
    4f16:	74 4f       	sbci	r23, 0xF4	; 244
    4f18:	81 11       	cpse	r24, r1
    4f1a:	05 c0       	rjmp	.+10     	; 0x4f26 <rcServoSet+0x26>
    4f1c:	70 93 29 01 	sts	0x0129, r23	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
    4f20:	60 93 28 01 	sts	0x0128, r22	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
    4f24:	08 95       	ret
    4f26:	70 93 2b 01 	sts	0x012B, r23	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
    4f2a:	60 93 2a 01 	sts	0x012A, r22	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
    4f2e:	08 95       	ret

00004f30 <rcServoCreate>:
    4f30:	ea e0       	ldi	r30, 0x0A	; 10
    4f32:	f1 e0       	ldi	r31, 0x01	; 1
    4f34:	80 81       	ld	r24, Z
    4f36:	88 61       	ori	r24, 0x18	; 24
    4f38:	80 83       	st	Z, r24
    4f3a:	8f e3       	ldi	r24, 0x3F	; 63
    4f3c:	9c e9       	ldi	r25, 0x9C	; 156
    4f3e:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__TEXT_REGION_LENGTH__+0x700127>
    4f42:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__TEXT_REGION_LENGTH__+0x700126>
    4f46:	60 e0       	ldi	r22, 0x00	; 0
    4f48:	80 e0       	ldi	r24, 0x00	; 0
    4f4a:	da df       	rcall	.-76     	; 0x4f00 <rcServoSet>
    4f4c:	60 e0       	ldi	r22, 0x00	; 0
    4f4e:	81 e0       	ldi	r24, 0x01	; 1
    4f50:	d7 df       	rcall	.-82     	; 0x4f00 <rcServoSet>
    4f52:	e0 e2       	ldi	r30, 0x20	; 32
    4f54:	f1 e0       	ldi	r31, 0x01	; 1
    4f56:	80 81       	ld	r24, Z
    4f58:	82 6a       	ori	r24, 0xA2	; 162
    4f5a:	80 83       	st	Z, r24
    4f5c:	e1 e2       	ldi	r30, 0x21	; 33
    4f5e:	f1 e0       	ldi	r31, 0x01	; 1
    4f60:	80 81       	ld	r24, Z
    4f62:	8a 61       	ori	r24, 0x1A	; 26
    4f64:	80 83       	st	Z, r24
    4f66:	08 95       	ret

00004f68 <serial_new_instance>:
    4f68:	2f 92       	push	r2
    4f6a:	3f 92       	push	r3
    4f6c:	4f 92       	push	r4
    4f6e:	5f 92       	push	r5
    4f70:	6f 92       	push	r6
    4f72:	7f 92       	push	r7
    4f74:	8f 92       	push	r8
    4f76:	9f 92       	push	r9
    4f78:	af 92       	push	r10
    4f7a:	cf 92       	push	r12
    4f7c:	ef 92       	push	r14
    4f7e:	ff 92       	push	r15
    4f80:	0f 93       	push	r16
    4f82:	1f 93       	push	r17
    4f84:	cf 93       	push	r28
    4f86:	df 93       	push	r29
    4f88:	cd b7       	in	r28, 0x3d	; 61
    4f8a:	de b7       	in	r29, 0x3e	; 62
    4f8c:	f8 2e       	mov	r15, r24
    4f8e:	2a 01       	movw	r4, r20
    4f90:	3b 01       	movw	r6, r22
    4f92:	88 e0       	ldi	r24, 0x08	; 8
    4f94:	90 e0       	ldi	r25, 0x00	; 0
    4f96:	c2 d7       	rcall	.+3972   	; 0x5f1c <malloc>
    4f98:	8c 01       	movw	r16, r24
    4f9a:	8f 2d       	mov	r24, r15
    4f9c:	90 e0       	ldi	r25, 0x00	; 0
    4f9e:	88 0f       	add	r24, r24
    4fa0:	99 1f       	adc	r25, r25
    4fa2:	fc 01       	movw	r30, r24
    4fa4:	e0 5d       	subi	r30, 0xD0	; 208
    4fa6:	f5 4e       	sbci	r31, 0xE5	; 229
    4fa8:	11 83       	std	Z+1, r17	; 0x01
    4faa:	00 83       	st	Z, r16
    4fac:	fc 01       	movw	r30, r24
    4fae:	e2 5f       	subi	r30, 0xF2	; 242
    4fb0:	fd 4f       	sbci	r31, 0xFD	; 253
    4fb2:	80 81       	ld	r24, Z
    4fb4:	91 81       	ldd	r25, Z+1	; 0x01
    4fb6:	d8 01       	movw	r26, r16
    4fb8:	8d 93       	st	X+, r24
    4fba:	9c 93       	st	X, r25
    4fbc:	6c 2d       	mov	r22, r12
    4fbe:	70 e0       	ldi	r23, 0x00	; 0
    4fc0:	84 e0       	ldi	r24, 0x04	; 4
    4fc2:	90 e0       	ldi	r25, 0x00	; 0
    4fc4:	91 d7       	rcall	.+3874   	; 0x5ee8 <calloc>
    4fc6:	1c 01       	movw	r2, r24
    4fc8:	61 e0       	ldi	r22, 0x01	; 1
    4fca:	70 e0       	ldi	r23, 0x00	; 0
    4fcc:	86 e0       	ldi	r24, 0x06	; 6
    4fce:	90 e0       	ldi	r25, 0x00	; 0
    4fd0:	8b d7       	rcall	.+3862   	; 0x5ee8 <calloc>
    4fd2:	7c 01       	movw	r14, r24
    4fd4:	4c 2d       	mov	r20, r12
    4fd6:	b1 01       	movw	r22, r2
    4fd8:	2b d5       	rcall	.+2646   	; 0x5a30 <fifo_init>
    4fda:	f8 01       	movw	r30, r16
    4fdc:	f5 82       	std	Z+5, r15	; 0x05
    4fde:	e4 82       	std	Z+4, r14	; 0x04
    4fe0:	6a 2d       	mov	r22, r10
    4fe2:	70 e0       	ldi	r23, 0x00	; 0
    4fe4:	84 e0       	ldi	r24, 0x04	; 4
    4fe6:	90 e0       	ldi	r25, 0x00	; 0
    4fe8:	7f d7       	rcall	.+3838   	; 0x5ee8 <calloc>
    4fea:	1c 01       	movw	r2, r24
    4fec:	61 e0       	ldi	r22, 0x01	; 1
    4fee:	70 e0       	ldi	r23, 0x00	; 0
    4ff0:	86 e0       	ldi	r24, 0x06	; 6
    4ff2:	90 e0       	ldi	r25, 0x00	; 0
    4ff4:	79 d7       	rcall	.+3826   	; 0x5ee8 <calloc>
    4ff6:	7c 01       	movw	r14, r24
    4ff8:	4a 2d       	mov	r20, r10
    4ffa:	b1 01       	movw	r22, r2
    4ffc:	19 d5       	rcall	.+2610   	; 0x5a30 <fifo_init>
    4ffe:	d8 01       	movw	r26, r16
    5000:	13 96       	adiw	r26, 0x03	; 3
    5002:	fc 92       	st	X, r15
    5004:	ee 92       	st	-X, r14
    5006:	12 97       	sbiw	r26, 0x02	; 2
    5008:	17 96       	adiw	r26, 0x07	; 7
    500a:	9c 92       	st	X, r9
    500c:	8e 92       	st	-X, r8
    500e:	16 97       	sbiw	r26, 0x06	; 6
    5010:	ff b6       	in	r15, 0x3f	; 63
    5012:	f8 94       	cli
    5014:	ed 91       	ld	r30, X+
    5016:	fc 91       	ld	r31, X
    5018:	11 97       	sbiw	r26, 0x01	; 1
    501a:	36 97       	sbiw	r30, 0x06	; 6
    501c:	80 81       	ld	r24, Z
    501e:	82 60       	ori	r24, 0x02	; 2
    5020:	80 83       	st	Z, r24
    5022:	8d 90       	ld	r8, X+
    5024:	9c 90       	ld	r9, X
    5026:	c3 01       	movw	r24, r6
    5028:	b2 01       	movw	r22, r4
    502a:	1c d6       	rcall	.+3128   	; 0x5c64 <__floatunsisf>
    502c:	20 e0       	ldi	r18, 0x00	; 0
    502e:	30 e0       	ldi	r19, 0x00	; 0
    5030:	40 e0       	ldi	r20, 0x00	; 0
    5032:	51 e4       	ldi	r21, 0x41	; 65
    5034:	a5 d6       	rcall	.+3402   	; 0x5d80 <__mulsf3>
    5036:	9b 01       	movw	r18, r22
    5038:	ac 01       	movw	r20, r24
    503a:	60 e0       	ldi	r22, 0x00	; 0
    503c:	74 e2       	ldi	r23, 0x24	; 36
    503e:	84 e7       	ldi	r24, 0x74	; 116
    5040:	9b e4       	ldi	r25, 0x4B	; 75
    5042:	77 d5       	rcall	.+2798   	; 0x5b32 <__divsf3>
    5044:	20 e0       	ldi	r18, 0x00	; 0
    5046:	30 e0       	ldi	r19, 0x00	; 0
    5048:	40 e8       	ldi	r20, 0x80	; 128
    504a:	5f e3       	ldi	r21, 0x3F	; 63
    504c:	0d d5       	rcall	.+2586   	; 0x5a68 <__subsf3>
    504e:	de d5       	rcall	.+3004   	; 0x5c0c <__fixunssfsi>
    5050:	f4 01       	movw	r30, r8
    5052:	32 97       	sbiw	r30, 0x02	; 2
    5054:	60 83       	st	Z, r22
    5056:	d8 01       	movw	r26, r16
    5058:	ed 91       	ld	r30, X+
    505a:	fc 91       	ld	r31, X
    505c:	11 97       	sbiw	r26, 0x01	; 1
    505e:	35 97       	sbiw	r30, 0x05	; 5
    5060:	88 e9       	ldi	r24, 0x98	; 152
    5062:	80 83       	st	Z, r24
    5064:	ed 91       	ld	r30, X+
    5066:	fc 91       	ld	r31, X
    5068:	34 97       	sbiw	r30, 0x04	; 4
    506a:	86 e0       	ldi	r24, 0x06	; 6
    506c:	80 83       	st	Z, r24
    506e:	ff be       	out	0x3f, r15	; 63
    5070:	c8 01       	movw	r24, r16
    5072:	df 91       	pop	r29
    5074:	cf 91       	pop	r28
    5076:	1f 91       	pop	r17
    5078:	0f 91       	pop	r16
    507a:	ff 90       	pop	r15
    507c:	ef 90       	pop	r14
    507e:	cf 90       	pop	r12
    5080:	af 90       	pop	r10
    5082:	9f 90       	pop	r9
    5084:	8f 90       	pop	r8
    5086:	7f 90       	pop	r7
    5088:	6f 90       	pop	r6
    508a:	5f 90       	pop	r5
    508c:	4f 90       	pop	r4
    508e:	3f 90       	pop	r3
    5090:	2f 90       	pop	r2
    5092:	08 95       	ret

00005094 <serial_send_byte>:
    5094:	cf 93       	push	r28
    5096:	df 93       	push	r29
    5098:	ec 01       	movw	r28, r24
    509a:	ea 81       	ldd	r30, Y+2	; 0x02
    509c:	fb 81       	ldd	r31, Y+3	; 0x03
    509e:	93 81       	ldd	r25, Z+3	; 0x03
    50a0:	82 81       	ldd	r24, Z+2	; 0x02
    50a2:	25 81       	ldd	r18, Z+5	; 0x05
    50a4:	98 1b       	sub	r25, r24
    50a6:	92 23       	and	r25, r18
    50a8:	84 81       	ldd	r24, Z+4	; 0x04
    50aa:	98 17       	cp	r25, r24
    50ac:	a1 f0       	breq	.+40     	; 0x50d6 <serial_send_byte+0x42>
    50ae:	93 81       	ldd	r25, Z+3	; 0x03
    50b0:	26 95       	lsr	r18
    50b2:	29 23       	and	r18, r25
    50b4:	a0 81       	ld	r26, Z
    50b6:	b1 81       	ldd	r27, Z+1	; 0x01
    50b8:	a2 0f       	add	r26, r18
    50ba:	b1 1d       	adc	r27, r1
    50bc:	6c 93       	st	X, r22
    50be:	9f 5f       	subi	r25, 0xFF	; 255
    50c0:	25 81       	ldd	r18, Z+5	; 0x05
    50c2:	92 23       	and	r25, r18
    50c4:	93 83       	std	Z+3, r25	; 0x03
    50c6:	e8 81       	ld	r30, Y
    50c8:	f9 81       	ldd	r31, Y+1	; 0x01
    50ca:	35 97       	sbiw	r30, 0x05	; 5
    50cc:	80 81       	ld	r24, Z
    50ce:	80 62       	ori	r24, 0x20	; 32
    50d0:	80 83       	st	Z, r24
    50d2:	80 e0       	ldi	r24, 0x00	; 0
    50d4:	01 c0       	rjmp	.+2      	; 0x50d8 <serial_send_byte+0x44>
    50d6:	82 e0       	ldi	r24, 0x02	; 2
    50d8:	df 91       	pop	r29
    50da:	cf 91       	pop	r28
    50dc:	08 95       	ret

000050de <serial_send_bytes>:
    50de:	ef 92       	push	r14
    50e0:	ff 92       	push	r15
    50e2:	0f 93       	push	r16
    50e4:	1f 93       	push	r17
    50e6:	cf 93       	push	r28
    50e8:	df 93       	push	r29
    50ea:	7c 01       	movw	r14, r24
    50ec:	dc 01       	movw	r26, r24
    50ee:	12 96       	adiw	r26, 0x02	; 2
    50f0:	ed 91       	ld	r30, X+
    50f2:	fc 91       	ld	r31, X
    50f4:	13 97       	sbiw	r26, 0x03	; 3
    50f6:	93 81       	ldd	r25, Z+3	; 0x03
    50f8:	82 81       	ldd	r24, Z+2	; 0x02
    50fa:	98 1b       	sub	r25, r24
    50fc:	85 81       	ldd	r24, Z+5	; 0x05
    50fe:	98 23       	and	r25, r24
    5100:	84 81       	ldd	r24, Z+4	; 0x04
    5102:	89 1b       	sub	r24, r25
    5104:	86 17       	cp	r24, r22
    5106:	98 f1       	brcs	.+102    	; 0x516e <serial_send_bytes+0x90>
    5108:	66 23       	and	r22, r22
    510a:	41 f1       	breq	.+80     	; 0x515c <serial_send_bytes+0x7e>
    510c:	84 2f       	mov	r24, r20
    510e:	95 2f       	mov	r25, r21
    5110:	dc 01       	movw	r26, r24
    5112:	61 50       	subi	r22, 0x01	; 1
    5114:	46 2f       	mov	r20, r22
    5116:	50 e0       	ldi	r21, 0x00	; 0
    5118:	4f 5f       	subi	r20, 0xFF	; 255
    511a:	5f 4f       	sbci	r21, 0xFF	; 255
    511c:	48 0f       	add	r20, r24
    511e:	59 1f       	adc	r21, r25
    5120:	e7 01       	movw	r28, r14
    5122:	ea 81       	ldd	r30, Y+2	; 0x02
    5124:	fb 81       	ldd	r31, Y+3	; 0x03
    5126:	93 81       	ldd	r25, Z+3	; 0x03
    5128:	82 81       	ldd	r24, Z+2	; 0x02
    512a:	25 81       	ldd	r18, Z+5	; 0x05
    512c:	98 1b       	sub	r25, r24
    512e:	92 23       	and	r25, r18
    5130:	84 81       	ldd	r24, Z+4	; 0x04
    5132:	98 17       	cp	r25, r24
    5134:	79 f0       	breq	.+30     	; 0x5154 <serial_send_bytes+0x76>
    5136:	8c 91       	ld	r24, X
    5138:	93 81       	ldd	r25, Z+3	; 0x03
    513a:	26 95       	lsr	r18
    513c:	29 23       	and	r18, r25
    513e:	60 81       	ld	r22, Z
    5140:	71 81       	ldd	r23, Z+1	; 0x01
    5142:	8b 01       	movw	r16, r22
    5144:	02 0f       	add	r16, r18
    5146:	11 1d       	adc	r17, r1
    5148:	e8 01       	movw	r28, r16
    514a:	88 83       	st	Y, r24
    514c:	9f 5f       	subi	r25, 0xFF	; 255
    514e:	85 81       	ldd	r24, Z+5	; 0x05
    5150:	98 23       	and	r25, r24
    5152:	93 83       	std	Z+3, r25	; 0x03
    5154:	11 96       	adiw	r26, 0x01	; 1
    5156:	a4 17       	cp	r26, r20
    5158:	b5 07       	cpc	r27, r21
    515a:	11 f7       	brne	.-60     	; 0x5120 <serial_send_bytes+0x42>
    515c:	d7 01       	movw	r26, r14
    515e:	ed 91       	ld	r30, X+
    5160:	fc 91       	ld	r31, X
    5162:	35 97       	sbiw	r30, 0x05	; 5
    5164:	80 81       	ld	r24, Z
    5166:	80 62       	ori	r24, 0x20	; 32
    5168:	80 83       	st	Z, r24
    516a:	80 e0       	ldi	r24, 0x00	; 0
    516c:	01 c0       	rjmp	.+2      	; 0x5170 <serial_send_bytes+0x92>
    516e:	82 e0       	ldi	r24, 0x02	; 2
    5170:	df 91       	pop	r29
    5172:	cf 91       	pop	r28
    5174:	1f 91       	pop	r17
    5176:	0f 91       	pop	r16
    5178:	ff 90       	pop	r15
    517a:	ef 90       	pop	r14
    517c:	08 95       	ret

0000517e <serial_get_byte>:
    517e:	dc 01       	movw	r26, r24
    5180:	14 96       	adiw	r26, 0x04	; 4
    5182:	ed 91       	ld	r30, X+
    5184:	fc 91       	ld	r31, X
    5186:	15 97       	sbiw	r26, 0x05	; 5
    5188:	93 81       	ldd	r25, Z+3	; 0x03
    518a:	82 81       	ldd	r24, Z+2	; 0x02
    518c:	98 17       	cp	r25, r24
    518e:	89 f0       	breq	.+34     	; 0x51b2 <serial_get_byte+0x34>
    5190:	92 81       	ldd	r25, Z+2	; 0x02
    5192:	85 81       	ldd	r24, Z+5	; 0x05
    5194:	86 95       	lsr	r24
    5196:	89 23       	and	r24, r25
    5198:	a0 81       	ld	r26, Z
    519a:	b1 81       	ldd	r27, Z+1	; 0x01
    519c:	a8 0f       	add	r26, r24
    519e:	b1 1d       	adc	r27, r1
    51a0:	8c 91       	ld	r24, X
    51a2:	db 01       	movw	r26, r22
    51a4:	8c 93       	st	X, r24
    51a6:	9f 5f       	subi	r25, 0xFF	; 255
    51a8:	85 81       	ldd	r24, Z+5	; 0x05
    51aa:	98 23       	and	r25, r24
    51ac:	92 83       	std	Z+2, r25	; 0x02
    51ae:	80 e0       	ldi	r24, 0x00	; 0
    51b0:	08 95       	ret
    51b2:	83 e0       	ldi	r24, 0x03	; 3
    51b4:	08 95       	ret

000051b6 <__vector_25>:
    51b6:	1f 92       	push	r1
    51b8:	0f 92       	push	r0
    51ba:	0f b6       	in	r0, 0x3f	; 63
    51bc:	0f 92       	push	r0
    51be:	11 24       	eor	r1, r1
    51c0:	0b b6       	in	r0, 0x3b	; 59
    51c2:	0f 92       	push	r0
    51c4:	2f 93       	push	r18
    51c6:	3f 93       	push	r19
    51c8:	4f 93       	push	r20
    51ca:	5f 93       	push	r21
    51cc:	6f 93       	push	r22
    51ce:	7f 93       	push	r23
    51d0:	8f 93       	push	r24
    51d2:	9f 93       	push	r25
    51d4:	af 93       	push	r26
    51d6:	bf 93       	push	r27
    51d8:	cf 93       	push	r28
    51da:	df 93       	push	r29
    51dc:	ef 93       	push	r30
    51de:	ff 93       	push	r31
    51e0:	a0 91 30 1a 	lds	r26, 0x1A30	; 0x801a30 <_ser_handle>
    51e4:	b0 91 31 1a 	lds	r27, 0x1A31	; 0x801a31 <_ser_handle+0x1>
    51e8:	10 97       	sbiw	r26, 0x00	; 0
    51ea:	11 f1       	breq	.+68     	; 0x5230 <__vector_25+0x7a>
    51ec:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    51f0:	14 96       	adiw	r26, 0x04	; 4
    51f2:	ed 91       	ld	r30, X+
    51f4:	fc 91       	ld	r31, X
    51f6:	15 97       	sbiw	r26, 0x05	; 5
    51f8:	93 81       	ldd	r25, Z+3	; 0x03
    51fa:	82 81       	ldd	r24, Z+2	; 0x02
    51fc:	25 81       	ldd	r18, Z+5	; 0x05
    51fe:	98 1b       	sub	r25, r24
    5200:	92 23       	and	r25, r18
    5202:	84 81       	ldd	r24, Z+4	; 0x04
    5204:	98 17       	cp	r25, r24
    5206:	61 f0       	breq	.+24     	; 0x5220 <__vector_25+0x6a>
    5208:	83 81       	ldd	r24, Z+3	; 0x03
    520a:	26 95       	lsr	r18
    520c:	28 23       	and	r18, r24
    520e:	c0 81       	ld	r28, Z
    5210:	d1 81       	ldd	r29, Z+1	; 0x01
    5212:	c2 0f       	add	r28, r18
    5214:	d1 1d       	adc	r29, r1
    5216:	68 83       	st	Y, r22
    5218:	8f 5f       	subi	r24, 0xFF	; 255
    521a:	95 81       	ldd	r25, Z+5	; 0x05
    521c:	89 23       	and	r24, r25
    521e:	83 83       	std	Z+3, r24	; 0x03
    5220:	16 96       	adiw	r26, 0x06	; 6
    5222:	ed 91       	ld	r30, X+
    5224:	fc 91       	ld	r31, X
    5226:	17 97       	sbiw	r26, 0x07	; 7
    5228:	30 97       	sbiw	r30, 0x00	; 0
    522a:	11 f0       	breq	.+4      	; 0x5230 <__vector_25+0x7a>
    522c:	cd 01       	movw	r24, r26
    522e:	19 95       	eicall
    5230:	ff 91       	pop	r31
    5232:	ef 91       	pop	r30
    5234:	df 91       	pop	r29
    5236:	cf 91       	pop	r28
    5238:	bf 91       	pop	r27
    523a:	af 91       	pop	r26
    523c:	9f 91       	pop	r25
    523e:	8f 91       	pop	r24
    5240:	7f 91       	pop	r23
    5242:	6f 91       	pop	r22
    5244:	5f 91       	pop	r21
    5246:	4f 91       	pop	r20
    5248:	3f 91       	pop	r19
    524a:	2f 91       	pop	r18
    524c:	0f 90       	pop	r0
    524e:	0b be       	out	0x3b, r0	; 59
    5250:	0f 90       	pop	r0
    5252:	0f be       	out	0x3f, r0	; 63
    5254:	0f 90       	pop	r0
    5256:	1f 90       	pop	r1
    5258:	18 95       	reti

0000525a <__vector_26>:
    525a:	1f 92       	push	r1
    525c:	0f 92       	push	r0
    525e:	0f b6       	in	r0, 0x3f	; 63
    5260:	0f 92       	push	r0
    5262:	11 24       	eor	r1, r1
    5264:	0b b6       	in	r0, 0x3b	; 59
    5266:	0f 92       	push	r0
    5268:	2f 93       	push	r18
    526a:	8f 93       	push	r24
    526c:	9f 93       	push	r25
    526e:	af 93       	push	r26
    5270:	bf 93       	push	r27
    5272:	ef 93       	push	r30
    5274:	ff 93       	push	r31
    5276:	e0 91 30 1a 	lds	r30, 0x1A30	; 0x801a30 <_ser_handle>
    527a:	f0 91 31 1a 	lds	r31, 0x1A31	; 0x801a31 <_ser_handle+0x1>
    527e:	30 97       	sbiw	r30, 0x00	; 0
    5280:	b9 f0       	breq	.+46     	; 0x52b0 <__vector_26+0x56>
    5282:	02 80       	ldd	r0, Z+2	; 0x02
    5284:	f3 81       	ldd	r31, Z+3	; 0x03
    5286:	e0 2d       	mov	r30, r0
    5288:	93 81       	ldd	r25, Z+3	; 0x03
    528a:	82 81       	ldd	r24, Z+2	; 0x02
    528c:	98 17       	cp	r25, r24
    528e:	b1 f0       	breq	.+44     	; 0x52bc <__vector_26+0x62>
    5290:	92 81       	ldd	r25, Z+2	; 0x02
    5292:	85 81       	ldd	r24, Z+5	; 0x05
    5294:	28 2f       	mov	r18, r24
    5296:	26 95       	lsr	r18
    5298:	29 23       	and	r18, r25
    529a:	a0 81       	ld	r26, Z
    529c:	b1 81       	ldd	r27, Z+1	; 0x01
    529e:	a2 0f       	add	r26, r18
    52a0:	b1 1d       	adc	r27, r1
    52a2:	2c 91       	ld	r18, X
    52a4:	9f 5f       	subi	r25, 0xFF	; 255
    52a6:	89 23       	and	r24, r25
    52a8:	82 83       	std	Z+2, r24	; 0x02
    52aa:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    52ae:	0b c0       	rjmp	.+22     	; 0x52c6 <__vector_26+0x6c>
    52b0:	e1 ec       	ldi	r30, 0xC1	; 193
    52b2:	f0 e0       	ldi	r31, 0x00	; 0
    52b4:	80 81       	ld	r24, Z
    52b6:	8f 7d       	andi	r24, 0xDF	; 223
    52b8:	80 83       	st	Z, r24
    52ba:	05 c0       	rjmp	.+10     	; 0x52c6 <__vector_26+0x6c>
    52bc:	e1 ec       	ldi	r30, 0xC1	; 193
    52be:	f0 e0       	ldi	r31, 0x00	; 0
    52c0:	80 81       	ld	r24, Z
    52c2:	8f 7d       	andi	r24, 0xDF	; 223
    52c4:	80 83       	st	Z, r24
    52c6:	ff 91       	pop	r31
    52c8:	ef 91       	pop	r30
    52ca:	bf 91       	pop	r27
    52cc:	af 91       	pop	r26
    52ce:	9f 91       	pop	r25
    52d0:	8f 91       	pop	r24
    52d2:	2f 91       	pop	r18
    52d4:	0f 90       	pop	r0
    52d6:	0b be       	out	0x3b, r0	; 59
    52d8:	0f 90       	pop	r0
    52da:	0f be       	out	0x3f, r0	; 63
    52dc:	0f 90       	pop	r0
    52de:	1f 90       	pop	r1
    52e0:	18 95       	reti

000052e2 <__vector_36>:
    52e2:	1f 92       	push	r1
    52e4:	0f 92       	push	r0
    52e6:	0f b6       	in	r0, 0x3f	; 63
    52e8:	0f 92       	push	r0
    52ea:	11 24       	eor	r1, r1
    52ec:	0b b6       	in	r0, 0x3b	; 59
    52ee:	0f 92       	push	r0
    52f0:	2f 93       	push	r18
    52f2:	3f 93       	push	r19
    52f4:	4f 93       	push	r20
    52f6:	5f 93       	push	r21
    52f8:	6f 93       	push	r22
    52fa:	7f 93       	push	r23
    52fc:	8f 93       	push	r24
    52fe:	9f 93       	push	r25
    5300:	af 93       	push	r26
    5302:	bf 93       	push	r27
    5304:	cf 93       	push	r28
    5306:	df 93       	push	r29
    5308:	ef 93       	push	r30
    530a:	ff 93       	push	r31
    530c:	a0 91 32 1a 	lds	r26, 0x1A32	; 0x801a32 <_ser_handle+0x2>
    5310:	b0 91 33 1a 	lds	r27, 0x1A33	; 0x801a33 <_ser_handle+0x3>
    5314:	10 97       	sbiw	r26, 0x00	; 0
    5316:	11 f1       	breq	.+68     	; 0x535c <__vector_36+0x7a>
    5318:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    531c:	14 96       	adiw	r26, 0x04	; 4
    531e:	ed 91       	ld	r30, X+
    5320:	fc 91       	ld	r31, X
    5322:	15 97       	sbiw	r26, 0x05	; 5
    5324:	93 81       	ldd	r25, Z+3	; 0x03
    5326:	82 81       	ldd	r24, Z+2	; 0x02
    5328:	25 81       	ldd	r18, Z+5	; 0x05
    532a:	98 1b       	sub	r25, r24
    532c:	92 23       	and	r25, r18
    532e:	84 81       	ldd	r24, Z+4	; 0x04
    5330:	98 17       	cp	r25, r24
    5332:	61 f0       	breq	.+24     	; 0x534c <__vector_36+0x6a>
    5334:	83 81       	ldd	r24, Z+3	; 0x03
    5336:	26 95       	lsr	r18
    5338:	28 23       	and	r18, r24
    533a:	c0 81       	ld	r28, Z
    533c:	d1 81       	ldd	r29, Z+1	; 0x01
    533e:	c2 0f       	add	r28, r18
    5340:	d1 1d       	adc	r29, r1
    5342:	68 83       	st	Y, r22
    5344:	8f 5f       	subi	r24, 0xFF	; 255
    5346:	95 81       	ldd	r25, Z+5	; 0x05
    5348:	89 23       	and	r24, r25
    534a:	83 83       	std	Z+3, r24	; 0x03
    534c:	16 96       	adiw	r26, 0x06	; 6
    534e:	ed 91       	ld	r30, X+
    5350:	fc 91       	ld	r31, X
    5352:	17 97       	sbiw	r26, 0x07	; 7
    5354:	30 97       	sbiw	r30, 0x00	; 0
    5356:	11 f0       	breq	.+4      	; 0x535c <__vector_36+0x7a>
    5358:	cd 01       	movw	r24, r26
    535a:	19 95       	eicall
    535c:	ff 91       	pop	r31
    535e:	ef 91       	pop	r30
    5360:	df 91       	pop	r29
    5362:	cf 91       	pop	r28
    5364:	bf 91       	pop	r27
    5366:	af 91       	pop	r26
    5368:	9f 91       	pop	r25
    536a:	8f 91       	pop	r24
    536c:	7f 91       	pop	r23
    536e:	6f 91       	pop	r22
    5370:	5f 91       	pop	r21
    5372:	4f 91       	pop	r20
    5374:	3f 91       	pop	r19
    5376:	2f 91       	pop	r18
    5378:	0f 90       	pop	r0
    537a:	0b be       	out	0x3b, r0	; 59
    537c:	0f 90       	pop	r0
    537e:	0f be       	out	0x3f, r0	; 63
    5380:	0f 90       	pop	r0
    5382:	1f 90       	pop	r1
    5384:	18 95       	reti

00005386 <__vector_37>:
    5386:	1f 92       	push	r1
    5388:	0f 92       	push	r0
    538a:	0f b6       	in	r0, 0x3f	; 63
    538c:	0f 92       	push	r0
    538e:	11 24       	eor	r1, r1
    5390:	0b b6       	in	r0, 0x3b	; 59
    5392:	0f 92       	push	r0
    5394:	2f 93       	push	r18
    5396:	8f 93       	push	r24
    5398:	9f 93       	push	r25
    539a:	af 93       	push	r26
    539c:	bf 93       	push	r27
    539e:	ef 93       	push	r30
    53a0:	ff 93       	push	r31
    53a2:	e0 91 32 1a 	lds	r30, 0x1A32	; 0x801a32 <_ser_handle+0x2>
    53a6:	f0 91 33 1a 	lds	r31, 0x1A33	; 0x801a33 <_ser_handle+0x3>
    53aa:	30 97       	sbiw	r30, 0x00	; 0
    53ac:	b9 f0       	breq	.+46     	; 0x53dc <__vector_37+0x56>
    53ae:	02 80       	ldd	r0, Z+2	; 0x02
    53b0:	f3 81       	ldd	r31, Z+3	; 0x03
    53b2:	e0 2d       	mov	r30, r0
    53b4:	93 81       	ldd	r25, Z+3	; 0x03
    53b6:	82 81       	ldd	r24, Z+2	; 0x02
    53b8:	98 17       	cp	r25, r24
    53ba:	b1 f0       	breq	.+44     	; 0x53e8 <__vector_37+0x62>
    53bc:	92 81       	ldd	r25, Z+2	; 0x02
    53be:	85 81       	ldd	r24, Z+5	; 0x05
    53c0:	28 2f       	mov	r18, r24
    53c2:	26 95       	lsr	r18
    53c4:	29 23       	and	r18, r25
    53c6:	a0 81       	ld	r26, Z
    53c8:	b1 81       	ldd	r27, Z+1	; 0x01
    53ca:	a2 0f       	add	r26, r18
    53cc:	b1 1d       	adc	r27, r1
    53ce:	2c 91       	ld	r18, X
    53d0:	9f 5f       	subi	r25, 0xFF	; 255
    53d2:	89 23       	and	r24, r25
    53d4:	82 83       	std	Z+2, r24	; 0x02
    53d6:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    53da:	0b c0       	rjmp	.+22     	; 0x53f2 <__vector_37+0x6c>
    53dc:	e9 ec       	ldi	r30, 0xC9	; 201
    53de:	f0 e0       	ldi	r31, 0x00	; 0
    53e0:	80 81       	ld	r24, Z
    53e2:	8f 7d       	andi	r24, 0xDF	; 223
    53e4:	80 83       	st	Z, r24
    53e6:	05 c0       	rjmp	.+10     	; 0x53f2 <__vector_37+0x6c>
    53e8:	e9 ec       	ldi	r30, 0xC9	; 201
    53ea:	f0 e0       	ldi	r31, 0x00	; 0
    53ec:	80 81       	ld	r24, Z
    53ee:	8f 7d       	andi	r24, 0xDF	; 223
    53f0:	80 83       	st	Z, r24
    53f2:	ff 91       	pop	r31
    53f4:	ef 91       	pop	r30
    53f6:	bf 91       	pop	r27
    53f8:	af 91       	pop	r26
    53fa:	9f 91       	pop	r25
    53fc:	8f 91       	pop	r24
    53fe:	2f 91       	pop	r18
    5400:	0f 90       	pop	r0
    5402:	0b be       	out	0x3b, r0	; 59
    5404:	0f 90       	pop	r0
    5406:	0f be       	out	0x3f, r0	; 63
    5408:	0f 90       	pop	r0
    540a:	1f 90       	pop	r1
    540c:	18 95       	reti

0000540e <__vector_51>:
    540e:	1f 92       	push	r1
    5410:	0f 92       	push	r0
    5412:	0f b6       	in	r0, 0x3f	; 63
    5414:	0f 92       	push	r0
    5416:	11 24       	eor	r1, r1
    5418:	0b b6       	in	r0, 0x3b	; 59
    541a:	0f 92       	push	r0
    541c:	2f 93       	push	r18
    541e:	3f 93       	push	r19
    5420:	4f 93       	push	r20
    5422:	5f 93       	push	r21
    5424:	6f 93       	push	r22
    5426:	7f 93       	push	r23
    5428:	8f 93       	push	r24
    542a:	9f 93       	push	r25
    542c:	af 93       	push	r26
    542e:	bf 93       	push	r27
    5430:	cf 93       	push	r28
    5432:	df 93       	push	r29
    5434:	ef 93       	push	r30
    5436:	ff 93       	push	r31
    5438:	a0 91 34 1a 	lds	r26, 0x1A34	; 0x801a34 <_ser_handle+0x4>
    543c:	b0 91 35 1a 	lds	r27, 0x1A35	; 0x801a35 <_ser_handle+0x5>
    5440:	10 97       	sbiw	r26, 0x00	; 0
    5442:	11 f1       	breq	.+68     	; 0x5488 <__vector_51+0x7a>
    5444:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    5448:	14 96       	adiw	r26, 0x04	; 4
    544a:	ed 91       	ld	r30, X+
    544c:	fc 91       	ld	r31, X
    544e:	15 97       	sbiw	r26, 0x05	; 5
    5450:	93 81       	ldd	r25, Z+3	; 0x03
    5452:	82 81       	ldd	r24, Z+2	; 0x02
    5454:	25 81       	ldd	r18, Z+5	; 0x05
    5456:	98 1b       	sub	r25, r24
    5458:	92 23       	and	r25, r18
    545a:	84 81       	ldd	r24, Z+4	; 0x04
    545c:	98 17       	cp	r25, r24
    545e:	61 f0       	breq	.+24     	; 0x5478 <__vector_51+0x6a>
    5460:	83 81       	ldd	r24, Z+3	; 0x03
    5462:	26 95       	lsr	r18
    5464:	28 23       	and	r18, r24
    5466:	c0 81       	ld	r28, Z
    5468:	d1 81       	ldd	r29, Z+1	; 0x01
    546a:	c2 0f       	add	r28, r18
    546c:	d1 1d       	adc	r29, r1
    546e:	68 83       	st	Y, r22
    5470:	8f 5f       	subi	r24, 0xFF	; 255
    5472:	95 81       	ldd	r25, Z+5	; 0x05
    5474:	89 23       	and	r24, r25
    5476:	83 83       	std	Z+3, r24	; 0x03
    5478:	16 96       	adiw	r26, 0x06	; 6
    547a:	ed 91       	ld	r30, X+
    547c:	fc 91       	ld	r31, X
    547e:	17 97       	sbiw	r26, 0x07	; 7
    5480:	30 97       	sbiw	r30, 0x00	; 0
    5482:	11 f0       	breq	.+4      	; 0x5488 <__vector_51+0x7a>
    5484:	cd 01       	movw	r24, r26
    5486:	19 95       	eicall
    5488:	ff 91       	pop	r31
    548a:	ef 91       	pop	r30
    548c:	df 91       	pop	r29
    548e:	cf 91       	pop	r28
    5490:	bf 91       	pop	r27
    5492:	af 91       	pop	r26
    5494:	9f 91       	pop	r25
    5496:	8f 91       	pop	r24
    5498:	7f 91       	pop	r23
    549a:	6f 91       	pop	r22
    549c:	5f 91       	pop	r21
    549e:	4f 91       	pop	r20
    54a0:	3f 91       	pop	r19
    54a2:	2f 91       	pop	r18
    54a4:	0f 90       	pop	r0
    54a6:	0b be       	out	0x3b, r0	; 59
    54a8:	0f 90       	pop	r0
    54aa:	0f be       	out	0x3f, r0	; 63
    54ac:	0f 90       	pop	r0
    54ae:	1f 90       	pop	r1
    54b0:	18 95       	reti

000054b2 <__vector_52>:
    54b2:	1f 92       	push	r1
    54b4:	0f 92       	push	r0
    54b6:	0f b6       	in	r0, 0x3f	; 63
    54b8:	0f 92       	push	r0
    54ba:	11 24       	eor	r1, r1
    54bc:	0b b6       	in	r0, 0x3b	; 59
    54be:	0f 92       	push	r0
    54c0:	2f 93       	push	r18
    54c2:	8f 93       	push	r24
    54c4:	9f 93       	push	r25
    54c6:	af 93       	push	r26
    54c8:	bf 93       	push	r27
    54ca:	ef 93       	push	r30
    54cc:	ff 93       	push	r31
    54ce:	e0 91 34 1a 	lds	r30, 0x1A34	; 0x801a34 <_ser_handle+0x4>
    54d2:	f0 91 35 1a 	lds	r31, 0x1A35	; 0x801a35 <_ser_handle+0x5>
    54d6:	30 97       	sbiw	r30, 0x00	; 0
    54d8:	b9 f0       	breq	.+46     	; 0x5508 <__vector_52+0x56>
    54da:	02 80       	ldd	r0, Z+2	; 0x02
    54dc:	f3 81       	ldd	r31, Z+3	; 0x03
    54de:	e0 2d       	mov	r30, r0
    54e0:	93 81       	ldd	r25, Z+3	; 0x03
    54e2:	82 81       	ldd	r24, Z+2	; 0x02
    54e4:	98 17       	cp	r25, r24
    54e6:	b1 f0       	breq	.+44     	; 0x5514 <__vector_52+0x62>
    54e8:	92 81       	ldd	r25, Z+2	; 0x02
    54ea:	85 81       	ldd	r24, Z+5	; 0x05
    54ec:	28 2f       	mov	r18, r24
    54ee:	26 95       	lsr	r18
    54f0:	29 23       	and	r18, r25
    54f2:	a0 81       	ld	r26, Z
    54f4:	b1 81       	ldd	r27, Z+1	; 0x01
    54f6:	a2 0f       	add	r26, r18
    54f8:	b1 1d       	adc	r27, r1
    54fa:	2c 91       	ld	r18, X
    54fc:	9f 5f       	subi	r25, 0xFF	; 255
    54fe:	89 23       	and	r24, r25
    5500:	82 83       	std	Z+2, r24	; 0x02
    5502:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    5506:	0b c0       	rjmp	.+22     	; 0x551e <__vector_52+0x6c>
    5508:	e1 ed       	ldi	r30, 0xD1	; 209
    550a:	f0 e0       	ldi	r31, 0x00	; 0
    550c:	80 81       	ld	r24, Z
    550e:	8f 7d       	andi	r24, 0xDF	; 223
    5510:	80 83       	st	Z, r24
    5512:	05 c0       	rjmp	.+10     	; 0x551e <__vector_52+0x6c>
    5514:	e1 ed       	ldi	r30, 0xD1	; 209
    5516:	f0 e0       	ldi	r31, 0x00	; 0
    5518:	80 81       	ld	r24, Z
    551a:	8f 7d       	andi	r24, 0xDF	; 223
    551c:	80 83       	st	Z, r24
    551e:	ff 91       	pop	r31
    5520:	ef 91       	pop	r30
    5522:	bf 91       	pop	r27
    5524:	af 91       	pop	r26
    5526:	9f 91       	pop	r25
    5528:	8f 91       	pop	r24
    552a:	2f 91       	pop	r18
    552c:	0f 90       	pop	r0
    552e:	0b be       	out	0x3b, r0	; 59
    5530:	0f 90       	pop	r0
    5532:	0f be       	out	0x3f, r0	; 63
    5534:	0f 90       	pop	r0
    5536:	1f 90       	pop	r1
    5538:	18 95       	reti

0000553a <__vector_54>:
    553a:	1f 92       	push	r1
    553c:	0f 92       	push	r0
    553e:	0f b6       	in	r0, 0x3f	; 63
    5540:	0f 92       	push	r0
    5542:	11 24       	eor	r1, r1
    5544:	0b b6       	in	r0, 0x3b	; 59
    5546:	0f 92       	push	r0
    5548:	2f 93       	push	r18
    554a:	3f 93       	push	r19
    554c:	4f 93       	push	r20
    554e:	5f 93       	push	r21
    5550:	6f 93       	push	r22
    5552:	7f 93       	push	r23
    5554:	8f 93       	push	r24
    5556:	9f 93       	push	r25
    5558:	af 93       	push	r26
    555a:	bf 93       	push	r27
    555c:	cf 93       	push	r28
    555e:	df 93       	push	r29
    5560:	ef 93       	push	r30
    5562:	ff 93       	push	r31
    5564:	a0 91 36 1a 	lds	r26, 0x1A36	; 0x801a36 <_ser_handle+0x6>
    5568:	b0 91 37 1a 	lds	r27, 0x1A37	; 0x801a37 <_ser_handle+0x7>
    556c:	10 97       	sbiw	r26, 0x00	; 0
    556e:	11 f1       	breq	.+68     	; 0x55b4 <__vector_54+0x7a>
    5570:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    5574:	14 96       	adiw	r26, 0x04	; 4
    5576:	ed 91       	ld	r30, X+
    5578:	fc 91       	ld	r31, X
    557a:	15 97       	sbiw	r26, 0x05	; 5
    557c:	93 81       	ldd	r25, Z+3	; 0x03
    557e:	82 81       	ldd	r24, Z+2	; 0x02
    5580:	25 81       	ldd	r18, Z+5	; 0x05
    5582:	98 1b       	sub	r25, r24
    5584:	92 23       	and	r25, r18
    5586:	84 81       	ldd	r24, Z+4	; 0x04
    5588:	98 17       	cp	r25, r24
    558a:	61 f0       	breq	.+24     	; 0x55a4 <__vector_54+0x6a>
    558c:	83 81       	ldd	r24, Z+3	; 0x03
    558e:	26 95       	lsr	r18
    5590:	28 23       	and	r18, r24
    5592:	c0 81       	ld	r28, Z
    5594:	d1 81       	ldd	r29, Z+1	; 0x01
    5596:	c2 0f       	add	r28, r18
    5598:	d1 1d       	adc	r29, r1
    559a:	68 83       	st	Y, r22
    559c:	8f 5f       	subi	r24, 0xFF	; 255
    559e:	95 81       	ldd	r25, Z+5	; 0x05
    55a0:	89 23       	and	r24, r25
    55a2:	83 83       	std	Z+3, r24	; 0x03
    55a4:	16 96       	adiw	r26, 0x06	; 6
    55a6:	ed 91       	ld	r30, X+
    55a8:	fc 91       	ld	r31, X
    55aa:	17 97       	sbiw	r26, 0x07	; 7
    55ac:	30 97       	sbiw	r30, 0x00	; 0
    55ae:	11 f0       	breq	.+4      	; 0x55b4 <__vector_54+0x7a>
    55b0:	cd 01       	movw	r24, r26
    55b2:	19 95       	eicall
    55b4:	ff 91       	pop	r31
    55b6:	ef 91       	pop	r30
    55b8:	df 91       	pop	r29
    55ba:	cf 91       	pop	r28
    55bc:	bf 91       	pop	r27
    55be:	af 91       	pop	r26
    55c0:	9f 91       	pop	r25
    55c2:	8f 91       	pop	r24
    55c4:	7f 91       	pop	r23
    55c6:	6f 91       	pop	r22
    55c8:	5f 91       	pop	r21
    55ca:	4f 91       	pop	r20
    55cc:	3f 91       	pop	r19
    55ce:	2f 91       	pop	r18
    55d0:	0f 90       	pop	r0
    55d2:	0b be       	out	0x3b, r0	; 59
    55d4:	0f 90       	pop	r0
    55d6:	0f be       	out	0x3f, r0	; 63
    55d8:	0f 90       	pop	r0
    55da:	1f 90       	pop	r1
    55dc:	18 95       	reti

000055de <__vector_55>:
    55de:	1f 92       	push	r1
    55e0:	0f 92       	push	r0
    55e2:	0f b6       	in	r0, 0x3f	; 63
    55e4:	0f 92       	push	r0
    55e6:	11 24       	eor	r1, r1
    55e8:	0b b6       	in	r0, 0x3b	; 59
    55ea:	0f 92       	push	r0
    55ec:	2f 93       	push	r18
    55ee:	8f 93       	push	r24
    55f0:	9f 93       	push	r25
    55f2:	af 93       	push	r26
    55f4:	bf 93       	push	r27
    55f6:	ef 93       	push	r30
    55f8:	ff 93       	push	r31
    55fa:	e0 91 36 1a 	lds	r30, 0x1A36	; 0x801a36 <_ser_handle+0x6>
    55fe:	f0 91 37 1a 	lds	r31, 0x1A37	; 0x801a37 <_ser_handle+0x7>
    5602:	30 97       	sbiw	r30, 0x00	; 0
    5604:	b9 f0       	breq	.+46     	; 0x5634 <__vector_55+0x56>
    5606:	02 80       	ldd	r0, Z+2	; 0x02
    5608:	f3 81       	ldd	r31, Z+3	; 0x03
    560a:	e0 2d       	mov	r30, r0
    560c:	93 81       	ldd	r25, Z+3	; 0x03
    560e:	82 81       	ldd	r24, Z+2	; 0x02
    5610:	98 17       	cp	r25, r24
    5612:	b1 f0       	breq	.+44     	; 0x5640 <__vector_55+0x62>
    5614:	92 81       	ldd	r25, Z+2	; 0x02
    5616:	85 81       	ldd	r24, Z+5	; 0x05
    5618:	28 2f       	mov	r18, r24
    561a:	26 95       	lsr	r18
    561c:	29 23       	and	r18, r25
    561e:	a0 81       	ld	r26, Z
    5620:	b1 81       	ldd	r27, Z+1	; 0x01
    5622:	a2 0f       	add	r26, r18
    5624:	b1 1d       	adc	r27, r1
    5626:	2c 91       	ld	r18, X
    5628:	9f 5f       	subi	r25, 0xFF	; 255
    562a:	89 23       	and	r24, r25
    562c:	82 83       	std	Z+2, r24	; 0x02
    562e:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    5632:	0b c0       	rjmp	.+22     	; 0x564a <__vector_55+0x6c>
    5634:	e1 e3       	ldi	r30, 0x31	; 49
    5636:	f1 e0       	ldi	r31, 0x01	; 1
    5638:	80 81       	ld	r24, Z
    563a:	8f 7d       	andi	r24, 0xDF	; 223
    563c:	80 83       	st	Z, r24
    563e:	05 c0       	rjmp	.+10     	; 0x564a <__vector_55+0x6c>
    5640:	e1 e3       	ldi	r30, 0x31	; 49
    5642:	f1 e0       	ldi	r31, 0x01	; 1
    5644:	80 81       	ld	r24, Z
    5646:	8f 7d       	andi	r24, 0xDF	; 223
    5648:	80 83       	st	Z, r24
    564a:	ff 91       	pop	r31
    564c:	ef 91       	pop	r30
    564e:	bf 91       	pop	r27
    5650:	af 91       	pop	r26
    5652:	9f 91       	pop	r25
    5654:	8f 91       	pop	r24
    5656:	2f 91       	pop	r18
    5658:	0f 90       	pop	r0
    565a:	0b be       	out	0x3b, r0	; 59
    565c:	0f 90       	pop	r0
    565e:	0f be       	out	0x3f, r0	; 63
    5660:	0f 90       	pop	r0
    5662:	1f 90       	pop	r1
    5664:	18 95       	reti

00005666 <usart_getchar>:
    5666:	cf 93       	push	r28
    5668:	df 93       	push	r29
    566a:	1f 92       	push	r1
    566c:	cd b7       	in	r28, 0x3d	; 61
    566e:	de b7       	in	r29, 0x3e	; 62
    5670:	be 01       	movw	r22, r28
    5672:	6f 5f       	subi	r22, 0xFF	; 255
    5674:	7f 4f       	sbci	r23, 0xFF	; 255
    5676:	80 91 38 1a 	lds	r24, 0x1A38	; 0x801a38 <_com_serial_instance>
    567a:	90 91 39 1a 	lds	r25, 0x1A39	; 0x801a39 <_com_serial_instance+0x1>
    567e:	7f dd       	rcall	.-1282   	; 0x517e <serial_get_byte>
    5680:	81 11       	cpse	r24, r1
    5682:	f6 cf       	rjmp	.-20     	; 0x5670 <usart_getchar+0xa>
    5684:	89 81       	ldd	r24, Y+1	; 0x01
    5686:	90 e0       	ldi	r25, 0x00	; 0
    5688:	0f 90       	pop	r0
    568a:	df 91       	pop	r29
    568c:	cf 91       	pop	r28
    568e:	08 95       	ret

00005690 <usart_putchar>:
    5690:	68 2f       	mov	r22, r24
    5692:	80 91 38 1a 	lds	r24, 0x1A38	; 0x801a38 <_com_serial_instance>
    5696:	90 91 39 1a 	lds	r25, 0x1A39	; 0x801a39 <_com_serial_instance+0x1>
    569a:	fc dc       	rcall	.-1544   	; 0x5094 <serial_send_byte>
    569c:	80 e0       	ldi	r24, 0x00	; 0
    569e:	90 e0       	ldi	r25, 0x00	; 0
    56a0:	08 95       	ret

000056a2 <stdioCreate>:
    56a2:	8f 92       	push	r8
    56a4:	9f 92       	push	r9
    56a6:	af 92       	push	r10
    56a8:	cf 92       	push	r12
    56aa:	ef 92       	push	r14
    56ac:	0f 93       	push	r16
    56ae:	81 2c       	mov	r8, r1
    56b0:	91 2c       	mov	r9, r1
    56b2:	68 94       	set
    56b4:	aa 24       	eor	r10, r10
    56b6:	a7 f8       	bld	r10, 7
    56b8:	68 94       	set
    56ba:	cc 24       	eor	r12, r12
    56bc:	c7 f8       	bld	r12, 7
    56be:	e1 2c       	mov	r14, r1
    56c0:	00 e0       	ldi	r16, 0x00	; 0
    56c2:	23 e0       	ldi	r18, 0x03	; 3
    56c4:	40 e0       	ldi	r20, 0x00	; 0
    56c6:	51 ee       	ldi	r21, 0xE1	; 225
    56c8:	60 e0       	ldi	r22, 0x00	; 0
    56ca:	70 e0       	ldi	r23, 0x00	; 0
    56cc:	4d dc       	rcall	.-1894   	; 0x4f68 <serial_new_instance>
    56ce:	90 93 39 1a 	sts	0x1A39, r25	; 0x801a39 <_com_serial_instance+0x1>
    56d2:	80 93 38 1a 	sts	0x1A38, r24	; 0x801a38 <_com_serial_instance>
    56d6:	e3 e8       	ldi	r30, 0x83	; 131
    56d8:	fa e1       	ldi	r31, 0x1A	; 26
    56da:	86 e1       	ldi	r24, 0x16	; 22
    56dc:	92 e0       	ldi	r25, 0x02	; 2
    56de:	91 83       	std	Z+1, r25	; 0x01
    56e0:	80 83       	st	Z, r24
    56e2:	93 83       	std	Z+3, r25	; 0x03
    56e4:	82 83       	std	Z+2, r24	; 0x02
    56e6:	0f 91       	pop	r16
    56e8:	ef 90       	pop	r14
    56ea:	cf 90       	pop	r12
    56ec:	af 90       	pop	r10
    56ee:	9f 90       	pop	r9
    56f0:	8f 90       	pop	r8
    56f2:	08 95       	ret

000056f4 <_initTwiInterface>:
    56f4:	80 91 48 1a 	lds	r24, 0x1A48	; 0x801a48 <_twiIsInitiated>
    56f8:	81 11       	cpse	r24, r1
    56fa:	0c c0       	rjmp	.+24     	; 0x5714 <_initTwiInterface+0x20>
    56fc:	8c e0       	ldi	r24, 0x0C	; 12
    56fe:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    5702:	8f ef       	ldi	r24, 0xFF	; 255
    5704:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    5708:	84 e0       	ldi	r24, 0x04	; 4
    570a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    570e:	81 e0       	ldi	r24, 0x01	; 1
    5710:	80 93 48 1a 	sts	0x1A48, r24	; 0x801a48 <_twiIsInitiated>
    5714:	08 95       	ret

00005716 <twiCreate>:
    5716:	af 92       	push	r10
    5718:	bf 92       	push	r11
    571a:	cf 92       	push	r12
    571c:	df 92       	push	r13
    571e:	ef 92       	push	r14
    5720:	ff 92       	push	r15
    5722:	0f 93       	push	r16
    5724:	1f 93       	push	r17
    5726:	cf 93       	push	r28
    5728:	df 93       	push	r29
    572a:	a8 2e       	mov	r10, r24
    572c:	b6 2e       	mov	r11, r22
    572e:	69 01       	movw	r12, r18
    5730:	7a 01       	movw	r14, r20
    5732:	84 e0       	ldi	r24, 0x04	; 4
    5734:	90 e0       	ldi	r25, 0x00	; 0
    5736:	f2 d3       	rcall	.+2020   	; 0x5f1c <malloc>
    5738:	ec 01       	movw	r28, r24
    573a:	89 2b       	or	r24, r25
    573c:	61 f1       	breq	.+88     	; 0x5796 <twiCreate+0x80>
    573e:	a8 82       	st	Y, r10
    5740:	81 e0       	ldi	r24, 0x01	; 1
    5742:	b8 12       	cpse	r11, r24
    5744:	12 c0       	rjmp	.+36     	; 0x576a <twiCreate+0x54>
    5746:	c7 01       	movw	r24, r14
    5748:	b6 01       	movw	r22, r12
    574a:	20 ea       	ldi	r18, 0xA0	; 160
    574c:	36 e8       	ldi	r19, 0x86	; 134
    574e:	41 e0       	ldi	r20, 0x01	; 1
    5750:	50 e0       	ldi	r21, 0x00	; 0
    5752:	8c d3       	rcall	.+1816   	; 0x5e6c <__udivmodsi4>
    5754:	da 01       	movw	r26, r20
    5756:	c9 01       	movw	r24, r18
    5758:	40 97       	sbiw	r24, 0x10	; 16
    575a:	a1 09       	sbc	r26, r1
    575c:	b1 09       	sbc	r27, r1
    575e:	b6 95       	lsr	r27
    5760:	a7 95       	ror	r26
    5762:	97 95       	ror	r25
    5764:	87 95       	ror	r24
    5766:	89 83       	std	Y+1, r24	; 0x01
    5768:	11 c0       	rjmp	.+34     	; 0x578c <twiCreate+0x76>
    576a:	c7 01       	movw	r24, r14
    576c:	b6 01       	movw	r22, r12
    576e:	20 e8       	ldi	r18, 0x80	; 128
    5770:	3a e1       	ldi	r19, 0x1A	; 26
    5772:	46 e0       	ldi	r20, 0x06	; 6
    5774:	50 e0       	ldi	r21, 0x00	; 0
    5776:	7a d3       	rcall	.+1780   	; 0x5e6c <__udivmodsi4>
    5778:	da 01       	movw	r26, r20
    577a:	c9 01       	movw	r24, r18
    577c:	40 97       	sbiw	r24, 0x10	; 16
    577e:	a1 09       	sbc	r26, r1
    5780:	b1 09       	sbc	r27, r1
    5782:	b6 95       	lsr	r27
    5784:	a7 95       	ror	r26
    5786:	97 95       	ror	r25
    5788:	87 95       	ror	r24
    578a:	89 83       	std	Y+1, r24	; 0x01
    578c:	1b 83       	std	Y+3, r17	; 0x03
    578e:	0a 83       	std	Y+2, r16	; 0x02
    5790:	8c 2f       	mov	r24, r28
    5792:	9d 2f       	mov	r25, r29
    5794:	02 c0       	rjmp	.+4      	; 0x579a <twiCreate+0x84>
    5796:	80 e0       	ldi	r24, 0x00	; 0
    5798:	90 e0       	ldi	r25, 0x00	; 0
    579a:	df 91       	pop	r29
    579c:	cf 91       	pop	r28
    579e:	1f 91       	pop	r17
    57a0:	0f 91       	pop	r16
    57a2:	ff 90       	pop	r15
    57a4:	ef 90       	pop	r14
    57a6:	df 90       	pop	r13
    57a8:	cf 90       	pop	r12
    57aa:	bf 90       	pop	r11
    57ac:	af 90       	pop	r10
    57ae:	08 95       	ret

000057b0 <twiIsBusy>:
    57b0:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    57b4:	81 70       	andi	r24, 0x01	; 1
    57b6:	08 95       	ret

000057b8 <twiTransmit>:
    57b8:	ff 92       	push	r15
    57ba:	0f 93       	push	r16
    57bc:	1f 93       	push	r17
    57be:	cf 93       	push	r28
    57c0:	df 93       	push	r29
    57c2:	00 97       	sbiw	r24, 0x00	; 0
    57c4:	d1 f1       	breq	.+116    	; 0x583a <twiTransmit+0x82>
    57c6:	4a 30       	cpi	r20, 0x0A	; 10
    57c8:	d0 f5       	brcc	.+116    	; 0x583e <twiTransmit+0x86>
    57ca:	f4 2e       	mov	r15, r20
    57cc:	8b 01       	movw	r16, r22
    57ce:	ec 01       	movw	r28, r24
    57d0:	ef df       	rcall	.-34     	; 0x57b0 <twiIsBusy>
    57d2:	81 11       	cpse	r24, r1
    57d4:	36 c0       	rjmp	.+108    	; 0x5842 <twiTransmit+0x8a>
    57d6:	80 91 3b 1a 	lds	r24, 0x1A3B	; 0x801a3b <_twiCurrentHandler>
    57da:	90 91 3c 1a 	lds	r25, 0x1A3C	; 0x801a3c <_twiCurrentHandler+0x1>
    57de:	c8 17       	cp	r28, r24
    57e0:	d9 07       	cpc	r29, r25
    57e2:	41 f0       	breq	.+16     	; 0x57f4 <twiTransmit+0x3c>
    57e4:	87 df       	rcall	.-242    	; 0x56f4 <_initTwiInterface>
    57e6:	89 81       	ldd	r24, Y+1	; 0x01
    57e8:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    57ec:	d0 93 3c 1a 	sts	0x1A3C, r29	; 0x801a3c <_twiCurrentHandler+0x1>
    57f0:	c0 93 3b 1a 	sts	0x1A3B, r28	; 0x801a3b <_twiCurrentHandler>
    57f4:	81 e0       	ldi	r24, 0x01	; 1
    57f6:	8f 0d       	add	r24, r15
    57f8:	80 93 3d 1a 	sts	0x1A3D, r24	; 0x801a3d <_twiMessageLen>
    57fc:	88 81       	ld	r24, Y
    57fe:	88 0f       	add	r24, r24
    5800:	80 93 3e 1a 	sts	0x1A3E, r24	; 0x801a3e <_twiMessageBuffer>
    5804:	ff 20       	and	r15, r15
    5806:	89 f0       	breq	.+34     	; 0x582a <twiTransmit+0x72>
    5808:	f8 01       	movw	r30, r16
    580a:	af e3       	ldi	r26, 0x3F	; 63
    580c:	ba e1       	ldi	r27, 0x1A	; 26
    580e:	4f ef       	ldi	r20, 0xFF	; 255
    5810:	4f 0d       	add	r20, r15
    5812:	64 2f       	mov	r22, r20
    5814:	70 e0       	ldi	r23, 0x00	; 0
    5816:	cb 01       	movw	r24, r22
    5818:	01 96       	adiw	r24, 0x01	; 1
    581a:	b8 01       	movw	r22, r16
    581c:	68 0f       	add	r22, r24
    581e:	79 1f       	adc	r23, r25
    5820:	81 91       	ld	r24, Z+
    5822:	8d 93       	st	X+, r24
    5824:	e6 17       	cp	r30, r22
    5826:	f7 07       	cpc	r31, r23
    5828:	d9 f7       	brne	.-10     	; 0x5820 <twiTransmit+0x68>
    582a:	88 ef       	ldi	r24, 0xF8	; 248
    582c:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <_twiCurrentState>
    5830:	85 ea       	ldi	r24, 0xA5	; 165
    5832:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    5836:	84 e0       	ldi	r24, 0x04	; 4
    5838:	05 c0       	rjmp	.+10     	; 0x5844 <twiTransmit+0x8c>
    583a:	86 e0       	ldi	r24, 0x06	; 6
    583c:	03 c0       	rjmp	.+6      	; 0x5844 <twiTransmit+0x8c>
    583e:	87 e0       	ldi	r24, 0x07	; 7
    5840:	01 c0       	rjmp	.+2      	; 0x5844 <twiTransmit+0x8c>
    5842:	82 e0       	ldi	r24, 0x02	; 2
    5844:	df 91       	pop	r29
    5846:	cf 91       	pop	r28
    5848:	1f 91       	pop	r17
    584a:	0f 91       	pop	r16
    584c:	ff 90       	pop	r15
    584e:	08 95       	ret

00005850 <twiReceive>:
    5850:	1f 93       	push	r17
    5852:	cf 93       	push	r28
    5854:	df 93       	push	r29
    5856:	00 97       	sbiw	r24, 0x00	; 0
    5858:	29 f1       	breq	.+74     	; 0x58a4 <twiReceive+0x54>
    585a:	6b 30       	cpi	r22, 0x0B	; 11
    585c:	28 f5       	brcc	.+74     	; 0x58a8 <twiReceive+0x58>
    585e:	16 2f       	mov	r17, r22
    5860:	ec 01       	movw	r28, r24
    5862:	a6 df       	rcall	.-180    	; 0x57b0 <twiIsBusy>
    5864:	81 11       	cpse	r24, r1
    5866:	22 c0       	rjmp	.+68     	; 0x58ac <twiReceive+0x5c>
    5868:	80 91 3b 1a 	lds	r24, 0x1A3B	; 0x801a3b <_twiCurrentHandler>
    586c:	90 91 3c 1a 	lds	r25, 0x1A3C	; 0x801a3c <_twiCurrentHandler+0x1>
    5870:	c8 17       	cp	r28, r24
    5872:	d9 07       	cpc	r29, r25
    5874:	41 f0       	breq	.+16     	; 0x5886 <twiReceive+0x36>
    5876:	3e df       	rcall	.-388    	; 0x56f4 <_initTwiInterface>
    5878:	89 81       	ldd	r24, Y+1	; 0x01
    587a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    587e:	d0 93 3c 1a 	sts	0x1A3C, r29	; 0x801a3c <_twiCurrentHandler+0x1>
    5882:	c0 93 3b 1a 	sts	0x1A3B, r28	; 0x801a3b <_twiCurrentHandler>
    5886:	10 93 3d 1a 	sts	0x1A3D, r17	; 0x801a3d <_twiMessageLen>
    588a:	88 81       	ld	r24, Y
    588c:	88 0f       	add	r24, r24
    588e:	81 60       	ori	r24, 0x01	; 1
    5890:	80 93 3e 1a 	sts	0x1A3E, r24	; 0x801a3e <_twiMessageBuffer>
    5894:	88 ef       	ldi	r24, 0xF8	; 248
    5896:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <_twiCurrentState>
    589a:	85 ea       	ldi	r24, 0xA5	; 165
    589c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    58a0:	85 e0       	ldi	r24, 0x05	; 5
    58a2:	05 c0       	rjmp	.+10     	; 0x58ae <twiReceive+0x5e>
    58a4:	86 e0       	ldi	r24, 0x06	; 6
    58a6:	03 c0       	rjmp	.+6      	; 0x58ae <twiReceive+0x5e>
    58a8:	87 e0       	ldi	r24, 0x07	; 7
    58aa:	01 c0       	rjmp	.+2      	; 0x58ae <twiReceive+0x5e>
    58ac:	82 e0       	ldi	r24, 0x02	; 2
    58ae:	df 91       	pop	r29
    58b0:	cf 91       	pop	r28
    58b2:	1f 91       	pop	r17
    58b4:	08 95       	ret

000058b6 <__vector_39>:
    58b6:	1f 92       	push	r1
    58b8:	0f 92       	push	r0
    58ba:	0f b6       	in	r0, 0x3f	; 63
    58bc:	0f 92       	push	r0
    58be:	11 24       	eor	r1, r1
    58c0:	0b b6       	in	r0, 0x3b	; 59
    58c2:	0f 92       	push	r0
    58c4:	2f 93       	push	r18
    58c6:	3f 93       	push	r19
    58c8:	4f 93       	push	r20
    58ca:	5f 93       	push	r21
    58cc:	6f 93       	push	r22
    58ce:	7f 93       	push	r23
    58d0:	8f 93       	push	r24
    58d2:	9f 93       	push	r25
    58d4:	af 93       	push	r26
    58d6:	bf 93       	push	r27
    58d8:	ef 93       	push	r30
    58da:	ff 93       	push	r31
    58dc:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    58e0:	8e 2f       	mov	r24, r30
    58e2:	90 e0       	ldi	r25, 0x00	; 0
    58e4:	fc 01       	movw	r30, r24
    58e6:	38 97       	sbiw	r30, 0x08	; 8
    58e8:	e1 35       	cpi	r30, 0x51	; 81
    58ea:	f1 05       	cpc	r31, r1
    58ec:	08 f0       	brcs	.+2      	; 0x58f0 <__vector_39+0x3a>
    58ee:	75 c0       	rjmp	.+234    	; 0x59da <__vector_39+0x124>
    58f0:	88 27       	eor	r24, r24
    58f2:	e4 58       	subi	r30, 0x84	; 132
    58f4:	ff 4f       	sbci	r31, 0xFF	; 255
    58f6:	8f 4f       	sbci	r24, 0xFF	; 255
    58f8:	db c2       	rjmp	.+1462   	; 0x5eb0 <__tablejump2__>
    58fa:	10 92 3a 1a 	sts	0x1A3A, r1	; 0x801a3a <_index.1885>
    58fe:	e0 91 3a 1a 	lds	r30, 0x1A3A	; 0x801a3a <_index.1885>
    5902:	80 91 3d 1a 	lds	r24, 0x1A3D	; 0x801a3d <_twiMessageLen>
    5906:	e8 17       	cp	r30, r24
    5908:	70 f4       	brcc	.+28     	; 0x5926 <__vector_39+0x70>
    590a:	81 e0       	ldi	r24, 0x01	; 1
    590c:	8e 0f       	add	r24, r30
    590e:	80 93 3a 1a 	sts	0x1A3A, r24	; 0x801a3a <_index.1885>
    5912:	f0 e0       	ldi	r31, 0x00	; 0
    5914:	e2 5c       	subi	r30, 0xC2	; 194
    5916:	f5 4e       	sbci	r31, 0xE5	; 229
    5918:	80 81       	ld	r24, Z
    591a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    591e:	85 e8       	ldi	r24, 0x85	; 133
    5920:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    5924:	72 c0       	rjmp	.+228    	; 0x5a0a <__vector_39+0x154>
    5926:	84 e9       	ldi	r24, 0x94	; 148
    5928:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    592c:	80 91 3b 1a 	lds	r24, 0x1A3B	; 0x801a3b <_twiCurrentHandler>
    5930:	90 91 3c 1a 	lds	r25, 0x1A3C	; 0x801a3c <_twiCurrentHandler+0x1>
    5934:	dc 01       	movw	r26, r24
    5936:	12 96       	adiw	r26, 0x02	; 2
    5938:	ed 91       	ld	r30, X+
    593a:	fc 91       	ld	r31, X
    593c:	13 97       	sbiw	r26, 0x03	; 3
    593e:	30 97       	sbiw	r30, 0x00	; 0
    5940:	09 f4       	brne	.+2      	; 0x5944 <__vector_39+0x8e>
    5942:	63 c0       	rjmp	.+198    	; 0x5a0a <__vector_39+0x154>
    5944:	20 e0       	ldi	r18, 0x00	; 0
    5946:	40 e0       	ldi	r20, 0x00	; 0
    5948:	50 e0       	ldi	r21, 0x00	; 0
    594a:	64 e0       	ldi	r22, 0x04	; 4
    594c:	19 95       	eicall
    594e:	5d c0       	rjmp	.+186    	; 0x5a0a <__vector_39+0x154>
    5950:	e0 91 3a 1a 	lds	r30, 0x1A3A	; 0x801a3a <_index.1885>
    5954:	81 e0       	ldi	r24, 0x01	; 1
    5956:	8e 0f       	add	r24, r30
    5958:	80 93 3a 1a 	sts	0x1A3A, r24	; 0x801a3a <_index.1885>
    595c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    5960:	f0 e0       	ldi	r31, 0x00	; 0
    5962:	e2 5c       	subi	r30, 0xC2	; 194
    5964:	f5 4e       	sbci	r31, 0xE5	; 229
    5966:	80 83       	st	Z, r24
    5968:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    596c:	80 34       	cpi	r24, 0x40	; 64
    596e:	11 f4       	brne	.+4      	; 0x5974 <__vector_39+0xbe>
    5970:	10 92 3a 1a 	sts	0x1A3A, r1	; 0x801a3a <_index.1885>
    5974:	20 91 3a 1a 	lds	r18, 0x1A3A	; 0x801a3a <_index.1885>
    5978:	30 e0       	ldi	r19, 0x00	; 0
    597a:	80 91 3d 1a 	lds	r24, 0x1A3D	; 0x801a3d <_twiMessageLen>
    597e:	90 e0       	ldi	r25, 0x00	; 0
    5980:	01 97       	sbiw	r24, 0x01	; 1
    5982:	28 17       	cp	r18, r24
    5984:	39 07       	cpc	r19, r25
    5986:	24 f4       	brge	.+8      	; 0x5990 <__vector_39+0xda>
    5988:	85 ec       	ldi	r24, 0xC5	; 197
    598a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    598e:	3d c0       	rjmp	.+122    	; 0x5a0a <__vector_39+0x154>
    5990:	85 e8       	ldi	r24, 0x85	; 133
    5992:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    5996:	39 c0       	rjmp	.+114    	; 0x5a0a <__vector_39+0x154>
    5998:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    599c:	e0 91 3a 1a 	lds	r30, 0x1A3A	; 0x801a3a <_index.1885>
    59a0:	f0 e0       	ldi	r31, 0x00	; 0
    59a2:	e2 5c       	subi	r30, 0xC2	; 194
    59a4:	f5 4e       	sbci	r31, 0xE5	; 229
    59a6:	80 83       	st	Z, r24
    59a8:	84 e9       	ldi	r24, 0x94	; 148
    59aa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    59ae:	80 91 3b 1a 	lds	r24, 0x1A3B	; 0x801a3b <_twiCurrentHandler>
    59b2:	90 91 3c 1a 	lds	r25, 0x1A3C	; 0x801a3c <_twiCurrentHandler+0x1>
    59b6:	dc 01       	movw	r26, r24
    59b8:	12 96       	adiw	r26, 0x02	; 2
    59ba:	ed 91       	ld	r30, X+
    59bc:	fc 91       	ld	r31, X
    59be:	13 97       	sbiw	r26, 0x03	; 3
    59c0:	30 97       	sbiw	r30, 0x00	; 0
    59c2:	19 f1       	breq	.+70     	; 0x5a0a <__vector_39+0x154>
    59c4:	20 91 3d 1a 	lds	r18, 0x1A3D	; 0x801a3d <_twiMessageLen>
    59c8:	4e e3       	ldi	r20, 0x3E	; 62
    59ca:	5a e1       	ldi	r21, 0x1A	; 26
    59cc:	65 e0       	ldi	r22, 0x05	; 5
    59ce:	19 95       	eicall
    59d0:	1c c0       	rjmp	.+56     	; 0x5a0a <__vector_39+0x154>
    59d2:	85 ea       	ldi	r24, 0xA5	; 165
    59d4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    59d8:	18 c0       	rjmp	.+48     	; 0x5a0a <__vector_39+0x154>
    59da:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    59de:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <_twiCurrentState>
    59e2:	84 e0       	ldi	r24, 0x04	; 4
    59e4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    59e8:	80 91 3b 1a 	lds	r24, 0x1A3B	; 0x801a3b <_twiCurrentHandler>
    59ec:	90 91 3c 1a 	lds	r25, 0x1A3C	; 0x801a3c <_twiCurrentHandler+0x1>
    59f0:	dc 01       	movw	r26, r24
    59f2:	12 96       	adiw	r26, 0x02	; 2
    59f4:	ed 91       	ld	r30, X+
    59f6:	fc 91       	ld	r31, X
    59f8:	13 97       	sbiw	r26, 0x03	; 3
    59fa:	30 97       	sbiw	r30, 0x00	; 0
    59fc:	31 f0       	breq	.+12     	; 0x5a0a <__vector_39+0x154>
    59fe:	20 e0       	ldi	r18, 0x00	; 0
    5a00:	40 e0       	ldi	r20, 0x00	; 0
    5a02:	50 e0       	ldi	r21, 0x00	; 0
    5a04:	60 91 24 02 	lds	r22, 0x0224	; 0x800224 <_twiCurrentState>
    5a08:	19 95       	eicall
    5a0a:	ff 91       	pop	r31
    5a0c:	ef 91       	pop	r30
    5a0e:	bf 91       	pop	r27
    5a10:	af 91       	pop	r26
    5a12:	9f 91       	pop	r25
    5a14:	8f 91       	pop	r24
    5a16:	7f 91       	pop	r23
    5a18:	6f 91       	pop	r22
    5a1a:	5f 91       	pop	r21
    5a1c:	4f 91       	pop	r20
    5a1e:	3f 91       	pop	r19
    5a20:	2f 91       	pop	r18
    5a22:	0f 90       	pop	r0
    5a24:	0b be       	out	0x3b, r0	; 59
    5a26:	0f 90       	pop	r0
    5a28:	0f be       	out	0x3f, r0	; 63
    5a2a:	0f 90       	pop	r0
    5a2c:	1f 90       	pop	r1
    5a2e:	18 95       	reti

00005a30 <fifo_init>:
    5a30:	fc 01       	movw	r30, r24
    5a32:	41 11       	cpse	r20, r1
    5a34:	01 c0       	rjmp	.+2      	; 0x5a38 <fifo_init+0x8>
    5a36:	e8 d3       	rcall	.+2000   	; 0x6208 <abort>
    5a38:	84 2f       	mov	r24, r20
    5a3a:	90 e0       	ldi	r25, 0x00	; 0
    5a3c:	9c 01       	movw	r18, r24
    5a3e:	21 50       	subi	r18, 0x01	; 1
    5a40:	31 09       	sbc	r19, r1
    5a42:	82 23       	and	r24, r18
    5a44:	93 23       	and	r25, r19
    5a46:	89 2b       	or	r24, r25
    5a48:	09 f0       	breq	.+2      	; 0x5a4c <fifo_init+0x1c>
    5a4a:	de d3       	rcall	.+1980   	; 0x6208 <abort>
    5a4c:	41 38       	cpi	r20, 0x81	; 129
    5a4e:	08 f0       	brcs	.+2      	; 0x5a52 <fifo_init+0x22>
    5a50:	db d3       	rcall	.+1974   	; 0x6208 <abort>
    5a52:	12 82       	std	Z+2, r1	; 0x02
    5a54:	13 82       	std	Z+3, r1	; 0x03
    5a56:	44 83       	std	Z+4, r20	; 0x04
    5a58:	44 0f       	add	r20, r20
    5a5a:	41 50       	subi	r20, 0x01	; 1
    5a5c:	45 83       	std	Z+5, r20	; 0x05
    5a5e:	71 83       	std	Z+1, r23	; 0x01
    5a60:	60 83       	st	Z, r22
    5a62:	80 e0       	ldi	r24, 0x00	; 0
    5a64:	90 e0       	ldi	r25, 0x00	; 0
    5a66:	08 95       	ret

00005a68 <__subsf3>:
    5a68:	50 58       	subi	r21, 0x80	; 128

00005a6a <__addsf3>:
    5a6a:	bb 27       	eor	r27, r27
    5a6c:	aa 27       	eor	r26, r26
    5a6e:	0e d0       	rcall	.+28     	; 0x5a8c <__addsf3x>
    5a70:	4d c1       	rjmp	.+666    	; 0x5d0c <__fp_round>
    5a72:	3e d1       	rcall	.+636    	; 0x5cf0 <__fp_pscA>
    5a74:	30 f0       	brcs	.+12     	; 0x5a82 <__addsf3+0x18>
    5a76:	43 d1       	rcall	.+646    	; 0x5cfe <__fp_pscB>
    5a78:	20 f0       	brcs	.+8      	; 0x5a82 <__addsf3+0x18>
    5a7a:	31 f4       	brne	.+12     	; 0x5a88 <__addsf3+0x1e>
    5a7c:	9f 3f       	cpi	r25, 0xFF	; 255
    5a7e:	11 f4       	brne	.+4      	; 0x5a84 <__addsf3+0x1a>
    5a80:	1e f4       	brtc	.+6      	; 0x5a88 <__addsf3+0x1e>
    5a82:	33 c1       	rjmp	.+614    	; 0x5cea <__fp_nan>
    5a84:	0e f4       	brtc	.+2      	; 0x5a88 <__addsf3+0x1e>
    5a86:	e0 95       	com	r30
    5a88:	e7 fb       	bst	r30, 7
    5a8a:	29 c1       	rjmp	.+594    	; 0x5cde <__fp_inf>

00005a8c <__addsf3x>:
    5a8c:	e9 2f       	mov	r30, r25
    5a8e:	4f d1       	rcall	.+670    	; 0x5d2e <__fp_split3>
    5a90:	80 f3       	brcs	.-32     	; 0x5a72 <__addsf3+0x8>
    5a92:	ba 17       	cp	r27, r26
    5a94:	62 07       	cpc	r22, r18
    5a96:	73 07       	cpc	r23, r19
    5a98:	84 07       	cpc	r24, r20
    5a9a:	95 07       	cpc	r25, r21
    5a9c:	18 f0       	brcs	.+6      	; 0x5aa4 <__addsf3x+0x18>
    5a9e:	71 f4       	brne	.+28     	; 0x5abc <__addsf3x+0x30>
    5aa0:	9e f5       	brtc	.+102    	; 0x5b08 <__addsf3x+0x7c>
    5aa2:	67 c1       	rjmp	.+718    	; 0x5d72 <__fp_zero>
    5aa4:	0e f4       	brtc	.+2      	; 0x5aa8 <__addsf3x+0x1c>
    5aa6:	e0 95       	com	r30
    5aa8:	0b 2e       	mov	r0, r27
    5aaa:	ba 2f       	mov	r27, r26
    5aac:	a0 2d       	mov	r26, r0
    5aae:	0b 01       	movw	r0, r22
    5ab0:	b9 01       	movw	r22, r18
    5ab2:	90 01       	movw	r18, r0
    5ab4:	0c 01       	movw	r0, r24
    5ab6:	ca 01       	movw	r24, r20
    5ab8:	a0 01       	movw	r20, r0
    5aba:	11 24       	eor	r1, r1
    5abc:	ff 27       	eor	r31, r31
    5abe:	59 1b       	sub	r21, r25
    5ac0:	99 f0       	breq	.+38     	; 0x5ae8 <__addsf3x+0x5c>
    5ac2:	59 3f       	cpi	r21, 0xF9	; 249
    5ac4:	50 f4       	brcc	.+20     	; 0x5ada <__addsf3x+0x4e>
    5ac6:	50 3e       	cpi	r21, 0xE0	; 224
    5ac8:	68 f1       	brcs	.+90     	; 0x5b24 <__addsf3x+0x98>
    5aca:	1a 16       	cp	r1, r26
    5acc:	f0 40       	sbci	r31, 0x00	; 0
    5ace:	a2 2f       	mov	r26, r18
    5ad0:	23 2f       	mov	r18, r19
    5ad2:	34 2f       	mov	r19, r20
    5ad4:	44 27       	eor	r20, r20
    5ad6:	58 5f       	subi	r21, 0xF8	; 248
    5ad8:	f3 cf       	rjmp	.-26     	; 0x5ac0 <__addsf3x+0x34>
    5ada:	46 95       	lsr	r20
    5adc:	37 95       	ror	r19
    5ade:	27 95       	ror	r18
    5ae0:	a7 95       	ror	r26
    5ae2:	f0 40       	sbci	r31, 0x00	; 0
    5ae4:	53 95       	inc	r21
    5ae6:	c9 f7       	brne	.-14     	; 0x5ada <__addsf3x+0x4e>
    5ae8:	7e f4       	brtc	.+30     	; 0x5b08 <__addsf3x+0x7c>
    5aea:	1f 16       	cp	r1, r31
    5aec:	ba 0b       	sbc	r27, r26
    5aee:	62 0b       	sbc	r22, r18
    5af0:	73 0b       	sbc	r23, r19
    5af2:	84 0b       	sbc	r24, r20
    5af4:	ba f0       	brmi	.+46     	; 0x5b24 <__addsf3x+0x98>
    5af6:	91 50       	subi	r25, 0x01	; 1
    5af8:	a1 f0       	breq	.+40     	; 0x5b22 <__addsf3x+0x96>
    5afa:	ff 0f       	add	r31, r31
    5afc:	bb 1f       	adc	r27, r27
    5afe:	66 1f       	adc	r22, r22
    5b00:	77 1f       	adc	r23, r23
    5b02:	88 1f       	adc	r24, r24
    5b04:	c2 f7       	brpl	.-16     	; 0x5af6 <__addsf3x+0x6a>
    5b06:	0e c0       	rjmp	.+28     	; 0x5b24 <__addsf3x+0x98>
    5b08:	ba 0f       	add	r27, r26
    5b0a:	62 1f       	adc	r22, r18
    5b0c:	73 1f       	adc	r23, r19
    5b0e:	84 1f       	adc	r24, r20
    5b10:	48 f4       	brcc	.+18     	; 0x5b24 <__addsf3x+0x98>
    5b12:	87 95       	ror	r24
    5b14:	77 95       	ror	r23
    5b16:	67 95       	ror	r22
    5b18:	b7 95       	ror	r27
    5b1a:	f7 95       	ror	r31
    5b1c:	9e 3f       	cpi	r25, 0xFE	; 254
    5b1e:	08 f0       	brcs	.+2      	; 0x5b22 <__addsf3x+0x96>
    5b20:	b3 cf       	rjmp	.-154    	; 0x5a88 <__addsf3+0x1e>
    5b22:	93 95       	inc	r25
    5b24:	88 0f       	add	r24, r24
    5b26:	08 f0       	brcs	.+2      	; 0x5b2a <__addsf3x+0x9e>
    5b28:	99 27       	eor	r25, r25
    5b2a:	ee 0f       	add	r30, r30
    5b2c:	97 95       	ror	r25
    5b2e:	87 95       	ror	r24
    5b30:	08 95       	ret

00005b32 <__divsf3>:
    5b32:	0c d0       	rcall	.+24     	; 0x5b4c <__divsf3x>
    5b34:	eb c0       	rjmp	.+470    	; 0x5d0c <__fp_round>
    5b36:	e3 d0       	rcall	.+454    	; 0x5cfe <__fp_pscB>
    5b38:	40 f0       	brcs	.+16     	; 0x5b4a <__divsf3+0x18>
    5b3a:	da d0       	rcall	.+436    	; 0x5cf0 <__fp_pscA>
    5b3c:	30 f0       	brcs	.+12     	; 0x5b4a <__divsf3+0x18>
    5b3e:	21 f4       	brne	.+8      	; 0x5b48 <__divsf3+0x16>
    5b40:	5f 3f       	cpi	r21, 0xFF	; 255
    5b42:	19 f0       	breq	.+6      	; 0x5b4a <__divsf3+0x18>
    5b44:	cc c0       	rjmp	.+408    	; 0x5cde <__fp_inf>
    5b46:	51 11       	cpse	r21, r1
    5b48:	15 c1       	rjmp	.+554    	; 0x5d74 <__fp_szero>
    5b4a:	cf c0       	rjmp	.+414    	; 0x5cea <__fp_nan>

00005b4c <__divsf3x>:
    5b4c:	f0 d0       	rcall	.+480    	; 0x5d2e <__fp_split3>
    5b4e:	98 f3       	brcs	.-26     	; 0x5b36 <__divsf3+0x4>

00005b50 <__divsf3_pse>:
    5b50:	99 23       	and	r25, r25
    5b52:	c9 f3       	breq	.-14     	; 0x5b46 <__divsf3+0x14>
    5b54:	55 23       	and	r21, r21
    5b56:	b1 f3       	breq	.-20     	; 0x5b44 <__divsf3+0x12>
    5b58:	95 1b       	sub	r25, r21
    5b5a:	55 0b       	sbc	r21, r21
    5b5c:	bb 27       	eor	r27, r27
    5b5e:	aa 27       	eor	r26, r26
    5b60:	62 17       	cp	r22, r18
    5b62:	73 07       	cpc	r23, r19
    5b64:	84 07       	cpc	r24, r20
    5b66:	38 f0       	brcs	.+14     	; 0x5b76 <__divsf3_pse+0x26>
    5b68:	9f 5f       	subi	r25, 0xFF	; 255
    5b6a:	5f 4f       	sbci	r21, 0xFF	; 255
    5b6c:	22 0f       	add	r18, r18
    5b6e:	33 1f       	adc	r19, r19
    5b70:	44 1f       	adc	r20, r20
    5b72:	aa 1f       	adc	r26, r26
    5b74:	a9 f3       	breq	.-22     	; 0x5b60 <__divsf3_pse+0x10>
    5b76:	33 d0       	rcall	.+102    	; 0x5bde <__divsf3_pse+0x8e>
    5b78:	0e 2e       	mov	r0, r30
    5b7a:	3a f0       	brmi	.+14     	; 0x5b8a <__divsf3_pse+0x3a>
    5b7c:	e0 e8       	ldi	r30, 0x80	; 128
    5b7e:	30 d0       	rcall	.+96     	; 0x5be0 <__divsf3_pse+0x90>
    5b80:	91 50       	subi	r25, 0x01	; 1
    5b82:	50 40       	sbci	r21, 0x00	; 0
    5b84:	e6 95       	lsr	r30
    5b86:	00 1c       	adc	r0, r0
    5b88:	ca f7       	brpl	.-14     	; 0x5b7c <__divsf3_pse+0x2c>
    5b8a:	29 d0       	rcall	.+82     	; 0x5bde <__divsf3_pse+0x8e>
    5b8c:	fe 2f       	mov	r31, r30
    5b8e:	27 d0       	rcall	.+78     	; 0x5bde <__divsf3_pse+0x8e>
    5b90:	66 0f       	add	r22, r22
    5b92:	77 1f       	adc	r23, r23
    5b94:	88 1f       	adc	r24, r24
    5b96:	bb 1f       	adc	r27, r27
    5b98:	26 17       	cp	r18, r22
    5b9a:	37 07       	cpc	r19, r23
    5b9c:	48 07       	cpc	r20, r24
    5b9e:	ab 07       	cpc	r26, r27
    5ba0:	b0 e8       	ldi	r27, 0x80	; 128
    5ba2:	09 f0       	breq	.+2      	; 0x5ba6 <__divsf3_pse+0x56>
    5ba4:	bb 0b       	sbc	r27, r27
    5ba6:	80 2d       	mov	r24, r0
    5ba8:	bf 01       	movw	r22, r30
    5baa:	ff 27       	eor	r31, r31
    5bac:	93 58       	subi	r25, 0x83	; 131
    5bae:	5f 4f       	sbci	r21, 0xFF	; 255
    5bb0:	2a f0       	brmi	.+10     	; 0x5bbc <__divsf3_pse+0x6c>
    5bb2:	9e 3f       	cpi	r25, 0xFE	; 254
    5bb4:	51 05       	cpc	r21, r1
    5bb6:	68 f0       	brcs	.+26     	; 0x5bd2 <__divsf3_pse+0x82>
    5bb8:	92 c0       	rjmp	.+292    	; 0x5cde <__fp_inf>
    5bba:	dc c0       	rjmp	.+440    	; 0x5d74 <__fp_szero>
    5bbc:	5f 3f       	cpi	r21, 0xFF	; 255
    5bbe:	ec f3       	brlt	.-6      	; 0x5bba <__divsf3_pse+0x6a>
    5bc0:	98 3e       	cpi	r25, 0xE8	; 232
    5bc2:	dc f3       	brlt	.-10     	; 0x5bba <__divsf3_pse+0x6a>
    5bc4:	86 95       	lsr	r24
    5bc6:	77 95       	ror	r23
    5bc8:	67 95       	ror	r22
    5bca:	b7 95       	ror	r27
    5bcc:	f7 95       	ror	r31
    5bce:	9f 5f       	subi	r25, 0xFF	; 255
    5bd0:	c9 f7       	brne	.-14     	; 0x5bc4 <__divsf3_pse+0x74>
    5bd2:	88 0f       	add	r24, r24
    5bd4:	91 1d       	adc	r25, r1
    5bd6:	96 95       	lsr	r25
    5bd8:	87 95       	ror	r24
    5bda:	97 f9       	bld	r25, 7
    5bdc:	08 95       	ret
    5bde:	e1 e0       	ldi	r30, 0x01	; 1
    5be0:	66 0f       	add	r22, r22
    5be2:	77 1f       	adc	r23, r23
    5be4:	88 1f       	adc	r24, r24
    5be6:	bb 1f       	adc	r27, r27
    5be8:	62 17       	cp	r22, r18
    5bea:	73 07       	cpc	r23, r19
    5bec:	84 07       	cpc	r24, r20
    5bee:	ba 07       	cpc	r27, r26
    5bf0:	20 f0       	brcs	.+8      	; 0x5bfa <__divsf3_pse+0xaa>
    5bf2:	62 1b       	sub	r22, r18
    5bf4:	73 0b       	sbc	r23, r19
    5bf6:	84 0b       	sbc	r24, r20
    5bf8:	ba 0b       	sbc	r27, r26
    5bfa:	ee 1f       	adc	r30, r30
    5bfc:	88 f7       	brcc	.-30     	; 0x5be0 <__divsf3_pse+0x90>
    5bfe:	e0 95       	com	r30
    5c00:	08 95       	ret

00005c02 <__fixsfsi>:
    5c02:	04 d0       	rcall	.+8      	; 0x5c0c <__fixunssfsi>
    5c04:	68 94       	set
    5c06:	b1 11       	cpse	r27, r1
    5c08:	b5 c0       	rjmp	.+362    	; 0x5d74 <__fp_szero>
    5c0a:	08 95       	ret

00005c0c <__fixunssfsi>:
    5c0c:	98 d0       	rcall	.+304    	; 0x5d3e <__fp_splitA>
    5c0e:	88 f0       	brcs	.+34     	; 0x5c32 <__fixunssfsi+0x26>
    5c10:	9f 57       	subi	r25, 0x7F	; 127
    5c12:	90 f0       	brcs	.+36     	; 0x5c38 <__fixunssfsi+0x2c>
    5c14:	b9 2f       	mov	r27, r25
    5c16:	99 27       	eor	r25, r25
    5c18:	b7 51       	subi	r27, 0x17	; 23
    5c1a:	a0 f0       	brcs	.+40     	; 0x5c44 <__fixunssfsi+0x38>
    5c1c:	d1 f0       	breq	.+52     	; 0x5c52 <__fixunssfsi+0x46>
    5c1e:	66 0f       	add	r22, r22
    5c20:	77 1f       	adc	r23, r23
    5c22:	88 1f       	adc	r24, r24
    5c24:	99 1f       	adc	r25, r25
    5c26:	1a f0       	brmi	.+6      	; 0x5c2e <__fixunssfsi+0x22>
    5c28:	ba 95       	dec	r27
    5c2a:	c9 f7       	brne	.-14     	; 0x5c1e <__fixunssfsi+0x12>
    5c2c:	12 c0       	rjmp	.+36     	; 0x5c52 <__fixunssfsi+0x46>
    5c2e:	b1 30       	cpi	r27, 0x01	; 1
    5c30:	81 f0       	breq	.+32     	; 0x5c52 <__fixunssfsi+0x46>
    5c32:	9f d0       	rcall	.+318    	; 0x5d72 <__fp_zero>
    5c34:	b1 e0       	ldi	r27, 0x01	; 1
    5c36:	08 95       	ret
    5c38:	9c c0       	rjmp	.+312    	; 0x5d72 <__fp_zero>
    5c3a:	67 2f       	mov	r22, r23
    5c3c:	78 2f       	mov	r23, r24
    5c3e:	88 27       	eor	r24, r24
    5c40:	b8 5f       	subi	r27, 0xF8	; 248
    5c42:	39 f0       	breq	.+14     	; 0x5c52 <__fixunssfsi+0x46>
    5c44:	b9 3f       	cpi	r27, 0xF9	; 249
    5c46:	cc f3       	brlt	.-14     	; 0x5c3a <__fixunssfsi+0x2e>
    5c48:	86 95       	lsr	r24
    5c4a:	77 95       	ror	r23
    5c4c:	67 95       	ror	r22
    5c4e:	b3 95       	inc	r27
    5c50:	d9 f7       	brne	.-10     	; 0x5c48 <__fixunssfsi+0x3c>
    5c52:	3e f4       	brtc	.+14     	; 0x5c62 <__fixunssfsi+0x56>
    5c54:	90 95       	com	r25
    5c56:	80 95       	com	r24
    5c58:	70 95       	com	r23
    5c5a:	61 95       	neg	r22
    5c5c:	7f 4f       	sbci	r23, 0xFF	; 255
    5c5e:	8f 4f       	sbci	r24, 0xFF	; 255
    5c60:	9f 4f       	sbci	r25, 0xFF	; 255
    5c62:	08 95       	ret

00005c64 <__floatunsisf>:
    5c64:	e8 94       	clt
    5c66:	09 c0       	rjmp	.+18     	; 0x5c7a <__floatsisf+0x12>

00005c68 <__floatsisf>:
    5c68:	97 fb       	bst	r25, 7
    5c6a:	3e f4       	brtc	.+14     	; 0x5c7a <__floatsisf+0x12>
    5c6c:	90 95       	com	r25
    5c6e:	80 95       	com	r24
    5c70:	70 95       	com	r23
    5c72:	61 95       	neg	r22
    5c74:	7f 4f       	sbci	r23, 0xFF	; 255
    5c76:	8f 4f       	sbci	r24, 0xFF	; 255
    5c78:	9f 4f       	sbci	r25, 0xFF	; 255
    5c7a:	99 23       	and	r25, r25
    5c7c:	a9 f0       	breq	.+42     	; 0x5ca8 <__floatsisf+0x40>
    5c7e:	f9 2f       	mov	r31, r25
    5c80:	96 e9       	ldi	r25, 0x96	; 150
    5c82:	bb 27       	eor	r27, r27
    5c84:	93 95       	inc	r25
    5c86:	f6 95       	lsr	r31
    5c88:	87 95       	ror	r24
    5c8a:	77 95       	ror	r23
    5c8c:	67 95       	ror	r22
    5c8e:	b7 95       	ror	r27
    5c90:	f1 11       	cpse	r31, r1
    5c92:	f8 cf       	rjmp	.-16     	; 0x5c84 <__floatsisf+0x1c>
    5c94:	fa f4       	brpl	.+62     	; 0x5cd4 <__floatsisf+0x6c>
    5c96:	bb 0f       	add	r27, r27
    5c98:	11 f4       	brne	.+4      	; 0x5c9e <__floatsisf+0x36>
    5c9a:	60 ff       	sbrs	r22, 0
    5c9c:	1b c0       	rjmp	.+54     	; 0x5cd4 <__floatsisf+0x6c>
    5c9e:	6f 5f       	subi	r22, 0xFF	; 255
    5ca0:	7f 4f       	sbci	r23, 0xFF	; 255
    5ca2:	8f 4f       	sbci	r24, 0xFF	; 255
    5ca4:	9f 4f       	sbci	r25, 0xFF	; 255
    5ca6:	16 c0       	rjmp	.+44     	; 0x5cd4 <__floatsisf+0x6c>
    5ca8:	88 23       	and	r24, r24
    5caa:	11 f0       	breq	.+4      	; 0x5cb0 <__floatsisf+0x48>
    5cac:	96 e9       	ldi	r25, 0x96	; 150
    5cae:	11 c0       	rjmp	.+34     	; 0x5cd2 <__floatsisf+0x6a>
    5cb0:	77 23       	and	r23, r23
    5cb2:	21 f0       	breq	.+8      	; 0x5cbc <__floatsisf+0x54>
    5cb4:	9e e8       	ldi	r25, 0x8E	; 142
    5cb6:	87 2f       	mov	r24, r23
    5cb8:	76 2f       	mov	r23, r22
    5cba:	05 c0       	rjmp	.+10     	; 0x5cc6 <__floatsisf+0x5e>
    5cbc:	66 23       	and	r22, r22
    5cbe:	71 f0       	breq	.+28     	; 0x5cdc <__floatsisf+0x74>
    5cc0:	96 e8       	ldi	r25, 0x86	; 134
    5cc2:	86 2f       	mov	r24, r22
    5cc4:	70 e0       	ldi	r23, 0x00	; 0
    5cc6:	60 e0       	ldi	r22, 0x00	; 0
    5cc8:	2a f0       	brmi	.+10     	; 0x5cd4 <__floatsisf+0x6c>
    5cca:	9a 95       	dec	r25
    5ccc:	66 0f       	add	r22, r22
    5cce:	77 1f       	adc	r23, r23
    5cd0:	88 1f       	adc	r24, r24
    5cd2:	da f7       	brpl	.-10     	; 0x5cca <__floatsisf+0x62>
    5cd4:	88 0f       	add	r24, r24
    5cd6:	96 95       	lsr	r25
    5cd8:	87 95       	ror	r24
    5cda:	97 f9       	bld	r25, 7
    5cdc:	08 95       	ret

00005cde <__fp_inf>:
    5cde:	97 f9       	bld	r25, 7
    5ce0:	9f 67       	ori	r25, 0x7F	; 127
    5ce2:	80 e8       	ldi	r24, 0x80	; 128
    5ce4:	70 e0       	ldi	r23, 0x00	; 0
    5ce6:	60 e0       	ldi	r22, 0x00	; 0
    5ce8:	08 95       	ret

00005cea <__fp_nan>:
    5cea:	9f ef       	ldi	r25, 0xFF	; 255
    5cec:	80 ec       	ldi	r24, 0xC0	; 192
    5cee:	08 95       	ret

00005cf0 <__fp_pscA>:
    5cf0:	00 24       	eor	r0, r0
    5cf2:	0a 94       	dec	r0
    5cf4:	16 16       	cp	r1, r22
    5cf6:	17 06       	cpc	r1, r23
    5cf8:	18 06       	cpc	r1, r24
    5cfa:	09 06       	cpc	r0, r25
    5cfc:	08 95       	ret

00005cfe <__fp_pscB>:
    5cfe:	00 24       	eor	r0, r0
    5d00:	0a 94       	dec	r0
    5d02:	12 16       	cp	r1, r18
    5d04:	13 06       	cpc	r1, r19
    5d06:	14 06       	cpc	r1, r20
    5d08:	05 06       	cpc	r0, r21
    5d0a:	08 95       	ret

00005d0c <__fp_round>:
    5d0c:	09 2e       	mov	r0, r25
    5d0e:	03 94       	inc	r0
    5d10:	00 0c       	add	r0, r0
    5d12:	11 f4       	brne	.+4      	; 0x5d18 <__fp_round+0xc>
    5d14:	88 23       	and	r24, r24
    5d16:	52 f0       	brmi	.+20     	; 0x5d2c <__fp_round+0x20>
    5d18:	bb 0f       	add	r27, r27
    5d1a:	40 f4       	brcc	.+16     	; 0x5d2c <__fp_round+0x20>
    5d1c:	bf 2b       	or	r27, r31
    5d1e:	11 f4       	brne	.+4      	; 0x5d24 <__fp_round+0x18>
    5d20:	60 ff       	sbrs	r22, 0
    5d22:	04 c0       	rjmp	.+8      	; 0x5d2c <__fp_round+0x20>
    5d24:	6f 5f       	subi	r22, 0xFF	; 255
    5d26:	7f 4f       	sbci	r23, 0xFF	; 255
    5d28:	8f 4f       	sbci	r24, 0xFF	; 255
    5d2a:	9f 4f       	sbci	r25, 0xFF	; 255
    5d2c:	08 95       	ret

00005d2e <__fp_split3>:
    5d2e:	57 fd       	sbrc	r21, 7
    5d30:	90 58       	subi	r25, 0x80	; 128
    5d32:	44 0f       	add	r20, r20
    5d34:	55 1f       	adc	r21, r21
    5d36:	59 f0       	breq	.+22     	; 0x5d4e <__fp_splitA+0x10>
    5d38:	5f 3f       	cpi	r21, 0xFF	; 255
    5d3a:	71 f0       	breq	.+28     	; 0x5d58 <__fp_splitA+0x1a>
    5d3c:	47 95       	ror	r20

00005d3e <__fp_splitA>:
    5d3e:	88 0f       	add	r24, r24
    5d40:	97 fb       	bst	r25, 7
    5d42:	99 1f       	adc	r25, r25
    5d44:	61 f0       	breq	.+24     	; 0x5d5e <__fp_splitA+0x20>
    5d46:	9f 3f       	cpi	r25, 0xFF	; 255
    5d48:	79 f0       	breq	.+30     	; 0x5d68 <__fp_splitA+0x2a>
    5d4a:	87 95       	ror	r24
    5d4c:	08 95       	ret
    5d4e:	12 16       	cp	r1, r18
    5d50:	13 06       	cpc	r1, r19
    5d52:	14 06       	cpc	r1, r20
    5d54:	55 1f       	adc	r21, r21
    5d56:	f2 cf       	rjmp	.-28     	; 0x5d3c <__fp_split3+0xe>
    5d58:	46 95       	lsr	r20
    5d5a:	f1 df       	rcall	.-30     	; 0x5d3e <__fp_splitA>
    5d5c:	08 c0       	rjmp	.+16     	; 0x5d6e <__fp_splitA+0x30>
    5d5e:	16 16       	cp	r1, r22
    5d60:	17 06       	cpc	r1, r23
    5d62:	18 06       	cpc	r1, r24
    5d64:	99 1f       	adc	r25, r25
    5d66:	f1 cf       	rjmp	.-30     	; 0x5d4a <__fp_splitA+0xc>
    5d68:	86 95       	lsr	r24
    5d6a:	71 05       	cpc	r23, r1
    5d6c:	61 05       	cpc	r22, r1
    5d6e:	08 94       	sec
    5d70:	08 95       	ret

00005d72 <__fp_zero>:
    5d72:	e8 94       	clt

00005d74 <__fp_szero>:
    5d74:	bb 27       	eor	r27, r27
    5d76:	66 27       	eor	r22, r22
    5d78:	77 27       	eor	r23, r23
    5d7a:	cb 01       	movw	r24, r22
    5d7c:	97 f9       	bld	r25, 7
    5d7e:	08 95       	ret

00005d80 <__mulsf3>:
    5d80:	0b d0       	rcall	.+22     	; 0x5d98 <__mulsf3x>
    5d82:	c4 cf       	rjmp	.-120    	; 0x5d0c <__fp_round>
    5d84:	b5 df       	rcall	.-150    	; 0x5cf0 <__fp_pscA>
    5d86:	28 f0       	brcs	.+10     	; 0x5d92 <__mulsf3+0x12>
    5d88:	ba df       	rcall	.-140    	; 0x5cfe <__fp_pscB>
    5d8a:	18 f0       	brcs	.+6      	; 0x5d92 <__mulsf3+0x12>
    5d8c:	95 23       	and	r25, r21
    5d8e:	09 f0       	breq	.+2      	; 0x5d92 <__mulsf3+0x12>
    5d90:	a6 cf       	rjmp	.-180    	; 0x5cde <__fp_inf>
    5d92:	ab cf       	rjmp	.-170    	; 0x5cea <__fp_nan>
    5d94:	11 24       	eor	r1, r1
    5d96:	ee cf       	rjmp	.-36     	; 0x5d74 <__fp_szero>

00005d98 <__mulsf3x>:
    5d98:	ca df       	rcall	.-108    	; 0x5d2e <__fp_split3>
    5d9a:	a0 f3       	brcs	.-24     	; 0x5d84 <__mulsf3+0x4>

00005d9c <__mulsf3_pse>:
    5d9c:	95 9f       	mul	r25, r21
    5d9e:	d1 f3       	breq	.-12     	; 0x5d94 <__mulsf3+0x14>
    5da0:	95 0f       	add	r25, r21
    5da2:	50 e0       	ldi	r21, 0x00	; 0
    5da4:	55 1f       	adc	r21, r21
    5da6:	62 9f       	mul	r22, r18
    5da8:	f0 01       	movw	r30, r0
    5daa:	72 9f       	mul	r23, r18
    5dac:	bb 27       	eor	r27, r27
    5dae:	f0 0d       	add	r31, r0
    5db0:	b1 1d       	adc	r27, r1
    5db2:	63 9f       	mul	r22, r19
    5db4:	aa 27       	eor	r26, r26
    5db6:	f0 0d       	add	r31, r0
    5db8:	b1 1d       	adc	r27, r1
    5dba:	aa 1f       	adc	r26, r26
    5dbc:	64 9f       	mul	r22, r20
    5dbe:	66 27       	eor	r22, r22
    5dc0:	b0 0d       	add	r27, r0
    5dc2:	a1 1d       	adc	r26, r1
    5dc4:	66 1f       	adc	r22, r22
    5dc6:	82 9f       	mul	r24, r18
    5dc8:	22 27       	eor	r18, r18
    5dca:	b0 0d       	add	r27, r0
    5dcc:	a1 1d       	adc	r26, r1
    5dce:	62 1f       	adc	r22, r18
    5dd0:	73 9f       	mul	r23, r19
    5dd2:	b0 0d       	add	r27, r0
    5dd4:	a1 1d       	adc	r26, r1
    5dd6:	62 1f       	adc	r22, r18
    5dd8:	83 9f       	mul	r24, r19
    5dda:	a0 0d       	add	r26, r0
    5ddc:	61 1d       	adc	r22, r1
    5dde:	22 1f       	adc	r18, r18
    5de0:	74 9f       	mul	r23, r20
    5de2:	33 27       	eor	r19, r19
    5de4:	a0 0d       	add	r26, r0
    5de6:	61 1d       	adc	r22, r1
    5de8:	23 1f       	adc	r18, r19
    5dea:	84 9f       	mul	r24, r20
    5dec:	60 0d       	add	r22, r0
    5dee:	21 1d       	adc	r18, r1
    5df0:	82 2f       	mov	r24, r18
    5df2:	76 2f       	mov	r23, r22
    5df4:	6a 2f       	mov	r22, r26
    5df6:	11 24       	eor	r1, r1
    5df8:	9f 57       	subi	r25, 0x7F	; 127
    5dfa:	50 40       	sbci	r21, 0x00	; 0
    5dfc:	8a f0       	brmi	.+34     	; 0x5e20 <__mulsf3_pse+0x84>
    5dfe:	e1 f0       	breq	.+56     	; 0x5e38 <__mulsf3_pse+0x9c>
    5e00:	88 23       	and	r24, r24
    5e02:	4a f0       	brmi	.+18     	; 0x5e16 <__mulsf3_pse+0x7a>
    5e04:	ee 0f       	add	r30, r30
    5e06:	ff 1f       	adc	r31, r31
    5e08:	bb 1f       	adc	r27, r27
    5e0a:	66 1f       	adc	r22, r22
    5e0c:	77 1f       	adc	r23, r23
    5e0e:	88 1f       	adc	r24, r24
    5e10:	91 50       	subi	r25, 0x01	; 1
    5e12:	50 40       	sbci	r21, 0x00	; 0
    5e14:	a9 f7       	brne	.-22     	; 0x5e00 <__mulsf3_pse+0x64>
    5e16:	9e 3f       	cpi	r25, 0xFE	; 254
    5e18:	51 05       	cpc	r21, r1
    5e1a:	70 f0       	brcs	.+28     	; 0x5e38 <__mulsf3_pse+0x9c>
    5e1c:	60 cf       	rjmp	.-320    	; 0x5cde <__fp_inf>
    5e1e:	aa cf       	rjmp	.-172    	; 0x5d74 <__fp_szero>
    5e20:	5f 3f       	cpi	r21, 0xFF	; 255
    5e22:	ec f3       	brlt	.-6      	; 0x5e1e <__mulsf3_pse+0x82>
    5e24:	98 3e       	cpi	r25, 0xE8	; 232
    5e26:	dc f3       	brlt	.-10     	; 0x5e1e <__mulsf3_pse+0x82>
    5e28:	86 95       	lsr	r24
    5e2a:	77 95       	ror	r23
    5e2c:	67 95       	ror	r22
    5e2e:	b7 95       	ror	r27
    5e30:	f7 95       	ror	r31
    5e32:	e7 95       	ror	r30
    5e34:	9f 5f       	subi	r25, 0xFF	; 255
    5e36:	c1 f7       	brne	.-16     	; 0x5e28 <__mulsf3_pse+0x8c>
    5e38:	fe 2b       	or	r31, r30
    5e3a:	88 0f       	add	r24, r24
    5e3c:	91 1d       	adc	r25, r1
    5e3e:	96 95       	lsr	r25
    5e40:	87 95       	ror	r24
    5e42:	97 f9       	bld	r25, 7
    5e44:	08 95       	ret

00005e46 <__divmodhi4>:
    5e46:	97 fb       	bst	r25, 7
    5e48:	07 2e       	mov	r0, r23
    5e4a:	16 f4       	brtc	.+4      	; 0x5e50 <__divmodhi4+0xa>
    5e4c:	00 94       	com	r0
    5e4e:	06 d0       	rcall	.+12     	; 0x5e5c <__divmodhi4_neg1>
    5e50:	77 fd       	sbrc	r23, 7
    5e52:	08 d0       	rcall	.+16     	; 0x5e64 <__divmodhi4_neg2>
    5e54:	35 d0       	rcall	.+106    	; 0x5ec0 <__udivmodhi4>
    5e56:	07 fc       	sbrc	r0, 7
    5e58:	05 d0       	rcall	.+10     	; 0x5e64 <__divmodhi4_neg2>
    5e5a:	3e f4       	brtc	.+14     	; 0x5e6a <__divmodhi4_exit>

00005e5c <__divmodhi4_neg1>:
    5e5c:	90 95       	com	r25
    5e5e:	81 95       	neg	r24
    5e60:	9f 4f       	sbci	r25, 0xFF	; 255
    5e62:	08 95       	ret

00005e64 <__divmodhi4_neg2>:
    5e64:	70 95       	com	r23
    5e66:	61 95       	neg	r22
    5e68:	7f 4f       	sbci	r23, 0xFF	; 255

00005e6a <__divmodhi4_exit>:
    5e6a:	08 95       	ret

00005e6c <__udivmodsi4>:
    5e6c:	a1 e2       	ldi	r26, 0x21	; 33
    5e6e:	1a 2e       	mov	r1, r26
    5e70:	aa 1b       	sub	r26, r26
    5e72:	bb 1b       	sub	r27, r27
    5e74:	fd 01       	movw	r30, r26
    5e76:	0d c0       	rjmp	.+26     	; 0x5e92 <__udivmodsi4_ep>

00005e78 <__udivmodsi4_loop>:
    5e78:	aa 1f       	adc	r26, r26
    5e7a:	bb 1f       	adc	r27, r27
    5e7c:	ee 1f       	adc	r30, r30
    5e7e:	ff 1f       	adc	r31, r31
    5e80:	a2 17       	cp	r26, r18
    5e82:	b3 07       	cpc	r27, r19
    5e84:	e4 07       	cpc	r30, r20
    5e86:	f5 07       	cpc	r31, r21
    5e88:	20 f0       	brcs	.+8      	; 0x5e92 <__udivmodsi4_ep>
    5e8a:	a2 1b       	sub	r26, r18
    5e8c:	b3 0b       	sbc	r27, r19
    5e8e:	e4 0b       	sbc	r30, r20
    5e90:	f5 0b       	sbc	r31, r21

00005e92 <__udivmodsi4_ep>:
    5e92:	66 1f       	adc	r22, r22
    5e94:	77 1f       	adc	r23, r23
    5e96:	88 1f       	adc	r24, r24
    5e98:	99 1f       	adc	r25, r25
    5e9a:	1a 94       	dec	r1
    5e9c:	69 f7       	brne	.-38     	; 0x5e78 <__udivmodsi4_loop>
    5e9e:	60 95       	com	r22
    5ea0:	70 95       	com	r23
    5ea2:	80 95       	com	r24
    5ea4:	90 95       	com	r25
    5ea6:	9b 01       	movw	r18, r22
    5ea8:	ac 01       	movw	r20, r24
    5eaa:	bd 01       	movw	r22, r26
    5eac:	cf 01       	movw	r24, r30
    5eae:	08 95       	ret

00005eb0 <__tablejump2__>:
    5eb0:	ee 0f       	add	r30, r30
    5eb2:	ff 1f       	adc	r31, r31
    5eb4:	88 1f       	adc	r24, r24
    5eb6:	8b bf       	out	0x3b, r24	; 59
    5eb8:	07 90       	elpm	r0, Z+
    5eba:	f6 91       	elpm	r31, Z
    5ebc:	e0 2d       	mov	r30, r0
    5ebe:	19 94       	eijmp

00005ec0 <__udivmodhi4>:
    5ec0:	aa 1b       	sub	r26, r26
    5ec2:	bb 1b       	sub	r27, r27
    5ec4:	51 e1       	ldi	r21, 0x11	; 17
    5ec6:	07 c0       	rjmp	.+14     	; 0x5ed6 <__udivmodhi4_ep>

00005ec8 <__udivmodhi4_loop>:
    5ec8:	aa 1f       	adc	r26, r26
    5eca:	bb 1f       	adc	r27, r27
    5ecc:	a6 17       	cp	r26, r22
    5ece:	b7 07       	cpc	r27, r23
    5ed0:	10 f0       	brcs	.+4      	; 0x5ed6 <__udivmodhi4_ep>
    5ed2:	a6 1b       	sub	r26, r22
    5ed4:	b7 0b       	sbc	r27, r23

00005ed6 <__udivmodhi4_ep>:
    5ed6:	88 1f       	adc	r24, r24
    5ed8:	99 1f       	adc	r25, r25
    5eda:	5a 95       	dec	r21
    5edc:	a9 f7       	brne	.-22     	; 0x5ec8 <__udivmodhi4_loop>
    5ede:	80 95       	com	r24
    5ee0:	90 95       	com	r25
    5ee2:	bc 01       	movw	r22, r24
    5ee4:	cd 01       	movw	r24, r26
    5ee6:	08 95       	ret

00005ee8 <calloc>:
    5ee8:	0f 93       	push	r16
    5eea:	1f 93       	push	r17
    5eec:	cf 93       	push	r28
    5eee:	df 93       	push	r29
    5ef0:	86 9f       	mul	r24, r22
    5ef2:	80 01       	movw	r16, r0
    5ef4:	87 9f       	mul	r24, r23
    5ef6:	10 0d       	add	r17, r0
    5ef8:	96 9f       	mul	r25, r22
    5efa:	10 0d       	add	r17, r0
    5efc:	11 24       	eor	r1, r1
    5efe:	c8 01       	movw	r24, r16
    5f00:	0d d0       	rcall	.+26     	; 0x5f1c <malloc>
    5f02:	ec 01       	movw	r28, r24
    5f04:	00 97       	sbiw	r24, 0x00	; 0
    5f06:	21 f0       	breq	.+8      	; 0x5f10 <calloc+0x28>
    5f08:	a8 01       	movw	r20, r16
    5f0a:	60 e0       	ldi	r22, 0x00	; 0
    5f0c:	70 e0       	ldi	r23, 0x00	; 0
    5f0e:	89 d1       	rcall	.+786    	; 0x6222 <memset>
    5f10:	ce 01       	movw	r24, r28
    5f12:	df 91       	pop	r29
    5f14:	cf 91       	pop	r28
    5f16:	1f 91       	pop	r17
    5f18:	0f 91       	pop	r16
    5f1a:	08 95       	ret

00005f1c <malloc>:
    5f1c:	0f 93       	push	r16
    5f1e:	1f 93       	push	r17
    5f20:	cf 93       	push	r28
    5f22:	df 93       	push	r29
    5f24:	82 30       	cpi	r24, 0x02	; 2
    5f26:	91 05       	cpc	r25, r1
    5f28:	10 f4       	brcc	.+4      	; 0x5f2e <malloc+0x12>
    5f2a:	82 e0       	ldi	r24, 0x02	; 2
    5f2c:	90 e0       	ldi	r25, 0x00	; 0
    5f2e:	e0 91 81 1a 	lds	r30, 0x1A81	; 0x801a81 <__flp>
    5f32:	f0 91 82 1a 	lds	r31, 0x1A82	; 0x801a82 <__flp+0x1>
    5f36:	20 e0       	ldi	r18, 0x00	; 0
    5f38:	30 e0       	ldi	r19, 0x00	; 0
    5f3a:	a0 e0       	ldi	r26, 0x00	; 0
    5f3c:	b0 e0       	ldi	r27, 0x00	; 0
    5f3e:	30 97       	sbiw	r30, 0x00	; 0
    5f40:	19 f1       	breq	.+70     	; 0x5f88 <malloc+0x6c>
    5f42:	40 81       	ld	r20, Z
    5f44:	51 81       	ldd	r21, Z+1	; 0x01
    5f46:	02 81       	ldd	r16, Z+2	; 0x02
    5f48:	13 81       	ldd	r17, Z+3	; 0x03
    5f4a:	48 17       	cp	r20, r24
    5f4c:	59 07       	cpc	r21, r25
    5f4e:	c8 f0       	brcs	.+50     	; 0x5f82 <malloc+0x66>
    5f50:	84 17       	cp	r24, r20
    5f52:	95 07       	cpc	r25, r21
    5f54:	69 f4       	brne	.+26     	; 0x5f70 <malloc+0x54>
    5f56:	10 97       	sbiw	r26, 0x00	; 0
    5f58:	31 f0       	breq	.+12     	; 0x5f66 <malloc+0x4a>
    5f5a:	12 96       	adiw	r26, 0x02	; 2
    5f5c:	0c 93       	st	X, r16
    5f5e:	12 97       	sbiw	r26, 0x02	; 2
    5f60:	13 96       	adiw	r26, 0x03	; 3
    5f62:	1c 93       	st	X, r17
    5f64:	27 c0       	rjmp	.+78     	; 0x5fb4 <malloc+0x98>
    5f66:	00 93 81 1a 	sts	0x1A81, r16	; 0x801a81 <__flp>
    5f6a:	10 93 82 1a 	sts	0x1A82, r17	; 0x801a82 <__flp+0x1>
    5f6e:	22 c0       	rjmp	.+68     	; 0x5fb4 <malloc+0x98>
    5f70:	21 15       	cp	r18, r1
    5f72:	31 05       	cpc	r19, r1
    5f74:	19 f0       	breq	.+6      	; 0x5f7c <malloc+0x60>
    5f76:	42 17       	cp	r20, r18
    5f78:	53 07       	cpc	r21, r19
    5f7a:	18 f4       	brcc	.+6      	; 0x5f82 <malloc+0x66>
    5f7c:	9a 01       	movw	r18, r20
    5f7e:	bd 01       	movw	r22, r26
    5f80:	ef 01       	movw	r28, r30
    5f82:	df 01       	movw	r26, r30
    5f84:	f8 01       	movw	r30, r16
    5f86:	db cf       	rjmp	.-74     	; 0x5f3e <malloc+0x22>
    5f88:	21 15       	cp	r18, r1
    5f8a:	31 05       	cpc	r19, r1
    5f8c:	f9 f0       	breq	.+62     	; 0x5fcc <malloc+0xb0>
    5f8e:	28 1b       	sub	r18, r24
    5f90:	39 0b       	sbc	r19, r25
    5f92:	24 30       	cpi	r18, 0x04	; 4
    5f94:	31 05       	cpc	r19, r1
    5f96:	80 f4       	brcc	.+32     	; 0x5fb8 <malloc+0x9c>
    5f98:	8a 81       	ldd	r24, Y+2	; 0x02
    5f9a:	9b 81       	ldd	r25, Y+3	; 0x03
    5f9c:	61 15       	cp	r22, r1
    5f9e:	71 05       	cpc	r23, r1
    5fa0:	21 f0       	breq	.+8      	; 0x5faa <malloc+0x8e>
    5fa2:	fb 01       	movw	r30, r22
    5fa4:	93 83       	std	Z+3, r25	; 0x03
    5fa6:	82 83       	std	Z+2, r24	; 0x02
    5fa8:	04 c0       	rjmp	.+8      	; 0x5fb2 <malloc+0x96>
    5faa:	90 93 82 1a 	sts	0x1A82, r25	; 0x801a82 <__flp+0x1>
    5fae:	80 93 81 1a 	sts	0x1A81, r24	; 0x801a81 <__flp>
    5fb2:	fe 01       	movw	r30, r28
    5fb4:	32 96       	adiw	r30, 0x02	; 2
    5fb6:	44 c0       	rjmp	.+136    	; 0x6040 <malloc+0x124>
    5fb8:	fe 01       	movw	r30, r28
    5fba:	e2 0f       	add	r30, r18
    5fbc:	f3 1f       	adc	r31, r19
    5fbe:	81 93       	st	Z+, r24
    5fc0:	91 93       	st	Z+, r25
    5fc2:	22 50       	subi	r18, 0x02	; 2
    5fc4:	31 09       	sbc	r19, r1
    5fc6:	39 83       	std	Y+1, r19	; 0x01
    5fc8:	28 83       	st	Y, r18
    5fca:	3a c0       	rjmp	.+116    	; 0x6040 <malloc+0x124>
    5fcc:	20 91 7f 1a 	lds	r18, 0x1A7F	; 0x801a7f <__brkval>
    5fd0:	30 91 80 1a 	lds	r19, 0x1A80	; 0x801a80 <__brkval+0x1>
    5fd4:	23 2b       	or	r18, r19
    5fd6:	41 f4       	brne	.+16     	; 0x5fe8 <malloc+0xcc>
    5fd8:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    5fdc:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    5fe0:	30 93 80 1a 	sts	0x1A80, r19	; 0x801a80 <__brkval+0x1>
    5fe4:	20 93 7f 1a 	sts	0x1A7F, r18	; 0x801a7f <__brkval>
    5fe8:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    5fec:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    5ff0:	21 15       	cp	r18, r1
    5ff2:	31 05       	cpc	r19, r1
    5ff4:	41 f4       	brne	.+16     	; 0x6006 <malloc+0xea>
    5ff6:	2d b7       	in	r18, 0x3d	; 61
    5ff8:	3e b7       	in	r19, 0x3e	; 62
    5ffa:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    5ffe:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    6002:	24 1b       	sub	r18, r20
    6004:	35 0b       	sbc	r19, r21
    6006:	e0 91 7f 1a 	lds	r30, 0x1A7F	; 0x801a7f <__brkval>
    600a:	f0 91 80 1a 	lds	r31, 0x1A80	; 0x801a80 <__brkval+0x1>
    600e:	e2 17       	cp	r30, r18
    6010:	f3 07       	cpc	r31, r19
    6012:	a0 f4       	brcc	.+40     	; 0x603c <malloc+0x120>
    6014:	2e 1b       	sub	r18, r30
    6016:	3f 0b       	sbc	r19, r31
    6018:	28 17       	cp	r18, r24
    601a:	39 07       	cpc	r19, r25
    601c:	78 f0       	brcs	.+30     	; 0x603c <malloc+0x120>
    601e:	ac 01       	movw	r20, r24
    6020:	4e 5f       	subi	r20, 0xFE	; 254
    6022:	5f 4f       	sbci	r21, 0xFF	; 255
    6024:	24 17       	cp	r18, r20
    6026:	35 07       	cpc	r19, r21
    6028:	48 f0       	brcs	.+18     	; 0x603c <malloc+0x120>
    602a:	4e 0f       	add	r20, r30
    602c:	5f 1f       	adc	r21, r31
    602e:	50 93 80 1a 	sts	0x1A80, r21	; 0x801a80 <__brkval+0x1>
    6032:	40 93 7f 1a 	sts	0x1A7F, r20	; 0x801a7f <__brkval>
    6036:	81 93       	st	Z+, r24
    6038:	91 93       	st	Z+, r25
    603a:	02 c0       	rjmp	.+4      	; 0x6040 <malloc+0x124>
    603c:	e0 e0       	ldi	r30, 0x00	; 0
    603e:	f0 e0       	ldi	r31, 0x00	; 0
    6040:	cf 01       	movw	r24, r30
    6042:	df 91       	pop	r29
    6044:	cf 91       	pop	r28
    6046:	1f 91       	pop	r17
    6048:	0f 91       	pop	r16
    604a:	08 95       	ret

0000604c <free>:
    604c:	cf 93       	push	r28
    604e:	df 93       	push	r29
    6050:	00 97       	sbiw	r24, 0x00	; 0
    6052:	09 f4       	brne	.+2      	; 0x6056 <free+0xa>
    6054:	81 c0       	rjmp	.+258    	; 0x6158 <free+0x10c>
    6056:	fc 01       	movw	r30, r24
    6058:	32 97       	sbiw	r30, 0x02	; 2
    605a:	13 82       	std	Z+3, r1	; 0x03
    605c:	12 82       	std	Z+2, r1	; 0x02
    605e:	a0 91 81 1a 	lds	r26, 0x1A81	; 0x801a81 <__flp>
    6062:	b0 91 82 1a 	lds	r27, 0x1A82	; 0x801a82 <__flp+0x1>
    6066:	10 97       	sbiw	r26, 0x00	; 0
    6068:	81 f4       	brne	.+32     	; 0x608a <free+0x3e>
    606a:	20 81       	ld	r18, Z
    606c:	31 81       	ldd	r19, Z+1	; 0x01
    606e:	82 0f       	add	r24, r18
    6070:	93 1f       	adc	r25, r19
    6072:	20 91 7f 1a 	lds	r18, 0x1A7F	; 0x801a7f <__brkval>
    6076:	30 91 80 1a 	lds	r19, 0x1A80	; 0x801a80 <__brkval+0x1>
    607a:	28 17       	cp	r18, r24
    607c:	39 07       	cpc	r19, r25
    607e:	51 f5       	brne	.+84     	; 0x60d4 <free+0x88>
    6080:	f0 93 80 1a 	sts	0x1A80, r31	; 0x801a80 <__brkval+0x1>
    6084:	e0 93 7f 1a 	sts	0x1A7F, r30	; 0x801a7f <__brkval>
    6088:	67 c0       	rjmp	.+206    	; 0x6158 <free+0x10c>
    608a:	ed 01       	movw	r28, r26
    608c:	20 e0       	ldi	r18, 0x00	; 0
    608e:	30 e0       	ldi	r19, 0x00	; 0
    6090:	ce 17       	cp	r28, r30
    6092:	df 07       	cpc	r29, r31
    6094:	40 f4       	brcc	.+16     	; 0x60a6 <free+0x5a>
    6096:	4a 81       	ldd	r20, Y+2	; 0x02
    6098:	5b 81       	ldd	r21, Y+3	; 0x03
    609a:	9e 01       	movw	r18, r28
    609c:	41 15       	cp	r20, r1
    609e:	51 05       	cpc	r21, r1
    60a0:	f1 f0       	breq	.+60     	; 0x60de <free+0x92>
    60a2:	ea 01       	movw	r28, r20
    60a4:	f5 cf       	rjmp	.-22     	; 0x6090 <free+0x44>
    60a6:	d3 83       	std	Z+3, r29	; 0x03
    60a8:	c2 83       	std	Z+2, r28	; 0x02
    60aa:	40 81       	ld	r20, Z
    60ac:	51 81       	ldd	r21, Z+1	; 0x01
    60ae:	84 0f       	add	r24, r20
    60b0:	95 1f       	adc	r25, r21
    60b2:	c8 17       	cp	r28, r24
    60b4:	d9 07       	cpc	r29, r25
    60b6:	59 f4       	brne	.+22     	; 0x60ce <free+0x82>
    60b8:	88 81       	ld	r24, Y
    60ba:	99 81       	ldd	r25, Y+1	; 0x01
    60bc:	84 0f       	add	r24, r20
    60be:	95 1f       	adc	r25, r21
    60c0:	02 96       	adiw	r24, 0x02	; 2
    60c2:	91 83       	std	Z+1, r25	; 0x01
    60c4:	80 83       	st	Z, r24
    60c6:	8a 81       	ldd	r24, Y+2	; 0x02
    60c8:	9b 81       	ldd	r25, Y+3	; 0x03
    60ca:	93 83       	std	Z+3, r25	; 0x03
    60cc:	82 83       	std	Z+2, r24	; 0x02
    60ce:	21 15       	cp	r18, r1
    60d0:	31 05       	cpc	r19, r1
    60d2:	29 f4       	brne	.+10     	; 0x60de <free+0x92>
    60d4:	f0 93 82 1a 	sts	0x1A82, r31	; 0x801a82 <__flp+0x1>
    60d8:	e0 93 81 1a 	sts	0x1A81, r30	; 0x801a81 <__flp>
    60dc:	3d c0       	rjmp	.+122    	; 0x6158 <free+0x10c>
    60de:	e9 01       	movw	r28, r18
    60e0:	fb 83       	std	Y+3, r31	; 0x03
    60e2:	ea 83       	std	Y+2, r30	; 0x02
    60e4:	49 91       	ld	r20, Y+
    60e6:	59 91       	ld	r21, Y+
    60e8:	c4 0f       	add	r28, r20
    60ea:	d5 1f       	adc	r29, r21
    60ec:	ec 17       	cp	r30, r28
    60ee:	fd 07       	cpc	r31, r29
    60f0:	61 f4       	brne	.+24     	; 0x610a <free+0xbe>
    60f2:	80 81       	ld	r24, Z
    60f4:	91 81       	ldd	r25, Z+1	; 0x01
    60f6:	84 0f       	add	r24, r20
    60f8:	95 1f       	adc	r25, r21
    60fa:	02 96       	adiw	r24, 0x02	; 2
    60fc:	e9 01       	movw	r28, r18
    60fe:	99 83       	std	Y+1, r25	; 0x01
    6100:	88 83       	st	Y, r24
    6102:	82 81       	ldd	r24, Z+2	; 0x02
    6104:	93 81       	ldd	r25, Z+3	; 0x03
    6106:	9b 83       	std	Y+3, r25	; 0x03
    6108:	8a 83       	std	Y+2, r24	; 0x02
    610a:	e0 e0       	ldi	r30, 0x00	; 0
    610c:	f0 e0       	ldi	r31, 0x00	; 0
    610e:	12 96       	adiw	r26, 0x02	; 2
    6110:	8d 91       	ld	r24, X+
    6112:	9c 91       	ld	r25, X
    6114:	13 97       	sbiw	r26, 0x03	; 3
    6116:	00 97       	sbiw	r24, 0x00	; 0
    6118:	19 f0       	breq	.+6      	; 0x6120 <free+0xd4>
    611a:	fd 01       	movw	r30, r26
    611c:	dc 01       	movw	r26, r24
    611e:	f7 cf       	rjmp	.-18     	; 0x610e <free+0xc2>
    6120:	8d 91       	ld	r24, X+
    6122:	9c 91       	ld	r25, X
    6124:	11 97       	sbiw	r26, 0x01	; 1
    6126:	9d 01       	movw	r18, r26
    6128:	2e 5f       	subi	r18, 0xFE	; 254
    612a:	3f 4f       	sbci	r19, 0xFF	; 255
    612c:	82 0f       	add	r24, r18
    612e:	93 1f       	adc	r25, r19
    6130:	20 91 7f 1a 	lds	r18, 0x1A7F	; 0x801a7f <__brkval>
    6134:	30 91 80 1a 	lds	r19, 0x1A80	; 0x801a80 <__brkval+0x1>
    6138:	28 17       	cp	r18, r24
    613a:	39 07       	cpc	r19, r25
    613c:	69 f4       	brne	.+26     	; 0x6158 <free+0x10c>
    613e:	30 97       	sbiw	r30, 0x00	; 0
    6140:	29 f4       	brne	.+10     	; 0x614c <free+0x100>
    6142:	10 92 82 1a 	sts	0x1A82, r1	; 0x801a82 <__flp+0x1>
    6146:	10 92 81 1a 	sts	0x1A81, r1	; 0x801a81 <__flp>
    614a:	02 c0       	rjmp	.+4      	; 0x6150 <free+0x104>
    614c:	13 82       	std	Z+3, r1	; 0x03
    614e:	12 82       	std	Z+2, r1	; 0x02
    6150:	b0 93 80 1a 	sts	0x1A80, r27	; 0x801a80 <__brkval+0x1>
    6154:	a0 93 7f 1a 	sts	0x1A7F, r26	; 0x801a7f <__brkval>
    6158:	df 91       	pop	r29
    615a:	cf 91       	pop	r28
    615c:	08 95       	ret

0000615e <do_rand>:
    615e:	8f 92       	push	r8
    6160:	9f 92       	push	r9
    6162:	af 92       	push	r10
    6164:	bf 92       	push	r11
    6166:	cf 92       	push	r12
    6168:	df 92       	push	r13
    616a:	ef 92       	push	r14
    616c:	ff 92       	push	r15
    616e:	cf 93       	push	r28
    6170:	df 93       	push	r29
    6172:	ec 01       	movw	r28, r24
    6174:	68 81       	ld	r22, Y
    6176:	79 81       	ldd	r23, Y+1	; 0x01
    6178:	8a 81       	ldd	r24, Y+2	; 0x02
    617a:	9b 81       	ldd	r25, Y+3	; 0x03
    617c:	61 15       	cp	r22, r1
    617e:	71 05       	cpc	r23, r1
    6180:	81 05       	cpc	r24, r1
    6182:	91 05       	cpc	r25, r1
    6184:	21 f4       	brne	.+8      	; 0x618e <do_rand+0x30>
    6186:	64 e2       	ldi	r22, 0x24	; 36
    6188:	79 ed       	ldi	r23, 0xD9	; 217
    618a:	8b e5       	ldi	r24, 0x5B	; 91
    618c:	97 e0       	ldi	r25, 0x07	; 7
    618e:	2d e1       	ldi	r18, 0x1D	; 29
    6190:	33 ef       	ldi	r19, 0xF3	; 243
    6192:	41 e0       	ldi	r20, 0x01	; 1
    6194:	50 e0       	ldi	r21, 0x00	; 0
    6196:	b9 d3       	rcall	.+1906   	; 0x690a <__divmodsi4>
    6198:	49 01       	movw	r8, r18
    619a:	5a 01       	movw	r10, r20
    619c:	9b 01       	movw	r18, r22
    619e:	ac 01       	movw	r20, r24
    61a0:	a7 ea       	ldi	r26, 0xA7	; 167
    61a2:	b1 e4       	ldi	r27, 0x41	; 65
    61a4:	ce d3       	rcall	.+1948   	; 0x6942 <__muluhisi3>
    61a6:	6b 01       	movw	r12, r22
    61a8:	7c 01       	movw	r14, r24
    61aa:	ac ee       	ldi	r26, 0xEC	; 236
    61ac:	b4 ef       	ldi	r27, 0xF4	; 244
    61ae:	a5 01       	movw	r20, r10
    61b0:	94 01       	movw	r18, r8
    61b2:	d3 d3       	rcall	.+1958   	; 0x695a <__mulohisi3>
    61b4:	dc 01       	movw	r26, r24
    61b6:	cb 01       	movw	r24, r22
    61b8:	8c 0d       	add	r24, r12
    61ba:	9d 1d       	adc	r25, r13
    61bc:	ae 1d       	adc	r26, r14
    61be:	bf 1d       	adc	r27, r15
    61c0:	b7 ff       	sbrs	r27, 7
    61c2:	03 c0       	rjmp	.+6      	; 0x61ca <do_rand+0x6c>
    61c4:	01 97       	sbiw	r24, 0x01	; 1
    61c6:	a1 09       	sbc	r26, r1
    61c8:	b0 48       	sbci	r27, 0x80	; 128
    61ca:	88 83       	st	Y, r24
    61cc:	99 83       	std	Y+1, r25	; 0x01
    61ce:	aa 83       	std	Y+2, r26	; 0x02
    61d0:	bb 83       	std	Y+3, r27	; 0x03
    61d2:	9f 77       	andi	r25, 0x7F	; 127
    61d4:	df 91       	pop	r29
    61d6:	cf 91       	pop	r28
    61d8:	ff 90       	pop	r15
    61da:	ef 90       	pop	r14
    61dc:	df 90       	pop	r13
    61de:	cf 90       	pop	r12
    61e0:	bf 90       	pop	r11
    61e2:	af 90       	pop	r10
    61e4:	9f 90       	pop	r9
    61e6:	8f 90       	pop	r8
    61e8:	08 95       	ret

000061ea <rand_r>:
    61ea:	b9 cf       	rjmp	.-142    	; 0x615e <do_rand>

000061ec <rand>:
    61ec:	86 e0       	ldi	r24, 0x06	; 6
    61ee:	92 e0       	ldi	r25, 0x02	; 2
    61f0:	b6 cf       	rjmp	.-148    	; 0x615e <do_rand>

000061f2 <srand>:
    61f2:	a0 e0       	ldi	r26, 0x00	; 0
    61f4:	b0 e0       	ldi	r27, 0x00	; 0
    61f6:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <next>
    61fa:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <next+0x1>
    61fe:	a0 93 08 02 	sts	0x0208, r26	; 0x800208 <next+0x2>
    6202:	b0 93 09 02 	sts	0x0209, r27	; 0x800209 <next+0x3>
    6206:	08 95       	ret

00006208 <abort>:
    6208:	81 e0       	ldi	r24, 0x01	; 1
    620a:	90 e0       	ldi	r25, 0x00	; 0
    620c:	f8 94       	cli
    620e:	b8 c3       	rjmp	.+1904   	; 0x6980 <_exit>

00006210 <memcpy>:
    6210:	fb 01       	movw	r30, r22
    6212:	dc 01       	movw	r26, r24
    6214:	02 c0       	rjmp	.+4      	; 0x621a <memcpy+0xa>
    6216:	01 90       	ld	r0, Z+
    6218:	0d 92       	st	X+, r0
    621a:	41 50       	subi	r20, 0x01	; 1
    621c:	50 40       	sbci	r21, 0x00	; 0
    621e:	d8 f7       	brcc	.-10     	; 0x6216 <memcpy+0x6>
    6220:	08 95       	ret

00006222 <memset>:
    6222:	dc 01       	movw	r26, r24
    6224:	01 c0       	rjmp	.+2      	; 0x6228 <memset+0x6>
    6226:	6d 93       	st	X+, r22
    6228:	41 50       	subi	r20, 0x01	; 1
    622a:	50 40       	sbci	r21, 0x00	; 0
    622c:	e0 f7       	brcc	.-8      	; 0x6226 <memset+0x4>
    622e:	08 95       	ret

00006230 <strcasestr>:
    6230:	fb 01       	movw	r30, r22
    6232:	51 91       	ld	r21, Z+
    6234:	55 23       	and	r21, r21
    6236:	b1 f0       	breq	.+44     	; 0x6264 <strcasestr+0x34>
    6238:	bf 01       	movw	r22, r30
    623a:	dc 01       	movw	r26, r24
    623c:	05 2e       	mov	r0, r21
    623e:	4d 91       	ld	r20, X+
    6240:	44 23       	and	r20, r20
    6242:	69 f0       	breq	.+26     	; 0x625e <strcasestr+0x2e>
    6244:	10 d0       	rcall	.+32     	; 0x6266 <strcasestr+0x36>
    6246:	d9 f7       	brne	.-10     	; 0x623e <strcasestr+0xe>
    6248:	cd 01       	movw	r24, r26
    624a:	01 90       	ld	r0, Z+
    624c:	00 20       	and	r0, r0
    624e:	49 f0       	breq	.+18     	; 0x6262 <strcasestr+0x32>
    6250:	4d 91       	ld	r20, X+
    6252:	41 11       	cpse	r20, r1
    6254:	08 d0       	rcall	.+16     	; 0x6266 <strcasestr+0x36>
    6256:	c9 f3       	breq	.-14     	; 0x624a <strcasestr+0x1a>
    6258:	fb 01       	movw	r30, r22
    625a:	41 11       	cpse	r20, r1
    625c:	ee cf       	rjmp	.-36     	; 0x623a <strcasestr+0xa>
    625e:	81 e0       	ldi	r24, 0x01	; 1
    6260:	90 e0       	ldi	r25, 0x00	; 0
    6262:	01 97       	sbiw	r24, 0x01	; 1
    6264:	08 95       	ret
    6266:	40 25       	eor	r20, r0
    6268:	39 f0       	breq	.+14     	; 0x6278 <strcasestr+0x48>
    626a:	40 32       	cpi	r20, 0x20	; 32
    626c:	29 f4       	brne	.+10     	; 0x6278 <strcasestr+0x48>
    626e:	40 29       	or	r20, r0
    6270:	4b 57       	subi	r20, 0x7B	; 123
    6272:	46 5e       	subi	r20, 0xE6	; 230
    6274:	08 f0       	brcs	.+2      	; 0x6278 <strcasestr+0x48>
    6276:	18 94       	sez
    6278:	08 95       	ret

0000627a <strcat>:
    627a:	fb 01       	movw	r30, r22
    627c:	dc 01       	movw	r26, r24
    627e:	0d 90       	ld	r0, X+
    6280:	00 20       	and	r0, r0
    6282:	e9 f7       	brne	.-6      	; 0x627e <strcat+0x4>
    6284:	11 97       	sbiw	r26, 0x01	; 1
    6286:	01 90       	ld	r0, Z+
    6288:	0d 92       	st	X+, r0
    628a:	00 20       	and	r0, r0
    628c:	e1 f7       	brne	.-8      	; 0x6286 <strcat+0xc>
    628e:	08 95       	ret

00006290 <strcpy>:
    6290:	fb 01       	movw	r30, r22
    6292:	dc 01       	movw	r26, r24
    6294:	01 90       	ld	r0, Z+
    6296:	0d 92       	st	X+, r0
    6298:	00 20       	and	r0, r0
    629a:	e1 f7       	brne	.-8      	; 0x6294 <strcpy+0x4>
    629c:	08 95       	ret

0000629e <strncasecmp>:
    629e:	fb 01       	movw	r30, r22
    62a0:	dc 01       	movw	r26, r24
    62a2:	41 50       	subi	r20, 0x01	; 1
    62a4:	50 40       	sbci	r21, 0x00	; 0
    62a6:	88 f0       	brcs	.+34     	; 0x62ca <strncasecmp+0x2c>
    62a8:	8d 91       	ld	r24, X+
    62aa:	81 34       	cpi	r24, 0x41	; 65
    62ac:	1c f0       	brlt	.+6      	; 0x62b4 <strncasecmp+0x16>
    62ae:	8b 35       	cpi	r24, 0x5B	; 91
    62b0:	0c f4       	brge	.+2      	; 0x62b4 <strncasecmp+0x16>
    62b2:	80 5e       	subi	r24, 0xE0	; 224
    62b4:	61 91       	ld	r22, Z+
    62b6:	61 34       	cpi	r22, 0x41	; 65
    62b8:	1c f0       	brlt	.+6      	; 0x62c0 <strncasecmp+0x22>
    62ba:	6b 35       	cpi	r22, 0x5B	; 91
    62bc:	0c f4       	brge	.+2      	; 0x62c0 <strncasecmp+0x22>
    62be:	60 5e       	subi	r22, 0xE0	; 224
    62c0:	86 1b       	sub	r24, r22
    62c2:	61 11       	cpse	r22, r1
    62c4:	71 f3       	breq	.-36     	; 0x62a2 <strncasecmp+0x4>
    62c6:	99 0b       	sbc	r25, r25
    62c8:	08 95       	ret
    62ca:	88 1b       	sub	r24, r24
    62cc:	fc cf       	rjmp	.-8      	; 0x62c6 <strncasecmp+0x28>

000062ce <printf>:
    62ce:	cf 93       	push	r28
    62d0:	df 93       	push	r29
    62d2:	cd b7       	in	r28, 0x3d	; 61
    62d4:	de b7       	in	r29, 0x3e	; 62
    62d6:	ae 01       	movw	r20, r28
    62d8:	4a 5f       	subi	r20, 0xFA	; 250
    62da:	5f 4f       	sbci	r21, 0xFF	; 255
    62dc:	fa 01       	movw	r30, r20
    62de:	61 91       	ld	r22, Z+
    62e0:	71 91       	ld	r23, Z+
    62e2:	af 01       	movw	r20, r30
    62e4:	80 91 85 1a 	lds	r24, 0x1A85	; 0x801a85 <__iob+0x2>
    62e8:	90 91 86 1a 	lds	r25, 0x1A86	; 0x801a86 <__iob+0x3>
    62ec:	61 d0       	rcall	.+194    	; 0x63b0 <vfprintf>
    62ee:	df 91       	pop	r29
    62f0:	cf 91       	pop	r28
    62f2:	08 95       	ret

000062f4 <puts>:
    62f4:	0f 93       	push	r16
    62f6:	1f 93       	push	r17
    62f8:	cf 93       	push	r28
    62fa:	df 93       	push	r29
    62fc:	e0 91 85 1a 	lds	r30, 0x1A85	; 0x801a85 <__iob+0x2>
    6300:	f0 91 86 1a 	lds	r31, 0x1A86	; 0x801a86 <__iob+0x3>
    6304:	23 81       	ldd	r18, Z+3	; 0x03
    6306:	21 ff       	sbrs	r18, 1
    6308:	1b c0       	rjmp	.+54     	; 0x6340 <puts+0x4c>
    630a:	8c 01       	movw	r16, r24
    630c:	d0 e0       	ldi	r29, 0x00	; 0
    630e:	c0 e0       	ldi	r28, 0x00	; 0
    6310:	f8 01       	movw	r30, r16
    6312:	81 91       	ld	r24, Z+
    6314:	8f 01       	movw	r16, r30
    6316:	60 91 85 1a 	lds	r22, 0x1A85	; 0x801a85 <__iob+0x2>
    631a:	70 91 86 1a 	lds	r23, 0x1A86	; 0x801a86 <__iob+0x3>
    631e:	db 01       	movw	r26, r22
    6320:	18 96       	adiw	r26, 0x08	; 8
    6322:	ed 91       	ld	r30, X+
    6324:	fc 91       	ld	r31, X
    6326:	19 97       	sbiw	r26, 0x09	; 9
    6328:	88 23       	and	r24, r24
    632a:	31 f0       	breq	.+12     	; 0x6338 <puts+0x44>
    632c:	19 95       	eicall
    632e:	89 2b       	or	r24, r25
    6330:	79 f3       	breq	.-34     	; 0x6310 <puts+0x1c>
    6332:	df ef       	ldi	r29, 0xFF	; 255
    6334:	cf ef       	ldi	r28, 0xFF	; 255
    6336:	ec cf       	rjmp	.-40     	; 0x6310 <puts+0x1c>
    6338:	8a e0       	ldi	r24, 0x0A	; 10
    633a:	19 95       	eicall
    633c:	89 2b       	or	r24, r25
    633e:	19 f0       	breq	.+6      	; 0x6346 <puts+0x52>
    6340:	8f ef       	ldi	r24, 0xFF	; 255
    6342:	9f ef       	ldi	r25, 0xFF	; 255
    6344:	02 c0       	rjmp	.+4      	; 0x634a <puts+0x56>
    6346:	8d 2f       	mov	r24, r29
    6348:	9c 2f       	mov	r25, r28
    634a:	df 91       	pop	r29
    634c:	cf 91       	pop	r28
    634e:	1f 91       	pop	r17
    6350:	0f 91       	pop	r16
    6352:	08 95       	ret

00006354 <sprintf>:
    6354:	0f 93       	push	r16
    6356:	1f 93       	push	r17
    6358:	cf 93       	push	r28
    635a:	df 93       	push	r29
    635c:	cd b7       	in	r28, 0x3d	; 61
    635e:	de b7       	in	r29, 0x3e	; 62
    6360:	2e 97       	sbiw	r28, 0x0e	; 14
    6362:	0f b6       	in	r0, 0x3f	; 63
    6364:	f8 94       	cli
    6366:	de bf       	out	0x3e, r29	; 62
    6368:	0f be       	out	0x3f, r0	; 63
    636a:	cd bf       	out	0x3d, r28	; 61
    636c:	0e 89       	ldd	r16, Y+22	; 0x16
    636e:	1f 89       	ldd	r17, Y+23	; 0x17
    6370:	86 e0       	ldi	r24, 0x06	; 6
    6372:	8c 83       	std	Y+4, r24	; 0x04
    6374:	1a 83       	std	Y+2, r17	; 0x02
    6376:	09 83       	std	Y+1, r16	; 0x01
    6378:	8f ef       	ldi	r24, 0xFF	; 255
    637a:	9f e7       	ldi	r25, 0x7F	; 127
    637c:	9e 83       	std	Y+6, r25	; 0x06
    637e:	8d 83       	std	Y+5, r24	; 0x05
    6380:	ae 01       	movw	r20, r28
    6382:	46 5e       	subi	r20, 0xE6	; 230
    6384:	5f 4f       	sbci	r21, 0xFF	; 255
    6386:	68 8d       	ldd	r22, Y+24	; 0x18
    6388:	79 8d       	ldd	r23, Y+25	; 0x19
    638a:	ce 01       	movw	r24, r28
    638c:	01 96       	adiw	r24, 0x01	; 1
    638e:	10 d0       	rcall	.+32     	; 0x63b0 <vfprintf>
    6390:	ef 81       	ldd	r30, Y+7	; 0x07
    6392:	f8 85       	ldd	r31, Y+8	; 0x08
    6394:	e0 0f       	add	r30, r16
    6396:	f1 1f       	adc	r31, r17
    6398:	10 82       	st	Z, r1
    639a:	2e 96       	adiw	r28, 0x0e	; 14
    639c:	0f b6       	in	r0, 0x3f	; 63
    639e:	f8 94       	cli
    63a0:	de bf       	out	0x3e, r29	; 62
    63a2:	0f be       	out	0x3f, r0	; 63
    63a4:	cd bf       	out	0x3d, r28	; 61
    63a6:	df 91       	pop	r29
    63a8:	cf 91       	pop	r28
    63aa:	1f 91       	pop	r17
    63ac:	0f 91       	pop	r16
    63ae:	08 95       	ret

000063b0 <vfprintf>:
    63b0:	2f 92       	push	r2
    63b2:	3f 92       	push	r3
    63b4:	4f 92       	push	r4
    63b6:	5f 92       	push	r5
    63b8:	6f 92       	push	r6
    63ba:	7f 92       	push	r7
    63bc:	8f 92       	push	r8
    63be:	9f 92       	push	r9
    63c0:	af 92       	push	r10
    63c2:	bf 92       	push	r11
    63c4:	cf 92       	push	r12
    63c6:	df 92       	push	r13
    63c8:	ef 92       	push	r14
    63ca:	ff 92       	push	r15
    63cc:	0f 93       	push	r16
    63ce:	1f 93       	push	r17
    63d0:	cf 93       	push	r28
    63d2:	df 93       	push	r29
    63d4:	cd b7       	in	r28, 0x3d	; 61
    63d6:	de b7       	in	r29, 0x3e	; 62
    63d8:	2b 97       	sbiw	r28, 0x0b	; 11
    63da:	0f b6       	in	r0, 0x3f	; 63
    63dc:	f8 94       	cli
    63de:	de bf       	out	0x3e, r29	; 62
    63e0:	0f be       	out	0x3f, r0	; 63
    63e2:	cd bf       	out	0x3d, r28	; 61
    63e4:	6c 01       	movw	r12, r24
    63e6:	7b 01       	movw	r14, r22
    63e8:	8a 01       	movw	r16, r20
    63ea:	fc 01       	movw	r30, r24
    63ec:	17 82       	std	Z+7, r1	; 0x07
    63ee:	16 82       	std	Z+6, r1	; 0x06
    63f0:	83 81       	ldd	r24, Z+3	; 0x03
    63f2:	81 ff       	sbrs	r24, 1
    63f4:	bf c1       	rjmp	.+894    	; 0x6774 <vfprintf+0x3c4>
    63f6:	ce 01       	movw	r24, r28
    63f8:	01 96       	adiw	r24, 0x01	; 1
    63fa:	3c 01       	movw	r6, r24
    63fc:	f6 01       	movw	r30, r12
    63fe:	93 81       	ldd	r25, Z+3	; 0x03
    6400:	f7 01       	movw	r30, r14
    6402:	93 fd       	sbrc	r25, 3
    6404:	85 91       	lpm	r24, Z+
    6406:	93 ff       	sbrs	r25, 3
    6408:	81 91       	ld	r24, Z+
    640a:	7f 01       	movw	r14, r30
    640c:	88 23       	and	r24, r24
    640e:	09 f4       	brne	.+2      	; 0x6412 <vfprintf+0x62>
    6410:	ad c1       	rjmp	.+858    	; 0x676c <vfprintf+0x3bc>
    6412:	85 32       	cpi	r24, 0x25	; 37
    6414:	39 f4       	brne	.+14     	; 0x6424 <vfprintf+0x74>
    6416:	93 fd       	sbrc	r25, 3
    6418:	85 91       	lpm	r24, Z+
    641a:	93 ff       	sbrs	r25, 3
    641c:	81 91       	ld	r24, Z+
    641e:	7f 01       	movw	r14, r30
    6420:	85 32       	cpi	r24, 0x25	; 37
    6422:	21 f4       	brne	.+8      	; 0x642c <vfprintf+0x7c>
    6424:	b6 01       	movw	r22, r12
    6426:	90 e0       	ldi	r25, 0x00	; 0
    6428:	d6 d1       	rcall	.+940    	; 0x67d6 <fputc>
    642a:	e8 cf       	rjmp	.-48     	; 0x63fc <vfprintf+0x4c>
    642c:	91 2c       	mov	r9, r1
    642e:	21 2c       	mov	r2, r1
    6430:	31 2c       	mov	r3, r1
    6432:	ff e1       	ldi	r31, 0x1F	; 31
    6434:	f3 15       	cp	r31, r3
    6436:	d8 f0       	brcs	.+54     	; 0x646e <vfprintf+0xbe>
    6438:	8b 32       	cpi	r24, 0x2B	; 43
    643a:	79 f0       	breq	.+30     	; 0x645a <vfprintf+0xaa>
    643c:	38 f4       	brcc	.+14     	; 0x644c <vfprintf+0x9c>
    643e:	80 32       	cpi	r24, 0x20	; 32
    6440:	79 f0       	breq	.+30     	; 0x6460 <vfprintf+0xb0>
    6442:	83 32       	cpi	r24, 0x23	; 35
    6444:	a1 f4       	brne	.+40     	; 0x646e <vfprintf+0xbe>
    6446:	23 2d       	mov	r18, r3
    6448:	20 61       	ori	r18, 0x10	; 16
    644a:	1d c0       	rjmp	.+58     	; 0x6486 <vfprintf+0xd6>
    644c:	8d 32       	cpi	r24, 0x2D	; 45
    644e:	61 f0       	breq	.+24     	; 0x6468 <vfprintf+0xb8>
    6450:	80 33       	cpi	r24, 0x30	; 48
    6452:	69 f4       	brne	.+26     	; 0x646e <vfprintf+0xbe>
    6454:	23 2d       	mov	r18, r3
    6456:	21 60       	ori	r18, 0x01	; 1
    6458:	16 c0       	rjmp	.+44     	; 0x6486 <vfprintf+0xd6>
    645a:	83 2d       	mov	r24, r3
    645c:	82 60       	ori	r24, 0x02	; 2
    645e:	38 2e       	mov	r3, r24
    6460:	e3 2d       	mov	r30, r3
    6462:	e4 60       	ori	r30, 0x04	; 4
    6464:	3e 2e       	mov	r3, r30
    6466:	2a c0       	rjmp	.+84     	; 0x64bc <vfprintf+0x10c>
    6468:	f3 2d       	mov	r31, r3
    646a:	f8 60       	ori	r31, 0x08	; 8
    646c:	1d c0       	rjmp	.+58     	; 0x64a8 <vfprintf+0xf8>
    646e:	37 fc       	sbrc	r3, 7
    6470:	2d c0       	rjmp	.+90     	; 0x64cc <vfprintf+0x11c>
    6472:	20 ed       	ldi	r18, 0xD0	; 208
    6474:	28 0f       	add	r18, r24
    6476:	2a 30       	cpi	r18, 0x0A	; 10
    6478:	40 f0       	brcs	.+16     	; 0x648a <vfprintf+0xda>
    647a:	8e 32       	cpi	r24, 0x2E	; 46
    647c:	b9 f4       	brne	.+46     	; 0x64ac <vfprintf+0xfc>
    647e:	36 fc       	sbrc	r3, 6
    6480:	75 c1       	rjmp	.+746    	; 0x676c <vfprintf+0x3bc>
    6482:	23 2d       	mov	r18, r3
    6484:	20 64       	ori	r18, 0x40	; 64
    6486:	32 2e       	mov	r3, r18
    6488:	19 c0       	rjmp	.+50     	; 0x64bc <vfprintf+0x10c>
    648a:	36 fe       	sbrs	r3, 6
    648c:	06 c0       	rjmp	.+12     	; 0x649a <vfprintf+0xea>
    648e:	8a e0       	ldi	r24, 0x0A	; 10
    6490:	98 9e       	mul	r9, r24
    6492:	20 0d       	add	r18, r0
    6494:	11 24       	eor	r1, r1
    6496:	92 2e       	mov	r9, r18
    6498:	11 c0       	rjmp	.+34     	; 0x64bc <vfprintf+0x10c>
    649a:	ea e0       	ldi	r30, 0x0A	; 10
    649c:	2e 9e       	mul	r2, r30
    649e:	20 0d       	add	r18, r0
    64a0:	11 24       	eor	r1, r1
    64a2:	22 2e       	mov	r2, r18
    64a4:	f3 2d       	mov	r31, r3
    64a6:	f0 62       	ori	r31, 0x20	; 32
    64a8:	3f 2e       	mov	r3, r31
    64aa:	08 c0       	rjmp	.+16     	; 0x64bc <vfprintf+0x10c>
    64ac:	8c 36       	cpi	r24, 0x6C	; 108
    64ae:	21 f4       	brne	.+8      	; 0x64b8 <vfprintf+0x108>
    64b0:	83 2d       	mov	r24, r3
    64b2:	80 68       	ori	r24, 0x80	; 128
    64b4:	38 2e       	mov	r3, r24
    64b6:	02 c0       	rjmp	.+4      	; 0x64bc <vfprintf+0x10c>
    64b8:	88 36       	cpi	r24, 0x68	; 104
    64ba:	41 f4       	brne	.+16     	; 0x64cc <vfprintf+0x11c>
    64bc:	f7 01       	movw	r30, r14
    64be:	93 fd       	sbrc	r25, 3
    64c0:	85 91       	lpm	r24, Z+
    64c2:	93 ff       	sbrs	r25, 3
    64c4:	81 91       	ld	r24, Z+
    64c6:	7f 01       	movw	r14, r30
    64c8:	81 11       	cpse	r24, r1
    64ca:	b3 cf       	rjmp	.-154    	; 0x6432 <vfprintf+0x82>
    64cc:	98 2f       	mov	r25, r24
    64ce:	9f 7d       	andi	r25, 0xDF	; 223
    64d0:	95 54       	subi	r25, 0x45	; 69
    64d2:	93 30       	cpi	r25, 0x03	; 3
    64d4:	28 f4       	brcc	.+10     	; 0x64e0 <vfprintf+0x130>
    64d6:	0c 5f       	subi	r16, 0xFC	; 252
    64d8:	1f 4f       	sbci	r17, 0xFF	; 255
    64da:	9f e3       	ldi	r25, 0x3F	; 63
    64dc:	99 83       	std	Y+1, r25	; 0x01
    64de:	0d c0       	rjmp	.+26     	; 0x64fa <vfprintf+0x14a>
    64e0:	83 36       	cpi	r24, 0x63	; 99
    64e2:	31 f0       	breq	.+12     	; 0x64f0 <vfprintf+0x140>
    64e4:	83 37       	cpi	r24, 0x73	; 115
    64e6:	71 f0       	breq	.+28     	; 0x6504 <vfprintf+0x154>
    64e8:	83 35       	cpi	r24, 0x53	; 83
    64ea:	09 f0       	breq	.+2      	; 0x64ee <vfprintf+0x13e>
    64ec:	55 c0       	rjmp	.+170    	; 0x6598 <vfprintf+0x1e8>
    64ee:	20 c0       	rjmp	.+64     	; 0x6530 <vfprintf+0x180>
    64f0:	f8 01       	movw	r30, r16
    64f2:	80 81       	ld	r24, Z
    64f4:	89 83       	std	Y+1, r24	; 0x01
    64f6:	0e 5f       	subi	r16, 0xFE	; 254
    64f8:	1f 4f       	sbci	r17, 0xFF	; 255
    64fa:	88 24       	eor	r8, r8
    64fc:	83 94       	inc	r8
    64fe:	91 2c       	mov	r9, r1
    6500:	53 01       	movw	r10, r6
    6502:	12 c0       	rjmp	.+36     	; 0x6528 <vfprintf+0x178>
    6504:	28 01       	movw	r4, r16
    6506:	f2 e0       	ldi	r31, 0x02	; 2
    6508:	4f 0e       	add	r4, r31
    650a:	51 1c       	adc	r5, r1
    650c:	f8 01       	movw	r30, r16
    650e:	a0 80       	ld	r10, Z
    6510:	b1 80       	ldd	r11, Z+1	; 0x01
    6512:	36 fe       	sbrs	r3, 6
    6514:	03 c0       	rjmp	.+6      	; 0x651c <vfprintf+0x16c>
    6516:	69 2d       	mov	r22, r9
    6518:	70 e0       	ldi	r23, 0x00	; 0
    651a:	02 c0       	rjmp	.+4      	; 0x6520 <vfprintf+0x170>
    651c:	6f ef       	ldi	r22, 0xFF	; 255
    651e:	7f ef       	ldi	r23, 0xFF	; 255
    6520:	c5 01       	movw	r24, r10
    6522:	4e d1       	rcall	.+668    	; 0x67c0 <strnlen>
    6524:	4c 01       	movw	r8, r24
    6526:	82 01       	movw	r16, r4
    6528:	f3 2d       	mov	r31, r3
    652a:	ff 77       	andi	r31, 0x7F	; 127
    652c:	3f 2e       	mov	r3, r31
    652e:	15 c0       	rjmp	.+42     	; 0x655a <vfprintf+0x1aa>
    6530:	28 01       	movw	r4, r16
    6532:	22 e0       	ldi	r18, 0x02	; 2
    6534:	42 0e       	add	r4, r18
    6536:	51 1c       	adc	r5, r1
    6538:	f8 01       	movw	r30, r16
    653a:	a0 80       	ld	r10, Z
    653c:	b1 80       	ldd	r11, Z+1	; 0x01
    653e:	36 fe       	sbrs	r3, 6
    6540:	03 c0       	rjmp	.+6      	; 0x6548 <vfprintf+0x198>
    6542:	69 2d       	mov	r22, r9
    6544:	70 e0       	ldi	r23, 0x00	; 0
    6546:	02 c0       	rjmp	.+4      	; 0x654c <vfprintf+0x19c>
    6548:	6f ef       	ldi	r22, 0xFF	; 255
    654a:	7f ef       	ldi	r23, 0xFF	; 255
    654c:	c5 01       	movw	r24, r10
    654e:	2d d1       	rcall	.+602    	; 0x67aa <strnlen_P>
    6550:	4c 01       	movw	r8, r24
    6552:	f3 2d       	mov	r31, r3
    6554:	f0 68       	ori	r31, 0x80	; 128
    6556:	3f 2e       	mov	r3, r31
    6558:	82 01       	movw	r16, r4
    655a:	33 fc       	sbrc	r3, 3
    655c:	19 c0       	rjmp	.+50     	; 0x6590 <vfprintf+0x1e0>
    655e:	82 2d       	mov	r24, r2
    6560:	90 e0       	ldi	r25, 0x00	; 0
    6562:	88 16       	cp	r8, r24
    6564:	99 06       	cpc	r9, r25
    6566:	a0 f4       	brcc	.+40     	; 0x6590 <vfprintf+0x1e0>
    6568:	b6 01       	movw	r22, r12
    656a:	80 e2       	ldi	r24, 0x20	; 32
    656c:	90 e0       	ldi	r25, 0x00	; 0
    656e:	33 d1       	rcall	.+614    	; 0x67d6 <fputc>
    6570:	2a 94       	dec	r2
    6572:	f5 cf       	rjmp	.-22     	; 0x655e <vfprintf+0x1ae>
    6574:	f5 01       	movw	r30, r10
    6576:	37 fc       	sbrc	r3, 7
    6578:	85 91       	lpm	r24, Z+
    657a:	37 fe       	sbrs	r3, 7
    657c:	81 91       	ld	r24, Z+
    657e:	5f 01       	movw	r10, r30
    6580:	b6 01       	movw	r22, r12
    6582:	90 e0       	ldi	r25, 0x00	; 0
    6584:	28 d1       	rcall	.+592    	; 0x67d6 <fputc>
    6586:	21 10       	cpse	r2, r1
    6588:	2a 94       	dec	r2
    658a:	21 e0       	ldi	r18, 0x01	; 1
    658c:	82 1a       	sub	r8, r18
    658e:	91 08       	sbc	r9, r1
    6590:	81 14       	cp	r8, r1
    6592:	91 04       	cpc	r9, r1
    6594:	79 f7       	brne	.-34     	; 0x6574 <vfprintf+0x1c4>
    6596:	e1 c0       	rjmp	.+450    	; 0x675a <vfprintf+0x3aa>
    6598:	84 36       	cpi	r24, 0x64	; 100
    659a:	11 f0       	breq	.+4      	; 0x65a0 <vfprintf+0x1f0>
    659c:	89 36       	cpi	r24, 0x69	; 105
    659e:	39 f5       	brne	.+78     	; 0x65ee <vfprintf+0x23e>
    65a0:	f8 01       	movw	r30, r16
    65a2:	37 fe       	sbrs	r3, 7
    65a4:	07 c0       	rjmp	.+14     	; 0x65b4 <vfprintf+0x204>
    65a6:	60 81       	ld	r22, Z
    65a8:	71 81       	ldd	r23, Z+1	; 0x01
    65aa:	82 81       	ldd	r24, Z+2	; 0x02
    65ac:	93 81       	ldd	r25, Z+3	; 0x03
    65ae:	0c 5f       	subi	r16, 0xFC	; 252
    65b0:	1f 4f       	sbci	r17, 0xFF	; 255
    65b2:	08 c0       	rjmp	.+16     	; 0x65c4 <vfprintf+0x214>
    65b4:	60 81       	ld	r22, Z
    65b6:	71 81       	ldd	r23, Z+1	; 0x01
    65b8:	07 2e       	mov	r0, r23
    65ba:	00 0c       	add	r0, r0
    65bc:	88 0b       	sbc	r24, r24
    65be:	99 0b       	sbc	r25, r25
    65c0:	0e 5f       	subi	r16, 0xFE	; 254
    65c2:	1f 4f       	sbci	r17, 0xFF	; 255
    65c4:	f3 2d       	mov	r31, r3
    65c6:	ff 76       	andi	r31, 0x6F	; 111
    65c8:	3f 2e       	mov	r3, r31
    65ca:	97 ff       	sbrs	r25, 7
    65cc:	09 c0       	rjmp	.+18     	; 0x65e0 <vfprintf+0x230>
    65ce:	90 95       	com	r25
    65d0:	80 95       	com	r24
    65d2:	70 95       	com	r23
    65d4:	61 95       	neg	r22
    65d6:	7f 4f       	sbci	r23, 0xFF	; 255
    65d8:	8f 4f       	sbci	r24, 0xFF	; 255
    65da:	9f 4f       	sbci	r25, 0xFF	; 255
    65dc:	f0 68       	ori	r31, 0x80	; 128
    65de:	3f 2e       	mov	r3, r31
    65e0:	2a e0       	ldi	r18, 0x0A	; 10
    65e2:	30 e0       	ldi	r19, 0x00	; 0
    65e4:	a3 01       	movw	r20, r6
    65e6:	33 d1       	rcall	.+614    	; 0x684e <__ultoa_invert>
    65e8:	88 2e       	mov	r8, r24
    65ea:	86 18       	sub	r8, r6
    65ec:	44 c0       	rjmp	.+136    	; 0x6676 <vfprintf+0x2c6>
    65ee:	85 37       	cpi	r24, 0x75	; 117
    65f0:	31 f4       	brne	.+12     	; 0x65fe <vfprintf+0x24e>
    65f2:	23 2d       	mov	r18, r3
    65f4:	2f 7e       	andi	r18, 0xEF	; 239
    65f6:	b2 2e       	mov	r11, r18
    65f8:	2a e0       	ldi	r18, 0x0A	; 10
    65fa:	30 e0       	ldi	r19, 0x00	; 0
    65fc:	25 c0       	rjmp	.+74     	; 0x6648 <vfprintf+0x298>
    65fe:	93 2d       	mov	r25, r3
    6600:	99 7f       	andi	r25, 0xF9	; 249
    6602:	b9 2e       	mov	r11, r25
    6604:	8f 36       	cpi	r24, 0x6F	; 111
    6606:	c1 f0       	breq	.+48     	; 0x6638 <vfprintf+0x288>
    6608:	18 f4       	brcc	.+6      	; 0x6610 <vfprintf+0x260>
    660a:	88 35       	cpi	r24, 0x58	; 88
    660c:	79 f0       	breq	.+30     	; 0x662c <vfprintf+0x27c>
    660e:	ae c0       	rjmp	.+348    	; 0x676c <vfprintf+0x3bc>
    6610:	80 37       	cpi	r24, 0x70	; 112
    6612:	19 f0       	breq	.+6      	; 0x661a <vfprintf+0x26a>
    6614:	88 37       	cpi	r24, 0x78	; 120
    6616:	21 f0       	breq	.+8      	; 0x6620 <vfprintf+0x270>
    6618:	a9 c0       	rjmp	.+338    	; 0x676c <vfprintf+0x3bc>
    661a:	e9 2f       	mov	r30, r25
    661c:	e0 61       	ori	r30, 0x10	; 16
    661e:	be 2e       	mov	r11, r30
    6620:	b4 fe       	sbrs	r11, 4
    6622:	0d c0       	rjmp	.+26     	; 0x663e <vfprintf+0x28e>
    6624:	fb 2d       	mov	r31, r11
    6626:	f4 60       	ori	r31, 0x04	; 4
    6628:	bf 2e       	mov	r11, r31
    662a:	09 c0       	rjmp	.+18     	; 0x663e <vfprintf+0x28e>
    662c:	34 fe       	sbrs	r3, 4
    662e:	0a c0       	rjmp	.+20     	; 0x6644 <vfprintf+0x294>
    6630:	29 2f       	mov	r18, r25
    6632:	26 60       	ori	r18, 0x06	; 6
    6634:	b2 2e       	mov	r11, r18
    6636:	06 c0       	rjmp	.+12     	; 0x6644 <vfprintf+0x294>
    6638:	28 e0       	ldi	r18, 0x08	; 8
    663a:	30 e0       	ldi	r19, 0x00	; 0
    663c:	05 c0       	rjmp	.+10     	; 0x6648 <vfprintf+0x298>
    663e:	20 e1       	ldi	r18, 0x10	; 16
    6640:	30 e0       	ldi	r19, 0x00	; 0
    6642:	02 c0       	rjmp	.+4      	; 0x6648 <vfprintf+0x298>
    6644:	20 e1       	ldi	r18, 0x10	; 16
    6646:	32 e0       	ldi	r19, 0x02	; 2
    6648:	f8 01       	movw	r30, r16
    664a:	b7 fe       	sbrs	r11, 7
    664c:	07 c0       	rjmp	.+14     	; 0x665c <vfprintf+0x2ac>
    664e:	60 81       	ld	r22, Z
    6650:	71 81       	ldd	r23, Z+1	; 0x01
    6652:	82 81       	ldd	r24, Z+2	; 0x02
    6654:	93 81       	ldd	r25, Z+3	; 0x03
    6656:	0c 5f       	subi	r16, 0xFC	; 252
    6658:	1f 4f       	sbci	r17, 0xFF	; 255
    665a:	06 c0       	rjmp	.+12     	; 0x6668 <vfprintf+0x2b8>
    665c:	60 81       	ld	r22, Z
    665e:	71 81       	ldd	r23, Z+1	; 0x01
    6660:	80 e0       	ldi	r24, 0x00	; 0
    6662:	90 e0       	ldi	r25, 0x00	; 0
    6664:	0e 5f       	subi	r16, 0xFE	; 254
    6666:	1f 4f       	sbci	r17, 0xFF	; 255
    6668:	a3 01       	movw	r20, r6
    666a:	f1 d0       	rcall	.+482    	; 0x684e <__ultoa_invert>
    666c:	88 2e       	mov	r8, r24
    666e:	86 18       	sub	r8, r6
    6670:	fb 2d       	mov	r31, r11
    6672:	ff 77       	andi	r31, 0x7F	; 127
    6674:	3f 2e       	mov	r3, r31
    6676:	36 fe       	sbrs	r3, 6
    6678:	0d c0       	rjmp	.+26     	; 0x6694 <vfprintf+0x2e4>
    667a:	23 2d       	mov	r18, r3
    667c:	2e 7f       	andi	r18, 0xFE	; 254
    667e:	a2 2e       	mov	r10, r18
    6680:	89 14       	cp	r8, r9
    6682:	58 f4       	brcc	.+22     	; 0x669a <vfprintf+0x2ea>
    6684:	34 fe       	sbrs	r3, 4
    6686:	0b c0       	rjmp	.+22     	; 0x669e <vfprintf+0x2ee>
    6688:	32 fc       	sbrc	r3, 2
    668a:	09 c0       	rjmp	.+18     	; 0x669e <vfprintf+0x2ee>
    668c:	83 2d       	mov	r24, r3
    668e:	8e 7e       	andi	r24, 0xEE	; 238
    6690:	a8 2e       	mov	r10, r24
    6692:	05 c0       	rjmp	.+10     	; 0x669e <vfprintf+0x2ee>
    6694:	b8 2c       	mov	r11, r8
    6696:	a3 2c       	mov	r10, r3
    6698:	03 c0       	rjmp	.+6      	; 0x66a0 <vfprintf+0x2f0>
    669a:	b8 2c       	mov	r11, r8
    669c:	01 c0       	rjmp	.+2      	; 0x66a0 <vfprintf+0x2f0>
    669e:	b9 2c       	mov	r11, r9
    66a0:	a4 fe       	sbrs	r10, 4
    66a2:	0f c0       	rjmp	.+30     	; 0x66c2 <vfprintf+0x312>
    66a4:	fe 01       	movw	r30, r28
    66a6:	e8 0d       	add	r30, r8
    66a8:	f1 1d       	adc	r31, r1
    66aa:	80 81       	ld	r24, Z
    66ac:	80 33       	cpi	r24, 0x30	; 48
    66ae:	21 f4       	brne	.+8      	; 0x66b8 <vfprintf+0x308>
    66b0:	9a 2d       	mov	r25, r10
    66b2:	99 7e       	andi	r25, 0xE9	; 233
    66b4:	a9 2e       	mov	r10, r25
    66b6:	09 c0       	rjmp	.+18     	; 0x66ca <vfprintf+0x31a>
    66b8:	a2 fe       	sbrs	r10, 2
    66ba:	06 c0       	rjmp	.+12     	; 0x66c8 <vfprintf+0x318>
    66bc:	b3 94       	inc	r11
    66be:	b3 94       	inc	r11
    66c0:	04 c0       	rjmp	.+8      	; 0x66ca <vfprintf+0x31a>
    66c2:	8a 2d       	mov	r24, r10
    66c4:	86 78       	andi	r24, 0x86	; 134
    66c6:	09 f0       	breq	.+2      	; 0x66ca <vfprintf+0x31a>
    66c8:	b3 94       	inc	r11
    66ca:	a3 fc       	sbrc	r10, 3
    66cc:	10 c0       	rjmp	.+32     	; 0x66ee <vfprintf+0x33e>
    66ce:	a0 fe       	sbrs	r10, 0
    66d0:	06 c0       	rjmp	.+12     	; 0x66de <vfprintf+0x32e>
    66d2:	b2 14       	cp	r11, r2
    66d4:	80 f4       	brcc	.+32     	; 0x66f6 <vfprintf+0x346>
    66d6:	28 0c       	add	r2, r8
    66d8:	92 2c       	mov	r9, r2
    66da:	9b 18       	sub	r9, r11
    66dc:	0d c0       	rjmp	.+26     	; 0x66f8 <vfprintf+0x348>
    66de:	b2 14       	cp	r11, r2
    66e0:	58 f4       	brcc	.+22     	; 0x66f8 <vfprintf+0x348>
    66e2:	b6 01       	movw	r22, r12
    66e4:	80 e2       	ldi	r24, 0x20	; 32
    66e6:	90 e0       	ldi	r25, 0x00	; 0
    66e8:	76 d0       	rcall	.+236    	; 0x67d6 <fputc>
    66ea:	b3 94       	inc	r11
    66ec:	f8 cf       	rjmp	.-16     	; 0x66de <vfprintf+0x32e>
    66ee:	b2 14       	cp	r11, r2
    66f0:	18 f4       	brcc	.+6      	; 0x66f8 <vfprintf+0x348>
    66f2:	2b 18       	sub	r2, r11
    66f4:	02 c0       	rjmp	.+4      	; 0x66fa <vfprintf+0x34a>
    66f6:	98 2c       	mov	r9, r8
    66f8:	21 2c       	mov	r2, r1
    66fa:	a4 fe       	sbrs	r10, 4
    66fc:	0f c0       	rjmp	.+30     	; 0x671c <vfprintf+0x36c>
    66fe:	b6 01       	movw	r22, r12
    6700:	80 e3       	ldi	r24, 0x30	; 48
    6702:	90 e0       	ldi	r25, 0x00	; 0
    6704:	68 d0       	rcall	.+208    	; 0x67d6 <fputc>
    6706:	a2 fe       	sbrs	r10, 2
    6708:	16 c0       	rjmp	.+44     	; 0x6736 <vfprintf+0x386>
    670a:	a1 fc       	sbrc	r10, 1
    670c:	03 c0       	rjmp	.+6      	; 0x6714 <vfprintf+0x364>
    670e:	88 e7       	ldi	r24, 0x78	; 120
    6710:	90 e0       	ldi	r25, 0x00	; 0
    6712:	02 c0       	rjmp	.+4      	; 0x6718 <vfprintf+0x368>
    6714:	88 e5       	ldi	r24, 0x58	; 88
    6716:	90 e0       	ldi	r25, 0x00	; 0
    6718:	b6 01       	movw	r22, r12
    671a:	0c c0       	rjmp	.+24     	; 0x6734 <vfprintf+0x384>
    671c:	8a 2d       	mov	r24, r10
    671e:	86 78       	andi	r24, 0x86	; 134
    6720:	51 f0       	breq	.+20     	; 0x6736 <vfprintf+0x386>
    6722:	a1 fe       	sbrs	r10, 1
    6724:	02 c0       	rjmp	.+4      	; 0x672a <vfprintf+0x37a>
    6726:	8b e2       	ldi	r24, 0x2B	; 43
    6728:	01 c0       	rjmp	.+2      	; 0x672c <vfprintf+0x37c>
    672a:	80 e2       	ldi	r24, 0x20	; 32
    672c:	a7 fc       	sbrc	r10, 7
    672e:	8d e2       	ldi	r24, 0x2D	; 45
    6730:	b6 01       	movw	r22, r12
    6732:	90 e0       	ldi	r25, 0x00	; 0
    6734:	50 d0       	rcall	.+160    	; 0x67d6 <fputc>
    6736:	89 14       	cp	r8, r9
    6738:	30 f4       	brcc	.+12     	; 0x6746 <vfprintf+0x396>
    673a:	b6 01       	movw	r22, r12
    673c:	80 e3       	ldi	r24, 0x30	; 48
    673e:	90 e0       	ldi	r25, 0x00	; 0
    6740:	4a d0       	rcall	.+148    	; 0x67d6 <fputc>
    6742:	9a 94       	dec	r9
    6744:	f8 cf       	rjmp	.-16     	; 0x6736 <vfprintf+0x386>
    6746:	8a 94       	dec	r8
    6748:	f3 01       	movw	r30, r6
    674a:	e8 0d       	add	r30, r8
    674c:	f1 1d       	adc	r31, r1
    674e:	80 81       	ld	r24, Z
    6750:	b6 01       	movw	r22, r12
    6752:	90 e0       	ldi	r25, 0x00	; 0
    6754:	40 d0       	rcall	.+128    	; 0x67d6 <fputc>
    6756:	81 10       	cpse	r8, r1
    6758:	f6 cf       	rjmp	.-20     	; 0x6746 <vfprintf+0x396>
    675a:	22 20       	and	r2, r2
    675c:	09 f4       	brne	.+2      	; 0x6760 <vfprintf+0x3b0>
    675e:	4e ce       	rjmp	.-868    	; 0x63fc <vfprintf+0x4c>
    6760:	b6 01       	movw	r22, r12
    6762:	80 e2       	ldi	r24, 0x20	; 32
    6764:	90 e0       	ldi	r25, 0x00	; 0
    6766:	37 d0       	rcall	.+110    	; 0x67d6 <fputc>
    6768:	2a 94       	dec	r2
    676a:	f7 cf       	rjmp	.-18     	; 0x675a <vfprintf+0x3aa>
    676c:	f6 01       	movw	r30, r12
    676e:	86 81       	ldd	r24, Z+6	; 0x06
    6770:	97 81       	ldd	r25, Z+7	; 0x07
    6772:	02 c0       	rjmp	.+4      	; 0x6778 <vfprintf+0x3c8>
    6774:	8f ef       	ldi	r24, 0xFF	; 255
    6776:	9f ef       	ldi	r25, 0xFF	; 255
    6778:	2b 96       	adiw	r28, 0x0b	; 11
    677a:	0f b6       	in	r0, 0x3f	; 63
    677c:	f8 94       	cli
    677e:	de bf       	out	0x3e, r29	; 62
    6780:	0f be       	out	0x3f, r0	; 63
    6782:	cd bf       	out	0x3d, r28	; 61
    6784:	df 91       	pop	r29
    6786:	cf 91       	pop	r28
    6788:	1f 91       	pop	r17
    678a:	0f 91       	pop	r16
    678c:	ff 90       	pop	r15
    678e:	ef 90       	pop	r14
    6790:	df 90       	pop	r13
    6792:	cf 90       	pop	r12
    6794:	bf 90       	pop	r11
    6796:	af 90       	pop	r10
    6798:	9f 90       	pop	r9
    679a:	8f 90       	pop	r8
    679c:	7f 90       	pop	r7
    679e:	6f 90       	pop	r6
    67a0:	5f 90       	pop	r5
    67a2:	4f 90       	pop	r4
    67a4:	3f 90       	pop	r3
    67a6:	2f 90       	pop	r2
    67a8:	08 95       	ret

000067aa <strnlen_P>:
    67aa:	fc 01       	movw	r30, r24
    67ac:	05 90       	lpm	r0, Z+
    67ae:	61 50       	subi	r22, 0x01	; 1
    67b0:	70 40       	sbci	r23, 0x00	; 0
    67b2:	01 10       	cpse	r0, r1
    67b4:	d8 f7       	brcc	.-10     	; 0x67ac <strnlen_P+0x2>
    67b6:	80 95       	com	r24
    67b8:	90 95       	com	r25
    67ba:	8e 0f       	add	r24, r30
    67bc:	9f 1f       	adc	r25, r31
    67be:	08 95       	ret

000067c0 <strnlen>:
    67c0:	fc 01       	movw	r30, r24
    67c2:	61 50       	subi	r22, 0x01	; 1
    67c4:	70 40       	sbci	r23, 0x00	; 0
    67c6:	01 90       	ld	r0, Z+
    67c8:	01 10       	cpse	r0, r1
    67ca:	d8 f7       	brcc	.-10     	; 0x67c2 <strnlen+0x2>
    67cc:	80 95       	com	r24
    67ce:	90 95       	com	r25
    67d0:	8e 0f       	add	r24, r30
    67d2:	9f 1f       	adc	r25, r31
    67d4:	08 95       	ret

000067d6 <fputc>:
    67d6:	0f 93       	push	r16
    67d8:	1f 93       	push	r17
    67da:	cf 93       	push	r28
    67dc:	df 93       	push	r29
    67de:	fb 01       	movw	r30, r22
    67e0:	23 81       	ldd	r18, Z+3	; 0x03
    67e2:	21 fd       	sbrc	r18, 1
    67e4:	03 c0       	rjmp	.+6      	; 0x67ec <fputc+0x16>
    67e6:	8f ef       	ldi	r24, 0xFF	; 255
    67e8:	9f ef       	ldi	r25, 0xFF	; 255
    67ea:	2c c0       	rjmp	.+88     	; 0x6844 <fputc+0x6e>
    67ec:	22 ff       	sbrs	r18, 2
    67ee:	16 c0       	rjmp	.+44     	; 0x681c <fputc+0x46>
    67f0:	46 81       	ldd	r20, Z+6	; 0x06
    67f2:	57 81       	ldd	r21, Z+7	; 0x07
    67f4:	24 81       	ldd	r18, Z+4	; 0x04
    67f6:	35 81       	ldd	r19, Z+5	; 0x05
    67f8:	42 17       	cp	r20, r18
    67fa:	53 07       	cpc	r21, r19
    67fc:	44 f4       	brge	.+16     	; 0x680e <fputc+0x38>
    67fe:	a0 81       	ld	r26, Z
    6800:	b1 81       	ldd	r27, Z+1	; 0x01
    6802:	9d 01       	movw	r18, r26
    6804:	2f 5f       	subi	r18, 0xFF	; 255
    6806:	3f 4f       	sbci	r19, 0xFF	; 255
    6808:	31 83       	std	Z+1, r19	; 0x01
    680a:	20 83       	st	Z, r18
    680c:	8c 93       	st	X, r24
    680e:	26 81       	ldd	r18, Z+6	; 0x06
    6810:	37 81       	ldd	r19, Z+7	; 0x07
    6812:	2f 5f       	subi	r18, 0xFF	; 255
    6814:	3f 4f       	sbci	r19, 0xFF	; 255
    6816:	37 83       	std	Z+7, r19	; 0x07
    6818:	26 83       	std	Z+6, r18	; 0x06
    681a:	14 c0       	rjmp	.+40     	; 0x6844 <fputc+0x6e>
    681c:	8b 01       	movw	r16, r22
    681e:	ec 01       	movw	r28, r24
    6820:	fb 01       	movw	r30, r22
    6822:	00 84       	ldd	r0, Z+8	; 0x08
    6824:	f1 85       	ldd	r31, Z+9	; 0x09
    6826:	e0 2d       	mov	r30, r0
    6828:	19 95       	eicall
    682a:	89 2b       	or	r24, r25
    682c:	e1 f6       	brne	.-72     	; 0x67e6 <fputc+0x10>
    682e:	d8 01       	movw	r26, r16
    6830:	16 96       	adiw	r26, 0x06	; 6
    6832:	8d 91       	ld	r24, X+
    6834:	9c 91       	ld	r25, X
    6836:	17 97       	sbiw	r26, 0x07	; 7
    6838:	01 96       	adiw	r24, 0x01	; 1
    683a:	17 96       	adiw	r26, 0x07	; 7
    683c:	9c 93       	st	X, r25
    683e:	8e 93       	st	-X, r24
    6840:	16 97       	sbiw	r26, 0x06	; 6
    6842:	ce 01       	movw	r24, r28
    6844:	df 91       	pop	r29
    6846:	cf 91       	pop	r28
    6848:	1f 91       	pop	r17
    684a:	0f 91       	pop	r16
    684c:	08 95       	ret

0000684e <__ultoa_invert>:
    684e:	fa 01       	movw	r30, r20
    6850:	aa 27       	eor	r26, r26
    6852:	28 30       	cpi	r18, 0x08	; 8
    6854:	51 f1       	breq	.+84     	; 0x68aa <__ultoa_invert+0x5c>
    6856:	20 31       	cpi	r18, 0x10	; 16
    6858:	81 f1       	breq	.+96     	; 0x68ba <__ultoa_invert+0x6c>
    685a:	e8 94       	clt
    685c:	6f 93       	push	r22
    685e:	6e 7f       	andi	r22, 0xFE	; 254
    6860:	6e 5f       	subi	r22, 0xFE	; 254
    6862:	7f 4f       	sbci	r23, 0xFF	; 255
    6864:	8f 4f       	sbci	r24, 0xFF	; 255
    6866:	9f 4f       	sbci	r25, 0xFF	; 255
    6868:	af 4f       	sbci	r26, 0xFF	; 255
    686a:	b1 e0       	ldi	r27, 0x01	; 1
    686c:	3e d0       	rcall	.+124    	; 0x68ea <__ultoa_invert+0x9c>
    686e:	b4 e0       	ldi	r27, 0x04	; 4
    6870:	3c d0       	rcall	.+120    	; 0x68ea <__ultoa_invert+0x9c>
    6872:	67 0f       	add	r22, r23
    6874:	78 1f       	adc	r23, r24
    6876:	89 1f       	adc	r24, r25
    6878:	9a 1f       	adc	r25, r26
    687a:	a1 1d       	adc	r26, r1
    687c:	68 0f       	add	r22, r24
    687e:	79 1f       	adc	r23, r25
    6880:	8a 1f       	adc	r24, r26
    6882:	91 1d       	adc	r25, r1
    6884:	a1 1d       	adc	r26, r1
    6886:	6a 0f       	add	r22, r26
    6888:	71 1d       	adc	r23, r1
    688a:	81 1d       	adc	r24, r1
    688c:	91 1d       	adc	r25, r1
    688e:	a1 1d       	adc	r26, r1
    6890:	20 d0       	rcall	.+64     	; 0x68d2 <__ultoa_invert+0x84>
    6892:	09 f4       	brne	.+2      	; 0x6896 <__ultoa_invert+0x48>
    6894:	68 94       	set
    6896:	3f 91       	pop	r19
    6898:	2a e0       	ldi	r18, 0x0A	; 10
    689a:	26 9f       	mul	r18, r22
    689c:	11 24       	eor	r1, r1
    689e:	30 19       	sub	r19, r0
    68a0:	30 5d       	subi	r19, 0xD0	; 208
    68a2:	31 93       	st	Z+, r19
    68a4:	de f6       	brtc	.-74     	; 0x685c <__ultoa_invert+0xe>
    68a6:	cf 01       	movw	r24, r30
    68a8:	08 95       	ret
    68aa:	46 2f       	mov	r20, r22
    68ac:	47 70       	andi	r20, 0x07	; 7
    68ae:	40 5d       	subi	r20, 0xD0	; 208
    68b0:	41 93       	st	Z+, r20
    68b2:	b3 e0       	ldi	r27, 0x03	; 3
    68b4:	0f d0       	rcall	.+30     	; 0x68d4 <__ultoa_invert+0x86>
    68b6:	c9 f7       	brne	.-14     	; 0x68aa <__ultoa_invert+0x5c>
    68b8:	f6 cf       	rjmp	.-20     	; 0x68a6 <__ultoa_invert+0x58>
    68ba:	46 2f       	mov	r20, r22
    68bc:	4f 70       	andi	r20, 0x0F	; 15
    68be:	40 5d       	subi	r20, 0xD0	; 208
    68c0:	4a 33       	cpi	r20, 0x3A	; 58
    68c2:	18 f0       	brcs	.+6      	; 0x68ca <__ultoa_invert+0x7c>
    68c4:	49 5d       	subi	r20, 0xD9	; 217
    68c6:	31 fd       	sbrc	r19, 1
    68c8:	40 52       	subi	r20, 0x20	; 32
    68ca:	41 93       	st	Z+, r20
    68cc:	02 d0       	rcall	.+4      	; 0x68d2 <__ultoa_invert+0x84>
    68ce:	a9 f7       	brne	.-22     	; 0x68ba <__ultoa_invert+0x6c>
    68d0:	ea cf       	rjmp	.-44     	; 0x68a6 <__ultoa_invert+0x58>
    68d2:	b4 e0       	ldi	r27, 0x04	; 4
    68d4:	a6 95       	lsr	r26
    68d6:	97 95       	ror	r25
    68d8:	87 95       	ror	r24
    68da:	77 95       	ror	r23
    68dc:	67 95       	ror	r22
    68de:	ba 95       	dec	r27
    68e0:	c9 f7       	brne	.-14     	; 0x68d4 <__ultoa_invert+0x86>
    68e2:	00 97       	sbiw	r24, 0x00	; 0
    68e4:	61 05       	cpc	r22, r1
    68e6:	71 05       	cpc	r23, r1
    68e8:	08 95       	ret
    68ea:	9b 01       	movw	r18, r22
    68ec:	ac 01       	movw	r20, r24
    68ee:	0a 2e       	mov	r0, r26
    68f0:	06 94       	lsr	r0
    68f2:	57 95       	ror	r21
    68f4:	47 95       	ror	r20
    68f6:	37 95       	ror	r19
    68f8:	27 95       	ror	r18
    68fa:	ba 95       	dec	r27
    68fc:	c9 f7       	brne	.-14     	; 0x68f0 <__ultoa_invert+0xa2>
    68fe:	62 0f       	add	r22, r18
    6900:	73 1f       	adc	r23, r19
    6902:	84 1f       	adc	r24, r20
    6904:	95 1f       	adc	r25, r21
    6906:	a0 1d       	adc	r26, r0
    6908:	08 95       	ret

0000690a <__divmodsi4>:
    690a:	05 2e       	mov	r0, r21
    690c:	97 fb       	bst	r25, 7
    690e:	16 f4       	brtc	.+4      	; 0x6914 <__divmodsi4+0xa>
    6910:	00 94       	com	r0
    6912:	0f d0       	rcall	.+30     	; 0x6932 <__negsi2>
    6914:	57 fd       	sbrc	r21, 7
    6916:	05 d0       	rcall	.+10     	; 0x6922 <__divmodsi4_neg2>
    6918:	a9 da       	rcall	.-2734   	; 0x5e6c <__udivmodsi4>
    691a:	07 fc       	sbrc	r0, 7
    691c:	02 d0       	rcall	.+4      	; 0x6922 <__divmodsi4_neg2>
    691e:	46 f4       	brtc	.+16     	; 0x6930 <__divmodsi4_exit>
    6920:	08 c0       	rjmp	.+16     	; 0x6932 <__negsi2>

00006922 <__divmodsi4_neg2>:
    6922:	50 95       	com	r21
    6924:	40 95       	com	r20
    6926:	30 95       	com	r19
    6928:	21 95       	neg	r18
    692a:	3f 4f       	sbci	r19, 0xFF	; 255
    692c:	4f 4f       	sbci	r20, 0xFF	; 255
    692e:	5f 4f       	sbci	r21, 0xFF	; 255

00006930 <__divmodsi4_exit>:
    6930:	08 95       	ret

00006932 <__negsi2>:
    6932:	90 95       	com	r25
    6934:	80 95       	com	r24
    6936:	70 95       	com	r23
    6938:	61 95       	neg	r22
    693a:	7f 4f       	sbci	r23, 0xFF	; 255
    693c:	8f 4f       	sbci	r24, 0xFF	; 255
    693e:	9f 4f       	sbci	r25, 0xFF	; 255
    6940:	08 95       	ret

00006942 <__muluhisi3>:
    6942:	0f d0       	rcall	.+30     	; 0x6962 <__umulhisi3>
    6944:	a5 9f       	mul	r26, r21
    6946:	90 0d       	add	r25, r0
    6948:	b4 9f       	mul	r27, r20
    694a:	90 0d       	add	r25, r0
    694c:	a4 9f       	mul	r26, r20
    694e:	80 0d       	add	r24, r0
    6950:	91 1d       	adc	r25, r1
    6952:	11 24       	eor	r1, r1
    6954:	08 95       	ret

00006956 <__mulshisi3>:
    6956:	b7 ff       	sbrs	r27, 7
    6958:	f4 cf       	rjmp	.-24     	; 0x6942 <__muluhisi3>

0000695a <__mulohisi3>:
    695a:	f3 df       	rcall	.-26     	; 0x6942 <__muluhisi3>
    695c:	82 1b       	sub	r24, r18
    695e:	93 0b       	sbc	r25, r19
    6960:	08 95       	ret

00006962 <__umulhisi3>:
    6962:	a2 9f       	mul	r26, r18
    6964:	b0 01       	movw	r22, r0
    6966:	b3 9f       	mul	r27, r19
    6968:	c0 01       	movw	r24, r0
    696a:	a3 9f       	mul	r26, r19
    696c:	70 0d       	add	r23, r0
    696e:	81 1d       	adc	r24, r1
    6970:	11 24       	eor	r1, r1
    6972:	91 1d       	adc	r25, r1
    6974:	b2 9f       	mul	r27, r18
    6976:	70 0d       	add	r23, r0
    6978:	81 1d       	adc	r24, r1
    697a:	11 24       	eor	r1, r1
    697c:	91 1d       	adc	r25, r1
    697e:	08 95       	ret

00006980 <_exit>:
    6980:	f8 94       	cli

00006982 <__stop_program>:
    6982:	ff cf       	rjmp	.-2      	; 0x6982 <__stop_program>
