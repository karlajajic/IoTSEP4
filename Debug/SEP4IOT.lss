
SEP4IOT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000005b0  00800200  00006976  00006a0a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006976  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000012c5  008007b0  008007b0  00006fba  2**0
                  ALLOC
  3 .comment      0000008c  00000000  00000000  00006fba  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00007048  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000cb8  00000000  00000000  00007088  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000fb83  00000000  00000000  00007d40  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000040a8  00000000  00000000  000178c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000077ca  00000000  00000000  0001b96b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002b70  00000000  00000000  00023138  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000048b3  00000000  00000000  00025ca8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000e191  00000000  00000000  0002a55b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000c80  00000000  00000000  000386ec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	50 c2       	rjmp	.+1184   	; 0x4a2 <__ctors_end>
       2:	00 00       	nop
       4:	6f c2       	rjmp	.+1246   	; 0x4e4 <__bad_interrupt>
       6:	00 00       	nop
       8:	6d c2       	rjmp	.+1242   	; 0x4e4 <__bad_interrupt>
       a:	00 00       	nop
       c:	6b c2       	rjmp	.+1238   	; 0x4e4 <__bad_interrupt>
       e:	00 00       	nop
      10:	69 c2       	rjmp	.+1234   	; 0x4e4 <__bad_interrupt>
      12:	00 00       	nop
      14:	67 c2       	rjmp	.+1230   	; 0x4e4 <__bad_interrupt>
      16:	00 00       	nop
      18:	65 c2       	rjmp	.+1226   	; 0x4e4 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	63 c2       	rjmp	.+1222   	; 0x4e4 <__bad_interrupt>
      1e:	00 00       	nop
      20:	61 c2       	rjmp	.+1218   	; 0x4e4 <__bad_interrupt>
      22:	00 00       	nop
      24:	5f c2       	rjmp	.+1214   	; 0x4e4 <__bad_interrupt>
      26:	00 00       	nop
      28:	5d c2       	rjmp	.+1210   	; 0x4e4 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	5b c2       	rjmp	.+1206   	; 0x4e4 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 17 0e 	jmp	0x1c2e	; 0x1c2e <__vector_12>
      34:	57 c2       	rjmp	.+1198   	; 0x4e4 <__bad_interrupt>
      36:	00 00       	nop
      38:	55 c2       	rjmp	.+1194   	; 0x4e4 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	53 c2       	rjmp	.+1190   	; 0x4e4 <__bad_interrupt>
      3e:	00 00       	nop
      40:	51 c2       	rjmp	.+1186   	; 0x4e4 <__bad_interrupt>
      42:	00 00       	nop
      44:	4f c2       	rjmp	.+1182   	; 0x4e4 <__bad_interrupt>
      46:	00 00       	nop
      48:	4d c2       	rjmp	.+1178   	; 0x4e4 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	4b c2       	rjmp	.+1174   	; 0x4e4 <__bad_interrupt>
      4e:	00 00       	nop
      50:	49 c2       	rjmp	.+1170   	; 0x4e4 <__bad_interrupt>
      52:	00 00       	nop
      54:	47 c2       	rjmp	.+1166   	; 0x4e4 <__bad_interrupt>
      56:	00 00       	nop
      58:	45 c2       	rjmp	.+1162   	; 0x4e4 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	43 c2       	rjmp	.+1158   	; 0x4e4 <__bad_interrupt>
      5e:	00 00       	nop
      60:	41 c2       	rjmp	.+1154   	; 0x4e4 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 d4 28 	jmp	0x51a8	; 0x51a8 <__vector_25>
      68:	0c 94 26 29 	jmp	0x524c	; 0x524c <__vector_26>
      6c:	3b c2       	rjmp	.+1142   	; 0x4e4 <__bad_interrupt>
      6e:	00 00       	nop
      70:	39 c2       	rjmp	.+1138   	; 0x4e4 <__bad_interrupt>
      72:	00 00       	nop
      74:	37 c2       	rjmp	.+1134   	; 0x4e4 <__bad_interrupt>
      76:	00 00       	nop
      78:	35 c2       	rjmp	.+1130   	; 0x4e4 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	33 c2       	rjmp	.+1126   	; 0x4e4 <__bad_interrupt>
      7e:	00 00       	nop
      80:	31 c2       	rjmp	.+1122   	; 0x4e4 <__bad_interrupt>
      82:	00 00       	nop
      84:	2f c2       	rjmp	.+1118   	; 0x4e4 <__bad_interrupt>
      86:	00 00       	nop
      88:	2d c2       	rjmp	.+1114   	; 0x4e4 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	2b c2       	rjmp	.+1110   	; 0x4e4 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 6a 29 	jmp	0x52d4	; 0x52d4 <__vector_36>
      94:	0c 94 bc 29 	jmp	0x5378	; 0x5378 <__vector_37>
      98:	25 c2       	rjmp	.+1098   	; 0x4e4 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 54 2c 	jmp	0x58a8	; 0x58a8 <__vector_39>
      a0:	21 c2       	rjmp	.+1090   	; 0x4e4 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	1f c2       	rjmp	.+1086   	; 0x4e4 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	1d c2       	rjmp	.+1082   	; 0x4e4 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	1b c2       	rjmp	.+1078   	; 0x4e4 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	19 c2       	rjmp	.+1074   	; 0x4e4 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	17 c2       	rjmp	.+1070   	; 0x4e4 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	15 c2       	rjmp	.+1066   	; 0x4e4 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	13 c2       	rjmp	.+1062   	; 0x4e4 <__bad_interrupt>
      be:	00 00       	nop
      c0:	11 c2       	rjmp	.+1058   	; 0x4e4 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	0f c2       	rjmp	.+1054   	; 0x4e4 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	0d c2       	rjmp	.+1050   	; 0x4e4 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 00 2a 	jmp	0x5400	; 0x5400 <__vector_51>
      d0:	0c 94 52 2a 	jmp	0x54a4	; 0x54a4 <__vector_52>
      d4:	07 c2       	rjmp	.+1038   	; 0x4e4 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 96 2a 	jmp	0x552c	; 0x552c <__vector_54>
      dc:	0c 94 e8 2a 	jmp	0x55d0	; 0x55d0 <__vector_55>
      e0:	01 c2       	rjmp	.+1026   	; 0x4e4 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	c6 01       	movw	r24, r12
      e6:	c6 01       	movw	r24, r12
      e8:	c6 01       	movw	r24, r12
      ea:	00 02       	muls	r16, r16
      ec:	08 02       	muls	r16, r24
      ee:	1e 02       	muls	r17, r30
      f0:	c6 01       	movw	r24, r12
      f2:	c6 01       	movw	r24, r12
      f4:	00 02       	muls	r16, r16
      f6:	08 02       	muls	r16, r24
      f8:	76 2c       	mov	r7, r6
      fa:	e6 2c       	mov	r14, r6
      fc:	e6 2c       	mov	r14, r6
      fe:	e6 2c       	mov	r14, r6
     100:	e6 2c       	mov	r14, r6
     102:	e6 2c       	mov	r14, r6
     104:	e6 2c       	mov	r14, r6
     106:	e6 2c       	mov	r14, r6
     108:	76 2c       	mov	r7, r6
     10a:	e6 2c       	mov	r14, r6
     10c:	e6 2c       	mov	r14, r6
     10e:	e6 2c       	mov	r14, r6
     110:	e6 2c       	mov	r14, r6
     112:	e6 2c       	mov	r14, r6
     114:	e6 2c       	mov	r14, r6
     116:	e6 2c       	mov	r14, r6
     118:	78 2c       	mov	r7, r8
     11a:	e6 2c       	mov	r14, r6
     11c:	e6 2c       	mov	r14, r6
     11e:	e6 2c       	mov	r14, r6
     120:	e6 2c       	mov	r14, r6
     122:	e6 2c       	mov	r14, r6
     124:	e6 2c       	mov	r14, r6
     126:	e6 2c       	mov	r14, r6
     128:	e6 2c       	mov	r14, r6
     12a:	e6 2c       	mov	r14, r6
     12c:	e6 2c       	mov	r14, r6
     12e:	e6 2c       	mov	r14, r6
     130:	e6 2c       	mov	r14, r6
     132:	e6 2c       	mov	r14, r6
     134:	e6 2c       	mov	r14, r6
     136:	e6 2c       	mov	r14, r6
     138:	78 2c       	mov	r7, r8
     13a:	e6 2c       	mov	r14, r6
     13c:	e6 2c       	mov	r14, r6
     13e:	e6 2c       	mov	r14, r6
     140:	e6 2c       	mov	r14, r6
     142:	e6 2c       	mov	r14, r6
     144:	e6 2c       	mov	r14, r6
     146:	e6 2c       	mov	r14, r6
     148:	e6 2c       	mov	r14, r6
     14a:	e6 2c       	mov	r14, r6
     14c:	e6 2c       	mov	r14, r6
     14e:	e6 2c       	mov	r14, r6
     150:	e6 2c       	mov	r14, r6
     152:	e6 2c       	mov	r14, r6
     154:	e6 2c       	mov	r14, r6
     156:	e6 2c       	mov	r14, r6
     158:	e2 2c       	mov	r14, r2
     15a:	e6 2c       	mov	r14, r6
     15c:	e6 2c       	mov	r14, r6
     15e:	e6 2c       	mov	r14, r6
     160:	e6 2c       	mov	r14, r6
     162:	e6 2c       	mov	r14, r6
     164:	e6 2c       	mov	r14, r6
     166:	e6 2c       	mov	r14, r6
     168:	ad 2c       	mov	r10, r13
     16a:	e6 2c       	mov	r14, r6
     16c:	e6 2c       	mov	r14, r6
     16e:	e6 2c       	mov	r14, r6
     170:	e6 2c       	mov	r14, r6
     172:	e6 2c       	mov	r14, r6
     174:	e6 2c       	mov	r14, r6
     176:	e6 2c       	mov	r14, r6
     178:	e6 2c       	mov	r14, r6
     17a:	e6 2c       	mov	r14, r6
     17c:	e6 2c       	mov	r14, r6
     17e:	e6 2c       	mov	r14, r6
     180:	e6 2c       	mov	r14, r6
     182:	e6 2c       	mov	r14, r6
     184:	e6 2c       	mov	r14, r6
     186:	e6 2c       	mov	r14, r6
     188:	a1 2c       	mov	r10, r1
     18a:	e6 2c       	mov	r14, r6
     18c:	e6 2c       	mov	r14, r6
     18e:	e6 2c       	mov	r14, r6
     190:	e6 2c       	mov	r14, r6
     192:	e6 2c       	mov	r14, r6
     194:	e6 2c       	mov	r14, r6
     196:	e6 2c       	mov	r14, r6
     198:	c5 2c       	mov	r12, r5

0000019a <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     19a:	07 e5       	ldi	r16, 0x57	; 87
     19c:	18 e1       	ldi	r17, 0x18	; 24
     19e:	0f 2e       	mov	r0, r31
     1a0:	f7 e8       	ldi	r31, 0x87	; 135
     1a2:	ef 2e       	mov	r14, r31
     1a4:	f8 e1       	ldi	r31, 0x18	; 24
     1a6:	ff 2e       	mov	r15, r31
     1a8:	f0 2d       	mov	r31, r0
     1aa:	80 91 56 18 	lds	r24, 0x1856	; 0x801856 <uxDeletedTasksWaitingCleanUp>
     1ae:	88 23       	and	r24, r24
     1b0:	29 f1       	breq	.+74     	; 0x1fc <prvIdleTask+0x62>
     1b2:	0f b6       	in	r0, 0x3f	; 63
     1b4:	f8 94       	cli
     1b6:	0f 92       	push	r0
     1b8:	d8 01       	movw	r26, r16
     1ba:	17 96       	adiw	r26, 0x07	; 7
     1bc:	ed 91       	ld	r30, X+
     1be:	fc 91       	ld	r31, X
     1c0:	18 97       	sbiw	r26, 0x08	; 8
     1c2:	c0 85       	ldd	r28, Z+8	; 0x08
     1c4:	d1 85       	ldd	r29, Z+9	; 0x09
     1c6:	ce 01       	movw	r24, r28
     1c8:	02 96       	adiw	r24, 0x02	; 2
     1ca:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <uxListRemove>
     1ce:	80 91 4a 18 	lds	r24, 0x184A	; 0x80184a <uxCurrentNumberOfTasks>
     1d2:	81 50       	subi	r24, 0x01	; 1
     1d4:	80 93 4a 18 	sts	0x184A, r24	; 0x80184a <uxCurrentNumberOfTasks>
     1d8:	80 91 56 18 	lds	r24, 0x1856	; 0x801856 <uxDeletedTasksWaitingCleanUp>
     1dc:	81 50       	subi	r24, 0x01	; 1
     1de:	80 93 56 18 	sts	0x1856, r24	; 0x801856 <uxDeletedTasksWaitingCleanUp>
     1e2:	0f 90       	pop	r0
     1e4:	0f be       	out	0x3f, r0	; 63
     1e6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     1e8:	9c 8d       	ldd	r25, Y+28	; 0x1c
     1ea:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <vPortFree>
     1ee:	ce 01       	movw	r24, r28
     1f0:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <vPortFree>
     1f4:	80 91 56 18 	lds	r24, 0x1856	; 0x801856 <uxDeletedTasksWaitingCleanUp>
     1f8:	81 11       	cpse	r24, r1
     1fa:	db cf       	rjmp	.-74     	; 0x1b2 <prvIdleTask+0x18>
     1fc:	f7 01       	movw	r30, r14
     1fe:	80 81       	ld	r24, Z
     200:	82 30       	cpi	r24, 0x02	; 2
     202:	10 f0       	brcs	.+4      	; 0x208 <prvIdleTask+0x6e>
     204:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <vPortYield>
     208:	0e 94 69 1e 	call	0x3cd2	; 0x3cd2 <vApplicationIdleHook>
     20c:	ce cf       	rjmp	.-100    	; 0x1aa <prvIdleTask+0x10>

0000020e <prvTimerTask>:
            pxNewTimer->ucStatus = 0x00;
            prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
        }

        return pxNewTimer;
    }
     20e:	cf 93       	push	r28
     210:	df 93       	push	r29
     212:	cd b7       	in	r28, 0x3d	; 61
     214:	de b7       	in	r29, 0x3e	; 62
     216:	60 97       	sbiw	r28, 0x10	; 16
     218:	0f b6       	in	r0, 0x3f	; 63
     21a:	f8 94       	cli
     21c:	de bf       	out	0x3e, r29	; 62
     21e:	0f be       	out	0x3f, r0	; 63
     220:	cd bf       	out	0x3d, r28	; 61
     222:	ce 01       	movw	r24, r28
     224:	01 96       	adiw	r24, 0x01	; 1
     226:	9a 87       	std	Y+10, r25	; 0x0a
     228:	89 87       	std	Y+9, r24	; 0x09
     22a:	81 2c       	mov	r8, r1
     22c:	91 2c       	mov	r9, r1
     22e:	a1 2c       	mov	r10, r1
     230:	b1 2c       	mov	r11, r1
     232:	69 84       	ldd	r6, Y+9	; 0x09
     234:	7a 84       	ldd	r7, Y+10	; 0x0a
     236:	e0 91 bf 18 	lds	r30, 0x18BF	; 0x8018bf <pxCurrentTimerList>
     23a:	f0 91 c0 18 	lds	r31, 0x18C0	; 0x8018c0 <pxCurrentTimerList+0x1>
     23e:	80 81       	ld	r24, Z
     240:	88 23       	and	r24, r24
     242:	09 f4       	brne	.+2      	; 0x246 <prvTimerTask+0x38>
     244:	14 c1       	rjmp	.+552    	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
     246:	07 80       	ldd	r0, Z+7	; 0x07
     248:	f0 85       	ldd	r31, Z+8	; 0x08
     24a:	e0 2d       	mov	r30, r0
     24c:	20 80       	ld	r2, Z
     24e:	31 80       	ldd	r3, Z+1	; 0x01
     250:	42 80       	ldd	r4, Z+2	; 0x02
     252:	53 80       	ldd	r5, Z+3	; 0x03
     254:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <vTaskSuspendAll>
     258:	ce 01       	movw	r24, r28
     25a:	01 96       	adiw	r24, 0x01	; 1
     25c:	0e 94 d3 1d 	call	0x3ba6	; 0x3ba6 <prvSampleTimeNow>
     260:	6b 87       	std	Y+11, r22	; 0x0b
     262:	7c 87       	std	Y+12, r23	; 0x0c
     264:	8d 87       	std	Y+13, r24	; 0x0d
     266:	9e 87       	std	Y+14, r25	; 0x0e
     268:	89 81       	ldd	r24, Y+1	; 0x01
     26a:	81 11       	cpse	r24, r1
     26c:	67 c0       	rjmp	.+206    	; 0x33c <prvTimerTask+0x12e>
     26e:	8b 85       	ldd	r24, Y+11	; 0x0b
     270:	9c 85       	ldd	r25, Y+12	; 0x0c
     272:	ad 85       	ldd	r26, Y+13	; 0x0d
     274:	be 85       	ldd	r27, Y+14	; 0x0e
     276:	82 15       	cp	r24, r2
     278:	93 05       	cpc	r25, r3
     27a:	a4 05       	cpc	r26, r4
     27c:	b5 05       	cpc	r27, r5
     27e:	08 f4       	brcc	.+2      	; 0x282 <prvTimerTask+0x74>
     280:	45 c0       	rjmp	.+138    	; 0x30c <prvTimerTask+0xfe>
     282:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <xTaskResumeAll>
     286:	e0 91 bf 18 	lds	r30, 0x18BF	; 0x8018bf <pxCurrentTimerList>
     28a:	f0 91 c0 18 	lds	r31, 0x18C0	; 0x8018c0 <pxCurrentTimerList+0x1>
     28e:	07 80       	ldd	r0, Z+7	; 0x07
     290:	f0 85       	ldd	r31, Z+8	; 0x08
     292:	e0 2d       	mov	r30, r0
     294:	a0 85       	ldd	r26, Z+8	; 0x08
     296:	b1 85       	ldd	r27, Z+9	; 0x09
     298:	b8 8b       	std	Y+16, r27	; 0x10
     29a:	af 87       	std	Y+15, r26	; 0x0f
     29c:	cd 01       	movw	r24, r26
     29e:	02 96       	adiw	r24, 0x02	; 2
     2a0:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <uxListRemove>
     2a4:	ef 85       	ldd	r30, Y+15	; 0x0f
     2a6:	f8 89       	ldd	r31, Y+16	; 0x10
     2a8:	87 89       	ldd	r24, Z+23	; 0x17
     2aa:	82 ff       	sbrs	r24, 2
     2ac:	21 c0       	rjmp	.+66     	; 0x2f0 <prvTimerTask+0xe2>
     2ae:	46 85       	ldd	r20, Z+14	; 0x0e
     2b0:	57 85       	ldd	r21, Z+15	; 0x0f
     2b2:	60 89       	ldd	r22, Z+16	; 0x10
     2b4:	71 89       	ldd	r23, Z+17	; 0x11
     2b6:	42 0d       	add	r20, r2
     2b8:	53 1d       	adc	r21, r3
     2ba:	64 1d       	adc	r22, r4
     2bc:	75 1d       	adc	r23, r5
     2be:	72 01       	movw	r14, r4
     2c0:	61 01       	movw	r12, r2
     2c2:	0b 85       	ldd	r16, Y+11	; 0x0b
     2c4:	1c 85       	ldd	r17, Y+12	; 0x0c
     2c6:	2d 85       	ldd	r18, Y+13	; 0x0d
     2c8:	3e 85       	ldd	r19, Y+14	; 0x0e
     2ca:	cf 01       	movw	r24, r30
     2cc:	0e 94 e2 1c 	call	0x39c4	; 0x39c4 <prvInsertTimerInActiveList>
     2d0:	88 23       	and	r24, r24
     2d2:	99 f0       	breq	.+38     	; 0x2fa <prvTimerTask+0xec>
     2d4:	c8 2c       	mov	r12, r8
     2d6:	d9 2c       	mov	r13, r9
     2d8:	ea 2c       	mov	r14, r10
     2da:	fb 2c       	mov	r15, r11
     2dc:	00 e0       	ldi	r16, 0x00	; 0
     2de:	10 e0       	ldi	r17, 0x00	; 0
     2e0:	a2 01       	movw	r20, r4
     2e2:	91 01       	movw	r18, r2
     2e4:	60 e0       	ldi	r22, 0x00	; 0
     2e6:	8f 85       	ldd	r24, Y+15	; 0x0f
     2e8:	98 89       	ldd	r25, Y+16	; 0x10
     2ea:	0e 94 75 1d 	call	0x3aea	; 0x3aea <xTimerGenericCommand>
     2ee:	05 c0       	rjmp	.+10     	; 0x2fa <prvTimerTask+0xec>
     2f0:	8e 7f       	andi	r24, 0xFE	; 254
     2f2:	af 85       	ldd	r26, Y+15	; 0x0f
     2f4:	b8 89       	ldd	r27, Y+16	; 0x10
     2f6:	57 96       	adiw	r26, 0x17	; 23
     2f8:	8c 93       	st	X, r24
     2fa:	af 85       	ldd	r26, Y+15	; 0x0f
     2fc:	b8 89       	ldd	r27, Y+16	; 0x10
     2fe:	54 96       	adiw	r26, 0x14	; 20
     300:	ed 91       	ld	r30, X+
     302:	fc 91       	ld	r31, X
     304:	55 97       	sbiw	r26, 0x15	; 21
     306:	cd 01       	movw	r24, r26
     308:	19 95       	eicall
     30a:	a2 c0       	rjmp	.+324    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     30c:	20 e0       	ldi	r18, 0x00	; 0
     30e:	b2 01       	movw	r22, r4
     310:	a1 01       	movw	r20, r2
     312:	8b 85       	ldd	r24, Y+11	; 0x0b
     314:	9c 85       	ldd	r25, Y+12	; 0x0c
     316:	ad 85       	ldd	r26, Y+13	; 0x0d
     318:	be 85       	ldd	r27, Y+14	; 0x0e
     31a:	48 1b       	sub	r20, r24
     31c:	59 0b       	sbc	r21, r25
     31e:	6a 0b       	sbc	r22, r26
     320:	7b 0b       	sbc	r23, r27
     322:	80 91 bb 18 	lds	r24, 0x18BB	; 0x8018bb <xTimerQueue>
     326:	90 91 bc 18 	lds	r25, 0x18BC	; 0x8018bc <xTimerQueue+0x1>
     32a:	0e 94 b3 11 	call	0x2366	; 0x2366 <vQueueWaitForMessageRestricted>
     32e:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <xTaskResumeAll>
     332:	81 11       	cpse	r24, r1
     334:	8d c0       	rjmp	.+282    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     336:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <vPortYield>
     33a:	8a c0       	rjmp	.+276    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     33c:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <xTaskResumeAll>
     340:	87 c0       	rjmp	.+270    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     342:	89 81       	ldd	r24, Y+1	; 0x01
     344:	88 23       	and	r24, r24
     346:	0c f4       	brge	.+2      	; 0x34a <prvTimerTask+0x13c>
     348:	83 c0       	rjmp	.+262    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     34a:	4e 80       	ldd	r4, Y+6	; 0x06
     34c:	5f 80       	ldd	r5, Y+7	; 0x07
     34e:	d2 01       	movw	r26, r4
     350:	1c 96       	adiw	r26, 0x0c	; 12
     352:	8d 91       	ld	r24, X+
     354:	9c 91       	ld	r25, X
     356:	1d 97       	sbiw	r26, 0x0d	; 13
     358:	89 2b       	or	r24, r25
     35a:	21 f0       	breq	.+8      	; 0x364 <prvTimerTask+0x156>
     35c:	c2 01       	movw	r24, r4
     35e:	02 96       	adiw	r24, 0x02	; 2
     360:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <uxListRemove>
     364:	ce 01       	movw	r24, r28
     366:	08 96       	adiw	r24, 0x08	; 8
     368:	0e 94 d3 1d 	call	0x3ba6	; 0x3ba6 <prvSampleTimeNow>
     36c:	8b 01       	movw	r16, r22
     36e:	9c 01       	movw	r18, r24
     370:	e9 81       	ldd	r30, Y+1	; 0x01
     372:	0e 2e       	mov	r0, r30
     374:	00 0c       	add	r0, r0
     376:	ff 0b       	sbc	r31, r31
     378:	ea 30       	cpi	r30, 0x0A	; 10
     37a:	f1 05       	cpc	r31, r1
     37c:	08 f0       	brcs	.+2      	; 0x380 <prvTimerTask+0x172>
     37e:	68 c0       	rjmp	.+208    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     380:	88 27       	eor	r24, r24
     382:	ee 58       	subi	r30, 0x8E	; 142
     384:	ff 4f       	sbci	r31, 0xFF	; 255
     386:	8f 4f       	sbci	r24, 0xFF	; 255
     388:	0c 94 51 2f 	jmp	0x5ea2	; 0x5ea2 <__tablejump2__>
     38c:	f2 01       	movw	r30, r4
     38e:	87 89       	ldd	r24, Z+23	; 0x17
     390:	81 60       	ori	r24, 0x01	; 1
     392:	87 8b       	std	Z+23, r24	; 0x17
     394:	ca 80       	ldd	r12, Y+2	; 0x02
     396:	db 80       	ldd	r13, Y+3	; 0x03
     398:	ec 80       	ldd	r14, Y+4	; 0x04
     39a:	fd 80       	ldd	r15, Y+5	; 0x05
     39c:	46 85       	ldd	r20, Z+14	; 0x0e
     39e:	57 85       	ldd	r21, Z+15	; 0x0f
     3a0:	60 89       	ldd	r22, Z+16	; 0x10
     3a2:	71 89       	ldd	r23, Z+17	; 0x11
     3a4:	4c 0d       	add	r20, r12
     3a6:	5d 1d       	adc	r21, r13
     3a8:	6e 1d       	adc	r22, r14
     3aa:	7f 1d       	adc	r23, r15
     3ac:	c2 01       	movw	r24, r4
     3ae:	0e 94 e2 1c 	call	0x39c4	; 0x39c4 <prvInsertTimerInActiveList>
     3b2:	88 23       	and	r24, r24
     3b4:	09 f4       	brne	.+2      	; 0x3b8 <prvTimerTask+0x1aa>
     3b6:	4c c0       	rjmp	.+152    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     3b8:	d2 01       	movw	r26, r4
     3ba:	54 96       	adiw	r26, 0x14	; 20
     3bc:	ed 91       	ld	r30, X+
     3be:	fc 91       	ld	r31, X
     3c0:	55 97       	sbiw	r26, 0x15	; 21
     3c2:	c2 01       	movw	r24, r4
     3c4:	19 95       	eicall
     3c6:	f2 01       	movw	r30, r4
     3c8:	87 89       	ldd	r24, Z+23	; 0x17
     3ca:	82 ff       	sbrs	r24, 2
     3cc:	41 c0       	rjmp	.+130    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     3ce:	4a 81       	ldd	r20, Y+2	; 0x02
     3d0:	5b 81       	ldd	r21, Y+3	; 0x03
     3d2:	6c 81       	ldd	r22, Y+4	; 0x04
     3d4:	7d 81       	ldd	r23, Y+5	; 0x05
     3d6:	86 85       	ldd	r24, Z+14	; 0x0e
     3d8:	97 85       	ldd	r25, Z+15	; 0x0f
     3da:	a0 89       	ldd	r26, Z+16	; 0x10
     3dc:	b1 89       	ldd	r27, Z+17	; 0x11
     3de:	9a 01       	movw	r18, r20
     3e0:	ab 01       	movw	r20, r22
     3e2:	28 0f       	add	r18, r24
     3e4:	39 1f       	adc	r19, r25
     3e6:	4a 1f       	adc	r20, r26
     3e8:	5b 1f       	adc	r21, r27
     3ea:	c8 2c       	mov	r12, r8
     3ec:	d9 2c       	mov	r13, r9
     3ee:	ea 2c       	mov	r14, r10
     3f0:	fb 2c       	mov	r15, r11
     3f2:	00 e0       	ldi	r16, 0x00	; 0
     3f4:	10 e0       	ldi	r17, 0x00	; 0
     3f6:	60 e0       	ldi	r22, 0x00	; 0
     3f8:	c2 01       	movw	r24, r4
     3fa:	0e 94 75 1d 	call	0x3aea	; 0x3aea <xTimerGenericCommand>
     3fe:	28 c0       	rjmp	.+80     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     400:	d2 01       	movw	r26, r4
     402:	57 96       	adiw	r26, 0x17	; 23
     404:	8c 91       	ld	r24, X
     406:	57 97       	sbiw	r26, 0x17	; 23
     408:	8e 7f       	andi	r24, 0xFE	; 254
     40a:	57 96       	adiw	r26, 0x17	; 23
     40c:	8c 93       	st	X, r24
     40e:	20 c0       	rjmp	.+64     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     410:	f2 01       	movw	r30, r4
     412:	87 89       	ldd	r24, Z+23	; 0x17
     414:	81 60       	ori	r24, 0x01	; 1
     416:	87 8b       	std	Z+23, r24	; 0x17
     418:	4a 81       	ldd	r20, Y+2	; 0x02
     41a:	5b 81       	ldd	r21, Y+3	; 0x03
     41c:	6c 81       	ldd	r22, Y+4	; 0x04
     41e:	7d 81       	ldd	r23, Y+5	; 0x05
     420:	46 87       	std	Z+14, r20	; 0x0e
     422:	57 87       	std	Z+15, r21	; 0x0f
     424:	60 8b       	std	Z+16, r22	; 0x10
     426:	71 8b       	std	Z+17, r23	; 0x11
     428:	40 0f       	add	r20, r16
     42a:	51 1f       	adc	r21, r17
     42c:	62 1f       	adc	r22, r18
     42e:	73 1f       	adc	r23, r19
     430:	68 01       	movw	r12, r16
     432:	79 01       	movw	r14, r18
     434:	c2 01       	movw	r24, r4
     436:	0e 94 e2 1c 	call	0x39c4	; 0x39c4 <prvInsertTimerInActiveList>
     43a:	0a c0       	rjmp	.+20     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     43c:	f2 01       	movw	r30, r4
     43e:	87 89       	ldd	r24, Z+23	; 0x17
     440:	81 fd       	sbrc	r24, 1
     442:	04 c0       	rjmp	.+8      	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
     444:	c2 01       	movw	r24, r4
     446:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <vPortFree>
     44a:	02 c0       	rjmp	.+4      	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     44c:	8e 7f       	andi	r24, 0xFE	; 254
     44e:	87 8b       	std	Z+23, r24	; 0x17
     450:	28 2d       	mov	r18, r8
     452:	39 2d       	mov	r19, r9
     454:	4a 2d       	mov	r20, r10
     456:	5b 2d       	mov	r21, r11
     458:	66 2d       	mov	r22, r6
     45a:	77 2d       	mov	r23, r7
     45c:	80 91 bb 18 	lds	r24, 0x18BB	; 0x8018bb <xTimerQueue>
     460:	90 91 bc 18 	lds	r25, 0x18BC	; 0x8018bc <xTimerQueue+0x1>
     464:	0e 94 4f 10 	call	0x209e	; 0x209e <xQueueReceive>
     468:	81 11       	cpse	r24, r1
     46a:	6b cf       	rjmp	.-298    	; 0x342 <prvTimerTask+0x134>
     46c:	e4 ce       	rjmp	.-568    	; 0x236 <prvTimerTask+0x28>
     46e:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <vTaskSuspendAll>
     472:	ce 01       	movw	r24, r28
     474:	01 96       	adiw	r24, 0x01	; 1
     476:	0e 94 d3 1d 	call	0x3ba6	; 0x3ba6 <prvSampleTimeNow>
     47a:	6b 87       	std	Y+11, r22	; 0x0b
     47c:	7c 87       	std	Y+12, r23	; 0x0c
     47e:	8d 87       	std	Y+13, r24	; 0x0d
     480:	9e 87       	std	Y+14, r25	; 0x0e
     482:	89 81       	ldd	r24, Y+1	; 0x01
     484:	81 11       	cpse	r24, r1
     486:	5a cf       	rjmp	.-332    	; 0x33c <prvTimerTask+0x12e>
     488:	e0 91 bd 18 	lds	r30, 0x18BD	; 0x8018bd <pxOverflowTimerList>
     48c:	f0 91 be 18 	lds	r31, 0x18BE	; 0x8018be <pxOverflowTimerList+0x1>
     490:	80 81       	ld	r24, Z
     492:	21 e0       	ldi	r18, 0x01	; 1
     494:	81 11       	cpse	r24, r1
     496:	20 e0       	ldi	r18, 0x00	; 0
     498:	28 2c       	mov	r2, r8
     49a:	39 2c       	mov	r3, r9
     49c:	4a 2c       	mov	r4, r10
     49e:	5b 2c       	mov	r5, r11
     4a0:	36 cf       	rjmp	.-404    	; 0x30e <prvTimerTask+0x100>

000004a2 <__ctors_end>:
     4a2:	11 24       	eor	r1, r1
     4a4:	1f be       	out	0x3f, r1	; 63
     4a6:	cf ef       	ldi	r28, 0xFF	; 255
     4a8:	d1 e2       	ldi	r29, 0x21	; 33
     4aa:	de bf       	out	0x3e, r29	; 62
     4ac:	cd bf       	out	0x3d, r28	; 61
     4ae:	00 e0       	ldi	r16, 0x00	; 0
     4b0:	0c bf       	out	0x3c, r16	; 60

000004b2 <__do_copy_data>:
     4b2:	17 e0       	ldi	r17, 0x07	; 7
     4b4:	a0 e0       	ldi	r26, 0x00	; 0
     4b6:	b2 e0       	ldi	r27, 0x02	; 2
     4b8:	e6 e7       	ldi	r30, 0x76	; 118
     4ba:	f9 e6       	ldi	r31, 0x69	; 105
     4bc:	00 e0       	ldi	r16, 0x00	; 0
     4be:	0b bf       	out	0x3b, r16	; 59
     4c0:	02 c0       	rjmp	.+4      	; 0x4c6 <__do_copy_data+0x14>
     4c2:	07 90       	elpm	r0, Z+
     4c4:	0d 92       	st	X+, r0
     4c6:	a0 3b       	cpi	r26, 0xB0	; 176
     4c8:	b1 07       	cpc	r27, r17
     4ca:	d9 f7       	brne	.-10     	; 0x4c2 <__do_copy_data+0x10>

000004cc <__do_clear_bss>:
     4cc:	2a e1       	ldi	r18, 0x1A	; 26
     4ce:	a0 eb       	ldi	r26, 0xB0	; 176
     4d0:	b7 e0       	ldi	r27, 0x07	; 7
     4d2:	01 c0       	rjmp	.+2      	; 0x4d6 <.do_clear_bss_start>

000004d4 <.do_clear_bss_loop>:
     4d4:	1d 92       	st	X+, r1

000004d6 <.do_clear_bss_start>:
     4d6:	a5 37       	cpi	r26, 0x75	; 117
     4d8:	b2 07       	cpc	r27, r18
     4da:	e1 f7       	brne	.-8      	; 0x4d4 <.do_clear_bss_loop>
     4dc:	0e 94 4d 1f 	call	0x3e9a	; 0x3e9a <main>
     4e0:	0c 94 b9 34 	jmp	0x6972	; 0x6972 <_exit>

000004e4 <__bad_interrupt>:
     4e4:	8d cd       	rjmp	.-1254   	; 0x0 <__vectors>

000004e6 <time>:
     4e6:	fc 01       	movw	r30, r24
     4e8:	0f b6       	in	r0, 0x3f	; 63
     4ea:	f8 94       	cli
     4ec:	60 91 71 1a 	lds	r22, 0x1A71	; 0x801a71 <__system_time>
     4f0:	70 91 72 1a 	lds	r23, 0x1A72	; 0x801a72 <__system_time+0x1>
     4f4:	80 91 73 1a 	lds	r24, 0x1A73	; 0x801a73 <__system_time+0x2>
     4f8:	90 91 74 1a 	lds	r25, 0x1A74	; 0x801a74 <__system_time+0x3>
     4fc:	0f be       	out	0x3f, r0	; 63
     4fe:	30 97       	sbiw	r30, 0x00	; 0
     500:	21 f0       	breq	.+8      	; 0x50a <time+0x24>
     502:	60 83       	st	Z, r22
     504:	71 83       	std	Z+1, r23	; 0x01
     506:	82 83       	std	Z+2, r24	; 0x02
     508:	93 83       	std	Z+3, r25	; 0x03
     50a:	08 95       	ret

0000050c <co2Reader_create>:
void co2Reader_destroy(co2reader_t self) {
	if (self == NULL)
		return;
	vTaskDelete(self->handleTask);
	vPortFree(self);
}
     50c:	2f 92       	push	r2
     50e:	3f 92       	push	r3
     510:	4f 92       	push	r4
     512:	5f 92       	push	r5
     514:	6f 92       	push	r6
     516:	7f 92       	push	r7
     518:	8f 92       	push	r8
     51a:	9f 92       	push	r9
     51c:	af 92       	push	r10
     51e:	bf 92       	push	r11
     520:	cf 92       	push	r12
     522:	df 92       	push	r13
     524:	ef 92       	push	r14
     526:	ff 92       	push	r15
     528:	0f 93       	push	r16
     52a:	1f 93       	push	r17
     52c:	cf 93       	push	r28
     52e:	df 93       	push	r29
     530:	d8 2f       	mov	r29, r24
     532:	c6 2f       	mov	r28, r22
     534:	1a 01       	movw	r2, r20
     536:	28 01       	movw	r4, r16
     538:	39 01       	movw	r6, r18
     53a:	87 01       	movw	r16, r14
     53c:	64 e0       	ldi	r22, 0x04	; 4
     53e:	70 e0       	ldi	r23, 0x00	; 0
     540:	81 e0       	ldi	r24, 0x01	; 1
     542:	90 e0       	ldi	r25, 0x00	; 0
     544:	0e 94 6d 2f 	call	0x5eda	; 0x5eda <calloc>
     548:	4c 01       	movw	r8, r24
     54a:	89 2b       	or	r24, r25
     54c:	69 f1       	breq	.+90     	; 0x5a8 <co2Reader_create+0x9c>
     54e:	f4 01       	movw	r30, r8
     550:	11 92       	st	Z+, r1
     552:	11 92       	st	Z+, r1
     554:	7f 01       	movw	r14, r30
     556:	30 92 bb 07 	sts	0x07BB, r3	; 0x8007bb <_startMeasureEventGroup+0x1>
     55a:	20 92 ba 07 	sts	0x07BA, r2	; 0x8007ba <_startMeasureEventGroup>
     55e:	40 92 b6 07 	sts	0x07B6, r4	; 0x8007b6 <_startMeasureBit>
     562:	50 92 b7 07 	sts	0x07B7, r5	; 0x8007b7 <_startMeasureBit+0x1>
     566:	60 92 b8 07 	sts	0x07B8, r6	; 0x8007b8 <_startMeasureBit+0x2>
     56a:	70 92 b9 07 	sts	0x07B9, r7	; 0x8007b9 <_startMeasureBit+0x3>
     56e:	10 93 b5 07 	sts	0x07B5, r17	; 0x8007b5 <_readyMeasuringEventGroup+0x1>
     572:	00 93 b4 07 	sts	0x07B4, r16	; 0x8007b4 <_readyMeasuringEventGroup>
     576:	a0 92 b0 07 	sts	0x07B0, r10	; 0x8007b0 <__data_end>
     57a:	b0 92 b1 07 	sts	0x07B1, r11	; 0x8007b1 <__data_end+0x1>
     57e:	c0 92 b2 07 	sts	0x07B2, r12	; 0x8007b2 <__data_end+0x2>
     582:	d0 92 b3 07 	sts	0x07B3, r13	; 0x8007b3 <__data_end+0x3>
     586:	60 e0       	ldi	r22, 0x00	; 0
     588:	70 e0       	ldi	r23, 0x00	; 0
     58a:	83 e0       	ldi	r24, 0x03	; 3
     58c:	0e 94 0b 27 	call	0x4e16	; 0x4e16 <mh_z19_create>
     590:	4c 2f       	mov	r20, r28
     592:	50 e0       	ldi	r21, 0x00	; 0
     594:	48 53       	subi	r20, 0x38	; 56
     596:	5f 4f       	sbci	r21, 0xFF	; 255
     598:	0d 2f       	mov	r16, r29
     59a:	94 01       	movw	r18, r8
     59c:	62 e7       	ldi	r22, 0x72	; 114
     59e:	72 e0       	ldi	r23, 0x02	; 2
     5a0:	8b e3       	ldi	r24, 0x3B	; 59
     5a2:	93 e0       	ldi	r25, 0x03	; 3
     5a4:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <xTaskCreate>
     5a8:	c4 01       	movw	r24, r8
     5aa:	df 91       	pop	r29
     5ac:	cf 91       	pop	r28
     5ae:	1f 91       	pop	r17
     5b0:	0f 91       	pop	r16
     5b2:	ff 90       	pop	r15
     5b4:	ef 90       	pop	r14
     5b6:	df 90       	pop	r13
     5b8:	cf 90       	pop	r12
     5ba:	bf 90       	pop	r11
     5bc:	af 90       	pop	r10
     5be:	9f 90       	pop	r9
     5c0:	8f 90       	pop	r8
     5c2:	7f 90       	pop	r7
     5c4:	6f 90       	pop	r6
     5c6:	5f 90       	pop	r5
     5c8:	4f 90       	pop	r4
     5ca:	3f 90       	pop	r3
     5cc:	2f 90       	pop	r2
     5ce:	08 95       	ret

000005d0 <co2Reader_measure>:


void co2Reader_measure(co2reader_t self) {
     5d0:	cf 92       	push	r12
     5d2:	df 92       	push	r13
     5d4:	ef 92       	push	r14
     5d6:	ff 92       	push	r15
     5d8:	0f 93       	push	r16
     5da:	1f 93       	push	r17
     5dc:	cf 93       	push	r28
     5de:	df 93       	push	r29
     5e0:	ec 01       	movw	r28, r24
	
	EventBits_t uxBits = xEventGroupWaitBits(_startMeasureEventGroup,
     5e2:	40 91 b6 07 	lds	r20, 0x07B6	; 0x8007b6 <_startMeasureBit>
     5e6:	50 91 b7 07 	lds	r21, 0x07B7	; 0x8007b7 <_startMeasureBit+0x1>
     5ea:	60 91 b8 07 	lds	r22, 0x07B8	; 0x8007b8 <_startMeasureBit+0x2>
     5ee:	70 91 b9 07 	lds	r23, 0x07B9	; 0x8007b9 <_startMeasureBit+0x3>
     5f2:	cc 24       	eor	r12, r12
     5f4:	ca 94       	dec	r12
     5f6:	dc 2c       	mov	r13, r12
     5f8:	76 01       	movw	r14, r12
     5fa:	01 e0       	ldi	r16, 0x01	; 1
     5fc:	21 e0       	ldi	r18, 0x01	; 1
     5fe:	80 91 ba 07 	lds	r24, 0x07BA	; 0x8007ba <_startMeasureEventGroup>
     602:	90 91 bb 07 	lds	r25, 0x07BB	; 0x8007bb <_startMeasureEventGroup+0x1>
     606:	75 d6       	rcall	.+3306   	; 0x12f2 <xEventGroupWaitBits>
	_startMeasureBit,
	pdTRUE,
	pdTRUE, 
	portMAX_DELAY);
	
	if ((uxBits & (_startMeasureBit)) == (_startMeasureBit)) {
     608:	00 91 b6 07 	lds	r16, 0x07B6	; 0x8007b6 <_startMeasureBit>
     60c:	10 91 b7 07 	lds	r17, 0x07B7	; 0x8007b7 <_startMeasureBit+0x1>
     610:	20 91 b8 07 	lds	r18, 0x07B8	; 0x8007b8 <_startMeasureBit+0x2>
     614:	30 91 b9 07 	lds	r19, 0x07B9	; 0x8007b9 <_startMeasureBit+0x3>
     618:	dc 01       	movw	r26, r24
     61a:	cb 01       	movw	r24, r22
     61c:	80 23       	and	r24, r16
     61e:	91 23       	and	r25, r17
     620:	a2 23       	and	r26, r18
     622:	b3 23       	and	r27, r19
     624:	08 17       	cp	r16, r24
     626:	19 07       	cpc	r17, r25
     628:	2a 07       	cpc	r18, r26
     62a:	3b 07       	cpc	r19, r27
     62c:	d9 f4       	brne	.+54     	; 0x664 <co2Reader_measure+0x94>
				
		mh_z19_return_code_t return_code_co2_measurement = mh_z19_take_meassuring();
     62e:	0e 94 39 27 	call	0x4e72	; 0x4e72 <mh_z19_take_meassuring>
     632:	18 2f       	mov	r17, r24
		vTaskDelay(300);
     634:	6c e2       	ldi	r22, 0x2C	; 44
     636:	71 e0       	ldi	r23, 0x01	; 1
     638:	80 e0       	ldi	r24, 0x00	; 0
     63a:	90 e0       	ldi	r25, 0x00	; 0
     63c:	0e 94 13 18 	call	0x3026	; 0x3026 <vTaskDelay>
		if(return_code_co2_measurement == MHZ19_OK) {
     640:	11 11       	cpse	r17, r1
     642:	03 c0       	rjmp	.+6      	; 0x64a <co2Reader_measure+0x7a>
			mh_z19_get_co2_ppm(&self->value);
     644:	ce 01       	movw	r24, r28
     646:	0e 94 68 27 	call	0x4ed0	; 0x4ed0 <mh_z19_get_co2_ppm>
		}
		xEventGroupSetBits(_readyMeasuringEventGroup, _readyBit);
     64a:	40 91 b0 07 	lds	r20, 0x07B0	; 0x8007b0 <__data_end>
     64e:	50 91 b1 07 	lds	r21, 0x07B1	; 0x8007b1 <__data_end+0x1>
     652:	60 91 b2 07 	lds	r22, 0x07B2	; 0x8007b2 <__data_end+0x2>
     656:	70 91 b3 07 	lds	r23, 0x07B3	; 0x8007b3 <__data_end+0x3>
     65a:	80 91 b4 07 	lds	r24, 0x07B4	; 0x8007b4 <_readyMeasuringEventGroup>
     65e:	90 91 b5 07 	lds	r25, 0x07B5	; 0x8007b5 <_readyMeasuringEventGroup+0x1>
     662:	07 d7       	rcall	.+3598   	; 0x1472 <xEventGroupSetBits>
	}
}
     664:	df 91       	pop	r29
     666:	cf 91       	pop	r28
     668:	1f 91       	pop	r17
     66a:	0f 91       	pop	r16
     66c:	ff 90       	pop	r15
     66e:	ef 90       	pop	r14
     670:	df 90       	pop	r13
     672:	cf 90       	pop	r12
     674:	08 95       	ret

00000676 <co2Reader_executeTask>:
typedef struct co2reader {
	uint16_t value;
	TaskHandle_t handleTask;
}co2reader;

void co2Reader_executeTask(void* self) {
     676:	ec 01       	movw	r28, r24
	for (;;) {
		co2Reader_measure((co2reader_t)self);
     678:	ce 01       	movw	r24, r28
     67a:	aa df       	rcall	.-172    	; 0x5d0 <co2Reader_measure>
     67c:	fd cf       	rjmp	.-6      	; 0x678 <co2Reader_executeTask+0x2>

0000067e <co2Reader_getCO2>:
	}
}

uint16_t co2Reader_getCO2(co2reader_t self) {
	return self->value;
}
     67e:	fc 01       	movw	r30, r24
     680:	80 81       	ld	r24, Z
     682:	91 81       	ldd	r25, Z+1	; 0x01
     684:	08 95       	ret

00000686 <configuration_create>:

void configuration_create() {
	_working = calloc(1, sizeof(bool));
	_ventilation = calloc(1, sizeof(bool));

	_working = true;
     686:	81 e0       	ldi	r24, 0x01	; 1
     688:	80 93 bf 07 	sts	0x07BF, r24	; 0x8007bf <_working>
	_ventilation = false;
     68c:	10 92 be 07 	sts	0x07BE, r1	; 0x8007be <_ventilation>

	_semaphore = xSemaphoreCreateMutex();
     690:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <xQueueCreateMutex>
     694:	90 93 bd 07 	sts	0x07BD, r25	; 0x8007bd <_semaphore+0x1>
     698:	80 93 bc 07 	sts	0x07BC, r24	; 0x8007bc <_semaphore>
     69c:	08 95       	ret

0000069e <configuration_setWorking>:
}

void configuration_setWorking(bool value) {
     69e:	0f 93       	push	r16
     6a0:	cf 93       	push	r28
	if (_semaphore != NULL) {
     6a2:	20 91 bc 07 	lds	r18, 0x07BC	; 0x8007bc <_semaphore>
     6a6:	30 91 bd 07 	lds	r19, 0x07BD	; 0x8007bd <_semaphore+0x1>
     6aa:	21 15       	cp	r18, r1
     6ac:	31 05       	cpc	r19, r1
     6ae:	b1 f0       	breq	.+44     	; 0x6dc <configuration_setWorking+0x3e>
     6b0:	c8 2f       	mov	r28, r24
		xSemaphoreTake(_semaphore, portMAX_DELAY);
     6b2:	4f ef       	ldi	r20, 0xFF	; 255
     6b4:	5f ef       	ldi	r21, 0xFF	; 255
     6b6:	ba 01       	movw	r22, r20
     6b8:	c9 01       	movw	r24, r18
     6ba:	0e 94 e7 10 	call	0x21ce	; 0x21ce <xQueueSemaphoreTake>
		_working = value;
     6be:	c0 93 bf 07 	sts	0x07BF, r28	; 0x8007bf <_working>
		xSemaphoreGive(_semaphore);
     6c2:	00 e0       	ldi	r16, 0x00	; 0
     6c4:	20 e0       	ldi	r18, 0x00	; 0
     6c6:	30 e0       	ldi	r19, 0x00	; 0
     6c8:	a9 01       	movw	r20, r18
     6ca:	60 e0       	ldi	r22, 0x00	; 0
     6cc:	70 e0       	ldi	r23, 0x00	; 0
     6ce:	80 91 bc 07 	lds	r24, 0x07BC	; 0x8007bc <_semaphore>
     6d2:	90 91 bd 07 	lds	r25, 0x07BD	; 0x8007bd <_semaphore+0x1>
     6d6:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <xQueueGenericSend>
     6da:	02 c0       	rjmp	.+4      	; 0x6e0 <configuration_setWorking+0x42>
	}
	else _working = value;
     6dc:	80 93 bf 07 	sts	0x07BF, r24	; 0x8007bf <_working>
}
     6e0:	cf 91       	pop	r28
     6e2:	0f 91       	pop	r16
     6e4:	08 95       	ret

000006e6 <configuration_getWorking>:

void configuration_getWorking(bool* working) {
     6e6:	0f 93       	push	r16
     6e8:	cf 93       	push	r28
     6ea:	df 93       	push	r29
	if (_semaphore != NULL) {
     6ec:	20 91 bc 07 	lds	r18, 0x07BC	; 0x8007bc <_semaphore>
     6f0:	30 91 bd 07 	lds	r19, 0x07BD	; 0x8007bd <_semaphore+0x1>
     6f4:	21 15       	cp	r18, r1
     6f6:	31 05       	cpc	r19, r1
     6f8:	b9 f0       	breq	.+46     	; 0x728 <configuration_getWorking+0x42>
     6fa:	ec 01       	movw	r28, r24
		xSemaphoreTake(_semaphore, portMAX_DELAY);
     6fc:	4f ef       	ldi	r20, 0xFF	; 255
     6fe:	5f ef       	ldi	r21, 0xFF	; 255
     700:	ba 01       	movw	r22, r20
     702:	c9 01       	movw	r24, r18
     704:	0e 94 e7 10 	call	0x21ce	; 0x21ce <xQueueSemaphoreTake>
		*working = _working;
     708:	80 91 bf 07 	lds	r24, 0x07BF	; 0x8007bf <_working>
     70c:	88 83       	st	Y, r24
		xSemaphoreGive(_semaphore);
     70e:	00 e0       	ldi	r16, 0x00	; 0
     710:	20 e0       	ldi	r18, 0x00	; 0
     712:	30 e0       	ldi	r19, 0x00	; 0
     714:	a9 01       	movw	r20, r18
     716:	60 e0       	ldi	r22, 0x00	; 0
     718:	70 e0       	ldi	r23, 0x00	; 0
     71a:	80 91 bc 07 	lds	r24, 0x07BC	; 0x8007bc <_semaphore>
     71e:	90 91 bd 07 	lds	r25, 0x07BD	; 0x8007bd <_semaphore+0x1>
     722:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <xQueueGenericSend>
     726:	04 c0       	rjmp	.+8      	; 0x730 <configuration_getWorking+0x4a>
	}
	else *working = _working;
     728:	20 91 bf 07 	lds	r18, 0x07BF	; 0x8007bf <_working>
     72c:	fc 01       	movw	r30, r24
     72e:	20 83       	st	Z, r18
}
     730:	df 91       	pop	r29
     732:	cf 91       	pop	r28
     734:	0f 91       	pop	r16
     736:	08 95       	ret

00000738 <configuration_setVentilation>:

void configuration_setVentilation(bool value) {
     738:	0f 93       	push	r16
     73a:	cf 93       	push	r28
	if (_semaphore != NULL) {
     73c:	20 91 bc 07 	lds	r18, 0x07BC	; 0x8007bc <_semaphore>
     740:	30 91 bd 07 	lds	r19, 0x07BD	; 0x8007bd <_semaphore+0x1>
     744:	21 15       	cp	r18, r1
     746:	31 05       	cpc	r19, r1
     748:	b1 f0       	breq	.+44     	; 0x776 <configuration_setVentilation+0x3e>
     74a:	c8 2f       	mov	r28, r24
		xSemaphoreTake(_semaphore, portMAX_DELAY);
     74c:	4f ef       	ldi	r20, 0xFF	; 255
     74e:	5f ef       	ldi	r21, 0xFF	; 255
     750:	ba 01       	movw	r22, r20
     752:	c9 01       	movw	r24, r18
     754:	0e 94 e7 10 	call	0x21ce	; 0x21ce <xQueueSemaphoreTake>
		_ventilation = value;
     758:	c0 93 be 07 	sts	0x07BE, r28	; 0x8007be <_ventilation>
		xSemaphoreGive(_semaphore);
     75c:	00 e0       	ldi	r16, 0x00	; 0
     75e:	20 e0       	ldi	r18, 0x00	; 0
     760:	30 e0       	ldi	r19, 0x00	; 0
     762:	a9 01       	movw	r20, r18
     764:	60 e0       	ldi	r22, 0x00	; 0
     766:	70 e0       	ldi	r23, 0x00	; 0
     768:	80 91 bc 07 	lds	r24, 0x07BC	; 0x8007bc <_semaphore>
     76c:	90 91 bd 07 	lds	r25, 0x07BD	; 0x8007bd <_semaphore+0x1>
     770:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <xQueueGenericSend>
     774:	02 c0       	rjmp	.+4      	; 0x77a <configuration_setVentilation+0x42>
	}
	else _ventilation = value;
     776:	80 93 be 07 	sts	0x07BE, r24	; 0x8007be <_ventilation>
}
     77a:	cf 91       	pop	r28
     77c:	0f 91       	pop	r16
     77e:	08 95       	ret

00000780 <configuration_getVentilation>:

void configuration_getVentilation(bool* ventilation) {
     780:	0f 93       	push	r16
     782:	cf 93       	push	r28
     784:	df 93       	push	r29
	if (_semaphore != NULL) {
     786:	20 91 bc 07 	lds	r18, 0x07BC	; 0x8007bc <_semaphore>
     78a:	30 91 bd 07 	lds	r19, 0x07BD	; 0x8007bd <_semaphore+0x1>
     78e:	21 15       	cp	r18, r1
     790:	31 05       	cpc	r19, r1
     792:	b9 f0       	breq	.+46     	; 0x7c2 <configuration_getVentilation+0x42>
     794:	ec 01       	movw	r28, r24
		xSemaphoreTake(_semaphore, portMAX_DELAY);
     796:	4f ef       	ldi	r20, 0xFF	; 255
     798:	5f ef       	ldi	r21, 0xFF	; 255
     79a:	ba 01       	movw	r22, r20
     79c:	c9 01       	movw	r24, r18
     79e:	0e 94 e7 10 	call	0x21ce	; 0x21ce <xQueueSemaphoreTake>
		*ventilation = _ventilation;
     7a2:	80 91 be 07 	lds	r24, 0x07BE	; 0x8007be <_ventilation>
     7a6:	88 83       	st	Y, r24
		xSemaphoreGive(_semaphore);
     7a8:	00 e0       	ldi	r16, 0x00	; 0
     7aa:	20 e0       	ldi	r18, 0x00	; 0
     7ac:	30 e0       	ldi	r19, 0x00	; 0
     7ae:	a9 01       	movw	r20, r18
     7b0:	60 e0       	ldi	r22, 0x00	; 0
     7b2:	70 e0       	ldi	r23, 0x00	; 0
     7b4:	80 91 bc 07 	lds	r24, 0x07BC	; 0x8007bc <_semaphore>
     7b8:	90 91 bd 07 	lds	r25, 0x07BD	; 0x8007bd <_semaphore+0x1>
     7bc:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <xQueueGenericSend>
     7c0:	04 c0       	rjmp	.+8      	; 0x7ca <configuration_getVentilation+0x4a>
	}
	else *ventilation = _ventilation;
     7c2:	20 91 be 07 	lds	r18, 0x07BE	; 0x8007be <_ventilation>
     7c6:	fc 01       	movw	r30, r24
     7c8:	20 83       	st	Z, r18
     7ca:	df 91       	pop	r29
     7cc:	cf 91       	pop	r28
     7ce:	0f 91       	pop	r16
     7d0:	08 95       	ret

000007d2 <currentCondition_create>:
}

uint16_t currentCondition_getSound(currentCondition_t self)
{
	return self->soundData;
}
     7d2:	68 e0       	ldi	r22, 0x08	; 8
     7d4:	70 e0       	ldi	r23, 0x00	; 0
     7d6:	81 e0       	ldi	r24, 0x01	; 1
     7d8:	90 e0       	ldi	r25, 0x00	; 0
     7da:	0e 94 6d 2f 	call	0x5eda	; 0x5eda <calloc>
     7de:	00 97       	sbiw	r24, 0x00	; 0
     7e0:	49 f0       	breq	.+18     	; 0x7f4 <currentCondition_create+0x22>
     7e2:	fc 01       	movw	r30, r24
     7e4:	13 82       	std	Z+3, r1	; 0x03
     7e6:	12 82       	std	Z+2, r1	; 0x02
     7e8:	15 82       	std	Z+5, r1	; 0x05
     7ea:	14 82       	std	Z+4, r1	; 0x04
     7ec:	11 82       	std	Z+1, r1	; 0x01
     7ee:	10 82       	st	Z, r1
     7f0:	17 82       	std	Z+7, r1	; 0x07
     7f2:	16 82       	std	Z+6, r1	; 0x06
     7f4:	08 95       	ret

000007f6 <currentCondition_setCO2>:
     7f6:	00 97       	sbiw	r24, 0x00	; 0
     7f8:	49 f0       	breq	.+18     	; 0x80c <currentCondition_setCO2+0x16>
     7fa:	9b 01       	movw	r18, r22
     7fc:	28 5c       	subi	r18, 0xC8	; 200
     7fe:	31 09       	sbc	r19, r1
     800:	29 34       	cpi	r18, 0x49	; 73
     802:	36 42       	sbci	r19, 0x26	; 38
     804:	18 f4       	brcc	.+6      	; 0x80c <currentCondition_setCO2+0x16>
     806:	fc 01       	movw	r30, r24
     808:	71 83       	std	Z+1, r23	; 0x01
     80a:	60 83       	st	Z, r22
     80c:	08 95       	ret

0000080e <currentCondition_setHumidity>:
     80e:	00 97       	sbiw	r24, 0x00	; 0
     810:	39 f0       	breq	.+14     	; 0x820 <currentCondition_setHumidity+0x12>
     812:	69 3e       	cpi	r22, 0xE9	; 233
     814:	23 e0       	ldi	r18, 0x03	; 3
     816:	72 07       	cpc	r23, r18
     818:	18 f4       	brcc	.+6      	; 0x820 <currentCondition_setHumidity+0x12>
     81a:	fc 01       	movw	r30, r24
     81c:	75 83       	std	Z+5, r23	; 0x05
     81e:	64 83       	std	Z+4, r22	; 0x04
     820:	08 95       	ret

00000822 <currentCondition_setTemperature>:
     822:	00 97       	sbiw	r24, 0x00	; 0
     824:	49 f0       	breq	.+18     	; 0x838 <currentCondition_setTemperature+0x16>
     826:	9b 01       	movw	r18, r22
     828:	20 57       	subi	r18, 0x70	; 112
     82a:	3e 4f       	sbci	r19, 0xFE	; 254
     82c:	27 3b       	cpi	r18, 0xB7	; 183
     82e:	33 40       	sbci	r19, 0x03	; 3
     830:	18 f4       	brcc	.+6      	; 0x838 <currentCondition_setTemperature+0x16>
     832:	fc 01       	movw	r30, r24
     834:	73 83       	std	Z+3, r23	; 0x03
     836:	62 83       	std	Z+2, r22	; 0x02
     838:	08 95       	ret

0000083a <currentCondition_setSound>:
     83a:	00 97       	sbiw	r24, 0x00	; 0
     83c:	31 f0       	breq	.+12     	; 0x84a <currentCondition_setSound+0x10>
     83e:	67 39       	cpi	r22, 0x97	; 151
     840:	71 05       	cpc	r23, r1
     842:	18 f4       	brcc	.+6      	; 0x84a <currentCondition_setSound+0x10>
     844:	fc 01       	movw	r30, r24
     846:	77 83       	std	Z+7, r23	; 0x07
     848:	66 83       	std	Z+6, r22	; 0x06
     84a:	08 95       	ret

0000084c <getcurrentConditionPayload>:

// in order for test to work, the two methods below should be commented out
lora_payload_t getcurrentConditionPayload(currentCondition_t self)
{
     84c:	fc 01       	movw	r30, r24
     84e:	db 01       	movw	r26, r22
	lora_payload_t payload;
	payload.port_no = 1;
	payload.len = 8;
	
	int16_t tempData = self->temperatureData;
     850:	12 96       	adiw	r26, 0x02	; 2
     852:	6c 91       	ld	r22, X
     854:	12 97       	sbiw	r26, 0x02	; 2
     856:	13 96       	adiw	r26, 0x03	; 3
     858:	7c 91       	ld	r23, X
     85a:	13 97       	sbiw	r26, 0x03	; 3
	
	payload.bytes[0] = tempData >> 8;
	payload.bytes[1] = tempData & 0xFF;

	payload.bytes[2] = self->humidityData >> 8;
     85c:	14 96       	adiw	r26, 0x04	; 4
     85e:	4c 91       	ld	r20, X
     860:	14 97       	sbiw	r26, 0x04	; 4
     862:	15 96       	adiw	r26, 0x05	; 5
     864:	5c 91       	ld	r21, X
     866:	15 97       	sbiw	r26, 0x05	; 5
	payload.bytes[3] = self->humidityData & 0xFF;
	
	payload.bytes[4] = self->co2Data >> 8;
     868:	2c 91       	ld	r18, X
     86a:	11 96       	adiw	r26, 0x01	; 1
     86c:	3c 91       	ld	r19, X
     86e:	11 97       	sbiw	r26, 0x01	; 1
	payload.bytes[5] = self->co2Data & 0xFF;
	
	payload.bytes[6] = self->soundData >> 8;
     870:	16 96       	adiw	r26, 0x06	; 6
     872:	8c 91       	ld	r24, X
     874:	16 97       	sbiw	r26, 0x06	; 6
     876:	17 96       	adiw	r26, 0x07	; 7
     878:	9c 91       	ld	r25, X
	payload.bytes[7] = self->soundData & 0xFF;
	
	return payload;
     87a:	a1 e0       	ldi	r26, 0x01	; 1
     87c:	a0 83       	st	Z, r26
     87e:	a8 e0       	ldi	r26, 0x08	; 8
     880:	a1 83       	std	Z+1, r26	; 0x01
     882:	72 83       	std	Z+2, r23	; 0x02
     884:	63 83       	std	Z+3, r22	; 0x03
     886:	54 83       	std	Z+4, r21	; 0x04
     888:	45 83       	std	Z+5, r20	; 0x05
     88a:	36 83       	std	Z+6, r19	; 0x06
     88c:	27 83       	std	Z+7, r18	; 0x07
     88e:	90 87       	std	Z+8, r25	; 0x08
     890:	81 87       	std	Z+9, r24	; 0x09
	
}
     892:	cf 01       	movw	r24, r30
     894:	08 95       	ret

00000896 <getSimplePayload>:
	
	uint16_t one = 0;
	payload.bytes[0] = one >> 8;
	payload.bytes[1] = one & 0xFF;
	
	return payload;
     896:	21 e0       	ldi	r18, 0x01	; 1
     898:	fc 01       	movw	r30, r24
     89a:	20 83       	st	Z, r18
     89c:	22 e0       	ldi	r18, 0x02	; 2
     89e:	21 83       	std	Z+1, r18	; 0x01
     8a0:	12 82       	std	Z+2, r1	; 0x02
     8a2:	13 82       	std	Z+3, r1	; 0x03
     8a4:	08 95       	ret

000008a6 <device_create>:
		device_startMeasuring((device_t)self);
	}
}

device_t device_create(UBaseType_t priority, UBaseType_t stack, EventGroupHandle_t startMeasureEventGroup, EventBits_t startMeasureBit,
EventGroupHandle_t readyEventGroup, EventBits_t readyBit, co2reader_t co2Reader, humAndTempReader_t humAndTempReader,soundReader_t soundReader, MessageBufferHandle_t uplinkMessageBuffer){
     8a6:	2f 92       	push	r2
     8a8:	3f 92       	push	r3
     8aa:	4f 92       	push	r4
     8ac:	5f 92       	push	r5
     8ae:	6f 92       	push	r6
     8b0:	7f 92       	push	r7
     8b2:	8f 92       	push	r8
     8b4:	9f 92       	push	r9
     8b6:	af 92       	push	r10
     8b8:	bf 92       	push	r11
     8ba:	cf 92       	push	r12
     8bc:	df 92       	push	r13
     8be:	ef 92       	push	r14
     8c0:	ff 92       	push	r15
     8c2:	0f 93       	push	r16
     8c4:	1f 93       	push	r17
     8c6:	cf 93       	push	r28
     8c8:	df 93       	push	r29
     8ca:	00 d0       	rcall	.+0      	; 0x8cc <device_create+0x26>
     8cc:	1f 92       	push	r1
     8ce:	cd b7       	in	r28, 0x3d	; 61
     8d0:	de b7       	in	r29, 0x3e	; 62
     8d2:	28 2e       	mov	r2, r24
     8d4:	36 2e       	mov	r3, r22
     8d6:	5c 83       	std	Y+4, r21	; 0x04
     8d8:	4b 83       	std	Y+3, r20	; 0x03
     8da:	28 01       	movw	r4, r16
     8dc:	39 01       	movw	r6, r18

	device_t _new_device = calloc(1, sizeof(device));
     8de:	6a e0       	ldi	r22, 0x0A	; 10
     8e0:	70 e0       	ldi	r23, 0x00	; 0
     8e2:	81 e0       	ldi	r24, 0x01	; 1
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	0e 94 6d 2f 	call	0x5eda	; 0x5eda <calloc>
     8ea:	9a 83       	std	Y+2, r25	; 0x02
     8ec:	89 83       	std	Y+1, r24	; 0x01
	if (_new_device == NULL)
     8ee:	00 97       	sbiw	r24, 0x00	; 0
     8f0:	09 f4       	brne	.+2      	; 0x8f4 <device_create+0x4e>
     8f2:	40 c0       	rjmp	.+128    	; 0x974 <device_create+0xce>
		return NULL;

	_new_device->co2reader = co2Reader;
     8f4:	fc 01       	movw	r30, r24
     8f6:	91 82       	std	Z+1, r9	; 0x01
     8f8:	80 82       	st	Z, r8
	_new_device->humAndTempReader = humAndTempReader;
     8fa:	8a 8d       	ldd	r24, Y+26	; 0x1a
     8fc:	9b 8d       	ldd	r25, Y+27	; 0x1b
     8fe:	93 83       	std	Z+3, r25	; 0x03
     900:	82 83       	std	Z+2, r24	; 0x02
	_new_device->soundReader=soundReader;
     902:	8c 8d       	ldd	r24, Y+28	; 0x1c
     904:	9d 8d       	ldd	r25, Y+29	; 0x1d
     906:	95 83       	std	Z+5, r25	; 0x05
     908:	84 83       	std	Z+4, r24	; 0x04
	currentCondition_t currentCond = currentCondition_create();
     90a:	63 df       	rcall	.-314    	; 0x7d2 <currentCondition_create>
	_new_device->currentCondition = currentCond;
     90c:	e9 81       	ldd	r30, Y+1	; 0x01
     90e:	fa 81       	ldd	r31, Y+2	; 0x02
     910:	97 83       	std	Z+7, r25	; 0x07
     912:	86 83       	std	Z+6, r24	; 0x06

	_startMeasureEventGroup = startMeasureEventGroup;
     914:	8b 81       	ldd	r24, Y+3	; 0x03
     916:	9c 81       	ldd	r25, Y+4	; 0x04
     918:	90 93 e3 07 	sts	0x07E3, r25	; 0x8007e3 <_startMeasureEventGroup+0x1>
     91c:	80 93 e2 07 	sts	0x07E2, r24	; 0x8007e2 <_startMeasureEventGroup>
	_startMeasureBit = startMeasureBit;
     920:	40 92 de 07 	sts	0x07DE, r4	; 0x8007de <_startMeasureBit>
     924:	50 92 df 07 	sts	0x07DF, r5	; 0x8007df <_startMeasureBit+0x1>
     928:	60 92 e0 07 	sts	0x07E0, r6	; 0x8007e0 <_startMeasureBit+0x2>
     92c:	70 92 e1 07 	sts	0x07E1, r7	; 0x8007e1 <_startMeasureBit+0x3>

	_readyMeasuringEventGroup = readyEventGroup;
     930:	f0 92 dd 07 	sts	0x07DD, r15	; 0x8007dd <_readyMeasuringEventGroup+0x1>
     934:	e0 92 dc 07 	sts	0x07DC, r14	; 0x8007dc <_readyMeasuringEventGroup>
	_readyBit = readyBit;
     938:	a0 92 d8 07 	sts	0x07D8, r10	; 0x8007d8 <_readyBit>
     93c:	b0 92 d9 07 	sts	0x07D9, r11	; 0x8007d9 <_readyBit+0x1>
     940:	c0 92 da 07 	sts	0x07DA, r12	; 0x8007da <_readyBit+0x2>
     944:	d0 92 db 07 	sts	0x07DB, r13	; 0x8007db <_readyBit+0x3>
	
	_uplinkmessageBuffer=uplinkMessageBuffer;
     948:	8e 8d       	ldd	r24, Y+30	; 0x1e
     94a:	9f 8d       	ldd	r25, Y+31	; 0x1f
     94c:	90 93 d7 07 	sts	0x07D7, r25	; 0x8007d7 <_uplinkmessageBuffer+0x1>
     950:	80 93 d6 07 	sts	0x07D6, r24	; 0x8007d6 <_uplinkmessageBuffer>

	xTaskCreate(
     954:	43 2d       	mov	r20, r3
     956:	50 e0       	ldi	r21, 0x00	; 0
     958:	48 53       	subi	r20, 0x38	; 56
     95a:	5f 4f       	sbci	r21, 0xFF	; 255
     95c:	7f 01       	movw	r14, r30
     95e:	98 e0       	ldi	r25, 0x08	; 8
     960:	e9 0e       	add	r14, r25
     962:	f1 1c       	adc	r15, r1
     964:	02 2d       	mov	r16, r2
     966:	9f 01       	movw	r18, r30
     968:	6c e7       	ldi	r22, 0x7C	; 124
     96a:	72 e0       	ldi	r23, 0x02	; 2
     96c:	8f ed       	ldi	r24, 0xDF	; 223
     96e:	95 e0       	ldi	r25, 0x05	; 5
     970:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <xTaskCreate>
		priority,
		&_new_device->handleTask
	);

	return _new_device;
}
     974:	89 81       	ldd	r24, Y+1	; 0x01
     976:	9a 81       	ldd	r25, Y+2	; 0x02
     978:	0f 90       	pop	r0
     97a:	0f 90       	pop	r0
     97c:	0f 90       	pop	r0
     97e:	0f 90       	pop	r0
     980:	df 91       	pop	r29
     982:	cf 91       	pop	r28
     984:	1f 91       	pop	r17
     986:	0f 91       	pop	r16
     988:	ff 90       	pop	r15
     98a:	ef 90       	pop	r14
     98c:	df 90       	pop	r13
     98e:	cf 90       	pop	r12
     990:	bf 90       	pop	r11
     992:	af 90       	pop	r10
     994:	9f 90       	pop	r9
     996:	8f 90       	pop	r8
     998:	7f 90       	pop	r7
     99a:	6f 90       	pop	r6
     99c:	5f 90       	pop	r5
     99e:	4f 90       	pop	r4
     9a0:	3f 90       	pop	r3
     9a2:	2f 90       	pop	r2
     9a4:	08 95       	ret

000009a6 <device_startMeasuring>:

void device_startMeasuring(device_t self) {
     9a6:	af 92       	push	r10
     9a8:	bf 92       	push	r11
     9aa:	cf 92       	push	r12
     9ac:	df 92       	push	r13
     9ae:	ef 92       	push	r14
     9b0:	ff 92       	push	r15
     9b2:	0f 93       	push	r16
     9b4:	1f 93       	push	r17
     9b6:	cf 93       	push	r28
     9b8:	df 93       	push	r29
     9ba:	cd b7       	in	r28, 0x3d	; 61
     9bc:	de b7       	in	r29, 0x3e	; 62
     9be:	66 97       	sbiw	r28, 0x16	; 22
     9c0:	0f b6       	in	r0, 0x3f	; 63
     9c2:	f8 94       	cli
     9c4:	de bf       	out	0x3e, r29	; 62
     9c6:	0f be       	out	0x3f, r0	; 63
     9c8:	cd bf       	out	0x3d, r28	; 61
     9ca:	5c 01       	movw	r10, r24
	//we should first check if device is on, get that from lora and add new eventBit 
	
	bool* works = pvPortMalloc(sizeof(bool));
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	36 d6       	rcall	.+3180   	; 0x163e <pvPortMalloc>
     9d2:	8c 01       	movw	r16, r24
	configuration_getWorking(works);
     9d4:	88 de       	rcall	.-752    	; 0x6e6 <configuration_getWorking>
     9d6:	f8 01       	movw	r30, r16
	if (*works == true)
     9d8:	80 81       	ld	r24, Z
     9da:	88 23       	and	r24, r24
     9dc:	09 f4       	brne	.+2      	; 0x9e0 <device_startMeasuring+0x3a>
     9de:	bc c0       	rjmp	.+376    	; 0xb58 <device_startMeasuring+0x1b2>
     9e0:	81 e0       	ldi	r24, 0x01	; 1
	{

		bool* ventilate = pvPortMalloc(sizeof(bool));
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	2c d6       	rcall	.+3160   	; 0x163e <pvPortMalloc>
     9e6:	8c 01       	movw	r16, r24
		configuration_getVentilation(ventilate);
     9e8:	cb de       	rcall	.-618    	; 0x780 <configuration_getVentilation>
     9ea:	f8 01       	movw	r30, r16
		if(*ventilate == true)
     9ec:	80 81       	ld	r24, Z
     9ee:	88 23       	and	r24, r24
		{
			servo_open();
     9f0:	11 f0       	breq	.+4      	; 0x9f6 <device_startMeasuring+0x50>
     9f2:	6d d2       	rcall	.+1242   	; 0xece <servo_open>
     9f4:	01 c0       	rjmp	.+2      	; 0x9f8 <device_startMeasuring+0x52>
		} 
		else
		{
			servo_close();
     9f6:	70 d2       	rcall	.+1248   	; 0xed8 <servo_close>
     9f8:	40 91 de 07 	lds	r20, 0x07DE	; 0x8007de <_startMeasureBit>
		}

	////tell sensors to start meassuring 
	xEventGroupSetBits(_startMeasureEventGroup, _startMeasureBit);
     9fc:	50 91 df 07 	lds	r21, 0x07DF	; 0x8007df <_startMeasureBit+0x1>
     a00:	60 91 e0 07 	lds	r22, 0x07E0	; 0x8007e0 <_startMeasureBit+0x2>
     a04:	70 91 e1 07 	lds	r23, 0x07E1	; 0x8007e1 <_startMeasureBit+0x3>
     a08:	80 91 e2 07 	lds	r24, 0x07E2	; 0x8007e2 <_startMeasureEventGroup>
     a0c:	90 91 e3 07 	lds	r25, 0x07E3	; 0x8007e3 <_startMeasureEventGroup+0x1>
     a10:	30 d5       	rcall	.+2656   	; 0x1472 <xEventGroupSetBits>
     a12:	40 91 d8 07 	lds	r20, 0x07D8	; 0x8007d8 <_readyBit>

	//wait for sensors to read data
	EventBits_t uxBits = xEventGroupWaitBits(_readyMeasuringEventGroup, 
     a16:	50 91 d9 07 	lds	r21, 0x07D9	; 0x8007d9 <_readyBit+0x1>
     a1a:	60 91 da 07 	lds	r22, 0x07DA	; 0x8007da <_readyBit+0x2>
     a1e:	70 91 db 07 	lds	r23, 0x07DB	; 0x8007db <_readyBit+0x3>
     a22:	cc 24       	eor	r12, r12
     a24:	ca 94       	dec	r12
     a26:	dc 2c       	mov	r13, r12
     a28:	76 01       	movw	r14, r12
     a2a:	01 e0       	ldi	r16, 0x01	; 1
     a2c:	21 e0       	ldi	r18, 0x01	; 1
     a2e:	80 91 dc 07 	lds	r24, 0x07DC	; 0x8007dc <_readyMeasuringEventGroup>
     a32:	90 91 dd 07 	lds	r25, 0x07DD	; 0x8007dd <_readyMeasuringEventGroup+0x1>
     a36:	5d d4       	rcall	.+2234   	; 0x12f2 <xEventGroupWaitBits>
     a38:	00 91 d8 07 	lds	r16, 0x07D8	; 0x8007d8 <_readyBit>
		_readyBit, 
		pdTRUE, 
		pdTRUE,
		portMAX_DELAY);
	
	if ((uxBits & (_readyBit)) == (_readyBit)) {
     a3c:	10 91 d9 07 	lds	r17, 0x07D9	; 0x8007d9 <_readyBit+0x1>
     a40:	20 91 da 07 	lds	r18, 0x07DA	; 0x8007da <_readyBit+0x2>
     a44:	30 91 db 07 	lds	r19, 0x07DB	; 0x8007db <_readyBit+0x3>
     a48:	dc 01       	movw	r26, r24
     a4a:	cb 01       	movw	r24, r22
     a4c:	80 23       	and	r24, r16
     a4e:	91 23       	and	r25, r17
     a50:	a2 23       	and	r26, r18
     a52:	b3 23       	and	r27, r19
     a54:	08 17       	cp	r16, r24
     a56:	19 07       	cpc	r17, r25
     a58:	2a 07       	cpc	r18, r26
     a5a:	3b 07       	cpc	r19, r27
     a5c:	09 f0       	breq	.+2      	; 0xa60 <device_startMeasuring+0xba>
     a5e:	9e c0       	rjmp	.+316    	; 0xb9c <device_startMeasuring+0x1f6>
		currentCondition_setCO2(self->currentCondition,co2Reader_getCO2(self->co2reader));
     a60:	f5 01       	movw	r30, r10
     a62:	80 81       	ld	r24, Z
     a64:	91 81       	ldd	r25, Z+1	; 0x01
     a66:	0b de       	rcall	.-1002   	; 0x67e <co2Reader_getCO2>
     a68:	bc 01       	movw	r22, r24
     a6a:	f5 01       	movw	r30, r10
     a6c:	86 81       	ldd	r24, Z+6	; 0x06
     a6e:	97 81       	ldd	r25, Z+7	; 0x07
     a70:	c2 de       	rcall	.-636    	; 0x7f6 <currentCondition_setCO2>
		
		currentCondition_setSound(self->currentCondition,soundReader_getSound(self->soundReader));
     a72:	f5 01       	movw	r30, r10
     a74:	84 81       	ldd	r24, Z+4	; 0x04
     a76:	95 81       	ldd	r25, Z+5	; 0x05
     a78:	e8 d2       	rcall	.+1488   	; 0x104a <soundReader_getSound>
     a7a:	bc 01       	movw	r22, r24
     a7c:	f5 01       	movw	r30, r10
     a7e:	86 81       	ldd	r24, Z+6	; 0x06
     a80:	97 81       	ldd	r25, Z+7	; 0x07
     a82:	db de       	rcall	.-586    	; 0x83a <currentCondition_setSound>
		
		currentCondition_setTemperature(self->currentCondition,humAndTempReader_getTemperature(self->humAndTempReader));
     a84:	f5 01       	movw	r30, r10
     a86:	82 81       	ldd	r24, Z+2	; 0x02
     a88:	93 81       	ldd	r25, Z+3	; 0x03
     a8a:	1a d2       	rcall	.+1076   	; 0xec0 <humAndTempReader_getTemperature>
     a8c:	bc 01       	movw	r22, r24
     a8e:	f5 01       	movw	r30, r10
     a90:	86 81       	ldd	r24, Z+6	; 0x06
     a92:	97 81       	ldd	r25, Z+7	; 0x07
     a94:	c6 de       	rcall	.-628    	; 0x822 <currentCondition_setTemperature>
		
		int16_t humidity = humAndTempReader_getHumidity(self->humAndTempReader);
     a96:	f5 01       	movw	r30, r10
     a98:	82 81       	ldd	r24, Z+2	; 0x02
     a9a:	93 81       	ldd	r25, Z+3	; 0x03
     a9c:	0d d2       	rcall	.+1050   	; 0xeb8 <humAndTempReader_getHumidity>
     a9e:	bc 01       	movw	r22, r24
		currentCondition_setHumidity(self->currentCondition, humidity);
     aa0:	f5 01       	movw	r30, r10
     aa2:	86 81       	ldd	r24, Z+6	; 0x06
     aa4:	97 81       	ldd	r25, Z+7	; 0x07
     aa6:	b3 de       	rcall	.-666    	; 0x80e <currentCondition_setHumidity>
     aa8:	f5 01       	movw	r30, r10
		
		
		printf("CO2 is: %u\n", co2Reader_getCO2(self->co2reader));
     aaa:	80 81       	ld	r24, Z
     aac:	91 81       	ldd	r25, Z+1	; 0x01
     aae:	e7 dd       	rcall	.-1074   	; 0x67e <co2Reader_getCO2>
     ab0:	9f 93       	push	r25
     ab2:	8f 93       	push	r24
     ab4:	83 e8       	ldi	r24, 0x83	; 131
     ab6:	92 e0       	ldi	r25, 0x02	; 2
     ab8:	9f 93       	push	r25
     aba:	8f 93       	push	r24
     abc:	0e 94 60 31 	call	0x62c0	; 0x62c0 <printf>
     ac0:	f5 01       	movw	r30, r10
		printf("Temperature is: %d\n", humAndTempReader_getTemperature(self->humAndTempReader));
     ac2:	82 81       	ldd	r24, Z+2	; 0x02
     ac4:	93 81       	ldd	r25, Z+3	; 0x03
     ac6:	fc d1       	rcall	.+1016   	; 0xec0 <humAndTempReader_getTemperature>
     ac8:	9f 93       	push	r25
     aca:	8f 93       	push	r24
     acc:	8f e8       	ldi	r24, 0x8F	; 143
     ace:	92 e0       	ldi	r25, 0x02	; 2
     ad0:	9f 93       	push	r25
     ad2:	8f 93       	push	r24
     ad4:	0e 94 60 31 	call	0x62c0	; 0x62c0 <printf>
     ad8:	f5 01       	movw	r30, r10
		printf("Humidity is: %u\n", humAndTempReader_getHumidity(self->humAndTempReader));
     ada:	82 81       	ldd	r24, Z+2	; 0x02
     adc:	93 81       	ldd	r25, Z+3	; 0x03
     ade:	ec d1       	rcall	.+984    	; 0xeb8 <humAndTempReader_getHumidity>
     ae0:	9f 93       	push	r25
     ae2:	8f 93       	push	r24
     ae4:	83 ea       	ldi	r24, 0xA3	; 163
     ae6:	92 e0       	ldi	r25, 0x02	; 2
     ae8:	9f 93       	push	r25
     aea:	8f 93       	push	r24
     aec:	0e 94 60 31 	call	0x62c0	; 0x62c0 <printf>
     af0:	f5 01       	movw	r30, r10
		printf("Sound is: %u\n", soundReader_getSound(self->soundReader));
     af2:	84 81       	ldd	r24, Z+4	; 0x04
     af4:	95 81       	ldd	r25, Z+5	; 0x05
     af6:	a9 d2       	rcall	.+1362   	; 0x104a <soundReader_getSound>
     af8:	9f 93       	push	r25
     afa:	8f 93       	push	r24
     afc:	84 eb       	ldi	r24, 0xB4	; 180
     afe:	92 e0       	ldi	r25, 0x02	; 2
     b00:	9f 93       	push	r25
     b02:	8f 93       	push	r24
     b04:	0e 94 60 31 	call	0x62c0	; 0x62c0 <printf>
     b08:	f5 01       	movw	r30, r10
     b0a:	66 81       	ldd	r22, Z+6	; 0x06
		
		/*Perhaps loraPayload is not a good idea to be here*/
		_uplink_payload = getcurrentConditionPayload(self->currentCondition);
     b0c:	77 81       	ldd	r23, Z+7	; 0x07
     b0e:	ce 01       	movw	r24, r28
     b10:	01 96       	adiw	r24, 0x01	; 1
     b12:	9c de       	rcall	.-712    	; 0x84c <getcurrentConditionPayload>
     b14:	86 e1       	ldi	r24, 0x16	; 22
     b16:	fe 01       	movw	r30, r28
     b18:	31 96       	adiw	r30, 0x01	; 1
     b1a:	a0 ec       	ldi	r26, 0xC0	; 192
     b1c:	b7 e0       	ldi	r27, 0x07	; 7
     b1e:	01 90       	ld	r0, Z+
     b20:	0d 92       	st	X+, r0
     b22:	8a 95       	dec	r24
     b24:	e1 f7       	brne	.-8      	; 0xb1e <device_startMeasuring+0x178>
     b26:	0f ef       	ldi	r16, 0xFF	; 255
     b28:	1f ef       	ldi	r17, 0xFF	; 255
     b2a:	98 01       	movw	r18, r16
		
		xMessageBufferSend(_uplinkmessageBuffer,(void*) &_uplink_payload,sizeof(_uplink_payload),portMAX_DELAY);
     b2c:	46 e1       	ldi	r20, 0x16	; 22
     b2e:	50 e0       	ldi	r21, 0x00	; 0
     b30:	60 ec       	ldi	r22, 0xC0	; 192
     b32:	77 e0       	ldi	r23, 0x07	; 7
     b34:	80 91 d6 07 	lds	r24, 0x07D6	; 0x8007d6 <_uplinkmessageBuffer>
     b38:	90 91 d7 07 	lds	r25, 0x07D7	; 0x8007d7 <_uplinkmessageBuffer+0x1>
     b3c:	0e 94 23 13 	call	0x2646	; 0x2646 <xStreamBufferSend>
     b40:	60 e3       	ldi	r22, 0x30	; 48
     b42:	75 e7       	ldi	r23, 0x75	; 117
		vTaskDelay(30000);
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	90 e0       	ldi	r25, 0x00	; 0
     b48:	0e 94 13 18 	call	0x3026	; 0x3026 <vTaskDelay>
     b4c:	0f b6       	in	r0, 0x3f	; 63
     b4e:	f8 94       	cli
     b50:	de bf       	out	0x3e, r29	; 62
     b52:	0f be       	out	0x3f, r0	; 63
     b54:	cd bf       	out	0x3d, r28	; 61
     b56:	22 c0       	rjmp	.+68     	; 0xb9c <device_startMeasuring+0x1f6>
     b58:	f5 01       	movw	r30, r10
     b5a:	66 81       	ldd	r22, Z+6	; 0x06
	}
	//if the device is not on, wait a bit and check if anything is changed
	}
	else
	{
		_uplink_payload = getSimplePayload(self->currentCondition);
     b5c:	77 81       	ldd	r23, Z+7	; 0x07
     b5e:	ce 01       	movw	r24, r28
     b60:	01 96       	adiw	r24, 0x01	; 1
     b62:	99 de       	rcall	.-718    	; 0x896 <getSimplePayload>
     b64:	86 e1       	ldi	r24, 0x16	; 22
     b66:	fe 01       	movw	r30, r28
     b68:	31 96       	adiw	r30, 0x01	; 1
     b6a:	a0 ec       	ldi	r26, 0xC0	; 192
     b6c:	b7 e0       	ldi	r27, 0x07	; 7
     b6e:	01 90       	ld	r0, Z+
     b70:	0d 92       	st	X+, r0
     b72:	8a 95       	dec	r24
     b74:	e1 f7       	brne	.-8      	; 0xb6e <device_startMeasuring+0x1c8>
     b76:	0f ef       	ldi	r16, 0xFF	; 255
     b78:	1f ef       	ldi	r17, 0xFF	; 255
     b7a:	98 01       	movw	r18, r16
		xMessageBufferSend(_uplinkmessageBuffer,(void*) &_uplink_payload,sizeof(_uplink_payload),portMAX_DELAY);
     b7c:	46 e1       	ldi	r20, 0x16	; 22
     b7e:	50 e0       	ldi	r21, 0x00	; 0
     b80:	60 ec       	ldi	r22, 0xC0	; 192
     b82:	77 e0       	ldi	r23, 0x07	; 7
     b84:	80 91 d6 07 	lds	r24, 0x07D6	; 0x8007d6 <_uplinkmessageBuffer>
     b88:	90 91 d7 07 	lds	r25, 0x07D7	; 0x8007d7 <_uplinkmessageBuffer+0x1>
     b8c:	0e 94 23 13 	call	0x2646	; 0x2646 <xStreamBufferSend>
     b90:	60 e3       	ldi	r22, 0x30	; 48
     b92:	75 e7       	ldi	r23, 0x75	; 117
     b94:	80 e0       	ldi	r24, 0x00	; 0
		vTaskDelay(30000);
     b96:	90 e0       	ldi	r25, 0x00	; 0
     b98:	0e 94 13 18 	call	0x3026	; 0x3026 <vTaskDelay>
     b9c:	66 96       	adiw	r28, 0x16	; 22
     b9e:	0f b6       	in	r0, 0x3f	; 63
     ba0:	f8 94       	cli
	} 
}
     ba2:	de bf       	out	0x3e, r29	; 62
     ba4:	0f be       	out	0x3f, r0	; 63
     ba6:	cd bf       	out	0x3d, r28	; 61
     ba8:	df 91       	pop	r29
     baa:	cf 91       	pop	r28
     bac:	1f 91       	pop	r17
     bae:	0f 91       	pop	r16
     bb0:	ff 90       	pop	r15
     bb2:	ef 90       	pop	r14
     bb4:	df 90       	pop	r13
     bb6:	cf 90       	pop	r12
     bb8:	bf 90       	pop	r11
     bba:	af 90       	pop	r10
     bbc:	08 95       	ret

00000bbe <device_executeTask>:
     bbe:	ec 01       	movw	r28, r24
     bc0:	ce 01       	movw	r24, r28
     bc2:	f1 de       	rcall	.-542    	; 0x9a6 <device_startMeasuring>

//devided so we can test
void device_executeTask(void* self) {
	for (;;)
	{
		device_startMeasuring((device_t)self);
     bc4:	fd cf       	rjmp	.-6      	; 0xbc0 <device_executeTask+0x2>

00000bc6 <lora_DownLinkHandler_create>:
		lora_DownLinkHandler_task((MessageBufferHandle_t)messageBuffer);
	}
}

void lora_DownLinkHandler_create(UBaseType_t priority, UBaseType_t stack, MessageBufferHandle_t messageBuffer)
{
     bc6:	ef 92       	push	r14
     bc8:	ff 92       	push	r15
     bca:	0f 93       	push	r16
     bcc:	9a 01       	movw	r18, r20
	xTaskCreate(
     bce:	70 e0       	ldi	r23, 0x00	; 0
     bd0:	ab 01       	movw	r20, r22
     bd2:	48 53       	subi	r20, 0x38	; 56
     bd4:	5f 4f       	sbci	r21, 0xFF	; 255
     bd6:	e1 2c       	mov	r14, r1
     bd8:	f1 2c       	mov	r15, r1
     bda:	08 2f       	mov	r16, r24
     bdc:	62 ec       	ldi	r22, 0xC2	; 194
     bde:	72 e0       	ldi	r23, 0x02	; 2
     be0:	8b e8       	ldi	r24, 0x8B	; 139
     be2:	96 e0       	ldi	r25, 0x06	; 6
     be4:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <xTaskCreate>
	,  (const portCHAR *)"LRDHHand"  
	,  stack+200  
	,  (void*)messageBuffer
	,  priority  
	,  NULL );
}
     be8:	0f 91       	pop	r16
     bea:	ff 90       	pop	r15
     bec:	ef 90       	pop	r14
     bee:	08 95       	ret

00000bf0 <lora_DownLinkHandler_task>:


	void lora_DownLinkHandler_task(MessageBufferHandle_t messageBuffer)
	{
     bf0:	0f 93       	push	r16
     bf2:	1f 93       	push	r17
     bf4:	cf 93       	push	r28
     bf6:	df 93       	push	r29
				
		xMessageBufferReceive(messageBuffer,(void*) &_downlink_payload,sizeof(lora_payload_t),portMAX_DELAY);
     bf8:	0f ef       	ldi	r16, 0xFF	; 255
     bfa:	1f ef       	ldi	r17, 0xFF	; 255
     bfc:	98 01       	movw	r18, r16
     bfe:	46 e1       	ldi	r20, 0x16	; 22
     c00:	50 e0       	ldi	r21, 0x00	; 0
     c02:	64 ee       	ldi	r22, 0xE4	; 228
     c04:	77 e0       	ldi	r23, 0x07	; 7
     c06:	0e 94 10 14 	call	0x2820	; 0x2820 <xStreamBufferReceive>
		printf("PayLoad bytes are: %d, %d\n Payload lenght is %d\n", _downlink_payload.bytes[0] ,_downlink_payload.bytes[1],_downlink_payload.len);
     c0a:	c4 ee       	ldi	r28, 0xE4	; 228
     c0c:	d7 e0       	ldi	r29, 0x07	; 7
     c0e:	89 81       	ldd	r24, Y+1	; 0x01
     c10:	1f 92       	push	r1
     c12:	8f 93       	push	r24
     c14:	8b 81       	ldd	r24, Y+3	; 0x03
     c16:	1f 92       	push	r1
     c18:	8f 93       	push	r24
     c1a:	8a 81       	ldd	r24, Y+2	; 0x02
     c1c:	1f 92       	push	r1
     c1e:	8f 93       	push	r24
     c20:	8b ec       	ldi	r24, 0xCB	; 203
     c22:	92 e0       	ldi	r25, 0x02	; 2
     c24:	9f 93       	push	r25
     c26:	8f 93       	push	r24
     c28:	0e 94 60 31 	call	0x62c0	; 0x62c0 <printf>
		

		if(_downlink_payload.len==2)
     c2c:	8d b7       	in	r24, 0x3d	; 61
     c2e:	9e b7       	in	r25, 0x3e	; 62
     c30:	08 96       	adiw	r24, 0x08	; 8
     c32:	0f b6       	in	r0, 0x3f	; 63
     c34:	f8 94       	cli
     c36:	9e bf       	out	0x3e, r25	; 62
     c38:	0f be       	out	0x3f, r0	; 63
     c3a:	8d bf       	out	0x3d, r24	; 61
     c3c:	89 81       	ldd	r24, Y+1	; 0x01
     c3e:	82 30       	cpi	r24, 0x02	; 2
     c40:	09 f0       	breq	.+2      	; 0xc44 <lora_DownLinkHandler_task+0x54>
     c42:	64 c0       	rjmp	.+200    	; 0xd0c <lora_DownLinkHandler_task+0x11c>
		{
			uint8_t command = _downlink_payload.bytes[0] + _downlink_payload.bytes[1];
     c44:	fe 01       	movw	r30, r28
     c46:	ca 81       	ldd	r28, Y+2	; 0x02
     c48:	83 81       	ldd	r24, Z+3	; 0x03
     c4a:	c8 0f       	add	r28, r24
			bool* value = pvPortMalloc(sizeof(bool));
     c4c:	81 e0       	ldi	r24, 0x01	; 1
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	f6 d4       	rcall	.+2540   	; 0x163e <pvPortMalloc>
     c52:	8c 01       	movw	r16, r24
			
			switch(command)
     c54:	c5 37       	cpi	r28, 0x75	; 117
     c56:	e9 f0       	breq	.+58     	; 0xc92 <lora_DownLinkHandler_task+0xa2>
     c58:	18 f4       	brcc	.+6      	; 0xc60 <lora_DownLinkHandler_task+0x70>
     c5a:	c4 37       	cpi	r28, 0x74	; 116
     c5c:	39 f0       	breq	.+14     	; 0xc6c <lora_DownLinkHandler_task+0x7c>
     c5e:	52 c0       	rjmp	.+164    	; 0xd04 <lora_DownLinkHandler_task+0x114>
     c60:	c6 38       	cpi	r28, 0x86	; 134
     c62:	51 f1       	breq	.+84     	; 0xcb8 <lora_DownLinkHandler_task+0xc8>
     c64:	c7 38       	cpi	r28, 0x87	; 135
     c66:	09 f4       	brne	.+2      	; 0xc6a <lora_DownLinkHandler_task+0x7a>
     c68:	3a c0       	rjmp	.+116    	; 0xcde <lora_DownLinkHandler_task+0xee>
     c6a:	4c c0       	rjmp	.+152    	; 0xd04 <lora_DownLinkHandler_task+0x114>
			{
			//D0
			case 0x74:
				configuration_setWorking(false);
     c6c:	80 e0       	ldi	r24, 0x00	; 0
     c6e:	17 dd       	rcall	.-1490   	; 0x69e <configuration_setWorking>
				configuration_getWorking(value);
     c70:	c8 01       	movw	r24, r16
     c72:	39 dd       	rcall	.-1422   	; 0x6e6 <configuration_getWorking>
     c74:	f8 01       	movw	r30, r16
				printf("The bool for device is set to %d\n",*value);
     c76:	80 81       	ld	r24, Z
     c78:	1f 92       	push	r1
     c7a:	8f 93       	push	r24
     c7c:	8c ef       	ldi	r24, 0xFC	; 252
     c7e:	92 e0       	ldi	r25, 0x02	; 2
     c80:	9f 93       	push	r25
     c82:	8f 93       	push	r24
     c84:	0e 94 60 31 	call	0x62c0	; 0x62c0 <printf>
     c88:	0f 90       	pop	r0
				break;
     c8a:	0f 90       	pop	r0
     c8c:	0f 90       	pop	r0
     c8e:	0f 90       	pop	r0
     c90:	3d c0       	rjmp	.+122    	; 0xd0c <lora_DownLinkHandler_task+0x11c>
			//D1
			case 0x75 :
				configuration_setWorking(true);
     c92:	81 e0       	ldi	r24, 0x01	; 1
     c94:	04 dd       	rcall	.-1528   	; 0x69e <configuration_setWorking>
				configuration_getWorking(value);
     c96:	c8 01       	movw	r24, r16
     c98:	26 dd       	rcall	.-1460   	; 0x6e6 <configuration_getWorking>
     c9a:	f8 01       	movw	r30, r16
				printf("The bool for device is set to %d\n",*value);
     c9c:	80 81       	ld	r24, Z
     c9e:	1f 92       	push	r1
     ca0:	8f 93       	push	r24
     ca2:	8c ef       	ldi	r24, 0xFC	; 252
     ca4:	92 e0       	ldi	r25, 0x02	; 2
     ca6:	9f 93       	push	r25
     ca8:	8f 93       	push	r24
     caa:	0e 94 60 31 	call	0x62c0	; 0x62c0 <printf>
     cae:	0f 90       	pop	r0
				break;
     cb0:	0f 90       	pop	r0
     cb2:	0f 90       	pop	r0
     cb4:	0f 90       	pop	r0
			//V0
			case 0x86:
				configuration_setVentilation(false);
     cb6:	2a c0       	rjmp	.+84     	; 0xd0c <lora_DownLinkHandler_task+0x11c>
     cb8:	80 e0       	ldi	r24, 0x00	; 0
     cba:	3e dd       	rcall	.-1412   	; 0x738 <configuration_setVentilation>
				configuration_getVentilation(value);
     cbc:	c8 01       	movw	r24, r16
     cbe:	60 dd       	rcall	.-1344   	; 0x780 <configuration_getVentilation>
     cc0:	f8 01       	movw	r30, r16
				printf("The bool for ventilation is set to %d\n",*value);
     cc2:	80 81       	ld	r24, Z
     cc4:	1f 92       	push	r1
     cc6:	8f 93       	push	r24
     cc8:	8e e1       	ldi	r24, 0x1E	; 30
     cca:	93 e0       	ldi	r25, 0x03	; 3
     ccc:	9f 93       	push	r25
     cce:	8f 93       	push	r24
     cd0:	0e 94 60 31 	call	0x62c0	; 0x62c0 <printf>
			break;
     cd4:	0f 90       	pop	r0
     cd6:	0f 90       	pop	r0
     cd8:	0f 90       	pop	r0
     cda:	0f 90       	pop	r0
			//V1
			case 0x87:
				configuration_setVentilation(true);
     cdc:	17 c0       	rjmp	.+46     	; 0xd0c <lora_DownLinkHandler_task+0x11c>
     cde:	81 e0       	ldi	r24, 0x01	; 1
     ce0:	2b dd       	rcall	.-1450   	; 0x738 <configuration_setVentilation>
				configuration_getVentilation(value);
     ce2:	c8 01       	movw	r24, r16
     ce4:	4d dd       	rcall	.-1382   	; 0x780 <configuration_getVentilation>
     ce6:	f8 01       	movw	r30, r16
				printf("The bool for ventilation is set to %d\n",*value);
     ce8:	80 81       	ld	r24, Z
     cea:	1f 92       	push	r1
     cec:	8f 93       	push	r24
     cee:	8e e1       	ldi	r24, 0x1E	; 30
     cf0:	93 e0       	ldi	r25, 0x03	; 3
     cf2:	9f 93       	push	r25
     cf4:	8f 93       	push	r24
     cf6:	0e 94 60 31 	call	0x62c0	; 0x62c0 <printf>
     cfa:	0f 90       	pop	r0
				break;
     cfc:	0f 90       	pop	r0
     cfe:	0f 90       	pop	r0
     d00:	0f 90       	pop	r0
     d02:	04 c0       	rjmp	.+8      	; 0xd0c <lora_DownLinkHandler_task+0x11c>
     d04:	85 e4       	ldi	r24, 0x45	; 69
			default:
				printf("Invalid command\n");
     d06:	93 e0       	ldi	r25, 0x03	; 3
     d08:	0e 94 73 31 	call	0x62e6	; 0x62e6 <puts>
     d0c:	df 91       	pop	r29
				break;
		}
	}
						
}
     d0e:	cf 91       	pop	r28
     d10:	1f 91       	pop	r17
     d12:	0f 91       	pop	r16
     d14:	08 95       	ret

00000d16 <lora_DownLinkHandler_startTask>:
     d16:	ec 01       	movw	r28, r24
static lora_payload_t _downlink_payload;

void lora_DownLinkHandler_startTask(void* messageBuffer){
	for(;;)
	{
		lora_DownLinkHandler_task((MessageBufferHandle_t)messageBuffer);
     d18:	ce 01       	movw	r24, r28
     d1a:	6a df       	rcall	.-300    	; 0xbf0 <lora_DownLinkHandler_task>
     d1c:	fd cf       	rjmp	.-6      	; 0xd18 <lora_DownLinkHandler_startTask+0x2>

00000d1e <humAndTempReader_create>:
void humAndTempReader_destroy(humAndTempReader_t self) {
	if (self == NULL)
		return;
	vTaskDelete(self->handleTask);
	vPortFree(self);
}
     d1e:	2f 92       	push	r2
     d20:	3f 92       	push	r3
     d22:	4f 92       	push	r4
     d24:	5f 92       	push	r5
     d26:	6f 92       	push	r6
     d28:	7f 92       	push	r7
     d2a:	8f 92       	push	r8
     d2c:	9f 92       	push	r9
     d2e:	af 92       	push	r10
     d30:	bf 92       	push	r11
     d32:	cf 92       	push	r12
     d34:	df 92       	push	r13
     d36:	ef 92       	push	r14
     d38:	ff 92       	push	r15
     d3a:	0f 93       	push	r16
     d3c:	1f 93       	push	r17
     d3e:	cf 93       	push	r28
     d40:	df 93       	push	r29
     d42:	88 2e       	mov	r8, r24
     d44:	96 2e       	mov	r9, r22
     d46:	1a 01       	movw	r2, r20
     d48:	28 01       	movw	r4, r16
     d4a:	39 01       	movw	r6, r18
     d4c:	66 e0       	ldi	r22, 0x06	; 6
     d4e:	70 e0       	ldi	r23, 0x00	; 0
     d50:	81 e0       	ldi	r24, 0x01	; 1
     d52:	90 e0       	ldi	r25, 0x00	; 0
     d54:	0e 94 6d 2f 	call	0x5eda	; 0x5eda <calloc>
     d58:	ec 01       	movw	r28, r24
     d5a:	89 2b       	or	r24, r25
     d5c:	71 f1       	breq	.+92     	; 0xdba <humAndTempReader_create+0x9c>
     d5e:	19 82       	std	Y+1, r1	; 0x01
     d60:	18 82       	st	Y, r1
     d62:	1b 82       	std	Y+3, r1	; 0x03
     d64:	1a 82       	std	Y+2, r1	; 0x02
     d66:	30 92 05 08 	sts	0x0805, r3	; 0x800805 <_startMeasureEventGroup+0x1>
     d6a:	20 92 04 08 	sts	0x0804, r2	; 0x800804 <_startMeasureEventGroup>
     d6e:	40 92 00 08 	sts	0x0800, r4	; 0x800800 <_startMeasureBit>
     d72:	50 92 01 08 	sts	0x0801, r5	; 0x800801 <_startMeasureBit+0x1>
     d76:	60 92 02 08 	sts	0x0802, r6	; 0x800802 <_startMeasureBit+0x2>
     d7a:	70 92 03 08 	sts	0x0803, r7	; 0x800803 <_startMeasureBit+0x3>
     d7e:	f0 92 ff 07 	sts	0x07FF, r15	; 0x8007ff <_readyMeasuringEventGroup+0x1>
     d82:	e0 92 fe 07 	sts	0x07FE, r14	; 0x8007fe <_readyMeasuringEventGroup>
     d86:	a0 92 fa 07 	sts	0x07FA, r10	; 0x8007fa <_readyBit>
     d8a:	b0 92 fb 07 	sts	0x07FB, r11	; 0x8007fb <_readyBit+0x1>
     d8e:	c0 92 fc 07 	sts	0x07FC, r12	; 0x8007fc <_readyBit+0x2>
     d92:	d0 92 fd 07 	sts	0x07FD, r13	; 0x8007fd <_readyBit+0x3>
     d96:	0e 94 b5 1f 	call	0x3f6a	; 0x3f6a <hih8120Create>
     d9a:	49 2d       	mov	r20, r9
     d9c:	50 e0       	ldi	r21, 0x00	; 0
     d9e:	48 53       	subi	r20, 0x38	; 56
     da0:	5f 4f       	sbci	r21, 0xFF	; 255
     da2:	7e 01       	movw	r14, r28
     da4:	84 e0       	ldi	r24, 0x04	; 4
     da6:	e8 0e       	add	r14, r24
     da8:	f1 1c       	adc	r15, r1
     daa:	08 2d       	mov	r16, r8
     dac:	9e 01       	movw	r18, r28
     dae:	65 e5       	ldi	r22, 0x55	; 85
     db0:	73 e0       	ldi	r23, 0x03	; 3
     db2:	88 e5       	ldi	r24, 0x58	; 88
     db4:	97 e0       	ldi	r25, 0x07	; 7
     db6:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <xTaskCreate>
     dba:	ce 01       	movw	r24, r28
     dbc:	df 91       	pop	r29
     dbe:	cf 91       	pop	r28
     dc0:	1f 91       	pop	r17
     dc2:	0f 91       	pop	r16
     dc4:	ff 90       	pop	r15
     dc6:	ef 90       	pop	r14
     dc8:	df 90       	pop	r13
     dca:	cf 90       	pop	r12
     dcc:	bf 90       	pop	r11
     dce:	af 90       	pop	r10
     dd0:	9f 90       	pop	r9
     dd2:	8f 90       	pop	r8
     dd4:	7f 90       	pop	r7
     dd6:	6f 90       	pop	r6
     dd8:	5f 90       	pop	r5
     dda:	4f 90       	pop	r4
     ddc:	3f 90       	pop	r3
     dde:	2f 90       	pop	r2
     de0:	08 95       	ret

00000de2 <humAndTempReader_measure>:

void humAndTempReader_measure(humAndTempReader_t self) {
     de2:	cf 92       	push	r12
     de4:	df 92       	push	r13
     de6:	ef 92       	push	r14
     de8:	ff 92       	push	r15
     dea:	0f 93       	push	r16
     dec:	1f 93       	push	r17
     dee:	cf 93       	push	r28
     df0:	df 93       	push	r29
     df2:	ec 01       	movw	r28, r24
	EventBits_t uxBits = xEventGroupWaitBits(_startMeasureEventGroup, 
     df4:	40 91 00 08 	lds	r20, 0x0800	; 0x800800 <_startMeasureBit>
     df8:	50 91 01 08 	lds	r21, 0x0801	; 0x800801 <_startMeasureBit+0x1>
     dfc:	60 91 02 08 	lds	r22, 0x0802	; 0x800802 <_startMeasureBit+0x2>
     e00:	70 91 03 08 	lds	r23, 0x0803	; 0x800803 <_startMeasureBit+0x3>
     e04:	cc 24       	eor	r12, r12
     e06:	ca 94       	dec	r12
     e08:	dc 2c       	mov	r13, r12
     e0a:	76 01       	movw	r14, r12
     e0c:	01 e0       	ldi	r16, 0x01	; 1
     e0e:	21 e0       	ldi	r18, 0x01	; 1
     e10:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <_startMeasureEventGroup>
     e14:	90 91 05 08 	lds	r25, 0x0805	; 0x800805 <_startMeasureEventGroup+0x1>
     e18:	6c d2       	rcall	.+1240   	; 0x12f2 <xEventGroupWaitBits>
	_startMeasureBit, 
	pdTRUE, 
	pdTRUE, 
	portMAX_DELAY);

	if ((uxBits & (_startMeasureBit)) == (_startMeasureBit)) {
     e1a:	00 91 00 08 	lds	r16, 0x0800	; 0x800800 <_startMeasureBit>
     e1e:	10 91 01 08 	lds	r17, 0x0801	; 0x800801 <_startMeasureBit+0x1>
     e22:	20 91 02 08 	lds	r18, 0x0802	; 0x800802 <_startMeasureBit+0x2>
     e26:	30 91 03 08 	lds	r19, 0x0803	; 0x800803 <_startMeasureBit+0x3>
     e2a:	dc 01       	movw	r26, r24
     e2c:	cb 01       	movw	r24, r22
     e2e:	80 23       	and	r24, r16
     e30:	91 23       	and	r25, r17
     e32:	a2 23       	and	r26, r18
     e34:	b3 23       	and	r27, r19
     e36:	08 17       	cp	r16, r24
     e38:	19 07       	cpc	r17, r25
     e3a:	2a 07       	cpc	r18, r26
     e3c:	3b 07       	cpc	r19, r27
     e3e:	79 f5       	brne	.+94     	; 0xe9e <humAndTempReader_measure+0xbc>
		hih8120Wakeup();
     e40:	0e 94 d0 1f 	call	0x3fa0	; 0x3fa0 <hih8120Wakeup>
		vTaskDelay(50);
     e44:	62 e3       	ldi	r22, 0x32	; 50
     e46:	70 e0       	ldi	r23, 0x00	; 0
     e48:	80 e0       	ldi	r24, 0x00	; 0
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	0e 94 13 18 	call	0x3026	; 0x3026 <vTaskDelay>
		hih8120Meassure();
     e50:	0e 94 e5 1f 	call	0x3fca	; 0x3fca <hih8120Meassure>
		vTaskDelay(5);
     e54:	65 e0       	ldi	r22, 0x05	; 5
     e56:	70 e0       	ldi	r23, 0x00	; 0
     e58:	80 e0       	ldi	r24, 0x00	; 0
     e5a:	90 e0       	ldi	r25, 0x00	; 0
     e5c:	0e 94 13 18 	call	0x3026	; 0x3026 <vTaskDelay>
		if(hih8120IsReady())
     e60:	0e 94 cd 1f 	call	0x3f9a	; 0x3f9a <hih8120IsReady>
     e64:	88 23       	and	r24, r24
     e66:	41 f0       	breq	.+16     	; 0xe78 <humAndTempReader_measure+0x96>
		{
			self->humidity = hih8120GetHumidityPercent_x10();
     e68:	0e 94 0b 20 	call	0x4016	; 0x4016 <hih8120GetHumidityPercent_x10>
     e6c:	99 83       	std	Y+1, r25	; 0x01
     e6e:	88 83       	st	Y, r24
			self->temperature = hih8120GetTemperature_x10();
     e70:	0e 94 31 20 	call	0x4062	; 0x4062 <hih8120GetTemperature_x10>
     e74:	9b 83       	std	Y+3, r25	; 0x03
     e76:	8a 83       	std	Y+2, r24	; 0x02
		}
		vTaskDelay(1000);
     e78:	68 ee       	ldi	r22, 0xE8	; 232
     e7a:	73 e0       	ldi	r23, 0x03	; 3
     e7c:	80 e0       	ldi	r24, 0x00	; 0
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	0e 94 13 18 	call	0x3026	; 0x3026 <vTaskDelay>
		xEventGroupSetBits(_readyMeasuringEventGroup, _readyBit);
     e84:	40 91 fa 07 	lds	r20, 0x07FA	; 0x8007fa <_readyBit>
     e88:	50 91 fb 07 	lds	r21, 0x07FB	; 0x8007fb <_readyBit+0x1>
     e8c:	60 91 fc 07 	lds	r22, 0x07FC	; 0x8007fc <_readyBit+0x2>
     e90:	70 91 fd 07 	lds	r23, 0x07FD	; 0x8007fd <_readyBit+0x3>
     e94:	80 91 fe 07 	lds	r24, 0x07FE	; 0x8007fe <_readyMeasuringEventGroup>
     e98:	90 91 ff 07 	lds	r25, 0x07FF	; 0x8007ff <_readyMeasuringEventGroup+0x1>
     e9c:	ea d2       	rcall	.+1492   	; 0x1472 <xEventGroupSetBits>
	}
}
     e9e:	df 91       	pop	r29
     ea0:	cf 91       	pop	r28
     ea2:	1f 91       	pop	r17
     ea4:	0f 91       	pop	r16
     ea6:	ff 90       	pop	r15
     ea8:	ef 90       	pop	r14
     eaa:	df 90       	pop	r13
     eac:	cf 90       	pop	r12
     eae:	08 95       	ret

00000eb0 <humAndTempReader_executeTask>:
	uint16_t humidity;
	int16_t temperature;
	TaskHandle_t handleTask;
}humidityAndTemperature;

void humAndTempReader_executeTask(void* self) {
     eb0:	ec 01       	movw	r28, r24
	for (;;) {
		humAndTempReader_measure((humAndTempReader_t)self);
     eb2:	ce 01       	movw	r24, r28
     eb4:	96 df       	rcall	.-212    	; 0xde2 <humAndTempReader_measure>
     eb6:	fd cf       	rjmp	.-6      	; 0xeb2 <humAndTempReader_executeTask+0x2>

00000eb8 <humAndTempReader_getHumidity>:
	}
}

uint16_t humAndTempReader_getHumidity(humAndTempReader_t self){
	return self->humidity;
}
     eb8:	fc 01       	movw	r30, r24
     eba:	80 81       	ld	r24, Z
     ebc:	91 81       	ldd	r25, Z+1	; 0x01
     ebe:	08 95       	ret

00000ec0 <humAndTempReader_getTemperature>:

int16_t humAndTempReader_getTemperature(humAndTempReader_t self){
	return self->temperature;
}
     ec0:	fc 01       	movw	r30, r24
     ec2:	82 81       	ldd	r24, Z+2	; 0x02
     ec4:	93 81       	ldd	r25, Z+3	; 0x03
     ec6:	08 95       	ret

00000ec8 <servo_initialise>:
#include "Servo.h"


void servo_initialise()
{
	rcServoCreate();		
     ec8:	0c 94 91 27 	jmp	0x4f22	; 0x4f22 <rcServoCreate>
     ecc:	08 95       	ret

00000ece <servo_open>:
}

void servo_open()
{
	rcServoSet(0, 100);
     ece:	64 e6       	ldi	r22, 0x64	; 100
     ed0:	80 e0       	ldi	r24, 0x00	; 0
     ed2:	0c 94 79 27 	jmp	0x4ef2	; 0x4ef2 <rcServoSet>
     ed6:	08 95       	ret

00000ed8 <servo_close>:
}
void servo_close()
{
	rcServoSet(0, -100);
     ed8:	6c e9       	ldi	r22, 0x9C	; 156
     eda:	80 e0       	ldi	r24, 0x00	; 0
     edc:	0c 94 79 27 	jmp	0x4ef2	; 0x4ef2 <rcServoSet>
     ee0:	08 95       	ret

00000ee2 <soundReader_create>:
	if (self == NULL)
		return;

	vTaskDelete(self->handleTask);
	vPortFree(self);
}
     ee2:	2f 92       	push	r2
     ee4:	3f 92       	push	r3
     ee6:	4f 92       	push	r4
     ee8:	5f 92       	push	r5
     eea:	6f 92       	push	r6
     eec:	7f 92       	push	r7
     eee:	8f 92       	push	r8
     ef0:	9f 92       	push	r9
     ef2:	af 92       	push	r10
     ef4:	bf 92       	push	r11
     ef6:	cf 92       	push	r12
     ef8:	df 92       	push	r13
     efa:	ef 92       	push	r14
     efc:	ff 92       	push	r15
     efe:	0f 93       	push	r16
     f00:	1f 93       	push	r17
     f02:	cf 93       	push	r28
     f04:	df 93       	push	r29
     f06:	88 2e       	mov	r8, r24
     f08:	96 2e       	mov	r9, r22
     f0a:	1a 01       	movw	r2, r20
     f0c:	28 01       	movw	r4, r16
     f0e:	39 01       	movw	r6, r18
     f10:	64 e0       	ldi	r22, 0x04	; 4
     f12:	70 e0       	ldi	r23, 0x00	; 0
     f14:	81 e0       	ldi	r24, 0x01	; 1
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	0e 94 6d 2f 	call	0x5eda	; 0x5eda <calloc>
     f1c:	ec 01       	movw	r28, r24
     f1e:	00 97       	sbiw	r24, 0x00	; 0
     f20:	41 f1       	breq	.+80     	; 0xf72 <soundReader_create+0x90>
     f22:	fc 01       	movw	r30, r24
     f24:	11 92       	st	Z+, r1
     f26:	11 92       	st	Z+, r1
     f28:	30 92 11 08 	sts	0x0811, r3	; 0x800811 <_startMeasureEventGroup+0x1>
     f2c:	20 92 10 08 	sts	0x0810, r2	; 0x800810 <_startMeasureEventGroup>
     f30:	40 92 0c 08 	sts	0x080C, r4	; 0x80080c <_startMeasureBit>
     f34:	50 92 0d 08 	sts	0x080D, r5	; 0x80080d <_startMeasureBit+0x1>
     f38:	60 92 0e 08 	sts	0x080E, r6	; 0x80080e <_startMeasureBit+0x2>
     f3c:	70 92 0f 08 	sts	0x080F, r7	; 0x80080f <_startMeasureBit+0x3>
     f40:	f0 92 0b 08 	sts	0x080B, r15	; 0x80080b <_readyMeasuringEventGroup+0x1>
     f44:	e0 92 0a 08 	sts	0x080A, r14	; 0x80080a <_readyMeasuringEventGroup>
     f48:	a0 92 06 08 	sts	0x0806, r10	; 0x800806 <_readyBit>
     f4c:	b0 92 07 08 	sts	0x0807, r11	; 0x800807 <_readyBit+0x1>
     f50:	c0 92 08 08 	sts	0x0808, r12	; 0x800808 <_readyBit+0x2>
     f54:	d0 92 09 08 	sts	0x0809, r13	; 0x800809 <_readyBit+0x3>
     f58:	49 2d       	mov	r20, r9
     f5a:	50 e0       	ldi	r21, 0x00	; 0
     f5c:	48 53       	subi	r20, 0x38	; 56
     f5e:	5f 4f       	sbci	r21, 0xFF	; 255
     f60:	7f 01       	movw	r14, r30
     f62:	08 2d       	mov	r16, r8
     f64:	9c 01       	movw	r18, r24
     f66:	66 e6       	ldi	r22, 0x66	; 102
     f68:	73 e0       	ldi	r23, 0x03	; 3
     f6a:	81 e2       	ldi	r24, 0x21	; 33
     f6c:	98 e0       	ldi	r25, 0x08	; 8
     f6e:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <xTaskCreate>
     f72:	ce 01       	movw	r24, r28
     f74:	df 91       	pop	r29
     f76:	cf 91       	pop	r28
     f78:	1f 91       	pop	r17
     f7a:	0f 91       	pop	r16
     f7c:	ff 90       	pop	r15
     f7e:	ef 90       	pop	r14
     f80:	df 90       	pop	r13
     f82:	cf 90       	pop	r12
     f84:	bf 90       	pop	r11
     f86:	af 90       	pop	r10
     f88:	9f 90       	pop	r9
     f8a:	8f 90       	pop	r8
     f8c:	7f 90       	pop	r7
     f8e:	6f 90       	pop	r6
     f90:	5f 90       	pop	r5
     f92:	4f 90       	pop	r4
     f94:	3f 90       	pop	r3
     f96:	2f 90       	pop	r2
     f98:	08 95       	ret

00000f9a <soundReader_measure>:


void soundReader_measure(soundReader_t self) {
     f9a:	cf 92       	push	r12
     f9c:	df 92       	push	r13
     f9e:	ef 92       	push	r14
     fa0:	ff 92       	push	r15
     fa2:	0f 93       	push	r16
     fa4:	1f 93       	push	r17
     fa6:	cf 93       	push	r28
     fa8:	df 93       	push	r29
     faa:	ec 01       	movw	r28, r24
	
	EventBits_t uxBits = xEventGroupWaitBits(_startMeasureEventGroup, 
     fac:	40 91 0c 08 	lds	r20, 0x080C	; 0x80080c <_startMeasureBit>
     fb0:	50 91 0d 08 	lds	r21, 0x080D	; 0x80080d <_startMeasureBit+0x1>
     fb4:	60 91 0e 08 	lds	r22, 0x080E	; 0x80080e <_startMeasureBit+0x2>
     fb8:	70 91 0f 08 	lds	r23, 0x080F	; 0x80080f <_startMeasureBit+0x3>
     fbc:	cc 24       	eor	r12, r12
     fbe:	ca 94       	dec	r12
     fc0:	dc 2c       	mov	r13, r12
     fc2:	76 01       	movw	r14, r12
     fc4:	01 e0       	ldi	r16, 0x01	; 1
     fc6:	21 e0       	ldi	r18, 0x01	; 1
     fc8:	80 91 10 08 	lds	r24, 0x0810	; 0x800810 <_startMeasureEventGroup>
     fcc:	90 91 11 08 	lds	r25, 0x0811	; 0x800811 <_startMeasureEventGroup+0x1>
     fd0:	90 d1       	rcall	.+800    	; 0x12f2 <xEventGroupWaitBits>
	_startMeasureBit, 
	pdTRUE, 
	pdTRUE, 
	portMAX_DELAY); 

	if ((uxBits & (_startMeasureBit)) == (_startMeasureBit)) {
     fd2:	00 91 0c 08 	lds	r16, 0x080C	; 0x80080c <_startMeasureBit>
     fd6:	10 91 0d 08 	lds	r17, 0x080D	; 0x80080d <_startMeasureBit+0x1>
     fda:	20 91 0e 08 	lds	r18, 0x080E	; 0x80080e <_startMeasureBit+0x2>
     fde:	30 91 0f 08 	lds	r19, 0x080F	; 0x80080f <_startMeasureBit+0x3>
     fe2:	dc 01       	movw	r26, r24
     fe4:	cb 01       	movw	r24, r22
     fe6:	80 23       	and	r24, r16
     fe8:	91 23       	and	r25, r17
     fea:	a2 23       	and	r26, r18
     fec:	b3 23       	and	r27, r19
     fee:	08 17       	cp	r16, r24
     ff0:	19 07       	cpc	r17, r25
     ff2:	2a 07       	cpc	r18, r26
     ff4:	3b 07       	cpc	r19, r27
     ff6:	e1 f4       	brne	.+56     	; 0x1030 <soundReader_measure+0x96>
		srand(time(NULL));
     ff8:	80 e0       	ldi	r24, 0x00	; 0
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	74 da       	rcall	.-2840   	; 0x4e6 <time>
     ffe:	cb 01       	movw	r24, r22
    1000:	0e 94 f2 30 	call	0x61e4	; 0x61e4 <srand>
		self->value = rand()%105 + 15;
    1004:	0e 94 ef 30 	call	0x61de	; 0x61de <rand>
    1008:	69 e6       	ldi	r22, 0x69	; 105
    100a:	70 e0       	ldi	r23, 0x00	; 0
    100c:	0e 94 1c 2f 	call	0x5e38	; 0x5e38 <__divmodhi4>
    1010:	0f 96       	adiw	r24, 0x0f	; 15
    1012:	99 83       	std	Y+1, r25	; 0x01
    1014:	88 83       	st	Y, r24
		
		//set done bit so that device knows measurement is done
		xEventGroupSetBits(_readyMeasuringEventGroup, _readyBit);
    1016:	40 91 06 08 	lds	r20, 0x0806	; 0x800806 <_readyBit>
    101a:	50 91 07 08 	lds	r21, 0x0807	; 0x800807 <_readyBit+0x1>
    101e:	60 91 08 08 	lds	r22, 0x0808	; 0x800808 <_readyBit+0x2>
    1022:	70 91 09 08 	lds	r23, 0x0809	; 0x800809 <_readyBit+0x3>
    1026:	80 91 0a 08 	lds	r24, 0x080A	; 0x80080a <_readyMeasuringEventGroup>
    102a:	90 91 0b 08 	lds	r25, 0x080B	; 0x80080b <_readyMeasuringEventGroup+0x1>
    102e:	21 d2       	rcall	.+1090   	; 0x1472 <xEventGroupSetBits>
	}
}
    1030:	df 91       	pop	r29
    1032:	cf 91       	pop	r28
    1034:	1f 91       	pop	r17
    1036:	0f 91       	pop	r16
    1038:	ff 90       	pop	r15
    103a:	ef 90       	pop	r14
    103c:	df 90       	pop	r13
    103e:	cf 90       	pop	r12
    1040:	08 95       	ret

00001042 <soundReader_executeTask>:
	TaskHandle_t handleTask;
}soundReader;


//actual task, methods devided so that it is possible to test
void soundReader_executeTask(void* self) {
    1042:	ec 01       	movw	r28, r24
	for (;;) {
		soundReader_measure((soundReader_t)self);
    1044:	ce 01       	movw	r24, r28
    1046:	a9 df       	rcall	.-174    	; 0xf9a <soundReader_measure>
    1048:	fd cf       	rjmp	.-6      	; 0x1044 <soundReader_executeTask+0x2>

0000104a <soundReader_getSound>:
	}
}

uint16_t soundReader_getSound(soundReader_t self) {
	return self->value;
}
    104a:	fc 01       	movw	r30, r24
    104c:	80 81       	ld	r24, Z
    104e:	91 81       	ldd	r25, Z+1	; 0x01
    1050:	08 95       	ret

00001052 <lora_UpLinkHandler_create>:
	}
}


void lora_UpLinkHandler_create(UBaseType_t priority, UBaseType_t stack, MessageBufferHandle_t messageBuffer)
{
    1052:	ef 92       	push	r14
    1054:	ff 92       	push	r15
    1056:	0f 93       	push	r16
    1058:	9a 01       	movw	r18, r20
	_buffer = messageBuffer;
	
	xTaskCreate(
    105a:	70 e0       	ldi	r23, 0x00	; 0
    105c:	ab 01       	movw	r20, r22
    105e:	48 53       	subi	r20, 0x38	; 56
    1060:	5f 4f       	sbci	r21, 0xFF	; 255
    1062:	e1 2c       	mov	r14, r1
    1064:	f1 2c       	mov	r15, r1
    1066:	08 2f       	mov	r16, r24
    1068:	62 e7       	ldi	r22, 0x72	; 114
    106a:	73 e0       	ldi	r23, 0x03	; 3
    106c:	82 e5       	ldi	r24, 0x52	; 82
    106e:	99 e0       	ldi	r25, 0x09	; 9
    1070:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <xTaskCreate>
	,  (const portCHAR *)"LRUpHand"
	,  stack+200
	,  (void*)messageBuffer
	,  priority
	,  NULL );
}
    1074:	0f 91       	pop	r16
    1076:	ff 90       	pop	r15
    1078:	ef 90       	pop	r14
    107a:	08 95       	ret

0000107c <lora_UpLinkHandler_task>:
		}
	}
}

void lora_UpLinkHandler_task(MessageBufferHandle_t messageBuffer)
{
    107c:	df 92       	push	r13
    107e:	ef 92       	push	r14
    1080:	ff 92       	push	r15
    1082:	0f 93       	push	r16
    1084:	1f 93       	push	r17
    1086:	cf 93       	push	r28
    1088:	df 93       	push	r29
    108a:	7c 01       	movw	r14, r24
	size_t xBytesToSend;
	char rxData[50];
	if (!isSet)
    108c:	80 91 12 08 	lds	r24, 0x0812	; 0x800812 <isSet>
    1090:	81 11       	cpse	r24, r1
    1092:	cf c0       	rjmp	.+414    	; 0x1232 <lora_UpLinkHandler_task+0x1b6>
	{
		// Hardware reset of LoRaWAN transceiver
		lora_driver_reset_rn2483(1);
    1094:	81 e0       	ldi	r24, 0x01	; 1
    1096:	0e 94 51 23 	call	0x46a2	; 0x46a2 <lora_driver_reset_rn2483>
		vTaskDelay(2);
    109a:	62 e0       	ldi	r22, 0x02	; 2
    109c:	70 e0       	ldi	r23, 0x00	; 0
    109e:	80 e0       	ldi	r24, 0x00	; 0
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	0e 94 13 18 	call	0x3026	; 0x3026 <vTaskDelay>
		lora_driver_reset_rn2483(0);
    10a6:	80 e0       	ldi	r24, 0x00	; 0
    10a8:	0e 94 51 23 	call	0x46a2	; 0x46a2 <lora_driver_reset_rn2483>
		vTaskDelay(150);
    10ac:	66 e9       	ldi	r22, 0x96	; 150
    10ae:	70 e0       	ldi	r23, 0x00	; 0
    10b0:	80 e0       	ldi	r24, 0x00	; 0
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	0e 94 13 18 	call	0x3026	; 0x3026 <vTaskDelay>

		lora_driver_flush_buffers(); // get rid of first version string from module after reset!
    10b8:	0e 94 07 23 	call	0x460e	; 0x460e <lora_driver_flush_buffers>


static void _lora_setup(void)
{
	e_LoRa_return_code_t rc;
	led_slow_blink(led_ST2); // OPTIONAL: Led the green led blink slowly while we are setting up LoRa
    10bc:	81 e0       	ldi	r24, 0x01	; 1
    10be:	0e 94 5f 21 	call	0x42be	; 0x42be <led_slow_blink>
	//That being said it runs every time when a device is being started.
	
	//START OF ONE TIME USE CODE

	// Factory reset the transceiver
	printf("FactoryReset >%s<\n", lora_driver_map_return_code_to_text(lora_driver_rn2483_factory_reset()));
    10c2:	0e 94 65 23 	call	0x46ca	; 0x46ca <lora_driver_rn2483_factory_reset>
    10c6:	0e 94 e2 25 	call	0x4bc4	; 0x4bc4 <lora_driver_map_return_code_to_text>
    10ca:	9f 93       	push	r25
    10cc:	8f 93       	push	r24
    10ce:	8b e7       	ldi	r24, 0x7B	; 123
    10d0:	93 e0       	ldi	r25, 0x03	; 3
    10d2:	9f 93       	push	r25
    10d4:	8f 93       	push	r24
    10d6:	0e 94 60 31 	call	0x62c0	; 0x62c0 <printf>
	
	// Configure to EU868 LoRaWAN standards
	printf("Configure to EU868 >%s<\n", lora_driver_map_return_code_to_text(lora_driver_configure_to_eu868()));
    10da:	0e 94 e3 24 	call	0x49c6	; 0x49c6 <lora_driver_configure_to_eu868>
    10de:	0e 94 e2 25 	call	0x4bc4	; 0x4bc4 <lora_driver_map_return_code_to_text>
    10e2:	9f 93       	push	r25
    10e4:	8f 93       	push	r24
    10e6:	8e e8       	ldi	r24, 0x8E	; 142
    10e8:	93 e0       	ldi	r25, 0x03	; 3
    10ea:	9f 93       	push	r25
    10ec:	8f 93       	push	r24
    10ee:	0e 94 60 31 	call	0x62c0	; 0x62c0 <printf>

	// Get the transceivers HW EUI
	rc = lora_driver_get_rn2483_hweui(_out_buf);
    10f2:	89 e2       	ldi	r24, 0x29	; 41
    10f4:	98 e0       	ldi	r25, 0x08	; 8
    10f6:	0e 94 77 23 	call	0x46ee	; 0x46ee <lora_driver_get_rn2483_hweui>
	printf("Get HWEUI >%s<: %s\n",lora_driver_map_return_code_to_text(rc), _out_buf);
    10fa:	0e 94 e2 25 	call	0x4bc4	; 0x4bc4 <lora_driver_map_return_code_to_text>
    10fe:	c9 e2       	ldi	r28, 0x29	; 41
    1100:	d8 e0       	ldi	r29, 0x08	; 8
    1102:	df 93       	push	r29
    1104:	cf 93       	push	r28
    1106:	9f 93       	push	r25
    1108:	8f 93       	push	r24
    110a:	87 ea       	ldi	r24, 0xA7	; 167
    110c:	93 e0       	ldi	r25, 0x03	; 3
    110e:	9f 93       	push	r25
    1110:	8f 93       	push	r24
    1112:	0e 94 60 31 	call	0x62c0	; 0x62c0 <printf>

	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_map_return_code_to_text(lora_driver_set_device_identifier(_out_buf)));
    1116:	ce 01       	movw	r24, r28
    1118:	0e 94 93 23 	call	0x4726	; 0x4726 <lora_driver_set_device_identifier>
    111c:	0e 94 e2 25 	call	0x4bc4	; 0x4bc4 <lora_driver_map_return_code_to_text>
    1120:	9f 93       	push	r25
    1122:	8f 93       	push	r24
    1124:	df 93       	push	r29
    1126:	cf 93       	push	r28
    1128:	8b eb       	ldi	r24, 0xBB	; 187
    112a:	93 e0       	ldi	r25, 0x03	; 3
    112c:	9f 93       	push	r25
    112e:	8f 93       	push	r24
    1130:	0e 94 60 31 	call	0x62c0	; 0x62c0 <printf>

	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_map_return_code_to_text(lora_driver_set_otaa_identity(LORA_appEUI,LORA_appKEY,_out_buf)));
    1134:	ae 01       	movw	r20, r28
    1136:	60 ed       	ldi	r22, 0xD0	; 208
    1138:	73 e0       	ldi	r23, 0x03	; 3
    113a:	81 ef       	ldi	r24, 0xF1	; 241
    113c:	93 e0       	ldi	r25, 0x03	; 3
    113e:	0e 94 c1 25 	call	0x4b82	; 0x4b82 <lora_driver_set_otaa_identity>
    1142:	0e 94 e2 25 	call	0x4bc4	; 0x4bc4 <lora_driver_map_return_code_to_text>
    1146:	9f 93       	push	r25
    1148:	8f 93       	push	r24
    114a:	df 93       	push	r29
    114c:	cf 93       	push	r28
    114e:	80 ed       	ldi	r24, 0xD0	; 208
    1150:	93 e0       	ldi	r25, 0x03	; 3
    1152:	9f 93       	push	r25
    1154:	8f 93       	push	r24
    1156:	81 ef       	ldi	r24, 0xF1	; 241
    1158:	93 e0       	ldi	r25, 0x03	; 3
    115a:	9f 93       	push	r25
    115c:	8f 93       	push	r24
    115e:	82 e0       	ldi	r24, 0x02	; 2
    1160:	94 e0       	ldi	r25, 0x04	; 4
    1162:	9f 93       	push	r25
    1164:	8f 93       	push	r24
    1166:	0e 94 60 31 	call	0x62c0	; 0x62c0 <printf>

	// Save all the MAC settings in the transceiver
	printf("Save mac >%s<\n",lora_driver_map_return_code_to_text(lora_driver_save_mac()));
    116a:	0e 94 c6 23 	call	0x478c	; 0x478c <lora_driver_save_mac>
    116e:	0e 94 e2 25 	call	0x4bc4	; 0x4bc4 <lora_driver_map_return_code_to_text>
    1172:	9f 93       	push	r25
    1174:	8f 93       	push	r24
    1176:	88 e3       	ldi	r24, 0x38	; 56
    1178:	94 e0       	ldi	r25, 0x04	; 4
    117a:	9f 93       	push	r25
    117c:	8f 93       	push	r24
    117e:	0e 94 60 31 	call	0x62c0	; 0x62c0 <printf>

	//END OF ONE TIME USE CODE
	
	
	// Enable Adaptive Data Rate
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_map_return_code_to_text(lora_driver_set_adaptive_data_rate(LoRa_ON)));
    1182:	8d b7       	in	r24, 0x3d	; 61
    1184:	9e b7       	in	r25, 0x3e	; 62
    1186:	82 96       	adiw	r24, 0x22	; 34
    1188:	0f b6       	in	r0, 0x3f	; 63
    118a:	f8 94       	cli
    118c:	9e bf       	out	0x3e, r25	; 62
    118e:	0f be       	out	0x3f, r0	; 63
    1190:	8d bf       	out	0x3d, r24	; 61
    1192:	81 e0       	ldi	r24, 0x01	; 1
    1194:	0e 94 c0 24 	call	0x4980	; 0x4980 <lora_driver_set_adaptive_data_rate>
    1198:	0e 94 e2 25 	call	0x4bc4	; 0x4bc4 <lora_driver_map_return_code_to_text>
    119c:	9f 93       	push	r25
    119e:	8f 93       	push	r24
    11a0:	87 e4       	ldi	r24, 0x47	; 71
    11a2:	94 e0       	ldi	r25, 0x04	; 4
    11a4:	9f 93       	push	r25
    11a6:	8f 93       	push	r24
    11a8:	0e 94 60 31 	call	0x62c0	; 0x62c0 <printf>

	// Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	printf("Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_map_return_code_to_text(lora_driver_set_receive_delay(500)));
    11ac:	84 ef       	ldi	r24, 0xF4	; 244
    11ae:	91 e0       	ldi	r25, 0x01	; 1
    11b0:	0e 94 cb 24 	call	0x4996	; 0x4996 <lora_driver_set_receive_delay>
    11b4:	0e 94 e2 25 	call	0x4bc4	; 0x4bc4 <lora_driver_map_return_code_to_text>
    11b8:	9f 93       	push	r25
    11ba:	8f 93       	push	r24
    11bc:	81 e0       	ldi	r24, 0x01	; 1
    11be:	8f 93       	push	r24
    11c0:	84 ef       	ldi	r24, 0xF4	; 244
    11c2:	8f 93       	push	r24
    11c4:	88 e6       	ldi	r24, 0x68	; 104
    11c6:	94 e0       	ldi	r25, 0x04	; 4
    11c8:	9f 93       	push	r25
    11ca:	8f 93       	push	r24
    11cc:	0e 94 60 31 	call	0x62c0	; 0x62c0 <printf>
    11d0:	8d b7       	in	r24, 0x3d	; 61
    11d2:	9e b7       	in	r25, 0x3e	; 62
    11d4:	0a 96       	adiw	r24, 0x0a	; 10
    11d6:	0f b6       	in	r0, 0x3f	; 63
    11d8:	f8 94       	cli
    11da:	9e bf       	out	0x3e, r25	; 62
    11dc:	0f be       	out	0x3f, r0	; 63
    11de:	8d bf       	out	0x3d, r24	; 61
    11e0:	ca e0       	ldi	r28, 0x0A	; 10
    11e2:	d0 e0       	ldi	r29, 0x00	; 0
	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
	
	do {
		rc = lora_driver_join(LoRa_OTAA);
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_map_return_code_to_text(rc));
    11e4:	08 e8       	ldi	r16, 0x88	; 136
    11e6:	14 e0       	ldi	r17, 0x04	; 4

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
	
	do {
		rc = lora_driver_join(LoRa_OTAA);
    11e8:	80 e0       	ldi	r24, 0x00	; 0
    11ea:	0e 94 cc 23 	call	0x4798	; 0x4798 <lora_driver_join>
    11ee:	d8 2e       	mov	r13, r24
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_map_return_code_to_text(rc));
    11f0:	0e 94 e2 25 	call	0x4bc4	; 0x4bc4 <lora_driver_map_return_code_to_text>
    11f4:	9f 93       	push	r25
    11f6:	8f 93       	push	r24
    11f8:	df 93       	push	r29
    11fa:	cf 93       	push	r28
    11fc:	1f 93       	push	r17
    11fe:	0f 93       	push	r16
    1200:	0e 94 60 31 	call	0x62c0	; 0x62c0 <printf>

		if ( rc != LoRa_ACCEPTED)
    1204:	0f 90       	pop	r0
    1206:	0f 90       	pop	r0
    1208:	0f 90       	pop	r0
    120a:	0f 90       	pop	r0
    120c:	0f 90       	pop	r0
    120e:	0f 90       	pop	r0
    1210:	88 e0       	ldi	r24, 0x08	; 8
    1212:	d8 16       	cp	r13, r24
    1214:	89 f1       	breq	.+98     	; 0x1278 <lora_UpLinkHandler_task+0x1fc>
		{
			// Make the red led pulse to tell something went wrong
			led_long_puls(led_ST1); // OPTIONAL
    1216:	80 e0       	ldi	r24, 0x00	; 0
    1218:	0e 94 cb 21 	call	0x4396	; 0x4396 <led_long_puls>
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
    121c:	66 e3       	ldi	r22, 0x36	; 54
    121e:	71 e0       	ldi	r23, 0x01	; 1
    1220:	80 e0       	ldi	r24, 0x00	; 0
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	0e 94 13 18 	call	0x3026	; 0x3026 <vTaskDelay>
    1228:	21 97       	sbiw	r28, 0x01	; 1
		}
		else
		{
			break;
		}
	} while (--maxJoinTriesLeft);
    122a:	f1 f6       	brne	.-68     	; 0x11e8 <lora_UpLinkHandler_task+0x16c>
    122c:	2c c0       	rjmp	.+88     	; 0x1286 <lora_UpLinkHandler_task+0x20a>
		// Make the red led blink fast to tell something went wrong
		led_fast_blink(led_ST1);

		while (1)
		{
			taskYIELD();
    122e:	39 d4       	rcall	.+2162   	; 0x1aa2 <vPortYield>
    1230:	fe cf       	rjmp	.-4      	; 0x122e <lora_UpLinkHandler_task+0x1b2>

		_lora_setup();
		isSet=true;
	}
	
	xBytesToSend = xMessageBufferReceive(messageBuffer, (void*) &_uplink_payload,
    1232:	00 e0       	ldi	r16, 0x00	; 0
    1234:	10 e0       	ldi	r17, 0x00	; 0
    1236:	98 01       	movw	r18, r16
    1238:	42 e3       	ldi	r20, 0x32	; 50
    123a:	50 e0       	ldi	r21, 0x00	; 0
    123c:	63 e1       	ldi	r22, 0x13	; 19
    123e:	78 e0       	ldi	r23, 0x08	; 8
    1240:	c7 01       	movw	r24, r14
    1242:	0e 94 10 14 	call	0x2820	; 0x2820 <xStreamBufferReceive>
	sizeof(rxData),0);
	if(xBytesToSend >= sizeof(uint8_t)*2)
    1246:	02 97       	sbiw	r24, 0x02	; 2
    1248:	28 f1       	brcs	.+74     	; 0x1294 <lora_UpLinkHandler_task+0x218>
	{
		/**< Status led ST4 (BLUE)*/
		//Makes the led light up in a short period.
		led_short_puls(led_ST4);
    124a:	83 e0       	ldi	r24, 0x03	; 3
    124c:	0e 94 dd 21 	call	0x43ba	; 0x43ba <led_short_puls>
		
		printf("Upload Message >%s<\n", lora_driver_map_return_code_to_text(lora_driver_sent_upload_message(false, &_uplink_payload)));
    1250:	63 e1       	ldi	r22, 0x13	; 19
    1252:	78 e0       	ldi	r23, 0x08	; 8
    1254:	80 e0       	ldi	r24, 0x00	; 0
    1256:	0e 94 f5 23 	call	0x47ea	; 0x47ea <lora_driver_sent_upload_message>
    125a:	0e 94 e2 25 	call	0x4bc4	; 0x4bc4 <lora_driver_map_return_code_to_text>
    125e:	9f 93       	push	r25
    1260:	8f 93       	push	r24
    1262:	88 ea       	ldi	r24, 0xA8	; 168
    1264:	94 e0       	ldi	r25, 0x04	; 4
    1266:	9f 93       	push	r25
    1268:	8f 93       	push	r24
    126a:	0e 94 60 31 	call	0x62c0	; 0x62c0 <printf>
    126e:	0f 90       	pop	r0
    1270:	0f 90       	pop	r0
    1272:	0f 90       	pop	r0
    1274:	0f 90       	pop	r0
	}
}
    1276:	0e c0       	rjmp	.+28     	; 0x1294 <lora_UpLinkHandler_task+0x218>

	if (rc == LoRa_ACCEPTED)
	{
		// Connected to LoRaWAN :-)
		// Make the green led steady
		led_led_on(led_ST2); // OPTIONAL
    1278:	81 e0       	ldi	r24, 0x01	; 1
    127a:	0e 94 ad 21 	call	0x435a	; 0x435a <led_led_on>
		vTaskDelay(150);

		lora_driver_flush_buffers(); // get rid of first version string from module after reset!

		_lora_setup();
		isSet=true;
    127e:	81 e0       	ldi	r24, 0x01	; 1
    1280:	80 93 12 08 	sts	0x0812, r24	; 0x800812 <isSet>
    1284:	d6 cf       	rjmp	.-84     	; 0x1232 <lora_UpLinkHandler_task+0x1b6>
	}
	else
	{
		// Something went wrong
		// Turn off the green led
		led_led_off(led_ST2);
    1286:	81 e0       	ldi	r24, 0x01	; 1
    1288:	0e 94 bc 21 	call	0x4378	; 0x4378 <led_led_off>
		// Make the red led blink fast to tell something went wrong
		led_fast_blink(led_ST1);
    128c:	80 e0       	ldi	r24, 0x00	; 0
    128e:	0e 94 86 21 	call	0x430c	; 0x430c <led_fast_blink>
    1292:	cd cf       	rjmp	.-102    	; 0x122e <lora_UpLinkHandler_task+0x1b2>
		//Makes the led light up in a short period.
		led_short_puls(led_ST4);
		
		printf("Upload Message >%s<\n", lora_driver_map_return_code_to_text(lora_driver_sent_upload_message(false, &_uplink_payload)));
	}
}
    1294:	df 91       	pop	r29
    1296:	cf 91       	pop	r28
    1298:	1f 91       	pop	r17
    129a:	0f 91       	pop	r16
    129c:	ff 90       	pop	r15
    129e:	ef 90       	pop	r14
    12a0:	df 90       	pop	r13
    12a2:	08 95       	ret

000012a4 <lora_UpLinkHandler_startTask>:

static lora_payload_t _uplink_payload;
static MessageBufferHandle_t _buffer;
static bool isSet=false;

void lora_UpLinkHandler_startTask(void* messageBuffer){
    12a4:	ec 01       	movw	r28, r24
	for(;;)
	{
		lora_UpLinkHandler_task((MessageBufferHandle_t)messageBuffer);
    12a6:	ce 01       	movw	r24, r28
    12a8:	e9 de       	rcall	.-558    	; 0x107c <lora_UpLinkHandler_task>
    12aa:	fd cf       	rjmp	.-6      	; 0x12a6 <lora_UpLinkHandler_startTask+0x2>

000012ac <task_switch_in>:
	void task_switch_in(uint8_t task_no) {
		 #ifdef HAL_DEFS_H_

		 #else
		 // Used on VIA MEGA Shield rev. 2.0.0
		 PORTK &= 0b11110000;
    12ac:	e8 e0       	ldi	r30, 0x08	; 8
    12ae:	f1 e0       	ldi	r31, 0x01	; 1
    12b0:	90 81       	ld	r25, Z
    12b2:	90 7f       	andi	r25, 0xF0	; 240
    12b4:	90 83       	st	Z, r25
		 PORTK |= (task_no & 0b00001111);
    12b6:	90 81       	ld	r25, Z
    12b8:	8f 70       	andi	r24, 0x0F	; 15
    12ba:	98 2b       	or	r25, r24
    12bc:	90 83       	st	Z, r25
    12be:	08 95       	ret

000012c0 <task_switch_out>:
	void task_switch_out(uint8_t task_no) {
		#ifdef HAL_DEFS_H_

		#else
		// Used on VIA MEGA Shield rev. 2.0.0
		PORTK &= 0b11110000;
    12c0:	e8 e0       	ldi	r30, 0x08	; 8
    12c2:	f1 e0       	ldi	r31, 0x01	; 1
    12c4:	80 81       	ld	r24, Z
    12c6:	80 7f       	andi	r24, 0xF0	; 240
    12c8:	80 83       	st	Z, r24
    12ca:	08 95       	ret

000012cc <xEventGroupCreate>:
        uxReturn = pxEventBits->uxEventBits;
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
    12cc:	cf 93       	push	r28
    12ce:	df 93       	push	r29
    12d0:	80 e1       	ldi	r24, 0x10	; 16
    12d2:	90 e0       	ldi	r25, 0x00	; 0
    12d4:	b4 d1       	rcall	.+872    	; 0x163e <pvPortMalloc>
    12d6:	ec 01       	movw	r28, r24
    12d8:	00 97       	sbiw	r24, 0x00	; 0
    12da:	39 f0       	breq	.+14     	; 0x12ea <xEventGroupCreate+0x1e>
    12dc:	fc 01       	movw	r30, r24
    12de:	11 92       	st	Z+, r1
    12e0:	11 92       	st	Z+, r1
    12e2:	11 92       	st	Z+, r1
    12e4:	11 92       	st	Z+, r1
    12e6:	cf 01       	movw	r24, r30
    12e8:	94 d2       	rcall	.+1320   	; 0x1812 <vListInitialise>
    12ea:	ce 01       	movw	r24, r28
    12ec:	df 91       	pop	r29
    12ee:	cf 91       	pop	r28
    12f0:	08 95       	ret

000012f2 <xEventGroupWaitBits>:
    12f2:	2f 92       	push	r2
    12f4:	3f 92       	push	r3
    12f6:	4f 92       	push	r4
    12f8:	5f 92       	push	r5
    12fa:	6f 92       	push	r6
    12fc:	7f 92       	push	r7
    12fe:	8f 92       	push	r8
    1300:	9f 92       	push	r9
    1302:	af 92       	push	r10
    1304:	bf 92       	push	r11
    1306:	cf 92       	push	r12
    1308:	df 92       	push	r13
    130a:	ef 92       	push	r14
    130c:	ff 92       	push	r15
    130e:	0f 93       	push	r16
    1310:	1f 93       	push	r17
    1312:	cf 93       	push	r28
    1314:	df 93       	push	r29
    1316:	ec 01       	movw	r28, r24
    1318:	4a 01       	movw	r8, r20
    131a:	5b 01       	movw	r10, r22
    131c:	62 2e       	mov	r6, r18
    131e:	70 2e       	mov	r7, r16
    1320:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <vTaskSuspendAll>
    1324:	28 80       	ld	r2, Y
    1326:	39 80       	ldd	r3, Y+1	; 0x01
    1328:	4a 80       	ldd	r4, Y+2	; 0x02
    132a:	5b 80       	ldd	r5, Y+3	; 0x03
    132c:	01 11       	cpse	r16, r1
    132e:	0d c0       	rjmp	.+26     	; 0x134a <xEventGroupWaitBits+0x58>
    1330:	81 e0       	ldi	r24, 0x01	; 1
    1332:	b2 01       	movw	r22, r4
    1334:	a1 01       	movw	r20, r2
    1336:	48 21       	and	r20, r8
    1338:	59 21       	and	r21, r9
    133a:	6a 21       	and	r22, r10
    133c:	7b 21       	and	r23, r11
    133e:	45 2b       	or	r20, r21
    1340:	46 2b       	or	r20, r22
    1342:	47 2b       	or	r20, r23
    1344:	79 f4       	brne	.+30     	; 0x1364 <xEventGroupWaitBits+0x72>
    1346:	80 e0       	ldi	r24, 0x00	; 0
    1348:	0d c0       	rjmp	.+26     	; 0x1364 <xEventGroupWaitBits+0x72>
    134a:	81 e0       	ldi	r24, 0x01	; 1
    134c:	b2 01       	movw	r22, r4
    134e:	a1 01       	movw	r20, r2
    1350:	48 21       	and	r20, r8
    1352:	59 21       	and	r21, r9
    1354:	6a 21       	and	r22, r10
    1356:	7b 21       	and	r23, r11
    1358:	48 15       	cp	r20, r8
    135a:	59 05       	cpc	r21, r9
    135c:	6a 05       	cpc	r22, r10
    135e:	7b 05       	cpc	r23, r11
    1360:	09 f0       	breq	.+2      	; 0x1364 <xEventGroupWaitBits+0x72>
    1362:	80 e0       	ldi	r24, 0x00	; 0
    1364:	88 23       	and	r24, r24
    1366:	81 f0       	breq	.+32     	; 0x1388 <xEventGroupWaitBits+0x96>
    1368:	66 20       	and	r6, r6
    136a:	09 f4       	brne	.+2      	; 0x136e <xEventGroupWaitBits+0x7c>
    136c:	6b c0       	rjmp	.+214    	; 0x1444 <xEventGroupWaitBits+0x152>
    136e:	80 94       	com	r8
    1370:	90 94       	com	r9
    1372:	a0 94       	com	r10
    1374:	b0 94       	com	r11
    1376:	82 20       	and	r8, r2
    1378:	93 20       	and	r9, r3
    137a:	a4 20       	and	r10, r4
    137c:	b5 20       	and	r11, r5
    137e:	88 82       	st	Y, r8
    1380:	99 82       	std	Y+1, r9	; 0x01
    1382:	aa 82       	std	Y+2, r10	; 0x02
    1384:	bb 82       	std	Y+3, r11	; 0x03
    1386:	5e c0       	rjmp	.+188    	; 0x1444 <xEventGroupWaitBits+0x152>
    1388:	c1 14       	cp	r12, r1
    138a:	d1 04       	cpc	r13, r1
    138c:	e1 04       	cpc	r14, r1
    138e:	f1 04       	cpc	r15, r1
    1390:	09 f4       	brne	.+2      	; 0x1394 <xEventGroupWaitBits+0xa2>
    1392:	58 c0       	rjmp	.+176    	; 0x1444 <xEventGroupWaitBits+0x152>
    1394:	66 20       	and	r6, r6
    1396:	29 f0       	breq	.+10     	; 0x13a2 <xEventGroupWaitBits+0xb0>
    1398:	40 e0       	ldi	r20, 0x00	; 0
    139a:	50 e0       	ldi	r21, 0x00	; 0
    139c:	60 e0       	ldi	r22, 0x00	; 0
    139e:	71 e0       	ldi	r23, 0x01	; 1
    13a0:	03 c0       	rjmp	.+6      	; 0x13a8 <xEventGroupWaitBits+0xb6>
    13a2:	40 e0       	ldi	r20, 0x00	; 0
    13a4:	50 e0       	ldi	r21, 0x00	; 0
    13a6:	ba 01       	movw	r22, r20
    13a8:	71 10       	cpse	r7, r1
    13aa:	74 60       	ori	r23, 0x04	; 4
    13ac:	48 29       	or	r20, r8
    13ae:	59 29       	or	r21, r9
    13b0:	6a 29       	or	r22, r10
    13b2:	7b 29       	or	r23, r11
    13b4:	97 01       	movw	r18, r14
    13b6:	86 01       	movw	r16, r12
    13b8:	ce 01       	movw	r24, r28
    13ba:	04 96       	adiw	r24, 0x04	; 4
    13bc:	0e 94 c2 18 	call	0x3184	; 0x3184 <vTaskPlaceOnUnorderedEventList>
    13c0:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <xTaskResumeAll>
    13c4:	81 11       	cpse	r24, r1
    13c6:	01 c0       	rjmp	.+2      	; 0x13ca <xEventGroupWaitBits+0xd8>
    13c8:	6c d3       	rcall	.+1752   	; 0x1aa2 <vPortYield>
    13ca:	0e 94 09 1b 	call	0x3612	; 0x3612 <uxTaskResetEventItemValue>
    13ce:	91 fd       	sbrc	r25, 1
    13d0:	35 c0       	rjmp	.+106    	; 0x143c <xEventGroupWaitBits+0x14a>
    13d2:	0f b6       	in	r0, 0x3f	; 63
    13d4:	f8 94       	cli
    13d6:	0f 92       	push	r0
    13d8:	68 81       	ld	r22, Y
    13da:	79 81       	ldd	r23, Y+1	; 0x01
    13dc:	8a 81       	ldd	r24, Y+2	; 0x02
    13de:	9b 81       	ldd	r25, Y+3	; 0x03
    13e0:	71 10       	cpse	r7, r1
    13e2:	0d c0       	rjmp	.+26     	; 0x13fe <xEventGroupWaitBits+0x10c>
    13e4:	21 e0       	ldi	r18, 0x01	; 1
    13e6:	75 01       	movw	r14, r10
    13e8:	64 01       	movw	r12, r8
    13ea:	c6 22       	and	r12, r22
    13ec:	d7 22       	and	r13, r23
    13ee:	e8 22       	and	r14, r24
    13f0:	f9 22       	and	r15, r25
    13f2:	cd 28       	or	r12, r13
    13f4:	ce 28       	or	r12, r14
    13f6:	cf 28       	or	r12, r15
    13f8:	79 f4       	brne	.+30     	; 0x1418 <xEventGroupWaitBits+0x126>
    13fa:	20 e0       	ldi	r18, 0x00	; 0
    13fc:	0d c0       	rjmp	.+26     	; 0x1418 <xEventGroupWaitBits+0x126>
    13fe:	21 e0       	ldi	r18, 0x01	; 1
    1400:	75 01       	movw	r14, r10
    1402:	64 01       	movw	r12, r8
    1404:	c6 22       	and	r12, r22
    1406:	d7 22       	and	r13, r23
    1408:	e8 22       	and	r14, r24
    140a:	f9 22       	and	r15, r25
    140c:	c8 14       	cp	r12, r8
    140e:	d9 04       	cpc	r13, r9
    1410:	ea 04       	cpc	r14, r10
    1412:	fb 04       	cpc	r15, r11
    1414:	09 f0       	breq	.+2      	; 0x1418 <xEventGroupWaitBits+0x126>
    1416:	20 e0       	ldi	r18, 0x00	; 0
    1418:	22 23       	and	r18, r18
    141a:	71 f0       	breq	.+28     	; 0x1438 <xEventGroupWaitBits+0x146>
    141c:	66 20       	and	r6, r6
    141e:	61 f0       	breq	.+24     	; 0x1438 <xEventGroupWaitBits+0x146>
    1420:	80 94       	com	r8
    1422:	90 94       	com	r9
    1424:	a0 94       	com	r10
    1426:	b0 94       	com	r11
    1428:	86 22       	and	r8, r22
    142a:	97 22       	and	r9, r23
    142c:	a8 22       	and	r10, r24
    142e:	b9 22       	and	r11, r25
    1430:	88 82       	st	Y, r8
    1432:	99 82       	std	Y+1, r9	; 0x01
    1434:	aa 82       	std	Y+2, r10	; 0x02
    1436:	bb 82       	std	Y+3, r11	; 0x03
    1438:	0f 90       	pop	r0
    143a:	0f be       	out	0x3f, r0	; 63
    143c:	1b 01       	movw	r2, r22
    143e:	2c 01       	movw	r4, r24
    1440:	55 24       	eor	r5, r5
    1442:	02 c0       	rjmp	.+4      	; 0x1448 <xEventGroupWaitBits+0x156>
    1444:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <xTaskResumeAll>
    1448:	c2 01       	movw	r24, r4
    144a:	b1 01       	movw	r22, r2
    144c:	df 91       	pop	r29
    144e:	cf 91       	pop	r28
    1450:	1f 91       	pop	r17
    1452:	0f 91       	pop	r16
    1454:	ff 90       	pop	r15
    1456:	ef 90       	pop	r14
    1458:	df 90       	pop	r13
    145a:	cf 90       	pop	r12
    145c:	bf 90       	pop	r11
    145e:	af 90       	pop	r10
    1460:	9f 90       	pop	r9
    1462:	8f 90       	pop	r8
    1464:	7f 90       	pop	r7
    1466:	6f 90       	pop	r6
    1468:	5f 90       	pop	r5
    146a:	4f 90       	pop	r4
    146c:	3f 90       	pop	r3
    146e:	2f 90       	pop	r2
    1470:	08 95       	ret

00001472 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
    1472:	4f 92       	push	r4
    1474:	5f 92       	push	r5
    1476:	6f 92       	push	r6
    1478:	7f 92       	push	r7
    147a:	8f 92       	push	r8
    147c:	9f 92       	push	r9
    147e:	af 92       	push	r10
    1480:	bf 92       	push	r11
    1482:	cf 92       	push	r12
    1484:	df 92       	push	r13
    1486:	ef 92       	push	r14
    1488:	ff 92       	push	r15
    148a:	0f 93       	push	r16
    148c:	1f 93       	push	r17
    148e:	cf 93       	push	r28
    1490:	df 93       	push	r29
    1492:	ec 01       	movw	r28, r24
    1494:	6a 01       	movw	r12, r20
    1496:	7b 01       	movw	r14, r22
    itself. */
    configASSERT( xEventGroup );
    configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

    pxList = &( pxEventBits->xTasksWaitingForBits );
    pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1498:	8c 01       	movw	r16, r24
    149a:	09 5f       	subi	r16, 0xF9	; 249
    149c:	1f 4f       	sbci	r17, 0xFF	; 255
    vTaskSuspendAll();
    149e:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <vTaskSuspendAll>
    {
        traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

        pxListItem = listGET_HEAD_ENTRY( pxList );
    14a2:	eb 85       	ldd	r30, Y+11	; 0x0b
    14a4:	fc 85       	ldd	r31, Y+12	; 0x0c

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;
    14a6:	88 81       	ld	r24, Y
    14a8:	99 81       	ldd	r25, Y+1	; 0x01
    14aa:	aa 81       	ldd	r26, Y+2	; 0x02
    14ac:	bb 81       	ldd	r27, Y+3	; 0x03
    14ae:	c8 2a       	or	r12, r24
    14b0:	d9 2a       	or	r13, r25
    14b2:	ea 2a       	or	r14, r26
    14b4:	fb 2a       	or	r15, r27
    14b6:	c8 82       	st	Y, r12
    14b8:	d9 82       	std	Y+1, r13	; 0x01
    14ba:	ea 82       	std	Y+2, r14	; 0x02
    14bc:	fb 82       	std	Y+3, r15	; 0x03

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
    14be:	0e 17       	cp	r16, r30
    14c0:	1f 07       	cpc	r17, r31
    14c2:	09 f4       	brne	.+2      	; 0x14c6 <xEventGroupSetBits+0x54>
    14c4:	45 c0       	rjmp	.+138    	; 0x1550 <xEventGroupSetBits+0xde>
    14c6:	c1 2c       	mov	r12, r1
    14c8:	d1 2c       	mov	r13, r1
    14ca:	76 01       	movw	r14, r12
            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
                {
                    xMatchFound = pdTRUE;
    14cc:	99 24       	eor	r9, r9
    14ce:	93 94       	inc	r9
    14d0:	81 2c       	mov	r8, r1
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
    14d2:	a4 80       	ldd	r10, Z+4	; 0x04
    14d4:	b5 80       	ldd	r11, Z+5	; 0x05
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
    14d6:	80 81       	ld	r24, Z
    14d8:	91 81       	ldd	r25, Z+1	; 0x01
    14da:	a2 81       	ldd	r26, Z+2	; 0x02
    14dc:	b3 81       	ldd	r27, Z+3	; 0x03
            xMatchFound = pdFALSE;

            /* Split the bits waited for from the control bits. */
            uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
            uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
    14de:	ac 01       	movw	r20, r24
    14e0:	bd 01       	movw	r22, r26
    14e2:	77 27       	eor	r23, r23

            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
    14e4:	b2 fd       	sbrc	r27, 2
    14e6:	0f c0       	rjmp	.+30     	; 0x1506 <xEventGroupSetBits+0x94>
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
                {
                    xMatchFound = pdTRUE;
    14e8:	48 80       	ld	r4, Y
    14ea:	59 80       	ldd	r5, Y+1	; 0x01
    14ec:	6a 80       	ldd	r6, Y+2	; 0x02
    14ee:	7b 80       	ldd	r7, Y+3	; 0x03
    14f0:	44 22       	and	r4, r20
    14f2:	55 22       	and	r5, r21
    14f4:	66 22       	and	r6, r22
    14f6:	77 22       	and	r7, r23
    14f8:	29 2d       	mov	r18, r9
    14fa:	45 28       	or	r4, r5
    14fc:	46 28       	or	r4, r6
    14fe:	47 28       	or	r4, r7
    1500:	89 f4       	brne	.+34     	; 0x1524 <xEventGroupSetBits+0xb2>
    1502:	28 2d       	mov	r18, r8
    1504:	0f c0       	rjmp	.+30     	; 0x1524 <xEventGroupSetBits+0xb2>
    1506:	48 80       	ld	r4, Y
    1508:	59 80       	ldd	r5, Y+1	; 0x01
    150a:	6a 80       	ldd	r6, Y+2	; 0x02
    150c:	7b 80       	ldd	r7, Y+3	; 0x03
    150e:	44 22       	and	r4, r20
    1510:	55 22       	and	r5, r21
    1512:	66 22       	and	r6, r22
    1514:	77 22       	and	r7, r23
    1516:	29 2d       	mov	r18, r9
    1518:	44 16       	cp	r4, r20
    151a:	55 06       	cpc	r5, r21
    151c:	66 06       	cpc	r6, r22
    151e:	77 06       	cpc	r7, r23
    1520:	09 f0       	breq	.+2      	; 0x1524 <xEventGroupSetBits+0xb2>
    1522:	28 2d       	mov	r18, r8
            else
            {
                /* Need all bits to be set, but not all the bits were set. */
            }

            if( xMatchFound != pdFALSE )
    1524:	22 23       	and	r18, r18
    1526:	71 f0       	breq	.+28     	; 0x1544 <xEventGroupSetBits+0xd2>
            {
                /* The bits match.  Should the bits be cleared on exit? */
                if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
    1528:	b0 ff       	sbrs	r27, 0
    152a:	04 c0       	rjmp	.+8      	; 0x1534 <xEventGroupSetBits+0xc2>
                {
                    uxBitsToClear |= uxBitsWaitedFor;
    152c:	c4 2a       	or	r12, r20
    152e:	d5 2a       	or	r13, r21
    1530:	e6 2a       	or	r14, r22
    1532:	f7 2a       	or	r15, r23
                /* Store the actual event flag value in the task's event list
                item before removing the task from the event list.  The
                eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                that is was unblocked due to its required bits matching, rather
                than because it timed out. */
                vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
    1534:	48 81       	ld	r20, Y
    1536:	59 81       	ldd	r21, Y+1	; 0x01
    1538:	6a 81       	ldd	r22, Y+2	; 0x02
    153a:	7b 81       	ldd	r23, Y+3	; 0x03
    153c:	72 60       	ori	r23, 0x02	; 2
    153e:	cf 01       	movw	r24, r30
    1540:	0e 94 48 19 	call	0x3290	; 0x3290 <vTaskRemoveFromUnorderedEventList>
    1544:	ea 2d       	mov	r30, r10
    1546:	fb 2d       	mov	r31, r11

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
    1548:	0e 17       	cp	r16, r30
    154a:	1f 07       	cpc	r17, r31
    154c:	11 f6       	brne	.-124    	; 0x14d2 <xEventGroupSetBits+0x60>
    154e:	03 c0       	rjmp	.+6      	; 0x1556 <xEventGroupSetBits+0xe4>
EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
    1550:	c1 2c       	mov	r12, r1
    1552:	d1 2c       	mov	r13, r1
    1554:	76 01       	movw	r14, r12
            pxListItem = pxNext;
        }

        /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
        bit was set in the control word. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
    1556:	c0 94       	com	r12
    1558:	d0 94       	com	r13
    155a:	e0 94       	com	r14
    155c:	f0 94       	com	r15
    155e:	88 81       	ld	r24, Y
    1560:	99 81       	ldd	r25, Y+1	; 0x01
    1562:	aa 81       	ldd	r26, Y+2	; 0x02
    1564:	bb 81       	ldd	r27, Y+3	; 0x03
    1566:	c8 22       	and	r12, r24
    1568:	d9 22       	and	r13, r25
    156a:	ea 22       	and	r14, r26
    156c:	fb 22       	and	r15, r27
    156e:	c8 82       	st	Y, r12
    1570:	d9 82       	std	Y+1, r13	; 0x01
    1572:	ea 82       	std	Y+2, r14	; 0x02
    1574:	fb 82       	std	Y+3, r15	; 0x03
    }
    ( void ) xTaskResumeAll();
    1576:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <xTaskResumeAll>

    return pxEventBits->uxEventBits;
    157a:	68 81       	ld	r22, Y
    157c:	79 81       	ldd	r23, Y+1	; 0x01
    157e:	8a 81       	ldd	r24, Y+2	; 0x02
    1580:	9b 81       	ldd	r25, Y+3	; 0x03
}
    1582:	df 91       	pop	r29
    1584:	cf 91       	pop	r28
    1586:	1f 91       	pop	r17
    1588:	0f 91       	pop	r16
    158a:	ff 90       	pop	r15
    158c:	ef 90       	pop	r14
    158e:	df 90       	pop	r13
    1590:	cf 90       	pop	r12
    1592:	bf 90       	pop	r11
    1594:	af 90       	pop	r10
    1596:	9f 90       	pop	r9
    1598:	8f 90       	pop	r8
    159a:	7f 90       	pop	r7
    159c:	6f 90       	pop	r6
    159e:	5f 90       	pop	r5
    15a0:	4f 90       	pop	r4
    15a2:	08 95       	ret

000015a4 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
    15a4:	cf 93       	push	r28
    15a6:	df 93       	push	r29
    15a8:	dc 01       	movw	r26, r24
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
    15aa:	e5 e9       	ldi	r30, 0x95	; 149
    15ac:	f8 e0       	ldi	r31, 0x08	; 8
    15ae:	01 c0       	rjmp	.+2      	; 0x15b2 <prvInsertBlockIntoFreeList+0xe>
    15b0:	f9 01       	movw	r30, r18
    15b2:	20 81       	ld	r18, Z
    15b4:	31 81       	ldd	r19, Z+1	; 0x01
    15b6:	2a 17       	cp	r18, r26
    15b8:	3b 07       	cpc	r19, r27
    15ba:	d0 f3       	brcs	.-12     	; 0x15b0 <prvInsertBlockIntoFreeList+0xc>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
    15bc:	82 81       	ldd	r24, Z+2	; 0x02
    15be:	93 81       	ldd	r25, Z+3	; 0x03
    15c0:	af 01       	movw	r20, r30
    15c2:	48 0f       	add	r20, r24
    15c4:	59 1f       	adc	r21, r25
    15c6:	a4 17       	cp	r26, r20
    15c8:	b5 07       	cpc	r27, r21
    15ca:	49 f4       	brne	.+18     	; 0x15de <prvInsertBlockIntoFreeList+0x3a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
    15cc:	12 96       	adiw	r26, 0x02	; 2
    15ce:	4d 91       	ld	r20, X+
    15d0:	5c 91       	ld	r21, X
    15d2:	13 97       	sbiw	r26, 0x03	; 3
    15d4:	84 0f       	add	r24, r20
    15d6:	95 1f       	adc	r25, r21
    15d8:	93 83       	std	Z+3, r25	; 0x03
    15da:	82 83       	std	Z+2, r24	; 0x02
    15dc:	df 01       	movw	r26, r30
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
    15de:	12 96       	adiw	r26, 0x02	; 2
    15e0:	8d 91       	ld	r24, X+
    15e2:	9c 91       	ld	r25, X
    15e4:	13 97       	sbiw	r26, 0x03	; 3
    15e6:	ed 01       	movw	r28, r26
    15e8:	c8 0f       	add	r28, r24
    15ea:	d9 1f       	adc	r29, r25
    15ec:	2c 17       	cp	r18, r28
    15ee:	3d 07       	cpc	r19, r29
    15f0:	d9 f4       	brne	.+54     	; 0x1628 <prvInsertBlockIntoFreeList+0x84>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
    15f2:	20 91 93 08 	lds	r18, 0x0893	; 0x800893 <pxEnd>
    15f6:	30 91 94 08 	lds	r19, 0x0894	; 0x800894 <pxEnd+0x1>
    15fa:	c2 17       	cp	r28, r18
    15fc:	d3 07       	cpc	r29, r19
    15fe:	81 f0       	breq	.+32     	; 0x1620 <prvInsertBlockIntoFreeList+0x7c>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
    1600:	2a 81       	ldd	r18, Y+2	; 0x02
    1602:	3b 81       	ldd	r19, Y+3	; 0x03
    1604:	82 0f       	add	r24, r18
    1606:	93 1f       	adc	r25, r19
    1608:	13 96       	adiw	r26, 0x03	; 3
    160a:	9c 93       	st	X, r25
    160c:	8e 93       	st	-X, r24
    160e:	12 97       	sbiw	r26, 0x02	; 2
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
    1610:	c0 81       	ld	r28, Z
    1612:	d1 81       	ldd	r29, Z+1	; 0x01
    1614:	88 81       	ld	r24, Y
    1616:	99 81       	ldd	r25, Y+1	; 0x01
    1618:	11 96       	adiw	r26, 0x01	; 1
    161a:	9c 93       	st	X, r25
    161c:	8e 93       	st	-X, r24
    161e:	07 c0       	rjmp	.+14     	; 0x162e <prvInsertBlockIntoFreeList+0x8a>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
    1620:	11 96       	adiw	r26, 0x01	; 1
    1622:	dc 93       	st	X, r29
    1624:	ce 93       	st	-X, r28
    1626:	03 c0       	rjmp	.+6      	; 0x162e <prvInsertBlockIntoFreeList+0x8a>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
    1628:	11 96       	adiw	r26, 0x01	; 1
    162a:	3c 93       	st	X, r19
    162c:	2e 93       	st	-X, r18

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
    162e:	ae 17       	cp	r26, r30
    1630:	bf 07       	cpc	r27, r31
    1632:	11 f0       	breq	.+4      	; 0x1638 <prvInsertBlockIntoFreeList+0x94>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
    1634:	b1 83       	std	Z+1, r27	; 0x01
    1636:	a0 83       	st	Z, r26
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    1638:	df 91       	pop	r29
    163a:	cf 91       	pop	r28
    163c:	08 95       	ret

0000163e <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    163e:	cf 92       	push	r12
    1640:	df 92       	push	r13
    1642:	ef 92       	push	r14
    1644:	ff 92       	push	r15
    1646:	0f 93       	push	r16
    1648:	1f 93       	push	r17
    164a:	cf 93       	push	r28
    164c:	df 93       	push	r29
    164e:	ec 01       	movw	r28, r24
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
    1650:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
    1654:	80 91 93 08 	lds	r24, 0x0893	; 0x800893 <pxEnd>
    1658:	90 91 94 08 	lds	r25, 0x0894	; 0x800894 <pxEnd+0x1>
    165c:	89 2b       	or	r24, r25
    165e:	41 f5       	brne	.+80     	; 0x16b0 <pvPortMalloc+0x72>

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
    1660:	e5 e9       	ldi	r30, 0x95	; 149
    1662:	f8 e0       	ldi	r31, 0x08	; 8
    1664:	a9 e9       	ldi	r26, 0x99	; 153
    1666:	b8 e0       	ldi	r27, 0x08	; 8
    1668:	b1 83       	std	Z+1, r27	; 0x01
    166a:	a0 83       	st	Z, r26
	xStart.xBlockSize = ( size_t ) 0;
    166c:	13 82       	std	Z+3, r1	; 0x03
    166e:	12 82       	std	Z+2, r1	; 0x02
	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
	uxAddress -= xHeapStructSize;
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
	pxEnd = ( void * ) uxAddress;
    1670:	e5 e3       	ldi	r30, 0x35	; 53
    1672:	f8 e1       	ldi	r31, 0x18	; 24
    1674:	f0 93 94 08 	sts	0x0894, r31	; 0x800894 <pxEnd+0x1>
    1678:	e0 93 93 08 	sts	0x0893, r30	; 0x800893 <pxEnd>
	pxEnd->xBlockSize = 0;
    167c:	13 82       	std	Z+3, r1	; 0x03
    167e:	12 82       	std	Z+2, r1	; 0x02
	pxEnd->pxNextFreeBlock = NULL;
    1680:	11 82       	std	Z+1, r1	; 0x01
    1682:	10 82       	st	Z, r1

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
    1684:	8c e9       	ldi	r24, 0x9C	; 156
    1686:	9f e0       	ldi	r25, 0x0F	; 15
    1688:	13 96       	adiw	r26, 0x03	; 3
    168a:	9c 93       	st	X, r25
    168c:	8e 93       	st	-X, r24
    168e:	12 97       	sbiw	r26, 0x02	; 2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
    1690:	ed 93       	st	X+, r30
    1692:	fc 93       	st	X, r31

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
    1694:	90 93 90 08 	sts	0x0890, r25	; 0x800890 <xMinimumEverFreeBytesRemaining+0x1>
    1698:	80 93 8f 08 	sts	0x088F, r24	; 0x80088f <xMinimumEverFreeBytesRemaining>
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
    169c:	90 93 92 08 	sts	0x0892, r25	; 0x800892 <xFreeBytesRemaining+0x1>
    16a0:	80 93 91 08 	sts	0x0891, r24	; 0x800891 <xFreeBytesRemaining>

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
    16a4:	80 e0       	ldi	r24, 0x00	; 0
    16a6:	90 e8       	ldi	r25, 0x80	; 128
    16a8:	90 93 8e 08 	sts	0x088E, r25	; 0x80088e <xBlockAllocatedBit+0x1>
    16ac:	80 93 8d 08 	sts	0x088D, r24	; 0x80088d <xBlockAllocatedBit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
    16b0:	e0 90 8d 08 	lds	r14, 0x088D	; 0x80088d <xBlockAllocatedBit>
    16b4:	f0 90 8e 08 	lds	r15, 0x088E	; 0x80088e <xBlockAllocatedBit+0x1>
    16b8:	c7 01       	movw	r24, r14
    16ba:	8c 23       	and	r24, r28
    16bc:	9d 23       	and	r25, r29
    16be:	89 2b       	or	r24, r25
    16c0:	09 f0       	breq	.+2      	; 0x16c4 <pvPortMalloc+0x86>
    16c2:	66 c0       	rjmp	.+204    	; 0x1790 <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
    16c4:	20 97       	sbiw	r28, 0x00	; 0
    16c6:	09 f4       	brne	.+2      	; 0x16ca <pvPortMalloc+0x8c>
    16c8:	66 c0       	rjmp	.+204    	; 0x1796 <pvPortMalloc+0x158>
			{
				xWantedSize += xHeapStructSize;
    16ca:	ae 01       	movw	r20, r28
    16cc:	4c 5f       	subi	r20, 0xFC	; 252
    16ce:	5f 4f       	sbci	r21, 0xFF	; 255
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
    16d0:	09 f4       	brne	.+2      	; 0x16d4 <pvPortMalloc+0x96>
    16d2:	5e c0       	rjmp	.+188    	; 0x1790 <pvPortMalloc+0x152>
    16d4:	00 91 91 08 	lds	r16, 0x0891	; 0x800891 <xFreeBytesRemaining>
    16d8:	10 91 92 08 	lds	r17, 0x0892	; 0x800892 <xFreeBytesRemaining+0x1>
    16dc:	04 17       	cp	r16, r20
    16de:	15 07       	cpc	r17, r21
    16e0:	08 f4       	brcc	.+2      	; 0x16e4 <pvPortMalloc+0xa6>
    16e2:	56 c0       	rjmp	.+172    	; 0x1790 <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
    16e4:	c0 91 95 08 	lds	r28, 0x0895	; 0x800895 <xStart>
    16e8:	d0 91 96 08 	lds	r29, 0x0896	; 0x800896 <xStart+0x1>

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
    16ec:	e5 e9       	ldi	r30, 0x95	; 149
    16ee:	f8 e0       	ldi	r31, 0x08	; 8
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    16f0:	02 c0       	rjmp	.+4      	; 0x16f6 <pvPortMalloc+0xb8>
    16f2:	fe 01       	movw	r30, r28
				{
					pxPreviousBlock = pxBlock;
					pxBlock = pxBlock->pxNextFreeBlock;
    16f4:	e9 01       	movw	r28, r18
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    16f6:	2a 81       	ldd	r18, Y+2	; 0x02
    16f8:	3b 81       	ldd	r19, Y+3	; 0x03
    16fa:	24 17       	cp	r18, r20
    16fc:	35 07       	cpc	r19, r21
    16fe:	28 f4       	brcc	.+10     	; 0x170a <pvPortMalloc+0xcc>
    1700:	28 81       	ld	r18, Y
    1702:	39 81       	ldd	r19, Y+1	; 0x01
    1704:	21 15       	cp	r18, r1
    1706:	31 05       	cpc	r19, r1
    1708:	a1 f7       	brne	.-24     	; 0x16f2 <pvPortMalloc+0xb4>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
    170a:	80 91 93 08 	lds	r24, 0x0893	; 0x800893 <pxEnd>
    170e:	90 91 94 08 	lds	r25, 0x0894	; 0x800894 <pxEnd+0x1>
    1712:	c8 17       	cp	r28, r24
    1714:	d9 07       	cpc	r29, r25
    1716:	e1 f1       	breq	.+120    	; 0x1790 <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
    1718:	c0 80       	ld	r12, Z
    171a:	d1 80       	ldd	r13, Z+1	; 0x01
    171c:	84 e0       	ldi	r24, 0x04	; 4
    171e:	c8 0e       	add	r12, r24
    1720:	d1 1c       	adc	r13, r1

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    1722:	88 81       	ld	r24, Y
    1724:	99 81       	ldd	r25, Y+1	; 0x01
    1726:	91 83       	std	Z+1, r25	; 0x01
    1728:	80 83       	st	Z, r24

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    172a:	2a 81       	ldd	r18, Y+2	; 0x02
    172c:	3b 81       	ldd	r19, Y+3	; 0x03
    172e:	24 1b       	sub	r18, r20
    1730:	35 0b       	sbc	r19, r21
    1732:	29 30       	cpi	r18, 0x09	; 9
    1734:	31 05       	cpc	r19, r1
    1736:	48 f0       	brcs	.+18     	; 0x174a <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
    1738:	ce 01       	movw	r24, r28
    173a:	84 0f       	add	r24, r20
    173c:	95 1f       	adc	r25, r21
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    173e:	fc 01       	movw	r30, r24
    1740:	33 83       	std	Z+3, r19	; 0x03
    1742:	22 83       	std	Z+2, r18	; 0x02
						pxBlock->xBlockSize = xWantedSize;
    1744:	5b 83       	std	Y+3, r21	; 0x03
    1746:	4a 83       	std	Y+2, r20	; 0x02

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
    1748:	2d df       	rcall	.-422    	; 0x15a4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
    174a:	8a 81       	ldd	r24, Y+2	; 0x02
    174c:	9b 81       	ldd	r25, Y+3	; 0x03
    174e:	08 1b       	sub	r16, r24
    1750:	19 0b       	sbc	r17, r25
    1752:	10 93 92 08 	sts	0x0892, r17	; 0x800892 <xFreeBytesRemaining+0x1>
    1756:	00 93 91 08 	sts	0x0891, r16	; 0x800891 <xFreeBytesRemaining>

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
    175a:	20 91 8f 08 	lds	r18, 0x088F	; 0x80088f <xMinimumEverFreeBytesRemaining>
    175e:	30 91 90 08 	lds	r19, 0x0890	; 0x800890 <xMinimumEverFreeBytesRemaining+0x1>
    1762:	02 17       	cp	r16, r18
    1764:	13 07       	cpc	r17, r19
    1766:	20 f4       	brcc	.+8      	; 0x1770 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
    1768:	10 93 90 08 	sts	0x0890, r17	; 0x800890 <xMinimumEverFreeBytesRemaining+0x1>
    176c:	00 93 8f 08 	sts	0x088F, r16	; 0x80088f <xMinimumEverFreeBytesRemaining>
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
    1770:	e8 2a       	or	r14, r24
    1772:	f9 2a       	or	r15, r25
    1774:	fb 82       	std	Y+3, r15	; 0x03
    1776:	ea 82       	std	Y+2, r14	; 0x02
					pxBlock->pxNextFreeBlock = NULL;
    1778:	19 82       	std	Y+1, r1	; 0x01
    177a:	18 82       	st	Y, r1
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    177c:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
    1780:	c1 14       	cp	r12, r1
    1782:	d1 04       	cpc	r13, r1
    1784:	59 f4       	brne	.+22     	; 0x179c <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
    1786:	0e 94 6a 1e 	call	0x3cd4	; 0x3cd4 <vApplicationMallocFailedHook>
    178a:	c1 2c       	mov	r12, r1
    178c:	d1 2c       	mov	r13, r1
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
    178e:	06 c0       	rjmp	.+12     	; 0x179c <pvPortMalloc+0x15e>
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    1790:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <xTaskResumeAll>
    1794:	f8 cf       	rjmp	.-16     	; 0x1786 <pvPortMalloc+0x148>
    1796:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <xTaskResumeAll>
    179a:	f5 cf       	rjmp	.-22     	; 0x1786 <pvPortMalloc+0x148>
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
}
    179c:	c6 01       	movw	r24, r12
    179e:	df 91       	pop	r29
    17a0:	cf 91       	pop	r28
    17a2:	1f 91       	pop	r17
    17a4:	0f 91       	pop	r16
    17a6:	ff 90       	pop	r15
    17a8:	ef 90       	pop	r14
    17aa:	df 90       	pop	r13
    17ac:	cf 90       	pop	r12
    17ae:	08 95       	ret

000017b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    17b0:	cf 93       	push	r28
    17b2:	df 93       	push	r29
uint8_t *puc = ( uint8_t * ) pv;
BlockLink_t *pxLink;

	if( pv != NULL )
    17b4:	00 97       	sbiw	r24, 0x00	; 0
    17b6:	51 f1       	breq	.+84     	; 0x180c <vPortFree+0x5c>

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
		configASSERT( pxLink->pxNextFreeBlock == NULL );

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
    17b8:	fc 01       	movw	r30, r24
    17ba:	34 97       	sbiw	r30, 0x04	; 4
    17bc:	22 81       	ldd	r18, Z+2	; 0x02
    17be:	33 81       	ldd	r19, Z+3	; 0x03
    17c0:	40 91 8d 08 	lds	r20, 0x088D	; 0x80088d <xBlockAllocatedBit>
    17c4:	50 91 8e 08 	lds	r21, 0x088E	; 0x80088e <xBlockAllocatedBit+0x1>
    17c8:	b9 01       	movw	r22, r18
    17ca:	64 23       	and	r22, r20
    17cc:	75 23       	and	r23, r21
    17ce:	67 2b       	or	r22, r23
    17d0:	e9 f0       	breq	.+58     	; 0x180c <vPortFree+0x5c>
		{
			if( pxLink->pxNextFreeBlock == NULL )
    17d2:	60 81       	ld	r22, Z
    17d4:	71 81       	ldd	r23, Z+1	; 0x01
    17d6:	67 2b       	or	r22, r23
    17d8:	c9 f4       	brne	.+50     	; 0x180c <vPortFree+0x5c>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
    17da:	ef 01       	movw	r28, r30
    17dc:	40 95       	com	r20
    17de:	50 95       	com	r21
    17e0:	24 23       	and	r18, r20
    17e2:	35 23       	and	r19, r21
    17e4:	33 83       	std	Z+3, r19	; 0x03
    17e6:	22 83       	std	Z+2, r18	; 0x02

				vTaskSuspendAll();
    17e8:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
    17ec:	20 91 91 08 	lds	r18, 0x0891	; 0x800891 <xFreeBytesRemaining>
    17f0:	30 91 92 08 	lds	r19, 0x0892	; 0x800892 <xFreeBytesRemaining+0x1>
    17f4:	8a 81       	ldd	r24, Y+2	; 0x02
    17f6:	9b 81       	ldd	r25, Y+3	; 0x03
    17f8:	82 0f       	add	r24, r18
    17fa:	93 1f       	adc	r25, r19
    17fc:	90 93 92 08 	sts	0x0892, r25	; 0x800892 <xFreeBytesRemaining+0x1>
    1800:	80 93 91 08 	sts	0x0891, r24	; 0x800891 <xFreeBytesRemaining>
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
    1804:	ce 01       	movw	r24, r28
    1806:	ce de       	rcall	.-612    	; 0x15a4 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
    1808:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
    180c:	df 91       	pop	r29
    180e:	cf 91       	pop	r28
    1810:	08 95       	ret

00001812 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    1812:	fc 01       	movw	r30, r24
    /* The list structure contains a list item which is used to mark the
    end of the list.  To initialise the list the list end is inserted
    as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );            /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1814:	03 96       	adiw	r24, 0x03	; 3
    1816:	92 83       	std	Z+2, r25	; 0x02
    1818:	81 83       	std	Z+1, r24	; 0x01

    /* The list end value is the highest possible value in the list to
    ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
    181a:	4f ef       	ldi	r20, 0xFF	; 255
    181c:	5f ef       	ldi	r21, 0xFF	; 255
    181e:	ba 01       	movw	r22, r20
    1820:	43 83       	std	Z+3, r20	; 0x03
    1822:	54 83       	std	Z+4, r21	; 0x04
    1824:	65 83       	std	Z+5, r22	; 0x05
    1826:	76 83       	std	Z+6, r23	; 0x06

    /* The list end next and previous pointers point to itself so we know
    when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );    /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1828:	90 87       	std	Z+8, r25	; 0x08
    182a:	87 83       	std	Z+7, r24	; 0x07
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    182c:	92 87       	std	Z+10, r25	; 0x0a
    182e:	81 87       	std	Z+9, r24	; 0x09

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    1830:	10 82       	st	Z, r1
    1832:	08 95       	ret

00001834 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
    1834:	fc 01       	movw	r30, r24
    1836:	13 86       	std	Z+11, r1	; 0x0b
    1838:	12 86       	std	Z+10, r1	; 0x0a
    183a:	08 95       	ret

0000183c <vListInsertEnd>:
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    183c:	cf 93       	push	r28
    183e:	df 93       	push	r29
    1840:	9c 01       	movw	r18, r24
    1842:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
    1844:	dc 01       	movw	r26, r24
    1846:	11 96       	adiw	r26, 0x01	; 1
    1848:	cd 91       	ld	r28, X+
    184a:	dc 91       	ld	r29, X
    184c:	12 97       	sbiw	r26, 0x02	; 2
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
    makes the new list item the last item to be removed by a call to
    listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
    184e:	d5 83       	std	Z+5, r29	; 0x05
    1850:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    1852:	8e 81       	ldd	r24, Y+6	; 0x06
    1854:	9f 81       	ldd	r25, Y+7	; 0x07
    1856:	97 83       	std	Z+7, r25	; 0x07
    1858:	86 83       	std	Z+6, r24	; 0x06

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
    185a:	8e 81       	ldd	r24, Y+6	; 0x06
    185c:	9f 81       	ldd	r25, Y+7	; 0x07
    185e:	dc 01       	movw	r26, r24
    1860:	15 96       	adiw	r26, 0x05	; 5
    1862:	7c 93       	st	X, r23
    1864:	6e 93       	st	-X, r22
    1866:	14 97       	sbiw	r26, 0x04	; 4
    pxIndex->pxPrevious = pxNewListItem;
    1868:	7f 83       	std	Y+7, r23	; 0x07
    186a:	6e 83       	std	Y+6, r22	; 0x06

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
    186c:	33 87       	std	Z+11, r19	; 0x0b
    186e:	22 87       	std	Z+10, r18	; 0x0a

    ( pxList->uxNumberOfItems )++;
    1870:	f9 01       	movw	r30, r18
    1872:	80 81       	ld	r24, Z
    1874:	8f 5f       	subi	r24, 0xFF	; 255
    1876:	80 83       	st	Z, r24
}
    1878:	df 91       	pop	r29
    187a:	cf 91       	pop	r28
    187c:	08 95       	ret

0000187e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    187e:	0f 93       	push	r16
    1880:	1f 93       	push	r17
    1882:	cf 93       	push	r28
    1884:	df 93       	push	r29
    1886:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    1888:	08 81       	ld	r16, Y
    188a:	19 81       	ldd	r17, Y+1	; 0x01
    188c:	2a 81       	ldd	r18, Y+2	; 0x02
    188e:	3b 81       	ldd	r19, Y+3	; 0x03
    new list item should be placed after it.  This ensures that TCBs which are
    stored in ready lists (all of which have the same xItemValue value) get a
    share of the CPU.  However, if the xItemValue is the same as the back marker
    the iteration loop below will not end.  Therefore the value is checked
    first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
    1890:	0f 3f       	cpi	r16, 0xFF	; 255
    1892:	4f ef       	ldi	r20, 0xFF	; 255
    1894:	14 07       	cpc	r17, r20
    1896:	24 07       	cpc	r18, r20
    1898:	34 07       	cpc	r19, r20
    189a:	21 f4       	brne	.+8      	; 0x18a4 <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
    189c:	fc 01       	movw	r30, r24
    189e:	a1 85       	ldd	r26, Z+9	; 0x09
    18a0:	b2 85       	ldd	r27, Z+10	; 0x0a
    18a2:	11 c0       	rjmp	.+34     	; 0x18c6 <vListInsert+0x48>
            4) Using a queue or semaphore before it has been initialised or
               before the scheduler has been started (are interrupts firing
               before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
    18a4:	dc 01       	movw	r26, r24
    18a6:	13 96       	adiw	r26, 0x03	; 3
    18a8:	01 c0       	rjmp	.+2      	; 0x18ac <vListInsert+0x2e>
    18aa:	df 01       	movw	r26, r30
    18ac:	14 96       	adiw	r26, 0x04	; 4
    18ae:	ed 91       	ld	r30, X+
    18b0:	fc 91       	ld	r31, X
    18b2:	15 97       	sbiw	r26, 0x05	; 5
    18b4:	40 81       	ld	r20, Z
    18b6:	51 81       	ldd	r21, Z+1	; 0x01
    18b8:	62 81       	ldd	r22, Z+2	; 0x02
    18ba:	73 81       	ldd	r23, Z+3	; 0x03
    18bc:	04 17       	cp	r16, r20
    18be:	15 07       	cpc	r17, r21
    18c0:	26 07       	cpc	r18, r22
    18c2:	37 07       	cpc	r19, r23
    18c4:	90 f7       	brcc	.-28     	; 0x18aa <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
            insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
    18c6:	14 96       	adiw	r26, 0x04	; 4
    18c8:	ed 91       	ld	r30, X+
    18ca:	fc 91       	ld	r31, X
    18cc:	15 97       	sbiw	r26, 0x05	; 5
    18ce:	fd 83       	std	Y+5, r31	; 0x05
    18d0:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    18d2:	d7 83       	std	Z+7, r29	; 0x07
    18d4:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
    18d6:	bf 83       	std	Y+7, r27	; 0x07
    18d8:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
    18da:	15 96       	adiw	r26, 0x05	; 5
    18dc:	dc 93       	st	X, r29
    18de:	ce 93       	st	-X, r28
    18e0:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
    item later. */
    pxNewListItem->pxContainer = pxList;
    18e2:	9b 87       	std	Y+11, r25	; 0x0b
    18e4:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
    18e6:	fc 01       	movw	r30, r24
    18e8:	20 81       	ld	r18, Z
    18ea:	2f 5f       	subi	r18, 0xFF	; 255
    18ec:	20 83       	st	Z, r18
}
    18ee:	df 91       	pop	r29
    18f0:	cf 91       	pop	r28
    18f2:	1f 91       	pop	r17
    18f4:	0f 91       	pop	r16
    18f6:	08 95       	ret

000018f8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    18f8:	cf 93       	push	r28
    18fa:	df 93       	push	r29
    18fc:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
    18fe:	a2 85       	ldd	r26, Z+10	; 0x0a
    1900:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    1902:	c4 81       	ldd	r28, Z+4	; 0x04
    1904:	d5 81       	ldd	r29, Z+5	; 0x05
    1906:	86 81       	ldd	r24, Z+6	; 0x06
    1908:	97 81       	ldd	r25, Z+7	; 0x07
    190a:	9f 83       	std	Y+7, r25	; 0x07
    190c:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    190e:	c6 81       	ldd	r28, Z+6	; 0x06
    1910:	d7 81       	ldd	r29, Z+7	; 0x07
    1912:	84 81       	ldd	r24, Z+4	; 0x04
    1914:	95 81       	ldd	r25, Z+5	; 0x05
    1916:	9d 83       	std	Y+5, r25	; 0x05
    1918:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
    191a:	11 96       	adiw	r26, 0x01	; 1
    191c:	8d 91       	ld	r24, X+
    191e:	9c 91       	ld	r25, X
    1920:	12 97       	sbiw	r26, 0x02	; 2
    1922:	e8 17       	cp	r30, r24
    1924:	f9 07       	cpc	r31, r25
    1926:	31 f4       	brne	.+12     	; 0x1934 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
    1928:	86 81       	ldd	r24, Z+6	; 0x06
    192a:	97 81       	ldd	r25, Z+7	; 0x07
    192c:	12 96       	adiw	r26, 0x02	; 2
    192e:	9c 93       	st	X, r25
    1930:	8e 93       	st	-X, r24
    1932:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
    1934:	13 86       	std	Z+11, r1	; 0x0b
    1936:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
    1938:	8c 91       	ld	r24, X
    193a:	81 50       	subi	r24, 0x01	; 1
    193c:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
    193e:	8c 91       	ld	r24, X
}
    1940:	df 91       	pop	r29
    1942:	cf 91       	pop	r28
    1944:	08 95       	ret

00001946 <pxPortInitialiseStack>:
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    1946:	31 e1       	ldi	r19, 0x11	; 17
    1948:	fc 01       	movw	r30, r24
    194a:	30 83       	st	Z, r19
    194c:	31 97       	sbiw	r30, 0x01	; 1
    194e:	22 e2       	ldi	r18, 0x22	; 34
    1950:	20 83       	st	Z, r18
    1952:	31 97       	sbiw	r30, 0x01	; 1
    1954:	a3 e3       	ldi	r26, 0x33	; 51
    1956:	a0 83       	st	Z, r26
    1958:	31 97       	sbiw	r30, 0x01	; 1
    195a:	60 83       	st	Z, r22
    195c:	31 97       	sbiw	r30, 0x01	; 1
    195e:	70 83       	st	Z, r23
    1960:	31 97       	sbiw	r30, 0x01	; 1
    1962:	10 82       	st	Z, r1
    1964:	31 97       	sbiw	r30, 0x01	; 1
    1966:	10 82       	st	Z, r1
    1968:	31 97       	sbiw	r30, 0x01	; 1
    196a:	60 e8       	ldi	r22, 0x80	; 128
    196c:	60 83       	st	Z, r22
    196e:	31 97       	sbiw	r30, 0x01	; 1
    1970:	10 82       	st	Z, r1
    1972:	31 97       	sbiw	r30, 0x01	; 1
    1974:	10 82       	st	Z, r1
    1976:	31 97       	sbiw	r30, 0x01	; 1
    1978:	10 82       	st	Z, r1
    197a:	31 97       	sbiw	r30, 0x01	; 1
    197c:	62 e0       	ldi	r22, 0x02	; 2
    197e:	60 83       	st	Z, r22
    1980:	31 97       	sbiw	r30, 0x01	; 1
    1982:	63 e0       	ldi	r22, 0x03	; 3
    1984:	60 83       	st	Z, r22
    1986:	31 97       	sbiw	r30, 0x01	; 1
    1988:	64 e0       	ldi	r22, 0x04	; 4
    198a:	60 83       	st	Z, r22
    198c:	31 97       	sbiw	r30, 0x01	; 1
    198e:	65 e0       	ldi	r22, 0x05	; 5
    1990:	60 83       	st	Z, r22
    1992:	31 97       	sbiw	r30, 0x01	; 1
    1994:	66 e0       	ldi	r22, 0x06	; 6
    1996:	60 83       	st	Z, r22
    1998:	31 97       	sbiw	r30, 0x01	; 1
    199a:	67 e0       	ldi	r22, 0x07	; 7
    199c:	60 83       	st	Z, r22
    199e:	31 97       	sbiw	r30, 0x01	; 1
    19a0:	68 e0       	ldi	r22, 0x08	; 8
    19a2:	60 83       	st	Z, r22
    19a4:	31 97       	sbiw	r30, 0x01	; 1
    19a6:	69 e0       	ldi	r22, 0x09	; 9
    19a8:	60 83       	st	Z, r22
    19aa:	31 97       	sbiw	r30, 0x01	; 1
    19ac:	60 e1       	ldi	r22, 0x10	; 16
    19ae:	60 83       	st	Z, r22
    19b0:	31 97       	sbiw	r30, 0x01	; 1
    19b2:	30 83       	st	Z, r19
    19b4:	31 97       	sbiw	r30, 0x01	; 1
    19b6:	32 e1       	ldi	r19, 0x12	; 18
    19b8:	30 83       	st	Z, r19
    19ba:	31 97       	sbiw	r30, 0x01	; 1
    19bc:	33 e1       	ldi	r19, 0x13	; 19
    19be:	30 83       	st	Z, r19
    19c0:	31 97       	sbiw	r30, 0x01	; 1
    19c2:	34 e1       	ldi	r19, 0x14	; 20
    19c4:	30 83       	st	Z, r19
    19c6:	31 97       	sbiw	r30, 0x01	; 1
    19c8:	35 e1       	ldi	r19, 0x15	; 21
    19ca:	30 83       	st	Z, r19
    19cc:	31 97       	sbiw	r30, 0x01	; 1
    19ce:	36 e1       	ldi	r19, 0x16	; 22
    19d0:	30 83       	st	Z, r19
    19d2:	31 97       	sbiw	r30, 0x01	; 1
    19d4:	37 e1       	ldi	r19, 0x17	; 23
    19d6:	30 83       	st	Z, r19
    19d8:	31 97       	sbiw	r30, 0x01	; 1
    19da:	38 e1       	ldi	r19, 0x18	; 24
    19dc:	30 83       	st	Z, r19
    19de:	31 97       	sbiw	r30, 0x01	; 1
    19e0:	39 e1       	ldi	r19, 0x19	; 25
    19e2:	30 83       	st	Z, r19
    19e4:	31 97       	sbiw	r30, 0x01	; 1
    19e6:	30 e2       	ldi	r19, 0x20	; 32
    19e8:	30 83       	st	Z, r19
    19ea:	31 97       	sbiw	r30, 0x01	; 1
    19ec:	31 e2       	ldi	r19, 0x21	; 33
    19ee:	30 83       	st	Z, r19
    19f0:	31 97       	sbiw	r30, 0x01	; 1
    19f2:	20 83       	st	Z, r18
    19f4:	31 97       	sbiw	r30, 0x01	; 1
    19f6:	23 e2       	ldi	r18, 0x23	; 35
    19f8:	20 83       	st	Z, r18
    19fa:	31 97       	sbiw	r30, 0x01	; 1
    19fc:	40 83       	st	Z, r20
    19fe:	31 97       	sbiw	r30, 0x01	; 1
    1a00:	50 83       	st	Z, r21
    1a02:	31 97       	sbiw	r30, 0x01	; 1
    1a04:	26 e2       	ldi	r18, 0x26	; 38
    1a06:	20 83       	st	Z, r18
    1a08:	31 97       	sbiw	r30, 0x01	; 1
    1a0a:	27 e2       	ldi	r18, 0x27	; 39
    1a0c:	20 83       	st	Z, r18
    1a0e:	31 97       	sbiw	r30, 0x01	; 1
    1a10:	28 e2       	ldi	r18, 0x28	; 40
    1a12:	20 83       	st	Z, r18
    1a14:	31 97       	sbiw	r30, 0x01	; 1
    1a16:	29 e2       	ldi	r18, 0x29	; 41
    1a18:	20 83       	st	Z, r18
    1a1a:	31 97       	sbiw	r30, 0x01	; 1
    1a1c:	20 e3       	ldi	r18, 0x30	; 48
    1a1e:	20 83       	st	Z, r18
    1a20:	31 97       	sbiw	r30, 0x01	; 1
    1a22:	21 e3       	ldi	r18, 0x31	; 49
    1a24:	20 83       	st	Z, r18
    1a26:	89 97       	sbiw	r24, 0x29	; 41
    1a28:	08 95       	ret

00001a2a <xPortStartScheduler>:
    1a2a:	a8 95       	wdr
    1a2c:	90 ec       	ldi	r25, 0xC0	; 192
    1a2e:	88 e1       	ldi	r24, 0x18	; 24
    1a30:	0f b6       	in	r0, 0x3f	; 63
    1a32:	f8 94       	cli
    1a34:	a8 95       	wdr
    1a36:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    1a3a:	0f be       	out	0x3f, r0	; 63
    1a3c:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    1a40:	a0 91 b3 18 	lds	r26, 0x18B3	; 0x8018b3 <pxCurrentTCB>
    1a44:	b0 91 b4 18 	lds	r27, 0x18B4	; 0x8018b4 <pxCurrentTCB+0x1>
    1a48:	cd 91       	ld	r28, X+
    1a4a:	cd bf       	out	0x3d, r28	; 61
    1a4c:	dd 91       	ld	r29, X+
    1a4e:	de bf       	out	0x3e, r29	; 62
    1a50:	ff 91       	pop	r31
    1a52:	ef 91       	pop	r30
    1a54:	df 91       	pop	r29
    1a56:	cf 91       	pop	r28
    1a58:	bf 91       	pop	r27
    1a5a:	af 91       	pop	r26
    1a5c:	9f 91       	pop	r25
    1a5e:	8f 91       	pop	r24
    1a60:	7f 91       	pop	r23
    1a62:	6f 91       	pop	r22
    1a64:	5f 91       	pop	r21
    1a66:	4f 91       	pop	r20
    1a68:	3f 91       	pop	r19
    1a6a:	2f 91       	pop	r18
    1a6c:	1f 91       	pop	r17
    1a6e:	0f 91       	pop	r16
    1a70:	ff 90       	pop	r15
    1a72:	ef 90       	pop	r14
    1a74:	df 90       	pop	r13
    1a76:	cf 90       	pop	r12
    1a78:	bf 90       	pop	r11
    1a7a:	af 90       	pop	r10
    1a7c:	9f 90       	pop	r9
    1a7e:	8f 90       	pop	r8
    1a80:	7f 90       	pop	r7
    1a82:	6f 90       	pop	r6
    1a84:	5f 90       	pop	r5
    1a86:	4f 90       	pop	r4
    1a88:	3f 90       	pop	r3
    1a8a:	2f 90       	pop	r2
    1a8c:	1f 90       	pop	r1
    1a8e:	0f 90       	pop	r0
    1a90:	0c be       	out	0x3c, r0	; 60
    1a92:	0f 90       	pop	r0
    1a94:	0b be       	out	0x3b, r0	; 59
    1a96:	0f 90       	pop	r0
    1a98:	0f be       	out	0x3f, r0	; 63
    1a9a:	0f 90       	pop	r0
    1a9c:	08 95       	ret
    1a9e:	81 e0       	ldi	r24, 0x01	; 1
    1aa0:	08 95       	ret

00001aa2 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYield( void )
{
    portSAVE_CONTEXT();
    1aa2:	0f 92       	push	r0
    1aa4:	0f b6       	in	r0, 0x3f	; 63
    1aa6:	f8 94       	cli
    1aa8:	0f 92       	push	r0
    1aaa:	0b b6       	in	r0, 0x3b	; 59
    1aac:	0f 92       	push	r0
    1aae:	0c b6       	in	r0, 0x3c	; 60
    1ab0:	0f 92       	push	r0
    1ab2:	1f 92       	push	r1
    1ab4:	11 24       	eor	r1, r1
    1ab6:	2f 92       	push	r2
    1ab8:	3f 92       	push	r3
    1aba:	4f 92       	push	r4
    1abc:	5f 92       	push	r5
    1abe:	6f 92       	push	r6
    1ac0:	7f 92       	push	r7
    1ac2:	8f 92       	push	r8
    1ac4:	9f 92       	push	r9
    1ac6:	af 92       	push	r10
    1ac8:	bf 92       	push	r11
    1aca:	cf 92       	push	r12
    1acc:	df 92       	push	r13
    1ace:	ef 92       	push	r14
    1ad0:	ff 92       	push	r15
    1ad2:	0f 93       	push	r16
    1ad4:	1f 93       	push	r17
    1ad6:	2f 93       	push	r18
    1ad8:	3f 93       	push	r19
    1ada:	4f 93       	push	r20
    1adc:	5f 93       	push	r21
    1ade:	6f 93       	push	r22
    1ae0:	7f 93       	push	r23
    1ae2:	8f 93       	push	r24
    1ae4:	9f 93       	push	r25
    1ae6:	af 93       	push	r26
    1ae8:	bf 93       	push	r27
    1aea:	cf 93       	push	r28
    1aec:	df 93       	push	r29
    1aee:	ef 93       	push	r30
    1af0:	ff 93       	push	r31
    1af2:	a0 91 b3 18 	lds	r26, 0x18B3	; 0x8018b3 <pxCurrentTCB>
    1af6:	b0 91 b4 18 	lds	r27, 0x18B4	; 0x8018b4 <pxCurrentTCB+0x1>
    1afa:	0d b6       	in	r0, 0x3d	; 61
    1afc:	0d 92       	st	X+, r0
    1afe:	0e b6       	in	r0, 0x3e	; 62
    1b00:	0d 92       	st	X+, r0
    vTaskSwitchContext();
    1b02:	0e 94 2c 18 	call	0x3058	; 0x3058 <vTaskSwitchContext>
    portRESTORE_CONTEXT();
    1b06:	a0 91 b3 18 	lds	r26, 0x18B3	; 0x8018b3 <pxCurrentTCB>
    1b0a:	b0 91 b4 18 	lds	r27, 0x18B4	; 0x8018b4 <pxCurrentTCB+0x1>
    1b0e:	cd 91       	ld	r28, X+
    1b10:	cd bf       	out	0x3d, r28	; 61
    1b12:	dd 91       	ld	r29, X+
    1b14:	de bf       	out	0x3e, r29	; 62
    1b16:	ff 91       	pop	r31
    1b18:	ef 91       	pop	r30
    1b1a:	df 91       	pop	r29
    1b1c:	cf 91       	pop	r28
    1b1e:	bf 91       	pop	r27
    1b20:	af 91       	pop	r26
    1b22:	9f 91       	pop	r25
    1b24:	8f 91       	pop	r24
    1b26:	7f 91       	pop	r23
    1b28:	6f 91       	pop	r22
    1b2a:	5f 91       	pop	r21
    1b2c:	4f 91       	pop	r20
    1b2e:	3f 91       	pop	r19
    1b30:	2f 91       	pop	r18
    1b32:	1f 91       	pop	r17
    1b34:	0f 91       	pop	r16
    1b36:	ff 90       	pop	r15
    1b38:	ef 90       	pop	r14
    1b3a:	df 90       	pop	r13
    1b3c:	cf 90       	pop	r12
    1b3e:	bf 90       	pop	r11
    1b40:	af 90       	pop	r10
    1b42:	9f 90       	pop	r9
    1b44:	8f 90       	pop	r8
    1b46:	7f 90       	pop	r7
    1b48:	6f 90       	pop	r6
    1b4a:	5f 90       	pop	r5
    1b4c:	4f 90       	pop	r4
    1b4e:	3f 90       	pop	r3
    1b50:	2f 90       	pop	r2
    1b52:	1f 90       	pop	r1
    1b54:	0f 90       	pop	r0
    1b56:	0c be       	out	0x3c, r0	; 60
    1b58:	0f 90       	pop	r0
    1b5a:	0b be       	out	0x3b, r0	; 59
    1b5c:	0f 90       	pop	r0
    1b5e:	0f be       	out	0x3f, r0	; 63
    1b60:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
    1b62:	08 95       	ret

00001b64 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
    1b64:	0f 92       	push	r0
    1b66:	0f b6       	in	r0, 0x3f	; 63
    1b68:	f8 94       	cli
    1b6a:	0f 92       	push	r0
    1b6c:	0b b6       	in	r0, 0x3b	; 59
    1b6e:	0f 92       	push	r0
    1b70:	0c b6       	in	r0, 0x3c	; 60
    1b72:	0f 92       	push	r0
    1b74:	1f 92       	push	r1
    1b76:	11 24       	eor	r1, r1
    1b78:	2f 92       	push	r2
    1b7a:	3f 92       	push	r3
    1b7c:	4f 92       	push	r4
    1b7e:	5f 92       	push	r5
    1b80:	6f 92       	push	r6
    1b82:	7f 92       	push	r7
    1b84:	8f 92       	push	r8
    1b86:	9f 92       	push	r9
    1b88:	af 92       	push	r10
    1b8a:	bf 92       	push	r11
    1b8c:	cf 92       	push	r12
    1b8e:	df 92       	push	r13
    1b90:	ef 92       	push	r14
    1b92:	ff 92       	push	r15
    1b94:	0f 93       	push	r16
    1b96:	1f 93       	push	r17
    1b98:	2f 93       	push	r18
    1b9a:	3f 93       	push	r19
    1b9c:	4f 93       	push	r20
    1b9e:	5f 93       	push	r21
    1ba0:	6f 93       	push	r22
    1ba2:	7f 93       	push	r23
    1ba4:	8f 93       	push	r24
    1ba6:	9f 93       	push	r25
    1ba8:	af 93       	push	r26
    1baa:	bf 93       	push	r27
    1bac:	cf 93       	push	r28
    1bae:	df 93       	push	r29
    1bb0:	ef 93       	push	r30
    1bb2:	ff 93       	push	r31
    1bb4:	a0 91 b3 18 	lds	r26, 0x18B3	; 0x8018b3 <pxCurrentTCB>
    1bb8:	b0 91 b4 18 	lds	r27, 0x18B4	; 0x8018b4 <pxCurrentTCB+0x1>
    1bbc:	0d b6       	in	r0, 0x3d	; 61
    1bbe:	0d 92       	st	X+, r0
    1bc0:	0e b6       	in	r0, 0x3e	; 62
    1bc2:	0d 92       	st	X+, r0

    sleep_reset();        //     reset the sleep_mode() faster than sleep_disable();
    1bc4:	13 be       	out	0x33, r1	; 51

    if( xTaskIncrementTick() != pdFALSE )
    1bc6:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <xTaskIncrementTick>
    1bca:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
    1bcc:	0e 94 2c 18 	call	0x3058	; 0x3058 <vTaskSwitchContext>
    }

    portRESTORE_CONTEXT();
    1bd0:	a0 91 b3 18 	lds	r26, 0x18B3	; 0x8018b3 <pxCurrentTCB>
    1bd4:	b0 91 b4 18 	lds	r27, 0x18B4	; 0x8018b4 <pxCurrentTCB+0x1>
    1bd8:	cd 91       	ld	r28, X+
    1bda:	cd bf       	out	0x3d, r28	; 61
    1bdc:	dd 91       	ld	r29, X+
    1bde:	de bf       	out	0x3e, r29	; 62
    1be0:	ff 91       	pop	r31
    1be2:	ef 91       	pop	r30
    1be4:	df 91       	pop	r29
    1be6:	cf 91       	pop	r28
    1be8:	bf 91       	pop	r27
    1bea:	af 91       	pop	r26
    1bec:	9f 91       	pop	r25
    1bee:	8f 91       	pop	r24
    1bf0:	7f 91       	pop	r23
    1bf2:	6f 91       	pop	r22
    1bf4:	5f 91       	pop	r21
    1bf6:	4f 91       	pop	r20
    1bf8:	3f 91       	pop	r19
    1bfa:	2f 91       	pop	r18
    1bfc:	1f 91       	pop	r17
    1bfe:	0f 91       	pop	r16
    1c00:	ff 90       	pop	r15
    1c02:	ef 90       	pop	r14
    1c04:	df 90       	pop	r13
    1c06:	cf 90       	pop	r12
    1c08:	bf 90       	pop	r11
    1c0a:	af 90       	pop	r10
    1c0c:	9f 90       	pop	r9
    1c0e:	8f 90       	pop	r8
    1c10:	7f 90       	pop	r7
    1c12:	6f 90       	pop	r6
    1c14:	5f 90       	pop	r5
    1c16:	4f 90       	pop	r4
    1c18:	3f 90       	pop	r3
    1c1a:	2f 90       	pop	r2
    1c1c:	1f 90       	pop	r1
    1c1e:	0f 90       	pop	r0
    1c20:	0c be       	out	0x3c, r0	; 60
    1c22:	0f 90       	pop	r0
    1c24:	0b be       	out	0x3b, r0	; 59
    1c26:	0f 90       	pop	r0
    1c28:	0f be       	out	0x3f, r0	; 63
    1c2a:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
    1c2c:	08 95       	ret

00001c2e <__vector_12>:
     */
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
//  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
    1c2e:	9a df       	rcall	.-204    	; 0x1b64 <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
    1c30:	18 95       	reti

00001c32 <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    1c32:	0f b6       	in	r0, 0x3f	; 63
    1c34:	f8 94       	cli
    1c36:	0f 92       	push	r0
    1c38:	fc 01       	movw	r30, r24
    1c3a:	96 8d       	ldd	r25, Z+30	; 0x1e
    1c3c:	0f 90       	pop	r0
    1c3e:	0f be       	out	0x3f, r0	; 63
    1c40:	81 e0       	ldi	r24, 0x01	; 1
    1c42:	91 11       	cpse	r25, r1
    1c44:	80 e0       	ldi	r24, 0x00	; 0
    1c46:	08 95       	ret

00001c48 <prvCopyDataToQueue>:
    1c48:	0f 93       	push	r16
    1c4a:	1f 93       	push	r17
    1c4c:	cf 93       	push	r28
    1c4e:	df 93       	push	r29
    1c50:	ec 01       	movw	r28, r24
    1c52:	04 2f       	mov	r16, r20
    1c54:	1e 8d       	ldd	r17, Y+30	; 0x1e
    1c56:	48 a1       	ldd	r20, Y+32	; 0x20
    1c58:	41 11       	cpse	r20, r1
    1c5a:	0c c0       	rjmp	.+24     	; 0x1c74 <prvCopyDataToQueue+0x2c>
    1c5c:	88 81       	ld	r24, Y
    1c5e:	99 81       	ldd	r25, Y+1	; 0x01
    1c60:	89 2b       	or	r24, r25
    1c62:	09 f0       	breq	.+2      	; 0x1c66 <prvCopyDataToQueue+0x1e>
    1c64:	42 c0       	rjmp	.+132    	; 0x1cea <prvCopyDataToQueue+0xa2>
    1c66:	8c 81       	ldd	r24, Y+4	; 0x04
    1c68:	9d 81       	ldd	r25, Y+5	; 0x05
    1c6a:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <xTaskPriorityDisinherit>
    1c6e:	1d 82       	std	Y+5, r1	; 0x05
    1c70:	1c 82       	std	Y+4, r1	; 0x04
    1c72:	42 c0       	rjmp	.+132    	; 0x1cf8 <prvCopyDataToQueue+0xb0>
    1c74:	01 11       	cpse	r16, r1
    1c76:	17 c0       	rjmp	.+46     	; 0x1ca6 <prvCopyDataToQueue+0x5e>
    1c78:	50 e0       	ldi	r21, 0x00	; 0
    1c7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c7c:	9b 81       	ldd	r25, Y+3	; 0x03
    1c7e:	0e 94 01 31 	call	0x6202	; 0x6202 <memcpy>
    1c82:	28 a1       	ldd	r18, Y+32	; 0x20
    1c84:	8a 81       	ldd	r24, Y+2	; 0x02
    1c86:	9b 81       	ldd	r25, Y+3	; 0x03
    1c88:	82 0f       	add	r24, r18
    1c8a:	91 1d       	adc	r25, r1
    1c8c:	9b 83       	std	Y+3, r25	; 0x03
    1c8e:	8a 83       	std	Y+2, r24	; 0x02
    1c90:	2c 81       	ldd	r18, Y+4	; 0x04
    1c92:	3d 81       	ldd	r19, Y+5	; 0x05
    1c94:	82 17       	cp	r24, r18
    1c96:	93 07       	cpc	r25, r19
    1c98:	50 f1       	brcs	.+84     	; 0x1cee <prvCopyDataToQueue+0xa6>
    1c9a:	88 81       	ld	r24, Y
    1c9c:	99 81       	ldd	r25, Y+1	; 0x01
    1c9e:	9b 83       	std	Y+3, r25	; 0x03
    1ca0:	8a 83       	std	Y+2, r24	; 0x02
    1ca2:	80 e0       	ldi	r24, 0x00	; 0
    1ca4:	29 c0       	rjmp	.+82     	; 0x1cf8 <prvCopyDataToQueue+0xb0>
    1ca6:	50 e0       	ldi	r21, 0x00	; 0
    1ca8:	8e 81       	ldd	r24, Y+6	; 0x06
    1caa:	9f 81       	ldd	r25, Y+7	; 0x07
    1cac:	0e 94 01 31 	call	0x6202	; 0x6202 <memcpy>
    1cb0:	88 a1       	ldd	r24, Y+32	; 0x20
    1cb2:	90 e0       	ldi	r25, 0x00	; 0
    1cb4:	91 95       	neg	r25
    1cb6:	81 95       	neg	r24
    1cb8:	91 09       	sbc	r25, r1
    1cba:	2e 81       	ldd	r18, Y+6	; 0x06
    1cbc:	3f 81       	ldd	r19, Y+7	; 0x07
    1cbe:	28 0f       	add	r18, r24
    1cc0:	39 1f       	adc	r19, r25
    1cc2:	3f 83       	std	Y+7, r19	; 0x07
    1cc4:	2e 83       	std	Y+6, r18	; 0x06
    1cc6:	48 81       	ld	r20, Y
    1cc8:	59 81       	ldd	r21, Y+1	; 0x01
    1cca:	24 17       	cp	r18, r20
    1ccc:	35 07       	cpc	r19, r21
    1cce:	30 f4       	brcc	.+12     	; 0x1cdc <prvCopyDataToQueue+0x94>
    1cd0:	2c 81       	ldd	r18, Y+4	; 0x04
    1cd2:	3d 81       	ldd	r19, Y+5	; 0x05
    1cd4:	82 0f       	add	r24, r18
    1cd6:	93 1f       	adc	r25, r19
    1cd8:	9f 83       	std	Y+7, r25	; 0x07
    1cda:	8e 83       	std	Y+6, r24	; 0x06
    1cdc:	02 30       	cpi	r16, 0x02	; 2
    1cde:	49 f4       	brne	.+18     	; 0x1cf2 <prvCopyDataToQueue+0xaa>
    1ce0:	11 23       	and	r17, r17
    1ce2:	49 f0       	breq	.+18     	; 0x1cf6 <prvCopyDataToQueue+0xae>
    1ce4:	11 50       	subi	r17, 0x01	; 1
    1ce6:	80 e0       	ldi	r24, 0x00	; 0
    1ce8:	07 c0       	rjmp	.+14     	; 0x1cf8 <prvCopyDataToQueue+0xb0>
    1cea:	80 e0       	ldi	r24, 0x00	; 0
    1cec:	05 c0       	rjmp	.+10     	; 0x1cf8 <prvCopyDataToQueue+0xb0>
    1cee:	80 e0       	ldi	r24, 0x00	; 0
    1cf0:	03 c0       	rjmp	.+6      	; 0x1cf8 <prvCopyDataToQueue+0xb0>
    1cf2:	80 e0       	ldi	r24, 0x00	; 0
    1cf4:	01 c0       	rjmp	.+2      	; 0x1cf8 <prvCopyDataToQueue+0xb0>
    1cf6:	80 e0       	ldi	r24, 0x00	; 0
    1cf8:	1f 5f       	subi	r17, 0xFF	; 255
    1cfa:	1e 8f       	std	Y+30, r17	; 0x1e
    1cfc:	df 91       	pop	r29
    1cfe:	cf 91       	pop	r28
    1d00:	1f 91       	pop	r17
    1d02:	0f 91       	pop	r16
    1d04:	08 95       	ret

00001d06 <prvCopyDataFromQueue>:
    1d06:	fc 01       	movw	r30, r24
    1d08:	40 a1       	ldd	r20, Z+32	; 0x20
    1d0a:	44 23       	and	r20, r20
    1d0c:	a9 f0       	breq	.+42     	; 0x1d38 <prvCopyDataFromQueue+0x32>
    1d0e:	50 e0       	ldi	r21, 0x00	; 0
    1d10:	26 81       	ldd	r18, Z+6	; 0x06
    1d12:	37 81       	ldd	r19, Z+7	; 0x07
    1d14:	24 0f       	add	r18, r20
    1d16:	35 1f       	adc	r19, r21
    1d18:	37 83       	std	Z+7, r19	; 0x07
    1d1a:	26 83       	std	Z+6, r18	; 0x06
    1d1c:	84 81       	ldd	r24, Z+4	; 0x04
    1d1e:	95 81       	ldd	r25, Z+5	; 0x05
    1d20:	28 17       	cp	r18, r24
    1d22:	39 07       	cpc	r19, r25
    1d24:	20 f0       	brcs	.+8      	; 0x1d2e <prvCopyDataFromQueue+0x28>
    1d26:	80 81       	ld	r24, Z
    1d28:	91 81       	ldd	r25, Z+1	; 0x01
    1d2a:	97 83       	std	Z+7, r25	; 0x07
    1d2c:	86 83       	std	Z+6, r24	; 0x06
    1d2e:	cb 01       	movw	r24, r22
    1d30:	66 81       	ldd	r22, Z+6	; 0x06
    1d32:	77 81       	ldd	r23, Z+7	; 0x07
    1d34:	0c 94 01 31 	jmp	0x6202	; 0x6202 <memcpy>
    1d38:	08 95       	ret

00001d3a <prvUnlockQueue>:
    1d3a:	ef 92       	push	r14
    1d3c:	ff 92       	push	r15
    1d3e:	0f 93       	push	r16
    1d40:	1f 93       	push	r17
    1d42:	cf 93       	push	r28
    1d44:	8c 01       	movw	r16, r24
    1d46:	0f b6       	in	r0, 0x3f	; 63
    1d48:	f8 94       	cli
    1d4a:	0f 92       	push	r0
    1d4c:	fc 01       	movw	r30, r24
    1d4e:	c2 a1       	ldd	r28, Z+34	; 0x22
    1d50:	1c 16       	cp	r1, r28
    1d52:	ac f4       	brge	.+42     	; 0x1d7e <prvUnlockQueue+0x44>
    1d54:	83 89       	ldd	r24, Z+19	; 0x13
    1d56:	81 11       	cpse	r24, r1
    1d58:	06 c0       	rjmp	.+12     	; 0x1d66 <prvUnlockQueue+0x2c>
    1d5a:	11 c0       	rjmp	.+34     	; 0x1d7e <prvUnlockQueue+0x44>
    1d5c:	f8 01       	movw	r30, r16
    1d5e:	83 89       	ldd	r24, Z+19	; 0x13
    1d60:	81 11       	cpse	r24, r1
    1d62:	05 c0       	rjmp	.+10     	; 0x1d6e <prvUnlockQueue+0x34>
    1d64:	0c c0       	rjmp	.+24     	; 0x1d7e <prvUnlockQueue+0x44>
    1d66:	78 01       	movw	r14, r16
    1d68:	f3 e1       	ldi	r31, 0x13	; 19
    1d6a:	ef 0e       	add	r14, r31
    1d6c:	f1 1c       	adc	r15, r1
    1d6e:	c7 01       	movw	r24, r14
    1d70:	0e 94 06 19 	call	0x320c	; 0x320c <xTaskRemoveFromEventList>
    1d74:	81 11       	cpse	r24, r1
    1d76:	0e 94 f8 19 	call	0x33f0	; 0x33f0 <vTaskMissedYield>
    1d7a:	c1 50       	subi	r28, 0x01	; 1
    1d7c:	79 f7       	brne	.-34     	; 0x1d5c <prvUnlockQueue+0x22>
    1d7e:	8f ef       	ldi	r24, 0xFF	; 255
    1d80:	f8 01       	movw	r30, r16
    1d82:	82 a3       	std	Z+34, r24	; 0x22
    1d84:	0f 90       	pop	r0
    1d86:	0f be       	out	0x3f, r0	; 63
    1d88:	0f b6       	in	r0, 0x3f	; 63
    1d8a:	f8 94       	cli
    1d8c:	0f 92       	push	r0
    1d8e:	c1 a1       	ldd	r28, Z+33	; 0x21
    1d90:	1c 16       	cp	r1, r28
    1d92:	ac f4       	brge	.+42     	; 0x1dbe <prvUnlockQueue+0x84>
    1d94:	80 85       	ldd	r24, Z+8	; 0x08
    1d96:	81 11       	cpse	r24, r1
    1d98:	06 c0       	rjmp	.+12     	; 0x1da6 <prvUnlockQueue+0x6c>
    1d9a:	11 c0       	rjmp	.+34     	; 0x1dbe <prvUnlockQueue+0x84>
    1d9c:	f8 01       	movw	r30, r16
    1d9e:	80 85       	ldd	r24, Z+8	; 0x08
    1da0:	81 11       	cpse	r24, r1
    1da2:	05 c0       	rjmp	.+10     	; 0x1dae <prvUnlockQueue+0x74>
    1da4:	0c c0       	rjmp	.+24     	; 0x1dbe <prvUnlockQueue+0x84>
    1da6:	78 01       	movw	r14, r16
    1da8:	f8 e0       	ldi	r31, 0x08	; 8
    1daa:	ef 0e       	add	r14, r31
    1dac:	f1 1c       	adc	r15, r1
    1dae:	c7 01       	movw	r24, r14
    1db0:	0e 94 06 19 	call	0x320c	; 0x320c <xTaskRemoveFromEventList>
    1db4:	81 11       	cpse	r24, r1
    1db6:	0e 94 f8 19 	call	0x33f0	; 0x33f0 <vTaskMissedYield>
    1dba:	c1 50       	subi	r28, 0x01	; 1
    1dbc:	79 f7       	brne	.-34     	; 0x1d9c <prvUnlockQueue+0x62>
    1dbe:	8f ef       	ldi	r24, 0xFF	; 255
    1dc0:	f8 01       	movw	r30, r16
    1dc2:	81 a3       	std	Z+33, r24	; 0x21
    1dc4:	0f 90       	pop	r0
    1dc6:	0f be       	out	0x3f, r0	; 63
    1dc8:	cf 91       	pop	r28
    1dca:	1f 91       	pop	r17
    1dcc:	0f 91       	pop	r16
    1dce:	ff 90       	pop	r15
    1dd0:	ef 90       	pop	r14
    1dd2:	08 95       	ret

00001dd4 <xQueueGenericReset>:
    1dd4:	cf 93       	push	r28
    1dd6:	df 93       	push	r29
    1dd8:	ec 01       	movw	r28, r24
    1dda:	0f b6       	in	r0, 0x3f	; 63
    1ddc:	f8 94       	cli
    1dde:	0f 92       	push	r0
    1de0:	e8 81       	ld	r30, Y
    1de2:	f9 81       	ldd	r31, Y+1	; 0x01
    1de4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1de6:	28 a1       	ldd	r18, Y+32	; 0x20
    1de8:	90 e0       	ldi	r25, 0x00	; 0
    1dea:	30 e0       	ldi	r19, 0x00	; 0
    1dec:	82 9f       	mul	r24, r18
    1dee:	a0 01       	movw	r20, r0
    1df0:	83 9f       	mul	r24, r19
    1df2:	50 0d       	add	r21, r0
    1df4:	92 9f       	mul	r25, r18
    1df6:	50 0d       	add	r21, r0
    1df8:	11 24       	eor	r1, r1
    1dfa:	4e 0f       	add	r20, r30
    1dfc:	5f 1f       	adc	r21, r31
    1dfe:	5d 83       	std	Y+5, r21	; 0x05
    1e00:	4c 83       	std	Y+4, r20	; 0x04
    1e02:	1e 8e       	std	Y+30, r1	; 0x1e
    1e04:	fb 83       	std	Y+3, r31	; 0x03
    1e06:	ea 83       	std	Y+2, r30	; 0x02
    1e08:	01 97       	sbiw	r24, 0x01	; 1
    1e0a:	82 9f       	mul	r24, r18
    1e0c:	a0 01       	movw	r20, r0
    1e0e:	83 9f       	mul	r24, r19
    1e10:	50 0d       	add	r21, r0
    1e12:	92 9f       	mul	r25, r18
    1e14:	50 0d       	add	r21, r0
    1e16:	11 24       	eor	r1, r1
    1e18:	cf 01       	movw	r24, r30
    1e1a:	84 0f       	add	r24, r20
    1e1c:	95 1f       	adc	r25, r21
    1e1e:	9f 83       	std	Y+7, r25	; 0x07
    1e20:	8e 83       	std	Y+6, r24	; 0x06
    1e22:	8f ef       	ldi	r24, 0xFF	; 255
    1e24:	89 a3       	std	Y+33, r24	; 0x21
    1e26:	8a a3       	std	Y+34, r24	; 0x22
    1e28:	61 11       	cpse	r22, r1
    1e2a:	0b c0       	rjmp	.+22     	; 0x1e42 <xQueueGenericReset+0x6e>
    1e2c:	88 85       	ldd	r24, Y+8	; 0x08
    1e2e:	88 23       	and	r24, r24
    1e30:	71 f0       	breq	.+28     	; 0x1e4e <xQueueGenericReset+0x7a>
    1e32:	ce 01       	movw	r24, r28
    1e34:	08 96       	adiw	r24, 0x08	; 8
    1e36:	0e 94 06 19 	call	0x320c	; 0x320c <xTaskRemoveFromEventList>
    1e3a:	88 23       	and	r24, r24
    1e3c:	41 f0       	breq	.+16     	; 0x1e4e <xQueueGenericReset+0x7a>
    1e3e:	31 de       	rcall	.-926    	; 0x1aa2 <vPortYield>
    1e40:	06 c0       	rjmp	.+12     	; 0x1e4e <xQueueGenericReset+0x7a>
    1e42:	ce 01       	movw	r24, r28
    1e44:	08 96       	adiw	r24, 0x08	; 8
    1e46:	e5 dc       	rcall	.-1590   	; 0x1812 <vListInitialise>
    1e48:	ce 01       	movw	r24, r28
    1e4a:	43 96       	adiw	r24, 0x13	; 19
    1e4c:	e2 dc       	rcall	.-1596   	; 0x1812 <vListInitialise>
    1e4e:	0f 90       	pop	r0
    1e50:	0f be       	out	0x3f, r0	; 63
    1e52:	81 e0       	ldi	r24, 0x01	; 1
    1e54:	df 91       	pop	r29
    1e56:	cf 91       	pop	r28
    1e58:	08 95       	ret

00001e5a <xQueueGenericCreate>:
    1e5a:	ff 92       	push	r15
    1e5c:	0f 93       	push	r16
    1e5e:	1f 93       	push	r17
    1e60:	cf 93       	push	r28
    1e62:	df 93       	push	r29
    1e64:	08 2f       	mov	r16, r24
    1e66:	16 2f       	mov	r17, r22
    1e68:	f4 2e       	mov	r15, r20
    1e6a:	66 23       	and	r22, r22
    1e6c:	b9 f0       	breq	.+46     	; 0x1e9c <xQueueGenericCreate+0x42>
    1e6e:	86 9f       	mul	r24, r22
    1e70:	c0 01       	movw	r24, r0
    1e72:	11 24       	eor	r1, r1
    1e74:	85 96       	adiw	r24, 0x25	; 37
    1e76:	e3 db       	rcall	.-2106   	; 0x163e <pvPortMalloc>
    1e78:	ec 01       	movw	r28, r24
    1e7a:	00 97       	sbiw	r24, 0x00	; 0
    1e7c:	41 f4       	brne	.+16     	; 0x1e8e <xQueueGenericCreate+0x34>
    1e7e:	14 c0       	rjmp	.+40     	; 0x1ea8 <xQueueGenericCreate+0x4e>
    1e80:	0f 8f       	std	Y+31, r16	; 0x1f
    1e82:	18 a3       	std	Y+32, r17	; 0x20
    1e84:	61 e0       	ldi	r22, 0x01	; 1
    1e86:	ce 01       	movw	r24, r28
    1e88:	a5 df       	rcall	.-182    	; 0x1dd4 <xQueueGenericReset>
    1e8a:	fc a2       	std	Y+36, r15	; 0x24
    1e8c:	0d c0       	rjmp	.+26     	; 0x1ea8 <xQueueGenericCreate+0x4e>
    1e8e:	85 96       	adiw	r24, 0x25	; 37
    1e90:	99 83       	std	Y+1, r25	; 0x01
    1e92:	88 83       	st	Y, r24
    1e94:	f5 cf       	rjmp	.-22     	; 0x1e80 <xQueueGenericCreate+0x26>
    1e96:	d9 83       	std	Y+1, r29	; 0x01
    1e98:	c8 83       	st	Y, r28
    1e9a:	f2 cf       	rjmp	.-28     	; 0x1e80 <xQueueGenericCreate+0x26>
    1e9c:	85 e2       	ldi	r24, 0x25	; 37
    1e9e:	90 e0       	ldi	r25, 0x00	; 0
    1ea0:	ce db       	rcall	.-2148   	; 0x163e <pvPortMalloc>
    1ea2:	ec 01       	movw	r28, r24
    1ea4:	89 2b       	or	r24, r25
    1ea6:	b9 f7       	brne	.-18     	; 0x1e96 <xQueueGenericCreate+0x3c>
    1ea8:	ce 01       	movw	r24, r28
    1eaa:	df 91       	pop	r29
    1eac:	cf 91       	pop	r28
    1eae:	1f 91       	pop	r17
    1eb0:	0f 91       	pop	r16
    1eb2:	ff 90       	pop	r15
    1eb4:	08 95       	ret

00001eb6 <xQueueGenericSend>:
    1eb6:	9f 92       	push	r9
    1eb8:	af 92       	push	r10
    1eba:	bf 92       	push	r11
    1ebc:	cf 92       	push	r12
    1ebe:	df 92       	push	r13
    1ec0:	ef 92       	push	r14
    1ec2:	ff 92       	push	r15
    1ec4:	0f 93       	push	r16
    1ec6:	1f 93       	push	r17
    1ec8:	cf 93       	push	r28
    1eca:	df 93       	push	r29
    1ecc:	cd b7       	in	r28, 0x3d	; 61
    1ece:	de b7       	in	r29, 0x3e	; 62
    1ed0:	29 97       	sbiw	r28, 0x09	; 9
    1ed2:	0f b6       	in	r0, 0x3f	; 63
    1ed4:	f8 94       	cli
    1ed6:	de bf       	out	0x3e, r29	; 62
    1ed8:	0f be       	out	0x3f, r0	; 63
    1eda:	cd bf       	out	0x3d, r28	; 61
    1edc:	7c 01       	movw	r14, r24
    1ede:	5b 01       	movw	r10, r22
    1ee0:	2e 83       	std	Y+6, r18	; 0x06
    1ee2:	3f 83       	std	Y+7, r19	; 0x07
    1ee4:	48 87       	std	Y+8, r20	; 0x08
    1ee6:	59 87       	std	Y+9, r21	; 0x09
    1ee8:	10 e0       	ldi	r17, 0x00	; 0
    1eea:	99 24       	eor	r9, r9
    1eec:	93 94       	inc	r9
    1eee:	6c 01       	movw	r12, r24
    1ef0:	88 e0       	ldi	r24, 0x08	; 8
    1ef2:	c8 0e       	add	r12, r24
    1ef4:	d1 1c       	adc	r13, r1
    1ef6:	0f b6       	in	r0, 0x3f	; 63
    1ef8:	f8 94       	cli
    1efa:	0f 92       	push	r0
    1efc:	f7 01       	movw	r30, r14
    1efe:	96 8d       	ldd	r25, Z+30	; 0x1e
    1f00:	87 8d       	ldd	r24, Z+31	; 0x1f
    1f02:	98 17       	cp	r25, r24
    1f04:	10 f0       	brcs	.+4      	; 0x1f0a <xQueueGenericSend+0x54>
    1f06:	02 30       	cpi	r16, 0x02	; 2
    1f08:	b1 f4       	brne	.+44     	; 0x1f36 <xQueueGenericSend+0x80>
    1f0a:	40 2f       	mov	r20, r16
    1f0c:	b5 01       	movw	r22, r10
    1f0e:	c7 01       	movw	r24, r14
    1f10:	9b de       	rcall	.-714    	; 0x1c48 <prvCopyDataToQueue>
    1f12:	f7 01       	movw	r30, r14
    1f14:	93 89       	ldd	r25, Z+19	; 0x13
    1f16:	99 23       	and	r25, r25
    1f18:	41 f0       	breq	.+16     	; 0x1f2a <xQueueGenericSend+0x74>
    1f1a:	c7 01       	movw	r24, r14
    1f1c:	43 96       	adiw	r24, 0x13	; 19
    1f1e:	0e 94 06 19 	call	0x320c	; 0x320c <xTaskRemoveFromEventList>
    1f22:	88 23       	and	r24, r24
    1f24:	21 f0       	breq	.+8      	; 0x1f2e <xQueueGenericSend+0x78>
    1f26:	bd dd       	rcall	.-1158   	; 0x1aa2 <vPortYield>
    1f28:	02 c0       	rjmp	.+4      	; 0x1f2e <xQueueGenericSend+0x78>
    1f2a:	81 11       	cpse	r24, r1
    1f2c:	ba dd       	rcall	.-1164   	; 0x1aa2 <vPortYield>
    1f2e:	0f 90       	pop	r0
    1f30:	0f be       	out	0x3f, r0	; 63
    1f32:	81 e0       	ldi	r24, 0x01	; 1
    1f34:	4e c0       	rjmp	.+156    	; 0x1fd2 <xQueueGenericSend+0x11c>
    1f36:	8e 81       	ldd	r24, Y+6	; 0x06
    1f38:	9f 81       	ldd	r25, Y+7	; 0x07
    1f3a:	a8 85       	ldd	r26, Y+8	; 0x08
    1f3c:	b9 85       	ldd	r27, Y+9	; 0x09
    1f3e:	89 2b       	or	r24, r25
    1f40:	8a 2b       	or	r24, r26
    1f42:	8b 2b       	or	r24, r27
    1f44:	21 f4       	brne	.+8      	; 0x1f4e <xQueueGenericSend+0x98>
    1f46:	0f 90       	pop	r0
    1f48:	0f be       	out	0x3f, r0	; 63
    1f4a:	80 e0       	ldi	r24, 0x00	; 0
    1f4c:	42 c0       	rjmp	.+132    	; 0x1fd2 <xQueueGenericSend+0x11c>
    1f4e:	11 11       	cpse	r17, r1
    1f50:	05 c0       	rjmp	.+10     	; 0x1f5c <xQueueGenericSend+0xa6>
    1f52:	ce 01       	movw	r24, r28
    1f54:	01 96       	adiw	r24, 0x01	; 1
    1f56:	0e 94 92 19 	call	0x3324	; 0x3324 <vTaskInternalSetTimeOutState>
    1f5a:	19 2d       	mov	r17, r9
    1f5c:	0f 90       	pop	r0
    1f5e:	0f be       	out	0x3f, r0	; 63
    1f60:	fd d6       	rcall	.+3578   	; 0x2d5c <vTaskSuspendAll>
    1f62:	0f b6       	in	r0, 0x3f	; 63
    1f64:	f8 94       	cli
    1f66:	0f 92       	push	r0
    1f68:	f7 01       	movw	r30, r14
    1f6a:	81 a1       	ldd	r24, Z+33	; 0x21
    1f6c:	8f 3f       	cpi	r24, 0xFF	; 255
    1f6e:	09 f4       	brne	.+2      	; 0x1f72 <xQueueGenericSend+0xbc>
    1f70:	11 a2       	std	Z+33, r1	; 0x21
    1f72:	f7 01       	movw	r30, r14
    1f74:	82 a1       	ldd	r24, Z+34	; 0x22
    1f76:	8f 3f       	cpi	r24, 0xFF	; 255
    1f78:	09 f4       	brne	.+2      	; 0x1f7c <xQueueGenericSend+0xc6>
    1f7a:	12 a2       	std	Z+34, r1	; 0x22
    1f7c:	0f 90       	pop	r0
    1f7e:	0f be       	out	0x3f, r0	; 63
    1f80:	be 01       	movw	r22, r28
    1f82:	6a 5f       	subi	r22, 0xFA	; 250
    1f84:	7f 4f       	sbci	r23, 0xFF	; 255
    1f86:	ce 01       	movw	r24, r28
    1f88:	01 96       	adiw	r24, 0x01	; 1
    1f8a:	0e 94 a3 19 	call	0x3346	; 0x3346 <xTaskCheckForTimeOut>
    1f8e:	81 11       	cpse	r24, r1
    1f90:	1c c0       	rjmp	.+56     	; 0x1fca <xQueueGenericSend+0x114>
    1f92:	0f b6       	in	r0, 0x3f	; 63
    1f94:	f8 94       	cli
    1f96:	0f 92       	push	r0
    1f98:	f7 01       	movw	r30, r14
    1f9a:	96 8d       	ldd	r25, Z+30	; 0x1e
    1f9c:	87 8d       	ldd	r24, Z+31	; 0x1f
    1f9e:	0f 90       	pop	r0
    1fa0:	0f be       	out	0x3f, r0	; 63
    1fa2:	98 13       	cpse	r25, r24
    1fa4:	0e c0       	rjmp	.+28     	; 0x1fc2 <xQueueGenericSend+0x10c>
    1fa6:	4e 81       	ldd	r20, Y+6	; 0x06
    1fa8:	5f 81       	ldd	r21, Y+7	; 0x07
    1faa:	68 85       	ldd	r22, Y+8	; 0x08
    1fac:	79 85       	ldd	r23, Y+9	; 0x09
    1fae:	c6 01       	movw	r24, r12
    1fb0:	0e 94 ab 18 	call	0x3156	; 0x3156 <vTaskPlaceOnEventList>
    1fb4:	c7 01       	movw	r24, r14
    1fb6:	c1 de       	rcall	.-638    	; 0x1d3a <prvUnlockQueue>
    1fb8:	ba d7       	rcall	.+3956   	; 0x2f2e <xTaskResumeAll>
    1fba:	81 11       	cpse	r24, r1
    1fbc:	9c cf       	rjmp	.-200    	; 0x1ef6 <xQueueGenericSend+0x40>
    1fbe:	71 dd       	rcall	.-1310   	; 0x1aa2 <vPortYield>
    1fc0:	9a cf       	rjmp	.-204    	; 0x1ef6 <xQueueGenericSend+0x40>
    1fc2:	c7 01       	movw	r24, r14
    1fc4:	ba de       	rcall	.-652    	; 0x1d3a <prvUnlockQueue>
    1fc6:	b3 d7       	rcall	.+3942   	; 0x2f2e <xTaskResumeAll>
    1fc8:	96 cf       	rjmp	.-212    	; 0x1ef6 <xQueueGenericSend+0x40>
    1fca:	c7 01       	movw	r24, r14
    1fcc:	b6 de       	rcall	.-660    	; 0x1d3a <prvUnlockQueue>
    1fce:	af d7       	rcall	.+3934   	; 0x2f2e <xTaskResumeAll>
    1fd0:	80 e0       	ldi	r24, 0x00	; 0
    1fd2:	29 96       	adiw	r28, 0x09	; 9
    1fd4:	0f b6       	in	r0, 0x3f	; 63
    1fd6:	f8 94       	cli
    1fd8:	de bf       	out	0x3e, r29	; 62
    1fda:	0f be       	out	0x3f, r0	; 63
    1fdc:	cd bf       	out	0x3d, r28	; 61
    1fde:	df 91       	pop	r29
    1fe0:	cf 91       	pop	r28
    1fe2:	1f 91       	pop	r17
    1fe4:	0f 91       	pop	r16
    1fe6:	ff 90       	pop	r15
    1fe8:	ef 90       	pop	r14
    1fea:	df 90       	pop	r13
    1fec:	cf 90       	pop	r12
    1fee:	bf 90       	pop	r11
    1ff0:	af 90       	pop	r10
    1ff2:	9f 90       	pop	r9
    1ff4:	08 95       	ret

00001ff6 <xQueueCreateMutex>:
    1ff6:	0f 93       	push	r16
    1ff8:	cf 93       	push	r28
    1ffa:	df 93       	push	r29
    1ffc:	48 2f       	mov	r20, r24
    1ffe:	60 e0       	ldi	r22, 0x00	; 0
    2000:	81 e0       	ldi	r24, 0x01	; 1
    2002:	2b df       	rcall	.-426    	; 0x1e5a <xQueueGenericCreate>
    2004:	ec 01       	movw	r28, r24
    2006:	00 97       	sbiw	r24, 0x00	; 0
    2008:	61 f0       	breq	.+24     	; 0x2022 <xQueueCreateMutex+0x2c>
    200a:	1d 82       	std	Y+5, r1	; 0x05
    200c:	1c 82       	std	Y+4, r1	; 0x04
    200e:	19 82       	std	Y+1, r1	; 0x01
    2010:	18 82       	st	Y, r1
    2012:	1e 82       	std	Y+6, r1	; 0x06
    2014:	00 e0       	ldi	r16, 0x00	; 0
    2016:	20 e0       	ldi	r18, 0x00	; 0
    2018:	30 e0       	ldi	r19, 0x00	; 0
    201a:	a9 01       	movw	r20, r18
    201c:	60 e0       	ldi	r22, 0x00	; 0
    201e:	70 e0       	ldi	r23, 0x00	; 0
    2020:	4a df       	rcall	.-364    	; 0x1eb6 <xQueueGenericSend>
    2022:	ce 01       	movw	r24, r28
    2024:	df 91       	pop	r29
    2026:	cf 91       	pop	r28
    2028:	0f 91       	pop	r16
    202a:	08 95       	ret

0000202c <xQueueGenericSendFromISR>:
    202c:	ef 92       	push	r14
    202e:	ff 92       	push	r15
    2030:	0f 93       	push	r16
    2032:	1f 93       	push	r17
    2034:	cf 93       	push	r28
    2036:	df 93       	push	r29
    2038:	8a 01       	movw	r16, r20
    203a:	fc 01       	movw	r30, r24
    203c:	56 8d       	ldd	r21, Z+30	; 0x1e
    203e:	37 8d       	ldd	r19, Z+31	; 0x1f
    2040:	53 17       	cp	r21, r19
    2042:	10 f0       	brcs	.+4      	; 0x2048 <xQueueGenericSendFromISR+0x1c>
    2044:	22 30       	cpi	r18, 0x02	; 2
    2046:	e9 f4       	brne	.+58     	; 0x2082 <xQueueGenericSendFromISR+0x56>
    2048:	42 2f       	mov	r20, r18
    204a:	78 01       	movw	r14, r16
    204c:	ec 01       	movw	r28, r24
    204e:	1a a1       	ldd	r17, Y+34	; 0x22
    2050:	fb dd       	rcall	.-1034   	; 0x1c48 <prvCopyDataToQueue>
    2052:	1f 3f       	cpi	r17, 0xFF	; 255
    2054:	81 f4       	brne	.+32     	; 0x2076 <xQueueGenericSendFromISR+0x4a>
    2056:	8b 89       	ldd	r24, Y+19	; 0x13
    2058:	88 23       	and	r24, r24
    205a:	a9 f0       	breq	.+42     	; 0x2086 <xQueueGenericSendFromISR+0x5a>
    205c:	ce 01       	movw	r24, r28
    205e:	43 96       	adiw	r24, 0x13	; 19
    2060:	0e 94 06 19 	call	0x320c	; 0x320c <xTaskRemoveFromEventList>
    2064:	88 23       	and	r24, r24
    2066:	89 f0       	breq	.+34     	; 0x208a <xQueueGenericSendFromISR+0x5e>
    2068:	e1 14       	cp	r14, r1
    206a:	f1 04       	cpc	r15, r1
    206c:	81 f0       	breq	.+32     	; 0x208e <xQueueGenericSendFromISR+0x62>
    206e:	81 e0       	ldi	r24, 0x01	; 1
    2070:	f7 01       	movw	r30, r14
    2072:	80 83       	st	Z, r24
    2074:	0d c0       	rjmp	.+26     	; 0x2090 <xQueueGenericSendFromISR+0x64>
    2076:	ff 24       	eor	r15, r15
    2078:	f3 94       	inc	r15
    207a:	f1 0e       	add	r15, r17
    207c:	fa a2       	std	Y+34, r15	; 0x22
    207e:	81 e0       	ldi	r24, 0x01	; 1
    2080:	07 c0       	rjmp	.+14     	; 0x2090 <xQueueGenericSendFromISR+0x64>
    2082:	80 e0       	ldi	r24, 0x00	; 0
    2084:	05 c0       	rjmp	.+10     	; 0x2090 <xQueueGenericSendFromISR+0x64>
    2086:	81 e0       	ldi	r24, 0x01	; 1
    2088:	03 c0       	rjmp	.+6      	; 0x2090 <xQueueGenericSendFromISR+0x64>
    208a:	81 e0       	ldi	r24, 0x01	; 1
    208c:	01 c0       	rjmp	.+2      	; 0x2090 <xQueueGenericSendFromISR+0x64>
    208e:	81 e0       	ldi	r24, 0x01	; 1
    2090:	df 91       	pop	r29
    2092:	cf 91       	pop	r28
    2094:	1f 91       	pop	r17
    2096:	0f 91       	pop	r16
    2098:	ff 90       	pop	r15
    209a:	ef 90       	pop	r14
    209c:	08 95       	ret

0000209e <xQueueReceive>:
    209e:	9f 92       	push	r9
    20a0:	af 92       	push	r10
    20a2:	bf 92       	push	r11
    20a4:	cf 92       	push	r12
    20a6:	df 92       	push	r13
    20a8:	ef 92       	push	r14
    20aa:	ff 92       	push	r15
    20ac:	0f 93       	push	r16
    20ae:	1f 93       	push	r17
    20b0:	cf 93       	push	r28
    20b2:	df 93       	push	r29
    20b4:	cd b7       	in	r28, 0x3d	; 61
    20b6:	de b7       	in	r29, 0x3e	; 62
    20b8:	29 97       	sbiw	r28, 0x09	; 9
    20ba:	0f b6       	in	r0, 0x3f	; 63
    20bc:	f8 94       	cli
    20be:	de bf       	out	0x3e, r29	; 62
    20c0:	0f be       	out	0x3f, r0	; 63
    20c2:	cd bf       	out	0x3d, r28	; 61
    20c4:	8c 01       	movw	r16, r24
    20c6:	5b 01       	movw	r10, r22
    20c8:	2e 83       	std	Y+6, r18	; 0x06
    20ca:	3f 83       	std	Y+7, r19	; 0x07
    20cc:	48 87       	std	Y+8, r20	; 0x08
    20ce:	59 87       	std	Y+9, r21	; 0x09
    20d0:	e1 2c       	mov	r14, r1
    20d2:	99 24       	eor	r9, r9
    20d4:	93 94       	inc	r9
    20d6:	6c 01       	movw	r12, r24
    20d8:	83 e1       	ldi	r24, 0x13	; 19
    20da:	c8 0e       	add	r12, r24
    20dc:	d1 1c       	adc	r13, r1
    20de:	0f b6       	in	r0, 0x3f	; 63
    20e0:	f8 94       	cli
    20e2:	0f 92       	push	r0
    20e4:	f8 01       	movw	r30, r16
    20e6:	f6 8c       	ldd	r15, Z+30	; 0x1e
    20e8:	ff 20       	and	r15, r15
    20ea:	99 f0       	breq	.+38     	; 0x2112 <xQueueReceive+0x74>
    20ec:	b5 01       	movw	r22, r10
    20ee:	c8 01       	movw	r24, r16
    20f0:	0a de       	rcall	.-1004   	; 0x1d06 <prvCopyDataFromQueue>
    20f2:	fa 94       	dec	r15
    20f4:	f8 01       	movw	r30, r16
    20f6:	f6 8e       	std	Z+30, r15	; 0x1e
    20f8:	80 85       	ldd	r24, Z+8	; 0x08
    20fa:	88 23       	and	r24, r24
    20fc:	31 f0       	breq	.+12     	; 0x210a <xQueueReceive+0x6c>
    20fe:	c8 01       	movw	r24, r16
    2100:	08 96       	adiw	r24, 0x08	; 8
    2102:	0e 94 06 19 	call	0x320c	; 0x320c <xTaskRemoveFromEventList>
    2106:	81 11       	cpse	r24, r1
    2108:	cc dc       	rcall	.-1640   	; 0x1aa2 <vPortYield>
    210a:	0f 90       	pop	r0
    210c:	0f be       	out	0x3f, r0	; 63
    210e:	81 e0       	ldi	r24, 0x01	; 1
    2110:	4c c0       	rjmp	.+152    	; 0x21aa <xQueueReceive+0x10c>
    2112:	8e 81       	ldd	r24, Y+6	; 0x06
    2114:	9f 81       	ldd	r25, Y+7	; 0x07
    2116:	a8 85       	ldd	r26, Y+8	; 0x08
    2118:	b9 85       	ldd	r27, Y+9	; 0x09
    211a:	89 2b       	or	r24, r25
    211c:	8a 2b       	or	r24, r26
    211e:	8b 2b       	or	r24, r27
    2120:	21 f4       	brne	.+8      	; 0x212a <xQueueReceive+0x8c>
    2122:	0f 90       	pop	r0
    2124:	0f be       	out	0x3f, r0	; 63
    2126:	80 e0       	ldi	r24, 0x00	; 0
    2128:	40 c0       	rjmp	.+128    	; 0x21aa <xQueueReceive+0x10c>
    212a:	e1 10       	cpse	r14, r1
    212c:	05 c0       	rjmp	.+10     	; 0x2138 <xQueueReceive+0x9a>
    212e:	ce 01       	movw	r24, r28
    2130:	01 96       	adiw	r24, 0x01	; 1
    2132:	0e 94 92 19 	call	0x3324	; 0x3324 <vTaskInternalSetTimeOutState>
    2136:	e9 2c       	mov	r14, r9
    2138:	0f 90       	pop	r0
    213a:	0f be       	out	0x3f, r0	; 63
    213c:	0f d6       	rcall	.+3102   	; 0x2d5c <vTaskSuspendAll>
    213e:	0f b6       	in	r0, 0x3f	; 63
    2140:	f8 94       	cli
    2142:	0f 92       	push	r0
    2144:	f8 01       	movw	r30, r16
    2146:	81 a1       	ldd	r24, Z+33	; 0x21
    2148:	8f 3f       	cpi	r24, 0xFF	; 255
    214a:	09 f4       	brne	.+2      	; 0x214e <xQueueReceive+0xb0>
    214c:	11 a2       	std	Z+33, r1	; 0x21
    214e:	f8 01       	movw	r30, r16
    2150:	82 a1       	ldd	r24, Z+34	; 0x22
    2152:	8f 3f       	cpi	r24, 0xFF	; 255
    2154:	09 f4       	brne	.+2      	; 0x2158 <xQueueReceive+0xba>
    2156:	12 a2       	std	Z+34, r1	; 0x22
    2158:	0f 90       	pop	r0
    215a:	0f be       	out	0x3f, r0	; 63
    215c:	be 01       	movw	r22, r28
    215e:	6a 5f       	subi	r22, 0xFA	; 250
    2160:	7f 4f       	sbci	r23, 0xFF	; 255
    2162:	ce 01       	movw	r24, r28
    2164:	01 96       	adiw	r24, 0x01	; 1
    2166:	0e 94 a3 19 	call	0x3346	; 0x3346 <xTaskCheckForTimeOut>
    216a:	81 11       	cpse	r24, r1
    216c:	15 c0       	rjmp	.+42     	; 0x2198 <xQueueReceive+0xfa>
    216e:	c8 01       	movw	r24, r16
    2170:	60 dd       	rcall	.-1344   	; 0x1c32 <prvIsQueueEmpty>
    2172:	88 23       	and	r24, r24
    2174:	69 f0       	breq	.+26     	; 0x2190 <xQueueReceive+0xf2>
    2176:	4e 81       	ldd	r20, Y+6	; 0x06
    2178:	5f 81       	ldd	r21, Y+7	; 0x07
    217a:	68 85       	ldd	r22, Y+8	; 0x08
    217c:	79 85       	ldd	r23, Y+9	; 0x09
    217e:	c6 01       	movw	r24, r12
    2180:	ea d7       	rcall	.+4052   	; 0x3156 <vTaskPlaceOnEventList>
    2182:	c8 01       	movw	r24, r16
    2184:	da dd       	rcall	.-1100   	; 0x1d3a <prvUnlockQueue>
    2186:	d3 d6       	rcall	.+3494   	; 0x2f2e <xTaskResumeAll>
    2188:	81 11       	cpse	r24, r1
    218a:	a9 cf       	rjmp	.-174    	; 0x20de <xQueueReceive+0x40>
    218c:	8a dc       	rcall	.-1772   	; 0x1aa2 <vPortYield>
    218e:	a7 cf       	rjmp	.-178    	; 0x20de <xQueueReceive+0x40>
    2190:	c8 01       	movw	r24, r16
    2192:	d3 dd       	rcall	.-1114   	; 0x1d3a <prvUnlockQueue>
    2194:	cc d6       	rcall	.+3480   	; 0x2f2e <xTaskResumeAll>
    2196:	a3 cf       	rjmp	.-186    	; 0x20de <xQueueReceive+0x40>
    2198:	c8 01       	movw	r24, r16
    219a:	cf dd       	rcall	.-1122   	; 0x1d3a <prvUnlockQueue>
    219c:	c8 d6       	rcall	.+3472   	; 0x2f2e <xTaskResumeAll>
    219e:	c8 01       	movw	r24, r16
    21a0:	48 dd       	rcall	.-1392   	; 0x1c32 <prvIsQueueEmpty>
    21a2:	88 23       	and	r24, r24
    21a4:	09 f4       	brne	.+2      	; 0x21a8 <xQueueReceive+0x10a>
    21a6:	9b cf       	rjmp	.-202    	; 0x20de <xQueueReceive+0x40>
    21a8:	80 e0       	ldi	r24, 0x00	; 0
    21aa:	29 96       	adiw	r28, 0x09	; 9
    21ac:	0f b6       	in	r0, 0x3f	; 63
    21ae:	f8 94       	cli
    21b0:	de bf       	out	0x3e, r29	; 62
    21b2:	0f be       	out	0x3f, r0	; 63
    21b4:	cd bf       	out	0x3d, r28	; 61
    21b6:	df 91       	pop	r29
    21b8:	cf 91       	pop	r28
    21ba:	1f 91       	pop	r17
    21bc:	0f 91       	pop	r16
    21be:	ff 90       	pop	r15
    21c0:	ef 90       	pop	r14
    21c2:	df 90       	pop	r13
    21c4:	cf 90       	pop	r12
    21c6:	bf 90       	pop	r11
    21c8:	af 90       	pop	r10
    21ca:	9f 90       	pop	r9
    21cc:	08 95       	ret

000021ce <xQueueSemaphoreTake>:
    21ce:	bf 92       	push	r11
    21d0:	cf 92       	push	r12
    21d2:	df 92       	push	r13
    21d4:	ef 92       	push	r14
    21d6:	ff 92       	push	r15
    21d8:	0f 93       	push	r16
    21da:	1f 93       	push	r17
    21dc:	cf 93       	push	r28
    21de:	df 93       	push	r29
    21e0:	cd b7       	in	r28, 0x3d	; 61
    21e2:	de b7       	in	r29, 0x3e	; 62
    21e4:	29 97       	sbiw	r28, 0x09	; 9
    21e6:	0f b6       	in	r0, 0x3f	; 63
    21e8:	f8 94       	cli
    21ea:	de bf       	out	0x3e, r29	; 62
    21ec:	0f be       	out	0x3f, r0	; 63
    21ee:	cd bf       	out	0x3d, r28	; 61
    21f0:	8c 01       	movw	r16, r24
    21f2:	4e 83       	std	Y+6, r20	; 0x06
    21f4:	5f 83       	std	Y+7, r21	; 0x07
    21f6:	68 87       	std	Y+8, r22	; 0x08
    21f8:	79 87       	std	Y+9, r23	; 0x09
    21fa:	b1 2c       	mov	r11, r1
    21fc:	d1 2c       	mov	r13, r1
    21fe:	cc 24       	eor	r12, r12
    2200:	c3 94       	inc	r12
    2202:	7c 01       	movw	r14, r24
    2204:	83 e1       	ldi	r24, 0x13	; 19
    2206:	e8 0e       	add	r14, r24
    2208:	f1 1c       	adc	r15, r1
    220a:	0f b6       	in	r0, 0x3f	; 63
    220c:	f8 94       	cli
    220e:	0f 92       	push	r0
    2210:	d8 01       	movw	r26, r16
    2212:	5e 96       	adiw	r26, 0x1e	; 30
    2214:	8c 91       	ld	r24, X
    2216:	5e 97       	sbiw	r26, 0x1e	; 30
    2218:	88 23       	and	r24, r24
    221a:	d9 f0       	breq	.+54     	; 0x2252 <__stack+0x53>
    221c:	81 50       	subi	r24, 0x01	; 1
    221e:	5e 96       	adiw	r26, 0x1e	; 30
    2220:	8c 93       	st	X, r24
    2222:	5e 97       	sbiw	r26, 0x1e	; 30
    2224:	8d 91       	ld	r24, X+
    2226:	9c 91       	ld	r25, X
    2228:	89 2b       	or	r24, r25
    222a:	29 f4       	brne	.+10     	; 0x2236 <__stack+0x37>
    222c:	0e 94 31 1b 	call	0x3662	; 0x3662 <pvTaskIncrementMutexHeldCount>
    2230:	f8 01       	movw	r30, r16
    2232:	95 83       	std	Z+5, r25	; 0x05
    2234:	84 83       	std	Z+4, r24	; 0x04
    2236:	d8 01       	movw	r26, r16
    2238:	18 96       	adiw	r26, 0x08	; 8
    223a:	8c 91       	ld	r24, X
    223c:	88 23       	and	r24, r24
    223e:	29 f0       	breq	.+10     	; 0x224a <__stack+0x4b>
    2240:	c8 01       	movw	r24, r16
    2242:	08 96       	adiw	r24, 0x08	; 8
    2244:	e3 d7       	rcall	.+4038   	; 0x320c <xTaskRemoveFromEventList>
    2246:	81 11       	cpse	r24, r1
    2248:	2c dc       	rcall	.-1960   	; 0x1aa2 <vPortYield>
    224a:	0f 90       	pop	r0
    224c:	0f be       	out	0x3f, r0	; 63
    224e:	81 e0       	ldi	r24, 0x01	; 1
    2250:	7a c0       	rjmp	.+244    	; 0x2346 <__stack+0x147>
    2252:	8e 81       	ldd	r24, Y+6	; 0x06
    2254:	9f 81       	ldd	r25, Y+7	; 0x07
    2256:	a8 85       	ldd	r26, Y+8	; 0x08
    2258:	b9 85       	ldd	r27, Y+9	; 0x09
    225a:	89 2b       	or	r24, r25
    225c:	8a 2b       	or	r24, r26
    225e:	8b 2b       	or	r24, r27
    2260:	21 f4       	brne	.+8      	; 0x226a <__stack+0x6b>
    2262:	0f 90       	pop	r0
    2264:	0f be       	out	0x3f, r0	; 63
    2266:	80 e0       	ldi	r24, 0x00	; 0
    2268:	6e c0       	rjmp	.+220    	; 0x2346 <__stack+0x147>
    226a:	d1 10       	cpse	r13, r1
    226c:	05 c0       	rjmp	.+10     	; 0x2278 <__stack+0x79>
    226e:	ce 01       	movw	r24, r28
    2270:	01 96       	adiw	r24, 0x01	; 1
    2272:	0e 94 92 19 	call	0x3324	; 0x3324 <vTaskInternalSetTimeOutState>
    2276:	dc 2c       	mov	r13, r12
    2278:	0f 90       	pop	r0
    227a:	0f be       	out	0x3f, r0	; 63
    227c:	6f d5       	rcall	.+2782   	; 0x2d5c <vTaskSuspendAll>
    227e:	0f b6       	in	r0, 0x3f	; 63
    2280:	f8 94       	cli
    2282:	0f 92       	push	r0
    2284:	f8 01       	movw	r30, r16
    2286:	81 a1       	ldd	r24, Z+33	; 0x21
    2288:	8f 3f       	cpi	r24, 0xFF	; 255
    228a:	09 f4       	brne	.+2      	; 0x228e <__stack+0x8f>
    228c:	11 a2       	std	Z+33, r1	; 0x21
    228e:	d8 01       	movw	r26, r16
    2290:	92 96       	adiw	r26, 0x22	; 34
    2292:	8c 91       	ld	r24, X
    2294:	92 97       	sbiw	r26, 0x22	; 34
    2296:	8f 3f       	cpi	r24, 0xFF	; 255
    2298:	11 f4       	brne	.+4      	; 0x229e <__stack+0x9f>
    229a:	92 96       	adiw	r26, 0x22	; 34
    229c:	1c 92       	st	X, r1
    229e:	0f 90       	pop	r0
    22a0:	0f be       	out	0x3f, r0	; 63
    22a2:	be 01       	movw	r22, r28
    22a4:	6a 5f       	subi	r22, 0xFA	; 250
    22a6:	7f 4f       	sbci	r23, 0xFF	; 255
    22a8:	ce 01       	movw	r24, r28
    22aa:	01 96       	adiw	r24, 0x01	; 1
    22ac:	0e 94 a3 19 	call	0x3346	; 0x3346 <xTaskCheckForTimeOut>
    22b0:	81 11       	cpse	r24, r1
    22b2:	24 c0       	rjmp	.+72     	; 0x22fc <__stack+0xfd>
    22b4:	c8 01       	movw	r24, r16
    22b6:	bd dc       	rcall	.-1670   	; 0x1c32 <prvIsQueueEmpty>
    22b8:	88 23       	and	r24, r24
    22ba:	e1 f0       	breq	.+56     	; 0x22f4 <__stack+0xf5>
    22bc:	f8 01       	movw	r30, r16
    22be:	80 81       	ld	r24, Z
    22c0:	91 81       	ldd	r25, Z+1	; 0x01
    22c2:	89 2b       	or	r24, r25
    22c4:	51 f4       	brne	.+20     	; 0x22da <__stack+0xdb>
    22c6:	0f b6       	in	r0, 0x3f	; 63
    22c8:	f8 94       	cli
    22ca:	0f 92       	push	r0
    22cc:	84 81       	ldd	r24, Z+4	; 0x04
    22ce:	95 81       	ldd	r25, Z+5	; 0x05
    22d0:	0e 94 0f 1a 	call	0x341e	; 0x341e <xTaskPriorityInherit>
    22d4:	b8 2e       	mov	r11, r24
    22d6:	0f 90       	pop	r0
    22d8:	0f be       	out	0x3f, r0	; 63
    22da:	4e 81       	ldd	r20, Y+6	; 0x06
    22dc:	5f 81       	ldd	r21, Y+7	; 0x07
    22de:	68 85       	ldd	r22, Y+8	; 0x08
    22e0:	79 85       	ldd	r23, Y+9	; 0x09
    22e2:	c7 01       	movw	r24, r14
    22e4:	38 d7       	rcall	.+3696   	; 0x3156 <vTaskPlaceOnEventList>
    22e6:	c8 01       	movw	r24, r16
    22e8:	28 dd       	rcall	.-1456   	; 0x1d3a <prvUnlockQueue>
    22ea:	21 d6       	rcall	.+3138   	; 0x2f2e <xTaskResumeAll>
    22ec:	81 11       	cpse	r24, r1
    22ee:	8d cf       	rjmp	.-230    	; 0x220a <__stack+0xb>
    22f0:	d8 db       	rcall	.-2128   	; 0x1aa2 <vPortYield>
    22f2:	8b cf       	rjmp	.-234    	; 0x220a <__stack+0xb>
    22f4:	c8 01       	movw	r24, r16
    22f6:	21 dd       	rcall	.-1470   	; 0x1d3a <prvUnlockQueue>
    22f8:	1a d6       	rcall	.+3124   	; 0x2f2e <xTaskResumeAll>
    22fa:	87 cf       	rjmp	.-242    	; 0x220a <__stack+0xb>
    22fc:	c8 01       	movw	r24, r16
    22fe:	1d dd       	rcall	.-1478   	; 0x1d3a <prvUnlockQueue>
    2300:	16 d6       	rcall	.+3116   	; 0x2f2e <xTaskResumeAll>
    2302:	c8 01       	movw	r24, r16
    2304:	96 dc       	rcall	.-1748   	; 0x1c32 <prvIsQueueEmpty>
    2306:	88 23       	and	r24, r24
    2308:	09 f4       	brne	.+2      	; 0x230c <__stack+0x10d>
    230a:	7f cf       	rjmp	.-258    	; 0x220a <__stack+0xb>
    230c:	bb 20       	and	r11, r11
    230e:	d1 f0       	breq	.+52     	; 0x2344 <__stack+0x145>
    2310:	0f b6       	in	r0, 0x3f	; 63
    2312:	f8 94       	cli
    2314:	0f 92       	push	r0
    2316:	f8 01       	movw	r30, r16
    2318:	83 89       	ldd	r24, Z+19	; 0x13
    231a:	88 23       	and	r24, r24
    231c:	39 f0       	breq	.+14     	; 0x232c <__stack+0x12d>
    231e:	02 8c       	ldd	r0, Z+26	; 0x1a
    2320:	f3 8d       	ldd	r31, Z+27	; 0x1b
    2322:	e0 2d       	mov	r30, r0
    2324:	80 81       	ld	r24, Z
    2326:	64 e0       	ldi	r22, 0x04	; 4
    2328:	68 1b       	sub	r22, r24
    232a:	01 c0       	rjmp	.+2      	; 0x232e <__stack+0x12f>
    232c:	60 e0       	ldi	r22, 0x00	; 0
    232e:	d8 01       	movw	r26, r16
    2330:	14 96       	adiw	r26, 0x04	; 4
    2332:	8d 91       	ld	r24, X+
    2334:	9c 91       	ld	r25, X
    2336:	15 97       	sbiw	r26, 0x05	; 5
    2338:	0e 94 bd 1a 	call	0x357a	; 0x357a <vTaskPriorityDisinheritAfterTimeout>
    233c:	0f 90       	pop	r0
    233e:	0f be       	out	0x3f, r0	; 63
    2340:	80 e0       	ldi	r24, 0x00	; 0
    2342:	01 c0       	rjmp	.+2      	; 0x2346 <__stack+0x147>
    2344:	80 e0       	ldi	r24, 0x00	; 0
    2346:	29 96       	adiw	r28, 0x09	; 9
    2348:	0f b6       	in	r0, 0x3f	; 63
    234a:	f8 94       	cli
    234c:	de bf       	out	0x3e, r29	; 62
    234e:	0f be       	out	0x3f, r0	; 63
    2350:	cd bf       	out	0x3d, r28	; 61
    2352:	df 91       	pop	r29
    2354:	cf 91       	pop	r28
    2356:	1f 91       	pop	r17
    2358:	0f 91       	pop	r16
    235a:	ff 90       	pop	r15
    235c:	ef 90       	pop	r14
    235e:	df 90       	pop	r13
    2360:	cf 90       	pop	r12
    2362:	bf 90       	pop	r11
    2364:	08 95       	ret

00002366 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
    {
    2366:	cf 93       	push	r28
    2368:	df 93       	push	r29
    236a:	ec 01       	movw	r28, r24
        will not actually cause the task to block, just place it on a blocked
        list.  It will not block until the scheduler is unlocked - at which
        time a yield will be performed.  If an item is added to the queue while
        the queue is locked, and the calling task blocks on the queue, then the
        calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    236c:	0f b6       	in	r0, 0x3f	; 63
    236e:	f8 94       	cli
    2370:	0f 92       	push	r0
    2372:	89 a1       	ldd	r24, Y+33	; 0x21
    2374:	8f 3f       	cpi	r24, 0xFF	; 255
    2376:	09 f4       	brne	.+2      	; 0x237a <vQueueWaitForMessageRestricted+0x14>
    2378:	19 a2       	std	Y+33, r1	; 0x21
    237a:	8a a1       	ldd	r24, Y+34	; 0x22
    237c:	8f 3f       	cpi	r24, 0xFF	; 255
    237e:	09 f4       	brne	.+2      	; 0x2382 <vQueueWaitForMessageRestricted+0x1c>
    2380:	1a a2       	std	Y+34, r1	; 0x22
    2382:	0f 90       	pop	r0
    2384:	0f be       	out	0x3f, r0	; 63
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    2386:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2388:	81 11       	cpse	r24, r1
    238a:	03 c0       	rjmp	.+6      	; 0x2392 <vQueueWaitForMessageRestricted+0x2c>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    238c:	ce 01       	movw	r24, r28
    238e:	43 96       	adiw	r24, 0x13	; 19
    2390:	1d d7       	rcall	.+3642   	; 0x31cc <vTaskPlaceOnEventListRestricted>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
        prvUnlockQueue( pxQueue );
    2392:	ce 01       	movw	r24, r28
    2394:	d2 dc       	rcall	.-1628   	; 0x1d3a <prvUnlockQueue>
    }
    2396:	df 91       	pop	r29
    2398:	cf 91       	pop	r28
    239a:	08 95       	ret

0000239c <prvBytesInBuffer>:

    configASSERT( pxStreamBuffer );

    xReturn = prvBytesInBuffer( pxStreamBuffer );
    return xReturn;
}
    239c:	fc 01       	movw	r30, r24
    239e:	44 81       	ldd	r20, Z+4	; 0x04
    23a0:	55 81       	ldd	r21, Z+5	; 0x05
    23a2:	22 81       	ldd	r18, Z+2	; 0x02
    23a4:	33 81       	ldd	r19, Z+3	; 0x03
    23a6:	24 0f       	add	r18, r20
    23a8:	35 1f       	adc	r19, r21
    23aa:	80 81       	ld	r24, Z
    23ac:	91 81       	ldd	r25, Z+1	; 0x01
    23ae:	b9 01       	movw	r22, r18
    23b0:	68 1b       	sub	r22, r24
    23b2:	79 0b       	sbc	r23, r25
    23b4:	cb 01       	movw	r24, r22
    23b6:	64 17       	cp	r22, r20
    23b8:	75 07       	cpc	r23, r21
    23ba:	10 f0       	brcs	.+4      	; 0x23c0 <prvBytesInBuffer+0x24>
    23bc:	84 1b       	sub	r24, r20
    23be:	95 0b       	sbc	r25, r21
    23c0:	08 95       	ret

000023c2 <prvWriteBytesToBuffer>:
    23c2:	af 92       	push	r10
    23c4:	bf 92       	push	r11
    23c6:	cf 92       	push	r12
    23c8:	df 92       	push	r13
    23ca:	ef 92       	push	r14
    23cc:	ff 92       	push	r15
    23ce:	0f 93       	push	r16
    23d0:	1f 93       	push	r17
    23d2:	cf 93       	push	r28
    23d4:	df 93       	push	r29
    23d6:	6c 01       	movw	r12, r24
    23d8:	5b 01       	movw	r10, r22
    23da:	7a 01       	movw	r14, r20
    23dc:	fc 01       	movw	r30, r24
    23de:	c2 81       	ldd	r28, Z+2	; 0x02
    23e0:	d3 81       	ldd	r29, Z+3	; 0x03
    23e2:	04 81       	ldd	r16, Z+4	; 0x04
    23e4:	15 81       	ldd	r17, Z+5	; 0x05
    23e6:	0c 1b       	sub	r16, r28
    23e8:	1d 0b       	sbc	r17, r29
    23ea:	40 17       	cp	r20, r16
    23ec:	51 07       	cpc	r21, r17
    23ee:	08 f4       	brcc	.+2      	; 0x23f2 <prvWriteBytesToBuffer+0x30>
    23f0:	8a 01       	movw	r16, r20
    23f2:	f6 01       	movw	r30, r12
    23f4:	84 85       	ldd	r24, Z+12	; 0x0c
    23f6:	95 85       	ldd	r25, Z+13	; 0x0d
    23f8:	a8 01       	movw	r20, r16
    23fa:	b5 01       	movw	r22, r10
    23fc:	8c 0f       	add	r24, r28
    23fe:	9d 1f       	adc	r25, r29
    2400:	0e 94 01 31 	call	0x6202	; 0x6202 <memcpy>
    2404:	0e 15       	cp	r16, r14
    2406:	1f 05       	cpc	r17, r15
    2408:	58 f4       	brcc	.+22     	; 0x2420 <prvWriteBytesToBuffer+0x5e>
    240a:	a7 01       	movw	r20, r14
    240c:	40 1b       	sub	r20, r16
    240e:	51 0b       	sbc	r21, r17
    2410:	b5 01       	movw	r22, r10
    2412:	60 0f       	add	r22, r16
    2414:	71 1f       	adc	r23, r17
    2416:	f6 01       	movw	r30, r12
    2418:	84 85       	ldd	r24, Z+12	; 0x0c
    241a:	95 85       	ldd	r25, Z+13	; 0x0d
    241c:	0e 94 01 31 	call	0x6202	; 0x6202 <memcpy>
    2420:	ce 01       	movw	r24, r28
    2422:	8e 0d       	add	r24, r14
    2424:	9f 1d       	adc	r25, r15
    2426:	f6 01       	movw	r30, r12
    2428:	24 81       	ldd	r18, Z+4	; 0x04
    242a:	35 81       	ldd	r19, Z+5	; 0x05
    242c:	82 17       	cp	r24, r18
    242e:	93 07       	cpc	r25, r19
    2430:	10 f0       	brcs	.+4      	; 0x2436 <prvWriteBytesToBuffer+0x74>
    2432:	82 1b       	sub	r24, r18
    2434:	93 0b       	sbc	r25, r19
    2436:	f6 01       	movw	r30, r12
    2438:	93 83       	std	Z+3, r25	; 0x03
    243a:	82 83       	std	Z+2, r24	; 0x02
    243c:	c7 01       	movw	r24, r14
    243e:	df 91       	pop	r29
    2440:	cf 91       	pop	r28
    2442:	1f 91       	pop	r17
    2444:	0f 91       	pop	r16
    2446:	ff 90       	pop	r15
    2448:	ef 90       	pop	r14
    244a:	df 90       	pop	r13
    244c:	cf 90       	pop	r12
    244e:	bf 90       	pop	r11
    2450:	af 90       	pop	r10
    2452:	08 95       	ret

00002454 <prvWriteMessageToBuffer>:
    2454:	cf 92       	push	r12
    2456:	df 92       	push	r13
    2458:	ef 92       	push	r14
    245a:	ff 92       	push	r15
    245c:	0f 93       	push	r16
    245e:	1f 93       	push	r17
    2460:	cf 93       	push	r28
    2462:	df 93       	push	r29
    2464:	1f 92       	push	r1
    2466:	1f 92       	push	r1
    2468:	cd b7       	in	r28, 0x3d	; 61
    246a:	de b7       	in	r29, 0x3e	; 62
    246c:	5a 83       	std	Y+2, r21	; 0x02
    246e:	49 83       	std	Y+1, r20	; 0x01
    2470:	21 15       	cp	r18, r1
    2472:	31 05       	cpc	r19, r1
    2474:	c9 f0       	breq	.+50     	; 0x24a8 <prvWriteMessageToBuffer+0x54>
    2476:	6b 01       	movw	r12, r22
    2478:	7c 01       	movw	r14, r24
    247a:	fc 01       	movw	r30, r24
    247c:	86 85       	ldd	r24, Z+14	; 0x0e
    247e:	80 fd       	sbrc	r24, 0
    2480:	08 c0       	rjmp	.+16     	; 0x2492 <prvWriteMessageToBuffer+0x3e>
    2482:	ca 01       	movw	r24, r20
    2484:	24 17       	cp	r18, r20
    2486:	35 07       	cpc	r19, r21
    2488:	08 f4       	brcc	.+2      	; 0x248c <prvWriteMessageToBuffer+0x38>
    248a:	c9 01       	movw	r24, r18
    248c:	9a 83       	std	Y+2, r25	; 0x02
    248e:	89 83       	std	Y+1, r24	; 0x01
    2490:	11 c0       	rjmp	.+34     	; 0x24b4 <prvWriteMessageToBuffer+0x60>
    2492:	20 17       	cp	r18, r16
    2494:	31 07       	cpc	r19, r17
    2496:	58 f0       	brcs	.+22     	; 0x24ae <prvWriteMessageToBuffer+0x5a>
    2498:	42 e0       	ldi	r20, 0x02	; 2
    249a:	50 e0       	ldi	r21, 0x00	; 0
    249c:	be 01       	movw	r22, r28
    249e:	6f 5f       	subi	r22, 0xFF	; 255
    24a0:	7f 4f       	sbci	r23, 0xFF	; 255
    24a2:	c7 01       	movw	r24, r14
    24a4:	8e df       	rcall	.-228    	; 0x23c2 <prvWriteBytesToBuffer>
    24a6:	06 c0       	rjmp	.+12     	; 0x24b4 <prvWriteMessageToBuffer+0x60>
    24a8:	80 e0       	ldi	r24, 0x00	; 0
    24aa:	90 e0       	ldi	r25, 0x00	; 0
    24ac:	08 c0       	rjmp	.+16     	; 0x24be <prvWriteMessageToBuffer+0x6a>
    24ae:	80 e0       	ldi	r24, 0x00	; 0
    24b0:	90 e0       	ldi	r25, 0x00	; 0
    24b2:	05 c0       	rjmp	.+10     	; 0x24be <prvWriteMessageToBuffer+0x6a>
    24b4:	49 81       	ldd	r20, Y+1	; 0x01
    24b6:	5a 81       	ldd	r21, Y+2	; 0x02
    24b8:	b6 01       	movw	r22, r12
    24ba:	c7 01       	movw	r24, r14
    24bc:	82 df       	rcall	.-252    	; 0x23c2 <prvWriteBytesToBuffer>
    24be:	0f 90       	pop	r0
    24c0:	0f 90       	pop	r0
    24c2:	df 91       	pop	r29
    24c4:	cf 91       	pop	r28
    24c6:	1f 91       	pop	r17
    24c8:	0f 91       	pop	r16
    24ca:	ff 90       	pop	r15
    24cc:	ef 90       	pop	r14
    24ce:	df 90       	pop	r13
    24d0:	cf 90       	pop	r12
    24d2:	08 95       	ret

000024d4 <prvReadBytesFromBuffer>:
    24d4:	af 92       	push	r10
    24d6:	bf 92       	push	r11
    24d8:	cf 92       	push	r12
    24da:	df 92       	push	r13
    24dc:	ef 92       	push	r14
    24de:	ff 92       	push	r15
    24e0:	0f 93       	push	r16
    24e2:	1f 93       	push	r17
    24e4:	cf 93       	push	r28
    24e6:	df 93       	push	r29
    24e8:	7c 01       	movw	r14, r24
    24ea:	5b 01       	movw	r10, r22
    24ec:	e9 01       	movw	r28, r18
    24ee:	42 17       	cp	r20, r18
    24f0:	53 07       	cpc	r21, r19
    24f2:	08 f4       	brcc	.+2      	; 0x24f6 <prvReadBytesFromBuffer+0x22>
    24f4:	ea 01       	movw	r28, r20
    24f6:	20 97       	sbiw	r28, 0x00	; 0
    24f8:	79 f1       	breq	.+94     	; 0x2558 <prvReadBytesFromBuffer+0x84>
    24fa:	f7 01       	movw	r30, r14
    24fc:	00 81       	ld	r16, Z
    24fe:	11 81       	ldd	r17, Z+1	; 0x01
    2500:	c4 80       	ldd	r12, Z+4	; 0x04
    2502:	d5 80       	ldd	r13, Z+5	; 0x05
    2504:	c0 1a       	sub	r12, r16
    2506:	d1 0a       	sbc	r13, r17
    2508:	cc 15       	cp	r28, r12
    250a:	dd 05       	cpc	r29, r13
    250c:	08 f4       	brcc	.+2      	; 0x2510 <prvReadBytesFromBuffer+0x3c>
    250e:	6e 01       	movw	r12, r28
    2510:	f7 01       	movw	r30, r14
    2512:	64 85       	ldd	r22, Z+12	; 0x0c
    2514:	75 85       	ldd	r23, Z+13	; 0x0d
    2516:	60 0f       	add	r22, r16
    2518:	71 1f       	adc	r23, r17
    251a:	a6 01       	movw	r20, r12
    251c:	c5 01       	movw	r24, r10
    251e:	0e 94 01 31 	call	0x6202	; 0x6202 <memcpy>
    2522:	cc 16       	cp	r12, r28
    2524:	dd 06       	cpc	r13, r29
    2526:	58 f4       	brcc	.+22     	; 0x253e <prvReadBytesFromBuffer+0x6a>
    2528:	ae 01       	movw	r20, r28
    252a:	4c 19       	sub	r20, r12
    252c:	5d 09       	sbc	r21, r13
    252e:	f7 01       	movw	r30, r14
    2530:	64 85       	ldd	r22, Z+12	; 0x0c
    2532:	75 85       	ldd	r23, Z+13	; 0x0d
    2534:	c5 01       	movw	r24, r10
    2536:	8c 0d       	add	r24, r12
    2538:	9d 1d       	adc	r25, r13
    253a:	0e 94 01 31 	call	0x6202	; 0x6202 <memcpy>
    253e:	0c 0f       	add	r16, r28
    2540:	1d 1f       	adc	r17, r29
    2542:	f7 01       	movw	r30, r14
    2544:	84 81       	ldd	r24, Z+4	; 0x04
    2546:	95 81       	ldd	r25, Z+5	; 0x05
    2548:	08 17       	cp	r16, r24
    254a:	19 07       	cpc	r17, r25
    254c:	10 f0       	brcs	.+4      	; 0x2552 <prvReadBytesFromBuffer+0x7e>
    254e:	08 1b       	sub	r16, r24
    2550:	19 0b       	sbc	r17, r25
    2552:	f7 01       	movw	r30, r14
    2554:	11 83       	std	Z+1, r17	; 0x01
    2556:	00 83       	st	Z, r16
    2558:	ce 01       	movw	r24, r28
    255a:	df 91       	pop	r29
    255c:	cf 91       	pop	r28
    255e:	1f 91       	pop	r17
    2560:	0f 91       	pop	r16
    2562:	ff 90       	pop	r15
    2564:	ef 90       	pop	r14
    2566:	df 90       	pop	r13
    2568:	cf 90       	pop	r12
    256a:	bf 90       	pop	r11
    256c:	af 90       	pop	r10
    256e:	08 95       	ret

00002570 <xStreamBufferGenericCreate>:
    2570:	ef 92       	push	r14
    2572:	ff 92       	push	r15
    2574:	1f 93       	push	r17
    2576:	cf 93       	push	r28
    2578:	df 93       	push	r29
    257a:	eb 01       	movw	r28, r22
    257c:	11 e0       	ldi	r17, 0x01	; 1
    257e:	41 30       	cpi	r20, 0x01	; 1
    2580:	09 f0       	breq	.+2      	; 0x2584 <xStreamBufferGenericCreate+0x14>
    2582:	10 e0       	ldi	r17, 0x00	; 0
    2584:	20 97       	sbiw	r28, 0x00	; 0
    2586:	11 f4       	brne	.+4      	; 0x258c <xStreamBufferGenericCreate+0x1c>
    2588:	c1 e0       	ldi	r28, 0x01	; 1
    258a:	d0 e0       	ldi	r29, 0x00	; 0
    258c:	7c 01       	movw	r14, r24
    258e:	2f ef       	ldi	r18, 0xFF	; 255
    2590:	e2 1a       	sub	r14, r18
    2592:	f2 0a       	sbc	r15, r18
    2594:	41 96       	adiw	r24, 0x11	; 17
    2596:	53 d8       	rcall	.-3930   	; 0x163e <pvPortMalloc>
    2598:	00 97       	sbiw	r24, 0x00	; 0
    259a:	81 f0       	breq	.+32     	; 0x25bc <xStreamBufferGenericCreate+0x4c>
    259c:	20 e1       	ldi	r18, 0x10	; 16
    259e:	fc 01       	movw	r30, r24
    25a0:	11 92       	st	Z+, r1
    25a2:	2a 95       	dec	r18
    25a4:	e9 f7       	brne	.-6      	; 0x25a0 <xStreamBufferGenericCreate+0x30>
    25a6:	9c 01       	movw	r18, r24
    25a8:	20 5f       	subi	r18, 0xF0	; 240
    25aa:	3f 4f       	sbci	r19, 0xFF	; 255
    25ac:	fc 01       	movw	r30, r24
    25ae:	35 87       	std	Z+13, r19	; 0x0d
    25b0:	24 87       	std	Z+12, r18	; 0x0c
    25b2:	f5 82       	std	Z+5, r15	; 0x05
    25b4:	e4 82       	std	Z+4, r14	; 0x04
    25b6:	d7 83       	std	Z+7, r29	; 0x07
    25b8:	c6 83       	std	Z+6, r28	; 0x06
    25ba:	16 87       	std	Z+14, r17	; 0x0e
    25bc:	df 91       	pop	r29
    25be:	cf 91       	pop	r28
    25c0:	1f 91       	pop	r17
    25c2:	ff 90       	pop	r15
    25c4:	ef 90       	pop	r14
    25c6:	08 95       	ret

000025c8 <xStreamBufferReset>:
    25c8:	cf 93       	push	r28
    25ca:	df 93       	push	r29
    25cc:	fc 01       	movw	r30, r24
    25ce:	27 85       	ldd	r18, Z+15	; 0x0f
    25d0:	0f b6       	in	r0, 0x3f	; 63
    25d2:	f8 94       	cli
    25d4:	0f 92       	push	r0
    25d6:	80 85       	ldd	r24, Z+8	; 0x08
    25d8:	91 85       	ldd	r25, Z+9	; 0x09
    25da:	89 2b       	or	r24, r25
    25dc:	d1 f4       	brne	.+52     	; 0x2612 <xStreamBufferReset+0x4a>
    25de:	82 85       	ldd	r24, Z+10	; 0x0a
    25e0:	93 85       	ldd	r25, Z+11	; 0x0b
    25e2:	89 2b       	or	r24, r25
    25e4:	c1 f4       	brne	.+48     	; 0x2616 <xStreamBufferReset+0x4e>
    25e6:	86 85       	ldd	r24, Z+14	; 0x0e
    25e8:	46 81       	ldd	r20, Z+6	; 0x06
    25ea:	57 81       	ldd	r21, Z+7	; 0x07
    25ec:	64 81       	ldd	r22, Z+4	; 0x04
    25ee:	75 81       	ldd	r23, Z+5	; 0x05
    25f0:	a4 85       	ldd	r26, Z+12	; 0x0c
    25f2:	b5 85       	ldd	r27, Z+13	; 0x0d
    25f4:	90 e1       	ldi	r25, 0x10	; 16
    25f6:	ef 01       	movw	r28, r30
    25f8:	19 92       	st	Y+, r1
    25fa:	9a 95       	dec	r25
    25fc:	e9 f7       	brne	.-6      	; 0x25f8 <xStreamBufferReset+0x30>
    25fe:	b5 87       	std	Z+13, r27	; 0x0d
    2600:	a4 87       	std	Z+12, r26	; 0x0c
    2602:	75 83       	std	Z+5, r23	; 0x05
    2604:	64 83       	std	Z+4, r22	; 0x04
    2606:	57 83       	std	Z+7, r21	; 0x07
    2608:	46 83       	std	Z+6, r20	; 0x06
    260a:	86 87       	std	Z+14, r24	; 0x0e
    260c:	27 87       	std	Z+15, r18	; 0x0f
    260e:	81 e0       	ldi	r24, 0x01	; 1
    2610:	03 c0       	rjmp	.+6      	; 0x2618 <xStreamBufferReset+0x50>
    2612:	80 e0       	ldi	r24, 0x00	; 0
    2614:	01 c0       	rjmp	.+2      	; 0x2618 <xStreamBufferReset+0x50>
    2616:	80 e0       	ldi	r24, 0x00	; 0
    2618:	0f 90       	pop	r0
    261a:	0f be       	out	0x3f, r0	; 63
    261c:	df 91       	pop	r29
    261e:	cf 91       	pop	r28
    2620:	08 95       	ret

00002622 <xStreamBufferSpacesAvailable>:
    2622:	fc 01       	movw	r30, r24
    2624:	24 81       	ldd	r18, Z+4	; 0x04
    2626:	35 81       	ldd	r19, Z+5	; 0x05
    2628:	80 81       	ld	r24, Z
    262a:	91 81       	ldd	r25, Z+1	; 0x01
    262c:	42 81       	ldd	r20, Z+2	; 0x02
    262e:	53 81       	ldd	r21, Z+3	; 0x03
    2630:	82 0f       	add	r24, r18
    2632:	93 1f       	adc	r25, r19
    2634:	01 97       	sbiw	r24, 0x01	; 1
    2636:	84 1b       	sub	r24, r20
    2638:	95 0b       	sbc	r25, r21
    263a:	82 17       	cp	r24, r18
    263c:	93 07       	cpc	r25, r19
    263e:	10 f0       	brcs	.+4      	; 0x2644 <xStreamBufferSpacesAvailable+0x22>
    2640:	82 1b       	sub	r24, r18
    2642:	93 0b       	sbc	r25, r19
    2644:	08 95       	ret

00002646 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void *pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    2646:	2f 92       	push	r2
    2648:	3f 92       	push	r3
    264a:	4f 92       	push	r4
    264c:	5f 92       	push	r5
    264e:	6f 92       	push	r6
    2650:	7f 92       	push	r7
    2652:	8f 92       	push	r8
    2654:	9f 92       	push	r9
    2656:	af 92       	push	r10
    2658:	bf 92       	push	r11
    265a:	cf 92       	push	r12
    265c:	df 92       	push	r13
    265e:	ef 92       	push	r14
    2660:	ff 92       	push	r15
    2662:	0f 93       	push	r16
    2664:	1f 93       	push	r17
    2666:	cf 93       	push	r28
    2668:	df 93       	push	r29
    266a:	cd b7       	in	r28, 0x3d	; 61
    266c:	de b7       	in	r29, 0x3e	; 62
    266e:	29 97       	sbiw	r28, 0x09	; 9
    2670:	0f b6       	in	r0, 0x3f	; 63
    2672:	f8 94       	cli
    2674:	de bf       	out	0x3e, r29	; 62
    2676:	0f be       	out	0x3f, r0	; 63
    2678:	cd bf       	out	0x3d, r28	; 61
    267a:	5c 01       	movw	r10, r24
    267c:	1b 01       	movw	r2, r22
    267e:	2a 01       	movw	r4, r20
    2680:	0e 83       	std	Y+6, r16	; 0x06
    2682:	1f 83       	std	Y+7, r17	; 0x07
    2684:	28 87       	std	Y+8, r18	; 0x08
    2686:	39 87       	std	Y+9, r19	; 0x09

    /* This send function is used to write to both message buffers and stream
    buffers.  If this is a message buffer then the space needed must be
    increased by the amount of bytes needed to store the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    2688:	fc 01       	movw	r30, r24
    268a:	86 85       	ldd	r24, Z+14	; 0x0e
    268c:	80 ff       	sbrs	r24, 0
    268e:	05 c0       	rjmp	.+10     	; 0x269a <xStreamBufferSend+0x54>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    2690:	3a 01       	movw	r6, r20
    2692:	f2 e0       	ldi	r31, 0x02	; 2
    2694:	6f 0e       	add	r6, r31
    2696:	71 1c       	adc	r7, r1
    2698:	01 c0       	rjmp	.+2      	; 0x269c <xStreamBufferSend+0x56>
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReturn, xSpace = 0;
size_t xRequiredSpace = xDataLengthBytes;
    269a:	3a 01       	movw	r6, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    269c:	8e 81       	ldd	r24, Y+6	; 0x06
    269e:	9f 81       	ldd	r25, Y+7	; 0x07
    26a0:	a8 85       	ldd	r26, Y+8	; 0x08
    26a2:	b9 85       	ldd	r27, Y+9	; 0x09
    26a4:	89 2b       	or	r24, r25
    26a6:	8a 2b       	or	r24, r26
    26a8:	8b 2b       	or	r24, r27
    26aa:	09 f4       	brne	.+2      	; 0x26ae <xStreamBufferSend+0x68>
    26ac:	34 c0       	rjmp	.+104    	; 0x2716 <xStreamBufferSend+0xd0>
    {
        vTaskSetTimeOutState( &xTimeOut );
    26ae:	ce 01       	movw	r24, r28
    26b0:	01 96       	adiw	r24, 0x01	; 1
    26b2:	22 d6       	rcall	.+3140   	; 0x32f8 <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
            buffer. */
            taskENTER_CRITICAL();
    26b4:	0f b6       	in	r0, 0x3f	; 63
    26b6:	f8 94       	cli
    26b8:	0f 92       	push	r0
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    26ba:	c5 01       	movw	r24, r10
    26bc:	b2 df       	rcall	.-156    	; 0x2622 <xStreamBufferSpacesAvailable>
    26be:	4c 01       	movw	r8, r24

                if( xSpace < xRequiredSpace )
    26c0:	86 15       	cp	r24, r6
    26c2:	97 05       	cpc	r25, r7
    26c4:	18 f5       	brcc	.+70     	; 0x270c <xStreamBufferSend+0xc6>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClear( NULL );
    26c6:	80 e0       	ldi	r24, 0x00	; 0
    26c8:	90 e0       	ldi	r25, 0x00	; 0
    26ca:	0e 94 ce 1c 	call	0x399c	; 0x399c <xTaskNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    26ce:	94 d6       	rcall	.+3368   	; 0x33f8 <xTaskGetCurrentTaskHandle>
    26d0:	f5 01       	movw	r30, r10
    26d2:	93 87       	std	Z+11, r25	; 0x0b
    26d4:	82 87       	std	Z+10, r24	; 0x0a
                {
                    taskEXIT_CRITICAL();
                    break;
                }
            }
            taskEXIT_CRITICAL();
    26d6:	0f 90       	pop	r0
    26d8:	0f be       	out	0x3f, r0	; 63

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    26da:	ce 80       	ldd	r12, Y+6	; 0x06
    26dc:	df 80       	ldd	r13, Y+7	; 0x07
    26de:	e8 84       	ldd	r14, Y+8	; 0x08
    26e0:	f9 84       	ldd	r15, Y+9	; 0x09
    26e2:	00 e0       	ldi	r16, 0x00	; 0
    26e4:	10 e0       	ldi	r17, 0x00	; 0
    26e6:	20 e0       	ldi	r18, 0x00	; 0
    26e8:	30 e0       	ldi	r19, 0x00	; 0
    26ea:	a9 01       	movw	r20, r18
    26ec:	60 e0       	ldi	r22, 0x00	; 0
    26ee:	70 e0       	ldi	r23, 0x00	; 0
    26f0:	cb 01       	movw	r24, r22
    26f2:	c9 d7       	rcall	.+3986   	; 0x3686 <xTaskNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
    26f4:	f5 01       	movw	r30, r10
    26f6:	13 86       	std	Z+11, r1	; 0x0b
    26f8:	12 86       	std	Z+10, r1	; 0x0a

        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    26fa:	be 01       	movw	r22, r28
    26fc:	6a 5f       	subi	r22, 0xFA	; 250
    26fe:	7f 4f       	sbci	r23, 0xFF	; 255
    2700:	ce 01       	movw	r24, r28
    2702:	01 96       	adiw	r24, 0x01	; 1
    2704:	20 d6       	rcall	.+3136   	; 0x3346 <xTaskCheckForTimeOut>
    2706:	88 23       	and	r24, r24
    2708:	a9 f2       	breq	.-86     	; 0x26b4 <xStreamBufferSend+0x6e>
    270a:	02 c0       	rjmp	.+4      	; 0x2710 <xStreamBufferSend+0xca>
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
                }
                else
                {
                    taskEXIT_CRITICAL();
    270c:	0f 90       	pop	r0
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
    270e:	0f be       	out	0x3f, r0	; 63
    2710:	81 14       	cp	r8, r1
    2712:	91 04       	cpc	r9, r1
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    2714:	19 f4       	brne	.+6      	; 0x271c <xStreamBufferSend+0xd6>
    2716:	c5 01       	movw	r24, r10
    2718:	84 df       	rcall	.-248    	; 0x2622 <xStreamBufferSpacesAvailable>
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    271a:	4c 01       	movw	r8, r24
    271c:	83 01       	movw	r16, r6
    271e:	94 01       	movw	r18, r8
    2720:	a2 01       	movw	r20, r4
    2722:	b1 01       	movw	r22, r2
    2724:	c5 01       	movw	r24, r10
    2726:	96 de       	rcall	.-724    	; 0x2454 <prvWriteMessageToBuffer>

    if( xReturn > ( size_t ) 0 )
    2728:	7c 01       	movw	r14, r24
    272a:	89 2b       	or	r24, r25
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    272c:	e1 f0       	breq	.+56     	; 0x2766 <xStreamBufferSend+0x120>
    272e:	c5 01       	movw	r24, r10
    2730:	35 de       	rcall	.-918    	; 0x239c <prvBytesInBuffer>
    2732:	f5 01       	movw	r30, r10
    2734:	26 81       	ldd	r18, Z+6	; 0x06
    2736:	37 81       	ldd	r19, Z+7	; 0x07
    2738:	82 17       	cp	r24, r18
    273a:	93 07       	cpc	r25, r19
        {
            sbSEND_COMPLETED( pxStreamBuffer );
    273c:	a0 f0       	brcs	.+40     	; 0x2766 <xStreamBufferSend+0x120>
    273e:	0e d3       	rcall	.+1564   	; 0x2d5c <vTaskSuspendAll>
    2740:	f5 01       	movw	r30, r10
    2742:	80 85       	ldd	r24, Z+8	; 0x08
    2744:	91 85       	ldd	r25, Z+9	; 0x09
    2746:	89 2b       	or	r24, r25
    2748:	69 f0       	breq	.+26     	; 0x2764 <xStreamBufferSend+0x11e>
    274a:	80 85       	ldd	r24, Z+8	; 0x08
    274c:	91 85       	ldd	r25, Z+9	; 0x09
    274e:	00 e0       	ldi	r16, 0x00	; 0
    2750:	10 e0       	ldi	r17, 0x00	; 0
    2752:	20 e0       	ldi	r18, 0x00	; 0
    2754:	40 e0       	ldi	r20, 0x00	; 0
    2756:	50 e0       	ldi	r21, 0x00	; 0
    2758:	ba 01       	movw	r22, r20
    275a:	0e 94 cd 1b 	call	0x379a	; 0x379a <xTaskGenericNotify>
    275e:	f5 01       	movw	r30, r10
    2760:	11 86       	std	Z+9, r1	; 0x09
    2762:	10 86       	std	Z+8, r1	; 0x08
    2764:	e4 d3       	rcall	.+1992   	; 0x2f2e <xTaskResumeAll>
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    2766:	c7 01       	movw	r24, r14
    2768:	29 96       	adiw	r28, 0x09	; 9
    276a:	0f b6       	in	r0, 0x3f	; 63
    276c:	f8 94       	cli
    276e:	de bf       	out	0x3e, r29	; 62
    2770:	0f be       	out	0x3f, r0	; 63
    2772:	cd bf       	out	0x3d, r28	; 61
    2774:	df 91       	pop	r29
    2776:	cf 91       	pop	r28
    2778:	1f 91       	pop	r17
    277a:	0f 91       	pop	r16
    277c:	ff 90       	pop	r15
    277e:	ef 90       	pop	r14
    2780:	df 90       	pop	r13
    2782:	cf 90       	pop	r12
    2784:	bf 90       	pop	r11
    2786:	af 90       	pop	r10
    2788:	9f 90       	pop	r9
    278a:	8f 90       	pop	r8
    278c:	7f 90       	pop	r7
    278e:	6f 90       	pop	r6
    2790:	5f 90       	pop	r5
    2792:	4f 90       	pop	r4
    2794:	3f 90       	pop	r3
    2796:	2f 90       	pop	r2
    2798:	08 95       	ret

0000279a <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void *pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    279a:	af 92       	push	r10
    279c:	bf 92       	push	r11
    279e:	cf 92       	push	r12
    27a0:	df 92       	push	r13
    27a2:	ef 92       	push	r14
    27a4:	ff 92       	push	r15
    27a6:	0f 93       	push	r16
    27a8:	1f 93       	push	r17
    27aa:	cf 93       	push	r28
    27ac:	df 93       	push	r29
    27ae:	ec 01       	movw	r28, r24
    27b0:	5b 01       	movw	r10, r22
    27b2:	6a 01       	movw	r12, r20
    27b4:	79 01       	movw	r14, r18

    /* This send function is used to write to both message buffers and stream
    buffers.  If this is a message buffer then the space needed must be
    increased by the amount of bytes needed to store the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    27b6:	8e 85       	ldd	r24, Y+14	; 0x0e
    27b8:	80 ff       	sbrs	r24, 0
    27ba:	04 c0       	rjmp	.+8      	; 0x27c4 <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    27bc:	8a 01       	movw	r16, r20
    27be:	0e 5f       	subi	r16, 0xFE	; 254
    27c0:	1f 4f       	sbci	r17, 0xFF	; 255
    27c2:	01 c0       	rjmp	.+2      	; 0x27c6 <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReturn, xSpace;
size_t xRequiredSpace = xDataLengthBytes;
    27c4:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    27c6:	ce 01       	movw	r24, r28
    27c8:	2c df       	rcall	.-424    	; 0x2622 <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    27ca:	9c 01       	movw	r18, r24
    27cc:	a6 01       	movw	r20, r12
    27ce:	b5 01       	movw	r22, r10
    27d0:	ce 01       	movw	r24, r28
    27d2:	40 de       	rcall	.-896    	; 0x2454 <prvWriteMessageToBuffer>
    27d4:	6c 01       	movw	r12, r24

    if( xReturn > ( size_t ) 0 )
    27d6:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    27d8:	b9 f0       	breq	.+46     	; 0x2808 <xStreamBufferSendFromISR+0x6e>
    27da:	ce 01       	movw	r24, r28
    27dc:	df dd       	rcall	.-1090   	; 0x239c <prvBytesInBuffer>
    27de:	2e 81       	ldd	r18, Y+6	; 0x06
    27e0:	3f 81       	ldd	r19, Y+7	; 0x07
    27e2:	82 17       	cp	r24, r18
    27e4:	93 07       	cpc	r25, r19
    27e6:	80 f0       	brcs	.+32     	; 0x2808 <xStreamBufferSendFromISR+0x6e>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    27e8:	88 85       	ldd	r24, Y+8	; 0x08
    27ea:	99 85       	ldd	r25, Y+9	; 0x09
    27ec:	89 2b       	or	r24, r25
    27ee:	61 f0       	breq	.+24     	; 0x2808 <xStreamBufferSendFromISR+0x6e>
    27f0:	88 85       	ldd	r24, Y+8	; 0x08
    27f2:	99 85       	ldd	r25, Y+9	; 0x09
    27f4:	00 e0       	ldi	r16, 0x00	; 0
    27f6:	10 e0       	ldi	r17, 0x00	; 0
    27f8:	20 e0       	ldi	r18, 0x00	; 0
    27fa:	40 e0       	ldi	r20, 0x00	; 0
    27fc:	50 e0       	ldi	r21, 0x00	; 0
    27fe:	ba 01       	movw	r22, r20
    2800:	0e 94 45 1c 	call	0x388a	; 0x388a <xTaskGenericNotifyFromISR>
    2804:	19 86       	std	Y+9, r1	; 0x09
    2806:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    2808:	c6 01       	movw	r24, r12
    280a:	df 91       	pop	r29
    280c:	cf 91       	pop	r28
    280e:	1f 91       	pop	r17
    2810:	0f 91       	pop	r16
    2812:	ff 90       	pop	r15
    2814:	ef 90       	pop	r14
    2816:	df 90       	pop	r13
    2818:	cf 90       	pop	r12
    281a:	bf 90       	pop	r11
    281c:	af 90       	pop	r10
    281e:	08 95       	ret

00002820 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void *pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    2820:	4f 92       	push	r4
    2822:	5f 92       	push	r5
    2824:	6f 92       	push	r6
    2826:	7f 92       	push	r7
    2828:	8f 92       	push	r8
    282a:	9f 92       	push	r9
    282c:	af 92       	push	r10
    282e:	bf 92       	push	r11
    2830:	cf 92       	push	r12
    2832:	df 92       	push	r13
    2834:	ef 92       	push	r14
    2836:	ff 92       	push	r15
    2838:	0f 93       	push	r16
    283a:	1f 93       	push	r17
    283c:	cf 93       	push	r28
    283e:	df 93       	push	r29
    2840:	1f 92       	push	r1
    2842:	1f 92       	push	r1
    2844:	cd b7       	in	r28, 0x3d	; 61
    2846:	de b7       	in	r29, 0x3e	; 62
    2848:	5c 01       	movw	r10, r24
    284a:	2b 01       	movw	r4, r22
    284c:	3a 01       	movw	r6, r20
    284e:	68 01       	movw	r12, r16
    2850:	79 01       	movw	r14, r18
    /* This receive function is used by both message buffers, which store
    discrete messages, and stream buffers, which store a continuous stream of
    bytes.  Discrete messages include an additional
    sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    2852:	fc 01       	movw	r30, r24
    2854:	86 85       	ldd	r24, Z+14	; 0x0e
    2856:	80 fd       	sbrc	r24, 0
    2858:	03 c0       	rjmp	.+6      	; 0x2860 <xStreamBufferReceive+0x40>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    285a:	81 2c       	mov	r8, r1
    285c:	91 2c       	mov	r9, r1
    285e:	04 c0       	rjmp	.+8      	; 0x2868 <xStreamBufferReceive+0x48>
    bytes.  Discrete messages include an additional
    sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    2860:	68 94       	set
    2862:	88 24       	eor	r8, r8
    2864:	81 f8       	bld	r8, 1
    2866:	91 2c       	mov	r9, r1
    else
    {
        xBytesToStoreMessageLength = 0;
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    2868:	c1 14       	cp	r12, r1
    286a:	d1 04       	cpc	r13, r1
    286c:	e1 04       	cpc	r14, r1
    286e:	f1 04       	cpc	r15, r1
    2870:	31 f1       	breq	.+76     	; 0x28be <xStreamBufferReceive+0x9e>
    {
        /* Checking if there is data and clearing the notification state must be
        performed atomically. */
        taskENTER_CRITICAL();
    2872:	0f b6       	in	r0, 0x3f	; 63
    2874:	f8 94       	cli
    2876:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    2878:	c5 01       	movw	r24, r10
    287a:	90 dd       	rcall	.-1248   	; 0x239c <prvBytesInBuffer>
    287c:	8c 01       	movw	r16, r24
            /* If this function was invoked by a message buffer read then
            xBytesToStoreMessageLength holds the number of bytes used to hold
            the length of the next discrete message.  If this function was
            invoked by a stream buffer read then xBytesToStoreMessageLength will
            be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    287e:	88 16       	cp	r8, r24
    2880:	99 06       	cpc	r9, r25
    2882:	40 f0       	brcs	.+16     	; 0x2894 <xStreamBufferReceive+0x74>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    2884:	80 e0       	ldi	r24, 0x00	; 0
    2886:	90 e0       	ldi	r25, 0x00	; 0
    2888:	0e 94 ce 1c 	call	0x399c	; 0x399c <xTaskNotifyStateClear>

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    288c:	b5 d5       	rcall	.+2922   	; 0x33f8 <xTaskGetCurrentTaskHandle>
    288e:	f5 01       	movw	r30, r10
    2890:	91 87       	std	Z+9, r25	; 0x09
    2892:	80 87       	std	Z+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    2894:	0f 90       	pop	r0
    2896:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    2898:	80 16       	cp	r8, r16
    289a:	91 06       	cpc	r9, r17
    289c:	b0 f0       	brcs	.+44     	; 0x28ca <xStreamBufferReceive+0xaa>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    289e:	00 e0       	ldi	r16, 0x00	; 0
    28a0:	10 e0       	ldi	r17, 0x00	; 0
    28a2:	20 e0       	ldi	r18, 0x00	; 0
    28a4:	30 e0       	ldi	r19, 0x00	; 0
    28a6:	a9 01       	movw	r20, r18
    28a8:	60 e0       	ldi	r22, 0x00	; 0
    28aa:	70 e0       	ldi	r23, 0x00	; 0
    28ac:	cb 01       	movw	r24, r22
    28ae:	eb d6       	rcall	.+3542   	; 0x3686 <xTaskNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    28b0:	f5 01       	movw	r30, r10
    28b2:	11 86       	std	Z+9, r1	; 0x09

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    28b4:	10 86       	std	Z+8, r1	; 0x08
    28b6:	c5 01       	movw	r24, r10
    28b8:	71 dd       	rcall	.-1310   	; 0x239c <prvBytesInBuffer>
    28ba:	8c 01       	movw	r16, r24
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    28bc:	03 c0       	rjmp	.+6      	; 0x28c4 <xStreamBufferReceive+0xa4>
    28be:	c5 01       	movw	r24, r10
    28c0:	6d dd       	rcall	.-1318   	; 0x239c <prvBytesInBuffer>
    28c2:	8c 01       	movw	r16, r24
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
    holds the number of bytes used to store the message length) or a stream of
    bytes (where xBytesToStoreMessageLength is zero), the number of bytes
    available must be greater than xBytesToStoreMessageLength to be able to
    read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    28c4:	80 16       	cp	r8, r16
    28c6:	91 06       	cpc	r9, r17
    28c8:	b8 f5       	brcc	.+110    	; 0x2938 <xStreamBufferReceive+0x118>
                                        size_t xBytesToStoreMessageLength )
{
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

    if( xBytesToStoreMessageLength != ( size_t ) 0 )
    28ca:	81 14       	cp	r8, r1
    28cc:	91 04       	cpc	r9, r1
    28ce:	c1 f0       	breq	.+48     	; 0x2900 <xStreamBufferReceive+0xe0>
    {
        /* A discrete message is being received.  First receive the length
        of the message.  A copy of the tail is stored so the buffer can be
        returned to its prior state if the length of the message is too
        large for the provided buffer. */
        xOriginalTail = pxStreamBuffer->xTail;
    28d0:	f5 01       	movw	r30, r10
    28d2:	e0 80       	ld	r14, Z
    28d4:	f1 80       	ldd	r15, Z+1	; 0x01
        ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
    28d6:	98 01       	movw	r18, r16
    28d8:	a4 01       	movw	r20, r8
    28da:	be 01       	movw	r22, r28
    28dc:	6f 5f       	subi	r22, 0xFF	; 255
    28de:	7f 4f       	sbci	r23, 0xFF	; 255
    28e0:	c5 01       	movw	r24, r10
    28e2:	f8 dd       	rcall	.-1040   	; 0x24d4 <prvReadBytesFromBuffer>
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
    28e4:	89 81       	ldd	r24, Y+1	; 0x01
    28e6:	9a 81       	ldd	r25, Y+2	; 0x02

        /* Reduce the number of bytes available by the number of bytes just
        read out. */
        xBytesAvailable -= xBytesToStoreMessageLength;
    28e8:	08 19       	sub	r16, r8
    28ea:	19 09       	sbc	r17, r9

        /* Check there is enough space in the buffer provided by the
        user. */
        if( xNextMessageLength > xBufferLengthBytes )
    28ec:	68 16       	cp	r6, r24
    28ee:	79 06       	cpc	r7, r25
    28f0:	30 f4       	brcc	.+12     	; 0x28fe <xStreamBufferReceive+0xde>
        {
            /* The user has provided insufficient space to read the message
            so return the buffer to its previous state (so the length of
            the message is in the buffer again). */
            pxStreamBuffer->xTail = xOriginalTail;
    28f2:	f5 01       	movw	r30, r10
    28f4:	f1 82       	std	Z+1, r15	; 0x01
    28f6:	e0 82       	st	Z, r14
            xNextMessageLength = 0;
    28f8:	61 2c       	mov	r6, r1
    28fa:	71 2c       	mov	r7, r1
        of the message.  A copy of the tail is stored so the buffer can be
        returned to its prior state if the length of the message is too
        large for the provided buffer. */
        xOriginalTail = pxStreamBuffer->xTail;
        ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
    28fc:	01 c0       	rjmp	.+2      	; 0x2900 <xStreamBufferReceive+0xe0>
        message), so read as many bytes as possible. */
        xNextMessageLength = xBufferLengthBytes;
    }

    /* Read the actual data. */
    xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
    28fe:	3c 01       	movw	r6, r24
    2900:	98 01       	movw	r18, r16
    2902:	a3 01       	movw	r20, r6
    2904:	b2 01       	movw	r22, r4
    2906:	c5 01       	movw	r24, r10
    2908:	e5 dd       	rcall	.-1078   	; 0x24d4 <prvReadBytesFromBuffer>
    if( xBytesAvailable > xBytesToStoreMessageLength )
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    290a:	7c 01       	movw	r14, r24
    290c:	89 2b       	or	r24, r25
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    290e:	b1 f0       	breq	.+44     	; 0x293c <xStreamBufferReceive+0x11c>
    2910:	25 d2       	rcall	.+1098   	; 0x2d5c <vTaskSuspendAll>
    2912:	f5 01       	movw	r30, r10
    2914:	82 85       	ldd	r24, Z+10	; 0x0a
    2916:	93 85       	ldd	r25, Z+11	; 0x0b
    2918:	89 2b       	or	r24, r25
    291a:	61 f0       	breq	.+24     	; 0x2934 <xStreamBufferReceive+0x114>
    291c:	82 85       	ldd	r24, Z+10	; 0x0a
    291e:	93 85       	ldd	r25, Z+11	; 0x0b
    2920:	00 e0       	ldi	r16, 0x00	; 0
    2922:	10 e0       	ldi	r17, 0x00	; 0
    2924:	20 e0       	ldi	r18, 0x00	; 0
    2926:	40 e0       	ldi	r20, 0x00	; 0
    2928:	50 e0       	ldi	r21, 0x00	; 0
    292a:	ba 01       	movw	r22, r20
    292c:	36 d7       	rcall	.+3692   	; 0x379a <xTaskGenericNotify>
    292e:	f5 01       	movw	r30, r10
    2930:	13 86       	std	Z+11, r1	; 0x0b
    2932:	12 86       	std	Z+10, r1	; 0x0a
    2934:	fc d2       	rcall	.+1528   	; 0x2f2e <xTaskResumeAll>
    2936:	02 c0       	rjmp	.+4      	; 0x293c <xStreamBufferReceive+0x11c>
                             void *pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    2938:	e1 2c       	mov	r14, r1
    293a:	f1 2c       	mov	r15, r1
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    293c:	c7 01       	movw	r24, r14
    293e:	0f 90       	pop	r0
    2940:	0f 90       	pop	r0
    2942:	df 91       	pop	r29
    2944:	cf 91       	pop	r28
    2946:	1f 91       	pop	r17
    2948:	0f 91       	pop	r16
    294a:	ff 90       	pop	r15
    294c:	ef 90       	pop	r14
    294e:	df 90       	pop	r13
    2950:	cf 90       	pop	r12
    2952:	bf 90       	pop	r11
    2954:	af 90       	pop	r10
    2956:	9f 90       	pop	r9
    2958:	8f 90       	pop	r8
    295a:	7f 90       	pop	r7
    295c:	6f 90       	pop	r6
    295e:	5f 90       	pop	r5
    2960:	4f 90       	pop	r4
    2962:	08 95       	ret

00002964 <prvResetNextTaskUnblockTime>:
    2964:	e0 91 6f 18 	lds	r30, 0x186F	; 0x80186f <pxDelayedTaskList>
    2968:	f0 91 70 18 	lds	r31, 0x1870	; 0x801870 <pxDelayedTaskList+0x1>
    296c:	80 81       	ld	r24, Z
    296e:	81 11       	cpse	r24, r1
    2970:	0c c0       	rjmp	.+24     	; 0x298a <prvResetNextTaskUnblockTime+0x26>
    2972:	8f ef       	ldi	r24, 0xFF	; 255
    2974:	9f ef       	ldi	r25, 0xFF	; 255
    2976:	dc 01       	movw	r26, r24
    2978:	80 93 3c 18 	sts	0x183C, r24	; 0x80183c <xNextTaskUnblockTime>
    297c:	90 93 3d 18 	sts	0x183D, r25	; 0x80183d <xNextTaskUnblockTime+0x1>
    2980:	a0 93 3e 18 	sts	0x183E, r26	; 0x80183e <xNextTaskUnblockTime+0x2>
    2984:	b0 93 3f 18 	sts	0x183F, r27	; 0x80183f <xNextTaskUnblockTime+0x3>
    2988:	08 95       	ret
    298a:	e0 91 6f 18 	lds	r30, 0x186F	; 0x80186f <pxDelayedTaskList>
    298e:	f0 91 70 18 	lds	r31, 0x1870	; 0x801870 <pxDelayedTaskList+0x1>
    2992:	07 80       	ldd	r0, Z+7	; 0x07
    2994:	f0 85       	ldd	r31, Z+8	; 0x08
    2996:	e0 2d       	mov	r30, r0
    2998:	00 84       	ldd	r0, Z+8	; 0x08
    299a:	f1 85       	ldd	r31, Z+9	; 0x09
    299c:	e0 2d       	mov	r30, r0
    299e:	82 81       	ldd	r24, Z+2	; 0x02
    29a0:	93 81       	ldd	r25, Z+3	; 0x03
    29a2:	a4 81       	ldd	r26, Z+4	; 0x04
    29a4:	b5 81       	ldd	r27, Z+5	; 0x05
    29a6:	80 93 3c 18 	sts	0x183C, r24	; 0x80183c <xNextTaskUnblockTime>
    29aa:	90 93 3d 18 	sts	0x183D, r25	; 0x80183d <xNextTaskUnblockTime+0x1>
    29ae:	a0 93 3e 18 	sts	0x183E, r26	; 0x80183e <xNextTaskUnblockTime+0x2>
    29b2:	b0 93 3f 18 	sts	0x183F, r27	; 0x80183f <xNextTaskUnblockTime+0x3>
    29b6:	08 95       	ret

000029b8 <prvAddCurrentTaskToDelayedList>:
    29b8:	8f 92       	push	r8
    29ba:	9f 92       	push	r9
    29bc:	af 92       	push	r10
    29be:	bf 92       	push	r11
    29c0:	cf 92       	push	r12
    29c2:	df 92       	push	r13
    29c4:	ef 92       	push	r14
    29c6:	ff 92       	push	r15
    29c8:	cf 93       	push	r28
    29ca:	6b 01       	movw	r12, r22
    29cc:	7c 01       	movw	r14, r24
    29ce:	c4 2f       	mov	r28, r20
    29d0:	80 90 46 18 	lds	r8, 0x1846	; 0x801846 <xTickCount>
    29d4:	90 90 47 18 	lds	r9, 0x1847	; 0x801847 <xTickCount+0x1>
    29d8:	a0 90 48 18 	lds	r10, 0x1848	; 0x801848 <xTickCount+0x2>
    29dc:	b0 90 49 18 	lds	r11, 0x1849	; 0x801849 <xTickCount+0x3>
    29e0:	80 91 b3 18 	lds	r24, 0x18B3	; 0x8018b3 <pxCurrentTCB>
    29e4:	90 91 b4 18 	lds	r25, 0x18B4	; 0x8018b4 <pxCurrentTCB+0x1>
    29e8:	02 96       	adiw	r24, 0x02	; 2
    29ea:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <uxListRemove>
    29ee:	8f ef       	ldi	r24, 0xFF	; 255
    29f0:	c8 16       	cp	r12, r24
    29f2:	d8 06       	cpc	r13, r24
    29f4:	e8 06       	cpc	r14, r24
    29f6:	f8 06       	cpc	r15, r24
    29f8:	69 f4       	brne	.+26     	; 0x2a14 <prvAddCurrentTaskToDelayedList+0x5c>
    29fa:	cc 23       	and	r28, r28
    29fc:	59 f0       	breq	.+22     	; 0x2a14 <prvAddCurrentTaskToDelayedList+0x5c>
    29fe:	60 91 b3 18 	lds	r22, 0x18B3	; 0x8018b3 <pxCurrentTCB>
    2a02:	70 91 b4 18 	lds	r23, 0x18B4	; 0x8018b4 <pxCurrentTCB+0x1>
    2a06:	6e 5f       	subi	r22, 0xFE	; 254
    2a08:	7f 4f       	sbci	r23, 0xFF	; 255
    2a0a:	8b e4       	ldi	r24, 0x4B	; 75
    2a0c:	98 e1       	ldi	r25, 0x18	; 24
    2a0e:	0e 94 1e 0c 	call	0x183c	; 0x183c <vListInsertEnd>
    2a12:	3f c0       	rjmp	.+126    	; 0x2a92 <prvAddCurrentTaskToDelayedList+0xda>
    2a14:	c8 0c       	add	r12, r8
    2a16:	d9 1c       	adc	r13, r9
    2a18:	ea 1c       	adc	r14, r10
    2a1a:	fb 1c       	adc	r15, r11
    2a1c:	e0 91 b3 18 	lds	r30, 0x18B3	; 0x8018b3 <pxCurrentTCB>
    2a20:	f0 91 b4 18 	lds	r31, 0x18B4	; 0x8018b4 <pxCurrentTCB+0x1>
    2a24:	c2 82       	std	Z+2, r12	; 0x02
    2a26:	d3 82       	std	Z+3, r13	; 0x03
    2a28:	e4 82       	std	Z+4, r14	; 0x04
    2a2a:	f5 82       	std	Z+5, r15	; 0x05
    2a2c:	c8 14       	cp	r12, r8
    2a2e:	d9 04       	cpc	r13, r9
    2a30:	ea 04       	cpc	r14, r10
    2a32:	fb 04       	cpc	r15, r11
    2a34:	68 f4       	brcc	.+26     	; 0x2a50 <prvAddCurrentTaskToDelayedList+0x98>
    2a36:	60 91 b3 18 	lds	r22, 0x18B3	; 0x8018b3 <pxCurrentTCB>
    2a3a:	70 91 b4 18 	lds	r23, 0x18B4	; 0x8018b4 <pxCurrentTCB+0x1>
    2a3e:	80 91 6d 18 	lds	r24, 0x186D	; 0x80186d <pxOverflowDelayedTaskList>
    2a42:	90 91 6e 18 	lds	r25, 0x186E	; 0x80186e <pxOverflowDelayedTaskList+0x1>
    2a46:	6e 5f       	subi	r22, 0xFE	; 254
    2a48:	7f 4f       	sbci	r23, 0xFF	; 255
    2a4a:	0e 94 3f 0c 	call	0x187e	; 0x187e <vListInsert>
    2a4e:	21 c0       	rjmp	.+66     	; 0x2a92 <prvAddCurrentTaskToDelayedList+0xda>
    2a50:	60 91 b3 18 	lds	r22, 0x18B3	; 0x8018b3 <pxCurrentTCB>
    2a54:	70 91 b4 18 	lds	r23, 0x18B4	; 0x8018b4 <pxCurrentTCB+0x1>
    2a58:	80 91 6f 18 	lds	r24, 0x186F	; 0x80186f <pxDelayedTaskList>
    2a5c:	90 91 70 18 	lds	r25, 0x1870	; 0x801870 <pxDelayedTaskList+0x1>
    2a60:	6e 5f       	subi	r22, 0xFE	; 254
    2a62:	7f 4f       	sbci	r23, 0xFF	; 255
    2a64:	0e 94 3f 0c 	call	0x187e	; 0x187e <vListInsert>
    2a68:	80 91 3c 18 	lds	r24, 0x183C	; 0x80183c <xNextTaskUnblockTime>
    2a6c:	90 91 3d 18 	lds	r25, 0x183D	; 0x80183d <xNextTaskUnblockTime+0x1>
    2a70:	a0 91 3e 18 	lds	r26, 0x183E	; 0x80183e <xNextTaskUnblockTime+0x2>
    2a74:	b0 91 3f 18 	lds	r27, 0x183F	; 0x80183f <xNextTaskUnblockTime+0x3>
    2a78:	c8 16       	cp	r12, r24
    2a7a:	d9 06       	cpc	r13, r25
    2a7c:	ea 06       	cpc	r14, r26
    2a7e:	fb 06       	cpc	r15, r27
    2a80:	40 f4       	brcc	.+16     	; 0x2a92 <prvAddCurrentTaskToDelayedList+0xda>
    2a82:	c0 92 3c 18 	sts	0x183C, r12	; 0x80183c <xNextTaskUnblockTime>
    2a86:	d0 92 3d 18 	sts	0x183D, r13	; 0x80183d <xNextTaskUnblockTime+0x1>
    2a8a:	e0 92 3e 18 	sts	0x183E, r14	; 0x80183e <xNextTaskUnblockTime+0x2>
    2a8e:	f0 92 3f 18 	sts	0x183F, r15	; 0x80183f <xNextTaskUnblockTime+0x3>
    2a92:	cf 91       	pop	r28
    2a94:	ff 90       	pop	r15
    2a96:	ef 90       	pop	r14
    2a98:	df 90       	pop	r13
    2a9a:	cf 90       	pop	r12
    2a9c:	bf 90       	pop	r11
    2a9e:	af 90       	pop	r10
    2aa0:	9f 90       	pop	r9
    2aa2:	8f 90       	pop	r8
    2aa4:	08 95       	ret

00002aa6 <xTaskCreate>:
    2aa6:	4f 92       	push	r4
    2aa8:	5f 92       	push	r5
    2aaa:	6f 92       	push	r6
    2aac:	7f 92       	push	r7
    2aae:	8f 92       	push	r8
    2ab0:	9f 92       	push	r9
    2ab2:	af 92       	push	r10
    2ab4:	bf 92       	push	r11
    2ab6:	cf 92       	push	r12
    2ab8:	df 92       	push	r13
    2aba:	ef 92       	push	r14
    2abc:	ff 92       	push	r15
    2abe:	0f 93       	push	r16
    2ac0:	cf 93       	push	r28
    2ac2:	df 93       	push	r29
    2ac4:	4c 01       	movw	r8, r24
    2ac6:	6b 01       	movw	r12, r22
    2ac8:	5a 01       	movw	r10, r20
    2aca:	29 01       	movw	r4, r18
    2acc:	ca 01       	movw	r24, r20
    2ace:	0e 94 1f 0b 	call	0x163e	; 0x163e <pvPortMalloc>
    2ad2:	3c 01       	movw	r6, r24
    2ad4:	89 2b       	or	r24, r25
    2ad6:	09 f4       	brne	.+2      	; 0x2ada <xTaskCreate+0x34>
    2ad8:	f4 c0       	rjmp	.+488    	; 0x2cc2 <xTaskCreate+0x21c>
    2ada:	80 e3       	ldi	r24, 0x30	; 48
    2adc:	90 e0       	ldi	r25, 0x00	; 0
    2ade:	0e 94 1f 0b 	call	0x163e	; 0x163e <pvPortMalloc>
    2ae2:	ec 01       	movw	r28, r24
    2ae4:	89 2b       	or	r24, r25
    2ae6:	99 f0       	breq	.+38     	; 0x2b0e <xTaskCreate+0x68>
    2ae8:	7c 8e       	std	Y+28, r7	; 0x1c
    2aea:	6b 8e       	std	Y+27, r6	; 0x1b
    2aec:	a5 01       	movw	r20, r10
    2aee:	65 ea       	ldi	r22, 0xA5	; 165
    2af0:	70 e0       	ldi	r23, 0x00	; 0
    2af2:	c3 01       	movw	r24, r6
    2af4:	0e 94 0a 31 	call	0x6214	; 0x6214 <memset>
    2af8:	21 e0       	ldi	r18, 0x01	; 1
    2afa:	a2 1a       	sub	r10, r18
    2afc:	b1 08       	sbc	r11, r1
    2afe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b00:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b02:	a8 0e       	add	r10, r24
    2b04:	b9 1e       	adc	r11, r25
    2b06:	c1 14       	cp	r12, r1
    2b08:	d1 04       	cpc	r13, r1
    2b0a:	29 f4       	brne	.+10     	; 0x2b16 <xTaskCreate+0x70>
    2b0c:	20 c0       	rjmp	.+64     	; 0x2b4e <xTaskCreate+0xa8>
    2b0e:	c3 01       	movw	r24, r6
    2b10:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <vPortFree>
    2b14:	d6 c0       	rjmp	.+428    	; 0x2cc2 <xTaskCreate+0x21c>
    2b16:	d6 01       	movw	r26, r12
    2b18:	8c 91       	ld	r24, X
    2b1a:	8d 8f       	std	Y+29, r24	; 0x1d
    2b1c:	8c 91       	ld	r24, X
    2b1e:	88 23       	and	r24, r24
    2b20:	a1 f0       	breq	.+40     	; 0x2b4a <xTaskCreate+0xa4>
    2b22:	ae 01       	movw	r20, r28
    2b24:	42 5e       	subi	r20, 0xE2	; 226
    2b26:	5f 4f       	sbci	r21, 0xFF	; 255
    2b28:	f6 01       	movw	r30, r12
    2b2a:	31 96       	adiw	r30, 0x01	; 1
    2b2c:	b8 e0       	ldi	r27, 0x08	; 8
    2b2e:	cb 0e       	add	r12, r27
    2b30:	d1 1c       	adc	r13, r1
    2b32:	cf 01       	movw	r24, r30
    2b34:	21 91       	ld	r18, Z+
    2b36:	da 01       	movw	r26, r20
    2b38:	2d 93       	st	X+, r18
    2b3a:	ad 01       	movw	r20, r26
    2b3c:	dc 01       	movw	r26, r24
    2b3e:	8c 91       	ld	r24, X
    2b40:	88 23       	and	r24, r24
    2b42:	19 f0       	breq	.+6      	; 0x2b4a <xTaskCreate+0xa4>
    2b44:	ec 15       	cp	r30, r12
    2b46:	fd 05       	cpc	r31, r13
    2b48:	a1 f7       	brne	.-24     	; 0x2b32 <xTaskCreate+0x8c>
    2b4a:	1c a2       	std	Y+36, r1	; 0x24
    2b4c:	01 c0       	rjmp	.+2      	; 0x2b50 <xTaskCreate+0xaa>
    2b4e:	1d 8e       	std	Y+29, r1	; 0x1d
    2b50:	04 30       	cpi	r16, 0x04	; 4
    2b52:	08 f0       	brcs	.+2      	; 0x2b56 <xTaskCreate+0xb0>
    2b54:	03 e0       	ldi	r16, 0x03	; 3
    2b56:	0a 8f       	std	Y+26, r16	; 0x1a
    2b58:	0f a3       	std	Y+39, r16	; 0x27
    2b5a:	18 a6       	std	Y+40, r1	; 0x28
    2b5c:	6e 01       	movw	r12, r28
    2b5e:	b2 e0       	ldi	r27, 0x02	; 2
    2b60:	cb 0e       	add	r12, r27
    2b62:	d1 1c       	adc	r13, r1
    2b64:	c6 01       	movw	r24, r12
    2b66:	0e 94 1a 0c 	call	0x1834	; 0x1834 <vListInitialiseItem>
    2b6a:	ce 01       	movw	r24, r28
    2b6c:	0e 96       	adiw	r24, 0x0e	; 14
    2b6e:	0e 94 1a 0c 	call	0x1834	; 0x1834 <vListInitialiseItem>
    2b72:	db 87       	std	Y+11, r29	; 0x0b
    2b74:	ca 87       	std	Y+10, r28	; 0x0a
    2b76:	84 e0       	ldi	r24, 0x04	; 4
    2b78:	90 e0       	ldi	r25, 0x00	; 0
    2b7a:	a0 e0       	ldi	r26, 0x00	; 0
    2b7c:	b0 e0       	ldi	r27, 0x00	; 0
    2b7e:	80 1b       	sub	r24, r16
    2b80:	91 09       	sbc	r25, r1
    2b82:	a1 09       	sbc	r26, r1
    2b84:	b1 09       	sbc	r27, r1
    2b86:	8e 87       	std	Y+14, r24	; 0x0e
    2b88:	9f 87       	std	Y+15, r25	; 0x0f
    2b8a:	a8 8b       	std	Y+16, r26	; 0x10
    2b8c:	b9 8b       	std	Y+17, r27	; 0x11
    2b8e:	df 8b       	std	Y+23, r29	; 0x17
    2b90:	ce 8b       	std	Y+22, r28	; 0x16
    2b92:	1a a6       	std	Y+42, r1	; 0x2a
    2b94:	19 a6       	std	Y+41, r1	; 0x29
    2b96:	1b a6       	std	Y+43, r1	; 0x2b
    2b98:	1c a6       	std	Y+44, r1	; 0x2c
    2b9a:	1d a6       	std	Y+45, r1	; 0x2d
    2b9c:	1e a6       	std	Y+46, r1	; 0x2e
    2b9e:	1f a6       	std	Y+47, r1	; 0x2f
    2ba0:	a2 01       	movw	r20, r4
    2ba2:	b4 01       	movw	r22, r8
    2ba4:	c5 01       	movw	r24, r10
    2ba6:	0e 94 a3 0c 	call	0x1946	; 0x1946 <pxPortInitialiseStack>
    2baa:	99 83       	std	Y+1, r25	; 0x01
    2bac:	88 83       	st	Y, r24
    2bae:	e1 14       	cp	r14, r1
    2bb0:	f1 04       	cpc	r15, r1
    2bb2:	19 f0       	breq	.+6      	; 0x2bba <xTaskCreate+0x114>
    2bb4:	f7 01       	movw	r30, r14
    2bb6:	d1 83       	std	Z+1, r29	; 0x01
    2bb8:	c0 83       	st	Z, r28
    2bba:	0f b6       	in	r0, 0x3f	; 63
    2bbc:	f8 94       	cli
    2bbe:	0f 92       	push	r0
    2bc0:	80 91 4a 18 	lds	r24, 0x184A	; 0x80184a <uxCurrentNumberOfTasks>
    2bc4:	8f 5f       	subi	r24, 0xFF	; 255
    2bc6:	80 93 4a 18 	sts	0x184A, r24	; 0x80184a <uxCurrentNumberOfTasks>
    2bca:	80 91 b3 18 	lds	r24, 0x18B3	; 0x8018b3 <pxCurrentTCB>
    2bce:	90 91 b4 18 	lds	r25, 0x18B4	; 0x8018b4 <pxCurrentTCB+0x1>
    2bd2:	89 2b       	or	r24, r25
    2bd4:	d1 f5       	brne	.+116    	; 0x2c4a <xTaskCreate+0x1a4>
    2bd6:	d0 93 b4 18 	sts	0x18B4, r29	; 0x8018b4 <pxCurrentTCB+0x1>
    2bda:	c0 93 b3 18 	sts	0x18B3, r28	; 0x8018b3 <pxCurrentTCB>
    2bde:	80 91 4a 18 	lds	r24, 0x184A	; 0x80184a <uxCurrentNumberOfTasks>
    2be2:	81 30       	cpi	r24, 0x01	; 1
    2be4:	09 f0       	breq	.+2      	; 0x2be8 <xTaskCreate+0x142>
    2be6:	41 c0       	rjmp	.+130    	; 0x2c6a <xTaskCreate+0x1c4>
    2be8:	87 e8       	ldi	r24, 0x87	; 135
    2bea:	98 e1       	ldi	r25, 0x18	; 24
    2bec:	0e 94 09 0c 	call	0x1812	; 0x1812 <vListInitialise>
    2bf0:	82 e9       	ldi	r24, 0x92	; 146
    2bf2:	98 e1       	ldi	r25, 0x18	; 24
    2bf4:	0e 94 09 0c 	call	0x1812	; 0x1812 <vListInitialise>
    2bf8:	8d e9       	ldi	r24, 0x9D	; 157
    2bfa:	98 e1       	ldi	r25, 0x18	; 24
    2bfc:	0e 94 09 0c 	call	0x1812	; 0x1812 <vListInitialise>
    2c00:	88 ea       	ldi	r24, 0xA8	; 168
    2c02:	98 e1       	ldi	r25, 0x18	; 24
    2c04:	0e 94 09 0c 	call	0x1812	; 0x1812 <vListInitialise>
    2c08:	8c e7       	ldi	r24, 0x7C	; 124
    2c0a:	98 e1       	ldi	r25, 0x18	; 24
    2c0c:	0e 94 09 0c 	call	0x1812	; 0x1812 <vListInitialise>
    2c10:	81 e7       	ldi	r24, 0x71	; 113
    2c12:	98 e1       	ldi	r25, 0x18	; 24
    2c14:	0e 94 09 0c 	call	0x1812	; 0x1812 <vListInitialise>
    2c18:	82 e6       	ldi	r24, 0x62	; 98
    2c1a:	98 e1       	ldi	r25, 0x18	; 24
    2c1c:	0e 94 09 0c 	call	0x1812	; 0x1812 <vListInitialise>
    2c20:	87 e5       	ldi	r24, 0x57	; 87
    2c22:	98 e1       	ldi	r25, 0x18	; 24
    2c24:	0e 94 09 0c 	call	0x1812	; 0x1812 <vListInitialise>
    2c28:	8b e4       	ldi	r24, 0x4B	; 75
    2c2a:	98 e1       	ldi	r25, 0x18	; 24
    2c2c:	0e 94 09 0c 	call	0x1812	; 0x1812 <vListInitialise>
    2c30:	8c e7       	ldi	r24, 0x7C	; 124
    2c32:	98 e1       	ldi	r25, 0x18	; 24
    2c34:	90 93 70 18 	sts	0x1870, r25	; 0x801870 <pxDelayedTaskList+0x1>
    2c38:	80 93 6f 18 	sts	0x186F, r24	; 0x80186f <pxDelayedTaskList>
    2c3c:	81 e7       	ldi	r24, 0x71	; 113
    2c3e:	98 e1       	ldi	r25, 0x18	; 24
    2c40:	90 93 6e 18 	sts	0x186E, r25	; 0x80186e <pxOverflowDelayedTaskList+0x1>
    2c44:	80 93 6d 18 	sts	0x186D, r24	; 0x80186d <pxOverflowDelayedTaskList>
    2c48:	10 c0       	rjmp	.+32     	; 0x2c6a <xTaskCreate+0x1c4>
    2c4a:	80 91 44 18 	lds	r24, 0x1844	; 0x801844 <xSchedulerRunning>
    2c4e:	81 11       	cpse	r24, r1
    2c50:	0c c0       	rjmp	.+24     	; 0x2c6a <xTaskCreate+0x1c4>
    2c52:	e0 91 b3 18 	lds	r30, 0x18B3	; 0x8018b3 <pxCurrentTCB>
    2c56:	f0 91 b4 18 	lds	r31, 0x18B4	; 0x8018b4 <pxCurrentTCB+0x1>
    2c5a:	92 8d       	ldd	r25, Z+26	; 0x1a
    2c5c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2c5e:	89 17       	cp	r24, r25
    2c60:	20 f0       	brcs	.+8      	; 0x2c6a <xTaskCreate+0x1c4>
    2c62:	d0 93 b4 18 	sts	0x18B4, r29	; 0x8018b4 <pxCurrentTCB+0x1>
    2c66:	c0 93 b3 18 	sts	0x18B3, r28	; 0x8018b3 <pxCurrentTCB>
    2c6a:	80 91 40 18 	lds	r24, 0x1840	; 0x801840 <uxTaskNumber>
    2c6e:	8f 5f       	subi	r24, 0xFF	; 255
    2c70:	80 93 40 18 	sts	0x1840, r24	; 0x801840 <uxTaskNumber>
    2c74:	8d a3       	std	Y+37, r24	; 0x25
    2c76:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2c78:	90 91 45 18 	lds	r25, 0x1845	; 0x801845 <uxTopReadyPriority>
    2c7c:	98 17       	cp	r25, r24
    2c7e:	10 f4       	brcc	.+4      	; 0x2c84 <xTaskCreate+0x1de>
    2c80:	80 93 45 18 	sts	0x1845, r24	; 0x801845 <uxTopReadyPriority>
    2c84:	fb e0       	ldi	r31, 0x0B	; 11
    2c86:	8f 9f       	mul	r24, r31
    2c88:	c0 01       	movw	r24, r0
    2c8a:	11 24       	eor	r1, r1
    2c8c:	b6 01       	movw	r22, r12
    2c8e:	89 57       	subi	r24, 0x79	; 121
    2c90:	97 4e       	sbci	r25, 0xE7	; 231
    2c92:	0e 94 1e 0c 	call	0x183c	; 0x183c <vListInsertEnd>
    2c96:	0f 90       	pop	r0
    2c98:	0f be       	out	0x3f, r0	; 63
    2c9a:	80 91 44 18 	lds	r24, 0x1844	; 0x801844 <xSchedulerRunning>
    2c9e:	88 23       	and	r24, r24
    2ca0:	61 f0       	breq	.+24     	; 0x2cba <xTaskCreate+0x214>
    2ca2:	e0 91 b3 18 	lds	r30, 0x18B3	; 0x8018b3 <pxCurrentTCB>
    2ca6:	f0 91 b4 18 	lds	r31, 0x18B4	; 0x8018b4 <pxCurrentTCB+0x1>
    2caa:	92 8d       	ldd	r25, Z+26	; 0x1a
    2cac:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2cae:	98 17       	cp	r25, r24
    2cb0:	30 f4       	brcc	.+12     	; 0x2cbe <xTaskCreate+0x218>
    2cb2:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <vPortYield>
    2cb6:	81 e0       	ldi	r24, 0x01	; 1
    2cb8:	05 c0       	rjmp	.+10     	; 0x2cc4 <xTaskCreate+0x21e>
    2cba:	81 e0       	ldi	r24, 0x01	; 1
    2cbc:	03 c0       	rjmp	.+6      	; 0x2cc4 <xTaskCreate+0x21e>
    2cbe:	81 e0       	ldi	r24, 0x01	; 1
    2cc0:	01 c0       	rjmp	.+2      	; 0x2cc4 <xTaskCreate+0x21e>
    2cc2:	8f ef       	ldi	r24, 0xFF	; 255
    2cc4:	df 91       	pop	r29
    2cc6:	cf 91       	pop	r28
    2cc8:	0f 91       	pop	r16
    2cca:	ff 90       	pop	r15
    2ccc:	ef 90       	pop	r14
    2cce:	df 90       	pop	r13
    2cd0:	cf 90       	pop	r12
    2cd2:	bf 90       	pop	r11
    2cd4:	af 90       	pop	r10
    2cd6:	9f 90       	pop	r9
    2cd8:	8f 90       	pop	r8
    2cda:	7f 90       	pop	r7
    2cdc:	6f 90       	pop	r6
    2cde:	5f 90       	pop	r5
    2ce0:	4f 90       	pop	r4
    2ce2:	08 95       	ret

00002ce4 <vTaskStartScheduler>:
    2ce4:	ef 92       	push	r14
    2ce6:	ff 92       	push	r15
    2ce8:	0f 93       	push	r16
    2cea:	0f 2e       	mov	r0, r31
    2cec:	fa e3       	ldi	r31, 0x3A	; 58
    2cee:	ef 2e       	mov	r14, r31
    2cf0:	f8 e1       	ldi	r31, 0x18	; 24
    2cf2:	ff 2e       	mov	r15, r31
    2cf4:	f0 2d       	mov	r31, r0
    2cf6:	00 e0       	ldi	r16, 0x00	; 0
    2cf8:	20 e0       	ldi	r18, 0x00	; 0
    2cfa:	30 e0       	ldi	r19, 0x00	; 0
    2cfc:	40 ec       	ldi	r20, 0xC0	; 192
    2cfe:	50 e0       	ldi	r21, 0x00	; 0
    2d00:	6d eb       	ldi	r22, 0xBD	; 189
    2d02:	74 e0       	ldi	r23, 0x04	; 4
    2d04:	8d ec       	ldi	r24, 0xCD	; 205
    2d06:	90 e0       	ldi	r25, 0x00	; 0
    2d08:	ce de       	rcall	.-612    	; 0x2aa6 <xTaskCreate>
    2d0a:	81 30       	cpi	r24, 0x01	; 1
    2d0c:	19 f5       	brne	.+70     	; 0x2d54 <vTaskStartScheduler+0x70>
    2d0e:	cc d6       	rcall	.+3480   	; 0x3aa8 <xTimerCreateTimerTask>
    2d10:	81 30       	cpi	r24, 0x01	; 1
    2d12:	01 f5       	brne	.+64     	; 0x2d54 <vTaskStartScheduler+0x70>
    2d14:	f8 94       	cli
    2d16:	8f ef       	ldi	r24, 0xFF	; 255
    2d18:	9f ef       	ldi	r25, 0xFF	; 255
    2d1a:	dc 01       	movw	r26, r24
    2d1c:	80 93 3c 18 	sts	0x183C, r24	; 0x80183c <xNextTaskUnblockTime>
    2d20:	90 93 3d 18 	sts	0x183D, r25	; 0x80183d <xNextTaskUnblockTime+0x1>
    2d24:	a0 93 3e 18 	sts	0x183E, r26	; 0x80183e <xNextTaskUnblockTime+0x2>
    2d28:	b0 93 3f 18 	sts	0x183F, r27	; 0x80183f <xNextTaskUnblockTime+0x3>
    2d2c:	81 e0       	ldi	r24, 0x01	; 1
    2d2e:	80 93 44 18 	sts	0x1844, r24	; 0x801844 <xSchedulerRunning>
    2d32:	10 92 46 18 	sts	0x1846, r1	; 0x801846 <xTickCount>
    2d36:	10 92 47 18 	sts	0x1847, r1	; 0x801847 <xTickCount+0x1>
    2d3a:	10 92 48 18 	sts	0x1848, r1	; 0x801848 <xTickCount+0x2>
    2d3e:	10 92 49 18 	sts	0x1849, r1	; 0x801849 <xTickCount+0x3>
    2d42:	e0 91 b3 18 	lds	r30, 0x18B3	; 0x8018b3 <pxCurrentTCB>
    2d46:	f0 91 b4 18 	lds	r31, 0x18B4	; 0x8018b4 <pxCurrentTCB+0x1>
    2d4a:	81 a5       	ldd	r24, Z+41	; 0x29
    2d4c:	0e 94 56 09 	call	0x12ac	; 0x12ac <task_switch_in>
    2d50:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <xPortStartScheduler>
    2d54:	0f 91       	pop	r16
    2d56:	ff 90       	pop	r15
    2d58:	ef 90       	pop	r14
    2d5a:	08 95       	ret

00002d5c <vTaskSuspendAll>:
    2d5c:	80 91 39 18 	lds	r24, 0x1839	; 0x801839 <uxSchedulerSuspended>
    2d60:	8f 5f       	subi	r24, 0xFF	; 255
    2d62:	80 93 39 18 	sts	0x1839, r24	; 0x801839 <uxSchedulerSuspended>
    2d66:	08 95       	ret

00002d68 <xTaskGetTickCount>:
    2d68:	0f b6       	in	r0, 0x3f	; 63
    2d6a:	f8 94       	cli
    2d6c:	0f 92       	push	r0
    2d6e:	60 91 46 18 	lds	r22, 0x1846	; 0x801846 <xTickCount>
    2d72:	70 91 47 18 	lds	r23, 0x1847	; 0x801847 <xTickCount+0x1>
    2d76:	80 91 48 18 	lds	r24, 0x1848	; 0x801848 <xTickCount+0x2>
    2d7a:	90 91 49 18 	lds	r25, 0x1849	; 0x801849 <xTickCount+0x3>
    2d7e:	0f 90       	pop	r0
    2d80:	0f be       	out	0x3f, r0	; 63
    2d82:	08 95       	ret

00002d84 <xTaskIncrementTick>:
    2d84:	9f 92       	push	r9
    2d86:	af 92       	push	r10
    2d88:	bf 92       	push	r11
    2d8a:	cf 92       	push	r12
    2d8c:	df 92       	push	r13
    2d8e:	ef 92       	push	r14
    2d90:	ff 92       	push	r15
    2d92:	0f 93       	push	r16
    2d94:	1f 93       	push	r17
    2d96:	cf 93       	push	r28
    2d98:	df 93       	push	r29
    2d9a:	80 91 39 18 	lds	r24, 0x1839	; 0x801839 <uxSchedulerSuspended>
    2d9e:	81 11       	cpse	r24, r1
    2da0:	ad c0       	rjmp	.+346    	; 0x2efc <xTaskIncrementTick+0x178>
    2da2:	c0 90 46 18 	lds	r12, 0x1846	; 0x801846 <xTickCount>
    2da6:	d0 90 47 18 	lds	r13, 0x1847	; 0x801847 <xTickCount+0x1>
    2daa:	e0 90 48 18 	lds	r14, 0x1848	; 0x801848 <xTickCount+0x2>
    2dae:	f0 90 49 18 	lds	r15, 0x1849	; 0x801849 <xTickCount+0x3>
    2db2:	8f ef       	ldi	r24, 0xFF	; 255
    2db4:	c8 1a       	sub	r12, r24
    2db6:	d8 0a       	sbc	r13, r24
    2db8:	e8 0a       	sbc	r14, r24
    2dba:	f8 0a       	sbc	r15, r24
    2dbc:	c0 92 46 18 	sts	0x1846, r12	; 0x801846 <xTickCount>
    2dc0:	d0 92 47 18 	sts	0x1847, r13	; 0x801847 <xTickCount+0x1>
    2dc4:	e0 92 48 18 	sts	0x1848, r14	; 0x801848 <xTickCount+0x2>
    2dc8:	f0 92 49 18 	sts	0x1849, r15	; 0x801849 <xTickCount+0x3>
    2dcc:	c1 14       	cp	r12, r1
    2dce:	d1 04       	cpc	r13, r1
    2dd0:	e1 04       	cpc	r14, r1
    2dd2:	f1 04       	cpc	r15, r1
    2dd4:	b1 f4       	brne	.+44     	; 0x2e02 <xTaskIncrementTick+0x7e>
    2dd6:	80 91 6f 18 	lds	r24, 0x186F	; 0x80186f <pxDelayedTaskList>
    2dda:	90 91 70 18 	lds	r25, 0x1870	; 0x801870 <pxDelayedTaskList+0x1>
    2dde:	20 91 6d 18 	lds	r18, 0x186D	; 0x80186d <pxOverflowDelayedTaskList>
    2de2:	30 91 6e 18 	lds	r19, 0x186E	; 0x80186e <pxOverflowDelayedTaskList+0x1>
    2de6:	30 93 70 18 	sts	0x1870, r19	; 0x801870 <pxDelayedTaskList+0x1>
    2dea:	20 93 6f 18 	sts	0x186F, r18	; 0x80186f <pxDelayedTaskList>
    2dee:	90 93 6e 18 	sts	0x186E, r25	; 0x80186e <pxOverflowDelayedTaskList+0x1>
    2df2:	80 93 6d 18 	sts	0x186D, r24	; 0x80186d <pxOverflowDelayedTaskList>
    2df6:	80 91 41 18 	lds	r24, 0x1841	; 0x801841 <xNumOfOverflows>
    2dfa:	8f 5f       	subi	r24, 0xFF	; 255
    2dfc:	80 93 41 18 	sts	0x1841, r24	; 0x801841 <xNumOfOverflows>
    2e00:	b1 dd       	rcall	.-1182   	; 0x2964 <prvResetNextTaskUnblockTime>
    2e02:	80 91 3c 18 	lds	r24, 0x183C	; 0x80183c <xNextTaskUnblockTime>
    2e06:	90 91 3d 18 	lds	r25, 0x183D	; 0x80183d <xNextTaskUnblockTime+0x1>
    2e0a:	a0 91 3e 18 	lds	r26, 0x183E	; 0x80183e <xNextTaskUnblockTime+0x2>
    2e0e:	b0 91 3f 18 	lds	r27, 0x183F	; 0x80183f <xNextTaskUnblockTime+0x3>
    2e12:	c8 16       	cp	r12, r24
    2e14:	d9 06       	cpc	r13, r25
    2e16:	ea 06       	cpc	r14, r26
    2e18:	fb 06       	cpc	r15, r27
    2e1a:	10 f4       	brcc	.+4      	; 0x2e20 <xTaskIncrementTick+0x9c>
    2e1c:	b1 2c       	mov	r11, r1
    2e1e:	5d c0       	rjmp	.+186    	; 0x2eda <xTaskIncrementTick+0x156>
    2e20:	b1 2c       	mov	r11, r1
    2e22:	0f 2e       	mov	r0, r31
    2e24:	fb e0       	ldi	r31, 0x0B	; 11
    2e26:	af 2e       	mov	r10, r31
    2e28:	f0 2d       	mov	r31, r0
    2e2a:	99 24       	eor	r9, r9
    2e2c:	93 94       	inc	r9
    2e2e:	e0 91 6f 18 	lds	r30, 0x186F	; 0x80186f <pxDelayedTaskList>
    2e32:	f0 91 70 18 	lds	r31, 0x1870	; 0x801870 <pxDelayedTaskList+0x1>
    2e36:	80 81       	ld	r24, Z
    2e38:	81 11       	cpse	r24, r1
    2e3a:	0c c0       	rjmp	.+24     	; 0x2e54 <xTaskIncrementTick+0xd0>
    2e3c:	8f ef       	ldi	r24, 0xFF	; 255
    2e3e:	9f ef       	ldi	r25, 0xFF	; 255
    2e40:	dc 01       	movw	r26, r24
    2e42:	80 93 3c 18 	sts	0x183C, r24	; 0x80183c <xNextTaskUnblockTime>
    2e46:	90 93 3d 18 	sts	0x183D, r25	; 0x80183d <xNextTaskUnblockTime+0x1>
    2e4a:	a0 93 3e 18 	sts	0x183E, r26	; 0x80183e <xNextTaskUnblockTime+0x2>
    2e4e:	b0 93 3f 18 	sts	0x183F, r27	; 0x80183f <xNextTaskUnblockTime+0x3>
    2e52:	43 c0       	rjmp	.+134    	; 0x2eda <xTaskIncrementTick+0x156>
    2e54:	e0 91 6f 18 	lds	r30, 0x186F	; 0x80186f <pxDelayedTaskList>
    2e58:	f0 91 70 18 	lds	r31, 0x1870	; 0x801870 <pxDelayedTaskList+0x1>
    2e5c:	07 80       	ldd	r0, Z+7	; 0x07
    2e5e:	f0 85       	ldd	r31, Z+8	; 0x08
    2e60:	e0 2d       	mov	r30, r0
    2e62:	c0 85       	ldd	r28, Z+8	; 0x08
    2e64:	d1 85       	ldd	r29, Z+9	; 0x09
    2e66:	8a 81       	ldd	r24, Y+2	; 0x02
    2e68:	9b 81       	ldd	r25, Y+3	; 0x03
    2e6a:	ac 81       	ldd	r26, Y+4	; 0x04
    2e6c:	bd 81       	ldd	r27, Y+5	; 0x05
    2e6e:	c8 16       	cp	r12, r24
    2e70:	d9 06       	cpc	r13, r25
    2e72:	ea 06       	cpc	r14, r26
    2e74:	fb 06       	cpc	r15, r27
    2e76:	48 f4       	brcc	.+18     	; 0x2e8a <xTaskIncrementTick+0x106>
    2e78:	80 93 3c 18 	sts	0x183C, r24	; 0x80183c <xNextTaskUnblockTime>
    2e7c:	90 93 3d 18 	sts	0x183D, r25	; 0x80183d <xNextTaskUnblockTime+0x1>
    2e80:	a0 93 3e 18 	sts	0x183E, r26	; 0x80183e <xNextTaskUnblockTime+0x2>
    2e84:	b0 93 3f 18 	sts	0x183F, r27	; 0x80183f <xNextTaskUnblockTime+0x3>
    2e88:	28 c0       	rjmp	.+80     	; 0x2eda <xTaskIncrementTick+0x156>
    2e8a:	8e 01       	movw	r16, r28
    2e8c:	0e 5f       	subi	r16, 0xFE	; 254
    2e8e:	1f 4f       	sbci	r17, 0xFF	; 255
    2e90:	c8 01       	movw	r24, r16
    2e92:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <uxListRemove>
    2e96:	88 8d       	ldd	r24, Y+24	; 0x18
    2e98:	99 8d       	ldd	r25, Y+25	; 0x19
    2e9a:	89 2b       	or	r24, r25
    2e9c:	21 f0       	breq	.+8      	; 0x2ea6 <xTaskIncrementTick+0x122>
    2e9e:	ce 01       	movw	r24, r28
    2ea0:	0e 96       	adiw	r24, 0x0e	; 14
    2ea2:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <uxListRemove>
    2ea6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2ea8:	90 91 45 18 	lds	r25, 0x1845	; 0x801845 <uxTopReadyPriority>
    2eac:	98 17       	cp	r25, r24
    2eae:	10 f4       	brcc	.+4      	; 0x2eb4 <xTaskIncrementTick+0x130>
    2eb0:	80 93 45 18 	sts	0x1845, r24	; 0x801845 <uxTopReadyPriority>
    2eb4:	a8 9e       	mul	r10, r24
    2eb6:	c0 01       	movw	r24, r0
    2eb8:	11 24       	eor	r1, r1
    2eba:	b8 01       	movw	r22, r16
    2ebc:	89 57       	subi	r24, 0x79	; 121
    2ebe:	97 4e       	sbci	r25, 0xE7	; 231
    2ec0:	0e 94 1e 0c 	call	0x183c	; 0x183c <vListInsertEnd>
    2ec4:	e0 91 b3 18 	lds	r30, 0x18B3	; 0x8018b3 <pxCurrentTCB>
    2ec8:	f0 91 b4 18 	lds	r31, 0x18B4	; 0x8018b4 <pxCurrentTCB+0x1>
    2ecc:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2ece:	82 8d       	ldd	r24, Z+26	; 0x1a
    2ed0:	98 17       	cp	r25, r24
    2ed2:	08 f4       	brcc	.+2      	; 0x2ed6 <xTaskIncrementTick+0x152>
    2ed4:	ac cf       	rjmp	.-168    	; 0x2e2e <xTaskIncrementTick+0xaa>
    2ed6:	b9 2c       	mov	r11, r9
    2ed8:	aa cf       	rjmp	.-172    	; 0x2e2e <xTaskIncrementTick+0xaa>
    2eda:	e0 91 b3 18 	lds	r30, 0x18B3	; 0x8018b3 <pxCurrentTCB>
    2ede:	f0 91 b4 18 	lds	r31, 0x18B4	; 0x8018b4 <pxCurrentTCB+0x1>
    2ee2:	e2 8d       	ldd	r30, Z+26	; 0x1a
    2ee4:	8b e0       	ldi	r24, 0x0B	; 11
    2ee6:	e8 9f       	mul	r30, r24
    2ee8:	f0 01       	movw	r30, r0
    2eea:	11 24       	eor	r1, r1
    2eec:	e9 57       	subi	r30, 0x79	; 121
    2eee:	f7 4e       	sbci	r31, 0xE7	; 231
    2ef0:	80 81       	ld	r24, Z
    2ef2:	82 30       	cpi	r24, 0x02	; 2
    2ef4:	48 f0       	brcs	.+18     	; 0x2f08 <xTaskIncrementTick+0x184>
    2ef6:	bb 24       	eor	r11, r11
    2ef8:	b3 94       	inc	r11
    2efa:	06 c0       	rjmp	.+12     	; 0x2f08 <xTaskIncrementTick+0x184>
    2efc:	80 91 43 18 	lds	r24, 0x1843	; 0x801843 <uxPendedTicks>
    2f00:	8f 5f       	subi	r24, 0xFF	; 255
    2f02:	80 93 43 18 	sts	0x1843, r24	; 0x801843 <uxPendedTicks>
    2f06:	b1 2c       	mov	r11, r1
    2f08:	80 91 42 18 	lds	r24, 0x1842	; 0x801842 <xYieldPending>
    2f0c:	88 23       	and	r24, r24
    2f0e:	11 f0       	breq	.+4      	; 0x2f14 <xTaskIncrementTick+0x190>
    2f10:	bb 24       	eor	r11, r11
    2f12:	b3 94       	inc	r11
    2f14:	8b 2d       	mov	r24, r11
    2f16:	df 91       	pop	r29
    2f18:	cf 91       	pop	r28
    2f1a:	1f 91       	pop	r17
    2f1c:	0f 91       	pop	r16
    2f1e:	ff 90       	pop	r15
    2f20:	ef 90       	pop	r14
    2f22:	df 90       	pop	r13
    2f24:	cf 90       	pop	r12
    2f26:	bf 90       	pop	r11
    2f28:	af 90       	pop	r10
    2f2a:	9f 90       	pop	r9
    2f2c:	08 95       	ret

00002f2e <xTaskResumeAll>:
    2f2e:	cf 92       	push	r12
    2f30:	df 92       	push	r13
    2f32:	ef 92       	push	r14
    2f34:	ff 92       	push	r15
    2f36:	0f 93       	push	r16
    2f38:	1f 93       	push	r17
    2f3a:	cf 93       	push	r28
    2f3c:	df 93       	push	r29
    2f3e:	0f b6       	in	r0, 0x3f	; 63
    2f40:	f8 94       	cli
    2f42:	0f 92       	push	r0
    2f44:	80 91 39 18 	lds	r24, 0x1839	; 0x801839 <uxSchedulerSuspended>
    2f48:	81 50       	subi	r24, 0x01	; 1
    2f4a:	80 93 39 18 	sts	0x1839, r24	; 0x801839 <uxSchedulerSuspended>
    2f4e:	80 91 39 18 	lds	r24, 0x1839	; 0x801839 <uxSchedulerSuspended>
    2f52:	81 11       	cpse	r24, r1
    2f54:	5a c0       	rjmp	.+180    	; 0x300a <xTaskResumeAll+0xdc>
    2f56:	80 91 4a 18 	lds	r24, 0x184A	; 0x80184a <uxCurrentNumberOfTasks>
    2f5a:	81 11       	cpse	r24, r1
    2f5c:	2c c0       	rjmp	.+88     	; 0x2fb6 <xTaskResumeAll+0x88>
    2f5e:	58 c0       	rjmp	.+176    	; 0x3010 <xTaskResumeAll+0xe2>
    2f60:	d7 01       	movw	r26, r14
    2f62:	17 96       	adiw	r26, 0x07	; 7
    2f64:	ed 91       	ld	r30, X+
    2f66:	fc 91       	ld	r31, X
    2f68:	18 97       	sbiw	r26, 0x08	; 8
    2f6a:	c0 85       	ldd	r28, Z+8	; 0x08
    2f6c:	d1 85       	ldd	r29, Z+9	; 0x09
    2f6e:	ce 01       	movw	r24, r28
    2f70:	0e 96       	adiw	r24, 0x0e	; 14
    2f72:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <uxListRemove>
    2f76:	8e 01       	movw	r16, r28
    2f78:	0e 5f       	subi	r16, 0xFE	; 254
    2f7a:	1f 4f       	sbci	r17, 0xFF	; 255
    2f7c:	c8 01       	movw	r24, r16
    2f7e:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <uxListRemove>
    2f82:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2f84:	90 91 45 18 	lds	r25, 0x1845	; 0x801845 <uxTopReadyPriority>
    2f88:	98 17       	cp	r25, r24
    2f8a:	10 f4       	brcc	.+4      	; 0x2f90 <xTaskResumeAll+0x62>
    2f8c:	80 93 45 18 	sts	0x1845, r24	; 0x801845 <uxTopReadyPriority>
    2f90:	d8 9e       	mul	r13, r24
    2f92:	c0 01       	movw	r24, r0
    2f94:	11 24       	eor	r1, r1
    2f96:	b8 01       	movw	r22, r16
    2f98:	89 57       	subi	r24, 0x79	; 121
    2f9a:	97 4e       	sbci	r25, 0xE7	; 231
    2f9c:	0e 94 1e 0c 	call	0x183c	; 0x183c <vListInsertEnd>
    2fa0:	e0 91 b3 18 	lds	r30, 0x18B3	; 0x8018b3 <pxCurrentTCB>
    2fa4:	f0 91 b4 18 	lds	r31, 0x18B4	; 0x8018b4 <pxCurrentTCB+0x1>
    2fa8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2faa:	82 8d       	ldd	r24, Z+26	; 0x1a
    2fac:	98 17       	cp	r25, r24
    2fae:	88 f0       	brcs	.+34     	; 0x2fd2 <xTaskResumeAll+0xa4>
    2fb0:	c0 92 42 18 	sts	0x1842, r12	; 0x801842 <xYieldPending>
    2fb4:	0e c0       	rjmp	.+28     	; 0x2fd2 <xTaskResumeAll+0xa4>
    2fb6:	c0 e0       	ldi	r28, 0x00	; 0
    2fb8:	d0 e0       	ldi	r29, 0x00	; 0
    2fba:	0f 2e       	mov	r0, r31
    2fbc:	f2 e6       	ldi	r31, 0x62	; 98
    2fbe:	ef 2e       	mov	r14, r31
    2fc0:	f8 e1       	ldi	r31, 0x18	; 24
    2fc2:	ff 2e       	mov	r15, r31
    2fc4:	f0 2d       	mov	r31, r0
    2fc6:	0f 2e       	mov	r0, r31
    2fc8:	fb e0       	ldi	r31, 0x0B	; 11
    2fca:	df 2e       	mov	r13, r31
    2fcc:	f0 2d       	mov	r31, r0
    2fce:	cc 24       	eor	r12, r12
    2fd0:	c3 94       	inc	r12
    2fd2:	f7 01       	movw	r30, r14
    2fd4:	80 81       	ld	r24, Z
    2fd6:	81 11       	cpse	r24, r1
    2fd8:	c3 cf       	rjmp	.-122    	; 0x2f60 <xTaskResumeAll+0x32>
    2fda:	cd 2b       	or	r28, r29
    2fdc:	09 f0       	breq	.+2      	; 0x2fe0 <xTaskResumeAll+0xb2>
    2fde:	c2 dc       	rcall	.-1660   	; 0x2964 <prvResetNextTaskUnblockTime>
    2fe0:	c0 91 43 18 	lds	r28, 0x1843	; 0x801843 <uxPendedTicks>
    2fe4:	cc 23       	and	r28, r28
    2fe6:	49 f0       	breq	.+18     	; 0x2ffa <xTaskResumeAll+0xcc>
    2fe8:	d1 e0       	ldi	r29, 0x01	; 1
    2fea:	cc de       	rcall	.-616    	; 0x2d84 <xTaskIncrementTick>
    2fec:	81 11       	cpse	r24, r1
    2fee:	d0 93 42 18 	sts	0x1842, r29	; 0x801842 <xYieldPending>
    2ff2:	c1 50       	subi	r28, 0x01	; 1
    2ff4:	d1 f7       	brne	.-12     	; 0x2fea <xTaskResumeAll+0xbc>
    2ff6:	10 92 43 18 	sts	0x1843, r1	; 0x801843 <uxPendedTicks>
    2ffa:	80 91 42 18 	lds	r24, 0x1842	; 0x801842 <xYieldPending>
    2ffe:	88 23       	and	r24, r24
    3000:	31 f0       	breq	.+12     	; 0x300e <xTaskResumeAll+0xe0>
    3002:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <vPortYield>
    3006:	81 e0       	ldi	r24, 0x01	; 1
    3008:	03 c0       	rjmp	.+6      	; 0x3010 <xTaskResumeAll+0xe2>
    300a:	80 e0       	ldi	r24, 0x00	; 0
    300c:	01 c0       	rjmp	.+2      	; 0x3010 <xTaskResumeAll+0xe2>
    300e:	80 e0       	ldi	r24, 0x00	; 0
    3010:	0f 90       	pop	r0
    3012:	0f be       	out	0x3f, r0	; 63
    3014:	df 91       	pop	r29
    3016:	cf 91       	pop	r28
    3018:	1f 91       	pop	r17
    301a:	0f 91       	pop	r16
    301c:	ff 90       	pop	r15
    301e:	ef 90       	pop	r14
    3020:	df 90       	pop	r13
    3022:	cf 90       	pop	r12
    3024:	08 95       	ret

00003026 <vTaskDelay>:
    3026:	cf 92       	push	r12
    3028:	df 92       	push	r13
    302a:	ef 92       	push	r14
    302c:	ff 92       	push	r15
    302e:	6b 01       	movw	r12, r22
    3030:	7c 01       	movw	r14, r24
    3032:	67 2b       	or	r22, r23
    3034:	68 2b       	or	r22, r24
    3036:	69 2b       	or	r22, r25
    3038:	41 f0       	breq	.+16     	; 0x304a <vTaskDelay+0x24>
    303a:	90 de       	rcall	.-736    	; 0x2d5c <vTaskSuspendAll>
    303c:	40 e0       	ldi	r20, 0x00	; 0
    303e:	c7 01       	movw	r24, r14
    3040:	b6 01       	movw	r22, r12
    3042:	ba dc       	rcall	.-1676   	; 0x29b8 <prvAddCurrentTaskToDelayedList>
    3044:	74 df       	rcall	.-280    	; 0x2f2e <xTaskResumeAll>
    3046:	81 11       	cpse	r24, r1
    3048:	02 c0       	rjmp	.+4      	; 0x304e <vTaskDelay+0x28>
    304a:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <vPortYield>
    304e:	ff 90       	pop	r15
    3050:	ef 90       	pop	r14
    3052:	df 90       	pop	r13
    3054:	cf 90       	pop	r12
    3056:	08 95       	ret

00003058 <vTaskSwitchContext>:
    3058:	80 91 39 18 	lds	r24, 0x1839	; 0x801839 <uxSchedulerSuspended>
    305c:	88 23       	and	r24, r24
    305e:	21 f0       	breq	.+8      	; 0x3068 <vTaskSwitchContext+0x10>
    3060:	81 e0       	ldi	r24, 0x01	; 1
    3062:	80 93 42 18 	sts	0x1842, r24	; 0x801842 <xYieldPending>
    3066:	08 95       	ret
    3068:	10 92 42 18 	sts	0x1842, r1	; 0x801842 <xYieldPending>
    306c:	e0 91 b3 18 	lds	r30, 0x18B3	; 0x8018b3 <pxCurrentTCB>
    3070:	f0 91 b4 18 	lds	r31, 0x18B4	; 0x8018b4 <pxCurrentTCB+0x1>
    3074:	81 a5       	ldd	r24, Z+41	; 0x29
    3076:	0e 94 60 09 	call	0x12c0	; 0x12c0 <task_switch_out>
    307a:	a0 91 b3 18 	lds	r26, 0x18B3	; 0x8018b3 <pxCurrentTCB>
    307e:	b0 91 b4 18 	lds	r27, 0x18B4	; 0x8018b4 <pxCurrentTCB+0x1>
    3082:	e0 91 b3 18 	lds	r30, 0x18B3	; 0x8018b3 <pxCurrentTCB>
    3086:	f0 91 b4 18 	lds	r31, 0x18B4	; 0x8018b4 <pxCurrentTCB+0x1>
    308a:	2d 91       	ld	r18, X+
    308c:	3c 91       	ld	r19, X
    308e:	83 8d       	ldd	r24, Z+27	; 0x1b
    3090:	94 8d       	ldd	r25, Z+28	; 0x1c
    3092:	82 17       	cp	r24, r18
    3094:	93 07       	cpc	r25, r19
    3096:	58 f0       	brcs	.+22     	; 0x30ae <vTaskSwitchContext+0x56>
    3098:	60 91 b3 18 	lds	r22, 0x18B3	; 0x8018b3 <pxCurrentTCB>
    309c:	70 91 b4 18 	lds	r23, 0x18B4	; 0x8018b4 <pxCurrentTCB+0x1>
    30a0:	80 91 b3 18 	lds	r24, 0x18B3	; 0x8018b3 <pxCurrentTCB>
    30a4:	90 91 b4 18 	lds	r25, 0x18B4	; 0x8018b4 <pxCurrentTCB+0x1>
    30a8:	63 5e       	subi	r22, 0xE3	; 227
    30aa:	7f 4f       	sbci	r23, 0xFF	; 255
    30ac:	20 d6       	rcall	.+3136   	; 0x3cee <vApplicationStackOverflowHook>
    30ae:	80 91 45 18 	lds	r24, 0x1845	; 0x801845 <uxTopReadyPriority>
    30b2:	28 2f       	mov	r18, r24
    30b4:	30 e0       	ldi	r19, 0x00	; 0
    30b6:	9b e0       	ldi	r25, 0x0B	; 11
    30b8:	89 9f       	mul	r24, r25
    30ba:	f0 01       	movw	r30, r0
    30bc:	11 24       	eor	r1, r1
    30be:	e9 57       	subi	r30, 0x79	; 121
    30c0:	f7 4e       	sbci	r31, 0xE7	; 231
    30c2:	90 81       	ld	r25, Z
    30c4:	91 11       	cpse	r25, r1
    30c6:	0e c0       	rjmp	.+28     	; 0x30e4 <vTaskSwitchContext+0x8c>
    30c8:	4b e0       	ldi	r20, 0x0B	; 11
    30ca:	81 50       	subi	r24, 0x01	; 1
    30cc:	28 2f       	mov	r18, r24
    30ce:	30 e0       	ldi	r19, 0x00	; 0
    30d0:	42 9f       	mul	r20, r18
    30d2:	f0 01       	movw	r30, r0
    30d4:	43 9f       	mul	r20, r19
    30d6:	f0 0d       	add	r31, r0
    30d8:	11 24       	eor	r1, r1
    30da:	e9 57       	subi	r30, 0x79	; 121
    30dc:	f7 4e       	sbci	r31, 0xE7	; 231
    30de:	90 81       	ld	r25, Z
    30e0:	99 23       	and	r25, r25
    30e2:	99 f3       	breq	.-26     	; 0x30ca <vTaskSwitchContext+0x72>
    30e4:	9b e0       	ldi	r25, 0x0B	; 11
    30e6:	92 9f       	mul	r25, r18
    30e8:	a0 01       	movw	r20, r0
    30ea:	93 9f       	mul	r25, r19
    30ec:	50 0d       	add	r21, r0
    30ee:	11 24       	eor	r1, r1
    30f0:	da 01       	movw	r26, r20
    30f2:	a9 57       	subi	r26, 0x79	; 121
    30f4:	b7 4e       	sbci	r27, 0xE7	; 231
    30f6:	11 96       	adiw	r26, 0x01	; 1
    30f8:	ed 91       	ld	r30, X+
    30fa:	fc 91       	ld	r31, X
    30fc:	12 97       	sbiw	r26, 0x02	; 2
    30fe:	04 80       	ldd	r0, Z+4	; 0x04
    3100:	f5 81       	ldd	r31, Z+5	; 0x05
    3102:	e0 2d       	mov	r30, r0
    3104:	12 96       	adiw	r26, 0x02	; 2
    3106:	fc 93       	st	X, r31
    3108:	ee 93       	st	-X, r30
    310a:	11 97       	sbiw	r26, 0x01	; 1
    310c:	46 57       	subi	r20, 0x76	; 118
    310e:	57 4e       	sbci	r21, 0xE7	; 231
    3110:	e4 17       	cp	r30, r20
    3112:	f5 07       	cpc	r31, r21
    3114:	29 f4       	brne	.+10     	; 0x3120 <vTaskSwitchContext+0xc8>
    3116:	44 81       	ldd	r20, Z+4	; 0x04
    3118:	55 81       	ldd	r21, Z+5	; 0x05
    311a:	fd 01       	movw	r30, r26
    311c:	52 83       	std	Z+2, r21	; 0x02
    311e:	41 83       	std	Z+1, r20	; 0x01
    3120:	9b e0       	ldi	r25, 0x0B	; 11
    3122:	92 9f       	mul	r25, r18
    3124:	f0 01       	movw	r30, r0
    3126:	93 9f       	mul	r25, r19
    3128:	f0 0d       	add	r31, r0
    312a:	11 24       	eor	r1, r1
    312c:	e9 57       	subi	r30, 0x79	; 121
    312e:	f7 4e       	sbci	r31, 0xE7	; 231
    3130:	01 80       	ldd	r0, Z+1	; 0x01
    3132:	f2 81       	ldd	r31, Z+2	; 0x02
    3134:	e0 2d       	mov	r30, r0
    3136:	20 85       	ldd	r18, Z+8	; 0x08
    3138:	31 85       	ldd	r19, Z+9	; 0x09
    313a:	30 93 b4 18 	sts	0x18B4, r19	; 0x8018b4 <pxCurrentTCB+0x1>
    313e:	20 93 b3 18 	sts	0x18B3, r18	; 0x8018b3 <pxCurrentTCB>
    3142:	80 93 45 18 	sts	0x1845, r24	; 0x801845 <uxTopReadyPriority>
    3146:	e0 91 b3 18 	lds	r30, 0x18B3	; 0x8018b3 <pxCurrentTCB>
    314a:	f0 91 b4 18 	lds	r31, 0x18B4	; 0x8018b4 <pxCurrentTCB+0x1>
    314e:	81 a5       	ldd	r24, Z+41	; 0x29
    3150:	0c 94 56 09 	jmp	0x12ac	; 0x12ac <task_switch_in>
    3154:	08 95       	ret

00003156 <vTaskPlaceOnEventList>:
    3156:	cf 92       	push	r12
    3158:	df 92       	push	r13
    315a:	ef 92       	push	r14
    315c:	ff 92       	push	r15
    315e:	6a 01       	movw	r12, r20
    3160:	7b 01       	movw	r14, r22
    3162:	60 91 b3 18 	lds	r22, 0x18B3	; 0x8018b3 <pxCurrentTCB>
    3166:	70 91 b4 18 	lds	r23, 0x18B4	; 0x8018b4 <pxCurrentTCB+0x1>
    316a:	62 5f       	subi	r22, 0xF2	; 242
    316c:	7f 4f       	sbci	r23, 0xFF	; 255
    316e:	0e 94 3f 0c 	call	0x187e	; 0x187e <vListInsert>
    3172:	41 e0       	ldi	r20, 0x01	; 1
    3174:	c7 01       	movw	r24, r14
    3176:	b6 01       	movw	r22, r12
    3178:	1f dc       	rcall	.-1986   	; 0x29b8 <prvAddCurrentTaskToDelayedList>
    317a:	ff 90       	pop	r15
    317c:	ef 90       	pop	r14
    317e:	df 90       	pop	r13
    3180:	cf 90       	pop	r12
    3182:	08 95       	ret

00003184 <vTaskPlaceOnUnorderedEventList>:
    3184:	cf 92       	push	r12
    3186:	df 92       	push	r13
    3188:	ef 92       	push	r14
    318a:	ff 92       	push	r15
    318c:	0f 93       	push	r16
    318e:	1f 93       	push	r17
    3190:	68 01       	movw	r12, r16
    3192:	79 01       	movw	r14, r18
    3194:	e0 91 b3 18 	lds	r30, 0x18B3	; 0x8018b3 <pxCurrentTCB>
    3198:	f0 91 b4 18 	lds	r31, 0x18B4	; 0x8018b4 <pxCurrentTCB+0x1>
    319c:	70 68       	ori	r23, 0x80	; 128
    319e:	46 87       	std	Z+14, r20	; 0x0e
    31a0:	57 87       	std	Z+15, r21	; 0x0f
    31a2:	60 8b       	std	Z+16, r22	; 0x10
    31a4:	71 8b       	std	Z+17, r23	; 0x11
    31a6:	60 91 b3 18 	lds	r22, 0x18B3	; 0x8018b3 <pxCurrentTCB>
    31aa:	70 91 b4 18 	lds	r23, 0x18B4	; 0x8018b4 <pxCurrentTCB+0x1>
    31ae:	62 5f       	subi	r22, 0xF2	; 242
    31b0:	7f 4f       	sbci	r23, 0xFF	; 255
    31b2:	0e 94 1e 0c 	call	0x183c	; 0x183c <vListInsertEnd>
    31b6:	41 e0       	ldi	r20, 0x01	; 1
    31b8:	c7 01       	movw	r24, r14
    31ba:	b6 01       	movw	r22, r12
    31bc:	fd db       	rcall	.-2054   	; 0x29b8 <prvAddCurrentTaskToDelayedList>
    31be:	1f 91       	pop	r17
    31c0:	0f 91       	pop	r16
    31c2:	ff 90       	pop	r15
    31c4:	ef 90       	pop	r14
    31c6:	df 90       	pop	r13
    31c8:	cf 90       	pop	r12
    31ca:	08 95       	ret

000031cc <vTaskPlaceOnEventListRestricted>:
    31cc:	cf 92       	push	r12
    31ce:	df 92       	push	r13
    31d0:	ef 92       	push	r14
    31d2:	ff 92       	push	r15
    31d4:	cf 93       	push	r28
    31d6:	6a 01       	movw	r12, r20
    31d8:	7b 01       	movw	r14, r22
    31da:	c2 2f       	mov	r28, r18
    31dc:	60 91 b3 18 	lds	r22, 0x18B3	; 0x8018b3 <pxCurrentTCB>
    31e0:	70 91 b4 18 	lds	r23, 0x18B4	; 0x8018b4 <pxCurrentTCB+0x1>
    31e4:	62 5f       	subi	r22, 0xF2	; 242
    31e6:	7f 4f       	sbci	r23, 0xFF	; 255
    31e8:	0e 94 1e 0c 	call	0x183c	; 0x183c <vListInsertEnd>
    31ec:	cc 23       	and	r28, r28
    31ee:	21 f0       	breq	.+8      	; 0x31f8 <vTaskPlaceOnEventListRestricted+0x2c>
    31f0:	cc 24       	eor	r12, r12
    31f2:	ca 94       	dec	r12
    31f4:	dc 2c       	mov	r13, r12
    31f6:	76 01       	movw	r14, r12
    31f8:	4c 2f       	mov	r20, r28
    31fa:	c7 01       	movw	r24, r14
    31fc:	b6 01       	movw	r22, r12
    31fe:	dc db       	rcall	.-2120   	; 0x29b8 <prvAddCurrentTaskToDelayedList>
    3200:	cf 91       	pop	r28
    3202:	ff 90       	pop	r15
    3204:	ef 90       	pop	r14
    3206:	df 90       	pop	r13
    3208:	cf 90       	pop	r12
    320a:	08 95       	ret

0000320c <xTaskRemoveFromEventList>:
    320c:	0f 93       	push	r16
    320e:	1f 93       	push	r17
    3210:	cf 93       	push	r28
    3212:	df 93       	push	r29
    3214:	dc 01       	movw	r26, r24
    3216:	17 96       	adiw	r26, 0x07	; 7
    3218:	ed 91       	ld	r30, X+
    321a:	fc 91       	ld	r31, X
    321c:	18 97       	sbiw	r26, 0x08	; 8
    321e:	c0 85       	ldd	r28, Z+8	; 0x08
    3220:	d1 85       	ldd	r29, Z+9	; 0x09
    3222:	8e 01       	movw	r16, r28
    3224:	02 5f       	subi	r16, 0xF2	; 242
    3226:	1f 4f       	sbci	r17, 0xFF	; 255
    3228:	c8 01       	movw	r24, r16
    322a:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <uxListRemove>
    322e:	80 91 39 18 	lds	r24, 0x1839	; 0x801839 <uxSchedulerSuspended>
    3232:	81 11       	cpse	r24, r1
    3234:	16 c0       	rjmp	.+44     	; 0x3262 <xTaskRemoveFromEventList+0x56>
    3236:	0c 50       	subi	r16, 0x0C	; 12
    3238:	11 09       	sbc	r17, r1
    323a:	c8 01       	movw	r24, r16
    323c:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <uxListRemove>
    3240:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3242:	90 91 45 18 	lds	r25, 0x1845	; 0x801845 <uxTopReadyPriority>
    3246:	98 17       	cp	r25, r24
    3248:	10 f4       	brcc	.+4      	; 0x324e <xTaskRemoveFromEventList+0x42>
    324a:	80 93 45 18 	sts	0x1845, r24	; 0x801845 <uxTopReadyPriority>
    324e:	bb e0       	ldi	r27, 0x0B	; 11
    3250:	8b 9f       	mul	r24, r27
    3252:	c0 01       	movw	r24, r0
    3254:	11 24       	eor	r1, r1
    3256:	b8 01       	movw	r22, r16
    3258:	89 57       	subi	r24, 0x79	; 121
    325a:	97 4e       	sbci	r25, 0xE7	; 231
    325c:	0e 94 1e 0c 	call	0x183c	; 0x183c <vListInsertEnd>
    3260:	05 c0       	rjmp	.+10     	; 0x326c <xTaskRemoveFromEventList+0x60>
    3262:	b8 01       	movw	r22, r16
    3264:	82 e6       	ldi	r24, 0x62	; 98
    3266:	98 e1       	ldi	r25, 0x18	; 24
    3268:	0e 94 1e 0c 	call	0x183c	; 0x183c <vListInsertEnd>
    326c:	e0 91 b3 18 	lds	r30, 0x18B3	; 0x8018b3 <pxCurrentTCB>
    3270:	f0 91 b4 18 	lds	r31, 0x18B4	; 0x8018b4 <pxCurrentTCB+0x1>
    3274:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3276:	82 8d       	ldd	r24, Z+26	; 0x1a
    3278:	89 17       	cp	r24, r25
    327a:	20 f4       	brcc	.+8      	; 0x3284 <xTaskRemoveFromEventList+0x78>
    327c:	81 e0       	ldi	r24, 0x01	; 1
    327e:	80 93 42 18 	sts	0x1842, r24	; 0x801842 <xYieldPending>
    3282:	01 c0       	rjmp	.+2      	; 0x3286 <xTaskRemoveFromEventList+0x7a>
    3284:	80 e0       	ldi	r24, 0x00	; 0
    3286:	df 91       	pop	r29
    3288:	cf 91       	pop	r28
    328a:	1f 91       	pop	r17
    328c:	0f 91       	pop	r16
    328e:	08 95       	ret

00003290 <vTaskRemoveFromUnorderedEventList>:
    3290:	0f 93       	push	r16
    3292:	1f 93       	push	r17
    3294:	cf 93       	push	r28
    3296:	df 93       	push	r29
    3298:	70 68       	ori	r23, 0x80	; 128
    329a:	fc 01       	movw	r30, r24
    329c:	40 83       	st	Z, r20
    329e:	51 83       	std	Z+1, r21	; 0x01
    32a0:	62 83       	std	Z+2, r22	; 0x02
    32a2:	73 83       	std	Z+3, r23	; 0x03
    32a4:	c0 85       	ldd	r28, Z+8	; 0x08
    32a6:	d1 85       	ldd	r29, Z+9	; 0x09
    32a8:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <uxListRemove>
    32ac:	8e 01       	movw	r16, r28
    32ae:	0e 5f       	subi	r16, 0xFE	; 254
    32b0:	1f 4f       	sbci	r17, 0xFF	; 255
    32b2:	c8 01       	movw	r24, r16
    32b4:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <uxListRemove>
    32b8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    32ba:	90 91 45 18 	lds	r25, 0x1845	; 0x801845 <uxTopReadyPriority>
    32be:	98 17       	cp	r25, r24
    32c0:	10 f4       	brcc	.+4      	; 0x32c6 <vTaskRemoveFromUnorderedEventList+0x36>
    32c2:	80 93 45 18 	sts	0x1845, r24	; 0x801845 <uxTopReadyPriority>
    32c6:	fb e0       	ldi	r31, 0x0B	; 11
    32c8:	8f 9f       	mul	r24, r31
    32ca:	c0 01       	movw	r24, r0
    32cc:	11 24       	eor	r1, r1
    32ce:	b8 01       	movw	r22, r16
    32d0:	89 57       	subi	r24, 0x79	; 121
    32d2:	97 4e       	sbci	r25, 0xE7	; 231
    32d4:	0e 94 1e 0c 	call	0x183c	; 0x183c <vListInsertEnd>
    32d8:	e0 91 b3 18 	lds	r30, 0x18B3	; 0x8018b3 <pxCurrentTCB>
    32dc:	f0 91 b4 18 	lds	r31, 0x18B4	; 0x8018b4 <pxCurrentTCB+0x1>
    32e0:	9a 8d       	ldd	r25, Y+26	; 0x1a
    32e2:	82 8d       	ldd	r24, Z+26	; 0x1a
    32e4:	89 17       	cp	r24, r25
    32e6:	18 f4       	brcc	.+6      	; 0x32ee <vTaskRemoveFromUnorderedEventList+0x5e>
    32e8:	81 e0       	ldi	r24, 0x01	; 1
    32ea:	80 93 42 18 	sts	0x1842, r24	; 0x801842 <xYieldPending>
    32ee:	df 91       	pop	r29
    32f0:	cf 91       	pop	r28
    32f2:	1f 91       	pop	r17
    32f4:	0f 91       	pop	r16
    32f6:	08 95       	ret

000032f8 <vTaskSetTimeOutState>:
    32f8:	0f b6       	in	r0, 0x3f	; 63
    32fa:	f8 94       	cli
    32fc:	0f 92       	push	r0
    32fe:	20 91 41 18 	lds	r18, 0x1841	; 0x801841 <xNumOfOverflows>
    3302:	fc 01       	movw	r30, r24
    3304:	20 83       	st	Z, r18
    3306:	40 91 46 18 	lds	r20, 0x1846	; 0x801846 <xTickCount>
    330a:	50 91 47 18 	lds	r21, 0x1847	; 0x801847 <xTickCount+0x1>
    330e:	60 91 48 18 	lds	r22, 0x1848	; 0x801848 <xTickCount+0x2>
    3312:	70 91 49 18 	lds	r23, 0x1849	; 0x801849 <xTickCount+0x3>
    3316:	41 83       	std	Z+1, r20	; 0x01
    3318:	52 83       	std	Z+2, r21	; 0x02
    331a:	63 83       	std	Z+3, r22	; 0x03
    331c:	74 83       	std	Z+4, r23	; 0x04
    331e:	0f 90       	pop	r0
    3320:	0f be       	out	0x3f, r0	; 63
    3322:	08 95       	ret

00003324 <vTaskInternalSetTimeOutState>:
    3324:	20 91 41 18 	lds	r18, 0x1841	; 0x801841 <xNumOfOverflows>
    3328:	fc 01       	movw	r30, r24
    332a:	20 83       	st	Z, r18
    332c:	40 91 46 18 	lds	r20, 0x1846	; 0x801846 <xTickCount>
    3330:	50 91 47 18 	lds	r21, 0x1847	; 0x801847 <xTickCount+0x1>
    3334:	60 91 48 18 	lds	r22, 0x1848	; 0x801848 <xTickCount+0x2>
    3338:	70 91 49 18 	lds	r23, 0x1849	; 0x801849 <xTickCount+0x3>
    333c:	41 83       	std	Z+1, r20	; 0x01
    333e:	52 83       	std	Z+2, r21	; 0x02
    3340:	63 83       	std	Z+3, r22	; 0x03
    3342:	74 83       	std	Z+4, r23	; 0x04
    3344:	08 95       	ret

00003346 <xTaskCheckForTimeOut>:
    3346:	cf 92       	push	r12
    3348:	df 92       	push	r13
    334a:	ef 92       	push	r14
    334c:	ff 92       	push	r15
    334e:	0f 93       	push	r16
    3350:	1f 93       	push	r17
    3352:	cf 93       	push	r28
    3354:	df 93       	push	r29
    3356:	fb 01       	movw	r30, r22
    3358:	0f b6       	in	r0, 0x3f	; 63
    335a:	f8 94       	cli
    335c:	0f 92       	push	r0
    335e:	40 91 46 18 	lds	r20, 0x1846	; 0x801846 <xTickCount>
    3362:	50 91 47 18 	lds	r21, 0x1847	; 0x801847 <xTickCount+0x1>
    3366:	60 91 48 18 	lds	r22, 0x1848	; 0x801848 <xTickCount+0x2>
    336a:	70 91 49 18 	lds	r23, 0x1849	; 0x801849 <xTickCount+0x3>
    336e:	00 81       	ld	r16, Z
    3370:	11 81       	ldd	r17, Z+1	; 0x01
    3372:	22 81       	ldd	r18, Z+2	; 0x02
    3374:	33 81       	ldd	r19, Z+3	; 0x03
    3376:	0f 3f       	cpi	r16, 0xFF	; 255
    3378:	af ef       	ldi	r26, 0xFF	; 255
    337a:	1a 07       	cpc	r17, r26
    337c:	2a 07       	cpc	r18, r26
    337e:	3a 07       	cpc	r19, r26
    3380:	49 f1       	breq	.+82     	; 0x33d4 <xTaskCheckForTimeOut+0x8e>
    3382:	ec 01       	movw	r28, r24
    3384:	c9 80       	ldd	r12, Y+1	; 0x01
    3386:	da 80       	ldd	r13, Y+2	; 0x02
    3388:	eb 80       	ldd	r14, Y+3	; 0x03
    338a:	fc 80       	ldd	r15, Y+4	; 0x04
    338c:	a0 91 41 18 	lds	r26, 0x1841	; 0x801841 <xNumOfOverflows>
    3390:	b8 81       	ld	r27, Y
    3392:	ba 17       	cp	r27, r26
    3394:	29 f0       	breq	.+10     	; 0x33a0 <xTaskCheckForTimeOut+0x5a>
    3396:	4c 15       	cp	r20, r12
    3398:	5d 05       	cpc	r21, r13
    339a:	6e 05       	cpc	r22, r14
    339c:	7f 05       	cpc	r23, r15
    339e:	e0 f4       	brcc	.+56     	; 0x33d8 <xTaskCheckForTimeOut+0x92>
    33a0:	4c 19       	sub	r20, r12
    33a2:	5d 09       	sbc	r21, r13
    33a4:	6e 09       	sbc	r22, r14
    33a6:	7f 09       	sbc	r23, r15
    33a8:	40 17       	cp	r20, r16
    33aa:	51 07       	cpc	r21, r17
    33ac:	62 07       	cpc	r22, r18
    33ae:	73 07       	cpc	r23, r19
    33b0:	58 f4       	brcc	.+22     	; 0x33c8 <xTaskCheckForTimeOut+0x82>
    33b2:	04 1b       	sub	r16, r20
    33b4:	15 0b       	sbc	r17, r21
    33b6:	26 0b       	sbc	r18, r22
    33b8:	37 0b       	sbc	r19, r23
    33ba:	00 83       	st	Z, r16
    33bc:	11 83       	std	Z+1, r17	; 0x01
    33be:	22 83       	std	Z+2, r18	; 0x02
    33c0:	33 83       	std	Z+3, r19	; 0x03
    33c2:	b0 df       	rcall	.-160    	; 0x3324 <vTaskInternalSetTimeOutState>
    33c4:	80 e0       	ldi	r24, 0x00	; 0
    33c6:	09 c0       	rjmp	.+18     	; 0x33da <xTaskCheckForTimeOut+0x94>
    33c8:	10 82       	st	Z, r1
    33ca:	11 82       	std	Z+1, r1	; 0x01
    33cc:	12 82       	std	Z+2, r1	; 0x02
    33ce:	13 82       	std	Z+3, r1	; 0x03
    33d0:	81 e0       	ldi	r24, 0x01	; 1
    33d2:	03 c0       	rjmp	.+6      	; 0x33da <xTaskCheckForTimeOut+0x94>
    33d4:	80 e0       	ldi	r24, 0x00	; 0
    33d6:	01 c0       	rjmp	.+2      	; 0x33da <xTaskCheckForTimeOut+0x94>
    33d8:	81 e0       	ldi	r24, 0x01	; 1
    33da:	0f 90       	pop	r0
    33dc:	0f be       	out	0x3f, r0	; 63
    33de:	df 91       	pop	r29
    33e0:	cf 91       	pop	r28
    33e2:	1f 91       	pop	r17
    33e4:	0f 91       	pop	r16
    33e6:	ff 90       	pop	r15
    33e8:	ef 90       	pop	r14
    33ea:	df 90       	pop	r13
    33ec:	cf 90       	pop	r12
    33ee:	08 95       	ret

000033f0 <vTaskMissedYield>:
    33f0:	81 e0       	ldi	r24, 0x01	; 1
    33f2:	80 93 42 18 	sts	0x1842, r24	; 0x801842 <xYieldPending>
    33f6:	08 95       	ret

000033f8 <xTaskGetCurrentTaskHandle>:
    33f8:	80 91 b3 18 	lds	r24, 0x18B3	; 0x8018b3 <pxCurrentTCB>
    33fc:	90 91 b4 18 	lds	r25, 0x18B4	; 0x8018b4 <pxCurrentTCB+0x1>
    3400:	08 95       	ret

00003402 <xTaskGetSchedulerState>:
    3402:	80 91 44 18 	lds	r24, 0x1844	; 0x801844 <xSchedulerRunning>
    3406:	88 23       	and	r24, r24
    3408:	31 f0       	breq	.+12     	; 0x3416 <xTaskGetSchedulerState+0x14>
    340a:	80 91 39 18 	lds	r24, 0x1839	; 0x801839 <uxSchedulerSuspended>
    340e:	88 23       	and	r24, r24
    3410:	21 f0       	breq	.+8      	; 0x341a <xTaskGetSchedulerState+0x18>
    3412:	80 e0       	ldi	r24, 0x00	; 0
    3414:	08 95       	ret
    3416:	81 e0       	ldi	r24, 0x01	; 1
    3418:	08 95       	ret
    341a:	82 e0       	ldi	r24, 0x02	; 2
    341c:	08 95       	ret

0000341e <xTaskPriorityInherit>:
    341e:	0f 93       	push	r16
    3420:	1f 93       	push	r17
    3422:	cf 93       	push	r28
    3424:	df 93       	push	r29
    3426:	fc 01       	movw	r30, r24
    3428:	89 2b       	or	r24, r25
    342a:	09 f4       	brne	.+2      	; 0x342e <xTaskPriorityInherit+0x10>
    342c:	60 c0       	rjmp	.+192    	; 0x34ee <xTaskPriorityInherit+0xd0>
    342e:	82 8d       	ldd	r24, Z+26	; 0x1a
    3430:	a0 91 b3 18 	lds	r26, 0x18B3	; 0x8018b3 <pxCurrentTCB>
    3434:	b0 91 b4 18 	lds	r27, 0x18B4	; 0x8018b4 <pxCurrentTCB+0x1>
    3438:	5a 96       	adiw	r26, 0x1a	; 26
    343a:	9c 91       	ld	r25, X
    343c:	89 17       	cp	r24, r25
    343e:	08 f0       	brcs	.+2      	; 0x3442 <xTaskPriorityInherit+0x24>
    3440:	4a c0       	rjmp	.+148    	; 0x34d6 <xTaskPriorityInherit+0xb8>
    3442:	46 85       	ldd	r20, Z+14	; 0x0e
    3444:	57 85       	ldd	r21, Z+15	; 0x0f
    3446:	60 89       	ldd	r22, Z+16	; 0x10
    3448:	71 89       	ldd	r23, Z+17	; 0x11
    344a:	77 23       	and	r23, r23
    344c:	94 f0       	brlt	.+36     	; 0x3472 <xTaskPriorityInherit+0x54>
    344e:	a0 91 b3 18 	lds	r26, 0x18B3	; 0x8018b3 <pxCurrentTCB>
    3452:	b0 91 b4 18 	lds	r27, 0x18B4	; 0x8018b4 <pxCurrentTCB+0x1>
    3456:	5a 96       	adiw	r26, 0x1a	; 26
    3458:	9c 91       	ld	r25, X
    345a:	44 e0       	ldi	r20, 0x04	; 4
    345c:	50 e0       	ldi	r21, 0x00	; 0
    345e:	60 e0       	ldi	r22, 0x00	; 0
    3460:	70 e0       	ldi	r23, 0x00	; 0
    3462:	49 1b       	sub	r20, r25
    3464:	51 09       	sbc	r21, r1
    3466:	61 09       	sbc	r22, r1
    3468:	71 09       	sbc	r23, r1
    346a:	46 87       	std	Z+14, r20	; 0x0e
    346c:	57 87       	std	Z+15, r21	; 0x0f
    346e:	60 8b       	std	Z+16, r22	; 0x10
    3470:	71 8b       	std	Z+17, r23	; 0x11
    3472:	2b e0       	ldi	r18, 0x0B	; 11
    3474:	82 9f       	mul	r24, r18
    3476:	c0 01       	movw	r24, r0
    3478:	11 24       	eor	r1, r1
    347a:	89 57       	subi	r24, 0x79	; 121
    347c:	97 4e       	sbci	r25, 0xE7	; 231
    347e:	24 85       	ldd	r18, Z+12	; 0x0c
    3480:	35 85       	ldd	r19, Z+13	; 0x0d
    3482:	28 17       	cp	r18, r24
    3484:	39 07       	cpc	r19, r25
    3486:	f1 f4       	brne	.+60     	; 0x34c4 <xTaskPriorityInherit+0xa6>
    3488:	8f 01       	movw	r16, r30
    348a:	ef 01       	movw	r28, r30
    348c:	22 96       	adiw	r28, 0x02	; 2
    348e:	ce 01       	movw	r24, r28
    3490:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <uxListRemove>
    3494:	e0 91 b3 18 	lds	r30, 0x18B3	; 0x8018b3 <pxCurrentTCB>
    3498:	f0 91 b4 18 	lds	r31, 0x18B4	; 0x8018b4 <pxCurrentTCB+0x1>
    349c:	82 8d       	ldd	r24, Z+26	; 0x1a
    349e:	f8 01       	movw	r30, r16
    34a0:	82 8f       	std	Z+26, r24	; 0x1a
    34a2:	90 91 45 18 	lds	r25, 0x1845	; 0x801845 <uxTopReadyPriority>
    34a6:	98 17       	cp	r25, r24
    34a8:	10 f4       	brcc	.+4      	; 0x34ae <xTaskPriorityInherit+0x90>
    34aa:	80 93 45 18 	sts	0x1845, r24	; 0x801845 <uxTopReadyPriority>
    34ae:	fb e0       	ldi	r31, 0x0B	; 11
    34b0:	8f 9f       	mul	r24, r31
    34b2:	c0 01       	movw	r24, r0
    34b4:	11 24       	eor	r1, r1
    34b6:	be 01       	movw	r22, r28
    34b8:	89 57       	subi	r24, 0x79	; 121
    34ba:	97 4e       	sbci	r25, 0xE7	; 231
    34bc:	0e 94 1e 0c 	call	0x183c	; 0x183c <vListInsertEnd>
    34c0:	81 e0       	ldi	r24, 0x01	; 1
    34c2:	16 c0       	rjmp	.+44     	; 0x34f0 <xTaskPriorityInherit+0xd2>
    34c4:	a0 91 b3 18 	lds	r26, 0x18B3	; 0x8018b3 <pxCurrentTCB>
    34c8:	b0 91 b4 18 	lds	r27, 0x18B4	; 0x8018b4 <pxCurrentTCB+0x1>
    34cc:	5a 96       	adiw	r26, 0x1a	; 26
    34ce:	8c 91       	ld	r24, X
    34d0:	82 8f       	std	Z+26, r24	; 0x1a
    34d2:	81 e0       	ldi	r24, 0x01	; 1
    34d4:	0d c0       	rjmp	.+26     	; 0x34f0 <xTaskPriorityInherit+0xd2>
    34d6:	a0 91 b3 18 	lds	r26, 0x18B3	; 0x8018b3 <pxCurrentTCB>
    34da:	b0 91 b4 18 	lds	r27, 0x18B4	; 0x8018b4 <pxCurrentTCB+0x1>
    34de:	81 e0       	ldi	r24, 0x01	; 1
    34e0:	27 a1       	ldd	r18, Z+39	; 0x27
    34e2:	5a 96       	adiw	r26, 0x1a	; 26
    34e4:	9c 91       	ld	r25, X
    34e6:	29 17       	cp	r18, r25
    34e8:	18 f0       	brcs	.+6      	; 0x34f0 <xTaskPriorityInherit+0xd2>
    34ea:	80 e0       	ldi	r24, 0x00	; 0
    34ec:	01 c0       	rjmp	.+2      	; 0x34f0 <xTaskPriorityInherit+0xd2>
    34ee:	80 e0       	ldi	r24, 0x00	; 0
    34f0:	df 91       	pop	r29
    34f2:	cf 91       	pop	r28
    34f4:	1f 91       	pop	r17
    34f6:	0f 91       	pop	r16
    34f8:	08 95       	ret

000034fa <xTaskPriorityDisinherit>:
    34fa:	0f 93       	push	r16
    34fc:	1f 93       	push	r17
    34fe:	cf 93       	push	r28
    3500:	df 93       	push	r29
    3502:	fc 01       	movw	r30, r24
    3504:	89 2b       	or	r24, r25
    3506:	79 f1       	breq	.+94     	; 0x3566 <xTaskPriorityDisinherit+0x6c>
    3508:	80 a5       	ldd	r24, Z+40	; 0x28
    350a:	81 50       	subi	r24, 0x01	; 1
    350c:	80 a7       	std	Z+40, r24	; 0x28
    350e:	22 8d       	ldd	r18, Z+26	; 0x1a
    3510:	97 a1       	ldd	r25, Z+39	; 0x27
    3512:	29 17       	cp	r18, r25
    3514:	51 f1       	breq	.+84     	; 0x356a <xTaskPriorityDisinherit+0x70>
    3516:	81 11       	cpse	r24, r1
    3518:	2a c0       	rjmp	.+84     	; 0x356e <xTaskPriorityDisinherit+0x74>
    351a:	ef 01       	movw	r28, r30
    351c:	8f 01       	movw	r16, r30
    351e:	0e 5f       	subi	r16, 0xFE	; 254
    3520:	1f 4f       	sbci	r17, 0xFF	; 255
    3522:	c8 01       	movw	r24, r16
    3524:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <uxListRemove>
    3528:	8f a1       	ldd	r24, Y+39	; 0x27
    352a:	8a 8f       	std	Y+26, r24	; 0x1a
    352c:	44 e0       	ldi	r20, 0x04	; 4
    352e:	50 e0       	ldi	r21, 0x00	; 0
    3530:	60 e0       	ldi	r22, 0x00	; 0
    3532:	70 e0       	ldi	r23, 0x00	; 0
    3534:	48 1b       	sub	r20, r24
    3536:	51 09       	sbc	r21, r1
    3538:	61 09       	sbc	r22, r1
    353a:	71 09       	sbc	r23, r1
    353c:	4e 87       	std	Y+14, r20	; 0x0e
    353e:	5f 87       	std	Y+15, r21	; 0x0f
    3540:	68 8b       	std	Y+16, r22	; 0x10
    3542:	79 8b       	std	Y+17, r23	; 0x11
    3544:	90 91 45 18 	lds	r25, 0x1845	; 0x801845 <uxTopReadyPriority>
    3548:	98 17       	cp	r25, r24
    354a:	10 f4       	brcc	.+4      	; 0x3550 <xTaskPriorityDisinherit+0x56>
    354c:	80 93 45 18 	sts	0x1845, r24	; 0x801845 <uxTopReadyPriority>
    3550:	2b e0       	ldi	r18, 0x0B	; 11
    3552:	82 9f       	mul	r24, r18
    3554:	c0 01       	movw	r24, r0
    3556:	11 24       	eor	r1, r1
    3558:	b8 01       	movw	r22, r16
    355a:	89 57       	subi	r24, 0x79	; 121
    355c:	97 4e       	sbci	r25, 0xE7	; 231
    355e:	0e 94 1e 0c 	call	0x183c	; 0x183c <vListInsertEnd>
    3562:	81 e0       	ldi	r24, 0x01	; 1
    3564:	05 c0       	rjmp	.+10     	; 0x3570 <xTaskPriorityDisinherit+0x76>
    3566:	80 e0       	ldi	r24, 0x00	; 0
    3568:	03 c0       	rjmp	.+6      	; 0x3570 <xTaskPriorityDisinherit+0x76>
    356a:	80 e0       	ldi	r24, 0x00	; 0
    356c:	01 c0       	rjmp	.+2      	; 0x3570 <xTaskPriorityDisinherit+0x76>
    356e:	80 e0       	ldi	r24, 0x00	; 0
    3570:	df 91       	pop	r29
    3572:	cf 91       	pop	r28
    3574:	1f 91       	pop	r17
    3576:	0f 91       	pop	r16
    3578:	08 95       	ret

0000357a <vTaskPriorityDisinheritAfterTimeout>:
    357a:	0f 93       	push	r16
    357c:	1f 93       	push	r17
    357e:	cf 93       	push	r28
    3580:	df 93       	push	r29
    3582:	fc 01       	movw	r30, r24
    3584:	89 2b       	or	r24, r25
    3586:	09 f4       	brne	.+2      	; 0x358a <vTaskPriorityDisinheritAfterTimeout+0x10>
    3588:	3f c0       	rjmp	.+126    	; 0x3608 <vTaskPriorityDisinheritAfterTimeout+0x8e>
    358a:	87 a1       	ldd	r24, Z+39	; 0x27
    358c:	86 17       	cp	r24, r22
    358e:	08 f4       	brcc	.+2      	; 0x3592 <vTaskPriorityDisinheritAfterTimeout+0x18>
    3590:	86 2f       	mov	r24, r22
    3592:	92 8d       	ldd	r25, Z+26	; 0x1a
    3594:	98 17       	cp	r25, r24
    3596:	c1 f1       	breq	.+112    	; 0x3608 <vTaskPriorityDisinheritAfterTimeout+0x8e>
    3598:	20 a5       	ldd	r18, Z+40	; 0x28
    359a:	21 30       	cpi	r18, 0x01	; 1
    359c:	a9 f5       	brne	.+106    	; 0x3608 <vTaskPriorityDisinheritAfterTimeout+0x8e>
    359e:	82 8f       	std	Z+26, r24	; 0x1a
    35a0:	46 85       	ldd	r20, Z+14	; 0x0e
    35a2:	57 85       	ldd	r21, Z+15	; 0x0f
    35a4:	60 89       	ldd	r22, Z+16	; 0x10
    35a6:	71 89       	ldd	r23, Z+17	; 0x11
    35a8:	77 23       	and	r23, r23
    35aa:	64 f0       	brlt	.+24     	; 0x35c4 <vTaskPriorityDisinheritAfterTimeout+0x4a>
    35ac:	44 e0       	ldi	r20, 0x04	; 4
    35ae:	50 e0       	ldi	r21, 0x00	; 0
    35b0:	60 e0       	ldi	r22, 0x00	; 0
    35b2:	70 e0       	ldi	r23, 0x00	; 0
    35b4:	48 1b       	sub	r20, r24
    35b6:	51 09       	sbc	r21, r1
    35b8:	61 09       	sbc	r22, r1
    35ba:	71 09       	sbc	r23, r1
    35bc:	46 87       	std	Z+14, r20	; 0x0e
    35be:	57 87       	std	Z+15, r21	; 0x0f
    35c0:	60 8b       	std	Z+16, r22	; 0x10
    35c2:	71 8b       	std	Z+17, r23	; 0x11
    35c4:	2b e0       	ldi	r18, 0x0B	; 11
    35c6:	92 9f       	mul	r25, r18
    35c8:	c0 01       	movw	r24, r0
    35ca:	11 24       	eor	r1, r1
    35cc:	89 57       	subi	r24, 0x79	; 121
    35ce:	97 4e       	sbci	r25, 0xE7	; 231
    35d0:	24 85       	ldd	r18, Z+12	; 0x0c
    35d2:	35 85       	ldd	r19, Z+13	; 0x0d
    35d4:	28 17       	cp	r18, r24
    35d6:	39 07       	cpc	r19, r25
    35d8:	b9 f4       	brne	.+46     	; 0x3608 <vTaskPriorityDisinheritAfterTimeout+0x8e>
    35da:	ef 01       	movw	r28, r30
    35dc:	8f 01       	movw	r16, r30
    35de:	0e 5f       	subi	r16, 0xFE	; 254
    35e0:	1f 4f       	sbci	r17, 0xFF	; 255
    35e2:	c8 01       	movw	r24, r16
    35e4:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <uxListRemove>
    35e8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    35ea:	90 91 45 18 	lds	r25, 0x1845	; 0x801845 <uxTopReadyPriority>
    35ee:	98 17       	cp	r25, r24
    35f0:	10 f4       	brcc	.+4      	; 0x35f6 <vTaskPriorityDisinheritAfterTimeout+0x7c>
    35f2:	80 93 45 18 	sts	0x1845, r24	; 0x801845 <uxTopReadyPriority>
    35f6:	2b e0       	ldi	r18, 0x0B	; 11
    35f8:	82 9f       	mul	r24, r18
    35fa:	c0 01       	movw	r24, r0
    35fc:	11 24       	eor	r1, r1
    35fe:	b8 01       	movw	r22, r16
    3600:	89 57       	subi	r24, 0x79	; 121
    3602:	97 4e       	sbci	r25, 0xE7	; 231
    3604:	0e 94 1e 0c 	call	0x183c	; 0x183c <vListInsertEnd>
    3608:	df 91       	pop	r29
    360a:	cf 91       	pop	r28
    360c:	1f 91       	pop	r17
    360e:	0f 91       	pop	r16
    3610:	08 95       	ret

00003612 <uxTaskResetEventItemValue>:
    3612:	cf 92       	push	r12
    3614:	df 92       	push	r13
    3616:	ef 92       	push	r14
    3618:	ff 92       	push	r15
    361a:	e0 91 b3 18 	lds	r30, 0x18B3	; 0x8018b3 <pxCurrentTCB>
    361e:	f0 91 b4 18 	lds	r31, 0x18B4	; 0x8018b4 <pxCurrentTCB+0x1>
    3622:	66 85       	ldd	r22, Z+14	; 0x0e
    3624:	77 85       	ldd	r23, Z+15	; 0x0f
    3626:	80 89       	ldd	r24, Z+16	; 0x10
    3628:	91 89       	ldd	r25, Z+17	; 0x11
    362a:	e0 91 b3 18 	lds	r30, 0x18B3	; 0x8018b3 <pxCurrentTCB>
    362e:	f0 91 b4 18 	lds	r31, 0x18B4	; 0x8018b4 <pxCurrentTCB+0x1>
    3632:	a0 91 b3 18 	lds	r26, 0x18B3	; 0x8018b3 <pxCurrentTCB>
    3636:	b0 91 b4 18 	lds	r27, 0x18B4	; 0x8018b4 <pxCurrentTCB+0x1>
    363a:	5a 96       	adiw	r26, 0x1a	; 26
    363c:	2c 91       	ld	r18, X
    363e:	c1 2c       	mov	r12, r1
    3640:	d1 2c       	mov	r13, r1
    3642:	76 01       	movw	r14, r12
    3644:	68 94       	set
    3646:	c2 f8       	bld	r12, 2
    3648:	c2 1a       	sub	r12, r18
    364a:	d1 08       	sbc	r13, r1
    364c:	e1 08       	sbc	r14, r1
    364e:	f1 08       	sbc	r15, r1
    3650:	c6 86       	std	Z+14, r12	; 0x0e
    3652:	d7 86       	std	Z+15, r13	; 0x0f
    3654:	e0 8a       	std	Z+16, r14	; 0x10
    3656:	f1 8a       	std	Z+17, r15	; 0x11
    3658:	ff 90       	pop	r15
    365a:	ef 90       	pop	r14
    365c:	df 90       	pop	r13
    365e:	cf 90       	pop	r12
    3660:	08 95       	ret

00003662 <pvTaskIncrementMutexHeldCount>:
    3662:	80 91 b3 18 	lds	r24, 0x18B3	; 0x8018b3 <pxCurrentTCB>
    3666:	90 91 b4 18 	lds	r25, 0x18B4	; 0x8018b4 <pxCurrentTCB+0x1>
    366a:	89 2b       	or	r24, r25
    366c:	39 f0       	breq	.+14     	; 0x367c <pvTaskIncrementMutexHeldCount+0x1a>
    366e:	e0 91 b3 18 	lds	r30, 0x18B3	; 0x8018b3 <pxCurrentTCB>
    3672:	f0 91 b4 18 	lds	r31, 0x18B4	; 0x8018b4 <pxCurrentTCB+0x1>
    3676:	80 a5       	ldd	r24, Z+40	; 0x28
    3678:	8f 5f       	subi	r24, 0xFF	; 255
    367a:	80 a7       	std	Z+40, r24	; 0x28
    367c:	80 91 b3 18 	lds	r24, 0x18B3	; 0x8018b3 <pxCurrentTCB>
    3680:	90 91 b4 18 	lds	r25, 0x18B4	; 0x8018b4 <pxCurrentTCB+0x1>
    3684:	08 95       	ret

00003686 <xTaskNotifyWait>:
    3686:	4f 92       	push	r4
    3688:	5f 92       	push	r5
    368a:	6f 92       	push	r6
    368c:	7f 92       	push	r7
    368e:	8f 92       	push	r8
    3690:	9f 92       	push	r9
    3692:	af 92       	push	r10
    3694:	bf 92       	push	r11
    3696:	cf 92       	push	r12
    3698:	df 92       	push	r13
    369a:	ef 92       	push	r14
    369c:	ff 92       	push	r15
    369e:	0f 93       	push	r16
    36a0:	1f 93       	push	r17
    36a2:	49 01       	movw	r8, r18
    36a4:	5a 01       	movw	r10, r20
    36a6:	0f b6       	in	r0, 0x3f	; 63
    36a8:	f8 94       	cli
    36aa:	0f 92       	push	r0
    36ac:	e0 91 b3 18 	lds	r30, 0x18B3	; 0x8018b3 <pxCurrentTCB>
    36b0:	f0 91 b4 18 	lds	r31, 0x18B4	; 0x8018b4 <pxCurrentTCB+0x1>
    36b4:	27 a5       	ldd	r18, Z+47	; 0x2f
    36b6:	22 30       	cpi	r18, 0x02	; 2
    36b8:	39 f1       	breq	.+78     	; 0x3708 <xTaskNotifyWait+0x82>
    36ba:	e0 91 b3 18 	lds	r30, 0x18B3	; 0x8018b3 <pxCurrentTCB>
    36be:	f0 91 b4 18 	lds	r31, 0x18B4	; 0x8018b4 <pxCurrentTCB+0x1>
    36c2:	43 a4       	ldd	r4, Z+43	; 0x2b
    36c4:	54 a4       	ldd	r5, Z+44	; 0x2c
    36c6:	65 a4       	ldd	r6, Z+45	; 0x2d
    36c8:	76 a4       	ldd	r7, Z+46	; 0x2e
    36ca:	dc 01       	movw	r26, r24
    36cc:	cb 01       	movw	r24, r22
    36ce:	80 95       	com	r24
    36d0:	90 95       	com	r25
    36d2:	a0 95       	com	r26
    36d4:	b0 95       	com	r27
    36d6:	84 21       	and	r24, r4
    36d8:	95 21       	and	r25, r5
    36da:	a6 21       	and	r26, r6
    36dc:	b7 21       	and	r27, r7
    36de:	83 a7       	std	Z+43, r24	; 0x2b
    36e0:	94 a7       	std	Z+44, r25	; 0x2c
    36e2:	a5 a7       	std	Z+45, r26	; 0x2d
    36e4:	b6 a7       	std	Z+46, r27	; 0x2e
    36e6:	e0 91 b3 18 	lds	r30, 0x18B3	; 0x8018b3 <pxCurrentTCB>
    36ea:	f0 91 b4 18 	lds	r31, 0x18B4	; 0x8018b4 <pxCurrentTCB+0x1>
    36ee:	81 e0       	ldi	r24, 0x01	; 1
    36f0:	87 a7       	std	Z+47, r24	; 0x2f
    36f2:	c1 14       	cp	r12, r1
    36f4:	d1 04       	cpc	r13, r1
    36f6:	e1 04       	cpc	r14, r1
    36f8:	f1 04       	cpc	r15, r1
    36fa:	31 f0       	breq	.+12     	; 0x3708 <xTaskNotifyWait+0x82>
    36fc:	41 e0       	ldi	r20, 0x01	; 1
    36fe:	c7 01       	movw	r24, r14
    3700:	b6 01       	movw	r22, r12
    3702:	5a d9       	rcall	.-3404   	; 0x29b8 <prvAddCurrentTaskToDelayedList>
    3704:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <vPortYield>
    3708:	0f 90       	pop	r0
    370a:	0f be       	out	0x3f, r0	; 63
    370c:	0f b6       	in	r0, 0x3f	; 63
    370e:	f8 94       	cli
    3710:	0f 92       	push	r0
    3712:	01 15       	cp	r16, r1
    3714:	11 05       	cpc	r17, r1
    3716:	69 f0       	breq	.+26     	; 0x3732 <xTaskNotifyWait+0xac>
    3718:	e0 91 b3 18 	lds	r30, 0x18B3	; 0x8018b3 <pxCurrentTCB>
    371c:	f0 91 b4 18 	lds	r31, 0x18B4	; 0x8018b4 <pxCurrentTCB+0x1>
    3720:	83 a5       	ldd	r24, Z+43	; 0x2b
    3722:	94 a5       	ldd	r25, Z+44	; 0x2c
    3724:	a5 a5       	ldd	r26, Z+45	; 0x2d
    3726:	b6 a5       	ldd	r27, Z+46	; 0x2e
    3728:	f8 01       	movw	r30, r16
    372a:	80 83       	st	Z, r24
    372c:	91 83       	std	Z+1, r25	; 0x01
    372e:	a2 83       	std	Z+2, r26	; 0x02
    3730:	b3 83       	std	Z+3, r27	; 0x03
    3732:	e0 91 b3 18 	lds	r30, 0x18B3	; 0x8018b3 <pxCurrentTCB>
    3736:	f0 91 b4 18 	lds	r31, 0x18B4	; 0x8018b4 <pxCurrentTCB+0x1>
    373a:	87 a5       	ldd	r24, Z+47	; 0x2f
    373c:	82 30       	cpi	r24, 0x02	; 2
    373e:	b1 f4       	brne	.+44     	; 0x376c <xTaskNotifyWait+0xe6>
    3740:	e0 91 b3 18 	lds	r30, 0x18B3	; 0x8018b3 <pxCurrentTCB>
    3744:	f0 91 b4 18 	lds	r31, 0x18B4	; 0x8018b4 <pxCurrentTCB+0x1>
    3748:	83 a5       	ldd	r24, Z+43	; 0x2b
    374a:	94 a5       	ldd	r25, Z+44	; 0x2c
    374c:	a5 a5       	ldd	r26, Z+45	; 0x2d
    374e:	b6 a5       	ldd	r27, Z+46	; 0x2e
    3750:	80 94       	com	r8
    3752:	90 94       	com	r9
    3754:	a0 94       	com	r10
    3756:	b0 94       	com	r11
    3758:	88 22       	and	r8, r24
    375a:	99 22       	and	r9, r25
    375c:	aa 22       	and	r10, r26
    375e:	bb 22       	and	r11, r27
    3760:	83 a6       	std	Z+43, r8	; 0x2b
    3762:	94 a6       	std	Z+44, r9	; 0x2c
    3764:	a5 a6       	std	Z+45, r10	; 0x2d
    3766:	b6 a6       	std	Z+46, r11	; 0x2e
    3768:	81 e0       	ldi	r24, 0x01	; 1
    376a:	01 c0       	rjmp	.+2      	; 0x376e <xTaskNotifyWait+0xe8>
    376c:	80 e0       	ldi	r24, 0x00	; 0
    376e:	e0 91 b3 18 	lds	r30, 0x18B3	; 0x8018b3 <pxCurrentTCB>
    3772:	f0 91 b4 18 	lds	r31, 0x18B4	; 0x8018b4 <pxCurrentTCB+0x1>
    3776:	17 a6       	std	Z+47, r1	; 0x2f
    3778:	0f 90       	pop	r0
    377a:	0f be       	out	0x3f, r0	; 63
    377c:	1f 91       	pop	r17
    377e:	0f 91       	pop	r16
    3780:	ff 90       	pop	r15
    3782:	ef 90       	pop	r14
    3784:	df 90       	pop	r13
    3786:	cf 90       	pop	r12
    3788:	bf 90       	pop	r11
    378a:	af 90       	pop	r10
    378c:	9f 90       	pop	r9
    378e:	8f 90       	pop	r8
    3790:	7f 90       	pop	r7
    3792:	6f 90       	pop	r6
    3794:	5f 90       	pop	r5
    3796:	4f 90       	pop	r4
    3798:	08 95       	ret

0000379a <xTaskGenericNotify>:
    379a:	0f 93       	push	r16
    379c:	1f 93       	push	r17
    379e:	cf 93       	push	r28
    37a0:	df 93       	push	r29
    37a2:	fc 01       	movw	r30, r24
    37a4:	0f b6       	in	r0, 0x3f	; 63
    37a6:	f8 94       	cli
    37a8:	0f 92       	push	r0
    37aa:	01 15       	cp	r16, r1
    37ac:	11 05       	cpc	r17, r1
    37ae:	49 f0       	breq	.+18     	; 0x37c2 <xTaskGenericNotify+0x28>
    37b0:	83 a5       	ldd	r24, Z+43	; 0x2b
    37b2:	94 a5       	ldd	r25, Z+44	; 0x2c
    37b4:	a5 a5       	ldd	r26, Z+45	; 0x2d
    37b6:	b6 a5       	ldd	r27, Z+46	; 0x2e
    37b8:	e8 01       	movw	r28, r16
    37ba:	88 83       	st	Y, r24
    37bc:	99 83       	std	Y+1, r25	; 0x01
    37be:	aa 83       	std	Y+2, r26	; 0x02
    37c0:	bb 83       	std	Y+3, r27	; 0x03
    37c2:	87 a5       	ldd	r24, Z+47	; 0x2f
    37c4:	92 e0       	ldi	r25, 0x02	; 2
    37c6:	97 a7       	std	Z+47, r25	; 0x2f
    37c8:	22 30       	cpi	r18, 0x02	; 2
    37ca:	b1 f0       	breq	.+44     	; 0x37f8 <xTaskGenericNotify+0x5e>
    37cc:	18 f4       	brcc	.+6      	; 0x37d4 <xTaskGenericNotify+0x3a>
    37ce:	21 30       	cpi	r18, 0x01	; 1
    37d0:	31 f0       	breq	.+12     	; 0x37de <xTaskGenericNotify+0x44>
    37d2:	2a c0       	rjmp	.+84     	; 0x3828 <xTaskGenericNotify+0x8e>
    37d4:	23 30       	cpi	r18, 0x03	; 3
    37d6:	e9 f0       	breq	.+58     	; 0x3812 <xTaskGenericNotify+0x78>
    37d8:	24 30       	cpi	r18, 0x04	; 4
    37da:	01 f1       	breq	.+64     	; 0x381c <xTaskGenericNotify+0x82>
    37dc:	25 c0       	rjmp	.+74     	; 0x3828 <xTaskGenericNotify+0x8e>
    37de:	03 a5       	ldd	r16, Z+43	; 0x2b
    37e0:	14 a5       	ldd	r17, Z+44	; 0x2c
    37e2:	25 a5       	ldd	r18, Z+45	; 0x2d
    37e4:	36 a5       	ldd	r19, Z+46	; 0x2e
    37e6:	40 2b       	or	r20, r16
    37e8:	51 2b       	or	r21, r17
    37ea:	62 2b       	or	r22, r18
    37ec:	73 2b       	or	r23, r19
    37ee:	43 a7       	std	Z+43, r20	; 0x2b
    37f0:	54 a7       	std	Z+44, r21	; 0x2c
    37f2:	65 a7       	std	Z+45, r22	; 0x2d
    37f4:	76 a7       	std	Z+46, r23	; 0x2e
    37f6:	18 c0       	rjmp	.+48     	; 0x3828 <xTaskGenericNotify+0x8e>
    37f8:	43 a5       	ldd	r20, Z+43	; 0x2b
    37fa:	54 a5       	ldd	r21, Z+44	; 0x2c
    37fc:	65 a5       	ldd	r22, Z+45	; 0x2d
    37fe:	76 a5       	ldd	r23, Z+46	; 0x2e
    3800:	4f 5f       	subi	r20, 0xFF	; 255
    3802:	5f 4f       	sbci	r21, 0xFF	; 255
    3804:	6f 4f       	sbci	r22, 0xFF	; 255
    3806:	7f 4f       	sbci	r23, 0xFF	; 255
    3808:	43 a7       	std	Z+43, r20	; 0x2b
    380a:	54 a7       	std	Z+44, r21	; 0x2c
    380c:	65 a7       	std	Z+45, r22	; 0x2d
    380e:	76 a7       	std	Z+46, r23	; 0x2e
    3810:	0b c0       	rjmp	.+22     	; 0x3828 <xTaskGenericNotify+0x8e>
    3812:	43 a7       	std	Z+43, r20	; 0x2b
    3814:	54 a7       	std	Z+44, r21	; 0x2c
    3816:	65 a7       	std	Z+45, r22	; 0x2d
    3818:	76 a7       	std	Z+46, r23	; 0x2e
    381a:	06 c0       	rjmp	.+12     	; 0x3828 <xTaskGenericNotify+0x8e>
    381c:	82 30       	cpi	r24, 0x02	; 2
    381e:	49 f1       	breq	.+82     	; 0x3872 <xTaskGenericNotify+0xd8>
    3820:	43 a7       	std	Z+43, r20	; 0x2b
    3822:	54 a7       	std	Z+44, r21	; 0x2c
    3824:	65 a7       	std	Z+45, r22	; 0x2d
    3826:	76 a7       	std	Z+46, r23	; 0x2e
    3828:	81 30       	cpi	r24, 0x01	; 1
    382a:	29 f5       	brne	.+74     	; 0x3876 <xTaskGenericNotify+0xdc>
    382c:	ef 01       	movw	r28, r30
    382e:	8f 01       	movw	r16, r30
    3830:	0e 5f       	subi	r16, 0xFE	; 254
    3832:	1f 4f       	sbci	r17, 0xFF	; 255
    3834:	c8 01       	movw	r24, r16
    3836:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <uxListRemove>
    383a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    383c:	90 91 45 18 	lds	r25, 0x1845	; 0x801845 <uxTopReadyPriority>
    3840:	98 17       	cp	r25, r24
    3842:	10 f4       	brcc	.+4      	; 0x3848 <xTaskGenericNotify+0xae>
    3844:	80 93 45 18 	sts	0x1845, r24	; 0x801845 <uxTopReadyPriority>
    3848:	2b e0       	ldi	r18, 0x0B	; 11
    384a:	82 9f       	mul	r24, r18
    384c:	c0 01       	movw	r24, r0
    384e:	11 24       	eor	r1, r1
    3850:	b8 01       	movw	r22, r16
    3852:	89 57       	subi	r24, 0x79	; 121
    3854:	97 4e       	sbci	r25, 0xE7	; 231
    3856:	0e 94 1e 0c 	call	0x183c	; 0x183c <vListInsertEnd>
    385a:	e0 91 b3 18 	lds	r30, 0x18B3	; 0x8018b3 <pxCurrentTCB>
    385e:	f0 91 b4 18 	lds	r31, 0x18B4	; 0x8018b4 <pxCurrentTCB+0x1>
    3862:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3864:	82 8d       	ldd	r24, Z+26	; 0x1a
    3866:	89 17       	cp	r24, r25
    3868:	40 f4       	brcc	.+16     	; 0x387a <xTaskGenericNotify+0xe0>
    386a:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <vPortYield>
    386e:	81 e0       	ldi	r24, 0x01	; 1
    3870:	05 c0       	rjmp	.+10     	; 0x387c <xTaskGenericNotify+0xe2>
    3872:	80 e0       	ldi	r24, 0x00	; 0
    3874:	03 c0       	rjmp	.+6      	; 0x387c <xTaskGenericNotify+0xe2>
    3876:	81 e0       	ldi	r24, 0x01	; 1
    3878:	01 c0       	rjmp	.+2      	; 0x387c <xTaskGenericNotify+0xe2>
    387a:	81 e0       	ldi	r24, 0x01	; 1
    387c:	0f 90       	pop	r0
    387e:	0f be       	out	0x3f, r0	; 63
    3880:	df 91       	pop	r29
    3882:	cf 91       	pop	r28
    3884:	1f 91       	pop	r17
    3886:	0f 91       	pop	r16
    3888:	08 95       	ret

0000388a <xTaskGenericNotifyFromISR>:
    388a:	ef 92       	push	r14
    388c:	ff 92       	push	r15
    388e:	0f 93       	push	r16
    3890:	1f 93       	push	r17
    3892:	cf 93       	push	r28
    3894:	df 93       	push	r29
    3896:	fc 01       	movw	r30, r24
    3898:	01 15       	cp	r16, r1
    389a:	11 05       	cpc	r17, r1
    389c:	49 f0       	breq	.+18     	; 0x38b0 <xTaskGenericNotifyFromISR+0x26>
    389e:	83 a5       	ldd	r24, Z+43	; 0x2b
    38a0:	94 a5       	ldd	r25, Z+44	; 0x2c
    38a2:	a5 a5       	ldd	r26, Z+45	; 0x2d
    38a4:	b6 a5       	ldd	r27, Z+46	; 0x2e
    38a6:	e8 01       	movw	r28, r16
    38a8:	88 83       	st	Y, r24
    38aa:	99 83       	std	Y+1, r25	; 0x01
    38ac:	aa 83       	std	Y+2, r26	; 0x02
    38ae:	bb 83       	std	Y+3, r27	; 0x03
    38b0:	87 a5       	ldd	r24, Z+47	; 0x2f
    38b2:	92 e0       	ldi	r25, 0x02	; 2
    38b4:	97 a7       	std	Z+47, r25	; 0x2f
    38b6:	22 30       	cpi	r18, 0x02	; 2
    38b8:	b1 f0       	breq	.+44     	; 0x38e6 <xTaskGenericNotifyFromISR+0x5c>
    38ba:	18 f4       	brcc	.+6      	; 0x38c2 <xTaskGenericNotifyFromISR+0x38>
    38bc:	21 30       	cpi	r18, 0x01	; 1
    38be:	31 f0       	breq	.+12     	; 0x38cc <xTaskGenericNotifyFromISR+0x42>
    38c0:	2a c0       	rjmp	.+84     	; 0x3916 <xTaskGenericNotifyFromISR+0x8c>
    38c2:	23 30       	cpi	r18, 0x03	; 3
    38c4:	e9 f0       	breq	.+58     	; 0x3900 <xTaskGenericNotifyFromISR+0x76>
    38c6:	24 30       	cpi	r18, 0x04	; 4
    38c8:	01 f1       	breq	.+64     	; 0x390a <xTaskGenericNotifyFromISR+0x80>
    38ca:	25 c0       	rjmp	.+74     	; 0x3916 <xTaskGenericNotifyFromISR+0x8c>
    38cc:	03 a5       	ldd	r16, Z+43	; 0x2b
    38ce:	14 a5       	ldd	r17, Z+44	; 0x2c
    38d0:	25 a5       	ldd	r18, Z+45	; 0x2d
    38d2:	36 a5       	ldd	r19, Z+46	; 0x2e
    38d4:	40 2b       	or	r20, r16
    38d6:	51 2b       	or	r21, r17
    38d8:	62 2b       	or	r22, r18
    38da:	73 2b       	or	r23, r19
    38dc:	43 a7       	std	Z+43, r20	; 0x2b
    38de:	54 a7       	std	Z+44, r21	; 0x2c
    38e0:	65 a7       	std	Z+45, r22	; 0x2d
    38e2:	76 a7       	std	Z+46, r23	; 0x2e
    38e4:	18 c0       	rjmp	.+48     	; 0x3916 <xTaskGenericNotifyFromISR+0x8c>
    38e6:	43 a5       	ldd	r20, Z+43	; 0x2b
    38e8:	54 a5       	ldd	r21, Z+44	; 0x2c
    38ea:	65 a5       	ldd	r22, Z+45	; 0x2d
    38ec:	76 a5       	ldd	r23, Z+46	; 0x2e
    38ee:	4f 5f       	subi	r20, 0xFF	; 255
    38f0:	5f 4f       	sbci	r21, 0xFF	; 255
    38f2:	6f 4f       	sbci	r22, 0xFF	; 255
    38f4:	7f 4f       	sbci	r23, 0xFF	; 255
    38f6:	43 a7       	std	Z+43, r20	; 0x2b
    38f8:	54 a7       	std	Z+44, r21	; 0x2c
    38fa:	65 a7       	std	Z+45, r22	; 0x2d
    38fc:	76 a7       	std	Z+46, r23	; 0x2e
    38fe:	0b c0       	rjmp	.+22     	; 0x3916 <xTaskGenericNotifyFromISR+0x8c>
    3900:	43 a7       	std	Z+43, r20	; 0x2b
    3902:	54 a7       	std	Z+44, r21	; 0x2c
    3904:	65 a7       	std	Z+45, r22	; 0x2d
    3906:	76 a7       	std	Z+46, r23	; 0x2e
    3908:	06 c0       	rjmp	.+12     	; 0x3916 <xTaskGenericNotifyFromISR+0x8c>
    390a:	82 30       	cpi	r24, 0x02	; 2
    390c:	d9 f1       	breq	.+118    	; 0x3984 <xTaskGenericNotifyFromISR+0xfa>
    390e:	43 a7       	std	Z+43, r20	; 0x2b
    3910:	54 a7       	std	Z+44, r21	; 0x2c
    3912:	65 a7       	std	Z+45, r22	; 0x2d
    3914:	76 a7       	std	Z+46, r23	; 0x2e
    3916:	81 30       	cpi	r24, 0x01	; 1
    3918:	b9 f5       	brne	.+110    	; 0x3988 <xTaskGenericNotifyFromISR+0xfe>
    391a:	ef 01       	movw	r28, r30
    391c:	80 91 39 18 	lds	r24, 0x1839	; 0x801839 <uxSchedulerSuspended>
    3920:	81 11       	cpse	r24, r1
    3922:	17 c0       	rjmp	.+46     	; 0x3952 <xTaskGenericNotifyFromISR+0xc8>
    3924:	8f 01       	movw	r16, r30
    3926:	0e 5f       	subi	r16, 0xFE	; 254
    3928:	1f 4f       	sbci	r17, 0xFF	; 255
    392a:	c8 01       	movw	r24, r16
    392c:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <uxListRemove>
    3930:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3932:	90 91 45 18 	lds	r25, 0x1845	; 0x801845 <uxTopReadyPriority>
    3936:	98 17       	cp	r25, r24
    3938:	10 f4       	brcc	.+4      	; 0x393e <xTaskGenericNotifyFromISR+0xb4>
    393a:	80 93 45 18 	sts	0x1845, r24	; 0x801845 <uxTopReadyPriority>
    393e:	eb e0       	ldi	r30, 0x0B	; 11
    3940:	8e 9f       	mul	r24, r30
    3942:	c0 01       	movw	r24, r0
    3944:	11 24       	eor	r1, r1
    3946:	b8 01       	movw	r22, r16
    3948:	89 57       	subi	r24, 0x79	; 121
    394a:	97 4e       	sbci	r25, 0xE7	; 231
    394c:	0e 94 1e 0c 	call	0x183c	; 0x183c <vListInsertEnd>
    3950:	07 c0       	rjmp	.+14     	; 0x3960 <xTaskGenericNotifyFromISR+0xd6>
    3952:	bf 01       	movw	r22, r30
    3954:	62 5f       	subi	r22, 0xF2	; 242
    3956:	7f 4f       	sbci	r23, 0xFF	; 255
    3958:	82 e6       	ldi	r24, 0x62	; 98
    395a:	98 e1       	ldi	r25, 0x18	; 24
    395c:	0e 94 1e 0c 	call	0x183c	; 0x183c <vListInsertEnd>
    3960:	e0 91 b3 18 	lds	r30, 0x18B3	; 0x8018b3 <pxCurrentTCB>
    3964:	f0 91 b4 18 	lds	r31, 0x18B4	; 0x8018b4 <pxCurrentTCB+0x1>
    3968:	9a 8d       	ldd	r25, Y+26	; 0x1a
    396a:	82 8d       	ldd	r24, Z+26	; 0x1a
    396c:	89 17       	cp	r24, r25
    396e:	70 f4       	brcc	.+28     	; 0x398c <xTaskGenericNotifyFromISR+0x102>
    3970:	e1 14       	cp	r14, r1
    3972:	f1 04       	cpc	r15, r1
    3974:	19 f0       	breq	.+6      	; 0x397c <xTaskGenericNotifyFromISR+0xf2>
    3976:	81 e0       	ldi	r24, 0x01	; 1
    3978:	e7 01       	movw	r28, r14
    397a:	88 83       	st	Y, r24
    397c:	81 e0       	ldi	r24, 0x01	; 1
    397e:	80 93 42 18 	sts	0x1842, r24	; 0x801842 <xYieldPending>
    3982:	05 c0       	rjmp	.+10     	; 0x398e <xTaskGenericNotifyFromISR+0x104>
    3984:	80 e0       	ldi	r24, 0x00	; 0
    3986:	03 c0       	rjmp	.+6      	; 0x398e <xTaskGenericNotifyFromISR+0x104>
    3988:	81 e0       	ldi	r24, 0x01	; 1
    398a:	01 c0       	rjmp	.+2      	; 0x398e <xTaskGenericNotifyFromISR+0x104>
    398c:	81 e0       	ldi	r24, 0x01	; 1
    398e:	df 91       	pop	r29
    3990:	cf 91       	pop	r28
    3992:	1f 91       	pop	r17
    3994:	0f 91       	pop	r16
    3996:	ff 90       	pop	r15
    3998:	ef 90       	pop	r14
    399a:	08 95       	ret

0000399c <xTaskNotifyStateClear>:
    TCB_t *pxTCB;
    BaseType_t xReturn;

        /* If null is passed in here then it is the calling task that is having
        its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    399c:	00 97       	sbiw	r24, 0x00	; 0
    399e:	21 f4       	brne	.+8      	; 0x39a8 <xTaskNotifyStateClear+0xc>
    39a0:	80 91 b3 18 	lds	r24, 0x18B3	; 0x8018b3 <pxCurrentTCB>
    39a4:	90 91 b4 18 	lds	r25, 0x18B4	; 0x8018b4 <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    39a8:	0f b6       	in	r0, 0x3f	; 63
    39aa:	f8 94       	cli
    39ac:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
    39ae:	fc 01       	movw	r30, r24
    39b0:	27 a5       	ldd	r18, Z+47	; 0x2f
    39b2:	22 30       	cpi	r18, 0x02	; 2
    39b4:	19 f4       	brne	.+6      	; 0x39bc <xTaskNotifyStateClear+0x20>
            {
                pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    39b6:	17 a6       	std	Z+47, r1	; 0x2f
                xReturn = pdPASS;
    39b8:	81 e0       	ldi	r24, 0x01	; 1
    39ba:	01 c0       	rjmp	.+2      	; 0x39be <xTaskNotifyStateClear+0x22>
            }
            else
            {
                xReturn = pdFAIL;
    39bc:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    39be:	0f 90       	pop	r0
    39c0:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    39c2:	08 95       	ret

000039c4 <prvInsertTimerInActiveList>:
    39c4:	cf 92       	push	r12
    39c6:	df 92       	push	r13
    39c8:	ef 92       	push	r14
    39ca:	ff 92       	push	r15
    39cc:	0f 93       	push	r16
    39ce:	1f 93       	push	r17
    39d0:	fc 01       	movw	r30, r24
    39d2:	42 83       	std	Z+2, r20	; 0x02
    39d4:	53 83       	std	Z+3, r21	; 0x03
    39d6:	64 83       	std	Z+4, r22	; 0x04
    39d8:	75 83       	std	Z+5, r23	; 0x05
    39da:	93 87       	std	Z+11, r25	; 0x0b
    39dc:	82 87       	std	Z+10, r24	; 0x0a
    39de:	04 17       	cp	r16, r20
    39e0:	15 07       	cpc	r17, r21
    39e2:	26 07       	cpc	r18, r22
    39e4:	37 07       	cpc	r19, r23
    39e6:	c0 f0       	brcs	.+48     	; 0x3a18 <prvInsertTimerInActiveList+0x54>
    39e8:	0c 19       	sub	r16, r12
    39ea:	1d 09       	sbc	r17, r13
    39ec:	2e 09       	sbc	r18, r14
    39ee:	3f 09       	sbc	r19, r15
    39f0:	86 85       	ldd	r24, Z+14	; 0x0e
    39f2:	97 85       	ldd	r25, Z+15	; 0x0f
    39f4:	a0 89       	ldd	r26, Z+16	; 0x10
    39f6:	b1 89       	ldd	r27, Z+17	; 0x11
    39f8:	08 17       	cp	r16, r24
    39fa:	19 07       	cpc	r17, r25
    39fc:	2a 07       	cpc	r18, r26
    39fe:	3b 07       	cpc	r19, r27
    3a00:	00 f5       	brcc	.+64     	; 0x3a42 <prvInsertTimerInActiveList+0x7e>
    3a02:	bf 01       	movw	r22, r30
    3a04:	6e 5f       	subi	r22, 0xFE	; 254
    3a06:	7f 4f       	sbci	r23, 0xFF	; 255
    3a08:	80 91 bd 18 	lds	r24, 0x18BD	; 0x8018bd <pxOverflowTimerList>
    3a0c:	90 91 be 18 	lds	r25, 0x18BE	; 0x8018be <pxOverflowTimerList+0x1>
    3a10:	0e 94 3f 0c 	call	0x187e	; 0x187e <vListInsert>
    3a14:	80 e0       	ldi	r24, 0x00	; 0
    3a16:	18 c0       	rjmp	.+48     	; 0x3a48 <prvInsertTimerInActiveList+0x84>
    3a18:	0c 15       	cp	r16, r12
    3a1a:	1d 05       	cpc	r17, r13
    3a1c:	2e 05       	cpc	r18, r14
    3a1e:	3f 05       	cpc	r19, r15
    3a20:	28 f4       	brcc	.+10     	; 0x3a2c <prvInsertTimerInActiveList+0x68>
    3a22:	4c 15       	cp	r20, r12
    3a24:	5d 05       	cpc	r21, r13
    3a26:	6e 05       	cpc	r22, r14
    3a28:	7f 05       	cpc	r23, r15
    3a2a:	68 f4       	brcc	.+26     	; 0x3a46 <prvInsertTimerInActiveList+0x82>
    3a2c:	bf 01       	movw	r22, r30
    3a2e:	6e 5f       	subi	r22, 0xFE	; 254
    3a30:	7f 4f       	sbci	r23, 0xFF	; 255
    3a32:	80 91 bf 18 	lds	r24, 0x18BF	; 0x8018bf <pxCurrentTimerList>
    3a36:	90 91 c0 18 	lds	r25, 0x18C0	; 0x8018c0 <pxCurrentTimerList+0x1>
    3a3a:	0e 94 3f 0c 	call	0x187e	; 0x187e <vListInsert>
    3a3e:	80 e0       	ldi	r24, 0x00	; 0
    3a40:	03 c0       	rjmp	.+6      	; 0x3a48 <prvInsertTimerInActiveList+0x84>
    3a42:	81 e0       	ldi	r24, 0x01	; 1
    3a44:	01 c0       	rjmp	.+2      	; 0x3a48 <prvInsertTimerInActiveList+0x84>
    3a46:	81 e0       	ldi	r24, 0x01	; 1
    3a48:	1f 91       	pop	r17
    3a4a:	0f 91       	pop	r16
    3a4c:	ff 90       	pop	r15
    3a4e:	ef 90       	pop	r14
    3a50:	df 90       	pop	r13
    3a52:	cf 90       	pop	r12
    3a54:	08 95       	ret

00003a56 <prvCheckForValidListAndQueue>:
    3a56:	0f b6       	in	r0, 0x3f	; 63
    3a58:	f8 94       	cli
    3a5a:	0f 92       	push	r0
    3a5c:	80 91 bb 18 	lds	r24, 0x18BB	; 0x8018bb <xTimerQueue>
    3a60:	90 91 bc 18 	lds	r25, 0x18BC	; 0x8018bc <xTimerQueue+0x1>
    3a64:	89 2b       	or	r24, r25
    3a66:	e9 f4       	brne	.+58     	; 0x3aa2 <prvCheckForValidListAndQueue+0x4c>
    3a68:	8c ec       	ldi	r24, 0xCC	; 204
    3a6a:	98 e1       	ldi	r25, 0x18	; 24
    3a6c:	0e 94 09 0c 	call	0x1812	; 0x1812 <vListInitialise>
    3a70:	81 ec       	ldi	r24, 0xC1	; 193
    3a72:	98 e1       	ldi	r25, 0x18	; 24
    3a74:	0e 94 09 0c 	call	0x1812	; 0x1812 <vListInitialise>
    3a78:	8c ec       	ldi	r24, 0xCC	; 204
    3a7a:	98 e1       	ldi	r25, 0x18	; 24
    3a7c:	90 93 c0 18 	sts	0x18C0, r25	; 0x8018c0 <pxCurrentTimerList+0x1>
    3a80:	80 93 bf 18 	sts	0x18BF, r24	; 0x8018bf <pxCurrentTimerList>
    3a84:	81 ec       	ldi	r24, 0xC1	; 193
    3a86:	98 e1       	ldi	r25, 0x18	; 24
    3a88:	90 93 be 18 	sts	0x18BE, r25	; 0x8018be <pxOverflowTimerList+0x1>
    3a8c:	80 93 bd 18 	sts	0x18BD, r24	; 0x8018bd <pxOverflowTimerList>
    3a90:	40 e0       	ldi	r20, 0x00	; 0
    3a92:	67 e0       	ldi	r22, 0x07	; 7
    3a94:	8a e0       	ldi	r24, 0x0A	; 10
    3a96:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <xQueueGenericCreate>
    3a9a:	90 93 bc 18 	sts	0x18BC, r25	; 0x8018bc <xTimerQueue+0x1>
    3a9e:	80 93 bb 18 	sts	0x18BB, r24	; 0x8018bb <xTimerQueue>
    3aa2:	0f 90       	pop	r0
    3aa4:	0f be       	out	0x3f, r0	; 63
    3aa6:	08 95       	ret

00003aa8 <xTimerCreateTimerTask>:
    3aa8:	ef 92       	push	r14
    3aaa:	ff 92       	push	r15
    3aac:	0f 93       	push	r16
    3aae:	d3 df       	rcall	.-90     	; 0x3a56 <prvCheckForValidListAndQueue>
    3ab0:	80 91 bb 18 	lds	r24, 0x18BB	; 0x8018bb <xTimerQueue>
    3ab4:	90 91 bc 18 	lds	r25, 0x18BC	; 0x8018bc <xTimerQueue+0x1>
    3ab8:	89 2b       	or	r24, r25
    3aba:	91 f0       	breq	.+36     	; 0x3ae0 <xTimerCreateTimerTask+0x38>
    3abc:	0f 2e       	mov	r0, r31
    3abe:	f9 eb       	ldi	r31, 0xB9	; 185
    3ac0:	ef 2e       	mov	r14, r31
    3ac2:	f8 e1       	ldi	r31, 0x18	; 24
    3ac4:	ff 2e       	mov	r15, r31
    3ac6:	f0 2d       	mov	r31, r0
    3ac8:	03 e0       	ldi	r16, 0x03	; 3
    3aca:	20 e0       	ldi	r18, 0x00	; 0
    3acc:	30 e0       	ldi	r19, 0x00	; 0
    3ace:	45 e5       	ldi	r20, 0x55	; 85
    3ad0:	50 e0       	ldi	r21, 0x00	; 0
    3ad2:	62 ec       	ldi	r22, 0xC2	; 194
    3ad4:	74 e0       	ldi	r23, 0x04	; 4
    3ad6:	87 e0       	ldi	r24, 0x07	; 7
    3ad8:	91 e0       	ldi	r25, 0x01	; 1
    3ada:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <xTaskCreate>
    3ade:	01 c0       	rjmp	.+2      	; 0x3ae2 <xTimerCreateTimerTask+0x3a>
    3ae0:	80 e0       	ldi	r24, 0x00	; 0
    3ae2:	0f 91       	pop	r16
    3ae4:	ff 90       	pop	r15
    3ae6:	ef 90       	pop	r14
    3ae8:	08 95       	ret

00003aea <xTimerGenericCommand>:
    }
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    3aea:	8f 92       	push	r8
    3aec:	9f 92       	push	r9
    3aee:	af 92       	push	r10
    3af0:	bf 92       	push	r11
    3af2:	cf 92       	push	r12
    3af4:	df 92       	push	r13
    3af6:	ef 92       	push	r14
    3af8:	ff 92       	push	r15
    3afa:	0f 93       	push	r16
    3afc:	1f 93       	push	r17
    3afe:	cf 93       	push	r28
    3b00:	df 93       	push	r29
    3b02:	cd b7       	in	r28, 0x3d	; 61
    3b04:	de b7       	in	r29, 0x3e	; 62
    3b06:	27 97       	sbiw	r28, 0x07	; 7
    3b08:	0f b6       	in	r0, 0x3f	; 63
    3b0a:	f8 94       	cli
    3b0c:	de bf       	out	0x3e, r29	; 62
    3b0e:	0f be       	out	0x3f, r0	; 63
    3b10:	cd bf       	out	0x3d, r28	; 61

    configASSERT( xTimer );

    /* Send a message to the timer service task to perform a particular action
    on a particular timer definition. */
    if( xTimerQueue != NULL )
    3b12:	e0 91 bb 18 	lds	r30, 0x18BB	; 0x8018bb <xTimerQueue>
    3b16:	f0 91 bc 18 	lds	r31, 0x18BC	; 0x8018bc <xTimerQueue+0x1>
    3b1a:	30 97       	sbiw	r30, 0x00	; 0
    3b1c:	81 f1       	breq	.+96     	; 0x3b7e <xTimerGenericCommand+0x94>
    {
        /* Send a command to the timer service task to start the xTimer timer. */
        xMessage.xMessageID = xCommandID;
    3b1e:	69 83       	std	Y+1, r22	; 0x01
        xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    3b20:	2a 83       	std	Y+2, r18	; 0x02
    3b22:	3b 83       	std	Y+3, r19	; 0x03
    3b24:	4c 83       	std	Y+4, r20	; 0x04
    3b26:	5d 83       	std	Y+5, r21	; 0x05
        xMessage.u.xTimerParameters.pxTimer = xTimer;
    3b28:	9f 83       	std	Y+7, r25	; 0x07
    3b2a:	8e 83       	std	Y+6, r24	; 0x06

        if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    3b2c:	66 30       	cpi	r22, 0x06	; 6
    3b2e:	f4 f4       	brge	.+60     	; 0x3b6c <xTimerGenericCommand+0x82>
        {
            if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    3b30:	68 dc       	rcall	.-1840   	; 0x3402 <xTaskGetSchedulerState>
    3b32:	82 30       	cpi	r24, 0x02	; 2
    3b34:	69 f4       	brne	.+26     	; 0x3b50 <xTimerGenericCommand+0x66>
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    3b36:	00 e0       	ldi	r16, 0x00	; 0
    3b38:	a7 01       	movw	r20, r14
    3b3a:	96 01       	movw	r18, r12
    3b3c:	be 01       	movw	r22, r28
    3b3e:	6f 5f       	subi	r22, 0xFF	; 255
    3b40:	7f 4f       	sbci	r23, 0xFF	; 255
    3b42:	80 91 bb 18 	lds	r24, 0x18BB	; 0x8018bb <xTimerQueue>
    3b46:	90 91 bc 18 	lds	r25, 0x18BC	; 0x8018bc <xTimerQueue+0x1>
    3b4a:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <xQueueGenericSend>
    3b4e:	18 c0       	rjmp	.+48     	; 0x3b80 <xTimerGenericCommand+0x96>
            }
            else
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    3b50:	00 e0       	ldi	r16, 0x00	; 0
    3b52:	20 e0       	ldi	r18, 0x00	; 0
    3b54:	30 e0       	ldi	r19, 0x00	; 0
    3b56:	a9 01       	movw	r20, r18
    3b58:	be 01       	movw	r22, r28
    3b5a:	6f 5f       	subi	r22, 0xFF	; 255
    3b5c:	7f 4f       	sbci	r23, 0xFF	; 255
    3b5e:	80 91 bb 18 	lds	r24, 0x18BB	; 0x8018bb <xTimerQueue>
    3b62:	90 91 bc 18 	lds	r25, 0x18BC	; 0x8018bc <xTimerQueue+0x1>
    3b66:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <xQueueGenericSend>
    3b6a:	0a c0       	rjmp	.+20     	; 0x3b80 <xTimerGenericCommand+0x96>
            }
        }
        else
        {
            xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    3b6c:	20 e0       	ldi	r18, 0x00	; 0
    3b6e:	a8 01       	movw	r20, r16
    3b70:	be 01       	movw	r22, r28
    3b72:	6f 5f       	subi	r22, 0xFF	; 255
    3b74:	7f 4f       	sbci	r23, 0xFF	; 255
    3b76:	cf 01       	movw	r24, r30
    3b78:	0e 94 16 10 	call	0x202c	; 0x202c <xQueueGenericSendFromISR>
    3b7c:	01 c0       	rjmp	.+2      	; 0x3b80 <xTimerGenericCommand+0x96>
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
    3b7e:	80 e0       	ldi	r24, 0x00	; 0
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xReturn;
}
    3b80:	27 96       	adiw	r28, 0x07	; 7
    3b82:	0f b6       	in	r0, 0x3f	; 63
    3b84:	f8 94       	cli
    3b86:	de bf       	out	0x3e, r29	; 62
    3b88:	0f be       	out	0x3f, r0	; 63
    3b8a:	cd bf       	out	0x3d, r28	; 61
    3b8c:	df 91       	pop	r29
    3b8e:	cf 91       	pop	r28
    3b90:	1f 91       	pop	r17
    3b92:	0f 91       	pop	r16
    3b94:	ff 90       	pop	r15
    3b96:	ef 90       	pop	r14
    3b98:	df 90       	pop	r13
    3b9a:	cf 90       	pop	r12
    3b9c:	bf 90       	pop	r11
    3b9e:	af 90       	pop	r10
    3ba0:	9f 90       	pop	r9
    3ba2:	8f 90       	pop	r8
    3ba4:	08 95       	ret

00003ba6 <prvSampleTimeNow>:
    return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    3ba6:	2f 92       	push	r2
    3ba8:	3f 92       	push	r3
    3baa:	4f 92       	push	r4
    3bac:	5f 92       	push	r5
    3bae:	6f 92       	push	r6
    3bb0:	7f 92       	push	r7
    3bb2:	8f 92       	push	r8
    3bb4:	9f 92       	push	r9
    3bb6:	af 92       	push	r10
    3bb8:	bf 92       	push	r11
    3bba:	cf 92       	push	r12
    3bbc:	df 92       	push	r13
    3bbe:	ef 92       	push	r14
    3bc0:	ff 92       	push	r15
    3bc2:	0f 93       	push	r16
    3bc4:	1f 93       	push	r17
    3bc6:	cf 93       	push	r28
    3bc8:	df 93       	push	r29
    3bca:	1c 01       	movw	r2, r24
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

    xTimeNow = xTaskGetTickCount();
    3bcc:	cd d8       	rcall	.-3686   	; 0x2d68 <xTaskGetTickCount>
    3bce:	2b 01       	movw	r4, r22
    3bd0:	3c 01       	movw	r6, r24

    if( xTimeNow < xLastTime )
    3bd2:	80 91 b5 18 	lds	r24, 0x18B5	; 0x8018b5 <xLastTime.2432>
    3bd6:	90 91 b6 18 	lds	r25, 0x18B6	; 0x8018b6 <xLastTime.2432+0x1>
    3bda:	a0 91 b7 18 	lds	r26, 0x18B7	; 0x8018b7 <xLastTime.2432+0x2>
    3bde:	b0 91 b8 18 	lds	r27, 0x18B8	; 0x8018b8 <xLastTime.2432+0x3>
    3be2:	48 16       	cp	r4, r24
    3be4:	59 06       	cpc	r5, r25
    3be6:	6a 06       	cpc	r6, r26
    3be8:	7b 06       	cpc	r7, r27
    3bea:	08 f0       	brcs	.+2      	; 0x3bee <prvSampleTimeNow+0x48>
    3bec:	53 c0       	rjmp	.+166    	; 0x3c94 <prvSampleTimeNow+0xee>
    3bee:	3b c0       	rjmp	.+118    	; 0x3c66 <prvSampleTimeNow+0xc0>
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    {
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    3bf0:	07 80       	ldd	r0, Z+7	; 0x07
    3bf2:	f0 85       	ldd	r31, Z+8	; 0x08
    3bf4:	e0 2d       	mov	r30, r0
    3bf6:	80 80       	ld	r8, Z
    3bf8:	91 80       	ldd	r9, Z+1	; 0x01
    3bfa:	a2 80       	ldd	r10, Z+2	; 0x02
    3bfc:	b3 80       	ldd	r11, Z+3	; 0x03

        /* Remove the timer from the list. */
        pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    3bfe:	c0 85       	ldd	r28, Z+8	; 0x08
    3c00:	d1 85       	ldd	r29, Z+9	; 0x09
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3c02:	8e 01       	movw	r16, r28
    3c04:	0e 5f       	subi	r16, 0xFE	; 254
    3c06:	1f 4f       	sbci	r17, 0xFF	; 255
    3c08:	c8 01       	movw	r24, r16
    3c0a:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* Execute its callback, then send a command to restart the timer if
        it is an auto-reload timer.  It cannot be restarted here as the lists
        have not yet been switched. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3c0e:	ec 89       	ldd	r30, Y+20	; 0x14
    3c10:	fd 89       	ldd	r31, Y+21	; 0x15
    3c12:	ce 01       	movw	r24, r28
    3c14:	19 95       	eicall

        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    3c16:	8f 89       	ldd	r24, Y+23	; 0x17
    3c18:	82 ff       	sbrs	r24, 2
    3c1a:	25 c0       	rjmp	.+74     	; 0x3c66 <prvSampleTimeNow+0xc0>
            the timer going into the same timer list then it has already expired
            and the timer should be re-inserted into the current list so it is
            processed again within this loop.  Otherwise a command should be sent
            to restart the timer to ensure it is only inserted into a list after
            the lists have been swapped. */
            xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    3c1c:	8e 85       	ldd	r24, Y+14	; 0x0e
    3c1e:	9f 85       	ldd	r25, Y+15	; 0x0f
    3c20:	a8 89       	ldd	r26, Y+16	; 0x10
    3c22:	b9 89       	ldd	r27, Y+17	; 0x11
    3c24:	88 0d       	add	r24, r8
    3c26:	99 1d       	adc	r25, r9
    3c28:	aa 1d       	adc	r26, r10
    3c2a:	bb 1d       	adc	r27, r11
            if( xReloadTime > xNextExpireTime )
    3c2c:	88 16       	cp	r8, r24
    3c2e:	99 06       	cpc	r9, r25
    3c30:	aa 06       	cpc	r10, r26
    3c32:	bb 06       	cpc	r11, r27
    3c34:	70 f4       	brcc	.+28     	; 0x3c52 <prvSampleTimeNow+0xac>
            {
                listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    3c36:	8a 83       	std	Y+2, r24	; 0x02
    3c38:	9b 83       	std	Y+3, r25	; 0x03
    3c3a:	ac 83       	std	Y+4, r26	; 0x04
    3c3c:	bd 83       	std	Y+5, r27	; 0x05
                listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    3c3e:	db 87       	std	Y+11, r29	; 0x0b
    3c40:	ca 87       	std	Y+10, r28	; 0x0a
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    3c42:	b8 01       	movw	r22, r16
    3c44:	80 91 bf 18 	lds	r24, 0x18BF	; 0x8018bf <pxCurrentTimerList>
    3c48:	90 91 c0 18 	lds	r25, 0x18C0	; 0x8018c0 <pxCurrentTimerList+0x1>
    3c4c:	0e 94 3f 0c 	call	0x187e	; 0x187e <vListInsert>
    3c50:	0a c0       	rjmp	.+20     	; 0x3c66 <prvSampleTimeNow+0xc0>
            }
            else
            {
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    3c52:	c1 2c       	mov	r12, r1
    3c54:	d1 2c       	mov	r13, r1
    3c56:	76 01       	movw	r14, r12
    3c58:	00 e0       	ldi	r16, 0x00	; 0
    3c5a:	10 e0       	ldi	r17, 0x00	; 0
    3c5c:	a5 01       	movw	r20, r10
    3c5e:	94 01       	movw	r18, r8
    3c60:	60 e0       	ldi	r22, 0x00	; 0
    3c62:	ce 01       	movw	r24, r28
    3c64:	42 df       	rcall	.-380    	; 0x3aea <xTimerGenericCommand>

    /* The tick count has overflowed.  The timer lists must be switched.
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    3c66:	e0 91 bf 18 	lds	r30, 0x18BF	; 0x8018bf <pxCurrentTimerList>
    3c6a:	f0 91 c0 18 	lds	r31, 0x18C0	; 0x8018c0 <pxCurrentTimerList+0x1>
    3c6e:	80 81       	ld	r24, Z
    3c70:	81 11       	cpse	r24, r1
    3c72:	be cf       	rjmp	.-132    	; 0x3bf0 <prvSampleTimeNow+0x4a>
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxTemp = pxCurrentTimerList;
    pxCurrentTimerList = pxOverflowTimerList;
    3c74:	80 91 bd 18 	lds	r24, 0x18BD	; 0x8018bd <pxOverflowTimerList>
    3c78:	90 91 be 18 	lds	r25, 0x18BE	; 0x8018be <pxOverflowTimerList+0x1>
    3c7c:	90 93 c0 18 	sts	0x18C0, r25	; 0x8018c0 <pxCurrentTimerList+0x1>
    3c80:	80 93 bf 18 	sts	0x18BF, r24	; 0x8018bf <pxCurrentTimerList>
    pxOverflowTimerList = pxTemp;
    3c84:	f0 93 be 18 	sts	0x18BE, r31	; 0x8018be <pxOverflowTimerList+0x1>
    3c88:	e0 93 bd 18 	sts	0x18BD, r30	; 0x8018bd <pxOverflowTimerList>
    xTimeNow = xTaskGetTickCount();

    if( xTimeNow < xLastTime )
    {
        prvSwitchTimerLists();
        *pxTimerListsWereSwitched = pdTRUE;
    3c8c:	81 e0       	ldi	r24, 0x01	; 1
    3c8e:	f1 01       	movw	r30, r2
    3c90:	80 83       	st	Z, r24
    3c92:	02 c0       	rjmp	.+4      	; 0x3c98 <prvSampleTimeNow+0xf2>
    }
    else
    {
        *pxTimerListsWereSwitched = pdFALSE;
    3c94:	f1 01       	movw	r30, r2
    3c96:	10 82       	st	Z, r1
    }

    xLastTime = xTimeNow;
    3c98:	40 92 b5 18 	sts	0x18B5, r4	; 0x8018b5 <xLastTime.2432>
    3c9c:	50 92 b6 18 	sts	0x18B6, r5	; 0x8018b6 <xLastTime.2432+0x1>
    3ca0:	60 92 b7 18 	sts	0x18B7, r6	; 0x8018b7 <xLastTime.2432+0x2>
    3ca4:	70 92 b8 18 	sts	0x18B8, r7	; 0x8018b8 <xLastTime.2432+0x3>

    return xTimeNow;
}
    3ca8:	c3 01       	movw	r24, r6
    3caa:	b2 01       	movw	r22, r4
    3cac:	df 91       	pop	r29
    3cae:	cf 91       	pop	r28
    3cb0:	1f 91       	pop	r17
    3cb2:	0f 91       	pop	r16
    3cb4:	ff 90       	pop	r15
    3cb6:	ef 90       	pop	r14
    3cb8:	df 90       	pop	r13
    3cba:	cf 90       	pop	r12
    3cbc:	bf 90       	pop	r11
    3cbe:	af 90       	pop	r10
    3cc0:	9f 90       	pop	r9
    3cc2:	8f 90       	pop	r8
    3cc4:	7f 90       	pop	r7
    3cc6:	6f 90       	pop	r6
    3cc8:	5f 90       	pop	r5
    3cca:	4f 90       	pop	r4
    3ccc:	3f 90       	pop	r3
    3cce:	2f 90       	pop	r2
    3cd0:	08 95       	ret

00003cd2 <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    3cd2:	08 95       	ret

00003cd4 <vApplicationMallocFailedHook>:
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    3cd4:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    3cd6:	2f 9a       	sbi	0x05, 7	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3cd8:	2f ef       	ldi	r18, 0xFF	; 255
    3cda:	80 e7       	ldi	r24, 0x70	; 112
    3cdc:	92 e0       	ldi	r25, 0x02	; 2
    3cde:	21 50       	subi	r18, 0x01	; 1
    3ce0:	80 40       	sbci	r24, 0x00	; 0
    3ce2:	90 40       	sbci	r25, 0x00	; 0
    3ce4:	e1 f7       	brne	.-8      	; 0x3cde <vApplicationMallocFailedHook+0xa>
    3ce6:	00 c0       	rjmp	.+0      	; 0x3ce8 <vApplicationMallocFailedHook+0x14>
    3ce8:	00 00       	nop
    for(;;)
    {
        _delay_ms(50);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED fast blink.
    3cea:	1f 9a       	sbi	0x03, 7	; 3
    3cec:	f5 cf       	rjmp	.-22     	; 0x3cd8 <vApplicationMallocFailedHook+0x4>

00003cee <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook( TaskHandle_t xTask, portCHAR *pcTaskName ) __attribute__((weak));

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)), portCHAR *pcTaskName __attribute__((unused))  )
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    3cee:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    3cf0:	2f 9a       	sbi	0x05, 7	; 5
    3cf2:	2f ef       	ldi	r18, 0xFF	; 255
    3cf4:	87 ea       	ldi	r24, 0xA7	; 167
    3cf6:	91 e6       	ldi	r25, 0x61	; 97
    3cf8:	21 50       	subi	r18, 0x01	; 1
    3cfa:	80 40       	sbci	r24, 0x00	; 0
    3cfc:	90 40       	sbci	r25, 0x00	; 0
    3cfe:	e1 f7       	brne	.-8      	; 0x3cf8 <vApplicationStackOverflowHook+0xa>
    3d00:	00 c0       	rjmp	.+0      	; 0x3d02 <vApplicationStackOverflowHook+0x14>
    3d02:	00 00       	nop
    for(;;)
    {
        _delay_ms(2000);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED slow blink.
    3d04:	1f 9a       	sbi	0x03, 7	; 3
    3d06:	f5 cf       	rjmp	.-22     	; 0x3cf2 <vApplicationStackOverflowHook+0x4>

00003d08 <create_tasks_and_semaphores>:
MessageBufferHandle_t downlinkMessagebuffer;
lora_payload_t payload;

/*-----------------------------------------------------------*/
void create_tasks_and_semaphores(void)
{
    3d08:	8f 92       	push	r8
    3d0a:	9f 92       	push	r9
    3d0c:	af 92       	push	r10
    3d0e:	bf 92       	push	r11
    3d10:	cf 92       	push	r12
    3d12:	df 92       	push	r13
    3d14:	ef 92       	push	r14
    3d16:	ff 92       	push	r15
    3d18:	0f 93       	push	r16
    3d1a:	1f 93       	push	r17
    3d1c:	cf 93       	push	r28
    3d1e:	df 93       	push	r29
	configuration_create();
    3d20:	0e 94 43 03 	call	0x686	; 0x686 <configuration_create>
	
	humAndTempReader_t humidityAndTemperature = humAndTempReader_create(TASK_HUMIDITY_SENSOR_PRIORITY, HUMIDITY_TASK_STACK, 
    3d24:	e0 90 35 1a 	lds	r14, 0x1A35	; 0x801a35 <readyEventGroup>
    3d28:	f0 90 36 1a 	lds	r15, 0x1A36	; 0x801a36 <readyEventGroup+0x1>
    3d2c:	40 91 4f 1a 	lds	r20, 0x1A4F	; 0x801a4f <startMeasureEventGroup>
    3d30:	50 91 50 1a 	lds	r21, 0x1A50	; 0x801a50 <startMeasureEventGroup+0x1>
    3d34:	a1 2c       	mov	r10, r1
    3d36:	b1 2c       	mov	r11, r1
    3d38:	65 01       	movw	r12, r10
    3d3a:	68 94       	set
    3d3c:	a4 f8       	bld	r10, 4
    3d3e:	01 e0       	ldi	r16, 0x01	; 1
    3d40:	10 e0       	ldi	r17, 0x00	; 0
    3d42:	20 e0       	ldi	r18, 0x00	; 0
    3d44:	30 e0       	ldi	r19, 0x00	; 0
    3d46:	60 ec       	ldi	r22, 0xC0	; 192
    3d48:	82 e0       	ldi	r24, 0x02	; 2
    3d4a:	0e 94 8f 06 	call	0xd1e	; 0xd1e <humAndTempReader_create>
    3d4e:	c8 2f       	mov	r28, r24
    3d50:	d9 2f       	mov	r29, r25
	startMeasureEventGroup, BIT_MEASURE_HUMIDITY, readyEventGroup, BIT_DONE_MEASURE_HUMIDITY);
	
	co2reader_t co2reader = co2Reader_create(TASK_CO2_SENSOR_PRIORITY, CO2_TASK_STACK, startMeasureEventGroup, BIT_MEASURE_CO2,
    3d52:	e0 90 35 1a 	lds	r14, 0x1A35	; 0x801a35 <readyEventGroup>
    3d56:	f0 90 36 1a 	lds	r15, 0x1A36	; 0x801a36 <readyEventGroup+0x1>
    3d5a:	40 91 4f 1a 	lds	r20, 0x1A4F	; 0x801a4f <startMeasureEventGroup>
    3d5e:	50 91 50 1a 	lds	r21, 0x1A50	; 0x801a50 <startMeasureEventGroup+0x1>
    3d62:	a1 2c       	mov	r10, r1
    3d64:	b1 2c       	mov	r11, r1
    3d66:	65 01       	movw	r12, r10
    3d68:	68 94       	set
    3d6a:	a5 f8       	bld	r10, 5
    3d6c:	08 e0       	ldi	r16, 0x08	; 8
    3d6e:	10 e0       	ldi	r17, 0x00	; 0
    3d70:	20 e0       	ldi	r18, 0x00	; 0
    3d72:	30 e0       	ldi	r19, 0x00	; 0
    3d74:	60 ec       	ldi	r22, 0xC0	; 192
    3d76:	82 e0       	ldi	r24, 0x02	; 2
    3d78:	0e 94 86 02 	call	0x50c	; 0x50c <co2Reader_create>
    3d7c:	4c 01       	movw	r8, r24
	readyEventGroup, BIT_DONE_MEASURE_CO2);
	
	soundReader_t soundReader = soundReader_create(TASK_SOUND_SENSOR_PRIORITY, SOUND_TASK_STACK, startMeasureEventGroup, BIT_MEASURE_SOUND,
    3d7e:	e0 90 35 1a 	lds	r14, 0x1A35	; 0x801a35 <readyEventGroup>
    3d82:	f0 90 36 1a 	lds	r15, 0x1A36	; 0x801a36 <readyEventGroup+0x1>
    3d86:	40 91 4f 1a 	lds	r20, 0x1A4F	; 0x801a4f <startMeasureEventGroup>
    3d8a:	50 91 50 1a 	lds	r21, 0x1A50	; 0x801a50 <startMeasureEventGroup+0x1>
    3d8e:	a1 2c       	mov	r10, r1
    3d90:	b1 2c       	mov	r11, r1
    3d92:	65 01       	movw	r12, r10
    3d94:	68 94       	set
    3d96:	a6 f8       	bld	r10, 6
    3d98:	04 e0       	ldi	r16, 0x04	; 4
    3d9a:	10 e0       	ldi	r17, 0x00	; 0
    3d9c:	20 e0       	ldi	r18, 0x00	; 0
    3d9e:	30 e0       	ldi	r19, 0x00	; 0
    3da0:	60 ec       	ldi	r22, 0xC0	; 192
    3da2:	82 e0       	ldi	r24, 0x02	; 2
    3da4:	0e 94 71 07 	call	0xee2	; 0xee2 <soundReader_create>
    3da8:	18 2f       	mov	r17, r24
    3daa:	09 2f       	mov	r16, r25
	readyEventGroup, BIT_DONE_MEASURE_SOUND);	
	
	servo_initialise();
    3dac:	0e 94 64 07 	call	0xec8	; 0xec8 <servo_initialise>
	
	device_create(TASK_DEVICE_PRIORITY, DEVICE_TASK_STACK, startMeasureEventGroup, ALL_BIT_MEASURE,
    3db0:	e0 90 35 1a 	lds	r14, 0x1A35	; 0x801a35 <readyEventGroup>
    3db4:	f0 90 36 1a 	lds	r15, 0x1A36	; 0x801a36 <readyEventGroup+0x1>
    3db8:	40 91 4f 1a 	lds	r20, 0x1A4F	; 0x801a4f <startMeasureEventGroup>
    3dbc:	50 91 50 1a 	lds	r21, 0x1A50	; 0x801a50 <startMeasureEventGroup+0x1>
    3dc0:	80 91 4e 1a 	lds	r24, 0x1A4E	; 0x801a4e <messageBuffer+0x1>
    3dc4:	8f 93       	push	r24
    3dc6:	80 91 4d 1a 	lds	r24, 0x1A4D	; 0x801a4d <messageBuffer>
    3dca:	8f 93       	push	r24
    3dcc:	0f 93       	push	r16
    3dce:	1f 93       	push	r17
    3dd0:	df 93       	push	r29
    3dd2:	cf 93       	push	r28
    3dd4:	0f 2e       	mov	r0, r31
    3dd6:	f0 e7       	ldi	r31, 0x70	; 112
    3dd8:	af 2e       	mov	r10, r31
    3dda:	b1 2c       	mov	r11, r1
    3ddc:	c1 2c       	mov	r12, r1
    3dde:	d1 2c       	mov	r13, r1
    3de0:	f0 2d       	mov	r31, r0
    3de2:	0d e0       	ldi	r16, 0x0D	; 13
    3de4:	10 e0       	ldi	r17, 0x00	; 0
    3de6:	20 e0       	ldi	r18, 0x00	; 0
    3de8:	30 e0       	ldi	r19, 0x00	; 0
    3dea:	60 ec       	ldi	r22, 0xC0	; 192
    3dec:	84 e0       	ldi	r24, 0x04	; 4
    3dee:	0e 94 53 04 	call	0x8a6	; 0x8a6 <device_create>
	readyEventGroup, ALL_BIT_DONE_MEASURE, co2reader, humidityAndTemperature,soundReader, messageBuffer);
	
	lora_UpLinkHandler_create(TASK_LORA_UPLINK_PRIORITY,LORA_UPLINK_TASK_STACK,messageBuffer);
    3df2:	40 91 4d 1a 	lds	r20, 0x1A4D	; 0x801a4d <messageBuffer>
    3df6:	50 91 4e 1a 	lds	r21, 0x1A4E	; 0x801a4e <messageBuffer+0x1>
    3dfa:	60 ec       	ldi	r22, 0xC0	; 192
    3dfc:	81 e0       	ldi	r24, 0x01	; 1
    3dfe:	0e 94 29 08 	call	0x1052	; 0x1052 <lora_UpLinkHandler_create>
	lora_DownLinkHandler_create(TASK_LORA_DOWNLINK_PRIORITY,LORA_DOWNLINK_TASK_STACK,downlinkMessagebuffer);
    3e02:	40 91 33 1a 	lds	r20, 0x1A33	; 0x801a33 <downlinkMessagebuffer>
    3e06:	50 91 34 1a 	lds	r21, 0x1A34	; 0x801a34 <downlinkMessagebuffer+0x1>
    3e0a:	60 ec       	ldi	r22, 0xC0	; 192
    3e0c:	81 e0       	ldi	r24, 0x01	; 1
    3e0e:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <lora_DownLinkHandler_create>
}
    3e12:	0f 90       	pop	r0
    3e14:	0f 90       	pop	r0
    3e16:	0f 90       	pop	r0
    3e18:	0f 90       	pop	r0
    3e1a:	0f 90       	pop	r0
    3e1c:	0f 90       	pop	r0
    3e1e:	df 91       	pop	r29
    3e20:	cf 91       	pop	r28
    3e22:	1f 91       	pop	r17
    3e24:	0f 91       	pop	r16
    3e26:	ff 90       	pop	r15
    3e28:	ef 90       	pop	r14
    3e2a:	df 90       	pop	r13
    3e2c:	cf 90       	pop	r12
    3e2e:	bf 90       	pop	r11
    3e30:	af 90       	pop	r10
    3e32:	9f 90       	pop	r9
    3e34:	8f 90       	pop	r8
    3e36:	08 95       	ret

00003e38 <initialiseSystem>:

/*-----------------------------------------------------------*/
void initialiseSystem()
{
	startMeasureEventGroup = xEventGroupCreate();
    3e38:	0e 94 66 09 	call	0x12cc	; 0x12cc <xEventGroupCreate>
    3e3c:	90 93 50 1a 	sts	0x1A50, r25	; 0x801a50 <startMeasureEventGroup+0x1>
    3e40:	80 93 4f 1a 	sts	0x1A4F, r24	; 0x801a4f <startMeasureEventGroup>
	readyEventGroup = xEventGroupCreate();
    3e44:	0e 94 66 09 	call	0x12cc	; 0x12cc <xEventGroupCreate>
    3e48:	90 93 36 1a 	sts	0x1A36, r25	; 0x801a36 <readyEventGroup+0x1>
    3e4c:	80 93 35 1a 	sts	0x1A35, r24	; 0x801a35 <readyEventGroup>

	messageBuffer = xMessageBufferCreate(100);
    3e50:	41 e0       	ldi	r20, 0x01	; 1
    3e52:	60 e0       	ldi	r22, 0x00	; 0
    3e54:	70 e0       	ldi	r23, 0x00	; 0
    3e56:	84 e6       	ldi	r24, 0x64	; 100
    3e58:	90 e0       	ldi	r25, 0x00	; 0
    3e5a:	0e 94 b8 12 	call	0x2570	; 0x2570 <xStreamBufferGenericCreate>
    3e5e:	90 93 4e 1a 	sts	0x1A4E, r25	; 0x801a4e <messageBuffer+0x1>
    3e62:	80 93 4d 1a 	sts	0x1A4D, r24	; 0x801a4d <messageBuffer>
	downlinkMessagebuffer = xMessageBufferCreate(sizeof(lora_payload_t)*2);
    3e66:	41 e0       	ldi	r20, 0x01	; 1
    3e68:	60 e0       	ldi	r22, 0x00	; 0
    3e6a:	70 e0       	ldi	r23, 0x00	; 0
    3e6c:	8c e2       	ldi	r24, 0x2C	; 44
    3e6e:	90 e0       	ldi	r25, 0x00	; 0
    3e70:	0e 94 b8 12 	call	0x2570	; 0x2570 <xStreamBufferGenericCreate>
    3e74:	90 93 34 1a 	sts	0x1A34, r25	; 0x801a34 <downlinkMessagebuffer+0x1>
    3e78:	80 93 33 1a 	sts	0x1A33, r24	; 0x801a33 <downlinkMessagebuffer>

	// Set output ports for leds used in the example
	DDRA |= _BV(DDA0) | _BV(DDA7);
    3e7c:	81 b1       	in	r24, 0x01	; 1
    3e7e:	81 68       	ori	r24, 0x81	; 129
    3e80:	81 b9       	out	0x01, r24	; 1
	//// Initialise the trace-driver to be used together with the R2R-Network
	//trace_init();
	// Make it possible to use stdio on COM port 0 (USB) on Arduino board - Setting 57600,8,N,1
	stdioCreate(ser_USART0);
    3e82:	80 e0       	ldi	r24, 0x00	; 0
    3e84:	0e 94 4a 2b 	call	0x5694	; 0x5694 <stdioCreate>
	
	// vvvvvvvvvvvvvvvvv BELOW IS LoRaWAN initialisation vvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
	// Initialise the HAL layer and use 5 for LED driver priority
	hal_create(5);
    3e88:	85 e0       	ldi	r24, 0x05	; 5
    3e8a:	10 d0       	rcall	.+32     	; 0x3eac <hal_create>
	// Initialise the LoRaWAN driver with a down-link buffer
	
	
	lora_driver_create(LORA_USART, downlinkMessagebuffer);
    3e8c:	60 91 33 1a 	lds	r22, 0x1A33	; 0x801a33 <downlinkMessagebuffer>
    3e90:	70 91 34 1a 	lds	r23, 0x1A34	; 0x801a34 <downlinkMessagebuffer+0x1>
    3e94:	81 e0       	ldi	r24, 0x01	; 1
    3e96:	c2 c3       	rjmp	.+1924   	; 0x461c <lora_driver_create>
    3e98:	08 95       	ret

00003e9a <main>:
}

/*-----------------------------------------------------------*/
int main(void)
{
	initialiseSystem(); // Must be done as the very first thing!!
    3e9a:	ce df       	rcall	.-100    	; 0x3e38 <initialiseSystem>
	create_tasks_and_semaphores();
    3e9c:	35 df       	rcall	.-406    	; 0x3d08 <create_tasks_and_semaphores>
    3e9e:	8a ec       	ldi	r24, 0xCA	; 202
	printf("Program Started!!\n");
    3ea0:	94 e0       	ldi	r25, 0x04	; 4
    3ea2:	0e 94 73 31 	call	0x62e6	; 0x62e6 <puts>
    3ea6:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <vTaskStartScheduler>
	vTaskStartScheduler(); // Initialise and run the freeRTOS scheduler.
    3eaa:	ff cf       	rjmp	.-2      	; 0x3eaa <main+0x10>

00003eac <hal_create>:
    3eac:	e1 e5       	ldi	r30, 0x51	; 81
    3eae:	fa e1       	ldi	r31, 0x1A	; 26
    3eb0:	23 e6       	ldi	r18, 0x63	; 99
    3eb2:	36 e2       	ldi	r19, 0x26	; 38
    3eb4:	31 83       	std	Z+1, r19	; 0x01
    3eb6:	20 83       	st	Z, r18
    3eb8:	26 e6       	ldi	r18, 0x66	; 102
    3eba:	36 e2       	ldi	r19, 0x26	; 38
    3ebc:	33 83       	std	Z+3, r19	; 0x03
    3ebe:	22 83       	std	Z+2, r18	; 0x02
    3ec0:	21 e7       	ldi	r18, 0x71	; 113
    3ec2:	36 e2       	ldi	r19, 0x26	; 38
    3ec4:	35 83       	std	Z+5, r19	; 0x05
    3ec6:	24 83       	std	Z+4, r18	; 0x04
    3ec8:	25 e7       	ldi	r18, 0x75	; 117
    3eca:	36 e2       	ldi	r19, 0x26	; 38
    3ecc:	37 83       	std	Z+7, r19	; 0x07
    3ece:	26 83       	std	Z+6, r18	; 0x06
    3ed0:	2b e7       	ldi	r18, 0x7B	; 123
    3ed2:	36 e2       	ldi	r19, 0x26	; 38
    3ed4:	31 87       	std	Z+9, r19	; 0x09
    3ed6:	20 87       	std	Z+8, r18	; 0x08
    3ed8:	27 e8       	ldi	r18, 0x87	; 135
    3eda:	36 e2       	ldi	r19, 0x26	; 38
    3edc:	33 87       	std	Z+11, r19	; 0x0b
    3ede:	22 87       	std	Z+10, r18	; 0x0a
    3ee0:	2c e8       	ldi	r18, 0x8C	; 140
    3ee2:	36 e2       	ldi	r19, 0x26	; 38
    3ee4:	35 87       	std	Z+13, r19	; 0x0d
    3ee6:	24 87       	std	Z+12, r18	; 0x0c
    3ee8:	28 e9       	ldi	r18, 0x98	; 152
    3eea:	36 e2       	ldi	r19, 0x26	; 38
    3eec:	37 87       	std	Z+15, r19	; 0x0f
    3eee:	26 87       	std	Z+14, r18	; 0x0e
    3ef0:	28 e7       	ldi	r18, 0x78	; 120
    3ef2:	36 e2       	ldi	r19, 0x26	; 38
    3ef4:	31 8b       	std	Z+17, r19	; 0x11
    3ef6:	20 8b       	std	Z+16, r18	; 0x10
    3ef8:	2d e9       	ldi	r18, 0x9D	; 157
    3efa:	36 e2       	ldi	r19, 0x26	; 38
    3efc:	33 8b       	std	Z+19, r19	; 0x13
    3efe:	22 8b       	std	Z+18, r18	; 0x12
    3f00:	2a ea       	ldi	r18, 0xAA	; 170
    3f02:	36 e2       	ldi	r19, 0x26	; 38
    3f04:	35 8b       	std	Z+21, r19	; 0x15
    3f06:	24 8b       	std	Z+20, r18	; 0x14
    3f08:	68 2f       	mov	r22, r24
    3f0a:	cf 01       	movw	r24, r30
    3f0c:	53 c1       	rjmp	.+678    	; 0x41b4 <led_create>
    3f0e:	08 95       	ret

00003f10 <_hihTwiCallback>:
    3f10:	65 30       	cpi	r22, 0x05	; 5
    3f12:	f1 f4       	brne	.+60     	; 0x3f50 <_hihTwiCallback+0x40>
    3f14:	fa 01       	movw	r30, r20
    3f16:	80 81       	ld	r24, Z
    3f18:	8f 73       	andi	r24, 0x3F	; 63
    3f1a:	90 e0       	ldi	r25, 0x00	; 0
    3f1c:	98 2f       	mov	r25, r24
    3f1e:	88 27       	eor	r24, r24
    3f20:	21 81       	ldd	r18, Z+1	; 0x01
    3f22:	82 2b       	or	r24, r18
    3f24:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <_hum+0x1>
    3f28:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <_hum>
    3f2c:	82 81       	ldd	r24, Z+2	; 0x02
    3f2e:	f0 e4       	ldi	r31, 0x40	; 64
    3f30:	8f 9f       	mul	r24, r31
    3f32:	c0 01       	movw	r24, r0
    3f34:	11 24       	eor	r1, r1
    3f36:	fa 01       	movw	r30, r20
    3f38:	23 81       	ldd	r18, Z+3	; 0x03
    3f3a:	26 95       	lsr	r18
    3f3c:	26 95       	lsr	r18
    3f3e:	82 2b       	or	r24, r18
    3f40:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <_temp+0x1>
    3f44:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <_temp>
    3f48:	81 e0       	ldi	r24, 0x01	; 1
    3f4a:	80 93 d7 18 	sts	0x18D7, r24	; 0x8018d7 <_measuringIsReady>
    3f4e:	08 95       	ret
    3f50:	64 30       	cpi	r22, 0x04	; 4
    3f52:	51 f0       	breq	.+20     	; 0x3f68 <_hihTwiCallback+0x58>
    3f54:	80 e0       	ldi	r24, 0x00	; 0
    3f56:	90 e4       	ldi	r25, 0x40	; 64
    3f58:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <_temp+0x1>
    3f5c:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <_temp>
    3f60:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <_hum+0x1>
    3f64:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <_hum>
    3f68:	08 95       	ret

00003f6a <hih8120Create>:
    3f6a:	0f 93       	push	r16
    3f6c:	1f 93       	push	r17
    3f6e:	08 e8       	ldi	r16, 0x88	; 136
    3f70:	1f e1       	ldi	r17, 0x1F	; 31
    3f72:	20 e0       	ldi	r18, 0x00	; 0
    3f74:	34 e2       	ldi	r19, 0x24	; 36
    3f76:	44 ef       	ldi	r20, 0xF4	; 244
    3f78:	50 e0       	ldi	r21, 0x00	; 0
    3f7a:	60 e0       	ldi	r22, 0x00	; 0
    3f7c:	87 e2       	ldi	r24, 0x27	; 39
    3f7e:	0e 94 84 2b 	call	0x5708	; 0x5708 <twiCreate>
    3f82:	90 93 d9 18 	sts	0x18D9, r25	; 0x8018d9 <_hih8120Handler+0x1>
    3f86:	80 93 d8 18 	sts	0x18D8, r24	; 0x8018d8 <_hih8120Handler>
    3f8a:	21 e0       	ldi	r18, 0x01	; 1
    3f8c:	89 2b       	or	r24, r25
    3f8e:	09 f0       	breq	.+2      	; 0x3f92 <hih8120Create+0x28>
    3f90:	20 e0       	ldi	r18, 0x00	; 0
    3f92:	82 2f       	mov	r24, r18
    3f94:	1f 91       	pop	r17
    3f96:	0f 91       	pop	r16
    3f98:	08 95       	ret

00003f9a <hih8120IsReady>:
    3f9a:	80 91 d7 18 	lds	r24, 0x18D7	; 0x8018d7 <_measuringIsReady>
    3f9e:	08 95       	ret

00003fa0 <hih8120Wakeup>:
    3fa0:	80 91 d8 18 	lds	r24, 0x18D8	; 0x8018d8 <_hih8120Handler>
    3fa4:	90 91 d9 18 	lds	r25, 0x18D9	; 0x8018d9 <_hih8120Handler+0x1>
    3fa8:	00 97       	sbiw	r24, 0x00	; 0
    3faa:	59 f0       	breq	.+22     	; 0x3fc2 <hih8120Wakeup+0x22>
    3fac:	40 e0       	ldi	r20, 0x00	; 0
    3fae:	60 e0       	ldi	r22, 0x00	; 0
    3fb0:	70 e0       	ldi	r23, 0x00	; 0
    3fb2:	0e 94 d5 2b 	call	0x57aa	; 0x57aa <twiTransmit>
    3fb6:	84 30       	cpi	r24, 0x04	; 4
    3fb8:	31 f4       	brne	.+12     	; 0x3fc6 <hih8120Wakeup+0x26>
    3fba:	10 92 d7 18 	sts	0x18D7, r1	; 0x8018d7 <_measuringIsReady>
    3fbe:	80 e0       	ldi	r24, 0x00	; 0
    3fc0:	08 95       	ret
    3fc2:	82 e0       	ldi	r24, 0x02	; 2
    3fc4:	08 95       	ret
    3fc6:	83 e0       	ldi	r24, 0x03	; 3
    3fc8:	08 95       	ret

00003fca <hih8120Meassure>:
    3fca:	80 91 d8 18 	lds	r24, 0x18D8	; 0x8018d8 <_hih8120Handler>
    3fce:	90 91 d9 18 	lds	r25, 0x18D9	; 0x8018d9 <_hih8120Handler+0x1>
    3fd2:	00 97       	sbiw	r24, 0x00	; 0
    3fd4:	39 f0       	breq	.+14     	; 0x3fe4 <hih8120Meassure+0x1a>
    3fd6:	64 e0       	ldi	r22, 0x04	; 4
    3fd8:	0e 94 21 2c 	call	0x5842	; 0x5842 <twiReceive>
    3fdc:	85 30       	cpi	r24, 0x05	; 5
    3fde:	21 f0       	breq	.+8      	; 0x3fe8 <hih8120Meassure+0x1e>
    3fe0:	83 e0       	ldi	r24, 0x03	; 3
    3fe2:	08 95       	ret
    3fe4:	82 e0       	ldi	r24, 0x02	; 2
    3fe6:	08 95       	ret
    3fe8:	80 e0       	ldi	r24, 0x00	; 0
    3fea:	08 95       	ret

00003fec <hih8120GetHumidity>:
    3fec:	60 91 0c 02 	lds	r22, 0x020C	; 0x80020c <_hum>
    3ff0:	70 91 0d 02 	lds	r23, 0x020D	; 0x80020d <_hum+0x1>
    3ff4:	80 e0       	ldi	r24, 0x00	; 0
    3ff6:	90 e0       	ldi	r25, 0x00	; 0
    3ff8:	0e 94 2b 2e 	call	0x5c56	; 0x5c56 <__floatunsisf>
    3ffc:	20 e0       	ldi	r18, 0x00	; 0
    3ffe:	30 e0       	ldi	r19, 0x00	; 0
    4000:	48 ec       	ldi	r20, 0xC8	; 200
    4002:	52 e4       	ldi	r21, 0x42	; 66
    4004:	0e 94 b9 2e 	call	0x5d72	; 0x5d72 <__mulsf3>
    4008:	20 e0       	ldi	r18, 0x00	; 0
    400a:	38 ef       	ldi	r19, 0xF8	; 248
    400c:	4f e7       	ldi	r20, 0x7F	; 127
    400e:	56 e4       	ldi	r21, 0x46	; 70
    4010:	0c 94 92 2d 	jmp	0x5b24	; 0x5b24 <__divsf3>
    4014:	08 95       	ret

00004016 <hih8120GetHumidityPercent_x10>:
    4016:	ea df       	rcall	.-44     	; 0x3fec <hih8120GetHumidity>
    4018:	20 e0       	ldi	r18, 0x00	; 0
    401a:	30 e0       	ldi	r19, 0x00	; 0
    401c:	40 e2       	ldi	r20, 0x20	; 32
    401e:	51 e4       	ldi	r21, 0x41	; 65
    4020:	0e 94 b9 2e 	call	0x5d72	; 0x5d72 <__mulsf3>
    4024:	0e 94 ff 2d 	call	0x5bfe	; 0x5bfe <__fixunssfsi>
    4028:	cb 01       	movw	r24, r22
    402a:	08 95       	ret

0000402c <hih8120GetTemperature>:
    402c:	60 91 0a 02 	lds	r22, 0x020A	; 0x80020a <_temp>
    4030:	70 91 0b 02 	lds	r23, 0x020B	; 0x80020b <_temp+0x1>
    4034:	80 e0       	ldi	r24, 0x00	; 0
    4036:	90 e0       	ldi	r25, 0x00	; 0
    4038:	0e 94 2b 2e 	call	0x5c56	; 0x5c56 <__floatunsisf>
    403c:	20 e0       	ldi	r18, 0x00	; 0
    403e:	30 e0       	ldi	r19, 0x00	; 0
    4040:	45 e2       	ldi	r20, 0x25	; 37
    4042:	53 e4       	ldi	r21, 0x43	; 67
    4044:	0e 94 b9 2e 	call	0x5d72	; 0x5d72 <__mulsf3>
    4048:	20 e0       	ldi	r18, 0x00	; 0
    404a:	38 ef       	ldi	r19, 0xF8	; 248
    404c:	4f e7       	ldi	r20, 0x7F	; 127
    404e:	56 e4       	ldi	r21, 0x46	; 70
    4050:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__divsf3>
    4054:	20 e0       	ldi	r18, 0x00	; 0
    4056:	30 e0       	ldi	r19, 0x00	; 0
    4058:	40 e2       	ldi	r20, 0x20	; 32
    405a:	52 e4       	ldi	r21, 0x42	; 66
    405c:	0c 94 2d 2d 	jmp	0x5a5a	; 0x5a5a <__subsf3>
    4060:	08 95       	ret

00004062 <hih8120GetTemperature_x10>:
    4062:	e4 df       	rcall	.-56     	; 0x402c <hih8120GetTemperature>
    4064:	20 e0       	ldi	r18, 0x00	; 0
    4066:	30 e0       	ldi	r19, 0x00	; 0
    4068:	40 e2       	ldi	r20, 0x20	; 32
    406a:	51 e4       	ldi	r21, 0x41	; 65
    406c:	0e 94 b9 2e 	call	0x5d72	; 0x5d72 <__mulsf3>
    4070:	0e 94 fa 2d 	call	0x5bf4	; 0x5bf4 <__fixsfsi>
    4074:	cb 01       	movw	r24, r22
    4076:	08 95       	ret

00004078 <_turn_off>:
    4078:	cf 93       	push	r28
    407a:	df 93       	push	r29
    407c:	90 e0       	ldi	r25, 0x00	; 0
    407e:	fc 01       	movw	r30, r24
    4080:	ee 0f       	add	r30, r30
    4082:	ff 1f       	adc	r31, r31
    4084:	e8 0f       	add	r30, r24
    4086:	f9 1f       	adc	r31, r25
    4088:	ee 0f       	add	r30, r30
    408a:	ff 1f       	adc	r31, r31
    408c:	e6 52       	subi	r30, 0x26	; 38
    408e:	f7 4e       	sbci	r31, 0xE7	; 231
    4090:	23 81       	ldd	r18, Z+3	; 0x03
    4092:	21 11       	cpse	r18, r1
    4094:	0a c0       	rjmp	.+20     	; 0x40aa <_turn_off+0x32>
    4096:	ef 01       	movw	r28, r30
    4098:	e0 91 59 1a 	lds	r30, 0x1A59	; 0x801a59 <register_access+0x8>
    409c:	f0 91 5a 1a 	lds	r31, 0x1A5A	; 0x801a5a <register_access+0x9>
    40a0:	6a 81       	ldd	r22, Y+2	; 0x02
    40a2:	88 81       	ld	r24, Y
    40a4:	99 81       	ldd	r25, Y+1	; 0x01
    40a6:	19 95       	eicall
    40a8:	12 c0       	rjmp	.+36     	; 0x40ce <_turn_off+0x56>
    40aa:	dc 01       	movw	r26, r24
    40ac:	aa 0f       	add	r26, r26
    40ae:	bb 1f       	adc	r27, r27
    40b0:	ed 01       	movw	r28, r26
    40b2:	c8 0f       	add	r28, r24
    40b4:	d9 1f       	adc	r29, r25
    40b6:	cc 0f       	add	r28, r28
    40b8:	dd 1f       	adc	r29, r29
    40ba:	c6 52       	subi	r28, 0x26	; 38
    40bc:	d7 4e       	sbci	r29, 0xE7	; 231
    40be:	e0 91 63 1a 	lds	r30, 0x1A63	; 0x801a63 <register_access+0x12>
    40c2:	f0 91 64 1a 	lds	r31, 0x1A64	; 0x801a64 <register_access+0x13>
    40c6:	6a 81       	ldd	r22, Y+2	; 0x02
    40c8:	88 81       	ld	r24, Y
    40ca:	99 81       	ldd	r25, Y+1	; 0x01
    40cc:	19 95       	eicall
    40ce:	df 91       	pop	r29
    40d0:	cf 91       	pop	r28
    40d2:	08 95       	ret

000040d4 <_turn_on>:
    40d4:	cf 93       	push	r28
    40d6:	df 93       	push	r29
    40d8:	90 e0       	ldi	r25, 0x00	; 0
    40da:	fc 01       	movw	r30, r24
    40dc:	ee 0f       	add	r30, r30
    40de:	ff 1f       	adc	r31, r31
    40e0:	e8 0f       	add	r30, r24
    40e2:	f9 1f       	adc	r31, r25
    40e4:	ee 0f       	add	r30, r30
    40e6:	ff 1f       	adc	r31, r31
    40e8:	e6 52       	subi	r30, 0x26	; 38
    40ea:	f7 4e       	sbci	r31, 0xE7	; 231
    40ec:	23 81       	ldd	r18, Z+3	; 0x03
    40ee:	21 11       	cpse	r18, r1
    40f0:	0a c0       	rjmp	.+20     	; 0x4106 <_turn_on+0x32>
    40f2:	ef 01       	movw	r28, r30
    40f4:	e0 91 63 1a 	lds	r30, 0x1A63	; 0x801a63 <register_access+0x12>
    40f8:	f0 91 64 1a 	lds	r31, 0x1A64	; 0x801a64 <register_access+0x13>
    40fc:	6a 81       	ldd	r22, Y+2	; 0x02
    40fe:	88 81       	ld	r24, Y
    4100:	99 81       	ldd	r25, Y+1	; 0x01
    4102:	19 95       	eicall
    4104:	12 c0       	rjmp	.+36     	; 0x412a <_turn_on+0x56>
    4106:	dc 01       	movw	r26, r24
    4108:	aa 0f       	add	r26, r26
    410a:	bb 1f       	adc	r27, r27
    410c:	ed 01       	movw	r28, r26
    410e:	c8 0f       	add	r28, r24
    4110:	d9 1f       	adc	r29, r25
    4112:	cc 0f       	add	r28, r28
    4114:	dd 1f       	adc	r29, r29
    4116:	c6 52       	subi	r28, 0x26	; 38
    4118:	d7 4e       	sbci	r29, 0xE7	; 231
    411a:	e0 91 59 1a 	lds	r30, 0x1A59	; 0x801a59 <register_access+0x8>
    411e:	f0 91 5a 1a 	lds	r31, 0x1A5A	; 0x801a5a <register_access+0x9>
    4122:	6a 81       	ldd	r22, Y+2	; 0x02
    4124:	88 81       	ld	r24, Y
    4126:	99 81       	ldd	r25, Y+1	; 0x01
    4128:	19 95       	eicall
    412a:	df 91       	pop	r29
    412c:	cf 91       	pop	r28
    412e:	08 95       	ret

00004130 <_hal_led_task>:
    4130:	0f 2e       	mov	r0, r31
    4132:	f1 e5       	ldi	r31, 0x51	; 81
    4134:	cf 2e       	mov	r12, r31
    4136:	fa e1       	ldi	r31, 0x1A	; 26
    4138:	df 2e       	mov	r13, r31
    413a:	f0 2d       	mov	r31, r0
    413c:	04 e0       	ldi	r16, 0x04	; 4
    413e:	ca ed       	ldi	r28, 0xDA	; 218
    4140:	d8 e1       	ldi	r29, 0x18	; 24
    4142:	10 e0       	ldi	r17, 0x00	; 0
    4144:	8c 81       	ldd	r24, Y+4	; 0x04
    4146:	81 30       	cpi	r24, 0x01	; 1
    4148:	69 f0       	breq	.+26     	; 0x4164 <_hal_led_task+0x34>
    414a:	e8 f0       	brcs	.+58     	; 0x4186 <_hal_led_task+0x56>
    414c:	82 30       	cpi	r24, 0x02	; 2
    414e:	39 f5       	brne	.+78     	; 0x419e <_hal_led_task+0x6e>
    4150:	d6 01       	movw	r26, r12
    4152:	1c 96       	adiw	r26, 0x0c	; 12
    4154:	ed 91       	ld	r30, X+
    4156:	fc 91       	ld	r31, X
    4158:	1d 97       	sbiw	r26, 0x0d	; 13
    415a:	6a 81       	ldd	r22, Y+2	; 0x02
    415c:	88 81       	ld	r24, Y
    415e:	99 81       	ldd	r25, Y+1	; 0x01
    4160:	19 95       	eicall
    4162:	1d c0       	rjmp	.+58     	; 0x419e <_hal_led_task+0x6e>
    4164:	8d 81       	ldd	r24, Y+5	; 0x05
    4166:	8f 5f       	subi	r24, 0xFF	; 255
    4168:	8a 30       	cpi	r24, 0x0A	; 10
    416a:	10 f4       	brcc	.+4      	; 0x4170 <_hal_led_task+0x40>
    416c:	8d 83       	std	Y+5, r24	; 0x05
    416e:	17 c0       	rjmp	.+46     	; 0x419e <_hal_led_task+0x6e>
    4170:	1d 82       	std	Y+5, r1	; 0x05
    4172:	d6 01       	movw	r26, r12
    4174:	1c 96       	adiw	r26, 0x0c	; 12
    4176:	ed 91       	ld	r30, X+
    4178:	fc 91       	ld	r31, X
    417a:	1d 97       	sbiw	r26, 0x0d	; 13
    417c:	6a 81       	ldd	r22, Y+2	; 0x02
    417e:	88 81       	ld	r24, Y
    4180:	99 81       	ldd	r25, Y+1	; 0x01
    4182:	19 95       	eicall
    4184:	0c c0       	rjmp	.+24     	; 0x419e <_hal_led_task+0x6e>
    4186:	8d 81       	ldd	r24, Y+5	; 0x05
    4188:	88 23       	and	r24, r24
    418a:	31 f0       	breq	.+12     	; 0x4198 <_hal_led_task+0x68>
    418c:	81 2f       	mov	r24, r17
    418e:	a2 df       	rcall	.-188    	; 0x40d4 <_turn_on>
    4190:	8d 81       	ldd	r24, Y+5	; 0x05
    4192:	81 50       	subi	r24, 0x01	; 1
    4194:	8d 83       	std	Y+5, r24	; 0x05
    4196:	03 c0       	rjmp	.+6      	; 0x419e <_hal_led_task+0x6e>
    4198:	0c 83       	std	Y+4, r16	; 0x04
    419a:	81 2f       	mov	r24, r17
    419c:	6d df       	rcall	.-294    	; 0x4078 <_turn_off>
    419e:	1f 5f       	subi	r17, 0xFF	; 255
    41a0:	26 96       	adiw	r28, 0x06	; 6
    41a2:	14 30       	cpi	r17, 0x04	; 4
    41a4:	79 f6       	brne	.-98     	; 0x4144 <_hal_led_task+0x14>
    41a6:	65 e0       	ldi	r22, 0x05	; 5
    41a8:	70 e0       	ldi	r23, 0x00	; 0
    41aa:	80 e0       	ldi	r24, 0x00	; 0
    41ac:	90 e0       	ldi	r25, 0x00	; 0
    41ae:	0e 94 13 18 	call	0x3026	; 0x3026 <vTaskDelay>
    41b2:	c5 cf       	rjmp	.-118    	; 0x413e <_hal_led_task+0xe>

000041b4 <led_create>:
    41b4:	cf 92       	push	r12
    41b6:	df 92       	push	r13
    41b8:	ef 92       	push	r14
    41ba:	ff 92       	push	r15
    41bc:	0f 93       	push	r16
    41be:	1f 93       	push	r17
    41c0:	cf 93       	push	r28
    41c2:	df 93       	push	r29
    41c4:	06 2f       	mov	r16, r22
    41c6:	0f 2e       	mov	r0, r31
    41c8:	f1 e5       	ldi	r31, 0x51	; 81
    41ca:	ef 2e       	mov	r14, r31
    41cc:	fa e1       	ldi	r31, 0x1A	; 26
    41ce:	ff 2e       	mov	r15, r31
    41d0:	f0 2d       	mov	r31, r0
    41d2:	d7 01       	movw	r26, r14
    41d4:	18 96       	adiw	r26, 0x08	; 8
    41d6:	ed 91       	ld	r30, X+
    41d8:	fc 91       	ld	r31, X
    41da:	19 97       	sbiw	r26, 0x09	; 9
    41dc:	66 e0       	ldi	r22, 0x06	; 6
    41de:	87 e2       	ldi	r24, 0x27	; 39
    41e0:	90 e0       	ldi	r25, 0x00	; 0
    41e2:	19 95       	eicall
    41e4:	ca ed       	ldi	r28, 0xDA	; 218
    41e6:	d8 e1       	ldi	r29, 0x18	; 24
    41e8:	0f 2e       	mov	r0, r31
    41ea:	f8 e2       	ldi	r31, 0x28	; 40
    41ec:	cf 2e       	mov	r12, r31
    41ee:	d1 2c       	mov	r13, r1
    41f0:	f0 2d       	mov	r31, r0
    41f2:	d9 82       	std	Y+1, r13	; 0x01
    41f4:	c8 82       	st	Y, r12
    41f6:	86 e0       	ldi	r24, 0x06	; 6
    41f8:	8a 83       	std	Y+2, r24	; 0x02
    41fa:	1b 82       	std	Y+3, r1	; 0x03
    41fc:	14 e0       	ldi	r17, 0x04	; 4
    41fe:	1c 83       	std	Y+4, r17	; 0x04
    4200:	80 e0       	ldi	r24, 0x00	; 0
    4202:	3a df       	rcall	.-396    	; 0x4078 <_turn_off>
    4204:	d7 01       	movw	r26, r14
    4206:	18 96       	adiw	r26, 0x08	; 8
    4208:	ed 91       	ld	r30, X+
    420a:	fc 91       	ld	r31, X
    420c:	19 97       	sbiw	r26, 0x09	; 9
    420e:	67 e0       	ldi	r22, 0x07	; 7
    4210:	87 e2       	ldi	r24, 0x27	; 39
    4212:	90 e0       	ldi	r25, 0x00	; 0
    4214:	19 95       	eicall
    4216:	df 82       	std	Y+7, r13	; 0x07
    4218:	ce 82       	std	Y+6, r12	; 0x06
    421a:	87 e0       	ldi	r24, 0x07	; 7
    421c:	88 87       	std	Y+8, r24	; 0x08
    421e:	19 86       	std	Y+9, r1	; 0x09
    4220:	1a 87       	std	Y+10, r17	; 0x0a
    4222:	81 e0       	ldi	r24, 0x01	; 1
    4224:	29 df       	rcall	.-430    	; 0x4078 <_turn_off>
    4226:	d7 01       	movw	r26, r14
    4228:	18 96       	adiw	r26, 0x08	; 8
    422a:	ed 91       	ld	r30, X+
    422c:	fc 91       	ld	r31, X
    422e:	19 97       	sbiw	r26, 0x09	; 9
    4230:	65 e0       	ldi	r22, 0x05	; 5
    4232:	83 e3       	ldi	r24, 0x33	; 51
    4234:	90 e0       	ldi	r25, 0x00	; 0
    4236:	19 95       	eicall
    4238:	d7 01       	movw	r26, r14
    423a:	18 96       	adiw	r26, 0x08	; 8
    423c:	ed 91       	ld	r30, X+
    423e:	fc 91       	ld	r31, X
    4240:	19 97       	sbiw	r26, 0x09	; 9
    4242:	61 e0       	ldi	r22, 0x01	; 1
    4244:	84 e3       	ldi	r24, 0x34	; 52
    4246:	90 e0       	ldi	r25, 0x00	; 0
    4248:	19 95       	eicall
    424a:	84 e3       	ldi	r24, 0x34	; 52
    424c:	90 e0       	ldi	r25, 0x00	; 0
    424e:	9d 87       	std	Y+13, r25	; 0x0d
    4250:	8c 87       	std	Y+12, r24	; 0x0c
    4252:	85 e0       	ldi	r24, 0x05	; 5
    4254:	8e 87       	std	Y+14, r24	; 0x0e
    4256:	1f 86       	std	Y+15, r1	; 0x0f
    4258:	18 8b       	std	Y+16, r17	; 0x10
    425a:	82 e0       	ldi	r24, 0x02	; 2
    425c:	0d df       	rcall	.-486    	; 0x4078 <_turn_off>
    425e:	d7 01       	movw	r26, r14
    4260:	18 96       	adiw	r26, 0x08	; 8
    4262:	ed 91       	ld	r30, X+
    4264:	fc 91       	ld	r31, X
    4266:	19 97       	sbiw	r26, 0x09	; 9
    4268:	64 e0       	ldi	r22, 0x04	; 4
    426a:	81 e0       	ldi	r24, 0x01	; 1
    426c:	91 e0       	ldi	r25, 0x01	; 1
    426e:	19 95       	eicall
    4270:	d7 01       	movw	r26, r14
    4272:	18 96       	adiw	r26, 0x08	; 8
    4274:	ed 91       	ld	r30, X+
    4276:	fc 91       	ld	r31, X
    4278:	19 97       	sbiw	r26, 0x09	; 9
    427a:	61 e0       	ldi	r22, 0x01	; 1
    427c:	82 e0       	ldi	r24, 0x02	; 2
    427e:	91 e0       	ldi	r25, 0x01	; 1
    4280:	19 95       	eicall
    4282:	82 e0       	ldi	r24, 0x02	; 2
    4284:	91 e0       	ldi	r25, 0x01	; 1
    4286:	9b 8b       	std	Y+19, r25	; 0x13
    4288:	8a 8b       	std	Y+18, r24	; 0x12
    428a:	1c 8b       	std	Y+20, r17	; 0x14
    428c:	1d 8a       	std	Y+21, r1	; 0x15
    428e:	1e 8b       	std	Y+22, r17	; 0x16
    4290:	83 e0       	ldi	r24, 0x03	; 3
    4292:	f2 de       	rcall	.-540    	; 0x4078 <_turn_off>
    4294:	e1 2c       	mov	r14, r1
    4296:	f1 2c       	mov	r15, r1
    4298:	20 e0       	ldi	r18, 0x00	; 0
    429a:	30 e0       	ldi	r19, 0x00	; 0
    429c:	40 ec       	ldi	r20, 0xC0	; 192
    429e:	50 e0       	ldi	r21, 0x00	; 0
    42a0:	6c ed       	ldi	r22, 0xDC	; 220
    42a2:	74 e0       	ldi	r23, 0x04	; 4
    42a4:	88 e9       	ldi	r24, 0x98	; 152
    42a6:	90 e2       	ldi	r25, 0x20	; 32
    42a8:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <xTaskCreate>
    42ac:	df 91       	pop	r29
    42ae:	cf 91       	pop	r28
    42b0:	1f 91       	pop	r17
    42b2:	0f 91       	pop	r16
    42b4:	ff 90       	pop	r15
    42b6:	ef 90       	pop	r14
    42b8:	df 90       	pop	r13
    42ba:	cf 90       	pop	r12
    42bc:	08 95       	ret

000042be <led_slow_blink>:
    42be:	0f 93       	push	r16
    42c0:	1f 93       	push	r17
    42c2:	cf 93       	push	r28
    42c4:	df 93       	push	r29
    42c6:	c8 2f       	mov	r28, r24
    42c8:	d0 e0       	ldi	r29, 0x00	; 0
    42ca:	8e 01       	movw	r16, r28
    42cc:	00 0f       	add	r16, r16
    42ce:	11 1f       	adc	r17, r17
    42d0:	d8 01       	movw	r26, r16
    42d2:	ac 0f       	add	r26, r28
    42d4:	bd 1f       	adc	r27, r29
    42d6:	aa 0f       	add	r26, r26
    42d8:	bb 1f       	adc	r27, r27
    42da:	a6 52       	subi	r26, 0x26	; 38
    42dc:	b7 4e       	sbci	r27, 0xE7	; 231
    42de:	e0 91 5d 1a 	lds	r30, 0x1A5D	; 0x801a5d <register_access+0xc>
    42e2:	f0 91 5e 1a 	lds	r31, 0x1A5E	; 0x801a5e <register_access+0xd>
    42e6:	12 96       	adiw	r26, 0x02	; 2
    42e8:	6c 91       	ld	r22, X
    42ea:	12 97       	sbiw	r26, 0x02	; 2
    42ec:	8d 91       	ld	r24, X+
    42ee:	9c 91       	ld	r25, X
    42f0:	19 95       	eicall
    42f2:	c0 0f       	add	r28, r16
    42f4:	d1 1f       	adc	r29, r17
    42f6:	cc 0f       	add	r28, r28
    42f8:	dd 1f       	adc	r29, r29
    42fa:	c6 52       	subi	r28, 0x26	; 38
    42fc:	d7 4e       	sbci	r29, 0xE7	; 231
    42fe:	81 e0       	ldi	r24, 0x01	; 1
    4300:	8c 83       	std	Y+4, r24	; 0x04
    4302:	df 91       	pop	r29
    4304:	cf 91       	pop	r28
    4306:	1f 91       	pop	r17
    4308:	0f 91       	pop	r16
    430a:	08 95       	ret

0000430c <led_fast_blink>:
    430c:	0f 93       	push	r16
    430e:	1f 93       	push	r17
    4310:	cf 93       	push	r28
    4312:	df 93       	push	r29
    4314:	c8 2f       	mov	r28, r24
    4316:	d0 e0       	ldi	r29, 0x00	; 0
    4318:	8e 01       	movw	r16, r28
    431a:	00 0f       	add	r16, r16
    431c:	11 1f       	adc	r17, r17
    431e:	d8 01       	movw	r26, r16
    4320:	ac 0f       	add	r26, r28
    4322:	bd 1f       	adc	r27, r29
    4324:	aa 0f       	add	r26, r26
    4326:	bb 1f       	adc	r27, r27
    4328:	a6 52       	subi	r26, 0x26	; 38
    432a:	b7 4e       	sbci	r27, 0xE7	; 231
    432c:	e0 91 5d 1a 	lds	r30, 0x1A5D	; 0x801a5d <register_access+0xc>
    4330:	f0 91 5e 1a 	lds	r31, 0x1A5E	; 0x801a5e <register_access+0xd>
    4334:	12 96       	adiw	r26, 0x02	; 2
    4336:	6c 91       	ld	r22, X
    4338:	12 97       	sbiw	r26, 0x02	; 2
    433a:	8d 91       	ld	r24, X+
    433c:	9c 91       	ld	r25, X
    433e:	19 95       	eicall
    4340:	c0 0f       	add	r28, r16
    4342:	d1 1f       	adc	r29, r17
    4344:	cc 0f       	add	r28, r28
    4346:	dd 1f       	adc	r29, r29
    4348:	c6 52       	subi	r28, 0x26	; 38
    434a:	d7 4e       	sbci	r29, 0xE7	; 231
    434c:	82 e0       	ldi	r24, 0x02	; 2
    434e:	8c 83       	std	Y+4, r24	; 0x04
    4350:	df 91       	pop	r29
    4352:	cf 91       	pop	r28
    4354:	1f 91       	pop	r17
    4356:	0f 91       	pop	r16
    4358:	08 95       	ret

0000435a <led_led_on>:
    435a:	28 2f       	mov	r18, r24
    435c:	30 e0       	ldi	r19, 0x00	; 0
    435e:	f9 01       	movw	r30, r18
    4360:	ee 0f       	add	r30, r30
    4362:	ff 1f       	adc	r31, r31
    4364:	e2 0f       	add	r30, r18
    4366:	f3 1f       	adc	r31, r19
    4368:	ee 0f       	add	r30, r30
    436a:	ff 1f       	adc	r31, r31
    436c:	e6 52       	subi	r30, 0x26	; 38
    436e:	f7 4e       	sbci	r31, 0xE7	; 231
    4370:	93 e0       	ldi	r25, 0x03	; 3
    4372:	94 83       	std	Z+4, r25	; 0x04
    4374:	af ce       	rjmp	.-674    	; 0x40d4 <_turn_on>
    4376:	08 95       	ret

00004378 <led_led_off>:
    4378:	28 2f       	mov	r18, r24
    437a:	30 e0       	ldi	r19, 0x00	; 0
    437c:	f9 01       	movw	r30, r18
    437e:	ee 0f       	add	r30, r30
    4380:	ff 1f       	adc	r31, r31
    4382:	e2 0f       	add	r30, r18
    4384:	f3 1f       	adc	r31, r19
    4386:	ee 0f       	add	r30, r30
    4388:	ff 1f       	adc	r31, r31
    438a:	e6 52       	subi	r30, 0x26	; 38
    438c:	f7 4e       	sbci	r31, 0xE7	; 231
    438e:	94 e0       	ldi	r25, 0x04	; 4
    4390:	94 83       	std	Z+4, r25	; 0x04
    4392:	72 ce       	rjmp	.-796    	; 0x4078 <_turn_off>
    4394:	08 95       	ret

00004396 <led_long_puls>:
    4396:	90 e0       	ldi	r25, 0x00	; 0
    4398:	fc 01       	movw	r30, r24
    439a:	ee 0f       	add	r30, r30
    439c:	ff 1f       	adc	r31, r31
    439e:	df 01       	movw	r26, r30
    43a0:	a8 0f       	add	r26, r24
    43a2:	b9 1f       	adc	r27, r25
    43a4:	aa 0f       	add	r26, r26
    43a6:	bb 1f       	adc	r27, r27
    43a8:	a6 52       	subi	r26, 0x26	; 38
    43aa:	b7 4e       	sbci	r27, 0xE7	; 231
    43ac:	24 e0       	ldi	r18, 0x04	; 4
    43ae:	15 96       	adiw	r26, 0x05	; 5
    43b0:	2c 93       	st	X, r18
    43b2:	15 97       	sbiw	r26, 0x05	; 5
    43b4:	fd 01       	movw	r30, r26
    43b6:	14 82       	std	Z+4, r1	; 0x04
    43b8:	08 95       	ret

000043ba <led_short_puls>:
    43ba:	90 e0       	ldi	r25, 0x00	; 0
    43bc:	fc 01       	movw	r30, r24
    43be:	ee 0f       	add	r30, r30
    43c0:	ff 1f       	adc	r31, r31
    43c2:	df 01       	movw	r26, r30
    43c4:	a8 0f       	add	r26, r24
    43c6:	b9 1f       	adc	r27, r25
    43c8:	aa 0f       	add	r26, r26
    43ca:	bb 1f       	adc	r27, r27
    43cc:	a6 52       	subi	r26, 0x26	; 38
    43ce:	b7 4e       	sbci	r27, 0xE7	; 231
    43d0:	21 e0       	ldi	r18, 0x01	; 1
    43d2:	15 96       	adiw	r26, 0x05	; 5
    43d4:	2c 93       	st	X, r18
    43d6:	15 97       	sbiw	r26, 0x05	; 5
    43d8:	fd 01       	movw	r30, r26
    43da:	14 82       	std	Z+4, r1	; 0x04
    43dc:	08 95       	ret

000043de <_serial_call_back>:
    43de:	0f 93       	push	r16
    43e0:	1f 93       	push	r17
    43e2:	cf 93       	push	r28
    43e4:	df 93       	push	r29
    43e6:	1f 92       	push	r1
    43e8:	1f 92       	push	r1
    43ea:	cd b7       	in	r28, 0x3d	; 61
    43ec:	de b7       	in	r29, 0x3e	; 62
    43ee:	8c 01       	movw	r16, r24
    43f0:	19 82       	std	Y+1, r1	; 0x01
    43f2:	2d c0       	rjmp	.+90     	; 0x444e <_serial_call_back+0x70>
    43f4:	e0 91 56 19 	lds	r30, 0x1956	; 0x801956 <rec_buf_inp.2947>
    43f8:	ec 32       	cpi	r30, 0x2C	; 44
    43fa:	50 f4       	brcc	.+20     	; 0x4410 <_serial_call_back+0x32>
    43fc:	81 e0       	ldi	r24, 0x01	; 1
    43fe:	8e 0f       	add	r24, r30
    4400:	80 93 56 19 	sts	0x1956, r24	; 0x801956 <rec_buf_inp.2947>
    4404:	f0 e0       	ldi	r31, 0x00	; 0
    4406:	e8 57       	subi	r30, 0x78	; 120
    4408:	f6 4e       	sbci	r31, 0xE6	; 230
    440a:	8a 81       	ldd	r24, Y+2	; 0x02
    440c:	80 83       	st	Z, r24
    440e:	02 c0       	rjmp	.+4      	; 0x4414 <_serial_call_back+0x36>
    4410:	10 92 56 19 	sts	0x1956, r1	; 0x801956 <rec_buf_inp.2947>
    4414:	8a 81       	ldd	r24, Y+2	; 0x02
    4416:	8a 30       	cpi	r24, 0x0A	; 10
    4418:	d1 f4       	brne	.+52     	; 0x444e <_serial_call_back+0x70>
    441a:	40 91 56 19 	lds	r20, 0x1956	; 0x801956 <rec_buf_inp.2947>
    441e:	50 e0       	ldi	r21, 0x00	; 0
    4420:	fa 01       	movw	r30, r20
    4422:	ea 57       	subi	r30, 0x7A	; 122
    4424:	f6 4e       	sbci	r31, 0xE6	; 230
    4426:	10 82       	st	Z, r1
    4428:	41 50       	subi	r20, 0x01	; 1
    442a:	51 09       	sbc	r21, r1
    442c:	9e 01       	movw	r18, r28
    442e:	2f 5f       	subi	r18, 0xFF	; 255
    4430:	3f 4f       	sbci	r19, 0xFF	; 255
    4432:	68 e8       	ldi	r22, 0x88	; 136
    4434:	79 e1       	ldi	r23, 0x19	; 25
    4436:	80 91 59 19 	lds	r24, 0x1959	; 0x801959 <_serial_reply_buffer_handle>
    443a:	90 91 5a 19 	lds	r25, 0x195A	; 0x80195a <_serial_reply_buffer_handle+0x1>
    443e:	0e 94 cd 13 	call	0x279a	; 0x279a <xStreamBufferSendFromISR>
    4442:	89 81       	ldd	r24, Y+1	; 0x01
    4444:	81 11       	cpse	r24, r1
    4446:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <vPortYield>
    444a:	10 92 56 19 	sts	0x1956, r1	; 0x801956 <rec_buf_inp.2947>
    444e:	be 01       	movw	r22, r28
    4450:	6e 5f       	subi	r22, 0xFE	; 254
    4452:	7f 4f       	sbci	r23, 0xFF	; 255
    4454:	c8 01       	movw	r24, r16
    4456:	8c d6       	rcall	.+3352   	; 0x5170 <serial_get_byte>
    4458:	88 23       	and	r24, r24
    445a:	61 f2       	breq	.-104    	; 0x43f4 <_serial_call_back+0x16>
    445c:	0f 90       	pop	r0
    445e:	0f 90       	pop	r0
    4460:	df 91       	pop	r29
    4462:	cf 91       	pop	r28
    4464:	1f 91       	pop	r17
    4466:	0f 91       	pop	r16
    4468:	08 95       	ret

0000446a <_upload_message>:
    446a:	0f 93       	push	r16
    446c:	1f 93       	push	r17
    446e:	cf 93       	push	r28
    4470:	df 93       	push	r29
    4472:	8c 01       	movw	r16, r24
    4474:	eb 01       	movw	r28, r22
    4476:	80 91 59 19 	lds	r24, 0x1959	; 0x801959 <_serial_reply_buffer_handle>
    447a:	90 91 5a 19 	lds	r25, 0x195A	; 0x80195a <_serial_reply_buffer_handle+0x1>
    447e:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <xStreamBufferReset>
    4482:	b8 01       	movw	r22, r16
    4484:	82 ef       	ldi	r24, 0xF2	; 242
    4486:	98 e1       	ldi	r25, 0x18	; 24
    4488:	0e 94 41 31 	call	0x6282	; 0x6282 <strcpy>
    448c:	20 97       	sbiw	r28, 0x00	; 0
    448e:	79 f0       	breq	.+30     	; 0x44ae <_upload_message+0x44>
    4490:	e2 ef       	ldi	r30, 0xF2	; 242
    4492:	f8 e1       	ldi	r31, 0x18	; 24
    4494:	01 90       	ld	r0, Z+
    4496:	00 20       	and	r0, r0
    4498:	e9 f7       	brne	.-6      	; 0x4494 <_upload_message+0x2a>
    449a:	31 97       	sbiw	r30, 0x01	; 1
    449c:	80 e2       	ldi	r24, 0x20	; 32
    449e:	90 e0       	ldi	r25, 0x00	; 0
    44a0:	91 83       	std	Z+1, r25	; 0x01
    44a2:	80 83       	st	Z, r24
    44a4:	be 01       	movw	r22, r28
    44a6:	82 ef       	ldi	r24, 0xF2	; 242
    44a8:	98 e1       	ldi	r25, 0x18	; 24
    44aa:	0e 94 36 31 	call	0x626c	; 0x626c <strcat>
    44ae:	e2 ef       	ldi	r30, 0xF2	; 242
    44b0:	f8 e1       	ldi	r31, 0x18	; 24
    44b2:	df 01       	movw	r26, r30
    44b4:	0d 90       	ld	r0, X+
    44b6:	00 20       	and	r0, r0
    44b8:	e9 f7       	brne	.-6      	; 0x44b4 <_upload_message+0x4a>
    44ba:	11 97       	sbiw	r26, 0x01	; 1
    44bc:	8d e0       	ldi	r24, 0x0D	; 13
    44be:	9a e0       	ldi	r25, 0x0A	; 10
    44c0:	11 96       	adiw	r26, 0x01	; 1
    44c2:	9c 93       	st	X, r25
    44c4:	8e 93       	st	-X, r24
    44c6:	12 96       	adiw	r26, 0x02	; 2
    44c8:	1c 92       	st	X, r1
    44ca:	01 90       	ld	r0, Z+
    44cc:	00 20       	and	r0, r0
    44ce:	e9 f7       	brne	.-6      	; 0x44ca <_upload_message+0x60>
    44d0:	31 97       	sbiw	r30, 0x01	; 1
    44d2:	e2 5f       	subi	r30, 0xF2	; 242
    44d4:	f8 41       	sbci	r31, 0x18	; 24
    44d6:	ae 2f       	mov	r26, r30
    44d8:	82 ef       	ldi	r24, 0xF2	; 242
    44da:	98 e1       	ldi	r25, 0x18	; 24
    44dc:	ac 01       	movw	r20, r24
    44de:	6a 2f       	mov	r22, r26
    44e0:	80 91 5b 19 	lds	r24, 0x195B	; 0x80195b <_rn2483_serial>
    44e4:	90 91 5c 19 	lds	r25, 0x195C	; 0x80195c <_rn2483_serial+0x1>
    44e8:	f3 d5       	rcall	.+3046   	; 0x50d0 <serial_send_bytes>
    44ea:	81 11       	cpse	r24, r1
    44ec:	11 c0       	rjmp	.+34     	; 0x4510 <_upload_message+0xa6>
    44ee:	08 e2       	ldi	r16, 0x28	; 40
    44f0:	15 e0       	ldi	r17, 0x05	; 5
    44f2:	20 e0       	ldi	r18, 0x00	; 0
    44f4:	30 e0       	ldi	r19, 0x00	; 0
    44f6:	4d e2       	ldi	r20, 0x2D	; 45
    44f8:	50 e0       	ldi	r21, 0x00	; 0
    44fa:	62 ee       	ldi	r22, 0xE2	; 226
    44fc:	79 e1       	ldi	r23, 0x19	; 25
    44fe:	80 91 59 19 	lds	r24, 0x1959	; 0x801959 <_serial_reply_buffer_handle>
    4502:	90 91 5a 19 	lds	r25, 0x195A	; 0x80195a <_serial_reply_buffer_handle+0x1>
    4506:	0e 94 10 14 	call	0x2820	; 0x2820 <xStreamBufferReceive>
    450a:	82 ee       	ldi	r24, 0xE2	; 226
    450c:	99 e1       	ldi	r25, 0x19	; 25
    450e:	02 c0       	rjmp	.+4      	; 0x4514 <_upload_message+0xaa>
    4510:	80 e0       	ldi	r24, 0x00	; 0
    4512:	90 e0       	ldi	r25, 0x00	; 0
    4514:	df 91       	pop	r29
    4516:	cf 91       	pop	r28
    4518:	1f 91       	pop	r17
    451a:	0f 91       	pop	r16
    451c:	08 95       	ret

0000451e <_reply2return_code>:
    451e:	2f 92       	push	r2
    4520:	3f 92       	push	r3
    4522:	4f 92       	push	r4
    4524:	5f 92       	push	r5
    4526:	6f 92       	push	r6
    4528:	7f 92       	push	r7
    452a:	8f 92       	push	r8
    452c:	9f 92       	push	r9
    452e:	af 92       	push	r10
    4530:	bf 92       	push	r11
    4532:	cf 92       	push	r12
    4534:	df 92       	push	r13
    4536:	ef 92       	push	r14
    4538:	ff 92       	push	r15
    453a:	0f 93       	push	r16
    453c:	1f 93       	push	r17
    453e:	cf 93       	push	r28
    4540:	df 93       	push	r29
    4542:	5c 01       	movw	r10, r24
    4544:	fc 01       	movw	r30, r24
    4546:	01 90       	ld	r0, Z+
    4548:	00 20       	and	r0, r0
    454a:	e9 f7       	brne	.-6      	; 0x4546 <_reply2return_code+0x28>
    454c:	31 97       	sbiw	r30, 0x01	; 1
    454e:	6f 01       	movw	r12, r30
    4550:	c8 1a       	sub	r12, r24
    4552:	d9 0a       	sbc	r13, r25
    4554:	5c 2c       	mov	r5, r12
    4556:	0f 2e       	mov	r0, r31
    4558:	fd e7       	ldi	r31, 0x7D	; 125
    455a:	8f 2e       	mov	r8, r31
    455c:	f7 e0       	ldi	r31, 0x07	; 7
    455e:	9f 2e       	mov	r9, r31
    4560:	f0 2d       	mov	r31, r0
    4562:	e1 2c       	mov	r14, r1
    4564:	f1 2c       	mov	r15, r1
    4566:	4c 2c       	mov	r4, r12
    4568:	37 01       	movw	r6, r14
    456a:	f4 01       	movw	r30, r8
    456c:	01 81       	ldd	r16, Z+1	; 0x01
    456e:	12 81       	ldd	r17, Z+2	; 0x02
    4570:	e8 01       	movw	r28, r16
    4572:	09 90       	ld	r0, Y+
    4574:	00 20       	and	r0, r0
    4576:	e9 f7       	brne	.-6      	; 0x4572 <_reply2return_code+0x54>
    4578:	21 97       	sbiw	r28, 0x01	; 1
    457a:	c0 1b       	sub	r28, r16
    457c:	d1 0b       	sbc	r29, r17
    457e:	3c 2e       	mov	r3, r28
    4580:	f9 e0       	ldi	r31, 0x09	; 9
    4582:	cf 16       	cp	r12, r31
    4584:	d1 04       	cpc	r13, r1
    4586:	58 f0       	brcs	.+22     	; 0x459e <_reply2return_code+0x80>
    4588:	f4 01       	movw	r30, r8
    458a:	20 80       	ld	r2, Z
    458c:	fe e0       	ldi	r31, 0x0E	; 14
    458e:	2f 12       	cpse	r2, r31
    4590:	06 c0       	rjmp	.+12     	; 0x459e <_reply2return_code+0x80>
    4592:	b8 01       	movw	r22, r16
    4594:	c5 01       	movw	r24, r10
    4596:	0e 94 11 31 	call	0x6222	; 0x6222 <strcasestr>
    459a:	89 2b       	or	r24, r25
    459c:	09 f5       	brne	.+66     	; 0x45e0 <_reply2return_code+0xc2>
    459e:	44 2d       	mov	r20, r4
    45a0:	35 14       	cp	r3, r5
    45a2:	08 f4       	brcc	.+2      	; 0x45a6 <_reply2return_code+0x88>
    45a4:	4c 2f       	mov	r20, r28
    45a6:	50 e0       	ldi	r21, 0x00	; 0
    45a8:	b8 01       	movw	r22, r16
    45aa:	c5 01       	movw	r24, r10
    45ac:	0e 94 48 31 	call	0x6290	; 0x6290 <strncasecmp>
    45b0:	89 2b       	or	r24, r25
    45b2:	49 f4       	brne	.+18     	; 0x45c6 <_reply2return_code+0xa8>
    45b4:	f3 01       	movw	r30, r6
    45b6:	ee 0f       	add	r30, r30
    45b8:	ff 1f       	adc	r31, r31
    45ba:	e6 0d       	add	r30, r6
    45bc:	f7 1d       	adc	r31, r7
    45be:	e3 58       	subi	r30, 0x83	; 131
    45c0:	f8 4f       	sbci	r31, 0xF8	; 248
    45c2:	20 80       	ld	r2, Z
    45c4:	0d c0       	rjmp	.+26     	; 0x45e0 <_reply2return_code+0xc2>
    45c6:	8f ef       	ldi	r24, 0xFF	; 255
    45c8:	e8 1a       	sub	r14, r24
    45ca:	f8 0a       	sbc	r15, r24
    45cc:	e3 e0       	ldi	r30, 0x03	; 3
    45ce:	8e 0e       	add	r8, r30
    45d0:	91 1c       	adc	r9, r1
    45d2:	f1 e1       	ldi	r31, 0x11	; 17
    45d4:	ef 16       	cp	r14, r31
    45d6:	f1 04       	cpc	r15, r1
    45d8:	39 f6       	brne	.-114    	; 0x4568 <_reply2return_code+0x4a>
    45da:	68 94       	set
    45dc:	22 24       	eor	r2, r2
    45de:	24 f8       	bld	r2, 4
    45e0:	82 2d       	mov	r24, r2
    45e2:	df 91       	pop	r29
    45e4:	cf 91       	pop	r28
    45e6:	1f 91       	pop	r17
    45e8:	0f 91       	pop	r16
    45ea:	ff 90       	pop	r15
    45ec:	ef 90       	pop	r14
    45ee:	df 90       	pop	r13
    45f0:	cf 90       	pop	r12
    45f2:	bf 90       	pop	r11
    45f4:	af 90       	pop	r10
    45f6:	9f 90       	pop	r9
    45f8:	8f 90       	pop	r8
    45fa:	7f 90       	pop	r7
    45fc:	6f 90       	pop	r6
    45fe:	5f 90       	pop	r5
    4600:	4f 90       	pop	r4
    4602:	3f 90       	pop	r3
    4604:	2f 90       	pop	r2
    4606:	08 95       	ret

00004608 <_upload_message_rc>:
    4608:	30 df       	rcall	.-416    	; 0x446a <_upload_message>
    460a:	89 cf       	rjmp	.-238    	; 0x451e <_reply2return_code>
    460c:	08 95       	ret

0000460e <lora_driver_flush_buffers>:
    460e:	80 91 59 19 	lds	r24, 0x1959	; 0x801959 <_serial_reply_buffer_handle>
    4612:	90 91 5a 19 	lds	r25, 0x195A	; 0x80195a <_serial_reply_buffer_handle+0x1>
    4616:	0c 94 e4 12 	jmp	0x25c8	; 0x25c8 <xStreamBufferReset>
    461a:	08 95       	ret

0000461c <lora_driver_create>:
    461c:	8f 92       	push	r8
    461e:	9f 92       	push	r9
    4620:	af 92       	push	r10
    4622:	cf 92       	push	r12
    4624:	ef 92       	push	r14
    4626:	0f 93       	push	r16
    4628:	1f 93       	push	r17
    462a:	cf 93       	push	r28
    462c:	c8 2f       	mov	r28, r24
    462e:	8b 01       	movw	r16, r22
    4630:	41 e0       	ldi	r20, 0x01	; 1
    4632:	60 e0       	ldi	r22, 0x00	; 0
    4634:	70 e0       	ldi	r23, 0x00	; 0
    4636:	88 ec       	ldi	r24, 0xC8	; 200
    4638:	90 e0       	ldi	r25, 0x00	; 0
    463a:	0e 94 b8 12 	call	0x2570	; 0x2570 <xStreamBufferGenericCreate>
    463e:	90 93 5a 19 	sts	0x195A, r25	; 0x80195a <_serial_reply_buffer_handle+0x1>
    4642:	80 93 59 19 	sts	0x1959, r24	; 0x801959 <_serial_reply_buffer_handle>
    4646:	10 93 58 19 	sts	0x1958, r17	; 0x801958 <_downlinkMessageBuffer+0x1>
    464a:	00 93 57 19 	sts	0x1957, r16	; 0x801957 <_downlinkMessageBuffer>
    464e:	0f 2e       	mov	r0, r31
    4650:	ff ee       	ldi	r31, 0xEF	; 239
    4652:	8f 2e       	mov	r8, r31
    4654:	f1 e2       	ldi	r31, 0x21	; 33
    4656:	9f 2e       	mov	r9, r31
    4658:	f0 2d       	mov	r31, r0
    465a:	68 94       	set
    465c:	aa 24       	eor	r10, r10
    465e:	a6 f8       	bld	r10, 6
    4660:	68 94       	set
    4662:	cc 24       	eor	r12, r12
    4664:	c6 f8       	bld	r12, 6
    4666:	e1 2c       	mov	r14, r1
    4668:	00 e0       	ldi	r16, 0x00	; 0
    466a:	23 e0       	ldi	r18, 0x03	; 3
    466c:	40 e0       	ldi	r20, 0x00	; 0
    466e:	51 ee       	ldi	r21, 0xE1	; 225
    4670:	60 e0       	ldi	r22, 0x00	; 0
    4672:	70 e0       	ldi	r23, 0x00	; 0
    4674:	8c 2f       	mov	r24, r28
    4676:	71 d4       	rcall	.+2274   	; 0x4f5a <serial_new_instance>
    4678:	90 93 5c 19 	sts	0x195C, r25	; 0x80195c <_rn2483_serial+0x1>
    467c:	80 93 5b 19 	sts	0x195B, r24	; 0x80195b <_rn2483_serial>
    4680:	e0 91 59 1a 	lds	r30, 0x1A59	; 0x801a59 <register_access+0x8>
    4684:	f0 91 5a 1a 	lds	r31, 0x1A5A	; 0x801a5a <register_access+0x9>
    4688:	64 e0       	ldi	r22, 0x04	; 4
    468a:	87 e0       	ldi	r24, 0x07	; 7
    468c:	91 e0       	ldi	r25, 0x01	; 1
    468e:	19 95       	eicall
    4690:	cf 91       	pop	r28
    4692:	1f 91       	pop	r17
    4694:	0f 91       	pop	r16
    4696:	ef 90       	pop	r14
    4698:	cf 90       	pop	r12
    469a:	af 90       	pop	r10
    469c:	9f 90       	pop	r9
    469e:	8f 90       	pop	r8
    46a0:	08 95       	ret

000046a2 <lora_driver_reset_rn2483>:
    46a2:	88 23       	and	r24, r24
    46a4:	49 f0       	breq	.+18     	; 0x46b8 <lora_driver_reset_rn2483+0x16>
    46a6:	e0 91 63 1a 	lds	r30, 0x1A63	; 0x801a63 <register_access+0x12>
    46aa:	f0 91 64 1a 	lds	r31, 0x1A64	; 0x801a64 <register_access+0x13>
    46ae:	64 e0       	ldi	r22, 0x04	; 4
    46b0:	88 e0       	ldi	r24, 0x08	; 8
    46b2:	91 e0       	ldi	r25, 0x01	; 1
    46b4:	19 95       	eicall
    46b6:	08 95       	ret
    46b8:	e0 91 59 1a 	lds	r30, 0x1A59	; 0x801a59 <register_access+0x8>
    46bc:	f0 91 5a 1a 	lds	r31, 0x1A5A	; 0x801a5a <register_access+0x9>
    46c0:	64 e0       	ldi	r22, 0x04	; 4
    46c2:	88 e0       	ldi	r24, 0x08	; 8
    46c4:	91 e0       	ldi	r25, 0x01	; 1
    46c6:	19 95       	eicall
    46c8:	08 95       	ret

000046ca <lora_driver_rn2483_factory_reset>:
    46ca:	60 e0       	ldi	r22, 0x00	; 0
    46cc:	70 e0       	ldi	r23, 0x00	; 0
    46ce:	83 e0       	ldi	r24, 0x03	; 3
    46d0:	95 e0       	ldi	r25, 0x05	; 5
    46d2:	cb de       	rcall	.-618    	; 0x446a <_upload_message>
    46d4:	e2 ee       	ldi	r30, 0xE2	; 226
    46d6:	f9 e1       	ldi	r31, 0x19	; 25
    46d8:	01 90       	ld	r0, Z+
    46da:	00 20       	and	r0, r0
    46dc:	e9 f7       	brne	.-6      	; 0x46d8 <lora_driver_rn2483_factory_reset+0xe>
    46de:	31 97       	sbiw	r30, 0x01	; 1
    46e0:	e2 5e       	subi	r30, 0xE2	; 226
    46e2:	f9 41       	sbci	r31, 0x19	; 25
    46e4:	81 e0       	ldi	r24, 0x01	; 1
    46e6:	75 97       	sbiw	r30, 0x15	; 21
    46e8:	08 f0       	brcs	.+2      	; 0x46ec <lora_driver_rn2483_factory_reset+0x22>
    46ea:	80 e0       	ldi	r24, 0x00	; 0
    46ec:	08 95       	ret

000046ee <lora_driver_get_rn2483_hweui>:
    46ee:	cf 93       	push	r28
    46f0:	df 93       	push	r29
    46f2:	ec 01       	movw	r28, r24
    46f4:	60 e0       	ldi	r22, 0x00	; 0
    46f6:	70 e0       	ldi	r23, 0x00	; 0
    46f8:	84 e1       	ldi	r24, 0x14	; 20
    46fa:	95 e0       	ldi	r25, 0x05	; 5
    46fc:	b6 de       	rcall	.-660    	; 0x446a <_upload_message>
    46fe:	e2 ee       	ldi	r30, 0xE2	; 226
    4700:	f9 e1       	ldi	r31, 0x19	; 25
    4702:	01 90       	ld	r0, Z+
    4704:	00 20       	and	r0, r0
    4706:	e9 f7       	brne	.-6      	; 0x4702 <lora_driver_get_rn2483_hweui+0x14>
    4708:	e3 5f       	subi	r30, 0xF3	; 243
    470a:	f9 41       	sbci	r31, 0x19	; 25
    470c:	39 f4       	brne	.+14     	; 0x471c <lora_driver_get_rn2483_hweui+0x2e>
    470e:	62 ee       	ldi	r22, 0xE2	; 226
    4710:	79 e1       	ldi	r23, 0x19	; 25
    4712:	ce 01       	movw	r24, r28
    4714:	0e 94 41 31 	call	0x6282	; 0x6282 <strcpy>
    4718:	80 e0       	ldi	r24, 0x00	; 0
    471a:	02 c0       	rjmp	.+4      	; 0x4720 <lora_driver_get_rn2483_hweui+0x32>
    471c:	18 82       	st	Y, r1
    471e:	81 e0       	ldi	r24, 0x01	; 1
    4720:	df 91       	pop	r29
    4722:	cf 91       	pop	r28
    4724:	08 95       	ret

00004726 <lora_driver_set_device_identifier>:
    4726:	fc 01       	movw	r30, r24
    4728:	01 90       	ld	r0, Z+
    472a:	00 20       	and	r0, r0
    472c:	e9 f7       	brne	.-6      	; 0x4728 <lora_driver_set_device_identifier+0x2>
    472e:	9f 01       	movw	r18, r30
    4730:	21 51       	subi	r18, 0x11	; 17
    4732:	31 09       	sbc	r19, r1
    4734:	28 17       	cp	r18, r24
    4736:	39 07       	cpc	r19, r25
    4738:	29 f4       	brne	.+10     	; 0x4744 <lora_driver_set_device_identifier+0x1e>
    473a:	bc 01       	movw	r22, r24
    473c:	82 e4       	ldi	r24, 0x42	; 66
    473e:	95 e0       	ldi	r25, 0x05	; 5
    4740:	63 cf       	rjmp	.-314    	; 0x4608 <_upload_message_rc>
    4742:	08 95       	ret
    4744:	89 e0       	ldi	r24, 0x09	; 9
    4746:	08 95       	ret

00004748 <lora_driver_set_application_identifier>:
    4748:	fc 01       	movw	r30, r24
    474a:	01 90       	ld	r0, Z+
    474c:	00 20       	and	r0, r0
    474e:	e9 f7       	brne	.-6      	; 0x474a <lora_driver_set_application_identifier+0x2>
    4750:	9f 01       	movw	r18, r30
    4752:	21 51       	subi	r18, 0x11	; 17
    4754:	31 09       	sbc	r19, r1
    4756:	28 17       	cp	r18, r24
    4758:	39 07       	cpc	r19, r25
    475a:	29 f4       	brne	.+10     	; 0x4766 <lora_driver_set_application_identifier+0x1e>
    475c:	bc 01       	movw	r22, r24
    475e:	81 e5       	ldi	r24, 0x51	; 81
    4760:	95 e0       	ldi	r25, 0x05	; 5
    4762:	52 cf       	rjmp	.-348    	; 0x4608 <_upload_message_rc>
    4764:	08 95       	ret
    4766:	89 e0       	ldi	r24, 0x09	; 9
    4768:	08 95       	ret

0000476a <lora_driver_set_application_key>:
    476a:	fc 01       	movw	r30, r24
    476c:	01 90       	ld	r0, Z+
    476e:	00 20       	and	r0, r0
    4770:	e9 f7       	brne	.-6      	; 0x476c <lora_driver_set_application_key+0x2>
    4772:	9f 01       	movw	r18, r30
    4774:	21 52       	subi	r18, 0x21	; 33
    4776:	31 09       	sbc	r19, r1
    4778:	28 17       	cp	r18, r24
    477a:	39 07       	cpc	r19, r25
    477c:	29 f4       	brne	.+10     	; 0x4788 <lora_driver_set_application_key+0x1e>
    477e:	bc 01       	movw	r22, r24
    4780:	80 e6       	ldi	r24, 0x60	; 96
    4782:	95 e0       	ldi	r25, 0x05	; 5
    4784:	41 cf       	rjmp	.-382    	; 0x4608 <_upload_message_rc>
    4786:	08 95       	ret
    4788:	89 e0       	ldi	r24, 0x09	; 9
    478a:	08 95       	ret

0000478c <lora_driver_save_mac>:
    478c:	60 e0       	ldi	r22, 0x00	; 0
    478e:	70 e0       	ldi	r23, 0x00	; 0
    4790:	8f e9       	ldi	r24, 0x9F	; 159
    4792:	95 e0       	ldi	r25, 0x05	; 5
    4794:	39 cf       	rjmp	.-398    	; 0x4608 <_upload_message_rc>
    4796:	08 95       	ret

00004798 <lora_driver_join>:
    4798:	0f 93       	push	r16
    479a:	1f 93       	push	r17
    479c:	e8 2f       	mov	r30, r24
    479e:	f0 e0       	ldi	r31, 0x00	; 0
    47a0:	ee 0f       	add	r30, r30
    47a2:	ff 1f       	adc	r31, r31
    47a4:	e7 58       	subi	r30, 0x87	; 135
    47a6:	f8 4f       	sbci	r31, 0xF8	; 248
    47a8:	60 81       	ld	r22, Z
    47aa:	71 81       	ldd	r23, Z+1	; 0x01
    47ac:	88 ea       	ldi	r24, 0xA8	; 168
    47ae:	95 e0       	ldi	r25, 0x05	; 5
    47b0:	2b df       	rcall	.-426    	; 0x4608 <_upload_message_rc>
    47b2:	81 11       	cpse	r24, r1
    47b4:	14 c0       	rjmp	.+40     	; 0x47de <lora_driver_join+0x46>
    47b6:	08 e2       	ldi	r16, 0x28	; 40
    47b8:	15 e0       	ldi	r17, 0x05	; 5
    47ba:	20 e0       	ldi	r18, 0x00	; 0
    47bc:	30 e0       	ldi	r19, 0x00	; 0
    47be:	4d e2       	ldi	r20, 0x2D	; 45
    47c0:	50 e0       	ldi	r21, 0x00	; 0
    47c2:	62 ee       	ldi	r22, 0xE2	; 226
    47c4:	79 e1       	ldi	r23, 0x19	; 25
    47c6:	80 91 59 19 	lds	r24, 0x1959	; 0x801959 <_serial_reply_buffer_handle>
    47ca:	90 91 5a 19 	lds	r25, 0x195A	; 0x80195a <_serial_reply_buffer_handle+0x1>
    47ce:	0e 94 10 14 	call	0x2820	; 0x2820 <xStreamBufferReceive>
    47d2:	88 23       	and	r24, r24
    47d4:	21 f0       	breq	.+8      	; 0x47de <lora_driver_join+0x46>
    47d6:	82 ee       	ldi	r24, 0xE2	; 226
    47d8:	99 e1       	ldi	r25, 0x19	; 25
    47da:	a1 de       	rcall	.-702    	; 0x451e <_reply2return_code>
    47dc:	03 c0       	rjmp	.+6      	; 0x47e4 <lora_driver_join+0x4c>
    47de:	82 ee       	ldi	r24, 0xE2	; 226
    47e0:	99 e1       	ldi	r25, 0x19	; 25
    47e2:	9d de       	rcall	.-710    	; 0x451e <_reply2return_code>
    47e4:	1f 91       	pop	r17
    47e6:	0f 91       	pop	r16
    47e8:	08 95       	ret

000047ea <lora_driver_sent_upload_message>:
    47ea:	0f 93       	push	r16
    47ec:	1f 93       	push	r17
    47ee:	cf 93       	push	r28
    47f0:	df 93       	push	r29
    47f2:	1f 92       	push	r1
    47f4:	cd b7       	in	r28, 0x3d	; 61
    47f6:	de b7       	in	r29, 0x3e	; 62
    47f8:	db 01       	movw	r26, r22
    47fa:	11 96       	adiw	r26, 0x01	; 1
    47fc:	9c 91       	ld	r25, X
    47fe:	11 97       	sbiw	r26, 0x01	; 1
    4800:	95 31       	cpi	r25, 0x15	; 21
    4802:	08 f0       	brcs	.+2      	; 0x4806 <lora_driver_sent_upload_message+0x1c>
    4804:	b4 c0       	rjmp	.+360    	; 0x496e <lora_driver_sent_upload_message+0x184>
    4806:	99 23       	and	r25, r25
    4808:	81 f1       	breq	.+96     	; 0x486a <lora_driver_sent_upload_message+0x80>
    480a:	60 e0       	ldi	r22, 0x00	; 0
    480c:	70 e0       	ldi	r23, 0x00	; 0
    480e:	27 2f       	mov	r18, r23
    4810:	30 e0       	ldi	r19, 0x00	; 0
    4812:	46 2f       	mov	r20, r22
    4814:	50 e0       	ldi	r21, 0x00	; 0
    4816:	fd 01       	movw	r30, r26
    4818:	e4 0f       	add	r30, r20
    481a:	f5 1f       	adc	r31, r21
    481c:	92 81       	ldd	r25, Z+2	; 0x02
    481e:	92 95       	swap	r25
    4820:	9f 70       	andi	r25, 0x0F	; 15
    4822:	9a 30       	cpi	r25, 0x0A	; 10
    4824:	10 f0       	brcs	.+4      	; 0x482a <lora_driver_sent_upload_message+0x40>
    4826:	99 5c       	subi	r25, 0xC9	; 201
    4828:	01 c0       	rjmp	.+2      	; 0x482c <lora_driver_sent_upload_message+0x42>
    482a:	90 5d       	subi	r25, 0xD0	; 208
    482c:	f9 01       	movw	r30, r18
    482e:	ed 58       	subi	r30, 0x8D	; 141
    4830:	f6 4e       	sbci	r31, 0xE6	; 230
    4832:	90 83       	st	Z, r25
    4834:	2f 5f       	subi	r18, 0xFF	; 255
    4836:	3f 4f       	sbci	r19, 0xFF	; 255
    4838:	fd 01       	movw	r30, r26
    483a:	e4 0f       	add	r30, r20
    483c:	f5 1f       	adc	r31, r21
    483e:	92 81       	ldd	r25, Z+2	; 0x02
    4840:	9f 70       	andi	r25, 0x0F	; 15
    4842:	49 2f       	mov	r20, r25
    4844:	50 e0       	ldi	r21, 0x00	; 0
    4846:	4a 30       	cpi	r20, 0x0A	; 10
    4848:	51 05       	cpc	r21, r1
    484a:	14 f0       	brlt	.+4      	; 0x4850 <lora_driver_sent_upload_message+0x66>
    484c:	99 5c       	subi	r25, 0xC9	; 201
    484e:	01 c0       	rjmp	.+2      	; 0x4852 <lora_driver_sent_upload_message+0x68>
    4850:	90 5d       	subi	r25, 0xD0	; 208
    4852:	f9 01       	movw	r30, r18
    4854:	ed 58       	subi	r30, 0x8D	; 141
    4856:	f6 4e       	sbci	r31, 0xE6	; 230
    4858:	90 83       	st	Z, r25
    485a:	7e 5f       	subi	r23, 0xFE	; 254
    485c:	6f 5f       	subi	r22, 0xFF	; 255
    485e:	11 96       	adiw	r26, 0x01	; 1
    4860:	9c 91       	ld	r25, X
    4862:	11 97       	sbiw	r26, 0x01	; 1
    4864:	69 17       	cp	r22, r25
    4866:	98 f2       	brcs	.-90     	; 0x480e <lora_driver_sent_upload_message+0x24>
    4868:	01 c0       	rjmp	.+2      	; 0x486c <lora_driver_sent_upload_message+0x82>
    486a:	70 e0       	ldi	r23, 0x00	; 0
    486c:	e7 2f       	mov	r30, r23
    486e:	f0 e0       	ldi	r31, 0x00	; 0
    4870:	ed 58       	subi	r30, 0x8D	; 141
    4872:	f6 4e       	sbci	r31, 0xE6	; 230
    4874:	10 82       	st	Z, r1
    4876:	4c 91       	ld	r20, X
    4878:	81 11       	cpse	r24, r1
    487a:	03 c0       	rjmp	.+6      	; 0x4882 <lora_driver_sent_upload_message+0x98>
    487c:	81 eb       	ldi	r24, 0xB1	; 177
    487e:	95 e0       	ldi	r25, 0x05	; 5
    4880:	02 c0       	rjmp	.+4      	; 0x4886 <lora_driver_sent_upload_message+0x9c>
    4882:	83 eb       	ldi	r24, 0xB3	; 179
    4884:	95 e0       	ldi	r25, 0x05	; 5
    4886:	23 e7       	ldi	r18, 0x73	; 115
    4888:	39 e1       	ldi	r19, 0x19	; 25
    488a:	3f 93       	push	r19
    488c:	2f 93       	push	r18
    488e:	1f 92       	push	r1
    4890:	4f 93       	push	r20
    4892:	9f 93       	push	r25
    4894:	8f 93       	push	r24
    4896:	87 eb       	ldi	r24, 0xB7	; 183
    4898:	95 e0       	ldi	r25, 0x05	; 5
    489a:	9f 93       	push	r25
    489c:	8f 93       	push	r24
    489e:	85 eb       	ldi	r24, 0xB5	; 181
    48a0:	99 e1       	ldi	r25, 0x19	; 25
    48a2:	9f 93       	push	r25
    48a4:	8f 93       	push	r24
    48a6:	0e 94 a3 31 	call	0x6346	; 0x6346 <sprintf>
    48aa:	60 e0       	ldi	r22, 0x00	; 0
    48ac:	70 e0       	ldi	r23, 0x00	; 0
    48ae:	85 eb       	ldi	r24, 0xB5	; 181
    48b0:	99 e1       	ldi	r25, 0x19	; 25
    48b2:	aa de       	rcall	.-684    	; 0x4608 <_upload_message_rc>
    48b4:	0f b6       	in	r0, 0x3f	; 63
    48b6:	f8 94       	cli
    48b8:	de bf       	out	0x3e, r29	; 62
    48ba:	0f be       	out	0x3f, r0	; 63
    48bc:	cd bf       	out	0x3d, r28	; 61
    48be:	81 11       	cpse	r24, r1
    48c0:	59 c0       	rjmp	.+178    	; 0x4974 <lora_driver_sent_upload_message+0x18a>
    48c2:	08 e2       	ldi	r16, 0x28	; 40
    48c4:	15 e0       	ldi	r17, 0x05	; 5
    48c6:	20 e0       	ldi	r18, 0x00	; 0
    48c8:	30 e0       	ldi	r19, 0x00	; 0
    48ca:	4d e2       	ldi	r20, 0x2D	; 45
    48cc:	50 e0       	ldi	r21, 0x00	; 0
    48ce:	62 ee       	ldi	r22, 0xE2	; 226
    48d0:	79 e1       	ldi	r23, 0x19	; 25
    48d2:	80 91 59 19 	lds	r24, 0x1959	; 0x801959 <_serial_reply_buffer_handle>
    48d6:	90 91 5a 19 	lds	r25, 0x195A	; 0x80195a <_serial_reply_buffer_handle+0x1>
    48da:	0e 94 10 14 	call	0x2820	; 0x2820 <xStreamBufferReceive>
    48de:	88 23       	and	r24, r24
    48e0:	09 f4       	brne	.+2      	; 0x48e4 <lora_driver_sent_upload_message+0xfa>
    48e2:	47 c0       	rjmp	.+142    	; 0x4972 <lora_driver_sent_upload_message+0x188>
    48e4:	82 ee       	ldi	r24, 0xE2	; 226
    48e6:	99 e1       	ldi	r25, 0x19	; 25
    48e8:	1a de       	rcall	.-972    	; 0x451e <_reply2return_code>
    48ea:	8e 30       	cpi	r24, 0x0E	; 14
    48ec:	09 f0       	breq	.+2      	; 0x48f0 <lora_driver_sent_upload_message+0x106>
    48ee:	42 c0       	rjmp	.+132    	; 0x4974 <lora_driver_sent_upload_message+0x18a>
    48f0:	87 e0       	ldi	r24, 0x07	; 7
    48f2:	89 83       	std	Y+1, r24	; 0x01
    48f4:	80 91 57 19 	lds	r24, 0x1957	; 0x801957 <_downlinkMessageBuffer>
    48f8:	90 91 58 19 	lds	r25, 0x1958	; 0x801958 <_downlinkMessageBuffer+0x1>
    48fc:	89 2b       	or	r24, r25
    48fe:	a9 f1       	breq	.+106    	; 0x496a <lora_driver_sent_upload_message+0x180>
    4900:	be 01       	movw	r22, r28
    4902:	6f 5f       	subi	r22, 0xFF	; 255
    4904:	7f 4f       	sbci	r23, 0xFF	; 255
    4906:	82 ee       	ldi	r24, 0xE2	; 226
    4908:	99 e1       	ldi	r25, 0x19	; 25
    490a:	68 d1       	rcall	.+720    	; 0x4bdc <decode_port_no>
    490c:	80 93 5d 19 	sts	0x195D, r24	; 0x80195d <_downlink_payload>
    4910:	e9 81       	ldd	r30, Y+1	; 0x01
    4912:	f0 e0       	ldi	r31, 0x00	; 0
    4914:	ee 51       	subi	r30, 0x1E	; 30
    4916:	f6 4e       	sbci	r31, 0xE6	; 230
    4918:	df 01       	movw	r26, r30
    491a:	0d 90       	ld	r0, X+
    491c:	00 20       	and	r0, r0
    491e:	e9 f7       	brne	.-6      	; 0x491a <lora_driver_sent_upload_message+0x130>
    4920:	11 97       	sbiw	r26, 0x01	; 1
    4922:	ae 1b       	sub	r26, r30
    4924:	bf 0b       	sbc	r27, r31
    4926:	aa 23       	and	r26, r26
    4928:	91 f0       	breq	.+36     	; 0x494e <lora_driver_sent_upload_message+0x164>
    492a:	bb 27       	eor	r27, r27
    492c:	cd 01       	movw	r24, r26
    492e:	01 97       	sbiw	r24, 0x01	; 1
    4930:	9c 01       	movw	r18, r24
    4932:	12 f4       	brpl	.+4      	; 0x4938 <lora_driver_sent_upload_message+0x14e>
    4934:	2f 5f       	subi	r18, 0xFF	; 255
    4936:	3f 4f       	sbci	r19, 0xFF	; 255
    4938:	35 95       	asr	r19
    493a:	27 95       	ror	r18
    493c:	20 93 5e 19 	sts	0x195E, r18	; 0x80195e <_downlink_payload+0x1>
    4940:	af 01       	movw	r20, r30
    4942:	4f 5f       	subi	r20, 0xFF	; 255
    4944:	5f 4f       	sbci	r21, 0xFF	; 255
    4946:	64 e1       	ldi	r22, 0x14	; 20
    4948:	8f e5       	ldi	r24, 0x5F	; 95
    494a:	99 e1       	ldi	r25, 0x19	; 25
    494c:	73 d1       	rcall	.+742    	; 0x4c34 <decode_hexadecimal_string_bytes>
    494e:	01 e0       	ldi	r16, 0x01	; 1
    4950:	10 e0       	ldi	r17, 0x00	; 0
    4952:	20 e0       	ldi	r18, 0x00	; 0
    4954:	30 e0       	ldi	r19, 0x00	; 0
    4956:	46 e1       	ldi	r20, 0x16	; 22
    4958:	50 e0       	ldi	r21, 0x00	; 0
    495a:	6d e5       	ldi	r22, 0x5D	; 93
    495c:	79 e1       	ldi	r23, 0x19	; 25
    495e:	80 91 57 19 	lds	r24, 0x1957	; 0x801957 <_downlinkMessageBuffer>
    4962:	90 91 58 19 	lds	r25, 0x1958	; 0x801958 <_downlinkMessageBuffer+0x1>
    4966:	0e 94 23 13 	call	0x2646	; 0x2646 <xStreamBufferSend>
    496a:	8e e0       	ldi	r24, 0x0E	; 14
    496c:	03 c0       	rjmp	.+6      	; 0x4974 <lora_driver_sent_upload_message+0x18a>
    496e:	84 e1       	ldi	r24, 0x14	; 20
    4970:	01 c0       	rjmp	.+2      	; 0x4974 <lora_driver_sent_upload_message+0x18a>
    4972:	80 e0       	ldi	r24, 0x00	; 0
    4974:	0f 90       	pop	r0
    4976:	df 91       	pop	r29
    4978:	cf 91       	pop	r28
    497a:	1f 91       	pop	r17
    497c:	0f 91       	pop	r16
    497e:	08 95       	ret

00004980 <lora_driver_set_adaptive_data_rate>:
    4980:	81 30       	cpi	r24, 0x01	; 1
    4982:	19 f0       	breq	.+6      	; 0x498a <lora_driver_set_adaptive_data_rate+0xa>
    4984:	67 ec       	ldi	r22, 0xC7	; 199
    4986:	75 e0       	ldi	r23, 0x05	; 5
    4988:	02 c0       	rjmp	.+4      	; 0x498e <lora_driver_set_adaptive_data_rate+0xe>
    498a:	60 ea       	ldi	r22, 0xA0	; 160
    498c:	76 e0       	ldi	r23, 0x06	; 6
    498e:	8b ec       	ldi	r24, 0xCB	; 203
    4990:	95 e0       	ldi	r25, 0x05	; 5
    4992:	3a ce       	rjmp	.-908    	; 0x4608 <_upload_message_rc>
    4994:	08 95       	ret

00004996 <lora_driver_set_receive_delay>:
    4996:	9f 93       	push	r25
    4998:	8f 93       	push	r24
    499a:	8c ef       	ldi	r24, 0xFC	; 252
    499c:	95 e0       	ldi	r25, 0x05	; 5
    499e:	9f 93       	push	r25
    49a0:	8f 93       	push	r24
    49a2:	85 eb       	ldi	r24, 0xB5	; 181
    49a4:	99 e1       	ldi	r25, 0x19	; 25
    49a6:	9f 93       	push	r25
    49a8:	8f 93       	push	r24
    49aa:	0e 94 a3 31 	call	0x6346	; 0x6346 <sprintf>
    49ae:	60 e0       	ldi	r22, 0x00	; 0
    49b0:	70 e0       	ldi	r23, 0x00	; 0
    49b2:	85 eb       	ldi	r24, 0xB5	; 181
    49b4:	99 e1       	ldi	r25, 0x19	; 25
    49b6:	28 de       	rcall	.-944    	; 0x4608 <_upload_message_rc>
    49b8:	0f 90       	pop	r0
    49ba:	0f 90       	pop	r0
    49bc:	0f 90       	pop	r0
    49be:	0f 90       	pop	r0
    49c0:	0f 90       	pop	r0
    49c2:	0f 90       	pop	r0
    49c4:	08 95       	ret

000049c6 <lora_driver_configure_to_eu868>:
    49c6:	2f 92       	push	r2
    49c8:	3f 92       	push	r3
    49ca:	4f 92       	push	r4
    49cc:	5f 92       	push	r5
    49ce:	6f 92       	push	r6
    49d0:	7f 92       	push	r7
    49d2:	8f 92       	push	r8
    49d4:	9f 92       	push	r9
    49d6:	af 92       	push	r10
    49d8:	bf 92       	push	r11
    49da:	cf 92       	push	r12
    49dc:	df 92       	push	r13
    49de:	ef 92       	push	r14
    49e0:	ff 92       	push	r15
    49e2:	0f 93       	push	r16
    49e4:	1f 93       	push	r17
    49e6:	cf 93       	push	r28
    49e8:	df 93       	push	r29
    49ea:	cd b7       	in	r28, 0x3d	; 61
    49ec:	de b7       	in	r29, 0x3e	; 62
    49ee:	a0 97       	sbiw	r28, 0x20	; 32
    49f0:	0f b6       	in	r0, 0x3f	; 63
    49f2:	f8 94       	cli
    49f4:	de bf       	out	0x3e, r29	; 62
    49f6:	0f be       	out	0x3f, r0	; 63
    49f8:	cd bf       	out	0x3d, r28	; 61
    49fa:	69 e2       	ldi	r22, 0x29	; 41
    49fc:	76 e0       	ldi	r23, 0x06	; 6
    49fe:	85 e3       	ldi	r24, 0x35	; 53
    4a00:	96 e0       	ldi	r25, 0x06	; 6
    4a02:	33 dd       	rcall	.-1434   	; 0x446a <_upload_message>
    4a04:	8c dd       	rcall	.-1256   	; 0x451e <_reply2return_code>
    4a06:	81 11       	cpse	r24, r1
    4a08:	a3 c0       	rjmp	.+326    	; 0x4b50 <lora_driver_configure_to_eu868+0x18a>
    4a0a:	80 e2       	ldi	r24, 0x20	; 32
    4a0c:	e5 e2       	ldi	r30, 0x25	; 37
    4a0e:	f2 e0       	ldi	r31, 0x02	; 2
    4a10:	de 01       	movw	r26, r28
    4a12:	11 96       	adiw	r26, 0x01	; 1
    4a14:	01 90       	ld	r0, Z+
    4a16:	0d 92       	st	X+, r0
    4a18:	8a 95       	dec	r24
    4a1a:	e1 f7       	brne	.-8      	; 0x4a14 <lora_driver_configure_to_eu868+0x4e>
    4a1c:	9e 01       	movw	r18, r28
    4a1e:	2f 5f       	subi	r18, 0xFF	; 255
    4a20:	3f 4f       	sbci	r19, 0xFF	; 255
    4a22:	69 01       	movw	r12, r18
    4a24:	e1 2c       	mov	r14, r1
    4a26:	f1 2c       	mov	r15, r1
    4a28:	0f 2e       	mov	r0, r31
    4a2a:	f1 e4       	ldi	r31, 0x41	; 65
    4a2c:	af 2e       	mov	r10, r31
    4a2e:	f6 e0       	ldi	r31, 0x06	; 6
    4a30:	bf 2e       	mov	r11, r31
    4a32:	f0 2d       	mov	r31, r0
    4a34:	05 eb       	ldi	r16, 0xB5	; 181
    4a36:	19 e1       	ldi	r17, 0x19	; 25
    4a38:	0f 2e       	mov	r0, r31
    4a3a:	fa e5       	ldi	r31, 0x5A	; 90
    4a3c:	4f 2e       	mov	r4, r31
    4a3e:	f6 e0       	ldi	r31, 0x06	; 6
    4a40:	5f 2e       	mov	r5, r31
    4a42:	f0 2d       	mov	r31, r0
    4a44:	0f 2e       	mov	r0, r31
    4a46:	f1 e7       	ldi	r31, 0x71	; 113
    4a48:	8f 2e       	mov	r8, r31
    4a4a:	f6 e0       	ldi	r31, 0x06	; 6
    4a4c:	9f 2e       	mov	r9, r31
    4a4e:	f0 2d       	mov	r31, r0
    4a50:	0f 2e       	mov	r0, r31
    4a52:	fb e8       	ldi	r31, 0x8B	; 139
    4a54:	6f 2e       	mov	r6, r31
    4a56:	f6 e0       	ldi	r31, 0x06	; 6
    4a58:	7f 2e       	mov	r7, r31
    4a5a:	f0 2d       	mov	r31, r0
    4a5c:	3e 2c       	mov	r3, r14
    4a5e:	2f 2c       	mov	r2, r15
    4a60:	ff 92       	push	r15
    4a62:	ef 92       	push	r14
    4a64:	bf 92       	push	r11
    4a66:	af 92       	push	r10
    4a68:	1f 93       	push	r17
    4a6a:	0f 93       	push	r16
    4a6c:	0e 94 a3 31 	call	0x6346	; 0x6346 <sprintf>
    4a70:	60 e0       	ldi	r22, 0x00	; 0
    4a72:	70 e0       	ldi	r23, 0x00	; 0
    4a74:	c8 01       	movw	r24, r16
    4a76:	f9 dc       	rcall	.-1550   	; 0x446a <_upload_message>
    4a78:	52 dd       	rcall	.-1372   	; 0x451e <_reply2return_code>
    4a7a:	0f 90       	pop	r0
    4a7c:	0f 90       	pop	r0
    4a7e:	0f 90       	pop	r0
    4a80:	0f 90       	pop	r0
    4a82:	0f 90       	pop	r0
    4a84:	0f 90       	pop	r0
    4a86:	81 11       	cpse	r24, r1
    4a88:	63 c0       	rjmp	.+198    	; 0x4b50 <lora_driver_configure_to_eu868+0x18a>
    4a8a:	32 e0       	ldi	r19, 0x02	; 2
    4a8c:	3e 15       	cp	r19, r14
    4a8e:	e8 f4       	brcc	.+58     	; 0x4aca <lora_driver_configure_to_eu868+0x104>
    4a90:	f6 01       	movw	r30, r12
    4a92:	83 81       	ldd	r24, Z+3	; 0x03
    4a94:	8f 93       	push	r24
    4a96:	82 81       	ldd	r24, Z+2	; 0x02
    4a98:	8f 93       	push	r24
    4a9a:	81 81       	ldd	r24, Z+1	; 0x01
    4a9c:	8f 93       	push	r24
    4a9e:	80 81       	ld	r24, Z
    4aa0:	8f 93       	push	r24
    4aa2:	ff 92       	push	r15
    4aa4:	ef 92       	push	r14
    4aa6:	5f 92       	push	r5
    4aa8:	4f 92       	push	r4
    4aaa:	1f 93       	push	r17
    4aac:	0f 93       	push	r16
    4aae:	0e 94 a3 31 	call	0x6346	; 0x6346 <sprintf>
    4ab2:	60 e0       	ldi	r22, 0x00	; 0
    4ab4:	70 e0       	ldi	r23, 0x00	; 0
    4ab6:	c8 01       	movw	r24, r16
    4ab8:	d8 dc       	rcall	.-1616   	; 0x446a <_upload_message>
    4aba:	31 dd       	rcall	.-1438   	; 0x451e <_reply2return_code>
    4abc:	0f b6       	in	r0, 0x3f	; 63
    4abe:	f8 94       	cli
    4ac0:	de bf       	out	0x3e, r29	; 62
    4ac2:	0f be       	out	0x3f, r0	; 63
    4ac4:	cd bf       	out	0x3d, r28	; 61
    4ac6:	81 11       	cpse	r24, r1
    4ac8:	43 c0       	rjmp	.+134    	; 0x4b50 <lora_driver_configure_to_eu868+0x18a>
    4aca:	2f 92       	push	r2
    4acc:	3f 92       	push	r3
    4ace:	9f 92       	push	r9
    4ad0:	8f 92       	push	r8
    4ad2:	1f 93       	push	r17
    4ad4:	0f 93       	push	r16
    4ad6:	0e 94 a3 31 	call	0x6346	; 0x6346 <sprintf>
    4ada:	60 e0       	ldi	r22, 0x00	; 0
    4adc:	70 e0       	ldi	r23, 0x00	; 0
    4ade:	c8 01       	movw	r24, r16
    4ae0:	c4 dc       	rcall	.-1656   	; 0x446a <_upload_message>
    4ae2:	1d dd       	rcall	.-1478   	; 0x451e <_reply2return_code>
    4ae4:	0f 90       	pop	r0
    4ae6:	0f 90       	pop	r0
    4ae8:	0f 90       	pop	r0
    4aea:	0f 90       	pop	r0
    4aec:	0f 90       	pop	r0
    4aee:	0f 90       	pop	r0
    4af0:	81 11       	cpse	r24, r1
    4af2:	2e c0       	rjmp	.+92     	; 0x4b50 <lora_driver_configure_to_eu868+0x18a>
    4af4:	2f 92       	push	r2
    4af6:	3f 92       	push	r3
    4af8:	7f 92       	push	r7
    4afa:	6f 92       	push	r6
    4afc:	1f 93       	push	r17
    4afe:	0f 93       	push	r16
    4b00:	0e 94 a3 31 	call	0x6346	; 0x6346 <sprintf>
    4b04:	60 e0       	ldi	r22, 0x00	; 0
    4b06:	70 e0       	ldi	r23, 0x00	; 0
    4b08:	c8 01       	movw	r24, r16
    4b0a:	af dc       	rcall	.-1698   	; 0x446a <_upload_message>
    4b0c:	08 dd       	rcall	.-1520   	; 0x451e <_reply2return_code>
    4b0e:	0f 90       	pop	r0
    4b10:	0f 90       	pop	r0
    4b12:	0f 90       	pop	r0
    4b14:	0f 90       	pop	r0
    4b16:	0f 90       	pop	r0
    4b18:	0f 90       	pop	r0
    4b1a:	81 11       	cpse	r24, r1
    4b1c:	19 c0       	rjmp	.+50     	; 0x4b50 <lora_driver_configure_to_eu868+0x18a>
    4b1e:	3f ef       	ldi	r19, 0xFF	; 255
    4b20:	e3 1a       	sub	r14, r19
    4b22:	f3 0a       	sbc	r15, r19
    4b24:	84 e0       	ldi	r24, 0x04	; 4
    4b26:	c8 0e       	add	r12, r24
    4b28:	d1 1c       	adc	r13, r1
    4b2a:	98 e0       	ldi	r25, 0x08	; 8
    4b2c:	e9 16       	cp	r14, r25
    4b2e:	f1 04       	cpc	r15, r1
    4b30:	09 f0       	breq	.+2      	; 0x4b34 <lora_driver_configure_to_eu868+0x16e>
    4b32:	94 cf       	rjmp	.-216    	; 0x4a5c <lora_driver_configure_to_eu868+0x96>
    4b34:	60 e0       	ldi	r22, 0x00	; 0
    4b36:	70 e0       	ldi	r23, 0x00	; 0
    4b38:	83 ea       	ldi	r24, 0xA3	; 163
    4b3a:	96 e0       	ldi	r25, 0x06	; 6
    4b3c:	96 dc       	rcall	.-1748   	; 0x446a <_upload_message>
    4b3e:	ef dc       	rcall	.-1570   	; 0x451e <_reply2return_code>
    4b40:	81 11       	cpse	r24, r1
    4b42:	06 c0       	rjmp	.+12     	; 0x4b50 <lora_driver_configure_to_eu868+0x18a>
    4b44:	60 e0       	ldi	r22, 0x00	; 0
    4b46:	70 e0       	ldi	r23, 0x00	; 0
    4b48:	84 eb       	ldi	r24, 0xB4	; 180
    4b4a:	96 e0       	ldi	r25, 0x06	; 6
    4b4c:	8e dc       	rcall	.-1764   	; 0x446a <_upload_message>
    4b4e:	e7 dc       	rcall	.-1586   	; 0x451e <_reply2return_code>
    4b50:	a0 96       	adiw	r28, 0x20	; 32
    4b52:	0f b6       	in	r0, 0x3f	; 63
    4b54:	f8 94       	cli
    4b56:	de bf       	out	0x3e, r29	; 62
    4b58:	0f be       	out	0x3f, r0	; 63
    4b5a:	cd bf       	out	0x3d, r28	; 61
    4b5c:	df 91       	pop	r29
    4b5e:	cf 91       	pop	r28
    4b60:	1f 91       	pop	r17
    4b62:	0f 91       	pop	r16
    4b64:	ff 90       	pop	r15
    4b66:	ef 90       	pop	r14
    4b68:	df 90       	pop	r13
    4b6a:	cf 90       	pop	r12
    4b6c:	bf 90       	pop	r11
    4b6e:	af 90       	pop	r10
    4b70:	9f 90       	pop	r9
    4b72:	8f 90       	pop	r8
    4b74:	7f 90       	pop	r7
    4b76:	6f 90       	pop	r6
    4b78:	5f 90       	pop	r5
    4b7a:	4f 90       	pop	r4
    4b7c:	3f 90       	pop	r3
    4b7e:	2f 90       	pop	r2
    4b80:	08 95       	ret

00004b82 <lora_driver_set_otaa_identity>:
    4b82:	ef 92       	push	r14
    4b84:	ff 92       	push	r15
    4b86:	0f 93       	push	r16
    4b88:	1f 93       	push	r17
    4b8a:	cf 93       	push	r28
    4b8c:	df 93       	push	r29
    4b8e:	ec 01       	movw	r28, r24
    4b90:	8b 01       	movw	r16, r22
    4b92:	7a 01       	movw	r14, r20
    4b94:	81 e0       	ldi	r24, 0x01	; 1
    4b96:	f4 de       	rcall	.-536    	; 0x4980 <lora_driver_set_adaptive_data_rate>
    4b98:	81 11       	cpse	r24, r1
    4b9a:	0d c0       	rjmp	.+26     	; 0x4bb6 <lora_driver_set_otaa_identity+0x34>
    4b9c:	ce 01       	movw	r24, r28
    4b9e:	d4 dd       	rcall	.-1112   	; 0x4748 <lora_driver_set_application_identifier>
    4ba0:	81 11       	cpse	r24, r1
    4ba2:	09 c0       	rjmp	.+18     	; 0x4bb6 <lora_driver_set_otaa_identity+0x34>
    4ba4:	c8 01       	movw	r24, r16
    4ba6:	e1 dd       	rcall	.-1086   	; 0x476a <lora_driver_set_application_key>
    4ba8:	81 11       	cpse	r24, r1
    4baa:	05 c0       	rjmp	.+10     	; 0x4bb6 <lora_driver_set_otaa_identity+0x34>
    4bac:	c7 01       	movw	r24, r14
    4bae:	bb dd       	rcall	.-1162   	; 0x4726 <lora_driver_set_device_identifier>
    4bb0:	81 11       	cpse	r24, r1
    4bb2:	01 c0       	rjmp	.+2      	; 0x4bb6 <lora_driver_set_otaa_identity+0x34>
    4bb4:	eb dd       	rcall	.-1066   	; 0x478c <lora_driver_save_mac>
    4bb6:	df 91       	pop	r29
    4bb8:	cf 91       	pop	r28
    4bba:	1f 91       	pop	r17
    4bbc:	0f 91       	pop	r16
    4bbe:	ff 90       	pop	r15
    4bc0:	ef 90       	pop	r14
    4bc2:	08 95       	ret

00004bc4 <lora_driver_map_return_code_to_text>:
    4bc4:	90 e0       	ldi	r25, 0x00	; 0
    4bc6:	fc 01       	movw	r30, r24
    4bc8:	ee 0f       	add	r30, r30
    4bca:	ff 1f       	adc	r31, r31
    4bcc:	8e 0f       	add	r24, r30
    4bce:	9f 1f       	adc	r25, r31
    4bd0:	fc 01       	movw	r30, r24
    4bd2:	e3 58       	subi	r30, 0x83	; 131
    4bd4:	f8 4f       	sbci	r31, 0xF8	; 248
    4bd6:	81 81       	ldd	r24, Z+1	; 0x01
    4bd8:	92 81       	ldd	r25, Z+2	; 0x02
    4bda:	08 95       	ret

00004bdc <decode_port_no>:
    4bdc:	dc 01       	movw	r26, r24
    4bde:	00 97       	sbiw	r24, 0x00	; 0
    4be0:	29 f1       	breq	.+74     	; 0x4c2c <decode_port_no+0x50>
    4be2:	fb 01       	movw	r30, r22
    4be4:	20 81       	ld	r18, Z
    4be6:	fc 01       	movw	r30, r24
    4be8:	01 90       	ld	r0, Z+
    4bea:	00 20       	and	r0, r0
    4bec:	e9 f7       	brne	.-6      	; 0x4be8 <decode_port_no+0xc>
    4bee:	31 97       	sbiw	r30, 0x01	; 1
    4bf0:	e8 1b       	sub	r30, r24
    4bf2:	f9 0b       	sbc	r31, r25
    4bf4:	82 2f       	mov	r24, r18
    4bf6:	90 e0       	ldi	r25, 0x00	; 0
    4bf8:	e8 17       	cp	r30, r24
    4bfa:	f9 07       	cpc	r31, r25
    4bfc:	c8 f0       	brcs	.+50     	; 0x4c30 <decode_port_no+0x54>
    4bfe:	80 e0       	ldi	r24, 0x00	; 0
    4c00:	08 c0       	rjmp	.+16     	; 0x4c12 <decode_port_no+0x36>
    4c02:	88 0f       	add	r24, r24
    4c04:	38 2f       	mov	r19, r24
    4c06:	33 0f       	add	r19, r19
    4c08:	33 0f       	add	r19, r19
    4c0a:	83 0f       	add	r24, r19
    4c0c:	80 53       	subi	r24, 0x30	; 48
    4c0e:	89 0f       	add	r24, r25
    4c10:	2f 5f       	subi	r18, 0xFF	; 255
    4c12:	fd 01       	movw	r30, r26
    4c14:	e2 0f       	add	r30, r18
    4c16:	f1 1d       	adc	r31, r1
    4c18:	90 81       	ld	r25, Z
    4c1a:	30 ed       	ldi	r19, 0xD0	; 208
    4c1c:	39 0f       	add	r19, r25
    4c1e:	3a 30       	cpi	r19, 0x0A	; 10
    4c20:	10 f4       	brcc	.+4      	; 0x4c26 <decode_port_no+0x4a>
    4c22:	91 11       	cpse	r25, r1
    4c24:	ee cf       	rjmp	.-36     	; 0x4c02 <decode_port_no+0x26>
    4c26:	fb 01       	movw	r30, r22
    4c28:	20 83       	st	Z, r18
    4c2a:	08 95       	ret
    4c2c:	80 e0       	ldi	r24, 0x00	; 0
    4c2e:	08 95       	ret
    4c30:	80 e0       	ldi	r24, 0x00	; 0
    4c32:	08 95       	ret

00004c34 <decode_hexadecimal_string_bytes>:
    4c34:	0f 93       	push	r16
    4c36:	1f 93       	push	r17
    4c38:	cf 93       	push	r28
    4c3a:	df 93       	push	r29
    4c3c:	dc 01       	movw	r26, r24
    4c3e:	ea 01       	movw	r28, r20
    4c40:	20 97       	sbiw	r28, 0x00	; 0
    4c42:	e1 f1       	breq	.+120    	; 0x4cbc <decode_hexadecimal_string_bytes+0x88>
    4c44:	fa 01       	movw	r30, r20
    4c46:	01 90       	ld	r0, Z+
    4c48:	00 20       	and	r0, r0
    4c4a:	e9 f7       	brne	.-6      	; 0x4c46 <decode_hexadecimal_string_bytes+0x12>
    4c4c:	31 97       	sbiw	r30, 0x01	; 1
    4c4e:	e4 1b       	sub	r30, r20
    4c50:	f5 0b       	sbc	r31, r21
    4c52:	32 97       	sbiw	r30, 0x02	; 2
    4c54:	10 f5       	brcc	.+68     	; 0x4c9a <decode_hexadecimal_string_bytes+0x66>
    4c56:	32 c0       	rjmp	.+100    	; 0x4cbc <decode_hexadecimal_string_bytes+0x88>
    4c58:	8d 01       	movw	r16, r26
    4c5a:	04 0f       	add	r16, r20
    4c5c:	15 1f       	adc	r17, r21
    4c5e:	30 e0       	ldi	r19, 0x00	; 0
    4c60:	ae 01       	movw	r20, r28
    4c62:	42 0f       	add	r20, r18
    4c64:	53 1f       	adc	r21, r19
    4c66:	fa 01       	movw	r30, r20
    4c68:	90 81       	ld	r25, Z
    4c6a:	91 34       	cpi	r25, 0x41	; 65
    4c6c:	28 f0       	brcs	.+10     	; 0x4c78 <decode_hexadecimal_string_bytes+0x44>
    4c6e:	97 53       	subi	r25, 0x37	; 55
    4c70:	59 2f       	mov	r21, r25
    4c72:	52 95       	swap	r21
    4c74:	50 7f       	andi	r21, 0xF0	; 240
    4c76:	03 c0       	rjmp	.+6      	; 0x4c7e <decode_hexadecimal_string_bytes+0x4a>
    4c78:	59 2f       	mov	r21, r25
    4c7a:	52 95       	swap	r21
    4c7c:	50 7f       	andi	r21, 0xF0	; 240
    4c7e:	2c 0f       	add	r18, r28
    4c80:	3d 1f       	adc	r19, r29
    4c82:	f9 01       	movw	r30, r18
    4c84:	91 81       	ldd	r25, Z+1	; 0x01
    4c86:	91 34       	cpi	r25, 0x41	; 65
    4c88:	10 f0       	brcs	.+4      	; 0x4c8e <decode_hexadecimal_string_bytes+0x5a>
    4c8a:	97 53       	subi	r25, 0x37	; 55
    4c8c:	01 c0       	rjmp	.+2      	; 0x4c90 <decode_hexadecimal_string_bytes+0x5c>
    4c8e:	90 53       	subi	r25, 0x30	; 48
    4c90:	95 0f       	add	r25, r21
    4c92:	f8 01       	movw	r30, r16
    4c94:	90 83       	st	Z, r25
    4c96:	8f 5f       	subi	r24, 0xFF	; 255
    4c98:	01 c0       	rjmp	.+2      	; 0x4c9c <decode_hexadecimal_string_bytes+0x68>
    4c9a:	80 e0       	ldi	r24, 0x00	; 0
    4c9c:	28 2f       	mov	r18, r24
    4c9e:	22 0f       	add	r18, r18
    4ca0:	48 2f       	mov	r20, r24
    4ca2:	50 e0       	ldi	r21, 0x00	; 0
    4ca4:	fe 01       	movw	r30, r28
    4ca6:	01 90       	ld	r0, Z+
    4ca8:	00 20       	and	r0, r0
    4caa:	e9 f7       	brne	.-6      	; 0x4ca6 <decode_hexadecimal_string_bytes+0x72>
    4cac:	31 97       	sbiw	r30, 0x01	; 1
    4cae:	ec 1b       	sub	r30, r28
    4cb0:	fd 0b       	sbc	r31, r29
    4cb2:	4e 17       	cp	r20, r30
    4cb4:	5f 07       	cpc	r21, r31
    4cb6:	10 f4       	brcc	.+4      	; 0x4cbc <decode_hexadecimal_string_bytes+0x88>
    4cb8:	86 13       	cpse	r24, r22
    4cba:	ce cf       	rjmp	.-100    	; 0x4c58 <decode_hexadecimal_string_bytes+0x24>
    4cbc:	df 91       	pop	r29
    4cbe:	cf 91       	pop	r28
    4cc0:	1f 91       	pop	r17
    4cc2:	0f 91       	pop	r16
    4cc4:	08 95       	ret

00004cc6 <reg_read_register>:
    4cc6:	fc 01       	movw	r30, r24
    4cc8:	80 81       	ld	r24, Z
    4cca:	08 95       	ret

00004ccc <reg_read_bit>:
    4ccc:	fc 01       	movw	r30, r24
    4cce:	20 81       	ld	r18, Z
    4cd0:	81 e0       	ldi	r24, 0x01	; 1
    4cd2:	90 e0       	ldi	r25, 0x00	; 0
    4cd4:	02 c0       	rjmp	.+4      	; 0x4cda <reg_read_bit+0xe>
    4cd6:	88 0f       	add	r24, r24
    4cd8:	99 1f       	adc	r25, r25
    4cda:	6a 95       	dec	r22
    4cdc:	e2 f7       	brpl	.-8      	; 0x4cd6 <reg_read_bit+0xa>
    4cde:	82 23       	and	r24, r18
    4ce0:	08 95       	ret

00004ce2 <reg_read_bits>:
    4ce2:	fc 01       	movw	r30, r24
    4ce4:	80 81       	ld	r24, Z
    4ce6:	86 23       	and	r24, r22
    4ce8:	08 95       	ret

00004cea <reg_set_register>:
    4cea:	fc 01       	movw	r30, r24
    4cec:	60 83       	st	Z, r22
    4cee:	08 95       	ret

00004cf0 <reg_clear_register>:
    4cf0:	fc 01       	movw	r30, r24
    4cf2:	10 82       	st	Z, r1
    4cf4:	08 95       	ret

00004cf6 <reg_set_bit>:
    4cf6:	fc 01       	movw	r30, r24
    4cf8:	40 81       	ld	r20, Z
    4cfa:	21 e0       	ldi	r18, 0x01	; 1
    4cfc:	30 e0       	ldi	r19, 0x00	; 0
    4cfe:	02 c0       	rjmp	.+4      	; 0x4d04 <reg_set_bit+0xe>
    4d00:	22 0f       	add	r18, r18
    4d02:	33 1f       	adc	r19, r19
    4d04:	6a 95       	dec	r22
    4d06:	e2 f7       	brpl	.-8      	; 0x4d00 <reg_set_bit+0xa>
    4d08:	24 2b       	or	r18, r20
    4d0a:	20 83       	st	Z, r18
    4d0c:	08 95       	ret

00004d0e <reg_set_bits>:
    4d0e:	fc 01       	movw	r30, r24
    4d10:	20 81       	ld	r18, Z
    4d12:	62 2b       	or	r22, r18
    4d14:	60 83       	st	Z, r22
    4d16:	08 95       	ret

00004d18 <reg_toggle_bit>:
    4d18:	fc 01       	movw	r30, r24
    4d1a:	40 81       	ld	r20, Z
    4d1c:	21 e0       	ldi	r18, 0x01	; 1
    4d1e:	30 e0       	ldi	r19, 0x00	; 0
    4d20:	02 c0       	rjmp	.+4      	; 0x4d26 <reg_toggle_bit+0xe>
    4d22:	22 0f       	add	r18, r18
    4d24:	33 1f       	adc	r19, r19
    4d26:	6a 95       	dec	r22
    4d28:	e2 f7       	brpl	.-8      	; 0x4d22 <reg_toggle_bit+0xa>
    4d2a:	24 27       	eor	r18, r20
    4d2c:	20 83       	st	Z, r18
    4d2e:	08 95       	ret

00004d30 <reg_toggle_bits>:
    4d30:	fc 01       	movw	r30, r24
    4d32:	20 81       	ld	r18, Z
    4d34:	62 27       	eor	r22, r18
    4d36:	60 83       	st	Z, r22
    4d38:	08 95       	ret

00004d3a <reg_clear_bit>:
    4d3a:	fc 01       	movw	r30, r24
    4d3c:	90 81       	ld	r25, Z
    4d3e:	21 e0       	ldi	r18, 0x01	; 1
    4d40:	30 e0       	ldi	r19, 0x00	; 0
    4d42:	02 c0       	rjmp	.+4      	; 0x4d48 <reg_clear_bit+0xe>
    4d44:	22 0f       	add	r18, r18
    4d46:	33 1f       	adc	r19, r19
    4d48:	6a 95       	dec	r22
    4d4a:	e2 f7       	brpl	.-8      	; 0x4d44 <reg_clear_bit+0xa>
    4d4c:	20 95       	com	r18
    4d4e:	29 23       	and	r18, r25
    4d50:	20 83       	st	Z, r18
    4d52:	08 95       	ret

00004d54 <reg_clear_bits>:
    4d54:	fc 01       	movw	r30, r24
    4d56:	90 81       	ld	r25, Z
    4d58:	60 95       	com	r22
    4d5a:	69 23       	and	r22, r25
    4d5c:	60 83       	st	Z, r22
    4d5e:	08 95       	ret

00004d60 <_serial_call_back>:
    4d60:	80 91 12 1a 	lds	r24, 0x1A12	; 0x801a12 <crc_sum.1941>
    4d64:	86 0f       	add	r24, r22
    4d66:	80 93 12 1a 	sts	0x1A12, r24	; 0x801a12 <crc_sum.1941>
    4d6a:	90 91 15 1a 	lds	r25, 0x1A15	; 0x801a15 <_mh_state>
    4d6e:	91 30       	cpi	r25, 0x01	; 1
    4d70:	79 f0       	breq	.+30     	; 0x4d90 <_serial_call_back+0x30>
    4d72:	28 f0       	brcs	.+10     	; 0x4d7e <_serial_call_back+0x1e>
    4d74:	92 30       	cpi	r25, 0x02	; 2
    4d76:	a9 f0       	breq	.+42     	; 0x4da2 <_serial_call_back+0x42>
    4d78:	93 30       	cpi	r25, 0x03	; 3
    4d7a:	19 f1       	breq	.+70     	; 0x4dc2 <_serial_call_back+0x62>
    4d7c:	08 95       	ret
    4d7e:	6f 3f       	cpi	r22, 0xFF	; 255
    4d80:	09 f0       	breq	.+2      	; 0x4d84 <_serial_call_back+0x24>
    4d82:	48 c0       	rjmp	.+144    	; 0x4e14 <_serial_call_back+0xb4>
    4d84:	10 92 12 1a 	sts	0x1A12, r1	; 0x801a12 <crc_sum.1941>
    4d88:	81 e0       	ldi	r24, 0x01	; 1
    4d8a:	80 93 15 1a 	sts	0x1A15, r24	; 0x801a15 <_mh_state>
    4d8e:	08 95       	ret
    4d90:	66 38       	cpi	r22, 0x86	; 134
    4d92:	09 f0       	breq	.+2      	; 0x4d96 <_serial_call_back+0x36>
    4d94:	3f c0       	rjmp	.+126    	; 0x4e14 <_serial_call_back+0xb4>
    4d96:	10 92 11 1a 	sts	0x1A11, r1	; 0x801a11 <inDex.1939>
    4d9a:	82 e0       	ldi	r24, 0x02	; 2
    4d9c:	80 93 15 1a 	sts	0x1A15, r24	; 0x801a15 <_mh_state>
    4da0:	08 95       	ret
    4da2:	e0 91 11 1a 	lds	r30, 0x1A11	; 0x801a11 <inDex.1939>
    4da6:	81 e0       	ldi	r24, 0x01	; 1
    4da8:	8e 0f       	add	r24, r30
    4daa:	80 93 11 1a 	sts	0x1A11, r24	; 0x801a11 <inDex.1939>
    4dae:	f0 e0       	ldi	r31, 0x00	; 0
    4db0:	e1 5f       	subi	r30, 0xF1	; 241
    4db2:	f5 4e       	sbci	r31, 0xE5	; 229
    4db4:	60 83       	st	Z, r22
    4db6:	82 30       	cpi	r24, 0x02	; 2
    4db8:	69 f5       	brne	.+90     	; 0x4e14 <_serial_call_back+0xb4>
    4dba:	83 e0       	ldi	r24, 0x03	; 3
    4dbc:	80 93 15 1a 	sts	0x1A15, r24	; 0x801a15 <_mh_state>
    4dc0:	08 95       	ret
    4dc2:	90 91 11 1a 	lds	r25, 0x1A11	; 0x801a11 <inDex.1939>
    4dc6:	21 e0       	ldi	r18, 0x01	; 1
    4dc8:	29 0f       	add	r18, r25
    4dca:	20 93 11 1a 	sts	0x1A11, r18	; 0x801a11 <inDex.1939>
    4dce:	96 30       	cpi	r25, 0x06	; 6
    4dd0:	09 f5       	brne	.+66     	; 0x4e14 <_serial_call_back+0xb4>
    4dd2:	81 11       	cpse	r24, r1
    4dd4:	0e c0       	rjmp	.+28     	; 0x4df2 <_serial_call_back+0x92>
    4dd6:	ef e0       	ldi	r30, 0x0F	; 15
    4dd8:	fa e1       	ldi	r31, 0x1A	; 26
    4dda:	80 81       	ld	r24, Z
    4ddc:	90 e0       	ldi	r25, 0x00	; 0
    4dde:	98 2f       	mov	r25, r24
    4de0:	88 27       	eor	r24, r24
    4de2:	21 81       	ldd	r18, Z+1	; 0x01
    4de4:	82 0f       	add	r24, r18
    4de6:	91 1d       	adc	r25, r1
    4de8:	90 93 17 1a 	sts	0x1A17, r25	; 0x801a17 <_ppm+0x1>
    4dec:	80 93 16 1a 	sts	0x1A16, r24	; 0x801a16 <_ppm>
    4df0:	04 c0       	rjmp	.+8      	; 0x4dfa <_serial_call_back+0x9a>
    4df2:	10 92 17 1a 	sts	0x1A17, r1	; 0x801a17 <_ppm+0x1>
    4df6:	10 92 16 1a 	sts	0x1A16, r1	; 0x801a16 <_ppm>
    4dfa:	10 92 15 1a 	sts	0x1A15, r1	; 0x801a15 <_mh_state>
    4dfe:	e0 91 13 1a 	lds	r30, 0x1A13	; 0x801a13 <_app_call_back>
    4e02:	f0 91 14 1a 	lds	r31, 0x1A14	; 0x801a14 <_app_call_back+0x1>
    4e06:	30 97       	sbiw	r30, 0x00	; 0
    4e08:	29 f0       	breq	.+10     	; 0x4e14 <_serial_call_back+0xb4>
    4e0a:	80 91 16 1a 	lds	r24, 0x1A16	; 0x801a16 <_ppm>
    4e0e:	90 91 17 1a 	lds	r25, 0x1A17	; 0x801a17 <_ppm+0x1>
    4e12:	19 95       	eicall
    4e14:	08 95       	ret

00004e16 <mh_z19_create>:
    4e16:	8f 92       	push	r8
    4e18:	9f 92       	push	r9
    4e1a:	af 92       	push	r10
    4e1c:	cf 92       	push	r12
    4e1e:	ef 92       	push	r14
    4e20:	0f 93       	push	r16
    4e22:	cf 93       	push	r28
    4e24:	df 93       	push	r29
    4e26:	eb 01       	movw	r28, r22
    4e28:	0f 2e       	mov	r0, r31
    4e2a:	f0 eb       	ldi	r31, 0xB0	; 176
    4e2c:	8f 2e       	mov	r8, r31
    4e2e:	f6 e2       	ldi	r31, 0x26	; 38
    4e30:	9f 2e       	mov	r9, r31
    4e32:	f0 2d       	mov	r31, r0
    4e34:	68 94       	set
    4e36:	aa 24       	eor	r10, r10
    4e38:	a4 f8       	bld	r10, 4
    4e3a:	68 94       	set
    4e3c:	cc 24       	eor	r12, r12
    4e3e:	c4 f8       	bld	r12, 4
    4e40:	e1 2c       	mov	r14, r1
    4e42:	00 e0       	ldi	r16, 0x00	; 0
    4e44:	23 e0       	ldi	r18, 0x03	; 3
    4e46:	40 e8       	ldi	r20, 0x80	; 128
    4e48:	55 e2       	ldi	r21, 0x25	; 37
    4e4a:	60 e0       	ldi	r22, 0x00	; 0
    4e4c:	70 e0       	ldi	r23, 0x00	; 0
    4e4e:	85 d0       	rcall	.+266    	; 0x4f5a <serial_new_instance>
    4e50:	90 93 19 1a 	sts	0x1A19, r25	; 0x801a19 <_serial+0x1>
    4e54:	80 93 18 1a 	sts	0x1A18, r24	; 0x801a18 <_serial>
    4e58:	d0 93 14 1a 	sts	0x1A14, r29	; 0x801a14 <_app_call_back+0x1>
    4e5c:	c0 93 13 1a 	sts	0x1A13, r28	; 0x801a13 <_app_call_back>
    4e60:	df 91       	pop	r29
    4e62:	cf 91       	pop	r28
    4e64:	0f 91       	pop	r16
    4e66:	ef 90       	pop	r14
    4e68:	cf 90       	pop	r12
    4e6a:	af 90       	pop	r10
    4e6c:	9f 90       	pop	r9
    4e6e:	8f 90       	pop	r8
    4e70:	08 95       	ret

00004e72 <mh_z19_take_meassuring>:
    4e72:	cf 93       	push	r28
    4e74:	df 93       	push	r29
    4e76:	cd b7       	in	r28, 0x3d	; 61
    4e78:	de b7       	in	r29, 0x3e	; 62
    4e7a:	29 97       	sbiw	r28, 0x09	; 9
    4e7c:	0f b6       	in	r0, 0x3f	; 63
    4e7e:	f8 94       	cli
    4e80:	de bf       	out	0x3e, r29	; 62
    4e82:	0f be       	out	0x3f, r0	; 63
    4e84:	cd bf       	out	0x3d, r28	; 61
    4e86:	89 e0       	ldi	r24, 0x09	; 9
    4e88:	e5 e4       	ldi	r30, 0x45	; 69
    4e8a:	f2 e0       	ldi	r31, 0x02	; 2
    4e8c:	9e 01       	movw	r18, r28
    4e8e:	2f 5f       	subi	r18, 0xFF	; 255
    4e90:	3f 4f       	sbci	r19, 0xFF	; 255
    4e92:	d9 01       	movw	r26, r18
    4e94:	01 90       	ld	r0, Z+
    4e96:	0d 92       	st	X+, r0
    4e98:	8a 95       	dec	r24
    4e9a:	e1 f7       	brne	.-8      	; 0x4e94 <mh_z19_take_meassuring+0x22>
    4e9c:	10 92 17 1a 	sts	0x1A17, r1	; 0x801a17 <_ppm+0x1>
    4ea0:	10 92 16 1a 	sts	0x1A16, r1	; 0x801a16 <_ppm>
    4ea4:	80 91 18 1a 	lds	r24, 0x1A18	; 0x801a18 <_serial>
    4ea8:	90 91 19 1a 	lds	r25, 0x1A19	; 0x801a19 <_serial+0x1>
    4eac:	00 97       	sbiw	r24, 0x00	; 0
    4eae:	31 f0       	breq	.+12     	; 0x4ebc <mh_z19_take_meassuring+0x4a>
    4eb0:	42 2f       	mov	r20, r18
    4eb2:	53 2f       	mov	r21, r19
    4eb4:	69 e0       	ldi	r22, 0x09	; 9
    4eb6:	0c d1       	rcall	.+536    	; 0x50d0 <serial_send_bytes>
    4eb8:	80 e0       	ldi	r24, 0x00	; 0
    4eba:	01 c0       	rjmp	.+2      	; 0x4ebe <mh_z19_take_meassuring+0x4c>
    4ebc:	82 e0       	ldi	r24, 0x02	; 2
    4ebe:	29 96       	adiw	r28, 0x09	; 9
    4ec0:	0f b6       	in	r0, 0x3f	; 63
    4ec2:	f8 94       	cli
    4ec4:	de bf       	out	0x3e, r29	; 62
    4ec6:	0f be       	out	0x3f, r0	; 63
    4ec8:	cd bf       	out	0x3d, r28	; 61
    4eca:	df 91       	pop	r29
    4ecc:	cf 91       	pop	r28
    4ece:	08 95       	ret

00004ed0 <mh_z19_get_co2_ppm>:
    4ed0:	20 91 16 1a 	lds	r18, 0x1A16	; 0x801a16 <_ppm>
    4ed4:	30 91 17 1a 	lds	r19, 0x1A17	; 0x801a17 <_ppm+0x1>
    4ed8:	21 15       	cp	r18, r1
    4eda:	31 05       	cpc	r19, r1
    4edc:	29 f4       	brne	.+10     	; 0x4ee8 <mh_z19_get_co2_ppm+0x18>
    4ede:	fc 01       	movw	r30, r24
    4ee0:	11 82       	std	Z+1, r1	; 0x01
    4ee2:	10 82       	st	Z, r1
    4ee4:	81 e0       	ldi	r24, 0x01	; 1
    4ee6:	08 95       	ret
    4ee8:	fc 01       	movw	r30, r24
    4eea:	31 83       	std	Z+1, r19	; 0x01
    4eec:	20 83       	st	Z, r18
    4eee:	80 e0       	ldi	r24, 0x00	; 0
    4ef0:	08 95       	ret

00004ef2 <rcServoSet>:
    4ef2:	65 36       	cpi	r22, 0x65	; 101
    4ef4:	0c f0       	brlt	.+2      	; 0x4ef8 <rcServoSet+0x6>
    4ef6:	64 e6       	ldi	r22, 0x64	; 100
    4ef8:	6c 39       	cpi	r22, 0x9C	; 156
    4efa:	0c f4       	brge	.+2      	; 0x4efe <rcServoSet+0xc>
    4efc:	6c e9       	ldi	r22, 0x9C	; 156
    4efe:	96 ef       	ldi	r25, 0xF6	; 246
    4f00:	69 02       	muls	r22, r25
    4f02:	b0 01       	movw	r22, r0
    4f04:	11 24       	eor	r1, r1
    4f06:	68 54       	subi	r22, 0x48	; 72
    4f08:	74 4f       	sbci	r23, 0xF4	; 244
    4f0a:	81 11       	cpse	r24, r1
    4f0c:	05 c0       	rjmp	.+10     	; 0x4f18 <rcServoSet+0x26>
    4f0e:	70 93 29 01 	sts	0x0129, r23	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
    4f12:	60 93 28 01 	sts	0x0128, r22	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
    4f16:	08 95       	ret
    4f18:	70 93 2b 01 	sts	0x012B, r23	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
    4f1c:	60 93 2a 01 	sts	0x012A, r22	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
    4f20:	08 95       	ret

00004f22 <rcServoCreate>:
    4f22:	ea e0       	ldi	r30, 0x0A	; 10
    4f24:	f1 e0       	ldi	r31, 0x01	; 1
    4f26:	80 81       	ld	r24, Z
    4f28:	88 61       	ori	r24, 0x18	; 24
    4f2a:	80 83       	st	Z, r24
    4f2c:	8f e3       	ldi	r24, 0x3F	; 63
    4f2e:	9c e9       	ldi	r25, 0x9C	; 156
    4f30:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__TEXT_REGION_LENGTH__+0x700127>
    4f34:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__TEXT_REGION_LENGTH__+0x700126>
    4f38:	60 e0       	ldi	r22, 0x00	; 0
    4f3a:	80 e0       	ldi	r24, 0x00	; 0
    4f3c:	da df       	rcall	.-76     	; 0x4ef2 <rcServoSet>
    4f3e:	60 e0       	ldi	r22, 0x00	; 0
    4f40:	81 e0       	ldi	r24, 0x01	; 1
    4f42:	d7 df       	rcall	.-82     	; 0x4ef2 <rcServoSet>
    4f44:	e0 e2       	ldi	r30, 0x20	; 32
    4f46:	f1 e0       	ldi	r31, 0x01	; 1
    4f48:	80 81       	ld	r24, Z
    4f4a:	82 6a       	ori	r24, 0xA2	; 162
    4f4c:	80 83       	st	Z, r24
    4f4e:	e1 e2       	ldi	r30, 0x21	; 33
    4f50:	f1 e0       	ldi	r31, 0x01	; 1
    4f52:	80 81       	ld	r24, Z
    4f54:	8a 61       	ori	r24, 0x1A	; 26
    4f56:	80 83       	st	Z, r24
    4f58:	08 95       	ret

00004f5a <serial_new_instance>:
    4f5a:	2f 92       	push	r2
    4f5c:	3f 92       	push	r3
    4f5e:	4f 92       	push	r4
    4f60:	5f 92       	push	r5
    4f62:	6f 92       	push	r6
    4f64:	7f 92       	push	r7
    4f66:	8f 92       	push	r8
    4f68:	9f 92       	push	r9
    4f6a:	af 92       	push	r10
    4f6c:	cf 92       	push	r12
    4f6e:	ef 92       	push	r14
    4f70:	ff 92       	push	r15
    4f72:	0f 93       	push	r16
    4f74:	1f 93       	push	r17
    4f76:	cf 93       	push	r28
    4f78:	df 93       	push	r29
    4f7a:	cd b7       	in	r28, 0x3d	; 61
    4f7c:	de b7       	in	r29, 0x3e	; 62
    4f7e:	f8 2e       	mov	r15, r24
    4f80:	2a 01       	movw	r4, r20
    4f82:	3b 01       	movw	r6, r22
    4f84:	88 e0       	ldi	r24, 0x08	; 8
    4f86:	90 e0       	ldi	r25, 0x00	; 0
    4f88:	c2 d7       	rcall	.+3972   	; 0x5f0e <malloc>
    4f8a:	8c 01       	movw	r16, r24
    4f8c:	8f 2d       	mov	r24, r15
    4f8e:	90 e0       	ldi	r25, 0x00	; 0
    4f90:	88 0f       	add	r24, r24
    4f92:	99 1f       	adc	r25, r25
    4f94:	fc 01       	movw	r30, r24
    4f96:	e6 5e       	subi	r30, 0xE6	; 230
    4f98:	f5 4e       	sbci	r31, 0xE5	; 229
    4f9a:	11 83       	std	Z+1, r17	; 0x01
    4f9c:	00 83       	st	Z, r16
    4f9e:	fc 01       	movw	r30, r24
    4fa0:	e2 5f       	subi	r30, 0xF2	; 242
    4fa2:	fd 4f       	sbci	r31, 0xFD	; 253
    4fa4:	80 81       	ld	r24, Z
    4fa6:	91 81       	ldd	r25, Z+1	; 0x01
    4fa8:	d8 01       	movw	r26, r16
    4faa:	8d 93       	st	X+, r24
    4fac:	9c 93       	st	X, r25
    4fae:	6c 2d       	mov	r22, r12
    4fb0:	70 e0       	ldi	r23, 0x00	; 0
    4fb2:	84 e0       	ldi	r24, 0x04	; 4
    4fb4:	90 e0       	ldi	r25, 0x00	; 0
    4fb6:	91 d7       	rcall	.+3874   	; 0x5eda <calloc>
    4fb8:	1c 01       	movw	r2, r24
    4fba:	61 e0       	ldi	r22, 0x01	; 1
    4fbc:	70 e0       	ldi	r23, 0x00	; 0
    4fbe:	86 e0       	ldi	r24, 0x06	; 6
    4fc0:	90 e0       	ldi	r25, 0x00	; 0
    4fc2:	8b d7       	rcall	.+3862   	; 0x5eda <calloc>
    4fc4:	7c 01       	movw	r14, r24
    4fc6:	4c 2d       	mov	r20, r12
    4fc8:	b1 01       	movw	r22, r2
    4fca:	2b d5       	rcall	.+2646   	; 0x5a22 <fifo_init>
    4fcc:	f8 01       	movw	r30, r16
    4fce:	f5 82       	std	Z+5, r15	; 0x05
    4fd0:	e4 82       	std	Z+4, r14	; 0x04
    4fd2:	6a 2d       	mov	r22, r10
    4fd4:	70 e0       	ldi	r23, 0x00	; 0
    4fd6:	84 e0       	ldi	r24, 0x04	; 4
    4fd8:	90 e0       	ldi	r25, 0x00	; 0
    4fda:	7f d7       	rcall	.+3838   	; 0x5eda <calloc>
    4fdc:	1c 01       	movw	r2, r24
    4fde:	61 e0       	ldi	r22, 0x01	; 1
    4fe0:	70 e0       	ldi	r23, 0x00	; 0
    4fe2:	86 e0       	ldi	r24, 0x06	; 6
    4fe4:	90 e0       	ldi	r25, 0x00	; 0
    4fe6:	79 d7       	rcall	.+3826   	; 0x5eda <calloc>
    4fe8:	7c 01       	movw	r14, r24
    4fea:	4a 2d       	mov	r20, r10
    4fec:	b1 01       	movw	r22, r2
    4fee:	19 d5       	rcall	.+2610   	; 0x5a22 <fifo_init>
    4ff0:	d8 01       	movw	r26, r16
    4ff2:	13 96       	adiw	r26, 0x03	; 3
    4ff4:	fc 92       	st	X, r15
    4ff6:	ee 92       	st	-X, r14
    4ff8:	12 97       	sbiw	r26, 0x02	; 2
    4ffa:	17 96       	adiw	r26, 0x07	; 7
    4ffc:	9c 92       	st	X, r9
    4ffe:	8e 92       	st	-X, r8
    5000:	16 97       	sbiw	r26, 0x06	; 6
    5002:	ff b6       	in	r15, 0x3f	; 63
    5004:	f8 94       	cli
    5006:	ed 91       	ld	r30, X+
    5008:	fc 91       	ld	r31, X
    500a:	11 97       	sbiw	r26, 0x01	; 1
    500c:	36 97       	sbiw	r30, 0x06	; 6
    500e:	80 81       	ld	r24, Z
    5010:	82 60       	ori	r24, 0x02	; 2
    5012:	80 83       	st	Z, r24
    5014:	8d 90       	ld	r8, X+
    5016:	9c 90       	ld	r9, X
    5018:	c3 01       	movw	r24, r6
    501a:	b2 01       	movw	r22, r4
    501c:	1c d6       	rcall	.+3128   	; 0x5c56 <__floatunsisf>
    501e:	20 e0       	ldi	r18, 0x00	; 0
    5020:	30 e0       	ldi	r19, 0x00	; 0
    5022:	40 e0       	ldi	r20, 0x00	; 0
    5024:	51 e4       	ldi	r21, 0x41	; 65
    5026:	a5 d6       	rcall	.+3402   	; 0x5d72 <__mulsf3>
    5028:	9b 01       	movw	r18, r22
    502a:	ac 01       	movw	r20, r24
    502c:	60 e0       	ldi	r22, 0x00	; 0
    502e:	74 e2       	ldi	r23, 0x24	; 36
    5030:	84 e7       	ldi	r24, 0x74	; 116
    5032:	9b e4       	ldi	r25, 0x4B	; 75
    5034:	77 d5       	rcall	.+2798   	; 0x5b24 <__divsf3>
    5036:	20 e0       	ldi	r18, 0x00	; 0
    5038:	30 e0       	ldi	r19, 0x00	; 0
    503a:	40 e8       	ldi	r20, 0x80	; 128
    503c:	5f e3       	ldi	r21, 0x3F	; 63
    503e:	0d d5       	rcall	.+2586   	; 0x5a5a <__subsf3>
    5040:	de d5       	rcall	.+3004   	; 0x5bfe <__fixunssfsi>
    5042:	f4 01       	movw	r30, r8
    5044:	32 97       	sbiw	r30, 0x02	; 2
    5046:	60 83       	st	Z, r22
    5048:	d8 01       	movw	r26, r16
    504a:	ed 91       	ld	r30, X+
    504c:	fc 91       	ld	r31, X
    504e:	11 97       	sbiw	r26, 0x01	; 1
    5050:	35 97       	sbiw	r30, 0x05	; 5
    5052:	88 e9       	ldi	r24, 0x98	; 152
    5054:	80 83       	st	Z, r24
    5056:	ed 91       	ld	r30, X+
    5058:	fc 91       	ld	r31, X
    505a:	34 97       	sbiw	r30, 0x04	; 4
    505c:	86 e0       	ldi	r24, 0x06	; 6
    505e:	80 83       	st	Z, r24
    5060:	ff be       	out	0x3f, r15	; 63
    5062:	c8 01       	movw	r24, r16
    5064:	df 91       	pop	r29
    5066:	cf 91       	pop	r28
    5068:	1f 91       	pop	r17
    506a:	0f 91       	pop	r16
    506c:	ff 90       	pop	r15
    506e:	ef 90       	pop	r14
    5070:	cf 90       	pop	r12
    5072:	af 90       	pop	r10
    5074:	9f 90       	pop	r9
    5076:	8f 90       	pop	r8
    5078:	7f 90       	pop	r7
    507a:	6f 90       	pop	r6
    507c:	5f 90       	pop	r5
    507e:	4f 90       	pop	r4
    5080:	3f 90       	pop	r3
    5082:	2f 90       	pop	r2
    5084:	08 95       	ret

00005086 <serial_send_byte>:
    5086:	cf 93       	push	r28
    5088:	df 93       	push	r29
    508a:	ec 01       	movw	r28, r24
    508c:	ea 81       	ldd	r30, Y+2	; 0x02
    508e:	fb 81       	ldd	r31, Y+3	; 0x03
    5090:	93 81       	ldd	r25, Z+3	; 0x03
    5092:	82 81       	ldd	r24, Z+2	; 0x02
    5094:	25 81       	ldd	r18, Z+5	; 0x05
    5096:	98 1b       	sub	r25, r24
    5098:	92 23       	and	r25, r18
    509a:	84 81       	ldd	r24, Z+4	; 0x04
    509c:	98 17       	cp	r25, r24
    509e:	a1 f0       	breq	.+40     	; 0x50c8 <serial_send_byte+0x42>
    50a0:	93 81       	ldd	r25, Z+3	; 0x03
    50a2:	26 95       	lsr	r18
    50a4:	29 23       	and	r18, r25
    50a6:	a0 81       	ld	r26, Z
    50a8:	b1 81       	ldd	r27, Z+1	; 0x01
    50aa:	a2 0f       	add	r26, r18
    50ac:	b1 1d       	adc	r27, r1
    50ae:	6c 93       	st	X, r22
    50b0:	9f 5f       	subi	r25, 0xFF	; 255
    50b2:	25 81       	ldd	r18, Z+5	; 0x05
    50b4:	92 23       	and	r25, r18
    50b6:	93 83       	std	Z+3, r25	; 0x03
    50b8:	e8 81       	ld	r30, Y
    50ba:	f9 81       	ldd	r31, Y+1	; 0x01
    50bc:	35 97       	sbiw	r30, 0x05	; 5
    50be:	80 81       	ld	r24, Z
    50c0:	80 62       	ori	r24, 0x20	; 32
    50c2:	80 83       	st	Z, r24
    50c4:	80 e0       	ldi	r24, 0x00	; 0
    50c6:	01 c0       	rjmp	.+2      	; 0x50ca <serial_send_byte+0x44>
    50c8:	82 e0       	ldi	r24, 0x02	; 2
    50ca:	df 91       	pop	r29
    50cc:	cf 91       	pop	r28
    50ce:	08 95       	ret

000050d0 <serial_send_bytes>:
    50d0:	ef 92       	push	r14
    50d2:	ff 92       	push	r15
    50d4:	0f 93       	push	r16
    50d6:	1f 93       	push	r17
    50d8:	cf 93       	push	r28
    50da:	df 93       	push	r29
    50dc:	7c 01       	movw	r14, r24
    50de:	dc 01       	movw	r26, r24
    50e0:	12 96       	adiw	r26, 0x02	; 2
    50e2:	ed 91       	ld	r30, X+
    50e4:	fc 91       	ld	r31, X
    50e6:	13 97       	sbiw	r26, 0x03	; 3
    50e8:	93 81       	ldd	r25, Z+3	; 0x03
    50ea:	82 81       	ldd	r24, Z+2	; 0x02
    50ec:	98 1b       	sub	r25, r24
    50ee:	85 81       	ldd	r24, Z+5	; 0x05
    50f0:	98 23       	and	r25, r24
    50f2:	84 81       	ldd	r24, Z+4	; 0x04
    50f4:	89 1b       	sub	r24, r25
    50f6:	86 17       	cp	r24, r22
    50f8:	98 f1       	brcs	.+102    	; 0x5160 <serial_send_bytes+0x90>
    50fa:	66 23       	and	r22, r22
    50fc:	41 f1       	breq	.+80     	; 0x514e <serial_send_bytes+0x7e>
    50fe:	84 2f       	mov	r24, r20
    5100:	95 2f       	mov	r25, r21
    5102:	dc 01       	movw	r26, r24
    5104:	61 50       	subi	r22, 0x01	; 1
    5106:	46 2f       	mov	r20, r22
    5108:	50 e0       	ldi	r21, 0x00	; 0
    510a:	4f 5f       	subi	r20, 0xFF	; 255
    510c:	5f 4f       	sbci	r21, 0xFF	; 255
    510e:	48 0f       	add	r20, r24
    5110:	59 1f       	adc	r21, r25
    5112:	e7 01       	movw	r28, r14
    5114:	ea 81       	ldd	r30, Y+2	; 0x02
    5116:	fb 81       	ldd	r31, Y+3	; 0x03
    5118:	93 81       	ldd	r25, Z+3	; 0x03
    511a:	82 81       	ldd	r24, Z+2	; 0x02
    511c:	25 81       	ldd	r18, Z+5	; 0x05
    511e:	98 1b       	sub	r25, r24
    5120:	92 23       	and	r25, r18
    5122:	84 81       	ldd	r24, Z+4	; 0x04
    5124:	98 17       	cp	r25, r24
    5126:	79 f0       	breq	.+30     	; 0x5146 <serial_send_bytes+0x76>
    5128:	8c 91       	ld	r24, X
    512a:	93 81       	ldd	r25, Z+3	; 0x03
    512c:	26 95       	lsr	r18
    512e:	29 23       	and	r18, r25
    5130:	60 81       	ld	r22, Z
    5132:	71 81       	ldd	r23, Z+1	; 0x01
    5134:	8b 01       	movw	r16, r22
    5136:	02 0f       	add	r16, r18
    5138:	11 1d       	adc	r17, r1
    513a:	e8 01       	movw	r28, r16
    513c:	88 83       	st	Y, r24
    513e:	9f 5f       	subi	r25, 0xFF	; 255
    5140:	85 81       	ldd	r24, Z+5	; 0x05
    5142:	98 23       	and	r25, r24
    5144:	93 83       	std	Z+3, r25	; 0x03
    5146:	11 96       	adiw	r26, 0x01	; 1
    5148:	a4 17       	cp	r26, r20
    514a:	b5 07       	cpc	r27, r21
    514c:	11 f7       	brne	.-60     	; 0x5112 <serial_send_bytes+0x42>
    514e:	d7 01       	movw	r26, r14
    5150:	ed 91       	ld	r30, X+
    5152:	fc 91       	ld	r31, X
    5154:	35 97       	sbiw	r30, 0x05	; 5
    5156:	80 81       	ld	r24, Z
    5158:	80 62       	ori	r24, 0x20	; 32
    515a:	80 83       	st	Z, r24
    515c:	80 e0       	ldi	r24, 0x00	; 0
    515e:	01 c0       	rjmp	.+2      	; 0x5162 <serial_send_bytes+0x92>
    5160:	82 e0       	ldi	r24, 0x02	; 2
    5162:	df 91       	pop	r29
    5164:	cf 91       	pop	r28
    5166:	1f 91       	pop	r17
    5168:	0f 91       	pop	r16
    516a:	ff 90       	pop	r15
    516c:	ef 90       	pop	r14
    516e:	08 95       	ret

00005170 <serial_get_byte>:
    5170:	dc 01       	movw	r26, r24
    5172:	14 96       	adiw	r26, 0x04	; 4
    5174:	ed 91       	ld	r30, X+
    5176:	fc 91       	ld	r31, X
    5178:	15 97       	sbiw	r26, 0x05	; 5
    517a:	93 81       	ldd	r25, Z+3	; 0x03
    517c:	82 81       	ldd	r24, Z+2	; 0x02
    517e:	98 17       	cp	r25, r24
    5180:	89 f0       	breq	.+34     	; 0x51a4 <serial_get_byte+0x34>
    5182:	92 81       	ldd	r25, Z+2	; 0x02
    5184:	85 81       	ldd	r24, Z+5	; 0x05
    5186:	86 95       	lsr	r24
    5188:	89 23       	and	r24, r25
    518a:	a0 81       	ld	r26, Z
    518c:	b1 81       	ldd	r27, Z+1	; 0x01
    518e:	a8 0f       	add	r26, r24
    5190:	b1 1d       	adc	r27, r1
    5192:	8c 91       	ld	r24, X
    5194:	db 01       	movw	r26, r22
    5196:	8c 93       	st	X, r24
    5198:	9f 5f       	subi	r25, 0xFF	; 255
    519a:	85 81       	ldd	r24, Z+5	; 0x05
    519c:	98 23       	and	r25, r24
    519e:	92 83       	std	Z+2, r25	; 0x02
    51a0:	80 e0       	ldi	r24, 0x00	; 0
    51a2:	08 95       	ret
    51a4:	83 e0       	ldi	r24, 0x03	; 3
    51a6:	08 95       	ret

000051a8 <__vector_25>:
    51a8:	1f 92       	push	r1
    51aa:	0f 92       	push	r0
    51ac:	0f b6       	in	r0, 0x3f	; 63
    51ae:	0f 92       	push	r0
    51b0:	11 24       	eor	r1, r1
    51b2:	0b b6       	in	r0, 0x3b	; 59
    51b4:	0f 92       	push	r0
    51b6:	2f 93       	push	r18
    51b8:	3f 93       	push	r19
    51ba:	4f 93       	push	r20
    51bc:	5f 93       	push	r21
    51be:	6f 93       	push	r22
    51c0:	7f 93       	push	r23
    51c2:	8f 93       	push	r24
    51c4:	9f 93       	push	r25
    51c6:	af 93       	push	r26
    51c8:	bf 93       	push	r27
    51ca:	cf 93       	push	r28
    51cc:	df 93       	push	r29
    51ce:	ef 93       	push	r30
    51d0:	ff 93       	push	r31
    51d2:	a0 91 1a 1a 	lds	r26, 0x1A1A	; 0x801a1a <_ser_handle>
    51d6:	b0 91 1b 1a 	lds	r27, 0x1A1B	; 0x801a1b <_ser_handle+0x1>
    51da:	10 97       	sbiw	r26, 0x00	; 0
    51dc:	11 f1       	breq	.+68     	; 0x5222 <__vector_25+0x7a>
    51de:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    51e2:	14 96       	adiw	r26, 0x04	; 4
    51e4:	ed 91       	ld	r30, X+
    51e6:	fc 91       	ld	r31, X
    51e8:	15 97       	sbiw	r26, 0x05	; 5
    51ea:	93 81       	ldd	r25, Z+3	; 0x03
    51ec:	82 81       	ldd	r24, Z+2	; 0x02
    51ee:	25 81       	ldd	r18, Z+5	; 0x05
    51f0:	98 1b       	sub	r25, r24
    51f2:	92 23       	and	r25, r18
    51f4:	84 81       	ldd	r24, Z+4	; 0x04
    51f6:	98 17       	cp	r25, r24
    51f8:	61 f0       	breq	.+24     	; 0x5212 <__vector_25+0x6a>
    51fa:	83 81       	ldd	r24, Z+3	; 0x03
    51fc:	26 95       	lsr	r18
    51fe:	28 23       	and	r18, r24
    5200:	c0 81       	ld	r28, Z
    5202:	d1 81       	ldd	r29, Z+1	; 0x01
    5204:	c2 0f       	add	r28, r18
    5206:	d1 1d       	adc	r29, r1
    5208:	68 83       	st	Y, r22
    520a:	8f 5f       	subi	r24, 0xFF	; 255
    520c:	95 81       	ldd	r25, Z+5	; 0x05
    520e:	89 23       	and	r24, r25
    5210:	83 83       	std	Z+3, r24	; 0x03
    5212:	16 96       	adiw	r26, 0x06	; 6
    5214:	ed 91       	ld	r30, X+
    5216:	fc 91       	ld	r31, X
    5218:	17 97       	sbiw	r26, 0x07	; 7
    521a:	30 97       	sbiw	r30, 0x00	; 0
    521c:	11 f0       	breq	.+4      	; 0x5222 <__vector_25+0x7a>
    521e:	cd 01       	movw	r24, r26
    5220:	19 95       	eicall
    5222:	ff 91       	pop	r31
    5224:	ef 91       	pop	r30
    5226:	df 91       	pop	r29
    5228:	cf 91       	pop	r28
    522a:	bf 91       	pop	r27
    522c:	af 91       	pop	r26
    522e:	9f 91       	pop	r25
    5230:	8f 91       	pop	r24
    5232:	7f 91       	pop	r23
    5234:	6f 91       	pop	r22
    5236:	5f 91       	pop	r21
    5238:	4f 91       	pop	r20
    523a:	3f 91       	pop	r19
    523c:	2f 91       	pop	r18
    523e:	0f 90       	pop	r0
    5240:	0b be       	out	0x3b, r0	; 59
    5242:	0f 90       	pop	r0
    5244:	0f be       	out	0x3f, r0	; 63
    5246:	0f 90       	pop	r0
    5248:	1f 90       	pop	r1
    524a:	18 95       	reti

0000524c <__vector_26>:
    524c:	1f 92       	push	r1
    524e:	0f 92       	push	r0
    5250:	0f b6       	in	r0, 0x3f	; 63
    5252:	0f 92       	push	r0
    5254:	11 24       	eor	r1, r1
    5256:	0b b6       	in	r0, 0x3b	; 59
    5258:	0f 92       	push	r0
    525a:	2f 93       	push	r18
    525c:	8f 93       	push	r24
    525e:	9f 93       	push	r25
    5260:	af 93       	push	r26
    5262:	bf 93       	push	r27
    5264:	ef 93       	push	r30
    5266:	ff 93       	push	r31
    5268:	e0 91 1a 1a 	lds	r30, 0x1A1A	; 0x801a1a <_ser_handle>
    526c:	f0 91 1b 1a 	lds	r31, 0x1A1B	; 0x801a1b <_ser_handle+0x1>
    5270:	30 97       	sbiw	r30, 0x00	; 0
    5272:	b9 f0       	breq	.+46     	; 0x52a2 <__vector_26+0x56>
    5274:	02 80       	ldd	r0, Z+2	; 0x02
    5276:	f3 81       	ldd	r31, Z+3	; 0x03
    5278:	e0 2d       	mov	r30, r0
    527a:	93 81       	ldd	r25, Z+3	; 0x03
    527c:	82 81       	ldd	r24, Z+2	; 0x02
    527e:	98 17       	cp	r25, r24
    5280:	b1 f0       	breq	.+44     	; 0x52ae <__vector_26+0x62>
    5282:	92 81       	ldd	r25, Z+2	; 0x02
    5284:	85 81       	ldd	r24, Z+5	; 0x05
    5286:	28 2f       	mov	r18, r24
    5288:	26 95       	lsr	r18
    528a:	29 23       	and	r18, r25
    528c:	a0 81       	ld	r26, Z
    528e:	b1 81       	ldd	r27, Z+1	; 0x01
    5290:	a2 0f       	add	r26, r18
    5292:	b1 1d       	adc	r27, r1
    5294:	2c 91       	ld	r18, X
    5296:	9f 5f       	subi	r25, 0xFF	; 255
    5298:	89 23       	and	r24, r25
    529a:	82 83       	std	Z+2, r24	; 0x02
    529c:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    52a0:	0b c0       	rjmp	.+22     	; 0x52b8 <__vector_26+0x6c>
    52a2:	e1 ec       	ldi	r30, 0xC1	; 193
    52a4:	f0 e0       	ldi	r31, 0x00	; 0
    52a6:	80 81       	ld	r24, Z
    52a8:	8f 7d       	andi	r24, 0xDF	; 223
    52aa:	80 83       	st	Z, r24
    52ac:	05 c0       	rjmp	.+10     	; 0x52b8 <__vector_26+0x6c>
    52ae:	e1 ec       	ldi	r30, 0xC1	; 193
    52b0:	f0 e0       	ldi	r31, 0x00	; 0
    52b2:	80 81       	ld	r24, Z
    52b4:	8f 7d       	andi	r24, 0xDF	; 223
    52b6:	80 83       	st	Z, r24
    52b8:	ff 91       	pop	r31
    52ba:	ef 91       	pop	r30
    52bc:	bf 91       	pop	r27
    52be:	af 91       	pop	r26
    52c0:	9f 91       	pop	r25
    52c2:	8f 91       	pop	r24
    52c4:	2f 91       	pop	r18
    52c6:	0f 90       	pop	r0
    52c8:	0b be       	out	0x3b, r0	; 59
    52ca:	0f 90       	pop	r0
    52cc:	0f be       	out	0x3f, r0	; 63
    52ce:	0f 90       	pop	r0
    52d0:	1f 90       	pop	r1
    52d2:	18 95       	reti

000052d4 <__vector_36>:
    52d4:	1f 92       	push	r1
    52d6:	0f 92       	push	r0
    52d8:	0f b6       	in	r0, 0x3f	; 63
    52da:	0f 92       	push	r0
    52dc:	11 24       	eor	r1, r1
    52de:	0b b6       	in	r0, 0x3b	; 59
    52e0:	0f 92       	push	r0
    52e2:	2f 93       	push	r18
    52e4:	3f 93       	push	r19
    52e6:	4f 93       	push	r20
    52e8:	5f 93       	push	r21
    52ea:	6f 93       	push	r22
    52ec:	7f 93       	push	r23
    52ee:	8f 93       	push	r24
    52f0:	9f 93       	push	r25
    52f2:	af 93       	push	r26
    52f4:	bf 93       	push	r27
    52f6:	cf 93       	push	r28
    52f8:	df 93       	push	r29
    52fa:	ef 93       	push	r30
    52fc:	ff 93       	push	r31
    52fe:	a0 91 1c 1a 	lds	r26, 0x1A1C	; 0x801a1c <_ser_handle+0x2>
    5302:	b0 91 1d 1a 	lds	r27, 0x1A1D	; 0x801a1d <_ser_handle+0x3>
    5306:	10 97       	sbiw	r26, 0x00	; 0
    5308:	11 f1       	breq	.+68     	; 0x534e <__vector_36+0x7a>
    530a:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    530e:	14 96       	adiw	r26, 0x04	; 4
    5310:	ed 91       	ld	r30, X+
    5312:	fc 91       	ld	r31, X
    5314:	15 97       	sbiw	r26, 0x05	; 5
    5316:	93 81       	ldd	r25, Z+3	; 0x03
    5318:	82 81       	ldd	r24, Z+2	; 0x02
    531a:	25 81       	ldd	r18, Z+5	; 0x05
    531c:	98 1b       	sub	r25, r24
    531e:	92 23       	and	r25, r18
    5320:	84 81       	ldd	r24, Z+4	; 0x04
    5322:	98 17       	cp	r25, r24
    5324:	61 f0       	breq	.+24     	; 0x533e <__vector_36+0x6a>
    5326:	83 81       	ldd	r24, Z+3	; 0x03
    5328:	26 95       	lsr	r18
    532a:	28 23       	and	r18, r24
    532c:	c0 81       	ld	r28, Z
    532e:	d1 81       	ldd	r29, Z+1	; 0x01
    5330:	c2 0f       	add	r28, r18
    5332:	d1 1d       	adc	r29, r1
    5334:	68 83       	st	Y, r22
    5336:	8f 5f       	subi	r24, 0xFF	; 255
    5338:	95 81       	ldd	r25, Z+5	; 0x05
    533a:	89 23       	and	r24, r25
    533c:	83 83       	std	Z+3, r24	; 0x03
    533e:	16 96       	adiw	r26, 0x06	; 6
    5340:	ed 91       	ld	r30, X+
    5342:	fc 91       	ld	r31, X
    5344:	17 97       	sbiw	r26, 0x07	; 7
    5346:	30 97       	sbiw	r30, 0x00	; 0
    5348:	11 f0       	breq	.+4      	; 0x534e <__vector_36+0x7a>
    534a:	cd 01       	movw	r24, r26
    534c:	19 95       	eicall
    534e:	ff 91       	pop	r31
    5350:	ef 91       	pop	r30
    5352:	df 91       	pop	r29
    5354:	cf 91       	pop	r28
    5356:	bf 91       	pop	r27
    5358:	af 91       	pop	r26
    535a:	9f 91       	pop	r25
    535c:	8f 91       	pop	r24
    535e:	7f 91       	pop	r23
    5360:	6f 91       	pop	r22
    5362:	5f 91       	pop	r21
    5364:	4f 91       	pop	r20
    5366:	3f 91       	pop	r19
    5368:	2f 91       	pop	r18
    536a:	0f 90       	pop	r0
    536c:	0b be       	out	0x3b, r0	; 59
    536e:	0f 90       	pop	r0
    5370:	0f be       	out	0x3f, r0	; 63
    5372:	0f 90       	pop	r0
    5374:	1f 90       	pop	r1
    5376:	18 95       	reti

00005378 <__vector_37>:
    5378:	1f 92       	push	r1
    537a:	0f 92       	push	r0
    537c:	0f b6       	in	r0, 0x3f	; 63
    537e:	0f 92       	push	r0
    5380:	11 24       	eor	r1, r1
    5382:	0b b6       	in	r0, 0x3b	; 59
    5384:	0f 92       	push	r0
    5386:	2f 93       	push	r18
    5388:	8f 93       	push	r24
    538a:	9f 93       	push	r25
    538c:	af 93       	push	r26
    538e:	bf 93       	push	r27
    5390:	ef 93       	push	r30
    5392:	ff 93       	push	r31
    5394:	e0 91 1c 1a 	lds	r30, 0x1A1C	; 0x801a1c <_ser_handle+0x2>
    5398:	f0 91 1d 1a 	lds	r31, 0x1A1D	; 0x801a1d <_ser_handle+0x3>
    539c:	30 97       	sbiw	r30, 0x00	; 0
    539e:	b9 f0       	breq	.+46     	; 0x53ce <__vector_37+0x56>
    53a0:	02 80       	ldd	r0, Z+2	; 0x02
    53a2:	f3 81       	ldd	r31, Z+3	; 0x03
    53a4:	e0 2d       	mov	r30, r0
    53a6:	93 81       	ldd	r25, Z+3	; 0x03
    53a8:	82 81       	ldd	r24, Z+2	; 0x02
    53aa:	98 17       	cp	r25, r24
    53ac:	b1 f0       	breq	.+44     	; 0x53da <__vector_37+0x62>
    53ae:	92 81       	ldd	r25, Z+2	; 0x02
    53b0:	85 81       	ldd	r24, Z+5	; 0x05
    53b2:	28 2f       	mov	r18, r24
    53b4:	26 95       	lsr	r18
    53b6:	29 23       	and	r18, r25
    53b8:	a0 81       	ld	r26, Z
    53ba:	b1 81       	ldd	r27, Z+1	; 0x01
    53bc:	a2 0f       	add	r26, r18
    53be:	b1 1d       	adc	r27, r1
    53c0:	2c 91       	ld	r18, X
    53c2:	9f 5f       	subi	r25, 0xFF	; 255
    53c4:	89 23       	and	r24, r25
    53c6:	82 83       	std	Z+2, r24	; 0x02
    53c8:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    53cc:	0b c0       	rjmp	.+22     	; 0x53e4 <__vector_37+0x6c>
    53ce:	e9 ec       	ldi	r30, 0xC9	; 201
    53d0:	f0 e0       	ldi	r31, 0x00	; 0
    53d2:	80 81       	ld	r24, Z
    53d4:	8f 7d       	andi	r24, 0xDF	; 223
    53d6:	80 83       	st	Z, r24
    53d8:	05 c0       	rjmp	.+10     	; 0x53e4 <__vector_37+0x6c>
    53da:	e9 ec       	ldi	r30, 0xC9	; 201
    53dc:	f0 e0       	ldi	r31, 0x00	; 0
    53de:	80 81       	ld	r24, Z
    53e0:	8f 7d       	andi	r24, 0xDF	; 223
    53e2:	80 83       	st	Z, r24
    53e4:	ff 91       	pop	r31
    53e6:	ef 91       	pop	r30
    53e8:	bf 91       	pop	r27
    53ea:	af 91       	pop	r26
    53ec:	9f 91       	pop	r25
    53ee:	8f 91       	pop	r24
    53f0:	2f 91       	pop	r18
    53f2:	0f 90       	pop	r0
    53f4:	0b be       	out	0x3b, r0	; 59
    53f6:	0f 90       	pop	r0
    53f8:	0f be       	out	0x3f, r0	; 63
    53fa:	0f 90       	pop	r0
    53fc:	1f 90       	pop	r1
    53fe:	18 95       	reti

00005400 <__vector_51>:
    5400:	1f 92       	push	r1
    5402:	0f 92       	push	r0
    5404:	0f b6       	in	r0, 0x3f	; 63
    5406:	0f 92       	push	r0
    5408:	11 24       	eor	r1, r1
    540a:	0b b6       	in	r0, 0x3b	; 59
    540c:	0f 92       	push	r0
    540e:	2f 93       	push	r18
    5410:	3f 93       	push	r19
    5412:	4f 93       	push	r20
    5414:	5f 93       	push	r21
    5416:	6f 93       	push	r22
    5418:	7f 93       	push	r23
    541a:	8f 93       	push	r24
    541c:	9f 93       	push	r25
    541e:	af 93       	push	r26
    5420:	bf 93       	push	r27
    5422:	cf 93       	push	r28
    5424:	df 93       	push	r29
    5426:	ef 93       	push	r30
    5428:	ff 93       	push	r31
    542a:	a0 91 1e 1a 	lds	r26, 0x1A1E	; 0x801a1e <_ser_handle+0x4>
    542e:	b0 91 1f 1a 	lds	r27, 0x1A1F	; 0x801a1f <_ser_handle+0x5>
    5432:	10 97       	sbiw	r26, 0x00	; 0
    5434:	11 f1       	breq	.+68     	; 0x547a <__vector_51+0x7a>
    5436:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    543a:	14 96       	adiw	r26, 0x04	; 4
    543c:	ed 91       	ld	r30, X+
    543e:	fc 91       	ld	r31, X
    5440:	15 97       	sbiw	r26, 0x05	; 5
    5442:	93 81       	ldd	r25, Z+3	; 0x03
    5444:	82 81       	ldd	r24, Z+2	; 0x02
    5446:	25 81       	ldd	r18, Z+5	; 0x05
    5448:	98 1b       	sub	r25, r24
    544a:	92 23       	and	r25, r18
    544c:	84 81       	ldd	r24, Z+4	; 0x04
    544e:	98 17       	cp	r25, r24
    5450:	61 f0       	breq	.+24     	; 0x546a <__vector_51+0x6a>
    5452:	83 81       	ldd	r24, Z+3	; 0x03
    5454:	26 95       	lsr	r18
    5456:	28 23       	and	r18, r24
    5458:	c0 81       	ld	r28, Z
    545a:	d1 81       	ldd	r29, Z+1	; 0x01
    545c:	c2 0f       	add	r28, r18
    545e:	d1 1d       	adc	r29, r1
    5460:	68 83       	st	Y, r22
    5462:	8f 5f       	subi	r24, 0xFF	; 255
    5464:	95 81       	ldd	r25, Z+5	; 0x05
    5466:	89 23       	and	r24, r25
    5468:	83 83       	std	Z+3, r24	; 0x03
    546a:	16 96       	adiw	r26, 0x06	; 6
    546c:	ed 91       	ld	r30, X+
    546e:	fc 91       	ld	r31, X
    5470:	17 97       	sbiw	r26, 0x07	; 7
    5472:	30 97       	sbiw	r30, 0x00	; 0
    5474:	11 f0       	breq	.+4      	; 0x547a <__vector_51+0x7a>
    5476:	cd 01       	movw	r24, r26
    5478:	19 95       	eicall
    547a:	ff 91       	pop	r31
    547c:	ef 91       	pop	r30
    547e:	df 91       	pop	r29
    5480:	cf 91       	pop	r28
    5482:	bf 91       	pop	r27
    5484:	af 91       	pop	r26
    5486:	9f 91       	pop	r25
    5488:	8f 91       	pop	r24
    548a:	7f 91       	pop	r23
    548c:	6f 91       	pop	r22
    548e:	5f 91       	pop	r21
    5490:	4f 91       	pop	r20
    5492:	3f 91       	pop	r19
    5494:	2f 91       	pop	r18
    5496:	0f 90       	pop	r0
    5498:	0b be       	out	0x3b, r0	; 59
    549a:	0f 90       	pop	r0
    549c:	0f be       	out	0x3f, r0	; 63
    549e:	0f 90       	pop	r0
    54a0:	1f 90       	pop	r1
    54a2:	18 95       	reti

000054a4 <__vector_52>:
    54a4:	1f 92       	push	r1
    54a6:	0f 92       	push	r0
    54a8:	0f b6       	in	r0, 0x3f	; 63
    54aa:	0f 92       	push	r0
    54ac:	11 24       	eor	r1, r1
    54ae:	0b b6       	in	r0, 0x3b	; 59
    54b0:	0f 92       	push	r0
    54b2:	2f 93       	push	r18
    54b4:	8f 93       	push	r24
    54b6:	9f 93       	push	r25
    54b8:	af 93       	push	r26
    54ba:	bf 93       	push	r27
    54bc:	ef 93       	push	r30
    54be:	ff 93       	push	r31
    54c0:	e0 91 1e 1a 	lds	r30, 0x1A1E	; 0x801a1e <_ser_handle+0x4>
    54c4:	f0 91 1f 1a 	lds	r31, 0x1A1F	; 0x801a1f <_ser_handle+0x5>
    54c8:	30 97       	sbiw	r30, 0x00	; 0
    54ca:	b9 f0       	breq	.+46     	; 0x54fa <__vector_52+0x56>
    54cc:	02 80       	ldd	r0, Z+2	; 0x02
    54ce:	f3 81       	ldd	r31, Z+3	; 0x03
    54d0:	e0 2d       	mov	r30, r0
    54d2:	93 81       	ldd	r25, Z+3	; 0x03
    54d4:	82 81       	ldd	r24, Z+2	; 0x02
    54d6:	98 17       	cp	r25, r24
    54d8:	b1 f0       	breq	.+44     	; 0x5506 <__vector_52+0x62>
    54da:	92 81       	ldd	r25, Z+2	; 0x02
    54dc:	85 81       	ldd	r24, Z+5	; 0x05
    54de:	28 2f       	mov	r18, r24
    54e0:	26 95       	lsr	r18
    54e2:	29 23       	and	r18, r25
    54e4:	a0 81       	ld	r26, Z
    54e6:	b1 81       	ldd	r27, Z+1	; 0x01
    54e8:	a2 0f       	add	r26, r18
    54ea:	b1 1d       	adc	r27, r1
    54ec:	2c 91       	ld	r18, X
    54ee:	9f 5f       	subi	r25, 0xFF	; 255
    54f0:	89 23       	and	r24, r25
    54f2:	82 83       	std	Z+2, r24	; 0x02
    54f4:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    54f8:	0b c0       	rjmp	.+22     	; 0x5510 <__vector_52+0x6c>
    54fa:	e1 ed       	ldi	r30, 0xD1	; 209
    54fc:	f0 e0       	ldi	r31, 0x00	; 0
    54fe:	80 81       	ld	r24, Z
    5500:	8f 7d       	andi	r24, 0xDF	; 223
    5502:	80 83       	st	Z, r24
    5504:	05 c0       	rjmp	.+10     	; 0x5510 <__vector_52+0x6c>
    5506:	e1 ed       	ldi	r30, 0xD1	; 209
    5508:	f0 e0       	ldi	r31, 0x00	; 0
    550a:	80 81       	ld	r24, Z
    550c:	8f 7d       	andi	r24, 0xDF	; 223
    550e:	80 83       	st	Z, r24
    5510:	ff 91       	pop	r31
    5512:	ef 91       	pop	r30
    5514:	bf 91       	pop	r27
    5516:	af 91       	pop	r26
    5518:	9f 91       	pop	r25
    551a:	8f 91       	pop	r24
    551c:	2f 91       	pop	r18
    551e:	0f 90       	pop	r0
    5520:	0b be       	out	0x3b, r0	; 59
    5522:	0f 90       	pop	r0
    5524:	0f be       	out	0x3f, r0	; 63
    5526:	0f 90       	pop	r0
    5528:	1f 90       	pop	r1
    552a:	18 95       	reti

0000552c <__vector_54>:
    552c:	1f 92       	push	r1
    552e:	0f 92       	push	r0
    5530:	0f b6       	in	r0, 0x3f	; 63
    5532:	0f 92       	push	r0
    5534:	11 24       	eor	r1, r1
    5536:	0b b6       	in	r0, 0x3b	; 59
    5538:	0f 92       	push	r0
    553a:	2f 93       	push	r18
    553c:	3f 93       	push	r19
    553e:	4f 93       	push	r20
    5540:	5f 93       	push	r21
    5542:	6f 93       	push	r22
    5544:	7f 93       	push	r23
    5546:	8f 93       	push	r24
    5548:	9f 93       	push	r25
    554a:	af 93       	push	r26
    554c:	bf 93       	push	r27
    554e:	cf 93       	push	r28
    5550:	df 93       	push	r29
    5552:	ef 93       	push	r30
    5554:	ff 93       	push	r31
    5556:	a0 91 20 1a 	lds	r26, 0x1A20	; 0x801a20 <_ser_handle+0x6>
    555a:	b0 91 21 1a 	lds	r27, 0x1A21	; 0x801a21 <_ser_handle+0x7>
    555e:	10 97       	sbiw	r26, 0x00	; 0
    5560:	11 f1       	breq	.+68     	; 0x55a6 <__vector_54+0x7a>
    5562:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    5566:	14 96       	adiw	r26, 0x04	; 4
    5568:	ed 91       	ld	r30, X+
    556a:	fc 91       	ld	r31, X
    556c:	15 97       	sbiw	r26, 0x05	; 5
    556e:	93 81       	ldd	r25, Z+3	; 0x03
    5570:	82 81       	ldd	r24, Z+2	; 0x02
    5572:	25 81       	ldd	r18, Z+5	; 0x05
    5574:	98 1b       	sub	r25, r24
    5576:	92 23       	and	r25, r18
    5578:	84 81       	ldd	r24, Z+4	; 0x04
    557a:	98 17       	cp	r25, r24
    557c:	61 f0       	breq	.+24     	; 0x5596 <__vector_54+0x6a>
    557e:	83 81       	ldd	r24, Z+3	; 0x03
    5580:	26 95       	lsr	r18
    5582:	28 23       	and	r18, r24
    5584:	c0 81       	ld	r28, Z
    5586:	d1 81       	ldd	r29, Z+1	; 0x01
    5588:	c2 0f       	add	r28, r18
    558a:	d1 1d       	adc	r29, r1
    558c:	68 83       	st	Y, r22
    558e:	8f 5f       	subi	r24, 0xFF	; 255
    5590:	95 81       	ldd	r25, Z+5	; 0x05
    5592:	89 23       	and	r24, r25
    5594:	83 83       	std	Z+3, r24	; 0x03
    5596:	16 96       	adiw	r26, 0x06	; 6
    5598:	ed 91       	ld	r30, X+
    559a:	fc 91       	ld	r31, X
    559c:	17 97       	sbiw	r26, 0x07	; 7
    559e:	30 97       	sbiw	r30, 0x00	; 0
    55a0:	11 f0       	breq	.+4      	; 0x55a6 <__vector_54+0x7a>
    55a2:	cd 01       	movw	r24, r26
    55a4:	19 95       	eicall
    55a6:	ff 91       	pop	r31
    55a8:	ef 91       	pop	r30
    55aa:	df 91       	pop	r29
    55ac:	cf 91       	pop	r28
    55ae:	bf 91       	pop	r27
    55b0:	af 91       	pop	r26
    55b2:	9f 91       	pop	r25
    55b4:	8f 91       	pop	r24
    55b6:	7f 91       	pop	r23
    55b8:	6f 91       	pop	r22
    55ba:	5f 91       	pop	r21
    55bc:	4f 91       	pop	r20
    55be:	3f 91       	pop	r19
    55c0:	2f 91       	pop	r18
    55c2:	0f 90       	pop	r0
    55c4:	0b be       	out	0x3b, r0	; 59
    55c6:	0f 90       	pop	r0
    55c8:	0f be       	out	0x3f, r0	; 63
    55ca:	0f 90       	pop	r0
    55cc:	1f 90       	pop	r1
    55ce:	18 95       	reti

000055d0 <__vector_55>:
    55d0:	1f 92       	push	r1
    55d2:	0f 92       	push	r0
    55d4:	0f b6       	in	r0, 0x3f	; 63
    55d6:	0f 92       	push	r0
    55d8:	11 24       	eor	r1, r1
    55da:	0b b6       	in	r0, 0x3b	; 59
    55dc:	0f 92       	push	r0
    55de:	2f 93       	push	r18
    55e0:	8f 93       	push	r24
    55e2:	9f 93       	push	r25
    55e4:	af 93       	push	r26
    55e6:	bf 93       	push	r27
    55e8:	ef 93       	push	r30
    55ea:	ff 93       	push	r31
    55ec:	e0 91 20 1a 	lds	r30, 0x1A20	; 0x801a20 <_ser_handle+0x6>
    55f0:	f0 91 21 1a 	lds	r31, 0x1A21	; 0x801a21 <_ser_handle+0x7>
    55f4:	30 97       	sbiw	r30, 0x00	; 0
    55f6:	b9 f0       	breq	.+46     	; 0x5626 <__vector_55+0x56>
    55f8:	02 80       	ldd	r0, Z+2	; 0x02
    55fa:	f3 81       	ldd	r31, Z+3	; 0x03
    55fc:	e0 2d       	mov	r30, r0
    55fe:	93 81       	ldd	r25, Z+3	; 0x03
    5600:	82 81       	ldd	r24, Z+2	; 0x02
    5602:	98 17       	cp	r25, r24
    5604:	b1 f0       	breq	.+44     	; 0x5632 <__vector_55+0x62>
    5606:	92 81       	ldd	r25, Z+2	; 0x02
    5608:	85 81       	ldd	r24, Z+5	; 0x05
    560a:	28 2f       	mov	r18, r24
    560c:	26 95       	lsr	r18
    560e:	29 23       	and	r18, r25
    5610:	a0 81       	ld	r26, Z
    5612:	b1 81       	ldd	r27, Z+1	; 0x01
    5614:	a2 0f       	add	r26, r18
    5616:	b1 1d       	adc	r27, r1
    5618:	2c 91       	ld	r18, X
    561a:	9f 5f       	subi	r25, 0xFF	; 255
    561c:	89 23       	and	r24, r25
    561e:	82 83       	std	Z+2, r24	; 0x02
    5620:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    5624:	0b c0       	rjmp	.+22     	; 0x563c <__vector_55+0x6c>
    5626:	e1 e3       	ldi	r30, 0x31	; 49
    5628:	f1 e0       	ldi	r31, 0x01	; 1
    562a:	80 81       	ld	r24, Z
    562c:	8f 7d       	andi	r24, 0xDF	; 223
    562e:	80 83       	st	Z, r24
    5630:	05 c0       	rjmp	.+10     	; 0x563c <__vector_55+0x6c>
    5632:	e1 e3       	ldi	r30, 0x31	; 49
    5634:	f1 e0       	ldi	r31, 0x01	; 1
    5636:	80 81       	ld	r24, Z
    5638:	8f 7d       	andi	r24, 0xDF	; 223
    563a:	80 83       	st	Z, r24
    563c:	ff 91       	pop	r31
    563e:	ef 91       	pop	r30
    5640:	bf 91       	pop	r27
    5642:	af 91       	pop	r26
    5644:	9f 91       	pop	r25
    5646:	8f 91       	pop	r24
    5648:	2f 91       	pop	r18
    564a:	0f 90       	pop	r0
    564c:	0b be       	out	0x3b, r0	; 59
    564e:	0f 90       	pop	r0
    5650:	0f be       	out	0x3f, r0	; 63
    5652:	0f 90       	pop	r0
    5654:	1f 90       	pop	r1
    5656:	18 95       	reti

00005658 <usart_getchar>:
    5658:	cf 93       	push	r28
    565a:	df 93       	push	r29
    565c:	1f 92       	push	r1
    565e:	cd b7       	in	r28, 0x3d	; 61
    5660:	de b7       	in	r29, 0x3e	; 62
    5662:	be 01       	movw	r22, r28
    5664:	6f 5f       	subi	r22, 0xFF	; 255
    5666:	7f 4f       	sbci	r23, 0xFF	; 255
    5668:	80 91 22 1a 	lds	r24, 0x1A22	; 0x801a22 <_com_serial_instance>
    566c:	90 91 23 1a 	lds	r25, 0x1A23	; 0x801a23 <_com_serial_instance+0x1>
    5670:	7f dd       	rcall	.-1282   	; 0x5170 <serial_get_byte>
    5672:	81 11       	cpse	r24, r1
    5674:	f6 cf       	rjmp	.-20     	; 0x5662 <usart_getchar+0xa>
    5676:	89 81       	ldd	r24, Y+1	; 0x01
    5678:	90 e0       	ldi	r25, 0x00	; 0
    567a:	0f 90       	pop	r0
    567c:	df 91       	pop	r29
    567e:	cf 91       	pop	r28
    5680:	08 95       	ret

00005682 <usart_putchar>:
    5682:	68 2f       	mov	r22, r24
    5684:	80 91 22 1a 	lds	r24, 0x1A22	; 0x801a22 <_com_serial_instance>
    5688:	90 91 23 1a 	lds	r25, 0x1A23	; 0x801a23 <_com_serial_instance+0x1>
    568c:	fc dc       	rcall	.-1544   	; 0x5086 <serial_send_byte>
    568e:	80 e0       	ldi	r24, 0x00	; 0
    5690:	90 e0       	ldi	r25, 0x00	; 0
    5692:	08 95       	ret

00005694 <stdioCreate>:
    5694:	8f 92       	push	r8
    5696:	9f 92       	push	r9
    5698:	af 92       	push	r10
    569a:	cf 92       	push	r12
    569c:	ef 92       	push	r14
    569e:	0f 93       	push	r16
    56a0:	81 2c       	mov	r8, r1
    56a2:	91 2c       	mov	r9, r1
    56a4:	68 94       	set
    56a6:	aa 24       	eor	r10, r10
    56a8:	a7 f8       	bld	r10, 7
    56aa:	68 94       	set
    56ac:	cc 24       	eor	r12, r12
    56ae:	c7 f8       	bld	r12, 7
    56b0:	e1 2c       	mov	r14, r1
    56b2:	00 e0       	ldi	r16, 0x00	; 0
    56b4:	23 e0       	ldi	r18, 0x03	; 3
    56b6:	40 e0       	ldi	r20, 0x00	; 0
    56b8:	51 ee       	ldi	r21, 0xE1	; 225
    56ba:	60 e0       	ldi	r22, 0x00	; 0
    56bc:	70 e0       	ldi	r23, 0x00	; 0
    56be:	4d dc       	rcall	.-1894   	; 0x4f5a <serial_new_instance>
    56c0:	90 93 23 1a 	sts	0x1A23, r25	; 0x801a23 <_com_serial_instance+0x1>
    56c4:	80 93 22 1a 	sts	0x1A22, r24	; 0x801a22 <_com_serial_instance>
    56c8:	eb e6       	ldi	r30, 0x6B	; 107
    56ca:	fa e1       	ldi	r31, 0x1A	; 26
    56cc:	86 e1       	ldi	r24, 0x16	; 22
    56ce:	92 e0       	ldi	r25, 0x02	; 2
    56d0:	91 83       	std	Z+1, r25	; 0x01
    56d2:	80 83       	st	Z, r24
    56d4:	93 83       	std	Z+3, r25	; 0x03
    56d6:	82 83       	std	Z+2, r24	; 0x02
    56d8:	0f 91       	pop	r16
    56da:	ef 90       	pop	r14
    56dc:	cf 90       	pop	r12
    56de:	af 90       	pop	r10
    56e0:	9f 90       	pop	r9
    56e2:	8f 90       	pop	r8
    56e4:	08 95       	ret

000056e6 <_initTwiInterface>:
    56e6:	80 91 32 1a 	lds	r24, 0x1A32	; 0x801a32 <_twiIsInitiated>
    56ea:	81 11       	cpse	r24, r1
    56ec:	0c c0       	rjmp	.+24     	; 0x5706 <_initTwiInterface+0x20>
    56ee:	8c e0       	ldi	r24, 0x0C	; 12
    56f0:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    56f4:	8f ef       	ldi	r24, 0xFF	; 255
    56f6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    56fa:	84 e0       	ldi	r24, 0x04	; 4
    56fc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    5700:	81 e0       	ldi	r24, 0x01	; 1
    5702:	80 93 32 1a 	sts	0x1A32, r24	; 0x801a32 <_twiIsInitiated>
    5706:	08 95       	ret

00005708 <twiCreate>:
    5708:	af 92       	push	r10
    570a:	bf 92       	push	r11
    570c:	cf 92       	push	r12
    570e:	df 92       	push	r13
    5710:	ef 92       	push	r14
    5712:	ff 92       	push	r15
    5714:	0f 93       	push	r16
    5716:	1f 93       	push	r17
    5718:	cf 93       	push	r28
    571a:	df 93       	push	r29
    571c:	a8 2e       	mov	r10, r24
    571e:	b6 2e       	mov	r11, r22
    5720:	69 01       	movw	r12, r18
    5722:	7a 01       	movw	r14, r20
    5724:	84 e0       	ldi	r24, 0x04	; 4
    5726:	90 e0       	ldi	r25, 0x00	; 0
    5728:	f2 d3       	rcall	.+2020   	; 0x5f0e <malloc>
    572a:	ec 01       	movw	r28, r24
    572c:	89 2b       	or	r24, r25
    572e:	61 f1       	breq	.+88     	; 0x5788 <twiCreate+0x80>
    5730:	a8 82       	st	Y, r10
    5732:	81 e0       	ldi	r24, 0x01	; 1
    5734:	b8 12       	cpse	r11, r24
    5736:	12 c0       	rjmp	.+36     	; 0x575c <twiCreate+0x54>
    5738:	c7 01       	movw	r24, r14
    573a:	b6 01       	movw	r22, r12
    573c:	20 ea       	ldi	r18, 0xA0	; 160
    573e:	36 e8       	ldi	r19, 0x86	; 134
    5740:	41 e0       	ldi	r20, 0x01	; 1
    5742:	50 e0       	ldi	r21, 0x00	; 0
    5744:	8c d3       	rcall	.+1816   	; 0x5e5e <__udivmodsi4>
    5746:	da 01       	movw	r26, r20
    5748:	c9 01       	movw	r24, r18
    574a:	40 97       	sbiw	r24, 0x10	; 16
    574c:	a1 09       	sbc	r26, r1
    574e:	b1 09       	sbc	r27, r1
    5750:	b6 95       	lsr	r27
    5752:	a7 95       	ror	r26
    5754:	97 95       	ror	r25
    5756:	87 95       	ror	r24
    5758:	89 83       	std	Y+1, r24	; 0x01
    575a:	11 c0       	rjmp	.+34     	; 0x577e <twiCreate+0x76>
    575c:	c7 01       	movw	r24, r14
    575e:	b6 01       	movw	r22, r12
    5760:	20 e8       	ldi	r18, 0x80	; 128
    5762:	3a e1       	ldi	r19, 0x1A	; 26
    5764:	46 e0       	ldi	r20, 0x06	; 6
    5766:	50 e0       	ldi	r21, 0x00	; 0
    5768:	7a d3       	rcall	.+1780   	; 0x5e5e <__udivmodsi4>
    576a:	da 01       	movw	r26, r20
    576c:	c9 01       	movw	r24, r18
    576e:	40 97       	sbiw	r24, 0x10	; 16
    5770:	a1 09       	sbc	r26, r1
    5772:	b1 09       	sbc	r27, r1
    5774:	b6 95       	lsr	r27
    5776:	a7 95       	ror	r26
    5778:	97 95       	ror	r25
    577a:	87 95       	ror	r24
    577c:	89 83       	std	Y+1, r24	; 0x01
    577e:	1b 83       	std	Y+3, r17	; 0x03
    5780:	0a 83       	std	Y+2, r16	; 0x02
    5782:	8c 2f       	mov	r24, r28
    5784:	9d 2f       	mov	r25, r29
    5786:	02 c0       	rjmp	.+4      	; 0x578c <twiCreate+0x84>
    5788:	80 e0       	ldi	r24, 0x00	; 0
    578a:	90 e0       	ldi	r25, 0x00	; 0
    578c:	df 91       	pop	r29
    578e:	cf 91       	pop	r28
    5790:	1f 91       	pop	r17
    5792:	0f 91       	pop	r16
    5794:	ff 90       	pop	r15
    5796:	ef 90       	pop	r14
    5798:	df 90       	pop	r13
    579a:	cf 90       	pop	r12
    579c:	bf 90       	pop	r11
    579e:	af 90       	pop	r10
    57a0:	08 95       	ret

000057a2 <twiIsBusy>:
    57a2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    57a6:	81 70       	andi	r24, 0x01	; 1
    57a8:	08 95       	ret

000057aa <twiTransmit>:
    57aa:	ff 92       	push	r15
    57ac:	0f 93       	push	r16
    57ae:	1f 93       	push	r17
    57b0:	cf 93       	push	r28
    57b2:	df 93       	push	r29
    57b4:	00 97       	sbiw	r24, 0x00	; 0
    57b6:	d1 f1       	breq	.+116    	; 0x582c <twiTransmit+0x82>
    57b8:	4a 30       	cpi	r20, 0x0A	; 10
    57ba:	d0 f5       	brcc	.+116    	; 0x5830 <twiTransmit+0x86>
    57bc:	f4 2e       	mov	r15, r20
    57be:	8b 01       	movw	r16, r22
    57c0:	ec 01       	movw	r28, r24
    57c2:	ef df       	rcall	.-34     	; 0x57a2 <twiIsBusy>
    57c4:	81 11       	cpse	r24, r1
    57c6:	36 c0       	rjmp	.+108    	; 0x5834 <twiTransmit+0x8a>
    57c8:	80 91 25 1a 	lds	r24, 0x1A25	; 0x801a25 <_twiCurrentHandler>
    57cc:	90 91 26 1a 	lds	r25, 0x1A26	; 0x801a26 <_twiCurrentHandler+0x1>
    57d0:	c8 17       	cp	r28, r24
    57d2:	d9 07       	cpc	r29, r25
    57d4:	41 f0       	breq	.+16     	; 0x57e6 <twiTransmit+0x3c>
    57d6:	87 df       	rcall	.-242    	; 0x56e6 <_initTwiInterface>
    57d8:	89 81       	ldd	r24, Y+1	; 0x01
    57da:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    57de:	d0 93 26 1a 	sts	0x1A26, r29	; 0x801a26 <_twiCurrentHandler+0x1>
    57e2:	c0 93 25 1a 	sts	0x1A25, r28	; 0x801a25 <_twiCurrentHandler>
    57e6:	81 e0       	ldi	r24, 0x01	; 1
    57e8:	8f 0d       	add	r24, r15
    57ea:	80 93 27 1a 	sts	0x1A27, r24	; 0x801a27 <_twiMessageLen>
    57ee:	88 81       	ld	r24, Y
    57f0:	88 0f       	add	r24, r24
    57f2:	80 93 28 1a 	sts	0x1A28, r24	; 0x801a28 <_twiMessageBuffer>
    57f6:	ff 20       	and	r15, r15
    57f8:	89 f0       	breq	.+34     	; 0x581c <twiTransmit+0x72>
    57fa:	f8 01       	movw	r30, r16
    57fc:	a9 e2       	ldi	r26, 0x29	; 41
    57fe:	ba e1       	ldi	r27, 0x1A	; 26
    5800:	4f ef       	ldi	r20, 0xFF	; 255
    5802:	4f 0d       	add	r20, r15
    5804:	64 2f       	mov	r22, r20
    5806:	70 e0       	ldi	r23, 0x00	; 0
    5808:	cb 01       	movw	r24, r22
    580a:	01 96       	adiw	r24, 0x01	; 1
    580c:	b8 01       	movw	r22, r16
    580e:	68 0f       	add	r22, r24
    5810:	79 1f       	adc	r23, r25
    5812:	81 91       	ld	r24, Z+
    5814:	8d 93       	st	X+, r24
    5816:	e6 17       	cp	r30, r22
    5818:	f7 07       	cpc	r31, r23
    581a:	d9 f7       	brne	.-10     	; 0x5812 <twiTransmit+0x68>
    581c:	88 ef       	ldi	r24, 0xF8	; 248
    581e:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <_twiCurrentState>
    5822:	85 ea       	ldi	r24, 0xA5	; 165
    5824:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    5828:	84 e0       	ldi	r24, 0x04	; 4
    582a:	05 c0       	rjmp	.+10     	; 0x5836 <twiTransmit+0x8c>
    582c:	86 e0       	ldi	r24, 0x06	; 6
    582e:	03 c0       	rjmp	.+6      	; 0x5836 <twiTransmit+0x8c>
    5830:	87 e0       	ldi	r24, 0x07	; 7
    5832:	01 c0       	rjmp	.+2      	; 0x5836 <twiTransmit+0x8c>
    5834:	82 e0       	ldi	r24, 0x02	; 2
    5836:	df 91       	pop	r29
    5838:	cf 91       	pop	r28
    583a:	1f 91       	pop	r17
    583c:	0f 91       	pop	r16
    583e:	ff 90       	pop	r15
    5840:	08 95       	ret

00005842 <twiReceive>:
    5842:	1f 93       	push	r17
    5844:	cf 93       	push	r28
    5846:	df 93       	push	r29
    5848:	00 97       	sbiw	r24, 0x00	; 0
    584a:	29 f1       	breq	.+74     	; 0x5896 <twiReceive+0x54>
    584c:	6b 30       	cpi	r22, 0x0B	; 11
    584e:	28 f5       	brcc	.+74     	; 0x589a <twiReceive+0x58>
    5850:	16 2f       	mov	r17, r22
    5852:	ec 01       	movw	r28, r24
    5854:	a6 df       	rcall	.-180    	; 0x57a2 <twiIsBusy>
    5856:	81 11       	cpse	r24, r1
    5858:	22 c0       	rjmp	.+68     	; 0x589e <twiReceive+0x5c>
    585a:	80 91 25 1a 	lds	r24, 0x1A25	; 0x801a25 <_twiCurrentHandler>
    585e:	90 91 26 1a 	lds	r25, 0x1A26	; 0x801a26 <_twiCurrentHandler+0x1>
    5862:	c8 17       	cp	r28, r24
    5864:	d9 07       	cpc	r29, r25
    5866:	41 f0       	breq	.+16     	; 0x5878 <twiReceive+0x36>
    5868:	3e df       	rcall	.-388    	; 0x56e6 <_initTwiInterface>
    586a:	89 81       	ldd	r24, Y+1	; 0x01
    586c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    5870:	d0 93 26 1a 	sts	0x1A26, r29	; 0x801a26 <_twiCurrentHandler+0x1>
    5874:	c0 93 25 1a 	sts	0x1A25, r28	; 0x801a25 <_twiCurrentHandler>
    5878:	10 93 27 1a 	sts	0x1A27, r17	; 0x801a27 <_twiMessageLen>
    587c:	88 81       	ld	r24, Y
    587e:	88 0f       	add	r24, r24
    5880:	81 60       	ori	r24, 0x01	; 1
    5882:	80 93 28 1a 	sts	0x1A28, r24	; 0x801a28 <_twiMessageBuffer>
    5886:	88 ef       	ldi	r24, 0xF8	; 248
    5888:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <_twiCurrentState>
    588c:	85 ea       	ldi	r24, 0xA5	; 165
    588e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    5892:	85 e0       	ldi	r24, 0x05	; 5
    5894:	05 c0       	rjmp	.+10     	; 0x58a0 <twiReceive+0x5e>
    5896:	86 e0       	ldi	r24, 0x06	; 6
    5898:	03 c0       	rjmp	.+6      	; 0x58a0 <twiReceive+0x5e>
    589a:	87 e0       	ldi	r24, 0x07	; 7
    589c:	01 c0       	rjmp	.+2      	; 0x58a0 <twiReceive+0x5e>
    589e:	82 e0       	ldi	r24, 0x02	; 2
    58a0:	df 91       	pop	r29
    58a2:	cf 91       	pop	r28
    58a4:	1f 91       	pop	r17
    58a6:	08 95       	ret

000058a8 <__vector_39>:
    58a8:	1f 92       	push	r1
    58aa:	0f 92       	push	r0
    58ac:	0f b6       	in	r0, 0x3f	; 63
    58ae:	0f 92       	push	r0
    58b0:	11 24       	eor	r1, r1
    58b2:	0b b6       	in	r0, 0x3b	; 59
    58b4:	0f 92       	push	r0
    58b6:	2f 93       	push	r18
    58b8:	3f 93       	push	r19
    58ba:	4f 93       	push	r20
    58bc:	5f 93       	push	r21
    58be:	6f 93       	push	r22
    58c0:	7f 93       	push	r23
    58c2:	8f 93       	push	r24
    58c4:	9f 93       	push	r25
    58c6:	af 93       	push	r26
    58c8:	bf 93       	push	r27
    58ca:	ef 93       	push	r30
    58cc:	ff 93       	push	r31
    58ce:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    58d2:	8e 2f       	mov	r24, r30
    58d4:	90 e0       	ldi	r25, 0x00	; 0
    58d6:	fc 01       	movw	r30, r24
    58d8:	38 97       	sbiw	r30, 0x08	; 8
    58da:	e1 35       	cpi	r30, 0x51	; 81
    58dc:	f1 05       	cpc	r31, r1
    58de:	08 f0       	brcs	.+2      	; 0x58e2 <__vector_39+0x3a>
    58e0:	75 c0       	rjmp	.+234    	; 0x59cc <__vector_39+0x124>
    58e2:	88 27       	eor	r24, r24
    58e4:	e4 58       	subi	r30, 0x84	; 132
    58e6:	ff 4f       	sbci	r31, 0xFF	; 255
    58e8:	8f 4f       	sbci	r24, 0xFF	; 255
    58ea:	db c2       	rjmp	.+1462   	; 0x5ea2 <__tablejump2__>
    58ec:	10 92 24 1a 	sts	0x1A24, r1	; 0x801a24 <_index.1885>
    58f0:	e0 91 24 1a 	lds	r30, 0x1A24	; 0x801a24 <_index.1885>
    58f4:	80 91 27 1a 	lds	r24, 0x1A27	; 0x801a27 <_twiMessageLen>
    58f8:	e8 17       	cp	r30, r24
    58fa:	70 f4       	brcc	.+28     	; 0x5918 <__vector_39+0x70>
    58fc:	81 e0       	ldi	r24, 0x01	; 1
    58fe:	8e 0f       	add	r24, r30
    5900:	80 93 24 1a 	sts	0x1A24, r24	; 0x801a24 <_index.1885>
    5904:	f0 e0       	ldi	r31, 0x00	; 0
    5906:	e8 5d       	subi	r30, 0xD8	; 216
    5908:	f5 4e       	sbci	r31, 0xE5	; 229
    590a:	80 81       	ld	r24, Z
    590c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    5910:	85 e8       	ldi	r24, 0x85	; 133
    5912:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    5916:	72 c0       	rjmp	.+228    	; 0x59fc <__vector_39+0x154>
    5918:	84 e9       	ldi	r24, 0x94	; 148
    591a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    591e:	80 91 25 1a 	lds	r24, 0x1A25	; 0x801a25 <_twiCurrentHandler>
    5922:	90 91 26 1a 	lds	r25, 0x1A26	; 0x801a26 <_twiCurrentHandler+0x1>
    5926:	dc 01       	movw	r26, r24
    5928:	12 96       	adiw	r26, 0x02	; 2
    592a:	ed 91       	ld	r30, X+
    592c:	fc 91       	ld	r31, X
    592e:	13 97       	sbiw	r26, 0x03	; 3
    5930:	30 97       	sbiw	r30, 0x00	; 0
    5932:	09 f4       	brne	.+2      	; 0x5936 <__vector_39+0x8e>
    5934:	63 c0       	rjmp	.+198    	; 0x59fc <__vector_39+0x154>
    5936:	20 e0       	ldi	r18, 0x00	; 0
    5938:	40 e0       	ldi	r20, 0x00	; 0
    593a:	50 e0       	ldi	r21, 0x00	; 0
    593c:	64 e0       	ldi	r22, 0x04	; 4
    593e:	19 95       	eicall
    5940:	5d c0       	rjmp	.+186    	; 0x59fc <__vector_39+0x154>
    5942:	e0 91 24 1a 	lds	r30, 0x1A24	; 0x801a24 <_index.1885>
    5946:	81 e0       	ldi	r24, 0x01	; 1
    5948:	8e 0f       	add	r24, r30
    594a:	80 93 24 1a 	sts	0x1A24, r24	; 0x801a24 <_index.1885>
    594e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    5952:	f0 e0       	ldi	r31, 0x00	; 0
    5954:	e8 5d       	subi	r30, 0xD8	; 216
    5956:	f5 4e       	sbci	r31, 0xE5	; 229
    5958:	80 83       	st	Z, r24
    595a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    595e:	80 34       	cpi	r24, 0x40	; 64
    5960:	11 f4       	brne	.+4      	; 0x5966 <__vector_39+0xbe>
    5962:	10 92 24 1a 	sts	0x1A24, r1	; 0x801a24 <_index.1885>
    5966:	20 91 24 1a 	lds	r18, 0x1A24	; 0x801a24 <_index.1885>
    596a:	30 e0       	ldi	r19, 0x00	; 0
    596c:	80 91 27 1a 	lds	r24, 0x1A27	; 0x801a27 <_twiMessageLen>
    5970:	90 e0       	ldi	r25, 0x00	; 0
    5972:	01 97       	sbiw	r24, 0x01	; 1
    5974:	28 17       	cp	r18, r24
    5976:	39 07       	cpc	r19, r25
    5978:	24 f4       	brge	.+8      	; 0x5982 <__vector_39+0xda>
    597a:	85 ec       	ldi	r24, 0xC5	; 197
    597c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    5980:	3d c0       	rjmp	.+122    	; 0x59fc <__vector_39+0x154>
    5982:	85 e8       	ldi	r24, 0x85	; 133
    5984:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    5988:	39 c0       	rjmp	.+114    	; 0x59fc <__vector_39+0x154>
    598a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    598e:	e0 91 24 1a 	lds	r30, 0x1A24	; 0x801a24 <_index.1885>
    5992:	f0 e0       	ldi	r31, 0x00	; 0
    5994:	e8 5d       	subi	r30, 0xD8	; 216
    5996:	f5 4e       	sbci	r31, 0xE5	; 229
    5998:	80 83       	st	Z, r24
    599a:	84 e9       	ldi	r24, 0x94	; 148
    599c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    59a0:	80 91 25 1a 	lds	r24, 0x1A25	; 0x801a25 <_twiCurrentHandler>
    59a4:	90 91 26 1a 	lds	r25, 0x1A26	; 0x801a26 <_twiCurrentHandler+0x1>
    59a8:	dc 01       	movw	r26, r24
    59aa:	12 96       	adiw	r26, 0x02	; 2
    59ac:	ed 91       	ld	r30, X+
    59ae:	fc 91       	ld	r31, X
    59b0:	13 97       	sbiw	r26, 0x03	; 3
    59b2:	30 97       	sbiw	r30, 0x00	; 0
    59b4:	19 f1       	breq	.+70     	; 0x59fc <__vector_39+0x154>
    59b6:	20 91 27 1a 	lds	r18, 0x1A27	; 0x801a27 <_twiMessageLen>
    59ba:	48 e2       	ldi	r20, 0x28	; 40
    59bc:	5a e1       	ldi	r21, 0x1A	; 26
    59be:	65 e0       	ldi	r22, 0x05	; 5
    59c0:	19 95       	eicall
    59c2:	1c c0       	rjmp	.+56     	; 0x59fc <__vector_39+0x154>
    59c4:	85 ea       	ldi	r24, 0xA5	; 165
    59c6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    59ca:	18 c0       	rjmp	.+48     	; 0x59fc <__vector_39+0x154>
    59cc:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    59d0:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <_twiCurrentState>
    59d4:	84 e0       	ldi	r24, 0x04	; 4
    59d6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    59da:	80 91 25 1a 	lds	r24, 0x1A25	; 0x801a25 <_twiCurrentHandler>
    59de:	90 91 26 1a 	lds	r25, 0x1A26	; 0x801a26 <_twiCurrentHandler+0x1>
    59e2:	dc 01       	movw	r26, r24
    59e4:	12 96       	adiw	r26, 0x02	; 2
    59e6:	ed 91       	ld	r30, X+
    59e8:	fc 91       	ld	r31, X
    59ea:	13 97       	sbiw	r26, 0x03	; 3
    59ec:	30 97       	sbiw	r30, 0x00	; 0
    59ee:	31 f0       	breq	.+12     	; 0x59fc <__vector_39+0x154>
    59f0:	20 e0       	ldi	r18, 0x00	; 0
    59f2:	40 e0       	ldi	r20, 0x00	; 0
    59f4:	50 e0       	ldi	r21, 0x00	; 0
    59f6:	60 91 24 02 	lds	r22, 0x0224	; 0x800224 <_twiCurrentState>
    59fa:	19 95       	eicall
    59fc:	ff 91       	pop	r31
    59fe:	ef 91       	pop	r30
    5a00:	bf 91       	pop	r27
    5a02:	af 91       	pop	r26
    5a04:	9f 91       	pop	r25
    5a06:	8f 91       	pop	r24
    5a08:	7f 91       	pop	r23
    5a0a:	6f 91       	pop	r22
    5a0c:	5f 91       	pop	r21
    5a0e:	4f 91       	pop	r20
    5a10:	3f 91       	pop	r19
    5a12:	2f 91       	pop	r18
    5a14:	0f 90       	pop	r0
    5a16:	0b be       	out	0x3b, r0	; 59
    5a18:	0f 90       	pop	r0
    5a1a:	0f be       	out	0x3f, r0	; 63
    5a1c:	0f 90       	pop	r0
    5a1e:	1f 90       	pop	r1
    5a20:	18 95       	reti

00005a22 <fifo_init>:
    5a22:	fc 01       	movw	r30, r24
    5a24:	41 11       	cpse	r20, r1
    5a26:	01 c0       	rjmp	.+2      	; 0x5a2a <fifo_init+0x8>
    5a28:	e8 d3       	rcall	.+2000   	; 0x61fa <abort>
    5a2a:	84 2f       	mov	r24, r20
    5a2c:	90 e0       	ldi	r25, 0x00	; 0
    5a2e:	9c 01       	movw	r18, r24
    5a30:	21 50       	subi	r18, 0x01	; 1
    5a32:	31 09       	sbc	r19, r1
    5a34:	82 23       	and	r24, r18
    5a36:	93 23       	and	r25, r19
    5a38:	89 2b       	or	r24, r25
    5a3a:	09 f0       	breq	.+2      	; 0x5a3e <fifo_init+0x1c>
    5a3c:	de d3       	rcall	.+1980   	; 0x61fa <abort>
    5a3e:	41 38       	cpi	r20, 0x81	; 129
    5a40:	08 f0       	brcs	.+2      	; 0x5a44 <fifo_init+0x22>
    5a42:	db d3       	rcall	.+1974   	; 0x61fa <abort>
    5a44:	12 82       	std	Z+2, r1	; 0x02
    5a46:	13 82       	std	Z+3, r1	; 0x03
    5a48:	44 83       	std	Z+4, r20	; 0x04
    5a4a:	44 0f       	add	r20, r20
    5a4c:	41 50       	subi	r20, 0x01	; 1
    5a4e:	45 83       	std	Z+5, r20	; 0x05
    5a50:	71 83       	std	Z+1, r23	; 0x01
    5a52:	60 83       	st	Z, r22
    5a54:	80 e0       	ldi	r24, 0x00	; 0
    5a56:	90 e0       	ldi	r25, 0x00	; 0
    5a58:	08 95       	ret

00005a5a <__subsf3>:
    5a5a:	50 58       	subi	r21, 0x80	; 128

00005a5c <__addsf3>:
    5a5c:	bb 27       	eor	r27, r27
    5a5e:	aa 27       	eor	r26, r26
    5a60:	0e d0       	rcall	.+28     	; 0x5a7e <__addsf3x>
    5a62:	4d c1       	rjmp	.+666    	; 0x5cfe <__fp_round>
    5a64:	3e d1       	rcall	.+636    	; 0x5ce2 <__fp_pscA>
    5a66:	30 f0       	brcs	.+12     	; 0x5a74 <__addsf3+0x18>
    5a68:	43 d1       	rcall	.+646    	; 0x5cf0 <__fp_pscB>
    5a6a:	20 f0       	brcs	.+8      	; 0x5a74 <__addsf3+0x18>
    5a6c:	31 f4       	brne	.+12     	; 0x5a7a <__addsf3+0x1e>
    5a6e:	9f 3f       	cpi	r25, 0xFF	; 255
    5a70:	11 f4       	brne	.+4      	; 0x5a76 <__addsf3+0x1a>
    5a72:	1e f4       	brtc	.+6      	; 0x5a7a <__addsf3+0x1e>
    5a74:	33 c1       	rjmp	.+614    	; 0x5cdc <__fp_nan>
    5a76:	0e f4       	brtc	.+2      	; 0x5a7a <__addsf3+0x1e>
    5a78:	e0 95       	com	r30
    5a7a:	e7 fb       	bst	r30, 7
    5a7c:	29 c1       	rjmp	.+594    	; 0x5cd0 <__fp_inf>

00005a7e <__addsf3x>:
    5a7e:	e9 2f       	mov	r30, r25
    5a80:	4f d1       	rcall	.+670    	; 0x5d20 <__fp_split3>
    5a82:	80 f3       	brcs	.-32     	; 0x5a64 <__addsf3+0x8>
    5a84:	ba 17       	cp	r27, r26
    5a86:	62 07       	cpc	r22, r18
    5a88:	73 07       	cpc	r23, r19
    5a8a:	84 07       	cpc	r24, r20
    5a8c:	95 07       	cpc	r25, r21
    5a8e:	18 f0       	brcs	.+6      	; 0x5a96 <__addsf3x+0x18>
    5a90:	71 f4       	brne	.+28     	; 0x5aae <__addsf3x+0x30>
    5a92:	9e f5       	brtc	.+102    	; 0x5afa <__addsf3x+0x7c>
    5a94:	67 c1       	rjmp	.+718    	; 0x5d64 <__fp_zero>
    5a96:	0e f4       	brtc	.+2      	; 0x5a9a <__addsf3x+0x1c>
    5a98:	e0 95       	com	r30
    5a9a:	0b 2e       	mov	r0, r27
    5a9c:	ba 2f       	mov	r27, r26
    5a9e:	a0 2d       	mov	r26, r0
    5aa0:	0b 01       	movw	r0, r22
    5aa2:	b9 01       	movw	r22, r18
    5aa4:	90 01       	movw	r18, r0
    5aa6:	0c 01       	movw	r0, r24
    5aa8:	ca 01       	movw	r24, r20
    5aaa:	a0 01       	movw	r20, r0
    5aac:	11 24       	eor	r1, r1
    5aae:	ff 27       	eor	r31, r31
    5ab0:	59 1b       	sub	r21, r25
    5ab2:	99 f0       	breq	.+38     	; 0x5ada <__addsf3x+0x5c>
    5ab4:	59 3f       	cpi	r21, 0xF9	; 249
    5ab6:	50 f4       	brcc	.+20     	; 0x5acc <__addsf3x+0x4e>
    5ab8:	50 3e       	cpi	r21, 0xE0	; 224
    5aba:	68 f1       	brcs	.+90     	; 0x5b16 <__addsf3x+0x98>
    5abc:	1a 16       	cp	r1, r26
    5abe:	f0 40       	sbci	r31, 0x00	; 0
    5ac0:	a2 2f       	mov	r26, r18
    5ac2:	23 2f       	mov	r18, r19
    5ac4:	34 2f       	mov	r19, r20
    5ac6:	44 27       	eor	r20, r20
    5ac8:	58 5f       	subi	r21, 0xF8	; 248
    5aca:	f3 cf       	rjmp	.-26     	; 0x5ab2 <__addsf3x+0x34>
    5acc:	46 95       	lsr	r20
    5ace:	37 95       	ror	r19
    5ad0:	27 95       	ror	r18
    5ad2:	a7 95       	ror	r26
    5ad4:	f0 40       	sbci	r31, 0x00	; 0
    5ad6:	53 95       	inc	r21
    5ad8:	c9 f7       	brne	.-14     	; 0x5acc <__addsf3x+0x4e>
    5ada:	7e f4       	brtc	.+30     	; 0x5afa <__addsf3x+0x7c>
    5adc:	1f 16       	cp	r1, r31
    5ade:	ba 0b       	sbc	r27, r26
    5ae0:	62 0b       	sbc	r22, r18
    5ae2:	73 0b       	sbc	r23, r19
    5ae4:	84 0b       	sbc	r24, r20
    5ae6:	ba f0       	brmi	.+46     	; 0x5b16 <__addsf3x+0x98>
    5ae8:	91 50       	subi	r25, 0x01	; 1
    5aea:	a1 f0       	breq	.+40     	; 0x5b14 <__addsf3x+0x96>
    5aec:	ff 0f       	add	r31, r31
    5aee:	bb 1f       	adc	r27, r27
    5af0:	66 1f       	adc	r22, r22
    5af2:	77 1f       	adc	r23, r23
    5af4:	88 1f       	adc	r24, r24
    5af6:	c2 f7       	brpl	.-16     	; 0x5ae8 <__addsf3x+0x6a>
    5af8:	0e c0       	rjmp	.+28     	; 0x5b16 <__addsf3x+0x98>
    5afa:	ba 0f       	add	r27, r26
    5afc:	62 1f       	adc	r22, r18
    5afe:	73 1f       	adc	r23, r19
    5b00:	84 1f       	adc	r24, r20
    5b02:	48 f4       	brcc	.+18     	; 0x5b16 <__addsf3x+0x98>
    5b04:	87 95       	ror	r24
    5b06:	77 95       	ror	r23
    5b08:	67 95       	ror	r22
    5b0a:	b7 95       	ror	r27
    5b0c:	f7 95       	ror	r31
    5b0e:	9e 3f       	cpi	r25, 0xFE	; 254
    5b10:	08 f0       	brcs	.+2      	; 0x5b14 <__addsf3x+0x96>
    5b12:	b3 cf       	rjmp	.-154    	; 0x5a7a <__addsf3+0x1e>
    5b14:	93 95       	inc	r25
    5b16:	88 0f       	add	r24, r24
    5b18:	08 f0       	brcs	.+2      	; 0x5b1c <__addsf3x+0x9e>
    5b1a:	99 27       	eor	r25, r25
    5b1c:	ee 0f       	add	r30, r30
    5b1e:	97 95       	ror	r25
    5b20:	87 95       	ror	r24
    5b22:	08 95       	ret

00005b24 <__divsf3>:
    5b24:	0c d0       	rcall	.+24     	; 0x5b3e <__divsf3x>
    5b26:	eb c0       	rjmp	.+470    	; 0x5cfe <__fp_round>
    5b28:	e3 d0       	rcall	.+454    	; 0x5cf0 <__fp_pscB>
    5b2a:	40 f0       	brcs	.+16     	; 0x5b3c <__divsf3+0x18>
    5b2c:	da d0       	rcall	.+436    	; 0x5ce2 <__fp_pscA>
    5b2e:	30 f0       	brcs	.+12     	; 0x5b3c <__divsf3+0x18>
    5b30:	21 f4       	brne	.+8      	; 0x5b3a <__divsf3+0x16>
    5b32:	5f 3f       	cpi	r21, 0xFF	; 255
    5b34:	19 f0       	breq	.+6      	; 0x5b3c <__divsf3+0x18>
    5b36:	cc c0       	rjmp	.+408    	; 0x5cd0 <__fp_inf>
    5b38:	51 11       	cpse	r21, r1
    5b3a:	15 c1       	rjmp	.+554    	; 0x5d66 <__fp_szero>
    5b3c:	cf c0       	rjmp	.+414    	; 0x5cdc <__fp_nan>

00005b3e <__divsf3x>:
    5b3e:	f0 d0       	rcall	.+480    	; 0x5d20 <__fp_split3>
    5b40:	98 f3       	brcs	.-26     	; 0x5b28 <__divsf3+0x4>

00005b42 <__divsf3_pse>:
    5b42:	99 23       	and	r25, r25
    5b44:	c9 f3       	breq	.-14     	; 0x5b38 <__divsf3+0x14>
    5b46:	55 23       	and	r21, r21
    5b48:	b1 f3       	breq	.-20     	; 0x5b36 <__divsf3+0x12>
    5b4a:	95 1b       	sub	r25, r21
    5b4c:	55 0b       	sbc	r21, r21
    5b4e:	bb 27       	eor	r27, r27
    5b50:	aa 27       	eor	r26, r26
    5b52:	62 17       	cp	r22, r18
    5b54:	73 07       	cpc	r23, r19
    5b56:	84 07       	cpc	r24, r20
    5b58:	38 f0       	brcs	.+14     	; 0x5b68 <__divsf3_pse+0x26>
    5b5a:	9f 5f       	subi	r25, 0xFF	; 255
    5b5c:	5f 4f       	sbci	r21, 0xFF	; 255
    5b5e:	22 0f       	add	r18, r18
    5b60:	33 1f       	adc	r19, r19
    5b62:	44 1f       	adc	r20, r20
    5b64:	aa 1f       	adc	r26, r26
    5b66:	a9 f3       	breq	.-22     	; 0x5b52 <__divsf3_pse+0x10>
    5b68:	33 d0       	rcall	.+102    	; 0x5bd0 <__divsf3_pse+0x8e>
    5b6a:	0e 2e       	mov	r0, r30
    5b6c:	3a f0       	brmi	.+14     	; 0x5b7c <__divsf3_pse+0x3a>
    5b6e:	e0 e8       	ldi	r30, 0x80	; 128
    5b70:	30 d0       	rcall	.+96     	; 0x5bd2 <__divsf3_pse+0x90>
    5b72:	91 50       	subi	r25, 0x01	; 1
    5b74:	50 40       	sbci	r21, 0x00	; 0
    5b76:	e6 95       	lsr	r30
    5b78:	00 1c       	adc	r0, r0
    5b7a:	ca f7       	brpl	.-14     	; 0x5b6e <__divsf3_pse+0x2c>
    5b7c:	29 d0       	rcall	.+82     	; 0x5bd0 <__divsf3_pse+0x8e>
    5b7e:	fe 2f       	mov	r31, r30
    5b80:	27 d0       	rcall	.+78     	; 0x5bd0 <__divsf3_pse+0x8e>
    5b82:	66 0f       	add	r22, r22
    5b84:	77 1f       	adc	r23, r23
    5b86:	88 1f       	adc	r24, r24
    5b88:	bb 1f       	adc	r27, r27
    5b8a:	26 17       	cp	r18, r22
    5b8c:	37 07       	cpc	r19, r23
    5b8e:	48 07       	cpc	r20, r24
    5b90:	ab 07       	cpc	r26, r27
    5b92:	b0 e8       	ldi	r27, 0x80	; 128
    5b94:	09 f0       	breq	.+2      	; 0x5b98 <__divsf3_pse+0x56>
    5b96:	bb 0b       	sbc	r27, r27
    5b98:	80 2d       	mov	r24, r0
    5b9a:	bf 01       	movw	r22, r30
    5b9c:	ff 27       	eor	r31, r31
    5b9e:	93 58       	subi	r25, 0x83	; 131
    5ba0:	5f 4f       	sbci	r21, 0xFF	; 255
    5ba2:	2a f0       	brmi	.+10     	; 0x5bae <__divsf3_pse+0x6c>
    5ba4:	9e 3f       	cpi	r25, 0xFE	; 254
    5ba6:	51 05       	cpc	r21, r1
    5ba8:	68 f0       	brcs	.+26     	; 0x5bc4 <__divsf3_pse+0x82>
    5baa:	92 c0       	rjmp	.+292    	; 0x5cd0 <__fp_inf>
    5bac:	dc c0       	rjmp	.+440    	; 0x5d66 <__fp_szero>
    5bae:	5f 3f       	cpi	r21, 0xFF	; 255
    5bb0:	ec f3       	brlt	.-6      	; 0x5bac <__divsf3_pse+0x6a>
    5bb2:	98 3e       	cpi	r25, 0xE8	; 232
    5bb4:	dc f3       	brlt	.-10     	; 0x5bac <__divsf3_pse+0x6a>
    5bb6:	86 95       	lsr	r24
    5bb8:	77 95       	ror	r23
    5bba:	67 95       	ror	r22
    5bbc:	b7 95       	ror	r27
    5bbe:	f7 95       	ror	r31
    5bc0:	9f 5f       	subi	r25, 0xFF	; 255
    5bc2:	c9 f7       	brne	.-14     	; 0x5bb6 <__divsf3_pse+0x74>
    5bc4:	88 0f       	add	r24, r24
    5bc6:	91 1d       	adc	r25, r1
    5bc8:	96 95       	lsr	r25
    5bca:	87 95       	ror	r24
    5bcc:	97 f9       	bld	r25, 7
    5bce:	08 95       	ret
    5bd0:	e1 e0       	ldi	r30, 0x01	; 1
    5bd2:	66 0f       	add	r22, r22
    5bd4:	77 1f       	adc	r23, r23
    5bd6:	88 1f       	adc	r24, r24
    5bd8:	bb 1f       	adc	r27, r27
    5bda:	62 17       	cp	r22, r18
    5bdc:	73 07       	cpc	r23, r19
    5bde:	84 07       	cpc	r24, r20
    5be0:	ba 07       	cpc	r27, r26
    5be2:	20 f0       	brcs	.+8      	; 0x5bec <__divsf3_pse+0xaa>
    5be4:	62 1b       	sub	r22, r18
    5be6:	73 0b       	sbc	r23, r19
    5be8:	84 0b       	sbc	r24, r20
    5bea:	ba 0b       	sbc	r27, r26
    5bec:	ee 1f       	adc	r30, r30
    5bee:	88 f7       	brcc	.-30     	; 0x5bd2 <__divsf3_pse+0x90>
    5bf0:	e0 95       	com	r30
    5bf2:	08 95       	ret

00005bf4 <__fixsfsi>:
    5bf4:	04 d0       	rcall	.+8      	; 0x5bfe <__fixunssfsi>
    5bf6:	68 94       	set
    5bf8:	b1 11       	cpse	r27, r1
    5bfa:	b5 c0       	rjmp	.+362    	; 0x5d66 <__fp_szero>
    5bfc:	08 95       	ret

00005bfe <__fixunssfsi>:
    5bfe:	98 d0       	rcall	.+304    	; 0x5d30 <__fp_splitA>
    5c00:	88 f0       	brcs	.+34     	; 0x5c24 <__fixunssfsi+0x26>
    5c02:	9f 57       	subi	r25, 0x7F	; 127
    5c04:	90 f0       	brcs	.+36     	; 0x5c2a <__fixunssfsi+0x2c>
    5c06:	b9 2f       	mov	r27, r25
    5c08:	99 27       	eor	r25, r25
    5c0a:	b7 51       	subi	r27, 0x17	; 23
    5c0c:	a0 f0       	brcs	.+40     	; 0x5c36 <__fixunssfsi+0x38>
    5c0e:	d1 f0       	breq	.+52     	; 0x5c44 <__fixunssfsi+0x46>
    5c10:	66 0f       	add	r22, r22
    5c12:	77 1f       	adc	r23, r23
    5c14:	88 1f       	adc	r24, r24
    5c16:	99 1f       	adc	r25, r25
    5c18:	1a f0       	brmi	.+6      	; 0x5c20 <__fixunssfsi+0x22>
    5c1a:	ba 95       	dec	r27
    5c1c:	c9 f7       	brne	.-14     	; 0x5c10 <__fixunssfsi+0x12>
    5c1e:	12 c0       	rjmp	.+36     	; 0x5c44 <__fixunssfsi+0x46>
    5c20:	b1 30       	cpi	r27, 0x01	; 1
    5c22:	81 f0       	breq	.+32     	; 0x5c44 <__fixunssfsi+0x46>
    5c24:	9f d0       	rcall	.+318    	; 0x5d64 <__fp_zero>
    5c26:	b1 e0       	ldi	r27, 0x01	; 1
    5c28:	08 95       	ret
    5c2a:	9c c0       	rjmp	.+312    	; 0x5d64 <__fp_zero>
    5c2c:	67 2f       	mov	r22, r23
    5c2e:	78 2f       	mov	r23, r24
    5c30:	88 27       	eor	r24, r24
    5c32:	b8 5f       	subi	r27, 0xF8	; 248
    5c34:	39 f0       	breq	.+14     	; 0x5c44 <__fixunssfsi+0x46>
    5c36:	b9 3f       	cpi	r27, 0xF9	; 249
    5c38:	cc f3       	brlt	.-14     	; 0x5c2c <__fixunssfsi+0x2e>
    5c3a:	86 95       	lsr	r24
    5c3c:	77 95       	ror	r23
    5c3e:	67 95       	ror	r22
    5c40:	b3 95       	inc	r27
    5c42:	d9 f7       	brne	.-10     	; 0x5c3a <__fixunssfsi+0x3c>
    5c44:	3e f4       	brtc	.+14     	; 0x5c54 <__fixunssfsi+0x56>
    5c46:	90 95       	com	r25
    5c48:	80 95       	com	r24
    5c4a:	70 95       	com	r23
    5c4c:	61 95       	neg	r22
    5c4e:	7f 4f       	sbci	r23, 0xFF	; 255
    5c50:	8f 4f       	sbci	r24, 0xFF	; 255
    5c52:	9f 4f       	sbci	r25, 0xFF	; 255
    5c54:	08 95       	ret

00005c56 <__floatunsisf>:
    5c56:	e8 94       	clt
    5c58:	09 c0       	rjmp	.+18     	; 0x5c6c <__floatsisf+0x12>

00005c5a <__floatsisf>:
    5c5a:	97 fb       	bst	r25, 7
    5c5c:	3e f4       	brtc	.+14     	; 0x5c6c <__floatsisf+0x12>
    5c5e:	90 95       	com	r25
    5c60:	80 95       	com	r24
    5c62:	70 95       	com	r23
    5c64:	61 95       	neg	r22
    5c66:	7f 4f       	sbci	r23, 0xFF	; 255
    5c68:	8f 4f       	sbci	r24, 0xFF	; 255
    5c6a:	9f 4f       	sbci	r25, 0xFF	; 255
    5c6c:	99 23       	and	r25, r25
    5c6e:	a9 f0       	breq	.+42     	; 0x5c9a <__floatsisf+0x40>
    5c70:	f9 2f       	mov	r31, r25
    5c72:	96 e9       	ldi	r25, 0x96	; 150
    5c74:	bb 27       	eor	r27, r27
    5c76:	93 95       	inc	r25
    5c78:	f6 95       	lsr	r31
    5c7a:	87 95       	ror	r24
    5c7c:	77 95       	ror	r23
    5c7e:	67 95       	ror	r22
    5c80:	b7 95       	ror	r27
    5c82:	f1 11       	cpse	r31, r1
    5c84:	f8 cf       	rjmp	.-16     	; 0x5c76 <__floatsisf+0x1c>
    5c86:	fa f4       	brpl	.+62     	; 0x5cc6 <__floatsisf+0x6c>
    5c88:	bb 0f       	add	r27, r27
    5c8a:	11 f4       	brne	.+4      	; 0x5c90 <__floatsisf+0x36>
    5c8c:	60 ff       	sbrs	r22, 0
    5c8e:	1b c0       	rjmp	.+54     	; 0x5cc6 <__floatsisf+0x6c>
    5c90:	6f 5f       	subi	r22, 0xFF	; 255
    5c92:	7f 4f       	sbci	r23, 0xFF	; 255
    5c94:	8f 4f       	sbci	r24, 0xFF	; 255
    5c96:	9f 4f       	sbci	r25, 0xFF	; 255
    5c98:	16 c0       	rjmp	.+44     	; 0x5cc6 <__floatsisf+0x6c>
    5c9a:	88 23       	and	r24, r24
    5c9c:	11 f0       	breq	.+4      	; 0x5ca2 <__floatsisf+0x48>
    5c9e:	96 e9       	ldi	r25, 0x96	; 150
    5ca0:	11 c0       	rjmp	.+34     	; 0x5cc4 <__floatsisf+0x6a>
    5ca2:	77 23       	and	r23, r23
    5ca4:	21 f0       	breq	.+8      	; 0x5cae <__floatsisf+0x54>
    5ca6:	9e e8       	ldi	r25, 0x8E	; 142
    5ca8:	87 2f       	mov	r24, r23
    5caa:	76 2f       	mov	r23, r22
    5cac:	05 c0       	rjmp	.+10     	; 0x5cb8 <__floatsisf+0x5e>
    5cae:	66 23       	and	r22, r22
    5cb0:	71 f0       	breq	.+28     	; 0x5cce <__floatsisf+0x74>
    5cb2:	96 e8       	ldi	r25, 0x86	; 134
    5cb4:	86 2f       	mov	r24, r22
    5cb6:	70 e0       	ldi	r23, 0x00	; 0
    5cb8:	60 e0       	ldi	r22, 0x00	; 0
    5cba:	2a f0       	brmi	.+10     	; 0x5cc6 <__floatsisf+0x6c>
    5cbc:	9a 95       	dec	r25
    5cbe:	66 0f       	add	r22, r22
    5cc0:	77 1f       	adc	r23, r23
    5cc2:	88 1f       	adc	r24, r24
    5cc4:	da f7       	brpl	.-10     	; 0x5cbc <__floatsisf+0x62>
    5cc6:	88 0f       	add	r24, r24
    5cc8:	96 95       	lsr	r25
    5cca:	87 95       	ror	r24
    5ccc:	97 f9       	bld	r25, 7
    5cce:	08 95       	ret

00005cd0 <__fp_inf>:
    5cd0:	97 f9       	bld	r25, 7
    5cd2:	9f 67       	ori	r25, 0x7F	; 127
    5cd4:	80 e8       	ldi	r24, 0x80	; 128
    5cd6:	70 e0       	ldi	r23, 0x00	; 0
    5cd8:	60 e0       	ldi	r22, 0x00	; 0
    5cda:	08 95       	ret

00005cdc <__fp_nan>:
    5cdc:	9f ef       	ldi	r25, 0xFF	; 255
    5cde:	80 ec       	ldi	r24, 0xC0	; 192
    5ce0:	08 95       	ret

00005ce2 <__fp_pscA>:
    5ce2:	00 24       	eor	r0, r0
    5ce4:	0a 94       	dec	r0
    5ce6:	16 16       	cp	r1, r22
    5ce8:	17 06       	cpc	r1, r23
    5cea:	18 06       	cpc	r1, r24
    5cec:	09 06       	cpc	r0, r25
    5cee:	08 95       	ret

00005cf0 <__fp_pscB>:
    5cf0:	00 24       	eor	r0, r0
    5cf2:	0a 94       	dec	r0
    5cf4:	12 16       	cp	r1, r18
    5cf6:	13 06       	cpc	r1, r19
    5cf8:	14 06       	cpc	r1, r20
    5cfa:	05 06       	cpc	r0, r21
    5cfc:	08 95       	ret

00005cfe <__fp_round>:
    5cfe:	09 2e       	mov	r0, r25
    5d00:	03 94       	inc	r0
    5d02:	00 0c       	add	r0, r0
    5d04:	11 f4       	brne	.+4      	; 0x5d0a <__fp_round+0xc>
    5d06:	88 23       	and	r24, r24
    5d08:	52 f0       	brmi	.+20     	; 0x5d1e <__fp_round+0x20>
    5d0a:	bb 0f       	add	r27, r27
    5d0c:	40 f4       	brcc	.+16     	; 0x5d1e <__fp_round+0x20>
    5d0e:	bf 2b       	or	r27, r31
    5d10:	11 f4       	brne	.+4      	; 0x5d16 <__fp_round+0x18>
    5d12:	60 ff       	sbrs	r22, 0
    5d14:	04 c0       	rjmp	.+8      	; 0x5d1e <__fp_round+0x20>
    5d16:	6f 5f       	subi	r22, 0xFF	; 255
    5d18:	7f 4f       	sbci	r23, 0xFF	; 255
    5d1a:	8f 4f       	sbci	r24, 0xFF	; 255
    5d1c:	9f 4f       	sbci	r25, 0xFF	; 255
    5d1e:	08 95       	ret

00005d20 <__fp_split3>:
    5d20:	57 fd       	sbrc	r21, 7
    5d22:	90 58       	subi	r25, 0x80	; 128
    5d24:	44 0f       	add	r20, r20
    5d26:	55 1f       	adc	r21, r21
    5d28:	59 f0       	breq	.+22     	; 0x5d40 <__fp_splitA+0x10>
    5d2a:	5f 3f       	cpi	r21, 0xFF	; 255
    5d2c:	71 f0       	breq	.+28     	; 0x5d4a <__fp_splitA+0x1a>
    5d2e:	47 95       	ror	r20

00005d30 <__fp_splitA>:
    5d30:	88 0f       	add	r24, r24
    5d32:	97 fb       	bst	r25, 7
    5d34:	99 1f       	adc	r25, r25
    5d36:	61 f0       	breq	.+24     	; 0x5d50 <__fp_splitA+0x20>
    5d38:	9f 3f       	cpi	r25, 0xFF	; 255
    5d3a:	79 f0       	breq	.+30     	; 0x5d5a <__fp_splitA+0x2a>
    5d3c:	87 95       	ror	r24
    5d3e:	08 95       	ret
    5d40:	12 16       	cp	r1, r18
    5d42:	13 06       	cpc	r1, r19
    5d44:	14 06       	cpc	r1, r20
    5d46:	55 1f       	adc	r21, r21
    5d48:	f2 cf       	rjmp	.-28     	; 0x5d2e <__fp_split3+0xe>
    5d4a:	46 95       	lsr	r20
    5d4c:	f1 df       	rcall	.-30     	; 0x5d30 <__fp_splitA>
    5d4e:	08 c0       	rjmp	.+16     	; 0x5d60 <__fp_splitA+0x30>
    5d50:	16 16       	cp	r1, r22
    5d52:	17 06       	cpc	r1, r23
    5d54:	18 06       	cpc	r1, r24
    5d56:	99 1f       	adc	r25, r25
    5d58:	f1 cf       	rjmp	.-30     	; 0x5d3c <__fp_splitA+0xc>
    5d5a:	86 95       	lsr	r24
    5d5c:	71 05       	cpc	r23, r1
    5d5e:	61 05       	cpc	r22, r1
    5d60:	08 94       	sec
    5d62:	08 95       	ret

00005d64 <__fp_zero>:
    5d64:	e8 94       	clt

00005d66 <__fp_szero>:
    5d66:	bb 27       	eor	r27, r27
    5d68:	66 27       	eor	r22, r22
    5d6a:	77 27       	eor	r23, r23
    5d6c:	cb 01       	movw	r24, r22
    5d6e:	97 f9       	bld	r25, 7
    5d70:	08 95       	ret

00005d72 <__mulsf3>:
    5d72:	0b d0       	rcall	.+22     	; 0x5d8a <__mulsf3x>
    5d74:	c4 cf       	rjmp	.-120    	; 0x5cfe <__fp_round>
    5d76:	b5 df       	rcall	.-150    	; 0x5ce2 <__fp_pscA>
    5d78:	28 f0       	brcs	.+10     	; 0x5d84 <__mulsf3+0x12>
    5d7a:	ba df       	rcall	.-140    	; 0x5cf0 <__fp_pscB>
    5d7c:	18 f0       	brcs	.+6      	; 0x5d84 <__mulsf3+0x12>
    5d7e:	95 23       	and	r25, r21
    5d80:	09 f0       	breq	.+2      	; 0x5d84 <__mulsf3+0x12>
    5d82:	a6 cf       	rjmp	.-180    	; 0x5cd0 <__fp_inf>
    5d84:	ab cf       	rjmp	.-170    	; 0x5cdc <__fp_nan>
    5d86:	11 24       	eor	r1, r1
    5d88:	ee cf       	rjmp	.-36     	; 0x5d66 <__fp_szero>

00005d8a <__mulsf3x>:
    5d8a:	ca df       	rcall	.-108    	; 0x5d20 <__fp_split3>
    5d8c:	a0 f3       	brcs	.-24     	; 0x5d76 <__mulsf3+0x4>

00005d8e <__mulsf3_pse>:
    5d8e:	95 9f       	mul	r25, r21
    5d90:	d1 f3       	breq	.-12     	; 0x5d86 <__mulsf3+0x14>
    5d92:	95 0f       	add	r25, r21
    5d94:	50 e0       	ldi	r21, 0x00	; 0
    5d96:	55 1f       	adc	r21, r21
    5d98:	62 9f       	mul	r22, r18
    5d9a:	f0 01       	movw	r30, r0
    5d9c:	72 9f       	mul	r23, r18
    5d9e:	bb 27       	eor	r27, r27
    5da0:	f0 0d       	add	r31, r0
    5da2:	b1 1d       	adc	r27, r1
    5da4:	63 9f       	mul	r22, r19
    5da6:	aa 27       	eor	r26, r26
    5da8:	f0 0d       	add	r31, r0
    5daa:	b1 1d       	adc	r27, r1
    5dac:	aa 1f       	adc	r26, r26
    5dae:	64 9f       	mul	r22, r20
    5db0:	66 27       	eor	r22, r22
    5db2:	b0 0d       	add	r27, r0
    5db4:	a1 1d       	adc	r26, r1
    5db6:	66 1f       	adc	r22, r22
    5db8:	82 9f       	mul	r24, r18
    5dba:	22 27       	eor	r18, r18
    5dbc:	b0 0d       	add	r27, r0
    5dbe:	a1 1d       	adc	r26, r1
    5dc0:	62 1f       	adc	r22, r18
    5dc2:	73 9f       	mul	r23, r19
    5dc4:	b0 0d       	add	r27, r0
    5dc6:	a1 1d       	adc	r26, r1
    5dc8:	62 1f       	adc	r22, r18
    5dca:	83 9f       	mul	r24, r19
    5dcc:	a0 0d       	add	r26, r0
    5dce:	61 1d       	adc	r22, r1
    5dd0:	22 1f       	adc	r18, r18
    5dd2:	74 9f       	mul	r23, r20
    5dd4:	33 27       	eor	r19, r19
    5dd6:	a0 0d       	add	r26, r0
    5dd8:	61 1d       	adc	r22, r1
    5dda:	23 1f       	adc	r18, r19
    5ddc:	84 9f       	mul	r24, r20
    5dde:	60 0d       	add	r22, r0
    5de0:	21 1d       	adc	r18, r1
    5de2:	82 2f       	mov	r24, r18
    5de4:	76 2f       	mov	r23, r22
    5de6:	6a 2f       	mov	r22, r26
    5de8:	11 24       	eor	r1, r1
    5dea:	9f 57       	subi	r25, 0x7F	; 127
    5dec:	50 40       	sbci	r21, 0x00	; 0
    5dee:	8a f0       	brmi	.+34     	; 0x5e12 <__mulsf3_pse+0x84>
    5df0:	e1 f0       	breq	.+56     	; 0x5e2a <__mulsf3_pse+0x9c>
    5df2:	88 23       	and	r24, r24
    5df4:	4a f0       	brmi	.+18     	; 0x5e08 <__mulsf3_pse+0x7a>
    5df6:	ee 0f       	add	r30, r30
    5df8:	ff 1f       	adc	r31, r31
    5dfa:	bb 1f       	adc	r27, r27
    5dfc:	66 1f       	adc	r22, r22
    5dfe:	77 1f       	adc	r23, r23
    5e00:	88 1f       	adc	r24, r24
    5e02:	91 50       	subi	r25, 0x01	; 1
    5e04:	50 40       	sbci	r21, 0x00	; 0
    5e06:	a9 f7       	brne	.-22     	; 0x5df2 <__mulsf3_pse+0x64>
    5e08:	9e 3f       	cpi	r25, 0xFE	; 254
    5e0a:	51 05       	cpc	r21, r1
    5e0c:	70 f0       	brcs	.+28     	; 0x5e2a <__mulsf3_pse+0x9c>
    5e0e:	60 cf       	rjmp	.-320    	; 0x5cd0 <__fp_inf>
    5e10:	aa cf       	rjmp	.-172    	; 0x5d66 <__fp_szero>
    5e12:	5f 3f       	cpi	r21, 0xFF	; 255
    5e14:	ec f3       	brlt	.-6      	; 0x5e10 <__mulsf3_pse+0x82>
    5e16:	98 3e       	cpi	r25, 0xE8	; 232
    5e18:	dc f3       	brlt	.-10     	; 0x5e10 <__mulsf3_pse+0x82>
    5e1a:	86 95       	lsr	r24
    5e1c:	77 95       	ror	r23
    5e1e:	67 95       	ror	r22
    5e20:	b7 95       	ror	r27
    5e22:	f7 95       	ror	r31
    5e24:	e7 95       	ror	r30
    5e26:	9f 5f       	subi	r25, 0xFF	; 255
    5e28:	c1 f7       	brne	.-16     	; 0x5e1a <__mulsf3_pse+0x8c>
    5e2a:	fe 2b       	or	r31, r30
    5e2c:	88 0f       	add	r24, r24
    5e2e:	91 1d       	adc	r25, r1
    5e30:	96 95       	lsr	r25
    5e32:	87 95       	ror	r24
    5e34:	97 f9       	bld	r25, 7
    5e36:	08 95       	ret

00005e38 <__divmodhi4>:
    5e38:	97 fb       	bst	r25, 7
    5e3a:	07 2e       	mov	r0, r23
    5e3c:	16 f4       	brtc	.+4      	; 0x5e42 <__divmodhi4+0xa>
    5e3e:	00 94       	com	r0
    5e40:	06 d0       	rcall	.+12     	; 0x5e4e <__divmodhi4_neg1>
    5e42:	77 fd       	sbrc	r23, 7
    5e44:	08 d0       	rcall	.+16     	; 0x5e56 <__divmodhi4_neg2>
    5e46:	35 d0       	rcall	.+106    	; 0x5eb2 <__udivmodhi4>
    5e48:	07 fc       	sbrc	r0, 7
    5e4a:	05 d0       	rcall	.+10     	; 0x5e56 <__divmodhi4_neg2>
    5e4c:	3e f4       	brtc	.+14     	; 0x5e5c <__divmodhi4_exit>

00005e4e <__divmodhi4_neg1>:
    5e4e:	90 95       	com	r25
    5e50:	81 95       	neg	r24
    5e52:	9f 4f       	sbci	r25, 0xFF	; 255
    5e54:	08 95       	ret

00005e56 <__divmodhi4_neg2>:
    5e56:	70 95       	com	r23
    5e58:	61 95       	neg	r22
    5e5a:	7f 4f       	sbci	r23, 0xFF	; 255

00005e5c <__divmodhi4_exit>:
    5e5c:	08 95       	ret

00005e5e <__udivmodsi4>:
    5e5e:	a1 e2       	ldi	r26, 0x21	; 33
    5e60:	1a 2e       	mov	r1, r26
    5e62:	aa 1b       	sub	r26, r26
    5e64:	bb 1b       	sub	r27, r27
    5e66:	fd 01       	movw	r30, r26
    5e68:	0d c0       	rjmp	.+26     	; 0x5e84 <__udivmodsi4_ep>

00005e6a <__udivmodsi4_loop>:
    5e6a:	aa 1f       	adc	r26, r26
    5e6c:	bb 1f       	adc	r27, r27
    5e6e:	ee 1f       	adc	r30, r30
    5e70:	ff 1f       	adc	r31, r31
    5e72:	a2 17       	cp	r26, r18
    5e74:	b3 07       	cpc	r27, r19
    5e76:	e4 07       	cpc	r30, r20
    5e78:	f5 07       	cpc	r31, r21
    5e7a:	20 f0       	brcs	.+8      	; 0x5e84 <__udivmodsi4_ep>
    5e7c:	a2 1b       	sub	r26, r18
    5e7e:	b3 0b       	sbc	r27, r19
    5e80:	e4 0b       	sbc	r30, r20
    5e82:	f5 0b       	sbc	r31, r21

00005e84 <__udivmodsi4_ep>:
    5e84:	66 1f       	adc	r22, r22
    5e86:	77 1f       	adc	r23, r23
    5e88:	88 1f       	adc	r24, r24
    5e8a:	99 1f       	adc	r25, r25
    5e8c:	1a 94       	dec	r1
    5e8e:	69 f7       	brne	.-38     	; 0x5e6a <__udivmodsi4_loop>
    5e90:	60 95       	com	r22
    5e92:	70 95       	com	r23
    5e94:	80 95       	com	r24
    5e96:	90 95       	com	r25
    5e98:	9b 01       	movw	r18, r22
    5e9a:	ac 01       	movw	r20, r24
    5e9c:	bd 01       	movw	r22, r26
    5e9e:	cf 01       	movw	r24, r30
    5ea0:	08 95       	ret

00005ea2 <__tablejump2__>:
    5ea2:	ee 0f       	add	r30, r30
    5ea4:	ff 1f       	adc	r31, r31
    5ea6:	88 1f       	adc	r24, r24
    5ea8:	8b bf       	out	0x3b, r24	; 59
    5eaa:	07 90       	elpm	r0, Z+
    5eac:	f6 91       	elpm	r31, Z
    5eae:	e0 2d       	mov	r30, r0
    5eb0:	19 94       	eijmp

00005eb2 <__udivmodhi4>:
    5eb2:	aa 1b       	sub	r26, r26
    5eb4:	bb 1b       	sub	r27, r27
    5eb6:	51 e1       	ldi	r21, 0x11	; 17
    5eb8:	07 c0       	rjmp	.+14     	; 0x5ec8 <__udivmodhi4_ep>

00005eba <__udivmodhi4_loop>:
    5eba:	aa 1f       	adc	r26, r26
    5ebc:	bb 1f       	adc	r27, r27
    5ebe:	a6 17       	cp	r26, r22
    5ec0:	b7 07       	cpc	r27, r23
    5ec2:	10 f0       	brcs	.+4      	; 0x5ec8 <__udivmodhi4_ep>
    5ec4:	a6 1b       	sub	r26, r22
    5ec6:	b7 0b       	sbc	r27, r23

00005ec8 <__udivmodhi4_ep>:
    5ec8:	88 1f       	adc	r24, r24
    5eca:	99 1f       	adc	r25, r25
    5ecc:	5a 95       	dec	r21
    5ece:	a9 f7       	brne	.-22     	; 0x5eba <__udivmodhi4_loop>
    5ed0:	80 95       	com	r24
    5ed2:	90 95       	com	r25
    5ed4:	bc 01       	movw	r22, r24
    5ed6:	cd 01       	movw	r24, r26
    5ed8:	08 95       	ret

00005eda <calloc>:
    5eda:	0f 93       	push	r16
    5edc:	1f 93       	push	r17
    5ede:	cf 93       	push	r28
    5ee0:	df 93       	push	r29
    5ee2:	86 9f       	mul	r24, r22
    5ee4:	80 01       	movw	r16, r0
    5ee6:	87 9f       	mul	r24, r23
    5ee8:	10 0d       	add	r17, r0
    5eea:	96 9f       	mul	r25, r22
    5eec:	10 0d       	add	r17, r0
    5eee:	11 24       	eor	r1, r1
    5ef0:	c8 01       	movw	r24, r16
    5ef2:	0d d0       	rcall	.+26     	; 0x5f0e <malloc>
    5ef4:	ec 01       	movw	r28, r24
    5ef6:	00 97       	sbiw	r24, 0x00	; 0
    5ef8:	21 f0       	breq	.+8      	; 0x5f02 <calloc+0x28>
    5efa:	a8 01       	movw	r20, r16
    5efc:	60 e0       	ldi	r22, 0x00	; 0
    5efe:	70 e0       	ldi	r23, 0x00	; 0
    5f00:	89 d1       	rcall	.+786    	; 0x6214 <memset>
    5f02:	ce 01       	movw	r24, r28
    5f04:	df 91       	pop	r29
    5f06:	cf 91       	pop	r28
    5f08:	1f 91       	pop	r17
    5f0a:	0f 91       	pop	r16
    5f0c:	08 95       	ret

00005f0e <malloc>:
    5f0e:	0f 93       	push	r16
    5f10:	1f 93       	push	r17
    5f12:	cf 93       	push	r28
    5f14:	df 93       	push	r29
    5f16:	82 30       	cpi	r24, 0x02	; 2
    5f18:	91 05       	cpc	r25, r1
    5f1a:	10 f4       	brcc	.+4      	; 0x5f20 <malloc+0x12>
    5f1c:	82 e0       	ldi	r24, 0x02	; 2
    5f1e:	90 e0       	ldi	r25, 0x00	; 0
    5f20:	e0 91 69 1a 	lds	r30, 0x1A69	; 0x801a69 <__flp>
    5f24:	f0 91 6a 1a 	lds	r31, 0x1A6A	; 0x801a6a <__flp+0x1>
    5f28:	20 e0       	ldi	r18, 0x00	; 0
    5f2a:	30 e0       	ldi	r19, 0x00	; 0
    5f2c:	a0 e0       	ldi	r26, 0x00	; 0
    5f2e:	b0 e0       	ldi	r27, 0x00	; 0
    5f30:	30 97       	sbiw	r30, 0x00	; 0
    5f32:	19 f1       	breq	.+70     	; 0x5f7a <malloc+0x6c>
    5f34:	40 81       	ld	r20, Z
    5f36:	51 81       	ldd	r21, Z+1	; 0x01
    5f38:	02 81       	ldd	r16, Z+2	; 0x02
    5f3a:	13 81       	ldd	r17, Z+3	; 0x03
    5f3c:	48 17       	cp	r20, r24
    5f3e:	59 07       	cpc	r21, r25
    5f40:	c8 f0       	brcs	.+50     	; 0x5f74 <malloc+0x66>
    5f42:	84 17       	cp	r24, r20
    5f44:	95 07       	cpc	r25, r21
    5f46:	69 f4       	brne	.+26     	; 0x5f62 <malloc+0x54>
    5f48:	10 97       	sbiw	r26, 0x00	; 0
    5f4a:	31 f0       	breq	.+12     	; 0x5f58 <malloc+0x4a>
    5f4c:	12 96       	adiw	r26, 0x02	; 2
    5f4e:	0c 93       	st	X, r16
    5f50:	12 97       	sbiw	r26, 0x02	; 2
    5f52:	13 96       	adiw	r26, 0x03	; 3
    5f54:	1c 93       	st	X, r17
    5f56:	27 c0       	rjmp	.+78     	; 0x5fa6 <malloc+0x98>
    5f58:	00 93 69 1a 	sts	0x1A69, r16	; 0x801a69 <__flp>
    5f5c:	10 93 6a 1a 	sts	0x1A6A, r17	; 0x801a6a <__flp+0x1>
    5f60:	22 c0       	rjmp	.+68     	; 0x5fa6 <malloc+0x98>
    5f62:	21 15       	cp	r18, r1
    5f64:	31 05       	cpc	r19, r1
    5f66:	19 f0       	breq	.+6      	; 0x5f6e <malloc+0x60>
    5f68:	42 17       	cp	r20, r18
    5f6a:	53 07       	cpc	r21, r19
    5f6c:	18 f4       	brcc	.+6      	; 0x5f74 <malloc+0x66>
    5f6e:	9a 01       	movw	r18, r20
    5f70:	bd 01       	movw	r22, r26
    5f72:	ef 01       	movw	r28, r30
    5f74:	df 01       	movw	r26, r30
    5f76:	f8 01       	movw	r30, r16
    5f78:	db cf       	rjmp	.-74     	; 0x5f30 <malloc+0x22>
    5f7a:	21 15       	cp	r18, r1
    5f7c:	31 05       	cpc	r19, r1
    5f7e:	f9 f0       	breq	.+62     	; 0x5fbe <malloc+0xb0>
    5f80:	28 1b       	sub	r18, r24
    5f82:	39 0b       	sbc	r19, r25
    5f84:	24 30       	cpi	r18, 0x04	; 4
    5f86:	31 05       	cpc	r19, r1
    5f88:	80 f4       	brcc	.+32     	; 0x5faa <malloc+0x9c>
    5f8a:	8a 81       	ldd	r24, Y+2	; 0x02
    5f8c:	9b 81       	ldd	r25, Y+3	; 0x03
    5f8e:	61 15       	cp	r22, r1
    5f90:	71 05       	cpc	r23, r1
    5f92:	21 f0       	breq	.+8      	; 0x5f9c <malloc+0x8e>
    5f94:	fb 01       	movw	r30, r22
    5f96:	93 83       	std	Z+3, r25	; 0x03
    5f98:	82 83       	std	Z+2, r24	; 0x02
    5f9a:	04 c0       	rjmp	.+8      	; 0x5fa4 <malloc+0x96>
    5f9c:	90 93 6a 1a 	sts	0x1A6A, r25	; 0x801a6a <__flp+0x1>
    5fa0:	80 93 69 1a 	sts	0x1A69, r24	; 0x801a69 <__flp>
    5fa4:	fe 01       	movw	r30, r28
    5fa6:	32 96       	adiw	r30, 0x02	; 2
    5fa8:	44 c0       	rjmp	.+136    	; 0x6032 <malloc+0x124>
    5faa:	fe 01       	movw	r30, r28
    5fac:	e2 0f       	add	r30, r18
    5fae:	f3 1f       	adc	r31, r19
    5fb0:	81 93       	st	Z+, r24
    5fb2:	91 93       	st	Z+, r25
    5fb4:	22 50       	subi	r18, 0x02	; 2
    5fb6:	31 09       	sbc	r19, r1
    5fb8:	39 83       	std	Y+1, r19	; 0x01
    5fba:	28 83       	st	Y, r18
    5fbc:	3a c0       	rjmp	.+116    	; 0x6032 <malloc+0x124>
    5fbe:	20 91 67 1a 	lds	r18, 0x1A67	; 0x801a67 <__brkval>
    5fc2:	30 91 68 1a 	lds	r19, 0x1A68	; 0x801a68 <__brkval+0x1>
    5fc6:	23 2b       	or	r18, r19
    5fc8:	41 f4       	brne	.+16     	; 0x5fda <malloc+0xcc>
    5fca:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    5fce:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    5fd2:	30 93 68 1a 	sts	0x1A68, r19	; 0x801a68 <__brkval+0x1>
    5fd6:	20 93 67 1a 	sts	0x1A67, r18	; 0x801a67 <__brkval>
    5fda:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    5fde:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    5fe2:	21 15       	cp	r18, r1
    5fe4:	31 05       	cpc	r19, r1
    5fe6:	41 f4       	brne	.+16     	; 0x5ff8 <malloc+0xea>
    5fe8:	2d b7       	in	r18, 0x3d	; 61
    5fea:	3e b7       	in	r19, 0x3e	; 62
    5fec:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    5ff0:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    5ff4:	24 1b       	sub	r18, r20
    5ff6:	35 0b       	sbc	r19, r21
    5ff8:	e0 91 67 1a 	lds	r30, 0x1A67	; 0x801a67 <__brkval>
    5ffc:	f0 91 68 1a 	lds	r31, 0x1A68	; 0x801a68 <__brkval+0x1>
    6000:	e2 17       	cp	r30, r18
    6002:	f3 07       	cpc	r31, r19
    6004:	a0 f4       	brcc	.+40     	; 0x602e <malloc+0x120>
    6006:	2e 1b       	sub	r18, r30
    6008:	3f 0b       	sbc	r19, r31
    600a:	28 17       	cp	r18, r24
    600c:	39 07       	cpc	r19, r25
    600e:	78 f0       	brcs	.+30     	; 0x602e <malloc+0x120>
    6010:	ac 01       	movw	r20, r24
    6012:	4e 5f       	subi	r20, 0xFE	; 254
    6014:	5f 4f       	sbci	r21, 0xFF	; 255
    6016:	24 17       	cp	r18, r20
    6018:	35 07       	cpc	r19, r21
    601a:	48 f0       	brcs	.+18     	; 0x602e <malloc+0x120>
    601c:	4e 0f       	add	r20, r30
    601e:	5f 1f       	adc	r21, r31
    6020:	50 93 68 1a 	sts	0x1A68, r21	; 0x801a68 <__brkval+0x1>
    6024:	40 93 67 1a 	sts	0x1A67, r20	; 0x801a67 <__brkval>
    6028:	81 93       	st	Z+, r24
    602a:	91 93       	st	Z+, r25
    602c:	02 c0       	rjmp	.+4      	; 0x6032 <malloc+0x124>
    602e:	e0 e0       	ldi	r30, 0x00	; 0
    6030:	f0 e0       	ldi	r31, 0x00	; 0
    6032:	cf 01       	movw	r24, r30
    6034:	df 91       	pop	r29
    6036:	cf 91       	pop	r28
    6038:	1f 91       	pop	r17
    603a:	0f 91       	pop	r16
    603c:	08 95       	ret

0000603e <free>:
    603e:	cf 93       	push	r28
    6040:	df 93       	push	r29
    6042:	00 97       	sbiw	r24, 0x00	; 0
    6044:	09 f4       	brne	.+2      	; 0x6048 <free+0xa>
    6046:	81 c0       	rjmp	.+258    	; 0x614a <free+0x10c>
    6048:	fc 01       	movw	r30, r24
    604a:	32 97       	sbiw	r30, 0x02	; 2
    604c:	13 82       	std	Z+3, r1	; 0x03
    604e:	12 82       	std	Z+2, r1	; 0x02
    6050:	a0 91 69 1a 	lds	r26, 0x1A69	; 0x801a69 <__flp>
    6054:	b0 91 6a 1a 	lds	r27, 0x1A6A	; 0x801a6a <__flp+0x1>
    6058:	10 97       	sbiw	r26, 0x00	; 0
    605a:	81 f4       	brne	.+32     	; 0x607c <free+0x3e>
    605c:	20 81       	ld	r18, Z
    605e:	31 81       	ldd	r19, Z+1	; 0x01
    6060:	82 0f       	add	r24, r18
    6062:	93 1f       	adc	r25, r19
    6064:	20 91 67 1a 	lds	r18, 0x1A67	; 0x801a67 <__brkval>
    6068:	30 91 68 1a 	lds	r19, 0x1A68	; 0x801a68 <__brkval+0x1>
    606c:	28 17       	cp	r18, r24
    606e:	39 07       	cpc	r19, r25
    6070:	51 f5       	brne	.+84     	; 0x60c6 <free+0x88>
    6072:	f0 93 68 1a 	sts	0x1A68, r31	; 0x801a68 <__brkval+0x1>
    6076:	e0 93 67 1a 	sts	0x1A67, r30	; 0x801a67 <__brkval>
    607a:	67 c0       	rjmp	.+206    	; 0x614a <free+0x10c>
    607c:	ed 01       	movw	r28, r26
    607e:	20 e0       	ldi	r18, 0x00	; 0
    6080:	30 e0       	ldi	r19, 0x00	; 0
    6082:	ce 17       	cp	r28, r30
    6084:	df 07       	cpc	r29, r31
    6086:	40 f4       	brcc	.+16     	; 0x6098 <free+0x5a>
    6088:	4a 81       	ldd	r20, Y+2	; 0x02
    608a:	5b 81       	ldd	r21, Y+3	; 0x03
    608c:	9e 01       	movw	r18, r28
    608e:	41 15       	cp	r20, r1
    6090:	51 05       	cpc	r21, r1
    6092:	f1 f0       	breq	.+60     	; 0x60d0 <free+0x92>
    6094:	ea 01       	movw	r28, r20
    6096:	f5 cf       	rjmp	.-22     	; 0x6082 <free+0x44>
    6098:	d3 83       	std	Z+3, r29	; 0x03
    609a:	c2 83       	std	Z+2, r28	; 0x02
    609c:	40 81       	ld	r20, Z
    609e:	51 81       	ldd	r21, Z+1	; 0x01
    60a0:	84 0f       	add	r24, r20
    60a2:	95 1f       	adc	r25, r21
    60a4:	c8 17       	cp	r28, r24
    60a6:	d9 07       	cpc	r29, r25
    60a8:	59 f4       	brne	.+22     	; 0x60c0 <free+0x82>
    60aa:	88 81       	ld	r24, Y
    60ac:	99 81       	ldd	r25, Y+1	; 0x01
    60ae:	84 0f       	add	r24, r20
    60b0:	95 1f       	adc	r25, r21
    60b2:	02 96       	adiw	r24, 0x02	; 2
    60b4:	91 83       	std	Z+1, r25	; 0x01
    60b6:	80 83       	st	Z, r24
    60b8:	8a 81       	ldd	r24, Y+2	; 0x02
    60ba:	9b 81       	ldd	r25, Y+3	; 0x03
    60bc:	93 83       	std	Z+3, r25	; 0x03
    60be:	82 83       	std	Z+2, r24	; 0x02
    60c0:	21 15       	cp	r18, r1
    60c2:	31 05       	cpc	r19, r1
    60c4:	29 f4       	brne	.+10     	; 0x60d0 <free+0x92>
    60c6:	f0 93 6a 1a 	sts	0x1A6A, r31	; 0x801a6a <__flp+0x1>
    60ca:	e0 93 69 1a 	sts	0x1A69, r30	; 0x801a69 <__flp>
    60ce:	3d c0       	rjmp	.+122    	; 0x614a <free+0x10c>
    60d0:	e9 01       	movw	r28, r18
    60d2:	fb 83       	std	Y+3, r31	; 0x03
    60d4:	ea 83       	std	Y+2, r30	; 0x02
    60d6:	49 91       	ld	r20, Y+
    60d8:	59 91       	ld	r21, Y+
    60da:	c4 0f       	add	r28, r20
    60dc:	d5 1f       	adc	r29, r21
    60de:	ec 17       	cp	r30, r28
    60e0:	fd 07       	cpc	r31, r29
    60e2:	61 f4       	brne	.+24     	; 0x60fc <free+0xbe>
    60e4:	80 81       	ld	r24, Z
    60e6:	91 81       	ldd	r25, Z+1	; 0x01
    60e8:	84 0f       	add	r24, r20
    60ea:	95 1f       	adc	r25, r21
    60ec:	02 96       	adiw	r24, 0x02	; 2
    60ee:	e9 01       	movw	r28, r18
    60f0:	99 83       	std	Y+1, r25	; 0x01
    60f2:	88 83       	st	Y, r24
    60f4:	82 81       	ldd	r24, Z+2	; 0x02
    60f6:	93 81       	ldd	r25, Z+3	; 0x03
    60f8:	9b 83       	std	Y+3, r25	; 0x03
    60fa:	8a 83       	std	Y+2, r24	; 0x02
    60fc:	e0 e0       	ldi	r30, 0x00	; 0
    60fe:	f0 e0       	ldi	r31, 0x00	; 0
    6100:	12 96       	adiw	r26, 0x02	; 2
    6102:	8d 91       	ld	r24, X+
    6104:	9c 91       	ld	r25, X
    6106:	13 97       	sbiw	r26, 0x03	; 3
    6108:	00 97       	sbiw	r24, 0x00	; 0
    610a:	19 f0       	breq	.+6      	; 0x6112 <free+0xd4>
    610c:	fd 01       	movw	r30, r26
    610e:	dc 01       	movw	r26, r24
    6110:	f7 cf       	rjmp	.-18     	; 0x6100 <free+0xc2>
    6112:	8d 91       	ld	r24, X+
    6114:	9c 91       	ld	r25, X
    6116:	11 97       	sbiw	r26, 0x01	; 1
    6118:	9d 01       	movw	r18, r26
    611a:	2e 5f       	subi	r18, 0xFE	; 254
    611c:	3f 4f       	sbci	r19, 0xFF	; 255
    611e:	82 0f       	add	r24, r18
    6120:	93 1f       	adc	r25, r19
    6122:	20 91 67 1a 	lds	r18, 0x1A67	; 0x801a67 <__brkval>
    6126:	30 91 68 1a 	lds	r19, 0x1A68	; 0x801a68 <__brkval+0x1>
    612a:	28 17       	cp	r18, r24
    612c:	39 07       	cpc	r19, r25
    612e:	69 f4       	brne	.+26     	; 0x614a <free+0x10c>
    6130:	30 97       	sbiw	r30, 0x00	; 0
    6132:	29 f4       	brne	.+10     	; 0x613e <free+0x100>
    6134:	10 92 6a 1a 	sts	0x1A6A, r1	; 0x801a6a <__flp+0x1>
    6138:	10 92 69 1a 	sts	0x1A69, r1	; 0x801a69 <__flp>
    613c:	02 c0       	rjmp	.+4      	; 0x6142 <free+0x104>
    613e:	13 82       	std	Z+3, r1	; 0x03
    6140:	12 82       	std	Z+2, r1	; 0x02
    6142:	b0 93 68 1a 	sts	0x1A68, r27	; 0x801a68 <__brkval+0x1>
    6146:	a0 93 67 1a 	sts	0x1A67, r26	; 0x801a67 <__brkval>
    614a:	df 91       	pop	r29
    614c:	cf 91       	pop	r28
    614e:	08 95       	ret

00006150 <do_rand>:
    6150:	8f 92       	push	r8
    6152:	9f 92       	push	r9
    6154:	af 92       	push	r10
    6156:	bf 92       	push	r11
    6158:	cf 92       	push	r12
    615a:	df 92       	push	r13
    615c:	ef 92       	push	r14
    615e:	ff 92       	push	r15
    6160:	cf 93       	push	r28
    6162:	df 93       	push	r29
    6164:	ec 01       	movw	r28, r24
    6166:	68 81       	ld	r22, Y
    6168:	79 81       	ldd	r23, Y+1	; 0x01
    616a:	8a 81       	ldd	r24, Y+2	; 0x02
    616c:	9b 81       	ldd	r25, Y+3	; 0x03
    616e:	61 15       	cp	r22, r1
    6170:	71 05       	cpc	r23, r1
    6172:	81 05       	cpc	r24, r1
    6174:	91 05       	cpc	r25, r1
    6176:	21 f4       	brne	.+8      	; 0x6180 <do_rand+0x30>
    6178:	64 e2       	ldi	r22, 0x24	; 36
    617a:	79 ed       	ldi	r23, 0xD9	; 217
    617c:	8b e5       	ldi	r24, 0x5B	; 91
    617e:	97 e0       	ldi	r25, 0x07	; 7
    6180:	2d e1       	ldi	r18, 0x1D	; 29
    6182:	33 ef       	ldi	r19, 0xF3	; 243
    6184:	41 e0       	ldi	r20, 0x01	; 1
    6186:	50 e0       	ldi	r21, 0x00	; 0
    6188:	b9 d3       	rcall	.+1906   	; 0x68fc <__divmodsi4>
    618a:	49 01       	movw	r8, r18
    618c:	5a 01       	movw	r10, r20
    618e:	9b 01       	movw	r18, r22
    6190:	ac 01       	movw	r20, r24
    6192:	a7 ea       	ldi	r26, 0xA7	; 167
    6194:	b1 e4       	ldi	r27, 0x41	; 65
    6196:	ce d3       	rcall	.+1948   	; 0x6934 <__muluhisi3>
    6198:	6b 01       	movw	r12, r22
    619a:	7c 01       	movw	r14, r24
    619c:	ac ee       	ldi	r26, 0xEC	; 236
    619e:	b4 ef       	ldi	r27, 0xF4	; 244
    61a0:	a5 01       	movw	r20, r10
    61a2:	94 01       	movw	r18, r8
    61a4:	d3 d3       	rcall	.+1958   	; 0x694c <__mulohisi3>
    61a6:	dc 01       	movw	r26, r24
    61a8:	cb 01       	movw	r24, r22
    61aa:	8c 0d       	add	r24, r12
    61ac:	9d 1d       	adc	r25, r13
    61ae:	ae 1d       	adc	r26, r14
    61b0:	bf 1d       	adc	r27, r15
    61b2:	b7 ff       	sbrs	r27, 7
    61b4:	03 c0       	rjmp	.+6      	; 0x61bc <do_rand+0x6c>
    61b6:	01 97       	sbiw	r24, 0x01	; 1
    61b8:	a1 09       	sbc	r26, r1
    61ba:	b0 48       	sbci	r27, 0x80	; 128
    61bc:	88 83       	st	Y, r24
    61be:	99 83       	std	Y+1, r25	; 0x01
    61c0:	aa 83       	std	Y+2, r26	; 0x02
    61c2:	bb 83       	std	Y+3, r27	; 0x03
    61c4:	9f 77       	andi	r25, 0x7F	; 127
    61c6:	df 91       	pop	r29
    61c8:	cf 91       	pop	r28
    61ca:	ff 90       	pop	r15
    61cc:	ef 90       	pop	r14
    61ce:	df 90       	pop	r13
    61d0:	cf 90       	pop	r12
    61d2:	bf 90       	pop	r11
    61d4:	af 90       	pop	r10
    61d6:	9f 90       	pop	r9
    61d8:	8f 90       	pop	r8
    61da:	08 95       	ret

000061dc <rand_r>:
    61dc:	b9 cf       	rjmp	.-142    	; 0x6150 <do_rand>

000061de <rand>:
    61de:	86 e0       	ldi	r24, 0x06	; 6
    61e0:	92 e0       	ldi	r25, 0x02	; 2
    61e2:	b6 cf       	rjmp	.-148    	; 0x6150 <do_rand>

000061e4 <srand>:
    61e4:	a0 e0       	ldi	r26, 0x00	; 0
    61e6:	b0 e0       	ldi	r27, 0x00	; 0
    61e8:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <next>
    61ec:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <next+0x1>
    61f0:	a0 93 08 02 	sts	0x0208, r26	; 0x800208 <next+0x2>
    61f4:	b0 93 09 02 	sts	0x0209, r27	; 0x800209 <next+0x3>
    61f8:	08 95       	ret

000061fa <abort>:
    61fa:	81 e0       	ldi	r24, 0x01	; 1
    61fc:	90 e0       	ldi	r25, 0x00	; 0
    61fe:	f8 94       	cli
    6200:	b8 c3       	rjmp	.+1904   	; 0x6972 <_exit>

00006202 <memcpy>:
    6202:	fb 01       	movw	r30, r22
    6204:	dc 01       	movw	r26, r24
    6206:	02 c0       	rjmp	.+4      	; 0x620c <memcpy+0xa>
    6208:	01 90       	ld	r0, Z+
    620a:	0d 92       	st	X+, r0
    620c:	41 50       	subi	r20, 0x01	; 1
    620e:	50 40       	sbci	r21, 0x00	; 0
    6210:	d8 f7       	brcc	.-10     	; 0x6208 <memcpy+0x6>
    6212:	08 95       	ret

00006214 <memset>:
    6214:	dc 01       	movw	r26, r24
    6216:	01 c0       	rjmp	.+2      	; 0x621a <memset+0x6>
    6218:	6d 93       	st	X+, r22
    621a:	41 50       	subi	r20, 0x01	; 1
    621c:	50 40       	sbci	r21, 0x00	; 0
    621e:	e0 f7       	brcc	.-8      	; 0x6218 <memset+0x4>
    6220:	08 95       	ret

00006222 <strcasestr>:
    6222:	fb 01       	movw	r30, r22
    6224:	51 91       	ld	r21, Z+
    6226:	55 23       	and	r21, r21
    6228:	b1 f0       	breq	.+44     	; 0x6256 <strcasestr+0x34>
    622a:	bf 01       	movw	r22, r30
    622c:	dc 01       	movw	r26, r24
    622e:	05 2e       	mov	r0, r21
    6230:	4d 91       	ld	r20, X+
    6232:	44 23       	and	r20, r20
    6234:	69 f0       	breq	.+26     	; 0x6250 <strcasestr+0x2e>
    6236:	10 d0       	rcall	.+32     	; 0x6258 <strcasestr+0x36>
    6238:	d9 f7       	brne	.-10     	; 0x6230 <strcasestr+0xe>
    623a:	cd 01       	movw	r24, r26
    623c:	01 90       	ld	r0, Z+
    623e:	00 20       	and	r0, r0
    6240:	49 f0       	breq	.+18     	; 0x6254 <strcasestr+0x32>
    6242:	4d 91       	ld	r20, X+
    6244:	41 11       	cpse	r20, r1
    6246:	08 d0       	rcall	.+16     	; 0x6258 <strcasestr+0x36>
    6248:	c9 f3       	breq	.-14     	; 0x623c <strcasestr+0x1a>
    624a:	fb 01       	movw	r30, r22
    624c:	41 11       	cpse	r20, r1
    624e:	ee cf       	rjmp	.-36     	; 0x622c <strcasestr+0xa>
    6250:	81 e0       	ldi	r24, 0x01	; 1
    6252:	90 e0       	ldi	r25, 0x00	; 0
    6254:	01 97       	sbiw	r24, 0x01	; 1
    6256:	08 95       	ret
    6258:	40 25       	eor	r20, r0
    625a:	39 f0       	breq	.+14     	; 0x626a <strcasestr+0x48>
    625c:	40 32       	cpi	r20, 0x20	; 32
    625e:	29 f4       	brne	.+10     	; 0x626a <strcasestr+0x48>
    6260:	40 29       	or	r20, r0
    6262:	4b 57       	subi	r20, 0x7B	; 123
    6264:	46 5e       	subi	r20, 0xE6	; 230
    6266:	08 f0       	brcs	.+2      	; 0x626a <strcasestr+0x48>
    6268:	18 94       	sez
    626a:	08 95       	ret

0000626c <strcat>:
    626c:	fb 01       	movw	r30, r22
    626e:	dc 01       	movw	r26, r24
    6270:	0d 90       	ld	r0, X+
    6272:	00 20       	and	r0, r0
    6274:	e9 f7       	brne	.-6      	; 0x6270 <strcat+0x4>
    6276:	11 97       	sbiw	r26, 0x01	; 1
    6278:	01 90       	ld	r0, Z+
    627a:	0d 92       	st	X+, r0
    627c:	00 20       	and	r0, r0
    627e:	e1 f7       	brne	.-8      	; 0x6278 <strcat+0xc>
    6280:	08 95       	ret

00006282 <strcpy>:
    6282:	fb 01       	movw	r30, r22
    6284:	dc 01       	movw	r26, r24
    6286:	01 90       	ld	r0, Z+
    6288:	0d 92       	st	X+, r0
    628a:	00 20       	and	r0, r0
    628c:	e1 f7       	brne	.-8      	; 0x6286 <strcpy+0x4>
    628e:	08 95       	ret

00006290 <strncasecmp>:
    6290:	fb 01       	movw	r30, r22
    6292:	dc 01       	movw	r26, r24
    6294:	41 50       	subi	r20, 0x01	; 1
    6296:	50 40       	sbci	r21, 0x00	; 0
    6298:	88 f0       	brcs	.+34     	; 0x62bc <strncasecmp+0x2c>
    629a:	8d 91       	ld	r24, X+
    629c:	81 34       	cpi	r24, 0x41	; 65
    629e:	1c f0       	brlt	.+6      	; 0x62a6 <strncasecmp+0x16>
    62a0:	8b 35       	cpi	r24, 0x5B	; 91
    62a2:	0c f4       	brge	.+2      	; 0x62a6 <strncasecmp+0x16>
    62a4:	80 5e       	subi	r24, 0xE0	; 224
    62a6:	61 91       	ld	r22, Z+
    62a8:	61 34       	cpi	r22, 0x41	; 65
    62aa:	1c f0       	brlt	.+6      	; 0x62b2 <strncasecmp+0x22>
    62ac:	6b 35       	cpi	r22, 0x5B	; 91
    62ae:	0c f4       	brge	.+2      	; 0x62b2 <strncasecmp+0x22>
    62b0:	60 5e       	subi	r22, 0xE0	; 224
    62b2:	86 1b       	sub	r24, r22
    62b4:	61 11       	cpse	r22, r1
    62b6:	71 f3       	breq	.-36     	; 0x6294 <strncasecmp+0x4>
    62b8:	99 0b       	sbc	r25, r25
    62ba:	08 95       	ret
    62bc:	88 1b       	sub	r24, r24
    62be:	fc cf       	rjmp	.-8      	; 0x62b8 <strncasecmp+0x28>

000062c0 <printf>:
    62c0:	cf 93       	push	r28
    62c2:	df 93       	push	r29
    62c4:	cd b7       	in	r28, 0x3d	; 61
    62c6:	de b7       	in	r29, 0x3e	; 62
    62c8:	ae 01       	movw	r20, r28
    62ca:	4a 5f       	subi	r20, 0xFA	; 250
    62cc:	5f 4f       	sbci	r21, 0xFF	; 255
    62ce:	fa 01       	movw	r30, r20
    62d0:	61 91       	ld	r22, Z+
    62d2:	71 91       	ld	r23, Z+
    62d4:	af 01       	movw	r20, r30
    62d6:	80 91 6d 1a 	lds	r24, 0x1A6D	; 0x801a6d <__iob+0x2>
    62da:	90 91 6e 1a 	lds	r25, 0x1A6E	; 0x801a6e <__iob+0x3>
    62de:	61 d0       	rcall	.+194    	; 0x63a2 <vfprintf>
    62e0:	df 91       	pop	r29
    62e2:	cf 91       	pop	r28
    62e4:	08 95       	ret

000062e6 <puts>:
    62e6:	0f 93       	push	r16
    62e8:	1f 93       	push	r17
    62ea:	cf 93       	push	r28
    62ec:	df 93       	push	r29
    62ee:	e0 91 6d 1a 	lds	r30, 0x1A6D	; 0x801a6d <__iob+0x2>
    62f2:	f0 91 6e 1a 	lds	r31, 0x1A6E	; 0x801a6e <__iob+0x3>
    62f6:	23 81       	ldd	r18, Z+3	; 0x03
    62f8:	21 ff       	sbrs	r18, 1
    62fa:	1b c0       	rjmp	.+54     	; 0x6332 <puts+0x4c>
    62fc:	8c 01       	movw	r16, r24
    62fe:	d0 e0       	ldi	r29, 0x00	; 0
    6300:	c0 e0       	ldi	r28, 0x00	; 0
    6302:	f8 01       	movw	r30, r16
    6304:	81 91       	ld	r24, Z+
    6306:	8f 01       	movw	r16, r30
    6308:	60 91 6d 1a 	lds	r22, 0x1A6D	; 0x801a6d <__iob+0x2>
    630c:	70 91 6e 1a 	lds	r23, 0x1A6E	; 0x801a6e <__iob+0x3>
    6310:	db 01       	movw	r26, r22
    6312:	18 96       	adiw	r26, 0x08	; 8
    6314:	ed 91       	ld	r30, X+
    6316:	fc 91       	ld	r31, X
    6318:	19 97       	sbiw	r26, 0x09	; 9
    631a:	88 23       	and	r24, r24
    631c:	31 f0       	breq	.+12     	; 0x632a <puts+0x44>
    631e:	19 95       	eicall
    6320:	89 2b       	or	r24, r25
    6322:	79 f3       	breq	.-34     	; 0x6302 <puts+0x1c>
    6324:	df ef       	ldi	r29, 0xFF	; 255
    6326:	cf ef       	ldi	r28, 0xFF	; 255
    6328:	ec cf       	rjmp	.-40     	; 0x6302 <puts+0x1c>
    632a:	8a e0       	ldi	r24, 0x0A	; 10
    632c:	19 95       	eicall
    632e:	89 2b       	or	r24, r25
    6330:	19 f0       	breq	.+6      	; 0x6338 <puts+0x52>
    6332:	8f ef       	ldi	r24, 0xFF	; 255
    6334:	9f ef       	ldi	r25, 0xFF	; 255
    6336:	02 c0       	rjmp	.+4      	; 0x633c <puts+0x56>
    6338:	8d 2f       	mov	r24, r29
    633a:	9c 2f       	mov	r25, r28
    633c:	df 91       	pop	r29
    633e:	cf 91       	pop	r28
    6340:	1f 91       	pop	r17
    6342:	0f 91       	pop	r16
    6344:	08 95       	ret

00006346 <sprintf>:
    6346:	0f 93       	push	r16
    6348:	1f 93       	push	r17
    634a:	cf 93       	push	r28
    634c:	df 93       	push	r29
    634e:	cd b7       	in	r28, 0x3d	; 61
    6350:	de b7       	in	r29, 0x3e	; 62
    6352:	2e 97       	sbiw	r28, 0x0e	; 14
    6354:	0f b6       	in	r0, 0x3f	; 63
    6356:	f8 94       	cli
    6358:	de bf       	out	0x3e, r29	; 62
    635a:	0f be       	out	0x3f, r0	; 63
    635c:	cd bf       	out	0x3d, r28	; 61
    635e:	0e 89       	ldd	r16, Y+22	; 0x16
    6360:	1f 89       	ldd	r17, Y+23	; 0x17
    6362:	86 e0       	ldi	r24, 0x06	; 6
    6364:	8c 83       	std	Y+4, r24	; 0x04
    6366:	1a 83       	std	Y+2, r17	; 0x02
    6368:	09 83       	std	Y+1, r16	; 0x01
    636a:	8f ef       	ldi	r24, 0xFF	; 255
    636c:	9f e7       	ldi	r25, 0x7F	; 127
    636e:	9e 83       	std	Y+6, r25	; 0x06
    6370:	8d 83       	std	Y+5, r24	; 0x05
    6372:	ae 01       	movw	r20, r28
    6374:	46 5e       	subi	r20, 0xE6	; 230
    6376:	5f 4f       	sbci	r21, 0xFF	; 255
    6378:	68 8d       	ldd	r22, Y+24	; 0x18
    637a:	79 8d       	ldd	r23, Y+25	; 0x19
    637c:	ce 01       	movw	r24, r28
    637e:	01 96       	adiw	r24, 0x01	; 1
    6380:	10 d0       	rcall	.+32     	; 0x63a2 <vfprintf>
    6382:	ef 81       	ldd	r30, Y+7	; 0x07
    6384:	f8 85       	ldd	r31, Y+8	; 0x08
    6386:	e0 0f       	add	r30, r16
    6388:	f1 1f       	adc	r31, r17
    638a:	10 82       	st	Z, r1
    638c:	2e 96       	adiw	r28, 0x0e	; 14
    638e:	0f b6       	in	r0, 0x3f	; 63
    6390:	f8 94       	cli
    6392:	de bf       	out	0x3e, r29	; 62
    6394:	0f be       	out	0x3f, r0	; 63
    6396:	cd bf       	out	0x3d, r28	; 61
    6398:	df 91       	pop	r29
    639a:	cf 91       	pop	r28
    639c:	1f 91       	pop	r17
    639e:	0f 91       	pop	r16
    63a0:	08 95       	ret

000063a2 <vfprintf>:
    63a2:	2f 92       	push	r2
    63a4:	3f 92       	push	r3
    63a6:	4f 92       	push	r4
    63a8:	5f 92       	push	r5
    63aa:	6f 92       	push	r6
    63ac:	7f 92       	push	r7
    63ae:	8f 92       	push	r8
    63b0:	9f 92       	push	r9
    63b2:	af 92       	push	r10
    63b4:	bf 92       	push	r11
    63b6:	cf 92       	push	r12
    63b8:	df 92       	push	r13
    63ba:	ef 92       	push	r14
    63bc:	ff 92       	push	r15
    63be:	0f 93       	push	r16
    63c0:	1f 93       	push	r17
    63c2:	cf 93       	push	r28
    63c4:	df 93       	push	r29
    63c6:	cd b7       	in	r28, 0x3d	; 61
    63c8:	de b7       	in	r29, 0x3e	; 62
    63ca:	2b 97       	sbiw	r28, 0x0b	; 11
    63cc:	0f b6       	in	r0, 0x3f	; 63
    63ce:	f8 94       	cli
    63d0:	de bf       	out	0x3e, r29	; 62
    63d2:	0f be       	out	0x3f, r0	; 63
    63d4:	cd bf       	out	0x3d, r28	; 61
    63d6:	6c 01       	movw	r12, r24
    63d8:	7b 01       	movw	r14, r22
    63da:	8a 01       	movw	r16, r20
    63dc:	fc 01       	movw	r30, r24
    63de:	17 82       	std	Z+7, r1	; 0x07
    63e0:	16 82       	std	Z+6, r1	; 0x06
    63e2:	83 81       	ldd	r24, Z+3	; 0x03
    63e4:	81 ff       	sbrs	r24, 1
    63e6:	bf c1       	rjmp	.+894    	; 0x6766 <vfprintf+0x3c4>
    63e8:	ce 01       	movw	r24, r28
    63ea:	01 96       	adiw	r24, 0x01	; 1
    63ec:	3c 01       	movw	r6, r24
    63ee:	f6 01       	movw	r30, r12
    63f0:	93 81       	ldd	r25, Z+3	; 0x03
    63f2:	f7 01       	movw	r30, r14
    63f4:	93 fd       	sbrc	r25, 3
    63f6:	85 91       	lpm	r24, Z+
    63f8:	93 ff       	sbrs	r25, 3
    63fa:	81 91       	ld	r24, Z+
    63fc:	7f 01       	movw	r14, r30
    63fe:	88 23       	and	r24, r24
    6400:	09 f4       	brne	.+2      	; 0x6404 <vfprintf+0x62>
    6402:	ad c1       	rjmp	.+858    	; 0x675e <vfprintf+0x3bc>
    6404:	85 32       	cpi	r24, 0x25	; 37
    6406:	39 f4       	brne	.+14     	; 0x6416 <vfprintf+0x74>
    6408:	93 fd       	sbrc	r25, 3
    640a:	85 91       	lpm	r24, Z+
    640c:	93 ff       	sbrs	r25, 3
    640e:	81 91       	ld	r24, Z+
    6410:	7f 01       	movw	r14, r30
    6412:	85 32       	cpi	r24, 0x25	; 37
    6414:	21 f4       	brne	.+8      	; 0x641e <vfprintf+0x7c>
    6416:	b6 01       	movw	r22, r12
    6418:	90 e0       	ldi	r25, 0x00	; 0
    641a:	d6 d1       	rcall	.+940    	; 0x67c8 <fputc>
    641c:	e8 cf       	rjmp	.-48     	; 0x63ee <vfprintf+0x4c>
    641e:	91 2c       	mov	r9, r1
    6420:	21 2c       	mov	r2, r1
    6422:	31 2c       	mov	r3, r1
    6424:	ff e1       	ldi	r31, 0x1F	; 31
    6426:	f3 15       	cp	r31, r3
    6428:	d8 f0       	brcs	.+54     	; 0x6460 <vfprintf+0xbe>
    642a:	8b 32       	cpi	r24, 0x2B	; 43
    642c:	79 f0       	breq	.+30     	; 0x644c <vfprintf+0xaa>
    642e:	38 f4       	brcc	.+14     	; 0x643e <vfprintf+0x9c>
    6430:	80 32       	cpi	r24, 0x20	; 32
    6432:	79 f0       	breq	.+30     	; 0x6452 <vfprintf+0xb0>
    6434:	83 32       	cpi	r24, 0x23	; 35
    6436:	a1 f4       	brne	.+40     	; 0x6460 <vfprintf+0xbe>
    6438:	23 2d       	mov	r18, r3
    643a:	20 61       	ori	r18, 0x10	; 16
    643c:	1d c0       	rjmp	.+58     	; 0x6478 <vfprintf+0xd6>
    643e:	8d 32       	cpi	r24, 0x2D	; 45
    6440:	61 f0       	breq	.+24     	; 0x645a <vfprintf+0xb8>
    6442:	80 33       	cpi	r24, 0x30	; 48
    6444:	69 f4       	brne	.+26     	; 0x6460 <vfprintf+0xbe>
    6446:	23 2d       	mov	r18, r3
    6448:	21 60       	ori	r18, 0x01	; 1
    644a:	16 c0       	rjmp	.+44     	; 0x6478 <vfprintf+0xd6>
    644c:	83 2d       	mov	r24, r3
    644e:	82 60       	ori	r24, 0x02	; 2
    6450:	38 2e       	mov	r3, r24
    6452:	e3 2d       	mov	r30, r3
    6454:	e4 60       	ori	r30, 0x04	; 4
    6456:	3e 2e       	mov	r3, r30
    6458:	2a c0       	rjmp	.+84     	; 0x64ae <vfprintf+0x10c>
    645a:	f3 2d       	mov	r31, r3
    645c:	f8 60       	ori	r31, 0x08	; 8
    645e:	1d c0       	rjmp	.+58     	; 0x649a <vfprintf+0xf8>
    6460:	37 fc       	sbrc	r3, 7
    6462:	2d c0       	rjmp	.+90     	; 0x64be <vfprintf+0x11c>
    6464:	20 ed       	ldi	r18, 0xD0	; 208
    6466:	28 0f       	add	r18, r24
    6468:	2a 30       	cpi	r18, 0x0A	; 10
    646a:	40 f0       	brcs	.+16     	; 0x647c <vfprintf+0xda>
    646c:	8e 32       	cpi	r24, 0x2E	; 46
    646e:	b9 f4       	brne	.+46     	; 0x649e <vfprintf+0xfc>
    6470:	36 fc       	sbrc	r3, 6
    6472:	75 c1       	rjmp	.+746    	; 0x675e <vfprintf+0x3bc>
    6474:	23 2d       	mov	r18, r3
    6476:	20 64       	ori	r18, 0x40	; 64
    6478:	32 2e       	mov	r3, r18
    647a:	19 c0       	rjmp	.+50     	; 0x64ae <vfprintf+0x10c>
    647c:	36 fe       	sbrs	r3, 6
    647e:	06 c0       	rjmp	.+12     	; 0x648c <vfprintf+0xea>
    6480:	8a e0       	ldi	r24, 0x0A	; 10
    6482:	98 9e       	mul	r9, r24
    6484:	20 0d       	add	r18, r0
    6486:	11 24       	eor	r1, r1
    6488:	92 2e       	mov	r9, r18
    648a:	11 c0       	rjmp	.+34     	; 0x64ae <vfprintf+0x10c>
    648c:	ea e0       	ldi	r30, 0x0A	; 10
    648e:	2e 9e       	mul	r2, r30
    6490:	20 0d       	add	r18, r0
    6492:	11 24       	eor	r1, r1
    6494:	22 2e       	mov	r2, r18
    6496:	f3 2d       	mov	r31, r3
    6498:	f0 62       	ori	r31, 0x20	; 32
    649a:	3f 2e       	mov	r3, r31
    649c:	08 c0       	rjmp	.+16     	; 0x64ae <vfprintf+0x10c>
    649e:	8c 36       	cpi	r24, 0x6C	; 108
    64a0:	21 f4       	brne	.+8      	; 0x64aa <vfprintf+0x108>
    64a2:	83 2d       	mov	r24, r3
    64a4:	80 68       	ori	r24, 0x80	; 128
    64a6:	38 2e       	mov	r3, r24
    64a8:	02 c0       	rjmp	.+4      	; 0x64ae <vfprintf+0x10c>
    64aa:	88 36       	cpi	r24, 0x68	; 104
    64ac:	41 f4       	brne	.+16     	; 0x64be <vfprintf+0x11c>
    64ae:	f7 01       	movw	r30, r14
    64b0:	93 fd       	sbrc	r25, 3
    64b2:	85 91       	lpm	r24, Z+
    64b4:	93 ff       	sbrs	r25, 3
    64b6:	81 91       	ld	r24, Z+
    64b8:	7f 01       	movw	r14, r30
    64ba:	81 11       	cpse	r24, r1
    64bc:	b3 cf       	rjmp	.-154    	; 0x6424 <vfprintf+0x82>
    64be:	98 2f       	mov	r25, r24
    64c0:	9f 7d       	andi	r25, 0xDF	; 223
    64c2:	95 54       	subi	r25, 0x45	; 69
    64c4:	93 30       	cpi	r25, 0x03	; 3
    64c6:	28 f4       	brcc	.+10     	; 0x64d2 <vfprintf+0x130>
    64c8:	0c 5f       	subi	r16, 0xFC	; 252
    64ca:	1f 4f       	sbci	r17, 0xFF	; 255
    64cc:	9f e3       	ldi	r25, 0x3F	; 63
    64ce:	99 83       	std	Y+1, r25	; 0x01
    64d0:	0d c0       	rjmp	.+26     	; 0x64ec <vfprintf+0x14a>
    64d2:	83 36       	cpi	r24, 0x63	; 99
    64d4:	31 f0       	breq	.+12     	; 0x64e2 <vfprintf+0x140>
    64d6:	83 37       	cpi	r24, 0x73	; 115
    64d8:	71 f0       	breq	.+28     	; 0x64f6 <vfprintf+0x154>
    64da:	83 35       	cpi	r24, 0x53	; 83
    64dc:	09 f0       	breq	.+2      	; 0x64e0 <vfprintf+0x13e>
    64de:	55 c0       	rjmp	.+170    	; 0x658a <vfprintf+0x1e8>
    64e0:	20 c0       	rjmp	.+64     	; 0x6522 <vfprintf+0x180>
    64e2:	f8 01       	movw	r30, r16
    64e4:	80 81       	ld	r24, Z
    64e6:	89 83       	std	Y+1, r24	; 0x01
    64e8:	0e 5f       	subi	r16, 0xFE	; 254
    64ea:	1f 4f       	sbci	r17, 0xFF	; 255
    64ec:	88 24       	eor	r8, r8
    64ee:	83 94       	inc	r8
    64f0:	91 2c       	mov	r9, r1
    64f2:	53 01       	movw	r10, r6
    64f4:	12 c0       	rjmp	.+36     	; 0x651a <vfprintf+0x178>
    64f6:	28 01       	movw	r4, r16
    64f8:	f2 e0       	ldi	r31, 0x02	; 2
    64fa:	4f 0e       	add	r4, r31
    64fc:	51 1c       	adc	r5, r1
    64fe:	f8 01       	movw	r30, r16
    6500:	a0 80       	ld	r10, Z
    6502:	b1 80       	ldd	r11, Z+1	; 0x01
    6504:	36 fe       	sbrs	r3, 6
    6506:	03 c0       	rjmp	.+6      	; 0x650e <vfprintf+0x16c>
    6508:	69 2d       	mov	r22, r9
    650a:	70 e0       	ldi	r23, 0x00	; 0
    650c:	02 c0       	rjmp	.+4      	; 0x6512 <vfprintf+0x170>
    650e:	6f ef       	ldi	r22, 0xFF	; 255
    6510:	7f ef       	ldi	r23, 0xFF	; 255
    6512:	c5 01       	movw	r24, r10
    6514:	4e d1       	rcall	.+668    	; 0x67b2 <strnlen>
    6516:	4c 01       	movw	r8, r24
    6518:	82 01       	movw	r16, r4
    651a:	f3 2d       	mov	r31, r3
    651c:	ff 77       	andi	r31, 0x7F	; 127
    651e:	3f 2e       	mov	r3, r31
    6520:	15 c0       	rjmp	.+42     	; 0x654c <vfprintf+0x1aa>
    6522:	28 01       	movw	r4, r16
    6524:	22 e0       	ldi	r18, 0x02	; 2
    6526:	42 0e       	add	r4, r18
    6528:	51 1c       	adc	r5, r1
    652a:	f8 01       	movw	r30, r16
    652c:	a0 80       	ld	r10, Z
    652e:	b1 80       	ldd	r11, Z+1	; 0x01
    6530:	36 fe       	sbrs	r3, 6
    6532:	03 c0       	rjmp	.+6      	; 0x653a <vfprintf+0x198>
    6534:	69 2d       	mov	r22, r9
    6536:	70 e0       	ldi	r23, 0x00	; 0
    6538:	02 c0       	rjmp	.+4      	; 0x653e <vfprintf+0x19c>
    653a:	6f ef       	ldi	r22, 0xFF	; 255
    653c:	7f ef       	ldi	r23, 0xFF	; 255
    653e:	c5 01       	movw	r24, r10
    6540:	2d d1       	rcall	.+602    	; 0x679c <strnlen_P>
    6542:	4c 01       	movw	r8, r24
    6544:	f3 2d       	mov	r31, r3
    6546:	f0 68       	ori	r31, 0x80	; 128
    6548:	3f 2e       	mov	r3, r31
    654a:	82 01       	movw	r16, r4
    654c:	33 fc       	sbrc	r3, 3
    654e:	19 c0       	rjmp	.+50     	; 0x6582 <vfprintf+0x1e0>
    6550:	82 2d       	mov	r24, r2
    6552:	90 e0       	ldi	r25, 0x00	; 0
    6554:	88 16       	cp	r8, r24
    6556:	99 06       	cpc	r9, r25
    6558:	a0 f4       	brcc	.+40     	; 0x6582 <vfprintf+0x1e0>
    655a:	b6 01       	movw	r22, r12
    655c:	80 e2       	ldi	r24, 0x20	; 32
    655e:	90 e0       	ldi	r25, 0x00	; 0
    6560:	33 d1       	rcall	.+614    	; 0x67c8 <fputc>
    6562:	2a 94       	dec	r2
    6564:	f5 cf       	rjmp	.-22     	; 0x6550 <vfprintf+0x1ae>
    6566:	f5 01       	movw	r30, r10
    6568:	37 fc       	sbrc	r3, 7
    656a:	85 91       	lpm	r24, Z+
    656c:	37 fe       	sbrs	r3, 7
    656e:	81 91       	ld	r24, Z+
    6570:	5f 01       	movw	r10, r30
    6572:	b6 01       	movw	r22, r12
    6574:	90 e0       	ldi	r25, 0x00	; 0
    6576:	28 d1       	rcall	.+592    	; 0x67c8 <fputc>
    6578:	21 10       	cpse	r2, r1
    657a:	2a 94       	dec	r2
    657c:	21 e0       	ldi	r18, 0x01	; 1
    657e:	82 1a       	sub	r8, r18
    6580:	91 08       	sbc	r9, r1
    6582:	81 14       	cp	r8, r1
    6584:	91 04       	cpc	r9, r1
    6586:	79 f7       	brne	.-34     	; 0x6566 <vfprintf+0x1c4>
    6588:	e1 c0       	rjmp	.+450    	; 0x674c <vfprintf+0x3aa>
    658a:	84 36       	cpi	r24, 0x64	; 100
    658c:	11 f0       	breq	.+4      	; 0x6592 <vfprintf+0x1f0>
    658e:	89 36       	cpi	r24, 0x69	; 105
    6590:	39 f5       	brne	.+78     	; 0x65e0 <vfprintf+0x23e>
    6592:	f8 01       	movw	r30, r16
    6594:	37 fe       	sbrs	r3, 7
    6596:	07 c0       	rjmp	.+14     	; 0x65a6 <vfprintf+0x204>
    6598:	60 81       	ld	r22, Z
    659a:	71 81       	ldd	r23, Z+1	; 0x01
    659c:	82 81       	ldd	r24, Z+2	; 0x02
    659e:	93 81       	ldd	r25, Z+3	; 0x03
    65a0:	0c 5f       	subi	r16, 0xFC	; 252
    65a2:	1f 4f       	sbci	r17, 0xFF	; 255
    65a4:	08 c0       	rjmp	.+16     	; 0x65b6 <vfprintf+0x214>
    65a6:	60 81       	ld	r22, Z
    65a8:	71 81       	ldd	r23, Z+1	; 0x01
    65aa:	07 2e       	mov	r0, r23
    65ac:	00 0c       	add	r0, r0
    65ae:	88 0b       	sbc	r24, r24
    65b0:	99 0b       	sbc	r25, r25
    65b2:	0e 5f       	subi	r16, 0xFE	; 254
    65b4:	1f 4f       	sbci	r17, 0xFF	; 255
    65b6:	f3 2d       	mov	r31, r3
    65b8:	ff 76       	andi	r31, 0x6F	; 111
    65ba:	3f 2e       	mov	r3, r31
    65bc:	97 ff       	sbrs	r25, 7
    65be:	09 c0       	rjmp	.+18     	; 0x65d2 <vfprintf+0x230>
    65c0:	90 95       	com	r25
    65c2:	80 95       	com	r24
    65c4:	70 95       	com	r23
    65c6:	61 95       	neg	r22
    65c8:	7f 4f       	sbci	r23, 0xFF	; 255
    65ca:	8f 4f       	sbci	r24, 0xFF	; 255
    65cc:	9f 4f       	sbci	r25, 0xFF	; 255
    65ce:	f0 68       	ori	r31, 0x80	; 128
    65d0:	3f 2e       	mov	r3, r31
    65d2:	2a e0       	ldi	r18, 0x0A	; 10
    65d4:	30 e0       	ldi	r19, 0x00	; 0
    65d6:	a3 01       	movw	r20, r6
    65d8:	33 d1       	rcall	.+614    	; 0x6840 <__ultoa_invert>
    65da:	88 2e       	mov	r8, r24
    65dc:	86 18       	sub	r8, r6
    65de:	44 c0       	rjmp	.+136    	; 0x6668 <vfprintf+0x2c6>
    65e0:	85 37       	cpi	r24, 0x75	; 117
    65e2:	31 f4       	brne	.+12     	; 0x65f0 <vfprintf+0x24e>
    65e4:	23 2d       	mov	r18, r3
    65e6:	2f 7e       	andi	r18, 0xEF	; 239
    65e8:	b2 2e       	mov	r11, r18
    65ea:	2a e0       	ldi	r18, 0x0A	; 10
    65ec:	30 e0       	ldi	r19, 0x00	; 0
    65ee:	25 c0       	rjmp	.+74     	; 0x663a <vfprintf+0x298>
    65f0:	93 2d       	mov	r25, r3
    65f2:	99 7f       	andi	r25, 0xF9	; 249
    65f4:	b9 2e       	mov	r11, r25
    65f6:	8f 36       	cpi	r24, 0x6F	; 111
    65f8:	c1 f0       	breq	.+48     	; 0x662a <vfprintf+0x288>
    65fa:	18 f4       	brcc	.+6      	; 0x6602 <vfprintf+0x260>
    65fc:	88 35       	cpi	r24, 0x58	; 88
    65fe:	79 f0       	breq	.+30     	; 0x661e <vfprintf+0x27c>
    6600:	ae c0       	rjmp	.+348    	; 0x675e <vfprintf+0x3bc>
    6602:	80 37       	cpi	r24, 0x70	; 112
    6604:	19 f0       	breq	.+6      	; 0x660c <vfprintf+0x26a>
    6606:	88 37       	cpi	r24, 0x78	; 120
    6608:	21 f0       	breq	.+8      	; 0x6612 <vfprintf+0x270>
    660a:	a9 c0       	rjmp	.+338    	; 0x675e <vfprintf+0x3bc>
    660c:	e9 2f       	mov	r30, r25
    660e:	e0 61       	ori	r30, 0x10	; 16
    6610:	be 2e       	mov	r11, r30
    6612:	b4 fe       	sbrs	r11, 4
    6614:	0d c0       	rjmp	.+26     	; 0x6630 <vfprintf+0x28e>
    6616:	fb 2d       	mov	r31, r11
    6618:	f4 60       	ori	r31, 0x04	; 4
    661a:	bf 2e       	mov	r11, r31
    661c:	09 c0       	rjmp	.+18     	; 0x6630 <vfprintf+0x28e>
    661e:	34 fe       	sbrs	r3, 4
    6620:	0a c0       	rjmp	.+20     	; 0x6636 <vfprintf+0x294>
    6622:	29 2f       	mov	r18, r25
    6624:	26 60       	ori	r18, 0x06	; 6
    6626:	b2 2e       	mov	r11, r18
    6628:	06 c0       	rjmp	.+12     	; 0x6636 <vfprintf+0x294>
    662a:	28 e0       	ldi	r18, 0x08	; 8
    662c:	30 e0       	ldi	r19, 0x00	; 0
    662e:	05 c0       	rjmp	.+10     	; 0x663a <vfprintf+0x298>
    6630:	20 e1       	ldi	r18, 0x10	; 16
    6632:	30 e0       	ldi	r19, 0x00	; 0
    6634:	02 c0       	rjmp	.+4      	; 0x663a <vfprintf+0x298>
    6636:	20 e1       	ldi	r18, 0x10	; 16
    6638:	32 e0       	ldi	r19, 0x02	; 2
    663a:	f8 01       	movw	r30, r16
    663c:	b7 fe       	sbrs	r11, 7
    663e:	07 c0       	rjmp	.+14     	; 0x664e <vfprintf+0x2ac>
    6640:	60 81       	ld	r22, Z
    6642:	71 81       	ldd	r23, Z+1	; 0x01
    6644:	82 81       	ldd	r24, Z+2	; 0x02
    6646:	93 81       	ldd	r25, Z+3	; 0x03
    6648:	0c 5f       	subi	r16, 0xFC	; 252
    664a:	1f 4f       	sbci	r17, 0xFF	; 255
    664c:	06 c0       	rjmp	.+12     	; 0x665a <vfprintf+0x2b8>
    664e:	60 81       	ld	r22, Z
    6650:	71 81       	ldd	r23, Z+1	; 0x01
    6652:	80 e0       	ldi	r24, 0x00	; 0
    6654:	90 e0       	ldi	r25, 0x00	; 0
    6656:	0e 5f       	subi	r16, 0xFE	; 254
    6658:	1f 4f       	sbci	r17, 0xFF	; 255
    665a:	a3 01       	movw	r20, r6
    665c:	f1 d0       	rcall	.+482    	; 0x6840 <__ultoa_invert>
    665e:	88 2e       	mov	r8, r24
    6660:	86 18       	sub	r8, r6
    6662:	fb 2d       	mov	r31, r11
    6664:	ff 77       	andi	r31, 0x7F	; 127
    6666:	3f 2e       	mov	r3, r31
    6668:	36 fe       	sbrs	r3, 6
    666a:	0d c0       	rjmp	.+26     	; 0x6686 <vfprintf+0x2e4>
    666c:	23 2d       	mov	r18, r3
    666e:	2e 7f       	andi	r18, 0xFE	; 254
    6670:	a2 2e       	mov	r10, r18
    6672:	89 14       	cp	r8, r9
    6674:	58 f4       	brcc	.+22     	; 0x668c <vfprintf+0x2ea>
    6676:	34 fe       	sbrs	r3, 4
    6678:	0b c0       	rjmp	.+22     	; 0x6690 <vfprintf+0x2ee>
    667a:	32 fc       	sbrc	r3, 2
    667c:	09 c0       	rjmp	.+18     	; 0x6690 <vfprintf+0x2ee>
    667e:	83 2d       	mov	r24, r3
    6680:	8e 7e       	andi	r24, 0xEE	; 238
    6682:	a8 2e       	mov	r10, r24
    6684:	05 c0       	rjmp	.+10     	; 0x6690 <vfprintf+0x2ee>
    6686:	b8 2c       	mov	r11, r8
    6688:	a3 2c       	mov	r10, r3
    668a:	03 c0       	rjmp	.+6      	; 0x6692 <vfprintf+0x2f0>
    668c:	b8 2c       	mov	r11, r8
    668e:	01 c0       	rjmp	.+2      	; 0x6692 <vfprintf+0x2f0>
    6690:	b9 2c       	mov	r11, r9
    6692:	a4 fe       	sbrs	r10, 4
    6694:	0f c0       	rjmp	.+30     	; 0x66b4 <vfprintf+0x312>
    6696:	fe 01       	movw	r30, r28
    6698:	e8 0d       	add	r30, r8
    669a:	f1 1d       	adc	r31, r1
    669c:	80 81       	ld	r24, Z
    669e:	80 33       	cpi	r24, 0x30	; 48
    66a0:	21 f4       	brne	.+8      	; 0x66aa <vfprintf+0x308>
    66a2:	9a 2d       	mov	r25, r10
    66a4:	99 7e       	andi	r25, 0xE9	; 233
    66a6:	a9 2e       	mov	r10, r25
    66a8:	09 c0       	rjmp	.+18     	; 0x66bc <vfprintf+0x31a>
    66aa:	a2 fe       	sbrs	r10, 2
    66ac:	06 c0       	rjmp	.+12     	; 0x66ba <vfprintf+0x318>
    66ae:	b3 94       	inc	r11
    66b0:	b3 94       	inc	r11
    66b2:	04 c0       	rjmp	.+8      	; 0x66bc <vfprintf+0x31a>
    66b4:	8a 2d       	mov	r24, r10
    66b6:	86 78       	andi	r24, 0x86	; 134
    66b8:	09 f0       	breq	.+2      	; 0x66bc <vfprintf+0x31a>
    66ba:	b3 94       	inc	r11
    66bc:	a3 fc       	sbrc	r10, 3
    66be:	10 c0       	rjmp	.+32     	; 0x66e0 <vfprintf+0x33e>
    66c0:	a0 fe       	sbrs	r10, 0
    66c2:	06 c0       	rjmp	.+12     	; 0x66d0 <vfprintf+0x32e>
    66c4:	b2 14       	cp	r11, r2
    66c6:	80 f4       	brcc	.+32     	; 0x66e8 <vfprintf+0x346>
    66c8:	28 0c       	add	r2, r8
    66ca:	92 2c       	mov	r9, r2
    66cc:	9b 18       	sub	r9, r11
    66ce:	0d c0       	rjmp	.+26     	; 0x66ea <vfprintf+0x348>
    66d0:	b2 14       	cp	r11, r2
    66d2:	58 f4       	brcc	.+22     	; 0x66ea <vfprintf+0x348>
    66d4:	b6 01       	movw	r22, r12
    66d6:	80 e2       	ldi	r24, 0x20	; 32
    66d8:	90 e0       	ldi	r25, 0x00	; 0
    66da:	76 d0       	rcall	.+236    	; 0x67c8 <fputc>
    66dc:	b3 94       	inc	r11
    66de:	f8 cf       	rjmp	.-16     	; 0x66d0 <vfprintf+0x32e>
    66e0:	b2 14       	cp	r11, r2
    66e2:	18 f4       	brcc	.+6      	; 0x66ea <vfprintf+0x348>
    66e4:	2b 18       	sub	r2, r11
    66e6:	02 c0       	rjmp	.+4      	; 0x66ec <vfprintf+0x34a>
    66e8:	98 2c       	mov	r9, r8
    66ea:	21 2c       	mov	r2, r1
    66ec:	a4 fe       	sbrs	r10, 4
    66ee:	0f c0       	rjmp	.+30     	; 0x670e <vfprintf+0x36c>
    66f0:	b6 01       	movw	r22, r12
    66f2:	80 e3       	ldi	r24, 0x30	; 48
    66f4:	90 e0       	ldi	r25, 0x00	; 0
    66f6:	68 d0       	rcall	.+208    	; 0x67c8 <fputc>
    66f8:	a2 fe       	sbrs	r10, 2
    66fa:	16 c0       	rjmp	.+44     	; 0x6728 <vfprintf+0x386>
    66fc:	a1 fc       	sbrc	r10, 1
    66fe:	03 c0       	rjmp	.+6      	; 0x6706 <vfprintf+0x364>
    6700:	88 e7       	ldi	r24, 0x78	; 120
    6702:	90 e0       	ldi	r25, 0x00	; 0
    6704:	02 c0       	rjmp	.+4      	; 0x670a <vfprintf+0x368>
    6706:	88 e5       	ldi	r24, 0x58	; 88
    6708:	90 e0       	ldi	r25, 0x00	; 0
    670a:	b6 01       	movw	r22, r12
    670c:	0c c0       	rjmp	.+24     	; 0x6726 <vfprintf+0x384>
    670e:	8a 2d       	mov	r24, r10
    6710:	86 78       	andi	r24, 0x86	; 134
    6712:	51 f0       	breq	.+20     	; 0x6728 <vfprintf+0x386>
    6714:	a1 fe       	sbrs	r10, 1
    6716:	02 c0       	rjmp	.+4      	; 0x671c <vfprintf+0x37a>
    6718:	8b e2       	ldi	r24, 0x2B	; 43
    671a:	01 c0       	rjmp	.+2      	; 0x671e <vfprintf+0x37c>
    671c:	80 e2       	ldi	r24, 0x20	; 32
    671e:	a7 fc       	sbrc	r10, 7
    6720:	8d e2       	ldi	r24, 0x2D	; 45
    6722:	b6 01       	movw	r22, r12
    6724:	90 e0       	ldi	r25, 0x00	; 0
    6726:	50 d0       	rcall	.+160    	; 0x67c8 <fputc>
    6728:	89 14       	cp	r8, r9
    672a:	30 f4       	brcc	.+12     	; 0x6738 <vfprintf+0x396>
    672c:	b6 01       	movw	r22, r12
    672e:	80 e3       	ldi	r24, 0x30	; 48
    6730:	90 e0       	ldi	r25, 0x00	; 0
    6732:	4a d0       	rcall	.+148    	; 0x67c8 <fputc>
    6734:	9a 94       	dec	r9
    6736:	f8 cf       	rjmp	.-16     	; 0x6728 <vfprintf+0x386>
    6738:	8a 94       	dec	r8
    673a:	f3 01       	movw	r30, r6
    673c:	e8 0d       	add	r30, r8
    673e:	f1 1d       	adc	r31, r1
    6740:	80 81       	ld	r24, Z
    6742:	b6 01       	movw	r22, r12
    6744:	90 e0       	ldi	r25, 0x00	; 0
    6746:	40 d0       	rcall	.+128    	; 0x67c8 <fputc>
    6748:	81 10       	cpse	r8, r1
    674a:	f6 cf       	rjmp	.-20     	; 0x6738 <vfprintf+0x396>
    674c:	22 20       	and	r2, r2
    674e:	09 f4       	brne	.+2      	; 0x6752 <vfprintf+0x3b0>
    6750:	4e ce       	rjmp	.-868    	; 0x63ee <vfprintf+0x4c>
    6752:	b6 01       	movw	r22, r12
    6754:	80 e2       	ldi	r24, 0x20	; 32
    6756:	90 e0       	ldi	r25, 0x00	; 0
    6758:	37 d0       	rcall	.+110    	; 0x67c8 <fputc>
    675a:	2a 94       	dec	r2
    675c:	f7 cf       	rjmp	.-18     	; 0x674c <vfprintf+0x3aa>
    675e:	f6 01       	movw	r30, r12
    6760:	86 81       	ldd	r24, Z+6	; 0x06
    6762:	97 81       	ldd	r25, Z+7	; 0x07
    6764:	02 c0       	rjmp	.+4      	; 0x676a <vfprintf+0x3c8>
    6766:	8f ef       	ldi	r24, 0xFF	; 255
    6768:	9f ef       	ldi	r25, 0xFF	; 255
    676a:	2b 96       	adiw	r28, 0x0b	; 11
    676c:	0f b6       	in	r0, 0x3f	; 63
    676e:	f8 94       	cli
    6770:	de bf       	out	0x3e, r29	; 62
    6772:	0f be       	out	0x3f, r0	; 63
    6774:	cd bf       	out	0x3d, r28	; 61
    6776:	df 91       	pop	r29
    6778:	cf 91       	pop	r28
    677a:	1f 91       	pop	r17
    677c:	0f 91       	pop	r16
    677e:	ff 90       	pop	r15
    6780:	ef 90       	pop	r14
    6782:	df 90       	pop	r13
    6784:	cf 90       	pop	r12
    6786:	bf 90       	pop	r11
    6788:	af 90       	pop	r10
    678a:	9f 90       	pop	r9
    678c:	8f 90       	pop	r8
    678e:	7f 90       	pop	r7
    6790:	6f 90       	pop	r6
    6792:	5f 90       	pop	r5
    6794:	4f 90       	pop	r4
    6796:	3f 90       	pop	r3
    6798:	2f 90       	pop	r2
    679a:	08 95       	ret

0000679c <strnlen_P>:
    679c:	fc 01       	movw	r30, r24
    679e:	05 90       	lpm	r0, Z+
    67a0:	61 50       	subi	r22, 0x01	; 1
    67a2:	70 40       	sbci	r23, 0x00	; 0
    67a4:	01 10       	cpse	r0, r1
    67a6:	d8 f7       	brcc	.-10     	; 0x679e <strnlen_P+0x2>
    67a8:	80 95       	com	r24
    67aa:	90 95       	com	r25
    67ac:	8e 0f       	add	r24, r30
    67ae:	9f 1f       	adc	r25, r31
    67b0:	08 95       	ret

000067b2 <strnlen>:
    67b2:	fc 01       	movw	r30, r24
    67b4:	61 50       	subi	r22, 0x01	; 1
    67b6:	70 40       	sbci	r23, 0x00	; 0
    67b8:	01 90       	ld	r0, Z+
    67ba:	01 10       	cpse	r0, r1
    67bc:	d8 f7       	brcc	.-10     	; 0x67b4 <strnlen+0x2>
    67be:	80 95       	com	r24
    67c0:	90 95       	com	r25
    67c2:	8e 0f       	add	r24, r30
    67c4:	9f 1f       	adc	r25, r31
    67c6:	08 95       	ret

000067c8 <fputc>:
    67c8:	0f 93       	push	r16
    67ca:	1f 93       	push	r17
    67cc:	cf 93       	push	r28
    67ce:	df 93       	push	r29
    67d0:	fb 01       	movw	r30, r22
    67d2:	23 81       	ldd	r18, Z+3	; 0x03
    67d4:	21 fd       	sbrc	r18, 1
    67d6:	03 c0       	rjmp	.+6      	; 0x67de <fputc+0x16>
    67d8:	8f ef       	ldi	r24, 0xFF	; 255
    67da:	9f ef       	ldi	r25, 0xFF	; 255
    67dc:	2c c0       	rjmp	.+88     	; 0x6836 <fputc+0x6e>
    67de:	22 ff       	sbrs	r18, 2
    67e0:	16 c0       	rjmp	.+44     	; 0x680e <fputc+0x46>
    67e2:	46 81       	ldd	r20, Z+6	; 0x06
    67e4:	57 81       	ldd	r21, Z+7	; 0x07
    67e6:	24 81       	ldd	r18, Z+4	; 0x04
    67e8:	35 81       	ldd	r19, Z+5	; 0x05
    67ea:	42 17       	cp	r20, r18
    67ec:	53 07       	cpc	r21, r19
    67ee:	44 f4       	brge	.+16     	; 0x6800 <fputc+0x38>
    67f0:	a0 81       	ld	r26, Z
    67f2:	b1 81       	ldd	r27, Z+1	; 0x01
    67f4:	9d 01       	movw	r18, r26
    67f6:	2f 5f       	subi	r18, 0xFF	; 255
    67f8:	3f 4f       	sbci	r19, 0xFF	; 255
    67fa:	31 83       	std	Z+1, r19	; 0x01
    67fc:	20 83       	st	Z, r18
    67fe:	8c 93       	st	X, r24
    6800:	26 81       	ldd	r18, Z+6	; 0x06
    6802:	37 81       	ldd	r19, Z+7	; 0x07
    6804:	2f 5f       	subi	r18, 0xFF	; 255
    6806:	3f 4f       	sbci	r19, 0xFF	; 255
    6808:	37 83       	std	Z+7, r19	; 0x07
    680a:	26 83       	std	Z+6, r18	; 0x06
    680c:	14 c0       	rjmp	.+40     	; 0x6836 <fputc+0x6e>
    680e:	8b 01       	movw	r16, r22
    6810:	ec 01       	movw	r28, r24
    6812:	fb 01       	movw	r30, r22
    6814:	00 84       	ldd	r0, Z+8	; 0x08
    6816:	f1 85       	ldd	r31, Z+9	; 0x09
    6818:	e0 2d       	mov	r30, r0
    681a:	19 95       	eicall
    681c:	89 2b       	or	r24, r25
    681e:	e1 f6       	brne	.-72     	; 0x67d8 <fputc+0x10>
    6820:	d8 01       	movw	r26, r16
    6822:	16 96       	adiw	r26, 0x06	; 6
    6824:	8d 91       	ld	r24, X+
    6826:	9c 91       	ld	r25, X
    6828:	17 97       	sbiw	r26, 0x07	; 7
    682a:	01 96       	adiw	r24, 0x01	; 1
    682c:	17 96       	adiw	r26, 0x07	; 7
    682e:	9c 93       	st	X, r25
    6830:	8e 93       	st	-X, r24
    6832:	16 97       	sbiw	r26, 0x06	; 6
    6834:	ce 01       	movw	r24, r28
    6836:	df 91       	pop	r29
    6838:	cf 91       	pop	r28
    683a:	1f 91       	pop	r17
    683c:	0f 91       	pop	r16
    683e:	08 95       	ret

00006840 <__ultoa_invert>:
    6840:	fa 01       	movw	r30, r20
    6842:	aa 27       	eor	r26, r26
    6844:	28 30       	cpi	r18, 0x08	; 8
    6846:	51 f1       	breq	.+84     	; 0x689c <__ultoa_invert+0x5c>
    6848:	20 31       	cpi	r18, 0x10	; 16
    684a:	81 f1       	breq	.+96     	; 0x68ac <__ultoa_invert+0x6c>
    684c:	e8 94       	clt
    684e:	6f 93       	push	r22
    6850:	6e 7f       	andi	r22, 0xFE	; 254
    6852:	6e 5f       	subi	r22, 0xFE	; 254
    6854:	7f 4f       	sbci	r23, 0xFF	; 255
    6856:	8f 4f       	sbci	r24, 0xFF	; 255
    6858:	9f 4f       	sbci	r25, 0xFF	; 255
    685a:	af 4f       	sbci	r26, 0xFF	; 255
    685c:	b1 e0       	ldi	r27, 0x01	; 1
    685e:	3e d0       	rcall	.+124    	; 0x68dc <__ultoa_invert+0x9c>
    6860:	b4 e0       	ldi	r27, 0x04	; 4
    6862:	3c d0       	rcall	.+120    	; 0x68dc <__ultoa_invert+0x9c>
    6864:	67 0f       	add	r22, r23
    6866:	78 1f       	adc	r23, r24
    6868:	89 1f       	adc	r24, r25
    686a:	9a 1f       	adc	r25, r26
    686c:	a1 1d       	adc	r26, r1
    686e:	68 0f       	add	r22, r24
    6870:	79 1f       	adc	r23, r25
    6872:	8a 1f       	adc	r24, r26
    6874:	91 1d       	adc	r25, r1
    6876:	a1 1d       	adc	r26, r1
    6878:	6a 0f       	add	r22, r26
    687a:	71 1d       	adc	r23, r1
    687c:	81 1d       	adc	r24, r1
    687e:	91 1d       	adc	r25, r1
    6880:	a1 1d       	adc	r26, r1
    6882:	20 d0       	rcall	.+64     	; 0x68c4 <__ultoa_invert+0x84>
    6884:	09 f4       	brne	.+2      	; 0x6888 <__ultoa_invert+0x48>
    6886:	68 94       	set
    6888:	3f 91       	pop	r19
    688a:	2a e0       	ldi	r18, 0x0A	; 10
    688c:	26 9f       	mul	r18, r22
    688e:	11 24       	eor	r1, r1
    6890:	30 19       	sub	r19, r0
    6892:	30 5d       	subi	r19, 0xD0	; 208
    6894:	31 93       	st	Z+, r19
    6896:	de f6       	brtc	.-74     	; 0x684e <__ultoa_invert+0xe>
    6898:	cf 01       	movw	r24, r30
    689a:	08 95       	ret
    689c:	46 2f       	mov	r20, r22
    689e:	47 70       	andi	r20, 0x07	; 7
    68a0:	40 5d       	subi	r20, 0xD0	; 208
    68a2:	41 93       	st	Z+, r20
    68a4:	b3 e0       	ldi	r27, 0x03	; 3
    68a6:	0f d0       	rcall	.+30     	; 0x68c6 <__ultoa_invert+0x86>
    68a8:	c9 f7       	brne	.-14     	; 0x689c <__ultoa_invert+0x5c>
    68aa:	f6 cf       	rjmp	.-20     	; 0x6898 <__ultoa_invert+0x58>
    68ac:	46 2f       	mov	r20, r22
    68ae:	4f 70       	andi	r20, 0x0F	; 15
    68b0:	40 5d       	subi	r20, 0xD0	; 208
    68b2:	4a 33       	cpi	r20, 0x3A	; 58
    68b4:	18 f0       	brcs	.+6      	; 0x68bc <__ultoa_invert+0x7c>
    68b6:	49 5d       	subi	r20, 0xD9	; 217
    68b8:	31 fd       	sbrc	r19, 1
    68ba:	40 52       	subi	r20, 0x20	; 32
    68bc:	41 93       	st	Z+, r20
    68be:	02 d0       	rcall	.+4      	; 0x68c4 <__ultoa_invert+0x84>
    68c0:	a9 f7       	brne	.-22     	; 0x68ac <__ultoa_invert+0x6c>
    68c2:	ea cf       	rjmp	.-44     	; 0x6898 <__ultoa_invert+0x58>
    68c4:	b4 e0       	ldi	r27, 0x04	; 4
    68c6:	a6 95       	lsr	r26
    68c8:	97 95       	ror	r25
    68ca:	87 95       	ror	r24
    68cc:	77 95       	ror	r23
    68ce:	67 95       	ror	r22
    68d0:	ba 95       	dec	r27
    68d2:	c9 f7       	brne	.-14     	; 0x68c6 <__ultoa_invert+0x86>
    68d4:	00 97       	sbiw	r24, 0x00	; 0
    68d6:	61 05       	cpc	r22, r1
    68d8:	71 05       	cpc	r23, r1
    68da:	08 95       	ret
    68dc:	9b 01       	movw	r18, r22
    68de:	ac 01       	movw	r20, r24
    68e0:	0a 2e       	mov	r0, r26
    68e2:	06 94       	lsr	r0
    68e4:	57 95       	ror	r21
    68e6:	47 95       	ror	r20
    68e8:	37 95       	ror	r19
    68ea:	27 95       	ror	r18
    68ec:	ba 95       	dec	r27
    68ee:	c9 f7       	brne	.-14     	; 0x68e2 <__ultoa_invert+0xa2>
    68f0:	62 0f       	add	r22, r18
    68f2:	73 1f       	adc	r23, r19
    68f4:	84 1f       	adc	r24, r20
    68f6:	95 1f       	adc	r25, r21
    68f8:	a0 1d       	adc	r26, r0
    68fa:	08 95       	ret

000068fc <__divmodsi4>:
    68fc:	05 2e       	mov	r0, r21
    68fe:	97 fb       	bst	r25, 7
    6900:	16 f4       	brtc	.+4      	; 0x6906 <__divmodsi4+0xa>
    6902:	00 94       	com	r0
    6904:	0f d0       	rcall	.+30     	; 0x6924 <__negsi2>
    6906:	57 fd       	sbrc	r21, 7
    6908:	05 d0       	rcall	.+10     	; 0x6914 <__divmodsi4_neg2>
    690a:	a9 da       	rcall	.-2734   	; 0x5e5e <__udivmodsi4>
    690c:	07 fc       	sbrc	r0, 7
    690e:	02 d0       	rcall	.+4      	; 0x6914 <__divmodsi4_neg2>
    6910:	46 f4       	brtc	.+16     	; 0x6922 <__divmodsi4_exit>
    6912:	08 c0       	rjmp	.+16     	; 0x6924 <__negsi2>

00006914 <__divmodsi4_neg2>:
    6914:	50 95       	com	r21
    6916:	40 95       	com	r20
    6918:	30 95       	com	r19
    691a:	21 95       	neg	r18
    691c:	3f 4f       	sbci	r19, 0xFF	; 255
    691e:	4f 4f       	sbci	r20, 0xFF	; 255
    6920:	5f 4f       	sbci	r21, 0xFF	; 255

00006922 <__divmodsi4_exit>:
    6922:	08 95       	ret

00006924 <__negsi2>:
    6924:	90 95       	com	r25
    6926:	80 95       	com	r24
    6928:	70 95       	com	r23
    692a:	61 95       	neg	r22
    692c:	7f 4f       	sbci	r23, 0xFF	; 255
    692e:	8f 4f       	sbci	r24, 0xFF	; 255
    6930:	9f 4f       	sbci	r25, 0xFF	; 255
    6932:	08 95       	ret

00006934 <__muluhisi3>:
    6934:	0f d0       	rcall	.+30     	; 0x6954 <__umulhisi3>
    6936:	a5 9f       	mul	r26, r21
    6938:	90 0d       	add	r25, r0
    693a:	b4 9f       	mul	r27, r20
    693c:	90 0d       	add	r25, r0
    693e:	a4 9f       	mul	r26, r20
    6940:	80 0d       	add	r24, r0
    6942:	91 1d       	adc	r25, r1
    6944:	11 24       	eor	r1, r1
    6946:	08 95       	ret

00006948 <__mulshisi3>:
    6948:	b7 ff       	sbrs	r27, 7
    694a:	f4 cf       	rjmp	.-24     	; 0x6934 <__muluhisi3>

0000694c <__mulohisi3>:
    694c:	f3 df       	rcall	.-26     	; 0x6934 <__muluhisi3>
    694e:	82 1b       	sub	r24, r18
    6950:	93 0b       	sbc	r25, r19
    6952:	08 95       	ret

00006954 <__umulhisi3>:
    6954:	a2 9f       	mul	r26, r18
    6956:	b0 01       	movw	r22, r0
    6958:	b3 9f       	mul	r27, r19
    695a:	c0 01       	movw	r24, r0
    695c:	a3 9f       	mul	r26, r19
    695e:	70 0d       	add	r23, r0
    6960:	81 1d       	adc	r24, r1
    6962:	11 24       	eor	r1, r1
    6964:	91 1d       	adc	r25, r1
    6966:	b2 9f       	mul	r27, r18
    6968:	70 0d       	add	r23, r0
    696a:	81 1d       	adc	r24, r1
    696c:	11 24       	eor	r1, r1
    696e:	91 1d       	adc	r25, r1
    6970:	08 95       	ret

00006972 <_exit>:
    6972:	f8 94       	cli

00006974 <__stop_program>:
    6974:	ff cf       	rjmp	.-2      	; 0x6974 <__stop_program>
