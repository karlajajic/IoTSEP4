
SEP4IOT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000678  00800200  00005d9e  00005e32  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005d9e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000128f  00800878  00800878  000064aa  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000064aa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006508  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000b90  00000000  00000000  00006548  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000e9ac  00000000  00000000  000070d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003b06  00000000  00000000  00015a84  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00006e27  00000000  00000000  0001958a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002868  00000000  00000000  000203b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004501  00000000  00000000  00022c1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000d6e9  00000000  00000000  0002711d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000bb0  00000000  00000000  00034806  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	4f c2       	rjmp	.+1182   	; 0x4a0 <__ctors_end>
       2:	00 00       	nop
       4:	6e c2       	rjmp	.+1244   	; 0x4e2 <__bad_interrupt>
       6:	00 00       	nop
       8:	6c c2       	rjmp	.+1240   	; 0x4e2 <__bad_interrupt>
       a:	00 00       	nop
       c:	6a c2       	rjmp	.+1236   	; 0x4e2 <__bad_interrupt>
       e:	00 00       	nop
      10:	68 c2       	rjmp	.+1232   	; 0x4e2 <__bad_interrupt>
      12:	00 00       	nop
      14:	66 c2       	rjmp	.+1228   	; 0x4e2 <__bad_interrupt>
      16:	00 00       	nop
      18:	64 c2       	rjmp	.+1224   	; 0x4e2 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	62 c2       	rjmp	.+1220   	; 0x4e2 <__bad_interrupt>
      1e:	00 00       	nop
      20:	60 c2       	rjmp	.+1216   	; 0x4e2 <__bad_interrupt>
      22:	00 00       	nop
      24:	5e c2       	rjmp	.+1212   	; 0x4e2 <__bad_interrupt>
      26:	00 00       	nop
      28:	5c c2       	rjmp	.+1208   	; 0x4e2 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	5a c2       	rjmp	.+1204   	; 0x4e2 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 ff 0b 	jmp	0x17fe	; 0x17fe <__vector_12>
      34:	56 c2       	rjmp	.+1196   	; 0x4e2 <__bad_interrupt>
      36:	00 00       	nop
      38:	54 c2       	rjmp	.+1192   	; 0x4e2 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	52 c2       	rjmp	.+1188   	; 0x4e2 <__bad_interrupt>
      3e:	00 00       	nop
      40:	50 c2       	rjmp	.+1184   	; 0x4e2 <__bad_interrupt>
      42:	00 00       	nop
      44:	4e c2       	rjmp	.+1180   	; 0x4e2 <__bad_interrupt>
      46:	00 00       	nop
      48:	4c c2       	rjmp	.+1176   	; 0x4e2 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	4a c2       	rjmp	.+1172   	; 0x4e2 <__bad_interrupt>
      4e:	00 00       	nop
      50:	48 c2       	rjmp	.+1168   	; 0x4e2 <__bad_interrupt>
      52:	00 00       	nop
      54:	46 c2       	rjmp	.+1164   	; 0x4e2 <__bad_interrupt>
      56:	00 00       	nop
      58:	44 c2       	rjmp	.+1160   	; 0x4e2 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	42 c2       	rjmp	.+1156   	; 0x4e2 <__bad_interrupt>
      5e:	00 00       	nop
      60:	40 c2       	rjmp	.+1152   	; 0x4e2 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 eb 23 	jmp	0x47d6	; 0x47d6 <__vector_25>
      68:	0c 94 3d 24 	jmp	0x487a	; 0x487a <__vector_26>
      6c:	3a c2       	rjmp	.+1140   	; 0x4e2 <__bad_interrupt>
      6e:	00 00       	nop
      70:	38 c2       	rjmp	.+1136   	; 0x4e2 <__bad_interrupt>
      72:	00 00       	nop
      74:	36 c2       	rjmp	.+1132   	; 0x4e2 <__bad_interrupt>
      76:	00 00       	nop
      78:	34 c2       	rjmp	.+1128   	; 0x4e2 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	32 c2       	rjmp	.+1124   	; 0x4e2 <__bad_interrupt>
      7e:	00 00       	nop
      80:	30 c2       	rjmp	.+1120   	; 0x4e2 <__bad_interrupt>
      82:	00 00       	nop
      84:	2e c2       	rjmp	.+1116   	; 0x4e2 <__bad_interrupt>
      86:	00 00       	nop
      88:	2c c2       	rjmp	.+1112   	; 0x4e2 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	2a c2       	rjmp	.+1108   	; 0x4e2 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 81 24 	jmp	0x4902	; 0x4902 <__vector_36>
      94:	0c 94 d3 24 	jmp	0x49a6	; 0x49a6 <__vector_37>
      98:	24 c2       	rjmp	.+1096   	; 0x4e2 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 1f 27 	jmp	0x4e3e	; 0x4e3e <__vector_39>
      a0:	20 c2       	rjmp	.+1088   	; 0x4e2 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	1e c2       	rjmp	.+1084   	; 0x4e2 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	1c c2       	rjmp	.+1080   	; 0x4e2 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	1a c2       	rjmp	.+1076   	; 0x4e2 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	18 c2       	rjmp	.+1072   	; 0x4e2 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	16 c2       	rjmp	.+1068   	; 0x4e2 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	14 c2       	rjmp	.+1064   	; 0x4e2 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	12 c2       	rjmp	.+1060   	; 0x4e2 <__bad_interrupt>
      be:	00 00       	nop
      c0:	10 c2       	rjmp	.+1056   	; 0x4e2 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	0e c2       	rjmp	.+1052   	; 0x4e2 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	0c c2       	rjmp	.+1048   	; 0x4e2 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 17 25 	jmp	0x4a2e	; 0x4a2e <__vector_51>
      d0:	0c 94 69 25 	jmp	0x4ad2	; 0x4ad2 <__vector_52>
      d4:	06 c2       	rjmp	.+1036   	; 0x4e2 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 ad 25 	jmp	0x4b5a	; 0x4b5a <__vector_54>
      dc:	0c 94 ff 25 	jmp	0x4bfe	; 0x4bfe <__vector_55>
      e0:	00 c2       	rjmp	.+1024   	; 0x4e2 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	c6 01       	movw	r24, r12
      e6:	c6 01       	movw	r24, r12
      e8:	c6 01       	movw	r24, r12
      ea:	00 02       	muls	r16, r16
      ec:	08 02       	muls	r16, r24
      ee:	1e 02       	muls	r17, r30
      f0:	c6 01       	movw	r24, r12
      f2:	c6 01       	movw	r24, r12
      f4:	00 02       	muls	r16, r16
      f6:	08 02       	muls	r16, r24
      f8:	41 27       	eor	r20, r17
      fa:	b1 27       	eor	r27, r17
      fc:	b1 27       	eor	r27, r17
      fe:	b1 27       	eor	r27, r17
     100:	b1 27       	eor	r27, r17
     102:	b1 27       	eor	r27, r17
     104:	b1 27       	eor	r27, r17
     106:	b1 27       	eor	r27, r17
     108:	41 27       	eor	r20, r17
     10a:	b1 27       	eor	r27, r17
     10c:	b1 27       	eor	r27, r17
     10e:	b1 27       	eor	r27, r17
     110:	b1 27       	eor	r27, r17
     112:	b1 27       	eor	r27, r17
     114:	b1 27       	eor	r27, r17
     116:	b1 27       	eor	r27, r17
     118:	43 27       	eor	r20, r19
     11a:	b1 27       	eor	r27, r17
     11c:	b1 27       	eor	r27, r17
     11e:	b1 27       	eor	r27, r17
     120:	b1 27       	eor	r27, r17
     122:	b1 27       	eor	r27, r17
     124:	b1 27       	eor	r27, r17
     126:	b1 27       	eor	r27, r17
     128:	b1 27       	eor	r27, r17
     12a:	b1 27       	eor	r27, r17
     12c:	b1 27       	eor	r27, r17
     12e:	b1 27       	eor	r27, r17
     130:	b1 27       	eor	r27, r17
     132:	b1 27       	eor	r27, r17
     134:	b1 27       	eor	r27, r17
     136:	b1 27       	eor	r27, r17
     138:	43 27       	eor	r20, r19
     13a:	b1 27       	eor	r27, r17
     13c:	b1 27       	eor	r27, r17
     13e:	b1 27       	eor	r27, r17
     140:	b1 27       	eor	r27, r17
     142:	b1 27       	eor	r27, r17
     144:	b1 27       	eor	r27, r17
     146:	b1 27       	eor	r27, r17
     148:	b1 27       	eor	r27, r17
     14a:	b1 27       	eor	r27, r17
     14c:	b1 27       	eor	r27, r17
     14e:	b1 27       	eor	r27, r17
     150:	b1 27       	eor	r27, r17
     152:	b1 27       	eor	r27, r17
     154:	b1 27       	eor	r27, r17
     156:	b1 27       	eor	r27, r17
     158:	ad 27       	eor	r26, r29
     15a:	b1 27       	eor	r27, r17
     15c:	b1 27       	eor	r27, r17
     15e:	b1 27       	eor	r27, r17
     160:	b1 27       	eor	r27, r17
     162:	b1 27       	eor	r27, r17
     164:	b1 27       	eor	r27, r17
     166:	b1 27       	eor	r27, r17
     168:	78 27       	eor	r23, r24
     16a:	b1 27       	eor	r27, r17
     16c:	b1 27       	eor	r27, r17
     16e:	b1 27       	eor	r27, r17
     170:	b1 27       	eor	r27, r17
     172:	b1 27       	eor	r27, r17
     174:	b1 27       	eor	r27, r17
     176:	b1 27       	eor	r27, r17
     178:	b1 27       	eor	r27, r17
     17a:	b1 27       	eor	r27, r17
     17c:	b1 27       	eor	r27, r17
     17e:	b1 27       	eor	r27, r17
     180:	b1 27       	eor	r27, r17
     182:	b1 27       	eor	r27, r17
     184:	b1 27       	eor	r27, r17
     186:	b1 27       	eor	r27, r17
     188:	6c 27       	eor	r22, r28
     18a:	b1 27       	eor	r27, r17
     18c:	b1 27       	eor	r27, r17
     18e:	b1 27       	eor	r27, r17
     190:	b1 27       	eor	r27, r17
     192:	b1 27       	eor	r27, r17
     194:	b1 27       	eor	r27, r17
     196:	b1 27       	eor	r27, r17
     198:	90 27       	eor	r25, r16

0000019a <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     19a:	08 ef       	ldi	r16, 0xF8	; 248
     19c:	18 e1       	ldi	r17, 0x18	; 24
     19e:	0f 2e       	mov	r0, r31
     1a0:	f8 e2       	ldi	r31, 0x28	; 40
     1a2:	ef 2e       	mov	r14, r31
     1a4:	f9 e1       	ldi	r31, 0x19	; 25
     1a6:	ff 2e       	mov	r15, r31
     1a8:	f0 2d       	mov	r31, r0
     1aa:	80 91 f7 18 	lds	r24, 0x18F7	; 0x8018f7 <uxDeletedTasksWaitingCleanUp>
     1ae:	88 23       	and	r24, r24
     1b0:	29 f1       	breq	.+74     	; 0x1fc <prvIdleTask+0x62>
     1b2:	0f b6       	in	r0, 0x3f	; 63
     1b4:	f8 94       	cli
     1b6:	0f 92       	push	r0
     1b8:	d8 01       	movw	r26, r16
     1ba:	17 96       	adiw	r26, 0x07	; 7
     1bc:	ed 91       	ld	r30, X+
     1be:	fc 91       	ld	r31, X
     1c0:	18 97       	sbiw	r26, 0x08	; 8
     1c2:	c0 85       	ldd	r28, Z+8	; 0x08
     1c4:	d1 85       	ldd	r29, Z+9	; 0x09
     1c6:	ce 01       	movw	r24, r28
     1c8:	02 96       	adiw	r24, 0x02	; 2
     1ca:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <uxListRemove>
     1ce:	80 91 eb 18 	lds	r24, 0x18EB	; 0x8018eb <uxCurrentNumberOfTasks>
     1d2:	81 50       	subi	r24, 0x01	; 1
     1d4:	80 93 eb 18 	sts	0x18EB, r24	; 0x8018eb <uxCurrentNumberOfTasks>
     1d8:	80 91 f7 18 	lds	r24, 0x18F7	; 0x8018f7 <uxDeletedTasksWaitingCleanUp>
     1dc:	81 50       	subi	r24, 0x01	; 1
     1de:	80 93 f7 18 	sts	0x18F7, r24	; 0x8018f7 <uxDeletedTasksWaitingCleanUp>
     1e2:	0f 90       	pop	r0
     1e4:	0f be       	out	0x3f, r0	; 63
     1e6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     1e8:	9c 8d       	ldd	r25, Y+28	; 0x1c
     1ea:	0e 94 c0 09 	call	0x1380	; 0x1380 <vPortFree>
     1ee:	ce 01       	movw	r24, r28
     1f0:	0e 94 c0 09 	call	0x1380	; 0x1380 <vPortFree>
     1f4:	80 91 f7 18 	lds	r24, 0x18F7	; 0x8018f7 <uxDeletedTasksWaitingCleanUp>
     1f8:	81 11       	cpse	r24, r1
     1fa:	db cf       	rjmp	.-74     	; 0x1b2 <prvIdleTask+0x18>
     1fc:	f7 01       	movw	r30, r14
     1fe:	80 81       	ld	r24, Z
     200:	82 30       	cpi	r24, 0x02	; 2
     202:	10 f0       	brcs	.+4      	; 0x208 <prvIdleTask+0x6e>
     204:	0e 94 39 0b 	call	0x1672	; 0x1672 <vPortYield>
     208:	0e 94 b3 1a 	call	0x3566	; 0x3566 <vApplicationIdleHook>
     20c:	ce cf       	rjmp	.-100    	; 0x1aa <prvIdleTask+0x10>

0000020e <prvTimerTask>:
            pxNewTimer->ucStatus = 0x00;
            prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
        }

        return pxNewTimer;
    }
     20e:	cf 93       	push	r28
     210:	df 93       	push	r29
     212:	cd b7       	in	r28, 0x3d	; 61
     214:	de b7       	in	r29, 0x3e	; 62
     216:	60 97       	sbiw	r28, 0x10	; 16
     218:	0f b6       	in	r0, 0x3f	; 63
     21a:	f8 94       	cli
     21c:	de bf       	out	0x3e, r29	; 62
     21e:	0f be       	out	0x3f, r0	; 63
     220:	cd bf       	out	0x3d, r28	; 61
     222:	ce 01       	movw	r24, r28
     224:	01 96       	adiw	r24, 0x01	; 1
     226:	9a 87       	std	Y+10, r25	; 0x0a
     228:	89 87       	std	Y+9, r24	; 0x09
     22a:	81 2c       	mov	r8, r1
     22c:	91 2c       	mov	r9, r1
     22e:	a1 2c       	mov	r10, r1
     230:	b1 2c       	mov	r11, r1
     232:	69 84       	ldd	r6, Y+9	; 0x09
     234:	7a 84       	ldd	r7, Y+10	; 0x0a
     236:	e0 91 60 19 	lds	r30, 0x1960	; 0x801960 <pxCurrentTimerList>
     23a:	f0 91 61 19 	lds	r31, 0x1961	; 0x801961 <pxCurrentTimerList+0x1>
     23e:	80 81       	ld	r24, Z
     240:	88 23       	and	r24, r24
     242:	09 f4       	brne	.+2      	; 0x246 <prvTimerTask+0x38>
     244:	13 c1       	rjmp	.+550    	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
     246:	07 80       	ldd	r0, Z+7	; 0x07
     248:	f0 85       	ldd	r31, Z+8	; 0x08
     24a:	e0 2d       	mov	r30, r0
     24c:	20 80       	ld	r2, Z
     24e:	31 80       	ldd	r3, Z+1	; 0x01
     250:	42 80       	ldd	r4, Z+2	; 0x02
     252:	53 80       	ldd	r5, Z+3	; 0x03
     254:	0e 94 c5 13 	call	0x278a	; 0x278a <vTaskSuspendAll>
     258:	ce 01       	movw	r24, r28
     25a:	01 96       	adiw	r24, 0x01	; 1
     25c:	0e 94 1d 1a 	call	0x343a	; 0x343a <prvSampleTimeNow>
     260:	6b 87       	std	Y+11, r22	; 0x0b
     262:	7c 87       	std	Y+12, r23	; 0x0c
     264:	8d 87       	std	Y+13, r24	; 0x0d
     266:	9e 87       	std	Y+14, r25	; 0x0e
     268:	89 81       	ldd	r24, Y+1	; 0x01
     26a:	81 11       	cpse	r24, r1
     26c:	67 c0       	rjmp	.+206    	; 0x33c <prvTimerTask+0x12e>
     26e:	8b 85       	ldd	r24, Y+11	; 0x0b
     270:	9c 85       	ldd	r25, Y+12	; 0x0c
     272:	ad 85       	ldd	r26, Y+13	; 0x0d
     274:	be 85       	ldd	r27, Y+14	; 0x0e
     276:	82 15       	cp	r24, r2
     278:	93 05       	cpc	r25, r3
     27a:	a4 05       	cpc	r26, r4
     27c:	b5 05       	cpc	r27, r5
     27e:	08 f4       	brcc	.+2      	; 0x282 <prvTimerTask+0x74>
     280:	45 c0       	rjmp	.+138    	; 0x30c <prvTimerTask+0xfe>
     282:	0e 94 ae 14 	call	0x295c	; 0x295c <xTaskResumeAll>
     286:	e0 91 60 19 	lds	r30, 0x1960	; 0x801960 <pxCurrentTimerList>
     28a:	f0 91 61 19 	lds	r31, 0x1961	; 0x801961 <pxCurrentTimerList+0x1>
     28e:	07 80       	ldd	r0, Z+7	; 0x07
     290:	f0 85       	ldd	r31, Z+8	; 0x08
     292:	e0 2d       	mov	r30, r0
     294:	a0 85       	ldd	r26, Z+8	; 0x08
     296:	b1 85       	ldd	r27, Z+9	; 0x09
     298:	b8 8b       	std	Y+16, r27	; 0x10
     29a:	af 87       	std	Y+15, r26	; 0x0f
     29c:	cd 01       	movw	r24, r26
     29e:	02 96       	adiw	r24, 0x02	; 2
     2a0:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <uxListRemove>
     2a4:	ef 85       	ldd	r30, Y+15	; 0x0f
     2a6:	f8 89       	ldd	r31, Y+16	; 0x10
     2a8:	87 89       	ldd	r24, Z+23	; 0x17
     2aa:	82 ff       	sbrs	r24, 2
     2ac:	21 c0       	rjmp	.+66     	; 0x2f0 <prvTimerTask+0xe2>
     2ae:	46 85       	ldd	r20, Z+14	; 0x0e
     2b0:	57 85       	ldd	r21, Z+15	; 0x0f
     2b2:	60 89       	ldd	r22, Z+16	; 0x10
     2b4:	71 89       	ldd	r23, Z+17	; 0x11
     2b6:	42 0d       	add	r20, r2
     2b8:	53 1d       	adc	r21, r3
     2ba:	64 1d       	adc	r22, r4
     2bc:	75 1d       	adc	r23, r5
     2be:	72 01       	movw	r14, r4
     2c0:	61 01       	movw	r12, r2
     2c2:	0b 85       	ldd	r16, Y+11	; 0x0b
     2c4:	1c 85       	ldd	r17, Y+12	; 0x0c
     2c6:	2d 85       	ldd	r18, Y+13	; 0x0d
     2c8:	3e 85       	ldd	r19, Y+14	; 0x0e
     2ca:	cf 01       	movw	r24, r30
     2cc:	0e 94 2d 19 	call	0x325a	; 0x325a <prvInsertTimerInActiveList>
     2d0:	88 23       	and	r24, r24
     2d2:	99 f0       	breq	.+38     	; 0x2fa <prvTimerTask+0xec>
     2d4:	c8 2c       	mov	r12, r8
     2d6:	d9 2c       	mov	r13, r9
     2d8:	ea 2c       	mov	r14, r10
     2da:	fb 2c       	mov	r15, r11
     2dc:	00 e0       	ldi	r16, 0x00	; 0
     2de:	10 e0       	ldi	r17, 0x00	; 0
     2e0:	a2 01       	movw	r20, r4
     2e2:	91 01       	movw	r18, r2
     2e4:	60 e0       	ldi	r22, 0x00	; 0
     2e6:	8f 85       	ldd	r24, Y+15	; 0x0f
     2e8:	98 89       	ldd	r25, Y+16	; 0x10
     2ea:	0e 94 bf 19 	call	0x337e	; 0x337e <xTimerGenericCommand>
     2ee:	05 c0       	rjmp	.+10     	; 0x2fa <prvTimerTask+0xec>
     2f0:	8e 7f       	andi	r24, 0xFE	; 254
     2f2:	af 85       	ldd	r26, Y+15	; 0x0f
     2f4:	b8 89       	ldd	r27, Y+16	; 0x10
     2f6:	57 96       	adiw	r26, 0x17	; 23
     2f8:	8c 93       	st	X, r24
     2fa:	af 85       	ldd	r26, Y+15	; 0x0f
     2fc:	b8 89       	ldd	r27, Y+16	; 0x10
     2fe:	54 96       	adiw	r26, 0x14	; 20
     300:	ed 91       	ld	r30, X+
     302:	fc 91       	ld	r31, X
     304:	55 97       	sbiw	r26, 0x15	; 21
     306:	cd 01       	movw	r24, r26
     308:	19 95       	eicall
     30a:	a1 c0       	rjmp	.+322    	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     30c:	20 e0       	ldi	r18, 0x00	; 0
     30e:	b2 01       	movw	r22, r4
     310:	a1 01       	movw	r20, r2
     312:	8b 85       	ldd	r24, Y+11	; 0x0b
     314:	9c 85       	ldd	r25, Y+12	; 0x0c
     316:	ad 85       	ldd	r26, Y+13	; 0x0d
     318:	be 85       	ldd	r27, Y+14	; 0x0e
     31a:	48 1b       	sub	r20, r24
     31c:	59 0b       	sbc	r21, r25
     31e:	6a 0b       	sbc	r22, r26
     320:	7b 0b       	sbc	r23, r27
     322:	80 91 5c 19 	lds	r24, 0x195C	; 0x80195c <xTimerQueue>
     326:	90 91 5d 19 	lds	r25, 0x195D	; 0x80195d <xTimerQueue+0x1>
     32a:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <vQueueWaitForMessageRestricted>
     32e:	0e 94 ae 14 	call	0x295c	; 0x295c <xTaskResumeAll>
     332:	81 11       	cpse	r24, r1
     334:	8c c0       	rjmp	.+280    	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     336:	0e 94 39 0b 	call	0x1672	; 0x1672 <vPortYield>
     33a:	89 c0       	rjmp	.+274    	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     33c:	0e 94 ae 14 	call	0x295c	; 0x295c <xTaskResumeAll>
     340:	86 c0       	rjmp	.+268    	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     342:	89 81       	ldd	r24, Y+1	; 0x01
     344:	88 23       	and	r24, r24
     346:	0c f4       	brge	.+2      	; 0x34a <prvTimerTask+0x13c>
     348:	82 c0       	rjmp	.+260    	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     34a:	4e 80       	ldd	r4, Y+6	; 0x06
     34c:	5f 80       	ldd	r5, Y+7	; 0x07
     34e:	d2 01       	movw	r26, r4
     350:	1c 96       	adiw	r26, 0x0c	; 12
     352:	8d 91       	ld	r24, X+
     354:	9c 91       	ld	r25, X
     356:	1d 97       	sbiw	r26, 0x0d	; 13
     358:	89 2b       	or	r24, r25
     35a:	21 f0       	breq	.+8      	; 0x364 <prvTimerTask+0x156>
     35c:	c2 01       	movw	r24, r4
     35e:	02 96       	adiw	r24, 0x02	; 2
     360:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <uxListRemove>
     364:	ce 01       	movw	r24, r28
     366:	08 96       	adiw	r24, 0x08	; 8
     368:	0e 94 1d 1a 	call	0x343a	; 0x343a <prvSampleTimeNow>
     36c:	8b 01       	movw	r16, r22
     36e:	9c 01       	movw	r18, r24
     370:	e9 81       	ldd	r30, Y+1	; 0x01
     372:	0e 2e       	mov	r0, r30
     374:	00 0c       	add	r0, r0
     376:	ff 0b       	sbc	r31, r31
     378:	ea 30       	cpi	r30, 0x0A	; 10
     37a:	f1 05       	cpc	r31, r1
     37c:	08 f0       	brcs	.+2      	; 0x380 <prvTimerTask+0x172>
     37e:	67 c0       	rjmp	.+206    	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     380:	88 27       	eor	r24, r24
     382:	ee 58       	subi	r30, 0x8E	; 142
     384:	ff 4f       	sbci	r31, 0xFF	; 255
     386:	8f 4f       	sbci	r24, 0xFF	; 255
     388:	0c 94 09 2a 	jmp	0x5412	; 0x5412 <__tablejump2__>
     38c:	f2 01       	movw	r30, r4
     38e:	87 89       	ldd	r24, Z+23	; 0x17
     390:	81 60       	ori	r24, 0x01	; 1
     392:	87 8b       	std	Z+23, r24	; 0x17
     394:	ca 80       	ldd	r12, Y+2	; 0x02
     396:	db 80       	ldd	r13, Y+3	; 0x03
     398:	ec 80       	ldd	r14, Y+4	; 0x04
     39a:	fd 80       	ldd	r15, Y+5	; 0x05
     39c:	46 85       	ldd	r20, Z+14	; 0x0e
     39e:	57 85       	ldd	r21, Z+15	; 0x0f
     3a0:	60 89       	ldd	r22, Z+16	; 0x10
     3a2:	71 89       	ldd	r23, Z+17	; 0x11
     3a4:	4c 0d       	add	r20, r12
     3a6:	5d 1d       	adc	r21, r13
     3a8:	6e 1d       	adc	r22, r14
     3aa:	7f 1d       	adc	r23, r15
     3ac:	c2 01       	movw	r24, r4
     3ae:	0e 94 2d 19 	call	0x325a	; 0x325a <prvInsertTimerInActiveList>
     3b2:	88 23       	and	r24, r24
     3b4:	09 f4       	brne	.+2      	; 0x3b8 <prvTimerTask+0x1aa>
     3b6:	4b c0       	rjmp	.+150    	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     3b8:	d2 01       	movw	r26, r4
     3ba:	54 96       	adiw	r26, 0x14	; 20
     3bc:	ed 91       	ld	r30, X+
     3be:	fc 91       	ld	r31, X
     3c0:	55 97       	sbiw	r26, 0x15	; 21
     3c2:	c2 01       	movw	r24, r4
     3c4:	19 95       	eicall
     3c6:	f2 01       	movw	r30, r4
     3c8:	87 89       	ldd	r24, Z+23	; 0x17
     3ca:	82 ff       	sbrs	r24, 2
     3cc:	40 c0       	rjmp	.+128    	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     3ce:	4a 81       	ldd	r20, Y+2	; 0x02
     3d0:	5b 81       	ldd	r21, Y+3	; 0x03
     3d2:	6c 81       	ldd	r22, Y+4	; 0x04
     3d4:	7d 81       	ldd	r23, Y+5	; 0x05
     3d6:	86 85       	ldd	r24, Z+14	; 0x0e
     3d8:	97 85       	ldd	r25, Z+15	; 0x0f
     3da:	a0 89       	ldd	r26, Z+16	; 0x10
     3dc:	b1 89       	ldd	r27, Z+17	; 0x11
     3de:	9a 01       	movw	r18, r20
     3e0:	ab 01       	movw	r20, r22
     3e2:	28 0f       	add	r18, r24
     3e4:	39 1f       	adc	r19, r25
     3e6:	4a 1f       	adc	r20, r26
     3e8:	5b 1f       	adc	r21, r27
     3ea:	c8 2c       	mov	r12, r8
     3ec:	d9 2c       	mov	r13, r9
     3ee:	ea 2c       	mov	r14, r10
     3f0:	fb 2c       	mov	r15, r11
     3f2:	00 e0       	ldi	r16, 0x00	; 0
     3f4:	10 e0       	ldi	r17, 0x00	; 0
     3f6:	60 e0       	ldi	r22, 0x00	; 0
     3f8:	c2 01       	movw	r24, r4
     3fa:	0e 94 bf 19 	call	0x337e	; 0x337e <xTimerGenericCommand>
     3fe:	27 c0       	rjmp	.+78     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     400:	d2 01       	movw	r26, r4
     402:	57 96       	adiw	r26, 0x17	; 23
     404:	8c 91       	ld	r24, X
     406:	57 97       	sbiw	r26, 0x17	; 23
     408:	8e 7f       	andi	r24, 0xFE	; 254
     40a:	57 96       	adiw	r26, 0x17	; 23
     40c:	8c 93       	st	X, r24
     40e:	1f c0       	rjmp	.+62     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     410:	f2 01       	movw	r30, r4
     412:	87 89       	ldd	r24, Z+23	; 0x17
     414:	81 60       	ori	r24, 0x01	; 1
     416:	87 8b       	std	Z+23, r24	; 0x17
     418:	4a 81       	ldd	r20, Y+2	; 0x02
     41a:	5b 81       	ldd	r21, Y+3	; 0x03
     41c:	6c 81       	ldd	r22, Y+4	; 0x04
     41e:	7d 81       	ldd	r23, Y+5	; 0x05
     420:	46 87       	std	Z+14, r20	; 0x0e
     422:	57 87       	std	Z+15, r21	; 0x0f
     424:	60 8b       	std	Z+16, r22	; 0x10
     426:	71 8b       	std	Z+17, r23	; 0x11
     428:	40 0f       	add	r20, r16
     42a:	51 1f       	adc	r21, r17
     42c:	62 1f       	adc	r22, r18
     42e:	73 1f       	adc	r23, r19
     430:	68 01       	movw	r12, r16
     432:	79 01       	movw	r14, r18
     434:	c2 01       	movw	r24, r4
     436:	0e 94 2d 19 	call	0x325a	; 0x325a <prvInsertTimerInActiveList>
     43a:	09 c0       	rjmp	.+18     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     43c:	f2 01       	movw	r30, r4
     43e:	87 89       	ldd	r24, Z+23	; 0x17
     440:	81 fd       	sbrc	r24, 1
     442:	03 c0       	rjmp	.+6      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
     444:	c2 01       	movw	r24, r4
     446:	9c d7       	rcall	.+3896   	; 0x1380 <vPortFree>
     448:	02 c0       	rjmp	.+4      	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     44a:	8e 7f       	andi	r24, 0xFE	; 254
     44c:	87 8b       	std	Z+23, r24	; 0x17
     44e:	28 2d       	mov	r18, r8
     450:	39 2d       	mov	r19, r9
     452:	4a 2d       	mov	r20, r10
     454:	5b 2d       	mov	r21, r11
     456:	66 2d       	mov	r22, r6
     458:	77 2d       	mov	r23, r7
     45a:	80 91 5c 19 	lds	r24, 0x195C	; 0x80195c <xTimerQueue>
     45e:	90 91 5d 19 	lds	r25, 0x195D	; 0x80195d <xTimerQueue+0x1>
     462:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <xQueueReceive>
     466:	81 11       	cpse	r24, r1
     468:	6c cf       	rjmp	.-296    	; 0x342 <prvTimerTask+0x134>
     46a:	e5 ce       	rjmp	.-566    	; 0x236 <prvTimerTask+0x28>
     46c:	0e 94 c5 13 	call	0x278a	; 0x278a <vTaskSuspendAll>
     470:	ce 01       	movw	r24, r28
     472:	01 96       	adiw	r24, 0x01	; 1
     474:	0e 94 1d 1a 	call	0x343a	; 0x343a <prvSampleTimeNow>
     478:	6b 87       	std	Y+11, r22	; 0x0b
     47a:	7c 87       	std	Y+12, r23	; 0x0c
     47c:	8d 87       	std	Y+13, r24	; 0x0d
     47e:	9e 87       	std	Y+14, r25	; 0x0e
     480:	89 81       	ldd	r24, Y+1	; 0x01
     482:	81 11       	cpse	r24, r1
     484:	5b cf       	rjmp	.-330    	; 0x33c <prvTimerTask+0x12e>
     486:	e0 91 5e 19 	lds	r30, 0x195E	; 0x80195e <pxOverflowTimerList>
     48a:	f0 91 5f 19 	lds	r31, 0x195F	; 0x80195f <pxOverflowTimerList+0x1>
     48e:	80 81       	ld	r24, Z
     490:	21 e0       	ldi	r18, 0x01	; 1
     492:	81 11       	cpse	r24, r1
     494:	20 e0       	ldi	r18, 0x00	; 0
     496:	28 2c       	mov	r2, r8
     498:	39 2c       	mov	r3, r9
     49a:	4a 2c       	mov	r4, r10
     49c:	5b 2c       	mov	r5, r11
     49e:	37 cf       	rjmp	.-402    	; 0x30e <prvTimerTask+0x100>

000004a0 <__ctors_end>:
     4a0:	11 24       	eor	r1, r1
     4a2:	1f be       	out	0x3f, r1	; 63
     4a4:	cf ef       	ldi	r28, 0xFF	; 255
     4a6:	d1 e2       	ldi	r29, 0x21	; 33
     4a8:	de bf       	out	0x3e, r29	; 62
     4aa:	cd bf       	out	0x3d, r28	; 61
     4ac:	00 e0       	ldi	r16, 0x00	; 0
     4ae:	0c bf       	out	0x3c, r16	; 60

000004b0 <__do_copy_data>:
     4b0:	18 e0       	ldi	r17, 0x08	; 8
     4b2:	a0 e0       	ldi	r26, 0x00	; 0
     4b4:	b2 e0       	ldi	r27, 0x02	; 2
     4b6:	ee e9       	ldi	r30, 0x9E	; 158
     4b8:	fd e5       	ldi	r31, 0x5D	; 93
     4ba:	00 e0       	ldi	r16, 0x00	; 0
     4bc:	0b bf       	out	0x3b, r16	; 59
     4be:	02 c0       	rjmp	.+4      	; 0x4c4 <__do_copy_data+0x14>
     4c0:	07 90       	elpm	r0, Z+
     4c2:	0d 92       	st	X+, r0
     4c4:	a8 37       	cpi	r26, 0x78	; 120
     4c6:	b1 07       	cpc	r27, r17
     4c8:	d9 f7       	brne	.-10     	; 0x4c0 <__do_copy_data+0x10>

000004ca <__do_clear_bss>:
     4ca:	2b e1       	ldi	r18, 0x1B	; 27
     4cc:	a8 e7       	ldi	r26, 0x78	; 120
     4ce:	b8 e0       	ldi	r27, 0x08	; 8
     4d0:	01 c0       	rjmp	.+2      	; 0x4d4 <.do_clear_bss_start>

000004d2 <.do_clear_bss_loop>:
     4d2:	1d 92       	st	X+, r1

000004d4 <.do_clear_bss_start>:
     4d4:	a7 30       	cpi	r26, 0x07	; 7
     4d6:	b2 07       	cpc	r27, r18
     4d8:	e1 f7       	brne	.-8      	; 0x4d2 <.do_clear_bss_loop>
     4da:	0e 94 78 1b 	call	0x36f0	; 0x36f0 <main>
     4de:	0c 94 cd 2e 	jmp	0x5d9a	; 0x5d9a <_exit>

000004e2 <__bad_interrupt>:
     4e2:	8e cd       	rjmp	.-1252   	; 0x0 <__vectors>

000004e4 <co2Reader_create>:

	return _new_reader;
}

//	RETURN TO DESTROY METHODS
void co2Reader_destroy(co2reader_t self) {
     4e4:	2f 92       	push	r2
     4e6:	3f 92       	push	r3
     4e8:	4f 92       	push	r4
     4ea:	5f 92       	push	r5
     4ec:	6f 92       	push	r6
     4ee:	7f 92       	push	r7
     4f0:	8f 92       	push	r8
     4f2:	9f 92       	push	r9
     4f4:	af 92       	push	r10
     4f6:	bf 92       	push	r11
     4f8:	cf 92       	push	r12
     4fa:	df 92       	push	r13
     4fc:	ef 92       	push	r14
     4fe:	ff 92       	push	r15
     500:	0f 93       	push	r16
     502:	1f 93       	push	r17
     504:	cf 93       	push	r28
     506:	df 93       	push	r29
     508:	88 2e       	mov	r8, r24
     50a:	96 2e       	mov	r9, r22
     50c:	1a 01       	movw	r2, r20
     50e:	28 01       	movw	r4, r16
     510:	39 01       	movw	r6, r18
     512:	61 e0       	ldi	r22, 0x01	; 1
     514:	70 e0       	ldi	r23, 0x00	; 0
     516:	83 e0       	ldi	r24, 0x03	; 3
     518:	90 e0       	ldi	r25, 0x00	; 0
     51a:	0e 94 11 2a 	call	0x5422	; 0x5422 <calloc>
     51e:	ec 01       	movw	r28, r24
     520:	00 97       	sbiw	r24, 0x00	; 0
     522:	69 f1       	breq	.+90     	; 0x57e <co2Reader_create+0x9a>
     524:	fc 01       	movw	r30, r24
     526:	11 92       	st	Z+, r1
     528:	30 92 83 08 	sts	0x0883, r3	; 0x800883 <_startMeasureEventGroup+0x1>
     52c:	20 92 82 08 	sts	0x0882, r2	; 0x800882 <_startMeasureEventGroup>
     530:	40 92 7e 08 	sts	0x087E, r4	; 0x80087e <_startMeasureBit>
     534:	50 92 7f 08 	sts	0x087F, r5	; 0x80087f <_startMeasureBit+0x1>
     538:	60 92 80 08 	sts	0x0880, r6	; 0x800880 <_startMeasureBit+0x2>
     53c:	70 92 81 08 	sts	0x0881, r7	; 0x800881 <_startMeasureBit+0x3>
     540:	f0 92 7d 08 	sts	0x087D, r15	; 0x80087d <_readyEventGroup+0x1>
     544:	e0 92 7c 08 	sts	0x087C, r14	; 0x80087c <_readyEventGroup>
     548:	a0 92 78 08 	sts	0x0878, r10	; 0x800878 <__data_end>
     54c:	b0 92 79 08 	sts	0x0879, r11	; 0x800879 <__data_end+0x1>
     550:	c0 92 7a 08 	sts	0x087A, r12	; 0x80087a <__data_end+0x2>
     554:	d0 92 7b 08 	sts	0x087B, r13	; 0x80087b <__data_end+0x3>
     558:	49 2d       	mov	r20, r9
     55a:	50 e0       	ldi	r21, 0x00	; 0
     55c:	7f 01       	movw	r14, r30
     55e:	08 2d       	mov	r16, r8
     560:	9c 01       	movw	r18, r24
     562:	63 e4       	ldi	r22, 0x43	; 67
     564:	72 e0       	ldi	r23, 0x02	; 2
     566:	89 e2       	ldi	r24, 0x29	; 41
     568:	93 e0       	ldi	r25, 0x03	; 3
     56a:	0e 94 6a 12 	call	0x24d4	; 0x24d4 <xTaskCreate>
     56e:	8d e4       	ldi	r24, 0x4D	; 77
     570:	92 e0       	ldi	r25, 0x02	; 2
     572:	9f 93       	push	r25
     574:	8f 93       	push	r24
     576:	0e 94 af 2b 	call	0x575e	; 0x575e <printf>
     57a:	0f 90       	pop	r0
     57c:	0f 90       	pop	r0
     57e:	ce 01       	movw	r24, r28
     580:	df 91       	pop	r29
     582:	cf 91       	pop	r28
     584:	1f 91       	pop	r17
     586:	0f 91       	pop	r16
     588:	ff 90       	pop	r15
     58a:	ef 90       	pop	r14
     58c:	df 90       	pop	r13
     58e:	cf 90       	pop	r12
     590:	bf 90       	pop	r11
     592:	af 90       	pop	r10
     594:	9f 90       	pop	r9
     596:	8f 90       	pop	r8
     598:	7f 90       	pop	r7
     59a:	6f 90       	pop	r6
     59c:	5f 90       	pop	r5
     59e:	4f 90       	pop	r4
     5a0:	3f 90       	pop	r3
     5a2:	2f 90       	pop	r2
     5a4:	08 95       	ret

000005a6 <co2Reader_measure>:
	for (;;) {
		co2Reader_measure(self);
	}
}

void co2Reader_measure(co2reader_t self) {//dummy
     5a6:	cf 92       	push	r12
     5a8:	df 92       	push	r13
     5aa:	ef 92       	push	r14
     5ac:	ff 92       	push	r15
     5ae:	0f 93       	push	r16
     5b0:	1f 93       	push	r17
     5b2:	cf 93       	push	r28
     5b4:	df 93       	push	r29
     5b6:	ec 01       	movw	r28, r24
	EventBits_t uxBits = xEventGroupWaitBits(_startMeasureEventGroup, //eventGroup
     5b8:	40 91 7e 08 	lds	r20, 0x087E	; 0x80087e <_startMeasureBit>
     5bc:	50 91 7f 08 	lds	r21, 0x087F	; 0x80087f <_startMeasureBit+0x1>
     5c0:	60 91 80 08 	lds	r22, 0x0880	; 0x800880 <_startMeasureBit+0x2>
     5c4:	70 91 81 08 	lds	r23, 0x0881	; 0x800881 <_startMeasureBit+0x3>
     5c8:	cc 24       	eor	r12, r12
     5ca:	ca 94       	dec	r12
     5cc:	dc 2c       	mov	r13, r12
     5ce:	76 01       	movw	r14, r12
     5d0:	01 e0       	ldi	r16, 0x01	; 1
     5d2:	21 e0       	ldi	r18, 0x01	; 1
     5d4:	80 91 82 08 	lds	r24, 0x0882	; 0x800882 <_startMeasureEventGroup>
     5d8:	90 91 83 08 	lds	r25, 0x0883	; 0x800883 <_startMeasureEventGroup+0x1>
     5dc:	72 d4       	rcall	.+2276   	; 0xec2 <xEventGroupWaitBits>
	_startMeasureBit, //bits it is interested in
	pdTRUE, //clears the bits
	pdTRUE, //waits for both bits to be set
	portMAX_DELAY); //wait

	if ((uxBits & (_startMeasureBit)) == (_startMeasureBit)) {
     5de:	00 91 7e 08 	lds	r16, 0x087E	; 0x80087e <_startMeasureBit>
     5e2:	10 91 7f 08 	lds	r17, 0x087F	; 0x80087f <_startMeasureBit+0x1>
     5e6:	20 91 80 08 	lds	r18, 0x0880	; 0x800880 <_startMeasureBit+0x2>
     5ea:	30 91 81 08 	lds	r19, 0x0881	; 0x800881 <_startMeasureBit+0x3>
     5ee:	dc 01       	movw	r26, r24
     5f0:	cb 01       	movw	r24, r22
     5f2:	80 23       	and	r24, r16
     5f4:	91 23       	and	r25, r17
     5f6:	a2 23       	and	r26, r18
     5f8:	b3 23       	and	r27, r19
     5fa:	08 17       	cp	r16, r24
     5fc:	19 07       	cpc	r17, r25
     5fe:	2a 07       	cpc	r18, r26
     600:	3b 07       	cpc	r19, r27
     602:	f1 f4       	brne	.+60     	; 0x640 <co2Reader_measure+0x9a>
		uint8_t no = self->value;
     604:	88 81       	ld	r24, Y
		no++;
		self->value = no;
     606:	8f 5f       	subi	r24, 0xFF	; 255
     608:	88 83       	st	Y, r24
		printf("co2 done bit set");
     60a:	84 e5       	ldi	r24, 0x54	; 84
     60c:	92 e0       	ldi	r25, 0x02	; 2
     60e:	9f 93       	push	r25
     610:	8f 93       	push	r24
     612:	0e 94 af 2b 	call	0x575e	; 0x575e <printf>

		vTaskDelay(2500); //pretend it takes some time
     616:	64 ec       	ldi	r22, 0xC4	; 196
     618:	79 e0       	ldi	r23, 0x09	; 9
     61a:	80 e0       	ldi	r24, 0x00	; 0
     61c:	90 e0       	ldi	r25, 0x00	; 0
     61e:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <vTaskDelay>

		//set done bit so that device knows meassurement is done
		xEventGroupSetBits(_readyEventGroup, _readyBit);
     622:	40 91 78 08 	lds	r20, 0x0878	; 0x800878 <__data_end>
     626:	50 91 79 08 	lds	r21, 0x0879	; 0x800879 <__data_end+0x1>
     62a:	60 91 7a 08 	lds	r22, 0x087A	; 0x80087a <__data_end+0x2>
     62e:	70 91 7b 08 	lds	r23, 0x087B	; 0x80087b <__data_end+0x3>
     632:	80 91 7c 08 	lds	r24, 0x087C	; 0x80087c <_readyEventGroup>
     636:	90 91 7d 08 	lds	r25, 0x087D	; 0x80087d <_readyEventGroup+0x1>
     63a:	03 d5       	rcall	.+2566   	; 0x1042 <xEventGroupSetBits>
     63c:	0f 90       	pop	r0
     63e:	0f 90       	pop	r0
	}
}
     640:	df 91       	pop	r29
     642:	cf 91       	pop	r28
     644:	1f 91       	pop	r17
     646:	0f 91       	pop	r16
     648:	ff 90       	pop	r15
     64a:	ef 90       	pop	r14
     64c:	df 90       	pop	r13
     64e:	cf 90       	pop	r12
     650:	08 95       	ret

00000652 <co2Reader_executeTask>:
	//free(self->value);
	//free(self);
}

//actual task, methods devided so that it is possible to test
void co2Reader_executeTask(co2reader_t self) {
     652:	ec 01       	movw	r28, r24
	for (;;) {
		co2Reader_measure(self);
     654:	ce 01       	movw	r24, r28
     656:	a7 df       	rcall	.-178    	; 0x5a6 <co2Reader_measure>
     658:	fd cf       	rjmp	.-6      	; 0x654 <co2Reader_executeTask+0x2>

0000065a <co2Reader_getCO2>:
	}
}

uint8_t co2Reader_getCO2(co2reader_t self) {
	return self->value;
     65a:	fc 01       	movw	r30, r24
     65c:	80 81       	ld	r24, Z
     65e:	08 95       	ret

00000660 <currentCondition_create>:
	//free(self->co2Data);
	//free(self->temperatureData);
	//free(self->humidityData);
	//free(self->soundData);
	//free(self);
	vPortFree(self->humidityData);//maybe use this
     660:	cf 93       	push	r28
     662:	df 93       	push	r29
     664:	ec 01       	movw	r28, r24
     666:	61 e0       	ldi	r22, 0x01	; 1
     668:	70 e0       	ldi	r23, 0x00	; 0
     66a:	8a e0       	ldi	r24, 0x0A	; 10
     66c:	90 e0       	ldi	r25, 0x00	; 0
     66e:	0e 94 11 2a 	call	0x5422	; 0x5422 <calloc>
     672:	00 97       	sbiw	r24, 0x00	; 0
     674:	49 f0       	breq	.+18     	; 0x688 <currentCondition_create+0x28>
     676:	fc 01       	movw	r30, r24
     678:	d1 83       	std	Z+1, r29	; 0x01
     67a:	c0 83       	st	Z, r28
     67c:	15 82       	std	Z+5, r1	; 0x05
     67e:	14 82       	std	Z+4, r1	; 0x04
     680:	17 82       	std	Z+7, r1	; 0x07
     682:	16 82       	std	Z+6, r1	; 0x06
     684:	13 82       	std	Z+3, r1	; 0x03
     686:	12 82       	std	Z+2, r1	; 0x02
     688:	df 91       	pop	r29
     68a:	cf 91       	pop	r28
     68c:	08 95       	ret

0000068e <currentCondition_setCO2>:
     68e:	00 97       	sbiw	r24, 0x00	; 0
     690:	19 f0       	breq	.+6      	; 0x698 <currentCondition_setCO2+0xa>
     692:	fc 01       	movw	r30, r24
     694:	73 83       	std	Z+3, r23	; 0x03
     696:	62 83       	std	Z+2, r22	; 0x02
     698:	08 95       	ret

0000069a <currentCondition_setHumidity>:
     69a:	00 97       	sbiw	r24, 0x00	; 0
     69c:	19 f0       	breq	.+6      	; 0x6a4 <currentCondition_setHumidity+0xa>
     69e:	fc 01       	movw	r30, r24
     6a0:	77 83       	std	Z+7, r23	; 0x07
     6a2:	66 83       	std	Z+6, r22	; 0x06
     6a4:	08 95       	ret

000006a6 <currentCondition_setTemperature>:
     6a6:	00 97       	sbiw	r24, 0x00	; 0
     6a8:	19 f0       	breq	.+6      	; 0x6b0 <currentCondition_setTemperature+0xa>
     6aa:	fc 01       	movw	r30, r24
     6ac:	75 83       	std	Z+5, r23	; 0x05
     6ae:	64 83       	std	Z+4, r22	; 0x04
     6b0:	08 95       	ret

000006b2 <getcurrentConditionPayload>:
}
lora_payload_t getcurrentConditionPayload(currentCondition_t self)
{
     6b2:	fc 01       	movw	r30, r24
     6b4:	db 01       	movw	r26, r22
	lora_payload_t payload;
	payload.port_no = 1;
	payload.len = 4;
	
	payload.bytes[0] = self->temperatureData >> 8;
     6b6:	14 96       	adiw	r26, 0x04	; 4
     6b8:	2c 91       	ld	r18, X
     6ba:	14 97       	sbiw	r26, 0x04	; 4
     6bc:	15 96       	adiw	r26, 0x05	; 5
     6be:	3c 91       	ld	r19, X
     6c0:	15 97       	sbiw	r26, 0x05	; 5
	payload.bytes[1] = self->temperatureData & 0xFF;

	payload.bytes[2] = self->humidityData >> 8;
     6c2:	16 96       	adiw	r26, 0x06	; 6
     6c4:	8c 91       	ld	r24, X
     6c6:	16 97       	sbiw	r26, 0x06	; 6
     6c8:	17 96       	adiw	r26, 0x07	; 7
     6ca:	9c 91       	ld	r25, X
	payload.bytes[3] = self->humidityData & 0xFF;
	return payload;
     6cc:	41 e0       	ldi	r20, 0x01	; 1
     6ce:	40 83       	st	Z, r20
     6d0:	44 e0       	ldi	r20, 0x04	; 4
     6d2:	41 83       	std	Z+1, r20	; 0x01
     6d4:	32 83       	std	Z+2, r19	; 0x02
     6d6:	23 83       	std	Z+3, r18	; 0x03
     6d8:	94 83       	std	Z+4, r25	; 0x04
     6da:	85 83       	std	Z+5, r24	; 0x05
	
     6dc:	cf 01       	movw	r24, r30
     6de:	08 95       	ret

000006e0 <device_create>:
	free(self);*/
}

currentCondition_t device_getCurrentCondition(device_t self) {
	return self->currentCondition;
}
     6e0:	2f 92       	push	r2
     6e2:	3f 92       	push	r3
     6e4:	4f 92       	push	r4
     6e6:	5f 92       	push	r5
     6e8:	6f 92       	push	r6
     6ea:	7f 92       	push	r7
     6ec:	8f 92       	push	r8
     6ee:	9f 92       	push	r9
     6f0:	af 92       	push	r10
     6f2:	bf 92       	push	r11
     6f4:	cf 92       	push	r12
     6f6:	df 92       	push	r13
     6f8:	ef 92       	push	r14
     6fa:	ff 92       	push	r15
     6fc:	0f 93       	push	r16
     6fe:	1f 93       	push	r17
     700:	cf 93       	push	r28
     702:	df 93       	push	r29
     704:	00 d0       	rcall	.+0      	; 0x706 <device_create+0x26>
     706:	1f 92       	push	r1
     708:	cd b7       	in	r28, 0x3d	; 61
     70a:	de b7       	in	r29, 0x3e	; 62
     70c:	28 2e       	mov	r2, r24
     70e:	36 2e       	mov	r3, r22
     710:	5c 83       	std	Y+4, r21	; 0x04
     712:	4b 83       	std	Y+3, r20	; 0x03
     714:	28 01       	movw	r4, r16
     716:	39 01       	movw	r6, r18
     718:	61 e0       	ldi	r22, 0x01	; 1
     71a:	70 e0       	ldi	r23, 0x00	; 0
     71c:	88 e0       	ldi	r24, 0x08	; 8
     71e:	90 e0       	ldi	r25, 0x00	; 0
     720:	0e 94 11 2a 	call	0x5422	; 0x5422 <calloc>
     724:	9a 83       	std	Y+2, r25	; 0x02
     726:	89 83       	std	Y+1, r24	; 0x01
     728:	00 97       	sbiw	r24, 0x00	; 0
     72a:	09 f4       	brne	.+2      	; 0x72e <device_create+0x4e>
     72c:	46 c0       	rjmp	.+140    	; 0x7ba <device_create+0xda>
     72e:	fc 01       	movw	r30, r24
     730:	91 82       	std	Z+1, r9	; 0x01
     732:	80 82       	st	Z, r8
     734:	8a 8d       	ldd	r24, Y+26	; 0x1a
     736:	9b 8d       	ldd	r25, Y+27	; 0x1b
     738:	93 83       	std	Z+3, r25	; 0x03
     73a:	82 83       	std	Z+2, r24	; 0x02
     73c:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <deviceId>
     740:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <deviceId+0x1>
     744:	8d df       	rcall	.-230    	; 0x660 <currentCondition_create>
     746:	e9 81       	ldd	r30, Y+1	; 0x01
     748:	fa 81       	ldd	r31, Y+2	; 0x02
     74a:	95 83       	std	Z+5, r25	; 0x05
     74c:	84 83       	std	Z+4, r24	; 0x04
     74e:	8b 81       	ldd	r24, Y+3	; 0x03
     750:	9c 81       	ldd	r25, Y+4	; 0x04
     752:	90 93 a7 08 	sts	0x08A7, r25	; 0x8008a7 <_startMeasureEventGroup+0x1>
     756:	80 93 a6 08 	sts	0x08A6, r24	; 0x8008a6 <_startMeasureEventGroup>
     75a:	40 92 a2 08 	sts	0x08A2, r4	; 0x8008a2 <_startMeasureBit>
     75e:	50 92 a3 08 	sts	0x08A3, r5	; 0x8008a3 <_startMeasureBit+0x1>
     762:	60 92 a4 08 	sts	0x08A4, r6	; 0x8008a4 <_startMeasureBit+0x2>
     766:	70 92 a5 08 	sts	0x08A5, r7	; 0x8008a5 <_startMeasureBit+0x3>
     76a:	f0 92 a1 08 	sts	0x08A1, r15	; 0x8008a1 <_readyEventGroup+0x1>
     76e:	e0 92 a0 08 	sts	0x08A0, r14	; 0x8008a0 <_readyEventGroup>
     772:	a0 92 9c 08 	sts	0x089C, r10	; 0x80089c <_readyBit>
     776:	b0 92 9d 08 	sts	0x089D, r11	; 0x80089d <_readyBit+0x1>
     77a:	c0 92 9e 08 	sts	0x089E, r12	; 0x80089e <_readyBit+0x2>
     77e:	d0 92 9f 08 	sts	0x089F, r13	; 0x80089f <_readyBit+0x3>
     782:	8c 8d       	ldd	r24, Y+28	; 0x1c
     784:	9d 8d       	ldd	r25, Y+29	; 0x1d
     786:	90 93 9b 08 	sts	0x089B, r25	; 0x80089b <_uplinkmessageBuffer+0x1>
     78a:	80 93 9a 08 	sts	0x089A, r24	; 0x80089a <_uplinkmessageBuffer>
     78e:	43 2d       	mov	r20, r3
     790:	50 e0       	ldi	r21, 0x00	; 0
     792:	7f 01       	movw	r14, r30
     794:	96 e0       	ldi	r25, 0x06	; 6
     796:	e9 0e       	add	r14, r25
     798:	f1 1c       	adc	r15, r1
     79a:	02 2d       	mov	r16, r2
     79c:	9f 01       	movw	r18, r30
     79e:	65 e6       	ldi	r22, 0x65	; 101
     7a0:	72 e0       	ldi	r23, 0x02	; 2
     7a2:	82 e0       	ldi	r24, 0x02	; 2
     7a4:	95 e0       	ldi	r25, 0x05	; 5
     7a6:	0e 94 6a 12 	call	0x24d4	; 0x24d4 <xTaskCreate>
     7aa:	8c e6       	ldi	r24, 0x6C	; 108
     7ac:	92 e0       	ldi	r25, 0x02	; 2
     7ae:	9f 93       	push	r25
     7b0:	8f 93       	push	r24
     7b2:	0e 94 af 2b 	call	0x575e	; 0x575e <printf>
     7b6:	0f 90       	pop	r0
     7b8:	0f 90       	pop	r0
     7ba:	89 81       	ldd	r24, Y+1	; 0x01
     7bc:	9a 81       	ldd	r25, Y+2	; 0x02
     7be:	0f 90       	pop	r0
     7c0:	0f 90       	pop	r0
     7c2:	0f 90       	pop	r0
     7c4:	0f 90       	pop	r0
     7c6:	df 91       	pop	r29
     7c8:	cf 91       	pop	r28
     7ca:	1f 91       	pop	r17
     7cc:	0f 91       	pop	r16
     7ce:	ff 90       	pop	r15
     7d0:	ef 90       	pop	r14
     7d2:	df 90       	pop	r13
     7d4:	cf 90       	pop	r12
     7d6:	bf 90       	pop	r11
     7d8:	af 90       	pop	r10
     7da:	9f 90       	pop	r9
     7dc:	8f 90       	pop	r8
     7de:	7f 90       	pop	r7
     7e0:	6f 90       	pop	r6
     7e2:	5f 90       	pop	r5
     7e4:	4f 90       	pop	r4
     7e6:	3f 90       	pop	r3
     7e8:	2f 90       	pop	r2
     7ea:	08 95       	ret

000007ec <device_setHumidityToCurrent>:

void device_setHumidityToCurrent(device_t self, uint16_t value)
{
	currentCondition_setHumidity(self->currentCondition,value);
     7ec:	fc 01       	movw	r30, r24
     7ee:	84 81       	ldd	r24, Z+4	; 0x04
     7f0:	95 81       	ldd	r25, Z+5	; 0x05
     7f2:	53 cf       	rjmp	.-346    	; 0x69a <currentCondition_setHumidity>
     7f4:	08 95       	ret

000007f6 <device_getHumidityData>:
}


uint16_t device_getHumidityData(device_t self)
{
	if (self->humAndTempReader!=NULL)
     7f6:	fc 01       	movw	r30, r24
     7f8:	82 81       	ldd	r24, Z+2	; 0x02
     7fa:	93 81       	ldd	r25, Z+3	; 0x03
     7fc:	00 97       	sbiw	r24, 0x00	; 0
     7fe:	11 f0       	breq	.+4      	; 0x804 <device_getHumidityData+0xe>
	{
		return humAndTempReader_getHumidity(self->humAndTempReader);
     800:	d4 c1       	rjmp	.+936    	; 0xbaa <humAndTempReader_getHumidity>
     802:	08 95       	ret
	}
	else
	return -1;
     804:	8f ef       	ldi	r24, 0xFF	; 255
     806:	9f ef       	ldi	r25, 0xFF	; 255
}
     808:	08 95       	ret

0000080a <device_setCO2ToCurrent>:

void device_setCO2ToCurrent(device_t self, uint16_t value) {
	currentCondition_setCO2(self->currentCondition, value);
     80a:	fc 01       	movw	r30, r24
     80c:	84 81       	ldd	r24, Z+4	; 0x04
     80e:	95 81       	ldd	r25, Z+5	; 0x05
     810:	3e cf       	rjmp	.-388    	; 0x68e <currentCondition_setCO2>
     812:	08 95       	ret

00000814 <device_getCO2Data>:
}

uint16_t device_getCO2Data(device_t self) {
	if (self->co2reader != NULL)
     814:	fc 01       	movw	r30, r24
     816:	80 81       	ld	r24, Z
     818:	91 81       	ldd	r25, Z+1	; 0x01
     81a:	00 97       	sbiw	r24, 0x00	; 0
     81c:	19 f0       	breq	.+6      	; 0x824 <device_getCO2Data+0x10>
		return co2Reader_getCO2(self->co2reader);
     81e:	1d df       	rcall	.-454    	; 0x65a <co2Reader_getCO2>
     820:	90 e0       	ldi	r25, 0x00	; 0
     822:	08 95       	ret
	else return -1;
     824:	8f ef       	ldi	r24, 0xFF	; 255
     826:	9f ef       	ldi	r25, 0xFF	; 255
}
     828:	08 95       	ret

0000082a <device_setTemperatureToCurrent>:

void device_setTemperatureToCurrent(device_t self, int16_t value)
{
	
	currentCondition_setTemperature(self->currentCondition,value);
     82a:	fc 01       	movw	r30, r24
     82c:	84 81       	ldd	r24, Z+4	; 0x04
     82e:	95 81       	ldd	r25, Z+5	; 0x05
     830:	3a cf       	rjmp	.-396    	; 0x6a6 <currentCondition_setTemperature>
     832:	08 95       	ret

00000834 <device_getTemperatureData>:
}


int16_t device_getTemperatureData(device_t self)
{
	if (self->humAndTempReader!=NULL)
     834:	fc 01       	movw	r30, r24
     836:	82 81       	ldd	r24, Z+2	; 0x02
     838:	93 81       	ldd	r25, Z+3	; 0x03
     83a:	00 97       	sbiw	r24, 0x00	; 0
     83c:	11 f0       	breq	.+4      	; 0x842 <device_getTemperatureData+0xe>
	{
		return humAndTempReader_getTemperature(self->humAndTempReader);
     83e:	b9 c1       	rjmp	.+882    	; 0xbb2 <humAndTempReader_getTemperature>
     840:	08 95       	ret
	}
	else
	return -1;
     842:	8f ef       	ldi	r24, 0xFF	; 255
     844:	9f ef       	ldi	r25, 0xFF	; 255
	
     846:	08 95       	ret

00000848 <device_startMeasuring>:
void device_executeTask(device_t self) {
	for (;;)
		device_startMeasuring(self);
}

void device_startMeasuring(device_t self) {
     848:	af 92       	push	r10
     84a:	bf 92       	push	r11
     84c:	cf 92       	push	r12
     84e:	df 92       	push	r13
     850:	ef 92       	push	r14
     852:	ff 92       	push	r15
     854:	0f 93       	push	r16
     856:	1f 93       	push	r17
     858:	cf 93       	push	r28
     85a:	df 93       	push	r29
     85c:	cd b7       	in	r28, 0x3d	; 61
     85e:	de b7       	in	r29, 0x3e	; 62
     860:	66 97       	sbiw	r28, 0x16	; 22
     862:	0f b6       	in	r0, 0x3f	; 63
     864:	f8 94       	cli
     866:	de bf       	out	0x3e, r29	; 62
     868:	0f be       	out	0x3f, r0	; 63
     86a:	cd bf       	out	0x3d, r28	; 61
     86c:	5c 01       	movw	r10, r24
	//we should first check if device is on, get that from lora and add new eventBit 

	//tell sensors to start meassuring 
	xEventGroupSetBits(_startMeasureEventGroup, _startMeasureBit);
     86e:	40 91 a2 08 	lds	r20, 0x08A2	; 0x8008a2 <_startMeasureBit>
     872:	50 91 a3 08 	lds	r21, 0x08A3	; 0x8008a3 <_startMeasureBit+0x1>
     876:	60 91 a4 08 	lds	r22, 0x08A4	; 0x8008a4 <_startMeasureBit+0x2>
     87a:	70 91 a5 08 	lds	r23, 0x08A5	; 0x8008a5 <_startMeasureBit+0x3>
     87e:	80 91 a6 08 	lds	r24, 0x08A6	; 0x8008a6 <_startMeasureEventGroup>
     882:	90 91 a7 08 	lds	r25, 0x08A7	; 0x8008a7 <_startMeasureEventGroup+0x1>
     886:	dd d3       	rcall	.+1978   	; 0x1042 <xEventGroupSetBits>
	printf("device has set bits");
     888:	86 e7       	ldi	r24, 0x76	; 118
     88a:	92 e0       	ldi	r25, 0x02	; 2
     88c:	9f 93       	push	r25
     88e:	8f 93       	push	r24
     890:	0e 94 af 2b 	call	0x575e	; 0x575e <printf>

	//wait for sensors to read data
	EventBits_t uxBits = xEventGroupWaitBits(_readyEventGroup, //eventGroup it is interested in
     894:	40 91 9c 08 	lds	r20, 0x089C	; 0x80089c <_readyBit>
     898:	50 91 9d 08 	lds	r21, 0x089D	; 0x80089d <_readyBit+0x1>
     89c:	60 91 9e 08 	lds	r22, 0x089E	; 0x80089e <_readyBit+0x2>
     8a0:	70 91 9f 08 	lds	r23, 0x089F	; 0x80089f <_readyBit+0x3>
     8a4:	cc 24       	eor	r12, r12
     8a6:	ca 94       	dec	r12
     8a8:	dc 2c       	mov	r13, r12
     8aa:	76 01       	movw	r14, r12
     8ac:	01 e0       	ldi	r16, 0x01	; 1
     8ae:	21 e0       	ldi	r18, 0x01	; 1
     8b0:	80 91 a0 08 	lds	r24, 0x08A0	; 0x8008a0 <_readyEventGroup>
     8b4:	90 91 a1 08 	lds	r25, 0x08A1	; 0x8008a1 <_readyEventGroup+0x1>
     8b8:	04 d3       	rcall	.+1544   	; 0xec2 <xEventGroupWaitBits>
		_readyBit, //bits it is interested in
		pdTRUE, //clears the bits 
		pdTRUE, //waits for both bits to be set
		portMAX_DELAY); //waits forever if needed

	if ((uxBits & (_readyBit)) == (_readyBit)) {
     8ba:	00 91 9c 08 	lds	r16, 0x089C	; 0x80089c <_readyBit>
     8be:	10 91 9d 08 	lds	r17, 0x089D	; 0x80089d <_readyBit+0x1>
     8c2:	20 91 9e 08 	lds	r18, 0x089E	; 0x80089e <_readyBit+0x2>
     8c6:	30 91 9f 08 	lds	r19, 0x089F	; 0x80089f <_readyBit+0x3>
     8ca:	dc 01       	movw	r26, r24
     8cc:	cb 01       	movw	r24, r22
     8ce:	80 23       	and	r24, r16
     8d0:	91 23       	and	r25, r17
     8d2:	a2 23       	and	r26, r18
     8d4:	b3 23       	and	r27, r19
     8d6:	0f 90       	pop	r0
     8d8:	0f 90       	pop	r0
     8da:	08 17       	cp	r16, r24
     8dc:	19 07       	cpc	r17, r25
     8de:	2a 07       	cpc	r18, r26
     8e0:	3b 07       	cpc	r19, r27
     8e2:	09 f0       	breq	.+2      	; 0x8e6 <device_startMeasuring+0x9e>
		device_setCO2ToCurrent(self, device_getCO2Data(self));
     8e4:	7e c0       	rjmp	.+252    	; 0x9e2 <device_startMeasuring+0x19a>
     8e6:	c5 01       	movw	r24, r10
     8e8:	95 df       	rcall	.-214    	; 0x814 <device_getCO2Data>
     8ea:	bc 01       	movw	r22, r24
     8ec:	c5 01       	movw	r24, r10
		device_setTemperatureToCurrent(self, device_getTemperatureData(self));
     8ee:	8d df       	rcall	.-230    	; 0x80a <device_setCO2ToCurrent>
     8f0:	c5 01       	movw	r24, r10
     8f2:	a0 df       	rcall	.-192    	; 0x834 <device_getTemperatureData>
     8f4:	bc 01       	movw	r22, r24
     8f6:	c5 01       	movw	r24, r10
		device_setHumidityToCurrent(self, device_getHumidityData(self));
     8f8:	98 df       	rcall	.-208    	; 0x82a <device_setTemperatureToCurrent>
     8fa:	c5 01       	movw	r24, r10
     8fc:	7c df       	rcall	.-264    	; 0x7f6 <device_getHumidityData>
     8fe:	bc 01       	movw	r22, r24
     900:	c5 01       	movw	r24, r10
     902:	74 df       	rcall	.-280    	; 0x7ec <device_setHumidityToCurrent>
		
		printf("device got done bit\n");
     904:	8a e8       	ldi	r24, 0x8A	; 138
     906:	92 e0       	ldi	r25, 0x02	; 2
     908:	0e 94 c2 2b 	call	0x5784	; 0x5784 <puts>
		
		printf("CO2 is: %u\n", co2Reader_getCO2(self->co2reader));
     90c:	f5 01       	movw	r30, r10
     90e:	80 81       	ld	r24, Z
     910:	91 81       	ldd	r25, Z+1	; 0x01
     912:	a3 de       	rcall	.-698    	; 0x65a <co2Reader_getCO2>
     914:	1f 92       	push	r1
     916:	8f 93       	push	r24
     918:	8e e9       	ldi	r24, 0x9E	; 158
     91a:	92 e0       	ldi	r25, 0x02	; 2
     91c:	9f 93       	push	r25
     91e:	8f 93       	push	r24
     920:	0e 94 af 2b 	call	0x575e	; 0x575e <printf>
		printf("Temperature is: %d\n", device_getTemperatureData(self));
     924:	c5 01       	movw	r24, r10
     926:	86 df       	rcall	.-244    	; 0x834 <device_getTemperatureData>
     928:	9f 93       	push	r25
     92a:	8f 93       	push	r24
     92c:	8a ea       	ldi	r24, 0xAA	; 170
     92e:	92 e0       	ldi	r25, 0x02	; 2
     930:	9f 93       	push	r25
     932:	8f 93       	push	r24
     934:	0e 94 af 2b 	call	0x575e	; 0x575e <printf>
		printf("Humidity is: %d\n", device_getHumidityData(self));
     938:	c5 01       	movw	r24, r10
     93a:	5d df       	rcall	.-326    	; 0x7f6 <device_getHumidityData>
     93c:	9f 93       	push	r25
     93e:	8f 93       	push	r24
     940:	8e eb       	ldi	r24, 0xBE	; 190
     942:	92 e0       	ldi	r25, 0x02	; 2
     944:	9f 93       	push	r25
     946:	8f 93       	push	r24
     948:	0e 94 af 2b 	call	0x575e	; 0x575e <printf>
		
		
		
		
		/*Perhaps loraPayload is not a good idea to be here*/
		_uplink_payload = getcurrentConditionPayload(self->currentCondition);
     94c:	f5 01       	movw	r30, r10
     94e:	64 81       	ldd	r22, Z+4	; 0x04
     950:	75 81       	ldd	r23, Z+5	; 0x05
     952:	ce 01       	movw	r24, r28
     954:	01 96       	adiw	r24, 0x01	; 1
     956:	ad de       	rcall	.-678    	; 0x6b2 <getcurrentConditionPayload>
     958:	86 e1       	ldi	r24, 0x16	; 22
     95a:	fe 01       	movw	r30, r28
     95c:	31 96       	adiw	r30, 0x01	; 1
     95e:	a4 e8       	ldi	r26, 0x84	; 132
     960:	b8 e0       	ldi	r27, 0x08	; 8
     962:	01 90       	ld	r0, Z+
     964:	0d 92       	st	X+, r0
     966:	8a 95       	dec	r24
     968:	e1 f7       	brne	.-8      	; 0x962 <device_startMeasuring+0x11a>
     96a:	04 e8       	ldi	r16, 0x84	; 132
		
		//vTaskDelay(1000);
		
		printf("The temperature in device is: %d\n", _uplink_payload.bytes[0]);
     96c:	18 e0       	ldi	r17, 0x08	; 8
     96e:	f8 01       	movw	r30, r16
     970:	82 81       	ldd	r24, Z+2	; 0x02
     972:	1f 92       	push	r1
     974:	8f 93       	push	r24
     976:	8f ec       	ldi	r24, 0xCF	; 207
     978:	92 e0       	ldi	r25, 0x02	; 2
     97a:	9f 93       	push	r25
     97c:	8f 93       	push	r24
     97e:	0e 94 af 2b 	call	0x575e	; 0x575e <printf>
     982:	f8 01       	movw	r30, r16
		printf("The temperature2 in device is: %d\n", _uplink_payload.bytes[1]);
     984:	83 81       	ldd	r24, Z+3	; 0x03
     986:	1f 92       	push	r1
     988:	8f 93       	push	r24
     98a:	81 ef       	ldi	r24, 0xF1	; 241
     98c:	92 e0       	ldi	r25, 0x02	; 2
     98e:	9f 93       	push	r25
     990:	8f 93       	push	r24
     992:	0e 94 af 2b 	call	0x575e	; 0x575e <printf>
     996:	f8 01       	movw	r30, r16
		printf("The humidity in device is: %d\n", _uplink_payload.bytes[2]);
     998:	84 81       	ldd	r24, Z+4	; 0x04
     99a:	1f 92       	push	r1
     99c:	8f 93       	push	r24
     99e:	84 e1       	ldi	r24, 0x14	; 20
     9a0:	93 e0       	ldi	r25, 0x03	; 3
     9a2:	9f 93       	push	r25
     9a4:	8f 93       	push	r24
     9a6:	0e 94 af 2b 	call	0x575e	; 0x575e <printf>
     9aa:	f8 01       	movw	r30, r16
		printf("The humidity2 in device is: %d\n", _uplink_payload.bytes[3]);		
     9ac:	85 81       	ldd	r24, Z+5	; 0x05
     9ae:	1f 92       	push	r1
     9b0:	8f 93       	push	r24
     9b2:	83 e3       	ldi	r24, 0x33	; 51
     9b4:	93 e0       	ldi	r25, 0x03	; 3
     9b6:	9f 93       	push	r25
     9b8:	8f 93       	push	r24
     9ba:	0e 94 af 2b 	call	0x575e	; 0x575e <printf>
     9be:	0f ef       	ldi	r16, 0xFF	; 255
		
		xMessageBufferSend(_uplinkmessageBuffer,(void*) &_uplink_payload,sizeof(_uplink_payload),portMAX_DELAY);
     9c0:	1f ef       	ldi	r17, 0xFF	; 255
     9c2:	98 01       	movw	r18, r16
     9c4:	46 e1       	ldi	r20, 0x16	; 22
     9c6:	50 e0       	ldi	r21, 0x00	; 0
     9c8:	64 e8       	ldi	r22, 0x84	; 132
     9ca:	78 e0       	ldi	r23, 0x08	; 8
     9cc:	80 91 9a 08 	lds	r24, 0x089A	; 0x80089a <_uplinkmessageBuffer>
     9d0:	90 91 9b 08 	lds	r25, 0x089B	; 0x80089b <_uplinkmessageBuffer+0x1>
     9d4:	0e 94 3e 10 	call	0x207c	; 0x207c <xStreamBufferSend>
     9d8:	0f b6       	in	r0, 0x3f	; 63
     9da:	f8 94       	cli
     9dc:	de bf       	out	0x3e, r29	; 62
     9de:	0f be       	out	0x3f, r0	; 63
     9e0:	cd bf       	out	0x3d, r28	; 61
     9e2:	66 96       	adiw	r28, 0x16	; 22
		
		
	}
}
     9e4:	0f b6       	in	r0, 0x3f	; 63
     9e6:	f8 94       	cli
     9e8:	de bf       	out	0x3e, r29	; 62
     9ea:	0f be       	out	0x3f, r0	; 63
     9ec:	cd bf       	out	0x3d, r28	; 61
     9ee:	df 91       	pop	r29
     9f0:	cf 91       	pop	r28
     9f2:	1f 91       	pop	r17
     9f4:	0f 91       	pop	r16
     9f6:	ff 90       	pop	r15
     9f8:	ef 90       	pop	r14
     9fa:	df 90       	pop	r13
     9fc:	cf 90       	pop	r12
     9fe:	bf 90       	pop	r11
     a00:	af 90       	pop	r10
     a02:	08 95       	ret

00000a04 <device_executeTask>:
     a04:	ec 01       	movw	r28, r24
}

//devided so we can test
void device_executeTask(device_t self) {
	for (;;)
		device_startMeasuring(self);
     a06:	ce 01       	movw	r24, r28
     a08:	1f df       	rcall	.-450    	; 0x848 <device_startMeasuring>
     a0a:	fd cf       	rjmp	.-6      	; 0xa06 <device_executeTask+0x2>

00000a0c <humAndTempReader_create>:
void humAndTempReader_destroy(humAndTempReader_t self) {
	if (self == NULL)
	return;

	//delete will clear the allocated memory to the task + we need to remove everything else
	vTaskDelete(self->handleTask);
     a0c:	2f 92       	push	r2
     a0e:	3f 92       	push	r3
     a10:	4f 92       	push	r4
     a12:	5f 92       	push	r5
     a14:	6f 92       	push	r6
     a16:	7f 92       	push	r7
     a18:	8f 92       	push	r8
     a1a:	9f 92       	push	r9
     a1c:	af 92       	push	r10
     a1e:	bf 92       	push	r11
     a20:	cf 92       	push	r12
     a22:	df 92       	push	r13
     a24:	ef 92       	push	r14
     a26:	ff 92       	push	r15
     a28:	0f 93       	push	r16
     a2a:	1f 93       	push	r17
     a2c:	cf 93       	push	r28
     a2e:	df 93       	push	r29
     a30:	88 2e       	mov	r8, r24
     a32:	96 2e       	mov	r9, r22
     a34:	1a 01       	movw	r2, r20
     a36:	28 01       	movw	r4, r16
     a38:	39 01       	movw	r6, r18
     a3a:	61 e0       	ldi	r22, 0x01	; 1
     a3c:	70 e0       	ldi	r23, 0x00	; 0
     a3e:	86 e0       	ldi	r24, 0x06	; 6
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	0e 94 11 2a 	call	0x5422	; 0x5422 <calloc>
     a46:	ec 01       	movw	r28, r24
     a48:	89 2b       	or	r24, r25
     a4a:	a1 f1       	breq	.+104    	; 0xab4 <humAndTempReader_create+0xa8>
     a4c:	19 82       	std	Y+1, r1	; 0x01
     a4e:	18 82       	st	Y, r1
     a50:	1b 82       	std	Y+3, r1	; 0x03
     a52:	1a 82       	std	Y+2, r1	; 0x02
     a54:	30 92 b3 08 	sts	0x08B3, r3	; 0x8008b3 <_startMeasureEventGroup+0x1>
     a58:	20 92 b2 08 	sts	0x08B2, r2	; 0x8008b2 <_startMeasureEventGroup>
     a5c:	40 92 ae 08 	sts	0x08AE, r4	; 0x8008ae <_startMeasureBit>
     a60:	50 92 af 08 	sts	0x08AF, r5	; 0x8008af <_startMeasureBit+0x1>
     a64:	60 92 b0 08 	sts	0x08B0, r6	; 0x8008b0 <_startMeasureBit+0x2>
     a68:	70 92 b1 08 	sts	0x08B1, r7	; 0x8008b1 <_startMeasureBit+0x3>
     a6c:	f0 92 ad 08 	sts	0x08AD, r15	; 0x8008ad <_readyEventGroup+0x1>
     a70:	e0 92 ac 08 	sts	0x08AC, r14	; 0x8008ac <_readyEventGroup>
     a74:	a0 92 a8 08 	sts	0x08A8, r10	; 0x8008a8 <_readyBit>
     a78:	b0 92 a9 08 	sts	0x08A9, r11	; 0x8008a9 <_readyBit+0x1>
     a7c:	c0 92 aa 08 	sts	0x08AA, r12	; 0x8008aa <_readyBit+0x2>
     a80:	d0 92 ab 08 	sts	0x08AB, r13	; 0x8008ab <_readyBit+0x3>
     a84:	0e 94 df 1b 	call	0x37be	; 0x37be <hih8120Create>
     a88:	49 2d       	mov	r20, r9
     a8a:	50 e0       	ldi	r21, 0x00	; 0
     a8c:	7e 01       	movw	r14, r28
     a8e:	84 e0       	ldi	r24, 0x04	; 4
     a90:	e8 0e       	add	r14, r24
     a92:	f1 1c       	adc	r15, r1
     a94:	08 2d       	mov	r16, r8
     a96:	9e 01       	movw	r18, r28
     a98:	63 e5       	ldi	r22, 0x53	; 83
     a9a:	73 e0       	ldi	r23, 0x03	; 3
     a9c:	81 ed       	ldi	r24, 0xD1	; 209
     a9e:	95 e0       	ldi	r25, 0x05	; 5
     aa0:	0e 94 6a 12 	call	0x24d4	; 0x24d4 <xTaskCreate>
     aa4:	84 e6       	ldi	r24, 0x64	; 100
     aa6:	93 e0       	ldi	r25, 0x03	; 3
     aa8:	9f 93       	push	r25
     aaa:	8f 93       	push	r24
     aac:	0e 94 af 2b 	call	0x575e	; 0x575e <printf>
     ab0:	0f 90       	pop	r0
     ab2:	0f 90       	pop	r0
     ab4:	ce 01       	movw	r24, r28
     ab6:	df 91       	pop	r29
     ab8:	cf 91       	pop	r28
     aba:	1f 91       	pop	r17
     abc:	0f 91       	pop	r16
     abe:	ff 90       	pop	r15
     ac0:	ef 90       	pop	r14
     ac2:	df 90       	pop	r13
     ac4:	cf 90       	pop	r12
     ac6:	bf 90       	pop	r11
     ac8:	af 90       	pop	r10
     aca:	9f 90       	pop	r9
     acc:	8f 90       	pop	r8
     ace:	7f 90       	pop	r7
     ad0:	6f 90       	pop	r6
     ad2:	5f 90       	pop	r5
     ad4:	4f 90       	pop	r4
     ad6:	3f 90       	pop	r3
     ad8:	2f 90       	pop	r2
     ada:	08 95       	ret

00000adc <humAndTempReader_measure>:
	for (;;) {
		humAndTempReader_measure(self);
	}
}

void humAndTempReader_measure(humAndTempReader_t self) {//dummy
     adc:	cf 92       	push	r12
     ade:	df 92       	push	r13
     ae0:	ef 92       	push	r14
     ae2:	ff 92       	push	r15
     ae4:	0f 93       	push	r16
     ae6:	1f 93       	push	r17
     ae8:	cf 93       	push	r28
     aea:	df 93       	push	r29
     aec:	ec 01       	movw	r28, r24
	EventBits_t uxBits = xEventGroupWaitBits(_startMeasureEventGroup, //eventGroup
     aee:	40 91 ae 08 	lds	r20, 0x08AE	; 0x8008ae <_startMeasureBit>
     af2:	50 91 af 08 	lds	r21, 0x08AF	; 0x8008af <_startMeasureBit+0x1>
     af6:	60 91 b0 08 	lds	r22, 0x08B0	; 0x8008b0 <_startMeasureBit+0x2>
     afa:	70 91 b1 08 	lds	r23, 0x08B1	; 0x8008b1 <_startMeasureBit+0x3>
     afe:	cc 24       	eor	r12, r12
     b00:	ca 94       	dec	r12
     b02:	dc 2c       	mov	r13, r12
     b04:	76 01       	movw	r14, r12
     b06:	01 e0       	ldi	r16, 0x01	; 1
     b08:	21 e0       	ldi	r18, 0x01	; 1
     b0a:	80 91 b2 08 	lds	r24, 0x08B2	; 0x8008b2 <_startMeasureEventGroup>
     b0e:	90 91 b3 08 	lds	r25, 0x08B3	; 0x8008b3 <_startMeasureEventGroup+0x1>
     b12:	d7 d1       	rcall	.+942    	; 0xec2 <xEventGroupWaitBits>
	_startMeasureBit, //bits it is interested i
	pdTRUE, //clears the bits
	pdTRUE, //waits for both bits to be set
	portMAX_DELAY); //wait

	if ((uxBits & (_startMeasureBit)) == (_startMeasureBit)) {
     b14:	00 91 ae 08 	lds	r16, 0x08AE	; 0x8008ae <_startMeasureBit>
     b18:	10 91 af 08 	lds	r17, 0x08AF	; 0x8008af <_startMeasureBit+0x1>
     b1c:	20 91 b0 08 	lds	r18, 0x08B0	; 0x8008b0 <_startMeasureBit+0x2>
     b20:	30 91 b1 08 	lds	r19, 0x08B1	; 0x8008b1 <_startMeasureBit+0x3>
     b24:	dc 01       	movw	r26, r24
     b26:	cb 01       	movw	r24, r22
     b28:	80 23       	and	r24, r16
     b2a:	91 23       	and	r25, r17
     b2c:	a2 23       	and	r26, r18
     b2e:	b3 23       	and	r27, r19
     b30:	08 17       	cp	r16, r24
     b32:	19 07       	cpc	r17, r25
     b34:	2a 07       	cpc	r18, r26
     b36:	3b 07       	cpc	r19, r27
     b38:	59 f5       	brne	.+86     	; 0xb90 <humAndTempReader_measure+0xb4>
		hih8120Meassure();
     b3a:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <hih8120Meassure>
		vTaskDelay(10);
     b3e:	6a e0       	ldi	r22, 0x0A	; 10
     b40:	70 e0       	ldi	r23, 0x00	; 0
     b42:	80 e0       	ldi	r24, 0x00	; 0
     b44:	90 e0       	ldi	r25, 0x00	; 0
     b46:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <vTaskDelay>
		if(hih8120IsReady())
     b4a:	0e 94 f7 1b 	call	0x37ee	; 0x37ee <hih8120IsReady>
     b4e:	88 23       	and	r24, r24
     b50:	61 f0       	breq	.+24     	; 0xb6a <humAndTempReader_measure+0x8e>
		{
			self->humidity = hih8120GetHumidityPercent_x10();
     b52:	0e 94 20 1c 	call	0x3840	; 0x3840 <hih8120GetHumidityPercent_x10>
     b56:	99 83       	std	Y+1, r25	; 0x01
     b58:	88 83       	st	Y, r24
			self->temperature = hih8120GetTemperature_x10();
     b5a:	0e 94 46 1c 	call	0x388c	; 0x388c <hih8120GetTemperature_x10>
     b5e:	9b 83       	std	Y+3, r25	; 0x03
     b60:	8a 83       	std	Y+2, r24	; 0x02
			printf("humidity and temperature done bit set\n");
     b62:	83 e8       	ldi	r24, 0x83	; 131
     b64:	93 e0       	ldi	r25, 0x03	; 3
     b66:	0e 94 c2 2b 	call	0x5784	; 0x5784 <puts>
		}
		vTaskDelay(2500); //pretend it takes some time
     b6a:	64 ec       	ldi	r22, 0xC4	; 196
     b6c:	79 e0       	ldi	r23, 0x09	; 9
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	90 e0       	ldi	r25, 0x00	; 0
     b72:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <vTaskDelay>

		//set done bit so that device knows meassurement is done
		xEventGroupSetBits(_readyEventGroup, _readyBit);
     b76:	40 91 a8 08 	lds	r20, 0x08A8	; 0x8008a8 <_readyBit>
     b7a:	50 91 a9 08 	lds	r21, 0x08A9	; 0x8008a9 <_readyBit+0x1>
     b7e:	60 91 aa 08 	lds	r22, 0x08AA	; 0x8008aa <_readyBit+0x2>
     b82:	70 91 ab 08 	lds	r23, 0x08AB	; 0x8008ab <_readyBit+0x3>
     b86:	80 91 ac 08 	lds	r24, 0x08AC	; 0x8008ac <_readyEventGroup>
     b8a:	90 91 ad 08 	lds	r25, 0x08AD	; 0x8008ad <_readyEventGroup+0x1>
     b8e:	59 d2       	rcall	.+1202   	; 0x1042 <xEventGroupSetBits>
	}
}
     b90:	df 91       	pop	r29
     b92:	cf 91       	pop	r28
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	df 90       	pop	r13
     b9e:	cf 90       	pop	r12
     ba0:	08 95       	ret

00000ba2 <humAndTempReader_executeTask>:
	//free(self->temperature);
	//free(self);
}

//actual task, methods devided so that it is possible to test
void humAndTempReader_executeTask(humAndTempReader_t self) {
     ba2:	ec 01       	movw	r28, r24
	for (;;) {
		humAndTempReader_measure(self);
     ba4:	ce 01       	movw	r24, r28
     ba6:	9a df       	rcall	.-204    	; 0xadc <humAndTempReader_measure>
     ba8:	fd cf       	rjmp	.-6      	; 0xba4 <humAndTempReader_executeTask+0x2>

00000baa <humAndTempReader_getHumidity>:
	}
}

uint16_t humAndTempReader_getHumidity(humAndTempReader_t self){
	return self->humidity;
}
     baa:	fc 01       	movw	r30, r24
     bac:	80 81       	ld	r24, Z
     bae:	91 81       	ldd	r25, Z+1	; 0x01
     bb0:	08 95       	ret

00000bb2 <humAndTempReader_getTemperature>:

int16_t humAndTempReader_getTemperature(humAndTempReader_t self){
	return self->temperature;
}
     bb2:	fc 01       	movw	r30, r24
     bb4:	82 81       	ldd	r24, Z+2	; 0x02
     bb6:	93 81       	ldd	r25, Z+3	; 0x03
     bb8:	08 95       	ret

00000bba <lora_UpLinkHandler_create>:


/*Check for the parameters*/

void lora_UpLinkHandler_create(UBaseType_t lora_handler_task_priority, MessageBufferHandle_t xMessageBuffer)
{
     bba:	ef 92       	push	r14
     bbc:	ff 92       	push	r15
     bbe:	0f 93       	push	r16
     bc0:	9b 01       	movw	r18, r22
	_buffer = xMessageBuffer;
	
	xTaskCreate(
     bc2:	e1 2c       	mov	r14, r1
     bc4:	f1 2c       	mov	r15, r1
     bc6:	08 2f       	mov	r16, r24
     bc8:	48 e8       	ldi	r20, 0x88	; 136
     bca:	51 e0       	ldi	r21, 0x01	; 1
     bcc:	69 ea       	ldi	r22, 0xA9	; 169
     bce:	73 e0       	ldi	r23, 0x03	; 3
     bd0:	8e e2       	ldi	r24, 0x2E	; 46
     bd2:	97 e0       	ldi	r25, 0x07	; 7
     bd4:	0e 94 6a 12 	call	0x24d4	; 0x24d4 <xTaskCreate>
	,  (const portCHAR *)"LRUpHand"  // A name just for humans
	,  configMINIMAL_STACK_SIZE+200  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  xMessageBuffer
	,  lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}
     bd8:	0f 91       	pop	r16
     bda:	ff 90       	pop	r15
     bdc:	ef 90       	pop	r14
     bde:	08 95       	ret

00000be0 <lora_UpLinkHandler_task>:
	
	/*Receives message from message buffer shared between it and the application responsible for gathering the data
	--> Should be called every 5 minutes from application
	*/
	void lora_UpLinkHandler_task(MessageBufferHandle_t xMessageBuffer)
	{	
     be0:	df 92       	push	r13
     be2:	ef 92       	push	r14
     be4:	ff 92       	push	r15
     be6:	0f 93       	push	r16
     be8:	1f 93       	push	r17
     bea:	cf 93       	push	r28
     bec:	df 93       	push	r29
     bee:	7c 01       	movw	r14, r24
		size_t xBytesToSend;
		char rxData[50];
		
		// Hardware reset of LoRaWAN transceiver
		lora_driver_reset_rn2483(1);
     bf0:	81 e0       	ldi	r24, 0x01	; 1
     bf2:	0e 94 65 1f 	call	0x3eca	; 0x3eca <lora_driver_reset_rn2483>
		vTaskDelay(2);
     bf6:	62 e0       	ldi	r22, 0x02	; 2
     bf8:	70 e0       	ldi	r23, 0x00	; 0
     bfa:	80 e0       	ldi	r24, 0x00	; 0
     bfc:	90 e0       	ldi	r25, 0x00	; 0
     bfe:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <vTaskDelay>
		lora_driver_reset_rn2483(0);
     c02:	80 e0       	ldi	r24, 0x00	; 0
     c04:	0e 94 65 1f 	call	0x3eca	; 0x3eca <lora_driver_reset_rn2483>
		// Give it a chance to wakeup
		vTaskDelay(150);
     c08:	66 e9       	ldi	r22, 0x96	; 150
     c0a:	70 e0       	ldi	r23, 0x00	; 0
     c0c:	80 e0       	ldi	r24, 0x00	; 0
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <vTaskDelay>

		lora_driver_flush_buffers(); // get rid of first version string from module after reset!
     c14:	0e 94 1b 1f 	call	0x3e36	; 0x3e36 <lora_driver_flush_buffers>
}

static void _lora_setup(void)
{
	e_LoRa_return_code_t rc;
	led_slow_blink(led_ST2); // OPTIONAL: Led the green led blink slowly while we are setting up LoRa
     c18:	81 e0       	ldi	r24, 0x01	; 1
     c1a:	0e 94 73 1d 	call	0x3ae6	; 0x3ae6 <led_slow_blink>
	//The below code is required to be executed only once due to the fact that these MAC settings
	// can be stored inside of the tranciever
	//START ON ONE TIME USE CODE

	// Factory reset the transceiver
	printf("FactoryReset >%s<\n", lora_driver_map_return_code_to_text(lora_driver_rn2483_factory_reset()));
     c1e:	0e 94 79 1f 	call	0x3ef2	; 0x3ef2 <lora_driver_rn2483_factory_reset>
     c22:	0e 94 f6 21 	call	0x43ec	; 0x43ec <lora_driver_map_return_code_to_text>
     c26:	9f 93       	push	r25
     c28:	8f 93       	push	r24
     c2a:	82 eb       	ldi	r24, 0xB2	; 178
     c2c:	93 e0       	ldi	r25, 0x03	; 3
     c2e:	9f 93       	push	r25
     c30:	8f 93       	push	r24
     c32:	0e 94 af 2b 	call	0x575e	; 0x575e <printf>
	
	// Configure to EU868 LoRaWAN standards
	printf("Configure to EU868 >%s<\n", lora_driver_map_return_code_to_text(lora_driver_configure_to_eu868()));
     c36:	0e 94 f7 20 	call	0x41ee	; 0x41ee <lora_driver_configure_to_eu868>
     c3a:	0e 94 f6 21 	call	0x43ec	; 0x43ec <lora_driver_map_return_code_to_text>
     c3e:	9f 93       	push	r25
     c40:	8f 93       	push	r24
     c42:	85 ec       	ldi	r24, 0xC5	; 197
     c44:	93 e0       	ldi	r25, 0x03	; 3
     c46:	9f 93       	push	r25
     c48:	8f 93       	push	r24
     c4a:	0e 94 af 2b 	call	0x575e	; 0x575e <printf>

	// Get the transceivers HW EUI
	rc = lora_driver_get_rn2483_hweui(_out_buf);
     c4e:	8a ec       	ldi	r24, 0xCA	; 202
     c50:	98 e0       	ldi	r25, 0x08	; 8
     c52:	0e 94 8b 1f 	call	0x3f16	; 0x3f16 <lora_driver_get_rn2483_hweui>
	printf("Get HWEUI >%s<: %s\n",lora_driver_map_return_code_to_text(rc), _out_buf);
     c56:	0e 94 f6 21 	call	0x43ec	; 0x43ec <lora_driver_map_return_code_to_text>
     c5a:	ca ec       	ldi	r28, 0xCA	; 202
     c5c:	d8 e0       	ldi	r29, 0x08	; 8
     c5e:	df 93       	push	r29
     c60:	cf 93       	push	r28
     c62:	9f 93       	push	r25
     c64:	8f 93       	push	r24
     c66:	8e ed       	ldi	r24, 0xDE	; 222
     c68:	93 e0       	ldi	r25, 0x03	; 3
     c6a:	9f 93       	push	r25
     c6c:	8f 93       	push	r24
     c6e:	0e 94 af 2b 	call	0x575e	; 0x575e <printf>

	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_map_return_code_to_text(lora_driver_set_device_identifier(_out_buf)));
     c72:	ce 01       	movw	r24, r28
     c74:	0e 94 a7 1f 	call	0x3f4e	; 0x3f4e <lora_driver_set_device_identifier>
     c78:	0e 94 f6 21 	call	0x43ec	; 0x43ec <lora_driver_map_return_code_to_text>
     c7c:	9f 93       	push	r25
     c7e:	8f 93       	push	r24
     c80:	df 93       	push	r29
     c82:	cf 93       	push	r28
     c84:	82 ef       	ldi	r24, 0xF2	; 242
     c86:	93 e0       	ldi	r25, 0x03	; 3
     c88:	9f 93       	push	r25
     c8a:	8f 93       	push	r24
     c8c:	0e 94 af 2b 	call	0x575e	; 0x575e <printf>

	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_map_return_code_to_text(lora_driver_set_otaa_identity(LORA_appEUI,LORA_appKEY,_out_buf)));
     c90:	ae 01       	movw	r20, r28
     c92:	67 e0       	ldi	r22, 0x07	; 7
     c94:	74 e0       	ldi	r23, 0x04	; 4
     c96:	88 e2       	ldi	r24, 0x28	; 40
     c98:	94 e0       	ldi	r25, 0x04	; 4
     c9a:	0e 94 d5 21 	call	0x43aa	; 0x43aa <lora_driver_set_otaa_identity>
     c9e:	0e 94 f6 21 	call	0x43ec	; 0x43ec <lora_driver_map_return_code_to_text>
     ca2:	9f 93       	push	r25
     ca4:	8f 93       	push	r24
     ca6:	df 93       	push	r29
     ca8:	cf 93       	push	r28
     caa:	87 e0       	ldi	r24, 0x07	; 7
     cac:	94 e0       	ldi	r25, 0x04	; 4
     cae:	9f 93       	push	r25
     cb0:	8f 93       	push	r24
     cb2:	88 e2       	ldi	r24, 0x28	; 40
     cb4:	94 e0       	ldi	r25, 0x04	; 4
     cb6:	9f 93       	push	r25
     cb8:	8f 93       	push	r24
     cba:	89 e3       	ldi	r24, 0x39	; 57
     cbc:	94 e0       	ldi	r25, 0x04	; 4
     cbe:	9f 93       	push	r25
     cc0:	8f 93       	push	r24
     cc2:	0e 94 af 2b 	call	0x575e	; 0x575e <printf>

	// Save all the MAC settings in the transceiver
	printf("Save mac >%s<\n",lora_driver_map_return_code_to_text(lora_driver_save_mac()));
     cc6:	0e 94 da 1f 	call	0x3fb4	; 0x3fb4 <lora_driver_save_mac>
     cca:	0e 94 f6 21 	call	0x43ec	; 0x43ec <lora_driver_map_return_code_to_text>
     cce:	9f 93       	push	r25
     cd0:	8f 93       	push	r24
     cd2:	8f e6       	ldi	r24, 0x6F	; 111
     cd4:	94 e0       	ldi	r25, 0x04	; 4
     cd6:	9f 93       	push	r25
     cd8:	8f 93       	push	r24
     cda:	0e 94 af 2b 	call	0x575e	; 0x575e <printf>

	//END OF ONE TIME USE CODE
	
	
	// Enable Adaptive Data Rate
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_map_return_code_to_text(lora_driver_set_adaptive_data_rate(LoRa_ON)));
     cde:	8d b7       	in	r24, 0x3d	; 61
     ce0:	9e b7       	in	r25, 0x3e	; 62
     ce2:	82 96       	adiw	r24, 0x22	; 34
     ce4:	0f b6       	in	r0, 0x3f	; 63
     ce6:	f8 94       	cli
     ce8:	9e bf       	out	0x3e, r25	; 62
     cea:	0f be       	out	0x3f, r0	; 63
     cec:	8d bf       	out	0x3d, r24	; 61
     cee:	81 e0       	ldi	r24, 0x01	; 1
     cf0:	0e 94 d4 20 	call	0x41a8	; 0x41a8 <lora_driver_set_adaptive_data_rate>
     cf4:	0e 94 f6 21 	call	0x43ec	; 0x43ec <lora_driver_map_return_code_to_text>
     cf8:	9f 93       	push	r25
     cfa:	8f 93       	push	r24
     cfc:	8e e7       	ldi	r24, 0x7E	; 126
     cfe:	94 e0       	ldi	r25, 0x04	; 4
     d00:	9f 93       	push	r25
     d02:	8f 93       	push	r24
     d04:	0e 94 af 2b 	call	0x575e	; 0x575e <printf>

	// Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	printf("Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_map_return_code_to_text(lora_driver_set_receive_delay(500)));
     d08:	84 ef       	ldi	r24, 0xF4	; 244
     d0a:	91 e0       	ldi	r25, 0x01	; 1
     d0c:	0e 94 df 20 	call	0x41be	; 0x41be <lora_driver_set_receive_delay>
     d10:	0e 94 f6 21 	call	0x43ec	; 0x43ec <lora_driver_map_return_code_to_text>
     d14:	9f 93       	push	r25
     d16:	8f 93       	push	r24
     d18:	81 e0       	ldi	r24, 0x01	; 1
     d1a:	8f 93       	push	r24
     d1c:	84 ef       	ldi	r24, 0xF4	; 244
     d1e:	8f 93       	push	r24
     d20:	8f e9       	ldi	r24, 0x9F	; 159
     d22:	94 e0       	ldi	r25, 0x04	; 4
     d24:	9f 93       	push	r25
     d26:	8f 93       	push	r24
     d28:	0e 94 af 2b 	call	0x575e	; 0x575e <printf>
     d2c:	8d b7       	in	r24, 0x3d	; 61
     d2e:	9e b7       	in	r25, 0x3e	; 62
     d30:	0a 96       	adiw	r24, 0x0a	; 10
     d32:	0f b6       	in	r0, 0x3f	; 63
     d34:	f8 94       	cli
     d36:	9e bf       	out	0x3e, r25	; 62
     d38:	0f be       	out	0x3f, r0	; 63
     d3a:	8d bf       	out	0x3d, r24	; 61
     d3c:	ca e0       	ldi	r28, 0x0A	; 10
     d3e:	d0 e0       	ldi	r29, 0x00	; 0
	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
	
	do {
		rc = lora_driver_join(LoRa_OTAA);
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_map_return_code_to_text(rc));
     d40:	0f eb       	ldi	r16, 0xBF	; 191
     d42:	14 e0       	ldi	r17, 0x04	; 4

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
	
	do {
		rc = lora_driver_join(LoRa_OTAA);
     d44:	80 e0       	ldi	r24, 0x00	; 0
     d46:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <lora_driver_join>
     d4a:	d8 2e       	mov	r13, r24
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_map_return_code_to_text(rc));
     d4c:	0e 94 f6 21 	call	0x43ec	; 0x43ec <lora_driver_map_return_code_to_text>
     d50:	9f 93       	push	r25
     d52:	8f 93       	push	r24
     d54:	df 93       	push	r29
     d56:	cf 93       	push	r28
     d58:	1f 93       	push	r17
     d5a:	0f 93       	push	r16
     d5c:	0e 94 af 2b 	call	0x575e	; 0x575e <printf>

		if ( rc != LoRa_ACCEPTED)
     d60:	0f 90       	pop	r0
     d62:	0f 90       	pop	r0
     d64:	0f 90       	pop	r0
     d66:	0f 90       	pop	r0
     d68:	0f 90       	pop	r0
     d6a:	0f 90       	pop	r0
     d6c:	88 e0       	ldi	r24, 0x08	; 8
     d6e:	d8 16       	cp	r13, r24
     d70:	09 f4       	brne	.+2      	; 0xd74 <lora_UpLinkHandler_task+0x194>
     d72:	5c c0       	rjmp	.+184    	; 0xe2c <lora_UpLinkHandler_task+0x24c>
		{
			// Make the red led pulse to tell something went wrong
			led_long_puls(led_ST1); // OPTIONAL
     d74:	80 e0       	ldi	r24, 0x00	; 0
     d76:	0e 94 df 1d 	call	0x3bbe	; 0x3bbe <led_long_puls>
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
     d7a:	66 e3       	ldi	r22, 0x36	; 54
     d7c:	71 e0       	ldi	r23, 0x01	; 1
     d7e:	80 e0       	ldi	r24, 0x00	; 0
     d80:	90 e0       	ldi	r25, 0x00	; 0
     d82:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <vTaskDelay>
     d86:	21 97       	sbiw	r28, 0x01	; 1
		}
		else
		{
			break;
		}
	} while (--maxJoinTriesLeft);
     d88:	e9 f6       	brne	.-70     	; 0xd44 <lora_UpLinkHandler_task+0x164>
     d8a:	49 c0       	rjmp	.+146    	; 0xe1e <lora_UpLinkHandler_task+0x23e>
		led_fast_blink(led_ST1); // OPTIONAL

		// Lets stay here
		while (1)
		{
			taskYIELD();
     d8c:	72 d4       	rcall	.+2276   	; 0x1672 <vPortYield>
     d8e:	fe cf       	rjmp	.-4      	; 0xd8c <lora_UpLinkHandler_task+0x1ac>
			//_uplink_payload = (_uplink_payload) &rxData;
			
			/**< Status led ST4 (BLUE)*/
			//Makes the led light up in a short period.
			
			led_short_puls(led_ST4);
     d90:	83 e0       	ldi	r24, 0x03	; 3
     d92:	0e 94 f1 1d 	call	0x3be2	; 0x3be2 <led_short_puls>
			//_uplink_payload.port_no = 1;
			//_uplink_payload.len = 4;
			
			printf("The temperature in upLink is: %d\n", _uplink_payload.bytes[0]);
     d96:	c4 eb       	ldi	r28, 0xB4	; 180
     d98:	d8 e0       	ldi	r29, 0x08	; 8
     d9a:	8a 81       	ldd	r24, Y+2	; 0x02
     d9c:	1f 92       	push	r1
     d9e:	8f 93       	push	r24
     da0:	8f ed       	ldi	r24, 0xDF	; 223
     da2:	94 e0       	ldi	r25, 0x04	; 4
     da4:	9f 93       	push	r25
     da6:	8f 93       	push	r24
     da8:	0e 94 af 2b 	call	0x575e	; 0x575e <printf>
			printf("The temperature2 in upLink is: %d\n", _uplink_payload.bytes[1]);
     dac:	8b 81       	ldd	r24, Y+3	; 0x03
     dae:	1f 92       	push	r1
     db0:	8f 93       	push	r24
     db2:	81 e0       	ldi	r24, 0x01	; 1
     db4:	95 e0       	ldi	r25, 0x05	; 5
     db6:	9f 93       	push	r25
     db8:	8f 93       	push	r24
     dba:	0e 94 af 2b 	call	0x575e	; 0x575e <printf>
			printf("The humidity in upLink is: %u\n", _uplink_payload.bytes[2]);
     dbe:	8c 81       	ldd	r24, Y+4	; 0x04
     dc0:	1f 92       	push	r1
     dc2:	8f 93       	push	r24
     dc4:	84 e2       	ldi	r24, 0x24	; 36
     dc6:	95 e0       	ldi	r25, 0x05	; 5
     dc8:	9f 93       	push	r25
     dca:	8f 93       	push	r24
     dcc:	0e 94 af 2b 	call	0x575e	; 0x575e <printf>
			printf("The humidity2 in upLink is: %u\n", _uplink_payload.bytes[3]);
     dd0:	8d 81       	ldd	r24, Y+5	; 0x05
     dd2:	1f 92       	push	r1
     dd4:	8f 93       	push	r24
     dd6:	83 e4       	ldi	r24, 0x43	; 67
     dd8:	95 e0       	ldi	r25, 0x05	; 5
     dda:	9f 93       	push	r25
     ddc:	8f 93       	push	r24
     dde:	0e 94 af 2b 	call	0x575e	; 0x575e <printf>
			
			
			printf("Upload Message >%s<\n", lora_driver_map_return_code_to_text(lora_driver_sent_upload_message(false, &_uplink_payload)));
     de2:	be 01       	movw	r22, r28
     de4:	80 e0       	ldi	r24, 0x00	; 0
     de6:	0e 94 09 20 	call	0x4012	; 0x4012 <lora_driver_sent_upload_message>
     dea:	0e 94 f6 21 	call	0x43ec	; 0x43ec <lora_driver_map_return_code_to_text>
     dee:	9f 93       	push	r25
     df0:	8f 93       	push	r24
     df2:	83 e6       	ldi	r24, 0x63	; 99
     df4:	95 e0       	ldi	r25, 0x05	; 5
     df6:	9f 93       	push	r25
     df8:	8f 93       	push	r24
     dfa:	0e 94 af 2b 	call	0x575e	; 0x575e <printf>
     dfe:	8d b7       	in	r24, 0x3d	; 61
     e00:	9e b7       	in	r25, 0x3e	; 62
     e02:	44 96       	adiw	r24, 0x14	; 20
     e04:	0f b6       	in	r0, 0x3f	; 63
     e06:	f8 94       	cli
     e08:	9e bf       	out	0x3e, r25	; 62
     e0a:	0f be       	out	0x3f, r0	; 63
     e0c:	8d bf       	out	0x3d, r24	; 61
     e0e:	1e c0       	rjmp	.+60     	; 0xe4c <lora_UpLinkHandler_task+0x26c>
		}
		else
		{
			vTaskDelay(2000);
     e10:	60 ed       	ldi	r22, 0xD0	; 208
     e12:	77 e0       	ldi	r23, 0x07	; 7
     e14:	80 e0       	ldi	r24, 0x00	; 0
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <vTaskDelay>
		}
		
		
		
		
	}
     e1c:	17 c0       	rjmp	.+46     	; 0xe4c <lora_UpLinkHandler_task+0x26c>
	}
	else
	{
		// Something went wrong
		// Turn off the green led
		led_led_off(led_ST2); // OPTIONAL
     e1e:	81 e0       	ldi	r24, 0x01	; 1
     e20:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <led_led_off>
		// Make the red led blink fast to tell something went wrong
		led_fast_blink(led_ST1); // OPTIONAL
     e24:	80 e0       	ldi	r24, 0x00	; 0
     e26:	0e 94 9a 1d 	call	0x3b34	; 0x3b34 <led_fast_blink>
     e2a:	b0 cf       	rjmp	.-160    	; 0xd8c <lora_UpLinkHandler_task+0x1ac>

	if (rc == LoRa_ACCEPTED)
	{
		// Connected to LoRaWAN :-)
		// Make the green led steady
		led_led_on(led_ST2); // OPTIONAL
     e2c:	81 e0       	ldi	r24, 0x01	; 1
     e2e:	0e 94 c1 1d 	call	0x3b82	; 0x3b82 <led_led_on>
		lora_driver_flush_buffers(); // get rid of first version string from module after reset!

		_lora_setup();

		
		xBytesToSend = xMessageBufferReceive(xMessageBuffer, (void*) &_uplink_payload,
     e32:	00 e0       	ldi	r16, 0x00	; 0
     e34:	10 e0       	ldi	r17, 0x00	; 0
     e36:	98 01       	movw	r18, r16
     e38:	42 e3       	ldi	r20, 0x32	; 50
     e3a:	50 e0       	ldi	r21, 0x00	; 0
     e3c:	64 eb       	ldi	r22, 0xB4	; 180
     e3e:	78 e0       	ldi	r23, 0x08	; 8
     e40:	c7 01       	movw	r24, r14
     e42:	0e 94 29 11 	call	0x2252	; 0x2252 <xStreamBufferReceive>
		sizeof(rxData),0);
		if(xBytesToSend > sizeof(uint8_t)*2)
     e46:	03 97       	sbiw	r24, 0x03	; 3
     e48:	18 f3       	brcs	.-58     	; 0xe10 <lora_UpLinkHandler_task+0x230>
     e4a:	a2 cf       	rjmp	.-188    	; 0xd90 <lora_UpLinkHandler_task+0x1b0>
		}
		
		
		
		
	}
     e4c:	df 91       	pop	r29
     e4e:	cf 91       	pop	r28
     e50:	1f 91       	pop	r17
     e52:	0f 91       	pop	r16
     e54:	ff 90       	pop	r15
     e56:	ef 90       	pop	r14
     e58:	df 90       	pop	r13
     e5a:	08 95       	ret

00000e5c <lora_UpLinkHandler_startTask>:
	
	void lora_UpLinkHandler_startTask(MessageBufferHandle_t xMessageBuffer){
     e5c:	ec 01       	movw	r28, r24
		for(;;)
		{
			lora_UpLinkHandler_task(xMessageBuffer);
     e5e:	ce 01       	movw	r24, r28
     e60:	bf de       	rcall	.-642    	; 0xbe0 <lora_UpLinkHandler_task>
			vTaskDelay(3000);
     e62:	68 eb       	ldi	r22, 0xB8	; 184
     e64:	7b e0       	ldi	r23, 0x0B	; 11
     e66:	80 e0       	ldi	r24, 0x00	; 0
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <vTaskDelay>
     e6e:	f7 cf       	rjmp	.-18     	; 0xe5e <lora_UpLinkHandler_startTask+0x2>

00000e70 <trace_init>:
	 #if (configUSE_TRACE_FACILITY == 1)
	 #ifdef HAL_DEFS_H_

	 #else
		// Used on VIA MEGA Shield rev. 2.0.0
		DDRK |= _BV(DDK0) | _BV(DDK1) | _BV(DDK2) | _BV(DDK3);
     e70:	e7 e0       	ldi	r30, 0x07	; 7
     e72:	f1 e0       	ldi	r31, 0x01	; 1
     e74:	80 81       	ld	r24, Z
     e76:	8f 60       	ori	r24, 0x0F	; 15
     e78:	80 83       	st	Z, r24
     e7a:	08 95       	ret

00000e7c <task_switch_in>:
	void task_switch_in(uint8_t task_no) {
		 #ifdef HAL_DEFS_H_

		 #else
		 // Used on VIA MEGA Shield rev. 2.0.0
		 PORTK &= 0b11110000;
     e7c:	e8 e0       	ldi	r30, 0x08	; 8
     e7e:	f1 e0       	ldi	r31, 0x01	; 1
     e80:	90 81       	ld	r25, Z
     e82:	90 7f       	andi	r25, 0xF0	; 240
     e84:	90 83       	st	Z, r25
		 PORTK |= (task_no & 0b00001111);
     e86:	90 81       	ld	r25, Z
     e88:	8f 70       	andi	r24, 0x0F	; 15
     e8a:	98 2b       	or	r25, r24
     e8c:	90 83       	st	Z, r25
     e8e:	08 95       	ret

00000e90 <task_switch_out>:
	void task_switch_out(uint8_t task_no) {
		#ifdef HAL_DEFS_H_

		#else
		// Used on VIA MEGA Shield rev. 2.0.0
		PORTK &= 0b11110000;
     e90:	e8 e0       	ldi	r30, 0x08	; 8
     e92:	f1 e0       	ldi	r31, 0x01	; 1
     e94:	80 81       	ld	r24, Z
     e96:	80 7f       	andi	r24, 0xF0	; 240
     e98:	80 83       	st	Z, r24
     e9a:	08 95       	ret

00000e9c <xEventGroupCreate>:
        uxReturn = pxEventBits->uxEventBits;
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
     e9c:	cf 93       	push	r28
     e9e:	df 93       	push	r29
     ea0:	80 e1       	ldi	r24, 0x10	; 16
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	b4 d1       	rcall	.+872    	; 0x120e <pvPortMalloc>
     ea6:	ec 01       	movw	r28, r24
     ea8:	00 97       	sbiw	r24, 0x00	; 0
     eaa:	39 f0       	breq	.+14     	; 0xeba <xEventGroupCreate+0x1e>
     eac:	fc 01       	movw	r30, r24
     eae:	11 92       	st	Z+, r1
     eb0:	11 92       	st	Z+, r1
     eb2:	11 92       	st	Z+, r1
     eb4:	11 92       	st	Z+, r1
     eb6:	cf 01       	movw	r24, r30
     eb8:	94 d2       	rcall	.+1320   	; 0x13e2 <vListInitialise>
     eba:	ce 01       	movw	r24, r28
     ebc:	df 91       	pop	r29
     ebe:	cf 91       	pop	r28
     ec0:	08 95       	ret

00000ec2 <xEventGroupWaitBits>:
     ec2:	2f 92       	push	r2
     ec4:	3f 92       	push	r3
     ec6:	4f 92       	push	r4
     ec8:	5f 92       	push	r5
     eca:	6f 92       	push	r6
     ecc:	7f 92       	push	r7
     ece:	8f 92       	push	r8
     ed0:	9f 92       	push	r9
     ed2:	af 92       	push	r10
     ed4:	bf 92       	push	r11
     ed6:	cf 92       	push	r12
     ed8:	df 92       	push	r13
     eda:	ef 92       	push	r14
     edc:	ff 92       	push	r15
     ede:	0f 93       	push	r16
     ee0:	1f 93       	push	r17
     ee2:	cf 93       	push	r28
     ee4:	df 93       	push	r29
     ee6:	ec 01       	movw	r28, r24
     ee8:	4a 01       	movw	r8, r20
     eea:	5b 01       	movw	r10, r22
     eec:	62 2e       	mov	r6, r18
     eee:	70 2e       	mov	r7, r16
     ef0:	0e 94 c5 13 	call	0x278a	; 0x278a <vTaskSuspendAll>
     ef4:	28 80       	ld	r2, Y
     ef6:	39 80       	ldd	r3, Y+1	; 0x01
     ef8:	4a 80       	ldd	r4, Y+2	; 0x02
     efa:	5b 80       	ldd	r5, Y+3	; 0x03
     efc:	01 11       	cpse	r16, r1
     efe:	0d c0       	rjmp	.+26     	; 0xf1a <xEventGroupWaitBits+0x58>
     f00:	81 e0       	ldi	r24, 0x01	; 1
     f02:	b2 01       	movw	r22, r4
     f04:	a1 01       	movw	r20, r2
     f06:	48 21       	and	r20, r8
     f08:	59 21       	and	r21, r9
     f0a:	6a 21       	and	r22, r10
     f0c:	7b 21       	and	r23, r11
     f0e:	45 2b       	or	r20, r21
     f10:	46 2b       	or	r20, r22
     f12:	47 2b       	or	r20, r23
     f14:	79 f4       	brne	.+30     	; 0xf34 <xEventGroupWaitBits+0x72>
     f16:	80 e0       	ldi	r24, 0x00	; 0
     f18:	0d c0       	rjmp	.+26     	; 0xf34 <xEventGroupWaitBits+0x72>
     f1a:	81 e0       	ldi	r24, 0x01	; 1
     f1c:	b2 01       	movw	r22, r4
     f1e:	a1 01       	movw	r20, r2
     f20:	48 21       	and	r20, r8
     f22:	59 21       	and	r21, r9
     f24:	6a 21       	and	r22, r10
     f26:	7b 21       	and	r23, r11
     f28:	48 15       	cp	r20, r8
     f2a:	59 05       	cpc	r21, r9
     f2c:	6a 05       	cpc	r22, r10
     f2e:	7b 05       	cpc	r23, r11
     f30:	09 f0       	breq	.+2      	; 0xf34 <xEventGroupWaitBits+0x72>
     f32:	80 e0       	ldi	r24, 0x00	; 0
     f34:	88 23       	and	r24, r24
     f36:	81 f0       	breq	.+32     	; 0xf58 <xEventGroupWaitBits+0x96>
     f38:	66 20       	and	r6, r6
     f3a:	09 f4       	brne	.+2      	; 0xf3e <xEventGroupWaitBits+0x7c>
     f3c:	6b c0       	rjmp	.+214    	; 0x1014 <xEventGroupWaitBits+0x152>
     f3e:	80 94       	com	r8
     f40:	90 94       	com	r9
     f42:	a0 94       	com	r10
     f44:	b0 94       	com	r11
     f46:	82 20       	and	r8, r2
     f48:	93 20       	and	r9, r3
     f4a:	a4 20       	and	r10, r4
     f4c:	b5 20       	and	r11, r5
     f4e:	88 82       	st	Y, r8
     f50:	99 82       	std	Y+1, r9	; 0x01
     f52:	aa 82       	std	Y+2, r10	; 0x02
     f54:	bb 82       	std	Y+3, r11	; 0x03
     f56:	5e c0       	rjmp	.+188    	; 0x1014 <xEventGroupWaitBits+0x152>
     f58:	c1 14       	cp	r12, r1
     f5a:	d1 04       	cpc	r13, r1
     f5c:	e1 04       	cpc	r14, r1
     f5e:	f1 04       	cpc	r15, r1
     f60:	09 f4       	brne	.+2      	; 0xf64 <xEventGroupWaitBits+0xa2>
     f62:	58 c0       	rjmp	.+176    	; 0x1014 <xEventGroupWaitBits+0x152>
     f64:	66 20       	and	r6, r6
     f66:	29 f0       	breq	.+10     	; 0xf72 <xEventGroupWaitBits+0xb0>
     f68:	40 e0       	ldi	r20, 0x00	; 0
     f6a:	50 e0       	ldi	r21, 0x00	; 0
     f6c:	60 e0       	ldi	r22, 0x00	; 0
     f6e:	71 e0       	ldi	r23, 0x01	; 1
     f70:	03 c0       	rjmp	.+6      	; 0xf78 <xEventGroupWaitBits+0xb6>
     f72:	40 e0       	ldi	r20, 0x00	; 0
     f74:	50 e0       	ldi	r21, 0x00	; 0
     f76:	ba 01       	movw	r22, r20
     f78:	71 10       	cpse	r7, r1
     f7a:	74 60       	ori	r23, 0x04	; 4
     f7c:	48 29       	or	r20, r8
     f7e:	59 29       	or	r21, r9
     f80:	6a 29       	or	r22, r10
     f82:	7b 29       	or	r23, r11
     f84:	97 01       	movw	r18, r14
     f86:	86 01       	movw	r16, r12
     f88:	ce 01       	movw	r24, r28
     f8a:	04 96       	adiw	r24, 0x04	; 4
     f8c:	0e 94 d9 15 	call	0x2bb2	; 0x2bb2 <vTaskPlaceOnUnorderedEventList>
     f90:	0e 94 ae 14 	call	0x295c	; 0x295c <xTaskResumeAll>
     f94:	81 11       	cpse	r24, r1
     f96:	01 c0       	rjmp	.+2      	; 0xf9a <xEventGroupWaitBits+0xd8>
     f98:	6c d3       	rcall	.+1752   	; 0x1672 <vPortYield>
     f9a:	0e 94 66 17 	call	0x2ecc	; 0x2ecc <uxTaskResetEventItemValue>
     f9e:	91 fd       	sbrc	r25, 1
     fa0:	35 c0       	rjmp	.+106    	; 0x100c <xEventGroupWaitBits+0x14a>
     fa2:	0f b6       	in	r0, 0x3f	; 63
     fa4:	f8 94       	cli
     fa6:	0f 92       	push	r0
     fa8:	68 81       	ld	r22, Y
     faa:	79 81       	ldd	r23, Y+1	; 0x01
     fac:	8a 81       	ldd	r24, Y+2	; 0x02
     fae:	9b 81       	ldd	r25, Y+3	; 0x03
     fb0:	71 10       	cpse	r7, r1
     fb2:	0d c0       	rjmp	.+26     	; 0xfce <xEventGroupWaitBits+0x10c>
     fb4:	21 e0       	ldi	r18, 0x01	; 1
     fb6:	75 01       	movw	r14, r10
     fb8:	64 01       	movw	r12, r8
     fba:	c6 22       	and	r12, r22
     fbc:	d7 22       	and	r13, r23
     fbe:	e8 22       	and	r14, r24
     fc0:	f9 22       	and	r15, r25
     fc2:	cd 28       	or	r12, r13
     fc4:	ce 28       	or	r12, r14
     fc6:	cf 28       	or	r12, r15
     fc8:	79 f4       	brne	.+30     	; 0xfe8 <xEventGroupWaitBits+0x126>
     fca:	20 e0       	ldi	r18, 0x00	; 0
     fcc:	0d c0       	rjmp	.+26     	; 0xfe8 <xEventGroupWaitBits+0x126>
     fce:	21 e0       	ldi	r18, 0x01	; 1
     fd0:	75 01       	movw	r14, r10
     fd2:	64 01       	movw	r12, r8
     fd4:	c6 22       	and	r12, r22
     fd6:	d7 22       	and	r13, r23
     fd8:	e8 22       	and	r14, r24
     fda:	f9 22       	and	r15, r25
     fdc:	c8 14       	cp	r12, r8
     fde:	d9 04       	cpc	r13, r9
     fe0:	ea 04       	cpc	r14, r10
     fe2:	fb 04       	cpc	r15, r11
     fe4:	09 f0       	breq	.+2      	; 0xfe8 <xEventGroupWaitBits+0x126>
     fe6:	20 e0       	ldi	r18, 0x00	; 0
     fe8:	22 23       	and	r18, r18
     fea:	71 f0       	breq	.+28     	; 0x1008 <xEventGroupWaitBits+0x146>
     fec:	66 20       	and	r6, r6
     fee:	61 f0       	breq	.+24     	; 0x1008 <xEventGroupWaitBits+0x146>
     ff0:	80 94       	com	r8
     ff2:	90 94       	com	r9
     ff4:	a0 94       	com	r10
     ff6:	b0 94       	com	r11
     ff8:	86 22       	and	r8, r22
     ffa:	97 22       	and	r9, r23
     ffc:	a8 22       	and	r10, r24
     ffe:	b9 22       	and	r11, r25
    1000:	88 82       	st	Y, r8
    1002:	99 82       	std	Y+1, r9	; 0x01
    1004:	aa 82       	std	Y+2, r10	; 0x02
    1006:	bb 82       	std	Y+3, r11	; 0x03
    1008:	0f 90       	pop	r0
    100a:	0f be       	out	0x3f, r0	; 63
    100c:	1b 01       	movw	r2, r22
    100e:	2c 01       	movw	r4, r24
    1010:	55 24       	eor	r5, r5
    1012:	02 c0       	rjmp	.+4      	; 0x1018 <xEventGroupWaitBits+0x156>
    1014:	0e 94 ae 14 	call	0x295c	; 0x295c <xTaskResumeAll>
    1018:	c2 01       	movw	r24, r4
    101a:	b1 01       	movw	r22, r2
    101c:	df 91       	pop	r29
    101e:	cf 91       	pop	r28
    1020:	1f 91       	pop	r17
    1022:	0f 91       	pop	r16
    1024:	ff 90       	pop	r15
    1026:	ef 90       	pop	r14
    1028:	df 90       	pop	r13
    102a:	cf 90       	pop	r12
    102c:	bf 90       	pop	r11
    102e:	af 90       	pop	r10
    1030:	9f 90       	pop	r9
    1032:	8f 90       	pop	r8
    1034:	7f 90       	pop	r7
    1036:	6f 90       	pop	r6
    1038:	5f 90       	pop	r5
    103a:	4f 90       	pop	r4
    103c:	3f 90       	pop	r3
    103e:	2f 90       	pop	r2
    1040:	08 95       	ret

00001042 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
    1042:	4f 92       	push	r4
    1044:	5f 92       	push	r5
    1046:	6f 92       	push	r6
    1048:	7f 92       	push	r7
    104a:	8f 92       	push	r8
    104c:	9f 92       	push	r9
    104e:	af 92       	push	r10
    1050:	bf 92       	push	r11
    1052:	cf 92       	push	r12
    1054:	df 92       	push	r13
    1056:	ef 92       	push	r14
    1058:	ff 92       	push	r15
    105a:	0f 93       	push	r16
    105c:	1f 93       	push	r17
    105e:	cf 93       	push	r28
    1060:	df 93       	push	r29
    1062:	ec 01       	movw	r28, r24
    1064:	6a 01       	movw	r12, r20
    1066:	7b 01       	movw	r14, r22
    itself. */
    configASSERT( xEventGroup );
    configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

    pxList = &( pxEventBits->xTasksWaitingForBits );
    pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1068:	8c 01       	movw	r16, r24
    106a:	09 5f       	subi	r16, 0xF9	; 249
    106c:	1f 4f       	sbci	r17, 0xFF	; 255
    vTaskSuspendAll();
    106e:	0e 94 c5 13 	call	0x278a	; 0x278a <vTaskSuspendAll>
    {
        traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

        pxListItem = listGET_HEAD_ENTRY( pxList );
    1072:	eb 85       	ldd	r30, Y+11	; 0x0b
    1074:	fc 85       	ldd	r31, Y+12	; 0x0c

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;
    1076:	88 81       	ld	r24, Y
    1078:	99 81       	ldd	r25, Y+1	; 0x01
    107a:	aa 81       	ldd	r26, Y+2	; 0x02
    107c:	bb 81       	ldd	r27, Y+3	; 0x03
    107e:	c8 2a       	or	r12, r24
    1080:	d9 2a       	or	r13, r25
    1082:	ea 2a       	or	r14, r26
    1084:	fb 2a       	or	r15, r27
    1086:	c8 82       	st	Y, r12
    1088:	d9 82       	std	Y+1, r13	; 0x01
    108a:	ea 82       	std	Y+2, r14	; 0x02
    108c:	fb 82       	std	Y+3, r15	; 0x03

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
    108e:	0e 17       	cp	r16, r30
    1090:	1f 07       	cpc	r17, r31
    1092:	09 f4       	brne	.+2      	; 0x1096 <xEventGroupSetBits+0x54>
    1094:	45 c0       	rjmp	.+138    	; 0x1120 <xEventGroupSetBits+0xde>
    1096:	c1 2c       	mov	r12, r1
    1098:	d1 2c       	mov	r13, r1
    109a:	76 01       	movw	r14, r12
            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
                {
                    xMatchFound = pdTRUE;
    109c:	99 24       	eor	r9, r9
    109e:	93 94       	inc	r9
    10a0:	81 2c       	mov	r8, r1
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
    10a2:	a4 80       	ldd	r10, Z+4	; 0x04
    10a4:	b5 80       	ldd	r11, Z+5	; 0x05
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
    10a6:	80 81       	ld	r24, Z
    10a8:	91 81       	ldd	r25, Z+1	; 0x01
    10aa:	a2 81       	ldd	r26, Z+2	; 0x02
    10ac:	b3 81       	ldd	r27, Z+3	; 0x03
            xMatchFound = pdFALSE;

            /* Split the bits waited for from the control bits. */
            uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
            uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
    10ae:	ac 01       	movw	r20, r24
    10b0:	bd 01       	movw	r22, r26
    10b2:	77 27       	eor	r23, r23

            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
    10b4:	b2 fd       	sbrc	r27, 2
    10b6:	0f c0       	rjmp	.+30     	; 0x10d6 <xEventGroupSetBits+0x94>
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
                {
                    xMatchFound = pdTRUE;
    10b8:	48 80       	ld	r4, Y
    10ba:	59 80       	ldd	r5, Y+1	; 0x01
    10bc:	6a 80       	ldd	r6, Y+2	; 0x02
    10be:	7b 80       	ldd	r7, Y+3	; 0x03
    10c0:	44 22       	and	r4, r20
    10c2:	55 22       	and	r5, r21
    10c4:	66 22       	and	r6, r22
    10c6:	77 22       	and	r7, r23
    10c8:	29 2d       	mov	r18, r9
    10ca:	45 28       	or	r4, r5
    10cc:	46 28       	or	r4, r6
    10ce:	47 28       	or	r4, r7
    10d0:	89 f4       	brne	.+34     	; 0x10f4 <xEventGroupSetBits+0xb2>
    10d2:	28 2d       	mov	r18, r8
    10d4:	0f c0       	rjmp	.+30     	; 0x10f4 <xEventGroupSetBits+0xb2>
    10d6:	48 80       	ld	r4, Y
    10d8:	59 80       	ldd	r5, Y+1	; 0x01
    10da:	6a 80       	ldd	r6, Y+2	; 0x02
    10dc:	7b 80       	ldd	r7, Y+3	; 0x03
    10de:	44 22       	and	r4, r20
    10e0:	55 22       	and	r5, r21
    10e2:	66 22       	and	r6, r22
    10e4:	77 22       	and	r7, r23
    10e6:	29 2d       	mov	r18, r9
    10e8:	44 16       	cp	r4, r20
    10ea:	55 06       	cpc	r5, r21
    10ec:	66 06       	cpc	r6, r22
    10ee:	77 06       	cpc	r7, r23
    10f0:	09 f0       	breq	.+2      	; 0x10f4 <xEventGroupSetBits+0xb2>
    10f2:	28 2d       	mov	r18, r8
            else
            {
                /* Need all bits to be set, but not all the bits were set. */
            }

            if( xMatchFound != pdFALSE )
    10f4:	22 23       	and	r18, r18
    10f6:	71 f0       	breq	.+28     	; 0x1114 <xEventGroupSetBits+0xd2>
            {
                /* The bits match.  Should the bits be cleared on exit? */
                if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
    10f8:	b0 ff       	sbrs	r27, 0
    10fa:	04 c0       	rjmp	.+8      	; 0x1104 <xEventGroupSetBits+0xc2>
                {
                    uxBitsToClear |= uxBitsWaitedFor;
    10fc:	c4 2a       	or	r12, r20
    10fe:	d5 2a       	or	r13, r21
    1100:	e6 2a       	or	r14, r22
    1102:	f7 2a       	or	r15, r23
                /* Store the actual event flag value in the task's event list
                item before removing the task from the event list.  The
                eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                that is was unblocked due to its required bits matching, rather
                than because it timed out. */
                vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
    1104:	48 81       	ld	r20, Y
    1106:	59 81       	ldd	r21, Y+1	; 0x01
    1108:	6a 81       	ldd	r22, Y+2	; 0x02
    110a:	7b 81       	ldd	r23, Y+3	; 0x03
    110c:	72 60       	ori	r23, 0x02	; 2
    110e:	cf 01       	movw	r24, r30
    1110:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <vTaskRemoveFromUnorderedEventList>
    1114:	ea 2d       	mov	r30, r10
    1116:	fb 2d       	mov	r31, r11

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
    1118:	0e 17       	cp	r16, r30
    111a:	1f 07       	cpc	r17, r31
    111c:	11 f6       	brne	.-124    	; 0x10a2 <xEventGroupSetBits+0x60>
    111e:	03 c0       	rjmp	.+6      	; 0x1126 <xEventGroupSetBits+0xe4>
EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
    1120:	c1 2c       	mov	r12, r1
    1122:	d1 2c       	mov	r13, r1
    1124:	76 01       	movw	r14, r12
            pxListItem = pxNext;
        }

        /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
        bit was set in the control word. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
    1126:	c0 94       	com	r12
    1128:	d0 94       	com	r13
    112a:	e0 94       	com	r14
    112c:	f0 94       	com	r15
    112e:	88 81       	ld	r24, Y
    1130:	99 81       	ldd	r25, Y+1	; 0x01
    1132:	aa 81       	ldd	r26, Y+2	; 0x02
    1134:	bb 81       	ldd	r27, Y+3	; 0x03
    1136:	c8 22       	and	r12, r24
    1138:	d9 22       	and	r13, r25
    113a:	ea 22       	and	r14, r26
    113c:	fb 22       	and	r15, r27
    113e:	c8 82       	st	Y, r12
    1140:	d9 82       	std	Y+1, r13	; 0x01
    1142:	ea 82       	std	Y+2, r14	; 0x02
    1144:	fb 82       	std	Y+3, r15	; 0x03
    }
    ( void ) xTaskResumeAll();
    1146:	0e 94 ae 14 	call	0x295c	; 0x295c <xTaskResumeAll>

    return pxEventBits->uxEventBits;
    114a:	68 81       	ld	r22, Y
    114c:	79 81       	ldd	r23, Y+1	; 0x01
    114e:	8a 81       	ldd	r24, Y+2	; 0x02
    1150:	9b 81       	ldd	r25, Y+3	; 0x03
}
    1152:	df 91       	pop	r29
    1154:	cf 91       	pop	r28
    1156:	1f 91       	pop	r17
    1158:	0f 91       	pop	r16
    115a:	ff 90       	pop	r15
    115c:	ef 90       	pop	r14
    115e:	df 90       	pop	r13
    1160:	cf 90       	pop	r12
    1162:	bf 90       	pop	r11
    1164:	af 90       	pop	r10
    1166:	9f 90       	pop	r9
    1168:	8f 90       	pop	r8
    116a:	7f 90       	pop	r7
    116c:	6f 90       	pop	r6
    116e:	5f 90       	pop	r5
    1170:	4f 90       	pop	r4
    1172:	08 95       	ret

00001174 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
    1174:	cf 93       	push	r28
    1176:	df 93       	push	r29
    1178:	dc 01       	movw	r26, r24
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
    117a:	e6 e3       	ldi	r30, 0x36	; 54
    117c:	f9 e0       	ldi	r31, 0x09	; 9
    117e:	01 c0       	rjmp	.+2      	; 0x1182 <prvInsertBlockIntoFreeList+0xe>
    1180:	f9 01       	movw	r30, r18
    1182:	20 81       	ld	r18, Z
    1184:	31 81       	ldd	r19, Z+1	; 0x01
    1186:	2a 17       	cp	r18, r26
    1188:	3b 07       	cpc	r19, r27
    118a:	d0 f3       	brcs	.-12     	; 0x1180 <prvInsertBlockIntoFreeList+0xc>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
    118c:	82 81       	ldd	r24, Z+2	; 0x02
    118e:	93 81       	ldd	r25, Z+3	; 0x03
    1190:	af 01       	movw	r20, r30
    1192:	48 0f       	add	r20, r24
    1194:	59 1f       	adc	r21, r25
    1196:	a4 17       	cp	r26, r20
    1198:	b5 07       	cpc	r27, r21
    119a:	49 f4       	brne	.+18     	; 0x11ae <prvInsertBlockIntoFreeList+0x3a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
    119c:	12 96       	adiw	r26, 0x02	; 2
    119e:	4d 91       	ld	r20, X+
    11a0:	5c 91       	ld	r21, X
    11a2:	13 97       	sbiw	r26, 0x03	; 3
    11a4:	84 0f       	add	r24, r20
    11a6:	95 1f       	adc	r25, r21
    11a8:	93 83       	std	Z+3, r25	; 0x03
    11aa:	82 83       	std	Z+2, r24	; 0x02
    11ac:	df 01       	movw	r26, r30
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
    11ae:	12 96       	adiw	r26, 0x02	; 2
    11b0:	8d 91       	ld	r24, X+
    11b2:	9c 91       	ld	r25, X
    11b4:	13 97       	sbiw	r26, 0x03	; 3
    11b6:	ed 01       	movw	r28, r26
    11b8:	c8 0f       	add	r28, r24
    11ba:	d9 1f       	adc	r29, r25
    11bc:	2c 17       	cp	r18, r28
    11be:	3d 07       	cpc	r19, r29
    11c0:	d9 f4       	brne	.+54     	; 0x11f8 <prvInsertBlockIntoFreeList+0x84>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
    11c2:	20 91 34 09 	lds	r18, 0x0934	; 0x800934 <pxEnd>
    11c6:	30 91 35 09 	lds	r19, 0x0935	; 0x800935 <pxEnd+0x1>
    11ca:	c2 17       	cp	r28, r18
    11cc:	d3 07       	cpc	r29, r19
    11ce:	81 f0       	breq	.+32     	; 0x11f0 <prvInsertBlockIntoFreeList+0x7c>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
    11d0:	2a 81       	ldd	r18, Y+2	; 0x02
    11d2:	3b 81       	ldd	r19, Y+3	; 0x03
    11d4:	82 0f       	add	r24, r18
    11d6:	93 1f       	adc	r25, r19
    11d8:	13 96       	adiw	r26, 0x03	; 3
    11da:	9c 93       	st	X, r25
    11dc:	8e 93       	st	-X, r24
    11de:	12 97       	sbiw	r26, 0x02	; 2
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
    11e0:	c0 81       	ld	r28, Z
    11e2:	d1 81       	ldd	r29, Z+1	; 0x01
    11e4:	88 81       	ld	r24, Y
    11e6:	99 81       	ldd	r25, Y+1	; 0x01
    11e8:	11 96       	adiw	r26, 0x01	; 1
    11ea:	9c 93       	st	X, r25
    11ec:	8e 93       	st	-X, r24
    11ee:	07 c0       	rjmp	.+14     	; 0x11fe <prvInsertBlockIntoFreeList+0x8a>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
    11f0:	11 96       	adiw	r26, 0x01	; 1
    11f2:	dc 93       	st	X, r29
    11f4:	ce 93       	st	-X, r28
    11f6:	03 c0       	rjmp	.+6      	; 0x11fe <prvInsertBlockIntoFreeList+0x8a>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
    11f8:	11 96       	adiw	r26, 0x01	; 1
    11fa:	3c 93       	st	X, r19
    11fc:	2e 93       	st	-X, r18

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
    11fe:	ae 17       	cp	r26, r30
    1200:	bf 07       	cpc	r27, r31
    1202:	11 f0       	breq	.+4      	; 0x1208 <prvInsertBlockIntoFreeList+0x94>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
    1204:	b1 83       	std	Z+1, r27	; 0x01
    1206:	a0 83       	st	Z, r26
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    1208:	df 91       	pop	r29
    120a:	cf 91       	pop	r28
    120c:	08 95       	ret

0000120e <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    120e:	cf 92       	push	r12
    1210:	df 92       	push	r13
    1212:	ef 92       	push	r14
    1214:	ff 92       	push	r15
    1216:	0f 93       	push	r16
    1218:	1f 93       	push	r17
    121a:	cf 93       	push	r28
    121c:	df 93       	push	r29
    121e:	ec 01       	movw	r28, r24
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
    1220:	0e 94 c5 13 	call	0x278a	; 0x278a <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
    1224:	80 91 34 09 	lds	r24, 0x0934	; 0x800934 <pxEnd>
    1228:	90 91 35 09 	lds	r25, 0x0935	; 0x800935 <pxEnd+0x1>
    122c:	89 2b       	or	r24, r25
    122e:	41 f5       	brne	.+80     	; 0x1280 <pvPortMalloc+0x72>

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
    1230:	e6 e3       	ldi	r30, 0x36	; 54
    1232:	f9 e0       	ldi	r31, 0x09	; 9
    1234:	aa e3       	ldi	r26, 0x3A	; 58
    1236:	b9 e0       	ldi	r27, 0x09	; 9
    1238:	b1 83       	std	Z+1, r27	; 0x01
    123a:	a0 83       	st	Z, r26
	xStart.xBlockSize = ( size_t ) 0;
    123c:	13 82       	std	Z+3, r1	; 0x03
    123e:	12 82       	std	Z+2, r1	; 0x02
	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
	uxAddress -= xHeapStructSize;
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
	pxEnd = ( void * ) uxAddress;
    1240:	e6 ed       	ldi	r30, 0xD6	; 214
    1242:	f8 e1       	ldi	r31, 0x18	; 24
    1244:	f0 93 35 09 	sts	0x0935, r31	; 0x800935 <pxEnd+0x1>
    1248:	e0 93 34 09 	sts	0x0934, r30	; 0x800934 <pxEnd>
	pxEnd->xBlockSize = 0;
    124c:	13 82       	std	Z+3, r1	; 0x03
    124e:	12 82       	std	Z+2, r1	; 0x02
	pxEnd->pxNextFreeBlock = NULL;
    1250:	11 82       	std	Z+1, r1	; 0x01
    1252:	10 82       	st	Z, r1

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
    1254:	8c e9       	ldi	r24, 0x9C	; 156
    1256:	9f e0       	ldi	r25, 0x0F	; 15
    1258:	13 96       	adiw	r26, 0x03	; 3
    125a:	9c 93       	st	X, r25
    125c:	8e 93       	st	-X, r24
    125e:	12 97       	sbiw	r26, 0x02	; 2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
    1260:	ed 93       	st	X+, r30
    1262:	fc 93       	st	X, r31

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
    1264:	90 93 31 09 	sts	0x0931, r25	; 0x800931 <xMinimumEverFreeBytesRemaining+0x1>
    1268:	80 93 30 09 	sts	0x0930, r24	; 0x800930 <xMinimumEverFreeBytesRemaining>
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
    126c:	90 93 33 09 	sts	0x0933, r25	; 0x800933 <xFreeBytesRemaining+0x1>
    1270:	80 93 32 09 	sts	0x0932, r24	; 0x800932 <xFreeBytesRemaining>

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
    1274:	80 e0       	ldi	r24, 0x00	; 0
    1276:	90 e8       	ldi	r25, 0x80	; 128
    1278:	90 93 2f 09 	sts	0x092F, r25	; 0x80092f <xBlockAllocatedBit+0x1>
    127c:	80 93 2e 09 	sts	0x092E, r24	; 0x80092e <xBlockAllocatedBit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
    1280:	e0 90 2e 09 	lds	r14, 0x092E	; 0x80092e <xBlockAllocatedBit>
    1284:	f0 90 2f 09 	lds	r15, 0x092F	; 0x80092f <xBlockAllocatedBit+0x1>
    1288:	c7 01       	movw	r24, r14
    128a:	8c 23       	and	r24, r28
    128c:	9d 23       	and	r25, r29
    128e:	89 2b       	or	r24, r25
    1290:	09 f0       	breq	.+2      	; 0x1294 <pvPortMalloc+0x86>
    1292:	66 c0       	rjmp	.+204    	; 0x1360 <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
    1294:	20 97       	sbiw	r28, 0x00	; 0
    1296:	09 f4       	brne	.+2      	; 0x129a <pvPortMalloc+0x8c>
    1298:	66 c0       	rjmp	.+204    	; 0x1366 <pvPortMalloc+0x158>
			{
				xWantedSize += xHeapStructSize;
    129a:	ae 01       	movw	r20, r28
    129c:	4c 5f       	subi	r20, 0xFC	; 252
    129e:	5f 4f       	sbci	r21, 0xFF	; 255
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
    12a0:	09 f4       	brne	.+2      	; 0x12a4 <pvPortMalloc+0x96>
    12a2:	5e c0       	rjmp	.+188    	; 0x1360 <pvPortMalloc+0x152>
    12a4:	00 91 32 09 	lds	r16, 0x0932	; 0x800932 <xFreeBytesRemaining>
    12a8:	10 91 33 09 	lds	r17, 0x0933	; 0x800933 <xFreeBytesRemaining+0x1>
    12ac:	04 17       	cp	r16, r20
    12ae:	15 07       	cpc	r17, r21
    12b0:	08 f4       	brcc	.+2      	; 0x12b4 <pvPortMalloc+0xa6>
    12b2:	56 c0       	rjmp	.+172    	; 0x1360 <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
    12b4:	c0 91 36 09 	lds	r28, 0x0936	; 0x800936 <xStart>
    12b8:	d0 91 37 09 	lds	r29, 0x0937	; 0x800937 <xStart+0x1>

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
    12bc:	e6 e3       	ldi	r30, 0x36	; 54
    12be:	f9 e0       	ldi	r31, 0x09	; 9
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    12c0:	02 c0       	rjmp	.+4      	; 0x12c6 <pvPortMalloc+0xb8>
    12c2:	fe 01       	movw	r30, r28
				{
					pxPreviousBlock = pxBlock;
					pxBlock = pxBlock->pxNextFreeBlock;
    12c4:	e9 01       	movw	r28, r18
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    12c6:	2a 81       	ldd	r18, Y+2	; 0x02
    12c8:	3b 81       	ldd	r19, Y+3	; 0x03
    12ca:	24 17       	cp	r18, r20
    12cc:	35 07       	cpc	r19, r21
    12ce:	28 f4       	brcc	.+10     	; 0x12da <pvPortMalloc+0xcc>
    12d0:	28 81       	ld	r18, Y
    12d2:	39 81       	ldd	r19, Y+1	; 0x01
    12d4:	21 15       	cp	r18, r1
    12d6:	31 05       	cpc	r19, r1
    12d8:	a1 f7       	brne	.-24     	; 0x12c2 <pvPortMalloc+0xb4>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
    12da:	80 91 34 09 	lds	r24, 0x0934	; 0x800934 <pxEnd>
    12de:	90 91 35 09 	lds	r25, 0x0935	; 0x800935 <pxEnd+0x1>
    12e2:	c8 17       	cp	r28, r24
    12e4:	d9 07       	cpc	r29, r25
    12e6:	e1 f1       	breq	.+120    	; 0x1360 <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
    12e8:	c0 80       	ld	r12, Z
    12ea:	d1 80       	ldd	r13, Z+1	; 0x01
    12ec:	84 e0       	ldi	r24, 0x04	; 4
    12ee:	c8 0e       	add	r12, r24
    12f0:	d1 1c       	adc	r13, r1

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    12f2:	88 81       	ld	r24, Y
    12f4:	99 81       	ldd	r25, Y+1	; 0x01
    12f6:	91 83       	std	Z+1, r25	; 0x01
    12f8:	80 83       	st	Z, r24

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    12fa:	2a 81       	ldd	r18, Y+2	; 0x02
    12fc:	3b 81       	ldd	r19, Y+3	; 0x03
    12fe:	24 1b       	sub	r18, r20
    1300:	35 0b       	sbc	r19, r21
    1302:	29 30       	cpi	r18, 0x09	; 9
    1304:	31 05       	cpc	r19, r1
    1306:	48 f0       	brcs	.+18     	; 0x131a <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
    1308:	ce 01       	movw	r24, r28
    130a:	84 0f       	add	r24, r20
    130c:	95 1f       	adc	r25, r21
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    130e:	fc 01       	movw	r30, r24
    1310:	33 83       	std	Z+3, r19	; 0x03
    1312:	22 83       	std	Z+2, r18	; 0x02
						pxBlock->xBlockSize = xWantedSize;
    1314:	5b 83       	std	Y+3, r21	; 0x03
    1316:	4a 83       	std	Y+2, r20	; 0x02

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
    1318:	2d df       	rcall	.-422    	; 0x1174 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
    131a:	8a 81       	ldd	r24, Y+2	; 0x02
    131c:	9b 81       	ldd	r25, Y+3	; 0x03
    131e:	08 1b       	sub	r16, r24
    1320:	19 0b       	sbc	r17, r25
    1322:	10 93 33 09 	sts	0x0933, r17	; 0x800933 <xFreeBytesRemaining+0x1>
    1326:	00 93 32 09 	sts	0x0932, r16	; 0x800932 <xFreeBytesRemaining>

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
    132a:	20 91 30 09 	lds	r18, 0x0930	; 0x800930 <xMinimumEverFreeBytesRemaining>
    132e:	30 91 31 09 	lds	r19, 0x0931	; 0x800931 <xMinimumEverFreeBytesRemaining+0x1>
    1332:	02 17       	cp	r16, r18
    1334:	13 07       	cpc	r17, r19
    1336:	20 f4       	brcc	.+8      	; 0x1340 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
    1338:	10 93 31 09 	sts	0x0931, r17	; 0x800931 <xMinimumEverFreeBytesRemaining+0x1>
    133c:	00 93 30 09 	sts	0x0930, r16	; 0x800930 <xMinimumEverFreeBytesRemaining>
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
    1340:	e8 2a       	or	r14, r24
    1342:	f9 2a       	or	r15, r25
    1344:	fb 82       	std	Y+3, r15	; 0x03
    1346:	ea 82       	std	Y+2, r14	; 0x02
					pxBlock->pxNextFreeBlock = NULL;
    1348:	19 82       	std	Y+1, r1	; 0x01
    134a:	18 82       	st	Y, r1
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    134c:	0e 94 ae 14 	call	0x295c	; 0x295c <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
    1350:	c1 14       	cp	r12, r1
    1352:	d1 04       	cpc	r13, r1
    1354:	59 f4       	brne	.+22     	; 0x136c <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
    1356:	0e 94 b4 1a 	call	0x3568	; 0x3568 <vApplicationMallocFailedHook>
    135a:	c1 2c       	mov	r12, r1
    135c:	d1 2c       	mov	r13, r1
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
    135e:	06 c0       	rjmp	.+12     	; 0x136c <pvPortMalloc+0x15e>
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    1360:	0e 94 ae 14 	call	0x295c	; 0x295c <xTaskResumeAll>
    1364:	f8 cf       	rjmp	.-16     	; 0x1356 <pvPortMalloc+0x148>
    1366:	0e 94 ae 14 	call	0x295c	; 0x295c <xTaskResumeAll>
    136a:	f5 cf       	rjmp	.-22     	; 0x1356 <pvPortMalloc+0x148>
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
}
    136c:	c6 01       	movw	r24, r12
    136e:	df 91       	pop	r29
    1370:	cf 91       	pop	r28
    1372:	1f 91       	pop	r17
    1374:	0f 91       	pop	r16
    1376:	ff 90       	pop	r15
    1378:	ef 90       	pop	r14
    137a:	df 90       	pop	r13
    137c:	cf 90       	pop	r12
    137e:	08 95       	ret

00001380 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    1380:	cf 93       	push	r28
    1382:	df 93       	push	r29
uint8_t *puc = ( uint8_t * ) pv;
BlockLink_t *pxLink;

	if( pv != NULL )
    1384:	00 97       	sbiw	r24, 0x00	; 0
    1386:	51 f1       	breq	.+84     	; 0x13dc <vPortFree+0x5c>

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
		configASSERT( pxLink->pxNextFreeBlock == NULL );

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
    1388:	fc 01       	movw	r30, r24
    138a:	34 97       	sbiw	r30, 0x04	; 4
    138c:	22 81       	ldd	r18, Z+2	; 0x02
    138e:	33 81       	ldd	r19, Z+3	; 0x03
    1390:	40 91 2e 09 	lds	r20, 0x092E	; 0x80092e <xBlockAllocatedBit>
    1394:	50 91 2f 09 	lds	r21, 0x092F	; 0x80092f <xBlockAllocatedBit+0x1>
    1398:	b9 01       	movw	r22, r18
    139a:	64 23       	and	r22, r20
    139c:	75 23       	and	r23, r21
    139e:	67 2b       	or	r22, r23
    13a0:	e9 f0       	breq	.+58     	; 0x13dc <vPortFree+0x5c>
		{
			if( pxLink->pxNextFreeBlock == NULL )
    13a2:	60 81       	ld	r22, Z
    13a4:	71 81       	ldd	r23, Z+1	; 0x01
    13a6:	67 2b       	or	r22, r23
    13a8:	c9 f4       	brne	.+50     	; 0x13dc <vPortFree+0x5c>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
    13aa:	ef 01       	movw	r28, r30
    13ac:	40 95       	com	r20
    13ae:	50 95       	com	r21
    13b0:	24 23       	and	r18, r20
    13b2:	35 23       	and	r19, r21
    13b4:	33 83       	std	Z+3, r19	; 0x03
    13b6:	22 83       	std	Z+2, r18	; 0x02

				vTaskSuspendAll();
    13b8:	0e 94 c5 13 	call	0x278a	; 0x278a <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
    13bc:	20 91 32 09 	lds	r18, 0x0932	; 0x800932 <xFreeBytesRemaining>
    13c0:	30 91 33 09 	lds	r19, 0x0933	; 0x800933 <xFreeBytesRemaining+0x1>
    13c4:	8a 81       	ldd	r24, Y+2	; 0x02
    13c6:	9b 81       	ldd	r25, Y+3	; 0x03
    13c8:	82 0f       	add	r24, r18
    13ca:	93 1f       	adc	r25, r19
    13cc:	90 93 33 09 	sts	0x0933, r25	; 0x800933 <xFreeBytesRemaining+0x1>
    13d0:	80 93 32 09 	sts	0x0932, r24	; 0x800932 <xFreeBytesRemaining>
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
    13d4:	ce 01       	movw	r24, r28
    13d6:	ce de       	rcall	.-612    	; 0x1174 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
    13d8:	0e 94 ae 14 	call	0x295c	; 0x295c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
    13dc:	df 91       	pop	r29
    13de:	cf 91       	pop	r28
    13e0:	08 95       	ret

000013e2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    13e2:	fc 01       	movw	r30, r24
    /* The list structure contains a list item which is used to mark the
    end of the list.  To initialise the list the list end is inserted
    as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );            /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    13e4:	03 96       	adiw	r24, 0x03	; 3
    13e6:	92 83       	std	Z+2, r25	; 0x02
    13e8:	81 83       	std	Z+1, r24	; 0x01

    /* The list end value is the highest possible value in the list to
    ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
    13ea:	4f ef       	ldi	r20, 0xFF	; 255
    13ec:	5f ef       	ldi	r21, 0xFF	; 255
    13ee:	ba 01       	movw	r22, r20
    13f0:	43 83       	std	Z+3, r20	; 0x03
    13f2:	54 83       	std	Z+4, r21	; 0x04
    13f4:	65 83       	std	Z+5, r22	; 0x05
    13f6:	76 83       	std	Z+6, r23	; 0x06

    /* The list end next and previous pointers point to itself so we know
    when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );    /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    13f8:	90 87       	std	Z+8, r25	; 0x08
    13fa:	87 83       	std	Z+7, r24	; 0x07
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    13fc:	92 87       	std	Z+10, r25	; 0x0a
    13fe:	81 87       	std	Z+9, r24	; 0x09

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    1400:	10 82       	st	Z, r1
    1402:	08 95       	ret

00001404 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
    1404:	fc 01       	movw	r30, r24
    1406:	13 86       	std	Z+11, r1	; 0x0b
    1408:	12 86       	std	Z+10, r1	; 0x0a
    140a:	08 95       	ret

0000140c <vListInsertEnd>:
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    140c:	cf 93       	push	r28
    140e:	df 93       	push	r29
    1410:	9c 01       	movw	r18, r24
    1412:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
    1414:	dc 01       	movw	r26, r24
    1416:	11 96       	adiw	r26, 0x01	; 1
    1418:	cd 91       	ld	r28, X+
    141a:	dc 91       	ld	r29, X
    141c:	12 97       	sbiw	r26, 0x02	; 2
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
    makes the new list item the last item to be removed by a call to
    listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
    141e:	d5 83       	std	Z+5, r29	; 0x05
    1420:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    1422:	8e 81       	ldd	r24, Y+6	; 0x06
    1424:	9f 81       	ldd	r25, Y+7	; 0x07
    1426:	97 83       	std	Z+7, r25	; 0x07
    1428:	86 83       	std	Z+6, r24	; 0x06

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
    142a:	8e 81       	ldd	r24, Y+6	; 0x06
    142c:	9f 81       	ldd	r25, Y+7	; 0x07
    142e:	dc 01       	movw	r26, r24
    1430:	15 96       	adiw	r26, 0x05	; 5
    1432:	7c 93       	st	X, r23
    1434:	6e 93       	st	-X, r22
    1436:	14 97       	sbiw	r26, 0x04	; 4
    pxIndex->pxPrevious = pxNewListItem;
    1438:	7f 83       	std	Y+7, r23	; 0x07
    143a:	6e 83       	std	Y+6, r22	; 0x06

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
    143c:	33 87       	std	Z+11, r19	; 0x0b
    143e:	22 87       	std	Z+10, r18	; 0x0a

    ( pxList->uxNumberOfItems )++;
    1440:	f9 01       	movw	r30, r18
    1442:	80 81       	ld	r24, Z
    1444:	8f 5f       	subi	r24, 0xFF	; 255
    1446:	80 83       	st	Z, r24
}
    1448:	df 91       	pop	r29
    144a:	cf 91       	pop	r28
    144c:	08 95       	ret

0000144e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    144e:	0f 93       	push	r16
    1450:	1f 93       	push	r17
    1452:	cf 93       	push	r28
    1454:	df 93       	push	r29
    1456:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    1458:	08 81       	ld	r16, Y
    145a:	19 81       	ldd	r17, Y+1	; 0x01
    145c:	2a 81       	ldd	r18, Y+2	; 0x02
    145e:	3b 81       	ldd	r19, Y+3	; 0x03
    new list item should be placed after it.  This ensures that TCBs which are
    stored in ready lists (all of which have the same xItemValue value) get a
    share of the CPU.  However, if the xItemValue is the same as the back marker
    the iteration loop below will not end.  Therefore the value is checked
    first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
    1460:	0f 3f       	cpi	r16, 0xFF	; 255
    1462:	4f ef       	ldi	r20, 0xFF	; 255
    1464:	14 07       	cpc	r17, r20
    1466:	24 07       	cpc	r18, r20
    1468:	34 07       	cpc	r19, r20
    146a:	21 f4       	brne	.+8      	; 0x1474 <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
    146c:	fc 01       	movw	r30, r24
    146e:	a1 85       	ldd	r26, Z+9	; 0x09
    1470:	b2 85       	ldd	r27, Z+10	; 0x0a
    1472:	11 c0       	rjmp	.+34     	; 0x1496 <vListInsert+0x48>
            4) Using a queue or semaphore before it has been initialised or
               before the scheduler has been started (are interrupts firing
               before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
    1474:	dc 01       	movw	r26, r24
    1476:	13 96       	adiw	r26, 0x03	; 3
    1478:	01 c0       	rjmp	.+2      	; 0x147c <vListInsert+0x2e>
    147a:	df 01       	movw	r26, r30
    147c:	14 96       	adiw	r26, 0x04	; 4
    147e:	ed 91       	ld	r30, X+
    1480:	fc 91       	ld	r31, X
    1482:	15 97       	sbiw	r26, 0x05	; 5
    1484:	40 81       	ld	r20, Z
    1486:	51 81       	ldd	r21, Z+1	; 0x01
    1488:	62 81       	ldd	r22, Z+2	; 0x02
    148a:	73 81       	ldd	r23, Z+3	; 0x03
    148c:	04 17       	cp	r16, r20
    148e:	15 07       	cpc	r17, r21
    1490:	26 07       	cpc	r18, r22
    1492:	37 07       	cpc	r19, r23
    1494:	90 f7       	brcc	.-28     	; 0x147a <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
            insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
    1496:	14 96       	adiw	r26, 0x04	; 4
    1498:	ed 91       	ld	r30, X+
    149a:	fc 91       	ld	r31, X
    149c:	15 97       	sbiw	r26, 0x05	; 5
    149e:	fd 83       	std	Y+5, r31	; 0x05
    14a0:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    14a2:	d7 83       	std	Z+7, r29	; 0x07
    14a4:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
    14a6:	bf 83       	std	Y+7, r27	; 0x07
    14a8:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
    14aa:	15 96       	adiw	r26, 0x05	; 5
    14ac:	dc 93       	st	X, r29
    14ae:	ce 93       	st	-X, r28
    14b0:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
    item later. */
    pxNewListItem->pxContainer = pxList;
    14b2:	9b 87       	std	Y+11, r25	; 0x0b
    14b4:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
    14b6:	fc 01       	movw	r30, r24
    14b8:	20 81       	ld	r18, Z
    14ba:	2f 5f       	subi	r18, 0xFF	; 255
    14bc:	20 83       	st	Z, r18
}
    14be:	df 91       	pop	r29
    14c0:	cf 91       	pop	r28
    14c2:	1f 91       	pop	r17
    14c4:	0f 91       	pop	r16
    14c6:	08 95       	ret

000014c8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    14c8:	cf 93       	push	r28
    14ca:	df 93       	push	r29
    14cc:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
    14ce:	a2 85       	ldd	r26, Z+10	; 0x0a
    14d0:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    14d2:	c4 81       	ldd	r28, Z+4	; 0x04
    14d4:	d5 81       	ldd	r29, Z+5	; 0x05
    14d6:	86 81       	ldd	r24, Z+6	; 0x06
    14d8:	97 81       	ldd	r25, Z+7	; 0x07
    14da:	9f 83       	std	Y+7, r25	; 0x07
    14dc:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    14de:	c6 81       	ldd	r28, Z+6	; 0x06
    14e0:	d7 81       	ldd	r29, Z+7	; 0x07
    14e2:	84 81       	ldd	r24, Z+4	; 0x04
    14e4:	95 81       	ldd	r25, Z+5	; 0x05
    14e6:	9d 83       	std	Y+5, r25	; 0x05
    14e8:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
    14ea:	11 96       	adiw	r26, 0x01	; 1
    14ec:	8d 91       	ld	r24, X+
    14ee:	9c 91       	ld	r25, X
    14f0:	12 97       	sbiw	r26, 0x02	; 2
    14f2:	e8 17       	cp	r30, r24
    14f4:	f9 07       	cpc	r31, r25
    14f6:	31 f4       	brne	.+12     	; 0x1504 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
    14f8:	86 81       	ldd	r24, Z+6	; 0x06
    14fa:	97 81       	ldd	r25, Z+7	; 0x07
    14fc:	12 96       	adiw	r26, 0x02	; 2
    14fe:	9c 93       	st	X, r25
    1500:	8e 93       	st	-X, r24
    1502:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
    1504:	13 86       	std	Z+11, r1	; 0x0b
    1506:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
    1508:	8c 91       	ld	r24, X
    150a:	81 50       	subi	r24, 0x01	; 1
    150c:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
    150e:	8c 91       	ld	r24, X
}
    1510:	df 91       	pop	r29
    1512:	cf 91       	pop	r28
    1514:	08 95       	ret

00001516 <pxPortInitialiseStack>:
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    1516:	31 e1       	ldi	r19, 0x11	; 17
    1518:	fc 01       	movw	r30, r24
    151a:	30 83       	st	Z, r19
    151c:	31 97       	sbiw	r30, 0x01	; 1
    151e:	22 e2       	ldi	r18, 0x22	; 34
    1520:	20 83       	st	Z, r18
    1522:	31 97       	sbiw	r30, 0x01	; 1
    1524:	a3 e3       	ldi	r26, 0x33	; 51
    1526:	a0 83       	st	Z, r26
    1528:	31 97       	sbiw	r30, 0x01	; 1
    152a:	60 83       	st	Z, r22
    152c:	31 97       	sbiw	r30, 0x01	; 1
    152e:	70 83       	st	Z, r23
    1530:	31 97       	sbiw	r30, 0x01	; 1
    1532:	10 82       	st	Z, r1
    1534:	31 97       	sbiw	r30, 0x01	; 1
    1536:	10 82       	st	Z, r1
    1538:	31 97       	sbiw	r30, 0x01	; 1
    153a:	60 e8       	ldi	r22, 0x80	; 128
    153c:	60 83       	st	Z, r22
    153e:	31 97       	sbiw	r30, 0x01	; 1
    1540:	10 82       	st	Z, r1
    1542:	31 97       	sbiw	r30, 0x01	; 1
    1544:	10 82       	st	Z, r1
    1546:	31 97       	sbiw	r30, 0x01	; 1
    1548:	10 82       	st	Z, r1
    154a:	31 97       	sbiw	r30, 0x01	; 1
    154c:	62 e0       	ldi	r22, 0x02	; 2
    154e:	60 83       	st	Z, r22
    1550:	31 97       	sbiw	r30, 0x01	; 1
    1552:	63 e0       	ldi	r22, 0x03	; 3
    1554:	60 83       	st	Z, r22
    1556:	31 97       	sbiw	r30, 0x01	; 1
    1558:	64 e0       	ldi	r22, 0x04	; 4
    155a:	60 83       	st	Z, r22
    155c:	31 97       	sbiw	r30, 0x01	; 1
    155e:	65 e0       	ldi	r22, 0x05	; 5
    1560:	60 83       	st	Z, r22
    1562:	31 97       	sbiw	r30, 0x01	; 1
    1564:	66 e0       	ldi	r22, 0x06	; 6
    1566:	60 83       	st	Z, r22
    1568:	31 97       	sbiw	r30, 0x01	; 1
    156a:	67 e0       	ldi	r22, 0x07	; 7
    156c:	60 83       	st	Z, r22
    156e:	31 97       	sbiw	r30, 0x01	; 1
    1570:	68 e0       	ldi	r22, 0x08	; 8
    1572:	60 83       	st	Z, r22
    1574:	31 97       	sbiw	r30, 0x01	; 1
    1576:	69 e0       	ldi	r22, 0x09	; 9
    1578:	60 83       	st	Z, r22
    157a:	31 97       	sbiw	r30, 0x01	; 1
    157c:	60 e1       	ldi	r22, 0x10	; 16
    157e:	60 83       	st	Z, r22
    1580:	31 97       	sbiw	r30, 0x01	; 1
    1582:	30 83       	st	Z, r19
    1584:	31 97       	sbiw	r30, 0x01	; 1
    1586:	32 e1       	ldi	r19, 0x12	; 18
    1588:	30 83       	st	Z, r19
    158a:	31 97       	sbiw	r30, 0x01	; 1
    158c:	33 e1       	ldi	r19, 0x13	; 19
    158e:	30 83       	st	Z, r19
    1590:	31 97       	sbiw	r30, 0x01	; 1
    1592:	34 e1       	ldi	r19, 0x14	; 20
    1594:	30 83       	st	Z, r19
    1596:	31 97       	sbiw	r30, 0x01	; 1
    1598:	35 e1       	ldi	r19, 0x15	; 21
    159a:	30 83       	st	Z, r19
    159c:	31 97       	sbiw	r30, 0x01	; 1
    159e:	36 e1       	ldi	r19, 0x16	; 22
    15a0:	30 83       	st	Z, r19
    15a2:	31 97       	sbiw	r30, 0x01	; 1
    15a4:	37 e1       	ldi	r19, 0x17	; 23
    15a6:	30 83       	st	Z, r19
    15a8:	31 97       	sbiw	r30, 0x01	; 1
    15aa:	38 e1       	ldi	r19, 0x18	; 24
    15ac:	30 83       	st	Z, r19
    15ae:	31 97       	sbiw	r30, 0x01	; 1
    15b0:	39 e1       	ldi	r19, 0x19	; 25
    15b2:	30 83       	st	Z, r19
    15b4:	31 97       	sbiw	r30, 0x01	; 1
    15b6:	30 e2       	ldi	r19, 0x20	; 32
    15b8:	30 83       	st	Z, r19
    15ba:	31 97       	sbiw	r30, 0x01	; 1
    15bc:	31 e2       	ldi	r19, 0x21	; 33
    15be:	30 83       	st	Z, r19
    15c0:	31 97       	sbiw	r30, 0x01	; 1
    15c2:	20 83       	st	Z, r18
    15c4:	31 97       	sbiw	r30, 0x01	; 1
    15c6:	23 e2       	ldi	r18, 0x23	; 35
    15c8:	20 83       	st	Z, r18
    15ca:	31 97       	sbiw	r30, 0x01	; 1
    15cc:	40 83       	st	Z, r20
    15ce:	31 97       	sbiw	r30, 0x01	; 1
    15d0:	50 83       	st	Z, r21
    15d2:	31 97       	sbiw	r30, 0x01	; 1
    15d4:	26 e2       	ldi	r18, 0x26	; 38
    15d6:	20 83       	st	Z, r18
    15d8:	31 97       	sbiw	r30, 0x01	; 1
    15da:	27 e2       	ldi	r18, 0x27	; 39
    15dc:	20 83       	st	Z, r18
    15de:	31 97       	sbiw	r30, 0x01	; 1
    15e0:	28 e2       	ldi	r18, 0x28	; 40
    15e2:	20 83       	st	Z, r18
    15e4:	31 97       	sbiw	r30, 0x01	; 1
    15e6:	29 e2       	ldi	r18, 0x29	; 41
    15e8:	20 83       	st	Z, r18
    15ea:	31 97       	sbiw	r30, 0x01	; 1
    15ec:	20 e3       	ldi	r18, 0x30	; 48
    15ee:	20 83       	st	Z, r18
    15f0:	31 97       	sbiw	r30, 0x01	; 1
    15f2:	21 e3       	ldi	r18, 0x31	; 49
    15f4:	20 83       	st	Z, r18
    15f6:	89 97       	sbiw	r24, 0x29	; 41
    15f8:	08 95       	ret

000015fa <xPortStartScheduler>:
    15fa:	a8 95       	wdr
    15fc:	90 ec       	ldi	r25, 0xC0	; 192
    15fe:	88 e1       	ldi	r24, 0x18	; 24
    1600:	0f b6       	in	r0, 0x3f	; 63
    1602:	f8 94       	cli
    1604:	a8 95       	wdr
    1606:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    160a:	0f be       	out	0x3f, r0	; 63
    160c:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    1610:	a0 91 54 19 	lds	r26, 0x1954	; 0x801954 <pxCurrentTCB>
    1614:	b0 91 55 19 	lds	r27, 0x1955	; 0x801955 <pxCurrentTCB+0x1>
    1618:	cd 91       	ld	r28, X+
    161a:	cd bf       	out	0x3d, r28	; 61
    161c:	dd 91       	ld	r29, X+
    161e:	de bf       	out	0x3e, r29	; 62
    1620:	ff 91       	pop	r31
    1622:	ef 91       	pop	r30
    1624:	df 91       	pop	r29
    1626:	cf 91       	pop	r28
    1628:	bf 91       	pop	r27
    162a:	af 91       	pop	r26
    162c:	9f 91       	pop	r25
    162e:	8f 91       	pop	r24
    1630:	7f 91       	pop	r23
    1632:	6f 91       	pop	r22
    1634:	5f 91       	pop	r21
    1636:	4f 91       	pop	r20
    1638:	3f 91       	pop	r19
    163a:	2f 91       	pop	r18
    163c:	1f 91       	pop	r17
    163e:	0f 91       	pop	r16
    1640:	ff 90       	pop	r15
    1642:	ef 90       	pop	r14
    1644:	df 90       	pop	r13
    1646:	cf 90       	pop	r12
    1648:	bf 90       	pop	r11
    164a:	af 90       	pop	r10
    164c:	9f 90       	pop	r9
    164e:	8f 90       	pop	r8
    1650:	7f 90       	pop	r7
    1652:	6f 90       	pop	r6
    1654:	5f 90       	pop	r5
    1656:	4f 90       	pop	r4
    1658:	3f 90       	pop	r3
    165a:	2f 90       	pop	r2
    165c:	1f 90       	pop	r1
    165e:	0f 90       	pop	r0
    1660:	0c be       	out	0x3c, r0	; 60
    1662:	0f 90       	pop	r0
    1664:	0b be       	out	0x3b, r0	; 59
    1666:	0f 90       	pop	r0
    1668:	0f be       	out	0x3f, r0	; 63
    166a:	0f 90       	pop	r0
    166c:	08 95       	ret
    166e:	81 e0       	ldi	r24, 0x01	; 1
    1670:	08 95       	ret

00001672 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYield( void )
{
    portSAVE_CONTEXT();
    1672:	0f 92       	push	r0
    1674:	0f b6       	in	r0, 0x3f	; 63
    1676:	f8 94       	cli
    1678:	0f 92       	push	r0
    167a:	0b b6       	in	r0, 0x3b	; 59
    167c:	0f 92       	push	r0
    167e:	0c b6       	in	r0, 0x3c	; 60
    1680:	0f 92       	push	r0
    1682:	1f 92       	push	r1
    1684:	11 24       	eor	r1, r1
    1686:	2f 92       	push	r2
    1688:	3f 92       	push	r3
    168a:	4f 92       	push	r4
    168c:	5f 92       	push	r5
    168e:	6f 92       	push	r6
    1690:	7f 92       	push	r7
    1692:	8f 92       	push	r8
    1694:	9f 92       	push	r9
    1696:	af 92       	push	r10
    1698:	bf 92       	push	r11
    169a:	cf 92       	push	r12
    169c:	df 92       	push	r13
    169e:	ef 92       	push	r14
    16a0:	ff 92       	push	r15
    16a2:	0f 93       	push	r16
    16a4:	1f 93       	push	r17
    16a6:	2f 93       	push	r18
    16a8:	3f 93       	push	r19
    16aa:	4f 93       	push	r20
    16ac:	5f 93       	push	r21
    16ae:	6f 93       	push	r22
    16b0:	7f 93       	push	r23
    16b2:	8f 93       	push	r24
    16b4:	9f 93       	push	r25
    16b6:	af 93       	push	r26
    16b8:	bf 93       	push	r27
    16ba:	cf 93       	push	r28
    16bc:	df 93       	push	r29
    16be:	ef 93       	push	r30
    16c0:	ff 93       	push	r31
    16c2:	a0 91 54 19 	lds	r26, 0x1954	; 0x801954 <pxCurrentTCB>
    16c6:	b0 91 55 19 	lds	r27, 0x1955	; 0x801955 <pxCurrentTCB+0x1>
    16ca:	0d b6       	in	r0, 0x3d	; 61
    16cc:	0d 92       	st	X+, r0
    16ce:	0e b6       	in	r0, 0x3e	; 62
    16d0:	0d 92       	st	X+, r0
    vTaskSwitchContext();
    16d2:	0e 94 43 15 	call	0x2a86	; 0x2a86 <vTaskSwitchContext>
    portRESTORE_CONTEXT();
    16d6:	a0 91 54 19 	lds	r26, 0x1954	; 0x801954 <pxCurrentTCB>
    16da:	b0 91 55 19 	lds	r27, 0x1955	; 0x801955 <pxCurrentTCB+0x1>
    16de:	cd 91       	ld	r28, X+
    16e0:	cd bf       	out	0x3d, r28	; 61
    16e2:	dd 91       	ld	r29, X+
    16e4:	de bf       	out	0x3e, r29	; 62
    16e6:	ff 91       	pop	r31
    16e8:	ef 91       	pop	r30
    16ea:	df 91       	pop	r29
    16ec:	cf 91       	pop	r28
    16ee:	bf 91       	pop	r27
    16f0:	af 91       	pop	r26
    16f2:	9f 91       	pop	r25
    16f4:	8f 91       	pop	r24
    16f6:	7f 91       	pop	r23
    16f8:	6f 91       	pop	r22
    16fa:	5f 91       	pop	r21
    16fc:	4f 91       	pop	r20
    16fe:	3f 91       	pop	r19
    1700:	2f 91       	pop	r18
    1702:	1f 91       	pop	r17
    1704:	0f 91       	pop	r16
    1706:	ff 90       	pop	r15
    1708:	ef 90       	pop	r14
    170a:	df 90       	pop	r13
    170c:	cf 90       	pop	r12
    170e:	bf 90       	pop	r11
    1710:	af 90       	pop	r10
    1712:	9f 90       	pop	r9
    1714:	8f 90       	pop	r8
    1716:	7f 90       	pop	r7
    1718:	6f 90       	pop	r6
    171a:	5f 90       	pop	r5
    171c:	4f 90       	pop	r4
    171e:	3f 90       	pop	r3
    1720:	2f 90       	pop	r2
    1722:	1f 90       	pop	r1
    1724:	0f 90       	pop	r0
    1726:	0c be       	out	0x3c, r0	; 60
    1728:	0f 90       	pop	r0
    172a:	0b be       	out	0x3b, r0	; 59
    172c:	0f 90       	pop	r0
    172e:	0f be       	out	0x3f, r0	; 63
    1730:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
    1732:	08 95       	ret

00001734 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
    1734:	0f 92       	push	r0
    1736:	0f b6       	in	r0, 0x3f	; 63
    1738:	f8 94       	cli
    173a:	0f 92       	push	r0
    173c:	0b b6       	in	r0, 0x3b	; 59
    173e:	0f 92       	push	r0
    1740:	0c b6       	in	r0, 0x3c	; 60
    1742:	0f 92       	push	r0
    1744:	1f 92       	push	r1
    1746:	11 24       	eor	r1, r1
    1748:	2f 92       	push	r2
    174a:	3f 92       	push	r3
    174c:	4f 92       	push	r4
    174e:	5f 92       	push	r5
    1750:	6f 92       	push	r6
    1752:	7f 92       	push	r7
    1754:	8f 92       	push	r8
    1756:	9f 92       	push	r9
    1758:	af 92       	push	r10
    175a:	bf 92       	push	r11
    175c:	cf 92       	push	r12
    175e:	df 92       	push	r13
    1760:	ef 92       	push	r14
    1762:	ff 92       	push	r15
    1764:	0f 93       	push	r16
    1766:	1f 93       	push	r17
    1768:	2f 93       	push	r18
    176a:	3f 93       	push	r19
    176c:	4f 93       	push	r20
    176e:	5f 93       	push	r21
    1770:	6f 93       	push	r22
    1772:	7f 93       	push	r23
    1774:	8f 93       	push	r24
    1776:	9f 93       	push	r25
    1778:	af 93       	push	r26
    177a:	bf 93       	push	r27
    177c:	cf 93       	push	r28
    177e:	df 93       	push	r29
    1780:	ef 93       	push	r30
    1782:	ff 93       	push	r31
    1784:	a0 91 54 19 	lds	r26, 0x1954	; 0x801954 <pxCurrentTCB>
    1788:	b0 91 55 19 	lds	r27, 0x1955	; 0x801955 <pxCurrentTCB+0x1>
    178c:	0d b6       	in	r0, 0x3d	; 61
    178e:	0d 92       	st	X+, r0
    1790:	0e b6       	in	r0, 0x3e	; 62
    1792:	0d 92       	st	X+, r0

    sleep_reset();        //     reset the sleep_mode() faster than sleep_disable();
    1794:	13 be       	out	0x33, r1	; 51

    if( xTaskIncrementTick() != pdFALSE )
    1796:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <xTaskIncrementTick>
    179a:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
    179c:	0e 94 43 15 	call	0x2a86	; 0x2a86 <vTaskSwitchContext>
    }

    portRESTORE_CONTEXT();
    17a0:	a0 91 54 19 	lds	r26, 0x1954	; 0x801954 <pxCurrentTCB>
    17a4:	b0 91 55 19 	lds	r27, 0x1955	; 0x801955 <pxCurrentTCB+0x1>
    17a8:	cd 91       	ld	r28, X+
    17aa:	cd bf       	out	0x3d, r28	; 61
    17ac:	dd 91       	ld	r29, X+
    17ae:	de bf       	out	0x3e, r29	; 62
    17b0:	ff 91       	pop	r31
    17b2:	ef 91       	pop	r30
    17b4:	df 91       	pop	r29
    17b6:	cf 91       	pop	r28
    17b8:	bf 91       	pop	r27
    17ba:	af 91       	pop	r26
    17bc:	9f 91       	pop	r25
    17be:	8f 91       	pop	r24
    17c0:	7f 91       	pop	r23
    17c2:	6f 91       	pop	r22
    17c4:	5f 91       	pop	r21
    17c6:	4f 91       	pop	r20
    17c8:	3f 91       	pop	r19
    17ca:	2f 91       	pop	r18
    17cc:	1f 91       	pop	r17
    17ce:	0f 91       	pop	r16
    17d0:	ff 90       	pop	r15
    17d2:	ef 90       	pop	r14
    17d4:	df 90       	pop	r13
    17d6:	cf 90       	pop	r12
    17d8:	bf 90       	pop	r11
    17da:	af 90       	pop	r10
    17dc:	9f 90       	pop	r9
    17de:	8f 90       	pop	r8
    17e0:	7f 90       	pop	r7
    17e2:	6f 90       	pop	r6
    17e4:	5f 90       	pop	r5
    17e6:	4f 90       	pop	r4
    17e8:	3f 90       	pop	r3
    17ea:	2f 90       	pop	r2
    17ec:	1f 90       	pop	r1
    17ee:	0f 90       	pop	r0
    17f0:	0c be       	out	0x3c, r0	; 60
    17f2:	0f 90       	pop	r0
    17f4:	0b be       	out	0x3b, r0	; 59
    17f6:	0f 90       	pop	r0
    17f8:	0f be       	out	0x3f, r0	; 63
    17fa:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
    17fc:	08 95       	ret

000017fe <__vector_12>:
     */
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
//  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
    17fe:	9a df       	rcall	.-204    	; 0x1734 <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
    1800:	18 95       	reti

00001802 <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    1802:	0f b6       	in	r0, 0x3f	; 63
    1804:	f8 94       	cli
    1806:	0f 92       	push	r0
    1808:	fc 01       	movw	r30, r24
    180a:	96 8d       	ldd	r25, Z+30	; 0x1e
    180c:	0f 90       	pop	r0
    180e:	0f be       	out	0x3f, r0	; 63
    1810:	81 e0       	ldi	r24, 0x01	; 1
    1812:	91 11       	cpse	r25, r1
    1814:	80 e0       	ldi	r24, 0x00	; 0
    1816:	08 95       	ret

00001818 <prvCopyDataToQueue>:
    1818:	0f 93       	push	r16
    181a:	1f 93       	push	r17
    181c:	cf 93       	push	r28
    181e:	df 93       	push	r29
    1820:	ec 01       	movw	r28, r24
    1822:	04 2f       	mov	r16, r20
    1824:	1e 8d       	ldd	r17, Y+30	; 0x1e
    1826:	48 a1       	ldd	r20, Y+32	; 0x20
    1828:	41 11       	cpse	r20, r1
    182a:	0c c0       	rjmp	.+24     	; 0x1844 <prvCopyDataToQueue+0x2c>
    182c:	88 81       	ld	r24, Y
    182e:	99 81       	ldd	r25, Y+1	; 0x01
    1830:	89 2b       	or	r24, r25
    1832:	09 f0       	breq	.+2      	; 0x1836 <prvCopyDataToQueue+0x1e>
    1834:	42 c0       	rjmp	.+132    	; 0x18ba <prvCopyDataToQueue+0xa2>
    1836:	8c 81       	ldd	r24, Y+4	; 0x04
    1838:	9d 81       	ldd	r25, Y+5	; 0x05
    183a:	0e 94 26 17 	call	0x2e4c	; 0x2e4c <xTaskPriorityDisinherit>
    183e:	1d 82       	std	Y+5, r1	; 0x05
    1840:	1c 82       	std	Y+4, r1	; 0x04
    1842:	42 c0       	rjmp	.+132    	; 0x18c8 <prvCopyDataToQueue+0xb0>
    1844:	01 11       	cpse	r16, r1
    1846:	17 c0       	rjmp	.+46     	; 0x1876 <prvCopyDataToQueue+0x5e>
    1848:	50 e0       	ldi	r21, 0x00	; 0
    184a:	8a 81       	ldd	r24, Y+2	; 0x02
    184c:	9b 81       	ldd	r25, Y+3	; 0x03
    184e:	0e 94 50 2b 	call	0x56a0	; 0x56a0 <memcpy>
    1852:	28 a1       	ldd	r18, Y+32	; 0x20
    1854:	8a 81       	ldd	r24, Y+2	; 0x02
    1856:	9b 81       	ldd	r25, Y+3	; 0x03
    1858:	82 0f       	add	r24, r18
    185a:	91 1d       	adc	r25, r1
    185c:	9b 83       	std	Y+3, r25	; 0x03
    185e:	8a 83       	std	Y+2, r24	; 0x02
    1860:	2c 81       	ldd	r18, Y+4	; 0x04
    1862:	3d 81       	ldd	r19, Y+5	; 0x05
    1864:	82 17       	cp	r24, r18
    1866:	93 07       	cpc	r25, r19
    1868:	50 f1       	brcs	.+84     	; 0x18be <prvCopyDataToQueue+0xa6>
    186a:	88 81       	ld	r24, Y
    186c:	99 81       	ldd	r25, Y+1	; 0x01
    186e:	9b 83       	std	Y+3, r25	; 0x03
    1870:	8a 83       	std	Y+2, r24	; 0x02
    1872:	80 e0       	ldi	r24, 0x00	; 0
    1874:	29 c0       	rjmp	.+82     	; 0x18c8 <prvCopyDataToQueue+0xb0>
    1876:	50 e0       	ldi	r21, 0x00	; 0
    1878:	8e 81       	ldd	r24, Y+6	; 0x06
    187a:	9f 81       	ldd	r25, Y+7	; 0x07
    187c:	0e 94 50 2b 	call	0x56a0	; 0x56a0 <memcpy>
    1880:	88 a1       	ldd	r24, Y+32	; 0x20
    1882:	90 e0       	ldi	r25, 0x00	; 0
    1884:	91 95       	neg	r25
    1886:	81 95       	neg	r24
    1888:	91 09       	sbc	r25, r1
    188a:	2e 81       	ldd	r18, Y+6	; 0x06
    188c:	3f 81       	ldd	r19, Y+7	; 0x07
    188e:	28 0f       	add	r18, r24
    1890:	39 1f       	adc	r19, r25
    1892:	3f 83       	std	Y+7, r19	; 0x07
    1894:	2e 83       	std	Y+6, r18	; 0x06
    1896:	48 81       	ld	r20, Y
    1898:	59 81       	ldd	r21, Y+1	; 0x01
    189a:	24 17       	cp	r18, r20
    189c:	35 07       	cpc	r19, r21
    189e:	30 f4       	brcc	.+12     	; 0x18ac <prvCopyDataToQueue+0x94>
    18a0:	2c 81       	ldd	r18, Y+4	; 0x04
    18a2:	3d 81       	ldd	r19, Y+5	; 0x05
    18a4:	82 0f       	add	r24, r18
    18a6:	93 1f       	adc	r25, r19
    18a8:	9f 83       	std	Y+7, r25	; 0x07
    18aa:	8e 83       	std	Y+6, r24	; 0x06
    18ac:	02 30       	cpi	r16, 0x02	; 2
    18ae:	49 f4       	brne	.+18     	; 0x18c2 <prvCopyDataToQueue+0xaa>
    18b0:	11 23       	and	r17, r17
    18b2:	49 f0       	breq	.+18     	; 0x18c6 <prvCopyDataToQueue+0xae>
    18b4:	11 50       	subi	r17, 0x01	; 1
    18b6:	80 e0       	ldi	r24, 0x00	; 0
    18b8:	07 c0       	rjmp	.+14     	; 0x18c8 <prvCopyDataToQueue+0xb0>
    18ba:	80 e0       	ldi	r24, 0x00	; 0
    18bc:	05 c0       	rjmp	.+10     	; 0x18c8 <prvCopyDataToQueue+0xb0>
    18be:	80 e0       	ldi	r24, 0x00	; 0
    18c0:	03 c0       	rjmp	.+6      	; 0x18c8 <prvCopyDataToQueue+0xb0>
    18c2:	80 e0       	ldi	r24, 0x00	; 0
    18c4:	01 c0       	rjmp	.+2      	; 0x18c8 <prvCopyDataToQueue+0xb0>
    18c6:	80 e0       	ldi	r24, 0x00	; 0
    18c8:	1f 5f       	subi	r17, 0xFF	; 255
    18ca:	1e 8f       	std	Y+30, r17	; 0x1e
    18cc:	df 91       	pop	r29
    18ce:	cf 91       	pop	r28
    18d0:	1f 91       	pop	r17
    18d2:	0f 91       	pop	r16
    18d4:	08 95       	ret

000018d6 <prvCopyDataFromQueue>:
    18d6:	fc 01       	movw	r30, r24
    18d8:	40 a1       	ldd	r20, Z+32	; 0x20
    18da:	44 23       	and	r20, r20
    18dc:	a9 f0       	breq	.+42     	; 0x1908 <prvCopyDataFromQueue+0x32>
    18de:	50 e0       	ldi	r21, 0x00	; 0
    18e0:	26 81       	ldd	r18, Z+6	; 0x06
    18e2:	37 81       	ldd	r19, Z+7	; 0x07
    18e4:	24 0f       	add	r18, r20
    18e6:	35 1f       	adc	r19, r21
    18e8:	37 83       	std	Z+7, r19	; 0x07
    18ea:	26 83       	std	Z+6, r18	; 0x06
    18ec:	84 81       	ldd	r24, Z+4	; 0x04
    18ee:	95 81       	ldd	r25, Z+5	; 0x05
    18f0:	28 17       	cp	r18, r24
    18f2:	39 07       	cpc	r19, r25
    18f4:	20 f0       	brcs	.+8      	; 0x18fe <prvCopyDataFromQueue+0x28>
    18f6:	80 81       	ld	r24, Z
    18f8:	91 81       	ldd	r25, Z+1	; 0x01
    18fa:	97 83       	std	Z+7, r25	; 0x07
    18fc:	86 83       	std	Z+6, r24	; 0x06
    18fe:	cb 01       	movw	r24, r22
    1900:	66 81       	ldd	r22, Z+6	; 0x06
    1902:	77 81       	ldd	r23, Z+7	; 0x07
    1904:	0c 94 50 2b 	jmp	0x56a0	; 0x56a0 <memcpy>
    1908:	08 95       	ret

0000190a <prvUnlockQueue>:
    190a:	ef 92       	push	r14
    190c:	ff 92       	push	r15
    190e:	0f 93       	push	r16
    1910:	1f 93       	push	r17
    1912:	cf 93       	push	r28
    1914:	8c 01       	movw	r16, r24
    1916:	0f b6       	in	r0, 0x3f	; 63
    1918:	f8 94       	cli
    191a:	0f 92       	push	r0
    191c:	fc 01       	movw	r30, r24
    191e:	c2 a1       	ldd	r28, Z+34	; 0x22
    1920:	1c 16       	cp	r1, r28
    1922:	ac f4       	brge	.+42     	; 0x194e <prvUnlockQueue+0x44>
    1924:	83 89       	ldd	r24, Z+19	; 0x13
    1926:	81 11       	cpse	r24, r1
    1928:	06 c0       	rjmp	.+12     	; 0x1936 <prvUnlockQueue+0x2c>
    192a:	11 c0       	rjmp	.+34     	; 0x194e <prvUnlockQueue+0x44>
    192c:	f8 01       	movw	r30, r16
    192e:	83 89       	ldd	r24, Z+19	; 0x13
    1930:	81 11       	cpse	r24, r1
    1932:	05 c0       	rjmp	.+10     	; 0x193e <prvUnlockQueue+0x34>
    1934:	0c c0       	rjmp	.+24     	; 0x194e <prvUnlockQueue+0x44>
    1936:	78 01       	movw	r14, r16
    1938:	f3 e1       	ldi	r31, 0x13	; 19
    193a:	ef 0e       	add	r14, r31
    193c:	f1 1c       	adc	r15, r1
    193e:	c7 01       	movw	r24, r14
    1940:	0e 94 1d 16 	call	0x2c3a	; 0x2c3a <xTaskRemoveFromEventList>
    1944:	81 11       	cpse	r24, r1
    1946:	0e 94 0f 17 	call	0x2e1e	; 0x2e1e <vTaskMissedYield>
    194a:	c1 50       	subi	r28, 0x01	; 1
    194c:	79 f7       	brne	.-34     	; 0x192c <prvUnlockQueue+0x22>
    194e:	8f ef       	ldi	r24, 0xFF	; 255
    1950:	f8 01       	movw	r30, r16
    1952:	82 a3       	std	Z+34, r24	; 0x22
    1954:	0f 90       	pop	r0
    1956:	0f be       	out	0x3f, r0	; 63
    1958:	0f b6       	in	r0, 0x3f	; 63
    195a:	f8 94       	cli
    195c:	0f 92       	push	r0
    195e:	c1 a1       	ldd	r28, Z+33	; 0x21
    1960:	1c 16       	cp	r1, r28
    1962:	ac f4       	brge	.+42     	; 0x198e <prvUnlockQueue+0x84>
    1964:	80 85       	ldd	r24, Z+8	; 0x08
    1966:	81 11       	cpse	r24, r1
    1968:	06 c0       	rjmp	.+12     	; 0x1976 <prvUnlockQueue+0x6c>
    196a:	11 c0       	rjmp	.+34     	; 0x198e <prvUnlockQueue+0x84>
    196c:	f8 01       	movw	r30, r16
    196e:	80 85       	ldd	r24, Z+8	; 0x08
    1970:	81 11       	cpse	r24, r1
    1972:	05 c0       	rjmp	.+10     	; 0x197e <prvUnlockQueue+0x74>
    1974:	0c c0       	rjmp	.+24     	; 0x198e <prvUnlockQueue+0x84>
    1976:	78 01       	movw	r14, r16
    1978:	f8 e0       	ldi	r31, 0x08	; 8
    197a:	ef 0e       	add	r14, r31
    197c:	f1 1c       	adc	r15, r1
    197e:	c7 01       	movw	r24, r14
    1980:	0e 94 1d 16 	call	0x2c3a	; 0x2c3a <xTaskRemoveFromEventList>
    1984:	81 11       	cpse	r24, r1
    1986:	0e 94 0f 17 	call	0x2e1e	; 0x2e1e <vTaskMissedYield>
    198a:	c1 50       	subi	r28, 0x01	; 1
    198c:	79 f7       	brne	.-34     	; 0x196c <prvUnlockQueue+0x62>
    198e:	8f ef       	ldi	r24, 0xFF	; 255
    1990:	f8 01       	movw	r30, r16
    1992:	81 a3       	std	Z+33, r24	; 0x21
    1994:	0f 90       	pop	r0
    1996:	0f be       	out	0x3f, r0	; 63
    1998:	cf 91       	pop	r28
    199a:	1f 91       	pop	r17
    199c:	0f 91       	pop	r16
    199e:	ff 90       	pop	r15
    19a0:	ef 90       	pop	r14
    19a2:	08 95       	ret

000019a4 <xQueueGenericReset>:
    19a4:	cf 93       	push	r28
    19a6:	df 93       	push	r29
    19a8:	ec 01       	movw	r28, r24
    19aa:	0f b6       	in	r0, 0x3f	; 63
    19ac:	f8 94       	cli
    19ae:	0f 92       	push	r0
    19b0:	e8 81       	ld	r30, Y
    19b2:	f9 81       	ldd	r31, Y+1	; 0x01
    19b4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    19b6:	28 a1       	ldd	r18, Y+32	; 0x20
    19b8:	90 e0       	ldi	r25, 0x00	; 0
    19ba:	30 e0       	ldi	r19, 0x00	; 0
    19bc:	82 9f       	mul	r24, r18
    19be:	a0 01       	movw	r20, r0
    19c0:	83 9f       	mul	r24, r19
    19c2:	50 0d       	add	r21, r0
    19c4:	92 9f       	mul	r25, r18
    19c6:	50 0d       	add	r21, r0
    19c8:	11 24       	eor	r1, r1
    19ca:	4e 0f       	add	r20, r30
    19cc:	5f 1f       	adc	r21, r31
    19ce:	5d 83       	std	Y+5, r21	; 0x05
    19d0:	4c 83       	std	Y+4, r20	; 0x04
    19d2:	1e 8e       	std	Y+30, r1	; 0x1e
    19d4:	fb 83       	std	Y+3, r31	; 0x03
    19d6:	ea 83       	std	Y+2, r30	; 0x02
    19d8:	01 97       	sbiw	r24, 0x01	; 1
    19da:	82 9f       	mul	r24, r18
    19dc:	a0 01       	movw	r20, r0
    19de:	83 9f       	mul	r24, r19
    19e0:	50 0d       	add	r21, r0
    19e2:	92 9f       	mul	r25, r18
    19e4:	50 0d       	add	r21, r0
    19e6:	11 24       	eor	r1, r1
    19e8:	cf 01       	movw	r24, r30
    19ea:	84 0f       	add	r24, r20
    19ec:	95 1f       	adc	r25, r21
    19ee:	9f 83       	std	Y+7, r25	; 0x07
    19f0:	8e 83       	std	Y+6, r24	; 0x06
    19f2:	8f ef       	ldi	r24, 0xFF	; 255
    19f4:	89 a3       	std	Y+33, r24	; 0x21
    19f6:	8a a3       	std	Y+34, r24	; 0x22
    19f8:	61 11       	cpse	r22, r1
    19fa:	0b c0       	rjmp	.+22     	; 0x1a12 <xQueueGenericReset+0x6e>
    19fc:	88 85       	ldd	r24, Y+8	; 0x08
    19fe:	88 23       	and	r24, r24
    1a00:	71 f0       	breq	.+28     	; 0x1a1e <xQueueGenericReset+0x7a>
    1a02:	ce 01       	movw	r24, r28
    1a04:	08 96       	adiw	r24, 0x08	; 8
    1a06:	0e 94 1d 16 	call	0x2c3a	; 0x2c3a <xTaskRemoveFromEventList>
    1a0a:	88 23       	and	r24, r24
    1a0c:	41 f0       	breq	.+16     	; 0x1a1e <xQueueGenericReset+0x7a>
    1a0e:	31 de       	rcall	.-926    	; 0x1672 <vPortYield>
    1a10:	06 c0       	rjmp	.+12     	; 0x1a1e <xQueueGenericReset+0x7a>
    1a12:	ce 01       	movw	r24, r28
    1a14:	08 96       	adiw	r24, 0x08	; 8
    1a16:	e5 dc       	rcall	.-1590   	; 0x13e2 <vListInitialise>
    1a18:	ce 01       	movw	r24, r28
    1a1a:	43 96       	adiw	r24, 0x13	; 19
    1a1c:	e2 dc       	rcall	.-1596   	; 0x13e2 <vListInitialise>
    1a1e:	0f 90       	pop	r0
    1a20:	0f be       	out	0x3f, r0	; 63
    1a22:	81 e0       	ldi	r24, 0x01	; 1
    1a24:	df 91       	pop	r29
    1a26:	cf 91       	pop	r28
    1a28:	08 95       	ret

00001a2a <xQueueGenericCreate>:
    1a2a:	ff 92       	push	r15
    1a2c:	0f 93       	push	r16
    1a2e:	1f 93       	push	r17
    1a30:	cf 93       	push	r28
    1a32:	df 93       	push	r29
    1a34:	08 2f       	mov	r16, r24
    1a36:	16 2f       	mov	r17, r22
    1a38:	f4 2e       	mov	r15, r20
    1a3a:	66 23       	and	r22, r22
    1a3c:	b9 f0       	breq	.+46     	; 0x1a6c <xQueueGenericCreate+0x42>
    1a3e:	86 9f       	mul	r24, r22
    1a40:	c0 01       	movw	r24, r0
    1a42:	11 24       	eor	r1, r1
    1a44:	85 96       	adiw	r24, 0x25	; 37
    1a46:	e3 db       	rcall	.-2106   	; 0x120e <pvPortMalloc>
    1a48:	ec 01       	movw	r28, r24
    1a4a:	00 97       	sbiw	r24, 0x00	; 0
    1a4c:	41 f4       	brne	.+16     	; 0x1a5e <xQueueGenericCreate+0x34>
    1a4e:	14 c0       	rjmp	.+40     	; 0x1a78 <xQueueGenericCreate+0x4e>
    1a50:	0f 8f       	std	Y+31, r16	; 0x1f
    1a52:	18 a3       	std	Y+32, r17	; 0x20
    1a54:	61 e0       	ldi	r22, 0x01	; 1
    1a56:	ce 01       	movw	r24, r28
    1a58:	a5 df       	rcall	.-182    	; 0x19a4 <xQueueGenericReset>
    1a5a:	fc a2       	std	Y+36, r15	; 0x24
    1a5c:	0d c0       	rjmp	.+26     	; 0x1a78 <xQueueGenericCreate+0x4e>
    1a5e:	85 96       	adiw	r24, 0x25	; 37
    1a60:	99 83       	std	Y+1, r25	; 0x01
    1a62:	88 83       	st	Y, r24
    1a64:	f5 cf       	rjmp	.-22     	; 0x1a50 <xQueueGenericCreate+0x26>
    1a66:	d9 83       	std	Y+1, r29	; 0x01
    1a68:	c8 83       	st	Y, r28
    1a6a:	f2 cf       	rjmp	.-28     	; 0x1a50 <xQueueGenericCreate+0x26>
    1a6c:	85 e2       	ldi	r24, 0x25	; 37
    1a6e:	90 e0       	ldi	r25, 0x00	; 0
    1a70:	ce db       	rcall	.-2148   	; 0x120e <pvPortMalloc>
    1a72:	ec 01       	movw	r28, r24
    1a74:	89 2b       	or	r24, r25
    1a76:	b9 f7       	brne	.-18     	; 0x1a66 <xQueueGenericCreate+0x3c>
    1a78:	ce 01       	movw	r24, r28
    1a7a:	df 91       	pop	r29
    1a7c:	cf 91       	pop	r28
    1a7e:	1f 91       	pop	r17
    1a80:	0f 91       	pop	r16
    1a82:	ff 90       	pop	r15
    1a84:	08 95       	ret

00001a86 <xQueueGenericSend>:
    1a86:	9f 92       	push	r9
    1a88:	af 92       	push	r10
    1a8a:	bf 92       	push	r11
    1a8c:	cf 92       	push	r12
    1a8e:	df 92       	push	r13
    1a90:	ef 92       	push	r14
    1a92:	ff 92       	push	r15
    1a94:	0f 93       	push	r16
    1a96:	1f 93       	push	r17
    1a98:	cf 93       	push	r28
    1a9a:	df 93       	push	r29
    1a9c:	cd b7       	in	r28, 0x3d	; 61
    1a9e:	de b7       	in	r29, 0x3e	; 62
    1aa0:	29 97       	sbiw	r28, 0x09	; 9
    1aa2:	0f b6       	in	r0, 0x3f	; 63
    1aa4:	f8 94       	cli
    1aa6:	de bf       	out	0x3e, r29	; 62
    1aa8:	0f be       	out	0x3f, r0	; 63
    1aaa:	cd bf       	out	0x3d, r28	; 61
    1aac:	7c 01       	movw	r14, r24
    1aae:	5b 01       	movw	r10, r22
    1ab0:	2e 83       	std	Y+6, r18	; 0x06
    1ab2:	3f 83       	std	Y+7, r19	; 0x07
    1ab4:	48 87       	std	Y+8, r20	; 0x08
    1ab6:	59 87       	std	Y+9, r21	; 0x09
    1ab8:	10 e0       	ldi	r17, 0x00	; 0
    1aba:	99 24       	eor	r9, r9
    1abc:	93 94       	inc	r9
    1abe:	6c 01       	movw	r12, r24
    1ac0:	88 e0       	ldi	r24, 0x08	; 8
    1ac2:	c8 0e       	add	r12, r24
    1ac4:	d1 1c       	adc	r13, r1
    1ac6:	0f b6       	in	r0, 0x3f	; 63
    1ac8:	f8 94       	cli
    1aca:	0f 92       	push	r0
    1acc:	f7 01       	movw	r30, r14
    1ace:	96 8d       	ldd	r25, Z+30	; 0x1e
    1ad0:	87 8d       	ldd	r24, Z+31	; 0x1f
    1ad2:	98 17       	cp	r25, r24
    1ad4:	10 f0       	brcs	.+4      	; 0x1ada <xQueueGenericSend+0x54>
    1ad6:	02 30       	cpi	r16, 0x02	; 2
    1ad8:	b1 f4       	brne	.+44     	; 0x1b06 <xQueueGenericSend+0x80>
    1ada:	40 2f       	mov	r20, r16
    1adc:	b5 01       	movw	r22, r10
    1ade:	c7 01       	movw	r24, r14
    1ae0:	9b de       	rcall	.-714    	; 0x1818 <prvCopyDataToQueue>
    1ae2:	f7 01       	movw	r30, r14
    1ae4:	93 89       	ldd	r25, Z+19	; 0x13
    1ae6:	99 23       	and	r25, r25
    1ae8:	41 f0       	breq	.+16     	; 0x1afa <xQueueGenericSend+0x74>
    1aea:	c7 01       	movw	r24, r14
    1aec:	43 96       	adiw	r24, 0x13	; 19
    1aee:	0e 94 1d 16 	call	0x2c3a	; 0x2c3a <xTaskRemoveFromEventList>
    1af2:	88 23       	and	r24, r24
    1af4:	21 f0       	breq	.+8      	; 0x1afe <xQueueGenericSend+0x78>
    1af6:	bd dd       	rcall	.-1158   	; 0x1672 <vPortYield>
    1af8:	02 c0       	rjmp	.+4      	; 0x1afe <xQueueGenericSend+0x78>
    1afa:	81 11       	cpse	r24, r1
    1afc:	ba dd       	rcall	.-1164   	; 0x1672 <vPortYield>
    1afe:	0f 90       	pop	r0
    1b00:	0f be       	out	0x3f, r0	; 63
    1b02:	81 e0       	ldi	r24, 0x01	; 1
    1b04:	4e c0       	rjmp	.+156    	; 0x1ba2 <xQueueGenericSend+0x11c>
    1b06:	8e 81       	ldd	r24, Y+6	; 0x06
    1b08:	9f 81       	ldd	r25, Y+7	; 0x07
    1b0a:	a8 85       	ldd	r26, Y+8	; 0x08
    1b0c:	b9 85       	ldd	r27, Y+9	; 0x09
    1b0e:	89 2b       	or	r24, r25
    1b10:	8a 2b       	or	r24, r26
    1b12:	8b 2b       	or	r24, r27
    1b14:	21 f4       	brne	.+8      	; 0x1b1e <xQueueGenericSend+0x98>
    1b16:	0f 90       	pop	r0
    1b18:	0f be       	out	0x3f, r0	; 63
    1b1a:	80 e0       	ldi	r24, 0x00	; 0
    1b1c:	42 c0       	rjmp	.+132    	; 0x1ba2 <xQueueGenericSend+0x11c>
    1b1e:	11 11       	cpse	r17, r1
    1b20:	05 c0       	rjmp	.+10     	; 0x1b2c <xQueueGenericSend+0xa6>
    1b22:	ce 01       	movw	r24, r28
    1b24:	01 96       	adiw	r24, 0x01	; 1
    1b26:	0e 94 a9 16 	call	0x2d52	; 0x2d52 <vTaskInternalSetTimeOutState>
    1b2a:	19 2d       	mov	r17, r9
    1b2c:	0f 90       	pop	r0
    1b2e:	0f be       	out	0x3f, r0	; 63
    1b30:	2c d6       	rcall	.+3160   	; 0x278a <vTaskSuspendAll>
    1b32:	0f b6       	in	r0, 0x3f	; 63
    1b34:	f8 94       	cli
    1b36:	0f 92       	push	r0
    1b38:	f7 01       	movw	r30, r14
    1b3a:	81 a1       	ldd	r24, Z+33	; 0x21
    1b3c:	8f 3f       	cpi	r24, 0xFF	; 255
    1b3e:	09 f4       	brne	.+2      	; 0x1b42 <xQueueGenericSend+0xbc>
    1b40:	11 a2       	std	Z+33, r1	; 0x21
    1b42:	f7 01       	movw	r30, r14
    1b44:	82 a1       	ldd	r24, Z+34	; 0x22
    1b46:	8f 3f       	cpi	r24, 0xFF	; 255
    1b48:	09 f4       	brne	.+2      	; 0x1b4c <xQueueGenericSend+0xc6>
    1b4a:	12 a2       	std	Z+34, r1	; 0x22
    1b4c:	0f 90       	pop	r0
    1b4e:	0f be       	out	0x3f, r0	; 63
    1b50:	be 01       	movw	r22, r28
    1b52:	6a 5f       	subi	r22, 0xFA	; 250
    1b54:	7f 4f       	sbci	r23, 0xFF	; 255
    1b56:	ce 01       	movw	r24, r28
    1b58:	01 96       	adiw	r24, 0x01	; 1
    1b5a:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <xTaskCheckForTimeOut>
    1b5e:	81 11       	cpse	r24, r1
    1b60:	1c c0       	rjmp	.+56     	; 0x1b9a <xQueueGenericSend+0x114>
    1b62:	0f b6       	in	r0, 0x3f	; 63
    1b64:	f8 94       	cli
    1b66:	0f 92       	push	r0
    1b68:	f7 01       	movw	r30, r14
    1b6a:	96 8d       	ldd	r25, Z+30	; 0x1e
    1b6c:	87 8d       	ldd	r24, Z+31	; 0x1f
    1b6e:	0f 90       	pop	r0
    1b70:	0f be       	out	0x3f, r0	; 63
    1b72:	98 13       	cpse	r25, r24
    1b74:	0e c0       	rjmp	.+28     	; 0x1b92 <xQueueGenericSend+0x10c>
    1b76:	4e 81       	ldd	r20, Y+6	; 0x06
    1b78:	5f 81       	ldd	r21, Y+7	; 0x07
    1b7a:	68 85       	ldd	r22, Y+8	; 0x08
    1b7c:	79 85       	ldd	r23, Y+9	; 0x09
    1b7e:	c6 01       	movw	r24, r12
    1b80:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <vTaskPlaceOnEventList>
    1b84:	c7 01       	movw	r24, r14
    1b86:	c1 de       	rcall	.-638    	; 0x190a <prvUnlockQueue>
    1b88:	e9 d6       	rcall	.+3538   	; 0x295c <xTaskResumeAll>
    1b8a:	81 11       	cpse	r24, r1
    1b8c:	9c cf       	rjmp	.-200    	; 0x1ac6 <xQueueGenericSend+0x40>
    1b8e:	71 dd       	rcall	.-1310   	; 0x1672 <vPortYield>
    1b90:	9a cf       	rjmp	.-204    	; 0x1ac6 <xQueueGenericSend+0x40>
    1b92:	c7 01       	movw	r24, r14
    1b94:	ba de       	rcall	.-652    	; 0x190a <prvUnlockQueue>
    1b96:	e2 d6       	rcall	.+3524   	; 0x295c <xTaskResumeAll>
    1b98:	96 cf       	rjmp	.-212    	; 0x1ac6 <xQueueGenericSend+0x40>
    1b9a:	c7 01       	movw	r24, r14
    1b9c:	b6 de       	rcall	.-660    	; 0x190a <prvUnlockQueue>
    1b9e:	de d6       	rcall	.+3516   	; 0x295c <xTaskResumeAll>
    1ba0:	80 e0       	ldi	r24, 0x00	; 0
    1ba2:	29 96       	adiw	r28, 0x09	; 9
    1ba4:	0f b6       	in	r0, 0x3f	; 63
    1ba6:	f8 94       	cli
    1ba8:	de bf       	out	0x3e, r29	; 62
    1baa:	0f be       	out	0x3f, r0	; 63
    1bac:	cd bf       	out	0x3d, r28	; 61
    1bae:	df 91       	pop	r29
    1bb0:	cf 91       	pop	r28
    1bb2:	1f 91       	pop	r17
    1bb4:	0f 91       	pop	r16
    1bb6:	ff 90       	pop	r15
    1bb8:	ef 90       	pop	r14
    1bba:	df 90       	pop	r13
    1bbc:	cf 90       	pop	r12
    1bbe:	bf 90       	pop	r11
    1bc0:	af 90       	pop	r10
    1bc2:	9f 90       	pop	r9
    1bc4:	08 95       	ret

00001bc6 <xQueueCreateMutex>:
    1bc6:	0f 93       	push	r16
    1bc8:	cf 93       	push	r28
    1bca:	df 93       	push	r29
    1bcc:	48 2f       	mov	r20, r24
    1bce:	60 e0       	ldi	r22, 0x00	; 0
    1bd0:	81 e0       	ldi	r24, 0x01	; 1
    1bd2:	2b df       	rcall	.-426    	; 0x1a2a <xQueueGenericCreate>
    1bd4:	ec 01       	movw	r28, r24
    1bd6:	00 97       	sbiw	r24, 0x00	; 0
    1bd8:	61 f0       	breq	.+24     	; 0x1bf2 <xQueueCreateMutex+0x2c>
    1bda:	1d 82       	std	Y+5, r1	; 0x05
    1bdc:	1c 82       	std	Y+4, r1	; 0x04
    1bde:	19 82       	std	Y+1, r1	; 0x01
    1be0:	18 82       	st	Y, r1
    1be2:	1e 82       	std	Y+6, r1	; 0x06
    1be4:	00 e0       	ldi	r16, 0x00	; 0
    1be6:	20 e0       	ldi	r18, 0x00	; 0
    1be8:	30 e0       	ldi	r19, 0x00	; 0
    1bea:	a9 01       	movw	r20, r18
    1bec:	60 e0       	ldi	r22, 0x00	; 0
    1bee:	70 e0       	ldi	r23, 0x00	; 0
    1bf0:	4a df       	rcall	.-364    	; 0x1a86 <xQueueGenericSend>
    1bf2:	ce 01       	movw	r24, r28
    1bf4:	df 91       	pop	r29
    1bf6:	cf 91       	pop	r28
    1bf8:	0f 91       	pop	r16
    1bfa:	08 95       	ret

00001bfc <xQueueGenericSendFromISR>:
    1bfc:	ef 92       	push	r14
    1bfe:	ff 92       	push	r15
    1c00:	0f 93       	push	r16
    1c02:	1f 93       	push	r17
    1c04:	cf 93       	push	r28
    1c06:	df 93       	push	r29
    1c08:	8a 01       	movw	r16, r20
    1c0a:	fc 01       	movw	r30, r24
    1c0c:	56 8d       	ldd	r21, Z+30	; 0x1e
    1c0e:	37 8d       	ldd	r19, Z+31	; 0x1f
    1c10:	53 17       	cp	r21, r19
    1c12:	10 f0       	brcs	.+4      	; 0x1c18 <xQueueGenericSendFromISR+0x1c>
    1c14:	22 30       	cpi	r18, 0x02	; 2
    1c16:	e9 f4       	brne	.+58     	; 0x1c52 <xQueueGenericSendFromISR+0x56>
    1c18:	42 2f       	mov	r20, r18
    1c1a:	78 01       	movw	r14, r16
    1c1c:	ec 01       	movw	r28, r24
    1c1e:	1a a1       	ldd	r17, Y+34	; 0x22
    1c20:	fb dd       	rcall	.-1034   	; 0x1818 <prvCopyDataToQueue>
    1c22:	1f 3f       	cpi	r17, 0xFF	; 255
    1c24:	81 f4       	brne	.+32     	; 0x1c46 <xQueueGenericSendFromISR+0x4a>
    1c26:	8b 89       	ldd	r24, Y+19	; 0x13
    1c28:	88 23       	and	r24, r24
    1c2a:	a9 f0       	breq	.+42     	; 0x1c56 <xQueueGenericSendFromISR+0x5a>
    1c2c:	ce 01       	movw	r24, r28
    1c2e:	43 96       	adiw	r24, 0x13	; 19
    1c30:	0e 94 1d 16 	call	0x2c3a	; 0x2c3a <xTaskRemoveFromEventList>
    1c34:	88 23       	and	r24, r24
    1c36:	89 f0       	breq	.+34     	; 0x1c5a <xQueueGenericSendFromISR+0x5e>
    1c38:	e1 14       	cp	r14, r1
    1c3a:	f1 04       	cpc	r15, r1
    1c3c:	81 f0       	breq	.+32     	; 0x1c5e <xQueueGenericSendFromISR+0x62>
    1c3e:	81 e0       	ldi	r24, 0x01	; 1
    1c40:	f7 01       	movw	r30, r14
    1c42:	80 83       	st	Z, r24
    1c44:	0d c0       	rjmp	.+26     	; 0x1c60 <xQueueGenericSendFromISR+0x64>
    1c46:	ff 24       	eor	r15, r15
    1c48:	f3 94       	inc	r15
    1c4a:	f1 0e       	add	r15, r17
    1c4c:	fa a2       	std	Y+34, r15	; 0x22
    1c4e:	81 e0       	ldi	r24, 0x01	; 1
    1c50:	07 c0       	rjmp	.+14     	; 0x1c60 <xQueueGenericSendFromISR+0x64>
    1c52:	80 e0       	ldi	r24, 0x00	; 0
    1c54:	05 c0       	rjmp	.+10     	; 0x1c60 <xQueueGenericSendFromISR+0x64>
    1c56:	81 e0       	ldi	r24, 0x01	; 1
    1c58:	03 c0       	rjmp	.+6      	; 0x1c60 <xQueueGenericSendFromISR+0x64>
    1c5a:	81 e0       	ldi	r24, 0x01	; 1
    1c5c:	01 c0       	rjmp	.+2      	; 0x1c60 <xQueueGenericSendFromISR+0x64>
    1c5e:	81 e0       	ldi	r24, 0x01	; 1
    1c60:	df 91       	pop	r29
    1c62:	cf 91       	pop	r28
    1c64:	1f 91       	pop	r17
    1c66:	0f 91       	pop	r16
    1c68:	ff 90       	pop	r15
    1c6a:	ef 90       	pop	r14
    1c6c:	08 95       	ret

00001c6e <xQueueReceive>:
    1c6e:	9f 92       	push	r9
    1c70:	af 92       	push	r10
    1c72:	bf 92       	push	r11
    1c74:	cf 92       	push	r12
    1c76:	df 92       	push	r13
    1c78:	ef 92       	push	r14
    1c7a:	ff 92       	push	r15
    1c7c:	0f 93       	push	r16
    1c7e:	1f 93       	push	r17
    1c80:	cf 93       	push	r28
    1c82:	df 93       	push	r29
    1c84:	cd b7       	in	r28, 0x3d	; 61
    1c86:	de b7       	in	r29, 0x3e	; 62
    1c88:	29 97       	sbiw	r28, 0x09	; 9
    1c8a:	0f b6       	in	r0, 0x3f	; 63
    1c8c:	f8 94       	cli
    1c8e:	de bf       	out	0x3e, r29	; 62
    1c90:	0f be       	out	0x3f, r0	; 63
    1c92:	cd bf       	out	0x3d, r28	; 61
    1c94:	8c 01       	movw	r16, r24
    1c96:	5b 01       	movw	r10, r22
    1c98:	2e 83       	std	Y+6, r18	; 0x06
    1c9a:	3f 83       	std	Y+7, r19	; 0x07
    1c9c:	48 87       	std	Y+8, r20	; 0x08
    1c9e:	59 87       	std	Y+9, r21	; 0x09
    1ca0:	e1 2c       	mov	r14, r1
    1ca2:	99 24       	eor	r9, r9
    1ca4:	93 94       	inc	r9
    1ca6:	6c 01       	movw	r12, r24
    1ca8:	83 e1       	ldi	r24, 0x13	; 19
    1caa:	c8 0e       	add	r12, r24
    1cac:	d1 1c       	adc	r13, r1
    1cae:	0f b6       	in	r0, 0x3f	; 63
    1cb0:	f8 94       	cli
    1cb2:	0f 92       	push	r0
    1cb4:	f8 01       	movw	r30, r16
    1cb6:	f6 8c       	ldd	r15, Z+30	; 0x1e
    1cb8:	ff 20       	and	r15, r15
    1cba:	91 f0       	breq	.+36     	; 0x1ce0 <xQueueReceive+0x72>
    1cbc:	b5 01       	movw	r22, r10
    1cbe:	c8 01       	movw	r24, r16
    1cc0:	0a de       	rcall	.-1004   	; 0x18d6 <prvCopyDataFromQueue>
    1cc2:	fa 94       	dec	r15
    1cc4:	f8 01       	movw	r30, r16
    1cc6:	f6 8e       	std	Z+30, r15	; 0x1e
    1cc8:	80 85       	ldd	r24, Z+8	; 0x08
    1cca:	88 23       	and	r24, r24
    1ccc:	29 f0       	breq	.+10     	; 0x1cd8 <xQueueReceive+0x6a>
    1cce:	c8 01       	movw	r24, r16
    1cd0:	08 96       	adiw	r24, 0x08	; 8
    1cd2:	b3 d7       	rcall	.+3942   	; 0x2c3a <xTaskRemoveFromEventList>
    1cd4:	81 11       	cpse	r24, r1
    1cd6:	cd dc       	rcall	.-1638   	; 0x1672 <vPortYield>
    1cd8:	0f 90       	pop	r0
    1cda:	0f be       	out	0x3f, r0	; 63
    1cdc:	81 e0       	ldi	r24, 0x01	; 1
    1cde:	4c c0       	rjmp	.+152    	; 0x1d78 <xQueueReceive+0x10a>
    1ce0:	8e 81       	ldd	r24, Y+6	; 0x06
    1ce2:	9f 81       	ldd	r25, Y+7	; 0x07
    1ce4:	a8 85       	ldd	r26, Y+8	; 0x08
    1ce6:	b9 85       	ldd	r27, Y+9	; 0x09
    1ce8:	89 2b       	or	r24, r25
    1cea:	8a 2b       	or	r24, r26
    1cec:	8b 2b       	or	r24, r27
    1cee:	21 f4       	brne	.+8      	; 0x1cf8 <xQueueReceive+0x8a>
    1cf0:	0f 90       	pop	r0
    1cf2:	0f be       	out	0x3f, r0	; 63
    1cf4:	80 e0       	ldi	r24, 0x00	; 0
    1cf6:	40 c0       	rjmp	.+128    	; 0x1d78 <xQueueReceive+0x10a>
    1cf8:	e1 10       	cpse	r14, r1
    1cfa:	05 c0       	rjmp	.+10     	; 0x1d06 <xQueueReceive+0x98>
    1cfc:	ce 01       	movw	r24, r28
    1cfe:	01 96       	adiw	r24, 0x01	; 1
    1d00:	0e 94 a9 16 	call	0x2d52	; 0x2d52 <vTaskInternalSetTimeOutState>
    1d04:	e9 2c       	mov	r14, r9
    1d06:	0f 90       	pop	r0
    1d08:	0f be       	out	0x3f, r0	; 63
    1d0a:	3f d5       	rcall	.+2686   	; 0x278a <vTaskSuspendAll>
    1d0c:	0f b6       	in	r0, 0x3f	; 63
    1d0e:	f8 94       	cli
    1d10:	0f 92       	push	r0
    1d12:	f8 01       	movw	r30, r16
    1d14:	81 a1       	ldd	r24, Z+33	; 0x21
    1d16:	8f 3f       	cpi	r24, 0xFF	; 255
    1d18:	09 f4       	brne	.+2      	; 0x1d1c <xQueueReceive+0xae>
    1d1a:	11 a2       	std	Z+33, r1	; 0x21
    1d1c:	f8 01       	movw	r30, r16
    1d1e:	82 a1       	ldd	r24, Z+34	; 0x22
    1d20:	8f 3f       	cpi	r24, 0xFF	; 255
    1d22:	09 f4       	brne	.+2      	; 0x1d26 <xQueueReceive+0xb8>
    1d24:	12 a2       	std	Z+34, r1	; 0x22
    1d26:	0f 90       	pop	r0
    1d28:	0f be       	out	0x3f, r0	; 63
    1d2a:	be 01       	movw	r22, r28
    1d2c:	6a 5f       	subi	r22, 0xFA	; 250
    1d2e:	7f 4f       	sbci	r23, 0xFF	; 255
    1d30:	ce 01       	movw	r24, r28
    1d32:	01 96       	adiw	r24, 0x01	; 1
    1d34:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <xTaskCheckForTimeOut>
    1d38:	81 11       	cpse	r24, r1
    1d3a:	15 c0       	rjmp	.+42     	; 0x1d66 <xQueueReceive+0xf8>
    1d3c:	c8 01       	movw	r24, r16
    1d3e:	61 dd       	rcall	.-1342   	; 0x1802 <prvIsQueueEmpty>
    1d40:	88 23       	and	r24, r24
    1d42:	69 f0       	breq	.+26     	; 0x1d5e <xQueueReceive+0xf0>
    1d44:	4e 81       	ldd	r20, Y+6	; 0x06
    1d46:	5f 81       	ldd	r21, Y+7	; 0x07
    1d48:	68 85       	ldd	r22, Y+8	; 0x08
    1d4a:	79 85       	ldd	r23, Y+9	; 0x09
    1d4c:	c6 01       	movw	r24, r12
    1d4e:	1a d7       	rcall	.+3636   	; 0x2b84 <vTaskPlaceOnEventList>
    1d50:	c8 01       	movw	r24, r16
    1d52:	db dd       	rcall	.-1098   	; 0x190a <prvUnlockQueue>
    1d54:	03 d6       	rcall	.+3078   	; 0x295c <xTaskResumeAll>
    1d56:	81 11       	cpse	r24, r1
    1d58:	aa cf       	rjmp	.-172    	; 0x1cae <xQueueReceive+0x40>
    1d5a:	8b dc       	rcall	.-1770   	; 0x1672 <vPortYield>
    1d5c:	a8 cf       	rjmp	.-176    	; 0x1cae <xQueueReceive+0x40>
    1d5e:	c8 01       	movw	r24, r16
    1d60:	d4 dd       	rcall	.-1112   	; 0x190a <prvUnlockQueue>
    1d62:	fc d5       	rcall	.+3064   	; 0x295c <xTaskResumeAll>
    1d64:	a4 cf       	rjmp	.-184    	; 0x1cae <xQueueReceive+0x40>
    1d66:	c8 01       	movw	r24, r16
    1d68:	d0 dd       	rcall	.-1120   	; 0x190a <prvUnlockQueue>
    1d6a:	f8 d5       	rcall	.+3056   	; 0x295c <xTaskResumeAll>
    1d6c:	c8 01       	movw	r24, r16
    1d6e:	49 dd       	rcall	.-1390   	; 0x1802 <prvIsQueueEmpty>
    1d70:	88 23       	and	r24, r24
    1d72:	09 f4       	brne	.+2      	; 0x1d76 <xQueueReceive+0x108>
    1d74:	9c cf       	rjmp	.-200    	; 0x1cae <xQueueReceive+0x40>
    1d76:	80 e0       	ldi	r24, 0x00	; 0
    1d78:	29 96       	adiw	r28, 0x09	; 9
    1d7a:	0f b6       	in	r0, 0x3f	; 63
    1d7c:	f8 94       	cli
    1d7e:	de bf       	out	0x3e, r29	; 62
    1d80:	0f be       	out	0x3f, r0	; 63
    1d82:	cd bf       	out	0x3d, r28	; 61
    1d84:	df 91       	pop	r29
    1d86:	cf 91       	pop	r28
    1d88:	1f 91       	pop	r17
    1d8a:	0f 91       	pop	r16
    1d8c:	ff 90       	pop	r15
    1d8e:	ef 90       	pop	r14
    1d90:	df 90       	pop	r13
    1d92:	cf 90       	pop	r12
    1d94:	bf 90       	pop	r11
    1d96:	af 90       	pop	r10
    1d98:	9f 90       	pop	r9
    1d9a:	08 95       	ret

00001d9c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
    {
    1d9c:	cf 93       	push	r28
    1d9e:	df 93       	push	r29
    1da0:	ec 01       	movw	r28, r24
        will not actually cause the task to block, just place it on a blocked
        list.  It will not block until the scheduler is unlocked - at which
        time a yield will be performed.  If an item is added to the queue while
        the queue is locked, and the calling task blocks on the queue, then the
        calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    1da2:	0f b6       	in	r0, 0x3f	; 63
    1da4:	f8 94       	cli
    1da6:	0f 92       	push	r0
    1da8:	89 a1       	ldd	r24, Y+33	; 0x21
    1daa:	8f 3f       	cpi	r24, 0xFF	; 255
    1dac:	09 f4       	brne	.+2      	; 0x1db0 <vQueueWaitForMessageRestricted+0x14>
    1dae:	19 a2       	std	Y+33, r1	; 0x21
    1db0:	8a a1       	ldd	r24, Y+34	; 0x22
    1db2:	8f 3f       	cpi	r24, 0xFF	; 255
    1db4:	09 f4       	brne	.+2      	; 0x1db8 <vQueueWaitForMessageRestricted+0x1c>
    1db6:	1a a2       	std	Y+34, r1	; 0x22
    1db8:	0f 90       	pop	r0
    1dba:	0f be       	out	0x3f, r0	; 63
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    1dbc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1dbe:	81 11       	cpse	r24, r1
    1dc0:	03 c0       	rjmp	.+6      	; 0x1dc8 <vQueueWaitForMessageRestricted+0x2c>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    1dc2:	ce 01       	movw	r24, r28
    1dc4:	43 96       	adiw	r24, 0x13	; 19
    1dc6:	19 d7       	rcall	.+3634   	; 0x2bfa <vTaskPlaceOnEventListRestricted>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
        prvUnlockQueue( pxQueue );
    1dc8:	ce 01       	movw	r24, r28
    1dca:	9f dd       	rcall	.-1218   	; 0x190a <prvUnlockQueue>
    }
    1dcc:	df 91       	pop	r29
    1dce:	cf 91       	pop	r28
    1dd0:	08 95       	ret

00001dd2 <prvBytesInBuffer>:

    configASSERT( pxStreamBuffer );

    xReturn = prvBytesInBuffer( pxStreamBuffer );
    return xReturn;
}
    1dd2:	fc 01       	movw	r30, r24
    1dd4:	44 81       	ldd	r20, Z+4	; 0x04
    1dd6:	55 81       	ldd	r21, Z+5	; 0x05
    1dd8:	22 81       	ldd	r18, Z+2	; 0x02
    1dda:	33 81       	ldd	r19, Z+3	; 0x03
    1ddc:	24 0f       	add	r18, r20
    1dde:	35 1f       	adc	r19, r21
    1de0:	80 81       	ld	r24, Z
    1de2:	91 81       	ldd	r25, Z+1	; 0x01
    1de4:	b9 01       	movw	r22, r18
    1de6:	68 1b       	sub	r22, r24
    1de8:	79 0b       	sbc	r23, r25
    1dea:	cb 01       	movw	r24, r22
    1dec:	64 17       	cp	r22, r20
    1dee:	75 07       	cpc	r23, r21
    1df0:	10 f0       	brcs	.+4      	; 0x1df6 <prvBytesInBuffer+0x24>
    1df2:	84 1b       	sub	r24, r20
    1df4:	95 0b       	sbc	r25, r21
    1df6:	08 95       	ret

00001df8 <prvWriteBytesToBuffer>:
    1df8:	af 92       	push	r10
    1dfa:	bf 92       	push	r11
    1dfc:	cf 92       	push	r12
    1dfe:	df 92       	push	r13
    1e00:	ef 92       	push	r14
    1e02:	ff 92       	push	r15
    1e04:	0f 93       	push	r16
    1e06:	1f 93       	push	r17
    1e08:	cf 93       	push	r28
    1e0a:	df 93       	push	r29
    1e0c:	6c 01       	movw	r12, r24
    1e0e:	5b 01       	movw	r10, r22
    1e10:	7a 01       	movw	r14, r20
    1e12:	fc 01       	movw	r30, r24
    1e14:	c2 81       	ldd	r28, Z+2	; 0x02
    1e16:	d3 81       	ldd	r29, Z+3	; 0x03
    1e18:	04 81       	ldd	r16, Z+4	; 0x04
    1e1a:	15 81       	ldd	r17, Z+5	; 0x05
    1e1c:	0c 1b       	sub	r16, r28
    1e1e:	1d 0b       	sbc	r17, r29
    1e20:	40 17       	cp	r20, r16
    1e22:	51 07       	cpc	r21, r17
    1e24:	08 f4       	brcc	.+2      	; 0x1e28 <prvWriteBytesToBuffer+0x30>
    1e26:	8a 01       	movw	r16, r20
    1e28:	f6 01       	movw	r30, r12
    1e2a:	84 85       	ldd	r24, Z+12	; 0x0c
    1e2c:	95 85       	ldd	r25, Z+13	; 0x0d
    1e2e:	a8 01       	movw	r20, r16
    1e30:	b5 01       	movw	r22, r10
    1e32:	8c 0f       	add	r24, r28
    1e34:	9d 1f       	adc	r25, r29
    1e36:	0e 94 50 2b 	call	0x56a0	; 0x56a0 <memcpy>
    1e3a:	0e 15       	cp	r16, r14
    1e3c:	1f 05       	cpc	r17, r15
    1e3e:	58 f4       	brcc	.+22     	; 0x1e56 <prvWriteBytesToBuffer+0x5e>
    1e40:	a7 01       	movw	r20, r14
    1e42:	40 1b       	sub	r20, r16
    1e44:	51 0b       	sbc	r21, r17
    1e46:	b5 01       	movw	r22, r10
    1e48:	60 0f       	add	r22, r16
    1e4a:	71 1f       	adc	r23, r17
    1e4c:	f6 01       	movw	r30, r12
    1e4e:	84 85       	ldd	r24, Z+12	; 0x0c
    1e50:	95 85       	ldd	r25, Z+13	; 0x0d
    1e52:	0e 94 50 2b 	call	0x56a0	; 0x56a0 <memcpy>
    1e56:	ce 01       	movw	r24, r28
    1e58:	8e 0d       	add	r24, r14
    1e5a:	9f 1d       	adc	r25, r15
    1e5c:	f6 01       	movw	r30, r12
    1e5e:	24 81       	ldd	r18, Z+4	; 0x04
    1e60:	35 81       	ldd	r19, Z+5	; 0x05
    1e62:	82 17       	cp	r24, r18
    1e64:	93 07       	cpc	r25, r19
    1e66:	10 f0       	brcs	.+4      	; 0x1e6c <prvWriteBytesToBuffer+0x74>
    1e68:	82 1b       	sub	r24, r18
    1e6a:	93 0b       	sbc	r25, r19
    1e6c:	f6 01       	movw	r30, r12
    1e6e:	93 83       	std	Z+3, r25	; 0x03
    1e70:	82 83       	std	Z+2, r24	; 0x02
    1e72:	c7 01       	movw	r24, r14
    1e74:	df 91       	pop	r29
    1e76:	cf 91       	pop	r28
    1e78:	1f 91       	pop	r17
    1e7a:	0f 91       	pop	r16
    1e7c:	ff 90       	pop	r15
    1e7e:	ef 90       	pop	r14
    1e80:	df 90       	pop	r13
    1e82:	cf 90       	pop	r12
    1e84:	bf 90       	pop	r11
    1e86:	af 90       	pop	r10
    1e88:	08 95       	ret

00001e8a <prvWriteMessageToBuffer>:
    1e8a:	cf 92       	push	r12
    1e8c:	df 92       	push	r13
    1e8e:	ef 92       	push	r14
    1e90:	ff 92       	push	r15
    1e92:	0f 93       	push	r16
    1e94:	1f 93       	push	r17
    1e96:	cf 93       	push	r28
    1e98:	df 93       	push	r29
    1e9a:	1f 92       	push	r1
    1e9c:	1f 92       	push	r1
    1e9e:	cd b7       	in	r28, 0x3d	; 61
    1ea0:	de b7       	in	r29, 0x3e	; 62
    1ea2:	5a 83       	std	Y+2, r21	; 0x02
    1ea4:	49 83       	std	Y+1, r20	; 0x01
    1ea6:	21 15       	cp	r18, r1
    1ea8:	31 05       	cpc	r19, r1
    1eaa:	c9 f0       	breq	.+50     	; 0x1ede <prvWriteMessageToBuffer+0x54>
    1eac:	6b 01       	movw	r12, r22
    1eae:	7c 01       	movw	r14, r24
    1eb0:	fc 01       	movw	r30, r24
    1eb2:	86 85       	ldd	r24, Z+14	; 0x0e
    1eb4:	80 fd       	sbrc	r24, 0
    1eb6:	08 c0       	rjmp	.+16     	; 0x1ec8 <prvWriteMessageToBuffer+0x3e>
    1eb8:	ca 01       	movw	r24, r20
    1eba:	24 17       	cp	r18, r20
    1ebc:	35 07       	cpc	r19, r21
    1ebe:	08 f4       	brcc	.+2      	; 0x1ec2 <prvWriteMessageToBuffer+0x38>
    1ec0:	c9 01       	movw	r24, r18
    1ec2:	9a 83       	std	Y+2, r25	; 0x02
    1ec4:	89 83       	std	Y+1, r24	; 0x01
    1ec6:	11 c0       	rjmp	.+34     	; 0x1eea <prvWriteMessageToBuffer+0x60>
    1ec8:	20 17       	cp	r18, r16
    1eca:	31 07       	cpc	r19, r17
    1ecc:	58 f0       	brcs	.+22     	; 0x1ee4 <prvWriteMessageToBuffer+0x5a>
    1ece:	42 e0       	ldi	r20, 0x02	; 2
    1ed0:	50 e0       	ldi	r21, 0x00	; 0
    1ed2:	be 01       	movw	r22, r28
    1ed4:	6f 5f       	subi	r22, 0xFF	; 255
    1ed6:	7f 4f       	sbci	r23, 0xFF	; 255
    1ed8:	c7 01       	movw	r24, r14
    1eda:	8e df       	rcall	.-228    	; 0x1df8 <prvWriteBytesToBuffer>
    1edc:	06 c0       	rjmp	.+12     	; 0x1eea <prvWriteMessageToBuffer+0x60>
    1ede:	80 e0       	ldi	r24, 0x00	; 0
    1ee0:	90 e0       	ldi	r25, 0x00	; 0
    1ee2:	08 c0       	rjmp	.+16     	; 0x1ef4 <prvWriteMessageToBuffer+0x6a>
    1ee4:	80 e0       	ldi	r24, 0x00	; 0
    1ee6:	90 e0       	ldi	r25, 0x00	; 0
    1ee8:	05 c0       	rjmp	.+10     	; 0x1ef4 <prvWriteMessageToBuffer+0x6a>
    1eea:	49 81       	ldd	r20, Y+1	; 0x01
    1eec:	5a 81       	ldd	r21, Y+2	; 0x02
    1eee:	b6 01       	movw	r22, r12
    1ef0:	c7 01       	movw	r24, r14
    1ef2:	82 df       	rcall	.-252    	; 0x1df8 <prvWriteBytesToBuffer>
    1ef4:	0f 90       	pop	r0
    1ef6:	0f 90       	pop	r0
    1ef8:	df 91       	pop	r29
    1efa:	cf 91       	pop	r28
    1efc:	1f 91       	pop	r17
    1efe:	0f 91       	pop	r16
    1f00:	ff 90       	pop	r15
    1f02:	ef 90       	pop	r14
    1f04:	df 90       	pop	r13
    1f06:	cf 90       	pop	r12
    1f08:	08 95       	ret

00001f0a <prvReadBytesFromBuffer>:
    1f0a:	af 92       	push	r10
    1f0c:	bf 92       	push	r11
    1f0e:	cf 92       	push	r12
    1f10:	df 92       	push	r13
    1f12:	ef 92       	push	r14
    1f14:	ff 92       	push	r15
    1f16:	0f 93       	push	r16
    1f18:	1f 93       	push	r17
    1f1a:	cf 93       	push	r28
    1f1c:	df 93       	push	r29
    1f1e:	7c 01       	movw	r14, r24
    1f20:	5b 01       	movw	r10, r22
    1f22:	e9 01       	movw	r28, r18
    1f24:	42 17       	cp	r20, r18
    1f26:	53 07       	cpc	r21, r19
    1f28:	08 f4       	brcc	.+2      	; 0x1f2c <prvReadBytesFromBuffer+0x22>
    1f2a:	ea 01       	movw	r28, r20
    1f2c:	20 97       	sbiw	r28, 0x00	; 0
    1f2e:	79 f1       	breq	.+94     	; 0x1f8e <prvReadBytesFromBuffer+0x84>
    1f30:	f7 01       	movw	r30, r14
    1f32:	00 81       	ld	r16, Z
    1f34:	11 81       	ldd	r17, Z+1	; 0x01
    1f36:	c4 80       	ldd	r12, Z+4	; 0x04
    1f38:	d5 80       	ldd	r13, Z+5	; 0x05
    1f3a:	c0 1a       	sub	r12, r16
    1f3c:	d1 0a       	sbc	r13, r17
    1f3e:	cc 15       	cp	r28, r12
    1f40:	dd 05       	cpc	r29, r13
    1f42:	08 f4       	brcc	.+2      	; 0x1f46 <prvReadBytesFromBuffer+0x3c>
    1f44:	6e 01       	movw	r12, r28
    1f46:	f7 01       	movw	r30, r14
    1f48:	64 85       	ldd	r22, Z+12	; 0x0c
    1f4a:	75 85       	ldd	r23, Z+13	; 0x0d
    1f4c:	60 0f       	add	r22, r16
    1f4e:	71 1f       	adc	r23, r17
    1f50:	a6 01       	movw	r20, r12
    1f52:	c5 01       	movw	r24, r10
    1f54:	0e 94 50 2b 	call	0x56a0	; 0x56a0 <memcpy>
    1f58:	cc 16       	cp	r12, r28
    1f5a:	dd 06       	cpc	r13, r29
    1f5c:	58 f4       	brcc	.+22     	; 0x1f74 <prvReadBytesFromBuffer+0x6a>
    1f5e:	ae 01       	movw	r20, r28
    1f60:	4c 19       	sub	r20, r12
    1f62:	5d 09       	sbc	r21, r13
    1f64:	f7 01       	movw	r30, r14
    1f66:	64 85       	ldd	r22, Z+12	; 0x0c
    1f68:	75 85       	ldd	r23, Z+13	; 0x0d
    1f6a:	c5 01       	movw	r24, r10
    1f6c:	8c 0d       	add	r24, r12
    1f6e:	9d 1d       	adc	r25, r13
    1f70:	0e 94 50 2b 	call	0x56a0	; 0x56a0 <memcpy>
    1f74:	0c 0f       	add	r16, r28
    1f76:	1d 1f       	adc	r17, r29
    1f78:	f7 01       	movw	r30, r14
    1f7a:	84 81       	ldd	r24, Z+4	; 0x04
    1f7c:	95 81       	ldd	r25, Z+5	; 0x05
    1f7e:	08 17       	cp	r16, r24
    1f80:	19 07       	cpc	r17, r25
    1f82:	10 f0       	brcs	.+4      	; 0x1f88 <prvReadBytesFromBuffer+0x7e>
    1f84:	08 1b       	sub	r16, r24
    1f86:	19 0b       	sbc	r17, r25
    1f88:	f7 01       	movw	r30, r14
    1f8a:	11 83       	std	Z+1, r17	; 0x01
    1f8c:	00 83       	st	Z, r16
    1f8e:	ce 01       	movw	r24, r28
    1f90:	df 91       	pop	r29
    1f92:	cf 91       	pop	r28
    1f94:	1f 91       	pop	r17
    1f96:	0f 91       	pop	r16
    1f98:	ff 90       	pop	r15
    1f9a:	ef 90       	pop	r14
    1f9c:	df 90       	pop	r13
    1f9e:	cf 90       	pop	r12
    1fa0:	bf 90       	pop	r11
    1fa2:	af 90       	pop	r10
    1fa4:	08 95       	ret

00001fa6 <xStreamBufferGenericCreate>:
    1fa6:	ef 92       	push	r14
    1fa8:	ff 92       	push	r15
    1faa:	1f 93       	push	r17
    1fac:	cf 93       	push	r28
    1fae:	df 93       	push	r29
    1fb0:	eb 01       	movw	r28, r22
    1fb2:	11 e0       	ldi	r17, 0x01	; 1
    1fb4:	41 30       	cpi	r20, 0x01	; 1
    1fb6:	09 f0       	breq	.+2      	; 0x1fba <xStreamBufferGenericCreate+0x14>
    1fb8:	10 e0       	ldi	r17, 0x00	; 0
    1fba:	20 97       	sbiw	r28, 0x00	; 0
    1fbc:	11 f4       	brne	.+4      	; 0x1fc2 <xStreamBufferGenericCreate+0x1c>
    1fbe:	c1 e0       	ldi	r28, 0x01	; 1
    1fc0:	d0 e0       	ldi	r29, 0x00	; 0
    1fc2:	7c 01       	movw	r14, r24
    1fc4:	2f ef       	ldi	r18, 0xFF	; 255
    1fc6:	e2 1a       	sub	r14, r18
    1fc8:	f2 0a       	sbc	r15, r18
    1fca:	41 96       	adiw	r24, 0x11	; 17
    1fcc:	20 d9       	rcall	.-3520   	; 0x120e <pvPortMalloc>
    1fce:	00 97       	sbiw	r24, 0x00	; 0
    1fd0:	81 f0       	breq	.+32     	; 0x1ff2 <xStreamBufferGenericCreate+0x4c>
    1fd2:	20 e1       	ldi	r18, 0x10	; 16
    1fd4:	fc 01       	movw	r30, r24
    1fd6:	11 92       	st	Z+, r1
    1fd8:	2a 95       	dec	r18
    1fda:	e9 f7       	brne	.-6      	; 0x1fd6 <xStreamBufferGenericCreate+0x30>
    1fdc:	9c 01       	movw	r18, r24
    1fde:	20 5f       	subi	r18, 0xF0	; 240
    1fe0:	3f 4f       	sbci	r19, 0xFF	; 255
    1fe2:	fc 01       	movw	r30, r24
    1fe4:	35 87       	std	Z+13, r19	; 0x0d
    1fe6:	24 87       	std	Z+12, r18	; 0x0c
    1fe8:	f5 82       	std	Z+5, r15	; 0x05
    1fea:	e4 82       	std	Z+4, r14	; 0x04
    1fec:	d7 83       	std	Z+7, r29	; 0x07
    1fee:	c6 83       	std	Z+6, r28	; 0x06
    1ff0:	16 87       	std	Z+14, r17	; 0x0e
    1ff2:	df 91       	pop	r29
    1ff4:	cf 91       	pop	r28
    1ff6:	1f 91       	pop	r17
    1ff8:	ff 90       	pop	r15
    1ffa:	ef 90       	pop	r14
    1ffc:	08 95       	ret

00001ffe <xStreamBufferReset>:
    1ffe:	cf 93       	push	r28
    2000:	df 93       	push	r29
    2002:	fc 01       	movw	r30, r24
    2004:	27 85       	ldd	r18, Z+15	; 0x0f
    2006:	0f b6       	in	r0, 0x3f	; 63
    2008:	f8 94       	cli
    200a:	0f 92       	push	r0
    200c:	80 85       	ldd	r24, Z+8	; 0x08
    200e:	91 85       	ldd	r25, Z+9	; 0x09
    2010:	89 2b       	or	r24, r25
    2012:	d1 f4       	brne	.+52     	; 0x2048 <xStreamBufferReset+0x4a>
    2014:	82 85       	ldd	r24, Z+10	; 0x0a
    2016:	93 85       	ldd	r25, Z+11	; 0x0b
    2018:	89 2b       	or	r24, r25
    201a:	c1 f4       	brne	.+48     	; 0x204c <xStreamBufferReset+0x4e>
    201c:	86 85       	ldd	r24, Z+14	; 0x0e
    201e:	46 81       	ldd	r20, Z+6	; 0x06
    2020:	57 81       	ldd	r21, Z+7	; 0x07
    2022:	64 81       	ldd	r22, Z+4	; 0x04
    2024:	75 81       	ldd	r23, Z+5	; 0x05
    2026:	a4 85       	ldd	r26, Z+12	; 0x0c
    2028:	b5 85       	ldd	r27, Z+13	; 0x0d
    202a:	90 e1       	ldi	r25, 0x10	; 16
    202c:	ef 01       	movw	r28, r30
    202e:	19 92       	st	Y+, r1
    2030:	9a 95       	dec	r25
    2032:	e9 f7       	brne	.-6      	; 0x202e <xStreamBufferReset+0x30>
    2034:	b5 87       	std	Z+13, r27	; 0x0d
    2036:	a4 87       	std	Z+12, r26	; 0x0c
    2038:	75 83       	std	Z+5, r23	; 0x05
    203a:	64 83       	std	Z+4, r22	; 0x04
    203c:	57 83       	std	Z+7, r21	; 0x07
    203e:	46 83       	std	Z+6, r20	; 0x06
    2040:	86 87       	std	Z+14, r24	; 0x0e
    2042:	27 87       	std	Z+15, r18	; 0x0f
    2044:	81 e0       	ldi	r24, 0x01	; 1
    2046:	03 c0       	rjmp	.+6      	; 0x204e <xStreamBufferReset+0x50>
    2048:	80 e0       	ldi	r24, 0x00	; 0
    204a:	01 c0       	rjmp	.+2      	; 0x204e <xStreamBufferReset+0x50>
    204c:	80 e0       	ldi	r24, 0x00	; 0
    204e:	0f 90       	pop	r0
    2050:	0f be       	out	0x3f, r0	; 63
    2052:	df 91       	pop	r29
    2054:	cf 91       	pop	r28
    2056:	08 95       	ret

00002058 <xStreamBufferSpacesAvailable>:
    2058:	fc 01       	movw	r30, r24
    205a:	24 81       	ldd	r18, Z+4	; 0x04
    205c:	35 81       	ldd	r19, Z+5	; 0x05
    205e:	80 81       	ld	r24, Z
    2060:	91 81       	ldd	r25, Z+1	; 0x01
    2062:	42 81       	ldd	r20, Z+2	; 0x02
    2064:	53 81       	ldd	r21, Z+3	; 0x03
    2066:	82 0f       	add	r24, r18
    2068:	93 1f       	adc	r25, r19
    206a:	01 97       	sbiw	r24, 0x01	; 1
    206c:	84 1b       	sub	r24, r20
    206e:	95 0b       	sbc	r25, r21
    2070:	82 17       	cp	r24, r18
    2072:	93 07       	cpc	r25, r19
    2074:	10 f0       	brcs	.+4      	; 0x207a <xStreamBufferSpacesAvailable+0x22>
    2076:	82 1b       	sub	r24, r18
    2078:	93 0b       	sbc	r25, r19
    207a:	08 95       	ret

0000207c <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void *pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    207c:	2f 92       	push	r2
    207e:	3f 92       	push	r3
    2080:	4f 92       	push	r4
    2082:	5f 92       	push	r5
    2084:	6f 92       	push	r6
    2086:	7f 92       	push	r7
    2088:	8f 92       	push	r8
    208a:	9f 92       	push	r9
    208c:	af 92       	push	r10
    208e:	bf 92       	push	r11
    2090:	cf 92       	push	r12
    2092:	df 92       	push	r13
    2094:	ef 92       	push	r14
    2096:	ff 92       	push	r15
    2098:	0f 93       	push	r16
    209a:	1f 93       	push	r17
    209c:	cf 93       	push	r28
    209e:	df 93       	push	r29
    20a0:	cd b7       	in	r28, 0x3d	; 61
    20a2:	de b7       	in	r29, 0x3e	; 62
    20a4:	29 97       	sbiw	r28, 0x09	; 9
    20a6:	0f b6       	in	r0, 0x3f	; 63
    20a8:	f8 94       	cli
    20aa:	de bf       	out	0x3e, r29	; 62
    20ac:	0f be       	out	0x3f, r0	; 63
    20ae:	cd bf       	out	0x3d, r28	; 61
    20b0:	5c 01       	movw	r10, r24
    20b2:	1b 01       	movw	r2, r22
    20b4:	2a 01       	movw	r4, r20
    20b6:	0e 83       	std	Y+6, r16	; 0x06
    20b8:	1f 83       	std	Y+7, r17	; 0x07
    20ba:	28 87       	std	Y+8, r18	; 0x08
    20bc:	39 87       	std	Y+9, r19	; 0x09

    /* This send function is used to write to both message buffers and stream
    buffers.  If this is a message buffer then the space needed must be
    increased by the amount of bytes needed to store the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    20be:	fc 01       	movw	r30, r24
    20c0:	86 85       	ldd	r24, Z+14	; 0x0e
    20c2:	80 ff       	sbrs	r24, 0
    20c4:	05 c0       	rjmp	.+10     	; 0x20d0 <xStreamBufferSend+0x54>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    20c6:	3a 01       	movw	r6, r20
    20c8:	f2 e0       	ldi	r31, 0x02	; 2
    20ca:	6f 0e       	add	r6, r31
    20cc:	71 1c       	adc	r7, r1
    20ce:	01 c0       	rjmp	.+2      	; 0x20d2 <xStreamBufferSend+0x56>
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReturn, xSpace = 0;
size_t xRequiredSpace = xDataLengthBytes;
    20d0:	3a 01       	movw	r6, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    20d2:	8e 81       	ldd	r24, Y+6	; 0x06
    20d4:	9f 81       	ldd	r25, Y+7	; 0x07
    20d6:	a8 85       	ldd	r26, Y+8	; 0x08
    20d8:	b9 85       	ldd	r27, Y+9	; 0x09
    20da:	89 2b       	or	r24, r25
    20dc:	8a 2b       	or	r24, r26
    20de:	8b 2b       	or	r24, r27
    20e0:	09 f4       	brne	.+2      	; 0x20e4 <xStreamBufferSend+0x68>
    20e2:	34 c0       	rjmp	.+104    	; 0x214c <xStreamBufferSend+0xd0>
    {
        vTaskSetTimeOutState( &xTimeOut );
    20e4:	ce 01       	movw	r24, r28
    20e6:	01 96       	adiw	r24, 0x01	; 1
    20e8:	1e d6       	rcall	.+3132   	; 0x2d26 <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
            buffer. */
            taskENTER_CRITICAL();
    20ea:	0f b6       	in	r0, 0x3f	; 63
    20ec:	f8 94       	cli
    20ee:	0f 92       	push	r0
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    20f0:	c5 01       	movw	r24, r10
    20f2:	b2 df       	rcall	.-156    	; 0x2058 <xStreamBufferSpacesAvailable>
    20f4:	4c 01       	movw	r8, r24

                if( xSpace < xRequiredSpace )
    20f6:	86 15       	cp	r24, r6
    20f8:	97 05       	cpc	r25, r7
    20fa:	18 f5       	brcc	.+70     	; 0x2142 <xStreamBufferSend+0xc6>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClear( NULL );
    20fc:	80 e0       	ldi	r24, 0x00	; 0
    20fe:	90 e0       	ldi	r25, 0x00	; 0
    2100:	0e 94 19 19 	call	0x3232	; 0x3232 <xTaskNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    2104:	90 d6       	rcall	.+3360   	; 0x2e26 <xTaskGetCurrentTaskHandle>
    2106:	f5 01       	movw	r30, r10
    2108:	93 87       	std	Z+11, r25	; 0x0b
    210a:	82 87       	std	Z+10, r24	; 0x0a
                {
                    taskEXIT_CRITICAL();
                    break;
                }
            }
            taskEXIT_CRITICAL();
    210c:	0f 90       	pop	r0
    210e:	0f be       	out	0x3f, r0	; 63

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    2110:	ce 80       	ldd	r12, Y+6	; 0x06
    2112:	df 80       	ldd	r13, Y+7	; 0x07
    2114:	e8 84       	ldd	r14, Y+8	; 0x08
    2116:	f9 84       	ldd	r15, Y+9	; 0x09
    2118:	00 e0       	ldi	r16, 0x00	; 0
    211a:	10 e0       	ldi	r17, 0x00	; 0
    211c:	20 e0       	ldi	r18, 0x00	; 0
    211e:	30 e0       	ldi	r19, 0x00	; 0
    2120:	a9 01       	movw	r20, r18
    2122:	60 e0       	ldi	r22, 0x00	; 0
    2124:	70 e0       	ldi	r23, 0x00	; 0
    2126:	cb 01       	movw	r24, r22
    2128:	f9 d6       	rcall	.+3570   	; 0x2f1c <xTaskNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
    212a:	f5 01       	movw	r30, r10
    212c:	13 86       	std	Z+11, r1	; 0x0b
    212e:	12 86       	std	Z+10, r1	; 0x0a

        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    2130:	be 01       	movw	r22, r28
    2132:	6a 5f       	subi	r22, 0xFA	; 250
    2134:	7f 4f       	sbci	r23, 0xFF	; 255
    2136:	ce 01       	movw	r24, r28
    2138:	01 96       	adiw	r24, 0x01	; 1
    213a:	1c d6       	rcall	.+3128   	; 0x2d74 <xTaskCheckForTimeOut>
    213c:	88 23       	and	r24, r24
    213e:	a9 f2       	breq	.-86     	; 0x20ea <xStreamBufferSend+0x6e>
    2140:	02 c0       	rjmp	.+4      	; 0x2146 <xStreamBufferSend+0xca>
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
                }
                else
                {
                    taskEXIT_CRITICAL();
    2142:	0f 90       	pop	r0
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
    2144:	0f be       	out	0x3f, r0	; 63
    2146:	81 14       	cp	r8, r1
    2148:	91 04       	cpc	r9, r1
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    214a:	19 f4       	brne	.+6      	; 0x2152 <xStreamBufferSend+0xd6>
    214c:	c5 01       	movw	r24, r10
    214e:	84 df       	rcall	.-248    	; 0x2058 <xStreamBufferSpacesAvailable>
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    2150:	4c 01       	movw	r8, r24
    2152:	83 01       	movw	r16, r6
    2154:	94 01       	movw	r18, r8
    2156:	a2 01       	movw	r20, r4
    2158:	b1 01       	movw	r22, r2
    215a:	c5 01       	movw	r24, r10
    215c:	96 de       	rcall	.-724    	; 0x1e8a <prvWriteMessageToBuffer>

    if( xReturn > ( size_t ) 0 )
    215e:	7c 01       	movw	r14, r24
    2160:	89 2b       	or	r24, r25
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    2162:	d9 f0       	breq	.+54     	; 0x219a <xStreamBufferSend+0x11e>
    2164:	c5 01       	movw	r24, r10
    2166:	35 de       	rcall	.-918    	; 0x1dd2 <prvBytesInBuffer>
    2168:	f5 01       	movw	r30, r10
    216a:	26 81       	ldd	r18, Z+6	; 0x06
    216c:	37 81       	ldd	r19, Z+7	; 0x07
    216e:	82 17       	cp	r24, r18
    2170:	93 07       	cpc	r25, r19
        {
            sbSEND_COMPLETED( pxStreamBuffer );
    2172:	98 f0       	brcs	.+38     	; 0x219a <xStreamBufferSend+0x11e>
    2174:	0a d3       	rcall	.+1556   	; 0x278a <vTaskSuspendAll>
    2176:	f5 01       	movw	r30, r10
    2178:	80 85       	ldd	r24, Z+8	; 0x08
    217a:	91 85       	ldd	r25, Z+9	; 0x09
    217c:	89 2b       	or	r24, r25
    217e:	61 f0       	breq	.+24     	; 0x2198 <xStreamBufferSend+0x11c>
    2180:	80 85       	ldd	r24, Z+8	; 0x08
    2182:	91 85       	ldd	r25, Z+9	; 0x09
    2184:	00 e0       	ldi	r16, 0x00	; 0
    2186:	10 e0       	ldi	r17, 0x00	; 0
    2188:	20 e0       	ldi	r18, 0x00	; 0
    218a:	40 e0       	ldi	r20, 0x00	; 0
    218c:	50 e0       	ldi	r21, 0x00	; 0
    218e:	ba 01       	movw	r22, r20
    2190:	4f d7       	rcall	.+3742   	; 0x3030 <xTaskGenericNotify>
    2192:	f5 01       	movw	r30, r10
    2194:	11 86       	std	Z+9, r1	; 0x09
    2196:	10 86       	std	Z+8, r1	; 0x08
    2198:	e1 d3       	rcall	.+1986   	; 0x295c <xTaskResumeAll>
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    219a:	c7 01       	movw	r24, r14
    219c:	29 96       	adiw	r28, 0x09	; 9
    219e:	0f b6       	in	r0, 0x3f	; 63
    21a0:	f8 94       	cli
    21a2:	de bf       	out	0x3e, r29	; 62
    21a4:	0f be       	out	0x3f, r0	; 63
    21a6:	cd bf       	out	0x3d, r28	; 61
    21a8:	df 91       	pop	r29
    21aa:	cf 91       	pop	r28
    21ac:	1f 91       	pop	r17
    21ae:	0f 91       	pop	r16
    21b0:	ff 90       	pop	r15
    21b2:	ef 90       	pop	r14
    21b4:	df 90       	pop	r13
    21b6:	cf 90       	pop	r12
    21b8:	bf 90       	pop	r11
    21ba:	af 90       	pop	r10
    21bc:	9f 90       	pop	r9
    21be:	8f 90       	pop	r8
    21c0:	7f 90       	pop	r7
    21c2:	6f 90       	pop	r6
    21c4:	5f 90       	pop	r5
    21c6:	4f 90       	pop	r4
    21c8:	3f 90       	pop	r3
    21ca:	2f 90       	pop	r2
    21cc:	08 95       	ret

000021ce <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void *pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    21ce:	af 92       	push	r10
    21d0:	bf 92       	push	r11
    21d2:	cf 92       	push	r12
    21d4:	df 92       	push	r13
    21d6:	ef 92       	push	r14
    21d8:	ff 92       	push	r15
    21da:	0f 93       	push	r16
    21dc:	1f 93       	push	r17
    21de:	cf 93       	push	r28
    21e0:	df 93       	push	r29
    21e2:	ec 01       	movw	r28, r24
    21e4:	5b 01       	movw	r10, r22
    21e6:	6a 01       	movw	r12, r20
    21e8:	79 01       	movw	r14, r18

    /* This send function is used to write to both message buffers and stream
    buffers.  If this is a message buffer then the space needed must be
    increased by the amount of bytes needed to store the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    21ea:	8e 85       	ldd	r24, Y+14	; 0x0e
    21ec:	80 ff       	sbrs	r24, 0
    21ee:	04 c0       	rjmp	.+8      	; 0x21f8 <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    21f0:	8a 01       	movw	r16, r20
    21f2:	0e 5f       	subi	r16, 0xFE	; 254
    21f4:	1f 4f       	sbci	r17, 0xFF	; 255
    21f6:	01 c0       	rjmp	.+2      	; 0x21fa <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReturn, xSpace;
size_t xRequiredSpace = xDataLengthBytes;
    21f8:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    21fa:	ce 01       	movw	r24, r28
    21fc:	2d df       	rcall	.-422    	; 0x2058 <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    21fe:	9c 01       	movw	r18, r24
    2200:	a6 01       	movw	r20, r12
    2202:	b5 01       	movw	r22, r10
    2204:	ce 01       	movw	r24, r28
    2206:	41 de       	rcall	.-894    	; 0x1e8a <prvWriteMessageToBuffer>
    2208:	6c 01       	movw	r12, r24

    if( xReturn > ( size_t ) 0 )
    220a:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    220c:	b1 f0       	breq	.+44     	; 0x223a <__stack+0x3b>
    220e:	ce 01       	movw	r24, r28
    2210:	e0 dd       	rcall	.-1088   	; 0x1dd2 <prvBytesInBuffer>
    2212:	2e 81       	ldd	r18, Y+6	; 0x06
    2214:	3f 81       	ldd	r19, Y+7	; 0x07
    2216:	82 17       	cp	r24, r18
    2218:	93 07       	cpc	r25, r19
    221a:	78 f0       	brcs	.+30     	; 0x223a <__stack+0x3b>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    221c:	88 85       	ldd	r24, Y+8	; 0x08
    221e:	99 85       	ldd	r25, Y+9	; 0x09
    2220:	89 2b       	or	r24, r25
    2222:	59 f0       	breq	.+22     	; 0x223a <__stack+0x3b>
    2224:	88 85       	ldd	r24, Y+8	; 0x08
    2226:	99 85       	ldd	r25, Y+9	; 0x09
    2228:	00 e0       	ldi	r16, 0x00	; 0
    222a:	10 e0       	ldi	r17, 0x00	; 0
    222c:	20 e0       	ldi	r18, 0x00	; 0
    222e:	40 e0       	ldi	r20, 0x00	; 0
    2230:	50 e0       	ldi	r21, 0x00	; 0
    2232:	ba 01       	movw	r22, r20
    2234:	75 d7       	rcall	.+3818   	; 0x3120 <xTaskGenericNotifyFromISR>
    2236:	19 86       	std	Y+9, r1	; 0x09
    2238:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    223a:	c6 01       	movw	r24, r12
    223c:	df 91       	pop	r29
    223e:	cf 91       	pop	r28
    2240:	1f 91       	pop	r17
    2242:	0f 91       	pop	r16
    2244:	ff 90       	pop	r15
    2246:	ef 90       	pop	r14
    2248:	df 90       	pop	r13
    224a:	cf 90       	pop	r12
    224c:	bf 90       	pop	r11
    224e:	af 90       	pop	r10
    2250:	08 95       	ret

00002252 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void *pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    2252:	4f 92       	push	r4
    2254:	5f 92       	push	r5
    2256:	6f 92       	push	r6
    2258:	7f 92       	push	r7
    225a:	8f 92       	push	r8
    225c:	9f 92       	push	r9
    225e:	af 92       	push	r10
    2260:	bf 92       	push	r11
    2262:	cf 92       	push	r12
    2264:	df 92       	push	r13
    2266:	ef 92       	push	r14
    2268:	ff 92       	push	r15
    226a:	0f 93       	push	r16
    226c:	1f 93       	push	r17
    226e:	cf 93       	push	r28
    2270:	df 93       	push	r29
    2272:	1f 92       	push	r1
    2274:	1f 92       	push	r1
    2276:	cd b7       	in	r28, 0x3d	; 61
    2278:	de b7       	in	r29, 0x3e	; 62
    227a:	5c 01       	movw	r10, r24
    227c:	2b 01       	movw	r4, r22
    227e:	3a 01       	movw	r6, r20
    2280:	68 01       	movw	r12, r16
    2282:	79 01       	movw	r14, r18
    /* This receive function is used by both message buffers, which store
    discrete messages, and stream buffers, which store a continuous stream of
    bytes.  Discrete messages include an additional
    sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    2284:	fc 01       	movw	r30, r24
    2286:	86 85       	ldd	r24, Z+14	; 0x0e
    2288:	80 fd       	sbrc	r24, 0
    228a:	03 c0       	rjmp	.+6      	; 0x2292 <xStreamBufferReceive+0x40>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    228c:	81 2c       	mov	r8, r1
    228e:	91 2c       	mov	r9, r1
    2290:	04 c0       	rjmp	.+8      	; 0x229a <xStreamBufferReceive+0x48>
    bytes.  Discrete messages include an additional
    sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    2292:	68 94       	set
    2294:	88 24       	eor	r8, r8
    2296:	81 f8       	bld	r8, 1
    2298:	91 2c       	mov	r9, r1
    else
    {
        xBytesToStoreMessageLength = 0;
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    229a:	c1 14       	cp	r12, r1
    229c:	d1 04       	cpc	r13, r1
    229e:	e1 04       	cpc	r14, r1
    22a0:	f1 04       	cpc	r15, r1
    22a2:	29 f1       	breq	.+74     	; 0x22ee <xStreamBufferReceive+0x9c>
    {
        /* Checking if there is data and clearing the notification state must be
        performed atomically. */
        taskENTER_CRITICAL();
    22a4:	0f b6       	in	r0, 0x3f	; 63
    22a6:	f8 94       	cli
    22a8:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    22aa:	c5 01       	movw	r24, r10
    22ac:	92 dd       	rcall	.-1244   	; 0x1dd2 <prvBytesInBuffer>
    22ae:	8c 01       	movw	r16, r24
            /* If this function was invoked by a message buffer read then
            xBytesToStoreMessageLength holds the number of bytes used to hold
            the length of the next discrete message.  If this function was
            invoked by a stream buffer read then xBytesToStoreMessageLength will
            be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    22b0:	88 16       	cp	r8, r24
    22b2:	99 06       	cpc	r9, r25
    22b4:	38 f0       	brcs	.+14     	; 0x22c4 <xStreamBufferReceive+0x72>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    22b6:	80 e0       	ldi	r24, 0x00	; 0
    22b8:	90 e0       	ldi	r25, 0x00	; 0

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    22ba:	bb d7       	rcall	.+3958   	; 0x3232 <xTaskNotifyStateClear>
    22bc:	b4 d5       	rcall	.+2920   	; 0x2e26 <xTaskGetCurrentTaskHandle>
    22be:	f5 01       	movw	r30, r10
    22c0:	91 87       	std	Z+9, r25	; 0x09
    22c2:	80 87       	std	Z+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    22c4:	0f 90       	pop	r0
    22c6:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    22c8:	80 16       	cp	r8, r16
    22ca:	91 06       	cpc	r9, r17
    22cc:	b0 f0       	brcs	.+44     	; 0x22fa <xStreamBufferReceive+0xa8>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    22ce:	00 e0       	ldi	r16, 0x00	; 0
    22d0:	10 e0       	ldi	r17, 0x00	; 0
    22d2:	20 e0       	ldi	r18, 0x00	; 0
    22d4:	30 e0       	ldi	r19, 0x00	; 0
    22d6:	a9 01       	movw	r20, r18
    22d8:	60 e0       	ldi	r22, 0x00	; 0
    22da:	70 e0       	ldi	r23, 0x00	; 0
    22dc:	cb 01       	movw	r24, r22
    22de:	1e d6       	rcall	.+3132   	; 0x2f1c <xTaskNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    22e0:	f5 01       	movw	r30, r10
    22e2:	11 86       	std	Z+9, r1	; 0x09

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    22e4:	10 86       	std	Z+8, r1	; 0x08
    22e6:	c5 01       	movw	r24, r10
    22e8:	74 dd       	rcall	.-1304   	; 0x1dd2 <prvBytesInBuffer>
    22ea:	8c 01       	movw	r16, r24
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    22ec:	03 c0       	rjmp	.+6      	; 0x22f4 <xStreamBufferReceive+0xa2>
    22ee:	c5 01       	movw	r24, r10
    22f0:	70 dd       	rcall	.-1312   	; 0x1dd2 <prvBytesInBuffer>
    22f2:	8c 01       	movw	r16, r24
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
    holds the number of bytes used to store the message length) or a stream of
    bytes (where xBytesToStoreMessageLength is zero), the number of bytes
    available must be greater than xBytesToStoreMessageLength to be able to
    read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    22f4:	80 16       	cp	r8, r16
    22f6:	91 06       	cpc	r9, r17
    22f8:	b8 f5       	brcc	.+110    	; 0x2368 <xStreamBufferReceive+0x116>
                                        size_t xBytesToStoreMessageLength )
{
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

    if( xBytesToStoreMessageLength != ( size_t ) 0 )
    22fa:	81 14       	cp	r8, r1
    22fc:	91 04       	cpc	r9, r1
    22fe:	c1 f0       	breq	.+48     	; 0x2330 <xStreamBufferReceive+0xde>
    {
        /* A discrete message is being received.  First receive the length
        of the message.  A copy of the tail is stored so the buffer can be
        returned to its prior state if the length of the message is too
        large for the provided buffer. */
        xOriginalTail = pxStreamBuffer->xTail;
    2300:	f5 01       	movw	r30, r10
    2302:	e0 80       	ld	r14, Z
    2304:	f1 80       	ldd	r15, Z+1	; 0x01
        ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
    2306:	98 01       	movw	r18, r16
    2308:	a4 01       	movw	r20, r8
    230a:	be 01       	movw	r22, r28
    230c:	6f 5f       	subi	r22, 0xFF	; 255
    230e:	7f 4f       	sbci	r23, 0xFF	; 255
    2310:	c5 01       	movw	r24, r10
    2312:	fb dd       	rcall	.-1034   	; 0x1f0a <prvReadBytesFromBuffer>
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
    2314:	89 81       	ldd	r24, Y+1	; 0x01
    2316:	9a 81       	ldd	r25, Y+2	; 0x02

        /* Reduce the number of bytes available by the number of bytes just
        read out. */
        xBytesAvailable -= xBytesToStoreMessageLength;
    2318:	08 19       	sub	r16, r8
    231a:	19 09       	sbc	r17, r9

        /* Check there is enough space in the buffer provided by the
        user. */
        if( xNextMessageLength > xBufferLengthBytes )
    231c:	68 16       	cp	r6, r24
    231e:	79 06       	cpc	r7, r25
    2320:	30 f4       	brcc	.+12     	; 0x232e <xStreamBufferReceive+0xdc>
        {
            /* The user has provided insufficient space to read the message
            so return the buffer to its previous state (so the length of
            the message is in the buffer again). */
            pxStreamBuffer->xTail = xOriginalTail;
    2322:	f5 01       	movw	r30, r10
    2324:	f1 82       	std	Z+1, r15	; 0x01
    2326:	e0 82       	st	Z, r14
            xNextMessageLength = 0;
    2328:	61 2c       	mov	r6, r1
    232a:	71 2c       	mov	r7, r1
        of the message.  A copy of the tail is stored so the buffer can be
        returned to its prior state if the length of the message is too
        large for the provided buffer. */
        xOriginalTail = pxStreamBuffer->xTail;
        ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
    232c:	01 c0       	rjmp	.+2      	; 0x2330 <xStreamBufferReceive+0xde>
        message), so read as many bytes as possible. */
        xNextMessageLength = xBufferLengthBytes;
    }

    /* Read the actual data. */
    xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
    232e:	3c 01       	movw	r6, r24
    2330:	98 01       	movw	r18, r16
    2332:	a3 01       	movw	r20, r6
    2334:	b2 01       	movw	r22, r4
    2336:	c5 01       	movw	r24, r10
    2338:	e8 dd       	rcall	.-1072   	; 0x1f0a <prvReadBytesFromBuffer>
    if( xBytesAvailable > xBytesToStoreMessageLength )
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    233a:	7c 01       	movw	r14, r24
    233c:	89 2b       	or	r24, r25
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    233e:	b1 f0       	breq	.+44     	; 0x236c <xStreamBufferReceive+0x11a>
    2340:	24 d2       	rcall	.+1096   	; 0x278a <vTaskSuspendAll>
    2342:	f5 01       	movw	r30, r10
    2344:	82 85       	ldd	r24, Z+10	; 0x0a
    2346:	93 85       	ldd	r25, Z+11	; 0x0b
    2348:	89 2b       	or	r24, r25
    234a:	61 f0       	breq	.+24     	; 0x2364 <xStreamBufferReceive+0x112>
    234c:	82 85       	ldd	r24, Z+10	; 0x0a
    234e:	93 85       	ldd	r25, Z+11	; 0x0b
    2350:	00 e0       	ldi	r16, 0x00	; 0
    2352:	10 e0       	ldi	r17, 0x00	; 0
    2354:	20 e0       	ldi	r18, 0x00	; 0
    2356:	40 e0       	ldi	r20, 0x00	; 0
    2358:	50 e0       	ldi	r21, 0x00	; 0
    235a:	ba 01       	movw	r22, r20
    235c:	69 d6       	rcall	.+3282   	; 0x3030 <xTaskGenericNotify>
    235e:	f5 01       	movw	r30, r10
    2360:	13 86       	std	Z+11, r1	; 0x0b
    2362:	12 86       	std	Z+10, r1	; 0x0a
    2364:	fb d2       	rcall	.+1526   	; 0x295c <xTaskResumeAll>
    2366:	02 c0       	rjmp	.+4      	; 0x236c <xStreamBufferReceive+0x11a>
                             void *pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    2368:	e1 2c       	mov	r14, r1
    236a:	f1 2c       	mov	r15, r1
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    236c:	c7 01       	movw	r24, r14
    236e:	0f 90       	pop	r0
    2370:	0f 90       	pop	r0
    2372:	df 91       	pop	r29
    2374:	cf 91       	pop	r28
    2376:	1f 91       	pop	r17
    2378:	0f 91       	pop	r16
    237a:	ff 90       	pop	r15
    237c:	ef 90       	pop	r14
    237e:	df 90       	pop	r13
    2380:	cf 90       	pop	r12
    2382:	bf 90       	pop	r11
    2384:	af 90       	pop	r10
    2386:	9f 90       	pop	r9
    2388:	8f 90       	pop	r8
    238a:	7f 90       	pop	r7
    238c:	6f 90       	pop	r6
    238e:	5f 90       	pop	r5
    2390:	4f 90       	pop	r4
    2392:	08 95       	ret

00002394 <prvResetNextTaskUnblockTime>:
    2394:	e0 91 10 19 	lds	r30, 0x1910	; 0x801910 <pxDelayedTaskList>
    2398:	f0 91 11 19 	lds	r31, 0x1911	; 0x801911 <pxDelayedTaskList+0x1>
    239c:	80 81       	ld	r24, Z
    239e:	81 11       	cpse	r24, r1
    23a0:	0c c0       	rjmp	.+24     	; 0x23ba <prvResetNextTaskUnblockTime+0x26>
    23a2:	8f ef       	ldi	r24, 0xFF	; 255
    23a4:	9f ef       	ldi	r25, 0xFF	; 255
    23a6:	dc 01       	movw	r26, r24
    23a8:	80 93 dd 18 	sts	0x18DD, r24	; 0x8018dd <xNextTaskUnblockTime>
    23ac:	90 93 de 18 	sts	0x18DE, r25	; 0x8018de <xNextTaskUnblockTime+0x1>
    23b0:	a0 93 df 18 	sts	0x18DF, r26	; 0x8018df <xNextTaskUnblockTime+0x2>
    23b4:	b0 93 e0 18 	sts	0x18E0, r27	; 0x8018e0 <xNextTaskUnblockTime+0x3>
    23b8:	08 95       	ret
    23ba:	e0 91 10 19 	lds	r30, 0x1910	; 0x801910 <pxDelayedTaskList>
    23be:	f0 91 11 19 	lds	r31, 0x1911	; 0x801911 <pxDelayedTaskList+0x1>
    23c2:	07 80       	ldd	r0, Z+7	; 0x07
    23c4:	f0 85       	ldd	r31, Z+8	; 0x08
    23c6:	e0 2d       	mov	r30, r0
    23c8:	00 84       	ldd	r0, Z+8	; 0x08
    23ca:	f1 85       	ldd	r31, Z+9	; 0x09
    23cc:	e0 2d       	mov	r30, r0
    23ce:	82 81       	ldd	r24, Z+2	; 0x02
    23d0:	93 81       	ldd	r25, Z+3	; 0x03
    23d2:	a4 81       	ldd	r26, Z+4	; 0x04
    23d4:	b5 81       	ldd	r27, Z+5	; 0x05
    23d6:	80 93 dd 18 	sts	0x18DD, r24	; 0x8018dd <xNextTaskUnblockTime>
    23da:	90 93 de 18 	sts	0x18DE, r25	; 0x8018de <xNextTaskUnblockTime+0x1>
    23de:	a0 93 df 18 	sts	0x18DF, r26	; 0x8018df <xNextTaskUnblockTime+0x2>
    23e2:	b0 93 e0 18 	sts	0x18E0, r27	; 0x8018e0 <xNextTaskUnblockTime+0x3>
    23e6:	08 95       	ret

000023e8 <prvAddCurrentTaskToDelayedList>:
    23e8:	8f 92       	push	r8
    23ea:	9f 92       	push	r9
    23ec:	af 92       	push	r10
    23ee:	bf 92       	push	r11
    23f0:	cf 92       	push	r12
    23f2:	df 92       	push	r13
    23f4:	ef 92       	push	r14
    23f6:	ff 92       	push	r15
    23f8:	cf 93       	push	r28
    23fa:	6b 01       	movw	r12, r22
    23fc:	7c 01       	movw	r14, r24
    23fe:	c4 2f       	mov	r28, r20
    2400:	80 90 e7 18 	lds	r8, 0x18E7	; 0x8018e7 <xTickCount>
    2404:	90 90 e8 18 	lds	r9, 0x18E8	; 0x8018e8 <xTickCount+0x1>
    2408:	a0 90 e9 18 	lds	r10, 0x18E9	; 0x8018e9 <xTickCount+0x2>
    240c:	b0 90 ea 18 	lds	r11, 0x18EA	; 0x8018ea <xTickCount+0x3>
    2410:	80 91 54 19 	lds	r24, 0x1954	; 0x801954 <pxCurrentTCB>
    2414:	90 91 55 19 	lds	r25, 0x1955	; 0x801955 <pxCurrentTCB+0x1>
    2418:	02 96       	adiw	r24, 0x02	; 2
    241a:	56 d8       	rcall	.-3924   	; 0x14c8 <uxListRemove>
    241c:	8f ef       	ldi	r24, 0xFF	; 255
    241e:	c8 16       	cp	r12, r24
    2420:	d8 06       	cpc	r13, r24
    2422:	e8 06       	cpc	r14, r24
    2424:	f8 06       	cpc	r15, r24
    2426:	69 f4       	brne	.+26     	; 0x2442 <prvAddCurrentTaskToDelayedList+0x5a>
    2428:	cc 23       	and	r28, r28
    242a:	59 f0       	breq	.+22     	; 0x2442 <prvAddCurrentTaskToDelayedList+0x5a>
    242c:	60 91 54 19 	lds	r22, 0x1954	; 0x801954 <pxCurrentTCB>
    2430:	70 91 55 19 	lds	r23, 0x1955	; 0x801955 <pxCurrentTCB+0x1>
    2434:	6e 5f       	subi	r22, 0xFE	; 254
    2436:	7f 4f       	sbci	r23, 0xFF	; 255
    2438:	8c ee       	ldi	r24, 0xEC	; 236
    243a:	98 e1       	ldi	r25, 0x18	; 24
    243c:	0e 94 06 0a 	call	0x140c	; 0x140c <vListInsertEnd>
    2440:	3f c0       	rjmp	.+126    	; 0x24c0 <prvAddCurrentTaskToDelayedList+0xd8>
    2442:	c8 0c       	add	r12, r8
    2444:	d9 1c       	adc	r13, r9
    2446:	ea 1c       	adc	r14, r10
    2448:	fb 1c       	adc	r15, r11
    244a:	e0 91 54 19 	lds	r30, 0x1954	; 0x801954 <pxCurrentTCB>
    244e:	f0 91 55 19 	lds	r31, 0x1955	; 0x801955 <pxCurrentTCB+0x1>
    2452:	c2 82       	std	Z+2, r12	; 0x02
    2454:	d3 82       	std	Z+3, r13	; 0x03
    2456:	e4 82       	std	Z+4, r14	; 0x04
    2458:	f5 82       	std	Z+5, r15	; 0x05
    245a:	c8 14       	cp	r12, r8
    245c:	d9 04       	cpc	r13, r9
    245e:	ea 04       	cpc	r14, r10
    2460:	fb 04       	cpc	r15, r11
    2462:	68 f4       	brcc	.+26     	; 0x247e <prvAddCurrentTaskToDelayedList+0x96>
    2464:	60 91 54 19 	lds	r22, 0x1954	; 0x801954 <pxCurrentTCB>
    2468:	70 91 55 19 	lds	r23, 0x1955	; 0x801955 <pxCurrentTCB+0x1>
    246c:	80 91 0e 19 	lds	r24, 0x190E	; 0x80190e <pxOverflowDelayedTaskList>
    2470:	90 91 0f 19 	lds	r25, 0x190F	; 0x80190f <pxOverflowDelayedTaskList+0x1>
    2474:	6e 5f       	subi	r22, 0xFE	; 254
    2476:	7f 4f       	sbci	r23, 0xFF	; 255
    2478:	0e 94 27 0a 	call	0x144e	; 0x144e <vListInsert>
    247c:	21 c0       	rjmp	.+66     	; 0x24c0 <prvAddCurrentTaskToDelayedList+0xd8>
    247e:	60 91 54 19 	lds	r22, 0x1954	; 0x801954 <pxCurrentTCB>
    2482:	70 91 55 19 	lds	r23, 0x1955	; 0x801955 <pxCurrentTCB+0x1>
    2486:	80 91 10 19 	lds	r24, 0x1910	; 0x801910 <pxDelayedTaskList>
    248a:	90 91 11 19 	lds	r25, 0x1911	; 0x801911 <pxDelayedTaskList+0x1>
    248e:	6e 5f       	subi	r22, 0xFE	; 254
    2490:	7f 4f       	sbci	r23, 0xFF	; 255
    2492:	0e 94 27 0a 	call	0x144e	; 0x144e <vListInsert>
    2496:	80 91 dd 18 	lds	r24, 0x18DD	; 0x8018dd <xNextTaskUnblockTime>
    249a:	90 91 de 18 	lds	r25, 0x18DE	; 0x8018de <xNextTaskUnblockTime+0x1>
    249e:	a0 91 df 18 	lds	r26, 0x18DF	; 0x8018df <xNextTaskUnblockTime+0x2>
    24a2:	b0 91 e0 18 	lds	r27, 0x18E0	; 0x8018e0 <xNextTaskUnblockTime+0x3>
    24a6:	c8 16       	cp	r12, r24
    24a8:	d9 06       	cpc	r13, r25
    24aa:	ea 06       	cpc	r14, r26
    24ac:	fb 06       	cpc	r15, r27
    24ae:	40 f4       	brcc	.+16     	; 0x24c0 <prvAddCurrentTaskToDelayedList+0xd8>
    24b0:	c0 92 dd 18 	sts	0x18DD, r12	; 0x8018dd <xNextTaskUnblockTime>
    24b4:	d0 92 de 18 	sts	0x18DE, r13	; 0x8018de <xNextTaskUnblockTime+0x1>
    24b8:	e0 92 df 18 	sts	0x18DF, r14	; 0x8018df <xNextTaskUnblockTime+0x2>
    24bc:	f0 92 e0 18 	sts	0x18E0, r15	; 0x8018e0 <xNextTaskUnblockTime+0x3>
    24c0:	cf 91       	pop	r28
    24c2:	ff 90       	pop	r15
    24c4:	ef 90       	pop	r14
    24c6:	df 90       	pop	r13
    24c8:	cf 90       	pop	r12
    24ca:	bf 90       	pop	r11
    24cc:	af 90       	pop	r10
    24ce:	9f 90       	pop	r9
    24d0:	8f 90       	pop	r8
    24d2:	08 95       	ret

000024d4 <xTaskCreate>:
    24d4:	4f 92       	push	r4
    24d6:	5f 92       	push	r5
    24d8:	6f 92       	push	r6
    24da:	7f 92       	push	r7
    24dc:	8f 92       	push	r8
    24de:	9f 92       	push	r9
    24e0:	af 92       	push	r10
    24e2:	bf 92       	push	r11
    24e4:	cf 92       	push	r12
    24e6:	df 92       	push	r13
    24e8:	ef 92       	push	r14
    24ea:	ff 92       	push	r15
    24ec:	0f 93       	push	r16
    24ee:	cf 93       	push	r28
    24f0:	df 93       	push	r29
    24f2:	4c 01       	movw	r8, r24
    24f4:	6b 01       	movw	r12, r22
    24f6:	5a 01       	movw	r10, r20
    24f8:	29 01       	movw	r4, r18
    24fa:	ca 01       	movw	r24, r20
    24fc:	0e 94 07 09 	call	0x120e	; 0x120e <pvPortMalloc>
    2500:	3c 01       	movw	r6, r24
    2502:	89 2b       	or	r24, r25
    2504:	09 f4       	brne	.+2      	; 0x2508 <xTaskCreate+0x34>
    2506:	f4 c0       	rjmp	.+488    	; 0x26f0 <xTaskCreate+0x21c>
    2508:	80 e3       	ldi	r24, 0x30	; 48
    250a:	90 e0       	ldi	r25, 0x00	; 0
    250c:	0e 94 07 09 	call	0x120e	; 0x120e <pvPortMalloc>
    2510:	ec 01       	movw	r28, r24
    2512:	89 2b       	or	r24, r25
    2514:	99 f0       	breq	.+38     	; 0x253c <xTaskCreate+0x68>
    2516:	7c 8e       	std	Y+28, r7	; 0x1c
    2518:	6b 8e       	std	Y+27, r6	; 0x1b
    251a:	a5 01       	movw	r20, r10
    251c:	65 ea       	ldi	r22, 0xA5	; 165
    251e:	70 e0       	ldi	r23, 0x00	; 0
    2520:	c3 01       	movw	r24, r6
    2522:	0e 94 59 2b 	call	0x56b2	; 0x56b2 <memset>
    2526:	21 e0       	ldi	r18, 0x01	; 1
    2528:	a2 1a       	sub	r10, r18
    252a:	b1 08       	sbc	r11, r1
    252c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    252e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2530:	a8 0e       	add	r10, r24
    2532:	b9 1e       	adc	r11, r25
    2534:	c1 14       	cp	r12, r1
    2536:	d1 04       	cpc	r13, r1
    2538:	29 f4       	brne	.+10     	; 0x2544 <xTaskCreate+0x70>
    253a:	20 c0       	rjmp	.+64     	; 0x257c <xTaskCreate+0xa8>
    253c:	c3 01       	movw	r24, r6
    253e:	0e 94 c0 09 	call	0x1380	; 0x1380 <vPortFree>
    2542:	d6 c0       	rjmp	.+428    	; 0x26f0 <xTaskCreate+0x21c>
    2544:	d6 01       	movw	r26, r12
    2546:	8c 91       	ld	r24, X
    2548:	8d 8f       	std	Y+29, r24	; 0x1d
    254a:	8c 91       	ld	r24, X
    254c:	88 23       	and	r24, r24
    254e:	a1 f0       	breq	.+40     	; 0x2578 <xTaskCreate+0xa4>
    2550:	ae 01       	movw	r20, r28
    2552:	42 5e       	subi	r20, 0xE2	; 226
    2554:	5f 4f       	sbci	r21, 0xFF	; 255
    2556:	f6 01       	movw	r30, r12
    2558:	31 96       	adiw	r30, 0x01	; 1
    255a:	b8 e0       	ldi	r27, 0x08	; 8
    255c:	cb 0e       	add	r12, r27
    255e:	d1 1c       	adc	r13, r1
    2560:	cf 01       	movw	r24, r30
    2562:	21 91       	ld	r18, Z+
    2564:	da 01       	movw	r26, r20
    2566:	2d 93       	st	X+, r18
    2568:	ad 01       	movw	r20, r26
    256a:	dc 01       	movw	r26, r24
    256c:	8c 91       	ld	r24, X
    256e:	88 23       	and	r24, r24
    2570:	19 f0       	breq	.+6      	; 0x2578 <xTaskCreate+0xa4>
    2572:	ec 15       	cp	r30, r12
    2574:	fd 05       	cpc	r31, r13
    2576:	a1 f7       	brne	.-24     	; 0x2560 <xTaskCreate+0x8c>
    2578:	1c a2       	std	Y+36, r1	; 0x24
    257a:	01 c0       	rjmp	.+2      	; 0x257e <xTaskCreate+0xaa>
    257c:	1d 8e       	std	Y+29, r1	; 0x1d
    257e:	04 30       	cpi	r16, 0x04	; 4
    2580:	08 f0       	brcs	.+2      	; 0x2584 <xTaskCreate+0xb0>
    2582:	03 e0       	ldi	r16, 0x03	; 3
    2584:	0a 8f       	std	Y+26, r16	; 0x1a
    2586:	0f a3       	std	Y+39, r16	; 0x27
    2588:	18 a6       	std	Y+40, r1	; 0x28
    258a:	6e 01       	movw	r12, r28
    258c:	b2 e0       	ldi	r27, 0x02	; 2
    258e:	cb 0e       	add	r12, r27
    2590:	d1 1c       	adc	r13, r1
    2592:	c6 01       	movw	r24, r12
    2594:	0e 94 02 0a 	call	0x1404	; 0x1404 <vListInitialiseItem>
    2598:	ce 01       	movw	r24, r28
    259a:	0e 96       	adiw	r24, 0x0e	; 14
    259c:	0e 94 02 0a 	call	0x1404	; 0x1404 <vListInitialiseItem>
    25a0:	db 87       	std	Y+11, r29	; 0x0b
    25a2:	ca 87       	std	Y+10, r28	; 0x0a
    25a4:	84 e0       	ldi	r24, 0x04	; 4
    25a6:	90 e0       	ldi	r25, 0x00	; 0
    25a8:	a0 e0       	ldi	r26, 0x00	; 0
    25aa:	b0 e0       	ldi	r27, 0x00	; 0
    25ac:	80 1b       	sub	r24, r16
    25ae:	91 09       	sbc	r25, r1
    25b0:	a1 09       	sbc	r26, r1
    25b2:	b1 09       	sbc	r27, r1
    25b4:	8e 87       	std	Y+14, r24	; 0x0e
    25b6:	9f 87       	std	Y+15, r25	; 0x0f
    25b8:	a8 8b       	std	Y+16, r26	; 0x10
    25ba:	b9 8b       	std	Y+17, r27	; 0x11
    25bc:	df 8b       	std	Y+23, r29	; 0x17
    25be:	ce 8b       	std	Y+22, r28	; 0x16
    25c0:	1a a6       	std	Y+42, r1	; 0x2a
    25c2:	19 a6       	std	Y+41, r1	; 0x29
    25c4:	1b a6       	std	Y+43, r1	; 0x2b
    25c6:	1c a6       	std	Y+44, r1	; 0x2c
    25c8:	1d a6       	std	Y+45, r1	; 0x2d
    25ca:	1e a6       	std	Y+46, r1	; 0x2e
    25cc:	1f a6       	std	Y+47, r1	; 0x2f
    25ce:	a2 01       	movw	r20, r4
    25d0:	b4 01       	movw	r22, r8
    25d2:	c5 01       	movw	r24, r10
    25d4:	0e 94 8b 0a 	call	0x1516	; 0x1516 <pxPortInitialiseStack>
    25d8:	99 83       	std	Y+1, r25	; 0x01
    25da:	88 83       	st	Y, r24
    25dc:	e1 14       	cp	r14, r1
    25de:	f1 04       	cpc	r15, r1
    25e0:	19 f0       	breq	.+6      	; 0x25e8 <xTaskCreate+0x114>
    25e2:	f7 01       	movw	r30, r14
    25e4:	d1 83       	std	Z+1, r29	; 0x01
    25e6:	c0 83       	st	Z, r28
    25e8:	0f b6       	in	r0, 0x3f	; 63
    25ea:	f8 94       	cli
    25ec:	0f 92       	push	r0
    25ee:	80 91 eb 18 	lds	r24, 0x18EB	; 0x8018eb <uxCurrentNumberOfTasks>
    25f2:	8f 5f       	subi	r24, 0xFF	; 255
    25f4:	80 93 eb 18 	sts	0x18EB, r24	; 0x8018eb <uxCurrentNumberOfTasks>
    25f8:	80 91 54 19 	lds	r24, 0x1954	; 0x801954 <pxCurrentTCB>
    25fc:	90 91 55 19 	lds	r25, 0x1955	; 0x801955 <pxCurrentTCB+0x1>
    2600:	89 2b       	or	r24, r25
    2602:	d1 f5       	brne	.+116    	; 0x2678 <xTaskCreate+0x1a4>
    2604:	d0 93 55 19 	sts	0x1955, r29	; 0x801955 <pxCurrentTCB+0x1>
    2608:	c0 93 54 19 	sts	0x1954, r28	; 0x801954 <pxCurrentTCB>
    260c:	80 91 eb 18 	lds	r24, 0x18EB	; 0x8018eb <uxCurrentNumberOfTasks>
    2610:	81 30       	cpi	r24, 0x01	; 1
    2612:	09 f0       	breq	.+2      	; 0x2616 <xTaskCreate+0x142>
    2614:	41 c0       	rjmp	.+130    	; 0x2698 <xTaskCreate+0x1c4>
    2616:	88 e2       	ldi	r24, 0x28	; 40
    2618:	99 e1       	ldi	r25, 0x19	; 25
    261a:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <vListInitialise>
    261e:	83 e3       	ldi	r24, 0x33	; 51
    2620:	99 e1       	ldi	r25, 0x19	; 25
    2622:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <vListInitialise>
    2626:	8e e3       	ldi	r24, 0x3E	; 62
    2628:	99 e1       	ldi	r25, 0x19	; 25
    262a:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <vListInitialise>
    262e:	89 e4       	ldi	r24, 0x49	; 73
    2630:	99 e1       	ldi	r25, 0x19	; 25
    2632:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <vListInitialise>
    2636:	8d e1       	ldi	r24, 0x1D	; 29
    2638:	99 e1       	ldi	r25, 0x19	; 25
    263a:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <vListInitialise>
    263e:	82 e1       	ldi	r24, 0x12	; 18
    2640:	99 e1       	ldi	r25, 0x19	; 25
    2642:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <vListInitialise>
    2646:	83 e0       	ldi	r24, 0x03	; 3
    2648:	99 e1       	ldi	r25, 0x19	; 25
    264a:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <vListInitialise>
    264e:	88 ef       	ldi	r24, 0xF8	; 248
    2650:	98 e1       	ldi	r25, 0x18	; 24
    2652:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <vListInitialise>
    2656:	8c ee       	ldi	r24, 0xEC	; 236
    2658:	98 e1       	ldi	r25, 0x18	; 24
    265a:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <vListInitialise>
    265e:	8d e1       	ldi	r24, 0x1D	; 29
    2660:	99 e1       	ldi	r25, 0x19	; 25
    2662:	90 93 11 19 	sts	0x1911, r25	; 0x801911 <pxDelayedTaskList+0x1>
    2666:	80 93 10 19 	sts	0x1910, r24	; 0x801910 <pxDelayedTaskList>
    266a:	82 e1       	ldi	r24, 0x12	; 18
    266c:	99 e1       	ldi	r25, 0x19	; 25
    266e:	90 93 0f 19 	sts	0x190F, r25	; 0x80190f <pxOverflowDelayedTaskList+0x1>
    2672:	80 93 0e 19 	sts	0x190E, r24	; 0x80190e <pxOverflowDelayedTaskList>
    2676:	10 c0       	rjmp	.+32     	; 0x2698 <xTaskCreate+0x1c4>
    2678:	80 91 e5 18 	lds	r24, 0x18E5	; 0x8018e5 <xSchedulerRunning>
    267c:	81 11       	cpse	r24, r1
    267e:	0c c0       	rjmp	.+24     	; 0x2698 <xTaskCreate+0x1c4>
    2680:	e0 91 54 19 	lds	r30, 0x1954	; 0x801954 <pxCurrentTCB>
    2684:	f0 91 55 19 	lds	r31, 0x1955	; 0x801955 <pxCurrentTCB+0x1>
    2688:	92 8d       	ldd	r25, Z+26	; 0x1a
    268a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    268c:	89 17       	cp	r24, r25
    268e:	20 f0       	brcs	.+8      	; 0x2698 <xTaskCreate+0x1c4>
    2690:	d0 93 55 19 	sts	0x1955, r29	; 0x801955 <pxCurrentTCB+0x1>
    2694:	c0 93 54 19 	sts	0x1954, r28	; 0x801954 <pxCurrentTCB>
    2698:	80 91 e1 18 	lds	r24, 0x18E1	; 0x8018e1 <uxTaskNumber>
    269c:	8f 5f       	subi	r24, 0xFF	; 255
    269e:	80 93 e1 18 	sts	0x18E1, r24	; 0x8018e1 <uxTaskNumber>
    26a2:	8d a3       	std	Y+37, r24	; 0x25
    26a4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    26a6:	90 91 e6 18 	lds	r25, 0x18E6	; 0x8018e6 <uxTopReadyPriority>
    26aa:	98 17       	cp	r25, r24
    26ac:	10 f4       	brcc	.+4      	; 0x26b2 <xTaskCreate+0x1de>
    26ae:	80 93 e6 18 	sts	0x18E6, r24	; 0x8018e6 <uxTopReadyPriority>
    26b2:	fb e0       	ldi	r31, 0x0B	; 11
    26b4:	8f 9f       	mul	r24, r31
    26b6:	c0 01       	movw	r24, r0
    26b8:	11 24       	eor	r1, r1
    26ba:	b6 01       	movw	r22, r12
    26bc:	88 5d       	subi	r24, 0xD8	; 216
    26be:	96 4e       	sbci	r25, 0xE6	; 230
    26c0:	0e 94 06 0a 	call	0x140c	; 0x140c <vListInsertEnd>
    26c4:	0f 90       	pop	r0
    26c6:	0f be       	out	0x3f, r0	; 63
    26c8:	80 91 e5 18 	lds	r24, 0x18E5	; 0x8018e5 <xSchedulerRunning>
    26cc:	88 23       	and	r24, r24
    26ce:	61 f0       	breq	.+24     	; 0x26e8 <xTaskCreate+0x214>
    26d0:	e0 91 54 19 	lds	r30, 0x1954	; 0x801954 <pxCurrentTCB>
    26d4:	f0 91 55 19 	lds	r31, 0x1955	; 0x801955 <pxCurrentTCB+0x1>
    26d8:	92 8d       	ldd	r25, Z+26	; 0x1a
    26da:	8a 8d       	ldd	r24, Y+26	; 0x1a
    26dc:	98 17       	cp	r25, r24
    26de:	30 f4       	brcc	.+12     	; 0x26ec <xTaskCreate+0x218>
    26e0:	0e 94 39 0b 	call	0x1672	; 0x1672 <vPortYield>
    26e4:	81 e0       	ldi	r24, 0x01	; 1
    26e6:	05 c0       	rjmp	.+10     	; 0x26f2 <xTaskCreate+0x21e>
    26e8:	81 e0       	ldi	r24, 0x01	; 1
    26ea:	03 c0       	rjmp	.+6      	; 0x26f2 <xTaskCreate+0x21e>
    26ec:	81 e0       	ldi	r24, 0x01	; 1
    26ee:	01 c0       	rjmp	.+2      	; 0x26f2 <xTaskCreate+0x21e>
    26f0:	8f ef       	ldi	r24, 0xFF	; 255
    26f2:	df 91       	pop	r29
    26f4:	cf 91       	pop	r28
    26f6:	0f 91       	pop	r16
    26f8:	ff 90       	pop	r15
    26fa:	ef 90       	pop	r14
    26fc:	df 90       	pop	r13
    26fe:	cf 90       	pop	r12
    2700:	bf 90       	pop	r11
    2702:	af 90       	pop	r10
    2704:	9f 90       	pop	r9
    2706:	8f 90       	pop	r8
    2708:	7f 90       	pop	r7
    270a:	6f 90       	pop	r6
    270c:	5f 90       	pop	r5
    270e:	4f 90       	pop	r4
    2710:	08 95       	ret

00002712 <vTaskStartScheduler>:
    2712:	ef 92       	push	r14
    2714:	ff 92       	push	r15
    2716:	0f 93       	push	r16
    2718:	0f 2e       	mov	r0, r31
    271a:	fb ed       	ldi	r31, 0xDB	; 219
    271c:	ef 2e       	mov	r14, r31
    271e:	f8 e1       	ldi	r31, 0x18	; 24
    2720:	ff 2e       	mov	r15, r31
    2722:	f0 2d       	mov	r31, r0
    2724:	00 e0       	ldi	r16, 0x00	; 0
    2726:	20 e0       	ldi	r18, 0x00	; 0
    2728:	30 e0       	ldi	r19, 0x00	; 0
    272a:	40 ec       	ldi	r20, 0xC0	; 192
    272c:	50 e0       	ldi	r21, 0x00	; 0
    272e:	68 e7       	ldi	r22, 0x78	; 120
    2730:	75 e0       	ldi	r23, 0x05	; 5
    2732:	8d ec       	ldi	r24, 0xCD	; 205
    2734:	90 e0       	ldi	r25, 0x00	; 0
    2736:	ce de       	rcall	.-612    	; 0x24d4 <xTaskCreate>
    2738:	81 30       	cpi	r24, 0x01	; 1
    273a:	19 f5       	brne	.+70     	; 0x2782 <vTaskStartScheduler+0x70>
    273c:	00 d6       	rcall	.+3072   	; 0x333e <xTimerCreateTimerTask>
    273e:	81 30       	cpi	r24, 0x01	; 1
    2740:	01 f5       	brne	.+64     	; 0x2782 <vTaskStartScheduler+0x70>
    2742:	f8 94       	cli
    2744:	8f ef       	ldi	r24, 0xFF	; 255
    2746:	9f ef       	ldi	r25, 0xFF	; 255
    2748:	dc 01       	movw	r26, r24
    274a:	80 93 dd 18 	sts	0x18DD, r24	; 0x8018dd <xNextTaskUnblockTime>
    274e:	90 93 de 18 	sts	0x18DE, r25	; 0x8018de <xNextTaskUnblockTime+0x1>
    2752:	a0 93 df 18 	sts	0x18DF, r26	; 0x8018df <xNextTaskUnblockTime+0x2>
    2756:	b0 93 e0 18 	sts	0x18E0, r27	; 0x8018e0 <xNextTaskUnblockTime+0x3>
    275a:	81 e0       	ldi	r24, 0x01	; 1
    275c:	80 93 e5 18 	sts	0x18E5, r24	; 0x8018e5 <xSchedulerRunning>
    2760:	10 92 e7 18 	sts	0x18E7, r1	; 0x8018e7 <xTickCount>
    2764:	10 92 e8 18 	sts	0x18E8, r1	; 0x8018e8 <xTickCount+0x1>
    2768:	10 92 e9 18 	sts	0x18E9, r1	; 0x8018e9 <xTickCount+0x2>
    276c:	10 92 ea 18 	sts	0x18EA, r1	; 0x8018ea <xTickCount+0x3>
    2770:	e0 91 54 19 	lds	r30, 0x1954	; 0x801954 <pxCurrentTCB>
    2774:	f0 91 55 19 	lds	r31, 0x1955	; 0x801955 <pxCurrentTCB+0x1>
    2778:	81 a5       	ldd	r24, Z+41	; 0x29
    277a:	0e 94 3e 07 	call	0xe7c	; 0xe7c <task_switch_in>
    277e:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <xPortStartScheduler>
    2782:	0f 91       	pop	r16
    2784:	ff 90       	pop	r15
    2786:	ef 90       	pop	r14
    2788:	08 95       	ret

0000278a <vTaskSuspendAll>:
    278a:	80 91 da 18 	lds	r24, 0x18DA	; 0x8018da <uxSchedulerSuspended>
    278e:	8f 5f       	subi	r24, 0xFF	; 255
    2790:	80 93 da 18 	sts	0x18DA, r24	; 0x8018da <uxSchedulerSuspended>
    2794:	08 95       	ret

00002796 <xTaskGetTickCount>:
    2796:	0f b6       	in	r0, 0x3f	; 63
    2798:	f8 94       	cli
    279a:	0f 92       	push	r0
    279c:	60 91 e7 18 	lds	r22, 0x18E7	; 0x8018e7 <xTickCount>
    27a0:	70 91 e8 18 	lds	r23, 0x18E8	; 0x8018e8 <xTickCount+0x1>
    27a4:	80 91 e9 18 	lds	r24, 0x18E9	; 0x8018e9 <xTickCount+0x2>
    27a8:	90 91 ea 18 	lds	r25, 0x18EA	; 0x8018ea <xTickCount+0x3>
    27ac:	0f 90       	pop	r0
    27ae:	0f be       	out	0x3f, r0	; 63
    27b0:	08 95       	ret

000027b2 <xTaskIncrementTick>:
    27b2:	9f 92       	push	r9
    27b4:	af 92       	push	r10
    27b6:	bf 92       	push	r11
    27b8:	cf 92       	push	r12
    27ba:	df 92       	push	r13
    27bc:	ef 92       	push	r14
    27be:	ff 92       	push	r15
    27c0:	0f 93       	push	r16
    27c2:	1f 93       	push	r17
    27c4:	cf 93       	push	r28
    27c6:	df 93       	push	r29
    27c8:	80 91 da 18 	lds	r24, 0x18DA	; 0x8018da <uxSchedulerSuspended>
    27cc:	81 11       	cpse	r24, r1
    27ce:	ad c0       	rjmp	.+346    	; 0x292a <xTaskIncrementTick+0x178>
    27d0:	c0 90 e7 18 	lds	r12, 0x18E7	; 0x8018e7 <xTickCount>
    27d4:	d0 90 e8 18 	lds	r13, 0x18E8	; 0x8018e8 <xTickCount+0x1>
    27d8:	e0 90 e9 18 	lds	r14, 0x18E9	; 0x8018e9 <xTickCount+0x2>
    27dc:	f0 90 ea 18 	lds	r15, 0x18EA	; 0x8018ea <xTickCount+0x3>
    27e0:	8f ef       	ldi	r24, 0xFF	; 255
    27e2:	c8 1a       	sub	r12, r24
    27e4:	d8 0a       	sbc	r13, r24
    27e6:	e8 0a       	sbc	r14, r24
    27e8:	f8 0a       	sbc	r15, r24
    27ea:	c0 92 e7 18 	sts	0x18E7, r12	; 0x8018e7 <xTickCount>
    27ee:	d0 92 e8 18 	sts	0x18E8, r13	; 0x8018e8 <xTickCount+0x1>
    27f2:	e0 92 e9 18 	sts	0x18E9, r14	; 0x8018e9 <xTickCount+0x2>
    27f6:	f0 92 ea 18 	sts	0x18EA, r15	; 0x8018ea <xTickCount+0x3>
    27fa:	c1 14       	cp	r12, r1
    27fc:	d1 04       	cpc	r13, r1
    27fe:	e1 04       	cpc	r14, r1
    2800:	f1 04       	cpc	r15, r1
    2802:	b1 f4       	brne	.+44     	; 0x2830 <xTaskIncrementTick+0x7e>
    2804:	80 91 10 19 	lds	r24, 0x1910	; 0x801910 <pxDelayedTaskList>
    2808:	90 91 11 19 	lds	r25, 0x1911	; 0x801911 <pxDelayedTaskList+0x1>
    280c:	20 91 0e 19 	lds	r18, 0x190E	; 0x80190e <pxOverflowDelayedTaskList>
    2810:	30 91 0f 19 	lds	r19, 0x190F	; 0x80190f <pxOverflowDelayedTaskList+0x1>
    2814:	30 93 11 19 	sts	0x1911, r19	; 0x801911 <pxDelayedTaskList+0x1>
    2818:	20 93 10 19 	sts	0x1910, r18	; 0x801910 <pxDelayedTaskList>
    281c:	90 93 0f 19 	sts	0x190F, r25	; 0x80190f <pxOverflowDelayedTaskList+0x1>
    2820:	80 93 0e 19 	sts	0x190E, r24	; 0x80190e <pxOverflowDelayedTaskList>
    2824:	80 91 e2 18 	lds	r24, 0x18E2	; 0x8018e2 <xNumOfOverflows>
    2828:	8f 5f       	subi	r24, 0xFF	; 255
    282a:	80 93 e2 18 	sts	0x18E2, r24	; 0x8018e2 <xNumOfOverflows>
    282e:	b2 dd       	rcall	.-1180   	; 0x2394 <prvResetNextTaskUnblockTime>
    2830:	80 91 dd 18 	lds	r24, 0x18DD	; 0x8018dd <xNextTaskUnblockTime>
    2834:	90 91 de 18 	lds	r25, 0x18DE	; 0x8018de <xNextTaskUnblockTime+0x1>
    2838:	a0 91 df 18 	lds	r26, 0x18DF	; 0x8018df <xNextTaskUnblockTime+0x2>
    283c:	b0 91 e0 18 	lds	r27, 0x18E0	; 0x8018e0 <xNextTaskUnblockTime+0x3>
    2840:	c8 16       	cp	r12, r24
    2842:	d9 06       	cpc	r13, r25
    2844:	ea 06       	cpc	r14, r26
    2846:	fb 06       	cpc	r15, r27
    2848:	10 f4       	brcc	.+4      	; 0x284e <xTaskIncrementTick+0x9c>
    284a:	b1 2c       	mov	r11, r1
    284c:	5d c0       	rjmp	.+186    	; 0x2908 <xTaskIncrementTick+0x156>
    284e:	b1 2c       	mov	r11, r1
    2850:	0f 2e       	mov	r0, r31
    2852:	fb e0       	ldi	r31, 0x0B	; 11
    2854:	af 2e       	mov	r10, r31
    2856:	f0 2d       	mov	r31, r0
    2858:	99 24       	eor	r9, r9
    285a:	93 94       	inc	r9
    285c:	e0 91 10 19 	lds	r30, 0x1910	; 0x801910 <pxDelayedTaskList>
    2860:	f0 91 11 19 	lds	r31, 0x1911	; 0x801911 <pxDelayedTaskList+0x1>
    2864:	80 81       	ld	r24, Z
    2866:	81 11       	cpse	r24, r1
    2868:	0c c0       	rjmp	.+24     	; 0x2882 <xTaskIncrementTick+0xd0>
    286a:	8f ef       	ldi	r24, 0xFF	; 255
    286c:	9f ef       	ldi	r25, 0xFF	; 255
    286e:	dc 01       	movw	r26, r24
    2870:	80 93 dd 18 	sts	0x18DD, r24	; 0x8018dd <xNextTaskUnblockTime>
    2874:	90 93 de 18 	sts	0x18DE, r25	; 0x8018de <xNextTaskUnblockTime+0x1>
    2878:	a0 93 df 18 	sts	0x18DF, r26	; 0x8018df <xNextTaskUnblockTime+0x2>
    287c:	b0 93 e0 18 	sts	0x18E0, r27	; 0x8018e0 <xNextTaskUnblockTime+0x3>
    2880:	43 c0       	rjmp	.+134    	; 0x2908 <xTaskIncrementTick+0x156>
    2882:	e0 91 10 19 	lds	r30, 0x1910	; 0x801910 <pxDelayedTaskList>
    2886:	f0 91 11 19 	lds	r31, 0x1911	; 0x801911 <pxDelayedTaskList+0x1>
    288a:	07 80       	ldd	r0, Z+7	; 0x07
    288c:	f0 85       	ldd	r31, Z+8	; 0x08
    288e:	e0 2d       	mov	r30, r0
    2890:	c0 85       	ldd	r28, Z+8	; 0x08
    2892:	d1 85       	ldd	r29, Z+9	; 0x09
    2894:	8a 81       	ldd	r24, Y+2	; 0x02
    2896:	9b 81       	ldd	r25, Y+3	; 0x03
    2898:	ac 81       	ldd	r26, Y+4	; 0x04
    289a:	bd 81       	ldd	r27, Y+5	; 0x05
    289c:	c8 16       	cp	r12, r24
    289e:	d9 06       	cpc	r13, r25
    28a0:	ea 06       	cpc	r14, r26
    28a2:	fb 06       	cpc	r15, r27
    28a4:	48 f4       	brcc	.+18     	; 0x28b8 <xTaskIncrementTick+0x106>
    28a6:	80 93 dd 18 	sts	0x18DD, r24	; 0x8018dd <xNextTaskUnblockTime>
    28aa:	90 93 de 18 	sts	0x18DE, r25	; 0x8018de <xNextTaskUnblockTime+0x1>
    28ae:	a0 93 df 18 	sts	0x18DF, r26	; 0x8018df <xNextTaskUnblockTime+0x2>
    28b2:	b0 93 e0 18 	sts	0x18E0, r27	; 0x8018e0 <xNextTaskUnblockTime+0x3>
    28b6:	28 c0       	rjmp	.+80     	; 0x2908 <xTaskIncrementTick+0x156>
    28b8:	8e 01       	movw	r16, r28
    28ba:	0e 5f       	subi	r16, 0xFE	; 254
    28bc:	1f 4f       	sbci	r17, 0xFF	; 255
    28be:	c8 01       	movw	r24, r16
    28c0:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <uxListRemove>
    28c4:	88 8d       	ldd	r24, Y+24	; 0x18
    28c6:	99 8d       	ldd	r25, Y+25	; 0x19
    28c8:	89 2b       	or	r24, r25
    28ca:	21 f0       	breq	.+8      	; 0x28d4 <xTaskIncrementTick+0x122>
    28cc:	ce 01       	movw	r24, r28
    28ce:	0e 96       	adiw	r24, 0x0e	; 14
    28d0:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <uxListRemove>
    28d4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    28d6:	90 91 e6 18 	lds	r25, 0x18E6	; 0x8018e6 <uxTopReadyPriority>
    28da:	98 17       	cp	r25, r24
    28dc:	10 f4       	brcc	.+4      	; 0x28e2 <xTaskIncrementTick+0x130>
    28de:	80 93 e6 18 	sts	0x18E6, r24	; 0x8018e6 <uxTopReadyPriority>
    28e2:	a8 9e       	mul	r10, r24
    28e4:	c0 01       	movw	r24, r0
    28e6:	11 24       	eor	r1, r1
    28e8:	b8 01       	movw	r22, r16
    28ea:	88 5d       	subi	r24, 0xD8	; 216
    28ec:	96 4e       	sbci	r25, 0xE6	; 230
    28ee:	0e 94 06 0a 	call	0x140c	; 0x140c <vListInsertEnd>
    28f2:	e0 91 54 19 	lds	r30, 0x1954	; 0x801954 <pxCurrentTCB>
    28f6:	f0 91 55 19 	lds	r31, 0x1955	; 0x801955 <pxCurrentTCB+0x1>
    28fa:	9a 8d       	ldd	r25, Y+26	; 0x1a
    28fc:	82 8d       	ldd	r24, Z+26	; 0x1a
    28fe:	98 17       	cp	r25, r24
    2900:	08 f4       	brcc	.+2      	; 0x2904 <xTaskIncrementTick+0x152>
    2902:	ac cf       	rjmp	.-168    	; 0x285c <xTaskIncrementTick+0xaa>
    2904:	b9 2c       	mov	r11, r9
    2906:	aa cf       	rjmp	.-172    	; 0x285c <xTaskIncrementTick+0xaa>
    2908:	e0 91 54 19 	lds	r30, 0x1954	; 0x801954 <pxCurrentTCB>
    290c:	f0 91 55 19 	lds	r31, 0x1955	; 0x801955 <pxCurrentTCB+0x1>
    2910:	e2 8d       	ldd	r30, Z+26	; 0x1a
    2912:	8b e0       	ldi	r24, 0x0B	; 11
    2914:	e8 9f       	mul	r30, r24
    2916:	f0 01       	movw	r30, r0
    2918:	11 24       	eor	r1, r1
    291a:	e8 5d       	subi	r30, 0xD8	; 216
    291c:	f6 4e       	sbci	r31, 0xE6	; 230
    291e:	80 81       	ld	r24, Z
    2920:	82 30       	cpi	r24, 0x02	; 2
    2922:	48 f0       	brcs	.+18     	; 0x2936 <xTaskIncrementTick+0x184>
    2924:	bb 24       	eor	r11, r11
    2926:	b3 94       	inc	r11
    2928:	06 c0       	rjmp	.+12     	; 0x2936 <xTaskIncrementTick+0x184>
    292a:	80 91 e4 18 	lds	r24, 0x18E4	; 0x8018e4 <uxPendedTicks>
    292e:	8f 5f       	subi	r24, 0xFF	; 255
    2930:	80 93 e4 18 	sts	0x18E4, r24	; 0x8018e4 <uxPendedTicks>
    2934:	b1 2c       	mov	r11, r1
    2936:	80 91 e3 18 	lds	r24, 0x18E3	; 0x8018e3 <xYieldPending>
    293a:	88 23       	and	r24, r24
    293c:	11 f0       	breq	.+4      	; 0x2942 <xTaskIncrementTick+0x190>
    293e:	bb 24       	eor	r11, r11
    2940:	b3 94       	inc	r11
    2942:	8b 2d       	mov	r24, r11
    2944:	df 91       	pop	r29
    2946:	cf 91       	pop	r28
    2948:	1f 91       	pop	r17
    294a:	0f 91       	pop	r16
    294c:	ff 90       	pop	r15
    294e:	ef 90       	pop	r14
    2950:	df 90       	pop	r13
    2952:	cf 90       	pop	r12
    2954:	bf 90       	pop	r11
    2956:	af 90       	pop	r10
    2958:	9f 90       	pop	r9
    295a:	08 95       	ret

0000295c <xTaskResumeAll>:
    295c:	cf 92       	push	r12
    295e:	df 92       	push	r13
    2960:	ef 92       	push	r14
    2962:	ff 92       	push	r15
    2964:	0f 93       	push	r16
    2966:	1f 93       	push	r17
    2968:	cf 93       	push	r28
    296a:	df 93       	push	r29
    296c:	0f b6       	in	r0, 0x3f	; 63
    296e:	f8 94       	cli
    2970:	0f 92       	push	r0
    2972:	80 91 da 18 	lds	r24, 0x18DA	; 0x8018da <uxSchedulerSuspended>
    2976:	81 50       	subi	r24, 0x01	; 1
    2978:	80 93 da 18 	sts	0x18DA, r24	; 0x8018da <uxSchedulerSuspended>
    297c:	80 91 da 18 	lds	r24, 0x18DA	; 0x8018da <uxSchedulerSuspended>
    2980:	81 11       	cpse	r24, r1
    2982:	5a c0       	rjmp	.+180    	; 0x2a38 <xTaskResumeAll+0xdc>
    2984:	80 91 eb 18 	lds	r24, 0x18EB	; 0x8018eb <uxCurrentNumberOfTasks>
    2988:	81 11       	cpse	r24, r1
    298a:	2c c0       	rjmp	.+88     	; 0x29e4 <xTaskResumeAll+0x88>
    298c:	58 c0       	rjmp	.+176    	; 0x2a3e <xTaskResumeAll+0xe2>
    298e:	d7 01       	movw	r26, r14
    2990:	17 96       	adiw	r26, 0x07	; 7
    2992:	ed 91       	ld	r30, X+
    2994:	fc 91       	ld	r31, X
    2996:	18 97       	sbiw	r26, 0x08	; 8
    2998:	c0 85       	ldd	r28, Z+8	; 0x08
    299a:	d1 85       	ldd	r29, Z+9	; 0x09
    299c:	ce 01       	movw	r24, r28
    299e:	0e 96       	adiw	r24, 0x0e	; 14
    29a0:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <uxListRemove>
    29a4:	8e 01       	movw	r16, r28
    29a6:	0e 5f       	subi	r16, 0xFE	; 254
    29a8:	1f 4f       	sbci	r17, 0xFF	; 255
    29aa:	c8 01       	movw	r24, r16
    29ac:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <uxListRemove>
    29b0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    29b2:	90 91 e6 18 	lds	r25, 0x18E6	; 0x8018e6 <uxTopReadyPriority>
    29b6:	98 17       	cp	r25, r24
    29b8:	10 f4       	brcc	.+4      	; 0x29be <xTaskResumeAll+0x62>
    29ba:	80 93 e6 18 	sts	0x18E6, r24	; 0x8018e6 <uxTopReadyPriority>
    29be:	d8 9e       	mul	r13, r24
    29c0:	c0 01       	movw	r24, r0
    29c2:	11 24       	eor	r1, r1
    29c4:	b8 01       	movw	r22, r16
    29c6:	88 5d       	subi	r24, 0xD8	; 216
    29c8:	96 4e       	sbci	r25, 0xE6	; 230
    29ca:	0e 94 06 0a 	call	0x140c	; 0x140c <vListInsertEnd>
    29ce:	e0 91 54 19 	lds	r30, 0x1954	; 0x801954 <pxCurrentTCB>
    29d2:	f0 91 55 19 	lds	r31, 0x1955	; 0x801955 <pxCurrentTCB+0x1>
    29d6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    29d8:	82 8d       	ldd	r24, Z+26	; 0x1a
    29da:	98 17       	cp	r25, r24
    29dc:	88 f0       	brcs	.+34     	; 0x2a00 <xTaskResumeAll+0xa4>
    29de:	c0 92 e3 18 	sts	0x18E3, r12	; 0x8018e3 <xYieldPending>
    29e2:	0e c0       	rjmp	.+28     	; 0x2a00 <xTaskResumeAll+0xa4>
    29e4:	c0 e0       	ldi	r28, 0x00	; 0
    29e6:	d0 e0       	ldi	r29, 0x00	; 0
    29e8:	0f 2e       	mov	r0, r31
    29ea:	f3 e0       	ldi	r31, 0x03	; 3
    29ec:	ef 2e       	mov	r14, r31
    29ee:	f9 e1       	ldi	r31, 0x19	; 25
    29f0:	ff 2e       	mov	r15, r31
    29f2:	f0 2d       	mov	r31, r0
    29f4:	0f 2e       	mov	r0, r31
    29f6:	fb e0       	ldi	r31, 0x0B	; 11
    29f8:	df 2e       	mov	r13, r31
    29fa:	f0 2d       	mov	r31, r0
    29fc:	cc 24       	eor	r12, r12
    29fe:	c3 94       	inc	r12
    2a00:	f7 01       	movw	r30, r14
    2a02:	80 81       	ld	r24, Z
    2a04:	81 11       	cpse	r24, r1
    2a06:	c3 cf       	rjmp	.-122    	; 0x298e <xTaskResumeAll+0x32>
    2a08:	cd 2b       	or	r28, r29
    2a0a:	09 f0       	breq	.+2      	; 0x2a0e <xTaskResumeAll+0xb2>
    2a0c:	c3 dc       	rcall	.-1658   	; 0x2394 <prvResetNextTaskUnblockTime>
    2a0e:	c0 91 e4 18 	lds	r28, 0x18E4	; 0x8018e4 <uxPendedTicks>
    2a12:	cc 23       	and	r28, r28
    2a14:	49 f0       	breq	.+18     	; 0x2a28 <xTaskResumeAll+0xcc>
    2a16:	d1 e0       	ldi	r29, 0x01	; 1
    2a18:	cc de       	rcall	.-616    	; 0x27b2 <xTaskIncrementTick>
    2a1a:	81 11       	cpse	r24, r1
    2a1c:	d0 93 e3 18 	sts	0x18E3, r29	; 0x8018e3 <xYieldPending>
    2a20:	c1 50       	subi	r28, 0x01	; 1
    2a22:	d1 f7       	brne	.-12     	; 0x2a18 <xTaskResumeAll+0xbc>
    2a24:	10 92 e4 18 	sts	0x18E4, r1	; 0x8018e4 <uxPendedTicks>
    2a28:	80 91 e3 18 	lds	r24, 0x18E3	; 0x8018e3 <xYieldPending>
    2a2c:	88 23       	and	r24, r24
    2a2e:	31 f0       	breq	.+12     	; 0x2a3c <xTaskResumeAll+0xe0>
    2a30:	0e 94 39 0b 	call	0x1672	; 0x1672 <vPortYield>
    2a34:	81 e0       	ldi	r24, 0x01	; 1
    2a36:	03 c0       	rjmp	.+6      	; 0x2a3e <xTaskResumeAll+0xe2>
    2a38:	80 e0       	ldi	r24, 0x00	; 0
    2a3a:	01 c0       	rjmp	.+2      	; 0x2a3e <xTaskResumeAll+0xe2>
    2a3c:	80 e0       	ldi	r24, 0x00	; 0
    2a3e:	0f 90       	pop	r0
    2a40:	0f be       	out	0x3f, r0	; 63
    2a42:	df 91       	pop	r29
    2a44:	cf 91       	pop	r28
    2a46:	1f 91       	pop	r17
    2a48:	0f 91       	pop	r16
    2a4a:	ff 90       	pop	r15
    2a4c:	ef 90       	pop	r14
    2a4e:	df 90       	pop	r13
    2a50:	cf 90       	pop	r12
    2a52:	08 95       	ret

00002a54 <vTaskDelay>:
    2a54:	cf 92       	push	r12
    2a56:	df 92       	push	r13
    2a58:	ef 92       	push	r14
    2a5a:	ff 92       	push	r15
    2a5c:	6b 01       	movw	r12, r22
    2a5e:	7c 01       	movw	r14, r24
    2a60:	67 2b       	or	r22, r23
    2a62:	68 2b       	or	r22, r24
    2a64:	69 2b       	or	r22, r25
    2a66:	41 f0       	breq	.+16     	; 0x2a78 <vTaskDelay+0x24>
    2a68:	90 de       	rcall	.-736    	; 0x278a <vTaskSuspendAll>
    2a6a:	40 e0       	ldi	r20, 0x00	; 0
    2a6c:	c7 01       	movw	r24, r14
    2a6e:	b6 01       	movw	r22, r12
    2a70:	bb dc       	rcall	.-1674   	; 0x23e8 <prvAddCurrentTaskToDelayedList>
    2a72:	74 df       	rcall	.-280    	; 0x295c <xTaskResumeAll>
    2a74:	81 11       	cpse	r24, r1
    2a76:	02 c0       	rjmp	.+4      	; 0x2a7c <vTaskDelay+0x28>
    2a78:	0e 94 39 0b 	call	0x1672	; 0x1672 <vPortYield>
    2a7c:	ff 90       	pop	r15
    2a7e:	ef 90       	pop	r14
    2a80:	df 90       	pop	r13
    2a82:	cf 90       	pop	r12
    2a84:	08 95       	ret

00002a86 <vTaskSwitchContext>:
    2a86:	80 91 da 18 	lds	r24, 0x18DA	; 0x8018da <uxSchedulerSuspended>
    2a8a:	88 23       	and	r24, r24
    2a8c:	21 f0       	breq	.+8      	; 0x2a96 <vTaskSwitchContext+0x10>
    2a8e:	81 e0       	ldi	r24, 0x01	; 1
    2a90:	80 93 e3 18 	sts	0x18E3, r24	; 0x8018e3 <xYieldPending>
    2a94:	08 95       	ret
    2a96:	10 92 e3 18 	sts	0x18E3, r1	; 0x8018e3 <xYieldPending>
    2a9a:	e0 91 54 19 	lds	r30, 0x1954	; 0x801954 <pxCurrentTCB>
    2a9e:	f0 91 55 19 	lds	r31, 0x1955	; 0x801955 <pxCurrentTCB+0x1>
    2aa2:	81 a5       	ldd	r24, Z+41	; 0x29
    2aa4:	0e 94 48 07 	call	0xe90	; 0xe90 <task_switch_out>
    2aa8:	a0 91 54 19 	lds	r26, 0x1954	; 0x801954 <pxCurrentTCB>
    2aac:	b0 91 55 19 	lds	r27, 0x1955	; 0x801955 <pxCurrentTCB+0x1>
    2ab0:	e0 91 54 19 	lds	r30, 0x1954	; 0x801954 <pxCurrentTCB>
    2ab4:	f0 91 55 19 	lds	r31, 0x1955	; 0x801955 <pxCurrentTCB+0x1>
    2ab8:	2d 91       	ld	r18, X+
    2aba:	3c 91       	ld	r19, X
    2abc:	83 8d       	ldd	r24, Z+27	; 0x1b
    2abe:	94 8d       	ldd	r25, Z+28	; 0x1c
    2ac0:	82 17       	cp	r24, r18
    2ac2:	93 07       	cpc	r25, r19
    2ac4:	58 f0       	brcs	.+22     	; 0x2adc <vTaskSwitchContext+0x56>
    2ac6:	60 91 54 19 	lds	r22, 0x1954	; 0x801954 <pxCurrentTCB>
    2aca:	70 91 55 19 	lds	r23, 0x1955	; 0x801955 <pxCurrentTCB+0x1>
    2ace:	80 91 54 19 	lds	r24, 0x1954	; 0x801954 <pxCurrentTCB>
    2ad2:	90 91 55 19 	lds	r25, 0x1955	; 0x801955 <pxCurrentTCB+0x1>
    2ad6:	63 5e       	subi	r22, 0xE3	; 227
    2ad8:	7f 4f       	sbci	r23, 0xFF	; 255
    2ada:	53 d5       	rcall	.+2726   	; 0x3582 <vApplicationStackOverflowHook>
    2adc:	80 91 e6 18 	lds	r24, 0x18E6	; 0x8018e6 <uxTopReadyPriority>
    2ae0:	28 2f       	mov	r18, r24
    2ae2:	30 e0       	ldi	r19, 0x00	; 0
    2ae4:	9b e0       	ldi	r25, 0x0B	; 11
    2ae6:	89 9f       	mul	r24, r25
    2ae8:	f0 01       	movw	r30, r0
    2aea:	11 24       	eor	r1, r1
    2aec:	e8 5d       	subi	r30, 0xD8	; 216
    2aee:	f6 4e       	sbci	r31, 0xE6	; 230
    2af0:	90 81       	ld	r25, Z
    2af2:	91 11       	cpse	r25, r1
    2af4:	0e c0       	rjmp	.+28     	; 0x2b12 <vTaskSwitchContext+0x8c>
    2af6:	4b e0       	ldi	r20, 0x0B	; 11
    2af8:	81 50       	subi	r24, 0x01	; 1
    2afa:	28 2f       	mov	r18, r24
    2afc:	30 e0       	ldi	r19, 0x00	; 0
    2afe:	42 9f       	mul	r20, r18
    2b00:	f0 01       	movw	r30, r0
    2b02:	43 9f       	mul	r20, r19
    2b04:	f0 0d       	add	r31, r0
    2b06:	11 24       	eor	r1, r1
    2b08:	e8 5d       	subi	r30, 0xD8	; 216
    2b0a:	f6 4e       	sbci	r31, 0xE6	; 230
    2b0c:	90 81       	ld	r25, Z
    2b0e:	99 23       	and	r25, r25
    2b10:	99 f3       	breq	.-26     	; 0x2af8 <vTaskSwitchContext+0x72>
    2b12:	9b e0       	ldi	r25, 0x0B	; 11
    2b14:	92 9f       	mul	r25, r18
    2b16:	a0 01       	movw	r20, r0
    2b18:	93 9f       	mul	r25, r19
    2b1a:	50 0d       	add	r21, r0
    2b1c:	11 24       	eor	r1, r1
    2b1e:	da 01       	movw	r26, r20
    2b20:	a8 5d       	subi	r26, 0xD8	; 216
    2b22:	b6 4e       	sbci	r27, 0xE6	; 230
    2b24:	11 96       	adiw	r26, 0x01	; 1
    2b26:	ed 91       	ld	r30, X+
    2b28:	fc 91       	ld	r31, X
    2b2a:	12 97       	sbiw	r26, 0x02	; 2
    2b2c:	04 80       	ldd	r0, Z+4	; 0x04
    2b2e:	f5 81       	ldd	r31, Z+5	; 0x05
    2b30:	e0 2d       	mov	r30, r0
    2b32:	12 96       	adiw	r26, 0x02	; 2
    2b34:	fc 93       	st	X, r31
    2b36:	ee 93       	st	-X, r30
    2b38:	11 97       	sbiw	r26, 0x01	; 1
    2b3a:	45 5d       	subi	r20, 0xD5	; 213
    2b3c:	56 4e       	sbci	r21, 0xE6	; 230
    2b3e:	e4 17       	cp	r30, r20
    2b40:	f5 07       	cpc	r31, r21
    2b42:	29 f4       	brne	.+10     	; 0x2b4e <vTaskSwitchContext+0xc8>
    2b44:	44 81       	ldd	r20, Z+4	; 0x04
    2b46:	55 81       	ldd	r21, Z+5	; 0x05
    2b48:	fd 01       	movw	r30, r26
    2b4a:	52 83       	std	Z+2, r21	; 0x02
    2b4c:	41 83       	std	Z+1, r20	; 0x01
    2b4e:	9b e0       	ldi	r25, 0x0B	; 11
    2b50:	92 9f       	mul	r25, r18
    2b52:	f0 01       	movw	r30, r0
    2b54:	93 9f       	mul	r25, r19
    2b56:	f0 0d       	add	r31, r0
    2b58:	11 24       	eor	r1, r1
    2b5a:	e8 5d       	subi	r30, 0xD8	; 216
    2b5c:	f6 4e       	sbci	r31, 0xE6	; 230
    2b5e:	01 80       	ldd	r0, Z+1	; 0x01
    2b60:	f2 81       	ldd	r31, Z+2	; 0x02
    2b62:	e0 2d       	mov	r30, r0
    2b64:	20 85       	ldd	r18, Z+8	; 0x08
    2b66:	31 85       	ldd	r19, Z+9	; 0x09
    2b68:	30 93 55 19 	sts	0x1955, r19	; 0x801955 <pxCurrentTCB+0x1>
    2b6c:	20 93 54 19 	sts	0x1954, r18	; 0x801954 <pxCurrentTCB>
    2b70:	80 93 e6 18 	sts	0x18E6, r24	; 0x8018e6 <uxTopReadyPriority>
    2b74:	e0 91 54 19 	lds	r30, 0x1954	; 0x801954 <pxCurrentTCB>
    2b78:	f0 91 55 19 	lds	r31, 0x1955	; 0x801955 <pxCurrentTCB+0x1>
    2b7c:	81 a5       	ldd	r24, Z+41	; 0x29
    2b7e:	0c 94 3e 07 	jmp	0xe7c	; 0xe7c <task_switch_in>
    2b82:	08 95       	ret

00002b84 <vTaskPlaceOnEventList>:
    2b84:	cf 92       	push	r12
    2b86:	df 92       	push	r13
    2b88:	ef 92       	push	r14
    2b8a:	ff 92       	push	r15
    2b8c:	6a 01       	movw	r12, r20
    2b8e:	7b 01       	movw	r14, r22
    2b90:	60 91 54 19 	lds	r22, 0x1954	; 0x801954 <pxCurrentTCB>
    2b94:	70 91 55 19 	lds	r23, 0x1955	; 0x801955 <pxCurrentTCB+0x1>
    2b98:	62 5f       	subi	r22, 0xF2	; 242
    2b9a:	7f 4f       	sbci	r23, 0xFF	; 255
    2b9c:	0e 94 27 0a 	call	0x144e	; 0x144e <vListInsert>
    2ba0:	41 e0       	ldi	r20, 0x01	; 1
    2ba2:	c7 01       	movw	r24, r14
    2ba4:	b6 01       	movw	r22, r12
    2ba6:	20 dc       	rcall	.-1984   	; 0x23e8 <prvAddCurrentTaskToDelayedList>
    2ba8:	ff 90       	pop	r15
    2baa:	ef 90       	pop	r14
    2bac:	df 90       	pop	r13
    2bae:	cf 90       	pop	r12
    2bb0:	08 95       	ret

00002bb2 <vTaskPlaceOnUnorderedEventList>:
    2bb2:	cf 92       	push	r12
    2bb4:	df 92       	push	r13
    2bb6:	ef 92       	push	r14
    2bb8:	ff 92       	push	r15
    2bba:	0f 93       	push	r16
    2bbc:	1f 93       	push	r17
    2bbe:	68 01       	movw	r12, r16
    2bc0:	79 01       	movw	r14, r18
    2bc2:	e0 91 54 19 	lds	r30, 0x1954	; 0x801954 <pxCurrentTCB>
    2bc6:	f0 91 55 19 	lds	r31, 0x1955	; 0x801955 <pxCurrentTCB+0x1>
    2bca:	70 68       	ori	r23, 0x80	; 128
    2bcc:	46 87       	std	Z+14, r20	; 0x0e
    2bce:	57 87       	std	Z+15, r21	; 0x0f
    2bd0:	60 8b       	std	Z+16, r22	; 0x10
    2bd2:	71 8b       	std	Z+17, r23	; 0x11
    2bd4:	60 91 54 19 	lds	r22, 0x1954	; 0x801954 <pxCurrentTCB>
    2bd8:	70 91 55 19 	lds	r23, 0x1955	; 0x801955 <pxCurrentTCB+0x1>
    2bdc:	62 5f       	subi	r22, 0xF2	; 242
    2bde:	7f 4f       	sbci	r23, 0xFF	; 255
    2be0:	0e 94 06 0a 	call	0x140c	; 0x140c <vListInsertEnd>
    2be4:	41 e0       	ldi	r20, 0x01	; 1
    2be6:	c7 01       	movw	r24, r14
    2be8:	b6 01       	movw	r22, r12
    2bea:	fe db       	rcall	.-2052   	; 0x23e8 <prvAddCurrentTaskToDelayedList>
    2bec:	1f 91       	pop	r17
    2bee:	0f 91       	pop	r16
    2bf0:	ff 90       	pop	r15
    2bf2:	ef 90       	pop	r14
    2bf4:	df 90       	pop	r13
    2bf6:	cf 90       	pop	r12
    2bf8:	08 95       	ret

00002bfa <vTaskPlaceOnEventListRestricted>:
    2bfa:	cf 92       	push	r12
    2bfc:	df 92       	push	r13
    2bfe:	ef 92       	push	r14
    2c00:	ff 92       	push	r15
    2c02:	cf 93       	push	r28
    2c04:	6a 01       	movw	r12, r20
    2c06:	7b 01       	movw	r14, r22
    2c08:	c2 2f       	mov	r28, r18
    2c0a:	60 91 54 19 	lds	r22, 0x1954	; 0x801954 <pxCurrentTCB>
    2c0e:	70 91 55 19 	lds	r23, 0x1955	; 0x801955 <pxCurrentTCB+0x1>
    2c12:	62 5f       	subi	r22, 0xF2	; 242
    2c14:	7f 4f       	sbci	r23, 0xFF	; 255
    2c16:	0e 94 06 0a 	call	0x140c	; 0x140c <vListInsertEnd>
    2c1a:	cc 23       	and	r28, r28
    2c1c:	21 f0       	breq	.+8      	; 0x2c26 <vTaskPlaceOnEventListRestricted+0x2c>
    2c1e:	cc 24       	eor	r12, r12
    2c20:	ca 94       	dec	r12
    2c22:	dc 2c       	mov	r13, r12
    2c24:	76 01       	movw	r14, r12
    2c26:	4c 2f       	mov	r20, r28
    2c28:	c7 01       	movw	r24, r14
    2c2a:	b6 01       	movw	r22, r12
    2c2c:	dd db       	rcall	.-2118   	; 0x23e8 <prvAddCurrentTaskToDelayedList>
    2c2e:	cf 91       	pop	r28
    2c30:	ff 90       	pop	r15
    2c32:	ef 90       	pop	r14
    2c34:	df 90       	pop	r13
    2c36:	cf 90       	pop	r12
    2c38:	08 95       	ret

00002c3a <xTaskRemoveFromEventList>:
    2c3a:	0f 93       	push	r16
    2c3c:	1f 93       	push	r17
    2c3e:	cf 93       	push	r28
    2c40:	df 93       	push	r29
    2c42:	dc 01       	movw	r26, r24
    2c44:	17 96       	adiw	r26, 0x07	; 7
    2c46:	ed 91       	ld	r30, X+
    2c48:	fc 91       	ld	r31, X
    2c4a:	18 97       	sbiw	r26, 0x08	; 8
    2c4c:	c0 85       	ldd	r28, Z+8	; 0x08
    2c4e:	d1 85       	ldd	r29, Z+9	; 0x09
    2c50:	8e 01       	movw	r16, r28
    2c52:	02 5f       	subi	r16, 0xF2	; 242
    2c54:	1f 4f       	sbci	r17, 0xFF	; 255
    2c56:	c8 01       	movw	r24, r16
    2c58:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <uxListRemove>
    2c5c:	80 91 da 18 	lds	r24, 0x18DA	; 0x8018da <uxSchedulerSuspended>
    2c60:	81 11       	cpse	r24, r1
    2c62:	16 c0       	rjmp	.+44     	; 0x2c90 <xTaskRemoveFromEventList+0x56>
    2c64:	0c 50       	subi	r16, 0x0C	; 12
    2c66:	11 09       	sbc	r17, r1
    2c68:	c8 01       	movw	r24, r16
    2c6a:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <uxListRemove>
    2c6e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2c70:	90 91 e6 18 	lds	r25, 0x18E6	; 0x8018e6 <uxTopReadyPriority>
    2c74:	98 17       	cp	r25, r24
    2c76:	10 f4       	brcc	.+4      	; 0x2c7c <xTaskRemoveFromEventList+0x42>
    2c78:	80 93 e6 18 	sts	0x18E6, r24	; 0x8018e6 <uxTopReadyPriority>
    2c7c:	bb e0       	ldi	r27, 0x0B	; 11
    2c7e:	8b 9f       	mul	r24, r27
    2c80:	c0 01       	movw	r24, r0
    2c82:	11 24       	eor	r1, r1
    2c84:	b8 01       	movw	r22, r16
    2c86:	88 5d       	subi	r24, 0xD8	; 216
    2c88:	96 4e       	sbci	r25, 0xE6	; 230
    2c8a:	0e 94 06 0a 	call	0x140c	; 0x140c <vListInsertEnd>
    2c8e:	05 c0       	rjmp	.+10     	; 0x2c9a <xTaskRemoveFromEventList+0x60>
    2c90:	b8 01       	movw	r22, r16
    2c92:	83 e0       	ldi	r24, 0x03	; 3
    2c94:	99 e1       	ldi	r25, 0x19	; 25
    2c96:	0e 94 06 0a 	call	0x140c	; 0x140c <vListInsertEnd>
    2c9a:	e0 91 54 19 	lds	r30, 0x1954	; 0x801954 <pxCurrentTCB>
    2c9e:	f0 91 55 19 	lds	r31, 0x1955	; 0x801955 <pxCurrentTCB+0x1>
    2ca2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2ca4:	82 8d       	ldd	r24, Z+26	; 0x1a
    2ca6:	89 17       	cp	r24, r25
    2ca8:	20 f4       	brcc	.+8      	; 0x2cb2 <xTaskRemoveFromEventList+0x78>
    2caa:	81 e0       	ldi	r24, 0x01	; 1
    2cac:	80 93 e3 18 	sts	0x18E3, r24	; 0x8018e3 <xYieldPending>
    2cb0:	01 c0       	rjmp	.+2      	; 0x2cb4 <xTaskRemoveFromEventList+0x7a>
    2cb2:	80 e0       	ldi	r24, 0x00	; 0
    2cb4:	df 91       	pop	r29
    2cb6:	cf 91       	pop	r28
    2cb8:	1f 91       	pop	r17
    2cba:	0f 91       	pop	r16
    2cbc:	08 95       	ret

00002cbe <vTaskRemoveFromUnorderedEventList>:
    2cbe:	0f 93       	push	r16
    2cc0:	1f 93       	push	r17
    2cc2:	cf 93       	push	r28
    2cc4:	df 93       	push	r29
    2cc6:	70 68       	ori	r23, 0x80	; 128
    2cc8:	fc 01       	movw	r30, r24
    2cca:	40 83       	st	Z, r20
    2ccc:	51 83       	std	Z+1, r21	; 0x01
    2cce:	62 83       	std	Z+2, r22	; 0x02
    2cd0:	73 83       	std	Z+3, r23	; 0x03
    2cd2:	c0 85       	ldd	r28, Z+8	; 0x08
    2cd4:	d1 85       	ldd	r29, Z+9	; 0x09
    2cd6:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <uxListRemove>
    2cda:	8e 01       	movw	r16, r28
    2cdc:	0e 5f       	subi	r16, 0xFE	; 254
    2cde:	1f 4f       	sbci	r17, 0xFF	; 255
    2ce0:	c8 01       	movw	r24, r16
    2ce2:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <uxListRemove>
    2ce6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2ce8:	90 91 e6 18 	lds	r25, 0x18E6	; 0x8018e6 <uxTopReadyPriority>
    2cec:	98 17       	cp	r25, r24
    2cee:	10 f4       	brcc	.+4      	; 0x2cf4 <vTaskRemoveFromUnorderedEventList+0x36>
    2cf0:	80 93 e6 18 	sts	0x18E6, r24	; 0x8018e6 <uxTopReadyPriority>
    2cf4:	fb e0       	ldi	r31, 0x0B	; 11
    2cf6:	8f 9f       	mul	r24, r31
    2cf8:	c0 01       	movw	r24, r0
    2cfa:	11 24       	eor	r1, r1
    2cfc:	b8 01       	movw	r22, r16
    2cfe:	88 5d       	subi	r24, 0xD8	; 216
    2d00:	96 4e       	sbci	r25, 0xE6	; 230
    2d02:	0e 94 06 0a 	call	0x140c	; 0x140c <vListInsertEnd>
    2d06:	e0 91 54 19 	lds	r30, 0x1954	; 0x801954 <pxCurrentTCB>
    2d0a:	f0 91 55 19 	lds	r31, 0x1955	; 0x801955 <pxCurrentTCB+0x1>
    2d0e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2d10:	82 8d       	ldd	r24, Z+26	; 0x1a
    2d12:	89 17       	cp	r24, r25
    2d14:	18 f4       	brcc	.+6      	; 0x2d1c <vTaskRemoveFromUnorderedEventList+0x5e>
    2d16:	81 e0       	ldi	r24, 0x01	; 1
    2d18:	80 93 e3 18 	sts	0x18E3, r24	; 0x8018e3 <xYieldPending>
    2d1c:	df 91       	pop	r29
    2d1e:	cf 91       	pop	r28
    2d20:	1f 91       	pop	r17
    2d22:	0f 91       	pop	r16
    2d24:	08 95       	ret

00002d26 <vTaskSetTimeOutState>:
    2d26:	0f b6       	in	r0, 0x3f	; 63
    2d28:	f8 94       	cli
    2d2a:	0f 92       	push	r0
    2d2c:	20 91 e2 18 	lds	r18, 0x18E2	; 0x8018e2 <xNumOfOverflows>
    2d30:	fc 01       	movw	r30, r24
    2d32:	20 83       	st	Z, r18
    2d34:	40 91 e7 18 	lds	r20, 0x18E7	; 0x8018e7 <xTickCount>
    2d38:	50 91 e8 18 	lds	r21, 0x18E8	; 0x8018e8 <xTickCount+0x1>
    2d3c:	60 91 e9 18 	lds	r22, 0x18E9	; 0x8018e9 <xTickCount+0x2>
    2d40:	70 91 ea 18 	lds	r23, 0x18EA	; 0x8018ea <xTickCount+0x3>
    2d44:	41 83       	std	Z+1, r20	; 0x01
    2d46:	52 83       	std	Z+2, r21	; 0x02
    2d48:	63 83       	std	Z+3, r22	; 0x03
    2d4a:	74 83       	std	Z+4, r23	; 0x04
    2d4c:	0f 90       	pop	r0
    2d4e:	0f be       	out	0x3f, r0	; 63
    2d50:	08 95       	ret

00002d52 <vTaskInternalSetTimeOutState>:
    2d52:	20 91 e2 18 	lds	r18, 0x18E2	; 0x8018e2 <xNumOfOverflows>
    2d56:	fc 01       	movw	r30, r24
    2d58:	20 83       	st	Z, r18
    2d5a:	40 91 e7 18 	lds	r20, 0x18E7	; 0x8018e7 <xTickCount>
    2d5e:	50 91 e8 18 	lds	r21, 0x18E8	; 0x8018e8 <xTickCount+0x1>
    2d62:	60 91 e9 18 	lds	r22, 0x18E9	; 0x8018e9 <xTickCount+0x2>
    2d66:	70 91 ea 18 	lds	r23, 0x18EA	; 0x8018ea <xTickCount+0x3>
    2d6a:	41 83       	std	Z+1, r20	; 0x01
    2d6c:	52 83       	std	Z+2, r21	; 0x02
    2d6e:	63 83       	std	Z+3, r22	; 0x03
    2d70:	74 83       	std	Z+4, r23	; 0x04
    2d72:	08 95       	ret

00002d74 <xTaskCheckForTimeOut>:
    2d74:	cf 92       	push	r12
    2d76:	df 92       	push	r13
    2d78:	ef 92       	push	r14
    2d7a:	ff 92       	push	r15
    2d7c:	0f 93       	push	r16
    2d7e:	1f 93       	push	r17
    2d80:	cf 93       	push	r28
    2d82:	df 93       	push	r29
    2d84:	fb 01       	movw	r30, r22
    2d86:	0f b6       	in	r0, 0x3f	; 63
    2d88:	f8 94       	cli
    2d8a:	0f 92       	push	r0
    2d8c:	40 91 e7 18 	lds	r20, 0x18E7	; 0x8018e7 <xTickCount>
    2d90:	50 91 e8 18 	lds	r21, 0x18E8	; 0x8018e8 <xTickCount+0x1>
    2d94:	60 91 e9 18 	lds	r22, 0x18E9	; 0x8018e9 <xTickCount+0x2>
    2d98:	70 91 ea 18 	lds	r23, 0x18EA	; 0x8018ea <xTickCount+0x3>
    2d9c:	00 81       	ld	r16, Z
    2d9e:	11 81       	ldd	r17, Z+1	; 0x01
    2da0:	22 81       	ldd	r18, Z+2	; 0x02
    2da2:	33 81       	ldd	r19, Z+3	; 0x03
    2da4:	0f 3f       	cpi	r16, 0xFF	; 255
    2da6:	af ef       	ldi	r26, 0xFF	; 255
    2da8:	1a 07       	cpc	r17, r26
    2daa:	2a 07       	cpc	r18, r26
    2dac:	3a 07       	cpc	r19, r26
    2dae:	49 f1       	breq	.+82     	; 0x2e02 <xTaskCheckForTimeOut+0x8e>
    2db0:	ec 01       	movw	r28, r24
    2db2:	c9 80       	ldd	r12, Y+1	; 0x01
    2db4:	da 80       	ldd	r13, Y+2	; 0x02
    2db6:	eb 80       	ldd	r14, Y+3	; 0x03
    2db8:	fc 80       	ldd	r15, Y+4	; 0x04
    2dba:	a0 91 e2 18 	lds	r26, 0x18E2	; 0x8018e2 <xNumOfOverflows>
    2dbe:	b8 81       	ld	r27, Y
    2dc0:	ba 17       	cp	r27, r26
    2dc2:	29 f0       	breq	.+10     	; 0x2dce <xTaskCheckForTimeOut+0x5a>
    2dc4:	4c 15       	cp	r20, r12
    2dc6:	5d 05       	cpc	r21, r13
    2dc8:	6e 05       	cpc	r22, r14
    2dca:	7f 05       	cpc	r23, r15
    2dcc:	e0 f4       	brcc	.+56     	; 0x2e06 <xTaskCheckForTimeOut+0x92>
    2dce:	4c 19       	sub	r20, r12
    2dd0:	5d 09       	sbc	r21, r13
    2dd2:	6e 09       	sbc	r22, r14
    2dd4:	7f 09       	sbc	r23, r15
    2dd6:	40 17       	cp	r20, r16
    2dd8:	51 07       	cpc	r21, r17
    2dda:	62 07       	cpc	r22, r18
    2ddc:	73 07       	cpc	r23, r19
    2dde:	58 f4       	brcc	.+22     	; 0x2df6 <xTaskCheckForTimeOut+0x82>
    2de0:	04 1b       	sub	r16, r20
    2de2:	15 0b       	sbc	r17, r21
    2de4:	26 0b       	sbc	r18, r22
    2de6:	37 0b       	sbc	r19, r23
    2de8:	00 83       	st	Z, r16
    2dea:	11 83       	std	Z+1, r17	; 0x01
    2dec:	22 83       	std	Z+2, r18	; 0x02
    2dee:	33 83       	std	Z+3, r19	; 0x03
    2df0:	b0 df       	rcall	.-160    	; 0x2d52 <vTaskInternalSetTimeOutState>
    2df2:	80 e0       	ldi	r24, 0x00	; 0
    2df4:	09 c0       	rjmp	.+18     	; 0x2e08 <xTaskCheckForTimeOut+0x94>
    2df6:	10 82       	st	Z, r1
    2df8:	11 82       	std	Z+1, r1	; 0x01
    2dfa:	12 82       	std	Z+2, r1	; 0x02
    2dfc:	13 82       	std	Z+3, r1	; 0x03
    2dfe:	81 e0       	ldi	r24, 0x01	; 1
    2e00:	03 c0       	rjmp	.+6      	; 0x2e08 <xTaskCheckForTimeOut+0x94>
    2e02:	80 e0       	ldi	r24, 0x00	; 0
    2e04:	01 c0       	rjmp	.+2      	; 0x2e08 <xTaskCheckForTimeOut+0x94>
    2e06:	81 e0       	ldi	r24, 0x01	; 1
    2e08:	0f 90       	pop	r0
    2e0a:	0f be       	out	0x3f, r0	; 63
    2e0c:	df 91       	pop	r29
    2e0e:	cf 91       	pop	r28
    2e10:	1f 91       	pop	r17
    2e12:	0f 91       	pop	r16
    2e14:	ff 90       	pop	r15
    2e16:	ef 90       	pop	r14
    2e18:	df 90       	pop	r13
    2e1a:	cf 90       	pop	r12
    2e1c:	08 95       	ret

00002e1e <vTaskMissedYield>:
    2e1e:	81 e0       	ldi	r24, 0x01	; 1
    2e20:	80 93 e3 18 	sts	0x18E3, r24	; 0x8018e3 <xYieldPending>
    2e24:	08 95       	ret

00002e26 <xTaskGetCurrentTaskHandle>:
    2e26:	80 91 54 19 	lds	r24, 0x1954	; 0x801954 <pxCurrentTCB>
    2e2a:	90 91 55 19 	lds	r25, 0x1955	; 0x801955 <pxCurrentTCB+0x1>
    2e2e:	08 95       	ret

00002e30 <xTaskGetSchedulerState>:
    2e30:	80 91 e5 18 	lds	r24, 0x18E5	; 0x8018e5 <xSchedulerRunning>
    2e34:	88 23       	and	r24, r24
    2e36:	31 f0       	breq	.+12     	; 0x2e44 <xTaskGetSchedulerState+0x14>
    2e38:	80 91 da 18 	lds	r24, 0x18DA	; 0x8018da <uxSchedulerSuspended>
    2e3c:	88 23       	and	r24, r24
    2e3e:	21 f0       	breq	.+8      	; 0x2e48 <xTaskGetSchedulerState+0x18>
    2e40:	80 e0       	ldi	r24, 0x00	; 0
    2e42:	08 95       	ret
    2e44:	81 e0       	ldi	r24, 0x01	; 1
    2e46:	08 95       	ret
    2e48:	82 e0       	ldi	r24, 0x02	; 2
    2e4a:	08 95       	ret

00002e4c <xTaskPriorityDisinherit>:
    2e4c:	0f 93       	push	r16
    2e4e:	1f 93       	push	r17
    2e50:	cf 93       	push	r28
    2e52:	df 93       	push	r29
    2e54:	fc 01       	movw	r30, r24
    2e56:	89 2b       	or	r24, r25
    2e58:	79 f1       	breq	.+94     	; 0x2eb8 <xTaskPriorityDisinherit+0x6c>
    2e5a:	80 a5       	ldd	r24, Z+40	; 0x28
    2e5c:	81 50       	subi	r24, 0x01	; 1
    2e5e:	80 a7       	std	Z+40, r24	; 0x28
    2e60:	22 8d       	ldd	r18, Z+26	; 0x1a
    2e62:	97 a1       	ldd	r25, Z+39	; 0x27
    2e64:	29 17       	cp	r18, r25
    2e66:	51 f1       	breq	.+84     	; 0x2ebc <xTaskPriorityDisinherit+0x70>
    2e68:	81 11       	cpse	r24, r1
    2e6a:	2a c0       	rjmp	.+84     	; 0x2ec0 <xTaskPriorityDisinherit+0x74>
    2e6c:	ef 01       	movw	r28, r30
    2e6e:	8f 01       	movw	r16, r30
    2e70:	0e 5f       	subi	r16, 0xFE	; 254
    2e72:	1f 4f       	sbci	r17, 0xFF	; 255
    2e74:	c8 01       	movw	r24, r16
    2e76:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <uxListRemove>
    2e7a:	8f a1       	ldd	r24, Y+39	; 0x27
    2e7c:	8a 8f       	std	Y+26, r24	; 0x1a
    2e7e:	44 e0       	ldi	r20, 0x04	; 4
    2e80:	50 e0       	ldi	r21, 0x00	; 0
    2e82:	60 e0       	ldi	r22, 0x00	; 0
    2e84:	70 e0       	ldi	r23, 0x00	; 0
    2e86:	48 1b       	sub	r20, r24
    2e88:	51 09       	sbc	r21, r1
    2e8a:	61 09       	sbc	r22, r1
    2e8c:	71 09       	sbc	r23, r1
    2e8e:	4e 87       	std	Y+14, r20	; 0x0e
    2e90:	5f 87       	std	Y+15, r21	; 0x0f
    2e92:	68 8b       	std	Y+16, r22	; 0x10
    2e94:	79 8b       	std	Y+17, r23	; 0x11
    2e96:	90 91 e6 18 	lds	r25, 0x18E6	; 0x8018e6 <uxTopReadyPriority>
    2e9a:	98 17       	cp	r25, r24
    2e9c:	10 f4       	brcc	.+4      	; 0x2ea2 <xTaskPriorityDisinherit+0x56>
    2e9e:	80 93 e6 18 	sts	0x18E6, r24	; 0x8018e6 <uxTopReadyPriority>
    2ea2:	2b e0       	ldi	r18, 0x0B	; 11
    2ea4:	82 9f       	mul	r24, r18
    2ea6:	c0 01       	movw	r24, r0
    2ea8:	11 24       	eor	r1, r1
    2eaa:	b8 01       	movw	r22, r16
    2eac:	88 5d       	subi	r24, 0xD8	; 216
    2eae:	96 4e       	sbci	r25, 0xE6	; 230
    2eb0:	0e 94 06 0a 	call	0x140c	; 0x140c <vListInsertEnd>
    2eb4:	81 e0       	ldi	r24, 0x01	; 1
    2eb6:	05 c0       	rjmp	.+10     	; 0x2ec2 <xTaskPriorityDisinherit+0x76>
    2eb8:	80 e0       	ldi	r24, 0x00	; 0
    2eba:	03 c0       	rjmp	.+6      	; 0x2ec2 <xTaskPriorityDisinherit+0x76>
    2ebc:	80 e0       	ldi	r24, 0x00	; 0
    2ebe:	01 c0       	rjmp	.+2      	; 0x2ec2 <xTaskPriorityDisinherit+0x76>
    2ec0:	80 e0       	ldi	r24, 0x00	; 0
    2ec2:	df 91       	pop	r29
    2ec4:	cf 91       	pop	r28
    2ec6:	1f 91       	pop	r17
    2ec8:	0f 91       	pop	r16
    2eca:	08 95       	ret

00002ecc <uxTaskResetEventItemValue>:
    2ecc:	cf 92       	push	r12
    2ece:	df 92       	push	r13
    2ed0:	ef 92       	push	r14
    2ed2:	ff 92       	push	r15
    2ed4:	e0 91 54 19 	lds	r30, 0x1954	; 0x801954 <pxCurrentTCB>
    2ed8:	f0 91 55 19 	lds	r31, 0x1955	; 0x801955 <pxCurrentTCB+0x1>
    2edc:	66 85       	ldd	r22, Z+14	; 0x0e
    2ede:	77 85       	ldd	r23, Z+15	; 0x0f
    2ee0:	80 89       	ldd	r24, Z+16	; 0x10
    2ee2:	91 89       	ldd	r25, Z+17	; 0x11
    2ee4:	e0 91 54 19 	lds	r30, 0x1954	; 0x801954 <pxCurrentTCB>
    2ee8:	f0 91 55 19 	lds	r31, 0x1955	; 0x801955 <pxCurrentTCB+0x1>
    2eec:	a0 91 54 19 	lds	r26, 0x1954	; 0x801954 <pxCurrentTCB>
    2ef0:	b0 91 55 19 	lds	r27, 0x1955	; 0x801955 <pxCurrentTCB+0x1>
    2ef4:	5a 96       	adiw	r26, 0x1a	; 26
    2ef6:	2c 91       	ld	r18, X
    2ef8:	c1 2c       	mov	r12, r1
    2efa:	d1 2c       	mov	r13, r1
    2efc:	76 01       	movw	r14, r12
    2efe:	68 94       	set
    2f00:	c2 f8       	bld	r12, 2
    2f02:	c2 1a       	sub	r12, r18
    2f04:	d1 08       	sbc	r13, r1
    2f06:	e1 08       	sbc	r14, r1
    2f08:	f1 08       	sbc	r15, r1
    2f0a:	c6 86       	std	Z+14, r12	; 0x0e
    2f0c:	d7 86       	std	Z+15, r13	; 0x0f
    2f0e:	e0 8a       	std	Z+16, r14	; 0x10
    2f10:	f1 8a       	std	Z+17, r15	; 0x11
    2f12:	ff 90       	pop	r15
    2f14:	ef 90       	pop	r14
    2f16:	df 90       	pop	r13
    2f18:	cf 90       	pop	r12
    2f1a:	08 95       	ret

00002f1c <xTaskNotifyWait>:
    2f1c:	4f 92       	push	r4
    2f1e:	5f 92       	push	r5
    2f20:	6f 92       	push	r6
    2f22:	7f 92       	push	r7
    2f24:	8f 92       	push	r8
    2f26:	9f 92       	push	r9
    2f28:	af 92       	push	r10
    2f2a:	bf 92       	push	r11
    2f2c:	cf 92       	push	r12
    2f2e:	df 92       	push	r13
    2f30:	ef 92       	push	r14
    2f32:	ff 92       	push	r15
    2f34:	0f 93       	push	r16
    2f36:	1f 93       	push	r17
    2f38:	49 01       	movw	r8, r18
    2f3a:	5a 01       	movw	r10, r20
    2f3c:	0f b6       	in	r0, 0x3f	; 63
    2f3e:	f8 94       	cli
    2f40:	0f 92       	push	r0
    2f42:	e0 91 54 19 	lds	r30, 0x1954	; 0x801954 <pxCurrentTCB>
    2f46:	f0 91 55 19 	lds	r31, 0x1955	; 0x801955 <pxCurrentTCB+0x1>
    2f4a:	27 a5       	ldd	r18, Z+47	; 0x2f
    2f4c:	22 30       	cpi	r18, 0x02	; 2
    2f4e:	39 f1       	breq	.+78     	; 0x2f9e <xTaskNotifyWait+0x82>
    2f50:	e0 91 54 19 	lds	r30, 0x1954	; 0x801954 <pxCurrentTCB>
    2f54:	f0 91 55 19 	lds	r31, 0x1955	; 0x801955 <pxCurrentTCB+0x1>
    2f58:	43 a4       	ldd	r4, Z+43	; 0x2b
    2f5a:	54 a4       	ldd	r5, Z+44	; 0x2c
    2f5c:	65 a4       	ldd	r6, Z+45	; 0x2d
    2f5e:	76 a4       	ldd	r7, Z+46	; 0x2e
    2f60:	dc 01       	movw	r26, r24
    2f62:	cb 01       	movw	r24, r22
    2f64:	80 95       	com	r24
    2f66:	90 95       	com	r25
    2f68:	a0 95       	com	r26
    2f6a:	b0 95       	com	r27
    2f6c:	84 21       	and	r24, r4
    2f6e:	95 21       	and	r25, r5
    2f70:	a6 21       	and	r26, r6
    2f72:	b7 21       	and	r27, r7
    2f74:	83 a7       	std	Z+43, r24	; 0x2b
    2f76:	94 a7       	std	Z+44, r25	; 0x2c
    2f78:	a5 a7       	std	Z+45, r26	; 0x2d
    2f7a:	b6 a7       	std	Z+46, r27	; 0x2e
    2f7c:	e0 91 54 19 	lds	r30, 0x1954	; 0x801954 <pxCurrentTCB>
    2f80:	f0 91 55 19 	lds	r31, 0x1955	; 0x801955 <pxCurrentTCB+0x1>
    2f84:	81 e0       	ldi	r24, 0x01	; 1
    2f86:	87 a7       	std	Z+47, r24	; 0x2f
    2f88:	c1 14       	cp	r12, r1
    2f8a:	d1 04       	cpc	r13, r1
    2f8c:	e1 04       	cpc	r14, r1
    2f8e:	f1 04       	cpc	r15, r1
    2f90:	31 f0       	breq	.+12     	; 0x2f9e <xTaskNotifyWait+0x82>
    2f92:	41 e0       	ldi	r20, 0x01	; 1
    2f94:	c7 01       	movw	r24, r14
    2f96:	b6 01       	movw	r22, r12
    2f98:	27 da       	rcall	.-2994   	; 0x23e8 <prvAddCurrentTaskToDelayedList>
    2f9a:	0e 94 39 0b 	call	0x1672	; 0x1672 <vPortYield>
    2f9e:	0f 90       	pop	r0
    2fa0:	0f be       	out	0x3f, r0	; 63
    2fa2:	0f b6       	in	r0, 0x3f	; 63
    2fa4:	f8 94       	cli
    2fa6:	0f 92       	push	r0
    2fa8:	01 15       	cp	r16, r1
    2faa:	11 05       	cpc	r17, r1
    2fac:	69 f0       	breq	.+26     	; 0x2fc8 <xTaskNotifyWait+0xac>
    2fae:	e0 91 54 19 	lds	r30, 0x1954	; 0x801954 <pxCurrentTCB>
    2fb2:	f0 91 55 19 	lds	r31, 0x1955	; 0x801955 <pxCurrentTCB+0x1>
    2fb6:	83 a5       	ldd	r24, Z+43	; 0x2b
    2fb8:	94 a5       	ldd	r25, Z+44	; 0x2c
    2fba:	a5 a5       	ldd	r26, Z+45	; 0x2d
    2fbc:	b6 a5       	ldd	r27, Z+46	; 0x2e
    2fbe:	f8 01       	movw	r30, r16
    2fc0:	80 83       	st	Z, r24
    2fc2:	91 83       	std	Z+1, r25	; 0x01
    2fc4:	a2 83       	std	Z+2, r26	; 0x02
    2fc6:	b3 83       	std	Z+3, r27	; 0x03
    2fc8:	e0 91 54 19 	lds	r30, 0x1954	; 0x801954 <pxCurrentTCB>
    2fcc:	f0 91 55 19 	lds	r31, 0x1955	; 0x801955 <pxCurrentTCB+0x1>
    2fd0:	87 a5       	ldd	r24, Z+47	; 0x2f
    2fd2:	82 30       	cpi	r24, 0x02	; 2
    2fd4:	b1 f4       	brne	.+44     	; 0x3002 <xTaskNotifyWait+0xe6>
    2fd6:	e0 91 54 19 	lds	r30, 0x1954	; 0x801954 <pxCurrentTCB>
    2fda:	f0 91 55 19 	lds	r31, 0x1955	; 0x801955 <pxCurrentTCB+0x1>
    2fde:	83 a5       	ldd	r24, Z+43	; 0x2b
    2fe0:	94 a5       	ldd	r25, Z+44	; 0x2c
    2fe2:	a5 a5       	ldd	r26, Z+45	; 0x2d
    2fe4:	b6 a5       	ldd	r27, Z+46	; 0x2e
    2fe6:	80 94       	com	r8
    2fe8:	90 94       	com	r9
    2fea:	a0 94       	com	r10
    2fec:	b0 94       	com	r11
    2fee:	88 22       	and	r8, r24
    2ff0:	99 22       	and	r9, r25
    2ff2:	aa 22       	and	r10, r26
    2ff4:	bb 22       	and	r11, r27
    2ff6:	83 a6       	std	Z+43, r8	; 0x2b
    2ff8:	94 a6       	std	Z+44, r9	; 0x2c
    2ffa:	a5 a6       	std	Z+45, r10	; 0x2d
    2ffc:	b6 a6       	std	Z+46, r11	; 0x2e
    2ffe:	81 e0       	ldi	r24, 0x01	; 1
    3000:	01 c0       	rjmp	.+2      	; 0x3004 <xTaskNotifyWait+0xe8>
    3002:	80 e0       	ldi	r24, 0x00	; 0
    3004:	e0 91 54 19 	lds	r30, 0x1954	; 0x801954 <pxCurrentTCB>
    3008:	f0 91 55 19 	lds	r31, 0x1955	; 0x801955 <pxCurrentTCB+0x1>
    300c:	17 a6       	std	Z+47, r1	; 0x2f
    300e:	0f 90       	pop	r0
    3010:	0f be       	out	0x3f, r0	; 63
    3012:	1f 91       	pop	r17
    3014:	0f 91       	pop	r16
    3016:	ff 90       	pop	r15
    3018:	ef 90       	pop	r14
    301a:	df 90       	pop	r13
    301c:	cf 90       	pop	r12
    301e:	bf 90       	pop	r11
    3020:	af 90       	pop	r10
    3022:	9f 90       	pop	r9
    3024:	8f 90       	pop	r8
    3026:	7f 90       	pop	r7
    3028:	6f 90       	pop	r6
    302a:	5f 90       	pop	r5
    302c:	4f 90       	pop	r4
    302e:	08 95       	ret

00003030 <xTaskGenericNotify>:
    3030:	0f 93       	push	r16
    3032:	1f 93       	push	r17
    3034:	cf 93       	push	r28
    3036:	df 93       	push	r29
    3038:	fc 01       	movw	r30, r24
    303a:	0f b6       	in	r0, 0x3f	; 63
    303c:	f8 94       	cli
    303e:	0f 92       	push	r0
    3040:	01 15       	cp	r16, r1
    3042:	11 05       	cpc	r17, r1
    3044:	49 f0       	breq	.+18     	; 0x3058 <xTaskGenericNotify+0x28>
    3046:	83 a5       	ldd	r24, Z+43	; 0x2b
    3048:	94 a5       	ldd	r25, Z+44	; 0x2c
    304a:	a5 a5       	ldd	r26, Z+45	; 0x2d
    304c:	b6 a5       	ldd	r27, Z+46	; 0x2e
    304e:	e8 01       	movw	r28, r16
    3050:	88 83       	st	Y, r24
    3052:	99 83       	std	Y+1, r25	; 0x01
    3054:	aa 83       	std	Y+2, r26	; 0x02
    3056:	bb 83       	std	Y+3, r27	; 0x03
    3058:	87 a5       	ldd	r24, Z+47	; 0x2f
    305a:	92 e0       	ldi	r25, 0x02	; 2
    305c:	97 a7       	std	Z+47, r25	; 0x2f
    305e:	22 30       	cpi	r18, 0x02	; 2
    3060:	b1 f0       	breq	.+44     	; 0x308e <xTaskGenericNotify+0x5e>
    3062:	18 f4       	brcc	.+6      	; 0x306a <xTaskGenericNotify+0x3a>
    3064:	21 30       	cpi	r18, 0x01	; 1
    3066:	31 f0       	breq	.+12     	; 0x3074 <xTaskGenericNotify+0x44>
    3068:	2a c0       	rjmp	.+84     	; 0x30be <xTaskGenericNotify+0x8e>
    306a:	23 30       	cpi	r18, 0x03	; 3
    306c:	e9 f0       	breq	.+58     	; 0x30a8 <xTaskGenericNotify+0x78>
    306e:	24 30       	cpi	r18, 0x04	; 4
    3070:	01 f1       	breq	.+64     	; 0x30b2 <xTaskGenericNotify+0x82>
    3072:	25 c0       	rjmp	.+74     	; 0x30be <xTaskGenericNotify+0x8e>
    3074:	03 a5       	ldd	r16, Z+43	; 0x2b
    3076:	14 a5       	ldd	r17, Z+44	; 0x2c
    3078:	25 a5       	ldd	r18, Z+45	; 0x2d
    307a:	36 a5       	ldd	r19, Z+46	; 0x2e
    307c:	40 2b       	or	r20, r16
    307e:	51 2b       	or	r21, r17
    3080:	62 2b       	or	r22, r18
    3082:	73 2b       	or	r23, r19
    3084:	43 a7       	std	Z+43, r20	; 0x2b
    3086:	54 a7       	std	Z+44, r21	; 0x2c
    3088:	65 a7       	std	Z+45, r22	; 0x2d
    308a:	76 a7       	std	Z+46, r23	; 0x2e
    308c:	18 c0       	rjmp	.+48     	; 0x30be <xTaskGenericNotify+0x8e>
    308e:	43 a5       	ldd	r20, Z+43	; 0x2b
    3090:	54 a5       	ldd	r21, Z+44	; 0x2c
    3092:	65 a5       	ldd	r22, Z+45	; 0x2d
    3094:	76 a5       	ldd	r23, Z+46	; 0x2e
    3096:	4f 5f       	subi	r20, 0xFF	; 255
    3098:	5f 4f       	sbci	r21, 0xFF	; 255
    309a:	6f 4f       	sbci	r22, 0xFF	; 255
    309c:	7f 4f       	sbci	r23, 0xFF	; 255
    309e:	43 a7       	std	Z+43, r20	; 0x2b
    30a0:	54 a7       	std	Z+44, r21	; 0x2c
    30a2:	65 a7       	std	Z+45, r22	; 0x2d
    30a4:	76 a7       	std	Z+46, r23	; 0x2e
    30a6:	0b c0       	rjmp	.+22     	; 0x30be <xTaskGenericNotify+0x8e>
    30a8:	43 a7       	std	Z+43, r20	; 0x2b
    30aa:	54 a7       	std	Z+44, r21	; 0x2c
    30ac:	65 a7       	std	Z+45, r22	; 0x2d
    30ae:	76 a7       	std	Z+46, r23	; 0x2e
    30b0:	06 c0       	rjmp	.+12     	; 0x30be <xTaskGenericNotify+0x8e>
    30b2:	82 30       	cpi	r24, 0x02	; 2
    30b4:	49 f1       	breq	.+82     	; 0x3108 <xTaskGenericNotify+0xd8>
    30b6:	43 a7       	std	Z+43, r20	; 0x2b
    30b8:	54 a7       	std	Z+44, r21	; 0x2c
    30ba:	65 a7       	std	Z+45, r22	; 0x2d
    30bc:	76 a7       	std	Z+46, r23	; 0x2e
    30be:	81 30       	cpi	r24, 0x01	; 1
    30c0:	29 f5       	brne	.+74     	; 0x310c <xTaskGenericNotify+0xdc>
    30c2:	ef 01       	movw	r28, r30
    30c4:	8f 01       	movw	r16, r30
    30c6:	0e 5f       	subi	r16, 0xFE	; 254
    30c8:	1f 4f       	sbci	r17, 0xFF	; 255
    30ca:	c8 01       	movw	r24, r16
    30cc:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <uxListRemove>
    30d0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    30d2:	90 91 e6 18 	lds	r25, 0x18E6	; 0x8018e6 <uxTopReadyPriority>
    30d6:	98 17       	cp	r25, r24
    30d8:	10 f4       	brcc	.+4      	; 0x30de <xTaskGenericNotify+0xae>
    30da:	80 93 e6 18 	sts	0x18E6, r24	; 0x8018e6 <uxTopReadyPriority>
    30de:	2b e0       	ldi	r18, 0x0B	; 11
    30e0:	82 9f       	mul	r24, r18
    30e2:	c0 01       	movw	r24, r0
    30e4:	11 24       	eor	r1, r1
    30e6:	b8 01       	movw	r22, r16
    30e8:	88 5d       	subi	r24, 0xD8	; 216
    30ea:	96 4e       	sbci	r25, 0xE6	; 230
    30ec:	0e 94 06 0a 	call	0x140c	; 0x140c <vListInsertEnd>
    30f0:	e0 91 54 19 	lds	r30, 0x1954	; 0x801954 <pxCurrentTCB>
    30f4:	f0 91 55 19 	lds	r31, 0x1955	; 0x801955 <pxCurrentTCB+0x1>
    30f8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    30fa:	82 8d       	ldd	r24, Z+26	; 0x1a
    30fc:	89 17       	cp	r24, r25
    30fe:	40 f4       	brcc	.+16     	; 0x3110 <xTaskGenericNotify+0xe0>
    3100:	0e 94 39 0b 	call	0x1672	; 0x1672 <vPortYield>
    3104:	81 e0       	ldi	r24, 0x01	; 1
    3106:	05 c0       	rjmp	.+10     	; 0x3112 <xTaskGenericNotify+0xe2>
    3108:	80 e0       	ldi	r24, 0x00	; 0
    310a:	03 c0       	rjmp	.+6      	; 0x3112 <xTaskGenericNotify+0xe2>
    310c:	81 e0       	ldi	r24, 0x01	; 1
    310e:	01 c0       	rjmp	.+2      	; 0x3112 <xTaskGenericNotify+0xe2>
    3110:	81 e0       	ldi	r24, 0x01	; 1
    3112:	0f 90       	pop	r0
    3114:	0f be       	out	0x3f, r0	; 63
    3116:	df 91       	pop	r29
    3118:	cf 91       	pop	r28
    311a:	1f 91       	pop	r17
    311c:	0f 91       	pop	r16
    311e:	08 95       	ret

00003120 <xTaskGenericNotifyFromISR>:
    3120:	ef 92       	push	r14
    3122:	ff 92       	push	r15
    3124:	0f 93       	push	r16
    3126:	1f 93       	push	r17
    3128:	cf 93       	push	r28
    312a:	df 93       	push	r29
    312c:	fc 01       	movw	r30, r24
    312e:	01 15       	cp	r16, r1
    3130:	11 05       	cpc	r17, r1
    3132:	49 f0       	breq	.+18     	; 0x3146 <xTaskGenericNotifyFromISR+0x26>
    3134:	83 a5       	ldd	r24, Z+43	; 0x2b
    3136:	94 a5       	ldd	r25, Z+44	; 0x2c
    3138:	a5 a5       	ldd	r26, Z+45	; 0x2d
    313a:	b6 a5       	ldd	r27, Z+46	; 0x2e
    313c:	e8 01       	movw	r28, r16
    313e:	88 83       	st	Y, r24
    3140:	99 83       	std	Y+1, r25	; 0x01
    3142:	aa 83       	std	Y+2, r26	; 0x02
    3144:	bb 83       	std	Y+3, r27	; 0x03
    3146:	87 a5       	ldd	r24, Z+47	; 0x2f
    3148:	92 e0       	ldi	r25, 0x02	; 2
    314a:	97 a7       	std	Z+47, r25	; 0x2f
    314c:	22 30       	cpi	r18, 0x02	; 2
    314e:	b1 f0       	breq	.+44     	; 0x317c <xTaskGenericNotifyFromISR+0x5c>
    3150:	18 f4       	brcc	.+6      	; 0x3158 <xTaskGenericNotifyFromISR+0x38>
    3152:	21 30       	cpi	r18, 0x01	; 1
    3154:	31 f0       	breq	.+12     	; 0x3162 <xTaskGenericNotifyFromISR+0x42>
    3156:	2a c0       	rjmp	.+84     	; 0x31ac <xTaskGenericNotifyFromISR+0x8c>
    3158:	23 30       	cpi	r18, 0x03	; 3
    315a:	e9 f0       	breq	.+58     	; 0x3196 <xTaskGenericNotifyFromISR+0x76>
    315c:	24 30       	cpi	r18, 0x04	; 4
    315e:	01 f1       	breq	.+64     	; 0x31a0 <xTaskGenericNotifyFromISR+0x80>
    3160:	25 c0       	rjmp	.+74     	; 0x31ac <xTaskGenericNotifyFromISR+0x8c>
    3162:	03 a5       	ldd	r16, Z+43	; 0x2b
    3164:	14 a5       	ldd	r17, Z+44	; 0x2c
    3166:	25 a5       	ldd	r18, Z+45	; 0x2d
    3168:	36 a5       	ldd	r19, Z+46	; 0x2e
    316a:	40 2b       	or	r20, r16
    316c:	51 2b       	or	r21, r17
    316e:	62 2b       	or	r22, r18
    3170:	73 2b       	or	r23, r19
    3172:	43 a7       	std	Z+43, r20	; 0x2b
    3174:	54 a7       	std	Z+44, r21	; 0x2c
    3176:	65 a7       	std	Z+45, r22	; 0x2d
    3178:	76 a7       	std	Z+46, r23	; 0x2e
    317a:	18 c0       	rjmp	.+48     	; 0x31ac <xTaskGenericNotifyFromISR+0x8c>
    317c:	43 a5       	ldd	r20, Z+43	; 0x2b
    317e:	54 a5       	ldd	r21, Z+44	; 0x2c
    3180:	65 a5       	ldd	r22, Z+45	; 0x2d
    3182:	76 a5       	ldd	r23, Z+46	; 0x2e
    3184:	4f 5f       	subi	r20, 0xFF	; 255
    3186:	5f 4f       	sbci	r21, 0xFF	; 255
    3188:	6f 4f       	sbci	r22, 0xFF	; 255
    318a:	7f 4f       	sbci	r23, 0xFF	; 255
    318c:	43 a7       	std	Z+43, r20	; 0x2b
    318e:	54 a7       	std	Z+44, r21	; 0x2c
    3190:	65 a7       	std	Z+45, r22	; 0x2d
    3192:	76 a7       	std	Z+46, r23	; 0x2e
    3194:	0b c0       	rjmp	.+22     	; 0x31ac <xTaskGenericNotifyFromISR+0x8c>
    3196:	43 a7       	std	Z+43, r20	; 0x2b
    3198:	54 a7       	std	Z+44, r21	; 0x2c
    319a:	65 a7       	std	Z+45, r22	; 0x2d
    319c:	76 a7       	std	Z+46, r23	; 0x2e
    319e:	06 c0       	rjmp	.+12     	; 0x31ac <xTaskGenericNotifyFromISR+0x8c>
    31a0:	82 30       	cpi	r24, 0x02	; 2
    31a2:	d9 f1       	breq	.+118    	; 0x321a <xTaskGenericNotifyFromISR+0xfa>
    31a4:	43 a7       	std	Z+43, r20	; 0x2b
    31a6:	54 a7       	std	Z+44, r21	; 0x2c
    31a8:	65 a7       	std	Z+45, r22	; 0x2d
    31aa:	76 a7       	std	Z+46, r23	; 0x2e
    31ac:	81 30       	cpi	r24, 0x01	; 1
    31ae:	b9 f5       	brne	.+110    	; 0x321e <xTaskGenericNotifyFromISR+0xfe>
    31b0:	ef 01       	movw	r28, r30
    31b2:	80 91 da 18 	lds	r24, 0x18DA	; 0x8018da <uxSchedulerSuspended>
    31b6:	81 11       	cpse	r24, r1
    31b8:	17 c0       	rjmp	.+46     	; 0x31e8 <xTaskGenericNotifyFromISR+0xc8>
    31ba:	8f 01       	movw	r16, r30
    31bc:	0e 5f       	subi	r16, 0xFE	; 254
    31be:	1f 4f       	sbci	r17, 0xFF	; 255
    31c0:	c8 01       	movw	r24, r16
    31c2:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <uxListRemove>
    31c6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    31c8:	90 91 e6 18 	lds	r25, 0x18E6	; 0x8018e6 <uxTopReadyPriority>
    31cc:	98 17       	cp	r25, r24
    31ce:	10 f4       	brcc	.+4      	; 0x31d4 <xTaskGenericNotifyFromISR+0xb4>
    31d0:	80 93 e6 18 	sts	0x18E6, r24	; 0x8018e6 <uxTopReadyPriority>
    31d4:	eb e0       	ldi	r30, 0x0B	; 11
    31d6:	8e 9f       	mul	r24, r30
    31d8:	c0 01       	movw	r24, r0
    31da:	11 24       	eor	r1, r1
    31dc:	b8 01       	movw	r22, r16
    31de:	88 5d       	subi	r24, 0xD8	; 216
    31e0:	96 4e       	sbci	r25, 0xE6	; 230
    31e2:	0e 94 06 0a 	call	0x140c	; 0x140c <vListInsertEnd>
    31e6:	07 c0       	rjmp	.+14     	; 0x31f6 <xTaskGenericNotifyFromISR+0xd6>
    31e8:	bf 01       	movw	r22, r30
    31ea:	62 5f       	subi	r22, 0xF2	; 242
    31ec:	7f 4f       	sbci	r23, 0xFF	; 255
    31ee:	83 e0       	ldi	r24, 0x03	; 3
    31f0:	99 e1       	ldi	r25, 0x19	; 25
    31f2:	0e 94 06 0a 	call	0x140c	; 0x140c <vListInsertEnd>
    31f6:	e0 91 54 19 	lds	r30, 0x1954	; 0x801954 <pxCurrentTCB>
    31fa:	f0 91 55 19 	lds	r31, 0x1955	; 0x801955 <pxCurrentTCB+0x1>
    31fe:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3200:	82 8d       	ldd	r24, Z+26	; 0x1a
    3202:	89 17       	cp	r24, r25
    3204:	70 f4       	brcc	.+28     	; 0x3222 <xTaskGenericNotifyFromISR+0x102>
    3206:	e1 14       	cp	r14, r1
    3208:	f1 04       	cpc	r15, r1
    320a:	19 f0       	breq	.+6      	; 0x3212 <xTaskGenericNotifyFromISR+0xf2>
    320c:	81 e0       	ldi	r24, 0x01	; 1
    320e:	e7 01       	movw	r28, r14
    3210:	88 83       	st	Y, r24
    3212:	81 e0       	ldi	r24, 0x01	; 1
    3214:	80 93 e3 18 	sts	0x18E3, r24	; 0x8018e3 <xYieldPending>
    3218:	05 c0       	rjmp	.+10     	; 0x3224 <xTaskGenericNotifyFromISR+0x104>
    321a:	80 e0       	ldi	r24, 0x00	; 0
    321c:	03 c0       	rjmp	.+6      	; 0x3224 <xTaskGenericNotifyFromISR+0x104>
    321e:	81 e0       	ldi	r24, 0x01	; 1
    3220:	01 c0       	rjmp	.+2      	; 0x3224 <xTaskGenericNotifyFromISR+0x104>
    3222:	81 e0       	ldi	r24, 0x01	; 1
    3224:	df 91       	pop	r29
    3226:	cf 91       	pop	r28
    3228:	1f 91       	pop	r17
    322a:	0f 91       	pop	r16
    322c:	ff 90       	pop	r15
    322e:	ef 90       	pop	r14
    3230:	08 95       	ret

00003232 <xTaskNotifyStateClear>:
    TCB_t *pxTCB;
    BaseType_t xReturn;

        /* If null is passed in here then it is the calling task that is having
        its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    3232:	00 97       	sbiw	r24, 0x00	; 0
    3234:	21 f4       	brne	.+8      	; 0x323e <xTaskNotifyStateClear+0xc>
    3236:	80 91 54 19 	lds	r24, 0x1954	; 0x801954 <pxCurrentTCB>
    323a:	90 91 55 19 	lds	r25, 0x1955	; 0x801955 <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    323e:	0f b6       	in	r0, 0x3f	; 63
    3240:	f8 94       	cli
    3242:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
    3244:	fc 01       	movw	r30, r24
    3246:	27 a5       	ldd	r18, Z+47	; 0x2f
    3248:	22 30       	cpi	r18, 0x02	; 2
    324a:	19 f4       	brne	.+6      	; 0x3252 <xTaskNotifyStateClear+0x20>
            {
                pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    324c:	17 a6       	std	Z+47, r1	; 0x2f
                xReturn = pdPASS;
    324e:	81 e0       	ldi	r24, 0x01	; 1
    3250:	01 c0       	rjmp	.+2      	; 0x3254 <xTaskNotifyStateClear+0x22>
            }
            else
            {
                xReturn = pdFAIL;
    3252:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    3254:	0f 90       	pop	r0
    3256:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    3258:	08 95       	ret

0000325a <prvInsertTimerInActiveList>:
    325a:	cf 92       	push	r12
    325c:	df 92       	push	r13
    325e:	ef 92       	push	r14
    3260:	ff 92       	push	r15
    3262:	0f 93       	push	r16
    3264:	1f 93       	push	r17
    3266:	fc 01       	movw	r30, r24
    3268:	42 83       	std	Z+2, r20	; 0x02
    326a:	53 83       	std	Z+3, r21	; 0x03
    326c:	64 83       	std	Z+4, r22	; 0x04
    326e:	75 83       	std	Z+5, r23	; 0x05
    3270:	93 87       	std	Z+11, r25	; 0x0b
    3272:	82 87       	std	Z+10, r24	; 0x0a
    3274:	04 17       	cp	r16, r20
    3276:	15 07       	cpc	r17, r21
    3278:	26 07       	cpc	r18, r22
    327a:	37 07       	cpc	r19, r23
    327c:	c0 f0       	brcs	.+48     	; 0x32ae <prvInsertTimerInActiveList+0x54>
    327e:	0c 19       	sub	r16, r12
    3280:	1d 09       	sbc	r17, r13
    3282:	2e 09       	sbc	r18, r14
    3284:	3f 09       	sbc	r19, r15
    3286:	86 85       	ldd	r24, Z+14	; 0x0e
    3288:	97 85       	ldd	r25, Z+15	; 0x0f
    328a:	a0 89       	ldd	r26, Z+16	; 0x10
    328c:	b1 89       	ldd	r27, Z+17	; 0x11
    328e:	08 17       	cp	r16, r24
    3290:	19 07       	cpc	r17, r25
    3292:	2a 07       	cpc	r18, r26
    3294:	3b 07       	cpc	r19, r27
    3296:	00 f5       	brcc	.+64     	; 0x32d8 <prvInsertTimerInActiveList+0x7e>
    3298:	bf 01       	movw	r22, r30
    329a:	6e 5f       	subi	r22, 0xFE	; 254
    329c:	7f 4f       	sbci	r23, 0xFF	; 255
    329e:	80 91 5e 19 	lds	r24, 0x195E	; 0x80195e <pxOverflowTimerList>
    32a2:	90 91 5f 19 	lds	r25, 0x195F	; 0x80195f <pxOverflowTimerList+0x1>
    32a6:	0e 94 27 0a 	call	0x144e	; 0x144e <vListInsert>
    32aa:	80 e0       	ldi	r24, 0x00	; 0
    32ac:	18 c0       	rjmp	.+48     	; 0x32de <prvInsertTimerInActiveList+0x84>
    32ae:	0c 15       	cp	r16, r12
    32b0:	1d 05       	cpc	r17, r13
    32b2:	2e 05       	cpc	r18, r14
    32b4:	3f 05       	cpc	r19, r15
    32b6:	28 f4       	brcc	.+10     	; 0x32c2 <prvInsertTimerInActiveList+0x68>
    32b8:	4c 15       	cp	r20, r12
    32ba:	5d 05       	cpc	r21, r13
    32bc:	6e 05       	cpc	r22, r14
    32be:	7f 05       	cpc	r23, r15
    32c0:	68 f4       	brcc	.+26     	; 0x32dc <prvInsertTimerInActiveList+0x82>
    32c2:	bf 01       	movw	r22, r30
    32c4:	6e 5f       	subi	r22, 0xFE	; 254
    32c6:	7f 4f       	sbci	r23, 0xFF	; 255
    32c8:	80 91 60 19 	lds	r24, 0x1960	; 0x801960 <pxCurrentTimerList>
    32cc:	90 91 61 19 	lds	r25, 0x1961	; 0x801961 <pxCurrentTimerList+0x1>
    32d0:	0e 94 27 0a 	call	0x144e	; 0x144e <vListInsert>
    32d4:	80 e0       	ldi	r24, 0x00	; 0
    32d6:	03 c0       	rjmp	.+6      	; 0x32de <prvInsertTimerInActiveList+0x84>
    32d8:	81 e0       	ldi	r24, 0x01	; 1
    32da:	01 c0       	rjmp	.+2      	; 0x32de <prvInsertTimerInActiveList+0x84>
    32dc:	81 e0       	ldi	r24, 0x01	; 1
    32de:	1f 91       	pop	r17
    32e0:	0f 91       	pop	r16
    32e2:	ff 90       	pop	r15
    32e4:	ef 90       	pop	r14
    32e6:	df 90       	pop	r13
    32e8:	cf 90       	pop	r12
    32ea:	08 95       	ret

000032ec <prvCheckForValidListAndQueue>:
    32ec:	0f b6       	in	r0, 0x3f	; 63
    32ee:	f8 94       	cli
    32f0:	0f 92       	push	r0
    32f2:	80 91 5c 19 	lds	r24, 0x195C	; 0x80195c <xTimerQueue>
    32f6:	90 91 5d 19 	lds	r25, 0x195D	; 0x80195d <xTimerQueue+0x1>
    32fa:	89 2b       	or	r24, r25
    32fc:	e9 f4       	brne	.+58     	; 0x3338 <prvCheckForValidListAndQueue+0x4c>
    32fe:	8d e6       	ldi	r24, 0x6D	; 109
    3300:	99 e1       	ldi	r25, 0x19	; 25
    3302:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <vListInitialise>
    3306:	82 e6       	ldi	r24, 0x62	; 98
    3308:	99 e1       	ldi	r25, 0x19	; 25
    330a:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <vListInitialise>
    330e:	8d e6       	ldi	r24, 0x6D	; 109
    3310:	99 e1       	ldi	r25, 0x19	; 25
    3312:	90 93 61 19 	sts	0x1961, r25	; 0x801961 <pxCurrentTimerList+0x1>
    3316:	80 93 60 19 	sts	0x1960, r24	; 0x801960 <pxCurrentTimerList>
    331a:	82 e6       	ldi	r24, 0x62	; 98
    331c:	99 e1       	ldi	r25, 0x19	; 25
    331e:	90 93 5f 19 	sts	0x195F, r25	; 0x80195f <pxOverflowTimerList+0x1>
    3322:	80 93 5e 19 	sts	0x195E, r24	; 0x80195e <pxOverflowTimerList>
    3326:	40 e0       	ldi	r20, 0x00	; 0
    3328:	67 e0       	ldi	r22, 0x07	; 7
    332a:	8a e0       	ldi	r24, 0x0A	; 10
    332c:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <xQueueGenericCreate>
    3330:	90 93 5d 19 	sts	0x195D, r25	; 0x80195d <xTimerQueue+0x1>
    3334:	80 93 5c 19 	sts	0x195C, r24	; 0x80195c <xTimerQueue>
    3338:	0f 90       	pop	r0
    333a:	0f be       	out	0x3f, r0	; 63
    333c:	08 95       	ret

0000333e <xTimerCreateTimerTask>:
    333e:	ef 92       	push	r14
    3340:	ff 92       	push	r15
    3342:	0f 93       	push	r16
    3344:	d3 df       	rcall	.-90     	; 0x32ec <prvCheckForValidListAndQueue>
    3346:	80 91 5c 19 	lds	r24, 0x195C	; 0x80195c <xTimerQueue>
    334a:	90 91 5d 19 	lds	r25, 0x195D	; 0x80195d <xTimerQueue+0x1>
    334e:	89 2b       	or	r24, r25
    3350:	89 f0       	breq	.+34     	; 0x3374 <xTimerCreateTimerTask+0x36>
    3352:	0f 2e       	mov	r0, r31
    3354:	fa e5       	ldi	r31, 0x5A	; 90
    3356:	ef 2e       	mov	r14, r31
    3358:	f9 e1       	ldi	r31, 0x19	; 25
    335a:	ff 2e       	mov	r15, r31
    335c:	f0 2d       	mov	r31, r0
    335e:	03 e0       	ldi	r16, 0x03	; 3
    3360:	20 e0       	ldi	r18, 0x00	; 0
    3362:	30 e0       	ldi	r19, 0x00	; 0
    3364:	45 e5       	ldi	r20, 0x55	; 85
    3366:	50 e0       	ldi	r21, 0x00	; 0
    3368:	6d e7       	ldi	r22, 0x7D	; 125
    336a:	75 e0       	ldi	r23, 0x05	; 5
    336c:	87 e0       	ldi	r24, 0x07	; 7
    336e:	91 e0       	ldi	r25, 0x01	; 1
    3370:	b1 d8       	rcall	.-3742   	; 0x24d4 <xTaskCreate>
    3372:	01 c0       	rjmp	.+2      	; 0x3376 <xTimerCreateTimerTask+0x38>
    3374:	80 e0       	ldi	r24, 0x00	; 0
    3376:	0f 91       	pop	r16
    3378:	ff 90       	pop	r15
    337a:	ef 90       	pop	r14
    337c:	08 95       	ret

0000337e <xTimerGenericCommand>:
    }
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    337e:	8f 92       	push	r8
    3380:	9f 92       	push	r9
    3382:	af 92       	push	r10
    3384:	bf 92       	push	r11
    3386:	cf 92       	push	r12
    3388:	df 92       	push	r13
    338a:	ef 92       	push	r14
    338c:	ff 92       	push	r15
    338e:	0f 93       	push	r16
    3390:	1f 93       	push	r17
    3392:	cf 93       	push	r28
    3394:	df 93       	push	r29
    3396:	cd b7       	in	r28, 0x3d	; 61
    3398:	de b7       	in	r29, 0x3e	; 62
    339a:	27 97       	sbiw	r28, 0x07	; 7
    339c:	0f b6       	in	r0, 0x3f	; 63
    339e:	f8 94       	cli
    33a0:	de bf       	out	0x3e, r29	; 62
    33a2:	0f be       	out	0x3f, r0	; 63
    33a4:	cd bf       	out	0x3d, r28	; 61

    configASSERT( xTimer );

    /* Send a message to the timer service task to perform a particular action
    on a particular timer definition. */
    if( xTimerQueue != NULL )
    33a6:	e0 91 5c 19 	lds	r30, 0x195C	; 0x80195c <xTimerQueue>
    33aa:	f0 91 5d 19 	lds	r31, 0x195D	; 0x80195d <xTimerQueue+0x1>
    33ae:	30 97       	sbiw	r30, 0x00	; 0
    33b0:	81 f1       	breq	.+96     	; 0x3412 <xTimerGenericCommand+0x94>
    {
        /* Send a command to the timer service task to start the xTimer timer. */
        xMessage.xMessageID = xCommandID;
    33b2:	69 83       	std	Y+1, r22	; 0x01
        xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    33b4:	2a 83       	std	Y+2, r18	; 0x02
    33b6:	3b 83       	std	Y+3, r19	; 0x03
    33b8:	4c 83       	std	Y+4, r20	; 0x04
    33ba:	5d 83       	std	Y+5, r21	; 0x05
        xMessage.u.xTimerParameters.pxTimer = xTimer;
    33bc:	9f 83       	std	Y+7, r25	; 0x07
    33be:	8e 83       	std	Y+6, r24	; 0x06

        if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    33c0:	66 30       	cpi	r22, 0x06	; 6
    33c2:	f4 f4       	brge	.+60     	; 0x3400 <xTimerGenericCommand+0x82>
        {
            if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    33c4:	35 dd       	rcall	.-1430   	; 0x2e30 <xTaskGetSchedulerState>
    33c6:	82 30       	cpi	r24, 0x02	; 2
    33c8:	69 f4       	brne	.+26     	; 0x33e4 <xTimerGenericCommand+0x66>
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    33ca:	00 e0       	ldi	r16, 0x00	; 0
    33cc:	a7 01       	movw	r20, r14
    33ce:	96 01       	movw	r18, r12
    33d0:	be 01       	movw	r22, r28
    33d2:	6f 5f       	subi	r22, 0xFF	; 255
    33d4:	7f 4f       	sbci	r23, 0xFF	; 255
    33d6:	80 91 5c 19 	lds	r24, 0x195C	; 0x80195c <xTimerQueue>
    33da:	90 91 5d 19 	lds	r25, 0x195D	; 0x80195d <xTimerQueue+0x1>
    33de:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <xQueueGenericSend>
    33e2:	18 c0       	rjmp	.+48     	; 0x3414 <xTimerGenericCommand+0x96>
            }
            else
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    33e4:	00 e0       	ldi	r16, 0x00	; 0
    33e6:	20 e0       	ldi	r18, 0x00	; 0
    33e8:	30 e0       	ldi	r19, 0x00	; 0
    33ea:	a9 01       	movw	r20, r18
    33ec:	be 01       	movw	r22, r28
    33ee:	6f 5f       	subi	r22, 0xFF	; 255
    33f0:	7f 4f       	sbci	r23, 0xFF	; 255
    33f2:	80 91 5c 19 	lds	r24, 0x195C	; 0x80195c <xTimerQueue>
    33f6:	90 91 5d 19 	lds	r25, 0x195D	; 0x80195d <xTimerQueue+0x1>
    33fa:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <xQueueGenericSend>
    33fe:	0a c0       	rjmp	.+20     	; 0x3414 <xTimerGenericCommand+0x96>
            }
        }
        else
        {
            xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    3400:	20 e0       	ldi	r18, 0x00	; 0
    3402:	a8 01       	movw	r20, r16
    3404:	be 01       	movw	r22, r28
    3406:	6f 5f       	subi	r22, 0xFF	; 255
    3408:	7f 4f       	sbci	r23, 0xFF	; 255
    340a:	cf 01       	movw	r24, r30
    340c:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <xQueueGenericSendFromISR>
    3410:	01 c0       	rjmp	.+2      	; 0x3414 <xTimerGenericCommand+0x96>
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
    3412:	80 e0       	ldi	r24, 0x00	; 0
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xReturn;
}
    3414:	27 96       	adiw	r28, 0x07	; 7
    3416:	0f b6       	in	r0, 0x3f	; 63
    3418:	f8 94       	cli
    341a:	de bf       	out	0x3e, r29	; 62
    341c:	0f be       	out	0x3f, r0	; 63
    341e:	cd bf       	out	0x3d, r28	; 61
    3420:	df 91       	pop	r29
    3422:	cf 91       	pop	r28
    3424:	1f 91       	pop	r17
    3426:	0f 91       	pop	r16
    3428:	ff 90       	pop	r15
    342a:	ef 90       	pop	r14
    342c:	df 90       	pop	r13
    342e:	cf 90       	pop	r12
    3430:	bf 90       	pop	r11
    3432:	af 90       	pop	r10
    3434:	9f 90       	pop	r9
    3436:	8f 90       	pop	r8
    3438:	08 95       	ret

0000343a <prvSampleTimeNow>:
    return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    343a:	2f 92       	push	r2
    343c:	3f 92       	push	r3
    343e:	4f 92       	push	r4
    3440:	5f 92       	push	r5
    3442:	6f 92       	push	r6
    3444:	7f 92       	push	r7
    3446:	8f 92       	push	r8
    3448:	9f 92       	push	r9
    344a:	af 92       	push	r10
    344c:	bf 92       	push	r11
    344e:	cf 92       	push	r12
    3450:	df 92       	push	r13
    3452:	ef 92       	push	r14
    3454:	ff 92       	push	r15
    3456:	0f 93       	push	r16
    3458:	1f 93       	push	r17
    345a:	cf 93       	push	r28
    345c:	df 93       	push	r29
    345e:	1c 01       	movw	r2, r24
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

    xTimeNow = xTaskGetTickCount();
    3460:	9a d9       	rcall	.-3276   	; 0x2796 <xTaskGetTickCount>
    3462:	2b 01       	movw	r4, r22
    3464:	3c 01       	movw	r6, r24

    if( xTimeNow < xLastTime )
    3466:	80 91 56 19 	lds	r24, 0x1956	; 0x801956 <xLastTime.2432>
    346a:	90 91 57 19 	lds	r25, 0x1957	; 0x801957 <xLastTime.2432+0x1>
    346e:	a0 91 58 19 	lds	r26, 0x1958	; 0x801958 <xLastTime.2432+0x2>
    3472:	b0 91 59 19 	lds	r27, 0x1959	; 0x801959 <xLastTime.2432+0x3>
    3476:	48 16       	cp	r4, r24
    3478:	59 06       	cpc	r5, r25
    347a:	6a 06       	cpc	r6, r26
    347c:	7b 06       	cpc	r7, r27
    347e:	08 f0       	brcs	.+2      	; 0x3482 <prvSampleTimeNow+0x48>
    3480:	53 c0       	rjmp	.+166    	; 0x3528 <prvSampleTimeNow+0xee>
    3482:	3b c0       	rjmp	.+118    	; 0x34fa <prvSampleTimeNow+0xc0>
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    {
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    3484:	07 80       	ldd	r0, Z+7	; 0x07
    3486:	f0 85       	ldd	r31, Z+8	; 0x08
    3488:	e0 2d       	mov	r30, r0
    348a:	80 80       	ld	r8, Z
    348c:	91 80       	ldd	r9, Z+1	; 0x01
    348e:	a2 80       	ldd	r10, Z+2	; 0x02
    3490:	b3 80       	ldd	r11, Z+3	; 0x03

        /* Remove the timer from the list. */
        pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    3492:	c0 85       	ldd	r28, Z+8	; 0x08
    3494:	d1 85       	ldd	r29, Z+9	; 0x09
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3496:	8e 01       	movw	r16, r28
    3498:	0e 5f       	subi	r16, 0xFE	; 254
    349a:	1f 4f       	sbci	r17, 0xFF	; 255
    349c:	c8 01       	movw	r24, r16
    349e:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* Execute its callback, then send a command to restart the timer if
        it is an auto-reload timer.  It cannot be restarted here as the lists
        have not yet been switched. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    34a2:	ec 89       	ldd	r30, Y+20	; 0x14
    34a4:	fd 89       	ldd	r31, Y+21	; 0x15
    34a6:	ce 01       	movw	r24, r28
    34a8:	19 95       	eicall

        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    34aa:	8f 89       	ldd	r24, Y+23	; 0x17
    34ac:	82 ff       	sbrs	r24, 2
    34ae:	25 c0       	rjmp	.+74     	; 0x34fa <prvSampleTimeNow+0xc0>
            the timer going into the same timer list then it has already expired
            and the timer should be re-inserted into the current list so it is
            processed again within this loop.  Otherwise a command should be sent
            to restart the timer to ensure it is only inserted into a list after
            the lists have been swapped. */
            xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    34b0:	8e 85       	ldd	r24, Y+14	; 0x0e
    34b2:	9f 85       	ldd	r25, Y+15	; 0x0f
    34b4:	a8 89       	ldd	r26, Y+16	; 0x10
    34b6:	b9 89       	ldd	r27, Y+17	; 0x11
    34b8:	88 0d       	add	r24, r8
    34ba:	99 1d       	adc	r25, r9
    34bc:	aa 1d       	adc	r26, r10
    34be:	bb 1d       	adc	r27, r11
            if( xReloadTime > xNextExpireTime )
    34c0:	88 16       	cp	r8, r24
    34c2:	99 06       	cpc	r9, r25
    34c4:	aa 06       	cpc	r10, r26
    34c6:	bb 06       	cpc	r11, r27
    34c8:	70 f4       	brcc	.+28     	; 0x34e6 <prvSampleTimeNow+0xac>
            {
                listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    34ca:	8a 83       	std	Y+2, r24	; 0x02
    34cc:	9b 83       	std	Y+3, r25	; 0x03
    34ce:	ac 83       	std	Y+4, r26	; 0x04
    34d0:	bd 83       	std	Y+5, r27	; 0x05
                listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    34d2:	db 87       	std	Y+11, r29	; 0x0b
    34d4:	ca 87       	std	Y+10, r28	; 0x0a
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    34d6:	b8 01       	movw	r22, r16
    34d8:	80 91 60 19 	lds	r24, 0x1960	; 0x801960 <pxCurrentTimerList>
    34dc:	90 91 61 19 	lds	r25, 0x1961	; 0x801961 <pxCurrentTimerList+0x1>
    34e0:	0e 94 27 0a 	call	0x144e	; 0x144e <vListInsert>
    34e4:	0a c0       	rjmp	.+20     	; 0x34fa <prvSampleTimeNow+0xc0>
            }
            else
            {
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    34e6:	c1 2c       	mov	r12, r1
    34e8:	d1 2c       	mov	r13, r1
    34ea:	76 01       	movw	r14, r12
    34ec:	00 e0       	ldi	r16, 0x00	; 0
    34ee:	10 e0       	ldi	r17, 0x00	; 0
    34f0:	a5 01       	movw	r20, r10
    34f2:	94 01       	movw	r18, r8
    34f4:	60 e0       	ldi	r22, 0x00	; 0
    34f6:	ce 01       	movw	r24, r28
    34f8:	42 df       	rcall	.-380    	; 0x337e <xTimerGenericCommand>

    /* The tick count has overflowed.  The timer lists must be switched.
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    34fa:	e0 91 60 19 	lds	r30, 0x1960	; 0x801960 <pxCurrentTimerList>
    34fe:	f0 91 61 19 	lds	r31, 0x1961	; 0x801961 <pxCurrentTimerList+0x1>
    3502:	80 81       	ld	r24, Z
    3504:	81 11       	cpse	r24, r1
    3506:	be cf       	rjmp	.-132    	; 0x3484 <prvSampleTimeNow+0x4a>
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxTemp = pxCurrentTimerList;
    pxCurrentTimerList = pxOverflowTimerList;
    3508:	80 91 5e 19 	lds	r24, 0x195E	; 0x80195e <pxOverflowTimerList>
    350c:	90 91 5f 19 	lds	r25, 0x195F	; 0x80195f <pxOverflowTimerList+0x1>
    3510:	90 93 61 19 	sts	0x1961, r25	; 0x801961 <pxCurrentTimerList+0x1>
    3514:	80 93 60 19 	sts	0x1960, r24	; 0x801960 <pxCurrentTimerList>
    pxOverflowTimerList = pxTemp;
    3518:	f0 93 5f 19 	sts	0x195F, r31	; 0x80195f <pxOverflowTimerList+0x1>
    351c:	e0 93 5e 19 	sts	0x195E, r30	; 0x80195e <pxOverflowTimerList>
    xTimeNow = xTaskGetTickCount();

    if( xTimeNow < xLastTime )
    {
        prvSwitchTimerLists();
        *pxTimerListsWereSwitched = pdTRUE;
    3520:	81 e0       	ldi	r24, 0x01	; 1
    3522:	f1 01       	movw	r30, r2
    3524:	80 83       	st	Z, r24
    3526:	02 c0       	rjmp	.+4      	; 0x352c <prvSampleTimeNow+0xf2>
    }
    else
    {
        *pxTimerListsWereSwitched = pdFALSE;
    3528:	f1 01       	movw	r30, r2
    352a:	10 82       	st	Z, r1
    }

    xLastTime = xTimeNow;
    352c:	40 92 56 19 	sts	0x1956, r4	; 0x801956 <xLastTime.2432>
    3530:	50 92 57 19 	sts	0x1957, r5	; 0x801957 <xLastTime.2432+0x1>
    3534:	60 92 58 19 	sts	0x1958, r6	; 0x801958 <xLastTime.2432+0x2>
    3538:	70 92 59 19 	sts	0x1959, r7	; 0x801959 <xLastTime.2432+0x3>

    return xTimeNow;
}
    353c:	c3 01       	movw	r24, r6
    353e:	b2 01       	movw	r22, r4
    3540:	df 91       	pop	r29
    3542:	cf 91       	pop	r28
    3544:	1f 91       	pop	r17
    3546:	0f 91       	pop	r16
    3548:	ff 90       	pop	r15
    354a:	ef 90       	pop	r14
    354c:	df 90       	pop	r13
    354e:	cf 90       	pop	r12
    3550:	bf 90       	pop	r11
    3552:	af 90       	pop	r10
    3554:	9f 90       	pop	r9
    3556:	8f 90       	pop	r8
    3558:	7f 90       	pop	r7
    355a:	6f 90       	pop	r6
    355c:	5f 90       	pop	r5
    355e:	4f 90       	pop	r4
    3560:	3f 90       	pop	r3
    3562:	2f 90       	pop	r2
    3564:	08 95       	ret

00003566 <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    3566:	08 95       	ret

00003568 <vApplicationMallocFailedHook>:
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    3568:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    356a:	2f 9a       	sbi	0x05, 7	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    356c:	2f ef       	ldi	r18, 0xFF	; 255
    356e:	80 e7       	ldi	r24, 0x70	; 112
    3570:	92 e0       	ldi	r25, 0x02	; 2
    3572:	21 50       	subi	r18, 0x01	; 1
    3574:	80 40       	sbci	r24, 0x00	; 0
    3576:	90 40       	sbci	r25, 0x00	; 0
    3578:	e1 f7       	brne	.-8      	; 0x3572 <vApplicationMallocFailedHook+0xa>
    357a:	00 c0       	rjmp	.+0      	; 0x357c <vApplicationMallocFailedHook+0x14>
    357c:	00 00       	nop
    for(;;)
    {
        _delay_ms(50);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED fast blink.
    357e:	1f 9a       	sbi	0x03, 7	; 3
    3580:	f5 cf       	rjmp	.-22     	; 0x356c <vApplicationMallocFailedHook+0x4>

00003582 <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook( TaskHandle_t xTask, portCHAR *pcTaskName ) __attribute__((weak));

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)), portCHAR *pcTaskName __attribute__((unused))  )
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    3582:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    3584:	2f 9a       	sbi	0x05, 7	; 5
    3586:	2f ef       	ldi	r18, 0xFF	; 255
    3588:	87 ea       	ldi	r24, 0xA7	; 167
    358a:	91 e6       	ldi	r25, 0x61	; 97
    358c:	21 50       	subi	r18, 0x01	; 1
    358e:	80 40       	sbci	r24, 0x00	; 0
    3590:	90 40       	sbci	r25, 0x00	; 0
    3592:	e1 f7       	brne	.-8      	; 0x358c <vApplicationStackOverflowHook+0xa>
    3594:	00 c0       	rjmp	.+0      	; 0x3596 <vApplicationStackOverflowHook+0x14>
    3596:	00 00       	nop
    for(;;)
    {
        _delay_ms(2000);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED slow blink.
    3598:	1f 9a       	sbi	0x03, 7	; 3
    359a:	f5 cf       	rjmp	.-22     	; 0x3586 <vApplicationStackOverflowHook+0x4>

0000359c <create_tasks_and_semaphores>:
	lora_driver_create(LORA_USART, NULL);
	// Create LoRaWAN task and start it up with priority 3 
}

void doStuff()
{
    359c:	8f 92       	push	r8
    359e:	9f 92       	push	r9
    35a0:	af 92       	push	r10
    35a2:	bf 92       	push	r11
    35a4:	cf 92       	push	r12
    35a6:	df 92       	push	r13
    35a8:	ef 92       	push	r14
    35aa:	ff 92       	push	r15
    35ac:	0f 93       	push	r16
    35ae:	1f 93       	push	r17
    35b0:	cf 93       	push	r28
    35b2:	df 93       	push	r29
    35b4:	80 91 cd 1a 	lds	r24, 0x1ACD	; 0x801acd <xTestSemaphore>
    35b8:	90 91 ce 1a 	lds	r25, 0x1ACE	; 0x801ace <xTestSemaphore+0x1>
    35bc:	89 2b       	or	r24, r25
    35be:	89 f4       	brne	.+34     	; 0x35e2 <create_tasks_and_semaphores+0x46>
    35c0:	81 e0       	ldi	r24, 0x01	; 1
    35c2:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <xQueueCreateMutex>
    35c6:	90 93 ce 1a 	sts	0x1ACE, r25	; 0x801ace <xTestSemaphore+0x1>
    35ca:	80 93 cd 1a 	sts	0x1ACD, r24	; 0x801acd <xTestSemaphore>
    35ce:	00 97       	sbiw	r24, 0x00	; 0
    35d0:	41 f0       	breq	.+16     	; 0x35e2 <create_tasks_and_semaphores+0x46>
    35d2:	00 e0       	ldi	r16, 0x00	; 0
    35d4:	20 e0       	ldi	r18, 0x00	; 0
    35d6:	30 e0       	ldi	r19, 0x00	; 0
    35d8:	a9 01       	movw	r20, r18
    35da:	60 e0       	ldi	r22, 0x00	; 0
    35dc:	70 e0       	ldi	r23, 0x00	; 0
    35de:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <xQueueGenericSend>
    35e2:	0e 94 4e 07 	call	0xe9c	; 0xe9c <xEventGroupCreate>
    35e6:	90 93 e6 1a 	sts	0x1AE6, r25	; 0x801ae6 <startMeasureEventGroup+0x1>
    35ea:	80 93 e5 1a 	sts	0x1AE5, r24	; 0x801ae5 <startMeasureEventGroup>
    35ee:	0e 94 4e 07 	call	0xe9c	; 0xe9c <xEventGroupCreate>
    35f2:	90 93 cc 1a 	sts	0x1ACC, r25	; 0x801acc <readyEventGroup+0x1>
    35f6:	80 93 cb 1a 	sts	0x1ACB, r24	; 0x801acb <readyEventGroup>
    35fa:	41 e0       	ldi	r20, 0x01	; 1
    35fc:	60 e0       	ldi	r22, 0x00	; 0
    35fe:	70 e0       	ldi	r23, 0x00	; 0
    3600:	84 e6       	ldi	r24, 0x64	; 100
    3602:	90 e0       	ldi	r25, 0x00	; 0
    3604:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <xStreamBufferGenericCreate>
    3608:	90 93 ca 1a 	sts	0x1ACA, r25	; 0x801aca <xMessageBuffer+0x1>
    360c:	80 93 c9 1a 	sts	0x1AC9, r24	; 0x801ac9 <xMessageBuffer>
    3610:	bc 01       	movw	r22, r24
    3612:	81 e0       	ldi	r24, 0x01	; 1
    3614:	0e 94 dd 05 	call	0xbba	; 0xbba <lora_UpLinkHandler_create>
    3618:	e0 90 cb 1a 	lds	r14, 0x1ACB	; 0x801acb <readyEventGroup>
    361c:	f0 90 cc 1a 	lds	r15, 0x1ACC	; 0x801acc <readyEventGroup+0x1>
    3620:	40 91 e5 1a 	lds	r20, 0x1AE5	; 0x801ae5 <startMeasureEventGroup>
    3624:	50 91 e6 1a 	lds	r21, 0x1AE6	; 0x801ae6 <startMeasureEventGroup+0x1>
    3628:	a1 2c       	mov	r10, r1
    362a:	b1 2c       	mov	r11, r1
    362c:	65 01       	movw	r12, r10
    362e:	68 94       	set
    3630:	a4 f8       	bld	r10, 4
    3632:	01 e0       	ldi	r16, 0x01	; 1
    3634:	10 e0       	ldi	r17, 0x00	; 0
    3636:	20 e0       	ldi	r18, 0x00	; 0
    3638:	30 e0       	ldi	r19, 0x00	; 0
    363a:	60 ec       	ldi	r22, 0xC0	; 192
    363c:	81 e0       	ldi	r24, 0x01	; 1
    363e:	0e 94 06 05 	call	0xa0c	; 0xa0c <humAndTempReader_create>
    3642:	c8 2f       	mov	r28, r24
    3644:	d9 2f       	mov	r29, r25
    3646:	e0 90 cb 1a 	lds	r14, 0x1ACB	; 0x801acb <readyEventGroup>
    364a:	f0 90 cc 1a 	lds	r15, 0x1ACC	; 0x801acc <readyEventGroup+0x1>
    364e:	40 91 e5 1a 	lds	r20, 0x1AE5	; 0x801ae5 <startMeasureEventGroup>
    3652:	50 91 e6 1a 	lds	r21, 0x1AE6	; 0x801ae6 <startMeasureEventGroup+0x1>
    3656:	a1 2c       	mov	r10, r1
    3658:	b1 2c       	mov	r11, r1
    365a:	65 01       	movw	r12, r10
    365c:	68 94       	set
    365e:	a5 f8       	bld	r10, 5
    3660:	02 e0       	ldi	r16, 0x02	; 2
    3662:	10 e0       	ldi	r17, 0x00	; 0
    3664:	20 e0       	ldi	r18, 0x00	; 0
    3666:	30 e0       	ldi	r19, 0x00	; 0
    3668:	60 ec       	ldi	r22, 0xC0	; 192
    366a:	81 e0       	ldi	r24, 0x01	; 1
    366c:	0e 94 72 02 	call	0x4e4	; 0x4e4 <co2Reader_create>
    3670:	e0 90 cb 1a 	lds	r14, 0x1ACB	; 0x801acb <readyEventGroup>
    3674:	f0 90 cc 1a 	lds	r15, 0x1ACC	; 0x801acc <readyEventGroup+0x1>
    3678:	40 91 e5 1a 	lds	r20, 0x1AE5	; 0x801ae5 <startMeasureEventGroup>
    367c:	50 91 e6 1a 	lds	r21, 0x1AE6	; 0x801ae6 <startMeasureEventGroup+0x1>
    3680:	20 91 ca 1a 	lds	r18, 0x1ACA	; 0x801aca <xMessageBuffer+0x1>
    3684:	2f 93       	push	r18
    3686:	20 91 c9 1a 	lds	r18, 0x1AC9	; 0x801ac9 <xMessageBuffer>
    368a:	2f 93       	push	r18
    368c:	df 93       	push	r29
    368e:	cf 93       	push	r28
    3690:	4c 01       	movw	r8, r24
    3692:	0f 2e       	mov	r0, r31
    3694:	f0 e3       	ldi	r31, 0x30	; 48
    3696:	af 2e       	mov	r10, r31
    3698:	b1 2c       	mov	r11, r1
    369a:	c1 2c       	mov	r12, r1
    369c:	d1 2c       	mov	r13, r1
    369e:	f0 2d       	mov	r31, r0
    36a0:	03 e0       	ldi	r16, 0x03	; 3
    36a2:	10 e0       	ldi	r17, 0x00	; 0
    36a4:	20 e0       	ldi	r18, 0x00	; 0
    36a6:	30 e0       	ldi	r19, 0x00	; 0
    36a8:	60 ec       	ldi	r22, 0xC0	; 192
    36aa:	82 e0       	ldi	r24, 0x02	; 2
    36ac:	0e 94 70 03 	call	0x6e0	; 0x6e0 <device_create>
    36b0:	0f 90       	pop	r0
    36b2:	0f 90       	pop	r0
    36b4:	0f 90       	pop	r0
    36b6:	0f 90       	pop	r0
    36b8:	df 91       	pop	r29
    36ba:	cf 91       	pop	r28
    36bc:	1f 91       	pop	r17
    36be:	0f 91       	pop	r16
    36c0:	ff 90       	pop	r15
    36c2:	ef 90       	pop	r14
    36c4:	df 90       	pop	r13
    36c6:	cf 90       	pop	r12
    36c8:	bf 90       	pop	r11
    36ca:	af 90       	pop	r10
    36cc:	9f 90       	pop	r9
    36ce:	8f 90       	pop	r8
    36d0:	08 95       	ret

000036d2 <initialiseSystem>:
    36d2:	81 b1       	in	r24, 0x01	; 1
    36d4:	81 68       	ori	r24, 0x81	; 129
    36d6:	81 b9       	out	0x01, r24	; 1
    36d8:	0e 94 38 07 	call	0xe70	; 0xe70 <trace_init>
    36dc:	80 e0       	ldi	r24, 0x00	; 0
    36de:	0e 94 61 26 	call	0x4cc2	; 0x4cc2 <stdioCreate>
    36e2:	85 e0       	ldi	r24, 0x05	; 5
    36e4:	0d d0       	rcall	.+26     	; 0x3700 <hal_create>
    36e6:	60 e0       	ldi	r22, 0x00	; 0
    36e8:	70 e0       	ldi	r23, 0x00	; 0
    36ea:	81 e0       	ldi	r24, 0x01	; 1
    36ec:	ab c3       	rjmp	.+1878   	; 0x3e44 <lora_driver_create>
    36ee:	08 95       	ret

000036f0 <main>:
	//bytesToSend=xMessageBufferSend(xMessageBuffer,(void*) &payload,sizeof(payload),portMAX_DELAY);
}
/*-----------------------------------------------------------*/
int main(void)
{
	initialiseSystem(); // Must be done as the very first thing!!
    36f0:	f0 df       	rcall	.-32     	; 0x36d2 <initialiseSystem>
	printf("Program Started!!\n");
    36f2:	81 e9       	ldi	r24, 0x91	; 145
    36f4:	95 e0       	ldi	r25, 0x05	; 5
    36f6:	0e 94 c2 2b 	call	0x5784	; 0x5784 <puts>
	create_tasks_and_semaphores();
	vTaskStartScheduler(); // Initialise and run the freeRTOS scheduler. Execution should never return from here.
    36fa:	50 df       	rcall	.-352    	; 0x359c <create_tasks_and_semaphores>
    36fc:	0a d8       	rcall	.-4076   	; 0x2712 <vTaskStartScheduler>
    36fe:	ff cf       	rjmp	.-2      	; 0x36fe <main+0xe>

00003700 <hal_create>:
    3700:	e7 ee       	ldi	r30, 0xE7	; 231
    3702:	fa e1       	ldi	r31, 0x1A	; 26
    3704:	27 e7       	ldi	r18, 0x77	; 119
    3706:	32 e2       	ldi	r19, 0x22	; 34
    3708:	31 83       	std	Z+1, r19	; 0x01
    370a:	20 83       	st	Z, r18
    370c:	2a e7       	ldi	r18, 0x7A	; 122
    370e:	32 e2       	ldi	r19, 0x22	; 34
    3710:	33 83       	std	Z+3, r19	; 0x03
    3712:	22 83       	std	Z+2, r18	; 0x02
    3714:	25 e8       	ldi	r18, 0x85	; 133
    3716:	32 e2       	ldi	r19, 0x22	; 34
    3718:	35 83       	std	Z+5, r19	; 0x05
    371a:	24 83       	std	Z+4, r18	; 0x04
    371c:	29 e8       	ldi	r18, 0x89	; 137
    371e:	32 e2       	ldi	r19, 0x22	; 34
    3720:	37 83       	std	Z+7, r19	; 0x07
    3722:	26 83       	std	Z+6, r18	; 0x06
    3724:	2f e8       	ldi	r18, 0x8F	; 143
    3726:	32 e2       	ldi	r19, 0x22	; 34
    3728:	31 87       	std	Z+9, r19	; 0x09
    372a:	20 87       	std	Z+8, r18	; 0x08
    372c:	2b e9       	ldi	r18, 0x9B	; 155
    372e:	32 e2       	ldi	r19, 0x22	; 34
    3730:	33 87       	std	Z+11, r19	; 0x0b
    3732:	22 87       	std	Z+10, r18	; 0x0a
    3734:	20 ea       	ldi	r18, 0xA0	; 160
    3736:	32 e2       	ldi	r19, 0x22	; 34
    3738:	35 87       	std	Z+13, r19	; 0x0d
    373a:	24 87       	std	Z+12, r18	; 0x0c
    373c:	2c ea       	ldi	r18, 0xAC	; 172
    373e:	32 e2       	ldi	r19, 0x22	; 34
    3740:	37 87       	std	Z+15, r19	; 0x0f
    3742:	26 87       	std	Z+14, r18	; 0x0e
    3744:	2c e8       	ldi	r18, 0x8C	; 140
    3746:	32 e2       	ldi	r19, 0x22	; 34
    3748:	31 8b       	std	Z+17, r19	; 0x11
    374a:	20 8b       	std	Z+16, r18	; 0x10
    374c:	21 eb       	ldi	r18, 0xB1	; 177
    374e:	32 e2       	ldi	r19, 0x22	; 34
    3750:	33 8b       	std	Z+19, r19	; 0x13
    3752:	22 8b       	std	Z+18, r18	; 0x12
    3754:	2e eb       	ldi	r18, 0xBE	; 190
    3756:	32 e2       	ldi	r19, 0x22	; 34
    3758:	35 8b       	std	Z+21, r19	; 0x15
    375a:	24 8b       	std	Z+20, r18	; 0x14
    375c:	68 2f       	mov	r22, r24
    375e:	cf 01       	movw	r24, r30
    3760:	3d c1       	rjmp	.+634    	; 0x39dc <led_create>
    3762:	08 95       	ret

00003764 <_hihTwiCallback>:
    3764:	65 30       	cpi	r22, 0x05	; 5
    3766:	f1 f4       	brne	.+60     	; 0x37a4 <_hihTwiCallback+0x40>
    3768:	fa 01       	movw	r30, r20
    376a:	80 81       	ld	r24, Z
    376c:	8f 73       	andi	r24, 0x3F	; 63
    376e:	90 e0       	ldi	r25, 0x00	; 0
    3770:	98 2f       	mov	r25, r24
    3772:	88 27       	eor	r24, r24
    3774:	21 81       	ldd	r18, Z+1	; 0x01
    3776:	82 2b       	or	r24, r18
    3778:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <_hum+0x1>
    377c:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <_hum>
    3780:	82 81       	ldd	r24, Z+2	; 0x02
    3782:	f0 e4       	ldi	r31, 0x40	; 64
    3784:	8f 9f       	mul	r24, r31
    3786:	c0 01       	movw	r24, r0
    3788:	11 24       	eor	r1, r1
    378a:	fa 01       	movw	r30, r20
    378c:	23 81       	ldd	r18, Z+3	; 0x03
    378e:	26 95       	lsr	r18
    3790:	26 95       	lsr	r18
    3792:	82 2b       	or	r24, r18
    3794:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <_temp+0x1>
    3798:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <_temp>
    379c:	81 e0       	ldi	r24, 0x01	; 1
    379e:	80 93 78 19 	sts	0x1978, r24	; 0x801978 <_measuringIsReady>
    37a2:	08 95       	ret
    37a4:	64 30       	cpi	r22, 0x04	; 4
    37a6:	51 f0       	breq	.+20     	; 0x37bc <_hihTwiCallback+0x58>
    37a8:	80 e0       	ldi	r24, 0x00	; 0
    37aa:	90 e4       	ldi	r25, 0x40	; 64
    37ac:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <_temp+0x1>
    37b0:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <_temp>
    37b4:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <_hum+0x1>
    37b8:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <_hum>
    37bc:	08 95       	ret

000037be <hih8120Create>:
    37be:	0f 93       	push	r16
    37c0:	1f 93       	push	r17
    37c2:	02 eb       	ldi	r16, 0xB2	; 178
    37c4:	1b e1       	ldi	r17, 0x1B	; 27
    37c6:	20 e0       	ldi	r18, 0x00	; 0
    37c8:	34 e2       	ldi	r19, 0x24	; 36
    37ca:	44 ef       	ldi	r20, 0xF4	; 244
    37cc:	50 e0       	ldi	r21, 0x00	; 0
    37ce:	60 e0       	ldi	r22, 0x00	; 0
    37d0:	87 e2       	ldi	r24, 0x27	; 39
    37d2:	0e 94 9b 26 	call	0x4d36	; 0x4d36 <twiCreate>
    37d6:	90 93 7a 19 	sts	0x197A, r25	; 0x80197a <_hih8120Handler+0x1>
    37da:	80 93 79 19 	sts	0x1979, r24	; 0x801979 <_hih8120Handler>
    37de:	21 e0       	ldi	r18, 0x01	; 1
    37e0:	89 2b       	or	r24, r25
    37e2:	09 f0       	breq	.+2      	; 0x37e6 <hih8120Create+0x28>
    37e4:	20 e0       	ldi	r18, 0x00	; 0
    37e6:	82 2f       	mov	r24, r18
    37e8:	1f 91       	pop	r17
    37ea:	0f 91       	pop	r16
    37ec:	08 95       	ret

000037ee <hih8120IsReady>:
    37ee:	80 91 78 19 	lds	r24, 0x1978	; 0x801978 <_measuringIsReady>
    37f2:	08 95       	ret

000037f4 <hih8120Meassure>:
    37f4:	80 91 79 19 	lds	r24, 0x1979	; 0x801979 <_hih8120Handler>
    37f8:	90 91 7a 19 	lds	r25, 0x197A	; 0x80197a <_hih8120Handler+0x1>
    37fc:	00 97       	sbiw	r24, 0x00	; 0
    37fe:	39 f0       	breq	.+14     	; 0x380e <hih8120Meassure+0x1a>
    3800:	64 e0       	ldi	r22, 0x04	; 4
    3802:	0e 94 ec 26 	call	0x4dd8	; 0x4dd8 <twiReceive>
    3806:	85 30       	cpi	r24, 0x05	; 5
    3808:	21 f0       	breq	.+8      	; 0x3812 <hih8120Meassure+0x1e>
    380a:	83 e0       	ldi	r24, 0x03	; 3
    380c:	08 95       	ret
    380e:	82 e0       	ldi	r24, 0x02	; 2
    3810:	08 95       	ret
    3812:	80 e0       	ldi	r24, 0x00	; 0
    3814:	08 95       	ret

00003816 <hih8120GetHumidity>:
    3816:	60 91 0a 02 	lds	r22, 0x020A	; 0x80020a <_hum>
    381a:	70 91 0b 02 	lds	r23, 0x020B	; 0x80020b <_hum+0x1>
    381e:	80 e0       	ldi	r24, 0x00	; 0
    3820:	90 e0       	ldi	r25, 0x00	; 0
    3822:	0e 94 f6 28 	call	0x51ec	; 0x51ec <__floatunsisf>
    3826:	20 e0       	ldi	r18, 0x00	; 0
    3828:	30 e0       	ldi	r19, 0x00	; 0
    382a:	48 ec       	ldi	r20, 0xC8	; 200
    382c:	52 e4       	ldi	r21, 0x42	; 66
    382e:	0e 94 84 29 	call	0x5308	; 0x5308 <__mulsf3>
    3832:	20 e0       	ldi	r18, 0x00	; 0
    3834:	38 ef       	ldi	r19, 0xF8	; 248
    3836:	4f e7       	ldi	r20, 0x7F	; 127
    3838:	56 e4       	ldi	r21, 0x46	; 70
    383a:	0c 94 5d 28 	jmp	0x50ba	; 0x50ba <__divsf3>
    383e:	08 95       	ret

00003840 <hih8120GetHumidityPercent_x10>:
    3840:	ea df       	rcall	.-44     	; 0x3816 <hih8120GetHumidity>
    3842:	20 e0       	ldi	r18, 0x00	; 0
    3844:	30 e0       	ldi	r19, 0x00	; 0
    3846:	40 e2       	ldi	r20, 0x20	; 32
    3848:	51 e4       	ldi	r21, 0x41	; 65
    384a:	0e 94 84 29 	call	0x5308	; 0x5308 <__mulsf3>
    384e:	0e 94 ca 28 	call	0x5194	; 0x5194 <__fixunssfsi>
    3852:	cb 01       	movw	r24, r22
    3854:	08 95       	ret

00003856 <hih8120GetTemperature>:
    3856:	60 91 08 02 	lds	r22, 0x0208	; 0x800208 <_temp>
    385a:	70 91 09 02 	lds	r23, 0x0209	; 0x800209 <_temp+0x1>
    385e:	80 e0       	ldi	r24, 0x00	; 0
    3860:	90 e0       	ldi	r25, 0x00	; 0
    3862:	0e 94 f6 28 	call	0x51ec	; 0x51ec <__floatunsisf>
    3866:	20 e0       	ldi	r18, 0x00	; 0
    3868:	30 e0       	ldi	r19, 0x00	; 0
    386a:	45 e2       	ldi	r20, 0x25	; 37
    386c:	53 e4       	ldi	r21, 0x43	; 67
    386e:	0e 94 84 29 	call	0x5308	; 0x5308 <__mulsf3>
    3872:	20 e0       	ldi	r18, 0x00	; 0
    3874:	38 ef       	ldi	r19, 0xF8	; 248
    3876:	4f e7       	ldi	r20, 0x7F	; 127
    3878:	56 e4       	ldi	r21, 0x46	; 70
    387a:	0e 94 5d 28 	call	0x50ba	; 0x50ba <__divsf3>
    387e:	20 e0       	ldi	r18, 0x00	; 0
    3880:	30 e0       	ldi	r19, 0x00	; 0
    3882:	40 e2       	ldi	r20, 0x20	; 32
    3884:	52 e4       	ldi	r21, 0x42	; 66
    3886:	0c 94 f8 27 	jmp	0x4ff0	; 0x4ff0 <__subsf3>
    388a:	08 95       	ret

0000388c <hih8120GetTemperature_x10>:
    388c:	e4 df       	rcall	.-56     	; 0x3856 <hih8120GetTemperature>
    388e:	20 e0       	ldi	r18, 0x00	; 0
    3890:	30 e0       	ldi	r19, 0x00	; 0
    3892:	40 e2       	ldi	r20, 0x20	; 32
    3894:	51 e4       	ldi	r21, 0x41	; 65
    3896:	0e 94 84 29 	call	0x5308	; 0x5308 <__mulsf3>
    389a:	0e 94 c5 28 	call	0x518a	; 0x518a <__fixsfsi>
    389e:	cb 01       	movw	r24, r22
    38a0:	08 95       	ret

000038a2 <_turn_off>:
    38a2:	cf 93       	push	r28
    38a4:	df 93       	push	r29
    38a6:	90 e0       	ldi	r25, 0x00	; 0
    38a8:	fc 01       	movw	r30, r24
    38aa:	ee 0f       	add	r30, r30
    38ac:	ff 1f       	adc	r31, r31
    38ae:	e8 0f       	add	r30, r24
    38b0:	f9 1f       	adc	r31, r25
    38b2:	ee 0f       	add	r30, r30
    38b4:	ff 1f       	adc	r31, r31
    38b6:	e5 58       	subi	r30, 0x85	; 133
    38b8:	f6 4e       	sbci	r31, 0xE6	; 230
    38ba:	23 81       	ldd	r18, Z+3	; 0x03
    38bc:	21 11       	cpse	r18, r1
    38be:	0a c0       	rjmp	.+20     	; 0x38d4 <_turn_off+0x32>
    38c0:	ef 01       	movw	r28, r30
    38c2:	e0 91 ef 1a 	lds	r30, 0x1AEF	; 0x801aef <register_access+0x8>
    38c6:	f0 91 f0 1a 	lds	r31, 0x1AF0	; 0x801af0 <register_access+0x9>
    38ca:	6a 81       	ldd	r22, Y+2	; 0x02
    38cc:	88 81       	ld	r24, Y
    38ce:	99 81       	ldd	r25, Y+1	; 0x01
    38d0:	19 95       	eicall
    38d2:	12 c0       	rjmp	.+36     	; 0x38f8 <_turn_off+0x56>
    38d4:	dc 01       	movw	r26, r24
    38d6:	aa 0f       	add	r26, r26
    38d8:	bb 1f       	adc	r27, r27
    38da:	ed 01       	movw	r28, r26
    38dc:	c8 0f       	add	r28, r24
    38de:	d9 1f       	adc	r29, r25
    38e0:	cc 0f       	add	r28, r28
    38e2:	dd 1f       	adc	r29, r29
    38e4:	c5 58       	subi	r28, 0x85	; 133
    38e6:	d6 4e       	sbci	r29, 0xE6	; 230
    38e8:	e0 91 f9 1a 	lds	r30, 0x1AF9	; 0x801af9 <register_access+0x12>
    38ec:	f0 91 fa 1a 	lds	r31, 0x1AFA	; 0x801afa <register_access+0x13>
    38f0:	6a 81       	ldd	r22, Y+2	; 0x02
    38f2:	88 81       	ld	r24, Y
    38f4:	99 81       	ldd	r25, Y+1	; 0x01
    38f6:	19 95       	eicall
    38f8:	df 91       	pop	r29
    38fa:	cf 91       	pop	r28
    38fc:	08 95       	ret

000038fe <_turn_on>:
    38fe:	cf 93       	push	r28
    3900:	df 93       	push	r29
    3902:	90 e0       	ldi	r25, 0x00	; 0
    3904:	fc 01       	movw	r30, r24
    3906:	ee 0f       	add	r30, r30
    3908:	ff 1f       	adc	r31, r31
    390a:	e8 0f       	add	r30, r24
    390c:	f9 1f       	adc	r31, r25
    390e:	ee 0f       	add	r30, r30
    3910:	ff 1f       	adc	r31, r31
    3912:	e5 58       	subi	r30, 0x85	; 133
    3914:	f6 4e       	sbci	r31, 0xE6	; 230
    3916:	23 81       	ldd	r18, Z+3	; 0x03
    3918:	21 11       	cpse	r18, r1
    391a:	0a c0       	rjmp	.+20     	; 0x3930 <_turn_on+0x32>
    391c:	ef 01       	movw	r28, r30
    391e:	e0 91 f9 1a 	lds	r30, 0x1AF9	; 0x801af9 <register_access+0x12>
    3922:	f0 91 fa 1a 	lds	r31, 0x1AFA	; 0x801afa <register_access+0x13>
    3926:	6a 81       	ldd	r22, Y+2	; 0x02
    3928:	88 81       	ld	r24, Y
    392a:	99 81       	ldd	r25, Y+1	; 0x01
    392c:	19 95       	eicall
    392e:	12 c0       	rjmp	.+36     	; 0x3954 <_turn_on+0x56>
    3930:	dc 01       	movw	r26, r24
    3932:	aa 0f       	add	r26, r26
    3934:	bb 1f       	adc	r27, r27
    3936:	ed 01       	movw	r28, r26
    3938:	c8 0f       	add	r28, r24
    393a:	d9 1f       	adc	r29, r25
    393c:	cc 0f       	add	r28, r28
    393e:	dd 1f       	adc	r29, r29
    3940:	c5 58       	subi	r28, 0x85	; 133
    3942:	d6 4e       	sbci	r29, 0xE6	; 230
    3944:	e0 91 ef 1a 	lds	r30, 0x1AEF	; 0x801aef <register_access+0x8>
    3948:	f0 91 f0 1a 	lds	r31, 0x1AF0	; 0x801af0 <register_access+0x9>
    394c:	6a 81       	ldd	r22, Y+2	; 0x02
    394e:	88 81       	ld	r24, Y
    3950:	99 81       	ldd	r25, Y+1	; 0x01
    3952:	19 95       	eicall
    3954:	df 91       	pop	r29
    3956:	cf 91       	pop	r28
    3958:	08 95       	ret

0000395a <_hal_led_task>:
    395a:	0f 2e       	mov	r0, r31
    395c:	f7 ee       	ldi	r31, 0xE7	; 231
    395e:	cf 2e       	mov	r12, r31
    3960:	fa e1       	ldi	r31, 0x1A	; 26
    3962:	df 2e       	mov	r13, r31
    3964:	f0 2d       	mov	r31, r0
    3966:	04 e0       	ldi	r16, 0x04	; 4
    3968:	cb e7       	ldi	r28, 0x7B	; 123
    396a:	d9 e1       	ldi	r29, 0x19	; 25
    396c:	10 e0       	ldi	r17, 0x00	; 0
    396e:	8c 81       	ldd	r24, Y+4	; 0x04
    3970:	81 30       	cpi	r24, 0x01	; 1
    3972:	69 f0       	breq	.+26     	; 0x398e <_hal_led_task+0x34>
    3974:	e8 f0       	brcs	.+58     	; 0x39b0 <_hal_led_task+0x56>
    3976:	82 30       	cpi	r24, 0x02	; 2
    3978:	39 f5       	brne	.+78     	; 0x39c8 <_hal_led_task+0x6e>
    397a:	d6 01       	movw	r26, r12
    397c:	1c 96       	adiw	r26, 0x0c	; 12
    397e:	ed 91       	ld	r30, X+
    3980:	fc 91       	ld	r31, X
    3982:	1d 97       	sbiw	r26, 0x0d	; 13
    3984:	6a 81       	ldd	r22, Y+2	; 0x02
    3986:	88 81       	ld	r24, Y
    3988:	99 81       	ldd	r25, Y+1	; 0x01
    398a:	19 95       	eicall
    398c:	1d c0       	rjmp	.+58     	; 0x39c8 <_hal_led_task+0x6e>
    398e:	8d 81       	ldd	r24, Y+5	; 0x05
    3990:	8f 5f       	subi	r24, 0xFF	; 255
    3992:	8a 30       	cpi	r24, 0x0A	; 10
    3994:	10 f4       	brcc	.+4      	; 0x399a <_hal_led_task+0x40>
    3996:	8d 83       	std	Y+5, r24	; 0x05
    3998:	17 c0       	rjmp	.+46     	; 0x39c8 <_hal_led_task+0x6e>
    399a:	1d 82       	std	Y+5, r1	; 0x05
    399c:	d6 01       	movw	r26, r12
    399e:	1c 96       	adiw	r26, 0x0c	; 12
    39a0:	ed 91       	ld	r30, X+
    39a2:	fc 91       	ld	r31, X
    39a4:	1d 97       	sbiw	r26, 0x0d	; 13
    39a6:	6a 81       	ldd	r22, Y+2	; 0x02
    39a8:	88 81       	ld	r24, Y
    39aa:	99 81       	ldd	r25, Y+1	; 0x01
    39ac:	19 95       	eicall
    39ae:	0c c0       	rjmp	.+24     	; 0x39c8 <_hal_led_task+0x6e>
    39b0:	8d 81       	ldd	r24, Y+5	; 0x05
    39b2:	88 23       	and	r24, r24
    39b4:	31 f0       	breq	.+12     	; 0x39c2 <_hal_led_task+0x68>
    39b6:	81 2f       	mov	r24, r17
    39b8:	a2 df       	rcall	.-188    	; 0x38fe <_turn_on>
    39ba:	8d 81       	ldd	r24, Y+5	; 0x05
    39bc:	81 50       	subi	r24, 0x01	; 1
    39be:	8d 83       	std	Y+5, r24	; 0x05
    39c0:	03 c0       	rjmp	.+6      	; 0x39c8 <_hal_led_task+0x6e>
    39c2:	0c 83       	std	Y+4, r16	; 0x04
    39c4:	81 2f       	mov	r24, r17
    39c6:	6d df       	rcall	.-294    	; 0x38a2 <_turn_off>
    39c8:	1f 5f       	subi	r17, 0xFF	; 255
    39ca:	26 96       	adiw	r28, 0x06	; 6
    39cc:	14 30       	cpi	r17, 0x04	; 4
    39ce:	79 f6       	brne	.-98     	; 0x396e <_hal_led_task+0x14>
    39d0:	65 e0       	ldi	r22, 0x05	; 5
    39d2:	70 e0       	ldi	r23, 0x00	; 0
    39d4:	80 e0       	ldi	r24, 0x00	; 0
    39d6:	90 e0       	ldi	r25, 0x00	; 0
    39d8:	3d d8       	rcall	.-3974   	; 0x2a54 <vTaskDelay>
    39da:	c6 cf       	rjmp	.-116    	; 0x3968 <_hal_led_task+0xe>

000039dc <led_create>:
    39dc:	cf 92       	push	r12
    39de:	df 92       	push	r13
    39e0:	ef 92       	push	r14
    39e2:	ff 92       	push	r15
    39e4:	0f 93       	push	r16
    39e6:	1f 93       	push	r17
    39e8:	cf 93       	push	r28
    39ea:	df 93       	push	r29
    39ec:	06 2f       	mov	r16, r22
    39ee:	0f 2e       	mov	r0, r31
    39f0:	f7 ee       	ldi	r31, 0xE7	; 231
    39f2:	ef 2e       	mov	r14, r31
    39f4:	fa e1       	ldi	r31, 0x1A	; 26
    39f6:	ff 2e       	mov	r15, r31
    39f8:	f0 2d       	mov	r31, r0
    39fa:	d7 01       	movw	r26, r14
    39fc:	18 96       	adiw	r26, 0x08	; 8
    39fe:	ed 91       	ld	r30, X+
    3a00:	fc 91       	ld	r31, X
    3a02:	19 97       	sbiw	r26, 0x09	; 9
    3a04:	66 e0       	ldi	r22, 0x06	; 6
    3a06:	87 e2       	ldi	r24, 0x27	; 39
    3a08:	90 e0       	ldi	r25, 0x00	; 0
    3a0a:	19 95       	eicall
    3a0c:	cb e7       	ldi	r28, 0x7B	; 123
    3a0e:	d9 e1       	ldi	r29, 0x19	; 25
    3a10:	0f 2e       	mov	r0, r31
    3a12:	f8 e2       	ldi	r31, 0x28	; 40
    3a14:	cf 2e       	mov	r12, r31
    3a16:	d1 2c       	mov	r13, r1
    3a18:	f0 2d       	mov	r31, r0
    3a1a:	d9 82       	std	Y+1, r13	; 0x01
    3a1c:	c8 82       	st	Y, r12
    3a1e:	86 e0       	ldi	r24, 0x06	; 6
    3a20:	8a 83       	std	Y+2, r24	; 0x02
    3a22:	1b 82       	std	Y+3, r1	; 0x03
    3a24:	14 e0       	ldi	r17, 0x04	; 4
    3a26:	1c 83       	std	Y+4, r17	; 0x04
    3a28:	80 e0       	ldi	r24, 0x00	; 0
    3a2a:	3b df       	rcall	.-394    	; 0x38a2 <_turn_off>
    3a2c:	d7 01       	movw	r26, r14
    3a2e:	18 96       	adiw	r26, 0x08	; 8
    3a30:	ed 91       	ld	r30, X+
    3a32:	fc 91       	ld	r31, X
    3a34:	19 97       	sbiw	r26, 0x09	; 9
    3a36:	67 e0       	ldi	r22, 0x07	; 7
    3a38:	87 e2       	ldi	r24, 0x27	; 39
    3a3a:	90 e0       	ldi	r25, 0x00	; 0
    3a3c:	19 95       	eicall
    3a3e:	df 82       	std	Y+7, r13	; 0x07
    3a40:	ce 82       	std	Y+6, r12	; 0x06
    3a42:	87 e0       	ldi	r24, 0x07	; 7
    3a44:	88 87       	std	Y+8, r24	; 0x08
    3a46:	19 86       	std	Y+9, r1	; 0x09
    3a48:	1a 87       	std	Y+10, r17	; 0x0a
    3a4a:	81 e0       	ldi	r24, 0x01	; 1
    3a4c:	2a df       	rcall	.-428    	; 0x38a2 <_turn_off>
    3a4e:	d7 01       	movw	r26, r14
    3a50:	18 96       	adiw	r26, 0x08	; 8
    3a52:	ed 91       	ld	r30, X+
    3a54:	fc 91       	ld	r31, X
    3a56:	19 97       	sbiw	r26, 0x09	; 9
    3a58:	65 e0       	ldi	r22, 0x05	; 5
    3a5a:	83 e3       	ldi	r24, 0x33	; 51
    3a5c:	90 e0       	ldi	r25, 0x00	; 0
    3a5e:	19 95       	eicall
    3a60:	d7 01       	movw	r26, r14
    3a62:	18 96       	adiw	r26, 0x08	; 8
    3a64:	ed 91       	ld	r30, X+
    3a66:	fc 91       	ld	r31, X
    3a68:	19 97       	sbiw	r26, 0x09	; 9
    3a6a:	61 e0       	ldi	r22, 0x01	; 1
    3a6c:	84 e3       	ldi	r24, 0x34	; 52
    3a6e:	90 e0       	ldi	r25, 0x00	; 0
    3a70:	19 95       	eicall
    3a72:	84 e3       	ldi	r24, 0x34	; 52
    3a74:	90 e0       	ldi	r25, 0x00	; 0
    3a76:	9d 87       	std	Y+13, r25	; 0x0d
    3a78:	8c 87       	std	Y+12, r24	; 0x0c
    3a7a:	85 e0       	ldi	r24, 0x05	; 5
    3a7c:	8e 87       	std	Y+14, r24	; 0x0e
    3a7e:	1f 86       	std	Y+15, r1	; 0x0f
    3a80:	18 8b       	std	Y+16, r17	; 0x10
    3a82:	82 e0       	ldi	r24, 0x02	; 2
    3a84:	0e df       	rcall	.-484    	; 0x38a2 <_turn_off>
    3a86:	d7 01       	movw	r26, r14
    3a88:	18 96       	adiw	r26, 0x08	; 8
    3a8a:	ed 91       	ld	r30, X+
    3a8c:	fc 91       	ld	r31, X
    3a8e:	19 97       	sbiw	r26, 0x09	; 9
    3a90:	64 e0       	ldi	r22, 0x04	; 4
    3a92:	81 e0       	ldi	r24, 0x01	; 1
    3a94:	91 e0       	ldi	r25, 0x01	; 1
    3a96:	19 95       	eicall
    3a98:	d7 01       	movw	r26, r14
    3a9a:	18 96       	adiw	r26, 0x08	; 8
    3a9c:	ed 91       	ld	r30, X+
    3a9e:	fc 91       	ld	r31, X
    3aa0:	19 97       	sbiw	r26, 0x09	; 9
    3aa2:	61 e0       	ldi	r22, 0x01	; 1
    3aa4:	82 e0       	ldi	r24, 0x02	; 2
    3aa6:	91 e0       	ldi	r25, 0x01	; 1
    3aa8:	19 95       	eicall
    3aaa:	82 e0       	ldi	r24, 0x02	; 2
    3aac:	91 e0       	ldi	r25, 0x01	; 1
    3aae:	9b 8b       	std	Y+19, r25	; 0x13
    3ab0:	8a 8b       	std	Y+18, r24	; 0x12
    3ab2:	1c 8b       	std	Y+20, r17	; 0x14
    3ab4:	1d 8a       	std	Y+21, r1	; 0x15
    3ab6:	1e 8b       	std	Y+22, r17	; 0x16
    3ab8:	83 e0       	ldi	r24, 0x03	; 3
    3aba:	f3 de       	rcall	.-538    	; 0x38a2 <_turn_off>
    3abc:	e1 2c       	mov	r14, r1
    3abe:	f1 2c       	mov	r15, r1
    3ac0:	20 e0       	ldi	r18, 0x00	; 0
    3ac2:	30 e0       	ldi	r19, 0x00	; 0
    3ac4:	40 ec       	ldi	r20, 0xC0	; 192
    3ac6:	50 e0       	ldi	r21, 0x00	; 0
    3ac8:	63 ea       	ldi	r22, 0xA3	; 163
    3aca:	75 e0       	ldi	r23, 0x05	; 5
    3acc:	8d ea       	ldi	r24, 0xAD	; 173
    3ace:	9c e1       	ldi	r25, 0x1C	; 28
    3ad0:	0e 94 6a 12 	call	0x24d4	; 0x24d4 <xTaskCreate>
    3ad4:	df 91       	pop	r29
    3ad6:	cf 91       	pop	r28
    3ad8:	1f 91       	pop	r17
    3ada:	0f 91       	pop	r16
    3adc:	ff 90       	pop	r15
    3ade:	ef 90       	pop	r14
    3ae0:	df 90       	pop	r13
    3ae2:	cf 90       	pop	r12
    3ae4:	08 95       	ret

00003ae6 <led_slow_blink>:
    3ae6:	0f 93       	push	r16
    3ae8:	1f 93       	push	r17
    3aea:	cf 93       	push	r28
    3aec:	df 93       	push	r29
    3aee:	c8 2f       	mov	r28, r24
    3af0:	d0 e0       	ldi	r29, 0x00	; 0
    3af2:	8e 01       	movw	r16, r28
    3af4:	00 0f       	add	r16, r16
    3af6:	11 1f       	adc	r17, r17
    3af8:	d8 01       	movw	r26, r16
    3afa:	ac 0f       	add	r26, r28
    3afc:	bd 1f       	adc	r27, r29
    3afe:	aa 0f       	add	r26, r26
    3b00:	bb 1f       	adc	r27, r27
    3b02:	a5 58       	subi	r26, 0x85	; 133
    3b04:	b6 4e       	sbci	r27, 0xE6	; 230
    3b06:	e0 91 f3 1a 	lds	r30, 0x1AF3	; 0x801af3 <register_access+0xc>
    3b0a:	f0 91 f4 1a 	lds	r31, 0x1AF4	; 0x801af4 <register_access+0xd>
    3b0e:	12 96       	adiw	r26, 0x02	; 2
    3b10:	6c 91       	ld	r22, X
    3b12:	12 97       	sbiw	r26, 0x02	; 2
    3b14:	8d 91       	ld	r24, X+
    3b16:	9c 91       	ld	r25, X
    3b18:	19 95       	eicall
    3b1a:	c0 0f       	add	r28, r16
    3b1c:	d1 1f       	adc	r29, r17
    3b1e:	cc 0f       	add	r28, r28
    3b20:	dd 1f       	adc	r29, r29
    3b22:	c5 58       	subi	r28, 0x85	; 133
    3b24:	d6 4e       	sbci	r29, 0xE6	; 230
    3b26:	81 e0       	ldi	r24, 0x01	; 1
    3b28:	8c 83       	std	Y+4, r24	; 0x04
    3b2a:	df 91       	pop	r29
    3b2c:	cf 91       	pop	r28
    3b2e:	1f 91       	pop	r17
    3b30:	0f 91       	pop	r16
    3b32:	08 95       	ret

00003b34 <led_fast_blink>:
    3b34:	0f 93       	push	r16
    3b36:	1f 93       	push	r17
    3b38:	cf 93       	push	r28
    3b3a:	df 93       	push	r29
    3b3c:	c8 2f       	mov	r28, r24
    3b3e:	d0 e0       	ldi	r29, 0x00	; 0
    3b40:	8e 01       	movw	r16, r28
    3b42:	00 0f       	add	r16, r16
    3b44:	11 1f       	adc	r17, r17
    3b46:	d8 01       	movw	r26, r16
    3b48:	ac 0f       	add	r26, r28
    3b4a:	bd 1f       	adc	r27, r29
    3b4c:	aa 0f       	add	r26, r26
    3b4e:	bb 1f       	adc	r27, r27
    3b50:	a5 58       	subi	r26, 0x85	; 133
    3b52:	b6 4e       	sbci	r27, 0xE6	; 230
    3b54:	e0 91 f3 1a 	lds	r30, 0x1AF3	; 0x801af3 <register_access+0xc>
    3b58:	f0 91 f4 1a 	lds	r31, 0x1AF4	; 0x801af4 <register_access+0xd>
    3b5c:	12 96       	adiw	r26, 0x02	; 2
    3b5e:	6c 91       	ld	r22, X
    3b60:	12 97       	sbiw	r26, 0x02	; 2
    3b62:	8d 91       	ld	r24, X+
    3b64:	9c 91       	ld	r25, X
    3b66:	19 95       	eicall
    3b68:	c0 0f       	add	r28, r16
    3b6a:	d1 1f       	adc	r29, r17
    3b6c:	cc 0f       	add	r28, r28
    3b6e:	dd 1f       	adc	r29, r29
    3b70:	c5 58       	subi	r28, 0x85	; 133
    3b72:	d6 4e       	sbci	r29, 0xE6	; 230
    3b74:	82 e0       	ldi	r24, 0x02	; 2
    3b76:	8c 83       	std	Y+4, r24	; 0x04
    3b78:	df 91       	pop	r29
    3b7a:	cf 91       	pop	r28
    3b7c:	1f 91       	pop	r17
    3b7e:	0f 91       	pop	r16
    3b80:	08 95       	ret

00003b82 <led_led_on>:
    3b82:	28 2f       	mov	r18, r24
    3b84:	30 e0       	ldi	r19, 0x00	; 0
    3b86:	f9 01       	movw	r30, r18
    3b88:	ee 0f       	add	r30, r30
    3b8a:	ff 1f       	adc	r31, r31
    3b8c:	e2 0f       	add	r30, r18
    3b8e:	f3 1f       	adc	r31, r19
    3b90:	ee 0f       	add	r30, r30
    3b92:	ff 1f       	adc	r31, r31
    3b94:	e5 58       	subi	r30, 0x85	; 133
    3b96:	f6 4e       	sbci	r31, 0xE6	; 230
    3b98:	93 e0       	ldi	r25, 0x03	; 3
    3b9a:	94 83       	std	Z+4, r25	; 0x04
    3b9c:	b0 ce       	rjmp	.-672    	; 0x38fe <_turn_on>
    3b9e:	08 95       	ret

00003ba0 <led_led_off>:
    3ba0:	28 2f       	mov	r18, r24
    3ba2:	30 e0       	ldi	r19, 0x00	; 0
    3ba4:	f9 01       	movw	r30, r18
    3ba6:	ee 0f       	add	r30, r30
    3ba8:	ff 1f       	adc	r31, r31
    3baa:	e2 0f       	add	r30, r18
    3bac:	f3 1f       	adc	r31, r19
    3bae:	ee 0f       	add	r30, r30
    3bb0:	ff 1f       	adc	r31, r31
    3bb2:	e5 58       	subi	r30, 0x85	; 133
    3bb4:	f6 4e       	sbci	r31, 0xE6	; 230
    3bb6:	94 e0       	ldi	r25, 0x04	; 4
    3bb8:	94 83       	std	Z+4, r25	; 0x04
    3bba:	73 ce       	rjmp	.-794    	; 0x38a2 <_turn_off>
    3bbc:	08 95       	ret

00003bbe <led_long_puls>:
    3bbe:	90 e0       	ldi	r25, 0x00	; 0
    3bc0:	fc 01       	movw	r30, r24
    3bc2:	ee 0f       	add	r30, r30
    3bc4:	ff 1f       	adc	r31, r31
    3bc6:	df 01       	movw	r26, r30
    3bc8:	a8 0f       	add	r26, r24
    3bca:	b9 1f       	adc	r27, r25
    3bcc:	aa 0f       	add	r26, r26
    3bce:	bb 1f       	adc	r27, r27
    3bd0:	a5 58       	subi	r26, 0x85	; 133
    3bd2:	b6 4e       	sbci	r27, 0xE6	; 230
    3bd4:	24 e0       	ldi	r18, 0x04	; 4
    3bd6:	15 96       	adiw	r26, 0x05	; 5
    3bd8:	2c 93       	st	X, r18
    3bda:	15 97       	sbiw	r26, 0x05	; 5
    3bdc:	fd 01       	movw	r30, r26
    3bde:	14 82       	std	Z+4, r1	; 0x04
    3be0:	08 95       	ret

00003be2 <led_short_puls>:
    3be2:	90 e0       	ldi	r25, 0x00	; 0
    3be4:	fc 01       	movw	r30, r24
    3be6:	ee 0f       	add	r30, r30
    3be8:	ff 1f       	adc	r31, r31
    3bea:	df 01       	movw	r26, r30
    3bec:	a8 0f       	add	r26, r24
    3bee:	b9 1f       	adc	r27, r25
    3bf0:	aa 0f       	add	r26, r26
    3bf2:	bb 1f       	adc	r27, r27
    3bf4:	a5 58       	subi	r26, 0x85	; 133
    3bf6:	b6 4e       	sbci	r27, 0xE6	; 230
    3bf8:	21 e0       	ldi	r18, 0x01	; 1
    3bfa:	15 96       	adiw	r26, 0x05	; 5
    3bfc:	2c 93       	st	X, r18
    3bfe:	15 97       	sbiw	r26, 0x05	; 5
    3c00:	fd 01       	movw	r30, r26
    3c02:	14 82       	std	Z+4, r1	; 0x04
    3c04:	08 95       	ret

00003c06 <_serial_call_back>:
    3c06:	0f 93       	push	r16
    3c08:	1f 93       	push	r17
    3c0a:	cf 93       	push	r28
    3c0c:	df 93       	push	r29
    3c0e:	1f 92       	push	r1
    3c10:	1f 92       	push	r1
    3c12:	cd b7       	in	r28, 0x3d	; 61
    3c14:	de b7       	in	r29, 0x3e	; 62
    3c16:	8c 01       	movw	r16, r24
    3c18:	19 82       	std	Y+1, r1	; 0x01
    3c1a:	2d c0       	rjmp	.+90     	; 0x3c76 <_serial_call_back+0x70>
    3c1c:	e0 91 f7 19 	lds	r30, 0x19F7	; 0x8019f7 <rec_buf_inp.2947>
    3c20:	ec 32       	cpi	r30, 0x2C	; 44
    3c22:	50 f4       	brcc	.+20     	; 0x3c38 <_serial_call_back+0x32>
    3c24:	81 e0       	ldi	r24, 0x01	; 1
    3c26:	8e 0f       	add	r24, r30
    3c28:	80 93 f7 19 	sts	0x19F7, r24	; 0x8019f7 <rec_buf_inp.2947>
    3c2c:	f0 e0       	ldi	r31, 0x00	; 0
    3c2e:	e7 5d       	subi	r30, 0xD7	; 215
    3c30:	f5 4e       	sbci	r31, 0xE5	; 229
    3c32:	8a 81       	ldd	r24, Y+2	; 0x02
    3c34:	80 83       	st	Z, r24
    3c36:	02 c0       	rjmp	.+4      	; 0x3c3c <_serial_call_back+0x36>
    3c38:	10 92 f7 19 	sts	0x19F7, r1	; 0x8019f7 <rec_buf_inp.2947>
    3c3c:	8a 81       	ldd	r24, Y+2	; 0x02
    3c3e:	8a 30       	cpi	r24, 0x0A	; 10
    3c40:	d1 f4       	brne	.+52     	; 0x3c76 <_serial_call_back+0x70>
    3c42:	40 91 f7 19 	lds	r20, 0x19F7	; 0x8019f7 <rec_buf_inp.2947>
    3c46:	50 e0       	ldi	r21, 0x00	; 0
    3c48:	fa 01       	movw	r30, r20
    3c4a:	e9 5d       	subi	r30, 0xD9	; 217
    3c4c:	f5 4e       	sbci	r31, 0xE5	; 229
    3c4e:	10 82       	st	Z, r1
    3c50:	41 50       	subi	r20, 0x01	; 1
    3c52:	51 09       	sbc	r21, r1
    3c54:	9e 01       	movw	r18, r28
    3c56:	2f 5f       	subi	r18, 0xFF	; 255
    3c58:	3f 4f       	sbci	r19, 0xFF	; 255
    3c5a:	69 e2       	ldi	r22, 0x29	; 41
    3c5c:	7a e1       	ldi	r23, 0x1A	; 26
    3c5e:	80 91 fa 19 	lds	r24, 0x19FA	; 0x8019fa <_serial_reply_buffer_handle>
    3c62:	90 91 fb 19 	lds	r25, 0x19FB	; 0x8019fb <_serial_reply_buffer_handle+0x1>
    3c66:	0e 94 e7 10 	call	0x21ce	; 0x21ce <xStreamBufferSendFromISR>
    3c6a:	89 81       	ldd	r24, Y+1	; 0x01
    3c6c:	81 11       	cpse	r24, r1
    3c6e:	0e 94 39 0b 	call	0x1672	; 0x1672 <vPortYield>
    3c72:	10 92 f7 19 	sts	0x19F7, r1	; 0x8019f7 <rec_buf_inp.2947>
    3c76:	be 01       	movw	r22, r28
    3c78:	6e 5f       	subi	r22, 0xFE	; 254
    3c7a:	7f 4f       	sbci	r23, 0xFF	; 255
    3c7c:	c8 01       	movw	r24, r16
    3c7e:	8f d5       	rcall	.+2846   	; 0x479e <serial_get_byte>
    3c80:	88 23       	and	r24, r24
    3c82:	61 f2       	breq	.-104    	; 0x3c1c <_serial_call_back+0x16>
    3c84:	0f 90       	pop	r0
    3c86:	0f 90       	pop	r0
    3c88:	df 91       	pop	r29
    3c8a:	cf 91       	pop	r28
    3c8c:	1f 91       	pop	r17
    3c8e:	0f 91       	pop	r16
    3c90:	08 95       	ret

00003c92 <_upload_message>:
    3c92:	0f 93       	push	r16
    3c94:	1f 93       	push	r17
    3c96:	cf 93       	push	r28
    3c98:	df 93       	push	r29
    3c9a:	8c 01       	movw	r16, r24
    3c9c:	eb 01       	movw	r28, r22
    3c9e:	80 91 fa 19 	lds	r24, 0x19FA	; 0x8019fa <_serial_reply_buffer_handle>
    3ca2:	90 91 fb 19 	lds	r25, 0x19FB	; 0x8019fb <_serial_reply_buffer_handle+0x1>
    3ca6:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <xStreamBufferReset>
    3caa:	b8 01       	movw	r22, r16
    3cac:	83 e9       	ldi	r24, 0x93	; 147
    3cae:	99 e1       	ldi	r25, 0x19	; 25
    3cb0:	0e 94 90 2b 	call	0x5720	; 0x5720 <strcpy>
    3cb4:	20 97       	sbiw	r28, 0x00	; 0
    3cb6:	79 f0       	breq	.+30     	; 0x3cd6 <_upload_message+0x44>
    3cb8:	e3 e9       	ldi	r30, 0x93	; 147
    3cba:	f9 e1       	ldi	r31, 0x19	; 25
    3cbc:	01 90       	ld	r0, Z+
    3cbe:	00 20       	and	r0, r0
    3cc0:	e9 f7       	brne	.-6      	; 0x3cbc <_upload_message+0x2a>
    3cc2:	31 97       	sbiw	r30, 0x01	; 1
    3cc4:	80 e2       	ldi	r24, 0x20	; 32
    3cc6:	90 e0       	ldi	r25, 0x00	; 0
    3cc8:	91 83       	std	Z+1, r25	; 0x01
    3cca:	80 83       	st	Z, r24
    3ccc:	be 01       	movw	r22, r28
    3cce:	83 e9       	ldi	r24, 0x93	; 147
    3cd0:	99 e1       	ldi	r25, 0x19	; 25
    3cd2:	0e 94 85 2b 	call	0x570a	; 0x570a <strcat>
    3cd6:	e3 e9       	ldi	r30, 0x93	; 147
    3cd8:	f9 e1       	ldi	r31, 0x19	; 25
    3cda:	df 01       	movw	r26, r30
    3cdc:	0d 90       	ld	r0, X+
    3cde:	00 20       	and	r0, r0
    3ce0:	e9 f7       	brne	.-6      	; 0x3cdc <_upload_message+0x4a>
    3ce2:	11 97       	sbiw	r26, 0x01	; 1
    3ce4:	8d e0       	ldi	r24, 0x0D	; 13
    3ce6:	9a e0       	ldi	r25, 0x0A	; 10
    3ce8:	11 96       	adiw	r26, 0x01	; 1
    3cea:	9c 93       	st	X, r25
    3cec:	8e 93       	st	-X, r24
    3cee:	12 96       	adiw	r26, 0x02	; 2
    3cf0:	1c 92       	st	X, r1
    3cf2:	01 90       	ld	r0, Z+
    3cf4:	00 20       	and	r0, r0
    3cf6:	e9 f7       	brne	.-6      	; 0x3cf2 <_upload_message+0x60>
    3cf8:	31 97       	sbiw	r30, 0x01	; 1
    3cfa:	e3 59       	subi	r30, 0x93	; 147
    3cfc:	f9 41       	sbci	r31, 0x19	; 25
    3cfe:	ae 2f       	mov	r26, r30
    3d00:	83 e9       	ldi	r24, 0x93	; 147
    3d02:	99 e1       	ldi	r25, 0x19	; 25
    3d04:	ac 01       	movw	r20, r24
    3d06:	6a 2f       	mov	r22, r26
    3d08:	80 91 fc 19 	lds	r24, 0x19FC	; 0x8019fc <_rn2483_serial>
    3d0c:	90 91 fd 19 	lds	r25, 0x19FD	; 0x8019fd <_rn2483_serial+0x1>
    3d10:	f6 d4       	rcall	.+2540   	; 0x46fe <serial_send_bytes>
    3d12:	81 11       	cpse	r24, r1
    3d14:	11 c0       	rjmp	.+34     	; 0x3d38 <_upload_message+0xa6>
    3d16:	08 e2       	ldi	r16, 0x28	; 40
    3d18:	15 e0       	ldi	r17, 0x05	; 5
    3d1a:	20 e0       	ldi	r18, 0x00	; 0
    3d1c:	30 e0       	ldi	r19, 0x00	; 0
    3d1e:	4d e2       	ldi	r20, 0x2D	; 45
    3d20:	50 e0       	ldi	r21, 0x00	; 0
    3d22:	63 e8       	ldi	r22, 0x83	; 131
    3d24:	7a e1       	ldi	r23, 0x1A	; 26
    3d26:	80 91 fa 19 	lds	r24, 0x19FA	; 0x8019fa <_serial_reply_buffer_handle>
    3d2a:	90 91 fb 19 	lds	r25, 0x19FB	; 0x8019fb <_serial_reply_buffer_handle+0x1>
    3d2e:	0e 94 29 11 	call	0x2252	; 0x2252 <xStreamBufferReceive>
    3d32:	83 e8       	ldi	r24, 0x83	; 131
    3d34:	9a e1       	ldi	r25, 0x1A	; 26
    3d36:	02 c0       	rjmp	.+4      	; 0x3d3c <_upload_message+0xaa>
    3d38:	80 e0       	ldi	r24, 0x00	; 0
    3d3a:	90 e0       	ldi	r25, 0x00	; 0
    3d3c:	df 91       	pop	r29
    3d3e:	cf 91       	pop	r28
    3d40:	1f 91       	pop	r17
    3d42:	0f 91       	pop	r16
    3d44:	08 95       	ret

00003d46 <_reply2return_code>:
    3d46:	2f 92       	push	r2
    3d48:	3f 92       	push	r3
    3d4a:	4f 92       	push	r4
    3d4c:	5f 92       	push	r5
    3d4e:	6f 92       	push	r6
    3d50:	7f 92       	push	r7
    3d52:	8f 92       	push	r8
    3d54:	9f 92       	push	r9
    3d56:	af 92       	push	r10
    3d58:	bf 92       	push	r11
    3d5a:	cf 92       	push	r12
    3d5c:	df 92       	push	r13
    3d5e:	ef 92       	push	r14
    3d60:	ff 92       	push	r15
    3d62:	0f 93       	push	r16
    3d64:	1f 93       	push	r17
    3d66:	cf 93       	push	r28
    3d68:	df 93       	push	r29
    3d6a:	5c 01       	movw	r10, r24
    3d6c:	fc 01       	movw	r30, r24
    3d6e:	01 90       	ld	r0, Z+
    3d70:	00 20       	and	r0, r0
    3d72:	e9 f7       	brne	.-6      	; 0x3d6e <_reply2return_code+0x28>
    3d74:	31 97       	sbiw	r30, 0x01	; 1
    3d76:	6f 01       	movw	r12, r30
    3d78:	c8 1a       	sub	r12, r24
    3d7a:	d9 0a       	sbc	r13, r25
    3d7c:	5c 2c       	mov	r5, r12
    3d7e:	0f 2e       	mov	r0, r31
    3d80:	f4 e4       	ldi	r31, 0x44	; 68
    3d82:	8f 2e       	mov	r8, r31
    3d84:	f8 e0       	ldi	r31, 0x08	; 8
    3d86:	9f 2e       	mov	r9, r31
    3d88:	f0 2d       	mov	r31, r0
    3d8a:	e1 2c       	mov	r14, r1
    3d8c:	f1 2c       	mov	r15, r1
    3d8e:	4c 2c       	mov	r4, r12
    3d90:	37 01       	movw	r6, r14
    3d92:	f4 01       	movw	r30, r8
    3d94:	01 81       	ldd	r16, Z+1	; 0x01
    3d96:	12 81       	ldd	r17, Z+2	; 0x02
    3d98:	e8 01       	movw	r28, r16
    3d9a:	09 90       	ld	r0, Y+
    3d9c:	00 20       	and	r0, r0
    3d9e:	e9 f7       	brne	.-6      	; 0x3d9a <_reply2return_code+0x54>
    3da0:	21 97       	sbiw	r28, 0x01	; 1
    3da2:	c0 1b       	sub	r28, r16
    3da4:	d1 0b       	sbc	r29, r17
    3da6:	3c 2e       	mov	r3, r28
    3da8:	f9 e0       	ldi	r31, 0x09	; 9
    3daa:	cf 16       	cp	r12, r31
    3dac:	d1 04       	cpc	r13, r1
    3dae:	58 f0       	brcs	.+22     	; 0x3dc6 <_reply2return_code+0x80>
    3db0:	f4 01       	movw	r30, r8
    3db2:	20 80       	ld	r2, Z
    3db4:	fe e0       	ldi	r31, 0x0E	; 14
    3db6:	2f 12       	cpse	r2, r31
    3db8:	06 c0       	rjmp	.+12     	; 0x3dc6 <_reply2return_code+0x80>
    3dba:	b8 01       	movw	r22, r16
    3dbc:	c5 01       	movw	r24, r10
    3dbe:	0e 94 60 2b 	call	0x56c0	; 0x56c0 <strcasestr>
    3dc2:	89 2b       	or	r24, r25
    3dc4:	09 f5       	brne	.+66     	; 0x3e08 <_reply2return_code+0xc2>
    3dc6:	44 2d       	mov	r20, r4
    3dc8:	35 14       	cp	r3, r5
    3dca:	08 f4       	brcc	.+2      	; 0x3dce <_reply2return_code+0x88>
    3dcc:	4c 2f       	mov	r20, r28
    3dce:	50 e0       	ldi	r21, 0x00	; 0
    3dd0:	b8 01       	movw	r22, r16
    3dd2:	c5 01       	movw	r24, r10
    3dd4:	0e 94 97 2b 	call	0x572e	; 0x572e <strncasecmp>
    3dd8:	89 2b       	or	r24, r25
    3dda:	49 f4       	brne	.+18     	; 0x3dee <_reply2return_code+0xa8>
    3ddc:	f3 01       	movw	r30, r6
    3dde:	ee 0f       	add	r30, r30
    3de0:	ff 1f       	adc	r31, r31
    3de2:	e6 0d       	add	r30, r6
    3de4:	f7 1d       	adc	r31, r7
    3de6:	ec 5b       	subi	r30, 0xBC	; 188
    3de8:	f7 4f       	sbci	r31, 0xF7	; 247
    3dea:	20 80       	ld	r2, Z
    3dec:	0d c0       	rjmp	.+26     	; 0x3e08 <_reply2return_code+0xc2>
    3dee:	8f ef       	ldi	r24, 0xFF	; 255
    3df0:	e8 1a       	sub	r14, r24
    3df2:	f8 0a       	sbc	r15, r24
    3df4:	e3 e0       	ldi	r30, 0x03	; 3
    3df6:	8e 0e       	add	r8, r30
    3df8:	91 1c       	adc	r9, r1
    3dfa:	f1 e1       	ldi	r31, 0x11	; 17
    3dfc:	ef 16       	cp	r14, r31
    3dfe:	f1 04       	cpc	r15, r1
    3e00:	39 f6       	brne	.-114    	; 0x3d90 <_reply2return_code+0x4a>
    3e02:	68 94       	set
    3e04:	22 24       	eor	r2, r2
    3e06:	24 f8       	bld	r2, 4
    3e08:	82 2d       	mov	r24, r2
    3e0a:	df 91       	pop	r29
    3e0c:	cf 91       	pop	r28
    3e0e:	1f 91       	pop	r17
    3e10:	0f 91       	pop	r16
    3e12:	ff 90       	pop	r15
    3e14:	ef 90       	pop	r14
    3e16:	df 90       	pop	r13
    3e18:	cf 90       	pop	r12
    3e1a:	bf 90       	pop	r11
    3e1c:	af 90       	pop	r10
    3e1e:	9f 90       	pop	r9
    3e20:	8f 90       	pop	r8
    3e22:	7f 90       	pop	r7
    3e24:	6f 90       	pop	r6
    3e26:	5f 90       	pop	r5
    3e28:	4f 90       	pop	r4
    3e2a:	3f 90       	pop	r3
    3e2c:	2f 90       	pop	r2
    3e2e:	08 95       	ret

00003e30 <_upload_message_rc>:
    3e30:	30 df       	rcall	.-416    	; 0x3c92 <_upload_message>
    3e32:	89 cf       	rjmp	.-238    	; 0x3d46 <_reply2return_code>
    3e34:	08 95       	ret

00003e36 <lora_driver_flush_buffers>:
    3e36:	80 91 fa 19 	lds	r24, 0x19FA	; 0x8019fa <_serial_reply_buffer_handle>
    3e3a:	90 91 fb 19 	lds	r25, 0x19FB	; 0x8019fb <_serial_reply_buffer_handle+0x1>
    3e3e:	0c 94 ff 0f 	jmp	0x1ffe	; 0x1ffe <xStreamBufferReset>
    3e42:	08 95       	ret

00003e44 <lora_driver_create>:
    3e44:	8f 92       	push	r8
    3e46:	9f 92       	push	r9
    3e48:	af 92       	push	r10
    3e4a:	cf 92       	push	r12
    3e4c:	ef 92       	push	r14
    3e4e:	0f 93       	push	r16
    3e50:	1f 93       	push	r17
    3e52:	cf 93       	push	r28
    3e54:	c8 2f       	mov	r28, r24
    3e56:	8b 01       	movw	r16, r22
    3e58:	41 e0       	ldi	r20, 0x01	; 1
    3e5a:	60 e0       	ldi	r22, 0x00	; 0
    3e5c:	70 e0       	ldi	r23, 0x00	; 0
    3e5e:	88 ec       	ldi	r24, 0xC8	; 200
    3e60:	90 e0       	ldi	r25, 0x00	; 0
    3e62:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <xStreamBufferGenericCreate>
    3e66:	90 93 fb 19 	sts	0x19FB, r25	; 0x8019fb <_serial_reply_buffer_handle+0x1>
    3e6a:	80 93 fa 19 	sts	0x19FA, r24	; 0x8019fa <_serial_reply_buffer_handle>
    3e6e:	10 93 f9 19 	sts	0x19F9, r17	; 0x8019f9 <_downlinkMessageBuffer+0x1>
    3e72:	00 93 f8 19 	sts	0x19F8, r16	; 0x8019f8 <_downlinkMessageBuffer>
    3e76:	0f 2e       	mov	r0, r31
    3e78:	f3 e0       	ldi	r31, 0x03	; 3
    3e7a:	8f 2e       	mov	r8, r31
    3e7c:	fe e1       	ldi	r31, 0x1E	; 30
    3e7e:	9f 2e       	mov	r9, r31
    3e80:	f0 2d       	mov	r31, r0
    3e82:	68 94       	set
    3e84:	aa 24       	eor	r10, r10
    3e86:	a6 f8       	bld	r10, 6
    3e88:	68 94       	set
    3e8a:	cc 24       	eor	r12, r12
    3e8c:	c6 f8       	bld	r12, 6
    3e8e:	e1 2c       	mov	r14, r1
    3e90:	00 e0       	ldi	r16, 0x00	; 0
    3e92:	23 e0       	ldi	r18, 0x03	; 3
    3e94:	40 e0       	ldi	r20, 0x00	; 0
    3e96:	51 ee       	ldi	r21, 0xE1	; 225
    3e98:	60 e0       	ldi	r22, 0x00	; 0
    3e9a:	70 e0       	ldi	r23, 0x00	; 0
    3e9c:	8c 2f       	mov	r24, r28
    3e9e:	74 d3       	rcall	.+1768   	; 0x4588 <serial_new_instance>
    3ea0:	90 93 fd 19 	sts	0x19FD, r25	; 0x8019fd <_rn2483_serial+0x1>
    3ea4:	80 93 fc 19 	sts	0x19FC, r24	; 0x8019fc <_rn2483_serial>
    3ea8:	e0 91 ef 1a 	lds	r30, 0x1AEF	; 0x801aef <register_access+0x8>
    3eac:	f0 91 f0 1a 	lds	r31, 0x1AF0	; 0x801af0 <register_access+0x9>
    3eb0:	64 e0       	ldi	r22, 0x04	; 4
    3eb2:	87 e0       	ldi	r24, 0x07	; 7
    3eb4:	91 e0       	ldi	r25, 0x01	; 1
    3eb6:	19 95       	eicall
    3eb8:	cf 91       	pop	r28
    3eba:	1f 91       	pop	r17
    3ebc:	0f 91       	pop	r16
    3ebe:	ef 90       	pop	r14
    3ec0:	cf 90       	pop	r12
    3ec2:	af 90       	pop	r10
    3ec4:	9f 90       	pop	r9
    3ec6:	8f 90       	pop	r8
    3ec8:	08 95       	ret

00003eca <lora_driver_reset_rn2483>:
    3eca:	88 23       	and	r24, r24
    3ecc:	49 f0       	breq	.+18     	; 0x3ee0 <lora_driver_reset_rn2483+0x16>
    3ece:	e0 91 f9 1a 	lds	r30, 0x1AF9	; 0x801af9 <register_access+0x12>
    3ed2:	f0 91 fa 1a 	lds	r31, 0x1AFA	; 0x801afa <register_access+0x13>
    3ed6:	64 e0       	ldi	r22, 0x04	; 4
    3ed8:	88 e0       	ldi	r24, 0x08	; 8
    3eda:	91 e0       	ldi	r25, 0x01	; 1
    3edc:	19 95       	eicall
    3ede:	08 95       	ret
    3ee0:	e0 91 ef 1a 	lds	r30, 0x1AEF	; 0x801aef <register_access+0x8>
    3ee4:	f0 91 f0 1a 	lds	r31, 0x1AF0	; 0x801af0 <register_access+0x9>
    3ee8:	64 e0       	ldi	r22, 0x04	; 4
    3eea:	88 e0       	ldi	r24, 0x08	; 8
    3eec:	91 e0       	ldi	r25, 0x01	; 1
    3eee:	19 95       	eicall
    3ef0:	08 95       	ret

00003ef2 <lora_driver_rn2483_factory_reset>:
    3ef2:	60 e0       	ldi	r22, 0x00	; 0
    3ef4:	70 e0       	ldi	r23, 0x00	; 0
    3ef6:	8a ec       	ldi	r24, 0xCA	; 202
    3ef8:	95 e0       	ldi	r25, 0x05	; 5
    3efa:	cb de       	rcall	.-618    	; 0x3c92 <_upload_message>
    3efc:	e3 e8       	ldi	r30, 0x83	; 131
    3efe:	fa e1       	ldi	r31, 0x1A	; 26
    3f00:	01 90       	ld	r0, Z+
    3f02:	00 20       	and	r0, r0
    3f04:	e9 f7       	brne	.-6      	; 0x3f00 <lora_driver_rn2483_factory_reset+0xe>
    3f06:	31 97       	sbiw	r30, 0x01	; 1
    3f08:	e3 58       	subi	r30, 0x83	; 131
    3f0a:	fa 41       	sbci	r31, 0x1A	; 26
    3f0c:	81 e0       	ldi	r24, 0x01	; 1
    3f0e:	75 97       	sbiw	r30, 0x15	; 21
    3f10:	08 f0       	brcs	.+2      	; 0x3f14 <lora_driver_rn2483_factory_reset+0x22>
    3f12:	80 e0       	ldi	r24, 0x00	; 0
    3f14:	08 95       	ret

00003f16 <lora_driver_get_rn2483_hweui>:
    3f16:	cf 93       	push	r28
    3f18:	df 93       	push	r29
    3f1a:	ec 01       	movw	r28, r24
    3f1c:	60 e0       	ldi	r22, 0x00	; 0
    3f1e:	70 e0       	ldi	r23, 0x00	; 0
    3f20:	8b ed       	ldi	r24, 0xDB	; 219
    3f22:	95 e0       	ldi	r25, 0x05	; 5
    3f24:	b6 de       	rcall	.-660    	; 0x3c92 <_upload_message>
    3f26:	e3 e8       	ldi	r30, 0x83	; 131
    3f28:	fa e1       	ldi	r31, 0x1A	; 26
    3f2a:	01 90       	ld	r0, Z+
    3f2c:	00 20       	and	r0, r0
    3f2e:	e9 f7       	brne	.-6      	; 0x3f2a <lora_driver_get_rn2483_hweui+0x14>
    3f30:	e4 59       	subi	r30, 0x94	; 148
    3f32:	fa 41       	sbci	r31, 0x1A	; 26
    3f34:	39 f4       	brne	.+14     	; 0x3f44 <lora_driver_get_rn2483_hweui+0x2e>
    3f36:	63 e8       	ldi	r22, 0x83	; 131
    3f38:	7a e1       	ldi	r23, 0x1A	; 26
    3f3a:	ce 01       	movw	r24, r28
    3f3c:	0e 94 90 2b 	call	0x5720	; 0x5720 <strcpy>
    3f40:	80 e0       	ldi	r24, 0x00	; 0
    3f42:	02 c0       	rjmp	.+4      	; 0x3f48 <lora_driver_get_rn2483_hweui+0x32>
    3f44:	18 82       	st	Y, r1
    3f46:	81 e0       	ldi	r24, 0x01	; 1
    3f48:	df 91       	pop	r29
    3f4a:	cf 91       	pop	r28
    3f4c:	08 95       	ret

00003f4e <lora_driver_set_device_identifier>:
    3f4e:	fc 01       	movw	r30, r24
    3f50:	01 90       	ld	r0, Z+
    3f52:	00 20       	and	r0, r0
    3f54:	e9 f7       	brne	.-6      	; 0x3f50 <lora_driver_set_device_identifier+0x2>
    3f56:	9f 01       	movw	r18, r30
    3f58:	21 51       	subi	r18, 0x11	; 17
    3f5a:	31 09       	sbc	r19, r1
    3f5c:	28 17       	cp	r18, r24
    3f5e:	39 07       	cpc	r19, r25
    3f60:	29 f4       	brne	.+10     	; 0x3f6c <lora_driver_set_device_identifier+0x1e>
    3f62:	bc 01       	movw	r22, r24
    3f64:	89 e0       	ldi	r24, 0x09	; 9
    3f66:	96 e0       	ldi	r25, 0x06	; 6
    3f68:	63 cf       	rjmp	.-314    	; 0x3e30 <_upload_message_rc>
    3f6a:	08 95       	ret
    3f6c:	89 e0       	ldi	r24, 0x09	; 9
    3f6e:	08 95       	ret

00003f70 <lora_driver_set_application_identifier>:
    3f70:	fc 01       	movw	r30, r24
    3f72:	01 90       	ld	r0, Z+
    3f74:	00 20       	and	r0, r0
    3f76:	e9 f7       	brne	.-6      	; 0x3f72 <lora_driver_set_application_identifier+0x2>
    3f78:	9f 01       	movw	r18, r30
    3f7a:	21 51       	subi	r18, 0x11	; 17
    3f7c:	31 09       	sbc	r19, r1
    3f7e:	28 17       	cp	r18, r24
    3f80:	39 07       	cpc	r19, r25
    3f82:	29 f4       	brne	.+10     	; 0x3f8e <lora_driver_set_application_identifier+0x1e>
    3f84:	bc 01       	movw	r22, r24
    3f86:	88 e1       	ldi	r24, 0x18	; 24
    3f88:	96 e0       	ldi	r25, 0x06	; 6
    3f8a:	52 cf       	rjmp	.-348    	; 0x3e30 <_upload_message_rc>
    3f8c:	08 95       	ret
    3f8e:	89 e0       	ldi	r24, 0x09	; 9
    3f90:	08 95       	ret

00003f92 <lora_driver_set_application_key>:
    3f92:	fc 01       	movw	r30, r24
    3f94:	01 90       	ld	r0, Z+
    3f96:	00 20       	and	r0, r0
    3f98:	e9 f7       	brne	.-6      	; 0x3f94 <lora_driver_set_application_key+0x2>
    3f9a:	9f 01       	movw	r18, r30
    3f9c:	21 52       	subi	r18, 0x21	; 33
    3f9e:	31 09       	sbc	r19, r1
    3fa0:	28 17       	cp	r18, r24
    3fa2:	39 07       	cpc	r19, r25
    3fa4:	29 f4       	brne	.+10     	; 0x3fb0 <lora_driver_set_application_key+0x1e>
    3fa6:	bc 01       	movw	r22, r24
    3fa8:	87 e2       	ldi	r24, 0x27	; 39
    3faa:	96 e0       	ldi	r25, 0x06	; 6
    3fac:	41 cf       	rjmp	.-382    	; 0x3e30 <_upload_message_rc>
    3fae:	08 95       	ret
    3fb0:	89 e0       	ldi	r24, 0x09	; 9
    3fb2:	08 95       	ret

00003fb4 <lora_driver_save_mac>:
    3fb4:	60 e0       	ldi	r22, 0x00	; 0
    3fb6:	70 e0       	ldi	r23, 0x00	; 0
    3fb8:	86 e6       	ldi	r24, 0x66	; 102
    3fba:	96 e0       	ldi	r25, 0x06	; 6
    3fbc:	39 cf       	rjmp	.-398    	; 0x3e30 <_upload_message_rc>
    3fbe:	08 95       	ret

00003fc0 <lora_driver_join>:
    3fc0:	0f 93       	push	r16
    3fc2:	1f 93       	push	r17
    3fc4:	e8 2f       	mov	r30, r24
    3fc6:	f0 e0       	ldi	r31, 0x00	; 0
    3fc8:	ee 0f       	add	r30, r30
    3fca:	ff 1f       	adc	r31, r31
    3fcc:	e0 5c       	subi	r30, 0xC0	; 192
    3fce:	f7 4f       	sbci	r31, 0xF7	; 247
    3fd0:	60 81       	ld	r22, Z
    3fd2:	71 81       	ldd	r23, Z+1	; 0x01
    3fd4:	8f e6       	ldi	r24, 0x6F	; 111
    3fd6:	96 e0       	ldi	r25, 0x06	; 6
    3fd8:	2b df       	rcall	.-426    	; 0x3e30 <_upload_message_rc>
    3fda:	81 11       	cpse	r24, r1
    3fdc:	14 c0       	rjmp	.+40     	; 0x4006 <lora_driver_join+0x46>
    3fde:	08 e2       	ldi	r16, 0x28	; 40
    3fe0:	15 e0       	ldi	r17, 0x05	; 5
    3fe2:	20 e0       	ldi	r18, 0x00	; 0
    3fe4:	30 e0       	ldi	r19, 0x00	; 0
    3fe6:	4d e2       	ldi	r20, 0x2D	; 45
    3fe8:	50 e0       	ldi	r21, 0x00	; 0
    3fea:	63 e8       	ldi	r22, 0x83	; 131
    3fec:	7a e1       	ldi	r23, 0x1A	; 26
    3fee:	80 91 fa 19 	lds	r24, 0x19FA	; 0x8019fa <_serial_reply_buffer_handle>
    3ff2:	90 91 fb 19 	lds	r25, 0x19FB	; 0x8019fb <_serial_reply_buffer_handle+0x1>
    3ff6:	0e 94 29 11 	call	0x2252	; 0x2252 <xStreamBufferReceive>
    3ffa:	88 23       	and	r24, r24
    3ffc:	21 f0       	breq	.+8      	; 0x4006 <lora_driver_join+0x46>
    3ffe:	83 e8       	ldi	r24, 0x83	; 131
    4000:	9a e1       	ldi	r25, 0x1A	; 26
    4002:	a1 de       	rcall	.-702    	; 0x3d46 <_reply2return_code>
    4004:	03 c0       	rjmp	.+6      	; 0x400c <lora_driver_join+0x4c>
    4006:	83 e8       	ldi	r24, 0x83	; 131
    4008:	9a e1       	ldi	r25, 0x1A	; 26
    400a:	9d de       	rcall	.-710    	; 0x3d46 <_reply2return_code>
    400c:	1f 91       	pop	r17
    400e:	0f 91       	pop	r16
    4010:	08 95       	ret

00004012 <lora_driver_sent_upload_message>:
    4012:	0f 93       	push	r16
    4014:	1f 93       	push	r17
    4016:	cf 93       	push	r28
    4018:	df 93       	push	r29
    401a:	1f 92       	push	r1
    401c:	cd b7       	in	r28, 0x3d	; 61
    401e:	de b7       	in	r29, 0x3e	; 62
    4020:	db 01       	movw	r26, r22
    4022:	11 96       	adiw	r26, 0x01	; 1
    4024:	9c 91       	ld	r25, X
    4026:	11 97       	sbiw	r26, 0x01	; 1
    4028:	95 31       	cpi	r25, 0x15	; 21
    402a:	08 f0       	brcs	.+2      	; 0x402e <lora_driver_sent_upload_message+0x1c>
    402c:	b4 c0       	rjmp	.+360    	; 0x4196 <lora_driver_sent_upload_message+0x184>
    402e:	99 23       	and	r25, r25
    4030:	81 f1       	breq	.+96     	; 0x4092 <lora_driver_sent_upload_message+0x80>
    4032:	60 e0       	ldi	r22, 0x00	; 0
    4034:	70 e0       	ldi	r23, 0x00	; 0
    4036:	27 2f       	mov	r18, r23
    4038:	30 e0       	ldi	r19, 0x00	; 0
    403a:	46 2f       	mov	r20, r22
    403c:	50 e0       	ldi	r21, 0x00	; 0
    403e:	fd 01       	movw	r30, r26
    4040:	e4 0f       	add	r30, r20
    4042:	f5 1f       	adc	r31, r21
    4044:	92 81       	ldd	r25, Z+2	; 0x02
    4046:	92 95       	swap	r25
    4048:	9f 70       	andi	r25, 0x0F	; 15
    404a:	9a 30       	cpi	r25, 0x0A	; 10
    404c:	10 f0       	brcs	.+4      	; 0x4052 <lora_driver_sent_upload_message+0x40>
    404e:	99 5c       	subi	r25, 0xC9	; 201
    4050:	01 c0       	rjmp	.+2      	; 0x4054 <lora_driver_sent_upload_message+0x42>
    4052:	90 5d       	subi	r25, 0xD0	; 208
    4054:	f9 01       	movw	r30, r18
    4056:	ec 5e       	subi	r30, 0xEC	; 236
    4058:	f5 4e       	sbci	r31, 0xE5	; 229
    405a:	90 83       	st	Z, r25
    405c:	2f 5f       	subi	r18, 0xFF	; 255
    405e:	3f 4f       	sbci	r19, 0xFF	; 255
    4060:	fd 01       	movw	r30, r26
    4062:	e4 0f       	add	r30, r20
    4064:	f5 1f       	adc	r31, r21
    4066:	92 81       	ldd	r25, Z+2	; 0x02
    4068:	9f 70       	andi	r25, 0x0F	; 15
    406a:	49 2f       	mov	r20, r25
    406c:	50 e0       	ldi	r21, 0x00	; 0
    406e:	4a 30       	cpi	r20, 0x0A	; 10
    4070:	51 05       	cpc	r21, r1
    4072:	14 f0       	brlt	.+4      	; 0x4078 <lora_driver_sent_upload_message+0x66>
    4074:	99 5c       	subi	r25, 0xC9	; 201
    4076:	01 c0       	rjmp	.+2      	; 0x407a <lora_driver_sent_upload_message+0x68>
    4078:	90 5d       	subi	r25, 0xD0	; 208
    407a:	f9 01       	movw	r30, r18
    407c:	ec 5e       	subi	r30, 0xEC	; 236
    407e:	f5 4e       	sbci	r31, 0xE5	; 229
    4080:	90 83       	st	Z, r25
    4082:	7e 5f       	subi	r23, 0xFE	; 254
    4084:	6f 5f       	subi	r22, 0xFF	; 255
    4086:	11 96       	adiw	r26, 0x01	; 1
    4088:	9c 91       	ld	r25, X
    408a:	11 97       	sbiw	r26, 0x01	; 1
    408c:	69 17       	cp	r22, r25
    408e:	98 f2       	brcs	.-90     	; 0x4036 <lora_driver_sent_upload_message+0x24>
    4090:	01 c0       	rjmp	.+2      	; 0x4094 <lora_driver_sent_upload_message+0x82>
    4092:	70 e0       	ldi	r23, 0x00	; 0
    4094:	e7 2f       	mov	r30, r23
    4096:	f0 e0       	ldi	r31, 0x00	; 0
    4098:	ec 5e       	subi	r30, 0xEC	; 236
    409a:	f5 4e       	sbci	r31, 0xE5	; 229
    409c:	10 82       	st	Z, r1
    409e:	4c 91       	ld	r20, X
    40a0:	81 11       	cpse	r24, r1
    40a2:	03 c0       	rjmp	.+6      	; 0x40aa <lora_driver_sent_upload_message+0x98>
    40a4:	88 e7       	ldi	r24, 0x78	; 120
    40a6:	96 e0       	ldi	r25, 0x06	; 6
    40a8:	02 c0       	rjmp	.+4      	; 0x40ae <lora_driver_sent_upload_message+0x9c>
    40aa:	8a e7       	ldi	r24, 0x7A	; 122
    40ac:	96 e0       	ldi	r25, 0x06	; 6
    40ae:	24 e1       	ldi	r18, 0x14	; 20
    40b0:	3a e1       	ldi	r19, 0x1A	; 26
    40b2:	3f 93       	push	r19
    40b4:	2f 93       	push	r18
    40b6:	1f 92       	push	r1
    40b8:	4f 93       	push	r20
    40ba:	9f 93       	push	r25
    40bc:	8f 93       	push	r24
    40be:	8e e7       	ldi	r24, 0x7E	; 126
    40c0:	96 e0       	ldi	r25, 0x06	; 6
    40c2:	9f 93       	push	r25
    40c4:	8f 93       	push	r24
    40c6:	86 e5       	ldi	r24, 0x56	; 86
    40c8:	9a e1       	ldi	r25, 0x1A	; 26
    40ca:	9f 93       	push	r25
    40cc:	8f 93       	push	r24
    40ce:	0e 94 f2 2b 	call	0x57e4	; 0x57e4 <sprintf>
    40d2:	60 e0       	ldi	r22, 0x00	; 0
    40d4:	70 e0       	ldi	r23, 0x00	; 0
    40d6:	86 e5       	ldi	r24, 0x56	; 86
    40d8:	9a e1       	ldi	r25, 0x1A	; 26
    40da:	aa de       	rcall	.-684    	; 0x3e30 <_upload_message_rc>
    40dc:	0f b6       	in	r0, 0x3f	; 63
    40de:	f8 94       	cli
    40e0:	de bf       	out	0x3e, r29	; 62
    40e2:	0f be       	out	0x3f, r0	; 63
    40e4:	cd bf       	out	0x3d, r28	; 61
    40e6:	81 11       	cpse	r24, r1
    40e8:	59 c0       	rjmp	.+178    	; 0x419c <lora_driver_sent_upload_message+0x18a>
    40ea:	08 e2       	ldi	r16, 0x28	; 40
    40ec:	15 e0       	ldi	r17, 0x05	; 5
    40ee:	20 e0       	ldi	r18, 0x00	; 0
    40f0:	30 e0       	ldi	r19, 0x00	; 0
    40f2:	4d e2       	ldi	r20, 0x2D	; 45
    40f4:	50 e0       	ldi	r21, 0x00	; 0
    40f6:	63 e8       	ldi	r22, 0x83	; 131
    40f8:	7a e1       	ldi	r23, 0x1A	; 26
    40fa:	80 91 fa 19 	lds	r24, 0x19FA	; 0x8019fa <_serial_reply_buffer_handle>
    40fe:	90 91 fb 19 	lds	r25, 0x19FB	; 0x8019fb <_serial_reply_buffer_handle+0x1>
    4102:	0e 94 29 11 	call	0x2252	; 0x2252 <xStreamBufferReceive>
    4106:	88 23       	and	r24, r24
    4108:	09 f4       	brne	.+2      	; 0x410c <lora_driver_sent_upload_message+0xfa>
    410a:	47 c0       	rjmp	.+142    	; 0x419a <lora_driver_sent_upload_message+0x188>
    410c:	83 e8       	ldi	r24, 0x83	; 131
    410e:	9a e1       	ldi	r25, 0x1A	; 26
    4110:	1a de       	rcall	.-972    	; 0x3d46 <_reply2return_code>
    4112:	8e 30       	cpi	r24, 0x0E	; 14
    4114:	09 f0       	breq	.+2      	; 0x4118 <lora_driver_sent_upload_message+0x106>
    4116:	42 c0       	rjmp	.+132    	; 0x419c <lora_driver_sent_upload_message+0x18a>
    4118:	87 e0       	ldi	r24, 0x07	; 7
    411a:	89 83       	std	Y+1, r24	; 0x01
    411c:	80 91 f8 19 	lds	r24, 0x19F8	; 0x8019f8 <_downlinkMessageBuffer>
    4120:	90 91 f9 19 	lds	r25, 0x19F9	; 0x8019f9 <_downlinkMessageBuffer+0x1>
    4124:	89 2b       	or	r24, r25
    4126:	a9 f1       	breq	.+106    	; 0x4192 <lora_driver_sent_upload_message+0x180>
    4128:	be 01       	movw	r22, r28
    412a:	6f 5f       	subi	r22, 0xFF	; 255
    412c:	7f 4f       	sbci	r23, 0xFF	; 255
    412e:	83 e8       	ldi	r24, 0x83	; 131
    4130:	9a e1       	ldi	r25, 0x1A	; 26
    4132:	68 d1       	rcall	.+720    	; 0x4404 <decode_port_no>
    4134:	80 93 fe 19 	sts	0x19FE, r24	; 0x8019fe <_downlink_payload>
    4138:	e9 81       	ldd	r30, Y+1	; 0x01
    413a:	f0 e0       	ldi	r31, 0x00	; 0
    413c:	ed 57       	subi	r30, 0x7D	; 125
    413e:	f5 4e       	sbci	r31, 0xE5	; 229
    4140:	df 01       	movw	r26, r30
    4142:	0d 90       	ld	r0, X+
    4144:	00 20       	and	r0, r0
    4146:	e9 f7       	brne	.-6      	; 0x4142 <lora_driver_sent_upload_message+0x130>
    4148:	11 97       	sbiw	r26, 0x01	; 1
    414a:	ae 1b       	sub	r26, r30
    414c:	bf 0b       	sbc	r27, r31
    414e:	aa 23       	and	r26, r26
    4150:	91 f0       	breq	.+36     	; 0x4176 <lora_driver_sent_upload_message+0x164>
    4152:	bb 27       	eor	r27, r27
    4154:	cd 01       	movw	r24, r26
    4156:	01 97       	sbiw	r24, 0x01	; 1
    4158:	9c 01       	movw	r18, r24
    415a:	12 f4       	brpl	.+4      	; 0x4160 <lora_driver_sent_upload_message+0x14e>
    415c:	2f 5f       	subi	r18, 0xFF	; 255
    415e:	3f 4f       	sbci	r19, 0xFF	; 255
    4160:	35 95       	asr	r19
    4162:	27 95       	ror	r18
    4164:	20 93 ff 19 	sts	0x19FF, r18	; 0x8019ff <_downlink_payload+0x1>
    4168:	af 01       	movw	r20, r30
    416a:	4f 5f       	subi	r20, 0xFF	; 255
    416c:	5f 4f       	sbci	r21, 0xFF	; 255
    416e:	64 e1       	ldi	r22, 0x14	; 20
    4170:	80 e0       	ldi	r24, 0x00	; 0
    4172:	9a e1       	ldi	r25, 0x1A	; 26
    4174:	73 d1       	rcall	.+742    	; 0x445c <decode_hexadecimal_string_bytes>
    4176:	01 e0       	ldi	r16, 0x01	; 1
    4178:	10 e0       	ldi	r17, 0x00	; 0
    417a:	20 e0       	ldi	r18, 0x00	; 0
    417c:	30 e0       	ldi	r19, 0x00	; 0
    417e:	46 e1       	ldi	r20, 0x16	; 22
    4180:	50 e0       	ldi	r21, 0x00	; 0
    4182:	6e ef       	ldi	r22, 0xFE	; 254
    4184:	79 e1       	ldi	r23, 0x19	; 25
    4186:	80 91 f8 19 	lds	r24, 0x19F8	; 0x8019f8 <_downlinkMessageBuffer>
    418a:	90 91 f9 19 	lds	r25, 0x19F9	; 0x8019f9 <_downlinkMessageBuffer+0x1>
    418e:	0e 94 3e 10 	call	0x207c	; 0x207c <xStreamBufferSend>
    4192:	8e e0       	ldi	r24, 0x0E	; 14
    4194:	03 c0       	rjmp	.+6      	; 0x419c <lora_driver_sent_upload_message+0x18a>
    4196:	84 e1       	ldi	r24, 0x14	; 20
    4198:	01 c0       	rjmp	.+2      	; 0x419c <lora_driver_sent_upload_message+0x18a>
    419a:	80 e0       	ldi	r24, 0x00	; 0
    419c:	0f 90       	pop	r0
    419e:	df 91       	pop	r29
    41a0:	cf 91       	pop	r28
    41a2:	1f 91       	pop	r17
    41a4:	0f 91       	pop	r16
    41a6:	08 95       	ret

000041a8 <lora_driver_set_adaptive_data_rate>:
    41a8:	81 30       	cpi	r24, 0x01	; 1
    41aa:	19 f0       	breq	.+6      	; 0x41b2 <lora_driver_set_adaptive_data_rate+0xa>
    41ac:	6e e8       	ldi	r22, 0x8E	; 142
    41ae:	76 e0       	ldi	r23, 0x06	; 6
    41b0:	02 c0       	rjmp	.+4      	; 0x41b6 <lora_driver_set_adaptive_data_rate+0xe>
    41b2:	67 e6       	ldi	r22, 0x67	; 103
    41b4:	77 e0       	ldi	r23, 0x07	; 7
    41b6:	82 e9       	ldi	r24, 0x92	; 146
    41b8:	96 e0       	ldi	r25, 0x06	; 6
    41ba:	3a ce       	rjmp	.-908    	; 0x3e30 <_upload_message_rc>
    41bc:	08 95       	ret

000041be <lora_driver_set_receive_delay>:
    41be:	9f 93       	push	r25
    41c0:	8f 93       	push	r24
    41c2:	83 ec       	ldi	r24, 0xC3	; 195
    41c4:	96 e0       	ldi	r25, 0x06	; 6
    41c6:	9f 93       	push	r25
    41c8:	8f 93       	push	r24
    41ca:	86 e5       	ldi	r24, 0x56	; 86
    41cc:	9a e1       	ldi	r25, 0x1A	; 26
    41ce:	9f 93       	push	r25
    41d0:	8f 93       	push	r24
    41d2:	0e 94 f2 2b 	call	0x57e4	; 0x57e4 <sprintf>
    41d6:	60 e0       	ldi	r22, 0x00	; 0
    41d8:	70 e0       	ldi	r23, 0x00	; 0
    41da:	86 e5       	ldi	r24, 0x56	; 86
    41dc:	9a e1       	ldi	r25, 0x1A	; 26
    41de:	28 de       	rcall	.-944    	; 0x3e30 <_upload_message_rc>
    41e0:	0f 90       	pop	r0
    41e2:	0f 90       	pop	r0
    41e4:	0f 90       	pop	r0
    41e6:	0f 90       	pop	r0
    41e8:	0f 90       	pop	r0
    41ea:	0f 90       	pop	r0
    41ec:	08 95       	ret

000041ee <lora_driver_configure_to_eu868>:
    41ee:	2f 92       	push	r2
    41f0:	3f 92       	push	r3
    41f2:	4f 92       	push	r4
    41f4:	5f 92       	push	r5
    41f6:	6f 92       	push	r6
    41f8:	7f 92       	push	r7
    41fa:	8f 92       	push	r8
    41fc:	9f 92       	push	r9
    41fe:	af 92       	push	r10
    4200:	bf 92       	push	r11
    4202:	cf 92       	push	r12
    4204:	df 92       	push	r13
    4206:	ef 92       	push	r14
    4208:	ff 92       	push	r15
    420a:	0f 93       	push	r16
    420c:	1f 93       	push	r17
    420e:	cf 93       	push	r28
    4210:	df 93       	push	r29
    4212:	cd b7       	in	r28, 0x3d	; 61
    4214:	de b7       	in	r29, 0x3e	; 62
    4216:	a0 97       	sbiw	r28, 0x20	; 32
    4218:	0f b6       	in	r0, 0x3f	; 63
    421a:	f8 94       	cli
    421c:	de bf       	out	0x3e, r29	; 62
    421e:	0f be       	out	0x3f, r0	; 63
    4220:	cd bf       	out	0x3d, r28	; 61
    4222:	60 ef       	ldi	r22, 0xF0	; 240
    4224:	76 e0       	ldi	r23, 0x06	; 6
    4226:	8c ef       	ldi	r24, 0xFC	; 252
    4228:	96 e0       	ldi	r25, 0x06	; 6
    422a:	33 dd       	rcall	.-1434   	; 0x3c92 <_upload_message>
    422c:	8c dd       	rcall	.-1256   	; 0x3d46 <_reply2return_code>
    422e:	81 11       	cpse	r24, r1
    4230:	a3 c0       	rjmp	.+326    	; 0x4378 <lora_driver_configure_to_eu868+0x18a>
    4232:	80 e2       	ldi	r24, 0x20	; 32
    4234:	e3 e2       	ldi	r30, 0x23	; 35
    4236:	f2 e0       	ldi	r31, 0x02	; 2
    4238:	de 01       	movw	r26, r28
    423a:	11 96       	adiw	r26, 0x01	; 1
    423c:	01 90       	ld	r0, Z+
    423e:	0d 92       	st	X+, r0
    4240:	8a 95       	dec	r24
    4242:	e1 f7       	brne	.-8      	; 0x423c <lora_driver_configure_to_eu868+0x4e>
    4244:	9e 01       	movw	r18, r28
    4246:	2f 5f       	subi	r18, 0xFF	; 255
    4248:	3f 4f       	sbci	r19, 0xFF	; 255
    424a:	69 01       	movw	r12, r18
    424c:	e1 2c       	mov	r14, r1
    424e:	f1 2c       	mov	r15, r1
    4250:	0f 2e       	mov	r0, r31
    4252:	f8 e0       	ldi	r31, 0x08	; 8
    4254:	af 2e       	mov	r10, r31
    4256:	f7 e0       	ldi	r31, 0x07	; 7
    4258:	bf 2e       	mov	r11, r31
    425a:	f0 2d       	mov	r31, r0
    425c:	06 e5       	ldi	r16, 0x56	; 86
    425e:	1a e1       	ldi	r17, 0x1A	; 26
    4260:	0f 2e       	mov	r0, r31
    4262:	f1 e2       	ldi	r31, 0x21	; 33
    4264:	4f 2e       	mov	r4, r31
    4266:	f7 e0       	ldi	r31, 0x07	; 7
    4268:	5f 2e       	mov	r5, r31
    426a:	f0 2d       	mov	r31, r0
    426c:	0f 2e       	mov	r0, r31
    426e:	f8 e3       	ldi	r31, 0x38	; 56
    4270:	8f 2e       	mov	r8, r31
    4272:	f7 e0       	ldi	r31, 0x07	; 7
    4274:	9f 2e       	mov	r9, r31
    4276:	f0 2d       	mov	r31, r0
    4278:	0f 2e       	mov	r0, r31
    427a:	f2 e5       	ldi	r31, 0x52	; 82
    427c:	6f 2e       	mov	r6, r31
    427e:	f7 e0       	ldi	r31, 0x07	; 7
    4280:	7f 2e       	mov	r7, r31
    4282:	f0 2d       	mov	r31, r0
    4284:	3e 2c       	mov	r3, r14
    4286:	2f 2c       	mov	r2, r15
    4288:	ff 92       	push	r15
    428a:	ef 92       	push	r14
    428c:	bf 92       	push	r11
    428e:	af 92       	push	r10
    4290:	1f 93       	push	r17
    4292:	0f 93       	push	r16
    4294:	0e 94 f2 2b 	call	0x57e4	; 0x57e4 <sprintf>
    4298:	60 e0       	ldi	r22, 0x00	; 0
    429a:	70 e0       	ldi	r23, 0x00	; 0
    429c:	c8 01       	movw	r24, r16
    429e:	f9 dc       	rcall	.-1550   	; 0x3c92 <_upload_message>
    42a0:	52 dd       	rcall	.-1372   	; 0x3d46 <_reply2return_code>
    42a2:	0f 90       	pop	r0
    42a4:	0f 90       	pop	r0
    42a6:	0f 90       	pop	r0
    42a8:	0f 90       	pop	r0
    42aa:	0f 90       	pop	r0
    42ac:	0f 90       	pop	r0
    42ae:	81 11       	cpse	r24, r1
    42b0:	63 c0       	rjmp	.+198    	; 0x4378 <lora_driver_configure_to_eu868+0x18a>
    42b2:	32 e0       	ldi	r19, 0x02	; 2
    42b4:	3e 15       	cp	r19, r14
    42b6:	e8 f4       	brcc	.+58     	; 0x42f2 <lora_driver_configure_to_eu868+0x104>
    42b8:	f6 01       	movw	r30, r12
    42ba:	83 81       	ldd	r24, Z+3	; 0x03
    42bc:	8f 93       	push	r24
    42be:	82 81       	ldd	r24, Z+2	; 0x02
    42c0:	8f 93       	push	r24
    42c2:	81 81       	ldd	r24, Z+1	; 0x01
    42c4:	8f 93       	push	r24
    42c6:	80 81       	ld	r24, Z
    42c8:	8f 93       	push	r24
    42ca:	ff 92       	push	r15
    42cc:	ef 92       	push	r14
    42ce:	5f 92       	push	r5
    42d0:	4f 92       	push	r4
    42d2:	1f 93       	push	r17
    42d4:	0f 93       	push	r16
    42d6:	0e 94 f2 2b 	call	0x57e4	; 0x57e4 <sprintf>
    42da:	60 e0       	ldi	r22, 0x00	; 0
    42dc:	70 e0       	ldi	r23, 0x00	; 0
    42de:	c8 01       	movw	r24, r16
    42e0:	d8 dc       	rcall	.-1616   	; 0x3c92 <_upload_message>
    42e2:	31 dd       	rcall	.-1438   	; 0x3d46 <_reply2return_code>
    42e4:	0f b6       	in	r0, 0x3f	; 63
    42e6:	f8 94       	cli
    42e8:	de bf       	out	0x3e, r29	; 62
    42ea:	0f be       	out	0x3f, r0	; 63
    42ec:	cd bf       	out	0x3d, r28	; 61
    42ee:	81 11       	cpse	r24, r1
    42f0:	43 c0       	rjmp	.+134    	; 0x4378 <lora_driver_configure_to_eu868+0x18a>
    42f2:	2f 92       	push	r2
    42f4:	3f 92       	push	r3
    42f6:	9f 92       	push	r9
    42f8:	8f 92       	push	r8
    42fa:	1f 93       	push	r17
    42fc:	0f 93       	push	r16
    42fe:	0e 94 f2 2b 	call	0x57e4	; 0x57e4 <sprintf>
    4302:	60 e0       	ldi	r22, 0x00	; 0
    4304:	70 e0       	ldi	r23, 0x00	; 0
    4306:	c8 01       	movw	r24, r16
    4308:	c4 dc       	rcall	.-1656   	; 0x3c92 <_upload_message>
    430a:	1d dd       	rcall	.-1478   	; 0x3d46 <_reply2return_code>
    430c:	0f 90       	pop	r0
    430e:	0f 90       	pop	r0
    4310:	0f 90       	pop	r0
    4312:	0f 90       	pop	r0
    4314:	0f 90       	pop	r0
    4316:	0f 90       	pop	r0
    4318:	81 11       	cpse	r24, r1
    431a:	2e c0       	rjmp	.+92     	; 0x4378 <lora_driver_configure_to_eu868+0x18a>
    431c:	2f 92       	push	r2
    431e:	3f 92       	push	r3
    4320:	7f 92       	push	r7
    4322:	6f 92       	push	r6
    4324:	1f 93       	push	r17
    4326:	0f 93       	push	r16
    4328:	0e 94 f2 2b 	call	0x57e4	; 0x57e4 <sprintf>
    432c:	60 e0       	ldi	r22, 0x00	; 0
    432e:	70 e0       	ldi	r23, 0x00	; 0
    4330:	c8 01       	movw	r24, r16
    4332:	af dc       	rcall	.-1698   	; 0x3c92 <_upload_message>
    4334:	08 dd       	rcall	.-1520   	; 0x3d46 <_reply2return_code>
    4336:	0f 90       	pop	r0
    4338:	0f 90       	pop	r0
    433a:	0f 90       	pop	r0
    433c:	0f 90       	pop	r0
    433e:	0f 90       	pop	r0
    4340:	0f 90       	pop	r0
    4342:	81 11       	cpse	r24, r1
    4344:	19 c0       	rjmp	.+50     	; 0x4378 <lora_driver_configure_to_eu868+0x18a>
    4346:	3f ef       	ldi	r19, 0xFF	; 255
    4348:	e3 1a       	sub	r14, r19
    434a:	f3 0a       	sbc	r15, r19
    434c:	84 e0       	ldi	r24, 0x04	; 4
    434e:	c8 0e       	add	r12, r24
    4350:	d1 1c       	adc	r13, r1
    4352:	98 e0       	ldi	r25, 0x08	; 8
    4354:	e9 16       	cp	r14, r25
    4356:	f1 04       	cpc	r15, r1
    4358:	09 f0       	breq	.+2      	; 0x435c <lora_driver_configure_to_eu868+0x16e>
    435a:	94 cf       	rjmp	.-216    	; 0x4284 <lora_driver_configure_to_eu868+0x96>
    435c:	60 e0       	ldi	r22, 0x00	; 0
    435e:	70 e0       	ldi	r23, 0x00	; 0
    4360:	8a e6       	ldi	r24, 0x6A	; 106
    4362:	97 e0       	ldi	r25, 0x07	; 7
    4364:	96 dc       	rcall	.-1748   	; 0x3c92 <_upload_message>
    4366:	ef dc       	rcall	.-1570   	; 0x3d46 <_reply2return_code>
    4368:	81 11       	cpse	r24, r1
    436a:	06 c0       	rjmp	.+12     	; 0x4378 <lora_driver_configure_to_eu868+0x18a>
    436c:	60 e0       	ldi	r22, 0x00	; 0
    436e:	70 e0       	ldi	r23, 0x00	; 0
    4370:	8b e7       	ldi	r24, 0x7B	; 123
    4372:	97 e0       	ldi	r25, 0x07	; 7
    4374:	8e dc       	rcall	.-1764   	; 0x3c92 <_upload_message>
    4376:	e7 dc       	rcall	.-1586   	; 0x3d46 <_reply2return_code>
    4378:	a0 96       	adiw	r28, 0x20	; 32
    437a:	0f b6       	in	r0, 0x3f	; 63
    437c:	f8 94       	cli
    437e:	de bf       	out	0x3e, r29	; 62
    4380:	0f be       	out	0x3f, r0	; 63
    4382:	cd bf       	out	0x3d, r28	; 61
    4384:	df 91       	pop	r29
    4386:	cf 91       	pop	r28
    4388:	1f 91       	pop	r17
    438a:	0f 91       	pop	r16
    438c:	ff 90       	pop	r15
    438e:	ef 90       	pop	r14
    4390:	df 90       	pop	r13
    4392:	cf 90       	pop	r12
    4394:	bf 90       	pop	r11
    4396:	af 90       	pop	r10
    4398:	9f 90       	pop	r9
    439a:	8f 90       	pop	r8
    439c:	7f 90       	pop	r7
    439e:	6f 90       	pop	r6
    43a0:	5f 90       	pop	r5
    43a2:	4f 90       	pop	r4
    43a4:	3f 90       	pop	r3
    43a6:	2f 90       	pop	r2
    43a8:	08 95       	ret

000043aa <lora_driver_set_otaa_identity>:
    43aa:	ef 92       	push	r14
    43ac:	ff 92       	push	r15
    43ae:	0f 93       	push	r16
    43b0:	1f 93       	push	r17
    43b2:	cf 93       	push	r28
    43b4:	df 93       	push	r29
    43b6:	ec 01       	movw	r28, r24
    43b8:	8b 01       	movw	r16, r22
    43ba:	7a 01       	movw	r14, r20
    43bc:	81 e0       	ldi	r24, 0x01	; 1
    43be:	f4 de       	rcall	.-536    	; 0x41a8 <lora_driver_set_adaptive_data_rate>
    43c0:	81 11       	cpse	r24, r1
    43c2:	0d c0       	rjmp	.+26     	; 0x43de <lora_driver_set_otaa_identity+0x34>
    43c4:	ce 01       	movw	r24, r28
    43c6:	d4 dd       	rcall	.-1112   	; 0x3f70 <lora_driver_set_application_identifier>
    43c8:	81 11       	cpse	r24, r1
    43ca:	09 c0       	rjmp	.+18     	; 0x43de <lora_driver_set_otaa_identity+0x34>
    43cc:	c8 01       	movw	r24, r16
    43ce:	e1 dd       	rcall	.-1086   	; 0x3f92 <lora_driver_set_application_key>
    43d0:	81 11       	cpse	r24, r1
    43d2:	05 c0       	rjmp	.+10     	; 0x43de <lora_driver_set_otaa_identity+0x34>
    43d4:	c7 01       	movw	r24, r14
    43d6:	bb dd       	rcall	.-1162   	; 0x3f4e <lora_driver_set_device_identifier>
    43d8:	81 11       	cpse	r24, r1
    43da:	01 c0       	rjmp	.+2      	; 0x43de <lora_driver_set_otaa_identity+0x34>
    43dc:	eb dd       	rcall	.-1066   	; 0x3fb4 <lora_driver_save_mac>
    43de:	df 91       	pop	r29
    43e0:	cf 91       	pop	r28
    43e2:	1f 91       	pop	r17
    43e4:	0f 91       	pop	r16
    43e6:	ff 90       	pop	r15
    43e8:	ef 90       	pop	r14
    43ea:	08 95       	ret

000043ec <lora_driver_map_return_code_to_text>:
    43ec:	90 e0       	ldi	r25, 0x00	; 0
    43ee:	fc 01       	movw	r30, r24
    43f0:	ee 0f       	add	r30, r30
    43f2:	ff 1f       	adc	r31, r31
    43f4:	8e 0f       	add	r24, r30
    43f6:	9f 1f       	adc	r25, r31
    43f8:	fc 01       	movw	r30, r24
    43fa:	ec 5b       	subi	r30, 0xBC	; 188
    43fc:	f7 4f       	sbci	r31, 0xF7	; 247
    43fe:	81 81       	ldd	r24, Z+1	; 0x01
    4400:	92 81       	ldd	r25, Z+2	; 0x02
    4402:	08 95       	ret

00004404 <decode_port_no>:
    4404:	dc 01       	movw	r26, r24
    4406:	00 97       	sbiw	r24, 0x00	; 0
    4408:	29 f1       	breq	.+74     	; 0x4454 <decode_port_no+0x50>
    440a:	fb 01       	movw	r30, r22
    440c:	20 81       	ld	r18, Z
    440e:	fc 01       	movw	r30, r24
    4410:	01 90       	ld	r0, Z+
    4412:	00 20       	and	r0, r0
    4414:	e9 f7       	brne	.-6      	; 0x4410 <decode_port_no+0xc>
    4416:	31 97       	sbiw	r30, 0x01	; 1
    4418:	e8 1b       	sub	r30, r24
    441a:	f9 0b       	sbc	r31, r25
    441c:	82 2f       	mov	r24, r18
    441e:	90 e0       	ldi	r25, 0x00	; 0
    4420:	e8 17       	cp	r30, r24
    4422:	f9 07       	cpc	r31, r25
    4424:	c8 f0       	brcs	.+50     	; 0x4458 <decode_port_no+0x54>
    4426:	80 e0       	ldi	r24, 0x00	; 0
    4428:	08 c0       	rjmp	.+16     	; 0x443a <decode_port_no+0x36>
    442a:	88 0f       	add	r24, r24
    442c:	38 2f       	mov	r19, r24
    442e:	33 0f       	add	r19, r19
    4430:	33 0f       	add	r19, r19
    4432:	83 0f       	add	r24, r19
    4434:	80 53       	subi	r24, 0x30	; 48
    4436:	89 0f       	add	r24, r25
    4438:	2f 5f       	subi	r18, 0xFF	; 255
    443a:	fd 01       	movw	r30, r26
    443c:	e2 0f       	add	r30, r18
    443e:	f1 1d       	adc	r31, r1
    4440:	90 81       	ld	r25, Z
    4442:	30 ed       	ldi	r19, 0xD0	; 208
    4444:	39 0f       	add	r19, r25
    4446:	3a 30       	cpi	r19, 0x0A	; 10
    4448:	10 f4       	brcc	.+4      	; 0x444e <decode_port_no+0x4a>
    444a:	91 11       	cpse	r25, r1
    444c:	ee cf       	rjmp	.-36     	; 0x442a <decode_port_no+0x26>
    444e:	fb 01       	movw	r30, r22
    4450:	20 83       	st	Z, r18
    4452:	08 95       	ret
    4454:	80 e0       	ldi	r24, 0x00	; 0
    4456:	08 95       	ret
    4458:	80 e0       	ldi	r24, 0x00	; 0
    445a:	08 95       	ret

0000445c <decode_hexadecimal_string_bytes>:
    445c:	0f 93       	push	r16
    445e:	1f 93       	push	r17
    4460:	cf 93       	push	r28
    4462:	df 93       	push	r29
    4464:	dc 01       	movw	r26, r24
    4466:	ea 01       	movw	r28, r20
    4468:	20 97       	sbiw	r28, 0x00	; 0
    446a:	e1 f1       	breq	.+120    	; 0x44e4 <decode_hexadecimal_string_bytes+0x88>
    446c:	fa 01       	movw	r30, r20
    446e:	01 90       	ld	r0, Z+
    4470:	00 20       	and	r0, r0
    4472:	e9 f7       	brne	.-6      	; 0x446e <decode_hexadecimal_string_bytes+0x12>
    4474:	31 97       	sbiw	r30, 0x01	; 1
    4476:	e4 1b       	sub	r30, r20
    4478:	f5 0b       	sbc	r31, r21
    447a:	32 97       	sbiw	r30, 0x02	; 2
    447c:	10 f5       	brcc	.+68     	; 0x44c2 <decode_hexadecimal_string_bytes+0x66>
    447e:	32 c0       	rjmp	.+100    	; 0x44e4 <decode_hexadecimal_string_bytes+0x88>
    4480:	8d 01       	movw	r16, r26
    4482:	04 0f       	add	r16, r20
    4484:	15 1f       	adc	r17, r21
    4486:	30 e0       	ldi	r19, 0x00	; 0
    4488:	ae 01       	movw	r20, r28
    448a:	42 0f       	add	r20, r18
    448c:	53 1f       	adc	r21, r19
    448e:	fa 01       	movw	r30, r20
    4490:	90 81       	ld	r25, Z
    4492:	91 34       	cpi	r25, 0x41	; 65
    4494:	28 f0       	brcs	.+10     	; 0x44a0 <decode_hexadecimal_string_bytes+0x44>
    4496:	97 53       	subi	r25, 0x37	; 55
    4498:	59 2f       	mov	r21, r25
    449a:	52 95       	swap	r21
    449c:	50 7f       	andi	r21, 0xF0	; 240
    449e:	03 c0       	rjmp	.+6      	; 0x44a6 <decode_hexadecimal_string_bytes+0x4a>
    44a0:	59 2f       	mov	r21, r25
    44a2:	52 95       	swap	r21
    44a4:	50 7f       	andi	r21, 0xF0	; 240
    44a6:	2c 0f       	add	r18, r28
    44a8:	3d 1f       	adc	r19, r29
    44aa:	f9 01       	movw	r30, r18
    44ac:	91 81       	ldd	r25, Z+1	; 0x01
    44ae:	91 34       	cpi	r25, 0x41	; 65
    44b0:	10 f0       	brcs	.+4      	; 0x44b6 <decode_hexadecimal_string_bytes+0x5a>
    44b2:	97 53       	subi	r25, 0x37	; 55
    44b4:	01 c0       	rjmp	.+2      	; 0x44b8 <decode_hexadecimal_string_bytes+0x5c>
    44b6:	90 53       	subi	r25, 0x30	; 48
    44b8:	95 0f       	add	r25, r21
    44ba:	f8 01       	movw	r30, r16
    44bc:	90 83       	st	Z, r25
    44be:	8f 5f       	subi	r24, 0xFF	; 255
    44c0:	01 c0       	rjmp	.+2      	; 0x44c4 <decode_hexadecimal_string_bytes+0x68>
    44c2:	80 e0       	ldi	r24, 0x00	; 0
    44c4:	28 2f       	mov	r18, r24
    44c6:	22 0f       	add	r18, r18
    44c8:	48 2f       	mov	r20, r24
    44ca:	50 e0       	ldi	r21, 0x00	; 0
    44cc:	fe 01       	movw	r30, r28
    44ce:	01 90       	ld	r0, Z+
    44d0:	00 20       	and	r0, r0
    44d2:	e9 f7       	brne	.-6      	; 0x44ce <decode_hexadecimal_string_bytes+0x72>
    44d4:	31 97       	sbiw	r30, 0x01	; 1
    44d6:	ec 1b       	sub	r30, r28
    44d8:	fd 0b       	sbc	r31, r29
    44da:	4e 17       	cp	r20, r30
    44dc:	5f 07       	cpc	r21, r31
    44de:	10 f4       	brcc	.+4      	; 0x44e4 <decode_hexadecimal_string_bytes+0x88>
    44e0:	86 13       	cpse	r24, r22
    44e2:	ce cf       	rjmp	.-100    	; 0x4480 <decode_hexadecimal_string_bytes+0x24>
    44e4:	df 91       	pop	r29
    44e6:	cf 91       	pop	r28
    44e8:	1f 91       	pop	r17
    44ea:	0f 91       	pop	r16
    44ec:	08 95       	ret

000044ee <reg_read_register>:
    44ee:	fc 01       	movw	r30, r24
    44f0:	80 81       	ld	r24, Z
    44f2:	08 95       	ret

000044f4 <reg_read_bit>:
    44f4:	fc 01       	movw	r30, r24
    44f6:	20 81       	ld	r18, Z
    44f8:	81 e0       	ldi	r24, 0x01	; 1
    44fa:	90 e0       	ldi	r25, 0x00	; 0
    44fc:	02 c0       	rjmp	.+4      	; 0x4502 <reg_read_bit+0xe>
    44fe:	88 0f       	add	r24, r24
    4500:	99 1f       	adc	r25, r25
    4502:	6a 95       	dec	r22
    4504:	e2 f7       	brpl	.-8      	; 0x44fe <reg_read_bit+0xa>
    4506:	82 23       	and	r24, r18
    4508:	08 95       	ret

0000450a <reg_read_bits>:
    450a:	fc 01       	movw	r30, r24
    450c:	80 81       	ld	r24, Z
    450e:	86 23       	and	r24, r22
    4510:	08 95       	ret

00004512 <reg_set_register>:
    4512:	fc 01       	movw	r30, r24
    4514:	60 83       	st	Z, r22
    4516:	08 95       	ret

00004518 <reg_clear_register>:
    4518:	fc 01       	movw	r30, r24
    451a:	10 82       	st	Z, r1
    451c:	08 95       	ret

0000451e <reg_set_bit>:
    451e:	fc 01       	movw	r30, r24
    4520:	40 81       	ld	r20, Z
    4522:	21 e0       	ldi	r18, 0x01	; 1
    4524:	30 e0       	ldi	r19, 0x00	; 0
    4526:	02 c0       	rjmp	.+4      	; 0x452c <reg_set_bit+0xe>
    4528:	22 0f       	add	r18, r18
    452a:	33 1f       	adc	r19, r19
    452c:	6a 95       	dec	r22
    452e:	e2 f7       	brpl	.-8      	; 0x4528 <reg_set_bit+0xa>
    4530:	24 2b       	or	r18, r20
    4532:	20 83       	st	Z, r18
    4534:	08 95       	ret

00004536 <reg_set_bits>:
    4536:	fc 01       	movw	r30, r24
    4538:	20 81       	ld	r18, Z
    453a:	62 2b       	or	r22, r18
    453c:	60 83       	st	Z, r22
    453e:	08 95       	ret

00004540 <reg_toggle_bit>:
    4540:	fc 01       	movw	r30, r24
    4542:	40 81       	ld	r20, Z
    4544:	21 e0       	ldi	r18, 0x01	; 1
    4546:	30 e0       	ldi	r19, 0x00	; 0
    4548:	02 c0       	rjmp	.+4      	; 0x454e <reg_toggle_bit+0xe>
    454a:	22 0f       	add	r18, r18
    454c:	33 1f       	adc	r19, r19
    454e:	6a 95       	dec	r22
    4550:	e2 f7       	brpl	.-8      	; 0x454a <reg_toggle_bit+0xa>
    4552:	24 27       	eor	r18, r20
    4554:	20 83       	st	Z, r18
    4556:	08 95       	ret

00004558 <reg_toggle_bits>:
    4558:	fc 01       	movw	r30, r24
    455a:	20 81       	ld	r18, Z
    455c:	62 27       	eor	r22, r18
    455e:	60 83       	st	Z, r22
    4560:	08 95       	ret

00004562 <reg_clear_bit>:
    4562:	fc 01       	movw	r30, r24
    4564:	90 81       	ld	r25, Z
    4566:	21 e0       	ldi	r18, 0x01	; 1
    4568:	30 e0       	ldi	r19, 0x00	; 0
    456a:	02 c0       	rjmp	.+4      	; 0x4570 <reg_clear_bit+0xe>
    456c:	22 0f       	add	r18, r18
    456e:	33 1f       	adc	r19, r19
    4570:	6a 95       	dec	r22
    4572:	e2 f7       	brpl	.-8      	; 0x456c <reg_clear_bit+0xa>
    4574:	20 95       	com	r18
    4576:	29 23       	and	r18, r25
    4578:	20 83       	st	Z, r18
    457a:	08 95       	ret

0000457c <reg_clear_bits>:
    457c:	fc 01       	movw	r30, r24
    457e:	90 81       	ld	r25, Z
    4580:	60 95       	com	r22
    4582:	69 23       	and	r22, r25
    4584:	60 83       	st	Z, r22
    4586:	08 95       	ret

00004588 <serial_new_instance>:
    4588:	2f 92       	push	r2
    458a:	3f 92       	push	r3
    458c:	4f 92       	push	r4
    458e:	5f 92       	push	r5
    4590:	6f 92       	push	r6
    4592:	7f 92       	push	r7
    4594:	8f 92       	push	r8
    4596:	9f 92       	push	r9
    4598:	af 92       	push	r10
    459a:	cf 92       	push	r12
    459c:	ef 92       	push	r14
    459e:	ff 92       	push	r15
    45a0:	0f 93       	push	r16
    45a2:	1f 93       	push	r17
    45a4:	cf 93       	push	r28
    45a6:	df 93       	push	r29
    45a8:	cd b7       	in	r28, 0x3d	; 61
    45aa:	de b7       	in	r29, 0x3e	; 62
    45ac:	f8 2e       	mov	r15, r24
    45ae:	2a 01       	movw	r4, r20
    45b0:	3b 01       	movw	r6, r22
    45b2:	88 e0       	ldi	r24, 0x08	; 8
    45b4:	90 e0       	ldi	r25, 0x00	; 0
    45b6:	4f d7       	rcall	.+3742   	; 0x5456 <malloc>
    45b8:	8c 01       	movw	r16, r24
    45ba:	8f 2d       	mov	r24, r15
    45bc:	90 e0       	ldi	r25, 0x00	; 0
    45be:	88 0f       	add	r24, r24
    45c0:	99 1f       	adc	r25, r25
    45c2:	fc 01       	movw	r30, r24
    45c4:	e0 55       	subi	r30, 0x50	; 80
    45c6:	f5 4e       	sbci	r31, 0xE5	; 229
    45c8:	11 83       	std	Z+1, r17	; 0x01
    45ca:	00 83       	st	Z, r16
    45cc:	fc 01       	movw	r30, r24
    45ce:	e4 5f       	subi	r30, 0xF4	; 244
    45d0:	fd 4f       	sbci	r31, 0xFD	; 253
    45d2:	80 81       	ld	r24, Z
    45d4:	91 81       	ldd	r25, Z+1	; 0x01
    45d6:	d8 01       	movw	r26, r16
    45d8:	8d 93       	st	X+, r24
    45da:	9c 93       	st	X, r25
    45dc:	6c 2d       	mov	r22, r12
    45de:	70 e0       	ldi	r23, 0x00	; 0
    45e0:	84 e0       	ldi	r24, 0x04	; 4
    45e2:	90 e0       	ldi	r25, 0x00	; 0
    45e4:	1e d7       	rcall	.+3644   	; 0x5422 <calloc>
    45e6:	1c 01       	movw	r2, r24
    45e8:	61 e0       	ldi	r22, 0x01	; 1
    45ea:	70 e0       	ldi	r23, 0x00	; 0
    45ec:	86 e0       	ldi	r24, 0x06	; 6
    45ee:	90 e0       	ldi	r25, 0x00	; 0
    45f0:	18 d7       	rcall	.+3632   	; 0x5422 <calloc>
    45f2:	7c 01       	movw	r14, r24
    45f4:	4c 2d       	mov	r20, r12
    45f6:	b1 01       	movw	r22, r2
    45f8:	df d4       	rcall	.+2494   	; 0x4fb8 <fifo_init>
    45fa:	f8 01       	movw	r30, r16
    45fc:	f5 82       	std	Z+5, r15	; 0x05
    45fe:	e4 82       	std	Z+4, r14	; 0x04
    4600:	6a 2d       	mov	r22, r10
    4602:	70 e0       	ldi	r23, 0x00	; 0
    4604:	84 e0       	ldi	r24, 0x04	; 4
    4606:	90 e0       	ldi	r25, 0x00	; 0
    4608:	0c d7       	rcall	.+3608   	; 0x5422 <calloc>
    460a:	1c 01       	movw	r2, r24
    460c:	61 e0       	ldi	r22, 0x01	; 1
    460e:	70 e0       	ldi	r23, 0x00	; 0
    4610:	86 e0       	ldi	r24, 0x06	; 6
    4612:	90 e0       	ldi	r25, 0x00	; 0
    4614:	06 d7       	rcall	.+3596   	; 0x5422 <calloc>
    4616:	7c 01       	movw	r14, r24
    4618:	4a 2d       	mov	r20, r10
    461a:	b1 01       	movw	r22, r2
    461c:	cd d4       	rcall	.+2458   	; 0x4fb8 <fifo_init>
    461e:	d8 01       	movw	r26, r16
    4620:	13 96       	adiw	r26, 0x03	; 3
    4622:	fc 92       	st	X, r15
    4624:	ee 92       	st	-X, r14
    4626:	12 97       	sbiw	r26, 0x02	; 2
    4628:	17 96       	adiw	r26, 0x07	; 7
    462a:	9c 92       	st	X, r9
    462c:	8e 92       	st	-X, r8
    462e:	16 97       	sbiw	r26, 0x06	; 6
    4630:	ff b6       	in	r15, 0x3f	; 63
    4632:	f8 94       	cli
    4634:	ed 91       	ld	r30, X+
    4636:	fc 91       	ld	r31, X
    4638:	11 97       	sbiw	r26, 0x01	; 1
    463a:	36 97       	sbiw	r30, 0x06	; 6
    463c:	80 81       	ld	r24, Z
    463e:	82 60       	ori	r24, 0x02	; 2
    4640:	80 83       	st	Z, r24
    4642:	8d 90       	ld	r8, X+
    4644:	9c 90       	ld	r9, X
    4646:	c3 01       	movw	r24, r6
    4648:	b2 01       	movw	r22, r4
    464a:	d0 d5       	rcall	.+2976   	; 0x51ec <__floatunsisf>
    464c:	20 e0       	ldi	r18, 0x00	; 0
    464e:	30 e0       	ldi	r19, 0x00	; 0
    4650:	40 e0       	ldi	r20, 0x00	; 0
    4652:	51 e4       	ldi	r21, 0x41	; 65
    4654:	59 d6       	rcall	.+3250   	; 0x5308 <__mulsf3>
    4656:	9b 01       	movw	r18, r22
    4658:	ac 01       	movw	r20, r24
    465a:	60 e0       	ldi	r22, 0x00	; 0
    465c:	74 e2       	ldi	r23, 0x24	; 36
    465e:	84 e7       	ldi	r24, 0x74	; 116
    4660:	9b e4       	ldi	r25, 0x4B	; 75
    4662:	2b d5       	rcall	.+2646   	; 0x50ba <__divsf3>
    4664:	20 e0       	ldi	r18, 0x00	; 0
    4666:	30 e0       	ldi	r19, 0x00	; 0
    4668:	40 e8       	ldi	r20, 0x80	; 128
    466a:	5f e3       	ldi	r21, 0x3F	; 63
    466c:	c1 d4       	rcall	.+2434   	; 0x4ff0 <__subsf3>
    466e:	92 d5       	rcall	.+2852   	; 0x5194 <__fixunssfsi>
    4670:	f4 01       	movw	r30, r8
    4672:	32 97       	sbiw	r30, 0x02	; 2
    4674:	60 83       	st	Z, r22
    4676:	d8 01       	movw	r26, r16
    4678:	ed 91       	ld	r30, X+
    467a:	fc 91       	ld	r31, X
    467c:	11 97       	sbiw	r26, 0x01	; 1
    467e:	35 97       	sbiw	r30, 0x05	; 5
    4680:	88 e9       	ldi	r24, 0x98	; 152
    4682:	80 83       	st	Z, r24
    4684:	ed 91       	ld	r30, X+
    4686:	fc 91       	ld	r31, X
    4688:	34 97       	sbiw	r30, 0x04	; 4
    468a:	86 e0       	ldi	r24, 0x06	; 6
    468c:	80 83       	st	Z, r24
    468e:	ff be       	out	0x3f, r15	; 63
    4690:	c8 01       	movw	r24, r16
    4692:	df 91       	pop	r29
    4694:	cf 91       	pop	r28
    4696:	1f 91       	pop	r17
    4698:	0f 91       	pop	r16
    469a:	ff 90       	pop	r15
    469c:	ef 90       	pop	r14
    469e:	cf 90       	pop	r12
    46a0:	af 90       	pop	r10
    46a2:	9f 90       	pop	r9
    46a4:	8f 90       	pop	r8
    46a6:	7f 90       	pop	r7
    46a8:	6f 90       	pop	r6
    46aa:	5f 90       	pop	r5
    46ac:	4f 90       	pop	r4
    46ae:	3f 90       	pop	r3
    46b0:	2f 90       	pop	r2
    46b2:	08 95       	ret

000046b4 <serial_send_byte>:
    46b4:	cf 93       	push	r28
    46b6:	df 93       	push	r29
    46b8:	ec 01       	movw	r28, r24
    46ba:	ea 81       	ldd	r30, Y+2	; 0x02
    46bc:	fb 81       	ldd	r31, Y+3	; 0x03
    46be:	93 81       	ldd	r25, Z+3	; 0x03
    46c0:	82 81       	ldd	r24, Z+2	; 0x02
    46c2:	25 81       	ldd	r18, Z+5	; 0x05
    46c4:	98 1b       	sub	r25, r24
    46c6:	92 23       	and	r25, r18
    46c8:	84 81       	ldd	r24, Z+4	; 0x04
    46ca:	98 17       	cp	r25, r24
    46cc:	a1 f0       	breq	.+40     	; 0x46f6 <serial_send_byte+0x42>
    46ce:	93 81       	ldd	r25, Z+3	; 0x03
    46d0:	26 95       	lsr	r18
    46d2:	29 23       	and	r18, r25
    46d4:	a0 81       	ld	r26, Z
    46d6:	b1 81       	ldd	r27, Z+1	; 0x01
    46d8:	a2 0f       	add	r26, r18
    46da:	b1 1d       	adc	r27, r1
    46dc:	6c 93       	st	X, r22
    46de:	9f 5f       	subi	r25, 0xFF	; 255
    46e0:	25 81       	ldd	r18, Z+5	; 0x05
    46e2:	92 23       	and	r25, r18
    46e4:	93 83       	std	Z+3, r25	; 0x03
    46e6:	e8 81       	ld	r30, Y
    46e8:	f9 81       	ldd	r31, Y+1	; 0x01
    46ea:	35 97       	sbiw	r30, 0x05	; 5
    46ec:	80 81       	ld	r24, Z
    46ee:	80 62       	ori	r24, 0x20	; 32
    46f0:	80 83       	st	Z, r24
    46f2:	80 e0       	ldi	r24, 0x00	; 0
    46f4:	01 c0       	rjmp	.+2      	; 0x46f8 <serial_send_byte+0x44>
    46f6:	82 e0       	ldi	r24, 0x02	; 2
    46f8:	df 91       	pop	r29
    46fa:	cf 91       	pop	r28
    46fc:	08 95       	ret

000046fe <serial_send_bytes>:
    46fe:	ef 92       	push	r14
    4700:	ff 92       	push	r15
    4702:	0f 93       	push	r16
    4704:	1f 93       	push	r17
    4706:	cf 93       	push	r28
    4708:	df 93       	push	r29
    470a:	7c 01       	movw	r14, r24
    470c:	dc 01       	movw	r26, r24
    470e:	12 96       	adiw	r26, 0x02	; 2
    4710:	ed 91       	ld	r30, X+
    4712:	fc 91       	ld	r31, X
    4714:	13 97       	sbiw	r26, 0x03	; 3
    4716:	93 81       	ldd	r25, Z+3	; 0x03
    4718:	82 81       	ldd	r24, Z+2	; 0x02
    471a:	98 1b       	sub	r25, r24
    471c:	85 81       	ldd	r24, Z+5	; 0x05
    471e:	98 23       	and	r25, r24
    4720:	84 81       	ldd	r24, Z+4	; 0x04
    4722:	89 1b       	sub	r24, r25
    4724:	86 17       	cp	r24, r22
    4726:	98 f1       	brcs	.+102    	; 0x478e <serial_send_bytes+0x90>
    4728:	66 23       	and	r22, r22
    472a:	41 f1       	breq	.+80     	; 0x477c <serial_send_bytes+0x7e>
    472c:	84 2f       	mov	r24, r20
    472e:	95 2f       	mov	r25, r21
    4730:	dc 01       	movw	r26, r24
    4732:	61 50       	subi	r22, 0x01	; 1
    4734:	46 2f       	mov	r20, r22
    4736:	50 e0       	ldi	r21, 0x00	; 0
    4738:	4f 5f       	subi	r20, 0xFF	; 255
    473a:	5f 4f       	sbci	r21, 0xFF	; 255
    473c:	48 0f       	add	r20, r24
    473e:	59 1f       	adc	r21, r25
    4740:	e7 01       	movw	r28, r14
    4742:	ea 81       	ldd	r30, Y+2	; 0x02
    4744:	fb 81       	ldd	r31, Y+3	; 0x03
    4746:	93 81       	ldd	r25, Z+3	; 0x03
    4748:	82 81       	ldd	r24, Z+2	; 0x02
    474a:	25 81       	ldd	r18, Z+5	; 0x05
    474c:	98 1b       	sub	r25, r24
    474e:	92 23       	and	r25, r18
    4750:	84 81       	ldd	r24, Z+4	; 0x04
    4752:	98 17       	cp	r25, r24
    4754:	79 f0       	breq	.+30     	; 0x4774 <serial_send_bytes+0x76>
    4756:	8c 91       	ld	r24, X
    4758:	93 81       	ldd	r25, Z+3	; 0x03
    475a:	26 95       	lsr	r18
    475c:	29 23       	and	r18, r25
    475e:	60 81       	ld	r22, Z
    4760:	71 81       	ldd	r23, Z+1	; 0x01
    4762:	8b 01       	movw	r16, r22
    4764:	02 0f       	add	r16, r18
    4766:	11 1d       	adc	r17, r1
    4768:	e8 01       	movw	r28, r16
    476a:	88 83       	st	Y, r24
    476c:	9f 5f       	subi	r25, 0xFF	; 255
    476e:	85 81       	ldd	r24, Z+5	; 0x05
    4770:	98 23       	and	r25, r24
    4772:	93 83       	std	Z+3, r25	; 0x03
    4774:	11 96       	adiw	r26, 0x01	; 1
    4776:	a4 17       	cp	r26, r20
    4778:	b5 07       	cpc	r27, r21
    477a:	11 f7       	brne	.-60     	; 0x4740 <serial_send_bytes+0x42>
    477c:	d7 01       	movw	r26, r14
    477e:	ed 91       	ld	r30, X+
    4780:	fc 91       	ld	r31, X
    4782:	35 97       	sbiw	r30, 0x05	; 5
    4784:	80 81       	ld	r24, Z
    4786:	80 62       	ori	r24, 0x20	; 32
    4788:	80 83       	st	Z, r24
    478a:	80 e0       	ldi	r24, 0x00	; 0
    478c:	01 c0       	rjmp	.+2      	; 0x4790 <serial_send_bytes+0x92>
    478e:	82 e0       	ldi	r24, 0x02	; 2
    4790:	df 91       	pop	r29
    4792:	cf 91       	pop	r28
    4794:	1f 91       	pop	r17
    4796:	0f 91       	pop	r16
    4798:	ff 90       	pop	r15
    479a:	ef 90       	pop	r14
    479c:	08 95       	ret

0000479e <serial_get_byte>:
    479e:	dc 01       	movw	r26, r24
    47a0:	14 96       	adiw	r26, 0x04	; 4
    47a2:	ed 91       	ld	r30, X+
    47a4:	fc 91       	ld	r31, X
    47a6:	15 97       	sbiw	r26, 0x05	; 5
    47a8:	93 81       	ldd	r25, Z+3	; 0x03
    47aa:	82 81       	ldd	r24, Z+2	; 0x02
    47ac:	98 17       	cp	r25, r24
    47ae:	89 f0       	breq	.+34     	; 0x47d2 <serial_get_byte+0x34>
    47b0:	92 81       	ldd	r25, Z+2	; 0x02
    47b2:	85 81       	ldd	r24, Z+5	; 0x05
    47b4:	86 95       	lsr	r24
    47b6:	89 23       	and	r24, r25
    47b8:	a0 81       	ld	r26, Z
    47ba:	b1 81       	ldd	r27, Z+1	; 0x01
    47bc:	a8 0f       	add	r26, r24
    47be:	b1 1d       	adc	r27, r1
    47c0:	8c 91       	ld	r24, X
    47c2:	db 01       	movw	r26, r22
    47c4:	8c 93       	st	X, r24
    47c6:	9f 5f       	subi	r25, 0xFF	; 255
    47c8:	85 81       	ldd	r24, Z+5	; 0x05
    47ca:	98 23       	and	r25, r24
    47cc:	92 83       	std	Z+2, r25	; 0x02
    47ce:	80 e0       	ldi	r24, 0x00	; 0
    47d0:	08 95       	ret
    47d2:	83 e0       	ldi	r24, 0x03	; 3
    47d4:	08 95       	ret

000047d6 <__vector_25>:
    47d6:	1f 92       	push	r1
    47d8:	0f 92       	push	r0
    47da:	0f b6       	in	r0, 0x3f	; 63
    47dc:	0f 92       	push	r0
    47de:	11 24       	eor	r1, r1
    47e0:	0b b6       	in	r0, 0x3b	; 59
    47e2:	0f 92       	push	r0
    47e4:	2f 93       	push	r18
    47e6:	3f 93       	push	r19
    47e8:	4f 93       	push	r20
    47ea:	5f 93       	push	r21
    47ec:	6f 93       	push	r22
    47ee:	7f 93       	push	r23
    47f0:	8f 93       	push	r24
    47f2:	9f 93       	push	r25
    47f4:	af 93       	push	r26
    47f6:	bf 93       	push	r27
    47f8:	cf 93       	push	r28
    47fa:	df 93       	push	r29
    47fc:	ef 93       	push	r30
    47fe:	ff 93       	push	r31
    4800:	a0 91 b0 1a 	lds	r26, 0x1AB0	; 0x801ab0 <_ser_handle>
    4804:	b0 91 b1 1a 	lds	r27, 0x1AB1	; 0x801ab1 <_ser_handle+0x1>
    4808:	10 97       	sbiw	r26, 0x00	; 0
    480a:	11 f1       	breq	.+68     	; 0x4850 <__vector_25+0x7a>
    480c:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    4810:	14 96       	adiw	r26, 0x04	; 4
    4812:	ed 91       	ld	r30, X+
    4814:	fc 91       	ld	r31, X
    4816:	15 97       	sbiw	r26, 0x05	; 5
    4818:	93 81       	ldd	r25, Z+3	; 0x03
    481a:	82 81       	ldd	r24, Z+2	; 0x02
    481c:	25 81       	ldd	r18, Z+5	; 0x05
    481e:	98 1b       	sub	r25, r24
    4820:	92 23       	and	r25, r18
    4822:	84 81       	ldd	r24, Z+4	; 0x04
    4824:	98 17       	cp	r25, r24
    4826:	61 f0       	breq	.+24     	; 0x4840 <__vector_25+0x6a>
    4828:	83 81       	ldd	r24, Z+3	; 0x03
    482a:	26 95       	lsr	r18
    482c:	28 23       	and	r18, r24
    482e:	c0 81       	ld	r28, Z
    4830:	d1 81       	ldd	r29, Z+1	; 0x01
    4832:	c2 0f       	add	r28, r18
    4834:	d1 1d       	adc	r29, r1
    4836:	68 83       	st	Y, r22
    4838:	8f 5f       	subi	r24, 0xFF	; 255
    483a:	95 81       	ldd	r25, Z+5	; 0x05
    483c:	89 23       	and	r24, r25
    483e:	83 83       	std	Z+3, r24	; 0x03
    4840:	16 96       	adiw	r26, 0x06	; 6
    4842:	ed 91       	ld	r30, X+
    4844:	fc 91       	ld	r31, X
    4846:	17 97       	sbiw	r26, 0x07	; 7
    4848:	30 97       	sbiw	r30, 0x00	; 0
    484a:	11 f0       	breq	.+4      	; 0x4850 <__vector_25+0x7a>
    484c:	cd 01       	movw	r24, r26
    484e:	19 95       	eicall
    4850:	ff 91       	pop	r31
    4852:	ef 91       	pop	r30
    4854:	df 91       	pop	r29
    4856:	cf 91       	pop	r28
    4858:	bf 91       	pop	r27
    485a:	af 91       	pop	r26
    485c:	9f 91       	pop	r25
    485e:	8f 91       	pop	r24
    4860:	7f 91       	pop	r23
    4862:	6f 91       	pop	r22
    4864:	5f 91       	pop	r21
    4866:	4f 91       	pop	r20
    4868:	3f 91       	pop	r19
    486a:	2f 91       	pop	r18
    486c:	0f 90       	pop	r0
    486e:	0b be       	out	0x3b, r0	; 59
    4870:	0f 90       	pop	r0
    4872:	0f be       	out	0x3f, r0	; 63
    4874:	0f 90       	pop	r0
    4876:	1f 90       	pop	r1
    4878:	18 95       	reti

0000487a <__vector_26>:
    487a:	1f 92       	push	r1
    487c:	0f 92       	push	r0
    487e:	0f b6       	in	r0, 0x3f	; 63
    4880:	0f 92       	push	r0
    4882:	11 24       	eor	r1, r1
    4884:	0b b6       	in	r0, 0x3b	; 59
    4886:	0f 92       	push	r0
    4888:	2f 93       	push	r18
    488a:	8f 93       	push	r24
    488c:	9f 93       	push	r25
    488e:	af 93       	push	r26
    4890:	bf 93       	push	r27
    4892:	ef 93       	push	r30
    4894:	ff 93       	push	r31
    4896:	e0 91 b0 1a 	lds	r30, 0x1AB0	; 0x801ab0 <_ser_handle>
    489a:	f0 91 b1 1a 	lds	r31, 0x1AB1	; 0x801ab1 <_ser_handle+0x1>
    489e:	30 97       	sbiw	r30, 0x00	; 0
    48a0:	b9 f0       	breq	.+46     	; 0x48d0 <__vector_26+0x56>
    48a2:	02 80       	ldd	r0, Z+2	; 0x02
    48a4:	f3 81       	ldd	r31, Z+3	; 0x03
    48a6:	e0 2d       	mov	r30, r0
    48a8:	93 81       	ldd	r25, Z+3	; 0x03
    48aa:	82 81       	ldd	r24, Z+2	; 0x02
    48ac:	98 17       	cp	r25, r24
    48ae:	b1 f0       	breq	.+44     	; 0x48dc <__vector_26+0x62>
    48b0:	92 81       	ldd	r25, Z+2	; 0x02
    48b2:	85 81       	ldd	r24, Z+5	; 0x05
    48b4:	28 2f       	mov	r18, r24
    48b6:	26 95       	lsr	r18
    48b8:	29 23       	and	r18, r25
    48ba:	a0 81       	ld	r26, Z
    48bc:	b1 81       	ldd	r27, Z+1	; 0x01
    48be:	a2 0f       	add	r26, r18
    48c0:	b1 1d       	adc	r27, r1
    48c2:	2c 91       	ld	r18, X
    48c4:	9f 5f       	subi	r25, 0xFF	; 255
    48c6:	89 23       	and	r24, r25
    48c8:	82 83       	std	Z+2, r24	; 0x02
    48ca:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    48ce:	0b c0       	rjmp	.+22     	; 0x48e6 <__vector_26+0x6c>
    48d0:	e1 ec       	ldi	r30, 0xC1	; 193
    48d2:	f0 e0       	ldi	r31, 0x00	; 0
    48d4:	80 81       	ld	r24, Z
    48d6:	8f 7d       	andi	r24, 0xDF	; 223
    48d8:	80 83       	st	Z, r24
    48da:	05 c0       	rjmp	.+10     	; 0x48e6 <__vector_26+0x6c>
    48dc:	e1 ec       	ldi	r30, 0xC1	; 193
    48de:	f0 e0       	ldi	r31, 0x00	; 0
    48e0:	80 81       	ld	r24, Z
    48e2:	8f 7d       	andi	r24, 0xDF	; 223
    48e4:	80 83       	st	Z, r24
    48e6:	ff 91       	pop	r31
    48e8:	ef 91       	pop	r30
    48ea:	bf 91       	pop	r27
    48ec:	af 91       	pop	r26
    48ee:	9f 91       	pop	r25
    48f0:	8f 91       	pop	r24
    48f2:	2f 91       	pop	r18
    48f4:	0f 90       	pop	r0
    48f6:	0b be       	out	0x3b, r0	; 59
    48f8:	0f 90       	pop	r0
    48fa:	0f be       	out	0x3f, r0	; 63
    48fc:	0f 90       	pop	r0
    48fe:	1f 90       	pop	r1
    4900:	18 95       	reti

00004902 <__vector_36>:
    4902:	1f 92       	push	r1
    4904:	0f 92       	push	r0
    4906:	0f b6       	in	r0, 0x3f	; 63
    4908:	0f 92       	push	r0
    490a:	11 24       	eor	r1, r1
    490c:	0b b6       	in	r0, 0x3b	; 59
    490e:	0f 92       	push	r0
    4910:	2f 93       	push	r18
    4912:	3f 93       	push	r19
    4914:	4f 93       	push	r20
    4916:	5f 93       	push	r21
    4918:	6f 93       	push	r22
    491a:	7f 93       	push	r23
    491c:	8f 93       	push	r24
    491e:	9f 93       	push	r25
    4920:	af 93       	push	r26
    4922:	bf 93       	push	r27
    4924:	cf 93       	push	r28
    4926:	df 93       	push	r29
    4928:	ef 93       	push	r30
    492a:	ff 93       	push	r31
    492c:	a0 91 b2 1a 	lds	r26, 0x1AB2	; 0x801ab2 <_ser_handle+0x2>
    4930:	b0 91 b3 1a 	lds	r27, 0x1AB3	; 0x801ab3 <_ser_handle+0x3>
    4934:	10 97       	sbiw	r26, 0x00	; 0
    4936:	11 f1       	breq	.+68     	; 0x497c <__vector_36+0x7a>
    4938:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    493c:	14 96       	adiw	r26, 0x04	; 4
    493e:	ed 91       	ld	r30, X+
    4940:	fc 91       	ld	r31, X
    4942:	15 97       	sbiw	r26, 0x05	; 5
    4944:	93 81       	ldd	r25, Z+3	; 0x03
    4946:	82 81       	ldd	r24, Z+2	; 0x02
    4948:	25 81       	ldd	r18, Z+5	; 0x05
    494a:	98 1b       	sub	r25, r24
    494c:	92 23       	and	r25, r18
    494e:	84 81       	ldd	r24, Z+4	; 0x04
    4950:	98 17       	cp	r25, r24
    4952:	61 f0       	breq	.+24     	; 0x496c <__vector_36+0x6a>
    4954:	83 81       	ldd	r24, Z+3	; 0x03
    4956:	26 95       	lsr	r18
    4958:	28 23       	and	r18, r24
    495a:	c0 81       	ld	r28, Z
    495c:	d1 81       	ldd	r29, Z+1	; 0x01
    495e:	c2 0f       	add	r28, r18
    4960:	d1 1d       	adc	r29, r1
    4962:	68 83       	st	Y, r22
    4964:	8f 5f       	subi	r24, 0xFF	; 255
    4966:	95 81       	ldd	r25, Z+5	; 0x05
    4968:	89 23       	and	r24, r25
    496a:	83 83       	std	Z+3, r24	; 0x03
    496c:	16 96       	adiw	r26, 0x06	; 6
    496e:	ed 91       	ld	r30, X+
    4970:	fc 91       	ld	r31, X
    4972:	17 97       	sbiw	r26, 0x07	; 7
    4974:	30 97       	sbiw	r30, 0x00	; 0
    4976:	11 f0       	breq	.+4      	; 0x497c <__vector_36+0x7a>
    4978:	cd 01       	movw	r24, r26
    497a:	19 95       	eicall
    497c:	ff 91       	pop	r31
    497e:	ef 91       	pop	r30
    4980:	df 91       	pop	r29
    4982:	cf 91       	pop	r28
    4984:	bf 91       	pop	r27
    4986:	af 91       	pop	r26
    4988:	9f 91       	pop	r25
    498a:	8f 91       	pop	r24
    498c:	7f 91       	pop	r23
    498e:	6f 91       	pop	r22
    4990:	5f 91       	pop	r21
    4992:	4f 91       	pop	r20
    4994:	3f 91       	pop	r19
    4996:	2f 91       	pop	r18
    4998:	0f 90       	pop	r0
    499a:	0b be       	out	0x3b, r0	; 59
    499c:	0f 90       	pop	r0
    499e:	0f be       	out	0x3f, r0	; 63
    49a0:	0f 90       	pop	r0
    49a2:	1f 90       	pop	r1
    49a4:	18 95       	reti

000049a6 <__vector_37>:
    49a6:	1f 92       	push	r1
    49a8:	0f 92       	push	r0
    49aa:	0f b6       	in	r0, 0x3f	; 63
    49ac:	0f 92       	push	r0
    49ae:	11 24       	eor	r1, r1
    49b0:	0b b6       	in	r0, 0x3b	; 59
    49b2:	0f 92       	push	r0
    49b4:	2f 93       	push	r18
    49b6:	8f 93       	push	r24
    49b8:	9f 93       	push	r25
    49ba:	af 93       	push	r26
    49bc:	bf 93       	push	r27
    49be:	ef 93       	push	r30
    49c0:	ff 93       	push	r31
    49c2:	e0 91 b2 1a 	lds	r30, 0x1AB2	; 0x801ab2 <_ser_handle+0x2>
    49c6:	f0 91 b3 1a 	lds	r31, 0x1AB3	; 0x801ab3 <_ser_handle+0x3>
    49ca:	30 97       	sbiw	r30, 0x00	; 0
    49cc:	b9 f0       	breq	.+46     	; 0x49fc <__vector_37+0x56>
    49ce:	02 80       	ldd	r0, Z+2	; 0x02
    49d0:	f3 81       	ldd	r31, Z+3	; 0x03
    49d2:	e0 2d       	mov	r30, r0
    49d4:	93 81       	ldd	r25, Z+3	; 0x03
    49d6:	82 81       	ldd	r24, Z+2	; 0x02
    49d8:	98 17       	cp	r25, r24
    49da:	b1 f0       	breq	.+44     	; 0x4a08 <__vector_37+0x62>
    49dc:	92 81       	ldd	r25, Z+2	; 0x02
    49de:	85 81       	ldd	r24, Z+5	; 0x05
    49e0:	28 2f       	mov	r18, r24
    49e2:	26 95       	lsr	r18
    49e4:	29 23       	and	r18, r25
    49e6:	a0 81       	ld	r26, Z
    49e8:	b1 81       	ldd	r27, Z+1	; 0x01
    49ea:	a2 0f       	add	r26, r18
    49ec:	b1 1d       	adc	r27, r1
    49ee:	2c 91       	ld	r18, X
    49f0:	9f 5f       	subi	r25, 0xFF	; 255
    49f2:	89 23       	and	r24, r25
    49f4:	82 83       	std	Z+2, r24	; 0x02
    49f6:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    49fa:	0b c0       	rjmp	.+22     	; 0x4a12 <__vector_37+0x6c>
    49fc:	e9 ec       	ldi	r30, 0xC9	; 201
    49fe:	f0 e0       	ldi	r31, 0x00	; 0
    4a00:	80 81       	ld	r24, Z
    4a02:	8f 7d       	andi	r24, 0xDF	; 223
    4a04:	80 83       	st	Z, r24
    4a06:	05 c0       	rjmp	.+10     	; 0x4a12 <__vector_37+0x6c>
    4a08:	e9 ec       	ldi	r30, 0xC9	; 201
    4a0a:	f0 e0       	ldi	r31, 0x00	; 0
    4a0c:	80 81       	ld	r24, Z
    4a0e:	8f 7d       	andi	r24, 0xDF	; 223
    4a10:	80 83       	st	Z, r24
    4a12:	ff 91       	pop	r31
    4a14:	ef 91       	pop	r30
    4a16:	bf 91       	pop	r27
    4a18:	af 91       	pop	r26
    4a1a:	9f 91       	pop	r25
    4a1c:	8f 91       	pop	r24
    4a1e:	2f 91       	pop	r18
    4a20:	0f 90       	pop	r0
    4a22:	0b be       	out	0x3b, r0	; 59
    4a24:	0f 90       	pop	r0
    4a26:	0f be       	out	0x3f, r0	; 63
    4a28:	0f 90       	pop	r0
    4a2a:	1f 90       	pop	r1
    4a2c:	18 95       	reti

00004a2e <__vector_51>:
    4a2e:	1f 92       	push	r1
    4a30:	0f 92       	push	r0
    4a32:	0f b6       	in	r0, 0x3f	; 63
    4a34:	0f 92       	push	r0
    4a36:	11 24       	eor	r1, r1
    4a38:	0b b6       	in	r0, 0x3b	; 59
    4a3a:	0f 92       	push	r0
    4a3c:	2f 93       	push	r18
    4a3e:	3f 93       	push	r19
    4a40:	4f 93       	push	r20
    4a42:	5f 93       	push	r21
    4a44:	6f 93       	push	r22
    4a46:	7f 93       	push	r23
    4a48:	8f 93       	push	r24
    4a4a:	9f 93       	push	r25
    4a4c:	af 93       	push	r26
    4a4e:	bf 93       	push	r27
    4a50:	cf 93       	push	r28
    4a52:	df 93       	push	r29
    4a54:	ef 93       	push	r30
    4a56:	ff 93       	push	r31
    4a58:	a0 91 b4 1a 	lds	r26, 0x1AB4	; 0x801ab4 <_ser_handle+0x4>
    4a5c:	b0 91 b5 1a 	lds	r27, 0x1AB5	; 0x801ab5 <_ser_handle+0x5>
    4a60:	10 97       	sbiw	r26, 0x00	; 0
    4a62:	11 f1       	breq	.+68     	; 0x4aa8 <__vector_51+0x7a>
    4a64:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    4a68:	14 96       	adiw	r26, 0x04	; 4
    4a6a:	ed 91       	ld	r30, X+
    4a6c:	fc 91       	ld	r31, X
    4a6e:	15 97       	sbiw	r26, 0x05	; 5
    4a70:	93 81       	ldd	r25, Z+3	; 0x03
    4a72:	82 81       	ldd	r24, Z+2	; 0x02
    4a74:	25 81       	ldd	r18, Z+5	; 0x05
    4a76:	98 1b       	sub	r25, r24
    4a78:	92 23       	and	r25, r18
    4a7a:	84 81       	ldd	r24, Z+4	; 0x04
    4a7c:	98 17       	cp	r25, r24
    4a7e:	61 f0       	breq	.+24     	; 0x4a98 <__vector_51+0x6a>
    4a80:	83 81       	ldd	r24, Z+3	; 0x03
    4a82:	26 95       	lsr	r18
    4a84:	28 23       	and	r18, r24
    4a86:	c0 81       	ld	r28, Z
    4a88:	d1 81       	ldd	r29, Z+1	; 0x01
    4a8a:	c2 0f       	add	r28, r18
    4a8c:	d1 1d       	adc	r29, r1
    4a8e:	68 83       	st	Y, r22
    4a90:	8f 5f       	subi	r24, 0xFF	; 255
    4a92:	95 81       	ldd	r25, Z+5	; 0x05
    4a94:	89 23       	and	r24, r25
    4a96:	83 83       	std	Z+3, r24	; 0x03
    4a98:	16 96       	adiw	r26, 0x06	; 6
    4a9a:	ed 91       	ld	r30, X+
    4a9c:	fc 91       	ld	r31, X
    4a9e:	17 97       	sbiw	r26, 0x07	; 7
    4aa0:	30 97       	sbiw	r30, 0x00	; 0
    4aa2:	11 f0       	breq	.+4      	; 0x4aa8 <__vector_51+0x7a>
    4aa4:	cd 01       	movw	r24, r26
    4aa6:	19 95       	eicall
    4aa8:	ff 91       	pop	r31
    4aaa:	ef 91       	pop	r30
    4aac:	df 91       	pop	r29
    4aae:	cf 91       	pop	r28
    4ab0:	bf 91       	pop	r27
    4ab2:	af 91       	pop	r26
    4ab4:	9f 91       	pop	r25
    4ab6:	8f 91       	pop	r24
    4ab8:	7f 91       	pop	r23
    4aba:	6f 91       	pop	r22
    4abc:	5f 91       	pop	r21
    4abe:	4f 91       	pop	r20
    4ac0:	3f 91       	pop	r19
    4ac2:	2f 91       	pop	r18
    4ac4:	0f 90       	pop	r0
    4ac6:	0b be       	out	0x3b, r0	; 59
    4ac8:	0f 90       	pop	r0
    4aca:	0f be       	out	0x3f, r0	; 63
    4acc:	0f 90       	pop	r0
    4ace:	1f 90       	pop	r1
    4ad0:	18 95       	reti

00004ad2 <__vector_52>:
    4ad2:	1f 92       	push	r1
    4ad4:	0f 92       	push	r0
    4ad6:	0f b6       	in	r0, 0x3f	; 63
    4ad8:	0f 92       	push	r0
    4ada:	11 24       	eor	r1, r1
    4adc:	0b b6       	in	r0, 0x3b	; 59
    4ade:	0f 92       	push	r0
    4ae0:	2f 93       	push	r18
    4ae2:	8f 93       	push	r24
    4ae4:	9f 93       	push	r25
    4ae6:	af 93       	push	r26
    4ae8:	bf 93       	push	r27
    4aea:	ef 93       	push	r30
    4aec:	ff 93       	push	r31
    4aee:	e0 91 b4 1a 	lds	r30, 0x1AB4	; 0x801ab4 <_ser_handle+0x4>
    4af2:	f0 91 b5 1a 	lds	r31, 0x1AB5	; 0x801ab5 <_ser_handle+0x5>
    4af6:	30 97       	sbiw	r30, 0x00	; 0
    4af8:	b9 f0       	breq	.+46     	; 0x4b28 <__vector_52+0x56>
    4afa:	02 80       	ldd	r0, Z+2	; 0x02
    4afc:	f3 81       	ldd	r31, Z+3	; 0x03
    4afe:	e0 2d       	mov	r30, r0
    4b00:	93 81       	ldd	r25, Z+3	; 0x03
    4b02:	82 81       	ldd	r24, Z+2	; 0x02
    4b04:	98 17       	cp	r25, r24
    4b06:	b1 f0       	breq	.+44     	; 0x4b34 <__vector_52+0x62>
    4b08:	92 81       	ldd	r25, Z+2	; 0x02
    4b0a:	85 81       	ldd	r24, Z+5	; 0x05
    4b0c:	28 2f       	mov	r18, r24
    4b0e:	26 95       	lsr	r18
    4b10:	29 23       	and	r18, r25
    4b12:	a0 81       	ld	r26, Z
    4b14:	b1 81       	ldd	r27, Z+1	; 0x01
    4b16:	a2 0f       	add	r26, r18
    4b18:	b1 1d       	adc	r27, r1
    4b1a:	2c 91       	ld	r18, X
    4b1c:	9f 5f       	subi	r25, 0xFF	; 255
    4b1e:	89 23       	and	r24, r25
    4b20:	82 83       	std	Z+2, r24	; 0x02
    4b22:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    4b26:	0b c0       	rjmp	.+22     	; 0x4b3e <__vector_52+0x6c>
    4b28:	e1 ed       	ldi	r30, 0xD1	; 209
    4b2a:	f0 e0       	ldi	r31, 0x00	; 0
    4b2c:	80 81       	ld	r24, Z
    4b2e:	8f 7d       	andi	r24, 0xDF	; 223
    4b30:	80 83       	st	Z, r24
    4b32:	05 c0       	rjmp	.+10     	; 0x4b3e <__vector_52+0x6c>
    4b34:	e1 ed       	ldi	r30, 0xD1	; 209
    4b36:	f0 e0       	ldi	r31, 0x00	; 0
    4b38:	80 81       	ld	r24, Z
    4b3a:	8f 7d       	andi	r24, 0xDF	; 223
    4b3c:	80 83       	st	Z, r24
    4b3e:	ff 91       	pop	r31
    4b40:	ef 91       	pop	r30
    4b42:	bf 91       	pop	r27
    4b44:	af 91       	pop	r26
    4b46:	9f 91       	pop	r25
    4b48:	8f 91       	pop	r24
    4b4a:	2f 91       	pop	r18
    4b4c:	0f 90       	pop	r0
    4b4e:	0b be       	out	0x3b, r0	; 59
    4b50:	0f 90       	pop	r0
    4b52:	0f be       	out	0x3f, r0	; 63
    4b54:	0f 90       	pop	r0
    4b56:	1f 90       	pop	r1
    4b58:	18 95       	reti

00004b5a <__vector_54>:
    4b5a:	1f 92       	push	r1
    4b5c:	0f 92       	push	r0
    4b5e:	0f b6       	in	r0, 0x3f	; 63
    4b60:	0f 92       	push	r0
    4b62:	11 24       	eor	r1, r1
    4b64:	0b b6       	in	r0, 0x3b	; 59
    4b66:	0f 92       	push	r0
    4b68:	2f 93       	push	r18
    4b6a:	3f 93       	push	r19
    4b6c:	4f 93       	push	r20
    4b6e:	5f 93       	push	r21
    4b70:	6f 93       	push	r22
    4b72:	7f 93       	push	r23
    4b74:	8f 93       	push	r24
    4b76:	9f 93       	push	r25
    4b78:	af 93       	push	r26
    4b7a:	bf 93       	push	r27
    4b7c:	cf 93       	push	r28
    4b7e:	df 93       	push	r29
    4b80:	ef 93       	push	r30
    4b82:	ff 93       	push	r31
    4b84:	a0 91 b6 1a 	lds	r26, 0x1AB6	; 0x801ab6 <_ser_handle+0x6>
    4b88:	b0 91 b7 1a 	lds	r27, 0x1AB7	; 0x801ab7 <_ser_handle+0x7>
    4b8c:	10 97       	sbiw	r26, 0x00	; 0
    4b8e:	11 f1       	breq	.+68     	; 0x4bd4 <__vector_54+0x7a>
    4b90:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    4b94:	14 96       	adiw	r26, 0x04	; 4
    4b96:	ed 91       	ld	r30, X+
    4b98:	fc 91       	ld	r31, X
    4b9a:	15 97       	sbiw	r26, 0x05	; 5
    4b9c:	93 81       	ldd	r25, Z+3	; 0x03
    4b9e:	82 81       	ldd	r24, Z+2	; 0x02
    4ba0:	25 81       	ldd	r18, Z+5	; 0x05
    4ba2:	98 1b       	sub	r25, r24
    4ba4:	92 23       	and	r25, r18
    4ba6:	84 81       	ldd	r24, Z+4	; 0x04
    4ba8:	98 17       	cp	r25, r24
    4baa:	61 f0       	breq	.+24     	; 0x4bc4 <__vector_54+0x6a>
    4bac:	83 81       	ldd	r24, Z+3	; 0x03
    4bae:	26 95       	lsr	r18
    4bb0:	28 23       	and	r18, r24
    4bb2:	c0 81       	ld	r28, Z
    4bb4:	d1 81       	ldd	r29, Z+1	; 0x01
    4bb6:	c2 0f       	add	r28, r18
    4bb8:	d1 1d       	adc	r29, r1
    4bba:	68 83       	st	Y, r22
    4bbc:	8f 5f       	subi	r24, 0xFF	; 255
    4bbe:	95 81       	ldd	r25, Z+5	; 0x05
    4bc0:	89 23       	and	r24, r25
    4bc2:	83 83       	std	Z+3, r24	; 0x03
    4bc4:	16 96       	adiw	r26, 0x06	; 6
    4bc6:	ed 91       	ld	r30, X+
    4bc8:	fc 91       	ld	r31, X
    4bca:	17 97       	sbiw	r26, 0x07	; 7
    4bcc:	30 97       	sbiw	r30, 0x00	; 0
    4bce:	11 f0       	breq	.+4      	; 0x4bd4 <__vector_54+0x7a>
    4bd0:	cd 01       	movw	r24, r26
    4bd2:	19 95       	eicall
    4bd4:	ff 91       	pop	r31
    4bd6:	ef 91       	pop	r30
    4bd8:	df 91       	pop	r29
    4bda:	cf 91       	pop	r28
    4bdc:	bf 91       	pop	r27
    4bde:	af 91       	pop	r26
    4be0:	9f 91       	pop	r25
    4be2:	8f 91       	pop	r24
    4be4:	7f 91       	pop	r23
    4be6:	6f 91       	pop	r22
    4be8:	5f 91       	pop	r21
    4bea:	4f 91       	pop	r20
    4bec:	3f 91       	pop	r19
    4bee:	2f 91       	pop	r18
    4bf0:	0f 90       	pop	r0
    4bf2:	0b be       	out	0x3b, r0	; 59
    4bf4:	0f 90       	pop	r0
    4bf6:	0f be       	out	0x3f, r0	; 63
    4bf8:	0f 90       	pop	r0
    4bfa:	1f 90       	pop	r1
    4bfc:	18 95       	reti

00004bfe <__vector_55>:
    4bfe:	1f 92       	push	r1
    4c00:	0f 92       	push	r0
    4c02:	0f b6       	in	r0, 0x3f	; 63
    4c04:	0f 92       	push	r0
    4c06:	11 24       	eor	r1, r1
    4c08:	0b b6       	in	r0, 0x3b	; 59
    4c0a:	0f 92       	push	r0
    4c0c:	2f 93       	push	r18
    4c0e:	8f 93       	push	r24
    4c10:	9f 93       	push	r25
    4c12:	af 93       	push	r26
    4c14:	bf 93       	push	r27
    4c16:	ef 93       	push	r30
    4c18:	ff 93       	push	r31
    4c1a:	e0 91 b6 1a 	lds	r30, 0x1AB6	; 0x801ab6 <_ser_handle+0x6>
    4c1e:	f0 91 b7 1a 	lds	r31, 0x1AB7	; 0x801ab7 <_ser_handle+0x7>
    4c22:	30 97       	sbiw	r30, 0x00	; 0
    4c24:	b9 f0       	breq	.+46     	; 0x4c54 <__vector_55+0x56>
    4c26:	02 80       	ldd	r0, Z+2	; 0x02
    4c28:	f3 81       	ldd	r31, Z+3	; 0x03
    4c2a:	e0 2d       	mov	r30, r0
    4c2c:	93 81       	ldd	r25, Z+3	; 0x03
    4c2e:	82 81       	ldd	r24, Z+2	; 0x02
    4c30:	98 17       	cp	r25, r24
    4c32:	b1 f0       	breq	.+44     	; 0x4c60 <__vector_55+0x62>
    4c34:	92 81       	ldd	r25, Z+2	; 0x02
    4c36:	85 81       	ldd	r24, Z+5	; 0x05
    4c38:	28 2f       	mov	r18, r24
    4c3a:	26 95       	lsr	r18
    4c3c:	29 23       	and	r18, r25
    4c3e:	a0 81       	ld	r26, Z
    4c40:	b1 81       	ldd	r27, Z+1	; 0x01
    4c42:	a2 0f       	add	r26, r18
    4c44:	b1 1d       	adc	r27, r1
    4c46:	2c 91       	ld	r18, X
    4c48:	9f 5f       	subi	r25, 0xFF	; 255
    4c4a:	89 23       	and	r24, r25
    4c4c:	82 83       	std	Z+2, r24	; 0x02
    4c4e:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    4c52:	0b c0       	rjmp	.+22     	; 0x4c6a <__vector_55+0x6c>
    4c54:	e1 e3       	ldi	r30, 0x31	; 49
    4c56:	f1 e0       	ldi	r31, 0x01	; 1
    4c58:	80 81       	ld	r24, Z
    4c5a:	8f 7d       	andi	r24, 0xDF	; 223
    4c5c:	80 83       	st	Z, r24
    4c5e:	05 c0       	rjmp	.+10     	; 0x4c6a <__vector_55+0x6c>
    4c60:	e1 e3       	ldi	r30, 0x31	; 49
    4c62:	f1 e0       	ldi	r31, 0x01	; 1
    4c64:	80 81       	ld	r24, Z
    4c66:	8f 7d       	andi	r24, 0xDF	; 223
    4c68:	80 83       	st	Z, r24
    4c6a:	ff 91       	pop	r31
    4c6c:	ef 91       	pop	r30
    4c6e:	bf 91       	pop	r27
    4c70:	af 91       	pop	r26
    4c72:	9f 91       	pop	r25
    4c74:	8f 91       	pop	r24
    4c76:	2f 91       	pop	r18
    4c78:	0f 90       	pop	r0
    4c7a:	0b be       	out	0x3b, r0	; 59
    4c7c:	0f 90       	pop	r0
    4c7e:	0f be       	out	0x3f, r0	; 63
    4c80:	0f 90       	pop	r0
    4c82:	1f 90       	pop	r1
    4c84:	18 95       	reti

00004c86 <usart_getchar>:
    4c86:	cf 93       	push	r28
    4c88:	df 93       	push	r29
    4c8a:	1f 92       	push	r1
    4c8c:	cd b7       	in	r28, 0x3d	; 61
    4c8e:	de b7       	in	r29, 0x3e	; 62
    4c90:	be 01       	movw	r22, r28
    4c92:	6f 5f       	subi	r22, 0xFF	; 255
    4c94:	7f 4f       	sbci	r23, 0xFF	; 255
    4c96:	80 91 b8 1a 	lds	r24, 0x1AB8	; 0x801ab8 <_com_serial_instance>
    4c9a:	90 91 b9 1a 	lds	r25, 0x1AB9	; 0x801ab9 <_com_serial_instance+0x1>
    4c9e:	7f dd       	rcall	.-1282   	; 0x479e <serial_get_byte>
    4ca0:	81 11       	cpse	r24, r1
    4ca2:	f6 cf       	rjmp	.-20     	; 0x4c90 <usart_getchar+0xa>
    4ca4:	89 81       	ldd	r24, Y+1	; 0x01
    4ca6:	90 e0       	ldi	r25, 0x00	; 0
    4ca8:	0f 90       	pop	r0
    4caa:	df 91       	pop	r29
    4cac:	cf 91       	pop	r28
    4cae:	08 95       	ret

00004cb0 <usart_putchar>:
    4cb0:	68 2f       	mov	r22, r24
    4cb2:	80 91 b8 1a 	lds	r24, 0x1AB8	; 0x801ab8 <_com_serial_instance>
    4cb6:	90 91 b9 1a 	lds	r25, 0x1AB9	; 0x801ab9 <_com_serial_instance+0x1>
    4cba:	fc dc       	rcall	.-1544   	; 0x46b4 <serial_send_byte>
    4cbc:	80 e0       	ldi	r24, 0x00	; 0
    4cbe:	90 e0       	ldi	r25, 0x00	; 0
    4cc0:	08 95       	ret

00004cc2 <stdioCreate>:
    4cc2:	8f 92       	push	r8
    4cc4:	9f 92       	push	r9
    4cc6:	af 92       	push	r10
    4cc8:	cf 92       	push	r12
    4cca:	ef 92       	push	r14
    4ccc:	0f 93       	push	r16
    4cce:	81 2c       	mov	r8, r1
    4cd0:	91 2c       	mov	r9, r1
    4cd2:	68 94       	set
    4cd4:	aa 24       	eor	r10, r10
    4cd6:	a7 f8       	bld	r10, 7
    4cd8:	68 94       	set
    4cda:	cc 24       	eor	r12, r12
    4cdc:	c7 f8       	bld	r12, 7
    4cde:	e1 2c       	mov	r14, r1
    4ce0:	00 e0       	ldi	r16, 0x00	; 0
    4ce2:	23 e0       	ldi	r18, 0x03	; 3
    4ce4:	40 e0       	ldi	r20, 0x00	; 0
    4ce6:	51 ee       	ldi	r21, 0xE1	; 225
    4ce8:	60 e0       	ldi	r22, 0x00	; 0
    4cea:	70 e0       	ldi	r23, 0x00	; 0
    4cec:	4d dc       	rcall	.-1894   	; 0x4588 <serial_new_instance>
    4cee:	90 93 b9 1a 	sts	0x1AB9, r25	; 0x801ab9 <_com_serial_instance+0x1>
    4cf2:	80 93 b8 1a 	sts	0x1AB8, r24	; 0x801ab8 <_com_serial_instance>
    4cf6:	e1 e0       	ldi	r30, 0x01	; 1
    4cf8:	fb e1       	ldi	r31, 0x1B	; 27
    4cfa:	84 e1       	ldi	r24, 0x14	; 20
    4cfc:	92 e0       	ldi	r25, 0x02	; 2
    4cfe:	91 83       	std	Z+1, r25	; 0x01
    4d00:	80 83       	st	Z, r24
    4d02:	93 83       	std	Z+3, r25	; 0x03
    4d04:	82 83       	std	Z+2, r24	; 0x02
    4d06:	0f 91       	pop	r16
    4d08:	ef 90       	pop	r14
    4d0a:	cf 90       	pop	r12
    4d0c:	af 90       	pop	r10
    4d0e:	9f 90       	pop	r9
    4d10:	8f 90       	pop	r8
    4d12:	08 95       	ret

00004d14 <_initTwiInterface>:
    4d14:	80 91 c8 1a 	lds	r24, 0x1AC8	; 0x801ac8 <_twiIsInitiated>
    4d18:	81 11       	cpse	r24, r1
    4d1a:	0c c0       	rjmp	.+24     	; 0x4d34 <_initTwiInterface+0x20>
    4d1c:	8c e0       	ldi	r24, 0x0C	; 12
    4d1e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    4d22:	8f ef       	ldi	r24, 0xFF	; 255
    4d24:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    4d28:	84 e0       	ldi	r24, 0x04	; 4
    4d2a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4d2e:	81 e0       	ldi	r24, 0x01	; 1
    4d30:	80 93 c8 1a 	sts	0x1AC8, r24	; 0x801ac8 <_twiIsInitiated>
    4d34:	08 95       	ret

00004d36 <twiCreate>:
    4d36:	af 92       	push	r10
    4d38:	bf 92       	push	r11
    4d3a:	cf 92       	push	r12
    4d3c:	df 92       	push	r13
    4d3e:	ef 92       	push	r14
    4d40:	ff 92       	push	r15
    4d42:	0f 93       	push	r16
    4d44:	1f 93       	push	r17
    4d46:	cf 93       	push	r28
    4d48:	df 93       	push	r29
    4d4a:	a8 2e       	mov	r10, r24
    4d4c:	b6 2e       	mov	r11, r22
    4d4e:	69 01       	movw	r12, r18
    4d50:	7a 01       	movw	r14, r20
    4d52:	84 e0       	ldi	r24, 0x04	; 4
    4d54:	90 e0       	ldi	r25, 0x00	; 0
    4d56:	7f d3       	rcall	.+1790   	; 0x5456 <malloc>
    4d58:	ec 01       	movw	r28, r24
    4d5a:	89 2b       	or	r24, r25
    4d5c:	61 f1       	breq	.+88     	; 0x4db6 <twiCreate+0x80>
    4d5e:	a8 82       	st	Y, r10
    4d60:	81 e0       	ldi	r24, 0x01	; 1
    4d62:	b8 12       	cpse	r11, r24
    4d64:	12 c0       	rjmp	.+36     	; 0x4d8a <twiCreate+0x54>
    4d66:	c7 01       	movw	r24, r14
    4d68:	b6 01       	movw	r22, r12
    4d6a:	20 ea       	ldi	r18, 0xA0	; 160
    4d6c:	36 e8       	ldi	r19, 0x86	; 134
    4d6e:	41 e0       	ldi	r20, 0x01	; 1
    4d70:	50 e0       	ldi	r21, 0x00	; 0
    4d72:	2d d3       	rcall	.+1626   	; 0x53ce <__udivmodsi4>
    4d74:	da 01       	movw	r26, r20
    4d76:	c9 01       	movw	r24, r18
    4d78:	40 97       	sbiw	r24, 0x10	; 16
    4d7a:	a1 09       	sbc	r26, r1
    4d7c:	b1 09       	sbc	r27, r1
    4d7e:	b6 95       	lsr	r27
    4d80:	a7 95       	ror	r26
    4d82:	97 95       	ror	r25
    4d84:	87 95       	ror	r24
    4d86:	89 83       	std	Y+1, r24	; 0x01
    4d88:	11 c0       	rjmp	.+34     	; 0x4dac <twiCreate+0x76>
    4d8a:	c7 01       	movw	r24, r14
    4d8c:	b6 01       	movw	r22, r12
    4d8e:	20 e8       	ldi	r18, 0x80	; 128
    4d90:	3a e1       	ldi	r19, 0x1A	; 26
    4d92:	46 e0       	ldi	r20, 0x06	; 6
    4d94:	50 e0       	ldi	r21, 0x00	; 0
    4d96:	1b d3       	rcall	.+1590   	; 0x53ce <__udivmodsi4>
    4d98:	da 01       	movw	r26, r20
    4d9a:	c9 01       	movw	r24, r18
    4d9c:	40 97       	sbiw	r24, 0x10	; 16
    4d9e:	a1 09       	sbc	r26, r1
    4da0:	b1 09       	sbc	r27, r1
    4da2:	b6 95       	lsr	r27
    4da4:	a7 95       	ror	r26
    4da6:	97 95       	ror	r25
    4da8:	87 95       	ror	r24
    4daa:	89 83       	std	Y+1, r24	; 0x01
    4dac:	1b 83       	std	Y+3, r17	; 0x03
    4dae:	0a 83       	std	Y+2, r16	; 0x02
    4db0:	8c 2f       	mov	r24, r28
    4db2:	9d 2f       	mov	r25, r29
    4db4:	02 c0       	rjmp	.+4      	; 0x4dba <twiCreate+0x84>
    4db6:	80 e0       	ldi	r24, 0x00	; 0
    4db8:	90 e0       	ldi	r25, 0x00	; 0
    4dba:	df 91       	pop	r29
    4dbc:	cf 91       	pop	r28
    4dbe:	1f 91       	pop	r17
    4dc0:	0f 91       	pop	r16
    4dc2:	ff 90       	pop	r15
    4dc4:	ef 90       	pop	r14
    4dc6:	df 90       	pop	r13
    4dc8:	cf 90       	pop	r12
    4dca:	bf 90       	pop	r11
    4dcc:	af 90       	pop	r10
    4dce:	08 95       	ret

00004dd0 <twiIsBusy>:
    4dd0:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4dd4:	81 70       	andi	r24, 0x01	; 1
    4dd6:	08 95       	ret

00004dd8 <twiReceive>:
    4dd8:	1f 93       	push	r17
    4dda:	cf 93       	push	r28
    4ddc:	df 93       	push	r29
    4dde:	00 97       	sbiw	r24, 0x00	; 0
    4de0:	29 f1       	breq	.+74     	; 0x4e2c <twiReceive+0x54>
    4de2:	6b 30       	cpi	r22, 0x0B	; 11
    4de4:	28 f5       	brcc	.+74     	; 0x4e30 <twiReceive+0x58>
    4de6:	16 2f       	mov	r17, r22
    4de8:	ec 01       	movw	r28, r24
    4dea:	f2 df       	rcall	.-28     	; 0x4dd0 <twiIsBusy>
    4dec:	81 11       	cpse	r24, r1
    4dee:	22 c0       	rjmp	.+68     	; 0x4e34 <twiReceive+0x5c>
    4df0:	80 91 bb 1a 	lds	r24, 0x1ABB	; 0x801abb <_twiCurrentHandler>
    4df4:	90 91 bc 1a 	lds	r25, 0x1ABC	; 0x801abc <_twiCurrentHandler+0x1>
    4df8:	c8 17       	cp	r28, r24
    4dfa:	d9 07       	cpc	r29, r25
    4dfc:	41 f0       	breq	.+16     	; 0x4e0e <twiReceive+0x36>
    4dfe:	8a df       	rcall	.-236    	; 0x4d14 <_initTwiInterface>
    4e00:	89 81       	ldd	r24, Y+1	; 0x01
    4e02:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    4e06:	d0 93 bc 1a 	sts	0x1ABC, r29	; 0x801abc <_twiCurrentHandler+0x1>
    4e0a:	c0 93 bb 1a 	sts	0x1ABB, r28	; 0x801abb <_twiCurrentHandler>
    4e0e:	10 93 bd 1a 	sts	0x1ABD, r17	; 0x801abd <_twiMessageLen>
    4e12:	88 81       	ld	r24, Y
    4e14:	88 0f       	add	r24, r24
    4e16:	81 60       	ori	r24, 0x01	; 1
    4e18:	80 93 be 1a 	sts	0x1ABE, r24	; 0x801abe <_twiMessageBuffer>
    4e1c:	88 ef       	ldi	r24, 0xF8	; 248
    4e1e:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <_twiCurrentState>
    4e22:	85 ea       	ldi	r24, 0xA5	; 165
    4e24:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4e28:	85 e0       	ldi	r24, 0x05	; 5
    4e2a:	05 c0       	rjmp	.+10     	; 0x4e36 <twiReceive+0x5e>
    4e2c:	86 e0       	ldi	r24, 0x06	; 6
    4e2e:	03 c0       	rjmp	.+6      	; 0x4e36 <twiReceive+0x5e>
    4e30:	87 e0       	ldi	r24, 0x07	; 7
    4e32:	01 c0       	rjmp	.+2      	; 0x4e36 <twiReceive+0x5e>
    4e34:	82 e0       	ldi	r24, 0x02	; 2
    4e36:	df 91       	pop	r29
    4e38:	cf 91       	pop	r28
    4e3a:	1f 91       	pop	r17
    4e3c:	08 95       	ret

00004e3e <__vector_39>:
    4e3e:	1f 92       	push	r1
    4e40:	0f 92       	push	r0
    4e42:	0f b6       	in	r0, 0x3f	; 63
    4e44:	0f 92       	push	r0
    4e46:	11 24       	eor	r1, r1
    4e48:	0b b6       	in	r0, 0x3b	; 59
    4e4a:	0f 92       	push	r0
    4e4c:	2f 93       	push	r18
    4e4e:	3f 93       	push	r19
    4e50:	4f 93       	push	r20
    4e52:	5f 93       	push	r21
    4e54:	6f 93       	push	r22
    4e56:	7f 93       	push	r23
    4e58:	8f 93       	push	r24
    4e5a:	9f 93       	push	r25
    4e5c:	af 93       	push	r26
    4e5e:	bf 93       	push	r27
    4e60:	ef 93       	push	r30
    4e62:	ff 93       	push	r31
    4e64:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    4e68:	8e 2f       	mov	r24, r30
    4e6a:	90 e0       	ldi	r25, 0x00	; 0
    4e6c:	fc 01       	movw	r30, r24
    4e6e:	38 97       	sbiw	r30, 0x08	; 8
    4e70:	e1 35       	cpi	r30, 0x51	; 81
    4e72:	f1 05       	cpc	r31, r1
    4e74:	08 f0       	brcs	.+2      	; 0x4e78 <__vector_39+0x3a>
    4e76:	75 c0       	rjmp	.+234    	; 0x4f62 <__vector_39+0x124>
    4e78:	88 27       	eor	r24, r24
    4e7a:	e4 58       	subi	r30, 0x84	; 132
    4e7c:	ff 4f       	sbci	r31, 0xFF	; 255
    4e7e:	8f 4f       	sbci	r24, 0xFF	; 255
    4e80:	c8 c2       	rjmp	.+1424   	; 0x5412 <__tablejump2__>
    4e82:	10 92 ba 1a 	sts	0x1ABA, r1	; 0x801aba <_index.1885>
    4e86:	e0 91 ba 1a 	lds	r30, 0x1ABA	; 0x801aba <_index.1885>
    4e8a:	80 91 bd 1a 	lds	r24, 0x1ABD	; 0x801abd <_twiMessageLen>
    4e8e:	e8 17       	cp	r30, r24
    4e90:	70 f4       	brcc	.+28     	; 0x4eae <__vector_39+0x70>
    4e92:	81 e0       	ldi	r24, 0x01	; 1
    4e94:	8e 0f       	add	r24, r30
    4e96:	80 93 ba 1a 	sts	0x1ABA, r24	; 0x801aba <_index.1885>
    4e9a:	f0 e0       	ldi	r31, 0x00	; 0
    4e9c:	e2 54       	subi	r30, 0x42	; 66
    4e9e:	f5 4e       	sbci	r31, 0xE5	; 229
    4ea0:	80 81       	ld	r24, Z
    4ea2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    4ea6:	85 e8       	ldi	r24, 0x85	; 133
    4ea8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4eac:	72 c0       	rjmp	.+228    	; 0x4f92 <__vector_39+0x154>
    4eae:	84 e9       	ldi	r24, 0x94	; 148
    4eb0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4eb4:	80 91 bb 1a 	lds	r24, 0x1ABB	; 0x801abb <_twiCurrentHandler>
    4eb8:	90 91 bc 1a 	lds	r25, 0x1ABC	; 0x801abc <_twiCurrentHandler+0x1>
    4ebc:	dc 01       	movw	r26, r24
    4ebe:	12 96       	adiw	r26, 0x02	; 2
    4ec0:	ed 91       	ld	r30, X+
    4ec2:	fc 91       	ld	r31, X
    4ec4:	13 97       	sbiw	r26, 0x03	; 3
    4ec6:	30 97       	sbiw	r30, 0x00	; 0
    4ec8:	09 f4       	brne	.+2      	; 0x4ecc <__vector_39+0x8e>
    4eca:	63 c0       	rjmp	.+198    	; 0x4f92 <__vector_39+0x154>
    4ecc:	20 e0       	ldi	r18, 0x00	; 0
    4ece:	40 e0       	ldi	r20, 0x00	; 0
    4ed0:	50 e0       	ldi	r21, 0x00	; 0
    4ed2:	64 e0       	ldi	r22, 0x04	; 4
    4ed4:	19 95       	eicall
    4ed6:	5d c0       	rjmp	.+186    	; 0x4f92 <__vector_39+0x154>
    4ed8:	e0 91 ba 1a 	lds	r30, 0x1ABA	; 0x801aba <_index.1885>
    4edc:	81 e0       	ldi	r24, 0x01	; 1
    4ede:	8e 0f       	add	r24, r30
    4ee0:	80 93 ba 1a 	sts	0x1ABA, r24	; 0x801aba <_index.1885>
    4ee4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    4ee8:	f0 e0       	ldi	r31, 0x00	; 0
    4eea:	e2 54       	subi	r30, 0x42	; 66
    4eec:	f5 4e       	sbci	r31, 0xE5	; 229
    4eee:	80 83       	st	Z, r24
    4ef0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    4ef4:	80 34       	cpi	r24, 0x40	; 64
    4ef6:	11 f4       	brne	.+4      	; 0x4efc <__vector_39+0xbe>
    4ef8:	10 92 ba 1a 	sts	0x1ABA, r1	; 0x801aba <_index.1885>
    4efc:	20 91 ba 1a 	lds	r18, 0x1ABA	; 0x801aba <_index.1885>
    4f00:	30 e0       	ldi	r19, 0x00	; 0
    4f02:	80 91 bd 1a 	lds	r24, 0x1ABD	; 0x801abd <_twiMessageLen>
    4f06:	90 e0       	ldi	r25, 0x00	; 0
    4f08:	01 97       	sbiw	r24, 0x01	; 1
    4f0a:	28 17       	cp	r18, r24
    4f0c:	39 07       	cpc	r19, r25
    4f0e:	24 f4       	brge	.+8      	; 0x4f18 <__vector_39+0xda>
    4f10:	85 ec       	ldi	r24, 0xC5	; 197
    4f12:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4f16:	3d c0       	rjmp	.+122    	; 0x4f92 <__vector_39+0x154>
    4f18:	85 e8       	ldi	r24, 0x85	; 133
    4f1a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4f1e:	39 c0       	rjmp	.+114    	; 0x4f92 <__vector_39+0x154>
    4f20:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    4f24:	e0 91 ba 1a 	lds	r30, 0x1ABA	; 0x801aba <_index.1885>
    4f28:	f0 e0       	ldi	r31, 0x00	; 0
    4f2a:	e2 54       	subi	r30, 0x42	; 66
    4f2c:	f5 4e       	sbci	r31, 0xE5	; 229
    4f2e:	80 83       	st	Z, r24
    4f30:	84 e9       	ldi	r24, 0x94	; 148
    4f32:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4f36:	80 91 bb 1a 	lds	r24, 0x1ABB	; 0x801abb <_twiCurrentHandler>
    4f3a:	90 91 bc 1a 	lds	r25, 0x1ABC	; 0x801abc <_twiCurrentHandler+0x1>
    4f3e:	dc 01       	movw	r26, r24
    4f40:	12 96       	adiw	r26, 0x02	; 2
    4f42:	ed 91       	ld	r30, X+
    4f44:	fc 91       	ld	r31, X
    4f46:	13 97       	sbiw	r26, 0x03	; 3
    4f48:	30 97       	sbiw	r30, 0x00	; 0
    4f4a:	19 f1       	breq	.+70     	; 0x4f92 <__vector_39+0x154>
    4f4c:	20 91 bd 1a 	lds	r18, 0x1ABD	; 0x801abd <_twiMessageLen>
    4f50:	4e eb       	ldi	r20, 0xBE	; 190
    4f52:	5a e1       	ldi	r21, 0x1A	; 26
    4f54:	65 e0       	ldi	r22, 0x05	; 5
    4f56:	19 95       	eicall
    4f58:	1c c0       	rjmp	.+56     	; 0x4f92 <__vector_39+0x154>
    4f5a:	85 ea       	ldi	r24, 0xA5	; 165
    4f5c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4f60:	18 c0       	rjmp	.+48     	; 0x4f92 <__vector_39+0x154>
    4f62:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    4f66:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <_twiCurrentState>
    4f6a:	84 e0       	ldi	r24, 0x04	; 4
    4f6c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4f70:	80 91 bb 1a 	lds	r24, 0x1ABB	; 0x801abb <_twiCurrentHandler>
    4f74:	90 91 bc 1a 	lds	r25, 0x1ABC	; 0x801abc <_twiCurrentHandler+0x1>
    4f78:	dc 01       	movw	r26, r24
    4f7a:	12 96       	adiw	r26, 0x02	; 2
    4f7c:	ed 91       	ld	r30, X+
    4f7e:	fc 91       	ld	r31, X
    4f80:	13 97       	sbiw	r26, 0x03	; 3
    4f82:	30 97       	sbiw	r30, 0x00	; 0
    4f84:	31 f0       	breq	.+12     	; 0x4f92 <__vector_39+0x154>
    4f86:	20 e0       	ldi	r18, 0x00	; 0
    4f88:	40 e0       	ldi	r20, 0x00	; 0
    4f8a:	50 e0       	ldi	r21, 0x00	; 0
    4f8c:	60 91 22 02 	lds	r22, 0x0222	; 0x800222 <_twiCurrentState>
    4f90:	19 95       	eicall
    4f92:	ff 91       	pop	r31
    4f94:	ef 91       	pop	r30
    4f96:	bf 91       	pop	r27
    4f98:	af 91       	pop	r26
    4f9a:	9f 91       	pop	r25
    4f9c:	8f 91       	pop	r24
    4f9e:	7f 91       	pop	r23
    4fa0:	6f 91       	pop	r22
    4fa2:	5f 91       	pop	r21
    4fa4:	4f 91       	pop	r20
    4fa6:	3f 91       	pop	r19
    4fa8:	2f 91       	pop	r18
    4faa:	0f 90       	pop	r0
    4fac:	0b be       	out	0x3b, r0	; 59
    4fae:	0f 90       	pop	r0
    4fb0:	0f be       	out	0x3f, r0	; 63
    4fb2:	0f 90       	pop	r0
    4fb4:	1f 90       	pop	r1
    4fb6:	18 95       	reti

00004fb8 <fifo_init>:
    4fb8:	fc 01       	movw	r30, r24
    4fba:	41 11       	cpse	r20, r1
    4fbc:	01 c0       	rjmp	.+2      	; 0x4fc0 <fifo_init+0x8>
    4fbe:	6c d3       	rcall	.+1752   	; 0x5698 <abort>
    4fc0:	84 2f       	mov	r24, r20
    4fc2:	90 e0       	ldi	r25, 0x00	; 0
    4fc4:	9c 01       	movw	r18, r24
    4fc6:	21 50       	subi	r18, 0x01	; 1
    4fc8:	31 09       	sbc	r19, r1
    4fca:	82 23       	and	r24, r18
    4fcc:	93 23       	and	r25, r19
    4fce:	89 2b       	or	r24, r25
    4fd0:	09 f0       	breq	.+2      	; 0x4fd4 <fifo_init+0x1c>
    4fd2:	62 d3       	rcall	.+1732   	; 0x5698 <abort>
    4fd4:	41 38       	cpi	r20, 0x81	; 129
    4fd6:	08 f0       	brcs	.+2      	; 0x4fda <fifo_init+0x22>
    4fd8:	5f d3       	rcall	.+1726   	; 0x5698 <abort>
    4fda:	12 82       	std	Z+2, r1	; 0x02
    4fdc:	13 82       	std	Z+3, r1	; 0x03
    4fde:	44 83       	std	Z+4, r20	; 0x04
    4fe0:	44 0f       	add	r20, r20
    4fe2:	41 50       	subi	r20, 0x01	; 1
    4fe4:	45 83       	std	Z+5, r20	; 0x05
    4fe6:	71 83       	std	Z+1, r23	; 0x01
    4fe8:	60 83       	st	Z, r22
    4fea:	80 e0       	ldi	r24, 0x00	; 0
    4fec:	90 e0       	ldi	r25, 0x00	; 0
    4fee:	08 95       	ret

00004ff0 <__subsf3>:
    4ff0:	50 58       	subi	r21, 0x80	; 128

00004ff2 <__addsf3>:
    4ff2:	bb 27       	eor	r27, r27
    4ff4:	aa 27       	eor	r26, r26
    4ff6:	0e d0       	rcall	.+28     	; 0x5014 <__addsf3x>
    4ff8:	4d c1       	rjmp	.+666    	; 0x5294 <__fp_round>
    4ffa:	3e d1       	rcall	.+636    	; 0x5278 <__fp_pscA>
    4ffc:	30 f0       	brcs	.+12     	; 0x500a <__addsf3+0x18>
    4ffe:	43 d1       	rcall	.+646    	; 0x5286 <__fp_pscB>
    5000:	20 f0       	brcs	.+8      	; 0x500a <__addsf3+0x18>
    5002:	31 f4       	brne	.+12     	; 0x5010 <__addsf3+0x1e>
    5004:	9f 3f       	cpi	r25, 0xFF	; 255
    5006:	11 f4       	brne	.+4      	; 0x500c <__addsf3+0x1a>
    5008:	1e f4       	brtc	.+6      	; 0x5010 <__addsf3+0x1e>
    500a:	33 c1       	rjmp	.+614    	; 0x5272 <__fp_nan>
    500c:	0e f4       	brtc	.+2      	; 0x5010 <__addsf3+0x1e>
    500e:	e0 95       	com	r30
    5010:	e7 fb       	bst	r30, 7
    5012:	29 c1       	rjmp	.+594    	; 0x5266 <__fp_inf>

00005014 <__addsf3x>:
    5014:	e9 2f       	mov	r30, r25
    5016:	4f d1       	rcall	.+670    	; 0x52b6 <__fp_split3>
    5018:	80 f3       	brcs	.-32     	; 0x4ffa <__addsf3+0x8>
    501a:	ba 17       	cp	r27, r26
    501c:	62 07       	cpc	r22, r18
    501e:	73 07       	cpc	r23, r19
    5020:	84 07       	cpc	r24, r20
    5022:	95 07       	cpc	r25, r21
    5024:	18 f0       	brcs	.+6      	; 0x502c <__addsf3x+0x18>
    5026:	71 f4       	brne	.+28     	; 0x5044 <__addsf3x+0x30>
    5028:	9e f5       	brtc	.+102    	; 0x5090 <__addsf3x+0x7c>
    502a:	67 c1       	rjmp	.+718    	; 0x52fa <__fp_zero>
    502c:	0e f4       	brtc	.+2      	; 0x5030 <__addsf3x+0x1c>
    502e:	e0 95       	com	r30
    5030:	0b 2e       	mov	r0, r27
    5032:	ba 2f       	mov	r27, r26
    5034:	a0 2d       	mov	r26, r0
    5036:	0b 01       	movw	r0, r22
    5038:	b9 01       	movw	r22, r18
    503a:	90 01       	movw	r18, r0
    503c:	0c 01       	movw	r0, r24
    503e:	ca 01       	movw	r24, r20
    5040:	a0 01       	movw	r20, r0
    5042:	11 24       	eor	r1, r1
    5044:	ff 27       	eor	r31, r31
    5046:	59 1b       	sub	r21, r25
    5048:	99 f0       	breq	.+38     	; 0x5070 <__addsf3x+0x5c>
    504a:	59 3f       	cpi	r21, 0xF9	; 249
    504c:	50 f4       	brcc	.+20     	; 0x5062 <__addsf3x+0x4e>
    504e:	50 3e       	cpi	r21, 0xE0	; 224
    5050:	68 f1       	brcs	.+90     	; 0x50ac <__addsf3x+0x98>
    5052:	1a 16       	cp	r1, r26
    5054:	f0 40       	sbci	r31, 0x00	; 0
    5056:	a2 2f       	mov	r26, r18
    5058:	23 2f       	mov	r18, r19
    505a:	34 2f       	mov	r19, r20
    505c:	44 27       	eor	r20, r20
    505e:	58 5f       	subi	r21, 0xF8	; 248
    5060:	f3 cf       	rjmp	.-26     	; 0x5048 <__addsf3x+0x34>
    5062:	46 95       	lsr	r20
    5064:	37 95       	ror	r19
    5066:	27 95       	ror	r18
    5068:	a7 95       	ror	r26
    506a:	f0 40       	sbci	r31, 0x00	; 0
    506c:	53 95       	inc	r21
    506e:	c9 f7       	brne	.-14     	; 0x5062 <__addsf3x+0x4e>
    5070:	7e f4       	brtc	.+30     	; 0x5090 <__addsf3x+0x7c>
    5072:	1f 16       	cp	r1, r31
    5074:	ba 0b       	sbc	r27, r26
    5076:	62 0b       	sbc	r22, r18
    5078:	73 0b       	sbc	r23, r19
    507a:	84 0b       	sbc	r24, r20
    507c:	ba f0       	brmi	.+46     	; 0x50ac <__addsf3x+0x98>
    507e:	91 50       	subi	r25, 0x01	; 1
    5080:	a1 f0       	breq	.+40     	; 0x50aa <__addsf3x+0x96>
    5082:	ff 0f       	add	r31, r31
    5084:	bb 1f       	adc	r27, r27
    5086:	66 1f       	adc	r22, r22
    5088:	77 1f       	adc	r23, r23
    508a:	88 1f       	adc	r24, r24
    508c:	c2 f7       	brpl	.-16     	; 0x507e <__addsf3x+0x6a>
    508e:	0e c0       	rjmp	.+28     	; 0x50ac <__addsf3x+0x98>
    5090:	ba 0f       	add	r27, r26
    5092:	62 1f       	adc	r22, r18
    5094:	73 1f       	adc	r23, r19
    5096:	84 1f       	adc	r24, r20
    5098:	48 f4       	brcc	.+18     	; 0x50ac <__addsf3x+0x98>
    509a:	87 95       	ror	r24
    509c:	77 95       	ror	r23
    509e:	67 95       	ror	r22
    50a0:	b7 95       	ror	r27
    50a2:	f7 95       	ror	r31
    50a4:	9e 3f       	cpi	r25, 0xFE	; 254
    50a6:	08 f0       	brcs	.+2      	; 0x50aa <__addsf3x+0x96>
    50a8:	b3 cf       	rjmp	.-154    	; 0x5010 <__addsf3+0x1e>
    50aa:	93 95       	inc	r25
    50ac:	88 0f       	add	r24, r24
    50ae:	08 f0       	brcs	.+2      	; 0x50b2 <__addsf3x+0x9e>
    50b0:	99 27       	eor	r25, r25
    50b2:	ee 0f       	add	r30, r30
    50b4:	97 95       	ror	r25
    50b6:	87 95       	ror	r24
    50b8:	08 95       	ret

000050ba <__divsf3>:
    50ba:	0c d0       	rcall	.+24     	; 0x50d4 <__divsf3x>
    50bc:	eb c0       	rjmp	.+470    	; 0x5294 <__fp_round>
    50be:	e3 d0       	rcall	.+454    	; 0x5286 <__fp_pscB>
    50c0:	40 f0       	brcs	.+16     	; 0x50d2 <__divsf3+0x18>
    50c2:	da d0       	rcall	.+436    	; 0x5278 <__fp_pscA>
    50c4:	30 f0       	brcs	.+12     	; 0x50d2 <__divsf3+0x18>
    50c6:	21 f4       	brne	.+8      	; 0x50d0 <__divsf3+0x16>
    50c8:	5f 3f       	cpi	r21, 0xFF	; 255
    50ca:	19 f0       	breq	.+6      	; 0x50d2 <__divsf3+0x18>
    50cc:	cc c0       	rjmp	.+408    	; 0x5266 <__fp_inf>
    50ce:	51 11       	cpse	r21, r1
    50d0:	15 c1       	rjmp	.+554    	; 0x52fc <__fp_szero>
    50d2:	cf c0       	rjmp	.+414    	; 0x5272 <__fp_nan>

000050d4 <__divsf3x>:
    50d4:	f0 d0       	rcall	.+480    	; 0x52b6 <__fp_split3>
    50d6:	98 f3       	brcs	.-26     	; 0x50be <__divsf3+0x4>

000050d8 <__divsf3_pse>:
    50d8:	99 23       	and	r25, r25
    50da:	c9 f3       	breq	.-14     	; 0x50ce <__divsf3+0x14>
    50dc:	55 23       	and	r21, r21
    50de:	b1 f3       	breq	.-20     	; 0x50cc <__divsf3+0x12>
    50e0:	95 1b       	sub	r25, r21
    50e2:	55 0b       	sbc	r21, r21
    50e4:	bb 27       	eor	r27, r27
    50e6:	aa 27       	eor	r26, r26
    50e8:	62 17       	cp	r22, r18
    50ea:	73 07       	cpc	r23, r19
    50ec:	84 07       	cpc	r24, r20
    50ee:	38 f0       	brcs	.+14     	; 0x50fe <__divsf3_pse+0x26>
    50f0:	9f 5f       	subi	r25, 0xFF	; 255
    50f2:	5f 4f       	sbci	r21, 0xFF	; 255
    50f4:	22 0f       	add	r18, r18
    50f6:	33 1f       	adc	r19, r19
    50f8:	44 1f       	adc	r20, r20
    50fa:	aa 1f       	adc	r26, r26
    50fc:	a9 f3       	breq	.-22     	; 0x50e8 <__divsf3_pse+0x10>
    50fe:	33 d0       	rcall	.+102    	; 0x5166 <__divsf3_pse+0x8e>
    5100:	0e 2e       	mov	r0, r30
    5102:	3a f0       	brmi	.+14     	; 0x5112 <__divsf3_pse+0x3a>
    5104:	e0 e8       	ldi	r30, 0x80	; 128
    5106:	30 d0       	rcall	.+96     	; 0x5168 <__divsf3_pse+0x90>
    5108:	91 50       	subi	r25, 0x01	; 1
    510a:	50 40       	sbci	r21, 0x00	; 0
    510c:	e6 95       	lsr	r30
    510e:	00 1c       	adc	r0, r0
    5110:	ca f7       	brpl	.-14     	; 0x5104 <__divsf3_pse+0x2c>
    5112:	29 d0       	rcall	.+82     	; 0x5166 <__divsf3_pse+0x8e>
    5114:	fe 2f       	mov	r31, r30
    5116:	27 d0       	rcall	.+78     	; 0x5166 <__divsf3_pse+0x8e>
    5118:	66 0f       	add	r22, r22
    511a:	77 1f       	adc	r23, r23
    511c:	88 1f       	adc	r24, r24
    511e:	bb 1f       	adc	r27, r27
    5120:	26 17       	cp	r18, r22
    5122:	37 07       	cpc	r19, r23
    5124:	48 07       	cpc	r20, r24
    5126:	ab 07       	cpc	r26, r27
    5128:	b0 e8       	ldi	r27, 0x80	; 128
    512a:	09 f0       	breq	.+2      	; 0x512e <__divsf3_pse+0x56>
    512c:	bb 0b       	sbc	r27, r27
    512e:	80 2d       	mov	r24, r0
    5130:	bf 01       	movw	r22, r30
    5132:	ff 27       	eor	r31, r31
    5134:	93 58       	subi	r25, 0x83	; 131
    5136:	5f 4f       	sbci	r21, 0xFF	; 255
    5138:	2a f0       	brmi	.+10     	; 0x5144 <__divsf3_pse+0x6c>
    513a:	9e 3f       	cpi	r25, 0xFE	; 254
    513c:	51 05       	cpc	r21, r1
    513e:	68 f0       	brcs	.+26     	; 0x515a <__divsf3_pse+0x82>
    5140:	92 c0       	rjmp	.+292    	; 0x5266 <__fp_inf>
    5142:	dc c0       	rjmp	.+440    	; 0x52fc <__fp_szero>
    5144:	5f 3f       	cpi	r21, 0xFF	; 255
    5146:	ec f3       	brlt	.-6      	; 0x5142 <__divsf3_pse+0x6a>
    5148:	98 3e       	cpi	r25, 0xE8	; 232
    514a:	dc f3       	brlt	.-10     	; 0x5142 <__divsf3_pse+0x6a>
    514c:	86 95       	lsr	r24
    514e:	77 95       	ror	r23
    5150:	67 95       	ror	r22
    5152:	b7 95       	ror	r27
    5154:	f7 95       	ror	r31
    5156:	9f 5f       	subi	r25, 0xFF	; 255
    5158:	c9 f7       	brne	.-14     	; 0x514c <__divsf3_pse+0x74>
    515a:	88 0f       	add	r24, r24
    515c:	91 1d       	adc	r25, r1
    515e:	96 95       	lsr	r25
    5160:	87 95       	ror	r24
    5162:	97 f9       	bld	r25, 7
    5164:	08 95       	ret
    5166:	e1 e0       	ldi	r30, 0x01	; 1
    5168:	66 0f       	add	r22, r22
    516a:	77 1f       	adc	r23, r23
    516c:	88 1f       	adc	r24, r24
    516e:	bb 1f       	adc	r27, r27
    5170:	62 17       	cp	r22, r18
    5172:	73 07       	cpc	r23, r19
    5174:	84 07       	cpc	r24, r20
    5176:	ba 07       	cpc	r27, r26
    5178:	20 f0       	brcs	.+8      	; 0x5182 <__divsf3_pse+0xaa>
    517a:	62 1b       	sub	r22, r18
    517c:	73 0b       	sbc	r23, r19
    517e:	84 0b       	sbc	r24, r20
    5180:	ba 0b       	sbc	r27, r26
    5182:	ee 1f       	adc	r30, r30
    5184:	88 f7       	brcc	.-30     	; 0x5168 <__divsf3_pse+0x90>
    5186:	e0 95       	com	r30
    5188:	08 95       	ret

0000518a <__fixsfsi>:
    518a:	04 d0       	rcall	.+8      	; 0x5194 <__fixunssfsi>
    518c:	68 94       	set
    518e:	b1 11       	cpse	r27, r1
    5190:	b5 c0       	rjmp	.+362    	; 0x52fc <__fp_szero>
    5192:	08 95       	ret

00005194 <__fixunssfsi>:
    5194:	98 d0       	rcall	.+304    	; 0x52c6 <__fp_splitA>
    5196:	88 f0       	brcs	.+34     	; 0x51ba <__fixunssfsi+0x26>
    5198:	9f 57       	subi	r25, 0x7F	; 127
    519a:	90 f0       	brcs	.+36     	; 0x51c0 <__fixunssfsi+0x2c>
    519c:	b9 2f       	mov	r27, r25
    519e:	99 27       	eor	r25, r25
    51a0:	b7 51       	subi	r27, 0x17	; 23
    51a2:	a0 f0       	brcs	.+40     	; 0x51cc <__fixunssfsi+0x38>
    51a4:	d1 f0       	breq	.+52     	; 0x51da <__fixunssfsi+0x46>
    51a6:	66 0f       	add	r22, r22
    51a8:	77 1f       	adc	r23, r23
    51aa:	88 1f       	adc	r24, r24
    51ac:	99 1f       	adc	r25, r25
    51ae:	1a f0       	brmi	.+6      	; 0x51b6 <__fixunssfsi+0x22>
    51b0:	ba 95       	dec	r27
    51b2:	c9 f7       	brne	.-14     	; 0x51a6 <__fixunssfsi+0x12>
    51b4:	12 c0       	rjmp	.+36     	; 0x51da <__fixunssfsi+0x46>
    51b6:	b1 30       	cpi	r27, 0x01	; 1
    51b8:	81 f0       	breq	.+32     	; 0x51da <__fixunssfsi+0x46>
    51ba:	9f d0       	rcall	.+318    	; 0x52fa <__fp_zero>
    51bc:	b1 e0       	ldi	r27, 0x01	; 1
    51be:	08 95       	ret
    51c0:	9c c0       	rjmp	.+312    	; 0x52fa <__fp_zero>
    51c2:	67 2f       	mov	r22, r23
    51c4:	78 2f       	mov	r23, r24
    51c6:	88 27       	eor	r24, r24
    51c8:	b8 5f       	subi	r27, 0xF8	; 248
    51ca:	39 f0       	breq	.+14     	; 0x51da <__fixunssfsi+0x46>
    51cc:	b9 3f       	cpi	r27, 0xF9	; 249
    51ce:	cc f3       	brlt	.-14     	; 0x51c2 <__fixunssfsi+0x2e>
    51d0:	86 95       	lsr	r24
    51d2:	77 95       	ror	r23
    51d4:	67 95       	ror	r22
    51d6:	b3 95       	inc	r27
    51d8:	d9 f7       	brne	.-10     	; 0x51d0 <__fixunssfsi+0x3c>
    51da:	3e f4       	brtc	.+14     	; 0x51ea <__fixunssfsi+0x56>
    51dc:	90 95       	com	r25
    51de:	80 95       	com	r24
    51e0:	70 95       	com	r23
    51e2:	61 95       	neg	r22
    51e4:	7f 4f       	sbci	r23, 0xFF	; 255
    51e6:	8f 4f       	sbci	r24, 0xFF	; 255
    51e8:	9f 4f       	sbci	r25, 0xFF	; 255
    51ea:	08 95       	ret

000051ec <__floatunsisf>:
    51ec:	e8 94       	clt
    51ee:	09 c0       	rjmp	.+18     	; 0x5202 <__floatsisf+0x12>

000051f0 <__floatsisf>:
    51f0:	97 fb       	bst	r25, 7
    51f2:	3e f4       	brtc	.+14     	; 0x5202 <__floatsisf+0x12>
    51f4:	90 95       	com	r25
    51f6:	80 95       	com	r24
    51f8:	70 95       	com	r23
    51fa:	61 95       	neg	r22
    51fc:	7f 4f       	sbci	r23, 0xFF	; 255
    51fe:	8f 4f       	sbci	r24, 0xFF	; 255
    5200:	9f 4f       	sbci	r25, 0xFF	; 255
    5202:	99 23       	and	r25, r25
    5204:	a9 f0       	breq	.+42     	; 0x5230 <__floatsisf+0x40>
    5206:	f9 2f       	mov	r31, r25
    5208:	96 e9       	ldi	r25, 0x96	; 150
    520a:	bb 27       	eor	r27, r27
    520c:	93 95       	inc	r25
    520e:	f6 95       	lsr	r31
    5210:	87 95       	ror	r24
    5212:	77 95       	ror	r23
    5214:	67 95       	ror	r22
    5216:	b7 95       	ror	r27
    5218:	f1 11       	cpse	r31, r1
    521a:	f8 cf       	rjmp	.-16     	; 0x520c <__floatsisf+0x1c>
    521c:	fa f4       	brpl	.+62     	; 0x525c <__floatsisf+0x6c>
    521e:	bb 0f       	add	r27, r27
    5220:	11 f4       	brne	.+4      	; 0x5226 <__floatsisf+0x36>
    5222:	60 ff       	sbrs	r22, 0
    5224:	1b c0       	rjmp	.+54     	; 0x525c <__floatsisf+0x6c>
    5226:	6f 5f       	subi	r22, 0xFF	; 255
    5228:	7f 4f       	sbci	r23, 0xFF	; 255
    522a:	8f 4f       	sbci	r24, 0xFF	; 255
    522c:	9f 4f       	sbci	r25, 0xFF	; 255
    522e:	16 c0       	rjmp	.+44     	; 0x525c <__floatsisf+0x6c>
    5230:	88 23       	and	r24, r24
    5232:	11 f0       	breq	.+4      	; 0x5238 <__floatsisf+0x48>
    5234:	96 e9       	ldi	r25, 0x96	; 150
    5236:	11 c0       	rjmp	.+34     	; 0x525a <__floatsisf+0x6a>
    5238:	77 23       	and	r23, r23
    523a:	21 f0       	breq	.+8      	; 0x5244 <__floatsisf+0x54>
    523c:	9e e8       	ldi	r25, 0x8E	; 142
    523e:	87 2f       	mov	r24, r23
    5240:	76 2f       	mov	r23, r22
    5242:	05 c0       	rjmp	.+10     	; 0x524e <__floatsisf+0x5e>
    5244:	66 23       	and	r22, r22
    5246:	71 f0       	breq	.+28     	; 0x5264 <__floatsisf+0x74>
    5248:	96 e8       	ldi	r25, 0x86	; 134
    524a:	86 2f       	mov	r24, r22
    524c:	70 e0       	ldi	r23, 0x00	; 0
    524e:	60 e0       	ldi	r22, 0x00	; 0
    5250:	2a f0       	brmi	.+10     	; 0x525c <__floatsisf+0x6c>
    5252:	9a 95       	dec	r25
    5254:	66 0f       	add	r22, r22
    5256:	77 1f       	adc	r23, r23
    5258:	88 1f       	adc	r24, r24
    525a:	da f7       	brpl	.-10     	; 0x5252 <__floatsisf+0x62>
    525c:	88 0f       	add	r24, r24
    525e:	96 95       	lsr	r25
    5260:	87 95       	ror	r24
    5262:	97 f9       	bld	r25, 7
    5264:	08 95       	ret

00005266 <__fp_inf>:
    5266:	97 f9       	bld	r25, 7
    5268:	9f 67       	ori	r25, 0x7F	; 127
    526a:	80 e8       	ldi	r24, 0x80	; 128
    526c:	70 e0       	ldi	r23, 0x00	; 0
    526e:	60 e0       	ldi	r22, 0x00	; 0
    5270:	08 95       	ret

00005272 <__fp_nan>:
    5272:	9f ef       	ldi	r25, 0xFF	; 255
    5274:	80 ec       	ldi	r24, 0xC0	; 192
    5276:	08 95       	ret

00005278 <__fp_pscA>:
    5278:	00 24       	eor	r0, r0
    527a:	0a 94       	dec	r0
    527c:	16 16       	cp	r1, r22
    527e:	17 06       	cpc	r1, r23
    5280:	18 06       	cpc	r1, r24
    5282:	09 06       	cpc	r0, r25
    5284:	08 95       	ret

00005286 <__fp_pscB>:
    5286:	00 24       	eor	r0, r0
    5288:	0a 94       	dec	r0
    528a:	12 16       	cp	r1, r18
    528c:	13 06       	cpc	r1, r19
    528e:	14 06       	cpc	r1, r20
    5290:	05 06       	cpc	r0, r21
    5292:	08 95       	ret

00005294 <__fp_round>:
    5294:	09 2e       	mov	r0, r25
    5296:	03 94       	inc	r0
    5298:	00 0c       	add	r0, r0
    529a:	11 f4       	brne	.+4      	; 0x52a0 <__fp_round+0xc>
    529c:	88 23       	and	r24, r24
    529e:	52 f0       	brmi	.+20     	; 0x52b4 <__fp_round+0x20>
    52a0:	bb 0f       	add	r27, r27
    52a2:	40 f4       	brcc	.+16     	; 0x52b4 <__fp_round+0x20>
    52a4:	bf 2b       	or	r27, r31
    52a6:	11 f4       	brne	.+4      	; 0x52ac <__fp_round+0x18>
    52a8:	60 ff       	sbrs	r22, 0
    52aa:	04 c0       	rjmp	.+8      	; 0x52b4 <__fp_round+0x20>
    52ac:	6f 5f       	subi	r22, 0xFF	; 255
    52ae:	7f 4f       	sbci	r23, 0xFF	; 255
    52b0:	8f 4f       	sbci	r24, 0xFF	; 255
    52b2:	9f 4f       	sbci	r25, 0xFF	; 255
    52b4:	08 95       	ret

000052b6 <__fp_split3>:
    52b6:	57 fd       	sbrc	r21, 7
    52b8:	90 58       	subi	r25, 0x80	; 128
    52ba:	44 0f       	add	r20, r20
    52bc:	55 1f       	adc	r21, r21
    52be:	59 f0       	breq	.+22     	; 0x52d6 <__fp_splitA+0x10>
    52c0:	5f 3f       	cpi	r21, 0xFF	; 255
    52c2:	71 f0       	breq	.+28     	; 0x52e0 <__fp_splitA+0x1a>
    52c4:	47 95       	ror	r20

000052c6 <__fp_splitA>:
    52c6:	88 0f       	add	r24, r24
    52c8:	97 fb       	bst	r25, 7
    52ca:	99 1f       	adc	r25, r25
    52cc:	61 f0       	breq	.+24     	; 0x52e6 <__fp_splitA+0x20>
    52ce:	9f 3f       	cpi	r25, 0xFF	; 255
    52d0:	79 f0       	breq	.+30     	; 0x52f0 <__fp_splitA+0x2a>
    52d2:	87 95       	ror	r24
    52d4:	08 95       	ret
    52d6:	12 16       	cp	r1, r18
    52d8:	13 06       	cpc	r1, r19
    52da:	14 06       	cpc	r1, r20
    52dc:	55 1f       	adc	r21, r21
    52de:	f2 cf       	rjmp	.-28     	; 0x52c4 <__fp_split3+0xe>
    52e0:	46 95       	lsr	r20
    52e2:	f1 df       	rcall	.-30     	; 0x52c6 <__fp_splitA>
    52e4:	08 c0       	rjmp	.+16     	; 0x52f6 <__fp_splitA+0x30>
    52e6:	16 16       	cp	r1, r22
    52e8:	17 06       	cpc	r1, r23
    52ea:	18 06       	cpc	r1, r24
    52ec:	99 1f       	adc	r25, r25
    52ee:	f1 cf       	rjmp	.-30     	; 0x52d2 <__fp_splitA+0xc>
    52f0:	86 95       	lsr	r24
    52f2:	71 05       	cpc	r23, r1
    52f4:	61 05       	cpc	r22, r1
    52f6:	08 94       	sec
    52f8:	08 95       	ret

000052fa <__fp_zero>:
    52fa:	e8 94       	clt

000052fc <__fp_szero>:
    52fc:	bb 27       	eor	r27, r27
    52fe:	66 27       	eor	r22, r22
    5300:	77 27       	eor	r23, r23
    5302:	cb 01       	movw	r24, r22
    5304:	97 f9       	bld	r25, 7
    5306:	08 95       	ret

00005308 <__mulsf3>:
    5308:	0b d0       	rcall	.+22     	; 0x5320 <__mulsf3x>
    530a:	c4 cf       	rjmp	.-120    	; 0x5294 <__fp_round>
    530c:	b5 df       	rcall	.-150    	; 0x5278 <__fp_pscA>
    530e:	28 f0       	brcs	.+10     	; 0x531a <__mulsf3+0x12>
    5310:	ba df       	rcall	.-140    	; 0x5286 <__fp_pscB>
    5312:	18 f0       	brcs	.+6      	; 0x531a <__mulsf3+0x12>
    5314:	95 23       	and	r25, r21
    5316:	09 f0       	breq	.+2      	; 0x531a <__mulsf3+0x12>
    5318:	a6 cf       	rjmp	.-180    	; 0x5266 <__fp_inf>
    531a:	ab cf       	rjmp	.-170    	; 0x5272 <__fp_nan>
    531c:	11 24       	eor	r1, r1
    531e:	ee cf       	rjmp	.-36     	; 0x52fc <__fp_szero>

00005320 <__mulsf3x>:
    5320:	ca df       	rcall	.-108    	; 0x52b6 <__fp_split3>
    5322:	a0 f3       	brcs	.-24     	; 0x530c <__mulsf3+0x4>

00005324 <__mulsf3_pse>:
    5324:	95 9f       	mul	r25, r21
    5326:	d1 f3       	breq	.-12     	; 0x531c <__mulsf3+0x14>
    5328:	95 0f       	add	r25, r21
    532a:	50 e0       	ldi	r21, 0x00	; 0
    532c:	55 1f       	adc	r21, r21
    532e:	62 9f       	mul	r22, r18
    5330:	f0 01       	movw	r30, r0
    5332:	72 9f       	mul	r23, r18
    5334:	bb 27       	eor	r27, r27
    5336:	f0 0d       	add	r31, r0
    5338:	b1 1d       	adc	r27, r1
    533a:	63 9f       	mul	r22, r19
    533c:	aa 27       	eor	r26, r26
    533e:	f0 0d       	add	r31, r0
    5340:	b1 1d       	adc	r27, r1
    5342:	aa 1f       	adc	r26, r26
    5344:	64 9f       	mul	r22, r20
    5346:	66 27       	eor	r22, r22
    5348:	b0 0d       	add	r27, r0
    534a:	a1 1d       	adc	r26, r1
    534c:	66 1f       	adc	r22, r22
    534e:	82 9f       	mul	r24, r18
    5350:	22 27       	eor	r18, r18
    5352:	b0 0d       	add	r27, r0
    5354:	a1 1d       	adc	r26, r1
    5356:	62 1f       	adc	r22, r18
    5358:	73 9f       	mul	r23, r19
    535a:	b0 0d       	add	r27, r0
    535c:	a1 1d       	adc	r26, r1
    535e:	62 1f       	adc	r22, r18
    5360:	83 9f       	mul	r24, r19
    5362:	a0 0d       	add	r26, r0
    5364:	61 1d       	adc	r22, r1
    5366:	22 1f       	adc	r18, r18
    5368:	74 9f       	mul	r23, r20
    536a:	33 27       	eor	r19, r19
    536c:	a0 0d       	add	r26, r0
    536e:	61 1d       	adc	r22, r1
    5370:	23 1f       	adc	r18, r19
    5372:	84 9f       	mul	r24, r20
    5374:	60 0d       	add	r22, r0
    5376:	21 1d       	adc	r18, r1
    5378:	82 2f       	mov	r24, r18
    537a:	76 2f       	mov	r23, r22
    537c:	6a 2f       	mov	r22, r26
    537e:	11 24       	eor	r1, r1
    5380:	9f 57       	subi	r25, 0x7F	; 127
    5382:	50 40       	sbci	r21, 0x00	; 0
    5384:	8a f0       	brmi	.+34     	; 0x53a8 <__mulsf3_pse+0x84>
    5386:	e1 f0       	breq	.+56     	; 0x53c0 <__mulsf3_pse+0x9c>
    5388:	88 23       	and	r24, r24
    538a:	4a f0       	brmi	.+18     	; 0x539e <__mulsf3_pse+0x7a>
    538c:	ee 0f       	add	r30, r30
    538e:	ff 1f       	adc	r31, r31
    5390:	bb 1f       	adc	r27, r27
    5392:	66 1f       	adc	r22, r22
    5394:	77 1f       	adc	r23, r23
    5396:	88 1f       	adc	r24, r24
    5398:	91 50       	subi	r25, 0x01	; 1
    539a:	50 40       	sbci	r21, 0x00	; 0
    539c:	a9 f7       	brne	.-22     	; 0x5388 <__mulsf3_pse+0x64>
    539e:	9e 3f       	cpi	r25, 0xFE	; 254
    53a0:	51 05       	cpc	r21, r1
    53a2:	70 f0       	brcs	.+28     	; 0x53c0 <__mulsf3_pse+0x9c>
    53a4:	60 cf       	rjmp	.-320    	; 0x5266 <__fp_inf>
    53a6:	aa cf       	rjmp	.-172    	; 0x52fc <__fp_szero>
    53a8:	5f 3f       	cpi	r21, 0xFF	; 255
    53aa:	ec f3       	brlt	.-6      	; 0x53a6 <__mulsf3_pse+0x82>
    53ac:	98 3e       	cpi	r25, 0xE8	; 232
    53ae:	dc f3       	brlt	.-10     	; 0x53a6 <__mulsf3_pse+0x82>
    53b0:	86 95       	lsr	r24
    53b2:	77 95       	ror	r23
    53b4:	67 95       	ror	r22
    53b6:	b7 95       	ror	r27
    53b8:	f7 95       	ror	r31
    53ba:	e7 95       	ror	r30
    53bc:	9f 5f       	subi	r25, 0xFF	; 255
    53be:	c1 f7       	brne	.-16     	; 0x53b0 <__mulsf3_pse+0x8c>
    53c0:	fe 2b       	or	r31, r30
    53c2:	88 0f       	add	r24, r24
    53c4:	91 1d       	adc	r25, r1
    53c6:	96 95       	lsr	r25
    53c8:	87 95       	ror	r24
    53ca:	97 f9       	bld	r25, 7
    53cc:	08 95       	ret

000053ce <__udivmodsi4>:
    53ce:	a1 e2       	ldi	r26, 0x21	; 33
    53d0:	1a 2e       	mov	r1, r26
    53d2:	aa 1b       	sub	r26, r26
    53d4:	bb 1b       	sub	r27, r27
    53d6:	fd 01       	movw	r30, r26
    53d8:	0d c0       	rjmp	.+26     	; 0x53f4 <__udivmodsi4_ep>

000053da <__udivmodsi4_loop>:
    53da:	aa 1f       	adc	r26, r26
    53dc:	bb 1f       	adc	r27, r27
    53de:	ee 1f       	adc	r30, r30
    53e0:	ff 1f       	adc	r31, r31
    53e2:	a2 17       	cp	r26, r18
    53e4:	b3 07       	cpc	r27, r19
    53e6:	e4 07       	cpc	r30, r20
    53e8:	f5 07       	cpc	r31, r21
    53ea:	20 f0       	brcs	.+8      	; 0x53f4 <__udivmodsi4_ep>
    53ec:	a2 1b       	sub	r26, r18
    53ee:	b3 0b       	sbc	r27, r19
    53f0:	e4 0b       	sbc	r30, r20
    53f2:	f5 0b       	sbc	r31, r21

000053f4 <__udivmodsi4_ep>:
    53f4:	66 1f       	adc	r22, r22
    53f6:	77 1f       	adc	r23, r23
    53f8:	88 1f       	adc	r24, r24
    53fa:	99 1f       	adc	r25, r25
    53fc:	1a 94       	dec	r1
    53fe:	69 f7       	brne	.-38     	; 0x53da <__udivmodsi4_loop>
    5400:	60 95       	com	r22
    5402:	70 95       	com	r23
    5404:	80 95       	com	r24
    5406:	90 95       	com	r25
    5408:	9b 01       	movw	r18, r22
    540a:	ac 01       	movw	r20, r24
    540c:	bd 01       	movw	r22, r26
    540e:	cf 01       	movw	r24, r30
    5410:	08 95       	ret

00005412 <__tablejump2__>:
    5412:	ee 0f       	add	r30, r30
    5414:	ff 1f       	adc	r31, r31
    5416:	88 1f       	adc	r24, r24
    5418:	8b bf       	out	0x3b, r24	; 59
    541a:	07 90       	elpm	r0, Z+
    541c:	f6 91       	elpm	r31, Z
    541e:	e0 2d       	mov	r30, r0
    5420:	19 94       	eijmp

00005422 <calloc>:
    5422:	0f 93       	push	r16
    5424:	1f 93       	push	r17
    5426:	cf 93       	push	r28
    5428:	df 93       	push	r29
    542a:	86 9f       	mul	r24, r22
    542c:	80 01       	movw	r16, r0
    542e:	87 9f       	mul	r24, r23
    5430:	10 0d       	add	r17, r0
    5432:	96 9f       	mul	r25, r22
    5434:	10 0d       	add	r17, r0
    5436:	11 24       	eor	r1, r1
    5438:	c8 01       	movw	r24, r16
    543a:	0d d0       	rcall	.+26     	; 0x5456 <malloc>
    543c:	ec 01       	movw	r28, r24
    543e:	00 97       	sbiw	r24, 0x00	; 0
    5440:	21 f0       	breq	.+8      	; 0x544a <calloc+0x28>
    5442:	a8 01       	movw	r20, r16
    5444:	60 e0       	ldi	r22, 0x00	; 0
    5446:	70 e0       	ldi	r23, 0x00	; 0
    5448:	34 d1       	rcall	.+616    	; 0x56b2 <memset>
    544a:	ce 01       	movw	r24, r28
    544c:	df 91       	pop	r29
    544e:	cf 91       	pop	r28
    5450:	1f 91       	pop	r17
    5452:	0f 91       	pop	r16
    5454:	08 95       	ret

00005456 <malloc>:
    5456:	0f 93       	push	r16
    5458:	1f 93       	push	r17
    545a:	cf 93       	push	r28
    545c:	df 93       	push	r29
    545e:	82 30       	cpi	r24, 0x02	; 2
    5460:	91 05       	cpc	r25, r1
    5462:	10 f4       	brcc	.+4      	; 0x5468 <malloc+0x12>
    5464:	82 e0       	ldi	r24, 0x02	; 2
    5466:	90 e0       	ldi	r25, 0x00	; 0
    5468:	e0 91 ff 1a 	lds	r30, 0x1AFF	; 0x801aff <__flp>
    546c:	f0 91 00 1b 	lds	r31, 0x1B00	; 0x801b00 <__flp+0x1>
    5470:	20 e0       	ldi	r18, 0x00	; 0
    5472:	30 e0       	ldi	r19, 0x00	; 0
    5474:	a0 e0       	ldi	r26, 0x00	; 0
    5476:	b0 e0       	ldi	r27, 0x00	; 0
    5478:	30 97       	sbiw	r30, 0x00	; 0
    547a:	19 f1       	breq	.+70     	; 0x54c2 <malloc+0x6c>
    547c:	40 81       	ld	r20, Z
    547e:	51 81       	ldd	r21, Z+1	; 0x01
    5480:	02 81       	ldd	r16, Z+2	; 0x02
    5482:	13 81       	ldd	r17, Z+3	; 0x03
    5484:	48 17       	cp	r20, r24
    5486:	59 07       	cpc	r21, r25
    5488:	c8 f0       	brcs	.+50     	; 0x54bc <malloc+0x66>
    548a:	84 17       	cp	r24, r20
    548c:	95 07       	cpc	r25, r21
    548e:	69 f4       	brne	.+26     	; 0x54aa <malloc+0x54>
    5490:	10 97       	sbiw	r26, 0x00	; 0
    5492:	31 f0       	breq	.+12     	; 0x54a0 <malloc+0x4a>
    5494:	12 96       	adiw	r26, 0x02	; 2
    5496:	0c 93       	st	X, r16
    5498:	12 97       	sbiw	r26, 0x02	; 2
    549a:	13 96       	adiw	r26, 0x03	; 3
    549c:	1c 93       	st	X, r17
    549e:	27 c0       	rjmp	.+78     	; 0x54ee <malloc+0x98>
    54a0:	00 93 ff 1a 	sts	0x1AFF, r16	; 0x801aff <__flp>
    54a4:	10 93 00 1b 	sts	0x1B00, r17	; 0x801b00 <__flp+0x1>
    54a8:	22 c0       	rjmp	.+68     	; 0x54ee <malloc+0x98>
    54aa:	21 15       	cp	r18, r1
    54ac:	31 05       	cpc	r19, r1
    54ae:	19 f0       	breq	.+6      	; 0x54b6 <malloc+0x60>
    54b0:	42 17       	cp	r20, r18
    54b2:	53 07       	cpc	r21, r19
    54b4:	18 f4       	brcc	.+6      	; 0x54bc <malloc+0x66>
    54b6:	9a 01       	movw	r18, r20
    54b8:	bd 01       	movw	r22, r26
    54ba:	ef 01       	movw	r28, r30
    54bc:	df 01       	movw	r26, r30
    54be:	f8 01       	movw	r30, r16
    54c0:	db cf       	rjmp	.-74     	; 0x5478 <malloc+0x22>
    54c2:	21 15       	cp	r18, r1
    54c4:	31 05       	cpc	r19, r1
    54c6:	f9 f0       	breq	.+62     	; 0x5506 <malloc+0xb0>
    54c8:	28 1b       	sub	r18, r24
    54ca:	39 0b       	sbc	r19, r25
    54cc:	24 30       	cpi	r18, 0x04	; 4
    54ce:	31 05       	cpc	r19, r1
    54d0:	80 f4       	brcc	.+32     	; 0x54f2 <malloc+0x9c>
    54d2:	8a 81       	ldd	r24, Y+2	; 0x02
    54d4:	9b 81       	ldd	r25, Y+3	; 0x03
    54d6:	61 15       	cp	r22, r1
    54d8:	71 05       	cpc	r23, r1
    54da:	21 f0       	breq	.+8      	; 0x54e4 <malloc+0x8e>
    54dc:	fb 01       	movw	r30, r22
    54de:	93 83       	std	Z+3, r25	; 0x03
    54e0:	82 83       	std	Z+2, r24	; 0x02
    54e2:	04 c0       	rjmp	.+8      	; 0x54ec <malloc+0x96>
    54e4:	90 93 00 1b 	sts	0x1B00, r25	; 0x801b00 <__flp+0x1>
    54e8:	80 93 ff 1a 	sts	0x1AFF, r24	; 0x801aff <__flp>
    54ec:	fe 01       	movw	r30, r28
    54ee:	32 96       	adiw	r30, 0x02	; 2
    54f0:	44 c0       	rjmp	.+136    	; 0x557a <malloc+0x124>
    54f2:	fe 01       	movw	r30, r28
    54f4:	e2 0f       	add	r30, r18
    54f6:	f3 1f       	adc	r31, r19
    54f8:	81 93       	st	Z+, r24
    54fa:	91 93       	st	Z+, r25
    54fc:	22 50       	subi	r18, 0x02	; 2
    54fe:	31 09       	sbc	r19, r1
    5500:	39 83       	std	Y+1, r19	; 0x01
    5502:	28 83       	st	Y, r18
    5504:	3a c0       	rjmp	.+116    	; 0x557a <malloc+0x124>
    5506:	20 91 fd 1a 	lds	r18, 0x1AFD	; 0x801afd <__brkval>
    550a:	30 91 fe 1a 	lds	r19, 0x1AFE	; 0x801afe <__brkval+0x1>
    550e:	23 2b       	or	r18, r19
    5510:	41 f4       	brne	.+16     	; 0x5522 <malloc+0xcc>
    5512:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    5516:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    551a:	30 93 fe 1a 	sts	0x1AFE, r19	; 0x801afe <__brkval+0x1>
    551e:	20 93 fd 1a 	sts	0x1AFD, r18	; 0x801afd <__brkval>
    5522:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    5526:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    552a:	21 15       	cp	r18, r1
    552c:	31 05       	cpc	r19, r1
    552e:	41 f4       	brne	.+16     	; 0x5540 <malloc+0xea>
    5530:	2d b7       	in	r18, 0x3d	; 61
    5532:	3e b7       	in	r19, 0x3e	; 62
    5534:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    5538:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    553c:	24 1b       	sub	r18, r20
    553e:	35 0b       	sbc	r19, r21
    5540:	e0 91 fd 1a 	lds	r30, 0x1AFD	; 0x801afd <__brkval>
    5544:	f0 91 fe 1a 	lds	r31, 0x1AFE	; 0x801afe <__brkval+0x1>
    5548:	e2 17       	cp	r30, r18
    554a:	f3 07       	cpc	r31, r19
    554c:	a0 f4       	brcc	.+40     	; 0x5576 <malloc+0x120>
    554e:	2e 1b       	sub	r18, r30
    5550:	3f 0b       	sbc	r19, r31
    5552:	28 17       	cp	r18, r24
    5554:	39 07       	cpc	r19, r25
    5556:	78 f0       	brcs	.+30     	; 0x5576 <malloc+0x120>
    5558:	ac 01       	movw	r20, r24
    555a:	4e 5f       	subi	r20, 0xFE	; 254
    555c:	5f 4f       	sbci	r21, 0xFF	; 255
    555e:	24 17       	cp	r18, r20
    5560:	35 07       	cpc	r19, r21
    5562:	48 f0       	brcs	.+18     	; 0x5576 <malloc+0x120>
    5564:	4e 0f       	add	r20, r30
    5566:	5f 1f       	adc	r21, r31
    5568:	50 93 fe 1a 	sts	0x1AFE, r21	; 0x801afe <__brkval+0x1>
    556c:	40 93 fd 1a 	sts	0x1AFD, r20	; 0x801afd <__brkval>
    5570:	81 93       	st	Z+, r24
    5572:	91 93       	st	Z+, r25
    5574:	02 c0       	rjmp	.+4      	; 0x557a <malloc+0x124>
    5576:	e0 e0       	ldi	r30, 0x00	; 0
    5578:	f0 e0       	ldi	r31, 0x00	; 0
    557a:	cf 01       	movw	r24, r30
    557c:	df 91       	pop	r29
    557e:	cf 91       	pop	r28
    5580:	1f 91       	pop	r17
    5582:	0f 91       	pop	r16
    5584:	08 95       	ret

00005586 <free>:
    5586:	cf 93       	push	r28
    5588:	df 93       	push	r29
    558a:	00 97       	sbiw	r24, 0x00	; 0
    558c:	09 f4       	brne	.+2      	; 0x5590 <free+0xa>
    558e:	81 c0       	rjmp	.+258    	; 0x5692 <free+0x10c>
    5590:	fc 01       	movw	r30, r24
    5592:	32 97       	sbiw	r30, 0x02	; 2
    5594:	13 82       	std	Z+3, r1	; 0x03
    5596:	12 82       	std	Z+2, r1	; 0x02
    5598:	a0 91 ff 1a 	lds	r26, 0x1AFF	; 0x801aff <__flp>
    559c:	b0 91 00 1b 	lds	r27, 0x1B00	; 0x801b00 <__flp+0x1>
    55a0:	10 97       	sbiw	r26, 0x00	; 0
    55a2:	81 f4       	brne	.+32     	; 0x55c4 <free+0x3e>
    55a4:	20 81       	ld	r18, Z
    55a6:	31 81       	ldd	r19, Z+1	; 0x01
    55a8:	82 0f       	add	r24, r18
    55aa:	93 1f       	adc	r25, r19
    55ac:	20 91 fd 1a 	lds	r18, 0x1AFD	; 0x801afd <__brkval>
    55b0:	30 91 fe 1a 	lds	r19, 0x1AFE	; 0x801afe <__brkval+0x1>
    55b4:	28 17       	cp	r18, r24
    55b6:	39 07       	cpc	r19, r25
    55b8:	51 f5       	brne	.+84     	; 0x560e <free+0x88>
    55ba:	f0 93 fe 1a 	sts	0x1AFE, r31	; 0x801afe <__brkval+0x1>
    55be:	e0 93 fd 1a 	sts	0x1AFD, r30	; 0x801afd <__brkval>
    55c2:	67 c0       	rjmp	.+206    	; 0x5692 <free+0x10c>
    55c4:	ed 01       	movw	r28, r26
    55c6:	20 e0       	ldi	r18, 0x00	; 0
    55c8:	30 e0       	ldi	r19, 0x00	; 0
    55ca:	ce 17       	cp	r28, r30
    55cc:	df 07       	cpc	r29, r31
    55ce:	40 f4       	brcc	.+16     	; 0x55e0 <free+0x5a>
    55d0:	4a 81       	ldd	r20, Y+2	; 0x02
    55d2:	5b 81       	ldd	r21, Y+3	; 0x03
    55d4:	9e 01       	movw	r18, r28
    55d6:	41 15       	cp	r20, r1
    55d8:	51 05       	cpc	r21, r1
    55da:	f1 f0       	breq	.+60     	; 0x5618 <free+0x92>
    55dc:	ea 01       	movw	r28, r20
    55de:	f5 cf       	rjmp	.-22     	; 0x55ca <free+0x44>
    55e0:	d3 83       	std	Z+3, r29	; 0x03
    55e2:	c2 83       	std	Z+2, r28	; 0x02
    55e4:	40 81       	ld	r20, Z
    55e6:	51 81       	ldd	r21, Z+1	; 0x01
    55e8:	84 0f       	add	r24, r20
    55ea:	95 1f       	adc	r25, r21
    55ec:	c8 17       	cp	r28, r24
    55ee:	d9 07       	cpc	r29, r25
    55f0:	59 f4       	brne	.+22     	; 0x5608 <free+0x82>
    55f2:	88 81       	ld	r24, Y
    55f4:	99 81       	ldd	r25, Y+1	; 0x01
    55f6:	84 0f       	add	r24, r20
    55f8:	95 1f       	adc	r25, r21
    55fa:	02 96       	adiw	r24, 0x02	; 2
    55fc:	91 83       	std	Z+1, r25	; 0x01
    55fe:	80 83       	st	Z, r24
    5600:	8a 81       	ldd	r24, Y+2	; 0x02
    5602:	9b 81       	ldd	r25, Y+3	; 0x03
    5604:	93 83       	std	Z+3, r25	; 0x03
    5606:	82 83       	std	Z+2, r24	; 0x02
    5608:	21 15       	cp	r18, r1
    560a:	31 05       	cpc	r19, r1
    560c:	29 f4       	brne	.+10     	; 0x5618 <free+0x92>
    560e:	f0 93 00 1b 	sts	0x1B00, r31	; 0x801b00 <__flp+0x1>
    5612:	e0 93 ff 1a 	sts	0x1AFF, r30	; 0x801aff <__flp>
    5616:	3d c0       	rjmp	.+122    	; 0x5692 <free+0x10c>
    5618:	e9 01       	movw	r28, r18
    561a:	fb 83       	std	Y+3, r31	; 0x03
    561c:	ea 83       	std	Y+2, r30	; 0x02
    561e:	49 91       	ld	r20, Y+
    5620:	59 91       	ld	r21, Y+
    5622:	c4 0f       	add	r28, r20
    5624:	d5 1f       	adc	r29, r21
    5626:	ec 17       	cp	r30, r28
    5628:	fd 07       	cpc	r31, r29
    562a:	61 f4       	brne	.+24     	; 0x5644 <free+0xbe>
    562c:	80 81       	ld	r24, Z
    562e:	91 81       	ldd	r25, Z+1	; 0x01
    5630:	84 0f       	add	r24, r20
    5632:	95 1f       	adc	r25, r21
    5634:	02 96       	adiw	r24, 0x02	; 2
    5636:	e9 01       	movw	r28, r18
    5638:	99 83       	std	Y+1, r25	; 0x01
    563a:	88 83       	st	Y, r24
    563c:	82 81       	ldd	r24, Z+2	; 0x02
    563e:	93 81       	ldd	r25, Z+3	; 0x03
    5640:	9b 83       	std	Y+3, r25	; 0x03
    5642:	8a 83       	std	Y+2, r24	; 0x02
    5644:	e0 e0       	ldi	r30, 0x00	; 0
    5646:	f0 e0       	ldi	r31, 0x00	; 0
    5648:	12 96       	adiw	r26, 0x02	; 2
    564a:	8d 91       	ld	r24, X+
    564c:	9c 91       	ld	r25, X
    564e:	13 97       	sbiw	r26, 0x03	; 3
    5650:	00 97       	sbiw	r24, 0x00	; 0
    5652:	19 f0       	breq	.+6      	; 0x565a <free+0xd4>
    5654:	fd 01       	movw	r30, r26
    5656:	dc 01       	movw	r26, r24
    5658:	f7 cf       	rjmp	.-18     	; 0x5648 <free+0xc2>
    565a:	8d 91       	ld	r24, X+
    565c:	9c 91       	ld	r25, X
    565e:	11 97       	sbiw	r26, 0x01	; 1
    5660:	9d 01       	movw	r18, r26
    5662:	2e 5f       	subi	r18, 0xFE	; 254
    5664:	3f 4f       	sbci	r19, 0xFF	; 255
    5666:	82 0f       	add	r24, r18
    5668:	93 1f       	adc	r25, r19
    566a:	20 91 fd 1a 	lds	r18, 0x1AFD	; 0x801afd <__brkval>
    566e:	30 91 fe 1a 	lds	r19, 0x1AFE	; 0x801afe <__brkval+0x1>
    5672:	28 17       	cp	r18, r24
    5674:	39 07       	cpc	r19, r25
    5676:	69 f4       	brne	.+26     	; 0x5692 <free+0x10c>
    5678:	30 97       	sbiw	r30, 0x00	; 0
    567a:	29 f4       	brne	.+10     	; 0x5686 <free+0x100>
    567c:	10 92 00 1b 	sts	0x1B00, r1	; 0x801b00 <__flp+0x1>
    5680:	10 92 ff 1a 	sts	0x1AFF, r1	; 0x801aff <__flp>
    5684:	02 c0       	rjmp	.+4      	; 0x568a <free+0x104>
    5686:	13 82       	std	Z+3, r1	; 0x03
    5688:	12 82       	std	Z+2, r1	; 0x02
    568a:	b0 93 fe 1a 	sts	0x1AFE, r27	; 0x801afe <__brkval+0x1>
    568e:	a0 93 fd 1a 	sts	0x1AFD, r26	; 0x801afd <__brkval>
    5692:	df 91       	pop	r29
    5694:	cf 91       	pop	r28
    5696:	08 95       	ret

00005698 <abort>:
    5698:	81 e0       	ldi	r24, 0x01	; 1
    569a:	90 e0       	ldi	r25, 0x00	; 0
    569c:	f8 94       	cli
    569e:	7d c3       	rjmp	.+1786   	; 0x5d9a <_exit>

000056a0 <memcpy>:
    56a0:	fb 01       	movw	r30, r22
    56a2:	dc 01       	movw	r26, r24
    56a4:	02 c0       	rjmp	.+4      	; 0x56aa <memcpy+0xa>
    56a6:	01 90       	ld	r0, Z+
    56a8:	0d 92       	st	X+, r0
    56aa:	41 50       	subi	r20, 0x01	; 1
    56ac:	50 40       	sbci	r21, 0x00	; 0
    56ae:	d8 f7       	brcc	.-10     	; 0x56a6 <memcpy+0x6>
    56b0:	08 95       	ret

000056b2 <memset>:
    56b2:	dc 01       	movw	r26, r24
    56b4:	01 c0       	rjmp	.+2      	; 0x56b8 <memset+0x6>
    56b6:	6d 93       	st	X+, r22
    56b8:	41 50       	subi	r20, 0x01	; 1
    56ba:	50 40       	sbci	r21, 0x00	; 0
    56bc:	e0 f7       	brcc	.-8      	; 0x56b6 <memset+0x4>
    56be:	08 95       	ret

000056c0 <strcasestr>:
    56c0:	fb 01       	movw	r30, r22
    56c2:	51 91       	ld	r21, Z+
    56c4:	55 23       	and	r21, r21
    56c6:	b1 f0       	breq	.+44     	; 0x56f4 <strcasestr+0x34>
    56c8:	bf 01       	movw	r22, r30
    56ca:	dc 01       	movw	r26, r24
    56cc:	05 2e       	mov	r0, r21
    56ce:	4d 91       	ld	r20, X+
    56d0:	44 23       	and	r20, r20
    56d2:	69 f0       	breq	.+26     	; 0x56ee <strcasestr+0x2e>
    56d4:	10 d0       	rcall	.+32     	; 0x56f6 <strcasestr+0x36>
    56d6:	d9 f7       	brne	.-10     	; 0x56ce <strcasestr+0xe>
    56d8:	cd 01       	movw	r24, r26
    56da:	01 90       	ld	r0, Z+
    56dc:	00 20       	and	r0, r0
    56de:	49 f0       	breq	.+18     	; 0x56f2 <strcasestr+0x32>
    56e0:	4d 91       	ld	r20, X+
    56e2:	41 11       	cpse	r20, r1
    56e4:	08 d0       	rcall	.+16     	; 0x56f6 <strcasestr+0x36>
    56e6:	c9 f3       	breq	.-14     	; 0x56da <strcasestr+0x1a>
    56e8:	fb 01       	movw	r30, r22
    56ea:	41 11       	cpse	r20, r1
    56ec:	ee cf       	rjmp	.-36     	; 0x56ca <strcasestr+0xa>
    56ee:	81 e0       	ldi	r24, 0x01	; 1
    56f0:	90 e0       	ldi	r25, 0x00	; 0
    56f2:	01 97       	sbiw	r24, 0x01	; 1
    56f4:	08 95       	ret
    56f6:	40 25       	eor	r20, r0
    56f8:	39 f0       	breq	.+14     	; 0x5708 <strcasestr+0x48>
    56fa:	40 32       	cpi	r20, 0x20	; 32
    56fc:	29 f4       	brne	.+10     	; 0x5708 <strcasestr+0x48>
    56fe:	40 29       	or	r20, r0
    5700:	4b 57       	subi	r20, 0x7B	; 123
    5702:	46 5e       	subi	r20, 0xE6	; 230
    5704:	08 f0       	brcs	.+2      	; 0x5708 <strcasestr+0x48>
    5706:	18 94       	sez
    5708:	08 95       	ret

0000570a <strcat>:
    570a:	fb 01       	movw	r30, r22
    570c:	dc 01       	movw	r26, r24
    570e:	0d 90       	ld	r0, X+
    5710:	00 20       	and	r0, r0
    5712:	e9 f7       	brne	.-6      	; 0x570e <strcat+0x4>
    5714:	11 97       	sbiw	r26, 0x01	; 1
    5716:	01 90       	ld	r0, Z+
    5718:	0d 92       	st	X+, r0
    571a:	00 20       	and	r0, r0
    571c:	e1 f7       	brne	.-8      	; 0x5716 <strcat+0xc>
    571e:	08 95       	ret

00005720 <strcpy>:
    5720:	fb 01       	movw	r30, r22
    5722:	dc 01       	movw	r26, r24
    5724:	01 90       	ld	r0, Z+
    5726:	0d 92       	st	X+, r0
    5728:	00 20       	and	r0, r0
    572a:	e1 f7       	brne	.-8      	; 0x5724 <strcpy+0x4>
    572c:	08 95       	ret

0000572e <strncasecmp>:
    572e:	fb 01       	movw	r30, r22
    5730:	dc 01       	movw	r26, r24
    5732:	41 50       	subi	r20, 0x01	; 1
    5734:	50 40       	sbci	r21, 0x00	; 0
    5736:	88 f0       	brcs	.+34     	; 0x575a <strncasecmp+0x2c>
    5738:	8d 91       	ld	r24, X+
    573a:	81 34       	cpi	r24, 0x41	; 65
    573c:	1c f0       	brlt	.+6      	; 0x5744 <strncasecmp+0x16>
    573e:	8b 35       	cpi	r24, 0x5B	; 91
    5740:	0c f4       	brge	.+2      	; 0x5744 <strncasecmp+0x16>
    5742:	80 5e       	subi	r24, 0xE0	; 224
    5744:	61 91       	ld	r22, Z+
    5746:	61 34       	cpi	r22, 0x41	; 65
    5748:	1c f0       	brlt	.+6      	; 0x5750 <strncasecmp+0x22>
    574a:	6b 35       	cpi	r22, 0x5B	; 91
    574c:	0c f4       	brge	.+2      	; 0x5750 <strncasecmp+0x22>
    574e:	60 5e       	subi	r22, 0xE0	; 224
    5750:	86 1b       	sub	r24, r22
    5752:	61 11       	cpse	r22, r1
    5754:	71 f3       	breq	.-36     	; 0x5732 <strncasecmp+0x4>
    5756:	99 0b       	sbc	r25, r25
    5758:	08 95       	ret
    575a:	88 1b       	sub	r24, r24
    575c:	fc cf       	rjmp	.-8      	; 0x5756 <strncasecmp+0x28>

0000575e <printf>:
    575e:	cf 93       	push	r28
    5760:	df 93       	push	r29
    5762:	cd b7       	in	r28, 0x3d	; 61
    5764:	de b7       	in	r29, 0x3e	; 62
    5766:	ae 01       	movw	r20, r28
    5768:	4a 5f       	subi	r20, 0xFA	; 250
    576a:	5f 4f       	sbci	r21, 0xFF	; 255
    576c:	fa 01       	movw	r30, r20
    576e:	61 91       	ld	r22, Z+
    5770:	71 91       	ld	r23, Z+
    5772:	af 01       	movw	r20, r30
    5774:	80 91 03 1b 	lds	r24, 0x1B03	; 0x801b03 <__iob+0x2>
    5778:	90 91 04 1b 	lds	r25, 0x1B04	; 0x801b04 <__iob+0x3>
    577c:	61 d0       	rcall	.+194    	; 0x5840 <vfprintf>
    577e:	df 91       	pop	r29
    5780:	cf 91       	pop	r28
    5782:	08 95       	ret

00005784 <puts>:
    5784:	0f 93       	push	r16
    5786:	1f 93       	push	r17
    5788:	cf 93       	push	r28
    578a:	df 93       	push	r29
    578c:	e0 91 03 1b 	lds	r30, 0x1B03	; 0x801b03 <__iob+0x2>
    5790:	f0 91 04 1b 	lds	r31, 0x1B04	; 0x801b04 <__iob+0x3>
    5794:	23 81       	ldd	r18, Z+3	; 0x03
    5796:	21 ff       	sbrs	r18, 1
    5798:	1b c0       	rjmp	.+54     	; 0x57d0 <puts+0x4c>
    579a:	8c 01       	movw	r16, r24
    579c:	d0 e0       	ldi	r29, 0x00	; 0
    579e:	c0 e0       	ldi	r28, 0x00	; 0
    57a0:	f8 01       	movw	r30, r16
    57a2:	81 91       	ld	r24, Z+
    57a4:	8f 01       	movw	r16, r30
    57a6:	60 91 03 1b 	lds	r22, 0x1B03	; 0x801b03 <__iob+0x2>
    57aa:	70 91 04 1b 	lds	r23, 0x1B04	; 0x801b04 <__iob+0x3>
    57ae:	db 01       	movw	r26, r22
    57b0:	18 96       	adiw	r26, 0x08	; 8
    57b2:	ed 91       	ld	r30, X+
    57b4:	fc 91       	ld	r31, X
    57b6:	19 97       	sbiw	r26, 0x09	; 9
    57b8:	88 23       	and	r24, r24
    57ba:	31 f0       	breq	.+12     	; 0x57c8 <puts+0x44>
    57bc:	19 95       	eicall
    57be:	89 2b       	or	r24, r25
    57c0:	79 f3       	breq	.-34     	; 0x57a0 <puts+0x1c>
    57c2:	df ef       	ldi	r29, 0xFF	; 255
    57c4:	cf ef       	ldi	r28, 0xFF	; 255
    57c6:	ec cf       	rjmp	.-40     	; 0x57a0 <puts+0x1c>
    57c8:	8a e0       	ldi	r24, 0x0A	; 10
    57ca:	19 95       	eicall
    57cc:	89 2b       	or	r24, r25
    57ce:	19 f0       	breq	.+6      	; 0x57d6 <puts+0x52>
    57d0:	8f ef       	ldi	r24, 0xFF	; 255
    57d2:	9f ef       	ldi	r25, 0xFF	; 255
    57d4:	02 c0       	rjmp	.+4      	; 0x57da <puts+0x56>
    57d6:	8d 2f       	mov	r24, r29
    57d8:	9c 2f       	mov	r25, r28
    57da:	df 91       	pop	r29
    57dc:	cf 91       	pop	r28
    57de:	1f 91       	pop	r17
    57e0:	0f 91       	pop	r16
    57e2:	08 95       	ret

000057e4 <sprintf>:
    57e4:	0f 93       	push	r16
    57e6:	1f 93       	push	r17
    57e8:	cf 93       	push	r28
    57ea:	df 93       	push	r29
    57ec:	cd b7       	in	r28, 0x3d	; 61
    57ee:	de b7       	in	r29, 0x3e	; 62
    57f0:	2e 97       	sbiw	r28, 0x0e	; 14
    57f2:	0f b6       	in	r0, 0x3f	; 63
    57f4:	f8 94       	cli
    57f6:	de bf       	out	0x3e, r29	; 62
    57f8:	0f be       	out	0x3f, r0	; 63
    57fa:	cd bf       	out	0x3d, r28	; 61
    57fc:	0e 89       	ldd	r16, Y+22	; 0x16
    57fe:	1f 89       	ldd	r17, Y+23	; 0x17
    5800:	86 e0       	ldi	r24, 0x06	; 6
    5802:	8c 83       	std	Y+4, r24	; 0x04
    5804:	1a 83       	std	Y+2, r17	; 0x02
    5806:	09 83       	std	Y+1, r16	; 0x01
    5808:	8f ef       	ldi	r24, 0xFF	; 255
    580a:	9f e7       	ldi	r25, 0x7F	; 127
    580c:	9e 83       	std	Y+6, r25	; 0x06
    580e:	8d 83       	std	Y+5, r24	; 0x05
    5810:	ae 01       	movw	r20, r28
    5812:	46 5e       	subi	r20, 0xE6	; 230
    5814:	5f 4f       	sbci	r21, 0xFF	; 255
    5816:	68 8d       	ldd	r22, Y+24	; 0x18
    5818:	79 8d       	ldd	r23, Y+25	; 0x19
    581a:	ce 01       	movw	r24, r28
    581c:	01 96       	adiw	r24, 0x01	; 1
    581e:	10 d0       	rcall	.+32     	; 0x5840 <vfprintf>
    5820:	ef 81       	ldd	r30, Y+7	; 0x07
    5822:	f8 85       	ldd	r31, Y+8	; 0x08
    5824:	e0 0f       	add	r30, r16
    5826:	f1 1f       	adc	r31, r17
    5828:	10 82       	st	Z, r1
    582a:	2e 96       	adiw	r28, 0x0e	; 14
    582c:	0f b6       	in	r0, 0x3f	; 63
    582e:	f8 94       	cli
    5830:	de bf       	out	0x3e, r29	; 62
    5832:	0f be       	out	0x3f, r0	; 63
    5834:	cd bf       	out	0x3d, r28	; 61
    5836:	df 91       	pop	r29
    5838:	cf 91       	pop	r28
    583a:	1f 91       	pop	r17
    583c:	0f 91       	pop	r16
    583e:	08 95       	ret

00005840 <vfprintf>:
    5840:	2f 92       	push	r2
    5842:	3f 92       	push	r3
    5844:	4f 92       	push	r4
    5846:	5f 92       	push	r5
    5848:	6f 92       	push	r6
    584a:	7f 92       	push	r7
    584c:	8f 92       	push	r8
    584e:	9f 92       	push	r9
    5850:	af 92       	push	r10
    5852:	bf 92       	push	r11
    5854:	cf 92       	push	r12
    5856:	df 92       	push	r13
    5858:	ef 92       	push	r14
    585a:	ff 92       	push	r15
    585c:	0f 93       	push	r16
    585e:	1f 93       	push	r17
    5860:	cf 93       	push	r28
    5862:	df 93       	push	r29
    5864:	cd b7       	in	r28, 0x3d	; 61
    5866:	de b7       	in	r29, 0x3e	; 62
    5868:	2b 97       	sbiw	r28, 0x0b	; 11
    586a:	0f b6       	in	r0, 0x3f	; 63
    586c:	f8 94       	cli
    586e:	de bf       	out	0x3e, r29	; 62
    5870:	0f be       	out	0x3f, r0	; 63
    5872:	cd bf       	out	0x3d, r28	; 61
    5874:	6c 01       	movw	r12, r24
    5876:	7b 01       	movw	r14, r22
    5878:	8a 01       	movw	r16, r20
    587a:	fc 01       	movw	r30, r24
    587c:	17 82       	std	Z+7, r1	; 0x07
    587e:	16 82       	std	Z+6, r1	; 0x06
    5880:	83 81       	ldd	r24, Z+3	; 0x03
    5882:	81 ff       	sbrs	r24, 1
    5884:	bf c1       	rjmp	.+894    	; 0x5c04 <vfprintf+0x3c4>
    5886:	ce 01       	movw	r24, r28
    5888:	01 96       	adiw	r24, 0x01	; 1
    588a:	3c 01       	movw	r6, r24
    588c:	f6 01       	movw	r30, r12
    588e:	93 81       	ldd	r25, Z+3	; 0x03
    5890:	f7 01       	movw	r30, r14
    5892:	93 fd       	sbrc	r25, 3
    5894:	85 91       	lpm	r24, Z+
    5896:	93 ff       	sbrs	r25, 3
    5898:	81 91       	ld	r24, Z+
    589a:	7f 01       	movw	r14, r30
    589c:	88 23       	and	r24, r24
    589e:	09 f4       	brne	.+2      	; 0x58a2 <vfprintf+0x62>
    58a0:	ad c1       	rjmp	.+858    	; 0x5bfc <vfprintf+0x3bc>
    58a2:	85 32       	cpi	r24, 0x25	; 37
    58a4:	39 f4       	brne	.+14     	; 0x58b4 <vfprintf+0x74>
    58a6:	93 fd       	sbrc	r25, 3
    58a8:	85 91       	lpm	r24, Z+
    58aa:	93 ff       	sbrs	r25, 3
    58ac:	81 91       	ld	r24, Z+
    58ae:	7f 01       	movw	r14, r30
    58b0:	85 32       	cpi	r24, 0x25	; 37
    58b2:	21 f4       	brne	.+8      	; 0x58bc <vfprintf+0x7c>
    58b4:	b6 01       	movw	r22, r12
    58b6:	90 e0       	ldi	r25, 0x00	; 0
    58b8:	d6 d1       	rcall	.+940    	; 0x5c66 <fputc>
    58ba:	e8 cf       	rjmp	.-48     	; 0x588c <vfprintf+0x4c>
    58bc:	91 2c       	mov	r9, r1
    58be:	21 2c       	mov	r2, r1
    58c0:	31 2c       	mov	r3, r1
    58c2:	ff e1       	ldi	r31, 0x1F	; 31
    58c4:	f3 15       	cp	r31, r3
    58c6:	d8 f0       	brcs	.+54     	; 0x58fe <vfprintf+0xbe>
    58c8:	8b 32       	cpi	r24, 0x2B	; 43
    58ca:	79 f0       	breq	.+30     	; 0x58ea <vfprintf+0xaa>
    58cc:	38 f4       	brcc	.+14     	; 0x58dc <vfprintf+0x9c>
    58ce:	80 32       	cpi	r24, 0x20	; 32
    58d0:	79 f0       	breq	.+30     	; 0x58f0 <vfprintf+0xb0>
    58d2:	83 32       	cpi	r24, 0x23	; 35
    58d4:	a1 f4       	brne	.+40     	; 0x58fe <vfprintf+0xbe>
    58d6:	23 2d       	mov	r18, r3
    58d8:	20 61       	ori	r18, 0x10	; 16
    58da:	1d c0       	rjmp	.+58     	; 0x5916 <vfprintf+0xd6>
    58dc:	8d 32       	cpi	r24, 0x2D	; 45
    58de:	61 f0       	breq	.+24     	; 0x58f8 <vfprintf+0xb8>
    58e0:	80 33       	cpi	r24, 0x30	; 48
    58e2:	69 f4       	brne	.+26     	; 0x58fe <vfprintf+0xbe>
    58e4:	23 2d       	mov	r18, r3
    58e6:	21 60       	ori	r18, 0x01	; 1
    58e8:	16 c0       	rjmp	.+44     	; 0x5916 <vfprintf+0xd6>
    58ea:	83 2d       	mov	r24, r3
    58ec:	82 60       	ori	r24, 0x02	; 2
    58ee:	38 2e       	mov	r3, r24
    58f0:	e3 2d       	mov	r30, r3
    58f2:	e4 60       	ori	r30, 0x04	; 4
    58f4:	3e 2e       	mov	r3, r30
    58f6:	2a c0       	rjmp	.+84     	; 0x594c <vfprintf+0x10c>
    58f8:	f3 2d       	mov	r31, r3
    58fa:	f8 60       	ori	r31, 0x08	; 8
    58fc:	1d c0       	rjmp	.+58     	; 0x5938 <vfprintf+0xf8>
    58fe:	37 fc       	sbrc	r3, 7
    5900:	2d c0       	rjmp	.+90     	; 0x595c <vfprintf+0x11c>
    5902:	20 ed       	ldi	r18, 0xD0	; 208
    5904:	28 0f       	add	r18, r24
    5906:	2a 30       	cpi	r18, 0x0A	; 10
    5908:	40 f0       	brcs	.+16     	; 0x591a <vfprintf+0xda>
    590a:	8e 32       	cpi	r24, 0x2E	; 46
    590c:	b9 f4       	brne	.+46     	; 0x593c <vfprintf+0xfc>
    590e:	36 fc       	sbrc	r3, 6
    5910:	75 c1       	rjmp	.+746    	; 0x5bfc <vfprintf+0x3bc>
    5912:	23 2d       	mov	r18, r3
    5914:	20 64       	ori	r18, 0x40	; 64
    5916:	32 2e       	mov	r3, r18
    5918:	19 c0       	rjmp	.+50     	; 0x594c <vfprintf+0x10c>
    591a:	36 fe       	sbrs	r3, 6
    591c:	06 c0       	rjmp	.+12     	; 0x592a <vfprintf+0xea>
    591e:	8a e0       	ldi	r24, 0x0A	; 10
    5920:	98 9e       	mul	r9, r24
    5922:	20 0d       	add	r18, r0
    5924:	11 24       	eor	r1, r1
    5926:	92 2e       	mov	r9, r18
    5928:	11 c0       	rjmp	.+34     	; 0x594c <vfprintf+0x10c>
    592a:	ea e0       	ldi	r30, 0x0A	; 10
    592c:	2e 9e       	mul	r2, r30
    592e:	20 0d       	add	r18, r0
    5930:	11 24       	eor	r1, r1
    5932:	22 2e       	mov	r2, r18
    5934:	f3 2d       	mov	r31, r3
    5936:	f0 62       	ori	r31, 0x20	; 32
    5938:	3f 2e       	mov	r3, r31
    593a:	08 c0       	rjmp	.+16     	; 0x594c <vfprintf+0x10c>
    593c:	8c 36       	cpi	r24, 0x6C	; 108
    593e:	21 f4       	brne	.+8      	; 0x5948 <vfprintf+0x108>
    5940:	83 2d       	mov	r24, r3
    5942:	80 68       	ori	r24, 0x80	; 128
    5944:	38 2e       	mov	r3, r24
    5946:	02 c0       	rjmp	.+4      	; 0x594c <vfprintf+0x10c>
    5948:	88 36       	cpi	r24, 0x68	; 104
    594a:	41 f4       	brne	.+16     	; 0x595c <vfprintf+0x11c>
    594c:	f7 01       	movw	r30, r14
    594e:	93 fd       	sbrc	r25, 3
    5950:	85 91       	lpm	r24, Z+
    5952:	93 ff       	sbrs	r25, 3
    5954:	81 91       	ld	r24, Z+
    5956:	7f 01       	movw	r14, r30
    5958:	81 11       	cpse	r24, r1
    595a:	b3 cf       	rjmp	.-154    	; 0x58c2 <vfprintf+0x82>
    595c:	98 2f       	mov	r25, r24
    595e:	9f 7d       	andi	r25, 0xDF	; 223
    5960:	95 54       	subi	r25, 0x45	; 69
    5962:	93 30       	cpi	r25, 0x03	; 3
    5964:	28 f4       	brcc	.+10     	; 0x5970 <vfprintf+0x130>
    5966:	0c 5f       	subi	r16, 0xFC	; 252
    5968:	1f 4f       	sbci	r17, 0xFF	; 255
    596a:	9f e3       	ldi	r25, 0x3F	; 63
    596c:	99 83       	std	Y+1, r25	; 0x01
    596e:	0d c0       	rjmp	.+26     	; 0x598a <vfprintf+0x14a>
    5970:	83 36       	cpi	r24, 0x63	; 99
    5972:	31 f0       	breq	.+12     	; 0x5980 <vfprintf+0x140>
    5974:	83 37       	cpi	r24, 0x73	; 115
    5976:	71 f0       	breq	.+28     	; 0x5994 <vfprintf+0x154>
    5978:	83 35       	cpi	r24, 0x53	; 83
    597a:	09 f0       	breq	.+2      	; 0x597e <vfprintf+0x13e>
    597c:	55 c0       	rjmp	.+170    	; 0x5a28 <vfprintf+0x1e8>
    597e:	20 c0       	rjmp	.+64     	; 0x59c0 <vfprintf+0x180>
    5980:	f8 01       	movw	r30, r16
    5982:	80 81       	ld	r24, Z
    5984:	89 83       	std	Y+1, r24	; 0x01
    5986:	0e 5f       	subi	r16, 0xFE	; 254
    5988:	1f 4f       	sbci	r17, 0xFF	; 255
    598a:	88 24       	eor	r8, r8
    598c:	83 94       	inc	r8
    598e:	91 2c       	mov	r9, r1
    5990:	53 01       	movw	r10, r6
    5992:	12 c0       	rjmp	.+36     	; 0x59b8 <vfprintf+0x178>
    5994:	28 01       	movw	r4, r16
    5996:	f2 e0       	ldi	r31, 0x02	; 2
    5998:	4f 0e       	add	r4, r31
    599a:	51 1c       	adc	r5, r1
    599c:	f8 01       	movw	r30, r16
    599e:	a0 80       	ld	r10, Z
    59a0:	b1 80       	ldd	r11, Z+1	; 0x01
    59a2:	36 fe       	sbrs	r3, 6
    59a4:	03 c0       	rjmp	.+6      	; 0x59ac <vfprintf+0x16c>
    59a6:	69 2d       	mov	r22, r9
    59a8:	70 e0       	ldi	r23, 0x00	; 0
    59aa:	02 c0       	rjmp	.+4      	; 0x59b0 <vfprintf+0x170>
    59ac:	6f ef       	ldi	r22, 0xFF	; 255
    59ae:	7f ef       	ldi	r23, 0xFF	; 255
    59b0:	c5 01       	movw	r24, r10
    59b2:	4e d1       	rcall	.+668    	; 0x5c50 <strnlen>
    59b4:	4c 01       	movw	r8, r24
    59b6:	82 01       	movw	r16, r4
    59b8:	f3 2d       	mov	r31, r3
    59ba:	ff 77       	andi	r31, 0x7F	; 127
    59bc:	3f 2e       	mov	r3, r31
    59be:	15 c0       	rjmp	.+42     	; 0x59ea <vfprintf+0x1aa>
    59c0:	28 01       	movw	r4, r16
    59c2:	22 e0       	ldi	r18, 0x02	; 2
    59c4:	42 0e       	add	r4, r18
    59c6:	51 1c       	adc	r5, r1
    59c8:	f8 01       	movw	r30, r16
    59ca:	a0 80       	ld	r10, Z
    59cc:	b1 80       	ldd	r11, Z+1	; 0x01
    59ce:	36 fe       	sbrs	r3, 6
    59d0:	03 c0       	rjmp	.+6      	; 0x59d8 <vfprintf+0x198>
    59d2:	69 2d       	mov	r22, r9
    59d4:	70 e0       	ldi	r23, 0x00	; 0
    59d6:	02 c0       	rjmp	.+4      	; 0x59dc <vfprintf+0x19c>
    59d8:	6f ef       	ldi	r22, 0xFF	; 255
    59da:	7f ef       	ldi	r23, 0xFF	; 255
    59dc:	c5 01       	movw	r24, r10
    59de:	2d d1       	rcall	.+602    	; 0x5c3a <strnlen_P>
    59e0:	4c 01       	movw	r8, r24
    59e2:	f3 2d       	mov	r31, r3
    59e4:	f0 68       	ori	r31, 0x80	; 128
    59e6:	3f 2e       	mov	r3, r31
    59e8:	82 01       	movw	r16, r4
    59ea:	33 fc       	sbrc	r3, 3
    59ec:	19 c0       	rjmp	.+50     	; 0x5a20 <vfprintf+0x1e0>
    59ee:	82 2d       	mov	r24, r2
    59f0:	90 e0       	ldi	r25, 0x00	; 0
    59f2:	88 16       	cp	r8, r24
    59f4:	99 06       	cpc	r9, r25
    59f6:	a0 f4       	brcc	.+40     	; 0x5a20 <vfprintf+0x1e0>
    59f8:	b6 01       	movw	r22, r12
    59fa:	80 e2       	ldi	r24, 0x20	; 32
    59fc:	90 e0       	ldi	r25, 0x00	; 0
    59fe:	33 d1       	rcall	.+614    	; 0x5c66 <fputc>
    5a00:	2a 94       	dec	r2
    5a02:	f5 cf       	rjmp	.-22     	; 0x59ee <vfprintf+0x1ae>
    5a04:	f5 01       	movw	r30, r10
    5a06:	37 fc       	sbrc	r3, 7
    5a08:	85 91       	lpm	r24, Z+
    5a0a:	37 fe       	sbrs	r3, 7
    5a0c:	81 91       	ld	r24, Z+
    5a0e:	5f 01       	movw	r10, r30
    5a10:	b6 01       	movw	r22, r12
    5a12:	90 e0       	ldi	r25, 0x00	; 0
    5a14:	28 d1       	rcall	.+592    	; 0x5c66 <fputc>
    5a16:	21 10       	cpse	r2, r1
    5a18:	2a 94       	dec	r2
    5a1a:	21 e0       	ldi	r18, 0x01	; 1
    5a1c:	82 1a       	sub	r8, r18
    5a1e:	91 08       	sbc	r9, r1
    5a20:	81 14       	cp	r8, r1
    5a22:	91 04       	cpc	r9, r1
    5a24:	79 f7       	brne	.-34     	; 0x5a04 <vfprintf+0x1c4>
    5a26:	e1 c0       	rjmp	.+450    	; 0x5bea <vfprintf+0x3aa>
    5a28:	84 36       	cpi	r24, 0x64	; 100
    5a2a:	11 f0       	breq	.+4      	; 0x5a30 <vfprintf+0x1f0>
    5a2c:	89 36       	cpi	r24, 0x69	; 105
    5a2e:	39 f5       	brne	.+78     	; 0x5a7e <vfprintf+0x23e>
    5a30:	f8 01       	movw	r30, r16
    5a32:	37 fe       	sbrs	r3, 7
    5a34:	07 c0       	rjmp	.+14     	; 0x5a44 <vfprintf+0x204>
    5a36:	60 81       	ld	r22, Z
    5a38:	71 81       	ldd	r23, Z+1	; 0x01
    5a3a:	82 81       	ldd	r24, Z+2	; 0x02
    5a3c:	93 81       	ldd	r25, Z+3	; 0x03
    5a3e:	0c 5f       	subi	r16, 0xFC	; 252
    5a40:	1f 4f       	sbci	r17, 0xFF	; 255
    5a42:	08 c0       	rjmp	.+16     	; 0x5a54 <vfprintf+0x214>
    5a44:	60 81       	ld	r22, Z
    5a46:	71 81       	ldd	r23, Z+1	; 0x01
    5a48:	07 2e       	mov	r0, r23
    5a4a:	00 0c       	add	r0, r0
    5a4c:	88 0b       	sbc	r24, r24
    5a4e:	99 0b       	sbc	r25, r25
    5a50:	0e 5f       	subi	r16, 0xFE	; 254
    5a52:	1f 4f       	sbci	r17, 0xFF	; 255
    5a54:	f3 2d       	mov	r31, r3
    5a56:	ff 76       	andi	r31, 0x6F	; 111
    5a58:	3f 2e       	mov	r3, r31
    5a5a:	97 ff       	sbrs	r25, 7
    5a5c:	09 c0       	rjmp	.+18     	; 0x5a70 <vfprintf+0x230>
    5a5e:	90 95       	com	r25
    5a60:	80 95       	com	r24
    5a62:	70 95       	com	r23
    5a64:	61 95       	neg	r22
    5a66:	7f 4f       	sbci	r23, 0xFF	; 255
    5a68:	8f 4f       	sbci	r24, 0xFF	; 255
    5a6a:	9f 4f       	sbci	r25, 0xFF	; 255
    5a6c:	f0 68       	ori	r31, 0x80	; 128
    5a6e:	3f 2e       	mov	r3, r31
    5a70:	2a e0       	ldi	r18, 0x0A	; 10
    5a72:	30 e0       	ldi	r19, 0x00	; 0
    5a74:	a3 01       	movw	r20, r6
    5a76:	33 d1       	rcall	.+614    	; 0x5cde <__ultoa_invert>
    5a78:	88 2e       	mov	r8, r24
    5a7a:	86 18       	sub	r8, r6
    5a7c:	44 c0       	rjmp	.+136    	; 0x5b06 <vfprintf+0x2c6>
    5a7e:	85 37       	cpi	r24, 0x75	; 117
    5a80:	31 f4       	brne	.+12     	; 0x5a8e <vfprintf+0x24e>
    5a82:	23 2d       	mov	r18, r3
    5a84:	2f 7e       	andi	r18, 0xEF	; 239
    5a86:	b2 2e       	mov	r11, r18
    5a88:	2a e0       	ldi	r18, 0x0A	; 10
    5a8a:	30 e0       	ldi	r19, 0x00	; 0
    5a8c:	25 c0       	rjmp	.+74     	; 0x5ad8 <vfprintf+0x298>
    5a8e:	93 2d       	mov	r25, r3
    5a90:	99 7f       	andi	r25, 0xF9	; 249
    5a92:	b9 2e       	mov	r11, r25
    5a94:	8f 36       	cpi	r24, 0x6F	; 111
    5a96:	c1 f0       	breq	.+48     	; 0x5ac8 <vfprintf+0x288>
    5a98:	18 f4       	brcc	.+6      	; 0x5aa0 <vfprintf+0x260>
    5a9a:	88 35       	cpi	r24, 0x58	; 88
    5a9c:	79 f0       	breq	.+30     	; 0x5abc <vfprintf+0x27c>
    5a9e:	ae c0       	rjmp	.+348    	; 0x5bfc <vfprintf+0x3bc>
    5aa0:	80 37       	cpi	r24, 0x70	; 112
    5aa2:	19 f0       	breq	.+6      	; 0x5aaa <vfprintf+0x26a>
    5aa4:	88 37       	cpi	r24, 0x78	; 120
    5aa6:	21 f0       	breq	.+8      	; 0x5ab0 <vfprintf+0x270>
    5aa8:	a9 c0       	rjmp	.+338    	; 0x5bfc <vfprintf+0x3bc>
    5aaa:	e9 2f       	mov	r30, r25
    5aac:	e0 61       	ori	r30, 0x10	; 16
    5aae:	be 2e       	mov	r11, r30
    5ab0:	b4 fe       	sbrs	r11, 4
    5ab2:	0d c0       	rjmp	.+26     	; 0x5ace <vfprintf+0x28e>
    5ab4:	fb 2d       	mov	r31, r11
    5ab6:	f4 60       	ori	r31, 0x04	; 4
    5ab8:	bf 2e       	mov	r11, r31
    5aba:	09 c0       	rjmp	.+18     	; 0x5ace <vfprintf+0x28e>
    5abc:	34 fe       	sbrs	r3, 4
    5abe:	0a c0       	rjmp	.+20     	; 0x5ad4 <vfprintf+0x294>
    5ac0:	29 2f       	mov	r18, r25
    5ac2:	26 60       	ori	r18, 0x06	; 6
    5ac4:	b2 2e       	mov	r11, r18
    5ac6:	06 c0       	rjmp	.+12     	; 0x5ad4 <vfprintf+0x294>
    5ac8:	28 e0       	ldi	r18, 0x08	; 8
    5aca:	30 e0       	ldi	r19, 0x00	; 0
    5acc:	05 c0       	rjmp	.+10     	; 0x5ad8 <vfprintf+0x298>
    5ace:	20 e1       	ldi	r18, 0x10	; 16
    5ad0:	30 e0       	ldi	r19, 0x00	; 0
    5ad2:	02 c0       	rjmp	.+4      	; 0x5ad8 <vfprintf+0x298>
    5ad4:	20 e1       	ldi	r18, 0x10	; 16
    5ad6:	32 e0       	ldi	r19, 0x02	; 2
    5ad8:	f8 01       	movw	r30, r16
    5ada:	b7 fe       	sbrs	r11, 7
    5adc:	07 c0       	rjmp	.+14     	; 0x5aec <vfprintf+0x2ac>
    5ade:	60 81       	ld	r22, Z
    5ae0:	71 81       	ldd	r23, Z+1	; 0x01
    5ae2:	82 81       	ldd	r24, Z+2	; 0x02
    5ae4:	93 81       	ldd	r25, Z+3	; 0x03
    5ae6:	0c 5f       	subi	r16, 0xFC	; 252
    5ae8:	1f 4f       	sbci	r17, 0xFF	; 255
    5aea:	06 c0       	rjmp	.+12     	; 0x5af8 <vfprintf+0x2b8>
    5aec:	60 81       	ld	r22, Z
    5aee:	71 81       	ldd	r23, Z+1	; 0x01
    5af0:	80 e0       	ldi	r24, 0x00	; 0
    5af2:	90 e0       	ldi	r25, 0x00	; 0
    5af4:	0e 5f       	subi	r16, 0xFE	; 254
    5af6:	1f 4f       	sbci	r17, 0xFF	; 255
    5af8:	a3 01       	movw	r20, r6
    5afa:	f1 d0       	rcall	.+482    	; 0x5cde <__ultoa_invert>
    5afc:	88 2e       	mov	r8, r24
    5afe:	86 18       	sub	r8, r6
    5b00:	fb 2d       	mov	r31, r11
    5b02:	ff 77       	andi	r31, 0x7F	; 127
    5b04:	3f 2e       	mov	r3, r31
    5b06:	36 fe       	sbrs	r3, 6
    5b08:	0d c0       	rjmp	.+26     	; 0x5b24 <vfprintf+0x2e4>
    5b0a:	23 2d       	mov	r18, r3
    5b0c:	2e 7f       	andi	r18, 0xFE	; 254
    5b0e:	a2 2e       	mov	r10, r18
    5b10:	89 14       	cp	r8, r9
    5b12:	58 f4       	brcc	.+22     	; 0x5b2a <vfprintf+0x2ea>
    5b14:	34 fe       	sbrs	r3, 4
    5b16:	0b c0       	rjmp	.+22     	; 0x5b2e <vfprintf+0x2ee>
    5b18:	32 fc       	sbrc	r3, 2
    5b1a:	09 c0       	rjmp	.+18     	; 0x5b2e <vfprintf+0x2ee>
    5b1c:	83 2d       	mov	r24, r3
    5b1e:	8e 7e       	andi	r24, 0xEE	; 238
    5b20:	a8 2e       	mov	r10, r24
    5b22:	05 c0       	rjmp	.+10     	; 0x5b2e <vfprintf+0x2ee>
    5b24:	b8 2c       	mov	r11, r8
    5b26:	a3 2c       	mov	r10, r3
    5b28:	03 c0       	rjmp	.+6      	; 0x5b30 <vfprintf+0x2f0>
    5b2a:	b8 2c       	mov	r11, r8
    5b2c:	01 c0       	rjmp	.+2      	; 0x5b30 <vfprintf+0x2f0>
    5b2e:	b9 2c       	mov	r11, r9
    5b30:	a4 fe       	sbrs	r10, 4
    5b32:	0f c0       	rjmp	.+30     	; 0x5b52 <vfprintf+0x312>
    5b34:	fe 01       	movw	r30, r28
    5b36:	e8 0d       	add	r30, r8
    5b38:	f1 1d       	adc	r31, r1
    5b3a:	80 81       	ld	r24, Z
    5b3c:	80 33       	cpi	r24, 0x30	; 48
    5b3e:	21 f4       	brne	.+8      	; 0x5b48 <vfprintf+0x308>
    5b40:	9a 2d       	mov	r25, r10
    5b42:	99 7e       	andi	r25, 0xE9	; 233
    5b44:	a9 2e       	mov	r10, r25
    5b46:	09 c0       	rjmp	.+18     	; 0x5b5a <vfprintf+0x31a>
    5b48:	a2 fe       	sbrs	r10, 2
    5b4a:	06 c0       	rjmp	.+12     	; 0x5b58 <vfprintf+0x318>
    5b4c:	b3 94       	inc	r11
    5b4e:	b3 94       	inc	r11
    5b50:	04 c0       	rjmp	.+8      	; 0x5b5a <vfprintf+0x31a>
    5b52:	8a 2d       	mov	r24, r10
    5b54:	86 78       	andi	r24, 0x86	; 134
    5b56:	09 f0       	breq	.+2      	; 0x5b5a <vfprintf+0x31a>
    5b58:	b3 94       	inc	r11
    5b5a:	a3 fc       	sbrc	r10, 3
    5b5c:	10 c0       	rjmp	.+32     	; 0x5b7e <vfprintf+0x33e>
    5b5e:	a0 fe       	sbrs	r10, 0
    5b60:	06 c0       	rjmp	.+12     	; 0x5b6e <vfprintf+0x32e>
    5b62:	b2 14       	cp	r11, r2
    5b64:	80 f4       	brcc	.+32     	; 0x5b86 <vfprintf+0x346>
    5b66:	28 0c       	add	r2, r8
    5b68:	92 2c       	mov	r9, r2
    5b6a:	9b 18       	sub	r9, r11
    5b6c:	0d c0       	rjmp	.+26     	; 0x5b88 <vfprintf+0x348>
    5b6e:	b2 14       	cp	r11, r2
    5b70:	58 f4       	brcc	.+22     	; 0x5b88 <vfprintf+0x348>
    5b72:	b6 01       	movw	r22, r12
    5b74:	80 e2       	ldi	r24, 0x20	; 32
    5b76:	90 e0       	ldi	r25, 0x00	; 0
    5b78:	76 d0       	rcall	.+236    	; 0x5c66 <fputc>
    5b7a:	b3 94       	inc	r11
    5b7c:	f8 cf       	rjmp	.-16     	; 0x5b6e <vfprintf+0x32e>
    5b7e:	b2 14       	cp	r11, r2
    5b80:	18 f4       	brcc	.+6      	; 0x5b88 <vfprintf+0x348>
    5b82:	2b 18       	sub	r2, r11
    5b84:	02 c0       	rjmp	.+4      	; 0x5b8a <vfprintf+0x34a>
    5b86:	98 2c       	mov	r9, r8
    5b88:	21 2c       	mov	r2, r1
    5b8a:	a4 fe       	sbrs	r10, 4
    5b8c:	0f c0       	rjmp	.+30     	; 0x5bac <vfprintf+0x36c>
    5b8e:	b6 01       	movw	r22, r12
    5b90:	80 e3       	ldi	r24, 0x30	; 48
    5b92:	90 e0       	ldi	r25, 0x00	; 0
    5b94:	68 d0       	rcall	.+208    	; 0x5c66 <fputc>
    5b96:	a2 fe       	sbrs	r10, 2
    5b98:	16 c0       	rjmp	.+44     	; 0x5bc6 <vfprintf+0x386>
    5b9a:	a1 fc       	sbrc	r10, 1
    5b9c:	03 c0       	rjmp	.+6      	; 0x5ba4 <vfprintf+0x364>
    5b9e:	88 e7       	ldi	r24, 0x78	; 120
    5ba0:	90 e0       	ldi	r25, 0x00	; 0
    5ba2:	02 c0       	rjmp	.+4      	; 0x5ba8 <vfprintf+0x368>
    5ba4:	88 e5       	ldi	r24, 0x58	; 88
    5ba6:	90 e0       	ldi	r25, 0x00	; 0
    5ba8:	b6 01       	movw	r22, r12
    5baa:	0c c0       	rjmp	.+24     	; 0x5bc4 <vfprintf+0x384>
    5bac:	8a 2d       	mov	r24, r10
    5bae:	86 78       	andi	r24, 0x86	; 134
    5bb0:	51 f0       	breq	.+20     	; 0x5bc6 <vfprintf+0x386>
    5bb2:	a1 fe       	sbrs	r10, 1
    5bb4:	02 c0       	rjmp	.+4      	; 0x5bba <vfprintf+0x37a>
    5bb6:	8b e2       	ldi	r24, 0x2B	; 43
    5bb8:	01 c0       	rjmp	.+2      	; 0x5bbc <vfprintf+0x37c>
    5bba:	80 e2       	ldi	r24, 0x20	; 32
    5bbc:	a7 fc       	sbrc	r10, 7
    5bbe:	8d e2       	ldi	r24, 0x2D	; 45
    5bc0:	b6 01       	movw	r22, r12
    5bc2:	90 e0       	ldi	r25, 0x00	; 0
    5bc4:	50 d0       	rcall	.+160    	; 0x5c66 <fputc>
    5bc6:	89 14       	cp	r8, r9
    5bc8:	30 f4       	brcc	.+12     	; 0x5bd6 <vfprintf+0x396>
    5bca:	b6 01       	movw	r22, r12
    5bcc:	80 e3       	ldi	r24, 0x30	; 48
    5bce:	90 e0       	ldi	r25, 0x00	; 0
    5bd0:	4a d0       	rcall	.+148    	; 0x5c66 <fputc>
    5bd2:	9a 94       	dec	r9
    5bd4:	f8 cf       	rjmp	.-16     	; 0x5bc6 <vfprintf+0x386>
    5bd6:	8a 94       	dec	r8
    5bd8:	f3 01       	movw	r30, r6
    5bda:	e8 0d       	add	r30, r8
    5bdc:	f1 1d       	adc	r31, r1
    5bde:	80 81       	ld	r24, Z
    5be0:	b6 01       	movw	r22, r12
    5be2:	90 e0       	ldi	r25, 0x00	; 0
    5be4:	40 d0       	rcall	.+128    	; 0x5c66 <fputc>
    5be6:	81 10       	cpse	r8, r1
    5be8:	f6 cf       	rjmp	.-20     	; 0x5bd6 <vfprintf+0x396>
    5bea:	22 20       	and	r2, r2
    5bec:	09 f4       	brne	.+2      	; 0x5bf0 <vfprintf+0x3b0>
    5bee:	4e ce       	rjmp	.-868    	; 0x588c <vfprintf+0x4c>
    5bf0:	b6 01       	movw	r22, r12
    5bf2:	80 e2       	ldi	r24, 0x20	; 32
    5bf4:	90 e0       	ldi	r25, 0x00	; 0
    5bf6:	37 d0       	rcall	.+110    	; 0x5c66 <fputc>
    5bf8:	2a 94       	dec	r2
    5bfa:	f7 cf       	rjmp	.-18     	; 0x5bea <vfprintf+0x3aa>
    5bfc:	f6 01       	movw	r30, r12
    5bfe:	86 81       	ldd	r24, Z+6	; 0x06
    5c00:	97 81       	ldd	r25, Z+7	; 0x07
    5c02:	02 c0       	rjmp	.+4      	; 0x5c08 <vfprintf+0x3c8>
    5c04:	8f ef       	ldi	r24, 0xFF	; 255
    5c06:	9f ef       	ldi	r25, 0xFF	; 255
    5c08:	2b 96       	adiw	r28, 0x0b	; 11
    5c0a:	0f b6       	in	r0, 0x3f	; 63
    5c0c:	f8 94       	cli
    5c0e:	de bf       	out	0x3e, r29	; 62
    5c10:	0f be       	out	0x3f, r0	; 63
    5c12:	cd bf       	out	0x3d, r28	; 61
    5c14:	df 91       	pop	r29
    5c16:	cf 91       	pop	r28
    5c18:	1f 91       	pop	r17
    5c1a:	0f 91       	pop	r16
    5c1c:	ff 90       	pop	r15
    5c1e:	ef 90       	pop	r14
    5c20:	df 90       	pop	r13
    5c22:	cf 90       	pop	r12
    5c24:	bf 90       	pop	r11
    5c26:	af 90       	pop	r10
    5c28:	9f 90       	pop	r9
    5c2a:	8f 90       	pop	r8
    5c2c:	7f 90       	pop	r7
    5c2e:	6f 90       	pop	r6
    5c30:	5f 90       	pop	r5
    5c32:	4f 90       	pop	r4
    5c34:	3f 90       	pop	r3
    5c36:	2f 90       	pop	r2
    5c38:	08 95       	ret

00005c3a <strnlen_P>:
    5c3a:	fc 01       	movw	r30, r24
    5c3c:	05 90       	lpm	r0, Z+
    5c3e:	61 50       	subi	r22, 0x01	; 1
    5c40:	70 40       	sbci	r23, 0x00	; 0
    5c42:	01 10       	cpse	r0, r1
    5c44:	d8 f7       	brcc	.-10     	; 0x5c3c <strnlen_P+0x2>
    5c46:	80 95       	com	r24
    5c48:	90 95       	com	r25
    5c4a:	8e 0f       	add	r24, r30
    5c4c:	9f 1f       	adc	r25, r31
    5c4e:	08 95       	ret

00005c50 <strnlen>:
    5c50:	fc 01       	movw	r30, r24
    5c52:	61 50       	subi	r22, 0x01	; 1
    5c54:	70 40       	sbci	r23, 0x00	; 0
    5c56:	01 90       	ld	r0, Z+
    5c58:	01 10       	cpse	r0, r1
    5c5a:	d8 f7       	brcc	.-10     	; 0x5c52 <strnlen+0x2>
    5c5c:	80 95       	com	r24
    5c5e:	90 95       	com	r25
    5c60:	8e 0f       	add	r24, r30
    5c62:	9f 1f       	adc	r25, r31
    5c64:	08 95       	ret

00005c66 <fputc>:
    5c66:	0f 93       	push	r16
    5c68:	1f 93       	push	r17
    5c6a:	cf 93       	push	r28
    5c6c:	df 93       	push	r29
    5c6e:	fb 01       	movw	r30, r22
    5c70:	23 81       	ldd	r18, Z+3	; 0x03
    5c72:	21 fd       	sbrc	r18, 1
    5c74:	03 c0       	rjmp	.+6      	; 0x5c7c <fputc+0x16>
    5c76:	8f ef       	ldi	r24, 0xFF	; 255
    5c78:	9f ef       	ldi	r25, 0xFF	; 255
    5c7a:	2c c0       	rjmp	.+88     	; 0x5cd4 <fputc+0x6e>
    5c7c:	22 ff       	sbrs	r18, 2
    5c7e:	16 c0       	rjmp	.+44     	; 0x5cac <fputc+0x46>
    5c80:	46 81       	ldd	r20, Z+6	; 0x06
    5c82:	57 81       	ldd	r21, Z+7	; 0x07
    5c84:	24 81       	ldd	r18, Z+4	; 0x04
    5c86:	35 81       	ldd	r19, Z+5	; 0x05
    5c88:	42 17       	cp	r20, r18
    5c8a:	53 07       	cpc	r21, r19
    5c8c:	44 f4       	brge	.+16     	; 0x5c9e <fputc+0x38>
    5c8e:	a0 81       	ld	r26, Z
    5c90:	b1 81       	ldd	r27, Z+1	; 0x01
    5c92:	9d 01       	movw	r18, r26
    5c94:	2f 5f       	subi	r18, 0xFF	; 255
    5c96:	3f 4f       	sbci	r19, 0xFF	; 255
    5c98:	31 83       	std	Z+1, r19	; 0x01
    5c9a:	20 83       	st	Z, r18
    5c9c:	8c 93       	st	X, r24
    5c9e:	26 81       	ldd	r18, Z+6	; 0x06
    5ca0:	37 81       	ldd	r19, Z+7	; 0x07
    5ca2:	2f 5f       	subi	r18, 0xFF	; 255
    5ca4:	3f 4f       	sbci	r19, 0xFF	; 255
    5ca6:	37 83       	std	Z+7, r19	; 0x07
    5ca8:	26 83       	std	Z+6, r18	; 0x06
    5caa:	14 c0       	rjmp	.+40     	; 0x5cd4 <fputc+0x6e>
    5cac:	8b 01       	movw	r16, r22
    5cae:	ec 01       	movw	r28, r24
    5cb0:	fb 01       	movw	r30, r22
    5cb2:	00 84       	ldd	r0, Z+8	; 0x08
    5cb4:	f1 85       	ldd	r31, Z+9	; 0x09
    5cb6:	e0 2d       	mov	r30, r0
    5cb8:	19 95       	eicall
    5cba:	89 2b       	or	r24, r25
    5cbc:	e1 f6       	brne	.-72     	; 0x5c76 <fputc+0x10>
    5cbe:	d8 01       	movw	r26, r16
    5cc0:	16 96       	adiw	r26, 0x06	; 6
    5cc2:	8d 91       	ld	r24, X+
    5cc4:	9c 91       	ld	r25, X
    5cc6:	17 97       	sbiw	r26, 0x07	; 7
    5cc8:	01 96       	adiw	r24, 0x01	; 1
    5cca:	17 96       	adiw	r26, 0x07	; 7
    5ccc:	9c 93       	st	X, r25
    5cce:	8e 93       	st	-X, r24
    5cd0:	16 97       	sbiw	r26, 0x06	; 6
    5cd2:	ce 01       	movw	r24, r28
    5cd4:	df 91       	pop	r29
    5cd6:	cf 91       	pop	r28
    5cd8:	1f 91       	pop	r17
    5cda:	0f 91       	pop	r16
    5cdc:	08 95       	ret

00005cde <__ultoa_invert>:
    5cde:	fa 01       	movw	r30, r20
    5ce0:	aa 27       	eor	r26, r26
    5ce2:	28 30       	cpi	r18, 0x08	; 8
    5ce4:	51 f1       	breq	.+84     	; 0x5d3a <__ultoa_invert+0x5c>
    5ce6:	20 31       	cpi	r18, 0x10	; 16
    5ce8:	81 f1       	breq	.+96     	; 0x5d4a <__ultoa_invert+0x6c>
    5cea:	e8 94       	clt
    5cec:	6f 93       	push	r22
    5cee:	6e 7f       	andi	r22, 0xFE	; 254
    5cf0:	6e 5f       	subi	r22, 0xFE	; 254
    5cf2:	7f 4f       	sbci	r23, 0xFF	; 255
    5cf4:	8f 4f       	sbci	r24, 0xFF	; 255
    5cf6:	9f 4f       	sbci	r25, 0xFF	; 255
    5cf8:	af 4f       	sbci	r26, 0xFF	; 255
    5cfa:	b1 e0       	ldi	r27, 0x01	; 1
    5cfc:	3e d0       	rcall	.+124    	; 0x5d7a <__ultoa_invert+0x9c>
    5cfe:	b4 e0       	ldi	r27, 0x04	; 4
    5d00:	3c d0       	rcall	.+120    	; 0x5d7a <__ultoa_invert+0x9c>
    5d02:	67 0f       	add	r22, r23
    5d04:	78 1f       	adc	r23, r24
    5d06:	89 1f       	adc	r24, r25
    5d08:	9a 1f       	adc	r25, r26
    5d0a:	a1 1d       	adc	r26, r1
    5d0c:	68 0f       	add	r22, r24
    5d0e:	79 1f       	adc	r23, r25
    5d10:	8a 1f       	adc	r24, r26
    5d12:	91 1d       	adc	r25, r1
    5d14:	a1 1d       	adc	r26, r1
    5d16:	6a 0f       	add	r22, r26
    5d18:	71 1d       	adc	r23, r1
    5d1a:	81 1d       	adc	r24, r1
    5d1c:	91 1d       	adc	r25, r1
    5d1e:	a1 1d       	adc	r26, r1
    5d20:	20 d0       	rcall	.+64     	; 0x5d62 <__ultoa_invert+0x84>
    5d22:	09 f4       	brne	.+2      	; 0x5d26 <__ultoa_invert+0x48>
    5d24:	68 94       	set
    5d26:	3f 91       	pop	r19
    5d28:	2a e0       	ldi	r18, 0x0A	; 10
    5d2a:	26 9f       	mul	r18, r22
    5d2c:	11 24       	eor	r1, r1
    5d2e:	30 19       	sub	r19, r0
    5d30:	30 5d       	subi	r19, 0xD0	; 208
    5d32:	31 93       	st	Z+, r19
    5d34:	de f6       	brtc	.-74     	; 0x5cec <__ultoa_invert+0xe>
    5d36:	cf 01       	movw	r24, r30
    5d38:	08 95       	ret
    5d3a:	46 2f       	mov	r20, r22
    5d3c:	47 70       	andi	r20, 0x07	; 7
    5d3e:	40 5d       	subi	r20, 0xD0	; 208
    5d40:	41 93       	st	Z+, r20
    5d42:	b3 e0       	ldi	r27, 0x03	; 3
    5d44:	0f d0       	rcall	.+30     	; 0x5d64 <__ultoa_invert+0x86>
    5d46:	c9 f7       	brne	.-14     	; 0x5d3a <__ultoa_invert+0x5c>
    5d48:	f6 cf       	rjmp	.-20     	; 0x5d36 <__ultoa_invert+0x58>
    5d4a:	46 2f       	mov	r20, r22
    5d4c:	4f 70       	andi	r20, 0x0F	; 15
    5d4e:	40 5d       	subi	r20, 0xD0	; 208
    5d50:	4a 33       	cpi	r20, 0x3A	; 58
    5d52:	18 f0       	brcs	.+6      	; 0x5d5a <__ultoa_invert+0x7c>
    5d54:	49 5d       	subi	r20, 0xD9	; 217
    5d56:	31 fd       	sbrc	r19, 1
    5d58:	40 52       	subi	r20, 0x20	; 32
    5d5a:	41 93       	st	Z+, r20
    5d5c:	02 d0       	rcall	.+4      	; 0x5d62 <__ultoa_invert+0x84>
    5d5e:	a9 f7       	brne	.-22     	; 0x5d4a <__ultoa_invert+0x6c>
    5d60:	ea cf       	rjmp	.-44     	; 0x5d36 <__ultoa_invert+0x58>
    5d62:	b4 e0       	ldi	r27, 0x04	; 4
    5d64:	a6 95       	lsr	r26
    5d66:	97 95       	ror	r25
    5d68:	87 95       	ror	r24
    5d6a:	77 95       	ror	r23
    5d6c:	67 95       	ror	r22
    5d6e:	ba 95       	dec	r27
    5d70:	c9 f7       	brne	.-14     	; 0x5d64 <__ultoa_invert+0x86>
    5d72:	00 97       	sbiw	r24, 0x00	; 0
    5d74:	61 05       	cpc	r22, r1
    5d76:	71 05       	cpc	r23, r1
    5d78:	08 95       	ret
    5d7a:	9b 01       	movw	r18, r22
    5d7c:	ac 01       	movw	r20, r24
    5d7e:	0a 2e       	mov	r0, r26
    5d80:	06 94       	lsr	r0
    5d82:	57 95       	ror	r21
    5d84:	47 95       	ror	r20
    5d86:	37 95       	ror	r19
    5d88:	27 95       	ror	r18
    5d8a:	ba 95       	dec	r27
    5d8c:	c9 f7       	brne	.-14     	; 0x5d80 <__ultoa_invert+0xa2>
    5d8e:	62 0f       	add	r22, r18
    5d90:	73 1f       	adc	r23, r19
    5d92:	84 1f       	adc	r24, r20
    5d94:	95 1f       	adc	r25, r21
    5d96:	a0 1d       	adc	r26, r0
    5d98:	08 95       	ret

00005d9a <_exit>:
    5d9a:	f8 94       	cli

00005d9c <__stop_program>:
    5d9c:	ff cf       	rjmp	.-2      	; 0x5d9c <__stop_program>
