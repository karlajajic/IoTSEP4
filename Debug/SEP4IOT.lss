
SEP4IOT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000656  00800200  000065cc  00006660  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000065cc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00001311  00800856  00800856  00006cb6  2**0
                  ALLOC
  3 .comment      0000008c  00000000  00000000  00006cb6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006d44  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000be8  00000000  00000000  00006d84  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000edd5  00000000  00000000  0000796c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003d1c  00000000  00000000  00016741  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000724d  00000000  00000000  0001a45d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002a20  00000000  00000000  000216ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004634  00000000  00000000  000240cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000dcca  00000000  00000000  00028700  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000c10  00000000  00000000  000363ca  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	50 c2       	rjmp	.+1184   	; 0x4a2 <__ctors_end>
       2:	00 00       	nop
       4:	6f c2       	rjmp	.+1246   	; 0x4e4 <__bad_interrupt>
       6:	00 00       	nop
       8:	6d c2       	rjmp	.+1242   	; 0x4e4 <__bad_interrupt>
       a:	00 00       	nop
       c:	6b c2       	rjmp	.+1238   	; 0x4e4 <__bad_interrupt>
       e:	00 00       	nop
      10:	69 c2       	rjmp	.+1234   	; 0x4e4 <__bad_interrupt>
      12:	00 00       	nop
      14:	67 c2       	rjmp	.+1230   	; 0x4e4 <__bad_interrupt>
      16:	00 00       	nop
      18:	65 c2       	rjmp	.+1226   	; 0x4e4 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	63 c2       	rjmp	.+1222   	; 0x4e4 <__bad_interrupt>
      1e:	00 00       	nop
      20:	61 c2       	rjmp	.+1218   	; 0x4e4 <__bad_interrupt>
      22:	00 00       	nop
      24:	5f c2       	rjmp	.+1214   	; 0x4e4 <__bad_interrupt>
      26:	00 00       	nop
      28:	5d c2       	rjmp	.+1210   	; 0x4e4 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	5b c2       	rjmp	.+1206   	; 0x4e4 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 0f 0e 	jmp	0x1c1e	; 0x1c1e <__vector_12>
      34:	57 c2       	rjmp	.+1198   	; 0x4e4 <__bad_interrupt>
      36:	00 00       	nop
      38:	55 c2       	rjmp	.+1194   	; 0x4e4 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	53 c2       	rjmp	.+1190   	; 0x4e4 <__bad_interrupt>
      3e:	00 00       	nop
      40:	51 c2       	rjmp	.+1186   	; 0x4e4 <__bad_interrupt>
      42:	00 00       	nop
      44:	4f c2       	rjmp	.+1182   	; 0x4e4 <__bad_interrupt>
      46:	00 00       	nop
      48:	4d c2       	rjmp	.+1178   	; 0x4e4 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	4b c2       	rjmp	.+1174   	; 0x4e4 <__bad_interrupt>
      4e:	00 00       	nop
      50:	49 c2       	rjmp	.+1170   	; 0x4e4 <__bad_interrupt>
      52:	00 00       	nop
      54:	47 c2       	rjmp	.+1166   	; 0x4e4 <__bad_interrupt>
      56:	00 00       	nop
      58:	45 c2       	rjmp	.+1162   	; 0x4e4 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	43 c2       	rjmp	.+1158   	; 0x4e4 <__bad_interrupt>
      5e:	00 00       	nop
      60:	41 c2       	rjmp	.+1154   	; 0x4e4 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 b6 27 	jmp	0x4f6c	; 0x4f6c <__vector_25>
      68:	0c 94 08 28 	jmp	0x5010	; 0x5010 <__vector_26>
      6c:	3b c2       	rjmp	.+1142   	; 0x4e4 <__bad_interrupt>
      6e:	00 00       	nop
      70:	39 c2       	rjmp	.+1138   	; 0x4e4 <__bad_interrupt>
      72:	00 00       	nop
      74:	37 c2       	rjmp	.+1134   	; 0x4e4 <__bad_interrupt>
      76:	00 00       	nop
      78:	35 c2       	rjmp	.+1130   	; 0x4e4 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	33 c2       	rjmp	.+1126   	; 0x4e4 <__bad_interrupt>
      7e:	00 00       	nop
      80:	31 c2       	rjmp	.+1122   	; 0x4e4 <__bad_interrupt>
      82:	00 00       	nop
      84:	2f c2       	rjmp	.+1118   	; 0x4e4 <__bad_interrupt>
      86:	00 00       	nop
      88:	2d c2       	rjmp	.+1114   	; 0x4e4 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	2b c2       	rjmp	.+1110   	; 0x4e4 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 4c 28 	jmp	0x5098	; 0x5098 <__vector_36>
      94:	0c 94 9e 28 	jmp	0x513c	; 0x513c <__vector_37>
      98:	25 c2       	rjmp	.+1098   	; 0x4e4 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 36 2b 	jmp	0x566c	; 0x566c <__vector_39>
      a0:	21 c2       	rjmp	.+1090   	; 0x4e4 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	1f c2       	rjmp	.+1086   	; 0x4e4 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	1d c2       	rjmp	.+1082   	; 0x4e4 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	1b c2       	rjmp	.+1078   	; 0x4e4 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	19 c2       	rjmp	.+1074   	; 0x4e4 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	17 c2       	rjmp	.+1070   	; 0x4e4 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	15 c2       	rjmp	.+1066   	; 0x4e4 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	13 c2       	rjmp	.+1062   	; 0x4e4 <__bad_interrupt>
      be:	00 00       	nop
      c0:	11 c2       	rjmp	.+1058   	; 0x4e4 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	0f c2       	rjmp	.+1054   	; 0x4e4 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	0d c2       	rjmp	.+1050   	; 0x4e4 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 e2 28 	jmp	0x51c4	; 0x51c4 <__vector_51>
      d0:	0c 94 34 29 	jmp	0x5268	; 0x5268 <__vector_52>
      d4:	07 c2       	rjmp	.+1038   	; 0x4e4 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 78 29 	jmp	0x52f0	; 0x52f0 <__vector_54>
      dc:	0c 94 ca 29 	jmp	0x5394	; 0x5394 <__vector_55>
      e0:	01 c2       	rjmp	.+1026   	; 0x4e4 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	c6 01       	movw	r24, r12
      e6:	c6 01       	movw	r24, r12
      e8:	c6 01       	movw	r24, r12
      ea:	00 02       	muls	r16, r16
      ec:	08 02       	muls	r16, r24
      ee:	1e 02       	muls	r17, r30
      f0:	c6 01       	movw	r24, r12
      f2:	c6 01       	movw	r24, r12
      f4:	00 02       	muls	r16, r16
      f6:	08 02       	muls	r16, r24
      f8:	58 2b       	or	r21, r24
      fa:	c8 2b       	or	r28, r24
      fc:	c8 2b       	or	r28, r24
      fe:	c8 2b       	or	r28, r24
     100:	c8 2b       	or	r28, r24
     102:	c8 2b       	or	r28, r24
     104:	c8 2b       	or	r28, r24
     106:	c8 2b       	or	r28, r24
     108:	58 2b       	or	r21, r24
     10a:	c8 2b       	or	r28, r24
     10c:	c8 2b       	or	r28, r24
     10e:	c8 2b       	or	r28, r24
     110:	c8 2b       	or	r28, r24
     112:	c8 2b       	or	r28, r24
     114:	c8 2b       	or	r28, r24
     116:	c8 2b       	or	r28, r24
     118:	5a 2b       	or	r21, r26
     11a:	c8 2b       	or	r28, r24
     11c:	c8 2b       	or	r28, r24
     11e:	c8 2b       	or	r28, r24
     120:	c8 2b       	or	r28, r24
     122:	c8 2b       	or	r28, r24
     124:	c8 2b       	or	r28, r24
     126:	c8 2b       	or	r28, r24
     128:	c8 2b       	or	r28, r24
     12a:	c8 2b       	or	r28, r24
     12c:	c8 2b       	or	r28, r24
     12e:	c8 2b       	or	r28, r24
     130:	c8 2b       	or	r28, r24
     132:	c8 2b       	or	r28, r24
     134:	c8 2b       	or	r28, r24
     136:	c8 2b       	or	r28, r24
     138:	5a 2b       	or	r21, r26
     13a:	c8 2b       	or	r28, r24
     13c:	c8 2b       	or	r28, r24
     13e:	c8 2b       	or	r28, r24
     140:	c8 2b       	or	r28, r24
     142:	c8 2b       	or	r28, r24
     144:	c8 2b       	or	r28, r24
     146:	c8 2b       	or	r28, r24
     148:	c8 2b       	or	r28, r24
     14a:	c8 2b       	or	r28, r24
     14c:	c8 2b       	or	r28, r24
     14e:	c8 2b       	or	r28, r24
     150:	c8 2b       	or	r28, r24
     152:	c8 2b       	or	r28, r24
     154:	c8 2b       	or	r28, r24
     156:	c8 2b       	or	r28, r24
     158:	c4 2b       	or	r28, r20
     15a:	c8 2b       	or	r28, r24
     15c:	c8 2b       	or	r28, r24
     15e:	c8 2b       	or	r28, r24
     160:	c8 2b       	or	r28, r24
     162:	c8 2b       	or	r28, r24
     164:	c8 2b       	or	r28, r24
     166:	c8 2b       	or	r28, r24
     168:	8f 2b       	or	r24, r31
     16a:	c8 2b       	or	r28, r24
     16c:	c8 2b       	or	r28, r24
     16e:	c8 2b       	or	r28, r24
     170:	c8 2b       	or	r28, r24
     172:	c8 2b       	or	r28, r24
     174:	c8 2b       	or	r28, r24
     176:	c8 2b       	or	r28, r24
     178:	c8 2b       	or	r28, r24
     17a:	c8 2b       	or	r28, r24
     17c:	c8 2b       	or	r28, r24
     17e:	c8 2b       	or	r28, r24
     180:	c8 2b       	or	r28, r24
     182:	c8 2b       	or	r28, r24
     184:	c8 2b       	or	r28, r24
     186:	c8 2b       	or	r28, r24
     188:	83 2b       	or	r24, r19
     18a:	c8 2b       	or	r28, r24
     18c:	c8 2b       	or	r28, r24
     18e:	c8 2b       	or	r28, r24
     190:	c8 2b       	or	r28, r24
     192:	c8 2b       	or	r28, r24
     194:	c8 2b       	or	r28, r24
     196:	c8 2b       	or	r28, r24
     198:	a7 2b       	or	r26, r23

0000019a <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     19a:	06 e5       	ldi	r16, 0x56	; 86
     19c:	19 e1       	ldi	r17, 0x19	; 25
     19e:	0f 2e       	mov	r0, r31
     1a0:	f6 e8       	ldi	r31, 0x86	; 134
     1a2:	ef 2e       	mov	r14, r31
     1a4:	f9 e1       	ldi	r31, 0x19	; 25
     1a6:	ff 2e       	mov	r15, r31
     1a8:	f0 2d       	mov	r31, r0
     1aa:	80 91 55 19 	lds	r24, 0x1955	; 0x801955 <uxDeletedTasksWaitingCleanUp>
     1ae:	88 23       	and	r24, r24
     1b0:	29 f1       	breq	.+74     	; 0x1fc <prvIdleTask+0x62>
     1b2:	0f b6       	in	r0, 0x3f	; 63
     1b4:	f8 94       	cli
     1b6:	0f 92       	push	r0
     1b8:	d8 01       	movw	r26, r16
     1ba:	17 96       	adiw	r26, 0x07	; 7
     1bc:	ed 91       	ld	r30, X+
     1be:	fc 91       	ld	r31, X
     1c0:	18 97       	sbiw	r26, 0x08	; 8
     1c2:	c0 85       	ldd	r28, Z+8	; 0x08
     1c4:	d1 85       	ldd	r29, Z+9	; 0x09
     1c6:	ce 01       	movw	r24, r28
     1c8:	02 96       	adiw	r24, 0x02	; 2
     1ca:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <uxListRemove>
     1ce:	80 91 49 19 	lds	r24, 0x1949	; 0x801949 <uxCurrentNumberOfTasks>
     1d2:	81 50       	subi	r24, 0x01	; 1
     1d4:	80 93 49 19 	sts	0x1949, r24	; 0x801949 <uxCurrentNumberOfTasks>
     1d8:	80 91 55 19 	lds	r24, 0x1955	; 0x801955 <uxDeletedTasksWaitingCleanUp>
     1dc:	81 50       	subi	r24, 0x01	; 1
     1de:	80 93 55 19 	sts	0x1955, r24	; 0x801955 <uxDeletedTasksWaitingCleanUp>
     1e2:	0f 90       	pop	r0
     1e4:	0f be       	out	0x3f, r0	; 63
     1e6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     1e8:	9c 8d       	ldd	r25, Y+28	; 0x1c
     1ea:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <vPortFree>
     1ee:	ce 01       	movw	r24, r28
     1f0:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <vPortFree>
     1f4:	80 91 55 19 	lds	r24, 0x1955	; 0x801955 <uxDeletedTasksWaitingCleanUp>
     1f8:	81 11       	cpse	r24, r1
     1fa:	db cf       	rjmp	.-74     	; 0x1b2 <prvIdleTask+0x18>
     1fc:	f7 01       	movw	r30, r14
     1fe:	80 81       	ld	r24, Z
     200:	82 30       	cpi	r24, 0x02	; 2
     202:	10 f0       	brcs	.+4      	; 0x208 <prvIdleTask+0x6e>
     204:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <vPortYield>
     208:	0e 94 61 1e 	call	0x3cc2	; 0x3cc2 <vApplicationIdleHook>
     20c:	ce cf       	rjmp	.-100    	; 0x1aa <prvIdleTask+0x10>

0000020e <prvTimerTask>:
            pxNewTimer->ucStatus = 0x00;
            prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
        }

        return pxNewTimer;
    }
     20e:	cf 93       	push	r28
     210:	df 93       	push	r29
     212:	cd b7       	in	r28, 0x3d	; 61
     214:	de b7       	in	r29, 0x3e	; 62
     216:	60 97       	sbiw	r28, 0x10	; 16
     218:	0f b6       	in	r0, 0x3f	; 63
     21a:	f8 94       	cli
     21c:	de bf       	out	0x3e, r29	; 62
     21e:	0f be       	out	0x3f, r0	; 63
     220:	cd bf       	out	0x3d, r28	; 61
     222:	ce 01       	movw	r24, r28
     224:	01 96       	adiw	r24, 0x01	; 1
     226:	9a 87       	std	Y+10, r25	; 0x0a
     228:	89 87       	std	Y+9, r24	; 0x09
     22a:	81 2c       	mov	r8, r1
     22c:	91 2c       	mov	r9, r1
     22e:	a1 2c       	mov	r10, r1
     230:	b1 2c       	mov	r11, r1
     232:	69 84       	ldd	r6, Y+9	; 0x09
     234:	7a 84       	ldd	r7, Y+10	; 0x0a
     236:	e0 91 be 19 	lds	r30, 0x19BE	; 0x8019be <pxCurrentTimerList>
     23a:	f0 91 bf 19 	lds	r31, 0x19BF	; 0x8019bf <pxCurrentTimerList+0x1>
     23e:	80 81       	ld	r24, Z
     240:	88 23       	and	r24, r24
     242:	09 f4       	brne	.+2      	; 0x246 <prvTimerTask+0x38>
     244:	14 c1       	rjmp	.+552    	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
     246:	07 80       	ldd	r0, Z+7	; 0x07
     248:	f0 85       	ldd	r31, Z+8	; 0x08
     24a:	e0 2d       	mov	r30, r0
     24c:	20 80       	ld	r2, Z
     24e:	31 80       	ldd	r3, Z+1	; 0x01
     250:	42 80       	ldd	r4, Z+2	; 0x02
     252:	53 80       	ldd	r5, Z+3	; 0x03
     254:	0e 94 a6 16 	call	0x2d4c	; 0x2d4c <vTaskSuspendAll>
     258:	ce 01       	movw	r24, r28
     25a:	01 96       	adiw	r24, 0x01	; 1
     25c:	0e 94 cb 1d 	call	0x3b96	; 0x3b96 <prvSampleTimeNow>
     260:	6b 87       	std	Y+11, r22	; 0x0b
     262:	7c 87       	std	Y+12, r23	; 0x0c
     264:	8d 87       	std	Y+13, r24	; 0x0d
     266:	9e 87       	std	Y+14, r25	; 0x0e
     268:	89 81       	ldd	r24, Y+1	; 0x01
     26a:	81 11       	cpse	r24, r1
     26c:	67 c0       	rjmp	.+206    	; 0x33c <prvTimerTask+0x12e>
     26e:	8b 85       	ldd	r24, Y+11	; 0x0b
     270:	9c 85       	ldd	r25, Y+12	; 0x0c
     272:	ad 85       	ldd	r26, Y+13	; 0x0d
     274:	be 85       	ldd	r27, Y+14	; 0x0e
     276:	82 15       	cp	r24, r2
     278:	93 05       	cpc	r25, r3
     27a:	a4 05       	cpc	r26, r4
     27c:	b5 05       	cpc	r27, r5
     27e:	08 f4       	brcc	.+2      	; 0x282 <prvTimerTask+0x74>
     280:	45 c0       	rjmp	.+138    	; 0x30c <prvTimerTask+0xfe>
     282:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <xTaskResumeAll>
     286:	e0 91 be 19 	lds	r30, 0x19BE	; 0x8019be <pxCurrentTimerList>
     28a:	f0 91 bf 19 	lds	r31, 0x19BF	; 0x8019bf <pxCurrentTimerList+0x1>
     28e:	07 80       	ldd	r0, Z+7	; 0x07
     290:	f0 85       	ldd	r31, Z+8	; 0x08
     292:	e0 2d       	mov	r30, r0
     294:	a0 85       	ldd	r26, Z+8	; 0x08
     296:	b1 85       	ldd	r27, Z+9	; 0x09
     298:	b8 8b       	std	Y+16, r27	; 0x10
     29a:	af 87       	std	Y+15, r26	; 0x0f
     29c:	cd 01       	movw	r24, r26
     29e:	02 96       	adiw	r24, 0x02	; 2
     2a0:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <uxListRemove>
     2a4:	ef 85       	ldd	r30, Y+15	; 0x0f
     2a6:	f8 89       	ldd	r31, Y+16	; 0x10
     2a8:	87 89       	ldd	r24, Z+23	; 0x17
     2aa:	82 ff       	sbrs	r24, 2
     2ac:	21 c0       	rjmp	.+66     	; 0x2f0 <prvTimerTask+0xe2>
     2ae:	46 85       	ldd	r20, Z+14	; 0x0e
     2b0:	57 85       	ldd	r21, Z+15	; 0x0f
     2b2:	60 89       	ldd	r22, Z+16	; 0x10
     2b4:	71 89       	ldd	r23, Z+17	; 0x11
     2b6:	42 0d       	add	r20, r2
     2b8:	53 1d       	adc	r21, r3
     2ba:	64 1d       	adc	r22, r4
     2bc:	75 1d       	adc	r23, r5
     2be:	72 01       	movw	r14, r4
     2c0:	61 01       	movw	r12, r2
     2c2:	0b 85       	ldd	r16, Y+11	; 0x0b
     2c4:	1c 85       	ldd	r17, Y+12	; 0x0c
     2c6:	2d 85       	ldd	r18, Y+13	; 0x0d
     2c8:	3e 85       	ldd	r19, Y+14	; 0x0e
     2ca:	cf 01       	movw	r24, r30
     2cc:	0e 94 da 1c 	call	0x39b4	; 0x39b4 <prvInsertTimerInActiveList>
     2d0:	88 23       	and	r24, r24
     2d2:	99 f0       	breq	.+38     	; 0x2fa <prvTimerTask+0xec>
     2d4:	c8 2c       	mov	r12, r8
     2d6:	d9 2c       	mov	r13, r9
     2d8:	ea 2c       	mov	r14, r10
     2da:	fb 2c       	mov	r15, r11
     2dc:	00 e0       	ldi	r16, 0x00	; 0
     2de:	10 e0       	ldi	r17, 0x00	; 0
     2e0:	a2 01       	movw	r20, r4
     2e2:	91 01       	movw	r18, r2
     2e4:	60 e0       	ldi	r22, 0x00	; 0
     2e6:	8f 85       	ldd	r24, Y+15	; 0x0f
     2e8:	98 89       	ldd	r25, Y+16	; 0x10
     2ea:	0e 94 6d 1d 	call	0x3ada	; 0x3ada <xTimerGenericCommand>
     2ee:	05 c0       	rjmp	.+10     	; 0x2fa <prvTimerTask+0xec>
     2f0:	8e 7f       	andi	r24, 0xFE	; 254
     2f2:	af 85       	ldd	r26, Y+15	; 0x0f
     2f4:	b8 89       	ldd	r27, Y+16	; 0x10
     2f6:	57 96       	adiw	r26, 0x17	; 23
     2f8:	8c 93       	st	X, r24
     2fa:	af 85       	ldd	r26, Y+15	; 0x0f
     2fc:	b8 89       	ldd	r27, Y+16	; 0x10
     2fe:	54 96       	adiw	r26, 0x14	; 20
     300:	ed 91       	ld	r30, X+
     302:	fc 91       	ld	r31, X
     304:	55 97       	sbiw	r26, 0x15	; 21
     306:	cd 01       	movw	r24, r26
     308:	19 95       	eicall
     30a:	a2 c0       	rjmp	.+324    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     30c:	20 e0       	ldi	r18, 0x00	; 0
     30e:	b2 01       	movw	r22, r4
     310:	a1 01       	movw	r20, r2
     312:	8b 85       	ldd	r24, Y+11	; 0x0b
     314:	9c 85       	ldd	r25, Y+12	; 0x0c
     316:	ad 85       	ldd	r26, Y+13	; 0x0d
     318:	be 85       	ldd	r27, Y+14	; 0x0e
     31a:	48 1b       	sub	r20, r24
     31c:	59 0b       	sbc	r21, r25
     31e:	6a 0b       	sbc	r22, r26
     320:	7b 0b       	sbc	r23, r27
     322:	80 91 ba 19 	lds	r24, 0x19BA	; 0x8019ba <xTimerQueue>
     326:	90 91 bb 19 	lds	r25, 0x19BB	; 0x8019bb <xTimerQueue+0x1>
     32a:	0e 94 ab 11 	call	0x2356	; 0x2356 <vQueueWaitForMessageRestricted>
     32e:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <xTaskResumeAll>
     332:	81 11       	cpse	r24, r1
     334:	8d c0       	rjmp	.+282    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     336:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <vPortYield>
     33a:	8a c0       	rjmp	.+276    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     33c:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <xTaskResumeAll>
     340:	87 c0       	rjmp	.+270    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     342:	89 81       	ldd	r24, Y+1	; 0x01
     344:	88 23       	and	r24, r24
     346:	0c f4       	brge	.+2      	; 0x34a <prvTimerTask+0x13c>
     348:	83 c0       	rjmp	.+262    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     34a:	4e 80       	ldd	r4, Y+6	; 0x06
     34c:	5f 80       	ldd	r5, Y+7	; 0x07
     34e:	d2 01       	movw	r26, r4
     350:	1c 96       	adiw	r26, 0x0c	; 12
     352:	8d 91       	ld	r24, X+
     354:	9c 91       	ld	r25, X
     356:	1d 97       	sbiw	r26, 0x0d	; 13
     358:	89 2b       	or	r24, r25
     35a:	21 f0       	breq	.+8      	; 0x364 <prvTimerTask+0x156>
     35c:	c2 01       	movw	r24, r4
     35e:	02 96       	adiw	r24, 0x02	; 2
     360:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <uxListRemove>
     364:	ce 01       	movw	r24, r28
     366:	08 96       	adiw	r24, 0x08	; 8
     368:	0e 94 cb 1d 	call	0x3b96	; 0x3b96 <prvSampleTimeNow>
     36c:	8b 01       	movw	r16, r22
     36e:	9c 01       	movw	r18, r24
     370:	e9 81       	ldd	r30, Y+1	; 0x01
     372:	0e 2e       	mov	r0, r30
     374:	00 0c       	add	r0, r0
     376:	ff 0b       	sbc	r31, r31
     378:	ea 30       	cpi	r30, 0x0A	; 10
     37a:	f1 05       	cpc	r31, r1
     37c:	08 f0       	brcs	.+2      	; 0x380 <prvTimerTask+0x172>
     37e:	68 c0       	rjmp	.+208    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     380:	88 27       	eor	r24, r24
     382:	ee 58       	subi	r30, 0x8E	; 142
     384:	ff 4f       	sbci	r31, 0xFF	; 255
     386:	8f 4f       	sbci	r24, 0xFF	; 255
     388:	0c 94 20 2e 	jmp	0x5c40	; 0x5c40 <__tablejump2__>
     38c:	f2 01       	movw	r30, r4
     38e:	87 89       	ldd	r24, Z+23	; 0x17
     390:	81 60       	ori	r24, 0x01	; 1
     392:	87 8b       	std	Z+23, r24	; 0x17
     394:	ca 80       	ldd	r12, Y+2	; 0x02
     396:	db 80       	ldd	r13, Y+3	; 0x03
     398:	ec 80       	ldd	r14, Y+4	; 0x04
     39a:	fd 80       	ldd	r15, Y+5	; 0x05
     39c:	46 85       	ldd	r20, Z+14	; 0x0e
     39e:	57 85       	ldd	r21, Z+15	; 0x0f
     3a0:	60 89       	ldd	r22, Z+16	; 0x10
     3a2:	71 89       	ldd	r23, Z+17	; 0x11
     3a4:	4c 0d       	add	r20, r12
     3a6:	5d 1d       	adc	r21, r13
     3a8:	6e 1d       	adc	r22, r14
     3aa:	7f 1d       	adc	r23, r15
     3ac:	c2 01       	movw	r24, r4
     3ae:	0e 94 da 1c 	call	0x39b4	; 0x39b4 <prvInsertTimerInActiveList>
     3b2:	88 23       	and	r24, r24
     3b4:	09 f4       	brne	.+2      	; 0x3b8 <prvTimerTask+0x1aa>
     3b6:	4c c0       	rjmp	.+152    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     3b8:	d2 01       	movw	r26, r4
     3ba:	54 96       	adiw	r26, 0x14	; 20
     3bc:	ed 91       	ld	r30, X+
     3be:	fc 91       	ld	r31, X
     3c0:	55 97       	sbiw	r26, 0x15	; 21
     3c2:	c2 01       	movw	r24, r4
     3c4:	19 95       	eicall
     3c6:	f2 01       	movw	r30, r4
     3c8:	87 89       	ldd	r24, Z+23	; 0x17
     3ca:	82 ff       	sbrs	r24, 2
     3cc:	41 c0       	rjmp	.+130    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     3ce:	4a 81       	ldd	r20, Y+2	; 0x02
     3d0:	5b 81       	ldd	r21, Y+3	; 0x03
     3d2:	6c 81       	ldd	r22, Y+4	; 0x04
     3d4:	7d 81       	ldd	r23, Y+5	; 0x05
     3d6:	86 85       	ldd	r24, Z+14	; 0x0e
     3d8:	97 85       	ldd	r25, Z+15	; 0x0f
     3da:	a0 89       	ldd	r26, Z+16	; 0x10
     3dc:	b1 89       	ldd	r27, Z+17	; 0x11
     3de:	9a 01       	movw	r18, r20
     3e0:	ab 01       	movw	r20, r22
     3e2:	28 0f       	add	r18, r24
     3e4:	39 1f       	adc	r19, r25
     3e6:	4a 1f       	adc	r20, r26
     3e8:	5b 1f       	adc	r21, r27
     3ea:	c8 2c       	mov	r12, r8
     3ec:	d9 2c       	mov	r13, r9
     3ee:	ea 2c       	mov	r14, r10
     3f0:	fb 2c       	mov	r15, r11
     3f2:	00 e0       	ldi	r16, 0x00	; 0
     3f4:	10 e0       	ldi	r17, 0x00	; 0
     3f6:	60 e0       	ldi	r22, 0x00	; 0
     3f8:	c2 01       	movw	r24, r4
     3fa:	0e 94 6d 1d 	call	0x3ada	; 0x3ada <xTimerGenericCommand>
     3fe:	28 c0       	rjmp	.+80     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     400:	d2 01       	movw	r26, r4
     402:	57 96       	adiw	r26, 0x17	; 23
     404:	8c 91       	ld	r24, X
     406:	57 97       	sbiw	r26, 0x17	; 23
     408:	8e 7f       	andi	r24, 0xFE	; 254
     40a:	57 96       	adiw	r26, 0x17	; 23
     40c:	8c 93       	st	X, r24
     40e:	20 c0       	rjmp	.+64     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     410:	f2 01       	movw	r30, r4
     412:	87 89       	ldd	r24, Z+23	; 0x17
     414:	81 60       	ori	r24, 0x01	; 1
     416:	87 8b       	std	Z+23, r24	; 0x17
     418:	4a 81       	ldd	r20, Y+2	; 0x02
     41a:	5b 81       	ldd	r21, Y+3	; 0x03
     41c:	6c 81       	ldd	r22, Y+4	; 0x04
     41e:	7d 81       	ldd	r23, Y+5	; 0x05
     420:	46 87       	std	Z+14, r20	; 0x0e
     422:	57 87       	std	Z+15, r21	; 0x0f
     424:	60 8b       	std	Z+16, r22	; 0x10
     426:	71 8b       	std	Z+17, r23	; 0x11
     428:	40 0f       	add	r20, r16
     42a:	51 1f       	adc	r21, r17
     42c:	62 1f       	adc	r22, r18
     42e:	73 1f       	adc	r23, r19
     430:	68 01       	movw	r12, r16
     432:	79 01       	movw	r14, r18
     434:	c2 01       	movw	r24, r4
     436:	0e 94 da 1c 	call	0x39b4	; 0x39b4 <prvInsertTimerInActiveList>
     43a:	0a c0       	rjmp	.+20     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     43c:	f2 01       	movw	r30, r4
     43e:	87 89       	ldd	r24, Z+23	; 0x17
     440:	81 fd       	sbrc	r24, 1
     442:	04 c0       	rjmp	.+8      	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
     444:	c2 01       	movw	r24, r4
     446:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <vPortFree>
     44a:	02 c0       	rjmp	.+4      	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     44c:	8e 7f       	andi	r24, 0xFE	; 254
     44e:	87 8b       	std	Z+23, r24	; 0x17
     450:	28 2d       	mov	r18, r8
     452:	39 2d       	mov	r19, r9
     454:	4a 2d       	mov	r20, r10
     456:	5b 2d       	mov	r21, r11
     458:	66 2d       	mov	r22, r6
     45a:	77 2d       	mov	r23, r7
     45c:	80 91 ba 19 	lds	r24, 0x19BA	; 0x8019ba <xTimerQueue>
     460:	90 91 bb 19 	lds	r25, 0x19BB	; 0x8019bb <xTimerQueue+0x1>
     464:	0e 94 47 10 	call	0x208e	; 0x208e <xQueueReceive>
     468:	81 11       	cpse	r24, r1
     46a:	6b cf       	rjmp	.-298    	; 0x342 <prvTimerTask+0x134>
     46c:	e4 ce       	rjmp	.-568    	; 0x236 <prvTimerTask+0x28>
     46e:	0e 94 a6 16 	call	0x2d4c	; 0x2d4c <vTaskSuspendAll>
     472:	ce 01       	movw	r24, r28
     474:	01 96       	adiw	r24, 0x01	; 1
     476:	0e 94 cb 1d 	call	0x3b96	; 0x3b96 <prvSampleTimeNow>
     47a:	6b 87       	std	Y+11, r22	; 0x0b
     47c:	7c 87       	std	Y+12, r23	; 0x0c
     47e:	8d 87       	std	Y+13, r24	; 0x0d
     480:	9e 87       	std	Y+14, r25	; 0x0e
     482:	89 81       	ldd	r24, Y+1	; 0x01
     484:	81 11       	cpse	r24, r1
     486:	5a cf       	rjmp	.-332    	; 0x33c <prvTimerTask+0x12e>
     488:	e0 91 bc 19 	lds	r30, 0x19BC	; 0x8019bc <pxOverflowTimerList>
     48c:	f0 91 bd 19 	lds	r31, 0x19BD	; 0x8019bd <pxOverflowTimerList+0x1>
     490:	80 81       	ld	r24, Z
     492:	21 e0       	ldi	r18, 0x01	; 1
     494:	81 11       	cpse	r24, r1
     496:	20 e0       	ldi	r18, 0x00	; 0
     498:	28 2c       	mov	r2, r8
     49a:	39 2c       	mov	r3, r9
     49c:	4a 2c       	mov	r4, r10
     49e:	5b 2c       	mov	r5, r11
     4a0:	36 cf       	rjmp	.-404    	; 0x30e <prvTimerTask+0x100>

000004a2 <__ctors_end>:
     4a2:	11 24       	eor	r1, r1
     4a4:	1f be       	out	0x3f, r1	; 63
     4a6:	cf ef       	ldi	r28, 0xFF	; 255
     4a8:	d1 e2       	ldi	r29, 0x21	; 33
     4aa:	de bf       	out	0x3e, r29	; 62
     4ac:	cd bf       	out	0x3d, r28	; 61
     4ae:	00 e0       	ldi	r16, 0x00	; 0
     4b0:	0c bf       	out	0x3c, r16	; 60

000004b2 <__do_copy_data>:
     4b2:	18 e0       	ldi	r17, 0x08	; 8
     4b4:	a0 e0       	ldi	r26, 0x00	; 0
     4b6:	b2 e0       	ldi	r27, 0x02	; 2
     4b8:	ec ec       	ldi	r30, 0xCC	; 204
     4ba:	f5 e6       	ldi	r31, 0x65	; 101
     4bc:	00 e0       	ldi	r16, 0x00	; 0
     4be:	0b bf       	out	0x3b, r16	; 59
     4c0:	02 c0       	rjmp	.+4      	; 0x4c6 <__do_copy_data+0x14>
     4c2:	07 90       	elpm	r0, Z+
     4c4:	0d 92       	st	X+, r0
     4c6:	a6 35       	cpi	r26, 0x56	; 86
     4c8:	b1 07       	cpc	r27, r17
     4ca:	d9 f7       	brne	.-10     	; 0x4c2 <__do_copy_data+0x10>

000004cc <__do_clear_bss>:
     4cc:	2b e1       	ldi	r18, 0x1B	; 27
     4ce:	a6 e5       	ldi	r26, 0x56	; 86
     4d0:	b8 e0       	ldi	r27, 0x08	; 8
     4d2:	01 c0       	rjmp	.+2      	; 0x4d6 <.do_clear_bss_start>

000004d4 <.do_clear_bss_loop>:
     4d4:	1d 92       	st	X+, r1

000004d6 <.do_clear_bss_start>:
     4d6:	a7 36       	cpi	r26, 0x67	; 103
     4d8:	b2 07       	cpc	r27, r18
     4da:	e1 f7       	brne	.-8      	; 0x4d4 <.do_clear_bss_loop>
     4dc:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <main>
     4e0:	0c 94 e4 32 	jmp	0x65c8	; 0x65c8 <_exit>

000004e4 <__bad_interrupt>:
     4e4:	8d cd       	rjmp	.-1254   	; 0x0 <__vectors>

000004e6 <co2Reader_create>:

	return _new_reader;
}

//	RETURN TO DESTROY METHODS
void co2Reader_destroy(co2reader_t self) {
     4e6:	2f 92       	push	r2
     4e8:	3f 92       	push	r3
     4ea:	4f 92       	push	r4
     4ec:	5f 92       	push	r5
     4ee:	6f 92       	push	r6
     4f0:	7f 92       	push	r7
     4f2:	8f 92       	push	r8
     4f4:	9f 92       	push	r9
     4f6:	af 92       	push	r10
     4f8:	bf 92       	push	r11
     4fa:	cf 92       	push	r12
     4fc:	df 92       	push	r13
     4fe:	ef 92       	push	r14
     500:	ff 92       	push	r15
     502:	0f 93       	push	r16
     504:	1f 93       	push	r17
     506:	cf 93       	push	r28
     508:	df 93       	push	r29
     50a:	88 2e       	mov	r8, r24
     50c:	96 2e       	mov	r9, r22
     50e:	1a 01       	movw	r2, r20
     510:	28 01       	movw	r4, r16
     512:	39 01       	movw	r6, r18
     514:	61 e0       	ldi	r22, 0x01	; 1
     516:	70 e0       	ldi	r23, 0x00	; 0
     518:	83 e0       	ldi	r24, 0x03	; 3
     51a:	90 e0       	ldi	r25, 0x00	; 0
     51c:	0e 94 28 2e 	call	0x5c50	; 0x5c50 <calloc>
     520:	ec 01       	movw	r28, r24
     522:	00 97       	sbiw	r24, 0x00	; 0
     524:	69 f1       	breq	.+90     	; 0x580 <co2Reader_create+0x9a>
     526:	fc 01       	movw	r30, r24
     528:	11 92       	st	Z+, r1
     52a:	30 92 61 08 	sts	0x0861, r3	; 0x800861 <_startMeasureEventGroup+0x1>
     52e:	20 92 60 08 	sts	0x0860, r2	; 0x800860 <_startMeasureEventGroup>
     532:	40 92 5c 08 	sts	0x085C, r4	; 0x80085c <_startMeasureBit>
     536:	50 92 5d 08 	sts	0x085D, r5	; 0x80085d <_startMeasureBit+0x1>
     53a:	60 92 5e 08 	sts	0x085E, r6	; 0x80085e <_startMeasureBit+0x2>
     53e:	70 92 5f 08 	sts	0x085F, r7	; 0x80085f <_startMeasureBit+0x3>
     542:	f0 92 5b 08 	sts	0x085B, r15	; 0x80085b <_readyEventGroup+0x1>
     546:	e0 92 5a 08 	sts	0x085A, r14	; 0x80085a <_readyEventGroup>
     54a:	a0 92 56 08 	sts	0x0856, r10	; 0x800856 <__data_end>
     54e:	b0 92 57 08 	sts	0x0857, r11	; 0x800857 <__data_end+0x1>
     552:	c0 92 58 08 	sts	0x0858, r12	; 0x800858 <__data_end+0x2>
     556:	d0 92 59 08 	sts	0x0859, r13	; 0x800859 <__data_end+0x3>
     55a:	49 2d       	mov	r20, r9
     55c:	50 e0       	ldi	r21, 0x00	; 0
     55e:	7f 01       	movw	r14, r30
     560:	08 2d       	mov	r16, r8
     562:	9c 01       	movw	r18, r24
     564:	61 e4       	ldi	r22, 0x41	; 65
     566:	72 e0       	ldi	r23, 0x02	; 2
     568:	8a e2       	ldi	r24, 0x2A	; 42
     56a:	93 e0       	ldi	r25, 0x03	; 3
     56c:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <xTaskCreate>
     570:	8b e4       	ldi	r24, 0x4B	; 75
     572:	92 e0       	ldi	r25, 0x02	; 2
     574:	9f 93       	push	r25
     576:	8f 93       	push	r24
     578:	0e 94 c6 2f 	call	0x5f8c	; 0x5f8c <printf>
     57c:	0f 90       	pop	r0
     57e:	0f 90       	pop	r0
     580:	ce 01       	movw	r24, r28
     582:	df 91       	pop	r29
     584:	cf 91       	pop	r28
     586:	1f 91       	pop	r17
     588:	0f 91       	pop	r16
     58a:	ff 90       	pop	r15
     58c:	ef 90       	pop	r14
     58e:	df 90       	pop	r13
     590:	cf 90       	pop	r12
     592:	bf 90       	pop	r11
     594:	af 90       	pop	r10
     596:	9f 90       	pop	r9
     598:	8f 90       	pop	r8
     59a:	7f 90       	pop	r7
     59c:	6f 90       	pop	r6
     59e:	5f 90       	pop	r5
     5a0:	4f 90       	pop	r4
     5a2:	3f 90       	pop	r3
     5a4:	2f 90       	pop	r2
     5a6:	08 95       	ret

000005a8 <co2Reader_measure>:
	for (;;) {
		co2Reader_measure(self);
	}
}

void co2Reader_measure(co2reader_t self) {//dummy
     5a8:	cf 92       	push	r12
     5aa:	df 92       	push	r13
     5ac:	ef 92       	push	r14
     5ae:	ff 92       	push	r15
     5b0:	0f 93       	push	r16
     5b2:	1f 93       	push	r17
     5b4:	cf 93       	push	r28
     5b6:	df 93       	push	r29
     5b8:	ec 01       	movw	r28, r24
	EventBits_t uxBits = xEventGroupWaitBits(_startMeasureEventGroup, //eventGroup
     5ba:	40 91 5c 08 	lds	r20, 0x085C	; 0x80085c <_startMeasureBit>
     5be:	50 91 5d 08 	lds	r21, 0x085D	; 0x80085d <_startMeasureBit+0x1>
     5c2:	60 91 5e 08 	lds	r22, 0x085E	; 0x80085e <_startMeasureBit+0x2>
     5c6:	70 91 5f 08 	lds	r23, 0x085F	; 0x80085f <_startMeasureBit+0x3>
     5ca:	cc 24       	eor	r12, r12
     5cc:	ca 94       	dec	r12
     5ce:	dc 2c       	mov	r13, r12
     5d0:	76 01       	movw	r14, r12
     5d2:	01 e0       	ldi	r16, 0x01	; 1
     5d4:	21 e0       	ldi	r18, 0x01	; 1
     5d6:	80 91 60 08 	lds	r24, 0x0860	; 0x800860 <_startMeasureEventGroup>
     5da:	90 91 61 08 	lds	r25, 0x0861	; 0x800861 <_startMeasureEventGroup+0x1>
     5de:	81 d6       	rcall	.+3330   	; 0x12e2 <xEventGroupWaitBits>
	_startMeasureBit, //bits it is interested in
	pdTRUE, //clears the bits
	pdTRUE, //waits for both bits to be set
	portMAX_DELAY); //wait

	if ((uxBits & (_startMeasureBit)) == (_startMeasureBit)) {
     5e0:	00 91 5c 08 	lds	r16, 0x085C	; 0x80085c <_startMeasureBit>
     5e4:	10 91 5d 08 	lds	r17, 0x085D	; 0x80085d <_startMeasureBit+0x1>
     5e8:	20 91 5e 08 	lds	r18, 0x085E	; 0x80085e <_startMeasureBit+0x2>
     5ec:	30 91 5f 08 	lds	r19, 0x085F	; 0x80085f <_startMeasureBit+0x3>
     5f0:	dc 01       	movw	r26, r24
     5f2:	cb 01       	movw	r24, r22
     5f4:	80 23       	and	r24, r16
     5f6:	91 23       	and	r25, r17
     5f8:	a2 23       	and	r26, r18
     5fa:	b3 23       	and	r27, r19
     5fc:	08 17       	cp	r16, r24
     5fe:	19 07       	cpc	r17, r25
     600:	2a 07       	cpc	r18, r26
     602:	3b 07       	cpc	r19, r27
     604:	f1 f4       	brne	.+60     	; 0x642 <co2Reader_measure+0x9a>
		uint8_t no = self->value;
     606:	88 81       	ld	r24, Y
		no++;
		self->value = no;
     608:	8f 5f       	subi	r24, 0xFF	; 255
     60a:	88 83       	st	Y, r24
		printf("co2 done bit set");
     60c:	82 e5       	ldi	r24, 0x52	; 82
     60e:	92 e0       	ldi	r25, 0x02	; 2
     610:	9f 93       	push	r25
     612:	8f 93       	push	r24
     614:	0e 94 c6 2f 	call	0x5f8c	; 0x5f8c <printf>

		vTaskDelay(2500); //pretend it takes some time
     618:	64 ec       	ldi	r22, 0xC4	; 196
     61a:	79 e0       	ldi	r23, 0x09	; 9
     61c:	80 e0       	ldi	r24, 0x00	; 0
     61e:	90 e0       	ldi	r25, 0x00	; 0
     620:	0e 94 0b 18 	call	0x3016	; 0x3016 <vTaskDelay>

		//set done bit so that device knows meassurement is done
		xEventGroupSetBits(_readyEventGroup, _readyBit);
     624:	40 91 56 08 	lds	r20, 0x0856	; 0x800856 <__data_end>
     628:	50 91 57 08 	lds	r21, 0x0857	; 0x800857 <__data_end+0x1>
     62c:	60 91 58 08 	lds	r22, 0x0858	; 0x800858 <__data_end+0x2>
     630:	70 91 59 08 	lds	r23, 0x0859	; 0x800859 <__data_end+0x3>
     634:	80 91 5a 08 	lds	r24, 0x085A	; 0x80085a <_readyEventGroup>
     638:	90 91 5b 08 	lds	r25, 0x085B	; 0x80085b <_readyEventGroup+0x1>
     63c:	12 d7       	rcall	.+3620   	; 0x1462 <xEventGroupSetBits>
     63e:	0f 90       	pop	r0
     640:	0f 90       	pop	r0
	}
}
     642:	df 91       	pop	r29
     644:	cf 91       	pop	r28
     646:	1f 91       	pop	r17
     648:	0f 91       	pop	r16
     64a:	ff 90       	pop	r15
     64c:	ef 90       	pop	r14
     64e:	df 90       	pop	r13
     650:	cf 90       	pop	r12
     652:	08 95       	ret

00000654 <co2Reader_executeTask>:
	//free(self->value);
	//free(self);
}

//actual task, methods devided so that it is possible to test
void co2Reader_executeTask(co2reader_t self) {
     654:	ec 01       	movw	r28, r24
	for (;;) {
		co2Reader_measure(self);
     656:	ce 01       	movw	r24, r28
     658:	a7 df       	rcall	.-178    	; 0x5a8 <co2Reader_measure>
     65a:	fd cf       	rjmp	.-6      	; 0x656 <co2Reader_executeTask+0x2>

0000065c <co2Reader_getCO2>:
	}
}

uint8_t co2Reader_getCO2(co2reader_t self) {
	return self->value;
     65c:	fc 01       	movw	r30, r24
     65e:	80 81       	ld	r24, Z
     660:	08 95       	ret

00000662 <configuration_create>:
//it is created only once, before starting the scheduler + will never be destroyed
	_working = calloc(sizeof(bool), 1);
	_ventilation = calloc(sizeof(bool), 1);

	//by default, device should work, not to ventilate
	_working = true;
     662:	81 e0       	ldi	r24, 0x01	; 1
     664:	80 93 65 08 	sts	0x0865, r24	; 0x800865 <_working>
	_ventilation = false;
     668:	10 92 64 08 	sts	0x0864, r1	; 0x800864 <_ventilation>

	_semaphore = xSemaphoreCreateMutex();
     66c:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <xQueueCreateMutex>
     670:	90 93 63 08 	sts	0x0863, r25	; 0x800863 <_semaphore+0x1>
     674:	80 93 62 08 	sts	0x0862, r24	; 0x800862 <_semaphore>
     678:	08 95       	ret

0000067a <configuration_setWorking>:
}

//if the semaphore is initialized, take it and give it back, if not, just do the work 
void configuration_setWorking(bool value) {
     67a:	0f 93       	push	r16
     67c:	cf 93       	push	r28
	if (_semaphore != NULL) {
     67e:	20 91 62 08 	lds	r18, 0x0862	; 0x800862 <_semaphore>
     682:	30 91 63 08 	lds	r19, 0x0863	; 0x800863 <_semaphore+0x1>
     686:	21 15       	cp	r18, r1
     688:	31 05       	cpc	r19, r1
     68a:	b1 f0       	breq	.+44     	; 0x6b8 <configuration_setWorking+0x3e>
     68c:	c8 2f       	mov	r28, r24
		xSemaphoreTake(_semaphore, portMAX_DELAY);
     68e:	4f ef       	ldi	r20, 0xFF	; 255
     690:	5f ef       	ldi	r21, 0xFF	; 255
     692:	ba 01       	movw	r22, r20
     694:	c9 01       	movw	r24, r18
     696:	0e 94 df 10 	call	0x21be	; 0x21be <xQueueSemaphoreTake>
		_working = value;
     69a:	c0 93 65 08 	sts	0x0865, r28	; 0x800865 <_working>
		xSemaphoreGive(_semaphore);
     69e:	00 e0       	ldi	r16, 0x00	; 0
     6a0:	20 e0       	ldi	r18, 0x00	; 0
     6a2:	30 e0       	ldi	r19, 0x00	; 0
     6a4:	a9 01       	movw	r20, r18
     6a6:	60 e0       	ldi	r22, 0x00	; 0
     6a8:	70 e0       	ldi	r23, 0x00	; 0
     6aa:	80 91 62 08 	lds	r24, 0x0862	; 0x800862 <_semaphore>
     6ae:	90 91 63 08 	lds	r25, 0x0863	; 0x800863 <_semaphore+0x1>
     6b2:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <xQueueGenericSend>
     6b6:	02 c0       	rjmp	.+4      	; 0x6bc <configuration_setWorking+0x42>
	}
	else _working = value;
     6b8:	80 93 65 08 	sts	0x0865, r24	; 0x800865 <_working>
}
     6bc:	cf 91       	pop	r28
     6be:	0f 91       	pop	r16
     6c0:	08 95       	ret

000006c2 <configuration_getWorking>:

void configuration_getWorking(bool* working) {
     6c2:	0f 93       	push	r16
     6c4:	cf 93       	push	r28
     6c6:	df 93       	push	r29
	if (_semaphore != NULL) {
     6c8:	20 91 62 08 	lds	r18, 0x0862	; 0x800862 <_semaphore>
     6cc:	30 91 63 08 	lds	r19, 0x0863	; 0x800863 <_semaphore+0x1>
     6d0:	21 15       	cp	r18, r1
     6d2:	31 05       	cpc	r19, r1
     6d4:	b1 f0       	breq	.+44     	; 0x702 <configuration_getWorking+0x40>
     6d6:	ec 01       	movw	r28, r24
		xSemaphoreTake(_semaphore, portMAX_DELAY);
     6d8:	4f ef       	ldi	r20, 0xFF	; 255
     6da:	5f ef       	ldi	r21, 0xFF	; 255
     6dc:	ba 01       	movw	r22, r20
     6de:	c9 01       	movw	r24, r18
     6e0:	0e 94 df 10 	call	0x21be	; 0x21be <xQueueSemaphoreTake>
		*working = _working;
     6e4:	80 91 65 08 	lds	r24, 0x0865	; 0x800865 <_working>
     6e8:	88 83       	st	Y, r24
		xSemaphoreGive(_semaphore);
     6ea:	00 e0       	ldi	r16, 0x00	; 0
     6ec:	20 e0       	ldi	r18, 0x00	; 0
     6ee:	30 e0       	ldi	r19, 0x00	; 0
     6f0:	a9 01       	movw	r20, r18
     6f2:	60 e0       	ldi	r22, 0x00	; 0
     6f4:	70 e0       	ldi	r23, 0x00	; 0
     6f6:	80 91 62 08 	lds	r24, 0x0862	; 0x800862 <_semaphore>
     6fa:	90 91 63 08 	lds	r25, 0x0863	; 0x800863 <_semaphore+0x1>
     6fe:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <xQueueGenericSend>
	}
	else return _working;
}
     702:	df 91       	pop	r29
     704:	cf 91       	pop	r28
     706:	0f 91       	pop	r16
     708:	08 95       	ret

0000070a <configuration_setVentilation>:

void configuration_setVentilation(bool value) {
     70a:	0f 93       	push	r16
     70c:	cf 93       	push	r28
	if (_semaphore != NULL) {
     70e:	20 91 62 08 	lds	r18, 0x0862	; 0x800862 <_semaphore>
     712:	30 91 63 08 	lds	r19, 0x0863	; 0x800863 <_semaphore+0x1>
     716:	21 15       	cp	r18, r1
     718:	31 05       	cpc	r19, r1
     71a:	b1 f0       	breq	.+44     	; 0x748 <configuration_setVentilation+0x3e>
     71c:	c8 2f       	mov	r28, r24
		xSemaphoreTake(_semaphore, portMAX_DELAY);
     71e:	4f ef       	ldi	r20, 0xFF	; 255
     720:	5f ef       	ldi	r21, 0xFF	; 255
     722:	ba 01       	movw	r22, r20
     724:	c9 01       	movw	r24, r18
     726:	0e 94 df 10 	call	0x21be	; 0x21be <xQueueSemaphoreTake>
		_ventilation = value;
     72a:	c0 93 64 08 	sts	0x0864, r28	; 0x800864 <_ventilation>
		xSemaphoreGive(_semaphore);
     72e:	00 e0       	ldi	r16, 0x00	; 0
     730:	20 e0       	ldi	r18, 0x00	; 0
     732:	30 e0       	ldi	r19, 0x00	; 0
     734:	a9 01       	movw	r20, r18
     736:	60 e0       	ldi	r22, 0x00	; 0
     738:	70 e0       	ldi	r23, 0x00	; 0
     73a:	80 91 62 08 	lds	r24, 0x0862	; 0x800862 <_semaphore>
     73e:	90 91 63 08 	lds	r25, 0x0863	; 0x800863 <_semaphore+0x1>
     742:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <xQueueGenericSend>
     746:	02 c0       	rjmp	.+4      	; 0x74c <configuration_setVentilation+0x42>
	}
	else _ventilation = value;
     748:	80 93 64 08 	sts	0x0864, r24	; 0x800864 <_ventilation>
}
     74c:	cf 91       	pop	r28
     74e:	0f 91       	pop	r16
     750:	08 95       	ret

00000752 <configuration_getVentilation>:

void configuration_getVentilation(bool* ventilation) {
     752:	0f 93       	push	r16
     754:	cf 93       	push	r28
     756:	df 93       	push	r29
	if (_semaphore != NULL) {
     758:	20 91 62 08 	lds	r18, 0x0862	; 0x800862 <_semaphore>
     75c:	30 91 63 08 	lds	r19, 0x0863	; 0x800863 <_semaphore+0x1>
     760:	21 15       	cp	r18, r1
     762:	31 05       	cpc	r19, r1
     764:	b1 f0       	breq	.+44     	; 0x792 <configuration_getVentilation+0x40>
     766:	ec 01       	movw	r28, r24
		xSemaphoreTake(_semaphore, portMAX_DELAY);
     768:	4f ef       	ldi	r20, 0xFF	; 255
     76a:	5f ef       	ldi	r21, 0xFF	; 255
     76c:	ba 01       	movw	r22, r20
     76e:	c9 01       	movw	r24, r18
     770:	0e 94 df 10 	call	0x21be	; 0x21be <xQueueSemaphoreTake>
		*ventilation = _ventilation;
     774:	80 91 64 08 	lds	r24, 0x0864	; 0x800864 <_ventilation>
     778:	88 83       	st	Y, r24
		xSemaphoreGive(_semaphore);
     77a:	00 e0       	ldi	r16, 0x00	; 0
     77c:	20 e0       	ldi	r18, 0x00	; 0
     77e:	30 e0       	ldi	r19, 0x00	; 0
     780:	a9 01       	movw	r20, r18
     782:	60 e0       	ldi	r22, 0x00	; 0
     784:	70 e0       	ldi	r23, 0x00	; 0
     786:	80 91 62 08 	lds	r24, 0x0862	; 0x800862 <_semaphore>
     78a:	90 91 63 08 	lds	r25, 0x0863	; 0x800863 <_semaphore+0x1>
     78e:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <xQueueGenericSend>
	}
	else return _ventilation;
}
     792:	df 91       	pop	r29
     794:	cf 91       	pop	r28
     796:	0f 91       	pop	r16
     798:	08 95       	ret

0000079a <currentCondition_create>:
	//free(self->co2Data);
	//free(self->temperatureData);
	//free(self->humidityData);
	//free(self->soundData);
	//free(self);
	vPortFree(self->humidityData);//maybe use this
     79a:	61 e0       	ldi	r22, 0x01	; 1
     79c:	70 e0       	ldi	r23, 0x00	; 0
     79e:	88 e0       	ldi	r24, 0x08	; 8
     7a0:	90 e0       	ldi	r25, 0x00	; 0
     7a2:	0e 94 28 2e 	call	0x5c50	; 0x5c50 <calloc>
     7a6:	00 97       	sbiw	r24, 0x00	; 0
     7a8:	39 f0       	breq	.+14     	; 0x7b8 <currentCondition_create+0x1e>
     7aa:	fc 01       	movw	r30, r24
     7ac:	13 82       	std	Z+3, r1	; 0x03
     7ae:	12 82       	std	Z+2, r1	; 0x02
     7b0:	15 82       	std	Z+5, r1	; 0x05
     7b2:	14 82       	std	Z+4, r1	; 0x04
     7b4:	11 82       	std	Z+1, r1	; 0x01
     7b6:	10 82       	st	Z, r1
     7b8:	08 95       	ret

000007ba <currentCondition_setCO2>:
     7ba:	00 97       	sbiw	r24, 0x00	; 0
     7bc:	19 f0       	breq	.+6      	; 0x7c4 <currentCondition_setCO2+0xa>
     7be:	fc 01       	movw	r30, r24
     7c0:	71 83       	std	Z+1, r23	; 0x01
     7c2:	60 83       	st	Z, r22
     7c4:	08 95       	ret

000007c6 <currentCondition_setHumidity>:
     7c6:	00 97       	sbiw	r24, 0x00	; 0
     7c8:	19 f0       	breq	.+6      	; 0x7d0 <currentCondition_setHumidity+0xa>
     7ca:	fc 01       	movw	r30, r24
     7cc:	75 83       	std	Z+5, r23	; 0x05
     7ce:	64 83       	std	Z+4, r22	; 0x04
     7d0:	08 95       	ret

000007d2 <currentCondition_setTemperature>:
     7d2:	00 97       	sbiw	r24, 0x00	; 0
     7d4:	19 f0       	breq	.+6      	; 0x7dc <currentCondition_setTemperature+0xa>
     7d6:	fc 01       	movw	r30, r24
     7d8:	73 83       	std	Z+3, r23	; 0x03
     7da:	62 83       	std	Z+2, r22	; 0x02
     7dc:	08 95       	ret

000007de <getcurrentConditionPayload>:
}
lora_payload_t getcurrentConditionPayload(currentCondition_t self)
{
     7de:	fc 01       	movw	r30, r24
     7e0:	db 01       	movw	r26, r22
	lora_payload_t payload;
	payload.port_no = 1;
	payload.len = 4;
	
	payload.bytes[0] = self->temperatureData >> 8;
     7e2:	12 96       	adiw	r26, 0x02	; 2
     7e4:	2c 91       	ld	r18, X
     7e6:	12 97       	sbiw	r26, 0x02	; 2
     7e8:	13 96       	adiw	r26, 0x03	; 3
     7ea:	3c 91       	ld	r19, X
     7ec:	13 97       	sbiw	r26, 0x03	; 3
	payload.bytes[1] = self->temperatureData & 0xFF;

	payload.bytes[2] = self->humidityData >> 8;
     7ee:	14 96       	adiw	r26, 0x04	; 4
     7f0:	8c 91       	ld	r24, X
     7f2:	14 97       	sbiw	r26, 0x04	; 4
     7f4:	15 96       	adiw	r26, 0x05	; 5
     7f6:	9c 91       	ld	r25, X
	payload.bytes[3] = self->humidityData & 0xFF;
	return payload;
     7f8:	41 e0       	ldi	r20, 0x01	; 1
     7fa:	40 83       	st	Z, r20
     7fc:	44 e0       	ldi	r20, 0x04	; 4
     7fe:	41 83       	std	Z+1, r20	; 0x01
     800:	32 83       	std	Z+2, r19	; 0x02
     802:	23 83       	std	Z+3, r18	; 0x03
     804:	94 83       	std	Z+4, r25	; 0x04
     806:	85 83       	std	Z+5, r24	; 0x05
	
     808:	cf 01       	movw	r24, r30
     80a:	08 95       	ret

0000080c <device_create>:
	//free(self);*/
//}

currentCondition_t device_getCurrentCondition(device_t self) {
	return self->currentCondition;
}
     80c:	2f 92       	push	r2
     80e:	3f 92       	push	r3
     810:	4f 92       	push	r4
     812:	5f 92       	push	r5
     814:	6f 92       	push	r6
     816:	7f 92       	push	r7
     818:	8f 92       	push	r8
     81a:	9f 92       	push	r9
     81c:	af 92       	push	r10
     81e:	bf 92       	push	r11
     820:	cf 92       	push	r12
     822:	df 92       	push	r13
     824:	ef 92       	push	r14
     826:	ff 92       	push	r15
     828:	0f 93       	push	r16
     82a:	1f 93       	push	r17
     82c:	cf 93       	push	r28
     82e:	df 93       	push	r29
     830:	00 d0       	rcall	.+0      	; 0x832 <device_create+0x26>
     832:	1f 92       	push	r1
     834:	cd b7       	in	r28, 0x3d	; 61
     836:	de b7       	in	r29, 0x3e	; 62
     838:	28 2e       	mov	r2, r24
     83a:	36 2e       	mov	r3, r22
     83c:	5c 83       	std	Y+4, r21	; 0x04
     83e:	4b 83       	std	Y+3, r20	; 0x03
     840:	28 01       	movw	r4, r16
     842:	39 01       	movw	r6, r18
     844:	61 e0       	ldi	r22, 0x01	; 1
     846:	70 e0       	ldi	r23, 0x00	; 0
     848:	88 e0       	ldi	r24, 0x08	; 8
     84a:	90 e0       	ldi	r25, 0x00	; 0
     84c:	0e 94 28 2e 	call	0x5c50	; 0x5c50 <calloc>
     850:	9a 83       	std	Y+2, r25	; 0x02
     852:	89 83       	std	Y+1, r24	; 0x01
     854:	00 97       	sbiw	r24, 0x00	; 0
     856:	09 f4       	brne	.+2      	; 0x85a <device_create+0x4e>
     858:	42 c0       	rjmp	.+132    	; 0x8de <device_create+0xd2>
     85a:	fc 01       	movw	r30, r24
     85c:	91 82       	std	Z+1, r9	; 0x01
     85e:	80 82       	st	Z, r8
     860:	8a 8d       	ldd	r24, Y+26	; 0x1a
     862:	9b 8d       	ldd	r25, Y+27	; 0x1b
     864:	93 83       	std	Z+3, r25	; 0x03
     866:	82 83       	std	Z+2, r24	; 0x02
     868:	98 df       	rcall	.-208    	; 0x79a <currentCondition_create>
     86a:	e9 81       	ldd	r30, Y+1	; 0x01
     86c:	fa 81       	ldd	r31, Y+2	; 0x02
     86e:	95 83       	std	Z+5, r25	; 0x05
     870:	84 83       	std	Z+4, r24	; 0x04
     872:	8b 81       	ldd	r24, Y+3	; 0x03
     874:	9c 81       	ldd	r25, Y+4	; 0x04
     876:	90 93 89 08 	sts	0x0889, r25	; 0x800889 <_startMeasureEventGroup+0x1>
     87a:	80 93 88 08 	sts	0x0888, r24	; 0x800888 <_startMeasureEventGroup>
     87e:	40 92 84 08 	sts	0x0884, r4	; 0x800884 <_startMeasureBit>
     882:	50 92 85 08 	sts	0x0885, r5	; 0x800885 <_startMeasureBit+0x1>
     886:	60 92 86 08 	sts	0x0886, r6	; 0x800886 <_startMeasureBit+0x2>
     88a:	70 92 87 08 	sts	0x0887, r7	; 0x800887 <_startMeasureBit+0x3>
     88e:	f0 92 83 08 	sts	0x0883, r15	; 0x800883 <_readyEventGroup+0x1>
     892:	e0 92 82 08 	sts	0x0882, r14	; 0x800882 <_readyEventGroup>
     896:	a0 92 7e 08 	sts	0x087E, r10	; 0x80087e <_readyBit>
     89a:	b0 92 7f 08 	sts	0x087F, r11	; 0x80087f <_readyBit+0x1>
     89e:	c0 92 80 08 	sts	0x0880, r12	; 0x800880 <_readyBit+0x2>
     8a2:	d0 92 81 08 	sts	0x0881, r13	; 0x800881 <_readyBit+0x3>
     8a6:	8c 8d       	ldd	r24, Y+28	; 0x1c
     8a8:	9d 8d       	ldd	r25, Y+29	; 0x1d
     8aa:	90 93 7d 08 	sts	0x087D, r25	; 0x80087d <_uplinkmessageBuffer+0x1>
     8ae:	80 93 7c 08 	sts	0x087C, r24	; 0x80087c <_uplinkmessageBuffer>
     8b2:	43 2d       	mov	r20, r3
     8b4:	50 e0       	ldi	r21, 0x00	; 0
     8b6:	7f 01       	movw	r14, r30
     8b8:	96 e0       	ldi	r25, 0x06	; 6
     8ba:	e9 0e       	add	r14, r25
     8bc:	f1 1c       	adc	r15, r1
     8be:	02 2d       	mov	r16, r2
     8c0:	9f 01       	movw	r18, r30
     8c2:	63 e6       	ldi	r22, 0x63	; 99
     8c4:	72 e0       	ldi	r23, 0x02	; 2
     8c6:	8a e6       	ldi	r24, 0x6A	; 106
     8c8:	95 e0       	ldi	r25, 0x05	; 5
     8ca:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <xTaskCreate>
     8ce:	8a e6       	ldi	r24, 0x6A	; 106
     8d0:	92 e0       	ldi	r25, 0x02	; 2
     8d2:	9f 93       	push	r25
     8d4:	8f 93       	push	r24
     8d6:	0e 94 c6 2f 	call	0x5f8c	; 0x5f8c <printf>
     8da:	0f 90       	pop	r0
     8dc:	0f 90       	pop	r0
     8de:	89 81       	ldd	r24, Y+1	; 0x01
     8e0:	9a 81       	ldd	r25, Y+2	; 0x02
     8e2:	0f 90       	pop	r0
     8e4:	0f 90       	pop	r0
     8e6:	0f 90       	pop	r0
     8e8:	0f 90       	pop	r0
     8ea:	df 91       	pop	r29
     8ec:	cf 91       	pop	r28
     8ee:	1f 91       	pop	r17
     8f0:	0f 91       	pop	r16
     8f2:	ff 90       	pop	r15
     8f4:	ef 90       	pop	r14
     8f6:	df 90       	pop	r13
     8f8:	cf 90       	pop	r12
     8fa:	bf 90       	pop	r11
     8fc:	af 90       	pop	r10
     8fe:	9f 90       	pop	r9
     900:	8f 90       	pop	r8
     902:	7f 90       	pop	r7
     904:	6f 90       	pop	r6
     906:	5f 90       	pop	r5
     908:	4f 90       	pop	r4
     90a:	3f 90       	pop	r3
     90c:	2f 90       	pop	r2
     90e:	08 95       	ret

00000910 <device_setHumidityToCurrent>:

void device_setHumidityToCurrent(device_t self, uint16_t value)
{
	currentCondition_setHumidity(self->currentCondition,value);
     910:	fc 01       	movw	r30, r24
     912:	84 81       	ldd	r24, Z+4	; 0x04
     914:	95 81       	ldd	r25, Z+5	; 0x05
     916:	57 cf       	rjmp	.-338    	; 0x7c6 <currentCondition_setHumidity>
     918:	08 95       	ret

0000091a <device_getHumidityData>:
}


uint16_t device_getHumidityData(device_t self)
{
	if (self->humAndTempReader!=NULL)
     91a:	fc 01       	movw	r30, r24
     91c:	82 81       	ldd	r24, Z+2	; 0x02
     91e:	93 81       	ldd	r25, Z+3	; 0x03
     920:	00 97       	sbiw	r24, 0x00	; 0
     922:	11 f0       	breq	.+4      	; 0x928 <device_getHumidityData+0xe>
	{
		return humAndTempReader_getHumidity(self->humAndTempReader);
     924:	4a c3       	rjmp	.+1684   	; 0xfba <humAndTempReader_getHumidity>
     926:	08 95       	ret
	}
	else
	return -1;
     928:	8f ef       	ldi	r24, 0xFF	; 255
     92a:	9f ef       	ldi	r25, 0xFF	; 255
}
     92c:	08 95       	ret

0000092e <device_setCO2ToCurrent>:

void device_setCO2ToCurrent(device_t self, uint16_t value) {
	currentCondition_setCO2(self->currentCondition, value);
     92e:	fc 01       	movw	r30, r24
     930:	84 81       	ldd	r24, Z+4	; 0x04
     932:	95 81       	ldd	r25, Z+5	; 0x05
     934:	42 cf       	rjmp	.-380    	; 0x7ba <currentCondition_setCO2>
     936:	08 95       	ret

00000938 <device_getCO2Data>:
}

uint16_t device_getCO2Data(device_t self) {
	if (self->co2reader != NULL)
     938:	fc 01       	movw	r30, r24
     93a:	80 81       	ld	r24, Z
     93c:	91 81       	ldd	r25, Z+1	; 0x01
     93e:	00 97       	sbiw	r24, 0x00	; 0
     940:	19 f0       	breq	.+6      	; 0x948 <device_getCO2Data+0x10>
		return co2Reader_getCO2(self->co2reader);
     942:	8c de       	rcall	.-744    	; 0x65c <co2Reader_getCO2>
     944:	90 e0       	ldi	r25, 0x00	; 0
     946:	08 95       	ret
	else return -1;
     948:	8f ef       	ldi	r24, 0xFF	; 255
     94a:	9f ef       	ldi	r25, 0xFF	; 255
}
     94c:	08 95       	ret

0000094e <device_setTemperatureToCurrent>:

void device_setTemperatureToCurrent(device_t self, int16_t value)
{
	
	currentCondition_setTemperature(self->currentCondition,value);
     94e:	fc 01       	movw	r30, r24
     950:	84 81       	ldd	r24, Z+4	; 0x04
     952:	95 81       	ldd	r25, Z+5	; 0x05
     954:	3e cf       	rjmp	.-388    	; 0x7d2 <currentCondition_setTemperature>
     956:	08 95       	ret

00000958 <device_getTemperatureData>:
}


int16_t device_getTemperatureData(device_t self)
{
	if (self->humAndTempReader!=NULL)
     958:	fc 01       	movw	r30, r24
     95a:	82 81       	ldd	r24, Z+2	; 0x02
     95c:	93 81       	ldd	r25, Z+3	; 0x03
     95e:	00 97       	sbiw	r24, 0x00	; 0
     960:	11 f0       	breq	.+4      	; 0x966 <device_getTemperatureData+0xe>
	{
		return humAndTempReader_getTemperature(self->humAndTempReader);
     962:	2f c3       	rjmp	.+1630   	; 0xfc2 <humAndTempReader_getTemperature>
     964:	08 95       	ret
	}
	else
	return -1;
     966:	8f ef       	ldi	r24, 0xFF	; 255
     968:	9f ef       	ldi	r25, 0xFF	; 255
	
     96a:	08 95       	ret

0000096c <device_startMeasuring>:
void device_executeTask(device_t self) {
	for (;;)
		device_startMeasuring(self);
}

void device_startMeasuring(device_t self) {
     96c:	af 92       	push	r10
     96e:	bf 92       	push	r11
     970:	cf 92       	push	r12
     972:	df 92       	push	r13
     974:	ef 92       	push	r14
     976:	ff 92       	push	r15
     978:	0f 93       	push	r16
     97a:	1f 93       	push	r17
     97c:	cf 93       	push	r28
     97e:	df 93       	push	r29
     980:	cd b7       	in	r28, 0x3d	; 61
     982:	de b7       	in	r29, 0x3e	; 62
     984:	66 97       	sbiw	r28, 0x16	; 22
     986:	0f b6       	in	r0, 0x3f	; 63
     988:	f8 94       	cli
     98a:	de bf       	out	0x3e, r29	; 62
     98c:	0f be       	out	0x3f, r0	; 63
     98e:	cd bf       	out	0x3d, r28	; 61
     990:	5c 01       	movw	r10, r24


	//if ventilation needed -> ventilate 

	//tell sensors to start meassuring 
	xEventGroupSetBits(_startMeasureEventGroup, _startMeasureBit);
     992:	40 91 84 08 	lds	r20, 0x0884	; 0x800884 <_startMeasureBit>
     996:	50 91 85 08 	lds	r21, 0x0885	; 0x800885 <_startMeasureBit+0x1>
     99a:	60 91 86 08 	lds	r22, 0x0886	; 0x800886 <_startMeasureBit+0x2>
     99e:	70 91 87 08 	lds	r23, 0x0887	; 0x800887 <_startMeasureBit+0x3>
     9a2:	80 91 88 08 	lds	r24, 0x0888	; 0x800888 <_startMeasureEventGroup>
     9a6:	90 91 89 08 	lds	r25, 0x0889	; 0x800889 <_startMeasureEventGroup+0x1>
     9aa:	5b d5       	rcall	.+2742   	; 0x1462 <xEventGroupSetBits>
	printf("device has set bits");
     9ac:	84 e7       	ldi	r24, 0x74	; 116
     9ae:	92 e0       	ldi	r25, 0x02	; 2
     9b0:	9f 93       	push	r25
     9b2:	8f 93       	push	r24
     9b4:	0e 94 c6 2f 	call	0x5f8c	; 0x5f8c <printf>

	//wait for sensors to read data
	EventBits_t uxBits = xEventGroupWaitBits(_readyEventGroup, //eventGroup it is interested in
     9b8:	40 91 7e 08 	lds	r20, 0x087E	; 0x80087e <_readyBit>
     9bc:	50 91 7f 08 	lds	r21, 0x087F	; 0x80087f <_readyBit+0x1>
     9c0:	60 91 80 08 	lds	r22, 0x0880	; 0x800880 <_readyBit+0x2>
     9c4:	70 91 81 08 	lds	r23, 0x0881	; 0x800881 <_readyBit+0x3>
     9c8:	cc 24       	eor	r12, r12
     9ca:	ca 94       	dec	r12
     9cc:	dc 2c       	mov	r13, r12
     9ce:	76 01       	movw	r14, r12
     9d0:	01 e0       	ldi	r16, 0x01	; 1
     9d2:	21 e0       	ldi	r18, 0x01	; 1
     9d4:	80 91 82 08 	lds	r24, 0x0882	; 0x800882 <_readyEventGroup>
     9d8:	90 91 83 08 	lds	r25, 0x0883	; 0x800883 <_readyEventGroup+0x1>
     9dc:	82 d4       	rcall	.+2308   	; 0x12e2 <xEventGroupWaitBits>
		_readyBit, //bits it is interested in
		pdTRUE, //clears the bits 
		pdTRUE, //waits for both bits to be set
		portMAX_DELAY); //waits forever if needed

	if ((uxBits & (_readyBit)) == (_readyBit)) {
     9de:	00 91 7e 08 	lds	r16, 0x087E	; 0x80087e <_readyBit>
     9e2:	10 91 7f 08 	lds	r17, 0x087F	; 0x80087f <_readyBit+0x1>
     9e6:	20 91 80 08 	lds	r18, 0x0880	; 0x800880 <_readyBit+0x2>
     9ea:	30 91 81 08 	lds	r19, 0x0881	; 0x800881 <_readyBit+0x3>
     9ee:	dc 01       	movw	r26, r24
     9f0:	cb 01       	movw	r24, r22
     9f2:	80 23       	and	r24, r16
     9f4:	91 23       	and	r25, r17
     9f6:	a2 23       	and	r26, r18
     9f8:	b3 23       	and	r27, r19
     9fa:	0f 90       	pop	r0
     9fc:	0f 90       	pop	r0
     9fe:	08 17       	cp	r16, r24
     a00:	19 07       	cpc	r17, r25
     a02:	2a 07       	cpc	r18, r26
     a04:	3b 07       	cpc	r19, r27
     a06:	09 f0       	breq	.+2      	; 0xa0a <device_startMeasuring+0x9e>
		device_setCO2ToCurrent(self, device_getCO2Data(self));
     a08:	54 c0       	rjmp	.+168    	; 0xab2 <device_startMeasuring+0x146>
     a0a:	c5 01       	movw	r24, r10
     a0c:	95 df       	rcall	.-214    	; 0x938 <device_getCO2Data>
     a0e:	bc 01       	movw	r22, r24
     a10:	c5 01       	movw	r24, r10
		device_setTemperatureToCurrent(self, device_getTemperatureData(self));
     a12:	8d df       	rcall	.-230    	; 0x92e <device_setCO2ToCurrent>
     a14:	c5 01       	movw	r24, r10
     a16:	a0 df       	rcall	.-192    	; 0x958 <device_getTemperatureData>
     a18:	bc 01       	movw	r22, r24
     a1a:	c5 01       	movw	r24, r10
		device_setHumidityToCurrent(self, device_getHumidityData(self));
     a1c:	98 df       	rcall	.-208    	; 0x94e <device_setTemperatureToCurrent>
     a1e:	c5 01       	movw	r24, r10
     a20:	7c df       	rcall	.-264    	; 0x91a <device_getHumidityData>
     a22:	bc 01       	movw	r22, r24
     a24:	c5 01       	movw	r24, r10
     a26:	74 df       	rcall	.-280    	; 0x910 <device_setHumidityToCurrent>
		
		printf("device got done bit\n");
     a28:	88 e8       	ldi	r24, 0x88	; 136
     a2a:	92 e0       	ldi	r25, 0x02	; 2
     a2c:	0e 94 d9 2f 	call	0x5fb2	; 0x5fb2 <puts>
		
		printf("CO2 is: %u\n", co2Reader_getCO2(self->co2reader));
     a30:	f5 01       	movw	r30, r10
     a32:	80 81       	ld	r24, Z
     a34:	91 81       	ldd	r25, Z+1	; 0x01
     a36:	12 de       	rcall	.-988    	; 0x65c <co2Reader_getCO2>
     a38:	1f 92       	push	r1
     a3a:	8f 93       	push	r24
     a3c:	8c e9       	ldi	r24, 0x9C	; 156
     a3e:	92 e0       	ldi	r25, 0x02	; 2
     a40:	9f 93       	push	r25
     a42:	8f 93       	push	r24
     a44:	0e 94 c6 2f 	call	0x5f8c	; 0x5f8c <printf>
		printf("Temperature is: %d\n", device_getTemperatureData(self));
     a48:	c5 01       	movw	r24, r10
     a4a:	86 df       	rcall	.-244    	; 0x958 <device_getTemperatureData>
     a4c:	9f 93       	push	r25
     a4e:	8f 93       	push	r24
     a50:	88 ea       	ldi	r24, 0xA8	; 168
     a52:	92 e0       	ldi	r25, 0x02	; 2
     a54:	9f 93       	push	r25
     a56:	8f 93       	push	r24
     a58:	0e 94 c6 2f 	call	0x5f8c	; 0x5f8c <printf>
		printf("Humidity is: %u\n", device_getHumidityData(self));
     a5c:	c5 01       	movw	r24, r10
     a5e:	5d df       	rcall	.-326    	; 0x91a <device_getHumidityData>
     a60:	9f 93       	push	r25
     a62:	8f 93       	push	r24
     a64:	8c eb       	ldi	r24, 0xBC	; 188
     a66:	92 e0       	ldi	r25, 0x02	; 2
     a68:	9f 93       	push	r25
     a6a:	8f 93       	push	r24
     a6c:	0e 94 c6 2f 	call	0x5f8c	; 0x5f8c <printf>
		
		/*Perhaps loraPayload is not a good idea to be here*/
		_uplink_payload = getcurrentConditionPayload(self->currentCondition);
     a70:	f5 01       	movw	r30, r10
     a72:	64 81       	ldd	r22, Z+4	; 0x04
     a74:	75 81       	ldd	r23, Z+5	; 0x05
     a76:	ce 01       	movw	r24, r28
     a78:	01 96       	adiw	r24, 0x01	; 1
     a7a:	b1 de       	rcall	.-670    	; 0x7de <getcurrentConditionPayload>
     a7c:	86 e1       	ldi	r24, 0x16	; 22
     a7e:	fe 01       	movw	r30, r28
     a80:	31 96       	adiw	r30, 0x01	; 1
     a82:	a6 e6       	ldi	r26, 0x66	; 102
     a84:	b8 e0       	ldi	r27, 0x08	; 8
     a86:	01 90       	ld	r0, Z+
     a88:	0d 92       	st	X+, r0
     a8a:	8a 95       	dec	r24
     a8c:	e1 f7       	brne	.-8      	; 0xa86 <device_startMeasuring+0x11a>
     a8e:	0f ef       	ldi	r16, 0xFF	; 255
			//printf("The temperature in device is: %d\n", _uplink_payload.bytes[0]);
			//printf("The temperature2 in device is: %d\n", _uplink_payload.bytes[1]);
			//printf("The humidity in device is: %u\n", _uplink_payload.bytes[2]);
			//printf("The humidity2 in device is: %u\n", _uplink_payload.bytes[3]);
			
			xMessageBufferSend(_uplinkmessageBuffer,(void*) &_uplink_payload,sizeof(_uplink_payload),portMAX_DELAY);
     a90:	1f ef       	ldi	r17, 0xFF	; 255
     a92:	98 01       	movw	r18, r16
     a94:	46 e1       	ldi	r20, 0x16	; 22
     a96:	50 e0       	ldi	r21, 0x00	; 0
     a98:	66 e6       	ldi	r22, 0x66	; 102
     a9a:	78 e0       	ldi	r23, 0x08	; 8
     a9c:	80 91 7c 08 	lds	r24, 0x087C	; 0x80087c <_uplinkmessageBuffer>
     aa0:	90 91 7d 08 	lds	r25, 0x087D	; 0x80087d <_uplinkmessageBuffer+0x1>
     aa4:	0e 94 1b 13 	call	0x2636	; 0x2636 <xStreamBufferSend>
     aa8:	0f b6       	in	r0, 0x3f	; 63
     aaa:	f8 94       	cli
     aac:	de bf       	out	0x3e, r29	; 62
     aae:	0f be       	out	0x3f, r0	; 63
     ab0:	cd bf       	out	0x3d, r28	; 61
     ab2:	66 96       	adiw	r28, 0x16	; 22
		//}
		//if the device is not on, wait a bit and check if anything is changed
		//else vTaskDelay(5000);
		
	}
}
     ab4:	0f b6       	in	r0, 0x3f	; 63
     ab6:	f8 94       	cli
     ab8:	de bf       	out	0x3e, r29	; 62
     aba:	0f be       	out	0x3f, r0	; 63
     abc:	cd bf       	out	0x3d, r28	; 61
     abe:	df 91       	pop	r29
     ac0:	cf 91       	pop	r28
     ac2:	1f 91       	pop	r17
     ac4:	0f 91       	pop	r16
     ac6:	ff 90       	pop	r15
     ac8:	ef 90       	pop	r14
     aca:	df 90       	pop	r13
     acc:	cf 90       	pop	r12
     ace:	bf 90       	pop	r11
     ad0:	af 90       	pop	r10
     ad2:	08 95       	ret

00000ad4 <device_executeTask>:
     ad4:	ec 01       	movw	r28, r24
}

//devided so we can test
void device_executeTask(device_t self) {
	for (;;)
		device_startMeasuring(self);
     ad6:	ce 01       	movw	r24, r28
     ad8:	49 df       	rcall	.-366    	; 0x96c <device_startMeasuring>
     ada:	fd cf       	rjmp	.-6      	; 0xad6 <device_executeTask+0x2>

00000adc <lora_DownLinkHandler_create>:
static char _out_buf[100];



void lora_DownLinkHandler_create(UBaseType_t lora_handler_task_priority, MessageBufferHandle_t xMessageBuffer,bool isSet)
{
     adc:	ef 92       	push	r14
     ade:	ff 92       	push	r15
     ae0:	0f 93       	push	r16
     ae2:	9b 01       	movw	r18, r22
	_isSet=isSet;
     ae4:	40 93 ee 08 	sts	0x08EE, r20	; 0x8008ee <_isSet>
	xTaskCreate(
     ae8:	e1 2c       	mov	r14, r1
     aea:	f1 2c       	mov	r15, r1
     aec:	08 2f       	mov	r16, r24
     aee:	48 e8       	ldi	r20, 0x88	; 136
     af0:	51 e0       	ldi	r21, 0x01	; 1
     af2:	6d ec       	ldi	r22, 0xCD	; 205
     af4:	72 e0       	ldi	r23, 0x02	; 2
     af6:	87 ee       	ldi	r24, 0xE7	; 231
     af8:	96 e0       	ldi	r25, 0x06	; 6
     afa:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <xTaskCreate>
	,  configMINIMAL_STACK_SIZE+200  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  xMessageBuffer
	,  lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
	
}
     afe:	0f 91       	pop	r16
     b00:	ff 90       	pop	r15
     b02:	ef 90       	pop	r14
     b04:	08 95       	ret

00000b06 <lora_DownLinkHandler_task>:
		}
	}
}

	void lora_DownLinkHandler_task(MessageBufferHandle_t xMessageBuffer)
	{
     b06:	df 92       	push	r13
     b08:	ef 92       	push	r14
     b0a:	ff 92       	push	r15
     b0c:	0f 93       	push	r16
     b0e:	1f 93       	push	r17
     b10:	cf 93       	push	r28
     b12:	df 93       	push	r29
     b14:	7c 01       	movw	r14, r24
		size_t xBytesToSend;
		char rxData[50];
		
		
			if (!_isSet)
     b16:	80 91 ee 08 	lds	r24, 0x08EE	; 0x8008ee <_isSet>
     b1a:	81 11       	cpse	r24, r1
     b1c:	d0 c0       	rjmp	.+416    	; 0xcbe <lora_DownLinkHandler_task+0x1b8>
			{
				// Hardware reset of LoRaWAN transceiver
				lora_driver_reset_rn2483(1);
     b1e:	81 e0       	ldi	r24, 0x01	; 1
     b20:	0e 94 30 23 	call	0x4660	; 0x4660 <lora_driver_reset_rn2483>
				vTaskDelay(2);
     b24:	62 e0       	ldi	r22, 0x02	; 2
     b26:	70 e0       	ldi	r23, 0x00	; 0
     b28:	80 e0       	ldi	r24, 0x00	; 0
     b2a:	90 e0       	ldi	r25, 0x00	; 0
     b2c:	0e 94 0b 18 	call	0x3016	; 0x3016 <vTaskDelay>
				lora_driver_reset_rn2483(0);
     b30:	80 e0       	ldi	r24, 0x00	; 0
     b32:	0e 94 30 23 	call	0x4660	; 0x4660 <lora_driver_reset_rn2483>
				// Give it a chance to wakeup
				vTaskDelay(150);
     b36:	66 e9       	ldi	r22, 0x96	; 150
     b38:	70 e0       	ldi	r23, 0x00	; 0
     b3a:	80 e0       	ldi	r24, 0x00	; 0
     b3c:	90 e0       	ldi	r25, 0x00	; 0
     b3e:	0e 94 0b 18 	call	0x3016	; 0x3016 <vTaskDelay>

				lora_driver_flush_buffers(); // get rid of first version string from module after reset!
     b42:	0e 94 e6 22 	call	0x45cc	; 0x45cc <lora_driver_flush_buffers>
}

static void _lora_setup(void)
{
	e_LoRa_return_code_t rc;
	led_slow_blink(led_ST2); // OPTIONAL: Led the green led blink slowly while we are setting up LoRa
     b46:	81 e0       	ldi	r24, 0x01	; 1
     b48:	0e 94 3e 21 	call	0x427c	; 0x427c <led_slow_blink>
	//The below code is required to be executed only once due to the fact that these MAC settings
	// can be stored inside of the tranciever
	//START ON ONE TIME USE CODE
	
	// Factory reset the transceiver
	printf("FactoryReset >%s<\n", lora_driver_map_return_code_to_text(lora_driver_rn2483_factory_reset()));
     b4c:	0e 94 44 23 	call	0x4688	; 0x4688 <lora_driver_rn2483_factory_reset>
     b50:	0e 94 c1 25 	call	0x4b82	; 0x4b82 <lora_driver_map_return_code_to_text>
     b54:	9f 93       	push	r25
     b56:	8f 93       	push	r24
     b58:	86 ed       	ldi	r24, 0xD6	; 214
     b5a:	92 e0       	ldi	r25, 0x02	; 2
     b5c:	9f 93       	push	r25
     b5e:	8f 93       	push	r24
     b60:	0e 94 c6 2f 	call	0x5f8c	; 0x5f8c <printf>
	
	// Configure to EU868 LoRaWAN standards
	printf("Configure to EU868 >%s<\n", lora_driver_map_return_code_to_text(lora_driver_configure_to_eu868()));
     b64:	0e 94 c2 24 	call	0x4984	; 0x4984 <lora_driver_configure_to_eu868>
     b68:	0e 94 c1 25 	call	0x4b82	; 0x4b82 <lora_driver_map_return_code_to_text>
     b6c:	9f 93       	push	r25
     b6e:	8f 93       	push	r24
     b70:	89 ee       	ldi	r24, 0xE9	; 233
     b72:	92 e0       	ldi	r25, 0x02	; 2
     b74:	9f 93       	push	r25
     b76:	8f 93       	push	r24
     b78:	0e 94 c6 2f 	call	0x5f8c	; 0x5f8c <printf>

	// Get the transceivers HW EUI
	rc = lora_driver_get_rn2483_hweui(_out_buf);
     b7c:	8a e8       	ldi	r24, 0x8A	; 138
     b7e:	98 e0       	ldi	r25, 0x08	; 8
     b80:	0e 94 56 23 	call	0x46ac	; 0x46ac <lora_driver_get_rn2483_hweui>
	printf("Get HWEUI >%s<: %s\n",lora_driver_map_return_code_to_text(rc), _out_buf);
     b84:	0e 94 c1 25 	call	0x4b82	; 0x4b82 <lora_driver_map_return_code_to_text>
     b88:	ca e8       	ldi	r28, 0x8A	; 138
     b8a:	d8 e0       	ldi	r29, 0x08	; 8
     b8c:	df 93       	push	r29
     b8e:	cf 93       	push	r28
     b90:	9f 93       	push	r25
     b92:	8f 93       	push	r24
     b94:	82 e0       	ldi	r24, 0x02	; 2
     b96:	93 e0       	ldi	r25, 0x03	; 3
     b98:	9f 93       	push	r25
     b9a:	8f 93       	push	r24
     b9c:	0e 94 c6 2f 	call	0x5f8c	; 0x5f8c <printf>

	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_map_return_code_to_text(lora_driver_set_device_identifier(_out_buf)));
     ba0:	ce 01       	movw	r24, r28
     ba2:	0e 94 72 23 	call	0x46e4	; 0x46e4 <lora_driver_set_device_identifier>
     ba6:	0e 94 c1 25 	call	0x4b82	; 0x4b82 <lora_driver_map_return_code_to_text>
     baa:	9f 93       	push	r25
     bac:	8f 93       	push	r24
     bae:	df 93       	push	r29
     bb0:	cf 93       	push	r28
     bb2:	86 e1       	ldi	r24, 0x16	; 22
     bb4:	93 e0       	ldi	r25, 0x03	; 3
     bb6:	9f 93       	push	r25
     bb8:	8f 93       	push	r24
     bba:	0e 94 c6 2f 	call	0x5f8c	; 0x5f8c <printf>

	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_map_return_code_to_text(lora_driver_set_otaa_identity(LORA_appEUI,LORA_appKEY,_out_buf)));
     bbe:	ae 01       	movw	r20, r28
     bc0:	6b e2       	ldi	r22, 0x2B	; 43
     bc2:	73 e0       	ldi	r23, 0x03	; 3
     bc4:	8c e4       	ldi	r24, 0x4C	; 76
     bc6:	93 e0       	ldi	r25, 0x03	; 3
     bc8:	0e 94 a0 25 	call	0x4b40	; 0x4b40 <lora_driver_set_otaa_identity>
     bcc:	0e 94 c1 25 	call	0x4b82	; 0x4b82 <lora_driver_map_return_code_to_text>
     bd0:	9f 93       	push	r25
     bd2:	8f 93       	push	r24
     bd4:	df 93       	push	r29
     bd6:	cf 93       	push	r28
     bd8:	8b e2       	ldi	r24, 0x2B	; 43
     bda:	93 e0       	ldi	r25, 0x03	; 3
     bdc:	9f 93       	push	r25
     bde:	8f 93       	push	r24
     be0:	8c e4       	ldi	r24, 0x4C	; 76
     be2:	93 e0       	ldi	r25, 0x03	; 3
     be4:	9f 93       	push	r25
     be6:	8f 93       	push	r24
     be8:	8f e5       	ldi	r24, 0x5F	; 95
     bea:	93 e0       	ldi	r25, 0x03	; 3
     bec:	9f 93       	push	r25
     bee:	8f 93       	push	r24
     bf0:	0e 94 c6 2f 	call	0x5f8c	; 0x5f8c <printf>

	// Save all the MAC settings in the transceiver
	printf("Save mac >%s<\n",lora_driver_map_return_code_to_text(lora_driver_save_mac()));
     bf4:	0e 94 a5 23 	call	0x474a	; 0x474a <lora_driver_save_mac>
     bf8:	0e 94 c1 25 	call	0x4b82	; 0x4b82 <lora_driver_map_return_code_to_text>
     bfc:	9f 93       	push	r25
     bfe:	8f 93       	push	r24
     c00:	85 e9       	ldi	r24, 0x95	; 149
     c02:	93 e0       	ldi	r25, 0x03	; 3
     c04:	9f 93       	push	r25
     c06:	8f 93       	push	r24
     c08:	0e 94 c6 2f 	call	0x5f8c	; 0x5f8c <printf>

	//END OF ONE TIME USE CODE


	// Enable Adaptive Data Rate
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_map_return_code_to_text(lora_driver_set_adaptive_data_rate(LoRa_ON)));
     c0c:	8d b7       	in	r24, 0x3d	; 61
     c0e:	9e b7       	in	r25, 0x3e	; 62
     c10:	82 96       	adiw	r24, 0x22	; 34
     c12:	0f b6       	in	r0, 0x3f	; 63
     c14:	f8 94       	cli
     c16:	9e bf       	out	0x3e, r25	; 62
     c18:	0f be       	out	0x3f, r0	; 63
     c1a:	8d bf       	out	0x3d, r24	; 61
     c1c:	81 e0       	ldi	r24, 0x01	; 1
     c1e:	0e 94 9f 24 	call	0x493e	; 0x493e <lora_driver_set_adaptive_data_rate>
     c22:	0e 94 c1 25 	call	0x4b82	; 0x4b82 <lora_driver_map_return_code_to_text>
     c26:	9f 93       	push	r25
     c28:	8f 93       	push	r24
     c2a:	84 ea       	ldi	r24, 0xA4	; 164
     c2c:	93 e0       	ldi	r25, 0x03	; 3
     c2e:	9f 93       	push	r25
     c30:	8f 93       	push	r24
     c32:	0e 94 c6 2f 	call	0x5f8c	; 0x5f8c <printf>

	// Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	printf("Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_map_return_code_to_text(lora_driver_set_receive_delay(500)));
     c36:	84 ef       	ldi	r24, 0xF4	; 244
     c38:	91 e0       	ldi	r25, 0x01	; 1
     c3a:	0e 94 aa 24 	call	0x4954	; 0x4954 <lora_driver_set_receive_delay>
     c3e:	0e 94 c1 25 	call	0x4b82	; 0x4b82 <lora_driver_map_return_code_to_text>
     c42:	9f 93       	push	r25
     c44:	8f 93       	push	r24
     c46:	81 e0       	ldi	r24, 0x01	; 1
     c48:	8f 93       	push	r24
     c4a:	84 ef       	ldi	r24, 0xF4	; 244
     c4c:	8f 93       	push	r24
     c4e:	85 ec       	ldi	r24, 0xC5	; 197
     c50:	93 e0       	ldi	r25, 0x03	; 3
     c52:	9f 93       	push	r25
     c54:	8f 93       	push	r24
     c56:	0e 94 c6 2f 	call	0x5f8c	; 0x5f8c <printf>
     c5a:	8d b7       	in	r24, 0x3d	; 61
     c5c:	9e b7       	in	r25, 0x3e	; 62
     c5e:	0a 96       	adiw	r24, 0x0a	; 10
     c60:	0f b6       	in	r0, 0x3f	; 63
     c62:	f8 94       	cli
     c64:	9e bf       	out	0x3e, r25	; 62
     c66:	0f be       	out	0x3f, r0	; 63
     c68:	8d bf       	out	0x3d, r24	; 61
     c6a:	ca e0       	ldi	r28, 0x0A	; 10
     c6c:	d0 e0       	ldi	r29, 0x00	; 0
	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
	
	do {
		rc = lora_driver_join(LoRa_OTAA);
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_map_return_code_to_text(rc));
     c6e:	05 ee       	ldi	r16, 0xE5	; 229
     c70:	13 e0       	ldi	r17, 0x03	; 3

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
	
	do {
		rc = lora_driver_join(LoRa_OTAA);
     c72:	80 e0       	ldi	r24, 0x00	; 0
     c74:	0e 94 ab 23 	call	0x4756	; 0x4756 <lora_driver_join>
     c78:	d8 2e       	mov	r13, r24
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_map_return_code_to_text(rc));
     c7a:	0e 94 c1 25 	call	0x4b82	; 0x4b82 <lora_driver_map_return_code_to_text>
     c7e:	9f 93       	push	r25
     c80:	8f 93       	push	r24
     c82:	df 93       	push	r29
     c84:	cf 93       	push	r28
     c86:	1f 93       	push	r17
     c88:	0f 93       	push	r16
     c8a:	0e 94 c6 2f 	call	0x5f8c	; 0x5f8c <printf>

		if ( rc != LoRa_ACCEPTED)
     c8e:	0f 90       	pop	r0
     c90:	0f 90       	pop	r0
     c92:	0f 90       	pop	r0
     c94:	0f 90       	pop	r0
     c96:	0f 90       	pop	r0
     c98:	0f 90       	pop	r0
     c9a:	88 e0       	ldi	r24, 0x08	; 8
     c9c:	d8 16       	cp	r13, r24
     c9e:	09 f4       	brne	.+2      	; 0xca2 <lora_DownLinkHandler_task+0x19c>
     ca0:	80 c0       	rjmp	.+256    	; 0xda2 <lora_DownLinkHandler_task+0x29c>
		{
			// Make the red led pulse to tell something went wrong
			led_long_puls(led_ST1); // OPTIONAL
     ca2:	80 e0       	ldi	r24, 0x00	; 0
     ca4:	0e 94 aa 21 	call	0x4354	; 0x4354 <led_long_puls>
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
     ca8:	66 e3       	ldi	r22, 0x36	; 54
     caa:	71 e0       	ldi	r23, 0x01	; 1
     cac:	80 e0       	ldi	r24, 0x00	; 0
     cae:	90 e0       	ldi	r25, 0x00	; 0
     cb0:	0e 94 0b 18 	call	0x3016	; 0x3016 <vTaskDelay>
     cb4:	21 97       	sbiw	r28, 0x01	; 1
		}
		else
		{
			break;
		}
	} while (--maxJoinTriesLeft);
     cb6:	e9 f6       	brne	.-70     	; 0xc72 <lora_DownLinkHandler_task+0x16c>
     cb8:	7b c0       	rjmp	.+246    	; 0xdb0 <lora_DownLinkHandler_task+0x2aa>

		// Switches to another task with a priority of equal or greater size. If no such task is found it stays on the same.
		//Perhaps it should be in a loop if the task itself is in  a loop
		while (1)
		{
			taskYIELD();
     cba:	eb d6       	rcall	.+3542   	; 0x1a92 <vPortYield>
     cbc:	fe cf       	rjmp	.-4      	; 0xcba <lora_DownLinkHandler_task+0x1b4>
				_lora_setup();
				_isSet=true;
			}
		
		size_t xBytesReceived;
		xBytesReceived = xMessageBufferReceive(xMessageBuffer,(void*) &_downlink_payload,sizeof(lora_payload_t),portMAX_DELAY);
     cbe:	0f ef       	ldi	r16, 0xFF	; 255
     cc0:	1f ef       	ldi	r17, 0xFF	; 255
     cc2:	98 01       	movw	r18, r16
     cc4:	46 e1       	ldi	r20, 0x16	; 22
     cc6:	50 e0       	ldi	r21, 0x00	; 0
     cc8:	6f ee       	ldi	r22, 0xEF	; 239
     cca:	78 e0       	ldi	r23, 0x08	; 8
     ccc:	c7 01       	movw	r24, r14
     cce:	0e 94 08 14 	call	0x2810	; 0x2810 <xStreamBufferReceive>
		
		//decode the received paylaod assuming we have only temperature_setting
		//Check that the lenght we've received is two as expected
		
		uint8_t command = _downlink_payload.bytes[0] + _downlink_payload.bytes[1];
     cd2:	ef ee       	ldi	r30, 0xEF	; 239
     cd4:	f8 e0       	ldi	r31, 0x08	; 8
     cd6:	12 81       	ldd	r17, Z+2	; 0x02
     cd8:	83 81       	ldd	r24, Z+3	; 0x03
     cda:	18 0f       	add	r17, r24

		bool* value = calloc(sizeof(bool), 1);
     cdc:	61 e0       	ldi	r22, 0x01	; 1
     cde:	70 e0       	ldi	r23, 0x00	; 0
     ce0:	81 e0       	ldi	r24, 0x01	; 1
     ce2:	90 e0       	ldi	r25, 0x00	; 0
     ce4:	0e 94 28 2e 	call	0x5c50	; 0x5c50 <calloc>
     ce8:	ec 01       	movw	r28, r24
		
		
		switch(command)
     cea:	1d 32       	cpi	r17, 0x2D	; 45
     cec:	d9 f0       	breq	.+54     	; 0xd24 <lora_DownLinkHandler_task+0x21e>
     cee:	18 f4       	brcc	.+6      	; 0xcf6 <lora_DownLinkHandler_task+0x1f0>
     cf0:	1c 32       	cpi	r17, 0x2C	; 44
     cf2:	31 f0       	breq	.+12     	; 0xd00 <lora_DownLinkHandler_task+0x1fa>
     cf4:	4d c0       	rjmp	.+154    	; 0xd90 <lora_DownLinkHandler_task+0x28a>
     cf6:	18 33       	cpi	r17, 0x38	; 56
     cf8:	39 f1       	breq	.+78     	; 0xd48 <lora_DownLinkHandler_task+0x242>
     cfa:	19 33       	cpi	r17, 0x39	; 57
     cfc:	b9 f1       	breq	.+110    	; 0xd6c <lora_DownLinkHandler_task+0x266>
     cfe:	48 c0       	rjmp	.+144    	; 0xd90 <lora_DownLinkHandler_task+0x28a>
		{
		//D0
		case 44:
			configuration_setWorking(false);
     d00:	80 e0       	ldi	r24, 0x00	; 0
     d02:	bb dc       	rcall	.-1674   	; 0x67a <configuration_setWorking>
			configuration_getWorking(value);
     d04:	ce 01       	movw	r24, r28
     d06:	dd dc       	rcall	.-1606   	; 0x6c2 <configuration_getWorking>
     d08:	88 81       	ld	r24, Y
			printf("The bool for device is set to %d",*value);
     d0a:	1f 92       	push	r1
     d0c:	8f 93       	push	r24
     d0e:	85 e0       	ldi	r24, 0x05	; 5
     d10:	94 e0       	ldi	r25, 0x04	; 4
     d12:	9f 93       	push	r25
     d14:	8f 93       	push	r24
     d16:	0e 94 c6 2f 	call	0x5f8c	; 0x5f8c <printf>
     d1a:	0f 90       	pop	r0
			break;
     d1c:	0f 90       	pop	r0
     d1e:	0f 90       	pop	r0
     d20:	0f 90       	pop	r0
     d22:	4d c0       	rjmp	.+154    	; 0xdbe <lora_DownLinkHandler_task+0x2b8>
		//D1
		case 45 :
			configuration_setWorking(true);
     d24:	81 e0       	ldi	r24, 0x01	; 1
     d26:	a9 dc       	rcall	.-1710   	; 0x67a <configuration_setWorking>
			configuration_getWorking(value);
     d28:	ce 01       	movw	r24, r28
     d2a:	cb dc       	rcall	.-1642   	; 0x6c2 <configuration_getWorking>
     d2c:	88 81       	ld	r24, Y
			printf("The bool for device is set to %d",*value);
     d2e:	1f 92       	push	r1
     d30:	8f 93       	push	r24
     d32:	85 e0       	ldi	r24, 0x05	; 5
     d34:	94 e0       	ldi	r25, 0x04	; 4
     d36:	9f 93       	push	r25
     d38:	8f 93       	push	r24
     d3a:	0e 94 c6 2f 	call	0x5f8c	; 0x5f8c <printf>
     d3e:	0f 90       	pop	r0
			break;
     d40:	0f 90       	pop	r0
     d42:	0f 90       	pop	r0
     d44:	0f 90       	pop	r0
		//V0
		case 56:
			configuration_setVentilation(false);
     d46:	3b c0       	rjmp	.+118    	; 0xdbe <lora_DownLinkHandler_task+0x2b8>
     d48:	80 e0       	ldi	r24, 0x00	; 0
     d4a:	df dc       	rcall	.-1602   	; 0x70a <configuration_setVentilation>
			configuration_getVentilation(value);
     d4c:	ce 01       	movw	r24, r28
     d4e:	01 dd       	rcall	.-1534   	; 0x752 <configuration_getVentilation>
     d50:	88 81       	ld	r24, Y
			printf("The bool for ventilation is set to %d",*value);
     d52:	1f 92       	push	r1
     d54:	8f 93       	push	r24
     d56:	86 e2       	ldi	r24, 0x26	; 38
     d58:	94 e0       	ldi	r25, 0x04	; 4
     d5a:	9f 93       	push	r25
     d5c:	8f 93       	push	r24
     d5e:	0e 94 c6 2f 	call	0x5f8c	; 0x5f8c <printf>
			break;
     d62:	0f 90       	pop	r0
     d64:	0f 90       	pop	r0
     d66:	0f 90       	pop	r0
     d68:	0f 90       	pop	r0
		//V1
		case 57:
			configuration_setVentilation(true);
     d6a:	29 c0       	rjmp	.+82     	; 0xdbe <lora_DownLinkHandler_task+0x2b8>
     d6c:	81 e0       	ldi	r24, 0x01	; 1
     d6e:	cd dc       	rcall	.-1638   	; 0x70a <configuration_setVentilation>
			configuration_getVentilation(value);
     d70:	ce 01       	movw	r24, r28
     d72:	ef dc       	rcall	.-1570   	; 0x752 <configuration_getVentilation>
     d74:	88 81       	ld	r24, Y
			printf("The bool for ventilation is set to %d",*value);
     d76:	1f 92       	push	r1
     d78:	8f 93       	push	r24
     d7a:	86 e2       	ldi	r24, 0x26	; 38
     d7c:	94 e0       	ldi	r25, 0x04	; 4
     d7e:	9f 93       	push	r25
     d80:	8f 93       	push	r24
     d82:	0e 94 c6 2f 	call	0x5f8c	; 0x5f8c <printf>
     d86:	0f 90       	pop	r0
			break;
     d88:	0f 90       	pop	r0
     d8a:	0f 90       	pop	r0
     d8c:	0f 90       	pop	r0
     d8e:	17 c0       	rjmp	.+46     	; 0xdbe <lora_DownLinkHandler_task+0x2b8>
     d90:	8c e4       	ldi	r24, 0x4C	; 76
		default:
		printf("Invalid command");
     d92:	94 e0       	ldi	r25, 0x04	; 4
     d94:	9f 93       	push	r25
     d96:	8f 93       	push	r24
     d98:	0e 94 c6 2f 	call	0x5f8c	; 0x5f8c <printf>
     d9c:	0f 90       	pop	r0
			break;
     d9e:	0f 90       	pop	r0
     da0:	0e c0       	rjmp	.+28     	; 0xdbe <lora_DownLinkHandler_task+0x2b8>
		}
		
}
     da2:	81 e0       	ldi	r24, 0x01	; 1

	if (rc == LoRa_ACCEPTED)
	{
		// Connected to LoRaWAN :-)
		// Make the green led steady
		led_led_on(led_ST2); // OPTIONAL
     da4:	0e 94 8c 21 	call	0x4318	; 0x4318 <led_led_on>
     da8:	81 e0       	ldi	r24, 0x01	; 1
				vTaskDelay(150);

				lora_driver_flush_buffers(); // get rid of first version string from module after reset!

				_lora_setup();
				_isSet=true;
     daa:	80 93 ee 08 	sts	0x08EE, r24	; 0x8008ee <_isSet>
     dae:	87 cf       	rjmp	.-242    	; 0xcbe <lora_DownLinkHandler_task+0x1b8>
     db0:	81 e0       	ldi	r24, 0x01	; 1
	}
	else
	{
		// Something went wrong
		// Turn off the green led
		led_led_off(led_ST2); // OPTIONAL
     db2:	0e 94 9b 21 	call	0x4336	; 0x4336 <led_led_off>
     db6:	80 e0       	ldi	r24, 0x00	; 0
		// Make the red led blink fast to tell something went wrong
		led_fast_blink(led_ST1); // OPTIONAL
     db8:	0e 94 65 21 	call	0x42ca	; 0x42ca <led_fast_blink>
     dbc:	7e cf       	rjmp	.-260    	; 0xcba <lora_DownLinkHandler_task+0x1b4>
     dbe:	df 91       	pop	r29
		default:
		printf("Invalid command");
			break;
		}
		
}
     dc0:	cf 91       	pop	r28
     dc2:	1f 91       	pop	r17
     dc4:	0f 91       	pop	r16
     dc6:	ff 90       	pop	r15
     dc8:	ef 90       	pop	r14
     dca:	df 90       	pop	r13
     dcc:	08 95       	ret

00000dce <lora_DownLinkHandler_startTask>:
     dce:	ec 01       	movw	r28, r24

void lora_DownLinkHandler_startTask(MessageBufferHandle_t xMessageBuffer){
	for(;;)
	{
		lora_DownLinkHandler_task(xMessageBuffer);
     dd0:	ce 01       	movw	r24, r28
     dd2:	99 de       	rcall	.-718    	; 0xb06 <lora_DownLinkHandler_task>
		vTaskDelay(3000);
     dd4:	68 eb       	ldi	r22, 0xB8	; 184
     dd6:	7b e0       	ldi	r23, 0x0B	; 11
     dd8:	80 e0       	ldi	r24, 0x00	; 0
     dda:	90 e0       	ldi	r25, 0x00	; 0
     ddc:	0e 94 0b 18 	call	0x3016	; 0x3016 <vTaskDelay>
     de0:	f7 cf       	rjmp	.-18     	; 0xdd0 <lora_DownLinkHandler_startTask+0x2>

00000de2 <humAndTempReader_create>:
void humAndTempReader_destroy(humAndTempReader_t self) {
	if (self == NULL)
	return;

	//delete will clear the allocated memory to the task + we need to remove everything else
	vTaskDelete(self->handleTask);
     de2:	2f 92       	push	r2
     de4:	3f 92       	push	r3
     de6:	4f 92       	push	r4
     de8:	5f 92       	push	r5
     dea:	6f 92       	push	r6
     dec:	7f 92       	push	r7
     dee:	8f 92       	push	r8
     df0:	9f 92       	push	r9
     df2:	af 92       	push	r10
     df4:	bf 92       	push	r11
     df6:	cf 92       	push	r12
     df8:	df 92       	push	r13
     dfa:	ef 92       	push	r14
     dfc:	ff 92       	push	r15
     dfe:	0f 93       	push	r16
     e00:	1f 93       	push	r17
     e02:	cf 93       	push	r28
     e04:	df 93       	push	r29
     e06:	88 2e       	mov	r8, r24
     e08:	96 2e       	mov	r9, r22
     e0a:	1a 01       	movw	r2, r20
     e0c:	28 01       	movw	r4, r16
     e0e:	39 01       	movw	r6, r18
     e10:	61 e0       	ldi	r22, 0x01	; 1
     e12:	70 e0       	ldi	r23, 0x00	; 0
     e14:	86 e0       	ldi	r24, 0x06	; 6
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	0e 94 28 2e 	call	0x5c50	; 0x5c50 <calloc>
     e1c:	ec 01       	movw	r28, r24
     e1e:	00 97       	sbiw	r24, 0x00	; 0
     e20:	91 f1       	breq	.+100    	; 0xe86 <humAndTempReader_create+0xa4>
     e22:	19 82       	std	Y+1, r1	; 0x01
     e24:	18 82       	st	Y, r1
     e26:	1b 82       	std	Y+3, r1	; 0x03
     e28:	1a 82       	std	Y+2, r1	; 0x02
     e2a:	30 92 10 09 	sts	0x0910, r3	; 0x800910 <_startMeasureEventGroup+0x1>
     e2e:	20 92 0f 09 	sts	0x090F, r2	; 0x80090f <_startMeasureEventGroup>
     e32:	40 92 0b 09 	sts	0x090B, r4	; 0x80090b <_startMeasureBit>
     e36:	50 92 0c 09 	sts	0x090C, r5	; 0x80090c <_startMeasureBit+0x1>
     e3a:	60 92 0d 09 	sts	0x090D, r6	; 0x80090d <_startMeasureBit+0x2>
     e3e:	70 92 0e 09 	sts	0x090E, r7	; 0x80090e <_startMeasureBit+0x3>
     e42:	f0 92 0a 09 	sts	0x090A, r15	; 0x80090a <_readyEventGroup+0x1>
     e46:	e0 92 09 09 	sts	0x0909, r14	; 0x800909 <_readyEventGroup>
     e4a:	a0 92 05 09 	sts	0x0905, r10	; 0x800905 <_readyBit>
     e4e:	b0 92 06 09 	sts	0x0906, r11	; 0x800906 <_readyBit+0x1>
     e52:	c0 92 07 09 	sts	0x0907, r12	; 0x800907 <_readyBit+0x2>
     e56:	d0 92 08 09 	sts	0x0908, r13	; 0x800908 <_readyBit+0x3>
     e5a:	49 2d       	mov	r20, r9
     e5c:	50 e0       	ldi	r21, 0x00	; 0
     e5e:	7c 01       	movw	r14, r24
     e60:	84 e0       	ldi	r24, 0x04	; 4
     e62:	e8 0e       	add	r14, r24
     e64:	f1 1c       	adc	r15, r1
     e66:	08 2d       	mov	r16, r8
     e68:	9e 01       	movw	r18, r28
     e6a:	6c e5       	ldi	r22, 0x5C	; 92
     e6c:	74 e0       	ldi	r23, 0x04	; 4
     e6e:	89 ed       	ldi	r24, 0xD9	; 217
     e70:	97 e0       	ldi	r25, 0x07	; 7
     e72:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <xTaskCreate>
     e76:	8d e6       	ldi	r24, 0x6D	; 109
     e78:	94 e0       	ldi	r25, 0x04	; 4
     e7a:	9f 93       	push	r25
     e7c:	8f 93       	push	r24
     e7e:	0e 94 c6 2f 	call	0x5f8c	; 0x5f8c <printf>
     e82:	0f 90       	pop	r0
     e84:	0f 90       	pop	r0
     e86:	ce 01       	movw	r24, r28
     e88:	df 91       	pop	r29
     e8a:	cf 91       	pop	r28
     e8c:	1f 91       	pop	r17
     e8e:	0f 91       	pop	r16
     e90:	ff 90       	pop	r15
     e92:	ef 90       	pop	r14
     e94:	df 90       	pop	r13
     e96:	cf 90       	pop	r12
     e98:	bf 90       	pop	r11
     e9a:	af 90       	pop	r10
     e9c:	9f 90       	pop	r9
     e9e:	8f 90       	pop	r8
     ea0:	7f 90       	pop	r7
     ea2:	6f 90       	pop	r6
     ea4:	5f 90       	pop	r5
     ea6:	4f 90       	pop	r4
     ea8:	3f 90       	pop	r3
     eaa:	2f 90       	pop	r2
     eac:	08 95       	ret

00000eae <humAndTempReader_measure>:
	for (;;) {
		humAndTempReader_measure(self);
	}
}

void humAndTempReader_measure(humAndTempReader_t self) {//dummy
     eae:	cf 92       	push	r12
     eb0:	df 92       	push	r13
     eb2:	ef 92       	push	r14
     eb4:	ff 92       	push	r15
     eb6:	0f 93       	push	r16
     eb8:	1f 93       	push	r17
     eba:	cf 93       	push	r28
     ebc:	df 93       	push	r29
     ebe:	ec 01       	movw	r28, r24
	EventBits_t uxBits = xEventGroupWaitBits(_startMeasureEventGroup, //eventGroup
     ec0:	40 91 0b 09 	lds	r20, 0x090B	; 0x80090b <_startMeasureBit>
     ec4:	50 91 0c 09 	lds	r21, 0x090C	; 0x80090c <_startMeasureBit+0x1>
     ec8:	60 91 0d 09 	lds	r22, 0x090D	; 0x80090d <_startMeasureBit+0x2>
     ecc:	70 91 0e 09 	lds	r23, 0x090E	; 0x80090e <_startMeasureBit+0x3>
     ed0:	cc 24       	eor	r12, r12
     ed2:	ca 94       	dec	r12
     ed4:	dc 2c       	mov	r13, r12
     ed6:	76 01       	movw	r14, r12
     ed8:	01 e0       	ldi	r16, 0x01	; 1
     eda:	21 e0       	ldi	r18, 0x01	; 1
     edc:	80 91 0f 09 	lds	r24, 0x090F	; 0x80090f <_startMeasureEventGroup>
     ee0:	90 91 10 09 	lds	r25, 0x0910	; 0x800910 <_startMeasureEventGroup+0x1>
     ee4:	fe d1       	rcall	.+1020   	; 0x12e2 <xEventGroupWaitBits>
	_startMeasureBit, //bits it is interested i
	pdTRUE, //clears the bits
	pdTRUE, //waits for both bits to be set
	portMAX_DELAY); //wait

	if ((uxBits & (_startMeasureBit)) == (_startMeasureBit)) {
     ee6:	00 91 0b 09 	lds	r16, 0x090B	; 0x80090b <_startMeasureBit>
     eea:	10 91 0c 09 	lds	r17, 0x090C	; 0x80090c <_startMeasureBit+0x1>
     eee:	20 91 0d 09 	lds	r18, 0x090D	; 0x80090d <_startMeasureBit+0x2>
     ef2:	30 91 0e 09 	lds	r19, 0x090E	; 0x80090e <_startMeasureBit+0x3>
     ef6:	dc 01       	movw	r26, r24
     ef8:	cb 01       	movw	r24, r22
     efa:	80 23       	and	r24, r16
     efc:	91 23       	and	r25, r17
     efe:	a2 23       	and	r26, r18
     f00:	b3 23       	and	r27, r19
     f02:	08 17       	cp	r16, r24
     f04:	19 07       	cpc	r17, r25
     f06:	2a 07       	cpc	r18, r26
     f08:	3b 07       	cpc	r19, r27
     f0a:	09 f0       	breq	.+2      	; 0xf0e <humAndTempReader_measure+0x60>
     f0c:	49 c0       	rjmp	.+146    	; 0xfa0 <humAndTempReader_measure+0xf2>
		hih8120Wakeup();
     f0e:	0e 94 af 1f 	call	0x3f5e	; 0x3f5e <hih8120Wakeup>
		vTaskDelay(50);
     f12:	62 e3       	ldi	r22, 0x32	; 50
     f14:	70 e0       	ldi	r23, 0x00	; 0
     f16:	80 e0       	ldi	r24, 0x00	; 0
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	0e 94 0b 18 	call	0x3016	; 0x3016 <vTaskDelay>
		hih8120Meassure();
     f1e:	0e 94 c4 1f 	call	0x3f88	; 0x3f88 <hih8120Meassure>
		vTaskDelay(5);
     f22:	65 e0       	ldi	r22, 0x05	; 5
     f24:	70 e0       	ldi	r23, 0x00	; 0
     f26:	80 e0       	ldi	r24, 0x00	; 0
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	0e 94 0b 18 	call	0x3016	; 0x3016 <vTaskDelay>
		if(hih8120IsReady())
     f2e:	0e 94 ac 1f 	call	0x3f58	; 0x3f58 <hih8120IsReady>
     f32:	88 23       	and	r24, r24
     f34:	41 f1       	breq	.+80     	; 0xf86 <humAndTempReader_measure+0xd8>
		{
			self->humidity = hih8120GetHumidityPercent_x10();
     f36:	0e 94 ea 1f 	call	0x3fd4	; 0x3fd4 <hih8120GetHumidityPercent_x10>
     f3a:	99 83       	std	Y+1, r25	; 0x01
     f3c:	88 83       	st	Y, r24
			self->temperature = hih8120GetTemperature_x10();
     f3e:	0e 94 10 20 	call	0x4020	; 0x4020 <hih8120GetTemperature_x10>
     f42:	9b 83       	std	Y+3, r25	; 0x03
     f44:	8a 83       	std	Y+2, r24	; 0x02
			printf("humidity and temperature done bit set\n");
     f46:	8c e8       	ldi	r24, 0x8C	; 140
     f48:	94 e0       	ldi	r25, 0x04	; 4
     f4a:	0e 94 d9 2f 	call	0x5fb2	; 0x5fb2 <puts>
			printf("Humidity: %u\n", self->humidity);
     f4e:	89 81       	ldd	r24, Y+1	; 0x01
     f50:	8f 93       	push	r24
     f52:	88 81       	ld	r24, Y
     f54:	8f 93       	push	r24
     f56:	82 eb       	ldi	r24, 0xB2	; 178
     f58:	94 e0       	ldi	r25, 0x04	; 4
     f5a:	9f 93       	push	r25
     f5c:	8f 93       	push	r24
     f5e:	0e 94 c6 2f 	call	0x5f8c	; 0x5f8c <printf>
			printf("TEMP: %d\n", self->temperature);
     f62:	8b 81       	ldd	r24, Y+3	; 0x03
     f64:	8f 93       	push	r24
     f66:	8a 81       	ldd	r24, Y+2	; 0x02
     f68:	8f 93       	push	r24
     f6a:	80 ec       	ldi	r24, 0xC0	; 192
     f6c:	94 e0       	ldi	r25, 0x04	; 4
     f6e:	9f 93       	push	r25
     f70:	8f 93       	push	r24
     f72:	0e 94 c6 2f 	call	0x5f8c	; 0x5f8c <printf>
     f76:	8d b7       	in	r24, 0x3d	; 61
     f78:	9e b7       	in	r25, 0x3e	; 62
     f7a:	08 96       	adiw	r24, 0x08	; 8
     f7c:	0f b6       	in	r0, 0x3f	; 63
     f7e:	f8 94       	cli
     f80:	9e bf       	out	0x3e, r25	; 62
     f82:	0f be       	out	0x3f, r0	; 63
     f84:	8d bf       	out	0x3d, r24	; 61
		}
		//set done bit so that device knows meassurement is done
		xEventGroupSetBits(_readyEventGroup, _readyBit);
     f86:	40 91 05 09 	lds	r20, 0x0905	; 0x800905 <_readyBit>
     f8a:	50 91 06 09 	lds	r21, 0x0906	; 0x800906 <_readyBit+0x1>
     f8e:	60 91 07 09 	lds	r22, 0x0907	; 0x800907 <_readyBit+0x2>
     f92:	70 91 08 09 	lds	r23, 0x0908	; 0x800908 <_readyBit+0x3>
     f96:	80 91 09 09 	lds	r24, 0x0909	; 0x800909 <_readyEventGroup>
     f9a:	90 91 0a 09 	lds	r25, 0x090A	; 0x80090a <_readyEventGroup+0x1>
     f9e:	61 d2       	rcall	.+1218   	; 0x1462 <xEventGroupSetBits>
	}
}
     fa0:	df 91       	pop	r29
     fa2:	cf 91       	pop	r28
     fa4:	1f 91       	pop	r17
     fa6:	0f 91       	pop	r16
     fa8:	ff 90       	pop	r15
     faa:	ef 90       	pop	r14
     fac:	df 90       	pop	r13
     fae:	cf 90       	pop	r12
     fb0:	08 95       	ret

00000fb2 <humAndTempReader_executeTask>:
	//free(self->temperature);
	//free(self);
}

//actual task, methods devided so that it is possible to test
void humAndTempReader_executeTask(humAndTempReader_t self) {
     fb2:	ec 01       	movw	r28, r24
	for (;;) {
		humAndTempReader_measure(self);
     fb4:	ce 01       	movw	r24, r28
     fb6:	7b df       	rcall	.-266    	; 0xeae <humAndTempReader_measure>
     fb8:	fd cf       	rjmp	.-6      	; 0xfb4 <humAndTempReader_executeTask+0x2>

00000fba <humAndTempReader_getHumidity>:
	}
}

uint16_t humAndTempReader_getHumidity(humAndTempReader_t self){
	return self->humidity;
}
     fba:	fc 01       	movw	r30, r24
     fbc:	80 81       	ld	r24, Z
     fbe:	91 81       	ldd	r25, Z+1	; 0x01
     fc0:	08 95       	ret

00000fc2 <humAndTempReader_getTemperature>:

int16_t humAndTempReader_getTemperature(humAndTempReader_t self){
	return self->temperature;
}
     fc2:	fc 01       	movw	r30, r24
     fc4:	82 81       	ldd	r24, Z+2	; 0x02
     fc6:	93 81       	ldd	r25, Z+3	; 0x03
     fc8:	08 95       	ret

00000fca <lora_UpLinkHandler_create>:
/*Check for the parameters*/



void lora_UpLinkHandler_create(UBaseType_t lora_handler_task_priority, MessageBufferHandle_t xMessageBuffer)
{
     fca:	ef 92       	push	r14
     fcc:	ff 92       	push	r15
     fce:	0f 93       	push	r16
     fd0:	9b 01       	movw	r18, r22
	_buffer = xMessageBuffer;
	
	
	
	xTaskCreate(
     fd2:	e1 2c       	mov	r14, r1
     fd4:	f1 2c       	mov	r15, r1
     fd6:	08 2f       	mov	r16, r24
     fd8:	48 e8       	ldi	r20, 0x88	; 136
     fda:	51 e0       	ldi	r21, 0x01	; 1
     fdc:	6d ec       	ldi	r22, 0xCD	; 205
     fde:	72 e0       	ldi	r23, 0x02	; 2
     fe0:	8e e3       	ldi	r24, 0x3E	; 62
     fe2:	99 e0       	ldi	r25, 0x09	; 9
     fe4:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <xTaskCreate>
	,  (const portCHAR *)"LRUpHand"  // A name just for humans
	,  configMINIMAL_STACK_SIZE+200  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  xMessageBuffer
	,  lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}
     fe8:	0f 91       	pop	r16
     fea:	ff 90       	pop	r15
     fec:	ef 90       	pop	r14
     fee:	08 95       	ret

00000ff0 <lora_UpLinkHandler_task>:
	
	/*Receives message from message buffer shared between it and the application responsible for gathering the data
	--> Should be called every 5 minutes from application
	*/
	void lora_UpLinkHandler_task(MessageBufferHandle_t xMessageBuffer)
	{	
     ff0:	df 92       	push	r13
     ff2:	ef 92       	push	r14
     ff4:	ff 92       	push	r15
     ff6:	0f 93       	push	r16
     ff8:	1f 93       	push	r17
     ffa:	cf 93       	push	r28
     ffc:	df 93       	push	r29
     ffe:	7c 01       	movw	r14, r24
		size_t xBytesToSend;
		char rxData[50];
		if (!isSet)
    1000:	80 91 11 09 	lds	r24, 0x0911	; 0x800911 <isSet>
    1004:	81 11       	cpse	r24, r1
    1006:	d0 c0       	rjmp	.+416    	; 0x11a8 <lora_UpLinkHandler_task+0x1b8>
		{
			// Hardware reset of LoRaWAN transceiver
			lora_driver_reset_rn2483(1);
    1008:	81 e0       	ldi	r24, 0x01	; 1
    100a:	0e 94 30 23 	call	0x4660	; 0x4660 <lora_driver_reset_rn2483>
			vTaskDelay(2);
    100e:	62 e0       	ldi	r22, 0x02	; 2
    1010:	70 e0       	ldi	r23, 0x00	; 0
    1012:	80 e0       	ldi	r24, 0x00	; 0
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	0e 94 0b 18 	call	0x3016	; 0x3016 <vTaskDelay>
			lora_driver_reset_rn2483(0);
    101a:	80 e0       	ldi	r24, 0x00	; 0
    101c:	0e 94 30 23 	call	0x4660	; 0x4660 <lora_driver_reset_rn2483>
			// Give it a chance to wakeup
			vTaskDelay(150);
    1020:	66 e9       	ldi	r22, 0x96	; 150
    1022:	70 e0       	ldi	r23, 0x00	; 0
    1024:	80 e0       	ldi	r24, 0x00	; 0
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	0e 94 0b 18 	call	0x3016	; 0x3016 <vTaskDelay>

			lora_driver_flush_buffers(); // get rid of first version string from module after reset!
    102c:	0e 94 e6 22 	call	0x45cc	; 0x45cc <lora_driver_flush_buffers>


static void _lora_setup(void)
{
	e_LoRa_return_code_t rc;
	led_slow_blink(led_ST2); // OPTIONAL: Led the green led blink slowly while we are setting up LoRa
    1030:	81 e0       	ldi	r24, 0x01	; 1
    1032:	0e 94 3e 21 	call	0x427c	; 0x427c <led_slow_blink>
	//The below code is required to be executed only once due to the fact that these MAC settings
	// can be stored inside of the tranciever
	//START ON ONE TIME USE CODE

	// Factory reset the transceiver
	printf("FactoryReset >%s<\n", lora_driver_map_return_code_to_text(lora_driver_rn2483_factory_reset()));
    1036:	0e 94 44 23 	call	0x4688	; 0x4688 <lora_driver_rn2483_factory_reset>
    103a:	0e 94 c1 25 	call	0x4b82	; 0x4b82 <lora_driver_map_return_code_to_text>
    103e:	9f 93       	push	r25
    1040:	8f 93       	push	r24
    1042:	86 ed       	ldi	r24, 0xD6	; 214
    1044:	92 e0       	ldi	r25, 0x02	; 2
    1046:	9f 93       	push	r25
    1048:	8f 93       	push	r24
    104a:	0e 94 c6 2f 	call	0x5f8c	; 0x5f8c <printf>
	
	// Configure to EU868 LoRaWAN standards
	printf("Configure to EU868 >%s<\n", lora_driver_map_return_code_to_text(lora_driver_configure_to_eu868()));
    104e:	0e 94 c2 24 	call	0x4984	; 0x4984 <lora_driver_configure_to_eu868>
    1052:	0e 94 c1 25 	call	0x4b82	; 0x4b82 <lora_driver_map_return_code_to_text>
    1056:	9f 93       	push	r25
    1058:	8f 93       	push	r24
    105a:	89 ee       	ldi	r24, 0xE9	; 233
    105c:	92 e0       	ldi	r25, 0x02	; 2
    105e:	9f 93       	push	r25
    1060:	8f 93       	push	r24
    1062:	0e 94 c6 2f 	call	0x5f8c	; 0x5f8c <printf>

	// Get the transceivers HW EUI
	rc = lora_driver_get_rn2483_hweui(_out_buf);
    1066:	88 e2       	ldi	r24, 0x28	; 40
    1068:	99 e0       	ldi	r25, 0x09	; 9
    106a:	0e 94 56 23 	call	0x46ac	; 0x46ac <lora_driver_get_rn2483_hweui>
	printf("Get HWEUI >%s<: %s\n",lora_driver_map_return_code_to_text(rc), _out_buf);
    106e:	0e 94 c1 25 	call	0x4b82	; 0x4b82 <lora_driver_map_return_code_to_text>
    1072:	c8 e2       	ldi	r28, 0x28	; 40
    1074:	d9 e0       	ldi	r29, 0x09	; 9
    1076:	df 93       	push	r29
    1078:	cf 93       	push	r28
    107a:	9f 93       	push	r25
    107c:	8f 93       	push	r24
    107e:	82 e0       	ldi	r24, 0x02	; 2
    1080:	93 e0       	ldi	r25, 0x03	; 3
    1082:	9f 93       	push	r25
    1084:	8f 93       	push	r24
    1086:	0e 94 c6 2f 	call	0x5f8c	; 0x5f8c <printf>

	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_map_return_code_to_text(lora_driver_set_device_identifier(_out_buf)));
    108a:	ce 01       	movw	r24, r28
    108c:	0e 94 72 23 	call	0x46e4	; 0x46e4 <lora_driver_set_device_identifier>
    1090:	0e 94 c1 25 	call	0x4b82	; 0x4b82 <lora_driver_map_return_code_to_text>
    1094:	9f 93       	push	r25
    1096:	8f 93       	push	r24
    1098:	df 93       	push	r29
    109a:	cf 93       	push	r28
    109c:	86 e1       	ldi	r24, 0x16	; 22
    109e:	93 e0       	ldi	r25, 0x03	; 3
    10a0:	9f 93       	push	r25
    10a2:	8f 93       	push	r24
    10a4:	0e 94 c6 2f 	call	0x5f8c	; 0x5f8c <printf>

	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_map_return_code_to_text(lora_driver_set_otaa_identity(LORA_appEUI,LORA_appKEY,_out_buf)));
    10a8:	ae 01       	movw	r20, r28
    10aa:	6b e2       	ldi	r22, 0x2B	; 43
    10ac:	73 e0       	ldi	r23, 0x03	; 3
    10ae:	8e e4       	ldi	r24, 0x4E	; 78
    10b0:	93 e0       	ldi	r25, 0x03	; 3
    10b2:	0e 94 a0 25 	call	0x4b40	; 0x4b40 <lora_driver_set_otaa_identity>
    10b6:	0e 94 c1 25 	call	0x4b82	; 0x4b82 <lora_driver_map_return_code_to_text>
    10ba:	9f 93       	push	r25
    10bc:	8f 93       	push	r24
    10be:	df 93       	push	r29
    10c0:	cf 93       	push	r28
    10c2:	8b e2       	ldi	r24, 0x2B	; 43
    10c4:	93 e0       	ldi	r25, 0x03	; 3
    10c6:	9f 93       	push	r25
    10c8:	8f 93       	push	r24
    10ca:	8e e4       	ldi	r24, 0x4E	; 78
    10cc:	93 e0       	ldi	r25, 0x03	; 3
    10ce:	9f 93       	push	r25
    10d0:	8f 93       	push	r24
    10d2:	8f e5       	ldi	r24, 0x5F	; 95
    10d4:	93 e0       	ldi	r25, 0x03	; 3
    10d6:	9f 93       	push	r25
    10d8:	8f 93       	push	r24
    10da:	0e 94 c6 2f 	call	0x5f8c	; 0x5f8c <printf>

	// Save all the MAC settings in the transceiver
	printf("Save mac >%s<\n",lora_driver_map_return_code_to_text(lora_driver_save_mac()));
    10de:	0e 94 a5 23 	call	0x474a	; 0x474a <lora_driver_save_mac>
    10e2:	0e 94 c1 25 	call	0x4b82	; 0x4b82 <lora_driver_map_return_code_to_text>
    10e6:	9f 93       	push	r25
    10e8:	8f 93       	push	r24
    10ea:	85 e9       	ldi	r24, 0x95	; 149
    10ec:	93 e0       	ldi	r25, 0x03	; 3
    10ee:	9f 93       	push	r25
    10f0:	8f 93       	push	r24
    10f2:	0e 94 c6 2f 	call	0x5f8c	; 0x5f8c <printf>

	//END OF ONE TIME USE CODE
	
	
	// Enable Adaptive Data Rate
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_map_return_code_to_text(lora_driver_set_adaptive_data_rate(LoRa_ON)));
    10f6:	8d b7       	in	r24, 0x3d	; 61
    10f8:	9e b7       	in	r25, 0x3e	; 62
    10fa:	82 96       	adiw	r24, 0x22	; 34
    10fc:	0f b6       	in	r0, 0x3f	; 63
    10fe:	f8 94       	cli
    1100:	9e bf       	out	0x3e, r25	; 62
    1102:	0f be       	out	0x3f, r0	; 63
    1104:	8d bf       	out	0x3d, r24	; 61
    1106:	81 e0       	ldi	r24, 0x01	; 1
    1108:	0e 94 9f 24 	call	0x493e	; 0x493e <lora_driver_set_adaptive_data_rate>
    110c:	0e 94 c1 25 	call	0x4b82	; 0x4b82 <lora_driver_map_return_code_to_text>
    1110:	9f 93       	push	r25
    1112:	8f 93       	push	r24
    1114:	84 ea       	ldi	r24, 0xA4	; 164
    1116:	93 e0       	ldi	r25, 0x03	; 3
    1118:	9f 93       	push	r25
    111a:	8f 93       	push	r24
    111c:	0e 94 c6 2f 	call	0x5f8c	; 0x5f8c <printf>

	// Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	printf("Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_map_return_code_to_text(lora_driver_set_receive_delay(500)));
    1120:	84 ef       	ldi	r24, 0xF4	; 244
    1122:	91 e0       	ldi	r25, 0x01	; 1
    1124:	0e 94 aa 24 	call	0x4954	; 0x4954 <lora_driver_set_receive_delay>
    1128:	0e 94 c1 25 	call	0x4b82	; 0x4b82 <lora_driver_map_return_code_to_text>
    112c:	9f 93       	push	r25
    112e:	8f 93       	push	r24
    1130:	81 e0       	ldi	r24, 0x01	; 1
    1132:	8f 93       	push	r24
    1134:	84 ef       	ldi	r24, 0xF4	; 244
    1136:	8f 93       	push	r24
    1138:	85 ec       	ldi	r24, 0xC5	; 197
    113a:	93 e0       	ldi	r25, 0x03	; 3
    113c:	9f 93       	push	r25
    113e:	8f 93       	push	r24
    1140:	0e 94 c6 2f 	call	0x5f8c	; 0x5f8c <printf>
    1144:	8d b7       	in	r24, 0x3d	; 61
    1146:	9e b7       	in	r25, 0x3e	; 62
    1148:	0a 96       	adiw	r24, 0x0a	; 10
    114a:	0f b6       	in	r0, 0x3f	; 63
    114c:	f8 94       	cli
    114e:	9e bf       	out	0x3e, r25	; 62
    1150:	0f be       	out	0x3f, r0	; 63
    1152:	8d bf       	out	0x3d, r24	; 61
    1154:	ca e0       	ldi	r28, 0x0A	; 10
    1156:	d0 e0       	ldi	r29, 0x00	; 0
	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
	
	do {
		rc = lora_driver_join(LoRa_OTAA);
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_map_return_code_to_text(rc));
    1158:	05 ee       	ldi	r16, 0xE5	; 229
    115a:	13 e0       	ldi	r17, 0x03	; 3

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
	
	do {
		rc = lora_driver_join(LoRa_OTAA);
    115c:	80 e0       	ldi	r24, 0x00	; 0
    115e:	0e 94 ab 23 	call	0x4756	; 0x4756 <lora_driver_join>
    1162:	d8 2e       	mov	r13, r24
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_map_return_code_to_text(rc));
    1164:	0e 94 c1 25 	call	0x4b82	; 0x4b82 <lora_driver_map_return_code_to_text>
    1168:	9f 93       	push	r25
    116a:	8f 93       	push	r24
    116c:	df 93       	push	r29
    116e:	cf 93       	push	r28
    1170:	1f 93       	push	r17
    1172:	0f 93       	push	r16
    1174:	0e 94 c6 2f 	call	0x5f8c	; 0x5f8c <printf>

		if ( rc != LoRa_ACCEPTED)
    1178:	0f 90       	pop	r0
    117a:	0f 90       	pop	r0
    117c:	0f 90       	pop	r0
    117e:	0f 90       	pop	r0
    1180:	0f 90       	pop	r0
    1182:	0f 90       	pop	r0
    1184:	88 e0       	ldi	r24, 0x08	; 8
    1186:	d8 16       	cp	r13, r24
    1188:	09 f4       	brne	.+2      	; 0x118c <lora_UpLinkHandler_task+0x19c>
    118a:	62 c0       	rjmp	.+196    	; 0x1250 <lora_UpLinkHandler_task+0x260>
		{
			// Make the red led pulse to tell something went wrong
			led_long_puls(led_ST1); // OPTIONAL
    118c:	80 e0       	ldi	r24, 0x00	; 0
    118e:	0e 94 aa 21 	call	0x4354	; 0x4354 <led_long_puls>
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
    1192:	66 e3       	ldi	r22, 0x36	; 54
    1194:	71 e0       	ldi	r23, 0x01	; 1
    1196:	80 e0       	ldi	r24, 0x00	; 0
    1198:	90 e0       	ldi	r25, 0x00	; 0
    119a:	0e 94 0b 18 	call	0x3016	; 0x3016 <vTaskDelay>
    119e:	21 97       	sbiw	r28, 0x01	; 1
		}
		else
		{
			break;
		}
	} while (--maxJoinTriesLeft);
    11a0:	e9 f6       	brne	.-70     	; 0x115c <lora_UpLinkHandler_task+0x16c>
    11a2:	5d c0       	rjmp	.+186    	; 0x125e <lora_UpLinkHandler_task+0x26e>
		led_fast_blink(led_ST1); // OPTIONAL

		// Lets stay here
		while (1)
		{
			taskYIELD();
    11a4:	76 d4       	rcall	.+2284   	; 0x1a92 <vPortYield>
    11a6:	fe cf       	rjmp	.-4      	; 0x11a4 <lora_UpLinkHandler_task+0x1b4>
			isSet=true;
		}
		

		
		xBytesToSend = xMessageBufferReceive(xMessageBuffer, (void*) &_uplink_payload,
    11a8:	00 e0       	ldi	r16, 0x00	; 0
    11aa:	10 e0       	ldi	r17, 0x00	; 0
    11ac:	98 01       	movw	r18, r16
    11ae:	42 e3       	ldi	r20, 0x32	; 50
    11b0:	50 e0       	ldi	r21, 0x00	; 0
    11b2:	62 e1       	ldi	r22, 0x12	; 18
    11b4:	79 e0       	ldi	r23, 0x09	; 9
    11b6:	c7 01       	movw	r24, r14
    11b8:	0e 94 08 14 	call	0x2810	; 0x2810 <xStreamBufferReceive>
		sizeof(rxData),0);
		if(xBytesToSend >= sizeof(uint8_t)*2)
    11bc:	02 97       	sbiw	r24, 0x02	; 2
    11be:	08 f4       	brcc	.+2      	; 0x11c2 <lora_UpLinkHandler_task+0x1d2>
    11c0:	40 c0       	rjmp	.+128    	; 0x1242 <lora_UpLinkHandler_task+0x252>
			//_uplink_payload = (_uplink_payload) &rxData;
			
			/**< Status led ST4 (BLUE)*/
			//Makes the led light up in a short period.
			
			led_short_puls(led_ST4);
    11c2:	83 e0       	ldi	r24, 0x03	; 3
    11c4:	0e 94 bc 21 	call	0x4378	; 0x4378 <led_short_puls>
			//_uplink_payload.port_no = 1;
			//_uplink_payload.len = 4;
			
			printf("The temperature in upLink is: %d\n", _uplink_payload.bytes[0]);
    11c8:	c2 e1       	ldi	r28, 0x12	; 18
    11ca:	d9 e0       	ldi	r29, 0x09	; 9
    11cc:	8a 81       	ldd	r24, Y+2	; 0x02
    11ce:	1f 92       	push	r1
    11d0:	8f 93       	push	r24
    11d2:	8a ec       	ldi	r24, 0xCA	; 202
    11d4:	94 e0       	ldi	r25, 0x04	; 4
    11d6:	9f 93       	push	r25
    11d8:	8f 93       	push	r24
    11da:	0e 94 c6 2f 	call	0x5f8c	; 0x5f8c <printf>
			printf("The temperature2 in upLink is: %d\n", _uplink_payload.bytes[1]);
    11de:	8b 81       	ldd	r24, Y+3	; 0x03
    11e0:	1f 92       	push	r1
    11e2:	8f 93       	push	r24
    11e4:	8c ee       	ldi	r24, 0xEC	; 236
    11e6:	94 e0       	ldi	r25, 0x04	; 4
    11e8:	9f 93       	push	r25
    11ea:	8f 93       	push	r24
    11ec:	0e 94 c6 2f 	call	0x5f8c	; 0x5f8c <printf>
			printf("The humidity in upLink is: %u\n", _uplink_payload.bytes[2]);
    11f0:	8c 81       	ldd	r24, Y+4	; 0x04
    11f2:	1f 92       	push	r1
    11f4:	8f 93       	push	r24
    11f6:	8f e0       	ldi	r24, 0x0F	; 15
    11f8:	95 e0       	ldi	r25, 0x05	; 5
    11fa:	9f 93       	push	r25
    11fc:	8f 93       	push	r24
    11fe:	0e 94 c6 2f 	call	0x5f8c	; 0x5f8c <printf>
			printf("The humidity2 in upLink is: %u\n", _uplink_payload.bytes[3]);
    1202:	8d 81       	ldd	r24, Y+5	; 0x05
    1204:	1f 92       	push	r1
    1206:	8f 93       	push	r24
    1208:	8e e2       	ldi	r24, 0x2E	; 46
    120a:	95 e0       	ldi	r25, 0x05	; 5
    120c:	9f 93       	push	r25
    120e:	8f 93       	push	r24
    1210:	0e 94 c6 2f 	call	0x5f8c	; 0x5f8c <printf>
			
			
			printf("Upload Message >%s<\n", lora_driver_map_return_code_to_text(lora_driver_sent_upload_message(false, &_uplink_payload)));
    1214:	be 01       	movw	r22, r28
    1216:	80 e0       	ldi	r24, 0x00	; 0
    1218:	0e 94 d4 23 	call	0x47a8	; 0x47a8 <lora_driver_sent_upload_message>
    121c:	0e 94 c1 25 	call	0x4b82	; 0x4b82 <lora_driver_map_return_code_to_text>
    1220:	9f 93       	push	r25
    1222:	8f 93       	push	r24
    1224:	8e e4       	ldi	r24, 0x4E	; 78
    1226:	95 e0       	ldi	r25, 0x05	; 5
    1228:	9f 93       	push	r25
    122a:	8f 93       	push	r24
    122c:	0e 94 c6 2f 	call	0x5f8c	; 0x5f8c <printf>
    1230:	8d b7       	in	r24, 0x3d	; 61
    1232:	9e b7       	in	r25, 0x3e	; 62
    1234:	44 96       	adiw	r24, 0x14	; 20
    1236:	0f b6       	in	r0, 0x3f	; 63
    1238:	f8 94       	cli
    123a:	9e bf       	out	0x3e, r25	; 62
    123c:	0f be       	out	0x3f, r0	; 63
    123e:	8d bf       	out	0x3d, r24	; 61
    1240:	15 c0       	rjmp	.+42     	; 0x126c <lora_UpLinkHandler_task+0x27c>
		}
		else
		{
			vTaskDelay(2000);
    1242:	60 ed       	ldi	r22, 0xD0	; 208
    1244:	77 e0       	ldi	r23, 0x07	; 7
    1246:	80 e0       	ldi	r24, 0x00	; 0
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	0e 94 0b 18 	call	0x3016	; 0x3016 <vTaskDelay>
		}
	}
    124e:	0e c0       	rjmp	.+28     	; 0x126c <lora_UpLinkHandler_task+0x27c>

	if (rc == LoRa_ACCEPTED)
	{
		// Connected to LoRaWAN :-)
		// Make the green led steady
		led_led_on(led_ST2); // OPTIONAL
    1250:	81 e0       	ldi	r24, 0x01	; 1
    1252:	0e 94 8c 21 	call	0x4318	; 0x4318 <led_led_on>
			vTaskDelay(150);

			lora_driver_flush_buffers(); // get rid of first version string from module after reset!

			_lora_setup();
			isSet=true;
    1256:	81 e0       	ldi	r24, 0x01	; 1
    1258:	80 93 11 09 	sts	0x0911, r24	; 0x800911 <isSet>
    125c:	a5 cf       	rjmp	.-182    	; 0x11a8 <lora_UpLinkHandler_task+0x1b8>
	}
	else
	{
		// Something went wrong
		// Turn off the green led
		led_led_off(led_ST2); // OPTIONAL
    125e:	81 e0       	ldi	r24, 0x01	; 1
    1260:	0e 94 9b 21 	call	0x4336	; 0x4336 <led_led_off>
		// Make the red led blink fast to tell something went wrong
		led_fast_blink(led_ST1); // OPTIONAL
    1264:	80 e0       	ldi	r24, 0x00	; 0
    1266:	0e 94 65 21 	call	0x42ca	; 0x42ca <led_fast_blink>
    126a:	9c cf       	rjmp	.-200    	; 0x11a4 <lora_UpLinkHandler_task+0x1b4>
		}
		else
		{
			vTaskDelay(2000);
		}
	}
    126c:	df 91       	pop	r29
    126e:	cf 91       	pop	r28
    1270:	1f 91       	pop	r17
    1272:	0f 91       	pop	r16
    1274:	ff 90       	pop	r15
    1276:	ef 90       	pop	r14
    1278:	df 90       	pop	r13
    127a:	08 95       	ret

0000127c <lora_UpLinkHandler_startTask>:
	
	void lora_UpLinkHandler_startTask(MessageBufferHandle_t xMessageBuffer){
    127c:	ec 01       	movw	r28, r24
		for(;;)
		{
			lora_UpLinkHandler_task(xMessageBuffer);
    127e:	ce 01       	movw	r24, r28
    1280:	b7 de       	rcall	.-658    	; 0xff0 <lora_UpLinkHandler_task>
			vTaskDelay(3000);
    1282:	68 eb       	ldi	r22, 0xB8	; 184
    1284:	7b e0       	ldi	r23, 0x0B	; 11
    1286:	80 e0       	ldi	r24, 0x00	; 0
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	0e 94 0b 18 	call	0x3016	; 0x3016 <vTaskDelay>
    128e:	f7 cf       	rjmp	.-18     	; 0x127e <lora_UpLinkHandler_startTask+0x2>

00001290 <trace_init>:
	 #if (configUSE_TRACE_FACILITY == 1)
	 #ifdef HAL_DEFS_H_

	 #else
		// Used on VIA MEGA Shield rev. 2.0.0
		DDRK |= _BV(DDK0) | _BV(DDK1) | _BV(DDK2) | _BV(DDK3);
    1290:	e7 e0       	ldi	r30, 0x07	; 7
    1292:	f1 e0       	ldi	r31, 0x01	; 1
    1294:	80 81       	ld	r24, Z
    1296:	8f 60       	ori	r24, 0x0F	; 15
    1298:	80 83       	st	Z, r24
    129a:	08 95       	ret

0000129c <task_switch_in>:
	void task_switch_in(uint8_t task_no) {
		 #ifdef HAL_DEFS_H_

		 #else
		 // Used on VIA MEGA Shield rev. 2.0.0
		 PORTK &= 0b11110000;
    129c:	e8 e0       	ldi	r30, 0x08	; 8
    129e:	f1 e0       	ldi	r31, 0x01	; 1
    12a0:	90 81       	ld	r25, Z
    12a2:	90 7f       	andi	r25, 0xF0	; 240
    12a4:	90 83       	st	Z, r25
		 PORTK |= (task_no & 0b00001111);
    12a6:	90 81       	ld	r25, Z
    12a8:	8f 70       	andi	r24, 0x0F	; 15
    12aa:	98 2b       	or	r25, r24
    12ac:	90 83       	st	Z, r25
    12ae:	08 95       	ret

000012b0 <task_switch_out>:
	void task_switch_out(uint8_t task_no) {
		#ifdef HAL_DEFS_H_

		#else
		// Used on VIA MEGA Shield rev. 2.0.0
		PORTK &= 0b11110000;
    12b0:	e8 e0       	ldi	r30, 0x08	; 8
    12b2:	f1 e0       	ldi	r31, 0x01	; 1
    12b4:	80 81       	ld	r24, Z
    12b6:	80 7f       	andi	r24, 0xF0	; 240
    12b8:	80 83       	st	Z, r24
    12ba:	08 95       	ret

000012bc <xEventGroupCreate>:
        uxReturn = pxEventBits->uxEventBits;
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
    12bc:	cf 93       	push	r28
    12be:	df 93       	push	r29
    12c0:	80 e1       	ldi	r24, 0x10	; 16
    12c2:	90 e0       	ldi	r25, 0x00	; 0
    12c4:	b4 d1       	rcall	.+872    	; 0x162e <pvPortMalloc>
    12c6:	ec 01       	movw	r28, r24
    12c8:	00 97       	sbiw	r24, 0x00	; 0
    12ca:	39 f0       	breq	.+14     	; 0x12da <xEventGroupCreate+0x1e>
    12cc:	fc 01       	movw	r30, r24
    12ce:	11 92       	st	Z+, r1
    12d0:	11 92       	st	Z+, r1
    12d2:	11 92       	st	Z+, r1
    12d4:	11 92       	st	Z+, r1
    12d6:	cf 01       	movw	r24, r30
    12d8:	94 d2       	rcall	.+1320   	; 0x1802 <vListInitialise>
    12da:	ce 01       	movw	r24, r28
    12dc:	df 91       	pop	r29
    12de:	cf 91       	pop	r28
    12e0:	08 95       	ret

000012e2 <xEventGroupWaitBits>:
    12e2:	2f 92       	push	r2
    12e4:	3f 92       	push	r3
    12e6:	4f 92       	push	r4
    12e8:	5f 92       	push	r5
    12ea:	6f 92       	push	r6
    12ec:	7f 92       	push	r7
    12ee:	8f 92       	push	r8
    12f0:	9f 92       	push	r9
    12f2:	af 92       	push	r10
    12f4:	bf 92       	push	r11
    12f6:	cf 92       	push	r12
    12f8:	df 92       	push	r13
    12fa:	ef 92       	push	r14
    12fc:	ff 92       	push	r15
    12fe:	0f 93       	push	r16
    1300:	1f 93       	push	r17
    1302:	cf 93       	push	r28
    1304:	df 93       	push	r29
    1306:	ec 01       	movw	r28, r24
    1308:	4a 01       	movw	r8, r20
    130a:	5b 01       	movw	r10, r22
    130c:	62 2e       	mov	r6, r18
    130e:	70 2e       	mov	r7, r16
    1310:	0e 94 a6 16 	call	0x2d4c	; 0x2d4c <vTaskSuspendAll>
    1314:	28 80       	ld	r2, Y
    1316:	39 80       	ldd	r3, Y+1	; 0x01
    1318:	4a 80       	ldd	r4, Y+2	; 0x02
    131a:	5b 80       	ldd	r5, Y+3	; 0x03
    131c:	01 11       	cpse	r16, r1
    131e:	0d c0       	rjmp	.+26     	; 0x133a <xEventGroupWaitBits+0x58>
    1320:	81 e0       	ldi	r24, 0x01	; 1
    1322:	b2 01       	movw	r22, r4
    1324:	a1 01       	movw	r20, r2
    1326:	48 21       	and	r20, r8
    1328:	59 21       	and	r21, r9
    132a:	6a 21       	and	r22, r10
    132c:	7b 21       	and	r23, r11
    132e:	45 2b       	or	r20, r21
    1330:	46 2b       	or	r20, r22
    1332:	47 2b       	or	r20, r23
    1334:	79 f4       	brne	.+30     	; 0x1354 <xEventGroupWaitBits+0x72>
    1336:	80 e0       	ldi	r24, 0x00	; 0
    1338:	0d c0       	rjmp	.+26     	; 0x1354 <xEventGroupWaitBits+0x72>
    133a:	81 e0       	ldi	r24, 0x01	; 1
    133c:	b2 01       	movw	r22, r4
    133e:	a1 01       	movw	r20, r2
    1340:	48 21       	and	r20, r8
    1342:	59 21       	and	r21, r9
    1344:	6a 21       	and	r22, r10
    1346:	7b 21       	and	r23, r11
    1348:	48 15       	cp	r20, r8
    134a:	59 05       	cpc	r21, r9
    134c:	6a 05       	cpc	r22, r10
    134e:	7b 05       	cpc	r23, r11
    1350:	09 f0       	breq	.+2      	; 0x1354 <xEventGroupWaitBits+0x72>
    1352:	80 e0       	ldi	r24, 0x00	; 0
    1354:	88 23       	and	r24, r24
    1356:	81 f0       	breq	.+32     	; 0x1378 <xEventGroupWaitBits+0x96>
    1358:	66 20       	and	r6, r6
    135a:	09 f4       	brne	.+2      	; 0x135e <xEventGroupWaitBits+0x7c>
    135c:	6b c0       	rjmp	.+214    	; 0x1434 <xEventGroupWaitBits+0x152>
    135e:	80 94       	com	r8
    1360:	90 94       	com	r9
    1362:	a0 94       	com	r10
    1364:	b0 94       	com	r11
    1366:	82 20       	and	r8, r2
    1368:	93 20       	and	r9, r3
    136a:	a4 20       	and	r10, r4
    136c:	b5 20       	and	r11, r5
    136e:	88 82       	st	Y, r8
    1370:	99 82       	std	Y+1, r9	; 0x01
    1372:	aa 82       	std	Y+2, r10	; 0x02
    1374:	bb 82       	std	Y+3, r11	; 0x03
    1376:	5e c0       	rjmp	.+188    	; 0x1434 <xEventGroupWaitBits+0x152>
    1378:	c1 14       	cp	r12, r1
    137a:	d1 04       	cpc	r13, r1
    137c:	e1 04       	cpc	r14, r1
    137e:	f1 04       	cpc	r15, r1
    1380:	09 f4       	brne	.+2      	; 0x1384 <xEventGroupWaitBits+0xa2>
    1382:	58 c0       	rjmp	.+176    	; 0x1434 <xEventGroupWaitBits+0x152>
    1384:	66 20       	and	r6, r6
    1386:	29 f0       	breq	.+10     	; 0x1392 <xEventGroupWaitBits+0xb0>
    1388:	40 e0       	ldi	r20, 0x00	; 0
    138a:	50 e0       	ldi	r21, 0x00	; 0
    138c:	60 e0       	ldi	r22, 0x00	; 0
    138e:	71 e0       	ldi	r23, 0x01	; 1
    1390:	03 c0       	rjmp	.+6      	; 0x1398 <xEventGroupWaitBits+0xb6>
    1392:	40 e0       	ldi	r20, 0x00	; 0
    1394:	50 e0       	ldi	r21, 0x00	; 0
    1396:	ba 01       	movw	r22, r20
    1398:	71 10       	cpse	r7, r1
    139a:	74 60       	ori	r23, 0x04	; 4
    139c:	48 29       	or	r20, r8
    139e:	59 29       	or	r21, r9
    13a0:	6a 29       	or	r22, r10
    13a2:	7b 29       	or	r23, r11
    13a4:	97 01       	movw	r18, r14
    13a6:	86 01       	movw	r16, r12
    13a8:	ce 01       	movw	r24, r28
    13aa:	04 96       	adiw	r24, 0x04	; 4
    13ac:	0e 94 ba 18 	call	0x3174	; 0x3174 <vTaskPlaceOnUnorderedEventList>
    13b0:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <xTaskResumeAll>
    13b4:	81 11       	cpse	r24, r1
    13b6:	01 c0       	rjmp	.+2      	; 0x13ba <xEventGroupWaitBits+0xd8>
    13b8:	6c d3       	rcall	.+1752   	; 0x1a92 <vPortYield>
    13ba:	0e 94 01 1b 	call	0x3602	; 0x3602 <uxTaskResetEventItemValue>
    13be:	91 fd       	sbrc	r25, 1
    13c0:	35 c0       	rjmp	.+106    	; 0x142c <xEventGroupWaitBits+0x14a>
    13c2:	0f b6       	in	r0, 0x3f	; 63
    13c4:	f8 94       	cli
    13c6:	0f 92       	push	r0
    13c8:	68 81       	ld	r22, Y
    13ca:	79 81       	ldd	r23, Y+1	; 0x01
    13cc:	8a 81       	ldd	r24, Y+2	; 0x02
    13ce:	9b 81       	ldd	r25, Y+3	; 0x03
    13d0:	71 10       	cpse	r7, r1
    13d2:	0d c0       	rjmp	.+26     	; 0x13ee <xEventGroupWaitBits+0x10c>
    13d4:	21 e0       	ldi	r18, 0x01	; 1
    13d6:	75 01       	movw	r14, r10
    13d8:	64 01       	movw	r12, r8
    13da:	c6 22       	and	r12, r22
    13dc:	d7 22       	and	r13, r23
    13de:	e8 22       	and	r14, r24
    13e0:	f9 22       	and	r15, r25
    13e2:	cd 28       	or	r12, r13
    13e4:	ce 28       	or	r12, r14
    13e6:	cf 28       	or	r12, r15
    13e8:	79 f4       	brne	.+30     	; 0x1408 <xEventGroupWaitBits+0x126>
    13ea:	20 e0       	ldi	r18, 0x00	; 0
    13ec:	0d c0       	rjmp	.+26     	; 0x1408 <xEventGroupWaitBits+0x126>
    13ee:	21 e0       	ldi	r18, 0x01	; 1
    13f0:	75 01       	movw	r14, r10
    13f2:	64 01       	movw	r12, r8
    13f4:	c6 22       	and	r12, r22
    13f6:	d7 22       	and	r13, r23
    13f8:	e8 22       	and	r14, r24
    13fa:	f9 22       	and	r15, r25
    13fc:	c8 14       	cp	r12, r8
    13fe:	d9 04       	cpc	r13, r9
    1400:	ea 04       	cpc	r14, r10
    1402:	fb 04       	cpc	r15, r11
    1404:	09 f0       	breq	.+2      	; 0x1408 <xEventGroupWaitBits+0x126>
    1406:	20 e0       	ldi	r18, 0x00	; 0
    1408:	22 23       	and	r18, r18
    140a:	71 f0       	breq	.+28     	; 0x1428 <xEventGroupWaitBits+0x146>
    140c:	66 20       	and	r6, r6
    140e:	61 f0       	breq	.+24     	; 0x1428 <xEventGroupWaitBits+0x146>
    1410:	80 94       	com	r8
    1412:	90 94       	com	r9
    1414:	a0 94       	com	r10
    1416:	b0 94       	com	r11
    1418:	86 22       	and	r8, r22
    141a:	97 22       	and	r9, r23
    141c:	a8 22       	and	r10, r24
    141e:	b9 22       	and	r11, r25
    1420:	88 82       	st	Y, r8
    1422:	99 82       	std	Y+1, r9	; 0x01
    1424:	aa 82       	std	Y+2, r10	; 0x02
    1426:	bb 82       	std	Y+3, r11	; 0x03
    1428:	0f 90       	pop	r0
    142a:	0f be       	out	0x3f, r0	; 63
    142c:	1b 01       	movw	r2, r22
    142e:	2c 01       	movw	r4, r24
    1430:	55 24       	eor	r5, r5
    1432:	02 c0       	rjmp	.+4      	; 0x1438 <xEventGroupWaitBits+0x156>
    1434:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <xTaskResumeAll>
    1438:	c2 01       	movw	r24, r4
    143a:	b1 01       	movw	r22, r2
    143c:	df 91       	pop	r29
    143e:	cf 91       	pop	r28
    1440:	1f 91       	pop	r17
    1442:	0f 91       	pop	r16
    1444:	ff 90       	pop	r15
    1446:	ef 90       	pop	r14
    1448:	df 90       	pop	r13
    144a:	cf 90       	pop	r12
    144c:	bf 90       	pop	r11
    144e:	af 90       	pop	r10
    1450:	9f 90       	pop	r9
    1452:	8f 90       	pop	r8
    1454:	7f 90       	pop	r7
    1456:	6f 90       	pop	r6
    1458:	5f 90       	pop	r5
    145a:	4f 90       	pop	r4
    145c:	3f 90       	pop	r3
    145e:	2f 90       	pop	r2
    1460:	08 95       	ret

00001462 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
    1462:	4f 92       	push	r4
    1464:	5f 92       	push	r5
    1466:	6f 92       	push	r6
    1468:	7f 92       	push	r7
    146a:	8f 92       	push	r8
    146c:	9f 92       	push	r9
    146e:	af 92       	push	r10
    1470:	bf 92       	push	r11
    1472:	cf 92       	push	r12
    1474:	df 92       	push	r13
    1476:	ef 92       	push	r14
    1478:	ff 92       	push	r15
    147a:	0f 93       	push	r16
    147c:	1f 93       	push	r17
    147e:	cf 93       	push	r28
    1480:	df 93       	push	r29
    1482:	ec 01       	movw	r28, r24
    1484:	6a 01       	movw	r12, r20
    1486:	7b 01       	movw	r14, r22
    itself. */
    configASSERT( xEventGroup );
    configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

    pxList = &( pxEventBits->xTasksWaitingForBits );
    pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1488:	8c 01       	movw	r16, r24
    148a:	09 5f       	subi	r16, 0xF9	; 249
    148c:	1f 4f       	sbci	r17, 0xFF	; 255
    vTaskSuspendAll();
    148e:	0e 94 a6 16 	call	0x2d4c	; 0x2d4c <vTaskSuspendAll>
    {
        traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

        pxListItem = listGET_HEAD_ENTRY( pxList );
    1492:	eb 85       	ldd	r30, Y+11	; 0x0b
    1494:	fc 85       	ldd	r31, Y+12	; 0x0c

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;
    1496:	88 81       	ld	r24, Y
    1498:	99 81       	ldd	r25, Y+1	; 0x01
    149a:	aa 81       	ldd	r26, Y+2	; 0x02
    149c:	bb 81       	ldd	r27, Y+3	; 0x03
    149e:	c8 2a       	or	r12, r24
    14a0:	d9 2a       	or	r13, r25
    14a2:	ea 2a       	or	r14, r26
    14a4:	fb 2a       	or	r15, r27
    14a6:	c8 82       	st	Y, r12
    14a8:	d9 82       	std	Y+1, r13	; 0x01
    14aa:	ea 82       	std	Y+2, r14	; 0x02
    14ac:	fb 82       	std	Y+3, r15	; 0x03

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
    14ae:	0e 17       	cp	r16, r30
    14b0:	1f 07       	cpc	r17, r31
    14b2:	09 f4       	brne	.+2      	; 0x14b6 <xEventGroupSetBits+0x54>
    14b4:	45 c0       	rjmp	.+138    	; 0x1540 <xEventGroupSetBits+0xde>
    14b6:	c1 2c       	mov	r12, r1
    14b8:	d1 2c       	mov	r13, r1
    14ba:	76 01       	movw	r14, r12
            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
                {
                    xMatchFound = pdTRUE;
    14bc:	99 24       	eor	r9, r9
    14be:	93 94       	inc	r9
    14c0:	81 2c       	mov	r8, r1
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
    14c2:	a4 80       	ldd	r10, Z+4	; 0x04
    14c4:	b5 80       	ldd	r11, Z+5	; 0x05
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
    14c6:	80 81       	ld	r24, Z
    14c8:	91 81       	ldd	r25, Z+1	; 0x01
    14ca:	a2 81       	ldd	r26, Z+2	; 0x02
    14cc:	b3 81       	ldd	r27, Z+3	; 0x03
            xMatchFound = pdFALSE;

            /* Split the bits waited for from the control bits. */
            uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
            uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
    14ce:	ac 01       	movw	r20, r24
    14d0:	bd 01       	movw	r22, r26
    14d2:	77 27       	eor	r23, r23

            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
    14d4:	b2 fd       	sbrc	r27, 2
    14d6:	0f c0       	rjmp	.+30     	; 0x14f6 <xEventGroupSetBits+0x94>
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
                {
                    xMatchFound = pdTRUE;
    14d8:	48 80       	ld	r4, Y
    14da:	59 80       	ldd	r5, Y+1	; 0x01
    14dc:	6a 80       	ldd	r6, Y+2	; 0x02
    14de:	7b 80       	ldd	r7, Y+3	; 0x03
    14e0:	44 22       	and	r4, r20
    14e2:	55 22       	and	r5, r21
    14e4:	66 22       	and	r6, r22
    14e6:	77 22       	and	r7, r23
    14e8:	29 2d       	mov	r18, r9
    14ea:	45 28       	or	r4, r5
    14ec:	46 28       	or	r4, r6
    14ee:	47 28       	or	r4, r7
    14f0:	89 f4       	brne	.+34     	; 0x1514 <xEventGroupSetBits+0xb2>
    14f2:	28 2d       	mov	r18, r8
    14f4:	0f c0       	rjmp	.+30     	; 0x1514 <xEventGroupSetBits+0xb2>
    14f6:	48 80       	ld	r4, Y
    14f8:	59 80       	ldd	r5, Y+1	; 0x01
    14fa:	6a 80       	ldd	r6, Y+2	; 0x02
    14fc:	7b 80       	ldd	r7, Y+3	; 0x03
    14fe:	44 22       	and	r4, r20
    1500:	55 22       	and	r5, r21
    1502:	66 22       	and	r6, r22
    1504:	77 22       	and	r7, r23
    1506:	29 2d       	mov	r18, r9
    1508:	44 16       	cp	r4, r20
    150a:	55 06       	cpc	r5, r21
    150c:	66 06       	cpc	r6, r22
    150e:	77 06       	cpc	r7, r23
    1510:	09 f0       	breq	.+2      	; 0x1514 <xEventGroupSetBits+0xb2>
    1512:	28 2d       	mov	r18, r8
            else
            {
                /* Need all bits to be set, but not all the bits were set. */
            }

            if( xMatchFound != pdFALSE )
    1514:	22 23       	and	r18, r18
    1516:	71 f0       	breq	.+28     	; 0x1534 <xEventGroupSetBits+0xd2>
            {
                /* The bits match.  Should the bits be cleared on exit? */
                if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
    1518:	b0 ff       	sbrs	r27, 0
    151a:	04 c0       	rjmp	.+8      	; 0x1524 <xEventGroupSetBits+0xc2>
                {
                    uxBitsToClear |= uxBitsWaitedFor;
    151c:	c4 2a       	or	r12, r20
    151e:	d5 2a       	or	r13, r21
    1520:	e6 2a       	or	r14, r22
    1522:	f7 2a       	or	r15, r23
                /* Store the actual event flag value in the task's event list
                item before removing the task from the event list.  The
                eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                that is was unblocked due to its required bits matching, rather
                than because it timed out. */
                vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
    1524:	48 81       	ld	r20, Y
    1526:	59 81       	ldd	r21, Y+1	; 0x01
    1528:	6a 81       	ldd	r22, Y+2	; 0x02
    152a:	7b 81       	ldd	r23, Y+3	; 0x03
    152c:	72 60       	ori	r23, 0x02	; 2
    152e:	cf 01       	movw	r24, r30
    1530:	0e 94 40 19 	call	0x3280	; 0x3280 <vTaskRemoveFromUnorderedEventList>
    1534:	ea 2d       	mov	r30, r10
    1536:	fb 2d       	mov	r31, r11

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
    1538:	0e 17       	cp	r16, r30
    153a:	1f 07       	cpc	r17, r31
    153c:	11 f6       	brne	.-124    	; 0x14c2 <xEventGroupSetBits+0x60>
    153e:	03 c0       	rjmp	.+6      	; 0x1546 <xEventGroupSetBits+0xe4>
EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
    1540:	c1 2c       	mov	r12, r1
    1542:	d1 2c       	mov	r13, r1
    1544:	76 01       	movw	r14, r12
            pxListItem = pxNext;
        }

        /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
        bit was set in the control word. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
    1546:	c0 94       	com	r12
    1548:	d0 94       	com	r13
    154a:	e0 94       	com	r14
    154c:	f0 94       	com	r15
    154e:	88 81       	ld	r24, Y
    1550:	99 81       	ldd	r25, Y+1	; 0x01
    1552:	aa 81       	ldd	r26, Y+2	; 0x02
    1554:	bb 81       	ldd	r27, Y+3	; 0x03
    1556:	c8 22       	and	r12, r24
    1558:	d9 22       	and	r13, r25
    155a:	ea 22       	and	r14, r26
    155c:	fb 22       	and	r15, r27
    155e:	c8 82       	st	Y, r12
    1560:	d9 82       	std	Y+1, r13	; 0x01
    1562:	ea 82       	std	Y+2, r14	; 0x02
    1564:	fb 82       	std	Y+3, r15	; 0x03
    }
    ( void ) xTaskResumeAll();
    1566:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <xTaskResumeAll>

    return pxEventBits->uxEventBits;
    156a:	68 81       	ld	r22, Y
    156c:	79 81       	ldd	r23, Y+1	; 0x01
    156e:	8a 81       	ldd	r24, Y+2	; 0x02
    1570:	9b 81       	ldd	r25, Y+3	; 0x03
}
    1572:	df 91       	pop	r29
    1574:	cf 91       	pop	r28
    1576:	1f 91       	pop	r17
    1578:	0f 91       	pop	r16
    157a:	ff 90       	pop	r15
    157c:	ef 90       	pop	r14
    157e:	df 90       	pop	r13
    1580:	cf 90       	pop	r12
    1582:	bf 90       	pop	r11
    1584:	af 90       	pop	r10
    1586:	9f 90       	pop	r9
    1588:	8f 90       	pop	r8
    158a:	7f 90       	pop	r7
    158c:	6f 90       	pop	r6
    158e:	5f 90       	pop	r5
    1590:	4f 90       	pop	r4
    1592:	08 95       	ret

00001594 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
    1594:	cf 93       	push	r28
    1596:	df 93       	push	r29
    1598:	dc 01       	movw	r26, r24
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
    159a:	e4 e9       	ldi	r30, 0x94	; 148
    159c:	f9 e0       	ldi	r31, 0x09	; 9
    159e:	01 c0       	rjmp	.+2      	; 0x15a2 <prvInsertBlockIntoFreeList+0xe>
    15a0:	f9 01       	movw	r30, r18
    15a2:	20 81       	ld	r18, Z
    15a4:	31 81       	ldd	r19, Z+1	; 0x01
    15a6:	2a 17       	cp	r18, r26
    15a8:	3b 07       	cpc	r19, r27
    15aa:	d0 f3       	brcs	.-12     	; 0x15a0 <prvInsertBlockIntoFreeList+0xc>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
    15ac:	82 81       	ldd	r24, Z+2	; 0x02
    15ae:	93 81       	ldd	r25, Z+3	; 0x03
    15b0:	af 01       	movw	r20, r30
    15b2:	48 0f       	add	r20, r24
    15b4:	59 1f       	adc	r21, r25
    15b6:	a4 17       	cp	r26, r20
    15b8:	b5 07       	cpc	r27, r21
    15ba:	49 f4       	brne	.+18     	; 0x15ce <prvInsertBlockIntoFreeList+0x3a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
    15bc:	12 96       	adiw	r26, 0x02	; 2
    15be:	4d 91       	ld	r20, X+
    15c0:	5c 91       	ld	r21, X
    15c2:	13 97       	sbiw	r26, 0x03	; 3
    15c4:	84 0f       	add	r24, r20
    15c6:	95 1f       	adc	r25, r21
    15c8:	93 83       	std	Z+3, r25	; 0x03
    15ca:	82 83       	std	Z+2, r24	; 0x02
    15cc:	df 01       	movw	r26, r30
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
    15ce:	12 96       	adiw	r26, 0x02	; 2
    15d0:	8d 91       	ld	r24, X+
    15d2:	9c 91       	ld	r25, X
    15d4:	13 97       	sbiw	r26, 0x03	; 3
    15d6:	ed 01       	movw	r28, r26
    15d8:	c8 0f       	add	r28, r24
    15da:	d9 1f       	adc	r29, r25
    15dc:	2c 17       	cp	r18, r28
    15de:	3d 07       	cpc	r19, r29
    15e0:	d9 f4       	brne	.+54     	; 0x1618 <prvInsertBlockIntoFreeList+0x84>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
    15e2:	20 91 92 09 	lds	r18, 0x0992	; 0x800992 <pxEnd>
    15e6:	30 91 93 09 	lds	r19, 0x0993	; 0x800993 <pxEnd+0x1>
    15ea:	c2 17       	cp	r28, r18
    15ec:	d3 07       	cpc	r29, r19
    15ee:	81 f0       	breq	.+32     	; 0x1610 <prvInsertBlockIntoFreeList+0x7c>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
    15f0:	2a 81       	ldd	r18, Y+2	; 0x02
    15f2:	3b 81       	ldd	r19, Y+3	; 0x03
    15f4:	82 0f       	add	r24, r18
    15f6:	93 1f       	adc	r25, r19
    15f8:	13 96       	adiw	r26, 0x03	; 3
    15fa:	9c 93       	st	X, r25
    15fc:	8e 93       	st	-X, r24
    15fe:	12 97       	sbiw	r26, 0x02	; 2
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
    1600:	c0 81       	ld	r28, Z
    1602:	d1 81       	ldd	r29, Z+1	; 0x01
    1604:	88 81       	ld	r24, Y
    1606:	99 81       	ldd	r25, Y+1	; 0x01
    1608:	11 96       	adiw	r26, 0x01	; 1
    160a:	9c 93       	st	X, r25
    160c:	8e 93       	st	-X, r24
    160e:	07 c0       	rjmp	.+14     	; 0x161e <prvInsertBlockIntoFreeList+0x8a>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
    1610:	11 96       	adiw	r26, 0x01	; 1
    1612:	dc 93       	st	X, r29
    1614:	ce 93       	st	-X, r28
    1616:	03 c0       	rjmp	.+6      	; 0x161e <prvInsertBlockIntoFreeList+0x8a>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
    1618:	11 96       	adiw	r26, 0x01	; 1
    161a:	3c 93       	st	X, r19
    161c:	2e 93       	st	-X, r18

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
    161e:	ae 17       	cp	r26, r30
    1620:	bf 07       	cpc	r27, r31
    1622:	11 f0       	breq	.+4      	; 0x1628 <prvInsertBlockIntoFreeList+0x94>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
    1624:	b1 83       	std	Z+1, r27	; 0x01
    1626:	a0 83       	st	Z, r26
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    1628:	df 91       	pop	r29
    162a:	cf 91       	pop	r28
    162c:	08 95       	ret

0000162e <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    162e:	cf 92       	push	r12
    1630:	df 92       	push	r13
    1632:	ef 92       	push	r14
    1634:	ff 92       	push	r15
    1636:	0f 93       	push	r16
    1638:	1f 93       	push	r17
    163a:	cf 93       	push	r28
    163c:	df 93       	push	r29
    163e:	ec 01       	movw	r28, r24
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
    1640:	0e 94 a6 16 	call	0x2d4c	; 0x2d4c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
    1644:	80 91 92 09 	lds	r24, 0x0992	; 0x800992 <pxEnd>
    1648:	90 91 93 09 	lds	r25, 0x0993	; 0x800993 <pxEnd+0x1>
    164c:	89 2b       	or	r24, r25
    164e:	41 f5       	brne	.+80     	; 0x16a0 <pvPortMalloc+0x72>

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
    1650:	e4 e9       	ldi	r30, 0x94	; 148
    1652:	f9 e0       	ldi	r31, 0x09	; 9
    1654:	a8 e9       	ldi	r26, 0x98	; 152
    1656:	b9 e0       	ldi	r27, 0x09	; 9
    1658:	b1 83       	std	Z+1, r27	; 0x01
    165a:	a0 83       	st	Z, r26
	xStart.xBlockSize = ( size_t ) 0;
    165c:	13 82       	std	Z+3, r1	; 0x03
    165e:	12 82       	std	Z+2, r1	; 0x02
	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
	uxAddress -= xHeapStructSize;
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
	pxEnd = ( void * ) uxAddress;
    1660:	e4 e3       	ldi	r30, 0x34	; 52
    1662:	f9 e1       	ldi	r31, 0x19	; 25
    1664:	f0 93 93 09 	sts	0x0993, r31	; 0x800993 <pxEnd+0x1>
    1668:	e0 93 92 09 	sts	0x0992, r30	; 0x800992 <pxEnd>
	pxEnd->xBlockSize = 0;
    166c:	13 82       	std	Z+3, r1	; 0x03
    166e:	12 82       	std	Z+2, r1	; 0x02
	pxEnd->pxNextFreeBlock = NULL;
    1670:	11 82       	std	Z+1, r1	; 0x01
    1672:	10 82       	st	Z, r1

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
    1674:	8c e9       	ldi	r24, 0x9C	; 156
    1676:	9f e0       	ldi	r25, 0x0F	; 15
    1678:	13 96       	adiw	r26, 0x03	; 3
    167a:	9c 93       	st	X, r25
    167c:	8e 93       	st	-X, r24
    167e:	12 97       	sbiw	r26, 0x02	; 2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
    1680:	ed 93       	st	X+, r30
    1682:	fc 93       	st	X, r31

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
    1684:	90 93 8f 09 	sts	0x098F, r25	; 0x80098f <xMinimumEverFreeBytesRemaining+0x1>
    1688:	80 93 8e 09 	sts	0x098E, r24	; 0x80098e <xMinimumEverFreeBytesRemaining>
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
    168c:	90 93 91 09 	sts	0x0991, r25	; 0x800991 <xFreeBytesRemaining+0x1>
    1690:	80 93 90 09 	sts	0x0990, r24	; 0x800990 <xFreeBytesRemaining>

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
    1694:	80 e0       	ldi	r24, 0x00	; 0
    1696:	90 e8       	ldi	r25, 0x80	; 128
    1698:	90 93 8d 09 	sts	0x098D, r25	; 0x80098d <xBlockAllocatedBit+0x1>
    169c:	80 93 8c 09 	sts	0x098C, r24	; 0x80098c <xBlockAllocatedBit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
    16a0:	e0 90 8c 09 	lds	r14, 0x098C	; 0x80098c <xBlockAllocatedBit>
    16a4:	f0 90 8d 09 	lds	r15, 0x098D	; 0x80098d <xBlockAllocatedBit+0x1>
    16a8:	c7 01       	movw	r24, r14
    16aa:	8c 23       	and	r24, r28
    16ac:	9d 23       	and	r25, r29
    16ae:	89 2b       	or	r24, r25
    16b0:	09 f0       	breq	.+2      	; 0x16b4 <pvPortMalloc+0x86>
    16b2:	66 c0       	rjmp	.+204    	; 0x1780 <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
    16b4:	20 97       	sbiw	r28, 0x00	; 0
    16b6:	09 f4       	brne	.+2      	; 0x16ba <pvPortMalloc+0x8c>
    16b8:	66 c0       	rjmp	.+204    	; 0x1786 <pvPortMalloc+0x158>
			{
				xWantedSize += xHeapStructSize;
    16ba:	ae 01       	movw	r20, r28
    16bc:	4c 5f       	subi	r20, 0xFC	; 252
    16be:	5f 4f       	sbci	r21, 0xFF	; 255
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
    16c0:	09 f4       	brne	.+2      	; 0x16c4 <pvPortMalloc+0x96>
    16c2:	5e c0       	rjmp	.+188    	; 0x1780 <pvPortMalloc+0x152>
    16c4:	00 91 90 09 	lds	r16, 0x0990	; 0x800990 <xFreeBytesRemaining>
    16c8:	10 91 91 09 	lds	r17, 0x0991	; 0x800991 <xFreeBytesRemaining+0x1>
    16cc:	04 17       	cp	r16, r20
    16ce:	15 07       	cpc	r17, r21
    16d0:	08 f4       	brcc	.+2      	; 0x16d4 <pvPortMalloc+0xa6>
    16d2:	56 c0       	rjmp	.+172    	; 0x1780 <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
    16d4:	c0 91 94 09 	lds	r28, 0x0994	; 0x800994 <xStart>
    16d8:	d0 91 95 09 	lds	r29, 0x0995	; 0x800995 <xStart+0x1>

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
    16dc:	e4 e9       	ldi	r30, 0x94	; 148
    16de:	f9 e0       	ldi	r31, 0x09	; 9
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    16e0:	02 c0       	rjmp	.+4      	; 0x16e6 <pvPortMalloc+0xb8>
    16e2:	fe 01       	movw	r30, r28
				{
					pxPreviousBlock = pxBlock;
					pxBlock = pxBlock->pxNextFreeBlock;
    16e4:	e9 01       	movw	r28, r18
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    16e6:	2a 81       	ldd	r18, Y+2	; 0x02
    16e8:	3b 81       	ldd	r19, Y+3	; 0x03
    16ea:	24 17       	cp	r18, r20
    16ec:	35 07       	cpc	r19, r21
    16ee:	28 f4       	brcc	.+10     	; 0x16fa <pvPortMalloc+0xcc>
    16f0:	28 81       	ld	r18, Y
    16f2:	39 81       	ldd	r19, Y+1	; 0x01
    16f4:	21 15       	cp	r18, r1
    16f6:	31 05       	cpc	r19, r1
    16f8:	a1 f7       	brne	.-24     	; 0x16e2 <pvPortMalloc+0xb4>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
    16fa:	80 91 92 09 	lds	r24, 0x0992	; 0x800992 <pxEnd>
    16fe:	90 91 93 09 	lds	r25, 0x0993	; 0x800993 <pxEnd+0x1>
    1702:	c8 17       	cp	r28, r24
    1704:	d9 07       	cpc	r29, r25
    1706:	e1 f1       	breq	.+120    	; 0x1780 <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
    1708:	c0 80       	ld	r12, Z
    170a:	d1 80       	ldd	r13, Z+1	; 0x01
    170c:	84 e0       	ldi	r24, 0x04	; 4
    170e:	c8 0e       	add	r12, r24
    1710:	d1 1c       	adc	r13, r1

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    1712:	88 81       	ld	r24, Y
    1714:	99 81       	ldd	r25, Y+1	; 0x01
    1716:	91 83       	std	Z+1, r25	; 0x01
    1718:	80 83       	st	Z, r24

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    171a:	2a 81       	ldd	r18, Y+2	; 0x02
    171c:	3b 81       	ldd	r19, Y+3	; 0x03
    171e:	24 1b       	sub	r18, r20
    1720:	35 0b       	sbc	r19, r21
    1722:	29 30       	cpi	r18, 0x09	; 9
    1724:	31 05       	cpc	r19, r1
    1726:	48 f0       	brcs	.+18     	; 0x173a <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
    1728:	ce 01       	movw	r24, r28
    172a:	84 0f       	add	r24, r20
    172c:	95 1f       	adc	r25, r21
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    172e:	fc 01       	movw	r30, r24
    1730:	33 83       	std	Z+3, r19	; 0x03
    1732:	22 83       	std	Z+2, r18	; 0x02
						pxBlock->xBlockSize = xWantedSize;
    1734:	5b 83       	std	Y+3, r21	; 0x03
    1736:	4a 83       	std	Y+2, r20	; 0x02

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
    1738:	2d df       	rcall	.-422    	; 0x1594 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
    173a:	8a 81       	ldd	r24, Y+2	; 0x02
    173c:	9b 81       	ldd	r25, Y+3	; 0x03
    173e:	08 1b       	sub	r16, r24
    1740:	19 0b       	sbc	r17, r25
    1742:	10 93 91 09 	sts	0x0991, r17	; 0x800991 <xFreeBytesRemaining+0x1>
    1746:	00 93 90 09 	sts	0x0990, r16	; 0x800990 <xFreeBytesRemaining>

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
    174a:	20 91 8e 09 	lds	r18, 0x098E	; 0x80098e <xMinimumEverFreeBytesRemaining>
    174e:	30 91 8f 09 	lds	r19, 0x098F	; 0x80098f <xMinimumEverFreeBytesRemaining+0x1>
    1752:	02 17       	cp	r16, r18
    1754:	13 07       	cpc	r17, r19
    1756:	20 f4       	brcc	.+8      	; 0x1760 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
    1758:	10 93 8f 09 	sts	0x098F, r17	; 0x80098f <xMinimumEverFreeBytesRemaining+0x1>
    175c:	00 93 8e 09 	sts	0x098E, r16	; 0x80098e <xMinimumEverFreeBytesRemaining>
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
    1760:	e8 2a       	or	r14, r24
    1762:	f9 2a       	or	r15, r25
    1764:	fb 82       	std	Y+3, r15	; 0x03
    1766:	ea 82       	std	Y+2, r14	; 0x02
					pxBlock->pxNextFreeBlock = NULL;
    1768:	19 82       	std	Y+1, r1	; 0x01
    176a:	18 82       	st	Y, r1
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    176c:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
    1770:	c1 14       	cp	r12, r1
    1772:	d1 04       	cpc	r13, r1
    1774:	59 f4       	brne	.+22     	; 0x178c <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
    1776:	0e 94 62 1e 	call	0x3cc4	; 0x3cc4 <vApplicationMallocFailedHook>
    177a:	c1 2c       	mov	r12, r1
    177c:	d1 2c       	mov	r13, r1
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
    177e:	06 c0       	rjmp	.+12     	; 0x178c <pvPortMalloc+0x15e>
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    1780:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <xTaskResumeAll>
    1784:	f8 cf       	rjmp	.-16     	; 0x1776 <pvPortMalloc+0x148>
    1786:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <xTaskResumeAll>
    178a:	f5 cf       	rjmp	.-22     	; 0x1776 <pvPortMalloc+0x148>
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
}
    178c:	c6 01       	movw	r24, r12
    178e:	df 91       	pop	r29
    1790:	cf 91       	pop	r28
    1792:	1f 91       	pop	r17
    1794:	0f 91       	pop	r16
    1796:	ff 90       	pop	r15
    1798:	ef 90       	pop	r14
    179a:	df 90       	pop	r13
    179c:	cf 90       	pop	r12
    179e:	08 95       	ret

000017a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    17a0:	cf 93       	push	r28
    17a2:	df 93       	push	r29
uint8_t *puc = ( uint8_t * ) pv;
BlockLink_t *pxLink;

	if( pv != NULL )
    17a4:	00 97       	sbiw	r24, 0x00	; 0
    17a6:	51 f1       	breq	.+84     	; 0x17fc <vPortFree+0x5c>

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
		configASSERT( pxLink->pxNextFreeBlock == NULL );

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
    17a8:	fc 01       	movw	r30, r24
    17aa:	34 97       	sbiw	r30, 0x04	; 4
    17ac:	22 81       	ldd	r18, Z+2	; 0x02
    17ae:	33 81       	ldd	r19, Z+3	; 0x03
    17b0:	40 91 8c 09 	lds	r20, 0x098C	; 0x80098c <xBlockAllocatedBit>
    17b4:	50 91 8d 09 	lds	r21, 0x098D	; 0x80098d <xBlockAllocatedBit+0x1>
    17b8:	b9 01       	movw	r22, r18
    17ba:	64 23       	and	r22, r20
    17bc:	75 23       	and	r23, r21
    17be:	67 2b       	or	r22, r23
    17c0:	e9 f0       	breq	.+58     	; 0x17fc <vPortFree+0x5c>
		{
			if( pxLink->pxNextFreeBlock == NULL )
    17c2:	60 81       	ld	r22, Z
    17c4:	71 81       	ldd	r23, Z+1	; 0x01
    17c6:	67 2b       	or	r22, r23
    17c8:	c9 f4       	brne	.+50     	; 0x17fc <vPortFree+0x5c>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
    17ca:	ef 01       	movw	r28, r30
    17cc:	40 95       	com	r20
    17ce:	50 95       	com	r21
    17d0:	24 23       	and	r18, r20
    17d2:	35 23       	and	r19, r21
    17d4:	33 83       	std	Z+3, r19	; 0x03
    17d6:	22 83       	std	Z+2, r18	; 0x02

				vTaskSuspendAll();
    17d8:	0e 94 a6 16 	call	0x2d4c	; 0x2d4c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
    17dc:	20 91 90 09 	lds	r18, 0x0990	; 0x800990 <xFreeBytesRemaining>
    17e0:	30 91 91 09 	lds	r19, 0x0991	; 0x800991 <xFreeBytesRemaining+0x1>
    17e4:	8a 81       	ldd	r24, Y+2	; 0x02
    17e6:	9b 81       	ldd	r25, Y+3	; 0x03
    17e8:	82 0f       	add	r24, r18
    17ea:	93 1f       	adc	r25, r19
    17ec:	90 93 91 09 	sts	0x0991, r25	; 0x800991 <xFreeBytesRemaining+0x1>
    17f0:	80 93 90 09 	sts	0x0990, r24	; 0x800990 <xFreeBytesRemaining>
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
    17f4:	ce 01       	movw	r24, r28
    17f6:	ce de       	rcall	.-612    	; 0x1594 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
    17f8:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
    17fc:	df 91       	pop	r29
    17fe:	cf 91       	pop	r28
    1800:	08 95       	ret

00001802 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    1802:	fc 01       	movw	r30, r24
    /* The list structure contains a list item which is used to mark the
    end of the list.  To initialise the list the list end is inserted
    as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );            /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1804:	03 96       	adiw	r24, 0x03	; 3
    1806:	92 83       	std	Z+2, r25	; 0x02
    1808:	81 83       	std	Z+1, r24	; 0x01

    /* The list end value is the highest possible value in the list to
    ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
    180a:	4f ef       	ldi	r20, 0xFF	; 255
    180c:	5f ef       	ldi	r21, 0xFF	; 255
    180e:	ba 01       	movw	r22, r20
    1810:	43 83       	std	Z+3, r20	; 0x03
    1812:	54 83       	std	Z+4, r21	; 0x04
    1814:	65 83       	std	Z+5, r22	; 0x05
    1816:	76 83       	std	Z+6, r23	; 0x06

    /* The list end next and previous pointers point to itself so we know
    when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );    /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1818:	90 87       	std	Z+8, r25	; 0x08
    181a:	87 83       	std	Z+7, r24	; 0x07
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    181c:	92 87       	std	Z+10, r25	; 0x0a
    181e:	81 87       	std	Z+9, r24	; 0x09

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    1820:	10 82       	st	Z, r1
    1822:	08 95       	ret

00001824 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
    1824:	fc 01       	movw	r30, r24
    1826:	13 86       	std	Z+11, r1	; 0x0b
    1828:	12 86       	std	Z+10, r1	; 0x0a
    182a:	08 95       	ret

0000182c <vListInsertEnd>:
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    182c:	cf 93       	push	r28
    182e:	df 93       	push	r29
    1830:	9c 01       	movw	r18, r24
    1832:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
    1834:	dc 01       	movw	r26, r24
    1836:	11 96       	adiw	r26, 0x01	; 1
    1838:	cd 91       	ld	r28, X+
    183a:	dc 91       	ld	r29, X
    183c:	12 97       	sbiw	r26, 0x02	; 2
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
    makes the new list item the last item to be removed by a call to
    listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
    183e:	d5 83       	std	Z+5, r29	; 0x05
    1840:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    1842:	8e 81       	ldd	r24, Y+6	; 0x06
    1844:	9f 81       	ldd	r25, Y+7	; 0x07
    1846:	97 83       	std	Z+7, r25	; 0x07
    1848:	86 83       	std	Z+6, r24	; 0x06

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
    184a:	8e 81       	ldd	r24, Y+6	; 0x06
    184c:	9f 81       	ldd	r25, Y+7	; 0x07
    184e:	dc 01       	movw	r26, r24
    1850:	15 96       	adiw	r26, 0x05	; 5
    1852:	7c 93       	st	X, r23
    1854:	6e 93       	st	-X, r22
    1856:	14 97       	sbiw	r26, 0x04	; 4
    pxIndex->pxPrevious = pxNewListItem;
    1858:	7f 83       	std	Y+7, r23	; 0x07
    185a:	6e 83       	std	Y+6, r22	; 0x06

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
    185c:	33 87       	std	Z+11, r19	; 0x0b
    185e:	22 87       	std	Z+10, r18	; 0x0a

    ( pxList->uxNumberOfItems )++;
    1860:	f9 01       	movw	r30, r18
    1862:	80 81       	ld	r24, Z
    1864:	8f 5f       	subi	r24, 0xFF	; 255
    1866:	80 83       	st	Z, r24
}
    1868:	df 91       	pop	r29
    186a:	cf 91       	pop	r28
    186c:	08 95       	ret

0000186e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    186e:	0f 93       	push	r16
    1870:	1f 93       	push	r17
    1872:	cf 93       	push	r28
    1874:	df 93       	push	r29
    1876:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    1878:	08 81       	ld	r16, Y
    187a:	19 81       	ldd	r17, Y+1	; 0x01
    187c:	2a 81       	ldd	r18, Y+2	; 0x02
    187e:	3b 81       	ldd	r19, Y+3	; 0x03
    new list item should be placed after it.  This ensures that TCBs which are
    stored in ready lists (all of which have the same xItemValue value) get a
    share of the CPU.  However, if the xItemValue is the same as the back marker
    the iteration loop below will not end.  Therefore the value is checked
    first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
    1880:	0f 3f       	cpi	r16, 0xFF	; 255
    1882:	4f ef       	ldi	r20, 0xFF	; 255
    1884:	14 07       	cpc	r17, r20
    1886:	24 07       	cpc	r18, r20
    1888:	34 07       	cpc	r19, r20
    188a:	21 f4       	brne	.+8      	; 0x1894 <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
    188c:	fc 01       	movw	r30, r24
    188e:	a1 85       	ldd	r26, Z+9	; 0x09
    1890:	b2 85       	ldd	r27, Z+10	; 0x0a
    1892:	11 c0       	rjmp	.+34     	; 0x18b6 <vListInsert+0x48>
            4) Using a queue or semaphore before it has been initialised or
               before the scheduler has been started (are interrupts firing
               before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
    1894:	dc 01       	movw	r26, r24
    1896:	13 96       	adiw	r26, 0x03	; 3
    1898:	01 c0       	rjmp	.+2      	; 0x189c <vListInsert+0x2e>
    189a:	df 01       	movw	r26, r30
    189c:	14 96       	adiw	r26, 0x04	; 4
    189e:	ed 91       	ld	r30, X+
    18a0:	fc 91       	ld	r31, X
    18a2:	15 97       	sbiw	r26, 0x05	; 5
    18a4:	40 81       	ld	r20, Z
    18a6:	51 81       	ldd	r21, Z+1	; 0x01
    18a8:	62 81       	ldd	r22, Z+2	; 0x02
    18aa:	73 81       	ldd	r23, Z+3	; 0x03
    18ac:	04 17       	cp	r16, r20
    18ae:	15 07       	cpc	r17, r21
    18b0:	26 07       	cpc	r18, r22
    18b2:	37 07       	cpc	r19, r23
    18b4:	90 f7       	brcc	.-28     	; 0x189a <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
            insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
    18b6:	14 96       	adiw	r26, 0x04	; 4
    18b8:	ed 91       	ld	r30, X+
    18ba:	fc 91       	ld	r31, X
    18bc:	15 97       	sbiw	r26, 0x05	; 5
    18be:	fd 83       	std	Y+5, r31	; 0x05
    18c0:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    18c2:	d7 83       	std	Z+7, r29	; 0x07
    18c4:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
    18c6:	bf 83       	std	Y+7, r27	; 0x07
    18c8:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
    18ca:	15 96       	adiw	r26, 0x05	; 5
    18cc:	dc 93       	st	X, r29
    18ce:	ce 93       	st	-X, r28
    18d0:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
    item later. */
    pxNewListItem->pxContainer = pxList;
    18d2:	9b 87       	std	Y+11, r25	; 0x0b
    18d4:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
    18d6:	fc 01       	movw	r30, r24
    18d8:	20 81       	ld	r18, Z
    18da:	2f 5f       	subi	r18, 0xFF	; 255
    18dc:	20 83       	st	Z, r18
}
    18de:	df 91       	pop	r29
    18e0:	cf 91       	pop	r28
    18e2:	1f 91       	pop	r17
    18e4:	0f 91       	pop	r16
    18e6:	08 95       	ret

000018e8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    18e8:	cf 93       	push	r28
    18ea:	df 93       	push	r29
    18ec:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
    18ee:	a2 85       	ldd	r26, Z+10	; 0x0a
    18f0:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    18f2:	c4 81       	ldd	r28, Z+4	; 0x04
    18f4:	d5 81       	ldd	r29, Z+5	; 0x05
    18f6:	86 81       	ldd	r24, Z+6	; 0x06
    18f8:	97 81       	ldd	r25, Z+7	; 0x07
    18fa:	9f 83       	std	Y+7, r25	; 0x07
    18fc:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    18fe:	c6 81       	ldd	r28, Z+6	; 0x06
    1900:	d7 81       	ldd	r29, Z+7	; 0x07
    1902:	84 81       	ldd	r24, Z+4	; 0x04
    1904:	95 81       	ldd	r25, Z+5	; 0x05
    1906:	9d 83       	std	Y+5, r25	; 0x05
    1908:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
    190a:	11 96       	adiw	r26, 0x01	; 1
    190c:	8d 91       	ld	r24, X+
    190e:	9c 91       	ld	r25, X
    1910:	12 97       	sbiw	r26, 0x02	; 2
    1912:	e8 17       	cp	r30, r24
    1914:	f9 07       	cpc	r31, r25
    1916:	31 f4       	brne	.+12     	; 0x1924 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
    1918:	86 81       	ldd	r24, Z+6	; 0x06
    191a:	97 81       	ldd	r25, Z+7	; 0x07
    191c:	12 96       	adiw	r26, 0x02	; 2
    191e:	9c 93       	st	X, r25
    1920:	8e 93       	st	-X, r24
    1922:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
    1924:	13 86       	std	Z+11, r1	; 0x0b
    1926:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
    1928:	8c 91       	ld	r24, X
    192a:	81 50       	subi	r24, 0x01	; 1
    192c:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
    192e:	8c 91       	ld	r24, X
}
    1930:	df 91       	pop	r29
    1932:	cf 91       	pop	r28
    1934:	08 95       	ret

00001936 <pxPortInitialiseStack>:
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    1936:	31 e1       	ldi	r19, 0x11	; 17
    1938:	fc 01       	movw	r30, r24
    193a:	30 83       	st	Z, r19
    193c:	31 97       	sbiw	r30, 0x01	; 1
    193e:	22 e2       	ldi	r18, 0x22	; 34
    1940:	20 83       	st	Z, r18
    1942:	31 97       	sbiw	r30, 0x01	; 1
    1944:	a3 e3       	ldi	r26, 0x33	; 51
    1946:	a0 83       	st	Z, r26
    1948:	31 97       	sbiw	r30, 0x01	; 1
    194a:	60 83       	st	Z, r22
    194c:	31 97       	sbiw	r30, 0x01	; 1
    194e:	70 83       	st	Z, r23
    1950:	31 97       	sbiw	r30, 0x01	; 1
    1952:	10 82       	st	Z, r1
    1954:	31 97       	sbiw	r30, 0x01	; 1
    1956:	10 82       	st	Z, r1
    1958:	31 97       	sbiw	r30, 0x01	; 1
    195a:	60 e8       	ldi	r22, 0x80	; 128
    195c:	60 83       	st	Z, r22
    195e:	31 97       	sbiw	r30, 0x01	; 1
    1960:	10 82       	st	Z, r1
    1962:	31 97       	sbiw	r30, 0x01	; 1
    1964:	10 82       	st	Z, r1
    1966:	31 97       	sbiw	r30, 0x01	; 1
    1968:	10 82       	st	Z, r1
    196a:	31 97       	sbiw	r30, 0x01	; 1
    196c:	62 e0       	ldi	r22, 0x02	; 2
    196e:	60 83       	st	Z, r22
    1970:	31 97       	sbiw	r30, 0x01	; 1
    1972:	63 e0       	ldi	r22, 0x03	; 3
    1974:	60 83       	st	Z, r22
    1976:	31 97       	sbiw	r30, 0x01	; 1
    1978:	64 e0       	ldi	r22, 0x04	; 4
    197a:	60 83       	st	Z, r22
    197c:	31 97       	sbiw	r30, 0x01	; 1
    197e:	65 e0       	ldi	r22, 0x05	; 5
    1980:	60 83       	st	Z, r22
    1982:	31 97       	sbiw	r30, 0x01	; 1
    1984:	66 e0       	ldi	r22, 0x06	; 6
    1986:	60 83       	st	Z, r22
    1988:	31 97       	sbiw	r30, 0x01	; 1
    198a:	67 e0       	ldi	r22, 0x07	; 7
    198c:	60 83       	st	Z, r22
    198e:	31 97       	sbiw	r30, 0x01	; 1
    1990:	68 e0       	ldi	r22, 0x08	; 8
    1992:	60 83       	st	Z, r22
    1994:	31 97       	sbiw	r30, 0x01	; 1
    1996:	69 e0       	ldi	r22, 0x09	; 9
    1998:	60 83       	st	Z, r22
    199a:	31 97       	sbiw	r30, 0x01	; 1
    199c:	60 e1       	ldi	r22, 0x10	; 16
    199e:	60 83       	st	Z, r22
    19a0:	31 97       	sbiw	r30, 0x01	; 1
    19a2:	30 83       	st	Z, r19
    19a4:	31 97       	sbiw	r30, 0x01	; 1
    19a6:	32 e1       	ldi	r19, 0x12	; 18
    19a8:	30 83       	st	Z, r19
    19aa:	31 97       	sbiw	r30, 0x01	; 1
    19ac:	33 e1       	ldi	r19, 0x13	; 19
    19ae:	30 83       	st	Z, r19
    19b0:	31 97       	sbiw	r30, 0x01	; 1
    19b2:	34 e1       	ldi	r19, 0x14	; 20
    19b4:	30 83       	st	Z, r19
    19b6:	31 97       	sbiw	r30, 0x01	; 1
    19b8:	35 e1       	ldi	r19, 0x15	; 21
    19ba:	30 83       	st	Z, r19
    19bc:	31 97       	sbiw	r30, 0x01	; 1
    19be:	36 e1       	ldi	r19, 0x16	; 22
    19c0:	30 83       	st	Z, r19
    19c2:	31 97       	sbiw	r30, 0x01	; 1
    19c4:	37 e1       	ldi	r19, 0x17	; 23
    19c6:	30 83       	st	Z, r19
    19c8:	31 97       	sbiw	r30, 0x01	; 1
    19ca:	38 e1       	ldi	r19, 0x18	; 24
    19cc:	30 83       	st	Z, r19
    19ce:	31 97       	sbiw	r30, 0x01	; 1
    19d0:	39 e1       	ldi	r19, 0x19	; 25
    19d2:	30 83       	st	Z, r19
    19d4:	31 97       	sbiw	r30, 0x01	; 1
    19d6:	30 e2       	ldi	r19, 0x20	; 32
    19d8:	30 83       	st	Z, r19
    19da:	31 97       	sbiw	r30, 0x01	; 1
    19dc:	31 e2       	ldi	r19, 0x21	; 33
    19de:	30 83       	st	Z, r19
    19e0:	31 97       	sbiw	r30, 0x01	; 1
    19e2:	20 83       	st	Z, r18
    19e4:	31 97       	sbiw	r30, 0x01	; 1
    19e6:	23 e2       	ldi	r18, 0x23	; 35
    19e8:	20 83       	st	Z, r18
    19ea:	31 97       	sbiw	r30, 0x01	; 1
    19ec:	40 83       	st	Z, r20
    19ee:	31 97       	sbiw	r30, 0x01	; 1
    19f0:	50 83       	st	Z, r21
    19f2:	31 97       	sbiw	r30, 0x01	; 1
    19f4:	26 e2       	ldi	r18, 0x26	; 38
    19f6:	20 83       	st	Z, r18
    19f8:	31 97       	sbiw	r30, 0x01	; 1
    19fa:	27 e2       	ldi	r18, 0x27	; 39
    19fc:	20 83       	st	Z, r18
    19fe:	31 97       	sbiw	r30, 0x01	; 1
    1a00:	28 e2       	ldi	r18, 0x28	; 40
    1a02:	20 83       	st	Z, r18
    1a04:	31 97       	sbiw	r30, 0x01	; 1
    1a06:	29 e2       	ldi	r18, 0x29	; 41
    1a08:	20 83       	st	Z, r18
    1a0a:	31 97       	sbiw	r30, 0x01	; 1
    1a0c:	20 e3       	ldi	r18, 0x30	; 48
    1a0e:	20 83       	st	Z, r18
    1a10:	31 97       	sbiw	r30, 0x01	; 1
    1a12:	21 e3       	ldi	r18, 0x31	; 49
    1a14:	20 83       	st	Z, r18
    1a16:	89 97       	sbiw	r24, 0x29	; 41
    1a18:	08 95       	ret

00001a1a <xPortStartScheduler>:
    1a1a:	a8 95       	wdr
    1a1c:	90 ec       	ldi	r25, 0xC0	; 192
    1a1e:	88 e1       	ldi	r24, 0x18	; 24
    1a20:	0f b6       	in	r0, 0x3f	; 63
    1a22:	f8 94       	cli
    1a24:	a8 95       	wdr
    1a26:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    1a2a:	0f be       	out	0x3f, r0	; 63
    1a2c:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    1a30:	a0 91 b2 19 	lds	r26, 0x19B2	; 0x8019b2 <pxCurrentTCB>
    1a34:	b0 91 b3 19 	lds	r27, 0x19B3	; 0x8019b3 <pxCurrentTCB+0x1>
    1a38:	cd 91       	ld	r28, X+
    1a3a:	cd bf       	out	0x3d, r28	; 61
    1a3c:	dd 91       	ld	r29, X+
    1a3e:	de bf       	out	0x3e, r29	; 62
    1a40:	ff 91       	pop	r31
    1a42:	ef 91       	pop	r30
    1a44:	df 91       	pop	r29
    1a46:	cf 91       	pop	r28
    1a48:	bf 91       	pop	r27
    1a4a:	af 91       	pop	r26
    1a4c:	9f 91       	pop	r25
    1a4e:	8f 91       	pop	r24
    1a50:	7f 91       	pop	r23
    1a52:	6f 91       	pop	r22
    1a54:	5f 91       	pop	r21
    1a56:	4f 91       	pop	r20
    1a58:	3f 91       	pop	r19
    1a5a:	2f 91       	pop	r18
    1a5c:	1f 91       	pop	r17
    1a5e:	0f 91       	pop	r16
    1a60:	ff 90       	pop	r15
    1a62:	ef 90       	pop	r14
    1a64:	df 90       	pop	r13
    1a66:	cf 90       	pop	r12
    1a68:	bf 90       	pop	r11
    1a6a:	af 90       	pop	r10
    1a6c:	9f 90       	pop	r9
    1a6e:	8f 90       	pop	r8
    1a70:	7f 90       	pop	r7
    1a72:	6f 90       	pop	r6
    1a74:	5f 90       	pop	r5
    1a76:	4f 90       	pop	r4
    1a78:	3f 90       	pop	r3
    1a7a:	2f 90       	pop	r2
    1a7c:	1f 90       	pop	r1
    1a7e:	0f 90       	pop	r0
    1a80:	0c be       	out	0x3c, r0	; 60
    1a82:	0f 90       	pop	r0
    1a84:	0b be       	out	0x3b, r0	; 59
    1a86:	0f 90       	pop	r0
    1a88:	0f be       	out	0x3f, r0	; 63
    1a8a:	0f 90       	pop	r0
    1a8c:	08 95       	ret
    1a8e:	81 e0       	ldi	r24, 0x01	; 1
    1a90:	08 95       	ret

00001a92 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYield( void )
{
    portSAVE_CONTEXT();
    1a92:	0f 92       	push	r0
    1a94:	0f b6       	in	r0, 0x3f	; 63
    1a96:	f8 94       	cli
    1a98:	0f 92       	push	r0
    1a9a:	0b b6       	in	r0, 0x3b	; 59
    1a9c:	0f 92       	push	r0
    1a9e:	0c b6       	in	r0, 0x3c	; 60
    1aa0:	0f 92       	push	r0
    1aa2:	1f 92       	push	r1
    1aa4:	11 24       	eor	r1, r1
    1aa6:	2f 92       	push	r2
    1aa8:	3f 92       	push	r3
    1aaa:	4f 92       	push	r4
    1aac:	5f 92       	push	r5
    1aae:	6f 92       	push	r6
    1ab0:	7f 92       	push	r7
    1ab2:	8f 92       	push	r8
    1ab4:	9f 92       	push	r9
    1ab6:	af 92       	push	r10
    1ab8:	bf 92       	push	r11
    1aba:	cf 92       	push	r12
    1abc:	df 92       	push	r13
    1abe:	ef 92       	push	r14
    1ac0:	ff 92       	push	r15
    1ac2:	0f 93       	push	r16
    1ac4:	1f 93       	push	r17
    1ac6:	2f 93       	push	r18
    1ac8:	3f 93       	push	r19
    1aca:	4f 93       	push	r20
    1acc:	5f 93       	push	r21
    1ace:	6f 93       	push	r22
    1ad0:	7f 93       	push	r23
    1ad2:	8f 93       	push	r24
    1ad4:	9f 93       	push	r25
    1ad6:	af 93       	push	r26
    1ad8:	bf 93       	push	r27
    1ada:	cf 93       	push	r28
    1adc:	df 93       	push	r29
    1ade:	ef 93       	push	r30
    1ae0:	ff 93       	push	r31
    1ae2:	a0 91 b2 19 	lds	r26, 0x19B2	; 0x8019b2 <pxCurrentTCB>
    1ae6:	b0 91 b3 19 	lds	r27, 0x19B3	; 0x8019b3 <pxCurrentTCB+0x1>
    1aea:	0d b6       	in	r0, 0x3d	; 61
    1aec:	0d 92       	st	X+, r0
    1aee:	0e b6       	in	r0, 0x3e	; 62
    1af0:	0d 92       	st	X+, r0
    vTaskSwitchContext();
    1af2:	0e 94 24 18 	call	0x3048	; 0x3048 <vTaskSwitchContext>
    portRESTORE_CONTEXT();
    1af6:	a0 91 b2 19 	lds	r26, 0x19B2	; 0x8019b2 <pxCurrentTCB>
    1afa:	b0 91 b3 19 	lds	r27, 0x19B3	; 0x8019b3 <pxCurrentTCB+0x1>
    1afe:	cd 91       	ld	r28, X+
    1b00:	cd bf       	out	0x3d, r28	; 61
    1b02:	dd 91       	ld	r29, X+
    1b04:	de bf       	out	0x3e, r29	; 62
    1b06:	ff 91       	pop	r31
    1b08:	ef 91       	pop	r30
    1b0a:	df 91       	pop	r29
    1b0c:	cf 91       	pop	r28
    1b0e:	bf 91       	pop	r27
    1b10:	af 91       	pop	r26
    1b12:	9f 91       	pop	r25
    1b14:	8f 91       	pop	r24
    1b16:	7f 91       	pop	r23
    1b18:	6f 91       	pop	r22
    1b1a:	5f 91       	pop	r21
    1b1c:	4f 91       	pop	r20
    1b1e:	3f 91       	pop	r19
    1b20:	2f 91       	pop	r18
    1b22:	1f 91       	pop	r17
    1b24:	0f 91       	pop	r16
    1b26:	ff 90       	pop	r15
    1b28:	ef 90       	pop	r14
    1b2a:	df 90       	pop	r13
    1b2c:	cf 90       	pop	r12
    1b2e:	bf 90       	pop	r11
    1b30:	af 90       	pop	r10
    1b32:	9f 90       	pop	r9
    1b34:	8f 90       	pop	r8
    1b36:	7f 90       	pop	r7
    1b38:	6f 90       	pop	r6
    1b3a:	5f 90       	pop	r5
    1b3c:	4f 90       	pop	r4
    1b3e:	3f 90       	pop	r3
    1b40:	2f 90       	pop	r2
    1b42:	1f 90       	pop	r1
    1b44:	0f 90       	pop	r0
    1b46:	0c be       	out	0x3c, r0	; 60
    1b48:	0f 90       	pop	r0
    1b4a:	0b be       	out	0x3b, r0	; 59
    1b4c:	0f 90       	pop	r0
    1b4e:	0f be       	out	0x3f, r0	; 63
    1b50:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
    1b52:	08 95       	ret

00001b54 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
    1b54:	0f 92       	push	r0
    1b56:	0f b6       	in	r0, 0x3f	; 63
    1b58:	f8 94       	cli
    1b5a:	0f 92       	push	r0
    1b5c:	0b b6       	in	r0, 0x3b	; 59
    1b5e:	0f 92       	push	r0
    1b60:	0c b6       	in	r0, 0x3c	; 60
    1b62:	0f 92       	push	r0
    1b64:	1f 92       	push	r1
    1b66:	11 24       	eor	r1, r1
    1b68:	2f 92       	push	r2
    1b6a:	3f 92       	push	r3
    1b6c:	4f 92       	push	r4
    1b6e:	5f 92       	push	r5
    1b70:	6f 92       	push	r6
    1b72:	7f 92       	push	r7
    1b74:	8f 92       	push	r8
    1b76:	9f 92       	push	r9
    1b78:	af 92       	push	r10
    1b7a:	bf 92       	push	r11
    1b7c:	cf 92       	push	r12
    1b7e:	df 92       	push	r13
    1b80:	ef 92       	push	r14
    1b82:	ff 92       	push	r15
    1b84:	0f 93       	push	r16
    1b86:	1f 93       	push	r17
    1b88:	2f 93       	push	r18
    1b8a:	3f 93       	push	r19
    1b8c:	4f 93       	push	r20
    1b8e:	5f 93       	push	r21
    1b90:	6f 93       	push	r22
    1b92:	7f 93       	push	r23
    1b94:	8f 93       	push	r24
    1b96:	9f 93       	push	r25
    1b98:	af 93       	push	r26
    1b9a:	bf 93       	push	r27
    1b9c:	cf 93       	push	r28
    1b9e:	df 93       	push	r29
    1ba0:	ef 93       	push	r30
    1ba2:	ff 93       	push	r31
    1ba4:	a0 91 b2 19 	lds	r26, 0x19B2	; 0x8019b2 <pxCurrentTCB>
    1ba8:	b0 91 b3 19 	lds	r27, 0x19B3	; 0x8019b3 <pxCurrentTCB+0x1>
    1bac:	0d b6       	in	r0, 0x3d	; 61
    1bae:	0d 92       	st	X+, r0
    1bb0:	0e b6       	in	r0, 0x3e	; 62
    1bb2:	0d 92       	st	X+, r0

    sleep_reset();        //     reset the sleep_mode() faster than sleep_disable();
    1bb4:	13 be       	out	0x33, r1	; 51

    if( xTaskIncrementTick() != pdFALSE )
    1bb6:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <xTaskIncrementTick>
    1bba:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
    1bbc:	0e 94 24 18 	call	0x3048	; 0x3048 <vTaskSwitchContext>
    }

    portRESTORE_CONTEXT();
    1bc0:	a0 91 b2 19 	lds	r26, 0x19B2	; 0x8019b2 <pxCurrentTCB>
    1bc4:	b0 91 b3 19 	lds	r27, 0x19B3	; 0x8019b3 <pxCurrentTCB+0x1>
    1bc8:	cd 91       	ld	r28, X+
    1bca:	cd bf       	out	0x3d, r28	; 61
    1bcc:	dd 91       	ld	r29, X+
    1bce:	de bf       	out	0x3e, r29	; 62
    1bd0:	ff 91       	pop	r31
    1bd2:	ef 91       	pop	r30
    1bd4:	df 91       	pop	r29
    1bd6:	cf 91       	pop	r28
    1bd8:	bf 91       	pop	r27
    1bda:	af 91       	pop	r26
    1bdc:	9f 91       	pop	r25
    1bde:	8f 91       	pop	r24
    1be0:	7f 91       	pop	r23
    1be2:	6f 91       	pop	r22
    1be4:	5f 91       	pop	r21
    1be6:	4f 91       	pop	r20
    1be8:	3f 91       	pop	r19
    1bea:	2f 91       	pop	r18
    1bec:	1f 91       	pop	r17
    1bee:	0f 91       	pop	r16
    1bf0:	ff 90       	pop	r15
    1bf2:	ef 90       	pop	r14
    1bf4:	df 90       	pop	r13
    1bf6:	cf 90       	pop	r12
    1bf8:	bf 90       	pop	r11
    1bfa:	af 90       	pop	r10
    1bfc:	9f 90       	pop	r9
    1bfe:	8f 90       	pop	r8
    1c00:	7f 90       	pop	r7
    1c02:	6f 90       	pop	r6
    1c04:	5f 90       	pop	r5
    1c06:	4f 90       	pop	r4
    1c08:	3f 90       	pop	r3
    1c0a:	2f 90       	pop	r2
    1c0c:	1f 90       	pop	r1
    1c0e:	0f 90       	pop	r0
    1c10:	0c be       	out	0x3c, r0	; 60
    1c12:	0f 90       	pop	r0
    1c14:	0b be       	out	0x3b, r0	; 59
    1c16:	0f 90       	pop	r0
    1c18:	0f be       	out	0x3f, r0	; 63
    1c1a:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
    1c1c:	08 95       	ret

00001c1e <__vector_12>:
     */
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
//  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
    1c1e:	9a df       	rcall	.-204    	; 0x1b54 <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
    1c20:	18 95       	reti

00001c22 <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    1c22:	0f b6       	in	r0, 0x3f	; 63
    1c24:	f8 94       	cli
    1c26:	0f 92       	push	r0
    1c28:	fc 01       	movw	r30, r24
    1c2a:	96 8d       	ldd	r25, Z+30	; 0x1e
    1c2c:	0f 90       	pop	r0
    1c2e:	0f be       	out	0x3f, r0	; 63
    1c30:	81 e0       	ldi	r24, 0x01	; 1
    1c32:	91 11       	cpse	r25, r1
    1c34:	80 e0       	ldi	r24, 0x00	; 0
    1c36:	08 95       	ret

00001c38 <prvCopyDataToQueue>:
    1c38:	0f 93       	push	r16
    1c3a:	1f 93       	push	r17
    1c3c:	cf 93       	push	r28
    1c3e:	df 93       	push	r29
    1c40:	ec 01       	movw	r28, r24
    1c42:	04 2f       	mov	r16, r20
    1c44:	1e 8d       	ldd	r17, Y+30	; 0x1e
    1c46:	48 a1       	ldd	r20, Y+32	; 0x20
    1c48:	41 11       	cpse	r20, r1
    1c4a:	0c c0       	rjmp	.+24     	; 0x1c64 <prvCopyDataToQueue+0x2c>
    1c4c:	88 81       	ld	r24, Y
    1c4e:	99 81       	ldd	r25, Y+1	; 0x01
    1c50:	89 2b       	or	r24, r25
    1c52:	09 f0       	breq	.+2      	; 0x1c56 <prvCopyDataToQueue+0x1e>
    1c54:	42 c0       	rjmp	.+132    	; 0x1cda <prvCopyDataToQueue+0xa2>
    1c56:	8c 81       	ldd	r24, Y+4	; 0x04
    1c58:	9d 81       	ldd	r25, Y+5	; 0x05
    1c5a:	0e 94 75 1a 	call	0x34ea	; 0x34ea <xTaskPriorityDisinherit>
    1c5e:	1d 82       	std	Y+5, r1	; 0x05
    1c60:	1c 82       	std	Y+4, r1	; 0x04
    1c62:	42 c0       	rjmp	.+132    	; 0x1ce8 <prvCopyDataToQueue+0xb0>
    1c64:	01 11       	cpse	r16, r1
    1c66:	17 c0       	rjmp	.+46     	; 0x1c96 <prvCopyDataToQueue+0x5e>
    1c68:	50 e0       	ldi	r21, 0x00	; 0
    1c6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c6c:	9b 81       	ldd	r25, Y+3	; 0x03
    1c6e:	0e 94 67 2f 	call	0x5ece	; 0x5ece <memcpy>
    1c72:	28 a1       	ldd	r18, Y+32	; 0x20
    1c74:	8a 81       	ldd	r24, Y+2	; 0x02
    1c76:	9b 81       	ldd	r25, Y+3	; 0x03
    1c78:	82 0f       	add	r24, r18
    1c7a:	91 1d       	adc	r25, r1
    1c7c:	9b 83       	std	Y+3, r25	; 0x03
    1c7e:	8a 83       	std	Y+2, r24	; 0x02
    1c80:	2c 81       	ldd	r18, Y+4	; 0x04
    1c82:	3d 81       	ldd	r19, Y+5	; 0x05
    1c84:	82 17       	cp	r24, r18
    1c86:	93 07       	cpc	r25, r19
    1c88:	50 f1       	brcs	.+84     	; 0x1cde <prvCopyDataToQueue+0xa6>
    1c8a:	88 81       	ld	r24, Y
    1c8c:	99 81       	ldd	r25, Y+1	; 0x01
    1c8e:	9b 83       	std	Y+3, r25	; 0x03
    1c90:	8a 83       	std	Y+2, r24	; 0x02
    1c92:	80 e0       	ldi	r24, 0x00	; 0
    1c94:	29 c0       	rjmp	.+82     	; 0x1ce8 <prvCopyDataToQueue+0xb0>
    1c96:	50 e0       	ldi	r21, 0x00	; 0
    1c98:	8e 81       	ldd	r24, Y+6	; 0x06
    1c9a:	9f 81       	ldd	r25, Y+7	; 0x07
    1c9c:	0e 94 67 2f 	call	0x5ece	; 0x5ece <memcpy>
    1ca0:	88 a1       	ldd	r24, Y+32	; 0x20
    1ca2:	90 e0       	ldi	r25, 0x00	; 0
    1ca4:	91 95       	neg	r25
    1ca6:	81 95       	neg	r24
    1ca8:	91 09       	sbc	r25, r1
    1caa:	2e 81       	ldd	r18, Y+6	; 0x06
    1cac:	3f 81       	ldd	r19, Y+7	; 0x07
    1cae:	28 0f       	add	r18, r24
    1cb0:	39 1f       	adc	r19, r25
    1cb2:	3f 83       	std	Y+7, r19	; 0x07
    1cb4:	2e 83       	std	Y+6, r18	; 0x06
    1cb6:	48 81       	ld	r20, Y
    1cb8:	59 81       	ldd	r21, Y+1	; 0x01
    1cba:	24 17       	cp	r18, r20
    1cbc:	35 07       	cpc	r19, r21
    1cbe:	30 f4       	brcc	.+12     	; 0x1ccc <prvCopyDataToQueue+0x94>
    1cc0:	2c 81       	ldd	r18, Y+4	; 0x04
    1cc2:	3d 81       	ldd	r19, Y+5	; 0x05
    1cc4:	82 0f       	add	r24, r18
    1cc6:	93 1f       	adc	r25, r19
    1cc8:	9f 83       	std	Y+7, r25	; 0x07
    1cca:	8e 83       	std	Y+6, r24	; 0x06
    1ccc:	02 30       	cpi	r16, 0x02	; 2
    1cce:	49 f4       	brne	.+18     	; 0x1ce2 <prvCopyDataToQueue+0xaa>
    1cd0:	11 23       	and	r17, r17
    1cd2:	49 f0       	breq	.+18     	; 0x1ce6 <prvCopyDataToQueue+0xae>
    1cd4:	11 50       	subi	r17, 0x01	; 1
    1cd6:	80 e0       	ldi	r24, 0x00	; 0
    1cd8:	07 c0       	rjmp	.+14     	; 0x1ce8 <prvCopyDataToQueue+0xb0>
    1cda:	80 e0       	ldi	r24, 0x00	; 0
    1cdc:	05 c0       	rjmp	.+10     	; 0x1ce8 <prvCopyDataToQueue+0xb0>
    1cde:	80 e0       	ldi	r24, 0x00	; 0
    1ce0:	03 c0       	rjmp	.+6      	; 0x1ce8 <prvCopyDataToQueue+0xb0>
    1ce2:	80 e0       	ldi	r24, 0x00	; 0
    1ce4:	01 c0       	rjmp	.+2      	; 0x1ce8 <prvCopyDataToQueue+0xb0>
    1ce6:	80 e0       	ldi	r24, 0x00	; 0
    1ce8:	1f 5f       	subi	r17, 0xFF	; 255
    1cea:	1e 8f       	std	Y+30, r17	; 0x1e
    1cec:	df 91       	pop	r29
    1cee:	cf 91       	pop	r28
    1cf0:	1f 91       	pop	r17
    1cf2:	0f 91       	pop	r16
    1cf4:	08 95       	ret

00001cf6 <prvCopyDataFromQueue>:
    1cf6:	fc 01       	movw	r30, r24
    1cf8:	40 a1       	ldd	r20, Z+32	; 0x20
    1cfa:	44 23       	and	r20, r20
    1cfc:	a9 f0       	breq	.+42     	; 0x1d28 <prvCopyDataFromQueue+0x32>
    1cfe:	50 e0       	ldi	r21, 0x00	; 0
    1d00:	26 81       	ldd	r18, Z+6	; 0x06
    1d02:	37 81       	ldd	r19, Z+7	; 0x07
    1d04:	24 0f       	add	r18, r20
    1d06:	35 1f       	adc	r19, r21
    1d08:	37 83       	std	Z+7, r19	; 0x07
    1d0a:	26 83       	std	Z+6, r18	; 0x06
    1d0c:	84 81       	ldd	r24, Z+4	; 0x04
    1d0e:	95 81       	ldd	r25, Z+5	; 0x05
    1d10:	28 17       	cp	r18, r24
    1d12:	39 07       	cpc	r19, r25
    1d14:	20 f0       	brcs	.+8      	; 0x1d1e <prvCopyDataFromQueue+0x28>
    1d16:	80 81       	ld	r24, Z
    1d18:	91 81       	ldd	r25, Z+1	; 0x01
    1d1a:	97 83       	std	Z+7, r25	; 0x07
    1d1c:	86 83       	std	Z+6, r24	; 0x06
    1d1e:	cb 01       	movw	r24, r22
    1d20:	66 81       	ldd	r22, Z+6	; 0x06
    1d22:	77 81       	ldd	r23, Z+7	; 0x07
    1d24:	0c 94 67 2f 	jmp	0x5ece	; 0x5ece <memcpy>
    1d28:	08 95       	ret

00001d2a <prvUnlockQueue>:
    1d2a:	ef 92       	push	r14
    1d2c:	ff 92       	push	r15
    1d2e:	0f 93       	push	r16
    1d30:	1f 93       	push	r17
    1d32:	cf 93       	push	r28
    1d34:	8c 01       	movw	r16, r24
    1d36:	0f b6       	in	r0, 0x3f	; 63
    1d38:	f8 94       	cli
    1d3a:	0f 92       	push	r0
    1d3c:	fc 01       	movw	r30, r24
    1d3e:	c2 a1       	ldd	r28, Z+34	; 0x22
    1d40:	1c 16       	cp	r1, r28
    1d42:	ac f4       	brge	.+42     	; 0x1d6e <prvUnlockQueue+0x44>
    1d44:	83 89       	ldd	r24, Z+19	; 0x13
    1d46:	81 11       	cpse	r24, r1
    1d48:	06 c0       	rjmp	.+12     	; 0x1d56 <prvUnlockQueue+0x2c>
    1d4a:	11 c0       	rjmp	.+34     	; 0x1d6e <prvUnlockQueue+0x44>
    1d4c:	f8 01       	movw	r30, r16
    1d4e:	83 89       	ldd	r24, Z+19	; 0x13
    1d50:	81 11       	cpse	r24, r1
    1d52:	05 c0       	rjmp	.+10     	; 0x1d5e <prvUnlockQueue+0x34>
    1d54:	0c c0       	rjmp	.+24     	; 0x1d6e <prvUnlockQueue+0x44>
    1d56:	78 01       	movw	r14, r16
    1d58:	f3 e1       	ldi	r31, 0x13	; 19
    1d5a:	ef 0e       	add	r14, r31
    1d5c:	f1 1c       	adc	r15, r1
    1d5e:	c7 01       	movw	r24, r14
    1d60:	0e 94 fe 18 	call	0x31fc	; 0x31fc <xTaskRemoveFromEventList>
    1d64:	81 11       	cpse	r24, r1
    1d66:	0e 94 f0 19 	call	0x33e0	; 0x33e0 <vTaskMissedYield>
    1d6a:	c1 50       	subi	r28, 0x01	; 1
    1d6c:	79 f7       	brne	.-34     	; 0x1d4c <prvUnlockQueue+0x22>
    1d6e:	8f ef       	ldi	r24, 0xFF	; 255
    1d70:	f8 01       	movw	r30, r16
    1d72:	82 a3       	std	Z+34, r24	; 0x22
    1d74:	0f 90       	pop	r0
    1d76:	0f be       	out	0x3f, r0	; 63
    1d78:	0f b6       	in	r0, 0x3f	; 63
    1d7a:	f8 94       	cli
    1d7c:	0f 92       	push	r0
    1d7e:	c1 a1       	ldd	r28, Z+33	; 0x21
    1d80:	1c 16       	cp	r1, r28
    1d82:	ac f4       	brge	.+42     	; 0x1dae <prvUnlockQueue+0x84>
    1d84:	80 85       	ldd	r24, Z+8	; 0x08
    1d86:	81 11       	cpse	r24, r1
    1d88:	06 c0       	rjmp	.+12     	; 0x1d96 <prvUnlockQueue+0x6c>
    1d8a:	11 c0       	rjmp	.+34     	; 0x1dae <prvUnlockQueue+0x84>
    1d8c:	f8 01       	movw	r30, r16
    1d8e:	80 85       	ldd	r24, Z+8	; 0x08
    1d90:	81 11       	cpse	r24, r1
    1d92:	05 c0       	rjmp	.+10     	; 0x1d9e <prvUnlockQueue+0x74>
    1d94:	0c c0       	rjmp	.+24     	; 0x1dae <prvUnlockQueue+0x84>
    1d96:	78 01       	movw	r14, r16
    1d98:	f8 e0       	ldi	r31, 0x08	; 8
    1d9a:	ef 0e       	add	r14, r31
    1d9c:	f1 1c       	adc	r15, r1
    1d9e:	c7 01       	movw	r24, r14
    1da0:	0e 94 fe 18 	call	0x31fc	; 0x31fc <xTaskRemoveFromEventList>
    1da4:	81 11       	cpse	r24, r1
    1da6:	0e 94 f0 19 	call	0x33e0	; 0x33e0 <vTaskMissedYield>
    1daa:	c1 50       	subi	r28, 0x01	; 1
    1dac:	79 f7       	brne	.-34     	; 0x1d8c <prvUnlockQueue+0x62>
    1dae:	8f ef       	ldi	r24, 0xFF	; 255
    1db0:	f8 01       	movw	r30, r16
    1db2:	81 a3       	std	Z+33, r24	; 0x21
    1db4:	0f 90       	pop	r0
    1db6:	0f be       	out	0x3f, r0	; 63
    1db8:	cf 91       	pop	r28
    1dba:	1f 91       	pop	r17
    1dbc:	0f 91       	pop	r16
    1dbe:	ff 90       	pop	r15
    1dc0:	ef 90       	pop	r14
    1dc2:	08 95       	ret

00001dc4 <xQueueGenericReset>:
    1dc4:	cf 93       	push	r28
    1dc6:	df 93       	push	r29
    1dc8:	ec 01       	movw	r28, r24
    1dca:	0f b6       	in	r0, 0x3f	; 63
    1dcc:	f8 94       	cli
    1dce:	0f 92       	push	r0
    1dd0:	e8 81       	ld	r30, Y
    1dd2:	f9 81       	ldd	r31, Y+1	; 0x01
    1dd4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1dd6:	28 a1       	ldd	r18, Y+32	; 0x20
    1dd8:	90 e0       	ldi	r25, 0x00	; 0
    1dda:	30 e0       	ldi	r19, 0x00	; 0
    1ddc:	82 9f       	mul	r24, r18
    1dde:	a0 01       	movw	r20, r0
    1de0:	83 9f       	mul	r24, r19
    1de2:	50 0d       	add	r21, r0
    1de4:	92 9f       	mul	r25, r18
    1de6:	50 0d       	add	r21, r0
    1de8:	11 24       	eor	r1, r1
    1dea:	4e 0f       	add	r20, r30
    1dec:	5f 1f       	adc	r21, r31
    1dee:	5d 83       	std	Y+5, r21	; 0x05
    1df0:	4c 83       	std	Y+4, r20	; 0x04
    1df2:	1e 8e       	std	Y+30, r1	; 0x1e
    1df4:	fb 83       	std	Y+3, r31	; 0x03
    1df6:	ea 83       	std	Y+2, r30	; 0x02
    1df8:	01 97       	sbiw	r24, 0x01	; 1
    1dfa:	82 9f       	mul	r24, r18
    1dfc:	a0 01       	movw	r20, r0
    1dfe:	83 9f       	mul	r24, r19
    1e00:	50 0d       	add	r21, r0
    1e02:	92 9f       	mul	r25, r18
    1e04:	50 0d       	add	r21, r0
    1e06:	11 24       	eor	r1, r1
    1e08:	cf 01       	movw	r24, r30
    1e0a:	84 0f       	add	r24, r20
    1e0c:	95 1f       	adc	r25, r21
    1e0e:	9f 83       	std	Y+7, r25	; 0x07
    1e10:	8e 83       	std	Y+6, r24	; 0x06
    1e12:	8f ef       	ldi	r24, 0xFF	; 255
    1e14:	89 a3       	std	Y+33, r24	; 0x21
    1e16:	8a a3       	std	Y+34, r24	; 0x22
    1e18:	61 11       	cpse	r22, r1
    1e1a:	0b c0       	rjmp	.+22     	; 0x1e32 <xQueueGenericReset+0x6e>
    1e1c:	88 85       	ldd	r24, Y+8	; 0x08
    1e1e:	88 23       	and	r24, r24
    1e20:	71 f0       	breq	.+28     	; 0x1e3e <xQueueGenericReset+0x7a>
    1e22:	ce 01       	movw	r24, r28
    1e24:	08 96       	adiw	r24, 0x08	; 8
    1e26:	0e 94 fe 18 	call	0x31fc	; 0x31fc <xTaskRemoveFromEventList>
    1e2a:	88 23       	and	r24, r24
    1e2c:	41 f0       	breq	.+16     	; 0x1e3e <xQueueGenericReset+0x7a>
    1e2e:	31 de       	rcall	.-926    	; 0x1a92 <vPortYield>
    1e30:	06 c0       	rjmp	.+12     	; 0x1e3e <xQueueGenericReset+0x7a>
    1e32:	ce 01       	movw	r24, r28
    1e34:	08 96       	adiw	r24, 0x08	; 8
    1e36:	e5 dc       	rcall	.-1590   	; 0x1802 <vListInitialise>
    1e38:	ce 01       	movw	r24, r28
    1e3a:	43 96       	adiw	r24, 0x13	; 19
    1e3c:	e2 dc       	rcall	.-1596   	; 0x1802 <vListInitialise>
    1e3e:	0f 90       	pop	r0
    1e40:	0f be       	out	0x3f, r0	; 63
    1e42:	81 e0       	ldi	r24, 0x01	; 1
    1e44:	df 91       	pop	r29
    1e46:	cf 91       	pop	r28
    1e48:	08 95       	ret

00001e4a <xQueueGenericCreate>:
    1e4a:	ff 92       	push	r15
    1e4c:	0f 93       	push	r16
    1e4e:	1f 93       	push	r17
    1e50:	cf 93       	push	r28
    1e52:	df 93       	push	r29
    1e54:	08 2f       	mov	r16, r24
    1e56:	16 2f       	mov	r17, r22
    1e58:	f4 2e       	mov	r15, r20
    1e5a:	66 23       	and	r22, r22
    1e5c:	b9 f0       	breq	.+46     	; 0x1e8c <xQueueGenericCreate+0x42>
    1e5e:	86 9f       	mul	r24, r22
    1e60:	c0 01       	movw	r24, r0
    1e62:	11 24       	eor	r1, r1
    1e64:	85 96       	adiw	r24, 0x25	; 37
    1e66:	e3 db       	rcall	.-2106   	; 0x162e <pvPortMalloc>
    1e68:	ec 01       	movw	r28, r24
    1e6a:	00 97       	sbiw	r24, 0x00	; 0
    1e6c:	41 f4       	brne	.+16     	; 0x1e7e <xQueueGenericCreate+0x34>
    1e6e:	14 c0       	rjmp	.+40     	; 0x1e98 <xQueueGenericCreate+0x4e>
    1e70:	0f 8f       	std	Y+31, r16	; 0x1f
    1e72:	18 a3       	std	Y+32, r17	; 0x20
    1e74:	61 e0       	ldi	r22, 0x01	; 1
    1e76:	ce 01       	movw	r24, r28
    1e78:	a5 df       	rcall	.-182    	; 0x1dc4 <xQueueGenericReset>
    1e7a:	fc a2       	std	Y+36, r15	; 0x24
    1e7c:	0d c0       	rjmp	.+26     	; 0x1e98 <xQueueGenericCreate+0x4e>
    1e7e:	85 96       	adiw	r24, 0x25	; 37
    1e80:	99 83       	std	Y+1, r25	; 0x01
    1e82:	88 83       	st	Y, r24
    1e84:	f5 cf       	rjmp	.-22     	; 0x1e70 <xQueueGenericCreate+0x26>
    1e86:	d9 83       	std	Y+1, r29	; 0x01
    1e88:	c8 83       	st	Y, r28
    1e8a:	f2 cf       	rjmp	.-28     	; 0x1e70 <xQueueGenericCreate+0x26>
    1e8c:	85 e2       	ldi	r24, 0x25	; 37
    1e8e:	90 e0       	ldi	r25, 0x00	; 0
    1e90:	ce db       	rcall	.-2148   	; 0x162e <pvPortMalloc>
    1e92:	ec 01       	movw	r28, r24
    1e94:	89 2b       	or	r24, r25
    1e96:	b9 f7       	brne	.-18     	; 0x1e86 <xQueueGenericCreate+0x3c>
    1e98:	ce 01       	movw	r24, r28
    1e9a:	df 91       	pop	r29
    1e9c:	cf 91       	pop	r28
    1e9e:	1f 91       	pop	r17
    1ea0:	0f 91       	pop	r16
    1ea2:	ff 90       	pop	r15
    1ea4:	08 95       	ret

00001ea6 <xQueueGenericSend>:
    1ea6:	9f 92       	push	r9
    1ea8:	af 92       	push	r10
    1eaa:	bf 92       	push	r11
    1eac:	cf 92       	push	r12
    1eae:	df 92       	push	r13
    1eb0:	ef 92       	push	r14
    1eb2:	ff 92       	push	r15
    1eb4:	0f 93       	push	r16
    1eb6:	1f 93       	push	r17
    1eb8:	cf 93       	push	r28
    1eba:	df 93       	push	r29
    1ebc:	cd b7       	in	r28, 0x3d	; 61
    1ebe:	de b7       	in	r29, 0x3e	; 62
    1ec0:	29 97       	sbiw	r28, 0x09	; 9
    1ec2:	0f b6       	in	r0, 0x3f	; 63
    1ec4:	f8 94       	cli
    1ec6:	de bf       	out	0x3e, r29	; 62
    1ec8:	0f be       	out	0x3f, r0	; 63
    1eca:	cd bf       	out	0x3d, r28	; 61
    1ecc:	7c 01       	movw	r14, r24
    1ece:	5b 01       	movw	r10, r22
    1ed0:	2e 83       	std	Y+6, r18	; 0x06
    1ed2:	3f 83       	std	Y+7, r19	; 0x07
    1ed4:	48 87       	std	Y+8, r20	; 0x08
    1ed6:	59 87       	std	Y+9, r21	; 0x09
    1ed8:	10 e0       	ldi	r17, 0x00	; 0
    1eda:	99 24       	eor	r9, r9
    1edc:	93 94       	inc	r9
    1ede:	6c 01       	movw	r12, r24
    1ee0:	88 e0       	ldi	r24, 0x08	; 8
    1ee2:	c8 0e       	add	r12, r24
    1ee4:	d1 1c       	adc	r13, r1
    1ee6:	0f b6       	in	r0, 0x3f	; 63
    1ee8:	f8 94       	cli
    1eea:	0f 92       	push	r0
    1eec:	f7 01       	movw	r30, r14
    1eee:	96 8d       	ldd	r25, Z+30	; 0x1e
    1ef0:	87 8d       	ldd	r24, Z+31	; 0x1f
    1ef2:	98 17       	cp	r25, r24
    1ef4:	10 f0       	brcs	.+4      	; 0x1efa <xQueueGenericSend+0x54>
    1ef6:	02 30       	cpi	r16, 0x02	; 2
    1ef8:	b1 f4       	brne	.+44     	; 0x1f26 <xQueueGenericSend+0x80>
    1efa:	40 2f       	mov	r20, r16
    1efc:	b5 01       	movw	r22, r10
    1efe:	c7 01       	movw	r24, r14
    1f00:	9b de       	rcall	.-714    	; 0x1c38 <prvCopyDataToQueue>
    1f02:	f7 01       	movw	r30, r14
    1f04:	93 89       	ldd	r25, Z+19	; 0x13
    1f06:	99 23       	and	r25, r25
    1f08:	41 f0       	breq	.+16     	; 0x1f1a <xQueueGenericSend+0x74>
    1f0a:	c7 01       	movw	r24, r14
    1f0c:	43 96       	adiw	r24, 0x13	; 19
    1f0e:	0e 94 fe 18 	call	0x31fc	; 0x31fc <xTaskRemoveFromEventList>
    1f12:	88 23       	and	r24, r24
    1f14:	21 f0       	breq	.+8      	; 0x1f1e <xQueueGenericSend+0x78>
    1f16:	bd dd       	rcall	.-1158   	; 0x1a92 <vPortYield>
    1f18:	02 c0       	rjmp	.+4      	; 0x1f1e <xQueueGenericSend+0x78>
    1f1a:	81 11       	cpse	r24, r1
    1f1c:	ba dd       	rcall	.-1164   	; 0x1a92 <vPortYield>
    1f1e:	0f 90       	pop	r0
    1f20:	0f be       	out	0x3f, r0	; 63
    1f22:	81 e0       	ldi	r24, 0x01	; 1
    1f24:	4e c0       	rjmp	.+156    	; 0x1fc2 <xQueueGenericSend+0x11c>
    1f26:	8e 81       	ldd	r24, Y+6	; 0x06
    1f28:	9f 81       	ldd	r25, Y+7	; 0x07
    1f2a:	a8 85       	ldd	r26, Y+8	; 0x08
    1f2c:	b9 85       	ldd	r27, Y+9	; 0x09
    1f2e:	89 2b       	or	r24, r25
    1f30:	8a 2b       	or	r24, r26
    1f32:	8b 2b       	or	r24, r27
    1f34:	21 f4       	brne	.+8      	; 0x1f3e <xQueueGenericSend+0x98>
    1f36:	0f 90       	pop	r0
    1f38:	0f be       	out	0x3f, r0	; 63
    1f3a:	80 e0       	ldi	r24, 0x00	; 0
    1f3c:	42 c0       	rjmp	.+132    	; 0x1fc2 <xQueueGenericSend+0x11c>
    1f3e:	11 11       	cpse	r17, r1
    1f40:	05 c0       	rjmp	.+10     	; 0x1f4c <xQueueGenericSend+0xa6>
    1f42:	ce 01       	movw	r24, r28
    1f44:	01 96       	adiw	r24, 0x01	; 1
    1f46:	0e 94 8a 19 	call	0x3314	; 0x3314 <vTaskInternalSetTimeOutState>
    1f4a:	19 2d       	mov	r17, r9
    1f4c:	0f 90       	pop	r0
    1f4e:	0f be       	out	0x3f, r0	; 63
    1f50:	fd d6       	rcall	.+3578   	; 0x2d4c <vTaskSuspendAll>
    1f52:	0f b6       	in	r0, 0x3f	; 63
    1f54:	f8 94       	cli
    1f56:	0f 92       	push	r0
    1f58:	f7 01       	movw	r30, r14
    1f5a:	81 a1       	ldd	r24, Z+33	; 0x21
    1f5c:	8f 3f       	cpi	r24, 0xFF	; 255
    1f5e:	09 f4       	brne	.+2      	; 0x1f62 <xQueueGenericSend+0xbc>
    1f60:	11 a2       	std	Z+33, r1	; 0x21
    1f62:	f7 01       	movw	r30, r14
    1f64:	82 a1       	ldd	r24, Z+34	; 0x22
    1f66:	8f 3f       	cpi	r24, 0xFF	; 255
    1f68:	09 f4       	brne	.+2      	; 0x1f6c <xQueueGenericSend+0xc6>
    1f6a:	12 a2       	std	Z+34, r1	; 0x22
    1f6c:	0f 90       	pop	r0
    1f6e:	0f be       	out	0x3f, r0	; 63
    1f70:	be 01       	movw	r22, r28
    1f72:	6a 5f       	subi	r22, 0xFA	; 250
    1f74:	7f 4f       	sbci	r23, 0xFF	; 255
    1f76:	ce 01       	movw	r24, r28
    1f78:	01 96       	adiw	r24, 0x01	; 1
    1f7a:	0e 94 9b 19 	call	0x3336	; 0x3336 <xTaskCheckForTimeOut>
    1f7e:	81 11       	cpse	r24, r1
    1f80:	1c c0       	rjmp	.+56     	; 0x1fba <xQueueGenericSend+0x114>
    1f82:	0f b6       	in	r0, 0x3f	; 63
    1f84:	f8 94       	cli
    1f86:	0f 92       	push	r0
    1f88:	f7 01       	movw	r30, r14
    1f8a:	96 8d       	ldd	r25, Z+30	; 0x1e
    1f8c:	87 8d       	ldd	r24, Z+31	; 0x1f
    1f8e:	0f 90       	pop	r0
    1f90:	0f be       	out	0x3f, r0	; 63
    1f92:	98 13       	cpse	r25, r24
    1f94:	0e c0       	rjmp	.+28     	; 0x1fb2 <xQueueGenericSend+0x10c>
    1f96:	4e 81       	ldd	r20, Y+6	; 0x06
    1f98:	5f 81       	ldd	r21, Y+7	; 0x07
    1f9a:	68 85       	ldd	r22, Y+8	; 0x08
    1f9c:	79 85       	ldd	r23, Y+9	; 0x09
    1f9e:	c6 01       	movw	r24, r12
    1fa0:	0e 94 a3 18 	call	0x3146	; 0x3146 <vTaskPlaceOnEventList>
    1fa4:	c7 01       	movw	r24, r14
    1fa6:	c1 de       	rcall	.-638    	; 0x1d2a <prvUnlockQueue>
    1fa8:	ba d7       	rcall	.+3956   	; 0x2f1e <xTaskResumeAll>
    1faa:	81 11       	cpse	r24, r1
    1fac:	9c cf       	rjmp	.-200    	; 0x1ee6 <xQueueGenericSend+0x40>
    1fae:	71 dd       	rcall	.-1310   	; 0x1a92 <vPortYield>
    1fb0:	9a cf       	rjmp	.-204    	; 0x1ee6 <xQueueGenericSend+0x40>
    1fb2:	c7 01       	movw	r24, r14
    1fb4:	ba de       	rcall	.-652    	; 0x1d2a <prvUnlockQueue>
    1fb6:	b3 d7       	rcall	.+3942   	; 0x2f1e <xTaskResumeAll>
    1fb8:	96 cf       	rjmp	.-212    	; 0x1ee6 <xQueueGenericSend+0x40>
    1fba:	c7 01       	movw	r24, r14
    1fbc:	b6 de       	rcall	.-660    	; 0x1d2a <prvUnlockQueue>
    1fbe:	af d7       	rcall	.+3934   	; 0x2f1e <xTaskResumeAll>
    1fc0:	80 e0       	ldi	r24, 0x00	; 0
    1fc2:	29 96       	adiw	r28, 0x09	; 9
    1fc4:	0f b6       	in	r0, 0x3f	; 63
    1fc6:	f8 94       	cli
    1fc8:	de bf       	out	0x3e, r29	; 62
    1fca:	0f be       	out	0x3f, r0	; 63
    1fcc:	cd bf       	out	0x3d, r28	; 61
    1fce:	df 91       	pop	r29
    1fd0:	cf 91       	pop	r28
    1fd2:	1f 91       	pop	r17
    1fd4:	0f 91       	pop	r16
    1fd6:	ff 90       	pop	r15
    1fd8:	ef 90       	pop	r14
    1fda:	df 90       	pop	r13
    1fdc:	cf 90       	pop	r12
    1fde:	bf 90       	pop	r11
    1fe0:	af 90       	pop	r10
    1fe2:	9f 90       	pop	r9
    1fe4:	08 95       	ret

00001fe6 <xQueueCreateMutex>:
    1fe6:	0f 93       	push	r16
    1fe8:	cf 93       	push	r28
    1fea:	df 93       	push	r29
    1fec:	48 2f       	mov	r20, r24
    1fee:	60 e0       	ldi	r22, 0x00	; 0
    1ff0:	81 e0       	ldi	r24, 0x01	; 1
    1ff2:	2b df       	rcall	.-426    	; 0x1e4a <xQueueGenericCreate>
    1ff4:	ec 01       	movw	r28, r24
    1ff6:	00 97       	sbiw	r24, 0x00	; 0
    1ff8:	61 f0       	breq	.+24     	; 0x2012 <xQueueCreateMutex+0x2c>
    1ffa:	1d 82       	std	Y+5, r1	; 0x05
    1ffc:	1c 82       	std	Y+4, r1	; 0x04
    1ffe:	19 82       	std	Y+1, r1	; 0x01
    2000:	18 82       	st	Y, r1
    2002:	1e 82       	std	Y+6, r1	; 0x06
    2004:	00 e0       	ldi	r16, 0x00	; 0
    2006:	20 e0       	ldi	r18, 0x00	; 0
    2008:	30 e0       	ldi	r19, 0x00	; 0
    200a:	a9 01       	movw	r20, r18
    200c:	60 e0       	ldi	r22, 0x00	; 0
    200e:	70 e0       	ldi	r23, 0x00	; 0
    2010:	4a df       	rcall	.-364    	; 0x1ea6 <xQueueGenericSend>
    2012:	ce 01       	movw	r24, r28
    2014:	df 91       	pop	r29
    2016:	cf 91       	pop	r28
    2018:	0f 91       	pop	r16
    201a:	08 95       	ret

0000201c <xQueueGenericSendFromISR>:
    201c:	ef 92       	push	r14
    201e:	ff 92       	push	r15
    2020:	0f 93       	push	r16
    2022:	1f 93       	push	r17
    2024:	cf 93       	push	r28
    2026:	df 93       	push	r29
    2028:	8a 01       	movw	r16, r20
    202a:	fc 01       	movw	r30, r24
    202c:	56 8d       	ldd	r21, Z+30	; 0x1e
    202e:	37 8d       	ldd	r19, Z+31	; 0x1f
    2030:	53 17       	cp	r21, r19
    2032:	10 f0       	brcs	.+4      	; 0x2038 <xQueueGenericSendFromISR+0x1c>
    2034:	22 30       	cpi	r18, 0x02	; 2
    2036:	e9 f4       	brne	.+58     	; 0x2072 <xQueueGenericSendFromISR+0x56>
    2038:	42 2f       	mov	r20, r18
    203a:	78 01       	movw	r14, r16
    203c:	ec 01       	movw	r28, r24
    203e:	1a a1       	ldd	r17, Y+34	; 0x22
    2040:	fb dd       	rcall	.-1034   	; 0x1c38 <prvCopyDataToQueue>
    2042:	1f 3f       	cpi	r17, 0xFF	; 255
    2044:	81 f4       	brne	.+32     	; 0x2066 <xQueueGenericSendFromISR+0x4a>
    2046:	8b 89       	ldd	r24, Y+19	; 0x13
    2048:	88 23       	and	r24, r24
    204a:	a9 f0       	breq	.+42     	; 0x2076 <xQueueGenericSendFromISR+0x5a>
    204c:	ce 01       	movw	r24, r28
    204e:	43 96       	adiw	r24, 0x13	; 19
    2050:	0e 94 fe 18 	call	0x31fc	; 0x31fc <xTaskRemoveFromEventList>
    2054:	88 23       	and	r24, r24
    2056:	89 f0       	breq	.+34     	; 0x207a <xQueueGenericSendFromISR+0x5e>
    2058:	e1 14       	cp	r14, r1
    205a:	f1 04       	cpc	r15, r1
    205c:	81 f0       	breq	.+32     	; 0x207e <xQueueGenericSendFromISR+0x62>
    205e:	81 e0       	ldi	r24, 0x01	; 1
    2060:	f7 01       	movw	r30, r14
    2062:	80 83       	st	Z, r24
    2064:	0d c0       	rjmp	.+26     	; 0x2080 <xQueueGenericSendFromISR+0x64>
    2066:	ff 24       	eor	r15, r15
    2068:	f3 94       	inc	r15
    206a:	f1 0e       	add	r15, r17
    206c:	fa a2       	std	Y+34, r15	; 0x22
    206e:	81 e0       	ldi	r24, 0x01	; 1
    2070:	07 c0       	rjmp	.+14     	; 0x2080 <xQueueGenericSendFromISR+0x64>
    2072:	80 e0       	ldi	r24, 0x00	; 0
    2074:	05 c0       	rjmp	.+10     	; 0x2080 <xQueueGenericSendFromISR+0x64>
    2076:	81 e0       	ldi	r24, 0x01	; 1
    2078:	03 c0       	rjmp	.+6      	; 0x2080 <xQueueGenericSendFromISR+0x64>
    207a:	81 e0       	ldi	r24, 0x01	; 1
    207c:	01 c0       	rjmp	.+2      	; 0x2080 <xQueueGenericSendFromISR+0x64>
    207e:	81 e0       	ldi	r24, 0x01	; 1
    2080:	df 91       	pop	r29
    2082:	cf 91       	pop	r28
    2084:	1f 91       	pop	r17
    2086:	0f 91       	pop	r16
    2088:	ff 90       	pop	r15
    208a:	ef 90       	pop	r14
    208c:	08 95       	ret

0000208e <xQueueReceive>:
    208e:	9f 92       	push	r9
    2090:	af 92       	push	r10
    2092:	bf 92       	push	r11
    2094:	cf 92       	push	r12
    2096:	df 92       	push	r13
    2098:	ef 92       	push	r14
    209a:	ff 92       	push	r15
    209c:	0f 93       	push	r16
    209e:	1f 93       	push	r17
    20a0:	cf 93       	push	r28
    20a2:	df 93       	push	r29
    20a4:	cd b7       	in	r28, 0x3d	; 61
    20a6:	de b7       	in	r29, 0x3e	; 62
    20a8:	29 97       	sbiw	r28, 0x09	; 9
    20aa:	0f b6       	in	r0, 0x3f	; 63
    20ac:	f8 94       	cli
    20ae:	de bf       	out	0x3e, r29	; 62
    20b0:	0f be       	out	0x3f, r0	; 63
    20b2:	cd bf       	out	0x3d, r28	; 61
    20b4:	8c 01       	movw	r16, r24
    20b6:	5b 01       	movw	r10, r22
    20b8:	2e 83       	std	Y+6, r18	; 0x06
    20ba:	3f 83       	std	Y+7, r19	; 0x07
    20bc:	48 87       	std	Y+8, r20	; 0x08
    20be:	59 87       	std	Y+9, r21	; 0x09
    20c0:	e1 2c       	mov	r14, r1
    20c2:	99 24       	eor	r9, r9
    20c4:	93 94       	inc	r9
    20c6:	6c 01       	movw	r12, r24
    20c8:	83 e1       	ldi	r24, 0x13	; 19
    20ca:	c8 0e       	add	r12, r24
    20cc:	d1 1c       	adc	r13, r1
    20ce:	0f b6       	in	r0, 0x3f	; 63
    20d0:	f8 94       	cli
    20d2:	0f 92       	push	r0
    20d4:	f8 01       	movw	r30, r16
    20d6:	f6 8c       	ldd	r15, Z+30	; 0x1e
    20d8:	ff 20       	and	r15, r15
    20da:	99 f0       	breq	.+38     	; 0x2102 <xQueueReceive+0x74>
    20dc:	b5 01       	movw	r22, r10
    20de:	c8 01       	movw	r24, r16
    20e0:	0a de       	rcall	.-1004   	; 0x1cf6 <prvCopyDataFromQueue>
    20e2:	fa 94       	dec	r15
    20e4:	f8 01       	movw	r30, r16
    20e6:	f6 8e       	std	Z+30, r15	; 0x1e
    20e8:	80 85       	ldd	r24, Z+8	; 0x08
    20ea:	88 23       	and	r24, r24
    20ec:	31 f0       	breq	.+12     	; 0x20fa <xQueueReceive+0x6c>
    20ee:	c8 01       	movw	r24, r16
    20f0:	08 96       	adiw	r24, 0x08	; 8
    20f2:	0e 94 fe 18 	call	0x31fc	; 0x31fc <xTaskRemoveFromEventList>
    20f6:	81 11       	cpse	r24, r1
    20f8:	cc dc       	rcall	.-1640   	; 0x1a92 <vPortYield>
    20fa:	0f 90       	pop	r0
    20fc:	0f be       	out	0x3f, r0	; 63
    20fe:	81 e0       	ldi	r24, 0x01	; 1
    2100:	4c c0       	rjmp	.+152    	; 0x219a <xQueueReceive+0x10c>
    2102:	8e 81       	ldd	r24, Y+6	; 0x06
    2104:	9f 81       	ldd	r25, Y+7	; 0x07
    2106:	a8 85       	ldd	r26, Y+8	; 0x08
    2108:	b9 85       	ldd	r27, Y+9	; 0x09
    210a:	89 2b       	or	r24, r25
    210c:	8a 2b       	or	r24, r26
    210e:	8b 2b       	or	r24, r27
    2110:	21 f4       	brne	.+8      	; 0x211a <xQueueReceive+0x8c>
    2112:	0f 90       	pop	r0
    2114:	0f be       	out	0x3f, r0	; 63
    2116:	80 e0       	ldi	r24, 0x00	; 0
    2118:	40 c0       	rjmp	.+128    	; 0x219a <xQueueReceive+0x10c>
    211a:	e1 10       	cpse	r14, r1
    211c:	05 c0       	rjmp	.+10     	; 0x2128 <xQueueReceive+0x9a>
    211e:	ce 01       	movw	r24, r28
    2120:	01 96       	adiw	r24, 0x01	; 1
    2122:	0e 94 8a 19 	call	0x3314	; 0x3314 <vTaskInternalSetTimeOutState>
    2126:	e9 2c       	mov	r14, r9
    2128:	0f 90       	pop	r0
    212a:	0f be       	out	0x3f, r0	; 63
    212c:	0f d6       	rcall	.+3102   	; 0x2d4c <vTaskSuspendAll>
    212e:	0f b6       	in	r0, 0x3f	; 63
    2130:	f8 94       	cli
    2132:	0f 92       	push	r0
    2134:	f8 01       	movw	r30, r16
    2136:	81 a1       	ldd	r24, Z+33	; 0x21
    2138:	8f 3f       	cpi	r24, 0xFF	; 255
    213a:	09 f4       	brne	.+2      	; 0x213e <xQueueReceive+0xb0>
    213c:	11 a2       	std	Z+33, r1	; 0x21
    213e:	f8 01       	movw	r30, r16
    2140:	82 a1       	ldd	r24, Z+34	; 0x22
    2142:	8f 3f       	cpi	r24, 0xFF	; 255
    2144:	09 f4       	brne	.+2      	; 0x2148 <xQueueReceive+0xba>
    2146:	12 a2       	std	Z+34, r1	; 0x22
    2148:	0f 90       	pop	r0
    214a:	0f be       	out	0x3f, r0	; 63
    214c:	be 01       	movw	r22, r28
    214e:	6a 5f       	subi	r22, 0xFA	; 250
    2150:	7f 4f       	sbci	r23, 0xFF	; 255
    2152:	ce 01       	movw	r24, r28
    2154:	01 96       	adiw	r24, 0x01	; 1
    2156:	0e 94 9b 19 	call	0x3336	; 0x3336 <xTaskCheckForTimeOut>
    215a:	81 11       	cpse	r24, r1
    215c:	15 c0       	rjmp	.+42     	; 0x2188 <xQueueReceive+0xfa>
    215e:	c8 01       	movw	r24, r16
    2160:	60 dd       	rcall	.-1344   	; 0x1c22 <prvIsQueueEmpty>
    2162:	88 23       	and	r24, r24
    2164:	69 f0       	breq	.+26     	; 0x2180 <xQueueReceive+0xf2>
    2166:	4e 81       	ldd	r20, Y+6	; 0x06
    2168:	5f 81       	ldd	r21, Y+7	; 0x07
    216a:	68 85       	ldd	r22, Y+8	; 0x08
    216c:	79 85       	ldd	r23, Y+9	; 0x09
    216e:	c6 01       	movw	r24, r12
    2170:	ea d7       	rcall	.+4052   	; 0x3146 <vTaskPlaceOnEventList>
    2172:	c8 01       	movw	r24, r16
    2174:	da dd       	rcall	.-1100   	; 0x1d2a <prvUnlockQueue>
    2176:	d3 d6       	rcall	.+3494   	; 0x2f1e <xTaskResumeAll>
    2178:	81 11       	cpse	r24, r1
    217a:	a9 cf       	rjmp	.-174    	; 0x20ce <xQueueReceive+0x40>
    217c:	8a dc       	rcall	.-1772   	; 0x1a92 <vPortYield>
    217e:	a7 cf       	rjmp	.-178    	; 0x20ce <xQueueReceive+0x40>
    2180:	c8 01       	movw	r24, r16
    2182:	d3 dd       	rcall	.-1114   	; 0x1d2a <prvUnlockQueue>
    2184:	cc d6       	rcall	.+3480   	; 0x2f1e <xTaskResumeAll>
    2186:	a3 cf       	rjmp	.-186    	; 0x20ce <xQueueReceive+0x40>
    2188:	c8 01       	movw	r24, r16
    218a:	cf dd       	rcall	.-1122   	; 0x1d2a <prvUnlockQueue>
    218c:	c8 d6       	rcall	.+3472   	; 0x2f1e <xTaskResumeAll>
    218e:	c8 01       	movw	r24, r16
    2190:	48 dd       	rcall	.-1392   	; 0x1c22 <prvIsQueueEmpty>
    2192:	88 23       	and	r24, r24
    2194:	09 f4       	brne	.+2      	; 0x2198 <xQueueReceive+0x10a>
    2196:	9b cf       	rjmp	.-202    	; 0x20ce <xQueueReceive+0x40>
    2198:	80 e0       	ldi	r24, 0x00	; 0
    219a:	29 96       	adiw	r28, 0x09	; 9
    219c:	0f b6       	in	r0, 0x3f	; 63
    219e:	f8 94       	cli
    21a0:	de bf       	out	0x3e, r29	; 62
    21a2:	0f be       	out	0x3f, r0	; 63
    21a4:	cd bf       	out	0x3d, r28	; 61
    21a6:	df 91       	pop	r29
    21a8:	cf 91       	pop	r28
    21aa:	1f 91       	pop	r17
    21ac:	0f 91       	pop	r16
    21ae:	ff 90       	pop	r15
    21b0:	ef 90       	pop	r14
    21b2:	df 90       	pop	r13
    21b4:	cf 90       	pop	r12
    21b6:	bf 90       	pop	r11
    21b8:	af 90       	pop	r10
    21ba:	9f 90       	pop	r9
    21bc:	08 95       	ret

000021be <xQueueSemaphoreTake>:
    21be:	bf 92       	push	r11
    21c0:	cf 92       	push	r12
    21c2:	df 92       	push	r13
    21c4:	ef 92       	push	r14
    21c6:	ff 92       	push	r15
    21c8:	0f 93       	push	r16
    21ca:	1f 93       	push	r17
    21cc:	cf 93       	push	r28
    21ce:	df 93       	push	r29
    21d0:	cd b7       	in	r28, 0x3d	; 61
    21d2:	de b7       	in	r29, 0x3e	; 62
    21d4:	29 97       	sbiw	r28, 0x09	; 9
    21d6:	0f b6       	in	r0, 0x3f	; 63
    21d8:	f8 94       	cli
    21da:	de bf       	out	0x3e, r29	; 62
    21dc:	0f be       	out	0x3f, r0	; 63
    21de:	cd bf       	out	0x3d, r28	; 61
    21e0:	8c 01       	movw	r16, r24
    21e2:	4e 83       	std	Y+6, r20	; 0x06
    21e4:	5f 83       	std	Y+7, r21	; 0x07
    21e6:	68 87       	std	Y+8, r22	; 0x08
    21e8:	79 87       	std	Y+9, r23	; 0x09
    21ea:	b1 2c       	mov	r11, r1
    21ec:	d1 2c       	mov	r13, r1
    21ee:	cc 24       	eor	r12, r12
    21f0:	c3 94       	inc	r12
    21f2:	7c 01       	movw	r14, r24
    21f4:	83 e1       	ldi	r24, 0x13	; 19
    21f6:	e8 0e       	add	r14, r24
    21f8:	f1 1c       	adc	r15, r1
    21fa:	0f b6       	in	r0, 0x3f	; 63
    21fc:	f8 94       	cli
    21fe:	0f 92       	push	r0
    2200:	d8 01       	movw	r26, r16
    2202:	5e 96       	adiw	r26, 0x1e	; 30
    2204:	8c 91       	ld	r24, X
    2206:	5e 97       	sbiw	r26, 0x1e	; 30
    2208:	88 23       	and	r24, r24
    220a:	d9 f0       	breq	.+54     	; 0x2242 <__stack+0x43>
    220c:	81 50       	subi	r24, 0x01	; 1
    220e:	5e 96       	adiw	r26, 0x1e	; 30
    2210:	8c 93       	st	X, r24
    2212:	5e 97       	sbiw	r26, 0x1e	; 30
    2214:	8d 91       	ld	r24, X+
    2216:	9c 91       	ld	r25, X
    2218:	89 2b       	or	r24, r25
    221a:	29 f4       	brne	.+10     	; 0x2226 <__stack+0x27>
    221c:	0e 94 29 1b 	call	0x3652	; 0x3652 <pvTaskIncrementMutexHeldCount>
    2220:	f8 01       	movw	r30, r16
    2222:	95 83       	std	Z+5, r25	; 0x05
    2224:	84 83       	std	Z+4, r24	; 0x04
    2226:	d8 01       	movw	r26, r16
    2228:	18 96       	adiw	r26, 0x08	; 8
    222a:	8c 91       	ld	r24, X
    222c:	88 23       	and	r24, r24
    222e:	29 f0       	breq	.+10     	; 0x223a <__stack+0x3b>
    2230:	c8 01       	movw	r24, r16
    2232:	08 96       	adiw	r24, 0x08	; 8
    2234:	e3 d7       	rcall	.+4038   	; 0x31fc <xTaskRemoveFromEventList>
    2236:	81 11       	cpse	r24, r1
    2238:	2c dc       	rcall	.-1960   	; 0x1a92 <vPortYield>
    223a:	0f 90       	pop	r0
    223c:	0f be       	out	0x3f, r0	; 63
    223e:	81 e0       	ldi	r24, 0x01	; 1
    2240:	7a c0       	rjmp	.+244    	; 0x2336 <__stack+0x137>
    2242:	8e 81       	ldd	r24, Y+6	; 0x06
    2244:	9f 81       	ldd	r25, Y+7	; 0x07
    2246:	a8 85       	ldd	r26, Y+8	; 0x08
    2248:	b9 85       	ldd	r27, Y+9	; 0x09
    224a:	89 2b       	or	r24, r25
    224c:	8a 2b       	or	r24, r26
    224e:	8b 2b       	or	r24, r27
    2250:	21 f4       	brne	.+8      	; 0x225a <__stack+0x5b>
    2252:	0f 90       	pop	r0
    2254:	0f be       	out	0x3f, r0	; 63
    2256:	80 e0       	ldi	r24, 0x00	; 0
    2258:	6e c0       	rjmp	.+220    	; 0x2336 <__stack+0x137>
    225a:	d1 10       	cpse	r13, r1
    225c:	05 c0       	rjmp	.+10     	; 0x2268 <__stack+0x69>
    225e:	ce 01       	movw	r24, r28
    2260:	01 96       	adiw	r24, 0x01	; 1
    2262:	0e 94 8a 19 	call	0x3314	; 0x3314 <vTaskInternalSetTimeOutState>
    2266:	dc 2c       	mov	r13, r12
    2268:	0f 90       	pop	r0
    226a:	0f be       	out	0x3f, r0	; 63
    226c:	6f d5       	rcall	.+2782   	; 0x2d4c <vTaskSuspendAll>
    226e:	0f b6       	in	r0, 0x3f	; 63
    2270:	f8 94       	cli
    2272:	0f 92       	push	r0
    2274:	f8 01       	movw	r30, r16
    2276:	81 a1       	ldd	r24, Z+33	; 0x21
    2278:	8f 3f       	cpi	r24, 0xFF	; 255
    227a:	09 f4       	brne	.+2      	; 0x227e <__stack+0x7f>
    227c:	11 a2       	std	Z+33, r1	; 0x21
    227e:	d8 01       	movw	r26, r16
    2280:	92 96       	adiw	r26, 0x22	; 34
    2282:	8c 91       	ld	r24, X
    2284:	92 97       	sbiw	r26, 0x22	; 34
    2286:	8f 3f       	cpi	r24, 0xFF	; 255
    2288:	11 f4       	brne	.+4      	; 0x228e <__stack+0x8f>
    228a:	92 96       	adiw	r26, 0x22	; 34
    228c:	1c 92       	st	X, r1
    228e:	0f 90       	pop	r0
    2290:	0f be       	out	0x3f, r0	; 63
    2292:	be 01       	movw	r22, r28
    2294:	6a 5f       	subi	r22, 0xFA	; 250
    2296:	7f 4f       	sbci	r23, 0xFF	; 255
    2298:	ce 01       	movw	r24, r28
    229a:	01 96       	adiw	r24, 0x01	; 1
    229c:	0e 94 9b 19 	call	0x3336	; 0x3336 <xTaskCheckForTimeOut>
    22a0:	81 11       	cpse	r24, r1
    22a2:	24 c0       	rjmp	.+72     	; 0x22ec <__stack+0xed>
    22a4:	c8 01       	movw	r24, r16
    22a6:	bd dc       	rcall	.-1670   	; 0x1c22 <prvIsQueueEmpty>
    22a8:	88 23       	and	r24, r24
    22aa:	e1 f0       	breq	.+56     	; 0x22e4 <__stack+0xe5>
    22ac:	f8 01       	movw	r30, r16
    22ae:	80 81       	ld	r24, Z
    22b0:	91 81       	ldd	r25, Z+1	; 0x01
    22b2:	89 2b       	or	r24, r25
    22b4:	51 f4       	brne	.+20     	; 0x22ca <__stack+0xcb>
    22b6:	0f b6       	in	r0, 0x3f	; 63
    22b8:	f8 94       	cli
    22ba:	0f 92       	push	r0
    22bc:	84 81       	ldd	r24, Z+4	; 0x04
    22be:	95 81       	ldd	r25, Z+5	; 0x05
    22c0:	0e 94 07 1a 	call	0x340e	; 0x340e <xTaskPriorityInherit>
    22c4:	b8 2e       	mov	r11, r24
    22c6:	0f 90       	pop	r0
    22c8:	0f be       	out	0x3f, r0	; 63
    22ca:	4e 81       	ldd	r20, Y+6	; 0x06
    22cc:	5f 81       	ldd	r21, Y+7	; 0x07
    22ce:	68 85       	ldd	r22, Y+8	; 0x08
    22d0:	79 85       	ldd	r23, Y+9	; 0x09
    22d2:	c7 01       	movw	r24, r14
    22d4:	38 d7       	rcall	.+3696   	; 0x3146 <vTaskPlaceOnEventList>
    22d6:	c8 01       	movw	r24, r16
    22d8:	28 dd       	rcall	.-1456   	; 0x1d2a <prvUnlockQueue>
    22da:	21 d6       	rcall	.+3138   	; 0x2f1e <xTaskResumeAll>
    22dc:	81 11       	cpse	r24, r1
    22de:	8d cf       	rjmp	.-230    	; 0x21fa <xQueueSemaphoreTake+0x3c>
    22e0:	d8 db       	rcall	.-2128   	; 0x1a92 <vPortYield>
    22e2:	8b cf       	rjmp	.-234    	; 0x21fa <xQueueSemaphoreTake+0x3c>
    22e4:	c8 01       	movw	r24, r16
    22e6:	21 dd       	rcall	.-1470   	; 0x1d2a <prvUnlockQueue>
    22e8:	1a d6       	rcall	.+3124   	; 0x2f1e <xTaskResumeAll>
    22ea:	87 cf       	rjmp	.-242    	; 0x21fa <xQueueSemaphoreTake+0x3c>
    22ec:	c8 01       	movw	r24, r16
    22ee:	1d dd       	rcall	.-1478   	; 0x1d2a <prvUnlockQueue>
    22f0:	16 d6       	rcall	.+3116   	; 0x2f1e <xTaskResumeAll>
    22f2:	c8 01       	movw	r24, r16
    22f4:	96 dc       	rcall	.-1748   	; 0x1c22 <prvIsQueueEmpty>
    22f6:	88 23       	and	r24, r24
    22f8:	09 f4       	brne	.+2      	; 0x22fc <__stack+0xfd>
    22fa:	7f cf       	rjmp	.-258    	; 0x21fa <xQueueSemaphoreTake+0x3c>
    22fc:	bb 20       	and	r11, r11
    22fe:	d1 f0       	breq	.+52     	; 0x2334 <__stack+0x135>
    2300:	0f b6       	in	r0, 0x3f	; 63
    2302:	f8 94       	cli
    2304:	0f 92       	push	r0
    2306:	f8 01       	movw	r30, r16
    2308:	83 89       	ldd	r24, Z+19	; 0x13
    230a:	88 23       	and	r24, r24
    230c:	39 f0       	breq	.+14     	; 0x231c <__stack+0x11d>
    230e:	02 8c       	ldd	r0, Z+26	; 0x1a
    2310:	f3 8d       	ldd	r31, Z+27	; 0x1b
    2312:	e0 2d       	mov	r30, r0
    2314:	80 81       	ld	r24, Z
    2316:	64 e0       	ldi	r22, 0x04	; 4
    2318:	68 1b       	sub	r22, r24
    231a:	01 c0       	rjmp	.+2      	; 0x231e <__stack+0x11f>
    231c:	60 e0       	ldi	r22, 0x00	; 0
    231e:	d8 01       	movw	r26, r16
    2320:	14 96       	adiw	r26, 0x04	; 4
    2322:	8d 91       	ld	r24, X+
    2324:	9c 91       	ld	r25, X
    2326:	15 97       	sbiw	r26, 0x05	; 5
    2328:	0e 94 b5 1a 	call	0x356a	; 0x356a <vTaskPriorityDisinheritAfterTimeout>
    232c:	0f 90       	pop	r0
    232e:	0f be       	out	0x3f, r0	; 63
    2330:	80 e0       	ldi	r24, 0x00	; 0
    2332:	01 c0       	rjmp	.+2      	; 0x2336 <__stack+0x137>
    2334:	80 e0       	ldi	r24, 0x00	; 0
    2336:	29 96       	adiw	r28, 0x09	; 9
    2338:	0f b6       	in	r0, 0x3f	; 63
    233a:	f8 94       	cli
    233c:	de bf       	out	0x3e, r29	; 62
    233e:	0f be       	out	0x3f, r0	; 63
    2340:	cd bf       	out	0x3d, r28	; 61
    2342:	df 91       	pop	r29
    2344:	cf 91       	pop	r28
    2346:	1f 91       	pop	r17
    2348:	0f 91       	pop	r16
    234a:	ff 90       	pop	r15
    234c:	ef 90       	pop	r14
    234e:	df 90       	pop	r13
    2350:	cf 90       	pop	r12
    2352:	bf 90       	pop	r11
    2354:	08 95       	ret

00002356 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
    {
    2356:	cf 93       	push	r28
    2358:	df 93       	push	r29
    235a:	ec 01       	movw	r28, r24
        will not actually cause the task to block, just place it on a blocked
        list.  It will not block until the scheduler is unlocked - at which
        time a yield will be performed.  If an item is added to the queue while
        the queue is locked, and the calling task blocks on the queue, then the
        calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    235c:	0f b6       	in	r0, 0x3f	; 63
    235e:	f8 94       	cli
    2360:	0f 92       	push	r0
    2362:	89 a1       	ldd	r24, Y+33	; 0x21
    2364:	8f 3f       	cpi	r24, 0xFF	; 255
    2366:	09 f4       	brne	.+2      	; 0x236a <vQueueWaitForMessageRestricted+0x14>
    2368:	19 a2       	std	Y+33, r1	; 0x21
    236a:	8a a1       	ldd	r24, Y+34	; 0x22
    236c:	8f 3f       	cpi	r24, 0xFF	; 255
    236e:	09 f4       	brne	.+2      	; 0x2372 <vQueueWaitForMessageRestricted+0x1c>
    2370:	1a a2       	std	Y+34, r1	; 0x22
    2372:	0f 90       	pop	r0
    2374:	0f be       	out	0x3f, r0	; 63
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    2376:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2378:	81 11       	cpse	r24, r1
    237a:	03 c0       	rjmp	.+6      	; 0x2382 <vQueueWaitForMessageRestricted+0x2c>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    237c:	ce 01       	movw	r24, r28
    237e:	43 96       	adiw	r24, 0x13	; 19
    2380:	1d d7       	rcall	.+3642   	; 0x31bc <vTaskPlaceOnEventListRestricted>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
        prvUnlockQueue( pxQueue );
    2382:	ce 01       	movw	r24, r28
    2384:	d2 dc       	rcall	.-1628   	; 0x1d2a <prvUnlockQueue>
    }
    2386:	df 91       	pop	r29
    2388:	cf 91       	pop	r28
    238a:	08 95       	ret

0000238c <prvBytesInBuffer>:

    configASSERT( pxStreamBuffer );

    xReturn = prvBytesInBuffer( pxStreamBuffer );
    return xReturn;
}
    238c:	fc 01       	movw	r30, r24
    238e:	44 81       	ldd	r20, Z+4	; 0x04
    2390:	55 81       	ldd	r21, Z+5	; 0x05
    2392:	22 81       	ldd	r18, Z+2	; 0x02
    2394:	33 81       	ldd	r19, Z+3	; 0x03
    2396:	24 0f       	add	r18, r20
    2398:	35 1f       	adc	r19, r21
    239a:	80 81       	ld	r24, Z
    239c:	91 81       	ldd	r25, Z+1	; 0x01
    239e:	b9 01       	movw	r22, r18
    23a0:	68 1b       	sub	r22, r24
    23a2:	79 0b       	sbc	r23, r25
    23a4:	cb 01       	movw	r24, r22
    23a6:	64 17       	cp	r22, r20
    23a8:	75 07       	cpc	r23, r21
    23aa:	10 f0       	brcs	.+4      	; 0x23b0 <prvBytesInBuffer+0x24>
    23ac:	84 1b       	sub	r24, r20
    23ae:	95 0b       	sbc	r25, r21
    23b0:	08 95       	ret

000023b2 <prvWriteBytesToBuffer>:
    23b2:	af 92       	push	r10
    23b4:	bf 92       	push	r11
    23b6:	cf 92       	push	r12
    23b8:	df 92       	push	r13
    23ba:	ef 92       	push	r14
    23bc:	ff 92       	push	r15
    23be:	0f 93       	push	r16
    23c0:	1f 93       	push	r17
    23c2:	cf 93       	push	r28
    23c4:	df 93       	push	r29
    23c6:	6c 01       	movw	r12, r24
    23c8:	5b 01       	movw	r10, r22
    23ca:	7a 01       	movw	r14, r20
    23cc:	fc 01       	movw	r30, r24
    23ce:	c2 81       	ldd	r28, Z+2	; 0x02
    23d0:	d3 81       	ldd	r29, Z+3	; 0x03
    23d2:	04 81       	ldd	r16, Z+4	; 0x04
    23d4:	15 81       	ldd	r17, Z+5	; 0x05
    23d6:	0c 1b       	sub	r16, r28
    23d8:	1d 0b       	sbc	r17, r29
    23da:	40 17       	cp	r20, r16
    23dc:	51 07       	cpc	r21, r17
    23de:	08 f4       	brcc	.+2      	; 0x23e2 <prvWriteBytesToBuffer+0x30>
    23e0:	8a 01       	movw	r16, r20
    23e2:	f6 01       	movw	r30, r12
    23e4:	84 85       	ldd	r24, Z+12	; 0x0c
    23e6:	95 85       	ldd	r25, Z+13	; 0x0d
    23e8:	a8 01       	movw	r20, r16
    23ea:	b5 01       	movw	r22, r10
    23ec:	8c 0f       	add	r24, r28
    23ee:	9d 1f       	adc	r25, r29
    23f0:	0e 94 67 2f 	call	0x5ece	; 0x5ece <memcpy>
    23f4:	0e 15       	cp	r16, r14
    23f6:	1f 05       	cpc	r17, r15
    23f8:	58 f4       	brcc	.+22     	; 0x2410 <prvWriteBytesToBuffer+0x5e>
    23fa:	a7 01       	movw	r20, r14
    23fc:	40 1b       	sub	r20, r16
    23fe:	51 0b       	sbc	r21, r17
    2400:	b5 01       	movw	r22, r10
    2402:	60 0f       	add	r22, r16
    2404:	71 1f       	adc	r23, r17
    2406:	f6 01       	movw	r30, r12
    2408:	84 85       	ldd	r24, Z+12	; 0x0c
    240a:	95 85       	ldd	r25, Z+13	; 0x0d
    240c:	0e 94 67 2f 	call	0x5ece	; 0x5ece <memcpy>
    2410:	ce 01       	movw	r24, r28
    2412:	8e 0d       	add	r24, r14
    2414:	9f 1d       	adc	r25, r15
    2416:	f6 01       	movw	r30, r12
    2418:	24 81       	ldd	r18, Z+4	; 0x04
    241a:	35 81       	ldd	r19, Z+5	; 0x05
    241c:	82 17       	cp	r24, r18
    241e:	93 07       	cpc	r25, r19
    2420:	10 f0       	brcs	.+4      	; 0x2426 <prvWriteBytesToBuffer+0x74>
    2422:	82 1b       	sub	r24, r18
    2424:	93 0b       	sbc	r25, r19
    2426:	f6 01       	movw	r30, r12
    2428:	93 83       	std	Z+3, r25	; 0x03
    242a:	82 83       	std	Z+2, r24	; 0x02
    242c:	c7 01       	movw	r24, r14
    242e:	df 91       	pop	r29
    2430:	cf 91       	pop	r28
    2432:	1f 91       	pop	r17
    2434:	0f 91       	pop	r16
    2436:	ff 90       	pop	r15
    2438:	ef 90       	pop	r14
    243a:	df 90       	pop	r13
    243c:	cf 90       	pop	r12
    243e:	bf 90       	pop	r11
    2440:	af 90       	pop	r10
    2442:	08 95       	ret

00002444 <prvWriteMessageToBuffer>:
    2444:	cf 92       	push	r12
    2446:	df 92       	push	r13
    2448:	ef 92       	push	r14
    244a:	ff 92       	push	r15
    244c:	0f 93       	push	r16
    244e:	1f 93       	push	r17
    2450:	cf 93       	push	r28
    2452:	df 93       	push	r29
    2454:	1f 92       	push	r1
    2456:	1f 92       	push	r1
    2458:	cd b7       	in	r28, 0x3d	; 61
    245a:	de b7       	in	r29, 0x3e	; 62
    245c:	5a 83       	std	Y+2, r21	; 0x02
    245e:	49 83       	std	Y+1, r20	; 0x01
    2460:	21 15       	cp	r18, r1
    2462:	31 05       	cpc	r19, r1
    2464:	c9 f0       	breq	.+50     	; 0x2498 <prvWriteMessageToBuffer+0x54>
    2466:	6b 01       	movw	r12, r22
    2468:	7c 01       	movw	r14, r24
    246a:	fc 01       	movw	r30, r24
    246c:	86 85       	ldd	r24, Z+14	; 0x0e
    246e:	80 fd       	sbrc	r24, 0
    2470:	08 c0       	rjmp	.+16     	; 0x2482 <prvWriteMessageToBuffer+0x3e>
    2472:	ca 01       	movw	r24, r20
    2474:	24 17       	cp	r18, r20
    2476:	35 07       	cpc	r19, r21
    2478:	08 f4       	brcc	.+2      	; 0x247c <prvWriteMessageToBuffer+0x38>
    247a:	c9 01       	movw	r24, r18
    247c:	9a 83       	std	Y+2, r25	; 0x02
    247e:	89 83       	std	Y+1, r24	; 0x01
    2480:	11 c0       	rjmp	.+34     	; 0x24a4 <prvWriteMessageToBuffer+0x60>
    2482:	20 17       	cp	r18, r16
    2484:	31 07       	cpc	r19, r17
    2486:	58 f0       	brcs	.+22     	; 0x249e <prvWriteMessageToBuffer+0x5a>
    2488:	42 e0       	ldi	r20, 0x02	; 2
    248a:	50 e0       	ldi	r21, 0x00	; 0
    248c:	be 01       	movw	r22, r28
    248e:	6f 5f       	subi	r22, 0xFF	; 255
    2490:	7f 4f       	sbci	r23, 0xFF	; 255
    2492:	c7 01       	movw	r24, r14
    2494:	8e df       	rcall	.-228    	; 0x23b2 <prvWriteBytesToBuffer>
    2496:	06 c0       	rjmp	.+12     	; 0x24a4 <prvWriteMessageToBuffer+0x60>
    2498:	80 e0       	ldi	r24, 0x00	; 0
    249a:	90 e0       	ldi	r25, 0x00	; 0
    249c:	08 c0       	rjmp	.+16     	; 0x24ae <prvWriteMessageToBuffer+0x6a>
    249e:	80 e0       	ldi	r24, 0x00	; 0
    24a0:	90 e0       	ldi	r25, 0x00	; 0
    24a2:	05 c0       	rjmp	.+10     	; 0x24ae <prvWriteMessageToBuffer+0x6a>
    24a4:	49 81       	ldd	r20, Y+1	; 0x01
    24a6:	5a 81       	ldd	r21, Y+2	; 0x02
    24a8:	b6 01       	movw	r22, r12
    24aa:	c7 01       	movw	r24, r14
    24ac:	82 df       	rcall	.-252    	; 0x23b2 <prvWriteBytesToBuffer>
    24ae:	0f 90       	pop	r0
    24b0:	0f 90       	pop	r0
    24b2:	df 91       	pop	r29
    24b4:	cf 91       	pop	r28
    24b6:	1f 91       	pop	r17
    24b8:	0f 91       	pop	r16
    24ba:	ff 90       	pop	r15
    24bc:	ef 90       	pop	r14
    24be:	df 90       	pop	r13
    24c0:	cf 90       	pop	r12
    24c2:	08 95       	ret

000024c4 <prvReadBytesFromBuffer>:
    24c4:	af 92       	push	r10
    24c6:	bf 92       	push	r11
    24c8:	cf 92       	push	r12
    24ca:	df 92       	push	r13
    24cc:	ef 92       	push	r14
    24ce:	ff 92       	push	r15
    24d0:	0f 93       	push	r16
    24d2:	1f 93       	push	r17
    24d4:	cf 93       	push	r28
    24d6:	df 93       	push	r29
    24d8:	7c 01       	movw	r14, r24
    24da:	5b 01       	movw	r10, r22
    24dc:	e9 01       	movw	r28, r18
    24de:	42 17       	cp	r20, r18
    24e0:	53 07       	cpc	r21, r19
    24e2:	08 f4       	brcc	.+2      	; 0x24e6 <prvReadBytesFromBuffer+0x22>
    24e4:	ea 01       	movw	r28, r20
    24e6:	20 97       	sbiw	r28, 0x00	; 0
    24e8:	79 f1       	breq	.+94     	; 0x2548 <prvReadBytesFromBuffer+0x84>
    24ea:	f7 01       	movw	r30, r14
    24ec:	00 81       	ld	r16, Z
    24ee:	11 81       	ldd	r17, Z+1	; 0x01
    24f0:	c4 80       	ldd	r12, Z+4	; 0x04
    24f2:	d5 80       	ldd	r13, Z+5	; 0x05
    24f4:	c0 1a       	sub	r12, r16
    24f6:	d1 0a       	sbc	r13, r17
    24f8:	cc 15       	cp	r28, r12
    24fa:	dd 05       	cpc	r29, r13
    24fc:	08 f4       	brcc	.+2      	; 0x2500 <prvReadBytesFromBuffer+0x3c>
    24fe:	6e 01       	movw	r12, r28
    2500:	f7 01       	movw	r30, r14
    2502:	64 85       	ldd	r22, Z+12	; 0x0c
    2504:	75 85       	ldd	r23, Z+13	; 0x0d
    2506:	60 0f       	add	r22, r16
    2508:	71 1f       	adc	r23, r17
    250a:	a6 01       	movw	r20, r12
    250c:	c5 01       	movw	r24, r10
    250e:	0e 94 67 2f 	call	0x5ece	; 0x5ece <memcpy>
    2512:	cc 16       	cp	r12, r28
    2514:	dd 06       	cpc	r13, r29
    2516:	58 f4       	brcc	.+22     	; 0x252e <prvReadBytesFromBuffer+0x6a>
    2518:	ae 01       	movw	r20, r28
    251a:	4c 19       	sub	r20, r12
    251c:	5d 09       	sbc	r21, r13
    251e:	f7 01       	movw	r30, r14
    2520:	64 85       	ldd	r22, Z+12	; 0x0c
    2522:	75 85       	ldd	r23, Z+13	; 0x0d
    2524:	c5 01       	movw	r24, r10
    2526:	8c 0d       	add	r24, r12
    2528:	9d 1d       	adc	r25, r13
    252a:	0e 94 67 2f 	call	0x5ece	; 0x5ece <memcpy>
    252e:	0c 0f       	add	r16, r28
    2530:	1d 1f       	adc	r17, r29
    2532:	f7 01       	movw	r30, r14
    2534:	84 81       	ldd	r24, Z+4	; 0x04
    2536:	95 81       	ldd	r25, Z+5	; 0x05
    2538:	08 17       	cp	r16, r24
    253a:	19 07       	cpc	r17, r25
    253c:	10 f0       	brcs	.+4      	; 0x2542 <prvReadBytesFromBuffer+0x7e>
    253e:	08 1b       	sub	r16, r24
    2540:	19 0b       	sbc	r17, r25
    2542:	f7 01       	movw	r30, r14
    2544:	11 83       	std	Z+1, r17	; 0x01
    2546:	00 83       	st	Z, r16
    2548:	ce 01       	movw	r24, r28
    254a:	df 91       	pop	r29
    254c:	cf 91       	pop	r28
    254e:	1f 91       	pop	r17
    2550:	0f 91       	pop	r16
    2552:	ff 90       	pop	r15
    2554:	ef 90       	pop	r14
    2556:	df 90       	pop	r13
    2558:	cf 90       	pop	r12
    255a:	bf 90       	pop	r11
    255c:	af 90       	pop	r10
    255e:	08 95       	ret

00002560 <xStreamBufferGenericCreate>:
    2560:	ef 92       	push	r14
    2562:	ff 92       	push	r15
    2564:	1f 93       	push	r17
    2566:	cf 93       	push	r28
    2568:	df 93       	push	r29
    256a:	eb 01       	movw	r28, r22
    256c:	11 e0       	ldi	r17, 0x01	; 1
    256e:	41 30       	cpi	r20, 0x01	; 1
    2570:	09 f0       	breq	.+2      	; 0x2574 <xStreamBufferGenericCreate+0x14>
    2572:	10 e0       	ldi	r17, 0x00	; 0
    2574:	20 97       	sbiw	r28, 0x00	; 0
    2576:	11 f4       	brne	.+4      	; 0x257c <xStreamBufferGenericCreate+0x1c>
    2578:	c1 e0       	ldi	r28, 0x01	; 1
    257a:	d0 e0       	ldi	r29, 0x00	; 0
    257c:	7c 01       	movw	r14, r24
    257e:	2f ef       	ldi	r18, 0xFF	; 255
    2580:	e2 1a       	sub	r14, r18
    2582:	f2 0a       	sbc	r15, r18
    2584:	41 96       	adiw	r24, 0x11	; 17
    2586:	53 d8       	rcall	.-3930   	; 0x162e <pvPortMalloc>
    2588:	00 97       	sbiw	r24, 0x00	; 0
    258a:	81 f0       	breq	.+32     	; 0x25ac <xStreamBufferGenericCreate+0x4c>
    258c:	20 e1       	ldi	r18, 0x10	; 16
    258e:	fc 01       	movw	r30, r24
    2590:	11 92       	st	Z+, r1
    2592:	2a 95       	dec	r18
    2594:	e9 f7       	brne	.-6      	; 0x2590 <xStreamBufferGenericCreate+0x30>
    2596:	9c 01       	movw	r18, r24
    2598:	20 5f       	subi	r18, 0xF0	; 240
    259a:	3f 4f       	sbci	r19, 0xFF	; 255
    259c:	fc 01       	movw	r30, r24
    259e:	35 87       	std	Z+13, r19	; 0x0d
    25a0:	24 87       	std	Z+12, r18	; 0x0c
    25a2:	f5 82       	std	Z+5, r15	; 0x05
    25a4:	e4 82       	std	Z+4, r14	; 0x04
    25a6:	d7 83       	std	Z+7, r29	; 0x07
    25a8:	c6 83       	std	Z+6, r28	; 0x06
    25aa:	16 87       	std	Z+14, r17	; 0x0e
    25ac:	df 91       	pop	r29
    25ae:	cf 91       	pop	r28
    25b0:	1f 91       	pop	r17
    25b2:	ff 90       	pop	r15
    25b4:	ef 90       	pop	r14
    25b6:	08 95       	ret

000025b8 <xStreamBufferReset>:
    25b8:	cf 93       	push	r28
    25ba:	df 93       	push	r29
    25bc:	fc 01       	movw	r30, r24
    25be:	27 85       	ldd	r18, Z+15	; 0x0f
    25c0:	0f b6       	in	r0, 0x3f	; 63
    25c2:	f8 94       	cli
    25c4:	0f 92       	push	r0
    25c6:	80 85       	ldd	r24, Z+8	; 0x08
    25c8:	91 85       	ldd	r25, Z+9	; 0x09
    25ca:	89 2b       	or	r24, r25
    25cc:	d1 f4       	brne	.+52     	; 0x2602 <xStreamBufferReset+0x4a>
    25ce:	82 85       	ldd	r24, Z+10	; 0x0a
    25d0:	93 85       	ldd	r25, Z+11	; 0x0b
    25d2:	89 2b       	or	r24, r25
    25d4:	c1 f4       	brne	.+48     	; 0x2606 <xStreamBufferReset+0x4e>
    25d6:	86 85       	ldd	r24, Z+14	; 0x0e
    25d8:	46 81       	ldd	r20, Z+6	; 0x06
    25da:	57 81       	ldd	r21, Z+7	; 0x07
    25dc:	64 81       	ldd	r22, Z+4	; 0x04
    25de:	75 81       	ldd	r23, Z+5	; 0x05
    25e0:	a4 85       	ldd	r26, Z+12	; 0x0c
    25e2:	b5 85       	ldd	r27, Z+13	; 0x0d
    25e4:	90 e1       	ldi	r25, 0x10	; 16
    25e6:	ef 01       	movw	r28, r30
    25e8:	19 92       	st	Y+, r1
    25ea:	9a 95       	dec	r25
    25ec:	e9 f7       	brne	.-6      	; 0x25e8 <xStreamBufferReset+0x30>
    25ee:	b5 87       	std	Z+13, r27	; 0x0d
    25f0:	a4 87       	std	Z+12, r26	; 0x0c
    25f2:	75 83       	std	Z+5, r23	; 0x05
    25f4:	64 83       	std	Z+4, r22	; 0x04
    25f6:	57 83       	std	Z+7, r21	; 0x07
    25f8:	46 83       	std	Z+6, r20	; 0x06
    25fa:	86 87       	std	Z+14, r24	; 0x0e
    25fc:	27 87       	std	Z+15, r18	; 0x0f
    25fe:	81 e0       	ldi	r24, 0x01	; 1
    2600:	03 c0       	rjmp	.+6      	; 0x2608 <xStreamBufferReset+0x50>
    2602:	80 e0       	ldi	r24, 0x00	; 0
    2604:	01 c0       	rjmp	.+2      	; 0x2608 <xStreamBufferReset+0x50>
    2606:	80 e0       	ldi	r24, 0x00	; 0
    2608:	0f 90       	pop	r0
    260a:	0f be       	out	0x3f, r0	; 63
    260c:	df 91       	pop	r29
    260e:	cf 91       	pop	r28
    2610:	08 95       	ret

00002612 <xStreamBufferSpacesAvailable>:
    2612:	fc 01       	movw	r30, r24
    2614:	24 81       	ldd	r18, Z+4	; 0x04
    2616:	35 81       	ldd	r19, Z+5	; 0x05
    2618:	80 81       	ld	r24, Z
    261a:	91 81       	ldd	r25, Z+1	; 0x01
    261c:	42 81       	ldd	r20, Z+2	; 0x02
    261e:	53 81       	ldd	r21, Z+3	; 0x03
    2620:	82 0f       	add	r24, r18
    2622:	93 1f       	adc	r25, r19
    2624:	01 97       	sbiw	r24, 0x01	; 1
    2626:	84 1b       	sub	r24, r20
    2628:	95 0b       	sbc	r25, r21
    262a:	82 17       	cp	r24, r18
    262c:	93 07       	cpc	r25, r19
    262e:	10 f0       	brcs	.+4      	; 0x2634 <xStreamBufferSpacesAvailable+0x22>
    2630:	82 1b       	sub	r24, r18
    2632:	93 0b       	sbc	r25, r19
    2634:	08 95       	ret

00002636 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void *pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    2636:	2f 92       	push	r2
    2638:	3f 92       	push	r3
    263a:	4f 92       	push	r4
    263c:	5f 92       	push	r5
    263e:	6f 92       	push	r6
    2640:	7f 92       	push	r7
    2642:	8f 92       	push	r8
    2644:	9f 92       	push	r9
    2646:	af 92       	push	r10
    2648:	bf 92       	push	r11
    264a:	cf 92       	push	r12
    264c:	df 92       	push	r13
    264e:	ef 92       	push	r14
    2650:	ff 92       	push	r15
    2652:	0f 93       	push	r16
    2654:	1f 93       	push	r17
    2656:	cf 93       	push	r28
    2658:	df 93       	push	r29
    265a:	cd b7       	in	r28, 0x3d	; 61
    265c:	de b7       	in	r29, 0x3e	; 62
    265e:	29 97       	sbiw	r28, 0x09	; 9
    2660:	0f b6       	in	r0, 0x3f	; 63
    2662:	f8 94       	cli
    2664:	de bf       	out	0x3e, r29	; 62
    2666:	0f be       	out	0x3f, r0	; 63
    2668:	cd bf       	out	0x3d, r28	; 61
    266a:	5c 01       	movw	r10, r24
    266c:	1b 01       	movw	r2, r22
    266e:	2a 01       	movw	r4, r20
    2670:	0e 83       	std	Y+6, r16	; 0x06
    2672:	1f 83       	std	Y+7, r17	; 0x07
    2674:	28 87       	std	Y+8, r18	; 0x08
    2676:	39 87       	std	Y+9, r19	; 0x09

    /* This send function is used to write to both message buffers and stream
    buffers.  If this is a message buffer then the space needed must be
    increased by the amount of bytes needed to store the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    2678:	fc 01       	movw	r30, r24
    267a:	86 85       	ldd	r24, Z+14	; 0x0e
    267c:	80 ff       	sbrs	r24, 0
    267e:	05 c0       	rjmp	.+10     	; 0x268a <xStreamBufferSend+0x54>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    2680:	3a 01       	movw	r6, r20
    2682:	f2 e0       	ldi	r31, 0x02	; 2
    2684:	6f 0e       	add	r6, r31
    2686:	71 1c       	adc	r7, r1
    2688:	01 c0       	rjmp	.+2      	; 0x268c <xStreamBufferSend+0x56>
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReturn, xSpace = 0;
size_t xRequiredSpace = xDataLengthBytes;
    268a:	3a 01       	movw	r6, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    268c:	8e 81       	ldd	r24, Y+6	; 0x06
    268e:	9f 81       	ldd	r25, Y+7	; 0x07
    2690:	a8 85       	ldd	r26, Y+8	; 0x08
    2692:	b9 85       	ldd	r27, Y+9	; 0x09
    2694:	89 2b       	or	r24, r25
    2696:	8a 2b       	or	r24, r26
    2698:	8b 2b       	or	r24, r27
    269a:	09 f4       	brne	.+2      	; 0x269e <xStreamBufferSend+0x68>
    269c:	34 c0       	rjmp	.+104    	; 0x2706 <xStreamBufferSend+0xd0>
    {
        vTaskSetTimeOutState( &xTimeOut );
    269e:	ce 01       	movw	r24, r28
    26a0:	01 96       	adiw	r24, 0x01	; 1
    26a2:	22 d6       	rcall	.+3140   	; 0x32e8 <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
            buffer. */
            taskENTER_CRITICAL();
    26a4:	0f b6       	in	r0, 0x3f	; 63
    26a6:	f8 94       	cli
    26a8:	0f 92       	push	r0
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    26aa:	c5 01       	movw	r24, r10
    26ac:	b2 df       	rcall	.-156    	; 0x2612 <xStreamBufferSpacesAvailable>
    26ae:	4c 01       	movw	r8, r24

                if( xSpace < xRequiredSpace )
    26b0:	86 15       	cp	r24, r6
    26b2:	97 05       	cpc	r25, r7
    26b4:	18 f5       	brcc	.+70     	; 0x26fc <xStreamBufferSend+0xc6>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClear( NULL );
    26b6:	80 e0       	ldi	r24, 0x00	; 0
    26b8:	90 e0       	ldi	r25, 0x00	; 0
    26ba:	0e 94 c6 1c 	call	0x398c	; 0x398c <xTaskNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    26be:	94 d6       	rcall	.+3368   	; 0x33e8 <xTaskGetCurrentTaskHandle>
    26c0:	f5 01       	movw	r30, r10
    26c2:	93 87       	std	Z+11, r25	; 0x0b
    26c4:	82 87       	std	Z+10, r24	; 0x0a
                {
                    taskEXIT_CRITICAL();
                    break;
                }
            }
            taskEXIT_CRITICAL();
    26c6:	0f 90       	pop	r0
    26c8:	0f be       	out	0x3f, r0	; 63

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    26ca:	ce 80       	ldd	r12, Y+6	; 0x06
    26cc:	df 80       	ldd	r13, Y+7	; 0x07
    26ce:	e8 84       	ldd	r14, Y+8	; 0x08
    26d0:	f9 84       	ldd	r15, Y+9	; 0x09
    26d2:	00 e0       	ldi	r16, 0x00	; 0
    26d4:	10 e0       	ldi	r17, 0x00	; 0
    26d6:	20 e0       	ldi	r18, 0x00	; 0
    26d8:	30 e0       	ldi	r19, 0x00	; 0
    26da:	a9 01       	movw	r20, r18
    26dc:	60 e0       	ldi	r22, 0x00	; 0
    26de:	70 e0       	ldi	r23, 0x00	; 0
    26e0:	cb 01       	movw	r24, r22
    26e2:	c9 d7       	rcall	.+3986   	; 0x3676 <xTaskNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
    26e4:	f5 01       	movw	r30, r10
    26e6:	13 86       	std	Z+11, r1	; 0x0b
    26e8:	12 86       	std	Z+10, r1	; 0x0a

        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    26ea:	be 01       	movw	r22, r28
    26ec:	6a 5f       	subi	r22, 0xFA	; 250
    26ee:	7f 4f       	sbci	r23, 0xFF	; 255
    26f0:	ce 01       	movw	r24, r28
    26f2:	01 96       	adiw	r24, 0x01	; 1
    26f4:	20 d6       	rcall	.+3136   	; 0x3336 <xTaskCheckForTimeOut>
    26f6:	88 23       	and	r24, r24
    26f8:	a9 f2       	breq	.-86     	; 0x26a4 <xStreamBufferSend+0x6e>
    26fa:	02 c0       	rjmp	.+4      	; 0x2700 <xStreamBufferSend+0xca>
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
                }
                else
                {
                    taskEXIT_CRITICAL();
    26fc:	0f 90       	pop	r0
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
    26fe:	0f be       	out	0x3f, r0	; 63
    2700:	81 14       	cp	r8, r1
    2702:	91 04       	cpc	r9, r1
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    2704:	19 f4       	brne	.+6      	; 0x270c <xStreamBufferSend+0xd6>
    2706:	c5 01       	movw	r24, r10
    2708:	84 df       	rcall	.-248    	; 0x2612 <xStreamBufferSpacesAvailable>
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    270a:	4c 01       	movw	r8, r24
    270c:	83 01       	movw	r16, r6
    270e:	94 01       	movw	r18, r8
    2710:	a2 01       	movw	r20, r4
    2712:	b1 01       	movw	r22, r2
    2714:	c5 01       	movw	r24, r10
    2716:	96 de       	rcall	.-724    	; 0x2444 <prvWriteMessageToBuffer>

    if( xReturn > ( size_t ) 0 )
    2718:	7c 01       	movw	r14, r24
    271a:	89 2b       	or	r24, r25
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    271c:	e1 f0       	breq	.+56     	; 0x2756 <xStreamBufferSend+0x120>
    271e:	c5 01       	movw	r24, r10
    2720:	35 de       	rcall	.-918    	; 0x238c <prvBytesInBuffer>
    2722:	f5 01       	movw	r30, r10
    2724:	26 81       	ldd	r18, Z+6	; 0x06
    2726:	37 81       	ldd	r19, Z+7	; 0x07
    2728:	82 17       	cp	r24, r18
    272a:	93 07       	cpc	r25, r19
        {
            sbSEND_COMPLETED( pxStreamBuffer );
    272c:	a0 f0       	brcs	.+40     	; 0x2756 <xStreamBufferSend+0x120>
    272e:	0e d3       	rcall	.+1564   	; 0x2d4c <vTaskSuspendAll>
    2730:	f5 01       	movw	r30, r10
    2732:	80 85       	ldd	r24, Z+8	; 0x08
    2734:	91 85       	ldd	r25, Z+9	; 0x09
    2736:	89 2b       	or	r24, r25
    2738:	69 f0       	breq	.+26     	; 0x2754 <xStreamBufferSend+0x11e>
    273a:	80 85       	ldd	r24, Z+8	; 0x08
    273c:	91 85       	ldd	r25, Z+9	; 0x09
    273e:	00 e0       	ldi	r16, 0x00	; 0
    2740:	10 e0       	ldi	r17, 0x00	; 0
    2742:	20 e0       	ldi	r18, 0x00	; 0
    2744:	40 e0       	ldi	r20, 0x00	; 0
    2746:	50 e0       	ldi	r21, 0x00	; 0
    2748:	ba 01       	movw	r22, r20
    274a:	0e 94 c5 1b 	call	0x378a	; 0x378a <xTaskGenericNotify>
    274e:	f5 01       	movw	r30, r10
    2750:	11 86       	std	Z+9, r1	; 0x09
    2752:	10 86       	std	Z+8, r1	; 0x08
    2754:	e4 d3       	rcall	.+1992   	; 0x2f1e <xTaskResumeAll>
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    2756:	c7 01       	movw	r24, r14
    2758:	29 96       	adiw	r28, 0x09	; 9
    275a:	0f b6       	in	r0, 0x3f	; 63
    275c:	f8 94       	cli
    275e:	de bf       	out	0x3e, r29	; 62
    2760:	0f be       	out	0x3f, r0	; 63
    2762:	cd bf       	out	0x3d, r28	; 61
    2764:	df 91       	pop	r29
    2766:	cf 91       	pop	r28
    2768:	1f 91       	pop	r17
    276a:	0f 91       	pop	r16
    276c:	ff 90       	pop	r15
    276e:	ef 90       	pop	r14
    2770:	df 90       	pop	r13
    2772:	cf 90       	pop	r12
    2774:	bf 90       	pop	r11
    2776:	af 90       	pop	r10
    2778:	9f 90       	pop	r9
    277a:	8f 90       	pop	r8
    277c:	7f 90       	pop	r7
    277e:	6f 90       	pop	r6
    2780:	5f 90       	pop	r5
    2782:	4f 90       	pop	r4
    2784:	3f 90       	pop	r3
    2786:	2f 90       	pop	r2
    2788:	08 95       	ret

0000278a <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void *pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    278a:	af 92       	push	r10
    278c:	bf 92       	push	r11
    278e:	cf 92       	push	r12
    2790:	df 92       	push	r13
    2792:	ef 92       	push	r14
    2794:	ff 92       	push	r15
    2796:	0f 93       	push	r16
    2798:	1f 93       	push	r17
    279a:	cf 93       	push	r28
    279c:	df 93       	push	r29
    279e:	ec 01       	movw	r28, r24
    27a0:	5b 01       	movw	r10, r22
    27a2:	6a 01       	movw	r12, r20
    27a4:	79 01       	movw	r14, r18

    /* This send function is used to write to both message buffers and stream
    buffers.  If this is a message buffer then the space needed must be
    increased by the amount of bytes needed to store the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    27a6:	8e 85       	ldd	r24, Y+14	; 0x0e
    27a8:	80 ff       	sbrs	r24, 0
    27aa:	04 c0       	rjmp	.+8      	; 0x27b4 <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    27ac:	8a 01       	movw	r16, r20
    27ae:	0e 5f       	subi	r16, 0xFE	; 254
    27b0:	1f 4f       	sbci	r17, 0xFF	; 255
    27b2:	01 c0       	rjmp	.+2      	; 0x27b6 <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReturn, xSpace;
size_t xRequiredSpace = xDataLengthBytes;
    27b4:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    27b6:	ce 01       	movw	r24, r28
    27b8:	2c df       	rcall	.-424    	; 0x2612 <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    27ba:	9c 01       	movw	r18, r24
    27bc:	a6 01       	movw	r20, r12
    27be:	b5 01       	movw	r22, r10
    27c0:	ce 01       	movw	r24, r28
    27c2:	40 de       	rcall	.-896    	; 0x2444 <prvWriteMessageToBuffer>
    27c4:	6c 01       	movw	r12, r24

    if( xReturn > ( size_t ) 0 )
    27c6:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    27c8:	b9 f0       	breq	.+46     	; 0x27f8 <xStreamBufferSendFromISR+0x6e>
    27ca:	ce 01       	movw	r24, r28
    27cc:	df dd       	rcall	.-1090   	; 0x238c <prvBytesInBuffer>
    27ce:	2e 81       	ldd	r18, Y+6	; 0x06
    27d0:	3f 81       	ldd	r19, Y+7	; 0x07
    27d2:	82 17       	cp	r24, r18
    27d4:	93 07       	cpc	r25, r19
    27d6:	80 f0       	brcs	.+32     	; 0x27f8 <xStreamBufferSendFromISR+0x6e>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    27d8:	88 85       	ldd	r24, Y+8	; 0x08
    27da:	99 85       	ldd	r25, Y+9	; 0x09
    27dc:	89 2b       	or	r24, r25
    27de:	61 f0       	breq	.+24     	; 0x27f8 <xStreamBufferSendFromISR+0x6e>
    27e0:	88 85       	ldd	r24, Y+8	; 0x08
    27e2:	99 85       	ldd	r25, Y+9	; 0x09
    27e4:	00 e0       	ldi	r16, 0x00	; 0
    27e6:	10 e0       	ldi	r17, 0x00	; 0
    27e8:	20 e0       	ldi	r18, 0x00	; 0
    27ea:	40 e0       	ldi	r20, 0x00	; 0
    27ec:	50 e0       	ldi	r21, 0x00	; 0
    27ee:	ba 01       	movw	r22, r20
    27f0:	0e 94 3d 1c 	call	0x387a	; 0x387a <xTaskGenericNotifyFromISR>
    27f4:	19 86       	std	Y+9, r1	; 0x09
    27f6:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    27f8:	c6 01       	movw	r24, r12
    27fa:	df 91       	pop	r29
    27fc:	cf 91       	pop	r28
    27fe:	1f 91       	pop	r17
    2800:	0f 91       	pop	r16
    2802:	ff 90       	pop	r15
    2804:	ef 90       	pop	r14
    2806:	df 90       	pop	r13
    2808:	cf 90       	pop	r12
    280a:	bf 90       	pop	r11
    280c:	af 90       	pop	r10
    280e:	08 95       	ret

00002810 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void *pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    2810:	4f 92       	push	r4
    2812:	5f 92       	push	r5
    2814:	6f 92       	push	r6
    2816:	7f 92       	push	r7
    2818:	8f 92       	push	r8
    281a:	9f 92       	push	r9
    281c:	af 92       	push	r10
    281e:	bf 92       	push	r11
    2820:	cf 92       	push	r12
    2822:	df 92       	push	r13
    2824:	ef 92       	push	r14
    2826:	ff 92       	push	r15
    2828:	0f 93       	push	r16
    282a:	1f 93       	push	r17
    282c:	cf 93       	push	r28
    282e:	df 93       	push	r29
    2830:	1f 92       	push	r1
    2832:	1f 92       	push	r1
    2834:	cd b7       	in	r28, 0x3d	; 61
    2836:	de b7       	in	r29, 0x3e	; 62
    2838:	5c 01       	movw	r10, r24
    283a:	2b 01       	movw	r4, r22
    283c:	3a 01       	movw	r6, r20
    283e:	68 01       	movw	r12, r16
    2840:	79 01       	movw	r14, r18
    /* This receive function is used by both message buffers, which store
    discrete messages, and stream buffers, which store a continuous stream of
    bytes.  Discrete messages include an additional
    sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    2842:	fc 01       	movw	r30, r24
    2844:	86 85       	ldd	r24, Z+14	; 0x0e
    2846:	80 fd       	sbrc	r24, 0
    2848:	03 c0       	rjmp	.+6      	; 0x2850 <xStreamBufferReceive+0x40>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    284a:	81 2c       	mov	r8, r1
    284c:	91 2c       	mov	r9, r1
    284e:	04 c0       	rjmp	.+8      	; 0x2858 <xStreamBufferReceive+0x48>
    bytes.  Discrete messages include an additional
    sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    2850:	68 94       	set
    2852:	88 24       	eor	r8, r8
    2854:	81 f8       	bld	r8, 1
    2856:	91 2c       	mov	r9, r1
    else
    {
        xBytesToStoreMessageLength = 0;
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    2858:	c1 14       	cp	r12, r1
    285a:	d1 04       	cpc	r13, r1
    285c:	e1 04       	cpc	r14, r1
    285e:	f1 04       	cpc	r15, r1
    2860:	31 f1       	breq	.+76     	; 0x28ae <xStreamBufferReceive+0x9e>
    {
        /* Checking if there is data and clearing the notification state must be
        performed atomically. */
        taskENTER_CRITICAL();
    2862:	0f b6       	in	r0, 0x3f	; 63
    2864:	f8 94       	cli
    2866:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    2868:	c5 01       	movw	r24, r10
    286a:	90 dd       	rcall	.-1248   	; 0x238c <prvBytesInBuffer>
    286c:	8c 01       	movw	r16, r24
            /* If this function was invoked by a message buffer read then
            xBytesToStoreMessageLength holds the number of bytes used to hold
            the length of the next discrete message.  If this function was
            invoked by a stream buffer read then xBytesToStoreMessageLength will
            be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    286e:	88 16       	cp	r8, r24
    2870:	99 06       	cpc	r9, r25
    2872:	40 f0       	brcs	.+16     	; 0x2884 <xStreamBufferReceive+0x74>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    2874:	80 e0       	ldi	r24, 0x00	; 0
    2876:	90 e0       	ldi	r25, 0x00	; 0
    2878:	0e 94 c6 1c 	call	0x398c	; 0x398c <xTaskNotifyStateClear>

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    287c:	b5 d5       	rcall	.+2922   	; 0x33e8 <xTaskGetCurrentTaskHandle>
    287e:	f5 01       	movw	r30, r10
    2880:	91 87       	std	Z+9, r25	; 0x09
    2882:	80 87       	std	Z+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    2884:	0f 90       	pop	r0
    2886:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    2888:	80 16       	cp	r8, r16
    288a:	91 06       	cpc	r9, r17
    288c:	b0 f0       	brcs	.+44     	; 0x28ba <xStreamBufferReceive+0xaa>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    288e:	00 e0       	ldi	r16, 0x00	; 0
    2890:	10 e0       	ldi	r17, 0x00	; 0
    2892:	20 e0       	ldi	r18, 0x00	; 0
    2894:	30 e0       	ldi	r19, 0x00	; 0
    2896:	a9 01       	movw	r20, r18
    2898:	60 e0       	ldi	r22, 0x00	; 0
    289a:	70 e0       	ldi	r23, 0x00	; 0
    289c:	cb 01       	movw	r24, r22
    289e:	eb d6       	rcall	.+3542   	; 0x3676 <xTaskNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    28a0:	f5 01       	movw	r30, r10
    28a2:	11 86       	std	Z+9, r1	; 0x09

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    28a4:	10 86       	std	Z+8, r1	; 0x08
    28a6:	c5 01       	movw	r24, r10
    28a8:	71 dd       	rcall	.-1310   	; 0x238c <prvBytesInBuffer>
    28aa:	8c 01       	movw	r16, r24
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    28ac:	03 c0       	rjmp	.+6      	; 0x28b4 <xStreamBufferReceive+0xa4>
    28ae:	c5 01       	movw	r24, r10
    28b0:	6d dd       	rcall	.-1318   	; 0x238c <prvBytesInBuffer>
    28b2:	8c 01       	movw	r16, r24
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
    holds the number of bytes used to store the message length) or a stream of
    bytes (where xBytesToStoreMessageLength is zero), the number of bytes
    available must be greater than xBytesToStoreMessageLength to be able to
    read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    28b4:	80 16       	cp	r8, r16
    28b6:	91 06       	cpc	r9, r17
    28b8:	b8 f5       	brcc	.+110    	; 0x2928 <xStreamBufferReceive+0x118>
                                        size_t xBytesToStoreMessageLength )
{
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

    if( xBytesToStoreMessageLength != ( size_t ) 0 )
    28ba:	81 14       	cp	r8, r1
    28bc:	91 04       	cpc	r9, r1
    28be:	c1 f0       	breq	.+48     	; 0x28f0 <xStreamBufferReceive+0xe0>
    {
        /* A discrete message is being received.  First receive the length
        of the message.  A copy of the tail is stored so the buffer can be
        returned to its prior state if the length of the message is too
        large for the provided buffer. */
        xOriginalTail = pxStreamBuffer->xTail;
    28c0:	f5 01       	movw	r30, r10
    28c2:	e0 80       	ld	r14, Z
    28c4:	f1 80       	ldd	r15, Z+1	; 0x01
        ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
    28c6:	98 01       	movw	r18, r16
    28c8:	a4 01       	movw	r20, r8
    28ca:	be 01       	movw	r22, r28
    28cc:	6f 5f       	subi	r22, 0xFF	; 255
    28ce:	7f 4f       	sbci	r23, 0xFF	; 255
    28d0:	c5 01       	movw	r24, r10
    28d2:	f8 dd       	rcall	.-1040   	; 0x24c4 <prvReadBytesFromBuffer>
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
    28d4:	89 81       	ldd	r24, Y+1	; 0x01
    28d6:	9a 81       	ldd	r25, Y+2	; 0x02

        /* Reduce the number of bytes available by the number of bytes just
        read out. */
        xBytesAvailable -= xBytesToStoreMessageLength;
    28d8:	08 19       	sub	r16, r8
    28da:	19 09       	sbc	r17, r9

        /* Check there is enough space in the buffer provided by the
        user. */
        if( xNextMessageLength > xBufferLengthBytes )
    28dc:	68 16       	cp	r6, r24
    28de:	79 06       	cpc	r7, r25
    28e0:	30 f4       	brcc	.+12     	; 0x28ee <xStreamBufferReceive+0xde>
        {
            /* The user has provided insufficient space to read the message
            so return the buffer to its previous state (so the length of
            the message is in the buffer again). */
            pxStreamBuffer->xTail = xOriginalTail;
    28e2:	f5 01       	movw	r30, r10
    28e4:	f1 82       	std	Z+1, r15	; 0x01
    28e6:	e0 82       	st	Z, r14
            xNextMessageLength = 0;
    28e8:	61 2c       	mov	r6, r1
    28ea:	71 2c       	mov	r7, r1
        of the message.  A copy of the tail is stored so the buffer can be
        returned to its prior state if the length of the message is too
        large for the provided buffer. */
        xOriginalTail = pxStreamBuffer->xTail;
        ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
    28ec:	01 c0       	rjmp	.+2      	; 0x28f0 <xStreamBufferReceive+0xe0>
        message), so read as many bytes as possible. */
        xNextMessageLength = xBufferLengthBytes;
    }

    /* Read the actual data. */
    xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
    28ee:	3c 01       	movw	r6, r24
    28f0:	98 01       	movw	r18, r16
    28f2:	a3 01       	movw	r20, r6
    28f4:	b2 01       	movw	r22, r4
    28f6:	c5 01       	movw	r24, r10
    28f8:	e5 dd       	rcall	.-1078   	; 0x24c4 <prvReadBytesFromBuffer>
    if( xBytesAvailable > xBytesToStoreMessageLength )
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    28fa:	7c 01       	movw	r14, r24
    28fc:	89 2b       	or	r24, r25
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    28fe:	b1 f0       	breq	.+44     	; 0x292c <xStreamBufferReceive+0x11c>
    2900:	25 d2       	rcall	.+1098   	; 0x2d4c <vTaskSuspendAll>
    2902:	f5 01       	movw	r30, r10
    2904:	82 85       	ldd	r24, Z+10	; 0x0a
    2906:	93 85       	ldd	r25, Z+11	; 0x0b
    2908:	89 2b       	or	r24, r25
    290a:	61 f0       	breq	.+24     	; 0x2924 <xStreamBufferReceive+0x114>
    290c:	82 85       	ldd	r24, Z+10	; 0x0a
    290e:	93 85       	ldd	r25, Z+11	; 0x0b
    2910:	00 e0       	ldi	r16, 0x00	; 0
    2912:	10 e0       	ldi	r17, 0x00	; 0
    2914:	20 e0       	ldi	r18, 0x00	; 0
    2916:	40 e0       	ldi	r20, 0x00	; 0
    2918:	50 e0       	ldi	r21, 0x00	; 0
    291a:	ba 01       	movw	r22, r20
    291c:	36 d7       	rcall	.+3692   	; 0x378a <xTaskGenericNotify>
    291e:	f5 01       	movw	r30, r10
    2920:	13 86       	std	Z+11, r1	; 0x0b
    2922:	12 86       	std	Z+10, r1	; 0x0a
    2924:	fc d2       	rcall	.+1528   	; 0x2f1e <xTaskResumeAll>
    2926:	02 c0       	rjmp	.+4      	; 0x292c <xStreamBufferReceive+0x11c>
                             void *pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    2928:	e1 2c       	mov	r14, r1
    292a:	f1 2c       	mov	r15, r1
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    292c:	c7 01       	movw	r24, r14
    292e:	0f 90       	pop	r0
    2930:	0f 90       	pop	r0
    2932:	df 91       	pop	r29
    2934:	cf 91       	pop	r28
    2936:	1f 91       	pop	r17
    2938:	0f 91       	pop	r16
    293a:	ff 90       	pop	r15
    293c:	ef 90       	pop	r14
    293e:	df 90       	pop	r13
    2940:	cf 90       	pop	r12
    2942:	bf 90       	pop	r11
    2944:	af 90       	pop	r10
    2946:	9f 90       	pop	r9
    2948:	8f 90       	pop	r8
    294a:	7f 90       	pop	r7
    294c:	6f 90       	pop	r6
    294e:	5f 90       	pop	r5
    2950:	4f 90       	pop	r4
    2952:	08 95       	ret

00002954 <prvResetNextTaskUnblockTime>:
    2954:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <pxDelayedTaskList>
    2958:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <pxDelayedTaskList+0x1>
    295c:	80 81       	ld	r24, Z
    295e:	81 11       	cpse	r24, r1
    2960:	0c c0       	rjmp	.+24     	; 0x297a <prvResetNextTaskUnblockTime+0x26>
    2962:	8f ef       	ldi	r24, 0xFF	; 255
    2964:	9f ef       	ldi	r25, 0xFF	; 255
    2966:	dc 01       	movw	r26, r24
    2968:	80 93 3b 19 	sts	0x193B, r24	; 0x80193b <xNextTaskUnblockTime>
    296c:	90 93 3c 19 	sts	0x193C, r25	; 0x80193c <xNextTaskUnblockTime+0x1>
    2970:	a0 93 3d 19 	sts	0x193D, r26	; 0x80193d <xNextTaskUnblockTime+0x2>
    2974:	b0 93 3e 19 	sts	0x193E, r27	; 0x80193e <xNextTaskUnblockTime+0x3>
    2978:	08 95       	ret
    297a:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <pxDelayedTaskList>
    297e:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <pxDelayedTaskList+0x1>
    2982:	07 80       	ldd	r0, Z+7	; 0x07
    2984:	f0 85       	ldd	r31, Z+8	; 0x08
    2986:	e0 2d       	mov	r30, r0
    2988:	00 84       	ldd	r0, Z+8	; 0x08
    298a:	f1 85       	ldd	r31, Z+9	; 0x09
    298c:	e0 2d       	mov	r30, r0
    298e:	82 81       	ldd	r24, Z+2	; 0x02
    2990:	93 81       	ldd	r25, Z+3	; 0x03
    2992:	a4 81       	ldd	r26, Z+4	; 0x04
    2994:	b5 81       	ldd	r27, Z+5	; 0x05
    2996:	80 93 3b 19 	sts	0x193B, r24	; 0x80193b <xNextTaskUnblockTime>
    299a:	90 93 3c 19 	sts	0x193C, r25	; 0x80193c <xNextTaskUnblockTime+0x1>
    299e:	a0 93 3d 19 	sts	0x193D, r26	; 0x80193d <xNextTaskUnblockTime+0x2>
    29a2:	b0 93 3e 19 	sts	0x193E, r27	; 0x80193e <xNextTaskUnblockTime+0x3>
    29a6:	08 95       	ret

000029a8 <prvAddCurrentTaskToDelayedList>:
    29a8:	8f 92       	push	r8
    29aa:	9f 92       	push	r9
    29ac:	af 92       	push	r10
    29ae:	bf 92       	push	r11
    29b0:	cf 92       	push	r12
    29b2:	df 92       	push	r13
    29b4:	ef 92       	push	r14
    29b6:	ff 92       	push	r15
    29b8:	cf 93       	push	r28
    29ba:	6b 01       	movw	r12, r22
    29bc:	7c 01       	movw	r14, r24
    29be:	c4 2f       	mov	r28, r20
    29c0:	80 90 45 19 	lds	r8, 0x1945	; 0x801945 <xTickCount>
    29c4:	90 90 46 19 	lds	r9, 0x1946	; 0x801946 <xTickCount+0x1>
    29c8:	a0 90 47 19 	lds	r10, 0x1947	; 0x801947 <xTickCount+0x2>
    29cc:	b0 90 48 19 	lds	r11, 0x1948	; 0x801948 <xTickCount+0x3>
    29d0:	80 91 b2 19 	lds	r24, 0x19B2	; 0x8019b2 <pxCurrentTCB>
    29d4:	90 91 b3 19 	lds	r25, 0x19B3	; 0x8019b3 <pxCurrentTCB+0x1>
    29d8:	02 96       	adiw	r24, 0x02	; 2
    29da:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <uxListRemove>
    29de:	8f ef       	ldi	r24, 0xFF	; 255
    29e0:	c8 16       	cp	r12, r24
    29e2:	d8 06       	cpc	r13, r24
    29e4:	e8 06       	cpc	r14, r24
    29e6:	f8 06       	cpc	r15, r24
    29e8:	69 f4       	brne	.+26     	; 0x2a04 <prvAddCurrentTaskToDelayedList+0x5c>
    29ea:	cc 23       	and	r28, r28
    29ec:	59 f0       	breq	.+22     	; 0x2a04 <prvAddCurrentTaskToDelayedList+0x5c>
    29ee:	60 91 b2 19 	lds	r22, 0x19B2	; 0x8019b2 <pxCurrentTCB>
    29f2:	70 91 b3 19 	lds	r23, 0x19B3	; 0x8019b3 <pxCurrentTCB+0x1>
    29f6:	6e 5f       	subi	r22, 0xFE	; 254
    29f8:	7f 4f       	sbci	r23, 0xFF	; 255
    29fa:	8a e4       	ldi	r24, 0x4A	; 74
    29fc:	99 e1       	ldi	r25, 0x19	; 25
    29fe:	0e 94 16 0c 	call	0x182c	; 0x182c <vListInsertEnd>
    2a02:	3f c0       	rjmp	.+126    	; 0x2a82 <prvAddCurrentTaskToDelayedList+0xda>
    2a04:	c8 0c       	add	r12, r8
    2a06:	d9 1c       	adc	r13, r9
    2a08:	ea 1c       	adc	r14, r10
    2a0a:	fb 1c       	adc	r15, r11
    2a0c:	e0 91 b2 19 	lds	r30, 0x19B2	; 0x8019b2 <pxCurrentTCB>
    2a10:	f0 91 b3 19 	lds	r31, 0x19B3	; 0x8019b3 <pxCurrentTCB+0x1>
    2a14:	c2 82       	std	Z+2, r12	; 0x02
    2a16:	d3 82       	std	Z+3, r13	; 0x03
    2a18:	e4 82       	std	Z+4, r14	; 0x04
    2a1a:	f5 82       	std	Z+5, r15	; 0x05
    2a1c:	c8 14       	cp	r12, r8
    2a1e:	d9 04       	cpc	r13, r9
    2a20:	ea 04       	cpc	r14, r10
    2a22:	fb 04       	cpc	r15, r11
    2a24:	68 f4       	brcc	.+26     	; 0x2a40 <prvAddCurrentTaskToDelayedList+0x98>
    2a26:	60 91 b2 19 	lds	r22, 0x19B2	; 0x8019b2 <pxCurrentTCB>
    2a2a:	70 91 b3 19 	lds	r23, 0x19B3	; 0x8019b3 <pxCurrentTCB+0x1>
    2a2e:	80 91 6c 19 	lds	r24, 0x196C	; 0x80196c <pxOverflowDelayedTaskList>
    2a32:	90 91 6d 19 	lds	r25, 0x196D	; 0x80196d <pxOverflowDelayedTaskList+0x1>
    2a36:	6e 5f       	subi	r22, 0xFE	; 254
    2a38:	7f 4f       	sbci	r23, 0xFF	; 255
    2a3a:	0e 94 37 0c 	call	0x186e	; 0x186e <vListInsert>
    2a3e:	21 c0       	rjmp	.+66     	; 0x2a82 <prvAddCurrentTaskToDelayedList+0xda>
    2a40:	60 91 b2 19 	lds	r22, 0x19B2	; 0x8019b2 <pxCurrentTCB>
    2a44:	70 91 b3 19 	lds	r23, 0x19B3	; 0x8019b3 <pxCurrentTCB+0x1>
    2a48:	80 91 6e 19 	lds	r24, 0x196E	; 0x80196e <pxDelayedTaskList>
    2a4c:	90 91 6f 19 	lds	r25, 0x196F	; 0x80196f <pxDelayedTaskList+0x1>
    2a50:	6e 5f       	subi	r22, 0xFE	; 254
    2a52:	7f 4f       	sbci	r23, 0xFF	; 255
    2a54:	0e 94 37 0c 	call	0x186e	; 0x186e <vListInsert>
    2a58:	80 91 3b 19 	lds	r24, 0x193B	; 0x80193b <xNextTaskUnblockTime>
    2a5c:	90 91 3c 19 	lds	r25, 0x193C	; 0x80193c <xNextTaskUnblockTime+0x1>
    2a60:	a0 91 3d 19 	lds	r26, 0x193D	; 0x80193d <xNextTaskUnblockTime+0x2>
    2a64:	b0 91 3e 19 	lds	r27, 0x193E	; 0x80193e <xNextTaskUnblockTime+0x3>
    2a68:	c8 16       	cp	r12, r24
    2a6a:	d9 06       	cpc	r13, r25
    2a6c:	ea 06       	cpc	r14, r26
    2a6e:	fb 06       	cpc	r15, r27
    2a70:	40 f4       	brcc	.+16     	; 0x2a82 <prvAddCurrentTaskToDelayedList+0xda>
    2a72:	c0 92 3b 19 	sts	0x193B, r12	; 0x80193b <xNextTaskUnblockTime>
    2a76:	d0 92 3c 19 	sts	0x193C, r13	; 0x80193c <xNextTaskUnblockTime+0x1>
    2a7a:	e0 92 3d 19 	sts	0x193D, r14	; 0x80193d <xNextTaskUnblockTime+0x2>
    2a7e:	f0 92 3e 19 	sts	0x193E, r15	; 0x80193e <xNextTaskUnblockTime+0x3>
    2a82:	cf 91       	pop	r28
    2a84:	ff 90       	pop	r15
    2a86:	ef 90       	pop	r14
    2a88:	df 90       	pop	r13
    2a8a:	cf 90       	pop	r12
    2a8c:	bf 90       	pop	r11
    2a8e:	af 90       	pop	r10
    2a90:	9f 90       	pop	r9
    2a92:	8f 90       	pop	r8
    2a94:	08 95       	ret

00002a96 <xTaskCreate>:
    2a96:	4f 92       	push	r4
    2a98:	5f 92       	push	r5
    2a9a:	6f 92       	push	r6
    2a9c:	7f 92       	push	r7
    2a9e:	8f 92       	push	r8
    2aa0:	9f 92       	push	r9
    2aa2:	af 92       	push	r10
    2aa4:	bf 92       	push	r11
    2aa6:	cf 92       	push	r12
    2aa8:	df 92       	push	r13
    2aaa:	ef 92       	push	r14
    2aac:	ff 92       	push	r15
    2aae:	0f 93       	push	r16
    2ab0:	cf 93       	push	r28
    2ab2:	df 93       	push	r29
    2ab4:	4c 01       	movw	r8, r24
    2ab6:	6b 01       	movw	r12, r22
    2ab8:	5a 01       	movw	r10, r20
    2aba:	29 01       	movw	r4, r18
    2abc:	ca 01       	movw	r24, r20
    2abe:	0e 94 17 0b 	call	0x162e	; 0x162e <pvPortMalloc>
    2ac2:	3c 01       	movw	r6, r24
    2ac4:	89 2b       	or	r24, r25
    2ac6:	09 f4       	brne	.+2      	; 0x2aca <xTaskCreate+0x34>
    2ac8:	f4 c0       	rjmp	.+488    	; 0x2cb2 <xTaskCreate+0x21c>
    2aca:	80 e3       	ldi	r24, 0x30	; 48
    2acc:	90 e0       	ldi	r25, 0x00	; 0
    2ace:	0e 94 17 0b 	call	0x162e	; 0x162e <pvPortMalloc>
    2ad2:	ec 01       	movw	r28, r24
    2ad4:	89 2b       	or	r24, r25
    2ad6:	99 f0       	breq	.+38     	; 0x2afe <xTaskCreate+0x68>
    2ad8:	7c 8e       	std	Y+28, r7	; 0x1c
    2ada:	6b 8e       	std	Y+27, r6	; 0x1b
    2adc:	a5 01       	movw	r20, r10
    2ade:	65 ea       	ldi	r22, 0xA5	; 165
    2ae0:	70 e0       	ldi	r23, 0x00	; 0
    2ae2:	c3 01       	movw	r24, r6
    2ae4:	0e 94 70 2f 	call	0x5ee0	; 0x5ee0 <memset>
    2ae8:	21 e0       	ldi	r18, 0x01	; 1
    2aea:	a2 1a       	sub	r10, r18
    2aec:	b1 08       	sbc	r11, r1
    2aee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2af0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2af2:	a8 0e       	add	r10, r24
    2af4:	b9 1e       	adc	r11, r25
    2af6:	c1 14       	cp	r12, r1
    2af8:	d1 04       	cpc	r13, r1
    2afa:	29 f4       	brne	.+10     	; 0x2b06 <xTaskCreate+0x70>
    2afc:	20 c0       	rjmp	.+64     	; 0x2b3e <xTaskCreate+0xa8>
    2afe:	c3 01       	movw	r24, r6
    2b00:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <vPortFree>
    2b04:	d6 c0       	rjmp	.+428    	; 0x2cb2 <xTaskCreate+0x21c>
    2b06:	d6 01       	movw	r26, r12
    2b08:	8c 91       	ld	r24, X
    2b0a:	8d 8f       	std	Y+29, r24	; 0x1d
    2b0c:	8c 91       	ld	r24, X
    2b0e:	88 23       	and	r24, r24
    2b10:	a1 f0       	breq	.+40     	; 0x2b3a <xTaskCreate+0xa4>
    2b12:	ae 01       	movw	r20, r28
    2b14:	42 5e       	subi	r20, 0xE2	; 226
    2b16:	5f 4f       	sbci	r21, 0xFF	; 255
    2b18:	f6 01       	movw	r30, r12
    2b1a:	31 96       	adiw	r30, 0x01	; 1
    2b1c:	b8 e0       	ldi	r27, 0x08	; 8
    2b1e:	cb 0e       	add	r12, r27
    2b20:	d1 1c       	adc	r13, r1
    2b22:	cf 01       	movw	r24, r30
    2b24:	21 91       	ld	r18, Z+
    2b26:	da 01       	movw	r26, r20
    2b28:	2d 93       	st	X+, r18
    2b2a:	ad 01       	movw	r20, r26
    2b2c:	dc 01       	movw	r26, r24
    2b2e:	8c 91       	ld	r24, X
    2b30:	88 23       	and	r24, r24
    2b32:	19 f0       	breq	.+6      	; 0x2b3a <xTaskCreate+0xa4>
    2b34:	ec 15       	cp	r30, r12
    2b36:	fd 05       	cpc	r31, r13
    2b38:	a1 f7       	brne	.-24     	; 0x2b22 <xTaskCreate+0x8c>
    2b3a:	1c a2       	std	Y+36, r1	; 0x24
    2b3c:	01 c0       	rjmp	.+2      	; 0x2b40 <xTaskCreate+0xaa>
    2b3e:	1d 8e       	std	Y+29, r1	; 0x1d
    2b40:	04 30       	cpi	r16, 0x04	; 4
    2b42:	08 f0       	brcs	.+2      	; 0x2b46 <xTaskCreate+0xb0>
    2b44:	03 e0       	ldi	r16, 0x03	; 3
    2b46:	0a 8f       	std	Y+26, r16	; 0x1a
    2b48:	0f a3       	std	Y+39, r16	; 0x27
    2b4a:	18 a6       	std	Y+40, r1	; 0x28
    2b4c:	6e 01       	movw	r12, r28
    2b4e:	b2 e0       	ldi	r27, 0x02	; 2
    2b50:	cb 0e       	add	r12, r27
    2b52:	d1 1c       	adc	r13, r1
    2b54:	c6 01       	movw	r24, r12
    2b56:	0e 94 12 0c 	call	0x1824	; 0x1824 <vListInitialiseItem>
    2b5a:	ce 01       	movw	r24, r28
    2b5c:	0e 96       	adiw	r24, 0x0e	; 14
    2b5e:	0e 94 12 0c 	call	0x1824	; 0x1824 <vListInitialiseItem>
    2b62:	db 87       	std	Y+11, r29	; 0x0b
    2b64:	ca 87       	std	Y+10, r28	; 0x0a
    2b66:	84 e0       	ldi	r24, 0x04	; 4
    2b68:	90 e0       	ldi	r25, 0x00	; 0
    2b6a:	a0 e0       	ldi	r26, 0x00	; 0
    2b6c:	b0 e0       	ldi	r27, 0x00	; 0
    2b6e:	80 1b       	sub	r24, r16
    2b70:	91 09       	sbc	r25, r1
    2b72:	a1 09       	sbc	r26, r1
    2b74:	b1 09       	sbc	r27, r1
    2b76:	8e 87       	std	Y+14, r24	; 0x0e
    2b78:	9f 87       	std	Y+15, r25	; 0x0f
    2b7a:	a8 8b       	std	Y+16, r26	; 0x10
    2b7c:	b9 8b       	std	Y+17, r27	; 0x11
    2b7e:	df 8b       	std	Y+23, r29	; 0x17
    2b80:	ce 8b       	std	Y+22, r28	; 0x16
    2b82:	1a a6       	std	Y+42, r1	; 0x2a
    2b84:	19 a6       	std	Y+41, r1	; 0x29
    2b86:	1b a6       	std	Y+43, r1	; 0x2b
    2b88:	1c a6       	std	Y+44, r1	; 0x2c
    2b8a:	1d a6       	std	Y+45, r1	; 0x2d
    2b8c:	1e a6       	std	Y+46, r1	; 0x2e
    2b8e:	1f a6       	std	Y+47, r1	; 0x2f
    2b90:	a2 01       	movw	r20, r4
    2b92:	b4 01       	movw	r22, r8
    2b94:	c5 01       	movw	r24, r10
    2b96:	0e 94 9b 0c 	call	0x1936	; 0x1936 <pxPortInitialiseStack>
    2b9a:	99 83       	std	Y+1, r25	; 0x01
    2b9c:	88 83       	st	Y, r24
    2b9e:	e1 14       	cp	r14, r1
    2ba0:	f1 04       	cpc	r15, r1
    2ba2:	19 f0       	breq	.+6      	; 0x2baa <xTaskCreate+0x114>
    2ba4:	f7 01       	movw	r30, r14
    2ba6:	d1 83       	std	Z+1, r29	; 0x01
    2ba8:	c0 83       	st	Z, r28
    2baa:	0f b6       	in	r0, 0x3f	; 63
    2bac:	f8 94       	cli
    2bae:	0f 92       	push	r0
    2bb0:	80 91 49 19 	lds	r24, 0x1949	; 0x801949 <uxCurrentNumberOfTasks>
    2bb4:	8f 5f       	subi	r24, 0xFF	; 255
    2bb6:	80 93 49 19 	sts	0x1949, r24	; 0x801949 <uxCurrentNumberOfTasks>
    2bba:	80 91 b2 19 	lds	r24, 0x19B2	; 0x8019b2 <pxCurrentTCB>
    2bbe:	90 91 b3 19 	lds	r25, 0x19B3	; 0x8019b3 <pxCurrentTCB+0x1>
    2bc2:	89 2b       	or	r24, r25
    2bc4:	d1 f5       	brne	.+116    	; 0x2c3a <xTaskCreate+0x1a4>
    2bc6:	d0 93 b3 19 	sts	0x19B3, r29	; 0x8019b3 <pxCurrentTCB+0x1>
    2bca:	c0 93 b2 19 	sts	0x19B2, r28	; 0x8019b2 <pxCurrentTCB>
    2bce:	80 91 49 19 	lds	r24, 0x1949	; 0x801949 <uxCurrentNumberOfTasks>
    2bd2:	81 30       	cpi	r24, 0x01	; 1
    2bd4:	09 f0       	breq	.+2      	; 0x2bd8 <xTaskCreate+0x142>
    2bd6:	41 c0       	rjmp	.+130    	; 0x2c5a <xTaskCreate+0x1c4>
    2bd8:	86 e8       	ldi	r24, 0x86	; 134
    2bda:	99 e1       	ldi	r25, 0x19	; 25
    2bdc:	0e 94 01 0c 	call	0x1802	; 0x1802 <vListInitialise>
    2be0:	81 e9       	ldi	r24, 0x91	; 145
    2be2:	99 e1       	ldi	r25, 0x19	; 25
    2be4:	0e 94 01 0c 	call	0x1802	; 0x1802 <vListInitialise>
    2be8:	8c e9       	ldi	r24, 0x9C	; 156
    2bea:	99 e1       	ldi	r25, 0x19	; 25
    2bec:	0e 94 01 0c 	call	0x1802	; 0x1802 <vListInitialise>
    2bf0:	87 ea       	ldi	r24, 0xA7	; 167
    2bf2:	99 e1       	ldi	r25, 0x19	; 25
    2bf4:	0e 94 01 0c 	call	0x1802	; 0x1802 <vListInitialise>
    2bf8:	8b e7       	ldi	r24, 0x7B	; 123
    2bfa:	99 e1       	ldi	r25, 0x19	; 25
    2bfc:	0e 94 01 0c 	call	0x1802	; 0x1802 <vListInitialise>
    2c00:	80 e7       	ldi	r24, 0x70	; 112
    2c02:	99 e1       	ldi	r25, 0x19	; 25
    2c04:	0e 94 01 0c 	call	0x1802	; 0x1802 <vListInitialise>
    2c08:	81 e6       	ldi	r24, 0x61	; 97
    2c0a:	99 e1       	ldi	r25, 0x19	; 25
    2c0c:	0e 94 01 0c 	call	0x1802	; 0x1802 <vListInitialise>
    2c10:	86 e5       	ldi	r24, 0x56	; 86
    2c12:	99 e1       	ldi	r25, 0x19	; 25
    2c14:	0e 94 01 0c 	call	0x1802	; 0x1802 <vListInitialise>
    2c18:	8a e4       	ldi	r24, 0x4A	; 74
    2c1a:	99 e1       	ldi	r25, 0x19	; 25
    2c1c:	0e 94 01 0c 	call	0x1802	; 0x1802 <vListInitialise>
    2c20:	8b e7       	ldi	r24, 0x7B	; 123
    2c22:	99 e1       	ldi	r25, 0x19	; 25
    2c24:	90 93 6f 19 	sts	0x196F, r25	; 0x80196f <pxDelayedTaskList+0x1>
    2c28:	80 93 6e 19 	sts	0x196E, r24	; 0x80196e <pxDelayedTaskList>
    2c2c:	80 e7       	ldi	r24, 0x70	; 112
    2c2e:	99 e1       	ldi	r25, 0x19	; 25
    2c30:	90 93 6d 19 	sts	0x196D, r25	; 0x80196d <pxOverflowDelayedTaskList+0x1>
    2c34:	80 93 6c 19 	sts	0x196C, r24	; 0x80196c <pxOverflowDelayedTaskList>
    2c38:	10 c0       	rjmp	.+32     	; 0x2c5a <xTaskCreate+0x1c4>
    2c3a:	80 91 43 19 	lds	r24, 0x1943	; 0x801943 <xSchedulerRunning>
    2c3e:	81 11       	cpse	r24, r1
    2c40:	0c c0       	rjmp	.+24     	; 0x2c5a <xTaskCreate+0x1c4>
    2c42:	e0 91 b2 19 	lds	r30, 0x19B2	; 0x8019b2 <pxCurrentTCB>
    2c46:	f0 91 b3 19 	lds	r31, 0x19B3	; 0x8019b3 <pxCurrentTCB+0x1>
    2c4a:	92 8d       	ldd	r25, Z+26	; 0x1a
    2c4c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2c4e:	89 17       	cp	r24, r25
    2c50:	20 f0       	brcs	.+8      	; 0x2c5a <xTaskCreate+0x1c4>
    2c52:	d0 93 b3 19 	sts	0x19B3, r29	; 0x8019b3 <pxCurrentTCB+0x1>
    2c56:	c0 93 b2 19 	sts	0x19B2, r28	; 0x8019b2 <pxCurrentTCB>
    2c5a:	80 91 3f 19 	lds	r24, 0x193F	; 0x80193f <uxTaskNumber>
    2c5e:	8f 5f       	subi	r24, 0xFF	; 255
    2c60:	80 93 3f 19 	sts	0x193F, r24	; 0x80193f <uxTaskNumber>
    2c64:	8d a3       	std	Y+37, r24	; 0x25
    2c66:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2c68:	90 91 44 19 	lds	r25, 0x1944	; 0x801944 <uxTopReadyPriority>
    2c6c:	98 17       	cp	r25, r24
    2c6e:	10 f4       	brcc	.+4      	; 0x2c74 <xTaskCreate+0x1de>
    2c70:	80 93 44 19 	sts	0x1944, r24	; 0x801944 <uxTopReadyPriority>
    2c74:	fb e0       	ldi	r31, 0x0B	; 11
    2c76:	8f 9f       	mul	r24, r31
    2c78:	c0 01       	movw	r24, r0
    2c7a:	11 24       	eor	r1, r1
    2c7c:	b6 01       	movw	r22, r12
    2c7e:	8a 57       	subi	r24, 0x7A	; 122
    2c80:	96 4e       	sbci	r25, 0xE6	; 230
    2c82:	0e 94 16 0c 	call	0x182c	; 0x182c <vListInsertEnd>
    2c86:	0f 90       	pop	r0
    2c88:	0f be       	out	0x3f, r0	; 63
    2c8a:	80 91 43 19 	lds	r24, 0x1943	; 0x801943 <xSchedulerRunning>
    2c8e:	88 23       	and	r24, r24
    2c90:	61 f0       	breq	.+24     	; 0x2caa <xTaskCreate+0x214>
    2c92:	e0 91 b2 19 	lds	r30, 0x19B2	; 0x8019b2 <pxCurrentTCB>
    2c96:	f0 91 b3 19 	lds	r31, 0x19B3	; 0x8019b3 <pxCurrentTCB+0x1>
    2c9a:	92 8d       	ldd	r25, Z+26	; 0x1a
    2c9c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2c9e:	98 17       	cp	r25, r24
    2ca0:	30 f4       	brcc	.+12     	; 0x2cae <xTaskCreate+0x218>
    2ca2:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <vPortYield>
    2ca6:	81 e0       	ldi	r24, 0x01	; 1
    2ca8:	05 c0       	rjmp	.+10     	; 0x2cb4 <xTaskCreate+0x21e>
    2caa:	81 e0       	ldi	r24, 0x01	; 1
    2cac:	03 c0       	rjmp	.+6      	; 0x2cb4 <xTaskCreate+0x21e>
    2cae:	81 e0       	ldi	r24, 0x01	; 1
    2cb0:	01 c0       	rjmp	.+2      	; 0x2cb4 <xTaskCreate+0x21e>
    2cb2:	8f ef       	ldi	r24, 0xFF	; 255
    2cb4:	df 91       	pop	r29
    2cb6:	cf 91       	pop	r28
    2cb8:	0f 91       	pop	r16
    2cba:	ff 90       	pop	r15
    2cbc:	ef 90       	pop	r14
    2cbe:	df 90       	pop	r13
    2cc0:	cf 90       	pop	r12
    2cc2:	bf 90       	pop	r11
    2cc4:	af 90       	pop	r10
    2cc6:	9f 90       	pop	r9
    2cc8:	8f 90       	pop	r8
    2cca:	7f 90       	pop	r7
    2ccc:	6f 90       	pop	r6
    2cce:	5f 90       	pop	r5
    2cd0:	4f 90       	pop	r4
    2cd2:	08 95       	ret

00002cd4 <vTaskStartScheduler>:
    2cd4:	ef 92       	push	r14
    2cd6:	ff 92       	push	r15
    2cd8:	0f 93       	push	r16
    2cda:	0f 2e       	mov	r0, r31
    2cdc:	f9 e3       	ldi	r31, 0x39	; 57
    2cde:	ef 2e       	mov	r14, r31
    2ce0:	f9 e1       	ldi	r31, 0x19	; 25
    2ce2:	ff 2e       	mov	r15, r31
    2ce4:	f0 2d       	mov	r31, r0
    2ce6:	00 e0       	ldi	r16, 0x00	; 0
    2ce8:	20 e0       	ldi	r18, 0x00	; 0
    2cea:	30 e0       	ldi	r19, 0x00	; 0
    2cec:	40 ec       	ldi	r20, 0xC0	; 192
    2cee:	50 e0       	ldi	r21, 0x00	; 0
    2cf0:	63 e6       	ldi	r22, 0x63	; 99
    2cf2:	75 e0       	ldi	r23, 0x05	; 5
    2cf4:	8d ec       	ldi	r24, 0xCD	; 205
    2cf6:	90 e0       	ldi	r25, 0x00	; 0
    2cf8:	ce de       	rcall	.-612    	; 0x2a96 <xTaskCreate>
    2cfa:	81 30       	cpi	r24, 0x01	; 1
    2cfc:	19 f5       	brne	.+70     	; 0x2d44 <vTaskStartScheduler+0x70>
    2cfe:	cc d6       	rcall	.+3480   	; 0x3a98 <xTimerCreateTimerTask>
    2d00:	81 30       	cpi	r24, 0x01	; 1
    2d02:	01 f5       	brne	.+64     	; 0x2d44 <vTaskStartScheduler+0x70>
    2d04:	f8 94       	cli
    2d06:	8f ef       	ldi	r24, 0xFF	; 255
    2d08:	9f ef       	ldi	r25, 0xFF	; 255
    2d0a:	dc 01       	movw	r26, r24
    2d0c:	80 93 3b 19 	sts	0x193B, r24	; 0x80193b <xNextTaskUnblockTime>
    2d10:	90 93 3c 19 	sts	0x193C, r25	; 0x80193c <xNextTaskUnblockTime+0x1>
    2d14:	a0 93 3d 19 	sts	0x193D, r26	; 0x80193d <xNextTaskUnblockTime+0x2>
    2d18:	b0 93 3e 19 	sts	0x193E, r27	; 0x80193e <xNextTaskUnblockTime+0x3>
    2d1c:	81 e0       	ldi	r24, 0x01	; 1
    2d1e:	80 93 43 19 	sts	0x1943, r24	; 0x801943 <xSchedulerRunning>
    2d22:	10 92 45 19 	sts	0x1945, r1	; 0x801945 <xTickCount>
    2d26:	10 92 46 19 	sts	0x1946, r1	; 0x801946 <xTickCount+0x1>
    2d2a:	10 92 47 19 	sts	0x1947, r1	; 0x801947 <xTickCount+0x2>
    2d2e:	10 92 48 19 	sts	0x1948, r1	; 0x801948 <xTickCount+0x3>
    2d32:	e0 91 b2 19 	lds	r30, 0x19B2	; 0x8019b2 <pxCurrentTCB>
    2d36:	f0 91 b3 19 	lds	r31, 0x19B3	; 0x8019b3 <pxCurrentTCB+0x1>
    2d3a:	81 a5       	ldd	r24, Z+41	; 0x29
    2d3c:	0e 94 4e 09 	call	0x129c	; 0x129c <task_switch_in>
    2d40:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <xPortStartScheduler>
    2d44:	0f 91       	pop	r16
    2d46:	ff 90       	pop	r15
    2d48:	ef 90       	pop	r14
    2d4a:	08 95       	ret

00002d4c <vTaskSuspendAll>:
    2d4c:	80 91 38 19 	lds	r24, 0x1938	; 0x801938 <uxSchedulerSuspended>
    2d50:	8f 5f       	subi	r24, 0xFF	; 255
    2d52:	80 93 38 19 	sts	0x1938, r24	; 0x801938 <uxSchedulerSuspended>
    2d56:	08 95       	ret

00002d58 <xTaskGetTickCount>:
    2d58:	0f b6       	in	r0, 0x3f	; 63
    2d5a:	f8 94       	cli
    2d5c:	0f 92       	push	r0
    2d5e:	60 91 45 19 	lds	r22, 0x1945	; 0x801945 <xTickCount>
    2d62:	70 91 46 19 	lds	r23, 0x1946	; 0x801946 <xTickCount+0x1>
    2d66:	80 91 47 19 	lds	r24, 0x1947	; 0x801947 <xTickCount+0x2>
    2d6a:	90 91 48 19 	lds	r25, 0x1948	; 0x801948 <xTickCount+0x3>
    2d6e:	0f 90       	pop	r0
    2d70:	0f be       	out	0x3f, r0	; 63
    2d72:	08 95       	ret

00002d74 <xTaskIncrementTick>:
    2d74:	9f 92       	push	r9
    2d76:	af 92       	push	r10
    2d78:	bf 92       	push	r11
    2d7a:	cf 92       	push	r12
    2d7c:	df 92       	push	r13
    2d7e:	ef 92       	push	r14
    2d80:	ff 92       	push	r15
    2d82:	0f 93       	push	r16
    2d84:	1f 93       	push	r17
    2d86:	cf 93       	push	r28
    2d88:	df 93       	push	r29
    2d8a:	80 91 38 19 	lds	r24, 0x1938	; 0x801938 <uxSchedulerSuspended>
    2d8e:	81 11       	cpse	r24, r1
    2d90:	ad c0       	rjmp	.+346    	; 0x2eec <xTaskIncrementTick+0x178>
    2d92:	c0 90 45 19 	lds	r12, 0x1945	; 0x801945 <xTickCount>
    2d96:	d0 90 46 19 	lds	r13, 0x1946	; 0x801946 <xTickCount+0x1>
    2d9a:	e0 90 47 19 	lds	r14, 0x1947	; 0x801947 <xTickCount+0x2>
    2d9e:	f0 90 48 19 	lds	r15, 0x1948	; 0x801948 <xTickCount+0x3>
    2da2:	8f ef       	ldi	r24, 0xFF	; 255
    2da4:	c8 1a       	sub	r12, r24
    2da6:	d8 0a       	sbc	r13, r24
    2da8:	e8 0a       	sbc	r14, r24
    2daa:	f8 0a       	sbc	r15, r24
    2dac:	c0 92 45 19 	sts	0x1945, r12	; 0x801945 <xTickCount>
    2db0:	d0 92 46 19 	sts	0x1946, r13	; 0x801946 <xTickCount+0x1>
    2db4:	e0 92 47 19 	sts	0x1947, r14	; 0x801947 <xTickCount+0x2>
    2db8:	f0 92 48 19 	sts	0x1948, r15	; 0x801948 <xTickCount+0x3>
    2dbc:	c1 14       	cp	r12, r1
    2dbe:	d1 04       	cpc	r13, r1
    2dc0:	e1 04       	cpc	r14, r1
    2dc2:	f1 04       	cpc	r15, r1
    2dc4:	b1 f4       	brne	.+44     	; 0x2df2 <xTaskIncrementTick+0x7e>
    2dc6:	80 91 6e 19 	lds	r24, 0x196E	; 0x80196e <pxDelayedTaskList>
    2dca:	90 91 6f 19 	lds	r25, 0x196F	; 0x80196f <pxDelayedTaskList+0x1>
    2dce:	20 91 6c 19 	lds	r18, 0x196C	; 0x80196c <pxOverflowDelayedTaskList>
    2dd2:	30 91 6d 19 	lds	r19, 0x196D	; 0x80196d <pxOverflowDelayedTaskList+0x1>
    2dd6:	30 93 6f 19 	sts	0x196F, r19	; 0x80196f <pxDelayedTaskList+0x1>
    2dda:	20 93 6e 19 	sts	0x196E, r18	; 0x80196e <pxDelayedTaskList>
    2dde:	90 93 6d 19 	sts	0x196D, r25	; 0x80196d <pxOverflowDelayedTaskList+0x1>
    2de2:	80 93 6c 19 	sts	0x196C, r24	; 0x80196c <pxOverflowDelayedTaskList>
    2de6:	80 91 40 19 	lds	r24, 0x1940	; 0x801940 <xNumOfOverflows>
    2dea:	8f 5f       	subi	r24, 0xFF	; 255
    2dec:	80 93 40 19 	sts	0x1940, r24	; 0x801940 <xNumOfOverflows>
    2df0:	b1 dd       	rcall	.-1182   	; 0x2954 <prvResetNextTaskUnblockTime>
    2df2:	80 91 3b 19 	lds	r24, 0x193B	; 0x80193b <xNextTaskUnblockTime>
    2df6:	90 91 3c 19 	lds	r25, 0x193C	; 0x80193c <xNextTaskUnblockTime+0x1>
    2dfa:	a0 91 3d 19 	lds	r26, 0x193D	; 0x80193d <xNextTaskUnblockTime+0x2>
    2dfe:	b0 91 3e 19 	lds	r27, 0x193E	; 0x80193e <xNextTaskUnblockTime+0x3>
    2e02:	c8 16       	cp	r12, r24
    2e04:	d9 06       	cpc	r13, r25
    2e06:	ea 06       	cpc	r14, r26
    2e08:	fb 06       	cpc	r15, r27
    2e0a:	10 f4       	brcc	.+4      	; 0x2e10 <xTaskIncrementTick+0x9c>
    2e0c:	b1 2c       	mov	r11, r1
    2e0e:	5d c0       	rjmp	.+186    	; 0x2eca <xTaskIncrementTick+0x156>
    2e10:	b1 2c       	mov	r11, r1
    2e12:	0f 2e       	mov	r0, r31
    2e14:	fb e0       	ldi	r31, 0x0B	; 11
    2e16:	af 2e       	mov	r10, r31
    2e18:	f0 2d       	mov	r31, r0
    2e1a:	99 24       	eor	r9, r9
    2e1c:	93 94       	inc	r9
    2e1e:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <pxDelayedTaskList>
    2e22:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <pxDelayedTaskList+0x1>
    2e26:	80 81       	ld	r24, Z
    2e28:	81 11       	cpse	r24, r1
    2e2a:	0c c0       	rjmp	.+24     	; 0x2e44 <xTaskIncrementTick+0xd0>
    2e2c:	8f ef       	ldi	r24, 0xFF	; 255
    2e2e:	9f ef       	ldi	r25, 0xFF	; 255
    2e30:	dc 01       	movw	r26, r24
    2e32:	80 93 3b 19 	sts	0x193B, r24	; 0x80193b <xNextTaskUnblockTime>
    2e36:	90 93 3c 19 	sts	0x193C, r25	; 0x80193c <xNextTaskUnblockTime+0x1>
    2e3a:	a0 93 3d 19 	sts	0x193D, r26	; 0x80193d <xNextTaskUnblockTime+0x2>
    2e3e:	b0 93 3e 19 	sts	0x193E, r27	; 0x80193e <xNextTaskUnblockTime+0x3>
    2e42:	43 c0       	rjmp	.+134    	; 0x2eca <xTaskIncrementTick+0x156>
    2e44:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <pxDelayedTaskList>
    2e48:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <pxDelayedTaskList+0x1>
    2e4c:	07 80       	ldd	r0, Z+7	; 0x07
    2e4e:	f0 85       	ldd	r31, Z+8	; 0x08
    2e50:	e0 2d       	mov	r30, r0
    2e52:	c0 85       	ldd	r28, Z+8	; 0x08
    2e54:	d1 85       	ldd	r29, Z+9	; 0x09
    2e56:	8a 81       	ldd	r24, Y+2	; 0x02
    2e58:	9b 81       	ldd	r25, Y+3	; 0x03
    2e5a:	ac 81       	ldd	r26, Y+4	; 0x04
    2e5c:	bd 81       	ldd	r27, Y+5	; 0x05
    2e5e:	c8 16       	cp	r12, r24
    2e60:	d9 06       	cpc	r13, r25
    2e62:	ea 06       	cpc	r14, r26
    2e64:	fb 06       	cpc	r15, r27
    2e66:	48 f4       	brcc	.+18     	; 0x2e7a <xTaskIncrementTick+0x106>
    2e68:	80 93 3b 19 	sts	0x193B, r24	; 0x80193b <xNextTaskUnblockTime>
    2e6c:	90 93 3c 19 	sts	0x193C, r25	; 0x80193c <xNextTaskUnblockTime+0x1>
    2e70:	a0 93 3d 19 	sts	0x193D, r26	; 0x80193d <xNextTaskUnblockTime+0x2>
    2e74:	b0 93 3e 19 	sts	0x193E, r27	; 0x80193e <xNextTaskUnblockTime+0x3>
    2e78:	28 c0       	rjmp	.+80     	; 0x2eca <xTaskIncrementTick+0x156>
    2e7a:	8e 01       	movw	r16, r28
    2e7c:	0e 5f       	subi	r16, 0xFE	; 254
    2e7e:	1f 4f       	sbci	r17, 0xFF	; 255
    2e80:	c8 01       	movw	r24, r16
    2e82:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <uxListRemove>
    2e86:	88 8d       	ldd	r24, Y+24	; 0x18
    2e88:	99 8d       	ldd	r25, Y+25	; 0x19
    2e8a:	89 2b       	or	r24, r25
    2e8c:	21 f0       	breq	.+8      	; 0x2e96 <xTaskIncrementTick+0x122>
    2e8e:	ce 01       	movw	r24, r28
    2e90:	0e 96       	adiw	r24, 0x0e	; 14
    2e92:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <uxListRemove>
    2e96:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2e98:	90 91 44 19 	lds	r25, 0x1944	; 0x801944 <uxTopReadyPriority>
    2e9c:	98 17       	cp	r25, r24
    2e9e:	10 f4       	brcc	.+4      	; 0x2ea4 <xTaskIncrementTick+0x130>
    2ea0:	80 93 44 19 	sts	0x1944, r24	; 0x801944 <uxTopReadyPriority>
    2ea4:	a8 9e       	mul	r10, r24
    2ea6:	c0 01       	movw	r24, r0
    2ea8:	11 24       	eor	r1, r1
    2eaa:	b8 01       	movw	r22, r16
    2eac:	8a 57       	subi	r24, 0x7A	; 122
    2eae:	96 4e       	sbci	r25, 0xE6	; 230
    2eb0:	0e 94 16 0c 	call	0x182c	; 0x182c <vListInsertEnd>
    2eb4:	e0 91 b2 19 	lds	r30, 0x19B2	; 0x8019b2 <pxCurrentTCB>
    2eb8:	f0 91 b3 19 	lds	r31, 0x19B3	; 0x8019b3 <pxCurrentTCB+0x1>
    2ebc:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2ebe:	82 8d       	ldd	r24, Z+26	; 0x1a
    2ec0:	98 17       	cp	r25, r24
    2ec2:	08 f4       	brcc	.+2      	; 0x2ec6 <xTaskIncrementTick+0x152>
    2ec4:	ac cf       	rjmp	.-168    	; 0x2e1e <xTaskIncrementTick+0xaa>
    2ec6:	b9 2c       	mov	r11, r9
    2ec8:	aa cf       	rjmp	.-172    	; 0x2e1e <xTaskIncrementTick+0xaa>
    2eca:	e0 91 b2 19 	lds	r30, 0x19B2	; 0x8019b2 <pxCurrentTCB>
    2ece:	f0 91 b3 19 	lds	r31, 0x19B3	; 0x8019b3 <pxCurrentTCB+0x1>
    2ed2:	e2 8d       	ldd	r30, Z+26	; 0x1a
    2ed4:	8b e0       	ldi	r24, 0x0B	; 11
    2ed6:	e8 9f       	mul	r30, r24
    2ed8:	f0 01       	movw	r30, r0
    2eda:	11 24       	eor	r1, r1
    2edc:	ea 57       	subi	r30, 0x7A	; 122
    2ede:	f6 4e       	sbci	r31, 0xE6	; 230
    2ee0:	80 81       	ld	r24, Z
    2ee2:	82 30       	cpi	r24, 0x02	; 2
    2ee4:	48 f0       	brcs	.+18     	; 0x2ef8 <xTaskIncrementTick+0x184>
    2ee6:	bb 24       	eor	r11, r11
    2ee8:	b3 94       	inc	r11
    2eea:	06 c0       	rjmp	.+12     	; 0x2ef8 <xTaskIncrementTick+0x184>
    2eec:	80 91 42 19 	lds	r24, 0x1942	; 0x801942 <uxPendedTicks>
    2ef0:	8f 5f       	subi	r24, 0xFF	; 255
    2ef2:	80 93 42 19 	sts	0x1942, r24	; 0x801942 <uxPendedTicks>
    2ef6:	b1 2c       	mov	r11, r1
    2ef8:	80 91 41 19 	lds	r24, 0x1941	; 0x801941 <xYieldPending>
    2efc:	88 23       	and	r24, r24
    2efe:	11 f0       	breq	.+4      	; 0x2f04 <xTaskIncrementTick+0x190>
    2f00:	bb 24       	eor	r11, r11
    2f02:	b3 94       	inc	r11
    2f04:	8b 2d       	mov	r24, r11
    2f06:	df 91       	pop	r29
    2f08:	cf 91       	pop	r28
    2f0a:	1f 91       	pop	r17
    2f0c:	0f 91       	pop	r16
    2f0e:	ff 90       	pop	r15
    2f10:	ef 90       	pop	r14
    2f12:	df 90       	pop	r13
    2f14:	cf 90       	pop	r12
    2f16:	bf 90       	pop	r11
    2f18:	af 90       	pop	r10
    2f1a:	9f 90       	pop	r9
    2f1c:	08 95       	ret

00002f1e <xTaskResumeAll>:
    2f1e:	cf 92       	push	r12
    2f20:	df 92       	push	r13
    2f22:	ef 92       	push	r14
    2f24:	ff 92       	push	r15
    2f26:	0f 93       	push	r16
    2f28:	1f 93       	push	r17
    2f2a:	cf 93       	push	r28
    2f2c:	df 93       	push	r29
    2f2e:	0f b6       	in	r0, 0x3f	; 63
    2f30:	f8 94       	cli
    2f32:	0f 92       	push	r0
    2f34:	80 91 38 19 	lds	r24, 0x1938	; 0x801938 <uxSchedulerSuspended>
    2f38:	81 50       	subi	r24, 0x01	; 1
    2f3a:	80 93 38 19 	sts	0x1938, r24	; 0x801938 <uxSchedulerSuspended>
    2f3e:	80 91 38 19 	lds	r24, 0x1938	; 0x801938 <uxSchedulerSuspended>
    2f42:	81 11       	cpse	r24, r1
    2f44:	5a c0       	rjmp	.+180    	; 0x2ffa <xTaskResumeAll+0xdc>
    2f46:	80 91 49 19 	lds	r24, 0x1949	; 0x801949 <uxCurrentNumberOfTasks>
    2f4a:	81 11       	cpse	r24, r1
    2f4c:	2c c0       	rjmp	.+88     	; 0x2fa6 <xTaskResumeAll+0x88>
    2f4e:	58 c0       	rjmp	.+176    	; 0x3000 <xTaskResumeAll+0xe2>
    2f50:	d7 01       	movw	r26, r14
    2f52:	17 96       	adiw	r26, 0x07	; 7
    2f54:	ed 91       	ld	r30, X+
    2f56:	fc 91       	ld	r31, X
    2f58:	18 97       	sbiw	r26, 0x08	; 8
    2f5a:	c0 85       	ldd	r28, Z+8	; 0x08
    2f5c:	d1 85       	ldd	r29, Z+9	; 0x09
    2f5e:	ce 01       	movw	r24, r28
    2f60:	0e 96       	adiw	r24, 0x0e	; 14
    2f62:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <uxListRemove>
    2f66:	8e 01       	movw	r16, r28
    2f68:	0e 5f       	subi	r16, 0xFE	; 254
    2f6a:	1f 4f       	sbci	r17, 0xFF	; 255
    2f6c:	c8 01       	movw	r24, r16
    2f6e:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <uxListRemove>
    2f72:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2f74:	90 91 44 19 	lds	r25, 0x1944	; 0x801944 <uxTopReadyPriority>
    2f78:	98 17       	cp	r25, r24
    2f7a:	10 f4       	brcc	.+4      	; 0x2f80 <xTaskResumeAll+0x62>
    2f7c:	80 93 44 19 	sts	0x1944, r24	; 0x801944 <uxTopReadyPriority>
    2f80:	d8 9e       	mul	r13, r24
    2f82:	c0 01       	movw	r24, r0
    2f84:	11 24       	eor	r1, r1
    2f86:	b8 01       	movw	r22, r16
    2f88:	8a 57       	subi	r24, 0x7A	; 122
    2f8a:	96 4e       	sbci	r25, 0xE6	; 230
    2f8c:	0e 94 16 0c 	call	0x182c	; 0x182c <vListInsertEnd>
    2f90:	e0 91 b2 19 	lds	r30, 0x19B2	; 0x8019b2 <pxCurrentTCB>
    2f94:	f0 91 b3 19 	lds	r31, 0x19B3	; 0x8019b3 <pxCurrentTCB+0x1>
    2f98:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2f9a:	82 8d       	ldd	r24, Z+26	; 0x1a
    2f9c:	98 17       	cp	r25, r24
    2f9e:	88 f0       	brcs	.+34     	; 0x2fc2 <xTaskResumeAll+0xa4>
    2fa0:	c0 92 41 19 	sts	0x1941, r12	; 0x801941 <xYieldPending>
    2fa4:	0e c0       	rjmp	.+28     	; 0x2fc2 <xTaskResumeAll+0xa4>
    2fa6:	c0 e0       	ldi	r28, 0x00	; 0
    2fa8:	d0 e0       	ldi	r29, 0x00	; 0
    2faa:	0f 2e       	mov	r0, r31
    2fac:	f1 e6       	ldi	r31, 0x61	; 97
    2fae:	ef 2e       	mov	r14, r31
    2fb0:	f9 e1       	ldi	r31, 0x19	; 25
    2fb2:	ff 2e       	mov	r15, r31
    2fb4:	f0 2d       	mov	r31, r0
    2fb6:	0f 2e       	mov	r0, r31
    2fb8:	fb e0       	ldi	r31, 0x0B	; 11
    2fba:	df 2e       	mov	r13, r31
    2fbc:	f0 2d       	mov	r31, r0
    2fbe:	cc 24       	eor	r12, r12
    2fc0:	c3 94       	inc	r12
    2fc2:	f7 01       	movw	r30, r14
    2fc4:	80 81       	ld	r24, Z
    2fc6:	81 11       	cpse	r24, r1
    2fc8:	c3 cf       	rjmp	.-122    	; 0x2f50 <xTaskResumeAll+0x32>
    2fca:	cd 2b       	or	r28, r29
    2fcc:	09 f0       	breq	.+2      	; 0x2fd0 <xTaskResumeAll+0xb2>
    2fce:	c2 dc       	rcall	.-1660   	; 0x2954 <prvResetNextTaskUnblockTime>
    2fd0:	c0 91 42 19 	lds	r28, 0x1942	; 0x801942 <uxPendedTicks>
    2fd4:	cc 23       	and	r28, r28
    2fd6:	49 f0       	breq	.+18     	; 0x2fea <xTaskResumeAll+0xcc>
    2fd8:	d1 e0       	ldi	r29, 0x01	; 1
    2fda:	cc de       	rcall	.-616    	; 0x2d74 <xTaskIncrementTick>
    2fdc:	81 11       	cpse	r24, r1
    2fde:	d0 93 41 19 	sts	0x1941, r29	; 0x801941 <xYieldPending>
    2fe2:	c1 50       	subi	r28, 0x01	; 1
    2fe4:	d1 f7       	brne	.-12     	; 0x2fda <xTaskResumeAll+0xbc>
    2fe6:	10 92 42 19 	sts	0x1942, r1	; 0x801942 <uxPendedTicks>
    2fea:	80 91 41 19 	lds	r24, 0x1941	; 0x801941 <xYieldPending>
    2fee:	88 23       	and	r24, r24
    2ff0:	31 f0       	breq	.+12     	; 0x2ffe <xTaskResumeAll+0xe0>
    2ff2:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <vPortYield>
    2ff6:	81 e0       	ldi	r24, 0x01	; 1
    2ff8:	03 c0       	rjmp	.+6      	; 0x3000 <xTaskResumeAll+0xe2>
    2ffa:	80 e0       	ldi	r24, 0x00	; 0
    2ffc:	01 c0       	rjmp	.+2      	; 0x3000 <xTaskResumeAll+0xe2>
    2ffe:	80 e0       	ldi	r24, 0x00	; 0
    3000:	0f 90       	pop	r0
    3002:	0f be       	out	0x3f, r0	; 63
    3004:	df 91       	pop	r29
    3006:	cf 91       	pop	r28
    3008:	1f 91       	pop	r17
    300a:	0f 91       	pop	r16
    300c:	ff 90       	pop	r15
    300e:	ef 90       	pop	r14
    3010:	df 90       	pop	r13
    3012:	cf 90       	pop	r12
    3014:	08 95       	ret

00003016 <vTaskDelay>:
    3016:	cf 92       	push	r12
    3018:	df 92       	push	r13
    301a:	ef 92       	push	r14
    301c:	ff 92       	push	r15
    301e:	6b 01       	movw	r12, r22
    3020:	7c 01       	movw	r14, r24
    3022:	67 2b       	or	r22, r23
    3024:	68 2b       	or	r22, r24
    3026:	69 2b       	or	r22, r25
    3028:	41 f0       	breq	.+16     	; 0x303a <vTaskDelay+0x24>
    302a:	90 de       	rcall	.-736    	; 0x2d4c <vTaskSuspendAll>
    302c:	40 e0       	ldi	r20, 0x00	; 0
    302e:	c7 01       	movw	r24, r14
    3030:	b6 01       	movw	r22, r12
    3032:	ba dc       	rcall	.-1676   	; 0x29a8 <prvAddCurrentTaskToDelayedList>
    3034:	74 df       	rcall	.-280    	; 0x2f1e <xTaskResumeAll>
    3036:	81 11       	cpse	r24, r1
    3038:	02 c0       	rjmp	.+4      	; 0x303e <vTaskDelay+0x28>
    303a:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <vPortYield>
    303e:	ff 90       	pop	r15
    3040:	ef 90       	pop	r14
    3042:	df 90       	pop	r13
    3044:	cf 90       	pop	r12
    3046:	08 95       	ret

00003048 <vTaskSwitchContext>:
    3048:	80 91 38 19 	lds	r24, 0x1938	; 0x801938 <uxSchedulerSuspended>
    304c:	88 23       	and	r24, r24
    304e:	21 f0       	breq	.+8      	; 0x3058 <vTaskSwitchContext+0x10>
    3050:	81 e0       	ldi	r24, 0x01	; 1
    3052:	80 93 41 19 	sts	0x1941, r24	; 0x801941 <xYieldPending>
    3056:	08 95       	ret
    3058:	10 92 41 19 	sts	0x1941, r1	; 0x801941 <xYieldPending>
    305c:	e0 91 b2 19 	lds	r30, 0x19B2	; 0x8019b2 <pxCurrentTCB>
    3060:	f0 91 b3 19 	lds	r31, 0x19B3	; 0x8019b3 <pxCurrentTCB+0x1>
    3064:	81 a5       	ldd	r24, Z+41	; 0x29
    3066:	0e 94 58 09 	call	0x12b0	; 0x12b0 <task_switch_out>
    306a:	a0 91 b2 19 	lds	r26, 0x19B2	; 0x8019b2 <pxCurrentTCB>
    306e:	b0 91 b3 19 	lds	r27, 0x19B3	; 0x8019b3 <pxCurrentTCB+0x1>
    3072:	e0 91 b2 19 	lds	r30, 0x19B2	; 0x8019b2 <pxCurrentTCB>
    3076:	f0 91 b3 19 	lds	r31, 0x19B3	; 0x8019b3 <pxCurrentTCB+0x1>
    307a:	2d 91       	ld	r18, X+
    307c:	3c 91       	ld	r19, X
    307e:	83 8d       	ldd	r24, Z+27	; 0x1b
    3080:	94 8d       	ldd	r25, Z+28	; 0x1c
    3082:	82 17       	cp	r24, r18
    3084:	93 07       	cpc	r25, r19
    3086:	58 f0       	brcs	.+22     	; 0x309e <vTaskSwitchContext+0x56>
    3088:	60 91 b2 19 	lds	r22, 0x19B2	; 0x8019b2 <pxCurrentTCB>
    308c:	70 91 b3 19 	lds	r23, 0x19B3	; 0x8019b3 <pxCurrentTCB+0x1>
    3090:	80 91 b2 19 	lds	r24, 0x19B2	; 0x8019b2 <pxCurrentTCB>
    3094:	90 91 b3 19 	lds	r25, 0x19B3	; 0x8019b3 <pxCurrentTCB+0x1>
    3098:	63 5e       	subi	r22, 0xE3	; 227
    309a:	7f 4f       	sbci	r23, 0xFF	; 255
    309c:	20 d6       	rcall	.+3136   	; 0x3cde <vApplicationStackOverflowHook>
    309e:	80 91 44 19 	lds	r24, 0x1944	; 0x801944 <uxTopReadyPriority>
    30a2:	28 2f       	mov	r18, r24
    30a4:	30 e0       	ldi	r19, 0x00	; 0
    30a6:	9b e0       	ldi	r25, 0x0B	; 11
    30a8:	89 9f       	mul	r24, r25
    30aa:	f0 01       	movw	r30, r0
    30ac:	11 24       	eor	r1, r1
    30ae:	ea 57       	subi	r30, 0x7A	; 122
    30b0:	f6 4e       	sbci	r31, 0xE6	; 230
    30b2:	90 81       	ld	r25, Z
    30b4:	91 11       	cpse	r25, r1
    30b6:	0e c0       	rjmp	.+28     	; 0x30d4 <vTaskSwitchContext+0x8c>
    30b8:	4b e0       	ldi	r20, 0x0B	; 11
    30ba:	81 50       	subi	r24, 0x01	; 1
    30bc:	28 2f       	mov	r18, r24
    30be:	30 e0       	ldi	r19, 0x00	; 0
    30c0:	42 9f       	mul	r20, r18
    30c2:	f0 01       	movw	r30, r0
    30c4:	43 9f       	mul	r20, r19
    30c6:	f0 0d       	add	r31, r0
    30c8:	11 24       	eor	r1, r1
    30ca:	ea 57       	subi	r30, 0x7A	; 122
    30cc:	f6 4e       	sbci	r31, 0xE6	; 230
    30ce:	90 81       	ld	r25, Z
    30d0:	99 23       	and	r25, r25
    30d2:	99 f3       	breq	.-26     	; 0x30ba <vTaskSwitchContext+0x72>
    30d4:	9b e0       	ldi	r25, 0x0B	; 11
    30d6:	92 9f       	mul	r25, r18
    30d8:	a0 01       	movw	r20, r0
    30da:	93 9f       	mul	r25, r19
    30dc:	50 0d       	add	r21, r0
    30de:	11 24       	eor	r1, r1
    30e0:	da 01       	movw	r26, r20
    30e2:	aa 57       	subi	r26, 0x7A	; 122
    30e4:	b6 4e       	sbci	r27, 0xE6	; 230
    30e6:	11 96       	adiw	r26, 0x01	; 1
    30e8:	ed 91       	ld	r30, X+
    30ea:	fc 91       	ld	r31, X
    30ec:	12 97       	sbiw	r26, 0x02	; 2
    30ee:	04 80       	ldd	r0, Z+4	; 0x04
    30f0:	f5 81       	ldd	r31, Z+5	; 0x05
    30f2:	e0 2d       	mov	r30, r0
    30f4:	12 96       	adiw	r26, 0x02	; 2
    30f6:	fc 93       	st	X, r31
    30f8:	ee 93       	st	-X, r30
    30fa:	11 97       	sbiw	r26, 0x01	; 1
    30fc:	47 57       	subi	r20, 0x77	; 119
    30fe:	56 4e       	sbci	r21, 0xE6	; 230
    3100:	e4 17       	cp	r30, r20
    3102:	f5 07       	cpc	r31, r21
    3104:	29 f4       	brne	.+10     	; 0x3110 <vTaskSwitchContext+0xc8>
    3106:	44 81       	ldd	r20, Z+4	; 0x04
    3108:	55 81       	ldd	r21, Z+5	; 0x05
    310a:	fd 01       	movw	r30, r26
    310c:	52 83       	std	Z+2, r21	; 0x02
    310e:	41 83       	std	Z+1, r20	; 0x01
    3110:	9b e0       	ldi	r25, 0x0B	; 11
    3112:	92 9f       	mul	r25, r18
    3114:	f0 01       	movw	r30, r0
    3116:	93 9f       	mul	r25, r19
    3118:	f0 0d       	add	r31, r0
    311a:	11 24       	eor	r1, r1
    311c:	ea 57       	subi	r30, 0x7A	; 122
    311e:	f6 4e       	sbci	r31, 0xE6	; 230
    3120:	01 80       	ldd	r0, Z+1	; 0x01
    3122:	f2 81       	ldd	r31, Z+2	; 0x02
    3124:	e0 2d       	mov	r30, r0
    3126:	20 85       	ldd	r18, Z+8	; 0x08
    3128:	31 85       	ldd	r19, Z+9	; 0x09
    312a:	30 93 b3 19 	sts	0x19B3, r19	; 0x8019b3 <pxCurrentTCB+0x1>
    312e:	20 93 b2 19 	sts	0x19B2, r18	; 0x8019b2 <pxCurrentTCB>
    3132:	80 93 44 19 	sts	0x1944, r24	; 0x801944 <uxTopReadyPriority>
    3136:	e0 91 b2 19 	lds	r30, 0x19B2	; 0x8019b2 <pxCurrentTCB>
    313a:	f0 91 b3 19 	lds	r31, 0x19B3	; 0x8019b3 <pxCurrentTCB+0x1>
    313e:	81 a5       	ldd	r24, Z+41	; 0x29
    3140:	0c 94 4e 09 	jmp	0x129c	; 0x129c <task_switch_in>
    3144:	08 95       	ret

00003146 <vTaskPlaceOnEventList>:
    3146:	cf 92       	push	r12
    3148:	df 92       	push	r13
    314a:	ef 92       	push	r14
    314c:	ff 92       	push	r15
    314e:	6a 01       	movw	r12, r20
    3150:	7b 01       	movw	r14, r22
    3152:	60 91 b2 19 	lds	r22, 0x19B2	; 0x8019b2 <pxCurrentTCB>
    3156:	70 91 b3 19 	lds	r23, 0x19B3	; 0x8019b3 <pxCurrentTCB+0x1>
    315a:	62 5f       	subi	r22, 0xF2	; 242
    315c:	7f 4f       	sbci	r23, 0xFF	; 255
    315e:	0e 94 37 0c 	call	0x186e	; 0x186e <vListInsert>
    3162:	41 e0       	ldi	r20, 0x01	; 1
    3164:	c7 01       	movw	r24, r14
    3166:	b6 01       	movw	r22, r12
    3168:	1f dc       	rcall	.-1986   	; 0x29a8 <prvAddCurrentTaskToDelayedList>
    316a:	ff 90       	pop	r15
    316c:	ef 90       	pop	r14
    316e:	df 90       	pop	r13
    3170:	cf 90       	pop	r12
    3172:	08 95       	ret

00003174 <vTaskPlaceOnUnorderedEventList>:
    3174:	cf 92       	push	r12
    3176:	df 92       	push	r13
    3178:	ef 92       	push	r14
    317a:	ff 92       	push	r15
    317c:	0f 93       	push	r16
    317e:	1f 93       	push	r17
    3180:	68 01       	movw	r12, r16
    3182:	79 01       	movw	r14, r18
    3184:	e0 91 b2 19 	lds	r30, 0x19B2	; 0x8019b2 <pxCurrentTCB>
    3188:	f0 91 b3 19 	lds	r31, 0x19B3	; 0x8019b3 <pxCurrentTCB+0x1>
    318c:	70 68       	ori	r23, 0x80	; 128
    318e:	46 87       	std	Z+14, r20	; 0x0e
    3190:	57 87       	std	Z+15, r21	; 0x0f
    3192:	60 8b       	std	Z+16, r22	; 0x10
    3194:	71 8b       	std	Z+17, r23	; 0x11
    3196:	60 91 b2 19 	lds	r22, 0x19B2	; 0x8019b2 <pxCurrentTCB>
    319a:	70 91 b3 19 	lds	r23, 0x19B3	; 0x8019b3 <pxCurrentTCB+0x1>
    319e:	62 5f       	subi	r22, 0xF2	; 242
    31a0:	7f 4f       	sbci	r23, 0xFF	; 255
    31a2:	0e 94 16 0c 	call	0x182c	; 0x182c <vListInsertEnd>
    31a6:	41 e0       	ldi	r20, 0x01	; 1
    31a8:	c7 01       	movw	r24, r14
    31aa:	b6 01       	movw	r22, r12
    31ac:	fd db       	rcall	.-2054   	; 0x29a8 <prvAddCurrentTaskToDelayedList>
    31ae:	1f 91       	pop	r17
    31b0:	0f 91       	pop	r16
    31b2:	ff 90       	pop	r15
    31b4:	ef 90       	pop	r14
    31b6:	df 90       	pop	r13
    31b8:	cf 90       	pop	r12
    31ba:	08 95       	ret

000031bc <vTaskPlaceOnEventListRestricted>:
    31bc:	cf 92       	push	r12
    31be:	df 92       	push	r13
    31c0:	ef 92       	push	r14
    31c2:	ff 92       	push	r15
    31c4:	cf 93       	push	r28
    31c6:	6a 01       	movw	r12, r20
    31c8:	7b 01       	movw	r14, r22
    31ca:	c2 2f       	mov	r28, r18
    31cc:	60 91 b2 19 	lds	r22, 0x19B2	; 0x8019b2 <pxCurrentTCB>
    31d0:	70 91 b3 19 	lds	r23, 0x19B3	; 0x8019b3 <pxCurrentTCB+0x1>
    31d4:	62 5f       	subi	r22, 0xF2	; 242
    31d6:	7f 4f       	sbci	r23, 0xFF	; 255
    31d8:	0e 94 16 0c 	call	0x182c	; 0x182c <vListInsertEnd>
    31dc:	cc 23       	and	r28, r28
    31de:	21 f0       	breq	.+8      	; 0x31e8 <vTaskPlaceOnEventListRestricted+0x2c>
    31e0:	cc 24       	eor	r12, r12
    31e2:	ca 94       	dec	r12
    31e4:	dc 2c       	mov	r13, r12
    31e6:	76 01       	movw	r14, r12
    31e8:	4c 2f       	mov	r20, r28
    31ea:	c7 01       	movw	r24, r14
    31ec:	b6 01       	movw	r22, r12
    31ee:	dc db       	rcall	.-2120   	; 0x29a8 <prvAddCurrentTaskToDelayedList>
    31f0:	cf 91       	pop	r28
    31f2:	ff 90       	pop	r15
    31f4:	ef 90       	pop	r14
    31f6:	df 90       	pop	r13
    31f8:	cf 90       	pop	r12
    31fa:	08 95       	ret

000031fc <xTaskRemoveFromEventList>:
    31fc:	0f 93       	push	r16
    31fe:	1f 93       	push	r17
    3200:	cf 93       	push	r28
    3202:	df 93       	push	r29
    3204:	dc 01       	movw	r26, r24
    3206:	17 96       	adiw	r26, 0x07	; 7
    3208:	ed 91       	ld	r30, X+
    320a:	fc 91       	ld	r31, X
    320c:	18 97       	sbiw	r26, 0x08	; 8
    320e:	c0 85       	ldd	r28, Z+8	; 0x08
    3210:	d1 85       	ldd	r29, Z+9	; 0x09
    3212:	8e 01       	movw	r16, r28
    3214:	02 5f       	subi	r16, 0xF2	; 242
    3216:	1f 4f       	sbci	r17, 0xFF	; 255
    3218:	c8 01       	movw	r24, r16
    321a:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <uxListRemove>
    321e:	80 91 38 19 	lds	r24, 0x1938	; 0x801938 <uxSchedulerSuspended>
    3222:	81 11       	cpse	r24, r1
    3224:	16 c0       	rjmp	.+44     	; 0x3252 <xTaskRemoveFromEventList+0x56>
    3226:	0c 50       	subi	r16, 0x0C	; 12
    3228:	11 09       	sbc	r17, r1
    322a:	c8 01       	movw	r24, r16
    322c:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <uxListRemove>
    3230:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3232:	90 91 44 19 	lds	r25, 0x1944	; 0x801944 <uxTopReadyPriority>
    3236:	98 17       	cp	r25, r24
    3238:	10 f4       	brcc	.+4      	; 0x323e <xTaskRemoveFromEventList+0x42>
    323a:	80 93 44 19 	sts	0x1944, r24	; 0x801944 <uxTopReadyPriority>
    323e:	bb e0       	ldi	r27, 0x0B	; 11
    3240:	8b 9f       	mul	r24, r27
    3242:	c0 01       	movw	r24, r0
    3244:	11 24       	eor	r1, r1
    3246:	b8 01       	movw	r22, r16
    3248:	8a 57       	subi	r24, 0x7A	; 122
    324a:	96 4e       	sbci	r25, 0xE6	; 230
    324c:	0e 94 16 0c 	call	0x182c	; 0x182c <vListInsertEnd>
    3250:	05 c0       	rjmp	.+10     	; 0x325c <xTaskRemoveFromEventList+0x60>
    3252:	b8 01       	movw	r22, r16
    3254:	81 e6       	ldi	r24, 0x61	; 97
    3256:	99 e1       	ldi	r25, 0x19	; 25
    3258:	0e 94 16 0c 	call	0x182c	; 0x182c <vListInsertEnd>
    325c:	e0 91 b2 19 	lds	r30, 0x19B2	; 0x8019b2 <pxCurrentTCB>
    3260:	f0 91 b3 19 	lds	r31, 0x19B3	; 0x8019b3 <pxCurrentTCB+0x1>
    3264:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3266:	82 8d       	ldd	r24, Z+26	; 0x1a
    3268:	89 17       	cp	r24, r25
    326a:	20 f4       	brcc	.+8      	; 0x3274 <xTaskRemoveFromEventList+0x78>
    326c:	81 e0       	ldi	r24, 0x01	; 1
    326e:	80 93 41 19 	sts	0x1941, r24	; 0x801941 <xYieldPending>
    3272:	01 c0       	rjmp	.+2      	; 0x3276 <xTaskRemoveFromEventList+0x7a>
    3274:	80 e0       	ldi	r24, 0x00	; 0
    3276:	df 91       	pop	r29
    3278:	cf 91       	pop	r28
    327a:	1f 91       	pop	r17
    327c:	0f 91       	pop	r16
    327e:	08 95       	ret

00003280 <vTaskRemoveFromUnorderedEventList>:
    3280:	0f 93       	push	r16
    3282:	1f 93       	push	r17
    3284:	cf 93       	push	r28
    3286:	df 93       	push	r29
    3288:	70 68       	ori	r23, 0x80	; 128
    328a:	fc 01       	movw	r30, r24
    328c:	40 83       	st	Z, r20
    328e:	51 83       	std	Z+1, r21	; 0x01
    3290:	62 83       	std	Z+2, r22	; 0x02
    3292:	73 83       	std	Z+3, r23	; 0x03
    3294:	c0 85       	ldd	r28, Z+8	; 0x08
    3296:	d1 85       	ldd	r29, Z+9	; 0x09
    3298:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <uxListRemove>
    329c:	8e 01       	movw	r16, r28
    329e:	0e 5f       	subi	r16, 0xFE	; 254
    32a0:	1f 4f       	sbci	r17, 0xFF	; 255
    32a2:	c8 01       	movw	r24, r16
    32a4:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <uxListRemove>
    32a8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    32aa:	90 91 44 19 	lds	r25, 0x1944	; 0x801944 <uxTopReadyPriority>
    32ae:	98 17       	cp	r25, r24
    32b0:	10 f4       	brcc	.+4      	; 0x32b6 <vTaskRemoveFromUnorderedEventList+0x36>
    32b2:	80 93 44 19 	sts	0x1944, r24	; 0x801944 <uxTopReadyPriority>
    32b6:	fb e0       	ldi	r31, 0x0B	; 11
    32b8:	8f 9f       	mul	r24, r31
    32ba:	c0 01       	movw	r24, r0
    32bc:	11 24       	eor	r1, r1
    32be:	b8 01       	movw	r22, r16
    32c0:	8a 57       	subi	r24, 0x7A	; 122
    32c2:	96 4e       	sbci	r25, 0xE6	; 230
    32c4:	0e 94 16 0c 	call	0x182c	; 0x182c <vListInsertEnd>
    32c8:	e0 91 b2 19 	lds	r30, 0x19B2	; 0x8019b2 <pxCurrentTCB>
    32cc:	f0 91 b3 19 	lds	r31, 0x19B3	; 0x8019b3 <pxCurrentTCB+0x1>
    32d0:	9a 8d       	ldd	r25, Y+26	; 0x1a
    32d2:	82 8d       	ldd	r24, Z+26	; 0x1a
    32d4:	89 17       	cp	r24, r25
    32d6:	18 f4       	brcc	.+6      	; 0x32de <vTaskRemoveFromUnorderedEventList+0x5e>
    32d8:	81 e0       	ldi	r24, 0x01	; 1
    32da:	80 93 41 19 	sts	0x1941, r24	; 0x801941 <xYieldPending>
    32de:	df 91       	pop	r29
    32e0:	cf 91       	pop	r28
    32e2:	1f 91       	pop	r17
    32e4:	0f 91       	pop	r16
    32e6:	08 95       	ret

000032e8 <vTaskSetTimeOutState>:
    32e8:	0f b6       	in	r0, 0x3f	; 63
    32ea:	f8 94       	cli
    32ec:	0f 92       	push	r0
    32ee:	20 91 40 19 	lds	r18, 0x1940	; 0x801940 <xNumOfOverflows>
    32f2:	fc 01       	movw	r30, r24
    32f4:	20 83       	st	Z, r18
    32f6:	40 91 45 19 	lds	r20, 0x1945	; 0x801945 <xTickCount>
    32fa:	50 91 46 19 	lds	r21, 0x1946	; 0x801946 <xTickCount+0x1>
    32fe:	60 91 47 19 	lds	r22, 0x1947	; 0x801947 <xTickCount+0x2>
    3302:	70 91 48 19 	lds	r23, 0x1948	; 0x801948 <xTickCount+0x3>
    3306:	41 83       	std	Z+1, r20	; 0x01
    3308:	52 83       	std	Z+2, r21	; 0x02
    330a:	63 83       	std	Z+3, r22	; 0x03
    330c:	74 83       	std	Z+4, r23	; 0x04
    330e:	0f 90       	pop	r0
    3310:	0f be       	out	0x3f, r0	; 63
    3312:	08 95       	ret

00003314 <vTaskInternalSetTimeOutState>:
    3314:	20 91 40 19 	lds	r18, 0x1940	; 0x801940 <xNumOfOverflows>
    3318:	fc 01       	movw	r30, r24
    331a:	20 83       	st	Z, r18
    331c:	40 91 45 19 	lds	r20, 0x1945	; 0x801945 <xTickCount>
    3320:	50 91 46 19 	lds	r21, 0x1946	; 0x801946 <xTickCount+0x1>
    3324:	60 91 47 19 	lds	r22, 0x1947	; 0x801947 <xTickCount+0x2>
    3328:	70 91 48 19 	lds	r23, 0x1948	; 0x801948 <xTickCount+0x3>
    332c:	41 83       	std	Z+1, r20	; 0x01
    332e:	52 83       	std	Z+2, r21	; 0x02
    3330:	63 83       	std	Z+3, r22	; 0x03
    3332:	74 83       	std	Z+4, r23	; 0x04
    3334:	08 95       	ret

00003336 <xTaskCheckForTimeOut>:
    3336:	cf 92       	push	r12
    3338:	df 92       	push	r13
    333a:	ef 92       	push	r14
    333c:	ff 92       	push	r15
    333e:	0f 93       	push	r16
    3340:	1f 93       	push	r17
    3342:	cf 93       	push	r28
    3344:	df 93       	push	r29
    3346:	fb 01       	movw	r30, r22
    3348:	0f b6       	in	r0, 0x3f	; 63
    334a:	f8 94       	cli
    334c:	0f 92       	push	r0
    334e:	40 91 45 19 	lds	r20, 0x1945	; 0x801945 <xTickCount>
    3352:	50 91 46 19 	lds	r21, 0x1946	; 0x801946 <xTickCount+0x1>
    3356:	60 91 47 19 	lds	r22, 0x1947	; 0x801947 <xTickCount+0x2>
    335a:	70 91 48 19 	lds	r23, 0x1948	; 0x801948 <xTickCount+0x3>
    335e:	00 81       	ld	r16, Z
    3360:	11 81       	ldd	r17, Z+1	; 0x01
    3362:	22 81       	ldd	r18, Z+2	; 0x02
    3364:	33 81       	ldd	r19, Z+3	; 0x03
    3366:	0f 3f       	cpi	r16, 0xFF	; 255
    3368:	af ef       	ldi	r26, 0xFF	; 255
    336a:	1a 07       	cpc	r17, r26
    336c:	2a 07       	cpc	r18, r26
    336e:	3a 07       	cpc	r19, r26
    3370:	49 f1       	breq	.+82     	; 0x33c4 <xTaskCheckForTimeOut+0x8e>
    3372:	ec 01       	movw	r28, r24
    3374:	c9 80       	ldd	r12, Y+1	; 0x01
    3376:	da 80       	ldd	r13, Y+2	; 0x02
    3378:	eb 80       	ldd	r14, Y+3	; 0x03
    337a:	fc 80       	ldd	r15, Y+4	; 0x04
    337c:	a0 91 40 19 	lds	r26, 0x1940	; 0x801940 <xNumOfOverflows>
    3380:	b8 81       	ld	r27, Y
    3382:	ba 17       	cp	r27, r26
    3384:	29 f0       	breq	.+10     	; 0x3390 <xTaskCheckForTimeOut+0x5a>
    3386:	4c 15       	cp	r20, r12
    3388:	5d 05       	cpc	r21, r13
    338a:	6e 05       	cpc	r22, r14
    338c:	7f 05       	cpc	r23, r15
    338e:	e0 f4       	brcc	.+56     	; 0x33c8 <xTaskCheckForTimeOut+0x92>
    3390:	4c 19       	sub	r20, r12
    3392:	5d 09       	sbc	r21, r13
    3394:	6e 09       	sbc	r22, r14
    3396:	7f 09       	sbc	r23, r15
    3398:	40 17       	cp	r20, r16
    339a:	51 07       	cpc	r21, r17
    339c:	62 07       	cpc	r22, r18
    339e:	73 07       	cpc	r23, r19
    33a0:	58 f4       	brcc	.+22     	; 0x33b8 <xTaskCheckForTimeOut+0x82>
    33a2:	04 1b       	sub	r16, r20
    33a4:	15 0b       	sbc	r17, r21
    33a6:	26 0b       	sbc	r18, r22
    33a8:	37 0b       	sbc	r19, r23
    33aa:	00 83       	st	Z, r16
    33ac:	11 83       	std	Z+1, r17	; 0x01
    33ae:	22 83       	std	Z+2, r18	; 0x02
    33b0:	33 83       	std	Z+3, r19	; 0x03
    33b2:	b0 df       	rcall	.-160    	; 0x3314 <vTaskInternalSetTimeOutState>
    33b4:	80 e0       	ldi	r24, 0x00	; 0
    33b6:	09 c0       	rjmp	.+18     	; 0x33ca <xTaskCheckForTimeOut+0x94>
    33b8:	10 82       	st	Z, r1
    33ba:	11 82       	std	Z+1, r1	; 0x01
    33bc:	12 82       	std	Z+2, r1	; 0x02
    33be:	13 82       	std	Z+3, r1	; 0x03
    33c0:	81 e0       	ldi	r24, 0x01	; 1
    33c2:	03 c0       	rjmp	.+6      	; 0x33ca <xTaskCheckForTimeOut+0x94>
    33c4:	80 e0       	ldi	r24, 0x00	; 0
    33c6:	01 c0       	rjmp	.+2      	; 0x33ca <xTaskCheckForTimeOut+0x94>
    33c8:	81 e0       	ldi	r24, 0x01	; 1
    33ca:	0f 90       	pop	r0
    33cc:	0f be       	out	0x3f, r0	; 63
    33ce:	df 91       	pop	r29
    33d0:	cf 91       	pop	r28
    33d2:	1f 91       	pop	r17
    33d4:	0f 91       	pop	r16
    33d6:	ff 90       	pop	r15
    33d8:	ef 90       	pop	r14
    33da:	df 90       	pop	r13
    33dc:	cf 90       	pop	r12
    33de:	08 95       	ret

000033e0 <vTaskMissedYield>:
    33e0:	81 e0       	ldi	r24, 0x01	; 1
    33e2:	80 93 41 19 	sts	0x1941, r24	; 0x801941 <xYieldPending>
    33e6:	08 95       	ret

000033e8 <xTaskGetCurrentTaskHandle>:
    33e8:	80 91 b2 19 	lds	r24, 0x19B2	; 0x8019b2 <pxCurrentTCB>
    33ec:	90 91 b3 19 	lds	r25, 0x19B3	; 0x8019b3 <pxCurrentTCB+0x1>
    33f0:	08 95       	ret

000033f2 <xTaskGetSchedulerState>:
    33f2:	80 91 43 19 	lds	r24, 0x1943	; 0x801943 <xSchedulerRunning>
    33f6:	88 23       	and	r24, r24
    33f8:	31 f0       	breq	.+12     	; 0x3406 <xTaskGetSchedulerState+0x14>
    33fa:	80 91 38 19 	lds	r24, 0x1938	; 0x801938 <uxSchedulerSuspended>
    33fe:	88 23       	and	r24, r24
    3400:	21 f0       	breq	.+8      	; 0x340a <xTaskGetSchedulerState+0x18>
    3402:	80 e0       	ldi	r24, 0x00	; 0
    3404:	08 95       	ret
    3406:	81 e0       	ldi	r24, 0x01	; 1
    3408:	08 95       	ret
    340a:	82 e0       	ldi	r24, 0x02	; 2
    340c:	08 95       	ret

0000340e <xTaskPriorityInherit>:
    340e:	0f 93       	push	r16
    3410:	1f 93       	push	r17
    3412:	cf 93       	push	r28
    3414:	df 93       	push	r29
    3416:	fc 01       	movw	r30, r24
    3418:	89 2b       	or	r24, r25
    341a:	09 f4       	brne	.+2      	; 0x341e <xTaskPriorityInherit+0x10>
    341c:	60 c0       	rjmp	.+192    	; 0x34de <xTaskPriorityInherit+0xd0>
    341e:	82 8d       	ldd	r24, Z+26	; 0x1a
    3420:	a0 91 b2 19 	lds	r26, 0x19B2	; 0x8019b2 <pxCurrentTCB>
    3424:	b0 91 b3 19 	lds	r27, 0x19B3	; 0x8019b3 <pxCurrentTCB+0x1>
    3428:	5a 96       	adiw	r26, 0x1a	; 26
    342a:	9c 91       	ld	r25, X
    342c:	89 17       	cp	r24, r25
    342e:	08 f0       	brcs	.+2      	; 0x3432 <xTaskPriorityInherit+0x24>
    3430:	4a c0       	rjmp	.+148    	; 0x34c6 <xTaskPriorityInherit+0xb8>
    3432:	46 85       	ldd	r20, Z+14	; 0x0e
    3434:	57 85       	ldd	r21, Z+15	; 0x0f
    3436:	60 89       	ldd	r22, Z+16	; 0x10
    3438:	71 89       	ldd	r23, Z+17	; 0x11
    343a:	77 23       	and	r23, r23
    343c:	94 f0       	brlt	.+36     	; 0x3462 <xTaskPriorityInherit+0x54>
    343e:	a0 91 b2 19 	lds	r26, 0x19B2	; 0x8019b2 <pxCurrentTCB>
    3442:	b0 91 b3 19 	lds	r27, 0x19B3	; 0x8019b3 <pxCurrentTCB+0x1>
    3446:	5a 96       	adiw	r26, 0x1a	; 26
    3448:	9c 91       	ld	r25, X
    344a:	44 e0       	ldi	r20, 0x04	; 4
    344c:	50 e0       	ldi	r21, 0x00	; 0
    344e:	60 e0       	ldi	r22, 0x00	; 0
    3450:	70 e0       	ldi	r23, 0x00	; 0
    3452:	49 1b       	sub	r20, r25
    3454:	51 09       	sbc	r21, r1
    3456:	61 09       	sbc	r22, r1
    3458:	71 09       	sbc	r23, r1
    345a:	46 87       	std	Z+14, r20	; 0x0e
    345c:	57 87       	std	Z+15, r21	; 0x0f
    345e:	60 8b       	std	Z+16, r22	; 0x10
    3460:	71 8b       	std	Z+17, r23	; 0x11
    3462:	2b e0       	ldi	r18, 0x0B	; 11
    3464:	82 9f       	mul	r24, r18
    3466:	c0 01       	movw	r24, r0
    3468:	11 24       	eor	r1, r1
    346a:	8a 57       	subi	r24, 0x7A	; 122
    346c:	96 4e       	sbci	r25, 0xE6	; 230
    346e:	24 85       	ldd	r18, Z+12	; 0x0c
    3470:	35 85       	ldd	r19, Z+13	; 0x0d
    3472:	28 17       	cp	r18, r24
    3474:	39 07       	cpc	r19, r25
    3476:	f1 f4       	brne	.+60     	; 0x34b4 <xTaskPriorityInherit+0xa6>
    3478:	8f 01       	movw	r16, r30
    347a:	ef 01       	movw	r28, r30
    347c:	22 96       	adiw	r28, 0x02	; 2
    347e:	ce 01       	movw	r24, r28
    3480:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <uxListRemove>
    3484:	e0 91 b2 19 	lds	r30, 0x19B2	; 0x8019b2 <pxCurrentTCB>
    3488:	f0 91 b3 19 	lds	r31, 0x19B3	; 0x8019b3 <pxCurrentTCB+0x1>
    348c:	82 8d       	ldd	r24, Z+26	; 0x1a
    348e:	f8 01       	movw	r30, r16
    3490:	82 8f       	std	Z+26, r24	; 0x1a
    3492:	90 91 44 19 	lds	r25, 0x1944	; 0x801944 <uxTopReadyPriority>
    3496:	98 17       	cp	r25, r24
    3498:	10 f4       	brcc	.+4      	; 0x349e <xTaskPriorityInherit+0x90>
    349a:	80 93 44 19 	sts	0x1944, r24	; 0x801944 <uxTopReadyPriority>
    349e:	fb e0       	ldi	r31, 0x0B	; 11
    34a0:	8f 9f       	mul	r24, r31
    34a2:	c0 01       	movw	r24, r0
    34a4:	11 24       	eor	r1, r1
    34a6:	be 01       	movw	r22, r28
    34a8:	8a 57       	subi	r24, 0x7A	; 122
    34aa:	96 4e       	sbci	r25, 0xE6	; 230
    34ac:	0e 94 16 0c 	call	0x182c	; 0x182c <vListInsertEnd>
    34b0:	81 e0       	ldi	r24, 0x01	; 1
    34b2:	16 c0       	rjmp	.+44     	; 0x34e0 <xTaskPriorityInherit+0xd2>
    34b4:	a0 91 b2 19 	lds	r26, 0x19B2	; 0x8019b2 <pxCurrentTCB>
    34b8:	b0 91 b3 19 	lds	r27, 0x19B3	; 0x8019b3 <pxCurrentTCB+0x1>
    34bc:	5a 96       	adiw	r26, 0x1a	; 26
    34be:	8c 91       	ld	r24, X
    34c0:	82 8f       	std	Z+26, r24	; 0x1a
    34c2:	81 e0       	ldi	r24, 0x01	; 1
    34c4:	0d c0       	rjmp	.+26     	; 0x34e0 <xTaskPriorityInherit+0xd2>
    34c6:	a0 91 b2 19 	lds	r26, 0x19B2	; 0x8019b2 <pxCurrentTCB>
    34ca:	b0 91 b3 19 	lds	r27, 0x19B3	; 0x8019b3 <pxCurrentTCB+0x1>
    34ce:	81 e0       	ldi	r24, 0x01	; 1
    34d0:	27 a1       	ldd	r18, Z+39	; 0x27
    34d2:	5a 96       	adiw	r26, 0x1a	; 26
    34d4:	9c 91       	ld	r25, X
    34d6:	29 17       	cp	r18, r25
    34d8:	18 f0       	brcs	.+6      	; 0x34e0 <xTaskPriorityInherit+0xd2>
    34da:	80 e0       	ldi	r24, 0x00	; 0
    34dc:	01 c0       	rjmp	.+2      	; 0x34e0 <xTaskPriorityInherit+0xd2>
    34de:	80 e0       	ldi	r24, 0x00	; 0
    34e0:	df 91       	pop	r29
    34e2:	cf 91       	pop	r28
    34e4:	1f 91       	pop	r17
    34e6:	0f 91       	pop	r16
    34e8:	08 95       	ret

000034ea <xTaskPriorityDisinherit>:
    34ea:	0f 93       	push	r16
    34ec:	1f 93       	push	r17
    34ee:	cf 93       	push	r28
    34f0:	df 93       	push	r29
    34f2:	fc 01       	movw	r30, r24
    34f4:	89 2b       	or	r24, r25
    34f6:	79 f1       	breq	.+94     	; 0x3556 <xTaskPriorityDisinherit+0x6c>
    34f8:	80 a5       	ldd	r24, Z+40	; 0x28
    34fa:	81 50       	subi	r24, 0x01	; 1
    34fc:	80 a7       	std	Z+40, r24	; 0x28
    34fe:	22 8d       	ldd	r18, Z+26	; 0x1a
    3500:	97 a1       	ldd	r25, Z+39	; 0x27
    3502:	29 17       	cp	r18, r25
    3504:	51 f1       	breq	.+84     	; 0x355a <xTaskPriorityDisinherit+0x70>
    3506:	81 11       	cpse	r24, r1
    3508:	2a c0       	rjmp	.+84     	; 0x355e <xTaskPriorityDisinherit+0x74>
    350a:	ef 01       	movw	r28, r30
    350c:	8f 01       	movw	r16, r30
    350e:	0e 5f       	subi	r16, 0xFE	; 254
    3510:	1f 4f       	sbci	r17, 0xFF	; 255
    3512:	c8 01       	movw	r24, r16
    3514:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <uxListRemove>
    3518:	8f a1       	ldd	r24, Y+39	; 0x27
    351a:	8a 8f       	std	Y+26, r24	; 0x1a
    351c:	44 e0       	ldi	r20, 0x04	; 4
    351e:	50 e0       	ldi	r21, 0x00	; 0
    3520:	60 e0       	ldi	r22, 0x00	; 0
    3522:	70 e0       	ldi	r23, 0x00	; 0
    3524:	48 1b       	sub	r20, r24
    3526:	51 09       	sbc	r21, r1
    3528:	61 09       	sbc	r22, r1
    352a:	71 09       	sbc	r23, r1
    352c:	4e 87       	std	Y+14, r20	; 0x0e
    352e:	5f 87       	std	Y+15, r21	; 0x0f
    3530:	68 8b       	std	Y+16, r22	; 0x10
    3532:	79 8b       	std	Y+17, r23	; 0x11
    3534:	90 91 44 19 	lds	r25, 0x1944	; 0x801944 <uxTopReadyPriority>
    3538:	98 17       	cp	r25, r24
    353a:	10 f4       	brcc	.+4      	; 0x3540 <xTaskPriorityDisinherit+0x56>
    353c:	80 93 44 19 	sts	0x1944, r24	; 0x801944 <uxTopReadyPriority>
    3540:	2b e0       	ldi	r18, 0x0B	; 11
    3542:	82 9f       	mul	r24, r18
    3544:	c0 01       	movw	r24, r0
    3546:	11 24       	eor	r1, r1
    3548:	b8 01       	movw	r22, r16
    354a:	8a 57       	subi	r24, 0x7A	; 122
    354c:	96 4e       	sbci	r25, 0xE6	; 230
    354e:	0e 94 16 0c 	call	0x182c	; 0x182c <vListInsertEnd>
    3552:	81 e0       	ldi	r24, 0x01	; 1
    3554:	05 c0       	rjmp	.+10     	; 0x3560 <xTaskPriorityDisinherit+0x76>
    3556:	80 e0       	ldi	r24, 0x00	; 0
    3558:	03 c0       	rjmp	.+6      	; 0x3560 <xTaskPriorityDisinherit+0x76>
    355a:	80 e0       	ldi	r24, 0x00	; 0
    355c:	01 c0       	rjmp	.+2      	; 0x3560 <xTaskPriorityDisinherit+0x76>
    355e:	80 e0       	ldi	r24, 0x00	; 0
    3560:	df 91       	pop	r29
    3562:	cf 91       	pop	r28
    3564:	1f 91       	pop	r17
    3566:	0f 91       	pop	r16
    3568:	08 95       	ret

0000356a <vTaskPriorityDisinheritAfterTimeout>:
    356a:	0f 93       	push	r16
    356c:	1f 93       	push	r17
    356e:	cf 93       	push	r28
    3570:	df 93       	push	r29
    3572:	fc 01       	movw	r30, r24
    3574:	89 2b       	or	r24, r25
    3576:	09 f4       	brne	.+2      	; 0x357a <vTaskPriorityDisinheritAfterTimeout+0x10>
    3578:	3f c0       	rjmp	.+126    	; 0x35f8 <vTaskPriorityDisinheritAfterTimeout+0x8e>
    357a:	87 a1       	ldd	r24, Z+39	; 0x27
    357c:	86 17       	cp	r24, r22
    357e:	08 f4       	brcc	.+2      	; 0x3582 <vTaskPriorityDisinheritAfterTimeout+0x18>
    3580:	86 2f       	mov	r24, r22
    3582:	92 8d       	ldd	r25, Z+26	; 0x1a
    3584:	98 17       	cp	r25, r24
    3586:	c1 f1       	breq	.+112    	; 0x35f8 <vTaskPriorityDisinheritAfterTimeout+0x8e>
    3588:	20 a5       	ldd	r18, Z+40	; 0x28
    358a:	21 30       	cpi	r18, 0x01	; 1
    358c:	a9 f5       	brne	.+106    	; 0x35f8 <vTaskPriorityDisinheritAfterTimeout+0x8e>
    358e:	82 8f       	std	Z+26, r24	; 0x1a
    3590:	46 85       	ldd	r20, Z+14	; 0x0e
    3592:	57 85       	ldd	r21, Z+15	; 0x0f
    3594:	60 89       	ldd	r22, Z+16	; 0x10
    3596:	71 89       	ldd	r23, Z+17	; 0x11
    3598:	77 23       	and	r23, r23
    359a:	64 f0       	brlt	.+24     	; 0x35b4 <vTaskPriorityDisinheritAfterTimeout+0x4a>
    359c:	44 e0       	ldi	r20, 0x04	; 4
    359e:	50 e0       	ldi	r21, 0x00	; 0
    35a0:	60 e0       	ldi	r22, 0x00	; 0
    35a2:	70 e0       	ldi	r23, 0x00	; 0
    35a4:	48 1b       	sub	r20, r24
    35a6:	51 09       	sbc	r21, r1
    35a8:	61 09       	sbc	r22, r1
    35aa:	71 09       	sbc	r23, r1
    35ac:	46 87       	std	Z+14, r20	; 0x0e
    35ae:	57 87       	std	Z+15, r21	; 0x0f
    35b0:	60 8b       	std	Z+16, r22	; 0x10
    35b2:	71 8b       	std	Z+17, r23	; 0x11
    35b4:	2b e0       	ldi	r18, 0x0B	; 11
    35b6:	92 9f       	mul	r25, r18
    35b8:	c0 01       	movw	r24, r0
    35ba:	11 24       	eor	r1, r1
    35bc:	8a 57       	subi	r24, 0x7A	; 122
    35be:	96 4e       	sbci	r25, 0xE6	; 230
    35c0:	24 85       	ldd	r18, Z+12	; 0x0c
    35c2:	35 85       	ldd	r19, Z+13	; 0x0d
    35c4:	28 17       	cp	r18, r24
    35c6:	39 07       	cpc	r19, r25
    35c8:	b9 f4       	brne	.+46     	; 0x35f8 <vTaskPriorityDisinheritAfterTimeout+0x8e>
    35ca:	ef 01       	movw	r28, r30
    35cc:	8f 01       	movw	r16, r30
    35ce:	0e 5f       	subi	r16, 0xFE	; 254
    35d0:	1f 4f       	sbci	r17, 0xFF	; 255
    35d2:	c8 01       	movw	r24, r16
    35d4:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <uxListRemove>
    35d8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    35da:	90 91 44 19 	lds	r25, 0x1944	; 0x801944 <uxTopReadyPriority>
    35de:	98 17       	cp	r25, r24
    35e0:	10 f4       	brcc	.+4      	; 0x35e6 <vTaskPriorityDisinheritAfterTimeout+0x7c>
    35e2:	80 93 44 19 	sts	0x1944, r24	; 0x801944 <uxTopReadyPriority>
    35e6:	2b e0       	ldi	r18, 0x0B	; 11
    35e8:	82 9f       	mul	r24, r18
    35ea:	c0 01       	movw	r24, r0
    35ec:	11 24       	eor	r1, r1
    35ee:	b8 01       	movw	r22, r16
    35f0:	8a 57       	subi	r24, 0x7A	; 122
    35f2:	96 4e       	sbci	r25, 0xE6	; 230
    35f4:	0e 94 16 0c 	call	0x182c	; 0x182c <vListInsertEnd>
    35f8:	df 91       	pop	r29
    35fa:	cf 91       	pop	r28
    35fc:	1f 91       	pop	r17
    35fe:	0f 91       	pop	r16
    3600:	08 95       	ret

00003602 <uxTaskResetEventItemValue>:
    3602:	cf 92       	push	r12
    3604:	df 92       	push	r13
    3606:	ef 92       	push	r14
    3608:	ff 92       	push	r15
    360a:	e0 91 b2 19 	lds	r30, 0x19B2	; 0x8019b2 <pxCurrentTCB>
    360e:	f0 91 b3 19 	lds	r31, 0x19B3	; 0x8019b3 <pxCurrentTCB+0x1>
    3612:	66 85       	ldd	r22, Z+14	; 0x0e
    3614:	77 85       	ldd	r23, Z+15	; 0x0f
    3616:	80 89       	ldd	r24, Z+16	; 0x10
    3618:	91 89       	ldd	r25, Z+17	; 0x11
    361a:	e0 91 b2 19 	lds	r30, 0x19B2	; 0x8019b2 <pxCurrentTCB>
    361e:	f0 91 b3 19 	lds	r31, 0x19B3	; 0x8019b3 <pxCurrentTCB+0x1>
    3622:	a0 91 b2 19 	lds	r26, 0x19B2	; 0x8019b2 <pxCurrentTCB>
    3626:	b0 91 b3 19 	lds	r27, 0x19B3	; 0x8019b3 <pxCurrentTCB+0x1>
    362a:	5a 96       	adiw	r26, 0x1a	; 26
    362c:	2c 91       	ld	r18, X
    362e:	c1 2c       	mov	r12, r1
    3630:	d1 2c       	mov	r13, r1
    3632:	76 01       	movw	r14, r12
    3634:	68 94       	set
    3636:	c2 f8       	bld	r12, 2
    3638:	c2 1a       	sub	r12, r18
    363a:	d1 08       	sbc	r13, r1
    363c:	e1 08       	sbc	r14, r1
    363e:	f1 08       	sbc	r15, r1
    3640:	c6 86       	std	Z+14, r12	; 0x0e
    3642:	d7 86       	std	Z+15, r13	; 0x0f
    3644:	e0 8a       	std	Z+16, r14	; 0x10
    3646:	f1 8a       	std	Z+17, r15	; 0x11
    3648:	ff 90       	pop	r15
    364a:	ef 90       	pop	r14
    364c:	df 90       	pop	r13
    364e:	cf 90       	pop	r12
    3650:	08 95       	ret

00003652 <pvTaskIncrementMutexHeldCount>:
    3652:	80 91 b2 19 	lds	r24, 0x19B2	; 0x8019b2 <pxCurrentTCB>
    3656:	90 91 b3 19 	lds	r25, 0x19B3	; 0x8019b3 <pxCurrentTCB+0x1>
    365a:	89 2b       	or	r24, r25
    365c:	39 f0       	breq	.+14     	; 0x366c <pvTaskIncrementMutexHeldCount+0x1a>
    365e:	e0 91 b2 19 	lds	r30, 0x19B2	; 0x8019b2 <pxCurrentTCB>
    3662:	f0 91 b3 19 	lds	r31, 0x19B3	; 0x8019b3 <pxCurrentTCB+0x1>
    3666:	80 a5       	ldd	r24, Z+40	; 0x28
    3668:	8f 5f       	subi	r24, 0xFF	; 255
    366a:	80 a7       	std	Z+40, r24	; 0x28
    366c:	80 91 b2 19 	lds	r24, 0x19B2	; 0x8019b2 <pxCurrentTCB>
    3670:	90 91 b3 19 	lds	r25, 0x19B3	; 0x8019b3 <pxCurrentTCB+0x1>
    3674:	08 95       	ret

00003676 <xTaskNotifyWait>:
    3676:	4f 92       	push	r4
    3678:	5f 92       	push	r5
    367a:	6f 92       	push	r6
    367c:	7f 92       	push	r7
    367e:	8f 92       	push	r8
    3680:	9f 92       	push	r9
    3682:	af 92       	push	r10
    3684:	bf 92       	push	r11
    3686:	cf 92       	push	r12
    3688:	df 92       	push	r13
    368a:	ef 92       	push	r14
    368c:	ff 92       	push	r15
    368e:	0f 93       	push	r16
    3690:	1f 93       	push	r17
    3692:	49 01       	movw	r8, r18
    3694:	5a 01       	movw	r10, r20
    3696:	0f b6       	in	r0, 0x3f	; 63
    3698:	f8 94       	cli
    369a:	0f 92       	push	r0
    369c:	e0 91 b2 19 	lds	r30, 0x19B2	; 0x8019b2 <pxCurrentTCB>
    36a0:	f0 91 b3 19 	lds	r31, 0x19B3	; 0x8019b3 <pxCurrentTCB+0x1>
    36a4:	27 a5       	ldd	r18, Z+47	; 0x2f
    36a6:	22 30       	cpi	r18, 0x02	; 2
    36a8:	39 f1       	breq	.+78     	; 0x36f8 <xTaskNotifyWait+0x82>
    36aa:	e0 91 b2 19 	lds	r30, 0x19B2	; 0x8019b2 <pxCurrentTCB>
    36ae:	f0 91 b3 19 	lds	r31, 0x19B3	; 0x8019b3 <pxCurrentTCB+0x1>
    36b2:	43 a4       	ldd	r4, Z+43	; 0x2b
    36b4:	54 a4       	ldd	r5, Z+44	; 0x2c
    36b6:	65 a4       	ldd	r6, Z+45	; 0x2d
    36b8:	76 a4       	ldd	r7, Z+46	; 0x2e
    36ba:	dc 01       	movw	r26, r24
    36bc:	cb 01       	movw	r24, r22
    36be:	80 95       	com	r24
    36c0:	90 95       	com	r25
    36c2:	a0 95       	com	r26
    36c4:	b0 95       	com	r27
    36c6:	84 21       	and	r24, r4
    36c8:	95 21       	and	r25, r5
    36ca:	a6 21       	and	r26, r6
    36cc:	b7 21       	and	r27, r7
    36ce:	83 a7       	std	Z+43, r24	; 0x2b
    36d0:	94 a7       	std	Z+44, r25	; 0x2c
    36d2:	a5 a7       	std	Z+45, r26	; 0x2d
    36d4:	b6 a7       	std	Z+46, r27	; 0x2e
    36d6:	e0 91 b2 19 	lds	r30, 0x19B2	; 0x8019b2 <pxCurrentTCB>
    36da:	f0 91 b3 19 	lds	r31, 0x19B3	; 0x8019b3 <pxCurrentTCB+0x1>
    36de:	81 e0       	ldi	r24, 0x01	; 1
    36e0:	87 a7       	std	Z+47, r24	; 0x2f
    36e2:	c1 14       	cp	r12, r1
    36e4:	d1 04       	cpc	r13, r1
    36e6:	e1 04       	cpc	r14, r1
    36e8:	f1 04       	cpc	r15, r1
    36ea:	31 f0       	breq	.+12     	; 0x36f8 <xTaskNotifyWait+0x82>
    36ec:	41 e0       	ldi	r20, 0x01	; 1
    36ee:	c7 01       	movw	r24, r14
    36f0:	b6 01       	movw	r22, r12
    36f2:	5a d9       	rcall	.-3404   	; 0x29a8 <prvAddCurrentTaskToDelayedList>
    36f4:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <vPortYield>
    36f8:	0f 90       	pop	r0
    36fa:	0f be       	out	0x3f, r0	; 63
    36fc:	0f b6       	in	r0, 0x3f	; 63
    36fe:	f8 94       	cli
    3700:	0f 92       	push	r0
    3702:	01 15       	cp	r16, r1
    3704:	11 05       	cpc	r17, r1
    3706:	69 f0       	breq	.+26     	; 0x3722 <xTaskNotifyWait+0xac>
    3708:	e0 91 b2 19 	lds	r30, 0x19B2	; 0x8019b2 <pxCurrentTCB>
    370c:	f0 91 b3 19 	lds	r31, 0x19B3	; 0x8019b3 <pxCurrentTCB+0x1>
    3710:	83 a5       	ldd	r24, Z+43	; 0x2b
    3712:	94 a5       	ldd	r25, Z+44	; 0x2c
    3714:	a5 a5       	ldd	r26, Z+45	; 0x2d
    3716:	b6 a5       	ldd	r27, Z+46	; 0x2e
    3718:	f8 01       	movw	r30, r16
    371a:	80 83       	st	Z, r24
    371c:	91 83       	std	Z+1, r25	; 0x01
    371e:	a2 83       	std	Z+2, r26	; 0x02
    3720:	b3 83       	std	Z+3, r27	; 0x03
    3722:	e0 91 b2 19 	lds	r30, 0x19B2	; 0x8019b2 <pxCurrentTCB>
    3726:	f0 91 b3 19 	lds	r31, 0x19B3	; 0x8019b3 <pxCurrentTCB+0x1>
    372a:	87 a5       	ldd	r24, Z+47	; 0x2f
    372c:	82 30       	cpi	r24, 0x02	; 2
    372e:	b1 f4       	brne	.+44     	; 0x375c <xTaskNotifyWait+0xe6>
    3730:	e0 91 b2 19 	lds	r30, 0x19B2	; 0x8019b2 <pxCurrentTCB>
    3734:	f0 91 b3 19 	lds	r31, 0x19B3	; 0x8019b3 <pxCurrentTCB+0x1>
    3738:	83 a5       	ldd	r24, Z+43	; 0x2b
    373a:	94 a5       	ldd	r25, Z+44	; 0x2c
    373c:	a5 a5       	ldd	r26, Z+45	; 0x2d
    373e:	b6 a5       	ldd	r27, Z+46	; 0x2e
    3740:	80 94       	com	r8
    3742:	90 94       	com	r9
    3744:	a0 94       	com	r10
    3746:	b0 94       	com	r11
    3748:	88 22       	and	r8, r24
    374a:	99 22       	and	r9, r25
    374c:	aa 22       	and	r10, r26
    374e:	bb 22       	and	r11, r27
    3750:	83 a6       	std	Z+43, r8	; 0x2b
    3752:	94 a6       	std	Z+44, r9	; 0x2c
    3754:	a5 a6       	std	Z+45, r10	; 0x2d
    3756:	b6 a6       	std	Z+46, r11	; 0x2e
    3758:	81 e0       	ldi	r24, 0x01	; 1
    375a:	01 c0       	rjmp	.+2      	; 0x375e <xTaskNotifyWait+0xe8>
    375c:	80 e0       	ldi	r24, 0x00	; 0
    375e:	e0 91 b2 19 	lds	r30, 0x19B2	; 0x8019b2 <pxCurrentTCB>
    3762:	f0 91 b3 19 	lds	r31, 0x19B3	; 0x8019b3 <pxCurrentTCB+0x1>
    3766:	17 a6       	std	Z+47, r1	; 0x2f
    3768:	0f 90       	pop	r0
    376a:	0f be       	out	0x3f, r0	; 63
    376c:	1f 91       	pop	r17
    376e:	0f 91       	pop	r16
    3770:	ff 90       	pop	r15
    3772:	ef 90       	pop	r14
    3774:	df 90       	pop	r13
    3776:	cf 90       	pop	r12
    3778:	bf 90       	pop	r11
    377a:	af 90       	pop	r10
    377c:	9f 90       	pop	r9
    377e:	8f 90       	pop	r8
    3780:	7f 90       	pop	r7
    3782:	6f 90       	pop	r6
    3784:	5f 90       	pop	r5
    3786:	4f 90       	pop	r4
    3788:	08 95       	ret

0000378a <xTaskGenericNotify>:
    378a:	0f 93       	push	r16
    378c:	1f 93       	push	r17
    378e:	cf 93       	push	r28
    3790:	df 93       	push	r29
    3792:	fc 01       	movw	r30, r24
    3794:	0f b6       	in	r0, 0x3f	; 63
    3796:	f8 94       	cli
    3798:	0f 92       	push	r0
    379a:	01 15       	cp	r16, r1
    379c:	11 05       	cpc	r17, r1
    379e:	49 f0       	breq	.+18     	; 0x37b2 <xTaskGenericNotify+0x28>
    37a0:	83 a5       	ldd	r24, Z+43	; 0x2b
    37a2:	94 a5       	ldd	r25, Z+44	; 0x2c
    37a4:	a5 a5       	ldd	r26, Z+45	; 0x2d
    37a6:	b6 a5       	ldd	r27, Z+46	; 0x2e
    37a8:	e8 01       	movw	r28, r16
    37aa:	88 83       	st	Y, r24
    37ac:	99 83       	std	Y+1, r25	; 0x01
    37ae:	aa 83       	std	Y+2, r26	; 0x02
    37b0:	bb 83       	std	Y+3, r27	; 0x03
    37b2:	87 a5       	ldd	r24, Z+47	; 0x2f
    37b4:	92 e0       	ldi	r25, 0x02	; 2
    37b6:	97 a7       	std	Z+47, r25	; 0x2f
    37b8:	22 30       	cpi	r18, 0x02	; 2
    37ba:	b1 f0       	breq	.+44     	; 0x37e8 <xTaskGenericNotify+0x5e>
    37bc:	18 f4       	brcc	.+6      	; 0x37c4 <xTaskGenericNotify+0x3a>
    37be:	21 30       	cpi	r18, 0x01	; 1
    37c0:	31 f0       	breq	.+12     	; 0x37ce <xTaskGenericNotify+0x44>
    37c2:	2a c0       	rjmp	.+84     	; 0x3818 <xTaskGenericNotify+0x8e>
    37c4:	23 30       	cpi	r18, 0x03	; 3
    37c6:	e9 f0       	breq	.+58     	; 0x3802 <xTaskGenericNotify+0x78>
    37c8:	24 30       	cpi	r18, 0x04	; 4
    37ca:	01 f1       	breq	.+64     	; 0x380c <xTaskGenericNotify+0x82>
    37cc:	25 c0       	rjmp	.+74     	; 0x3818 <xTaskGenericNotify+0x8e>
    37ce:	03 a5       	ldd	r16, Z+43	; 0x2b
    37d0:	14 a5       	ldd	r17, Z+44	; 0x2c
    37d2:	25 a5       	ldd	r18, Z+45	; 0x2d
    37d4:	36 a5       	ldd	r19, Z+46	; 0x2e
    37d6:	40 2b       	or	r20, r16
    37d8:	51 2b       	or	r21, r17
    37da:	62 2b       	or	r22, r18
    37dc:	73 2b       	or	r23, r19
    37de:	43 a7       	std	Z+43, r20	; 0x2b
    37e0:	54 a7       	std	Z+44, r21	; 0x2c
    37e2:	65 a7       	std	Z+45, r22	; 0x2d
    37e4:	76 a7       	std	Z+46, r23	; 0x2e
    37e6:	18 c0       	rjmp	.+48     	; 0x3818 <xTaskGenericNotify+0x8e>
    37e8:	43 a5       	ldd	r20, Z+43	; 0x2b
    37ea:	54 a5       	ldd	r21, Z+44	; 0x2c
    37ec:	65 a5       	ldd	r22, Z+45	; 0x2d
    37ee:	76 a5       	ldd	r23, Z+46	; 0x2e
    37f0:	4f 5f       	subi	r20, 0xFF	; 255
    37f2:	5f 4f       	sbci	r21, 0xFF	; 255
    37f4:	6f 4f       	sbci	r22, 0xFF	; 255
    37f6:	7f 4f       	sbci	r23, 0xFF	; 255
    37f8:	43 a7       	std	Z+43, r20	; 0x2b
    37fa:	54 a7       	std	Z+44, r21	; 0x2c
    37fc:	65 a7       	std	Z+45, r22	; 0x2d
    37fe:	76 a7       	std	Z+46, r23	; 0x2e
    3800:	0b c0       	rjmp	.+22     	; 0x3818 <xTaskGenericNotify+0x8e>
    3802:	43 a7       	std	Z+43, r20	; 0x2b
    3804:	54 a7       	std	Z+44, r21	; 0x2c
    3806:	65 a7       	std	Z+45, r22	; 0x2d
    3808:	76 a7       	std	Z+46, r23	; 0x2e
    380a:	06 c0       	rjmp	.+12     	; 0x3818 <xTaskGenericNotify+0x8e>
    380c:	82 30       	cpi	r24, 0x02	; 2
    380e:	49 f1       	breq	.+82     	; 0x3862 <xTaskGenericNotify+0xd8>
    3810:	43 a7       	std	Z+43, r20	; 0x2b
    3812:	54 a7       	std	Z+44, r21	; 0x2c
    3814:	65 a7       	std	Z+45, r22	; 0x2d
    3816:	76 a7       	std	Z+46, r23	; 0x2e
    3818:	81 30       	cpi	r24, 0x01	; 1
    381a:	29 f5       	brne	.+74     	; 0x3866 <xTaskGenericNotify+0xdc>
    381c:	ef 01       	movw	r28, r30
    381e:	8f 01       	movw	r16, r30
    3820:	0e 5f       	subi	r16, 0xFE	; 254
    3822:	1f 4f       	sbci	r17, 0xFF	; 255
    3824:	c8 01       	movw	r24, r16
    3826:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <uxListRemove>
    382a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    382c:	90 91 44 19 	lds	r25, 0x1944	; 0x801944 <uxTopReadyPriority>
    3830:	98 17       	cp	r25, r24
    3832:	10 f4       	brcc	.+4      	; 0x3838 <xTaskGenericNotify+0xae>
    3834:	80 93 44 19 	sts	0x1944, r24	; 0x801944 <uxTopReadyPriority>
    3838:	2b e0       	ldi	r18, 0x0B	; 11
    383a:	82 9f       	mul	r24, r18
    383c:	c0 01       	movw	r24, r0
    383e:	11 24       	eor	r1, r1
    3840:	b8 01       	movw	r22, r16
    3842:	8a 57       	subi	r24, 0x7A	; 122
    3844:	96 4e       	sbci	r25, 0xE6	; 230
    3846:	0e 94 16 0c 	call	0x182c	; 0x182c <vListInsertEnd>
    384a:	e0 91 b2 19 	lds	r30, 0x19B2	; 0x8019b2 <pxCurrentTCB>
    384e:	f0 91 b3 19 	lds	r31, 0x19B3	; 0x8019b3 <pxCurrentTCB+0x1>
    3852:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3854:	82 8d       	ldd	r24, Z+26	; 0x1a
    3856:	89 17       	cp	r24, r25
    3858:	40 f4       	brcc	.+16     	; 0x386a <xTaskGenericNotify+0xe0>
    385a:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <vPortYield>
    385e:	81 e0       	ldi	r24, 0x01	; 1
    3860:	05 c0       	rjmp	.+10     	; 0x386c <xTaskGenericNotify+0xe2>
    3862:	80 e0       	ldi	r24, 0x00	; 0
    3864:	03 c0       	rjmp	.+6      	; 0x386c <xTaskGenericNotify+0xe2>
    3866:	81 e0       	ldi	r24, 0x01	; 1
    3868:	01 c0       	rjmp	.+2      	; 0x386c <xTaskGenericNotify+0xe2>
    386a:	81 e0       	ldi	r24, 0x01	; 1
    386c:	0f 90       	pop	r0
    386e:	0f be       	out	0x3f, r0	; 63
    3870:	df 91       	pop	r29
    3872:	cf 91       	pop	r28
    3874:	1f 91       	pop	r17
    3876:	0f 91       	pop	r16
    3878:	08 95       	ret

0000387a <xTaskGenericNotifyFromISR>:
    387a:	ef 92       	push	r14
    387c:	ff 92       	push	r15
    387e:	0f 93       	push	r16
    3880:	1f 93       	push	r17
    3882:	cf 93       	push	r28
    3884:	df 93       	push	r29
    3886:	fc 01       	movw	r30, r24
    3888:	01 15       	cp	r16, r1
    388a:	11 05       	cpc	r17, r1
    388c:	49 f0       	breq	.+18     	; 0x38a0 <xTaskGenericNotifyFromISR+0x26>
    388e:	83 a5       	ldd	r24, Z+43	; 0x2b
    3890:	94 a5       	ldd	r25, Z+44	; 0x2c
    3892:	a5 a5       	ldd	r26, Z+45	; 0x2d
    3894:	b6 a5       	ldd	r27, Z+46	; 0x2e
    3896:	e8 01       	movw	r28, r16
    3898:	88 83       	st	Y, r24
    389a:	99 83       	std	Y+1, r25	; 0x01
    389c:	aa 83       	std	Y+2, r26	; 0x02
    389e:	bb 83       	std	Y+3, r27	; 0x03
    38a0:	87 a5       	ldd	r24, Z+47	; 0x2f
    38a2:	92 e0       	ldi	r25, 0x02	; 2
    38a4:	97 a7       	std	Z+47, r25	; 0x2f
    38a6:	22 30       	cpi	r18, 0x02	; 2
    38a8:	b1 f0       	breq	.+44     	; 0x38d6 <xTaskGenericNotifyFromISR+0x5c>
    38aa:	18 f4       	brcc	.+6      	; 0x38b2 <xTaskGenericNotifyFromISR+0x38>
    38ac:	21 30       	cpi	r18, 0x01	; 1
    38ae:	31 f0       	breq	.+12     	; 0x38bc <xTaskGenericNotifyFromISR+0x42>
    38b0:	2a c0       	rjmp	.+84     	; 0x3906 <xTaskGenericNotifyFromISR+0x8c>
    38b2:	23 30       	cpi	r18, 0x03	; 3
    38b4:	e9 f0       	breq	.+58     	; 0x38f0 <xTaskGenericNotifyFromISR+0x76>
    38b6:	24 30       	cpi	r18, 0x04	; 4
    38b8:	01 f1       	breq	.+64     	; 0x38fa <xTaskGenericNotifyFromISR+0x80>
    38ba:	25 c0       	rjmp	.+74     	; 0x3906 <xTaskGenericNotifyFromISR+0x8c>
    38bc:	03 a5       	ldd	r16, Z+43	; 0x2b
    38be:	14 a5       	ldd	r17, Z+44	; 0x2c
    38c0:	25 a5       	ldd	r18, Z+45	; 0x2d
    38c2:	36 a5       	ldd	r19, Z+46	; 0x2e
    38c4:	40 2b       	or	r20, r16
    38c6:	51 2b       	or	r21, r17
    38c8:	62 2b       	or	r22, r18
    38ca:	73 2b       	or	r23, r19
    38cc:	43 a7       	std	Z+43, r20	; 0x2b
    38ce:	54 a7       	std	Z+44, r21	; 0x2c
    38d0:	65 a7       	std	Z+45, r22	; 0x2d
    38d2:	76 a7       	std	Z+46, r23	; 0x2e
    38d4:	18 c0       	rjmp	.+48     	; 0x3906 <xTaskGenericNotifyFromISR+0x8c>
    38d6:	43 a5       	ldd	r20, Z+43	; 0x2b
    38d8:	54 a5       	ldd	r21, Z+44	; 0x2c
    38da:	65 a5       	ldd	r22, Z+45	; 0x2d
    38dc:	76 a5       	ldd	r23, Z+46	; 0x2e
    38de:	4f 5f       	subi	r20, 0xFF	; 255
    38e0:	5f 4f       	sbci	r21, 0xFF	; 255
    38e2:	6f 4f       	sbci	r22, 0xFF	; 255
    38e4:	7f 4f       	sbci	r23, 0xFF	; 255
    38e6:	43 a7       	std	Z+43, r20	; 0x2b
    38e8:	54 a7       	std	Z+44, r21	; 0x2c
    38ea:	65 a7       	std	Z+45, r22	; 0x2d
    38ec:	76 a7       	std	Z+46, r23	; 0x2e
    38ee:	0b c0       	rjmp	.+22     	; 0x3906 <xTaskGenericNotifyFromISR+0x8c>
    38f0:	43 a7       	std	Z+43, r20	; 0x2b
    38f2:	54 a7       	std	Z+44, r21	; 0x2c
    38f4:	65 a7       	std	Z+45, r22	; 0x2d
    38f6:	76 a7       	std	Z+46, r23	; 0x2e
    38f8:	06 c0       	rjmp	.+12     	; 0x3906 <xTaskGenericNotifyFromISR+0x8c>
    38fa:	82 30       	cpi	r24, 0x02	; 2
    38fc:	d9 f1       	breq	.+118    	; 0x3974 <xTaskGenericNotifyFromISR+0xfa>
    38fe:	43 a7       	std	Z+43, r20	; 0x2b
    3900:	54 a7       	std	Z+44, r21	; 0x2c
    3902:	65 a7       	std	Z+45, r22	; 0x2d
    3904:	76 a7       	std	Z+46, r23	; 0x2e
    3906:	81 30       	cpi	r24, 0x01	; 1
    3908:	b9 f5       	brne	.+110    	; 0x3978 <xTaskGenericNotifyFromISR+0xfe>
    390a:	ef 01       	movw	r28, r30
    390c:	80 91 38 19 	lds	r24, 0x1938	; 0x801938 <uxSchedulerSuspended>
    3910:	81 11       	cpse	r24, r1
    3912:	17 c0       	rjmp	.+46     	; 0x3942 <xTaskGenericNotifyFromISR+0xc8>
    3914:	8f 01       	movw	r16, r30
    3916:	0e 5f       	subi	r16, 0xFE	; 254
    3918:	1f 4f       	sbci	r17, 0xFF	; 255
    391a:	c8 01       	movw	r24, r16
    391c:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <uxListRemove>
    3920:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3922:	90 91 44 19 	lds	r25, 0x1944	; 0x801944 <uxTopReadyPriority>
    3926:	98 17       	cp	r25, r24
    3928:	10 f4       	brcc	.+4      	; 0x392e <xTaskGenericNotifyFromISR+0xb4>
    392a:	80 93 44 19 	sts	0x1944, r24	; 0x801944 <uxTopReadyPriority>
    392e:	eb e0       	ldi	r30, 0x0B	; 11
    3930:	8e 9f       	mul	r24, r30
    3932:	c0 01       	movw	r24, r0
    3934:	11 24       	eor	r1, r1
    3936:	b8 01       	movw	r22, r16
    3938:	8a 57       	subi	r24, 0x7A	; 122
    393a:	96 4e       	sbci	r25, 0xE6	; 230
    393c:	0e 94 16 0c 	call	0x182c	; 0x182c <vListInsertEnd>
    3940:	07 c0       	rjmp	.+14     	; 0x3950 <xTaskGenericNotifyFromISR+0xd6>
    3942:	bf 01       	movw	r22, r30
    3944:	62 5f       	subi	r22, 0xF2	; 242
    3946:	7f 4f       	sbci	r23, 0xFF	; 255
    3948:	81 e6       	ldi	r24, 0x61	; 97
    394a:	99 e1       	ldi	r25, 0x19	; 25
    394c:	0e 94 16 0c 	call	0x182c	; 0x182c <vListInsertEnd>
    3950:	e0 91 b2 19 	lds	r30, 0x19B2	; 0x8019b2 <pxCurrentTCB>
    3954:	f0 91 b3 19 	lds	r31, 0x19B3	; 0x8019b3 <pxCurrentTCB+0x1>
    3958:	9a 8d       	ldd	r25, Y+26	; 0x1a
    395a:	82 8d       	ldd	r24, Z+26	; 0x1a
    395c:	89 17       	cp	r24, r25
    395e:	70 f4       	brcc	.+28     	; 0x397c <xTaskGenericNotifyFromISR+0x102>
    3960:	e1 14       	cp	r14, r1
    3962:	f1 04       	cpc	r15, r1
    3964:	19 f0       	breq	.+6      	; 0x396c <xTaskGenericNotifyFromISR+0xf2>
    3966:	81 e0       	ldi	r24, 0x01	; 1
    3968:	e7 01       	movw	r28, r14
    396a:	88 83       	st	Y, r24
    396c:	81 e0       	ldi	r24, 0x01	; 1
    396e:	80 93 41 19 	sts	0x1941, r24	; 0x801941 <xYieldPending>
    3972:	05 c0       	rjmp	.+10     	; 0x397e <xTaskGenericNotifyFromISR+0x104>
    3974:	80 e0       	ldi	r24, 0x00	; 0
    3976:	03 c0       	rjmp	.+6      	; 0x397e <xTaskGenericNotifyFromISR+0x104>
    3978:	81 e0       	ldi	r24, 0x01	; 1
    397a:	01 c0       	rjmp	.+2      	; 0x397e <xTaskGenericNotifyFromISR+0x104>
    397c:	81 e0       	ldi	r24, 0x01	; 1
    397e:	df 91       	pop	r29
    3980:	cf 91       	pop	r28
    3982:	1f 91       	pop	r17
    3984:	0f 91       	pop	r16
    3986:	ff 90       	pop	r15
    3988:	ef 90       	pop	r14
    398a:	08 95       	ret

0000398c <xTaskNotifyStateClear>:
    TCB_t *pxTCB;
    BaseType_t xReturn;

        /* If null is passed in here then it is the calling task that is having
        its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    398c:	00 97       	sbiw	r24, 0x00	; 0
    398e:	21 f4       	brne	.+8      	; 0x3998 <xTaskNotifyStateClear+0xc>
    3990:	80 91 b2 19 	lds	r24, 0x19B2	; 0x8019b2 <pxCurrentTCB>
    3994:	90 91 b3 19 	lds	r25, 0x19B3	; 0x8019b3 <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    3998:	0f b6       	in	r0, 0x3f	; 63
    399a:	f8 94       	cli
    399c:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
    399e:	fc 01       	movw	r30, r24
    39a0:	27 a5       	ldd	r18, Z+47	; 0x2f
    39a2:	22 30       	cpi	r18, 0x02	; 2
    39a4:	19 f4       	brne	.+6      	; 0x39ac <xTaskNotifyStateClear+0x20>
            {
                pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    39a6:	17 a6       	std	Z+47, r1	; 0x2f
                xReturn = pdPASS;
    39a8:	81 e0       	ldi	r24, 0x01	; 1
    39aa:	01 c0       	rjmp	.+2      	; 0x39ae <xTaskNotifyStateClear+0x22>
            }
            else
            {
                xReturn = pdFAIL;
    39ac:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    39ae:	0f 90       	pop	r0
    39b0:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    39b2:	08 95       	ret

000039b4 <prvInsertTimerInActiveList>:
    39b4:	cf 92       	push	r12
    39b6:	df 92       	push	r13
    39b8:	ef 92       	push	r14
    39ba:	ff 92       	push	r15
    39bc:	0f 93       	push	r16
    39be:	1f 93       	push	r17
    39c0:	fc 01       	movw	r30, r24
    39c2:	42 83       	std	Z+2, r20	; 0x02
    39c4:	53 83       	std	Z+3, r21	; 0x03
    39c6:	64 83       	std	Z+4, r22	; 0x04
    39c8:	75 83       	std	Z+5, r23	; 0x05
    39ca:	93 87       	std	Z+11, r25	; 0x0b
    39cc:	82 87       	std	Z+10, r24	; 0x0a
    39ce:	04 17       	cp	r16, r20
    39d0:	15 07       	cpc	r17, r21
    39d2:	26 07       	cpc	r18, r22
    39d4:	37 07       	cpc	r19, r23
    39d6:	c0 f0       	brcs	.+48     	; 0x3a08 <prvInsertTimerInActiveList+0x54>
    39d8:	0c 19       	sub	r16, r12
    39da:	1d 09       	sbc	r17, r13
    39dc:	2e 09       	sbc	r18, r14
    39de:	3f 09       	sbc	r19, r15
    39e0:	86 85       	ldd	r24, Z+14	; 0x0e
    39e2:	97 85       	ldd	r25, Z+15	; 0x0f
    39e4:	a0 89       	ldd	r26, Z+16	; 0x10
    39e6:	b1 89       	ldd	r27, Z+17	; 0x11
    39e8:	08 17       	cp	r16, r24
    39ea:	19 07       	cpc	r17, r25
    39ec:	2a 07       	cpc	r18, r26
    39ee:	3b 07       	cpc	r19, r27
    39f0:	00 f5       	brcc	.+64     	; 0x3a32 <prvInsertTimerInActiveList+0x7e>
    39f2:	bf 01       	movw	r22, r30
    39f4:	6e 5f       	subi	r22, 0xFE	; 254
    39f6:	7f 4f       	sbci	r23, 0xFF	; 255
    39f8:	80 91 bc 19 	lds	r24, 0x19BC	; 0x8019bc <pxOverflowTimerList>
    39fc:	90 91 bd 19 	lds	r25, 0x19BD	; 0x8019bd <pxOverflowTimerList+0x1>
    3a00:	0e 94 37 0c 	call	0x186e	; 0x186e <vListInsert>
    3a04:	80 e0       	ldi	r24, 0x00	; 0
    3a06:	18 c0       	rjmp	.+48     	; 0x3a38 <prvInsertTimerInActiveList+0x84>
    3a08:	0c 15       	cp	r16, r12
    3a0a:	1d 05       	cpc	r17, r13
    3a0c:	2e 05       	cpc	r18, r14
    3a0e:	3f 05       	cpc	r19, r15
    3a10:	28 f4       	brcc	.+10     	; 0x3a1c <prvInsertTimerInActiveList+0x68>
    3a12:	4c 15       	cp	r20, r12
    3a14:	5d 05       	cpc	r21, r13
    3a16:	6e 05       	cpc	r22, r14
    3a18:	7f 05       	cpc	r23, r15
    3a1a:	68 f4       	brcc	.+26     	; 0x3a36 <prvInsertTimerInActiveList+0x82>
    3a1c:	bf 01       	movw	r22, r30
    3a1e:	6e 5f       	subi	r22, 0xFE	; 254
    3a20:	7f 4f       	sbci	r23, 0xFF	; 255
    3a22:	80 91 be 19 	lds	r24, 0x19BE	; 0x8019be <pxCurrentTimerList>
    3a26:	90 91 bf 19 	lds	r25, 0x19BF	; 0x8019bf <pxCurrentTimerList+0x1>
    3a2a:	0e 94 37 0c 	call	0x186e	; 0x186e <vListInsert>
    3a2e:	80 e0       	ldi	r24, 0x00	; 0
    3a30:	03 c0       	rjmp	.+6      	; 0x3a38 <prvInsertTimerInActiveList+0x84>
    3a32:	81 e0       	ldi	r24, 0x01	; 1
    3a34:	01 c0       	rjmp	.+2      	; 0x3a38 <prvInsertTimerInActiveList+0x84>
    3a36:	81 e0       	ldi	r24, 0x01	; 1
    3a38:	1f 91       	pop	r17
    3a3a:	0f 91       	pop	r16
    3a3c:	ff 90       	pop	r15
    3a3e:	ef 90       	pop	r14
    3a40:	df 90       	pop	r13
    3a42:	cf 90       	pop	r12
    3a44:	08 95       	ret

00003a46 <prvCheckForValidListAndQueue>:
    3a46:	0f b6       	in	r0, 0x3f	; 63
    3a48:	f8 94       	cli
    3a4a:	0f 92       	push	r0
    3a4c:	80 91 ba 19 	lds	r24, 0x19BA	; 0x8019ba <xTimerQueue>
    3a50:	90 91 bb 19 	lds	r25, 0x19BB	; 0x8019bb <xTimerQueue+0x1>
    3a54:	89 2b       	or	r24, r25
    3a56:	e9 f4       	brne	.+58     	; 0x3a92 <prvCheckForValidListAndQueue+0x4c>
    3a58:	8b ec       	ldi	r24, 0xCB	; 203
    3a5a:	99 e1       	ldi	r25, 0x19	; 25
    3a5c:	0e 94 01 0c 	call	0x1802	; 0x1802 <vListInitialise>
    3a60:	80 ec       	ldi	r24, 0xC0	; 192
    3a62:	99 e1       	ldi	r25, 0x19	; 25
    3a64:	0e 94 01 0c 	call	0x1802	; 0x1802 <vListInitialise>
    3a68:	8b ec       	ldi	r24, 0xCB	; 203
    3a6a:	99 e1       	ldi	r25, 0x19	; 25
    3a6c:	90 93 bf 19 	sts	0x19BF, r25	; 0x8019bf <pxCurrentTimerList+0x1>
    3a70:	80 93 be 19 	sts	0x19BE, r24	; 0x8019be <pxCurrentTimerList>
    3a74:	80 ec       	ldi	r24, 0xC0	; 192
    3a76:	99 e1       	ldi	r25, 0x19	; 25
    3a78:	90 93 bd 19 	sts	0x19BD, r25	; 0x8019bd <pxOverflowTimerList+0x1>
    3a7c:	80 93 bc 19 	sts	0x19BC, r24	; 0x8019bc <pxOverflowTimerList>
    3a80:	40 e0       	ldi	r20, 0x00	; 0
    3a82:	67 e0       	ldi	r22, 0x07	; 7
    3a84:	8a e0       	ldi	r24, 0x0A	; 10
    3a86:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <xQueueGenericCreate>
    3a8a:	90 93 bb 19 	sts	0x19BB, r25	; 0x8019bb <xTimerQueue+0x1>
    3a8e:	80 93 ba 19 	sts	0x19BA, r24	; 0x8019ba <xTimerQueue>
    3a92:	0f 90       	pop	r0
    3a94:	0f be       	out	0x3f, r0	; 63
    3a96:	08 95       	ret

00003a98 <xTimerCreateTimerTask>:
    3a98:	ef 92       	push	r14
    3a9a:	ff 92       	push	r15
    3a9c:	0f 93       	push	r16
    3a9e:	d3 df       	rcall	.-90     	; 0x3a46 <prvCheckForValidListAndQueue>
    3aa0:	80 91 ba 19 	lds	r24, 0x19BA	; 0x8019ba <xTimerQueue>
    3aa4:	90 91 bb 19 	lds	r25, 0x19BB	; 0x8019bb <xTimerQueue+0x1>
    3aa8:	89 2b       	or	r24, r25
    3aaa:	91 f0       	breq	.+36     	; 0x3ad0 <xTimerCreateTimerTask+0x38>
    3aac:	0f 2e       	mov	r0, r31
    3aae:	f8 eb       	ldi	r31, 0xB8	; 184
    3ab0:	ef 2e       	mov	r14, r31
    3ab2:	f9 e1       	ldi	r31, 0x19	; 25
    3ab4:	ff 2e       	mov	r15, r31
    3ab6:	f0 2d       	mov	r31, r0
    3ab8:	03 e0       	ldi	r16, 0x03	; 3
    3aba:	20 e0       	ldi	r18, 0x00	; 0
    3abc:	30 e0       	ldi	r19, 0x00	; 0
    3abe:	45 e5       	ldi	r20, 0x55	; 85
    3ac0:	50 e0       	ldi	r21, 0x00	; 0
    3ac2:	68 e6       	ldi	r22, 0x68	; 104
    3ac4:	75 e0       	ldi	r23, 0x05	; 5
    3ac6:	87 e0       	ldi	r24, 0x07	; 7
    3ac8:	91 e0       	ldi	r25, 0x01	; 1
    3aca:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <xTaskCreate>
    3ace:	01 c0       	rjmp	.+2      	; 0x3ad2 <xTimerCreateTimerTask+0x3a>
    3ad0:	80 e0       	ldi	r24, 0x00	; 0
    3ad2:	0f 91       	pop	r16
    3ad4:	ff 90       	pop	r15
    3ad6:	ef 90       	pop	r14
    3ad8:	08 95       	ret

00003ada <xTimerGenericCommand>:
    }
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    3ada:	8f 92       	push	r8
    3adc:	9f 92       	push	r9
    3ade:	af 92       	push	r10
    3ae0:	bf 92       	push	r11
    3ae2:	cf 92       	push	r12
    3ae4:	df 92       	push	r13
    3ae6:	ef 92       	push	r14
    3ae8:	ff 92       	push	r15
    3aea:	0f 93       	push	r16
    3aec:	1f 93       	push	r17
    3aee:	cf 93       	push	r28
    3af0:	df 93       	push	r29
    3af2:	cd b7       	in	r28, 0x3d	; 61
    3af4:	de b7       	in	r29, 0x3e	; 62
    3af6:	27 97       	sbiw	r28, 0x07	; 7
    3af8:	0f b6       	in	r0, 0x3f	; 63
    3afa:	f8 94       	cli
    3afc:	de bf       	out	0x3e, r29	; 62
    3afe:	0f be       	out	0x3f, r0	; 63
    3b00:	cd bf       	out	0x3d, r28	; 61

    configASSERT( xTimer );

    /* Send a message to the timer service task to perform a particular action
    on a particular timer definition. */
    if( xTimerQueue != NULL )
    3b02:	e0 91 ba 19 	lds	r30, 0x19BA	; 0x8019ba <xTimerQueue>
    3b06:	f0 91 bb 19 	lds	r31, 0x19BB	; 0x8019bb <xTimerQueue+0x1>
    3b0a:	30 97       	sbiw	r30, 0x00	; 0
    3b0c:	81 f1       	breq	.+96     	; 0x3b6e <xTimerGenericCommand+0x94>
    {
        /* Send a command to the timer service task to start the xTimer timer. */
        xMessage.xMessageID = xCommandID;
    3b0e:	69 83       	std	Y+1, r22	; 0x01
        xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    3b10:	2a 83       	std	Y+2, r18	; 0x02
    3b12:	3b 83       	std	Y+3, r19	; 0x03
    3b14:	4c 83       	std	Y+4, r20	; 0x04
    3b16:	5d 83       	std	Y+5, r21	; 0x05
        xMessage.u.xTimerParameters.pxTimer = xTimer;
    3b18:	9f 83       	std	Y+7, r25	; 0x07
    3b1a:	8e 83       	std	Y+6, r24	; 0x06

        if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    3b1c:	66 30       	cpi	r22, 0x06	; 6
    3b1e:	f4 f4       	brge	.+60     	; 0x3b5c <xTimerGenericCommand+0x82>
        {
            if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    3b20:	68 dc       	rcall	.-1840   	; 0x33f2 <xTaskGetSchedulerState>
    3b22:	82 30       	cpi	r24, 0x02	; 2
    3b24:	69 f4       	brne	.+26     	; 0x3b40 <xTimerGenericCommand+0x66>
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    3b26:	00 e0       	ldi	r16, 0x00	; 0
    3b28:	a7 01       	movw	r20, r14
    3b2a:	96 01       	movw	r18, r12
    3b2c:	be 01       	movw	r22, r28
    3b2e:	6f 5f       	subi	r22, 0xFF	; 255
    3b30:	7f 4f       	sbci	r23, 0xFF	; 255
    3b32:	80 91 ba 19 	lds	r24, 0x19BA	; 0x8019ba <xTimerQueue>
    3b36:	90 91 bb 19 	lds	r25, 0x19BB	; 0x8019bb <xTimerQueue+0x1>
    3b3a:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <xQueueGenericSend>
    3b3e:	18 c0       	rjmp	.+48     	; 0x3b70 <xTimerGenericCommand+0x96>
            }
            else
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    3b40:	00 e0       	ldi	r16, 0x00	; 0
    3b42:	20 e0       	ldi	r18, 0x00	; 0
    3b44:	30 e0       	ldi	r19, 0x00	; 0
    3b46:	a9 01       	movw	r20, r18
    3b48:	be 01       	movw	r22, r28
    3b4a:	6f 5f       	subi	r22, 0xFF	; 255
    3b4c:	7f 4f       	sbci	r23, 0xFF	; 255
    3b4e:	80 91 ba 19 	lds	r24, 0x19BA	; 0x8019ba <xTimerQueue>
    3b52:	90 91 bb 19 	lds	r25, 0x19BB	; 0x8019bb <xTimerQueue+0x1>
    3b56:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <xQueueGenericSend>
    3b5a:	0a c0       	rjmp	.+20     	; 0x3b70 <xTimerGenericCommand+0x96>
            }
        }
        else
        {
            xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    3b5c:	20 e0       	ldi	r18, 0x00	; 0
    3b5e:	a8 01       	movw	r20, r16
    3b60:	be 01       	movw	r22, r28
    3b62:	6f 5f       	subi	r22, 0xFF	; 255
    3b64:	7f 4f       	sbci	r23, 0xFF	; 255
    3b66:	cf 01       	movw	r24, r30
    3b68:	0e 94 0e 10 	call	0x201c	; 0x201c <xQueueGenericSendFromISR>
    3b6c:	01 c0       	rjmp	.+2      	; 0x3b70 <xTimerGenericCommand+0x96>
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
    3b6e:	80 e0       	ldi	r24, 0x00	; 0
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xReturn;
}
    3b70:	27 96       	adiw	r28, 0x07	; 7
    3b72:	0f b6       	in	r0, 0x3f	; 63
    3b74:	f8 94       	cli
    3b76:	de bf       	out	0x3e, r29	; 62
    3b78:	0f be       	out	0x3f, r0	; 63
    3b7a:	cd bf       	out	0x3d, r28	; 61
    3b7c:	df 91       	pop	r29
    3b7e:	cf 91       	pop	r28
    3b80:	1f 91       	pop	r17
    3b82:	0f 91       	pop	r16
    3b84:	ff 90       	pop	r15
    3b86:	ef 90       	pop	r14
    3b88:	df 90       	pop	r13
    3b8a:	cf 90       	pop	r12
    3b8c:	bf 90       	pop	r11
    3b8e:	af 90       	pop	r10
    3b90:	9f 90       	pop	r9
    3b92:	8f 90       	pop	r8
    3b94:	08 95       	ret

00003b96 <prvSampleTimeNow>:
    return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    3b96:	2f 92       	push	r2
    3b98:	3f 92       	push	r3
    3b9a:	4f 92       	push	r4
    3b9c:	5f 92       	push	r5
    3b9e:	6f 92       	push	r6
    3ba0:	7f 92       	push	r7
    3ba2:	8f 92       	push	r8
    3ba4:	9f 92       	push	r9
    3ba6:	af 92       	push	r10
    3ba8:	bf 92       	push	r11
    3baa:	cf 92       	push	r12
    3bac:	df 92       	push	r13
    3bae:	ef 92       	push	r14
    3bb0:	ff 92       	push	r15
    3bb2:	0f 93       	push	r16
    3bb4:	1f 93       	push	r17
    3bb6:	cf 93       	push	r28
    3bb8:	df 93       	push	r29
    3bba:	1c 01       	movw	r2, r24
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

    xTimeNow = xTaskGetTickCount();
    3bbc:	cd d8       	rcall	.-3686   	; 0x2d58 <xTaskGetTickCount>
    3bbe:	2b 01       	movw	r4, r22
    3bc0:	3c 01       	movw	r6, r24

    if( xTimeNow < xLastTime )
    3bc2:	80 91 b4 19 	lds	r24, 0x19B4	; 0x8019b4 <xLastTime.2432>
    3bc6:	90 91 b5 19 	lds	r25, 0x19B5	; 0x8019b5 <xLastTime.2432+0x1>
    3bca:	a0 91 b6 19 	lds	r26, 0x19B6	; 0x8019b6 <xLastTime.2432+0x2>
    3bce:	b0 91 b7 19 	lds	r27, 0x19B7	; 0x8019b7 <xLastTime.2432+0x3>
    3bd2:	48 16       	cp	r4, r24
    3bd4:	59 06       	cpc	r5, r25
    3bd6:	6a 06       	cpc	r6, r26
    3bd8:	7b 06       	cpc	r7, r27
    3bda:	08 f0       	brcs	.+2      	; 0x3bde <prvSampleTimeNow+0x48>
    3bdc:	53 c0       	rjmp	.+166    	; 0x3c84 <prvSampleTimeNow+0xee>
    3bde:	3b c0       	rjmp	.+118    	; 0x3c56 <prvSampleTimeNow+0xc0>
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    {
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    3be0:	07 80       	ldd	r0, Z+7	; 0x07
    3be2:	f0 85       	ldd	r31, Z+8	; 0x08
    3be4:	e0 2d       	mov	r30, r0
    3be6:	80 80       	ld	r8, Z
    3be8:	91 80       	ldd	r9, Z+1	; 0x01
    3bea:	a2 80       	ldd	r10, Z+2	; 0x02
    3bec:	b3 80       	ldd	r11, Z+3	; 0x03

        /* Remove the timer from the list. */
        pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    3bee:	c0 85       	ldd	r28, Z+8	; 0x08
    3bf0:	d1 85       	ldd	r29, Z+9	; 0x09
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3bf2:	8e 01       	movw	r16, r28
    3bf4:	0e 5f       	subi	r16, 0xFE	; 254
    3bf6:	1f 4f       	sbci	r17, 0xFF	; 255
    3bf8:	c8 01       	movw	r24, r16
    3bfa:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* Execute its callback, then send a command to restart the timer if
        it is an auto-reload timer.  It cannot be restarted here as the lists
        have not yet been switched. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3bfe:	ec 89       	ldd	r30, Y+20	; 0x14
    3c00:	fd 89       	ldd	r31, Y+21	; 0x15
    3c02:	ce 01       	movw	r24, r28
    3c04:	19 95       	eicall

        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    3c06:	8f 89       	ldd	r24, Y+23	; 0x17
    3c08:	82 ff       	sbrs	r24, 2
    3c0a:	25 c0       	rjmp	.+74     	; 0x3c56 <prvSampleTimeNow+0xc0>
            the timer going into the same timer list then it has already expired
            and the timer should be re-inserted into the current list so it is
            processed again within this loop.  Otherwise a command should be sent
            to restart the timer to ensure it is only inserted into a list after
            the lists have been swapped. */
            xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    3c0c:	8e 85       	ldd	r24, Y+14	; 0x0e
    3c0e:	9f 85       	ldd	r25, Y+15	; 0x0f
    3c10:	a8 89       	ldd	r26, Y+16	; 0x10
    3c12:	b9 89       	ldd	r27, Y+17	; 0x11
    3c14:	88 0d       	add	r24, r8
    3c16:	99 1d       	adc	r25, r9
    3c18:	aa 1d       	adc	r26, r10
    3c1a:	bb 1d       	adc	r27, r11
            if( xReloadTime > xNextExpireTime )
    3c1c:	88 16       	cp	r8, r24
    3c1e:	99 06       	cpc	r9, r25
    3c20:	aa 06       	cpc	r10, r26
    3c22:	bb 06       	cpc	r11, r27
    3c24:	70 f4       	brcc	.+28     	; 0x3c42 <prvSampleTimeNow+0xac>
            {
                listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    3c26:	8a 83       	std	Y+2, r24	; 0x02
    3c28:	9b 83       	std	Y+3, r25	; 0x03
    3c2a:	ac 83       	std	Y+4, r26	; 0x04
    3c2c:	bd 83       	std	Y+5, r27	; 0x05
                listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    3c2e:	db 87       	std	Y+11, r29	; 0x0b
    3c30:	ca 87       	std	Y+10, r28	; 0x0a
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    3c32:	b8 01       	movw	r22, r16
    3c34:	80 91 be 19 	lds	r24, 0x19BE	; 0x8019be <pxCurrentTimerList>
    3c38:	90 91 bf 19 	lds	r25, 0x19BF	; 0x8019bf <pxCurrentTimerList+0x1>
    3c3c:	0e 94 37 0c 	call	0x186e	; 0x186e <vListInsert>
    3c40:	0a c0       	rjmp	.+20     	; 0x3c56 <prvSampleTimeNow+0xc0>
            }
            else
            {
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    3c42:	c1 2c       	mov	r12, r1
    3c44:	d1 2c       	mov	r13, r1
    3c46:	76 01       	movw	r14, r12
    3c48:	00 e0       	ldi	r16, 0x00	; 0
    3c4a:	10 e0       	ldi	r17, 0x00	; 0
    3c4c:	a5 01       	movw	r20, r10
    3c4e:	94 01       	movw	r18, r8
    3c50:	60 e0       	ldi	r22, 0x00	; 0
    3c52:	ce 01       	movw	r24, r28
    3c54:	42 df       	rcall	.-380    	; 0x3ada <xTimerGenericCommand>

    /* The tick count has overflowed.  The timer lists must be switched.
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    3c56:	e0 91 be 19 	lds	r30, 0x19BE	; 0x8019be <pxCurrentTimerList>
    3c5a:	f0 91 bf 19 	lds	r31, 0x19BF	; 0x8019bf <pxCurrentTimerList+0x1>
    3c5e:	80 81       	ld	r24, Z
    3c60:	81 11       	cpse	r24, r1
    3c62:	be cf       	rjmp	.-132    	; 0x3be0 <prvSampleTimeNow+0x4a>
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxTemp = pxCurrentTimerList;
    pxCurrentTimerList = pxOverflowTimerList;
    3c64:	80 91 bc 19 	lds	r24, 0x19BC	; 0x8019bc <pxOverflowTimerList>
    3c68:	90 91 bd 19 	lds	r25, 0x19BD	; 0x8019bd <pxOverflowTimerList+0x1>
    3c6c:	90 93 bf 19 	sts	0x19BF, r25	; 0x8019bf <pxCurrentTimerList+0x1>
    3c70:	80 93 be 19 	sts	0x19BE, r24	; 0x8019be <pxCurrentTimerList>
    pxOverflowTimerList = pxTemp;
    3c74:	f0 93 bd 19 	sts	0x19BD, r31	; 0x8019bd <pxOverflowTimerList+0x1>
    3c78:	e0 93 bc 19 	sts	0x19BC, r30	; 0x8019bc <pxOverflowTimerList>
    xTimeNow = xTaskGetTickCount();

    if( xTimeNow < xLastTime )
    {
        prvSwitchTimerLists();
        *pxTimerListsWereSwitched = pdTRUE;
    3c7c:	81 e0       	ldi	r24, 0x01	; 1
    3c7e:	f1 01       	movw	r30, r2
    3c80:	80 83       	st	Z, r24
    3c82:	02 c0       	rjmp	.+4      	; 0x3c88 <prvSampleTimeNow+0xf2>
    }
    else
    {
        *pxTimerListsWereSwitched = pdFALSE;
    3c84:	f1 01       	movw	r30, r2
    3c86:	10 82       	st	Z, r1
    }

    xLastTime = xTimeNow;
    3c88:	40 92 b4 19 	sts	0x19B4, r4	; 0x8019b4 <xLastTime.2432>
    3c8c:	50 92 b5 19 	sts	0x19B5, r5	; 0x8019b5 <xLastTime.2432+0x1>
    3c90:	60 92 b6 19 	sts	0x19B6, r6	; 0x8019b6 <xLastTime.2432+0x2>
    3c94:	70 92 b7 19 	sts	0x19B7, r7	; 0x8019b7 <xLastTime.2432+0x3>

    return xTimeNow;
}
    3c98:	c3 01       	movw	r24, r6
    3c9a:	b2 01       	movw	r22, r4
    3c9c:	df 91       	pop	r29
    3c9e:	cf 91       	pop	r28
    3ca0:	1f 91       	pop	r17
    3ca2:	0f 91       	pop	r16
    3ca4:	ff 90       	pop	r15
    3ca6:	ef 90       	pop	r14
    3ca8:	df 90       	pop	r13
    3caa:	cf 90       	pop	r12
    3cac:	bf 90       	pop	r11
    3cae:	af 90       	pop	r10
    3cb0:	9f 90       	pop	r9
    3cb2:	8f 90       	pop	r8
    3cb4:	7f 90       	pop	r7
    3cb6:	6f 90       	pop	r6
    3cb8:	5f 90       	pop	r5
    3cba:	4f 90       	pop	r4
    3cbc:	3f 90       	pop	r3
    3cbe:	2f 90       	pop	r2
    3cc0:	08 95       	ret

00003cc2 <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    3cc2:	08 95       	ret

00003cc4 <vApplicationMallocFailedHook>:
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    3cc4:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    3cc6:	2f 9a       	sbi	0x05, 7	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3cc8:	2f ef       	ldi	r18, 0xFF	; 255
    3cca:	80 e7       	ldi	r24, 0x70	; 112
    3ccc:	92 e0       	ldi	r25, 0x02	; 2
    3cce:	21 50       	subi	r18, 0x01	; 1
    3cd0:	80 40       	sbci	r24, 0x00	; 0
    3cd2:	90 40       	sbci	r25, 0x00	; 0
    3cd4:	e1 f7       	brne	.-8      	; 0x3cce <vApplicationMallocFailedHook+0xa>
    3cd6:	00 c0       	rjmp	.+0      	; 0x3cd8 <vApplicationMallocFailedHook+0x14>
    3cd8:	00 00       	nop
    for(;;)
    {
        _delay_ms(50);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED fast blink.
    3cda:	1f 9a       	sbi	0x03, 7	; 3
    3cdc:	f5 cf       	rjmp	.-22     	; 0x3cc8 <vApplicationMallocFailedHook+0x4>

00003cde <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook( TaskHandle_t xTask, portCHAR *pcTaskName ) __attribute__((weak));

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)), portCHAR *pcTaskName __attribute__((unused))  )
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    3cde:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    3ce0:	2f 9a       	sbi	0x05, 7	; 5
    3ce2:	2f ef       	ldi	r18, 0xFF	; 255
    3ce4:	87 ea       	ldi	r24, 0xA7	; 167
    3ce6:	91 e6       	ldi	r25, 0x61	; 97
    3ce8:	21 50       	subi	r18, 0x01	; 1
    3cea:	80 40       	sbci	r24, 0x00	; 0
    3cec:	90 40       	sbci	r25, 0x00	; 0
    3cee:	e1 f7       	brne	.-8      	; 0x3ce8 <vApplicationStackOverflowHook+0xa>
    3cf0:	00 c0       	rjmp	.+0      	; 0x3cf2 <vApplicationStackOverflowHook+0x14>
    3cf2:	00 00       	nop
    for(;;)
    {
        _delay_ms(2000);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED slow blink.
    3cf4:	1f 9a       	sbi	0x03, 7	; 3
    3cf6:	f5 cf       	rjmp	.-22     	; 0x3ce2 <vApplicationStackOverflowHook+0x4>

00003cf8 <create_tasks_and_semaphores>:
	hih8120Create();
	
}

void doStuff()
{
    3cf8:	8f 92       	push	r8
    3cfa:	9f 92       	push	r9
    3cfc:	af 92       	push	r10
    3cfe:	bf 92       	push	r11
    3d00:	cf 92       	push	r12
    3d02:	df 92       	push	r13
    3d04:	ef 92       	push	r14
    3d06:	ff 92       	push	r15
    3d08:	0f 93       	push	r16
    3d0a:	1f 93       	push	r17
    3d0c:	cf 93       	push	r28
    3d0e:	df 93       	push	r29
    3d10:	0e 94 5e 09 	call	0x12bc	; 0x12bc <xEventGroupCreate>
    3d14:	90 93 46 1b 	sts	0x1B46, r25	; 0x801b46 <startMeasureEventGroup+0x1>
    3d18:	80 93 45 1b 	sts	0x1B45, r24	; 0x801b45 <startMeasureEventGroup>
    3d1c:	0e 94 5e 09 	call	0x12bc	; 0x12bc <xEventGroupCreate>
    3d20:	90 93 2c 1b 	sts	0x1B2C, r25	; 0x801b2c <readyEventGroup+0x1>
    3d24:	80 93 2b 1b 	sts	0x1B2B, r24	; 0x801b2b <readyEventGroup>
    3d28:	41 e0       	ldi	r20, 0x01	; 1
    3d2a:	60 e0       	ldi	r22, 0x00	; 0
    3d2c:	70 e0       	ldi	r23, 0x00	; 0
    3d2e:	84 e6       	ldi	r24, 0x64	; 100
    3d30:	90 e0       	ldi	r25, 0x00	; 0
    3d32:	0e 94 b0 12 	call	0x2560	; 0x2560 <xStreamBufferGenericCreate>
    3d36:	90 93 28 1b 	sts	0x1B28, r25	; 0x801b28 <xMessageBuffer+0x1>
    3d3a:	80 93 27 1b 	sts	0x1B27, r24	; 0x801b27 <xMessageBuffer>
    3d3e:	41 e0       	ldi	r20, 0x01	; 1
    3d40:	60 e0       	ldi	r22, 0x00	; 0
    3d42:	70 e0       	ldi	r23, 0x00	; 0
    3d44:	86 e1       	ldi	r24, 0x16	; 22
    3d46:	90 e0       	ldi	r25, 0x00	; 0
    3d48:	0e 94 b0 12 	call	0x2560	; 0x2560 <xStreamBufferGenericCreate>
    3d4c:	90 93 2a 1b 	sts	0x1B2A, r25	; 0x801b2a <_downlinkMessagebuffer+0x1>
    3d50:	80 93 29 1b 	sts	0x1B29, r24	; 0x801b29 <_downlinkMessagebuffer>
    3d54:	0e 94 31 03 	call	0x662	; 0x662 <configuration_create>
    3d58:	60 91 27 1b 	lds	r22, 0x1B27	; 0x801b27 <xMessageBuffer>
    3d5c:	70 91 28 1b 	lds	r23, 0x1B28	; 0x801b28 <xMessageBuffer+0x1>
    3d60:	81 e0       	ldi	r24, 0x01	; 1
    3d62:	0e 94 e5 07 	call	0xfca	; 0xfca <lora_UpLinkHandler_create>
    3d66:	60 91 29 1b 	lds	r22, 0x1B29	; 0x801b29 <_downlinkMessagebuffer>
    3d6a:	70 91 2a 1b 	lds	r23, 0x1B2A	; 0x801b2a <_downlinkMessagebuffer+0x1>
    3d6e:	41 e0       	ldi	r20, 0x01	; 1
    3d70:	50 e0       	ldi	r21, 0x00	; 0
    3d72:	81 e0       	ldi	r24, 0x01	; 1
    3d74:	90 e0       	ldi	r25, 0x00	; 0
    3d76:	0e 94 6e 05 	call	0xadc	; 0xadc <lora_DownLinkHandler_create>
    3d7a:	e0 90 2b 1b 	lds	r14, 0x1B2B	; 0x801b2b <readyEventGroup>
    3d7e:	f0 90 2c 1b 	lds	r15, 0x1B2C	; 0x801b2c <readyEventGroup+0x1>
    3d82:	40 91 45 1b 	lds	r20, 0x1B45	; 0x801b45 <startMeasureEventGroup>
    3d86:	50 91 46 1b 	lds	r21, 0x1B46	; 0x801b46 <startMeasureEventGroup+0x1>
    3d8a:	a1 2c       	mov	r10, r1
    3d8c:	b1 2c       	mov	r11, r1
    3d8e:	65 01       	movw	r12, r10
    3d90:	68 94       	set
    3d92:	a4 f8       	bld	r10, 4
    3d94:	01 e0       	ldi	r16, 0x01	; 1
    3d96:	10 e0       	ldi	r17, 0x00	; 0
    3d98:	20 e0       	ldi	r18, 0x00	; 0
    3d9a:	30 e0       	ldi	r19, 0x00	; 0
    3d9c:	60 ec       	ldi	r22, 0xC0	; 192
    3d9e:	81 e0       	ldi	r24, 0x01	; 1
    3da0:	0e 94 f1 06 	call	0xde2	; 0xde2 <humAndTempReader_create>
    3da4:	c8 2f       	mov	r28, r24
    3da6:	d9 2f       	mov	r29, r25
    3da8:	e0 90 2b 1b 	lds	r14, 0x1B2B	; 0x801b2b <readyEventGroup>
    3dac:	f0 90 2c 1b 	lds	r15, 0x1B2C	; 0x801b2c <readyEventGroup+0x1>
    3db0:	40 91 45 1b 	lds	r20, 0x1B45	; 0x801b45 <startMeasureEventGroup>
    3db4:	50 91 46 1b 	lds	r21, 0x1B46	; 0x801b46 <startMeasureEventGroup+0x1>
    3db8:	a1 2c       	mov	r10, r1
    3dba:	b1 2c       	mov	r11, r1
    3dbc:	65 01       	movw	r12, r10
    3dbe:	68 94       	set
    3dc0:	a5 f8       	bld	r10, 5
    3dc2:	02 e0       	ldi	r16, 0x02	; 2
    3dc4:	10 e0       	ldi	r17, 0x00	; 0
    3dc6:	20 e0       	ldi	r18, 0x00	; 0
    3dc8:	30 e0       	ldi	r19, 0x00	; 0
    3dca:	60 ec       	ldi	r22, 0xC0	; 192
    3dcc:	81 e0       	ldi	r24, 0x01	; 1
    3dce:	0e 94 73 02 	call	0x4e6	; 0x4e6 <co2Reader_create>
    3dd2:	e0 90 2b 1b 	lds	r14, 0x1B2B	; 0x801b2b <readyEventGroup>
    3dd6:	f0 90 2c 1b 	lds	r15, 0x1B2C	; 0x801b2c <readyEventGroup+0x1>
    3dda:	40 91 45 1b 	lds	r20, 0x1B45	; 0x801b45 <startMeasureEventGroup>
    3dde:	50 91 46 1b 	lds	r21, 0x1B46	; 0x801b46 <startMeasureEventGroup+0x1>
    3de2:	20 91 28 1b 	lds	r18, 0x1B28	; 0x801b28 <xMessageBuffer+0x1>
    3de6:	2f 93       	push	r18
    3de8:	20 91 27 1b 	lds	r18, 0x1B27	; 0x801b27 <xMessageBuffer>
    3dec:	2f 93       	push	r18
    3dee:	df 93       	push	r29
    3df0:	cf 93       	push	r28
    3df2:	4c 01       	movw	r8, r24
    3df4:	0f 2e       	mov	r0, r31
    3df6:	f0 e3       	ldi	r31, 0x30	; 48
    3df8:	af 2e       	mov	r10, r31
    3dfa:	b1 2c       	mov	r11, r1
    3dfc:	c1 2c       	mov	r12, r1
    3dfe:	d1 2c       	mov	r13, r1
    3e00:	f0 2d       	mov	r31, r0
    3e02:	03 e0       	ldi	r16, 0x03	; 3
    3e04:	10 e0       	ldi	r17, 0x00	; 0
    3e06:	20 e0       	ldi	r18, 0x00	; 0
    3e08:	30 e0       	ldi	r19, 0x00	; 0
    3e0a:	60 ec       	ldi	r22, 0xC0	; 192
    3e0c:	82 e0       	ldi	r24, 0x02	; 2
    3e0e:	0e 94 06 04 	call	0x80c	; 0x80c <device_create>
    3e12:	0f 90       	pop	r0
    3e14:	0f 90       	pop	r0
    3e16:	0f 90       	pop	r0
    3e18:	0f 90       	pop	r0
    3e1a:	df 91       	pop	r29
    3e1c:	cf 91       	pop	r28
    3e1e:	1f 91       	pop	r17
    3e20:	0f 91       	pop	r16
    3e22:	ff 90       	pop	r15
    3e24:	ef 90       	pop	r14
    3e26:	df 90       	pop	r13
    3e28:	cf 90       	pop	r12
    3e2a:	bf 90       	pop	r11
    3e2c:	af 90       	pop	r10
    3e2e:	9f 90       	pop	r9
    3e30:	8f 90       	pop	r8
    3e32:	08 95       	ret

00003e34 <initialiseSystem>:
    3e34:	81 b1       	in	r24, 0x01	; 1
    3e36:	81 68       	ori	r24, 0x81	; 129
    3e38:	81 b9       	out	0x01, r24	; 1
    3e3a:	0e 94 48 09 	call	0x1290	; 0x1290 <trace_init>
    3e3e:	80 e0       	ldi	r24, 0x00	; 0
    3e40:	0e 94 2c 2a 	call	0x5458	; 0x5458 <stdioCreate>
    3e44:	85 e0       	ldi	r24, 0x05	; 5
    3e46:	11 d0       	rcall	.+34     	; 0x3e6a <hal_create>
    3e48:	60 91 29 1b 	lds	r22, 0x1B29	; 0x801b29 <_downlinkMessagebuffer>
    3e4c:	70 91 2a 1b 	lds	r23, 0x1B2A	; 0x801b2a <_downlinkMessagebuffer+0x1>
    3e50:	81 e0       	ldi	r24, 0x01	; 1
    3e52:	c3 d3       	rcall	.+1926   	; 0x45da <lora_driver_create>
    3e54:	69 c0       	rjmp	.+210    	; 0x3f28 <hih8120Create>
    3e56:	08 95       	ret

00003e58 <main>:
	//bytesToSend=xMessageBufferSend(xMessageBuffer,(void*) &payload,sizeof(payload),portMAX_DELAY);
}
/*-----------------------------------------------------------*/
int main(void)
{
	initialiseSystem(); // Must be done as the very first thing!!
    3e58:	ed df       	rcall	.-38     	; 0x3e34 <initialiseSystem>
	printf("Program Started!!\n");
    3e5a:	80 e7       	ldi	r24, 0x70	; 112
    3e5c:	95 e0       	ldi	r25, 0x05	; 5
    3e5e:	0e 94 d9 2f 	call	0x5fb2	; 0x5fb2 <puts>
	create_tasks_and_semaphores();
    3e62:	4a df       	rcall	.-364    	; 0x3cf8 <create_tasks_and_semaphores>
	vTaskStartScheduler(); // Initialise and run the freeRTOS scheduler. Execution should never return from here.
    3e64:	0e 94 6a 16 	call	0x2cd4	; 0x2cd4 <vTaskStartScheduler>
    3e68:	ff cf       	rjmp	.-2      	; 0x3e68 <main+0x10>

00003e6a <hal_create>:
    3e6a:	e7 e4       	ldi	r30, 0x47	; 71
    3e6c:	fb e1       	ldi	r31, 0x1B	; 27
    3e6e:	22 e4       	ldi	r18, 0x42	; 66
    3e70:	36 e2       	ldi	r19, 0x26	; 38
    3e72:	31 83       	std	Z+1, r19	; 0x01
    3e74:	20 83       	st	Z, r18
    3e76:	25 e4       	ldi	r18, 0x45	; 69
    3e78:	36 e2       	ldi	r19, 0x26	; 38
    3e7a:	33 83       	std	Z+3, r19	; 0x03
    3e7c:	22 83       	std	Z+2, r18	; 0x02
    3e7e:	20 e5       	ldi	r18, 0x50	; 80
    3e80:	36 e2       	ldi	r19, 0x26	; 38
    3e82:	35 83       	std	Z+5, r19	; 0x05
    3e84:	24 83       	std	Z+4, r18	; 0x04
    3e86:	24 e5       	ldi	r18, 0x54	; 84
    3e88:	36 e2       	ldi	r19, 0x26	; 38
    3e8a:	37 83       	std	Z+7, r19	; 0x07
    3e8c:	26 83       	std	Z+6, r18	; 0x06
    3e8e:	2a e5       	ldi	r18, 0x5A	; 90
    3e90:	36 e2       	ldi	r19, 0x26	; 38
    3e92:	31 87       	std	Z+9, r19	; 0x09
    3e94:	20 87       	std	Z+8, r18	; 0x08
    3e96:	26 e6       	ldi	r18, 0x66	; 102
    3e98:	36 e2       	ldi	r19, 0x26	; 38
    3e9a:	33 87       	std	Z+11, r19	; 0x0b
    3e9c:	22 87       	std	Z+10, r18	; 0x0a
    3e9e:	2b e6       	ldi	r18, 0x6B	; 107
    3ea0:	36 e2       	ldi	r19, 0x26	; 38
    3ea2:	35 87       	std	Z+13, r19	; 0x0d
    3ea4:	24 87       	std	Z+12, r18	; 0x0c
    3ea6:	27 e7       	ldi	r18, 0x77	; 119
    3ea8:	36 e2       	ldi	r19, 0x26	; 38
    3eaa:	37 87       	std	Z+15, r19	; 0x0f
    3eac:	26 87       	std	Z+14, r18	; 0x0e
    3eae:	27 e5       	ldi	r18, 0x57	; 87
    3eb0:	36 e2       	ldi	r19, 0x26	; 38
    3eb2:	31 8b       	std	Z+17, r19	; 0x11
    3eb4:	20 8b       	std	Z+16, r18	; 0x10
    3eb6:	2c e7       	ldi	r18, 0x7C	; 124
    3eb8:	36 e2       	ldi	r19, 0x26	; 38
    3eba:	33 8b       	std	Z+19, r19	; 0x13
    3ebc:	22 8b       	std	Z+18, r18	; 0x12
    3ebe:	29 e8       	ldi	r18, 0x89	; 137
    3ec0:	36 e2       	ldi	r19, 0x26	; 38
    3ec2:	35 8b       	std	Z+21, r19	; 0x15
    3ec4:	24 8b       	std	Z+20, r18	; 0x14
    3ec6:	68 2f       	mov	r22, r24
    3ec8:	cf 01       	movw	r24, r30
    3eca:	53 c1       	rjmp	.+678    	; 0x4172 <led_create>
    3ecc:	08 95       	ret

00003ece <_hihTwiCallback>:
    3ece:	65 30       	cpi	r22, 0x05	; 5
    3ed0:	f1 f4       	brne	.+60     	; 0x3f0e <_hihTwiCallback+0x40>
    3ed2:	fa 01       	movw	r30, r20
    3ed4:	80 81       	ld	r24, Z
    3ed6:	8f 73       	andi	r24, 0x3F	; 63
    3ed8:	90 e0       	ldi	r25, 0x00	; 0
    3eda:	98 2f       	mov	r25, r24
    3edc:	88 27       	eor	r24, r24
    3ede:	21 81       	ldd	r18, Z+1	; 0x01
    3ee0:	82 2b       	or	r24, r18
    3ee2:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <_hum+0x1>
    3ee6:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <_hum>
    3eea:	82 81       	ldd	r24, Z+2	; 0x02
    3eec:	f0 e4       	ldi	r31, 0x40	; 64
    3eee:	8f 9f       	mul	r24, r31
    3ef0:	c0 01       	movw	r24, r0
    3ef2:	11 24       	eor	r1, r1
    3ef4:	fa 01       	movw	r30, r20
    3ef6:	23 81       	ldd	r18, Z+3	; 0x03
    3ef8:	26 95       	lsr	r18
    3efa:	26 95       	lsr	r18
    3efc:	82 2b       	or	r24, r18
    3efe:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <_temp+0x1>
    3f02:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <_temp>
    3f06:	81 e0       	ldi	r24, 0x01	; 1
    3f08:	80 93 d6 19 	sts	0x19D6, r24	; 0x8019d6 <_measuringIsReady>
    3f0c:	08 95       	ret
    3f0e:	64 30       	cpi	r22, 0x04	; 4
    3f10:	51 f0       	breq	.+20     	; 0x3f26 <_hihTwiCallback+0x58>
    3f12:	80 e0       	ldi	r24, 0x00	; 0
    3f14:	90 e4       	ldi	r25, 0x40	; 64
    3f16:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <_temp+0x1>
    3f1a:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <_temp>
    3f1e:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <_hum+0x1>
    3f22:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <_hum>
    3f26:	08 95       	ret

00003f28 <hih8120Create>:
    3f28:	0f 93       	push	r16
    3f2a:	1f 93       	push	r17
    3f2c:	07 e6       	ldi	r16, 0x67	; 103
    3f2e:	1f e1       	ldi	r17, 0x1F	; 31
    3f30:	20 e0       	ldi	r18, 0x00	; 0
    3f32:	34 e2       	ldi	r19, 0x24	; 36
    3f34:	44 ef       	ldi	r20, 0xF4	; 244
    3f36:	50 e0       	ldi	r21, 0x00	; 0
    3f38:	60 e0       	ldi	r22, 0x00	; 0
    3f3a:	87 e2       	ldi	r24, 0x27	; 39
    3f3c:	0e 94 66 2a 	call	0x54cc	; 0x54cc <twiCreate>
    3f40:	90 93 d8 19 	sts	0x19D8, r25	; 0x8019d8 <_hih8120Handler+0x1>
    3f44:	80 93 d7 19 	sts	0x19D7, r24	; 0x8019d7 <_hih8120Handler>
    3f48:	21 e0       	ldi	r18, 0x01	; 1
    3f4a:	89 2b       	or	r24, r25
    3f4c:	09 f0       	breq	.+2      	; 0x3f50 <hih8120Create+0x28>
    3f4e:	20 e0       	ldi	r18, 0x00	; 0
    3f50:	82 2f       	mov	r24, r18
    3f52:	1f 91       	pop	r17
    3f54:	0f 91       	pop	r16
    3f56:	08 95       	ret

00003f58 <hih8120IsReady>:
    3f58:	80 91 d6 19 	lds	r24, 0x19D6	; 0x8019d6 <_measuringIsReady>
    3f5c:	08 95       	ret

00003f5e <hih8120Wakeup>:
    3f5e:	80 91 d7 19 	lds	r24, 0x19D7	; 0x8019d7 <_hih8120Handler>
    3f62:	90 91 d8 19 	lds	r25, 0x19D8	; 0x8019d8 <_hih8120Handler+0x1>
    3f66:	00 97       	sbiw	r24, 0x00	; 0
    3f68:	59 f0       	breq	.+22     	; 0x3f80 <hih8120Wakeup+0x22>
    3f6a:	40 e0       	ldi	r20, 0x00	; 0
    3f6c:	60 e0       	ldi	r22, 0x00	; 0
    3f6e:	70 e0       	ldi	r23, 0x00	; 0
    3f70:	0e 94 b7 2a 	call	0x556e	; 0x556e <twiTransmit>
    3f74:	84 30       	cpi	r24, 0x04	; 4
    3f76:	31 f4       	brne	.+12     	; 0x3f84 <hih8120Wakeup+0x26>
    3f78:	10 92 d6 19 	sts	0x19D6, r1	; 0x8019d6 <_measuringIsReady>
    3f7c:	80 e0       	ldi	r24, 0x00	; 0
    3f7e:	08 95       	ret
    3f80:	82 e0       	ldi	r24, 0x02	; 2
    3f82:	08 95       	ret
    3f84:	83 e0       	ldi	r24, 0x03	; 3
    3f86:	08 95       	ret

00003f88 <hih8120Meassure>:
    3f88:	80 91 d7 19 	lds	r24, 0x19D7	; 0x8019d7 <_hih8120Handler>
    3f8c:	90 91 d8 19 	lds	r25, 0x19D8	; 0x8019d8 <_hih8120Handler+0x1>
    3f90:	00 97       	sbiw	r24, 0x00	; 0
    3f92:	39 f0       	breq	.+14     	; 0x3fa2 <hih8120Meassure+0x1a>
    3f94:	64 e0       	ldi	r22, 0x04	; 4
    3f96:	0e 94 03 2b 	call	0x5606	; 0x5606 <twiReceive>
    3f9a:	85 30       	cpi	r24, 0x05	; 5
    3f9c:	21 f0       	breq	.+8      	; 0x3fa6 <hih8120Meassure+0x1e>
    3f9e:	83 e0       	ldi	r24, 0x03	; 3
    3fa0:	08 95       	ret
    3fa2:	82 e0       	ldi	r24, 0x02	; 2
    3fa4:	08 95       	ret
    3fa6:	80 e0       	ldi	r24, 0x00	; 0
    3fa8:	08 95       	ret

00003faa <hih8120GetHumidity>:
    3faa:	60 91 08 02 	lds	r22, 0x0208	; 0x800208 <_hum>
    3fae:	70 91 09 02 	lds	r23, 0x0209	; 0x800209 <_hum+0x1>
    3fb2:	80 e0       	ldi	r24, 0x00	; 0
    3fb4:	90 e0       	ldi	r25, 0x00	; 0
    3fb6:	0e 94 0d 2d 	call	0x5a1a	; 0x5a1a <__floatunsisf>
    3fba:	20 e0       	ldi	r18, 0x00	; 0
    3fbc:	30 e0       	ldi	r19, 0x00	; 0
    3fbe:	48 ec       	ldi	r20, 0xC8	; 200
    3fc0:	52 e4       	ldi	r21, 0x42	; 66
    3fc2:	0e 94 9b 2d 	call	0x5b36	; 0x5b36 <__mulsf3>
    3fc6:	20 e0       	ldi	r18, 0x00	; 0
    3fc8:	38 ef       	ldi	r19, 0xF8	; 248
    3fca:	4f e7       	ldi	r20, 0x7F	; 127
    3fcc:	56 e4       	ldi	r21, 0x46	; 70
    3fce:	0c 94 74 2c 	jmp	0x58e8	; 0x58e8 <__divsf3>
    3fd2:	08 95       	ret

00003fd4 <hih8120GetHumidityPercent_x10>:
    3fd4:	ea df       	rcall	.-44     	; 0x3faa <hih8120GetHumidity>
    3fd6:	20 e0       	ldi	r18, 0x00	; 0
    3fd8:	30 e0       	ldi	r19, 0x00	; 0
    3fda:	40 e2       	ldi	r20, 0x20	; 32
    3fdc:	51 e4       	ldi	r21, 0x41	; 65
    3fde:	0e 94 9b 2d 	call	0x5b36	; 0x5b36 <__mulsf3>
    3fe2:	0e 94 e1 2c 	call	0x59c2	; 0x59c2 <__fixunssfsi>
    3fe6:	cb 01       	movw	r24, r22
    3fe8:	08 95       	ret

00003fea <hih8120GetTemperature>:
    3fea:	60 91 06 02 	lds	r22, 0x0206	; 0x800206 <_temp>
    3fee:	70 91 07 02 	lds	r23, 0x0207	; 0x800207 <_temp+0x1>
    3ff2:	80 e0       	ldi	r24, 0x00	; 0
    3ff4:	90 e0       	ldi	r25, 0x00	; 0
    3ff6:	0e 94 0d 2d 	call	0x5a1a	; 0x5a1a <__floatunsisf>
    3ffa:	20 e0       	ldi	r18, 0x00	; 0
    3ffc:	30 e0       	ldi	r19, 0x00	; 0
    3ffe:	45 e2       	ldi	r20, 0x25	; 37
    4000:	53 e4       	ldi	r21, 0x43	; 67
    4002:	0e 94 9b 2d 	call	0x5b36	; 0x5b36 <__mulsf3>
    4006:	20 e0       	ldi	r18, 0x00	; 0
    4008:	38 ef       	ldi	r19, 0xF8	; 248
    400a:	4f e7       	ldi	r20, 0x7F	; 127
    400c:	56 e4       	ldi	r21, 0x46	; 70
    400e:	0e 94 74 2c 	call	0x58e8	; 0x58e8 <__divsf3>
    4012:	20 e0       	ldi	r18, 0x00	; 0
    4014:	30 e0       	ldi	r19, 0x00	; 0
    4016:	40 e2       	ldi	r20, 0x20	; 32
    4018:	52 e4       	ldi	r21, 0x42	; 66
    401a:	0c 94 0f 2c 	jmp	0x581e	; 0x581e <__subsf3>
    401e:	08 95       	ret

00004020 <hih8120GetTemperature_x10>:
    4020:	e4 df       	rcall	.-56     	; 0x3fea <hih8120GetTemperature>
    4022:	20 e0       	ldi	r18, 0x00	; 0
    4024:	30 e0       	ldi	r19, 0x00	; 0
    4026:	40 e2       	ldi	r20, 0x20	; 32
    4028:	51 e4       	ldi	r21, 0x41	; 65
    402a:	0e 94 9b 2d 	call	0x5b36	; 0x5b36 <__mulsf3>
    402e:	0e 94 dc 2c 	call	0x59b8	; 0x59b8 <__fixsfsi>
    4032:	cb 01       	movw	r24, r22
    4034:	08 95       	ret

00004036 <_turn_off>:
    4036:	cf 93       	push	r28
    4038:	df 93       	push	r29
    403a:	90 e0       	ldi	r25, 0x00	; 0
    403c:	fc 01       	movw	r30, r24
    403e:	ee 0f       	add	r30, r30
    4040:	ff 1f       	adc	r31, r31
    4042:	e8 0f       	add	r30, r24
    4044:	f9 1f       	adc	r31, r25
    4046:	ee 0f       	add	r30, r30
    4048:	ff 1f       	adc	r31, r31
    404a:	e7 52       	subi	r30, 0x27	; 39
    404c:	f6 4e       	sbci	r31, 0xE6	; 230
    404e:	23 81       	ldd	r18, Z+3	; 0x03
    4050:	21 11       	cpse	r18, r1
    4052:	0a c0       	rjmp	.+20     	; 0x4068 <_turn_off+0x32>
    4054:	ef 01       	movw	r28, r30
    4056:	e0 91 4f 1b 	lds	r30, 0x1B4F	; 0x801b4f <register_access+0x8>
    405a:	f0 91 50 1b 	lds	r31, 0x1B50	; 0x801b50 <register_access+0x9>
    405e:	6a 81       	ldd	r22, Y+2	; 0x02
    4060:	88 81       	ld	r24, Y
    4062:	99 81       	ldd	r25, Y+1	; 0x01
    4064:	19 95       	eicall
    4066:	12 c0       	rjmp	.+36     	; 0x408c <_turn_off+0x56>
    4068:	dc 01       	movw	r26, r24
    406a:	aa 0f       	add	r26, r26
    406c:	bb 1f       	adc	r27, r27
    406e:	ed 01       	movw	r28, r26
    4070:	c8 0f       	add	r28, r24
    4072:	d9 1f       	adc	r29, r25
    4074:	cc 0f       	add	r28, r28
    4076:	dd 1f       	adc	r29, r29
    4078:	c7 52       	subi	r28, 0x27	; 39
    407a:	d6 4e       	sbci	r29, 0xE6	; 230
    407c:	e0 91 59 1b 	lds	r30, 0x1B59	; 0x801b59 <register_access+0x12>
    4080:	f0 91 5a 1b 	lds	r31, 0x1B5A	; 0x801b5a <register_access+0x13>
    4084:	6a 81       	ldd	r22, Y+2	; 0x02
    4086:	88 81       	ld	r24, Y
    4088:	99 81       	ldd	r25, Y+1	; 0x01
    408a:	19 95       	eicall
    408c:	df 91       	pop	r29
    408e:	cf 91       	pop	r28
    4090:	08 95       	ret

00004092 <_turn_on>:
    4092:	cf 93       	push	r28
    4094:	df 93       	push	r29
    4096:	90 e0       	ldi	r25, 0x00	; 0
    4098:	fc 01       	movw	r30, r24
    409a:	ee 0f       	add	r30, r30
    409c:	ff 1f       	adc	r31, r31
    409e:	e8 0f       	add	r30, r24
    40a0:	f9 1f       	adc	r31, r25
    40a2:	ee 0f       	add	r30, r30
    40a4:	ff 1f       	adc	r31, r31
    40a6:	e7 52       	subi	r30, 0x27	; 39
    40a8:	f6 4e       	sbci	r31, 0xE6	; 230
    40aa:	23 81       	ldd	r18, Z+3	; 0x03
    40ac:	21 11       	cpse	r18, r1
    40ae:	0a c0       	rjmp	.+20     	; 0x40c4 <_turn_on+0x32>
    40b0:	ef 01       	movw	r28, r30
    40b2:	e0 91 59 1b 	lds	r30, 0x1B59	; 0x801b59 <register_access+0x12>
    40b6:	f0 91 5a 1b 	lds	r31, 0x1B5A	; 0x801b5a <register_access+0x13>
    40ba:	6a 81       	ldd	r22, Y+2	; 0x02
    40bc:	88 81       	ld	r24, Y
    40be:	99 81       	ldd	r25, Y+1	; 0x01
    40c0:	19 95       	eicall
    40c2:	12 c0       	rjmp	.+36     	; 0x40e8 <_turn_on+0x56>
    40c4:	dc 01       	movw	r26, r24
    40c6:	aa 0f       	add	r26, r26
    40c8:	bb 1f       	adc	r27, r27
    40ca:	ed 01       	movw	r28, r26
    40cc:	c8 0f       	add	r28, r24
    40ce:	d9 1f       	adc	r29, r25
    40d0:	cc 0f       	add	r28, r28
    40d2:	dd 1f       	adc	r29, r29
    40d4:	c7 52       	subi	r28, 0x27	; 39
    40d6:	d6 4e       	sbci	r29, 0xE6	; 230
    40d8:	e0 91 4f 1b 	lds	r30, 0x1B4F	; 0x801b4f <register_access+0x8>
    40dc:	f0 91 50 1b 	lds	r31, 0x1B50	; 0x801b50 <register_access+0x9>
    40e0:	6a 81       	ldd	r22, Y+2	; 0x02
    40e2:	88 81       	ld	r24, Y
    40e4:	99 81       	ldd	r25, Y+1	; 0x01
    40e6:	19 95       	eicall
    40e8:	df 91       	pop	r29
    40ea:	cf 91       	pop	r28
    40ec:	08 95       	ret

000040ee <_hal_led_task>:
    40ee:	0f 2e       	mov	r0, r31
    40f0:	f7 e4       	ldi	r31, 0x47	; 71
    40f2:	cf 2e       	mov	r12, r31
    40f4:	fb e1       	ldi	r31, 0x1B	; 27
    40f6:	df 2e       	mov	r13, r31
    40f8:	f0 2d       	mov	r31, r0
    40fa:	04 e0       	ldi	r16, 0x04	; 4
    40fc:	c9 ed       	ldi	r28, 0xD9	; 217
    40fe:	d9 e1       	ldi	r29, 0x19	; 25
    4100:	10 e0       	ldi	r17, 0x00	; 0
    4102:	8c 81       	ldd	r24, Y+4	; 0x04
    4104:	81 30       	cpi	r24, 0x01	; 1
    4106:	69 f0       	breq	.+26     	; 0x4122 <_hal_led_task+0x34>
    4108:	e8 f0       	brcs	.+58     	; 0x4144 <_hal_led_task+0x56>
    410a:	82 30       	cpi	r24, 0x02	; 2
    410c:	39 f5       	brne	.+78     	; 0x415c <_hal_led_task+0x6e>
    410e:	d6 01       	movw	r26, r12
    4110:	1c 96       	adiw	r26, 0x0c	; 12
    4112:	ed 91       	ld	r30, X+
    4114:	fc 91       	ld	r31, X
    4116:	1d 97       	sbiw	r26, 0x0d	; 13
    4118:	6a 81       	ldd	r22, Y+2	; 0x02
    411a:	88 81       	ld	r24, Y
    411c:	99 81       	ldd	r25, Y+1	; 0x01
    411e:	19 95       	eicall
    4120:	1d c0       	rjmp	.+58     	; 0x415c <_hal_led_task+0x6e>
    4122:	8d 81       	ldd	r24, Y+5	; 0x05
    4124:	8f 5f       	subi	r24, 0xFF	; 255
    4126:	8a 30       	cpi	r24, 0x0A	; 10
    4128:	10 f4       	brcc	.+4      	; 0x412e <_hal_led_task+0x40>
    412a:	8d 83       	std	Y+5, r24	; 0x05
    412c:	17 c0       	rjmp	.+46     	; 0x415c <_hal_led_task+0x6e>
    412e:	1d 82       	std	Y+5, r1	; 0x05
    4130:	d6 01       	movw	r26, r12
    4132:	1c 96       	adiw	r26, 0x0c	; 12
    4134:	ed 91       	ld	r30, X+
    4136:	fc 91       	ld	r31, X
    4138:	1d 97       	sbiw	r26, 0x0d	; 13
    413a:	6a 81       	ldd	r22, Y+2	; 0x02
    413c:	88 81       	ld	r24, Y
    413e:	99 81       	ldd	r25, Y+1	; 0x01
    4140:	19 95       	eicall
    4142:	0c c0       	rjmp	.+24     	; 0x415c <_hal_led_task+0x6e>
    4144:	8d 81       	ldd	r24, Y+5	; 0x05
    4146:	88 23       	and	r24, r24
    4148:	31 f0       	breq	.+12     	; 0x4156 <_hal_led_task+0x68>
    414a:	81 2f       	mov	r24, r17
    414c:	a2 df       	rcall	.-188    	; 0x4092 <_turn_on>
    414e:	8d 81       	ldd	r24, Y+5	; 0x05
    4150:	81 50       	subi	r24, 0x01	; 1
    4152:	8d 83       	std	Y+5, r24	; 0x05
    4154:	03 c0       	rjmp	.+6      	; 0x415c <_hal_led_task+0x6e>
    4156:	0c 83       	std	Y+4, r16	; 0x04
    4158:	81 2f       	mov	r24, r17
    415a:	6d df       	rcall	.-294    	; 0x4036 <_turn_off>
    415c:	1f 5f       	subi	r17, 0xFF	; 255
    415e:	26 96       	adiw	r28, 0x06	; 6
    4160:	14 30       	cpi	r17, 0x04	; 4
    4162:	79 f6       	brne	.-98     	; 0x4102 <_hal_led_task+0x14>
    4164:	65 e0       	ldi	r22, 0x05	; 5
    4166:	70 e0       	ldi	r23, 0x00	; 0
    4168:	80 e0       	ldi	r24, 0x00	; 0
    416a:	90 e0       	ldi	r25, 0x00	; 0
    416c:	0e 94 0b 18 	call	0x3016	; 0x3016 <vTaskDelay>
    4170:	c5 cf       	rjmp	.-118    	; 0x40fc <_hal_led_task+0xe>

00004172 <led_create>:
    4172:	cf 92       	push	r12
    4174:	df 92       	push	r13
    4176:	ef 92       	push	r14
    4178:	ff 92       	push	r15
    417a:	0f 93       	push	r16
    417c:	1f 93       	push	r17
    417e:	cf 93       	push	r28
    4180:	df 93       	push	r29
    4182:	06 2f       	mov	r16, r22
    4184:	0f 2e       	mov	r0, r31
    4186:	f7 e4       	ldi	r31, 0x47	; 71
    4188:	ef 2e       	mov	r14, r31
    418a:	fb e1       	ldi	r31, 0x1B	; 27
    418c:	ff 2e       	mov	r15, r31
    418e:	f0 2d       	mov	r31, r0
    4190:	d7 01       	movw	r26, r14
    4192:	18 96       	adiw	r26, 0x08	; 8
    4194:	ed 91       	ld	r30, X+
    4196:	fc 91       	ld	r31, X
    4198:	19 97       	sbiw	r26, 0x09	; 9
    419a:	66 e0       	ldi	r22, 0x06	; 6
    419c:	87 e2       	ldi	r24, 0x27	; 39
    419e:	90 e0       	ldi	r25, 0x00	; 0
    41a0:	19 95       	eicall
    41a2:	c9 ed       	ldi	r28, 0xD9	; 217
    41a4:	d9 e1       	ldi	r29, 0x19	; 25
    41a6:	0f 2e       	mov	r0, r31
    41a8:	f8 e2       	ldi	r31, 0x28	; 40
    41aa:	cf 2e       	mov	r12, r31
    41ac:	d1 2c       	mov	r13, r1
    41ae:	f0 2d       	mov	r31, r0
    41b0:	d9 82       	std	Y+1, r13	; 0x01
    41b2:	c8 82       	st	Y, r12
    41b4:	86 e0       	ldi	r24, 0x06	; 6
    41b6:	8a 83       	std	Y+2, r24	; 0x02
    41b8:	1b 82       	std	Y+3, r1	; 0x03
    41ba:	14 e0       	ldi	r17, 0x04	; 4
    41bc:	1c 83       	std	Y+4, r17	; 0x04
    41be:	80 e0       	ldi	r24, 0x00	; 0
    41c0:	3a df       	rcall	.-396    	; 0x4036 <_turn_off>
    41c2:	d7 01       	movw	r26, r14
    41c4:	18 96       	adiw	r26, 0x08	; 8
    41c6:	ed 91       	ld	r30, X+
    41c8:	fc 91       	ld	r31, X
    41ca:	19 97       	sbiw	r26, 0x09	; 9
    41cc:	67 e0       	ldi	r22, 0x07	; 7
    41ce:	87 e2       	ldi	r24, 0x27	; 39
    41d0:	90 e0       	ldi	r25, 0x00	; 0
    41d2:	19 95       	eicall
    41d4:	df 82       	std	Y+7, r13	; 0x07
    41d6:	ce 82       	std	Y+6, r12	; 0x06
    41d8:	87 e0       	ldi	r24, 0x07	; 7
    41da:	88 87       	std	Y+8, r24	; 0x08
    41dc:	19 86       	std	Y+9, r1	; 0x09
    41de:	1a 87       	std	Y+10, r17	; 0x0a
    41e0:	81 e0       	ldi	r24, 0x01	; 1
    41e2:	29 df       	rcall	.-430    	; 0x4036 <_turn_off>
    41e4:	d7 01       	movw	r26, r14
    41e6:	18 96       	adiw	r26, 0x08	; 8
    41e8:	ed 91       	ld	r30, X+
    41ea:	fc 91       	ld	r31, X
    41ec:	19 97       	sbiw	r26, 0x09	; 9
    41ee:	65 e0       	ldi	r22, 0x05	; 5
    41f0:	83 e3       	ldi	r24, 0x33	; 51
    41f2:	90 e0       	ldi	r25, 0x00	; 0
    41f4:	19 95       	eicall
    41f6:	d7 01       	movw	r26, r14
    41f8:	18 96       	adiw	r26, 0x08	; 8
    41fa:	ed 91       	ld	r30, X+
    41fc:	fc 91       	ld	r31, X
    41fe:	19 97       	sbiw	r26, 0x09	; 9
    4200:	61 e0       	ldi	r22, 0x01	; 1
    4202:	84 e3       	ldi	r24, 0x34	; 52
    4204:	90 e0       	ldi	r25, 0x00	; 0
    4206:	19 95       	eicall
    4208:	84 e3       	ldi	r24, 0x34	; 52
    420a:	90 e0       	ldi	r25, 0x00	; 0
    420c:	9d 87       	std	Y+13, r25	; 0x0d
    420e:	8c 87       	std	Y+12, r24	; 0x0c
    4210:	85 e0       	ldi	r24, 0x05	; 5
    4212:	8e 87       	std	Y+14, r24	; 0x0e
    4214:	1f 86       	std	Y+15, r1	; 0x0f
    4216:	18 8b       	std	Y+16, r17	; 0x10
    4218:	82 e0       	ldi	r24, 0x02	; 2
    421a:	0d df       	rcall	.-486    	; 0x4036 <_turn_off>
    421c:	d7 01       	movw	r26, r14
    421e:	18 96       	adiw	r26, 0x08	; 8
    4220:	ed 91       	ld	r30, X+
    4222:	fc 91       	ld	r31, X
    4224:	19 97       	sbiw	r26, 0x09	; 9
    4226:	64 e0       	ldi	r22, 0x04	; 4
    4228:	81 e0       	ldi	r24, 0x01	; 1
    422a:	91 e0       	ldi	r25, 0x01	; 1
    422c:	19 95       	eicall
    422e:	d7 01       	movw	r26, r14
    4230:	18 96       	adiw	r26, 0x08	; 8
    4232:	ed 91       	ld	r30, X+
    4234:	fc 91       	ld	r31, X
    4236:	19 97       	sbiw	r26, 0x09	; 9
    4238:	61 e0       	ldi	r22, 0x01	; 1
    423a:	82 e0       	ldi	r24, 0x02	; 2
    423c:	91 e0       	ldi	r25, 0x01	; 1
    423e:	19 95       	eicall
    4240:	82 e0       	ldi	r24, 0x02	; 2
    4242:	91 e0       	ldi	r25, 0x01	; 1
    4244:	9b 8b       	std	Y+19, r25	; 0x13
    4246:	8a 8b       	std	Y+18, r24	; 0x12
    4248:	1c 8b       	std	Y+20, r17	; 0x14
    424a:	1d 8a       	std	Y+21, r1	; 0x15
    424c:	1e 8b       	std	Y+22, r17	; 0x16
    424e:	83 e0       	ldi	r24, 0x03	; 3
    4250:	f2 de       	rcall	.-540    	; 0x4036 <_turn_off>
    4252:	e1 2c       	mov	r14, r1
    4254:	f1 2c       	mov	r15, r1
    4256:	20 e0       	ldi	r18, 0x00	; 0
    4258:	30 e0       	ldi	r19, 0x00	; 0
    425a:	40 ec       	ldi	r20, 0xC0	; 192
    425c:	50 e0       	ldi	r21, 0x00	; 0
    425e:	62 e8       	ldi	r22, 0x82	; 130
    4260:	75 e0       	ldi	r23, 0x05	; 5
    4262:	87 e7       	ldi	r24, 0x77	; 119
    4264:	90 e2       	ldi	r25, 0x20	; 32
    4266:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <xTaskCreate>
    426a:	df 91       	pop	r29
    426c:	cf 91       	pop	r28
    426e:	1f 91       	pop	r17
    4270:	0f 91       	pop	r16
    4272:	ff 90       	pop	r15
    4274:	ef 90       	pop	r14
    4276:	df 90       	pop	r13
    4278:	cf 90       	pop	r12
    427a:	08 95       	ret

0000427c <led_slow_blink>:
    427c:	0f 93       	push	r16
    427e:	1f 93       	push	r17
    4280:	cf 93       	push	r28
    4282:	df 93       	push	r29
    4284:	c8 2f       	mov	r28, r24
    4286:	d0 e0       	ldi	r29, 0x00	; 0
    4288:	8e 01       	movw	r16, r28
    428a:	00 0f       	add	r16, r16
    428c:	11 1f       	adc	r17, r17
    428e:	d8 01       	movw	r26, r16
    4290:	ac 0f       	add	r26, r28
    4292:	bd 1f       	adc	r27, r29
    4294:	aa 0f       	add	r26, r26
    4296:	bb 1f       	adc	r27, r27
    4298:	a7 52       	subi	r26, 0x27	; 39
    429a:	b6 4e       	sbci	r27, 0xE6	; 230
    429c:	e0 91 53 1b 	lds	r30, 0x1B53	; 0x801b53 <register_access+0xc>
    42a0:	f0 91 54 1b 	lds	r31, 0x1B54	; 0x801b54 <register_access+0xd>
    42a4:	12 96       	adiw	r26, 0x02	; 2
    42a6:	6c 91       	ld	r22, X
    42a8:	12 97       	sbiw	r26, 0x02	; 2
    42aa:	8d 91       	ld	r24, X+
    42ac:	9c 91       	ld	r25, X
    42ae:	19 95       	eicall
    42b0:	c0 0f       	add	r28, r16
    42b2:	d1 1f       	adc	r29, r17
    42b4:	cc 0f       	add	r28, r28
    42b6:	dd 1f       	adc	r29, r29
    42b8:	c7 52       	subi	r28, 0x27	; 39
    42ba:	d6 4e       	sbci	r29, 0xE6	; 230
    42bc:	81 e0       	ldi	r24, 0x01	; 1
    42be:	8c 83       	std	Y+4, r24	; 0x04
    42c0:	df 91       	pop	r29
    42c2:	cf 91       	pop	r28
    42c4:	1f 91       	pop	r17
    42c6:	0f 91       	pop	r16
    42c8:	08 95       	ret

000042ca <led_fast_blink>:
    42ca:	0f 93       	push	r16
    42cc:	1f 93       	push	r17
    42ce:	cf 93       	push	r28
    42d0:	df 93       	push	r29
    42d2:	c8 2f       	mov	r28, r24
    42d4:	d0 e0       	ldi	r29, 0x00	; 0
    42d6:	8e 01       	movw	r16, r28
    42d8:	00 0f       	add	r16, r16
    42da:	11 1f       	adc	r17, r17
    42dc:	d8 01       	movw	r26, r16
    42de:	ac 0f       	add	r26, r28
    42e0:	bd 1f       	adc	r27, r29
    42e2:	aa 0f       	add	r26, r26
    42e4:	bb 1f       	adc	r27, r27
    42e6:	a7 52       	subi	r26, 0x27	; 39
    42e8:	b6 4e       	sbci	r27, 0xE6	; 230
    42ea:	e0 91 53 1b 	lds	r30, 0x1B53	; 0x801b53 <register_access+0xc>
    42ee:	f0 91 54 1b 	lds	r31, 0x1B54	; 0x801b54 <register_access+0xd>
    42f2:	12 96       	adiw	r26, 0x02	; 2
    42f4:	6c 91       	ld	r22, X
    42f6:	12 97       	sbiw	r26, 0x02	; 2
    42f8:	8d 91       	ld	r24, X+
    42fa:	9c 91       	ld	r25, X
    42fc:	19 95       	eicall
    42fe:	c0 0f       	add	r28, r16
    4300:	d1 1f       	adc	r29, r17
    4302:	cc 0f       	add	r28, r28
    4304:	dd 1f       	adc	r29, r29
    4306:	c7 52       	subi	r28, 0x27	; 39
    4308:	d6 4e       	sbci	r29, 0xE6	; 230
    430a:	82 e0       	ldi	r24, 0x02	; 2
    430c:	8c 83       	std	Y+4, r24	; 0x04
    430e:	df 91       	pop	r29
    4310:	cf 91       	pop	r28
    4312:	1f 91       	pop	r17
    4314:	0f 91       	pop	r16
    4316:	08 95       	ret

00004318 <led_led_on>:
    4318:	28 2f       	mov	r18, r24
    431a:	30 e0       	ldi	r19, 0x00	; 0
    431c:	f9 01       	movw	r30, r18
    431e:	ee 0f       	add	r30, r30
    4320:	ff 1f       	adc	r31, r31
    4322:	e2 0f       	add	r30, r18
    4324:	f3 1f       	adc	r31, r19
    4326:	ee 0f       	add	r30, r30
    4328:	ff 1f       	adc	r31, r31
    432a:	e7 52       	subi	r30, 0x27	; 39
    432c:	f6 4e       	sbci	r31, 0xE6	; 230
    432e:	93 e0       	ldi	r25, 0x03	; 3
    4330:	94 83       	std	Z+4, r25	; 0x04
    4332:	af ce       	rjmp	.-674    	; 0x4092 <_turn_on>
    4334:	08 95       	ret

00004336 <led_led_off>:
    4336:	28 2f       	mov	r18, r24
    4338:	30 e0       	ldi	r19, 0x00	; 0
    433a:	f9 01       	movw	r30, r18
    433c:	ee 0f       	add	r30, r30
    433e:	ff 1f       	adc	r31, r31
    4340:	e2 0f       	add	r30, r18
    4342:	f3 1f       	adc	r31, r19
    4344:	ee 0f       	add	r30, r30
    4346:	ff 1f       	adc	r31, r31
    4348:	e7 52       	subi	r30, 0x27	; 39
    434a:	f6 4e       	sbci	r31, 0xE6	; 230
    434c:	94 e0       	ldi	r25, 0x04	; 4
    434e:	94 83       	std	Z+4, r25	; 0x04
    4350:	72 ce       	rjmp	.-796    	; 0x4036 <_turn_off>
    4352:	08 95       	ret

00004354 <led_long_puls>:
    4354:	90 e0       	ldi	r25, 0x00	; 0
    4356:	fc 01       	movw	r30, r24
    4358:	ee 0f       	add	r30, r30
    435a:	ff 1f       	adc	r31, r31
    435c:	df 01       	movw	r26, r30
    435e:	a8 0f       	add	r26, r24
    4360:	b9 1f       	adc	r27, r25
    4362:	aa 0f       	add	r26, r26
    4364:	bb 1f       	adc	r27, r27
    4366:	a7 52       	subi	r26, 0x27	; 39
    4368:	b6 4e       	sbci	r27, 0xE6	; 230
    436a:	24 e0       	ldi	r18, 0x04	; 4
    436c:	15 96       	adiw	r26, 0x05	; 5
    436e:	2c 93       	st	X, r18
    4370:	15 97       	sbiw	r26, 0x05	; 5
    4372:	fd 01       	movw	r30, r26
    4374:	14 82       	std	Z+4, r1	; 0x04
    4376:	08 95       	ret

00004378 <led_short_puls>:
    4378:	90 e0       	ldi	r25, 0x00	; 0
    437a:	fc 01       	movw	r30, r24
    437c:	ee 0f       	add	r30, r30
    437e:	ff 1f       	adc	r31, r31
    4380:	df 01       	movw	r26, r30
    4382:	a8 0f       	add	r26, r24
    4384:	b9 1f       	adc	r27, r25
    4386:	aa 0f       	add	r26, r26
    4388:	bb 1f       	adc	r27, r27
    438a:	a7 52       	subi	r26, 0x27	; 39
    438c:	b6 4e       	sbci	r27, 0xE6	; 230
    438e:	21 e0       	ldi	r18, 0x01	; 1
    4390:	15 96       	adiw	r26, 0x05	; 5
    4392:	2c 93       	st	X, r18
    4394:	15 97       	sbiw	r26, 0x05	; 5
    4396:	fd 01       	movw	r30, r26
    4398:	14 82       	std	Z+4, r1	; 0x04
    439a:	08 95       	ret

0000439c <_serial_call_back>:
    439c:	0f 93       	push	r16
    439e:	1f 93       	push	r17
    43a0:	cf 93       	push	r28
    43a2:	df 93       	push	r29
    43a4:	1f 92       	push	r1
    43a6:	1f 92       	push	r1
    43a8:	cd b7       	in	r28, 0x3d	; 61
    43aa:	de b7       	in	r29, 0x3e	; 62
    43ac:	8c 01       	movw	r16, r24
    43ae:	19 82       	std	Y+1, r1	; 0x01
    43b0:	2d c0       	rjmp	.+90     	; 0x440c <_serial_call_back+0x70>
    43b2:	e0 91 55 1a 	lds	r30, 0x1A55	; 0x801a55 <rec_buf_inp.2947>
    43b6:	ec 32       	cpi	r30, 0x2C	; 44
    43b8:	50 f4       	brcc	.+20     	; 0x43ce <_serial_call_back+0x32>
    43ba:	81 e0       	ldi	r24, 0x01	; 1
    43bc:	8e 0f       	add	r24, r30
    43be:	80 93 55 1a 	sts	0x1A55, r24	; 0x801a55 <rec_buf_inp.2947>
    43c2:	f0 e0       	ldi	r31, 0x00	; 0
    43c4:	e9 57       	subi	r30, 0x79	; 121
    43c6:	f5 4e       	sbci	r31, 0xE5	; 229
    43c8:	8a 81       	ldd	r24, Y+2	; 0x02
    43ca:	80 83       	st	Z, r24
    43cc:	02 c0       	rjmp	.+4      	; 0x43d2 <_serial_call_back+0x36>
    43ce:	10 92 55 1a 	sts	0x1A55, r1	; 0x801a55 <rec_buf_inp.2947>
    43d2:	8a 81       	ldd	r24, Y+2	; 0x02
    43d4:	8a 30       	cpi	r24, 0x0A	; 10
    43d6:	d1 f4       	brne	.+52     	; 0x440c <_serial_call_back+0x70>
    43d8:	40 91 55 1a 	lds	r20, 0x1A55	; 0x801a55 <rec_buf_inp.2947>
    43dc:	50 e0       	ldi	r21, 0x00	; 0
    43de:	fa 01       	movw	r30, r20
    43e0:	eb 57       	subi	r30, 0x7B	; 123
    43e2:	f5 4e       	sbci	r31, 0xE5	; 229
    43e4:	10 82       	st	Z, r1
    43e6:	41 50       	subi	r20, 0x01	; 1
    43e8:	51 09       	sbc	r21, r1
    43ea:	9e 01       	movw	r18, r28
    43ec:	2f 5f       	subi	r18, 0xFF	; 255
    43ee:	3f 4f       	sbci	r19, 0xFF	; 255
    43f0:	67 e8       	ldi	r22, 0x87	; 135
    43f2:	7a e1       	ldi	r23, 0x1A	; 26
    43f4:	80 91 58 1a 	lds	r24, 0x1A58	; 0x801a58 <_serial_reply_buffer_handle>
    43f8:	90 91 59 1a 	lds	r25, 0x1A59	; 0x801a59 <_serial_reply_buffer_handle+0x1>
    43fc:	0e 94 c5 13 	call	0x278a	; 0x278a <xStreamBufferSendFromISR>
    4400:	89 81       	ldd	r24, Y+1	; 0x01
    4402:	81 11       	cpse	r24, r1
    4404:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <vPortYield>
    4408:	10 92 55 1a 	sts	0x1A55, r1	; 0x801a55 <rec_buf_inp.2947>
    440c:	be 01       	movw	r22, r28
    440e:	6e 5f       	subi	r22, 0xFE	; 254
    4410:	7f 4f       	sbci	r23, 0xFF	; 255
    4412:	c8 01       	movw	r24, r16
    4414:	8f d5       	rcall	.+2846   	; 0x4f34 <serial_get_byte>
    4416:	88 23       	and	r24, r24
    4418:	61 f2       	breq	.-104    	; 0x43b2 <_serial_call_back+0x16>
    441a:	0f 90       	pop	r0
    441c:	0f 90       	pop	r0
    441e:	df 91       	pop	r29
    4420:	cf 91       	pop	r28
    4422:	1f 91       	pop	r17
    4424:	0f 91       	pop	r16
    4426:	08 95       	ret

00004428 <_upload_message>:
    4428:	0f 93       	push	r16
    442a:	1f 93       	push	r17
    442c:	cf 93       	push	r28
    442e:	df 93       	push	r29
    4430:	8c 01       	movw	r16, r24
    4432:	eb 01       	movw	r28, r22
    4434:	80 91 58 1a 	lds	r24, 0x1A58	; 0x801a58 <_serial_reply_buffer_handle>
    4438:	90 91 59 1a 	lds	r25, 0x1A59	; 0x801a59 <_serial_reply_buffer_handle+0x1>
    443c:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <xStreamBufferReset>
    4440:	b8 01       	movw	r22, r16
    4442:	81 ef       	ldi	r24, 0xF1	; 241
    4444:	99 e1       	ldi	r25, 0x19	; 25
    4446:	0e 94 a7 2f 	call	0x5f4e	; 0x5f4e <strcpy>
    444a:	20 97       	sbiw	r28, 0x00	; 0
    444c:	79 f0       	breq	.+30     	; 0x446c <_upload_message+0x44>
    444e:	e1 ef       	ldi	r30, 0xF1	; 241
    4450:	f9 e1       	ldi	r31, 0x19	; 25
    4452:	01 90       	ld	r0, Z+
    4454:	00 20       	and	r0, r0
    4456:	e9 f7       	brne	.-6      	; 0x4452 <_upload_message+0x2a>
    4458:	31 97       	sbiw	r30, 0x01	; 1
    445a:	80 e2       	ldi	r24, 0x20	; 32
    445c:	90 e0       	ldi	r25, 0x00	; 0
    445e:	91 83       	std	Z+1, r25	; 0x01
    4460:	80 83       	st	Z, r24
    4462:	be 01       	movw	r22, r28
    4464:	81 ef       	ldi	r24, 0xF1	; 241
    4466:	99 e1       	ldi	r25, 0x19	; 25
    4468:	0e 94 9c 2f 	call	0x5f38	; 0x5f38 <strcat>
    446c:	e1 ef       	ldi	r30, 0xF1	; 241
    446e:	f9 e1       	ldi	r31, 0x19	; 25
    4470:	df 01       	movw	r26, r30
    4472:	0d 90       	ld	r0, X+
    4474:	00 20       	and	r0, r0
    4476:	e9 f7       	brne	.-6      	; 0x4472 <_upload_message+0x4a>
    4478:	11 97       	sbiw	r26, 0x01	; 1
    447a:	8d e0       	ldi	r24, 0x0D	; 13
    447c:	9a e0       	ldi	r25, 0x0A	; 10
    447e:	11 96       	adiw	r26, 0x01	; 1
    4480:	9c 93       	st	X, r25
    4482:	8e 93       	st	-X, r24
    4484:	12 96       	adiw	r26, 0x02	; 2
    4486:	1c 92       	st	X, r1
    4488:	01 90       	ld	r0, Z+
    448a:	00 20       	and	r0, r0
    448c:	e9 f7       	brne	.-6      	; 0x4488 <_upload_message+0x60>
    448e:	31 97       	sbiw	r30, 0x01	; 1
    4490:	e1 5f       	subi	r30, 0xF1	; 241
    4492:	f9 41       	sbci	r31, 0x19	; 25
    4494:	ae 2f       	mov	r26, r30
    4496:	81 ef       	ldi	r24, 0xF1	; 241
    4498:	99 e1       	ldi	r25, 0x19	; 25
    449a:	ac 01       	movw	r20, r24
    449c:	6a 2f       	mov	r22, r26
    449e:	80 91 5a 1a 	lds	r24, 0x1A5A	; 0x801a5a <_rn2483_serial>
    44a2:	90 91 5b 1a 	lds	r25, 0x1A5B	; 0x801a5b <_rn2483_serial+0x1>
    44a6:	f6 d4       	rcall	.+2540   	; 0x4e94 <serial_send_bytes>
    44a8:	81 11       	cpse	r24, r1
    44aa:	11 c0       	rjmp	.+34     	; 0x44ce <_upload_message+0xa6>
    44ac:	08 e2       	ldi	r16, 0x28	; 40
    44ae:	15 e0       	ldi	r17, 0x05	; 5
    44b0:	20 e0       	ldi	r18, 0x00	; 0
    44b2:	30 e0       	ldi	r19, 0x00	; 0
    44b4:	4d e2       	ldi	r20, 0x2D	; 45
    44b6:	50 e0       	ldi	r21, 0x00	; 0
    44b8:	61 ee       	ldi	r22, 0xE1	; 225
    44ba:	7a e1       	ldi	r23, 0x1A	; 26
    44bc:	80 91 58 1a 	lds	r24, 0x1A58	; 0x801a58 <_serial_reply_buffer_handle>
    44c0:	90 91 59 1a 	lds	r25, 0x1A59	; 0x801a59 <_serial_reply_buffer_handle+0x1>
    44c4:	0e 94 08 14 	call	0x2810	; 0x2810 <xStreamBufferReceive>
    44c8:	81 ee       	ldi	r24, 0xE1	; 225
    44ca:	9a e1       	ldi	r25, 0x1A	; 26
    44cc:	02 c0       	rjmp	.+4      	; 0x44d2 <_upload_message+0xaa>
    44ce:	80 e0       	ldi	r24, 0x00	; 0
    44d0:	90 e0       	ldi	r25, 0x00	; 0
    44d2:	df 91       	pop	r29
    44d4:	cf 91       	pop	r28
    44d6:	1f 91       	pop	r17
    44d8:	0f 91       	pop	r16
    44da:	08 95       	ret

000044dc <_reply2return_code>:
    44dc:	2f 92       	push	r2
    44de:	3f 92       	push	r3
    44e0:	4f 92       	push	r4
    44e2:	5f 92       	push	r5
    44e4:	6f 92       	push	r6
    44e6:	7f 92       	push	r7
    44e8:	8f 92       	push	r8
    44ea:	9f 92       	push	r9
    44ec:	af 92       	push	r10
    44ee:	bf 92       	push	r11
    44f0:	cf 92       	push	r12
    44f2:	df 92       	push	r13
    44f4:	ef 92       	push	r14
    44f6:	ff 92       	push	r15
    44f8:	0f 93       	push	r16
    44fa:	1f 93       	push	r17
    44fc:	cf 93       	push	r28
    44fe:	df 93       	push	r29
    4500:	5c 01       	movw	r10, r24
    4502:	fc 01       	movw	r30, r24
    4504:	01 90       	ld	r0, Z+
    4506:	00 20       	and	r0, r0
    4508:	e9 f7       	brne	.-6      	; 0x4504 <_reply2return_code+0x28>
    450a:	31 97       	sbiw	r30, 0x01	; 1
    450c:	6f 01       	movw	r12, r30
    450e:	c8 1a       	sub	r12, r24
    4510:	d9 0a       	sbc	r13, r25
    4512:	5c 2c       	mov	r5, r12
    4514:	0f 2e       	mov	r0, r31
    4516:	f3 e2       	ldi	r31, 0x23	; 35
    4518:	8f 2e       	mov	r8, r31
    451a:	f8 e0       	ldi	r31, 0x08	; 8
    451c:	9f 2e       	mov	r9, r31
    451e:	f0 2d       	mov	r31, r0
    4520:	e1 2c       	mov	r14, r1
    4522:	f1 2c       	mov	r15, r1
    4524:	4c 2c       	mov	r4, r12
    4526:	37 01       	movw	r6, r14
    4528:	f4 01       	movw	r30, r8
    452a:	01 81       	ldd	r16, Z+1	; 0x01
    452c:	12 81       	ldd	r17, Z+2	; 0x02
    452e:	e8 01       	movw	r28, r16
    4530:	09 90       	ld	r0, Y+
    4532:	00 20       	and	r0, r0
    4534:	e9 f7       	brne	.-6      	; 0x4530 <_reply2return_code+0x54>
    4536:	21 97       	sbiw	r28, 0x01	; 1
    4538:	c0 1b       	sub	r28, r16
    453a:	d1 0b       	sbc	r29, r17
    453c:	3c 2e       	mov	r3, r28
    453e:	f9 e0       	ldi	r31, 0x09	; 9
    4540:	cf 16       	cp	r12, r31
    4542:	d1 04       	cpc	r13, r1
    4544:	58 f0       	brcs	.+22     	; 0x455c <_reply2return_code+0x80>
    4546:	f4 01       	movw	r30, r8
    4548:	20 80       	ld	r2, Z
    454a:	fe e0       	ldi	r31, 0x0E	; 14
    454c:	2f 12       	cpse	r2, r31
    454e:	06 c0       	rjmp	.+12     	; 0x455c <_reply2return_code+0x80>
    4550:	b8 01       	movw	r22, r16
    4552:	c5 01       	movw	r24, r10
    4554:	0e 94 77 2f 	call	0x5eee	; 0x5eee <strcasestr>
    4558:	89 2b       	or	r24, r25
    455a:	09 f5       	brne	.+66     	; 0x459e <_reply2return_code+0xc2>
    455c:	44 2d       	mov	r20, r4
    455e:	35 14       	cp	r3, r5
    4560:	08 f4       	brcc	.+2      	; 0x4564 <_reply2return_code+0x88>
    4562:	4c 2f       	mov	r20, r28
    4564:	50 e0       	ldi	r21, 0x00	; 0
    4566:	b8 01       	movw	r22, r16
    4568:	c5 01       	movw	r24, r10
    456a:	0e 94 ae 2f 	call	0x5f5c	; 0x5f5c <strncasecmp>
    456e:	89 2b       	or	r24, r25
    4570:	49 f4       	brne	.+18     	; 0x4584 <_reply2return_code+0xa8>
    4572:	f3 01       	movw	r30, r6
    4574:	ee 0f       	add	r30, r30
    4576:	ff 1f       	adc	r31, r31
    4578:	e6 0d       	add	r30, r6
    457a:	f7 1d       	adc	r31, r7
    457c:	ed 5d       	subi	r30, 0xDD	; 221
    457e:	f7 4f       	sbci	r31, 0xF7	; 247
    4580:	20 80       	ld	r2, Z
    4582:	0d c0       	rjmp	.+26     	; 0x459e <_reply2return_code+0xc2>
    4584:	8f ef       	ldi	r24, 0xFF	; 255
    4586:	e8 1a       	sub	r14, r24
    4588:	f8 0a       	sbc	r15, r24
    458a:	e3 e0       	ldi	r30, 0x03	; 3
    458c:	8e 0e       	add	r8, r30
    458e:	91 1c       	adc	r9, r1
    4590:	f1 e1       	ldi	r31, 0x11	; 17
    4592:	ef 16       	cp	r14, r31
    4594:	f1 04       	cpc	r15, r1
    4596:	39 f6       	brne	.-114    	; 0x4526 <_reply2return_code+0x4a>
    4598:	68 94       	set
    459a:	22 24       	eor	r2, r2
    459c:	24 f8       	bld	r2, 4
    459e:	82 2d       	mov	r24, r2
    45a0:	df 91       	pop	r29
    45a2:	cf 91       	pop	r28
    45a4:	1f 91       	pop	r17
    45a6:	0f 91       	pop	r16
    45a8:	ff 90       	pop	r15
    45aa:	ef 90       	pop	r14
    45ac:	df 90       	pop	r13
    45ae:	cf 90       	pop	r12
    45b0:	bf 90       	pop	r11
    45b2:	af 90       	pop	r10
    45b4:	9f 90       	pop	r9
    45b6:	8f 90       	pop	r8
    45b8:	7f 90       	pop	r7
    45ba:	6f 90       	pop	r6
    45bc:	5f 90       	pop	r5
    45be:	4f 90       	pop	r4
    45c0:	3f 90       	pop	r3
    45c2:	2f 90       	pop	r2
    45c4:	08 95       	ret

000045c6 <_upload_message_rc>:
    45c6:	30 df       	rcall	.-416    	; 0x4428 <_upload_message>
    45c8:	89 cf       	rjmp	.-238    	; 0x44dc <_reply2return_code>
    45ca:	08 95       	ret

000045cc <lora_driver_flush_buffers>:
    45cc:	80 91 58 1a 	lds	r24, 0x1A58	; 0x801a58 <_serial_reply_buffer_handle>
    45d0:	90 91 59 1a 	lds	r25, 0x1A59	; 0x801a59 <_serial_reply_buffer_handle+0x1>
    45d4:	0c 94 dc 12 	jmp	0x25b8	; 0x25b8 <xStreamBufferReset>
    45d8:	08 95       	ret

000045da <lora_driver_create>:
    45da:	8f 92       	push	r8
    45dc:	9f 92       	push	r9
    45de:	af 92       	push	r10
    45e0:	cf 92       	push	r12
    45e2:	ef 92       	push	r14
    45e4:	0f 93       	push	r16
    45e6:	1f 93       	push	r17
    45e8:	cf 93       	push	r28
    45ea:	c8 2f       	mov	r28, r24
    45ec:	8b 01       	movw	r16, r22
    45ee:	41 e0       	ldi	r20, 0x01	; 1
    45f0:	60 e0       	ldi	r22, 0x00	; 0
    45f2:	70 e0       	ldi	r23, 0x00	; 0
    45f4:	88 ec       	ldi	r24, 0xC8	; 200
    45f6:	90 e0       	ldi	r25, 0x00	; 0
    45f8:	0e 94 b0 12 	call	0x2560	; 0x2560 <xStreamBufferGenericCreate>
    45fc:	90 93 59 1a 	sts	0x1A59, r25	; 0x801a59 <_serial_reply_buffer_handle+0x1>
    4600:	80 93 58 1a 	sts	0x1A58, r24	; 0x801a58 <_serial_reply_buffer_handle>
    4604:	10 93 57 1a 	sts	0x1A57, r17	; 0x801a57 <_downlinkMessageBuffer+0x1>
    4608:	00 93 56 1a 	sts	0x1A56, r16	; 0x801a56 <_downlinkMessageBuffer>
    460c:	0f 2e       	mov	r0, r31
    460e:	fe ec       	ldi	r31, 0xCE	; 206
    4610:	8f 2e       	mov	r8, r31
    4612:	f1 e2       	ldi	r31, 0x21	; 33
    4614:	9f 2e       	mov	r9, r31
    4616:	f0 2d       	mov	r31, r0
    4618:	68 94       	set
    461a:	aa 24       	eor	r10, r10
    461c:	a6 f8       	bld	r10, 6
    461e:	68 94       	set
    4620:	cc 24       	eor	r12, r12
    4622:	c6 f8       	bld	r12, 6
    4624:	e1 2c       	mov	r14, r1
    4626:	00 e0       	ldi	r16, 0x00	; 0
    4628:	23 e0       	ldi	r18, 0x03	; 3
    462a:	40 e0       	ldi	r20, 0x00	; 0
    462c:	51 ee       	ldi	r21, 0xE1	; 225
    462e:	60 e0       	ldi	r22, 0x00	; 0
    4630:	70 e0       	ldi	r23, 0x00	; 0
    4632:	8c 2f       	mov	r24, r28
    4634:	74 d3       	rcall	.+1768   	; 0x4d1e <serial_new_instance>
    4636:	90 93 5b 1a 	sts	0x1A5B, r25	; 0x801a5b <_rn2483_serial+0x1>
    463a:	80 93 5a 1a 	sts	0x1A5A, r24	; 0x801a5a <_rn2483_serial>
    463e:	e0 91 4f 1b 	lds	r30, 0x1B4F	; 0x801b4f <register_access+0x8>
    4642:	f0 91 50 1b 	lds	r31, 0x1B50	; 0x801b50 <register_access+0x9>
    4646:	64 e0       	ldi	r22, 0x04	; 4
    4648:	87 e0       	ldi	r24, 0x07	; 7
    464a:	91 e0       	ldi	r25, 0x01	; 1
    464c:	19 95       	eicall
    464e:	cf 91       	pop	r28
    4650:	1f 91       	pop	r17
    4652:	0f 91       	pop	r16
    4654:	ef 90       	pop	r14
    4656:	cf 90       	pop	r12
    4658:	af 90       	pop	r10
    465a:	9f 90       	pop	r9
    465c:	8f 90       	pop	r8
    465e:	08 95       	ret

00004660 <lora_driver_reset_rn2483>:
    4660:	88 23       	and	r24, r24
    4662:	49 f0       	breq	.+18     	; 0x4676 <lora_driver_reset_rn2483+0x16>
    4664:	e0 91 59 1b 	lds	r30, 0x1B59	; 0x801b59 <register_access+0x12>
    4668:	f0 91 5a 1b 	lds	r31, 0x1B5A	; 0x801b5a <register_access+0x13>
    466c:	64 e0       	ldi	r22, 0x04	; 4
    466e:	88 e0       	ldi	r24, 0x08	; 8
    4670:	91 e0       	ldi	r25, 0x01	; 1
    4672:	19 95       	eicall
    4674:	08 95       	ret
    4676:	e0 91 4f 1b 	lds	r30, 0x1B4F	; 0x801b4f <register_access+0x8>
    467a:	f0 91 50 1b 	lds	r31, 0x1B50	; 0x801b50 <register_access+0x9>
    467e:	64 e0       	ldi	r22, 0x04	; 4
    4680:	88 e0       	ldi	r24, 0x08	; 8
    4682:	91 e0       	ldi	r25, 0x01	; 1
    4684:	19 95       	eicall
    4686:	08 95       	ret

00004688 <lora_driver_rn2483_factory_reset>:
    4688:	60 e0       	ldi	r22, 0x00	; 0
    468a:	70 e0       	ldi	r23, 0x00	; 0
    468c:	89 ea       	ldi	r24, 0xA9	; 169
    468e:	95 e0       	ldi	r25, 0x05	; 5
    4690:	cb de       	rcall	.-618    	; 0x4428 <_upload_message>
    4692:	e1 ee       	ldi	r30, 0xE1	; 225
    4694:	fa e1       	ldi	r31, 0x1A	; 26
    4696:	01 90       	ld	r0, Z+
    4698:	00 20       	and	r0, r0
    469a:	e9 f7       	brne	.-6      	; 0x4696 <lora_driver_rn2483_factory_reset+0xe>
    469c:	31 97       	sbiw	r30, 0x01	; 1
    469e:	e1 5e       	subi	r30, 0xE1	; 225
    46a0:	fa 41       	sbci	r31, 0x1A	; 26
    46a2:	81 e0       	ldi	r24, 0x01	; 1
    46a4:	75 97       	sbiw	r30, 0x15	; 21
    46a6:	08 f0       	brcs	.+2      	; 0x46aa <lora_driver_rn2483_factory_reset+0x22>
    46a8:	80 e0       	ldi	r24, 0x00	; 0
    46aa:	08 95       	ret

000046ac <lora_driver_get_rn2483_hweui>:
    46ac:	cf 93       	push	r28
    46ae:	df 93       	push	r29
    46b0:	ec 01       	movw	r28, r24
    46b2:	60 e0       	ldi	r22, 0x00	; 0
    46b4:	70 e0       	ldi	r23, 0x00	; 0
    46b6:	8a eb       	ldi	r24, 0xBA	; 186
    46b8:	95 e0       	ldi	r25, 0x05	; 5
    46ba:	b6 de       	rcall	.-660    	; 0x4428 <_upload_message>
    46bc:	e1 ee       	ldi	r30, 0xE1	; 225
    46be:	fa e1       	ldi	r31, 0x1A	; 26
    46c0:	01 90       	ld	r0, Z+
    46c2:	00 20       	and	r0, r0
    46c4:	e9 f7       	brne	.-6      	; 0x46c0 <lora_driver_get_rn2483_hweui+0x14>
    46c6:	e2 5f       	subi	r30, 0xF2	; 242
    46c8:	fa 41       	sbci	r31, 0x1A	; 26
    46ca:	39 f4       	brne	.+14     	; 0x46da <lora_driver_get_rn2483_hweui+0x2e>
    46cc:	61 ee       	ldi	r22, 0xE1	; 225
    46ce:	7a e1       	ldi	r23, 0x1A	; 26
    46d0:	ce 01       	movw	r24, r28
    46d2:	0e 94 a7 2f 	call	0x5f4e	; 0x5f4e <strcpy>
    46d6:	80 e0       	ldi	r24, 0x00	; 0
    46d8:	02 c0       	rjmp	.+4      	; 0x46de <lora_driver_get_rn2483_hweui+0x32>
    46da:	18 82       	st	Y, r1
    46dc:	81 e0       	ldi	r24, 0x01	; 1
    46de:	df 91       	pop	r29
    46e0:	cf 91       	pop	r28
    46e2:	08 95       	ret

000046e4 <lora_driver_set_device_identifier>:
    46e4:	fc 01       	movw	r30, r24
    46e6:	01 90       	ld	r0, Z+
    46e8:	00 20       	and	r0, r0
    46ea:	e9 f7       	brne	.-6      	; 0x46e6 <lora_driver_set_device_identifier+0x2>
    46ec:	9f 01       	movw	r18, r30
    46ee:	21 51       	subi	r18, 0x11	; 17
    46f0:	31 09       	sbc	r19, r1
    46f2:	28 17       	cp	r18, r24
    46f4:	39 07       	cpc	r19, r25
    46f6:	29 f4       	brne	.+10     	; 0x4702 <lora_driver_set_device_identifier+0x1e>
    46f8:	bc 01       	movw	r22, r24
    46fa:	88 ee       	ldi	r24, 0xE8	; 232
    46fc:	95 e0       	ldi	r25, 0x05	; 5
    46fe:	63 cf       	rjmp	.-314    	; 0x45c6 <_upload_message_rc>
    4700:	08 95       	ret
    4702:	89 e0       	ldi	r24, 0x09	; 9
    4704:	08 95       	ret

00004706 <lora_driver_set_application_identifier>:
    4706:	fc 01       	movw	r30, r24
    4708:	01 90       	ld	r0, Z+
    470a:	00 20       	and	r0, r0
    470c:	e9 f7       	brne	.-6      	; 0x4708 <lora_driver_set_application_identifier+0x2>
    470e:	9f 01       	movw	r18, r30
    4710:	21 51       	subi	r18, 0x11	; 17
    4712:	31 09       	sbc	r19, r1
    4714:	28 17       	cp	r18, r24
    4716:	39 07       	cpc	r19, r25
    4718:	29 f4       	brne	.+10     	; 0x4724 <lora_driver_set_application_identifier+0x1e>
    471a:	bc 01       	movw	r22, r24
    471c:	87 ef       	ldi	r24, 0xF7	; 247
    471e:	95 e0       	ldi	r25, 0x05	; 5
    4720:	52 cf       	rjmp	.-348    	; 0x45c6 <_upload_message_rc>
    4722:	08 95       	ret
    4724:	89 e0       	ldi	r24, 0x09	; 9
    4726:	08 95       	ret

00004728 <lora_driver_set_application_key>:
    4728:	fc 01       	movw	r30, r24
    472a:	01 90       	ld	r0, Z+
    472c:	00 20       	and	r0, r0
    472e:	e9 f7       	brne	.-6      	; 0x472a <lora_driver_set_application_key+0x2>
    4730:	9f 01       	movw	r18, r30
    4732:	21 52       	subi	r18, 0x21	; 33
    4734:	31 09       	sbc	r19, r1
    4736:	28 17       	cp	r18, r24
    4738:	39 07       	cpc	r19, r25
    473a:	29 f4       	brne	.+10     	; 0x4746 <lora_driver_set_application_key+0x1e>
    473c:	bc 01       	movw	r22, r24
    473e:	86 e0       	ldi	r24, 0x06	; 6
    4740:	96 e0       	ldi	r25, 0x06	; 6
    4742:	41 cf       	rjmp	.-382    	; 0x45c6 <_upload_message_rc>
    4744:	08 95       	ret
    4746:	89 e0       	ldi	r24, 0x09	; 9
    4748:	08 95       	ret

0000474a <lora_driver_save_mac>:
    474a:	60 e0       	ldi	r22, 0x00	; 0
    474c:	70 e0       	ldi	r23, 0x00	; 0
    474e:	85 e4       	ldi	r24, 0x45	; 69
    4750:	96 e0       	ldi	r25, 0x06	; 6
    4752:	39 cf       	rjmp	.-398    	; 0x45c6 <_upload_message_rc>
    4754:	08 95       	ret

00004756 <lora_driver_join>:
    4756:	0f 93       	push	r16
    4758:	1f 93       	push	r17
    475a:	e8 2f       	mov	r30, r24
    475c:	f0 e0       	ldi	r31, 0x00	; 0
    475e:	ee 0f       	add	r30, r30
    4760:	ff 1f       	adc	r31, r31
    4762:	e1 5e       	subi	r30, 0xE1	; 225
    4764:	f7 4f       	sbci	r31, 0xF7	; 247
    4766:	60 81       	ld	r22, Z
    4768:	71 81       	ldd	r23, Z+1	; 0x01
    476a:	8e e4       	ldi	r24, 0x4E	; 78
    476c:	96 e0       	ldi	r25, 0x06	; 6
    476e:	2b df       	rcall	.-426    	; 0x45c6 <_upload_message_rc>
    4770:	81 11       	cpse	r24, r1
    4772:	14 c0       	rjmp	.+40     	; 0x479c <lora_driver_join+0x46>
    4774:	08 e2       	ldi	r16, 0x28	; 40
    4776:	15 e0       	ldi	r17, 0x05	; 5
    4778:	20 e0       	ldi	r18, 0x00	; 0
    477a:	30 e0       	ldi	r19, 0x00	; 0
    477c:	4d e2       	ldi	r20, 0x2D	; 45
    477e:	50 e0       	ldi	r21, 0x00	; 0
    4780:	61 ee       	ldi	r22, 0xE1	; 225
    4782:	7a e1       	ldi	r23, 0x1A	; 26
    4784:	80 91 58 1a 	lds	r24, 0x1A58	; 0x801a58 <_serial_reply_buffer_handle>
    4788:	90 91 59 1a 	lds	r25, 0x1A59	; 0x801a59 <_serial_reply_buffer_handle+0x1>
    478c:	0e 94 08 14 	call	0x2810	; 0x2810 <xStreamBufferReceive>
    4790:	88 23       	and	r24, r24
    4792:	21 f0       	breq	.+8      	; 0x479c <lora_driver_join+0x46>
    4794:	81 ee       	ldi	r24, 0xE1	; 225
    4796:	9a e1       	ldi	r25, 0x1A	; 26
    4798:	a1 de       	rcall	.-702    	; 0x44dc <_reply2return_code>
    479a:	03 c0       	rjmp	.+6      	; 0x47a2 <lora_driver_join+0x4c>
    479c:	81 ee       	ldi	r24, 0xE1	; 225
    479e:	9a e1       	ldi	r25, 0x1A	; 26
    47a0:	9d de       	rcall	.-710    	; 0x44dc <_reply2return_code>
    47a2:	1f 91       	pop	r17
    47a4:	0f 91       	pop	r16
    47a6:	08 95       	ret

000047a8 <lora_driver_sent_upload_message>:
    47a8:	0f 93       	push	r16
    47aa:	1f 93       	push	r17
    47ac:	cf 93       	push	r28
    47ae:	df 93       	push	r29
    47b0:	1f 92       	push	r1
    47b2:	cd b7       	in	r28, 0x3d	; 61
    47b4:	de b7       	in	r29, 0x3e	; 62
    47b6:	db 01       	movw	r26, r22
    47b8:	11 96       	adiw	r26, 0x01	; 1
    47ba:	9c 91       	ld	r25, X
    47bc:	11 97       	sbiw	r26, 0x01	; 1
    47be:	95 31       	cpi	r25, 0x15	; 21
    47c0:	08 f0       	brcs	.+2      	; 0x47c4 <lora_driver_sent_upload_message+0x1c>
    47c2:	b4 c0       	rjmp	.+360    	; 0x492c <lora_driver_sent_upload_message+0x184>
    47c4:	99 23       	and	r25, r25
    47c6:	81 f1       	breq	.+96     	; 0x4828 <lora_driver_sent_upload_message+0x80>
    47c8:	60 e0       	ldi	r22, 0x00	; 0
    47ca:	70 e0       	ldi	r23, 0x00	; 0
    47cc:	27 2f       	mov	r18, r23
    47ce:	30 e0       	ldi	r19, 0x00	; 0
    47d0:	46 2f       	mov	r20, r22
    47d2:	50 e0       	ldi	r21, 0x00	; 0
    47d4:	fd 01       	movw	r30, r26
    47d6:	e4 0f       	add	r30, r20
    47d8:	f5 1f       	adc	r31, r21
    47da:	92 81       	ldd	r25, Z+2	; 0x02
    47dc:	92 95       	swap	r25
    47de:	9f 70       	andi	r25, 0x0F	; 15
    47e0:	9a 30       	cpi	r25, 0x0A	; 10
    47e2:	10 f0       	brcs	.+4      	; 0x47e8 <lora_driver_sent_upload_message+0x40>
    47e4:	99 5c       	subi	r25, 0xC9	; 201
    47e6:	01 c0       	rjmp	.+2      	; 0x47ea <lora_driver_sent_upload_message+0x42>
    47e8:	90 5d       	subi	r25, 0xD0	; 208
    47ea:	f9 01       	movw	r30, r18
    47ec:	ee 58       	subi	r30, 0x8E	; 142
    47ee:	f5 4e       	sbci	r31, 0xE5	; 229
    47f0:	90 83       	st	Z, r25
    47f2:	2f 5f       	subi	r18, 0xFF	; 255
    47f4:	3f 4f       	sbci	r19, 0xFF	; 255
    47f6:	fd 01       	movw	r30, r26
    47f8:	e4 0f       	add	r30, r20
    47fa:	f5 1f       	adc	r31, r21
    47fc:	92 81       	ldd	r25, Z+2	; 0x02
    47fe:	9f 70       	andi	r25, 0x0F	; 15
    4800:	49 2f       	mov	r20, r25
    4802:	50 e0       	ldi	r21, 0x00	; 0
    4804:	4a 30       	cpi	r20, 0x0A	; 10
    4806:	51 05       	cpc	r21, r1
    4808:	14 f0       	brlt	.+4      	; 0x480e <lora_driver_sent_upload_message+0x66>
    480a:	99 5c       	subi	r25, 0xC9	; 201
    480c:	01 c0       	rjmp	.+2      	; 0x4810 <lora_driver_sent_upload_message+0x68>
    480e:	90 5d       	subi	r25, 0xD0	; 208
    4810:	f9 01       	movw	r30, r18
    4812:	ee 58       	subi	r30, 0x8E	; 142
    4814:	f5 4e       	sbci	r31, 0xE5	; 229
    4816:	90 83       	st	Z, r25
    4818:	7e 5f       	subi	r23, 0xFE	; 254
    481a:	6f 5f       	subi	r22, 0xFF	; 255
    481c:	11 96       	adiw	r26, 0x01	; 1
    481e:	9c 91       	ld	r25, X
    4820:	11 97       	sbiw	r26, 0x01	; 1
    4822:	69 17       	cp	r22, r25
    4824:	98 f2       	brcs	.-90     	; 0x47cc <lora_driver_sent_upload_message+0x24>
    4826:	01 c0       	rjmp	.+2      	; 0x482a <lora_driver_sent_upload_message+0x82>
    4828:	70 e0       	ldi	r23, 0x00	; 0
    482a:	e7 2f       	mov	r30, r23
    482c:	f0 e0       	ldi	r31, 0x00	; 0
    482e:	ee 58       	subi	r30, 0x8E	; 142
    4830:	f5 4e       	sbci	r31, 0xE5	; 229
    4832:	10 82       	st	Z, r1
    4834:	4c 91       	ld	r20, X
    4836:	81 11       	cpse	r24, r1
    4838:	03 c0       	rjmp	.+6      	; 0x4840 <lora_driver_sent_upload_message+0x98>
    483a:	87 e5       	ldi	r24, 0x57	; 87
    483c:	96 e0       	ldi	r25, 0x06	; 6
    483e:	02 c0       	rjmp	.+4      	; 0x4844 <lora_driver_sent_upload_message+0x9c>
    4840:	89 e5       	ldi	r24, 0x59	; 89
    4842:	96 e0       	ldi	r25, 0x06	; 6
    4844:	22 e7       	ldi	r18, 0x72	; 114
    4846:	3a e1       	ldi	r19, 0x1A	; 26
    4848:	3f 93       	push	r19
    484a:	2f 93       	push	r18
    484c:	1f 92       	push	r1
    484e:	4f 93       	push	r20
    4850:	9f 93       	push	r25
    4852:	8f 93       	push	r24
    4854:	8d e5       	ldi	r24, 0x5D	; 93
    4856:	96 e0       	ldi	r25, 0x06	; 6
    4858:	9f 93       	push	r25
    485a:	8f 93       	push	r24
    485c:	84 eb       	ldi	r24, 0xB4	; 180
    485e:	9a e1       	ldi	r25, 0x1A	; 26
    4860:	9f 93       	push	r25
    4862:	8f 93       	push	r24
    4864:	0e 94 09 30 	call	0x6012	; 0x6012 <sprintf>
    4868:	60 e0       	ldi	r22, 0x00	; 0
    486a:	70 e0       	ldi	r23, 0x00	; 0
    486c:	84 eb       	ldi	r24, 0xB4	; 180
    486e:	9a e1       	ldi	r25, 0x1A	; 26
    4870:	aa de       	rcall	.-684    	; 0x45c6 <_upload_message_rc>
    4872:	0f b6       	in	r0, 0x3f	; 63
    4874:	f8 94       	cli
    4876:	de bf       	out	0x3e, r29	; 62
    4878:	0f be       	out	0x3f, r0	; 63
    487a:	cd bf       	out	0x3d, r28	; 61
    487c:	81 11       	cpse	r24, r1
    487e:	59 c0       	rjmp	.+178    	; 0x4932 <lora_driver_sent_upload_message+0x18a>
    4880:	08 e2       	ldi	r16, 0x28	; 40
    4882:	15 e0       	ldi	r17, 0x05	; 5
    4884:	20 e0       	ldi	r18, 0x00	; 0
    4886:	30 e0       	ldi	r19, 0x00	; 0
    4888:	4d e2       	ldi	r20, 0x2D	; 45
    488a:	50 e0       	ldi	r21, 0x00	; 0
    488c:	61 ee       	ldi	r22, 0xE1	; 225
    488e:	7a e1       	ldi	r23, 0x1A	; 26
    4890:	80 91 58 1a 	lds	r24, 0x1A58	; 0x801a58 <_serial_reply_buffer_handle>
    4894:	90 91 59 1a 	lds	r25, 0x1A59	; 0x801a59 <_serial_reply_buffer_handle+0x1>
    4898:	0e 94 08 14 	call	0x2810	; 0x2810 <xStreamBufferReceive>
    489c:	88 23       	and	r24, r24
    489e:	09 f4       	brne	.+2      	; 0x48a2 <lora_driver_sent_upload_message+0xfa>
    48a0:	47 c0       	rjmp	.+142    	; 0x4930 <lora_driver_sent_upload_message+0x188>
    48a2:	81 ee       	ldi	r24, 0xE1	; 225
    48a4:	9a e1       	ldi	r25, 0x1A	; 26
    48a6:	1a de       	rcall	.-972    	; 0x44dc <_reply2return_code>
    48a8:	8e 30       	cpi	r24, 0x0E	; 14
    48aa:	09 f0       	breq	.+2      	; 0x48ae <lora_driver_sent_upload_message+0x106>
    48ac:	42 c0       	rjmp	.+132    	; 0x4932 <lora_driver_sent_upload_message+0x18a>
    48ae:	87 e0       	ldi	r24, 0x07	; 7
    48b0:	89 83       	std	Y+1, r24	; 0x01
    48b2:	80 91 56 1a 	lds	r24, 0x1A56	; 0x801a56 <_downlinkMessageBuffer>
    48b6:	90 91 57 1a 	lds	r25, 0x1A57	; 0x801a57 <_downlinkMessageBuffer+0x1>
    48ba:	89 2b       	or	r24, r25
    48bc:	a9 f1       	breq	.+106    	; 0x4928 <lora_driver_sent_upload_message+0x180>
    48be:	be 01       	movw	r22, r28
    48c0:	6f 5f       	subi	r22, 0xFF	; 255
    48c2:	7f 4f       	sbci	r23, 0xFF	; 255
    48c4:	81 ee       	ldi	r24, 0xE1	; 225
    48c6:	9a e1       	ldi	r25, 0x1A	; 26
    48c8:	68 d1       	rcall	.+720    	; 0x4b9a <decode_port_no>
    48ca:	80 93 5c 1a 	sts	0x1A5C, r24	; 0x801a5c <_downlink_payload>
    48ce:	e9 81       	ldd	r30, Y+1	; 0x01
    48d0:	f0 e0       	ldi	r31, 0x00	; 0
    48d2:	ef 51       	subi	r30, 0x1F	; 31
    48d4:	f5 4e       	sbci	r31, 0xE5	; 229
    48d6:	df 01       	movw	r26, r30
    48d8:	0d 90       	ld	r0, X+
    48da:	00 20       	and	r0, r0
    48dc:	e9 f7       	brne	.-6      	; 0x48d8 <lora_driver_sent_upload_message+0x130>
    48de:	11 97       	sbiw	r26, 0x01	; 1
    48e0:	ae 1b       	sub	r26, r30
    48e2:	bf 0b       	sbc	r27, r31
    48e4:	aa 23       	and	r26, r26
    48e6:	91 f0       	breq	.+36     	; 0x490c <lora_driver_sent_upload_message+0x164>
    48e8:	bb 27       	eor	r27, r27
    48ea:	cd 01       	movw	r24, r26
    48ec:	01 97       	sbiw	r24, 0x01	; 1
    48ee:	9c 01       	movw	r18, r24
    48f0:	12 f4       	brpl	.+4      	; 0x48f6 <lora_driver_sent_upload_message+0x14e>
    48f2:	2f 5f       	subi	r18, 0xFF	; 255
    48f4:	3f 4f       	sbci	r19, 0xFF	; 255
    48f6:	35 95       	asr	r19
    48f8:	27 95       	ror	r18
    48fa:	20 93 5d 1a 	sts	0x1A5D, r18	; 0x801a5d <_downlink_payload+0x1>
    48fe:	af 01       	movw	r20, r30
    4900:	4f 5f       	subi	r20, 0xFF	; 255
    4902:	5f 4f       	sbci	r21, 0xFF	; 255
    4904:	64 e1       	ldi	r22, 0x14	; 20
    4906:	8e e5       	ldi	r24, 0x5E	; 94
    4908:	9a e1       	ldi	r25, 0x1A	; 26
    490a:	73 d1       	rcall	.+742    	; 0x4bf2 <decode_hexadecimal_string_bytes>
    490c:	01 e0       	ldi	r16, 0x01	; 1
    490e:	10 e0       	ldi	r17, 0x00	; 0
    4910:	20 e0       	ldi	r18, 0x00	; 0
    4912:	30 e0       	ldi	r19, 0x00	; 0
    4914:	46 e1       	ldi	r20, 0x16	; 22
    4916:	50 e0       	ldi	r21, 0x00	; 0
    4918:	6c e5       	ldi	r22, 0x5C	; 92
    491a:	7a e1       	ldi	r23, 0x1A	; 26
    491c:	80 91 56 1a 	lds	r24, 0x1A56	; 0x801a56 <_downlinkMessageBuffer>
    4920:	90 91 57 1a 	lds	r25, 0x1A57	; 0x801a57 <_downlinkMessageBuffer+0x1>
    4924:	0e 94 1b 13 	call	0x2636	; 0x2636 <xStreamBufferSend>
    4928:	8e e0       	ldi	r24, 0x0E	; 14
    492a:	03 c0       	rjmp	.+6      	; 0x4932 <lora_driver_sent_upload_message+0x18a>
    492c:	84 e1       	ldi	r24, 0x14	; 20
    492e:	01 c0       	rjmp	.+2      	; 0x4932 <lora_driver_sent_upload_message+0x18a>
    4930:	80 e0       	ldi	r24, 0x00	; 0
    4932:	0f 90       	pop	r0
    4934:	df 91       	pop	r29
    4936:	cf 91       	pop	r28
    4938:	1f 91       	pop	r17
    493a:	0f 91       	pop	r16
    493c:	08 95       	ret

0000493e <lora_driver_set_adaptive_data_rate>:
    493e:	81 30       	cpi	r24, 0x01	; 1
    4940:	19 f0       	breq	.+6      	; 0x4948 <lora_driver_set_adaptive_data_rate+0xa>
    4942:	6d e6       	ldi	r22, 0x6D	; 109
    4944:	76 e0       	ldi	r23, 0x06	; 6
    4946:	02 c0       	rjmp	.+4      	; 0x494c <lora_driver_set_adaptive_data_rate+0xe>
    4948:	66 e4       	ldi	r22, 0x46	; 70
    494a:	77 e0       	ldi	r23, 0x07	; 7
    494c:	81 e7       	ldi	r24, 0x71	; 113
    494e:	96 e0       	ldi	r25, 0x06	; 6
    4950:	3a ce       	rjmp	.-908    	; 0x45c6 <_upload_message_rc>
    4952:	08 95       	ret

00004954 <lora_driver_set_receive_delay>:
    4954:	9f 93       	push	r25
    4956:	8f 93       	push	r24
    4958:	82 ea       	ldi	r24, 0xA2	; 162
    495a:	96 e0       	ldi	r25, 0x06	; 6
    495c:	9f 93       	push	r25
    495e:	8f 93       	push	r24
    4960:	84 eb       	ldi	r24, 0xB4	; 180
    4962:	9a e1       	ldi	r25, 0x1A	; 26
    4964:	9f 93       	push	r25
    4966:	8f 93       	push	r24
    4968:	0e 94 09 30 	call	0x6012	; 0x6012 <sprintf>
    496c:	60 e0       	ldi	r22, 0x00	; 0
    496e:	70 e0       	ldi	r23, 0x00	; 0
    4970:	84 eb       	ldi	r24, 0xB4	; 180
    4972:	9a e1       	ldi	r25, 0x1A	; 26
    4974:	28 de       	rcall	.-944    	; 0x45c6 <_upload_message_rc>
    4976:	0f 90       	pop	r0
    4978:	0f 90       	pop	r0
    497a:	0f 90       	pop	r0
    497c:	0f 90       	pop	r0
    497e:	0f 90       	pop	r0
    4980:	0f 90       	pop	r0
    4982:	08 95       	ret

00004984 <lora_driver_configure_to_eu868>:
    4984:	2f 92       	push	r2
    4986:	3f 92       	push	r3
    4988:	4f 92       	push	r4
    498a:	5f 92       	push	r5
    498c:	6f 92       	push	r6
    498e:	7f 92       	push	r7
    4990:	8f 92       	push	r8
    4992:	9f 92       	push	r9
    4994:	af 92       	push	r10
    4996:	bf 92       	push	r11
    4998:	cf 92       	push	r12
    499a:	df 92       	push	r13
    499c:	ef 92       	push	r14
    499e:	ff 92       	push	r15
    49a0:	0f 93       	push	r16
    49a2:	1f 93       	push	r17
    49a4:	cf 93       	push	r28
    49a6:	df 93       	push	r29
    49a8:	cd b7       	in	r28, 0x3d	; 61
    49aa:	de b7       	in	r29, 0x3e	; 62
    49ac:	a0 97       	sbiw	r28, 0x20	; 32
    49ae:	0f b6       	in	r0, 0x3f	; 63
    49b0:	f8 94       	cli
    49b2:	de bf       	out	0x3e, r29	; 62
    49b4:	0f be       	out	0x3f, r0	; 63
    49b6:	cd bf       	out	0x3d, r28	; 61
    49b8:	6f ec       	ldi	r22, 0xCF	; 207
    49ba:	76 e0       	ldi	r23, 0x06	; 6
    49bc:	8b ed       	ldi	r24, 0xDB	; 219
    49be:	96 e0       	ldi	r25, 0x06	; 6
    49c0:	33 dd       	rcall	.-1434   	; 0x4428 <_upload_message>
    49c2:	8c dd       	rcall	.-1256   	; 0x44dc <_reply2return_code>
    49c4:	81 11       	cpse	r24, r1
    49c6:	a3 c0       	rjmp	.+326    	; 0x4b0e <lora_driver_configure_to_eu868+0x18a>
    49c8:	80 e2       	ldi	r24, 0x20	; 32
    49ca:	e1 e2       	ldi	r30, 0x21	; 33
    49cc:	f2 e0       	ldi	r31, 0x02	; 2
    49ce:	de 01       	movw	r26, r28
    49d0:	11 96       	adiw	r26, 0x01	; 1
    49d2:	01 90       	ld	r0, Z+
    49d4:	0d 92       	st	X+, r0
    49d6:	8a 95       	dec	r24
    49d8:	e1 f7       	brne	.-8      	; 0x49d2 <lora_driver_configure_to_eu868+0x4e>
    49da:	9e 01       	movw	r18, r28
    49dc:	2f 5f       	subi	r18, 0xFF	; 255
    49de:	3f 4f       	sbci	r19, 0xFF	; 255
    49e0:	69 01       	movw	r12, r18
    49e2:	e1 2c       	mov	r14, r1
    49e4:	f1 2c       	mov	r15, r1
    49e6:	0f 2e       	mov	r0, r31
    49e8:	f7 ee       	ldi	r31, 0xE7	; 231
    49ea:	af 2e       	mov	r10, r31
    49ec:	f6 e0       	ldi	r31, 0x06	; 6
    49ee:	bf 2e       	mov	r11, r31
    49f0:	f0 2d       	mov	r31, r0
    49f2:	04 eb       	ldi	r16, 0xB4	; 180
    49f4:	1a e1       	ldi	r17, 0x1A	; 26
    49f6:	0f 2e       	mov	r0, r31
    49f8:	f0 e0       	ldi	r31, 0x00	; 0
    49fa:	4f 2e       	mov	r4, r31
    49fc:	f7 e0       	ldi	r31, 0x07	; 7
    49fe:	5f 2e       	mov	r5, r31
    4a00:	f0 2d       	mov	r31, r0
    4a02:	0f 2e       	mov	r0, r31
    4a04:	f7 e1       	ldi	r31, 0x17	; 23
    4a06:	8f 2e       	mov	r8, r31
    4a08:	f7 e0       	ldi	r31, 0x07	; 7
    4a0a:	9f 2e       	mov	r9, r31
    4a0c:	f0 2d       	mov	r31, r0
    4a0e:	0f 2e       	mov	r0, r31
    4a10:	f1 e3       	ldi	r31, 0x31	; 49
    4a12:	6f 2e       	mov	r6, r31
    4a14:	f7 e0       	ldi	r31, 0x07	; 7
    4a16:	7f 2e       	mov	r7, r31
    4a18:	f0 2d       	mov	r31, r0
    4a1a:	3e 2c       	mov	r3, r14
    4a1c:	2f 2c       	mov	r2, r15
    4a1e:	ff 92       	push	r15
    4a20:	ef 92       	push	r14
    4a22:	bf 92       	push	r11
    4a24:	af 92       	push	r10
    4a26:	1f 93       	push	r17
    4a28:	0f 93       	push	r16
    4a2a:	0e 94 09 30 	call	0x6012	; 0x6012 <sprintf>
    4a2e:	60 e0       	ldi	r22, 0x00	; 0
    4a30:	70 e0       	ldi	r23, 0x00	; 0
    4a32:	c8 01       	movw	r24, r16
    4a34:	f9 dc       	rcall	.-1550   	; 0x4428 <_upload_message>
    4a36:	52 dd       	rcall	.-1372   	; 0x44dc <_reply2return_code>
    4a38:	0f 90       	pop	r0
    4a3a:	0f 90       	pop	r0
    4a3c:	0f 90       	pop	r0
    4a3e:	0f 90       	pop	r0
    4a40:	0f 90       	pop	r0
    4a42:	0f 90       	pop	r0
    4a44:	81 11       	cpse	r24, r1
    4a46:	63 c0       	rjmp	.+198    	; 0x4b0e <lora_driver_configure_to_eu868+0x18a>
    4a48:	32 e0       	ldi	r19, 0x02	; 2
    4a4a:	3e 15       	cp	r19, r14
    4a4c:	e8 f4       	brcc	.+58     	; 0x4a88 <lora_driver_configure_to_eu868+0x104>
    4a4e:	f6 01       	movw	r30, r12
    4a50:	83 81       	ldd	r24, Z+3	; 0x03
    4a52:	8f 93       	push	r24
    4a54:	82 81       	ldd	r24, Z+2	; 0x02
    4a56:	8f 93       	push	r24
    4a58:	81 81       	ldd	r24, Z+1	; 0x01
    4a5a:	8f 93       	push	r24
    4a5c:	80 81       	ld	r24, Z
    4a5e:	8f 93       	push	r24
    4a60:	ff 92       	push	r15
    4a62:	ef 92       	push	r14
    4a64:	5f 92       	push	r5
    4a66:	4f 92       	push	r4
    4a68:	1f 93       	push	r17
    4a6a:	0f 93       	push	r16
    4a6c:	0e 94 09 30 	call	0x6012	; 0x6012 <sprintf>
    4a70:	60 e0       	ldi	r22, 0x00	; 0
    4a72:	70 e0       	ldi	r23, 0x00	; 0
    4a74:	c8 01       	movw	r24, r16
    4a76:	d8 dc       	rcall	.-1616   	; 0x4428 <_upload_message>
    4a78:	31 dd       	rcall	.-1438   	; 0x44dc <_reply2return_code>
    4a7a:	0f b6       	in	r0, 0x3f	; 63
    4a7c:	f8 94       	cli
    4a7e:	de bf       	out	0x3e, r29	; 62
    4a80:	0f be       	out	0x3f, r0	; 63
    4a82:	cd bf       	out	0x3d, r28	; 61
    4a84:	81 11       	cpse	r24, r1
    4a86:	43 c0       	rjmp	.+134    	; 0x4b0e <lora_driver_configure_to_eu868+0x18a>
    4a88:	2f 92       	push	r2
    4a8a:	3f 92       	push	r3
    4a8c:	9f 92       	push	r9
    4a8e:	8f 92       	push	r8
    4a90:	1f 93       	push	r17
    4a92:	0f 93       	push	r16
    4a94:	0e 94 09 30 	call	0x6012	; 0x6012 <sprintf>
    4a98:	60 e0       	ldi	r22, 0x00	; 0
    4a9a:	70 e0       	ldi	r23, 0x00	; 0
    4a9c:	c8 01       	movw	r24, r16
    4a9e:	c4 dc       	rcall	.-1656   	; 0x4428 <_upload_message>
    4aa0:	1d dd       	rcall	.-1478   	; 0x44dc <_reply2return_code>
    4aa2:	0f 90       	pop	r0
    4aa4:	0f 90       	pop	r0
    4aa6:	0f 90       	pop	r0
    4aa8:	0f 90       	pop	r0
    4aaa:	0f 90       	pop	r0
    4aac:	0f 90       	pop	r0
    4aae:	81 11       	cpse	r24, r1
    4ab0:	2e c0       	rjmp	.+92     	; 0x4b0e <lora_driver_configure_to_eu868+0x18a>
    4ab2:	2f 92       	push	r2
    4ab4:	3f 92       	push	r3
    4ab6:	7f 92       	push	r7
    4ab8:	6f 92       	push	r6
    4aba:	1f 93       	push	r17
    4abc:	0f 93       	push	r16
    4abe:	0e 94 09 30 	call	0x6012	; 0x6012 <sprintf>
    4ac2:	60 e0       	ldi	r22, 0x00	; 0
    4ac4:	70 e0       	ldi	r23, 0x00	; 0
    4ac6:	c8 01       	movw	r24, r16
    4ac8:	af dc       	rcall	.-1698   	; 0x4428 <_upload_message>
    4aca:	08 dd       	rcall	.-1520   	; 0x44dc <_reply2return_code>
    4acc:	0f 90       	pop	r0
    4ace:	0f 90       	pop	r0
    4ad0:	0f 90       	pop	r0
    4ad2:	0f 90       	pop	r0
    4ad4:	0f 90       	pop	r0
    4ad6:	0f 90       	pop	r0
    4ad8:	81 11       	cpse	r24, r1
    4ada:	19 c0       	rjmp	.+50     	; 0x4b0e <lora_driver_configure_to_eu868+0x18a>
    4adc:	3f ef       	ldi	r19, 0xFF	; 255
    4ade:	e3 1a       	sub	r14, r19
    4ae0:	f3 0a       	sbc	r15, r19
    4ae2:	84 e0       	ldi	r24, 0x04	; 4
    4ae4:	c8 0e       	add	r12, r24
    4ae6:	d1 1c       	adc	r13, r1
    4ae8:	98 e0       	ldi	r25, 0x08	; 8
    4aea:	e9 16       	cp	r14, r25
    4aec:	f1 04       	cpc	r15, r1
    4aee:	09 f0       	breq	.+2      	; 0x4af2 <lora_driver_configure_to_eu868+0x16e>
    4af0:	94 cf       	rjmp	.-216    	; 0x4a1a <lora_driver_configure_to_eu868+0x96>
    4af2:	60 e0       	ldi	r22, 0x00	; 0
    4af4:	70 e0       	ldi	r23, 0x00	; 0
    4af6:	89 e4       	ldi	r24, 0x49	; 73
    4af8:	97 e0       	ldi	r25, 0x07	; 7
    4afa:	96 dc       	rcall	.-1748   	; 0x4428 <_upload_message>
    4afc:	ef dc       	rcall	.-1570   	; 0x44dc <_reply2return_code>
    4afe:	81 11       	cpse	r24, r1
    4b00:	06 c0       	rjmp	.+12     	; 0x4b0e <lora_driver_configure_to_eu868+0x18a>
    4b02:	60 e0       	ldi	r22, 0x00	; 0
    4b04:	70 e0       	ldi	r23, 0x00	; 0
    4b06:	8a e5       	ldi	r24, 0x5A	; 90
    4b08:	97 e0       	ldi	r25, 0x07	; 7
    4b0a:	8e dc       	rcall	.-1764   	; 0x4428 <_upload_message>
    4b0c:	e7 dc       	rcall	.-1586   	; 0x44dc <_reply2return_code>
    4b0e:	a0 96       	adiw	r28, 0x20	; 32
    4b10:	0f b6       	in	r0, 0x3f	; 63
    4b12:	f8 94       	cli
    4b14:	de bf       	out	0x3e, r29	; 62
    4b16:	0f be       	out	0x3f, r0	; 63
    4b18:	cd bf       	out	0x3d, r28	; 61
    4b1a:	df 91       	pop	r29
    4b1c:	cf 91       	pop	r28
    4b1e:	1f 91       	pop	r17
    4b20:	0f 91       	pop	r16
    4b22:	ff 90       	pop	r15
    4b24:	ef 90       	pop	r14
    4b26:	df 90       	pop	r13
    4b28:	cf 90       	pop	r12
    4b2a:	bf 90       	pop	r11
    4b2c:	af 90       	pop	r10
    4b2e:	9f 90       	pop	r9
    4b30:	8f 90       	pop	r8
    4b32:	7f 90       	pop	r7
    4b34:	6f 90       	pop	r6
    4b36:	5f 90       	pop	r5
    4b38:	4f 90       	pop	r4
    4b3a:	3f 90       	pop	r3
    4b3c:	2f 90       	pop	r2
    4b3e:	08 95       	ret

00004b40 <lora_driver_set_otaa_identity>:
    4b40:	ef 92       	push	r14
    4b42:	ff 92       	push	r15
    4b44:	0f 93       	push	r16
    4b46:	1f 93       	push	r17
    4b48:	cf 93       	push	r28
    4b4a:	df 93       	push	r29
    4b4c:	ec 01       	movw	r28, r24
    4b4e:	8b 01       	movw	r16, r22
    4b50:	7a 01       	movw	r14, r20
    4b52:	81 e0       	ldi	r24, 0x01	; 1
    4b54:	f4 de       	rcall	.-536    	; 0x493e <lora_driver_set_adaptive_data_rate>
    4b56:	81 11       	cpse	r24, r1
    4b58:	0d c0       	rjmp	.+26     	; 0x4b74 <lora_driver_set_otaa_identity+0x34>
    4b5a:	ce 01       	movw	r24, r28
    4b5c:	d4 dd       	rcall	.-1112   	; 0x4706 <lora_driver_set_application_identifier>
    4b5e:	81 11       	cpse	r24, r1
    4b60:	09 c0       	rjmp	.+18     	; 0x4b74 <lora_driver_set_otaa_identity+0x34>
    4b62:	c8 01       	movw	r24, r16
    4b64:	e1 dd       	rcall	.-1086   	; 0x4728 <lora_driver_set_application_key>
    4b66:	81 11       	cpse	r24, r1
    4b68:	05 c0       	rjmp	.+10     	; 0x4b74 <lora_driver_set_otaa_identity+0x34>
    4b6a:	c7 01       	movw	r24, r14
    4b6c:	bb dd       	rcall	.-1162   	; 0x46e4 <lora_driver_set_device_identifier>
    4b6e:	81 11       	cpse	r24, r1
    4b70:	01 c0       	rjmp	.+2      	; 0x4b74 <lora_driver_set_otaa_identity+0x34>
    4b72:	eb dd       	rcall	.-1066   	; 0x474a <lora_driver_save_mac>
    4b74:	df 91       	pop	r29
    4b76:	cf 91       	pop	r28
    4b78:	1f 91       	pop	r17
    4b7a:	0f 91       	pop	r16
    4b7c:	ff 90       	pop	r15
    4b7e:	ef 90       	pop	r14
    4b80:	08 95       	ret

00004b82 <lora_driver_map_return_code_to_text>:
    4b82:	90 e0       	ldi	r25, 0x00	; 0
    4b84:	fc 01       	movw	r30, r24
    4b86:	ee 0f       	add	r30, r30
    4b88:	ff 1f       	adc	r31, r31
    4b8a:	8e 0f       	add	r24, r30
    4b8c:	9f 1f       	adc	r25, r31
    4b8e:	fc 01       	movw	r30, r24
    4b90:	ed 5d       	subi	r30, 0xDD	; 221
    4b92:	f7 4f       	sbci	r31, 0xF7	; 247
    4b94:	81 81       	ldd	r24, Z+1	; 0x01
    4b96:	92 81       	ldd	r25, Z+2	; 0x02
    4b98:	08 95       	ret

00004b9a <decode_port_no>:
    4b9a:	dc 01       	movw	r26, r24
    4b9c:	00 97       	sbiw	r24, 0x00	; 0
    4b9e:	29 f1       	breq	.+74     	; 0x4bea <decode_port_no+0x50>
    4ba0:	fb 01       	movw	r30, r22
    4ba2:	20 81       	ld	r18, Z
    4ba4:	fc 01       	movw	r30, r24
    4ba6:	01 90       	ld	r0, Z+
    4ba8:	00 20       	and	r0, r0
    4baa:	e9 f7       	brne	.-6      	; 0x4ba6 <decode_port_no+0xc>
    4bac:	31 97       	sbiw	r30, 0x01	; 1
    4bae:	e8 1b       	sub	r30, r24
    4bb0:	f9 0b       	sbc	r31, r25
    4bb2:	82 2f       	mov	r24, r18
    4bb4:	90 e0       	ldi	r25, 0x00	; 0
    4bb6:	e8 17       	cp	r30, r24
    4bb8:	f9 07       	cpc	r31, r25
    4bba:	c8 f0       	brcs	.+50     	; 0x4bee <decode_port_no+0x54>
    4bbc:	80 e0       	ldi	r24, 0x00	; 0
    4bbe:	08 c0       	rjmp	.+16     	; 0x4bd0 <decode_port_no+0x36>
    4bc0:	88 0f       	add	r24, r24
    4bc2:	38 2f       	mov	r19, r24
    4bc4:	33 0f       	add	r19, r19
    4bc6:	33 0f       	add	r19, r19
    4bc8:	83 0f       	add	r24, r19
    4bca:	80 53       	subi	r24, 0x30	; 48
    4bcc:	89 0f       	add	r24, r25
    4bce:	2f 5f       	subi	r18, 0xFF	; 255
    4bd0:	fd 01       	movw	r30, r26
    4bd2:	e2 0f       	add	r30, r18
    4bd4:	f1 1d       	adc	r31, r1
    4bd6:	90 81       	ld	r25, Z
    4bd8:	30 ed       	ldi	r19, 0xD0	; 208
    4bda:	39 0f       	add	r19, r25
    4bdc:	3a 30       	cpi	r19, 0x0A	; 10
    4bde:	10 f4       	brcc	.+4      	; 0x4be4 <decode_port_no+0x4a>
    4be0:	91 11       	cpse	r25, r1
    4be2:	ee cf       	rjmp	.-36     	; 0x4bc0 <decode_port_no+0x26>
    4be4:	fb 01       	movw	r30, r22
    4be6:	20 83       	st	Z, r18
    4be8:	08 95       	ret
    4bea:	80 e0       	ldi	r24, 0x00	; 0
    4bec:	08 95       	ret
    4bee:	80 e0       	ldi	r24, 0x00	; 0
    4bf0:	08 95       	ret

00004bf2 <decode_hexadecimal_string_bytes>:
    4bf2:	0f 93       	push	r16
    4bf4:	1f 93       	push	r17
    4bf6:	cf 93       	push	r28
    4bf8:	df 93       	push	r29
    4bfa:	dc 01       	movw	r26, r24
    4bfc:	ea 01       	movw	r28, r20
    4bfe:	20 97       	sbiw	r28, 0x00	; 0
    4c00:	e1 f1       	breq	.+120    	; 0x4c7a <decode_hexadecimal_string_bytes+0x88>
    4c02:	fa 01       	movw	r30, r20
    4c04:	01 90       	ld	r0, Z+
    4c06:	00 20       	and	r0, r0
    4c08:	e9 f7       	brne	.-6      	; 0x4c04 <decode_hexadecimal_string_bytes+0x12>
    4c0a:	31 97       	sbiw	r30, 0x01	; 1
    4c0c:	e4 1b       	sub	r30, r20
    4c0e:	f5 0b       	sbc	r31, r21
    4c10:	32 97       	sbiw	r30, 0x02	; 2
    4c12:	10 f5       	brcc	.+68     	; 0x4c58 <decode_hexadecimal_string_bytes+0x66>
    4c14:	32 c0       	rjmp	.+100    	; 0x4c7a <decode_hexadecimal_string_bytes+0x88>
    4c16:	8d 01       	movw	r16, r26
    4c18:	04 0f       	add	r16, r20
    4c1a:	15 1f       	adc	r17, r21
    4c1c:	30 e0       	ldi	r19, 0x00	; 0
    4c1e:	ae 01       	movw	r20, r28
    4c20:	42 0f       	add	r20, r18
    4c22:	53 1f       	adc	r21, r19
    4c24:	fa 01       	movw	r30, r20
    4c26:	90 81       	ld	r25, Z
    4c28:	91 34       	cpi	r25, 0x41	; 65
    4c2a:	28 f0       	brcs	.+10     	; 0x4c36 <decode_hexadecimal_string_bytes+0x44>
    4c2c:	97 53       	subi	r25, 0x37	; 55
    4c2e:	59 2f       	mov	r21, r25
    4c30:	52 95       	swap	r21
    4c32:	50 7f       	andi	r21, 0xF0	; 240
    4c34:	03 c0       	rjmp	.+6      	; 0x4c3c <decode_hexadecimal_string_bytes+0x4a>
    4c36:	59 2f       	mov	r21, r25
    4c38:	52 95       	swap	r21
    4c3a:	50 7f       	andi	r21, 0xF0	; 240
    4c3c:	2c 0f       	add	r18, r28
    4c3e:	3d 1f       	adc	r19, r29
    4c40:	f9 01       	movw	r30, r18
    4c42:	91 81       	ldd	r25, Z+1	; 0x01
    4c44:	91 34       	cpi	r25, 0x41	; 65
    4c46:	10 f0       	brcs	.+4      	; 0x4c4c <decode_hexadecimal_string_bytes+0x5a>
    4c48:	97 53       	subi	r25, 0x37	; 55
    4c4a:	01 c0       	rjmp	.+2      	; 0x4c4e <decode_hexadecimal_string_bytes+0x5c>
    4c4c:	90 53       	subi	r25, 0x30	; 48
    4c4e:	95 0f       	add	r25, r21
    4c50:	f8 01       	movw	r30, r16
    4c52:	90 83       	st	Z, r25
    4c54:	8f 5f       	subi	r24, 0xFF	; 255
    4c56:	01 c0       	rjmp	.+2      	; 0x4c5a <decode_hexadecimal_string_bytes+0x68>
    4c58:	80 e0       	ldi	r24, 0x00	; 0
    4c5a:	28 2f       	mov	r18, r24
    4c5c:	22 0f       	add	r18, r18
    4c5e:	48 2f       	mov	r20, r24
    4c60:	50 e0       	ldi	r21, 0x00	; 0
    4c62:	fe 01       	movw	r30, r28
    4c64:	01 90       	ld	r0, Z+
    4c66:	00 20       	and	r0, r0
    4c68:	e9 f7       	brne	.-6      	; 0x4c64 <decode_hexadecimal_string_bytes+0x72>
    4c6a:	31 97       	sbiw	r30, 0x01	; 1
    4c6c:	ec 1b       	sub	r30, r28
    4c6e:	fd 0b       	sbc	r31, r29
    4c70:	4e 17       	cp	r20, r30
    4c72:	5f 07       	cpc	r21, r31
    4c74:	10 f4       	brcc	.+4      	; 0x4c7a <decode_hexadecimal_string_bytes+0x88>
    4c76:	86 13       	cpse	r24, r22
    4c78:	ce cf       	rjmp	.-100    	; 0x4c16 <decode_hexadecimal_string_bytes+0x24>
    4c7a:	df 91       	pop	r29
    4c7c:	cf 91       	pop	r28
    4c7e:	1f 91       	pop	r17
    4c80:	0f 91       	pop	r16
    4c82:	08 95       	ret

00004c84 <reg_read_register>:
    4c84:	fc 01       	movw	r30, r24
    4c86:	80 81       	ld	r24, Z
    4c88:	08 95       	ret

00004c8a <reg_read_bit>:
    4c8a:	fc 01       	movw	r30, r24
    4c8c:	20 81       	ld	r18, Z
    4c8e:	81 e0       	ldi	r24, 0x01	; 1
    4c90:	90 e0       	ldi	r25, 0x00	; 0
    4c92:	02 c0       	rjmp	.+4      	; 0x4c98 <reg_read_bit+0xe>
    4c94:	88 0f       	add	r24, r24
    4c96:	99 1f       	adc	r25, r25
    4c98:	6a 95       	dec	r22
    4c9a:	e2 f7       	brpl	.-8      	; 0x4c94 <reg_read_bit+0xa>
    4c9c:	82 23       	and	r24, r18
    4c9e:	08 95       	ret

00004ca0 <reg_read_bits>:
    4ca0:	fc 01       	movw	r30, r24
    4ca2:	80 81       	ld	r24, Z
    4ca4:	86 23       	and	r24, r22
    4ca6:	08 95       	ret

00004ca8 <reg_set_register>:
    4ca8:	fc 01       	movw	r30, r24
    4caa:	60 83       	st	Z, r22
    4cac:	08 95       	ret

00004cae <reg_clear_register>:
    4cae:	fc 01       	movw	r30, r24
    4cb0:	10 82       	st	Z, r1
    4cb2:	08 95       	ret

00004cb4 <reg_set_bit>:
    4cb4:	fc 01       	movw	r30, r24
    4cb6:	40 81       	ld	r20, Z
    4cb8:	21 e0       	ldi	r18, 0x01	; 1
    4cba:	30 e0       	ldi	r19, 0x00	; 0
    4cbc:	02 c0       	rjmp	.+4      	; 0x4cc2 <reg_set_bit+0xe>
    4cbe:	22 0f       	add	r18, r18
    4cc0:	33 1f       	adc	r19, r19
    4cc2:	6a 95       	dec	r22
    4cc4:	e2 f7       	brpl	.-8      	; 0x4cbe <reg_set_bit+0xa>
    4cc6:	24 2b       	or	r18, r20
    4cc8:	20 83       	st	Z, r18
    4cca:	08 95       	ret

00004ccc <reg_set_bits>:
    4ccc:	fc 01       	movw	r30, r24
    4cce:	20 81       	ld	r18, Z
    4cd0:	62 2b       	or	r22, r18
    4cd2:	60 83       	st	Z, r22
    4cd4:	08 95       	ret

00004cd6 <reg_toggle_bit>:
    4cd6:	fc 01       	movw	r30, r24
    4cd8:	40 81       	ld	r20, Z
    4cda:	21 e0       	ldi	r18, 0x01	; 1
    4cdc:	30 e0       	ldi	r19, 0x00	; 0
    4cde:	02 c0       	rjmp	.+4      	; 0x4ce4 <reg_toggle_bit+0xe>
    4ce0:	22 0f       	add	r18, r18
    4ce2:	33 1f       	adc	r19, r19
    4ce4:	6a 95       	dec	r22
    4ce6:	e2 f7       	brpl	.-8      	; 0x4ce0 <reg_toggle_bit+0xa>
    4ce8:	24 27       	eor	r18, r20
    4cea:	20 83       	st	Z, r18
    4cec:	08 95       	ret

00004cee <reg_toggle_bits>:
    4cee:	fc 01       	movw	r30, r24
    4cf0:	20 81       	ld	r18, Z
    4cf2:	62 27       	eor	r22, r18
    4cf4:	60 83       	st	Z, r22
    4cf6:	08 95       	ret

00004cf8 <reg_clear_bit>:
    4cf8:	fc 01       	movw	r30, r24
    4cfa:	90 81       	ld	r25, Z
    4cfc:	21 e0       	ldi	r18, 0x01	; 1
    4cfe:	30 e0       	ldi	r19, 0x00	; 0
    4d00:	02 c0       	rjmp	.+4      	; 0x4d06 <reg_clear_bit+0xe>
    4d02:	22 0f       	add	r18, r18
    4d04:	33 1f       	adc	r19, r19
    4d06:	6a 95       	dec	r22
    4d08:	e2 f7       	brpl	.-8      	; 0x4d02 <reg_clear_bit+0xa>
    4d0a:	20 95       	com	r18
    4d0c:	29 23       	and	r18, r25
    4d0e:	20 83       	st	Z, r18
    4d10:	08 95       	ret

00004d12 <reg_clear_bits>:
    4d12:	fc 01       	movw	r30, r24
    4d14:	90 81       	ld	r25, Z
    4d16:	60 95       	com	r22
    4d18:	69 23       	and	r22, r25
    4d1a:	60 83       	st	Z, r22
    4d1c:	08 95       	ret

00004d1e <serial_new_instance>:
    4d1e:	2f 92       	push	r2
    4d20:	3f 92       	push	r3
    4d22:	4f 92       	push	r4
    4d24:	5f 92       	push	r5
    4d26:	6f 92       	push	r6
    4d28:	7f 92       	push	r7
    4d2a:	8f 92       	push	r8
    4d2c:	9f 92       	push	r9
    4d2e:	af 92       	push	r10
    4d30:	cf 92       	push	r12
    4d32:	ef 92       	push	r14
    4d34:	ff 92       	push	r15
    4d36:	0f 93       	push	r16
    4d38:	1f 93       	push	r17
    4d3a:	cf 93       	push	r28
    4d3c:	df 93       	push	r29
    4d3e:	cd b7       	in	r28, 0x3d	; 61
    4d40:	de b7       	in	r29, 0x3e	; 62
    4d42:	f8 2e       	mov	r15, r24
    4d44:	2a 01       	movw	r4, r20
    4d46:	3b 01       	movw	r6, r22
    4d48:	88 e0       	ldi	r24, 0x08	; 8
    4d4a:	90 e0       	ldi	r25, 0x00	; 0
    4d4c:	9b d7       	rcall	.+3894   	; 0x5c84 <malloc>
    4d4e:	8c 01       	movw	r16, r24
    4d50:	8f 2d       	mov	r24, r15
    4d52:	90 e0       	ldi	r25, 0x00	; 0
    4d54:	88 0f       	add	r24, r24
    4d56:	99 1f       	adc	r25, r25
    4d58:	fc 01       	movw	r30, r24
    4d5a:	e2 5f       	subi	r30, 0xF2	; 242
    4d5c:	f4 4e       	sbci	r31, 0xE4	; 228
    4d5e:	11 83       	std	Z+1, r17	; 0x01
    4d60:	00 83       	st	Z, r16
    4d62:	fc 01       	movw	r30, r24
    4d64:	e6 5f       	subi	r30, 0xF6	; 246
    4d66:	fd 4f       	sbci	r31, 0xFD	; 253
    4d68:	80 81       	ld	r24, Z
    4d6a:	91 81       	ldd	r25, Z+1	; 0x01
    4d6c:	d8 01       	movw	r26, r16
    4d6e:	8d 93       	st	X+, r24
    4d70:	9c 93       	st	X, r25
    4d72:	6c 2d       	mov	r22, r12
    4d74:	70 e0       	ldi	r23, 0x00	; 0
    4d76:	84 e0       	ldi	r24, 0x04	; 4
    4d78:	90 e0       	ldi	r25, 0x00	; 0
    4d7a:	6a d7       	rcall	.+3796   	; 0x5c50 <calloc>
    4d7c:	1c 01       	movw	r2, r24
    4d7e:	61 e0       	ldi	r22, 0x01	; 1
    4d80:	70 e0       	ldi	r23, 0x00	; 0
    4d82:	86 e0       	ldi	r24, 0x06	; 6
    4d84:	90 e0       	ldi	r25, 0x00	; 0
    4d86:	64 d7       	rcall	.+3784   	; 0x5c50 <calloc>
    4d88:	7c 01       	movw	r14, r24
    4d8a:	4c 2d       	mov	r20, r12
    4d8c:	b1 01       	movw	r22, r2
    4d8e:	2b d5       	rcall	.+2646   	; 0x57e6 <fifo_init>
    4d90:	f8 01       	movw	r30, r16
    4d92:	f5 82       	std	Z+5, r15	; 0x05
    4d94:	e4 82       	std	Z+4, r14	; 0x04
    4d96:	6a 2d       	mov	r22, r10
    4d98:	70 e0       	ldi	r23, 0x00	; 0
    4d9a:	84 e0       	ldi	r24, 0x04	; 4
    4d9c:	90 e0       	ldi	r25, 0x00	; 0
    4d9e:	58 d7       	rcall	.+3760   	; 0x5c50 <calloc>
    4da0:	1c 01       	movw	r2, r24
    4da2:	61 e0       	ldi	r22, 0x01	; 1
    4da4:	70 e0       	ldi	r23, 0x00	; 0
    4da6:	86 e0       	ldi	r24, 0x06	; 6
    4da8:	90 e0       	ldi	r25, 0x00	; 0
    4daa:	52 d7       	rcall	.+3748   	; 0x5c50 <calloc>
    4dac:	7c 01       	movw	r14, r24
    4dae:	4a 2d       	mov	r20, r10
    4db0:	b1 01       	movw	r22, r2
    4db2:	19 d5       	rcall	.+2610   	; 0x57e6 <fifo_init>
    4db4:	d8 01       	movw	r26, r16
    4db6:	13 96       	adiw	r26, 0x03	; 3
    4db8:	fc 92       	st	X, r15
    4dba:	ee 92       	st	-X, r14
    4dbc:	12 97       	sbiw	r26, 0x02	; 2
    4dbe:	17 96       	adiw	r26, 0x07	; 7
    4dc0:	9c 92       	st	X, r9
    4dc2:	8e 92       	st	-X, r8
    4dc4:	16 97       	sbiw	r26, 0x06	; 6
    4dc6:	ff b6       	in	r15, 0x3f	; 63
    4dc8:	f8 94       	cli
    4dca:	ed 91       	ld	r30, X+
    4dcc:	fc 91       	ld	r31, X
    4dce:	11 97       	sbiw	r26, 0x01	; 1
    4dd0:	36 97       	sbiw	r30, 0x06	; 6
    4dd2:	80 81       	ld	r24, Z
    4dd4:	82 60       	ori	r24, 0x02	; 2
    4dd6:	80 83       	st	Z, r24
    4dd8:	8d 90       	ld	r8, X+
    4dda:	9c 90       	ld	r9, X
    4ddc:	c3 01       	movw	r24, r6
    4dde:	b2 01       	movw	r22, r4
    4de0:	1c d6       	rcall	.+3128   	; 0x5a1a <__floatunsisf>
    4de2:	20 e0       	ldi	r18, 0x00	; 0
    4de4:	30 e0       	ldi	r19, 0x00	; 0
    4de6:	40 e0       	ldi	r20, 0x00	; 0
    4de8:	51 e4       	ldi	r21, 0x41	; 65
    4dea:	a5 d6       	rcall	.+3402   	; 0x5b36 <__mulsf3>
    4dec:	9b 01       	movw	r18, r22
    4dee:	ac 01       	movw	r20, r24
    4df0:	60 e0       	ldi	r22, 0x00	; 0
    4df2:	74 e2       	ldi	r23, 0x24	; 36
    4df4:	84 e7       	ldi	r24, 0x74	; 116
    4df6:	9b e4       	ldi	r25, 0x4B	; 75
    4df8:	77 d5       	rcall	.+2798   	; 0x58e8 <__divsf3>
    4dfa:	20 e0       	ldi	r18, 0x00	; 0
    4dfc:	30 e0       	ldi	r19, 0x00	; 0
    4dfe:	40 e8       	ldi	r20, 0x80	; 128
    4e00:	5f e3       	ldi	r21, 0x3F	; 63
    4e02:	0d d5       	rcall	.+2586   	; 0x581e <__subsf3>
    4e04:	de d5       	rcall	.+3004   	; 0x59c2 <__fixunssfsi>
    4e06:	f4 01       	movw	r30, r8
    4e08:	32 97       	sbiw	r30, 0x02	; 2
    4e0a:	60 83       	st	Z, r22
    4e0c:	d8 01       	movw	r26, r16
    4e0e:	ed 91       	ld	r30, X+
    4e10:	fc 91       	ld	r31, X
    4e12:	11 97       	sbiw	r26, 0x01	; 1
    4e14:	35 97       	sbiw	r30, 0x05	; 5
    4e16:	88 e9       	ldi	r24, 0x98	; 152
    4e18:	80 83       	st	Z, r24
    4e1a:	ed 91       	ld	r30, X+
    4e1c:	fc 91       	ld	r31, X
    4e1e:	34 97       	sbiw	r30, 0x04	; 4
    4e20:	86 e0       	ldi	r24, 0x06	; 6
    4e22:	80 83       	st	Z, r24
    4e24:	ff be       	out	0x3f, r15	; 63
    4e26:	c8 01       	movw	r24, r16
    4e28:	df 91       	pop	r29
    4e2a:	cf 91       	pop	r28
    4e2c:	1f 91       	pop	r17
    4e2e:	0f 91       	pop	r16
    4e30:	ff 90       	pop	r15
    4e32:	ef 90       	pop	r14
    4e34:	cf 90       	pop	r12
    4e36:	af 90       	pop	r10
    4e38:	9f 90       	pop	r9
    4e3a:	8f 90       	pop	r8
    4e3c:	7f 90       	pop	r7
    4e3e:	6f 90       	pop	r6
    4e40:	5f 90       	pop	r5
    4e42:	4f 90       	pop	r4
    4e44:	3f 90       	pop	r3
    4e46:	2f 90       	pop	r2
    4e48:	08 95       	ret

00004e4a <serial_send_byte>:
    4e4a:	cf 93       	push	r28
    4e4c:	df 93       	push	r29
    4e4e:	ec 01       	movw	r28, r24
    4e50:	ea 81       	ldd	r30, Y+2	; 0x02
    4e52:	fb 81       	ldd	r31, Y+3	; 0x03
    4e54:	93 81       	ldd	r25, Z+3	; 0x03
    4e56:	82 81       	ldd	r24, Z+2	; 0x02
    4e58:	25 81       	ldd	r18, Z+5	; 0x05
    4e5a:	98 1b       	sub	r25, r24
    4e5c:	92 23       	and	r25, r18
    4e5e:	84 81       	ldd	r24, Z+4	; 0x04
    4e60:	98 17       	cp	r25, r24
    4e62:	a1 f0       	breq	.+40     	; 0x4e8c <serial_send_byte+0x42>
    4e64:	93 81       	ldd	r25, Z+3	; 0x03
    4e66:	26 95       	lsr	r18
    4e68:	29 23       	and	r18, r25
    4e6a:	a0 81       	ld	r26, Z
    4e6c:	b1 81       	ldd	r27, Z+1	; 0x01
    4e6e:	a2 0f       	add	r26, r18
    4e70:	b1 1d       	adc	r27, r1
    4e72:	6c 93       	st	X, r22
    4e74:	9f 5f       	subi	r25, 0xFF	; 255
    4e76:	25 81       	ldd	r18, Z+5	; 0x05
    4e78:	92 23       	and	r25, r18
    4e7a:	93 83       	std	Z+3, r25	; 0x03
    4e7c:	e8 81       	ld	r30, Y
    4e7e:	f9 81       	ldd	r31, Y+1	; 0x01
    4e80:	35 97       	sbiw	r30, 0x05	; 5
    4e82:	80 81       	ld	r24, Z
    4e84:	80 62       	ori	r24, 0x20	; 32
    4e86:	80 83       	st	Z, r24
    4e88:	80 e0       	ldi	r24, 0x00	; 0
    4e8a:	01 c0       	rjmp	.+2      	; 0x4e8e <serial_send_byte+0x44>
    4e8c:	82 e0       	ldi	r24, 0x02	; 2
    4e8e:	df 91       	pop	r29
    4e90:	cf 91       	pop	r28
    4e92:	08 95       	ret

00004e94 <serial_send_bytes>:
    4e94:	ef 92       	push	r14
    4e96:	ff 92       	push	r15
    4e98:	0f 93       	push	r16
    4e9a:	1f 93       	push	r17
    4e9c:	cf 93       	push	r28
    4e9e:	df 93       	push	r29
    4ea0:	7c 01       	movw	r14, r24
    4ea2:	dc 01       	movw	r26, r24
    4ea4:	12 96       	adiw	r26, 0x02	; 2
    4ea6:	ed 91       	ld	r30, X+
    4ea8:	fc 91       	ld	r31, X
    4eaa:	13 97       	sbiw	r26, 0x03	; 3
    4eac:	93 81       	ldd	r25, Z+3	; 0x03
    4eae:	82 81       	ldd	r24, Z+2	; 0x02
    4eb0:	98 1b       	sub	r25, r24
    4eb2:	85 81       	ldd	r24, Z+5	; 0x05
    4eb4:	98 23       	and	r25, r24
    4eb6:	84 81       	ldd	r24, Z+4	; 0x04
    4eb8:	89 1b       	sub	r24, r25
    4eba:	86 17       	cp	r24, r22
    4ebc:	98 f1       	brcs	.+102    	; 0x4f24 <serial_send_bytes+0x90>
    4ebe:	66 23       	and	r22, r22
    4ec0:	41 f1       	breq	.+80     	; 0x4f12 <serial_send_bytes+0x7e>
    4ec2:	84 2f       	mov	r24, r20
    4ec4:	95 2f       	mov	r25, r21
    4ec6:	dc 01       	movw	r26, r24
    4ec8:	61 50       	subi	r22, 0x01	; 1
    4eca:	46 2f       	mov	r20, r22
    4ecc:	50 e0       	ldi	r21, 0x00	; 0
    4ece:	4f 5f       	subi	r20, 0xFF	; 255
    4ed0:	5f 4f       	sbci	r21, 0xFF	; 255
    4ed2:	48 0f       	add	r20, r24
    4ed4:	59 1f       	adc	r21, r25
    4ed6:	e7 01       	movw	r28, r14
    4ed8:	ea 81       	ldd	r30, Y+2	; 0x02
    4eda:	fb 81       	ldd	r31, Y+3	; 0x03
    4edc:	93 81       	ldd	r25, Z+3	; 0x03
    4ede:	82 81       	ldd	r24, Z+2	; 0x02
    4ee0:	25 81       	ldd	r18, Z+5	; 0x05
    4ee2:	98 1b       	sub	r25, r24
    4ee4:	92 23       	and	r25, r18
    4ee6:	84 81       	ldd	r24, Z+4	; 0x04
    4ee8:	98 17       	cp	r25, r24
    4eea:	79 f0       	breq	.+30     	; 0x4f0a <serial_send_bytes+0x76>
    4eec:	8c 91       	ld	r24, X
    4eee:	93 81       	ldd	r25, Z+3	; 0x03
    4ef0:	26 95       	lsr	r18
    4ef2:	29 23       	and	r18, r25
    4ef4:	60 81       	ld	r22, Z
    4ef6:	71 81       	ldd	r23, Z+1	; 0x01
    4ef8:	8b 01       	movw	r16, r22
    4efa:	02 0f       	add	r16, r18
    4efc:	11 1d       	adc	r17, r1
    4efe:	e8 01       	movw	r28, r16
    4f00:	88 83       	st	Y, r24
    4f02:	9f 5f       	subi	r25, 0xFF	; 255
    4f04:	85 81       	ldd	r24, Z+5	; 0x05
    4f06:	98 23       	and	r25, r24
    4f08:	93 83       	std	Z+3, r25	; 0x03
    4f0a:	11 96       	adiw	r26, 0x01	; 1
    4f0c:	a4 17       	cp	r26, r20
    4f0e:	b5 07       	cpc	r27, r21
    4f10:	11 f7       	brne	.-60     	; 0x4ed6 <serial_send_bytes+0x42>
    4f12:	d7 01       	movw	r26, r14
    4f14:	ed 91       	ld	r30, X+
    4f16:	fc 91       	ld	r31, X
    4f18:	35 97       	sbiw	r30, 0x05	; 5
    4f1a:	80 81       	ld	r24, Z
    4f1c:	80 62       	ori	r24, 0x20	; 32
    4f1e:	80 83       	st	Z, r24
    4f20:	80 e0       	ldi	r24, 0x00	; 0
    4f22:	01 c0       	rjmp	.+2      	; 0x4f26 <serial_send_bytes+0x92>
    4f24:	82 e0       	ldi	r24, 0x02	; 2
    4f26:	df 91       	pop	r29
    4f28:	cf 91       	pop	r28
    4f2a:	1f 91       	pop	r17
    4f2c:	0f 91       	pop	r16
    4f2e:	ff 90       	pop	r15
    4f30:	ef 90       	pop	r14
    4f32:	08 95       	ret

00004f34 <serial_get_byte>:
    4f34:	dc 01       	movw	r26, r24
    4f36:	14 96       	adiw	r26, 0x04	; 4
    4f38:	ed 91       	ld	r30, X+
    4f3a:	fc 91       	ld	r31, X
    4f3c:	15 97       	sbiw	r26, 0x05	; 5
    4f3e:	93 81       	ldd	r25, Z+3	; 0x03
    4f40:	82 81       	ldd	r24, Z+2	; 0x02
    4f42:	98 17       	cp	r25, r24
    4f44:	89 f0       	breq	.+34     	; 0x4f68 <serial_get_byte+0x34>
    4f46:	92 81       	ldd	r25, Z+2	; 0x02
    4f48:	85 81       	ldd	r24, Z+5	; 0x05
    4f4a:	86 95       	lsr	r24
    4f4c:	89 23       	and	r24, r25
    4f4e:	a0 81       	ld	r26, Z
    4f50:	b1 81       	ldd	r27, Z+1	; 0x01
    4f52:	a8 0f       	add	r26, r24
    4f54:	b1 1d       	adc	r27, r1
    4f56:	8c 91       	ld	r24, X
    4f58:	db 01       	movw	r26, r22
    4f5a:	8c 93       	st	X, r24
    4f5c:	9f 5f       	subi	r25, 0xFF	; 255
    4f5e:	85 81       	ldd	r24, Z+5	; 0x05
    4f60:	98 23       	and	r25, r24
    4f62:	92 83       	std	Z+2, r25	; 0x02
    4f64:	80 e0       	ldi	r24, 0x00	; 0
    4f66:	08 95       	ret
    4f68:	83 e0       	ldi	r24, 0x03	; 3
    4f6a:	08 95       	ret

00004f6c <__vector_25>:
    4f6c:	1f 92       	push	r1
    4f6e:	0f 92       	push	r0
    4f70:	0f b6       	in	r0, 0x3f	; 63
    4f72:	0f 92       	push	r0
    4f74:	11 24       	eor	r1, r1
    4f76:	0b b6       	in	r0, 0x3b	; 59
    4f78:	0f 92       	push	r0
    4f7a:	2f 93       	push	r18
    4f7c:	3f 93       	push	r19
    4f7e:	4f 93       	push	r20
    4f80:	5f 93       	push	r21
    4f82:	6f 93       	push	r22
    4f84:	7f 93       	push	r23
    4f86:	8f 93       	push	r24
    4f88:	9f 93       	push	r25
    4f8a:	af 93       	push	r26
    4f8c:	bf 93       	push	r27
    4f8e:	cf 93       	push	r28
    4f90:	df 93       	push	r29
    4f92:	ef 93       	push	r30
    4f94:	ff 93       	push	r31
    4f96:	a0 91 0e 1b 	lds	r26, 0x1B0E	; 0x801b0e <_ser_handle>
    4f9a:	b0 91 0f 1b 	lds	r27, 0x1B0F	; 0x801b0f <_ser_handle+0x1>
    4f9e:	10 97       	sbiw	r26, 0x00	; 0
    4fa0:	11 f1       	breq	.+68     	; 0x4fe6 <__vector_25+0x7a>
    4fa2:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    4fa6:	14 96       	adiw	r26, 0x04	; 4
    4fa8:	ed 91       	ld	r30, X+
    4faa:	fc 91       	ld	r31, X
    4fac:	15 97       	sbiw	r26, 0x05	; 5
    4fae:	93 81       	ldd	r25, Z+3	; 0x03
    4fb0:	82 81       	ldd	r24, Z+2	; 0x02
    4fb2:	25 81       	ldd	r18, Z+5	; 0x05
    4fb4:	98 1b       	sub	r25, r24
    4fb6:	92 23       	and	r25, r18
    4fb8:	84 81       	ldd	r24, Z+4	; 0x04
    4fba:	98 17       	cp	r25, r24
    4fbc:	61 f0       	breq	.+24     	; 0x4fd6 <__vector_25+0x6a>
    4fbe:	83 81       	ldd	r24, Z+3	; 0x03
    4fc0:	26 95       	lsr	r18
    4fc2:	28 23       	and	r18, r24
    4fc4:	c0 81       	ld	r28, Z
    4fc6:	d1 81       	ldd	r29, Z+1	; 0x01
    4fc8:	c2 0f       	add	r28, r18
    4fca:	d1 1d       	adc	r29, r1
    4fcc:	68 83       	st	Y, r22
    4fce:	8f 5f       	subi	r24, 0xFF	; 255
    4fd0:	95 81       	ldd	r25, Z+5	; 0x05
    4fd2:	89 23       	and	r24, r25
    4fd4:	83 83       	std	Z+3, r24	; 0x03
    4fd6:	16 96       	adiw	r26, 0x06	; 6
    4fd8:	ed 91       	ld	r30, X+
    4fda:	fc 91       	ld	r31, X
    4fdc:	17 97       	sbiw	r26, 0x07	; 7
    4fde:	30 97       	sbiw	r30, 0x00	; 0
    4fe0:	11 f0       	breq	.+4      	; 0x4fe6 <__vector_25+0x7a>
    4fe2:	cd 01       	movw	r24, r26
    4fe4:	19 95       	eicall
    4fe6:	ff 91       	pop	r31
    4fe8:	ef 91       	pop	r30
    4fea:	df 91       	pop	r29
    4fec:	cf 91       	pop	r28
    4fee:	bf 91       	pop	r27
    4ff0:	af 91       	pop	r26
    4ff2:	9f 91       	pop	r25
    4ff4:	8f 91       	pop	r24
    4ff6:	7f 91       	pop	r23
    4ff8:	6f 91       	pop	r22
    4ffa:	5f 91       	pop	r21
    4ffc:	4f 91       	pop	r20
    4ffe:	3f 91       	pop	r19
    5000:	2f 91       	pop	r18
    5002:	0f 90       	pop	r0
    5004:	0b be       	out	0x3b, r0	; 59
    5006:	0f 90       	pop	r0
    5008:	0f be       	out	0x3f, r0	; 63
    500a:	0f 90       	pop	r0
    500c:	1f 90       	pop	r1
    500e:	18 95       	reti

00005010 <__vector_26>:
    5010:	1f 92       	push	r1
    5012:	0f 92       	push	r0
    5014:	0f b6       	in	r0, 0x3f	; 63
    5016:	0f 92       	push	r0
    5018:	11 24       	eor	r1, r1
    501a:	0b b6       	in	r0, 0x3b	; 59
    501c:	0f 92       	push	r0
    501e:	2f 93       	push	r18
    5020:	8f 93       	push	r24
    5022:	9f 93       	push	r25
    5024:	af 93       	push	r26
    5026:	bf 93       	push	r27
    5028:	ef 93       	push	r30
    502a:	ff 93       	push	r31
    502c:	e0 91 0e 1b 	lds	r30, 0x1B0E	; 0x801b0e <_ser_handle>
    5030:	f0 91 0f 1b 	lds	r31, 0x1B0F	; 0x801b0f <_ser_handle+0x1>
    5034:	30 97       	sbiw	r30, 0x00	; 0
    5036:	b9 f0       	breq	.+46     	; 0x5066 <__vector_26+0x56>
    5038:	02 80       	ldd	r0, Z+2	; 0x02
    503a:	f3 81       	ldd	r31, Z+3	; 0x03
    503c:	e0 2d       	mov	r30, r0
    503e:	93 81       	ldd	r25, Z+3	; 0x03
    5040:	82 81       	ldd	r24, Z+2	; 0x02
    5042:	98 17       	cp	r25, r24
    5044:	b1 f0       	breq	.+44     	; 0x5072 <__vector_26+0x62>
    5046:	92 81       	ldd	r25, Z+2	; 0x02
    5048:	85 81       	ldd	r24, Z+5	; 0x05
    504a:	28 2f       	mov	r18, r24
    504c:	26 95       	lsr	r18
    504e:	29 23       	and	r18, r25
    5050:	a0 81       	ld	r26, Z
    5052:	b1 81       	ldd	r27, Z+1	; 0x01
    5054:	a2 0f       	add	r26, r18
    5056:	b1 1d       	adc	r27, r1
    5058:	2c 91       	ld	r18, X
    505a:	9f 5f       	subi	r25, 0xFF	; 255
    505c:	89 23       	and	r24, r25
    505e:	82 83       	std	Z+2, r24	; 0x02
    5060:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    5064:	0b c0       	rjmp	.+22     	; 0x507c <__vector_26+0x6c>
    5066:	e1 ec       	ldi	r30, 0xC1	; 193
    5068:	f0 e0       	ldi	r31, 0x00	; 0
    506a:	80 81       	ld	r24, Z
    506c:	8f 7d       	andi	r24, 0xDF	; 223
    506e:	80 83       	st	Z, r24
    5070:	05 c0       	rjmp	.+10     	; 0x507c <__vector_26+0x6c>
    5072:	e1 ec       	ldi	r30, 0xC1	; 193
    5074:	f0 e0       	ldi	r31, 0x00	; 0
    5076:	80 81       	ld	r24, Z
    5078:	8f 7d       	andi	r24, 0xDF	; 223
    507a:	80 83       	st	Z, r24
    507c:	ff 91       	pop	r31
    507e:	ef 91       	pop	r30
    5080:	bf 91       	pop	r27
    5082:	af 91       	pop	r26
    5084:	9f 91       	pop	r25
    5086:	8f 91       	pop	r24
    5088:	2f 91       	pop	r18
    508a:	0f 90       	pop	r0
    508c:	0b be       	out	0x3b, r0	; 59
    508e:	0f 90       	pop	r0
    5090:	0f be       	out	0x3f, r0	; 63
    5092:	0f 90       	pop	r0
    5094:	1f 90       	pop	r1
    5096:	18 95       	reti

00005098 <__vector_36>:
    5098:	1f 92       	push	r1
    509a:	0f 92       	push	r0
    509c:	0f b6       	in	r0, 0x3f	; 63
    509e:	0f 92       	push	r0
    50a0:	11 24       	eor	r1, r1
    50a2:	0b b6       	in	r0, 0x3b	; 59
    50a4:	0f 92       	push	r0
    50a6:	2f 93       	push	r18
    50a8:	3f 93       	push	r19
    50aa:	4f 93       	push	r20
    50ac:	5f 93       	push	r21
    50ae:	6f 93       	push	r22
    50b0:	7f 93       	push	r23
    50b2:	8f 93       	push	r24
    50b4:	9f 93       	push	r25
    50b6:	af 93       	push	r26
    50b8:	bf 93       	push	r27
    50ba:	cf 93       	push	r28
    50bc:	df 93       	push	r29
    50be:	ef 93       	push	r30
    50c0:	ff 93       	push	r31
    50c2:	a0 91 10 1b 	lds	r26, 0x1B10	; 0x801b10 <_ser_handle+0x2>
    50c6:	b0 91 11 1b 	lds	r27, 0x1B11	; 0x801b11 <_ser_handle+0x3>
    50ca:	10 97       	sbiw	r26, 0x00	; 0
    50cc:	11 f1       	breq	.+68     	; 0x5112 <__vector_36+0x7a>
    50ce:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    50d2:	14 96       	adiw	r26, 0x04	; 4
    50d4:	ed 91       	ld	r30, X+
    50d6:	fc 91       	ld	r31, X
    50d8:	15 97       	sbiw	r26, 0x05	; 5
    50da:	93 81       	ldd	r25, Z+3	; 0x03
    50dc:	82 81       	ldd	r24, Z+2	; 0x02
    50de:	25 81       	ldd	r18, Z+5	; 0x05
    50e0:	98 1b       	sub	r25, r24
    50e2:	92 23       	and	r25, r18
    50e4:	84 81       	ldd	r24, Z+4	; 0x04
    50e6:	98 17       	cp	r25, r24
    50e8:	61 f0       	breq	.+24     	; 0x5102 <__vector_36+0x6a>
    50ea:	83 81       	ldd	r24, Z+3	; 0x03
    50ec:	26 95       	lsr	r18
    50ee:	28 23       	and	r18, r24
    50f0:	c0 81       	ld	r28, Z
    50f2:	d1 81       	ldd	r29, Z+1	; 0x01
    50f4:	c2 0f       	add	r28, r18
    50f6:	d1 1d       	adc	r29, r1
    50f8:	68 83       	st	Y, r22
    50fa:	8f 5f       	subi	r24, 0xFF	; 255
    50fc:	95 81       	ldd	r25, Z+5	; 0x05
    50fe:	89 23       	and	r24, r25
    5100:	83 83       	std	Z+3, r24	; 0x03
    5102:	16 96       	adiw	r26, 0x06	; 6
    5104:	ed 91       	ld	r30, X+
    5106:	fc 91       	ld	r31, X
    5108:	17 97       	sbiw	r26, 0x07	; 7
    510a:	30 97       	sbiw	r30, 0x00	; 0
    510c:	11 f0       	breq	.+4      	; 0x5112 <__vector_36+0x7a>
    510e:	cd 01       	movw	r24, r26
    5110:	19 95       	eicall
    5112:	ff 91       	pop	r31
    5114:	ef 91       	pop	r30
    5116:	df 91       	pop	r29
    5118:	cf 91       	pop	r28
    511a:	bf 91       	pop	r27
    511c:	af 91       	pop	r26
    511e:	9f 91       	pop	r25
    5120:	8f 91       	pop	r24
    5122:	7f 91       	pop	r23
    5124:	6f 91       	pop	r22
    5126:	5f 91       	pop	r21
    5128:	4f 91       	pop	r20
    512a:	3f 91       	pop	r19
    512c:	2f 91       	pop	r18
    512e:	0f 90       	pop	r0
    5130:	0b be       	out	0x3b, r0	; 59
    5132:	0f 90       	pop	r0
    5134:	0f be       	out	0x3f, r0	; 63
    5136:	0f 90       	pop	r0
    5138:	1f 90       	pop	r1
    513a:	18 95       	reti

0000513c <__vector_37>:
    513c:	1f 92       	push	r1
    513e:	0f 92       	push	r0
    5140:	0f b6       	in	r0, 0x3f	; 63
    5142:	0f 92       	push	r0
    5144:	11 24       	eor	r1, r1
    5146:	0b b6       	in	r0, 0x3b	; 59
    5148:	0f 92       	push	r0
    514a:	2f 93       	push	r18
    514c:	8f 93       	push	r24
    514e:	9f 93       	push	r25
    5150:	af 93       	push	r26
    5152:	bf 93       	push	r27
    5154:	ef 93       	push	r30
    5156:	ff 93       	push	r31
    5158:	e0 91 10 1b 	lds	r30, 0x1B10	; 0x801b10 <_ser_handle+0x2>
    515c:	f0 91 11 1b 	lds	r31, 0x1B11	; 0x801b11 <_ser_handle+0x3>
    5160:	30 97       	sbiw	r30, 0x00	; 0
    5162:	b9 f0       	breq	.+46     	; 0x5192 <__vector_37+0x56>
    5164:	02 80       	ldd	r0, Z+2	; 0x02
    5166:	f3 81       	ldd	r31, Z+3	; 0x03
    5168:	e0 2d       	mov	r30, r0
    516a:	93 81       	ldd	r25, Z+3	; 0x03
    516c:	82 81       	ldd	r24, Z+2	; 0x02
    516e:	98 17       	cp	r25, r24
    5170:	b1 f0       	breq	.+44     	; 0x519e <__vector_37+0x62>
    5172:	92 81       	ldd	r25, Z+2	; 0x02
    5174:	85 81       	ldd	r24, Z+5	; 0x05
    5176:	28 2f       	mov	r18, r24
    5178:	26 95       	lsr	r18
    517a:	29 23       	and	r18, r25
    517c:	a0 81       	ld	r26, Z
    517e:	b1 81       	ldd	r27, Z+1	; 0x01
    5180:	a2 0f       	add	r26, r18
    5182:	b1 1d       	adc	r27, r1
    5184:	2c 91       	ld	r18, X
    5186:	9f 5f       	subi	r25, 0xFF	; 255
    5188:	89 23       	and	r24, r25
    518a:	82 83       	std	Z+2, r24	; 0x02
    518c:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    5190:	0b c0       	rjmp	.+22     	; 0x51a8 <__vector_37+0x6c>
    5192:	e9 ec       	ldi	r30, 0xC9	; 201
    5194:	f0 e0       	ldi	r31, 0x00	; 0
    5196:	80 81       	ld	r24, Z
    5198:	8f 7d       	andi	r24, 0xDF	; 223
    519a:	80 83       	st	Z, r24
    519c:	05 c0       	rjmp	.+10     	; 0x51a8 <__vector_37+0x6c>
    519e:	e9 ec       	ldi	r30, 0xC9	; 201
    51a0:	f0 e0       	ldi	r31, 0x00	; 0
    51a2:	80 81       	ld	r24, Z
    51a4:	8f 7d       	andi	r24, 0xDF	; 223
    51a6:	80 83       	st	Z, r24
    51a8:	ff 91       	pop	r31
    51aa:	ef 91       	pop	r30
    51ac:	bf 91       	pop	r27
    51ae:	af 91       	pop	r26
    51b0:	9f 91       	pop	r25
    51b2:	8f 91       	pop	r24
    51b4:	2f 91       	pop	r18
    51b6:	0f 90       	pop	r0
    51b8:	0b be       	out	0x3b, r0	; 59
    51ba:	0f 90       	pop	r0
    51bc:	0f be       	out	0x3f, r0	; 63
    51be:	0f 90       	pop	r0
    51c0:	1f 90       	pop	r1
    51c2:	18 95       	reti

000051c4 <__vector_51>:
    51c4:	1f 92       	push	r1
    51c6:	0f 92       	push	r0
    51c8:	0f b6       	in	r0, 0x3f	; 63
    51ca:	0f 92       	push	r0
    51cc:	11 24       	eor	r1, r1
    51ce:	0b b6       	in	r0, 0x3b	; 59
    51d0:	0f 92       	push	r0
    51d2:	2f 93       	push	r18
    51d4:	3f 93       	push	r19
    51d6:	4f 93       	push	r20
    51d8:	5f 93       	push	r21
    51da:	6f 93       	push	r22
    51dc:	7f 93       	push	r23
    51de:	8f 93       	push	r24
    51e0:	9f 93       	push	r25
    51e2:	af 93       	push	r26
    51e4:	bf 93       	push	r27
    51e6:	cf 93       	push	r28
    51e8:	df 93       	push	r29
    51ea:	ef 93       	push	r30
    51ec:	ff 93       	push	r31
    51ee:	a0 91 12 1b 	lds	r26, 0x1B12	; 0x801b12 <_ser_handle+0x4>
    51f2:	b0 91 13 1b 	lds	r27, 0x1B13	; 0x801b13 <_ser_handle+0x5>
    51f6:	10 97       	sbiw	r26, 0x00	; 0
    51f8:	11 f1       	breq	.+68     	; 0x523e <__vector_51+0x7a>
    51fa:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    51fe:	14 96       	adiw	r26, 0x04	; 4
    5200:	ed 91       	ld	r30, X+
    5202:	fc 91       	ld	r31, X
    5204:	15 97       	sbiw	r26, 0x05	; 5
    5206:	93 81       	ldd	r25, Z+3	; 0x03
    5208:	82 81       	ldd	r24, Z+2	; 0x02
    520a:	25 81       	ldd	r18, Z+5	; 0x05
    520c:	98 1b       	sub	r25, r24
    520e:	92 23       	and	r25, r18
    5210:	84 81       	ldd	r24, Z+4	; 0x04
    5212:	98 17       	cp	r25, r24
    5214:	61 f0       	breq	.+24     	; 0x522e <__vector_51+0x6a>
    5216:	83 81       	ldd	r24, Z+3	; 0x03
    5218:	26 95       	lsr	r18
    521a:	28 23       	and	r18, r24
    521c:	c0 81       	ld	r28, Z
    521e:	d1 81       	ldd	r29, Z+1	; 0x01
    5220:	c2 0f       	add	r28, r18
    5222:	d1 1d       	adc	r29, r1
    5224:	68 83       	st	Y, r22
    5226:	8f 5f       	subi	r24, 0xFF	; 255
    5228:	95 81       	ldd	r25, Z+5	; 0x05
    522a:	89 23       	and	r24, r25
    522c:	83 83       	std	Z+3, r24	; 0x03
    522e:	16 96       	adiw	r26, 0x06	; 6
    5230:	ed 91       	ld	r30, X+
    5232:	fc 91       	ld	r31, X
    5234:	17 97       	sbiw	r26, 0x07	; 7
    5236:	30 97       	sbiw	r30, 0x00	; 0
    5238:	11 f0       	breq	.+4      	; 0x523e <__vector_51+0x7a>
    523a:	cd 01       	movw	r24, r26
    523c:	19 95       	eicall
    523e:	ff 91       	pop	r31
    5240:	ef 91       	pop	r30
    5242:	df 91       	pop	r29
    5244:	cf 91       	pop	r28
    5246:	bf 91       	pop	r27
    5248:	af 91       	pop	r26
    524a:	9f 91       	pop	r25
    524c:	8f 91       	pop	r24
    524e:	7f 91       	pop	r23
    5250:	6f 91       	pop	r22
    5252:	5f 91       	pop	r21
    5254:	4f 91       	pop	r20
    5256:	3f 91       	pop	r19
    5258:	2f 91       	pop	r18
    525a:	0f 90       	pop	r0
    525c:	0b be       	out	0x3b, r0	; 59
    525e:	0f 90       	pop	r0
    5260:	0f be       	out	0x3f, r0	; 63
    5262:	0f 90       	pop	r0
    5264:	1f 90       	pop	r1
    5266:	18 95       	reti

00005268 <__vector_52>:
    5268:	1f 92       	push	r1
    526a:	0f 92       	push	r0
    526c:	0f b6       	in	r0, 0x3f	; 63
    526e:	0f 92       	push	r0
    5270:	11 24       	eor	r1, r1
    5272:	0b b6       	in	r0, 0x3b	; 59
    5274:	0f 92       	push	r0
    5276:	2f 93       	push	r18
    5278:	8f 93       	push	r24
    527a:	9f 93       	push	r25
    527c:	af 93       	push	r26
    527e:	bf 93       	push	r27
    5280:	ef 93       	push	r30
    5282:	ff 93       	push	r31
    5284:	e0 91 12 1b 	lds	r30, 0x1B12	; 0x801b12 <_ser_handle+0x4>
    5288:	f0 91 13 1b 	lds	r31, 0x1B13	; 0x801b13 <_ser_handle+0x5>
    528c:	30 97       	sbiw	r30, 0x00	; 0
    528e:	b9 f0       	breq	.+46     	; 0x52be <__vector_52+0x56>
    5290:	02 80       	ldd	r0, Z+2	; 0x02
    5292:	f3 81       	ldd	r31, Z+3	; 0x03
    5294:	e0 2d       	mov	r30, r0
    5296:	93 81       	ldd	r25, Z+3	; 0x03
    5298:	82 81       	ldd	r24, Z+2	; 0x02
    529a:	98 17       	cp	r25, r24
    529c:	b1 f0       	breq	.+44     	; 0x52ca <__vector_52+0x62>
    529e:	92 81       	ldd	r25, Z+2	; 0x02
    52a0:	85 81       	ldd	r24, Z+5	; 0x05
    52a2:	28 2f       	mov	r18, r24
    52a4:	26 95       	lsr	r18
    52a6:	29 23       	and	r18, r25
    52a8:	a0 81       	ld	r26, Z
    52aa:	b1 81       	ldd	r27, Z+1	; 0x01
    52ac:	a2 0f       	add	r26, r18
    52ae:	b1 1d       	adc	r27, r1
    52b0:	2c 91       	ld	r18, X
    52b2:	9f 5f       	subi	r25, 0xFF	; 255
    52b4:	89 23       	and	r24, r25
    52b6:	82 83       	std	Z+2, r24	; 0x02
    52b8:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    52bc:	0b c0       	rjmp	.+22     	; 0x52d4 <__vector_52+0x6c>
    52be:	e1 ed       	ldi	r30, 0xD1	; 209
    52c0:	f0 e0       	ldi	r31, 0x00	; 0
    52c2:	80 81       	ld	r24, Z
    52c4:	8f 7d       	andi	r24, 0xDF	; 223
    52c6:	80 83       	st	Z, r24
    52c8:	05 c0       	rjmp	.+10     	; 0x52d4 <__vector_52+0x6c>
    52ca:	e1 ed       	ldi	r30, 0xD1	; 209
    52cc:	f0 e0       	ldi	r31, 0x00	; 0
    52ce:	80 81       	ld	r24, Z
    52d0:	8f 7d       	andi	r24, 0xDF	; 223
    52d2:	80 83       	st	Z, r24
    52d4:	ff 91       	pop	r31
    52d6:	ef 91       	pop	r30
    52d8:	bf 91       	pop	r27
    52da:	af 91       	pop	r26
    52dc:	9f 91       	pop	r25
    52de:	8f 91       	pop	r24
    52e0:	2f 91       	pop	r18
    52e2:	0f 90       	pop	r0
    52e4:	0b be       	out	0x3b, r0	; 59
    52e6:	0f 90       	pop	r0
    52e8:	0f be       	out	0x3f, r0	; 63
    52ea:	0f 90       	pop	r0
    52ec:	1f 90       	pop	r1
    52ee:	18 95       	reti

000052f0 <__vector_54>:
    52f0:	1f 92       	push	r1
    52f2:	0f 92       	push	r0
    52f4:	0f b6       	in	r0, 0x3f	; 63
    52f6:	0f 92       	push	r0
    52f8:	11 24       	eor	r1, r1
    52fa:	0b b6       	in	r0, 0x3b	; 59
    52fc:	0f 92       	push	r0
    52fe:	2f 93       	push	r18
    5300:	3f 93       	push	r19
    5302:	4f 93       	push	r20
    5304:	5f 93       	push	r21
    5306:	6f 93       	push	r22
    5308:	7f 93       	push	r23
    530a:	8f 93       	push	r24
    530c:	9f 93       	push	r25
    530e:	af 93       	push	r26
    5310:	bf 93       	push	r27
    5312:	cf 93       	push	r28
    5314:	df 93       	push	r29
    5316:	ef 93       	push	r30
    5318:	ff 93       	push	r31
    531a:	a0 91 14 1b 	lds	r26, 0x1B14	; 0x801b14 <_ser_handle+0x6>
    531e:	b0 91 15 1b 	lds	r27, 0x1B15	; 0x801b15 <_ser_handle+0x7>
    5322:	10 97       	sbiw	r26, 0x00	; 0
    5324:	11 f1       	breq	.+68     	; 0x536a <__vector_54+0x7a>
    5326:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    532a:	14 96       	adiw	r26, 0x04	; 4
    532c:	ed 91       	ld	r30, X+
    532e:	fc 91       	ld	r31, X
    5330:	15 97       	sbiw	r26, 0x05	; 5
    5332:	93 81       	ldd	r25, Z+3	; 0x03
    5334:	82 81       	ldd	r24, Z+2	; 0x02
    5336:	25 81       	ldd	r18, Z+5	; 0x05
    5338:	98 1b       	sub	r25, r24
    533a:	92 23       	and	r25, r18
    533c:	84 81       	ldd	r24, Z+4	; 0x04
    533e:	98 17       	cp	r25, r24
    5340:	61 f0       	breq	.+24     	; 0x535a <__vector_54+0x6a>
    5342:	83 81       	ldd	r24, Z+3	; 0x03
    5344:	26 95       	lsr	r18
    5346:	28 23       	and	r18, r24
    5348:	c0 81       	ld	r28, Z
    534a:	d1 81       	ldd	r29, Z+1	; 0x01
    534c:	c2 0f       	add	r28, r18
    534e:	d1 1d       	adc	r29, r1
    5350:	68 83       	st	Y, r22
    5352:	8f 5f       	subi	r24, 0xFF	; 255
    5354:	95 81       	ldd	r25, Z+5	; 0x05
    5356:	89 23       	and	r24, r25
    5358:	83 83       	std	Z+3, r24	; 0x03
    535a:	16 96       	adiw	r26, 0x06	; 6
    535c:	ed 91       	ld	r30, X+
    535e:	fc 91       	ld	r31, X
    5360:	17 97       	sbiw	r26, 0x07	; 7
    5362:	30 97       	sbiw	r30, 0x00	; 0
    5364:	11 f0       	breq	.+4      	; 0x536a <__vector_54+0x7a>
    5366:	cd 01       	movw	r24, r26
    5368:	19 95       	eicall
    536a:	ff 91       	pop	r31
    536c:	ef 91       	pop	r30
    536e:	df 91       	pop	r29
    5370:	cf 91       	pop	r28
    5372:	bf 91       	pop	r27
    5374:	af 91       	pop	r26
    5376:	9f 91       	pop	r25
    5378:	8f 91       	pop	r24
    537a:	7f 91       	pop	r23
    537c:	6f 91       	pop	r22
    537e:	5f 91       	pop	r21
    5380:	4f 91       	pop	r20
    5382:	3f 91       	pop	r19
    5384:	2f 91       	pop	r18
    5386:	0f 90       	pop	r0
    5388:	0b be       	out	0x3b, r0	; 59
    538a:	0f 90       	pop	r0
    538c:	0f be       	out	0x3f, r0	; 63
    538e:	0f 90       	pop	r0
    5390:	1f 90       	pop	r1
    5392:	18 95       	reti

00005394 <__vector_55>:
    5394:	1f 92       	push	r1
    5396:	0f 92       	push	r0
    5398:	0f b6       	in	r0, 0x3f	; 63
    539a:	0f 92       	push	r0
    539c:	11 24       	eor	r1, r1
    539e:	0b b6       	in	r0, 0x3b	; 59
    53a0:	0f 92       	push	r0
    53a2:	2f 93       	push	r18
    53a4:	8f 93       	push	r24
    53a6:	9f 93       	push	r25
    53a8:	af 93       	push	r26
    53aa:	bf 93       	push	r27
    53ac:	ef 93       	push	r30
    53ae:	ff 93       	push	r31
    53b0:	e0 91 14 1b 	lds	r30, 0x1B14	; 0x801b14 <_ser_handle+0x6>
    53b4:	f0 91 15 1b 	lds	r31, 0x1B15	; 0x801b15 <_ser_handle+0x7>
    53b8:	30 97       	sbiw	r30, 0x00	; 0
    53ba:	b9 f0       	breq	.+46     	; 0x53ea <__vector_55+0x56>
    53bc:	02 80       	ldd	r0, Z+2	; 0x02
    53be:	f3 81       	ldd	r31, Z+3	; 0x03
    53c0:	e0 2d       	mov	r30, r0
    53c2:	93 81       	ldd	r25, Z+3	; 0x03
    53c4:	82 81       	ldd	r24, Z+2	; 0x02
    53c6:	98 17       	cp	r25, r24
    53c8:	b1 f0       	breq	.+44     	; 0x53f6 <__vector_55+0x62>
    53ca:	92 81       	ldd	r25, Z+2	; 0x02
    53cc:	85 81       	ldd	r24, Z+5	; 0x05
    53ce:	28 2f       	mov	r18, r24
    53d0:	26 95       	lsr	r18
    53d2:	29 23       	and	r18, r25
    53d4:	a0 81       	ld	r26, Z
    53d6:	b1 81       	ldd	r27, Z+1	; 0x01
    53d8:	a2 0f       	add	r26, r18
    53da:	b1 1d       	adc	r27, r1
    53dc:	2c 91       	ld	r18, X
    53de:	9f 5f       	subi	r25, 0xFF	; 255
    53e0:	89 23       	and	r24, r25
    53e2:	82 83       	std	Z+2, r24	; 0x02
    53e4:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    53e8:	0b c0       	rjmp	.+22     	; 0x5400 <__vector_55+0x6c>
    53ea:	e1 e3       	ldi	r30, 0x31	; 49
    53ec:	f1 e0       	ldi	r31, 0x01	; 1
    53ee:	80 81       	ld	r24, Z
    53f0:	8f 7d       	andi	r24, 0xDF	; 223
    53f2:	80 83       	st	Z, r24
    53f4:	05 c0       	rjmp	.+10     	; 0x5400 <__vector_55+0x6c>
    53f6:	e1 e3       	ldi	r30, 0x31	; 49
    53f8:	f1 e0       	ldi	r31, 0x01	; 1
    53fa:	80 81       	ld	r24, Z
    53fc:	8f 7d       	andi	r24, 0xDF	; 223
    53fe:	80 83       	st	Z, r24
    5400:	ff 91       	pop	r31
    5402:	ef 91       	pop	r30
    5404:	bf 91       	pop	r27
    5406:	af 91       	pop	r26
    5408:	9f 91       	pop	r25
    540a:	8f 91       	pop	r24
    540c:	2f 91       	pop	r18
    540e:	0f 90       	pop	r0
    5410:	0b be       	out	0x3b, r0	; 59
    5412:	0f 90       	pop	r0
    5414:	0f be       	out	0x3f, r0	; 63
    5416:	0f 90       	pop	r0
    5418:	1f 90       	pop	r1
    541a:	18 95       	reti

0000541c <usart_getchar>:
    541c:	cf 93       	push	r28
    541e:	df 93       	push	r29
    5420:	1f 92       	push	r1
    5422:	cd b7       	in	r28, 0x3d	; 61
    5424:	de b7       	in	r29, 0x3e	; 62
    5426:	be 01       	movw	r22, r28
    5428:	6f 5f       	subi	r22, 0xFF	; 255
    542a:	7f 4f       	sbci	r23, 0xFF	; 255
    542c:	80 91 16 1b 	lds	r24, 0x1B16	; 0x801b16 <_com_serial_instance>
    5430:	90 91 17 1b 	lds	r25, 0x1B17	; 0x801b17 <_com_serial_instance+0x1>
    5434:	7f dd       	rcall	.-1282   	; 0x4f34 <serial_get_byte>
    5436:	81 11       	cpse	r24, r1
    5438:	f6 cf       	rjmp	.-20     	; 0x5426 <usart_getchar+0xa>
    543a:	89 81       	ldd	r24, Y+1	; 0x01
    543c:	90 e0       	ldi	r25, 0x00	; 0
    543e:	0f 90       	pop	r0
    5440:	df 91       	pop	r29
    5442:	cf 91       	pop	r28
    5444:	08 95       	ret

00005446 <usart_putchar>:
    5446:	68 2f       	mov	r22, r24
    5448:	80 91 16 1b 	lds	r24, 0x1B16	; 0x801b16 <_com_serial_instance>
    544c:	90 91 17 1b 	lds	r25, 0x1B17	; 0x801b17 <_com_serial_instance+0x1>
    5450:	fc dc       	rcall	.-1544   	; 0x4e4a <serial_send_byte>
    5452:	80 e0       	ldi	r24, 0x00	; 0
    5454:	90 e0       	ldi	r25, 0x00	; 0
    5456:	08 95       	ret

00005458 <stdioCreate>:
    5458:	8f 92       	push	r8
    545a:	9f 92       	push	r9
    545c:	af 92       	push	r10
    545e:	cf 92       	push	r12
    5460:	ef 92       	push	r14
    5462:	0f 93       	push	r16
    5464:	81 2c       	mov	r8, r1
    5466:	91 2c       	mov	r9, r1
    5468:	68 94       	set
    546a:	aa 24       	eor	r10, r10
    546c:	a7 f8       	bld	r10, 7
    546e:	68 94       	set
    5470:	cc 24       	eor	r12, r12
    5472:	c7 f8       	bld	r12, 7
    5474:	e1 2c       	mov	r14, r1
    5476:	00 e0       	ldi	r16, 0x00	; 0
    5478:	23 e0       	ldi	r18, 0x03	; 3
    547a:	40 e0       	ldi	r20, 0x00	; 0
    547c:	51 ee       	ldi	r21, 0xE1	; 225
    547e:	60 e0       	ldi	r22, 0x00	; 0
    5480:	70 e0       	ldi	r23, 0x00	; 0
    5482:	4d dc       	rcall	.-1894   	; 0x4d1e <serial_new_instance>
    5484:	90 93 17 1b 	sts	0x1B17, r25	; 0x801b17 <_com_serial_instance+0x1>
    5488:	80 93 16 1b 	sts	0x1B16, r24	; 0x801b16 <_com_serial_instance>
    548c:	e1 e6       	ldi	r30, 0x61	; 97
    548e:	fb e1       	ldi	r31, 0x1B	; 27
    5490:	82 e1       	ldi	r24, 0x12	; 18
    5492:	92 e0       	ldi	r25, 0x02	; 2
    5494:	91 83       	std	Z+1, r25	; 0x01
    5496:	80 83       	st	Z, r24
    5498:	93 83       	std	Z+3, r25	; 0x03
    549a:	82 83       	std	Z+2, r24	; 0x02
    549c:	0f 91       	pop	r16
    549e:	ef 90       	pop	r14
    54a0:	cf 90       	pop	r12
    54a2:	af 90       	pop	r10
    54a4:	9f 90       	pop	r9
    54a6:	8f 90       	pop	r8
    54a8:	08 95       	ret

000054aa <_initTwiInterface>:
    54aa:	80 91 26 1b 	lds	r24, 0x1B26	; 0x801b26 <_twiIsInitiated>
    54ae:	81 11       	cpse	r24, r1
    54b0:	0c c0       	rjmp	.+24     	; 0x54ca <_initTwiInterface+0x20>
    54b2:	8c e0       	ldi	r24, 0x0C	; 12
    54b4:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    54b8:	8f ef       	ldi	r24, 0xFF	; 255
    54ba:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    54be:	84 e0       	ldi	r24, 0x04	; 4
    54c0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    54c4:	81 e0       	ldi	r24, 0x01	; 1
    54c6:	80 93 26 1b 	sts	0x1B26, r24	; 0x801b26 <_twiIsInitiated>
    54ca:	08 95       	ret

000054cc <twiCreate>:
    54cc:	af 92       	push	r10
    54ce:	bf 92       	push	r11
    54d0:	cf 92       	push	r12
    54d2:	df 92       	push	r13
    54d4:	ef 92       	push	r14
    54d6:	ff 92       	push	r15
    54d8:	0f 93       	push	r16
    54da:	1f 93       	push	r17
    54dc:	cf 93       	push	r28
    54de:	df 93       	push	r29
    54e0:	a8 2e       	mov	r10, r24
    54e2:	b6 2e       	mov	r11, r22
    54e4:	69 01       	movw	r12, r18
    54e6:	7a 01       	movw	r14, r20
    54e8:	84 e0       	ldi	r24, 0x04	; 4
    54ea:	90 e0       	ldi	r25, 0x00	; 0
    54ec:	cb d3       	rcall	.+1942   	; 0x5c84 <malloc>
    54ee:	ec 01       	movw	r28, r24
    54f0:	89 2b       	or	r24, r25
    54f2:	61 f1       	breq	.+88     	; 0x554c <twiCreate+0x80>
    54f4:	a8 82       	st	Y, r10
    54f6:	81 e0       	ldi	r24, 0x01	; 1
    54f8:	b8 12       	cpse	r11, r24
    54fa:	12 c0       	rjmp	.+36     	; 0x5520 <twiCreate+0x54>
    54fc:	c7 01       	movw	r24, r14
    54fe:	b6 01       	movw	r22, r12
    5500:	20 ea       	ldi	r18, 0xA0	; 160
    5502:	36 e8       	ldi	r19, 0x86	; 134
    5504:	41 e0       	ldi	r20, 0x01	; 1
    5506:	50 e0       	ldi	r21, 0x00	; 0
    5508:	79 d3       	rcall	.+1778   	; 0x5bfc <__udivmodsi4>
    550a:	da 01       	movw	r26, r20
    550c:	c9 01       	movw	r24, r18
    550e:	40 97       	sbiw	r24, 0x10	; 16
    5510:	a1 09       	sbc	r26, r1
    5512:	b1 09       	sbc	r27, r1
    5514:	b6 95       	lsr	r27
    5516:	a7 95       	ror	r26
    5518:	97 95       	ror	r25
    551a:	87 95       	ror	r24
    551c:	89 83       	std	Y+1, r24	; 0x01
    551e:	11 c0       	rjmp	.+34     	; 0x5542 <twiCreate+0x76>
    5520:	c7 01       	movw	r24, r14
    5522:	b6 01       	movw	r22, r12
    5524:	20 e8       	ldi	r18, 0x80	; 128
    5526:	3a e1       	ldi	r19, 0x1A	; 26
    5528:	46 e0       	ldi	r20, 0x06	; 6
    552a:	50 e0       	ldi	r21, 0x00	; 0
    552c:	67 d3       	rcall	.+1742   	; 0x5bfc <__udivmodsi4>
    552e:	da 01       	movw	r26, r20
    5530:	c9 01       	movw	r24, r18
    5532:	40 97       	sbiw	r24, 0x10	; 16
    5534:	a1 09       	sbc	r26, r1
    5536:	b1 09       	sbc	r27, r1
    5538:	b6 95       	lsr	r27
    553a:	a7 95       	ror	r26
    553c:	97 95       	ror	r25
    553e:	87 95       	ror	r24
    5540:	89 83       	std	Y+1, r24	; 0x01
    5542:	1b 83       	std	Y+3, r17	; 0x03
    5544:	0a 83       	std	Y+2, r16	; 0x02
    5546:	8c 2f       	mov	r24, r28
    5548:	9d 2f       	mov	r25, r29
    554a:	02 c0       	rjmp	.+4      	; 0x5550 <twiCreate+0x84>
    554c:	80 e0       	ldi	r24, 0x00	; 0
    554e:	90 e0       	ldi	r25, 0x00	; 0
    5550:	df 91       	pop	r29
    5552:	cf 91       	pop	r28
    5554:	1f 91       	pop	r17
    5556:	0f 91       	pop	r16
    5558:	ff 90       	pop	r15
    555a:	ef 90       	pop	r14
    555c:	df 90       	pop	r13
    555e:	cf 90       	pop	r12
    5560:	bf 90       	pop	r11
    5562:	af 90       	pop	r10
    5564:	08 95       	ret

00005566 <twiIsBusy>:
    5566:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    556a:	81 70       	andi	r24, 0x01	; 1
    556c:	08 95       	ret

0000556e <twiTransmit>:
    556e:	ff 92       	push	r15
    5570:	0f 93       	push	r16
    5572:	1f 93       	push	r17
    5574:	cf 93       	push	r28
    5576:	df 93       	push	r29
    5578:	00 97       	sbiw	r24, 0x00	; 0
    557a:	d1 f1       	breq	.+116    	; 0x55f0 <twiTransmit+0x82>
    557c:	4a 30       	cpi	r20, 0x0A	; 10
    557e:	d0 f5       	brcc	.+116    	; 0x55f4 <twiTransmit+0x86>
    5580:	f4 2e       	mov	r15, r20
    5582:	8b 01       	movw	r16, r22
    5584:	ec 01       	movw	r28, r24
    5586:	ef df       	rcall	.-34     	; 0x5566 <twiIsBusy>
    5588:	81 11       	cpse	r24, r1
    558a:	36 c0       	rjmp	.+108    	; 0x55f8 <twiTransmit+0x8a>
    558c:	80 91 19 1b 	lds	r24, 0x1B19	; 0x801b19 <_twiCurrentHandler>
    5590:	90 91 1a 1b 	lds	r25, 0x1B1A	; 0x801b1a <_twiCurrentHandler+0x1>
    5594:	c8 17       	cp	r28, r24
    5596:	d9 07       	cpc	r29, r25
    5598:	41 f0       	breq	.+16     	; 0x55aa <twiTransmit+0x3c>
    559a:	87 df       	rcall	.-242    	; 0x54aa <_initTwiInterface>
    559c:	89 81       	ldd	r24, Y+1	; 0x01
    559e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    55a2:	d0 93 1a 1b 	sts	0x1B1A, r29	; 0x801b1a <_twiCurrentHandler+0x1>
    55a6:	c0 93 19 1b 	sts	0x1B19, r28	; 0x801b19 <_twiCurrentHandler>
    55aa:	81 e0       	ldi	r24, 0x01	; 1
    55ac:	8f 0d       	add	r24, r15
    55ae:	80 93 1b 1b 	sts	0x1B1B, r24	; 0x801b1b <_twiMessageLen>
    55b2:	88 81       	ld	r24, Y
    55b4:	88 0f       	add	r24, r24
    55b6:	80 93 1c 1b 	sts	0x1B1C, r24	; 0x801b1c <_twiMessageBuffer>
    55ba:	ff 20       	and	r15, r15
    55bc:	89 f0       	breq	.+34     	; 0x55e0 <twiTransmit+0x72>
    55be:	f8 01       	movw	r30, r16
    55c0:	ad e1       	ldi	r26, 0x1D	; 29
    55c2:	bb e1       	ldi	r27, 0x1B	; 27
    55c4:	4f ef       	ldi	r20, 0xFF	; 255
    55c6:	4f 0d       	add	r20, r15
    55c8:	64 2f       	mov	r22, r20
    55ca:	70 e0       	ldi	r23, 0x00	; 0
    55cc:	cb 01       	movw	r24, r22
    55ce:	01 96       	adiw	r24, 0x01	; 1
    55d0:	b8 01       	movw	r22, r16
    55d2:	68 0f       	add	r22, r24
    55d4:	79 1f       	adc	r23, r25
    55d6:	81 91       	ld	r24, Z+
    55d8:	8d 93       	st	X+, r24
    55da:	e6 17       	cp	r30, r22
    55dc:	f7 07       	cpc	r31, r23
    55de:	d9 f7       	brne	.-10     	; 0x55d6 <twiTransmit+0x68>
    55e0:	88 ef       	ldi	r24, 0xF8	; 248
    55e2:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <_twiCurrentState>
    55e6:	85 ea       	ldi	r24, 0xA5	; 165
    55e8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    55ec:	84 e0       	ldi	r24, 0x04	; 4
    55ee:	05 c0       	rjmp	.+10     	; 0x55fa <twiTransmit+0x8c>
    55f0:	86 e0       	ldi	r24, 0x06	; 6
    55f2:	03 c0       	rjmp	.+6      	; 0x55fa <twiTransmit+0x8c>
    55f4:	87 e0       	ldi	r24, 0x07	; 7
    55f6:	01 c0       	rjmp	.+2      	; 0x55fa <twiTransmit+0x8c>
    55f8:	82 e0       	ldi	r24, 0x02	; 2
    55fa:	df 91       	pop	r29
    55fc:	cf 91       	pop	r28
    55fe:	1f 91       	pop	r17
    5600:	0f 91       	pop	r16
    5602:	ff 90       	pop	r15
    5604:	08 95       	ret

00005606 <twiReceive>:
    5606:	1f 93       	push	r17
    5608:	cf 93       	push	r28
    560a:	df 93       	push	r29
    560c:	00 97       	sbiw	r24, 0x00	; 0
    560e:	29 f1       	breq	.+74     	; 0x565a <twiReceive+0x54>
    5610:	6b 30       	cpi	r22, 0x0B	; 11
    5612:	28 f5       	brcc	.+74     	; 0x565e <twiReceive+0x58>
    5614:	16 2f       	mov	r17, r22
    5616:	ec 01       	movw	r28, r24
    5618:	a6 df       	rcall	.-180    	; 0x5566 <twiIsBusy>
    561a:	81 11       	cpse	r24, r1
    561c:	22 c0       	rjmp	.+68     	; 0x5662 <twiReceive+0x5c>
    561e:	80 91 19 1b 	lds	r24, 0x1B19	; 0x801b19 <_twiCurrentHandler>
    5622:	90 91 1a 1b 	lds	r25, 0x1B1A	; 0x801b1a <_twiCurrentHandler+0x1>
    5626:	c8 17       	cp	r28, r24
    5628:	d9 07       	cpc	r29, r25
    562a:	41 f0       	breq	.+16     	; 0x563c <twiReceive+0x36>
    562c:	3e df       	rcall	.-388    	; 0x54aa <_initTwiInterface>
    562e:	89 81       	ldd	r24, Y+1	; 0x01
    5630:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    5634:	d0 93 1a 1b 	sts	0x1B1A, r29	; 0x801b1a <_twiCurrentHandler+0x1>
    5638:	c0 93 19 1b 	sts	0x1B19, r28	; 0x801b19 <_twiCurrentHandler>
    563c:	10 93 1b 1b 	sts	0x1B1B, r17	; 0x801b1b <_twiMessageLen>
    5640:	88 81       	ld	r24, Y
    5642:	88 0f       	add	r24, r24
    5644:	81 60       	ori	r24, 0x01	; 1
    5646:	80 93 1c 1b 	sts	0x1B1C, r24	; 0x801b1c <_twiMessageBuffer>
    564a:	88 ef       	ldi	r24, 0xF8	; 248
    564c:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <_twiCurrentState>
    5650:	85 ea       	ldi	r24, 0xA5	; 165
    5652:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    5656:	85 e0       	ldi	r24, 0x05	; 5
    5658:	05 c0       	rjmp	.+10     	; 0x5664 <twiReceive+0x5e>
    565a:	86 e0       	ldi	r24, 0x06	; 6
    565c:	03 c0       	rjmp	.+6      	; 0x5664 <twiReceive+0x5e>
    565e:	87 e0       	ldi	r24, 0x07	; 7
    5660:	01 c0       	rjmp	.+2      	; 0x5664 <twiReceive+0x5e>
    5662:	82 e0       	ldi	r24, 0x02	; 2
    5664:	df 91       	pop	r29
    5666:	cf 91       	pop	r28
    5668:	1f 91       	pop	r17
    566a:	08 95       	ret

0000566c <__vector_39>:
    566c:	1f 92       	push	r1
    566e:	0f 92       	push	r0
    5670:	0f b6       	in	r0, 0x3f	; 63
    5672:	0f 92       	push	r0
    5674:	11 24       	eor	r1, r1
    5676:	0b b6       	in	r0, 0x3b	; 59
    5678:	0f 92       	push	r0
    567a:	2f 93       	push	r18
    567c:	3f 93       	push	r19
    567e:	4f 93       	push	r20
    5680:	5f 93       	push	r21
    5682:	6f 93       	push	r22
    5684:	7f 93       	push	r23
    5686:	8f 93       	push	r24
    5688:	9f 93       	push	r25
    568a:	af 93       	push	r26
    568c:	bf 93       	push	r27
    568e:	ef 93       	push	r30
    5690:	ff 93       	push	r31
    5692:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    5696:	8e 2f       	mov	r24, r30
    5698:	90 e0       	ldi	r25, 0x00	; 0
    569a:	fc 01       	movw	r30, r24
    569c:	38 97       	sbiw	r30, 0x08	; 8
    569e:	e1 35       	cpi	r30, 0x51	; 81
    56a0:	f1 05       	cpc	r31, r1
    56a2:	08 f0       	brcs	.+2      	; 0x56a6 <__vector_39+0x3a>
    56a4:	75 c0       	rjmp	.+234    	; 0x5790 <__vector_39+0x124>
    56a6:	88 27       	eor	r24, r24
    56a8:	e4 58       	subi	r30, 0x84	; 132
    56aa:	ff 4f       	sbci	r31, 0xFF	; 255
    56ac:	8f 4f       	sbci	r24, 0xFF	; 255
    56ae:	c8 c2       	rjmp	.+1424   	; 0x5c40 <__tablejump2__>
    56b0:	10 92 18 1b 	sts	0x1B18, r1	; 0x801b18 <_index.1885>
    56b4:	e0 91 18 1b 	lds	r30, 0x1B18	; 0x801b18 <_index.1885>
    56b8:	80 91 1b 1b 	lds	r24, 0x1B1B	; 0x801b1b <_twiMessageLen>
    56bc:	e8 17       	cp	r30, r24
    56be:	70 f4       	brcc	.+28     	; 0x56dc <__vector_39+0x70>
    56c0:	81 e0       	ldi	r24, 0x01	; 1
    56c2:	8e 0f       	add	r24, r30
    56c4:	80 93 18 1b 	sts	0x1B18, r24	; 0x801b18 <_index.1885>
    56c8:	f0 e0       	ldi	r31, 0x00	; 0
    56ca:	e4 5e       	subi	r30, 0xE4	; 228
    56cc:	f4 4e       	sbci	r31, 0xE4	; 228
    56ce:	80 81       	ld	r24, Z
    56d0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    56d4:	85 e8       	ldi	r24, 0x85	; 133
    56d6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    56da:	72 c0       	rjmp	.+228    	; 0x57c0 <__vector_39+0x154>
    56dc:	84 e9       	ldi	r24, 0x94	; 148
    56de:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    56e2:	80 91 19 1b 	lds	r24, 0x1B19	; 0x801b19 <_twiCurrentHandler>
    56e6:	90 91 1a 1b 	lds	r25, 0x1B1A	; 0x801b1a <_twiCurrentHandler+0x1>
    56ea:	dc 01       	movw	r26, r24
    56ec:	12 96       	adiw	r26, 0x02	; 2
    56ee:	ed 91       	ld	r30, X+
    56f0:	fc 91       	ld	r31, X
    56f2:	13 97       	sbiw	r26, 0x03	; 3
    56f4:	30 97       	sbiw	r30, 0x00	; 0
    56f6:	09 f4       	brne	.+2      	; 0x56fa <__vector_39+0x8e>
    56f8:	63 c0       	rjmp	.+198    	; 0x57c0 <__vector_39+0x154>
    56fa:	20 e0       	ldi	r18, 0x00	; 0
    56fc:	40 e0       	ldi	r20, 0x00	; 0
    56fe:	50 e0       	ldi	r21, 0x00	; 0
    5700:	64 e0       	ldi	r22, 0x04	; 4
    5702:	19 95       	eicall
    5704:	5d c0       	rjmp	.+186    	; 0x57c0 <__vector_39+0x154>
    5706:	e0 91 18 1b 	lds	r30, 0x1B18	; 0x801b18 <_index.1885>
    570a:	81 e0       	ldi	r24, 0x01	; 1
    570c:	8e 0f       	add	r24, r30
    570e:	80 93 18 1b 	sts	0x1B18, r24	; 0x801b18 <_index.1885>
    5712:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    5716:	f0 e0       	ldi	r31, 0x00	; 0
    5718:	e4 5e       	subi	r30, 0xE4	; 228
    571a:	f4 4e       	sbci	r31, 0xE4	; 228
    571c:	80 83       	st	Z, r24
    571e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    5722:	80 34       	cpi	r24, 0x40	; 64
    5724:	11 f4       	brne	.+4      	; 0x572a <__vector_39+0xbe>
    5726:	10 92 18 1b 	sts	0x1B18, r1	; 0x801b18 <_index.1885>
    572a:	20 91 18 1b 	lds	r18, 0x1B18	; 0x801b18 <_index.1885>
    572e:	30 e0       	ldi	r19, 0x00	; 0
    5730:	80 91 1b 1b 	lds	r24, 0x1B1B	; 0x801b1b <_twiMessageLen>
    5734:	90 e0       	ldi	r25, 0x00	; 0
    5736:	01 97       	sbiw	r24, 0x01	; 1
    5738:	28 17       	cp	r18, r24
    573a:	39 07       	cpc	r19, r25
    573c:	24 f4       	brge	.+8      	; 0x5746 <__vector_39+0xda>
    573e:	85 ec       	ldi	r24, 0xC5	; 197
    5740:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    5744:	3d c0       	rjmp	.+122    	; 0x57c0 <__vector_39+0x154>
    5746:	85 e8       	ldi	r24, 0x85	; 133
    5748:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    574c:	39 c0       	rjmp	.+114    	; 0x57c0 <__vector_39+0x154>
    574e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    5752:	e0 91 18 1b 	lds	r30, 0x1B18	; 0x801b18 <_index.1885>
    5756:	f0 e0       	ldi	r31, 0x00	; 0
    5758:	e4 5e       	subi	r30, 0xE4	; 228
    575a:	f4 4e       	sbci	r31, 0xE4	; 228
    575c:	80 83       	st	Z, r24
    575e:	84 e9       	ldi	r24, 0x94	; 148
    5760:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    5764:	80 91 19 1b 	lds	r24, 0x1B19	; 0x801b19 <_twiCurrentHandler>
    5768:	90 91 1a 1b 	lds	r25, 0x1B1A	; 0x801b1a <_twiCurrentHandler+0x1>
    576c:	dc 01       	movw	r26, r24
    576e:	12 96       	adiw	r26, 0x02	; 2
    5770:	ed 91       	ld	r30, X+
    5772:	fc 91       	ld	r31, X
    5774:	13 97       	sbiw	r26, 0x03	; 3
    5776:	30 97       	sbiw	r30, 0x00	; 0
    5778:	19 f1       	breq	.+70     	; 0x57c0 <__vector_39+0x154>
    577a:	20 91 1b 1b 	lds	r18, 0x1B1B	; 0x801b1b <_twiMessageLen>
    577e:	4c e1       	ldi	r20, 0x1C	; 28
    5780:	5b e1       	ldi	r21, 0x1B	; 27
    5782:	65 e0       	ldi	r22, 0x05	; 5
    5784:	19 95       	eicall
    5786:	1c c0       	rjmp	.+56     	; 0x57c0 <__vector_39+0x154>
    5788:	85 ea       	ldi	r24, 0xA5	; 165
    578a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    578e:	18 c0       	rjmp	.+48     	; 0x57c0 <__vector_39+0x154>
    5790:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    5794:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <_twiCurrentState>
    5798:	84 e0       	ldi	r24, 0x04	; 4
    579a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    579e:	80 91 19 1b 	lds	r24, 0x1B19	; 0x801b19 <_twiCurrentHandler>
    57a2:	90 91 1a 1b 	lds	r25, 0x1B1A	; 0x801b1a <_twiCurrentHandler+0x1>
    57a6:	dc 01       	movw	r26, r24
    57a8:	12 96       	adiw	r26, 0x02	; 2
    57aa:	ed 91       	ld	r30, X+
    57ac:	fc 91       	ld	r31, X
    57ae:	13 97       	sbiw	r26, 0x03	; 3
    57b0:	30 97       	sbiw	r30, 0x00	; 0
    57b2:	31 f0       	breq	.+12     	; 0x57c0 <__vector_39+0x154>
    57b4:	20 e0       	ldi	r18, 0x00	; 0
    57b6:	40 e0       	ldi	r20, 0x00	; 0
    57b8:	50 e0       	ldi	r21, 0x00	; 0
    57ba:	60 91 20 02 	lds	r22, 0x0220	; 0x800220 <_twiCurrentState>
    57be:	19 95       	eicall
    57c0:	ff 91       	pop	r31
    57c2:	ef 91       	pop	r30
    57c4:	bf 91       	pop	r27
    57c6:	af 91       	pop	r26
    57c8:	9f 91       	pop	r25
    57ca:	8f 91       	pop	r24
    57cc:	7f 91       	pop	r23
    57ce:	6f 91       	pop	r22
    57d0:	5f 91       	pop	r21
    57d2:	4f 91       	pop	r20
    57d4:	3f 91       	pop	r19
    57d6:	2f 91       	pop	r18
    57d8:	0f 90       	pop	r0
    57da:	0b be       	out	0x3b, r0	; 59
    57dc:	0f 90       	pop	r0
    57de:	0f be       	out	0x3f, r0	; 63
    57e0:	0f 90       	pop	r0
    57e2:	1f 90       	pop	r1
    57e4:	18 95       	reti

000057e6 <fifo_init>:
    57e6:	fc 01       	movw	r30, r24
    57e8:	41 11       	cpse	r20, r1
    57ea:	01 c0       	rjmp	.+2      	; 0x57ee <fifo_init+0x8>
    57ec:	6c d3       	rcall	.+1752   	; 0x5ec6 <abort>
    57ee:	84 2f       	mov	r24, r20
    57f0:	90 e0       	ldi	r25, 0x00	; 0
    57f2:	9c 01       	movw	r18, r24
    57f4:	21 50       	subi	r18, 0x01	; 1
    57f6:	31 09       	sbc	r19, r1
    57f8:	82 23       	and	r24, r18
    57fa:	93 23       	and	r25, r19
    57fc:	89 2b       	or	r24, r25
    57fe:	09 f0       	breq	.+2      	; 0x5802 <fifo_init+0x1c>
    5800:	62 d3       	rcall	.+1732   	; 0x5ec6 <abort>
    5802:	41 38       	cpi	r20, 0x81	; 129
    5804:	08 f0       	brcs	.+2      	; 0x5808 <fifo_init+0x22>
    5806:	5f d3       	rcall	.+1726   	; 0x5ec6 <abort>
    5808:	12 82       	std	Z+2, r1	; 0x02
    580a:	13 82       	std	Z+3, r1	; 0x03
    580c:	44 83       	std	Z+4, r20	; 0x04
    580e:	44 0f       	add	r20, r20
    5810:	41 50       	subi	r20, 0x01	; 1
    5812:	45 83       	std	Z+5, r20	; 0x05
    5814:	71 83       	std	Z+1, r23	; 0x01
    5816:	60 83       	st	Z, r22
    5818:	80 e0       	ldi	r24, 0x00	; 0
    581a:	90 e0       	ldi	r25, 0x00	; 0
    581c:	08 95       	ret

0000581e <__subsf3>:
    581e:	50 58       	subi	r21, 0x80	; 128

00005820 <__addsf3>:
    5820:	bb 27       	eor	r27, r27
    5822:	aa 27       	eor	r26, r26
    5824:	0e d0       	rcall	.+28     	; 0x5842 <__addsf3x>
    5826:	4d c1       	rjmp	.+666    	; 0x5ac2 <__fp_round>
    5828:	3e d1       	rcall	.+636    	; 0x5aa6 <__fp_pscA>
    582a:	30 f0       	brcs	.+12     	; 0x5838 <__addsf3+0x18>
    582c:	43 d1       	rcall	.+646    	; 0x5ab4 <__fp_pscB>
    582e:	20 f0       	brcs	.+8      	; 0x5838 <__addsf3+0x18>
    5830:	31 f4       	brne	.+12     	; 0x583e <__addsf3+0x1e>
    5832:	9f 3f       	cpi	r25, 0xFF	; 255
    5834:	11 f4       	brne	.+4      	; 0x583a <__addsf3+0x1a>
    5836:	1e f4       	brtc	.+6      	; 0x583e <__addsf3+0x1e>
    5838:	33 c1       	rjmp	.+614    	; 0x5aa0 <__fp_nan>
    583a:	0e f4       	brtc	.+2      	; 0x583e <__addsf3+0x1e>
    583c:	e0 95       	com	r30
    583e:	e7 fb       	bst	r30, 7
    5840:	29 c1       	rjmp	.+594    	; 0x5a94 <__fp_inf>

00005842 <__addsf3x>:
    5842:	e9 2f       	mov	r30, r25
    5844:	4f d1       	rcall	.+670    	; 0x5ae4 <__fp_split3>
    5846:	80 f3       	brcs	.-32     	; 0x5828 <__addsf3+0x8>
    5848:	ba 17       	cp	r27, r26
    584a:	62 07       	cpc	r22, r18
    584c:	73 07       	cpc	r23, r19
    584e:	84 07       	cpc	r24, r20
    5850:	95 07       	cpc	r25, r21
    5852:	18 f0       	brcs	.+6      	; 0x585a <__addsf3x+0x18>
    5854:	71 f4       	brne	.+28     	; 0x5872 <__addsf3x+0x30>
    5856:	9e f5       	brtc	.+102    	; 0x58be <__addsf3x+0x7c>
    5858:	67 c1       	rjmp	.+718    	; 0x5b28 <__fp_zero>
    585a:	0e f4       	brtc	.+2      	; 0x585e <__addsf3x+0x1c>
    585c:	e0 95       	com	r30
    585e:	0b 2e       	mov	r0, r27
    5860:	ba 2f       	mov	r27, r26
    5862:	a0 2d       	mov	r26, r0
    5864:	0b 01       	movw	r0, r22
    5866:	b9 01       	movw	r22, r18
    5868:	90 01       	movw	r18, r0
    586a:	0c 01       	movw	r0, r24
    586c:	ca 01       	movw	r24, r20
    586e:	a0 01       	movw	r20, r0
    5870:	11 24       	eor	r1, r1
    5872:	ff 27       	eor	r31, r31
    5874:	59 1b       	sub	r21, r25
    5876:	99 f0       	breq	.+38     	; 0x589e <__addsf3x+0x5c>
    5878:	59 3f       	cpi	r21, 0xF9	; 249
    587a:	50 f4       	brcc	.+20     	; 0x5890 <__addsf3x+0x4e>
    587c:	50 3e       	cpi	r21, 0xE0	; 224
    587e:	68 f1       	brcs	.+90     	; 0x58da <__addsf3x+0x98>
    5880:	1a 16       	cp	r1, r26
    5882:	f0 40       	sbci	r31, 0x00	; 0
    5884:	a2 2f       	mov	r26, r18
    5886:	23 2f       	mov	r18, r19
    5888:	34 2f       	mov	r19, r20
    588a:	44 27       	eor	r20, r20
    588c:	58 5f       	subi	r21, 0xF8	; 248
    588e:	f3 cf       	rjmp	.-26     	; 0x5876 <__addsf3x+0x34>
    5890:	46 95       	lsr	r20
    5892:	37 95       	ror	r19
    5894:	27 95       	ror	r18
    5896:	a7 95       	ror	r26
    5898:	f0 40       	sbci	r31, 0x00	; 0
    589a:	53 95       	inc	r21
    589c:	c9 f7       	brne	.-14     	; 0x5890 <__addsf3x+0x4e>
    589e:	7e f4       	brtc	.+30     	; 0x58be <__addsf3x+0x7c>
    58a0:	1f 16       	cp	r1, r31
    58a2:	ba 0b       	sbc	r27, r26
    58a4:	62 0b       	sbc	r22, r18
    58a6:	73 0b       	sbc	r23, r19
    58a8:	84 0b       	sbc	r24, r20
    58aa:	ba f0       	brmi	.+46     	; 0x58da <__addsf3x+0x98>
    58ac:	91 50       	subi	r25, 0x01	; 1
    58ae:	a1 f0       	breq	.+40     	; 0x58d8 <__addsf3x+0x96>
    58b0:	ff 0f       	add	r31, r31
    58b2:	bb 1f       	adc	r27, r27
    58b4:	66 1f       	adc	r22, r22
    58b6:	77 1f       	adc	r23, r23
    58b8:	88 1f       	adc	r24, r24
    58ba:	c2 f7       	brpl	.-16     	; 0x58ac <__addsf3x+0x6a>
    58bc:	0e c0       	rjmp	.+28     	; 0x58da <__addsf3x+0x98>
    58be:	ba 0f       	add	r27, r26
    58c0:	62 1f       	adc	r22, r18
    58c2:	73 1f       	adc	r23, r19
    58c4:	84 1f       	adc	r24, r20
    58c6:	48 f4       	brcc	.+18     	; 0x58da <__addsf3x+0x98>
    58c8:	87 95       	ror	r24
    58ca:	77 95       	ror	r23
    58cc:	67 95       	ror	r22
    58ce:	b7 95       	ror	r27
    58d0:	f7 95       	ror	r31
    58d2:	9e 3f       	cpi	r25, 0xFE	; 254
    58d4:	08 f0       	brcs	.+2      	; 0x58d8 <__addsf3x+0x96>
    58d6:	b3 cf       	rjmp	.-154    	; 0x583e <__addsf3+0x1e>
    58d8:	93 95       	inc	r25
    58da:	88 0f       	add	r24, r24
    58dc:	08 f0       	brcs	.+2      	; 0x58e0 <__addsf3x+0x9e>
    58de:	99 27       	eor	r25, r25
    58e0:	ee 0f       	add	r30, r30
    58e2:	97 95       	ror	r25
    58e4:	87 95       	ror	r24
    58e6:	08 95       	ret

000058e8 <__divsf3>:
    58e8:	0c d0       	rcall	.+24     	; 0x5902 <__divsf3x>
    58ea:	eb c0       	rjmp	.+470    	; 0x5ac2 <__fp_round>
    58ec:	e3 d0       	rcall	.+454    	; 0x5ab4 <__fp_pscB>
    58ee:	40 f0       	brcs	.+16     	; 0x5900 <__divsf3+0x18>
    58f0:	da d0       	rcall	.+436    	; 0x5aa6 <__fp_pscA>
    58f2:	30 f0       	brcs	.+12     	; 0x5900 <__divsf3+0x18>
    58f4:	21 f4       	brne	.+8      	; 0x58fe <__divsf3+0x16>
    58f6:	5f 3f       	cpi	r21, 0xFF	; 255
    58f8:	19 f0       	breq	.+6      	; 0x5900 <__divsf3+0x18>
    58fa:	cc c0       	rjmp	.+408    	; 0x5a94 <__fp_inf>
    58fc:	51 11       	cpse	r21, r1
    58fe:	15 c1       	rjmp	.+554    	; 0x5b2a <__fp_szero>
    5900:	cf c0       	rjmp	.+414    	; 0x5aa0 <__fp_nan>

00005902 <__divsf3x>:
    5902:	f0 d0       	rcall	.+480    	; 0x5ae4 <__fp_split3>
    5904:	98 f3       	brcs	.-26     	; 0x58ec <__divsf3+0x4>

00005906 <__divsf3_pse>:
    5906:	99 23       	and	r25, r25
    5908:	c9 f3       	breq	.-14     	; 0x58fc <__divsf3+0x14>
    590a:	55 23       	and	r21, r21
    590c:	b1 f3       	breq	.-20     	; 0x58fa <__divsf3+0x12>
    590e:	95 1b       	sub	r25, r21
    5910:	55 0b       	sbc	r21, r21
    5912:	bb 27       	eor	r27, r27
    5914:	aa 27       	eor	r26, r26
    5916:	62 17       	cp	r22, r18
    5918:	73 07       	cpc	r23, r19
    591a:	84 07       	cpc	r24, r20
    591c:	38 f0       	brcs	.+14     	; 0x592c <__divsf3_pse+0x26>
    591e:	9f 5f       	subi	r25, 0xFF	; 255
    5920:	5f 4f       	sbci	r21, 0xFF	; 255
    5922:	22 0f       	add	r18, r18
    5924:	33 1f       	adc	r19, r19
    5926:	44 1f       	adc	r20, r20
    5928:	aa 1f       	adc	r26, r26
    592a:	a9 f3       	breq	.-22     	; 0x5916 <__divsf3_pse+0x10>
    592c:	33 d0       	rcall	.+102    	; 0x5994 <__divsf3_pse+0x8e>
    592e:	0e 2e       	mov	r0, r30
    5930:	3a f0       	brmi	.+14     	; 0x5940 <__divsf3_pse+0x3a>
    5932:	e0 e8       	ldi	r30, 0x80	; 128
    5934:	30 d0       	rcall	.+96     	; 0x5996 <__divsf3_pse+0x90>
    5936:	91 50       	subi	r25, 0x01	; 1
    5938:	50 40       	sbci	r21, 0x00	; 0
    593a:	e6 95       	lsr	r30
    593c:	00 1c       	adc	r0, r0
    593e:	ca f7       	brpl	.-14     	; 0x5932 <__divsf3_pse+0x2c>
    5940:	29 d0       	rcall	.+82     	; 0x5994 <__divsf3_pse+0x8e>
    5942:	fe 2f       	mov	r31, r30
    5944:	27 d0       	rcall	.+78     	; 0x5994 <__divsf3_pse+0x8e>
    5946:	66 0f       	add	r22, r22
    5948:	77 1f       	adc	r23, r23
    594a:	88 1f       	adc	r24, r24
    594c:	bb 1f       	adc	r27, r27
    594e:	26 17       	cp	r18, r22
    5950:	37 07       	cpc	r19, r23
    5952:	48 07       	cpc	r20, r24
    5954:	ab 07       	cpc	r26, r27
    5956:	b0 e8       	ldi	r27, 0x80	; 128
    5958:	09 f0       	breq	.+2      	; 0x595c <__divsf3_pse+0x56>
    595a:	bb 0b       	sbc	r27, r27
    595c:	80 2d       	mov	r24, r0
    595e:	bf 01       	movw	r22, r30
    5960:	ff 27       	eor	r31, r31
    5962:	93 58       	subi	r25, 0x83	; 131
    5964:	5f 4f       	sbci	r21, 0xFF	; 255
    5966:	2a f0       	brmi	.+10     	; 0x5972 <__divsf3_pse+0x6c>
    5968:	9e 3f       	cpi	r25, 0xFE	; 254
    596a:	51 05       	cpc	r21, r1
    596c:	68 f0       	brcs	.+26     	; 0x5988 <__divsf3_pse+0x82>
    596e:	92 c0       	rjmp	.+292    	; 0x5a94 <__fp_inf>
    5970:	dc c0       	rjmp	.+440    	; 0x5b2a <__fp_szero>
    5972:	5f 3f       	cpi	r21, 0xFF	; 255
    5974:	ec f3       	brlt	.-6      	; 0x5970 <__divsf3_pse+0x6a>
    5976:	98 3e       	cpi	r25, 0xE8	; 232
    5978:	dc f3       	brlt	.-10     	; 0x5970 <__divsf3_pse+0x6a>
    597a:	86 95       	lsr	r24
    597c:	77 95       	ror	r23
    597e:	67 95       	ror	r22
    5980:	b7 95       	ror	r27
    5982:	f7 95       	ror	r31
    5984:	9f 5f       	subi	r25, 0xFF	; 255
    5986:	c9 f7       	brne	.-14     	; 0x597a <__divsf3_pse+0x74>
    5988:	88 0f       	add	r24, r24
    598a:	91 1d       	adc	r25, r1
    598c:	96 95       	lsr	r25
    598e:	87 95       	ror	r24
    5990:	97 f9       	bld	r25, 7
    5992:	08 95       	ret
    5994:	e1 e0       	ldi	r30, 0x01	; 1
    5996:	66 0f       	add	r22, r22
    5998:	77 1f       	adc	r23, r23
    599a:	88 1f       	adc	r24, r24
    599c:	bb 1f       	adc	r27, r27
    599e:	62 17       	cp	r22, r18
    59a0:	73 07       	cpc	r23, r19
    59a2:	84 07       	cpc	r24, r20
    59a4:	ba 07       	cpc	r27, r26
    59a6:	20 f0       	brcs	.+8      	; 0x59b0 <__divsf3_pse+0xaa>
    59a8:	62 1b       	sub	r22, r18
    59aa:	73 0b       	sbc	r23, r19
    59ac:	84 0b       	sbc	r24, r20
    59ae:	ba 0b       	sbc	r27, r26
    59b0:	ee 1f       	adc	r30, r30
    59b2:	88 f7       	brcc	.-30     	; 0x5996 <__divsf3_pse+0x90>
    59b4:	e0 95       	com	r30
    59b6:	08 95       	ret

000059b8 <__fixsfsi>:
    59b8:	04 d0       	rcall	.+8      	; 0x59c2 <__fixunssfsi>
    59ba:	68 94       	set
    59bc:	b1 11       	cpse	r27, r1
    59be:	b5 c0       	rjmp	.+362    	; 0x5b2a <__fp_szero>
    59c0:	08 95       	ret

000059c2 <__fixunssfsi>:
    59c2:	98 d0       	rcall	.+304    	; 0x5af4 <__fp_splitA>
    59c4:	88 f0       	brcs	.+34     	; 0x59e8 <__fixunssfsi+0x26>
    59c6:	9f 57       	subi	r25, 0x7F	; 127
    59c8:	90 f0       	brcs	.+36     	; 0x59ee <__fixunssfsi+0x2c>
    59ca:	b9 2f       	mov	r27, r25
    59cc:	99 27       	eor	r25, r25
    59ce:	b7 51       	subi	r27, 0x17	; 23
    59d0:	a0 f0       	brcs	.+40     	; 0x59fa <__fixunssfsi+0x38>
    59d2:	d1 f0       	breq	.+52     	; 0x5a08 <__fixunssfsi+0x46>
    59d4:	66 0f       	add	r22, r22
    59d6:	77 1f       	adc	r23, r23
    59d8:	88 1f       	adc	r24, r24
    59da:	99 1f       	adc	r25, r25
    59dc:	1a f0       	brmi	.+6      	; 0x59e4 <__fixunssfsi+0x22>
    59de:	ba 95       	dec	r27
    59e0:	c9 f7       	brne	.-14     	; 0x59d4 <__fixunssfsi+0x12>
    59e2:	12 c0       	rjmp	.+36     	; 0x5a08 <__fixunssfsi+0x46>
    59e4:	b1 30       	cpi	r27, 0x01	; 1
    59e6:	81 f0       	breq	.+32     	; 0x5a08 <__fixunssfsi+0x46>
    59e8:	9f d0       	rcall	.+318    	; 0x5b28 <__fp_zero>
    59ea:	b1 e0       	ldi	r27, 0x01	; 1
    59ec:	08 95       	ret
    59ee:	9c c0       	rjmp	.+312    	; 0x5b28 <__fp_zero>
    59f0:	67 2f       	mov	r22, r23
    59f2:	78 2f       	mov	r23, r24
    59f4:	88 27       	eor	r24, r24
    59f6:	b8 5f       	subi	r27, 0xF8	; 248
    59f8:	39 f0       	breq	.+14     	; 0x5a08 <__fixunssfsi+0x46>
    59fa:	b9 3f       	cpi	r27, 0xF9	; 249
    59fc:	cc f3       	brlt	.-14     	; 0x59f0 <__fixunssfsi+0x2e>
    59fe:	86 95       	lsr	r24
    5a00:	77 95       	ror	r23
    5a02:	67 95       	ror	r22
    5a04:	b3 95       	inc	r27
    5a06:	d9 f7       	brne	.-10     	; 0x59fe <__fixunssfsi+0x3c>
    5a08:	3e f4       	brtc	.+14     	; 0x5a18 <__fixunssfsi+0x56>
    5a0a:	90 95       	com	r25
    5a0c:	80 95       	com	r24
    5a0e:	70 95       	com	r23
    5a10:	61 95       	neg	r22
    5a12:	7f 4f       	sbci	r23, 0xFF	; 255
    5a14:	8f 4f       	sbci	r24, 0xFF	; 255
    5a16:	9f 4f       	sbci	r25, 0xFF	; 255
    5a18:	08 95       	ret

00005a1a <__floatunsisf>:
    5a1a:	e8 94       	clt
    5a1c:	09 c0       	rjmp	.+18     	; 0x5a30 <__floatsisf+0x12>

00005a1e <__floatsisf>:
    5a1e:	97 fb       	bst	r25, 7
    5a20:	3e f4       	brtc	.+14     	; 0x5a30 <__floatsisf+0x12>
    5a22:	90 95       	com	r25
    5a24:	80 95       	com	r24
    5a26:	70 95       	com	r23
    5a28:	61 95       	neg	r22
    5a2a:	7f 4f       	sbci	r23, 0xFF	; 255
    5a2c:	8f 4f       	sbci	r24, 0xFF	; 255
    5a2e:	9f 4f       	sbci	r25, 0xFF	; 255
    5a30:	99 23       	and	r25, r25
    5a32:	a9 f0       	breq	.+42     	; 0x5a5e <__floatsisf+0x40>
    5a34:	f9 2f       	mov	r31, r25
    5a36:	96 e9       	ldi	r25, 0x96	; 150
    5a38:	bb 27       	eor	r27, r27
    5a3a:	93 95       	inc	r25
    5a3c:	f6 95       	lsr	r31
    5a3e:	87 95       	ror	r24
    5a40:	77 95       	ror	r23
    5a42:	67 95       	ror	r22
    5a44:	b7 95       	ror	r27
    5a46:	f1 11       	cpse	r31, r1
    5a48:	f8 cf       	rjmp	.-16     	; 0x5a3a <__floatsisf+0x1c>
    5a4a:	fa f4       	brpl	.+62     	; 0x5a8a <__floatsisf+0x6c>
    5a4c:	bb 0f       	add	r27, r27
    5a4e:	11 f4       	brne	.+4      	; 0x5a54 <__floatsisf+0x36>
    5a50:	60 ff       	sbrs	r22, 0
    5a52:	1b c0       	rjmp	.+54     	; 0x5a8a <__floatsisf+0x6c>
    5a54:	6f 5f       	subi	r22, 0xFF	; 255
    5a56:	7f 4f       	sbci	r23, 0xFF	; 255
    5a58:	8f 4f       	sbci	r24, 0xFF	; 255
    5a5a:	9f 4f       	sbci	r25, 0xFF	; 255
    5a5c:	16 c0       	rjmp	.+44     	; 0x5a8a <__floatsisf+0x6c>
    5a5e:	88 23       	and	r24, r24
    5a60:	11 f0       	breq	.+4      	; 0x5a66 <__floatsisf+0x48>
    5a62:	96 e9       	ldi	r25, 0x96	; 150
    5a64:	11 c0       	rjmp	.+34     	; 0x5a88 <__floatsisf+0x6a>
    5a66:	77 23       	and	r23, r23
    5a68:	21 f0       	breq	.+8      	; 0x5a72 <__floatsisf+0x54>
    5a6a:	9e e8       	ldi	r25, 0x8E	; 142
    5a6c:	87 2f       	mov	r24, r23
    5a6e:	76 2f       	mov	r23, r22
    5a70:	05 c0       	rjmp	.+10     	; 0x5a7c <__floatsisf+0x5e>
    5a72:	66 23       	and	r22, r22
    5a74:	71 f0       	breq	.+28     	; 0x5a92 <__floatsisf+0x74>
    5a76:	96 e8       	ldi	r25, 0x86	; 134
    5a78:	86 2f       	mov	r24, r22
    5a7a:	70 e0       	ldi	r23, 0x00	; 0
    5a7c:	60 e0       	ldi	r22, 0x00	; 0
    5a7e:	2a f0       	brmi	.+10     	; 0x5a8a <__floatsisf+0x6c>
    5a80:	9a 95       	dec	r25
    5a82:	66 0f       	add	r22, r22
    5a84:	77 1f       	adc	r23, r23
    5a86:	88 1f       	adc	r24, r24
    5a88:	da f7       	brpl	.-10     	; 0x5a80 <__floatsisf+0x62>
    5a8a:	88 0f       	add	r24, r24
    5a8c:	96 95       	lsr	r25
    5a8e:	87 95       	ror	r24
    5a90:	97 f9       	bld	r25, 7
    5a92:	08 95       	ret

00005a94 <__fp_inf>:
    5a94:	97 f9       	bld	r25, 7
    5a96:	9f 67       	ori	r25, 0x7F	; 127
    5a98:	80 e8       	ldi	r24, 0x80	; 128
    5a9a:	70 e0       	ldi	r23, 0x00	; 0
    5a9c:	60 e0       	ldi	r22, 0x00	; 0
    5a9e:	08 95       	ret

00005aa0 <__fp_nan>:
    5aa0:	9f ef       	ldi	r25, 0xFF	; 255
    5aa2:	80 ec       	ldi	r24, 0xC0	; 192
    5aa4:	08 95       	ret

00005aa6 <__fp_pscA>:
    5aa6:	00 24       	eor	r0, r0
    5aa8:	0a 94       	dec	r0
    5aaa:	16 16       	cp	r1, r22
    5aac:	17 06       	cpc	r1, r23
    5aae:	18 06       	cpc	r1, r24
    5ab0:	09 06       	cpc	r0, r25
    5ab2:	08 95       	ret

00005ab4 <__fp_pscB>:
    5ab4:	00 24       	eor	r0, r0
    5ab6:	0a 94       	dec	r0
    5ab8:	12 16       	cp	r1, r18
    5aba:	13 06       	cpc	r1, r19
    5abc:	14 06       	cpc	r1, r20
    5abe:	05 06       	cpc	r0, r21
    5ac0:	08 95       	ret

00005ac2 <__fp_round>:
    5ac2:	09 2e       	mov	r0, r25
    5ac4:	03 94       	inc	r0
    5ac6:	00 0c       	add	r0, r0
    5ac8:	11 f4       	brne	.+4      	; 0x5ace <__fp_round+0xc>
    5aca:	88 23       	and	r24, r24
    5acc:	52 f0       	brmi	.+20     	; 0x5ae2 <__fp_round+0x20>
    5ace:	bb 0f       	add	r27, r27
    5ad0:	40 f4       	brcc	.+16     	; 0x5ae2 <__fp_round+0x20>
    5ad2:	bf 2b       	or	r27, r31
    5ad4:	11 f4       	brne	.+4      	; 0x5ada <__fp_round+0x18>
    5ad6:	60 ff       	sbrs	r22, 0
    5ad8:	04 c0       	rjmp	.+8      	; 0x5ae2 <__fp_round+0x20>
    5ada:	6f 5f       	subi	r22, 0xFF	; 255
    5adc:	7f 4f       	sbci	r23, 0xFF	; 255
    5ade:	8f 4f       	sbci	r24, 0xFF	; 255
    5ae0:	9f 4f       	sbci	r25, 0xFF	; 255
    5ae2:	08 95       	ret

00005ae4 <__fp_split3>:
    5ae4:	57 fd       	sbrc	r21, 7
    5ae6:	90 58       	subi	r25, 0x80	; 128
    5ae8:	44 0f       	add	r20, r20
    5aea:	55 1f       	adc	r21, r21
    5aec:	59 f0       	breq	.+22     	; 0x5b04 <__fp_splitA+0x10>
    5aee:	5f 3f       	cpi	r21, 0xFF	; 255
    5af0:	71 f0       	breq	.+28     	; 0x5b0e <__fp_splitA+0x1a>
    5af2:	47 95       	ror	r20

00005af4 <__fp_splitA>:
    5af4:	88 0f       	add	r24, r24
    5af6:	97 fb       	bst	r25, 7
    5af8:	99 1f       	adc	r25, r25
    5afa:	61 f0       	breq	.+24     	; 0x5b14 <__fp_splitA+0x20>
    5afc:	9f 3f       	cpi	r25, 0xFF	; 255
    5afe:	79 f0       	breq	.+30     	; 0x5b1e <__fp_splitA+0x2a>
    5b00:	87 95       	ror	r24
    5b02:	08 95       	ret
    5b04:	12 16       	cp	r1, r18
    5b06:	13 06       	cpc	r1, r19
    5b08:	14 06       	cpc	r1, r20
    5b0a:	55 1f       	adc	r21, r21
    5b0c:	f2 cf       	rjmp	.-28     	; 0x5af2 <__fp_split3+0xe>
    5b0e:	46 95       	lsr	r20
    5b10:	f1 df       	rcall	.-30     	; 0x5af4 <__fp_splitA>
    5b12:	08 c0       	rjmp	.+16     	; 0x5b24 <__fp_splitA+0x30>
    5b14:	16 16       	cp	r1, r22
    5b16:	17 06       	cpc	r1, r23
    5b18:	18 06       	cpc	r1, r24
    5b1a:	99 1f       	adc	r25, r25
    5b1c:	f1 cf       	rjmp	.-30     	; 0x5b00 <__fp_splitA+0xc>
    5b1e:	86 95       	lsr	r24
    5b20:	71 05       	cpc	r23, r1
    5b22:	61 05       	cpc	r22, r1
    5b24:	08 94       	sec
    5b26:	08 95       	ret

00005b28 <__fp_zero>:
    5b28:	e8 94       	clt

00005b2a <__fp_szero>:
    5b2a:	bb 27       	eor	r27, r27
    5b2c:	66 27       	eor	r22, r22
    5b2e:	77 27       	eor	r23, r23
    5b30:	cb 01       	movw	r24, r22
    5b32:	97 f9       	bld	r25, 7
    5b34:	08 95       	ret

00005b36 <__mulsf3>:
    5b36:	0b d0       	rcall	.+22     	; 0x5b4e <__mulsf3x>
    5b38:	c4 cf       	rjmp	.-120    	; 0x5ac2 <__fp_round>
    5b3a:	b5 df       	rcall	.-150    	; 0x5aa6 <__fp_pscA>
    5b3c:	28 f0       	brcs	.+10     	; 0x5b48 <__mulsf3+0x12>
    5b3e:	ba df       	rcall	.-140    	; 0x5ab4 <__fp_pscB>
    5b40:	18 f0       	brcs	.+6      	; 0x5b48 <__mulsf3+0x12>
    5b42:	95 23       	and	r25, r21
    5b44:	09 f0       	breq	.+2      	; 0x5b48 <__mulsf3+0x12>
    5b46:	a6 cf       	rjmp	.-180    	; 0x5a94 <__fp_inf>
    5b48:	ab cf       	rjmp	.-170    	; 0x5aa0 <__fp_nan>
    5b4a:	11 24       	eor	r1, r1
    5b4c:	ee cf       	rjmp	.-36     	; 0x5b2a <__fp_szero>

00005b4e <__mulsf3x>:
    5b4e:	ca df       	rcall	.-108    	; 0x5ae4 <__fp_split3>
    5b50:	a0 f3       	brcs	.-24     	; 0x5b3a <__mulsf3+0x4>

00005b52 <__mulsf3_pse>:
    5b52:	95 9f       	mul	r25, r21
    5b54:	d1 f3       	breq	.-12     	; 0x5b4a <__mulsf3+0x14>
    5b56:	95 0f       	add	r25, r21
    5b58:	50 e0       	ldi	r21, 0x00	; 0
    5b5a:	55 1f       	adc	r21, r21
    5b5c:	62 9f       	mul	r22, r18
    5b5e:	f0 01       	movw	r30, r0
    5b60:	72 9f       	mul	r23, r18
    5b62:	bb 27       	eor	r27, r27
    5b64:	f0 0d       	add	r31, r0
    5b66:	b1 1d       	adc	r27, r1
    5b68:	63 9f       	mul	r22, r19
    5b6a:	aa 27       	eor	r26, r26
    5b6c:	f0 0d       	add	r31, r0
    5b6e:	b1 1d       	adc	r27, r1
    5b70:	aa 1f       	adc	r26, r26
    5b72:	64 9f       	mul	r22, r20
    5b74:	66 27       	eor	r22, r22
    5b76:	b0 0d       	add	r27, r0
    5b78:	a1 1d       	adc	r26, r1
    5b7a:	66 1f       	adc	r22, r22
    5b7c:	82 9f       	mul	r24, r18
    5b7e:	22 27       	eor	r18, r18
    5b80:	b0 0d       	add	r27, r0
    5b82:	a1 1d       	adc	r26, r1
    5b84:	62 1f       	adc	r22, r18
    5b86:	73 9f       	mul	r23, r19
    5b88:	b0 0d       	add	r27, r0
    5b8a:	a1 1d       	adc	r26, r1
    5b8c:	62 1f       	adc	r22, r18
    5b8e:	83 9f       	mul	r24, r19
    5b90:	a0 0d       	add	r26, r0
    5b92:	61 1d       	adc	r22, r1
    5b94:	22 1f       	adc	r18, r18
    5b96:	74 9f       	mul	r23, r20
    5b98:	33 27       	eor	r19, r19
    5b9a:	a0 0d       	add	r26, r0
    5b9c:	61 1d       	adc	r22, r1
    5b9e:	23 1f       	adc	r18, r19
    5ba0:	84 9f       	mul	r24, r20
    5ba2:	60 0d       	add	r22, r0
    5ba4:	21 1d       	adc	r18, r1
    5ba6:	82 2f       	mov	r24, r18
    5ba8:	76 2f       	mov	r23, r22
    5baa:	6a 2f       	mov	r22, r26
    5bac:	11 24       	eor	r1, r1
    5bae:	9f 57       	subi	r25, 0x7F	; 127
    5bb0:	50 40       	sbci	r21, 0x00	; 0
    5bb2:	8a f0       	brmi	.+34     	; 0x5bd6 <__mulsf3_pse+0x84>
    5bb4:	e1 f0       	breq	.+56     	; 0x5bee <__mulsf3_pse+0x9c>
    5bb6:	88 23       	and	r24, r24
    5bb8:	4a f0       	brmi	.+18     	; 0x5bcc <__mulsf3_pse+0x7a>
    5bba:	ee 0f       	add	r30, r30
    5bbc:	ff 1f       	adc	r31, r31
    5bbe:	bb 1f       	adc	r27, r27
    5bc0:	66 1f       	adc	r22, r22
    5bc2:	77 1f       	adc	r23, r23
    5bc4:	88 1f       	adc	r24, r24
    5bc6:	91 50       	subi	r25, 0x01	; 1
    5bc8:	50 40       	sbci	r21, 0x00	; 0
    5bca:	a9 f7       	brne	.-22     	; 0x5bb6 <__mulsf3_pse+0x64>
    5bcc:	9e 3f       	cpi	r25, 0xFE	; 254
    5bce:	51 05       	cpc	r21, r1
    5bd0:	70 f0       	brcs	.+28     	; 0x5bee <__mulsf3_pse+0x9c>
    5bd2:	60 cf       	rjmp	.-320    	; 0x5a94 <__fp_inf>
    5bd4:	aa cf       	rjmp	.-172    	; 0x5b2a <__fp_szero>
    5bd6:	5f 3f       	cpi	r21, 0xFF	; 255
    5bd8:	ec f3       	brlt	.-6      	; 0x5bd4 <__mulsf3_pse+0x82>
    5bda:	98 3e       	cpi	r25, 0xE8	; 232
    5bdc:	dc f3       	brlt	.-10     	; 0x5bd4 <__mulsf3_pse+0x82>
    5bde:	86 95       	lsr	r24
    5be0:	77 95       	ror	r23
    5be2:	67 95       	ror	r22
    5be4:	b7 95       	ror	r27
    5be6:	f7 95       	ror	r31
    5be8:	e7 95       	ror	r30
    5bea:	9f 5f       	subi	r25, 0xFF	; 255
    5bec:	c1 f7       	brne	.-16     	; 0x5bde <__mulsf3_pse+0x8c>
    5bee:	fe 2b       	or	r31, r30
    5bf0:	88 0f       	add	r24, r24
    5bf2:	91 1d       	adc	r25, r1
    5bf4:	96 95       	lsr	r25
    5bf6:	87 95       	ror	r24
    5bf8:	97 f9       	bld	r25, 7
    5bfa:	08 95       	ret

00005bfc <__udivmodsi4>:
    5bfc:	a1 e2       	ldi	r26, 0x21	; 33
    5bfe:	1a 2e       	mov	r1, r26
    5c00:	aa 1b       	sub	r26, r26
    5c02:	bb 1b       	sub	r27, r27
    5c04:	fd 01       	movw	r30, r26
    5c06:	0d c0       	rjmp	.+26     	; 0x5c22 <__udivmodsi4_ep>

00005c08 <__udivmodsi4_loop>:
    5c08:	aa 1f       	adc	r26, r26
    5c0a:	bb 1f       	adc	r27, r27
    5c0c:	ee 1f       	adc	r30, r30
    5c0e:	ff 1f       	adc	r31, r31
    5c10:	a2 17       	cp	r26, r18
    5c12:	b3 07       	cpc	r27, r19
    5c14:	e4 07       	cpc	r30, r20
    5c16:	f5 07       	cpc	r31, r21
    5c18:	20 f0       	brcs	.+8      	; 0x5c22 <__udivmodsi4_ep>
    5c1a:	a2 1b       	sub	r26, r18
    5c1c:	b3 0b       	sbc	r27, r19
    5c1e:	e4 0b       	sbc	r30, r20
    5c20:	f5 0b       	sbc	r31, r21

00005c22 <__udivmodsi4_ep>:
    5c22:	66 1f       	adc	r22, r22
    5c24:	77 1f       	adc	r23, r23
    5c26:	88 1f       	adc	r24, r24
    5c28:	99 1f       	adc	r25, r25
    5c2a:	1a 94       	dec	r1
    5c2c:	69 f7       	brne	.-38     	; 0x5c08 <__udivmodsi4_loop>
    5c2e:	60 95       	com	r22
    5c30:	70 95       	com	r23
    5c32:	80 95       	com	r24
    5c34:	90 95       	com	r25
    5c36:	9b 01       	movw	r18, r22
    5c38:	ac 01       	movw	r20, r24
    5c3a:	bd 01       	movw	r22, r26
    5c3c:	cf 01       	movw	r24, r30
    5c3e:	08 95       	ret

00005c40 <__tablejump2__>:
    5c40:	ee 0f       	add	r30, r30
    5c42:	ff 1f       	adc	r31, r31
    5c44:	88 1f       	adc	r24, r24
    5c46:	8b bf       	out	0x3b, r24	; 59
    5c48:	07 90       	elpm	r0, Z+
    5c4a:	f6 91       	elpm	r31, Z
    5c4c:	e0 2d       	mov	r30, r0
    5c4e:	19 94       	eijmp

00005c50 <calloc>:
    5c50:	0f 93       	push	r16
    5c52:	1f 93       	push	r17
    5c54:	cf 93       	push	r28
    5c56:	df 93       	push	r29
    5c58:	86 9f       	mul	r24, r22
    5c5a:	80 01       	movw	r16, r0
    5c5c:	87 9f       	mul	r24, r23
    5c5e:	10 0d       	add	r17, r0
    5c60:	96 9f       	mul	r25, r22
    5c62:	10 0d       	add	r17, r0
    5c64:	11 24       	eor	r1, r1
    5c66:	c8 01       	movw	r24, r16
    5c68:	0d d0       	rcall	.+26     	; 0x5c84 <malloc>
    5c6a:	ec 01       	movw	r28, r24
    5c6c:	00 97       	sbiw	r24, 0x00	; 0
    5c6e:	21 f0       	breq	.+8      	; 0x5c78 <calloc+0x28>
    5c70:	a8 01       	movw	r20, r16
    5c72:	60 e0       	ldi	r22, 0x00	; 0
    5c74:	70 e0       	ldi	r23, 0x00	; 0
    5c76:	34 d1       	rcall	.+616    	; 0x5ee0 <memset>
    5c78:	ce 01       	movw	r24, r28
    5c7a:	df 91       	pop	r29
    5c7c:	cf 91       	pop	r28
    5c7e:	1f 91       	pop	r17
    5c80:	0f 91       	pop	r16
    5c82:	08 95       	ret

00005c84 <malloc>:
    5c84:	0f 93       	push	r16
    5c86:	1f 93       	push	r17
    5c88:	cf 93       	push	r28
    5c8a:	df 93       	push	r29
    5c8c:	82 30       	cpi	r24, 0x02	; 2
    5c8e:	91 05       	cpc	r25, r1
    5c90:	10 f4       	brcc	.+4      	; 0x5c96 <malloc+0x12>
    5c92:	82 e0       	ldi	r24, 0x02	; 2
    5c94:	90 e0       	ldi	r25, 0x00	; 0
    5c96:	e0 91 5f 1b 	lds	r30, 0x1B5F	; 0x801b5f <__flp>
    5c9a:	f0 91 60 1b 	lds	r31, 0x1B60	; 0x801b60 <__flp+0x1>
    5c9e:	20 e0       	ldi	r18, 0x00	; 0
    5ca0:	30 e0       	ldi	r19, 0x00	; 0
    5ca2:	a0 e0       	ldi	r26, 0x00	; 0
    5ca4:	b0 e0       	ldi	r27, 0x00	; 0
    5ca6:	30 97       	sbiw	r30, 0x00	; 0
    5ca8:	19 f1       	breq	.+70     	; 0x5cf0 <malloc+0x6c>
    5caa:	40 81       	ld	r20, Z
    5cac:	51 81       	ldd	r21, Z+1	; 0x01
    5cae:	02 81       	ldd	r16, Z+2	; 0x02
    5cb0:	13 81       	ldd	r17, Z+3	; 0x03
    5cb2:	48 17       	cp	r20, r24
    5cb4:	59 07       	cpc	r21, r25
    5cb6:	c8 f0       	brcs	.+50     	; 0x5cea <malloc+0x66>
    5cb8:	84 17       	cp	r24, r20
    5cba:	95 07       	cpc	r25, r21
    5cbc:	69 f4       	brne	.+26     	; 0x5cd8 <malloc+0x54>
    5cbe:	10 97       	sbiw	r26, 0x00	; 0
    5cc0:	31 f0       	breq	.+12     	; 0x5cce <malloc+0x4a>
    5cc2:	12 96       	adiw	r26, 0x02	; 2
    5cc4:	0c 93       	st	X, r16
    5cc6:	12 97       	sbiw	r26, 0x02	; 2
    5cc8:	13 96       	adiw	r26, 0x03	; 3
    5cca:	1c 93       	st	X, r17
    5ccc:	27 c0       	rjmp	.+78     	; 0x5d1c <malloc+0x98>
    5cce:	00 93 5f 1b 	sts	0x1B5F, r16	; 0x801b5f <__flp>
    5cd2:	10 93 60 1b 	sts	0x1B60, r17	; 0x801b60 <__flp+0x1>
    5cd6:	22 c0       	rjmp	.+68     	; 0x5d1c <malloc+0x98>
    5cd8:	21 15       	cp	r18, r1
    5cda:	31 05       	cpc	r19, r1
    5cdc:	19 f0       	breq	.+6      	; 0x5ce4 <malloc+0x60>
    5cde:	42 17       	cp	r20, r18
    5ce0:	53 07       	cpc	r21, r19
    5ce2:	18 f4       	brcc	.+6      	; 0x5cea <malloc+0x66>
    5ce4:	9a 01       	movw	r18, r20
    5ce6:	bd 01       	movw	r22, r26
    5ce8:	ef 01       	movw	r28, r30
    5cea:	df 01       	movw	r26, r30
    5cec:	f8 01       	movw	r30, r16
    5cee:	db cf       	rjmp	.-74     	; 0x5ca6 <malloc+0x22>
    5cf0:	21 15       	cp	r18, r1
    5cf2:	31 05       	cpc	r19, r1
    5cf4:	f9 f0       	breq	.+62     	; 0x5d34 <malloc+0xb0>
    5cf6:	28 1b       	sub	r18, r24
    5cf8:	39 0b       	sbc	r19, r25
    5cfa:	24 30       	cpi	r18, 0x04	; 4
    5cfc:	31 05       	cpc	r19, r1
    5cfe:	80 f4       	brcc	.+32     	; 0x5d20 <malloc+0x9c>
    5d00:	8a 81       	ldd	r24, Y+2	; 0x02
    5d02:	9b 81       	ldd	r25, Y+3	; 0x03
    5d04:	61 15       	cp	r22, r1
    5d06:	71 05       	cpc	r23, r1
    5d08:	21 f0       	breq	.+8      	; 0x5d12 <malloc+0x8e>
    5d0a:	fb 01       	movw	r30, r22
    5d0c:	93 83       	std	Z+3, r25	; 0x03
    5d0e:	82 83       	std	Z+2, r24	; 0x02
    5d10:	04 c0       	rjmp	.+8      	; 0x5d1a <malloc+0x96>
    5d12:	90 93 60 1b 	sts	0x1B60, r25	; 0x801b60 <__flp+0x1>
    5d16:	80 93 5f 1b 	sts	0x1B5F, r24	; 0x801b5f <__flp>
    5d1a:	fe 01       	movw	r30, r28
    5d1c:	32 96       	adiw	r30, 0x02	; 2
    5d1e:	44 c0       	rjmp	.+136    	; 0x5da8 <malloc+0x124>
    5d20:	fe 01       	movw	r30, r28
    5d22:	e2 0f       	add	r30, r18
    5d24:	f3 1f       	adc	r31, r19
    5d26:	81 93       	st	Z+, r24
    5d28:	91 93       	st	Z+, r25
    5d2a:	22 50       	subi	r18, 0x02	; 2
    5d2c:	31 09       	sbc	r19, r1
    5d2e:	39 83       	std	Y+1, r19	; 0x01
    5d30:	28 83       	st	Y, r18
    5d32:	3a c0       	rjmp	.+116    	; 0x5da8 <malloc+0x124>
    5d34:	20 91 5d 1b 	lds	r18, 0x1B5D	; 0x801b5d <__brkval>
    5d38:	30 91 5e 1b 	lds	r19, 0x1B5E	; 0x801b5e <__brkval+0x1>
    5d3c:	23 2b       	or	r18, r19
    5d3e:	41 f4       	brne	.+16     	; 0x5d50 <malloc+0xcc>
    5d40:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    5d44:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    5d48:	30 93 5e 1b 	sts	0x1B5E, r19	; 0x801b5e <__brkval+0x1>
    5d4c:	20 93 5d 1b 	sts	0x1B5D, r18	; 0x801b5d <__brkval>
    5d50:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    5d54:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    5d58:	21 15       	cp	r18, r1
    5d5a:	31 05       	cpc	r19, r1
    5d5c:	41 f4       	brne	.+16     	; 0x5d6e <malloc+0xea>
    5d5e:	2d b7       	in	r18, 0x3d	; 61
    5d60:	3e b7       	in	r19, 0x3e	; 62
    5d62:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    5d66:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    5d6a:	24 1b       	sub	r18, r20
    5d6c:	35 0b       	sbc	r19, r21
    5d6e:	e0 91 5d 1b 	lds	r30, 0x1B5D	; 0x801b5d <__brkval>
    5d72:	f0 91 5e 1b 	lds	r31, 0x1B5E	; 0x801b5e <__brkval+0x1>
    5d76:	e2 17       	cp	r30, r18
    5d78:	f3 07       	cpc	r31, r19
    5d7a:	a0 f4       	brcc	.+40     	; 0x5da4 <malloc+0x120>
    5d7c:	2e 1b       	sub	r18, r30
    5d7e:	3f 0b       	sbc	r19, r31
    5d80:	28 17       	cp	r18, r24
    5d82:	39 07       	cpc	r19, r25
    5d84:	78 f0       	brcs	.+30     	; 0x5da4 <malloc+0x120>
    5d86:	ac 01       	movw	r20, r24
    5d88:	4e 5f       	subi	r20, 0xFE	; 254
    5d8a:	5f 4f       	sbci	r21, 0xFF	; 255
    5d8c:	24 17       	cp	r18, r20
    5d8e:	35 07       	cpc	r19, r21
    5d90:	48 f0       	brcs	.+18     	; 0x5da4 <malloc+0x120>
    5d92:	4e 0f       	add	r20, r30
    5d94:	5f 1f       	adc	r21, r31
    5d96:	50 93 5e 1b 	sts	0x1B5E, r21	; 0x801b5e <__brkval+0x1>
    5d9a:	40 93 5d 1b 	sts	0x1B5D, r20	; 0x801b5d <__brkval>
    5d9e:	81 93       	st	Z+, r24
    5da0:	91 93       	st	Z+, r25
    5da2:	02 c0       	rjmp	.+4      	; 0x5da8 <malloc+0x124>
    5da4:	e0 e0       	ldi	r30, 0x00	; 0
    5da6:	f0 e0       	ldi	r31, 0x00	; 0
    5da8:	cf 01       	movw	r24, r30
    5daa:	df 91       	pop	r29
    5dac:	cf 91       	pop	r28
    5dae:	1f 91       	pop	r17
    5db0:	0f 91       	pop	r16
    5db2:	08 95       	ret

00005db4 <free>:
    5db4:	cf 93       	push	r28
    5db6:	df 93       	push	r29
    5db8:	00 97       	sbiw	r24, 0x00	; 0
    5dba:	09 f4       	brne	.+2      	; 0x5dbe <free+0xa>
    5dbc:	81 c0       	rjmp	.+258    	; 0x5ec0 <free+0x10c>
    5dbe:	fc 01       	movw	r30, r24
    5dc0:	32 97       	sbiw	r30, 0x02	; 2
    5dc2:	13 82       	std	Z+3, r1	; 0x03
    5dc4:	12 82       	std	Z+2, r1	; 0x02
    5dc6:	a0 91 5f 1b 	lds	r26, 0x1B5F	; 0x801b5f <__flp>
    5dca:	b0 91 60 1b 	lds	r27, 0x1B60	; 0x801b60 <__flp+0x1>
    5dce:	10 97       	sbiw	r26, 0x00	; 0
    5dd0:	81 f4       	brne	.+32     	; 0x5df2 <free+0x3e>
    5dd2:	20 81       	ld	r18, Z
    5dd4:	31 81       	ldd	r19, Z+1	; 0x01
    5dd6:	82 0f       	add	r24, r18
    5dd8:	93 1f       	adc	r25, r19
    5dda:	20 91 5d 1b 	lds	r18, 0x1B5D	; 0x801b5d <__brkval>
    5dde:	30 91 5e 1b 	lds	r19, 0x1B5E	; 0x801b5e <__brkval+0x1>
    5de2:	28 17       	cp	r18, r24
    5de4:	39 07       	cpc	r19, r25
    5de6:	51 f5       	brne	.+84     	; 0x5e3c <free+0x88>
    5de8:	f0 93 5e 1b 	sts	0x1B5E, r31	; 0x801b5e <__brkval+0x1>
    5dec:	e0 93 5d 1b 	sts	0x1B5D, r30	; 0x801b5d <__brkval>
    5df0:	67 c0       	rjmp	.+206    	; 0x5ec0 <free+0x10c>
    5df2:	ed 01       	movw	r28, r26
    5df4:	20 e0       	ldi	r18, 0x00	; 0
    5df6:	30 e0       	ldi	r19, 0x00	; 0
    5df8:	ce 17       	cp	r28, r30
    5dfa:	df 07       	cpc	r29, r31
    5dfc:	40 f4       	brcc	.+16     	; 0x5e0e <free+0x5a>
    5dfe:	4a 81       	ldd	r20, Y+2	; 0x02
    5e00:	5b 81       	ldd	r21, Y+3	; 0x03
    5e02:	9e 01       	movw	r18, r28
    5e04:	41 15       	cp	r20, r1
    5e06:	51 05       	cpc	r21, r1
    5e08:	f1 f0       	breq	.+60     	; 0x5e46 <free+0x92>
    5e0a:	ea 01       	movw	r28, r20
    5e0c:	f5 cf       	rjmp	.-22     	; 0x5df8 <free+0x44>
    5e0e:	d3 83       	std	Z+3, r29	; 0x03
    5e10:	c2 83       	std	Z+2, r28	; 0x02
    5e12:	40 81       	ld	r20, Z
    5e14:	51 81       	ldd	r21, Z+1	; 0x01
    5e16:	84 0f       	add	r24, r20
    5e18:	95 1f       	adc	r25, r21
    5e1a:	c8 17       	cp	r28, r24
    5e1c:	d9 07       	cpc	r29, r25
    5e1e:	59 f4       	brne	.+22     	; 0x5e36 <free+0x82>
    5e20:	88 81       	ld	r24, Y
    5e22:	99 81       	ldd	r25, Y+1	; 0x01
    5e24:	84 0f       	add	r24, r20
    5e26:	95 1f       	adc	r25, r21
    5e28:	02 96       	adiw	r24, 0x02	; 2
    5e2a:	91 83       	std	Z+1, r25	; 0x01
    5e2c:	80 83       	st	Z, r24
    5e2e:	8a 81       	ldd	r24, Y+2	; 0x02
    5e30:	9b 81       	ldd	r25, Y+3	; 0x03
    5e32:	93 83       	std	Z+3, r25	; 0x03
    5e34:	82 83       	std	Z+2, r24	; 0x02
    5e36:	21 15       	cp	r18, r1
    5e38:	31 05       	cpc	r19, r1
    5e3a:	29 f4       	brne	.+10     	; 0x5e46 <free+0x92>
    5e3c:	f0 93 60 1b 	sts	0x1B60, r31	; 0x801b60 <__flp+0x1>
    5e40:	e0 93 5f 1b 	sts	0x1B5F, r30	; 0x801b5f <__flp>
    5e44:	3d c0       	rjmp	.+122    	; 0x5ec0 <free+0x10c>
    5e46:	e9 01       	movw	r28, r18
    5e48:	fb 83       	std	Y+3, r31	; 0x03
    5e4a:	ea 83       	std	Y+2, r30	; 0x02
    5e4c:	49 91       	ld	r20, Y+
    5e4e:	59 91       	ld	r21, Y+
    5e50:	c4 0f       	add	r28, r20
    5e52:	d5 1f       	adc	r29, r21
    5e54:	ec 17       	cp	r30, r28
    5e56:	fd 07       	cpc	r31, r29
    5e58:	61 f4       	brne	.+24     	; 0x5e72 <free+0xbe>
    5e5a:	80 81       	ld	r24, Z
    5e5c:	91 81       	ldd	r25, Z+1	; 0x01
    5e5e:	84 0f       	add	r24, r20
    5e60:	95 1f       	adc	r25, r21
    5e62:	02 96       	adiw	r24, 0x02	; 2
    5e64:	e9 01       	movw	r28, r18
    5e66:	99 83       	std	Y+1, r25	; 0x01
    5e68:	88 83       	st	Y, r24
    5e6a:	82 81       	ldd	r24, Z+2	; 0x02
    5e6c:	93 81       	ldd	r25, Z+3	; 0x03
    5e6e:	9b 83       	std	Y+3, r25	; 0x03
    5e70:	8a 83       	std	Y+2, r24	; 0x02
    5e72:	e0 e0       	ldi	r30, 0x00	; 0
    5e74:	f0 e0       	ldi	r31, 0x00	; 0
    5e76:	12 96       	adiw	r26, 0x02	; 2
    5e78:	8d 91       	ld	r24, X+
    5e7a:	9c 91       	ld	r25, X
    5e7c:	13 97       	sbiw	r26, 0x03	; 3
    5e7e:	00 97       	sbiw	r24, 0x00	; 0
    5e80:	19 f0       	breq	.+6      	; 0x5e88 <free+0xd4>
    5e82:	fd 01       	movw	r30, r26
    5e84:	dc 01       	movw	r26, r24
    5e86:	f7 cf       	rjmp	.-18     	; 0x5e76 <free+0xc2>
    5e88:	8d 91       	ld	r24, X+
    5e8a:	9c 91       	ld	r25, X
    5e8c:	11 97       	sbiw	r26, 0x01	; 1
    5e8e:	9d 01       	movw	r18, r26
    5e90:	2e 5f       	subi	r18, 0xFE	; 254
    5e92:	3f 4f       	sbci	r19, 0xFF	; 255
    5e94:	82 0f       	add	r24, r18
    5e96:	93 1f       	adc	r25, r19
    5e98:	20 91 5d 1b 	lds	r18, 0x1B5D	; 0x801b5d <__brkval>
    5e9c:	30 91 5e 1b 	lds	r19, 0x1B5E	; 0x801b5e <__brkval+0x1>
    5ea0:	28 17       	cp	r18, r24
    5ea2:	39 07       	cpc	r19, r25
    5ea4:	69 f4       	brne	.+26     	; 0x5ec0 <free+0x10c>
    5ea6:	30 97       	sbiw	r30, 0x00	; 0
    5ea8:	29 f4       	brne	.+10     	; 0x5eb4 <free+0x100>
    5eaa:	10 92 60 1b 	sts	0x1B60, r1	; 0x801b60 <__flp+0x1>
    5eae:	10 92 5f 1b 	sts	0x1B5F, r1	; 0x801b5f <__flp>
    5eb2:	02 c0       	rjmp	.+4      	; 0x5eb8 <free+0x104>
    5eb4:	13 82       	std	Z+3, r1	; 0x03
    5eb6:	12 82       	std	Z+2, r1	; 0x02
    5eb8:	b0 93 5e 1b 	sts	0x1B5E, r27	; 0x801b5e <__brkval+0x1>
    5ebc:	a0 93 5d 1b 	sts	0x1B5D, r26	; 0x801b5d <__brkval>
    5ec0:	df 91       	pop	r29
    5ec2:	cf 91       	pop	r28
    5ec4:	08 95       	ret

00005ec6 <abort>:
    5ec6:	81 e0       	ldi	r24, 0x01	; 1
    5ec8:	90 e0       	ldi	r25, 0x00	; 0
    5eca:	f8 94       	cli
    5ecc:	7d c3       	rjmp	.+1786   	; 0x65c8 <_exit>

00005ece <memcpy>:
    5ece:	fb 01       	movw	r30, r22
    5ed0:	dc 01       	movw	r26, r24
    5ed2:	02 c0       	rjmp	.+4      	; 0x5ed8 <memcpy+0xa>
    5ed4:	01 90       	ld	r0, Z+
    5ed6:	0d 92       	st	X+, r0
    5ed8:	41 50       	subi	r20, 0x01	; 1
    5eda:	50 40       	sbci	r21, 0x00	; 0
    5edc:	d8 f7       	brcc	.-10     	; 0x5ed4 <memcpy+0x6>
    5ede:	08 95       	ret

00005ee0 <memset>:
    5ee0:	dc 01       	movw	r26, r24
    5ee2:	01 c0       	rjmp	.+2      	; 0x5ee6 <memset+0x6>
    5ee4:	6d 93       	st	X+, r22
    5ee6:	41 50       	subi	r20, 0x01	; 1
    5ee8:	50 40       	sbci	r21, 0x00	; 0
    5eea:	e0 f7       	brcc	.-8      	; 0x5ee4 <memset+0x4>
    5eec:	08 95       	ret

00005eee <strcasestr>:
    5eee:	fb 01       	movw	r30, r22
    5ef0:	51 91       	ld	r21, Z+
    5ef2:	55 23       	and	r21, r21
    5ef4:	b1 f0       	breq	.+44     	; 0x5f22 <strcasestr+0x34>
    5ef6:	bf 01       	movw	r22, r30
    5ef8:	dc 01       	movw	r26, r24
    5efa:	05 2e       	mov	r0, r21
    5efc:	4d 91       	ld	r20, X+
    5efe:	44 23       	and	r20, r20
    5f00:	69 f0       	breq	.+26     	; 0x5f1c <strcasestr+0x2e>
    5f02:	10 d0       	rcall	.+32     	; 0x5f24 <strcasestr+0x36>
    5f04:	d9 f7       	brne	.-10     	; 0x5efc <strcasestr+0xe>
    5f06:	cd 01       	movw	r24, r26
    5f08:	01 90       	ld	r0, Z+
    5f0a:	00 20       	and	r0, r0
    5f0c:	49 f0       	breq	.+18     	; 0x5f20 <strcasestr+0x32>
    5f0e:	4d 91       	ld	r20, X+
    5f10:	41 11       	cpse	r20, r1
    5f12:	08 d0       	rcall	.+16     	; 0x5f24 <strcasestr+0x36>
    5f14:	c9 f3       	breq	.-14     	; 0x5f08 <strcasestr+0x1a>
    5f16:	fb 01       	movw	r30, r22
    5f18:	41 11       	cpse	r20, r1
    5f1a:	ee cf       	rjmp	.-36     	; 0x5ef8 <strcasestr+0xa>
    5f1c:	81 e0       	ldi	r24, 0x01	; 1
    5f1e:	90 e0       	ldi	r25, 0x00	; 0
    5f20:	01 97       	sbiw	r24, 0x01	; 1
    5f22:	08 95       	ret
    5f24:	40 25       	eor	r20, r0
    5f26:	39 f0       	breq	.+14     	; 0x5f36 <strcasestr+0x48>
    5f28:	40 32       	cpi	r20, 0x20	; 32
    5f2a:	29 f4       	brne	.+10     	; 0x5f36 <strcasestr+0x48>
    5f2c:	40 29       	or	r20, r0
    5f2e:	4b 57       	subi	r20, 0x7B	; 123
    5f30:	46 5e       	subi	r20, 0xE6	; 230
    5f32:	08 f0       	brcs	.+2      	; 0x5f36 <strcasestr+0x48>
    5f34:	18 94       	sez
    5f36:	08 95       	ret

00005f38 <strcat>:
    5f38:	fb 01       	movw	r30, r22
    5f3a:	dc 01       	movw	r26, r24
    5f3c:	0d 90       	ld	r0, X+
    5f3e:	00 20       	and	r0, r0
    5f40:	e9 f7       	brne	.-6      	; 0x5f3c <strcat+0x4>
    5f42:	11 97       	sbiw	r26, 0x01	; 1
    5f44:	01 90       	ld	r0, Z+
    5f46:	0d 92       	st	X+, r0
    5f48:	00 20       	and	r0, r0
    5f4a:	e1 f7       	brne	.-8      	; 0x5f44 <strcat+0xc>
    5f4c:	08 95       	ret

00005f4e <strcpy>:
    5f4e:	fb 01       	movw	r30, r22
    5f50:	dc 01       	movw	r26, r24
    5f52:	01 90       	ld	r0, Z+
    5f54:	0d 92       	st	X+, r0
    5f56:	00 20       	and	r0, r0
    5f58:	e1 f7       	brne	.-8      	; 0x5f52 <strcpy+0x4>
    5f5a:	08 95       	ret

00005f5c <strncasecmp>:
    5f5c:	fb 01       	movw	r30, r22
    5f5e:	dc 01       	movw	r26, r24
    5f60:	41 50       	subi	r20, 0x01	; 1
    5f62:	50 40       	sbci	r21, 0x00	; 0
    5f64:	88 f0       	brcs	.+34     	; 0x5f88 <strncasecmp+0x2c>
    5f66:	8d 91       	ld	r24, X+
    5f68:	81 34       	cpi	r24, 0x41	; 65
    5f6a:	1c f0       	brlt	.+6      	; 0x5f72 <strncasecmp+0x16>
    5f6c:	8b 35       	cpi	r24, 0x5B	; 91
    5f6e:	0c f4       	brge	.+2      	; 0x5f72 <strncasecmp+0x16>
    5f70:	80 5e       	subi	r24, 0xE0	; 224
    5f72:	61 91       	ld	r22, Z+
    5f74:	61 34       	cpi	r22, 0x41	; 65
    5f76:	1c f0       	brlt	.+6      	; 0x5f7e <strncasecmp+0x22>
    5f78:	6b 35       	cpi	r22, 0x5B	; 91
    5f7a:	0c f4       	brge	.+2      	; 0x5f7e <strncasecmp+0x22>
    5f7c:	60 5e       	subi	r22, 0xE0	; 224
    5f7e:	86 1b       	sub	r24, r22
    5f80:	61 11       	cpse	r22, r1
    5f82:	71 f3       	breq	.-36     	; 0x5f60 <strncasecmp+0x4>
    5f84:	99 0b       	sbc	r25, r25
    5f86:	08 95       	ret
    5f88:	88 1b       	sub	r24, r24
    5f8a:	fc cf       	rjmp	.-8      	; 0x5f84 <strncasecmp+0x28>

00005f8c <printf>:
    5f8c:	cf 93       	push	r28
    5f8e:	df 93       	push	r29
    5f90:	cd b7       	in	r28, 0x3d	; 61
    5f92:	de b7       	in	r29, 0x3e	; 62
    5f94:	ae 01       	movw	r20, r28
    5f96:	4a 5f       	subi	r20, 0xFA	; 250
    5f98:	5f 4f       	sbci	r21, 0xFF	; 255
    5f9a:	fa 01       	movw	r30, r20
    5f9c:	61 91       	ld	r22, Z+
    5f9e:	71 91       	ld	r23, Z+
    5fa0:	af 01       	movw	r20, r30
    5fa2:	80 91 63 1b 	lds	r24, 0x1B63	; 0x801b63 <__iob+0x2>
    5fa6:	90 91 64 1b 	lds	r25, 0x1B64	; 0x801b64 <__iob+0x3>
    5faa:	61 d0       	rcall	.+194    	; 0x606e <vfprintf>
    5fac:	df 91       	pop	r29
    5fae:	cf 91       	pop	r28
    5fb0:	08 95       	ret

00005fb2 <puts>:
    5fb2:	0f 93       	push	r16
    5fb4:	1f 93       	push	r17
    5fb6:	cf 93       	push	r28
    5fb8:	df 93       	push	r29
    5fba:	e0 91 63 1b 	lds	r30, 0x1B63	; 0x801b63 <__iob+0x2>
    5fbe:	f0 91 64 1b 	lds	r31, 0x1B64	; 0x801b64 <__iob+0x3>
    5fc2:	23 81       	ldd	r18, Z+3	; 0x03
    5fc4:	21 ff       	sbrs	r18, 1
    5fc6:	1b c0       	rjmp	.+54     	; 0x5ffe <puts+0x4c>
    5fc8:	8c 01       	movw	r16, r24
    5fca:	d0 e0       	ldi	r29, 0x00	; 0
    5fcc:	c0 e0       	ldi	r28, 0x00	; 0
    5fce:	f8 01       	movw	r30, r16
    5fd0:	81 91       	ld	r24, Z+
    5fd2:	8f 01       	movw	r16, r30
    5fd4:	60 91 63 1b 	lds	r22, 0x1B63	; 0x801b63 <__iob+0x2>
    5fd8:	70 91 64 1b 	lds	r23, 0x1B64	; 0x801b64 <__iob+0x3>
    5fdc:	db 01       	movw	r26, r22
    5fde:	18 96       	adiw	r26, 0x08	; 8
    5fe0:	ed 91       	ld	r30, X+
    5fe2:	fc 91       	ld	r31, X
    5fe4:	19 97       	sbiw	r26, 0x09	; 9
    5fe6:	88 23       	and	r24, r24
    5fe8:	31 f0       	breq	.+12     	; 0x5ff6 <puts+0x44>
    5fea:	19 95       	eicall
    5fec:	89 2b       	or	r24, r25
    5fee:	79 f3       	breq	.-34     	; 0x5fce <puts+0x1c>
    5ff0:	df ef       	ldi	r29, 0xFF	; 255
    5ff2:	cf ef       	ldi	r28, 0xFF	; 255
    5ff4:	ec cf       	rjmp	.-40     	; 0x5fce <puts+0x1c>
    5ff6:	8a e0       	ldi	r24, 0x0A	; 10
    5ff8:	19 95       	eicall
    5ffa:	89 2b       	or	r24, r25
    5ffc:	19 f0       	breq	.+6      	; 0x6004 <puts+0x52>
    5ffe:	8f ef       	ldi	r24, 0xFF	; 255
    6000:	9f ef       	ldi	r25, 0xFF	; 255
    6002:	02 c0       	rjmp	.+4      	; 0x6008 <puts+0x56>
    6004:	8d 2f       	mov	r24, r29
    6006:	9c 2f       	mov	r25, r28
    6008:	df 91       	pop	r29
    600a:	cf 91       	pop	r28
    600c:	1f 91       	pop	r17
    600e:	0f 91       	pop	r16
    6010:	08 95       	ret

00006012 <sprintf>:
    6012:	0f 93       	push	r16
    6014:	1f 93       	push	r17
    6016:	cf 93       	push	r28
    6018:	df 93       	push	r29
    601a:	cd b7       	in	r28, 0x3d	; 61
    601c:	de b7       	in	r29, 0x3e	; 62
    601e:	2e 97       	sbiw	r28, 0x0e	; 14
    6020:	0f b6       	in	r0, 0x3f	; 63
    6022:	f8 94       	cli
    6024:	de bf       	out	0x3e, r29	; 62
    6026:	0f be       	out	0x3f, r0	; 63
    6028:	cd bf       	out	0x3d, r28	; 61
    602a:	0e 89       	ldd	r16, Y+22	; 0x16
    602c:	1f 89       	ldd	r17, Y+23	; 0x17
    602e:	86 e0       	ldi	r24, 0x06	; 6
    6030:	8c 83       	std	Y+4, r24	; 0x04
    6032:	1a 83       	std	Y+2, r17	; 0x02
    6034:	09 83       	std	Y+1, r16	; 0x01
    6036:	8f ef       	ldi	r24, 0xFF	; 255
    6038:	9f e7       	ldi	r25, 0x7F	; 127
    603a:	9e 83       	std	Y+6, r25	; 0x06
    603c:	8d 83       	std	Y+5, r24	; 0x05
    603e:	ae 01       	movw	r20, r28
    6040:	46 5e       	subi	r20, 0xE6	; 230
    6042:	5f 4f       	sbci	r21, 0xFF	; 255
    6044:	68 8d       	ldd	r22, Y+24	; 0x18
    6046:	79 8d       	ldd	r23, Y+25	; 0x19
    6048:	ce 01       	movw	r24, r28
    604a:	01 96       	adiw	r24, 0x01	; 1
    604c:	10 d0       	rcall	.+32     	; 0x606e <vfprintf>
    604e:	ef 81       	ldd	r30, Y+7	; 0x07
    6050:	f8 85       	ldd	r31, Y+8	; 0x08
    6052:	e0 0f       	add	r30, r16
    6054:	f1 1f       	adc	r31, r17
    6056:	10 82       	st	Z, r1
    6058:	2e 96       	adiw	r28, 0x0e	; 14
    605a:	0f b6       	in	r0, 0x3f	; 63
    605c:	f8 94       	cli
    605e:	de bf       	out	0x3e, r29	; 62
    6060:	0f be       	out	0x3f, r0	; 63
    6062:	cd bf       	out	0x3d, r28	; 61
    6064:	df 91       	pop	r29
    6066:	cf 91       	pop	r28
    6068:	1f 91       	pop	r17
    606a:	0f 91       	pop	r16
    606c:	08 95       	ret

0000606e <vfprintf>:
    606e:	2f 92       	push	r2
    6070:	3f 92       	push	r3
    6072:	4f 92       	push	r4
    6074:	5f 92       	push	r5
    6076:	6f 92       	push	r6
    6078:	7f 92       	push	r7
    607a:	8f 92       	push	r8
    607c:	9f 92       	push	r9
    607e:	af 92       	push	r10
    6080:	bf 92       	push	r11
    6082:	cf 92       	push	r12
    6084:	df 92       	push	r13
    6086:	ef 92       	push	r14
    6088:	ff 92       	push	r15
    608a:	0f 93       	push	r16
    608c:	1f 93       	push	r17
    608e:	cf 93       	push	r28
    6090:	df 93       	push	r29
    6092:	cd b7       	in	r28, 0x3d	; 61
    6094:	de b7       	in	r29, 0x3e	; 62
    6096:	2b 97       	sbiw	r28, 0x0b	; 11
    6098:	0f b6       	in	r0, 0x3f	; 63
    609a:	f8 94       	cli
    609c:	de bf       	out	0x3e, r29	; 62
    609e:	0f be       	out	0x3f, r0	; 63
    60a0:	cd bf       	out	0x3d, r28	; 61
    60a2:	6c 01       	movw	r12, r24
    60a4:	7b 01       	movw	r14, r22
    60a6:	8a 01       	movw	r16, r20
    60a8:	fc 01       	movw	r30, r24
    60aa:	17 82       	std	Z+7, r1	; 0x07
    60ac:	16 82       	std	Z+6, r1	; 0x06
    60ae:	83 81       	ldd	r24, Z+3	; 0x03
    60b0:	81 ff       	sbrs	r24, 1
    60b2:	bf c1       	rjmp	.+894    	; 0x6432 <vfprintf+0x3c4>
    60b4:	ce 01       	movw	r24, r28
    60b6:	01 96       	adiw	r24, 0x01	; 1
    60b8:	3c 01       	movw	r6, r24
    60ba:	f6 01       	movw	r30, r12
    60bc:	93 81       	ldd	r25, Z+3	; 0x03
    60be:	f7 01       	movw	r30, r14
    60c0:	93 fd       	sbrc	r25, 3
    60c2:	85 91       	lpm	r24, Z+
    60c4:	93 ff       	sbrs	r25, 3
    60c6:	81 91       	ld	r24, Z+
    60c8:	7f 01       	movw	r14, r30
    60ca:	88 23       	and	r24, r24
    60cc:	09 f4       	brne	.+2      	; 0x60d0 <vfprintf+0x62>
    60ce:	ad c1       	rjmp	.+858    	; 0x642a <vfprintf+0x3bc>
    60d0:	85 32       	cpi	r24, 0x25	; 37
    60d2:	39 f4       	brne	.+14     	; 0x60e2 <vfprintf+0x74>
    60d4:	93 fd       	sbrc	r25, 3
    60d6:	85 91       	lpm	r24, Z+
    60d8:	93 ff       	sbrs	r25, 3
    60da:	81 91       	ld	r24, Z+
    60dc:	7f 01       	movw	r14, r30
    60de:	85 32       	cpi	r24, 0x25	; 37
    60e0:	21 f4       	brne	.+8      	; 0x60ea <vfprintf+0x7c>
    60e2:	b6 01       	movw	r22, r12
    60e4:	90 e0       	ldi	r25, 0x00	; 0
    60e6:	d6 d1       	rcall	.+940    	; 0x6494 <fputc>
    60e8:	e8 cf       	rjmp	.-48     	; 0x60ba <vfprintf+0x4c>
    60ea:	91 2c       	mov	r9, r1
    60ec:	21 2c       	mov	r2, r1
    60ee:	31 2c       	mov	r3, r1
    60f0:	ff e1       	ldi	r31, 0x1F	; 31
    60f2:	f3 15       	cp	r31, r3
    60f4:	d8 f0       	brcs	.+54     	; 0x612c <vfprintf+0xbe>
    60f6:	8b 32       	cpi	r24, 0x2B	; 43
    60f8:	79 f0       	breq	.+30     	; 0x6118 <vfprintf+0xaa>
    60fa:	38 f4       	brcc	.+14     	; 0x610a <vfprintf+0x9c>
    60fc:	80 32       	cpi	r24, 0x20	; 32
    60fe:	79 f0       	breq	.+30     	; 0x611e <vfprintf+0xb0>
    6100:	83 32       	cpi	r24, 0x23	; 35
    6102:	a1 f4       	brne	.+40     	; 0x612c <vfprintf+0xbe>
    6104:	23 2d       	mov	r18, r3
    6106:	20 61       	ori	r18, 0x10	; 16
    6108:	1d c0       	rjmp	.+58     	; 0x6144 <vfprintf+0xd6>
    610a:	8d 32       	cpi	r24, 0x2D	; 45
    610c:	61 f0       	breq	.+24     	; 0x6126 <vfprintf+0xb8>
    610e:	80 33       	cpi	r24, 0x30	; 48
    6110:	69 f4       	brne	.+26     	; 0x612c <vfprintf+0xbe>
    6112:	23 2d       	mov	r18, r3
    6114:	21 60       	ori	r18, 0x01	; 1
    6116:	16 c0       	rjmp	.+44     	; 0x6144 <vfprintf+0xd6>
    6118:	83 2d       	mov	r24, r3
    611a:	82 60       	ori	r24, 0x02	; 2
    611c:	38 2e       	mov	r3, r24
    611e:	e3 2d       	mov	r30, r3
    6120:	e4 60       	ori	r30, 0x04	; 4
    6122:	3e 2e       	mov	r3, r30
    6124:	2a c0       	rjmp	.+84     	; 0x617a <vfprintf+0x10c>
    6126:	f3 2d       	mov	r31, r3
    6128:	f8 60       	ori	r31, 0x08	; 8
    612a:	1d c0       	rjmp	.+58     	; 0x6166 <vfprintf+0xf8>
    612c:	37 fc       	sbrc	r3, 7
    612e:	2d c0       	rjmp	.+90     	; 0x618a <vfprintf+0x11c>
    6130:	20 ed       	ldi	r18, 0xD0	; 208
    6132:	28 0f       	add	r18, r24
    6134:	2a 30       	cpi	r18, 0x0A	; 10
    6136:	40 f0       	brcs	.+16     	; 0x6148 <vfprintf+0xda>
    6138:	8e 32       	cpi	r24, 0x2E	; 46
    613a:	b9 f4       	brne	.+46     	; 0x616a <vfprintf+0xfc>
    613c:	36 fc       	sbrc	r3, 6
    613e:	75 c1       	rjmp	.+746    	; 0x642a <vfprintf+0x3bc>
    6140:	23 2d       	mov	r18, r3
    6142:	20 64       	ori	r18, 0x40	; 64
    6144:	32 2e       	mov	r3, r18
    6146:	19 c0       	rjmp	.+50     	; 0x617a <vfprintf+0x10c>
    6148:	36 fe       	sbrs	r3, 6
    614a:	06 c0       	rjmp	.+12     	; 0x6158 <vfprintf+0xea>
    614c:	8a e0       	ldi	r24, 0x0A	; 10
    614e:	98 9e       	mul	r9, r24
    6150:	20 0d       	add	r18, r0
    6152:	11 24       	eor	r1, r1
    6154:	92 2e       	mov	r9, r18
    6156:	11 c0       	rjmp	.+34     	; 0x617a <vfprintf+0x10c>
    6158:	ea e0       	ldi	r30, 0x0A	; 10
    615a:	2e 9e       	mul	r2, r30
    615c:	20 0d       	add	r18, r0
    615e:	11 24       	eor	r1, r1
    6160:	22 2e       	mov	r2, r18
    6162:	f3 2d       	mov	r31, r3
    6164:	f0 62       	ori	r31, 0x20	; 32
    6166:	3f 2e       	mov	r3, r31
    6168:	08 c0       	rjmp	.+16     	; 0x617a <vfprintf+0x10c>
    616a:	8c 36       	cpi	r24, 0x6C	; 108
    616c:	21 f4       	brne	.+8      	; 0x6176 <vfprintf+0x108>
    616e:	83 2d       	mov	r24, r3
    6170:	80 68       	ori	r24, 0x80	; 128
    6172:	38 2e       	mov	r3, r24
    6174:	02 c0       	rjmp	.+4      	; 0x617a <vfprintf+0x10c>
    6176:	88 36       	cpi	r24, 0x68	; 104
    6178:	41 f4       	brne	.+16     	; 0x618a <vfprintf+0x11c>
    617a:	f7 01       	movw	r30, r14
    617c:	93 fd       	sbrc	r25, 3
    617e:	85 91       	lpm	r24, Z+
    6180:	93 ff       	sbrs	r25, 3
    6182:	81 91       	ld	r24, Z+
    6184:	7f 01       	movw	r14, r30
    6186:	81 11       	cpse	r24, r1
    6188:	b3 cf       	rjmp	.-154    	; 0x60f0 <vfprintf+0x82>
    618a:	98 2f       	mov	r25, r24
    618c:	9f 7d       	andi	r25, 0xDF	; 223
    618e:	95 54       	subi	r25, 0x45	; 69
    6190:	93 30       	cpi	r25, 0x03	; 3
    6192:	28 f4       	brcc	.+10     	; 0x619e <vfprintf+0x130>
    6194:	0c 5f       	subi	r16, 0xFC	; 252
    6196:	1f 4f       	sbci	r17, 0xFF	; 255
    6198:	9f e3       	ldi	r25, 0x3F	; 63
    619a:	99 83       	std	Y+1, r25	; 0x01
    619c:	0d c0       	rjmp	.+26     	; 0x61b8 <vfprintf+0x14a>
    619e:	83 36       	cpi	r24, 0x63	; 99
    61a0:	31 f0       	breq	.+12     	; 0x61ae <vfprintf+0x140>
    61a2:	83 37       	cpi	r24, 0x73	; 115
    61a4:	71 f0       	breq	.+28     	; 0x61c2 <vfprintf+0x154>
    61a6:	83 35       	cpi	r24, 0x53	; 83
    61a8:	09 f0       	breq	.+2      	; 0x61ac <vfprintf+0x13e>
    61aa:	55 c0       	rjmp	.+170    	; 0x6256 <vfprintf+0x1e8>
    61ac:	20 c0       	rjmp	.+64     	; 0x61ee <vfprintf+0x180>
    61ae:	f8 01       	movw	r30, r16
    61b0:	80 81       	ld	r24, Z
    61b2:	89 83       	std	Y+1, r24	; 0x01
    61b4:	0e 5f       	subi	r16, 0xFE	; 254
    61b6:	1f 4f       	sbci	r17, 0xFF	; 255
    61b8:	88 24       	eor	r8, r8
    61ba:	83 94       	inc	r8
    61bc:	91 2c       	mov	r9, r1
    61be:	53 01       	movw	r10, r6
    61c0:	12 c0       	rjmp	.+36     	; 0x61e6 <vfprintf+0x178>
    61c2:	28 01       	movw	r4, r16
    61c4:	f2 e0       	ldi	r31, 0x02	; 2
    61c6:	4f 0e       	add	r4, r31
    61c8:	51 1c       	adc	r5, r1
    61ca:	f8 01       	movw	r30, r16
    61cc:	a0 80       	ld	r10, Z
    61ce:	b1 80       	ldd	r11, Z+1	; 0x01
    61d0:	36 fe       	sbrs	r3, 6
    61d2:	03 c0       	rjmp	.+6      	; 0x61da <vfprintf+0x16c>
    61d4:	69 2d       	mov	r22, r9
    61d6:	70 e0       	ldi	r23, 0x00	; 0
    61d8:	02 c0       	rjmp	.+4      	; 0x61de <vfprintf+0x170>
    61da:	6f ef       	ldi	r22, 0xFF	; 255
    61dc:	7f ef       	ldi	r23, 0xFF	; 255
    61de:	c5 01       	movw	r24, r10
    61e0:	4e d1       	rcall	.+668    	; 0x647e <strnlen>
    61e2:	4c 01       	movw	r8, r24
    61e4:	82 01       	movw	r16, r4
    61e6:	f3 2d       	mov	r31, r3
    61e8:	ff 77       	andi	r31, 0x7F	; 127
    61ea:	3f 2e       	mov	r3, r31
    61ec:	15 c0       	rjmp	.+42     	; 0x6218 <vfprintf+0x1aa>
    61ee:	28 01       	movw	r4, r16
    61f0:	22 e0       	ldi	r18, 0x02	; 2
    61f2:	42 0e       	add	r4, r18
    61f4:	51 1c       	adc	r5, r1
    61f6:	f8 01       	movw	r30, r16
    61f8:	a0 80       	ld	r10, Z
    61fa:	b1 80       	ldd	r11, Z+1	; 0x01
    61fc:	36 fe       	sbrs	r3, 6
    61fe:	03 c0       	rjmp	.+6      	; 0x6206 <vfprintf+0x198>
    6200:	69 2d       	mov	r22, r9
    6202:	70 e0       	ldi	r23, 0x00	; 0
    6204:	02 c0       	rjmp	.+4      	; 0x620a <vfprintf+0x19c>
    6206:	6f ef       	ldi	r22, 0xFF	; 255
    6208:	7f ef       	ldi	r23, 0xFF	; 255
    620a:	c5 01       	movw	r24, r10
    620c:	2d d1       	rcall	.+602    	; 0x6468 <strnlen_P>
    620e:	4c 01       	movw	r8, r24
    6210:	f3 2d       	mov	r31, r3
    6212:	f0 68       	ori	r31, 0x80	; 128
    6214:	3f 2e       	mov	r3, r31
    6216:	82 01       	movw	r16, r4
    6218:	33 fc       	sbrc	r3, 3
    621a:	19 c0       	rjmp	.+50     	; 0x624e <vfprintf+0x1e0>
    621c:	82 2d       	mov	r24, r2
    621e:	90 e0       	ldi	r25, 0x00	; 0
    6220:	88 16       	cp	r8, r24
    6222:	99 06       	cpc	r9, r25
    6224:	a0 f4       	brcc	.+40     	; 0x624e <vfprintf+0x1e0>
    6226:	b6 01       	movw	r22, r12
    6228:	80 e2       	ldi	r24, 0x20	; 32
    622a:	90 e0       	ldi	r25, 0x00	; 0
    622c:	33 d1       	rcall	.+614    	; 0x6494 <fputc>
    622e:	2a 94       	dec	r2
    6230:	f5 cf       	rjmp	.-22     	; 0x621c <vfprintf+0x1ae>
    6232:	f5 01       	movw	r30, r10
    6234:	37 fc       	sbrc	r3, 7
    6236:	85 91       	lpm	r24, Z+
    6238:	37 fe       	sbrs	r3, 7
    623a:	81 91       	ld	r24, Z+
    623c:	5f 01       	movw	r10, r30
    623e:	b6 01       	movw	r22, r12
    6240:	90 e0       	ldi	r25, 0x00	; 0
    6242:	28 d1       	rcall	.+592    	; 0x6494 <fputc>
    6244:	21 10       	cpse	r2, r1
    6246:	2a 94       	dec	r2
    6248:	21 e0       	ldi	r18, 0x01	; 1
    624a:	82 1a       	sub	r8, r18
    624c:	91 08       	sbc	r9, r1
    624e:	81 14       	cp	r8, r1
    6250:	91 04       	cpc	r9, r1
    6252:	79 f7       	brne	.-34     	; 0x6232 <vfprintf+0x1c4>
    6254:	e1 c0       	rjmp	.+450    	; 0x6418 <vfprintf+0x3aa>
    6256:	84 36       	cpi	r24, 0x64	; 100
    6258:	11 f0       	breq	.+4      	; 0x625e <vfprintf+0x1f0>
    625a:	89 36       	cpi	r24, 0x69	; 105
    625c:	39 f5       	brne	.+78     	; 0x62ac <vfprintf+0x23e>
    625e:	f8 01       	movw	r30, r16
    6260:	37 fe       	sbrs	r3, 7
    6262:	07 c0       	rjmp	.+14     	; 0x6272 <vfprintf+0x204>
    6264:	60 81       	ld	r22, Z
    6266:	71 81       	ldd	r23, Z+1	; 0x01
    6268:	82 81       	ldd	r24, Z+2	; 0x02
    626a:	93 81       	ldd	r25, Z+3	; 0x03
    626c:	0c 5f       	subi	r16, 0xFC	; 252
    626e:	1f 4f       	sbci	r17, 0xFF	; 255
    6270:	08 c0       	rjmp	.+16     	; 0x6282 <vfprintf+0x214>
    6272:	60 81       	ld	r22, Z
    6274:	71 81       	ldd	r23, Z+1	; 0x01
    6276:	07 2e       	mov	r0, r23
    6278:	00 0c       	add	r0, r0
    627a:	88 0b       	sbc	r24, r24
    627c:	99 0b       	sbc	r25, r25
    627e:	0e 5f       	subi	r16, 0xFE	; 254
    6280:	1f 4f       	sbci	r17, 0xFF	; 255
    6282:	f3 2d       	mov	r31, r3
    6284:	ff 76       	andi	r31, 0x6F	; 111
    6286:	3f 2e       	mov	r3, r31
    6288:	97 ff       	sbrs	r25, 7
    628a:	09 c0       	rjmp	.+18     	; 0x629e <vfprintf+0x230>
    628c:	90 95       	com	r25
    628e:	80 95       	com	r24
    6290:	70 95       	com	r23
    6292:	61 95       	neg	r22
    6294:	7f 4f       	sbci	r23, 0xFF	; 255
    6296:	8f 4f       	sbci	r24, 0xFF	; 255
    6298:	9f 4f       	sbci	r25, 0xFF	; 255
    629a:	f0 68       	ori	r31, 0x80	; 128
    629c:	3f 2e       	mov	r3, r31
    629e:	2a e0       	ldi	r18, 0x0A	; 10
    62a0:	30 e0       	ldi	r19, 0x00	; 0
    62a2:	a3 01       	movw	r20, r6
    62a4:	33 d1       	rcall	.+614    	; 0x650c <__ultoa_invert>
    62a6:	88 2e       	mov	r8, r24
    62a8:	86 18       	sub	r8, r6
    62aa:	44 c0       	rjmp	.+136    	; 0x6334 <vfprintf+0x2c6>
    62ac:	85 37       	cpi	r24, 0x75	; 117
    62ae:	31 f4       	brne	.+12     	; 0x62bc <vfprintf+0x24e>
    62b0:	23 2d       	mov	r18, r3
    62b2:	2f 7e       	andi	r18, 0xEF	; 239
    62b4:	b2 2e       	mov	r11, r18
    62b6:	2a e0       	ldi	r18, 0x0A	; 10
    62b8:	30 e0       	ldi	r19, 0x00	; 0
    62ba:	25 c0       	rjmp	.+74     	; 0x6306 <vfprintf+0x298>
    62bc:	93 2d       	mov	r25, r3
    62be:	99 7f       	andi	r25, 0xF9	; 249
    62c0:	b9 2e       	mov	r11, r25
    62c2:	8f 36       	cpi	r24, 0x6F	; 111
    62c4:	c1 f0       	breq	.+48     	; 0x62f6 <vfprintf+0x288>
    62c6:	18 f4       	brcc	.+6      	; 0x62ce <vfprintf+0x260>
    62c8:	88 35       	cpi	r24, 0x58	; 88
    62ca:	79 f0       	breq	.+30     	; 0x62ea <vfprintf+0x27c>
    62cc:	ae c0       	rjmp	.+348    	; 0x642a <vfprintf+0x3bc>
    62ce:	80 37       	cpi	r24, 0x70	; 112
    62d0:	19 f0       	breq	.+6      	; 0x62d8 <vfprintf+0x26a>
    62d2:	88 37       	cpi	r24, 0x78	; 120
    62d4:	21 f0       	breq	.+8      	; 0x62de <vfprintf+0x270>
    62d6:	a9 c0       	rjmp	.+338    	; 0x642a <vfprintf+0x3bc>
    62d8:	e9 2f       	mov	r30, r25
    62da:	e0 61       	ori	r30, 0x10	; 16
    62dc:	be 2e       	mov	r11, r30
    62de:	b4 fe       	sbrs	r11, 4
    62e0:	0d c0       	rjmp	.+26     	; 0x62fc <vfprintf+0x28e>
    62e2:	fb 2d       	mov	r31, r11
    62e4:	f4 60       	ori	r31, 0x04	; 4
    62e6:	bf 2e       	mov	r11, r31
    62e8:	09 c0       	rjmp	.+18     	; 0x62fc <vfprintf+0x28e>
    62ea:	34 fe       	sbrs	r3, 4
    62ec:	0a c0       	rjmp	.+20     	; 0x6302 <vfprintf+0x294>
    62ee:	29 2f       	mov	r18, r25
    62f0:	26 60       	ori	r18, 0x06	; 6
    62f2:	b2 2e       	mov	r11, r18
    62f4:	06 c0       	rjmp	.+12     	; 0x6302 <vfprintf+0x294>
    62f6:	28 e0       	ldi	r18, 0x08	; 8
    62f8:	30 e0       	ldi	r19, 0x00	; 0
    62fa:	05 c0       	rjmp	.+10     	; 0x6306 <vfprintf+0x298>
    62fc:	20 e1       	ldi	r18, 0x10	; 16
    62fe:	30 e0       	ldi	r19, 0x00	; 0
    6300:	02 c0       	rjmp	.+4      	; 0x6306 <vfprintf+0x298>
    6302:	20 e1       	ldi	r18, 0x10	; 16
    6304:	32 e0       	ldi	r19, 0x02	; 2
    6306:	f8 01       	movw	r30, r16
    6308:	b7 fe       	sbrs	r11, 7
    630a:	07 c0       	rjmp	.+14     	; 0x631a <vfprintf+0x2ac>
    630c:	60 81       	ld	r22, Z
    630e:	71 81       	ldd	r23, Z+1	; 0x01
    6310:	82 81       	ldd	r24, Z+2	; 0x02
    6312:	93 81       	ldd	r25, Z+3	; 0x03
    6314:	0c 5f       	subi	r16, 0xFC	; 252
    6316:	1f 4f       	sbci	r17, 0xFF	; 255
    6318:	06 c0       	rjmp	.+12     	; 0x6326 <vfprintf+0x2b8>
    631a:	60 81       	ld	r22, Z
    631c:	71 81       	ldd	r23, Z+1	; 0x01
    631e:	80 e0       	ldi	r24, 0x00	; 0
    6320:	90 e0       	ldi	r25, 0x00	; 0
    6322:	0e 5f       	subi	r16, 0xFE	; 254
    6324:	1f 4f       	sbci	r17, 0xFF	; 255
    6326:	a3 01       	movw	r20, r6
    6328:	f1 d0       	rcall	.+482    	; 0x650c <__ultoa_invert>
    632a:	88 2e       	mov	r8, r24
    632c:	86 18       	sub	r8, r6
    632e:	fb 2d       	mov	r31, r11
    6330:	ff 77       	andi	r31, 0x7F	; 127
    6332:	3f 2e       	mov	r3, r31
    6334:	36 fe       	sbrs	r3, 6
    6336:	0d c0       	rjmp	.+26     	; 0x6352 <vfprintf+0x2e4>
    6338:	23 2d       	mov	r18, r3
    633a:	2e 7f       	andi	r18, 0xFE	; 254
    633c:	a2 2e       	mov	r10, r18
    633e:	89 14       	cp	r8, r9
    6340:	58 f4       	brcc	.+22     	; 0x6358 <vfprintf+0x2ea>
    6342:	34 fe       	sbrs	r3, 4
    6344:	0b c0       	rjmp	.+22     	; 0x635c <vfprintf+0x2ee>
    6346:	32 fc       	sbrc	r3, 2
    6348:	09 c0       	rjmp	.+18     	; 0x635c <vfprintf+0x2ee>
    634a:	83 2d       	mov	r24, r3
    634c:	8e 7e       	andi	r24, 0xEE	; 238
    634e:	a8 2e       	mov	r10, r24
    6350:	05 c0       	rjmp	.+10     	; 0x635c <vfprintf+0x2ee>
    6352:	b8 2c       	mov	r11, r8
    6354:	a3 2c       	mov	r10, r3
    6356:	03 c0       	rjmp	.+6      	; 0x635e <vfprintf+0x2f0>
    6358:	b8 2c       	mov	r11, r8
    635a:	01 c0       	rjmp	.+2      	; 0x635e <vfprintf+0x2f0>
    635c:	b9 2c       	mov	r11, r9
    635e:	a4 fe       	sbrs	r10, 4
    6360:	0f c0       	rjmp	.+30     	; 0x6380 <vfprintf+0x312>
    6362:	fe 01       	movw	r30, r28
    6364:	e8 0d       	add	r30, r8
    6366:	f1 1d       	adc	r31, r1
    6368:	80 81       	ld	r24, Z
    636a:	80 33       	cpi	r24, 0x30	; 48
    636c:	21 f4       	brne	.+8      	; 0x6376 <vfprintf+0x308>
    636e:	9a 2d       	mov	r25, r10
    6370:	99 7e       	andi	r25, 0xE9	; 233
    6372:	a9 2e       	mov	r10, r25
    6374:	09 c0       	rjmp	.+18     	; 0x6388 <vfprintf+0x31a>
    6376:	a2 fe       	sbrs	r10, 2
    6378:	06 c0       	rjmp	.+12     	; 0x6386 <vfprintf+0x318>
    637a:	b3 94       	inc	r11
    637c:	b3 94       	inc	r11
    637e:	04 c0       	rjmp	.+8      	; 0x6388 <vfprintf+0x31a>
    6380:	8a 2d       	mov	r24, r10
    6382:	86 78       	andi	r24, 0x86	; 134
    6384:	09 f0       	breq	.+2      	; 0x6388 <vfprintf+0x31a>
    6386:	b3 94       	inc	r11
    6388:	a3 fc       	sbrc	r10, 3
    638a:	10 c0       	rjmp	.+32     	; 0x63ac <vfprintf+0x33e>
    638c:	a0 fe       	sbrs	r10, 0
    638e:	06 c0       	rjmp	.+12     	; 0x639c <vfprintf+0x32e>
    6390:	b2 14       	cp	r11, r2
    6392:	80 f4       	brcc	.+32     	; 0x63b4 <vfprintf+0x346>
    6394:	28 0c       	add	r2, r8
    6396:	92 2c       	mov	r9, r2
    6398:	9b 18       	sub	r9, r11
    639a:	0d c0       	rjmp	.+26     	; 0x63b6 <vfprintf+0x348>
    639c:	b2 14       	cp	r11, r2
    639e:	58 f4       	brcc	.+22     	; 0x63b6 <vfprintf+0x348>
    63a0:	b6 01       	movw	r22, r12
    63a2:	80 e2       	ldi	r24, 0x20	; 32
    63a4:	90 e0       	ldi	r25, 0x00	; 0
    63a6:	76 d0       	rcall	.+236    	; 0x6494 <fputc>
    63a8:	b3 94       	inc	r11
    63aa:	f8 cf       	rjmp	.-16     	; 0x639c <vfprintf+0x32e>
    63ac:	b2 14       	cp	r11, r2
    63ae:	18 f4       	brcc	.+6      	; 0x63b6 <vfprintf+0x348>
    63b0:	2b 18       	sub	r2, r11
    63b2:	02 c0       	rjmp	.+4      	; 0x63b8 <vfprintf+0x34a>
    63b4:	98 2c       	mov	r9, r8
    63b6:	21 2c       	mov	r2, r1
    63b8:	a4 fe       	sbrs	r10, 4
    63ba:	0f c0       	rjmp	.+30     	; 0x63da <vfprintf+0x36c>
    63bc:	b6 01       	movw	r22, r12
    63be:	80 e3       	ldi	r24, 0x30	; 48
    63c0:	90 e0       	ldi	r25, 0x00	; 0
    63c2:	68 d0       	rcall	.+208    	; 0x6494 <fputc>
    63c4:	a2 fe       	sbrs	r10, 2
    63c6:	16 c0       	rjmp	.+44     	; 0x63f4 <vfprintf+0x386>
    63c8:	a1 fc       	sbrc	r10, 1
    63ca:	03 c0       	rjmp	.+6      	; 0x63d2 <vfprintf+0x364>
    63cc:	88 e7       	ldi	r24, 0x78	; 120
    63ce:	90 e0       	ldi	r25, 0x00	; 0
    63d0:	02 c0       	rjmp	.+4      	; 0x63d6 <vfprintf+0x368>
    63d2:	88 e5       	ldi	r24, 0x58	; 88
    63d4:	90 e0       	ldi	r25, 0x00	; 0
    63d6:	b6 01       	movw	r22, r12
    63d8:	0c c0       	rjmp	.+24     	; 0x63f2 <vfprintf+0x384>
    63da:	8a 2d       	mov	r24, r10
    63dc:	86 78       	andi	r24, 0x86	; 134
    63de:	51 f0       	breq	.+20     	; 0x63f4 <vfprintf+0x386>
    63e0:	a1 fe       	sbrs	r10, 1
    63e2:	02 c0       	rjmp	.+4      	; 0x63e8 <vfprintf+0x37a>
    63e4:	8b e2       	ldi	r24, 0x2B	; 43
    63e6:	01 c0       	rjmp	.+2      	; 0x63ea <vfprintf+0x37c>
    63e8:	80 e2       	ldi	r24, 0x20	; 32
    63ea:	a7 fc       	sbrc	r10, 7
    63ec:	8d e2       	ldi	r24, 0x2D	; 45
    63ee:	b6 01       	movw	r22, r12
    63f0:	90 e0       	ldi	r25, 0x00	; 0
    63f2:	50 d0       	rcall	.+160    	; 0x6494 <fputc>
    63f4:	89 14       	cp	r8, r9
    63f6:	30 f4       	brcc	.+12     	; 0x6404 <vfprintf+0x396>
    63f8:	b6 01       	movw	r22, r12
    63fa:	80 e3       	ldi	r24, 0x30	; 48
    63fc:	90 e0       	ldi	r25, 0x00	; 0
    63fe:	4a d0       	rcall	.+148    	; 0x6494 <fputc>
    6400:	9a 94       	dec	r9
    6402:	f8 cf       	rjmp	.-16     	; 0x63f4 <vfprintf+0x386>
    6404:	8a 94       	dec	r8
    6406:	f3 01       	movw	r30, r6
    6408:	e8 0d       	add	r30, r8
    640a:	f1 1d       	adc	r31, r1
    640c:	80 81       	ld	r24, Z
    640e:	b6 01       	movw	r22, r12
    6410:	90 e0       	ldi	r25, 0x00	; 0
    6412:	40 d0       	rcall	.+128    	; 0x6494 <fputc>
    6414:	81 10       	cpse	r8, r1
    6416:	f6 cf       	rjmp	.-20     	; 0x6404 <vfprintf+0x396>
    6418:	22 20       	and	r2, r2
    641a:	09 f4       	brne	.+2      	; 0x641e <vfprintf+0x3b0>
    641c:	4e ce       	rjmp	.-868    	; 0x60ba <vfprintf+0x4c>
    641e:	b6 01       	movw	r22, r12
    6420:	80 e2       	ldi	r24, 0x20	; 32
    6422:	90 e0       	ldi	r25, 0x00	; 0
    6424:	37 d0       	rcall	.+110    	; 0x6494 <fputc>
    6426:	2a 94       	dec	r2
    6428:	f7 cf       	rjmp	.-18     	; 0x6418 <vfprintf+0x3aa>
    642a:	f6 01       	movw	r30, r12
    642c:	86 81       	ldd	r24, Z+6	; 0x06
    642e:	97 81       	ldd	r25, Z+7	; 0x07
    6430:	02 c0       	rjmp	.+4      	; 0x6436 <vfprintf+0x3c8>
    6432:	8f ef       	ldi	r24, 0xFF	; 255
    6434:	9f ef       	ldi	r25, 0xFF	; 255
    6436:	2b 96       	adiw	r28, 0x0b	; 11
    6438:	0f b6       	in	r0, 0x3f	; 63
    643a:	f8 94       	cli
    643c:	de bf       	out	0x3e, r29	; 62
    643e:	0f be       	out	0x3f, r0	; 63
    6440:	cd bf       	out	0x3d, r28	; 61
    6442:	df 91       	pop	r29
    6444:	cf 91       	pop	r28
    6446:	1f 91       	pop	r17
    6448:	0f 91       	pop	r16
    644a:	ff 90       	pop	r15
    644c:	ef 90       	pop	r14
    644e:	df 90       	pop	r13
    6450:	cf 90       	pop	r12
    6452:	bf 90       	pop	r11
    6454:	af 90       	pop	r10
    6456:	9f 90       	pop	r9
    6458:	8f 90       	pop	r8
    645a:	7f 90       	pop	r7
    645c:	6f 90       	pop	r6
    645e:	5f 90       	pop	r5
    6460:	4f 90       	pop	r4
    6462:	3f 90       	pop	r3
    6464:	2f 90       	pop	r2
    6466:	08 95       	ret

00006468 <strnlen_P>:
    6468:	fc 01       	movw	r30, r24
    646a:	05 90       	lpm	r0, Z+
    646c:	61 50       	subi	r22, 0x01	; 1
    646e:	70 40       	sbci	r23, 0x00	; 0
    6470:	01 10       	cpse	r0, r1
    6472:	d8 f7       	brcc	.-10     	; 0x646a <strnlen_P+0x2>
    6474:	80 95       	com	r24
    6476:	90 95       	com	r25
    6478:	8e 0f       	add	r24, r30
    647a:	9f 1f       	adc	r25, r31
    647c:	08 95       	ret

0000647e <strnlen>:
    647e:	fc 01       	movw	r30, r24
    6480:	61 50       	subi	r22, 0x01	; 1
    6482:	70 40       	sbci	r23, 0x00	; 0
    6484:	01 90       	ld	r0, Z+
    6486:	01 10       	cpse	r0, r1
    6488:	d8 f7       	brcc	.-10     	; 0x6480 <strnlen+0x2>
    648a:	80 95       	com	r24
    648c:	90 95       	com	r25
    648e:	8e 0f       	add	r24, r30
    6490:	9f 1f       	adc	r25, r31
    6492:	08 95       	ret

00006494 <fputc>:
    6494:	0f 93       	push	r16
    6496:	1f 93       	push	r17
    6498:	cf 93       	push	r28
    649a:	df 93       	push	r29
    649c:	fb 01       	movw	r30, r22
    649e:	23 81       	ldd	r18, Z+3	; 0x03
    64a0:	21 fd       	sbrc	r18, 1
    64a2:	03 c0       	rjmp	.+6      	; 0x64aa <fputc+0x16>
    64a4:	8f ef       	ldi	r24, 0xFF	; 255
    64a6:	9f ef       	ldi	r25, 0xFF	; 255
    64a8:	2c c0       	rjmp	.+88     	; 0x6502 <fputc+0x6e>
    64aa:	22 ff       	sbrs	r18, 2
    64ac:	16 c0       	rjmp	.+44     	; 0x64da <fputc+0x46>
    64ae:	46 81       	ldd	r20, Z+6	; 0x06
    64b0:	57 81       	ldd	r21, Z+7	; 0x07
    64b2:	24 81       	ldd	r18, Z+4	; 0x04
    64b4:	35 81       	ldd	r19, Z+5	; 0x05
    64b6:	42 17       	cp	r20, r18
    64b8:	53 07       	cpc	r21, r19
    64ba:	44 f4       	brge	.+16     	; 0x64cc <fputc+0x38>
    64bc:	a0 81       	ld	r26, Z
    64be:	b1 81       	ldd	r27, Z+1	; 0x01
    64c0:	9d 01       	movw	r18, r26
    64c2:	2f 5f       	subi	r18, 0xFF	; 255
    64c4:	3f 4f       	sbci	r19, 0xFF	; 255
    64c6:	31 83       	std	Z+1, r19	; 0x01
    64c8:	20 83       	st	Z, r18
    64ca:	8c 93       	st	X, r24
    64cc:	26 81       	ldd	r18, Z+6	; 0x06
    64ce:	37 81       	ldd	r19, Z+7	; 0x07
    64d0:	2f 5f       	subi	r18, 0xFF	; 255
    64d2:	3f 4f       	sbci	r19, 0xFF	; 255
    64d4:	37 83       	std	Z+7, r19	; 0x07
    64d6:	26 83       	std	Z+6, r18	; 0x06
    64d8:	14 c0       	rjmp	.+40     	; 0x6502 <fputc+0x6e>
    64da:	8b 01       	movw	r16, r22
    64dc:	ec 01       	movw	r28, r24
    64de:	fb 01       	movw	r30, r22
    64e0:	00 84       	ldd	r0, Z+8	; 0x08
    64e2:	f1 85       	ldd	r31, Z+9	; 0x09
    64e4:	e0 2d       	mov	r30, r0
    64e6:	19 95       	eicall
    64e8:	89 2b       	or	r24, r25
    64ea:	e1 f6       	brne	.-72     	; 0x64a4 <fputc+0x10>
    64ec:	d8 01       	movw	r26, r16
    64ee:	16 96       	adiw	r26, 0x06	; 6
    64f0:	8d 91       	ld	r24, X+
    64f2:	9c 91       	ld	r25, X
    64f4:	17 97       	sbiw	r26, 0x07	; 7
    64f6:	01 96       	adiw	r24, 0x01	; 1
    64f8:	17 96       	adiw	r26, 0x07	; 7
    64fa:	9c 93       	st	X, r25
    64fc:	8e 93       	st	-X, r24
    64fe:	16 97       	sbiw	r26, 0x06	; 6
    6500:	ce 01       	movw	r24, r28
    6502:	df 91       	pop	r29
    6504:	cf 91       	pop	r28
    6506:	1f 91       	pop	r17
    6508:	0f 91       	pop	r16
    650a:	08 95       	ret

0000650c <__ultoa_invert>:
    650c:	fa 01       	movw	r30, r20
    650e:	aa 27       	eor	r26, r26
    6510:	28 30       	cpi	r18, 0x08	; 8
    6512:	51 f1       	breq	.+84     	; 0x6568 <__ultoa_invert+0x5c>
    6514:	20 31       	cpi	r18, 0x10	; 16
    6516:	81 f1       	breq	.+96     	; 0x6578 <__ultoa_invert+0x6c>
    6518:	e8 94       	clt
    651a:	6f 93       	push	r22
    651c:	6e 7f       	andi	r22, 0xFE	; 254
    651e:	6e 5f       	subi	r22, 0xFE	; 254
    6520:	7f 4f       	sbci	r23, 0xFF	; 255
    6522:	8f 4f       	sbci	r24, 0xFF	; 255
    6524:	9f 4f       	sbci	r25, 0xFF	; 255
    6526:	af 4f       	sbci	r26, 0xFF	; 255
    6528:	b1 e0       	ldi	r27, 0x01	; 1
    652a:	3e d0       	rcall	.+124    	; 0x65a8 <__ultoa_invert+0x9c>
    652c:	b4 e0       	ldi	r27, 0x04	; 4
    652e:	3c d0       	rcall	.+120    	; 0x65a8 <__ultoa_invert+0x9c>
    6530:	67 0f       	add	r22, r23
    6532:	78 1f       	adc	r23, r24
    6534:	89 1f       	adc	r24, r25
    6536:	9a 1f       	adc	r25, r26
    6538:	a1 1d       	adc	r26, r1
    653a:	68 0f       	add	r22, r24
    653c:	79 1f       	adc	r23, r25
    653e:	8a 1f       	adc	r24, r26
    6540:	91 1d       	adc	r25, r1
    6542:	a1 1d       	adc	r26, r1
    6544:	6a 0f       	add	r22, r26
    6546:	71 1d       	adc	r23, r1
    6548:	81 1d       	adc	r24, r1
    654a:	91 1d       	adc	r25, r1
    654c:	a1 1d       	adc	r26, r1
    654e:	20 d0       	rcall	.+64     	; 0x6590 <__ultoa_invert+0x84>
    6550:	09 f4       	brne	.+2      	; 0x6554 <__ultoa_invert+0x48>
    6552:	68 94       	set
    6554:	3f 91       	pop	r19
    6556:	2a e0       	ldi	r18, 0x0A	; 10
    6558:	26 9f       	mul	r18, r22
    655a:	11 24       	eor	r1, r1
    655c:	30 19       	sub	r19, r0
    655e:	30 5d       	subi	r19, 0xD0	; 208
    6560:	31 93       	st	Z+, r19
    6562:	de f6       	brtc	.-74     	; 0x651a <__ultoa_invert+0xe>
    6564:	cf 01       	movw	r24, r30
    6566:	08 95       	ret
    6568:	46 2f       	mov	r20, r22
    656a:	47 70       	andi	r20, 0x07	; 7
    656c:	40 5d       	subi	r20, 0xD0	; 208
    656e:	41 93       	st	Z+, r20
    6570:	b3 e0       	ldi	r27, 0x03	; 3
    6572:	0f d0       	rcall	.+30     	; 0x6592 <__ultoa_invert+0x86>
    6574:	c9 f7       	brne	.-14     	; 0x6568 <__ultoa_invert+0x5c>
    6576:	f6 cf       	rjmp	.-20     	; 0x6564 <__ultoa_invert+0x58>
    6578:	46 2f       	mov	r20, r22
    657a:	4f 70       	andi	r20, 0x0F	; 15
    657c:	40 5d       	subi	r20, 0xD0	; 208
    657e:	4a 33       	cpi	r20, 0x3A	; 58
    6580:	18 f0       	brcs	.+6      	; 0x6588 <__ultoa_invert+0x7c>
    6582:	49 5d       	subi	r20, 0xD9	; 217
    6584:	31 fd       	sbrc	r19, 1
    6586:	40 52       	subi	r20, 0x20	; 32
    6588:	41 93       	st	Z+, r20
    658a:	02 d0       	rcall	.+4      	; 0x6590 <__ultoa_invert+0x84>
    658c:	a9 f7       	brne	.-22     	; 0x6578 <__ultoa_invert+0x6c>
    658e:	ea cf       	rjmp	.-44     	; 0x6564 <__ultoa_invert+0x58>
    6590:	b4 e0       	ldi	r27, 0x04	; 4
    6592:	a6 95       	lsr	r26
    6594:	97 95       	ror	r25
    6596:	87 95       	ror	r24
    6598:	77 95       	ror	r23
    659a:	67 95       	ror	r22
    659c:	ba 95       	dec	r27
    659e:	c9 f7       	brne	.-14     	; 0x6592 <__ultoa_invert+0x86>
    65a0:	00 97       	sbiw	r24, 0x00	; 0
    65a2:	61 05       	cpc	r22, r1
    65a4:	71 05       	cpc	r23, r1
    65a6:	08 95       	ret
    65a8:	9b 01       	movw	r18, r22
    65aa:	ac 01       	movw	r20, r24
    65ac:	0a 2e       	mov	r0, r26
    65ae:	06 94       	lsr	r0
    65b0:	57 95       	ror	r21
    65b2:	47 95       	ror	r20
    65b4:	37 95       	ror	r19
    65b6:	27 95       	ror	r18
    65b8:	ba 95       	dec	r27
    65ba:	c9 f7       	brne	.-14     	; 0x65ae <__ultoa_invert+0xa2>
    65bc:	62 0f       	add	r22, r18
    65be:	73 1f       	adc	r23, r19
    65c0:	84 1f       	adc	r24, r20
    65c2:	95 1f       	adc	r25, r21
    65c4:	a0 1d       	adc	r26, r0
    65c6:	08 95       	ret

000065c8 <_exit>:
    65c8:	f8 94       	cli

000065ca <__stop_program>:
    65ca:	ff cf       	rjmp	.-2      	; 0x65ca <__stop_program>
