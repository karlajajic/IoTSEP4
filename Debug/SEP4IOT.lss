
SEP4IOT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000005c0  00800200  00006996  00006a2a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006996  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000012dd  008007c0  008007c0  00006fea  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00006fea  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00007048  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000ca0  00000000  00000000  00007088  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000faff  00000000  00000000  00007d28  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004134  00000000  00000000  00017827  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000077a2  00000000  00000000  0001b95b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002b38  00000000  00000000  00023100  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004871  00000000  00000000  00025c38  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000e086  00000000  00000000  0002a4a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000c68  00000000  00000000  0003852f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	50 c2       	rjmp	.+1184   	; 0x4a2 <__ctors_end>
       2:	00 00       	nop
       4:	6f c2       	rjmp	.+1246   	; 0x4e4 <__bad_interrupt>
       6:	00 00       	nop
       8:	6d c2       	rjmp	.+1242   	; 0x4e4 <__bad_interrupt>
       a:	00 00       	nop
       c:	6b c2       	rjmp	.+1238   	; 0x4e4 <__bad_interrupt>
       e:	00 00       	nop
      10:	69 c2       	rjmp	.+1234   	; 0x4e4 <__bad_interrupt>
      12:	00 00       	nop
      14:	67 c2       	rjmp	.+1230   	; 0x4e4 <__bad_interrupt>
      16:	00 00       	nop
      18:	65 c2       	rjmp	.+1226   	; 0x4e4 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	63 c2       	rjmp	.+1222   	; 0x4e4 <__bad_interrupt>
      1e:	00 00       	nop
      20:	61 c2       	rjmp	.+1218   	; 0x4e4 <__bad_interrupt>
      22:	00 00       	nop
      24:	5f c2       	rjmp	.+1214   	; 0x4e4 <__bad_interrupt>
      26:	00 00       	nop
      28:	5d c2       	rjmp	.+1210   	; 0x4e4 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	5b c2       	rjmp	.+1206   	; 0x4e4 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 19 0e 	jmp	0x1c32	; 0x1c32 <__vector_12>
      34:	57 c2       	rjmp	.+1198   	; 0x4e4 <__bad_interrupt>
      36:	00 00       	nop
      38:	55 c2       	rjmp	.+1194   	; 0x4e4 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	53 c2       	rjmp	.+1190   	; 0x4e4 <__bad_interrupt>
      3e:	00 00       	nop
      40:	51 c2       	rjmp	.+1186   	; 0x4e4 <__bad_interrupt>
      42:	00 00       	nop
      44:	4f c2       	rjmp	.+1182   	; 0x4e4 <__bad_interrupt>
      46:	00 00       	nop
      48:	4d c2       	rjmp	.+1178   	; 0x4e4 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	4b c2       	rjmp	.+1174   	; 0x4e4 <__bad_interrupt>
      4e:	00 00       	nop
      50:	49 c2       	rjmp	.+1170   	; 0x4e4 <__bad_interrupt>
      52:	00 00       	nop
      54:	47 c2       	rjmp	.+1166   	; 0x4e4 <__bad_interrupt>
      56:	00 00       	nop
      58:	45 c2       	rjmp	.+1162   	; 0x4e4 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	43 c2       	rjmp	.+1158   	; 0x4e4 <__bad_interrupt>
      5e:	00 00       	nop
      60:	41 c2       	rjmp	.+1154   	; 0x4e4 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 e4 28 	jmp	0x51c8	; 0x51c8 <__vector_25>
      68:	0c 94 36 29 	jmp	0x526c	; 0x526c <__vector_26>
      6c:	3b c2       	rjmp	.+1142   	; 0x4e4 <__bad_interrupt>
      6e:	00 00       	nop
      70:	39 c2       	rjmp	.+1138   	; 0x4e4 <__bad_interrupt>
      72:	00 00       	nop
      74:	37 c2       	rjmp	.+1134   	; 0x4e4 <__bad_interrupt>
      76:	00 00       	nop
      78:	35 c2       	rjmp	.+1130   	; 0x4e4 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	33 c2       	rjmp	.+1126   	; 0x4e4 <__bad_interrupt>
      7e:	00 00       	nop
      80:	31 c2       	rjmp	.+1122   	; 0x4e4 <__bad_interrupt>
      82:	00 00       	nop
      84:	2f c2       	rjmp	.+1118   	; 0x4e4 <__bad_interrupt>
      86:	00 00       	nop
      88:	2d c2       	rjmp	.+1114   	; 0x4e4 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	2b c2       	rjmp	.+1110   	; 0x4e4 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 7a 29 	jmp	0x52f4	; 0x52f4 <__vector_36>
      94:	0c 94 cc 29 	jmp	0x5398	; 0x5398 <__vector_37>
      98:	25 c2       	rjmp	.+1098   	; 0x4e4 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 64 2c 	jmp	0x58c8	; 0x58c8 <__vector_39>
      a0:	21 c2       	rjmp	.+1090   	; 0x4e4 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	1f c2       	rjmp	.+1086   	; 0x4e4 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	1d c2       	rjmp	.+1082   	; 0x4e4 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	1b c2       	rjmp	.+1078   	; 0x4e4 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	19 c2       	rjmp	.+1074   	; 0x4e4 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	17 c2       	rjmp	.+1070   	; 0x4e4 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	15 c2       	rjmp	.+1066   	; 0x4e4 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	13 c2       	rjmp	.+1062   	; 0x4e4 <__bad_interrupt>
      be:	00 00       	nop
      c0:	11 c2       	rjmp	.+1058   	; 0x4e4 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	0f c2       	rjmp	.+1054   	; 0x4e4 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	0d c2       	rjmp	.+1050   	; 0x4e4 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 10 2a 	jmp	0x5420	; 0x5420 <__vector_51>
      d0:	0c 94 62 2a 	jmp	0x54c4	; 0x54c4 <__vector_52>
      d4:	07 c2       	rjmp	.+1038   	; 0x4e4 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 a6 2a 	jmp	0x554c	; 0x554c <__vector_54>
      dc:	0c 94 f8 2a 	jmp	0x55f0	; 0x55f0 <__vector_55>
      e0:	01 c2       	rjmp	.+1026   	; 0x4e4 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	c6 01       	movw	r24, r12
      e6:	c6 01       	movw	r24, r12
      e8:	c6 01       	movw	r24, r12
      ea:	00 02       	muls	r16, r16
      ec:	08 02       	muls	r16, r24
      ee:	1e 02       	muls	r17, r30
      f0:	c6 01       	movw	r24, r12
      f2:	c6 01       	movw	r24, r12
      f4:	00 02       	muls	r16, r16
      f6:	08 02       	muls	r16, r24
      f8:	86 2c       	mov	r8, r6
      fa:	f6 2c       	mov	r15, r6
      fc:	f6 2c       	mov	r15, r6
      fe:	f6 2c       	mov	r15, r6
     100:	f6 2c       	mov	r15, r6
     102:	f6 2c       	mov	r15, r6
     104:	f6 2c       	mov	r15, r6
     106:	f6 2c       	mov	r15, r6
     108:	86 2c       	mov	r8, r6
     10a:	f6 2c       	mov	r15, r6
     10c:	f6 2c       	mov	r15, r6
     10e:	f6 2c       	mov	r15, r6
     110:	f6 2c       	mov	r15, r6
     112:	f6 2c       	mov	r15, r6
     114:	f6 2c       	mov	r15, r6
     116:	f6 2c       	mov	r15, r6
     118:	88 2c       	mov	r8, r8
     11a:	f6 2c       	mov	r15, r6
     11c:	f6 2c       	mov	r15, r6
     11e:	f6 2c       	mov	r15, r6
     120:	f6 2c       	mov	r15, r6
     122:	f6 2c       	mov	r15, r6
     124:	f6 2c       	mov	r15, r6
     126:	f6 2c       	mov	r15, r6
     128:	f6 2c       	mov	r15, r6
     12a:	f6 2c       	mov	r15, r6
     12c:	f6 2c       	mov	r15, r6
     12e:	f6 2c       	mov	r15, r6
     130:	f6 2c       	mov	r15, r6
     132:	f6 2c       	mov	r15, r6
     134:	f6 2c       	mov	r15, r6
     136:	f6 2c       	mov	r15, r6
     138:	88 2c       	mov	r8, r8
     13a:	f6 2c       	mov	r15, r6
     13c:	f6 2c       	mov	r15, r6
     13e:	f6 2c       	mov	r15, r6
     140:	f6 2c       	mov	r15, r6
     142:	f6 2c       	mov	r15, r6
     144:	f6 2c       	mov	r15, r6
     146:	f6 2c       	mov	r15, r6
     148:	f6 2c       	mov	r15, r6
     14a:	f6 2c       	mov	r15, r6
     14c:	f6 2c       	mov	r15, r6
     14e:	f6 2c       	mov	r15, r6
     150:	f6 2c       	mov	r15, r6
     152:	f6 2c       	mov	r15, r6
     154:	f6 2c       	mov	r15, r6
     156:	f6 2c       	mov	r15, r6
     158:	f2 2c       	mov	r15, r2
     15a:	f6 2c       	mov	r15, r6
     15c:	f6 2c       	mov	r15, r6
     15e:	f6 2c       	mov	r15, r6
     160:	f6 2c       	mov	r15, r6
     162:	f6 2c       	mov	r15, r6
     164:	f6 2c       	mov	r15, r6
     166:	f6 2c       	mov	r15, r6
     168:	bd 2c       	mov	r11, r13
     16a:	f6 2c       	mov	r15, r6
     16c:	f6 2c       	mov	r15, r6
     16e:	f6 2c       	mov	r15, r6
     170:	f6 2c       	mov	r15, r6
     172:	f6 2c       	mov	r15, r6
     174:	f6 2c       	mov	r15, r6
     176:	f6 2c       	mov	r15, r6
     178:	f6 2c       	mov	r15, r6
     17a:	f6 2c       	mov	r15, r6
     17c:	f6 2c       	mov	r15, r6
     17e:	f6 2c       	mov	r15, r6
     180:	f6 2c       	mov	r15, r6
     182:	f6 2c       	mov	r15, r6
     184:	f6 2c       	mov	r15, r6
     186:	f6 2c       	mov	r15, r6
     188:	b1 2c       	mov	r11, r1
     18a:	f6 2c       	mov	r15, r6
     18c:	f6 2c       	mov	r15, r6
     18e:	f6 2c       	mov	r15, r6
     190:	f6 2c       	mov	r15, r6
     192:	f6 2c       	mov	r15, r6
     194:	f6 2c       	mov	r15, r6
     196:	f6 2c       	mov	r15, r6
     198:	d5 2c       	mov	r13, r5

0000019a <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     19a:	07 e6       	ldi	r16, 0x67	; 103
     19c:	18 e1       	ldi	r17, 0x18	; 24
     19e:	0f 2e       	mov	r0, r31
     1a0:	f7 e9       	ldi	r31, 0x97	; 151
     1a2:	ef 2e       	mov	r14, r31
     1a4:	f8 e1       	ldi	r31, 0x18	; 24
     1a6:	ff 2e       	mov	r15, r31
     1a8:	f0 2d       	mov	r31, r0
     1aa:	80 91 66 18 	lds	r24, 0x1866	; 0x801866 <uxDeletedTasksWaitingCleanUp>
     1ae:	88 23       	and	r24, r24
     1b0:	29 f1       	breq	.+74     	; 0x1fc <prvIdleTask+0x62>
     1b2:	0f b6       	in	r0, 0x3f	; 63
     1b4:	f8 94       	cli
     1b6:	0f 92       	push	r0
     1b8:	d8 01       	movw	r26, r16
     1ba:	17 96       	adiw	r26, 0x07	; 7
     1bc:	ed 91       	ld	r30, X+
     1be:	fc 91       	ld	r31, X
     1c0:	18 97       	sbiw	r26, 0x08	; 8
     1c2:	c0 85       	ldd	r28, Z+8	; 0x08
     1c4:	d1 85       	ldd	r29, Z+9	; 0x09
     1c6:	ce 01       	movw	r24, r28
     1c8:	02 96       	adiw	r24, 0x02	; 2
     1ca:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <uxListRemove>
     1ce:	80 91 5a 18 	lds	r24, 0x185A	; 0x80185a <uxCurrentNumberOfTasks>
     1d2:	81 50       	subi	r24, 0x01	; 1
     1d4:	80 93 5a 18 	sts	0x185A, r24	; 0x80185a <uxCurrentNumberOfTasks>
     1d8:	80 91 66 18 	lds	r24, 0x1866	; 0x801866 <uxDeletedTasksWaitingCleanUp>
     1dc:	81 50       	subi	r24, 0x01	; 1
     1de:	80 93 66 18 	sts	0x1866, r24	; 0x801866 <uxDeletedTasksWaitingCleanUp>
     1e2:	0f 90       	pop	r0
     1e4:	0f be       	out	0x3f, r0	; 63
     1e6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     1e8:	9c 8d       	ldd	r25, Y+28	; 0x1c
     1ea:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <vPortFree>
     1ee:	ce 01       	movw	r24, r28
     1f0:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <vPortFree>
     1f4:	80 91 66 18 	lds	r24, 0x1866	; 0x801866 <uxDeletedTasksWaitingCleanUp>
     1f8:	81 11       	cpse	r24, r1
     1fa:	db cf       	rjmp	.-74     	; 0x1b2 <prvIdleTask+0x18>
     1fc:	f7 01       	movw	r30, r14
     1fe:	80 81       	ld	r24, Z
     200:	82 30       	cpi	r24, 0x02	; 2
     202:	10 f0       	brcs	.+4      	; 0x208 <prvIdleTask+0x6e>
     204:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <vPortYield>
     208:	0e 94 6f 1e 	call	0x3cde	; 0x3cde <vApplicationIdleHook>
     20c:	ce cf       	rjmp	.-100    	; 0x1aa <prvIdleTask+0x10>

0000020e <prvTimerTask>:
            pxNewTimer->ucStatus = 0x00;
            prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
        }

        return pxNewTimer;
    }
     20e:	cf 93       	push	r28
     210:	df 93       	push	r29
     212:	cd b7       	in	r28, 0x3d	; 61
     214:	de b7       	in	r29, 0x3e	; 62
     216:	60 97       	sbiw	r28, 0x10	; 16
     218:	0f b6       	in	r0, 0x3f	; 63
     21a:	f8 94       	cli
     21c:	de bf       	out	0x3e, r29	; 62
     21e:	0f be       	out	0x3f, r0	; 63
     220:	cd bf       	out	0x3d, r28	; 61
     222:	ce 01       	movw	r24, r28
     224:	01 96       	adiw	r24, 0x01	; 1
     226:	9a 87       	std	Y+10, r25	; 0x0a
     228:	89 87       	std	Y+9, r24	; 0x09
     22a:	81 2c       	mov	r8, r1
     22c:	91 2c       	mov	r9, r1
     22e:	a1 2c       	mov	r10, r1
     230:	b1 2c       	mov	r11, r1
     232:	69 84       	ldd	r6, Y+9	; 0x09
     234:	7a 84       	ldd	r7, Y+10	; 0x0a
     236:	e0 91 e5 18 	lds	r30, 0x18E5	; 0x8018e5 <pxCurrentTimerList>
     23a:	f0 91 e6 18 	lds	r31, 0x18E6	; 0x8018e6 <pxCurrentTimerList+0x1>
     23e:	80 81       	ld	r24, Z
     240:	88 23       	and	r24, r24
     242:	09 f4       	brne	.+2      	; 0x246 <prvTimerTask+0x38>
     244:	14 c1       	rjmp	.+552    	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
     246:	07 80       	ldd	r0, Z+7	; 0x07
     248:	f0 85       	ldd	r31, Z+8	; 0x08
     24a:	e0 2d       	mov	r30, r0
     24c:	20 80       	ld	r2, Z
     24e:	31 80       	ldd	r3, Z+1	; 0x01
     250:	42 80       	ldd	r4, Z+2	; 0x02
     252:	53 80       	ldd	r5, Z+3	; 0x03
     254:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <vTaskSuspendAll>
     258:	ce 01       	movw	r24, r28
     25a:	01 96       	adiw	r24, 0x01	; 1
     25c:	0e 94 d9 1d 	call	0x3bb2	; 0x3bb2 <prvSampleTimeNow>
     260:	6b 87       	std	Y+11, r22	; 0x0b
     262:	7c 87       	std	Y+12, r23	; 0x0c
     264:	8d 87       	std	Y+13, r24	; 0x0d
     266:	9e 87       	std	Y+14, r25	; 0x0e
     268:	89 81       	ldd	r24, Y+1	; 0x01
     26a:	81 11       	cpse	r24, r1
     26c:	67 c0       	rjmp	.+206    	; 0x33c <prvTimerTask+0x12e>
     26e:	8b 85       	ldd	r24, Y+11	; 0x0b
     270:	9c 85       	ldd	r25, Y+12	; 0x0c
     272:	ad 85       	ldd	r26, Y+13	; 0x0d
     274:	be 85       	ldd	r27, Y+14	; 0x0e
     276:	82 15       	cp	r24, r2
     278:	93 05       	cpc	r25, r3
     27a:	a4 05       	cpc	r26, r4
     27c:	b5 05       	cpc	r27, r5
     27e:	08 f4       	brcc	.+2      	; 0x282 <prvTimerTask+0x74>
     280:	45 c0       	rjmp	.+138    	; 0x30c <prvTimerTask+0xfe>
     282:	0e 94 9b 17 	call	0x2f36	; 0x2f36 <xTaskResumeAll>
     286:	e0 91 e5 18 	lds	r30, 0x18E5	; 0x8018e5 <pxCurrentTimerList>
     28a:	f0 91 e6 18 	lds	r31, 0x18E6	; 0x8018e6 <pxCurrentTimerList+0x1>
     28e:	07 80       	ldd	r0, Z+7	; 0x07
     290:	f0 85       	ldd	r31, Z+8	; 0x08
     292:	e0 2d       	mov	r30, r0
     294:	a0 85       	ldd	r26, Z+8	; 0x08
     296:	b1 85       	ldd	r27, Z+9	; 0x09
     298:	b8 8b       	std	Y+16, r27	; 0x10
     29a:	af 87       	std	Y+15, r26	; 0x0f
     29c:	cd 01       	movw	r24, r26
     29e:	02 96       	adiw	r24, 0x02	; 2
     2a0:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <uxListRemove>
     2a4:	ef 85       	ldd	r30, Y+15	; 0x0f
     2a6:	f8 89       	ldd	r31, Y+16	; 0x10
     2a8:	87 89       	ldd	r24, Z+23	; 0x17
     2aa:	82 ff       	sbrs	r24, 2
     2ac:	21 c0       	rjmp	.+66     	; 0x2f0 <prvTimerTask+0xe2>
     2ae:	46 85       	ldd	r20, Z+14	; 0x0e
     2b0:	57 85       	ldd	r21, Z+15	; 0x0f
     2b2:	60 89       	ldd	r22, Z+16	; 0x10
     2b4:	71 89       	ldd	r23, Z+17	; 0x11
     2b6:	42 0d       	add	r20, r2
     2b8:	53 1d       	adc	r21, r3
     2ba:	64 1d       	adc	r22, r4
     2bc:	75 1d       	adc	r23, r5
     2be:	72 01       	movw	r14, r4
     2c0:	61 01       	movw	r12, r2
     2c2:	0b 85       	ldd	r16, Y+11	; 0x0b
     2c4:	1c 85       	ldd	r17, Y+12	; 0x0c
     2c6:	2d 85       	ldd	r18, Y+13	; 0x0d
     2c8:	3e 85       	ldd	r19, Y+14	; 0x0e
     2ca:	cf 01       	movw	r24, r30
     2cc:	0e 94 e8 1c 	call	0x39d0	; 0x39d0 <prvInsertTimerInActiveList>
     2d0:	88 23       	and	r24, r24
     2d2:	99 f0       	breq	.+38     	; 0x2fa <prvTimerTask+0xec>
     2d4:	c8 2c       	mov	r12, r8
     2d6:	d9 2c       	mov	r13, r9
     2d8:	ea 2c       	mov	r14, r10
     2da:	fb 2c       	mov	r15, r11
     2dc:	00 e0       	ldi	r16, 0x00	; 0
     2de:	10 e0       	ldi	r17, 0x00	; 0
     2e0:	a2 01       	movw	r20, r4
     2e2:	91 01       	movw	r18, r2
     2e4:	60 e0       	ldi	r22, 0x00	; 0
     2e6:	8f 85       	ldd	r24, Y+15	; 0x0f
     2e8:	98 89       	ldd	r25, Y+16	; 0x10
     2ea:	0e 94 7b 1d 	call	0x3af6	; 0x3af6 <xTimerGenericCommand>
     2ee:	05 c0       	rjmp	.+10     	; 0x2fa <prvTimerTask+0xec>
     2f0:	8e 7f       	andi	r24, 0xFE	; 254
     2f2:	af 85       	ldd	r26, Y+15	; 0x0f
     2f4:	b8 89       	ldd	r27, Y+16	; 0x10
     2f6:	57 96       	adiw	r26, 0x17	; 23
     2f8:	8c 93       	st	X, r24
     2fa:	af 85       	ldd	r26, Y+15	; 0x0f
     2fc:	b8 89       	ldd	r27, Y+16	; 0x10
     2fe:	54 96       	adiw	r26, 0x14	; 20
     300:	ed 91       	ld	r30, X+
     302:	fc 91       	ld	r31, X
     304:	55 97       	sbiw	r26, 0x15	; 21
     306:	cd 01       	movw	r24, r26
     308:	19 95       	eicall
     30a:	a2 c0       	rjmp	.+324    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     30c:	20 e0       	ldi	r18, 0x00	; 0
     30e:	b2 01       	movw	r22, r4
     310:	a1 01       	movw	r20, r2
     312:	8b 85       	ldd	r24, Y+11	; 0x0b
     314:	9c 85       	ldd	r25, Y+12	; 0x0c
     316:	ad 85       	ldd	r26, Y+13	; 0x0d
     318:	be 85       	ldd	r27, Y+14	; 0x0e
     31a:	48 1b       	sub	r20, r24
     31c:	59 0b       	sbc	r21, r25
     31e:	6a 0b       	sbc	r22, r26
     320:	7b 0b       	sbc	r23, r27
     322:	80 91 e1 18 	lds	r24, 0x18E1	; 0x8018e1 <xTimerQueue>
     326:	90 91 e2 18 	lds	r25, 0x18E2	; 0x8018e2 <xTimerQueue+0x1>
     32a:	0e 94 b5 11 	call	0x236a	; 0x236a <vQueueWaitForMessageRestricted>
     32e:	0e 94 9b 17 	call	0x2f36	; 0x2f36 <xTaskResumeAll>
     332:	81 11       	cpse	r24, r1
     334:	8d c0       	rjmp	.+282    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     336:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <vPortYield>
     33a:	8a c0       	rjmp	.+276    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     33c:	0e 94 9b 17 	call	0x2f36	; 0x2f36 <xTaskResumeAll>
     340:	87 c0       	rjmp	.+270    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     342:	89 81       	ldd	r24, Y+1	; 0x01
     344:	88 23       	and	r24, r24
     346:	0c f4       	brge	.+2      	; 0x34a <prvTimerTask+0x13c>
     348:	83 c0       	rjmp	.+262    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     34a:	4e 80       	ldd	r4, Y+6	; 0x06
     34c:	5f 80       	ldd	r5, Y+7	; 0x07
     34e:	d2 01       	movw	r26, r4
     350:	1c 96       	adiw	r26, 0x0c	; 12
     352:	8d 91       	ld	r24, X+
     354:	9c 91       	ld	r25, X
     356:	1d 97       	sbiw	r26, 0x0d	; 13
     358:	89 2b       	or	r24, r25
     35a:	21 f0       	breq	.+8      	; 0x364 <prvTimerTask+0x156>
     35c:	c2 01       	movw	r24, r4
     35e:	02 96       	adiw	r24, 0x02	; 2
     360:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <uxListRemove>
     364:	ce 01       	movw	r24, r28
     366:	08 96       	adiw	r24, 0x08	; 8
     368:	0e 94 d9 1d 	call	0x3bb2	; 0x3bb2 <prvSampleTimeNow>
     36c:	8b 01       	movw	r16, r22
     36e:	9c 01       	movw	r18, r24
     370:	e9 81       	ldd	r30, Y+1	; 0x01
     372:	0e 2e       	mov	r0, r30
     374:	00 0c       	add	r0, r0
     376:	ff 0b       	sbc	r31, r31
     378:	ea 30       	cpi	r30, 0x0A	; 10
     37a:	f1 05       	cpc	r31, r1
     37c:	08 f0       	brcs	.+2      	; 0x380 <prvTimerTask+0x172>
     37e:	68 c0       	rjmp	.+208    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     380:	88 27       	eor	r24, r24
     382:	ee 58       	subi	r30, 0x8E	; 142
     384:	ff 4f       	sbci	r31, 0xFF	; 255
     386:	8f 4f       	sbci	r24, 0xFF	; 255
     388:	0c 94 61 2f 	jmp	0x5ec2	; 0x5ec2 <__tablejump2__>
     38c:	f2 01       	movw	r30, r4
     38e:	87 89       	ldd	r24, Z+23	; 0x17
     390:	81 60       	ori	r24, 0x01	; 1
     392:	87 8b       	std	Z+23, r24	; 0x17
     394:	ca 80       	ldd	r12, Y+2	; 0x02
     396:	db 80       	ldd	r13, Y+3	; 0x03
     398:	ec 80       	ldd	r14, Y+4	; 0x04
     39a:	fd 80       	ldd	r15, Y+5	; 0x05
     39c:	46 85       	ldd	r20, Z+14	; 0x0e
     39e:	57 85       	ldd	r21, Z+15	; 0x0f
     3a0:	60 89       	ldd	r22, Z+16	; 0x10
     3a2:	71 89       	ldd	r23, Z+17	; 0x11
     3a4:	4c 0d       	add	r20, r12
     3a6:	5d 1d       	adc	r21, r13
     3a8:	6e 1d       	adc	r22, r14
     3aa:	7f 1d       	adc	r23, r15
     3ac:	c2 01       	movw	r24, r4
     3ae:	0e 94 e8 1c 	call	0x39d0	; 0x39d0 <prvInsertTimerInActiveList>
     3b2:	88 23       	and	r24, r24
     3b4:	09 f4       	brne	.+2      	; 0x3b8 <prvTimerTask+0x1aa>
     3b6:	4c c0       	rjmp	.+152    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     3b8:	d2 01       	movw	r26, r4
     3ba:	54 96       	adiw	r26, 0x14	; 20
     3bc:	ed 91       	ld	r30, X+
     3be:	fc 91       	ld	r31, X
     3c0:	55 97       	sbiw	r26, 0x15	; 21
     3c2:	c2 01       	movw	r24, r4
     3c4:	19 95       	eicall
     3c6:	f2 01       	movw	r30, r4
     3c8:	87 89       	ldd	r24, Z+23	; 0x17
     3ca:	82 ff       	sbrs	r24, 2
     3cc:	41 c0       	rjmp	.+130    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     3ce:	4a 81       	ldd	r20, Y+2	; 0x02
     3d0:	5b 81       	ldd	r21, Y+3	; 0x03
     3d2:	6c 81       	ldd	r22, Y+4	; 0x04
     3d4:	7d 81       	ldd	r23, Y+5	; 0x05
     3d6:	86 85       	ldd	r24, Z+14	; 0x0e
     3d8:	97 85       	ldd	r25, Z+15	; 0x0f
     3da:	a0 89       	ldd	r26, Z+16	; 0x10
     3dc:	b1 89       	ldd	r27, Z+17	; 0x11
     3de:	9a 01       	movw	r18, r20
     3e0:	ab 01       	movw	r20, r22
     3e2:	28 0f       	add	r18, r24
     3e4:	39 1f       	adc	r19, r25
     3e6:	4a 1f       	adc	r20, r26
     3e8:	5b 1f       	adc	r21, r27
     3ea:	c8 2c       	mov	r12, r8
     3ec:	d9 2c       	mov	r13, r9
     3ee:	ea 2c       	mov	r14, r10
     3f0:	fb 2c       	mov	r15, r11
     3f2:	00 e0       	ldi	r16, 0x00	; 0
     3f4:	10 e0       	ldi	r17, 0x00	; 0
     3f6:	60 e0       	ldi	r22, 0x00	; 0
     3f8:	c2 01       	movw	r24, r4
     3fa:	0e 94 7b 1d 	call	0x3af6	; 0x3af6 <xTimerGenericCommand>
     3fe:	28 c0       	rjmp	.+80     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     400:	d2 01       	movw	r26, r4
     402:	57 96       	adiw	r26, 0x17	; 23
     404:	8c 91       	ld	r24, X
     406:	57 97       	sbiw	r26, 0x17	; 23
     408:	8e 7f       	andi	r24, 0xFE	; 254
     40a:	57 96       	adiw	r26, 0x17	; 23
     40c:	8c 93       	st	X, r24
     40e:	20 c0       	rjmp	.+64     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     410:	f2 01       	movw	r30, r4
     412:	87 89       	ldd	r24, Z+23	; 0x17
     414:	81 60       	ori	r24, 0x01	; 1
     416:	87 8b       	std	Z+23, r24	; 0x17
     418:	4a 81       	ldd	r20, Y+2	; 0x02
     41a:	5b 81       	ldd	r21, Y+3	; 0x03
     41c:	6c 81       	ldd	r22, Y+4	; 0x04
     41e:	7d 81       	ldd	r23, Y+5	; 0x05
     420:	46 87       	std	Z+14, r20	; 0x0e
     422:	57 87       	std	Z+15, r21	; 0x0f
     424:	60 8b       	std	Z+16, r22	; 0x10
     426:	71 8b       	std	Z+17, r23	; 0x11
     428:	40 0f       	add	r20, r16
     42a:	51 1f       	adc	r21, r17
     42c:	62 1f       	adc	r22, r18
     42e:	73 1f       	adc	r23, r19
     430:	68 01       	movw	r12, r16
     432:	79 01       	movw	r14, r18
     434:	c2 01       	movw	r24, r4
     436:	0e 94 e8 1c 	call	0x39d0	; 0x39d0 <prvInsertTimerInActiveList>
     43a:	0a c0       	rjmp	.+20     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     43c:	f2 01       	movw	r30, r4
     43e:	87 89       	ldd	r24, Z+23	; 0x17
     440:	81 fd       	sbrc	r24, 1
     442:	04 c0       	rjmp	.+8      	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
     444:	c2 01       	movw	r24, r4
     446:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <vPortFree>
     44a:	02 c0       	rjmp	.+4      	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     44c:	8e 7f       	andi	r24, 0xFE	; 254
     44e:	87 8b       	std	Z+23, r24	; 0x17
     450:	28 2d       	mov	r18, r8
     452:	39 2d       	mov	r19, r9
     454:	4a 2d       	mov	r20, r10
     456:	5b 2d       	mov	r21, r11
     458:	66 2d       	mov	r22, r6
     45a:	77 2d       	mov	r23, r7
     45c:	80 91 e1 18 	lds	r24, 0x18E1	; 0x8018e1 <xTimerQueue>
     460:	90 91 e2 18 	lds	r25, 0x18E2	; 0x8018e2 <xTimerQueue+0x1>
     464:	0e 94 51 10 	call	0x20a2	; 0x20a2 <xQueueReceive>
     468:	81 11       	cpse	r24, r1
     46a:	6b cf       	rjmp	.-298    	; 0x342 <prvTimerTask+0x134>
     46c:	e4 ce       	rjmp	.-568    	; 0x236 <prvTimerTask+0x28>
     46e:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <vTaskSuspendAll>
     472:	ce 01       	movw	r24, r28
     474:	01 96       	adiw	r24, 0x01	; 1
     476:	0e 94 d9 1d 	call	0x3bb2	; 0x3bb2 <prvSampleTimeNow>
     47a:	6b 87       	std	Y+11, r22	; 0x0b
     47c:	7c 87       	std	Y+12, r23	; 0x0c
     47e:	8d 87       	std	Y+13, r24	; 0x0d
     480:	9e 87       	std	Y+14, r25	; 0x0e
     482:	89 81       	ldd	r24, Y+1	; 0x01
     484:	81 11       	cpse	r24, r1
     486:	5a cf       	rjmp	.-332    	; 0x33c <prvTimerTask+0x12e>
     488:	e0 91 e3 18 	lds	r30, 0x18E3	; 0x8018e3 <pxOverflowTimerList>
     48c:	f0 91 e4 18 	lds	r31, 0x18E4	; 0x8018e4 <pxOverflowTimerList+0x1>
     490:	80 81       	ld	r24, Z
     492:	21 e0       	ldi	r18, 0x01	; 1
     494:	81 11       	cpse	r24, r1
     496:	20 e0       	ldi	r18, 0x00	; 0
     498:	28 2c       	mov	r2, r8
     49a:	39 2c       	mov	r3, r9
     49c:	4a 2c       	mov	r4, r10
     49e:	5b 2c       	mov	r5, r11
     4a0:	36 cf       	rjmp	.-404    	; 0x30e <prvTimerTask+0x100>

000004a2 <__ctors_end>:
     4a2:	11 24       	eor	r1, r1
     4a4:	1f be       	out	0x3f, r1	; 63
     4a6:	cf ef       	ldi	r28, 0xFF	; 255
     4a8:	d1 e2       	ldi	r29, 0x21	; 33
     4aa:	de bf       	out	0x3e, r29	; 62
     4ac:	cd bf       	out	0x3d, r28	; 61
     4ae:	00 e0       	ldi	r16, 0x00	; 0
     4b0:	0c bf       	out	0x3c, r16	; 60

000004b2 <__do_copy_data>:
     4b2:	17 e0       	ldi	r17, 0x07	; 7
     4b4:	a0 e0       	ldi	r26, 0x00	; 0
     4b6:	b2 e0       	ldi	r27, 0x02	; 2
     4b8:	e6 e9       	ldi	r30, 0x96	; 150
     4ba:	f9 e6       	ldi	r31, 0x69	; 105
     4bc:	00 e0       	ldi	r16, 0x00	; 0
     4be:	0b bf       	out	0x3b, r16	; 59
     4c0:	02 c0       	rjmp	.+4      	; 0x4c6 <__do_copy_data+0x14>
     4c2:	07 90       	elpm	r0, Z+
     4c4:	0d 92       	st	X+, r0
     4c6:	a0 3c       	cpi	r26, 0xC0	; 192
     4c8:	b1 07       	cpc	r27, r17
     4ca:	d9 f7       	brne	.-10     	; 0x4c2 <__do_copy_data+0x10>

000004cc <__do_clear_bss>:
     4cc:	2a e1       	ldi	r18, 0x1A	; 26
     4ce:	a0 ec       	ldi	r26, 0xC0	; 192
     4d0:	b7 e0       	ldi	r27, 0x07	; 7
     4d2:	01 c0       	rjmp	.+2      	; 0x4d6 <.do_clear_bss_start>

000004d4 <.do_clear_bss_loop>:
     4d4:	1d 92       	st	X+, r1

000004d6 <.do_clear_bss_start>:
     4d6:	ad 39       	cpi	r26, 0x9D	; 157
     4d8:	b2 07       	cpc	r27, r18
     4da:	e1 f7       	brne	.-8      	; 0x4d4 <.do_clear_bss_loop>
     4dc:	0e 94 5d 1f 	call	0x3eba	; 0x3eba <main>
     4e0:	0c 94 c9 34 	jmp	0x6992	; 0x6992 <_exit>

000004e4 <__bad_interrupt>:
     4e4:	8d cd       	rjmp	.-1254   	; 0x0 <__vectors>

000004e6 <time>:
     4e6:	fc 01       	movw	r30, r24
     4e8:	0f b6       	in	r0, 0x3f	; 63
     4ea:	f8 94       	cli
     4ec:	60 91 99 1a 	lds	r22, 0x1A99	; 0x801a99 <__system_time>
     4f0:	70 91 9a 1a 	lds	r23, 0x1A9A	; 0x801a9a <__system_time+0x1>
     4f4:	80 91 9b 1a 	lds	r24, 0x1A9B	; 0x801a9b <__system_time+0x2>
     4f8:	90 91 9c 1a 	lds	r25, 0x1A9C	; 0x801a9c <__system_time+0x3>
     4fc:	0f be       	out	0x3f, r0	; 63
     4fe:	30 97       	sbiw	r30, 0x00	; 0
     500:	21 f0       	breq	.+8      	; 0x50a <time+0x24>
     502:	60 83       	st	Z, r22
     504:	71 83       	std	Z+1, r23	; 0x01
     506:	82 83       	std	Z+2, r24	; 0x02
     508:	93 83       	std	Z+3, r25	; 0x03
     50a:	08 95       	ret

0000050c <co2Reader_create>:
void co2Reader_destroy(co2reader_t self) {
	if (self == NULL)
		return;
	vTaskDelete(self->handleTask);
	vPortFree(self);
}
     50c:	2f 92       	push	r2
     50e:	3f 92       	push	r3
     510:	4f 92       	push	r4
     512:	5f 92       	push	r5
     514:	6f 92       	push	r6
     516:	7f 92       	push	r7
     518:	8f 92       	push	r8
     51a:	9f 92       	push	r9
     51c:	af 92       	push	r10
     51e:	bf 92       	push	r11
     520:	cf 92       	push	r12
     522:	df 92       	push	r13
     524:	ef 92       	push	r14
     526:	ff 92       	push	r15
     528:	0f 93       	push	r16
     52a:	1f 93       	push	r17
     52c:	cf 93       	push	r28
     52e:	df 93       	push	r29
     530:	d8 2f       	mov	r29, r24
     532:	c6 2f       	mov	r28, r22
     534:	1a 01       	movw	r2, r20
     536:	28 01       	movw	r4, r16
     538:	39 01       	movw	r6, r18
     53a:	87 01       	movw	r16, r14
     53c:	64 e0       	ldi	r22, 0x04	; 4
     53e:	70 e0       	ldi	r23, 0x00	; 0
     540:	81 e0       	ldi	r24, 0x01	; 1
     542:	90 e0       	ldi	r25, 0x00	; 0
     544:	0e 94 7d 2f 	call	0x5efa	; 0x5efa <calloc>
     548:	4c 01       	movw	r8, r24
     54a:	89 2b       	or	r24, r25
     54c:	69 f1       	breq	.+90     	; 0x5a8 <co2Reader_create+0x9c>
     54e:	f4 01       	movw	r30, r8
     550:	11 92       	st	Z+, r1
     552:	11 92       	st	Z+, r1
     554:	7f 01       	movw	r14, r30
     556:	30 92 cb 07 	sts	0x07CB, r3	; 0x8007cb <_startMeasureEventGroup+0x1>
     55a:	20 92 ca 07 	sts	0x07CA, r2	; 0x8007ca <_startMeasureEventGroup>
     55e:	40 92 c6 07 	sts	0x07C6, r4	; 0x8007c6 <_startMeasureBit>
     562:	50 92 c7 07 	sts	0x07C7, r5	; 0x8007c7 <_startMeasureBit+0x1>
     566:	60 92 c8 07 	sts	0x07C8, r6	; 0x8007c8 <_startMeasureBit+0x2>
     56a:	70 92 c9 07 	sts	0x07C9, r7	; 0x8007c9 <_startMeasureBit+0x3>
     56e:	10 93 c5 07 	sts	0x07C5, r17	; 0x8007c5 <_readyEventGroup+0x1>
     572:	00 93 c4 07 	sts	0x07C4, r16	; 0x8007c4 <_readyEventGroup>
     576:	a0 92 c0 07 	sts	0x07C0, r10	; 0x8007c0 <__data_end>
     57a:	b0 92 c1 07 	sts	0x07C1, r11	; 0x8007c1 <__data_end+0x1>
     57e:	c0 92 c2 07 	sts	0x07C2, r12	; 0x8007c2 <__data_end+0x2>
     582:	d0 92 c3 07 	sts	0x07C3, r13	; 0x8007c3 <__data_end+0x3>
     586:	60 e0       	ldi	r22, 0x00	; 0
     588:	70 e0       	ldi	r23, 0x00	; 0
     58a:	83 e0       	ldi	r24, 0x03	; 3
     58c:	0e 94 1b 27 	call	0x4e36	; 0x4e36 <mh_z19_create>
     590:	4c 2f       	mov	r20, r28
     592:	50 e0       	ldi	r21, 0x00	; 0
     594:	48 53       	subi	r20, 0x38	; 56
     596:	5f 4f       	sbci	r21, 0xFF	; 255
     598:	0d 2f       	mov	r16, r29
     59a:	94 01       	movw	r18, r8
     59c:	62 e7       	ldi	r22, 0x72	; 114
     59e:	72 e0       	ldi	r23, 0x02	; 2
     5a0:	8b e3       	ldi	r24, 0x3B	; 59
     5a2:	93 e0       	ldi	r25, 0x03	; 3
     5a4:	0e 94 55 15 	call	0x2aaa	; 0x2aaa <xTaskCreate>
     5a8:	c4 01       	movw	r24, r8
     5aa:	df 91       	pop	r29
     5ac:	cf 91       	pop	r28
     5ae:	1f 91       	pop	r17
     5b0:	0f 91       	pop	r16
     5b2:	ff 90       	pop	r15
     5b4:	ef 90       	pop	r14
     5b6:	df 90       	pop	r13
     5b8:	cf 90       	pop	r12
     5ba:	bf 90       	pop	r11
     5bc:	af 90       	pop	r10
     5be:	9f 90       	pop	r9
     5c0:	8f 90       	pop	r8
     5c2:	7f 90       	pop	r7
     5c4:	6f 90       	pop	r6
     5c6:	5f 90       	pop	r5
     5c8:	4f 90       	pop	r4
     5ca:	3f 90       	pop	r3
     5cc:	2f 90       	pop	r2
     5ce:	08 95       	ret

000005d0 <co2Reader_measure>:


void co2Reader_measure(co2reader_t self) {
     5d0:	cf 92       	push	r12
     5d2:	df 92       	push	r13
     5d4:	ef 92       	push	r14
     5d6:	ff 92       	push	r15
     5d8:	0f 93       	push	r16
     5da:	1f 93       	push	r17
     5dc:	cf 93       	push	r28
     5de:	df 93       	push	r29
     5e0:	ec 01       	movw	r28, r24
	
	EventBits_t uxBits = xEventGroupWaitBits(_startMeasureEventGroup, //eventGroup
     5e2:	40 91 c6 07 	lds	r20, 0x07C6	; 0x8007c6 <_startMeasureBit>
     5e6:	50 91 c7 07 	lds	r21, 0x07C7	; 0x8007c7 <_startMeasureBit+0x1>
     5ea:	60 91 c8 07 	lds	r22, 0x07C8	; 0x8007c8 <_startMeasureBit+0x2>
     5ee:	70 91 c9 07 	lds	r23, 0x07C9	; 0x8007c9 <_startMeasureBit+0x3>
     5f2:	cc 24       	eor	r12, r12
     5f4:	ca 94       	dec	r12
     5f6:	dc 2c       	mov	r13, r12
     5f8:	76 01       	movw	r14, r12
     5fa:	01 e0       	ldi	r16, 0x01	; 1
     5fc:	21 e0       	ldi	r18, 0x01	; 1
     5fe:	80 91 ca 07 	lds	r24, 0x07CA	; 0x8007ca <_startMeasureEventGroup>
     602:	90 91 cb 07 	lds	r25, 0x07CB	; 0x8007cb <_startMeasureEventGroup+0x1>
     606:	77 d6       	rcall	.+3310   	; 0x12f6 <xEventGroupWaitBits>
	_startMeasureBit, //bits it is interested in
	pdTRUE, //clears the bits
	pdTRUE, //waits for both bits to be set
	portMAX_DELAY); //wait

	if ((uxBits & (_startMeasureBit)) == (_startMeasureBit)) {
     608:	00 91 c6 07 	lds	r16, 0x07C6	; 0x8007c6 <_startMeasureBit>
     60c:	10 91 c7 07 	lds	r17, 0x07C7	; 0x8007c7 <_startMeasureBit+0x1>
     610:	20 91 c8 07 	lds	r18, 0x07C8	; 0x8007c8 <_startMeasureBit+0x2>
     614:	30 91 c9 07 	lds	r19, 0x07C9	; 0x8007c9 <_startMeasureBit+0x3>
     618:	dc 01       	movw	r26, r24
     61a:	cb 01       	movw	r24, r22
     61c:	80 23       	and	r24, r16
     61e:	91 23       	and	r25, r17
     620:	a2 23       	and	r26, r18
     622:	b3 23       	and	r27, r19
     624:	08 17       	cp	r16, r24
     626:	19 07       	cpc	r17, r25
     628:	2a 07       	cpc	r18, r26
     62a:	3b 07       	cpc	r19, r27
     62c:	d9 f4       	brne	.+54     	; 0x664 <co2Reader_measure+0x94>

		
		mh_z19_return_code_t return_code_co2_measurement = mh_z19_take_meassuring();
     62e:	0e 94 49 27 	call	0x4e92	; 0x4e92 <mh_z19_take_meassuring>
     632:	18 2f       	mov	r17, r24
		vTaskDelay(300);
     634:	6c e2       	ldi	r22, 0x2C	; 44
     636:	71 e0       	ldi	r23, 0x01	; 1
     638:	80 e0       	ldi	r24, 0x00	; 0
     63a:	90 e0       	ldi	r25, 0x00	; 0
     63c:	0e 94 17 18 	call	0x302e	; 0x302e <vTaskDelay>
		if(return_code_co2_measurement == MHZ19_OK) {
     640:	11 11       	cpse	r17, r1
     642:	03 c0       	rjmp	.+6      	; 0x64a <co2Reader_measure+0x7a>
			mh_z19_get_co2_ppm(&self->value);
     644:	ce 01       	movw	r24, r28
     646:	0e 94 78 27 	call	0x4ef0	; 0x4ef0 <mh_z19_get_co2_ppm>
		}
		
		//set done bit so that device knows measurement is done
		xEventGroupSetBits(_readyEventGroup, _readyBit);
     64a:	40 91 c0 07 	lds	r20, 0x07C0	; 0x8007c0 <__data_end>
     64e:	50 91 c1 07 	lds	r21, 0x07C1	; 0x8007c1 <__data_end+0x1>
     652:	60 91 c2 07 	lds	r22, 0x07C2	; 0x8007c2 <__data_end+0x2>
     656:	70 91 c3 07 	lds	r23, 0x07C3	; 0x8007c3 <__data_end+0x3>
     65a:	80 91 c4 07 	lds	r24, 0x07C4	; 0x8007c4 <_readyEventGroup>
     65e:	90 91 c5 07 	lds	r25, 0x07C5	; 0x8007c5 <_readyEventGroup+0x1>
     662:	09 d7       	rcall	.+3602   	; 0x1476 <xEventGroupSetBits>
	}
}
     664:	df 91       	pop	r29
     666:	cf 91       	pop	r28
     668:	1f 91       	pop	r17
     66a:	0f 91       	pop	r16
     66c:	ff 90       	pop	r15
     66e:	ef 90       	pop	r14
     670:	df 90       	pop	r13
     672:	cf 90       	pop	r12
     674:	08 95       	ret

00000676 <co2Reader_executeTask>:
	uint16_t value;
	TaskHandle_t handleTask;
}co2reader;

//actual task, methods devided so that it is possible to test
void co2Reader_executeTask(void* self) {
     676:	ec 01       	movw	r28, r24
	for (;;) {
		co2Reader_measure((co2reader_t)self);
     678:	ce 01       	movw	r24, r28
     67a:	aa df       	rcall	.-172    	; 0x5d0 <co2Reader_measure>
     67c:	fd cf       	rjmp	.-6      	; 0x678 <co2Reader_executeTask+0x2>

0000067e <co2Reader_getCO2>:
	}
}

uint16_t co2Reader_getCO2(co2reader_t self) {
	return self->value;
}
     67e:	fc 01       	movw	r30, r24
     680:	80 81       	ld	r24, Z
     682:	91 81       	ldd	r25, Z+1	; 0x01
     684:	08 95       	ret

00000686 <configuration_create>:
//it is created only once, before starting the scheduler + will never be destroyed
	_working = calloc(1, sizeof(bool));
	_ventilation = calloc(1, sizeof(bool));

	//by default, device should work, not to ventilate
	_working = true;
     686:	21 e0       	ldi	r18, 0x01	; 1
     688:	20 93 cf 07 	sts	0x07CF, r18	; 0x8007cf <_working>
	_ventilation = false;
     68c:	10 92 ce 07 	sts	0x07CE, r1	; 0x8007ce <_ventilation>

	_semaphore = semaphore;
     690:	90 93 cd 07 	sts	0x07CD, r25	; 0x8007cd <_semaphore+0x1>
     694:	80 93 cc 07 	sts	0x07CC, r24	; 0x8007cc <_semaphore>
     698:	08 95       	ret

0000069a <configuration_setWorking>:
}

//if the semaphore is initialized, take it and give it back, if not, just do the work 
void configuration_setWorking(bool value) {
     69a:	0f 93       	push	r16
     69c:	cf 93       	push	r28
	if (_semaphore != NULL) {
     69e:	20 91 cc 07 	lds	r18, 0x07CC	; 0x8007cc <_semaphore>
     6a2:	30 91 cd 07 	lds	r19, 0x07CD	; 0x8007cd <_semaphore+0x1>
     6a6:	21 15       	cp	r18, r1
     6a8:	31 05       	cpc	r19, r1
     6aa:	b1 f0       	breq	.+44     	; 0x6d8 <configuration_setWorking+0x3e>
     6ac:	c8 2f       	mov	r28, r24
		xSemaphoreTake(_semaphore, portMAX_DELAY);
     6ae:	4f ef       	ldi	r20, 0xFF	; 255
     6b0:	5f ef       	ldi	r21, 0xFF	; 255
     6b2:	ba 01       	movw	r22, r20
     6b4:	c9 01       	movw	r24, r18
     6b6:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <xQueueSemaphoreTake>
		_working = value;
     6ba:	c0 93 cf 07 	sts	0x07CF, r28	; 0x8007cf <_working>
		xSemaphoreGive(_semaphore);
     6be:	00 e0       	ldi	r16, 0x00	; 0
     6c0:	20 e0       	ldi	r18, 0x00	; 0
     6c2:	30 e0       	ldi	r19, 0x00	; 0
     6c4:	a9 01       	movw	r20, r18
     6c6:	60 e0       	ldi	r22, 0x00	; 0
     6c8:	70 e0       	ldi	r23, 0x00	; 0
     6ca:	80 91 cc 07 	lds	r24, 0x07CC	; 0x8007cc <_semaphore>
     6ce:	90 91 cd 07 	lds	r25, 0x07CD	; 0x8007cd <_semaphore+0x1>
     6d2:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <xQueueGenericSend>
     6d6:	02 c0       	rjmp	.+4      	; 0x6dc <configuration_setWorking+0x42>
	}
	else _working = value;
     6d8:	80 93 cf 07 	sts	0x07CF, r24	; 0x8007cf <_working>
}
     6dc:	cf 91       	pop	r28
     6de:	0f 91       	pop	r16
     6e0:	08 95       	ret

000006e2 <configuration_getWorking>:

void configuration_getWorking(bool* working) {
     6e2:	0f 93       	push	r16
     6e4:	cf 93       	push	r28
     6e6:	df 93       	push	r29
	if (_semaphore != NULL) {
     6e8:	20 91 cc 07 	lds	r18, 0x07CC	; 0x8007cc <_semaphore>
     6ec:	30 91 cd 07 	lds	r19, 0x07CD	; 0x8007cd <_semaphore+0x1>
     6f0:	21 15       	cp	r18, r1
     6f2:	31 05       	cpc	r19, r1
     6f4:	b9 f0       	breq	.+46     	; 0x724 <configuration_getWorking+0x42>
     6f6:	ec 01       	movw	r28, r24
		xSemaphoreTake(_semaphore, portMAX_DELAY);
     6f8:	4f ef       	ldi	r20, 0xFF	; 255
     6fa:	5f ef       	ldi	r21, 0xFF	; 255
     6fc:	ba 01       	movw	r22, r20
     6fe:	c9 01       	movw	r24, r18
     700:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <xQueueSemaphoreTake>
		*working = _working;
     704:	80 91 cf 07 	lds	r24, 0x07CF	; 0x8007cf <_working>
     708:	88 83       	st	Y, r24
		xSemaphoreGive(_semaphore);
     70a:	00 e0       	ldi	r16, 0x00	; 0
     70c:	20 e0       	ldi	r18, 0x00	; 0
     70e:	30 e0       	ldi	r19, 0x00	; 0
     710:	a9 01       	movw	r20, r18
     712:	60 e0       	ldi	r22, 0x00	; 0
     714:	70 e0       	ldi	r23, 0x00	; 0
     716:	80 91 cc 07 	lds	r24, 0x07CC	; 0x8007cc <_semaphore>
     71a:	90 91 cd 07 	lds	r25, 0x07CD	; 0x8007cd <_semaphore+0x1>
     71e:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <xQueueGenericSend>
     722:	04 c0       	rjmp	.+8      	; 0x72c <configuration_getWorking+0x4a>
	}
	else *working = _working;
     724:	20 91 cf 07 	lds	r18, 0x07CF	; 0x8007cf <_working>
     728:	fc 01       	movw	r30, r24
     72a:	20 83       	st	Z, r18
}
     72c:	df 91       	pop	r29
     72e:	cf 91       	pop	r28
     730:	0f 91       	pop	r16
     732:	08 95       	ret

00000734 <configuration_setVentilation>:

void configuration_setVentilation(bool value) {
     734:	0f 93       	push	r16
     736:	cf 93       	push	r28
	if (_semaphore != NULL) {
     738:	20 91 cc 07 	lds	r18, 0x07CC	; 0x8007cc <_semaphore>
     73c:	30 91 cd 07 	lds	r19, 0x07CD	; 0x8007cd <_semaphore+0x1>
     740:	21 15       	cp	r18, r1
     742:	31 05       	cpc	r19, r1
     744:	b1 f0       	breq	.+44     	; 0x772 <configuration_setVentilation+0x3e>
     746:	c8 2f       	mov	r28, r24
		xSemaphoreTake(_semaphore, portMAX_DELAY);
     748:	4f ef       	ldi	r20, 0xFF	; 255
     74a:	5f ef       	ldi	r21, 0xFF	; 255
     74c:	ba 01       	movw	r22, r20
     74e:	c9 01       	movw	r24, r18
     750:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <xQueueSemaphoreTake>
		_ventilation = value;
     754:	c0 93 ce 07 	sts	0x07CE, r28	; 0x8007ce <_ventilation>
		xSemaphoreGive(_semaphore);
     758:	00 e0       	ldi	r16, 0x00	; 0
     75a:	20 e0       	ldi	r18, 0x00	; 0
     75c:	30 e0       	ldi	r19, 0x00	; 0
     75e:	a9 01       	movw	r20, r18
     760:	60 e0       	ldi	r22, 0x00	; 0
     762:	70 e0       	ldi	r23, 0x00	; 0
     764:	80 91 cc 07 	lds	r24, 0x07CC	; 0x8007cc <_semaphore>
     768:	90 91 cd 07 	lds	r25, 0x07CD	; 0x8007cd <_semaphore+0x1>
     76c:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <xQueueGenericSend>
     770:	02 c0       	rjmp	.+4      	; 0x776 <configuration_setVentilation+0x42>
	}
	else _ventilation = value;
     772:	80 93 ce 07 	sts	0x07CE, r24	; 0x8007ce <_ventilation>
}
     776:	cf 91       	pop	r28
     778:	0f 91       	pop	r16
     77a:	08 95       	ret

0000077c <configuration_getVentilation>:

void configuration_getVentilation(bool* ventilation) {
     77c:	0f 93       	push	r16
     77e:	cf 93       	push	r28
     780:	df 93       	push	r29
	if (_semaphore != NULL) {
     782:	20 91 cc 07 	lds	r18, 0x07CC	; 0x8007cc <_semaphore>
     786:	30 91 cd 07 	lds	r19, 0x07CD	; 0x8007cd <_semaphore+0x1>
     78a:	21 15       	cp	r18, r1
     78c:	31 05       	cpc	r19, r1
     78e:	b9 f0       	breq	.+46     	; 0x7be <configuration_getVentilation+0x42>
     790:	ec 01       	movw	r28, r24
		xSemaphoreTake(_semaphore, portMAX_DELAY);
     792:	4f ef       	ldi	r20, 0xFF	; 255
     794:	5f ef       	ldi	r21, 0xFF	; 255
     796:	ba 01       	movw	r22, r20
     798:	c9 01       	movw	r24, r18
     79a:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <xQueueSemaphoreTake>
		*ventilation = _ventilation;
     79e:	80 91 ce 07 	lds	r24, 0x07CE	; 0x8007ce <_ventilation>
     7a2:	88 83       	st	Y, r24
		xSemaphoreGive(_semaphore);
     7a4:	00 e0       	ldi	r16, 0x00	; 0
     7a6:	20 e0       	ldi	r18, 0x00	; 0
     7a8:	30 e0       	ldi	r19, 0x00	; 0
     7aa:	a9 01       	movw	r20, r18
     7ac:	60 e0       	ldi	r22, 0x00	; 0
     7ae:	70 e0       	ldi	r23, 0x00	; 0
     7b0:	80 91 cc 07 	lds	r24, 0x07CC	; 0x8007cc <_semaphore>
     7b4:	90 91 cd 07 	lds	r25, 0x07CD	; 0x8007cd <_semaphore+0x1>
     7b8:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <xQueueGenericSend>
     7bc:	04 c0       	rjmp	.+8      	; 0x7c6 <configuration_getVentilation+0x4a>
	}
	else *ventilation = _ventilation;
     7be:	20 91 ce 07 	lds	r18, 0x07CE	; 0x8007ce <_ventilation>
     7c2:	fc 01       	movw	r30, r24
     7c4:	20 83       	st	Z, r18
     7c6:	df 91       	pop	r29
     7c8:	cf 91       	pop	r28
     7ca:	0f 91       	pop	r16
     7cc:	08 95       	ret

000007ce <currentCondition_create>:
	}
	
}

void currentCondition_destroy(currentCondition_t self) {
	vPortFree(self);
     7ce:	68 e0       	ldi	r22, 0x08	; 8
     7d0:	70 e0       	ldi	r23, 0x00	; 0
     7d2:	81 e0       	ldi	r24, 0x01	; 1
     7d4:	90 e0       	ldi	r25, 0x00	; 0
     7d6:	0e 94 7d 2f 	call	0x5efa	; 0x5efa <calloc>
     7da:	00 97       	sbiw	r24, 0x00	; 0
     7dc:	49 f0       	breq	.+18     	; 0x7f0 <currentCondition_create+0x22>
     7de:	fc 01       	movw	r30, r24
     7e0:	13 82       	std	Z+3, r1	; 0x03
     7e2:	12 82       	std	Z+2, r1	; 0x02
     7e4:	15 82       	std	Z+5, r1	; 0x05
     7e6:	14 82       	std	Z+4, r1	; 0x04
     7e8:	11 82       	std	Z+1, r1	; 0x01
     7ea:	10 82       	st	Z, r1
     7ec:	17 82       	std	Z+7, r1	; 0x07
     7ee:	16 82       	std	Z+6, r1	; 0x06
     7f0:	08 95       	ret

000007f2 <currentCondition_setCO2>:
     7f2:	00 97       	sbiw	r24, 0x00	; 0
     7f4:	49 f0       	breq	.+18     	; 0x808 <currentCondition_setCO2+0x16>
     7f6:	9b 01       	movw	r18, r22
     7f8:	28 5c       	subi	r18, 0xC8	; 200
     7fa:	31 09       	sbc	r19, r1
     7fc:	29 34       	cpi	r18, 0x49	; 73
     7fe:	36 42       	sbci	r19, 0x26	; 38
     800:	18 f4       	brcc	.+6      	; 0x808 <currentCondition_setCO2+0x16>
     802:	fc 01       	movw	r30, r24
     804:	71 83       	std	Z+1, r23	; 0x01
     806:	60 83       	st	Z, r22
     808:	08 95       	ret

0000080a <currentCondition_setHumidity>:
     80a:	00 97       	sbiw	r24, 0x00	; 0
     80c:	39 f0       	breq	.+14     	; 0x81c <currentCondition_setHumidity+0x12>
     80e:	69 3e       	cpi	r22, 0xE9	; 233
     810:	23 e0       	ldi	r18, 0x03	; 3
     812:	72 07       	cpc	r23, r18
     814:	18 f4       	brcc	.+6      	; 0x81c <currentCondition_setHumidity+0x12>
     816:	fc 01       	movw	r30, r24
     818:	75 83       	std	Z+5, r23	; 0x05
     81a:	64 83       	std	Z+4, r22	; 0x04
     81c:	08 95       	ret

0000081e <currentCondition_setTemperature>:
     81e:	00 97       	sbiw	r24, 0x00	; 0
     820:	49 f0       	breq	.+18     	; 0x834 <currentCondition_setTemperature+0x16>
     822:	9b 01       	movw	r18, r22
     824:	20 57       	subi	r18, 0x70	; 112
     826:	3e 4f       	sbci	r19, 0xFE	; 254
     828:	27 3b       	cpi	r18, 0xB7	; 183
     82a:	33 40       	sbci	r19, 0x03	; 3
     82c:	18 f4       	brcc	.+6      	; 0x834 <currentCondition_setTemperature+0x16>
     82e:	fc 01       	movw	r30, r24
     830:	73 83       	std	Z+3, r23	; 0x03
     832:	62 83       	std	Z+2, r22	; 0x02
     834:	08 95       	ret

00000836 <currentCondition_setSound>:
     836:	00 97       	sbiw	r24, 0x00	; 0
     838:	31 f0       	breq	.+12     	; 0x846 <currentCondition_setSound+0x10>
     83a:	67 39       	cpi	r22, 0x97	; 151
     83c:	71 05       	cpc	r23, r1
     83e:	18 f4       	brcc	.+6      	; 0x846 <currentCondition_setSound+0x10>
     840:	fc 01       	movw	r30, r24
     842:	77 83       	std	Z+7, r23	; 0x07
     844:	66 83       	std	Z+6, r22	; 0x06
     846:	08 95       	ret

00000848 <getcurrentConditionPayload>:
}

lora_payload_t getcurrentConditionPayload(currentCondition_t self)
{
     848:	fc 01       	movw	r30, r24
     84a:	db 01       	movw	r26, r22
	lora_payload_t payload;
	payload.port_no = 1;
	payload.len = 8;
	
	int16_t tempData = self->temperatureData;
     84c:	12 96       	adiw	r26, 0x02	; 2
     84e:	6c 91       	ld	r22, X
     850:	12 97       	sbiw	r26, 0x02	; 2
     852:	13 96       	adiw	r26, 0x03	; 3
     854:	7c 91       	ld	r23, X
     856:	13 97       	sbiw	r26, 0x03	; 3
	
	payload.bytes[0] = tempData >> 8;
	payload.bytes[1] = tempData & 0xFF;

	payload.bytes[2] = self->humidityData >> 8;
     858:	14 96       	adiw	r26, 0x04	; 4
     85a:	4c 91       	ld	r20, X
     85c:	14 97       	sbiw	r26, 0x04	; 4
     85e:	15 96       	adiw	r26, 0x05	; 5
     860:	5c 91       	ld	r21, X
     862:	15 97       	sbiw	r26, 0x05	; 5
	payload.bytes[3] = self->humidityData & 0xFF;
	
	payload.bytes[4] = self->co2Data >> 8;
     864:	2c 91       	ld	r18, X
     866:	11 96       	adiw	r26, 0x01	; 1
     868:	3c 91       	ld	r19, X
     86a:	11 97       	sbiw	r26, 0x01	; 1
	payload.bytes[5] = self->co2Data & 0xFF;
	
	payload.bytes[6] = self->soundData >> 8;
     86c:	16 96       	adiw	r26, 0x06	; 6
     86e:	8c 91       	ld	r24, X
     870:	16 97       	sbiw	r26, 0x06	; 6
     872:	17 96       	adiw	r26, 0x07	; 7
     874:	9c 91       	ld	r25, X
	payload.bytes[7] = self->soundData & 0xFF;
	
	return payload;
     876:	a1 e0       	ldi	r26, 0x01	; 1
     878:	a0 83       	st	Z, r26
     87a:	a8 e0       	ldi	r26, 0x08	; 8
     87c:	a1 83       	std	Z+1, r26	; 0x01
     87e:	72 83       	std	Z+2, r23	; 0x02
     880:	63 83       	std	Z+3, r22	; 0x03
     882:	54 83       	std	Z+4, r21	; 0x04
     884:	45 83       	std	Z+5, r20	; 0x05
     886:	36 83       	std	Z+6, r19	; 0x06
     888:	27 83       	std	Z+7, r18	; 0x07
     88a:	90 87       	std	Z+8, r25	; 0x08
     88c:	81 87       	std	Z+9, r24	; 0x09
	
}
     88e:	cf 01       	movw	r24, r30
     890:	08 95       	ret

00000892 <getSimplePayload>:
	
	uint16_t one = 0;
	payload.bytes[0] = one >> 8;
	payload.bytes[1] = one & 0xFF;
	
	return payload;
     892:	21 e0       	ldi	r18, 0x01	; 1
     894:	fc 01       	movw	r30, r24
     896:	20 83       	st	Z, r18
     898:	22 e0       	ldi	r18, 0x02	; 2
     89a:	21 83       	std	Z+1, r18	; 0x01
     89c:	12 82       	std	Z+2, r1	; 0x02
     89e:	13 82       	std	Z+3, r1	; 0x03
     8a0:	08 95       	ret

000008a2 <device_create>:
		//vTaskDelay(5000);
	}
}

device_t device_create(UBaseType_t priority, UBaseType_t stack, EventGroupHandle_t startMeasureEventGroup, EventBits_t startMeasureBit,
EventGroupHandle_t readyEventGroup, EventBits_t readyBit, co2reader_t co2Reader, humAndTempReader_t humAndTempReader,soundReader_t soundReader, MessageBufferHandle_t uplinkMessageBuffer){
     8a2:	2f 92       	push	r2
     8a4:	3f 92       	push	r3
     8a6:	4f 92       	push	r4
     8a8:	5f 92       	push	r5
     8aa:	6f 92       	push	r6
     8ac:	7f 92       	push	r7
     8ae:	8f 92       	push	r8
     8b0:	9f 92       	push	r9
     8b2:	af 92       	push	r10
     8b4:	bf 92       	push	r11
     8b6:	cf 92       	push	r12
     8b8:	df 92       	push	r13
     8ba:	ef 92       	push	r14
     8bc:	ff 92       	push	r15
     8be:	0f 93       	push	r16
     8c0:	1f 93       	push	r17
     8c2:	cf 93       	push	r28
     8c4:	df 93       	push	r29
     8c6:	00 d0       	rcall	.+0      	; 0x8c8 <device_create+0x26>
     8c8:	1f 92       	push	r1
     8ca:	cd b7       	in	r28, 0x3d	; 61
     8cc:	de b7       	in	r29, 0x3e	; 62
     8ce:	28 2e       	mov	r2, r24
     8d0:	36 2e       	mov	r3, r22
     8d2:	5c 83       	std	Y+4, r21	; 0x04
     8d4:	4b 83       	std	Y+3, r20	; 0x03
     8d6:	28 01       	movw	r4, r16
     8d8:	39 01       	movw	r6, r18

	device_t _new_device = calloc(1, sizeof(device));
     8da:	6a e0       	ldi	r22, 0x0A	; 10
     8dc:	70 e0       	ldi	r23, 0x00	; 0
     8de:	81 e0       	ldi	r24, 0x01	; 1
     8e0:	90 e0       	ldi	r25, 0x00	; 0
     8e2:	0e 94 7d 2f 	call	0x5efa	; 0x5efa <calloc>
     8e6:	9a 83       	std	Y+2, r25	; 0x02
     8e8:	89 83       	std	Y+1, r24	; 0x01
	if (_new_device == NULL)
     8ea:	00 97       	sbiw	r24, 0x00	; 0
     8ec:	09 f4       	brne	.+2      	; 0x8f0 <device_create+0x4e>
     8ee:	40 c0       	rjmp	.+128    	; 0x970 <device_create+0xce>
		return NULL;

	_new_device->co2reader = co2Reader;
     8f0:	fc 01       	movw	r30, r24
     8f2:	91 82       	std	Z+1, r9	; 0x01
     8f4:	80 82       	st	Z, r8
	_new_device->humAndTempReader = humAndTempReader;
     8f6:	8a 8d       	ldd	r24, Y+26	; 0x1a
     8f8:	9b 8d       	ldd	r25, Y+27	; 0x1b
     8fa:	93 83       	std	Z+3, r25	; 0x03
     8fc:	82 83       	std	Z+2, r24	; 0x02
	_new_device->soundReader=soundReader;
     8fe:	8c 8d       	ldd	r24, Y+28	; 0x1c
     900:	9d 8d       	ldd	r25, Y+29	; 0x1d
     902:	95 83       	std	Z+5, r25	; 0x05
     904:	84 83       	std	Z+4, r24	; 0x04
	currentCondition_t currentCond = currentCondition_create();
     906:	63 df       	rcall	.-314    	; 0x7ce <currentCondition_create>
	_new_device->currentCondition = currentCond;
     908:	e9 81       	ldd	r30, Y+1	; 0x01
     90a:	fa 81       	ldd	r31, Y+2	; 0x02
     90c:	97 83       	std	Z+7, r25	; 0x07
     90e:	86 83       	std	Z+6, r24	; 0x06

	_startMeasureEventGroup = startMeasureEventGroup;
     910:	8b 81       	ldd	r24, Y+3	; 0x03
     912:	9c 81       	ldd	r25, Y+4	; 0x04
     914:	90 93 f3 07 	sts	0x07F3, r25	; 0x8007f3 <_startMeasureEventGroup+0x1>
     918:	80 93 f2 07 	sts	0x07F2, r24	; 0x8007f2 <_startMeasureEventGroup>
	_startMeasureBit = startMeasureBit;
     91c:	40 92 ee 07 	sts	0x07EE, r4	; 0x8007ee <_startMeasureBit>
     920:	50 92 ef 07 	sts	0x07EF, r5	; 0x8007ef <_startMeasureBit+0x1>
     924:	60 92 f0 07 	sts	0x07F0, r6	; 0x8007f0 <_startMeasureBit+0x2>
     928:	70 92 f1 07 	sts	0x07F1, r7	; 0x8007f1 <_startMeasureBit+0x3>

	_readyEventGroup = readyEventGroup;
     92c:	f0 92 ed 07 	sts	0x07ED, r15	; 0x8007ed <_readyEventGroup+0x1>
     930:	e0 92 ec 07 	sts	0x07EC, r14	; 0x8007ec <_readyEventGroup>
	_readyBit = readyBit;
     934:	a0 92 e8 07 	sts	0x07E8, r10	; 0x8007e8 <_readyBit>
     938:	b0 92 e9 07 	sts	0x07E9, r11	; 0x8007e9 <_readyBit+0x1>
     93c:	c0 92 ea 07 	sts	0x07EA, r12	; 0x8007ea <_readyBit+0x2>
     940:	d0 92 eb 07 	sts	0x07EB, r13	; 0x8007eb <_readyBit+0x3>
	
	_uplinkmessageBuffer=uplinkMessageBuffer;
     944:	8e 8d       	ldd	r24, Y+30	; 0x1e
     946:	9f 8d       	ldd	r25, Y+31	; 0x1f
     948:	90 93 e7 07 	sts	0x07E7, r25	; 0x8007e7 <_uplinkmessageBuffer+0x1>
     94c:	80 93 e6 07 	sts	0x07E6, r24	; 0x8007e6 <_uplinkmessageBuffer>

	xTaskCreate(
     950:	43 2d       	mov	r20, r3
     952:	50 e0       	ldi	r21, 0x00	; 0
     954:	48 53       	subi	r20, 0x38	; 56
     956:	5f 4f       	sbci	r21, 0xFF	; 255
     958:	7f 01       	movw	r14, r30
     95a:	98 e0       	ldi	r25, 0x08	; 8
     95c:	e9 0e       	add	r14, r25
     95e:	f1 1c       	adc	r15, r1
     960:	02 2d       	mov	r16, r2
     962:	9f 01       	movw	r18, r30
     964:	6c e7       	ldi	r22, 0x7C	; 124
     966:	72 e0       	ldi	r23, 0x02	; 2
     968:	8d ed       	ldi	r24, 0xDD	; 221
     96a:	95 e0       	ldi	r25, 0x05	; 5
     96c:	0e 94 55 15 	call	0x2aaa	; 0x2aaa <xTaskCreate>
	);

	//printf("device up\n");

	return _new_device;
}
     970:	89 81       	ldd	r24, Y+1	; 0x01
     972:	9a 81       	ldd	r25, Y+2	; 0x02
     974:	0f 90       	pop	r0
     976:	0f 90       	pop	r0
     978:	0f 90       	pop	r0
     97a:	0f 90       	pop	r0
     97c:	df 91       	pop	r29
     97e:	cf 91       	pop	r28
     980:	1f 91       	pop	r17
     982:	0f 91       	pop	r16
     984:	ff 90       	pop	r15
     986:	ef 90       	pop	r14
     988:	df 90       	pop	r13
     98a:	cf 90       	pop	r12
     98c:	bf 90       	pop	r11
     98e:	af 90       	pop	r10
     990:	9f 90       	pop	r9
     992:	8f 90       	pop	r8
     994:	7f 90       	pop	r7
     996:	6f 90       	pop	r6
     998:	5f 90       	pop	r5
     99a:	4f 90       	pop	r4
     99c:	3f 90       	pop	r3
     99e:	2f 90       	pop	r2
     9a0:	08 95       	ret

000009a2 <device_startMeasuring>:




void device_startMeasuring(device_t self) {
     9a2:	af 92       	push	r10
     9a4:	bf 92       	push	r11
     9a6:	cf 92       	push	r12
     9a8:	df 92       	push	r13
     9aa:	ef 92       	push	r14
     9ac:	ff 92       	push	r15
     9ae:	0f 93       	push	r16
     9b0:	1f 93       	push	r17
     9b2:	cf 93       	push	r28
     9b4:	df 93       	push	r29
     9b6:	cd b7       	in	r28, 0x3d	; 61
     9b8:	de b7       	in	r29, 0x3e	; 62
     9ba:	66 97       	sbiw	r28, 0x16	; 22
     9bc:	0f b6       	in	r0, 0x3f	; 63
     9be:	f8 94       	cli
     9c0:	de bf       	out	0x3e, r29	; 62
     9c2:	0f be       	out	0x3f, r0	; 63
     9c4:	cd bf       	out	0x3d, r28	; 61
     9c6:	5c 01       	movw	r10, r24
	//we should first check if device is on, get that from lora and add new eventBit 
	
	bool* works = pvPortMalloc(sizeof(bool));
     9c8:	81 e0       	ldi	r24, 0x01	; 1
     9ca:	90 e0       	ldi	r25, 0x00	; 0
     9cc:	3a d6       	rcall	.+3188   	; 0x1642 <pvPortMalloc>
     9ce:	8c 01       	movw	r16, r24
	configuration_getWorking(works);
     9d0:	88 de       	rcall	.-752    	; 0x6e2 <configuration_getWorking>
     9d2:	f8 01       	movw	r30, r16
	if (*works == true)
     9d4:	80 81       	ld	r24, Z
     9d6:	88 23       	and	r24, r24
     9d8:	09 f4       	brne	.+2      	; 0x9dc <device_startMeasuring+0x3a>
     9da:	bc c0       	rjmp	.+376    	; 0xb54 <device_startMeasuring+0x1b2>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
	{

		bool* ventilate = pvPortMalloc(sizeof(bool));
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	30 d6       	rcall	.+3168   	; 0x1642 <pvPortMalloc>
     9e2:	8c 01       	movw	r16, r24
		configuration_getVentilation(ventilate);
     9e4:	cb de       	rcall	.-618    	; 0x77c <configuration_getVentilation>
     9e6:	f8 01       	movw	r30, r16
		if(*ventilate == true)
     9e8:	80 81       	ld	r24, Z
     9ea:	88 23       	and	r24, r24
		{
			servo_open();
     9ec:	11 f0       	breq	.+4      	; 0x9f2 <device_startMeasuring+0x50>
     9ee:	69 d2       	rcall	.+1234   	; 0xec2 <servo_open>
     9f0:	01 c0       	rjmp	.+2      	; 0x9f4 <device_startMeasuring+0x52>
		} 
		else
		{
			servo_close();
     9f2:	6c d2       	rcall	.+1240   	; 0xecc <servo_close>
     9f4:	40 91 ee 07 	lds	r20, 0x07EE	; 0x8007ee <_startMeasureBit>
		}

	////tell sensors to start meassuring 
	xEventGroupSetBits(_startMeasureEventGroup, _startMeasureBit);
     9f8:	50 91 ef 07 	lds	r21, 0x07EF	; 0x8007ef <_startMeasureBit+0x1>
     9fc:	60 91 f0 07 	lds	r22, 0x07F0	; 0x8007f0 <_startMeasureBit+0x2>
     a00:	70 91 f1 07 	lds	r23, 0x07F1	; 0x8007f1 <_startMeasureBit+0x3>
     a04:	80 91 f2 07 	lds	r24, 0x07F2	; 0x8007f2 <_startMeasureEventGroup>
     a08:	90 91 f3 07 	lds	r25, 0x07F3	; 0x8007f3 <_startMeasureEventGroup+0x1>
     a0c:	34 d5       	rcall	.+2664   	; 0x1476 <xEventGroupSetBits>
     a0e:	40 91 e8 07 	lds	r20, 0x07E8	; 0x8007e8 <_readyBit>
	//printf("device has set bits\n");

	//wait for sensors to read data
	EventBits_t uxBits = xEventGroupWaitBits(_readyEventGroup, //eventGroup it is interested in
     a12:	50 91 e9 07 	lds	r21, 0x07E9	; 0x8007e9 <_readyBit+0x1>
     a16:	60 91 ea 07 	lds	r22, 0x07EA	; 0x8007ea <_readyBit+0x2>
     a1a:	70 91 eb 07 	lds	r23, 0x07EB	; 0x8007eb <_readyBit+0x3>
     a1e:	cc 24       	eor	r12, r12
     a20:	ca 94       	dec	r12
     a22:	dc 2c       	mov	r13, r12
     a24:	76 01       	movw	r14, r12
     a26:	01 e0       	ldi	r16, 0x01	; 1
     a28:	21 e0       	ldi	r18, 0x01	; 1
     a2a:	80 91 ec 07 	lds	r24, 0x07EC	; 0x8007ec <_readyEventGroup>
     a2e:	90 91 ed 07 	lds	r25, 0x07ED	; 0x8007ed <_readyEventGroup+0x1>
     a32:	61 d4       	rcall	.+2242   	; 0x12f6 <xEventGroupWaitBits>
     a34:	00 91 e8 07 	lds	r16, 0x07E8	; 0x8007e8 <_readyBit>
		_readyBit, //bits it is interested in
		pdTRUE, //clears the bits 
		pdTRUE, //waits for both bits to be set
		portMAX_DELAY); //waits forever if needed
	
	if ((uxBits & (_readyBit)) == (_readyBit)) {
     a38:	10 91 e9 07 	lds	r17, 0x07E9	; 0x8007e9 <_readyBit+0x1>
     a3c:	20 91 ea 07 	lds	r18, 0x07EA	; 0x8007ea <_readyBit+0x2>
     a40:	30 91 eb 07 	lds	r19, 0x07EB	; 0x8007eb <_readyBit+0x3>
     a44:	dc 01       	movw	r26, r24
     a46:	cb 01       	movw	r24, r22
     a48:	80 23       	and	r24, r16
     a4a:	91 23       	and	r25, r17
     a4c:	a2 23       	and	r26, r18
     a4e:	b3 23       	and	r27, r19
     a50:	08 17       	cp	r16, r24
     a52:	19 07       	cpc	r17, r25
     a54:	2a 07       	cpc	r18, r26
     a56:	3b 07       	cpc	r19, r27
     a58:	09 f0       	breq	.+2      	; 0xa5c <device_startMeasuring+0xba>
     a5a:	9e c0       	rjmp	.+316    	; 0xb98 <device_startMeasuring+0x1f6>
		currentCondition_setCO2(self->currentCondition,co2Reader_getCO2(self->co2reader));
     a5c:	f5 01       	movw	r30, r10
     a5e:	80 81       	ld	r24, Z
     a60:	91 81       	ldd	r25, Z+1	; 0x01
     a62:	0d de       	rcall	.-998    	; 0x67e <co2Reader_getCO2>
     a64:	bc 01       	movw	r22, r24
     a66:	f5 01       	movw	r30, r10
     a68:	86 81       	ldd	r24, Z+6	; 0x06
     a6a:	97 81       	ldd	r25, Z+7	; 0x07
     a6c:	c2 de       	rcall	.-636    	; 0x7f2 <currentCondition_setCO2>
		
		currentCondition_setSound(self->currentCondition,soundReader_getSound(self->soundReader));
     a6e:	f5 01       	movw	r30, r10
     a70:	84 81       	ldd	r24, Z+4	; 0x04
     a72:	95 81       	ldd	r25, Z+5	; 0x05
     a74:	e8 d2       	rcall	.+1488   	; 0x1046 <soundReader_getSound>
     a76:	bc 01       	movw	r22, r24
     a78:	f5 01       	movw	r30, r10
     a7a:	86 81       	ldd	r24, Z+6	; 0x06
     a7c:	97 81       	ldd	r25, Z+7	; 0x07
     a7e:	db de       	rcall	.-586    	; 0x836 <currentCondition_setSound>
		
		currentCondition_setTemperature(self->currentCondition,humAndTempReader_getTemperature(self->humAndTempReader));
     a80:	f5 01       	movw	r30, r10
     a82:	82 81       	ldd	r24, Z+2	; 0x02
     a84:	93 81       	ldd	r25, Z+3	; 0x03
     a86:	16 d2       	rcall	.+1068   	; 0xeb4 <humAndTempReader_getTemperature>
     a88:	bc 01       	movw	r22, r24
     a8a:	f5 01       	movw	r30, r10
     a8c:	86 81       	ldd	r24, Z+6	; 0x06
     a8e:	97 81       	ldd	r25, Z+7	; 0x07
     a90:	c6 de       	rcall	.-628    	; 0x81e <currentCondition_setTemperature>
		
		int16_t humidity = humAndTempReader_getHumidity(self->humAndTempReader);
     a92:	f5 01       	movw	r30, r10
     a94:	82 81       	ldd	r24, Z+2	; 0x02
     a96:	93 81       	ldd	r25, Z+3	; 0x03
     a98:	09 d2       	rcall	.+1042   	; 0xeac <humAndTempReader_getHumidity>
     a9a:	bc 01       	movw	r22, r24
		currentCondition_setHumidity(self->currentCondition, humidity);
     a9c:	f5 01       	movw	r30, r10
     a9e:	86 81       	ldd	r24, Z+6	; 0x06
     aa0:	97 81       	ldd	r25, Z+7	; 0x07
     aa2:	b3 de       	rcall	.-666    	; 0x80a <currentCondition_setHumidity>
     aa4:	f5 01       	movw	r30, r10
		
		//printf("device got done bit\n");
		
		printf("CO2 is: %u\n", co2Reader_getCO2(self->co2reader));
     aa6:	80 81       	ld	r24, Z
     aa8:	91 81       	ldd	r25, Z+1	; 0x01
     aaa:	e9 dd       	rcall	.-1070   	; 0x67e <co2Reader_getCO2>
     aac:	9f 93       	push	r25
     aae:	8f 93       	push	r24
     ab0:	83 e8       	ldi	r24, 0x83	; 131
     ab2:	92 e0       	ldi	r25, 0x02	; 2
     ab4:	9f 93       	push	r25
     ab6:	8f 93       	push	r24
     ab8:	0e 94 70 31 	call	0x62e0	; 0x62e0 <printf>
     abc:	f5 01       	movw	r30, r10
		printf("Temperature is: %d\n", humAndTempReader_getTemperature(self->humAndTempReader));
     abe:	82 81       	ldd	r24, Z+2	; 0x02
     ac0:	93 81       	ldd	r25, Z+3	; 0x03
     ac2:	f8 d1       	rcall	.+1008   	; 0xeb4 <humAndTempReader_getTemperature>
     ac4:	9f 93       	push	r25
     ac6:	8f 93       	push	r24
     ac8:	8f e8       	ldi	r24, 0x8F	; 143
     aca:	92 e0       	ldi	r25, 0x02	; 2
     acc:	9f 93       	push	r25
     ace:	8f 93       	push	r24
     ad0:	0e 94 70 31 	call	0x62e0	; 0x62e0 <printf>
     ad4:	f5 01       	movw	r30, r10
		printf("Humidity is: %u\n", humAndTempReader_getHumidity(self->humAndTempReader));
     ad6:	82 81       	ldd	r24, Z+2	; 0x02
     ad8:	93 81       	ldd	r25, Z+3	; 0x03
     ada:	e8 d1       	rcall	.+976    	; 0xeac <humAndTempReader_getHumidity>
     adc:	9f 93       	push	r25
     ade:	8f 93       	push	r24
     ae0:	83 ea       	ldi	r24, 0xA3	; 163
     ae2:	92 e0       	ldi	r25, 0x02	; 2
     ae4:	9f 93       	push	r25
     ae6:	8f 93       	push	r24
     ae8:	0e 94 70 31 	call	0x62e0	; 0x62e0 <printf>
     aec:	f5 01       	movw	r30, r10
		printf("Sound is: %u\n", soundReader_getSound(self->soundReader));
     aee:	84 81       	ldd	r24, Z+4	; 0x04
     af0:	95 81       	ldd	r25, Z+5	; 0x05
     af2:	a9 d2       	rcall	.+1362   	; 0x1046 <soundReader_getSound>
     af4:	9f 93       	push	r25
     af6:	8f 93       	push	r24
     af8:	84 eb       	ldi	r24, 0xB4	; 180
     afa:	92 e0       	ldi	r25, 0x02	; 2
     afc:	9f 93       	push	r25
     afe:	8f 93       	push	r24
     b00:	0e 94 70 31 	call	0x62e0	; 0x62e0 <printf>
     b04:	f5 01       	movw	r30, r10
     b06:	66 81       	ldd	r22, Z+6	; 0x06
		
		/*Perhaps loraPayload is not a good idea to be here*/
		_uplink_payload = getcurrentConditionPayload(self->currentCondition);
     b08:	77 81       	ldd	r23, Z+7	; 0x07
     b0a:	ce 01       	movw	r24, r28
     b0c:	01 96       	adiw	r24, 0x01	; 1
     b0e:	9c de       	rcall	.-712    	; 0x848 <getcurrentConditionPayload>
     b10:	86 e1       	ldi	r24, 0x16	; 22
     b12:	fe 01       	movw	r30, r28
     b14:	31 96       	adiw	r30, 0x01	; 1
     b16:	a0 ed       	ldi	r26, 0xD0	; 208
     b18:	b7 e0       	ldi	r27, 0x07	; 7
     b1a:	01 90       	ld	r0, Z+
     b1c:	0d 92       	st	X+, r0
     b1e:	8a 95       	dec	r24
     b20:	e1 f7       	brne	.-8      	; 0xb1a <device_startMeasuring+0x178>
     b22:	0f ef       	ldi	r16, 0xFF	; 255
     b24:	1f ef       	ldi	r17, 0xFF	; 255
     b26:	98 01       	movw	r18, r16
		
		xMessageBufferSend(_uplinkmessageBuffer,(void*) &_uplink_payload,sizeof(_uplink_payload),portMAX_DELAY);
     b28:	46 e1       	ldi	r20, 0x16	; 22
     b2a:	50 e0       	ldi	r21, 0x00	; 0
     b2c:	60 ed       	ldi	r22, 0xD0	; 208
     b2e:	77 e0       	ldi	r23, 0x07	; 7
     b30:	80 91 e6 07 	lds	r24, 0x07E6	; 0x8007e6 <_uplinkmessageBuffer>
     b34:	90 91 e7 07 	lds	r25, 0x07E7	; 0x8007e7 <_uplinkmessageBuffer+0x1>
     b38:	0e 94 25 13 	call	0x264a	; 0x264a <xStreamBufferSend>
     b3c:	60 ed       	ldi	r22, 0xD0	; 208
     b3e:	77 e0       	ldi	r23, 0x07	; 7
     b40:	80 e0       	ldi	r24, 0x00	; 0
		vTaskDelay(2000);
     b42:	90 e0       	ldi	r25, 0x00	; 0
     b44:	0e 94 17 18 	call	0x302e	; 0x302e <vTaskDelay>
     b48:	0f b6       	in	r0, 0x3f	; 63
     b4a:	f8 94       	cli
     b4c:	de bf       	out	0x3e, r29	; 62
     b4e:	0f be       	out	0x3f, r0	; 63
     b50:	cd bf       	out	0x3d, r28	; 61
     b52:	22 c0       	rjmp	.+68     	; 0xb98 <device_startMeasuring+0x1f6>
     b54:	68 e8       	ldi	r22, 0x88	; 136
     b56:	73 e1       	ldi	r23, 0x13	; 19
	//if the device is not on, wait a bit and check if anything is changed
	}
	else
	{
		//put 30 000 for 5 mins
		vTaskDelay(5000);
     b58:	80 e0       	ldi	r24, 0x00	; 0
     b5a:	90 e0       	ldi	r25, 0x00	; 0
     b5c:	0e 94 17 18 	call	0x302e	; 0x302e <vTaskDelay>
     b60:	f5 01       	movw	r30, r10
     b62:	66 81       	ldd	r22, Z+6	; 0x06
		_uplink_payload = getSimplePayload(self->currentCondition);
     b64:	77 81       	ldd	r23, Z+7	; 0x07
     b66:	ce 01       	movw	r24, r28
     b68:	01 96       	adiw	r24, 0x01	; 1
     b6a:	93 de       	rcall	.-730    	; 0x892 <getSimplePayload>
     b6c:	86 e1       	ldi	r24, 0x16	; 22
     b6e:	fe 01       	movw	r30, r28
     b70:	31 96       	adiw	r30, 0x01	; 1
     b72:	a0 ed       	ldi	r26, 0xD0	; 208
     b74:	b7 e0       	ldi	r27, 0x07	; 7
     b76:	01 90       	ld	r0, Z+
     b78:	0d 92       	st	X+, r0
     b7a:	8a 95       	dec	r24
     b7c:	e1 f7       	brne	.-8      	; 0xb76 <device_startMeasuring+0x1d4>
     b7e:	0f ef       	ldi	r16, 0xFF	; 255
     b80:	1f ef       	ldi	r17, 0xFF	; 255
     b82:	98 01       	movw	r18, r16
		xMessageBufferSend(_uplinkmessageBuffer,(void*) &_uplink_payload,sizeof(_uplink_payload),portMAX_DELAY);
     b84:	46 e1       	ldi	r20, 0x16	; 22
     b86:	50 e0       	ldi	r21, 0x00	; 0
     b88:	60 ed       	ldi	r22, 0xD0	; 208
     b8a:	77 e0       	ldi	r23, 0x07	; 7
     b8c:	80 91 e6 07 	lds	r24, 0x07E6	; 0x8007e6 <_uplinkmessageBuffer>
     b90:	90 91 e7 07 	lds	r25, 0x07E7	; 0x8007e7 <_uplinkmessageBuffer+0x1>
     b94:	0e 94 25 13 	call	0x264a	; 0x264a <xStreamBufferSend>
     b98:	66 96       	adiw	r28, 0x16	; 22
     b9a:	0f b6       	in	r0, 0x3f	; 63
     b9c:	f8 94       	cli
	} 
}
     b9e:	de bf       	out	0x3e, r29	; 62
     ba0:	0f be       	out	0x3f, r0	; 63
     ba2:	cd bf       	out	0x3d, r28	; 61
     ba4:	df 91       	pop	r29
     ba6:	cf 91       	pop	r28
     ba8:	1f 91       	pop	r17
     baa:	0f 91       	pop	r16
     bac:	ff 90       	pop	r15
     bae:	ef 90       	pop	r14
     bb0:	df 90       	pop	r13
     bb2:	cf 90       	pop	r12
     bb4:	bf 90       	pop	r11
     bb6:	af 90       	pop	r10
     bb8:	08 95       	ret

00000bba <device_executeTask>:
     bba:	ec 01       	movw	r28, r24
     bbc:	ce 01       	movw	r24, r28
     bbe:	f1 de       	rcall	.-542    	; 0x9a2 <device_startMeasuring>

//devided so we can test
void device_executeTask(void* self) {
	for (;;)
	{
		device_startMeasuring((device_t)self);
     bc0:	fd cf       	rjmp	.-6      	; 0xbbc <device_executeTask+0x2>

00000bc2 <lora_DownLinkHandler_create>:
		
	}
}

void lora_DownLinkHandler_create(UBaseType_t lora_handler_task_priority, MessageBufferHandle_t xMessageBuffer)
{
     bc2:	ef 92       	push	r14
     bc4:	ff 92       	push	r15
     bc6:	0f 93       	push	r16
     bc8:	9b 01       	movw	r18, r22
	
	//_isSet=isSet;
	xTaskCreate(
     bca:	e1 2c       	mov	r14, r1
     bcc:	f1 2c       	mov	r15, r1
     bce:	08 2f       	mov	r16, r24
     bd0:	48 e8       	ldi	r20, 0x88	; 136
     bd2:	51 e0       	ldi	r21, 0x01	; 1
     bd4:	62 ec       	ldi	r22, 0xC2	; 194
     bd6:	72 e0       	ldi	r23, 0x02	; 2
     bd8:	87 e8       	ldi	r24, 0x87	; 135
     bda:	96 e0       	ldi	r25, 0x06	; 6
     bdc:	0e 94 55 15 	call	0x2aaa	; 0x2aaa <xTaskCreate>
	,  configMINIMAL_STACK_SIZE+200  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  xMessageBuffer
	,  lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
	
}
     be0:	0f 91       	pop	r16
     be2:	ff 90       	pop	r15
     be4:	ef 90       	pop	r14
     be6:	08 95       	ret

00000be8 <lora_DownLinkHandler_task>:


	void lora_DownLinkHandler_task(MessageBufferHandle_t xMessageBuffer)
	{
     be8:	0f 93       	push	r16
     bea:	1f 93       	push	r17
     bec:	cf 93       	push	r28
     bee:	df 93       	push	r29
				
		//size_t xBytesReceived;
		//xBytesReceived = 
		xMessageBufferReceive(xMessageBuffer,(void*) &_downlink_payload,sizeof(lora_payload_t),portMAX_DELAY);
     bf0:	0f ef       	ldi	r16, 0xFF	; 255
     bf2:	1f ef       	ldi	r17, 0xFF	; 255
     bf4:	98 01       	movw	r18, r16
     bf6:	46 e1       	ldi	r20, 0x16	; 22
     bf8:	50 e0       	ldi	r21, 0x00	; 0
     bfa:	64 ef       	ldi	r22, 0xF4	; 244
     bfc:	77 e0       	ldi	r23, 0x07	; 7
     bfe:	0e 94 12 14 	call	0x2824	; 0x2824 <xStreamBufferReceive>
		printf("PayLoad bytes are: %d, %d\n Payload lenght is %d\n", _downlink_payload.bytes[0] ,_downlink_payload.bytes[1],_downlink_payload.len);
     c02:	c4 ef       	ldi	r28, 0xF4	; 244
     c04:	d7 e0       	ldi	r29, 0x07	; 7
     c06:	89 81       	ldd	r24, Y+1	; 0x01
     c08:	1f 92       	push	r1
     c0a:	8f 93       	push	r24
     c0c:	8b 81       	ldd	r24, Y+3	; 0x03
     c0e:	1f 92       	push	r1
     c10:	8f 93       	push	r24
     c12:	8a 81       	ldd	r24, Y+2	; 0x02
     c14:	1f 92       	push	r1
     c16:	8f 93       	push	r24
     c18:	8b ec       	ldi	r24, 0xCB	; 203
     c1a:	92 e0       	ldi	r25, 0x02	; 2
     c1c:	9f 93       	push	r25
     c1e:	8f 93       	push	r24
     c20:	0e 94 70 31 	call	0x62e0	; 0x62e0 <printf>
		
		//Two bytes eg. 44/33
		if(_downlink_payload.len==2)
     c24:	8d b7       	in	r24, 0x3d	; 61
     c26:	9e b7       	in	r25, 0x3e	; 62
     c28:	08 96       	adiw	r24, 0x08	; 8
     c2a:	0f b6       	in	r0, 0x3f	; 63
     c2c:	f8 94       	cli
     c2e:	9e bf       	out	0x3e, r25	; 62
     c30:	0f be       	out	0x3f, r0	; 63
     c32:	8d bf       	out	0x3d, r24	; 61
     c34:	89 81       	ldd	r24, Y+1	; 0x01
     c36:	82 30       	cpi	r24, 0x02	; 2
     c38:	09 f0       	breq	.+2      	; 0xc3c <lora_DownLinkHandler_task+0x54>
     c3a:	64 c0       	rjmp	.+200    	; 0xd04 <lora_DownLinkHandler_task+0x11c>
		{
			uint8_t command = _downlink_payload.bytes[0] + _downlink_payload.bytes[1];
     c3c:	fe 01       	movw	r30, r28
     c3e:	ca 81       	ldd	r28, Y+2	; 0x02
     c40:	83 81       	ldd	r24, Z+3	; 0x03
     c42:	c8 0f       	add	r28, r24
			bool* value = pvPortMalloc(sizeof(bool));
     c44:	81 e0       	ldi	r24, 0x01	; 1
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	fc d4       	rcall	.+2552   	; 0x1642 <pvPortMalloc>
     c4a:	8c 01       	movw	r16, r24
			
		
			switch(command)
     c4c:	c5 37       	cpi	r28, 0x75	; 117
     c4e:	e9 f0       	breq	.+58     	; 0xc8a <lora_DownLinkHandler_task+0xa2>
     c50:	18 f4       	brcc	.+6      	; 0xc58 <lora_DownLinkHandler_task+0x70>
     c52:	c4 37       	cpi	r28, 0x74	; 116
     c54:	39 f0       	breq	.+14     	; 0xc64 <lora_DownLinkHandler_task+0x7c>
     c56:	52 c0       	rjmp	.+164    	; 0xcfc <lora_DownLinkHandler_task+0x114>
     c58:	c6 38       	cpi	r28, 0x86	; 134
     c5a:	51 f1       	breq	.+84     	; 0xcb0 <lora_DownLinkHandler_task+0xc8>
     c5c:	c7 38       	cpi	r28, 0x87	; 135
     c5e:	09 f4       	brne	.+2      	; 0xc62 <lora_DownLinkHandler_task+0x7a>
     c60:	3a c0       	rjmp	.+116    	; 0xcd6 <lora_DownLinkHandler_task+0xee>
     c62:	4c c0       	rjmp	.+152    	; 0xcfc <lora_DownLinkHandler_task+0x114>
			{
			//D0
			case 0x74:
				configuration_setWorking(false);
     c64:	80 e0       	ldi	r24, 0x00	; 0
     c66:	19 dd       	rcall	.-1486   	; 0x69a <configuration_setWorking>
				configuration_getWorking(value);
     c68:	c8 01       	movw	r24, r16
     c6a:	3b dd       	rcall	.-1418   	; 0x6e2 <configuration_getWorking>
     c6c:	f8 01       	movw	r30, r16
				printf("The bool for device is set to %d\n",*value);
     c6e:	80 81       	ld	r24, Z
     c70:	1f 92       	push	r1
     c72:	8f 93       	push	r24
     c74:	8c ef       	ldi	r24, 0xFC	; 252
     c76:	92 e0       	ldi	r25, 0x02	; 2
     c78:	9f 93       	push	r25
     c7a:	8f 93       	push	r24
     c7c:	0e 94 70 31 	call	0x62e0	; 0x62e0 <printf>
     c80:	0f 90       	pop	r0
				break;
     c82:	0f 90       	pop	r0
     c84:	0f 90       	pop	r0
     c86:	0f 90       	pop	r0
     c88:	3d c0       	rjmp	.+122    	; 0xd04 <lora_DownLinkHandler_task+0x11c>
			//D1
			case 0x75 :
				configuration_setWorking(true);
     c8a:	81 e0       	ldi	r24, 0x01	; 1
     c8c:	06 dd       	rcall	.-1524   	; 0x69a <configuration_setWorking>
				configuration_getWorking(value);
     c8e:	c8 01       	movw	r24, r16
     c90:	28 dd       	rcall	.-1456   	; 0x6e2 <configuration_getWorking>
     c92:	f8 01       	movw	r30, r16
				printf("The bool for device is set to %d\n",*value);
     c94:	80 81       	ld	r24, Z
     c96:	1f 92       	push	r1
     c98:	8f 93       	push	r24
     c9a:	8c ef       	ldi	r24, 0xFC	; 252
     c9c:	92 e0       	ldi	r25, 0x02	; 2
     c9e:	9f 93       	push	r25
     ca0:	8f 93       	push	r24
     ca2:	0e 94 70 31 	call	0x62e0	; 0x62e0 <printf>
     ca6:	0f 90       	pop	r0
				break;
     ca8:	0f 90       	pop	r0
     caa:	0f 90       	pop	r0
     cac:	0f 90       	pop	r0
			//V0
			case 0x86:
				configuration_setVentilation(false);
     cae:	2a c0       	rjmp	.+84     	; 0xd04 <lora_DownLinkHandler_task+0x11c>
     cb0:	80 e0       	ldi	r24, 0x00	; 0
     cb2:	40 dd       	rcall	.-1408   	; 0x734 <configuration_setVentilation>
				configuration_getVentilation(value);
     cb4:	c8 01       	movw	r24, r16
     cb6:	62 dd       	rcall	.-1340   	; 0x77c <configuration_getVentilation>
     cb8:	f8 01       	movw	r30, r16
				printf("The bool for ventilation is set to %d\n",*value);
     cba:	80 81       	ld	r24, Z
     cbc:	1f 92       	push	r1
     cbe:	8f 93       	push	r24
     cc0:	8e e1       	ldi	r24, 0x1E	; 30
     cc2:	93 e0       	ldi	r25, 0x03	; 3
     cc4:	9f 93       	push	r25
     cc6:	8f 93       	push	r24
     cc8:	0e 94 70 31 	call	0x62e0	; 0x62e0 <printf>
			break;
     ccc:	0f 90       	pop	r0
     cce:	0f 90       	pop	r0
     cd0:	0f 90       	pop	r0
     cd2:	0f 90       	pop	r0
			//V1
			case 0x87:
				configuration_setVentilation(true);
     cd4:	17 c0       	rjmp	.+46     	; 0xd04 <lora_DownLinkHandler_task+0x11c>
     cd6:	81 e0       	ldi	r24, 0x01	; 1
     cd8:	2d dd       	rcall	.-1446   	; 0x734 <configuration_setVentilation>
				configuration_getVentilation(value);
     cda:	c8 01       	movw	r24, r16
     cdc:	4f dd       	rcall	.-1378   	; 0x77c <configuration_getVentilation>
     cde:	f8 01       	movw	r30, r16
				printf("The bool for ventilation is set to %d\n",*value);
     ce0:	80 81       	ld	r24, Z
     ce2:	1f 92       	push	r1
     ce4:	8f 93       	push	r24
     ce6:	8e e1       	ldi	r24, 0x1E	; 30
     ce8:	93 e0       	ldi	r25, 0x03	; 3
     cea:	9f 93       	push	r25
     cec:	8f 93       	push	r24
     cee:	0e 94 70 31 	call	0x62e0	; 0x62e0 <printf>
     cf2:	0f 90       	pop	r0
				break;
     cf4:	0f 90       	pop	r0
     cf6:	0f 90       	pop	r0
     cf8:	0f 90       	pop	r0
     cfa:	04 c0       	rjmp	.+8      	; 0xd04 <lora_DownLinkHandler_task+0x11c>
     cfc:	85 e4       	ldi	r24, 0x45	; 69
			default:
				printf("Invalid command\n");
     cfe:	93 e0       	ldi	r25, 0x03	; 3
     d00:	0e 94 83 31 	call	0x6306	; 0x6306 <puts>
     d04:	df 91       	pop	r29
				break;
		}
	}
						
}
     d06:	cf 91       	pop	r28
     d08:	1f 91       	pop	r17
     d0a:	0f 91       	pop	r16
     d0c:	08 95       	ret

00000d0e <lora_DownLinkHandler_startTask>:
     d0e:	ec 01       	movw	r28, r24
//int16_t temperature_setting; // Temperature

void lora_DownLinkHandler_startTask(void* xMessageBuffer){
	for(;;)
	{
		lora_DownLinkHandler_task((MessageBufferHandle_t)xMessageBuffer);
     d10:	ce 01       	movw	r24, r28
     d12:	6a df       	rcall	.-300    	; 0xbe8 <lora_DownLinkHandler_task>
     d14:	fd cf       	rjmp	.-6      	; 0xd10 <lora_DownLinkHandler_startTask+0x2>

00000d16 <humAndTempReader_create>:
		return;

	//delete will clear the allocated memory to the task + we need to remove everything else
	vTaskDelete(self->handleTask);
	free(self);
}
     d16:	2f 92       	push	r2
     d18:	3f 92       	push	r3
     d1a:	4f 92       	push	r4
     d1c:	5f 92       	push	r5
     d1e:	6f 92       	push	r6
     d20:	7f 92       	push	r7
     d22:	8f 92       	push	r8
     d24:	9f 92       	push	r9
     d26:	af 92       	push	r10
     d28:	bf 92       	push	r11
     d2a:	cf 92       	push	r12
     d2c:	df 92       	push	r13
     d2e:	ef 92       	push	r14
     d30:	ff 92       	push	r15
     d32:	0f 93       	push	r16
     d34:	1f 93       	push	r17
     d36:	cf 93       	push	r28
     d38:	df 93       	push	r29
     d3a:	88 2e       	mov	r8, r24
     d3c:	96 2e       	mov	r9, r22
     d3e:	1a 01       	movw	r2, r20
     d40:	28 01       	movw	r4, r16
     d42:	39 01       	movw	r6, r18
     d44:	66 e0       	ldi	r22, 0x06	; 6
     d46:	70 e0       	ldi	r23, 0x00	; 0
     d48:	81 e0       	ldi	r24, 0x01	; 1
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	0e 94 7d 2f 	call	0x5efa	; 0x5efa <calloc>
     d50:	ec 01       	movw	r28, r24
     d52:	00 97       	sbiw	r24, 0x00	; 0
     d54:	61 f1       	breq	.+88     	; 0xdae <humAndTempReader_create+0x98>
     d56:	19 82       	std	Y+1, r1	; 0x01
     d58:	18 82       	st	Y, r1
     d5a:	1b 82       	std	Y+3, r1	; 0x03
     d5c:	1a 82       	std	Y+2, r1	; 0x02
     d5e:	30 92 15 08 	sts	0x0815, r3	; 0x800815 <_startMeasureEventGroup+0x1>
     d62:	20 92 14 08 	sts	0x0814, r2	; 0x800814 <_startMeasureEventGroup>
     d66:	40 92 10 08 	sts	0x0810, r4	; 0x800810 <_startMeasureBit>
     d6a:	50 92 11 08 	sts	0x0811, r5	; 0x800811 <_startMeasureBit+0x1>
     d6e:	60 92 12 08 	sts	0x0812, r6	; 0x800812 <_startMeasureBit+0x2>
     d72:	70 92 13 08 	sts	0x0813, r7	; 0x800813 <_startMeasureBit+0x3>
     d76:	f0 92 0f 08 	sts	0x080F, r15	; 0x80080f <_readyEventGroup+0x1>
     d7a:	e0 92 0e 08 	sts	0x080E, r14	; 0x80080e <_readyEventGroup>
     d7e:	a0 92 0a 08 	sts	0x080A, r10	; 0x80080a <_readyBit>
     d82:	b0 92 0b 08 	sts	0x080B, r11	; 0x80080b <_readyBit+0x1>
     d86:	c0 92 0c 08 	sts	0x080C, r12	; 0x80080c <_readyBit+0x2>
     d8a:	d0 92 0d 08 	sts	0x080D, r13	; 0x80080d <_readyBit+0x3>
     d8e:	49 2d       	mov	r20, r9
     d90:	50 e0       	ldi	r21, 0x00	; 0
     d92:	48 53       	subi	r20, 0x38	; 56
     d94:	5f 4f       	sbci	r21, 0xFF	; 255
     d96:	7c 01       	movw	r14, r24
     d98:	84 e0       	ldi	r24, 0x04	; 4
     d9a:	e8 0e       	add	r14, r24
     d9c:	f1 1c       	adc	r15, r1
     d9e:	08 2d       	mov	r16, r8
     da0:	9e 01       	movw	r18, r28
     da2:	65 e5       	ldi	r22, 0x55	; 85
     da4:	73 e0       	ldi	r23, 0x03	; 3
     da6:	82 e5       	ldi	r24, 0x52	; 82
     da8:	97 e0       	ldi	r25, 0x07	; 7
     daa:	0e 94 55 15 	call	0x2aaa	; 0x2aaa <xTaskCreate>
     dae:	ce 01       	movw	r24, r28
     db0:	df 91       	pop	r29
     db2:	cf 91       	pop	r28
     db4:	1f 91       	pop	r17
     db6:	0f 91       	pop	r16
     db8:	ff 90       	pop	r15
     dba:	ef 90       	pop	r14
     dbc:	df 90       	pop	r13
     dbe:	cf 90       	pop	r12
     dc0:	bf 90       	pop	r11
     dc2:	af 90       	pop	r10
     dc4:	9f 90       	pop	r9
     dc6:	8f 90       	pop	r8
     dc8:	7f 90       	pop	r7
     dca:	6f 90       	pop	r6
     dcc:	5f 90       	pop	r5
     dce:	4f 90       	pop	r4
     dd0:	3f 90       	pop	r3
     dd2:	2f 90       	pop	r2
     dd4:	08 95       	ret

00000dd6 <humAndTempReader_measure>:



void humAndTempReader_measure(humAndTempReader_t self) {//dummy
     dd6:	cf 92       	push	r12
     dd8:	df 92       	push	r13
     dda:	ef 92       	push	r14
     ddc:	ff 92       	push	r15
     dde:	0f 93       	push	r16
     de0:	1f 93       	push	r17
     de2:	cf 93       	push	r28
     de4:	df 93       	push	r29
     de6:	ec 01       	movw	r28, r24
	EventBits_t uxBits = xEventGroupWaitBits(_startMeasureEventGroup, //eventGroup
     de8:	40 91 10 08 	lds	r20, 0x0810	; 0x800810 <_startMeasureBit>
     dec:	50 91 11 08 	lds	r21, 0x0811	; 0x800811 <_startMeasureBit+0x1>
     df0:	60 91 12 08 	lds	r22, 0x0812	; 0x800812 <_startMeasureBit+0x2>
     df4:	70 91 13 08 	lds	r23, 0x0813	; 0x800813 <_startMeasureBit+0x3>
     df8:	cc 24       	eor	r12, r12
     dfa:	ca 94       	dec	r12
     dfc:	dc 2c       	mov	r13, r12
     dfe:	76 01       	movw	r14, r12
     e00:	01 e0       	ldi	r16, 0x01	; 1
     e02:	21 e0       	ldi	r18, 0x01	; 1
     e04:	80 91 14 08 	lds	r24, 0x0814	; 0x800814 <_startMeasureEventGroup>
     e08:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <_startMeasureEventGroup+0x1>
     e0c:	74 d2       	rcall	.+1256   	; 0x12f6 <xEventGroupWaitBits>
	_startMeasureBit, //bits it is interested i
	pdTRUE, //clears the bits
	pdTRUE, //waits for both bits to be set
	portMAX_DELAY); //wait

	if ((uxBits & (_startMeasureBit)) == (_startMeasureBit)) {
     e0e:	00 91 10 08 	lds	r16, 0x0810	; 0x800810 <_startMeasureBit>
     e12:	10 91 11 08 	lds	r17, 0x0811	; 0x800811 <_startMeasureBit+0x1>
     e16:	20 91 12 08 	lds	r18, 0x0812	; 0x800812 <_startMeasureBit+0x2>
     e1a:	30 91 13 08 	lds	r19, 0x0813	; 0x800813 <_startMeasureBit+0x3>
     e1e:	dc 01       	movw	r26, r24
     e20:	cb 01       	movw	r24, r22
     e22:	80 23       	and	r24, r16
     e24:	91 23       	and	r25, r17
     e26:	a2 23       	and	r26, r18
     e28:	b3 23       	and	r27, r19
     e2a:	08 17       	cp	r16, r24
     e2c:	19 07       	cpc	r17, r25
     e2e:	2a 07       	cpc	r18, r26
     e30:	3b 07       	cpc	r19, r27
     e32:	79 f5       	brne	.+94     	; 0xe92 <humAndTempReader_measure+0xbc>
		hih8120Wakeup();
     e34:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <hih8120Wakeup>
		vTaskDelay(50);
     e38:	62 e3       	ldi	r22, 0x32	; 50
     e3a:	70 e0       	ldi	r23, 0x00	; 0
     e3c:	80 e0       	ldi	r24, 0x00	; 0
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	0e 94 17 18 	call	0x302e	; 0x302e <vTaskDelay>
		hih8120Meassure();
     e44:	0e 94 f5 1f 	call	0x3fea	; 0x3fea <hih8120Meassure>
		vTaskDelay(5);
     e48:	65 e0       	ldi	r22, 0x05	; 5
     e4a:	70 e0       	ldi	r23, 0x00	; 0
     e4c:	80 e0       	ldi	r24, 0x00	; 0
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	0e 94 17 18 	call	0x302e	; 0x302e <vTaskDelay>
		if(hih8120IsReady())
     e54:	0e 94 dd 1f 	call	0x3fba	; 0x3fba <hih8120IsReady>
     e58:	88 23       	and	r24, r24
     e5a:	41 f0       	breq	.+16     	; 0xe6c <humAndTempReader_measure+0x96>
		{
			self->humidity = hih8120GetHumidityPercent_x10();
     e5c:	0e 94 1b 20 	call	0x4036	; 0x4036 <hih8120GetHumidityPercent_x10>
     e60:	99 83       	std	Y+1, r25	; 0x01
     e62:	88 83       	st	Y, r24
			self->temperature = hih8120GetTemperature_x10();
     e64:	0e 94 41 20 	call	0x4082	; 0x4082 <hih8120GetTemperature_x10>
     e68:	9b 83       	std	Y+3, r25	; 0x03
     e6a:	8a 83       	std	Y+2, r24	; 0x02
			//printf("humidity and temperature done bit set\n");
		}
		
		vTaskDelay(1000);
     e6c:	68 ee       	ldi	r22, 0xE8	; 232
     e6e:	73 e0       	ldi	r23, 0x03	; 3
     e70:	80 e0       	ldi	r24, 0x00	; 0
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	0e 94 17 18 	call	0x302e	; 0x302e <vTaskDelay>
		//set done bit so that device knows meassurement is done
		xEventGroupSetBits(_readyEventGroup, _readyBit);
     e78:	40 91 0a 08 	lds	r20, 0x080A	; 0x80080a <_readyBit>
     e7c:	50 91 0b 08 	lds	r21, 0x080B	; 0x80080b <_readyBit+0x1>
     e80:	60 91 0c 08 	lds	r22, 0x080C	; 0x80080c <_readyBit+0x2>
     e84:	70 91 0d 08 	lds	r23, 0x080D	; 0x80080d <_readyBit+0x3>
     e88:	80 91 0e 08 	lds	r24, 0x080E	; 0x80080e <_readyEventGroup>
     e8c:	90 91 0f 08 	lds	r25, 0x080F	; 0x80080f <_readyEventGroup+0x1>
     e90:	f2 d2       	rcall	.+1508   	; 0x1476 <xEventGroupSetBits>
	}
}
     e92:	df 91       	pop	r29
     e94:	cf 91       	pop	r28
     e96:	1f 91       	pop	r17
     e98:	0f 91       	pop	r16
     e9a:	ff 90       	pop	r15
     e9c:	ef 90       	pop	r14
     e9e:	df 90       	pop	r13
     ea0:	cf 90       	pop	r12
     ea2:	08 95       	ret

00000ea4 <humAndTempReader_executeTask>:
	int16_t temperature;
	TaskHandle_t handleTask;
}humidityAndTemperature;

//actual task, methods devided so that it is possible to test
void humAndTempReader_executeTask(void* self) {
     ea4:	ec 01       	movw	r28, r24
	for (;;) {
		humAndTempReader_measure((humAndTempReader_t)self);
     ea6:	ce 01       	movw	r24, r28
     ea8:	96 df       	rcall	.-212    	; 0xdd6 <humAndTempReader_measure>
     eaa:	fd cf       	rjmp	.-6      	; 0xea6 <humAndTempReader_executeTask+0x2>

00000eac <humAndTempReader_getHumidity>:
	}
}

uint16_t humAndTempReader_getHumidity(humAndTempReader_t self){
	return self->humidity;
}
     eac:	fc 01       	movw	r30, r24
     eae:	80 81       	ld	r24, Z
     eb0:	91 81       	ldd	r25, Z+1	; 0x01
     eb2:	08 95       	ret

00000eb4 <humAndTempReader_getTemperature>:

int16_t humAndTempReader_getTemperature(humAndTempReader_t self){
	return self->temperature;
}
     eb4:	fc 01       	movw	r30, r24
     eb6:	82 81       	ldd	r24, Z+2	; 0x02
     eb8:	93 81       	ldd	r25, Z+3	; 0x03
     eba:	08 95       	ret

00000ebc <servo_initialise>:
#include "Servo.h"


void servo_initialise()
{
	rcServoCreate();		
     ebc:	0c 94 a1 27 	jmp	0x4f42	; 0x4f42 <rcServoCreate>
     ec0:	08 95       	ret

00000ec2 <servo_open>:
	//printf("Servo is up\n");
}

void servo_open()
{
	rcServoSet(0, 100);
     ec2:	64 e6       	ldi	r22, 0x64	; 100
     ec4:	80 e0       	ldi	r24, 0x00	; 0
     ec6:	0c 94 89 27 	jmp	0x4f12	; 0x4f12 <rcServoSet>
     eca:	08 95       	ret

00000ecc <servo_close>:
}
void servo_close()
{
	rcServoSet(0, -100);
     ecc:	6c e9       	ldi	r22, 0x9C	; 156
     ece:	80 e0       	ldi	r24, 0x00	; 0
     ed0:	0c 94 89 27 	jmp	0x4f12	; 0x4f12 <rcServoSet>
     ed4:	08 95       	ret

00000ed6 <soundReader_create>:
}



//	RETURN TO DESTROY METHODS
void soundReader_destroy(soundReader_t self) {
     ed6:	2f 92       	push	r2
     ed8:	3f 92       	push	r3
     eda:	4f 92       	push	r4
     edc:	5f 92       	push	r5
     ede:	6f 92       	push	r6
     ee0:	7f 92       	push	r7
     ee2:	8f 92       	push	r8
     ee4:	9f 92       	push	r9
     ee6:	af 92       	push	r10
     ee8:	bf 92       	push	r11
     eea:	cf 92       	push	r12
     eec:	df 92       	push	r13
     eee:	ef 92       	push	r14
     ef0:	ff 92       	push	r15
     ef2:	0f 93       	push	r16
     ef4:	1f 93       	push	r17
     ef6:	cf 93       	push	r28
     ef8:	df 93       	push	r29
     efa:	88 2e       	mov	r8, r24
     efc:	96 2e       	mov	r9, r22
     efe:	1a 01       	movw	r2, r20
     f00:	28 01       	movw	r4, r16
     f02:	39 01       	movw	r6, r18
     f04:	64 e0       	ldi	r22, 0x04	; 4
     f06:	70 e0       	ldi	r23, 0x00	; 0
     f08:	81 e0       	ldi	r24, 0x01	; 1
     f0a:	90 e0       	ldi	r25, 0x00	; 0
     f0c:	0e 94 7d 2f 	call	0x5efa	; 0x5efa <calloc>
     f10:	ec 01       	movw	r28, r24
     f12:	00 97       	sbiw	r24, 0x00	; 0
     f14:	61 f1       	breq	.+88     	; 0xf6e <soundReader_create+0x98>
     f16:	fc 01       	movw	r30, r24
     f18:	11 92       	st	Z+, r1
     f1a:	11 92       	st	Z+, r1
     f1c:	30 92 21 08 	sts	0x0821, r3	; 0x800821 <_startMeasureEventGroup+0x1>
     f20:	20 92 20 08 	sts	0x0820, r2	; 0x800820 <_startMeasureEventGroup>
     f24:	40 92 1c 08 	sts	0x081C, r4	; 0x80081c <_startMeasureBit>
     f28:	50 92 1d 08 	sts	0x081D, r5	; 0x80081d <_startMeasureBit+0x1>
     f2c:	60 92 1e 08 	sts	0x081E, r6	; 0x80081e <_startMeasureBit+0x2>
     f30:	70 92 1f 08 	sts	0x081F, r7	; 0x80081f <_startMeasureBit+0x3>
     f34:	f0 92 1b 08 	sts	0x081B, r15	; 0x80081b <_readyEventGroup+0x1>
     f38:	e0 92 1a 08 	sts	0x081A, r14	; 0x80081a <_readyEventGroup>
     f3c:	a0 92 16 08 	sts	0x0816, r10	; 0x800816 <_readyBit>
     f40:	b0 92 17 08 	sts	0x0817, r11	; 0x800817 <_readyBit+0x1>
     f44:	c0 92 18 08 	sts	0x0818, r12	; 0x800818 <_readyBit+0x2>
     f48:	d0 92 19 08 	sts	0x0819, r13	; 0x800819 <_readyBit+0x3>
     f4c:	49 2d       	mov	r20, r9
     f4e:	50 e0       	ldi	r21, 0x00	; 0
     f50:	48 53       	subi	r20, 0x38	; 56
     f52:	5f 4f       	sbci	r21, 0xFF	; 255
     f54:	7f 01       	movw	r14, r30
     f56:	08 2d       	mov	r16, r8
     f58:	9c 01       	movw	r18, r24
     f5a:	66 e6       	ldi	r22, 0x66	; 102
     f5c:	73 e0       	ldi	r23, 0x03	; 3
     f5e:	8f e1       	ldi	r24, 0x1F	; 31
     f60:	98 e0       	ldi	r25, 0x08	; 8
     f62:	0e 94 55 15 	call	0x2aaa	; 0x2aaa <xTaskCreate>
     f66:	82 e7       	ldi	r24, 0x72	; 114
     f68:	93 e0       	ldi	r25, 0x03	; 3
     f6a:	0e 94 83 31 	call	0x6306	; 0x6306 <puts>
     f6e:	ce 01       	movw	r24, r28
     f70:	df 91       	pop	r29
     f72:	cf 91       	pop	r28
     f74:	1f 91       	pop	r17
     f76:	0f 91       	pop	r16
     f78:	ff 90       	pop	r15
     f7a:	ef 90       	pop	r14
     f7c:	df 90       	pop	r13
     f7e:	cf 90       	pop	r12
     f80:	bf 90       	pop	r11
     f82:	af 90       	pop	r10
     f84:	9f 90       	pop	r9
     f86:	8f 90       	pop	r8
     f88:	7f 90       	pop	r7
     f8a:	6f 90       	pop	r6
     f8c:	5f 90       	pop	r5
     f8e:	4f 90       	pop	r4
     f90:	3f 90       	pop	r3
     f92:	2f 90       	pop	r2
     f94:	08 95       	ret

00000f96 <soundReader_measure>:
}

//actual task, methods devided so that it is possible to test


void soundReader_measure(soundReader_t self) {
     f96:	cf 92       	push	r12
     f98:	df 92       	push	r13
     f9a:	ef 92       	push	r14
     f9c:	ff 92       	push	r15
     f9e:	0f 93       	push	r16
     fa0:	1f 93       	push	r17
     fa2:	cf 93       	push	r28
     fa4:	df 93       	push	r29
     fa6:	ec 01       	movw	r28, r24
	
	EventBits_t uxBits = xEventGroupWaitBits(_startMeasureEventGroup, //eventGroup
     fa8:	40 91 1c 08 	lds	r20, 0x081C	; 0x80081c <_startMeasureBit>
     fac:	50 91 1d 08 	lds	r21, 0x081D	; 0x80081d <_startMeasureBit+0x1>
     fb0:	60 91 1e 08 	lds	r22, 0x081E	; 0x80081e <_startMeasureBit+0x2>
     fb4:	70 91 1f 08 	lds	r23, 0x081F	; 0x80081f <_startMeasureBit+0x3>
     fb8:	cc 24       	eor	r12, r12
     fba:	ca 94       	dec	r12
     fbc:	dc 2c       	mov	r13, r12
     fbe:	76 01       	movw	r14, r12
     fc0:	01 e0       	ldi	r16, 0x01	; 1
     fc2:	21 e0       	ldi	r18, 0x01	; 1
     fc4:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <_startMeasureEventGroup>
     fc8:	90 91 21 08 	lds	r25, 0x0821	; 0x800821 <_startMeasureEventGroup+0x1>
     fcc:	94 d1       	rcall	.+808    	; 0x12f6 <xEventGroupWaitBits>
	_startMeasureBit, //bits it is interested in
	pdTRUE, //clears the bits
	pdTRUE, //waits for both bits to be set
	portMAX_DELAY); //wait

	if ((uxBits & (_startMeasureBit)) == (_startMeasureBit)) {
     fce:	00 91 1c 08 	lds	r16, 0x081C	; 0x80081c <_startMeasureBit>
     fd2:	10 91 1d 08 	lds	r17, 0x081D	; 0x80081d <_startMeasureBit+0x1>
     fd6:	20 91 1e 08 	lds	r18, 0x081E	; 0x80081e <_startMeasureBit+0x2>
     fda:	30 91 1f 08 	lds	r19, 0x081F	; 0x80081f <_startMeasureBit+0x3>
     fde:	dc 01       	movw	r26, r24
     fe0:	cb 01       	movw	r24, r22
     fe2:	80 23       	and	r24, r16
     fe4:	91 23       	and	r25, r17
     fe6:	a2 23       	and	r26, r18
     fe8:	b3 23       	and	r27, r19
     fea:	08 17       	cp	r16, r24
     fec:	19 07       	cpc	r17, r25
     fee:	2a 07       	cpc	r18, r26
     ff0:	3b 07       	cpc	r19, r27
     ff2:	e1 f4       	brne	.+56     	; 0x102c <soundReader_measure+0x96>

		
		srand(time(NULL));
     ff4:	80 e0       	ldi	r24, 0x00	; 0
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	76 da       	rcall	.-2836   	; 0x4e6 <time>
     ffa:	cb 01       	movw	r24, r22
     ffc:	0e 94 02 31 	call	0x6204	; 0x6204 <srand>
		self->value = rand()%105 + 15;
    1000:	0e 94 ff 30 	call	0x61fe	; 0x61fe <rand>
    1004:	69 e6       	ldi	r22, 0x69	; 105
    1006:	70 e0       	ldi	r23, 0x00	; 0
    1008:	0e 94 2c 2f 	call	0x5e58	; 0x5e58 <__divmodhi4>
    100c:	0f 96       	adiw	r24, 0x0f	; 15
    100e:	99 83       	std	Y+1, r25	; 0x01
    1010:	88 83       	st	Y, r24
		
		
		//set done bit so that device knows measurement is done
		xEventGroupSetBits(_readyEventGroup, _readyBit);
    1012:	40 91 16 08 	lds	r20, 0x0816	; 0x800816 <_readyBit>
    1016:	50 91 17 08 	lds	r21, 0x0817	; 0x800817 <_readyBit+0x1>
    101a:	60 91 18 08 	lds	r22, 0x0818	; 0x800818 <_readyBit+0x2>
    101e:	70 91 19 08 	lds	r23, 0x0819	; 0x800819 <_readyBit+0x3>
    1022:	80 91 1a 08 	lds	r24, 0x081A	; 0x80081a <_readyEventGroup>
    1026:	90 91 1b 08 	lds	r25, 0x081B	; 0x80081b <_readyEventGroup+0x1>
    102a:	25 d2       	rcall	.+1098   	; 0x1476 <xEventGroupSetBits>
		//printf("SoundReader done bit set\n");
	}
}
    102c:	df 91       	pop	r29
    102e:	cf 91       	pop	r28
    1030:	1f 91       	pop	r17
    1032:	0f 91       	pop	r16
    1034:	ff 90       	pop	r15
    1036:	ef 90       	pop	r14
    1038:	df 90       	pop	r13
    103a:	cf 90       	pop	r12
    103c:	08 95       	ret

0000103e <soundReader_executeTask>:
	TaskHandle_t handleTask;
}soundReader;



void soundReader_executeTask(void* self) {
    103e:	ec 01       	movw	r28, r24
	for (;;) {
		soundReader_measure((soundReader_t)self);
    1040:	ce 01       	movw	r24, r28
    1042:	a9 df       	rcall	.-174    	; 0xf96 <soundReader_measure>
    1044:	fd cf       	rjmp	.-6      	; 0x1040 <soundReader_executeTask+0x2>

00001046 <soundReader_getSound>:
	}
}

uint16_t soundReader_getSound(soundReader_t self) {
	return self->value;
}
    1046:	fc 01       	movw	r30, r24
    1048:	80 81       	ld	r24, Z
    104a:	91 81       	ldd	r25, Z+1	; 0x01
    104c:	08 95       	ret

0000104e <lora_UpLinkHandler_create>:
	}
}


void lora_UpLinkHandler_create(UBaseType_t lora_handler_task_priority, MessageBufferHandle_t xMessageBuffer)
{
    104e:	ef 92       	push	r14
    1050:	ff 92       	push	r15
    1052:	0f 93       	push	r16
    1054:	9b 01       	movw	r18, r22
	_buffer = xMessageBuffer;
	
	
	
	xTaskCreate(
    1056:	e1 2c       	mov	r14, r1
    1058:	f1 2c       	mov	r15, r1
    105a:	08 2f       	mov	r16, r24
    105c:	48 e8       	ldi	r20, 0x88	; 136
    105e:	51 e0       	ldi	r21, 0x01	; 1
    1060:	61 e8       	ldi	r22, 0x81	; 129
    1062:	73 e0       	ldi	r23, 0x03	; 3
    1064:	8e e4       	ldi	r24, 0x4E	; 78
    1066:	99 e0       	ldi	r25, 0x09	; 9
    1068:	0e 94 55 15 	call	0x2aaa	; 0x2aaa <xTaskCreate>
	,  (const portCHAR *)"LRUpHand"  // A name just for humans
	,  configMINIMAL_STACK_SIZE+200  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  xMessageBuffer
	,  lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}
    106c:	0f 91       	pop	r16
    106e:	ff 90       	pop	r15
    1070:	ef 90       	pop	r14
    1072:	08 95       	ret

00001074 <lora_UpLinkHandler_task>:
	
	/*Receives message from message buffer shared between it and the application responsible for gathering the data
	--> Should be called every 5 minutes from application
	*/
	void lora_UpLinkHandler_task(MessageBufferHandle_t xMessageBuffer)
	{	
    1074:	df 92       	push	r13
    1076:	ef 92       	push	r14
    1078:	ff 92       	push	r15
    107a:	0f 93       	push	r16
    107c:	1f 93       	push	r17
    107e:	cf 93       	push	r28
    1080:	df 93       	push	r29
    1082:	7c 01       	movw	r14, r24
		size_t xBytesToSend;
		char rxData[50];
		if (!isSet)
    1084:	80 91 22 08 	lds	r24, 0x0822	; 0x800822 <isSet>
    1088:	81 11       	cpse	r24, r1
    108a:	cf c0       	rjmp	.+414    	; 0x122a <lora_UpLinkHandler_task+0x1b6>
		{
			// Hardware reset of LoRaWAN transceiver
			lora_driver_reset_rn2483(1);
    108c:	81 e0       	ldi	r24, 0x01	; 1
    108e:	0e 94 61 23 	call	0x46c2	; 0x46c2 <lora_driver_reset_rn2483>
			vTaskDelay(2);
    1092:	62 e0       	ldi	r22, 0x02	; 2
    1094:	70 e0       	ldi	r23, 0x00	; 0
    1096:	80 e0       	ldi	r24, 0x00	; 0
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	0e 94 17 18 	call	0x302e	; 0x302e <vTaskDelay>
			lora_driver_reset_rn2483(0);
    109e:	80 e0       	ldi	r24, 0x00	; 0
    10a0:	0e 94 61 23 	call	0x46c2	; 0x46c2 <lora_driver_reset_rn2483>
			// Give it a chance to wakeup
			vTaskDelay(150);
    10a4:	66 e9       	ldi	r22, 0x96	; 150
    10a6:	70 e0       	ldi	r23, 0x00	; 0
    10a8:	80 e0       	ldi	r24, 0x00	; 0
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	0e 94 17 18 	call	0x302e	; 0x302e <vTaskDelay>

			lora_driver_flush_buffers(); // get rid of first version string from module after reset!
    10b0:	0e 94 17 23 	call	0x462e	; 0x462e <lora_driver_flush_buffers>


static void _lora_setup(void)
{
	e_LoRa_return_code_t rc;
	led_slow_blink(led_ST2); // OPTIONAL: Led the green led blink slowly while we are setting up LoRa
    10b4:	81 e0       	ldi	r24, 0x01	; 1
    10b6:	0e 94 6f 21 	call	0x42de	; 0x42de <led_slow_blink>
	//The below code is required to be executed only once due to the fact that these MAC settings
	// can be stored inside of the tranciever
	//START ON ONE TIME USE CODE

	// Factory reset the transceiver
	printf("FactoryReset >%s<\n", lora_driver_map_return_code_to_text(lora_driver_rn2483_factory_reset()));
    10ba:	0e 94 75 23 	call	0x46ea	; 0x46ea <lora_driver_rn2483_factory_reset>
    10be:	0e 94 f2 25 	call	0x4be4	; 0x4be4 <lora_driver_map_return_code_to_text>
    10c2:	9f 93       	push	r25
    10c4:	8f 93       	push	r24
    10c6:	8a e8       	ldi	r24, 0x8A	; 138
    10c8:	93 e0       	ldi	r25, 0x03	; 3
    10ca:	9f 93       	push	r25
    10cc:	8f 93       	push	r24
    10ce:	0e 94 70 31 	call	0x62e0	; 0x62e0 <printf>
	
	// Configure to EU868 LoRaWAN standards
	printf("Configure to EU868 >%s<\n", lora_driver_map_return_code_to_text(lora_driver_configure_to_eu868()));
    10d2:	0e 94 f3 24 	call	0x49e6	; 0x49e6 <lora_driver_configure_to_eu868>
    10d6:	0e 94 f2 25 	call	0x4be4	; 0x4be4 <lora_driver_map_return_code_to_text>
    10da:	9f 93       	push	r25
    10dc:	8f 93       	push	r24
    10de:	8d e9       	ldi	r24, 0x9D	; 157
    10e0:	93 e0       	ldi	r25, 0x03	; 3
    10e2:	9f 93       	push	r25
    10e4:	8f 93       	push	r24
    10e6:	0e 94 70 31 	call	0x62e0	; 0x62e0 <printf>

	// Get the transceivers HW EUI
	rc = lora_driver_get_rn2483_hweui(_out_buf);
    10ea:	89 e3       	ldi	r24, 0x39	; 57
    10ec:	98 e0       	ldi	r25, 0x08	; 8
    10ee:	0e 94 87 23 	call	0x470e	; 0x470e <lora_driver_get_rn2483_hweui>
	printf("Get HWEUI >%s<: %s\n",lora_driver_map_return_code_to_text(rc), _out_buf);
    10f2:	0e 94 f2 25 	call	0x4be4	; 0x4be4 <lora_driver_map_return_code_to_text>
    10f6:	c9 e3       	ldi	r28, 0x39	; 57
    10f8:	d8 e0       	ldi	r29, 0x08	; 8
    10fa:	df 93       	push	r29
    10fc:	cf 93       	push	r28
    10fe:	9f 93       	push	r25
    1100:	8f 93       	push	r24
    1102:	86 eb       	ldi	r24, 0xB6	; 182
    1104:	93 e0       	ldi	r25, 0x03	; 3
    1106:	9f 93       	push	r25
    1108:	8f 93       	push	r24
    110a:	0e 94 70 31 	call	0x62e0	; 0x62e0 <printf>

	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_map_return_code_to_text(lora_driver_set_device_identifier(_out_buf)));
    110e:	ce 01       	movw	r24, r28
    1110:	0e 94 a3 23 	call	0x4746	; 0x4746 <lora_driver_set_device_identifier>
    1114:	0e 94 f2 25 	call	0x4be4	; 0x4be4 <lora_driver_map_return_code_to_text>
    1118:	9f 93       	push	r25
    111a:	8f 93       	push	r24
    111c:	df 93       	push	r29
    111e:	cf 93       	push	r28
    1120:	8a ec       	ldi	r24, 0xCA	; 202
    1122:	93 e0       	ldi	r25, 0x03	; 3
    1124:	9f 93       	push	r25
    1126:	8f 93       	push	r24
    1128:	0e 94 70 31 	call	0x62e0	; 0x62e0 <printf>

	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_map_return_code_to_text(lora_driver_set_otaa_identity(LORA_appEUI,LORA_appKEY,_out_buf)));
    112c:	ae 01       	movw	r20, r28
    112e:	6f ed       	ldi	r22, 0xDF	; 223
    1130:	73 e0       	ldi	r23, 0x03	; 3
    1132:	80 e0       	ldi	r24, 0x00	; 0
    1134:	94 e0       	ldi	r25, 0x04	; 4
    1136:	0e 94 d1 25 	call	0x4ba2	; 0x4ba2 <lora_driver_set_otaa_identity>
    113a:	0e 94 f2 25 	call	0x4be4	; 0x4be4 <lora_driver_map_return_code_to_text>
    113e:	9f 93       	push	r25
    1140:	8f 93       	push	r24
    1142:	df 93       	push	r29
    1144:	cf 93       	push	r28
    1146:	8f ed       	ldi	r24, 0xDF	; 223
    1148:	93 e0       	ldi	r25, 0x03	; 3
    114a:	9f 93       	push	r25
    114c:	8f 93       	push	r24
    114e:	80 e0       	ldi	r24, 0x00	; 0
    1150:	94 e0       	ldi	r25, 0x04	; 4
    1152:	9f 93       	push	r25
    1154:	8f 93       	push	r24
    1156:	81 e1       	ldi	r24, 0x11	; 17
    1158:	94 e0       	ldi	r25, 0x04	; 4
    115a:	9f 93       	push	r25
    115c:	8f 93       	push	r24
    115e:	0e 94 70 31 	call	0x62e0	; 0x62e0 <printf>

	// Save all the MAC settings in the transceiver
	printf("Save mac >%s<\n",lora_driver_map_return_code_to_text(lora_driver_save_mac()));
    1162:	0e 94 d6 23 	call	0x47ac	; 0x47ac <lora_driver_save_mac>
    1166:	0e 94 f2 25 	call	0x4be4	; 0x4be4 <lora_driver_map_return_code_to_text>
    116a:	9f 93       	push	r25
    116c:	8f 93       	push	r24
    116e:	87 e4       	ldi	r24, 0x47	; 71
    1170:	94 e0       	ldi	r25, 0x04	; 4
    1172:	9f 93       	push	r25
    1174:	8f 93       	push	r24
    1176:	0e 94 70 31 	call	0x62e0	; 0x62e0 <printf>

	//END OF ONE TIME USE CODE
	
	
	// Enable Adaptive Data Rate
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_map_return_code_to_text(lora_driver_set_adaptive_data_rate(LoRa_ON)));
    117a:	8d b7       	in	r24, 0x3d	; 61
    117c:	9e b7       	in	r25, 0x3e	; 62
    117e:	82 96       	adiw	r24, 0x22	; 34
    1180:	0f b6       	in	r0, 0x3f	; 63
    1182:	f8 94       	cli
    1184:	9e bf       	out	0x3e, r25	; 62
    1186:	0f be       	out	0x3f, r0	; 63
    1188:	8d bf       	out	0x3d, r24	; 61
    118a:	81 e0       	ldi	r24, 0x01	; 1
    118c:	0e 94 d0 24 	call	0x49a0	; 0x49a0 <lora_driver_set_adaptive_data_rate>
    1190:	0e 94 f2 25 	call	0x4be4	; 0x4be4 <lora_driver_map_return_code_to_text>
    1194:	9f 93       	push	r25
    1196:	8f 93       	push	r24
    1198:	86 e5       	ldi	r24, 0x56	; 86
    119a:	94 e0       	ldi	r25, 0x04	; 4
    119c:	9f 93       	push	r25
    119e:	8f 93       	push	r24
    11a0:	0e 94 70 31 	call	0x62e0	; 0x62e0 <printf>

	// Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	printf("Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_map_return_code_to_text(lora_driver_set_receive_delay(500)));
    11a4:	84 ef       	ldi	r24, 0xF4	; 244
    11a6:	91 e0       	ldi	r25, 0x01	; 1
    11a8:	0e 94 db 24 	call	0x49b6	; 0x49b6 <lora_driver_set_receive_delay>
    11ac:	0e 94 f2 25 	call	0x4be4	; 0x4be4 <lora_driver_map_return_code_to_text>
    11b0:	9f 93       	push	r25
    11b2:	8f 93       	push	r24
    11b4:	81 e0       	ldi	r24, 0x01	; 1
    11b6:	8f 93       	push	r24
    11b8:	84 ef       	ldi	r24, 0xF4	; 244
    11ba:	8f 93       	push	r24
    11bc:	87 e7       	ldi	r24, 0x77	; 119
    11be:	94 e0       	ldi	r25, 0x04	; 4
    11c0:	9f 93       	push	r25
    11c2:	8f 93       	push	r24
    11c4:	0e 94 70 31 	call	0x62e0	; 0x62e0 <printf>
    11c8:	8d b7       	in	r24, 0x3d	; 61
    11ca:	9e b7       	in	r25, 0x3e	; 62
    11cc:	0a 96       	adiw	r24, 0x0a	; 10
    11ce:	0f b6       	in	r0, 0x3f	; 63
    11d0:	f8 94       	cli
    11d2:	9e bf       	out	0x3e, r25	; 62
    11d4:	0f be       	out	0x3f, r0	; 63
    11d6:	8d bf       	out	0x3d, r24	; 61
    11d8:	ca e0       	ldi	r28, 0x0A	; 10
    11da:	d0 e0       	ldi	r29, 0x00	; 0
	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
	
	do {
		rc = lora_driver_join(LoRa_OTAA);
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_map_return_code_to_text(rc));
    11dc:	07 e9       	ldi	r16, 0x97	; 151
    11de:	14 e0       	ldi	r17, 0x04	; 4

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
	
	do {
		rc = lora_driver_join(LoRa_OTAA);
    11e0:	80 e0       	ldi	r24, 0x00	; 0
    11e2:	0e 94 dc 23 	call	0x47b8	; 0x47b8 <lora_driver_join>
    11e6:	d8 2e       	mov	r13, r24
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_map_return_code_to_text(rc));
    11e8:	0e 94 f2 25 	call	0x4be4	; 0x4be4 <lora_driver_map_return_code_to_text>
    11ec:	9f 93       	push	r25
    11ee:	8f 93       	push	r24
    11f0:	df 93       	push	r29
    11f2:	cf 93       	push	r28
    11f4:	1f 93       	push	r17
    11f6:	0f 93       	push	r16
    11f8:	0e 94 70 31 	call	0x62e0	; 0x62e0 <printf>

		if ( rc != LoRa_ACCEPTED)
    11fc:	0f 90       	pop	r0
    11fe:	0f 90       	pop	r0
    1200:	0f 90       	pop	r0
    1202:	0f 90       	pop	r0
    1204:	0f 90       	pop	r0
    1206:	0f 90       	pop	r0
    1208:	88 e0       	ldi	r24, 0x08	; 8
    120a:	d8 16       	cp	r13, r24
    120c:	89 f1       	breq	.+98     	; 0x1270 <lora_UpLinkHandler_task+0x1fc>
		{
			// Make the red led pulse to tell something went wrong
			led_long_puls(led_ST1); // OPTIONAL
    120e:	80 e0       	ldi	r24, 0x00	; 0
    1210:	0e 94 db 21 	call	0x43b6	; 0x43b6 <led_long_puls>
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
    1214:	66 e3       	ldi	r22, 0x36	; 54
    1216:	71 e0       	ldi	r23, 0x01	; 1
    1218:	80 e0       	ldi	r24, 0x00	; 0
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	0e 94 17 18 	call	0x302e	; 0x302e <vTaskDelay>
    1220:	21 97       	sbiw	r28, 0x01	; 1
		}
		else
		{
			break;
		}
	} while (--maxJoinTriesLeft);
    1222:	f1 f6       	brne	.-68     	; 0x11e0 <lora_UpLinkHandler_task+0x16c>
    1224:	2c c0       	rjmp	.+88     	; 0x127e <lora_UpLinkHandler_task+0x20a>
		led_fast_blink(led_ST1); // OPTIONAL

		// Lets stay here
		while (1)
		{
			taskYIELD();
    1226:	3f d4       	rcall	.+2174   	; 0x1aa6 <vPortYield>
    1228:	fe cf       	rjmp	.-4      	; 0x1226 <lora_UpLinkHandler_task+0x1b2>
			isSet=true;
		}
		

		
		xBytesToSend = xMessageBufferReceive(xMessageBuffer, (void*) &_uplink_payload,
    122a:	00 e0       	ldi	r16, 0x00	; 0
    122c:	10 e0       	ldi	r17, 0x00	; 0
    122e:	98 01       	movw	r18, r16
    1230:	42 e3       	ldi	r20, 0x32	; 50
    1232:	50 e0       	ldi	r21, 0x00	; 0
    1234:	63 e2       	ldi	r22, 0x23	; 35
    1236:	78 e0       	ldi	r23, 0x08	; 8
    1238:	c7 01       	movw	r24, r14
    123a:	0e 94 12 14 	call	0x2824	; 0x2824 <xStreamBufferReceive>
		sizeof(rxData),0);
		if(xBytesToSend >= sizeof(uint8_t)*2)
    123e:	02 97       	sbiw	r24, 0x02	; 2
    1240:	28 f1       	brcs	.+74     	; 0x128c <lora_UpLinkHandler_task+0x218>
			//_uplink_payload = (_uplink_payload) &rxData;
			
			/**< Status led ST4 (BLUE)*/
			//Makes the led light up in a short period.
			
			led_short_puls(led_ST4);
    1242:	83 e0       	ldi	r24, 0x03	; 3
    1244:	0e 94 ed 21 	call	0x43da	; 0x43da <led_short_puls>
			//printf("The temperature2 in upLink is: %d\n", _uplink_payload.bytes[1]);
			//printf("The humidity in upLink is: %u\n", _uplink_payload.bytes[2]);
			//printf("The humidity2 in upLink is: %u\n", _uplink_payload.bytes[3]);
			
			
			printf("Upload Message >%s<\n", lora_driver_map_return_code_to_text(lora_driver_sent_upload_message(false, &_uplink_payload)));
    1248:	63 e2       	ldi	r22, 0x23	; 35
    124a:	78 e0       	ldi	r23, 0x08	; 8
    124c:	80 e0       	ldi	r24, 0x00	; 0
    124e:	0e 94 05 24 	call	0x480a	; 0x480a <lora_driver_sent_upload_message>
    1252:	0e 94 f2 25 	call	0x4be4	; 0x4be4 <lora_driver_map_return_code_to_text>
    1256:	9f 93       	push	r25
    1258:	8f 93       	push	r24
    125a:	87 eb       	ldi	r24, 0xB7	; 183
    125c:	94 e0       	ldi	r25, 0x04	; 4
    125e:	9f 93       	push	r25
    1260:	8f 93       	push	r24
    1262:	0e 94 70 31 	call	0x62e0	; 0x62e0 <printf>
    1266:	0f 90       	pop	r0
    1268:	0f 90       	pop	r0
    126a:	0f 90       	pop	r0
    126c:	0f 90       	pop	r0
		}
	}
    126e:	0e c0       	rjmp	.+28     	; 0x128c <lora_UpLinkHandler_task+0x218>

	if (rc == LoRa_ACCEPTED)
	{
		// Connected to LoRaWAN :-)
		// Make the green led steady
		led_led_on(led_ST2); // OPTIONAL
    1270:	81 e0       	ldi	r24, 0x01	; 1
    1272:	0e 94 bd 21 	call	0x437a	; 0x437a <led_led_on>
			vTaskDelay(150);

			lora_driver_flush_buffers(); // get rid of first version string from module after reset!

			_lora_setup();
			isSet=true;
    1276:	81 e0       	ldi	r24, 0x01	; 1
    1278:	80 93 22 08 	sts	0x0822, r24	; 0x800822 <isSet>
    127c:	d6 cf       	rjmp	.-84     	; 0x122a <lora_UpLinkHandler_task+0x1b6>
	}
	else
	{
		// Something went wrong
		// Turn off the green led
		led_led_off(led_ST2); // OPTIONAL
    127e:	81 e0       	ldi	r24, 0x01	; 1
    1280:	0e 94 cc 21 	call	0x4398	; 0x4398 <led_led_off>
		// Make the red led blink fast to tell something went wrong
		led_fast_blink(led_ST1); // OPTIONAL
    1284:	80 e0       	ldi	r24, 0x00	; 0
    1286:	0e 94 96 21 	call	0x432c	; 0x432c <led_fast_blink>
    128a:	cd cf       	rjmp	.-102    	; 0x1226 <lora_UpLinkHandler_task+0x1b2>
			//printf("The humidity2 in upLink is: %u\n", _uplink_payload.bytes[3]);
			
			
			printf("Upload Message >%s<\n", lora_driver_map_return_code_to_text(lora_driver_sent_upload_message(false, &_uplink_payload)));
		}
	}
    128c:	df 91       	pop	r29
    128e:	cf 91       	pop	r28
    1290:	1f 91       	pop	r17
    1292:	0f 91       	pop	r16
    1294:	ff 90       	pop	r15
    1296:	ef 90       	pop	r14
    1298:	df 90       	pop	r13
    129a:	08 95       	ret

0000129c <lora_UpLinkHandler_startTask>:
static bool isSet=false;

/*Check for the parameters*/


void lora_UpLinkHandler_startTask(void* xMessageBuffer){
    129c:	ec 01       	movw	r28, r24
	for(;;)
	{
		lora_UpLinkHandler_task((MessageBufferHandle_t)xMessageBuffer);
    129e:	ce 01       	movw	r24, r28
    12a0:	e9 de       	rcall	.-558    	; 0x1074 <lora_UpLinkHandler_task>
		vTaskDelay(3000);
    12a2:	68 eb       	ldi	r22, 0xB8	; 184
    12a4:	7b e0       	ldi	r23, 0x0B	; 11
    12a6:	80 e0       	ldi	r24, 0x00	; 0
    12a8:	90 e0       	ldi	r25, 0x00	; 0
    12aa:	0e 94 17 18 	call	0x302e	; 0x302e <vTaskDelay>
    12ae:	f7 cf       	rjmp	.-18     	; 0x129e <lora_UpLinkHandler_startTask+0x2>

000012b0 <task_switch_in>:
	void task_switch_in(uint8_t task_no) {
		 #ifdef HAL_DEFS_H_

		 #else
		 // Used on VIA MEGA Shield rev. 2.0.0
		 PORTK &= 0b11110000;
    12b0:	e8 e0       	ldi	r30, 0x08	; 8
    12b2:	f1 e0       	ldi	r31, 0x01	; 1
    12b4:	90 81       	ld	r25, Z
    12b6:	90 7f       	andi	r25, 0xF0	; 240
    12b8:	90 83       	st	Z, r25
		 PORTK |= (task_no & 0b00001111);
    12ba:	90 81       	ld	r25, Z
    12bc:	8f 70       	andi	r24, 0x0F	; 15
    12be:	98 2b       	or	r25, r24
    12c0:	90 83       	st	Z, r25
    12c2:	08 95       	ret

000012c4 <task_switch_out>:
	void task_switch_out(uint8_t task_no) {
		#ifdef HAL_DEFS_H_

		#else
		// Used on VIA MEGA Shield rev. 2.0.0
		PORTK &= 0b11110000;
    12c4:	e8 e0       	ldi	r30, 0x08	; 8
    12c6:	f1 e0       	ldi	r31, 0x01	; 1
    12c8:	80 81       	ld	r24, Z
    12ca:	80 7f       	andi	r24, 0xF0	; 240
    12cc:	80 83       	st	Z, r24
    12ce:	08 95       	ret

000012d0 <xEventGroupCreate>:
        uxReturn = pxEventBits->uxEventBits;
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
    12d0:	cf 93       	push	r28
    12d2:	df 93       	push	r29
    12d4:	80 e1       	ldi	r24, 0x10	; 16
    12d6:	90 e0       	ldi	r25, 0x00	; 0
    12d8:	b4 d1       	rcall	.+872    	; 0x1642 <pvPortMalloc>
    12da:	ec 01       	movw	r28, r24
    12dc:	00 97       	sbiw	r24, 0x00	; 0
    12de:	39 f0       	breq	.+14     	; 0x12ee <xEventGroupCreate+0x1e>
    12e0:	fc 01       	movw	r30, r24
    12e2:	11 92       	st	Z+, r1
    12e4:	11 92       	st	Z+, r1
    12e6:	11 92       	st	Z+, r1
    12e8:	11 92       	st	Z+, r1
    12ea:	cf 01       	movw	r24, r30
    12ec:	94 d2       	rcall	.+1320   	; 0x1816 <vListInitialise>
    12ee:	ce 01       	movw	r24, r28
    12f0:	df 91       	pop	r29
    12f2:	cf 91       	pop	r28
    12f4:	08 95       	ret

000012f6 <xEventGroupWaitBits>:
    12f6:	2f 92       	push	r2
    12f8:	3f 92       	push	r3
    12fa:	4f 92       	push	r4
    12fc:	5f 92       	push	r5
    12fe:	6f 92       	push	r6
    1300:	7f 92       	push	r7
    1302:	8f 92       	push	r8
    1304:	9f 92       	push	r9
    1306:	af 92       	push	r10
    1308:	bf 92       	push	r11
    130a:	cf 92       	push	r12
    130c:	df 92       	push	r13
    130e:	ef 92       	push	r14
    1310:	ff 92       	push	r15
    1312:	0f 93       	push	r16
    1314:	1f 93       	push	r17
    1316:	cf 93       	push	r28
    1318:	df 93       	push	r29
    131a:	ec 01       	movw	r28, r24
    131c:	4a 01       	movw	r8, r20
    131e:	5b 01       	movw	r10, r22
    1320:	62 2e       	mov	r6, r18
    1322:	70 2e       	mov	r7, r16
    1324:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <vTaskSuspendAll>
    1328:	28 80       	ld	r2, Y
    132a:	39 80       	ldd	r3, Y+1	; 0x01
    132c:	4a 80       	ldd	r4, Y+2	; 0x02
    132e:	5b 80       	ldd	r5, Y+3	; 0x03
    1330:	01 11       	cpse	r16, r1
    1332:	0d c0       	rjmp	.+26     	; 0x134e <xEventGroupWaitBits+0x58>
    1334:	81 e0       	ldi	r24, 0x01	; 1
    1336:	b2 01       	movw	r22, r4
    1338:	a1 01       	movw	r20, r2
    133a:	48 21       	and	r20, r8
    133c:	59 21       	and	r21, r9
    133e:	6a 21       	and	r22, r10
    1340:	7b 21       	and	r23, r11
    1342:	45 2b       	or	r20, r21
    1344:	46 2b       	or	r20, r22
    1346:	47 2b       	or	r20, r23
    1348:	79 f4       	brne	.+30     	; 0x1368 <xEventGroupWaitBits+0x72>
    134a:	80 e0       	ldi	r24, 0x00	; 0
    134c:	0d c0       	rjmp	.+26     	; 0x1368 <xEventGroupWaitBits+0x72>
    134e:	81 e0       	ldi	r24, 0x01	; 1
    1350:	b2 01       	movw	r22, r4
    1352:	a1 01       	movw	r20, r2
    1354:	48 21       	and	r20, r8
    1356:	59 21       	and	r21, r9
    1358:	6a 21       	and	r22, r10
    135a:	7b 21       	and	r23, r11
    135c:	48 15       	cp	r20, r8
    135e:	59 05       	cpc	r21, r9
    1360:	6a 05       	cpc	r22, r10
    1362:	7b 05       	cpc	r23, r11
    1364:	09 f0       	breq	.+2      	; 0x1368 <xEventGroupWaitBits+0x72>
    1366:	80 e0       	ldi	r24, 0x00	; 0
    1368:	88 23       	and	r24, r24
    136a:	81 f0       	breq	.+32     	; 0x138c <xEventGroupWaitBits+0x96>
    136c:	66 20       	and	r6, r6
    136e:	09 f4       	brne	.+2      	; 0x1372 <xEventGroupWaitBits+0x7c>
    1370:	6b c0       	rjmp	.+214    	; 0x1448 <xEventGroupWaitBits+0x152>
    1372:	80 94       	com	r8
    1374:	90 94       	com	r9
    1376:	a0 94       	com	r10
    1378:	b0 94       	com	r11
    137a:	82 20       	and	r8, r2
    137c:	93 20       	and	r9, r3
    137e:	a4 20       	and	r10, r4
    1380:	b5 20       	and	r11, r5
    1382:	88 82       	st	Y, r8
    1384:	99 82       	std	Y+1, r9	; 0x01
    1386:	aa 82       	std	Y+2, r10	; 0x02
    1388:	bb 82       	std	Y+3, r11	; 0x03
    138a:	5e c0       	rjmp	.+188    	; 0x1448 <xEventGroupWaitBits+0x152>
    138c:	c1 14       	cp	r12, r1
    138e:	d1 04       	cpc	r13, r1
    1390:	e1 04       	cpc	r14, r1
    1392:	f1 04       	cpc	r15, r1
    1394:	09 f4       	brne	.+2      	; 0x1398 <xEventGroupWaitBits+0xa2>
    1396:	58 c0       	rjmp	.+176    	; 0x1448 <xEventGroupWaitBits+0x152>
    1398:	66 20       	and	r6, r6
    139a:	29 f0       	breq	.+10     	; 0x13a6 <xEventGroupWaitBits+0xb0>
    139c:	40 e0       	ldi	r20, 0x00	; 0
    139e:	50 e0       	ldi	r21, 0x00	; 0
    13a0:	60 e0       	ldi	r22, 0x00	; 0
    13a2:	71 e0       	ldi	r23, 0x01	; 1
    13a4:	03 c0       	rjmp	.+6      	; 0x13ac <xEventGroupWaitBits+0xb6>
    13a6:	40 e0       	ldi	r20, 0x00	; 0
    13a8:	50 e0       	ldi	r21, 0x00	; 0
    13aa:	ba 01       	movw	r22, r20
    13ac:	71 10       	cpse	r7, r1
    13ae:	74 60       	ori	r23, 0x04	; 4
    13b0:	48 29       	or	r20, r8
    13b2:	59 29       	or	r21, r9
    13b4:	6a 29       	or	r22, r10
    13b6:	7b 29       	or	r23, r11
    13b8:	97 01       	movw	r18, r14
    13ba:	86 01       	movw	r16, r12
    13bc:	ce 01       	movw	r24, r28
    13be:	04 96       	adiw	r24, 0x04	; 4
    13c0:	0e 94 c6 18 	call	0x318c	; 0x318c <vTaskPlaceOnUnorderedEventList>
    13c4:	0e 94 9b 17 	call	0x2f36	; 0x2f36 <xTaskResumeAll>
    13c8:	81 11       	cpse	r24, r1
    13ca:	01 c0       	rjmp	.+2      	; 0x13ce <xEventGroupWaitBits+0xd8>
    13cc:	6c d3       	rcall	.+1752   	; 0x1aa6 <vPortYield>
    13ce:	0e 94 0d 1b 	call	0x361a	; 0x361a <uxTaskResetEventItemValue>
    13d2:	91 fd       	sbrc	r25, 1
    13d4:	35 c0       	rjmp	.+106    	; 0x1440 <xEventGroupWaitBits+0x14a>
    13d6:	0f b6       	in	r0, 0x3f	; 63
    13d8:	f8 94       	cli
    13da:	0f 92       	push	r0
    13dc:	68 81       	ld	r22, Y
    13de:	79 81       	ldd	r23, Y+1	; 0x01
    13e0:	8a 81       	ldd	r24, Y+2	; 0x02
    13e2:	9b 81       	ldd	r25, Y+3	; 0x03
    13e4:	71 10       	cpse	r7, r1
    13e6:	0d c0       	rjmp	.+26     	; 0x1402 <xEventGroupWaitBits+0x10c>
    13e8:	21 e0       	ldi	r18, 0x01	; 1
    13ea:	75 01       	movw	r14, r10
    13ec:	64 01       	movw	r12, r8
    13ee:	c6 22       	and	r12, r22
    13f0:	d7 22       	and	r13, r23
    13f2:	e8 22       	and	r14, r24
    13f4:	f9 22       	and	r15, r25
    13f6:	cd 28       	or	r12, r13
    13f8:	ce 28       	or	r12, r14
    13fa:	cf 28       	or	r12, r15
    13fc:	79 f4       	brne	.+30     	; 0x141c <xEventGroupWaitBits+0x126>
    13fe:	20 e0       	ldi	r18, 0x00	; 0
    1400:	0d c0       	rjmp	.+26     	; 0x141c <xEventGroupWaitBits+0x126>
    1402:	21 e0       	ldi	r18, 0x01	; 1
    1404:	75 01       	movw	r14, r10
    1406:	64 01       	movw	r12, r8
    1408:	c6 22       	and	r12, r22
    140a:	d7 22       	and	r13, r23
    140c:	e8 22       	and	r14, r24
    140e:	f9 22       	and	r15, r25
    1410:	c8 14       	cp	r12, r8
    1412:	d9 04       	cpc	r13, r9
    1414:	ea 04       	cpc	r14, r10
    1416:	fb 04       	cpc	r15, r11
    1418:	09 f0       	breq	.+2      	; 0x141c <xEventGroupWaitBits+0x126>
    141a:	20 e0       	ldi	r18, 0x00	; 0
    141c:	22 23       	and	r18, r18
    141e:	71 f0       	breq	.+28     	; 0x143c <xEventGroupWaitBits+0x146>
    1420:	66 20       	and	r6, r6
    1422:	61 f0       	breq	.+24     	; 0x143c <xEventGroupWaitBits+0x146>
    1424:	80 94       	com	r8
    1426:	90 94       	com	r9
    1428:	a0 94       	com	r10
    142a:	b0 94       	com	r11
    142c:	86 22       	and	r8, r22
    142e:	97 22       	and	r9, r23
    1430:	a8 22       	and	r10, r24
    1432:	b9 22       	and	r11, r25
    1434:	88 82       	st	Y, r8
    1436:	99 82       	std	Y+1, r9	; 0x01
    1438:	aa 82       	std	Y+2, r10	; 0x02
    143a:	bb 82       	std	Y+3, r11	; 0x03
    143c:	0f 90       	pop	r0
    143e:	0f be       	out	0x3f, r0	; 63
    1440:	1b 01       	movw	r2, r22
    1442:	2c 01       	movw	r4, r24
    1444:	55 24       	eor	r5, r5
    1446:	02 c0       	rjmp	.+4      	; 0x144c <xEventGroupWaitBits+0x156>
    1448:	0e 94 9b 17 	call	0x2f36	; 0x2f36 <xTaskResumeAll>
    144c:	c2 01       	movw	r24, r4
    144e:	b1 01       	movw	r22, r2
    1450:	df 91       	pop	r29
    1452:	cf 91       	pop	r28
    1454:	1f 91       	pop	r17
    1456:	0f 91       	pop	r16
    1458:	ff 90       	pop	r15
    145a:	ef 90       	pop	r14
    145c:	df 90       	pop	r13
    145e:	cf 90       	pop	r12
    1460:	bf 90       	pop	r11
    1462:	af 90       	pop	r10
    1464:	9f 90       	pop	r9
    1466:	8f 90       	pop	r8
    1468:	7f 90       	pop	r7
    146a:	6f 90       	pop	r6
    146c:	5f 90       	pop	r5
    146e:	4f 90       	pop	r4
    1470:	3f 90       	pop	r3
    1472:	2f 90       	pop	r2
    1474:	08 95       	ret

00001476 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
    1476:	4f 92       	push	r4
    1478:	5f 92       	push	r5
    147a:	6f 92       	push	r6
    147c:	7f 92       	push	r7
    147e:	8f 92       	push	r8
    1480:	9f 92       	push	r9
    1482:	af 92       	push	r10
    1484:	bf 92       	push	r11
    1486:	cf 92       	push	r12
    1488:	df 92       	push	r13
    148a:	ef 92       	push	r14
    148c:	ff 92       	push	r15
    148e:	0f 93       	push	r16
    1490:	1f 93       	push	r17
    1492:	cf 93       	push	r28
    1494:	df 93       	push	r29
    1496:	ec 01       	movw	r28, r24
    1498:	6a 01       	movw	r12, r20
    149a:	7b 01       	movw	r14, r22
    itself. */
    configASSERT( xEventGroup );
    configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

    pxList = &( pxEventBits->xTasksWaitingForBits );
    pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    149c:	8c 01       	movw	r16, r24
    149e:	09 5f       	subi	r16, 0xF9	; 249
    14a0:	1f 4f       	sbci	r17, 0xFF	; 255
    vTaskSuspendAll();
    14a2:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <vTaskSuspendAll>
    {
        traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

        pxListItem = listGET_HEAD_ENTRY( pxList );
    14a6:	eb 85       	ldd	r30, Y+11	; 0x0b
    14a8:	fc 85       	ldd	r31, Y+12	; 0x0c

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;
    14aa:	88 81       	ld	r24, Y
    14ac:	99 81       	ldd	r25, Y+1	; 0x01
    14ae:	aa 81       	ldd	r26, Y+2	; 0x02
    14b0:	bb 81       	ldd	r27, Y+3	; 0x03
    14b2:	c8 2a       	or	r12, r24
    14b4:	d9 2a       	or	r13, r25
    14b6:	ea 2a       	or	r14, r26
    14b8:	fb 2a       	or	r15, r27
    14ba:	c8 82       	st	Y, r12
    14bc:	d9 82       	std	Y+1, r13	; 0x01
    14be:	ea 82       	std	Y+2, r14	; 0x02
    14c0:	fb 82       	std	Y+3, r15	; 0x03

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
    14c2:	0e 17       	cp	r16, r30
    14c4:	1f 07       	cpc	r17, r31
    14c6:	09 f4       	brne	.+2      	; 0x14ca <xEventGroupSetBits+0x54>
    14c8:	45 c0       	rjmp	.+138    	; 0x1554 <xEventGroupSetBits+0xde>
    14ca:	c1 2c       	mov	r12, r1
    14cc:	d1 2c       	mov	r13, r1
    14ce:	76 01       	movw	r14, r12
            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
                {
                    xMatchFound = pdTRUE;
    14d0:	99 24       	eor	r9, r9
    14d2:	93 94       	inc	r9
    14d4:	81 2c       	mov	r8, r1
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
    14d6:	a4 80       	ldd	r10, Z+4	; 0x04
    14d8:	b5 80       	ldd	r11, Z+5	; 0x05
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
    14da:	80 81       	ld	r24, Z
    14dc:	91 81       	ldd	r25, Z+1	; 0x01
    14de:	a2 81       	ldd	r26, Z+2	; 0x02
    14e0:	b3 81       	ldd	r27, Z+3	; 0x03
            xMatchFound = pdFALSE;

            /* Split the bits waited for from the control bits. */
            uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
            uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
    14e2:	ac 01       	movw	r20, r24
    14e4:	bd 01       	movw	r22, r26
    14e6:	77 27       	eor	r23, r23

            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
    14e8:	b2 fd       	sbrc	r27, 2
    14ea:	0f c0       	rjmp	.+30     	; 0x150a <xEventGroupSetBits+0x94>
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
                {
                    xMatchFound = pdTRUE;
    14ec:	48 80       	ld	r4, Y
    14ee:	59 80       	ldd	r5, Y+1	; 0x01
    14f0:	6a 80       	ldd	r6, Y+2	; 0x02
    14f2:	7b 80       	ldd	r7, Y+3	; 0x03
    14f4:	44 22       	and	r4, r20
    14f6:	55 22       	and	r5, r21
    14f8:	66 22       	and	r6, r22
    14fa:	77 22       	and	r7, r23
    14fc:	29 2d       	mov	r18, r9
    14fe:	45 28       	or	r4, r5
    1500:	46 28       	or	r4, r6
    1502:	47 28       	or	r4, r7
    1504:	89 f4       	brne	.+34     	; 0x1528 <xEventGroupSetBits+0xb2>
    1506:	28 2d       	mov	r18, r8
    1508:	0f c0       	rjmp	.+30     	; 0x1528 <xEventGroupSetBits+0xb2>
    150a:	48 80       	ld	r4, Y
    150c:	59 80       	ldd	r5, Y+1	; 0x01
    150e:	6a 80       	ldd	r6, Y+2	; 0x02
    1510:	7b 80       	ldd	r7, Y+3	; 0x03
    1512:	44 22       	and	r4, r20
    1514:	55 22       	and	r5, r21
    1516:	66 22       	and	r6, r22
    1518:	77 22       	and	r7, r23
    151a:	29 2d       	mov	r18, r9
    151c:	44 16       	cp	r4, r20
    151e:	55 06       	cpc	r5, r21
    1520:	66 06       	cpc	r6, r22
    1522:	77 06       	cpc	r7, r23
    1524:	09 f0       	breq	.+2      	; 0x1528 <xEventGroupSetBits+0xb2>
    1526:	28 2d       	mov	r18, r8
            else
            {
                /* Need all bits to be set, but not all the bits were set. */
            }

            if( xMatchFound != pdFALSE )
    1528:	22 23       	and	r18, r18
    152a:	71 f0       	breq	.+28     	; 0x1548 <xEventGroupSetBits+0xd2>
            {
                /* The bits match.  Should the bits be cleared on exit? */
                if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
    152c:	b0 ff       	sbrs	r27, 0
    152e:	04 c0       	rjmp	.+8      	; 0x1538 <xEventGroupSetBits+0xc2>
                {
                    uxBitsToClear |= uxBitsWaitedFor;
    1530:	c4 2a       	or	r12, r20
    1532:	d5 2a       	or	r13, r21
    1534:	e6 2a       	or	r14, r22
    1536:	f7 2a       	or	r15, r23
                /* Store the actual event flag value in the task's event list
                item before removing the task from the event list.  The
                eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                that is was unblocked due to its required bits matching, rather
                than because it timed out. */
                vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
    1538:	48 81       	ld	r20, Y
    153a:	59 81       	ldd	r21, Y+1	; 0x01
    153c:	6a 81       	ldd	r22, Y+2	; 0x02
    153e:	7b 81       	ldd	r23, Y+3	; 0x03
    1540:	72 60       	ori	r23, 0x02	; 2
    1542:	cf 01       	movw	r24, r30
    1544:	0e 94 4c 19 	call	0x3298	; 0x3298 <vTaskRemoveFromUnorderedEventList>
    1548:	ea 2d       	mov	r30, r10
    154a:	fb 2d       	mov	r31, r11

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
    154c:	0e 17       	cp	r16, r30
    154e:	1f 07       	cpc	r17, r31
    1550:	11 f6       	brne	.-124    	; 0x14d6 <xEventGroupSetBits+0x60>
    1552:	03 c0       	rjmp	.+6      	; 0x155a <xEventGroupSetBits+0xe4>
EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
    1554:	c1 2c       	mov	r12, r1
    1556:	d1 2c       	mov	r13, r1
    1558:	76 01       	movw	r14, r12
            pxListItem = pxNext;
        }

        /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
        bit was set in the control word. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
    155a:	c0 94       	com	r12
    155c:	d0 94       	com	r13
    155e:	e0 94       	com	r14
    1560:	f0 94       	com	r15
    1562:	88 81       	ld	r24, Y
    1564:	99 81       	ldd	r25, Y+1	; 0x01
    1566:	aa 81       	ldd	r26, Y+2	; 0x02
    1568:	bb 81       	ldd	r27, Y+3	; 0x03
    156a:	c8 22       	and	r12, r24
    156c:	d9 22       	and	r13, r25
    156e:	ea 22       	and	r14, r26
    1570:	fb 22       	and	r15, r27
    1572:	c8 82       	st	Y, r12
    1574:	d9 82       	std	Y+1, r13	; 0x01
    1576:	ea 82       	std	Y+2, r14	; 0x02
    1578:	fb 82       	std	Y+3, r15	; 0x03
    }
    ( void ) xTaskResumeAll();
    157a:	0e 94 9b 17 	call	0x2f36	; 0x2f36 <xTaskResumeAll>

    return pxEventBits->uxEventBits;
    157e:	68 81       	ld	r22, Y
    1580:	79 81       	ldd	r23, Y+1	; 0x01
    1582:	8a 81       	ldd	r24, Y+2	; 0x02
    1584:	9b 81       	ldd	r25, Y+3	; 0x03
}
    1586:	df 91       	pop	r29
    1588:	cf 91       	pop	r28
    158a:	1f 91       	pop	r17
    158c:	0f 91       	pop	r16
    158e:	ff 90       	pop	r15
    1590:	ef 90       	pop	r14
    1592:	df 90       	pop	r13
    1594:	cf 90       	pop	r12
    1596:	bf 90       	pop	r11
    1598:	af 90       	pop	r10
    159a:	9f 90       	pop	r9
    159c:	8f 90       	pop	r8
    159e:	7f 90       	pop	r7
    15a0:	6f 90       	pop	r6
    15a2:	5f 90       	pop	r5
    15a4:	4f 90       	pop	r4
    15a6:	08 95       	ret

000015a8 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
    15a8:	cf 93       	push	r28
    15aa:	df 93       	push	r29
    15ac:	dc 01       	movw	r26, r24
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
    15ae:	e5 ea       	ldi	r30, 0xA5	; 165
    15b0:	f8 e0       	ldi	r31, 0x08	; 8
    15b2:	01 c0       	rjmp	.+2      	; 0x15b6 <prvInsertBlockIntoFreeList+0xe>
    15b4:	f9 01       	movw	r30, r18
    15b6:	20 81       	ld	r18, Z
    15b8:	31 81       	ldd	r19, Z+1	; 0x01
    15ba:	2a 17       	cp	r18, r26
    15bc:	3b 07       	cpc	r19, r27
    15be:	d0 f3       	brcs	.-12     	; 0x15b4 <prvInsertBlockIntoFreeList+0xc>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
    15c0:	82 81       	ldd	r24, Z+2	; 0x02
    15c2:	93 81       	ldd	r25, Z+3	; 0x03
    15c4:	af 01       	movw	r20, r30
    15c6:	48 0f       	add	r20, r24
    15c8:	59 1f       	adc	r21, r25
    15ca:	a4 17       	cp	r26, r20
    15cc:	b5 07       	cpc	r27, r21
    15ce:	49 f4       	brne	.+18     	; 0x15e2 <prvInsertBlockIntoFreeList+0x3a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
    15d0:	12 96       	adiw	r26, 0x02	; 2
    15d2:	4d 91       	ld	r20, X+
    15d4:	5c 91       	ld	r21, X
    15d6:	13 97       	sbiw	r26, 0x03	; 3
    15d8:	84 0f       	add	r24, r20
    15da:	95 1f       	adc	r25, r21
    15dc:	93 83       	std	Z+3, r25	; 0x03
    15de:	82 83       	std	Z+2, r24	; 0x02
    15e0:	df 01       	movw	r26, r30
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
    15e2:	12 96       	adiw	r26, 0x02	; 2
    15e4:	8d 91       	ld	r24, X+
    15e6:	9c 91       	ld	r25, X
    15e8:	13 97       	sbiw	r26, 0x03	; 3
    15ea:	ed 01       	movw	r28, r26
    15ec:	c8 0f       	add	r28, r24
    15ee:	d9 1f       	adc	r29, r25
    15f0:	2c 17       	cp	r18, r28
    15f2:	3d 07       	cpc	r19, r29
    15f4:	d9 f4       	brne	.+54     	; 0x162c <prvInsertBlockIntoFreeList+0x84>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
    15f6:	20 91 a3 08 	lds	r18, 0x08A3	; 0x8008a3 <pxEnd>
    15fa:	30 91 a4 08 	lds	r19, 0x08A4	; 0x8008a4 <pxEnd+0x1>
    15fe:	c2 17       	cp	r28, r18
    1600:	d3 07       	cpc	r29, r19
    1602:	81 f0       	breq	.+32     	; 0x1624 <prvInsertBlockIntoFreeList+0x7c>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
    1604:	2a 81       	ldd	r18, Y+2	; 0x02
    1606:	3b 81       	ldd	r19, Y+3	; 0x03
    1608:	82 0f       	add	r24, r18
    160a:	93 1f       	adc	r25, r19
    160c:	13 96       	adiw	r26, 0x03	; 3
    160e:	9c 93       	st	X, r25
    1610:	8e 93       	st	-X, r24
    1612:	12 97       	sbiw	r26, 0x02	; 2
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
    1614:	c0 81       	ld	r28, Z
    1616:	d1 81       	ldd	r29, Z+1	; 0x01
    1618:	88 81       	ld	r24, Y
    161a:	99 81       	ldd	r25, Y+1	; 0x01
    161c:	11 96       	adiw	r26, 0x01	; 1
    161e:	9c 93       	st	X, r25
    1620:	8e 93       	st	-X, r24
    1622:	07 c0       	rjmp	.+14     	; 0x1632 <prvInsertBlockIntoFreeList+0x8a>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
    1624:	11 96       	adiw	r26, 0x01	; 1
    1626:	dc 93       	st	X, r29
    1628:	ce 93       	st	-X, r28
    162a:	03 c0       	rjmp	.+6      	; 0x1632 <prvInsertBlockIntoFreeList+0x8a>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
    162c:	11 96       	adiw	r26, 0x01	; 1
    162e:	3c 93       	st	X, r19
    1630:	2e 93       	st	-X, r18

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
    1632:	ae 17       	cp	r26, r30
    1634:	bf 07       	cpc	r27, r31
    1636:	11 f0       	breq	.+4      	; 0x163c <prvInsertBlockIntoFreeList+0x94>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
    1638:	b1 83       	std	Z+1, r27	; 0x01
    163a:	a0 83       	st	Z, r26
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    163c:	df 91       	pop	r29
    163e:	cf 91       	pop	r28
    1640:	08 95       	ret

00001642 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    1642:	cf 92       	push	r12
    1644:	df 92       	push	r13
    1646:	ef 92       	push	r14
    1648:	ff 92       	push	r15
    164a:	0f 93       	push	r16
    164c:	1f 93       	push	r17
    164e:	cf 93       	push	r28
    1650:	df 93       	push	r29
    1652:	ec 01       	movw	r28, r24
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
    1654:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
    1658:	80 91 a3 08 	lds	r24, 0x08A3	; 0x8008a3 <pxEnd>
    165c:	90 91 a4 08 	lds	r25, 0x08A4	; 0x8008a4 <pxEnd+0x1>
    1660:	89 2b       	or	r24, r25
    1662:	41 f5       	brne	.+80     	; 0x16b4 <pvPortMalloc+0x72>

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
    1664:	e5 ea       	ldi	r30, 0xA5	; 165
    1666:	f8 e0       	ldi	r31, 0x08	; 8
    1668:	a9 ea       	ldi	r26, 0xA9	; 169
    166a:	b8 e0       	ldi	r27, 0x08	; 8
    166c:	b1 83       	std	Z+1, r27	; 0x01
    166e:	a0 83       	st	Z, r26
	xStart.xBlockSize = ( size_t ) 0;
    1670:	13 82       	std	Z+3, r1	; 0x03
    1672:	12 82       	std	Z+2, r1	; 0x02
	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
	uxAddress -= xHeapStructSize;
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
	pxEnd = ( void * ) uxAddress;
    1674:	e5 e4       	ldi	r30, 0x45	; 69
    1676:	f8 e1       	ldi	r31, 0x18	; 24
    1678:	f0 93 a4 08 	sts	0x08A4, r31	; 0x8008a4 <pxEnd+0x1>
    167c:	e0 93 a3 08 	sts	0x08A3, r30	; 0x8008a3 <pxEnd>
	pxEnd->xBlockSize = 0;
    1680:	13 82       	std	Z+3, r1	; 0x03
    1682:	12 82       	std	Z+2, r1	; 0x02
	pxEnd->pxNextFreeBlock = NULL;
    1684:	11 82       	std	Z+1, r1	; 0x01
    1686:	10 82       	st	Z, r1

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
    1688:	8c e9       	ldi	r24, 0x9C	; 156
    168a:	9f e0       	ldi	r25, 0x0F	; 15
    168c:	13 96       	adiw	r26, 0x03	; 3
    168e:	9c 93       	st	X, r25
    1690:	8e 93       	st	-X, r24
    1692:	12 97       	sbiw	r26, 0x02	; 2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
    1694:	ed 93       	st	X+, r30
    1696:	fc 93       	st	X, r31

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
    1698:	90 93 a0 08 	sts	0x08A0, r25	; 0x8008a0 <xMinimumEverFreeBytesRemaining+0x1>
    169c:	80 93 9f 08 	sts	0x089F, r24	; 0x80089f <xMinimumEverFreeBytesRemaining>
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
    16a0:	90 93 a2 08 	sts	0x08A2, r25	; 0x8008a2 <xFreeBytesRemaining+0x1>
    16a4:	80 93 a1 08 	sts	0x08A1, r24	; 0x8008a1 <xFreeBytesRemaining>

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
    16a8:	80 e0       	ldi	r24, 0x00	; 0
    16aa:	90 e8       	ldi	r25, 0x80	; 128
    16ac:	90 93 9e 08 	sts	0x089E, r25	; 0x80089e <xBlockAllocatedBit+0x1>
    16b0:	80 93 9d 08 	sts	0x089D, r24	; 0x80089d <xBlockAllocatedBit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
    16b4:	e0 90 9d 08 	lds	r14, 0x089D	; 0x80089d <xBlockAllocatedBit>
    16b8:	f0 90 9e 08 	lds	r15, 0x089E	; 0x80089e <xBlockAllocatedBit+0x1>
    16bc:	c7 01       	movw	r24, r14
    16be:	8c 23       	and	r24, r28
    16c0:	9d 23       	and	r25, r29
    16c2:	89 2b       	or	r24, r25
    16c4:	09 f0       	breq	.+2      	; 0x16c8 <pvPortMalloc+0x86>
    16c6:	66 c0       	rjmp	.+204    	; 0x1794 <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
    16c8:	20 97       	sbiw	r28, 0x00	; 0
    16ca:	09 f4       	brne	.+2      	; 0x16ce <pvPortMalloc+0x8c>
    16cc:	66 c0       	rjmp	.+204    	; 0x179a <pvPortMalloc+0x158>
			{
				xWantedSize += xHeapStructSize;
    16ce:	ae 01       	movw	r20, r28
    16d0:	4c 5f       	subi	r20, 0xFC	; 252
    16d2:	5f 4f       	sbci	r21, 0xFF	; 255
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
    16d4:	09 f4       	brne	.+2      	; 0x16d8 <pvPortMalloc+0x96>
    16d6:	5e c0       	rjmp	.+188    	; 0x1794 <pvPortMalloc+0x152>
    16d8:	00 91 a1 08 	lds	r16, 0x08A1	; 0x8008a1 <xFreeBytesRemaining>
    16dc:	10 91 a2 08 	lds	r17, 0x08A2	; 0x8008a2 <xFreeBytesRemaining+0x1>
    16e0:	04 17       	cp	r16, r20
    16e2:	15 07       	cpc	r17, r21
    16e4:	08 f4       	brcc	.+2      	; 0x16e8 <pvPortMalloc+0xa6>
    16e6:	56 c0       	rjmp	.+172    	; 0x1794 <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
    16e8:	c0 91 a5 08 	lds	r28, 0x08A5	; 0x8008a5 <xStart>
    16ec:	d0 91 a6 08 	lds	r29, 0x08A6	; 0x8008a6 <xStart+0x1>

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
    16f0:	e5 ea       	ldi	r30, 0xA5	; 165
    16f2:	f8 e0       	ldi	r31, 0x08	; 8
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    16f4:	02 c0       	rjmp	.+4      	; 0x16fa <pvPortMalloc+0xb8>
    16f6:	fe 01       	movw	r30, r28
				{
					pxPreviousBlock = pxBlock;
					pxBlock = pxBlock->pxNextFreeBlock;
    16f8:	e9 01       	movw	r28, r18
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    16fa:	2a 81       	ldd	r18, Y+2	; 0x02
    16fc:	3b 81       	ldd	r19, Y+3	; 0x03
    16fe:	24 17       	cp	r18, r20
    1700:	35 07       	cpc	r19, r21
    1702:	28 f4       	brcc	.+10     	; 0x170e <pvPortMalloc+0xcc>
    1704:	28 81       	ld	r18, Y
    1706:	39 81       	ldd	r19, Y+1	; 0x01
    1708:	21 15       	cp	r18, r1
    170a:	31 05       	cpc	r19, r1
    170c:	a1 f7       	brne	.-24     	; 0x16f6 <pvPortMalloc+0xb4>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
    170e:	80 91 a3 08 	lds	r24, 0x08A3	; 0x8008a3 <pxEnd>
    1712:	90 91 a4 08 	lds	r25, 0x08A4	; 0x8008a4 <pxEnd+0x1>
    1716:	c8 17       	cp	r28, r24
    1718:	d9 07       	cpc	r29, r25
    171a:	e1 f1       	breq	.+120    	; 0x1794 <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
    171c:	c0 80       	ld	r12, Z
    171e:	d1 80       	ldd	r13, Z+1	; 0x01
    1720:	84 e0       	ldi	r24, 0x04	; 4
    1722:	c8 0e       	add	r12, r24
    1724:	d1 1c       	adc	r13, r1

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    1726:	88 81       	ld	r24, Y
    1728:	99 81       	ldd	r25, Y+1	; 0x01
    172a:	91 83       	std	Z+1, r25	; 0x01
    172c:	80 83       	st	Z, r24

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    172e:	2a 81       	ldd	r18, Y+2	; 0x02
    1730:	3b 81       	ldd	r19, Y+3	; 0x03
    1732:	24 1b       	sub	r18, r20
    1734:	35 0b       	sbc	r19, r21
    1736:	29 30       	cpi	r18, 0x09	; 9
    1738:	31 05       	cpc	r19, r1
    173a:	48 f0       	brcs	.+18     	; 0x174e <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
    173c:	ce 01       	movw	r24, r28
    173e:	84 0f       	add	r24, r20
    1740:	95 1f       	adc	r25, r21
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    1742:	fc 01       	movw	r30, r24
    1744:	33 83       	std	Z+3, r19	; 0x03
    1746:	22 83       	std	Z+2, r18	; 0x02
						pxBlock->xBlockSize = xWantedSize;
    1748:	5b 83       	std	Y+3, r21	; 0x03
    174a:	4a 83       	std	Y+2, r20	; 0x02

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
    174c:	2d df       	rcall	.-422    	; 0x15a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
    174e:	8a 81       	ldd	r24, Y+2	; 0x02
    1750:	9b 81       	ldd	r25, Y+3	; 0x03
    1752:	08 1b       	sub	r16, r24
    1754:	19 0b       	sbc	r17, r25
    1756:	10 93 a2 08 	sts	0x08A2, r17	; 0x8008a2 <xFreeBytesRemaining+0x1>
    175a:	00 93 a1 08 	sts	0x08A1, r16	; 0x8008a1 <xFreeBytesRemaining>

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
    175e:	20 91 9f 08 	lds	r18, 0x089F	; 0x80089f <xMinimumEverFreeBytesRemaining>
    1762:	30 91 a0 08 	lds	r19, 0x08A0	; 0x8008a0 <xMinimumEverFreeBytesRemaining+0x1>
    1766:	02 17       	cp	r16, r18
    1768:	13 07       	cpc	r17, r19
    176a:	20 f4       	brcc	.+8      	; 0x1774 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
    176c:	10 93 a0 08 	sts	0x08A0, r17	; 0x8008a0 <xMinimumEverFreeBytesRemaining+0x1>
    1770:	00 93 9f 08 	sts	0x089F, r16	; 0x80089f <xMinimumEverFreeBytesRemaining>
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
    1774:	e8 2a       	or	r14, r24
    1776:	f9 2a       	or	r15, r25
    1778:	fb 82       	std	Y+3, r15	; 0x03
    177a:	ea 82       	std	Y+2, r14	; 0x02
					pxBlock->pxNextFreeBlock = NULL;
    177c:	19 82       	std	Y+1, r1	; 0x01
    177e:	18 82       	st	Y, r1
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    1780:	0e 94 9b 17 	call	0x2f36	; 0x2f36 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
    1784:	c1 14       	cp	r12, r1
    1786:	d1 04       	cpc	r13, r1
    1788:	59 f4       	brne	.+22     	; 0x17a0 <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
    178a:	0e 94 70 1e 	call	0x3ce0	; 0x3ce0 <vApplicationMallocFailedHook>
    178e:	c1 2c       	mov	r12, r1
    1790:	d1 2c       	mov	r13, r1
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
    1792:	06 c0       	rjmp	.+12     	; 0x17a0 <pvPortMalloc+0x15e>
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    1794:	0e 94 9b 17 	call	0x2f36	; 0x2f36 <xTaskResumeAll>
    1798:	f8 cf       	rjmp	.-16     	; 0x178a <pvPortMalloc+0x148>
    179a:	0e 94 9b 17 	call	0x2f36	; 0x2f36 <xTaskResumeAll>
    179e:	f5 cf       	rjmp	.-22     	; 0x178a <pvPortMalloc+0x148>
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
}
    17a0:	c6 01       	movw	r24, r12
    17a2:	df 91       	pop	r29
    17a4:	cf 91       	pop	r28
    17a6:	1f 91       	pop	r17
    17a8:	0f 91       	pop	r16
    17aa:	ff 90       	pop	r15
    17ac:	ef 90       	pop	r14
    17ae:	df 90       	pop	r13
    17b0:	cf 90       	pop	r12
    17b2:	08 95       	ret

000017b4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    17b4:	cf 93       	push	r28
    17b6:	df 93       	push	r29
uint8_t *puc = ( uint8_t * ) pv;
BlockLink_t *pxLink;

	if( pv != NULL )
    17b8:	00 97       	sbiw	r24, 0x00	; 0
    17ba:	51 f1       	breq	.+84     	; 0x1810 <vPortFree+0x5c>

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
		configASSERT( pxLink->pxNextFreeBlock == NULL );

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
    17bc:	fc 01       	movw	r30, r24
    17be:	34 97       	sbiw	r30, 0x04	; 4
    17c0:	22 81       	ldd	r18, Z+2	; 0x02
    17c2:	33 81       	ldd	r19, Z+3	; 0x03
    17c4:	40 91 9d 08 	lds	r20, 0x089D	; 0x80089d <xBlockAllocatedBit>
    17c8:	50 91 9e 08 	lds	r21, 0x089E	; 0x80089e <xBlockAllocatedBit+0x1>
    17cc:	b9 01       	movw	r22, r18
    17ce:	64 23       	and	r22, r20
    17d0:	75 23       	and	r23, r21
    17d2:	67 2b       	or	r22, r23
    17d4:	e9 f0       	breq	.+58     	; 0x1810 <vPortFree+0x5c>
		{
			if( pxLink->pxNextFreeBlock == NULL )
    17d6:	60 81       	ld	r22, Z
    17d8:	71 81       	ldd	r23, Z+1	; 0x01
    17da:	67 2b       	or	r22, r23
    17dc:	c9 f4       	brne	.+50     	; 0x1810 <vPortFree+0x5c>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
    17de:	ef 01       	movw	r28, r30
    17e0:	40 95       	com	r20
    17e2:	50 95       	com	r21
    17e4:	24 23       	and	r18, r20
    17e6:	35 23       	and	r19, r21
    17e8:	33 83       	std	Z+3, r19	; 0x03
    17ea:	22 83       	std	Z+2, r18	; 0x02

				vTaskSuspendAll();
    17ec:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
    17f0:	20 91 a1 08 	lds	r18, 0x08A1	; 0x8008a1 <xFreeBytesRemaining>
    17f4:	30 91 a2 08 	lds	r19, 0x08A2	; 0x8008a2 <xFreeBytesRemaining+0x1>
    17f8:	8a 81       	ldd	r24, Y+2	; 0x02
    17fa:	9b 81       	ldd	r25, Y+3	; 0x03
    17fc:	82 0f       	add	r24, r18
    17fe:	93 1f       	adc	r25, r19
    1800:	90 93 a2 08 	sts	0x08A2, r25	; 0x8008a2 <xFreeBytesRemaining+0x1>
    1804:	80 93 a1 08 	sts	0x08A1, r24	; 0x8008a1 <xFreeBytesRemaining>
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
    1808:	ce 01       	movw	r24, r28
    180a:	ce de       	rcall	.-612    	; 0x15a8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
    180c:	0e 94 9b 17 	call	0x2f36	; 0x2f36 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
    1810:	df 91       	pop	r29
    1812:	cf 91       	pop	r28
    1814:	08 95       	ret

00001816 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    1816:	fc 01       	movw	r30, r24
    /* The list structure contains a list item which is used to mark the
    end of the list.  To initialise the list the list end is inserted
    as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );            /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1818:	03 96       	adiw	r24, 0x03	; 3
    181a:	92 83       	std	Z+2, r25	; 0x02
    181c:	81 83       	std	Z+1, r24	; 0x01

    /* The list end value is the highest possible value in the list to
    ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
    181e:	4f ef       	ldi	r20, 0xFF	; 255
    1820:	5f ef       	ldi	r21, 0xFF	; 255
    1822:	ba 01       	movw	r22, r20
    1824:	43 83       	std	Z+3, r20	; 0x03
    1826:	54 83       	std	Z+4, r21	; 0x04
    1828:	65 83       	std	Z+5, r22	; 0x05
    182a:	76 83       	std	Z+6, r23	; 0x06

    /* The list end next and previous pointers point to itself so we know
    when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );    /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    182c:	90 87       	std	Z+8, r25	; 0x08
    182e:	87 83       	std	Z+7, r24	; 0x07
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1830:	92 87       	std	Z+10, r25	; 0x0a
    1832:	81 87       	std	Z+9, r24	; 0x09

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    1834:	10 82       	st	Z, r1
    1836:	08 95       	ret

00001838 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
    1838:	fc 01       	movw	r30, r24
    183a:	13 86       	std	Z+11, r1	; 0x0b
    183c:	12 86       	std	Z+10, r1	; 0x0a
    183e:	08 95       	ret

00001840 <vListInsertEnd>:
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    1840:	cf 93       	push	r28
    1842:	df 93       	push	r29
    1844:	9c 01       	movw	r18, r24
    1846:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
    1848:	dc 01       	movw	r26, r24
    184a:	11 96       	adiw	r26, 0x01	; 1
    184c:	cd 91       	ld	r28, X+
    184e:	dc 91       	ld	r29, X
    1850:	12 97       	sbiw	r26, 0x02	; 2
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
    makes the new list item the last item to be removed by a call to
    listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
    1852:	d5 83       	std	Z+5, r29	; 0x05
    1854:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    1856:	8e 81       	ldd	r24, Y+6	; 0x06
    1858:	9f 81       	ldd	r25, Y+7	; 0x07
    185a:	97 83       	std	Z+7, r25	; 0x07
    185c:	86 83       	std	Z+6, r24	; 0x06

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
    185e:	8e 81       	ldd	r24, Y+6	; 0x06
    1860:	9f 81       	ldd	r25, Y+7	; 0x07
    1862:	dc 01       	movw	r26, r24
    1864:	15 96       	adiw	r26, 0x05	; 5
    1866:	7c 93       	st	X, r23
    1868:	6e 93       	st	-X, r22
    186a:	14 97       	sbiw	r26, 0x04	; 4
    pxIndex->pxPrevious = pxNewListItem;
    186c:	7f 83       	std	Y+7, r23	; 0x07
    186e:	6e 83       	std	Y+6, r22	; 0x06

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
    1870:	33 87       	std	Z+11, r19	; 0x0b
    1872:	22 87       	std	Z+10, r18	; 0x0a

    ( pxList->uxNumberOfItems )++;
    1874:	f9 01       	movw	r30, r18
    1876:	80 81       	ld	r24, Z
    1878:	8f 5f       	subi	r24, 0xFF	; 255
    187a:	80 83       	st	Z, r24
}
    187c:	df 91       	pop	r29
    187e:	cf 91       	pop	r28
    1880:	08 95       	ret

00001882 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    1882:	0f 93       	push	r16
    1884:	1f 93       	push	r17
    1886:	cf 93       	push	r28
    1888:	df 93       	push	r29
    188a:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    188c:	08 81       	ld	r16, Y
    188e:	19 81       	ldd	r17, Y+1	; 0x01
    1890:	2a 81       	ldd	r18, Y+2	; 0x02
    1892:	3b 81       	ldd	r19, Y+3	; 0x03
    new list item should be placed after it.  This ensures that TCBs which are
    stored in ready lists (all of which have the same xItemValue value) get a
    share of the CPU.  However, if the xItemValue is the same as the back marker
    the iteration loop below will not end.  Therefore the value is checked
    first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
    1894:	0f 3f       	cpi	r16, 0xFF	; 255
    1896:	4f ef       	ldi	r20, 0xFF	; 255
    1898:	14 07       	cpc	r17, r20
    189a:	24 07       	cpc	r18, r20
    189c:	34 07       	cpc	r19, r20
    189e:	21 f4       	brne	.+8      	; 0x18a8 <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
    18a0:	fc 01       	movw	r30, r24
    18a2:	a1 85       	ldd	r26, Z+9	; 0x09
    18a4:	b2 85       	ldd	r27, Z+10	; 0x0a
    18a6:	11 c0       	rjmp	.+34     	; 0x18ca <vListInsert+0x48>
            4) Using a queue or semaphore before it has been initialised or
               before the scheduler has been started (are interrupts firing
               before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
    18a8:	dc 01       	movw	r26, r24
    18aa:	13 96       	adiw	r26, 0x03	; 3
    18ac:	01 c0       	rjmp	.+2      	; 0x18b0 <vListInsert+0x2e>
    18ae:	df 01       	movw	r26, r30
    18b0:	14 96       	adiw	r26, 0x04	; 4
    18b2:	ed 91       	ld	r30, X+
    18b4:	fc 91       	ld	r31, X
    18b6:	15 97       	sbiw	r26, 0x05	; 5
    18b8:	40 81       	ld	r20, Z
    18ba:	51 81       	ldd	r21, Z+1	; 0x01
    18bc:	62 81       	ldd	r22, Z+2	; 0x02
    18be:	73 81       	ldd	r23, Z+3	; 0x03
    18c0:	04 17       	cp	r16, r20
    18c2:	15 07       	cpc	r17, r21
    18c4:	26 07       	cpc	r18, r22
    18c6:	37 07       	cpc	r19, r23
    18c8:	90 f7       	brcc	.-28     	; 0x18ae <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
            insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
    18ca:	14 96       	adiw	r26, 0x04	; 4
    18cc:	ed 91       	ld	r30, X+
    18ce:	fc 91       	ld	r31, X
    18d0:	15 97       	sbiw	r26, 0x05	; 5
    18d2:	fd 83       	std	Y+5, r31	; 0x05
    18d4:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    18d6:	d7 83       	std	Z+7, r29	; 0x07
    18d8:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
    18da:	bf 83       	std	Y+7, r27	; 0x07
    18dc:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
    18de:	15 96       	adiw	r26, 0x05	; 5
    18e0:	dc 93       	st	X, r29
    18e2:	ce 93       	st	-X, r28
    18e4:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
    item later. */
    pxNewListItem->pxContainer = pxList;
    18e6:	9b 87       	std	Y+11, r25	; 0x0b
    18e8:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
    18ea:	fc 01       	movw	r30, r24
    18ec:	20 81       	ld	r18, Z
    18ee:	2f 5f       	subi	r18, 0xFF	; 255
    18f0:	20 83       	st	Z, r18
}
    18f2:	df 91       	pop	r29
    18f4:	cf 91       	pop	r28
    18f6:	1f 91       	pop	r17
    18f8:	0f 91       	pop	r16
    18fa:	08 95       	ret

000018fc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    18fc:	cf 93       	push	r28
    18fe:	df 93       	push	r29
    1900:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
    1902:	a2 85       	ldd	r26, Z+10	; 0x0a
    1904:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    1906:	c4 81       	ldd	r28, Z+4	; 0x04
    1908:	d5 81       	ldd	r29, Z+5	; 0x05
    190a:	86 81       	ldd	r24, Z+6	; 0x06
    190c:	97 81       	ldd	r25, Z+7	; 0x07
    190e:	9f 83       	std	Y+7, r25	; 0x07
    1910:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    1912:	c6 81       	ldd	r28, Z+6	; 0x06
    1914:	d7 81       	ldd	r29, Z+7	; 0x07
    1916:	84 81       	ldd	r24, Z+4	; 0x04
    1918:	95 81       	ldd	r25, Z+5	; 0x05
    191a:	9d 83       	std	Y+5, r25	; 0x05
    191c:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
    191e:	11 96       	adiw	r26, 0x01	; 1
    1920:	8d 91       	ld	r24, X+
    1922:	9c 91       	ld	r25, X
    1924:	12 97       	sbiw	r26, 0x02	; 2
    1926:	e8 17       	cp	r30, r24
    1928:	f9 07       	cpc	r31, r25
    192a:	31 f4       	brne	.+12     	; 0x1938 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
    192c:	86 81       	ldd	r24, Z+6	; 0x06
    192e:	97 81       	ldd	r25, Z+7	; 0x07
    1930:	12 96       	adiw	r26, 0x02	; 2
    1932:	9c 93       	st	X, r25
    1934:	8e 93       	st	-X, r24
    1936:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
    1938:	13 86       	std	Z+11, r1	; 0x0b
    193a:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
    193c:	8c 91       	ld	r24, X
    193e:	81 50       	subi	r24, 0x01	; 1
    1940:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
    1942:	8c 91       	ld	r24, X
}
    1944:	df 91       	pop	r29
    1946:	cf 91       	pop	r28
    1948:	08 95       	ret

0000194a <pxPortInitialiseStack>:
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    194a:	31 e1       	ldi	r19, 0x11	; 17
    194c:	fc 01       	movw	r30, r24
    194e:	30 83       	st	Z, r19
    1950:	31 97       	sbiw	r30, 0x01	; 1
    1952:	22 e2       	ldi	r18, 0x22	; 34
    1954:	20 83       	st	Z, r18
    1956:	31 97       	sbiw	r30, 0x01	; 1
    1958:	a3 e3       	ldi	r26, 0x33	; 51
    195a:	a0 83       	st	Z, r26
    195c:	31 97       	sbiw	r30, 0x01	; 1
    195e:	60 83       	st	Z, r22
    1960:	31 97       	sbiw	r30, 0x01	; 1
    1962:	70 83       	st	Z, r23
    1964:	31 97       	sbiw	r30, 0x01	; 1
    1966:	10 82       	st	Z, r1
    1968:	31 97       	sbiw	r30, 0x01	; 1
    196a:	10 82       	st	Z, r1
    196c:	31 97       	sbiw	r30, 0x01	; 1
    196e:	60 e8       	ldi	r22, 0x80	; 128
    1970:	60 83       	st	Z, r22
    1972:	31 97       	sbiw	r30, 0x01	; 1
    1974:	10 82       	st	Z, r1
    1976:	31 97       	sbiw	r30, 0x01	; 1
    1978:	10 82       	st	Z, r1
    197a:	31 97       	sbiw	r30, 0x01	; 1
    197c:	10 82       	st	Z, r1
    197e:	31 97       	sbiw	r30, 0x01	; 1
    1980:	62 e0       	ldi	r22, 0x02	; 2
    1982:	60 83       	st	Z, r22
    1984:	31 97       	sbiw	r30, 0x01	; 1
    1986:	63 e0       	ldi	r22, 0x03	; 3
    1988:	60 83       	st	Z, r22
    198a:	31 97       	sbiw	r30, 0x01	; 1
    198c:	64 e0       	ldi	r22, 0x04	; 4
    198e:	60 83       	st	Z, r22
    1990:	31 97       	sbiw	r30, 0x01	; 1
    1992:	65 e0       	ldi	r22, 0x05	; 5
    1994:	60 83       	st	Z, r22
    1996:	31 97       	sbiw	r30, 0x01	; 1
    1998:	66 e0       	ldi	r22, 0x06	; 6
    199a:	60 83       	st	Z, r22
    199c:	31 97       	sbiw	r30, 0x01	; 1
    199e:	67 e0       	ldi	r22, 0x07	; 7
    19a0:	60 83       	st	Z, r22
    19a2:	31 97       	sbiw	r30, 0x01	; 1
    19a4:	68 e0       	ldi	r22, 0x08	; 8
    19a6:	60 83       	st	Z, r22
    19a8:	31 97       	sbiw	r30, 0x01	; 1
    19aa:	69 e0       	ldi	r22, 0x09	; 9
    19ac:	60 83       	st	Z, r22
    19ae:	31 97       	sbiw	r30, 0x01	; 1
    19b0:	60 e1       	ldi	r22, 0x10	; 16
    19b2:	60 83       	st	Z, r22
    19b4:	31 97       	sbiw	r30, 0x01	; 1
    19b6:	30 83       	st	Z, r19
    19b8:	31 97       	sbiw	r30, 0x01	; 1
    19ba:	32 e1       	ldi	r19, 0x12	; 18
    19bc:	30 83       	st	Z, r19
    19be:	31 97       	sbiw	r30, 0x01	; 1
    19c0:	33 e1       	ldi	r19, 0x13	; 19
    19c2:	30 83       	st	Z, r19
    19c4:	31 97       	sbiw	r30, 0x01	; 1
    19c6:	34 e1       	ldi	r19, 0x14	; 20
    19c8:	30 83       	st	Z, r19
    19ca:	31 97       	sbiw	r30, 0x01	; 1
    19cc:	35 e1       	ldi	r19, 0x15	; 21
    19ce:	30 83       	st	Z, r19
    19d0:	31 97       	sbiw	r30, 0x01	; 1
    19d2:	36 e1       	ldi	r19, 0x16	; 22
    19d4:	30 83       	st	Z, r19
    19d6:	31 97       	sbiw	r30, 0x01	; 1
    19d8:	37 e1       	ldi	r19, 0x17	; 23
    19da:	30 83       	st	Z, r19
    19dc:	31 97       	sbiw	r30, 0x01	; 1
    19de:	38 e1       	ldi	r19, 0x18	; 24
    19e0:	30 83       	st	Z, r19
    19e2:	31 97       	sbiw	r30, 0x01	; 1
    19e4:	39 e1       	ldi	r19, 0x19	; 25
    19e6:	30 83       	st	Z, r19
    19e8:	31 97       	sbiw	r30, 0x01	; 1
    19ea:	30 e2       	ldi	r19, 0x20	; 32
    19ec:	30 83       	st	Z, r19
    19ee:	31 97       	sbiw	r30, 0x01	; 1
    19f0:	31 e2       	ldi	r19, 0x21	; 33
    19f2:	30 83       	st	Z, r19
    19f4:	31 97       	sbiw	r30, 0x01	; 1
    19f6:	20 83       	st	Z, r18
    19f8:	31 97       	sbiw	r30, 0x01	; 1
    19fa:	23 e2       	ldi	r18, 0x23	; 35
    19fc:	20 83       	st	Z, r18
    19fe:	31 97       	sbiw	r30, 0x01	; 1
    1a00:	40 83       	st	Z, r20
    1a02:	31 97       	sbiw	r30, 0x01	; 1
    1a04:	50 83       	st	Z, r21
    1a06:	31 97       	sbiw	r30, 0x01	; 1
    1a08:	26 e2       	ldi	r18, 0x26	; 38
    1a0a:	20 83       	st	Z, r18
    1a0c:	31 97       	sbiw	r30, 0x01	; 1
    1a0e:	27 e2       	ldi	r18, 0x27	; 39
    1a10:	20 83       	st	Z, r18
    1a12:	31 97       	sbiw	r30, 0x01	; 1
    1a14:	28 e2       	ldi	r18, 0x28	; 40
    1a16:	20 83       	st	Z, r18
    1a18:	31 97       	sbiw	r30, 0x01	; 1
    1a1a:	29 e2       	ldi	r18, 0x29	; 41
    1a1c:	20 83       	st	Z, r18
    1a1e:	31 97       	sbiw	r30, 0x01	; 1
    1a20:	20 e3       	ldi	r18, 0x30	; 48
    1a22:	20 83       	st	Z, r18
    1a24:	31 97       	sbiw	r30, 0x01	; 1
    1a26:	21 e3       	ldi	r18, 0x31	; 49
    1a28:	20 83       	st	Z, r18
    1a2a:	89 97       	sbiw	r24, 0x29	; 41
    1a2c:	08 95       	ret

00001a2e <xPortStartScheduler>:
    1a2e:	a8 95       	wdr
    1a30:	90 ec       	ldi	r25, 0xC0	; 192
    1a32:	88 e1       	ldi	r24, 0x18	; 24
    1a34:	0f b6       	in	r0, 0x3f	; 63
    1a36:	f8 94       	cli
    1a38:	a8 95       	wdr
    1a3a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    1a3e:	0f be       	out	0x3f, r0	; 63
    1a40:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    1a44:	a0 91 d9 18 	lds	r26, 0x18D9	; 0x8018d9 <pxCurrentTCB>
    1a48:	b0 91 da 18 	lds	r27, 0x18DA	; 0x8018da <pxCurrentTCB+0x1>
    1a4c:	cd 91       	ld	r28, X+
    1a4e:	cd bf       	out	0x3d, r28	; 61
    1a50:	dd 91       	ld	r29, X+
    1a52:	de bf       	out	0x3e, r29	; 62
    1a54:	ff 91       	pop	r31
    1a56:	ef 91       	pop	r30
    1a58:	df 91       	pop	r29
    1a5a:	cf 91       	pop	r28
    1a5c:	bf 91       	pop	r27
    1a5e:	af 91       	pop	r26
    1a60:	9f 91       	pop	r25
    1a62:	8f 91       	pop	r24
    1a64:	7f 91       	pop	r23
    1a66:	6f 91       	pop	r22
    1a68:	5f 91       	pop	r21
    1a6a:	4f 91       	pop	r20
    1a6c:	3f 91       	pop	r19
    1a6e:	2f 91       	pop	r18
    1a70:	1f 91       	pop	r17
    1a72:	0f 91       	pop	r16
    1a74:	ff 90       	pop	r15
    1a76:	ef 90       	pop	r14
    1a78:	df 90       	pop	r13
    1a7a:	cf 90       	pop	r12
    1a7c:	bf 90       	pop	r11
    1a7e:	af 90       	pop	r10
    1a80:	9f 90       	pop	r9
    1a82:	8f 90       	pop	r8
    1a84:	7f 90       	pop	r7
    1a86:	6f 90       	pop	r6
    1a88:	5f 90       	pop	r5
    1a8a:	4f 90       	pop	r4
    1a8c:	3f 90       	pop	r3
    1a8e:	2f 90       	pop	r2
    1a90:	1f 90       	pop	r1
    1a92:	0f 90       	pop	r0
    1a94:	0c be       	out	0x3c, r0	; 60
    1a96:	0f 90       	pop	r0
    1a98:	0b be       	out	0x3b, r0	; 59
    1a9a:	0f 90       	pop	r0
    1a9c:	0f be       	out	0x3f, r0	; 63
    1a9e:	0f 90       	pop	r0
    1aa0:	08 95       	ret
    1aa2:	81 e0       	ldi	r24, 0x01	; 1
    1aa4:	08 95       	ret

00001aa6 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYield( void )
{
    portSAVE_CONTEXT();
    1aa6:	0f 92       	push	r0
    1aa8:	0f b6       	in	r0, 0x3f	; 63
    1aaa:	f8 94       	cli
    1aac:	0f 92       	push	r0
    1aae:	0b b6       	in	r0, 0x3b	; 59
    1ab0:	0f 92       	push	r0
    1ab2:	0c b6       	in	r0, 0x3c	; 60
    1ab4:	0f 92       	push	r0
    1ab6:	1f 92       	push	r1
    1ab8:	11 24       	eor	r1, r1
    1aba:	2f 92       	push	r2
    1abc:	3f 92       	push	r3
    1abe:	4f 92       	push	r4
    1ac0:	5f 92       	push	r5
    1ac2:	6f 92       	push	r6
    1ac4:	7f 92       	push	r7
    1ac6:	8f 92       	push	r8
    1ac8:	9f 92       	push	r9
    1aca:	af 92       	push	r10
    1acc:	bf 92       	push	r11
    1ace:	cf 92       	push	r12
    1ad0:	df 92       	push	r13
    1ad2:	ef 92       	push	r14
    1ad4:	ff 92       	push	r15
    1ad6:	0f 93       	push	r16
    1ad8:	1f 93       	push	r17
    1ada:	2f 93       	push	r18
    1adc:	3f 93       	push	r19
    1ade:	4f 93       	push	r20
    1ae0:	5f 93       	push	r21
    1ae2:	6f 93       	push	r22
    1ae4:	7f 93       	push	r23
    1ae6:	8f 93       	push	r24
    1ae8:	9f 93       	push	r25
    1aea:	af 93       	push	r26
    1aec:	bf 93       	push	r27
    1aee:	cf 93       	push	r28
    1af0:	df 93       	push	r29
    1af2:	ef 93       	push	r30
    1af4:	ff 93       	push	r31
    1af6:	a0 91 d9 18 	lds	r26, 0x18D9	; 0x8018d9 <pxCurrentTCB>
    1afa:	b0 91 da 18 	lds	r27, 0x18DA	; 0x8018da <pxCurrentTCB+0x1>
    1afe:	0d b6       	in	r0, 0x3d	; 61
    1b00:	0d 92       	st	X+, r0
    1b02:	0e b6       	in	r0, 0x3e	; 62
    1b04:	0d 92       	st	X+, r0
    vTaskSwitchContext();
    1b06:	0e 94 30 18 	call	0x3060	; 0x3060 <vTaskSwitchContext>
    portRESTORE_CONTEXT();
    1b0a:	a0 91 d9 18 	lds	r26, 0x18D9	; 0x8018d9 <pxCurrentTCB>
    1b0e:	b0 91 da 18 	lds	r27, 0x18DA	; 0x8018da <pxCurrentTCB+0x1>
    1b12:	cd 91       	ld	r28, X+
    1b14:	cd bf       	out	0x3d, r28	; 61
    1b16:	dd 91       	ld	r29, X+
    1b18:	de bf       	out	0x3e, r29	; 62
    1b1a:	ff 91       	pop	r31
    1b1c:	ef 91       	pop	r30
    1b1e:	df 91       	pop	r29
    1b20:	cf 91       	pop	r28
    1b22:	bf 91       	pop	r27
    1b24:	af 91       	pop	r26
    1b26:	9f 91       	pop	r25
    1b28:	8f 91       	pop	r24
    1b2a:	7f 91       	pop	r23
    1b2c:	6f 91       	pop	r22
    1b2e:	5f 91       	pop	r21
    1b30:	4f 91       	pop	r20
    1b32:	3f 91       	pop	r19
    1b34:	2f 91       	pop	r18
    1b36:	1f 91       	pop	r17
    1b38:	0f 91       	pop	r16
    1b3a:	ff 90       	pop	r15
    1b3c:	ef 90       	pop	r14
    1b3e:	df 90       	pop	r13
    1b40:	cf 90       	pop	r12
    1b42:	bf 90       	pop	r11
    1b44:	af 90       	pop	r10
    1b46:	9f 90       	pop	r9
    1b48:	8f 90       	pop	r8
    1b4a:	7f 90       	pop	r7
    1b4c:	6f 90       	pop	r6
    1b4e:	5f 90       	pop	r5
    1b50:	4f 90       	pop	r4
    1b52:	3f 90       	pop	r3
    1b54:	2f 90       	pop	r2
    1b56:	1f 90       	pop	r1
    1b58:	0f 90       	pop	r0
    1b5a:	0c be       	out	0x3c, r0	; 60
    1b5c:	0f 90       	pop	r0
    1b5e:	0b be       	out	0x3b, r0	; 59
    1b60:	0f 90       	pop	r0
    1b62:	0f be       	out	0x3f, r0	; 63
    1b64:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
    1b66:	08 95       	ret

00001b68 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
    1b68:	0f 92       	push	r0
    1b6a:	0f b6       	in	r0, 0x3f	; 63
    1b6c:	f8 94       	cli
    1b6e:	0f 92       	push	r0
    1b70:	0b b6       	in	r0, 0x3b	; 59
    1b72:	0f 92       	push	r0
    1b74:	0c b6       	in	r0, 0x3c	; 60
    1b76:	0f 92       	push	r0
    1b78:	1f 92       	push	r1
    1b7a:	11 24       	eor	r1, r1
    1b7c:	2f 92       	push	r2
    1b7e:	3f 92       	push	r3
    1b80:	4f 92       	push	r4
    1b82:	5f 92       	push	r5
    1b84:	6f 92       	push	r6
    1b86:	7f 92       	push	r7
    1b88:	8f 92       	push	r8
    1b8a:	9f 92       	push	r9
    1b8c:	af 92       	push	r10
    1b8e:	bf 92       	push	r11
    1b90:	cf 92       	push	r12
    1b92:	df 92       	push	r13
    1b94:	ef 92       	push	r14
    1b96:	ff 92       	push	r15
    1b98:	0f 93       	push	r16
    1b9a:	1f 93       	push	r17
    1b9c:	2f 93       	push	r18
    1b9e:	3f 93       	push	r19
    1ba0:	4f 93       	push	r20
    1ba2:	5f 93       	push	r21
    1ba4:	6f 93       	push	r22
    1ba6:	7f 93       	push	r23
    1ba8:	8f 93       	push	r24
    1baa:	9f 93       	push	r25
    1bac:	af 93       	push	r26
    1bae:	bf 93       	push	r27
    1bb0:	cf 93       	push	r28
    1bb2:	df 93       	push	r29
    1bb4:	ef 93       	push	r30
    1bb6:	ff 93       	push	r31
    1bb8:	a0 91 d9 18 	lds	r26, 0x18D9	; 0x8018d9 <pxCurrentTCB>
    1bbc:	b0 91 da 18 	lds	r27, 0x18DA	; 0x8018da <pxCurrentTCB+0x1>
    1bc0:	0d b6       	in	r0, 0x3d	; 61
    1bc2:	0d 92       	st	X+, r0
    1bc4:	0e b6       	in	r0, 0x3e	; 62
    1bc6:	0d 92       	st	X+, r0

    sleep_reset();        //     reset the sleep_mode() faster than sleep_disable();
    1bc8:	13 be       	out	0x33, r1	; 51

    if( xTaskIncrementTick() != pdFALSE )
    1bca:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <xTaskIncrementTick>
    1bce:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
    1bd0:	0e 94 30 18 	call	0x3060	; 0x3060 <vTaskSwitchContext>
    }

    portRESTORE_CONTEXT();
    1bd4:	a0 91 d9 18 	lds	r26, 0x18D9	; 0x8018d9 <pxCurrentTCB>
    1bd8:	b0 91 da 18 	lds	r27, 0x18DA	; 0x8018da <pxCurrentTCB+0x1>
    1bdc:	cd 91       	ld	r28, X+
    1bde:	cd bf       	out	0x3d, r28	; 61
    1be0:	dd 91       	ld	r29, X+
    1be2:	de bf       	out	0x3e, r29	; 62
    1be4:	ff 91       	pop	r31
    1be6:	ef 91       	pop	r30
    1be8:	df 91       	pop	r29
    1bea:	cf 91       	pop	r28
    1bec:	bf 91       	pop	r27
    1bee:	af 91       	pop	r26
    1bf0:	9f 91       	pop	r25
    1bf2:	8f 91       	pop	r24
    1bf4:	7f 91       	pop	r23
    1bf6:	6f 91       	pop	r22
    1bf8:	5f 91       	pop	r21
    1bfa:	4f 91       	pop	r20
    1bfc:	3f 91       	pop	r19
    1bfe:	2f 91       	pop	r18
    1c00:	1f 91       	pop	r17
    1c02:	0f 91       	pop	r16
    1c04:	ff 90       	pop	r15
    1c06:	ef 90       	pop	r14
    1c08:	df 90       	pop	r13
    1c0a:	cf 90       	pop	r12
    1c0c:	bf 90       	pop	r11
    1c0e:	af 90       	pop	r10
    1c10:	9f 90       	pop	r9
    1c12:	8f 90       	pop	r8
    1c14:	7f 90       	pop	r7
    1c16:	6f 90       	pop	r6
    1c18:	5f 90       	pop	r5
    1c1a:	4f 90       	pop	r4
    1c1c:	3f 90       	pop	r3
    1c1e:	2f 90       	pop	r2
    1c20:	1f 90       	pop	r1
    1c22:	0f 90       	pop	r0
    1c24:	0c be       	out	0x3c, r0	; 60
    1c26:	0f 90       	pop	r0
    1c28:	0b be       	out	0x3b, r0	; 59
    1c2a:	0f 90       	pop	r0
    1c2c:	0f be       	out	0x3f, r0	; 63
    1c2e:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
    1c30:	08 95       	ret

00001c32 <__vector_12>:
     */
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
//  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
    1c32:	9a df       	rcall	.-204    	; 0x1b68 <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
    1c34:	18 95       	reti

00001c36 <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    1c36:	0f b6       	in	r0, 0x3f	; 63
    1c38:	f8 94       	cli
    1c3a:	0f 92       	push	r0
    1c3c:	fc 01       	movw	r30, r24
    1c3e:	96 8d       	ldd	r25, Z+30	; 0x1e
    1c40:	0f 90       	pop	r0
    1c42:	0f be       	out	0x3f, r0	; 63
    1c44:	81 e0       	ldi	r24, 0x01	; 1
    1c46:	91 11       	cpse	r25, r1
    1c48:	80 e0       	ldi	r24, 0x00	; 0
    1c4a:	08 95       	ret

00001c4c <prvCopyDataToQueue>:
    1c4c:	0f 93       	push	r16
    1c4e:	1f 93       	push	r17
    1c50:	cf 93       	push	r28
    1c52:	df 93       	push	r29
    1c54:	ec 01       	movw	r28, r24
    1c56:	04 2f       	mov	r16, r20
    1c58:	1e 8d       	ldd	r17, Y+30	; 0x1e
    1c5a:	48 a1       	ldd	r20, Y+32	; 0x20
    1c5c:	41 11       	cpse	r20, r1
    1c5e:	0c c0       	rjmp	.+24     	; 0x1c78 <prvCopyDataToQueue+0x2c>
    1c60:	88 81       	ld	r24, Y
    1c62:	99 81       	ldd	r25, Y+1	; 0x01
    1c64:	89 2b       	or	r24, r25
    1c66:	09 f0       	breq	.+2      	; 0x1c6a <prvCopyDataToQueue+0x1e>
    1c68:	42 c0       	rjmp	.+132    	; 0x1cee <prvCopyDataToQueue+0xa2>
    1c6a:	8c 81       	ldd	r24, Y+4	; 0x04
    1c6c:	9d 81       	ldd	r25, Y+5	; 0x05
    1c6e:	0e 94 81 1a 	call	0x3502	; 0x3502 <xTaskPriorityDisinherit>
    1c72:	1d 82       	std	Y+5, r1	; 0x05
    1c74:	1c 82       	std	Y+4, r1	; 0x04
    1c76:	42 c0       	rjmp	.+132    	; 0x1cfc <prvCopyDataToQueue+0xb0>
    1c78:	01 11       	cpse	r16, r1
    1c7a:	17 c0       	rjmp	.+46     	; 0x1caa <prvCopyDataToQueue+0x5e>
    1c7c:	50 e0       	ldi	r21, 0x00	; 0
    1c7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c80:	9b 81       	ldd	r25, Y+3	; 0x03
    1c82:	0e 94 11 31 	call	0x6222	; 0x6222 <memcpy>
    1c86:	28 a1       	ldd	r18, Y+32	; 0x20
    1c88:	8a 81       	ldd	r24, Y+2	; 0x02
    1c8a:	9b 81       	ldd	r25, Y+3	; 0x03
    1c8c:	82 0f       	add	r24, r18
    1c8e:	91 1d       	adc	r25, r1
    1c90:	9b 83       	std	Y+3, r25	; 0x03
    1c92:	8a 83       	std	Y+2, r24	; 0x02
    1c94:	2c 81       	ldd	r18, Y+4	; 0x04
    1c96:	3d 81       	ldd	r19, Y+5	; 0x05
    1c98:	82 17       	cp	r24, r18
    1c9a:	93 07       	cpc	r25, r19
    1c9c:	50 f1       	brcs	.+84     	; 0x1cf2 <prvCopyDataToQueue+0xa6>
    1c9e:	88 81       	ld	r24, Y
    1ca0:	99 81       	ldd	r25, Y+1	; 0x01
    1ca2:	9b 83       	std	Y+3, r25	; 0x03
    1ca4:	8a 83       	std	Y+2, r24	; 0x02
    1ca6:	80 e0       	ldi	r24, 0x00	; 0
    1ca8:	29 c0       	rjmp	.+82     	; 0x1cfc <prvCopyDataToQueue+0xb0>
    1caa:	50 e0       	ldi	r21, 0x00	; 0
    1cac:	8e 81       	ldd	r24, Y+6	; 0x06
    1cae:	9f 81       	ldd	r25, Y+7	; 0x07
    1cb0:	0e 94 11 31 	call	0x6222	; 0x6222 <memcpy>
    1cb4:	88 a1       	ldd	r24, Y+32	; 0x20
    1cb6:	90 e0       	ldi	r25, 0x00	; 0
    1cb8:	91 95       	neg	r25
    1cba:	81 95       	neg	r24
    1cbc:	91 09       	sbc	r25, r1
    1cbe:	2e 81       	ldd	r18, Y+6	; 0x06
    1cc0:	3f 81       	ldd	r19, Y+7	; 0x07
    1cc2:	28 0f       	add	r18, r24
    1cc4:	39 1f       	adc	r19, r25
    1cc6:	3f 83       	std	Y+7, r19	; 0x07
    1cc8:	2e 83       	std	Y+6, r18	; 0x06
    1cca:	48 81       	ld	r20, Y
    1ccc:	59 81       	ldd	r21, Y+1	; 0x01
    1cce:	24 17       	cp	r18, r20
    1cd0:	35 07       	cpc	r19, r21
    1cd2:	30 f4       	brcc	.+12     	; 0x1ce0 <prvCopyDataToQueue+0x94>
    1cd4:	2c 81       	ldd	r18, Y+4	; 0x04
    1cd6:	3d 81       	ldd	r19, Y+5	; 0x05
    1cd8:	82 0f       	add	r24, r18
    1cda:	93 1f       	adc	r25, r19
    1cdc:	9f 83       	std	Y+7, r25	; 0x07
    1cde:	8e 83       	std	Y+6, r24	; 0x06
    1ce0:	02 30       	cpi	r16, 0x02	; 2
    1ce2:	49 f4       	brne	.+18     	; 0x1cf6 <prvCopyDataToQueue+0xaa>
    1ce4:	11 23       	and	r17, r17
    1ce6:	49 f0       	breq	.+18     	; 0x1cfa <prvCopyDataToQueue+0xae>
    1ce8:	11 50       	subi	r17, 0x01	; 1
    1cea:	80 e0       	ldi	r24, 0x00	; 0
    1cec:	07 c0       	rjmp	.+14     	; 0x1cfc <prvCopyDataToQueue+0xb0>
    1cee:	80 e0       	ldi	r24, 0x00	; 0
    1cf0:	05 c0       	rjmp	.+10     	; 0x1cfc <prvCopyDataToQueue+0xb0>
    1cf2:	80 e0       	ldi	r24, 0x00	; 0
    1cf4:	03 c0       	rjmp	.+6      	; 0x1cfc <prvCopyDataToQueue+0xb0>
    1cf6:	80 e0       	ldi	r24, 0x00	; 0
    1cf8:	01 c0       	rjmp	.+2      	; 0x1cfc <prvCopyDataToQueue+0xb0>
    1cfa:	80 e0       	ldi	r24, 0x00	; 0
    1cfc:	1f 5f       	subi	r17, 0xFF	; 255
    1cfe:	1e 8f       	std	Y+30, r17	; 0x1e
    1d00:	df 91       	pop	r29
    1d02:	cf 91       	pop	r28
    1d04:	1f 91       	pop	r17
    1d06:	0f 91       	pop	r16
    1d08:	08 95       	ret

00001d0a <prvCopyDataFromQueue>:
    1d0a:	fc 01       	movw	r30, r24
    1d0c:	40 a1       	ldd	r20, Z+32	; 0x20
    1d0e:	44 23       	and	r20, r20
    1d10:	a9 f0       	breq	.+42     	; 0x1d3c <prvCopyDataFromQueue+0x32>
    1d12:	50 e0       	ldi	r21, 0x00	; 0
    1d14:	26 81       	ldd	r18, Z+6	; 0x06
    1d16:	37 81       	ldd	r19, Z+7	; 0x07
    1d18:	24 0f       	add	r18, r20
    1d1a:	35 1f       	adc	r19, r21
    1d1c:	37 83       	std	Z+7, r19	; 0x07
    1d1e:	26 83       	std	Z+6, r18	; 0x06
    1d20:	84 81       	ldd	r24, Z+4	; 0x04
    1d22:	95 81       	ldd	r25, Z+5	; 0x05
    1d24:	28 17       	cp	r18, r24
    1d26:	39 07       	cpc	r19, r25
    1d28:	20 f0       	brcs	.+8      	; 0x1d32 <prvCopyDataFromQueue+0x28>
    1d2a:	80 81       	ld	r24, Z
    1d2c:	91 81       	ldd	r25, Z+1	; 0x01
    1d2e:	97 83       	std	Z+7, r25	; 0x07
    1d30:	86 83       	std	Z+6, r24	; 0x06
    1d32:	cb 01       	movw	r24, r22
    1d34:	66 81       	ldd	r22, Z+6	; 0x06
    1d36:	77 81       	ldd	r23, Z+7	; 0x07
    1d38:	0c 94 11 31 	jmp	0x6222	; 0x6222 <memcpy>
    1d3c:	08 95       	ret

00001d3e <prvUnlockQueue>:
    1d3e:	ef 92       	push	r14
    1d40:	ff 92       	push	r15
    1d42:	0f 93       	push	r16
    1d44:	1f 93       	push	r17
    1d46:	cf 93       	push	r28
    1d48:	8c 01       	movw	r16, r24
    1d4a:	0f b6       	in	r0, 0x3f	; 63
    1d4c:	f8 94       	cli
    1d4e:	0f 92       	push	r0
    1d50:	fc 01       	movw	r30, r24
    1d52:	c2 a1       	ldd	r28, Z+34	; 0x22
    1d54:	1c 16       	cp	r1, r28
    1d56:	ac f4       	brge	.+42     	; 0x1d82 <prvUnlockQueue+0x44>
    1d58:	83 89       	ldd	r24, Z+19	; 0x13
    1d5a:	81 11       	cpse	r24, r1
    1d5c:	06 c0       	rjmp	.+12     	; 0x1d6a <prvUnlockQueue+0x2c>
    1d5e:	11 c0       	rjmp	.+34     	; 0x1d82 <prvUnlockQueue+0x44>
    1d60:	f8 01       	movw	r30, r16
    1d62:	83 89       	ldd	r24, Z+19	; 0x13
    1d64:	81 11       	cpse	r24, r1
    1d66:	05 c0       	rjmp	.+10     	; 0x1d72 <prvUnlockQueue+0x34>
    1d68:	0c c0       	rjmp	.+24     	; 0x1d82 <prvUnlockQueue+0x44>
    1d6a:	78 01       	movw	r14, r16
    1d6c:	f3 e1       	ldi	r31, 0x13	; 19
    1d6e:	ef 0e       	add	r14, r31
    1d70:	f1 1c       	adc	r15, r1
    1d72:	c7 01       	movw	r24, r14
    1d74:	0e 94 0a 19 	call	0x3214	; 0x3214 <xTaskRemoveFromEventList>
    1d78:	81 11       	cpse	r24, r1
    1d7a:	0e 94 fc 19 	call	0x33f8	; 0x33f8 <vTaskMissedYield>
    1d7e:	c1 50       	subi	r28, 0x01	; 1
    1d80:	79 f7       	brne	.-34     	; 0x1d60 <prvUnlockQueue+0x22>
    1d82:	8f ef       	ldi	r24, 0xFF	; 255
    1d84:	f8 01       	movw	r30, r16
    1d86:	82 a3       	std	Z+34, r24	; 0x22
    1d88:	0f 90       	pop	r0
    1d8a:	0f be       	out	0x3f, r0	; 63
    1d8c:	0f b6       	in	r0, 0x3f	; 63
    1d8e:	f8 94       	cli
    1d90:	0f 92       	push	r0
    1d92:	c1 a1       	ldd	r28, Z+33	; 0x21
    1d94:	1c 16       	cp	r1, r28
    1d96:	ac f4       	brge	.+42     	; 0x1dc2 <prvUnlockQueue+0x84>
    1d98:	80 85       	ldd	r24, Z+8	; 0x08
    1d9a:	81 11       	cpse	r24, r1
    1d9c:	06 c0       	rjmp	.+12     	; 0x1daa <prvUnlockQueue+0x6c>
    1d9e:	11 c0       	rjmp	.+34     	; 0x1dc2 <prvUnlockQueue+0x84>
    1da0:	f8 01       	movw	r30, r16
    1da2:	80 85       	ldd	r24, Z+8	; 0x08
    1da4:	81 11       	cpse	r24, r1
    1da6:	05 c0       	rjmp	.+10     	; 0x1db2 <prvUnlockQueue+0x74>
    1da8:	0c c0       	rjmp	.+24     	; 0x1dc2 <prvUnlockQueue+0x84>
    1daa:	78 01       	movw	r14, r16
    1dac:	f8 e0       	ldi	r31, 0x08	; 8
    1dae:	ef 0e       	add	r14, r31
    1db0:	f1 1c       	adc	r15, r1
    1db2:	c7 01       	movw	r24, r14
    1db4:	0e 94 0a 19 	call	0x3214	; 0x3214 <xTaskRemoveFromEventList>
    1db8:	81 11       	cpse	r24, r1
    1dba:	0e 94 fc 19 	call	0x33f8	; 0x33f8 <vTaskMissedYield>
    1dbe:	c1 50       	subi	r28, 0x01	; 1
    1dc0:	79 f7       	brne	.-34     	; 0x1da0 <prvUnlockQueue+0x62>
    1dc2:	8f ef       	ldi	r24, 0xFF	; 255
    1dc4:	f8 01       	movw	r30, r16
    1dc6:	81 a3       	std	Z+33, r24	; 0x21
    1dc8:	0f 90       	pop	r0
    1dca:	0f be       	out	0x3f, r0	; 63
    1dcc:	cf 91       	pop	r28
    1dce:	1f 91       	pop	r17
    1dd0:	0f 91       	pop	r16
    1dd2:	ff 90       	pop	r15
    1dd4:	ef 90       	pop	r14
    1dd6:	08 95       	ret

00001dd8 <xQueueGenericReset>:
    1dd8:	cf 93       	push	r28
    1dda:	df 93       	push	r29
    1ddc:	ec 01       	movw	r28, r24
    1dde:	0f b6       	in	r0, 0x3f	; 63
    1de0:	f8 94       	cli
    1de2:	0f 92       	push	r0
    1de4:	e8 81       	ld	r30, Y
    1de6:	f9 81       	ldd	r31, Y+1	; 0x01
    1de8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1dea:	28 a1       	ldd	r18, Y+32	; 0x20
    1dec:	90 e0       	ldi	r25, 0x00	; 0
    1dee:	30 e0       	ldi	r19, 0x00	; 0
    1df0:	82 9f       	mul	r24, r18
    1df2:	a0 01       	movw	r20, r0
    1df4:	83 9f       	mul	r24, r19
    1df6:	50 0d       	add	r21, r0
    1df8:	92 9f       	mul	r25, r18
    1dfa:	50 0d       	add	r21, r0
    1dfc:	11 24       	eor	r1, r1
    1dfe:	4e 0f       	add	r20, r30
    1e00:	5f 1f       	adc	r21, r31
    1e02:	5d 83       	std	Y+5, r21	; 0x05
    1e04:	4c 83       	std	Y+4, r20	; 0x04
    1e06:	1e 8e       	std	Y+30, r1	; 0x1e
    1e08:	fb 83       	std	Y+3, r31	; 0x03
    1e0a:	ea 83       	std	Y+2, r30	; 0x02
    1e0c:	01 97       	sbiw	r24, 0x01	; 1
    1e0e:	82 9f       	mul	r24, r18
    1e10:	a0 01       	movw	r20, r0
    1e12:	83 9f       	mul	r24, r19
    1e14:	50 0d       	add	r21, r0
    1e16:	92 9f       	mul	r25, r18
    1e18:	50 0d       	add	r21, r0
    1e1a:	11 24       	eor	r1, r1
    1e1c:	cf 01       	movw	r24, r30
    1e1e:	84 0f       	add	r24, r20
    1e20:	95 1f       	adc	r25, r21
    1e22:	9f 83       	std	Y+7, r25	; 0x07
    1e24:	8e 83       	std	Y+6, r24	; 0x06
    1e26:	8f ef       	ldi	r24, 0xFF	; 255
    1e28:	89 a3       	std	Y+33, r24	; 0x21
    1e2a:	8a a3       	std	Y+34, r24	; 0x22
    1e2c:	61 11       	cpse	r22, r1
    1e2e:	0b c0       	rjmp	.+22     	; 0x1e46 <xQueueGenericReset+0x6e>
    1e30:	88 85       	ldd	r24, Y+8	; 0x08
    1e32:	88 23       	and	r24, r24
    1e34:	71 f0       	breq	.+28     	; 0x1e52 <xQueueGenericReset+0x7a>
    1e36:	ce 01       	movw	r24, r28
    1e38:	08 96       	adiw	r24, 0x08	; 8
    1e3a:	0e 94 0a 19 	call	0x3214	; 0x3214 <xTaskRemoveFromEventList>
    1e3e:	88 23       	and	r24, r24
    1e40:	41 f0       	breq	.+16     	; 0x1e52 <xQueueGenericReset+0x7a>
    1e42:	31 de       	rcall	.-926    	; 0x1aa6 <vPortYield>
    1e44:	06 c0       	rjmp	.+12     	; 0x1e52 <xQueueGenericReset+0x7a>
    1e46:	ce 01       	movw	r24, r28
    1e48:	08 96       	adiw	r24, 0x08	; 8
    1e4a:	e5 dc       	rcall	.-1590   	; 0x1816 <vListInitialise>
    1e4c:	ce 01       	movw	r24, r28
    1e4e:	43 96       	adiw	r24, 0x13	; 19
    1e50:	e2 dc       	rcall	.-1596   	; 0x1816 <vListInitialise>
    1e52:	0f 90       	pop	r0
    1e54:	0f be       	out	0x3f, r0	; 63
    1e56:	81 e0       	ldi	r24, 0x01	; 1
    1e58:	df 91       	pop	r29
    1e5a:	cf 91       	pop	r28
    1e5c:	08 95       	ret

00001e5e <xQueueGenericCreate>:
    1e5e:	ff 92       	push	r15
    1e60:	0f 93       	push	r16
    1e62:	1f 93       	push	r17
    1e64:	cf 93       	push	r28
    1e66:	df 93       	push	r29
    1e68:	08 2f       	mov	r16, r24
    1e6a:	16 2f       	mov	r17, r22
    1e6c:	f4 2e       	mov	r15, r20
    1e6e:	66 23       	and	r22, r22
    1e70:	b9 f0       	breq	.+46     	; 0x1ea0 <xQueueGenericCreate+0x42>
    1e72:	86 9f       	mul	r24, r22
    1e74:	c0 01       	movw	r24, r0
    1e76:	11 24       	eor	r1, r1
    1e78:	85 96       	adiw	r24, 0x25	; 37
    1e7a:	e3 db       	rcall	.-2106   	; 0x1642 <pvPortMalloc>
    1e7c:	ec 01       	movw	r28, r24
    1e7e:	00 97       	sbiw	r24, 0x00	; 0
    1e80:	41 f4       	brne	.+16     	; 0x1e92 <xQueueGenericCreate+0x34>
    1e82:	14 c0       	rjmp	.+40     	; 0x1eac <xQueueGenericCreate+0x4e>
    1e84:	0f 8f       	std	Y+31, r16	; 0x1f
    1e86:	18 a3       	std	Y+32, r17	; 0x20
    1e88:	61 e0       	ldi	r22, 0x01	; 1
    1e8a:	ce 01       	movw	r24, r28
    1e8c:	a5 df       	rcall	.-182    	; 0x1dd8 <xQueueGenericReset>
    1e8e:	fc a2       	std	Y+36, r15	; 0x24
    1e90:	0d c0       	rjmp	.+26     	; 0x1eac <xQueueGenericCreate+0x4e>
    1e92:	85 96       	adiw	r24, 0x25	; 37
    1e94:	99 83       	std	Y+1, r25	; 0x01
    1e96:	88 83       	st	Y, r24
    1e98:	f5 cf       	rjmp	.-22     	; 0x1e84 <xQueueGenericCreate+0x26>
    1e9a:	d9 83       	std	Y+1, r29	; 0x01
    1e9c:	c8 83       	st	Y, r28
    1e9e:	f2 cf       	rjmp	.-28     	; 0x1e84 <xQueueGenericCreate+0x26>
    1ea0:	85 e2       	ldi	r24, 0x25	; 37
    1ea2:	90 e0       	ldi	r25, 0x00	; 0
    1ea4:	ce db       	rcall	.-2148   	; 0x1642 <pvPortMalloc>
    1ea6:	ec 01       	movw	r28, r24
    1ea8:	89 2b       	or	r24, r25
    1eaa:	b9 f7       	brne	.-18     	; 0x1e9a <xQueueGenericCreate+0x3c>
    1eac:	ce 01       	movw	r24, r28
    1eae:	df 91       	pop	r29
    1eb0:	cf 91       	pop	r28
    1eb2:	1f 91       	pop	r17
    1eb4:	0f 91       	pop	r16
    1eb6:	ff 90       	pop	r15
    1eb8:	08 95       	ret

00001eba <xQueueGenericSend>:
    1eba:	9f 92       	push	r9
    1ebc:	af 92       	push	r10
    1ebe:	bf 92       	push	r11
    1ec0:	cf 92       	push	r12
    1ec2:	df 92       	push	r13
    1ec4:	ef 92       	push	r14
    1ec6:	ff 92       	push	r15
    1ec8:	0f 93       	push	r16
    1eca:	1f 93       	push	r17
    1ecc:	cf 93       	push	r28
    1ece:	df 93       	push	r29
    1ed0:	cd b7       	in	r28, 0x3d	; 61
    1ed2:	de b7       	in	r29, 0x3e	; 62
    1ed4:	29 97       	sbiw	r28, 0x09	; 9
    1ed6:	0f b6       	in	r0, 0x3f	; 63
    1ed8:	f8 94       	cli
    1eda:	de bf       	out	0x3e, r29	; 62
    1edc:	0f be       	out	0x3f, r0	; 63
    1ede:	cd bf       	out	0x3d, r28	; 61
    1ee0:	7c 01       	movw	r14, r24
    1ee2:	5b 01       	movw	r10, r22
    1ee4:	2e 83       	std	Y+6, r18	; 0x06
    1ee6:	3f 83       	std	Y+7, r19	; 0x07
    1ee8:	48 87       	std	Y+8, r20	; 0x08
    1eea:	59 87       	std	Y+9, r21	; 0x09
    1eec:	10 e0       	ldi	r17, 0x00	; 0
    1eee:	99 24       	eor	r9, r9
    1ef0:	93 94       	inc	r9
    1ef2:	6c 01       	movw	r12, r24
    1ef4:	88 e0       	ldi	r24, 0x08	; 8
    1ef6:	c8 0e       	add	r12, r24
    1ef8:	d1 1c       	adc	r13, r1
    1efa:	0f b6       	in	r0, 0x3f	; 63
    1efc:	f8 94       	cli
    1efe:	0f 92       	push	r0
    1f00:	f7 01       	movw	r30, r14
    1f02:	96 8d       	ldd	r25, Z+30	; 0x1e
    1f04:	87 8d       	ldd	r24, Z+31	; 0x1f
    1f06:	98 17       	cp	r25, r24
    1f08:	10 f0       	brcs	.+4      	; 0x1f0e <xQueueGenericSend+0x54>
    1f0a:	02 30       	cpi	r16, 0x02	; 2
    1f0c:	b1 f4       	brne	.+44     	; 0x1f3a <xQueueGenericSend+0x80>
    1f0e:	40 2f       	mov	r20, r16
    1f10:	b5 01       	movw	r22, r10
    1f12:	c7 01       	movw	r24, r14
    1f14:	9b de       	rcall	.-714    	; 0x1c4c <prvCopyDataToQueue>
    1f16:	f7 01       	movw	r30, r14
    1f18:	93 89       	ldd	r25, Z+19	; 0x13
    1f1a:	99 23       	and	r25, r25
    1f1c:	41 f0       	breq	.+16     	; 0x1f2e <xQueueGenericSend+0x74>
    1f1e:	c7 01       	movw	r24, r14
    1f20:	43 96       	adiw	r24, 0x13	; 19
    1f22:	0e 94 0a 19 	call	0x3214	; 0x3214 <xTaskRemoveFromEventList>
    1f26:	88 23       	and	r24, r24
    1f28:	21 f0       	breq	.+8      	; 0x1f32 <xQueueGenericSend+0x78>
    1f2a:	bd dd       	rcall	.-1158   	; 0x1aa6 <vPortYield>
    1f2c:	02 c0       	rjmp	.+4      	; 0x1f32 <xQueueGenericSend+0x78>
    1f2e:	81 11       	cpse	r24, r1
    1f30:	ba dd       	rcall	.-1164   	; 0x1aa6 <vPortYield>
    1f32:	0f 90       	pop	r0
    1f34:	0f be       	out	0x3f, r0	; 63
    1f36:	81 e0       	ldi	r24, 0x01	; 1
    1f38:	4e c0       	rjmp	.+156    	; 0x1fd6 <xQueueGenericSend+0x11c>
    1f3a:	8e 81       	ldd	r24, Y+6	; 0x06
    1f3c:	9f 81       	ldd	r25, Y+7	; 0x07
    1f3e:	a8 85       	ldd	r26, Y+8	; 0x08
    1f40:	b9 85       	ldd	r27, Y+9	; 0x09
    1f42:	89 2b       	or	r24, r25
    1f44:	8a 2b       	or	r24, r26
    1f46:	8b 2b       	or	r24, r27
    1f48:	21 f4       	brne	.+8      	; 0x1f52 <xQueueGenericSend+0x98>
    1f4a:	0f 90       	pop	r0
    1f4c:	0f be       	out	0x3f, r0	; 63
    1f4e:	80 e0       	ldi	r24, 0x00	; 0
    1f50:	42 c0       	rjmp	.+132    	; 0x1fd6 <xQueueGenericSend+0x11c>
    1f52:	11 11       	cpse	r17, r1
    1f54:	05 c0       	rjmp	.+10     	; 0x1f60 <xQueueGenericSend+0xa6>
    1f56:	ce 01       	movw	r24, r28
    1f58:	01 96       	adiw	r24, 0x01	; 1
    1f5a:	0e 94 96 19 	call	0x332c	; 0x332c <vTaskInternalSetTimeOutState>
    1f5e:	19 2d       	mov	r17, r9
    1f60:	0f 90       	pop	r0
    1f62:	0f be       	out	0x3f, r0	; 63
    1f64:	ff d6       	rcall	.+3582   	; 0x2d64 <vTaskSuspendAll>
    1f66:	0f b6       	in	r0, 0x3f	; 63
    1f68:	f8 94       	cli
    1f6a:	0f 92       	push	r0
    1f6c:	f7 01       	movw	r30, r14
    1f6e:	81 a1       	ldd	r24, Z+33	; 0x21
    1f70:	8f 3f       	cpi	r24, 0xFF	; 255
    1f72:	09 f4       	brne	.+2      	; 0x1f76 <xQueueGenericSend+0xbc>
    1f74:	11 a2       	std	Z+33, r1	; 0x21
    1f76:	f7 01       	movw	r30, r14
    1f78:	82 a1       	ldd	r24, Z+34	; 0x22
    1f7a:	8f 3f       	cpi	r24, 0xFF	; 255
    1f7c:	09 f4       	brne	.+2      	; 0x1f80 <xQueueGenericSend+0xc6>
    1f7e:	12 a2       	std	Z+34, r1	; 0x22
    1f80:	0f 90       	pop	r0
    1f82:	0f be       	out	0x3f, r0	; 63
    1f84:	be 01       	movw	r22, r28
    1f86:	6a 5f       	subi	r22, 0xFA	; 250
    1f88:	7f 4f       	sbci	r23, 0xFF	; 255
    1f8a:	ce 01       	movw	r24, r28
    1f8c:	01 96       	adiw	r24, 0x01	; 1
    1f8e:	0e 94 a7 19 	call	0x334e	; 0x334e <xTaskCheckForTimeOut>
    1f92:	81 11       	cpse	r24, r1
    1f94:	1c c0       	rjmp	.+56     	; 0x1fce <xQueueGenericSend+0x114>
    1f96:	0f b6       	in	r0, 0x3f	; 63
    1f98:	f8 94       	cli
    1f9a:	0f 92       	push	r0
    1f9c:	f7 01       	movw	r30, r14
    1f9e:	96 8d       	ldd	r25, Z+30	; 0x1e
    1fa0:	87 8d       	ldd	r24, Z+31	; 0x1f
    1fa2:	0f 90       	pop	r0
    1fa4:	0f be       	out	0x3f, r0	; 63
    1fa6:	98 13       	cpse	r25, r24
    1fa8:	0e c0       	rjmp	.+28     	; 0x1fc6 <xQueueGenericSend+0x10c>
    1faa:	4e 81       	ldd	r20, Y+6	; 0x06
    1fac:	5f 81       	ldd	r21, Y+7	; 0x07
    1fae:	68 85       	ldd	r22, Y+8	; 0x08
    1fb0:	79 85       	ldd	r23, Y+9	; 0x09
    1fb2:	c6 01       	movw	r24, r12
    1fb4:	0e 94 af 18 	call	0x315e	; 0x315e <vTaskPlaceOnEventList>
    1fb8:	c7 01       	movw	r24, r14
    1fba:	c1 de       	rcall	.-638    	; 0x1d3e <prvUnlockQueue>
    1fbc:	bc d7       	rcall	.+3960   	; 0x2f36 <xTaskResumeAll>
    1fbe:	81 11       	cpse	r24, r1
    1fc0:	9c cf       	rjmp	.-200    	; 0x1efa <xQueueGenericSend+0x40>
    1fc2:	71 dd       	rcall	.-1310   	; 0x1aa6 <vPortYield>
    1fc4:	9a cf       	rjmp	.-204    	; 0x1efa <xQueueGenericSend+0x40>
    1fc6:	c7 01       	movw	r24, r14
    1fc8:	ba de       	rcall	.-652    	; 0x1d3e <prvUnlockQueue>
    1fca:	b5 d7       	rcall	.+3946   	; 0x2f36 <xTaskResumeAll>
    1fcc:	96 cf       	rjmp	.-212    	; 0x1efa <xQueueGenericSend+0x40>
    1fce:	c7 01       	movw	r24, r14
    1fd0:	b6 de       	rcall	.-660    	; 0x1d3e <prvUnlockQueue>
    1fd2:	b1 d7       	rcall	.+3938   	; 0x2f36 <xTaskResumeAll>
    1fd4:	80 e0       	ldi	r24, 0x00	; 0
    1fd6:	29 96       	adiw	r28, 0x09	; 9
    1fd8:	0f b6       	in	r0, 0x3f	; 63
    1fda:	f8 94       	cli
    1fdc:	de bf       	out	0x3e, r29	; 62
    1fde:	0f be       	out	0x3f, r0	; 63
    1fe0:	cd bf       	out	0x3d, r28	; 61
    1fe2:	df 91       	pop	r29
    1fe4:	cf 91       	pop	r28
    1fe6:	1f 91       	pop	r17
    1fe8:	0f 91       	pop	r16
    1fea:	ff 90       	pop	r15
    1fec:	ef 90       	pop	r14
    1fee:	df 90       	pop	r13
    1ff0:	cf 90       	pop	r12
    1ff2:	bf 90       	pop	r11
    1ff4:	af 90       	pop	r10
    1ff6:	9f 90       	pop	r9
    1ff8:	08 95       	ret

00001ffa <xQueueCreateMutex>:
    1ffa:	0f 93       	push	r16
    1ffc:	cf 93       	push	r28
    1ffe:	df 93       	push	r29
    2000:	48 2f       	mov	r20, r24
    2002:	60 e0       	ldi	r22, 0x00	; 0
    2004:	81 e0       	ldi	r24, 0x01	; 1
    2006:	2b df       	rcall	.-426    	; 0x1e5e <xQueueGenericCreate>
    2008:	ec 01       	movw	r28, r24
    200a:	00 97       	sbiw	r24, 0x00	; 0
    200c:	61 f0       	breq	.+24     	; 0x2026 <xQueueCreateMutex+0x2c>
    200e:	1d 82       	std	Y+5, r1	; 0x05
    2010:	1c 82       	std	Y+4, r1	; 0x04
    2012:	19 82       	std	Y+1, r1	; 0x01
    2014:	18 82       	st	Y, r1
    2016:	1e 82       	std	Y+6, r1	; 0x06
    2018:	00 e0       	ldi	r16, 0x00	; 0
    201a:	20 e0       	ldi	r18, 0x00	; 0
    201c:	30 e0       	ldi	r19, 0x00	; 0
    201e:	a9 01       	movw	r20, r18
    2020:	60 e0       	ldi	r22, 0x00	; 0
    2022:	70 e0       	ldi	r23, 0x00	; 0
    2024:	4a df       	rcall	.-364    	; 0x1eba <xQueueGenericSend>
    2026:	ce 01       	movw	r24, r28
    2028:	df 91       	pop	r29
    202a:	cf 91       	pop	r28
    202c:	0f 91       	pop	r16
    202e:	08 95       	ret

00002030 <xQueueGenericSendFromISR>:
    2030:	ef 92       	push	r14
    2032:	ff 92       	push	r15
    2034:	0f 93       	push	r16
    2036:	1f 93       	push	r17
    2038:	cf 93       	push	r28
    203a:	df 93       	push	r29
    203c:	8a 01       	movw	r16, r20
    203e:	fc 01       	movw	r30, r24
    2040:	56 8d       	ldd	r21, Z+30	; 0x1e
    2042:	37 8d       	ldd	r19, Z+31	; 0x1f
    2044:	53 17       	cp	r21, r19
    2046:	10 f0       	brcs	.+4      	; 0x204c <xQueueGenericSendFromISR+0x1c>
    2048:	22 30       	cpi	r18, 0x02	; 2
    204a:	e9 f4       	brne	.+58     	; 0x2086 <xQueueGenericSendFromISR+0x56>
    204c:	42 2f       	mov	r20, r18
    204e:	78 01       	movw	r14, r16
    2050:	ec 01       	movw	r28, r24
    2052:	1a a1       	ldd	r17, Y+34	; 0x22
    2054:	fb dd       	rcall	.-1034   	; 0x1c4c <prvCopyDataToQueue>
    2056:	1f 3f       	cpi	r17, 0xFF	; 255
    2058:	81 f4       	brne	.+32     	; 0x207a <xQueueGenericSendFromISR+0x4a>
    205a:	8b 89       	ldd	r24, Y+19	; 0x13
    205c:	88 23       	and	r24, r24
    205e:	a9 f0       	breq	.+42     	; 0x208a <xQueueGenericSendFromISR+0x5a>
    2060:	ce 01       	movw	r24, r28
    2062:	43 96       	adiw	r24, 0x13	; 19
    2064:	0e 94 0a 19 	call	0x3214	; 0x3214 <xTaskRemoveFromEventList>
    2068:	88 23       	and	r24, r24
    206a:	89 f0       	breq	.+34     	; 0x208e <xQueueGenericSendFromISR+0x5e>
    206c:	e1 14       	cp	r14, r1
    206e:	f1 04       	cpc	r15, r1
    2070:	81 f0       	breq	.+32     	; 0x2092 <xQueueGenericSendFromISR+0x62>
    2072:	81 e0       	ldi	r24, 0x01	; 1
    2074:	f7 01       	movw	r30, r14
    2076:	80 83       	st	Z, r24
    2078:	0d c0       	rjmp	.+26     	; 0x2094 <xQueueGenericSendFromISR+0x64>
    207a:	ff 24       	eor	r15, r15
    207c:	f3 94       	inc	r15
    207e:	f1 0e       	add	r15, r17
    2080:	fa a2       	std	Y+34, r15	; 0x22
    2082:	81 e0       	ldi	r24, 0x01	; 1
    2084:	07 c0       	rjmp	.+14     	; 0x2094 <xQueueGenericSendFromISR+0x64>
    2086:	80 e0       	ldi	r24, 0x00	; 0
    2088:	05 c0       	rjmp	.+10     	; 0x2094 <xQueueGenericSendFromISR+0x64>
    208a:	81 e0       	ldi	r24, 0x01	; 1
    208c:	03 c0       	rjmp	.+6      	; 0x2094 <xQueueGenericSendFromISR+0x64>
    208e:	81 e0       	ldi	r24, 0x01	; 1
    2090:	01 c0       	rjmp	.+2      	; 0x2094 <xQueueGenericSendFromISR+0x64>
    2092:	81 e0       	ldi	r24, 0x01	; 1
    2094:	df 91       	pop	r29
    2096:	cf 91       	pop	r28
    2098:	1f 91       	pop	r17
    209a:	0f 91       	pop	r16
    209c:	ff 90       	pop	r15
    209e:	ef 90       	pop	r14
    20a0:	08 95       	ret

000020a2 <xQueueReceive>:
    20a2:	9f 92       	push	r9
    20a4:	af 92       	push	r10
    20a6:	bf 92       	push	r11
    20a8:	cf 92       	push	r12
    20aa:	df 92       	push	r13
    20ac:	ef 92       	push	r14
    20ae:	ff 92       	push	r15
    20b0:	0f 93       	push	r16
    20b2:	1f 93       	push	r17
    20b4:	cf 93       	push	r28
    20b6:	df 93       	push	r29
    20b8:	cd b7       	in	r28, 0x3d	; 61
    20ba:	de b7       	in	r29, 0x3e	; 62
    20bc:	29 97       	sbiw	r28, 0x09	; 9
    20be:	0f b6       	in	r0, 0x3f	; 63
    20c0:	f8 94       	cli
    20c2:	de bf       	out	0x3e, r29	; 62
    20c4:	0f be       	out	0x3f, r0	; 63
    20c6:	cd bf       	out	0x3d, r28	; 61
    20c8:	8c 01       	movw	r16, r24
    20ca:	5b 01       	movw	r10, r22
    20cc:	2e 83       	std	Y+6, r18	; 0x06
    20ce:	3f 83       	std	Y+7, r19	; 0x07
    20d0:	48 87       	std	Y+8, r20	; 0x08
    20d2:	59 87       	std	Y+9, r21	; 0x09
    20d4:	e1 2c       	mov	r14, r1
    20d6:	99 24       	eor	r9, r9
    20d8:	93 94       	inc	r9
    20da:	6c 01       	movw	r12, r24
    20dc:	83 e1       	ldi	r24, 0x13	; 19
    20de:	c8 0e       	add	r12, r24
    20e0:	d1 1c       	adc	r13, r1
    20e2:	0f b6       	in	r0, 0x3f	; 63
    20e4:	f8 94       	cli
    20e6:	0f 92       	push	r0
    20e8:	f8 01       	movw	r30, r16
    20ea:	f6 8c       	ldd	r15, Z+30	; 0x1e
    20ec:	ff 20       	and	r15, r15
    20ee:	99 f0       	breq	.+38     	; 0x2116 <xQueueReceive+0x74>
    20f0:	b5 01       	movw	r22, r10
    20f2:	c8 01       	movw	r24, r16
    20f4:	0a de       	rcall	.-1004   	; 0x1d0a <prvCopyDataFromQueue>
    20f6:	fa 94       	dec	r15
    20f8:	f8 01       	movw	r30, r16
    20fa:	f6 8e       	std	Z+30, r15	; 0x1e
    20fc:	80 85       	ldd	r24, Z+8	; 0x08
    20fe:	88 23       	and	r24, r24
    2100:	31 f0       	breq	.+12     	; 0x210e <xQueueReceive+0x6c>
    2102:	c8 01       	movw	r24, r16
    2104:	08 96       	adiw	r24, 0x08	; 8
    2106:	0e 94 0a 19 	call	0x3214	; 0x3214 <xTaskRemoveFromEventList>
    210a:	81 11       	cpse	r24, r1
    210c:	cc dc       	rcall	.-1640   	; 0x1aa6 <vPortYield>
    210e:	0f 90       	pop	r0
    2110:	0f be       	out	0x3f, r0	; 63
    2112:	81 e0       	ldi	r24, 0x01	; 1
    2114:	4c c0       	rjmp	.+152    	; 0x21ae <xQueueReceive+0x10c>
    2116:	8e 81       	ldd	r24, Y+6	; 0x06
    2118:	9f 81       	ldd	r25, Y+7	; 0x07
    211a:	a8 85       	ldd	r26, Y+8	; 0x08
    211c:	b9 85       	ldd	r27, Y+9	; 0x09
    211e:	89 2b       	or	r24, r25
    2120:	8a 2b       	or	r24, r26
    2122:	8b 2b       	or	r24, r27
    2124:	21 f4       	brne	.+8      	; 0x212e <xQueueReceive+0x8c>
    2126:	0f 90       	pop	r0
    2128:	0f be       	out	0x3f, r0	; 63
    212a:	80 e0       	ldi	r24, 0x00	; 0
    212c:	40 c0       	rjmp	.+128    	; 0x21ae <xQueueReceive+0x10c>
    212e:	e1 10       	cpse	r14, r1
    2130:	05 c0       	rjmp	.+10     	; 0x213c <xQueueReceive+0x9a>
    2132:	ce 01       	movw	r24, r28
    2134:	01 96       	adiw	r24, 0x01	; 1
    2136:	0e 94 96 19 	call	0x332c	; 0x332c <vTaskInternalSetTimeOutState>
    213a:	e9 2c       	mov	r14, r9
    213c:	0f 90       	pop	r0
    213e:	0f be       	out	0x3f, r0	; 63
    2140:	11 d6       	rcall	.+3106   	; 0x2d64 <vTaskSuspendAll>
    2142:	0f b6       	in	r0, 0x3f	; 63
    2144:	f8 94       	cli
    2146:	0f 92       	push	r0
    2148:	f8 01       	movw	r30, r16
    214a:	81 a1       	ldd	r24, Z+33	; 0x21
    214c:	8f 3f       	cpi	r24, 0xFF	; 255
    214e:	09 f4       	brne	.+2      	; 0x2152 <xQueueReceive+0xb0>
    2150:	11 a2       	std	Z+33, r1	; 0x21
    2152:	f8 01       	movw	r30, r16
    2154:	82 a1       	ldd	r24, Z+34	; 0x22
    2156:	8f 3f       	cpi	r24, 0xFF	; 255
    2158:	09 f4       	brne	.+2      	; 0x215c <xQueueReceive+0xba>
    215a:	12 a2       	std	Z+34, r1	; 0x22
    215c:	0f 90       	pop	r0
    215e:	0f be       	out	0x3f, r0	; 63
    2160:	be 01       	movw	r22, r28
    2162:	6a 5f       	subi	r22, 0xFA	; 250
    2164:	7f 4f       	sbci	r23, 0xFF	; 255
    2166:	ce 01       	movw	r24, r28
    2168:	01 96       	adiw	r24, 0x01	; 1
    216a:	0e 94 a7 19 	call	0x334e	; 0x334e <xTaskCheckForTimeOut>
    216e:	81 11       	cpse	r24, r1
    2170:	15 c0       	rjmp	.+42     	; 0x219c <xQueueReceive+0xfa>
    2172:	c8 01       	movw	r24, r16
    2174:	60 dd       	rcall	.-1344   	; 0x1c36 <prvIsQueueEmpty>
    2176:	88 23       	and	r24, r24
    2178:	69 f0       	breq	.+26     	; 0x2194 <xQueueReceive+0xf2>
    217a:	4e 81       	ldd	r20, Y+6	; 0x06
    217c:	5f 81       	ldd	r21, Y+7	; 0x07
    217e:	68 85       	ldd	r22, Y+8	; 0x08
    2180:	79 85       	ldd	r23, Y+9	; 0x09
    2182:	c6 01       	movw	r24, r12
    2184:	ec d7       	rcall	.+4056   	; 0x315e <vTaskPlaceOnEventList>
    2186:	c8 01       	movw	r24, r16
    2188:	da dd       	rcall	.-1100   	; 0x1d3e <prvUnlockQueue>
    218a:	d5 d6       	rcall	.+3498   	; 0x2f36 <xTaskResumeAll>
    218c:	81 11       	cpse	r24, r1
    218e:	a9 cf       	rjmp	.-174    	; 0x20e2 <xQueueReceive+0x40>
    2190:	8a dc       	rcall	.-1772   	; 0x1aa6 <vPortYield>
    2192:	a7 cf       	rjmp	.-178    	; 0x20e2 <xQueueReceive+0x40>
    2194:	c8 01       	movw	r24, r16
    2196:	d3 dd       	rcall	.-1114   	; 0x1d3e <prvUnlockQueue>
    2198:	ce d6       	rcall	.+3484   	; 0x2f36 <xTaskResumeAll>
    219a:	a3 cf       	rjmp	.-186    	; 0x20e2 <xQueueReceive+0x40>
    219c:	c8 01       	movw	r24, r16
    219e:	cf dd       	rcall	.-1122   	; 0x1d3e <prvUnlockQueue>
    21a0:	ca d6       	rcall	.+3476   	; 0x2f36 <xTaskResumeAll>
    21a2:	c8 01       	movw	r24, r16
    21a4:	48 dd       	rcall	.-1392   	; 0x1c36 <prvIsQueueEmpty>
    21a6:	88 23       	and	r24, r24
    21a8:	09 f4       	brne	.+2      	; 0x21ac <xQueueReceive+0x10a>
    21aa:	9b cf       	rjmp	.-202    	; 0x20e2 <xQueueReceive+0x40>
    21ac:	80 e0       	ldi	r24, 0x00	; 0
    21ae:	29 96       	adiw	r28, 0x09	; 9
    21b0:	0f b6       	in	r0, 0x3f	; 63
    21b2:	f8 94       	cli
    21b4:	de bf       	out	0x3e, r29	; 62
    21b6:	0f be       	out	0x3f, r0	; 63
    21b8:	cd bf       	out	0x3d, r28	; 61
    21ba:	df 91       	pop	r29
    21bc:	cf 91       	pop	r28
    21be:	1f 91       	pop	r17
    21c0:	0f 91       	pop	r16
    21c2:	ff 90       	pop	r15
    21c4:	ef 90       	pop	r14
    21c6:	df 90       	pop	r13
    21c8:	cf 90       	pop	r12
    21ca:	bf 90       	pop	r11
    21cc:	af 90       	pop	r10
    21ce:	9f 90       	pop	r9
    21d0:	08 95       	ret

000021d2 <xQueueSemaphoreTake>:
    21d2:	bf 92       	push	r11
    21d4:	cf 92       	push	r12
    21d6:	df 92       	push	r13
    21d8:	ef 92       	push	r14
    21da:	ff 92       	push	r15
    21dc:	0f 93       	push	r16
    21de:	1f 93       	push	r17
    21e0:	cf 93       	push	r28
    21e2:	df 93       	push	r29
    21e4:	cd b7       	in	r28, 0x3d	; 61
    21e6:	de b7       	in	r29, 0x3e	; 62
    21e8:	29 97       	sbiw	r28, 0x09	; 9
    21ea:	0f b6       	in	r0, 0x3f	; 63
    21ec:	f8 94       	cli
    21ee:	de bf       	out	0x3e, r29	; 62
    21f0:	0f be       	out	0x3f, r0	; 63
    21f2:	cd bf       	out	0x3d, r28	; 61
    21f4:	8c 01       	movw	r16, r24
    21f6:	4e 83       	std	Y+6, r20	; 0x06
    21f8:	5f 83       	std	Y+7, r21	; 0x07
    21fa:	68 87       	std	Y+8, r22	; 0x08
    21fc:	79 87       	std	Y+9, r23	; 0x09
    21fe:	b1 2c       	mov	r11, r1
    2200:	d1 2c       	mov	r13, r1
    2202:	cc 24       	eor	r12, r12
    2204:	c3 94       	inc	r12
    2206:	7c 01       	movw	r14, r24
    2208:	83 e1       	ldi	r24, 0x13	; 19
    220a:	e8 0e       	add	r14, r24
    220c:	f1 1c       	adc	r15, r1
    220e:	0f b6       	in	r0, 0x3f	; 63
    2210:	f8 94       	cli
    2212:	0f 92       	push	r0
    2214:	d8 01       	movw	r26, r16
    2216:	5e 96       	adiw	r26, 0x1e	; 30
    2218:	8c 91       	ld	r24, X
    221a:	5e 97       	sbiw	r26, 0x1e	; 30
    221c:	88 23       	and	r24, r24
    221e:	d9 f0       	breq	.+54     	; 0x2256 <__stack+0x57>
    2220:	81 50       	subi	r24, 0x01	; 1
    2222:	5e 96       	adiw	r26, 0x1e	; 30
    2224:	8c 93       	st	X, r24
    2226:	5e 97       	sbiw	r26, 0x1e	; 30
    2228:	8d 91       	ld	r24, X+
    222a:	9c 91       	ld	r25, X
    222c:	89 2b       	or	r24, r25
    222e:	29 f4       	brne	.+10     	; 0x223a <__stack+0x3b>
    2230:	0e 94 37 1b 	call	0x366e	; 0x366e <pvTaskIncrementMutexHeldCount>
    2234:	f8 01       	movw	r30, r16
    2236:	95 83       	std	Z+5, r25	; 0x05
    2238:	84 83       	std	Z+4, r24	; 0x04
    223a:	d8 01       	movw	r26, r16
    223c:	18 96       	adiw	r26, 0x08	; 8
    223e:	8c 91       	ld	r24, X
    2240:	88 23       	and	r24, r24
    2242:	29 f0       	breq	.+10     	; 0x224e <__stack+0x4f>
    2244:	c8 01       	movw	r24, r16
    2246:	08 96       	adiw	r24, 0x08	; 8
    2248:	e5 d7       	rcall	.+4042   	; 0x3214 <xTaskRemoveFromEventList>
    224a:	81 11       	cpse	r24, r1
    224c:	2c dc       	rcall	.-1960   	; 0x1aa6 <vPortYield>
    224e:	0f 90       	pop	r0
    2250:	0f be       	out	0x3f, r0	; 63
    2252:	81 e0       	ldi	r24, 0x01	; 1
    2254:	7a c0       	rjmp	.+244    	; 0x234a <__stack+0x14b>
    2256:	8e 81       	ldd	r24, Y+6	; 0x06
    2258:	9f 81       	ldd	r25, Y+7	; 0x07
    225a:	a8 85       	ldd	r26, Y+8	; 0x08
    225c:	b9 85       	ldd	r27, Y+9	; 0x09
    225e:	89 2b       	or	r24, r25
    2260:	8a 2b       	or	r24, r26
    2262:	8b 2b       	or	r24, r27
    2264:	21 f4       	brne	.+8      	; 0x226e <__stack+0x6f>
    2266:	0f 90       	pop	r0
    2268:	0f be       	out	0x3f, r0	; 63
    226a:	80 e0       	ldi	r24, 0x00	; 0
    226c:	6e c0       	rjmp	.+220    	; 0x234a <__stack+0x14b>
    226e:	d1 10       	cpse	r13, r1
    2270:	05 c0       	rjmp	.+10     	; 0x227c <__stack+0x7d>
    2272:	ce 01       	movw	r24, r28
    2274:	01 96       	adiw	r24, 0x01	; 1
    2276:	0e 94 96 19 	call	0x332c	; 0x332c <vTaskInternalSetTimeOutState>
    227a:	dc 2c       	mov	r13, r12
    227c:	0f 90       	pop	r0
    227e:	0f be       	out	0x3f, r0	; 63
    2280:	71 d5       	rcall	.+2786   	; 0x2d64 <vTaskSuspendAll>
    2282:	0f b6       	in	r0, 0x3f	; 63
    2284:	f8 94       	cli
    2286:	0f 92       	push	r0
    2288:	f8 01       	movw	r30, r16
    228a:	81 a1       	ldd	r24, Z+33	; 0x21
    228c:	8f 3f       	cpi	r24, 0xFF	; 255
    228e:	09 f4       	brne	.+2      	; 0x2292 <__stack+0x93>
    2290:	11 a2       	std	Z+33, r1	; 0x21
    2292:	d8 01       	movw	r26, r16
    2294:	92 96       	adiw	r26, 0x22	; 34
    2296:	8c 91       	ld	r24, X
    2298:	92 97       	sbiw	r26, 0x22	; 34
    229a:	8f 3f       	cpi	r24, 0xFF	; 255
    229c:	11 f4       	brne	.+4      	; 0x22a2 <__stack+0xa3>
    229e:	92 96       	adiw	r26, 0x22	; 34
    22a0:	1c 92       	st	X, r1
    22a2:	0f 90       	pop	r0
    22a4:	0f be       	out	0x3f, r0	; 63
    22a6:	be 01       	movw	r22, r28
    22a8:	6a 5f       	subi	r22, 0xFA	; 250
    22aa:	7f 4f       	sbci	r23, 0xFF	; 255
    22ac:	ce 01       	movw	r24, r28
    22ae:	01 96       	adiw	r24, 0x01	; 1
    22b0:	0e 94 a7 19 	call	0x334e	; 0x334e <xTaskCheckForTimeOut>
    22b4:	81 11       	cpse	r24, r1
    22b6:	24 c0       	rjmp	.+72     	; 0x2300 <__stack+0x101>
    22b8:	c8 01       	movw	r24, r16
    22ba:	bd dc       	rcall	.-1670   	; 0x1c36 <prvIsQueueEmpty>
    22bc:	88 23       	and	r24, r24
    22be:	e1 f0       	breq	.+56     	; 0x22f8 <__stack+0xf9>
    22c0:	f8 01       	movw	r30, r16
    22c2:	80 81       	ld	r24, Z
    22c4:	91 81       	ldd	r25, Z+1	; 0x01
    22c6:	89 2b       	or	r24, r25
    22c8:	51 f4       	brne	.+20     	; 0x22de <__stack+0xdf>
    22ca:	0f b6       	in	r0, 0x3f	; 63
    22cc:	f8 94       	cli
    22ce:	0f 92       	push	r0
    22d0:	84 81       	ldd	r24, Z+4	; 0x04
    22d2:	95 81       	ldd	r25, Z+5	; 0x05
    22d4:	0e 94 13 1a 	call	0x3426	; 0x3426 <xTaskPriorityInherit>
    22d8:	b8 2e       	mov	r11, r24
    22da:	0f 90       	pop	r0
    22dc:	0f be       	out	0x3f, r0	; 63
    22de:	4e 81       	ldd	r20, Y+6	; 0x06
    22e0:	5f 81       	ldd	r21, Y+7	; 0x07
    22e2:	68 85       	ldd	r22, Y+8	; 0x08
    22e4:	79 85       	ldd	r23, Y+9	; 0x09
    22e6:	c7 01       	movw	r24, r14
    22e8:	3a d7       	rcall	.+3700   	; 0x315e <vTaskPlaceOnEventList>
    22ea:	c8 01       	movw	r24, r16
    22ec:	28 dd       	rcall	.-1456   	; 0x1d3e <prvUnlockQueue>
    22ee:	23 d6       	rcall	.+3142   	; 0x2f36 <xTaskResumeAll>
    22f0:	81 11       	cpse	r24, r1
    22f2:	8d cf       	rjmp	.-230    	; 0x220e <__stack+0xf>
    22f4:	d8 db       	rcall	.-2128   	; 0x1aa6 <vPortYield>
    22f6:	8b cf       	rjmp	.-234    	; 0x220e <__stack+0xf>
    22f8:	c8 01       	movw	r24, r16
    22fa:	21 dd       	rcall	.-1470   	; 0x1d3e <prvUnlockQueue>
    22fc:	1c d6       	rcall	.+3128   	; 0x2f36 <xTaskResumeAll>
    22fe:	87 cf       	rjmp	.-242    	; 0x220e <__stack+0xf>
    2300:	c8 01       	movw	r24, r16
    2302:	1d dd       	rcall	.-1478   	; 0x1d3e <prvUnlockQueue>
    2304:	18 d6       	rcall	.+3120   	; 0x2f36 <xTaskResumeAll>
    2306:	c8 01       	movw	r24, r16
    2308:	96 dc       	rcall	.-1748   	; 0x1c36 <prvIsQueueEmpty>
    230a:	88 23       	and	r24, r24
    230c:	09 f4       	brne	.+2      	; 0x2310 <__stack+0x111>
    230e:	7f cf       	rjmp	.-258    	; 0x220e <__stack+0xf>
    2310:	bb 20       	and	r11, r11
    2312:	d1 f0       	breq	.+52     	; 0x2348 <__stack+0x149>
    2314:	0f b6       	in	r0, 0x3f	; 63
    2316:	f8 94       	cli
    2318:	0f 92       	push	r0
    231a:	f8 01       	movw	r30, r16
    231c:	83 89       	ldd	r24, Z+19	; 0x13
    231e:	88 23       	and	r24, r24
    2320:	39 f0       	breq	.+14     	; 0x2330 <__stack+0x131>
    2322:	02 8c       	ldd	r0, Z+26	; 0x1a
    2324:	f3 8d       	ldd	r31, Z+27	; 0x1b
    2326:	e0 2d       	mov	r30, r0
    2328:	80 81       	ld	r24, Z
    232a:	66 e0       	ldi	r22, 0x06	; 6
    232c:	68 1b       	sub	r22, r24
    232e:	01 c0       	rjmp	.+2      	; 0x2332 <__stack+0x133>
    2330:	60 e0       	ldi	r22, 0x00	; 0
    2332:	d8 01       	movw	r26, r16
    2334:	14 96       	adiw	r26, 0x04	; 4
    2336:	8d 91       	ld	r24, X+
    2338:	9c 91       	ld	r25, X
    233a:	15 97       	sbiw	r26, 0x05	; 5
    233c:	0e 94 c1 1a 	call	0x3582	; 0x3582 <vTaskPriorityDisinheritAfterTimeout>
    2340:	0f 90       	pop	r0
    2342:	0f be       	out	0x3f, r0	; 63
    2344:	80 e0       	ldi	r24, 0x00	; 0
    2346:	01 c0       	rjmp	.+2      	; 0x234a <__stack+0x14b>
    2348:	80 e0       	ldi	r24, 0x00	; 0
    234a:	29 96       	adiw	r28, 0x09	; 9
    234c:	0f b6       	in	r0, 0x3f	; 63
    234e:	f8 94       	cli
    2350:	de bf       	out	0x3e, r29	; 62
    2352:	0f be       	out	0x3f, r0	; 63
    2354:	cd bf       	out	0x3d, r28	; 61
    2356:	df 91       	pop	r29
    2358:	cf 91       	pop	r28
    235a:	1f 91       	pop	r17
    235c:	0f 91       	pop	r16
    235e:	ff 90       	pop	r15
    2360:	ef 90       	pop	r14
    2362:	df 90       	pop	r13
    2364:	cf 90       	pop	r12
    2366:	bf 90       	pop	r11
    2368:	08 95       	ret

0000236a <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
    {
    236a:	cf 93       	push	r28
    236c:	df 93       	push	r29
    236e:	ec 01       	movw	r28, r24
        will not actually cause the task to block, just place it on a blocked
        list.  It will not block until the scheduler is unlocked - at which
        time a yield will be performed.  If an item is added to the queue while
        the queue is locked, and the calling task blocks on the queue, then the
        calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    2370:	0f b6       	in	r0, 0x3f	; 63
    2372:	f8 94       	cli
    2374:	0f 92       	push	r0
    2376:	89 a1       	ldd	r24, Y+33	; 0x21
    2378:	8f 3f       	cpi	r24, 0xFF	; 255
    237a:	09 f4       	brne	.+2      	; 0x237e <vQueueWaitForMessageRestricted+0x14>
    237c:	19 a2       	std	Y+33, r1	; 0x21
    237e:	8a a1       	ldd	r24, Y+34	; 0x22
    2380:	8f 3f       	cpi	r24, 0xFF	; 255
    2382:	09 f4       	brne	.+2      	; 0x2386 <vQueueWaitForMessageRestricted+0x1c>
    2384:	1a a2       	std	Y+34, r1	; 0x22
    2386:	0f 90       	pop	r0
    2388:	0f be       	out	0x3f, r0	; 63
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    238a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    238c:	81 11       	cpse	r24, r1
    238e:	03 c0       	rjmp	.+6      	; 0x2396 <vQueueWaitForMessageRestricted+0x2c>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    2390:	ce 01       	movw	r24, r28
    2392:	43 96       	adiw	r24, 0x13	; 19
    2394:	1f d7       	rcall	.+3646   	; 0x31d4 <vTaskPlaceOnEventListRestricted>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
        prvUnlockQueue( pxQueue );
    2396:	ce 01       	movw	r24, r28
    2398:	d2 dc       	rcall	.-1628   	; 0x1d3e <prvUnlockQueue>
    }
    239a:	df 91       	pop	r29
    239c:	cf 91       	pop	r28
    239e:	08 95       	ret

000023a0 <prvBytesInBuffer>:

    configASSERT( pxStreamBuffer );

    xReturn = prvBytesInBuffer( pxStreamBuffer );
    return xReturn;
}
    23a0:	fc 01       	movw	r30, r24
    23a2:	44 81       	ldd	r20, Z+4	; 0x04
    23a4:	55 81       	ldd	r21, Z+5	; 0x05
    23a6:	22 81       	ldd	r18, Z+2	; 0x02
    23a8:	33 81       	ldd	r19, Z+3	; 0x03
    23aa:	24 0f       	add	r18, r20
    23ac:	35 1f       	adc	r19, r21
    23ae:	80 81       	ld	r24, Z
    23b0:	91 81       	ldd	r25, Z+1	; 0x01
    23b2:	b9 01       	movw	r22, r18
    23b4:	68 1b       	sub	r22, r24
    23b6:	79 0b       	sbc	r23, r25
    23b8:	cb 01       	movw	r24, r22
    23ba:	64 17       	cp	r22, r20
    23bc:	75 07       	cpc	r23, r21
    23be:	10 f0       	brcs	.+4      	; 0x23c4 <prvBytesInBuffer+0x24>
    23c0:	84 1b       	sub	r24, r20
    23c2:	95 0b       	sbc	r25, r21
    23c4:	08 95       	ret

000023c6 <prvWriteBytesToBuffer>:
    23c6:	af 92       	push	r10
    23c8:	bf 92       	push	r11
    23ca:	cf 92       	push	r12
    23cc:	df 92       	push	r13
    23ce:	ef 92       	push	r14
    23d0:	ff 92       	push	r15
    23d2:	0f 93       	push	r16
    23d4:	1f 93       	push	r17
    23d6:	cf 93       	push	r28
    23d8:	df 93       	push	r29
    23da:	6c 01       	movw	r12, r24
    23dc:	5b 01       	movw	r10, r22
    23de:	7a 01       	movw	r14, r20
    23e0:	fc 01       	movw	r30, r24
    23e2:	c2 81       	ldd	r28, Z+2	; 0x02
    23e4:	d3 81       	ldd	r29, Z+3	; 0x03
    23e6:	04 81       	ldd	r16, Z+4	; 0x04
    23e8:	15 81       	ldd	r17, Z+5	; 0x05
    23ea:	0c 1b       	sub	r16, r28
    23ec:	1d 0b       	sbc	r17, r29
    23ee:	40 17       	cp	r20, r16
    23f0:	51 07       	cpc	r21, r17
    23f2:	08 f4       	brcc	.+2      	; 0x23f6 <prvWriteBytesToBuffer+0x30>
    23f4:	8a 01       	movw	r16, r20
    23f6:	f6 01       	movw	r30, r12
    23f8:	84 85       	ldd	r24, Z+12	; 0x0c
    23fa:	95 85       	ldd	r25, Z+13	; 0x0d
    23fc:	a8 01       	movw	r20, r16
    23fe:	b5 01       	movw	r22, r10
    2400:	8c 0f       	add	r24, r28
    2402:	9d 1f       	adc	r25, r29
    2404:	0e 94 11 31 	call	0x6222	; 0x6222 <memcpy>
    2408:	0e 15       	cp	r16, r14
    240a:	1f 05       	cpc	r17, r15
    240c:	58 f4       	brcc	.+22     	; 0x2424 <prvWriteBytesToBuffer+0x5e>
    240e:	a7 01       	movw	r20, r14
    2410:	40 1b       	sub	r20, r16
    2412:	51 0b       	sbc	r21, r17
    2414:	b5 01       	movw	r22, r10
    2416:	60 0f       	add	r22, r16
    2418:	71 1f       	adc	r23, r17
    241a:	f6 01       	movw	r30, r12
    241c:	84 85       	ldd	r24, Z+12	; 0x0c
    241e:	95 85       	ldd	r25, Z+13	; 0x0d
    2420:	0e 94 11 31 	call	0x6222	; 0x6222 <memcpy>
    2424:	ce 01       	movw	r24, r28
    2426:	8e 0d       	add	r24, r14
    2428:	9f 1d       	adc	r25, r15
    242a:	f6 01       	movw	r30, r12
    242c:	24 81       	ldd	r18, Z+4	; 0x04
    242e:	35 81       	ldd	r19, Z+5	; 0x05
    2430:	82 17       	cp	r24, r18
    2432:	93 07       	cpc	r25, r19
    2434:	10 f0       	brcs	.+4      	; 0x243a <prvWriteBytesToBuffer+0x74>
    2436:	82 1b       	sub	r24, r18
    2438:	93 0b       	sbc	r25, r19
    243a:	f6 01       	movw	r30, r12
    243c:	93 83       	std	Z+3, r25	; 0x03
    243e:	82 83       	std	Z+2, r24	; 0x02
    2440:	c7 01       	movw	r24, r14
    2442:	df 91       	pop	r29
    2444:	cf 91       	pop	r28
    2446:	1f 91       	pop	r17
    2448:	0f 91       	pop	r16
    244a:	ff 90       	pop	r15
    244c:	ef 90       	pop	r14
    244e:	df 90       	pop	r13
    2450:	cf 90       	pop	r12
    2452:	bf 90       	pop	r11
    2454:	af 90       	pop	r10
    2456:	08 95       	ret

00002458 <prvWriteMessageToBuffer>:
    2458:	cf 92       	push	r12
    245a:	df 92       	push	r13
    245c:	ef 92       	push	r14
    245e:	ff 92       	push	r15
    2460:	0f 93       	push	r16
    2462:	1f 93       	push	r17
    2464:	cf 93       	push	r28
    2466:	df 93       	push	r29
    2468:	1f 92       	push	r1
    246a:	1f 92       	push	r1
    246c:	cd b7       	in	r28, 0x3d	; 61
    246e:	de b7       	in	r29, 0x3e	; 62
    2470:	5a 83       	std	Y+2, r21	; 0x02
    2472:	49 83       	std	Y+1, r20	; 0x01
    2474:	21 15       	cp	r18, r1
    2476:	31 05       	cpc	r19, r1
    2478:	c9 f0       	breq	.+50     	; 0x24ac <prvWriteMessageToBuffer+0x54>
    247a:	6b 01       	movw	r12, r22
    247c:	7c 01       	movw	r14, r24
    247e:	fc 01       	movw	r30, r24
    2480:	86 85       	ldd	r24, Z+14	; 0x0e
    2482:	80 fd       	sbrc	r24, 0
    2484:	08 c0       	rjmp	.+16     	; 0x2496 <prvWriteMessageToBuffer+0x3e>
    2486:	ca 01       	movw	r24, r20
    2488:	24 17       	cp	r18, r20
    248a:	35 07       	cpc	r19, r21
    248c:	08 f4       	brcc	.+2      	; 0x2490 <prvWriteMessageToBuffer+0x38>
    248e:	c9 01       	movw	r24, r18
    2490:	9a 83       	std	Y+2, r25	; 0x02
    2492:	89 83       	std	Y+1, r24	; 0x01
    2494:	11 c0       	rjmp	.+34     	; 0x24b8 <prvWriteMessageToBuffer+0x60>
    2496:	20 17       	cp	r18, r16
    2498:	31 07       	cpc	r19, r17
    249a:	58 f0       	brcs	.+22     	; 0x24b2 <prvWriteMessageToBuffer+0x5a>
    249c:	42 e0       	ldi	r20, 0x02	; 2
    249e:	50 e0       	ldi	r21, 0x00	; 0
    24a0:	be 01       	movw	r22, r28
    24a2:	6f 5f       	subi	r22, 0xFF	; 255
    24a4:	7f 4f       	sbci	r23, 0xFF	; 255
    24a6:	c7 01       	movw	r24, r14
    24a8:	8e df       	rcall	.-228    	; 0x23c6 <prvWriteBytesToBuffer>
    24aa:	06 c0       	rjmp	.+12     	; 0x24b8 <prvWriteMessageToBuffer+0x60>
    24ac:	80 e0       	ldi	r24, 0x00	; 0
    24ae:	90 e0       	ldi	r25, 0x00	; 0
    24b0:	08 c0       	rjmp	.+16     	; 0x24c2 <prvWriteMessageToBuffer+0x6a>
    24b2:	80 e0       	ldi	r24, 0x00	; 0
    24b4:	90 e0       	ldi	r25, 0x00	; 0
    24b6:	05 c0       	rjmp	.+10     	; 0x24c2 <prvWriteMessageToBuffer+0x6a>
    24b8:	49 81       	ldd	r20, Y+1	; 0x01
    24ba:	5a 81       	ldd	r21, Y+2	; 0x02
    24bc:	b6 01       	movw	r22, r12
    24be:	c7 01       	movw	r24, r14
    24c0:	82 df       	rcall	.-252    	; 0x23c6 <prvWriteBytesToBuffer>
    24c2:	0f 90       	pop	r0
    24c4:	0f 90       	pop	r0
    24c6:	df 91       	pop	r29
    24c8:	cf 91       	pop	r28
    24ca:	1f 91       	pop	r17
    24cc:	0f 91       	pop	r16
    24ce:	ff 90       	pop	r15
    24d0:	ef 90       	pop	r14
    24d2:	df 90       	pop	r13
    24d4:	cf 90       	pop	r12
    24d6:	08 95       	ret

000024d8 <prvReadBytesFromBuffer>:
    24d8:	af 92       	push	r10
    24da:	bf 92       	push	r11
    24dc:	cf 92       	push	r12
    24de:	df 92       	push	r13
    24e0:	ef 92       	push	r14
    24e2:	ff 92       	push	r15
    24e4:	0f 93       	push	r16
    24e6:	1f 93       	push	r17
    24e8:	cf 93       	push	r28
    24ea:	df 93       	push	r29
    24ec:	7c 01       	movw	r14, r24
    24ee:	5b 01       	movw	r10, r22
    24f0:	e9 01       	movw	r28, r18
    24f2:	42 17       	cp	r20, r18
    24f4:	53 07       	cpc	r21, r19
    24f6:	08 f4       	brcc	.+2      	; 0x24fa <prvReadBytesFromBuffer+0x22>
    24f8:	ea 01       	movw	r28, r20
    24fa:	20 97       	sbiw	r28, 0x00	; 0
    24fc:	79 f1       	breq	.+94     	; 0x255c <prvReadBytesFromBuffer+0x84>
    24fe:	f7 01       	movw	r30, r14
    2500:	00 81       	ld	r16, Z
    2502:	11 81       	ldd	r17, Z+1	; 0x01
    2504:	c4 80       	ldd	r12, Z+4	; 0x04
    2506:	d5 80       	ldd	r13, Z+5	; 0x05
    2508:	c0 1a       	sub	r12, r16
    250a:	d1 0a       	sbc	r13, r17
    250c:	cc 15       	cp	r28, r12
    250e:	dd 05       	cpc	r29, r13
    2510:	08 f4       	brcc	.+2      	; 0x2514 <prvReadBytesFromBuffer+0x3c>
    2512:	6e 01       	movw	r12, r28
    2514:	f7 01       	movw	r30, r14
    2516:	64 85       	ldd	r22, Z+12	; 0x0c
    2518:	75 85       	ldd	r23, Z+13	; 0x0d
    251a:	60 0f       	add	r22, r16
    251c:	71 1f       	adc	r23, r17
    251e:	a6 01       	movw	r20, r12
    2520:	c5 01       	movw	r24, r10
    2522:	0e 94 11 31 	call	0x6222	; 0x6222 <memcpy>
    2526:	cc 16       	cp	r12, r28
    2528:	dd 06       	cpc	r13, r29
    252a:	58 f4       	brcc	.+22     	; 0x2542 <prvReadBytesFromBuffer+0x6a>
    252c:	ae 01       	movw	r20, r28
    252e:	4c 19       	sub	r20, r12
    2530:	5d 09       	sbc	r21, r13
    2532:	f7 01       	movw	r30, r14
    2534:	64 85       	ldd	r22, Z+12	; 0x0c
    2536:	75 85       	ldd	r23, Z+13	; 0x0d
    2538:	c5 01       	movw	r24, r10
    253a:	8c 0d       	add	r24, r12
    253c:	9d 1d       	adc	r25, r13
    253e:	0e 94 11 31 	call	0x6222	; 0x6222 <memcpy>
    2542:	0c 0f       	add	r16, r28
    2544:	1d 1f       	adc	r17, r29
    2546:	f7 01       	movw	r30, r14
    2548:	84 81       	ldd	r24, Z+4	; 0x04
    254a:	95 81       	ldd	r25, Z+5	; 0x05
    254c:	08 17       	cp	r16, r24
    254e:	19 07       	cpc	r17, r25
    2550:	10 f0       	brcs	.+4      	; 0x2556 <prvReadBytesFromBuffer+0x7e>
    2552:	08 1b       	sub	r16, r24
    2554:	19 0b       	sbc	r17, r25
    2556:	f7 01       	movw	r30, r14
    2558:	11 83       	std	Z+1, r17	; 0x01
    255a:	00 83       	st	Z, r16
    255c:	ce 01       	movw	r24, r28
    255e:	df 91       	pop	r29
    2560:	cf 91       	pop	r28
    2562:	1f 91       	pop	r17
    2564:	0f 91       	pop	r16
    2566:	ff 90       	pop	r15
    2568:	ef 90       	pop	r14
    256a:	df 90       	pop	r13
    256c:	cf 90       	pop	r12
    256e:	bf 90       	pop	r11
    2570:	af 90       	pop	r10
    2572:	08 95       	ret

00002574 <xStreamBufferGenericCreate>:
    2574:	ef 92       	push	r14
    2576:	ff 92       	push	r15
    2578:	1f 93       	push	r17
    257a:	cf 93       	push	r28
    257c:	df 93       	push	r29
    257e:	eb 01       	movw	r28, r22
    2580:	11 e0       	ldi	r17, 0x01	; 1
    2582:	41 30       	cpi	r20, 0x01	; 1
    2584:	09 f0       	breq	.+2      	; 0x2588 <xStreamBufferGenericCreate+0x14>
    2586:	10 e0       	ldi	r17, 0x00	; 0
    2588:	20 97       	sbiw	r28, 0x00	; 0
    258a:	11 f4       	brne	.+4      	; 0x2590 <xStreamBufferGenericCreate+0x1c>
    258c:	c1 e0       	ldi	r28, 0x01	; 1
    258e:	d0 e0       	ldi	r29, 0x00	; 0
    2590:	7c 01       	movw	r14, r24
    2592:	2f ef       	ldi	r18, 0xFF	; 255
    2594:	e2 1a       	sub	r14, r18
    2596:	f2 0a       	sbc	r15, r18
    2598:	41 96       	adiw	r24, 0x11	; 17
    259a:	53 d8       	rcall	.-3930   	; 0x1642 <pvPortMalloc>
    259c:	00 97       	sbiw	r24, 0x00	; 0
    259e:	81 f0       	breq	.+32     	; 0x25c0 <xStreamBufferGenericCreate+0x4c>
    25a0:	20 e1       	ldi	r18, 0x10	; 16
    25a2:	fc 01       	movw	r30, r24
    25a4:	11 92       	st	Z+, r1
    25a6:	2a 95       	dec	r18
    25a8:	e9 f7       	brne	.-6      	; 0x25a4 <xStreamBufferGenericCreate+0x30>
    25aa:	9c 01       	movw	r18, r24
    25ac:	20 5f       	subi	r18, 0xF0	; 240
    25ae:	3f 4f       	sbci	r19, 0xFF	; 255
    25b0:	fc 01       	movw	r30, r24
    25b2:	35 87       	std	Z+13, r19	; 0x0d
    25b4:	24 87       	std	Z+12, r18	; 0x0c
    25b6:	f5 82       	std	Z+5, r15	; 0x05
    25b8:	e4 82       	std	Z+4, r14	; 0x04
    25ba:	d7 83       	std	Z+7, r29	; 0x07
    25bc:	c6 83       	std	Z+6, r28	; 0x06
    25be:	16 87       	std	Z+14, r17	; 0x0e
    25c0:	df 91       	pop	r29
    25c2:	cf 91       	pop	r28
    25c4:	1f 91       	pop	r17
    25c6:	ff 90       	pop	r15
    25c8:	ef 90       	pop	r14
    25ca:	08 95       	ret

000025cc <xStreamBufferReset>:
    25cc:	cf 93       	push	r28
    25ce:	df 93       	push	r29
    25d0:	fc 01       	movw	r30, r24
    25d2:	27 85       	ldd	r18, Z+15	; 0x0f
    25d4:	0f b6       	in	r0, 0x3f	; 63
    25d6:	f8 94       	cli
    25d8:	0f 92       	push	r0
    25da:	80 85       	ldd	r24, Z+8	; 0x08
    25dc:	91 85       	ldd	r25, Z+9	; 0x09
    25de:	89 2b       	or	r24, r25
    25e0:	d1 f4       	brne	.+52     	; 0x2616 <xStreamBufferReset+0x4a>
    25e2:	82 85       	ldd	r24, Z+10	; 0x0a
    25e4:	93 85       	ldd	r25, Z+11	; 0x0b
    25e6:	89 2b       	or	r24, r25
    25e8:	c1 f4       	brne	.+48     	; 0x261a <xStreamBufferReset+0x4e>
    25ea:	86 85       	ldd	r24, Z+14	; 0x0e
    25ec:	46 81       	ldd	r20, Z+6	; 0x06
    25ee:	57 81       	ldd	r21, Z+7	; 0x07
    25f0:	64 81       	ldd	r22, Z+4	; 0x04
    25f2:	75 81       	ldd	r23, Z+5	; 0x05
    25f4:	a4 85       	ldd	r26, Z+12	; 0x0c
    25f6:	b5 85       	ldd	r27, Z+13	; 0x0d
    25f8:	90 e1       	ldi	r25, 0x10	; 16
    25fa:	ef 01       	movw	r28, r30
    25fc:	19 92       	st	Y+, r1
    25fe:	9a 95       	dec	r25
    2600:	e9 f7       	brne	.-6      	; 0x25fc <xStreamBufferReset+0x30>
    2602:	b5 87       	std	Z+13, r27	; 0x0d
    2604:	a4 87       	std	Z+12, r26	; 0x0c
    2606:	75 83       	std	Z+5, r23	; 0x05
    2608:	64 83       	std	Z+4, r22	; 0x04
    260a:	57 83       	std	Z+7, r21	; 0x07
    260c:	46 83       	std	Z+6, r20	; 0x06
    260e:	86 87       	std	Z+14, r24	; 0x0e
    2610:	27 87       	std	Z+15, r18	; 0x0f
    2612:	81 e0       	ldi	r24, 0x01	; 1
    2614:	03 c0       	rjmp	.+6      	; 0x261c <xStreamBufferReset+0x50>
    2616:	80 e0       	ldi	r24, 0x00	; 0
    2618:	01 c0       	rjmp	.+2      	; 0x261c <xStreamBufferReset+0x50>
    261a:	80 e0       	ldi	r24, 0x00	; 0
    261c:	0f 90       	pop	r0
    261e:	0f be       	out	0x3f, r0	; 63
    2620:	df 91       	pop	r29
    2622:	cf 91       	pop	r28
    2624:	08 95       	ret

00002626 <xStreamBufferSpacesAvailable>:
    2626:	fc 01       	movw	r30, r24
    2628:	24 81       	ldd	r18, Z+4	; 0x04
    262a:	35 81       	ldd	r19, Z+5	; 0x05
    262c:	80 81       	ld	r24, Z
    262e:	91 81       	ldd	r25, Z+1	; 0x01
    2630:	42 81       	ldd	r20, Z+2	; 0x02
    2632:	53 81       	ldd	r21, Z+3	; 0x03
    2634:	82 0f       	add	r24, r18
    2636:	93 1f       	adc	r25, r19
    2638:	01 97       	sbiw	r24, 0x01	; 1
    263a:	84 1b       	sub	r24, r20
    263c:	95 0b       	sbc	r25, r21
    263e:	82 17       	cp	r24, r18
    2640:	93 07       	cpc	r25, r19
    2642:	10 f0       	brcs	.+4      	; 0x2648 <xStreamBufferSpacesAvailable+0x22>
    2644:	82 1b       	sub	r24, r18
    2646:	93 0b       	sbc	r25, r19
    2648:	08 95       	ret

0000264a <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void *pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    264a:	2f 92       	push	r2
    264c:	3f 92       	push	r3
    264e:	4f 92       	push	r4
    2650:	5f 92       	push	r5
    2652:	6f 92       	push	r6
    2654:	7f 92       	push	r7
    2656:	8f 92       	push	r8
    2658:	9f 92       	push	r9
    265a:	af 92       	push	r10
    265c:	bf 92       	push	r11
    265e:	cf 92       	push	r12
    2660:	df 92       	push	r13
    2662:	ef 92       	push	r14
    2664:	ff 92       	push	r15
    2666:	0f 93       	push	r16
    2668:	1f 93       	push	r17
    266a:	cf 93       	push	r28
    266c:	df 93       	push	r29
    266e:	cd b7       	in	r28, 0x3d	; 61
    2670:	de b7       	in	r29, 0x3e	; 62
    2672:	29 97       	sbiw	r28, 0x09	; 9
    2674:	0f b6       	in	r0, 0x3f	; 63
    2676:	f8 94       	cli
    2678:	de bf       	out	0x3e, r29	; 62
    267a:	0f be       	out	0x3f, r0	; 63
    267c:	cd bf       	out	0x3d, r28	; 61
    267e:	5c 01       	movw	r10, r24
    2680:	1b 01       	movw	r2, r22
    2682:	2a 01       	movw	r4, r20
    2684:	0e 83       	std	Y+6, r16	; 0x06
    2686:	1f 83       	std	Y+7, r17	; 0x07
    2688:	28 87       	std	Y+8, r18	; 0x08
    268a:	39 87       	std	Y+9, r19	; 0x09

    /* This send function is used to write to both message buffers and stream
    buffers.  If this is a message buffer then the space needed must be
    increased by the amount of bytes needed to store the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    268c:	fc 01       	movw	r30, r24
    268e:	86 85       	ldd	r24, Z+14	; 0x0e
    2690:	80 ff       	sbrs	r24, 0
    2692:	05 c0       	rjmp	.+10     	; 0x269e <xStreamBufferSend+0x54>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    2694:	3a 01       	movw	r6, r20
    2696:	f2 e0       	ldi	r31, 0x02	; 2
    2698:	6f 0e       	add	r6, r31
    269a:	71 1c       	adc	r7, r1
    269c:	01 c0       	rjmp	.+2      	; 0x26a0 <xStreamBufferSend+0x56>
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReturn, xSpace = 0;
size_t xRequiredSpace = xDataLengthBytes;
    269e:	3a 01       	movw	r6, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    26a0:	8e 81       	ldd	r24, Y+6	; 0x06
    26a2:	9f 81       	ldd	r25, Y+7	; 0x07
    26a4:	a8 85       	ldd	r26, Y+8	; 0x08
    26a6:	b9 85       	ldd	r27, Y+9	; 0x09
    26a8:	89 2b       	or	r24, r25
    26aa:	8a 2b       	or	r24, r26
    26ac:	8b 2b       	or	r24, r27
    26ae:	09 f4       	brne	.+2      	; 0x26b2 <xStreamBufferSend+0x68>
    26b0:	34 c0       	rjmp	.+104    	; 0x271a <xStreamBufferSend+0xd0>
    {
        vTaskSetTimeOutState( &xTimeOut );
    26b2:	ce 01       	movw	r24, r28
    26b4:	01 96       	adiw	r24, 0x01	; 1
    26b6:	24 d6       	rcall	.+3144   	; 0x3300 <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
            buffer. */
            taskENTER_CRITICAL();
    26b8:	0f b6       	in	r0, 0x3f	; 63
    26ba:	f8 94       	cli
    26bc:	0f 92       	push	r0
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    26be:	c5 01       	movw	r24, r10
    26c0:	b2 df       	rcall	.-156    	; 0x2626 <xStreamBufferSpacesAvailable>
    26c2:	4c 01       	movw	r8, r24

                if( xSpace < xRequiredSpace )
    26c4:	86 15       	cp	r24, r6
    26c6:	97 05       	cpc	r25, r7
    26c8:	18 f5       	brcc	.+70     	; 0x2710 <xStreamBufferSend+0xc6>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClear( NULL );
    26ca:	80 e0       	ldi	r24, 0x00	; 0
    26cc:	90 e0       	ldi	r25, 0x00	; 0
    26ce:	0e 94 d4 1c 	call	0x39a8	; 0x39a8 <xTaskNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    26d2:	96 d6       	rcall	.+3372   	; 0x3400 <xTaskGetCurrentTaskHandle>
    26d4:	f5 01       	movw	r30, r10
    26d6:	93 87       	std	Z+11, r25	; 0x0b
    26d8:	82 87       	std	Z+10, r24	; 0x0a
                {
                    taskEXIT_CRITICAL();
                    break;
                }
            }
            taskEXIT_CRITICAL();
    26da:	0f 90       	pop	r0
    26dc:	0f be       	out	0x3f, r0	; 63

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    26de:	ce 80       	ldd	r12, Y+6	; 0x06
    26e0:	df 80       	ldd	r13, Y+7	; 0x07
    26e2:	e8 84       	ldd	r14, Y+8	; 0x08
    26e4:	f9 84       	ldd	r15, Y+9	; 0x09
    26e6:	00 e0       	ldi	r16, 0x00	; 0
    26e8:	10 e0       	ldi	r17, 0x00	; 0
    26ea:	20 e0       	ldi	r18, 0x00	; 0
    26ec:	30 e0       	ldi	r19, 0x00	; 0
    26ee:	a9 01       	movw	r20, r18
    26f0:	60 e0       	ldi	r22, 0x00	; 0
    26f2:	70 e0       	ldi	r23, 0x00	; 0
    26f4:	cb 01       	movw	r24, r22
    26f6:	cd d7       	rcall	.+3994   	; 0x3692 <xTaskNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
    26f8:	f5 01       	movw	r30, r10
    26fa:	13 86       	std	Z+11, r1	; 0x0b
    26fc:	12 86       	std	Z+10, r1	; 0x0a

        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    26fe:	be 01       	movw	r22, r28
    2700:	6a 5f       	subi	r22, 0xFA	; 250
    2702:	7f 4f       	sbci	r23, 0xFF	; 255
    2704:	ce 01       	movw	r24, r28
    2706:	01 96       	adiw	r24, 0x01	; 1
    2708:	22 d6       	rcall	.+3140   	; 0x334e <xTaskCheckForTimeOut>
    270a:	88 23       	and	r24, r24
    270c:	a9 f2       	breq	.-86     	; 0x26b8 <xStreamBufferSend+0x6e>
    270e:	02 c0       	rjmp	.+4      	; 0x2714 <xStreamBufferSend+0xca>
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
                }
                else
                {
                    taskEXIT_CRITICAL();
    2710:	0f 90       	pop	r0
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
    2712:	0f be       	out	0x3f, r0	; 63
    2714:	81 14       	cp	r8, r1
    2716:	91 04       	cpc	r9, r1
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    2718:	19 f4       	brne	.+6      	; 0x2720 <xStreamBufferSend+0xd6>
    271a:	c5 01       	movw	r24, r10
    271c:	84 df       	rcall	.-248    	; 0x2626 <xStreamBufferSpacesAvailable>
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    271e:	4c 01       	movw	r8, r24
    2720:	83 01       	movw	r16, r6
    2722:	94 01       	movw	r18, r8
    2724:	a2 01       	movw	r20, r4
    2726:	b1 01       	movw	r22, r2
    2728:	c5 01       	movw	r24, r10
    272a:	96 de       	rcall	.-724    	; 0x2458 <prvWriteMessageToBuffer>

    if( xReturn > ( size_t ) 0 )
    272c:	7c 01       	movw	r14, r24
    272e:	89 2b       	or	r24, r25
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    2730:	e1 f0       	breq	.+56     	; 0x276a <xStreamBufferSend+0x120>
    2732:	c5 01       	movw	r24, r10
    2734:	35 de       	rcall	.-918    	; 0x23a0 <prvBytesInBuffer>
    2736:	f5 01       	movw	r30, r10
    2738:	26 81       	ldd	r18, Z+6	; 0x06
    273a:	37 81       	ldd	r19, Z+7	; 0x07
    273c:	82 17       	cp	r24, r18
    273e:	93 07       	cpc	r25, r19
        {
            sbSEND_COMPLETED( pxStreamBuffer );
    2740:	a0 f0       	brcs	.+40     	; 0x276a <xStreamBufferSend+0x120>
    2742:	10 d3       	rcall	.+1568   	; 0x2d64 <vTaskSuspendAll>
    2744:	f5 01       	movw	r30, r10
    2746:	80 85       	ldd	r24, Z+8	; 0x08
    2748:	91 85       	ldd	r25, Z+9	; 0x09
    274a:	89 2b       	or	r24, r25
    274c:	69 f0       	breq	.+26     	; 0x2768 <xStreamBufferSend+0x11e>
    274e:	80 85       	ldd	r24, Z+8	; 0x08
    2750:	91 85       	ldd	r25, Z+9	; 0x09
    2752:	00 e0       	ldi	r16, 0x00	; 0
    2754:	10 e0       	ldi	r17, 0x00	; 0
    2756:	20 e0       	ldi	r18, 0x00	; 0
    2758:	40 e0       	ldi	r20, 0x00	; 0
    275a:	50 e0       	ldi	r21, 0x00	; 0
    275c:	ba 01       	movw	r22, r20
    275e:	0e 94 d3 1b 	call	0x37a6	; 0x37a6 <xTaskGenericNotify>
    2762:	f5 01       	movw	r30, r10
    2764:	11 86       	std	Z+9, r1	; 0x09
    2766:	10 86       	std	Z+8, r1	; 0x08
    2768:	e6 d3       	rcall	.+1996   	; 0x2f36 <xTaskResumeAll>
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    276a:	c7 01       	movw	r24, r14
    276c:	29 96       	adiw	r28, 0x09	; 9
    276e:	0f b6       	in	r0, 0x3f	; 63
    2770:	f8 94       	cli
    2772:	de bf       	out	0x3e, r29	; 62
    2774:	0f be       	out	0x3f, r0	; 63
    2776:	cd bf       	out	0x3d, r28	; 61
    2778:	df 91       	pop	r29
    277a:	cf 91       	pop	r28
    277c:	1f 91       	pop	r17
    277e:	0f 91       	pop	r16
    2780:	ff 90       	pop	r15
    2782:	ef 90       	pop	r14
    2784:	df 90       	pop	r13
    2786:	cf 90       	pop	r12
    2788:	bf 90       	pop	r11
    278a:	af 90       	pop	r10
    278c:	9f 90       	pop	r9
    278e:	8f 90       	pop	r8
    2790:	7f 90       	pop	r7
    2792:	6f 90       	pop	r6
    2794:	5f 90       	pop	r5
    2796:	4f 90       	pop	r4
    2798:	3f 90       	pop	r3
    279a:	2f 90       	pop	r2
    279c:	08 95       	ret

0000279e <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void *pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    279e:	af 92       	push	r10
    27a0:	bf 92       	push	r11
    27a2:	cf 92       	push	r12
    27a4:	df 92       	push	r13
    27a6:	ef 92       	push	r14
    27a8:	ff 92       	push	r15
    27aa:	0f 93       	push	r16
    27ac:	1f 93       	push	r17
    27ae:	cf 93       	push	r28
    27b0:	df 93       	push	r29
    27b2:	ec 01       	movw	r28, r24
    27b4:	5b 01       	movw	r10, r22
    27b6:	6a 01       	movw	r12, r20
    27b8:	79 01       	movw	r14, r18

    /* This send function is used to write to both message buffers and stream
    buffers.  If this is a message buffer then the space needed must be
    increased by the amount of bytes needed to store the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    27ba:	8e 85       	ldd	r24, Y+14	; 0x0e
    27bc:	80 ff       	sbrs	r24, 0
    27be:	04 c0       	rjmp	.+8      	; 0x27c8 <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    27c0:	8a 01       	movw	r16, r20
    27c2:	0e 5f       	subi	r16, 0xFE	; 254
    27c4:	1f 4f       	sbci	r17, 0xFF	; 255
    27c6:	01 c0       	rjmp	.+2      	; 0x27ca <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReturn, xSpace;
size_t xRequiredSpace = xDataLengthBytes;
    27c8:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    27ca:	ce 01       	movw	r24, r28
    27cc:	2c df       	rcall	.-424    	; 0x2626 <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    27ce:	9c 01       	movw	r18, r24
    27d0:	a6 01       	movw	r20, r12
    27d2:	b5 01       	movw	r22, r10
    27d4:	ce 01       	movw	r24, r28
    27d6:	40 de       	rcall	.-896    	; 0x2458 <prvWriteMessageToBuffer>
    27d8:	6c 01       	movw	r12, r24

    if( xReturn > ( size_t ) 0 )
    27da:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    27dc:	b9 f0       	breq	.+46     	; 0x280c <xStreamBufferSendFromISR+0x6e>
    27de:	ce 01       	movw	r24, r28
    27e0:	df dd       	rcall	.-1090   	; 0x23a0 <prvBytesInBuffer>
    27e2:	2e 81       	ldd	r18, Y+6	; 0x06
    27e4:	3f 81       	ldd	r19, Y+7	; 0x07
    27e6:	82 17       	cp	r24, r18
    27e8:	93 07       	cpc	r25, r19
    27ea:	80 f0       	brcs	.+32     	; 0x280c <xStreamBufferSendFromISR+0x6e>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    27ec:	88 85       	ldd	r24, Y+8	; 0x08
    27ee:	99 85       	ldd	r25, Y+9	; 0x09
    27f0:	89 2b       	or	r24, r25
    27f2:	61 f0       	breq	.+24     	; 0x280c <xStreamBufferSendFromISR+0x6e>
    27f4:	88 85       	ldd	r24, Y+8	; 0x08
    27f6:	99 85       	ldd	r25, Y+9	; 0x09
    27f8:	00 e0       	ldi	r16, 0x00	; 0
    27fa:	10 e0       	ldi	r17, 0x00	; 0
    27fc:	20 e0       	ldi	r18, 0x00	; 0
    27fe:	40 e0       	ldi	r20, 0x00	; 0
    2800:	50 e0       	ldi	r21, 0x00	; 0
    2802:	ba 01       	movw	r22, r20
    2804:	0e 94 4b 1c 	call	0x3896	; 0x3896 <xTaskGenericNotifyFromISR>
    2808:	19 86       	std	Y+9, r1	; 0x09
    280a:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    280c:	c6 01       	movw	r24, r12
    280e:	df 91       	pop	r29
    2810:	cf 91       	pop	r28
    2812:	1f 91       	pop	r17
    2814:	0f 91       	pop	r16
    2816:	ff 90       	pop	r15
    2818:	ef 90       	pop	r14
    281a:	df 90       	pop	r13
    281c:	cf 90       	pop	r12
    281e:	bf 90       	pop	r11
    2820:	af 90       	pop	r10
    2822:	08 95       	ret

00002824 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void *pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    2824:	4f 92       	push	r4
    2826:	5f 92       	push	r5
    2828:	6f 92       	push	r6
    282a:	7f 92       	push	r7
    282c:	8f 92       	push	r8
    282e:	9f 92       	push	r9
    2830:	af 92       	push	r10
    2832:	bf 92       	push	r11
    2834:	cf 92       	push	r12
    2836:	df 92       	push	r13
    2838:	ef 92       	push	r14
    283a:	ff 92       	push	r15
    283c:	0f 93       	push	r16
    283e:	1f 93       	push	r17
    2840:	cf 93       	push	r28
    2842:	df 93       	push	r29
    2844:	1f 92       	push	r1
    2846:	1f 92       	push	r1
    2848:	cd b7       	in	r28, 0x3d	; 61
    284a:	de b7       	in	r29, 0x3e	; 62
    284c:	5c 01       	movw	r10, r24
    284e:	2b 01       	movw	r4, r22
    2850:	3a 01       	movw	r6, r20
    2852:	68 01       	movw	r12, r16
    2854:	79 01       	movw	r14, r18
    /* This receive function is used by both message buffers, which store
    discrete messages, and stream buffers, which store a continuous stream of
    bytes.  Discrete messages include an additional
    sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    2856:	fc 01       	movw	r30, r24
    2858:	86 85       	ldd	r24, Z+14	; 0x0e
    285a:	80 fd       	sbrc	r24, 0
    285c:	03 c0       	rjmp	.+6      	; 0x2864 <xStreamBufferReceive+0x40>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    285e:	81 2c       	mov	r8, r1
    2860:	91 2c       	mov	r9, r1
    2862:	04 c0       	rjmp	.+8      	; 0x286c <xStreamBufferReceive+0x48>
    bytes.  Discrete messages include an additional
    sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    2864:	68 94       	set
    2866:	88 24       	eor	r8, r8
    2868:	81 f8       	bld	r8, 1
    286a:	91 2c       	mov	r9, r1
    else
    {
        xBytesToStoreMessageLength = 0;
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    286c:	c1 14       	cp	r12, r1
    286e:	d1 04       	cpc	r13, r1
    2870:	e1 04       	cpc	r14, r1
    2872:	f1 04       	cpc	r15, r1
    2874:	31 f1       	breq	.+76     	; 0x28c2 <xStreamBufferReceive+0x9e>
    {
        /* Checking if there is data and clearing the notification state must be
        performed atomically. */
        taskENTER_CRITICAL();
    2876:	0f b6       	in	r0, 0x3f	; 63
    2878:	f8 94       	cli
    287a:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    287c:	c5 01       	movw	r24, r10
    287e:	90 dd       	rcall	.-1248   	; 0x23a0 <prvBytesInBuffer>
    2880:	8c 01       	movw	r16, r24
            /* If this function was invoked by a message buffer read then
            xBytesToStoreMessageLength holds the number of bytes used to hold
            the length of the next discrete message.  If this function was
            invoked by a stream buffer read then xBytesToStoreMessageLength will
            be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    2882:	88 16       	cp	r8, r24
    2884:	99 06       	cpc	r9, r25
    2886:	40 f0       	brcs	.+16     	; 0x2898 <xStreamBufferReceive+0x74>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    2888:	80 e0       	ldi	r24, 0x00	; 0
    288a:	90 e0       	ldi	r25, 0x00	; 0
    288c:	0e 94 d4 1c 	call	0x39a8	; 0x39a8 <xTaskNotifyStateClear>

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    2890:	b7 d5       	rcall	.+2926   	; 0x3400 <xTaskGetCurrentTaskHandle>
    2892:	f5 01       	movw	r30, r10
    2894:	91 87       	std	Z+9, r25	; 0x09
    2896:	80 87       	std	Z+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    2898:	0f 90       	pop	r0
    289a:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    289c:	80 16       	cp	r8, r16
    289e:	91 06       	cpc	r9, r17
    28a0:	b0 f0       	brcs	.+44     	; 0x28ce <xStreamBufferReceive+0xaa>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    28a2:	00 e0       	ldi	r16, 0x00	; 0
    28a4:	10 e0       	ldi	r17, 0x00	; 0
    28a6:	20 e0       	ldi	r18, 0x00	; 0
    28a8:	30 e0       	ldi	r19, 0x00	; 0
    28aa:	a9 01       	movw	r20, r18
    28ac:	60 e0       	ldi	r22, 0x00	; 0
    28ae:	70 e0       	ldi	r23, 0x00	; 0
    28b0:	cb 01       	movw	r24, r22
    28b2:	ef d6       	rcall	.+3550   	; 0x3692 <xTaskNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    28b4:	f5 01       	movw	r30, r10
    28b6:	11 86       	std	Z+9, r1	; 0x09

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    28b8:	10 86       	std	Z+8, r1	; 0x08
    28ba:	c5 01       	movw	r24, r10
    28bc:	71 dd       	rcall	.-1310   	; 0x23a0 <prvBytesInBuffer>
    28be:	8c 01       	movw	r16, r24
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    28c0:	03 c0       	rjmp	.+6      	; 0x28c8 <xStreamBufferReceive+0xa4>
    28c2:	c5 01       	movw	r24, r10
    28c4:	6d dd       	rcall	.-1318   	; 0x23a0 <prvBytesInBuffer>
    28c6:	8c 01       	movw	r16, r24
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
    holds the number of bytes used to store the message length) or a stream of
    bytes (where xBytesToStoreMessageLength is zero), the number of bytes
    available must be greater than xBytesToStoreMessageLength to be able to
    read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    28c8:	80 16       	cp	r8, r16
    28ca:	91 06       	cpc	r9, r17
    28cc:	b8 f5       	brcc	.+110    	; 0x293c <xStreamBufferReceive+0x118>
                                        size_t xBytesToStoreMessageLength )
{
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

    if( xBytesToStoreMessageLength != ( size_t ) 0 )
    28ce:	81 14       	cp	r8, r1
    28d0:	91 04       	cpc	r9, r1
    28d2:	c1 f0       	breq	.+48     	; 0x2904 <xStreamBufferReceive+0xe0>
    {
        /* A discrete message is being received.  First receive the length
        of the message.  A copy of the tail is stored so the buffer can be
        returned to its prior state if the length of the message is too
        large for the provided buffer. */
        xOriginalTail = pxStreamBuffer->xTail;
    28d4:	f5 01       	movw	r30, r10
    28d6:	e0 80       	ld	r14, Z
    28d8:	f1 80       	ldd	r15, Z+1	; 0x01
        ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
    28da:	98 01       	movw	r18, r16
    28dc:	a4 01       	movw	r20, r8
    28de:	be 01       	movw	r22, r28
    28e0:	6f 5f       	subi	r22, 0xFF	; 255
    28e2:	7f 4f       	sbci	r23, 0xFF	; 255
    28e4:	c5 01       	movw	r24, r10
    28e6:	f8 dd       	rcall	.-1040   	; 0x24d8 <prvReadBytesFromBuffer>
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
    28e8:	89 81       	ldd	r24, Y+1	; 0x01
    28ea:	9a 81       	ldd	r25, Y+2	; 0x02

        /* Reduce the number of bytes available by the number of bytes just
        read out. */
        xBytesAvailable -= xBytesToStoreMessageLength;
    28ec:	08 19       	sub	r16, r8
    28ee:	19 09       	sbc	r17, r9

        /* Check there is enough space in the buffer provided by the
        user. */
        if( xNextMessageLength > xBufferLengthBytes )
    28f0:	68 16       	cp	r6, r24
    28f2:	79 06       	cpc	r7, r25
    28f4:	30 f4       	brcc	.+12     	; 0x2902 <xStreamBufferReceive+0xde>
        {
            /* The user has provided insufficient space to read the message
            so return the buffer to its previous state (so the length of
            the message is in the buffer again). */
            pxStreamBuffer->xTail = xOriginalTail;
    28f6:	f5 01       	movw	r30, r10
    28f8:	f1 82       	std	Z+1, r15	; 0x01
    28fa:	e0 82       	st	Z, r14
            xNextMessageLength = 0;
    28fc:	61 2c       	mov	r6, r1
    28fe:	71 2c       	mov	r7, r1
        of the message.  A copy of the tail is stored so the buffer can be
        returned to its prior state if the length of the message is too
        large for the provided buffer. */
        xOriginalTail = pxStreamBuffer->xTail;
        ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
    2900:	01 c0       	rjmp	.+2      	; 0x2904 <xStreamBufferReceive+0xe0>
        message), so read as many bytes as possible. */
        xNextMessageLength = xBufferLengthBytes;
    }

    /* Read the actual data. */
    xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
    2902:	3c 01       	movw	r6, r24
    2904:	98 01       	movw	r18, r16
    2906:	a3 01       	movw	r20, r6
    2908:	b2 01       	movw	r22, r4
    290a:	c5 01       	movw	r24, r10
    290c:	e5 dd       	rcall	.-1078   	; 0x24d8 <prvReadBytesFromBuffer>
    if( xBytesAvailable > xBytesToStoreMessageLength )
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    290e:	7c 01       	movw	r14, r24
    2910:	89 2b       	or	r24, r25
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    2912:	b1 f0       	breq	.+44     	; 0x2940 <xStreamBufferReceive+0x11c>
    2914:	27 d2       	rcall	.+1102   	; 0x2d64 <vTaskSuspendAll>
    2916:	f5 01       	movw	r30, r10
    2918:	82 85       	ldd	r24, Z+10	; 0x0a
    291a:	93 85       	ldd	r25, Z+11	; 0x0b
    291c:	89 2b       	or	r24, r25
    291e:	61 f0       	breq	.+24     	; 0x2938 <xStreamBufferReceive+0x114>
    2920:	82 85       	ldd	r24, Z+10	; 0x0a
    2922:	93 85       	ldd	r25, Z+11	; 0x0b
    2924:	00 e0       	ldi	r16, 0x00	; 0
    2926:	10 e0       	ldi	r17, 0x00	; 0
    2928:	20 e0       	ldi	r18, 0x00	; 0
    292a:	40 e0       	ldi	r20, 0x00	; 0
    292c:	50 e0       	ldi	r21, 0x00	; 0
    292e:	ba 01       	movw	r22, r20
    2930:	3a d7       	rcall	.+3700   	; 0x37a6 <xTaskGenericNotify>
    2932:	f5 01       	movw	r30, r10
    2934:	13 86       	std	Z+11, r1	; 0x0b
    2936:	12 86       	std	Z+10, r1	; 0x0a
    2938:	fe d2       	rcall	.+1532   	; 0x2f36 <xTaskResumeAll>
    293a:	02 c0       	rjmp	.+4      	; 0x2940 <xStreamBufferReceive+0x11c>
                             void *pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    293c:	e1 2c       	mov	r14, r1
    293e:	f1 2c       	mov	r15, r1
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    2940:	c7 01       	movw	r24, r14
    2942:	0f 90       	pop	r0
    2944:	0f 90       	pop	r0
    2946:	df 91       	pop	r29
    2948:	cf 91       	pop	r28
    294a:	1f 91       	pop	r17
    294c:	0f 91       	pop	r16
    294e:	ff 90       	pop	r15
    2950:	ef 90       	pop	r14
    2952:	df 90       	pop	r13
    2954:	cf 90       	pop	r12
    2956:	bf 90       	pop	r11
    2958:	af 90       	pop	r10
    295a:	9f 90       	pop	r9
    295c:	8f 90       	pop	r8
    295e:	7f 90       	pop	r7
    2960:	6f 90       	pop	r6
    2962:	5f 90       	pop	r5
    2964:	4f 90       	pop	r4
    2966:	08 95       	ret

00002968 <prvResetNextTaskUnblockTime>:
    2968:	e0 91 7f 18 	lds	r30, 0x187F	; 0x80187f <pxDelayedTaskList>
    296c:	f0 91 80 18 	lds	r31, 0x1880	; 0x801880 <pxDelayedTaskList+0x1>
    2970:	80 81       	ld	r24, Z
    2972:	81 11       	cpse	r24, r1
    2974:	0c c0       	rjmp	.+24     	; 0x298e <prvResetNextTaskUnblockTime+0x26>
    2976:	8f ef       	ldi	r24, 0xFF	; 255
    2978:	9f ef       	ldi	r25, 0xFF	; 255
    297a:	dc 01       	movw	r26, r24
    297c:	80 93 4c 18 	sts	0x184C, r24	; 0x80184c <xNextTaskUnblockTime>
    2980:	90 93 4d 18 	sts	0x184D, r25	; 0x80184d <xNextTaskUnblockTime+0x1>
    2984:	a0 93 4e 18 	sts	0x184E, r26	; 0x80184e <xNextTaskUnblockTime+0x2>
    2988:	b0 93 4f 18 	sts	0x184F, r27	; 0x80184f <xNextTaskUnblockTime+0x3>
    298c:	08 95       	ret
    298e:	e0 91 7f 18 	lds	r30, 0x187F	; 0x80187f <pxDelayedTaskList>
    2992:	f0 91 80 18 	lds	r31, 0x1880	; 0x801880 <pxDelayedTaskList+0x1>
    2996:	07 80       	ldd	r0, Z+7	; 0x07
    2998:	f0 85       	ldd	r31, Z+8	; 0x08
    299a:	e0 2d       	mov	r30, r0
    299c:	00 84       	ldd	r0, Z+8	; 0x08
    299e:	f1 85       	ldd	r31, Z+9	; 0x09
    29a0:	e0 2d       	mov	r30, r0
    29a2:	82 81       	ldd	r24, Z+2	; 0x02
    29a4:	93 81       	ldd	r25, Z+3	; 0x03
    29a6:	a4 81       	ldd	r26, Z+4	; 0x04
    29a8:	b5 81       	ldd	r27, Z+5	; 0x05
    29aa:	80 93 4c 18 	sts	0x184C, r24	; 0x80184c <xNextTaskUnblockTime>
    29ae:	90 93 4d 18 	sts	0x184D, r25	; 0x80184d <xNextTaskUnblockTime+0x1>
    29b2:	a0 93 4e 18 	sts	0x184E, r26	; 0x80184e <xNextTaskUnblockTime+0x2>
    29b6:	b0 93 4f 18 	sts	0x184F, r27	; 0x80184f <xNextTaskUnblockTime+0x3>
    29ba:	08 95       	ret

000029bc <prvAddCurrentTaskToDelayedList>:
    29bc:	8f 92       	push	r8
    29be:	9f 92       	push	r9
    29c0:	af 92       	push	r10
    29c2:	bf 92       	push	r11
    29c4:	cf 92       	push	r12
    29c6:	df 92       	push	r13
    29c8:	ef 92       	push	r14
    29ca:	ff 92       	push	r15
    29cc:	cf 93       	push	r28
    29ce:	6b 01       	movw	r12, r22
    29d0:	7c 01       	movw	r14, r24
    29d2:	c4 2f       	mov	r28, r20
    29d4:	80 90 56 18 	lds	r8, 0x1856	; 0x801856 <xTickCount>
    29d8:	90 90 57 18 	lds	r9, 0x1857	; 0x801857 <xTickCount+0x1>
    29dc:	a0 90 58 18 	lds	r10, 0x1858	; 0x801858 <xTickCount+0x2>
    29e0:	b0 90 59 18 	lds	r11, 0x1859	; 0x801859 <xTickCount+0x3>
    29e4:	80 91 d9 18 	lds	r24, 0x18D9	; 0x8018d9 <pxCurrentTCB>
    29e8:	90 91 da 18 	lds	r25, 0x18DA	; 0x8018da <pxCurrentTCB+0x1>
    29ec:	02 96       	adiw	r24, 0x02	; 2
    29ee:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <uxListRemove>
    29f2:	8f ef       	ldi	r24, 0xFF	; 255
    29f4:	c8 16       	cp	r12, r24
    29f6:	d8 06       	cpc	r13, r24
    29f8:	e8 06       	cpc	r14, r24
    29fa:	f8 06       	cpc	r15, r24
    29fc:	69 f4       	brne	.+26     	; 0x2a18 <prvAddCurrentTaskToDelayedList+0x5c>
    29fe:	cc 23       	and	r28, r28
    2a00:	59 f0       	breq	.+22     	; 0x2a18 <prvAddCurrentTaskToDelayedList+0x5c>
    2a02:	60 91 d9 18 	lds	r22, 0x18D9	; 0x8018d9 <pxCurrentTCB>
    2a06:	70 91 da 18 	lds	r23, 0x18DA	; 0x8018da <pxCurrentTCB+0x1>
    2a0a:	6e 5f       	subi	r22, 0xFE	; 254
    2a0c:	7f 4f       	sbci	r23, 0xFF	; 255
    2a0e:	8b e5       	ldi	r24, 0x5B	; 91
    2a10:	98 e1       	ldi	r25, 0x18	; 24
    2a12:	0e 94 20 0c 	call	0x1840	; 0x1840 <vListInsertEnd>
    2a16:	3f c0       	rjmp	.+126    	; 0x2a96 <prvAddCurrentTaskToDelayedList+0xda>
    2a18:	c8 0c       	add	r12, r8
    2a1a:	d9 1c       	adc	r13, r9
    2a1c:	ea 1c       	adc	r14, r10
    2a1e:	fb 1c       	adc	r15, r11
    2a20:	e0 91 d9 18 	lds	r30, 0x18D9	; 0x8018d9 <pxCurrentTCB>
    2a24:	f0 91 da 18 	lds	r31, 0x18DA	; 0x8018da <pxCurrentTCB+0x1>
    2a28:	c2 82       	std	Z+2, r12	; 0x02
    2a2a:	d3 82       	std	Z+3, r13	; 0x03
    2a2c:	e4 82       	std	Z+4, r14	; 0x04
    2a2e:	f5 82       	std	Z+5, r15	; 0x05
    2a30:	c8 14       	cp	r12, r8
    2a32:	d9 04       	cpc	r13, r9
    2a34:	ea 04       	cpc	r14, r10
    2a36:	fb 04       	cpc	r15, r11
    2a38:	68 f4       	brcc	.+26     	; 0x2a54 <prvAddCurrentTaskToDelayedList+0x98>
    2a3a:	60 91 d9 18 	lds	r22, 0x18D9	; 0x8018d9 <pxCurrentTCB>
    2a3e:	70 91 da 18 	lds	r23, 0x18DA	; 0x8018da <pxCurrentTCB+0x1>
    2a42:	80 91 7d 18 	lds	r24, 0x187D	; 0x80187d <pxOverflowDelayedTaskList>
    2a46:	90 91 7e 18 	lds	r25, 0x187E	; 0x80187e <pxOverflowDelayedTaskList+0x1>
    2a4a:	6e 5f       	subi	r22, 0xFE	; 254
    2a4c:	7f 4f       	sbci	r23, 0xFF	; 255
    2a4e:	0e 94 41 0c 	call	0x1882	; 0x1882 <vListInsert>
    2a52:	21 c0       	rjmp	.+66     	; 0x2a96 <prvAddCurrentTaskToDelayedList+0xda>
    2a54:	60 91 d9 18 	lds	r22, 0x18D9	; 0x8018d9 <pxCurrentTCB>
    2a58:	70 91 da 18 	lds	r23, 0x18DA	; 0x8018da <pxCurrentTCB+0x1>
    2a5c:	80 91 7f 18 	lds	r24, 0x187F	; 0x80187f <pxDelayedTaskList>
    2a60:	90 91 80 18 	lds	r25, 0x1880	; 0x801880 <pxDelayedTaskList+0x1>
    2a64:	6e 5f       	subi	r22, 0xFE	; 254
    2a66:	7f 4f       	sbci	r23, 0xFF	; 255
    2a68:	0e 94 41 0c 	call	0x1882	; 0x1882 <vListInsert>
    2a6c:	80 91 4c 18 	lds	r24, 0x184C	; 0x80184c <xNextTaskUnblockTime>
    2a70:	90 91 4d 18 	lds	r25, 0x184D	; 0x80184d <xNextTaskUnblockTime+0x1>
    2a74:	a0 91 4e 18 	lds	r26, 0x184E	; 0x80184e <xNextTaskUnblockTime+0x2>
    2a78:	b0 91 4f 18 	lds	r27, 0x184F	; 0x80184f <xNextTaskUnblockTime+0x3>
    2a7c:	c8 16       	cp	r12, r24
    2a7e:	d9 06       	cpc	r13, r25
    2a80:	ea 06       	cpc	r14, r26
    2a82:	fb 06       	cpc	r15, r27
    2a84:	40 f4       	brcc	.+16     	; 0x2a96 <prvAddCurrentTaskToDelayedList+0xda>
    2a86:	c0 92 4c 18 	sts	0x184C, r12	; 0x80184c <xNextTaskUnblockTime>
    2a8a:	d0 92 4d 18 	sts	0x184D, r13	; 0x80184d <xNextTaskUnblockTime+0x1>
    2a8e:	e0 92 4e 18 	sts	0x184E, r14	; 0x80184e <xNextTaskUnblockTime+0x2>
    2a92:	f0 92 4f 18 	sts	0x184F, r15	; 0x80184f <xNextTaskUnblockTime+0x3>
    2a96:	cf 91       	pop	r28
    2a98:	ff 90       	pop	r15
    2a9a:	ef 90       	pop	r14
    2a9c:	df 90       	pop	r13
    2a9e:	cf 90       	pop	r12
    2aa0:	bf 90       	pop	r11
    2aa2:	af 90       	pop	r10
    2aa4:	9f 90       	pop	r9
    2aa6:	8f 90       	pop	r8
    2aa8:	08 95       	ret

00002aaa <xTaskCreate>:
    2aaa:	4f 92       	push	r4
    2aac:	5f 92       	push	r5
    2aae:	6f 92       	push	r6
    2ab0:	7f 92       	push	r7
    2ab2:	8f 92       	push	r8
    2ab4:	9f 92       	push	r9
    2ab6:	af 92       	push	r10
    2ab8:	bf 92       	push	r11
    2aba:	cf 92       	push	r12
    2abc:	df 92       	push	r13
    2abe:	ef 92       	push	r14
    2ac0:	ff 92       	push	r15
    2ac2:	0f 93       	push	r16
    2ac4:	1f 93       	push	r17
    2ac6:	cf 93       	push	r28
    2ac8:	df 93       	push	r29
    2aca:	4c 01       	movw	r8, r24
    2acc:	6b 01       	movw	r12, r22
    2ace:	5a 01       	movw	r10, r20
    2ad0:	29 01       	movw	r4, r18
    2ad2:	ca 01       	movw	r24, r20
    2ad4:	0e 94 21 0b 	call	0x1642	; 0x1642 <pvPortMalloc>
    2ad8:	3c 01       	movw	r6, r24
    2ada:	89 2b       	or	r24, r25
    2adc:	09 f4       	brne	.+2      	; 0x2ae0 <xTaskCreate+0x36>
    2ade:	f4 c0       	rjmp	.+488    	; 0x2cc8 <xTaskCreate+0x21e>
    2ae0:	80 e3       	ldi	r24, 0x30	; 48
    2ae2:	90 e0       	ldi	r25, 0x00	; 0
    2ae4:	0e 94 21 0b 	call	0x1642	; 0x1642 <pvPortMalloc>
    2ae8:	ec 01       	movw	r28, r24
    2aea:	89 2b       	or	r24, r25
    2aec:	99 f0       	breq	.+38     	; 0x2b14 <xTaskCreate+0x6a>
    2aee:	7c 8e       	std	Y+28, r7	; 0x1c
    2af0:	6b 8e       	std	Y+27, r6	; 0x1b
    2af2:	a5 01       	movw	r20, r10
    2af4:	65 ea       	ldi	r22, 0xA5	; 165
    2af6:	70 e0       	ldi	r23, 0x00	; 0
    2af8:	c3 01       	movw	r24, r6
    2afa:	0e 94 1a 31 	call	0x6234	; 0x6234 <memset>
    2afe:	21 e0       	ldi	r18, 0x01	; 1
    2b00:	a2 1a       	sub	r10, r18
    2b02:	b1 08       	sbc	r11, r1
    2b04:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b06:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b08:	a8 0e       	add	r10, r24
    2b0a:	b9 1e       	adc	r11, r25
    2b0c:	c1 14       	cp	r12, r1
    2b0e:	d1 04       	cpc	r13, r1
    2b10:	29 f4       	brne	.+10     	; 0x2b1c <xTaskCreate+0x72>
    2b12:	20 c0       	rjmp	.+64     	; 0x2b54 <xTaskCreate+0xaa>
    2b14:	c3 01       	movw	r24, r6
    2b16:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <vPortFree>
    2b1a:	d6 c0       	rjmp	.+428    	; 0x2cc8 <xTaskCreate+0x21e>
    2b1c:	d6 01       	movw	r26, r12
    2b1e:	8c 91       	ld	r24, X
    2b20:	8d 8f       	std	Y+29, r24	; 0x1d
    2b22:	8c 91       	ld	r24, X
    2b24:	88 23       	and	r24, r24
    2b26:	a1 f0       	breq	.+40     	; 0x2b50 <xTaskCreate+0xa6>
    2b28:	ae 01       	movw	r20, r28
    2b2a:	42 5e       	subi	r20, 0xE2	; 226
    2b2c:	5f 4f       	sbci	r21, 0xFF	; 255
    2b2e:	f6 01       	movw	r30, r12
    2b30:	31 96       	adiw	r30, 0x01	; 1
    2b32:	b8 e0       	ldi	r27, 0x08	; 8
    2b34:	cb 0e       	add	r12, r27
    2b36:	d1 1c       	adc	r13, r1
    2b38:	cf 01       	movw	r24, r30
    2b3a:	21 91       	ld	r18, Z+
    2b3c:	da 01       	movw	r26, r20
    2b3e:	2d 93       	st	X+, r18
    2b40:	ad 01       	movw	r20, r26
    2b42:	dc 01       	movw	r26, r24
    2b44:	8c 91       	ld	r24, X
    2b46:	88 23       	and	r24, r24
    2b48:	19 f0       	breq	.+6      	; 0x2b50 <xTaskCreate+0xa6>
    2b4a:	ce 16       	cp	r12, r30
    2b4c:	df 06       	cpc	r13, r31
    2b4e:	a1 f7       	brne	.-24     	; 0x2b38 <xTaskCreate+0x8e>
    2b50:	1c a2       	std	Y+36, r1	; 0x24
    2b52:	01 c0       	rjmp	.+2      	; 0x2b56 <xTaskCreate+0xac>
    2b54:	1d 8e       	std	Y+29, r1	; 0x1d
    2b56:	06 30       	cpi	r16, 0x06	; 6
    2b58:	08 f0       	brcs	.+2      	; 0x2b5c <xTaskCreate+0xb2>
    2b5a:	05 e0       	ldi	r16, 0x05	; 5
    2b5c:	0a 8f       	std	Y+26, r16	; 0x1a
    2b5e:	0f a3       	std	Y+39, r16	; 0x27
    2b60:	18 a6       	std	Y+40, r1	; 0x28
    2b62:	6e 01       	movw	r12, r28
    2b64:	b2 e0       	ldi	r27, 0x02	; 2
    2b66:	cb 0e       	add	r12, r27
    2b68:	d1 1c       	adc	r13, r1
    2b6a:	c6 01       	movw	r24, r12
    2b6c:	0e 94 1c 0c 	call	0x1838	; 0x1838 <vListInitialiseItem>
    2b70:	ce 01       	movw	r24, r28
    2b72:	0e 96       	adiw	r24, 0x0e	; 14
    2b74:	0e 94 1c 0c 	call	0x1838	; 0x1838 <vListInitialiseItem>
    2b78:	db 87       	std	Y+11, r29	; 0x0b
    2b7a:	ca 87       	std	Y+10, r28	; 0x0a
    2b7c:	86 e0       	ldi	r24, 0x06	; 6
    2b7e:	90 e0       	ldi	r25, 0x00	; 0
    2b80:	a0 e0       	ldi	r26, 0x00	; 0
    2b82:	b0 e0       	ldi	r27, 0x00	; 0
    2b84:	80 1b       	sub	r24, r16
    2b86:	91 09       	sbc	r25, r1
    2b88:	a1 09       	sbc	r26, r1
    2b8a:	b1 09       	sbc	r27, r1
    2b8c:	8e 87       	std	Y+14, r24	; 0x0e
    2b8e:	9f 87       	std	Y+15, r25	; 0x0f
    2b90:	a8 8b       	std	Y+16, r26	; 0x10
    2b92:	b9 8b       	std	Y+17, r27	; 0x11
    2b94:	df 8b       	std	Y+23, r29	; 0x17
    2b96:	ce 8b       	std	Y+22, r28	; 0x16
    2b98:	1a a6       	std	Y+42, r1	; 0x2a
    2b9a:	19 a6       	std	Y+41, r1	; 0x29
    2b9c:	1b a6       	std	Y+43, r1	; 0x2b
    2b9e:	1c a6       	std	Y+44, r1	; 0x2c
    2ba0:	1d a6       	std	Y+45, r1	; 0x2d
    2ba2:	1e a6       	std	Y+46, r1	; 0x2e
    2ba4:	1f a6       	std	Y+47, r1	; 0x2f
    2ba6:	a2 01       	movw	r20, r4
    2ba8:	b4 01       	movw	r22, r8
    2baa:	c5 01       	movw	r24, r10
    2bac:	0e 94 a5 0c 	call	0x194a	; 0x194a <pxPortInitialiseStack>
    2bb0:	99 83       	std	Y+1, r25	; 0x01
    2bb2:	88 83       	st	Y, r24
    2bb4:	e1 14       	cp	r14, r1
    2bb6:	f1 04       	cpc	r15, r1
    2bb8:	19 f0       	breq	.+6      	; 0x2bc0 <xTaskCreate+0x116>
    2bba:	f7 01       	movw	r30, r14
    2bbc:	d1 83       	std	Z+1, r29	; 0x01
    2bbe:	c0 83       	st	Z, r28
    2bc0:	0f b6       	in	r0, 0x3f	; 63
    2bc2:	f8 94       	cli
    2bc4:	0f 92       	push	r0
    2bc6:	80 91 5a 18 	lds	r24, 0x185A	; 0x80185a <uxCurrentNumberOfTasks>
    2bca:	8f 5f       	subi	r24, 0xFF	; 255
    2bcc:	80 93 5a 18 	sts	0x185A, r24	; 0x80185a <uxCurrentNumberOfTasks>
    2bd0:	80 91 d9 18 	lds	r24, 0x18D9	; 0x8018d9 <pxCurrentTCB>
    2bd4:	90 91 da 18 	lds	r25, 0x18DA	; 0x8018da <pxCurrentTCB+0x1>
    2bd8:	89 2b       	or	r24, r25
    2bda:	d1 f5       	brne	.+116    	; 0x2c50 <xTaskCreate+0x1a6>
    2bdc:	d0 93 da 18 	sts	0x18DA, r29	; 0x8018da <pxCurrentTCB+0x1>
    2be0:	c0 93 d9 18 	sts	0x18D9, r28	; 0x8018d9 <pxCurrentTCB>
    2be4:	80 91 5a 18 	lds	r24, 0x185A	; 0x80185a <uxCurrentNumberOfTasks>
    2be8:	81 30       	cpi	r24, 0x01	; 1
    2bea:	09 f0       	breq	.+2      	; 0x2bee <xTaskCreate+0x144>
    2bec:	41 c0       	rjmp	.+130    	; 0x2c70 <xTaskCreate+0x1c6>
    2bee:	07 e9       	ldi	r16, 0x97	; 151
    2bf0:	18 e1       	ldi	r17, 0x18	; 24
    2bf2:	0f 2e       	mov	r0, r31
    2bf4:	f9 ed       	ldi	r31, 0xD9	; 217
    2bf6:	ef 2e       	mov	r14, r31
    2bf8:	f8 e1       	ldi	r31, 0x18	; 24
    2bfa:	ff 2e       	mov	r15, r31
    2bfc:	f0 2d       	mov	r31, r0
    2bfe:	c8 01       	movw	r24, r16
    2c00:	0e 94 0b 0c 	call	0x1816	; 0x1816 <vListInitialise>
    2c04:	05 5f       	subi	r16, 0xF5	; 245
    2c06:	1f 4f       	sbci	r17, 0xFF	; 255
    2c08:	0e 15       	cp	r16, r14
    2c0a:	1f 05       	cpc	r17, r15
    2c0c:	c1 f7       	brne	.-16     	; 0x2bfe <xTaskCreate+0x154>
    2c0e:	8c e8       	ldi	r24, 0x8C	; 140
    2c10:	98 e1       	ldi	r25, 0x18	; 24
    2c12:	0e 94 0b 0c 	call	0x1816	; 0x1816 <vListInitialise>
    2c16:	81 e8       	ldi	r24, 0x81	; 129
    2c18:	98 e1       	ldi	r25, 0x18	; 24
    2c1a:	0e 94 0b 0c 	call	0x1816	; 0x1816 <vListInitialise>
    2c1e:	82 e7       	ldi	r24, 0x72	; 114
    2c20:	98 e1       	ldi	r25, 0x18	; 24
    2c22:	0e 94 0b 0c 	call	0x1816	; 0x1816 <vListInitialise>
    2c26:	87 e6       	ldi	r24, 0x67	; 103
    2c28:	98 e1       	ldi	r25, 0x18	; 24
    2c2a:	0e 94 0b 0c 	call	0x1816	; 0x1816 <vListInitialise>
    2c2e:	8b e5       	ldi	r24, 0x5B	; 91
    2c30:	98 e1       	ldi	r25, 0x18	; 24
    2c32:	0e 94 0b 0c 	call	0x1816	; 0x1816 <vListInitialise>
    2c36:	8c e8       	ldi	r24, 0x8C	; 140
    2c38:	98 e1       	ldi	r25, 0x18	; 24
    2c3a:	90 93 80 18 	sts	0x1880, r25	; 0x801880 <pxDelayedTaskList+0x1>
    2c3e:	80 93 7f 18 	sts	0x187F, r24	; 0x80187f <pxDelayedTaskList>
    2c42:	81 e8       	ldi	r24, 0x81	; 129
    2c44:	98 e1       	ldi	r25, 0x18	; 24
    2c46:	90 93 7e 18 	sts	0x187E, r25	; 0x80187e <pxOverflowDelayedTaskList+0x1>
    2c4a:	80 93 7d 18 	sts	0x187D, r24	; 0x80187d <pxOverflowDelayedTaskList>
    2c4e:	10 c0       	rjmp	.+32     	; 0x2c70 <xTaskCreate+0x1c6>
    2c50:	80 91 54 18 	lds	r24, 0x1854	; 0x801854 <xSchedulerRunning>
    2c54:	81 11       	cpse	r24, r1
    2c56:	0c c0       	rjmp	.+24     	; 0x2c70 <xTaskCreate+0x1c6>
    2c58:	e0 91 d9 18 	lds	r30, 0x18D9	; 0x8018d9 <pxCurrentTCB>
    2c5c:	f0 91 da 18 	lds	r31, 0x18DA	; 0x8018da <pxCurrentTCB+0x1>
    2c60:	92 8d       	ldd	r25, Z+26	; 0x1a
    2c62:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2c64:	89 17       	cp	r24, r25
    2c66:	20 f0       	brcs	.+8      	; 0x2c70 <xTaskCreate+0x1c6>
    2c68:	d0 93 da 18 	sts	0x18DA, r29	; 0x8018da <pxCurrentTCB+0x1>
    2c6c:	c0 93 d9 18 	sts	0x18D9, r28	; 0x8018d9 <pxCurrentTCB>
    2c70:	80 91 50 18 	lds	r24, 0x1850	; 0x801850 <uxTaskNumber>
    2c74:	8f 5f       	subi	r24, 0xFF	; 255
    2c76:	80 93 50 18 	sts	0x1850, r24	; 0x801850 <uxTaskNumber>
    2c7a:	8d a3       	std	Y+37, r24	; 0x25
    2c7c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2c7e:	90 91 55 18 	lds	r25, 0x1855	; 0x801855 <uxTopReadyPriority>
    2c82:	98 17       	cp	r25, r24
    2c84:	10 f4       	brcc	.+4      	; 0x2c8a <xTaskCreate+0x1e0>
    2c86:	80 93 55 18 	sts	0x1855, r24	; 0x801855 <uxTopReadyPriority>
    2c8a:	fb e0       	ldi	r31, 0x0B	; 11
    2c8c:	8f 9f       	mul	r24, r31
    2c8e:	c0 01       	movw	r24, r0
    2c90:	11 24       	eor	r1, r1
    2c92:	b6 01       	movw	r22, r12
    2c94:	89 56       	subi	r24, 0x69	; 105
    2c96:	97 4e       	sbci	r25, 0xE7	; 231
    2c98:	0e 94 20 0c 	call	0x1840	; 0x1840 <vListInsertEnd>
    2c9c:	0f 90       	pop	r0
    2c9e:	0f be       	out	0x3f, r0	; 63
    2ca0:	80 91 54 18 	lds	r24, 0x1854	; 0x801854 <xSchedulerRunning>
    2ca4:	88 23       	and	r24, r24
    2ca6:	61 f0       	breq	.+24     	; 0x2cc0 <xTaskCreate+0x216>
    2ca8:	e0 91 d9 18 	lds	r30, 0x18D9	; 0x8018d9 <pxCurrentTCB>
    2cac:	f0 91 da 18 	lds	r31, 0x18DA	; 0x8018da <pxCurrentTCB+0x1>
    2cb0:	92 8d       	ldd	r25, Z+26	; 0x1a
    2cb2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2cb4:	98 17       	cp	r25, r24
    2cb6:	30 f4       	brcc	.+12     	; 0x2cc4 <xTaskCreate+0x21a>
    2cb8:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <vPortYield>
    2cbc:	81 e0       	ldi	r24, 0x01	; 1
    2cbe:	05 c0       	rjmp	.+10     	; 0x2cca <xTaskCreate+0x220>
    2cc0:	81 e0       	ldi	r24, 0x01	; 1
    2cc2:	03 c0       	rjmp	.+6      	; 0x2cca <xTaskCreate+0x220>
    2cc4:	81 e0       	ldi	r24, 0x01	; 1
    2cc6:	01 c0       	rjmp	.+2      	; 0x2cca <xTaskCreate+0x220>
    2cc8:	8f ef       	ldi	r24, 0xFF	; 255
    2cca:	df 91       	pop	r29
    2ccc:	cf 91       	pop	r28
    2cce:	1f 91       	pop	r17
    2cd0:	0f 91       	pop	r16
    2cd2:	ff 90       	pop	r15
    2cd4:	ef 90       	pop	r14
    2cd6:	df 90       	pop	r13
    2cd8:	cf 90       	pop	r12
    2cda:	bf 90       	pop	r11
    2cdc:	af 90       	pop	r10
    2cde:	9f 90       	pop	r9
    2ce0:	8f 90       	pop	r8
    2ce2:	7f 90       	pop	r7
    2ce4:	6f 90       	pop	r6
    2ce6:	5f 90       	pop	r5
    2ce8:	4f 90       	pop	r4
    2cea:	08 95       	ret

00002cec <vTaskStartScheduler>:
    2cec:	ef 92       	push	r14
    2cee:	ff 92       	push	r15
    2cf0:	0f 93       	push	r16
    2cf2:	0f 2e       	mov	r0, r31
    2cf4:	fa e4       	ldi	r31, 0x4A	; 74
    2cf6:	ef 2e       	mov	r14, r31
    2cf8:	f8 e1       	ldi	r31, 0x18	; 24
    2cfa:	ff 2e       	mov	r15, r31
    2cfc:	f0 2d       	mov	r31, r0
    2cfe:	00 e0       	ldi	r16, 0x00	; 0
    2d00:	20 e0       	ldi	r18, 0x00	; 0
    2d02:	30 e0       	ldi	r19, 0x00	; 0
    2d04:	40 ec       	ldi	r20, 0xC0	; 192
    2d06:	50 e0       	ldi	r21, 0x00	; 0
    2d08:	6c ec       	ldi	r22, 0xCC	; 204
    2d0a:	74 e0       	ldi	r23, 0x04	; 4
    2d0c:	8d ec       	ldi	r24, 0xCD	; 205
    2d0e:	90 e0       	ldi	r25, 0x00	; 0
    2d10:	cc de       	rcall	.-616    	; 0x2aaa <xTaskCreate>
    2d12:	81 30       	cpi	r24, 0x01	; 1
    2d14:	19 f5       	brne	.+70     	; 0x2d5c <vTaskStartScheduler+0x70>
    2d16:	ce d6       	rcall	.+3484   	; 0x3ab4 <xTimerCreateTimerTask>
    2d18:	81 30       	cpi	r24, 0x01	; 1
    2d1a:	01 f5       	brne	.+64     	; 0x2d5c <vTaskStartScheduler+0x70>
    2d1c:	f8 94       	cli
    2d1e:	8f ef       	ldi	r24, 0xFF	; 255
    2d20:	9f ef       	ldi	r25, 0xFF	; 255
    2d22:	dc 01       	movw	r26, r24
    2d24:	80 93 4c 18 	sts	0x184C, r24	; 0x80184c <xNextTaskUnblockTime>
    2d28:	90 93 4d 18 	sts	0x184D, r25	; 0x80184d <xNextTaskUnblockTime+0x1>
    2d2c:	a0 93 4e 18 	sts	0x184E, r26	; 0x80184e <xNextTaskUnblockTime+0x2>
    2d30:	b0 93 4f 18 	sts	0x184F, r27	; 0x80184f <xNextTaskUnblockTime+0x3>
    2d34:	81 e0       	ldi	r24, 0x01	; 1
    2d36:	80 93 54 18 	sts	0x1854, r24	; 0x801854 <xSchedulerRunning>
    2d3a:	10 92 56 18 	sts	0x1856, r1	; 0x801856 <xTickCount>
    2d3e:	10 92 57 18 	sts	0x1857, r1	; 0x801857 <xTickCount+0x1>
    2d42:	10 92 58 18 	sts	0x1858, r1	; 0x801858 <xTickCount+0x2>
    2d46:	10 92 59 18 	sts	0x1859, r1	; 0x801859 <xTickCount+0x3>
    2d4a:	e0 91 d9 18 	lds	r30, 0x18D9	; 0x8018d9 <pxCurrentTCB>
    2d4e:	f0 91 da 18 	lds	r31, 0x18DA	; 0x8018da <pxCurrentTCB+0x1>
    2d52:	81 a5       	ldd	r24, Z+41	; 0x29
    2d54:	0e 94 58 09 	call	0x12b0	; 0x12b0 <task_switch_in>
    2d58:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <xPortStartScheduler>
    2d5c:	0f 91       	pop	r16
    2d5e:	ff 90       	pop	r15
    2d60:	ef 90       	pop	r14
    2d62:	08 95       	ret

00002d64 <vTaskSuspendAll>:
    2d64:	80 91 49 18 	lds	r24, 0x1849	; 0x801849 <uxSchedulerSuspended>
    2d68:	8f 5f       	subi	r24, 0xFF	; 255
    2d6a:	80 93 49 18 	sts	0x1849, r24	; 0x801849 <uxSchedulerSuspended>
    2d6e:	08 95       	ret

00002d70 <xTaskGetTickCount>:
    2d70:	0f b6       	in	r0, 0x3f	; 63
    2d72:	f8 94       	cli
    2d74:	0f 92       	push	r0
    2d76:	60 91 56 18 	lds	r22, 0x1856	; 0x801856 <xTickCount>
    2d7a:	70 91 57 18 	lds	r23, 0x1857	; 0x801857 <xTickCount+0x1>
    2d7e:	80 91 58 18 	lds	r24, 0x1858	; 0x801858 <xTickCount+0x2>
    2d82:	90 91 59 18 	lds	r25, 0x1859	; 0x801859 <xTickCount+0x3>
    2d86:	0f 90       	pop	r0
    2d88:	0f be       	out	0x3f, r0	; 63
    2d8a:	08 95       	ret

00002d8c <xTaskIncrementTick>:
    2d8c:	9f 92       	push	r9
    2d8e:	af 92       	push	r10
    2d90:	bf 92       	push	r11
    2d92:	cf 92       	push	r12
    2d94:	df 92       	push	r13
    2d96:	ef 92       	push	r14
    2d98:	ff 92       	push	r15
    2d9a:	0f 93       	push	r16
    2d9c:	1f 93       	push	r17
    2d9e:	cf 93       	push	r28
    2da0:	df 93       	push	r29
    2da2:	80 91 49 18 	lds	r24, 0x1849	; 0x801849 <uxSchedulerSuspended>
    2da6:	81 11       	cpse	r24, r1
    2da8:	ad c0       	rjmp	.+346    	; 0x2f04 <xTaskIncrementTick+0x178>
    2daa:	c0 90 56 18 	lds	r12, 0x1856	; 0x801856 <xTickCount>
    2dae:	d0 90 57 18 	lds	r13, 0x1857	; 0x801857 <xTickCount+0x1>
    2db2:	e0 90 58 18 	lds	r14, 0x1858	; 0x801858 <xTickCount+0x2>
    2db6:	f0 90 59 18 	lds	r15, 0x1859	; 0x801859 <xTickCount+0x3>
    2dba:	8f ef       	ldi	r24, 0xFF	; 255
    2dbc:	c8 1a       	sub	r12, r24
    2dbe:	d8 0a       	sbc	r13, r24
    2dc0:	e8 0a       	sbc	r14, r24
    2dc2:	f8 0a       	sbc	r15, r24
    2dc4:	c0 92 56 18 	sts	0x1856, r12	; 0x801856 <xTickCount>
    2dc8:	d0 92 57 18 	sts	0x1857, r13	; 0x801857 <xTickCount+0x1>
    2dcc:	e0 92 58 18 	sts	0x1858, r14	; 0x801858 <xTickCount+0x2>
    2dd0:	f0 92 59 18 	sts	0x1859, r15	; 0x801859 <xTickCount+0x3>
    2dd4:	c1 14       	cp	r12, r1
    2dd6:	d1 04       	cpc	r13, r1
    2dd8:	e1 04       	cpc	r14, r1
    2dda:	f1 04       	cpc	r15, r1
    2ddc:	b1 f4       	brne	.+44     	; 0x2e0a <xTaskIncrementTick+0x7e>
    2dde:	80 91 7f 18 	lds	r24, 0x187F	; 0x80187f <pxDelayedTaskList>
    2de2:	90 91 80 18 	lds	r25, 0x1880	; 0x801880 <pxDelayedTaskList+0x1>
    2de6:	20 91 7d 18 	lds	r18, 0x187D	; 0x80187d <pxOverflowDelayedTaskList>
    2dea:	30 91 7e 18 	lds	r19, 0x187E	; 0x80187e <pxOverflowDelayedTaskList+0x1>
    2dee:	30 93 80 18 	sts	0x1880, r19	; 0x801880 <pxDelayedTaskList+0x1>
    2df2:	20 93 7f 18 	sts	0x187F, r18	; 0x80187f <pxDelayedTaskList>
    2df6:	90 93 7e 18 	sts	0x187E, r25	; 0x80187e <pxOverflowDelayedTaskList+0x1>
    2dfa:	80 93 7d 18 	sts	0x187D, r24	; 0x80187d <pxOverflowDelayedTaskList>
    2dfe:	80 91 51 18 	lds	r24, 0x1851	; 0x801851 <xNumOfOverflows>
    2e02:	8f 5f       	subi	r24, 0xFF	; 255
    2e04:	80 93 51 18 	sts	0x1851, r24	; 0x801851 <xNumOfOverflows>
    2e08:	af dd       	rcall	.-1186   	; 0x2968 <prvResetNextTaskUnblockTime>
    2e0a:	80 91 4c 18 	lds	r24, 0x184C	; 0x80184c <xNextTaskUnblockTime>
    2e0e:	90 91 4d 18 	lds	r25, 0x184D	; 0x80184d <xNextTaskUnblockTime+0x1>
    2e12:	a0 91 4e 18 	lds	r26, 0x184E	; 0x80184e <xNextTaskUnblockTime+0x2>
    2e16:	b0 91 4f 18 	lds	r27, 0x184F	; 0x80184f <xNextTaskUnblockTime+0x3>
    2e1a:	c8 16       	cp	r12, r24
    2e1c:	d9 06       	cpc	r13, r25
    2e1e:	ea 06       	cpc	r14, r26
    2e20:	fb 06       	cpc	r15, r27
    2e22:	10 f4       	brcc	.+4      	; 0x2e28 <xTaskIncrementTick+0x9c>
    2e24:	b1 2c       	mov	r11, r1
    2e26:	5d c0       	rjmp	.+186    	; 0x2ee2 <xTaskIncrementTick+0x156>
    2e28:	b1 2c       	mov	r11, r1
    2e2a:	0f 2e       	mov	r0, r31
    2e2c:	fb e0       	ldi	r31, 0x0B	; 11
    2e2e:	af 2e       	mov	r10, r31
    2e30:	f0 2d       	mov	r31, r0
    2e32:	99 24       	eor	r9, r9
    2e34:	93 94       	inc	r9
    2e36:	e0 91 7f 18 	lds	r30, 0x187F	; 0x80187f <pxDelayedTaskList>
    2e3a:	f0 91 80 18 	lds	r31, 0x1880	; 0x801880 <pxDelayedTaskList+0x1>
    2e3e:	80 81       	ld	r24, Z
    2e40:	81 11       	cpse	r24, r1
    2e42:	0c c0       	rjmp	.+24     	; 0x2e5c <xTaskIncrementTick+0xd0>
    2e44:	8f ef       	ldi	r24, 0xFF	; 255
    2e46:	9f ef       	ldi	r25, 0xFF	; 255
    2e48:	dc 01       	movw	r26, r24
    2e4a:	80 93 4c 18 	sts	0x184C, r24	; 0x80184c <xNextTaskUnblockTime>
    2e4e:	90 93 4d 18 	sts	0x184D, r25	; 0x80184d <xNextTaskUnblockTime+0x1>
    2e52:	a0 93 4e 18 	sts	0x184E, r26	; 0x80184e <xNextTaskUnblockTime+0x2>
    2e56:	b0 93 4f 18 	sts	0x184F, r27	; 0x80184f <xNextTaskUnblockTime+0x3>
    2e5a:	43 c0       	rjmp	.+134    	; 0x2ee2 <xTaskIncrementTick+0x156>
    2e5c:	e0 91 7f 18 	lds	r30, 0x187F	; 0x80187f <pxDelayedTaskList>
    2e60:	f0 91 80 18 	lds	r31, 0x1880	; 0x801880 <pxDelayedTaskList+0x1>
    2e64:	07 80       	ldd	r0, Z+7	; 0x07
    2e66:	f0 85       	ldd	r31, Z+8	; 0x08
    2e68:	e0 2d       	mov	r30, r0
    2e6a:	c0 85       	ldd	r28, Z+8	; 0x08
    2e6c:	d1 85       	ldd	r29, Z+9	; 0x09
    2e6e:	8a 81       	ldd	r24, Y+2	; 0x02
    2e70:	9b 81       	ldd	r25, Y+3	; 0x03
    2e72:	ac 81       	ldd	r26, Y+4	; 0x04
    2e74:	bd 81       	ldd	r27, Y+5	; 0x05
    2e76:	c8 16       	cp	r12, r24
    2e78:	d9 06       	cpc	r13, r25
    2e7a:	ea 06       	cpc	r14, r26
    2e7c:	fb 06       	cpc	r15, r27
    2e7e:	48 f4       	brcc	.+18     	; 0x2e92 <xTaskIncrementTick+0x106>
    2e80:	80 93 4c 18 	sts	0x184C, r24	; 0x80184c <xNextTaskUnblockTime>
    2e84:	90 93 4d 18 	sts	0x184D, r25	; 0x80184d <xNextTaskUnblockTime+0x1>
    2e88:	a0 93 4e 18 	sts	0x184E, r26	; 0x80184e <xNextTaskUnblockTime+0x2>
    2e8c:	b0 93 4f 18 	sts	0x184F, r27	; 0x80184f <xNextTaskUnblockTime+0x3>
    2e90:	28 c0       	rjmp	.+80     	; 0x2ee2 <xTaskIncrementTick+0x156>
    2e92:	8e 01       	movw	r16, r28
    2e94:	0e 5f       	subi	r16, 0xFE	; 254
    2e96:	1f 4f       	sbci	r17, 0xFF	; 255
    2e98:	c8 01       	movw	r24, r16
    2e9a:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <uxListRemove>
    2e9e:	88 8d       	ldd	r24, Y+24	; 0x18
    2ea0:	99 8d       	ldd	r25, Y+25	; 0x19
    2ea2:	89 2b       	or	r24, r25
    2ea4:	21 f0       	breq	.+8      	; 0x2eae <xTaskIncrementTick+0x122>
    2ea6:	ce 01       	movw	r24, r28
    2ea8:	0e 96       	adiw	r24, 0x0e	; 14
    2eaa:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <uxListRemove>
    2eae:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2eb0:	90 91 55 18 	lds	r25, 0x1855	; 0x801855 <uxTopReadyPriority>
    2eb4:	98 17       	cp	r25, r24
    2eb6:	10 f4       	brcc	.+4      	; 0x2ebc <xTaskIncrementTick+0x130>
    2eb8:	80 93 55 18 	sts	0x1855, r24	; 0x801855 <uxTopReadyPriority>
    2ebc:	a8 9e       	mul	r10, r24
    2ebe:	c0 01       	movw	r24, r0
    2ec0:	11 24       	eor	r1, r1
    2ec2:	b8 01       	movw	r22, r16
    2ec4:	89 56       	subi	r24, 0x69	; 105
    2ec6:	97 4e       	sbci	r25, 0xE7	; 231
    2ec8:	0e 94 20 0c 	call	0x1840	; 0x1840 <vListInsertEnd>
    2ecc:	e0 91 d9 18 	lds	r30, 0x18D9	; 0x8018d9 <pxCurrentTCB>
    2ed0:	f0 91 da 18 	lds	r31, 0x18DA	; 0x8018da <pxCurrentTCB+0x1>
    2ed4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2ed6:	82 8d       	ldd	r24, Z+26	; 0x1a
    2ed8:	98 17       	cp	r25, r24
    2eda:	08 f4       	brcc	.+2      	; 0x2ede <xTaskIncrementTick+0x152>
    2edc:	ac cf       	rjmp	.-168    	; 0x2e36 <xTaskIncrementTick+0xaa>
    2ede:	b9 2c       	mov	r11, r9
    2ee0:	aa cf       	rjmp	.-172    	; 0x2e36 <xTaskIncrementTick+0xaa>
    2ee2:	e0 91 d9 18 	lds	r30, 0x18D9	; 0x8018d9 <pxCurrentTCB>
    2ee6:	f0 91 da 18 	lds	r31, 0x18DA	; 0x8018da <pxCurrentTCB+0x1>
    2eea:	e2 8d       	ldd	r30, Z+26	; 0x1a
    2eec:	8b e0       	ldi	r24, 0x0B	; 11
    2eee:	e8 9f       	mul	r30, r24
    2ef0:	f0 01       	movw	r30, r0
    2ef2:	11 24       	eor	r1, r1
    2ef4:	e9 56       	subi	r30, 0x69	; 105
    2ef6:	f7 4e       	sbci	r31, 0xE7	; 231
    2ef8:	80 81       	ld	r24, Z
    2efa:	82 30       	cpi	r24, 0x02	; 2
    2efc:	48 f0       	brcs	.+18     	; 0x2f10 <xTaskIncrementTick+0x184>
    2efe:	bb 24       	eor	r11, r11
    2f00:	b3 94       	inc	r11
    2f02:	06 c0       	rjmp	.+12     	; 0x2f10 <xTaskIncrementTick+0x184>
    2f04:	80 91 53 18 	lds	r24, 0x1853	; 0x801853 <uxPendedTicks>
    2f08:	8f 5f       	subi	r24, 0xFF	; 255
    2f0a:	80 93 53 18 	sts	0x1853, r24	; 0x801853 <uxPendedTicks>
    2f0e:	b1 2c       	mov	r11, r1
    2f10:	80 91 52 18 	lds	r24, 0x1852	; 0x801852 <xYieldPending>
    2f14:	88 23       	and	r24, r24
    2f16:	11 f0       	breq	.+4      	; 0x2f1c <xTaskIncrementTick+0x190>
    2f18:	bb 24       	eor	r11, r11
    2f1a:	b3 94       	inc	r11
    2f1c:	8b 2d       	mov	r24, r11
    2f1e:	df 91       	pop	r29
    2f20:	cf 91       	pop	r28
    2f22:	1f 91       	pop	r17
    2f24:	0f 91       	pop	r16
    2f26:	ff 90       	pop	r15
    2f28:	ef 90       	pop	r14
    2f2a:	df 90       	pop	r13
    2f2c:	cf 90       	pop	r12
    2f2e:	bf 90       	pop	r11
    2f30:	af 90       	pop	r10
    2f32:	9f 90       	pop	r9
    2f34:	08 95       	ret

00002f36 <xTaskResumeAll>:
    2f36:	cf 92       	push	r12
    2f38:	df 92       	push	r13
    2f3a:	ef 92       	push	r14
    2f3c:	ff 92       	push	r15
    2f3e:	0f 93       	push	r16
    2f40:	1f 93       	push	r17
    2f42:	cf 93       	push	r28
    2f44:	df 93       	push	r29
    2f46:	0f b6       	in	r0, 0x3f	; 63
    2f48:	f8 94       	cli
    2f4a:	0f 92       	push	r0
    2f4c:	80 91 49 18 	lds	r24, 0x1849	; 0x801849 <uxSchedulerSuspended>
    2f50:	81 50       	subi	r24, 0x01	; 1
    2f52:	80 93 49 18 	sts	0x1849, r24	; 0x801849 <uxSchedulerSuspended>
    2f56:	80 91 49 18 	lds	r24, 0x1849	; 0x801849 <uxSchedulerSuspended>
    2f5a:	81 11       	cpse	r24, r1
    2f5c:	5a c0       	rjmp	.+180    	; 0x3012 <xTaskResumeAll+0xdc>
    2f5e:	80 91 5a 18 	lds	r24, 0x185A	; 0x80185a <uxCurrentNumberOfTasks>
    2f62:	81 11       	cpse	r24, r1
    2f64:	2c c0       	rjmp	.+88     	; 0x2fbe <xTaskResumeAll+0x88>
    2f66:	58 c0       	rjmp	.+176    	; 0x3018 <xTaskResumeAll+0xe2>
    2f68:	d7 01       	movw	r26, r14
    2f6a:	17 96       	adiw	r26, 0x07	; 7
    2f6c:	ed 91       	ld	r30, X+
    2f6e:	fc 91       	ld	r31, X
    2f70:	18 97       	sbiw	r26, 0x08	; 8
    2f72:	c0 85       	ldd	r28, Z+8	; 0x08
    2f74:	d1 85       	ldd	r29, Z+9	; 0x09
    2f76:	ce 01       	movw	r24, r28
    2f78:	0e 96       	adiw	r24, 0x0e	; 14
    2f7a:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <uxListRemove>
    2f7e:	8e 01       	movw	r16, r28
    2f80:	0e 5f       	subi	r16, 0xFE	; 254
    2f82:	1f 4f       	sbci	r17, 0xFF	; 255
    2f84:	c8 01       	movw	r24, r16
    2f86:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <uxListRemove>
    2f8a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2f8c:	90 91 55 18 	lds	r25, 0x1855	; 0x801855 <uxTopReadyPriority>
    2f90:	98 17       	cp	r25, r24
    2f92:	10 f4       	brcc	.+4      	; 0x2f98 <xTaskResumeAll+0x62>
    2f94:	80 93 55 18 	sts	0x1855, r24	; 0x801855 <uxTopReadyPriority>
    2f98:	d8 9e       	mul	r13, r24
    2f9a:	c0 01       	movw	r24, r0
    2f9c:	11 24       	eor	r1, r1
    2f9e:	b8 01       	movw	r22, r16
    2fa0:	89 56       	subi	r24, 0x69	; 105
    2fa2:	97 4e       	sbci	r25, 0xE7	; 231
    2fa4:	0e 94 20 0c 	call	0x1840	; 0x1840 <vListInsertEnd>
    2fa8:	e0 91 d9 18 	lds	r30, 0x18D9	; 0x8018d9 <pxCurrentTCB>
    2fac:	f0 91 da 18 	lds	r31, 0x18DA	; 0x8018da <pxCurrentTCB+0x1>
    2fb0:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2fb2:	82 8d       	ldd	r24, Z+26	; 0x1a
    2fb4:	98 17       	cp	r25, r24
    2fb6:	88 f0       	brcs	.+34     	; 0x2fda <xTaskResumeAll+0xa4>
    2fb8:	c0 92 52 18 	sts	0x1852, r12	; 0x801852 <xYieldPending>
    2fbc:	0e c0       	rjmp	.+28     	; 0x2fda <xTaskResumeAll+0xa4>
    2fbe:	c0 e0       	ldi	r28, 0x00	; 0
    2fc0:	d0 e0       	ldi	r29, 0x00	; 0
    2fc2:	0f 2e       	mov	r0, r31
    2fc4:	f2 e7       	ldi	r31, 0x72	; 114
    2fc6:	ef 2e       	mov	r14, r31
    2fc8:	f8 e1       	ldi	r31, 0x18	; 24
    2fca:	ff 2e       	mov	r15, r31
    2fcc:	f0 2d       	mov	r31, r0
    2fce:	0f 2e       	mov	r0, r31
    2fd0:	fb e0       	ldi	r31, 0x0B	; 11
    2fd2:	df 2e       	mov	r13, r31
    2fd4:	f0 2d       	mov	r31, r0
    2fd6:	cc 24       	eor	r12, r12
    2fd8:	c3 94       	inc	r12
    2fda:	f7 01       	movw	r30, r14
    2fdc:	80 81       	ld	r24, Z
    2fde:	81 11       	cpse	r24, r1
    2fe0:	c3 cf       	rjmp	.-122    	; 0x2f68 <xTaskResumeAll+0x32>
    2fe2:	cd 2b       	or	r28, r29
    2fe4:	09 f0       	breq	.+2      	; 0x2fe8 <xTaskResumeAll+0xb2>
    2fe6:	c0 dc       	rcall	.-1664   	; 0x2968 <prvResetNextTaskUnblockTime>
    2fe8:	c0 91 53 18 	lds	r28, 0x1853	; 0x801853 <uxPendedTicks>
    2fec:	cc 23       	and	r28, r28
    2fee:	49 f0       	breq	.+18     	; 0x3002 <xTaskResumeAll+0xcc>
    2ff0:	d1 e0       	ldi	r29, 0x01	; 1
    2ff2:	cc de       	rcall	.-616    	; 0x2d8c <xTaskIncrementTick>
    2ff4:	81 11       	cpse	r24, r1
    2ff6:	d0 93 52 18 	sts	0x1852, r29	; 0x801852 <xYieldPending>
    2ffa:	c1 50       	subi	r28, 0x01	; 1
    2ffc:	d1 f7       	brne	.-12     	; 0x2ff2 <xTaskResumeAll+0xbc>
    2ffe:	10 92 53 18 	sts	0x1853, r1	; 0x801853 <uxPendedTicks>
    3002:	80 91 52 18 	lds	r24, 0x1852	; 0x801852 <xYieldPending>
    3006:	88 23       	and	r24, r24
    3008:	31 f0       	breq	.+12     	; 0x3016 <xTaskResumeAll+0xe0>
    300a:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <vPortYield>
    300e:	81 e0       	ldi	r24, 0x01	; 1
    3010:	03 c0       	rjmp	.+6      	; 0x3018 <xTaskResumeAll+0xe2>
    3012:	80 e0       	ldi	r24, 0x00	; 0
    3014:	01 c0       	rjmp	.+2      	; 0x3018 <xTaskResumeAll+0xe2>
    3016:	80 e0       	ldi	r24, 0x00	; 0
    3018:	0f 90       	pop	r0
    301a:	0f be       	out	0x3f, r0	; 63
    301c:	df 91       	pop	r29
    301e:	cf 91       	pop	r28
    3020:	1f 91       	pop	r17
    3022:	0f 91       	pop	r16
    3024:	ff 90       	pop	r15
    3026:	ef 90       	pop	r14
    3028:	df 90       	pop	r13
    302a:	cf 90       	pop	r12
    302c:	08 95       	ret

0000302e <vTaskDelay>:
    302e:	cf 92       	push	r12
    3030:	df 92       	push	r13
    3032:	ef 92       	push	r14
    3034:	ff 92       	push	r15
    3036:	6b 01       	movw	r12, r22
    3038:	7c 01       	movw	r14, r24
    303a:	67 2b       	or	r22, r23
    303c:	68 2b       	or	r22, r24
    303e:	69 2b       	or	r22, r25
    3040:	41 f0       	breq	.+16     	; 0x3052 <vTaskDelay+0x24>
    3042:	90 de       	rcall	.-736    	; 0x2d64 <vTaskSuspendAll>
    3044:	40 e0       	ldi	r20, 0x00	; 0
    3046:	c7 01       	movw	r24, r14
    3048:	b6 01       	movw	r22, r12
    304a:	b8 dc       	rcall	.-1680   	; 0x29bc <prvAddCurrentTaskToDelayedList>
    304c:	74 df       	rcall	.-280    	; 0x2f36 <xTaskResumeAll>
    304e:	81 11       	cpse	r24, r1
    3050:	02 c0       	rjmp	.+4      	; 0x3056 <vTaskDelay+0x28>
    3052:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <vPortYield>
    3056:	ff 90       	pop	r15
    3058:	ef 90       	pop	r14
    305a:	df 90       	pop	r13
    305c:	cf 90       	pop	r12
    305e:	08 95       	ret

00003060 <vTaskSwitchContext>:
    3060:	80 91 49 18 	lds	r24, 0x1849	; 0x801849 <uxSchedulerSuspended>
    3064:	88 23       	and	r24, r24
    3066:	21 f0       	breq	.+8      	; 0x3070 <vTaskSwitchContext+0x10>
    3068:	81 e0       	ldi	r24, 0x01	; 1
    306a:	80 93 52 18 	sts	0x1852, r24	; 0x801852 <xYieldPending>
    306e:	08 95       	ret
    3070:	10 92 52 18 	sts	0x1852, r1	; 0x801852 <xYieldPending>
    3074:	e0 91 d9 18 	lds	r30, 0x18D9	; 0x8018d9 <pxCurrentTCB>
    3078:	f0 91 da 18 	lds	r31, 0x18DA	; 0x8018da <pxCurrentTCB+0x1>
    307c:	81 a5       	ldd	r24, Z+41	; 0x29
    307e:	0e 94 62 09 	call	0x12c4	; 0x12c4 <task_switch_out>
    3082:	a0 91 d9 18 	lds	r26, 0x18D9	; 0x8018d9 <pxCurrentTCB>
    3086:	b0 91 da 18 	lds	r27, 0x18DA	; 0x8018da <pxCurrentTCB+0x1>
    308a:	e0 91 d9 18 	lds	r30, 0x18D9	; 0x8018d9 <pxCurrentTCB>
    308e:	f0 91 da 18 	lds	r31, 0x18DA	; 0x8018da <pxCurrentTCB+0x1>
    3092:	2d 91       	ld	r18, X+
    3094:	3c 91       	ld	r19, X
    3096:	83 8d       	ldd	r24, Z+27	; 0x1b
    3098:	94 8d       	ldd	r25, Z+28	; 0x1c
    309a:	82 17       	cp	r24, r18
    309c:	93 07       	cpc	r25, r19
    309e:	58 f0       	brcs	.+22     	; 0x30b6 <vTaskSwitchContext+0x56>
    30a0:	60 91 d9 18 	lds	r22, 0x18D9	; 0x8018d9 <pxCurrentTCB>
    30a4:	70 91 da 18 	lds	r23, 0x18DA	; 0x8018da <pxCurrentTCB+0x1>
    30a8:	80 91 d9 18 	lds	r24, 0x18D9	; 0x8018d9 <pxCurrentTCB>
    30ac:	90 91 da 18 	lds	r25, 0x18DA	; 0x8018da <pxCurrentTCB+0x1>
    30b0:	63 5e       	subi	r22, 0xE3	; 227
    30b2:	7f 4f       	sbci	r23, 0xFF	; 255
    30b4:	22 d6       	rcall	.+3140   	; 0x3cfa <vApplicationStackOverflowHook>
    30b6:	80 91 55 18 	lds	r24, 0x1855	; 0x801855 <uxTopReadyPriority>
    30ba:	28 2f       	mov	r18, r24
    30bc:	30 e0       	ldi	r19, 0x00	; 0
    30be:	9b e0       	ldi	r25, 0x0B	; 11
    30c0:	89 9f       	mul	r24, r25
    30c2:	f0 01       	movw	r30, r0
    30c4:	11 24       	eor	r1, r1
    30c6:	e9 56       	subi	r30, 0x69	; 105
    30c8:	f7 4e       	sbci	r31, 0xE7	; 231
    30ca:	90 81       	ld	r25, Z
    30cc:	91 11       	cpse	r25, r1
    30ce:	0e c0       	rjmp	.+28     	; 0x30ec <vTaskSwitchContext+0x8c>
    30d0:	4b e0       	ldi	r20, 0x0B	; 11
    30d2:	81 50       	subi	r24, 0x01	; 1
    30d4:	28 2f       	mov	r18, r24
    30d6:	30 e0       	ldi	r19, 0x00	; 0
    30d8:	42 9f       	mul	r20, r18
    30da:	f0 01       	movw	r30, r0
    30dc:	43 9f       	mul	r20, r19
    30de:	f0 0d       	add	r31, r0
    30e0:	11 24       	eor	r1, r1
    30e2:	e9 56       	subi	r30, 0x69	; 105
    30e4:	f7 4e       	sbci	r31, 0xE7	; 231
    30e6:	90 81       	ld	r25, Z
    30e8:	99 23       	and	r25, r25
    30ea:	99 f3       	breq	.-26     	; 0x30d2 <vTaskSwitchContext+0x72>
    30ec:	9b e0       	ldi	r25, 0x0B	; 11
    30ee:	92 9f       	mul	r25, r18
    30f0:	a0 01       	movw	r20, r0
    30f2:	93 9f       	mul	r25, r19
    30f4:	50 0d       	add	r21, r0
    30f6:	11 24       	eor	r1, r1
    30f8:	da 01       	movw	r26, r20
    30fa:	a9 56       	subi	r26, 0x69	; 105
    30fc:	b7 4e       	sbci	r27, 0xE7	; 231
    30fe:	11 96       	adiw	r26, 0x01	; 1
    3100:	ed 91       	ld	r30, X+
    3102:	fc 91       	ld	r31, X
    3104:	12 97       	sbiw	r26, 0x02	; 2
    3106:	04 80       	ldd	r0, Z+4	; 0x04
    3108:	f5 81       	ldd	r31, Z+5	; 0x05
    310a:	e0 2d       	mov	r30, r0
    310c:	12 96       	adiw	r26, 0x02	; 2
    310e:	fc 93       	st	X, r31
    3110:	ee 93       	st	-X, r30
    3112:	11 97       	sbiw	r26, 0x01	; 1
    3114:	46 56       	subi	r20, 0x66	; 102
    3116:	57 4e       	sbci	r21, 0xE7	; 231
    3118:	e4 17       	cp	r30, r20
    311a:	f5 07       	cpc	r31, r21
    311c:	29 f4       	brne	.+10     	; 0x3128 <vTaskSwitchContext+0xc8>
    311e:	44 81       	ldd	r20, Z+4	; 0x04
    3120:	55 81       	ldd	r21, Z+5	; 0x05
    3122:	fd 01       	movw	r30, r26
    3124:	52 83       	std	Z+2, r21	; 0x02
    3126:	41 83       	std	Z+1, r20	; 0x01
    3128:	9b e0       	ldi	r25, 0x0B	; 11
    312a:	92 9f       	mul	r25, r18
    312c:	f0 01       	movw	r30, r0
    312e:	93 9f       	mul	r25, r19
    3130:	f0 0d       	add	r31, r0
    3132:	11 24       	eor	r1, r1
    3134:	e9 56       	subi	r30, 0x69	; 105
    3136:	f7 4e       	sbci	r31, 0xE7	; 231
    3138:	01 80       	ldd	r0, Z+1	; 0x01
    313a:	f2 81       	ldd	r31, Z+2	; 0x02
    313c:	e0 2d       	mov	r30, r0
    313e:	20 85       	ldd	r18, Z+8	; 0x08
    3140:	31 85       	ldd	r19, Z+9	; 0x09
    3142:	30 93 da 18 	sts	0x18DA, r19	; 0x8018da <pxCurrentTCB+0x1>
    3146:	20 93 d9 18 	sts	0x18D9, r18	; 0x8018d9 <pxCurrentTCB>
    314a:	80 93 55 18 	sts	0x1855, r24	; 0x801855 <uxTopReadyPriority>
    314e:	e0 91 d9 18 	lds	r30, 0x18D9	; 0x8018d9 <pxCurrentTCB>
    3152:	f0 91 da 18 	lds	r31, 0x18DA	; 0x8018da <pxCurrentTCB+0x1>
    3156:	81 a5       	ldd	r24, Z+41	; 0x29
    3158:	0c 94 58 09 	jmp	0x12b0	; 0x12b0 <task_switch_in>
    315c:	08 95       	ret

0000315e <vTaskPlaceOnEventList>:
    315e:	cf 92       	push	r12
    3160:	df 92       	push	r13
    3162:	ef 92       	push	r14
    3164:	ff 92       	push	r15
    3166:	6a 01       	movw	r12, r20
    3168:	7b 01       	movw	r14, r22
    316a:	60 91 d9 18 	lds	r22, 0x18D9	; 0x8018d9 <pxCurrentTCB>
    316e:	70 91 da 18 	lds	r23, 0x18DA	; 0x8018da <pxCurrentTCB+0x1>
    3172:	62 5f       	subi	r22, 0xF2	; 242
    3174:	7f 4f       	sbci	r23, 0xFF	; 255
    3176:	0e 94 41 0c 	call	0x1882	; 0x1882 <vListInsert>
    317a:	41 e0       	ldi	r20, 0x01	; 1
    317c:	c7 01       	movw	r24, r14
    317e:	b6 01       	movw	r22, r12
    3180:	1d dc       	rcall	.-1990   	; 0x29bc <prvAddCurrentTaskToDelayedList>
    3182:	ff 90       	pop	r15
    3184:	ef 90       	pop	r14
    3186:	df 90       	pop	r13
    3188:	cf 90       	pop	r12
    318a:	08 95       	ret

0000318c <vTaskPlaceOnUnorderedEventList>:
    318c:	cf 92       	push	r12
    318e:	df 92       	push	r13
    3190:	ef 92       	push	r14
    3192:	ff 92       	push	r15
    3194:	0f 93       	push	r16
    3196:	1f 93       	push	r17
    3198:	68 01       	movw	r12, r16
    319a:	79 01       	movw	r14, r18
    319c:	e0 91 d9 18 	lds	r30, 0x18D9	; 0x8018d9 <pxCurrentTCB>
    31a0:	f0 91 da 18 	lds	r31, 0x18DA	; 0x8018da <pxCurrentTCB+0x1>
    31a4:	70 68       	ori	r23, 0x80	; 128
    31a6:	46 87       	std	Z+14, r20	; 0x0e
    31a8:	57 87       	std	Z+15, r21	; 0x0f
    31aa:	60 8b       	std	Z+16, r22	; 0x10
    31ac:	71 8b       	std	Z+17, r23	; 0x11
    31ae:	60 91 d9 18 	lds	r22, 0x18D9	; 0x8018d9 <pxCurrentTCB>
    31b2:	70 91 da 18 	lds	r23, 0x18DA	; 0x8018da <pxCurrentTCB+0x1>
    31b6:	62 5f       	subi	r22, 0xF2	; 242
    31b8:	7f 4f       	sbci	r23, 0xFF	; 255
    31ba:	0e 94 20 0c 	call	0x1840	; 0x1840 <vListInsertEnd>
    31be:	41 e0       	ldi	r20, 0x01	; 1
    31c0:	c7 01       	movw	r24, r14
    31c2:	b6 01       	movw	r22, r12
    31c4:	fb db       	rcall	.-2058   	; 0x29bc <prvAddCurrentTaskToDelayedList>
    31c6:	1f 91       	pop	r17
    31c8:	0f 91       	pop	r16
    31ca:	ff 90       	pop	r15
    31cc:	ef 90       	pop	r14
    31ce:	df 90       	pop	r13
    31d0:	cf 90       	pop	r12
    31d2:	08 95       	ret

000031d4 <vTaskPlaceOnEventListRestricted>:
    31d4:	cf 92       	push	r12
    31d6:	df 92       	push	r13
    31d8:	ef 92       	push	r14
    31da:	ff 92       	push	r15
    31dc:	cf 93       	push	r28
    31de:	6a 01       	movw	r12, r20
    31e0:	7b 01       	movw	r14, r22
    31e2:	c2 2f       	mov	r28, r18
    31e4:	60 91 d9 18 	lds	r22, 0x18D9	; 0x8018d9 <pxCurrentTCB>
    31e8:	70 91 da 18 	lds	r23, 0x18DA	; 0x8018da <pxCurrentTCB+0x1>
    31ec:	62 5f       	subi	r22, 0xF2	; 242
    31ee:	7f 4f       	sbci	r23, 0xFF	; 255
    31f0:	0e 94 20 0c 	call	0x1840	; 0x1840 <vListInsertEnd>
    31f4:	cc 23       	and	r28, r28
    31f6:	21 f0       	breq	.+8      	; 0x3200 <vTaskPlaceOnEventListRestricted+0x2c>
    31f8:	cc 24       	eor	r12, r12
    31fa:	ca 94       	dec	r12
    31fc:	dc 2c       	mov	r13, r12
    31fe:	76 01       	movw	r14, r12
    3200:	4c 2f       	mov	r20, r28
    3202:	c7 01       	movw	r24, r14
    3204:	b6 01       	movw	r22, r12
    3206:	da db       	rcall	.-2124   	; 0x29bc <prvAddCurrentTaskToDelayedList>
    3208:	cf 91       	pop	r28
    320a:	ff 90       	pop	r15
    320c:	ef 90       	pop	r14
    320e:	df 90       	pop	r13
    3210:	cf 90       	pop	r12
    3212:	08 95       	ret

00003214 <xTaskRemoveFromEventList>:
    3214:	0f 93       	push	r16
    3216:	1f 93       	push	r17
    3218:	cf 93       	push	r28
    321a:	df 93       	push	r29
    321c:	dc 01       	movw	r26, r24
    321e:	17 96       	adiw	r26, 0x07	; 7
    3220:	ed 91       	ld	r30, X+
    3222:	fc 91       	ld	r31, X
    3224:	18 97       	sbiw	r26, 0x08	; 8
    3226:	c0 85       	ldd	r28, Z+8	; 0x08
    3228:	d1 85       	ldd	r29, Z+9	; 0x09
    322a:	8e 01       	movw	r16, r28
    322c:	02 5f       	subi	r16, 0xF2	; 242
    322e:	1f 4f       	sbci	r17, 0xFF	; 255
    3230:	c8 01       	movw	r24, r16
    3232:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <uxListRemove>
    3236:	80 91 49 18 	lds	r24, 0x1849	; 0x801849 <uxSchedulerSuspended>
    323a:	81 11       	cpse	r24, r1
    323c:	16 c0       	rjmp	.+44     	; 0x326a <xTaskRemoveFromEventList+0x56>
    323e:	0c 50       	subi	r16, 0x0C	; 12
    3240:	11 09       	sbc	r17, r1
    3242:	c8 01       	movw	r24, r16
    3244:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <uxListRemove>
    3248:	8a 8d       	ldd	r24, Y+26	; 0x1a
    324a:	90 91 55 18 	lds	r25, 0x1855	; 0x801855 <uxTopReadyPriority>
    324e:	98 17       	cp	r25, r24
    3250:	10 f4       	brcc	.+4      	; 0x3256 <xTaskRemoveFromEventList+0x42>
    3252:	80 93 55 18 	sts	0x1855, r24	; 0x801855 <uxTopReadyPriority>
    3256:	bb e0       	ldi	r27, 0x0B	; 11
    3258:	8b 9f       	mul	r24, r27
    325a:	c0 01       	movw	r24, r0
    325c:	11 24       	eor	r1, r1
    325e:	b8 01       	movw	r22, r16
    3260:	89 56       	subi	r24, 0x69	; 105
    3262:	97 4e       	sbci	r25, 0xE7	; 231
    3264:	0e 94 20 0c 	call	0x1840	; 0x1840 <vListInsertEnd>
    3268:	05 c0       	rjmp	.+10     	; 0x3274 <xTaskRemoveFromEventList+0x60>
    326a:	b8 01       	movw	r22, r16
    326c:	82 e7       	ldi	r24, 0x72	; 114
    326e:	98 e1       	ldi	r25, 0x18	; 24
    3270:	0e 94 20 0c 	call	0x1840	; 0x1840 <vListInsertEnd>
    3274:	e0 91 d9 18 	lds	r30, 0x18D9	; 0x8018d9 <pxCurrentTCB>
    3278:	f0 91 da 18 	lds	r31, 0x18DA	; 0x8018da <pxCurrentTCB+0x1>
    327c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    327e:	82 8d       	ldd	r24, Z+26	; 0x1a
    3280:	89 17       	cp	r24, r25
    3282:	20 f4       	brcc	.+8      	; 0x328c <xTaskRemoveFromEventList+0x78>
    3284:	81 e0       	ldi	r24, 0x01	; 1
    3286:	80 93 52 18 	sts	0x1852, r24	; 0x801852 <xYieldPending>
    328a:	01 c0       	rjmp	.+2      	; 0x328e <xTaskRemoveFromEventList+0x7a>
    328c:	80 e0       	ldi	r24, 0x00	; 0
    328e:	df 91       	pop	r29
    3290:	cf 91       	pop	r28
    3292:	1f 91       	pop	r17
    3294:	0f 91       	pop	r16
    3296:	08 95       	ret

00003298 <vTaskRemoveFromUnorderedEventList>:
    3298:	0f 93       	push	r16
    329a:	1f 93       	push	r17
    329c:	cf 93       	push	r28
    329e:	df 93       	push	r29
    32a0:	70 68       	ori	r23, 0x80	; 128
    32a2:	fc 01       	movw	r30, r24
    32a4:	40 83       	st	Z, r20
    32a6:	51 83       	std	Z+1, r21	; 0x01
    32a8:	62 83       	std	Z+2, r22	; 0x02
    32aa:	73 83       	std	Z+3, r23	; 0x03
    32ac:	c0 85       	ldd	r28, Z+8	; 0x08
    32ae:	d1 85       	ldd	r29, Z+9	; 0x09
    32b0:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <uxListRemove>
    32b4:	8e 01       	movw	r16, r28
    32b6:	0e 5f       	subi	r16, 0xFE	; 254
    32b8:	1f 4f       	sbci	r17, 0xFF	; 255
    32ba:	c8 01       	movw	r24, r16
    32bc:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <uxListRemove>
    32c0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    32c2:	90 91 55 18 	lds	r25, 0x1855	; 0x801855 <uxTopReadyPriority>
    32c6:	98 17       	cp	r25, r24
    32c8:	10 f4       	brcc	.+4      	; 0x32ce <vTaskRemoveFromUnorderedEventList+0x36>
    32ca:	80 93 55 18 	sts	0x1855, r24	; 0x801855 <uxTopReadyPriority>
    32ce:	fb e0       	ldi	r31, 0x0B	; 11
    32d0:	8f 9f       	mul	r24, r31
    32d2:	c0 01       	movw	r24, r0
    32d4:	11 24       	eor	r1, r1
    32d6:	b8 01       	movw	r22, r16
    32d8:	89 56       	subi	r24, 0x69	; 105
    32da:	97 4e       	sbci	r25, 0xE7	; 231
    32dc:	0e 94 20 0c 	call	0x1840	; 0x1840 <vListInsertEnd>
    32e0:	e0 91 d9 18 	lds	r30, 0x18D9	; 0x8018d9 <pxCurrentTCB>
    32e4:	f0 91 da 18 	lds	r31, 0x18DA	; 0x8018da <pxCurrentTCB+0x1>
    32e8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    32ea:	82 8d       	ldd	r24, Z+26	; 0x1a
    32ec:	89 17       	cp	r24, r25
    32ee:	18 f4       	brcc	.+6      	; 0x32f6 <vTaskRemoveFromUnorderedEventList+0x5e>
    32f0:	81 e0       	ldi	r24, 0x01	; 1
    32f2:	80 93 52 18 	sts	0x1852, r24	; 0x801852 <xYieldPending>
    32f6:	df 91       	pop	r29
    32f8:	cf 91       	pop	r28
    32fa:	1f 91       	pop	r17
    32fc:	0f 91       	pop	r16
    32fe:	08 95       	ret

00003300 <vTaskSetTimeOutState>:
    3300:	0f b6       	in	r0, 0x3f	; 63
    3302:	f8 94       	cli
    3304:	0f 92       	push	r0
    3306:	20 91 51 18 	lds	r18, 0x1851	; 0x801851 <xNumOfOverflows>
    330a:	fc 01       	movw	r30, r24
    330c:	20 83       	st	Z, r18
    330e:	40 91 56 18 	lds	r20, 0x1856	; 0x801856 <xTickCount>
    3312:	50 91 57 18 	lds	r21, 0x1857	; 0x801857 <xTickCount+0x1>
    3316:	60 91 58 18 	lds	r22, 0x1858	; 0x801858 <xTickCount+0x2>
    331a:	70 91 59 18 	lds	r23, 0x1859	; 0x801859 <xTickCount+0x3>
    331e:	41 83       	std	Z+1, r20	; 0x01
    3320:	52 83       	std	Z+2, r21	; 0x02
    3322:	63 83       	std	Z+3, r22	; 0x03
    3324:	74 83       	std	Z+4, r23	; 0x04
    3326:	0f 90       	pop	r0
    3328:	0f be       	out	0x3f, r0	; 63
    332a:	08 95       	ret

0000332c <vTaskInternalSetTimeOutState>:
    332c:	20 91 51 18 	lds	r18, 0x1851	; 0x801851 <xNumOfOverflows>
    3330:	fc 01       	movw	r30, r24
    3332:	20 83       	st	Z, r18
    3334:	40 91 56 18 	lds	r20, 0x1856	; 0x801856 <xTickCount>
    3338:	50 91 57 18 	lds	r21, 0x1857	; 0x801857 <xTickCount+0x1>
    333c:	60 91 58 18 	lds	r22, 0x1858	; 0x801858 <xTickCount+0x2>
    3340:	70 91 59 18 	lds	r23, 0x1859	; 0x801859 <xTickCount+0x3>
    3344:	41 83       	std	Z+1, r20	; 0x01
    3346:	52 83       	std	Z+2, r21	; 0x02
    3348:	63 83       	std	Z+3, r22	; 0x03
    334a:	74 83       	std	Z+4, r23	; 0x04
    334c:	08 95       	ret

0000334e <xTaskCheckForTimeOut>:
    334e:	cf 92       	push	r12
    3350:	df 92       	push	r13
    3352:	ef 92       	push	r14
    3354:	ff 92       	push	r15
    3356:	0f 93       	push	r16
    3358:	1f 93       	push	r17
    335a:	cf 93       	push	r28
    335c:	df 93       	push	r29
    335e:	fb 01       	movw	r30, r22
    3360:	0f b6       	in	r0, 0x3f	; 63
    3362:	f8 94       	cli
    3364:	0f 92       	push	r0
    3366:	40 91 56 18 	lds	r20, 0x1856	; 0x801856 <xTickCount>
    336a:	50 91 57 18 	lds	r21, 0x1857	; 0x801857 <xTickCount+0x1>
    336e:	60 91 58 18 	lds	r22, 0x1858	; 0x801858 <xTickCount+0x2>
    3372:	70 91 59 18 	lds	r23, 0x1859	; 0x801859 <xTickCount+0x3>
    3376:	00 81       	ld	r16, Z
    3378:	11 81       	ldd	r17, Z+1	; 0x01
    337a:	22 81       	ldd	r18, Z+2	; 0x02
    337c:	33 81       	ldd	r19, Z+3	; 0x03
    337e:	0f 3f       	cpi	r16, 0xFF	; 255
    3380:	af ef       	ldi	r26, 0xFF	; 255
    3382:	1a 07       	cpc	r17, r26
    3384:	2a 07       	cpc	r18, r26
    3386:	3a 07       	cpc	r19, r26
    3388:	49 f1       	breq	.+82     	; 0x33dc <xTaskCheckForTimeOut+0x8e>
    338a:	ec 01       	movw	r28, r24
    338c:	c9 80       	ldd	r12, Y+1	; 0x01
    338e:	da 80       	ldd	r13, Y+2	; 0x02
    3390:	eb 80       	ldd	r14, Y+3	; 0x03
    3392:	fc 80       	ldd	r15, Y+4	; 0x04
    3394:	a0 91 51 18 	lds	r26, 0x1851	; 0x801851 <xNumOfOverflows>
    3398:	b8 81       	ld	r27, Y
    339a:	ba 17       	cp	r27, r26
    339c:	29 f0       	breq	.+10     	; 0x33a8 <xTaskCheckForTimeOut+0x5a>
    339e:	4c 15       	cp	r20, r12
    33a0:	5d 05       	cpc	r21, r13
    33a2:	6e 05       	cpc	r22, r14
    33a4:	7f 05       	cpc	r23, r15
    33a6:	e0 f4       	brcc	.+56     	; 0x33e0 <xTaskCheckForTimeOut+0x92>
    33a8:	4c 19       	sub	r20, r12
    33aa:	5d 09       	sbc	r21, r13
    33ac:	6e 09       	sbc	r22, r14
    33ae:	7f 09       	sbc	r23, r15
    33b0:	40 17       	cp	r20, r16
    33b2:	51 07       	cpc	r21, r17
    33b4:	62 07       	cpc	r22, r18
    33b6:	73 07       	cpc	r23, r19
    33b8:	58 f4       	brcc	.+22     	; 0x33d0 <xTaskCheckForTimeOut+0x82>
    33ba:	04 1b       	sub	r16, r20
    33bc:	15 0b       	sbc	r17, r21
    33be:	26 0b       	sbc	r18, r22
    33c0:	37 0b       	sbc	r19, r23
    33c2:	00 83       	st	Z, r16
    33c4:	11 83       	std	Z+1, r17	; 0x01
    33c6:	22 83       	std	Z+2, r18	; 0x02
    33c8:	33 83       	std	Z+3, r19	; 0x03
    33ca:	b0 df       	rcall	.-160    	; 0x332c <vTaskInternalSetTimeOutState>
    33cc:	80 e0       	ldi	r24, 0x00	; 0
    33ce:	09 c0       	rjmp	.+18     	; 0x33e2 <xTaskCheckForTimeOut+0x94>
    33d0:	10 82       	st	Z, r1
    33d2:	11 82       	std	Z+1, r1	; 0x01
    33d4:	12 82       	std	Z+2, r1	; 0x02
    33d6:	13 82       	std	Z+3, r1	; 0x03
    33d8:	81 e0       	ldi	r24, 0x01	; 1
    33da:	03 c0       	rjmp	.+6      	; 0x33e2 <xTaskCheckForTimeOut+0x94>
    33dc:	80 e0       	ldi	r24, 0x00	; 0
    33de:	01 c0       	rjmp	.+2      	; 0x33e2 <xTaskCheckForTimeOut+0x94>
    33e0:	81 e0       	ldi	r24, 0x01	; 1
    33e2:	0f 90       	pop	r0
    33e4:	0f be       	out	0x3f, r0	; 63
    33e6:	df 91       	pop	r29
    33e8:	cf 91       	pop	r28
    33ea:	1f 91       	pop	r17
    33ec:	0f 91       	pop	r16
    33ee:	ff 90       	pop	r15
    33f0:	ef 90       	pop	r14
    33f2:	df 90       	pop	r13
    33f4:	cf 90       	pop	r12
    33f6:	08 95       	ret

000033f8 <vTaskMissedYield>:
    33f8:	81 e0       	ldi	r24, 0x01	; 1
    33fa:	80 93 52 18 	sts	0x1852, r24	; 0x801852 <xYieldPending>
    33fe:	08 95       	ret

00003400 <xTaskGetCurrentTaskHandle>:
    3400:	80 91 d9 18 	lds	r24, 0x18D9	; 0x8018d9 <pxCurrentTCB>
    3404:	90 91 da 18 	lds	r25, 0x18DA	; 0x8018da <pxCurrentTCB+0x1>
    3408:	08 95       	ret

0000340a <xTaskGetSchedulerState>:
    340a:	80 91 54 18 	lds	r24, 0x1854	; 0x801854 <xSchedulerRunning>
    340e:	88 23       	and	r24, r24
    3410:	31 f0       	breq	.+12     	; 0x341e <xTaskGetSchedulerState+0x14>
    3412:	80 91 49 18 	lds	r24, 0x1849	; 0x801849 <uxSchedulerSuspended>
    3416:	88 23       	and	r24, r24
    3418:	21 f0       	breq	.+8      	; 0x3422 <xTaskGetSchedulerState+0x18>
    341a:	80 e0       	ldi	r24, 0x00	; 0
    341c:	08 95       	ret
    341e:	81 e0       	ldi	r24, 0x01	; 1
    3420:	08 95       	ret
    3422:	82 e0       	ldi	r24, 0x02	; 2
    3424:	08 95       	ret

00003426 <xTaskPriorityInherit>:
    3426:	0f 93       	push	r16
    3428:	1f 93       	push	r17
    342a:	cf 93       	push	r28
    342c:	df 93       	push	r29
    342e:	fc 01       	movw	r30, r24
    3430:	89 2b       	or	r24, r25
    3432:	09 f4       	brne	.+2      	; 0x3436 <xTaskPriorityInherit+0x10>
    3434:	60 c0       	rjmp	.+192    	; 0x34f6 <xTaskPriorityInherit+0xd0>
    3436:	82 8d       	ldd	r24, Z+26	; 0x1a
    3438:	a0 91 d9 18 	lds	r26, 0x18D9	; 0x8018d9 <pxCurrentTCB>
    343c:	b0 91 da 18 	lds	r27, 0x18DA	; 0x8018da <pxCurrentTCB+0x1>
    3440:	5a 96       	adiw	r26, 0x1a	; 26
    3442:	9c 91       	ld	r25, X
    3444:	89 17       	cp	r24, r25
    3446:	08 f0       	brcs	.+2      	; 0x344a <xTaskPriorityInherit+0x24>
    3448:	4a c0       	rjmp	.+148    	; 0x34de <xTaskPriorityInherit+0xb8>
    344a:	46 85       	ldd	r20, Z+14	; 0x0e
    344c:	57 85       	ldd	r21, Z+15	; 0x0f
    344e:	60 89       	ldd	r22, Z+16	; 0x10
    3450:	71 89       	ldd	r23, Z+17	; 0x11
    3452:	77 23       	and	r23, r23
    3454:	94 f0       	brlt	.+36     	; 0x347a <xTaskPriorityInherit+0x54>
    3456:	a0 91 d9 18 	lds	r26, 0x18D9	; 0x8018d9 <pxCurrentTCB>
    345a:	b0 91 da 18 	lds	r27, 0x18DA	; 0x8018da <pxCurrentTCB+0x1>
    345e:	5a 96       	adiw	r26, 0x1a	; 26
    3460:	9c 91       	ld	r25, X
    3462:	46 e0       	ldi	r20, 0x06	; 6
    3464:	50 e0       	ldi	r21, 0x00	; 0
    3466:	60 e0       	ldi	r22, 0x00	; 0
    3468:	70 e0       	ldi	r23, 0x00	; 0
    346a:	49 1b       	sub	r20, r25
    346c:	51 09       	sbc	r21, r1
    346e:	61 09       	sbc	r22, r1
    3470:	71 09       	sbc	r23, r1
    3472:	46 87       	std	Z+14, r20	; 0x0e
    3474:	57 87       	std	Z+15, r21	; 0x0f
    3476:	60 8b       	std	Z+16, r22	; 0x10
    3478:	71 8b       	std	Z+17, r23	; 0x11
    347a:	2b e0       	ldi	r18, 0x0B	; 11
    347c:	82 9f       	mul	r24, r18
    347e:	c0 01       	movw	r24, r0
    3480:	11 24       	eor	r1, r1
    3482:	89 56       	subi	r24, 0x69	; 105
    3484:	97 4e       	sbci	r25, 0xE7	; 231
    3486:	24 85       	ldd	r18, Z+12	; 0x0c
    3488:	35 85       	ldd	r19, Z+13	; 0x0d
    348a:	28 17       	cp	r18, r24
    348c:	39 07       	cpc	r19, r25
    348e:	f1 f4       	brne	.+60     	; 0x34cc <xTaskPriorityInherit+0xa6>
    3490:	8f 01       	movw	r16, r30
    3492:	ef 01       	movw	r28, r30
    3494:	22 96       	adiw	r28, 0x02	; 2
    3496:	ce 01       	movw	r24, r28
    3498:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <uxListRemove>
    349c:	e0 91 d9 18 	lds	r30, 0x18D9	; 0x8018d9 <pxCurrentTCB>
    34a0:	f0 91 da 18 	lds	r31, 0x18DA	; 0x8018da <pxCurrentTCB+0x1>
    34a4:	82 8d       	ldd	r24, Z+26	; 0x1a
    34a6:	f8 01       	movw	r30, r16
    34a8:	82 8f       	std	Z+26, r24	; 0x1a
    34aa:	90 91 55 18 	lds	r25, 0x1855	; 0x801855 <uxTopReadyPriority>
    34ae:	98 17       	cp	r25, r24
    34b0:	10 f4       	brcc	.+4      	; 0x34b6 <xTaskPriorityInherit+0x90>
    34b2:	80 93 55 18 	sts	0x1855, r24	; 0x801855 <uxTopReadyPriority>
    34b6:	fb e0       	ldi	r31, 0x0B	; 11
    34b8:	8f 9f       	mul	r24, r31
    34ba:	c0 01       	movw	r24, r0
    34bc:	11 24       	eor	r1, r1
    34be:	be 01       	movw	r22, r28
    34c0:	89 56       	subi	r24, 0x69	; 105
    34c2:	97 4e       	sbci	r25, 0xE7	; 231
    34c4:	0e 94 20 0c 	call	0x1840	; 0x1840 <vListInsertEnd>
    34c8:	81 e0       	ldi	r24, 0x01	; 1
    34ca:	16 c0       	rjmp	.+44     	; 0x34f8 <xTaskPriorityInherit+0xd2>
    34cc:	a0 91 d9 18 	lds	r26, 0x18D9	; 0x8018d9 <pxCurrentTCB>
    34d0:	b0 91 da 18 	lds	r27, 0x18DA	; 0x8018da <pxCurrentTCB+0x1>
    34d4:	5a 96       	adiw	r26, 0x1a	; 26
    34d6:	8c 91       	ld	r24, X
    34d8:	82 8f       	std	Z+26, r24	; 0x1a
    34da:	81 e0       	ldi	r24, 0x01	; 1
    34dc:	0d c0       	rjmp	.+26     	; 0x34f8 <xTaskPriorityInherit+0xd2>
    34de:	a0 91 d9 18 	lds	r26, 0x18D9	; 0x8018d9 <pxCurrentTCB>
    34e2:	b0 91 da 18 	lds	r27, 0x18DA	; 0x8018da <pxCurrentTCB+0x1>
    34e6:	81 e0       	ldi	r24, 0x01	; 1
    34e8:	27 a1       	ldd	r18, Z+39	; 0x27
    34ea:	5a 96       	adiw	r26, 0x1a	; 26
    34ec:	9c 91       	ld	r25, X
    34ee:	29 17       	cp	r18, r25
    34f0:	18 f0       	brcs	.+6      	; 0x34f8 <xTaskPriorityInherit+0xd2>
    34f2:	80 e0       	ldi	r24, 0x00	; 0
    34f4:	01 c0       	rjmp	.+2      	; 0x34f8 <xTaskPriorityInherit+0xd2>
    34f6:	80 e0       	ldi	r24, 0x00	; 0
    34f8:	df 91       	pop	r29
    34fa:	cf 91       	pop	r28
    34fc:	1f 91       	pop	r17
    34fe:	0f 91       	pop	r16
    3500:	08 95       	ret

00003502 <xTaskPriorityDisinherit>:
    3502:	0f 93       	push	r16
    3504:	1f 93       	push	r17
    3506:	cf 93       	push	r28
    3508:	df 93       	push	r29
    350a:	fc 01       	movw	r30, r24
    350c:	89 2b       	or	r24, r25
    350e:	79 f1       	breq	.+94     	; 0x356e <xTaskPriorityDisinherit+0x6c>
    3510:	80 a5       	ldd	r24, Z+40	; 0x28
    3512:	81 50       	subi	r24, 0x01	; 1
    3514:	80 a7       	std	Z+40, r24	; 0x28
    3516:	22 8d       	ldd	r18, Z+26	; 0x1a
    3518:	97 a1       	ldd	r25, Z+39	; 0x27
    351a:	29 17       	cp	r18, r25
    351c:	51 f1       	breq	.+84     	; 0x3572 <xTaskPriorityDisinherit+0x70>
    351e:	81 11       	cpse	r24, r1
    3520:	2a c0       	rjmp	.+84     	; 0x3576 <xTaskPriorityDisinherit+0x74>
    3522:	ef 01       	movw	r28, r30
    3524:	8f 01       	movw	r16, r30
    3526:	0e 5f       	subi	r16, 0xFE	; 254
    3528:	1f 4f       	sbci	r17, 0xFF	; 255
    352a:	c8 01       	movw	r24, r16
    352c:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <uxListRemove>
    3530:	8f a1       	ldd	r24, Y+39	; 0x27
    3532:	8a 8f       	std	Y+26, r24	; 0x1a
    3534:	46 e0       	ldi	r20, 0x06	; 6
    3536:	50 e0       	ldi	r21, 0x00	; 0
    3538:	60 e0       	ldi	r22, 0x00	; 0
    353a:	70 e0       	ldi	r23, 0x00	; 0
    353c:	48 1b       	sub	r20, r24
    353e:	51 09       	sbc	r21, r1
    3540:	61 09       	sbc	r22, r1
    3542:	71 09       	sbc	r23, r1
    3544:	4e 87       	std	Y+14, r20	; 0x0e
    3546:	5f 87       	std	Y+15, r21	; 0x0f
    3548:	68 8b       	std	Y+16, r22	; 0x10
    354a:	79 8b       	std	Y+17, r23	; 0x11
    354c:	90 91 55 18 	lds	r25, 0x1855	; 0x801855 <uxTopReadyPriority>
    3550:	98 17       	cp	r25, r24
    3552:	10 f4       	brcc	.+4      	; 0x3558 <xTaskPriorityDisinherit+0x56>
    3554:	80 93 55 18 	sts	0x1855, r24	; 0x801855 <uxTopReadyPriority>
    3558:	2b e0       	ldi	r18, 0x0B	; 11
    355a:	82 9f       	mul	r24, r18
    355c:	c0 01       	movw	r24, r0
    355e:	11 24       	eor	r1, r1
    3560:	b8 01       	movw	r22, r16
    3562:	89 56       	subi	r24, 0x69	; 105
    3564:	97 4e       	sbci	r25, 0xE7	; 231
    3566:	0e 94 20 0c 	call	0x1840	; 0x1840 <vListInsertEnd>
    356a:	81 e0       	ldi	r24, 0x01	; 1
    356c:	05 c0       	rjmp	.+10     	; 0x3578 <xTaskPriorityDisinherit+0x76>
    356e:	80 e0       	ldi	r24, 0x00	; 0
    3570:	03 c0       	rjmp	.+6      	; 0x3578 <xTaskPriorityDisinherit+0x76>
    3572:	80 e0       	ldi	r24, 0x00	; 0
    3574:	01 c0       	rjmp	.+2      	; 0x3578 <xTaskPriorityDisinherit+0x76>
    3576:	80 e0       	ldi	r24, 0x00	; 0
    3578:	df 91       	pop	r29
    357a:	cf 91       	pop	r28
    357c:	1f 91       	pop	r17
    357e:	0f 91       	pop	r16
    3580:	08 95       	ret

00003582 <vTaskPriorityDisinheritAfterTimeout>:
    3582:	0f 93       	push	r16
    3584:	1f 93       	push	r17
    3586:	cf 93       	push	r28
    3588:	df 93       	push	r29
    358a:	fc 01       	movw	r30, r24
    358c:	89 2b       	or	r24, r25
    358e:	09 f4       	brne	.+2      	; 0x3592 <vTaskPriorityDisinheritAfterTimeout+0x10>
    3590:	3f c0       	rjmp	.+126    	; 0x3610 <vTaskPriorityDisinheritAfterTimeout+0x8e>
    3592:	87 a1       	ldd	r24, Z+39	; 0x27
    3594:	86 17       	cp	r24, r22
    3596:	08 f4       	brcc	.+2      	; 0x359a <vTaskPriorityDisinheritAfterTimeout+0x18>
    3598:	86 2f       	mov	r24, r22
    359a:	92 8d       	ldd	r25, Z+26	; 0x1a
    359c:	98 17       	cp	r25, r24
    359e:	c1 f1       	breq	.+112    	; 0x3610 <vTaskPriorityDisinheritAfterTimeout+0x8e>
    35a0:	20 a5       	ldd	r18, Z+40	; 0x28
    35a2:	21 30       	cpi	r18, 0x01	; 1
    35a4:	a9 f5       	brne	.+106    	; 0x3610 <vTaskPriorityDisinheritAfterTimeout+0x8e>
    35a6:	82 8f       	std	Z+26, r24	; 0x1a
    35a8:	46 85       	ldd	r20, Z+14	; 0x0e
    35aa:	57 85       	ldd	r21, Z+15	; 0x0f
    35ac:	60 89       	ldd	r22, Z+16	; 0x10
    35ae:	71 89       	ldd	r23, Z+17	; 0x11
    35b0:	77 23       	and	r23, r23
    35b2:	64 f0       	brlt	.+24     	; 0x35cc <vTaskPriorityDisinheritAfterTimeout+0x4a>
    35b4:	46 e0       	ldi	r20, 0x06	; 6
    35b6:	50 e0       	ldi	r21, 0x00	; 0
    35b8:	60 e0       	ldi	r22, 0x00	; 0
    35ba:	70 e0       	ldi	r23, 0x00	; 0
    35bc:	48 1b       	sub	r20, r24
    35be:	51 09       	sbc	r21, r1
    35c0:	61 09       	sbc	r22, r1
    35c2:	71 09       	sbc	r23, r1
    35c4:	46 87       	std	Z+14, r20	; 0x0e
    35c6:	57 87       	std	Z+15, r21	; 0x0f
    35c8:	60 8b       	std	Z+16, r22	; 0x10
    35ca:	71 8b       	std	Z+17, r23	; 0x11
    35cc:	2b e0       	ldi	r18, 0x0B	; 11
    35ce:	92 9f       	mul	r25, r18
    35d0:	c0 01       	movw	r24, r0
    35d2:	11 24       	eor	r1, r1
    35d4:	89 56       	subi	r24, 0x69	; 105
    35d6:	97 4e       	sbci	r25, 0xE7	; 231
    35d8:	24 85       	ldd	r18, Z+12	; 0x0c
    35da:	35 85       	ldd	r19, Z+13	; 0x0d
    35dc:	28 17       	cp	r18, r24
    35de:	39 07       	cpc	r19, r25
    35e0:	b9 f4       	brne	.+46     	; 0x3610 <vTaskPriorityDisinheritAfterTimeout+0x8e>
    35e2:	ef 01       	movw	r28, r30
    35e4:	8f 01       	movw	r16, r30
    35e6:	0e 5f       	subi	r16, 0xFE	; 254
    35e8:	1f 4f       	sbci	r17, 0xFF	; 255
    35ea:	c8 01       	movw	r24, r16
    35ec:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <uxListRemove>
    35f0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    35f2:	90 91 55 18 	lds	r25, 0x1855	; 0x801855 <uxTopReadyPriority>
    35f6:	98 17       	cp	r25, r24
    35f8:	10 f4       	brcc	.+4      	; 0x35fe <vTaskPriorityDisinheritAfterTimeout+0x7c>
    35fa:	80 93 55 18 	sts	0x1855, r24	; 0x801855 <uxTopReadyPriority>
    35fe:	2b e0       	ldi	r18, 0x0B	; 11
    3600:	82 9f       	mul	r24, r18
    3602:	c0 01       	movw	r24, r0
    3604:	11 24       	eor	r1, r1
    3606:	b8 01       	movw	r22, r16
    3608:	89 56       	subi	r24, 0x69	; 105
    360a:	97 4e       	sbci	r25, 0xE7	; 231
    360c:	0e 94 20 0c 	call	0x1840	; 0x1840 <vListInsertEnd>
    3610:	df 91       	pop	r29
    3612:	cf 91       	pop	r28
    3614:	1f 91       	pop	r17
    3616:	0f 91       	pop	r16
    3618:	08 95       	ret

0000361a <uxTaskResetEventItemValue>:
    361a:	cf 92       	push	r12
    361c:	df 92       	push	r13
    361e:	ef 92       	push	r14
    3620:	ff 92       	push	r15
    3622:	e0 91 d9 18 	lds	r30, 0x18D9	; 0x8018d9 <pxCurrentTCB>
    3626:	f0 91 da 18 	lds	r31, 0x18DA	; 0x8018da <pxCurrentTCB+0x1>
    362a:	66 85       	ldd	r22, Z+14	; 0x0e
    362c:	77 85       	ldd	r23, Z+15	; 0x0f
    362e:	80 89       	ldd	r24, Z+16	; 0x10
    3630:	91 89       	ldd	r25, Z+17	; 0x11
    3632:	e0 91 d9 18 	lds	r30, 0x18D9	; 0x8018d9 <pxCurrentTCB>
    3636:	f0 91 da 18 	lds	r31, 0x18DA	; 0x8018da <pxCurrentTCB+0x1>
    363a:	a0 91 d9 18 	lds	r26, 0x18D9	; 0x8018d9 <pxCurrentTCB>
    363e:	b0 91 da 18 	lds	r27, 0x18DA	; 0x8018da <pxCurrentTCB+0x1>
    3642:	5a 96       	adiw	r26, 0x1a	; 26
    3644:	2c 91       	ld	r18, X
    3646:	0f 2e       	mov	r0, r31
    3648:	f6 e0       	ldi	r31, 0x06	; 6
    364a:	cf 2e       	mov	r12, r31
    364c:	d1 2c       	mov	r13, r1
    364e:	e1 2c       	mov	r14, r1
    3650:	f1 2c       	mov	r15, r1
    3652:	f0 2d       	mov	r31, r0
    3654:	c2 1a       	sub	r12, r18
    3656:	d1 08       	sbc	r13, r1
    3658:	e1 08       	sbc	r14, r1
    365a:	f1 08       	sbc	r15, r1
    365c:	c6 86       	std	Z+14, r12	; 0x0e
    365e:	d7 86       	std	Z+15, r13	; 0x0f
    3660:	e0 8a       	std	Z+16, r14	; 0x10
    3662:	f1 8a       	std	Z+17, r15	; 0x11
    3664:	ff 90       	pop	r15
    3666:	ef 90       	pop	r14
    3668:	df 90       	pop	r13
    366a:	cf 90       	pop	r12
    366c:	08 95       	ret

0000366e <pvTaskIncrementMutexHeldCount>:
    366e:	80 91 d9 18 	lds	r24, 0x18D9	; 0x8018d9 <pxCurrentTCB>
    3672:	90 91 da 18 	lds	r25, 0x18DA	; 0x8018da <pxCurrentTCB+0x1>
    3676:	89 2b       	or	r24, r25
    3678:	39 f0       	breq	.+14     	; 0x3688 <pvTaskIncrementMutexHeldCount+0x1a>
    367a:	e0 91 d9 18 	lds	r30, 0x18D9	; 0x8018d9 <pxCurrentTCB>
    367e:	f0 91 da 18 	lds	r31, 0x18DA	; 0x8018da <pxCurrentTCB+0x1>
    3682:	80 a5       	ldd	r24, Z+40	; 0x28
    3684:	8f 5f       	subi	r24, 0xFF	; 255
    3686:	80 a7       	std	Z+40, r24	; 0x28
    3688:	80 91 d9 18 	lds	r24, 0x18D9	; 0x8018d9 <pxCurrentTCB>
    368c:	90 91 da 18 	lds	r25, 0x18DA	; 0x8018da <pxCurrentTCB+0x1>
    3690:	08 95       	ret

00003692 <xTaskNotifyWait>:
    3692:	4f 92       	push	r4
    3694:	5f 92       	push	r5
    3696:	6f 92       	push	r6
    3698:	7f 92       	push	r7
    369a:	8f 92       	push	r8
    369c:	9f 92       	push	r9
    369e:	af 92       	push	r10
    36a0:	bf 92       	push	r11
    36a2:	cf 92       	push	r12
    36a4:	df 92       	push	r13
    36a6:	ef 92       	push	r14
    36a8:	ff 92       	push	r15
    36aa:	0f 93       	push	r16
    36ac:	1f 93       	push	r17
    36ae:	49 01       	movw	r8, r18
    36b0:	5a 01       	movw	r10, r20
    36b2:	0f b6       	in	r0, 0x3f	; 63
    36b4:	f8 94       	cli
    36b6:	0f 92       	push	r0
    36b8:	e0 91 d9 18 	lds	r30, 0x18D9	; 0x8018d9 <pxCurrentTCB>
    36bc:	f0 91 da 18 	lds	r31, 0x18DA	; 0x8018da <pxCurrentTCB+0x1>
    36c0:	27 a5       	ldd	r18, Z+47	; 0x2f
    36c2:	22 30       	cpi	r18, 0x02	; 2
    36c4:	39 f1       	breq	.+78     	; 0x3714 <xTaskNotifyWait+0x82>
    36c6:	e0 91 d9 18 	lds	r30, 0x18D9	; 0x8018d9 <pxCurrentTCB>
    36ca:	f0 91 da 18 	lds	r31, 0x18DA	; 0x8018da <pxCurrentTCB+0x1>
    36ce:	43 a4       	ldd	r4, Z+43	; 0x2b
    36d0:	54 a4       	ldd	r5, Z+44	; 0x2c
    36d2:	65 a4       	ldd	r6, Z+45	; 0x2d
    36d4:	76 a4       	ldd	r7, Z+46	; 0x2e
    36d6:	dc 01       	movw	r26, r24
    36d8:	cb 01       	movw	r24, r22
    36da:	80 95       	com	r24
    36dc:	90 95       	com	r25
    36de:	a0 95       	com	r26
    36e0:	b0 95       	com	r27
    36e2:	84 21       	and	r24, r4
    36e4:	95 21       	and	r25, r5
    36e6:	a6 21       	and	r26, r6
    36e8:	b7 21       	and	r27, r7
    36ea:	83 a7       	std	Z+43, r24	; 0x2b
    36ec:	94 a7       	std	Z+44, r25	; 0x2c
    36ee:	a5 a7       	std	Z+45, r26	; 0x2d
    36f0:	b6 a7       	std	Z+46, r27	; 0x2e
    36f2:	e0 91 d9 18 	lds	r30, 0x18D9	; 0x8018d9 <pxCurrentTCB>
    36f6:	f0 91 da 18 	lds	r31, 0x18DA	; 0x8018da <pxCurrentTCB+0x1>
    36fa:	81 e0       	ldi	r24, 0x01	; 1
    36fc:	87 a7       	std	Z+47, r24	; 0x2f
    36fe:	c1 14       	cp	r12, r1
    3700:	d1 04       	cpc	r13, r1
    3702:	e1 04       	cpc	r14, r1
    3704:	f1 04       	cpc	r15, r1
    3706:	31 f0       	breq	.+12     	; 0x3714 <xTaskNotifyWait+0x82>
    3708:	41 e0       	ldi	r20, 0x01	; 1
    370a:	c7 01       	movw	r24, r14
    370c:	b6 01       	movw	r22, r12
    370e:	56 d9       	rcall	.-3412   	; 0x29bc <prvAddCurrentTaskToDelayedList>
    3710:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <vPortYield>
    3714:	0f 90       	pop	r0
    3716:	0f be       	out	0x3f, r0	; 63
    3718:	0f b6       	in	r0, 0x3f	; 63
    371a:	f8 94       	cli
    371c:	0f 92       	push	r0
    371e:	01 15       	cp	r16, r1
    3720:	11 05       	cpc	r17, r1
    3722:	69 f0       	breq	.+26     	; 0x373e <xTaskNotifyWait+0xac>
    3724:	e0 91 d9 18 	lds	r30, 0x18D9	; 0x8018d9 <pxCurrentTCB>
    3728:	f0 91 da 18 	lds	r31, 0x18DA	; 0x8018da <pxCurrentTCB+0x1>
    372c:	83 a5       	ldd	r24, Z+43	; 0x2b
    372e:	94 a5       	ldd	r25, Z+44	; 0x2c
    3730:	a5 a5       	ldd	r26, Z+45	; 0x2d
    3732:	b6 a5       	ldd	r27, Z+46	; 0x2e
    3734:	f8 01       	movw	r30, r16
    3736:	80 83       	st	Z, r24
    3738:	91 83       	std	Z+1, r25	; 0x01
    373a:	a2 83       	std	Z+2, r26	; 0x02
    373c:	b3 83       	std	Z+3, r27	; 0x03
    373e:	e0 91 d9 18 	lds	r30, 0x18D9	; 0x8018d9 <pxCurrentTCB>
    3742:	f0 91 da 18 	lds	r31, 0x18DA	; 0x8018da <pxCurrentTCB+0x1>
    3746:	87 a5       	ldd	r24, Z+47	; 0x2f
    3748:	82 30       	cpi	r24, 0x02	; 2
    374a:	b1 f4       	brne	.+44     	; 0x3778 <xTaskNotifyWait+0xe6>
    374c:	e0 91 d9 18 	lds	r30, 0x18D9	; 0x8018d9 <pxCurrentTCB>
    3750:	f0 91 da 18 	lds	r31, 0x18DA	; 0x8018da <pxCurrentTCB+0x1>
    3754:	83 a5       	ldd	r24, Z+43	; 0x2b
    3756:	94 a5       	ldd	r25, Z+44	; 0x2c
    3758:	a5 a5       	ldd	r26, Z+45	; 0x2d
    375a:	b6 a5       	ldd	r27, Z+46	; 0x2e
    375c:	80 94       	com	r8
    375e:	90 94       	com	r9
    3760:	a0 94       	com	r10
    3762:	b0 94       	com	r11
    3764:	88 22       	and	r8, r24
    3766:	99 22       	and	r9, r25
    3768:	aa 22       	and	r10, r26
    376a:	bb 22       	and	r11, r27
    376c:	83 a6       	std	Z+43, r8	; 0x2b
    376e:	94 a6       	std	Z+44, r9	; 0x2c
    3770:	a5 a6       	std	Z+45, r10	; 0x2d
    3772:	b6 a6       	std	Z+46, r11	; 0x2e
    3774:	81 e0       	ldi	r24, 0x01	; 1
    3776:	01 c0       	rjmp	.+2      	; 0x377a <xTaskNotifyWait+0xe8>
    3778:	80 e0       	ldi	r24, 0x00	; 0
    377a:	e0 91 d9 18 	lds	r30, 0x18D9	; 0x8018d9 <pxCurrentTCB>
    377e:	f0 91 da 18 	lds	r31, 0x18DA	; 0x8018da <pxCurrentTCB+0x1>
    3782:	17 a6       	std	Z+47, r1	; 0x2f
    3784:	0f 90       	pop	r0
    3786:	0f be       	out	0x3f, r0	; 63
    3788:	1f 91       	pop	r17
    378a:	0f 91       	pop	r16
    378c:	ff 90       	pop	r15
    378e:	ef 90       	pop	r14
    3790:	df 90       	pop	r13
    3792:	cf 90       	pop	r12
    3794:	bf 90       	pop	r11
    3796:	af 90       	pop	r10
    3798:	9f 90       	pop	r9
    379a:	8f 90       	pop	r8
    379c:	7f 90       	pop	r7
    379e:	6f 90       	pop	r6
    37a0:	5f 90       	pop	r5
    37a2:	4f 90       	pop	r4
    37a4:	08 95       	ret

000037a6 <xTaskGenericNotify>:
    37a6:	0f 93       	push	r16
    37a8:	1f 93       	push	r17
    37aa:	cf 93       	push	r28
    37ac:	df 93       	push	r29
    37ae:	fc 01       	movw	r30, r24
    37b0:	0f b6       	in	r0, 0x3f	; 63
    37b2:	f8 94       	cli
    37b4:	0f 92       	push	r0
    37b6:	01 15       	cp	r16, r1
    37b8:	11 05       	cpc	r17, r1
    37ba:	49 f0       	breq	.+18     	; 0x37ce <xTaskGenericNotify+0x28>
    37bc:	83 a5       	ldd	r24, Z+43	; 0x2b
    37be:	94 a5       	ldd	r25, Z+44	; 0x2c
    37c0:	a5 a5       	ldd	r26, Z+45	; 0x2d
    37c2:	b6 a5       	ldd	r27, Z+46	; 0x2e
    37c4:	e8 01       	movw	r28, r16
    37c6:	88 83       	st	Y, r24
    37c8:	99 83       	std	Y+1, r25	; 0x01
    37ca:	aa 83       	std	Y+2, r26	; 0x02
    37cc:	bb 83       	std	Y+3, r27	; 0x03
    37ce:	87 a5       	ldd	r24, Z+47	; 0x2f
    37d0:	92 e0       	ldi	r25, 0x02	; 2
    37d2:	97 a7       	std	Z+47, r25	; 0x2f
    37d4:	22 30       	cpi	r18, 0x02	; 2
    37d6:	b1 f0       	breq	.+44     	; 0x3804 <xTaskGenericNotify+0x5e>
    37d8:	18 f4       	brcc	.+6      	; 0x37e0 <xTaskGenericNotify+0x3a>
    37da:	21 30       	cpi	r18, 0x01	; 1
    37dc:	31 f0       	breq	.+12     	; 0x37ea <xTaskGenericNotify+0x44>
    37de:	2a c0       	rjmp	.+84     	; 0x3834 <xTaskGenericNotify+0x8e>
    37e0:	23 30       	cpi	r18, 0x03	; 3
    37e2:	e9 f0       	breq	.+58     	; 0x381e <xTaskGenericNotify+0x78>
    37e4:	24 30       	cpi	r18, 0x04	; 4
    37e6:	01 f1       	breq	.+64     	; 0x3828 <xTaskGenericNotify+0x82>
    37e8:	25 c0       	rjmp	.+74     	; 0x3834 <xTaskGenericNotify+0x8e>
    37ea:	03 a5       	ldd	r16, Z+43	; 0x2b
    37ec:	14 a5       	ldd	r17, Z+44	; 0x2c
    37ee:	25 a5       	ldd	r18, Z+45	; 0x2d
    37f0:	36 a5       	ldd	r19, Z+46	; 0x2e
    37f2:	40 2b       	or	r20, r16
    37f4:	51 2b       	or	r21, r17
    37f6:	62 2b       	or	r22, r18
    37f8:	73 2b       	or	r23, r19
    37fa:	43 a7       	std	Z+43, r20	; 0x2b
    37fc:	54 a7       	std	Z+44, r21	; 0x2c
    37fe:	65 a7       	std	Z+45, r22	; 0x2d
    3800:	76 a7       	std	Z+46, r23	; 0x2e
    3802:	18 c0       	rjmp	.+48     	; 0x3834 <xTaskGenericNotify+0x8e>
    3804:	43 a5       	ldd	r20, Z+43	; 0x2b
    3806:	54 a5       	ldd	r21, Z+44	; 0x2c
    3808:	65 a5       	ldd	r22, Z+45	; 0x2d
    380a:	76 a5       	ldd	r23, Z+46	; 0x2e
    380c:	4f 5f       	subi	r20, 0xFF	; 255
    380e:	5f 4f       	sbci	r21, 0xFF	; 255
    3810:	6f 4f       	sbci	r22, 0xFF	; 255
    3812:	7f 4f       	sbci	r23, 0xFF	; 255
    3814:	43 a7       	std	Z+43, r20	; 0x2b
    3816:	54 a7       	std	Z+44, r21	; 0x2c
    3818:	65 a7       	std	Z+45, r22	; 0x2d
    381a:	76 a7       	std	Z+46, r23	; 0x2e
    381c:	0b c0       	rjmp	.+22     	; 0x3834 <xTaskGenericNotify+0x8e>
    381e:	43 a7       	std	Z+43, r20	; 0x2b
    3820:	54 a7       	std	Z+44, r21	; 0x2c
    3822:	65 a7       	std	Z+45, r22	; 0x2d
    3824:	76 a7       	std	Z+46, r23	; 0x2e
    3826:	06 c0       	rjmp	.+12     	; 0x3834 <xTaskGenericNotify+0x8e>
    3828:	82 30       	cpi	r24, 0x02	; 2
    382a:	49 f1       	breq	.+82     	; 0x387e <xTaskGenericNotify+0xd8>
    382c:	43 a7       	std	Z+43, r20	; 0x2b
    382e:	54 a7       	std	Z+44, r21	; 0x2c
    3830:	65 a7       	std	Z+45, r22	; 0x2d
    3832:	76 a7       	std	Z+46, r23	; 0x2e
    3834:	81 30       	cpi	r24, 0x01	; 1
    3836:	29 f5       	brne	.+74     	; 0x3882 <xTaskGenericNotify+0xdc>
    3838:	ef 01       	movw	r28, r30
    383a:	8f 01       	movw	r16, r30
    383c:	0e 5f       	subi	r16, 0xFE	; 254
    383e:	1f 4f       	sbci	r17, 0xFF	; 255
    3840:	c8 01       	movw	r24, r16
    3842:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <uxListRemove>
    3846:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3848:	90 91 55 18 	lds	r25, 0x1855	; 0x801855 <uxTopReadyPriority>
    384c:	98 17       	cp	r25, r24
    384e:	10 f4       	brcc	.+4      	; 0x3854 <xTaskGenericNotify+0xae>
    3850:	80 93 55 18 	sts	0x1855, r24	; 0x801855 <uxTopReadyPriority>
    3854:	2b e0       	ldi	r18, 0x0B	; 11
    3856:	82 9f       	mul	r24, r18
    3858:	c0 01       	movw	r24, r0
    385a:	11 24       	eor	r1, r1
    385c:	b8 01       	movw	r22, r16
    385e:	89 56       	subi	r24, 0x69	; 105
    3860:	97 4e       	sbci	r25, 0xE7	; 231
    3862:	0e 94 20 0c 	call	0x1840	; 0x1840 <vListInsertEnd>
    3866:	e0 91 d9 18 	lds	r30, 0x18D9	; 0x8018d9 <pxCurrentTCB>
    386a:	f0 91 da 18 	lds	r31, 0x18DA	; 0x8018da <pxCurrentTCB+0x1>
    386e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3870:	82 8d       	ldd	r24, Z+26	; 0x1a
    3872:	89 17       	cp	r24, r25
    3874:	40 f4       	brcc	.+16     	; 0x3886 <xTaskGenericNotify+0xe0>
    3876:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <vPortYield>
    387a:	81 e0       	ldi	r24, 0x01	; 1
    387c:	05 c0       	rjmp	.+10     	; 0x3888 <xTaskGenericNotify+0xe2>
    387e:	80 e0       	ldi	r24, 0x00	; 0
    3880:	03 c0       	rjmp	.+6      	; 0x3888 <xTaskGenericNotify+0xe2>
    3882:	81 e0       	ldi	r24, 0x01	; 1
    3884:	01 c0       	rjmp	.+2      	; 0x3888 <xTaskGenericNotify+0xe2>
    3886:	81 e0       	ldi	r24, 0x01	; 1
    3888:	0f 90       	pop	r0
    388a:	0f be       	out	0x3f, r0	; 63
    388c:	df 91       	pop	r29
    388e:	cf 91       	pop	r28
    3890:	1f 91       	pop	r17
    3892:	0f 91       	pop	r16
    3894:	08 95       	ret

00003896 <xTaskGenericNotifyFromISR>:
    3896:	ef 92       	push	r14
    3898:	ff 92       	push	r15
    389a:	0f 93       	push	r16
    389c:	1f 93       	push	r17
    389e:	cf 93       	push	r28
    38a0:	df 93       	push	r29
    38a2:	fc 01       	movw	r30, r24
    38a4:	01 15       	cp	r16, r1
    38a6:	11 05       	cpc	r17, r1
    38a8:	49 f0       	breq	.+18     	; 0x38bc <xTaskGenericNotifyFromISR+0x26>
    38aa:	83 a5       	ldd	r24, Z+43	; 0x2b
    38ac:	94 a5       	ldd	r25, Z+44	; 0x2c
    38ae:	a5 a5       	ldd	r26, Z+45	; 0x2d
    38b0:	b6 a5       	ldd	r27, Z+46	; 0x2e
    38b2:	e8 01       	movw	r28, r16
    38b4:	88 83       	st	Y, r24
    38b6:	99 83       	std	Y+1, r25	; 0x01
    38b8:	aa 83       	std	Y+2, r26	; 0x02
    38ba:	bb 83       	std	Y+3, r27	; 0x03
    38bc:	87 a5       	ldd	r24, Z+47	; 0x2f
    38be:	92 e0       	ldi	r25, 0x02	; 2
    38c0:	97 a7       	std	Z+47, r25	; 0x2f
    38c2:	22 30       	cpi	r18, 0x02	; 2
    38c4:	b1 f0       	breq	.+44     	; 0x38f2 <xTaskGenericNotifyFromISR+0x5c>
    38c6:	18 f4       	brcc	.+6      	; 0x38ce <xTaskGenericNotifyFromISR+0x38>
    38c8:	21 30       	cpi	r18, 0x01	; 1
    38ca:	31 f0       	breq	.+12     	; 0x38d8 <xTaskGenericNotifyFromISR+0x42>
    38cc:	2a c0       	rjmp	.+84     	; 0x3922 <xTaskGenericNotifyFromISR+0x8c>
    38ce:	23 30       	cpi	r18, 0x03	; 3
    38d0:	e9 f0       	breq	.+58     	; 0x390c <xTaskGenericNotifyFromISR+0x76>
    38d2:	24 30       	cpi	r18, 0x04	; 4
    38d4:	01 f1       	breq	.+64     	; 0x3916 <xTaskGenericNotifyFromISR+0x80>
    38d6:	25 c0       	rjmp	.+74     	; 0x3922 <xTaskGenericNotifyFromISR+0x8c>
    38d8:	03 a5       	ldd	r16, Z+43	; 0x2b
    38da:	14 a5       	ldd	r17, Z+44	; 0x2c
    38dc:	25 a5       	ldd	r18, Z+45	; 0x2d
    38de:	36 a5       	ldd	r19, Z+46	; 0x2e
    38e0:	40 2b       	or	r20, r16
    38e2:	51 2b       	or	r21, r17
    38e4:	62 2b       	or	r22, r18
    38e6:	73 2b       	or	r23, r19
    38e8:	43 a7       	std	Z+43, r20	; 0x2b
    38ea:	54 a7       	std	Z+44, r21	; 0x2c
    38ec:	65 a7       	std	Z+45, r22	; 0x2d
    38ee:	76 a7       	std	Z+46, r23	; 0x2e
    38f0:	18 c0       	rjmp	.+48     	; 0x3922 <xTaskGenericNotifyFromISR+0x8c>
    38f2:	43 a5       	ldd	r20, Z+43	; 0x2b
    38f4:	54 a5       	ldd	r21, Z+44	; 0x2c
    38f6:	65 a5       	ldd	r22, Z+45	; 0x2d
    38f8:	76 a5       	ldd	r23, Z+46	; 0x2e
    38fa:	4f 5f       	subi	r20, 0xFF	; 255
    38fc:	5f 4f       	sbci	r21, 0xFF	; 255
    38fe:	6f 4f       	sbci	r22, 0xFF	; 255
    3900:	7f 4f       	sbci	r23, 0xFF	; 255
    3902:	43 a7       	std	Z+43, r20	; 0x2b
    3904:	54 a7       	std	Z+44, r21	; 0x2c
    3906:	65 a7       	std	Z+45, r22	; 0x2d
    3908:	76 a7       	std	Z+46, r23	; 0x2e
    390a:	0b c0       	rjmp	.+22     	; 0x3922 <xTaskGenericNotifyFromISR+0x8c>
    390c:	43 a7       	std	Z+43, r20	; 0x2b
    390e:	54 a7       	std	Z+44, r21	; 0x2c
    3910:	65 a7       	std	Z+45, r22	; 0x2d
    3912:	76 a7       	std	Z+46, r23	; 0x2e
    3914:	06 c0       	rjmp	.+12     	; 0x3922 <xTaskGenericNotifyFromISR+0x8c>
    3916:	82 30       	cpi	r24, 0x02	; 2
    3918:	d9 f1       	breq	.+118    	; 0x3990 <xTaskGenericNotifyFromISR+0xfa>
    391a:	43 a7       	std	Z+43, r20	; 0x2b
    391c:	54 a7       	std	Z+44, r21	; 0x2c
    391e:	65 a7       	std	Z+45, r22	; 0x2d
    3920:	76 a7       	std	Z+46, r23	; 0x2e
    3922:	81 30       	cpi	r24, 0x01	; 1
    3924:	b9 f5       	brne	.+110    	; 0x3994 <xTaskGenericNotifyFromISR+0xfe>
    3926:	ef 01       	movw	r28, r30
    3928:	80 91 49 18 	lds	r24, 0x1849	; 0x801849 <uxSchedulerSuspended>
    392c:	81 11       	cpse	r24, r1
    392e:	17 c0       	rjmp	.+46     	; 0x395e <xTaskGenericNotifyFromISR+0xc8>
    3930:	8f 01       	movw	r16, r30
    3932:	0e 5f       	subi	r16, 0xFE	; 254
    3934:	1f 4f       	sbci	r17, 0xFF	; 255
    3936:	c8 01       	movw	r24, r16
    3938:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <uxListRemove>
    393c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    393e:	90 91 55 18 	lds	r25, 0x1855	; 0x801855 <uxTopReadyPriority>
    3942:	98 17       	cp	r25, r24
    3944:	10 f4       	brcc	.+4      	; 0x394a <xTaskGenericNotifyFromISR+0xb4>
    3946:	80 93 55 18 	sts	0x1855, r24	; 0x801855 <uxTopReadyPriority>
    394a:	eb e0       	ldi	r30, 0x0B	; 11
    394c:	8e 9f       	mul	r24, r30
    394e:	c0 01       	movw	r24, r0
    3950:	11 24       	eor	r1, r1
    3952:	b8 01       	movw	r22, r16
    3954:	89 56       	subi	r24, 0x69	; 105
    3956:	97 4e       	sbci	r25, 0xE7	; 231
    3958:	0e 94 20 0c 	call	0x1840	; 0x1840 <vListInsertEnd>
    395c:	07 c0       	rjmp	.+14     	; 0x396c <xTaskGenericNotifyFromISR+0xd6>
    395e:	bf 01       	movw	r22, r30
    3960:	62 5f       	subi	r22, 0xF2	; 242
    3962:	7f 4f       	sbci	r23, 0xFF	; 255
    3964:	82 e7       	ldi	r24, 0x72	; 114
    3966:	98 e1       	ldi	r25, 0x18	; 24
    3968:	0e 94 20 0c 	call	0x1840	; 0x1840 <vListInsertEnd>
    396c:	e0 91 d9 18 	lds	r30, 0x18D9	; 0x8018d9 <pxCurrentTCB>
    3970:	f0 91 da 18 	lds	r31, 0x18DA	; 0x8018da <pxCurrentTCB+0x1>
    3974:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3976:	82 8d       	ldd	r24, Z+26	; 0x1a
    3978:	89 17       	cp	r24, r25
    397a:	70 f4       	brcc	.+28     	; 0x3998 <xTaskGenericNotifyFromISR+0x102>
    397c:	e1 14       	cp	r14, r1
    397e:	f1 04       	cpc	r15, r1
    3980:	19 f0       	breq	.+6      	; 0x3988 <xTaskGenericNotifyFromISR+0xf2>
    3982:	81 e0       	ldi	r24, 0x01	; 1
    3984:	e7 01       	movw	r28, r14
    3986:	88 83       	st	Y, r24
    3988:	81 e0       	ldi	r24, 0x01	; 1
    398a:	80 93 52 18 	sts	0x1852, r24	; 0x801852 <xYieldPending>
    398e:	05 c0       	rjmp	.+10     	; 0x399a <xTaskGenericNotifyFromISR+0x104>
    3990:	80 e0       	ldi	r24, 0x00	; 0
    3992:	03 c0       	rjmp	.+6      	; 0x399a <xTaskGenericNotifyFromISR+0x104>
    3994:	81 e0       	ldi	r24, 0x01	; 1
    3996:	01 c0       	rjmp	.+2      	; 0x399a <xTaskGenericNotifyFromISR+0x104>
    3998:	81 e0       	ldi	r24, 0x01	; 1
    399a:	df 91       	pop	r29
    399c:	cf 91       	pop	r28
    399e:	1f 91       	pop	r17
    39a0:	0f 91       	pop	r16
    39a2:	ff 90       	pop	r15
    39a4:	ef 90       	pop	r14
    39a6:	08 95       	ret

000039a8 <xTaskNotifyStateClear>:
    TCB_t *pxTCB;
    BaseType_t xReturn;

        /* If null is passed in here then it is the calling task that is having
        its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    39a8:	00 97       	sbiw	r24, 0x00	; 0
    39aa:	21 f4       	brne	.+8      	; 0x39b4 <xTaskNotifyStateClear+0xc>
    39ac:	80 91 d9 18 	lds	r24, 0x18D9	; 0x8018d9 <pxCurrentTCB>
    39b0:	90 91 da 18 	lds	r25, 0x18DA	; 0x8018da <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    39b4:	0f b6       	in	r0, 0x3f	; 63
    39b6:	f8 94       	cli
    39b8:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
    39ba:	fc 01       	movw	r30, r24
    39bc:	27 a5       	ldd	r18, Z+47	; 0x2f
    39be:	22 30       	cpi	r18, 0x02	; 2
    39c0:	19 f4       	brne	.+6      	; 0x39c8 <xTaskNotifyStateClear+0x20>
            {
                pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    39c2:	17 a6       	std	Z+47, r1	; 0x2f
                xReturn = pdPASS;
    39c4:	81 e0       	ldi	r24, 0x01	; 1
    39c6:	01 c0       	rjmp	.+2      	; 0x39ca <xTaskNotifyStateClear+0x22>
            }
            else
            {
                xReturn = pdFAIL;
    39c8:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    39ca:	0f 90       	pop	r0
    39cc:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    39ce:	08 95       	ret

000039d0 <prvInsertTimerInActiveList>:
    39d0:	cf 92       	push	r12
    39d2:	df 92       	push	r13
    39d4:	ef 92       	push	r14
    39d6:	ff 92       	push	r15
    39d8:	0f 93       	push	r16
    39da:	1f 93       	push	r17
    39dc:	fc 01       	movw	r30, r24
    39de:	42 83       	std	Z+2, r20	; 0x02
    39e0:	53 83       	std	Z+3, r21	; 0x03
    39e2:	64 83       	std	Z+4, r22	; 0x04
    39e4:	75 83       	std	Z+5, r23	; 0x05
    39e6:	93 87       	std	Z+11, r25	; 0x0b
    39e8:	82 87       	std	Z+10, r24	; 0x0a
    39ea:	04 17       	cp	r16, r20
    39ec:	15 07       	cpc	r17, r21
    39ee:	26 07       	cpc	r18, r22
    39f0:	37 07       	cpc	r19, r23
    39f2:	c0 f0       	brcs	.+48     	; 0x3a24 <prvInsertTimerInActiveList+0x54>
    39f4:	0c 19       	sub	r16, r12
    39f6:	1d 09       	sbc	r17, r13
    39f8:	2e 09       	sbc	r18, r14
    39fa:	3f 09       	sbc	r19, r15
    39fc:	86 85       	ldd	r24, Z+14	; 0x0e
    39fe:	97 85       	ldd	r25, Z+15	; 0x0f
    3a00:	a0 89       	ldd	r26, Z+16	; 0x10
    3a02:	b1 89       	ldd	r27, Z+17	; 0x11
    3a04:	08 17       	cp	r16, r24
    3a06:	19 07       	cpc	r17, r25
    3a08:	2a 07       	cpc	r18, r26
    3a0a:	3b 07       	cpc	r19, r27
    3a0c:	00 f5       	brcc	.+64     	; 0x3a4e <prvInsertTimerInActiveList+0x7e>
    3a0e:	bf 01       	movw	r22, r30
    3a10:	6e 5f       	subi	r22, 0xFE	; 254
    3a12:	7f 4f       	sbci	r23, 0xFF	; 255
    3a14:	80 91 e3 18 	lds	r24, 0x18E3	; 0x8018e3 <pxOverflowTimerList>
    3a18:	90 91 e4 18 	lds	r25, 0x18E4	; 0x8018e4 <pxOverflowTimerList+0x1>
    3a1c:	0e 94 41 0c 	call	0x1882	; 0x1882 <vListInsert>
    3a20:	80 e0       	ldi	r24, 0x00	; 0
    3a22:	18 c0       	rjmp	.+48     	; 0x3a54 <prvInsertTimerInActiveList+0x84>
    3a24:	0c 15       	cp	r16, r12
    3a26:	1d 05       	cpc	r17, r13
    3a28:	2e 05       	cpc	r18, r14
    3a2a:	3f 05       	cpc	r19, r15
    3a2c:	28 f4       	brcc	.+10     	; 0x3a38 <prvInsertTimerInActiveList+0x68>
    3a2e:	4c 15       	cp	r20, r12
    3a30:	5d 05       	cpc	r21, r13
    3a32:	6e 05       	cpc	r22, r14
    3a34:	7f 05       	cpc	r23, r15
    3a36:	68 f4       	brcc	.+26     	; 0x3a52 <prvInsertTimerInActiveList+0x82>
    3a38:	bf 01       	movw	r22, r30
    3a3a:	6e 5f       	subi	r22, 0xFE	; 254
    3a3c:	7f 4f       	sbci	r23, 0xFF	; 255
    3a3e:	80 91 e5 18 	lds	r24, 0x18E5	; 0x8018e5 <pxCurrentTimerList>
    3a42:	90 91 e6 18 	lds	r25, 0x18E6	; 0x8018e6 <pxCurrentTimerList+0x1>
    3a46:	0e 94 41 0c 	call	0x1882	; 0x1882 <vListInsert>
    3a4a:	80 e0       	ldi	r24, 0x00	; 0
    3a4c:	03 c0       	rjmp	.+6      	; 0x3a54 <prvInsertTimerInActiveList+0x84>
    3a4e:	81 e0       	ldi	r24, 0x01	; 1
    3a50:	01 c0       	rjmp	.+2      	; 0x3a54 <prvInsertTimerInActiveList+0x84>
    3a52:	81 e0       	ldi	r24, 0x01	; 1
    3a54:	1f 91       	pop	r17
    3a56:	0f 91       	pop	r16
    3a58:	ff 90       	pop	r15
    3a5a:	ef 90       	pop	r14
    3a5c:	df 90       	pop	r13
    3a5e:	cf 90       	pop	r12
    3a60:	08 95       	ret

00003a62 <prvCheckForValidListAndQueue>:
    3a62:	0f b6       	in	r0, 0x3f	; 63
    3a64:	f8 94       	cli
    3a66:	0f 92       	push	r0
    3a68:	80 91 e1 18 	lds	r24, 0x18E1	; 0x8018e1 <xTimerQueue>
    3a6c:	90 91 e2 18 	lds	r25, 0x18E2	; 0x8018e2 <xTimerQueue+0x1>
    3a70:	89 2b       	or	r24, r25
    3a72:	e9 f4       	brne	.+58     	; 0x3aae <prvCheckForValidListAndQueue+0x4c>
    3a74:	82 ef       	ldi	r24, 0xF2	; 242
    3a76:	98 e1       	ldi	r25, 0x18	; 24
    3a78:	0e 94 0b 0c 	call	0x1816	; 0x1816 <vListInitialise>
    3a7c:	87 ee       	ldi	r24, 0xE7	; 231
    3a7e:	98 e1       	ldi	r25, 0x18	; 24
    3a80:	0e 94 0b 0c 	call	0x1816	; 0x1816 <vListInitialise>
    3a84:	82 ef       	ldi	r24, 0xF2	; 242
    3a86:	98 e1       	ldi	r25, 0x18	; 24
    3a88:	90 93 e6 18 	sts	0x18E6, r25	; 0x8018e6 <pxCurrentTimerList+0x1>
    3a8c:	80 93 e5 18 	sts	0x18E5, r24	; 0x8018e5 <pxCurrentTimerList>
    3a90:	87 ee       	ldi	r24, 0xE7	; 231
    3a92:	98 e1       	ldi	r25, 0x18	; 24
    3a94:	90 93 e4 18 	sts	0x18E4, r25	; 0x8018e4 <pxOverflowTimerList+0x1>
    3a98:	80 93 e3 18 	sts	0x18E3, r24	; 0x8018e3 <pxOverflowTimerList>
    3a9c:	40 e0       	ldi	r20, 0x00	; 0
    3a9e:	67 e0       	ldi	r22, 0x07	; 7
    3aa0:	8a e0       	ldi	r24, 0x0A	; 10
    3aa2:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <xQueueGenericCreate>
    3aa6:	90 93 e2 18 	sts	0x18E2, r25	; 0x8018e2 <xTimerQueue+0x1>
    3aaa:	80 93 e1 18 	sts	0x18E1, r24	; 0x8018e1 <xTimerQueue>
    3aae:	0f 90       	pop	r0
    3ab0:	0f be       	out	0x3f, r0	; 63
    3ab2:	08 95       	ret

00003ab4 <xTimerCreateTimerTask>:
    3ab4:	ef 92       	push	r14
    3ab6:	ff 92       	push	r15
    3ab8:	0f 93       	push	r16
    3aba:	d3 df       	rcall	.-90     	; 0x3a62 <prvCheckForValidListAndQueue>
    3abc:	80 91 e1 18 	lds	r24, 0x18E1	; 0x8018e1 <xTimerQueue>
    3ac0:	90 91 e2 18 	lds	r25, 0x18E2	; 0x8018e2 <xTimerQueue+0x1>
    3ac4:	89 2b       	or	r24, r25
    3ac6:	91 f0       	breq	.+36     	; 0x3aec <xTimerCreateTimerTask+0x38>
    3ac8:	0f 2e       	mov	r0, r31
    3aca:	ff ed       	ldi	r31, 0xDF	; 223
    3acc:	ef 2e       	mov	r14, r31
    3ace:	f8 e1       	ldi	r31, 0x18	; 24
    3ad0:	ff 2e       	mov	r15, r31
    3ad2:	f0 2d       	mov	r31, r0
    3ad4:	03 e0       	ldi	r16, 0x03	; 3
    3ad6:	20 e0       	ldi	r18, 0x00	; 0
    3ad8:	30 e0       	ldi	r19, 0x00	; 0
    3ada:	45 e5       	ldi	r20, 0x55	; 85
    3adc:	50 e0       	ldi	r21, 0x00	; 0
    3ade:	61 ed       	ldi	r22, 0xD1	; 209
    3ae0:	74 e0       	ldi	r23, 0x04	; 4
    3ae2:	87 e0       	ldi	r24, 0x07	; 7
    3ae4:	91 e0       	ldi	r25, 0x01	; 1
    3ae6:	0e 94 55 15 	call	0x2aaa	; 0x2aaa <xTaskCreate>
    3aea:	01 c0       	rjmp	.+2      	; 0x3aee <xTimerCreateTimerTask+0x3a>
    3aec:	80 e0       	ldi	r24, 0x00	; 0
    3aee:	0f 91       	pop	r16
    3af0:	ff 90       	pop	r15
    3af2:	ef 90       	pop	r14
    3af4:	08 95       	ret

00003af6 <xTimerGenericCommand>:
    }
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    3af6:	8f 92       	push	r8
    3af8:	9f 92       	push	r9
    3afa:	af 92       	push	r10
    3afc:	bf 92       	push	r11
    3afe:	cf 92       	push	r12
    3b00:	df 92       	push	r13
    3b02:	ef 92       	push	r14
    3b04:	ff 92       	push	r15
    3b06:	0f 93       	push	r16
    3b08:	1f 93       	push	r17
    3b0a:	cf 93       	push	r28
    3b0c:	df 93       	push	r29
    3b0e:	cd b7       	in	r28, 0x3d	; 61
    3b10:	de b7       	in	r29, 0x3e	; 62
    3b12:	27 97       	sbiw	r28, 0x07	; 7
    3b14:	0f b6       	in	r0, 0x3f	; 63
    3b16:	f8 94       	cli
    3b18:	de bf       	out	0x3e, r29	; 62
    3b1a:	0f be       	out	0x3f, r0	; 63
    3b1c:	cd bf       	out	0x3d, r28	; 61

    configASSERT( xTimer );

    /* Send a message to the timer service task to perform a particular action
    on a particular timer definition. */
    if( xTimerQueue != NULL )
    3b1e:	e0 91 e1 18 	lds	r30, 0x18E1	; 0x8018e1 <xTimerQueue>
    3b22:	f0 91 e2 18 	lds	r31, 0x18E2	; 0x8018e2 <xTimerQueue+0x1>
    3b26:	30 97       	sbiw	r30, 0x00	; 0
    3b28:	81 f1       	breq	.+96     	; 0x3b8a <xTimerGenericCommand+0x94>
    {
        /* Send a command to the timer service task to start the xTimer timer. */
        xMessage.xMessageID = xCommandID;
    3b2a:	69 83       	std	Y+1, r22	; 0x01
        xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    3b2c:	2a 83       	std	Y+2, r18	; 0x02
    3b2e:	3b 83       	std	Y+3, r19	; 0x03
    3b30:	4c 83       	std	Y+4, r20	; 0x04
    3b32:	5d 83       	std	Y+5, r21	; 0x05
        xMessage.u.xTimerParameters.pxTimer = xTimer;
    3b34:	9f 83       	std	Y+7, r25	; 0x07
    3b36:	8e 83       	std	Y+6, r24	; 0x06

        if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    3b38:	66 30       	cpi	r22, 0x06	; 6
    3b3a:	f4 f4       	brge	.+60     	; 0x3b78 <xTimerGenericCommand+0x82>
        {
            if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    3b3c:	66 dc       	rcall	.-1844   	; 0x340a <xTaskGetSchedulerState>
    3b3e:	82 30       	cpi	r24, 0x02	; 2
    3b40:	69 f4       	brne	.+26     	; 0x3b5c <xTimerGenericCommand+0x66>
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    3b42:	00 e0       	ldi	r16, 0x00	; 0
    3b44:	a7 01       	movw	r20, r14
    3b46:	96 01       	movw	r18, r12
    3b48:	be 01       	movw	r22, r28
    3b4a:	6f 5f       	subi	r22, 0xFF	; 255
    3b4c:	7f 4f       	sbci	r23, 0xFF	; 255
    3b4e:	80 91 e1 18 	lds	r24, 0x18E1	; 0x8018e1 <xTimerQueue>
    3b52:	90 91 e2 18 	lds	r25, 0x18E2	; 0x8018e2 <xTimerQueue+0x1>
    3b56:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <xQueueGenericSend>
    3b5a:	18 c0       	rjmp	.+48     	; 0x3b8c <xTimerGenericCommand+0x96>
            }
            else
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    3b5c:	00 e0       	ldi	r16, 0x00	; 0
    3b5e:	20 e0       	ldi	r18, 0x00	; 0
    3b60:	30 e0       	ldi	r19, 0x00	; 0
    3b62:	a9 01       	movw	r20, r18
    3b64:	be 01       	movw	r22, r28
    3b66:	6f 5f       	subi	r22, 0xFF	; 255
    3b68:	7f 4f       	sbci	r23, 0xFF	; 255
    3b6a:	80 91 e1 18 	lds	r24, 0x18E1	; 0x8018e1 <xTimerQueue>
    3b6e:	90 91 e2 18 	lds	r25, 0x18E2	; 0x8018e2 <xTimerQueue+0x1>
    3b72:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <xQueueGenericSend>
    3b76:	0a c0       	rjmp	.+20     	; 0x3b8c <xTimerGenericCommand+0x96>
            }
        }
        else
        {
            xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    3b78:	20 e0       	ldi	r18, 0x00	; 0
    3b7a:	a8 01       	movw	r20, r16
    3b7c:	be 01       	movw	r22, r28
    3b7e:	6f 5f       	subi	r22, 0xFF	; 255
    3b80:	7f 4f       	sbci	r23, 0xFF	; 255
    3b82:	cf 01       	movw	r24, r30
    3b84:	0e 94 18 10 	call	0x2030	; 0x2030 <xQueueGenericSendFromISR>
    3b88:	01 c0       	rjmp	.+2      	; 0x3b8c <xTimerGenericCommand+0x96>
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
    3b8a:	80 e0       	ldi	r24, 0x00	; 0
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xReturn;
}
    3b8c:	27 96       	adiw	r28, 0x07	; 7
    3b8e:	0f b6       	in	r0, 0x3f	; 63
    3b90:	f8 94       	cli
    3b92:	de bf       	out	0x3e, r29	; 62
    3b94:	0f be       	out	0x3f, r0	; 63
    3b96:	cd bf       	out	0x3d, r28	; 61
    3b98:	df 91       	pop	r29
    3b9a:	cf 91       	pop	r28
    3b9c:	1f 91       	pop	r17
    3b9e:	0f 91       	pop	r16
    3ba0:	ff 90       	pop	r15
    3ba2:	ef 90       	pop	r14
    3ba4:	df 90       	pop	r13
    3ba6:	cf 90       	pop	r12
    3ba8:	bf 90       	pop	r11
    3baa:	af 90       	pop	r10
    3bac:	9f 90       	pop	r9
    3bae:	8f 90       	pop	r8
    3bb0:	08 95       	ret

00003bb2 <prvSampleTimeNow>:
    return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    3bb2:	2f 92       	push	r2
    3bb4:	3f 92       	push	r3
    3bb6:	4f 92       	push	r4
    3bb8:	5f 92       	push	r5
    3bba:	6f 92       	push	r6
    3bbc:	7f 92       	push	r7
    3bbe:	8f 92       	push	r8
    3bc0:	9f 92       	push	r9
    3bc2:	af 92       	push	r10
    3bc4:	bf 92       	push	r11
    3bc6:	cf 92       	push	r12
    3bc8:	df 92       	push	r13
    3bca:	ef 92       	push	r14
    3bcc:	ff 92       	push	r15
    3bce:	0f 93       	push	r16
    3bd0:	1f 93       	push	r17
    3bd2:	cf 93       	push	r28
    3bd4:	df 93       	push	r29
    3bd6:	1c 01       	movw	r2, r24
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

    xTimeNow = xTaskGetTickCount();
    3bd8:	cb d8       	rcall	.-3690   	; 0x2d70 <xTaskGetTickCount>
    3bda:	2b 01       	movw	r4, r22
    3bdc:	3c 01       	movw	r6, r24

    if( xTimeNow < xLastTime )
    3bde:	80 91 db 18 	lds	r24, 0x18DB	; 0x8018db <xLastTime.2432>
    3be2:	90 91 dc 18 	lds	r25, 0x18DC	; 0x8018dc <xLastTime.2432+0x1>
    3be6:	a0 91 dd 18 	lds	r26, 0x18DD	; 0x8018dd <xLastTime.2432+0x2>
    3bea:	b0 91 de 18 	lds	r27, 0x18DE	; 0x8018de <xLastTime.2432+0x3>
    3bee:	48 16       	cp	r4, r24
    3bf0:	59 06       	cpc	r5, r25
    3bf2:	6a 06       	cpc	r6, r26
    3bf4:	7b 06       	cpc	r7, r27
    3bf6:	08 f0       	brcs	.+2      	; 0x3bfa <prvSampleTimeNow+0x48>
    3bf8:	53 c0       	rjmp	.+166    	; 0x3ca0 <prvSampleTimeNow+0xee>
    3bfa:	3b c0       	rjmp	.+118    	; 0x3c72 <prvSampleTimeNow+0xc0>
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    {
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    3bfc:	07 80       	ldd	r0, Z+7	; 0x07
    3bfe:	f0 85       	ldd	r31, Z+8	; 0x08
    3c00:	e0 2d       	mov	r30, r0
    3c02:	80 80       	ld	r8, Z
    3c04:	91 80       	ldd	r9, Z+1	; 0x01
    3c06:	a2 80       	ldd	r10, Z+2	; 0x02
    3c08:	b3 80       	ldd	r11, Z+3	; 0x03

        /* Remove the timer from the list. */
        pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    3c0a:	c0 85       	ldd	r28, Z+8	; 0x08
    3c0c:	d1 85       	ldd	r29, Z+9	; 0x09
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3c0e:	8e 01       	movw	r16, r28
    3c10:	0e 5f       	subi	r16, 0xFE	; 254
    3c12:	1f 4f       	sbci	r17, 0xFF	; 255
    3c14:	c8 01       	movw	r24, r16
    3c16:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* Execute its callback, then send a command to restart the timer if
        it is an auto-reload timer.  It cannot be restarted here as the lists
        have not yet been switched. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3c1a:	ec 89       	ldd	r30, Y+20	; 0x14
    3c1c:	fd 89       	ldd	r31, Y+21	; 0x15
    3c1e:	ce 01       	movw	r24, r28
    3c20:	19 95       	eicall

        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    3c22:	8f 89       	ldd	r24, Y+23	; 0x17
    3c24:	82 ff       	sbrs	r24, 2
    3c26:	25 c0       	rjmp	.+74     	; 0x3c72 <prvSampleTimeNow+0xc0>
            the timer going into the same timer list then it has already expired
            and the timer should be re-inserted into the current list so it is
            processed again within this loop.  Otherwise a command should be sent
            to restart the timer to ensure it is only inserted into a list after
            the lists have been swapped. */
            xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    3c28:	8e 85       	ldd	r24, Y+14	; 0x0e
    3c2a:	9f 85       	ldd	r25, Y+15	; 0x0f
    3c2c:	a8 89       	ldd	r26, Y+16	; 0x10
    3c2e:	b9 89       	ldd	r27, Y+17	; 0x11
    3c30:	88 0d       	add	r24, r8
    3c32:	99 1d       	adc	r25, r9
    3c34:	aa 1d       	adc	r26, r10
    3c36:	bb 1d       	adc	r27, r11
            if( xReloadTime > xNextExpireTime )
    3c38:	88 16       	cp	r8, r24
    3c3a:	99 06       	cpc	r9, r25
    3c3c:	aa 06       	cpc	r10, r26
    3c3e:	bb 06       	cpc	r11, r27
    3c40:	70 f4       	brcc	.+28     	; 0x3c5e <prvSampleTimeNow+0xac>
            {
                listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    3c42:	8a 83       	std	Y+2, r24	; 0x02
    3c44:	9b 83       	std	Y+3, r25	; 0x03
    3c46:	ac 83       	std	Y+4, r26	; 0x04
    3c48:	bd 83       	std	Y+5, r27	; 0x05
                listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    3c4a:	db 87       	std	Y+11, r29	; 0x0b
    3c4c:	ca 87       	std	Y+10, r28	; 0x0a
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    3c4e:	b8 01       	movw	r22, r16
    3c50:	80 91 e5 18 	lds	r24, 0x18E5	; 0x8018e5 <pxCurrentTimerList>
    3c54:	90 91 e6 18 	lds	r25, 0x18E6	; 0x8018e6 <pxCurrentTimerList+0x1>
    3c58:	0e 94 41 0c 	call	0x1882	; 0x1882 <vListInsert>
    3c5c:	0a c0       	rjmp	.+20     	; 0x3c72 <prvSampleTimeNow+0xc0>
            }
            else
            {
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    3c5e:	c1 2c       	mov	r12, r1
    3c60:	d1 2c       	mov	r13, r1
    3c62:	76 01       	movw	r14, r12
    3c64:	00 e0       	ldi	r16, 0x00	; 0
    3c66:	10 e0       	ldi	r17, 0x00	; 0
    3c68:	a5 01       	movw	r20, r10
    3c6a:	94 01       	movw	r18, r8
    3c6c:	60 e0       	ldi	r22, 0x00	; 0
    3c6e:	ce 01       	movw	r24, r28
    3c70:	42 df       	rcall	.-380    	; 0x3af6 <xTimerGenericCommand>

    /* The tick count has overflowed.  The timer lists must be switched.
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    3c72:	e0 91 e5 18 	lds	r30, 0x18E5	; 0x8018e5 <pxCurrentTimerList>
    3c76:	f0 91 e6 18 	lds	r31, 0x18E6	; 0x8018e6 <pxCurrentTimerList+0x1>
    3c7a:	80 81       	ld	r24, Z
    3c7c:	81 11       	cpse	r24, r1
    3c7e:	be cf       	rjmp	.-132    	; 0x3bfc <prvSampleTimeNow+0x4a>
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxTemp = pxCurrentTimerList;
    pxCurrentTimerList = pxOverflowTimerList;
    3c80:	80 91 e3 18 	lds	r24, 0x18E3	; 0x8018e3 <pxOverflowTimerList>
    3c84:	90 91 e4 18 	lds	r25, 0x18E4	; 0x8018e4 <pxOverflowTimerList+0x1>
    3c88:	90 93 e6 18 	sts	0x18E6, r25	; 0x8018e6 <pxCurrentTimerList+0x1>
    3c8c:	80 93 e5 18 	sts	0x18E5, r24	; 0x8018e5 <pxCurrentTimerList>
    pxOverflowTimerList = pxTemp;
    3c90:	f0 93 e4 18 	sts	0x18E4, r31	; 0x8018e4 <pxOverflowTimerList+0x1>
    3c94:	e0 93 e3 18 	sts	0x18E3, r30	; 0x8018e3 <pxOverflowTimerList>
    xTimeNow = xTaskGetTickCount();

    if( xTimeNow < xLastTime )
    {
        prvSwitchTimerLists();
        *pxTimerListsWereSwitched = pdTRUE;
    3c98:	81 e0       	ldi	r24, 0x01	; 1
    3c9a:	f1 01       	movw	r30, r2
    3c9c:	80 83       	st	Z, r24
    3c9e:	02 c0       	rjmp	.+4      	; 0x3ca4 <prvSampleTimeNow+0xf2>
    }
    else
    {
        *pxTimerListsWereSwitched = pdFALSE;
    3ca0:	f1 01       	movw	r30, r2
    3ca2:	10 82       	st	Z, r1
    }

    xLastTime = xTimeNow;
    3ca4:	40 92 db 18 	sts	0x18DB, r4	; 0x8018db <xLastTime.2432>
    3ca8:	50 92 dc 18 	sts	0x18DC, r5	; 0x8018dc <xLastTime.2432+0x1>
    3cac:	60 92 dd 18 	sts	0x18DD, r6	; 0x8018dd <xLastTime.2432+0x2>
    3cb0:	70 92 de 18 	sts	0x18DE, r7	; 0x8018de <xLastTime.2432+0x3>

    return xTimeNow;
}
    3cb4:	c3 01       	movw	r24, r6
    3cb6:	b2 01       	movw	r22, r4
    3cb8:	df 91       	pop	r29
    3cba:	cf 91       	pop	r28
    3cbc:	1f 91       	pop	r17
    3cbe:	0f 91       	pop	r16
    3cc0:	ff 90       	pop	r15
    3cc2:	ef 90       	pop	r14
    3cc4:	df 90       	pop	r13
    3cc6:	cf 90       	pop	r12
    3cc8:	bf 90       	pop	r11
    3cca:	af 90       	pop	r10
    3ccc:	9f 90       	pop	r9
    3cce:	8f 90       	pop	r8
    3cd0:	7f 90       	pop	r7
    3cd2:	6f 90       	pop	r6
    3cd4:	5f 90       	pop	r5
    3cd6:	4f 90       	pop	r4
    3cd8:	3f 90       	pop	r3
    3cda:	2f 90       	pop	r2
    3cdc:	08 95       	ret

00003cde <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    3cde:	08 95       	ret

00003ce0 <vApplicationMallocFailedHook>:
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    3ce0:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    3ce2:	2f 9a       	sbi	0x05, 7	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3ce4:	2f ef       	ldi	r18, 0xFF	; 255
    3ce6:	80 e7       	ldi	r24, 0x70	; 112
    3ce8:	92 e0       	ldi	r25, 0x02	; 2
    3cea:	21 50       	subi	r18, 0x01	; 1
    3cec:	80 40       	sbci	r24, 0x00	; 0
    3cee:	90 40       	sbci	r25, 0x00	; 0
    3cf0:	e1 f7       	brne	.-8      	; 0x3cea <vApplicationMallocFailedHook+0xa>
    3cf2:	00 c0       	rjmp	.+0      	; 0x3cf4 <vApplicationMallocFailedHook+0x14>
    3cf4:	00 00       	nop
    for(;;)
    {
        _delay_ms(50);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED fast blink.
    3cf6:	1f 9a       	sbi	0x03, 7	; 3
    3cf8:	f5 cf       	rjmp	.-22     	; 0x3ce4 <vApplicationMallocFailedHook+0x4>

00003cfa <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook( TaskHandle_t xTask, portCHAR *pcTaskName ) __attribute__((weak));

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)), portCHAR *pcTaskName __attribute__((unused))  )
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    3cfa:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    3cfc:	2f 9a       	sbi	0x05, 7	; 5
    3cfe:	2f ef       	ldi	r18, 0xFF	; 255
    3d00:	87 ea       	ldi	r24, 0xA7	; 167
    3d02:	91 e6       	ldi	r25, 0x61	; 97
    3d04:	21 50       	subi	r18, 0x01	; 1
    3d06:	80 40       	sbci	r24, 0x00	; 0
    3d08:	90 40       	sbci	r25, 0x00	; 0
    3d0a:	e1 f7       	brne	.-8      	; 0x3d04 <vApplicationStackOverflowHook+0xa>
    3d0c:	00 c0       	rjmp	.+0      	; 0x3d0e <vApplicationStackOverflowHook+0x14>
    3d0e:	00 00       	nop
    for(;;)
    {
        _delay_ms(2000);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED slow blink.
    3d10:	1f 9a       	sbi	0x03, 7	; 3
    3d12:	f5 cf       	rjmp	.-22     	; 0x3cfe <vApplicationStackOverflowHook+0x4>

00003d14 <create_tasks_and_semaphores>:
// Prototype for LoRaWAN handler
void lora_handler_create(UBaseType_t lora_handler_task_priority);

/*-----------------------------------------------------------*/
void create_tasks_and_semaphores(void)
{
    3d14:	8f 92       	push	r8
    3d16:	9f 92       	push	r9
    3d18:	af 92       	push	r10
    3d1a:	bf 92       	push	r11
    3d1c:	cf 92       	push	r12
    3d1e:	df 92       	push	r13
    3d20:	ef 92       	push	r14
    3d22:	ff 92       	push	r15
    3d24:	0f 93       	push	r16
    3d26:	1f 93       	push	r17
    3d28:	cf 93       	push	r28
    3d2a:	df 93       	push	r29
	//xMessageBuffer = xMessageBufferCreate(100);
	//_semaphore = xSemaphoreCreateMutex();
	
	//_downlinkMessagebuffer = xMessageBufferCreate(sizeof(lora_payload_t)*2);
	
	configuration_create(_semaphore);
    3d2c:	80 91 5b 1a 	lds	r24, 0x1A5B	; 0x801a5b <_semaphore>
    3d30:	90 91 5c 1a 	lds	r25, 0x1A5C	; 0x801a5c <_semaphore+0x1>
    3d34:	0e 94 43 03 	call	0x686	; 0x686 <configuration_create>
	
	
	
	humAndTempReader_t humidityAndTemperature = humAndTempReader_create(TASK_HUMIDITY_SENSOR_PRIORITY, HUMIDITY_TASK_STACK, 
    3d38:	e0 90 5f 1a 	lds	r14, 0x1A5F	; 0x801a5f <readyEventGroup>
    3d3c:	f0 90 60 1a 	lds	r15, 0x1A60	; 0x801a60 <readyEventGroup+0x1>
    3d40:	40 91 77 1a 	lds	r20, 0x1A77	; 0x801a77 <startMeasureEventGroup>
    3d44:	50 91 78 1a 	lds	r21, 0x1A78	; 0x801a78 <startMeasureEventGroup+0x1>
    3d48:	a1 2c       	mov	r10, r1
    3d4a:	b1 2c       	mov	r11, r1
    3d4c:	65 01       	movw	r12, r10
    3d4e:	68 94       	set
    3d50:	a4 f8       	bld	r10, 4
    3d52:	01 e0       	ldi	r16, 0x01	; 1
    3d54:	10 e0       	ldi	r17, 0x00	; 0
    3d56:	20 e0       	ldi	r18, 0x00	; 0
    3d58:	30 e0       	ldi	r19, 0x00	; 0
    3d5a:	60 ec       	ldi	r22, 0xC0	; 192
    3d5c:	82 e0       	ldi	r24, 0x02	; 2
    3d5e:	0e 94 8b 06 	call	0xd16	; 0xd16 <humAndTempReader_create>
    3d62:	c8 2f       	mov	r28, r24
    3d64:	d9 2f       	mov	r29, r25
	startMeasureEventGroup, BIT_MEASURE_HUMIDITY, readyEventGroup, BIT_DONE_MEASURE_HUMIDITY);
	
	co2reader_t co2reader = co2Reader_create(TASK_CO2_SENSOR_PRIORITY, CO2_TASK_STACK, startMeasureEventGroup, BIT_MEASURE_CO2,
    3d66:	e0 90 5f 1a 	lds	r14, 0x1A5F	; 0x801a5f <readyEventGroup>
    3d6a:	f0 90 60 1a 	lds	r15, 0x1A60	; 0x801a60 <readyEventGroup+0x1>
    3d6e:	40 91 77 1a 	lds	r20, 0x1A77	; 0x801a77 <startMeasureEventGroup>
    3d72:	50 91 78 1a 	lds	r21, 0x1A78	; 0x801a78 <startMeasureEventGroup+0x1>
    3d76:	a1 2c       	mov	r10, r1
    3d78:	b1 2c       	mov	r11, r1
    3d7a:	65 01       	movw	r12, r10
    3d7c:	68 94       	set
    3d7e:	a5 f8       	bld	r10, 5
    3d80:	08 e0       	ldi	r16, 0x08	; 8
    3d82:	10 e0       	ldi	r17, 0x00	; 0
    3d84:	20 e0       	ldi	r18, 0x00	; 0
    3d86:	30 e0       	ldi	r19, 0x00	; 0
    3d88:	60 ec       	ldi	r22, 0xC0	; 192
    3d8a:	82 e0       	ldi	r24, 0x02	; 2
    3d8c:	0e 94 86 02 	call	0x50c	; 0x50c <co2Reader_create>
    3d90:	4c 01       	movw	r8, r24
	
	//co2reader_t co2reader = NULL;
	
	
	
	soundReader_t soundReader = soundReader_create(TASK_SOUND_SENSOR_PRIORITY, SOUND_TASK_STACK, startMeasureEventGroup, BIT_MEASURE_SOUND,
    3d92:	e0 90 5f 1a 	lds	r14, 0x1A5F	; 0x801a5f <readyEventGroup>
    3d96:	f0 90 60 1a 	lds	r15, 0x1A60	; 0x801a60 <readyEventGroup+0x1>
    3d9a:	40 91 77 1a 	lds	r20, 0x1A77	; 0x801a77 <startMeasureEventGroup>
    3d9e:	50 91 78 1a 	lds	r21, 0x1A78	; 0x801a78 <startMeasureEventGroup+0x1>
    3da2:	a1 2c       	mov	r10, r1
    3da4:	b1 2c       	mov	r11, r1
    3da6:	65 01       	movw	r12, r10
    3da8:	68 94       	set
    3daa:	a6 f8       	bld	r10, 6
    3dac:	04 e0       	ldi	r16, 0x04	; 4
    3dae:	10 e0       	ldi	r17, 0x00	; 0
    3db0:	20 e0       	ldi	r18, 0x00	; 0
    3db2:	30 e0       	ldi	r19, 0x00	; 0
    3db4:	60 ec       	ldi	r22, 0xC0	; 192
    3db6:	82 e0       	ldi	r24, 0x02	; 2
    3db8:	0e 94 6b 07 	call	0xed6	; 0xed6 <soundReader_create>
    3dbc:	18 2f       	mov	r17, r24
    3dbe:	09 2f       	mov	r16, r25
	readyEventGroup, BIT_DONE_MEASURE_SOUND);	
	//soundReader_t soundReader = NULL;
	
	servo_initialise();
    3dc0:	0e 94 5e 07 	call	0xebc	; 0xebc <servo_initialise>
	
	device_create(TASK_DEVICE_PRIORITY, DEVICE_TASK_STACK, startMeasureEventGroup, ALL_BIT_MEASURE,
    3dc4:	e0 90 5f 1a 	lds	r14, 0x1A5F	; 0x801a5f <readyEventGroup>
    3dc8:	f0 90 60 1a 	lds	r15, 0x1A60	; 0x801a60 <readyEventGroup+0x1>
    3dcc:	40 91 77 1a 	lds	r20, 0x1A77	; 0x801a77 <startMeasureEventGroup>
    3dd0:	50 91 78 1a 	lds	r21, 0x1A78	; 0x801a78 <startMeasureEventGroup+0x1>
    3dd4:	80 91 5a 1a 	lds	r24, 0x1A5A	; 0x801a5a <xMessageBuffer+0x1>
    3dd8:	8f 93       	push	r24
    3dda:	80 91 59 1a 	lds	r24, 0x1A59	; 0x801a59 <xMessageBuffer>
    3dde:	8f 93       	push	r24
    3de0:	0f 93       	push	r16
    3de2:	1f 93       	push	r17
    3de4:	df 93       	push	r29
    3de6:	cf 93       	push	r28
    3de8:	0f 2e       	mov	r0, r31
    3dea:	f0 e7       	ldi	r31, 0x70	; 112
    3dec:	af 2e       	mov	r10, r31
    3dee:	b1 2c       	mov	r11, r1
    3df0:	c1 2c       	mov	r12, r1
    3df2:	d1 2c       	mov	r13, r1
    3df4:	f0 2d       	mov	r31, r0
    3df6:	0d e0       	ldi	r16, 0x0D	; 13
    3df8:	10 e0       	ldi	r17, 0x00	; 0
    3dfa:	20 e0       	ldi	r18, 0x00	; 0
    3dfc:	30 e0       	ldi	r19, 0x00	; 0
    3dfe:	60 ec       	ldi	r22, 0xC0	; 192
    3e00:	84 e0       	ldi	r24, 0x04	; 4
    3e02:	0e 94 51 04 	call	0x8a2	; 0x8a2 <device_create>
	readyEventGroup, ALL_BIT_DONE_MEASURE, co2reader, humidityAndTemperature,soundReader, xMessageBuffer);
	
	lora_UpLinkHandler_create(TASK_LORA_DRIVER_PRIORITY,xMessageBuffer);
    3e06:	60 91 59 1a 	lds	r22, 0x1A59	; 0x801a59 <xMessageBuffer>
    3e0a:	70 91 5a 1a 	lds	r23, 0x1A5A	; 0x801a5a <xMessageBuffer+0x1>
    3e0e:	81 e0       	ldi	r24, 0x01	; 1
    3e10:	0e 94 27 08 	call	0x104e	; 0x104e <lora_UpLinkHandler_create>
	lora_DownLinkHandler_create(TASK_LORA_DRIVER_PRIORITYDOWN,_downlinkMessagebuffer);
    3e14:	60 91 5d 1a 	lds	r22, 0x1A5D	; 0x801a5d <_downlinkMessagebuffer>
    3e18:	70 91 5e 1a 	lds	r23, 0x1A5E	; 0x801a5e <_downlinkMessagebuffer+0x1>
    3e1c:	81 e0       	ldi	r24, 0x01	; 1
    3e1e:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <lora_DownLinkHandler_create>
}
    3e22:	0f 90       	pop	r0
    3e24:	0f 90       	pop	r0
    3e26:	0f 90       	pop	r0
    3e28:	0f 90       	pop	r0
    3e2a:	0f 90       	pop	r0
    3e2c:	0f 90       	pop	r0
    3e2e:	df 91       	pop	r29
    3e30:	cf 91       	pop	r28
    3e32:	1f 91       	pop	r17
    3e34:	0f 91       	pop	r16
    3e36:	ff 90       	pop	r15
    3e38:	ef 90       	pop	r14
    3e3a:	df 90       	pop	r13
    3e3c:	cf 90       	pop	r12
    3e3e:	bf 90       	pop	r11
    3e40:	af 90       	pop	r10
    3e42:	9f 90       	pop	r9
    3e44:	8f 90       	pop	r8
    3e46:	08 95       	ret

00003e48 <initialiseSystem>:

/*-----------------------------------------------------------*/
void initialiseSystem()
{
	startMeasureEventGroup = xEventGroupCreate();
    3e48:	0e 94 68 09 	call	0x12d0	; 0x12d0 <xEventGroupCreate>
    3e4c:	90 93 78 1a 	sts	0x1A78, r25	; 0x801a78 <startMeasureEventGroup+0x1>
    3e50:	80 93 77 1a 	sts	0x1A77, r24	; 0x801a77 <startMeasureEventGroup>
	readyEventGroup = xEventGroupCreate();
    3e54:	0e 94 68 09 	call	0x12d0	; 0x12d0 <xEventGroupCreate>
    3e58:	90 93 60 1a 	sts	0x1A60, r25	; 0x801a60 <readyEventGroup+0x1>
    3e5c:	80 93 5f 1a 	sts	0x1A5F, r24	; 0x801a5f <readyEventGroup>

	xMessageBuffer = xMessageBufferCreate(100);
    3e60:	41 e0       	ldi	r20, 0x01	; 1
    3e62:	60 e0       	ldi	r22, 0x00	; 0
    3e64:	70 e0       	ldi	r23, 0x00	; 0
    3e66:	84 e6       	ldi	r24, 0x64	; 100
    3e68:	90 e0       	ldi	r25, 0x00	; 0
    3e6a:	0e 94 ba 12 	call	0x2574	; 0x2574 <xStreamBufferGenericCreate>
    3e6e:	90 93 5a 1a 	sts	0x1A5A, r25	; 0x801a5a <xMessageBuffer+0x1>
    3e72:	80 93 59 1a 	sts	0x1A59, r24	; 0x801a59 <xMessageBuffer>
	_semaphore = xSemaphoreCreateMutex();
    3e76:	81 e0       	ldi	r24, 0x01	; 1
    3e78:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <xQueueCreateMutex>
    3e7c:	90 93 5c 1a 	sts	0x1A5C, r25	; 0x801a5c <_semaphore+0x1>
    3e80:	80 93 5b 1a 	sts	0x1A5B, r24	; 0x801a5b <_semaphore>
	_downlinkMessagebuffer = xMessageBufferCreate(sizeof(lora_payload_t)*2);
    3e84:	41 e0       	ldi	r20, 0x01	; 1
    3e86:	60 e0       	ldi	r22, 0x00	; 0
    3e88:	70 e0       	ldi	r23, 0x00	; 0
    3e8a:	8c e2       	ldi	r24, 0x2C	; 44
    3e8c:	90 e0       	ldi	r25, 0x00	; 0
    3e8e:	0e 94 ba 12 	call	0x2574	; 0x2574 <xStreamBufferGenericCreate>
    3e92:	90 93 5e 1a 	sts	0x1A5E, r25	; 0x801a5e <_downlinkMessagebuffer+0x1>
    3e96:	80 93 5d 1a 	sts	0x1A5D, r24	; 0x801a5d <_downlinkMessagebuffer>
	// Set output ports for leds used in the example
	DDRA |= _BV(DDA0) | _BV(DDA7);
    3e9a:	81 b1       	in	r24, 0x01	; 1
    3e9c:	81 68       	ori	r24, 0x81	; 129
    3e9e:	81 b9       	out	0x01, r24	; 1
	//// Initialise the trace-driver to be used together with the R2R-Network
	//trace_init();
	// Make it possible to use stdio on COM port 0 (USB) on Arduino board - Setting 57600,8,N,1
	stdioCreate(ser_USART0);
    3ea0:	80 e0       	ldi	r24, 0x00	; 0
    3ea2:	0e 94 5a 2b 	call	0x56b4	; 0x56b4 <stdioCreate>
	
	
	
	// vvvvvvvvvvvvvvvvv BELOW IS LoRaWAN initialisation vvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
	// Initialise the HAL layer and use 5 for LED driver priority
	hal_create(5);
    3ea6:	85 e0       	ldi	r24, 0x05	; 5
    3ea8:	11 d0       	rcall	.+34     	; 0x3ecc <hal_create>
	// Initialise the LoRaWAN driver with a down-link buffer
	
	
	lora_driver_create(LORA_USART, _downlinkMessagebuffer);
    3eaa:	60 91 5d 1a 	lds	r22, 0x1A5D	; 0x801a5d <_downlinkMessagebuffer>
    3eae:	70 91 5e 1a 	lds	r23, 0x1A5E	; 0x801a5e <_downlinkMessagebuffer+0x1>
    3eb2:	81 e0       	ldi	r24, 0x01	; 1
	// Create LoRaWAN task and start it up with priority 3 
	
	hih8120Create();
    3eb4:	c3 d3       	rcall	.+1926   	; 0x463c <lora_driver_create>
    3eb6:	69 c0       	rjmp	.+210    	; 0x3f8a <hih8120Create>
    3eb8:	08 95       	ret

00003eba <main>:
	
}
/*-----------------------------------------------------------*/
int main(void)
{
	initialiseSystem(); // Must be done as the very first thing!!
    3eba:	c6 df       	rcall	.-116    	; 0x3e48 <initialiseSystem>
	create_tasks_and_semaphores();
    3ebc:	2b df       	rcall	.-426    	; 0x3d14 <create_tasks_and_semaphores>
    3ebe:	89 ed       	ldi	r24, 0xD9	; 217
	printf("Program Started!!\n");
    3ec0:	94 e0       	ldi	r25, 0x04	; 4
    3ec2:	0e 94 83 31 	call	0x6306	; 0x6306 <puts>
    3ec6:	0e 94 76 16 	call	0x2cec	; 0x2cec <vTaskStartScheduler>
	vTaskStartScheduler(); // Initialise and run the freeRTOS scheduler. Execution should never return from here.
    3eca:	ff cf       	rjmp	.-2      	; 0x3eca <main+0x10>

00003ecc <hal_create>:
    3ecc:	e9 e7       	ldi	r30, 0x79	; 121
    3ece:	fa e1       	ldi	r31, 0x1A	; 26
    3ed0:	23 e7       	ldi	r18, 0x73	; 115
    3ed2:	36 e2       	ldi	r19, 0x26	; 38
    3ed4:	31 83       	std	Z+1, r19	; 0x01
    3ed6:	20 83       	st	Z, r18
    3ed8:	26 e7       	ldi	r18, 0x76	; 118
    3eda:	36 e2       	ldi	r19, 0x26	; 38
    3edc:	33 83       	std	Z+3, r19	; 0x03
    3ede:	22 83       	std	Z+2, r18	; 0x02
    3ee0:	21 e8       	ldi	r18, 0x81	; 129
    3ee2:	36 e2       	ldi	r19, 0x26	; 38
    3ee4:	35 83       	std	Z+5, r19	; 0x05
    3ee6:	24 83       	std	Z+4, r18	; 0x04
    3ee8:	25 e8       	ldi	r18, 0x85	; 133
    3eea:	36 e2       	ldi	r19, 0x26	; 38
    3eec:	37 83       	std	Z+7, r19	; 0x07
    3eee:	26 83       	std	Z+6, r18	; 0x06
    3ef0:	2b e8       	ldi	r18, 0x8B	; 139
    3ef2:	36 e2       	ldi	r19, 0x26	; 38
    3ef4:	31 87       	std	Z+9, r19	; 0x09
    3ef6:	20 87       	std	Z+8, r18	; 0x08
    3ef8:	27 e9       	ldi	r18, 0x97	; 151
    3efa:	36 e2       	ldi	r19, 0x26	; 38
    3efc:	33 87       	std	Z+11, r19	; 0x0b
    3efe:	22 87       	std	Z+10, r18	; 0x0a
    3f00:	2c e9       	ldi	r18, 0x9C	; 156
    3f02:	36 e2       	ldi	r19, 0x26	; 38
    3f04:	35 87       	std	Z+13, r19	; 0x0d
    3f06:	24 87       	std	Z+12, r18	; 0x0c
    3f08:	28 ea       	ldi	r18, 0xA8	; 168
    3f0a:	36 e2       	ldi	r19, 0x26	; 38
    3f0c:	37 87       	std	Z+15, r19	; 0x0f
    3f0e:	26 87       	std	Z+14, r18	; 0x0e
    3f10:	28 e8       	ldi	r18, 0x88	; 136
    3f12:	36 e2       	ldi	r19, 0x26	; 38
    3f14:	31 8b       	std	Z+17, r19	; 0x11
    3f16:	20 8b       	std	Z+16, r18	; 0x10
    3f18:	2d ea       	ldi	r18, 0xAD	; 173
    3f1a:	36 e2       	ldi	r19, 0x26	; 38
    3f1c:	33 8b       	std	Z+19, r19	; 0x13
    3f1e:	22 8b       	std	Z+18, r18	; 0x12
    3f20:	2a eb       	ldi	r18, 0xBA	; 186
    3f22:	36 e2       	ldi	r19, 0x26	; 38
    3f24:	35 8b       	std	Z+21, r19	; 0x15
    3f26:	24 8b       	std	Z+20, r18	; 0x14
    3f28:	68 2f       	mov	r22, r24
    3f2a:	cf 01       	movw	r24, r30
    3f2c:	53 c1       	rjmp	.+678    	; 0x41d4 <led_create>
    3f2e:	08 95       	ret

00003f30 <_hihTwiCallback>:
    3f30:	65 30       	cpi	r22, 0x05	; 5
    3f32:	f1 f4       	brne	.+60     	; 0x3f70 <_hihTwiCallback+0x40>
    3f34:	fa 01       	movw	r30, r20
    3f36:	80 81       	ld	r24, Z
    3f38:	8f 73       	andi	r24, 0x3F	; 63
    3f3a:	90 e0       	ldi	r25, 0x00	; 0
    3f3c:	98 2f       	mov	r25, r24
    3f3e:	88 27       	eor	r24, r24
    3f40:	21 81       	ldd	r18, Z+1	; 0x01
    3f42:	82 2b       	or	r24, r18
    3f44:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <_hum+0x1>
    3f48:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <_hum>
    3f4c:	82 81       	ldd	r24, Z+2	; 0x02
    3f4e:	f0 e4       	ldi	r31, 0x40	; 64
    3f50:	8f 9f       	mul	r24, r31
    3f52:	c0 01       	movw	r24, r0
    3f54:	11 24       	eor	r1, r1
    3f56:	fa 01       	movw	r30, r20
    3f58:	23 81       	ldd	r18, Z+3	; 0x03
    3f5a:	26 95       	lsr	r18
    3f5c:	26 95       	lsr	r18
    3f5e:	82 2b       	or	r24, r18
    3f60:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <_temp+0x1>
    3f64:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <_temp>
    3f68:	81 e0       	ldi	r24, 0x01	; 1
    3f6a:	80 93 fd 18 	sts	0x18FD, r24	; 0x8018fd <_measuringIsReady>
    3f6e:	08 95       	ret
    3f70:	64 30       	cpi	r22, 0x04	; 4
    3f72:	51 f0       	breq	.+20     	; 0x3f88 <_hihTwiCallback+0x58>
    3f74:	80 e0       	ldi	r24, 0x00	; 0
    3f76:	90 e4       	ldi	r25, 0x40	; 64
    3f78:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <_temp+0x1>
    3f7c:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <_temp>
    3f80:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <_hum+0x1>
    3f84:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <_hum>
    3f88:	08 95       	ret

00003f8a <hih8120Create>:
    3f8a:	0f 93       	push	r16
    3f8c:	1f 93       	push	r17
    3f8e:	08 e9       	ldi	r16, 0x98	; 152
    3f90:	1f e1       	ldi	r17, 0x1F	; 31
    3f92:	20 e0       	ldi	r18, 0x00	; 0
    3f94:	34 e2       	ldi	r19, 0x24	; 36
    3f96:	44 ef       	ldi	r20, 0xF4	; 244
    3f98:	50 e0       	ldi	r21, 0x00	; 0
    3f9a:	60 e0       	ldi	r22, 0x00	; 0
    3f9c:	87 e2       	ldi	r24, 0x27	; 39
    3f9e:	0e 94 94 2b 	call	0x5728	; 0x5728 <twiCreate>
    3fa2:	90 93 ff 18 	sts	0x18FF, r25	; 0x8018ff <_hih8120Handler+0x1>
    3fa6:	80 93 fe 18 	sts	0x18FE, r24	; 0x8018fe <_hih8120Handler>
    3faa:	21 e0       	ldi	r18, 0x01	; 1
    3fac:	89 2b       	or	r24, r25
    3fae:	09 f0       	breq	.+2      	; 0x3fb2 <hih8120Create+0x28>
    3fb0:	20 e0       	ldi	r18, 0x00	; 0
    3fb2:	82 2f       	mov	r24, r18
    3fb4:	1f 91       	pop	r17
    3fb6:	0f 91       	pop	r16
    3fb8:	08 95       	ret

00003fba <hih8120IsReady>:
    3fba:	80 91 fd 18 	lds	r24, 0x18FD	; 0x8018fd <_measuringIsReady>
    3fbe:	08 95       	ret

00003fc0 <hih8120Wakeup>:
    3fc0:	80 91 fe 18 	lds	r24, 0x18FE	; 0x8018fe <_hih8120Handler>
    3fc4:	90 91 ff 18 	lds	r25, 0x18FF	; 0x8018ff <_hih8120Handler+0x1>
    3fc8:	00 97       	sbiw	r24, 0x00	; 0
    3fca:	59 f0       	breq	.+22     	; 0x3fe2 <hih8120Wakeup+0x22>
    3fcc:	40 e0       	ldi	r20, 0x00	; 0
    3fce:	60 e0       	ldi	r22, 0x00	; 0
    3fd0:	70 e0       	ldi	r23, 0x00	; 0
    3fd2:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <twiTransmit>
    3fd6:	84 30       	cpi	r24, 0x04	; 4
    3fd8:	31 f4       	brne	.+12     	; 0x3fe6 <hih8120Wakeup+0x26>
    3fda:	10 92 fd 18 	sts	0x18FD, r1	; 0x8018fd <_measuringIsReady>
    3fde:	80 e0       	ldi	r24, 0x00	; 0
    3fe0:	08 95       	ret
    3fe2:	82 e0       	ldi	r24, 0x02	; 2
    3fe4:	08 95       	ret
    3fe6:	83 e0       	ldi	r24, 0x03	; 3
    3fe8:	08 95       	ret

00003fea <hih8120Meassure>:
    3fea:	80 91 fe 18 	lds	r24, 0x18FE	; 0x8018fe <_hih8120Handler>
    3fee:	90 91 ff 18 	lds	r25, 0x18FF	; 0x8018ff <_hih8120Handler+0x1>
    3ff2:	00 97       	sbiw	r24, 0x00	; 0
    3ff4:	39 f0       	breq	.+14     	; 0x4004 <hih8120Meassure+0x1a>
    3ff6:	64 e0       	ldi	r22, 0x04	; 4
    3ff8:	0e 94 31 2c 	call	0x5862	; 0x5862 <twiReceive>
    3ffc:	85 30       	cpi	r24, 0x05	; 5
    3ffe:	21 f0       	breq	.+8      	; 0x4008 <hih8120Meassure+0x1e>
    4000:	83 e0       	ldi	r24, 0x03	; 3
    4002:	08 95       	ret
    4004:	82 e0       	ldi	r24, 0x02	; 2
    4006:	08 95       	ret
    4008:	80 e0       	ldi	r24, 0x00	; 0
    400a:	08 95       	ret

0000400c <hih8120GetHumidity>:
    400c:	60 91 0c 02 	lds	r22, 0x020C	; 0x80020c <_hum>
    4010:	70 91 0d 02 	lds	r23, 0x020D	; 0x80020d <_hum+0x1>
    4014:	80 e0       	ldi	r24, 0x00	; 0
    4016:	90 e0       	ldi	r25, 0x00	; 0
    4018:	0e 94 3b 2e 	call	0x5c76	; 0x5c76 <__floatunsisf>
    401c:	20 e0       	ldi	r18, 0x00	; 0
    401e:	30 e0       	ldi	r19, 0x00	; 0
    4020:	48 ec       	ldi	r20, 0xC8	; 200
    4022:	52 e4       	ldi	r21, 0x42	; 66
    4024:	0e 94 c9 2e 	call	0x5d92	; 0x5d92 <__mulsf3>
    4028:	20 e0       	ldi	r18, 0x00	; 0
    402a:	38 ef       	ldi	r19, 0xF8	; 248
    402c:	4f e7       	ldi	r20, 0x7F	; 127
    402e:	56 e4       	ldi	r21, 0x46	; 70
    4030:	0c 94 a2 2d 	jmp	0x5b44	; 0x5b44 <__divsf3>
    4034:	08 95       	ret

00004036 <hih8120GetHumidityPercent_x10>:
    4036:	ea df       	rcall	.-44     	; 0x400c <hih8120GetHumidity>
    4038:	20 e0       	ldi	r18, 0x00	; 0
    403a:	30 e0       	ldi	r19, 0x00	; 0
    403c:	40 e2       	ldi	r20, 0x20	; 32
    403e:	51 e4       	ldi	r21, 0x41	; 65
    4040:	0e 94 c9 2e 	call	0x5d92	; 0x5d92 <__mulsf3>
    4044:	0e 94 0f 2e 	call	0x5c1e	; 0x5c1e <__fixunssfsi>
    4048:	cb 01       	movw	r24, r22
    404a:	08 95       	ret

0000404c <hih8120GetTemperature>:
    404c:	60 91 0a 02 	lds	r22, 0x020A	; 0x80020a <_temp>
    4050:	70 91 0b 02 	lds	r23, 0x020B	; 0x80020b <_temp+0x1>
    4054:	80 e0       	ldi	r24, 0x00	; 0
    4056:	90 e0       	ldi	r25, 0x00	; 0
    4058:	0e 94 3b 2e 	call	0x5c76	; 0x5c76 <__floatunsisf>
    405c:	20 e0       	ldi	r18, 0x00	; 0
    405e:	30 e0       	ldi	r19, 0x00	; 0
    4060:	45 e2       	ldi	r20, 0x25	; 37
    4062:	53 e4       	ldi	r21, 0x43	; 67
    4064:	0e 94 c9 2e 	call	0x5d92	; 0x5d92 <__mulsf3>
    4068:	20 e0       	ldi	r18, 0x00	; 0
    406a:	38 ef       	ldi	r19, 0xF8	; 248
    406c:	4f e7       	ldi	r20, 0x7F	; 127
    406e:	56 e4       	ldi	r21, 0x46	; 70
    4070:	0e 94 a2 2d 	call	0x5b44	; 0x5b44 <__divsf3>
    4074:	20 e0       	ldi	r18, 0x00	; 0
    4076:	30 e0       	ldi	r19, 0x00	; 0
    4078:	40 e2       	ldi	r20, 0x20	; 32
    407a:	52 e4       	ldi	r21, 0x42	; 66
    407c:	0c 94 3d 2d 	jmp	0x5a7a	; 0x5a7a <__subsf3>
    4080:	08 95       	ret

00004082 <hih8120GetTemperature_x10>:
    4082:	e4 df       	rcall	.-56     	; 0x404c <hih8120GetTemperature>
    4084:	20 e0       	ldi	r18, 0x00	; 0
    4086:	30 e0       	ldi	r19, 0x00	; 0
    4088:	40 e2       	ldi	r20, 0x20	; 32
    408a:	51 e4       	ldi	r21, 0x41	; 65
    408c:	0e 94 c9 2e 	call	0x5d92	; 0x5d92 <__mulsf3>
    4090:	0e 94 0a 2e 	call	0x5c14	; 0x5c14 <__fixsfsi>
    4094:	cb 01       	movw	r24, r22
    4096:	08 95       	ret

00004098 <_turn_off>:
    4098:	cf 93       	push	r28
    409a:	df 93       	push	r29
    409c:	90 e0       	ldi	r25, 0x00	; 0
    409e:	fc 01       	movw	r30, r24
    40a0:	ee 0f       	add	r30, r30
    40a2:	ff 1f       	adc	r31, r31
    40a4:	e8 0f       	add	r30, r24
    40a6:	f9 1f       	adc	r31, r25
    40a8:	ee 0f       	add	r30, r30
    40aa:	ff 1f       	adc	r31, r31
    40ac:	e0 50       	subi	r30, 0x00	; 0
    40ae:	f7 4e       	sbci	r31, 0xE7	; 231
    40b0:	23 81       	ldd	r18, Z+3	; 0x03
    40b2:	21 11       	cpse	r18, r1
    40b4:	0a c0       	rjmp	.+20     	; 0x40ca <_turn_off+0x32>
    40b6:	ef 01       	movw	r28, r30
    40b8:	e0 91 81 1a 	lds	r30, 0x1A81	; 0x801a81 <register_access+0x8>
    40bc:	f0 91 82 1a 	lds	r31, 0x1A82	; 0x801a82 <register_access+0x9>
    40c0:	6a 81       	ldd	r22, Y+2	; 0x02
    40c2:	88 81       	ld	r24, Y
    40c4:	99 81       	ldd	r25, Y+1	; 0x01
    40c6:	19 95       	eicall
    40c8:	12 c0       	rjmp	.+36     	; 0x40ee <_turn_off+0x56>
    40ca:	dc 01       	movw	r26, r24
    40cc:	aa 0f       	add	r26, r26
    40ce:	bb 1f       	adc	r27, r27
    40d0:	ed 01       	movw	r28, r26
    40d2:	c8 0f       	add	r28, r24
    40d4:	d9 1f       	adc	r29, r25
    40d6:	cc 0f       	add	r28, r28
    40d8:	dd 1f       	adc	r29, r29
    40da:	c0 50       	subi	r28, 0x00	; 0
    40dc:	d7 4e       	sbci	r29, 0xE7	; 231
    40de:	e0 91 8b 1a 	lds	r30, 0x1A8B	; 0x801a8b <register_access+0x12>
    40e2:	f0 91 8c 1a 	lds	r31, 0x1A8C	; 0x801a8c <register_access+0x13>
    40e6:	6a 81       	ldd	r22, Y+2	; 0x02
    40e8:	88 81       	ld	r24, Y
    40ea:	99 81       	ldd	r25, Y+1	; 0x01
    40ec:	19 95       	eicall
    40ee:	df 91       	pop	r29
    40f0:	cf 91       	pop	r28
    40f2:	08 95       	ret

000040f4 <_turn_on>:
    40f4:	cf 93       	push	r28
    40f6:	df 93       	push	r29
    40f8:	90 e0       	ldi	r25, 0x00	; 0
    40fa:	fc 01       	movw	r30, r24
    40fc:	ee 0f       	add	r30, r30
    40fe:	ff 1f       	adc	r31, r31
    4100:	e8 0f       	add	r30, r24
    4102:	f9 1f       	adc	r31, r25
    4104:	ee 0f       	add	r30, r30
    4106:	ff 1f       	adc	r31, r31
    4108:	e0 50       	subi	r30, 0x00	; 0
    410a:	f7 4e       	sbci	r31, 0xE7	; 231
    410c:	23 81       	ldd	r18, Z+3	; 0x03
    410e:	21 11       	cpse	r18, r1
    4110:	0a c0       	rjmp	.+20     	; 0x4126 <_turn_on+0x32>
    4112:	ef 01       	movw	r28, r30
    4114:	e0 91 8b 1a 	lds	r30, 0x1A8B	; 0x801a8b <register_access+0x12>
    4118:	f0 91 8c 1a 	lds	r31, 0x1A8C	; 0x801a8c <register_access+0x13>
    411c:	6a 81       	ldd	r22, Y+2	; 0x02
    411e:	88 81       	ld	r24, Y
    4120:	99 81       	ldd	r25, Y+1	; 0x01
    4122:	19 95       	eicall
    4124:	12 c0       	rjmp	.+36     	; 0x414a <_turn_on+0x56>
    4126:	dc 01       	movw	r26, r24
    4128:	aa 0f       	add	r26, r26
    412a:	bb 1f       	adc	r27, r27
    412c:	ed 01       	movw	r28, r26
    412e:	c8 0f       	add	r28, r24
    4130:	d9 1f       	adc	r29, r25
    4132:	cc 0f       	add	r28, r28
    4134:	dd 1f       	adc	r29, r29
    4136:	c0 50       	subi	r28, 0x00	; 0
    4138:	d7 4e       	sbci	r29, 0xE7	; 231
    413a:	e0 91 81 1a 	lds	r30, 0x1A81	; 0x801a81 <register_access+0x8>
    413e:	f0 91 82 1a 	lds	r31, 0x1A82	; 0x801a82 <register_access+0x9>
    4142:	6a 81       	ldd	r22, Y+2	; 0x02
    4144:	88 81       	ld	r24, Y
    4146:	99 81       	ldd	r25, Y+1	; 0x01
    4148:	19 95       	eicall
    414a:	df 91       	pop	r29
    414c:	cf 91       	pop	r28
    414e:	08 95       	ret

00004150 <_hal_led_task>:
    4150:	0f 2e       	mov	r0, r31
    4152:	f9 e7       	ldi	r31, 0x79	; 121
    4154:	cf 2e       	mov	r12, r31
    4156:	fa e1       	ldi	r31, 0x1A	; 26
    4158:	df 2e       	mov	r13, r31
    415a:	f0 2d       	mov	r31, r0
    415c:	04 e0       	ldi	r16, 0x04	; 4
    415e:	c0 e0       	ldi	r28, 0x00	; 0
    4160:	d9 e1       	ldi	r29, 0x19	; 25
    4162:	10 e0       	ldi	r17, 0x00	; 0
    4164:	8c 81       	ldd	r24, Y+4	; 0x04
    4166:	81 30       	cpi	r24, 0x01	; 1
    4168:	69 f0       	breq	.+26     	; 0x4184 <_hal_led_task+0x34>
    416a:	e8 f0       	brcs	.+58     	; 0x41a6 <_hal_led_task+0x56>
    416c:	82 30       	cpi	r24, 0x02	; 2
    416e:	39 f5       	brne	.+78     	; 0x41be <_hal_led_task+0x6e>
    4170:	d6 01       	movw	r26, r12
    4172:	1c 96       	adiw	r26, 0x0c	; 12
    4174:	ed 91       	ld	r30, X+
    4176:	fc 91       	ld	r31, X
    4178:	1d 97       	sbiw	r26, 0x0d	; 13
    417a:	6a 81       	ldd	r22, Y+2	; 0x02
    417c:	88 81       	ld	r24, Y
    417e:	99 81       	ldd	r25, Y+1	; 0x01
    4180:	19 95       	eicall
    4182:	1d c0       	rjmp	.+58     	; 0x41be <_hal_led_task+0x6e>
    4184:	8d 81       	ldd	r24, Y+5	; 0x05
    4186:	8f 5f       	subi	r24, 0xFF	; 255
    4188:	8a 30       	cpi	r24, 0x0A	; 10
    418a:	10 f4       	brcc	.+4      	; 0x4190 <_hal_led_task+0x40>
    418c:	8d 83       	std	Y+5, r24	; 0x05
    418e:	17 c0       	rjmp	.+46     	; 0x41be <_hal_led_task+0x6e>
    4190:	1d 82       	std	Y+5, r1	; 0x05
    4192:	d6 01       	movw	r26, r12
    4194:	1c 96       	adiw	r26, 0x0c	; 12
    4196:	ed 91       	ld	r30, X+
    4198:	fc 91       	ld	r31, X
    419a:	1d 97       	sbiw	r26, 0x0d	; 13
    419c:	6a 81       	ldd	r22, Y+2	; 0x02
    419e:	88 81       	ld	r24, Y
    41a0:	99 81       	ldd	r25, Y+1	; 0x01
    41a2:	19 95       	eicall
    41a4:	0c c0       	rjmp	.+24     	; 0x41be <_hal_led_task+0x6e>
    41a6:	8d 81       	ldd	r24, Y+5	; 0x05
    41a8:	88 23       	and	r24, r24
    41aa:	31 f0       	breq	.+12     	; 0x41b8 <_hal_led_task+0x68>
    41ac:	81 2f       	mov	r24, r17
    41ae:	a2 df       	rcall	.-188    	; 0x40f4 <_turn_on>
    41b0:	8d 81       	ldd	r24, Y+5	; 0x05
    41b2:	81 50       	subi	r24, 0x01	; 1
    41b4:	8d 83       	std	Y+5, r24	; 0x05
    41b6:	03 c0       	rjmp	.+6      	; 0x41be <_hal_led_task+0x6e>
    41b8:	0c 83       	std	Y+4, r16	; 0x04
    41ba:	81 2f       	mov	r24, r17
    41bc:	6d df       	rcall	.-294    	; 0x4098 <_turn_off>
    41be:	1f 5f       	subi	r17, 0xFF	; 255
    41c0:	26 96       	adiw	r28, 0x06	; 6
    41c2:	14 30       	cpi	r17, 0x04	; 4
    41c4:	79 f6       	brne	.-98     	; 0x4164 <_hal_led_task+0x14>
    41c6:	65 e0       	ldi	r22, 0x05	; 5
    41c8:	70 e0       	ldi	r23, 0x00	; 0
    41ca:	80 e0       	ldi	r24, 0x00	; 0
    41cc:	90 e0       	ldi	r25, 0x00	; 0
    41ce:	0e 94 17 18 	call	0x302e	; 0x302e <vTaskDelay>
    41d2:	c5 cf       	rjmp	.-118    	; 0x415e <_hal_led_task+0xe>

000041d4 <led_create>:
    41d4:	cf 92       	push	r12
    41d6:	df 92       	push	r13
    41d8:	ef 92       	push	r14
    41da:	ff 92       	push	r15
    41dc:	0f 93       	push	r16
    41de:	1f 93       	push	r17
    41e0:	cf 93       	push	r28
    41e2:	df 93       	push	r29
    41e4:	06 2f       	mov	r16, r22
    41e6:	0f 2e       	mov	r0, r31
    41e8:	f9 e7       	ldi	r31, 0x79	; 121
    41ea:	ef 2e       	mov	r14, r31
    41ec:	fa e1       	ldi	r31, 0x1A	; 26
    41ee:	ff 2e       	mov	r15, r31
    41f0:	f0 2d       	mov	r31, r0
    41f2:	d7 01       	movw	r26, r14
    41f4:	18 96       	adiw	r26, 0x08	; 8
    41f6:	ed 91       	ld	r30, X+
    41f8:	fc 91       	ld	r31, X
    41fa:	19 97       	sbiw	r26, 0x09	; 9
    41fc:	66 e0       	ldi	r22, 0x06	; 6
    41fe:	87 e2       	ldi	r24, 0x27	; 39
    4200:	90 e0       	ldi	r25, 0x00	; 0
    4202:	19 95       	eicall
    4204:	c0 e0       	ldi	r28, 0x00	; 0
    4206:	d9 e1       	ldi	r29, 0x19	; 25
    4208:	0f 2e       	mov	r0, r31
    420a:	f8 e2       	ldi	r31, 0x28	; 40
    420c:	cf 2e       	mov	r12, r31
    420e:	d1 2c       	mov	r13, r1
    4210:	f0 2d       	mov	r31, r0
    4212:	d9 82       	std	Y+1, r13	; 0x01
    4214:	c8 82       	st	Y, r12
    4216:	86 e0       	ldi	r24, 0x06	; 6
    4218:	8a 83       	std	Y+2, r24	; 0x02
    421a:	1b 82       	std	Y+3, r1	; 0x03
    421c:	14 e0       	ldi	r17, 0x04	; 4
    421e:	1c 83       	std	Y+4, r17	; 0x04
    4220:	80 e0       	ldi	r24, 0x00	; 0
    4222:	3a df       	rcall	.-396    	; 0x4098 <_turn_off>
    4224:	d7 01       	movw	r26, r14
    4226:	18 96       	adiw	r26, 0x08	; 8
    4228:	ed 91       	ld	r30, X+
    422a:	fc 91       	ld	r31, X
    422c:	19 97       	sbiw	r26, 0x09	; 9
    422e:	67 e0       	ldi	r22, 0x07	; 7
    4230:	87 e2       	ldi	r24, 0x27	; 39
    4232:	90 e0       	ldi	r25, 0x00	; 0
    4234:	19 95       	eicall
    4236:	df 82       	std	Y+7, r13	; 0x07
    4238:	ce 82       	std	Y+6, r12	; 0x06
    423a:	87 e0       	ldi	r24, 0x07	; 7
    423c:	88 87       	std	Y+8, r24	; 0x08
    423e:	19 86       	std	Y+9, r1	; 0x09
    4240:	1a 87       	std	Y+10, r17	; 0x0a
    4242:	81 e0       	ldi	r24, 0x01	; 1
    4244:	29 df       	rcall	.-430    	; 0x4098 <_turn_off>
    4246:	d7 01       	movw	r26, r14
    4248:	18 96       	adiw	r26, 0x08	; 8
    424a:	ed 91       	ld	r30, X+
    424c:	fc 91       	ld	r31, X
    424e:	19 97       	sbiw	r26, 0x09	; 9
    4250:	65 e0       	ldi	r22, 0x05	; 5
    4252:	83 e3       	ldi	r24, 0x33	; 51
    4254:	90 e0       	ldi	r25, 0x00	; 0
    4256:	19 95       	eicall
    4258:	d7 01       	movw	r26, r14
    425a:	18 96       	adiw	r26, 0x08	; 8
    425c:	ed 91       	ld	r30, X+
    425e:	fc 91       	ld	r31, X
    4260:	19 97       	sbiw	r26, 0x09	; 9
    4262:	61 e0       	ldi	r22, 0x01	; 1
    4264:	84 e3       	ldi	r24, 0x34	; 52
    4266:	90 e0       	ldi	r25, 0x00	; 0
    4268:	19 95       	eicall
    426a:	84 e3       	ldi	r24, 0x34	; 52
    426c:	90 e0       	ldi	r25, 0x00	; 0
    426e:	9d 87       	std	Y+13, r25	; 0x0d
    4270:	8c 87       	std	Y+12, r24	; 0x0c
    4272:	85 e0       	ldi	r24, 0x05	; 5
    4274:	8e 87       	std	Y+14, r24	; 0x0e
    4276:	1f 86       	std	Y+15, r1	; 0x0f
    4278:	18 8b       	std	Y+16, r17	; 0x10
    427a:	82 e0       	ldi	r24, 0x02	; 2
    427c:	0d df       	rcall	.-486    	; 0x4098 <_turn_off>
    427e:	d7 01       	movw	r26, r14
    4280:	18 96       	adiw	r26, 0x08	; 8
    4282:	ed 91       	ld	r30, X+
    4284:	fc 91       	ld	r31, X
    4286:	19 97       	sbiw	r26, 0x09	; 9
    4288:	64 e0       	ldi	r22, 0x04	; 4
    428a:	81 e0       	ldi	r24, 0x01	; 1
    428c:	91 e0       	ldi	r25, 0x01	; 1
    428e:	19 95       	eicall
    4290:	d7 01       	movw	r26, r14
    4292:	18 96       	adiw	r26, 0x08	; 8
    4294:	ed 91       	ld	r30, X+
    4296:	fc 91       	ld	r31, X
    4298:	19 97       	sbiw	r26, 0x09	; 9
    429a:	61 e0       	ldi	r22, 0x01	; 1
    429c:	82 e0       	ldi	r24, 0x02	; 2
    429e:	91 e0       	ldi	r25, 0x01	; 1
    42a0:	19 95       	eicall
    42a2:	82 e0       	ldi	r24, 0x02	; 2
    42a4:	91 e0       	ldi	r25, 0x01	; 1
    42a6:	9b 8b       	std	Y+19, r25	; 0x13
    42a8:	8a 8b       	std	Y+18, r24	; 0x12
    42aa:	1c 8b       	std	Y+20, r17	; 0x14
    42ac:	1d 8a       	std	Y+21, r1	; 0x15
    42ae:	1e 8b       	std	Y+22, r17	; 0x16
    42b0:	83 e0       	ldi	r24, 0x03	; 3
    42b2:	f2 de       	rcall	.-540    	; 0x4098 <_turn_off>
    42b4:	e1 2c       	mov	r14, r1
    42b6:	f1 2c       	mov	r15, r1
    42b8:	20 e0       	ldi	r18, 0x00	; 0
    42ba:	30 e0       	ldi	r19, 0x00	; 0
    42bc:	40 ec       	ldi	r20, 0xC0	; 192
    42be:	50 e0       	ldi	r21, 0x00	; 0
    42c0:	6b ee       	ldi	r22, 0xEB	; 235
    42c2:	74 e0       	ldi	r23, 0x04	; 4
    42c4:	88 ea       	ldi	r24, 0xA8	; 168
    42c6:	90 e2       	ldi	r25, 0x20	; 32
    42c8:	0e 94 55 15 	call	0x2aaa	; 0x2aaa <xTaskCreate>
    42cc:	df 91       	pop	r29
    42ce:	cf 91       	pop	r28
    42d0:	1f 91       	pop	r17
    42d2:	0f 91       	pop	r16
    42d4:	ff 90       	pop	r15
    42d6:	ef 90       	pop	r14
    42d8:	df 90       	pop	r13
    42da:	cf 90       	pop	r12
    42dc:	08 95       	ret

000042de <led_slow_blink>:
    42de:	0f 93       	push	r16
    42e0:	1f 93       	push	r17
    42e2:	cf 93       	push	r28
    42e4:	df 93       	push	r29
    42e6:	c8 2f       	mov	r28, r24
    42e8:	d0 e0       	ldi	r29, 0x00	; 0
    42ea:	8e 01       	movw	r16, r28
    42ec:	00 0f       	add	r16, r16
    42ee:	11 1f       	adc	r17, r17
    42f0:	d8 01       	movw	r26, r16
    42f2:	ac 0f       	add	r26, r28
    42f4:	bd 1f       	adc	r27, r29
    42f6:	aa 0f       	add	r26, r26
    42f8:	bb 1f       	adc	r27, r27
    42fa:	a0 50       	subi	r26, 0x00	; 0
    42fc:	b7 4e       	sbci	r27, 0xE7	; 231
    42fe:	e0 91 85 1a 	lds	r30, 0x1A85	; 0x801a85 <register_access+0xc>
    4302:	f0 91 86 1a 	lds	r31, 0x1A86	; 0x801a86 <register_access+0xd>
    4306:	12 96       	adiw	r26, 0x02	; 2
    4308:	6c 91       	ld	r22, X
    430a:	12 97       	sbiw	r26, 0x02	; 2
    430c:	8d 91       	ld	r24, X+
    430e:	9c 91       	ld	r25, X
    4310:	19 95       	eicall
    4312:	c0 0f       	add	r28, r16
    4314:	d1 1f       	adc	r29, r17
    4316:	cc 0f       	add	r28, r28
    4318:	dd 1f       	adc	r29, r29
    431a:	c0 50       	subi	r28, 0x00	; 0
    431c:	d7 4e       	sbci	r29, 0xE7	; 231
    431e:	81 e0       	ldi	r24, 0x01	; 1
    4320:	8c 83       	std	Y+4, r24	; 0x04
    4322:	df 91       	pop	r29
    4324:	cf 91       	pop	r28
    4326:	1f 91       	pop	r17
    4328:	0f 91       	pop	r16
    432a:	08 95       	ret

0000432c <led_fast_blink>:
    432c:	0f 93       	push	r16
    432e:	1f 93       	push	r17
    4330:	cf 93       	push	r28
    4332:	df 93       	push	r29
    4334:	c8 2f       	mov	r28, r24
    4336:	d0 e0       	ldi	r29, 0x00	; 0
    4338:	8e 01       	movw	r16, r28
    433a:	00 0f       	add	r16, r16
    433c:	11 1f       	adc	r17, r17
    433e:	d8 01       	movw	r26, r16
    4340:	ac 0f       	add	r26, r28
    4342:	bd 1f       	adc	r27, r29
    4344:	aa 0f       	add	r26, r26
    4346:	bb 1f       	adc	r27, r27
    4348:	a0 50       	subi	r26, 0x00	; 0
    434a:	b7 4e       	sbci	r27, 0xE7	; 231
    434c:	e0 91 85 1a 	lds	r30, 0x1A85	; 0x801a85 <register_access+0xc>
    4350:	f0 91 86 1a 	lds	r31, 0x1A86	; 0x801a86 <register_access+0xd>
    4354:	12 96       	adiw	r26, 0x02	; 2
    4356:	6c 91       	ld	r22, X
    4358:	12 97       	sbiw	r26, 0x02	; 2
    435a:	8d 91       	ld	r24, X+
    435c:	9c 91       	ld	r25, X
    435e:	19 95       	eicall
    4360:	c0 0f       	add	r28, r16
    4362:	d1 1f       	adc	r29, r17
    4364:	cc 0f       	add	r28, r28
    4366:	dd 1f       	adc	r29, r29
    4368:	c0 50       	subi	r28, 0x00	; 0
    436a:	d7 4e       	sbci	r29, 0xE7	; 231
    436c:	82 e0       	ldi	r24, 0x02	; 2
    436e:	8c 83       	std	Y+4, r24	; 0x04
    4370:	df 91       	pop	r29
    4372:	cf 91       	pop	r28
    4374:	1f 91       	pop	r17
    4376:	0f 91       	pop	r16
    4378:	08 95       	ret

0000437a <led_led_on>:
    437a:	28 2f       	mov	r18, r24
    437c:	30 e0       	ldi	r19, 0x00	; 0
    437e:	f9 01       	movw	r30, r18
    4380:	ee 0f       	add	r30, r30
    4382:	ff 1f       	adc	r31, r31
    4384:	e2 0f       	add	r30, r18
    4386:	f3 1f       	adc	r31, r19
    4388:	ee 0f       	add	r30, r30
    438a:	ff 1f       	adc	r31, r31
    438c:	e0 50       	subi	r30, 0x00	; 0
    438e:	f7 4e       	sbci	r31, 0xE7	; 231
    4390:	93 e0       	ldi	r25, 0x03	; 3
    4392:	94 83       	std	Z+4, r25	; 0x04
    4394:	af ce       	rjmp	.-674    	; 0x40f4 <_turn_on>
    4396:	08 95       	ret

00004398 <led_led_off>:
    4398:	28 2f       	mov	r18, r24
    439a:	30 e0       	ldi	r19, 0x00	; 0
    439c:	f9 01       	movw	r30, r18
    439e:	ee 0f       	add	r30, r30
    43a0:	ff 1f       	adc	r31, r31
    43a2:	e2 0f       	add	r30, r18
    43a4:	f3 1f       	adc	r31, r19
    43a6:	ee 0f       	add	r30, r30
    43a8:	ff 1f       	adc	r31, r31
    43aa:	e0 50       	subi	r30, 0x00	; 0
    43ac:	f7 4e       	sbci	r31, 0xE7	; 231
    43ae:	94 e0       	ldi	r25, 0x04	; 4
    43b0:	94 83       	std	Z+4, r25	; 0x04
    43b2:	72 ce       	rjmp	.-796    	; 0x4098 <_turn_off>
    43b4:	08 95       	ret

000043b6 <led_long_puls>:
    43b6:	90 e0       	ldi	r25, 0x00	; 0
    43b8:	fc 01       	movw	r30, r24
    43ba:	ee 0f       	add	r30, r30
    43bc:	ff 1f       	adc	r31, r31
    43be:	df 01       	movw	r26, r30
    43c0:	a8 0f       	add	r26, r24
    43c2:	b9 1f       	adc	r27, r25
    43c4:	aa 0f       	add	r26, r26
    43c6:	bb 1f       	adc	r27, r27
    43c8:	a0 50       	subi	r26, 0x00	; 0
    43ca:	b7 4e       	sbci	r27, 0xE7	; 231
    43cc:	24 e0       	ldi	r18, 0x04	; 4
    43ce:	15 96       	adiw	r26, 0x05	; 5
    43d0:	2c 93       	st	X, r18
    43d2:	15 97       	sbiw	r26, 0x05	; 5
    43d4:	fd 01       	movw	r30, r26
    43d6:	14 82       	std	Z+4, r1	; 0x04
    43d8:	08 95       	ret

000043da <led_short_puls>:
    43da:	90 e0       	ldi	r25, 0x00	; 0
    43dc:	fc 01       	movw	r30, r24
    43de:	ee 0f       	add	r30, r30
    43e0:	ff 1f       	adc	r31, r31
    43e2:	df 01       	movw	r26, r30
    43e4:	a8 0f       	add	r26, r24
    43e6:	b9 1f       	adc	r27, r25
    43e8:	aa 0f       	add	r26, r26
    43ea:	bb 1f       	adc	r27, r27
    43ec:	a0 50       	subi	r26, 0x00	; 0
    43ee:	b7 4e       	sbci	r27, 0xE7	; 231
    43f0:	21 e0       	ldi	r18, 0x01	; 1
    43f2:	15 96       	adiw	r26, 0x05	; 5
    43f4:	2c 93       	st	X, r18
    43f6:	15 97       	sbiw	r26, 0x05	; 5
    43f8:	fd 01       	movw	r30, r26
    43fa:	14 82       	std	Z+4, r1	; 0x04
    43fc:	08 95       	ret

000043fe <_serial_call_back>:
    43fe:	0f 93       	push	r16
    4400:	1f 93       	push	r17
    4402:	cf 93       	push	r28
    4404:	df 93       	push	r29
    4406:	1f 92       	push	r1
    4408:	1f 92       	push	r1
    440a:	cd b7       	in	r28, 0x3d	; 61
    440c:	de b7       	in	r29, 0x3e	; 62
    440e:	8c 01       	movw	r16, r24
    4410:	19 82       	std	Y+1, r1	; 0x01
    4412:	2d c0       	rjmp	.+90     	; 0x446e <_serial_call_back+0x70>
    4414:	e0 91 7c 19 	lds	r30, 0x197C	; 0x80197c <rec_buf_inp.2947>
    4418:	ec 32       	cpi	r30, 0x2C	; 44
    441a:	50 f4       	brcc	.+20     	; 0x4430 <_serial_call_back+0x32>
    441c:	81 e0       	ldi	r24, 0x01	; 1
    441e:	8e 0f       	add	r24, r30
    4420:	80 93 7c 19 	sts	0x197C, r24	; 0x80197c <rec_buf_inp.2947>
    4424:	f0 e0       	ldi	r31, 0x00	; 0
    4426:	e2 55       	subi	r30, 0x52	; 82
    4428:	f6 4e       	sbci	r31, 0xE6	; 230
    442a:	8a 81       	ldd	r24, Y+2	; 0x02
    442c:	80 83       	st	Z, r24
    442e:	02 c0       	rjmp	.+4      	; 0x4434 <_serial_call_back+0x36>
    4430:	10 92 7c 19 	sts	0x197C, r1	; 0x80197c <rec_buf_inp.2947>
    4434:	8a 81       	ldd	r24, Y+2	; 0x02
    4436:	8a 30       	cpi	r24, 0x0A	; 10
    4438:	d1 f4       	brne	.+52     	; 0x446e <_serial_call_back+0x70>
    443a:	40 91 7c 19 	lds	r20, 0x197C	; 0x80197c <rec_buf_inp.2947>
    443e:	50 e0       	ldi	r21, 0x00	; 0
    4440:	fa 01       	movw	r30, r20
    4442:	e4 55       	subi	r30, 0x54	; 84
    4444:	f6 4e       	sbci	r31, 0xE6	; 230
    4446:	10 82       	st	Z, r1
    4448:	41 50       	subi	r20, 0x01	; 1
    444a:	51 09       	sbc	r21, r1
    444c:	9e 01       	movw	r18, r28
    444e:	2f 5f       	subi	r18, 0xFF	; 255
    4450:	3f 4f       	sbci	r19, 0xFF	; 255
    4452:	6e ea       	ldi	r22, 0xAE	; 174
    4454:	79 e1       	ldi	r23, 0x19	; 25
    4456:	80 91 7f 19 	lds	r24, 0x197F	; 0x80197f <_serial_reply_buffer_handle>
    445a:	90 91 80 19 	lds	r25, 0x1980	; 0x801980 <_serial_reply_buffer_handle+0x1>
    445e:	0e 94 cf 13 	call	0x279e	; 0x279e <xStreamBufferSendFromISR>
    4462:	89 81       	ldd	r24, Y+1	; 0x01
    4464:	81 11       	cpse	r24, r1
    4466:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <vPortYield>
    446a:	10 92 7c 19 	sts	0x197C, r1	; 0x80197c <rec_buf_inp.2947>
    446e:	be 01       	movw	r22, r28
    4470:	6e 5f       	subi	r22, 0xFE	; 254
    4472:	7f 4f       	sbci	r23, 0xFF	; 255
    4474:	c8 01       	movw	r24, r16
    4476:	8c d6       	rcall	.+3352   	; 0x5190 <serial_get_byte>
    4478:	88 23       	and	r24, r24
    447a:	61 f2       	breq	.-104    	; 0x4414 <_serial_call_back+0x16>
    447c:	0f 90       	pop	r0
    447e:	0f 90       	pop	r0
    4480:	df 91       	pop	r29
    4482:	cf 91       	pop	r28
    4484:	1f 91       	pop	r17
    4486:	0f 91       	pop	r16
    4488:	08 95       	ret

0000448a <_upload_message>:
    448a:	0f 93       	push	r16
    448c:	1f 93       	push	r17
    448e:	cf 93       	push	r28
    4490:	df 93       	push	r29
    4492:	8c 01       	movw	r16, r24
    4494:	eb 01       	movw	r28, r22
    4496:	80 91 7f 19 	lds	r24, 0x197F	; 0x80197f <_serial_reply_buffer_handle>
    449a:	90 91 80 19 	lds	r25, 0x1980	; 0x801980 <_serial_reply_buffer_handle+0x1>
    449e:	0e 94 e6 12 	call	0x25cc	; 0x25cc <xStreamBufferReset>
    44a2:	b8 01       	movw	r22, r16
    44a4:	88 e1       	ldi	r24, 0x18	; 24
    44a6:	99 e1       	ldi	r25, 0x19	; 25
    44a8:	0e 94 51 31 	call	0x62a2	; 0x62a2 <strcpy>
    44ac:	20 97       	sbiw	r28, 0x00	; 0
    44ae:	79 f0       	breq	.+30     	; 0x44ce <_upload_message+0x44>
    44b0:	e8 e1       	ldi	r30, 0x18	; 24
    44b2:	f9 e1       	ldi	r31, 0x19	; 25
    44b4:	01 90       	ld	r0, Z+
    44b6:	00 20       	and	r0, r0
    44b8:	e9 f7       	brne	.-6      	; 0x44b4 <_upload_message+0x2a>
    44ba:	31 97       	sbiw	r30, 0x01	; 1
    44bc:	80 e2       	ldi	r24, 0x20	; 32
    44be:	90 e0       	ldi	r25, 0x00	; 0
    44c0:	91 83       	std	Z+1, r25	; 0x01
    44c2:	80 83       	st	Z, r24
    44c4:	be 01       	movw	r22, r28
    44c6:	88 e1       	ldi	r24, 0x18	; 24
    44c8:	99 e1       	ldi	r25, 0x19	; 25
    44ca:	0e 94 46 31 	call	0x628c	; 0x628c <strcat>
    44ce:	e8 e1       	ldi	r30, 0x18	; 24
    44d0:	f9 e1       	ldi	r31, 0x19	; 25
    44d2:	df 01       	movw	r26, r30
    44d4:	0d 90       	ld	r0, X+
    44d6:	00 20       	and	r0, r0
    44d8:	e9 f7       	brne	.-6      	; 0x44d4 <_upload_message+0x4a>
    44da:	11 97       	sbiw	r26, 0x01	; 1
    44dc:	8d e0       	ldi	r24, 0x0D	; 13
    44de:	9a e0       	ldi	r25, 0x0A	; 10
    44e0:	11 96       	adiw	r26, 0x01	; 1
    44e2:	9c 93       	st	X, r25
    44e4:	8e 93       	st	-X, r24
    44e6:	12 96       	adiw	r26, 0x02	; 2
    44e8:	1c 92       	st	X, r1
    44ea:	01 90       	ld	r0, Z+
    44ec:	00 20       	and	r0, r0
    44ee:	e9 f7       	brne	.-6      	; 0x44ea <_upload_message+0x60>
    44f0:	31 97       	sbiw	r30, 0x01	; 1
    44f2:	e8 51       	subi	r30, 0x18	; 24
    44f4:	f9 41       	sbci	r31, 0x19	; 25
    44f6:	ae 2f       	mov	r26, r30
    44f8:	88 e1       	ldi	r24, 0x18	; 24
    44fa:	99 e1       	ldi	r25, 0x19	; 25
    44fc:	ac 01       	movw	r20, r24
    44fe:	6a 2f       	mov	r22, r26
    4500:	80 91 81 19 	lds	r24, 0x1981	; 0x801981 <_rn2483_serial>
    4504:	90 91 82 19 	lds	r25, 0x1982	; 0x801982 <_rn2483_serial+0x1>
    4508:	f3 d5       	rcall	.+3046   	; 0x50f0 <serial_send_bytes>
    450a:	81 11       	cpse	r24, r1
    450c:	11 c0       	rjmp	.+34     	; 0x4530 <_upload_message+0xa6>
    450e:	08 e2       	ldi	r16, 0x28	; 40
    4510:	15 e0       	ldi	r17, 0x05	; 5
    4512:	20 e0       	ldi	r18, 0x00	; 0
    4514:	30 e0       	ldi	r19, 0x00	; 0
    4516:	4d e2       	ldi	r20, 0x2D	; 45
    4518:	50 e0       	ldi	r21, 0x00	; 0
    451a:	68 e0       	ldi	r22, 0x08	; 8
    451c:	7a e1       	ldi	r23, 0x1A	; 26
    451e:	80 91 7f 19 	lds	r24, 0x197F	; 0x80197f <_serial_reply_buffer_handle>
    4522:	90 91 80 19 	lds	r25, 0x1980	; 0x801980 <_serial_reply_buffer_handle+0x1>
    4526:	0e 94 12 14 	call	0x2824	; 0x2824 <xStreamBufferReceive>
    452a:	88 e0       	ldi	r24, 0x08	; 8
    452c:	9a e1       	ldi	r25, 0x1A	; 26
    452e:	02 c0       	rjmp	.+4      	; 0x4534 <_upload_message+0xaa>
    4530:	80 e0       	ldi	r24, 0x00	; 0
    4532:	90 e0       	ldi	r25, 0x00	; 0
    4534:	df 91       	pop	r29
    4536:	cf 91       	pop	r28
    4538:	1f 91       	pop	r17
    453a:	0f 91       	pop	r16
    453c:	08 95       	ret

0000453e <_reply2return_code>:
    453e:	2f 92       	push	r2
    4540:	3f 92       	push	r3
    4542:	4f 92       	push	r4
    4544:	5f 92       	push	r5
    4546:	6f 92       	push	r6
    4548:	7f 92       	push	r7
    454a:	8f 92       	push	r8
    454c:	9f 92       	push	r9
    454e:	af 92       	push	r10
    4550:	bf 92       	push	r11
    4552:	cf 92       	push	r12
    4554:	df 92       	push	r13
    4556:	ef 92       	push	r14
    4558:	ff 92       	push	r15
    455a:	0f 93       	push	r16
    455c:	1f 93       	push	r17
    455e:	cf 93       	push	r28
    4560:	df 93       	push	r29
    4562:	5c 01       	movw	r10, r24
    4564:	fc 01       	movw	r30, r24
    4566:	01 90       	ld	r0, Z+
    4568:	00 20       	and	r0, r0
    456a:	e9 f7       	brne	.-6      	; 0x4566 <_reply2return_code+0x28>
    456c:	31 97       	sbiw	r30, 0x01	; 1
    456e:	6f 01       	movw	r12, r30
    4570:	c8 1a       	sub	r12, r24
    4572:	d9 0a       	sbc	r13, r25
    4574:	5c 2c       	mov	r5, r12
    4576:	0f 2e       	mov	r0, r31
    4578:	fc e8       	ldi	r31, 0x8C	; 140
    457a:	8f 2e       	mov	r8, r31
    457c:	f7 e0       	ldi	r31, 0x07	; 7
    457e:	9f 2e       	mov	r9, r31
    4580:	f0 2d       	mov	r31, r0
    4582:	e1 2c       	mov	r14, r1
    4584:	f1 2c       	mov	r15, r1
    4586:	4c 2c       	mov	r4, r12
    4588:	37 01       	movw	r6, r14
    458a:	f4 01       	movw	r30, r8
    458c:	01 81       	ldd	r16, Z+1	; 0x01
    458e:	12 81       	ldd	r17, Z+2	; 0x02
    4590:	e8 01       	movw	r28, r16
    4592:	09 90       	ld	r0, Y+
    4594:	00 20       	and	r0, r0
    4596:	e9 f7       	brne	.-6      	; 0x4592 <_reply2return_code+0x54>
    4598:	21 97       	sbiw	r28, 0x01	; 1
    459a:	c0 1b       	sub	r28, r16
    459c:	d1 0b       	sbc	r29, r17
    459e:	3c 2e       	mov	r3, r28
    45a0:	f9 e0       	ldi	r31, 0x09	; 9
    45a2:	cf 16       	cp	r12, r31
    45a4:	d1 04       	cpc	r13, r1
    45a6:	58 f0       	brcs	.+22     	; 0x45be <_reply2return_code+0x80>
    45a8:	f4 01       	movw	r30, r8
    45aa:	20 80       	ld	r2, Z
    45ac:	fe e0       	ldi	r31, 0x0E	; 14
    45ae:	2f 12       	cpse	r2, r31
    45b0:	06 c0       	rjmp	.+12     	; 0x45be <_reply2return_code+0x80>
    45b2:	b8 01       	movw	r22, r16
    45b4:	c5 01       	movw	r24, r10
    45b6:	0e 94 21 31 	call	0x6242	; 0x6242 <strcasestr>
    45ba:	89 2b       	or	r24, r25
    45bc:	09 f5       	brne	.+66     	; 0x4600 <_reply2return_code+0xc2>
    45be:	44 2d       	mov	r20, r4
    45c0:	35 14       	cp	r3, r5
    45c2:	08 f4       	brcc	.+2      	; 0x45c6 <_reply2return_code+0x88>
    45c4:	4c 2f       	mov	r20, r28
    45c6:	50 e0       	ldi	r21, 0x00	; 0
    45c8:	b8 01       	movw	r22, r16
    45ca:	c5 01       	movw	r24, r10
    45cc:	0e 94 58 31 	call	0x62b0	; 0x62b0 <strncasecmp>
    45d0:	89 2b       	or	r24, r25
    45d2:	49 f4       	brne	.+18     	; 0x45e6 <_reply2return_code+0xa8>
    45d4:	f3 01       	movw	r30, r6
    45d6:	ee 0f       	add	r30, r30
    45d8:	ff 1f       	adc	r31, r31
    45da:	e6 0d       	add	r30, r6
    45dc:	f7 1d       	adc	r31, r7
    45de:	e4 57       	subi	r30, 0x74	; 116
    45e0:	f8 4f       	sbci	r31, 0xF8	; 248
    45e2:	20 80       	ld	r2, Z
    45e4:	0d c0       	rjmp	.+26     	; 0x4600 <_reply2return_code+0xc2>
    45e6:	8f ef       	ldi	r24, 0xFF	; 255
    45e8:	e8 1a       	sub	r14, r24
    45ea:	f8 0a       	sbc	r15, r24
    45ec:	e3 e0       	ldi	r30, 0x03	; 3
    45ee:	8e 0e       	add	r8, r30
    45f0:	91 1c       	adc	r9, r1
    45f2:	f1 e1       	ldi	r31, 0x11	; 17
    45f4:	ef 16       	cp	r14, r31
    45f6:	f1 04       	cpc	r15, r1
    45f8:	39 f6       	brne	.-114    	; 0x4588 <_reply2return_code+0x4a>
    45fa:	68 94       	set
    45fc:	22 24       	eor	r2, r2
    45fe:	24 f8       	bld	r2, 4
    4600:	82 2d       	mov	r24, r2
    4602:	df 91       	pop	r29
    4604:	cf 91       	pop	r28
    4606:	1f 91       	pop	r17
    4608:	0f 91       	pop	r16
    460a:	ff 90       	pop	r15
    460c:	ef 90       	pop	r14
    460e:	df 90       	pop	r13
    4610:	cf 90       	pop	r12
    4612:	bf 90       	pop	r11
    4614:	af 90       	pop	r10
    4616:	9f 90       	pop	r9
    4618:	8f 90       	pop	r8
    461a:	7f 90       	pop	r7
    461c:	6f 90       	pop	r6
    461e:	5f 90       	pop	r5
    4620:	4f 90       	pop	r4
    4622:	3f 90       	pop	r3
    4624:	2f 90       	pop	r2
    4626:	08 95       	ret

00004628 <_upload_message_rc>:
    4628:	30 df       	rcall	.-416    	; 0x448a <_upload_message>
    462a:	89 cf       	rjmp	.-238    	; 0x453e <_reply2return_code>
    462c:	08 95       	ret

0000462e <lora_driver_flush_buffers>:
    462e:	80 91 7f 19 	lds	r24, 0x197F	; 0x80197f <_serial_reply_buffer_handle>
    4632:	90 91 80 19 	lds	r25, 0x1980	; 0x801980 <_serial_reply_buffer_handle+0x1>
    4636:	0c 94 e6 12 	jmp	0x25cc	; 0x25cc <xStreamBufferReset>
    463a:	08 95       	ret

0000463c <lora_driver_create>:
    463c:	8f 92       	push	r8
    463e:	9f 92       	push	r9
    4640:	af 92       	push	r10
    4642:	cf 92       	push	r12
    4644:	ef 92       	push	r14
    4646:	0f 93       	push	r16
    4648:	1f 93       	push	r17
    464a:	cf 93       	push	r28
    464c:	c8 2f       	mov	r28, r24
    464e:	8b 01       	movw	r16, r22
    4650:	41 e0       	ldi	r20, 0x01	; 1
    4652:	60 e0       	ldi	r22, 0x00	; 0
    4654:	70 e0       	ldi	r23, 0x00	; 0
    4656:	88 ec       	ldi	r24, 0xC8	; 200
    4658:	90 e0       	ldi	r25, 0x00	; 0
    465a:	0e 94 ba 12 	call	0x2574	; 0x2574 <xStreamBufferGenericCreate>
    465e:	90 93 80 19 	sts	0x1980, r25	; 0x801980 <_serial_reply_buffer_handle+0x1>
    4662:	80 93 7f 19 	sts	0x197F, r24	; 0x80197f <_serial_reply_buffer_handle>
    4666:	10 93 7e 19 	sts	0x197E, r17	; 0x80197e <_downlinkMessageBuffer+0x1>
    466a:	00 93 7d 19 	sts	0x197D, r16	; 0x80197d <_downlinkMessageBuffer>
    466e:	0f 2e       	mov	r0, r31
    4670:	ff ef       	ldi	r31, 0xFF	; 255
    4672:	8f 2e       	mov	r8, r31
    4674:	f1 e2       	ldi	r31, 0x21	; 33
    4676:	9f 2e       	mov	r9, r31
    4678:	f0 2d       	mov	r31, r0
    467a:	68 94       	set
    467c:	aa 24       	eor	r10, r10
    467e:	a6 f8       	bld	r10, 6
    4680:	68 94       	set
    4682:	cc 24       	eor	r12, r12
    4684:	c6 f8       	bld	r12, 6
    4686:	e1 2c       	mov	r14, r1
    4688:	00 e0       	ldi	r16, 0x00	; 0
    468a:	23 e0       	ldi	r18, 0x03	; 3
    468c:	40 e0       	ldi	r20, 0x00	; 0
    468e:	51 ee       	ldi	r21, 0xE1	; 225
    4690:	60 e0       	ldi	r22, 0x00	; 0
    4692:	70 e0       	ldi	r23, 0x00	; 0
    4694:	8c 2f       	mov	r24, r28
    4696:	71 d4       	rcall	.+2274   	; 0x4f7a <serial_new_instance>
    4698:	90 93 82 19 	sts	0x1982, r25	; 0x801982 <_rn2483_serial+0x1>
    469c:	80 93 81 19 	sts	0x1981, r24	; 0x801981 <_rn2483_serial>
    46a0:	e0 91 81 1a 	lds	r30, 0x1A81	; 0x801a81 <register_access+0x8>
    46a4:	f0 91 82 1a 	lds	r31, 0x1A82	; 0x801a82 <register_access+0x9>
    46a8:	64 e0       	ldi	r22, 0x04	; 4
    46aa:	87 e0       	ldi	r24, 0x07	; 7
    46ac:	91 e0       	ldi	r25, 0x01	; 1
    46ae:	19 95       	eicall
    46b0:	cf 91       	pop	r28
    46b2:	1f 91       	pop	r17
    46b4:	0f 91       	pop	r16
    46b6:	ef 90       	pop	r14
    46b8:	cf 90       	pop	r12
    46ba:	af 90       	pop	r10
    46bc:	9f 90       	pop	r9
    46be:	8f 90       	pop	r8
    46c0:	08 95       	ret

000046c2 <lora_driver_reset_rn2483>:
    46c2:	88 23       	and	r24, r24
    46c4:	49 f0       	breq	.+18     	; 0x46d8 <lora_driver_reset_rn2483+0x16>
    46c6:	e0 91 8b 1a 	lds	r30, 0x1A8B	; 0x801a8b <register_access+0x12>
    46ca:	f0 91 8c 1a 	lds	r31, 0x1A8C	; 0x801a8c <register_access+0x13>
    46ce:	64 e0       	ldi	r22, 0x04	; 4
    46d0:	88 e0       	ldi	r24, 0x08	; 8
    46d2:	91 e0       	ldi	r25, 0x01	; 1
    46d4:	19 95       	eicall
    46d6:	08 95       	ret
    46d8:	e0 91 81 1a 	lds	r30, 0x1A81	; 0x801a81 <register_access+0x8>
    46dc:	f0 91 82 1a 	lds	r31, 0x1A82	; 0x801a82 <register_access+0x9>
    46e0:	64 e0       	ldi	r22, 0x04	; 4
    46e2:	88 e0       	ldi	r24, 0x08	; 8
    46e4:	91 e0       	ldi	r25, 0x01	; 1
    46e6:	19 95       	eicall
    46e8:	08 95       	ret

000046ea <lora_driver_rn2483_factory_reset>:
    46ea:	60 e0       	ldi	r22, 0x00	; 0
    46ec:	70 e0       	ldi	r23, 0x00	; 0
    46ee:	82 e1       	ldi	r24, 0x12	; 18
    46f0:	95 e0       	ldi	r25, 0x05	; 5
    46f2:	cb de       	rcall	.-618    	; 0x448a <_upload_message>
    46f4:	e8 e0       	ldi	r30, 0x08	; 8
    46f6:	fa e1       	ldi	r31, 0x1A	; 26
    46f8:	01 90       	ld	r0, Z+
    46fa:	00 20       	and	r0, r0
    46fc:	e9 f7       	brne	.-6      	; 0x46f8 <lora_driver_rn2483_factory_reset+0xe>
    46fe:	31 97       	sbiw	r30, 0x01	; 1
    4700:	e8 50       	subi	r30, 0x08	; 8
    4702:	fa 41       	sbci	r31, 0x1A	; 26
    4704:	81 e0       	ldi	r24, 0x01	; 1
    4706:	75 97       	sbiw	r30, 0x15	; 21
    4708:	08 f0       	brcs	.+2      	; 0x470c <lora_driver_rn2483_factory_reset+0x22>
    470a:	80 e0       	ldi	r24, 0x00	; 0
    470c:	08 95       	ret

0000470e <lora_driver_get_rn2483_hweui>:
    470e:	cf 93       	push	r28
    4710:	df 93       	push	r29
    4712:	ec 01       	movw	r28, r24
    4714:	60 e0       	ldi	r22, 0x00	; 0
    4716:	70 e0       	ldi	r23, 0x00	; 0
    4718:	83 e2       	ldi	r24, 0x23	; 35
    471a:	95 e0       	ldi	r25, 0x05	; 5
    471c:	b6 de       	rcall	.-660    	; 0x448a <_upload_message>
    471e:	e8 e0       	ldi	r30, 0x08	; 8
    4720:	fa e1       	ldi	r31, 0x1A	; 26
    4722:	01 90       	ld	r0, Z+
    4724:	00 20       	and	r0, r0
    4726:	e9 f7       	brne	.-6      	; 0x4722 <lora_driver_get_rn2483_hweui+0x14>
    4728:	e9 51       	subi	r30, 0x19	; 25
    472a:	fa 41       	sbci	r31, 0x1A	; 26
    472c:	39 f4       	brne	.+14     	; 0x473c <lora_driver_get_rn2483_hweui+0x2e>
    472e:	68 e0       	ldi	r22, 0x08	; 8
    4730:	7a e1       	ldi	r23, 0x1A	; 26
    4732:	ce 01       	movw	r24, r28
    4734:	0e 94 51 31 	call	0x62a2	; 0x62a2 <strcpy>
    4738:	80 e0       	ldi	r24, 0x00	; 0
    473a:	02 c0       	rjmp	.+4      	; 0x4740 <lora_driver_get_rn2483_hweui+0x32>
    473c:	18 82       	st	Y, r1
    473e:	81 e0       	ldi	r24, 0x01	; 1
    4740:	df 91       	pop	r29
    4742:	cf 91       	pop	r28
    4744:	08 95       	ret

00004746 <lora_driver_set_device_identifier>:
    4746:	fc 01       	movw	r30, r24
    4748:	01 90       	ld	r0, Z+
    474a:	00 20       	and	r0, r0
    474c:	e9 f7       	brne	.-6      	; 0x4748 <lora_driver_set_device_identifier+0x2>
    474e:	9f 01       	movw	r18, r30
    4750:	21 51       	subi	r18, 0x11	; 17
    4752:	31 09       	sbc	r19, r1
    4754:	28 17       	cp	r18, r24
    4756:	39 07       	cpc	r19, r25
    4758:	29 f4       	brne	.+10     	; 0x4764 <lora_driver_set_device_identifier+0x1e>
    475a:	bc 01       	movw	r22, r24
    475c:	81 e5       	ldi	r24, 0x51	; 81
    475e:	95 e0       	ldi	r25, 0x05	; 5
    4760:	63 cf       	rjmp	.-314    	; 0x4628 <_upload_message_rc>
    4762:	08 95       	ret
    4764:	89 e0       	ldi	r24, 0x09	; 9
    4766:	08 95       	ret

00004768 <lora_driver_set_application_identifier>:
    4768:	fc 01       	movw	r30, r24
    476a:	01 90       	ld	r0, Z+
    476c:	00 20       	and	r0, r0
    476e:	e9 f7       	brne	.-6      	; 0x476a <lora_driver_set_application_identifier+0x2>
    4770:	9f 01       	movw	r18, r30
    4772:	21 51       	subi	r18, 0x11	; 17
    4774:	31 09       	sbc	r19, r1
    4776:	28 17       	cp	r18, r24
    4778:	39 07       	cpc	r19, r25
    477a:	29 f4       	brne	.+10     	; 0x4786 <lora_driver_set_application_identifier+0x1e>
    477c:	bc 01       	movw	r22, r24
    477e:	80 e6       	ldi	r24, 0x60	; 96
    4780:	95 e0       	ldi	r25, 0x05	; 5
    4782:	52 cf       	rjmp	.-348    	; 0x4628 <_upload_message_rc>
    4784:	08 95       	ret
    4786:	89 e0       	ldi	r24, 0x09	; 9
    4788:	08 95       	ret

0000478a <lora_driver_set_application_key>:
    478a:	fc 01       	movw	r30, r24
    478c:	01 90       	ld	r0, Z+
    478e:	00 20       	and	r0, r0
    4790:	e9 f7       	brne	.-6      	; 0x478c <lora_driver_set_application_key+0x2>
    4792:	9f 01       	movw	r18, r30
    4794:	21 52       	subi	r18, 0x21	; 33
    4796:	31 09       	sbc	r19, r1
    4798:	28 17       	cp	r18, r24
    479a:	39 07       	cpc	r19, r25
    479c:	29 f4       	brne	.+10     	; 0x47a8 <lora_driver_set_application_key+0x1e>
    479e:	bc 01       	movw	r22, r24
    47a0:	8f e6       	ldi	r24, 0x6F	; 111
    47a2:	95 e0       	ldi	r25, 0x05	; 5
    47a4:	41 cf       	rjmp	.-382    	; 0x4628 <_upload_message_rc>
    47a6:	08 95       	ret
    47a8:	89 e0       	ldi	r24, 0x09	; 9
    47aa:	08 95       	ret

000047ac <lora_driver_save_mac>:
    47ac:	60 e0       	ldi	r22, 0x00	; 0
    47ae:	70 e0       	ldi	r23, 0x00	; 0
    47b0:	8e ea       	ldi	r24, 0xAE	; 174
    47b2:	95 e0       	ldi	r25, 0x05	; 5
    47b4:	39 cf       	rjmp	.-398    	; 0x4628 <_upload_message_rc>
    47b6:	08 95       	ret

000047b8 <lora_driver_join>:
    47b8:	0f 93       	push	r16
    47ba:	1f 93       	push	r17
    47bc:	e8 2f       	mov	r30, r24
    47be:	f0 e0       	ldi	r31, 0x00	; 0
    47c0:	ee 0f       	add	r30, r30
    47c2:	ff 1f       	adc	r31, r31
    47c4:	e8 57       	subi	r30, 0x78	; 120
    47c6:	f8 4f       	sbci	r31, 0xF8	; 248
    47c8:	60 81       	ld	r22, Z
    47ca:	71 81       	ldd	r23, Z+1	; 0x01
    47cc:	87 eb       	ldi	r24, 0xB7	; 183
    47ce:	95 e0       	ldi	r25, 0x05	; 5
    47d0:	2b df       	rcall	.-426    	; 0x4628 <_upload_message_rc>
    47d2:	81 11       	cpse	r24, r1
    47d4:	14 c0       	rjmp	.+40     	; 0x47fe <lora_driver_join+0x46>
    47d6:	08 e2       	ldi	r16, 0x28	; 40
    47d8:	15 e0       	ldi	r17, 0x05	; 5
    47da:	20 e0       	ldi	r18, 0x00	; 0
    47dc:	30 e0       	ldi	r19, 0x00	; 0
    47de:	4d e2       	ldi	r20, 0x2D	; 45
    47e0:	50 e0       	ldi	r21, 0x00	; 0
    47e2:	68 e0       	ldi	r22, 0x08	; 8
    47e4:	7a e1       	ldi	r23, 0x1A	; 26
    47e6:	80 91 7f 19 	lds	r24, 0x197F	; 0x80197f <_serial_reply_buffer_handle>
    47ea:	90 91 80 19 	lds	r25, 0x1980	; 0x801980 <_serial_reply_buffer_handle+0x1>
    47ee:	0e 94 12 14 	call	0x2824	; 0x2824 <xStreamBufferReceive>
    47f2:	88 23       	and	r24, r24
    47f4:	21 f0       	breq	.+8      	; 0x47fe <lora_driver_join+0x46>
    47f6:	88 e0       	ldi	r24, 0x08	; 8
    47f8:	9a e1       	ldi	r25, 0x1A	; 26
    47fa:	a1 de       	rcall	.-702    	; 0x453e <_reply2return_code>
    47fc:	03 c0       	rjmp	.+6      	; 0x4804 <lora_driver_join+0x4c>
    47fe:	88 e0       	ldi	r24, 0x08	; 8
    4800:	9a e1       	ldi	r25, 0x1A	; 26
    4802:	9d de       	rcall	.-710    	; 0x453e <_reply2return_code>
    4804:	1f 91       	pop	r17
    4806:	0f 91       	pop	r16
    4808:	08 95       	ret

0000480a <lora_driver_sent_upload_message>:
    480a:	0f 93       	push	r16
    480c:	1f 93       	push	r17
    480e:	cf 93       	push	r28
    4810:	df 93       	push	r29
    4812:	1f 92       	push	r1
    4814:	cd b7       	in	r28, 0x3d	; 61
    4816:	de b7       	in	r29, 0x3e	; 62
    4818:	db 01       	movw	r26, r22
    481a:	11 96       	adiw	r26, 0x01	; 1
    481c:	9c 91       	ld	r25, X
    481e:	11 97       	sbiw	r26, 0x01	; 1
    4820:	95 31       	cpi	r25, 0x15	; 21
    4822:	08 f0       	brcs	.+2      	; 0x4826 <lora_driver_sent_upload_message+0x1c>
    4824:	b4 c0       	rjmp	.+360    	; 0x498e <lora_driver_sent_upload_message+0x184>
    4826:	99 23       	and	r25, r25
    4828:	81 f1       	breq	.+96     	; 0x488a <lora_driver_sent_upload_message+0x80>
    482a:	60 e0       	ldi	r22, 0x00	; 0
    482c:	70 e0       	ldi	r23, 0x00	; 0
    482e:	27 2f       	mov	r18, r23
    4830:	30 e0       	ldi	r19, 0x00	; 0
    4832:	46 2f       	mov	r20, r22
    4834:	50 e0       	ldi	r21, 0x00	; 0
    4836:	fd 01       	movw	r30, r26
    4838:	e4 0f       	add	r30, r20
    483a:	f5 1f       	adc	r31, r21
    483c:	92 81       	ldd	r25, Z+2	; 0x02
    483e:	92 95       	swap	r25
    4840:	9f 70       	andi	r25, 0x0F	; 15
    4842:	9a 30       	cpi	r25, 0x0A	; 10
    4844:	10 f0       	brcs	.+4      	; 0x484a <lora_driver_sent_upload_message+0x40>
    4846:	99 5c       	subi	r25, 0xC9	; 201
    4848:	01 c0       	rjmp	.+2      	; 0x484c <lora_driver_sent_upload_message+0x42>
    484a:	90 5d       	subi	r25, 0xD0	; 208
    484c:	f9 01       	movw	r30, r18
    484e:	e7 56       	subi	r30, 0x67	; 103
    4850:	f6 4e       	sbci	r31, 0xE6	; 230
    4852:	90 83       	st	Z, r25
    4854:	2f 5f       	subi	r18, 0xFF	; 255
    4856:	3f 4f       	sbci	r19, 0xFF	; 255
    4858:	fd 01       	movw	r30, r26
    485a:	e4 0f       	add	r30, r20
    485c:	f5 1f       	adc	r31, r21
    485e:	92 81       	ldd	r25, Z+2	; 0x02
    4860:	9f 70       	andi	r25, 0x0F	; 15
    4862:	49 2f       	mov	r20, r25
    4864:	50 e0       	ldi	r21, 0x00	; 0
    4866:	4a 30       	cpi	r20, 0x0A	; 10
    4868:	51 05       	cpc	r21, r1
    486a:	14 f0       	brlt	.+4      	; 0x4870 <lora_driver_sent_upload_message+0x66>
    486c:	99 5c       	subi	r25, 0xC9	; 201
    486e:	01 c0       	rjmp	.+2      	; 0x4872 <lora_driver_sent_upload_message+0x68>
    4870:	90 5d       	subi	r25, 0xD0	; 208
    4872:	f9 01       	movw	r30, r18
    4874:	e7 56       	subi	r30, 0x67	; 103
    4876:	f6 4e       	sbci	r31, 0xE6	; 230
    4878:	90 83       	st	Z, r25
    487a:	7e 5f       	subi	r23, 0xFE	; 254
    487c:	6f 5f       	subi	r22, 0xFF	; 255
    487e:	11 96       	adiw	r26, 0x01	; 1
    4880:	9c 91       	ld	r25, X
    4882:	11 97       	sbiw	r26, 0x01	; 1
    4884:	69 17       	cp	r22, r25
    4886:	98 f2       	brcs	.-90     	; 0x482e <lora_driver_sent_upload_message+0x24>
    4888:	01 c0       	rjmp	.+2      	; 0x488c <lora_driver_sent_upload_message+0x82>
    488a:	70 e0       	ldi	r23, 0x00	; 0
    488c:	e7 2f       	mov	r30, r23
    488e:	f0 e0       	ldi	r31, 0x00	; 0
    4890:	e7 56       	subi	r30, 0x67	; 103
    4892:	f6 4e       	sbci	r31, 0xE6	; 230
    4894:	10 82       	st	Z, r1
    4896:	4c 91       	ld	r20, X
    4898:	81 11       	cpse	r24, r1
    489a:	03 c0       	rjmp	.+6      	; 0x48a2 <lora_driver_sent_upload_message+0x98>
    489c:	80 ec       	ldi	r24, 0xC0	; 192
    489e:	95 e0       	ldi	r25, 0x05	; 5
    48a0:	02 c0       	rjmp	.+4      	; 0x48a6 <lora_driver_sent_upload_message+0x9c>
    48a2:	82 ec       	ldi	r24, 0xC2	; 194
    48a4:	95 e0       	ldi	r25, 0x05	; 5
    48a6:	29 e9       	ldi	r18, 0x99	; 153
    48a8:	39 e1       	ldi	r19, 0x19	; 25
    48aa:	3f 93       	push	r19
    48ac:	2f 93       	push	r18
    48ae:	1f 92       	push	r1
    48b0:	4f 93       	push	r20
    48b2:	9f 93       	push	r25
    48b4:	8f 93       	push	r24
    48b6:	86 ec       	ldi	r24, 0xC6	; 198
    48b8:	95 e0       	ldi	r25, 0x05	; 5
    48ba:	9f 93       	push	r25
    48bc:	8f 93       	push	r24
    48be:	8b ed       	ldi	r24, 0xDB	; 219
    48c0:	99 e1       	ldi	r25, 0x19	; 25
    48c2:	9f 93       	push	r25
    48c4:	8f 93       	push	r24
    48c6:	0e 94 b3 31 	call	0x6366	; 0x6366 <sprintf>
    48ca:	60 e0       	ldi	r22, 0x00	; 0
    48cc:	70 e0       	ldi	r23, 0x00	; 0
    48ce:	8b ed       	ldi	r24, 0xDB	; 219
    48d0:	99 e1       	ldi	r25, 0x19	; 25
    48d2:	aa de       	rcall	.-684    	; 0x4628 <_upload_message_rc>
    48d4:	0f b6       	in	r0, 0x3f	; 63
    48d6:	f8 94       	cli
    48d8:	de bf       	out	0x3e, r29	; 62
    48da:	0f be       	out	0x3f, r0	; 63
    48dc:	cd bf       	out	0x3d, r28	; 61
    48de:	81 11       	cpse	r24, r1
    48e0:	59 c0       	rjmp	.+178    	; 0x4994 <lora_driver_sent_upload_message+0x18a>
    48e2:	08 e2       	ldi	r16, 0x28	; 40
    48e4:	15 e0       	ldi	r17, 0x05	; 5
    48e6:	20 e0       	ldi	r18, 0x00	; 0
    48e8:	30 e0       	ldi	r19, 0x00	; 0
    48ea:	4d e2       	ldi	r20, 0x2D	; 45
    48ec:	50 e0       	ldi	r21, 0x00	; 0
    48ee:	68 e0       	ldi	r22, 0x08	; 8
    48f0:	7a e1       	ldi	r23, 0x1A	; 26
    48f2:	80 91 7f 19 	lds	r24, 0x197F	; 0x80197f <_serial_reply_buffer_handle>
    48f6:	90 91 80 19 	lds	r25, 0x1980	; 0x801980 <_serial_reply_buffer_handle+0x1>
    48fa:	0e 94 12 14 	call	0x2824	; 0x2824 <xStreamBufferReceive>
    48fe:	88 23       	and	r24, r24
    4900:	09 f4       	brne	.+2      	; 0x4904 <lora_driver_sent_upload_message+0xfa>
    4902:	47 c0       	rjmp	.+142    	; 0x4992 <lora_driver_sent_upload_message+0x188>
    4904:	88 e0       	ldi	r24, 0x08	; 8
    4906:	9a e1       	ldi	r25, 0x1A	; 26
    4908:	1a de       	rcall	.-972    	; 0x453e <_reply2return_code>
    490a:	8e 30       	cpi	r24, 0x0E	; 14
    490c:	09 f0       	breq	.+2      	; 0x4910 <lora_driver_sent_upload_message+0x106>
    490e:	42 c0       	rjmp	.+132    	; 0x4994 <lora_driver_sent_upload_message+0x18a>
    4910:	87 e0       	ldi	r24, 0x07	; 7
    4912:	89 83       	std	Y+1, r24	; 0x01
    4914:	80 91 7d 19 	lds	r24, 0x197D	; 0x80197d <_downlinkMessageBuffer>
    4918:	90 91 7e 19 	lds	r25, 0x197E	; 0x80197e <_downlinkMessageBuffer+0x1>
    491c:	89 2b       	or	r24, r25
    491e:	a9 f1       	breq	.+106    	; 0x498a <lora_driver_sent_upload_message+0x180>
    4920:	be 01       	movw	r22, r28
    4922:	6f 5f       	subi	r22, 0xFF	; 255
    4924:	7f 4f       	sbci	r23, 0xFF	; 255
    4926:	88 e0       	ldi	r24, 0x08	; 8
    4928:	9a e1       	ldi	r25, 0x1A	; 26
    492a:	68 d1       	rcall	.+720    	; 0x4bfc <decode_port_no>
    492c:	80 93 83 19 	sts	0x1983, r24	; 0x801983 <_downlink_payload>
    4930:	e9 81       	ldd	r30, Y+1	; 0x01
    4932:	f0 e0       	ldi	r31, 0x00	; 0
    4934:	e8 5f       	subi	r30, 0xF8	; 248
    4936:	f5 4e       	sbci	r31, 0xE5	; 229
    4938:	df 01       	movw	r26, r30
    493a:	0d 90       	ld	r0, X+
    493c:	00 20       	and	r0, r0
    493e:	e9 f7       	brne	.-6      	; 0x493a <lora_driver_sent_upload_message+0x130>
    4940:	11 97       	sbiw	r26, 0x01	; 1
    4942:	ae 1b       	sub	r26, r30
    4944:	bf 0b       	sbc	r27, r31
    4946:	aa 23       	and	r26, r26
    4948:	91 f0       	breq	.+36     	; 0x496e <lora_driver_sent_upload_message+0x164>
    494a:	bb 27       	eor	r27, r27
    494c:	cd 01       	movw	r24, r26
    494e:	01 97       	sbiw	r24, 0x01	; 1
    4950:	9c 01       	movw	r18, r24
    4952:	12 f4       	brpl	.+4      	; 0x4958 <lora_driver_sent_upload_message+0x14e>
    4954:	2f 5f       	subi	r18, 0xFF	; 255
    4956:	3f 4f       	sbci	r19, 0xFF	; 255
    4958:	35 95       	asr	r19
    495a:	27 95       	ror	r18
    495c:	20 93 84 19 	sts	0x1984, r18	; 0x801984 <_downlink_payload+0x1>
    4960:	af 01       	movw	r20, r30
    4962:	4f 5f       	subi	r20, 0xFF	; 255
    4964:	5f 4f       	sbci	r21, 0xFF	; 255
    4966:	64 e1       	ldi	r22, 0x14	; 20
    4968:	85 e8       	ldi	r24, 0x85	; 133
    496a:	99 e1       	ldi	r25, 0x19	; 25
    496c:	73 d1       	rcall	.+742    	; 0x4c54 <decode_hexadecimal_string_bytes>
    496e:	01 e0       	ldi	r16, 0x01	; 1
    4970:	10 e0       	ldi	r17, 0x00	; 0
    4972:	20 e0       	ldi	r18, 0x00	; 0
    4974:	30 e0       	ldi	r19, 0x00	; 0
    4976:	46 e1       	ldi	r20, 0x16	; 22
    4978:	50 e0       	ldi	r21, 0x00	; 0
    497a:	63 e8       	ldi	r22, 0x83	; 131
    497c:	79 e1       	ldi	r23, 0x19	; 25
    497e:	80 91 7d 19 	lds	r24, 0x197D	; 0x80197d <_downlinkMessageBuffer>
    4982:	90 91 7e 19 	lds	r25, 0x197E	; 0x80197e <_downlinkMessageBuffer+0x1>
    4986:	0e 94 25 13 	call	0x264a	; 0x264a <xStreamBufferSend>
    498a:	8e e0       	ldi	r24, 0x0E	; 14
    498c:	03 c0       	rjmp	.+6      	; 0x4994 <lora_driver_sent_upload_message+0x18a>
    498e:	84 e1       	ldi	r24, 0x14	; 20
    4990:	01 c0       	rjmp	.+2      	; 0x4994 <lora_driver_sent_upload_message+0x18a>
    4992:	80 e0       	ldi	r24, 0x00	; 0
    4994:	0f 90       	pop	r0
    4996:	df 91       	pop	r29
    4998:	cf 91       	pop	r28
    499a:	1f 91       	pop	r17
    499c:	0f 91       	pop	r16
    499e:	08 95       	ret

000049a0 <lora_driver_set_adaptive_data_rate>:
    49a0:	81 30       	cpi	r24, 0x01	; 1
    49a2:	19 f0       	breq	.+6      	; 0x49aa <lora_driver_set_adaptive_data_rate+0xa>
    49a4:	66 ed       	ldi	r22, 0xD6	; 214
    49a6:	75 e0       	ldi	r23, 0x05	; 5
    49a8:	02 c0       	rjmp	.+4      	; 0x49ae <lora_driver_set_adaptive_data_rate+0xe>
    49aa:	6f ea       	ldi	r22, 0xAF	; 175
    49ac:	76 e0       	ldi	r23, 0x06	; 6
    49ae:	8a ed       	ldi	r24, 0xDA	; 218
    49b0:	95 e0       	ldi	r25, 0x05	; 5
    49b2:	3a ce       	rjmp	.-908    	; 0x4628 <_upload_message_rc>
    49b4:	08 95       	ret

000049b6 <lora_driver_set_receive_delay>:
    49b6:	9f 93       	push	r25
    49b8:	8f 93       	push	r24
    49ba:	8b e0       	ldi	r24, 0x0B	; 11
    49bc:	96 e0       	ldi	r25, 0x06	; 6
    49be:	9f 93       	push	r25
    49c0:	8f 93       	push	r24
    49c2:	8b ed       	ldi	r24, 0xDB	; 219
    49c4:	99 e1       	ldi	r25, 0x19	; 25
    49c6:	9f 93       	push	r25
    49c8:	8f 93       	push	r24
    49ca:	0e 94 b3 31 	call	0x6366	; 0x6366 <sprintf>
    49ce:	60 e0       	ldi	r22, 0x00	; 0
    49d0:	70 e0       	ldi	r23, 0x00	; 0
    49d2:	8b ed       	ldi	r24, 0xDB	; 219
    49d4:	99 e1       	ldi	r25, 0x19	; 25
    49d6:	28 de       	rcall	.-944    	; 0x4628 <_upload_message_rc>
    49d8:	0f 90       	pop	r0
    49da:	0f 90       	pop	r0
    49dc:	0f 90       	pop	r0
    49de:	0f 90       	pop	r0
    49e0:	0f 90       	pop	r0
    49e2:	0f 90       	pop	r0
    49e4:	08 95       	ret

000049e6 <lora_driver_configure_to_eu868>:
    49e6:	2f 92       	push	r2
    49e8:	3f 92       	push	r3
    49ea:	4f 92       	push	r4
    49ec:	5f 92       	push	r5
    49ee:	6f 92       	push	r6
    49f0:	7f 92       	push	r7
    49f2:	8f 92       	push	r8
    49f4:	9f 92       	push	r9
    49f6:	af 92       	push	r10
    49f8:	bf 92       	push	r11
    49fa:	cf 92       	push	r12
    49fc:	df 92       	push	r13
    49fe:	ef 92       	push	r14
    4a00:	ff 92       	push	r15
    4a02:	0f 93       	push	r16
    4a04:	1f 93       	push	r17
    4a06:	cf 93       	push	r28
    4a08:	df 93       	push	r29
    4a0a:	cd b7       	in	r28, 0x3d	; 61
    4a0c:	de b7       	in	r29, 0x3e	; 62
    4a0e:	a0 97       	sbiw	r28, 0x20	; 32
    4a10:	0f b6       	in	r0, 0x3f	; 63
    4a12:	f8 94       	cli
    4a14:	de bf       	out	0x3e, r29	; 62
    4a16:	0f be       	out	0x3f, r0	; 63
    4a18:	cd bf       	out	0x3d, r28	; 61
    4a1a:	68 e3       	ldi	r22, 0x38	; 56
    4a1c:	76 e0       	ldi	r23, 0x06	; 6
    4a1e:	84 e4       	ldi	r24, 0x44	; 68
    4a20:	96 e0       	ldi	r25, 0x06	; 6
    4a22:	33 dd       	rcall	.-1434   	; 0x448a <_upload_message>
    4a24:	8c dd       	rcall	.-1256   	; 0x453e <_reply2return_code>
    4a26:	81 11       	cpse	r24, r1
    4a28:	a3 c0       	rjmp	.+326    	; 0x4b70 <lora_driver_configure_to_eu868+0x18a>
    4a2a:	80 e2       	ldi	r24, 0x20	; 32
    4a2c:	e5 e2       	ldi	r30, 0x25	; 37
    4a2e:	f2 e0       	ldi	r31, 0x02	; 2
    4a30:	de 01       	movw	r26, r28
    4a32:	11 96       	adiw	r26, 0x01	; 1
    4a34:	01 90       	ld	r0, Z+
    4a36:	0d 92       	st	X+, r0
    4a38:	8a 95       	dec	r24
    4a3a:	e1 f7       	brne	.-8      	; 0x4a34 <lora_driver_configure_to_eu868+0x4e>
    4a3c:	9e 01       	movw	r18, r28
    4a3e:	2f 5f       	subi	r18, 0xFF	; 255
    4a40:	3f 4f       	sbci	r19, 0xFF	; 255
    4a42:	69 01       	movw	r12, r18
    4a44:	e1 2c       	mov	r14, r1
    4a46:	f1 2c       	mov	r15, r1
    4a48:	0f 2e       	mov	r0, r31
    4a4a:	f0 e5       	ldi	r31, 0x50	; 80
    4a4c:	af 2e       	mov	r10, r31
    4a4e:	f6 e0       	ldi	r31, 0x06	; 6
    4a50:	bf 2e       	mov	r11, r31
    4a52:	f0 2d       	mov	r31, r0
    4a54:	0b ed       	ldi	r16, 0xDB	; 219
    4a56:	19 e1       	ldi	r17, 0x19	; 25
    4a58:	0f 2e       	mov	r0, r31
    4a5a:	f9 e6       	ldi	r31, 0x69	; 105
    4a5c:	4f 2e       	mov	r4, r31
    4a5e:	f6 e0       	ldi	r31, 0x06	; 6
    4a60:	5f 2e       	mov	r5, r31
    4a62:	f0 2d       	mov	r31, r0
    4a64:	0f 2e       	mov	r0, r31
    4a66:	f0 e8       	ldi	r31, 0x80	; 128
    4a68:	8f 2e       	mov	r8, r31
    4a6a:	f6 e0       	ldi	r31, 0x06	; 6
    4a6c:	9f 2e       	mov	r9, r31
    4a6e:	f0 2d       	mov	r31, r0
    4a70:	0f 2e       	mov	r0, r31
    4a72:	fa e9       	ldi	r31, 0x9A	; 154
    4a74:	6f 2e       	mov	r6, r31
    4a76:	f6 e0       	ldi	r31, 0x06	; 6
    4a78:	7f 2e       	mov	r7, r31
    4a7a:	f0 2d       	mov	r31, r0
    4a7c:	3e 2c       	mov	r3, r14
    4a7e:	2f 2c       	mov	r2, r15
    4a80:	ff 92       	push	r15
    4a82:	ef 92       	push	r14
    4a84:	bf 92       	push	r11
    4a86:	af 92       	push	r10
    4a88:	1f 93       	push	r17
    4a8a:	0f 93       	push	r16
    4a8c:	0e 94 b3 31 	call	0x6366	; 0x6366 <sprintf>
    4a90:	60 e0       	ldi	r22, 0x00	; 0
    4a92:	70 e0       	ldi	r23, 0x00	; 0
    4a94:	c8 01       	movw	r24, r16
    4a96:	f9 dc       	rcall	.-1550   	; 0x448a <_upload_message>
    4a98:	52 dd       	rcall	.-1372   	; 0x453e <_reply2return_code>
    4a9a:	0f 90       	pop	r0
    4a9c:	0f 90       	pop	r0
    4a9e:	0f 90       	pop	r0
    4aa0:	0f 90       	pop	r0
    4aa2:	0f 90       	pop	r0
    4aa4:	0f 90       	pop	r0
    4aa6:	81 11       	cpse	r24, r1
    4aa8:	63 c0       	rjmp	.+198    	; 0x4b70 <lora_driver_configure_to_eu868+0x18a>
    4aaa:	32 e0       	ldi	r19, 0x02	; 2
    4aac:	3e 15       	cp	r19, r14
    4aae:	e8 f4       	brcc	.+58     	; 0x4aea <lora_driver_configure_to_eu868+0x104>
    4ab0:	f6 01       	movw	r30, r12
    4ab2:	83 81       	ldd	r24, Z+3	; 0x03
    4ab4:	8f 93       	push	r24
    4ab6:	82 81       	ldd	r24, Z+2	; 0x02
    4ab8:	8f 93       	push	r24
    4aba:	81 81       	ldd	r24, Z+1	; 0x01
    4abc:	8f 93       	push	r24
    4abe:	80 81       	ld	r24, Z
    4ac0:	8f 93       	push	r24
    4ac2:	ff 92       	push	r15
    4ac4:	ef 92       	push	r14
    4ac6:	5f 92       	push	r5
    4ac8:	4f 92       	push	r4
    4aca:	1f 93       	push	r17
    4acc:	0f 93       	push	r16
    4ace:	0e 94 b3 31 	call	0x6366	; 0x6366 <sprintf>
    4ad2:	60 e0       	ldi	r22, 0x00	; 0
    4ad4:	70 e0       	ldi	r23, 0x00	; 0
    4ad6:	c8 01       	movw	r24, r16
    4ad8:	d8 dc       	rcall	.-1616   	; 0x448a <_upload_message>
    4ada:	31 dd       	rcall	.-1438   	; 0x453e <_reply2return_code>
    4adc:	0f b6       	in	r0, 0x3f	; 63
    4ade:	f8 94       	cli
    4ae0:	de bf       	out	0x3e, r29	; 62
    4ae2:	0f be       	out	0x3f, r0	; 63
    4ae4:	cd bf       	out	0x3d, r28	; 61
    4ae6:	81 11       	cpse	r24, r1
    4ae8:	43 c0       	rjmp	.+134    	; 0x4b70 <lora_driver_configure_to_eu868+0x18a>
    4aea:	2f 92       	push	r2
    4aec:	3f 92       	push	r3
    4aee:	9f 92       	push	r9
    4af0:	8f 92       	push	r8
    4af2:	1f 93       	push	r17
    4af4:	0f 93       	push	r16
    4af6:	0e 94 b3 31 	call	0x6366	; 0x6366 <sprintf>
    4afa:	60 e0       	ldi	r22, 0x00	; 0
    4afc:	70 e0       	ldi	r23, 0x00	; 0
    4afe:	c8 01       	movw	r24, r16
    4b00:	c4 dc       	rcall	.-1656   	; 0x448a <_upload_message>
    4b02:	1d dd       	rcall	.-1478   	; 0x453e <_reply2return_code>
    4b04:	0f 90       	pop	r0
    4b06:	0f 90       	pop	r0
    4b08:	0f 90       	pop	r0
    4b0a:	0f 90       	pop	r0
    4b0c:	0f 90       	pop	r0
    4b0e:	0f 90       	pop	r0
    4b10:	81 11       	cpse	r24, r1
    4b12:	2e c0       	rjmp	.+92     	; 0x4b70 <lora_driver_configure_to_eu868+0x18a>
    4b14:	2f 92       	push	r2
    4b16:	3f 92       	push	r3
    4b18:	7f 92       	push	r7
    4b1a:	6f 92       	push	r6
    4b1c:	1f 93       	push	r17
    4b1e:	0f 93       	push	r16
    4b20:	0e 94 b3 31 	call	0x6366	; 0x6366 <sprintf>
    4b24:	60 e0       	ldi	r22, 0x00	; 0
    4b26:	70 e0       	ldi	r23, 0x00	; 0
    4b28:	c8 01       	movw	r24, r16
    4b2a:	af dc       	rcall	.-1698   	; 0x448a <_upload_message>
    4b2c:	08 dd       	rcall	.-1520   	; 0x453e <_reply2return_code>
    4b2e:	0f 90       	pop	r0
    4b30:	0f 90       	pop	r0
    4b32:	0f 90       	pop	r0
    4b34:	0f 90       	pop	r0
    4b36:	0f 90       	pop	r0
    4b38:	0f 90       	pop	r0
    4b3a:	81 11       	cpse	r24, r1
    4b3c:	19 c0       	rjmp	.+50     	; 0x4b70 <lora_driver_configure_to_eu868+0x18a>
    4b3e:	3f ef       	ldi	r19, 0xFF	; 255
    4b40:	e3 1a       	sub	r14, r19
    4b42:	f3 0a       	sbc	r15, r19
    4b44:	84 e0       	ldi	r24, 0x04	; 4
    4b46:	c8 0e       	add	r12, r24
    4b48:	d1 1c       	adc	r13, r1
    4b4a:	98 e0       	ldi	r25, 0x08	; 8
    4b4c:	e9 16       	cp	r14, r25
    4b4e:	f1 04       	cpc	r15, r1
    4b50:	09 f0       	breq	.+2      	; 0x4b54 <lora_driver_configure_to_eu868+0x16e>
    4b52:	94 cf       	rjmp	.-216    	; 0x4a7c <lora_driver_configure_to_eu868+0x96>
    4b54:	60 e0       	ldi	r22, 0x00	; 0
    4b56:	70 e0       	ldi	r23, 0x00	; 0
    4b58:	82 eb       	ldi	r24, 0xB2	; 178
    4b5a:	96 e0       	ldi	r25, 0x06	; 6
    4b5c:	96 dc       	rcall	.-1748   	; 0x448a <_upload_message>
    4b5e:	ef dc       	rcall	.-1570   	; 0x453e <_reply2return_code>
    4b60:	81 11       	cpse	r24, r1
    4b62:	06 c0       	rjmp	.+12     	; 0x4b70 <lora_driver_configure_to_eu868+0x18a>
    4b64:	60 e0       	ldi	r22, 0x00	; 0
    4b66:	70 e0       	ldi	r23, 0x00	; 0
    4b68:	83 ec       	ldi	r24, 0xC3	; 195
    4b6a:	96 e0       	ldi	r25, 0x06	; 6
    4b6c:	8e dc       	rcall	.-1764   	; 0x448a <_upload_message>
    4b6e:	e7 dc       	rcall	.-1586   	; 0x453e <_reply2return_code>
    4b70:	a0 96       	adiw	r28, 0x20	; 32
    4b72:	0f b6       	in	r0, 0x3f	; 63
    4b74:	f8 94       	cli
    4b76:	de bf       	out	0x3e, r29	; 62
    4b78:	0f be       	out	0x3f, r0	; 63
    4b7a:	cd bf       	out	0x3d, r28	; 61
    4b7c:	df 91       	pop	r29
    4b7e:	cf 91       	pop	r28
    4b80:	1f 91       	pop	r17
    4b82:	0f 91       	pop	r16
    4b84:	ff 90       	pop	r15
    4b86:	ef 90       	pop	r14
    4b88:	df 90       	pop	r13
    4b8a:	cf 90       	pop	r12
    4b8c:	bf 90       	pop	r11
    4b8e:	af 90       	pop	r10
    4b90:	9f 90       	pop	r9
    4b92:	8f 90       	pop	r8
    4b94:	7f 90       	pop	r7
    4b96:	6f 90       	pop	r6
    4b98:	5f 90       	pop	r5
    4b9a:	4f 90       	pop	r4
    4b9c:	3f 90       	pop	r3
    4b9e:	2f 90       	pop	r2
    4ba0:	08 95       	ret

00004ba2 <lora_driver_set_otaa_identity>:
    4ba2:	ef 92       	push	r14
    4ba4:	ff 92       	push	r15
    4ba6:	0f 93       	push	r16
    4ba8:	1f 93       	push	r17
    4baa:	cf 93       	push	r28
    4bac:	df 93       	push	r29
    4bae:	ec 01       	movw	r28, r24
    4bb0:	8b 01       	movw	r16, r22
    4bb2:	7a 01       	movw	r14, r20
    4bb4:	81 e0       	ldi	r24, 0x01	; 1
    4bb6:	f4 de       	rcall	.-536    	; 0x49a0 <lora_driver_set_adaptive_data_rate>
    4bb8:	81 11       	cpse	r24, r1
    4bba:	0d c0       	rjmp	.+26     	; 0x4bd6 <lora_driver_set_otaa_identity+0x34>
    4bbc:	ce 01       	movw	r24, r28
    4bbe:	d4 dd       	rcall	.-1112   	; 0x4768 <lora_driver_set_application_identifier>
    4bc0:	81 11       	cpse	r24, r1
    4bc2:	09 c0       	rjmp	.+18     	; 0x4bd6 <lora_driver_set_otaa_identity+0x34>
    4bc4:	c8 01       	movw	r24, r16
    4bc6:	e1 dd       	rcall	.-1086   	; 0x478a <lora_driver_set_application_key>
    4bc8:	81 11       	cpse	r24, r1
    4bca:	05 c0       	rjmp	.+10     	; 0x4bd6 <lora_driver_set_otaa_identity+0x34>
    4bcc:	c7 01       	movw	r24, r14
    4bce:	bb dd       	rcall	.-1162   	; 0x4746 <lora_driver_set_device_identifier>
    4bd0:	81 11       	cpse	r24, r1
    4bd2:	01 c0       	rjmp	.+2      	; 0x4bd6 <lora_driver_set_otaa_identity+0x34>
    4bd4:	eb dd       	rcall	.-1066   	; 0x47ac <lora_driver_save_mac>
    4bd6:	df 91       	pop	r29
    4bd8:	cf 91       	pop	r28
    4bda:	1f 91       	pop	r17
    4bdc:	0f 91       	pop	r16
    4bde:	ff 90       	pop	r15
    4be0:	ef 90       	pop	r14
    4be2:	08 95       	ret

00004be4 <lora_driver_map_return_code_to_text>:
    4be4:	90 e0       	ldi	r25, 0x00	; 0
    4be6:	fc 01       	movw	r30, r24
    4be8:	ee 0f       	add	r30, r30
    4bea:	ff 1f       	adc	r31, r31
    4bec:	8e 0f       	add	r24, r30
    4bee:	9f 1f       	adc	r25, r31
    4bf0:	fc 01       	movw	r30, r24
    4bf2:	e4 57       	subi	r30, 0x74	; 116
    4bf4:	f8 4f       	sbci	r31, 0xF8	; 248
    4bf6:	81 81       	ldd	r24, Z+1	; 0x01
    4bf8:	92 81       	ldd	r25, Z+2	; 0x02
    4bfa:	08 95       	ret

00004bfc <decode_port_no>:
    4bfc:	dc 01       	movw	r26, r24
    4bfe:	00 97       	sbiw	r24, 0x00	; 0
    4c00:	29 f1       	breq	.+74     	; 0x4c4c <decode_port_no+0x50>
    4c02:	fb 01       	movw	r30, r22
    4c04:	20 81       	ld	r18, Z
    4c06:	fc 01       	movw	r30, r24
    4c08:	01 90       	ld	r0, Z+
    4c0a:	00 20       	and	r0, r0
    4c0c:	e9 f7       	brne	.-6      	; 0x4c08 <decode_port_no+0xc>
    4c0e:	31 97       	sbiw	r30, 0x01	; 1
    4c10:	e8 1b       	sub	r30, r24
    4c12:	f9 0b       	sbc	r31, r25
    4c14:	82 2f       	mov	r24, r18
    4c16:	90 e0       	ldi	r25, 0x00	; 0
    4c18:	e8 17       	cp	r30, r24
    4c1a:	f9 07       	cpc	r31, r25
    4c1c:	c8 f0       	brcs	.+50     	; 0x4c50 <decode_port_no+0x54>
    4c1e:	80 e0       	ldi	r24, 0x00	; 0
    4c20:	08 c0       	rjmp	.+16     	; 0x4c32 <decode_port_no+0x36>
    4c22:	88 0f       	add	r24, r24
    4c24:	38 2f       	mov	r19, r24
    4c26:	33 0f       	add	r19, r19
    4c28:	33 0f       	add	r19, r19
    4c2a:	83 0f       	add	r24, r19
    4c2c:	80 53       	subi	r24, 0x30	; 48
    4c2e:	89 0f       	add	r24, r25
    4c30:	2f 5f       	subi	r18, 0xFF	; 255
    4c32:	fd 01       	movw	r30, r26
    4c34:	e2 0f       	add	r30, r18
    4c36:	f1 1d       	adc	r31, r1
    4c38:	90 81       	ld	r25, Z
    4c3a:	30 ed       	ldi	r19, 0xD0	; 208
    4c3c:	39 0f       	add	r19, r25
    4c3e:	3a 30       	cpi	r19, 0x0A	; 10
    4c40:	10 f4       	brcc	.+4      	; 0x4c46 <decode_port_no+0x4a>
    4c42:	91 11       	cpse	r25, r1
    4c44:	ee cf       	rjmp	.-36     	; 0x4c22 <decode_port_no+0x26>
    4c46:	fb 01       	movw	r30, r22
    4c48:	20 83       	st	Z, r18
    4c4a:	08 95       	ret
    4c4c:	80 e0       	ldi	r24, 0x00	; 0
    4c4e:	08 95       	ret
    4c50:	80 e0       	ldi	r24, 0x00	; 0
    4c52:	08 95       	ret

00004c54 <decode_hexadecimal_string_bytes>:
    4c54:	0f 93       	push	r16
    4c56:	1f 93       	push	r17
    4c58:	cf 93       	push	r28
    4c5a:	df 93       	push	r29
    4c5c:	dc 01       	movw	r26, r24
    4c5e:	ea 01       	movw	r28, r20
    4c60:	20 97       	sbiw	r28, 0x00	; 0
    4c62:	e1 f1       	breq	.+120    	; 0x4cdc <decode_hexadecimal_string_bytes+0x88>
    4c64:	fa 01       	movw	r30, r20
    4c66:	01 90       	ld	r0, Z+
    4c68:	00 20       	and	r0, r0
    4c6a:	e9 f7       	brne	.-6      	; 0x4c66 <decode_hexadecimal_string_bytes+0x12>
    4c6c:	31 97       	sbiw	r30, 0x01	; 1
    4c6e:	e4 1b       	sub	r30, r20
    4c70:	f5 0b       	sbc	r31, r21
    4c72:	32 97       	sbiw	r30, 0x02	; 2
    4c74:	10 f5       	brcc	.+68     	; 0x4cba <decode_hexadecimal_string_bytes+0x66>
    4c76:	32 c0       	rjmp	.+100    	; 0x4cdc <decode_hexadecimal_string_bytes+0x88>
    4c78:	8d 01       	movw	r16, r26
    4c7a:	04 0f       	add	r16, r20
    4c7c:	15 1f       	adc	r17, r21
    4c7e:	30 e0       	ldi	r19, 0x00	; 0
    4c80:	ae 01       	movw	r20, r28
    4c82:	42 0f       	add	r20, r18
    4c84:	53 1f       	adc	r21, r19
    4c86:	fa 01       	movw	r30, r20
    4c88:	90 81       	ld	r25, Z
    4c8a:	91 34       	cpi	r25, 0x41	; 65
    4c8c:	28 f0       	brcs	.+10     	; 0x4c98 <decode_hexadecimal_string_bytes+0x44>
    4c8e:	97 53       	subi	r25, 0x37	; 55
    4c90:	59 2f       	mov	r21, r25
    4c92:	52 95       	swap	r21
    4c94:	50 7f       	andi	r21, 0xF0	; 240
    4c96:	03 c0       	rjmp	.+6      	; 0x4c9e <decode_hexadecimal_string_bytes+0x4a>
    4c98:	59 2f       	mov	r21, r25
    4c9a:	52 95       	swap	r21
    4c9c:	50 7f       	andi	r21, 0xF0	; 240
    4c9e:	2c 0f       	add	r18, r28
    4ca0:	3d 1f       	adc	r19, r29
    4ca2:	f9 01       	movw	r30, r18
    4ca4:	91 81       	ldd	r25, Z+1	; 0x01
    4ca6:	91 34       	cpi	r25, 0x41	; 65
    4ca8:	10 f0       	brcs	.+4      	; 0x4cae <decode_hexadecimal_string_bytes+0x5a>
    4caa:	97 53       	subi	r25, 0x37	; 55
    4cac:	01 c0       	rjmp	.+2      	; 0x4cb0 <decode_hexadecimal_string_bytes+0x5c>
    4cae:	90 53       	subi	r25, 0x30	; 48
    4cb0:	95 0f       	add	r25, r21
    4cb2:	f8 01       	movw	r30, r16
    4cb4:	90 83       	st	Z, r25
    4cb6:	8f 5f       	subi	r24, 0xFF	; 255
    4cb8:	01 c0       	rjmp	.+2      	; 0x4cbc <decode_hexadecimal_string_bytes+0x68>
    4cba:	80 e0       	ldi	r24, 0x00	; 0
    4cbc:	28 2f       	mov	r18, r24
    4cbe:	22 0f       	add	r18, r18
    4cc0:	48 2f       	mov	r20, r24
    4cc2:	50 e0       	ldi	r21, 0x00	; 0
    4cc4:	fe 01       	movw	r30, r28
    4cc6:	01 90       	ld	r0, Z+
    4cc8:	00 20       	and	r0, r0
    4cca:	e9 f7       	brne	.-6      	; 0x4cc6 <decode_hexadecimal_string_bytes+0x72>
    4ccc:	31 97       	sbiw	r30, 0x01	; 1
    4cce:	ec 1b       	sub	r30, r28
    4cd0:	fd 0b       	sbc	r31, r29
    4cd2:	4e 17       	cp	r20, r30
    4cd4:	5f 07       	cpc	r21, r31
    4cd6:	10 f4       	brcc	.+4      	; 0x4cdc <decode_hexadecimal_string_bytes+0x88>
    4cd8:	86 13       	cpse	r24, r22
    4cda:	ce cf       	rjmp	.-100    	; 0x4c78 <decode_hexadecimal_string_bytes+0x24>
    4cdc:	df 91       	pop	r29
    4cde:	cf 91       	pop	r28
    4ce0:	1f 91       	pop	r17
    4ce2:	0f 91       	pop	r16
    4ce4:	08 95       	ret

00004ce6 <reg_read_register>:
    4ce6:	fc 01       	movw	r30, r24
    4ce8:	80 81       	ld	r24, Z
    4cea:	08 95       	ret

00004cec <reg_read_bit>:
    4cec:	fc 01       	movw	r30, r24
    4cee:	20 81       	ld	r18, Z
    4cf0:	81 e0       	ldi	r24, 0x01	; 1
    4cf2:	90 e0       	ldi	r25, 0x00	; 0
    4cf4:	02 c0       	rjmp	.+4      	; 0x4cfa <reg_read_bit+0xe>
    4cf6:	88 0f       	add	r24, r24
    4cf8:	99 1f       	adc	r25, r25
    4cfa:	6a 95       	dec	r22
    4cfc:	e2 f7       	brpl	.-8      	; 0x4cf6 <reg_read_bit+0xa>
    4cfe:	82 23       	and	r24, r18
    4d00:	08 95       	ret

00004d02 <reg_read_bits>:
    4d02:	fc 01       	movw	r30, r24
    4d04:	80 81       	ld	r24, Z
    4d06:	86 23       	and	r24, r22
    4d08:	08 95       	ret

00004d0a <reg_set_register>:
    4d0a:	fc 01       	movw	r30, r24
    4d0c:	60 83       	st	Z, r22
    4d0e:	08 95       	ret

00004d10 <reg_clear_register>:
    4d10:	fc 01       	movw	r30, r24
    4d12:	10 82       	st	Z, r1
    4d14:	08 95       	ret

00004d16 <reg_set_bit>:
    4d16:	fc 01       	movw	r30, r24
    4d18:	40 81       	ld	r20, Z
    4d1a:	21 e0       	ldi	r18, 0x01	; 1
    4d1c:	30 e0       	ldi	r19, 0x00	; 0
    4d1e:	02 c0       	rjmp	.+4      	; 0x4d24 <reg_set_bit+0xe>
    4d20:	22 0f       	add	r18, r18
    4d22:	33 1f       	adc	r19, r19
    4d24:	6a 95       	dec	r22
    4d26:	e2 f7       	brpl	.-8      	; 0x4d20 <reg_set_bit+0xa>
    4d28:	24 2b       	or	r18, r20
    4d2a:	20 83       	st	Z, r18
    4d2c:	08 95       	ret

00004d2e <reg_set_bits>:
    4d2e:	fc 01       	movw	r30, r24
    4d30:	20 81       	ld	r18, Z
    4d32:	62 2b       	or	r22, r18
    4d34:	60 83       	st	Z, r22
    4d36:	08 95       	ret

00004d38 <reg_toggle_bit>:
    4d38:	fc 01       	movw	r30, r24
    4d3a:	40 81       	ld	r20, Z
    4d3c:	21 e0       	ldi	r18, 0x01	; 1
    4d3e:	30 e0       	ldi	r19, 0x00	; 0
    4d40:	02 c0       	rjmp	.+4      	; 0x4d46 <reg_toggle_bit+0xe>
    4d42:	22 0f       	add	r18, r18
    4d44:	33 1f       	adc	r19, r19
    4d46:	6a 95       	dec	r22
    4d48:	e2 f7       	brpl	.-8      	; 0x4d42 <reg_toggle_bit+0xa>
    4d4a:	24 27       	eor	r18, r20
    4d4c:	20 83       	st	Z, r18
    4d4e:	08 95       	ret

00004d50 <reg_toggle_bits>:
    4d50:	fc 01       	movw	r30, r24
    4d52:	20 81       	ld	r18, Z
    4d54:	62 27       	eor	r22, r18
    4d56:	60 83       	st	Z, r22
    4d58:	08 95       	ret

00004d5a <reg_clear_bit>:
    4d5a:	fc 01       	movw	r30, r24
    4d5c:	90 81       	ld	r25, Z
    4d5e:	21 e0       	ldi	r18, 0x01	; 1
    4d60:	30 e0       	ldi	r19, 0x00	; 0
    4d62:	02 c0       	rjmp	.+4      	; 0x4d68 <reg_clear_bit+0xe>
    4d64:	22 0f       	add	r18, r18
    4d66:	33 1f       	adc	r19, r19
    4d68:	6a 95       	dec	r22
    4d6a:	e2 f7       	brpl	.-8      	; 0x4d64 <reg_clear_bit+0xa>
    4d6c:	20 95       	com	r18
    4d6e:	29 23       	and	r18, r25
    4d70:	20 83       	st	Z, r18
    4d72:	08 95       	ret

00004d74 <reg_clear_bits>:
    4d74:	fc 01       	movw	r30, r24
    4d76:	90 81       	ld	r25, Z
    4d78:	60 95       	com	r22
    4d7a:	69 23       	and	r22, r25
    4d7c:	60 83       	st	Z, r22
    4d7e:	08 95       	ret

00004d80 <_serial_call_back>:
    4d80:	80 91 38 1a 	lds	r24, 0x1A38	; 0x801a38 <crc_sum.1941>
    4d84:	86 0f       	add	r24, r22
    4d86:	80 93 38 1a 	sts	0x1A38, r24	; 0x801a38 <crc_sum.1941>
    4d8a:	90 91 3b 1a 	lds	r25, 0x1A3B	; 0x801a3b <_mh_state>
    4d8e:	91 30       	cpi	r25, 0x01	; 1
    4d90:	79 f0       	breq	.+30     	; 0x4db0 <_serial_call_back+0x30>
    4d92:	28 f0       	brcs	.+10     	; 0x4d9e <_serial_call_back+0x1e>
    4d94:	92 30       	cpi	r25, 0x02	; 2
    4d96:	a9 f0       	breq	.+42     	; 0x4dc2 <_serial_call_back+0x42>
    4d98:	93 30       	cpi	r25, 0x03	; 3
    4d9a:	19 f1       	breq	.+70     	; 0x4de2 <_serial_call_back+0x62>
    4d9c:	08 95       	ret
    4d9e:	6f 3f       	cpi	r22, 0xFF	; 255
    4da0:	09 f0       	breq	.+2      	; 0x4da4 <_serial_call_back+0x24>
    4da2:	48 c0       	rjmp	.+144    	; 0x4e34 <_serial_call_back+0xb4>
    4da4:	10 92 38 1a 	sts	0x1A38, r1	; 0x801a38 <crc_sum.1941>
    4da8:	81 e0       	ldi	r24, 0x01	; 1
    4daa:	80 93 3b 1a 	sts	0x1A3B, r24	; 0x801a3b <_mh_state>
    4dae:	08 95       	ret
    4db0:	66 38       	cpi	r22, 0x86	; 134
    4db2:	09 f0       	breq	.+2      	; 0x4db6 <_serial_call_back+0x36>
    4db4:	3f c0       	rjmp	.+126    	; 0x4e34 <_serial_call_back+0xb4>
    4db6:	10 92 37 1a 	sts	0x1A37, r1	; 0x801a37 <inDex.1939>
    4dba:	82 e0       	ldi	r24, 0x02	; 2
    4dbc:	80 93 3b 1a 	sts	0x1A3B, r24	; 0x801a3b <_mh_state>
    4dc0:	08 95       	ret
    4dc2:	e0 91 37 1a 	lds	r30, 0x1A37	; 0x801a37 <inDex.1939>
    4dc6:	81 e0       	ldi	r24, 0x01	; 1
    4dc8:	8e 0f       	add	r24, r30
    4dca:	80 93 37 1a 	sts	0x1A37, r24	; 0x801a37 <inDex.1939>
    4dce:	f0 e0       	ldi	r31, 0x00	; 0
    4dd0:	eb 5c       	subi	r30, 0xCB	; 203
    4dd2:	f5 4e       	sbci	r31, 0xE5	; 229
    4dd4:	60 83       	st	Z, r22
    4dd6:	82 30       	cpi	r24, 0x02	; 2
    4dd8:	69 f5       	brne	.+90     	; 0x4e34 <_serial_call_back+0xb4>
    4dda:	83 e0       	ldi	r24, 0x03	; 3
    4ddc:	80 93 3b 1a 	sts	0x1A3B, r24	; 0x801a3b <_mh_state>
    4de0:	08 95       	ret
    4de2:	90 91 37 1a 	lds	r25, 0x1A37	; 0x801a37 <inDex.1939>
    4de6:	21 e0       	ldi	r18, 0x01	; 1
    4de8:	29 0f       	add	r18, r25
    4dea:	20 93 37 1a 	sts	0x1A37, r18	; 0x801a37 <inDex.1939>
    4dee:	96 30       	cpi	r25, 0x06	; 6
    4df0:	09 f5       	brne	.+66     	; 0x4e34 <_serial_call_back+0xb4>
    4df2:	81 11       	cpse	r24, r1
    4df4:	0e c0       	rjmp	.+28     	; 0x4e12 <_serial_call_back+0x92>
    4df6:	e5 e3       	ldi	r30, 0x35	; 53
    4df8:	fa e1       	ldi	r31, 0x1A	; 26
    4dfa:	80 81       	ld	r24, Z
    4dfc:	90 e0       	ldi	r25, 0x00	; 0
    4dfe:	98 2f       	mov	r25, r24
    4e00:	88 27       	eor	r24, r24
    4e02:	21 81       	ldd	r18, Z+1	; 0x01
    4e04:	82 0f       	add	r24, r18
    4e06:	91 1d       	adc	r25, r1
    4e08:	90 93 3d 1a 	sts	0x1A3D, r25	; 0x801a3d <_ppm+0x1>
    4e0c:	80 93 3c 1a 	sts	0x1A3C, r24	; 0x801a3c <_ppm>
    4e10:	04 c0       	rjmp	.+8      	; 0x4e1a <_serial_call_back+0x9a>
    4e12:	10 92 3d 1a 	sts	0x1A3D, r1	; 0x801a3d <_ppm+0x1>
    4e16:	10 92 3c 1a 	sts	0x1A3C, r1	; 0x801a3c <_ppm>
    4e1a:	10 92 3b 1a 	sts	0x1A3B, r1	; 0x801a3b <_mh_state>
    4e1e:	e0 91 39 1a 	lds	r30, 0x1A39	; 0x801a39 <_app_call_back>
    4e22:	f0 91 3a 1a 	lds	r31, 0x1A3A	; 0x801a3a <_app_call_back+0x1>
    4e26:	30 97       	sbiw	r30, 0x00	; 0
    4e28:	29 f0       	breq	.+10     	; 0x4e34 <_serial_call_back+0xb4>
    4e2a:	80 91 3c 1a 	lds	r24, 0x1A3C	; 0x801a3c <_ppm>
    4e2e:	90 91 3d 1a 	lds	r25, 0x1A3D	; 0x801a3d <_ppm+0x1>
    4e32:	19 95       	eicall
    4e34:	08 95       	ret

00004e36 <mh_z19_create>:
    4e36:	8f 92       	push	r8
    4e38:	9f 92       	push	r9
    4e3a:	af 92       	push	r10
    4e3c:	cf 92       	push	r12
    4e3e:	ef 92       	push	r14
    4e40:	0f 93       	push	r16
    4e42:	cf 93       	push	r28
    4e44:	df 93       	push	r29
    4e46:	eb 01       	movw	r28, r22
    4e48:	0f 2e       	mov	r0, r31
    4e4a:	f0 ec       	ldi	r31, 0xC0	; 192
    4e4c:	8f 2e       	mov	r8, r31
    4e4e:	f6 e2       	ldi	r31, 0x26	; 38
    4e50:	9f 2e       	mov	r9, r31
    4e52:	f0 2d       	mov	r31, r0
    4e54:	68 94       	set
    4e56:	aa 24       	eor	r10, r10
    4e58:	a4 f8       	bld	r10, 4
    4e5a:	68 94       	set
    4e5c:	cc 24       	eor	r12, r12
    4e5e:	c4 f8       	bld	r12, 4
    4e60:	e1 2c       	mov	r14, r1
    4e62:	00 e0       	ldi	r16, 0x00	; 0
    4e64:	23 e0       	ldi	r18, 0x03	; 3
    4e66:	40 e8       	ldi	r20, 0x80	; 128
    4e68:	55 e2       	ldi	r21, 0x25	; 37
    4e6a:	60 e0       	ldi	r22, 0x00	; 0
    4e6c:	70 e0       	ldi	r23, 0x00	; 0
    4e6e:	85 d0       	rcall	.+266    	; 0x4f7a <serial_new_instance>
    4e70:	90 93 3f 1a 	sts	0x1A3F, r25	; 0x801a3f <_serial+0x1>
    4e74:	80 93 3e 1a 	sts	0x1A3E, r24	; 0x801a3e <_serial>
    4e78:	d0 93 3a 1a 	sts	0x1A3A, r29	; 0x801a3a <_app_call_back+0x1>
    4e7c:	c0 93 39 1a 	sts	0x1A39, r28	; 0x801a39 <_app_call_back>
    4e80:	df 91       	pop	r29
    4e82:	cf 91       	pop	r28
    4e84:	0f 91       	pop	r16
    4e86:	ef 90       	pop	r14
    4e88:	cf 90       	pop	r12
    4e8a:	af 90       	pop	r10
    4e8c:	9f 90       	pop	r9
    4e8e:	8f 90       	pop	r8
    4e90:	08 95       	ret

00004e92 <mh_z19_take_meassuring>:
    4e92:	cf 93       	push	r28
    4e94:	df 93       	push	r29
    4e96:	cd b7       	in	r28, 0x3d	; 61
    4e98:	de b7       	in	r29, 0x3e	; 62
    4e9a:	29 97       	sbiw	r28, 0x09	; 9
    4e9c:	0f b6       	in	r0, 0x3f	; 63
    4e9e:	f8 94       	cli
    4ea0:	de bf       	out	0x3e, r29	; 62
    4ea2:	0f be       	out	0x3f, r0	; 63
    4ea4:	cd bf       	out	0x3d, r28	; 61
    4ea6:	89 e0       	ldi	r24, 0x09	; 9
    4ea8:	e5 e4       	ldi	r30, 0x45	; 69
    4eaa:	f2 e0       	ldi	r31, 0x02	; 2
    4eac:	9e 01       	movw	r18, r28
    4eae:	2f 5f       	subi	r18, 0xFF	; 255
    4eb0:	3f 4f       	sbci	r19, 0xFF	; 255
    4eb2:	d9 01       	movw	r26, r18
    4eb4:	01 90       	ld	r0, Z+
    4eb6:	0d 92       	st	X+, r0
    4eb8:	8a 95       	dec	r24
    4eba:	e1 f7       	brne	.-8      	; 0x4eb4 <mh_z19_take_meassuring+0x22>
    4ebc:	10 92 3d 1a 	sts	0x1A3D, r1	; 0x801a3d <_ppm+0x1>
    4ec0:	10 92 3c 1a 	sts	0x1A3C, r1	; 0x801a3c <_ppm>
    4ec4:	80 91 3e 1a 	lds	r24, 0x1A3E	; 0x801a3e <_serial>
    4ec8:	90 91 3f 1a 	lds	r25, 0x1A3F	; 0x801a3f <_serial+0x1>
    4ecc:	00 97       	sbiw	r24, 0x00	; 0
    4ece:	31 f0       	breq	.+12     	; 0x4edc <mh_z19_take_meassuring+0x4a>
    4ed0:	42 2f       	mov	r20, r18
    4ed2:	53 2f       	mov	r21, r19
    4ed4:	69 e0       	ldi	r22, 0x09	; 9
    4ed6:	0c d1       	rcall	.+536    	; 0x50f0 <serial_send_bytes>
    4ed8:	80 e0       	ldi	r24, 0x00	; 0
    4eda:	01 c0       	rjmp	.+2      	; 0x4ede <mh_z19_take_meassuring+0x4c>
    4edc:	82 e0       	ldi	r24, 0x02	; 2
    4ede:	29 96       	adiw	r28, 0x09	; 9
    4ee0:	0f b6       	in	r0, 0x3f	; 63
    4ee2:	f8 94       	cli
    4ee4:	de bf       	out	0x3e, r29	; 62
    4ee6:	0f be       	out	0x3f, r0	; 63
    4ee8:	cd bf       	out	0x3d, r28	; 61
    4eea:	df 91       	pop	r29
    4eec:	cf 91       	pop	r28
    4eee:	08 95       	ret

00004ef0 <mh_z19_get_co2_ppm>:
    4ef0:	20 91 3c 1a 	lds	r18, 0x1A3C	; 0x801a3c <_ppm>
    4ef4:	30 91 3d 1a 	lds	r19, 0x1A3D	; 0x801a3d <_ppm+0x1>
    4ef8:	21 15       	cp	r18, r1
    4efa:	31 05       	cpc	r19, r1
    4efc:	29 f4       	brne	.+10     	; 0x4f08 <mh_z19_get_co2_ppm+0x18>
    4efe:	fc 01       	movw	r30, r24
    4f00:	11 82       	std	Z+1, r1	; 0x01
    4f02:	10 82       	st	Z, r1
    4f04:	81 e0       	ldi	r24, 0x01	; 1
    4f06:	08 95       	ret
    4f08:	fc 01       	movw	r30, r24
    4f0a:	31 83       	std	Z+1, r19	; 0x01
    4f0c:	20 83       	st	Z, r18
    4f0e:	80 e0       	ldi	r24, 0x00	; 0
    4f10:	08 95       	ret

00004f12 <rcServoSet>:
    4f12:	65 36       	cpi	r22, 0x65	; 101
    4f14:	0c f0       	brlt	.+2      	; 0x4f18 <rcServoSet+0x6>
    4f16:	64 e6       	ldi	r22, 0x64	; 100
    4f18:	6c 39       	cpi	r22, 0x9C	; 156
    4f1a:	0c f4       	brge	.+2      	; 0x4f1e <rcServoSet+0xc>
    4f1c:	6c e9       	ldi	r22, 0x9C	; 156
    4f1e:	96 ef       	ldi	r25, 0xF6	; 246
    4f20:	69 02       	muls	r22, r25
    4f22:	b0 01       	movw	r22, r0
    4f24:	11 24       	eor	r1, r1
    4f26:	68 54       	subi	r22, 0x48	; 72
    4f28:	74 4f       	sbci	r23, 0xF4	; 244
    4f2a:	81 11       	cpse	r24, r1
    4f2c:	05 c0       	rjmp	.+10     	; 0x4f38 <rcServoSet+0x26>
    4f2e:	70 93 29 01 	sts	0x0129, r23	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
    4f32:	60 93 28 01 	sts	0x0128, r22	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
    4f36:	08 95       	ret
    4f38:	70 93 2b 01 	sts	0x012B, r23	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
    4f3c:	60 93 2a 01 	sts	0x012A, r22	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
    4f40:	08 95       	ret

00004f42 <rcServoCreate>:
    4f42:	ea e0       	ldi	r30, 0x0A	; 10
    4f44:	f1 e0       	ldi	r31, 0x01	; 1
    4f46:	80 81       	ld	r24, Z
    4f48:	88 61       	ori	r24, 0x18	; 24
    4f4a:	80 83       	st	Z, r24
    4f4c:	8f e3       	ldi	r24, 0x3F	; 63
    4f4e:	9c e9       	ldi	r25, 0x9C	; 156
    4f50:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__TEXT_REGION_LENGTH__+0x700127>
    4f54:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__TEXT_REGION_LENGTH__+0x700126>
    4f58:	60 e0       	ldi	r22, 0x00	; 0
    4f5a:	80 e0       	ldi	r24, 0x00	; 0
    4f5c:	da df       	rcall	.-76     	; 0x4f12 <rcServoSet>
    4f5e:	60 e0       	ldi	r22, 0x00	; 0
    4f60:	81 e0       	ldi	r24, 0x01	; 1
    4f62:	d7 df       	rcall	.-82     	; 0x4f12 <rcServoSet>
    4f64:	e0 e2       	ldi	r30, 0x20	; 32
    4f66:	f1 e0       	ldi	r31, 0x01	; 1
    4f68:	80 81       	ld	r24, Z
    4f6a:	82 6a       	ori	r24, 0xA2	; 162
    4f6c:	80 83       	st	Z, r24
    4f6e:	e1 e2       	ldi	r30, 0x21	; 33
    4f70:	f1 e0       	ldi	r31, 0x01	; 1
    4f72:	80 81       	ld	r24, Z
    4f74:	8a 61       	ori	r24, 0x1A	; 26
    4f76:	80 83       	st	Z, r24
    4f78:	08 95       	ret

00004f7a <serial_new_instance>:
    4f7a:	2f 92       	push	r2
    4f7c:	3f 92       	push	r3
    4f7e:	4f 92       	push	r4
    4f80:	5f 92       	push	r5
    4f82:	6f 92       	push	r6
    4f84:	7f 92       	push	r7
    4f86:	8f 92       	push	r8
    4f88:	9f 92       	push	r9
    4f8a:	af 92       	push	r10
    4f8c:	cf 92       	push	r12
    4f8e:	ef 92       	push	r14
    4f90:	ff 92       	push	r15
    4f92:	0f 93       	push	r16
    4f94:	1f 93       	push	r17
    4f96:	cf 93       	push	r28
    4f98:	df 93       	push	r29
    4f9a:	cd b7       	in	r28, 0x3d	; 61
    4f9c:	de b7       	in	r29, 0x3e	; 62
    4f9e:	f8 2e       	mov	r15, r24
    4fa0:	2a 01       	movw	r4, r20
    4fa2:	3b 01       	movw	r6, r22
    4fa4:	88 e0       	ldi	r24, 0x08	; 8
    4fa6:	90 e0       	ldi	r25, 0x00	; 0
    4fa8:	c2 d7       	rcall	.+3972   	; 0x5f2e <malloc>
    4faa:	8c 01       	movw	r16, r24
    4fac:	8f 2d       	mov	r24, r15
    4fae:	90 e0       	ldi	r25, 0x00	; 0
    4fb0:	88 0f       	add	r24, r24
    4fb2:	99 1f       	adc	r25, r25
    4fb4:	fc 01       	movw	r30, r24
    4fb6:	e0 5c       	subi	r30, 0xC0	; 192
    4fb8:	f5 4e       	sbci	r31, 0xE5	; 229
    4fba:	11 83       	std	Z+1, r17	; 0x01
    4fbc:	00 83       	st	Z, r16
    4fbe:	fc 01       	movw	r30, r24
    4fc0:	e2 5f       	subi	r30, 0xF2	; 242
    4fc2:	fd 4f       	sbci	r31, 0xFD	; 253
    4fc4:	80 81       	ld	r24, Z
    4fc6:	91 81       	ldd	r25, Z+1	; 0x01
    4fc8:	d8 01       	movw	r26, r16
    4fca:	8d 93       	st	X+, r24
    4fcc:	9c 93       	st	X, r25
    4fce:	6c 2d       	mov	r22, r12
    4fd0:	70 e0       	ldi	r23, 0x00	; 0
    4fd2:	84 e0       	ldi	r24, 0x04	; 4
    4fd4:	90 e0       	ldi	r25, 0x00	; 0
    4fd6:	91 d7       	rcall	.+3874   	; 0x5efa <calloc>
    4fd8:	1c 01       	movw	r2, r24
    4fda:	61 e0       	ldi	r22, 0x01	; 1
    4fdc:	70 e0       	ldi	r23, 0x00	; 0
    4fde:	86 e0       	ldi	r24, 0x06	; 6
    4fe0:	90 e0       	ldi	r25, 0x00	; 0
    4fe2:	8b d7       	rcall	.+3862   	; 0x5efa <calloc>
    4fe4:	7c 01       	movw	r14, r24
    4fe6:	4c 2d       	mov	r20, r12
    4fe8:	b1 01       	movw	r22, r2
    4fea:	2b d5       	rcall	.+2646   	; 0x5a42 <fifo_init>
    4fec:	f8 01       	movw	r30, r16
    4fee:	f5 82       	std	Z+5, r15	; 0x05
    4ff0:	e4 82       	std	Z+4, r14	; 0x04
    4ff2:	6a 2d       	mov	r22, r10
    4ff4:	70 e0       	ldi	r23, 0x00	; 0
    4ff6:	84 e0       	ldi	r24, 0x04	; 4
    4ff8:	90 e0       	ldi	r25, 0x00	; 0
    4ffa:	7f d7       	rcall	.+3838   	; 0x5efa <calloc>
    4ffc:	1c 01       	movw	r2, r24
    4ffe:	61 e0       	ldi	r22, 0x01	; 1
    5000:	70 e0       	ldi	r23, 0x00	; 0
    5002:	86 e0       	ldi	r24, 0x06	; 6
    5004:	90 e0       	ldi	r25, 0x00	; 0
    5006:	79 d7       	rcall	.+3826   	; 0x5efa <calloc>
    5008:	7c 01       	movw	r14, r24
    500a:	4a 2d       	mov	r20, r10
    500c:	b1 01       	movw	r22, r2
    500e:	19 d5       	rcall	.+2610   	; 0x5a42 <fifo_init>
    5010:	d8 01       	movw	r26, r16
    5012:	13 96       	adiw	r26, 0x03	; 3
    5014:	fc 92       	st	X, r15
    5016:	ee 92       	st	-X, r14
    5018:	12 97       	sbiw	r26, 0x02	; 2
    501a:	17 96       	adiw	r26, 0x07	; 7
    501c:	9c 92       	st	X, r9
    501e:	8e 92       	st	-X, r8
    5020:	16 97       	sbiw	r26, 0x06	; 6
    5022:	ff b6       	in	r15, 0x3f	; 63
    5024:	f8 94       	cli
    5026:	ed 91       	ld	r30, X+
    5028:	fc 91       	ld	r31, X
    502a:	11 97       	sbiw	r26, 0x01	; 1
    502c:	36 97       	sbiw	r30, 0x06	; 6
    502e:	80 81       	ld	r24, Z
    5030:	82 60       	ori	r24, 0x02	; 2
    5032:	80 83       	st	Z, r24
    5034:	8d 90       	ld	r8, X+
    5036:	9c 90       	ld	r9, X
    5038:	c3 01       	movw	r24, r6
    503a:	b2 01       	movw	r22, r4
    503c:	1c d6       	rcall	.+3128   	; 0x5c76 <__floatunsisf>
    503e:	20 e0       	ldi	r18, 0x00	; 0
    5040:	30 e0       	ldi	r19, 0x00	; 0
    5042:	40 e0       	ldi	r20, 0x00	; 0
    5044:	51 e4       	ldi	r21, 0x41	; 65
    5046:	a5 d6       	rcall	.+3402   	; 0x5d92 <__mulsf3>
    5048:	9b 01       	movw	r18, r22
    504a:	ac 01       	movw	r20, r24
    504c:	60 e0       	ldi	r22, 0x00	; 0
    504e:	74 e2       	ldi	r23, 0x24	; 36
    5050:	84 e7       	ldi	r24, 0x74	; 116
    5052:	9b e4       	ldi	r25, 0x4B	; 75
    5054:	77 d5       	rcall	.+2798   	; 0x5b44 <__divsf3>
    5056:	20 e0       	ldi	r18, 0x00	; 0
    5058:	30 e0       	ldi	r19, 0x00	; 0
    505a:	40 e8       	ldi	r20, 0x80	; 128
    505c:	5f e3       	ldi	r21, 0x3F	; 63
    505e:	0d d5       	rcall	.+2586   	; 0x5a7a <__subsf3>
    5060:	de d5       	rcall	.+3004   	; 0x5c1e <__fixunssfsi>
    5062:	f4 01       	movw	r30, r8
    5064:	32 97       	sbiw	r30, 0x02	; 2
    5066:	60 83       	st	Z, r22
    5068:	d8 01       	movw	r26, r16
    506a:	ed 91       	ld	r30, X+
    506c:	fc 91       	ld	r31, X
    506e:	11 97       	sbiw	r26, 0x01	; 1
    5070:	35 97       	sbiw	r30, 0x05	; 5
    5072:	88 e9       	ldi	r24, 0x98	; 152
    5074:	80 83       	st	Z, r24
    5076:	ed 91       	ld	r30, X+
    5078:	fc 91       	ld	r31, X
    507a:	34 97       	sbiw	r30, 0x04	; 4
    507c:	86 e0       	ldi	r24, 0x06	; 6
    507e:	80 83       	st	Z, r24
    5080:	ff be       	out	0x3f, r15	; 63
    5082:	c8 01       	movw	r24, r16
    5084:	df 91       	pop	r29
    5086:	cf 91       	pop	r28
    5088:	1f 91       	pop	r17
    508a:	0f 91       	pop	r16
    508c:	ff 90       	pop	r15
    508e:	ef 90       	pop	r14
    5090:	cf 90       	pop	r12
    5092:	af 90       	pop	r10
    5094:	9f 90       	pop	r9
    5096:	8f 90       	pop	r8
    5098:	7f 90       	pop	r7
    509a:	6f 90       	pop	r6
    509c:	5f 90       	pop	r5
    509e:	4f 90       	pop	r4
    50a0:	3f 90       	pop	r3
    50a2:	2f 90       	pop	r2
    50a4:	08 95       	ret

000050a6 <serial_send_byte>:
    50a6:	cf 93       	push	r28
    50a8:	df 93       	push	r29
    50aa:	ec 01       	movw	r28, r24
    50ac:	ea 81       	ldd	r30, Y+2	; 0x02
    50ae:	fb 81       	ldd	r31, Y+3	; 0x03
    50b0:	93 81       	ldd	r25, Z+3	; 0x03
    50b2:	82 81       	ldd	r24, Z+2	; 0x02
    50b4:	25 81       	ldd	r18, Z+5	; 0x05
    50b6:	98 1b       	sub	r25, r24
    50b8:	92 23       	and	r25, r18
    50ba:	84 81       	ldd	r24, Z+4	; 0x04
    50bc:	98 17       	cp	r25, r24
    50be:	a1 f0       	breq	.+40     	; 0x50e8 <serial_send_byte+0x42>
    50c0:	93 81       	ldd	r25, Z+3	; 0x03
    50c2:	26 95       	lsr	r18
    50c4:	29 23       	and	r18, r25
    50c6:	a0 81       	ld	r26, Z
    50c8:	b1 81       	ldd	r27, Z+1	; 0x01
    50ca:	a2 0f       	add	r26, r18
    50cc:	b1 1d       	adc	r27, r1
    50ce:	6c 93       	st	X, r22
    50d0:	9f 5f       	subi	r25, 0xFF	; 255
    50d2:	25 81       	ldd	r18, Z+5	; 0x05
    50d4:	92 23       	and	r25, r18
    50d6:	93 83       	std	Z+3, r25	; 0x03
    50d8:	e8 81       	ld	r30, Y
    50da:	f9 81       	ldd	r31, Y+1	; 0x01
    50dc:	35 97       	sbiw	r30, 0x05	; 5
    50de:	80 81       	ld	r24, Z
    50e0:	80 62       	ori	r24, 0x20	; 32
    50e2:	80 83       	st	Z, r24
    50e4:	80 e0       	ldi	r24, 0x00	; 0
    50e6:	01 c0       	rjmp	.+2      	; 0x50ea <serial_send_byte+0x44>
    50e8:	82 e0       	ldi	r24, 0x02	; 2
    50ea:	df 91       	pop	r29
    50ec:	cf 91       	pop	r28
    50ee:	08 95       	ret

000050f0 <serial_send_bytes>:
    50f0:	ef 92       	push	r14
    50f2:	ff 92       	push	r15
    50f4:	0f 93       	push	r16
    50f6:	1f 93       	push	r17
    50f8:	cf 93       	push	r28
    50fa:	df 93       	push	r29
    50fc:	7c 01       	movw	r14, r24
    50fe:	dc 01       	movw	r26, r24
    5100:	12 96       	adiw	r26, 0x02	; 2
    5102:	ed 91       	ld	r30, X+
    5104:	fc 91       	ld	r31, X
    5106:	13 97       	sbiw	r26, 0x03	; 3
    5108:	93 81       	ldd	r25, Z+3	; 0x03
    510a:	82 81       	ldd	r24, Z+2	; 0x02
    510c:	98 1b       	sub	r25, r24
    510e:	85 81       	ldd	r24, Z+5	; 0x05
    5110:	98 23       	and	r25, r24
    5112:	84 81       	ldd	r24, Z+4	; 0x04
    5114:	89 1b       	sub	r24, r25
    5116:	86 17       	cp	r24, r22
    5118:	98 f1       	brcs	.+102    	; 0x5180 <serial_send_bytes+0x90>
    511a:	66 23       	and	r22, r22
    511c:	41 f1       	breq	.+80     	; 0x516e <serial_send_bytes+0x7e>
    511e:	84 2f       	mov	r24, r20
    5120:	95 2f       	mov	r25, r21
    5122:	dc 01       	movw	r26, r24
    5124:	61 50       	subi	r22, 0x01	; 1
    5126:	46 2f       	mov	r20, r22
    5128:	50 e0       	ldi	r21, 0x00	; 0
    512a:	4f 5f       	subi	r20, 0xFF	; 255
    512c:	5f 4f       	sbci	r21, 0xFF	; 255
    512e:	48 0f       	add	r20, r24
    5130:	59 1f       	adc	r21, r25
    5132:	e7 01       	movw	r28, r14
    5134:	ea 81       	ldd	r30, Y+2	; 0x02
    5136:	fb 81       	ldd	r31, Y+3	; 0x03
    5138:	93 81       	ldd	r25, Z+3	; 0x03
    513a:	82 81       	ldd	r24, Z+2	; 0x02
    513c:	25 81       	ldd	r18, Z+5	; 0x05
    513e:	98 1b       	sub	r25, r24
    5140:	92 23       	and	r25, r18
    5142:	84 81       	ldd	r24, Z+4	; 0x04
    5144:	98 17       	cp	r25, r24
    5146:	79 f0       	breq	.+30     	; 0x5166 <serial_send_bytes+0x76>
    5148:	8c 91       	ld	r24, X
    514a:	93 81       	ldd	r25, Z+3	; 0x03
    514c:	26 95       	lsr	r18
    514e:	29 23       	and	r18, r25
    5150:	60 81       	ld	r22, Z
    5152:	71 81       	ldd	r23, Z+1	; 0x01
    5154:	8b 01       	movw	r16, r22
    5156:	02 0f       	add	r16, r18
    5158:	11 1d       	adc	r17, r1
    515a:	e8 01       	movw	r28, r16
    515c:	88 83       	st	Y, r24
    515e:	9f 5f       	subi	r25, 0xFF	; 255
    5160:	85 81       	ldd	r24, Z+5	; 0x05
    5162:	98 23       	and	r25, r24
    5164:	93 83       	std	Z+3, r25	; 0x03
    5166:	11 96       	adiw	r26, 0x01	; 1
    5168:	a4 17       	cp	r26, r20
    516a:	b5 07       	cpc	r27, r21
    516c:	11 f7       	brne	.-60     	; 0x5132 <serial_send_bytes+0x42>
    516e:	d7 01       	movw	r26, r14
    5170:	ed 91       	ld	r30, X+
    5172:	fc 91       	ld	r31, X
    5174:	35 97       	sbiw	r30, 0x05	; 5
    5176:	80 81       	ld	r24, Z
    5178:	80 62       	ori	r24, 0x20	; 32
    517a:	80 83       	st	Z, r24
    517c:	80 e0       	ldi	r24, 0x00	; 0
    517e:	01 c0       	rjmp	.+2      	; 0x5182 <serial_send_bytes+0x92>
    5180:	82 e0       	ldi	r24, 0x02	; 2
    5182:	df 91       	pop	r29
    5184:	cf 91       	pop	r28
    5186:	1f 91       	pop	r17
    5188:	0f 91       	pop	r16
    518a:	ff 90       	pop	r15
    518c:	ef 90       	pop	r14
    518e:	08 95       	ret

00005190 <serial_get_byte>:
    5190:	dc 01       	movw	r26, r24
    5192:	14 96       	adiw	r26, 0x04	; 4
    5194:	ed 91       	ld	r30, X+
    5196:	fc 91       	ld	r31, X
    5198:	15 97       	sbiw	r26, 0x05	; 5
    519a:	93 81       	ldd	r25, Z+3	; 0x03
    519c:	82 81       	ldd	r24, Z+2	; 0x02
    519e:	98 17       	cp	r25, r24
    51a0:	89 f0       	breq	.+34     	; 0x51c4 <serial_get_byte+0x34>
    51a2:	92 81       	ldd	r25, Z+2	; 0x02
    51a4:	85 81       	ldd	r24, Z+5	; 0x05
    51a6:	86 95       	lsr	r24
    51a8:	89 23       	and	r24, r25
    51aa:	a0 81       	ld	r26, Z
    51ac:	b1 81       	ldd	r27, Z+1	; 0x01
    51ae:	a8 0f       	add	r26, r24
    51b0:	b1 1d       	adc	r27, r1
    51b2:	8c 91       	ld	r24, X
    51b4:	db 01       	movw	r26, r22
    51b6:	8c 93       	st	X, r24
    51b8:	9f 5f       	subi	r25, 0xFF	; 255
    51ba:	85 81       	ldd	r24, Z+5	; 0x05
    51bc:	98 23       	and	r25, r24
    51be:	92 83       	std	Z+2, r25	; 0x02
    51c0:	80 e0       	ldi	r24, 0x00	; 0
    51c2:	08 95       	ret
    51c4:	83 e0       	ldi	r24, 0x03	; 3
    51c6:	08 95       	ret

000051c8 <__vector_25>:
    51c8:	1f 92       	push	r1
    51ca:	0f 92       	push	r0
    51cc:	0f b6       	in	r0, 0x3f	; 63
    51ce:	0f 92       	push	r0
    51d0:	11 24       	eor	r1, r1
    51d2:	0b b6       	in	r0, 0x3b	; 59
    51d4:	0f 92       	push	r0
    51d6:	2f 93       	push	r18
    51d8:	3f 93       	push	r19
    51da:	4f 93       	push	r20
    51dc:	5f 93       	push	r21
    51de:	6f 93       	push	r22
    51e0:	7f 93       	push	r23
    51e2:	8f 93       	push	r24
    51e4:	9f 93       	push	r25
    51e6:	af 93       	push	r26
    51e8:	bf 93       	push	r27
    51ea:	cf 93       	push	r28
    51ec:	df 93       	push	r29
    51ee:	ef 93       	push	r30
    51f0:	ff 93       	push	r31
    51f2:	a0 91 40 1a 	lds	r26, 0x1A40	; 0x801a40 <_ser_handle>
    51f6:	b0 91 41 1a 	lds	r27, 0x1A41	; 0x801a41 <_ser_handle+0x1>
    51fa:	10 97       	sbiw	r26, 0x00	; 0
    51fc:	11 f1       	breq	.+68     	; 0x5242 <__vector_25+0x7a>
    51fe:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    5202:	14 96       	adiw	r26, 0x04	; 4
    5204:	ed 91       	ld	r30, X+
    5206:	fc 91       	ld	r31, X
    5208:	15 97       	sbiw	r26, 0x05	; 5
    520a:	93 81       	ldd	r25, Z+3	; 0x03
    520c:	82 81       	ldd	r24, Z+2	; 0x02
    520e:	25 81       	ldd	r18, Z+5	; 0x05
    5210:	98 1b       	sub	r25, r24
    5212:	92 23       	and	r25, r18
    5214:	84 81       	ldd	r24, Z+4	; 0x04
    5216:	98 17       	cp	r25, r24
    5218:	61 f0       	breq	.+24     	; 0x5232 <__vector_25+0x6a>
    521a:	83 81       	ldd	r24, Z+3	; 0x03
    521c:	26 95       	lsr	r18
    521e:	28 23       	and	r18, r24
    5220:	c0 81       	ld	r28, Z
    5222:	d1 81       	ldd	r29, Z+1	; 0x01
    5224:	c2 0f       	add	r28, r18
    5226:	d1 1d       	adc	r29, r1
    5228:	68 83       	st	Y, r22
    522a:	8f 5f       	subi	r24, 0xFF	; 255
    522c:	95 81       	ldd	r25, Z+5	; 0x05
    522e:	89 23       	and	r24, r25
    5230:	83 83       	std	Z+3, r24	; 0x03
    5232:	16 96       	adiw	r26, 0x06	; 6
    5234:	ed 91       	ld	r30, X+
    5236:	fc 91       	ld	r31, X
    5238:	17 97       	sbiw	r26, 0x07	; 7
    523a:	30 97       	sbiw	r30, 0x00	; 0
    523c:	11 f0       	breq	.+4      	; 0x5242 <__vector_25+0x7a>
    523e:	cd 01       	movw	r24, r26
    5240:	19 95       	eicall
    5242:	ff 91       	pop	r31
    5244:	ef 91       	pop	r30
    5246:	df 91       	pop	r29
    5248:	cf 91       	pop	r28
    524a:	bf 91       	pop	r27
    524c:	af 91       	pop	r26
    524e:	9f 91       	pop	r25
    5250:	8f 91       	pop	r24
    5252:	7f 91       	pop	r23
    5254:	6f 91       	pop	r22
    5256:	5f 91       	pop	r21
    5258:	4f 91       	pop	r20
    525a:	3f 91       	pop	r19
    525c:	2f 91       	pop	r18
    525e:	0f 90       	pop	r0
    5260:	0b be       	out	0x3b, r0	; 59
    5262:	0f 90       	pop	r0
    5264:	0f be       	out	0x3f, r0	; 63
    5266:	0f 90       	pop	r0
    5268:	1f 90       	pop	r1
    526a:	18 95       	reti

0000526c <__vector_26>:
    526c:	1f 92       	push	r1
    526e:	0f 92       	push	r0
    5270:	0f b6       	in	r0, 0x3f	; 63
    5272:	0f 92       	push	r0
    5274:	11 24       	eor	r1, r1
    5276:	0b b6       	in	r0, 0x3b	; 59
    5278:	0f 92       	push	r0
    527a:	2f 93       	push	r18
    527c:	8f 93       	push	r24
    527e:	9f 93       	push	r25
    5280:	af 93       	push	r26
    5282:	bf 93       	push	r27
    5284:	ef 93       	push	r30
    5286:	ff 93       	push	r31
    5288:	e0 91 40 1a 	lds	r30, 0x1A40	; 0x801a40 <_ser_handle>
    528c:	f0 91 41 1a 	lds	r31, 0x1A41	; 0x801a41 <_ser_handle+0x1>
    5290:	30 97       	sbiw	r30, 0x00	; 0
    5292:	b9 f0       	breq	.+46     	; 0x52c2 <__vector_26+0x56>
    5294:	02 80       	ldd	r0, Z+2	; 0x02
    5296:	f3 81       	ldd	r31, Z+3	; 0x03
    5298:	e0 2d       	mov	r30, r0
    529a:	93 81       	ldd	r25, Z+3	; 0x03
    529c:	82 81       	ldd	r24, Z+2	; 0x02
    529e:	98 17       	cp	r25, r24
    52a0:	b1 f0       	breq	.+44     	; 0x52ce <__vector_26+0x62>
    52a2:	92 81       	ldd	r25, Z+2	; 0x02
    52a4:	85 81       	ldd	r24, Z+5	; 0x05
    52a6:	28 2f       	mov	r18, r24
    52a8:	26 95       	lsr	r18
    52aa:	29 23       	and	r18, r25
    52ac:	a0 81       	ld	r26, Z
    52ae:	b1 81       	ldd	r27, Z+1	; 0x01
    52b0:	a2 0f       	add	r26, r18
    52b2:	b1 1d       	adc	r27, r1
    52b4:	2c 91       	ld	r18, X
    52b6:	9f 5f       	subi	r25, 0xFF	; 255
    52b8:	89 23       	and	r24, r25
    52ba:	82 83       	std	Z+2, r24	; 0x02
    52bc:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    52c0:	0b c0       	rjmp	.+22     	; 0x52d8 <__vector_26+0x6c>
    52c2:	e1 ec       	ldi	r30, 0xC1	; 193
    52c4:	f0 e0       	ldi	r31, 0x00	; 0
    52c6:	80 81       	ld	r24, Z
    52c8:	8f 7d       	andi	r24, 0xDF	; 223
    52ca:	80 83       	st	Z, r24
    52cc:	05 c0       	rjmp	.+10     	; 0x52d8 <__vector_26+0x6c>
    52ce:	e1 ec       	ldi	r30, 0xC1	; 193
    52d0:	f0 e0       	ldi	r31, 0x00	; 0
    52d2:	80 81       	ld	r24, Z
    52d4:	8f 7d       	andi	r24, 0xDF	; 223
    52d6:	80 83       	st	Z, r24
    52d8:	ff 91       	pop	r31
    52da:	ef 91       	pop	r30
    52dc:	bf 91       	pop	r27
    52de:	af 91       	pop	r26
    52e0:	9f 91       	pop	r25
    52e2:	8f 91       	pop	r24
    52e4:	2f 91       	pop	r18
    52e6:	0f 90       	pop	r0
    52e8:	0b be       	out	0x3b, r0	; 59
    52ea:	0f 90       	pop	r0
    52ec:	0f be       	out	0x3f, r0	; 63
    52ee:	0f 90       	pop	r0
    52f0:	1f 90       	pop	r1
    52f2:	18 95       	reti

000052f4 <__vector_36>:
    52f4:	1f 92       	push	r1
    52f6:	0f 92       	push	r0
    52f8:	0f b6       	in	r0, 0x3f	; 63
    52fa:	0f 92       	push	r0
    52fc:	11 24       	eor	r1, r1
    52fe:	0b b6       	in	r0, 0x3b	; 59
    5300:	0f 92       	push	r0
    5302:	2f 93       	push	r18
    5304:	3f 93       	push	r19
    5306:	4f 93       	push	r20
    5308:	5f 93       	push	r21
    530a:	6f 93       	push	r22
    530c:	7f 93       	push	r23
    530e:	8f 93       	push	r24
    5310:	9f 93       	push	r25
    5312:	af 93       	push	r26
    5314:	bf 93       	push	r27
    5316:	cf 93       	push	r28
    5318:	df 93       	push	r29
    531a:	ef 93       	push	r30
    531c:	ff 93       	push	r31
    531e:	a0 91 42 1a 	lds	r26, 0x1A42	; 0x801a42 <_ser_handle+0x2>
    5322:	b0 91 43 1a 	lds	r27, 0x1A43	; 0x801a43 <_ser_handle+0x3>
    5326:	10 97       	sbiw	r26, 0x00	; 0
    5328:	11 f1       	breq	.+68     	; 0x536e <__vector_36+0x7a>
    532a:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    532e:	14 96       	adiw	r26, 0x04	; 4
    5330:	ed 91       	ld	r30, X+
    5332:	fc 91       	ld	r31, X
    5334:	15 97       	sbiw	r26, 0x05	; 5
    5336:	93 81       	ldd	r25, Z+3	; 0x03
    5338:	82 81       	ldd	r24, Z+2	; 0x02
    533a:	25 81       	ldd	r18, Z+5	; 0x05
    533c:	98 1b       	sub	r25, r24
    533e:	92 23       	and	r25, r18
    5340:	84 81       	ldd	r24, Z+4	; 0x04
    5342:	98 17       	cp	r25, r24
    5344:	61 f0       	breq	.+24     	; 0x535e <__vector_36+0x6a>
    5346:	83 81       	ldd	r24, Z+3	; 0x03
    5348:	26 95       	lsr	r18
    534a:	28 23       	and	r18, r24
    534c:	c0 81       	ld	r28, Z
    534e:	d1 81       	ldd	r29, Z+1	; 0x01
    5350:	c2 0f       	add	r28, r18
    5352:	d1 1d       	adc	r29, r1
    5354:	68 83       	st	Y, r22
    5356:	8f 5f       	subi	r24, 0xFF	; 255
    5358:	95 81       	ldd	r25, Z+5	; 0x05
    535a:	89 23       	and	r24, r25
    535c:	83 83       	std	Z+3, r24	; 0x03
    535e:	16 96       	adiw	r26, 0x06	; 6
    5360:	ed 91       	ld	r30, X+
    5362:	fc 91       	ld	r31, X
    5364:	17 97       	sbiw	r26, 0x07	; 7
    5366:	30 97       	sbiw	r30, 0x00	; 0
    5368:	11 f0       	breq	.+4      	; 0x536e <__vector_36+0x7a>
    536a:	cd 01       	movw	r24, r26
    536c:	19 95       	eicall
    536e:	ff 91       	pop	r31
    5370:	ef 91       	pop	r30
    5372:	df 91       	pop	r29
    5374:	cf 91       	pop	r28
    5376:	bf 91       	pop	r27
    5378:	af 91       	pop	r26
    537a:	9f 91       	pop	r25
    537c:	8f 91       	pop	r24
    537e:	7f 91       	pop	r23
    5380:	6f 91       	pop	r22
    5382:	5f 91       	pop	r21
    5384:	4f 91       	pop	r20
    5386:	3f 91       	pop	r19
    5388:	2f 91       	pop	r18
    538a:	0f 90       	pop	r0
    538c:	0b be       	out	0x3b, r0	; 59
    538e:	0f 90       	pop	r0
    5390:	0f be       	out	0x3f, r0	; 63
    5392:	0f 90       	pop	r0
    5394:	1f 90       	pop	r1
    5396:	18 95       	reti

00005398 <__vector_37>:
    5398:	1f 92       	push	r1
    539a:	0f 92       	push	r0
    539c:	0f b6       	in	r0, 0x3f	; 63
    539e:	0f 92       	push	r0
    53a0:	11 24       	eor	r1, r1
    53a2:	0b b6       	in	r0, 0x3b	; 59
    53a4:	0f 92       	push	r0
    53a6:	2f 93       	push	r18
    53a8:	8f 93       	push	r24
    53aa:	9f 93       	push	r25
    53ac:	af 93       	push	r26
    53ae:	bf 93       	push	r27
    53b0:	ef 93       	push	r30
    53b2:	ff 93       	push	r31
    53b4:	e0 91 42 1a 	lds	r30, 0x1A42	; 0x801a42 <_ser_handle+0x2>
    53b8:	f0 91 43 1a 	lds	r31, 0x1A43	; 0x801a43 <_ser_handle+0x3>
    53bc:	30 97       	sbiw	r30, 0x00	; 0
    53be:	b9 f0       	breq	.+46     	; 0x53ee <__vector_37+0x56>
    53c0:	02 80       	ldd	r0, Z+2	; 0x02
    53c2:	f3 81       	ldd	r31, Z+3	; 0x03
    53c4:	e0 2d       	mov	r30, r0
    53c6:	93 81       	ldd	r25, Z+3	; 0x03
    53c8:	82 81       	ldd	r24, Z+2	; 0x02
    53ca:	98 17       	cp	r25, r24
    53cc:	b1 f0       	breq	.+44     	; 0x53fa <__vector_37+0x62>
    53ce:	92 81       	ldd	r25, Z+2	; 0x02
    53d0:	85 81       	ldd	r24, Z+5	; 0x05
    53d2:	28 2f       	mov	r18, r24
    53d4:	26 95       	lsr	r18
    53d6:	29 23       	and	r18, r25
    53d8:	a0 81       	ld	r26, Z
    53da:	b1 81       	ldd	r27, Z+1	; 0x01
    53dc:	a2 0f       	add	r26, r18
    53de:	b1 1d       	adc	r27, r1
    53e0:	2c 91       	ld	r18, X
    53e2:	9f 5f       	subi	r25, 0xFF	; 255
    53e4:	89 23       	and	r24, r25
    53e6:	82 83       	std	Z+2, r24	; 0x02
    53e8:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    53ec:	0b c0       	rjmp	.+22     	; 0x5404 <__vector_37+0x6c>
    53ee:	e9 ec       	ldi	r30, 0xC9	; 201
    53f0:	f0 e0       	ldi	r31, 0x00	; 0
    53f2:	80 81       	ld	r24, Z
    53f4:	8f 7d       	andi	r24, 0xDF	; 223
    53f6:	80 83       	st	Z, r24
    53f8:	05 c0       	rjmp	.+10     	; 0x5404 <__vector_37+0x6c>
    53fa:	e9 ec       	ldi	r30, 0xC9	; 201
    53fc:	f0 e0       	ldi	r31, 0x00	; 0
    53fe:	80 81       	ld	r24, Z
    5400:	8f 7d       	andi	r24, 0xDF	; 223
    5402:	80 83       	st	Z, r24
    5404:	ff 91       	pop	r31
    5406:	ef 91       	pop	r30
    5408:	bf 91       	pop	r27
    540a:	af 91       	pop	r26
    540c:	9f 91       	pop	r25
    540e:	8f 91       	pop	r24
    5410:	2f 91       	pop	r18
    5412:	0f 90       	pop	r0
    5414:	0b be       	out	0x3b, r0	; 59
    5416:	0f 90       	pop	r0
    5418:	0f be       	out	0x3f, r0	; 63
    541a:	0f 90       	pop	r0
    541c:	1f 90       	pop	r1
    541e:	18 95       	reti

00005420 <__vector_51>:
    5420:	1f 92       	push	r1
    5422:	0f 92       	push	r0
    5424:	0f b6       	in	r0, 0x3f	; 63
    5426:	0f 92       	push	r0
    5428:	11 24       	eor	r1, r1
    542a:	0b b6       	in	r0, 0x3b	; 59
    542c:	0f 92       	push	r0
    542e:	2f 93       	push	r18
    5430:	3f 93       	push	r19
    5432:	4f 93       	push	r20
    5434:	5f 93       	push	r21
    5436:	6f 93       	push	r22
    5438:	7f 93       	push	r23
    543a:	8f 93       	push	r24
    543c:	9f 93       	push	r25
    543e:	af 93       	push	r26
    5440:	bf 93       	push	r27
    5442:	cf 93       	push	r28
    5444:	df 93       	push	r29
    5446:	ef 93       	push	r30
    5448:	ff 93       	push	r31
    544a:	a0 91 44 1a 	lds	r26, 0x1A44	; 0x801a44 <_ser_handle+0x4>
    544e:	b0 91 45 1a 	lds	r27, 0x1A45	; 0x801a45 <_ser_handle+0x5>
    5452:	10 97       	sbiw	r26, 0x00	; 0
    5454:	11 f1       	breq	.+68     	; 0x549a <__vector_51+0x7a>
    5456:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    545a:	14 96       	adiw	r26, 0x04	; 4
    545c:	ed 91       	ld	r30, X+
    545e:	fc 91       	ld	r31, X
    5460:	15 97       	sbiw	r26, 0x05	; 5
    5462:	93 81       	ldd	r25, Z+3	; 0x03
    5464:	82 81       	ldd	r24, Z+2	; 0x02
    5466:	25 81       	ldd	r18, Z+5	; 0x05
    5468:	98 1b       	sub	r25, r24
    546a:	92 23       	and	r25, r18
    546c:	84 81       	ldd	r24, Z+4	; 0x04
    546e:	98 17       	cp	r25, r24
    5470:	61 f0       	breq	.+24     	; 0x548a <__vector_51+0x6a>
    5472:	83 81       	ldd	r24, Z+3	; 0x03
    5474:	26 95       	lsr	r18
    5476:	28 23       	and	r18, r24
    5478:	c0 81       	ld	r28, Z
    547a:	d1 81       	ldd	r29, Z+1	; 0x01
    547c:	c2 0f       	add	r28, r18
    547e:	d1 1d       	adc	r29, r1
    5480:	68 83       	st	Y, r22
    5482:	8f 5f       	subi	r24, 0xFF	; 255
    5484:	95 81       	ldd	r25, Z+5	; 0x05
    5486:	89 23       	and	r24, r25
    5488:	83 83       	std	Z+3, r24	; 0x03
    548a:	16 96       	adiw	r26, 0x06	; 6
    548c:	ed 91       	ld	r30, X+
    548e:	fc 91       	ld	r31, X
    5490:	17 97       	sbiw	r26, 0x07	; 7
    5492:	30 97       	sbiw	r30, 0x00	; 0
    5494:	11 f0       	breq	.+4      	; 0x549a <__vector_51+0x7a>
    5496:	cd 01       	movw	r24, r26
    5498:	19 95       	eicall
    549a:	ff 91       	pop	r31
    549c:	ef 91       	pop	r30
    549e:	df 91       	pop	r29
    54a0:	cf 91       	pop	r28
    54a2:	bf 91       	pop	r27
    54a4:	af 91       	pop	r26
    54a6:	9f 91       	pop	r25
    54a8:	8f 91       	pop	r24
    54aa:	7f 91       	pop	r23
    54ac:	6f 91       	pop	r22
    54ae:	5f 91       	pop	r21
    54b0:	4f 91       	pop	r20
    54b2:	3f 91       	pop	r19
    54b4:	2f 91       	pop	r18
    54b6:	0f 90       	pop	r0
    54b8:	0b be       	out	0x3b, r0	; 59
    54ba:	0f 90       	pop	r0
    54bc:	0f be       	out	0x3f, r0	; 63
    54be:	0f 90       	pop	r0
    54c0:	1f 90       	pop	r1
    54c2:	18 95       	reti

000054c4 <__vector_52>:
    54c4:	1f 92       	push	r1
    54c6:	0f 92       	push	r0
    54c8:	0f b6       	in	r0, 0x3f	; 63
    54ca:	0f 92       	push	r0
    54cc:	11 24       	eor	r1, r1
    54ce:	0b b6       	in	r0, 0x3b	; 59
    54d0:	0f 92       	push	r0
    54d2:	2f 93       	push	r18
    54d4:	8f 93       	push	r24
    54d6:	9f 93       	push	r25
    54d8:	af 93       	push	r26
    54da:	bf 93       	push	r27
    54dc:	ef 93       	push	r30
    54de:	ff 93       	push	r31
    54e0:	e0 91 44 1a 	lds	r30, 0x1A44	; 0x801a44 <_ser_handle+0x4>
    54e4:	f0 91 45 1a 	lds	r31, 0x1A45	; 0x801a45 <_ser_handle+0x5>
    54e8:	30 97       	sbiw	r30, 0x00	; 0
    54ea:	b9 f0       	breq	.+46     	; 0x551a <__vector_52+0x56>
    54ec:	02 80       	ldd	r0, Z+2	; 0x02
    54ee:	f3 81       	ldd	r31, Z+3	; 0x03
    54f0:	e0 2d       	mov	r30, r0
    54f2:	93 81       	ldd	r25, Z+3	; 0x03
    54f4:	82 81       	ldd	r24, Z+2	; 0x02
    54f6:	98 17       	cp	r25, r24
    54f8:	b1 f0       	breq	.+44     	; 0x5526 <__vector_52+0x62>
    54fa:	92 81       	ldd	r25, Z+2	; 0x02
    54fc:	85 81       	ldd	r24, Z+5	; 0x05
    54fe:	28 2f       	mov	r18, r24
    5500:	26 95       	lsr	r18
    5502:	29 23       	and	r18, r25
    5504:	a0 81       	ld	r26, Z
    5506:	b1 81       	ldd	r27, Z+1	; 0x01
    5508:	a2 0f       	add	r26, r18
    550a:	b1 1d       	adc	r27, r1
    550c:	2c 91       	ld	r18, X
    550e:	9f 5f       	subi	r25, 0xFF	; 255
    5510:	89 23       	and	r24, r25
    5512:	82 83       	std	Z+2, r24	; 0x02
    5514:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    5518:	0b c0       	rjmp	.+22     	; 0x5530 <__vector_52+0x6c>
    551a:	e1 ed       	ldi	r30, 0xD1	; 209
    551c:	f0 e0       	ldi	r31, 0x00	; 0
    551e:	80 81       	ld	r24, Z
    5520:	8f 7d       	andi	r24, 0xDF	; 223
    5522:	80 83       	st	Z, r24
    5524:	05 c0       	rjmp	.+10     	; 0x5530 <__vector_52+0x6c>
    5526:	e1 ed       	ldi	r30, 0xD1	; 209
    5528:	f0 e0       	ldi	r31, 0x00	; 0
    552a:	80 81       	ld	r24, Z
    552c:	8f 7d       	andi	r24, 0xDF	; 223
    552e:	80 83       	st	Z, r24
    5530:	ff 91       	pop	r31
    5532:	ef 91       	pop	r30
    5534:	bf 91       	pop	r27
    5536:	af 91       	pop	r26
    5538:	9f 91       	pop	r25
    553a:	8f 91       	pop	r24
    553c:	2f 91       	pop	r18
    553e:	0f 90       	pop	r0
    5540:	0b be       	out	0x3b, r0	; 59
    5542:	0f 90       	pop	r0
    5544:	0f be       	out	0x3f, r0	; 63
    5546:	0f 90       	pop	r0
    5548:	1f 90       	pop	r1
    554a:	18 95       	reti

0000554c <__vector_54>:
    554c:	1f 92       	push	r1
    554e:	0f 92       	push	r0
    5550:	0f b6       	in	r0, 0x3f	; 63
    5552:	0f 92       	push	r0
    5554:	11 24       	eor	r1, r1
    5556:	0b b6       	in	r0, 0x3b	; 59
    5558:	0f 92       	push	r0
    555a:	2f 93       	push	r18
    555c:	3f 93       	push	r19
    555e:	4f 93       	push	r20
    5560:	5f 93       	push	r21
    5562:	6f 93       	push	r22
    5564:	7f 93       	push	r23
    5566:	8f 93       	push	r24
    5568:	9f 93       	push	r25
    556a:	af 93       	push	r26
    556c:	bf 93       	push	r27
    556e:	cf 93       	push	r28
    5570:	df 93       	push	r29
    5572:	ef 93       	push	r30
    5574:	ff 93       	push	r31
    5576:	a0 91 46 1a 	lds	r26, 0x1A46	; 0x801a46 <_ser_handle+0x6>
    557a:	b0 91 47 1a 	lds	r27, 0x1A47	; 0x801a47 <_ser_handle+0x7>
    557e:	10 97       	sbiw	r26, 0x00	; 0
    5580:	11 f1       	breq	.+68     	; 0x55c6 <__vector_54+0x7a>
    5582:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    5586:	14 96       	adiw	r26, 0x04	; 4
    5588:	ed 91       	ld	r30, X+
    558a:	fc 91       	ld	r31, X
    558c:	15 97       	sbiw	r26, 0x05	; 5
    558e:	93 81       	ldd	r25, Z+3	; 0x03
    5590:	82 81       	ldd	r24, Z+2	; 0x02
    5592:	25 81       	ldd	r18, Z+5	; 0x05
    5594:	98 1b       	sub	r25, r24
    5596:	92 23       	and	r25, r18
    5598:	84 81       	ldd	r24, Z+4	; 0x04
    559a:	98 17       	cp	r25, r24
    559c:	61 f0       	breq	.+24     	; 0x55b6 <__vector_54+0x6a>
    559e:	83 81       	ldd	r24, Z+3	; 0x03
    55a0:	26 95       	lsr	r18
    55a2:	28 23       	and	r18, r24
    55a4:	c0 81       	ld	r28, Z
    55a6:	d1 81       	ldd	r29, Z+1	; 0x01
    55a8:	c2 0f       	add	r28, r18
    55aa:	d1 1d       	adc	r29, r1
    55ac:	68 83       	st	Y, r22
    55ae:	8f 5f       	subi	r24, 0xFF	; 255
    55b0:	95 81       	ldd	r25, Z+5	; 0x05
    55b2:	89 23       	and	r24, r25
    55b4:	83 83       	std	Z+3, r24	; 0x03
    55b6:	16 96       	adiw	r26, 0x06	; 6
    55b8:	ed 91       	ld	r30, X+
    55ba:	fc 91       	ld	r31, X
    55bc:	17 97       	sbiw	r26, 0x07	; 7
    55be:	30 97       	sbiw	r30, 0x00	; 0
    55c0:	11 f0       	breq	.+4      	; 0x55c6 <__vector_54+0x7a>
    55c2:	cd 01       	movw	r24, r26
    55c4:	19 95       	eicall
    55c6:	ff 91       	pop	r31
    55c8:	ef 91       	pop	r30
    55ca:	df 91       	pop	r29
    55cc:	cf 91       	pop	r28
    55ce:	bf 91       	pop	r27
    55d0:	af 91       	pop	r26
    55d2:	9f 91       	pop	r25
    55d4:	8f 91       	pop	r24
    55d6:	7f 91       	pop	r23
    55d8:	6f 91       	pop	r22
    55da:	5f 91       	pop	r21
    55dc:	4f 91       	pop	r20
    55de:	3f 91       	pop	r19
    55e0:	2f 91       	pop	r18
    55e2:	0f 90       	pop	r0
    55e4:	0b be       	out	0x3b, r0	; 59
    55e6:	0f 90       	pop	r0
    55e8:	0f be       	out	0x3f, r0	; 63
    55ea:	0f 90       	pop	r0
    55ec:	1f 90       	pop	r1
    55ee:	18 95       	reti

000055f0 <__vector_55>:
    55f0:	1f 92       	push	r1
    55f2:	0f 92       	push	r0
    55f4:	0f b6       	in	r0, 0x3f	; 63
    55f6:	0f 92       	push	r0
    55f8:	11 24       	eor	r1, r1
    55fa:	0b b6       	in	r0, 0x3b	; 59
    55fc:	0f 92       	push	r0
    55fe:	2f 93       	push	r18
    5600:	8f 93       	push	r24
    5602:	9f 93       	push	r25
    5604:	af 93       	push	r26
    5606:	bf 93       	push	r27
    5608:	ef 93       	push	r30
    560a:	ff 93       	push	r31
    560c:	e0 91 46 1a 	lds	r30, 0x1A46	; 0x801a46 <_ser_handle+0x6>
    5610:	f0 91 47 1a 	lds	r31, 0x1A47	; 0x801a47 <_ser_handle+0x7>
    5614:	30 97       	sbiw	r30, 0x00	; 0
    5616:	b9 f0       	breq	.+46     	; 0x5646 <__vector_55+0x56>
    5618:	02 80       	ldd	r0, Z+2	; 0x02
    561a:	f3 81       	ldd	r31, Z+3	; 0x03
    561c:	e0 2d       	mov	r30, r0
    561e:	93 81       	ldd	r25, Z+3	; 0x03
    5620:	82 81       	ldd	r24, Z+2	; 0x02
    5622:	98 17       	cp	r25, r24
    5624:	b1 f0       	breq	.+44     	; 0x5652 <__vector_55+0x62>
    5626:	92 81       	ldd	r25, Z+2	; 0x02
    5628:	85 81       	ldd	r24, Z+5	; 0x05
    562a:	28 2f       	mov	r18, r24
    562c:	26 95       	lsr	r18
    562e:	29 23       	and	r18, r25
    5630:	a0 81       	ld	r26, Z
    5632:	b1 81       	ldd	r27, Z+1	; 0x01
    5634:	a2 0f       	add	r26, r18
    5636:	b1 1d       	adc	r27, r1
    5638:	2c 91       	ld	r18, X
    563a:	9f 5f       	subi	r25, 0xFF	; 255
    563c:	89 23       	and	r24, r25
    563e:	82 83       	std	Z+2, r24	; 0x02
    5640:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    5644:	0b c0       	rjmp	.+22     	; 0x565c <__vector_55+0x6c>
    5646:	e1 e3       	ldi	r30, 0x31	; 49
    5648:	f1 e0       	ldi	r31, 0x01	; 1
    564a:	80 81       	ld	r24, Z
    564c:	8f 7d       	andi	r24, 0xDF	; 223
    564e:	80 83       	st	Z, r24
    5650:	05 c0       	rjmp	.+10     	; 0x565c <__vector_55+0x6c>
    5652:	e1 e3       	ldi	r30, 0x31	; 49
    5654:	f1 e0       	ldi	r31, 0x01	; 1
    5656:	80 81       	ld	r24, Z
    5658:	8f 7d       	andi	r24, 0xDF	; 223
    565a:	80 83       	st	Z, r24
    565c:	ff 91       	pop	r31
    565e:	ef 91       	pop	r30
    5660:	bf 91       	pop	r27
    5662:	af 91       	pop	r26
    5664:	9f 91       	pop	r25
    5666:	8f 91       	pop	r24
    5668:	2f 91       	pop	r18
    566a:	0f 90       	pop	r0
    566c:	0b be       	out	0x3b, r0	; 59
    566e:	0f 90       	pop	r0
    5670:	0f be       	out	0x3f, r0	; 63
    5672:	0f 90       	pop	r0
    5674:	1f 90       	pop	r1
    5676:	18 95       	reti

00005678 <usart_getchar>:
    5678:	cf 93       	push	r28
    567a:	df 93       	push	r29
    567c:	1f 92       	push	r1
    567e:	cd b7       	in	r28, 0x3d	; 61
    5680:	de b7       	in	r29, 0x3e	; 62
    5682:	be 01       	movw	r22, r28
    5684:	6f 5f       	subi	r22, 0xFF	; 255
    5686:	7f 4f       	sbci	r23, 0xFF	; 255
    5688:	80 91 48 1a 	lds	r24, 0x1A48	; 0x801a48 <_com_serial_instance>
    568c:	90 91 49 1a 	lds	r25, 0x1A49	; 0x801a49 <_com_serial_instance+0x1>
    5690:	7f dd       	rcall	.-1282   	; 0x5190 <serial_get_byte>
    5692:	81 11       	cpse	r24, r1
    5694:	f6 cf       	rjmp	.-20     	; 0x5682 <usart_getchar+0xa>
    5696:	89 81       	ldd	r24, Y+1	; 0x01
    5698:	90 e0       	ldi	r25, 0x00	; 0
    569a:	0f 90       	pop	r0
    569c:	df 91       	pop	r29
    569e:	cf 91       	pop	r28
    56a0:	08 95       	ret

000056a2 <usart_putchar>:
    56a2:	68 2f       	mov	r22, r24
    56a4:	80 91 48 1a 	lds	r24, 0x1A48	; 0x801a48 <_com_serial_instance>
    56a8:	90 91 49 1a 	lds	r25, 0x1A49	; 0x801a49 <_com_serial_instance+0x1>
    56ac:	fc dc       	rcall	.-1544   	; 0x50a6 <serial_send_byte>
    56ae:	80 e0       	ldi	r24, 0x00	; 0
    56b0:	90 e0       	ldi	r25, 0x00	; 0
    56b2:	08 95       	ret

000056b4 <stdioCreate>:
    56b4:	8f 92       	push	r8
    56b6:	9f 92       	push	r9
    56b8:	af 92       	push	r10
    56ba:	cf 92       	push	r12
    56bc:	ef 92       	push	r14
    56be:	0f 93       	push	r16
    56c0:	81 2c       	mov	r8, r1
    56c2:	91 2c       	mov	r9, r1
    56c4:	68 94       	set
    56c6:	aa 24       	eor	r10, r10
    56c8:	a7 f8       	bld	r10, 7
    56ca:	68 94       	set
    56cc:	cc 24       	eor	r12, r12
    56ce:	c7 f8       	bld	r12, 7
    56d0:	e1 2c       	mov	r14, r1
    56d2:	00 e0       	ldi	r16, 0x00	; 0
    56d4:	23 e0       	ldi	r18, 0x03	; 3
    56d6:	40 e0       	ldi	r20, 0x00	; 0
    56d8:	51 ee       	ldi	r21, 0xE1	; 225
    56da:	60 e0       	ldi	r22, 0x00	; 0
    56dc:	70 e0       	ldi	r23, 0x00	; 0
    56de:	4d dc       	rcall	.-1894   	; 0x4f7a <serial_new_instance>
    56e0:	90 93 49 1a 	sts	0x1A49, r25	; 0x801a49 <_com_serial_instance+0x1>
    56e4:	80 93 48 1a 	sts	0x1A48, r24	; 0x801a48 <_com_serial_instance>
    56e8:	e3 e9       	ldi	r30, 0x93	; 147
    56ea:	fa e1       	ldi	r31, 0x1A	; 26
    56ec:	86 e1       	ldi	r24, 0x16	; 22
    56ee:	92 e0       	ldi	r25, 0x02	; 2
    56f0:	91 83       	std	Z+1, r25	; 0x01
    56f2:	80 83       	st	Z, r24
    56f4:	93 83       	std	Z+3, r25	; 0x03
    56f6:	82 83       	std	Z+2, r24	; 0x02
    56f8:	0f 91       	pop	r16
    56fa:	ef 90       	pop	r14
    56fc:	cf 90       	pop	r12
    56fe:	af 90       	pop	r10
    5700:	9f 90       	pop	r9
    5702:	8f 90       	pop	r8
    5704:	08 95       	ret

00005706 <_initTwiInterface>:
    5706:	80 91 58 1a 	lds	r24, 0x1A58	; 0x801a58 <_twiIsInitiated>
    570a:	81 11       	cpse	r24, r1
    570c:	0c c0       	rjmp	.+24     	; 0x5726 <_initTwiInterface+0x20>
    570e:	8c e0       	ldi	r24, 0x0C	; 12
    5710:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    5714:	8f ef       	ldi	r24, 0xFF	; 255
    5716:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    571a:	84 e0       	ldi	r24, 0x04	; 4
    571c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    5720:	81 e0       	ldi	r24, 0x01	; 1
    5722:	80 93 58 1a 	sts	0x1A58, r24	; 0x801a58 <_twiIsInitiated>
    5726:	08 95       	ret

00005728 <twiCreate>:
    5728:	af 92       	push	r10
    572a:	bf 92       	push	r11
    572c:	cf 92       	push	r12
    572e:	df 92       	push	r13
    5730:	ef 92       	push	r14
    5732:	ff 92       	push	r15
    5734:	0f 93       	push	r16
    5736:	1f 93       	push	r17
    5738:	cf 93       	push	r28
    573a:	df 93       	push	r29
    573c:	a8 2e       	mov	r10, r24
    573e:	b6 2e       	mov	r11, r22
    5740:	69 01       	movw	r12, r18
    5742:	7a 01       	movw	r14, r20
    5744:	84 e0       	ldi	r24, 0x04	; 4
    5746:	90 e0       	ldi	r25, 0x00	; 0
    5748:	f2 d3       	rcall	.+2020   	; 0x5f2e <malloc>
    574a:	ec 01       	movw	r28, r24
    574c:	89 2b       	or	r24, r25
    574e:	61 f1       	breq	.+88     	; 0x57a8 <twiCreate+0x80>
    5750:	a8 82       	st	Y, r10
    5752:	81 e0       	ldi	r24, 0x01	; 1
    5754:	b8 12       	cpse	r11, r24
    5756:	12 c0       	rjmp	.+36     	; 0x577c <twiCreate+0x54>
    5758:	c7 01       	movw	r24, r14
    575a:	b6 01       	movw	r22, r12
    575c:	20 ea       	ldi	r18, 0xA0	; 160
    575e:	36 e8       	ldi	r19, 0x86	; 134
    5760:	41 e0       	ldi	r20, 0x01	; 1
    5762:	50 e0       	ldi	r21, 0x00	; 0
    5764:	8c d3       	rcall	.+1816   	; 0x5e7e <__udivmodsi4>
    5766:	da 01       	movw	r26, r20
    5768:	c9 01       	movw	r24, r18
    576a:	40 97       	sbiw	r24, 0x10	; 16
    576c:	a1 09       	sbc	r26, r1
    576e:	b1 09       	sbc	r27, r1
    5770:	b6 95       	lsr	r27
    5772:	a7 95       	ror	r26
    5774:	97 95       	ror	r25
    5776:	87 95       	ror	r24
    5778:	89 83       	std	Y+1, r24	; 0x01
    577a:	11 c0       	rjmp	.+34     	; 0x579e <twiCreate+0x76>
    577c:	c7 01       	movw	r24, r14
    577e:	b6 01       	movw	r22, r12
    5780:	20 e8       	ldi	r18, 0x80	; 128
    5782:	3a e1       	ldi	r19, 0x1A	; 26
    5784:	46 e0       	ldi	r20, 0x06	; 6
    5786:	50 e0       	ldi	r21, 0x00	; 0
    5788:	7a d3       	rcall	.+1780   	; 0x5e7e <__udivmodsi4>
    578a:	da 01       	movw	r26, r20
    578c:	c9 01       	movw	r24, r18
    578e:	40 97       	sbiw	r24, 0x10	; 16
    5790:	a1 09       	sbc	r26, r1
    5792:	b1 09       	sbc	r27, r1
    5794:	b6 95       	lsr	r27
    5796:	a7 95       	ror	r26
    5798:	97 95       	ror	r25
    579a:	87 95       	ror	r24
    579c:	89 83       	std	Y+1, r24	; 0x01
    579e:	1b 83       	std	Y+3, r17	; 0x03
    57a0:	0a 83       	std	Y+2, r16	; 0x02
    57a2:	8c 2f       	mov	r24, r28
    57a4:	9d 2f       	mov	r25, r29
    57a6:	02 c0       	rjmp	.+4      	; 0x57ac <twiCreate+0x84>
    57a8:	80 e0       	ldi	r24, 0x00	; 0
    57aa:	90 e0       	ldi	r25, 0x00	; 0
    57ac:	df 91       	pop	r29
    57ae:	cf 91       	pop	r28
    57b0:	1f 91       	pop	r17
    57b2:	0f 91       	pop	r16
    57b4:	ff 90       	pop	r15
    57b6:	ef 90       	pop	r14
    57b8:	df 90       	pop	r13
    57ba:	cf 90       	pop	r12
    57bc:	bf 90       	pop	r11
    57be:	af 90       	pop	r10
    57c0:	08 95       	ret

000057c2 <twiIsBusy>:
    57c2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    57c6:	81 70       	andi	r24, 0x01	; 1
    57c8:	08 95       	ret

000057ca <twiTransmit>:
    57ca:	ff 92       	push	r15
    57cc:	0f 93       	push	r16
    57ce:	1f 93       	push	r17
    57d0:	cf 93       	push	r28
    57d2:	df 93       	push	r29
    57d4:	00 97       	sbiw	r24, 0x00	; 0
    57d6:	d1 f1       	breq	.+116    	; 0x584c <twiTransmit+0x82>
    57d8:	4a 30       	cpi	r20, 0x0A	; 10
    57da:	d0 f5       	brcc	.+116    	; 0x5850 <twiTransmit+0x86>
    57dc:	f4 2e       	mov	r15, r20
    57de:	8b 01       	movw	r16, r22
    57e0:	ec 01       	movw	r28, r24
    57e2:	ef df       	rcall	.-34     	; 0x57c2 <twiIsBusy>
    57e4:	81 11       	cpse	r24, r1
    57e6:	36 c0       	rjmp	.+108    	; 0x5854 <twiTransmit+0x8a>
    57e8:	80 91 4b 1a 	lds	r24, 0x1A4B	; 0x801a4b <_twiCurrentHandler>
    57ec:	90 91 4c 1a 	lds	r25, 0x1A4C	; 0x801a4c <_twiCurrentHandler+0x1>
    57f0:	c8 17       	cp	r28, r24
    57f2:	d9 07       	cpc	r29, r25
    57f4:	41 f0       	breq	.+16     	; 0x5806 <twiTransmit+0x3c>
    57f6:	87 df       	rcall	.-242    	; 0x5706 <_initTwiInterface>
    57f8:	89 81       	ldd	r24, Y+1	; 0x01
    57fa:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    57fe:	d0 93 4c 1a 	sts	0x1A4C, r29	; 0x801a4c <_twiCurrentHandler+0x1>
    5802:	c0 93 4b 1a 	sts	0x1A4B, r28	; 0x801a4b <_twiCurrentHandler>
    5806:	81 e0       	ldi	r24, 0x01	; 1
    5808:	8f 0d       	add	r24, r15
    580a:	80 93 4d 1a 	sts	0x1A4D, r24	; 0x801a4d <_twiMessageLen>
    580e:	88 81       	ld	r24, Y
    5810:	88 0f       	add	r24, r24
    5812:	80 93 4e 1a 	sts	0x1A4E, r24	; 0x801a4e <_twiMessageBuffer>
    5816:	ff 20       	and	r15, r15
    5818:	89 f0       	breq	.+34     	; 0x583c <twiTransmit+0x72>
    581a:	f8 01       	movw	r30, r16
    581c:	af e4       	ldi	r26, 0x4F	; 79
    581e:	ba e1       	ldi	r27, 0x1A	; 26
    5820:	4f ef       	ldi	r20, 0xFF	; 255
    5822:	4f 0d       	add	r20, r15
    5824:	64 2f       	mov	r22, r20
    5826:	70 e0       	ldi	r23, 0x00	; 0
    5828:	cb 01       	movw	r24, r22
    582a:	01 96       	adiw	r24, 0x01	; 1
    582c:	b8 01       	movw	r22, r16
    582e:	68 0f       	add	r22, r24
    5830:	79 1f       	adc	r23, r25
    5832:	81 91       	ld	r24, Z+
    5834:	8d 93       	st	X+, r24
    5836:	e6 17       	cp	r30, r22
    5838:	f7 07       	cpc	r31, r23
    583a:	d9 f7       	brne	.-10     	; 0x5832 <twiTransmit+0x68>
    583c:	88 ef       	ldi	r24, 0xF8	; 248
    583e:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <_twiCurrentState>
    5842:	85 ea       	ldi	r24, 0xA5	; 165
    5844:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    5848:	84 e0       	ldi	r24, 0x04	; 4
    584a:	05 c0       	rjmp	.+10     	; 0x5856 <twiTransmit+0x8c>
    584c:	86 e0       	ldi	r24, 0x06	; 6
    584e:	03 c0       	rjmp	.+6      	; 0x5856 <twiTransmit+0x8c>
    5850:	87 e0       	ldi	r24, 0x07	; 7
    5852:	01 c0       	rjmp	.+2      	; 0x5856 <twiTransmit+0x8c>
    5854:	82 e0       	ldi	r24, 0x02	; 2
    5856:	df 91       	pop	r29
    5858:	cf 91       	pop	r28
    585a:	1f 91       	pop	r17
    585c:	0f 91       	pop	r16
    585e:	ff 90       	pop	r15
    5860:	08 95       	ret

00005862 <twiReceive>:
    5862:	1f 93       	push	r17
    5864:	cf 93       	push	r28
    5866:	df 93       	push	r29
    5868:	00 97       	sbiw	r24, 0x00	; 0
    586a:	29 f1       	breq	.+74     	; 0x58b6 <twiReceive+0x54>
    586c:	6b 30       	cpi	r22, 0x0B	; 11
    586e:	28 f5       	brcc	.+74     	; 0x58ba <twiReceive+0x58>
    5870:	16 2f       	mov	r17, r22
    5872:	ec 01       	movw	r28, r24
    5874:	a6 df       	rcall	.-180    	; 0x57c2 <twiIsBusy>
    5876:	81 11       	cpse	r24, r1
    5878:	22 c0       	rjmp	.+68     	; 0x58be <twiReceive+0x5c>
    587a:	80 91 4b 1a 	lds	r24, 0x1A4B	; 0x801a4b <_twiCurrentHandler>
    587e:	90 91 4c 1a 	lds	r25, 0x1A4C	; 0x801a4c <_twiCurrentHandler+0x1>
    5882:	c8 17       	cp	r28, r24
    5884:	d9 07       	cpc	r29, r25
    5886:	41 f0       	breq	.+16     	; 0x5898 <twiReceive+0x36>
    5888:	3e df       	rcall	.-388    	; 0x5706 <_initTwiInterface>
    588a:	89 81       	ldd	r24, Y+1	; 0x01
    588c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    5890:	d0 93 4c 1a 	sts	0x1A4C, r29	; 0x801a4c <_twiCurrentHandler+0x1>
    5894:	c0 93 4b 1a 	sts	0x1A4B, r28	; 0x801a4b <_twiCurrentHandler>
    5898:	10 93 4d 1a 	sts	0x1A4D, r17	; 0x801a4d <_twiMessageLen>
    589c:	88 81       	ld	r24, Y
    589e:	88 0f       	add	r24, r24
    58a0:	81 60       	ori	r24, 0x01	; 1
    58a2:	80 93 4e 1a 	sts	0x1A4E, r24	; 0x801a4e <_twiMessageBuffer>
    58a6:	88 ef       	ldi	r24, 0xF8	; 248
    58a8:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <_twiCurrentState>
    58ac:	85 ea       	ldi	r24, 0xA5	; 165
    58ae:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    58b2:	85 e0       	ldi	r24, 0x05	; 5
    58b4:	05 c0       	rjmp	.+10     	; 0x58c0 <twiReceive+0x5e>
    58b6:	86 e0       	ldi	r24, 0x06	; 6
    58b8:	03 c0       	rjmp	.+6      	; 0x58c0 <twiReceive+0x5e>
    58ba:	87 e0       	ldi	r24, 0x07	; 7
    58bc:	01 c0       	rjmp	.+2      	; 0x58c0 <twiReceive+0x5e>
    58be:	82 e0       	ldi	r24, 0x02	; 2
    58c0:	df 91       	pop	r29
    58c2:	cf 91       	pop	r28
    58c4:	1f 91       	pop	r17
    58c6:	08 95       	ret

000058c8 <__vector_39>:
    58c8:	1f 92       	push	r1
    58ca:	0f 92       	push	r0
    58cc:	0f b6       	in	r0, 0x3f	; 63
    58ce:	0f 92       	push	r0
    58d0:	11 24       	eor	r1, r1
    58d2:	0b b6       	in	r0, 0x3b	; 59
    58d4:	0f 92       	push	r0
    58d6:	2f 93       	push	r18
    58d8:	3f 93       	push	r19
    58da:	4f 93       	push	r20
    58dc:	5f 93       	push	r21
    58de:	6f 93       	push	r22
    58e0:	7f 93       	push	r23
    58e2:	8f 93       	push	r24
    58e4:	9f 93       	push	r25
    58e6:	af 93       	push	r26
    58e8:	bf 93       	push	r27
    58ea:	ef 93       	push	r30
    58ec:	ff 93       	push	r31
    58ee:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    58f2:	8e 2f       	mov	r24, r30
    58f4:	90 e0       	ldi	r25, 0x00	; 0
    58f6:	fc 01       	movw	r30, r24
    58f8:	38 97       	sbiw	r30, 0x08	; 8
    58fa:	e1 35       	cpi	r30, 0x51	; 81
    58fc:	f1 05       	cpc	r31, r1
    58fe:	08 f0       	brcs	.+2      	; 0x5902 <__vector_39+0x3a>
    5900:	75 c0       	rjmp	.+234    	; 0x59ec <__vector_39+0x124>
    5902:	88 27       	eor	r24, r24
    5904:	e4 58       	subi	r30, 0x84	; 132
    5906:	ff 4f       	sbci	r31, 0xFF	; 255
    5908:	8f 4f       	sbci	r24, 0xFF	; 255
    590a:	db c2       	rjmp	.+1462   	; 0x5ec2 <__tablejump2__>
    590c:	10 92 4a 1a 	sts	0x1A4A, r1	; 0x801a4a <_index.1885>
    5910:	e0 91 4a 1a 	lds	r30, 0x1A4A	; 0x801a4a <_index.1885>
    5914:	80 91 4d 1a 	lds	r24, 0x1A4D	; 0x801a4d <_twiMessageLen>
    5918:	e8 17       	cp	r30, r24
    591a:	70 f4       	brcc	.+28     	; 0x5938 <__vector_39+0x70>
    591c:	81 e0       	ldi	r24, 0x01	; 1
    591e:	8e 0f       	add	r24, r30
    5920:	80 93 4a 1a 	sts	0x1A4A, r24	; 0x801a4a <_index.1885>
    5924:	f0 e0       	ldi	r31, 0x00	; 0
    5926:	e2 5b       	subi	r30, 0xB2	; 178
    5928:	f5 4e       	sbci	r31, 0xE5	; 229
    592a:	80 81       	ld	r24, Z
    592c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    5930:	85 e8       	ldi	r24, 0x85	; 133
    5932:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    5936:	72 c0       	rjmp	.+228    	; 0x5a1c <__vector_39+0x154>
    5938:	84 e9       	ldi	r24, 0x94	; 148
    593a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    593e:	80 91 4b 1a 	lds	r24, 0x1A4B	; 0x801a4b <_twiCurrentHandler>
    5942:	90 91 4c 1a 	lds	r25, 0x1A4C	; 0x801a4c <_twiCurrentHandler+0x1>
    5946:	dc 01       	movw	r26, r24
    5948:	12 96       	adiw	r26, 0x02	; 2
    594a:	ed 91       	ld	r30, X+
    594c:	fc 91       	ld	r31, X
    594e:	13 97       	sbiw	r26, 0x03	; 3
    5950:	30 97       	sbiw	r30, 0x00	; 0
    5952:	09 f4       	brne	.+2      	; 0x5956 <__vector_39+0x8e>
    5954:	63 c0       	rjmp	.+198    	; 0x5a1c <__vector_39+0x154>
    5956:	20 e0       	ldi	r18, 0x00	; 0
    5958:	40 e0       	ldi	r20, 0x00	; 0
    595a:	50 e0       	ldi	r21, 0x00	; 0
    595c:	64 e0       	ldi	r22, 0x04	; 4
    595e:	19 95       	eicall
    5960:	5d c0       	rjmp	.+186    	; 0x5a1c <__vector_39+0x154>
    5962:	e0 91 4a 1a 	lds	r30, 0x1A4A	; 0x801a4a <_index.1885>
    5966:	81 e0       	ldi	r24, 0x01	; 1
    5968:	8e 0f       	add	r24, r30
    596a:	80 93 4a 1a 	sts	0x1A4A, r24	; 0x801a4a <_index.1885>
    596e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    5972:	f0 e0       	ldi	r31, 0x00	; 0
    5974:	e2 5b       	subi	r30, 0xB2	; 178
    5976:	f5 4e       	sbci	r31, 0xE5	; 229
    5978:	80 83       	st	Z, r24
    597a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    597e:	80 34       	cpi	r24, 0x40	; 64
    5980:	11 f4       	brne	.+4      	; 0x5986 <__vector_39+0xbe>
    5982:	10 92 4a 1a 	sts	0x1A4A, r1	; 0x801a4a <_index.1885>
    5986:	20 91 4a 1a 	lds	r18, 0x1A4A	; 0x801a4a <_index.1885>
    598a:	30 e0       	ldi	r19, 0x00	; 0
    598c:	80 91 4d 1a 	lds	r24, 0x1A4D	; 0x801a4d <_twiMessageLen>
    5990:	90 e0       	ldi	r25, 0x00	; 0
    5992:	01 97       	sbiw	r24, 0x01	; 1
    5994:	28 17       	cp	r18, r24
    5996:	39 07       	cpc	r19, r25
    5998:	24 f4       	brge	.+8      	; 0x59a2 <__vector_39+0xda>
    599a:	85 ec       	ldi	r24, 0xC5	; 197
    599c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    59a0:	3d c0       	rjmp	.+122    	; 0x5a1c <__vector_39+0x154>
    59a2:	85 e8       	ldi	r24, 0x85	; 133
    59a4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    59a8:	39 c0       	rjmp	.+114    	; 0x5a1c <__vector_39+0x154>
    59aa:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    59ae:	e0 91 4a 1a 	lds	r30, 0x1A4A	; 0x801a4a <_index.1885>
    59b2:	f0 e0       	ldi	r31, 0x00	; 0
    59b4:	e2 5b       	subi	r30, 0xB2	; 178
    59b6:	f5 4e       	sbci	r31, 0xE5	; 229
    59b8:	80 83       	st	Z, r24
    59ba:	84 e9       	ldi	r24, 0x94	; 148
    59bc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    59c0:	80 91 4b 1a 	lds	r24, 0x1A4B	; 0x801a4b <_twiCurrentHandler>
    59c4:	90 91 4c 1a 	lds	r25, 0x1A4C	; 0x801a4c <_twiCurrentHandler+0x1>
    59c8:	dc 01       	movw	r26, r24
    59ca:	12 96       	adiw	r26, 0x02	; 2
    59cc:	ed 91       	ld	r30, X+
    59ce:	fc 91       	ld	r31, X
    59d0:	13 97       	sbiw	r26, 0x03	; 3
    59d2:	30 97       	sbiw	r30, 0x00	; 0
    59d4:	19 f1       	breq	.+70     	; 0x5a1c <__vector_39+0x154>
    59d6:	20 91 4d 1a 	lds	r18, 0x1A4D	; 0x801a4d <_twiMessageLen>
    59da:	4e e4       	ldi	r20, 0x4E	; 78
    59dc:	5a e1       	ldi	r21, 0x1A	; 26
    59de:	65 e0       	ldi	r22, 0x05	; 5
    59e0:	19 95       	eicall
    59e2:	1c c0       	rjmp	.+56     	; 0x5a1c <__vector_39+0x154>
    59e4:	85 ea       	ldi	r24, 0xA5	; 165
    59e6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    59ea:	18 c0       	rjmp	.+48     	; 0x5a1c <__vector_39+0x154>
    59ec:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    59f0:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <_twiCurrentState>
    59f4:	84 e0       	ldi	r24, 0x04	; 4
    59f6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    59fa:	80 91 4b 1a 	lds	r24, 0x1A4B	; 0x801a4b <_twiCurrentHandler>
    59fe:	90 91 4c 1a 	lds	r25, 0x1A4C	; 0x801a4c <_twiCurrentHandler+0x1>
    5a02:	dc 01       	movw	r26, r24
    5a04:	12 96       	adiw	r26, 0x02	; 2
    5a06:	ed 91       	ld	r30, X+
    5a08:	fc 91       	ld	r31, X
    5a0a:	13 97       	sbiw	r26, 0x03	; 3
    5a0c:	30 97       	sbiw	r30, 0x00	; 0
    5a0e:	31 f0       	breq	.+12     	; 0x5a1c <__vector_39+0x154>
    5a10:	20 e0       	ldi	r18, 0x00	; 0
    5a12:	40 e0       	ldi	r20, 0x00	; 0
    5a14:	50 e0       	ldi	r21, 0x00	; 0
    5a16:	60 91 24 02 	lds	r22, 0x0224	; 0x800224 <_twiCurrentState>
    5a1a:	19 95       	eicall
    5a1c:	ff 91       	pop	r31
    5a1e:	ef 91       	pop	r30
    5a20:	bf 91       	pop	r27
    5a22:	af 91       	pop	r26
    5a24:	9f 91       	pop	r25
    5a26:	8f 91       	pop	r24
    5a28:	7f 91       	pop	r23
    5a2a:	6f 91       	pop	r22
    5a2c:	5f 91       	pop	r21
    5a2e:	4f 91       	pop	r20
    5a30:	3f 91       	pop	r19
    5a32:	2f 91       	pop	r18
    5a34:	0f 90       	pop	r0
    5a36:	0b be       	out	0x3b, r0	; 59
    5a38:	0f 90       	pop	r0
    5a3a:	0f be       	out	0x3f, r0	; 63
    5a3c:	0f 90       	pop	r0
    5a3e:	1f 90       	pop	r1
    5a40:	18 95       	reti

00005a42 <fifo_init>:
    5a42:	fc 01       	movw	r30, r24
    5a44:	41 11       	cpse	r20, r1
    5a46:	01 c0       	rjmp	.+2      	; 0x5a4a <fifo_init+0x8>
    5a48:	e8 d3       	rcall	.+2000   	; 0x621a <abort>
    5a4a:	84 2f       	mov	r24, r20
    5a4c:	90 e0       	ldi	r25, 0x00	; 0
    5a4e:	9c 01       	movw	r18, r24
    5a50:	21 50       	subi	r18, 0x01	; 1
    5a52:	31 09       	sbc	r19, r1
    5a54:	82 23       	and	r24, r18
    5a56:	93 23       	and	r25, r19
    5a58:	89 2b       	or	r24, r25
    5a5a:	09 f0       	breq	.+2      	; 0x5a5e <fifo_init+0x1c>
    5a5c:	de d3       	rcall	.+1980   	; 0x621a <abort>
    5a5e:	41 38       	cpi	r20, 0x81	; 129
    5a60:	08 f0       	brcs	.+2      	; 0x5a64 <fifo_init+0x22>
    5a62:	db d3       	rcall	.+1974   	; 0x621a <abort>
    5a64:	12 82       	std	Z+2, r1	; 0x02
    5a66:	13 82       	std	Z+3, r1	; 0x03
    5a68:	44 83       	std	Z+4, r20	; 0x04
    5a6a:	44 0f       	add	r20, r20
    5a6c:	41 50       	subi	r20, 0x01	; 1
    5a6e:	45 83       	std	Z+5, r20	; 0x05
    5a70:	71 83       	std	Z+1, r23	; 0x01
    5a72:	60 83       	st	Z, r22
    5a74:	80 e0       	ldi	r24, 0x00	; 0
    5a76:	90 e0       	ldi	r25, 0x00	; 0
    5a78:	08 95       	ret

00005a7a <__subsf3>:
    5a7a:	50 58       	subi	r21, 0x80	; 128

00005a7c <__addsf3>:
    5a7c:	bb 27       	eor	r27, r27
    5a7e:	aa 27       	eor	r26, r26
    5a80:	0e d0       	rcall	.+28     	; 0x5a9e <__addsf3x>
    5a82:	4d c1       	rjmp	.+666    	; 0x5d1e <__fp_round>
    5a84:	3e d1       	rcall	.+636    	; 0x5d02 <__fp_pscA>
    5a86:	30 f0       	brcs	.+12     	; 0x5a94 <__addsf3+0x18>
    5a88:	43 d1       	rcall	.+646    	; 0x5d10 <__fp_pscB>
    5a8a:	20 f0       	brcs	.+8      	; 0x5a94 <__addsf3+0x18>
    5a8c:	31 f4       	brne	.+12     	; 0x5a9a <__addsf3+0x1e>
    5a8e:	9f 3f       	cpi	r25, 0xFF	; 255
    5a90:	11 f4       	brne	.+4      	; 0x5a96 <__addsf3+0x1a>
    5a92:	1e f4       	brtc	.+6      	; 0x5a9a <__addsf3+0x1e>
    5a94:	33 c1       	rjmp	.+614    	; 0x5cfc <__fp_nan>
    5a96:	0e f4       	brtc	.+2      	; 0x5a9a <__addsf3+0x1e>
    5a98:	e0 95       	com	r30
    5a9a:	e7 fb       	bst	r30, 7
    5a9c:	29 c1       	rjmp	.+594    	; 0x5cf0 <__fp_inf>

00005a9e <__addsf3x>:
    5a9e:	e9 2f       	mov	r30, r25
    5aa0:	4f d1       	rcall	.+670    	; 0x5d40 <__fp_split3>
    5aa2:	80 f3       	brcs	.-32     	; 0x5a84 <__addsf3+0x8>
    5aa4:	ba 17       	cp	r27, r26
    5aa6:	62 07       	cpc	r22, r18
    5aa8:	73 07       	cpc	r23, r19
    5aaa:	84 07       	cpc	r24, r20
    5aac:	95 07       	cpc	r25, r21
    5aae:	18 f0       	brcs	.+6      	; 0x5ab6 <__addsf3x+0x18>
    5ab0:	71 f4       	brne	.+28     	; 0x5ace <__addsf3x+0x30>
    5ab2:	9e f5       	brtc	.+102    	; 0x5b1a <__addsf3x+0x7c>
    5ab4:	67 c1       	rjmp	.+718    	; 0x5d84 <__fp_zero>
    5ab6:	0e f4       	brtc	.+2      	; 0x5aba <__addsf3x+0x1c>
    5ab8:	e0 95       	com	r30
    5aba:	0b 2e       	mov	r0, r27
    5abc:	ba 2f       	mov	r27, r26
    5abe:	a0 2d       	mov	r26, r0
    5ac0:	0b 01       	movw	r0, r22
    5ac2:	b9 01       	movw	r22, r18
    5ac4:	90 01       	movw	r18, r0
    5ac6:	0c 01       	movw	r0, r24
    5ac8:	ca 01       	movw	r24, r20
    5aca:	a0 01       	movw	r20, r0
    5acc:	11 24       	eor	r1, r1
    5ace:	ff 27       	eor	r31, r31
    5ad0:	59 1b       	sub	r21, r25
    5ad2:	99 f0       	breq	.+38     	; 0x5afa <__addsf3x+0x5c>
    5ad4:	59 3f       	cpi	r21, 0xF9	; 249
    5ad6:	50 f4       	brcc	.+20     	; 0x5aec <__addsf3x+0x4e>
    5ad8:	50 3e       	cpi	r21, 0xE0	; 224
    5ada:	68 f1       	brcs	.+90     	; 0x5b36 <__addsf3x+0x98>
    5adc:	1a 16       	cp	r1, r26
    5ade:	f0 40       	sbci	r31, 0x00	; 0
    5ae0:	a2 2f       	mov	r26, r18
    5ae2:	23 2f       	mov	r18, r19
    5ae4:	34 2f       	mov	r19, r20
    5ae6:	44 27       	eor	r20, r20
    5ae8:	58 5f       	subi	r21, 0xF8	; 248
    5aea:	f3 cf       	rjmp	.-26     	; 0x5ad2 <__addsf3x+0x34>
    5aec:	46 95       	lsr	r20
    5aee:	37 95       	ror	r19
    5af0:	27 95       	ror	r18
    5af2:	a7 95       	ror	r26
    5af4:	f0 40       	sbci	r31, 0x00	; 0
    5af6:	53 95       	inc	r21
    5af8:	c9 f7       	brne	.-14     	; 0x5aec <__addsf3x+0x4e>
    5afa:	7e f4       	brtc	.+30     	; 0x5b1a <__addsf3x+0x7c>
    5afc:	1f 16       	cp	r1, r31
    5afe:	ba 0b       	sbc	r27, r26
    5b00:	62 0b       	sbc	r22, r18
    5b02:	73 0b       	sbc	r23, r19
    5b04:	84 0b       	sbc	r24, r20
    5b06:	ba f0       	brmi	.+46     	; 0x5b36 <__addsf3x+0x98>
    5b08:	91 50       	subi	r25, 0x01	; 1
    5b0a:	a1 f0       	breq	.+40     	; 0x5b34 <__addsf3x+0x96>
    5b0c:	ff 0f       	add	r31, r31
    5b0e:	bb 1f       	adc	r27, r27
    5b10:	66 1f       	adc	r22, r22
    5b12:	77 1f       	adc	r23, r23
    5b14:	88 1f       	adc	r24, r24
    5b16:	c2 f7       	brpl	.-16     	; 0x5b08 <__addsf3x+0x6a>
    5b18:	0e c0       	rjmp	.+28     	; 0x5b36 <__addsf3x+0x98>
    5b1a:	ba 0f       	add	r27, r26
    5b1c:	62 1f       	adc	r22, r18
    5b1e:	73 1f       	adc	r23, r19
    5b20:	84 1f       	adc	r24, r20
    5b22:	48 f4       	brcc	.+18     	; 0x5b36 <__addsf3x+0x98>
    5b24:	87 95       	ror	r24
    5b26:	77 95       	ror	r23
    5b28:	67 95       	ror	r22
    5b2a:	b7 95       	ror	r27
    5b2c:	f7 95       	ror	r31
    5b2e:	9e 3f       	cpi	r25, 0xFE	; 254
    5b30:	08 f0       	brcs	.+2      	; 0x5b34 <__addsf3x+0x96>
    5b32:	b3 cf       	rjmp	.-154    	; 0x5a9a <__addsf3+0x1e>
    5b34:	93 95       	inc	r25
    5b36:	88 0f       	add	r24, r24
    5b38:	08 f0       	brcs	.+2      	; 0x5b3c <__addsf3x+0x9e>
    5b3a:	99 27       	eor	r25, r25
    5b3c:	ee 0f       	add	r30, r30
    5b3e:	97 95       	ror	r25
    5b40:	87 95       	ror	r24
    5b42:	08 95       	ret

00005b44 <__divsf3>:
    5b44:	0c d0       	rcall	.+24     	; 0x5b5e <__divsf3x>
    5b46:	eb c0       	rjmp	.+470    	; 0x5d1e <__fp_round>
    5b48:	e3 d0       	rcall	.+454    	; 0x5d10 <__fp_pscB>
    5b4a:	40 f0       	brcs	.+16     	; 0x5b5c <__divsf3+0x18>
    5b4c:	da d0       	rcall	.+436    	; 0x5d02 <__fp_pscA>
    5b4e:	30 f0       	brcs	.+12     	; 0x5b5c <__divsf3+0x18>
    5b50:	21 f4       	brne	.+8      	; 0x5b5a <__divsf3+0x16>
    5b52:	5f 3f       	cpi	r21, 0xFF	; 255
    5b54:	19 f0       	breq	.+6      	; 0x5b5c <__divsf3+0x18>
    5b56:	cc c0       	rjmp	.+408    	; 0x5cf0 <__fp_inf>
    5b58:	51 11       	cpse	r21, r1
    5b5a:	15 c1       	rjmp	.+554    	; 0x5d86 <__fp_szero>
    5b5c:	cf c0       	rjmp	.+414    	; 0x5cfc <__fp_nan>

00005b5e <__divsf3x>:
    5b5e:	f0 d0       	rcall	.+480    	; 0x5d40 <__fp_split3>
    5b60:	98 f3       	brcs	.-26     	; 0x5b48 <__divsf3+0x4>

00005b62 <__divsf3_pse>:
    5b62:	99 23       	and	r25, r25
    5b64:	c9 f3       	breq	.-14     	; 0x5b58 <__divsf3+0x14>
    5b66:	55 23       	and	r21, r21
    5b68:	b1 f3       	breq	.-20     	; 0x5b56 <__divsf3+0x12>
    5b6a:	95 1b       	sub	r25, r21
    5b6c:	55 0b       	sbc	r21, r21
    5b6e:	bb 27       	eor	r27, r27
    5b70:	aa 27       	eor	r26, r26
    5b72:	62 17       	cp	r22, r18
    5b74:	73 07       	cpc	r23, r19
    5b76:	84 07       	cpc	r24, r20
    5b78:	38 f0       	brcs	.+14     	; 0x5b88 <__divsf3_pse+0x26>
    5b7a:	9f 5f       	subi	r25, 0xFF	; 255
    5b7c:	5f 4f       	sbci	r21, 0xFF	; 255
    5b7e:	22 0f       	add	r18, r18
    5b80:	33 1f       	adc	r19, r19
    5b82:	44 1f       	adc	r20, r20
    5b84:	aa 1f       	adc	r26, r26
    5b86:	a9 f3       	breq	.-22     	; 0x5b72 <__divsf3_pse+0x10>
    5b88:	33 d0       	rcall	.+102    	; 0x5bf0 <__divsf3_pse+0x8e>
    5b8a:	0e 2e       	mov	r0, r30
    5b8c:	3a f0       	brmi	.+14     	; 0x5b9c <__divsf3_pse+0x3a>
    5b8e:	e0 e8       	ldi	r30, 0x80	; 128
    5b90:	30 d0       	rcall	.+96     	; 0x5bf2 <__divsf3_pse+0x90>
    5b92:	91 50       	subi	r25, 0x01	; 1
    5b94:	50 40       	sbci	r21, 0x00	; 0
    5b96:	e6 95       	lsr	r30
    5b98:	00 1c       	adc	r0, r0
    5b9a:	ca f7       	brpl	.-14     	; 0x5b8e <__divsf3_pse+0x2c>
    5b9c:	29 d0       	rcall	.+82     	; 0x5bf0 <__divsf3_pse+0x8e>
    5b9e:	fe 2f       	mov	r31, r30
    5ba0:	27 d0       	rcall	.+78     	; 0x5bf0 <__divsf3_pse+0x8e>
    5ba2:	66 0f       	add	r22, r22
    5ba4:	77 1f       	adc	r23, r23
    5ba6:	88 1f       	adc	r24, r24
    5ba8:	bb 1f       	adc	r27, r27
    5baa:	26 17       	cp	r18, r22
    5bac:	37 07       	cpc	r19, r23
    5bae:	48 07       	cpc	r20, r24
    5bb0:	ab 07       	cpc	r26, r27
    5bb2:	b0 e8       	ldi	r27, 0x80	; 128
    5bb4:	09 f0       	breq	.+2      	; 0x5bb8 <__divsf3_pse+0x56>
    5bb6:	bb 0b       	sbc	r27, r27
    5bb8:	80 2d       	mov	r24, r0
    5bba:	bf 01       	movw	r22, r30
    5bbc:	ff 27       	eor	r31, r31
    5bbe:	93 58       	subi	r25, 0x83	; 131
    5bc0:	5f 4f       	sbci	r21, 0xFF	; 255
    5bc2:	2a f0       	brmi	.+10     	; 0x5bce <__divsf3_pse+0x6c>
    5bc4:	9e 3f       	cpi	r25, 0xFE	; 254
    5bc6:	51 05       	cpc	r21, r1
    5bc8:	68 f0       	brcs	.+26     	; 0x5be4 <__divsf3_pse+0x82>
    5bca:	92 c0       	rjmp	.+292    	; 0x5cf0 <__fp_inf>
    5bcc:	dc c0       	rjmp	.+440    	; 0x5d86 <__fp_szero>
    5bce:	5f 3f       	cpi	r21, 0xFF	; 255
    5bd0:	ec f3       	brlt	.-6      	; 0x5bcc <__divsf3_pse+0x6a>
    5bd2:	98 3e       	cpi	r25, 0xE8	; 232
    5bd4:	dc f3       	brlt	.-10     	; 0x5bcc <__divsf3_pse+0x6a>
    5bd6:	86 95       	lsr	r24
    5bd8:	77 95       	ror	r23
    5bda:	67 95       	ror	r22
    5bdc:	b7 95       	ror	r27
    5bde:	f7 95       	ror	r31
    5be0:	9f 5f       	subi	r25, 0xFF	; 255
    5be2:	c9 f7       	brne	.-14     	; 0x5bd6 <__divsf3_pse+0x74>
    5be4:	88 0f       	add	r24, r24
    5be6:	91 1d       	adc	r25, r1
    5be8:	96 95       	lsr	r25
    5bea:	87 95       	ror	r24
    5bec:	97 f9       	bld	r25, 7
    5bee:	08 95       	ret
    5bf0:	e1 e0       	ldi	r30, 0x01	; 1
    5bf2:	66 0f       	add	r22, r22
    5bf4:	77 1f       	adc	r23, r23
    5bf6:	88 1f       	adc	r24, r24
    5bf8:	bb 1f       	adc	r27, r27
    5bfa:	62 17       	cp	r22, r18
    5bfc:	73 07       	cpc	r23, r19
    5bfe:	84 07       	cpc	r24, r20
    5c00:	ba 07       	cpc	r27, r26
    5c02:	20 f0       	brcs	.+8      	; 0x5c0c <__divsf3_pse+0xaa>
    5c04:	62 1b       	sub	r22, r18
    5c06:	73 0b       	sbc	r23, r19
    5c08:	84 0b       	sbc	r24, r20
    5c0a:	ba 0b       	sbc	r27, r26
    5c0c:	ee 1f       	adc	r30, r30
    5c0e:	88 f7       	brcc	.-30     	; 0x5bf2 <__divsf3_pse+0x90>
    5c10:	e0 95       	com	r30
    5c12:	08 95       	ret

00005c14 <__fixsfsi>:
    5c14:	04 d0       	rcall	.+8      	; 0x5c1e <__fixunssfsi>
    5c16:	68 94       	set
    5c18:	b1 11       	cpse	r27, r1
    5c1a:	b5 c0       	rjmp	.+362    	; 0x5d86 <__fp_szero>
    5c1c:	08 95       	ret

00005c1e <__fixunssfsi>:
    5c1e:	98 d0       	rcall	.+304    	; 0x5d50 <__fp_splitA>
    5c20:	88 f0       	brcs	.+34     	; 0x5c44 <__fixunssfsi+0x26>
    5c22:	9f 57       	subi	r25, 0x7F	; 127
    5c24:	90 f0       	brcs	.+36     	; 0x5c4a <__fixunssfsi+0x2c>
    5c26:	b9 2f       	mov	r27, r25
    5c28:	99 27       	eor	r25, r25
    5c2a:	b7 51       	subi	r27, 0x17	; 23
    5c2c:	a0 f0       	brcs	.+40     	; 0x5c56 <__fixunssfsi+0x38>
    5c2e:	d1 f0       	breq	.+52     	; 0x5c64 <__fixunssfsi+0x46>
    5c30:	66 0f       	add	r22, r22
    5c32:	77 1f       	adc	r23, r23
    5c34:	88 1f       	adc	r24, r24
    5c36:	99 1f       	adc	r25, r25
    5c38:	1a f0       	brmi	.+6      	; 0x5c40 <__fixunssfsi+0x22>
    5c3a:	ba 95       	dec	r27
    5c3c:	c9 f7       	brne	.-14     	; 0x5c30 <__fixunssfsi+0x12>
    5c3e:	12 c0       	rjmp	.+36     	; 0x5c64 <__fixunssfsi+0x46>
    5c40:	b1 30       	cpi	r27, 0x01	; 1
    5c42:	81 f0       	breq	.+32     	; 0x5c64 <__fixunssfsi+0x46>
    5c44:	9f d0       	rcall	.+318    	; 0x5d84 <__fp_zero>
    5c46:	b1 e0       	ldi	r27, 0x01	; 1
    5c48:	08 95       	ret
    5c4a:	9c c0       	rjmp	.+312    	; 0x5d84 <__fp_zero>
    5c4c:	67 2f       	mov	r22, r23
    5c4e:	78 2f       	mov	r23, r24
    5c50:	88 27       	eor	r24, r24
    5c52:	b8 5f       	subi	r27, 0xF8	; 248
    5c54:	39 f0       	breq	.+14     	; 0x5c64 <__fixunssfsi+0x46>
    5c56:	b9 3f       	cpi	r27, 0xF9	; 249
    5c58:	cc f3       	brlt	.-14     	; 0x5c4c <__fixunssfsi+0x2e>
    5c5a:	86 95       	lsr	r24
    5c5c:	77 95       	ror	r23
    5c5e:	67 95       	ror	r22
    5c60:	b3 95       	inc	r27
    5c62:	d9 f7       	brne	.-10     	; 0x5c5a <__fixunssfsi+0x3c>
    5c64:	3e f4       	brtc	.+14     	; 0x5c74 <__fixunssfsi+0x56>
    5c66:	90 95       	com	r25
    5c68:	80 95       	com	r24
    5c6a:	70 95       	com	r23
    5c6c:	61 95       	neg	r22
    5c6e:	7f 4f       	sbci	r23, 0xFF	; 255
    5c70:	8f 4f       	sbci	r24, 0xFF	; 255
    5c72:	9f 4f       	sbci	r25, 0xFF	; 255
    5c74:	08 95       	ret

00005c76 <__floatunsisf>:
    5c76:	e8 94       	clt
    5c78:	09 c0       	rjmp	.+18     	; 0x5c8c <__floatsisf+0x12>

00005c7a <__floatsisf>:
    5c7a:	97 fb       	bst	r25, 7
    5c7c:	3e f4       	brtc	.+14     	; 0x5c8c <__floatsisf+0x12>
    5c7e:	90 95       	com	r25
    5c80:	80 95       	com	r24
    5c82:	70 95       	com	r23
    5c84:	61 95       	neg	r22
    5c86:	7f 4f       	sbci	r23, 0xFF	; 255
    5c88:	8f 4f       	sbci	r24, 0xFF	; 255
    5c8a:	9f 4f       	sbci	r25, 0xFF	; 255
    5c8c:	99 23       	and	r25, r25
    5c8e:	a9 f0       	breq	.+42     	; 0x5cba <__floatsisf+0x40>
    5c90:	f9 2f       	mov	r31, r25
    5c92:	96 e9       	ldi	r25, 0x96	; 150
    5c94:	bb 27       	eor	r27, r27
    5c96:	93 95       	inc	r25
    5c98:	f6 95       	lsr	r31
    5c9a:	87 95       	ror	r24
    5c9c:	77 95       	ror	r23
    5c9e:	67 95       	ror	r22
    5ca0:	b7 95       	ror	r27
    5ca2:	f1 11       	cpse	r31, r1
    5ca4:	f8 cf       	rjmp	.-16     	; 0x5c96 <__floatsisf+0x1c>
    5ca6:	fa f4       	brpl	.+62     	; 0x5ce6 <__floatsisf+0x6c>
    5ca8:	bb 0f       	add	r27, r27
    5caa:	11 f4       	brne	.+4      	; 0x5cb0 <__floatsisf+0x36>
    5cac:	60 ff       	sbrs	r22, 0
    5cae:	1b c0       	rjmp	.+54     	; 0x5ce6 <__floatsisf+0x6c>
    5cb0:	6f 5f       	subi	r22, 0xFF	; 255
    5cb2:	7f 4f       	sbci	r23, 0xFF	; 255
    5cb4:	8f 4f       	sbci	r24, 0xFF	; 255
    5cb6:	9f 4f       	sbci	r25, 0xFF	; 255
    5cb8:	16 c0       	rjmp	.+44     	; 0x5ce6 <__floatsisf+0x6c>
    5cba:	88 23       	and	r24, r24
    5cbc:	11 f0       	breq	.+4      	; 0x5cc2 <__floatsisf+0x48>
    5cbe:	96 e9       	ldi	r25, 0x96	; 150
    5cc0:	11 c0       	rjmp	.+34     	; 0x5ce4 <__floatsisf+0x6a>
    5cc2:	77 23       	and	r23, r23
    5cc4:	21 f0       	breq	.+8      	; 0x5cce <__floatsisf+0x54>
    5cc6:	9e e8       	ldi	r25, 0x8E	; 142
    5cc8:	87 2f       	mov	r24, r23
    5cca:	76 2f       	mov	r23, r22
    5ccc:	05 c0       	rjmp	.+10     	; 0x5cd8 <__floatsisf+0x5e>
    5cce:	66 23       	and	r22, r22
    5cd0:	71 f0       	breq	.+28     	; 0x5cee <__floatsisf+0x74>
    5cd2:	96 e8       	ldi	r25, 0x86	; 134
    5cd4:	86 2f       	mov	r24, r22
    5cd6:	70 e0       	ldi	r23, 0x00	; 0
    5cd8:	60 e0       	ldi	r22, 0x00	; 0
    5cda:	2a f0       	brmi	.+10     	; 0x5ce6 <__floatsisf+0x6c>
    5cdc:	9a 95       	dec	r25
    5cde:	66 0f       	add	r22, r22
    5ce0:	77 1f       	adc	r23, r23
    5ce2:	88 1f       	adc	r24, r24
    5ce4:	da f7       	brpl	.-10     	; 0x5cdc <__floatsisf+0x62>
    5ce6:	88 0f       	add	r24, r24
    5ce8:	96 95       	lsr	r25
    5cea:	87 95       	ror	r24
    5cec:	97 f9       	bld	r25, 7
    5cee:	08 95       	ret

00005cf0 <__fp_inf>:
    5cf0:	97 f9       	bld	r25, 7
    5cf2:	9f 67       	ori	r25, 0x7F	; 127
    5cf4:	80 e8       	ldi	r24, 0x80	; 128
    5cf6:	70 e0       	ldi	r23, 0x00	; 0
    5cf8:	60 e0       	ldi	r22, 0x00	; 0
    5cfa:	08 95       	ret

00005cfc <__fp_nan>:
    5cfc:	9f ef       	ldi	r25, 0xFF	; 255
    5cfe:	80 ec       	ldi	r24, 0xC0	; 192
    5d00:	08 95       	ret

00005d02 <__fp_pscA>:
    5d02:	00 24       	eor	r0, r0
    5d04:	0a 94       	dec	r0
    5d06:	16 16       	cp	r1, r22
    5d08:	17 06       	cpc	r1, r23
    5d0a:	18 06       	cpc	r1, r24
    5d0c:	09 06       	cpc	r0, r25
    5d0e:	08 95       	ret

00005d10 <__fp_pscB>:
    5d10:	00 24       	eor	r0, r0
    5d12:	0a 94       	dec	r0
    5d14:	12 16       	cp	r1, r18
    5d16:	13 06       	cpc	r1, r19
    5d18:	14 06       	cpc	r1, r20
    5d1a:	05 06       	cpc	r0, r21
    5d1c:	08 95       	ret

00005d1e <__fp_round>:
    5d1e:	09 2e       	mov	r0, r25
    5d20:	03 94       	inc	r0
    5d22:	00 0c       	add	r0, r0
    5d24:	11 f4       	brne	.+4      	; 0x5d2a <__fp_round+0xc>
    5d26:	88 23       	and	r24, r24
    5d28:	52 f0       	brmi	.+20     	; 0x5d3e <__fp_round+0x20>
    5d2a:	bb 0f       	add	r27, r27
    5d2c:	40 f4       	brcc	.+16     	; 0x5d3e <__fp_round+0x20>
    5d2e:	bf 2b       	or	r27, r31
    5d30:	11 f4       	brne	.+4      	; 0x5d36 <__fp_round+0x18>
    5d32:	60 ff       	sbrs	r22, 0
    5d34:	04 c0       	rjmp	.+8      	; 0x5d3e <__fp_round+0x20>
    5d36:	6f 5f       	subi	r22, 0xFF	; 255
    5d38:	7f 4f       	sbci	r23, 0xFF	; 255
    5d3a:	8f 4f       	sbci	r24, 0xFF	; 255
    5d3c:	9f 4f       	sbci	r25, 0xFF	; 255
    5d3e:	08 95       	ret

00005d40 <__fp_split3>:
    5d40:	57 fd       	sbrc	r21, 7
    5d42:	90 58       	subi	r25, 0x80	; 128
    5d44:	44 0f       	add	r20, r20
    5d46:	55 1f       	adc	r21, r21
    5d48:	59 f0       	breq	.+22     	; 0x5d60 <__fp_splitA+0x10>
    5d4a:	5f 3f       	cpi	r21, 0xFF	; 255
    5d4c:	71 f0       	breq	.+28     	; 0x5d6a <__fp_splitA+0x1a>
    5d4e:	47 95       	ror	r20

00005d50 <__fp_splitA>:
    5d50:	88 0f       	add	r24, r24
    5d52:	97 fb       	bst	r25, 7
    5d54:	99 1f       	adc	r25, r25
    5d56:	61 f0       	breq	.+24     	; 0x5d70 <__fp_splitA+0x20>
    5d58:	9f 3f       	cpi	r25, 0xFF	; 255
    5d5a:	79 f0       	breq	.+30     	; 0x5d7a <__fp_splitA+0x2a>
    5d5c:	87 95       	ror	r24
    5d5e:	08 95       	ret
    5d60:	12 16       	cp	r1, r18
    5d62:	13 06       	cpc	r1, r19
    5d64:	14 06       	cpc	r1, r20
    5d66:	55 1f       	adc	r21, r21
    5d68:	f2 cf       	rjmp	.-28     	; 0x5d4e <__fp_split3+0xe>
    5d6a:	46 95       	lsr	r20
    5d6c:	f1 df       	rcall	.-30     	; 0x5d50 <__fp_splitA>
    5d6e:	08 c0       	rjmp	.+16     	; 0x5d80 <__fp_splitA+0x30>
    5d70:	16 16       	cp	r1, r22
    5d72:	17 06       	cpc	r1, r23
    5d74:	18 06       	cpc	r1, r24
    5d76:	99 1f       	adc	r25, r25
    5d78:	f1 cf       	rjmp	.-30     	; 0x5d5c <__fp_splitA+0xc>
    5d7a:	86 95       	lsr	r24
    5d7c:	71 05       	cpc	r23, r1
    5d7e:	61 05       	cpc	r22, r1
    5d80:	08 94       	sec
    5d82:	08 95       	ret

00005d84 <__fp_zero>:
    5d84:	e8 94       	clt

00005d86 <__fp_szero>:
    5d86:	bb 27       	eor	r27, r27
    5d88:	66 27       	eor	r22, r22
    5d8a:	77 27       	eor	r23, r23
    5d8c:	cb 01       	movw	r24, r22
    5d8e:	97 f9       	bld	r25, 7
    5d90:	08 95       	ret

00005d92 <__mulsf3>:
    5d92:	0b d0       	rcall	.+22     	; 0x5daa <__mulsf3x>
    5d94:	c4 cf       	rjmp	.-120    	; 0x5d1e <__fp_round>
    5d96:	b5 df       	rcall	.-150    	; 0x5d02 <__fp_pscA>
    5d98:	28 f0       	brcs	.+10     	; 0x5da4 <__mulsf3+0x12>
    5d9a:	ba df       	rcall	.-140    	; 0x5d10 <__fp_pscB>
    5d9c:	18 f0       	brcs	.+6      	; 0x5da4 <__mulsf3+0x12>
    5d9e:	95 23       	and	r25, r21
    5da0:	09 f0       	breq	.+2      	; 0x5da4 <__mulsf3+0x12>
    5da2:	a6 cf       	rjmp	.-180    	; 0x5cf0 <__fp_inf>
    5da4:	ab cf       	rjmp	.-170    	; 0x5cfc <__fp_nan>
    5da6:	11 24       	eor	r1, r1
    5da8:	ee cf       	rjmp	.-36     	; 0x5d86 <__fp_szero>

00005daa <__mulsf3x>:
    5daa:	ca df       	rcall	.-108    	; 0x5d40 <__fp_split3>
    5dac:	a0 f3       	brcs	.-24     	; 0x5d96 <__mulsf3+0x4>

00005dae <__mulsf3_pse>:
    5dae:	95 9f       	mul	r25, r21
    5db0:	d1 f3       	breq	.-12     	; 0x5da6 <__mulsf3+0x14>
    5db2:	95 0f       	add	r25, r21
    5db4:	50 e0       	ldi	r21, 0x00	; 0
    5db6:	55 1f       	adc	r21, r21
    5db8:	62 9f       	mul	r22, r18
    5dba:	f0 01       	movw	r30, r0
    5dbc:	72 9f       	mul	r23, r18
    5dbe:	bb 27       	eor	r27, r27
    5dc0:	f0 0d       	add	r31, r0
    5dc2:	b1 1d       	adc	r27, r1
    5dc4:	63 9f       	mul	r22, r19
    5dc6:	aa 27       	eor	r26, r26
    5dc8:	f0 0d       	add	r31, r0
    5dca:	b1 1d       	adc	r27, r1
    5dcc:	aa 1f       	adc	r26, r26
    5dce:	64 9f       	mul	r22, r20
    5dd0:	66 27       	eor	r22, r22
    5dd2:	b0 0d       	add	r27, r0
    5dd4:	a1 1d       	adc	r26, r1
    5dd6:	66 1f       	adc	r22, r22
    5dd8:	82 9f       	mul	r24, r18
    5dda:	22 27       	eor	r18, r18
    5ddc:	b0 0d       	add	r27, r0
    5dde:	a1 1d       	adc	r26, r1
    5de0:	62 1f       	adc	r22, r18
    5de2:	73 9f       	mul	r23, r19
    5de4:	b0 0d       	add	r27, r0
    5de6:	a1 1d       	adc	r26, r1
    5de8:	62 1f       	adc	r22, r18
    5dea:	83 9f       	mul	r24, r19
    5dec:	a0 0d       	add	r26, r0
    5dee:	61 1d       	adc	r22, r1
    5df0:	22 1f       	adc	r18, r18
    5df2:	74 9f       	mul	r23, r20
    5df4:	33 27       	eor	r19, r19
    5df6:	a0 0d       	add	r26, r0
    5df8:	61 1d       	adc	r22, r1
    5dfa:	23 1f       	adc	r18, r19
    5dfc:	84 9f       	mul	r24, r20
    5dfe:	60 0d       	add	r22, r0
    5e00:	21 1d       	adc	r18, r1
    5e02:	82 2f       	mov	r24, r18
    5e04:	76 2f       	mov	r23, r22
    5e06:	6a 2f       	mov	r22, r26
    5e08:	11 24       	eor	r1, r1
    5e0a:	9f 57       	subi	r25, 0x7F	; 127
    5e0c:	50 40       	sbci	r21, 0x00	; 0
    5e0e:	8a f0       	brmi	.+34     	; 0x5e32 <__mulsf3_pse+0x84>
    5e10:	e1 f0       	breq	.+56     	; 0x5e4a <__mulsf3_pse+0x9c>
    5e12:	88 23       	and	r24, r24
    5e14:	4a f0       	brmi	.+18     	; 0x5e28 <__mulsf3_pse+0x7a>
    5e16:	ee 0f       	add	r30, r30
    5e18:	ff 1f       	adc	r31, r31
    5e1a:	bb 1f       	adc	r27, r27
    5e1c:	66 1f       	adc	r22, r22
    5e1e:	77 1f       	adc	r23, r23
    5e20:	88 1f       	adc	r24, r24
    5e22:	91 50       	subi	r25, 0x01	; 1
    5e24:	50 40       	sbci	r21, 0x00	; 0
    5e26:	a9 f7       	brne	.-22     	; 0x5e12 <__mulsf3_pse+0x64>
    5e28:	9e 3f       	cpi	r25, 0xFE	; 254
    5e2a:	51 05       	cpc	r21, r1
    5e2c:	70 f0       	brcs	.+28     	; 0x5e4a <__mulsf3_pse+0x9c>
    5e2e:	60 cf       	rjmp	.-320    	; 0x5cf0 <__fp_inf>
    5e30:	aa cf       	rjmp	.-172    	; 0x5d86 <__fp_szero>
    5e32:	5f 3f       	cpi	r21, 0xFF	; 255
    5e34:	ec f3       	brlt	.-6      	; 0x5e30 <__mulsf3_pse+0x82>
    5e36:	98 3e       	cpi	r25, 0xE8	; 232
    5e38:	dc f3       	brlt	.-10     	; 0x5e30 <__mulsf3_pse+0x82>
    5e3a:	86 95       	lsr	r24
    5e3c:	77 95       	ror	r23
    5e3e:	67 95       	ror	r22
    5e40:	b7 95       	ror	r27
    5e42:	f7 95       	ror	r31
    5e44:	e7 95       	ror	r30
    5e46:	9f 5f       	subi	r25, 0xFF	; 255
    5e48:	c1 f7       	brne	.-16     	; 0x5e3a <__mulsf3_pse+0x8c>
    5e4a:	fe 2b       	or	r31, r30
    5e4c:	88 0f       	add	r24, r24
    5e4e:	91 1d       	adc	r25, r1
    5e50:	96 95       	lsr	r25
    5e52:	87 95       	ror	r24
    5e54:	97 f9       	bld	r25, 7
    5e56:	08 95       	ret

00005e58 <__divmodhi4>:
    5e58:	97 fb       	bst	r25, 7
    5e5a:	07 2e       	mov	r0, r23
    5e5c:	16 f4       	brtc	.+4      	; 0x5e62 <__divmodhi4+0xa>
    5e5e:	00 94       	com	r0
    5e60:	06 d0       	rcall	.+12     	; 0x5e6e <__divmodhi4_neg1>
    5e62:	77 fd       	sbrc	r23, 7
    5e64:	08 d0       	rcall	.+16     	; 0x5e76 <__divmodhi4_neg2>
    5e66:	35 d0       	rcall	.+106    	; 0x5ed2 <__udivmodhi4>
    5e68:	07 fc       	sbrc	r0, 7
    5e6a:	05 d0       	rcall	.+10     	; 0x5e76 <__divmodhi4_neg2>
    5e6c:	3e f4       	brtc	.+14     	; 0x5e7c <__divmodhi4_exit>

00005e6e <__divmodhi4_neg1>:
    5e6e:	90 95       	com	r25
    5e70:	81 95       	neg	r24
    5e72:	9f 4f       	sbci	r25, 0xFF	; 255
    5e74:	08 95       	ret

00005e76 <__divmodhi4_neg2>:
    5e76:	70 95       	com	r23
    5e78:	61 95       	neg	r22
    5e7a:	7f 4f       	sbci	r23, 0xFF	; 255

00005e7c <__divmodhi4_exit>:
    5e7c:	08 95       	ret

00005e7e <__udivmodsi4>:
    5e7e:	a1 e2       	ldi	r26, 0x21	; 33
    5e80:	1a 2e       	mov	r1, r26
    5e82:	aa 1b       	sub	r26, r26
    5e84:	bb 1b       	sub	r27, r27
    5e86:	fd 01       	movw	r30, r26
    5e88:	0d c0       	rjmp	.+26     	; 0x5ea4 <__udivmodsi4_ep>

00005e8a <__udivmodsi4_loop>:
    5e8a:	aa 1f       	adc	r26, r26
    5e8c:	bb 1f       	adc	r27, r27
    5e8e:	ee 1f       	adc	r30, r30
    5e90:	ff 1f       	adc	r31, r31
    5e92:	a2 17       	cp	r26, r18
    5e94:	b3 07       	cpc	r27, r19
    5e96:	e4 07       	cpc	r30, r20
    5e98:	f5 07       	cpc	r31, r21
    5e9a:	20 f0       	brcs	.+8      	; 0x5ea4 <__udivmodsi4_ep>
    5e9c:	a2 1b       	sub	r26, r18
    5e9e:	b3 0b       	sbc	r27, r19
    5ea0:	e4 0b       	sbc	r30, r20
    5ea2:	f5 0b       	sbc	r31, r21

00005ea4 <__udivmodsi4_ep>:
    5ea4:	66 1f       	adc	r22, r22
    5ea6:	77 1f       	adc	r23, r23
    5ea8:	88 1f       	adc	r24, r24
    5eaa:	99 1f       	adc	r25, r25
    5eac:	1a 94       	dec	r1
    5eae:	69 f7       	brne	.-38     	; 0x5e8a <__udivmodsi4_loop>
    5eb0:	60 95       	com	r22
    5eb2:	70 95       	com	r23
    5eb4:	80 95       	com	r24
    5eb6:	90 95       	com	r25
    5eb8:	9b 01       	movw	r18, r22
    5eba:	ac 01       	movw	r20, r24
    5ebc:	bd 01       	movw	r22, r26
    5ebe:	cf 01       	movw	r24, r30
    5ec0:	08 95       	ret

00005ec2 <__tablejump2__>:
    5ec2:	ee 0f       	add	r30, r30
    5ec4:	ff 1f       	adc	r31, r31
    5ec6:	88 1f       	adc	r24, r24
    5ec8:	8b bf       	out	0x3b, r24	; 59
    5eca:	07 90       	elpm	r0, Z+
    5ecc:	f6 91       	elpm	r31, Z
    5ece:	e0 2d       	mov	r30, r0
    5ed0:	19 94       	eijmp

00005ed2 <__udivmodhi4>:
    5ed2:	aa 1b       	sub	r26, r26
    5ed4:	bb 1b       	sub	r27, r27
    5ed6:	51 e1       	ldi	r21, 0x11	; 17
    5ed8:	07 c0       	rjmp	.+14     	; 0x5ee8 <__udivmodhi4_ep>

00005eda <__udivmodhi4_loop>:
    5eda:	aa 1f       	adc	r26, r26
    5edc:	bb 1f       	adc	r27, r27
    5ede:	a6 17       	cp	r26, r22
    5ee0:	b7 07       	cpc	r27, r23
    5ee2:	10 f0       	brcs	.+4      	; 0x5ee8 <__udivmodhi4_ep>
    5ee4:	a6 1b       	sub	r26, r22
    5ee6:	b7 0b       	sbc	r27, r23

00005ee8 <__udivmodhi4_ep>:
    5ee8:	88 1f       	adc	r24, r24
    5eea:	99 1f       	adc	r25, r25
    5eec:	5a 95       	dec	r21
    5eee:	a9 f7       	brne	.-22     	; 0x5eda <__udivmodhi4_loop>
    5ef0:	80 95       	com	r24
    5ef2:	90 95       	com	r25
    5ef4:	bc 01       	movw	r22, r24
    5ef6:	cd 01       	movw	r24, r26
    5ef8:	08 95       	ret

00005efa <calloc>:
    5efa:	0f 93       	push	r16
    5efc:	1f 93       	push	r17
    5efe:	cf 93       	push	r28
    5f00:	df 93       	push	r29
    5f02:	86 9f       	mul	r24, r22
    5f04:	80 01       	movw	r16, r0
    5f06:	87 9f       	mul	r24, r23
    5f08:	10 0d       	add	r17, r0
    5f0a:	96 9f       	mul	r25, r22
    5f0c:	10 0d       	add	r17, r0
    5f0e:	11 24       	eor	r1, r1
    5f10:	c8 01       	movw	r24, r16
    5f12:	0d d0       	rcall	.+26     	; 0x5f2e <malloc>
    5f14:	ec 01       	movw	r28, r24
    5f16:	00 97       	sbiw	r24, 0x00	; 0
    5f18:	21 f0       	breq	.+8      	; 0x5f22 <calloc+0x28>
    5f1a:	a8 01       	movw	r20, r16
    5f1c:	60 e0       	ldi	r22, 0x00	; 0
    5f1e:	70 e0       	ldi	r23, 0x00	; 0
    5f20:	89 d1       	rcall	.+786    	; 0x6234 <memset>
    5f22:	ce 01       	movw	r24, r28
    5f24:	df 91       	pop	r29
    5f26:	cf 91       	pop	r28
    5f28:	1f 91       	pop	r17
    5f2a:	0f 91       	pop	r16
    5f2c:	08 95       	ret

00005f2e <malloc>:
    5f2e:	0f 93       	push	r16
    5f30:	1f 93       	push	r17
    5f32:	cf 93       	push	r28
    5f34:	df 93       	push	r29
    5f36:	82 30       	cpi	r24, 0x02	; 2
    5f38:	91 05       	cpc	r25, r1
    5f3a:	10 f4       	brcc	.+4      	; 0x5f40 <malloc+0x12>
    5f3c:	82 e0       	ldi	r24, 0x02	; 2
    5f3e:	90 e0       	ldi	r25, 0x00	; 0
    5f40:	e0 91 91 1a 	lds	r30, 0x1A91	; 0x801a91 <__flp>
    5f44:	f0 91 92 1a 	lds	r31, 0x1A92	; 0x801a92 <__flp+0x1>
    5f48:	20 e0       	ldi	r18, 0x00	; 0
    5f4a:	30 e0       	ldi	r19, 0x00	; 0
    5f4c:	a0 e0       	ldi	r26, 0x00	; 0
    5f4e:	b0 e0       	ldi	r27, 0x00	; 0
    5f50:	30 97       	sbiw	r30, 0x00	; 0
    5f52:	19 f1       	breq	.+70     	; 0x5f9a <malloc+0x6c>
    5f54:	40 81       	ld	r20, Z
    5f56:	51 81       	ldd	r21, Z+1	; 0x01
    5f58:	02 81       	ldd	r16, Z+2	; 0x02
    5f5a:	13 81       	ldd	r17, Z+3	; 0x03
    5f5c:	48 17       	cp	r20, r24
    5f5e:	59 07       	cpc	r21, r25
    5f60:	c8 f0       	brcs	.+50     	; 0x5f94 <malloc+0x66>
    5f62:	84 17       	cp	r24, r20
    5f64:	95 07       	cpc	r25, r21
    5f66:	69 f4       	brne	.+26     	; 0x5f82 <malloc+0x54>
    5f68:	10 97       	sbiw	r26, 0x00	; 0
    5f6a:	31 f0       	breq	.+12     	; 0x5f78 <malloc+0x4a>
    5f6c:	12 96       	adiw	r26, 0x02	; 2
    5f6e:	0c 93       	st	X, r16
    5f70:	12 97       	sbiw	r26, 0x02	; 2
    5f72:	13 96       	adiw	r26, 0x03	; 3
    5f74:	1c 93       	st	X, r17
    5f76:	27 c0       	rjmp	.+78     	; 0x5fc6 <malloc+0x98>
    5f78:	00 93 91 1a 	sts	0x1A91, r16	; 0x801a91 <__flp>
    5f7c:	10 93 92 1a 	sts	0x1A92, r17	; 0x801a92 <__flp+0x1>
    5f80:	22 c0       	rjmp	.+68     	; 0x5fc6 <malloc+0x98>
    5f82:	21 15       	cp	r18, r1
    5f84:	31 05       	cpc	r19, r1
    5f86:	19 f0       	breq	.+6      	; 0x5f8e <malloc+0x60>
    5f88:	42 17       	cp	r20, r18
    5f8a:	53 07       	cpc	r21, r19
    5f8c:	18 f4       	brcc	.+6      	; 0x5f94 <malloc+0x66>
    5f8e:	9a 01       	movw	r18, r20
    5f90:	bd 01       	movw	r22, r26
    5f92:	ef 01       	movw	r28, r30
    5f94:	df 01       	movw	r26, r30
    5f96:	f8 01       	movw	r30, r16
    5f98:	db cf       	rjmp	.-74     	; 0x5f50 <malloc+0x22>
    5f9a:	21 15       	cp	r18, r1
    5f9c:	31 05       	cpc	r19, r1
    5f9e:	f9 f0       	breq	.+62     	; 0x5fde <malloc+0xb0>
    5fa0:	28 1b       	sub	r18, r24
    5fa2:	39 0b       	sbc	r19, r25
    5fa4:	24 30       	cpi	r18, 0x04	; 4
    5fa6:	31 05       	cpc	r19, r1
    5fa8:	80 f4       	brcc	.+32     	; 0x5fca <malloc+0x9c>
    5faa:	8a 81       	ldd	r24, Y+2	; 0x02
    5fac:	9b 81       	ldd	r25, Y+3	; 0x03
    5fae:	61 15       	cp	r22, r1
    5fb0:	71 05       	cpc	r23, r1
    5fb2:	21 f0       	breq	.+8      	; 0x5fbc <malloc+0x8e>
    5fb4:	fb 01       	movw	r30, r22
    5fb6:	93 83       	std	Z+3, r25	; 0x03
    5fb8:	82 83       	std	Z+2, r24	; 0x02
    5fba:	04 c0       	rjmp	.+8      	; 0x5fc4 <malloc+0x96>
    5fbc:	90 93 92 1a 	sts	0x1A92, r25	; 0x801a92 <__flp+0x1>
    5fc0:	80 93 91 1a 	sts	0x1A91, r24	; 0x801a91 <__flp>
    5fc4:	fe 01       	movw	r30, r28
    5fc6:	32 96       	adiw	r30, 0x02	; 2
    5fc8:	44 c0       	rjmp	.+136    	; 0x6052 <malloc+0x124>
    5fca:	fe 01       	movw	r30, r28
    5fcc:	e2 0f       	add	r30, r18
    5fce:	f3 1f       	adc	r31, r19
    5fd0:	81 93       	st	Z+, r24
    5fd2:	91 93       	st	Z+, r25
    5fd4:	22 50       	subi	r18, 0x02	; 2
    5fd6:	31 09       	sbc	r19, r1
    5fd8:	39 83       	std	Y+1, r19	; 0x01
    5fda:	28 83       	st	Y, r18
    5fdc:	3a c0       	rjmp	.+116    	; 0x6052 <malloc+0x124>
    5fde:	20 91 8f 1a 	lds	r18, 0x1A8F	; 0x801a8f <__brkval>
    5fe2:	30 91 90 1a 	lds	r19, 0x1A90	; 0x801a90 <__brkval+0x1>
    5fe6:	23 2b       	or	r18, r19
    5fe8:	41 f4       	brne	.+16     	; 0x5ffa <malloc+0xcc>
    5fea:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    5fee:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    5ff2:	30 93 90 1a 	sts	0x1A90, r19	; 0x801a90 <__brkval+0x1>
    5ff6:	20 93 8f 1a 	sts	0x1A8F, r18	; 0x801a8f <__brkval>
    5ffa:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    5ffe:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    6002:	21 15       	cp	r18, r1
    6004:	31 05       	cpc	r19, r1
    6006:	41 f4       	brne	.+16     	; 0x6018 <malloc+0xea>
    6008:	2d b7       	in	r18, 0x3d	; 61
    600a:	3e b7       	in	r19, 0x3e	; 62
    600c:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    6010:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    6014:	24 1b       	sub	r18, r20
    6016:	35 0b       	sbc	r19, r21
    6018:	e0 91 8f 1a 	lds	r30, 0x1A8F	; 0x801a8f <__brkval>
    601c:	f0 91 90 1a 	lds	r31, 0x1A90	; 0x801a90 <__brkval+0x1>
    6020:	e2 17       	cp	r30, r18
    6022:	f3 07       	cpc	r31, r19
    6024:	a0 f4       	brcc	.+40     	; 0x604e <malloc+0x120>
    6026:	2e 1b       	sub	r18, r30
    6028:	3f 0b       	sbc	r19, r31
    602a:	28 17       	cp	r18, r24
    602c:	39 07       	cpc	r19, r25
    602e:	78 f0       	brcs	.+30     	; 0x604e <malloc+0x120>
    6030:	ac 01       	movw	r20, r24
    6032:	4e 5f       	subi	r20, 0xFE	; 254
    6034:	5f 4f       	sbci	r21, 0xFF	; 255
    6036:	24 17       	cp	r18, r20
    6038:	35 07       	cpc	r19, r21
    603a:	48 f0       	brcs	.+18     	; 0x604e <malloc+0x120>
    603c:	4e 0f       	add	r20, r30
    603e:	5f 1f       	adc	r21, r31
    6040:	50 93 90 1a 	sts	0x1A90, r21	; 0x801a90 <__brkval+0x1>
    6044:	40 93 8f 1a 	sts	0x1A8F, r20	; 0x801a8f <__brkval>
    6048:	81 93       	st	Z+, r24
    604a:	91 93       	st	Z+, r25
    604c:	02 c0       	rjmp	.+4      	; 0x6052 <malloc+0x124>
    604e:	e0 e0       	ldi	r30, 0x00	; 0
    6050:	f0 e0       	ldi	r31, 0x00	; 0
    6052:	cf 01       	movw	r24, r30
    6054:	df 91       	pop	r29
    6056:	cf 91       	pop	r28
    6058:	1f 91       	pop	r17
    605a:	0f 91       	pop	r16
    605c:	08 95       	ret

0000605e <free>:
    605e:	cf 93       	push	r28
    6060:	df 93       	push	r29
    6062:	00 97       	sbiw	r24, 0x00	; 0
    6064:	09 f4       	brne	.+2      	; 0x6068 <free+0xa>
    6066:	81 c0       	rjmp	.+258    	; 0x616a <free+0x10c>
    6068:	fc 01       	movw	r30, r24
    606a:	32 97       	sbiw	r30, 0x02	; 2
    606c:	13 82       	std	Z+3, r1	; 0x03
    606e:	12 82       	std	Z+2, r1	; 0x02
    6070:	a0 91 91 1a 	lds	r26, 0x1A91	; 0x801a91 <__flp>
    6074:	b0 91 92 1a 	lds	r27, 0x1A92	; 0x801a92 <__flp+0x1>
    6078:	10 97       	sbiw	r26, 0x00	; 0
    607a:	81 f4       	brne	.+32     	; 0x609c <free+0x3e>
    607c:	20 81       	ld	r18, Z
    607e:	31 81       	ldd	r19, Z+1	; 0x01
    6080:	82 0f       	add	r24, r18
    6082:	93 1f       	adc	r25, r19
    6084:	20 91 8f 1a 	lds	r18, 0x1A8F	; 0x801a8f <__brkval>
    6088:	30 91 90 1a 	lds	r19, 0x1A90	; 0x801a90 <__brkval+0x1>
    608c:	28 17       	cp	r18, r24
    608e:	39 07       	cpc	r19, r25
    6090:	51 f5       	brne	.+84     	; 0x60e6 <free+0x88>
    6092:	f0 93 90 1a 	sts	0x1A90, r31	; 0x801a90 <__brkval+0x1>
    6096:	e0 93 8f 1a 	sts	0x1A8F, r30	; 0x801a8f <__brkval>
    609a:	67 c0       	rjmp	.+206    	; 0x616a <free+0x10c>
    609c:	ed 01       	movw	r28, r26
    609e:	20 e0       	ldi	r18, 0x00	; 0
    60a0:	30 e0       	ldi	r19, 0x00	; 0
    60a2:	ce 17       	cp	r28, r30
    60a4:	df 07       	cpc	r29, r31
    60a6:	40 f4       	brcc	.+16     	; 0x60b8 <free+0x5a>
    60a8:	4a 81       	ldd	r20, Y+2	; 0x02
    60aa:	5b 81       	ldd	r21, Y+3	; 0x03
    60ac:	9e 01       	movw	r18, r28
    60ae:	41 15       	cp	r20, r1
    60b0:	51 05       	cpc	r21, r1
    60b2:	f1 f0       	breq	.+60     	; 0x60f0 <free+0x92>
    60b4:	ea 01       	movw	r28, r20
    60b6:	f5 cf       	rjmp	.-22     	; 0x60a2 <free+0x44>
    60b8:	d3 83       	std	Z+3, r29	; 0x03
    60ba:	c2 83       	std	Z+2, r28	; 0x02
    60bc:	40 81       	ld	r20, Z
    60be:	51 81       	ldd	r21, Z+1	; 0x01
    60c0:	84 0f       	add	r24, r20
    60c2:	95 1f       	adc	r25, r21
    60c4:	c8 17       	cp	r28, r24
    60c6:	d9 07       	cpc	r29, r25
    60c8:	59 f4       	brne	.+22     	; 0x60e0 <free+0x82>
    60ca:	88 81       	ld	r24, Y
    60cc:	99 81       	ldd	r25, Y+1	; 0x01
    60ce:	84 0f       	add	r24, r20
    60d0:	95 1f       	adc	r25, r21
    60d2:	02 96       	adiw	r24, 0x02	; 2
    60d4:	91 83       	std	Z+1, r25	; 0x01
    60d6:	80 83       	st	Z, r24
    60d8:	8a 81       	ldd	r24, Y+2	; 0x02
    60da:	9b 81       	ldd	r25, Y+3	; 0x03
    60dc:	93 83       	std	Z+3, r25	; 0x03
    60de:	82 83       	std	Z+2, r24	; 0x02
    60e0:	21 15       	cp	r18, r1
    60e2:	31 05       	cpc	r19, r1
    60e4:	29 f4       	brne	.+10     	; 0x60f0 <free+0x92>
    60e6:	f0 93 92 1a 	sts	0x1A92, r31	; 0x801a92 <__flp+0x1>
    60ea:	e0 93 91 1a 	sts	0x1A91, r30	; 0x801a91 <__flp>
    60ee:	3d c0       	rjmp	.+122    	; 0x616a <free+0x10c>
    60f0:	e9 01       	movw	r28, r18
    60f2:	fb 83       	std	Y+3, r31	; 0x03
    60f4:	ea 83       	std	Y+2, r30	; 0x02
    60f6:	49 91       	ld	r20, Y+
    60f8:	59 91       	ld	r21, Y+
    60fa:	c4 0f       	add	r28, r20
    60fc:	d5 1f       	adc	r29, r21
    60fe:	ec 17       	cp	r30, r28
    6100:	fd 07       	cpc	r31, r29
    6102:	61 f4       	brne	.+24     	; 0x611c <free+0xbe>
    6104:	80 81       	ld	r24, Z
    6106:	91 81       	ldd	r25, Z+1	; 0x01
    6108:	84 0f       	add	r24, r20
    610a:	95 1f       	adc	r25, r21
    610c:	02 96       	adiw	r24, 0x02	; 2
    610e:	e9 01       	movw	r28, r18
    6110:	99 83       	std	Y+1, r25	; 0x01
    6112:	88 83       	st	Y, r24
    6114:	82 81       	ldd	r24, Z+2	; 0x02
    6116:	93 81       	ldd	r25, Z+3	; 0x03
    6118:	9b 83       	std	Y+3, r25	; 0x03
    611a:	8a 83       	std	Y+2, r24	; 0x02
    611c:	e0 e0       	ldi	r30, 0x00	; 0
    611e:	f0 e0       	ldi	r31, 0x00	; 0
    6120:	12 96       	adiw	r26, 0x02	; 2
    6122:	8d 91       	ld	r24, X+
    6124:	9c 91       	ld	r25, X
    6126:	13 97       	sbiw	r26, 0x03	; 3
    6128:	00 97       	sbiw	r24, 0x00	; 0
    612a:	19 f0       	breq	.+6      	; 0x6132 <free+0xd4>
    612c:	fd 01       	movw	r30, r26
    612e:	dc 01       	movw	r26, r24
    6130:	f7 cf       	rjmp	.-18     	; 0x6120 <free+0xc2>
    6132:	8d 91       	ld	r24, X+
    6134:	9c 91       	ld	r25, X
    6136:	11 97       	sbiw	r26, 0x01	; 1
    6138:	9d 01       	movw	r18, r26
    613a:	2e 5f       	subi	r18, 0xFE	; 254
    613c:	3f 4f       	sbci	r19, 0xFF	; 255
    613e:	82 0f       	add	r24, r18
    6140:	93 1f       	adc	r25, r19
    6142:	20 91 8f 1a 	lds	r18, 0x1A8F	; 0x801a8f <__brkval>
    6146:	30 91 90 1a 	lds	r19, 0x1A90	; 0x801a90 <__brkval+0x1>
    614a:	28 17       	cp	r18, r24
    614c:	39 07       	cpc	r19, r25
    614e:	69 f4       	brne	.+26     	; 0x616a <free+0x10c>
    6150:	30 97       	sbiw	r30, 0x00	; 0
    6152:	29 f4       	brne	.+10     	; 0x615e <free+0x100>
    6154:	10 92 92 1a 	sts	0x1A92, r1	; 0x801a92 <__flp+0x1>
    6158:	10 92 91 1a 	sts	0x1A91, r1	; 0x801a91 <__flp>
    615c:	02 c0       	rjmp	.+4      	; 0x6162 <free+0x104>
    615e:	13 82       	std	Z+3, r1	; 0x03
    6160:	12 82       	std	Z+2, r1	; 0x02
    6162:	b0 93 90 1a 	sts	0x1A90, r27	; 0x801a90 <__brkval+0x1>
    6166:	a0 93 8f 1a 	sts	0x1A8F, r26	; 0x801a8f <__brkval>
    616a:	df 91       	pop	r29
    616c:	cf 91       	pop	r28
    616e:	08 95       	ret

00006170 <do_rand>:
    6170:	8f 92       	push	r8
    6172:	9f 92       	push	r9
    6174:	af 92       	push	r10
    6176:	bf 92       	push	r11
    6178:	cf 92       	push	r12
    617a:	df 92       	push	r13
    617c:	ef 92       	push	r14
    617e:	ff 92       	push	r15
    6180:	cf 93       	push	r28
    6182:	df 93       	push	r29
    6184:	ec 01       	movw	r28, r24
    6186:	68 81       	ld	r22, Y
    6188:	79 81       	ldd	r23, Y+1	; 0x01
    618a:	8a 81       	ldd	r24, Y+2	; 0x02
    618c:	9b 81       	ldd	r25, Y+3	; 0x03
    618e:	61 15       	cp	r22, r1
    6190:	71 05       	cpc	r23, r1
    6192:	81 05       	cpc	r24, r1
    6194:	91 05       	cpc	r25, r1
    6196:	21 f4       	brne	.+8      	; 0x61a0 <do_rand+0x30>
    6198:	64 e2       	ldi	r22, 0x24	; 36
    619a:	79 ed       	ldi	r23, 0xD9	; 217
    619c:	8b e5       	ldi	r24, 0x5B	; 91
    619e:	97 e0       	ldi	r25, 0x07	; 7
    61a0:	2d e1       	ldi	r18, 0x1D	; 29
    61a2:	33 ef       	ldi	r19, 0xF3	; 243
    61a4:	41 e0       	ldi	r20, 0x01	; 1
    61a6:	50 e0       	ldi	r21, 0x00	; 0
    61a8:	b9 d3       	rcall	.+1906   	; 0x691c <__divmodsi4>
    61aa:	49 01       	movw	r8, r18
    61ac:	5a 01       	movw	r10, r20
    61ae:	9b 01       	movw	r18, r22
    61b0:	ac 01       	movw	r20, r24
    61b2:	a7 ea       	ldi	r26, 0xA7	; 167
    61b4:	b1 e4       	ldi	r27, 0x41	; 65
    61b6:	ce d3       	rcall	.+1948   	; 0x6954 <__muluhisi3>
    61b8:	6b 01       	movw	r12, r22
    61ba:	7c 01       	movw	r14, r24
    61bc:	ac ee       	ldi	r26, 0xEC	; 236
    61be:	b4 ef       	ldi	r27, 0xF4	; 244
    61c0:	a5 01       	movw	r20, r10
    61c2:	94 01       	movw	r18, r8
    61c4:	d3 d3       	rcall	.+1958   	; 0x696c <__mulohisi3>
    61c6:	dc 01       	movw	r26, r24
    61c8:	cb 01       	movw	r24, r22
    61ca:	8c 0d       	add	r24, r12
    61cc:	9d 1d       	adc	r25, r13
    61ce:	ae 1d       	adc	r26, r14
    61d0:	bf 1d       	adc	r27, r15
    61d2:	b7 ff       	sbrs	r27, 7
    61d4:	03 c0       	rjmp	.+6      	; 0x61dc <do_rand+0x6c>
    61d6:	01 97       	sbiw	r24, 0x01	; 1
    61d8:	a1 09       	sbc	r26, r1
    61da:	b0 48       	sbci	r27, 0x80	; 128
    61dc:	88 83       	st	Y, r24
    61de:	99 83       	std	Y+1, r25	; 0x01
    61e0:	aa 83       	std	Y+2, r26	; 0x02
    61e2:	bb 83       	std	Y+3, r27	; 0x03
    61e4:	9f 77       	andi	r25, 0x7F	; 127
    61e6:	df 91       	pop	r29
    61e8:	cf 91       	pop	r28
    61ea:	ff 90       	pop	r15
    61ec:	ef 90       	pop	r14
    61ee:	df 90       	pop	r13
    61f0:	cf 90       	pop	r12
    61f2:	bf 90       	pop	r11
    61f4:	af 90       	pop	r10
    61f6:	9f 90       	pop	r9
    61f8:	8f 90       	pop	r8
    61fa:	08 95       	ret

000061fc <rand_r>:
    61fc:	b9 cf       	rjmp	.-142    	; 0x6170 <do_rand>

000061fe <rand>:
    61fe:	86 e0       	ldi	r24, 0x06	; 6
    6200:	92 e0       	ldi	r25, 0x02	; 2
    6202:	b6 cf       	rjmp	.-148    	; 0x6170 <do_rand>

00006204 <srand>:
    6204:	a0 e0       	ldi	r26, 0x00	; 0
    6206:	b0 e0       	ldi	r27, 0x00	; 0
    6208:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <next>
    620c:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <next+0x1>
    6210:	a0 93 08 02 	sts	0x0208, r26	; 0x800208 <next+0x2>
    6214:	b0 93 09 02 	sts	0x0209, r27	; 0x800209 <next+0x3>
    6218:	08 95       	ret

0000621a <abort>:
    621a:	81 e0       	ldi	r24, 0x01	; 1
    621c:	90 e0       	ldi	r25, 0x00	; 0
    621e:	f8 94       	cli
    6220:	b8 c3       	rjmp	.+1904   	; 0x6992 <_exit>

00006222 <memcpy>:
    6222:	fb 01       	movw	r30, r22
    6224:	dc 01       	movw	r26, r24
    6226:	02 c0       	rjmp	.+4      	; 0x622c <memcpy+0xa>
    6228:	01 90       	ld	r0, Z+
    622a:	0d 92       	st	X+, r0
    622c:	41 50       	subi	r20, 0x01	; 1
    622e:	50 40       	sbci	r21, 0x00	; 0
    6230:	d8 f7       	brcc	.-10     	; 0x6228 <memcpy+0x6>
    6232:	08 95       	ret

00006234 <memset>:
    6234:	dc 01       	movw	r26, r24
    6236:	01 c0       	rjmp	.+2      	; 0x623a <memset+0x6>
    6238:	6d 93       	st	X+, r22
    623a:	41 50       	subi	r20, 0x01	; 1
    623c:	50 40       	sbci	r21, 0x00	; 0
    623e:	e0 f7       	brcc	.-8      	; 0x6238 <memset+0x4>
    6240:	08 95       	ret

00006242 <strcasestr>:
    6242:	fb 01       	movw	r30, r22
    6244:	51 91       	ld	r21, Z+
    6246:	55 23       	and	r21, r21
    6248:	b1 f0       	breq	.+44     	; 0x6276 <strcasestr+0x34>
    624a:	bf 01       	movw	r22, r30
    624c:	dc 01       	movw	r26, r24
    624e:	05 2e       	mov	r0, r21
    6250:	4d 91       	ld	r20, X+
    6252:	44 23       	and	r20, r20
    6254:	69 f0       	breq	.+26     	; 0x6270 <strcasestr+0x2e>
    6256:	10 d0       	rcall	.+32     	; 0x6278 <strcasestr+0x36>
    6258:	d9 f7       	brne	.-10     	; 0x6250 <strcasestr+0xe>
    625a:	cd 01       	movw	r24, r26
    625c:	01 90       	ld	r0, Z+
    625e:	00 20       	and	r0, r0
    6260:	49 f0       	breq	.+18     	; 0x6274 <strcasestr+0x32>
    6262:	4d 91       	ld	r20, X+
    6264:	41 11       	cpse	r20, r1
    6266:	08 d0       	rcall	.+16     	; 0x6278 <strcasestr+0x36>
    6268:	c9 f3       	breq	.-14     	; 0x625c <strcasestr+0x1a>
    626a:	fb 01       	movw	r30, r22
    626c:	41 11       	cpse	r20, r1
    626e:	ee cf       	rjmp	.-36     	; 0x624c <strcasestr+0xa>
    6270:	81 e0       	ldi	r24, 0x01	; 1
    6272:	90 e0       	ldi	r25, 0x00	; 0
    6274:	01 97       	sbiw	r24, 0x01	; 1
    6276:	08 95       	ret
    6278:	40 25       	eor	r20, r0
    627a:	39 f0       	breq	.+14     	; 0x628a <strcasestr+0x48>
    627c:	40 32       	cpi	r20, 0x20	; 32
    627e:	29 f4       	brne	.+10     	; 0x628a <strcasestr+0x48>
    6280:	40 29       	or	r20, r0
    6282:	4b 57       	subi	r20, 0x7B	; 123
    6284:	46 5e       	subi	r20, 0xE6	; 230
    6286:	08 f0       	brcs	.+2      	; 0x628a <strcasestr+0x48>
    6288:	18 94       	sez
    628a:	08 95       	ret

0000628c <strcat>:
    628c:	fb 01       	movw	r30, r22
    628e:	dc 01       	movw	r26, r24
    6290:	0d 90       	ld	r0, X+
    6292:	00 20       	and	r0, r0
    6294:	e9 f7       	brne	.-6      	; 0x6290 <strcat+0x4>
    6296:	11 97       	sbiw	r26, 0x01	; 1
    6298:	01 90       	ld	r0, Z+
    629a:	0d 92       	st	X+, r0
    629c:	00 20       	and	r0, r0
    629e:	e1 f7       	brne	.-8      	; 0x6298 <strcat+0xc>
    62a0:	08 95       	ret

000062a2 <strcpy>:
    62a2:	fb 01       	movw	r30, r22
    62a4:	dc 01       	movw	r26, r24
    62a6:	01 90       	ld	r0, Z+
    62a8:	0d 92       	st	X+, r0
    62aa:	00 20       	and	r0, r0
    62ac:	e1 f7       	brne	.-8      	; 0x62a6 <strcpy+0x4>
    62ae:	08 95       	ret

000062b0 <strncasecmp>:
    62b0:	fb 01       	movw	r30, r22
    62b2:	dc 01       	movw	r26, r24
    62b4:	41 50       	subi	r20, 0x01	; 1
    62b6:	50 40       	sbci	r21, 0x00	; 0
    62b8:	88 f0       	brcs	.+34     	; 0x62dc <strncasecmp+0x2c>
    62ba:	8d 91       	ld	r24, X+
    62bc:	81 34       	cpi	r24, 0x41	; 65
    62be:	1c f0       	brlt	.+6      	; 0x62c6 <strncasecmp+0x16>
    62c0:	8b 35       	cpi	r24, 0x5B	; 91
    62c2:	0c f4       	brge	.+2      	; 0x62c6 <strncasecmp+0x16>
    62c4:	80 5e       	subi	r24, 0xE0	; 224
    62c6:	61 91       	ld	r22, Z+
    62c8:	61 34       	cpi	r22, 0x41	; 65
    62ca:	1c f0       	brlt	.+6      	; 0x62d2 <strncasecmp+0x22>
    62cc:	6b 35       	cpi	r22, 0x5B	; 91
    62ce:	0c f4       	brge	.+2      	; 0x62d2 <strncasecmp+0x22>
    62d0:	60 5e       	subi	r22, 0xE0	; 224
    62d2:	86 1b       	sub	r24, r22
    62d4:	61 11       	cpse	r22, r1
    62d6:	71 f3       	breq	.-36     	; 0x62b4 <strncasecmp+0x4>
    62d8:	99 0b       	sbc	r25, r25
    62da:	08 95       	ret
    62dc:	88 1b       	sub	r24, r24
    62de:	fc cf       	rjmp	.-8      	; 0x62d8 <strncasecmp+0x28>

000062e0 <printf>:
    62e0:	cf 93       	push	r28
    62e2:	df 93       	push	r29
    62e4:	cd b7       	in	r28, 0x3d	; 61
    62e6:	de b7       	in	r29, 0x3e	; 62
    62e8:	ae 01       	movw	r20, r28
    62ea:	4a 5f       	subi	r20, 0xFA	; 250
    62ec:	5f 4f       	sbci	r21, 0xFF	; 255
    62ee:	fa 01       	movw	r30, r20
    62f0:	61 91       	ld	r22, Z+
    62f2:	71 91       	ld	r23, Z+
    62f4:	af 01       	movw	r20, r30
    62f6:	80 91 95 1a 	lds	r24, 0x1A95	; 0x801a95 <__iob+0x2>
    62fa:	90 91 96 1a 	lds	r25, 0x1A96	; 0x801a96 <__iob+0x3>
    62fe:	61 d0       	rcall	.+194    	; 0x63c2 <vfprintf>
    6300:	df 91       	pop	r29
    6302:	cf 91       	pop	r28
    6304:	08 95       	ret

00006306 <puts>:
    6306:	0f 93       	push	r16
    6308:	1f 93       	push	r17
    630a:	cf 93       	push	r28
    630c:	df 93       	push	r29
    630e:	e0 91 95 1a 	lds	r30, 0x1A95	; 0x801a95 <__iob+0x2>
    6312:	f0 91 96 1a 	lds	r31, 0x1A96	; 0x801a96 <__iob+0x3>
    6316:	23 81       	ldd	r18, Z+3	; 0x03
    6318:	21 ff       	sbrs	r18, 1
    631a:	1b c0       	rjmp	.+54     	; 0x6352 <puts+0x4c>
    631c:	8c 01       	movw	r16, r24
    631e:	d0 e0       	ldi	r29, 0x00	; 0
    6320:	c0 e0       	ldi	r28, 0x00	; 0
    6322:	f8 01       	movw	r30, r16
    6324:	81 91       	ld	r24, Z+
    6326:	8f 01       	movw	r16, r30
    6328:	60 91 95 1a 	lds	r22, 0x1A95	; 0x801a95 <__iob+0x2>
    632c:	70 91 96 1a 	lds	r23, 0x1A96	; 0x801a96 <__iob+0x3>
    6330:	db 01       	movw	r26, r22
    6332:	18 96       	adiw	r26, 0x08	; 8
    6334:	ed 91       	ld	r30, X+
    6336:	fc 91       	ld	r31, X
    6338:	19 97       	sbiw	r26, 0x09	; 9
    633a:	88 23       	and	r24, r24
    633c:	31 f0       	breq	.+12     	; 0x634a <puts+0x44>
    633e:	19 95       	eicall
    6340:	89 2b       	or	r24, r25
    6342:	79 f3       	breq	.-34     	; 0x6322 <puts+0x1c>
    6344:	df ef       	ldi	r29, 0xFF	; 255
    6346:	cf ef       	ldi	r28, 0xFF	; 255
    6348:	ec cf       	rjmp	.-40     	; 0x6322 <puts+0x1c>
    634a:	8a e0       	ldi	r24, 0x0A	; 10
    634c:	19 95       	eicall
    634e:	89 2b       	or	r24, r25
    6350:	19 f0       	breq	.+6      	; 0x6358 <puts+0x52>
    6352:	8f ef       	ldi	r24, 0xFF	; 255
    6354:	9f ef       	ldi	r25, 0xFF	; 255
    6356:	02 c0       	rjmp	.+4      	; 0x635c <puts+0x56>
    6358:	8d 2f       	mov	r24, r29
    635a:	9c 2f       	mov	r25, r28
    635c:	df 91       	pop	r29
    635e:	cf 91       	pop	r28
    6360:	1f 91       	pop	r17
    6362:	0f 91       	pop	r16
    6364:	08 95       	ret

00006366 <sprintf>:
    6366:	0f 93       	push	r16
    6368:	1f 93       	push	r17
    636a:	cf 93       	push	r28
    636c:	df 93       	push	r29
    636e:	cd b7       	in	r28, 0x3d	; 61
    6370:	de b7       	in	r29, 0x3e	; 62
    6372:	2e 97       	sbiw	r28, 0x0e	; 14
    6374:	0f b6       	in	r0, 0x3f	; 63
    6376:	f8 94       	cli
    6378:	de bf       	out	0x3e, r29	; 62
    637a:	0f be       	out	0x3f, r0	; 63
    637c:	cd bf       	out	0x3d, r28	; 61
    637e:	0e 89       	ldd	r16, Y+22	; 0x16
    6380:	1f 89       	ldd	r17, Y+23	; 0x17
    6382:	86 e0       	ldi	r24, 0x06	; 6
    6384:	8c 83       	std	Y+4, r24	; 0x04
    6386:	1a 83       	std	Y+2, r17	; 0x02
    6388:	09 83       	std	Y+1, r16	; 0x01
    638a:	8f ef       	ldi	r24, 0xFF	; 255
    638c:	9f e7       	ldi	r25, 0x7F	; 127
    638e:	9e 83       	std	Y+6, r25	; 0x06
    6390:	8d 83       	std	Y+5, r24	; 0x05
    6392:	ae 01       	movw	r20, r28
    6394:	46 5e       	subi	r20, 0xE6	; 230
    6396:	5f 4f       	sbci	r21, 0xFF	; 255
    6398:	68 8d       	ldd	r22, Y+24	; 0x18
    639a:	79 8d       	ldd	r23, Y+25	; 0x19
    639c:	ce 01       	movw	r24, r28
    639e:	01 96       	adiw	r24, 0x01	; 1
    63a0:	10 d0       	rcall	.+32     	; 0x63c2 <vfprintf>
    63a2:	ef 81       	ldd	r30, Y+7	; 0x07
    63a4:	f8 85       	ldd	r31, Y+8	; 0x08
    63a6:	e0 0f       	add	r30, r16
    63a8:	f1 1f       	adc	r31, r17
    63aa:	10 82       	st	Z, r1
    63ac:	2e 96       	adiw	r28, 0x0e	; 14
    63ae:	0f b6       	in	r0, 0x3f	; 63
    63b0:	f8 94       	cli
    63b2:	de bf       	out	0x3e, r29	; 62
    63b4:	0f be       	out	0x3f, r0	; 63
    63b6:	cd bf       	out	0x3d, r28	; 61
    63b8:	df 91       	pop	r29
    63ba:	cf 91       	pop	r28
    63bc:	1f 91       	pop	r17
    63be:	0f 91       	pop	r16
    63c0:	08 95       	ret

000063c2 <vfprintf>:
    63c2:	2f 92       	push	r2
    63c4:	3f 92       	push	r3
    63c6:	4f 92       	push	r4
    63c8:	5f 92       	push	r5
    63ca:	6f 92       	push	r6
    63cc:	7f 92       	push	r7
    63ce:	8f 92       	push	r8
    63d0:	9f 92       	push	r9
    63d2:	af 92       	push	r10
    63d4:	bf 92       	push	r11
    63d6:	cf 92       	push	r12
    63d8:	df 92       	push	r13
    63da:	ef 92       	push	r14
    63dc:	ff 92       	push	r15
    63de:	0f 93       	push	r16
    63e0:	1f 93       	push	r17
    63e2:	cf 93       	push	r28
    63e4:	df 93       	push	r29
    63e6:	cd b7       	in	r28, 0x3d	; 61
    63e8:	de b7       	in	r29, 0x3e	; 62
    63ea:	2b 97       	sbiw	r28, 0x0b	; 11
    63ec:	0f b6       	in	r0, 0x3f	; 63
    63ee:	f8 94       	cli
    63f0:	de bf       	out	0x3e, r29	; 62
    63f2:	0f be       	out	0x3f, r0	; 63
    63f4:	cd bf       	out	0x3d, r28	; 61
    63f6:	6c 01       	movw	r12, r24
    63f8:	7b 01       	movw	r14, r22
    63fa:	8a 01       	movw	r16, r20
    63fc:	fc 01       	movw	r30, r24
    63fe:	17 82       	std	Z+7, r1	; 0x07
    6400:	16 82       	std	Z+6, r1	; 0x06
    6402:	83 81       	ldd	r24, Z+3	; 0x03
    6404:	81 ff       	sbrs	r24, 1
    6406:	bf c1       	rjmp	.+894    	; 0x6786 <vfprintf+0x3c4>
    6408:	ce 01       	movw	r24, r28
    640a:	01 96       	adiw	r24, 0x01	; 1
    640c:	3c 01       	movw	r6, r24
    640e:	f6 01       	movw	r30, r12
    6410:	93 81       	ldd	r25, Z+3	; 0x03
    6412:	f7 01       	movw	r30, r14
    6414:	93 fd       	sbrc	r25, 3
    6416:	85 91       	lpm	r24, Z+
    6418:	93 ff       	sbrs	r25, 3
    641a:	81 91       	ld	r24, Z+
    641c:	7f 01       	movw	r14, r30
    641e:	88 23       	and	r24, r24
    6420:	09 f4       	brne	.+2      	; 0x6424 <vfprintf+0x62>
    6422:	ad c1       	rjmp	.+858    	; 0x677e <vfprintf+0x3bc>
    6424:	85 32       	cpi	r24, 0x25	; 37
    6426:	39 f4       	brne	.+14     	; 0x6436 <vfprintf+0x74>
    6428:	93 fd       	sbrc	r25, 3
    642a:	85 91       	lpm	r24, Z+
    642c:	93 ff       	sbrs	r25, 3
    642e:	81 91       	ld	r24, Z+
    6430:	7f 01       	movw	r14, r30
    6432:	85 32       	cpi	r24, 0x25	; 37
    6434:	21 f4       	brne	.+8      	; 0x643e <vfprintf+0x7c>
    6436:	b6 01       	movw	r22, r12
    6438:	90 e0       	ldi	r25, 0x00	; 0
    643a:	d6 d1       	rcall	.+940    	; 0x67e8 <fputc>
    643c:	e8 cf       	rjmp	.-48     	; 0x640e <vfprintf+0x4c>
    643e:	91 2c       	mov	r9, r1
    6440:	21 2c       	mov	r2, r1
    6442:	31 2c       	mov	r3, r1
    6444:	ff e1       	ldi	r31, 0x1F	; 31
    6446:	f3 15       	cp	r31, r3
    6448:	d8 f0       	brcs	.+54     	; 0x6480 <vfprintf+0xbe>
    644a:	8b 32       	cpi	r24, 0x2B	; 43
    644c:	79 f0       	breq	.+30     	; 0x646c <vfprintf+0xaa>
    644e:	38 f4       	brcc	.+14     	; 0x645e <vfprintf+0x9c>
    6450:	80 32       	cpi	r24, 0x20	; 32
    6452:	79 f0       	breq	.+30     	; 0x6472 <vfprintf+0xb0>
    6454:	83 32       	cpi	r24, 0x23	; 35
    6456:	a1 f4       	brne	.+40     	; 0x6480 <vfprintf+0xbe>
    6458:	23 2d       	mov	r18, r3
    645a:	20 61       	ori	r18, 0x10	; 16
    645c:	1d c0       	rjmp	.+58     	; 0x6498 <vfprintf+0xd6>
    645e:	8d 32       	cpi	r24, 0x2D	; 45
    6460:	61 f0       	breq	.+24     	; 0x647a <vfprintf+0xb8>
    6462:	80 33       	cpi	r24, 0x30	; 48
    6464:	69 f4       	brne	.+26     	; 0x6480 <vfprintf+0xbe>
    6466:	23 2d       	mov	r18, r3
    6468:	21 60       	ori	r18, 0x01	; 1
    646a:	16 c0       	rjmp	.+44     	; 0x6498 <vfprintf+0xd6>
    646c:	83 2d       	mov	r24, r3
    646e:	82 60       	ori	r24, 0x02	; 2
    6470:	38 2e       	mov	r3, r24
    6472:	e3 2d       	mov	r30, r3
    6474:	e4 60       	ori	r30, 0x04	; 4
    6476:	3e 2e       	mov	r3, r30
    6478:	2a c0       	rjmp	.+84     	; 0x64ce <vfprintf+0x10c>
    647a:	f3 2d       	mov	r31, r3
    647c:	f8 60       	ori	r31, 0x08	; 8
    647e:	1d c0       	rjmp	.+58     	; 0x64ba <vfprintf+0xf8>
    6480:	37 fc       	sbrc	r3, 7
    6482:	2d c0       	rjmp	.+90     	; 0x64de <vfprintf+0x11c>
    6484:	20 ed       	ldi	r18, 0xD0	; 208
    6486:	28 0f       	add	r18, r24
    6488:	2a 30       	cpi	r18, 0x0A	; 10
    648a:	40 f0       	brcs	.+16     	; 0x649c <vfprintf+0xda>
    648c:	8e 32       	cpi	r24, 0x2E	; 46
    648e:	b9 f4       	brne	.+46     	; 0x64be <vfprintf+0xfc>
    6490:	36 fc       	sbrc	r3, 6
    6492:	75 c1       	rjmp	.+746    	; 0x677e <vfprintf+0x3bc>
    6494:	23 2d       	mov	r18, r3
    6496:	20 64       	ori	r18, 0x40	; 64
    6498:	32 2e       	mov	r3, r18
    649a:	19 c0       	rjmp	.+50     	; 0x64ce <vfprintf+0x10c>
    649c:	36 fe       	sbrs	r3, 6
    649e:	06 c0       	rjmp	.+12     	; 0x64ac <vfprintf+0xea>
    64a0:	8a e0       	ldi	r24, 0x0A	; 10
    64a2:	98 9e       	mul	r9, r24
    64a4:	20 0d       	add	r18, r0
    64a6:	11 24       	eor	r1, r1
    64a8:	92 2e       	mov	r9, r18
    64aa:	11 c0       	rjmp	.+34     	; 0x64ce <vfprintf+0x10c>
    64ac:	ea e0       	ldi	r30, 0x0A	; 10
    64ae:	2e 9e       	mul	r2, r30
    64b0:	20 0d       	add	r18, r0
    64b2:	11 24       	eor	r1, r1
    64b4:	22 2e       	mov	r2, r18
    64b6:	f3 2d       	mov	r31, r3
    64b8:	f0 62       	ori	r31, 0x20	; 32
    64ba:	3f 2e       	mov	r3, r31
    64bc:	08 c0       	rjmp	.+16     	; 0x64ce <vfprintf+0x10c>
    64be:	8c 36       	cpi	r24, 0x6C	; 108
    64c0:	21 f4       	brne	.+8      	; 0x64ca <vfprintf+0x108>
    64c2:	83 2d       	mov	r24, r3
    64c4:	80 68       	ori	r24, 0x80	; 128
    64c6:	38 2e       	mov	r3, r24
    64c8:	02 c0       	rjmp	.+4      	; 0x64ce <vfprintf+0x10c>
    64ca:	88 36       	cpi	r24, 0x68	; 104
    64cc:	41 f4       	brne	.+16     	; 0x64de <vfprintf+0x11c>
    64ce:	f7 01       	movw	r30, r14
    64d0:	93 fd       	sbrc	r25, 3
    64d2:	85 91       	lpm	r24, Z+
    64d4:	93 ff       	sbrs	r25, 3
    64d6:	81 91       	ld	r24, Z+
    64d8:	7f 01       	movw	r14, r30
    64da:	81 11       	cpse	r24, r1
    64dc:	b3 cf       	rjmp	.-154    	; 0x6444 <vfprintf+0x82>
    64de:	98 2f       	mov	r25, r24
    64e0:	9f 7d       	andi	r25, 0xDF	; 223
    64e2:	95 54       	subi	r25, 0x45	; 69
    64e4:	93 30       	cpi	r25, 0x03	; 3
    64e6:	28 f4       	brcc	.+10     	; 0x64f2 <vfprintf+0x130>
    64e8:	0c 5f       	subi	r16, 0xFC	; 252
    64ea:	1f 4f       	sbci	r17, 0xFF	; 255
    64ec:	9f e3       	ldi	r25, 0x3F	; 63
    64ee:	99 83       	std	Y+1, r25	; 0x01
    64f0:	0d c0       	rjmp	.+26     	; 0x650c <vfprintf+0x14a>
    64f2:	83 36       	cpi	r24, 0x63	; 99
    64f4:	31 f0       	breq	.+12     	; 0x6502 <vfprintf+0x140>
    64f6:	83 37       	cpi	r24, 0x73	; 115
    64f8:	71 f0       	breq	.+28     	; 0x6516 <vfprintf+0x154>
    64fa:	83 35       	cpi	r24, 0x53	; 83
    64fc:	09 f0       	breq	.+2      	; 0x6500 <vfprintf+0x13e>
    64fe:	55 c0       	rjmp	.+170    	; 0x65aa <vfprintf+0x1e8>
    6500:	20 c0       	rjmp	.+64     	; 0x6542 <vfprintf+0x180>
    6502:	f8 01       	movw	r30, r16
    6504:	80 81       	ld	r24, Z
    6506:	89 83       	std	Y+1, r24	; 0x01
    6508:	0e 5f       	subi	r16, 0xFE	; 254
    650a:	1f 4f       	sbci	r17, 0xFF	; 255
    650c:	88 24       	eor	r8, r8
    650e:	83 94       	inc	r8
    6510:	91 2c       	mov	r9, r1
    6512:	53 01       	movw	r10, r6
    6514:	12 c0       	rjmp	.+36     	; 0x653a <vfprintf+0x178>
    6516:	28 01       	movw	r4, r16
    6518:	f2 e0       	ldi	r31, 0x02	; 2
    651a:	4f 0e       	add	r4, r31
    651c:	51 1c       	adc	r5, r1
    651e:	f8 01       	movw	r30, r16
    6520:	a0 80       	ld	r10, Z
    6522:	b1 80       	ldd	r11, Z+1	; 0x01
    6524:	36 fe       	sbrs	r3, 6
    6526:	03 c0       	rjmp	.+6      	; 0x652e <vfprintf+0x16c>
    6528:	69 2d       	mov	r22, r9
    652a:	70 e0       	ldi	r23, 0x00	; 0
    652c:	02 c0       	rjmp	.+4      	; 0x6532 <vfprintf+0x170>
    652e:	6f ef       	ldi	r22, 0xFF	; 255
    6530:	7f ef       	ldi	r23, 0xFF	; 255
    6532:	c5 01       	movw	r24, r10
    6534:	4e d1       	rcall	.+668    	; 0x67d2 <strnlen>
    6536:	4c 01       	movw	r8, r24
    6538:	82 01       	movw	r16, r4
    653a:	f3 2d       	mov	r31, r3
    653c:	ff 77       	andi	r31, 0x7F	; 127
    653e:	3f 2e       	mov	r3, r31
    6540:	15 c0       	rjmp	.+42     	; 0x656c <vfprintf+0x1aa>
    6542:	28 01       	movw	r4, r16
    6544:	22 e0       	ldi	r18, 0x02	; 2
    6546:	42 0e       	add	r4, r18
    6548:	51 1c       	adc	r5, r1
    654a:	f8 01       	movw	r30, r16
    654c:	a0 80       	ld	r10, Z
    654e:	b1 80       	ldd	r11, Z+1	; 0x01
    6550:	36 fe       	sbrs	r3, 6
    6552:	03 c0       	rjmp	.+6      	; 0x655a <vfprintf+0x198>
    6554:	69 2d       	mov	r22, r9
    6556:	70 e0       	ldi	r23, 0x00	; 0
    6558:	02 c0       	rjmp	.+4      	; 0x655e <vfprintf+0x19c>
    655a:	6f ef       	ldi	r22, 0xFF	; 255
    655c:	7f ef       	ldi	r23, 0xFF	; 255
    655e:	c5 01       	movw	r24, r10
    6560:	2d d1       	rcall	.+602    	; 0x67bc <strnlen_P>
    6562:	4c 01       	movw	r8, r24
    6564:	f3 2d       	mov	r31, r3
    6566:	f0 68       	ori	r31, 0x80	; 128
    6568:	3f 2e       	mov	r3, r31
    656a:	82 01       	movw	r16, r4
    656c:	33 fc       	sbrc	r3, 3
    656e:	19 c0       	rjmp	.+50     	; 0x65a2 <vfprintf+0x1e0>
    6570:	82 2d       	mov	r24, r2
    6572:	90 e0       	ldi	r25, 0x00	; 0
    6574:	88 16       	cp	r8, r24
    6576:	99 06       	cpc	r9, r25
    6578:	a0 f4       	brcc	.+40     	; 0x65a2 <vfprintf+0x1e0>
    657a:	b6 01       	movw	r22, r12
    657c:	80 e2       	ldi	r24, 0x20	; 32
    657e:	90 e0       	ldi	r25, 0x00	; 0
    6580:	33 d1       	rcall	.+614    	; 0x67e8 <fputc>
    6582:	2a 94       	dec	r2
    6584:	f5 cf       	rjmp	.-22     	; 0x6570 <vfprintf+0x1ae>
    6586:	f5 01       	movw	r30, r10
    6588:	37 fc       	sbrc	r3, 7
    658a:	85 91       	lpm	r24, Z+
    658c:	37 fe       	sbrs	r3, 7
    658e:	81 91       	ld	r24, Z+
    6590:	5f 01       	movw	r10, r30
    6592:	b6 01       	movw	r22, r12
    6594:	90 e0       	ldi	r25, 0x00	; 0
    6596:	28 d1       	rcall	.+592    	; 0x67e8 <fputc>
    6598:	21 10       	cpse	r2, r1
    659a:	2a 94       	dec	r2
    659c:	21 e0       	ldi	r18, 0x01	; 1
    659e:	82 1a       	sub	r8, r18
    65a0:	91 08       	sbc	r9, r1
    65a2:	81 14       	cp	r8, r1
    65a4:	91 04       	cpc	r9, r1
    65a6:	79 f7       	brne	.-34     	; 0x6586 <vfprintf+0x1c4>
    65a8:	e1 c0       	rjmp	.+450    	; 0x676c <vfprintf+0x3aa>
    65aa:	84 36       	cpi	r24, 0x64	; 100
    65ac:	11 f0       	breq	.+4      	; 0x65b2 <vfprintf+0x1f0>
    65ae:	89 36       	cpi	r24, 0x69	; 105
    65b0:	39 f5       	brne	.+78     	; 0x6600 <vfprintf+0x23e>
    65b2:	f8 01       	movw	r30, r16
    65b4:	37 fe       	sbrs	r3, 7
    65b6:	07 c0       	rjmp	.+14     	; 0x65c6 <vfprintf+0x204>
    65b8:	60 81       	ld	r22, Z
    65ba:	71 81       	ldd	r23, Z+1	; 0x01
    65bc:	82 81       	ldd	r24, Z+2	; 0x02
    65be:	93 81       	ldd	r25, Z+3	; 0x03
    65c0:	0c 5f       	subi	r16, 0xFC	; 252
    65c2:	1f 4f       	sbci	r17, 0xFF	; 255
    65c4:	08 c0       	rjmp	.+16     	; 0x65d6 <vfprintf+0x214>
    65c6:	60 81       	ld	r22, Z
    65c8:	71 81       	ldd	r23, Z+1	; 0x01
    65ca:	07 2e       	mov	r0, r23
    65cc:	00 0c       	add	r0, r0
    65ce:	88 0b       	sbc	r24, r24
    65d0:	99 0b       	sbc	r25, r25
    65d2:	0e 5f       	subi	r16, 0xFE	; 254
    65d4:	1f 4f       	sbci	r17, 0xFF	; 255
    65d6:	f3 2d       	mov	r31, r3
    65d8:	ff 76       	andi	r31, 0x6F	; 111
    65da:	3f 2e       	mov	r3, r31
    65dc:	97 ff       	sbrs	r25, 7
    65de:	09 c0       	rjmp	.+18     	; 0x65f2 <vfprintf+0x230>
    65e0:	90 95       	com	r25
    65e2:	80 95       	com	r24
    65e4:	70 95       	com	r23
    65e6:	61 95       	neg	r22
    65e8:	7f 4f       	sbci	r23, 0xFF	; 255
    65ea:	8f 4f       	sbci	r24, 0xFF	; 255
    65ec:	9f 4f       	sbci	r25, 0xFF	; 255
    65ee:	f0 68       	ori	r31, 0x80	; 128
    65f0:	3f 2e       	mov	r3, r31
    65f2:	2a e0       	ldi	r18, 0x0A	; 10
    65f4:	30 e0       	ldi	r19, 0x00	; 0
    65f6:	a3 01       	movw	r20, r6
    65f8:	33 d1       	rcall	.+614    	; 0x6860 <__ultoa_invert>
    65fa:	88 2e       	mov	r8, r24
    65fc:	86 18       	sub	r8, r6
    65fe:	44 c0       	rjmp	.+136    	; 0x6688 <vfprintf+0x2c6>
    6600:	85 37       	cpi	r24, 0x75	; 117
    6602:	31 f4       	brne	.+12     	; 0x6610 <vfprintf+0x24e>
    6604:	23 2d       	mov	r18, r3
    6606:	2f 7e       	andi	r18, 0xEF	; 239
    6608:	b2 2e       	mov	r11, r18
    660a:	2a e0       	ldi	r18, 0x0A	; 10
    660c:	30 e0       	ldi	r19, 0x00	; 0
    660e:	25 c0       	rjmp	.+74     	; 0x665a <vfprintf+0x298>
    6610:	93 2d       	mov	r25, r3
    6612:	99 7f       	andi	r25, 0xF9	; 249
    6614:	b9 2e       	mov	r11, r25
    6616:	8f 36       	cpi	r24, 0x6F	; 111
    6618:	c1 f0       	breq	.+48     	; 0x664a <vfprintf+0x288>
    661a:	18 f4       	brcc	.+6      	; 0x6622 <vfprintf+0x260>
    661c:	88 35       	cpi	r24, 0x58	; 88
    661e:	79 f0       	breq	.+30     	; 0x663e <vfprintf+0x27c>
    6620:	ae c0       	rjmp	.+348    	; 0x677e <vfprintf+0x3bc>
    6622:	80 37       	cpi	r24, 0x70	; 112
    6624:	19 f0       	breq	.+6      	; 0x662c <vfprintf+0x26a>
    6626:	88 37       	cpi	r24, 0x78	; 120
    6628:	21 f0       	breq	.+8      	; 0x6632 <vfprintf+0x270>
    662a:	a9 c0       	rjmp	.+338    	; 0x677e <vfprintf+0x3bc>
    662c:	e9 2f       	mov	r30, r25
    662e:	e0 61       	ori	r30, 0x10	; 16
    6630:	be 2e       	mov	r11, r30
    6632:	b4 fe       	sbrs	r11, 4
    6634:	0d c0       	rjmp	.+26     	; 0x6650 <vfprintf+0x28e>
    6636:	fb 2d       	mov	r31, r11
    6638:	f4 60       	ori	r31, 0x04	; 4
    663a:	bf 2e       	mov	r11, r31
    663c:	09 c0       	rjmp	.+18     	; 0x6650 <vfprintf+0x28e>
    663e:	34 fe       	sbrs	r3, 4
    6640:	0a c0       	rjmp	.+20     	; 0x6656 <vfprintf+0x294>
    6642:	29 2f       	mov	r18, r25
    6644:	26 60       	ori	r18, 0x06	; 6
    6646:	b2 2e       	mov	r11, r18
    6648:	06 c0       	rjmp	.+12     	; 0x6656 <vfprintf+0x294>
    664a:	28 e0       	ldi	r18, 0x08	; 8
    664c:	30 e0       	ldi	r19, 0x00	; 0
    664e:	05 c0       	rjmp	.+10     	; 0x665a <vfprintf+0x298>
    6650:	20 e1       	ldi	r18, 0x10	; 16
    6652:	30 e0       	ldi	r19, 0x00	; 0
    6654:	02 c0       	rjmp	.+4      	; 0x665a <vfprintf+0x298>
    6656:	20 e1       	ldi	r18, 0x10	; 16
    6658:	32 e0       	ldi	r19, 0x02	; 2
    665a:	f8 01       	movw	r30, r16
    665c:	b7 fe       	sbrs	r11, 7
    665e:	07 c0       	rjmp	.+14     	; 0x666e <vfprintf+0x2ac>
    6660:	60 81       	ld	r22, Z
    6662:	71 81       	ldd	r23, Z+1	; 0x01
    6664:	82 81       	ldd	r24, Z+2	; 0x02
    6666:	93 81       	ldd	r25, Z+3	; 0x03
    6668:	0c 5f       	subi	r16, 0xFC	; 252
    666a:	1f 4f       	sbci	r17, 0xFF	; 255
    666c:	06 c0       	rjmp	.+12     	; 0x667a <vfprintf+0x2b8>
    666e:	60 81       	ld	r22, Z
    6670:	71 81       	ldd	r23, Z+1	; 0x01
    6672:	80 e0       	ldi	r24, 0x00	; 0
    6674:	90 e0       	ldi	r25, 0x00	; 0
    6676:	0e 5f       	subi	r16, 0xFE	; 254
    6678:	1f 4f       	sbci	r17, 0xFF	; 255
    667a:	a3 01       	movw	r20, r6
    667c:	f1 d0       	rcall	.+482    	; 0x6860 <__ultoa_invert>
    667e:	88 2e       	mov	r8, r24
    6680:	86 18       	sub	r8, r6
    6682:	fb 2d       	mov	r31, r11
    6684:	ff 77       	andi	r31, 0x7F	; 127
    6686:	3f 2e       	mov	r3, r31
    6688:	36 fe       	sbrs	r3, 6
    668a:	0d c0       	rjmp	.+26     	; 0x66a6 <vfprintf+0x2e4>
    668c:	23 2d       	mov	r18, r3
    668e:	2e 7f       	andi	r18, 0xFE	; 254
    6690:	a2 2e       	mov	r10, r18
    6692:	89 14       	cp	r8, r9
    6694:	58 f4       	brcc	.+22     	; 0x66ac <vfprintf+0x2ea>
    6696:	34 fe       	sbrs	r3, 4
    6698:	0b c0       	rjmp	.+22     	; 0x66b0 <vfprintf+0x2ee>
    669a:	32 fc       	sbrc	r3, 2
    669c:	09 c0       	rjmp	.+18     	; 0x66b0 <vfprintf+0x2ee>
    669e:	83 2d       	mov	r24, r3
    66a0:	8e 7e       	andi	r24, 0xEE	; 238
    66a2:	a8 2e       	mov	r10, r24
    66a4:	05 c0       	rjmp	.+10     	; 0x66b0 <vfprintf+0x2ee>
    66a6:	b8 2c       	mov	r11, r8
    66a8:	a3 2c       	mov	r10, r3
    66aa:	03 c0       	rjmp	.+6      	; 0x66b2 <vfprintf+0x2f0>
    66ac:	b8 2c       	mov	r11, r8
    66ae:	01 c0       	rjmp	.+2      	; 0x66b2 <vfprintf+0x2f0>
    66b0:	b9 2c       	mov	r11, r9
    66b2:	a4 fe       	sbrs	r10, 4
    66b4:	0f c0       	rjmp	.+30     	; 0x66d4 <vfprintf+0x312>
    66b6:	fe 01       	movw	r30, r28
    66b8:	e8 0d       	add	r30, r8
    66ba:	f1 1d       	adc	r31, r1
    66bc:	80 81       	ld	r24, Z
    66be:	80 33       	cpi	r24, 0x30	; 48
    66c0:	21 f4       	brne	.+8      	; 0x66ca <vfprintf+0x308>
    66c2:	9a 2d       	mov	r25, r10
    66c4:	99 7e       	andi	r25, 0xE9	; 233
    66c6:	a9 2e       	mov	r10, r25
    66c8:	09 c0       	rjmp	.+18     	; 0x66dc <vfprintf+0x31a>
    66ca:	a2 fe       	sbrs	r10, 2
    66cc:	06 c0       	rjmp	.+12     	; 0x66da <vfprintf+0x318>
    66ce:	b3 94       	inc	r11
    66d0:	b3 94       	inc	r11
    66d2:	04 c0       	rjmp	.+8      	; 0x66dc <vfprintf+0x31a>
    66d4:	8a 2d       	mov	r24, r10
    66d6:	86 78       	andi	r24, 0x86	; 134
    66d8:	09 f0       	breq	.+2      	; 0x66dc <vfprintf+0x31a>
    66da:	b3 94       	inc	r11
    66dc:	a3 fc       	sbrc	r10, 3
    66de:	10 c0       	rjmp	.+32     	; 0x6700 <vfprintf+0x33e>
    66e0:	a0 fe       	sbrs	r10, 0
    66e2:	06 c0       	rjmp	.+12     	; 0x66f0 <vfprintf+0x32e>
    66e4:	b2 14       	cp	r11, r2
    66e6:	80 f4       	brcc	.+32     	; 0x6708 <vfprintf+0x346>
    66e8:	28 0c       	add	r2, r8
    66ea:	92 2c       	mov	r9, r2
    66ec:	9b 18       	sub	r9, r11
    66ee:	0d c0       	rjmp	.+26     	; 0x670a <vfprintf+0x348>
    66f0:	b2 14       	cp	r11, r2
    66f2:	58 f4       	brcc	.+22     	; 0x670a <vfprintf+0x348>
    66f4:	b6 01       	movw	r22, r12
    66f6:	80 e2       	ldi	r24, 0x20	; 32
    66f8:	90 e0       	ldi	r25, 0x00	; 0
    66fa:	76 d0       	rcall	.+236    	; 0x67e8 <fputc>
    66fc:	b3 94       	inc	r11
    66fe:	f8 cf       	rjmp	.-16     	; 0x66f0 <vfprintf+0x32e>
    6700:	b2 14       	cp	r11, r2
    6702:	18 f4       	brcc	.+6      	; 0x670a <vfprintf+0x348>
    6704:	2b 18       	sub	r2, r11
    6706:	02 c0       	rjmp	.+4      	; 0x670c <vfprintf+0x34a>
    6708:	98 2c       	mov	r9, r8
    670a:	21 2c       	mov	r2, r1
    670c:	a4 fe       	sbrs	r10, 4
    670e:	0f c0       	rjmp	.+30     	; 0x672e <vfprintf+0x36c>
    6710:	b6 01       	movw	r22, r12
    6712:	80 e3       	ldi	r24, 0x30	; 48
    6714:	90 e0       	ldi	r25, 0x00	; 0
    6716:	68 d0       	rcall	.+208    	; 0x67e8 <fputc>
    6718:	a2 fe       	sbrs	r10, 2
    671a:	16 c0       	rjmp	.+44     	; 0x6748 <vfprintf+0x386>
    671c:	a1 fc       	sbrc	r10, 1
    671e:	03 c0       	rjmp	.+6      	; 0x6726 <vfprintf+0x364>
    6720:	88 e7       	ldi	r24, 0x78	; 120
    6722:	90 e0       	ldi	r25, 0x00	; 0
    6724:	02 c0       	rjmp	.+4      	; 0x672a <vfprintf+0x368>
    6726:	88 e5       	ldi	r24, 0x58	; 88
    6728:	90 e0       	ldi	r25, 0x00	; 0
    672a:	b6 01       	movw	r22, r12
    672c:	0c c0       	rjmp	.+24     	; 0x6746 <vfprintf+0x384>
    672e:	8a 2d       	mov	r24, r10
    6730:	86 78       	andi	r24, 0x86	; 134
    6732:	51 f0       	breq	.+20     	; 0x6748 <vfprintf+0x386>
    6734:	a1 fe       	sbrs	r10, 1
    6736:	02 c0       	rjmp	.+4      	; 0x673c <vfprintf+0x37a>
    6738:	8b e2       	ldi	r24, 0x2B	; 43
    673a:	01 c0       	rjmp	.+2      	; 0x673e <vfprintf+0x37c>
    673c:	80 e2       	ldi	r24, 0x20	; 32
    673e:	a7 fc       	sbrc	r10, 7
    6740:	8d e2       	ldi	r24, 0x2D	; 45
    6742:	b6 01       	movw	r22, r12
    6744:	90 e0       	ldi	r25, 0x00	; 0
    6746:	50 d0       	rcall	.+160    	; 0x67e8 <fputc>
    6748:	89 14       	cp	r8, r9
    674a:	30 f4       	brcc	.+12     	; 0x6758 <vfprintf+0x396>
    674c:	b6 01       	movw	r22, r12
    674e:	80 e3       	ldi	r24, 0x30	; 48
    6750:	90 e0       	ldi	r25, 0x00	; 0
    6752:	4a d0       	rcall	.+148    	; 0x67e8 <fputc>
    6754:	9a 94       	dec	r9
    6756:	f8 cf       	rjmp	.-16     	; 0x6748 <vfprintf+0x386>
    6758:	8a 94       	dec	r8
    675a:	f3 01       	movw	r30, r6
    675c:	e8 0d       	add	r30, r8
    675e:	f1 1d       	adc	r31, r1
    6760:	80 81       	ld	r24, Z
    6762:	b6 01       	movw	r22, r12
    6764:	90 e0       	ldi	r25, 0x00	; 0
    6766:	40 d0       	rcall	.+128    	; 0x67e8 <fputc>
    6768:	81 10       	cpse	r8, r1
    676a:	f6 cf       	rjmp	.-20     	; 0x6758 <vfprintf+0x396>
    676c:	22 20       	and	r2, r2
    676e:	09 f4       	brne	.+2      	; 0x6772 <vfprintf+0x3b0>
    6770:	4e ce       	rjmp	.-868    	; 0x640e <vfprintf+0x4c>
    6772:	b6 01       	movw	r22, r12
    6774:	80 e2       	ldi	r24, 0x20	; 32
    6776:	90 e0       	ldi	r25, 0x00	; 0
    6778:	37 d0       	rcall	.+110    	; 0x67e8 <fputc>
    677a:	2a 94       	dec	r2
    677c:	f7 cf       	rjmp	.-18     	; 0x676c <vfprintf+0x3aa>
    677e:	f6 01       	movw	r30, r12
    6780:	86 81       	ldd	r24, Z+6	; 0x06
    6782:	97 81       	ldd	r25, Z+7	; 0x07
    6784:	02 c0       	rjmp	.+4      	; 0x678a <vfprintf+0x3c8>
    6786:	8f ef       	ldi	r24, 0xFF	; 255
    6788:	9f ef       	ldi	r25, 0xFF	; 255
    678a:	2b 96       	adiw	r28, 0x0b	; 11
    678c:	0f b6       	in	r0, 0x3f	; 63
    678e:	f8 94       	cli
    6790:	de bf       	out	0x3e, r29	; 62
    6792:	0f be       	out	0x3f, r0	; 63
    6794:	cd bf       	out	0x3d, r28	; 61
    6796:	df 91       	pop	r29
    6798:	cf 91       	pop	r28
    679a:	1f 91       	pop	r17
    679c:	0f 91       	pop	r16
    679e:	ff 90       	pop	r15
    67a0:	ef 90       	pop	r14
    67a2:	df 90       	pop	r13
    67a4:	cf 90       	pop	r12
    67a6:	bf 90       	pop	r11
    67a8:	af 90       	pop	r10
    67aa:	9f 90       	pop	r9
    67ac:	8f 90       	pop	r8
    67ae:	7f 90       	pop	r7
    67b0:	6f 90       	pop	r6
    67b2:	5f 90       	pop	r5
    67b4:	4f 90       	pop	r4
    67b6:	3f 90       	pop	r3
    67b8:	2f 90       	pop	r2
    67ba:	08 95       	ret

000067bc <strnlen_P>:
    67bc:	fc 01       	movw	r30, r24
    67be:	05 90       	lpm	r0, Z+
    67c0:	61 50       	subi	r22, 0x01	; 1
    67c2:	70 40       	sbci	r23, 0x00	; 0
    67c4:	01 10       	cpse	r0, r1
    67c6:	d8 f7       	brcc	.-10     	; 0x67be <strnlen_P+0x2>
    67c8:	80 95       	com	r24
    67ca:	90 95       	com	r25
    67cc:	8e 0f       	add	r24, r30
    67ce:	9f 1f       	adc	r25, r31
    67d0:	08 95       	ret

000067d2 <strnlen>:
    67d2:	fc 01       	movw	r30, r24
    67d4:	61 50       	subi	r22, 0x01	; 1
    67d6:	70 40       	sbci	r23, 0x00	; 0
    67d8:	01 90       	ld	r0, Z+
    67da:	01 10       	cpse	r0, r1
    67dc:	d8 f7       	brcc	.-10     	; 0x67d4 <strnlen+0x2>
    67de:	80 95       	com	r24
    67e0:	90 95       	com	r25
    67e2:	8e 0f       	add	r24, r30
    67e4:	9f 1f       	adc	r25, r31
    67e6:	08 95       	ret

000067e8 <fputc>:
    67e8:	0f 93       	push	r16
    67ea:	1f 93       	push	r17
    67ec:	cf 93       	push	r28
    67ee:	df 93       	push	r29
    67f0:	fb 01       	movw	r30, r22
    67f2:	23 81       	ldd	r18, Z+3	; 0x03
    67f4:	21 fd       	sbrc	r18, 1
    67f6:	03 c0       	rjmp	.+6      	; 0x67fe <fputc+0x16>
    67f8:	8f ef       	ldi	r24, 0xFF	; 255
    67fa:	9f ef       	ldi	r25, 0xFF	; 255
    67fc:	2c c0       	rjmp	.+88     	; 0x6856 <fputc+0x6e>
    67fe:	22 ff       	sbrs	r18, 2
    6800:	16 c0       	rjmp	.+44     	; 0x682e <fputc+0x46>
    6802:	46 81       	ldd	r20, Z+6	; 0x06
    6804:	57 81       	ldd	r21, Z+7	; 0x07
    6806:	24 81       	ldd	r18, Z+4	; 0x04
    6808:	35 81       	ldd	r19, Z+5	; 0x05
    680a:	42 17       	cp	r20, r18
    680c:	53 07       	cpc	r21, r19
    680e:	44 f4       	brge	.+16     	; 0x6820 <fputc+0x38>
    6810:	a0 81       	ld	r26, Z
    6812:	b1 81       	ldd	r27, Z+1	; 0x01
    6814:	9d 01       	movw	r18, r26
    6816:	2f 5f       	subi	r18, 0xFF	; 255
    6818:	3f 4f       	sbci	r19, 0xFF	; 255
    681a:	31 83       	std	Z+1, r19	; 0x01
    681c:	20 83       	st	Z, r18
    681e:	8c 93       	st	X, r24
    6820:	26 81       	ldd	r18, Z+6	; 0x06
    6822:	37 81       	ldd	r19, Z+7	; 0x07
    6824:	2f 5f       	subi	r18, 0xFF	; 255
    6826:	3f 4f       	sbci	r19, 0xFF	; 255
    6828:	37 83       	std	Z+7, r19	; 0x07
    682a:	26 83       	std	Z+6, r18	; 0x06
    682c:	14 c0       	rjmp	.+40     	; 0x6856 <fputc+0x6e>
    682e:	8b 01       	movw	r16, r22
    6830:	ec 01       	movw	r28, r24
    6832:	fb 01       	movw	r30, r22
    6834:	00 84       	ldd	r0, Z+8	; 0x08
    6836:	f1 85       	ldd	r31, Z+9	; 0x09
    6838:	e0 2d       	mov	r30, r0
    683a:	19 95       	eicall
    683c:	89 2b       	or	r24, r25
    683e:	e1 f6       	brne	.-72     	; 0x67f8 <fputc+0x10>
    6840:	d8 01       	movw	r26, r16
    6842:	16 96       	adiw	r26, 0x06	; 6
    6844:	8d 91       	ld	r24, X+
    6846:	9c 91       	ld	r25, X
    6848:	17 97       	sbiw	r26, 0x07	; 7
    684a:	01 96       	adiw	r24, 0x01	; 1
    684c:	17 96       	adiw	r26, 0x07	; 7
    684e:	9c 93       	st	X, r25
    6850:	8e 93       	st	-X, r24
    6852:	16 97       	sbiw	r26, 0x06	; 6
    6854:	ce 01       	movw	r24, r28
    6856:	df 91       	pop	r29
    6858:	cf 91       	pop	r28
    685a:	1f 91       	pop	r17
    685c:	0f 91       	pop	r16
    685e:	08 95       	ret

00006860 <__ultoa_invert>:
    6860:	fa 01       	movw	r30, r20
    6862:	aa 27       	eor	r26, r26
    6864:	28 30       	cpi	r18, 0x08	; 8
    6866:	51 f1       	breq	.+84     	; 0x68bc <__ultoa_invert+0x5c>
    6868:	20 31       	cpi	r18, 0x10	; 16
    686a:	81 f1       	breq	.+96     	; 0x68cc <__ultoa_invert+0x6c>
    686c:	e8 94       	clt
    686e:	6f 93       	push	r22
    6870:	6e 7f       	andi	r22, 0xFE	; 254
    6872:	6e 5f       	subi	r22, 0xFE	; 254
    6874:	7f 4f       	sbci	r23, 0xFF	; 255
    6876:	8f 4f       	sbci	r24, 0xFF	; 255
    6878:	9f 4f       	sbci	r25, 0xFF	; 255
    687a:	af 4f       	sbci	r26, 0xFF	; 255
    687c:	b1 e0       	ldi	r27, 0x01	; 1
    687e:	3e d0       	rcall	.+124    	; 0x68fc <__ultoa_invert+0x9c>
    6880:	b4 e0       	ldi	r27, 0x04	; 4
    6882:	3c d0       	rcall	.+120    	; 0x68fc <__ultoa_invert+0x9c>
    6884:	67 0f       	add	r22, r23
    6886:	78 1f       	adc	r23, r24
    6888:	89 1f       	adc	r24, r25
    688a:	9a 1f       	adc	r25, r26
    688c:	a1 1d       	adc	r26, r1
    688e:	68 0f       	add	r22, r24
    6890:	79 1f       	adc	r23, r25
    6892:	8a 1f       	adc	r24, r26
    6894:	91 1d       	adc	r25, r1
    6896:	a1 1d       	adc	r26, r1
    6898:	6a 0f       	add	r22, r26
    689a:	71 1d       	adc	r23, r1
    689c:	81 1d       	adc	r24, r1
    689e:	91 1d       	adc	r25, r1
    68a0:	a1 1d       	adc	r26, r1
    68a2:	20 d0       	rcall	.+64     	; 0x68e4 <__ultoa_invert+0x84>
    68a4:	09 f4       	brne	.+2      	; 0x68a8 <__ultoa_invert+0x48>
    68a6:	68 94       	set
    68a8:	3f 91       	pop	r19
    68aa:	2a e0       	ldi	r18, 0x0A	; 10
    68ac:	26 9f       	mul	r18, r22
    68ae:	11 24       	eor	r1, r1
    68b0:	30 19       	sub	r19, r0
    68b2:	30 5d       	subi	r19, 0xD0	; 208
    68b4:	31 93       	st	Z+, r19
    68b6:	de f6       	brtc	.-74     	; 0x686e <__ultoa_invert+0xe>
    68b8:	cf 01       	movw	r24, r30
    68ba:	08 95       	ret
    68bc:	46 2f       	mov	r20, r22
    68be:	47 70       	andi	r20, 0x07	; 7
    68c0:	40 5d       	subi	r20, 0xD0	; 208
    68c2:	41 93       	st	Z+, r20
    68c4:	b3 e0       	ldi	r27, 0x03	; 3
    68c6:	0f d0       	rcall	.+30     	; 0x68e6 <__ultoa_invert+0x86>
    68c8:	c9 f7       	brne	.-14     	; 0x68bc <__ultoa_invert+0x5c>
    68ca:	f6 cf       	rjmp	.-20     	; 0x68b8 <__ultoa_invert+0x58>
    68cc:	46 2f       	mov	r20, r22
    68ce:	4f 70       	andi	r20, 0x0F	; 15
    68d0:	40 5d       	subi	r20, 0xD0	; 208
    68d2:	4a 33       	cpi	r20, 0x3A	; 58
    68d4:	18 f0       	brcs	.+6      	; 0x68dc <__ultoa_invert+0x7c>
    68d6:	49 5d       	subi	r20, 0xD9	; 217
    68d8:	31 fd       	sbrc	r19, 1
    68da:	40 52       	subi	r20, 0x20	; 32
    68dc:	41 93       	st	Z+, r20
    68de:	02 d0       	rcall	.+4      	; 0x68e4 <__ultoa_invert+0x84>
    68e0:	a9 f7       	brne	.-22     	; 0x68cc <__ultoa_invert+0x6c>
    68e2:	ea cf       	rjmp	.-44     	; 0x68b8 <__ultoa_invert+0x58>
    68e4:	b4 e0       	ldi	r27, 0x04	; 4
    68e6:	a6 95       	lsr	r26
    68e8:	97 95       	ror	r25
    68ea:	87 95       	ror	r24
    68ec:	77 95       	ror	r23
    68ee:	67 95       	ror	r22
    68f0:	ba 95       	dec	r27
    68f2:	c9 f7       	brne	.-14     	; 0x68e6 <__ultoa_invert+0x86>
    68f4:	00 97       	sbiw	r24, 0x00	; 0
    68f6:	61 05       	cpc	r22, r1
    68f8:	71 05       	cpc	r23, r1
    68fa:	08 95       	ret
    68fc:	9b 01       	movw	r18, r22
    68fe:	ac 01       	movw	r20, r24
    6900:	0a 2e       	mov	r0, r26
    6902:	06 94       	lsr	r0
    6904:	57 95       	ror	r21
    6906:	47 95       	ror	r20
    6908:	37 95       	ror	r19
    690a:	27 95       	ror	r18
    690c:	ba 95       	dec	r27
    690e:	c9 f7       	brne	.-14     	; 0x6902 <__ultoa_invert+0xa2>
    6910:	62 0f       	add	r22, r18
    6912:	73 1f       	adc	r23, r19
    6914:	84 1f       	adc	r24, r20
    6916:	95 1f       	adc	r25, r21
    6918:	a0 1d       	adc	r26, r0
    691a:	08 95       	ret

0000691c <__divmodsi4>:
    691c:	05 2e       	mov	r0, r21
    691e:	97 fb       	bst	r25, 7
    6920:	16 f4       	brtc	.+4      	; 0x6926 <__divmodsi4+0xa>
    6922:	00 94       	com	r0
    6924:	0f d0       	rcall	.+30     	; 0x6944 <__negsi2>
    6926:	57 fd       	sbrc	r21, 7
    6928:	05 d0       	rcall	.+10     	; 0x6934 <__divmodsi4_neg2>
    692a:	a9 da       	rcall	.-2734   	; 0x5e7e <__udivmodsi4>
    692c:	07 fc       	sbrc	r0, 7
    692e:	02 d0       	rcall	.+4      	; 0x6934 <__divmodsi4_neg2>
    6930:	46 f4       	brtc	.+16     	; 0x6942 <__divmodsi4_exit>
    6932:	08 c0       	rjmp	.+16     	; 0x6944 <__negsi2>

00006934 <__divmodsi4_neg2>:
    6934:	50 95       	com	r21
    6936:	40 95       	com	r20
    6938:	30 95       	com	r19
    693a:	21 95       	neg	r18
    693c:	3f 4f       	sbci	r19, 0xFF	; 255
    693e:	4f 4f       	sbci	r20, 0xFF	; 255
    6940:	5f 4f       	sbci	r21, 0xFF	; 255

00006942 <__divmodsi4_exit>:
    6942:	08 95       	ret

00006944 <__negsi2>:
    6944:	90 95       	com	r25
    6946:	80 95       	com	r24
    6948:	70 95       	com	r23
    694a:	61 95       	neg	r22
    694c:	7f 4f       	sbci	r23, 0xFF	; 255
    694e:	8f 4f       	sbci	r24, 0xFF	; 255
    6950:	9f 4f       	sbci	r25, 0xFF	; 255
    6952:	08 95       	ret

00006954 <__muluhisi3>:
    6954:	0f d0       	rcall	.+30     	; 0x6974 <__umulhisi3>
    6956:	a5 9f       	mul	r26, r21
    6958:	90 0d       	add	r25, r0
    695a:	b4 9f       	mul	r27, r20
    695c:	90 0d       	add	r25, r0
    695e:	a4 9f       	mul	r26, r20
    6960:	80 0d       	add	r24, r0
    6962:	91 1d       	adc	r25, r1
    6964:	11 24       	eor	r1, r1
    6966:	08 95       	ret

00006968 <__mulshisi3>:
    6968:	b7 ff       	sbrs	r27, 7
    696a:	f4 cf       	rjmp	.-24     	; 0x6954 <__muluhisi3>

0000696c <__mulohisi3>:
    696c:	f3 df       	rcall	.-26     	; 0x6954 <__muluhisi3>
    696e:	82 1b       	sub	r24, r18
    6970:	93 0b       	sbc	r25, r19
    6972:	08 95       	ret

00006974 <__umulhisi3>:
    6974:	a2 9f       	mul	r26, r18
    6976:	b0 01       	movw	r22, r0
    6978:	b3 9f       	mul	r27, r19
    697a:	c0 01       	movw	r24, r0
    697c:	a3 9f       	mul	r26, r19
    697e:	70 0d       	add	r23, r0
    6980:	81 1d       	adc	r24, r1
    6982:	11 24       	eor	r1, r1
    6984:	91 1d       	adc	r25, r1
    6986:	b2 9f       	mul	r27, r18
    6988:	70 0d       	add	r23, r0
    698a:	81 1d       	adc	r24, r1
    698c:	11 24       	eor	r1, r1
    698e:	91 1d       	adc	r25, r1
    6990:	08 95       	ret

00006992 <_exit>:
    6992:	f8 94       	cli

00006994 <__stop_program>:
    6994:	ff cf       	rjmp	.-2      	; 0x6994 <__stop_program>
