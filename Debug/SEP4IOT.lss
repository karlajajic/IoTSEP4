
SEP4IOT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000005c0  00800200  000069f8  00006a8c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000069f8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000012c9  008007c0  008007c0  0000704c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000704c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000070a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000ca0  00000000  00000000  000070e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000fc65  00000000  00000000  00007d88  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004123  00000000  00000000  000179ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000075b1  00000000  00000000  0001bb10  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002b38  00000000  00000000  000230c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004871  00000000  00000000  00025bfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000e0c1  00000000  00000000  0002a46d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000c68  00000000  00000000  0003852e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	50 c2       	rjmp	.+1184   	; 0x4a2 <__ctors_end>
       2:	00 00       	nop
       4:	6f c2       	rjmp	.+1246   	; 0x4e4 <__bad_interrupt>
       6:	00 00       	nop
       8:	6d c2       	rjmp	.+1242   	; 0x4e4 <__bad_interrupt>
       a:	00 00       	nop
       c:	6b c2       	rjmp	.+1238   	; 0x4e4 <__bad_interrupt>
       e:	00 00       	nop
      10:	69 c2       	rjmp	.+1234   	; 0x4e4 <__bad_interrupt>
      12:	00 00       	nop
      14:	67 c2       	rjmp	.+1230   	; 0x4e4 <__bad_interrupt>
      16:	00 00       	nop
      18:	65 c2       	rjmp	.+1226   	; 0x4e4 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	63 c2       	rjmp	.+1222   	; 0x4e4 <__bad_interrupt>
      1e:	00 00       	nop
      20:	61 c2       	rjmp	.+1218   	; 0x4e4 <__bad_interrupt>
      22:	00 00       	nop
      24:	5f c2       	rjmp	.+1214   	; 0x4e4 <__bad_interrupt>
      26:	00 00       	nop
      28:	5d c2       	rjmp	.+1210   	; 0x4e4 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	5b c2       	rjmp	.+1206   	; 0x4e4 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 46 0e 	jmp	0x1c8c	; 0x1c8c <__vector_12>
      34:	57 c2       	rjmp	.+1198   	; 0x4e4 <__bad_interrupt>
      36:	00 00       	nop
      38:	55 c2       	rjmp	.+1194   	; 0x4e4 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	53 c2       	rjmp	.+1190   	; 0x4e4 <__bad_interrupt>
      3e:	00 00       	nop
      40:	51 c2       	rjmp	.+1186   	; 0x4e4 <__bad_interrupt>
      42:	00 00       	nop
      44:	4f c2       	rjmp	.+1182   	; 0x4e4 <__bad_interrupt>
      46:	00 00       	nop
      48:	4d c2       	rjmp	.+1178   	; 0x4e4 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	4b c2       	rjmp	.+1174   	; 0x4e4 <__bad_interrupt>
      4e:	00 00       	nop
      50:	49 c2       	rjmp	.+1170   	; 0x4e4 <__bad_interrupt>
      52:	00 00       	nop
      54:	47 c2       	rjmp	.+1166   	; 0x4e4 <__bad_interrupt>
      56:	00 00       	nop
      58:	45 c2       	rjmp	.+1162   	; 0x4e4 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	43 c2       	rjmp	.+1158   	; 0x4e4 <__bad_interrupt>
      5e:	00 00       	nop
      60:	41 c2       	rjmp	.+1154   	; 0x4e4 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 15 29 	jmp	0x522a	; 0x522a <__vector_25>
      68:	0c 94 67 29 	jmp	0x52ce	; 0x52ce <__vector_26>
      6c:	3b c2       	rjmp	.+1142   	; 0x4e4 <__bad_interrupt>
      6e:	00 00       	nop
      70:	39 c2       	rjmp	.+1138   	; 0x4e4 <__bad_interrupt>
      72:	00 00       	nop
      74:	37 c2       	rjmp	.+1134   	; 0x4e4 <__bad_interrupt>
      76:	00 00       	nop
      78:	35 c2       	rjmp	.+1130   	; 0x4e4 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	33 c2       	rjmp	.+1126   	; 0x4e4 <__bad_interrupt>
      7e:	00 00       	nop
      80:	31 c2       	rjmp	.+1122   	; 0x4e4 <__bad_interrupt>
      82:	00 00       	nop
      84:	2f c2       	rjmp	.+1118   	; 0x4e4 <__bad_interrupt>
      86:	00 00       	nop
      88:	2d c2       	rjmp	.+1114   	; 0x4e4 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	2b c2       	rjmp	.+1110   	; 0x4e4 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 ab 29 	jmp	0x5356	; 0x5356 <__vector_36>
      94:	0c 94 fd 29 	jmp	0x53fa	; 0x53fa <__vector_37>
      98:	25 c2       	rjmp	.+1098   	; 0x4e4 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 95 2c 	jmp	0x592a	; 0x592a <__vector_39>
      a0:	21 c2       	rjmp	.+1090   	; 0x4e4 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	1f c2       	rjmp	.+1086   	; 0x4e4 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	1d c2       	rjmp	.+1082   	; 0x4e4 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	1b c2       	rjmp	.+1078   	; 0x4e4 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	19 c2       	rjmp	.+1074   	; 0x4e4 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	17 c2       	rjmp	.+1070   	; 0x4e4 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	15 c2       	rjmp	.+1066   	; 0x4e4 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	13 c2       	rjmp	.+1062   	; 0x4e4 <__bad_interrupt>
      be:	00 00       	nop
      c0:	11 c2       	rjmp	.+1058   	; 0x4e4 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	0f c2       	rjmp	.+1054   	; 0x4e4 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	0d c2       	rjmp	.+1050   	; 0x4e4 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 41 2a 	jmp	0x5482	; 0x5482 <__vector_51>
      d0:	0c 94 93 2a 	jmp	0x5526	; 0x5526 <__vector_52>
      d4:	07 c2       	rjmp	.+1038   	; 0x4e4 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 d7 2a 	jmp	0x55ae	; 0x55ae <__vector_54>
      dc:	0c 94 29 2b 	jmp	0x5652	; 0x5652 <__vector_55>
      e0:	01 c2       	rjmp	.+1026   	; 0x4e4 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	c6 01       	movw	r24, r12
      e6:	c6 01       	movw	r24, r12
      e8:	c6 01       	movw	r24, r12
      ea:	00 02       	muls	r16, r16
      ec:	08 02       	muls	r16, r24
      ee:	1e 02       	muls	r17, r30
      f0:	c6 01       	movw	r24, r12
      f2:	c6 01       	movw	r24, r12
      f4:	00 02       	muls	r16, r16
      f6:	08 02       	muls	r16, r24
      f8:	b7 2c       	mov	r11, r7
      fa:	27 2d       	mov	r18, r7
      fc:	27 2d       	mov	r18, r7
      fe:	27 2d       	mov	r18, r7
     100:	27 2d       	mov	r18, r7
     102:	27 2d       	mov	r18, r7
     104:	27 2d       	mov	r18, r7
     106:	27 2d       	mov	r18, r7
     108:	b7 2c       	mov	r11, r7
     10a:	27 2d       	mov	r18, r7
     10c:	27 2d       	mov	r18, r7
     10e:	27 2d       	mov	r18, r7
     110:	27 2d       	mov	r18, r7
     112:	27 2d       	mov	r18, r7
     114:	27 2d       	mov	r18, r7
     116:	27 2d       	mov	r18, r7
     118:	b9 2c       	mov	r11, r9
     11a:	27 2d       	mov	r18, r7
     11c:	27 2d       	mov	r18, r7
     11e:	27 2d       	mov	r18, r7
     120:	27 2d       	mov	r18, r7
     122:	27 2d       	mov	r18, r7
     124:	27 2d       	mov	r18, r7
     126:	27 2d       	mov	r18, r7
     128:	27 2d       	mov	r18, r7
     12a:	27 2d       	mov	r18, r7
     12c:	27 2d       	mov	r18, r7
     12e:	27 2d       	mov	r18, r7
     130:	27 2d       	mov	r18, r7
     132:	27 2d       	mov	r18, r7
     134:	27 2d       	mov	r18, r7
     136:	27 2d       	mov	r18, r7
     138:	b9 2c       	mov	r11, r9
     13a:	27 2d       	mov	r18, r7
     13c:	27 2d       	mov	r18, r7
     13e:	27 2d       	mov	r18, r7
     140:	27 2d       	mov	r18, r7
     142:	27 2d       	mov	r18, r7
     144:	27 2d       	mov	r18, r7
     146:	27 2d       	mov	r18, r7
     148:	27 2d       	mov	r18, r7
     14a:	27 2d       	mov	r18, r7
     14c:	27 2d       	mov	r18, r7
     14e:	27 2d       	mov	r18, r7
     150:	27 2d       	mov	r18, r7
     152:	27 2d       	mov	r18, r7
     154:	27 2d       	mov	r18, r7
     156:	27 2d       	mov	r18, r7
     158:	23 2d       	mov	r18, r3
     15a:	27 2d       	mov	r18, r7
     15c:	27 2d       	mov	r18, r7
     15e:	27 2d       	mov	r18, r7
     160:	27 2d       	mov	r18, r7
     162:	27 2d       	mov	r18, r7
     164:	27 2d       	mov	r18, r7
     166:	27 2d       	mov	r18, r7
     168:	ee 2c       	mov	r14, r14
     16a:	27 2d       	mov	r18, r7
     16c:	27 2d       	mov	r18, r7
     16e:	27 2d       	mov	r18, r7
     170:	27 2d       	mov	r18, r7
     172:	27 2d       	mov	r18, r7
     174:	27 2d       	mov	r18, r7
     176:	27 2d       	mov	r18, r7
     178:	27 2d       	mov	r18, r7
     17a:	27 2d       	mov	r18, r7
     17c:	27 2d       	mov	r18, r7
     17e:	27 2d       	mov	r18, r7
     180:	27 2d       	mov	r18, r7
     182:	27 2d       	mov	r18, r7
     184:	27 2d       	mov	r18, r7
     186:	27 2d       	mov	r18, r7
     188:	e2 2c       	mov	r14, r2
     18a:	27 2d       	mov	r18, r7
     18c:	27 2d       	mov	r18, r7
     18e:	27 2d       	mov	r18, r7
     190:	27 2d       	mov	r18, r7
     192:	27 2d       	mov	r18, r7
     194:	27 2d       	mov	r18, r7
     196:	27 2d       	mov	r18, r7
     198:	06 2d       	mov	r16, r6

0000019a <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     19a:	09 e6       	ldi	r16, 0x69	; 105
     19c:	18 e1       	ldi	r17, 0x18	; 24
     19e:	0f 2e       	mov	r0, r31
     1a0:	f9 e9       	ldi	r31, 0x99	; 153
     1a2:	ef 2e       	mov	r14, r31
     1a4:	f8 e1       	ldi	r31, 0x18	; 24
     1a6:	ff 2e       	mov	r15, r31
     1a8:	f0 2d       	mov	r31, r0
     1aa:	80 91 68 18 	lds	r24, 0x1868	; 0x801868 <uxDeletedTasksWaitingCleanUp>
     1ae:	88 23       	and	r24, r24
     1b0:	29 f1       	breq	.+74     	; 0x1fc <prvIdleTask+0x62>
     1b2:	0f b6       	in	r0, 0x3f	; 63
     1b4:	f8 94       	cli
     1b6:	0f 92       	push	r0
     1b8:	d8 01       	movw	r26, r16
     1ba:	17 96       	adiw	r26, 0x07	; 7
     1bc:	ed 91       	ld	r30, X+
     1be:	fc 91       	ld	r31, X
     1c0:	18 97       	sbiw	r26, 0x08	; 8
     1c2:	c0 85       	ldd	r28, Z+8	; 0x08
     1c4:	d1 85       	ldd	r29, Z+9	; 0x09
     1c6:	ce 01       	movw	r24, r28
     1c8:	02 96       	adiw	r24, 0x02	; 2
     1ca:	0e 94 ab 0c 	call	0x1956	; 0x1956 <uxListRemove>
     1ce:	80 91 5c 18 	lds	r24, 0x185C	; 0x80185c <uxCurrentNumberOfTasks>
     1d2:	81 50       	subi	r24, 0x01	; 1
     1d4:	80 93 5c 18 	sts	0x185C, r24	; 0x80185c <uxCurrentNumberOfTasks>
     1d8:	80 91 68 18 	lds	r24, 0x1868	; 0x801868 <uxDeletedTasksWaitingCleanUp>
     1dc:	81 50       	subi	r24, 0x01	; 1
     1de:	80 93 68 18 	sts	0x1868, r24	; 0x801868 <uxDeletedTasksWaitingCleanUp>
     1e2:	0f 90       	pop	r0
     1e4:	0f be       	out	0x3f, r0	; 63
     1e6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     1e8:	9c 8d       	ldd	r25, Y+28	; 0x1c
     1ea:	0e 94 07 0c 	call	0x180e	; 0x180e <vPortFree>
     1ee:	ce 01       	movw	r24, r28
     1f0:	0e 94 07 0c 	call	0x180e	; 0x180e <vPortFree>
     1f4:	80 91 68 18 	lds	r24, 0x1868	; 0x801868 <uxDeletedTasksWaitingCleanUp>
     1f8:	81 11       	cpse	r24, r1
     1fa:	db cf       	rjmp	.-74     	; 0x1b2 <prvIdleTask+0x18>
     1fc:	f7 01       	movw	r30, r14
     1fe:	80 81       	ld	r24, Z
     200:	82 30       	cpi	r24, 0x02	; 2
     202:	10 f0       	brcs	.+4      	; 0x208 <prvIdleTask+0x6e>
     204:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <vPortYield>
     208:	0e 94 98 1e 	call	0x3d30	; 0x3d30 <vApplicationIdleHook>
     20c:	ce cf       	rjmp	.-100    	; 0x1aa <prvIdleTask+0x10>

0000020e <prvTimerTask>:
            pxNewTimer->ucStatus = 0x00;
            prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
        }

        return pxNewTimer;
    }
     20e:	cf 93       	push	r28
     210:	df 93       	push	r29
     212:	cd b7       	in	r28, 0x3d	; 61
     214:	de b7       	in	r29, 0x3e	; 62
     216:	60 97       	sbiw	r28, 0x10	; 16
     218:	0f b6       	in	r0, 0x3f	; 63
     21a:	f8 94       	cli
     21c:	de bf       	out	0x3e, r29	; 62
     21e:	0f be       	out	0x3f, r0	; 63
     220:	cd bf       	out	0x3d, r28	; 61
     222:	ce 01       	movw	r24, r28
     224:	01 96       	adiw	r24, 0x01	; 1
     226:	9a 87       	std	Y+10, r25	; 0x0a
     228:	89 87       	std	Y+9, r24	; 0x09
     22a:	81 2c       	mov	r8, r1
     22c:	91 2c       	mov	r9, r1
     22e:	a1 2c       	mov	r10, r1
     230:	b1 2c       	mov	r11, r1
     232:	69 84       	ldd	r6, Y+9	; 0x09
     234:	7a 84       	ldd	r7, Y+10	; 0x0a
     236:	e0 91 d1 18 	lds	r30, 0x18D1	; 0x8018d1 <pxCurrentTimerList>
     23a:	f0 91 d2 18 	lds	r31, 0x18D2	; 0x8018d2 <pxCurrentTimerList+0x1>
     23e:	80 81       	ld	r24, Z
     240:	88 23       	and	r24, r24
     242:	09 f4       	brne	.+2      	; 0x246 <prvTimerTask+0x38>
     244:	14 c1       	rjmp	.+552    	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
     246:	07 80       	ldd	r0, Z+7	; 0x07
     248:	f0 85       	ldd	r31, Z+8	; 0x08
     24a:	e0 2d       	mov	r30, r0
     24c:	20 80       	ld	r2, Z
     24e:	31 80       	ldd	r3, Z+1	; 0x01
     250:	42 80       	ldd	r4, Z+2	; 0x02
     252:	53 80       	ldd	r5, Z+3	; 0x03
     254:	0e 94 dd 16 	call	0x2dba	; 0x2dba <vTaskSuspendAll>
     258:	ce 01       	movw	r24, r28
     25a:	01 96       	adiw	r24, 0x01	; 1
     25c:	0e 94 02 1e 	call	0x3c04	; 0x3c04 <prvSampleTimeNow>
     260:	6b 87       	std	Y+11, r22	; 0x0b
     262:	7c 87       	std	Y+12, r23	; 0x0c
     264:	8d 87       	std	Y+13, r24	; 0x0d
     266:	9e 87       	std	Y+14, r25	; 0x0e
     268:	89 81       	ldd	r24, Y+1	; 0x01
     26a:	81 11       	cpse	r24, r1
     26c:	67 c0       	rjmp	.+206    	; 0x33c <prvTimerTask+0x12e>
     26e:	8b 85       	ldd	r24, Y+11	; 0x0b
     270:	9c 85       	ldd	r25, Y+12	; 0x0c
     272:	ad 85       	ldd	r26, Y+13	; 0x0d
     274:	be 85       	ldd	r27, Y+14	; 0x0e
     276:	82 15       	cp	r24, r2
     278:	93 05       	cpc	r25, r3
     27a:	a4 05       	cpc	r26, r4
     27c:	b5 05       	cpc	r27, r5
     27e:	08 f4       	brcc	.+2      	; 0x282 <prvTimerTask+0x74>
     280:	45 c0       	rjmp	.+138    	; 0x30c <prvTimerTask+0xfe>
     282:	0e 94 c6 17 	call	0x2f8c	; 0x2f8c <xTaskResumeAll>
     286:	e0 91 d1 18 	lds	r30, 0x18D1	; 0x8018d1 <pxCurrentTimerList>
     28a:	f0 91 d2 18 	lds	r31, 0x18D2	; 0x8018d2 <pxCurrentTimerList+0x1>
     28e:	07 80       	ldd	r0, Z+7	; 0x07
     290:	f0 85       	ldd	r31, Z+8	; 0x08
     292:	e0 2d       	mov	r30, r0
     294:	a0 85       	ldd	r26, Z+8	; 0x08
     296:	b1 85       	ldd	r27, Z+9	; 0x09
     298:	b8 8b       	std	Y+16, r27	; 0x10
     29a:	af 87       	std	Y+15, r26	; 0x0f
     29c:	cd 01       	movw	r24, r26
     29e:	02 96       	adiw	r24, 0x02	; 2
     2a0:	0e 94 ab 0c 	call	0x1956	; 0x1956 <uxListRemove>
     2a4:	ef 85       	ldd	r30, Y+15	; 0x0f
     2a6:	f8 89       	ldd	r31, Y+16	; 0x10
     2a8:	87 89       	ldd	r24, Z+23	; 0x17
     2aa:	82 ff       	sbrs	r24, 2
     2ac:	21 c0       	rjmp	.+66     	; 0x2f0 <prvTimerTask+0xe2>
     2ae:	46 85       	ldd	r20, Z+14	; 0x0e
     2b0:	57 85       	ldd	r21, Z+15	; 0x0f
     2b2:	60 89       	ldd	r22, Z+16	; 0x10
     2b4:	71 89       	ldd	r23, Z+17	; 0x11
     2b6:	42 0d       	add	r20, r2
     2b8:	53 1d       	adc	r21, r3
     2ba:	64 1d       	adc	r22, r4
     2bc:	75 1d       	adc	r23, r5
     2be:	72 01       	movw	r14, r4
     2c0:	61 01       	movw	r12, r2
     2c2:	0b 85       	ldd	r16, Y+11	; 0x0b
     2c4:	1c 85       	ldd	r17, Y+12	; 0x0c
     2c6:	2d 85       	ldd	r18, Y+13	; 0x0d
     2c8:	3e 85       	ldd	r19, Y+14	; 0x0e
     2ca:	cf 01       	movw	r24, r30
     2cc:	0e 94 11 1d 	call	0x3a22	; 0x3a22 <prvInsertTimerInActiveList>
     2d0:	88 23       	and	r24, r24
     2d2:	99 f0       	breq	.+38     	; 0x2fa <prvTimerTask+0xec>
     2d4:	c8 2c       	mov	r12, r8
     2d6:	d9 2c       	mov	r13, r9
     2d8:	ea 2c       	mov	r14, r10
     2da:	fb 2c       	mov	r15, r11
     2dc:	00 e0       	ldi	r16, 0x00	; 0
     2de:	10 e0       	ldi	r17, 0x00	; 0
     2e0:	a2 01       	movw	r20, r4
     2e2:	91 01       	movw	r18, r2
     2e4:	60 e0       	ldi	r22, 0x00	; 0
     2e6:	8f 85       	ldd	r24, Y+15	; 0x0f
     2e8:	98 89       	ldd	r25, Y+16	; 0x10
     2ea:	0e 94 a4 1d 	call	0x3b48	; 0x3b48 <xTimerGenericCommand>
     2ee:	05 c0       	rjmp	.+10     	; 0x2fa <prvTimerTask+0xec>
     2f0:	8e 7f       	andi	r24, 0xFE	; 254
     2f2:	af 85       	ldd	r26, Y+15	; 0x0f
     2f4:	b8 89       	ldd	r27, Y+16	; 0x10
     2f6:	57 96       	adiw	r26, 0x17	; 23
     2f8:	8c 93       	st	X, r24
     2fa:	af 85       	ldd	r26, Y+15	; 0x0f
     2fc:	b8 89       	ldd	r27, Y+16	; 0x10
     2fe:	54 96       	adiw	r26, 0x14	; 20
     300:	ed 91       	ld	r30, X+
     302:	fc 91       	ld	r31, X
     304:	55 97       	sbiw	r26, 0x15	; 21
     306:	cd 01       	movw	r24, r26
     308:	19 95       	eicall
     30a:	a2 c0       	rjmp	.+324    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     30c:	20 e0       	ldi	r18, 0x00	; 0
     30e:	b2 01       	movw	r22, r4
     310:	a1 01       	movw	r20, r2
     312:	8b 85       	ldd	r24, Y+11	; 0x0b
     314:	9c 85       	ldd	r25, Y+12	; 0x0c
     316:	ad 85       	ldd	r26, Y+13	; 0x0d
     318:	be 85       	ldd	r27, Y+14	; 0x0e
     31a:	48 1b       	sub	r20, r24
     31c:	59 0b       	sbc	r21, r25
     31e:	6a 0b       	sbc	r22, r26
     320:	7b 0b       	sbc	r23, r27
     322:	80 91 cd 18 	lds	r24, 0x18CD	; 0x8018cd <xTimerQueue>
     326:	90 91 ce 18 	lds	r25, 0x18CE	; 0x8018ce <xTimerQueue+0x1>
     32a:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <vQueueWaitForMessageRestricted>
     32e:	0e 94 c6 17 	call	0x2f8c	; 0x2f8c <xTaskResumeAll>
     332:	81 11       	cpse	r24, r1
     334:	8d c0       	rjmp	.+282    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     336:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <vPortYield>
     33a:	8a c0       	rjmp	.+276    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     33c:	0e 94 c6 17 	call	0x2f8c	; 0x2f8c <xTaskResumeAll>
     340:	87 c0       	rjmp	.+270    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     342:	89 81       	ldd	r24, Y+1	; 0x01
     344:	88 23       	and	r24, r24
     346:	0c f4       	brge	.+2      	; 0x34a <prvTimerTask+0x13c>
     348:	83 c0       	rjmp	.+262    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     34a:	4e 80       	ldd	r4, Y+6	; 0x06
     34c:	5f 80       	ldd	r5, Y+7	; 0x07
     34e:	d2 01       	movw	r26, r4
     350:	1c 96       	adiw	r26, 0x0c	; 12
     352:	8d 91       	ld	r24, X+
     354:	9c 91       	ld	r25, X
     356:	1d 97       	sbiw	r26, 0x0d	; 13
     358:	89 2b       	or	r24, r25
     35a:	21 f0       	breq	.+8      	; 0x364 <prvTimerTask+0x156>
     35c:	c2 01       	movw	r24, r4
     35e:	02 96       	adiw	r24, 0x02	; 2
     360:	0e 94 ab 0c 	call	0x1956	; 0x1956 <uxListRemove>
     364:	ce 01       	movw	r24, r28
     366:	08 96       	adiw	r24, 0x08	; 8
     368:	0e 94 02 1e 	call	0x3c04	; 0x3c04 <prvSampleTimeNow>
     36c:	8b 01       	movw	r16, r22
     36e:	9c 01       	movw	r18, r24
     370:	e9 81       	ldd	r30, Y+1	; 0x01
     372:	0e 2e       	mov	r0, r30
     374:	00 0c       	add	r0, r0
     376:	ff 0b       	sbc	r31, r31
     378:	ea 30       	cpi	r30, 0x0A	; 10
     37a:	f1 05       	cpc	r31, r1
     37c:	08 f0       	brcs	.+2      	; 0x380 <prvTimerTask+0x172>
     37e:	68 c0       	rjmp	.+208    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     380:	88 27       	eor	r24, r24
     382:	ee 58       	subi	r30, 0x8E	; 142
     384:	ff 4f       	sbci	r31, 0xFF	; 255
     386:	8f 4f       	sbci	r24, 0xFF	; 255
     388:	0c 94 92 2f 	jmp	0x5f24	; 0x5f24 <__tablejump2__>
     38c:	f2 01       	movw	r30, r4
     38e:	87 89       	ldd	r24, Z+23	; 0x17
     390:	81 60       	ori	r24, 0x01	; 1
     392:	87 8b       	std	Z+23, r24	; 0x17
     394:	ca 80       	ldd	r12, Y+2	; 0x02
     396:	db 80       	ldd	r13, Y+3	; 0x03
     398:	ec 80       	ldd	r14, Y+4	; 0x04
     39a:	fd 80       	ldd	r15, Y+5	; 0x05
     39c:	46 85       	ldd	r20, Z+14	; 0x0e
     39e:	57 85       	ldd	r21, Z+15	; 0x0f
     3a0:	60 89       	ldd	r22, Z+16	; 0x10
     3a2:	71 89       	ldd	r23, Z+17	; 0x11
     3a4:	4c 0d       	add	r20, r12
     3a6:	5d 1d       	adc	r21, r13
     3a8:	6e 1d       	adc	r22, r14
     3aa:	7f 1d       	adc	r23, r15
     3ac:	c2 01       	movw	r24, r4
     3ae:	0e 94 11 1d 	call	0x3a22	; 0x3a22 <prvInsertTimerInActiveList>
     3b2:	88 23       	and	r24, r24
     3b4:	09 f4       	brne	.+2      	; 0x3b8 <prvTimerTask+0x1aa>
     3b6:	4c c0       	rjmp	.+152    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     3b8:	d2 01       	movw	r26, r4
     3ba:	54 96       	adiw	r26, 0x14	; 20
     3bc:	ed 91       	ld	r30, X+
     3be:	fc 91       	ld	r31, X
     3c0:	55 97       	sbiw	r26, 0x15	; 21
     3c2:	c2 01       	movw	r24, r4
     3c4:	19 95       	eicall
     3c6:	f2 01       	movw	r30, r4
     3c8:	87 89       	ldd	r24, Z+23	; 0x17
     3ca:	82 ff       	sbrs	r24, 2
     3cc:	41 c0       	rjmp	.+130    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     3ce:	4a 81       	ldd	r20, Y+2	; 0x02
     3d0:	5b 81       	ldd	r21, Y+3	; 0x03
     3d2:	6c 81       	ldd	r22, Y+4	; 0x04
     3d4:	7d 81       	ldd	r23, Y+5	; 0x05
     3d6:	86 85       	ldd	r24, Z+14	; 0x0e
     3d8:	97 85       	ldd	r25, Z+15	; 0x0f
     3da:	a0 89       	ldd	r26, Z+16	; 0x10
     3dc:	b1 89       	ldd	r27, Z+17	; 0x11
     3de:	9a 01       	movw	r18, r20
     3e0:	ab 01       	movw	r20, r22
     3e2:	28 0f       	add	r18, r24
     3e4:	39 1f       	adc	r19, r25
     3e6:	4a 1f       	adc	r20, r26
     3e8:	5b 1f       	adc	r21, r27
     3ea:	c8 2c       	mov	r12, r8
     3ec:	d9 2c       	mov	r13, r9
     3ee:	ea 2c       	mov	r14, r10
     3f0:	fb 2c       	mov	r15, r11
     3f2:	00 e0       	ldi	r16, 0x00	; 0
     3f4:	10 e0       	ldi	r17, 0x00	; 0
     3f6:	60 e0       	ldi	r22, 0x00	; 0
     3f8:	c2 01       	movw	r24, r4
     3fa:	0e 94 a4 1d 	call	0x3b48	; 0x3b48 <xTimerGenericCommand>
     3fe:	28 c0       	rjmp	.+80     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     400:	d2 01       	movw	r26, r4
     402:	57 96       	adiw	r26, 0x17	; 23
     404:	8c 91       	ld	r24, X
     406:	57 97       	sbiw	r26, 0x17	; 23
     408:	8e 7f       	andi	r24, 0xFE	; 254
     40a:	57 96       	adiw	r26, 0x17	; 23
     40c:	8c 93       	st	X, r24
     40e:	20 c0       	rjmp	.+64     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     410:	f2 01       	movw	r30, r4
     412:	87 89       	ldd	r24, Z+23	; 0x17
     414:	81 60       	ori	r24, 0x01	; 1
     416:	87 8b       	std	Z+23, r24	; 0x17
     418:	4a 81       	ldd	r20, Y+2	; 0x02
     41a:	5b 81       	ldd	r21, Y+3	; 0x03
     41c:	6c 81       	ldd	r22, Y+4	; 0x04
     41e:	7d 81       	ldd	r23, Y+5	; 0x05
     420:	46 87       	std	Z+14, r20	; 0x0e
     422:	57 87       	std	Z+15, r21	; 0x0f
     424:	60 8b       	std	Z+16, r22	; 0x10
     426:	71 8b       	std	Z+17, r23	; 0x11
     428:	40 0f       	add	r20, r16
     42a:	51 1f       	adc	r21, r17
     42c:	62 1f       	adc	r22, r18
     42e:	73 1f       	adc	r23, r19
     430:	68 01       	movw	r12, r16
     432:	79 01       	movw	r14, r18
     434:	c2 01       	movw	r24, r4
     436:	0e 94 11 1d 	call	0x3a22	; 0x3a22 <prvInsertTimerInActiveList>
     43a:	0a c0       	rjmp	.+20     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     43c:	f2 01       	movw	r30, r4
     43e:	87 89       	ldd	r24, Z+23	; 0x17
     440:	81 fd       	sbrc	r24, 1
     442:	04 c0       	rjmp	.+8      	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
     444:	c2 01       	movw	r24, r4
     446:	0e 94 07 0c 	call	0x180e	; 0x180e <vPortFree>
     44a:	02 c0       	rjmp	.+4      	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     44c:	8e 7f       	andi	r24, 0xFE	; 254
     44e:	87 8b       	std	Z+23, r24	; 0x17
     450:	28 2d       	mov	r18, r8
     452:	39 2d       	mov	r19, r9
     454:	4a 2d       	mov	r20, r10
     456:	5b 2d       	mov	r21, r11
     458:	66 2d       	mov	r22, r6
     45a:	77 2d       	mov	r23, r7
     45c:	80 91 cd 18 	lds	r24, 0x18CD	; 0x8018cd <xTimerQueue>
     460:	90 91 ce 18 	lds	r25, 0x18CE	; 0x8018ce <xTimerQueue+0x1>
     464:	0e 94 7e 10 	call	0x20fc	; 0x20fc <xQueueReceive>
     468:	81 11       	cpse	r24, r1
     46a:	6b cf       	rjmp	.-298    	; 0x342 <prvTimerTask+0x134>
     46c:	e4 ce       	rjmp	.-568    	; 0x236 <prvTimerTask+0x28>
     46e:	0e 94 dd 16 	call	0x2dba	; 0x2dba <vTaskSuspendAll>
     472:	ce 01       	movw	r24, r28
     474:	01 96       	adiw	r24, 0x01	; 1
     476:	0e 94 02 1e 	call	0x3c04	; 0x3c04 <prvSampleTimeNow>
     47a:	6b 87       	std	Y+11, r22	; 0x0b
     47c:	7c 87       	std	Y+12, r23	; 0x0c
     47e:	8d 87       	std	Y+13, r24	; 0x0d
     480:	9e 87       	std	Y+14, r25	; 0x0e
     482:	89 81       	ldd	r24, Y+1	; 0x01
     484:	81 11       	cpse	r24, r1
     486:	5a cf       	rjmp	.-332    	; 0x33c <prvTimerTask+0x12e>
     488:	e0 91 cf 18 	lds	r30, 0x18CF	; 0x8018cf <pxOverflowTimerList>
     48c:	f0 91 d0 18 	lds	r31, 0x18D0	; 0x8018d0 <pxOverflowTimerList+0x1>
     490:	80 81       	ld	r24, Z
     492:	21 e0       	ldi	r18, 0x01	; 1
     494:	81 11       	cpse	r24, r1
     496:	20 e0       	ldi	r18, 0x00	; 0
     498:	28 2c       	mov	r2, r8
     49a:	39 2c       	mov	r3, r9
     49c:	4a 2c       	mov	r4, r10
     49e:	5b 2c       	mov	r5, r11
     4a0:	36 cf       	rjmp	.-404    	; 0x30e <prvTimerTask+0x100>

000004a2 <__ctors_end>:
     4a2:	11 24       	eor	r1, r1
     4a4:	1f be       	out	0x3f, r1	; 63
     4a6:	cf ef       	ldi	r28, 0xFF	; 255
     4a8:	d1 e2       	ldi	r29, 0x21	; 33
     4aa:	de bf       	out	0x3e, r29	; 62
     4ac:	cd bf       	out	0x3d, r28	; 61
     4ae:	00 e0       	ldi	r16, 0x00	; 0
     4b0:	0c bf       	out	0x3c, r16	; 60

000004b2 <__do_copy_data>:
     4b2:	17 e0       	ldi	r17, 0x07	; 7
     4b4:	a0 e0       	ldi	r26, 0x00	; 0
     4b6:	b2 e0       	ldi	r27, 0x02	; 2
     4b8:	e8 ef       	ldi	r30, 0xF8	; 248
     4ba:	f9 e6       	ldi	r31, 0x69	; 105
     4bc:	00 e0       	ldi	r16, 0x00	; 0
     4be:	0b bf       	out	0x3b, r16	; 59
     4c0:	02 c0       	rjmp	.+4      	; 0x4c6 <__do_copy_data+0x14>
     4c2:	07 90       	elpm	r0, Z+
     4c4:	0d 92       	st	X+, r0
     4c6:	a0 3c       	cpi	r26, 0xC0	; 192
     4c8:	b1 07       	cpc	r27, r17
     4ca:	d9 f7       	brne	.-10     	; 0x4c2 <__do_copy_data+0x10>

000004cc <__do_clear_bss>:
     4cc:	2a e1       	ldi	r18, 0x1A	; 26
     4ce:	a0 ec       	ldi	r26, 0xC0	; 192
     4d0:	b7 e0       	ldi	r27, 0x07	; 7
     4d2:	01 c0       	rjmp	.+2      	; 0x4d6 <.do_clear_bss_start>

000004d4 <.do_clear_bss_loop>:
     4d4:	1d 92       	st	X+, r1

000004d6 <.do_clear_bss_start>:
     4d6:	a9 38       	cpi	r26, 0x89	; 137
     4d8:	b2 07       	cpc	r27, r18
     4da:	e1 f7       	brne	.-8      	; 0x4d4 <.do_clear_bss_loop>
     4dc:	0e 94 8e 1f 	call	0x3f1c	; 0x3f1c <main>
     4e0:	0c 94 fa 34 	jmp	0x69f4	; 0x69f4 <_exit>

000004e4 <__bad_interrupt>:
     4e4:	8d cd       	rjmp	.-1254   	; 0x0 <__vectors>

000004e6 <time>:
     4e6:	fc 01       	movw	r30, r24
     4e8:	0f b6       	in	r0, 0x3f	; 63
     4ea:	f8 94       	cli
     4ec:	60 91 85 1a 	lds	r22, 0x1A85	; 0x801a85 <__system_time>
     4f0:	70 91 86 1a 	lds	r23, 0x1A86	; 0x801a86 <__system_time+0x1>
     4f4:	80 91 87 1a 	lds	r24, 0x1A87	; 0x801a87 <__system_time+0x2>
     4f8:	90 91 88 1a 	lds	r25, 0x1A88	; 0x801a88 <__system_time+0x3>
     4fc:	0f be       	out	0x3f, r0	; 63
     4fe:	30 97       	sbiw	r30, 0x00	; 0
     500:	21 f0       	breq	.+8      	; 0x50a <time+0x24>
     502:	60 83       	st	Z, r22
     504:	71 83       	std	Z+1, r23	; 0x01
     506:	82 83       	std	Z+2, r24	; 0x02
     508:	93 83       	std	Z+3, r25	; 0x03
     50a:	08 95       	ret

0000050c <co2Reader_create>:
void co2Reader_destroy(co2reader_t self) {
	if (self == NULL)
		return;
	vTaskDelete(self->handleTask);
	vPortFree(self);
}
     50c:	2f 92       	push	r2
     50e:	3f 92       	push	r3
     510:	4f 92       	push	r4
     512:	5f 92       	push	r5
     514:	6f 92       	push	r6
     516:	7f 92       	push	r7
     518:	8f 92       	push	r8
     51a:	9f 92       	push	r9
     51c:	af 92       	push	r10
     51e:	bf 92       	push	r11
     520:	cf 92       	push	r12
     522:	df 92       	push	r13
     524:	ef 92       	push	r14
     526:	ff 92       	push	r15
     528:	0f 93       	push	r16
     52a:	1f 93       	push	r17
     52c:	cf 93       	push	r28
     52e:	df 93       	push	r29
     530:	d8 2f       	mov	r29, r24
     532:	c6 2f       	mov	r28, r22
     534:	1a 01       	movw	r2, r20
     536:	28 01       	movw	r4, r16
     538:	39 01       	movw	r6, r18
     53a:	87 01       	movw	r16, r14
     53c:	64 e0       	ldi	r22, 0x04	; 4
     53e:	70 e0       	ldi	r23, 0x00	; 0
     540:	81 e0       	ldi	r24, 0x01	; 1
     542:	90 e0       	ldi	r25, 0x00	; 0
     544:	0e 94 ae 2f 	call	0x5f5c	; 0x5f5c <calloc>
     548:	4c 01       	movw	r8, r24
     54a:	89 2b       	or	r24, r25
     54c:	69 f1       	breq	.+90     	; 0x5a8 <co2Reader_create+0x9c>
     54e:	f4 01       	movw	r30, r8
     550:	11 92       	st	Z+, r1
     552:	11 92       	st	Z+, r1
     554:	7f 01       	movw	r14, r30
     556:	30 92 cb 07 	sts	0x07CB, r3	; 0x8007cb <_startMeasureEventGroup+0x1>
     55a:	20 92 ca 07 	sts	0x07CA, r2	; 0x8007ca <_startMeasureEventGroup>
     55e:	40 92 c6 07 	sts	0x07C6, r4	; 0x8007c6 <_startMeasureBit>
     562:	50 92 c7 07 	sts	0x07C7, r5	; 0x8007c7 <_startMeasureBit+0x1>
     566:	60 92 c8 07 	sts	0x07C8, r6	; 0x8007c8 <_startMeasureBit+0x2>
     56a:	70 92 c9 07 	sts	0x07C9, r7	; 0x8007c9 <_startMeasureBit+0x3>
     56e:	10 93 c5 07 	sts	0x07C5, r17	; 0x8007c5 <_readyEventGroup+0x1>
     572:	00 93 c4 07 	sts	0x07C4, r16	; 0x8007c4 <_readyEventGroup>
     576:	a0 92 c0 07 	sts	0x07C0, r10	; 0x8007c0 <__data_end>
     57a:	b0 92 c1 07 	sts	0x07C1, r11	; 0x8007c1 <__data_end+0x1>
     57e:	c0 92 c2 07 	sts	0x07C2, r12	; 0x8007c2 <__data_end+0x2>
     582:	d0 92 c3 07 	sts	0x07C3, r13	; 0x8007c3 <__data_end+0x3>
     586:	60 e0       	ldi	r22, 0x00	; 0
     588:	70 e0       	ldi	r23, 0x00	; 0
     58a:	83 e0       	ldi	r24, 0x03	; 3
     58c:	0e 94 4c 27 	call	0x4e98	; 0x4e98 <mh_z19_create>
     590:	4c 2f       	mov	r20, r28
     592:	50 e0       	ldi	r21, 0x00	; 0
     594:	48 53       	subi	r20, 0x38	; 56
     596:	5f 4f       	sbci	r21, 0xFF	; 255
     598:	0d 2f       	mov	r16, r29
     59a:	94 01       	movw	r18, r8
     59c:	62 e7       	ldi	r22, 0x72	; 114
     59e:	72 e0       	ldi	r23, 0x02	; 2
     5a0:	8b e3       	ldi	r24, 0x3B	; 59
     5a2:	93 e0       	ldi	r25, 0x03	; 3
     5a4:	0e 94 82 15 	call	0x2b04	; 0x2b04 <xTaskCreate>
     5a8:	c4 01       	movw	r24, r8
     5aa:	df 91       	pop	r29
     5ac:	cf 91       	pop	r28
     5ae:	1f 91       	pop	r17
     5b0:	0f 91       	pop	r16
     5b2:	ff 90       	pop	r15
     5b4:	ef 90       	pop	r14
     5b6:	df 90       	pop	r13
     5b8:	cf 90       	pop	r12
     5ba:	bf 90       	pop	r11
     5bc:	af 90       	pop	r10
     5be:	9f 90       	pop	r9
     5c0:	8f 90       	pop	r8
     5c2:	7f 90       	pop	r7
     5c4:	6f 90       	pop	r6
     5c6:	5f 90       	pop	r5
     5c8:	4f 90       	pop	r4
     5ca:	3f 90       	pop	r3
     5cc:	2f 90       	pop	r2
     5ce:	08 95       	ret

000005d0 <co2Reader_measure>:


void co2Reader_measure(co2reader_t self) {
     5d0:	cf 92       	push	r12
     5d2:	df 92       	push	r13
     5d4:	ef 92       	push	r14
     5d6:	ff 92       	push	r15
     5d8:	0f 93       	push	r16
     5da:	1f 93       	push	r17
     5dc:	cf 93       	push	r28
     5de:	df 93       	push	r29
     5e0:	ec 01       	movw	r28, r24
	
	EventBits_t uxBits = xEventGroupWaitBits(_startMeasureEventGroup, //eventGroup
     5e2:	40 91 c6 07 	lds	r20, 0x07C6	; 0x8007c6 <_startMeasureBit>
     5e6:	50 91 c7 07 	lds	r21, 0x07C7	; 0x8007c7 <_startMeasureBit+0x1>
     5ea:	60 91 c8 07 	lds	r22, 0x07C8	; 0x8007c8 <_startMeasureBit+0x2>
     5ee:	70 91 c9 07 	lds	r23, 0x07C9	; 0x8007c9 <_startMeasureBit+0x3>
     5f2:	cc 24       	eor	r12, r12
     5f4:	ca 94       	dec	r12
     5f6:	dc 2c       	mov	r13, r12
     5f8:	76 01       	movw	r14, r12
     5fa:	01 e0       	ldi	r16, 0x01	; 1
     5fc:	21 e0       	ldi	r18, 0x01	; 1
     5fe:	80 91 ca 07 	lds	r24, 0x07CA	; 0x8007ca <_startMeasureEventGroup>
     602:	90 91 cb 07 	lds	r25, 0x07CB	; 0x8007cb <_startMeasureEventGroup+0x1>
     606:	a4 d6       	rcall	.+3400   	; 0x1350 <xEventGroupWaitBits>
	_startMeasureBit, //bits it is interested in
	pdTRUE, //clears the bits
	pdTRUE, //waits for both bits to be set
	portMAX_DELAY); //wait

	if ((uxBits & (_startMeasureBit)) == (_startMeasureBit)) {
     608:	00 91 c6 07 	lds	r16, 0x07C6	; 0x8007c6 <_startMeasureBit>
     60c:	10 91 c7 07 	lds	r17, 0x07C7	; 0x8007c7 <_startMeasureBit+0x1>
     610:	20 91 c8 07 	lds	r18, 0x07C8	; 0x8007c8 <_startMeasureBit+0x2>
     614:	30 91 c9 07 	lds	r19, 0x07C9	; 0x8007c9 <_startMeasureBit+0x3>
     618:	dc 01       	movw	r26, r24
     61a:	cb 01       	movw	r24, r22
     61c:	80 23       	and	r24, r16
     61e:	91 23       	and	r25, r17
     620:	a2 23       	and	r26, r18
     622:	b3 23       	and	r27, r19
     624:	08 17       	cp	r16, r24
     626:	19 07       	cpc	r17, r25
     628:	2a 07       	cpc	r18, r26
     62a:	3b 07       	cpc	r19, r27
     62c:	d9 f4       	brne	.+54     	; 0x664 <co2Reader_measure+0x94>

		
		mh_z19_return_code_t return_code_co2_measurement = mh_z19_take_meassuring();
     62e:	0e 94 7a 27 	call	0x4ef4	; 0x4ef4 <mh_z19_take_meassuring>
     632:	18 2f       	mov	r17, r24
		vTaskDelay(300);
     634:	6c e2       	ldi	r22, 0x2C	; 44
     636:	71 e0       	ldi	r23, 0x01	; 1
     638:	80 e0       	ldi	r24, 0x00	; 0
     63a:	90 e0       	ldi	r25, 0x00	; 0
     63c:	0e 94 42 18 	call	0x3084	; 0x3084 <vTaskDelay>
		if(return_code_co2_measurement == MHZ19_OK) {
     640:	11 11       	cpse	r17, r1
     642:	03 c0       	rjmp	.+6      	; 0x64a <co2Reader_measure+0x7a>
			mh_z19_get_co2_ppm(&self->value);
     644:	ce 01       	movw	r24, r28
     646:	0e 94 a9 27 	call	0x4f52	; 0x4f52 <mh_z19_get_co2_ppm>
		}
		
		//set done bit so that device knows measurement is done
		xEventGroupSetBits(_readyEventGroup, _readyBit);
     64a:	40 91 c0 07 	lds	r20, 0x07C0	; 0x8007c0 <__data_end>
     64e:	50 91 c1 07 	lds	r21, 0x07C1	; 0x8007c1 <__data_end+0x1>
     652:	60 91 c2 07 	lds	r22, 0x07C2	; 0x8007c2 <__data_end+0x2>
     656:	70 91 c3 07 	lds	r23, 0x07C3	; 0x8007c3 <__data_end+0x3>
     65a:	80 91 c4 07 	lds	r24, 0x07C4	; 0x8007c4 <_readyEventGroup>
     65e:	90 91 c5 07 	lds	r25, 0x07C5	; 0x8007c5 <_readyEventGroup+0x1>
     662:	36 d7       	rcall	.+3692   	; 0x14d0 <xEventGroupSetBits>
	}
}
     664:	df 91       	pop	r29
     666:	cf 91       	pop	r28
     668:	1f 91       	pop	r17
     66a:	0f 91       	pop	r16
     66c:	ff 90       	pop	r15
     66e:	ef 90       	pop	r14
     670:	df 90       	pop	r13
     672:	cf 90       	pop	r12
     674:	08 95       	ret

00000676 <co2Reader_executeTask>:
	uint16_t value;
	TaskHandle_t handleTask;
}co2reader;

//actual task, methods devided so that it is possible to test
void co2Reader_executeTask(void* self) {
     676:	ec 01       	movw	r28, r24
	for (;;) {
		co2Reader_measure((co2reader_t)self);
     678:	ce 01       	movw	r24, r28
     67a:	aa df       	rcall	.-172    	; 0x5d0 <co2Reader_measure>
     67c:	fd cf       	rjmp	.-6      	; 0x678 <co2Reader_executeTask+0x2>

0000067e <co2Reader_getCO2>:
	}
}

uint16_t co2Reader_getCO2(co2reader_t self) {
	return self->value;
}
     67e:	fc 01       	movw	r30, r24
     680:	80 81       	ld	r24, Z
     682:	91 81       	ldd	r25, Z+1	; 0x01
     684:	08 95       	ret

00000686 <configuration_create>:
//it is created only once, before starting the scheduler + will never be destroyed
	_working = calloc(1, sizeof(bool));
	_ventilation = calloc(1, sizeof(bool));

	//by default, device should work, not to ventilate
	_working = true;
     686:	81 e0       	ldi	r24, 0x01	; 1
     688:	80 93 cf 07 	sts	0x07CF, r24	; 0x8007cf <_working>
	_ventilation = false;
     68c:	10 92 ce 07 	sts	0x07CE, r1	; 0x8007ce <_ventilation>

	_semaphore = xSemaphoreCreateMutex();
     690:	0e 94 2a 10 	call	0x2054	; 0x2054 <xQueueCreateMutex>
     694:	90 93 cd 07 	sts	0x07CD, r25	; 0x8007cd <_semaphore+0x1>
     698:	80 93 cc 07 	sts	0x07CC, r24	; 0x8007cc <_semaphore>
     69c:	08 95       	ret

0000069e <configuration_setWorking>:
}

//if the semaphore is initialized, take it and give it back, if not, just do the work 
void configuration_setWorking(bool value) {
     69e:	0f 93       	push	r16
     6a0:	cf 93       	push	r28
	if (_semaphore != NULL) {
     6a2:	20 91 cc 07 	lds	r18, 0x07CC	; 0x8007cc <_semaphore>
     6a6:	30 91 cd 07 	lds	r19, 0x07CD	; 0x8007cd <_semaphore+0x1>
     6aa:	21 15       	cp	r18, r1
     6ac:	31 05       	cpc	r19, r1
     6ae:	b1 f0       	breq	.+44     	; 0x6dc <configuration_setWorking+0x3e>
     6b0:	c8 2f       	mov	r28, r24
		xSemaphoreTake(_semaphore, portMAX_DELAY);
     6b2:	4f ef       	ldi	r20, 0xFF	; 255
     6b4:	5f ef       	ldi	r21, 0xFF	; 255
     6b6:	ba 01       	movw	r22, r20
     6b8:	c9 01       	movw	r24, r18
     6ba:	0e 94 16 11 	call	0x222c	; 0x222c <xQueueSemaphoreTake>
		_working = value;
     6be:	c0 93 cf 07 	sts	0x07CF, r28	; 0x8007cf <_working>
		xSemaphoreGive(_semaphore);
     6c2:	00 e0       	ldi	r16, 0x00	; 0
     6c4:	20 e0       	ldi	r18, 0x00	; 0
     6c6:	30 e0       	ldi	r19, 0x00	; 0
     6c8:	a9 01       	movw	r20, r18
     6ca:	60 e0       	ldi	r22, 0x00	; 0
     6cc:	70 e0       	ldi	r23, 0x00	; 0
     6ce:	80 91 cc 07 	lds	r24, 0x07CC	; 0x8007cc <_semaphore>
     6d2:	90 91 cd 07 	lds	r25, 0x07CD	; 0x8007cd <_semaphore+0x1>
     6d6:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <xQueueGenericSend>
     6da:	02 c0       	rjmp	.+4      	; 0x6e0 <configuration_setWorking+0x42>
	}
	else _working = value;
     6dc:	80 93 cf 07 	sts	0x07CF, r24	; 0x8007cf <_working>
}
     6e0:	cf 91       	pop	r28
     6e2:	0f 91       	pop	r16
     6e4:	08 95       	ret

000006e6 <configuration_getWorking>:

void configuration_getWorking(bool* working) {
     6e6:	0f 93       	push	r16
     6e8:	cf 93       	push	r28
     6ea:	df 93       	push	r29
	if (_semaphore != NULL) {
     6ec:	20 91 cc 07 	lds	r18, 0x07CC	; 0x8007cc <_semaphore>
     6f0:	30 91 cd 07 	lds	r19, 0x07CD	; 0x8007cd <_semaphore+0x1>
     6f4:	21 15       	cp	r18, r1
     6f6:	31 05       	cpc	r19, r1
     6f8:	b9 f0       	breq	.+46     	; 0x728 <configuration_getWorking+0x42>
     6fa:	ec 01       	movw	r28, r24
		xSemaphoreTake(_semaphore, portMAX_DELAY);
     6fc:	4f ef       	ldi	r20, 0xFF	; 255
     6fe:	5f ef       	ldi	r21, 0xFF	; 255
     700:	ba 01       	movw	r22, r20
     702:	c9 01       	movw	r24, r18
     704:	0e 94 16 11 	call	0x222c	; 0x222c <xQueueSemaphoreTake>
		*working = _working;
     708:	80 91 cf 07 	lds	r24, 0x07CF	; 0x8007cf <_working>
     70c:	88 83       	st	Y, r24
		xSemaphoreGive(_semaphore);
     70e:	00 e0       	ldi	r16, 0x00	; 0
     710:	20 e0       	ldi	r18, 0x00	; 0
     712:	30 e0       	ldi	r19, 0x00	; 0
     714:	a9 01       	movw	r20, r18
     716:	60 e0       	ldi	r22, 0x00	; 0
     718:	70 e0       	ldi	r23, 0x00	; 0
     71a:	80 91 cc 07 	lds	r24, 0x07CC	; 0x8007cc <_semaphore>
     71e:	90 91 cd 07 	lds	r25, 0x07CD	; 0x8007cd <_semaphore+0x1>
     722:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <xQueueGenericSend>
     726:	04 c0       	rjmp	.+8      	; 0x730 <configuration_getWorking+0x4a>
	}
	else *working = _working;
     728:	20 91 cf 07 	lds	r18, 0x07CF	; 0x8007cf <_working>
     72c:	fc 01       	movw	r30, r24
     72e:	20 83       	st	Z, r18
}
     730:	df 91       	pop	r29
     732:	cf 91       	pop	r28
     734:	0f 91       	pop	r16
     736:	08 95       	ret

00000738 <configuration_setVentilation>:

void configuration_setVentilation(bool value) {
     738:	0f 93       	push	r16
     73a:	cf 93       	push	r28
	if (_semaphore != NULL) {
     73c:	20 91 cc 07 	lds	r18, 0x07CC	; 0x8007cc <_semaphore>
     740:	30 91 cd 07 	lds	r19, 0x07CD	; 0x8007cd <_semaphore+0x1>
     744:	21 15       	cp	r18, r1
     746:	31 05       	cpc	r19, r1
     748:	b1 f0       	breq	.+44     	; 0x776 <configuration_setVentilation+0x3e>
     74a:	c8 2f       	mov	r28, r24
		xSemaphoreTake(_semaphore, portMAX_DELAY);
     74c:	4f ef       	ldi	r20, 0xFF	; 255
     74e:	5f ef       	ldi	r21, 0xFF	; 255
     750:	ba 01       	movw	r22, r20
     752:	c9 01       	movw	r24, r18
     754:	0e 94 16 11 	call	0x222c	; 0x222c <xQueueSemaphoreTake>
		_ventilation = value;
     758:	c0 93 ce 07 	sts	0x07CE, r28	; 0x8007ce <_ventilation>
		xSemaphoreGive(_semaphore);
     75c:	00 e0       	ldi	r16, 0x00	; 0
     75e:	20 e0       	ldi	r18, 0x00	; 0
     760:	30 e0       	ldi	r19, 0x00	; 0
     762:	a9 01       	movw	r20, r18
     764:	60 e0       	ldi	r22, 0x00	; 0
     766:	70 e0       	ldi	r23, 0x00	; 0
     768:	80 91 cc 07 	lds	r24, 0x07CC	; 0x8007cc <_semaphore>
     76c:	90 91 cd 07 	lds	r25, 0x07CD	; 0x8007cd <_semaphore+0x1>
     770:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <xQueueGenericSend>
     774:	02 c0       	rjmp	.+4      	; 0x77a <configuration_setVentilation+0x42>
	}
	else _ventilation = value;
     776:	80 93 ce 07 	sts	0x07CE, r24	; 0x8007ce <_ventilation>
}
     77a:	cf 91       	pop	r28
     77c:	0f 91       	pop	r16
     77e:	08 95       	ret

00000780 <configuration_getVentilation>:

void configuration_getVentilation(bool* ventilation) {
     780:	0f 93       	push	r16
     782:	cf 93       	push	r28
     784:	df 93       	push	r29
	if (_semaphore != NULL) {
     786:	20 91 cc 07 	lds	r18, 0x07CC	; 0x8007cc <_semaphore>
     78a:	30 91 cd 07 	lds	r19, 0x07CD	; 0x8007cd <_semaphore+0x1>
     78e:	21 15       	cp	r18, r1
     790:	31 05       	cpc	r19, r1
     792:	b9 f0       	breq	.+46     	; 0x7c2 <configuration_getVentilation+0x42>
     794:	ec 01       	movw	r28, r24
		xSemaphoreTake(_semaphore, portMAX_DELAY);
     796:	4f ef       	ldi	r20, 0xFF	; 255
     798:	5f ef       	ldi	r21, 0xFF	; 255
     79a:	ba 01       	movw	r22, r20
     79c:	c9 01       	movw	r24, r18
     79e:	0e 94 16 11 	call	0x222c	; 0x222c <xQueueSemaphoreTake>
		*ventilation = _ventilation;
     7a2:	80 91 ce 07 	lds	r24, 0x07CE	; 0x8007ce <_ventilation>
     7a6:	88 83       	st	Y, r24
		xSemaphoreGive(_semaphore);
     7a8:	00 e0       	ldi	r16, 0x00	; 0
     7aa:	20 e0       	ldi	r18, 0x00	; 0
     7ac:	30 e0       	ldi	r19, 0x00	; 0
     7ae:	a9 01       	movw	r20, r18
     7b0:	60 e0       	ldi	r22, 0x00	; 0
     7b2:	70 e0       	ldi	r23, 0x00	; 0
     7b4:	80 91 cc 07 	lds	r24, 0x07CC	; 0x8007cc <_semaphore>
     7b8:	90 91 cd 07 	lds	r25, 0x07CD	; 0x8007cd <_semaphore+0x1>
     7bc:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <xQueueGenericSend>
     7c0:	04 c0       	rjmp	.+8      	; 0x7ca <configuration_getVentilation+0x4a>
	}
	else *ventilation = _ventilation;
     7c2:	20 91 ce 07 	lds	r18, 0x07CE	; 0x8007ce <_ventilation>
     7c6:	fc 01       	movw	r30, r24
     7c8:	20 83       	st	Z, r18
     7ca:	df 91       	pop	r29
     7cc:	cf 91       	pop	r28
     7ce:	0f 91       	pop	r16
     7d0:	08 95       	ret

000007d2 <currentCondition_create>:
	}
	
}

void currentCondition_destroy(currentCondition_t self) {
	vPortFree(self);
     7d2:	68 e0       	ldi	r22, 0x08	; 8
     7d4:	70 e0       	ldi	r23, 0x00	; 0
     7d6:	81 e0       	ldi	r24, 0x01	; 1
     7d8:	90 e0       	ldi	r25, 0x00	; 0
     7da:	0e 94 ae 2f 	call	0x5f5c	; 0x5f5c <calloc>
     7de:	00 97       	sbiw	r24, 0x00	; 0
     7e0:	49 f0       	breq	.+18     	; 0x7f4 <currentCondition_create+0x22>
     7e2:	fc 01       	movw	r30, r24
     7e4:	13 82       	std	Z+3, r1	; 0x03
     7e6:	12 82       	std	Z+2, r1	; 0x02
     7e8:	15 82       	std	Z+5, r1	; 0x05
     7ea:	14 82       	std	Z+4, r1	; 0x04
     7ec:	11 82       	std	Z+1, r1	; 0x01
     7ee:	10 82       	st	Z, r1
     7f0:	17 82       	std	Z+7, r1	; 0x07
     7f2:	16 82       	std	Z+6, r1	; 0x06
     7f4:	08 95       	ret

000007f6 <currentCondition_setCO2>:
     7f6:	00 97       	sbiw	r24, 0x00	; 0
     7f8:	49 f0       	breq	.+18     	; 0x80c <currentCondition_setCO2+0x16>
     7fa:	9b 01       	movw	r18, r22
     7fc:	28 5c       	subi	r18, 0xC8	; 200
     7fe:	31 09       	sbc	r19, r1
     800:	29 34       	cpi	r18, 0x49	; 73
     802:	36 42       	sbci	r19, 0x26	; 38
     804:	18 f4       	brcc	.+6      	; 0x80c <currentCondition_setCO2+0x16>
     806:	fc 01       	movw	r30, r24
     808:	71 83       	std	Z+1, r23	; 0x01
     80a:	60 83       	st	Z, r22
     80c:	08 95       	ret

0000080e <currentCondition_setHumidity>:
     80e:	00 97       	sbiw	r24, 0x00	; 0
     810:	39 f0       	breq	.+14     	; 0x820 <currentCondition_setHumidity+0x12>
     812:	69 3e       	cpi	r22, 0xE9	; 233
     814:	23 e0       	ldi	r18, 0x03	; 3
     816:	72 07       	cpc	r23, r18
     818:	18 f4       	brcc	.+6      	; 0x820 <currentCondition_setHumidity+0x12>
     81a:	fc 01       	movw	r30, r24
     81c:	75 83       	std	Z+5, r23	; 0x05
     81e:	64 83       	std	Z+4, r22	; 0x04
     820:	08 95       	ret

00000822 <currentCondition_setTemperature>:
     822:	00 97       	sbiw	r24, 0x00	; 0
     824:	49 f0       	breq	.+18     	; 0x838 <currentCondition_setTemperature+0x16>
     826:	9b 01       	movw	r18, r22
     828:	20 57       	subi	r18, 0x70	; 112
     82a:	3e 4f       	sbci	r19, 0xFE	; 254
     82c:	27 3b       	cpi	r18, 0xB7	; 183
     82e:	33 40       	sbci	r19, 0x03	; 3
     830:	18 f4       	brcc	.+6      	; 0x838 <currentCondition_setTemperature+0x16>
     832:	fc 01       	movw	r30, r24
     834:	73 83       	std	Z+3, r23	; 0x03
     836:	62 83       	std	Z+2, r22	; 0x02
     838:	08 95       	ret

0000083a <currentCondition_setSound>:
     83a:	00 97       	sbiw	r24, 0x00	; 0
     83c:	31 f0       	breq	.+12     	; 0x84a <currentCondition_setSound+0x10>
     83e:	67 39       	cpi	r22, 0x97	; 151
     840:	71 05       	cpc	r23, r1
     842:	18 f4       	brcc	.+6      	; 0x84a <currentCondition_setSound+0x10>
     844:	fc 01       	movw	r30, r24
     846:	77 83       	std	Z+7, r23	; 0x07
     848:	66 83       	std	Z+6, r22	; 0x06
     84a:	08 95       	ret

0000084c <getcurrentConditionPayload>:
}

lora_payload_t getcurrentConditionPayload(currentCondition_t self)
{
     84c:	fc 01       	movw	r30, r24
     84e:	db 01       	movw	r26, r22
	lora_payload_t payload;
	payload.port_no = 1;
	payload.len = 8;
	
	int16_t tempData = self->temperatureData;
     850:	12 96       	adiw	r26, 0x02	; 2
     852:	6c 91       	ld	r22, X
     854:	12 97       	sbiw	r26, 0x02	; 2
     856:	13 96       	adiw	r26, 0x03	; 3
     858:	7c 91       	ld	r23, X
     85a:	13 97       	sbiw	r26, 0x03	; 3
	
	payload.bytes[0] = tempData >> 8;
	payload.bytes[1] = tempData & 0xFF;

	payload.bytes[2] = self->humidityData >> 8;
     85c:	14 96       	adiw	r26, 0x04	; 4
     85e:	4c 91       	ld	r20, X
     860:	14 97       	sbiw	r26, 0x04	; 4
     862:	15 96       	adiw	r26, 0x05	; 5
     864:	5c 91       	ld	r21, X
     866:	15 97       	sbiw	r26, 0x05	; 5
	payload.bytes[3] = self->humidityData & 0xFF;
	
	payload.bytes[4] = self->co2Data >> 8;
     868:	2c 91       	ld	r18, X
     86a:	11 96       	adiw	r26, 0x01	; 1
     86c:	3c 91       	ld	r19, X
     86e:	11 97       	sbiw	r26, 0x01	; 1
	payload.bytes[5] = self->co2Data & 0xFF;
	
	payload.bytes[6] = self->soundData >> 8;
     870:	16 96       	adiw	r26, 0x06	; 6
     872:	8c 91       	ld	r24, X
     874:	16 97       	sbiw	r26, 0x06	; 6
     876:	17 96       	adiw	r26, 0x07	; 7
     878:	9c 91       	ld	r25, X
	payload.bytes[7] = self->soundData & 0xFF;
	
	return payload;
     87a:	a1 e0       	ldi	r26, 0x01	; 1
     87c:	a0 83       	st	Z, r26
     87e:	a8 e0       	ldi	r26, 0x08	; 8
     880:	a1 83       	std	Z+1, r26	; 0x01
     882:	72 83       	std	Z+2, r23	; 0x02
     884:	63 83       	std	Z+3, r22	; 0x03
     886:	54 83       	std	Z+4, r21	; 0x04
     888:	45 83       	std	Z+5, r20	; 0x05
     88a:	36 83       	std	Z+6, r19	; 0x06
     88c:	27 83       	std	Z+7, r18	; 0x07
     88e:	90 87       	std	Z+8, r25	; 0x08
     890:	81 87       	std	Z+9, r24	; 0x09
	
}
     892:	cf 01       	movw	r24, r30
     894:	08 95       	ret

00000896 <getSimplePayload>:
	
	uint16_t one = 0;
	payload.bytes[0] = one >> 8;
	payload.bytes[1] = one & 0xFF;
	
	return payload;
     896:	21 e0       	ldi	r18, 0x01	; 1
     898:	fc 01       	movw	r30, r24
     89a:	20 83       	st	Z, r18
     89c:	22 e0       	ldi	r18, 0x02	; 2
     89e:	21 83       	std	Z+1, r18	; 0x01
     8a0:	12 82       	std	Z+2, r1	; 0x02
     8a2:	13 82       	std	Z+3, r1	; 0x03
     8a4:	08 95       	ret

000008a6 <device_create>:
		//vTaskDelay(5000);
	}
}

device_t device_create(UBaseType_t priority, UBaseType_t stack, EventGroupHandle_t startMeasureEventGroup, EventBits_t startMeasureBit,
EventGroupHandle_t readyEventGroup, EventBits_t readyBit, co2reader_t co2Reader, humAndTempReader_t humAndTempReader,soundReader_t soundReader, MessageBufferHandle_t uplinkMessageBuffer,SemaphoreHandle_t mutex){
     8a6:	2f 92       	push	r2
     8a8:	3f 92       	push	r3
     8aa:	4f 92       	push	r4
     8ac:	5f 92       	push	r5
     8ae:	6f 92       	push	r6
     8b0:	7f 92       	push	r7
     8b2:	8f 92       	push	r8
     8b4:	9f 92       	push	r9
     8b6:	af 92       	push	r10
     8b8:	bf 92       	push	r11
     8ba:	cf 92       	push	r12
     8bc:	df 92       	push	r13
     8be:	ef 92       	push	r14
     8c0:	ff 92       	push	r15
     8c2:	0f 93       	push	r16
     8c4:	1f 93       	push	r17
     8c6:	cf 93       	push	r28
     8c8:	df 93       	push	r29
     8ca:	00 d0       	rcall	.+0      	; 0x8cc <device_create+0x26>
     8cc:	1f 92       	push	r1
     8ce:	cd b7       	in	r28, 0x3d	; 61
     8d0:	de b7       	in	r29, 0x3e	; 62
     8d2:	28 2e       	mov	r2, r24
     8d4:	36 2e       	mov	r3, r22
     8d6:	5c 83       	std	Y+4, r21	; 0x04
     8d8:	4b 83       	std	Y+3, r20	; 0x03
     8da:	28 01       	movw	r4, r16
     8dc:	39 01       	movw	r6, r18

	device_t _new_device = calloc(1, sizeof(device));
     8de:	6a e0       	ldi	r22, 0x0A	; 10
     8e0:	70 e0       	ldi	r23, 0x00	; 0
     8e2:	81 e0       	ldi	r24, 0x01	; 1
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	0e 94 ae 2f 	call	0x5f5c	; 0x5f5c <calloc>
     8ea:	9a 83       	std	Y+2, r25	; 0x02
     8ec:	89 83       	std	Y+1, r24	; 0x01
	if (_new_device == NULL)
     8ee:	00 97       	sbiw	r24, 0x00	; 0
     8f0:	09 f4       	brne	.+2      	; 0x8f4 <device_create+0x4e>
     8f2:	46 c0       	rjmp	.+140    	; 0x980 <device_create+0xda>
		return NULL;

	_new_device->co2reader = co2Reader;
     8f4:	fc 01       	movw	r30, r24
     8f6:	91 82       	std	Z+1, r9	; 0x01
     8f8:	80 82       	st	Z, r8
	_new_device->humAndTempReader = humAndTempReader;
     8fa:	8a 8d       	ldd	r24, Y+26	; 0x1a
     8fc:	9b 8d       	ldd	r25, Y+27	; 0x1b
     8fe:	93 83       	std	Z+3, r25	; 0x03
     900:	82 83       	std	Z+2, r24	; 0x02
	_new_device->soundReader=soundReader;
     902:	8c 8d       	ldd	r24, Y+28	; 0x1c
     904:	9d 8d       	ldd	r25, Y+29	; 0x1d
     906:	95 83       	std	Z+5, r25	; 0x05
     908:	84 83       	std	Z+4, r24	; 0x04
	currentCondition_t currentCond = currentCondition_create();
     90a:	63 df       	rcall	.-314    	; 0x7d2 <currentCondition_create>
	_new_device->currentCondition = currentCond;
     90c:	e9 81       	ldd	r30, Y+1	; 0x01
     90e:	fa 81       	ldd	r31, Y+2	; 0x02
     910:	97 83       	std	Z+7, r25	; 0x07
     912:	86 83       	std	Z+6, r24	; 0x06

	_startMeasureEventGroup = startMeasureEventGroup;
     914:	8b 81       	ldd	r24, Y+3	; 0x03
     916:	9c 81       	ldd	r25, Y+4	; 0x04
     918:	90 93 f5 07 	sts	0x07F5, r25	; 0x8007f5 <_startMeasureEventGroup+0x1>
     91c:	80 93 f4 07 	sts	0x07F4, r24	; 0x8007f4 <_startMeasureEventGroup>
	_startMeasureBit = startMeasureBit;
     920:	40 92 f0 07 	sts	0x07F0, r4	; 0x8007f0 <_startMeasureBit>
     924:	50 92 f1 07 	sts	0x07F1, r5	; 0x8007f1 <_startMeasureBit+0x1>
     928:	60 92 f2 07 	sts	0x07F2, r6	; 0x8007f2 <_startMeasureBit+0x2>
     92c:	70 92 f3 07 	sts	0x07F3, r7	; 0x8007f3 <_startMeasureBit+0x3>

	_readyEventGroup = readyEventGroup;
     930:	f0 92 ef 07 	sts	0x07EF, r15	; 0x8007ef <_readyEventGroup+0x1>
     934:	e0 92 ee 07 	sts	0x07EE, r14	; 0x8007ee <_readyEventGroup>
	_readyBit = readyBit;
     938:	a0 92 ea 07 	sts	0x07EA, r10	; 0x8007ea <_readyBit>
     93c:	b0 92 eb 07 	sts	0x07EB, r11	; 0x8007eb <_readyBit+0x1>
     940:	c0 92 ec 07 	sts	0x07EC, r12	; 0x8007ec <_readyBit+0x2>
     944:	d0 92 ed 07 	sts	0x07ED, r13	; 0x8007ed <_readyBit+0x3>
	
	_uplinkmessageBuffer=uplinkMessageBuffer;
     948:	8e 8d       	ldd	r24, Y+30	; 0x1e
     94a:	9f 8d       	ldd	r25, Y+31	; 0x1f
     94c:	90 93 e9 07 	sts	0x07E9, r25	; 0x8007e9 <_uplinkmessageBuffer+0x1>
     950:	80 93 e8 07 	sts	0x07E8, r24	; 0x8007e8 <_uplinkmessageBuffer>
	_mutex=mutex;
     954:	88 a1       	ldd	r24, Y+32	; 0x20
     956:	99 a1       	ldd	r25, Y+33	; 0x21
     958:	90 93 e7 07 	sts	0x07E7, r25	; 0x8007e7 <_mutex+0x1>
     95c:	80 93 e6 07 	sts	0x07E6, r24	; 0x8007e6 <_mutex>

	xTaskCreate(
     960:	43 2d       	mov	r20, r3
     962:	50 e0       	ldi	r21, 0x00	; 0
     964:	48 53       	subi	r20, 0x38	; 56
     966:	5f 4f       	sbci	r21, 0xFF	; 255
     968:	7f 01       	movw	r14, r30
     96a:	98 e0       	ldi	r25, 0x08	; 8
     96c:	e9 0e       	add	r14, r25
     96e:	f1 1c       	adc	r15, r1
     970:	02 2d       	mov	r16, r2
     972:	9f 01       	movw	r18, r30
     974:	6c e7       	ldi	r22, 0x7C	; 124
     976:	72 e0       	ldi	r23, 0x02	; 2
     978:	8a ef       	ldi	r24, 0xFA	; 250
     97a:	95 e0       	ldi	r25, 0x05	; 5
     97c:	0e 94 82 15 	call	0x2b04	; 0x2b04 <xTaskCreate>
	);

	//printf("device up\n");

	return _new_device;
}
     980:	89 81       	ldd	r24, Y+1	; 0x01
     982:	9a 81       	ldd	r25, Y+2	; 0x02
     984:	0f 90       	pop	r0
     986:	0f 90       	pop	r0
     988:	0f 90       	pop	r0
     98a:	0f 90       	pop	r0
     98c:	df 91       	pop	r29
     98e:	cf 91       	pop	r28
     990:	1f 91       	pop	r17
     992:	0f 91       	pop	r16
     994:	ff 90       	pop	r15
     996:	ef 90       	pop	r14
     998:	df 90       	pop	r13
     99a:	cf 90       	pop	r12
     99c:	bf 90       	pop	r11
     99e:	af 90       	pop	r10
     9a0:	9f 90       	pop	r9
     9a2:	8f 90       	pop	r8
     9a4:	7f 90       	pop	r7
     9a6:	6f 90       	pop	r6
     9a8:	5f 90       	pop	r5
     9aa:	4f 90       	pop	r4
     9ac:	3f 90       	pop	r3
     9ae:	2f 90       	pop	r2
     9b0:	08 95       	ret

000009b2 <device_startMeasuring>:




void device_startMeasuring(device_t self) {
     9b2:	af 92       	push	r10
     9b4:	bf 92       	push	r11
     9b6:	cf 92       	push	r12
     9b8:	df 92       	push	r13
     9ba:	ef 92       	push	r14
     9bc:	ff 92       	push	r15
     9be:	0f 93       	push	r16
     9c0:	1f 93       	push	r17
     9c2:	cf 93       	push	r28
     9c4:	df 93       	push	r29
     9c6:	cd b7       	in	r28, 0x3d	; 61
     9c8:	de b7       	in	r29, 0x3e	; 62
     9ca:	66 97       	sbiw	r28, 0x16	; 22
     9cc:	0f b6       	in	r0, 0x3f	; 63
     9ce:	f8 94       	cli
     9d0:	de bf       	out	0x3e, r29	; 62
     9d2:	0f be       	out	0x3f, r0	; 63
     9d4:	cd bf       	out	0x3d, r28	; 61
     9d6:	5c 01       	movw	r10, r24
	//we should first check if device is on, get that from lora and add new eventBit 
	 xSemaphoreTake(_mutex,portMAX_DELAY);
     9d8:	4f ef       	ldi	r20, 0xFF	; 255
     9da:	5f ef       	ldi	r21, 0xFF	; 255
     9dc:	ba 01       	movw	r22, r20
     9de:	80 91 e6 07 	lds	r24, 0x07E6	; 0x8007e6 <_mutex>
     9e2:	90 91 e7 07 	lds	r25, 0x07E7	; 0x8007e7 <_mutex+0x1>
     9e6:	0e 94 16 11 	call	0x222c	; 0x222c <xQueueSemaphoreTake>
	bool* works = pvPortMalloc(sizeof(bool));
     9ea:	81 e0       	ldi	r24, 0x01	; 1
     9ec:	90 e0       	ldi	r25, 0x00	; 0
     9ee:	56 d6       	rcall	.+3244   	; 0x169c <pvPortMalloc>
     9f0:	8c 01       	movw	r16, r24
	configuration_getWorking(works);
     9f2:	79 de       	rcall	.-782    	; 0x6e6 <configuration_getWorking>
     9f4:	f8 01       	movw	r30, r16
	if (*works == true)
     9f6:	80 81       	ld	r24, Z
     9f8:	88 23       	and	r24, r24
     9fa:	09 f4       	brne	.+2      	; 0x9fe <device_startMeasuring+0x4c>
     9fc:	bc c0       	rjmp	.+376    	; 0xb76 <device_startMeasuring+0x1c4>
     9fe:	81 e0       	ldi	r24, 0x01	; 1
	{

		bool* ventilate = pvPortMalloc(sizeof(bool));
     a00:	90 e0       	ldi	r25, 0x00	; 0
     a02:	4c d6       	rcall	.+3224   	; 0x169c <pvPortMalloc>
     a04:	8c 01       	movw	r16, r24
		configuration_getVentilation(ventilate);
     a06:	bc de       	rcall	.-648    	; 0x780 <configuration_getVentilation>
     a08:	f8 01       	movw	r30, r16
		if(*ventilate == true)
     a0a:	80 81       	ld	r24, Z
     a0c:	88 23       	and	r24, r24
		{
			servo_open();
     a0e:	11 f0       	breq	.+4      	; 0xa14 <device_startMeasuring+0x62>
     a10:	75 d2       	rcall	.+1258   	; 0xefc <servo_open>
     a12:	01 c0       	rjmp	.+2      	; 0xa16 <device_startMeasuring+0x64>
		} 
		else
		{
			servo_close();
     a14:	78 d2       	rcall	.+1264   	; 0xf06 <servo_close>
     a16:	40 91 f0 07 	lds	r20, 0x07F0	; 0x8007f0 <_startMeasureBit>
		}

	////tell sensors to start meassuring 
	xEventGroupSetBits(_startMeasureEventGroup, _startMeasureBit);
     a1a:	50 91 f1 07 	lds	r21, 0x07F1	; 0x8007f1 <_startMeasureBit+0x1>
     a1e:	60 91 f2 07 	lds	r22, 0x07F2	; 0x8007f2 <_startMeasureBit+0x2>
     a22:	70 91 f3 07 	lds	r23, 0x07F3	; 0x8007f3 <_startMeasureBit+0x3>
     a26:	80 91 f4 07 	lds	r24, 0x07F4	; 0x8007f4 <_startMeasureEventGroup>
     a2a:	90 91 f5 07 	lds	r25, 0x07F5	; 0x8007f5 <_startMeasureEventGroup+0x1>
     a2e:	50 d5       	rcall	.+2720   	; 0x14d0 <xEventGroupSetBits>
     a30:	40 91 ea 07 	lds	r20, 0x07EA	; 0x8007ea <_readyBit>
	//printf("device has set bits\n");

	//wait for sensors to read data
	EventBits_t uxBits = xEventGroupWaitBits(_readyEventGroup, //eventGroup it is interested in
     a34:	50 91 eb 07 	lds	r21, 0x07EB	; 0x8007eb <_readyBit+0x1>
     a38:	60 91 ec 07 	lds	r22, 0x07EC	; 0x8007ec <_readyBit+0x2>
     a3c:	70 91 ed 07 	lds	r23, 0x07ED	; 0x8007ed <_readyBit+0x3>
     a40:	cc 24       	eor	r12, r12
     a42:	ca 94       	dec	r12
     a44:	dc 2c       	mov	r13, r12
     a46:	76 01       	movw	r14, r12
     a48:	01 e0       	ldi	r16, 0x01	; 1
     a4a:	21 e0       	ldi	r18, 0x01	; 1
     a4c:	80 91 ee 07 	lds	r24, 0x07EE	; 0x8007ee <_readyEventGroup>
     a50:	90 91 ef 07 	lds	r25, 0x07EF	; 0x8007ef <_readyEventGroup+0x1>
     a54:	7d d4       	rcall	.+2298   	; 0x1350 <xEventGroupWaitBits>
     a56:	00 91 ea 07 	lds	r16, 0x07EA	; 0x8007ea <_readyBit>
		_readyBit, //bits it is interested in
		pdTRUE, //clears the bits 
		pdTRUE, //waits for both bits to be set
		portMAX_DELAY); //waits forever if needed
	
	if ((uxBits & (_readyBit)) == (_readyBit)) {
     a5a:	10 91 eb 07 	lds	r17, 0x07EB	; 0x8007eb <_readyBit+0x1>
     a5e:	20 91 ec 07 	lds	r18, 0x07EC	; 0x8007ec <_readyBit+0x2>
     a62:	30 91 ed 07 	lds	r19, 0x07ED	; 0x8007ed <_readyBit+0x3>
     a66:	dc 01       	movw	r26, r24
     a68:	cb 01       	movw	r24, r22
     a6a:	80 23       	and	r24, r16
     a6c:	91 23       	and	r25, r17
     a6e:	a2 23       	and	r26, r18
     a70:	b3 23       	and	r27, r19
     a72:	08 17       	cp	r16, r24
     a74:	19 07       	cpc	r17, r25
     a76:	2a 07       	cpc	r18, r26
     a78:	3b 07       	cpc	r19, r27
     a7a:	09 f0       	breq	.+2      	; 0xa7e <device_startMeasuring+0xcc>
     a7c:	9e c0       	rjmp	.+316    	; 0xbba <device_startMeasuring+0x208>
		currentCondition_setCO2(self->currentCondition,co2Reader_getCO2(self->co2reader));
     a7e:	f5 01       	movw	r30, r10
     a80:	80 81       	ld	r24, Z
     a82:	91 81       	ldd	r25, Z+1	; 0x01
     a84:	fc dd       	rcall	.-1032   	; 0x67e <co2Reader_getCO2>
     a86:	bc 01       	movw	r22, r24
     a88:	f5 01       	movw	r30, r10
     a8a:	86 81       	ldd	r24, Z+6	; 0x06
     a8c:	97 81       	ldd	r25, Z+7	; 0x07
     a8e:	b3 de       	rcall	.-666    	; 0x7f6 <currentCondition_setCO2>
		
		currentCondition_setSound(self->currentCondition,soundReader_getSound(self->soundReader));
     a90:	f5 01       	movw	r30, r10
     a92:	84 81       	ldd	r24, Z+4	; 0x04
     a94:	95 81       	ldd	r25, Z+5	; 0x05
     a96:	f4 d2       	rcall	.+1512   	; 0x1080 <soundReader_getSound>
     a98:	bc 01       	movw	r22, r24
     a9a:	f5 01       	movw	r30, r10
     a9c:	86 81       	ldd	r24, Z+6	; 0x06
     a9e:	97 81       	ldd	r25, Z+7	; 0x07
     aa0:	cc de       	rcall	.-616    	; 0x83a <currentCondition_setSound>
		
		currentCondition_setTemperature(self->currentCondition,humAndTempReader_getTemperature(self->humAndTempReader));
     aa2:	f5 01       	movw	r30, r10
     aa4:	82 81       	ldd	r24, Z+2	; 0x02
     aa6:	93 81       	ldd	r25, Z+3	; 0x03
     aa8:	22 d2       	rcall	.+1092   	; 0xeee <humAndTempReader_getTemperature>
     aaa:	bc 01       	movw	r22, r24
     aac:	f5 01       	movw	r30, r10
     aae:	86 81       	ldd	r24, Z+6	; 0x06
     ab0:	97 81       	ldd	r25, Z+7	; 0x07
     ab2:	b7 de       	rcall	.-658    	; 0x822 <currentCondition_setTemperature>
		
		int16_t humidity = humAndTempReader_getHumidity(self->humAndTempReader);
     ab4:	f5 01       	movw	r30, r10
     ab6:	82 81       	ldd	r24, Z+2	; 0x02
     ab8:	93 81       	ldd	r25, Z+3	; 0x03
     aba:	15 d2       	rcall	.+1066   	; 0xee6 <humAndTempReader_getHumidity>
     abc:	bc 01       	movw	r22, r24
		currentCondition_setHumidity(self->currentCondition, humidity);
     abe:	f5 01       	movw	r30, r10
     ac0:	86 81       	ldd	r24, Z+6	; 0x06
     ac2:	97 81       	ldd	r25, Z+7	; 0x07
     ac4:	a4 de       	rcall	.-696    	; 0x80e <currentCondition_setHumidity>
     ac6:	f5 01       	movw	r30, r10
		
		//printf("device got done bit\n");
		
		printf("CO2 is: %u\n", co2Reader_getCO2(self->co2reader));
     ac8:	80 81       	ld	r24, Z
     aca:	91 81       	ldd	r25, Z+1	; 0x01
     acc:	d8 dd       	rcall	.-1104   	; 0x67e <co2Reader_getCO2>
     ace:	9f 93       	push	r25
     ad0:	8f 93       	push	r24
     ad2:	83 e8       	ldi	r24, 0x83	; 131
     ad4:	92 e0       	ldi	r25, 0x02	; 2
     ad6:	9f 93       	push	r25
     ad8:	8f 93       	push	r24
     ada:	0e 94 a1 31 	call	0x6342	; 0x6342 <printf>
     ade:	f5 01       	movw	r30, r10
		printf("Temperature is: %d\n", humAndTempReader_getTemperature(self->humAndTempReader));
     ae0:	82 81       	ldd	r24, Z+2	; 0x02
     ae2:	93 81       	ldd	r25, Z+3	; 0x03
     ae4:	04 d2       	rcall	.+1032   	; 0xeee <humAndTempReader_getTemperature>
     ae6:	9f 93       	push	r25
     ae8:	8f 93       	push	r24
     aea:	8f e8       	ldi	r24, 0x8F	; 143
     aec:	92 e0       	ldi	r25, 0x02	; 2
     aee:	9f 93       	push	r25
     af0:	8f 93       	push	r24
     af2:	0e 94 a1 31 	call	0x6342	; 0x6342 <printf>
     af6:	f5 01       	movw	r30, r10
		printf("Humidity is: %u\n", humAndTempReader_getHumidity(self->humAndTempReader));
     af8:	82 81       	ldd	r24, Z+2	; 0x02
     afa:	93 81       	ldd	r25, Z+3	; 0x03
     afc:	f4 d1       	rcall	.+1000   	; 0xee6 <humAndTempReader_getHumidity>
     afe:	9f 93       	push	r25
     b00:	8f 93       	push	r24
     b02:	83 ea       	ldi	r24, 0xA3	; 163
     b04:	92 e0       	ldi	r25, 0x02	; 2
     b06:	9f 93       	push	r25
     b08:	8f 93       	push	r24
     b0a:	0e 94 a1 31 	call	0x6342	; 0x6342 <printf>
     b0e:	f5 01       	movw	r30, r10
		printf("Sound is: %u\n", soundReader_getSound(self->soundReader));
     b10:	84 81       	ldd	r24, Z+4	; 0x04
     b12:	95 81       	ldd	r25, Z+5	; 0x05
     b14:	b5 d2       	rcall	.+1386   	; 0x1080 <soundReader_getSound>
     b16:	9f 93       	push	r25
     b18:	8f 93       	push	r24
     b1a:	84 eb       	ldi	r24, 0xB4	; 180
     b1c:	92 e0       	ldi	r25, 0x02	; 2
     b1e:	9f 93       	push	r25
     b20:	8f 93       	push	r24
     b22:	0e 94 a1 31 	call	0x6342	; 0x6342 <printf>
     b26:	f5 01       	movw	r30, r10
     b28:	66 81       	ldd	r22, Z+6	; 0x06
		
		/*Perhaps loraPayload is not a good idea to be here*/
		_uplink_payload = getcurrentConditionPayload(self->currentCondition);
     b2a:	77 81       	ldd	r23, Z+7	; 0x07
     b2c:	ce 01       	movw	r24, r28
     b2e:	01 96       	adiw	r24, 0x01	; 1
     b30:	8d de       	rcall	.-742    	; 0x84c <getcurrentConditionPayload>
     b32:	86 e1       	ldi	r24, 0x16	; 22
     b34:	fe 01       	movw	r30, r28
     b36:	31 96       	adiw	r30, 0x01	; 1
     b38:	a0 ed       	ldi	r26, 0xD0	; 208
     b3a:	b7 e0       	ldi	r27, 0x07	; 7
     b3c:	01 90       	ld	r0, Z+
     b3e:	0d 92       	st	X+, r0
     b40:	8a 95       	dec	r24
     b42:	e1 f7       	brne	.-8      	; 0xb3c <device_startMeasuring+0x18a>
     b44:	0f ef       	ldi	r16, 0xFF	; 255
     b46:	1f ef       	ldi	r17, 0xFF	; 255
     b48:	98 01       	movw	r18, r16
		
		xMessageBufferSend(_uplinkmessageBuffer,(void*) &_uplink_payload,sizeof(_uplink_payload),portMAX_DELAY);
     b4a:	46 e1       	ldi	r20, 0x16	; 22
     b4c:	50 e0       	ldi	r21, 0x00	; 0
     b4e:	60 ed       	ldi	r22, 0xD0	; 208
     b50:	77 e0       	ldi	r23, 0x07	; 7
     b52:	80 91 e8 07 	lds	r24, 0x07E8	; 0x8007e8 <_uplinkmessageBuffer>
     b56:	90 91 e9 07 	lds	r25, 0x07E9	; 0x8007e9 <_uplinkmessageBuffer+0x1>
     b5a:	0e 94 52 13 	call	0x26a4	; 0x26a4 <xStreamBufferSend>
     b5e:	60 ed       	ldi	r22, 0xD0	; 208
     b60:	77 e0       	ldi	r23, 0x07	; 7
     b62:	80 e0       	ldi	r24, 0x00	; 0
		vTaskDelay(2000);
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	0e 94 42 18 	call	0x3084	; 0x3084 <vTaskDelay>
     b6a:	0f b6       	in	r0, 0x3f	; 63
     b6c:	f8 94       	cli
     b6e:	de bf       	out	0x3e, r29	; 62
     b70:	0f be       	out	0x3f, r0	; 63
     b72:	cd bf       	out	0x3d, r28	; 61
     b74:	22 c0       	rjmp	.+68     	; 0xbba <device_startMeasuring+0x208>
     b76:	68 e8       	ldi	r22, 0x88	; 136
     b78:	73 e1       	ldi	r23, 0x13	; 19
	//if the device is not on, wait a bit and check if anything is changed
	}
		else
		{
		//put 30 000 for 5 mins
		vTaskDelay(5000);
     b7a:	80 e0       	ldi	r24, 0x00	; 0
     b7c:	90 e0       	ldi	r25, 0x00	; 0
     b7e:	0e 94 42 18 	call	0x3084	; 0x3084 <vTaskDelay>
     b82:	f5 01       	movw	r30, r10
     b84:	66 81       	ldd	r22, Z+6	; 0x06
		_uplink_payload = getSimplePayload(self->currentCondition);
     b86:	77 81       	ldd	r23, Z+7	; 0x07
     b88:	ce 01       	movw	r24, r28
     b8a:	01 96       	adiw	r24, 0x01	; 1
     b8c:	84 de       	rcall	.-760    	; 0x896 <getSimplePayload>
     b8e:	86 e1       	ldi	r24, 0x16	; 22
     b90:	fe 01       	movw	r30, r28
     b92:	31 96       	adiw	r30, 0x01	; 1
     b94:	a0 ed       	ldi	r26, 0xD0	; 208
     b96:	b7 e0       	ldi	r27, 0x07	; 7
     b98:	01 90       	ld	r0, Z+
     b9a:	0d 92       	st	X+, r0
     b9c:	8a 95       	dec	r24
     b9e:	e1 f7       	brne	.-8      	; 0xb98 <device_startMeasuring+0x1e6>
     ba0:	0f ef       	ldi	r16, 0xFF	; 255
     ba2:	1f ef       	ldi	r17, 0xFF	; 255
     ba4:	98 01       	movw	r18, r16
		xMessageBufferSend(_uplinkmessageBuffer,(void*) &_uplink_payload,sizeof(_uplink_payload),portMAX_DELAY);
     ba6:	46 e1       	ldi	r20, 0x16	; 22
     ba8:	50 e0       	ldi	r21, 0x00	; 0
     baa:	60 ed       	ldi	r22, 0xD0	; 208
     bac:	77 e0       	ldi	r23, 0x07	; 7
     bae:	80 91 e8 07 	lds	r24, 0x07E8	; 0x8007e8 <_uplinkmessageBuffer>
     bb2:	90 91 e9 07 	lds	r25, 0x07E9	; 0x8007e9 <_uplinkmessageBuffer+0x1>
     bb6:	0e 94 52 13 	call	0x26a4	; 0x26a4 <xStreamBufferSend>
     bba:	00 e0       	ldi	r16, 0x00	; 0
     bbc:	20 e0       	ldi	r18, 0x00	; 0
     bbe:	30 e0       	ldi	r19, 0x00	; 0
		} 
	xSemaphoreGive(_mutex);
     bc0:	a9 01       	movw	r20, r18
     bc2:	60 e0       	ldi	r22, 0x00	; 0
     bc4:	70 e0       	ldi	r23, 0x00	; 0
     bc6:	80 91 e6 07 	lds	r24, 0x07E6	; 0x8007e6 <_mutex>
     bca:	90 91 e7 07 	lds	r25, 0x07E7	; 0x8007e7 <_mutex+0x1>
     bce:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <xQueueGenericSend>
     bd2:	66 96       	adiw	r28, 0x16	; 22
     bd4:	0f b6       	in	r0, 0x3f	; 63
     bd6:	f8 94       	cli
}
     bd8:	de bf       	out	0x3e, r29	; 62
     bda:	0f be       	out	0x3f, r0	; 63
     bdc:	cd bf       	out	0x3d, r28	; 61
     bde:	df 91       	pop	r29
     be0:	cf 91       	pop	r28
     be2:	1f 91       	pop	r17
     be4:	0f 91       	pop	r16
     be6:	ff 90       	pop	r15
     be8:	ef 90       	pop	r14
     bea:	df 90       	pop	r13
     bec:	cf 90       	pop	r12
     bee:	bf 90       	pop	r11
     bf0:	af 90       	pop	r10
     bf2:	08 95       	ret

00000bf4 <device_executeTask>:
     bf4:	ec 01       	movw	r28, r24
     bf6:	ce 01       	movw	r24, r28
     bf8:	dc de       	rcall	.-584    	; 0x9b2 <device_startMeasuring>

//devided so we can test
void device_executeTask(void* self) {
	for (;;)
	{
		device_startMeasuring((device_t)self);
     bfa:	fd cf       	rjmp	.-6      	; 0xbf6 <device_executeTask+0x2>

00000bfc <lora_DownLinkHandler_create>:
		
	}
}

void lora_DownLinkHandler_create(UBaseType_t lora_handler_task_priority, MessageBufferHandle_t xMessageBuffer)
{
     bfc:	ef 92       	push	r14
     bfe:	ff 92       	push	r15
     c00:	0f 93       	push	r16
     c02:	9b 01       	movw	r18, r22
	
	//_isSet=isSet;
	xTaskCreate(
     c04:	e1 2c       	mov	r14, r1
     c06:	f1 2c       	mov	r15, r1
     c08:	08 2f       	mov	r16, r24
     c0a:	48 e8       	ldi	r20, 0x88	; 136
     c0c:	51 e0       	ldi	r21, 0x01	; 1
     c0e:	62 ec       	ldi	r22, 0xC2	; 194
     c10:	72 e0       	ldi	r23, 0x02	; 2
     c12:	84 ea       	ldi	r24, 0xA4	; 164
     c14:	96 e0       	ldi	r25, 0x06	; 6
     c16:	0e 94 82 15 	call	0x2b04	; 0x2b04 <xTaskCreate>
	,  configMINIMAL_STACK_SIZE+200  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  xMessageBuffer
	,  lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
	
}
     c1a:	0f 91       	pop	r16
     c1c:	ff 90       	pop	r15
     c1e:	ef 90       	pop	r14
     c20:	08 95       	ret

00000c22 <lora_DownLinkHandler_task>:


	void lora_DownLinkHandler_task(MessageBufferHandle_t xMessageBuffer)
	{
     c22:	0f 93       	push	r16
     c24:	1f 93       	push	r17
     c26:	cf 93       	push	r28
     c28:	df 93       	push	r29
				
		//size_t xBytesReceived;
		//xBytesReceived = 
		xMessageBufferReceive(xMessageBuffer,(void*) &_downlink_payload,sizeof(lora_payload_t),portMAX_DELAY);
     c2a:	0f ef       	ldi	r16, 0xFF	; 255
     c2c:	1f ef       	ldi	r17, 0xFF	; 255
     c2e:	98 01       	movw	r18, r16
     c30:	46 e1       	ldi	r20, 0x16	; 22
     c32:	50 e0       	ldi	r21, 0x00	; 0
     c34:	66 ef       	ldi	r22, 0xF6	; 246
     c36:	77 e0       	ldi	r23, 0x07	; 7
     c38:	0e 94 3f 14 	call	0x287e	; 0x287e <xStreamBufferReceive>
		printf("PayLoad bytes are: %d, %d\n Payload lenght is %d\n", _downlink_payload.bytes[0] ,_downlink_payload.bytes[1],_downlink_payload.len);
     c3c:	c6 ef       	ldi	r28, 0xF6	; 246
     c3e:	d7 e0       	ldi	r29, 0x07	; 7
     c40:	89 81       	ldd	r24, Y+1	; 0x01
     c42:	1f 92       	push	r1
     c44:	8f 93       	push	r24
     c46:	8b 81       	ldd	r24, Y+3	; 0x03
     c48:	1f 92       	push	r1
     c4a:	8f 93       	push	r24
     c4c:	8a 81       	ldd	r24, Y+2	; 0x02
     c4e:	1f 92       	push	r1
     c50:	8f 93       	push	r24
     c52:	8b ec       	ldi	r24, 0xCB	; 203
     c54:	92 e0       	ldi	r25, 0x02	; 2
     c56:	9f 93       	push	r25
     c58:	8f 93       	push	r24
     c5a:	0e 94 a1 31 	call	0x6342	; 0x6342 <printf>
		
		//Two bytes eg. 44/33
		if(_downlink_payload.len==2)
     c5e:	8d b7       	in	r24, 0x3d	; 61
     c60:	9e b7       	in	r25, 0x3e	; 62
     c62:	08 96       	adiw	r24, 0x08	; 8
     c64:	0f b6       	in	r0, 0x3f	; 63
     c66:	f8 94       	cli
     c68:	9e bf       	out	0x3e, r25	; 62
     c6a:	0f be       	out	0x3f, r0	; 63
     c6c:	8d bf       	out	0x3d, r24	; 61
     c6e:	89 81       	ldd	r24, Y+1	; 0x01
     c70:	82 30       	cpi	r24, 0x02	; 2
     c72:	09 f0       	breq	.+2      	; 0xc76 <lora_DownLinkHandler_task+0x54>
     c74:	64 c0       	rjmp	.+200    	; 0xd3e <lora_DownLinkHandler_task+0x11c>
		{
			uint8_t command = _downlink_payload.bytes[0] + _downlink_payload.bytes[1];
     c76:	fe 01       	movw	r30, r28
     c78:	ca 81       	ldd	r28, Y+2	; 0x02
     c7a:	83 81       	ldd	r24, Z+3	; 0x03
     c7c:	c8 0f       	add	r28, r24
			bool* value = pvPortMalloc(sizeof(bool));
     c7e:	81 e0       	ldi	r24, 0x01	; 1
     c80:	90 e0       	ldi	r25, 0x00	; 0
     c82:	0c d5       	rcall	.+2584   	; 0x169c <pvPortMalloc>
     c84:	8c 01       	movw	r16, r24
			
		
			switch(command)
     c86:	c5 37       	cpi	r28, 0x75	; 117
     c88:	e9 f0       	breq	.+58     	; 0xcc4 <lora_DownLinkHandler_task+0xa2>
     c8a:	18 f4       	brcc	.+6      	; 0xc92 <lora_DownLinkHandler_task+0x70>
     c8c:	c4 37       	cpi	r28, 0x74	; 116
     c8e:	39 f0       	breq	.+14     	; 0xc9e <lora_DownLinkHandler_task+0x7c>
     c90:	52 c0       	rjmp	.+164    	; 0xd36 <lora_DownLinkHandler_task+0x114>
     c92:	c6 38       	cpi	r28, 0x86	; 134
     c94:	51 f1       	breq	.+84     	; 0xcea <lora_DownLinkHandler_task+0xc8>
     c96:	c7 38       	cpi	r28, 0x87	; 135
     c98:	09 f4       	brne	.+2      	; 0xc9c <lora_DownLinkHandler_task+0x7a>
     c9a:	3a c0       	rjmp	.+116    	; 0xd10 <lora_DownLinkHandler_task+0xee>
     c9c:	4c c0       	rjmp	.+152    	; 0xd36 <lora_DownLinkHandler_task+0x114>
			{
			//D0
			case 0x74:
				configuration_setWorking(false);
     c9e:	80 e0       	ldi	r24, 0x00	; 0
     ca0:	fe dc       	rcall	.-1540   	; 0x69e <configuration_setWorking>
				configuration_getWorking(value);
     ca2:	c8 01       	movw	r24, r16
     ca4:	20 dd       	rcall	.-1472   	; 0x6e6 <configuration_getWorking>
     ca6:	f8 01       	movw	r30, r16
				printf("The bool for device is set to %d\n",*value);
     ca8:	80 81       	ld	r24, Z
     caa:	1f 92       	push	r1
     cac:	8f 93       	push	r24
     cae:	8c ef       	ldi	r24, 0xFC	; 252
     cb0:	92 e0       	ldi	r25, 0x02	; 2
     cb2:	9f 93       	push	r25
     cb4:	8f 93       	push	r24
     cb6:	0e 94 a1 31 	call	0x6342	; 0x6342 <printf>
     cba:	0f 90       	pop	r0
				break;
     cbc:	0f 90       	pop	r0
     cbe:	0f 90       	pop	r0
     cc0:	0f 90       	pop	r0
     cc2:	3d c0       	rjmp	.+122    	; 0xd3e <lora_DownLinkHandler_task+0x11c>
			//D1
			case 0x75 :
				configuration_setWorking(true);
     cc4:	81 e0       	ldi	r24, 0x01	; 1
     cc6:	eb dc       	rcall	.-1578   	; 0x69e <configuration_setWorking>
				configuration_getWorking(value);
     cc8:	c8 01       	movw	r24, r16
     cca:	0d dd       	rcall	.-1510   	; 0x6e6 <configuration_getWorking>
     ccc:	f8 01       	movw	r30, r16
				printf("The bool for device is set to %d\n",*value);
     cce:	80 81       	ld	r24, Z
     cd0:	1f 92       	push	r1
     cd2:	8f 93       	push	r24
     cd4:	8c ef       	ldi	r24, 0xFC	; 252
     cd6:	92 e0       	ldi	r25, 0x02	; 2
     cd8:	9f 93       	push	r25
     cda:	8f 93       	push	r24
     cdc:	0e 94 a1 31 	call	0x6342	; 0x6342 <printf>
     ce0:	0f 90       	pop	r0
				break;
     ce2:	0f 90       	pop	r0
     ce4:	0f 90       	pop	r0
     ce6:	0f 90       	pop	r0
			//V0
			case 0x86:
				configuration_setVentilation(false);
     ce8:	2a c0       	rjmp	.+84     	; 0xd3e <lora_DownLinkHandler_task+0x11c>
     cea:	80 e0       	ldi	r24, 0x00	; 0
     cec:	25 dd       	rcall	.-1462   	; 0x738 <configuration_setVentilation>
				configuration_getVentilation(value);
     cee:	c8 01       	movw	r24, r16
     cf0:	47 dd       	rcall	.-1394   	; 0x780 <configuration_getVentilation>
     cf2:	f8 01       	movw	r30, r16
				printf("The bool for ventilation is set to %d\n",*value);
     cf4:	80 81       	ld	r24, Z
     cf6:	1f 92       	push	r1
     cf8:	8f 93       	push	r24
     cfa:	8e e1       	ldi	r24, 0x1E	; 30
     cfc:	93 e0       	ldi	r25, 0x03	; 3
     cfe:	9f 93       	push	r25
     d00:	8f 93       	push	r24
     d02:	0e 94 a1 31 	call	0x6342	; 0x6342 <printf>
			break;
     d06:	0f 90       	pop	r0
     d08:	0f 90       	pop	r0
     d0a:	0f 90       	pop	r0
     d0c:	0f 90       	pop	r0
			//V1
			case 0x87:
				configuration_setVentilation(true);
     d0e:	17 c0       	rjmp	.+46     	; 0xd3e <lora_DownLinkHandler_task+0x11c>
     d10:	81 e0       	ldi	r24, 0x01	; 1
     d12:	12 dd       	rcall	.-1500   	; 0x738 <configuration_setVentilation>
				configuration_getVentilation(value);
     d14:	c8 01       	movw	r24, r16
     d16:	34 dd       	rcall	.-1432   	; 0x780 <configuration_getVentilation>
     d18:	f8 01       	movw	r30, r16
				printf("The bool for ventilation is set to %d\n",*value);
     d1a:	80 81       	ld	r24, Z
     d1c:	1f 92       	push	r1
     d1e:	8f 93       	push	r24
     d20:	8e e1       	ldi	r24, 0x1E	; 30
     d22:	93 e0       	ldi	r25, 0x03	; 3
     d24:	9f 93       	push	r25
     d26:	8f 93       	push	r24
     d28:	0e 94 a1 31 	call	0x6342	; 0x6342 <printf>
     d2c:	0f 90       	pop	r0
				break;
     d2e:	0f 90       	pop	r0
     d30:	0f 90       	pop	r0
     d32:	0f 90       	pop	r0
     d34:	04 c0       	rjmp	.+8      	; 0xd3e <lora_DownLinkHandler_task+0x11c>
     d36:	85 e4       	ldi	r24, 0x45	; 69
			default:
				printf("Invalid command\n");
     d38:	93 e0       	ldi	r25, 0x03	; 3
     d3a:	0e 94 b4 31 	call	0x6368	; 0x6368 <puts>
     d3e:	df 91       	pop	r29
				break;
		}
	}
						
}
     d40:	cf 91       	pop	r28
     d42:	1f 91       	pop	r17
     d44:	0f 91       	pop	r16
     d46:	08 95       	ret

00000d48 <lora_DownLinkHandler_startTask>:
     d48:	ec 01       	movw	r28, r24
//int16_t temperature_setting; // Temperature

void lora_DownLinkHandler_startTask(void* xMessageBuffer){
	for(;;)
	{
		lora_DownLinkHandler_task((MessageBufferHandle_t)xMessageBuffer);
     d4a:	ce 01       	movw	r24, r28
     d4c:	6a df       	rcall	.-300    	; 0xc22 <lora_DownLinkHandler_task>
     d4e:	fd cf       	rjmp	.-6      	; 0xd4a <lora_DownLinkHandler_startTask+0x2>

00000d50 <humAndTempReader_create>:
		return;

	//delete will clear the allocated memory to the task + we need to remove everything else
	vTaskDelete(self->handleTask);
	free(self);
}
     d50:	2f 92       	push	r2
     d52:	3f 92       	push	r3
     d54:	4f 92       	push	r4
     d56:	5f 92       	push	r5
     d58:	6f 92       	push	r6
     d5a:	7f 92       	push	r7
     d5c:	8f 92       	push	r8
     d5e:	9f 92       	push	r9
     d60:	af 92       	push	r10
     d62:	bf 92       	push	r11
     d64:	cf 92       	push	r12
     d66:	df 92       	push	r13
     d68:	ef 92       	push	r14
     d6a:	ff 92       	push	r15
     d6c:	0f 93       	push	r16
     d6e:	1f 93       	push	r17
     d70:	cf 93       	push	r28
     d72:	df 93       	push	r29
     d74:	88 2e       	mov	r8, r24
     d76:	96 2e       	mov	r9, r22
     d78:	1a 01       	movw	r2, r20
     d7a:	28 01       	movw	r4, r16
     d7c:	39 01       	movw	r6, r18
     d7e:	66 e0       	ldi	r22, 0x06	; 6
     d80:	70 e0       	ldi	r23, 0x00	; 0
     d82:	81 e0       	ldi	r24, 0x01	; 1
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	0e 94 ae 2f 	call	0x5f5c	; 0x5f5c <calloc>
     d8a:	ec 01       	movw	r28, r24
     d8c:	00 97       	sbiw	r24, 0x00	; 0
     d8e:	61 f1       	breq	.+88     	; 0xde8 <humAndTempReader_create+0x98>
     d90:	19 82       	std	Y+1, r1	; 0x01
     d92:	18 82       	st	Y, r1
     d94:	1b 82       	std	Y+3, r1	; 0x03
     d96:	1a 82       	std	Y+2, r1	; 0x02
     d98:	30 92 17 08 	sts	0x0817, r3	; 0x800817 <_startMeasureEventGroup+0x1>
     d9c:	20 92 16 08 	sts	0x0816, r2	; 0x800816 <_startMeasureEventGroup>
     da0:	40 92 12 08 	sts	0x0812, r4	; 0x800812 <_startMeasureBit>
     da4:	50 92 13 08 	sts	0x0813, r5	; 0x800813 <_startMeasureBit+0x1>
     da8:	60 92 14 08 	sts	0x0814, r6	; 0x800814 <_startMeasureBit+0x2>
     dac:	70 92 15 08 	sts	0x0815, r7	; 0x800815 <_startMeasureBit+0x3>
     db0:	f0 92 11 08 	sts	0x0811, r15	; 0x800811 <_readyEventGroup+0x1>
     db4:	e0 92 10 08 	sts	0x0810, r14	; 0x800810 <_readyEventGroup>
     db8:	a0 92 0c 08 	sts	0x080C, r10	; 0x80080c <_readyBit>
     dbc:	b0 92 0d 08 	sts	0x080D, r11	; 0x80080d <_readyBit+0x1>
     dc0:	c0 92 0e 08 	sts	0x080E, r12	; 0x80080e <_readyBit+0x2>
     dc4:	d0 92 0f 08 	sts	0x080F, r13	; 0x80080f <_readyBit+0x3>
     dc8:	49 2d       	mov	r20, r9
     dca:	50 e0       	ldi	r21, 0x00	; 0
     dcc:	48 53       	subi	r20, 0x38	; 56
     dce:	5f 4f       	sbci	r21, 0xFF	; 255
     dd0:	7c 01       	movw	r14, r24
     dd2:	84 e0       	ldi	r24, 0x04	; 4
     dd4:	e8 0e       	add	r14, r24
     dd6:	f1 1c       	adc	r15, r1
     dd8:	08 2d       	mov	r16, r8
     dda:	9e 01       	movw	r18, r28
     ddc:	65 e5       	ldi	r22, 0x55	; 85
     dde:	73 e0       	ldi	r23, 0x03	; 3
     de0:	8f e6       	ldi	r24, 0x6F	; 111
     de2:	97 e0       	ldi	r25, 0x07	; 7
     de4:	0e 94 82 15 	call	0x2b04	; 0x2b04 <xTaskCreate>
     de8:	ce 01       	movw	r24, r28
     dea:	df 91       	pop	r29
     dec:	cf 91       	pop	r28
     dee:	1f 91       	pop	r17
     df0:	0f 91       	pop	r16
     df2:	ff 90       	pop	r15
     df4:	ef 90       	pop	r14
     df6:	df 90       	pop	r13
     df8:	cf 90       	pop	r12
     dfa:	bf 90       	pop	r11
     dfc:	af 90       	pop	r10
     dfe:	9f 90       	pop	r9
     e00:	8f 90       	pop	r8
     e02:	7f 90       	pop	r7
     e04:	6f 90       	pop	r6
     e06:	5f 90       	pop	r5
     e08:	4f 90       	pop	r4
     e0a:	3f 90       	pop	r3
     e0c:	2f 90       	pop	r2
     e0e:	08 95       	ret

00000e10 <humAndTempReader_measure>:



void humAndTempReader_measure(humAndTempReader_t self) {//dummy
     e10:	cf 92       	push	r12
     e12:	df 92       	push	r13
     e14:	ef 92       	push	r14
     e16:	ff 92       	push	r15
     e18:	0f 93       	push	r16
     e1a:	1f 93       	push	r17
     e1c:	cf 93       	push	r28
     e1e:	df 93       	push	r29
     e20:	ec 01       	movw	r28, r24
	EventBits_t uxBits = xEventGroupWaitBits(_startMeasureEventGroup, //eventGroup
     e22:	40 91 12 08 	lds	r20, 0x0812	; 0x800812 <_startMeasureBit>
     e26:	50 91 13 08 	lds	r21, 0x0813	; 0x800813 <_startMeasureBit+0x1>
     e2a:	60 91 14 08 	lds	r22, 0x0814	; 0x800814 <_startMeasureBit+0x2>
     e2e:	70 91 15 08 	lds	r23, 0x0815	; 0x800815 <_startMeasureBit+0x3>
     e32:	cc 24       	eor	r12, r12
     e34:	ca 94       	dec	r12
     e36:	dc 2c       	mov	r13, r12
     e38:	76 01       	movw	r14, r12
     e3a:	01 e0       	ldi	r16, 0x01	; 1
     e3c:	21 e0       	ldi	r18, 0x01	; 1
     e3e:	80 91 16 08 	lds	r24, 0x0816	; 0x800816 <_startMeasureEventGroup>
     e42:	90 91 17 08 	lds	r25, 0x0817	; 0x800817 <_startMeasureEventGroup+0x1>
     e46:	84 d2       	rcall	.+1288   	; 0x1350 <xEventGroupWaitBits>
	_startMeasureBit, //bits it is interested i
	pdTRUE, //clears the bits
	pdTRUE, //waits for both bits to be set
	portMAX_DELAY); //wait

	if ((uxBits & (_startMeasureBit)) == (_startMeasureBit)) {
     e48:	00 91 12 08 	lds	r16, 0x0812	; 0x800812 <_startMeasureBit>
     e4c:	10 91 13 08 	lds	r17, 0x0813	; 0x800813 <_startMeasureBit+0x1>
     e50:	20 91 14 08 	lds	r18, 0x0814	; 0x800814 <_startMeasureBit+0x2>
     e54:	30 91 15 08 	lds	r19, 0x0815	; 0x800815 <_startMeasureBit+0x3>
     e58:	dc 01       	movw	r26, r24
     e5a:	cb 01       	movw	r24, r22
     e5c:	80 23       	and	r24, r16
     e5e:	91 23       	and	r25, r17
     e60:	a2 23       	and	r26, r18
     e62:	b3 23       	and	r27, r19
     e64:	08 17       	cp	r16, r24
     e66:	19 07       	cpc	r17, r25
     e68:	2a 07       	cpc	r18, r26
     e6a:	3b 07       	cpc	r19, r27
     e6c:	79 f5       	brne	.+94     	; 0xecc <humAndTempReader_measure+0xbc>
		hih8120Wakeup();
     e6e:	0e 94 11 20 	call	0x4022	; 0x4022 <hih8120Wakeup>
		vTaskDelay(50);
     e72:	62 e3       	ldi	r22, 0x32	; 50
     e74:	70 e0       	ldi	r23, 0x00	; 0
     e76:	80 e0       	ldi	r24, 0x00	; 0
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	0e 94 42 18 	call	0x3084	; 0x3084 <vTaskDelay>
		hih8120Meassure();
     e7e:	0e 94 26 20 	call	0x404c	; 0x404c <hih8120Meassure>
		vTaskDelay(5);
     e82:	65 e0       	ldi	r22, 0x05	; 5
     e84:	70 e0       	ldi	r23, 0x00	; 0
     e86:	80 e0       	ldi	r24, 0x00	; 0
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	0e 94 42 18 	call	0x3084	; 0x3084 <vTaskDelay>
		if(hih8120IsReady())
     e8e:	0e 94 0e 20 	call	0x401c	; 0x401c <hih8120IsReady>
     e92:	88 23       	and	r24, r24
     e94:	41 f0       	breq	.+16     	; 0xea6 <humAndTempReader_measure+0x96>
		{
			self->humidity = hih8120GetHumidityPercent_x10();
     e96:	0e 94 4c 20 	call	0x4098	; 0x4098 <hih8120GetHumidityPercent_x10>
     e9a:	99 83       	std	Y+1, r25	; 0x01
     e9c:	88 83       	st	Y, r24
			self->temperature = hih8120GetTemperature_x10();
     e9e:	0e 94 72 20 	call	0x40e4	; 0x40e4 <hih8120GetTemperature_x10>
     ea2:	9b 83       	std	Y+3, r25	; 0x03
     ea4:	8a 83       	std	Y+2, r24	; 0x02
			//printf("humidity and temperature done bit set\n");
		}
		
		vTaskDelay(1000);
     ea6:	68 ee       	ldi	r22, 0xE8	; 232
     ea8:	73 e0       	ldi	r23, 0x03	; 3
     eaa:	80 e0       	ldi	r24, 0x00	; 0
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	0e 94 42 18 	call	0x3084	; 0x3084 <vTaskDelay>
		//set done bit so that device knows meassurement is done
		xEventGroupSetBits(_readyEventGroup, _readyBit);
     eb2:	40 91 0c 08 	lds	r20, 0x080C	; 0x80080c <_readyBit>
     eb6:	50 91 0d 08 	lds	r21, 0x080D	; 0x80080d <_readyBit+0x1>
     eba:	60 91 0e 08 	lds	r22, 0x080E	; 0x80080e <_readyBit+0x2>
     ebe:	70 91 0f 08 	lds	r23, 0x080F	; 0x80080f <_readyBit+0x3>
     ec2:	80 91 10 08 	lds	r24, 0x0810	; 0x800810 <_readyEventGroup>
     ec6:	90 91 11 08 	lds	r25, 0x0811	; 0x800811 <_readyEventGroup+0x1>
     eca:	02 d3       	rcall	.+1540   	; 0x14d0 <xEventGroupSetBits>
	}
}
     ecc:	df 91       	pop	r29
     ece:	cf 91       	pop	r28
     ed0:	1f 91       	pop	r17
     ed2:	0f 91       	pop	r16
     ed4:	ff 90       	pop	r15
     ed6:	ef 90       	pop	r14
     ed8:	df 90       	pop	r13
     eda:	cf 90       	pop	r12
     edc:	08 95       	ret

00000ede <humAndTempReader_executeTask>:
	int16_t temperature;
	TaskHandle_t handleTask;
}humidityAndTemperature;

//actual task, methods devided so that it is possible to test
void humAndTempReader_executeTask(void* self) {
     ede:	ec 01       	movw	r28, r24
	for (;;) {
		humAndTempReader_measure((humAndTempReader_t)self);
     ee0:	ce 01       	movw	r24, r28
     ee2:	96 df       	rcall	.-212    	; 0xe10 <humAndTempReader_measure>
     ee4:	fd cf       	rjmp	.-6      	; 0xee0 <humAndTempReader_executeTask+0x2>

00000ee6 <humAndTempReader_getHumidity>:
	}
}

uint16_t humAndTempReader_getHumidity(humAndTempReader_t self){
	return self->humidity;
}
     ee6:	fc 01       	movw	r30, r24
     ee8:	80 81       	ld	r24, Z
     eea:	91 81       	ldd	r25, Z+1	; 0x01
     eec:	08 95       	ret

00000eee <humAndTempReader_getTemperature>:

int16_t humAndTempReader_getTemperature(humAndTempReader_t self){
	return self->temperature;
}
     eee:	fc 01       	movw	r30, r24
     ef0:	82 81       	ldd	r24, Z+2	; 0x02
     ef2:	93 81       	ldd	r25, Z+3	; 0x03
     ef4:	08 95       	ret

00000ef6 <servo_initialise>:
#include "Servo.h"


void servo_initialise()
{
	rcServoCreate();		
     ef6:	0c 94 d2 27 	jmp	0x4fa4	; 0x4fa4 <rcServoCreate>
     efa:	08 95       	ret

00000efc <servo_open>:
	//printf("Servo is up\n");
}

void servo_open()
{
	rcServoSet(0, 100);
     efc:	64 e6       	ldi	r22, 0x64	; 100
     efe:	80 e0       	ldi	r24, 0x00	; 0
     f00:	0c 94 ba 27 	jmp	0x4f74	; 0x4f74 <rcServoSet>
     f04:	08 95       	ret

00000f06 <servo_close>:
}
void servo_close()
{
	rcServoSet(0, -100);
     f06:	6c e9       	ldi	r22, 0x9C	; 156
     f08:	80 e0       	ldi	r24, 0x00	; 0
     f0a:	0c 94 ba 27 	jmp	0x4f74	; 0x4f74 <rcServoSet>
     f0e:	08 95       	ret

00000f10 <soundReader_create>:
}



//	RETURN TO DESTROY METHODS
void soundReader_destroy(soundReader_t self) {
     f10:	2f 92       	push	r2
     f12:	3f 92       	push	r3
     f14:	4f 92       	push	r4
     f16:	5f 92       	push	r5
     f18:	6f 92       	push	r6
     f1a:	7f 92       	push	r7
     f1c:	8f 92       	push	r8
     f1e:	9f 92       	push	r9
     f20:	af 92       	push	r10
     f22:	bf 92       	push	r11
     f24:	cf 92       	push	r12
     f26:	df 92       	push	r13
     f28:	ef 92       	push	r14
     f2a:	ff 92       	push	r15
     f2c:	0f 93       	push	r16
     f2e:	1f 93       	push	r17
     f30:	cf 93       	push	r28
     f32:	df 93       	push	r29
     f34:	88 2e       	mov	r8, r24
     f36:	96 2e       	mov	r9, r22
     f38:	1a 01       	movw	r2, r20
     f3a:	28 01       	movw	r4, r16
     f3c:	39 01       	movw	r6, r18
     f3e:	64 e0       	ldi	r22, 0x04	; 4
     f40:	70 e0       	ldi	r23, 0x00	; 0
     f42:	81 e0       	ldi	r24, 0x01	; 1
     f44:	90 e0       	ldi	r25, 0x00	; 0
     f46:	0e 94 ae 2f 	call	0x5f5c	; 0x5f5c <calloc>
     f4a:	ec 01       	movw	r28, r24
     f4c:	00 97       	sbiw	r24, 0x00	; 0
     f4e:	61 f1       	breq	.+88     	; 0xfa8 <soundReader_create+0x98>
     f50:	fc 01       	movw	r30, r24
     f52:	11 92       	st	Z+, r1
     f54:	11 92       	st	Z+, r1
     f56:	30 92 23 08 	sts	0x0823, r3	; 0x800823 <_startMeasureEventGroup+0x1>
     f5a:	20 92 22 08 	sts	0x0822, r2	; 0x800822 <_startMeasureEventGroup>
     f5e:	40 92 1e 08 	sts	0x081E, r4	; 0x80081e <_startMeasureBit>
     f62:	50 92 1f 08 	sts	0x081F, r5	; 0x80081f <_startMeasureBit+0x1>
     f66:	60 92 20 08 	sts	0x0820, r6	; 0x800820 <_startMeasureBit+0x2>
     f6a:	70 92 21 08 	sts	0x0821, r7	; 0x800821 <_startMeasureBit+0x3>
     f6e:	f0 92 1d 08 	sts	0x081D, r15	; 0x80081d <_readyEventGroup+0x1>
     f72:	e0 92 1c 08 	sts	0x081C, r14	; 0x80081c <_readyEventGroup>
     f76:	a0 92 18 08 	sts	0x0818, r10	; 0x800818 <_readyBit>
     f7a:	b0 92 19 08 	sts	0x0819, r11	; 0x800819 <_readyBit+0x1>
     f7e:	c0 92 1a 08 	sts	0x081A, r12	; 0x80081a <_readyBit+0x2>
     f82:	d0 92 1b 08 	sts	0x081B, r13	; 0x80081b <_readyBit+0x3>
     f86:	49 2d       	mov	r20, r9
     f88:	50 e0       	ldi	r21, 0x00	; 0
     f8a:	48 53       	subi	r20, 0x38	; 56
     f8c:	5f 4f       	sbci	r21, 0xFF	; 255
     f8e:	7f 01       	movw	r14, r30
     f90:	08 2d       	mov	r16, r8
     f92:	9c 01       	movw	r18, r24
     f94:	66 e6       	ldi	r22, 0x66	; 102
     f96:	73 e0       	ldi	r23, 0x03	; 3
     f98:	8c e3       	ldi	r24, 0x3C	; 60
     f9a:	98 e0       	ldi	r25, 0x08	; 8
     f9c:	0e 94 82 15 	call	0x2b04	; 0x2b04 <xTaskCreate>
     fa0:	82 e7       	ldi	r24, 0x72	; 114
     fa2:	93 e0       	ldi	r25, 0x03	; 3
     fa4:	0e 94 b4 31 	call	0x6368	; 0x6368 <puts>
     fa8:	ce 01       	movw	r24, r28
     faa:	df 91       	pop	r29
     fac:	cf 91       	pop	r28
     fae:	1f 91       	pop	r17
     fb0:	0f 91       	pop	r16
     fb2:	ff 90       	pop	r15
     fb4:	ef 90       	pop	r14
     fb6:	df 90       	pop	r13
     fb8:	cf 90       	pop	r12
     fba:	bf 90       	pop	r11
     fbc:	af 90       	pop	r10
     fbe:	9f 90       	pop	r9
     fc0:	8f 90       	pop	r8
     fc2:	7f 90       	pop	r7
     fc4:	6f 90       	pop	r6
     fc6:	5f 90       	pop	r5
     fc8:	4f 90       	pop	r4
     fca:	3f 90       	pop	r3
     fcc:	2f 90       	pop	r2
     fce:	08 95       	ret

00000fd0 <soundReader_measure>:
}

//actual task, methods devided so that it is possible to test


void soundReader_measure(soundReader_t self) {
     fd0:	cf 92       	push	r12
     fd2:	df 92       	push	r13
     fd4:	ef 92       	push	r14
     fd6:	ff 92       	push	r15
     fd8:	0f 93       	push	r16
     fda:	1f 93       	push	r17
     fdc:	cf 93       	push	r28
     fde:	df 93       	push	r29
     fe0:	ec 01       	movw	r28, r24
	
	EventBits_t uxBits = xEventGroupWaitBits(_startMeasureEventGroup, //eventGroup
     fe2:	40 91 1e 08 	lds	r20, 0x081E	; 0x80081e <_startMeasureBit>
     fe6:	50 91 1f 08 	lds	r21, 0x081F	; 0x80081f <_startMeasureBit+0x1>
     fea:	60 91 20 08 	lds	r22, 0x0820	; 0x800820 <_startMeasureBit+0x2>
     fee:	70 91 21 08 	lds	r23, 0x0821	; 0x800821 <_startMeasureBit+0x3>
     ff2:	cc 24       	eor	r12, r12
     ff4:	ca 94       	dec	r12
     ff6:	dc 2c       	mov	r13, r12
     ff8:	76 01       	movw	r14, r12
     ffa:	01 e0       	ldi	r16, 0x01	; 1
     ffc:	21 e0       	ldi	r18, 0x01	; 1
     ffe:	80 91 22 08 	lds	r24, 0x0822	; 0x800822 <_startMeasureEventGroup>
    1002:	90 91 23 08 	lds	r25, 0x0823	; 0x800823 <_startMeasureEventGroup+0x1>
    1006:	a4 d1       	rcall	.+840    	; 0x1350 <xEventGroupWaitBits>
	_startMeasureBit, //bits it is interested in
	pdTRUE, //clears the bits
	pdTRUE, //waits for both bits to be set
	portMAX_DELAY); //wait

	if ((uxBits & (_startMeasureBit)) == (_startMeasureBit)) {
    1008:	00 91 1e 08 	lds	r16, 0x081E	; 0x80081e <_startMeasureBit>
    100c:	10 91 1f 08 	lds	r17, 0x081F	; 0x80081f <_startMeasureBit+0x1>
    1010:	20 91 20 08 	lds	r18, 0x0820	; 0x800820 <_startMeasureBit+0x2>
    1014:	30 91 21 08 	lds	r19, 0x0821	; 0x800821 <_startMeasureBit+0x3>
    1018:	dc 01       	movw	r26, r24
    101a:	cb 01       	movw	r24, r22
    101c:	80 23       	and	r24, r16
    101e:	91 23       	and	r25, r17
    1020:	a2 23       	and	r26, r18
    1022:	b3 23       	and	r27, r19
    1024:	08 17       	cp	r16, r24
    1026:	19 07       	cpc	r17, r25
    1028:	2a 07       	cpc	r18, r26
    102a:	3b 07       	cpc	r19, r27
    102c:	e1 f4       	brne	.+56     	; 0x1066 <soundReader_measure+0x96>

		
		srand(time(NULL));
    102e:	80 e0       	ldi	r24, 0x00	; 0
    1030:	90 e0       	ldi	r25, 0x00	; 0
    1032:	59 da       	rcall	.-2894   	; 0x4e6 <time>
    1034:	cb 01       	movw	r24, r22
    1036:	0e 94 33 31 	call	0x6266	; 0x6266 <srand>
		self->value = rand()%105 + 15;
    103a:	0e 94 30 31 	call	0x6260	; 0x6260 <rand>
    103e:	69 e6       	ldi	r22, 0x69	; 105
    1040:	70 e0       	ldi	r23, 0x00	; 0
    1042:	0e 94 5d 2f 	call	0x5eba	; 0x5eba <__divmodhi4>
    1046:	0f 96       	adiw	r24, 0x0f	; 15
    1048:	99 83       	std	Y+1, r25	; 0x01
    104a:	88 83       	st	Y, r24
		
		
		//set done bit so that device knows measurement is done
		xEventGroupSetBits(_readyEventGroup, _readyBit);
    104c:	40 91 18 08 	lds	r20, 0x0818	; 0x800818 <_readyBit>
    1050:	50 91 19 08 	lds	r21, 0x0819	; 0x800819 <_readyBit+0x1>
    1054:	60 91 1a 08 	lds	r22, 0x081A	; 0x80081a <_readyBit+0x2>
    1058:	70 91 1b 08 	lds	r23, 0x081B	; 0x80081b <_readyBit+0x3>
    105c:	80 91 1c 08 	lds	r24, 0x081C	; 0x80081c <_readyEventGroup>
    1060:	90 91 1d 08 	lds	r25, 0x081D	; 0x80081d <_readyEventGroup+0x1>
    1064:	35 d2       	rcall	.+1130   	; 0x14d0 <xEventGroupSetBits>
		//printf("SoundReader done bit set\n");
	}
}
    1066:	df 91       	pop	r29
    1068:	cf 91       	pop	r28
    106a:	1f 91       	pop	r17
    106c:	0f 91       	pop	r16
    106e:	ff 90       	pop	r15
    1070:	ef 90       	pop	r14
    1072:	df 90       	pop	r13
    1074:	cf 90       	pop	r12
    1076:	08 95       	ret

00001078 <soundReader_executeTask>:
	TaskHandle_t handleTask;
}soundReader;



void soundReader_executeTask(void* self) {
    1078:	ec 01       	movw	r28, r24
	for (;;) {
		soundReader_measure((soundReader_t)self);
    107a:	ce 01       	movw	r24, r28
    107c:	a9 df       	rcall	.-174    	; 0xfd0 <soundReader_measure>
    107e:	fd cf       	rjmp	.-6      	; 0x107a <soundReader_executeTask+0x2>

00001080 <soundReader_getSound>:
	}
}

uint16_t soundReader_getSound(soundReader_t self) {
	return self->value;
}
    1080:	fc 01       	movw	r30, r24
    1082:	80 81       	ld	r24, Z
    1084:	91 81       	ldd	r25, Z+1	; 0x01
    1086:	08 95       	ret

00001088 <lora_UpLinkHandler_create>:
	}
}


void lora_UpLinkHandler_create(UBaseType_t lora_handler_task_priority, MessageBufferHandle_t xMessageBuffer,SemaphoreHandle_t mutex)
{
    1088:	ef 92       	push	r14
    108a:	ff 92       	push	r15
    108c:	0f 93       	push	r16
    108e:	9b 01       	movw	r18, r22
	_buffer = xMessageBuffer;
	
	
	
	xTaskCreate(
    1090:	e1 2c       	mov	r14, r1
    1092:	f1 2c       	mov	r15, r1
    1094:	08 2f       	mov	r16, r24
    1096:	48 e8       	ldi	r20, 0x88	; 136
    1098:	51 e0       	ldi	r21, 0x01	; 1
    109a:	61 e8       	ldi	r22, 0x81	; 129
    109c:	73 e0       	ldi	r23, 0x03	; 3
    109e:	8b e7       	ldi	r24, 0x7B	; 123
    10a0:	99 e0       	ldi	r25, 0x09	; 9
    10a2:	0e 94 82 15 	call	0x2b04	; 0x2b04 <xTaskCreate>
	,  (const portCHAR *)"LRUpHand"  // A name just for humans
	,  configMINIMAL_STACK_SIZE+200  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  xMessageBuffer
	,  lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}
    10a6:	0f 91       	pop	r16
    10a8:	ff 90       	pop	r15
    10aa:	ef 90       	pop	r14
    10ac:	08 95       	ret

000010ae <lora_UpLinkHandler_task>:
	
	/*Receives message from message buffer shared between it and the application responsible for gathering the data
	--> Should be called every 5 minutes from application
	*/
	void lora_UpLinkHandler_task(MessageBufferHandle_t xMessageBuffer)
	{	
    10ae:	df 92       	push	r13
    10b0:	ef 92       	push	r14
    10b2:	ff 92       	push	r15
    10b4:	0f 93       	push	r16
    10b6:	1f 93       	push	r17
    10b8:	cf 93       	push	r28
    10ba:	df 93       	push	r29
    10bc:	7c 01       	movw	r14, r24
		xSemaphoreTake(_mutex,portMAX_DELAY);
    10be:	4f ef       	ldi	r20, 0xFF	; 255
    10c0:	5f ef       	ldi	r21, 0xFF	; 255
    10c2:	ba 01       	movw	r22, r20
    10c4:	80 e0       	ldi	r24, 0x00	; 0
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	0e 94 16 11 	call	0x222c	; 0x222c <xQueueSemaphoreTake>
		size_t xBytesToSend;
		char rxData[50];
		if (!isSet)
    10cc:	80 91 24 08 	lds	r24, 0x0824	; 0x800824 <isSet>
    10d0:	81 11       	cpse	r24, r1
    10d2:	cf c0       	rjmp	.+414    	; 0x1272 <lora_UpLinkHandler_task+0x1c4>
		{
			// Hardware reset of LoRaWAN transceiver
			lora_driver_reset_rn2483(1);
    10d4:	81 e0       	ldi	r24, 0x01	; 1
    10d6:	0e 94 92 23 	call	0x4724	; 0x4724 <lora_driver_reset_rn2483>
			vTaskDelay(2);
    10da:	62 e0       	ldi	r22, 0x02	; 2
    10dc:	70 e0       	ldi	r23, 0x00	; 0
    10de:	80 e0       	ldi	r24, 0x00	; 0
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	0e 94 42 18 	call	0x3084	; 0x3084 <vTaskDelay>
			lora_driver_reset_rn2483(0);
    10e6:	80 e0       	ldi	r24, 0x00	; 0
    10e8:	0e 94 92 23 	call	0x4724	; 0x4724 <lora_driver_reset_rn2483>
			// Give it a chance to wakeup
			vTaskDelay(150);
    10ec:	66 e9       	ldi	r22, 0x96	; 150
    10ee:	70 e0       	ldi	r23, 0x00	; 0
    10f0:	80 e0       	ldi	r24, 0x00	; 0
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	0e 94 42 18 	call	0x3084	; 0x3084 <vTaskDelay>

			lora_driver_flush_buffers(); // get rid of first version string from module after reset!
    10f8:	0e 94 48 23 	call	0x4690	; 0x4690 <lora_driver_flush_buffers>


static void _lora_setup(void)
{
	e_LoRa_return_code_t rc;
	led_slow_blink(led_ST2); // OPTIONAL: Led the green led blink slowly while we are setting up LoRa
    10fc:	81 e0       	ldi	r24, 0x01	; 1
    10fe:	0e 94 a0 21 	call	0x4340	; 0x4340 <led_slow_blink>
	//The below code is required to be executed only once due to the fact that these MAC settings
	// can be stored inside of the tranciever
	//START ON ONE TIME USE CODE

	// Factory reset the transceiver
	printf("FactoryReset >%s<\n", lora_driver_map_return_code_to_text(lora_driver_rn2483_factory_reset()));
    1102:	0e 94 a6 23 	call	0x474c	; 0x474c <lora_driver_rn2483_factory_reset>
    1106:	0e 94 23 26 	call	0x4c46	; 0x4c46 <lora_driver_map_return_code_to_text>
    110a:	9f 93       	push	r25
    110c:	8f 93       	push	r24
    110e:	8a e8       	ldi	r24, 0x8A	; 138
    1110:	93 e0       	ldi	r25, 0x03	; 3
    1112:	9f 93       	push	r25
    1114:	8f 93       	push	r24
    1116:	0e 94 a1 31 	call	0x6342	; 0x6342 <printf>
	
	// Configure to EU868 LoRaWAN standards
	printf("Configure to EU868 >%s<\n", lora_driver_map_return_code_to_text(lora_driver_configure_to_eu868()));
    111a:	0e 94 24 25 	call	0x4a48	; 0x4a48 <lora_driver_configure_to_eu868>
    111e:	0e 94 23 26 	call	0x4c46	; 0x4c46 <lora_driver_map_return_code_to_text>
    1122:	9f 93       	push	r25
    1124:	8f 93       	push	r24
    1126:	8d e9       	ldi	r24, 0x9D	; 157
    1128:	93 e0       	ldi	r25, 0x03	; 3
    112a:	9f 93       	push	r25
    112c:	8f 93       	push	r24
    112e:	0e 94 a1 31 	call	0x6342	; 0x6342 <printf>

	// Get the transceivers HW EUI
	rc = lora_driver_get_rn2483_hweui(_out_buf);
    1132:	8b e3       	ldi	r24, 0x3B	; 59
    1134:	98 e0       	ldi	r25, 0x08	; 8
    1136:	0e 94 b8 23 	call	0x4770	; 0x4770 <lora_driver_get_rn2483_hweui>
	printf("Get HWEUI >%s<: %s\n",lora_driver_map_return_code_to_text(rc), _out_buf);
    113a:	0e 94 23 26 	call	0x4c46	; 0x4c46 <lora_driver_map_return_code_to_text>
    113e:	cb e3       	ldi	r28, 0x3B	; 59
    1140:	d8 e0       	ldi	r29, 0x08	; 8
    1142:	df 93       	push	r29
    1144:	cf 93       	push	r28
    1146:	9f 93       	push	r25
    1148:	8f 93       	push	r24
    114a:	86 eb       	ldi	r24, 0xB6	; 182
    114c:	93 e0       	ldi	r25, 0x03	; 3
    114e:	9f 93       	push	r25
    1150:	8f 93       	push	r24
    1152:	0e 94 a1 31 	call	0x6342	; 0x6342 <printf>

	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_map_return_code_to_text(lora_driver_set_device_identifier(_out_buf)));
    1156:	ce 01       	movw	r24, r28
    1158:	0e 94 d4 23 	call	0x47a8	; 0x47a8 <lora_driver_set_device_identifier>
    115c:	0e 94 23 26 	call	0x4c46	; 0x4c46 <lora_driver_map_return_code_to_text>
    1160:	9f 93       	push	r25
    1162:	8f 93       	push	r24
    1164:	df 93       	push	r29
    1166:	cf 93       	push	r28
    1168:	8a ec       	ldi	r24, 0xCA	; 202
    116a:	93 e0       	ldi	r25, 0x03	; 3
    116c:	9f 93       	push	r25
    116e:	8f 93       	push	r24
    1170:	0e 94 a1 31 	call	0x6342	; 0x6342 <printf>

	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_map_return_code_to_text(lora_driver_set_otaa_identity(LORA_appEUI,LORA_appKEY,_out_buf)));
    1174:	ae 01       	movw	r20, r28
    1176:	6f ed       	ldi	r22, 0xDF	; 223
    1178:	73 e0       	ldi	r23, 0x03	; 3
    117a:	80 e0       	ldi	r24, 0x00	; 0
    117c:	94 e0       	ldi	r25, 0x04	; 4
    117e:	0e 94 02 26 	call	0x4c04	; 0x4c04 <lora_driver_set_otaa_identity>
    1182:	0e 94 23 26 	call	0x4c46	; 0x4c46 <lora_driver_map_return_code_to_text>
    1186:	9f 93       	push	r25
    1188:	8f 93       	push	r24
    118a:	df 93       	push	r29
    118c:	cf 93       	push	r28
    118e:	8f ed       	ldi	r24, 0xDF	; 223
    1190:	93 e0       	ldi	r25, 0x03	; 3
    1192:	9f 93       	push	r25
    1194:	8f 93       	push	r24
    1196:	80 e0       	ldi	r24, 0x00	; 0
    1198:	94 e0       	ldi	r25, 0x04	; 4
    119a:	9f 93       	push	r25
    119c:	8f 93       	push	r24
    119e:	81 e1       	ldi	r24, 0x11	; 17
    11a0:	94 e0       	ldi	r25, 0x04	; 4
    11a2:	9f 93       	push	r25
    11a4:	8f 93       	push	r24
    11a6:	0e 94 a1 31 	call	0x6342	; 0x6342 <printf>

	// Save all the MAC settings in the transceiver
	printf("Save mac >%s<\n",lora_driver_map_return_code_to_text(lora_driver_save_mac()));
    11aa:	0e 94 07 24 	call	0x480e	; 0x480e <lora_driver_save_mac>
    11ae:	0e 94 23 26 	call	0x4c46	; 0x4c46 <lora_driver_map_return_code_to_text>
    11b2:	9f 93       	push	r25
    11b4:	8f 93       	push	r24
    11b6:	87 e4       	ldi	r24, 0x47	; 71
    11b8:	94 e0       	ldi	r25, 0x04	; 4
    11ba:	9f 93       	push	r25
    11bc:	8f 93       	push	r24
    11be:	0e 94 a1 31 	call	0x6342	; 0x6342 <printf>

	//END OF ONE TIME USE CODE
	
	
	// Enable Adaptive Data Rate
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_map_return_code_to_text(lora_driver_set_adaptive_data_rate(LoRa_ON)));
    11c2:	8d b7       	in	r24, 0x3d	; 61
    11c4:	9e b7       	in	r25, 0x3e	; 62
    11c6:	82 96       	adiw	r24, 0x22	; 34
    11c8:	0f b6       	in	r0, 0x3f	; 63
    11ca:	f8 94       	cli
    11cc:	9e bf       	out	0x3e, r25	; 62
    11ce:	0f be       	out	0x3f, r0	; 63
    11d0:	8d bf       	out	0x3d, r24	; 61
    11d2:	81 e0       	ldi	r24, 0x01	; 1
    11d4:	0e 94 01 25 	call	0x4a02	; 0x4a02 <lora_driver_set_adaptive_data_rate>
    11d8:	0e 94 23 26 	call	0x4c46	; 0x4c46 <lora_driver_map_return_code_to_text>
    11dc:	9f 93       	push	r25
    11de:	8f 93       	push	r24
    11e0:	86 e5       	ldi	r24, 0x56	; 86
    11e2:	94 e0       	ldi	r25, 0x04	; 4
    11e4:	9f 93       	push	r25
    11e6:	8f 93       	push	r24
    11e8:	0e 94 a1 31 	call	0x6342	; 0x6342 <printf>

	// Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	printf("Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_map_return_code_to_text(lora_driver_set_receive_delay(500)));
    11ec:	84 ef       	ldi	r24, 0xF4	; 244
    11ee:	91 e0       	ldi	r25, 0x01	; 1
    11f0:	0e 94 0c 25 	call	0x4a18	; 0x4a18 <lora_driver_set_receive_delay>
    11f4:	0e 94 23 26 	call	0x4c46	; 0x4c46 <lora_driver_map_return_code_to_text>
    11f8:	9f 93       	push	r25
    11fa:	8f 93       	push	r24
    11fc:	81 e0       	ldi	r24, 0x01	; 1
    11fe:	8f 93       	push	r24
    1200:	84 ef       	ldi	r24, 0xF4	; 244
    1202:	8f 93       	push	r24
    1204:	87 e7       	ldi	r24, 0x77	; 119
    1206:	94 e0       	ldi	r25, 0x04	; 4
    1208:	9f 93       	push	r25
    120a:	8f 93       	push	r24
    120c:	0e 94 a1 31 	call	0x6342	; 0x6342 <printf>
    1210:	8d b7       	in	r24, 0x3d	; 61
    1212:	9e b7       	in	r25, 0x3e	; 62
    1214:	0a 96       	adiw	r24, 0x0a	; 10
    1216:	0f b6       	in	r0, 0x3f	; 63
    1218:	f8 94       	cli
    121a:	9e bf       	out	0x3e, r25	; 62
    121c:	0f be       	out	0x3f, r0	; 63
    121e:	8d bf       	out	0x3d, r24	; 61
    1220:	ca e0       	ldi	r28, 0x0A	; 10
    1222:	d0 e0       	ldi	r29, 0x00	; 0
	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
	
	do {
		rc = lora_driver_join(LoRa_OTAA);
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_map_return_code_to_text(rc));
    1224:	07 e9       	ldi	r16, 0x97	; 151
    1226:	14 e0       	ldi	r17, 0x04	; 4

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
	
	do {
		rc = lora_driver_join(LoRa_OTAA);
    1228:	80 e0       	ldi	r24, 0x00	; 0
    122a:	0e 94 0d 24 	call	0x481a	; 0x481a <lora_driver_join>
    122e:	d8 2e       	mov	r13, r24
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_map_return_code_to_text(rc));
    1230:	0e 94 23 26 	call	0x4c46	; 0x4c46 <lora_driver_map_return_code_to_text>
    1234:	9f 93       	push	r25
    1236:	8f 93       	push	r24
    1238:	df 93       	push	r29
    123a:	cf 93       	push	r28
    123c:	1f 93       	push	r17
    123e:	0f 93       	push	r16
    1240:	0e 94 a1 31 	call	0x6342	; 0x6342 <printf>

		if ( rc != LoRa_ACCEPTED)
    1244:	0f 90       	pop	r0
    1246:	0f 90       	pop	r0
    1248:	0f 90       	pop	r0
    124a:	0f 90       	pop	r0
    124c:	0f 90       	pop	r0
    124e:	0f 90       	pop	r0
    1250:	88 e0       	ldi	r24, 0x08	; 8
    1252:	d8 16       	cp	r13, r24
    1254:	d1 f1       	breq	.+116    	; 0x12ca <lora_UpLinkHandler_task+0x21c>
		{
			// Make the red led pulse to tell something went wrong
			led_long_puls(led_ST1); // OPTIONAL
    1256:	80 e0       	ldi	r24, 0x00	; 0
    1258:	0e 94 0c 22 	call	0x4418	; 0x4418 <led_long_puls>
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
    125c:	66 e3       	ldi	r22, 0x36	; 54
    125e:	71 e0       	ldi	r23, 0x01	; 1
    1260:	80 e0       	ldi	r24, 0x00	; 0
    1262:	90 e0       	ldi	r25, 0x00	; 0
    1264:	0e 94 42 18 	call	0x3084	; 0x3084 <vTaskDelay>
    1268:	21 97       	sbiw	r28, 0x01	; 1
		}
		else
		{
			break;
		}
	} while (--maxJoinTriesLeft);
    126a:	f1 f6       	brne	.-68     	; 0x1228 <lora_UpLinkHandler_task+0x17a>
    126c:	35 c0       	rjmp	.+106    	; 0x12d8 <lora_UpLinkHandler_task+0x22a>
		led_fast_blink(led_ST1); // OPTIONAL

		// Lets stay here
		while (1)
		{
			taskYIELD();
    126e:	48 d4       	rcall	.+2192   	; 0x1b00 <vPortYield>
    1270:	fe cf       	rjmp	.-4      	; 0x126e <lora_UpLinkHandler_task+0x1c0>
			isSet=true;
		}
		

		
		xBytesToSend = xMessageBufferReceive(xMessageBuffer, (void*) &_uplink_payload,
    1272:	00 e0       	ldi	r16, 0x00	; 0
    1274:	10 e0       	ldi	r17, 0x00	; 0
    1276:	98 01       	movw	r18, r16
    1278:	42 e3       	ldi	r20, 0x32	; 50
    127a:	50 e0       	ldi	r21, 0x00	; 0
    127c:	65 e2       	ldi	r22, 0x25	; 37
    127e:	78 e0       	ldi	r23, 0x08	; 8
    1280:	c7 01       	movw	r24, r14
    1282:	0e 94 3f 14 	call	0x287e	; 0x287e <xStreamBufferReceive>
		sizeof(rxData),0);
		if(xBytesToSend >= sizeof(uint8_t)*2)
    1286:	02 97       	sbiw	r24, 0x02	; 2
    1288:	b0 f0       	brcs	.+44     	; 0x12b6 <lora_UpLinkHandler_task+0x208>
		{
			/**< Status led ST4 (BLUE)*/
			//Makes the led light up in a short period.
			
			led_short_puls(led_ST4);
    128a:	83 e0       	ldi	r24, 0x03	; 3
    128c:	0e 94 1e 22 	call	0x443c	; 0x443c <led_short_puls>
			
			printf("Upload Message >%s<\n", lora_driver_map_return_code_to_text(lora_driver_sent_upload_message(false, &_uplink_payload)));
    1290:	65 e2       	ldi	r22, 0x25	; 37
    1292:	78 e0       	ldi	r23, 0x08	; 8
    1294:	80 e0       	ldi	r24, 0x00	; 0
    1296:	0e 94 36 24 	call	0x486c	; 0x486c <lora_driver_sent_upload_message>
    129a:	0e 94 23 26 	call	0x4c46	; 0x4c46 <lora_driver_map_return_code_to_text>
    129e:	9f 93       	push	r25
    12a0:	8f 93       	push	r24
    12a2:	87 eb       	ldi	r24, 0xB7	; 183
    12a4:	94 e0       	ldi	r25, 0x04	; 4
    12a6:	9f 93       	push	r25
    12a8:	8f 93       	push	r24
    12aa:	0e 94 a1 31 	call	0x6342	; 0x6342 <printf>
    12ae:	0f 90       	pop	r0
    12b0:	0f 90       	pop	r0
    12b2:	0f 90       	pop	r0
    12b4:	0f 90       	pop	r0
		}
		xSemaphoreGive(_mutex);
    12b6:	00 e0       	ldi	r16, 0x00	; 0
    12b8:	20 e0       	ldi	r18, 0x00	; 0
    12ba:	30 e0       	ldi	r19, 0x00	; 0
    12bc:	a9 01       	movw	r20, r18
    12be:	60 e0       	ldi	r22, 0x00	; 0
    12c0:	70 e0       	ldi	r23, 0x00	; 0
    12c2:	80 e0       	ldi	r24, 0x00	; 0
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	26 d6       	rcall	.+3148   	; 0x1f14 <xQueueGenericSend>
	}
    12c8:	0e c0       	rjmp	.+28     	; 0x12e6 <lora_UpLinkHandler_task+0x238>

	if (rc == LoRa_ACCEPTED)
	{
		// Connected to LoRaWAN :-)
		// Make the green led steady
		led_led_on(led_ST2); // OPTIONAL
    12ca:	81 e0       	ldi	r24, 0x01	; 1
    12cc:	0e 94 ee 21 	call	0x43dc	; 0x43dc <led_led_on>
			vTaskDelay(150);

			lora_driver_flush_buffers(); // get rid of first version string from module after reset!

			_lora_setup();
			isSet=true;
    12d0:	81 e0       	ldi	r24, 0x01	; 1
    12d2:	80 93 24 08 	sts	0x0824, r24	; 0x800824 <isSet>
    12d6:	cd cf       	rjmp	.-102    	; 0x1272 <lora_UpLinkHandler_task+0x1c4>
	}
	else
	{
		// Something went wrong
		// Turn off the green led
		led_led_off(led_ST2); // OPTIONAL
    12d8:	81 e0       	ldi	r24, 0x01	; 1
    12da:	0e 94 fd 21 	call	0x43fa	; 0x43fa <led_led_off>
		// Make the red led blink fast to tell something went wrong
		led_fast_blink(led_ST1); // OPTIONAL
    12de:	80 e0       	ldi	r24, 0x00	; 0
    12e0:	0e 94 c7 21 	call	0x438e	; 0x438e <led_fast_blink>
    12e4:	c4 cf       	rjmp	.-120    	; 0x126e <lora_UpLinkHandler_task+0x1c0>
			led_short_puls(led_ST4);
			
			printf("Upload Message >%s<\n", lora_driver_map_return_code_to_text(lora_driver_sent_upload_message(false, &_uplink_payload)));
		}
		xSemaphoreGive(_mutex);
	}
    12e6:	df 91       	pop	r29
    12e8:	cf 91       	pop	r28
    12ea:	1f 91       	pop	r17
    12ec:	0f 91       	pop	r16
    12ee:	ff 90       	pop	r15
    12f0:	ef 90       	pop	r14
    12f2:	df 90       	pop	r13
    12f4:	08 95       	ret

000012f6 <lora_UpLinkHandler_startTask>:
static bool isSet=false;

/*Check for the parameters*/


void lora_UpLinkHandler_startTask(void* xMessageBuffer){
    12f6:	ec 01       	movw	r28, r24
	for(;;)
	{
		lora_UpLinkHandler_task((MessageBufferHandle_t)xMessageBuffer);
    12f8:	ce 01       	movw	r24, r28
    12fa:	d9 de       	rcall	.-590    	; 0x10ae <lora_UpLinkHandler_task>
		vTaskDelay(3000);
    12fc:	68 eb       	ldi	r22, 0xB8	; 184
    12fe:	7b e0       	ldi	r23, 0x0B	; 11
    1300:	80 e0       	ldi	r24, 0x00	; 0
    1302:	90 e0       	ldi	r25, 0x00	; 0
    1304:	0e 94 42 18 	call	0x3084	; 0x3084 <vTaskDelay>
    1308:	f7 cf       	rjmp	.-18     	; 0x12f8 <lora_UpLinkHandler_startTask+0x2>

0000130a <task_switch_in>:
	void task_switch_in(uint8_t task_no) {
		 #ifdef HAL_DEFS_H_

		 #else
		 // Used on VIA MEGA Shield rev. 2.0.0
		 PORTK &= 0b11110000;
    130a:	e8 e0       	ldi	r30, 0x08	; 8
    130c:	f1 e0       	ldi	r31, 0x01	; 1
    130e:	90 81       	ld	r25, Z
    1310:	90 7f       	andi	r25, 0xF0	; 240
    1312:	90 83       	st	Z, r25
		 PORTK |= (task_no & 0b00001111);
    1314:	90 81       	ld	r25, Z
    1316:	8f 70       	andi	r24, 0x0F	; 15
    1318:	98 2b       	or	r25, r24
    131a:	90 83       	st	Z, r25
    131c:	08 95       	ret

0000131e <task_switch_out>:
	void task_switch_out(uint8_t task_no) {
		#ifdef HAL_DEFS_H_

		#else
		// Used on VIA MEGA Shield rev. 2.0.0
		PORTK &= 0b11110000;
    131e:	e8 e0       	ldi	r30, 0x08	; 8
    1320:	f1 e0       	ldi	r31, 0x01	; 1
    1322:	80 81       	ld	r24, Z
    1324:	80 7f       	andi	r24, 0xF0	; 240
    1326:	80 83       	st	Z, r24
    1328:	08 95       	ret

0000132a <xEventGroupCreate>:
        uxReturn = pxEventBits->uxEventBits;
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
    132a:	cf 93       	push	r28
    132c:	df 93       	push	r29
    132e:	80 e1       	ldi	r24, 0x10	; 16
    1330:	90 e0       	ldi	r25, 0x00	; 0
    1332:	b4 d1       	rcall	.+872    	; 0x169c <pvPortMalloc>
    1334:	ec 01       	movw	r28, r24
    1336:	00 97       	sbiw	r24, 0x00	; 0
    1338:	39 f0       	breq	.+14     	; 0x1348 <xEventGroupCreate+0x1e>
    133a:	fc 01       	movw	r30, r24
    133c:	11 92       	st	Z+, r1
    133e:	11 92       	st	Z+, r1
    1340:	11 92       	st	Z+, r1
    1342:	11 92       	st	Z+, r1
    1344:	cf 01       	movw	r24, r30
    1346:	94 d2       	rcall	.+1320   	; 0x1870 <vListInitialise>
    1348:	ce 01       	movw	r24, r28
    134a:	df 91       	pop	r29
    134c:	cf 91       	pop	r28
    134e:	08 95       	ret

00001350 <xEventGroupWaitBits>:
    1350:	2f 92       	push	r2
    1352:	3f 92       	push	r3
    1354:	4f 92       	push	r4
    1356:	5f 92       	push	r5
    1358:	6f 92       	push	r6
    135a:	7f 92       	push	r7
    135c:	8f 92       	push	r8
    135e:	9f 92       	push	r9
    1360:	af 92       	push	r10
    1362:	bf 92       	push	r11
    1364:	cf 92       	push	r12
    1366:	df 92       	push	r13
    1368:	ef 92       	push	r14
    136a:	ff 92       	push	r15
    136c:	0f 93       	push	r16
    136e:	1f 93       	push	r17
    1370:	cf 93       	push	r28
    1372:	df 93       	push	r29
    1374:	ec 01       	movw	r28, r24
    1376:	4a 01       	movw	r8, r20
    1378:	5b 01       	movw	r10, r22
    137a:	62 2e       	mov	r6, r18
    137c:	70 2e       	mov	r7, r16
    137e:	0e 94 dd 16 	call	0x2dba	; 0x2dba <vTaskSuspendAll>
    1382:	28 80       	ld	r2, Y
    1384:	39 80       	ldd	r3, Y+1	; 0x01
    1386:	4a 80       	ldd	r4, Y+2	; 0x02
    1388:	5b 80       	ldd	r5, Y+3	; 0x03
    138a:	01 11       	cpse	r16, r1
    138c:	0d c0       	rjmp	.+26     	; 0x13a8 <xEventGroupWaitBits+0x58>
    138e:	81 e0       	ldi	r24, 0x01	; 1
    1390:	b2 01       	movw	r22, r4
    1392:	a1 01       	movw	r20, r2
    1394:	48 21       	and	r20, r8
    1396:	59 21       	and	r21, r9
    1398:	6a 21       	and	r22, r10
    139a:	7b 21       	and	r23, r11
    139c:	45 2b       	or	r20, r21
    139e:	46 2b       	or	r20, r22
    13a0:	47 2b       	or	r20, r23
    13a2:	79 f4       	brne	.+30     	; 0x13c2 <xEventGroupWaitBits+0x72>
    13a4:	80 e0       	ldi	r24, 0x00	; 0
    13a6:	0d c0       	rjmp	.+26     	; 0x13c2 <xEventGroupWaitBits+0x72>
    13a8:	81 e0       	ldi	r24, 0x01	; 1
    13aa:	b2 01       	movw	r22, r4
    13ac:	a1 01       	movw	r20, r2
    13ae:	48 21       	and	r20, r8
    13b0:	59 21       	and	r21, r9
    13b2:	6a 21       	and	r22, r10
    13b4:	7b 21       	and	r23, r11
    13b6:	48 15       	cp	r20, r8
    13b8:	59 05       	cpc	r21, r9
    13ba:	6a 05       	cpc	r22, r10
    13bc:	7b 05       	cpc	r23, r11
    13be:	09 f0       	breq	.+2      	; 0x13c2 <xEventGroupWaitBits+0x72>
    13c0:	80 e0       	ldi	r24, 0x00	; 0
    13c2:	88 23       	and	r24, r24
    13c4:	81 f0       	breq	.+32     	; 0x13e6 <xEventGroupWaitBits+0x96>
    13c6:	66 20       	and	r6, r6
    13c8:	09 f4       	brne	.+2      	; 0x13cc <xEventGroupWaitBits+0x7c>
    13ca:	6b c0       	rjmp	.+214    	; 0x14a2 <xEventGroupWaitBits+0x152>
    13cc:	80 94       	com	r8
    13ce:	90 94       	com	r9
    13d0:	a0 94       	com	r10
    13d2:	b0 94       	com	r11
    13d4:	82 20       	and	r8, r2
    13d6:	93 20       	and	r9, r3
    13d8:	a4 20       	and	r10, r4
    13da:	b5 20       	and	r11, r5
    13dc:	88 82       	st	Y, r8
    13de:	99 82       	std	Y+1, r9	; 0x01
    13e0:	aa 82       	std	Y+2, r10	; 0x02
    13e2:	bb 82       	std	Y+3, r11	; 0x03
    13e4:	5e c0       	rjmp	.+188    	; 0x14a2 <xEventGroupWaitBits+0x152>
    13e6:	c1 14       	cp	r12, r1
    13e8:	d1 04       	cpc	r13, r1
    13ea:	e1 04       	cpc	r14, r1
    13ec:	f1 04       	cpc	r15, r1
    13ee:	09 f4       	brne	.+2      	; 0x13f2 <xEventGroupWaitBits+0xa2>
    13f0:	58 c0       	rjmp	.+176    	; 0x14a2 <xEventGroupWaitBits+0x152>
    13f2:	66 20       	and	r6, r6
    13f4:	29 f0       	breq	.+10     	; 0x1400 <xEventGroupWaitBits+0xb0>
    13f6:	40 e0       	ldi	r20, 0x00	; 0
    13f8:	50 e0       	ldi	r21, 0x00	; 0
    13fa:	60 e0       	ldi	r22, 0x00	; 0
    13fc:	71 e0       	ldi	r23, 0x01	; 1
    13fe:	03 c0       	rjmp	.+6      	; 0x1406 <xEventGroupWaitBits+0xb6>
    1400:	40 e0       	ldi	r20, 0x00	; 0
    1402:	50 e0       	ldi	r21, 0x00	; 0
    1404:	ba 01       	movw	r22, r20
    1406:	71 10       	cpse	r7, r1
    1408:	74 60       	ori	r23, 0x04	; 4
    140a:	48 29       	or	r20, r8
    140c:	59 29       	or	r21, r9
    140e:	6a 29       	or	r22, r10
    1410:	7b 29       	or	r23, r11
    1412:	97 01       	movw	r18, r14
    1414:	86 01       	movw	r16, r12
    1416:	ce 01       	movw	r24, r28
    1418:	04 96       	adiw	r24, 0x04	; 4
    141a:	0e 94 f1 18 	call	0x31e2	; 0x31e2 <vTaskPlaceOnUnorderedEventList>
    141e:	0e 94 c6 17 	call	0x2f8c	; 0x2f8c <xTaskResumeAll>
    1422:	81 11       	cpse	r24, r1
    1424:	01 c0       	rjmp	.+2      	; 0x1428 <xEventGroupWaitBits+0xd8>
    1426:	6c d3       	rcall	.+1752   	; 0x1b00 <vPortYield>
    1428:	0e 94 38 1b 	call	0x3670	; 0x3670 <uxTaskResetEventItemValue>
    142c:	91 fd       	sbrc	r25, 1
    142e:	35 c0       	rjmp	.+106    	; 0x149a <xEventGroupWaitBits+0x14a>
    1430:	0f b6       	in	r0, 0x3f	; 63
    1432:	f8 94       	cli
    1434:	0f 92       	push	r0
    1436:	68 81       	ld	r22, Y
    1438:	79 81       	ldd	r23, Y+1	; 0x01
    143a:	8a 81       	ldd	r24, Y+2	; 0x02
    143c:	9b 81       	ldd	r25, Y+3	; 0x03
    143e:	71 10       	cpse	r7, r1
    1440:	0d c0       	rjmp	.+26     	; 0x145c <xEventGroupWaitBits+0x10c>
    1442:	21 e0       	ldi	r18, 0x01	; 1
    1444:	75 01       	movw	r14, r10
    1446:	64 01       	movw	r12, r8
    1448:	c6 22       	and	r12, r22
    144a:	d7 22       	and	r13, r23
    144c:	e8 22       	and	r14, r24
    144e:	f9 22       	and	r15, r25
    1450:	cd 28       	or	r12, r13
    1452:	ce 28       	or	r12, r14
    1454:	cf 28       	or	r12, r15
    1456:	79 f4       	brne	.+30     	; 0x1476 <xEventGroupWaitBits+0x126>
    1458:	20 e0       	ldi	r18, 0x00	; 0
    145a:	0d c0       	rjmp	.+26     	; 0x1476 <xEventGroupWaitBits+0x126>
    145c:	21 e0       	ldi	r18, 0x01	; 1
    145e:	75 01       	movw	r14, r10
    1460:	64 01       	movw	r12, r8
    1462:	c6 22       	and	r12, r22
    1464:	d7 22       	and	r13, r23
    1466:	e8 22       	and	r14, r24
    1468:	f9 22       	and	r15, r25
    146a:	c8 14       	cp	r12, r8
    146c:	d9 04       	cpc	r13, r9
    146e:	ea 04       	cpc	r14, r10
    1470:	fb 04       	cpc	r15, r11
    1472:	09 f0       	breq	.+2      	; 0x1476 <xEventGroupWaitBits+0x126>
    1474:	20 e0       	ldi	r18, 0x00	; 0
    1476:	22 23       	and	r18, r18
    1478:	71 f0       	breq	.+28     	; 0x1496 <xEventGroupWaitBits+0x146>
    147a:	66 20       	and	r6, r6
    147c:	61 f0       	breq	.+24     	; 0x1496 <xEventGroupWaitBits+0x146>
    147e:	80 94       	com	r8
    1480:	90 94       	com	r9
    1482:	a0 94       	com	r10
    1484:	b0 94       	com	r11
    1486:	86 22       	and	r8, r22
    1488:	97 22       	and	r9, r23
    148a:	a8 22       	and	r10, r24
    148c:	b9 22       	and	r11, r25
    148e:	88 82       	st	Y, r8
    1490:	99 82       	std	Y+1, r9	; 0x01
    1492:	aa 82       	std	Y+2, r10	; 0x02
    1494:	bb 82       	std	Y+3, r11	; 0x03
    1496:	0f 90       	pop	r0
    1498:	0f be       	out	0x3f, r0	; 63
    149a:	1b 01       	movw	r2, r22
    149c:	2c 01       	movw	r4, r24
    149e:	55 24       	eor	r5, r5
    14a0:	02 c0       	rjmp	.+4      	; 0x14a6 <xEventGroupWaitBits+0x156>
    14a2:	0e 94 c6 17 	call	0x2f8c	; 0x2f8c <xTaskResumeAll>
    14a6:	c2 01       	movw	r24, r4
    14a8:	b1 01       	movw	r22, r2
    14aa:	df 91       	pop	r29
    14ac:	cf 91       	pop	r28
    14ae:	1f 91       	pop	r17
    14b0:	0f 91       	pop	r16
    14b2:	ff 90       	pop	r15
    14b4:	ef 90       	pop	r14
    14b6:	df 90       	pop	r13
    14b8:	cf 90       	pop	r12
    14ba:	bf 90       	pop	r11
    14bc:	af 90       	pop	r10
    14be:	9f 90       	pop	r9
    14c0:	8f 90       	pop	r8
    14c2:	7f 90       	pop	r7
    14c4:	6f 90       	pop	r6
    14c6:	5f 90       	pop	r5
    14c8:	4f 90       	pop	r4
    14ca:	3f 90       	pop	r3
    14cc:	2f 90       	pop	r2
    14ce:	08 95       	ret

000014d0 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
    14d0:	4f 92       	push	r4
    14d2:	5f 92       	push	r5
    14d4:	6f 92       	push	r6
    14d6:	7f 92       	push	r7
    14d8:	8f 92       	push	r8
    14da:	9f 92       	push	r9
    14dc:	af 92       	push	r10
    14de:	bf 92       	push	r11
    14e0:	cf 92       	push	r12
    14e2:	df 92       	push	r13
    14e4:	ef 92       	push	r14
    14e6:	ff 92       	push	r15
    14e8:	0f 93       	push	r16
    14ea:	1f 93       	push	r17
    14ec:	cf 93       	push	r28
    14ee:	df 93       	push	r29
    14f0:	ec 01       	movw	r28, r24
    14f2:	6a 01       	movw	r12, r20
    14f4:	7b 01       	movw	r14, r22
    itself. */
    configASSERT( xEventGroup );
    configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

    pxList = &( pxEventBits->xTasksWaitingForBits );
    pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    14f6:	8c 01       	movw	r16, r24
    14f8:	09 5f       	subi	r16, 0xF9	; 249
    14fa:	1f 4f       	sbci	r17, 0xFF	; 255
    vTaskSuspendAll();
    14fc:	0e 94 dd 16 	call	0x2dba	; 0x2dba <vTaskSuspendAll>
    {
        traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

        pxListItem = listGET_HEAD_ENTRY( pxList );
    1500:	eb 85       	ldd	r30, Y+11	; 0x0b
    1502:	fc 85       	ldd	r31, Y+12	; 0x0c

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;
    1504:	88 81       	ld	r24, Y
    1506:	99 81       	ldd	r25, Y+1	; 0x01
    1508:	aa 81       	ldd	r26, Y+2	; 0x02
    150a:	bb 81       	ldd	r27, Y+3	; 0x03
    150c:	c8 2a       	or	r12, r24
    150e:	d9 2a       	or	r13, r25
    1510:	ea 2a       	or	r14, r26
    1512:	fb 2a       	or	r15, r27
    1514:	c8 82       	st	Y, r12
    1516:	d9 82       	std	Y+1, r13	; 0x01
    1518:	ea 82       	std	Y+2, r14	; 0x02
    151a:	fb 82       	std	Y+3, r15	; 0x03

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
    151c:	0e 17       	cp	r16, r30
    151e:	1f 07       	cpc	r17, r31
    1520:	09 f4       	brne	.+2      	; 0x1524 <xEventGroupSetBits+0x54>
    1522:	45 c0       	rjmp	.+138    	; 0x15ae <xEventGroupSetBits+0xde>
    1524:	c1 2c       	mov	r12, r1
    1526:	d1 2c       	mov	r13, r1
    1528:	76 01       	movw	r14, r12
            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
                {
                    xMatchFound = pdTRUE;
    152a:	99 24       	eor	r9, r9
    152c:	93 94       	inc	r9
    152e:	81 2c       	mov	r8, r1
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
    1530:	a4 80       	ldd	r10, Z+4	; 0x04
    1532:	b5 80       	ldd	r11, Z+5	; 0x05
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
    1534:	80 81       	ld	r24, Z
    1536:	91 81       	ldd	r25, Z+1	; 0x01
    1538:	a2 81       	ldd	r26, Z+2	; 0x02
    153a:	b3 81       	ldd	r27, Z+3	; 0x03
            xMatchFound = pdFALSE;

            /* Split the bits waited for from the control bits. */
            uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
            uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
    153c:	ac 01       	movw	r20, r24
    153e:	bd 01       	movw	r22, r26
    1540:	77 27       	eor	r23, r23

            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
    1542:	b2 fd       	sbrc	r27, 2
    1544:	0f c0       	rjmp	.+30     	; 0x1564 <xEventGroupSetBits+0x94>
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
                {
                    xMatchFound = pdTRUE;
    1546:	48 80       	ld	r4, Y
    1548:	59 80       	ldd	r5, Y+1	; 0x01
    154a:	6a 80       	ldd	r6, Y+2	; 0x02
    154c:	7b 80       	ldd	r7, Y+3	; 0x03
    154e:	44 22       	and	r4, r20
    1550:	55 22       	and	r5, r21
    1552:	66 22       	and	r6, r22
    1554:	77 22       	and	r7, r23
    1556:	29 2d       	mov	r18, r9
    1558:	45 28       	or	r4, r5
    155a:	46 28       	or	r4, r6
    155c:	47 28       	or	r4, r7
    155e:	89 f4       	brne	.+34     	; 0x1582 <xEventGroupSetBits+0xb2>
    1560:	28 2d       	mov	r18, r8
    1562:	0f c0       	rjmp	.+30     	; 0x1582 <xEventGroupSetBits+0xb2>
    1564:	48 80       	ld	r4, Y
    1566:	59 80       	ldd	r5, Y+1	; 0x01
    1568:	6a 80       	ldd	r6, Y+2	; 0x02
    156a:	7b 80       	ldd	r7, Y+3	; 0x03
    156c:	44 22       	and	r4, r20
    156e:	55 22       	and	r5, r21
    1570:	66 22       	and	r6, r22
    1572:	77 22       	and	r7, r23
    1574:	29 2d       	mov	r18, r9
    1576:	44 16       	cp	r4, r20
    1578:	55 06       	cpc	r5, r21
    157a:	66 06       	cpc	r6, r22
    157c:	77 06       	cpc	r7, r23
    157e:	09 f0       	breq	.+2      	; 0x1582 <xEventGroupSetBits+0xb2>
    1580:	28 2d       	mov	r18, r8
            else
            {
                /* Need all bits to be set, but not all the bits were set. */
            }

            if( xMatchFound != pdFALSE )
    1582:	22 23       	and	r18, r18
    1584:	71 f0       	breq	.+28     	; 0x15a2 <xEventGroupSetBits+0xd2>
            {
                /* The bits match.  Should the bits be cleared on exit? */
                if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
    1586:	b0 ff       	sbrs	r27, 0
    1588:	04 c0       	rjmp	.+8      	; 0x1592 <xEventGroupSetBits+0xc2>
                {
                    uxBitsToClear |= uxBitsWaitedFor;
    158a:	c4 2a       	or	r12, r20
    158c:	d5 2a       	or	r13, r21
    158e:	e6 2a       	or	r14, r22
    1590:	f7 2a       	or	r15, r23
                /* Store the actual event flag value in the task's event list
                item before removing the task from the event list.  The
                eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                that is was unblocked due to its required bits matching, rather
                than because it timed out. */
                vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
    1592:	48 81       	ld	r20, Y
    1594:	59 81       	ldd	r21, Y+1	; 0x01
    1596:	6a 81       	ldd	r22, Y+2	; 0x02
    1598:	7b 81       	ldd	r23, Y+3	; 0x03
    159a:	72 60       	ori	r23, 0x02	; 2
    159c:	cf 01       	movw	r24, r30
    159e:	0e 94 77 19 	call	0x32ee	; 0x32ee <vTaskRemoveFromUnorderedEventList>
    15a2:	ea 2d       	mov	r30, r10
    15a4:	fb 2d       	mov	r31, r11

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
    15a6:	0e 17       	cp	r16, r30
    15a8:	1f 07       	cpc	r17, r31
    15aa:	11 f6       	brne	.-124    	; 0x1530 <xEventGroupSetBits+0x60>
    15ac:	03 c0       	rjmp	.+6      	; 0x15b4 <xEventGroupSetBits+0xe4>
EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
    15ae:	c1 2c       	mov	r12, r1
    15b0:	d1 2c       	mov	r13, r1
    15b2:	76 01       	movw	r14, r12
            pxListItem = pxNext;
        }

        /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
        bit was set in the control word. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
    15b4:	c0 94       	com	r12
    15b6:	d0 94       	com	r13
    15b8:	e0 94       	com	r14
    15ba:	f0 94       	com	r15
    15bc:	88 81       	ld	r24, Y
    15be:	99 81       	ldd	r25, Y+1	; 0x01
    15c0:	aa 81       	ldd	r26, Y+2	; 0x02
    15c2:	bb 81       	ldd	r27, Y+3	; 0x03
    15c4:	c8 22       	and	r12, r24
    15c6:	d9 22       	and	r13, r25
    15c8:	ea 22       	and	r14, r26
    15ca:	fb 22       	and	r15, r27
    15cc:	c8 82       	st	Y, r12
    15ce:	d9 82       	std	Y+1, r13	; 0x01
    15d0:	ea 82       	std	Y+2, r14	; 0x02
    15d2:	fb 82       	std	Y+3, r15	; 0x03
    }
    ( void ) xTaskResumeAll();
    15d4:	0e 94 c6 17 	call	0x2f8c	; 0x2f8c <xTaskResumeAll>

    return pxEventBits->uxEventBits;
    15d8:	68 81       	ld	r22, Y
    15da:	79 81       	ldd	r23, Y+1	; 0x01
    15dc:	8a 81       	ldd	r24, Y+2	; 0x02
    15de:	9b 81       	ldd	r25, Y+3	; 0x03
}
    15e0:	df 91       	pop	r29
    15e2:	cf 91       	pop	r28
    15e4:	1f 91       	pop	r17
    15e6:	0f 91       	pop	r16
    15e8:	ff 90       	pop	r15
    15ea:	ef 90       	pop	r14
    15ec:	df 90       	pop	r13
    15ee:	cf 90       	pop	r12
    15f0:	bf 90       	pop	r11
    15f2:	af 90       	pop	r10
    15f4:	9f 90       	pop	r9
    15f6:	8f 90       	pop	r8
    15f8:	7f 90       	pop	r7
    15fa:	6f 90       	pop	r6
    15fc:	5f 90       	pop	r5
    15fe:	4f 90       	pop	r4
    1600:	08 95       	ret

00001602 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
    1602:	cf 93       	push	r28
    1604:	df 93       	push	r29
    1606:	dc 01       	movw	r26, r24
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
    1608:	e7 ea       	ldi	r30, 0xA7	; 167
    160a:	f8 e0       	ldi	r31, 0x08	; 8
    160c:	01 c0       	rjmp	.+2      	; 0x1610 <prvInsertBlockIntoFreeList+0xe>
    160e:	f9 01       	movw	r30, r18
    1610:	20 81       	ld	r18, Z
    1612:	31 81       	ldd	r19, Z+1	; 0x01
    1614:	2a 17       	cp	r18, r26
    1616:	3b 07       	cpc	r19, r27
    1618:	d0 f3       	brcs	.-12     	; 0x160e <prvInsertBlockIntoFreeList+0xc>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
    161a:	82 81       	ldd	r24, Z+2	; 0x02
    161c:	93 81       	ldd	r25, Z+3	; 0x03
    161e:	af 01       	movw	r20, r30
    1620:	48 0f       	add	r20, r24
    1622:	59 1f       	adc	r21, r25
    1624:	a4 17       	cp	r26, r20
    1626:	b5 07       	cpc	r27, r21
    1628:	49 f4       	brne	.+18     	; 0x163c <prvInsertBlockIntoFreeList+0x3a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
    162a:	12 96       	adiw	r26, 0x02	; 2
    162c:	4d 91       	ld	r20, X+
    162e:	5c 91       	ld	r21, X
    1630:	13 97       	sbiw	r26, 0x03	; 3
    1632:	84 0f       	add	r24, r20
    1634:	95 1f       	adc	r25, r21
    1636:	93 83       	std	Z+3, r25	; 0x03
    1638:	82 83       	std	Z+2, r24	; 0x02
    163a:	df 01       	movw	r26, r30
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
    163c:	12 96       	adiw	r26, 0x02	; 2
    163e:	8d 91       	ld	r24, X+
    1640:	9c 91       	ld	r25, X
    1642:	13 97       	sbiw	r26, 0x03	; 3
    1644:	ed 01       	movw	r28, r26
    1646:	c8 0f       	add	r28, r24
    1648:	d9 1f       	adc	r29, r25
    164a:	2c 17       	cp	r18, r28
    164c:	3d 07       	cpc	r19, r29
    164e:	d9 f4       	brne	.+54     	; 0x1686 <prvInsertBlockIntoFreeList+0x84>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
    1650:	20 91 a5 08 	lds	r18, 0x08A5	; 0x8008a5 <pxEnd>
    1654:	30 91 a6 08 	lds	r19, 0x08A6	; 0x8008a6 <pxEnd+0x1>
    1658:	c2 17       	cp	r28, r18
    165a:	d3 07       	cpc	r29, r19
    165c:	81 f0       	breq	.+32     	; 0x167e <prvInsertBlockIntoFreeList+0x7c>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
    165e:	2a 81       	ldd	r18, Y+2	; 0x02
    1660:	3b 81       	ldd	r19, Y+3	; 0x03
    1662:	82 0f       	add	r24, r18
    1664:	93 1f       	adc	r25, r19
    1666:	13 96       	adiw	r26, 0x03	; 3
    1668:	9c 93       	st	X, r25
    166a:	8e 93       	st	-X, r24
    166c:	12 97       	sbiw	r26, 0x02	; 2
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
    166e:	c0 81       	ld	r28, Z
    1670:	d1 81       	ldd	r29, Z+1	; 0x01
    1672:	88 81       	ld	r24, Y
    1674:	99 81       	ldd	r25, Y+1	; 0x01
    1676:	11 96       	adiw	r26, 0x01	; 1
    1678:	9c 93       	st	X, r25
    167a:	8e 93       	st	-X, r24
    167c:	07 c0       	rjmp	.+14     	; 0x168c <prvInsertBlockIntoFreeList+0x8a>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
    167e:	11 96       	adiw	r26, 0x01	; 1
    1680:	dc 93       	st	X, r29
    1682:	ce 93       	st	-X, r28
    1684:	03 c0       	rjmp	.+6      	; 0x168c <prvInsertBlockIntoFreeList+0x8a>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
    1686:	11 96       	adiw	r26, 0x01	; 1
    1688:	3c 93       	st	X, r19
    168a:	2e 93       	st	-X, r18

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
    168c:	ae 17       	cp	r26, r30
    168e:	bf 07       	cpc	r27, r31
    1690:	11 f0       	breq	.+4      	; 0x1696 <prvInsertBlockIntoFreeList+0x94>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
    1692:	b1 83       	std	Z+1, r27	; 0x01
    1694:	a0 83       	st	Z, r26
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    1696:	df 91       	pop	r29
    1698:	cf 91       	pop	r28
    169a:	08 95       	ret

0000169c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    169c:	cf 92       	push	r12
    169e:	df 92       	push	r13
    16a0:	ef 92       	push	r14
    16a2:	ff 92       	push	r15
    16a4:	0f 93       	push	r16
    16a6:	1f 93       	push	r17
    16a8:	cf 93       	push	r28
    16aa:	df 93       	push	r29
    16ac:	ec 01       	movw	r28, r24
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
    16ae:	0e 94 dd 16 	call	0x2dba	; 0x2dba <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
    16b2:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <pxEnd>
    16b6:	90 91 a6 08 	lds	r25, 0x08A6	; 0x8008a6 <pxEnd+0x1>
    16ba:	89 2b       	or	r24, r25
    16bc:	41 f5       	brne	.+80     	; 0x170e <pvPortMalloc+0x72>

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
    16be:	e7 ea       	ldi	r30, 0xA7	; 167
    16c0:	f8 e0       	ldi	r31, 0x08	; 8
    16c2:	ab ea       	ldi	r26, 0xAB	; 171
    16c4:	b8 e0       	ldi	r27, 0x08	; 8
    16c6:	b1 83       	std	Z+1, r27	; 0x01
    16c8:	a0 83       	st	Z, r26
	xStart.xBlockSize = ( size_t ) 0;
    16ca:	13 82       	std	Z+3, r1	; 0x03
    16cc:	12 82       	std	Z+2, r1	; 0x02
	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
	uxAddress -= xHeapStructSize;
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
	pxEnd = ( void * ) uxAddress;
    16ce:	e7 e4       	ldi	r30, 0x47	; 71
    16d0:	f8 e1       	ldi	r31, 0x18	; 24
    16d2:	f0 93 a6 08 	sts	0x08A6, r31	; 0x8008a6 <pxEnd+0x1>
    16d6:	e0 93 a5 08 	sts	0x08A5, r30	; 0x8008a5 <pxEnd>
	pxEnd->xBlockSize = 0;
    16da:	13 82       	std	Z+3, r1	; 0x03
    16dc:	12 82       	std	Z+2, r1	; 0x02
	pxEnd->pxNextFreeBlock = NULL;
    16de:	11 82       	std	Z+1, r1	; 0x01
    16e0:	10 82       	st	Z, r1

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
    16e2:	8c e9       	ldi	r24, 0x9C	; 156
    16e4:	9f e0       	ldi	r25, 0x0F	; 15
    16e6:	13 96       	adiw	r26, 0x03	; 3
    16e8:	9c 93       	st	X, r25
    16ea:	8e 93       	st	-X, r24
    16ec:	12 97       	sbiw	r26, 0x02	; 2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
    16ee:	ed 93       	st	X+, r30
    16f0:	fc 93       	st	X, r31

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
    16f2:	90 93 a2 08 	sts	0x08A2, r25	; 0x8008a2 <xMinimumEverFreeBytesRemaining+0x1>
    16f6:	80 93 a1 08 	sts	0x08A1, r24	; 0x8008a1 <xMinimumEverFreeBytesRemaining>
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
    16fa:	90 93 a4 08 	sts	0x08A4, r25	; 0x8008a4 <xFreeBytesRemaining+0x1>
    16fe:	80 93 a3 08 	sts	0x08A3, r24	; 0x8008a3 <xFreeBytesRemaining>

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
    1702:	80 e0       	ldi	r24, 0x00	; 0
    1704:	90 e8       	ldi	r25, 0x80	; 128
    1706:	90 93 a0 08 	sts	0x08A0, r25	; 0x8008a0 <xBlockAllocatedBit+0x1>
    170a:	80 93 9f 08 	sts	0x089F, r24	; 0x80089f <xBlockAllocatedBit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
    170e:	e0 90 9f 08 	lds	r14, 0x089F	; 0x80089f <xBlockAllocatedBit>
    1712:	f0 90 a0 08 	lds	r15, 0x08A0	; 0x8008a0 <xBlockAllocatedBit+0x1>
    1716:	c7 01       	movw	r24, r14
    1718:	8c 23       	and	r24, r28
    171a:	9d 23       	and	r25, r29
    171c:	89 2b       	or	r24, r25
    171e:	09 f0       	breq	.+2      	; 0x1722 <pvPortMalloc+0x86>
    1720:	66 c0       	rjmp	.+204    	; 0x17ee <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
    1722:	20 97       	sbiw	r28, 0x00	; 0
    1724:	09 f4       	brne	.+2      	; 0x1728 <pvPortMalloc+0x8c>
    1726:	66 c0       	rjmp	.+204    	; 0x17f4 <pvPortMalloc+0x158>
			{
				xWantedSize += xHeapStructSize;
    1728:	ae 01       	movw	r20, r28
    172a:	4c 5f       	subi	r20, 0xFC	; 252
    172c:	5f 4f       	sbci	r21, 0xFF	; 255
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
    172e:	09 f4       	brne	.+2      	; 0x1732 <pvPortMalloc+0x96>
    1730:	5e c0       	rjmp	.+188    	; 0x17ee <pvPortMalloc+0x152>
    1732:	00 91 a3 08 	lds	r16, 0x08A3	; 0x8008a3 <xFreeBytesRemaining>
    1736:	10 91 a4 08 	lds	r17, 0x08A4	; 0x8008a4 <xFreeBytesRemaining+0x1>
    173a:	04 17       	cp	r16, r20
    173c:	15 07       	cpc	r17, r21
    173e:	08 f4       	brcc	.+2      	; 0x1742 <pvPortMalloc+0xa6>
    1740:	56 c0       	rjmp	.+172    	; 0x17ee <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
    1742:	c0 91 a7 08 	lds	r28, 0x08A7	; 0x8008a7 <xStart>
    1746:	d0 91 a8 08 	lds	r29, 0x08A8	; 0x8008a8 <xStart+0x1>

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
    174a:	e7 ea       	ldi	r30, 0xA7	; 167
    174c:	f8 e0       	ldi	r31, 0x08	; 8
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    174e:	02 c0       	rjmp	.+4      	; 0x1754 <pvPortMalloc+0xb8>
    1750:	fe 01       	movw	r30, r28
				{
					pxPreviousBlock = pxBlock;
					pxBlock = pxBlock->pxNextFreeBlock;
    1752:	e9 01       	movw	r28, r18
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    1754:	2a 81       	ldd	r18, Y+2	; 0x02
    1756:	3b 81       	ldd	r19, Y+3	; 0x03
    1758:	24 17       	cp	r18, r20
    175a:	35 07       	cpc	r19, r21
    175c:	28 f4       	brcc	.+10     	; 0x1768 <pvPortMalloc+0xcc>
    175e:	28 81       	ld	r18, Y
    1760:	39 81       	ldd	r19, Y+1	; 0x01
    1762:	21 15       	cp	r18, r1
    1764:	31 05       	cpc	r19, r1
    1766:	a1 f7       	brne	.-24     	; 0x1750 <pvPortMalloc+0xb4>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
    1768:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <pxEnd>
    176c:	90 91 a6 08 	lds	r25, 0x08A6	; 0x8008a6 <pxEnd+0x1>
    1770:	c8 17       	cp	r28, r24
    1772:	d9 07       	cpc	r29, r25
    1774:	e1 f1       	breq	.+120    	; 0x17ee <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
    1776:	c0 80       	ld	r12, Z
    1778:	d1 80       	ldd	r13, Z+1	; 0x01
    177a:	84 e0       	ldi	r24, 0x04	; 4
    177c:	c8 0e       	add	r12, r24
    177e:	d1 1c       	adc	r13, r1

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    1780:	88 81       	ld	r24, Y
    1782:	99 81       	ldd	r25, Y+1	; 0x01
    1784:	91 83       	std	Z+1, r25	; 0x01
    1786:	80 83       	st	Z, r24

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    1788:	2a 81       	ldd	r18, Y+2	; 0x02
    178a:	3b 81       	ldd	r19, Y+3	; 0x03
    178c:	24 1b       	sub	r18, r20
    178e:	35 0b       	sbc	r19, r21
    1790:	29 30       	cpi	r18, 0x09	; 9
    1792:	31 05       	cpc	r19, r1
    1794:	48 f0       	brcs	.+18     	; 0x17a8 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
    1796:	ce 01       	movw	r24, r28
    1798:	84 0f       	add	r24, r20
    179a:	95 1f       	adc	r25, r21
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    179c:	fc 01       	movw	r30, r24
    179e:	33 83       	std	Z+3, r19	; 0x03
    17a0:	22 83       	std	Z+2, r18	; 0x02
						pxBlock->xBlockSize = xWantedSize;
    17a2:	5b 83       	std	Y+3, r21	; 0x03
    17a4:	4a 83       	std	Y+2, r20	; 0x02

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
    17a6:	2d df       	rcall	.-422    	; 0x1602 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
    17a8:	8a 81       	ldd	r24, Y+2	; 0x02
    17aa:	9b 81       	ldd	r25, Y+3	; 0x03
    17ac:	08 1b       	sub	r16, r24
    17ae:	19 0b       	sbc	r17, r25
    17b0:	10 93 a4 08 	sts	0x08A4, r17	; 0x8008a4 <xFreeBytesRemaining+0x1>
    17b4:	00 93 a3 08 	sts	0x08A3, r16	; 0x8008a3 <xFreeBytesRemaining>

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
    17b8:	20 91 a1 08 	lds	r18, 0x08A1	; 0x8008a1 <xMinimumEverFreeBytesRemaining>
    17bc:	30 91 a2 08 	lds	r19, 0x08A2	; 0x8008a2 <xMinimumEverFreeBytesRemaining+0x1>
    17c0:	02 17       	cp	r16, r18
    17c2:	13 07       	cpc	r17, r19
    17c4:	20 f4       	brcc	.+8      	; 0x17ce <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
    17c6:	10 93 a2 08 	sts	0x08A2, r17	; 0x8008a2 <xMinimumEverFreeBytesRemaining+0x1>
    17ca:	00 93 a1 08 	sts	0x08A1, r16	; 0x8008a1 <xMinimumEverFreeBytesRemaining>
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
    17ce:	e8 2a       	or	r14, r24
    17d0:	f9 2a       	or	r15, r25
    17d2:	fb 82       	std	Y+3, r15	; 0x03
    17d4:	ea 82       	std	Y+2, r14	; 0x02
					pxBlock->pxNextFreeBlock = NULL;
    17d6:	19 82       	std	Y+1, r1	; 0x01
    17d8:	18 82       	st	Y, r1
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    17da:	0e 94 c6 17 	call	0x2f8c	; 0x2f8c <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
    17de:	c1 14       	cp	r12, r1
    17e0:	d1 04       	cpc	r13, r1
    17e2:	59 f4       	brne	.+22     	; 0x17fa <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
    17e4:	0e 94 99 1e 	call	0x3d32	; 0x3d32 <vApplicationMallocFailedHook>
    17e8:	c1 2c       	mov	r12, r1
    17ea:	d1 2c       	mov	r13, r1
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
    17ec:	06 c0       	rjmp	.+12     	; 0x17fa <pvPortMalloc+0x15e>
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    17ee:	0e 94 c6 17 	call	0x2f8c	; 0x2f8c <xTaskResumeAll>
    17f2:	f8 cf       	rjmp	.-16     	; 0x17e4 <pvPortMalloc+0x148>
    17f4:	0e 94 c6 17 	call	0x2f8c	; 0x2f8c <xTaskResumeAll>
    17f8:	f5 cf       	rjmp	.-22     	; 0x17e4 <pvPortMalloc+0x148>
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
}
    17fa:	c6 01       	movw	r24, r12
    17fc:	df 91       	pop	r29
    17fe:	cf 91       	pop	r28
    1800:	1f 91       	pop	r17
    1802:	0f 91       	pop	r16
    1804:	ff 90       	pop	r15
    1806:	ef 90       	pop	r14
    1808:	df 90       	pop	r13
    180a:	cf 90       	pop	r12
    180c:	08 95       	ret

0000180e <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    180e:	cf 93       	push	r28
    1810:	df 93       	push	r29
uint8_t *puc = ( uint8_t * ) pv;
BlockLink_t *pxLink;

	if( pv != NULL )
    1812:	00 97       	sbiw	r24, 0x00	; 0
    1814:	51 f1       	breq	.+84     	; 0x186a <vPortFree+0x5c>

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
		configASSERT( pxLink->pxNextFreeBlock == NULL );

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
    1816:	fc 01       	movw	r30, r24
    1818:	34 97       	sbiw	r30, 0x04	; 4
    181a:	22 81       	ldd	r18, Z+2	; 0x02
    181c:	33 81       	ldd	r19, Z+3	; 0x03
    181e:	40 91 9f 08 	lds	r20, 0x089F	; 0x80089f <xBlockAllocatedBit>
    1822:	50 91 a0 08 	lds	r21, 0x08A0	; 0x8008a0 <xBlockAllocatedBit+0x1>
    1826:	b9 01       	movw	r22, r18
    1828:	64 23       	and	r22, r20
    182a:	75 23       	and	r23, r21
    182c:	67 2b       	or	r22, r23
    182e:	e9 f0       	breq	.+58     	; 0x186a <vPortFree+0x5c>
		{
			if( pxLink->pxNextFreeBlock == NULL )
    1830:	60 81       	ld	r22, Z
    1832:	71 81       	ldd	r23, Z+1	; 0x01
    1834:	67 2b       	or	r22, r23
    1836:	c9 f4       	brne	.+50     	; 0x186a <vPortFree+0x5c>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
    1838:	ef 01       	movw	r28, r30
    183a:	40 95       	com	r20
    183c:	50 95       	com	r21
    183e:	24 23       	and	r18, r20
    1840:	35 23       	and	r19, r21
    1842:	33 83       	std	Z+3, r19	; 0x03
    1844:	22 83       	std	Z+2, r18	; 0x02

				vTaskSuspendAll();
    1846:	0e 94 dd 16 	call	0x2dba	; 0x2dba <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
    184a:	20 91 a3 08 	lds	r18, 0x08A3	; 0x8008a3 <xFreeBytesRemaining>
    184e:	30 91 a4 08 	lds	r19, 0x08A4	; 0x8008a4 <xFreeBytesRemaining+0x1>
    1852:	8a 81       	ldd	r24, Y+2	; 0x02
    1854:	9b 81       	ldd	r25, Y+3	; 0x03
    1856:	82 0f       	add	r24, r18
    1858:	93 1f       	adc	r25, r19
    185a:	90 93 a4 08 	sts	0x08A4, r25	; 0x8008a4 <xFreeBytesRemaining+0x1>
    185e:	80 93 a3 08 	sts	0x08A3, r24	; 0x8008a3 <xFreeBytesRemaining>
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
    1862:	ce 01       	movw	r24, r28
    1864:	ce de       	rcall	.-612    	; 0x1602 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
    1866:	0e 94 c6 17 	call	0x2f8c	; 0x2f8c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
    186a:	df 91       	pop	r29
    186c:	cf 91       	pop	r28
    186e:	08 95       	ret

00001870 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    1870:	fc 01       	movw	r30, r24
    /* The list structure contains a list item which is used to mark the
    end of the list.  To initialise the list the list end is inserted
    as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );            /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1872:	03 96       	adiw	r24, 0x03	; 3
    1874:	92 83       	std	Z+2, r25	; 0x02
    1876:	81 83       	std	Z+1, r24	; 0x01

    /* The list end value is the highest possible value in the list to
    ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
    1878:	4f ef       	ldi	r20, 0xFF	; 255
    187a:	5f ef       	ldi	r21, 0xFF	; 255
    187c:	ba 01       	movw	r22, r20
    187e:	43 83       	std	Z+3, r20	; 0x03
    1880:	54 83       	std	Z+4, r21	; 0x04
    1882:	65 83       	std	Z+5, r22	; 0x05
    1884:	76 83       	std	Z+6, r23	; 0x06

    /* The list end next and previous pointers point to itself so we know
    when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );    /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1886:	90 87       	std	Z+8, r25	; 0x08
    1888:	87 83       	std	Z+7, r24	; 0x07
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    188a:	92 87       	std	Z+10, r25	; 0x0a
    188c:	81 87       	std	Z+9, r24	; 0x09

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    188e:	10 82       	st	Z, r1
    1890:	08 95       	ret

00001892 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
    1892:	fc 01       	movw	r30, r24
    1894:	13 86       	std	Z+11, r1	; 0x0b
    1896:	12 86       	std	Z+10, r1	; 0x0a
    1898:	08 95       	ret

0000189a <vListInsertEnd>:
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    189a:	cf 93       	push	r28
    189c:	df 93       	push	r29
    189e:	9c 01       	movw	r18, r24
    18a0:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
    18a2:	dc 01       	movw	r26, r24
    18a4:	11 96       	adiw	r26, 0x01	; 1
    18a6:	cd 91       	ld	r28, X+
    18a8:	dc 91       	ld	r29, X
    18aa:	12 97       	sbiw	r26, 0x02	; 2
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
    makes the new list item the last item to be removed by a call to
    listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
    18ac:	d5 83       	std	Z+5, r29	; 0x05
    18ae:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    18b0:	8e 81       	ldd	r24, Y+6	; 0x06
    18b2:	9f 81       	ldd	r25, Y+7	; 0x07
    18b4:	97 83       	std	Z+7, r25	; 0x07
    18b6:	86 83       	std	Z+6, r24	; 0x06

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
    18b8:	8e 81       	ldd	r24, Y+6	; 0x06
    18ba:	9f 81       	ldd	r25, Y+7	; 0x07
    18bc:	dc 01       	movw	r26, r24
    18be:	15 96       	adiw	r26, 0x05	; 5
    18c0:	7c 93       	st	X, r23
    18c2:	6e 93       	st	-X, r22
    18c4:	14 97       	sbiw	r26, 0x04	; 4
    pxIndex->pxPrevious = pxNewListItem;
    18c6:	7f 83       	std	Y+7, r23	; 0x07
    18c8:	6e 83       	std	Y+6, r22	; 0x06

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
    18ca:	33 87       	std	Z+11, r19	; 0x0b
    18cc:	22 87       	std	Z+10, r18	; 0x0a

    ( pxList->uxNumberOfItems )++;
    18ce:	f9 01       	movw	r30, r18
    18d0:	80 81       	ld	r24, Z
    18d2:	8f 5f       	subi	r24, 0xFF	; 255
    18d4:	80 83       	st	Z, r24
}
    18d6:	df 91       	pop	r29
    18d8:	cf 91       	pop	r28
    18da:	08 95       	ret

000018dc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    18dc:	0f 93       	push	r16
    18de:	1f 93       	push	r17
    18e0:	cf 93       	push	r28
    18e2:	df 93       	push	r29
    18e4:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    18e6:	08 81       	ld	r16, Y
    18e8:	19 81       	ldd	r17, Y+1	; 0x01
    18ea:	2a 81       	ldd	r18, Y+2	; 0x02
    18ec:	3b 81       	ldd	r19, Y+3	; 0x03
    new list item should be placed after it.  This ensures that TCBs which are
    stored in ready lists (all of which have the same xItemValue value) get a
    share of the CPU.  However, if the xItemValue is the same as the back marker
    the iteration loop below will not end.  Therefore the value is checked
    first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
    18ee:	0f 3f       	cpi	r16, 0xFF	; 255
    18f0:	4f ef       	ldi	r20, 0xFF	; 255
    18f2:	14 07       	cpc	r17, r20
    18f4:	24 07       	cpc	r18, r20
    18f6:	34 07       	cpc	r19, r20
    18f8:	21 f4       	brne	.+8      	; 0x1902 <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
    18fa:	fc 01       	movw	r30, r24
    18fc:	a1 85       	ldd	r26, Z+9	; 0x09
    18fe:	b2 85       	ldd	r27, Z+10	; 0x0a
    1900:	11 c0       	rjmp	.+34     	; 0x1924 <vListInsert+0x48>
            4) Using a queue or semaphore before it has been initialised or
               before the scheduler has been started (are interrupts firing
               before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
    1902:	dc 01       	movw	r26, r24
    1904:	13 96       	adiw	r26, 0x03	; 3
    1906:	01 c0       	rjmp	.+2      	; 0x190a <vListInsert+0x2e>
    1908:	df 01       	movw	r26, r30
    190a:	14 96       	adiw	r26, 0x04	; 4
    190c:	ed 91       	ld	r30, X+
    190e:	fc 91       	ld	r31, X
    1910:	15 97       	sbiw	r26, 0x05	; 5
    1912:	40 81       	ld	r20, Z
    1914:	51 81       	ldd	r21, Z+1	; 0x01
    1916:	62 81       	ldd	r22, Z+2	; 0x02
    1918:	73 81       	ldd	r23, Z+3	; 0x03
    191a:	04 17       	cp	r16, r20
    191c:	15 07       	cpc	r17, r21
    191e:	26 07       	cpc	r18, r22
    1920:	37 07       	cpc	r19, r23
    1922:	90 f7       	brcc	.-28     	; 0x1908 <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
            insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
    1924:	14 96       	adiw	r26, 0x04	; 4
    1926:	ed 91       	ld	r30, X+
    1928:	fc 91       	ld	r31, X
    192a:	15 97       	sbiw	r26, 0x05	; 5
    192c:	fd 83       	std	Y+5, r31	; 0x05
    192e:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    1930:	d7 83       	std	Z+7, r29	; 0x07
    1932:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
    1934:	bf 83       	std	Y+7, r27	; 0x07
    1936:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
    1938:	15 96       	adiw	r26, 0x05	; 5
    193a:	dc 93       	st	X, r29
    193c:	ce 93       	st	-X, r28
    193e:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
    item later. */
    pxNewListItem->pxContainer = pxList;
    1940:	9b 87       	std	Y+11, r25	; 0x0b
    1942:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
    1944:	fc 01       	movw	r30, r24
    1946:	20 81       	ld	r18, Z
    1948:	2f 5f       	subi	r18, 0xFF	; 255
    194a:	20 83       	st	Z, r18
}
    194c:	df 91       	pop	r29
    194e:	cf 91       	pop	r28
    1950:	1f 91       	pop	r17
    1952:	0f 91       	pop	r16
    1954:	08 95       	ret

00001956 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    1956:	cf 93       	push	r28
    1958:	df 93       	push	r29
    195a:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
    195c:	a2 85       	ldd	r26, Z+10	; 0x0a
    195e:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    1960:	c4 81       	ldd	r28, Z+4	; 0x04
    1962:	d5 81       	ldd	r29, Z+5	; 0x05
    1964:	86 81       	ldd	r24, Z+6	; 0x06
    1966:	97 81       	ldd	r25, Z+7	; 0x07
    1968:	9f 83       	std	Y+7, r25	; 0x07
    196a:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    196c:	c6 81       	ldd	r28, Z+6	; 0x06
    196e:	d7 81       	ldd	r29, Z+7	; 0x07
    1970:	84 81       	ldd	r24, Z+4	; 0x04
    1972:	95 81       	ldd	r25, Z+5	; 0x05
    1974:	9d 83       	std	Y+5, r25	; 0x05
    1976:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
    1978:	11 96       	adiw	r26, 0x01	; 1
    197a:	8d 91       	ld	r24, X+
    197c:	9c 91       	ld	r25, X
    197e:	12 97       	sbiw	r26, 0x02	; 2
    1980:	e8 17       	cp	r30, r24
    1982:	f9 07       	cpc	r31, r25
    1984:	31 f4       	brne	.+12     	; 0x1992 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
    1986:	86 81       	ldd	r24, Z+6	; 0x06
    1988:	97 81       	ldd	r25, Z+7	; 0x07
    198a:	12 96       	adiw	r26, 0x02	; 2
    198c:	9c 93       	st	X, r25
    198e:	8e 93       	st	-X, r24
    1990:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
    1992:	13 86       	std	Z+11, r1	; 0x0b
    1994:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
    1996:	8c 91       	ld	r24, X
    1998:	81 50       	subi	r24, 0x01	; 1
    199a:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
    199c:	8c 91       	ld	r24, X
}
    199e:	df 91       	pop	r29
    19a0:	cf 91       	pop	r28
    19a2:	08 95       	ret

000019a4 <pxPortInitialiseStack>:
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    19a4:	31 e1       	ldi	r19, 0x11	; 17
    19a6:	fc 01       	movw	r30, r24
    19a8:	30 83       	st	Z, r19
    19aa:	31 97       	sbiw	r30, 0x01	; 1
    19ac:	22 e2       	ldi	r18, 0x22	; 34
    19ae:	20 83       	st	Z, r18
    19b0:	31 97       	sbiw	r30, 0x01	; 1
    19b2:	a3 e3       	ldi	r26, 0x33	; 51
    19b4:	a0 83       	st	Z, r26
    19b6:	31 97       	sbiw	r30, 0x01	; 1
    19b8:	60 83       	st	Z, r22
    19ba:	31 97       	sbiw	r30, 0x01	; 1
    19bc:	70 83       	st	Z, r23
    19be:	31 97       	sbiw	r30, 0x01	; 1
    19c0:	10 82       	st	Z, r1
    19c2:	31 97       	sbiw	r30, 0x01	; 1
    19c4:	10 82       	st	Z, r1
    19c6:	31 97       	sbiw	r30, 0x01	; 1
    19c8:	60 e8       	ldi	r22, 0x80	; 128
    19ca:	60 83       	st	Z, r22
    19cc:	31 97       	sbiw	r30, 0x01	; 1
    19ce:	10 82       	st	Z, r1
    19d0:	31 97       	sbiw	r30, 0x01	; 1
    19d2:	10 82       	st	Z, r1
    19d4:	31 97       	sbiw	r30, 0x01	; 1
    19d6:	10 82       	st	Z, r1
    19d8:	31 97       	sbiw	r30, 0x01	; 1
    19da:	62 e0       	ldi	r22, 0x02	; 2
    19dc:	60 83       	st	Z, r22
    19de:	31 97       	sbiw	r30, 0x01	; 1
    19e0:	63 e0       	ldi	r22, 0x03	; 3
    19e2:	60 83       	st	Z, r22
    19e4:	31 97       	sbiw	r30, 0x01	; 1
    19e6:	64 e0       	ldi	r22, 0x04	; 4
    19e8:	60 83       	st	Z, r22
    19ea:	31 97       	sbiw	r30, 0x01	; 1
    19ec:	65 e0       	ldi	r22, 0x05	; 5
    19ee:	60 83       	st	Z, r22
    19f0:	31 97       	sbiw	r30, 0x01	; 1
    19f2:	66 e0       	ldi	r22, 0x06	; 6
    19f4:	60 83       	st	Z, r22
    19f6:	31 97       	sbiw	r30, 0x01	; 1
    19f8:	67 e0       	ldi	r22, 0x07	; 7
    19fa:	60 83       	st	Z, r22
    19fc:	31 97       	sbiw	r30, 0x01	; 1
    19fe:	68 e0       	ldi	r22, 0x08	; 8
    1a00:	60 83       	st	Z, r22
    1a02:	31 97       	sbiw	r30, 0x01	; 1
    1a04:	69 e0       	ldi	r22, 0x09	; 9
    1a06:	60 83       	st	Z, r22
    1a08:	31 97       	sbiw	r30, 0x01	; 1
    1a0a:	60 e1       	ldi	r22, 0x10	; 16
    1a0c:	60 83       	st	Z, r22
    1a0e:	31 97       	sbiw	r30, 0x01	; 1
    1a10:	30 83       	st	Z, r19
    1a12:	31 97       	sbiw	r30, 0x01	; 1
    1a14:	32 e1       	ldi	r19, 0x12	; 18
    1a16:	30 83       	st	Z, r19
    1a18:	31 97       	sbiw	r30, 0x01	; 1
    1a1a:	33 e1       	ldi	r19, 0x13	; 19
    1a1c:	30 83       	st	Z, r19
    1a1e:	31 97       	sbiw	r30, 0x01	; 1
    1a20:	34 e1       	ldi	r19, 0x14	; 20
    1a22:	30 83       	st	Z, r19
    1a24:	31 97       	sbiw	r30, 0x01	; 1
    1a26:	35 e1       	ldi	r19, 0x15	; 21
    1a28:	30 83       	st	Z, r19
    1a2a:	31 97       	sbiw	r30, 0x01	; 1
    1a2c:	36 e1       	ldi	r19, 0x16	; 22
    1a2e:	30 83       	st	Z, r19
    1a30:	31 97       	sbiw	r30, 0x01	; 1
    1a32:	37 e1       	ldi	r19, 0x17	; 23
    1a34:	30 83       	st	Z, r19
    1a36:	31 97       	sbiw	r30, 0x01	; 1
    1a38:	38 e1       	ldi	r19, 0x18	; 24
    1a3a:	30 83       	st	Z, r19
    1a3c:	31 97       	sbiw	r30, 0x01	; 1
    1a3e:	39 e1       	ldi	r19, 0x19	; 25
    1a40:	30 83       	st	Z, r19
    1a42:	31 97       	sbiw	r30, 0x01	; 1
    1a44:	30 e2       	ldi	r19, 0x20	; 32
    1a46:	30 83       	st	Z, r19
    1a48:	31 97       	sbiw	r30, 0x01	; 1
    1a4a:	31 e2       	ldi	r19, 0x21	; 33
    1a4c:	30 83       	st	Z, r19
    1a4e:	31 97       	sbiw	r30, 0x01	; 1
    1a50:	20 83       	st	Z, r18
    1a52:	31 97       	sbiw	r30, 0x01	; 1
    1a54:	23 e2       	ldi	r18, 0x23	; 35
    1a56:	20 83       	st	Z, r18
    1a58:	31 97       	sbiw	r30, 0x01	; 1
    1a5a:	40 83       	st	Z, r20
    1a5c:	31 97       	sbiw	r30, 0x01	; 1
    1a5e:	50 83       	st	Z, r21
    1a60:	31 97       	sbiw	r30, 0x01	; 1
    1a62:	26 e2       	ldi	r18, 0x26	; 38
    1a64:	20 83       	st	Z, r18
    1a66:	31 97       	sbiw	r30, 0x01	; 1
    1a68:	27 e2       	ldi	r18, 0x27	; 39
    1a6a:	20 83       	st	Z, r18
    1a6c:	31 97       	sbiw	r30, 0x01	; 1
    1a6e:	28 e2       	ldi	r18, 0x28	; 40
    1a70:	20 83       	st	Z, r18
    1a72:	31 97       	sbiw	r30, 0x01	; 1
    1a74:	29 e2       	ldi	r18, 0x29	; 41
    1a76:	20 83       	st	Z, r18
    1a78:	31 97       	sbiw	r30, 0x01	; 1
    1a7a:	20 e3       	ldi	r18, 0x30	; 48
    1a7c:	20 83       	st	Z, r18
    1a7e:	31 97       	sbiw	r30, 0x01	; 1
    1a80:	21 e3       	ldi	r18, 0x31	; 49
    1a82:	20 83       	st	Z, r18
    1a84:	89 97       	sbiw	r24, 0x29	; 41
    1a86:	08 95       	ret

00001a88 <xPortStartScheduler>:
    1a88:	a8 95       	wdr
    1a8a:	90 ec       	ldi	r25, 0xC0	; 192
    1a8c:	88 e1       	ldi	r24, 0x18	; 24
    1a8e:	0f b6       	in	r0, 0x3f	; 63
    1a90:	f8 94       	cli
    1a92:	a8 95       	wdr
    1a94:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    1a98:	0f be       	out	0x3f, r0	; 63
    1a9a:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    1a9e:	a0 91 c5 18 	lds	r26, 0x18C5	; 0x8018c5 <pxCurrentTCB>
    1aa2:	b0 91 c6 18 	lds	r27, 0x18C6	; 0x8018c6 <pxCurrentTCB+0x1>
    1aa6:	cd 91       	ld	r28, X+
    1aa8:	cd bf       	out	0x3d, r28	; 61
    1aaa:	dd 91       	ld	r29, X+
    1aac:	de bf       	out	0x3e, r29	; 62
    1aae:	ff 91       	pop	r31
    1ab0:	ef 91       	pop	r30
    1ab2:	df 91       	pop	r29
    1ab4:	cf 91       	pop	r28
    1ab6:	bf 91       	pop	r27
    1ab8:	af 91       	pop	r26
    1aba:	9f 91       	pop	r25
    1abc:	8f 91       	pop	r24
    1abe:	7f 91       	pop	r23
    1ac0:	6f 91       	pop	r22
    1ac2:	5f 91       	pop	r21
    1ac4:	4f 91       	pop	r20
    1ac6:	3f 91       	pop	r19
    1ac8:	2f 91       	pop	r18
    1aca:	1f 91       	pop	r17
    1acc:	0f 91       	pop	r16
    1ace:	ff 90       	pop	r15
    1ad0:	ef 90       	pop	r14
    1ad2:	df 90       	pop	r13
    1ad4:	cf 90       	pop	r12
    1ad6:	bf 90       	pop	r11
    1ad8:	af 90       	pop	r10
    1ada:	9f 90       	pop	r9
    1adc:	8f 90       	pop	r8
    1ade:	7f 90       	pop	r7
    1ae0:	6f 90       	pop	r6
    1ae2:	5f 90       	pop	r5
    1ae4:	4f 90       	pop	r4
    1ae6:	3f 90       	pop	r3
    1ae8:	2f 90       	pop	r2
    1aea:	1f 90       	pop	r1
    1aec:	0f 90       	pop	r0
    1aee:	0c be       	out	0x3c, r0	; 60
    1af0:	0f 90       	pop	r0
    1af2:	0b be       	out	0x3b, r0	; 59
    1af4:	0f 90       	pop	r0
    1af6:	0f be       	out	0x3f, r0	; 63
    1af8:	0f 90       	pop	r0
    1afa:	08 95       	ret
    1afc:	81 e0       	ldi	r24, 0x01	; 1
    1afe:	08 95       	ret

00001b00 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYield( void )
{
    portSAVE_CONTEXT();
    1b00:	0f 92       	push	r0
    1b02:	0f b6       	in	r0, 0x3f	; 63
    1b04:	f8 94       	cli
    1b06:	0f 92       	push	r0
    1b08:	0b b6       	in	r0, 0x3b	; 59
    1b0a:	0f 92       	push	r0
    1b0c:	0c b6       	in	r0, 0x3c	; 60
    1b0e:	0f 92       	push	r0
    1b10:	1f 92       	push	r1
    1b12:	11 24       	eor	r1, r1
    1b14:	2f 92       	push	r2
    1b16:	3f 92       	push	r3
    1b18:	4f 92       	push	r4
    1b1a:	5f 92       	push	r5
    1b1c:	6f 92       	push	r6
    1b1e:	7f 92       	push	r7
    1b20:	8f 92       	push	r8
    1b22:	9f 92       	push	r9
    1b24:	af 92       	push	r10
    1b26:	bf 92       	push	r11
    1b28:	cf 92       	push	r12
    1b2a:	df 92       	push	r13
    1b2c:	ef 92       	push	r14
    1b2e:	ff 92       	push	r15
    1b30:	0f 93       	push	r16
    1b32:	1f 93       	push	r17
    1b34:	2f 93       	push	r18
    1b36:	3f 93       	push	r19
    1b38:	4f 93       	push	r20
    1b3a:	5f 93       	push	r21
    1b3c:	6f 93       	push	r22
    1b3e:	7f 93       	push	r23
    1b40:	8f 93       	push	r24
    1b42:	9f 93       	push	r25
    1b44:	af 93       	push	r26
    1b46:	bf 93       	push	r27
    1b48:	cf 93       	push	r28
    1b4a:	df 93       	push	r29
    1b4c:	ef 93       	push	r30
    1b4e:	ff 93       	push	r31
    1b50:	a0 91 c5 18 	lds	r26, 0x18C5	; 0x8018c5 <pxCurrentTCB>
    1b54:	b0 91 c6 18 	lds	r27, 0x18C6	; 0x8018c6 <pxCurrentTCB+0x1>
    1b58:	0d b6       	in	r0, 0x3d	; 61
    1b5a:	0d 92       	st	X+, r0
    1b5c:	0e b6       	in	r0, 0x3e	; 62
    1b5e:	0d 92       	st	X+, r0
    vTaskSwitchContext();
    1b60:	0e 94 5b 18 	call	0x30b6	; 0x30b6 <vTaskSwitchContext>
    portRESTORE_CONTEXT();
    1b64:	a0 91 c5 18 	lds	r26, 0x18C5	; 0x8018c5 <pxCurrentTCB>
    1b68:	b0 91 c6 18 	lds	r27, 0x18C6	; 0x8018c6 <pxCurrentTCB+0x1>
    1b6c:	cd 91       	ld	r28, X+
    1b6e:	cd bf       	out	0x3d, r28	; 61
    1b70:	dd 91       	ld	r29, X+
    1b72:	de bf       	out	0x3e, r29	; 62
    1b74:	ff 91       	pop	r31
    1b76:	ef 91       	pop	r30
    1b78:	df 91       	pop	r29
    1b7a:	cf 91       	pop	r28
    1b7c:	bf 91       	pop	r27
    1b7e:	af 91       	pop	r26
    1b80:	9f 91       	pop	r25
    1b82:	8f 91       	pop	r24
    1b84:	7f 91       	pop	r23
    1b86:	6f 91       	pop	r22
    1b88:	5f 91       	pop	r21
    1b8a:	4f 91       	pop	r20
    1b8c:	3f 91       	pop	r19
    1b8e:	2f 91       	pop	r18
    1b90:	1f 91       	pop	r17
    1b92:	0f 91       	pop	r16
    1b94:	ff 90       	pop	r15
    1b96:	ef 90       	pop	r14
    1b98:	df 90       	pop	r13
    1b9a:	cf 90       	pop	r12
    1b9c:	bf 90       	pop	r11
    1b9e:	af 90       	pop	r10
    1ba0:	9f 90       	pop	r9
    1ba2:	8f 90       	pop	r8
    1ba4:	7f 90       	pop	r7
    1ba6:	6f 90       	pop	r6
    1ba8:	5f 90       	pop	r5
    1baa:	4f 90       	pop	r4
    1bac:	3f 90       	pop	r3
    1bae:	2f 90       	pop	r2
    1bb0:	1f 90       	pop	r1
    1bb2:	0f 90       	pop	r0
    1bb4:	0c be       	out	0x3c, r0	; 60
    1bb6:	0f 90       	pop	r0
    1bb8:	0b be       	out	0x3b, r0	; 59
    1bba:	0f 90       	pop	r0
    1bbc:	0f be       	out	0x3f, r0	; 63
    1bbe:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
    1bc0:	08 95       	ret

00001bc2 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
    1bc2:	0f 92       	push	r0
    1bc4:	0f b6       	in	r0, 0x3f	; 63
    1bc6:	f8 94       	cli
    1bc8:	0f 92       	push	r0
    1bca:	0b b6       	in	r0, 0x3b	; 59
    1bcc:	0f 92       	push	r0
    1bce:	0c b6       	in	r0, 0x3c	; 60
    1bd0:	0f 92       	push	r0
    1bd2:	1f 92       	push	r1
    1bd4:	11 24       	eor	r1, r1
    1bd6:	2f 92       	push	r2
    1bd8:	3f 92       	push	r3
    1bda:	4f 92       	push	r4
    1bdc:	5f 92       	push	r5
    1bde:	6f 92       	push	r6
    1be0:	7f 92       	push	r7
    1be2:	8f 92       	push	r8
    1be4:	9f 92       	push	r9
    1be6:	af 92       	push	r10
    1be8:	bf 92       	push	r11
    1bea:	cf 92       	push	r12
    1bec:	df 92       	push	r13
    1bee:	ef 92       	push	r14
    1bf0:	ff 92       	push	r15
    1bf2:	0f 93       	push	r16
    1bf4:	1f 93       	push	r17
    1bf6:	2f 93       	push	r18
    1bf8:	3f 93       	push	r19
    1bfa:	4f 93       	push	r20
    1bfc:	5f 93       	push	r21
    1bfe:	6f 93       	push	r22
    1c00:	7f 93       	push	r23
    1c02:	8f 93       	push	r24
    1c04:	9f 93       	push	r25
    1c06:	af 93       	push	r26
    1c08:	bf 93       	push	r27
    1c0a:	cf 93       	push	r28
    1c0c:	df 93       	push	r29
    1c0e:	ef 93       	push	r30
    1c10:	ff 93       	push	r31
    1c12:	a0 91 c5 18 	lds	r26, 0x18C5	; 0x8018c5 <pxCurrentTCB>
    1c16:	b0 91 c6 18 	lds	r27, 0x18C6	; 0x8018c6 <pxCurrentTCB+0x1>
    1c1a:	0d b6       	in	r0, 0x3d	; 61
    1c1c:	0d 92       	st	X+, r0
    1c1e:	0e b6       	in	r0, 0x3e	; 62
    1c20:	0d 92       	st	X+, r0

    sleep_reset();        //     reset the sleep_mode() faster than sleep_disable();
    1c22:	13 be       	out	0x33, r1	; 51

    if( xTaskIncrementTick() != pdFALSE )
    1c24:	0e 94 f1 16 	call	0x2de2	; 0x2de2 <xTaskIncrementTick>
    1c28:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
    1c2a:	0e 94 5b 18 	call	0x30b6	; 0x30b6 <vTaskSwitchContext>
    }

    portRESTORE_CONTEXT();
    1c2e:	a0 91 c5 18 	lds	r26, 0x18C5	; 0x8018c5 <pxCurrentTCB>
    1c32:	b0 91 c6 18 	lds	r27, 0x18C6	; 0x8018c6 <pxCurrentTCB+0x1>
    1c36:	cd 91       	ld	r28, X+
    1c38:	cd bf       	out	0x3d, r28	; 61
    1c3a:	dd 91       	ld	r29, X+
    1c3c:	de bf       	out	0x3e, r29	; 62
    1c3e:	ff 91       	pop	r31
    1c40:	ef 91       	pop	r30
    1c42:	df 91       	pop	r29
    1c44:	cf 91       	pop	r28
    1c46:	bf 91       	pop	r27
    1c48:	af 91       	pop	r26
    1c4a:	9f 91       	pop	r25
    1c4c:	8f 91       	pop	r24
    1c4e:	7f 91       	pop	r23
    1c50:	6f 91       	pop	r22
    1c52:	5f 91       	pop	r21
    1c54:	4f 91       	pop	r20
    1c56:	3f 91       	pop	r19
    1c58:	2f 91       	pop	r18
    1c5a:	1f 91       	pop	r17
    1c5c:	0f 91       	pop	r16
    1c5e:	ff 90       	pop	r15
    1c60:	ef 90       	pop	r14
    1c62:	df 90       	pop	r13
    1c64:	cf 90       	pop	r12
    1c66:	bf 90       	pop	r11
    1c68:	af 90       	pop	r10
    1c6a:	9f 90       	pop	r9
    1c6c:	8f 90       	pop	r8
    1c6e:	7f 90       	pop	r7
    1c70:	6f 90       	pop	r6
    1c72:	5f 90       	pop	r5
    1c74:	4f 90       	pop	r4
    1c76:	3f 90       	pop	r3
    1c78:	2f 90       	pop	r2
    1c7a:	1f 90       	pop	r1
    1c7c:	0f 90       	pop	r0
    1c7e:	0c be       	out	0x3c, r0	; 60
    1c80:	0f 90       	pop	r0
    1c82:	0b be       	out	0x3b, r0	; 59
    1c84:	0f 90       	pop	r0
    1c86:	0f be       	out	0x3f, r0	; 63
    1c88:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
    1c8a:	08 95       	ret

00001c8c <__vector_12>:
     */
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
//  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
    1c8c:	9a df       	rcall	.-204    	; 0x1bc2 <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
    1c8e:	18 95       	reti

00001c90 <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    1c90:	0f b6       	in	r0, 0x3f	; 63
    1c92:	f8 94       	cli
    1c94:	0f 92       	push	r0
    1c96:	fc 01       	movw	r30, r24
    1c98:	96 8d       	ldd	r25, Z+30	; 0x1e
    1c9a:	0f 90       	pop	r0
    1c9c:	0f be       	out	0x3f, r0	; 63
    1c9e:	81 e0       	ldi	r24, 0x01	; 1
    1ca0:	91 11       	cpse	r25, r1
    1ca2:	80 e0       	ldi	r24, 0x00	; 0
    1ca4:	08 95       	ret

00001ca6 <prvCopyDataToQueue>:
    1ca6:	0f 93       	push	r16
    1ca8:	1f 93       	push	r17
    1caa:	cf 93       	push	r28
    1cac:	df 93       	push	r29
    1cae:	ec 01       	movw	r28, r24
    1cb0:	04 2f       	mov	r16, r20
    1cb2:	1e 8d       	ldd	r17, Y+30	; 0x1e
    1cb4:	48 a1       	ldd	r20, Y+32	; 0x20
    1cb6:	41 11       	cpse	r20, r1
    1cb8:	0c c0       	rjmp	.+24     	; 0x1cd2 <prvCopyDataToQueue+0x2c>
    1cba:	88 81       	ld	r24, Y
    1cbc:	99 81       	ldd	r25, Y+1	; 0x01
    1cbe:	89 2b       	or	r24, r25
    1cc0:	09 f0       	breq	.+2      	; 0x1cc4 <prvCopyDataToQueue+0x1e>
    1cc2:	42 c0       	rjmp	.+132    	; 0x1d48 <prvCopyDataToQueue+0xa2>
    1cc4:	8c 81       	ldd	r24, Y+4	; 0x04
    1cc6:	9d 81       	ldd	r25, Y+5	; 0x05
    1cc8:	0e 94 ac 1a 	call	0x3558	; 0x3558 <xTaskPriorityDisinherit>
    1ccc:	1d 82       	std	Y+5, r1	; 0x05
    1cce:	1c 82       	std	Y+4, r1	; 0x04
    1cd0:	42 c0       	rjmp	.+132    	; 0x1d56 <prvCopyDataToQueue+0xb0>
    1cd2:	01 11       	cpse	r16, r1
    1cd4:	17 c0       	rjmp	.+46     	; 0x1d04 <prvCopyDataToQueue+0x5e>
    1cd6:	50 e0       	ldi	r21, 0x00	; 0
    1cd8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cda:	9b 81       	ldd	r25, Y+3	; 0x03
    1cdc:	0e 94 42 31 	call	0x6284	; 0x6284 <memcpy>
    1ce0:	28 a1       	ldd	r18, Y+32	; 0x20
    1ce2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ce4:	9b 81       	ldd	r25, Y+3	; 0x03
    1ce6:	82 0f       	add	r24, r18
    1ce8:	91 1d       	adc	r25, r1
    1cea:	9b 83       	std	Y+3, r25	; 0x03
    1cec:	8a 83       	std	Y+2, r24	; 0x02
    1cee:	2c 81       	ldd	r18, Y+4	; 0x04
    1cf0:	3d 81       	ldd	r19, Y+5	; 0x05
    1cf2:	82 17       	cp	r24, r18
    1cf4:	93 07       	cpc	r25, r19
    1cf6:	50 f1       	brcs	.+84     	; 0x1d4c <prvCopyDataToQueue+0xa6>
    1cf8:	88 81       	ld	r24, Y
    1cfa:	99 81       	ldd	r25, Y+1	; 0x01
    1cfc:	9b 83       	std	Y+3, r25	; 0x03
    1cfe:	8a 83       	std	Y+2, r24	; 0x02
    1d00:	80 e0       	ldi	r24, 0x00	; 0
    1d02:	29 c0       	rjmp	.+82     	; 0x1d56 <prvCopyDataToQueue+0xb0>
    1d04:	50 e0       	ldi	r21, 0x00	; 0
    1d06:	8e 81       	ldd	r24, Y+6	; 0x06
    1d08:	9f 81       	ldd	r25, Y+7	; 0x07
    1d0a:	0e 94 42 31 	call	0x6284	; 0x6284 <memcpy>
    1d0e:	88 a1       	ldd	r24, Y+32	; 0x20
    1d10:	90 e0       	ldi	r25, 0x00	; 0
    1d12:	91 95       	neg	r25
    1d14:	81 95       	neg	r24
    1d16:	91 09       	sbc	r25, r1
    1d18:	2e 81       	ldd	r18, Y+6	; 0x06
    1d1a:	3f 81       	ldd	r19, Y+7	; 0x07
    1d1c:	28 0f       	add	r18, r24
    1d1e:	39 1f       	adc	r19, r25
    1d20:	3f 83       	std	Y+7, r19	; 0x07
    1d22:	2e 83       	std	Y+6, r18	; 0x06
    1d24:	48 81       	ld	r20, Y
    1d26:	59 81       	ldd	r21, Y+1	; 0x01
    1d28:	24 17       	cp	r18, r20
    1d2a:	35 07       	cpc	r19, r21
    1d2c:	30 f4       	brcc	.+12     	; 0x1d3a <prvCopyDataToQueue+0x94>
    1d2e:	2c 81       	ldd	r18, Y+4	; 0x04
    1d30:	3d 81       	ldd	r19, Y+5	; 0x05
    1d32:	82 0f       	add	r24, r18
    1d34:	93 1f       	adc	r25, r19
    1d36:	9f 83       	std	Y+7, r25	; 0x07
    1d38:	8e 83       	std	Y+6, r24	; 0x06
    1d3a:	02 30       	cpi	r16, 0x02	; 2
    1d3c:	49 f4       	brne	.+18     	; 0x1d50 <prvCopyDataToQueue+0xaa>
    1d3e:	11 23       	and	r17, r17
    1d40:	49 f0       	breq	.+18     	; 0x1d54 <prvCopyDataToQueue+0xae>
    1d42:	11 50       	subi	r17, 0x01	; 1
    1d44:	80 e0       	ldi	r24, 0x00	; 0
    1d46:	07 c0       	rjmp	.+14     	; 0x1d56 <prvCopyDataToQueue+0xb0>
    1d48:	80 e0       	ldi	r24, 0x00	; 0
    1d4a:	05 c0       	rjmp	.+10     	; 0x1d56 <prvCopyDataToQueue+0xb0>
    1d4c:	80 e0       	ldi	r24, 0x00	; 0
    1d4e:	03 c0       	rjmp	.+6      	; 0x1d56 <prvCopyDataToQueue+0xb0>
    1d50:	80 e0       	ldi	r24, 0x00	; 0
    1d52:	01 c0       	rjmp	.+2      	; 0x1d56 <prvCopyDataToQueue+0xb0>
    1d54:	80 e0       	ldi	r24, 0x00	; 0
    1d56:	1f 5f       	subi	r17, 0xFF	; 255
    1d58:	1e 8f       	std	Y+30, r17	; 0x1e
    1d5a:	df 91       	pop	r29
    1d5c:	cf 91       	pop	r28
    1d5e:	1f 91       	pop	r17
    1d60:	0f 91       	pop	r16
    1d62:	08 95       	ret

00001d64 <prvCopyDataFromQueue>:
    1d64:	fc 01       	movw	r30, r24
    1d66:	40 a1       	ldd	r20, Z+32	; 0x20
    1d68:	44 23       	and	r20, r20
    1d6a:	a9 f0       	breq	.+42     	; 0x1d96 <prvCopyDataFromQueue+0x32>
    1d6c:	50 e0       	ldi	r21, 0x00	; 0
    1d6e:	26 81       	ldd	r18, Z+6	; 0x06
    1d70:	37 81       	ldd	r19, Z+7	; 0x07
    1d72:	24 0f       	add	r18, r20
    1d74:	35 1f       	adc	r19, r21
    1d76:	37 83       	std	Z+7, r19	; 0x07
    1d78:	26 83       	std	Z+6, r18	; 0x06
    1d7a:	84 81       	ldd	r24, Z+4	; 0x04
    1d7c:	95 81       	ldd	r25, Z+5	; 0x05
    1d7e:	28 17       	cp	r18, r24
    1d80:	39 07       	cpc	r19, r25
    1d82:	20 f0       	brcs	.+8      	; 0x1d8c <prvCopyDataFromQueue+0x28>
    1d84:	80 81       	ld	r24, Z
    1d86:	91 81       	ldd	r25, Z+1	; 0x01
    1d88:	97 83       	std	Z+7, r25	; 0x07
    1d8a:	86 83       	std	Z+6, r24	; 0x06
    1d8c:	cb 01       	movw	r24, r22
    1d8e:	66 81       	ldd	r22, Z+6	; 0x06
    1d90:	77 81       	ldd	r23, Z+7	; 0x07
    1d92:	0c 94 42 31 	jmp	0x6284	; 0x6284 <memcpy>
    1d96:	08 95       	ret

00001d98 <prvUnlockQueue>:
    1d98:	ef 92       	push	r14
    1d9a:	ff 92       	push	r15
    1d9c:	0f 93       	push	r16
    1d9e:	1f 93       	push	r17
    1da0:	cf 93       	push	r28
    1da2:	8c 01       	movw	r16, r24
    1da4:	0f b6       	in	r0, 0x3f	; 63
    1da6:	f8 94       	cli
    1da8:	0f 92       	push	r0
    1daa:	fc 01       	movw	r30, r24
    1dac:	c2 a1       	ldd	r28, Z+34	; 0x22
    1dae:	1c 16       	cp	r1, r28
    1db0:	ac f4       	brge	.+42     	; 0x1ddc <prvUnlockQueue+0x44>
    1db2:	83 89       	ldd	r24, Z+19	; 0x13
    1db4:	81 11       	cpse	r24, r1
    1db6:	06 c0       	rjmp	.+12     	; 0x1dc4 <prvUnlockQueue+0x2c>
    1db8:	11 c0       	rjmp	.+34     	; 0x1ddc <prvUnlockQueue+0x44>
    1dba:	f8 01       	movw	r30, r16
    1dbc:	83 89       	ldd	r24, Z+19	; 0x13
    1dbe:	81 11       	cpse	r24, r1
    1dc0:	05 c0       	rjmp	.+10     	; 0x1dcc <prvUnlockQueue+0x34>
    1dc2:	0c c0       	rjmp	.+24     	; 0x1ddc <prvUnlockQueue+0x44>
    1dc4:	78 01       	movw	r14, r16
    1dc6:	f3 e1       	ldi	r31, 0x13	; 19
    1dc8:	ef 0e       	add	r14, r31
    1dca:	f1 1c       	adc	r15, r1
    1dcc:	c7 01       	movw	r24, r14
    1dce:	0e 94 35 19 	call	0x326a	; 0x326a <xTaskRemoveFromEventList>
    1dd2:	81 11       	cpse	r24, r1
    1dd4:	0e 94 27 1a 	call	0x344e	; 0x344e <vTaskMissedYield>
    1dd8:	c1 50       	subi	r28, 0x01	; 1
    1dda:	79 f7       	brne	.-34     	; 0x1dba <prvUnlockQueue+0x22>
    1ddc:	8f ef       	ldi	r24, 0xFF	; 255
    1dde:	f8 01       	movw	r30, r16
    1de0:	82 a3       	std	Z+34, r24	; 0x22
    1de2:	0f 90       	pop	r0
    1de4:	0f be       	out	0x3f, r0	; 63
    1de6:	0f b6       	in	r0, 0x3f	; 63
    1de8:	f8 94       	cli
    1dea:	0f 92       	push	r0
    1dec:	c1 a1       	ldd	r28, Z+33	; 0x21
    1dee:	1c 16       	cp	r1, r28
    1df0:	ac f4       	brge	.+42     	; 0x1e1c <prvUnlockQueue+0x84>
    1df2:	80 85       	ldd	r24, Z+8	; 0x08
    1df4:	81 11       	cpse	r24, r1
    1df6:	06 c0       	rjmp	.+12     	; 0x1e04 <prvUnlockQueue+0x6c>
    1df8:	11 c0       	rjmp	.+34     	; 0x1e1c <prvUnlockQueue+0x84>
    1dfa:	f8 01       	movw	r30, r16
    1dfc:	80 85       	ldd	r24, Z+8	; 0x08
    1dfe:	81 11       	cpse	r24, r1
    1e00:	05 c0       	rjmp	.+10     	; 0x1e0c <prvUnlockQueue+0x74>
    1e02:	0c c0       	rjmp	.+24     	; 0x1e1c <prvUnlockQueue+0x84>
    1e04:	78 01       	movw	r14, r16
    1e06:	f8 e0       	ldi	r31, 0x08	; 8
    1e08:	ef 0e       	add	r14, r31
    1e0a:	f1 1c       	adc	r15, r1
    1e0c:	c7 01       	movw	r24, r14
    1e0e:	0e 94 35 19 	call	0x326a	; 0x326a <xTaskRemoveFromEventList>
    1e12:	81 11       	cpse	r24, r1
    1e14:	0e 94 27 1a 	call	0x344e	; 0x344e <vTaskMissedYield>
    1e18:	c1 50       	subi	r28, 0x01	; 1
    1e1a:	79 f7       	brne	.-34     	; 0x1dfa <prvUnlockQueue+0x62>
    1e1c:	8f ef       	ldi	r24, 0xFF	; 255
    1e1e:	f8 01       	movw	r30, r16
    1e20:	81 a3       	std	Z+33, r24	; 0x21
    1e22:	0f 90       	pop	r0
    1e24:	0f be       	out	0x3f, r0	; 63
    1e26:	cf 91       	pop	r28
    1e28:	1f 91       	pop	r17
    1e2a:	0f 91       	pop	r16
    1e2c:	ff 90       	pop	r15
    1e2e:	ef 90       	pop	r14
    1e30:	08 95       	ret

00001e32 <xQueueGenericReset>:
    1e32:	cf 93       	push	r28
    1e34:	df 93       	push	r29
    1e36:	ec 01       	movw	r28, r24
    1e38:	0f b6       	in	r0, 0x3f	; 63
    1e3a:	f8 94       	cli
    1e3c:	0f 92       	push	r0
    1e3e:	e8 81       	ld	r30, Y
    1e40:	f9 81       	ldd	r31, Y+1	; 0x01
    1e42:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1e44:	28 a1       	ldd	r18, Y+32	; 0x20
    1e46:	90 e0       	ldi	r25, 0x00	; 0
    1e48:	30 e0       	ldi	r19, 0x00	; 0
    1e4a:	82 9f       	mul	r24, r18
    1e4c:	a0 01       	movw	r20, r0
    1e4e:	83 9f       	mul	r24, r19
    1e50:	50 0d       	add	r21, r0
    1e52:	92 9f       	mul	r25, r18
    1e54:	50 0d       	add	r21, r0
    1e56:	11 24       	eor	r1, r1
    1e58:	4e 0f       	add	r20, r30
    1e5a:	5f 1f       	adc	r21, r31
    1e5c:	5d 83       	std	Y+5, r21	; 0x05
    1e5e:	4c 83       	std	Y+4, r20	; 0x04
    1e60:	1e 8e       	std	Y+30, r1	; 0x1e
    1e62:	fb 83       	std	Y+3, r31	; 0x03
    1e64:	ea 83       	std	Y+2, r30	; 0x02
    1e66:	01 97       	sbiw	r24, 0x01	; 1
    1e68:	82 9f       	mul	r24, r18
    1e6a:	a0 01       	movw	r20, r0
    1e6c:	83 9f       	mul	r24, r19
    1e6e:	50 0d       	add	r21, r0
    1e70:	92 9f       	mul	r25, r18
    1e72:	50 0d       	add	r21, r0
    1e74:	11 24       	eor	r1, r1
    1e76:	cf 01       	movw	r24, r30
    1e78:	84 0f       	add	r24, r20
    1e7a:	95 1f       	adc	r25, r21
    1e7c:	9f 83       	std	Y+7, r25	; 0x07
    1e7e:	8e 83       	std	Y+6, r24	; 0x06
    1e80:	8f ef       	ldi	r24, 0xFF	; 255
    1e82:	89 a3       	std	Y+33, r24	; 0x21
    1e84:	8a a3       	std	Y+34, r24	; 0x22
    1e86:	61 11       	cpse	r22, r1
    1e88:	0b c0       	rjmp	.+22     	; 0x1ea0 <xQueueGenericReset+0x6e>
    1e8a:	88 85       	ldd	r24, Y+8	; 0x08
    1e8c:	88 23       	and	r24, r24
    1e8e:	71 f0       	breq	.+28     	; 0x1eac <xQueueGenericReset+0x7a>
    1e90:	ce 01       	movw	r24, r28
    1e92:	08 96       	adiw	r24, 0x08	; 8
    1e94:	0e 94 35 19 	call	0x326a	; 0x326a <xTaskRemoveFromEventList>
    1e98:	88 23       	and	r24, r24
    1e9a:	41 f0       	breq	.+16     	; 0x1eac <xQueueGenericReset+0x7a>
    1e9c:	31 de       	rcall	.-926    	; 0x1b00 <vPortYield>
    1e9e:	06 c0       	rjmp	.+12     	; 0x1eac <xQueueGenericReset+0x7a>
    1ea0:	ce 01       	movw	r24, r28
    1ea2:	08 96       	adiw	r24, 0x08	; 8
    1ea4:	e5 dc       	rcall	.-1590   	; 0x1870 <vListInitialise>
    1ea6:	ce 01       	movw	r24, r28
    1ea8:	43 96       	adiw	r24, 0x13	; 19
    1eaa:	e2 dc       	rcall	.-1596   	; 0x1870 <vListInitialise>
    1eac:	0f 90       	pop	r0
    1eae:	0f be       	out	0x3f, r0	; 63
    1eb0:	81 e0       	ldi	r24, 0x01	; 1
    1eb2:	df 91       	pop	r29
    1eb4:	cf 91       	pop	r28
    1eb6:	08 95       	ret

00001eb8 <xQueueGenericCreate>:
    1eb8:	ff 92       	push	r15
    1eba:	0f 93       	push	r16
    1ebc:	1f 93       	push	r17
    1ebe:	cf 93       	push	r28
    1ec0:	df 93       	push	r29
    1ec2:	08 2f       	mov	r16, r24
    1ec4:	16 2f       	mov	r17, r22
    1ec6:	f4 2e       	mov	r15, r20
    1ec8:	66 23       	and	r22, r22
    1eca:	b9 f0       	breq	.+46     	; 0x1efa <xQueueGenericCreate+0x42>
    1ecc:	86 9f       	mul	r24, r22
    1ece:	c0 01       	movw	r24, r0
    1ed0:	11 24       	eor	r1, r1
    1ed2:	85 96       	adiw	r24, 0x25	; 37
    1ed4:	e3 db       	rcall	.-2106   	; 0x169c <pvPortMalloc>
    1ed6:	ec 01       	movw	r28, r24
    1ed8:	00 97       	sbiw	r24, 0x00	; 0
    1eda:	41 f4       	brne	.+16     	; 0x1eec <xQueueGenericCreate+0x34>
    1edc:	14 c0       	rjmp	.+40     	; 0x1f06 <xQueueGenericCreate+0x4e>
    1ede:	0f 8f       	std	Y+31, r16	; 0x1f
    1ee0:	18 a3       	std	Y+32, r17	; 0x20
    1ee2:	61 e0       	ldi	r22, 0x01	; 1
    1ee4:	ce 01       	movw	r24, r28
    1ee6:	a5 df       	rcall	.-182    	; 0x1e32 <xQueueGenericReset>
    1ee8:	fc a2       	std	Y+36, r15	; 0x24
    1eea:	0d c0       	rjmp	.+26     	; 0x1f06 <xQueueGenericCreate+0x4e>
    1eec:	85 96       	adiw	r24, 0x25	; 37
    1eee:	99 83       	std	Y+1, r25	; 0x01
    1ef0:	88 83       	st	Y, r24
    1ef2:	f5 cf       	rjmp	.-22     	; 0x1ede <xQueueGenericCreate+0x26>
    1ef4:	d9 83       	std	Y+1, r29	; 0x01
    1ef6:	c8 83       	st	Y, r28
    1ef8:	f2 cf       	rjmp	.-28     	; 0x1ede <xQueueGenericCreate+0x26>
    1efa:	85 e2       	ldi	r24, 0x25	; 37
    1efc:	90 e0       	ldi	r25, 0x00	; 0
    1efe:	ce db       	rcall	.-2148   	; 0x169c <pvPortMalloc>
    1f00:	ec 01       	movw	r28, r24
    1f02:	89 2b       	or	r24, r25
    1f04:	b9 f7       	brne	.-18     	; 0x1ef4 <xQueueGenericCreate+0x3c>
    1f06:	ce 01       	movw	r24, r28
    1f08:	df 91       	pop	r29
    1f0a:	cf 91       	pop	r28
    1f0c:	1f 91       	pop	r17
    1f0e:	0f 91       	pop	r16
    1f10:	ff 90       	pop	r15
    1f12:	08 95       	ret

00001f14 <xQueueGenericSend>:
    1f14:	9f 92       	push	r9
    1f16:	af 92       	push	r10
    1f18:	bf 92       	push	r11
    1f1a:	cf 92       	push	r12
    1f1c:	df 92       	push	r13
    1f1e:	ef 92       	push	r14
    1f20:	ff 92       	push	r15
    1f22:	0f 93       	push	r16
    1f24:	1f 93       	push	r17
    1f26:	cf 93       	push	r28
    1f28:	df 93       	push	r29
    1f2a:	cd b7       	in	r28, 0x3d	; 61
    1f2c:	de b7       	in	r29, 0x3e	; 62
    1f2e:	29 97       	sbiw	r28, 0x09	; 9
    1f30:	0f b6       	in	r0, 0x3f	; 63
    1f32:	f8 94       	cli
    1f34:	de bf       	out	0x3e, r29	; 62
    1f36:	0f be       	out	0x3f, r0	; 63
    1f38:	cd bf       	out	0x3d, r28	; 61
    1f3a:	7c 01       	movw	r14, r24
    1f3c:	5b 01       	movw	r10, r22
    1f3e:	2e 83       	std	Y+6, r18	; 0x06
    1f40:	3f 83       	std	Y+7, r19	; 0x07
    1f42:	48 87       	std	Y+8, r20	; 0x08
    1f44:	59 87       	std	Y+9, r21	; 0x09
    1f46:	10 e0       	ldi	r17, 0x00	; 0
    1f48:	99 24       	eor	r9, r9
    1f4a:	93 94       	inc	r9
    1f4c:	6c 01       	movw	r12, r24
    1f4e:	88 e0       	ldi	r24, 0x08	; 8
    1f50:	c8 0e       	add	r12, r24
    1f52:	d1 1c       	adc	r13, r1
    1f54:	0f b6       	in	r0, 0x3f	; 63
    1f56:	f8 94       	cli
    1f58:	0f 92       	push	r0
    1f5a:	f7 01       	movw	r30, r14
    1f5c:	96 8d       	ldd	r25, Z+30	; 0x1e
    1f5e:	87 8d       	ldd	r24, Z+31	; 0x1f
    1f60:	98 17       	cp	r25, r24
    1f62:	10 f0       	brcs	.+4      	; 0x1f68 <xQueueGenericSend+0x54>
    1f64:	02 30       	cpi	r16, 0x02	; 2
    1f66:	b1 f4       	brne	.+44     	; 0x1f94 <xQueueGenericSend+0x80>
    1f68:	40 2f       	mov	r20, r16
    1f6a:	b5 01       	movw	r22, r10
    1f6c:	c7 01       	movw	r24, r14
    1f6e:	9b de       	rcall	.-714    	; 0x1ca6 <prvCopyDataToQueue>
    1f70:	f7 01       	movw	r30, r14
    1f72:	93 89       	ldd	r25, Z+19	; 0x13
    1f74:	99 23       	and	r25, r25
    1f76:	41 f0       	breq	.+16     	; 0x1f88 <xQueueGenericSend+0x74>
    1f78:	c7 01       	movw	r24, r14
    1f7a:	43 96       	adiw	r24, 0x13	; 19
    1f7c:	0e 94 35 19 	call	0x326a	; 0x326a <xTaskRemoveFromEventList>
    1f80:	88 23       	and	r24, r24
    1f82:	21 f0       	breq	.+8      	; 0x1f8c <xQueueGenericSend+0x78>
    1f84:	bd dd       	rcall	.-1158   	; 0x1b00 <vPortYield>
    1f86:	02 c0       	rjmp	.+4      	; 0x1f8c <xQueueGenericSend+0x78>
    1f88:	81 11       	cpse	r24, r1
    1f8a:	ba dd       	rcall	.-1164   	; 0x1b00 <vPortYield>
    1f8c:	0f 90       	pop	r0
    1f8e:	0f be       	out	0x3f, r0	; 63
    1f90:	81 e0       	ldi	r24, 0x01	; 1
    1f92:	4e c0       	rjmp	.+156    	; 0x2030 <xQueueGenericSend+0x11c>
    1f94:	8e 81       	ldd	r24, Y+6	; 0x06
    1f96:	9f 81       	ldd	r25, Y+7	; 0x07
    1f98:	a8 85       	ldd	r26, Y+8	; 0x08
    1f9a:	b9 85       	ldd	r27, Y+9	; 0x09
    1f9c:	89 2b       	or	r24, r25
    1f9e:	8a 2b       	or	r24, r26
    1fa0:	8b 2b       	or	r24, r27
    1fa2:	21 f4       	brne	.+8      	; 0x1fac <xQueueGenericSend+0x98>
    1fa4:	0f 90       	pop	r0
    1fa6:	0f be       	out	0x3f, r0	; 63
    1fa8:	80 e0       	ldi	r24, 0x00	; 0
    1faa:	42 c0       	rjmp	.+132    	; 0x2030 <xQueueGenericSend+0x11c>
    1fac:	11 11       	cpse	r17, r1
    1fae:	05 c0       	rjmp	.+10     	; 0x1fba <xQueueGenericSend+0xa6>
    1fb0:	ce 01       	movw	r24, r28
    1fb2:	01 96       	adiw	r24, 0x01	; 1
    1fb4:	0e 94 c1 19 	call	0x3382	; 0x3382 <vTaskInternalSetTimeOutState>
    1fb8:	19 2d       	mov	r17, r9
    1fba:	0f 90       	pop	r0
    1fbc:	0f be       	out	0x3f, r0	; 63
    1fbe:	fd d6       	rcall	.+3578   	; 0x2dba <vTaskSuspendAll>
    1fc0:	0f b6       	in	r0, 0x3f	; 63
    1fc2:	f8 94       	cli
    1fc4:	0f 92       	push	r0
    1fc6:	f7 01       	movw	r30, r14
    1fc8:	81 a1       	ldd	r24, Z+33	; 0x21
    1fca:	8f 3f       	cpi	r24, 0xFF	; 255
    1fcc:	09 f4       	brne	.+2      	; 0x1fd0 <xQueueGenericSend+0xbc>
    1fce:	11 a2       	std	Z+33, r1	; 0x21
    1fd0:	f7 01       	movw	r30, r14
    1fd2:	82 a1       	ldd	r24, Z+34	; 0x22
    1fd4:	8f 3f       	cpi	r24, 0xFF	; 255
    1fd6:	09 f4       	brne	.+2      	; 0x1fda <xQueueGenericSend+0xc6>
    1fd8:	12 a2       	std	Z+34, r1	; 0x22
    1fda:	0f 90       	pop	r0
    1fdc:	0f be       	out	0x3f, r0	; 63
    1fde:	be 01       	movw	r22, r28
    1fe0:	6a 5f       	subi	r22, 0xFA	; 250
    1fe2:	7f 4f       	sbci	r23, 0xFF	; 255
    1fe4:	ce 01       	movw	r24, r28
    1fe6:	01 96       	adiw	r24, 0x01	; 1
    1fe8:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <xTaskCheckForTimeOut>
    1fec:	81 11       	cpse	r24, r1
    1fee:	1c c0       	rjmp	.+56     	; 0x2028 <xQueueGenericSend+0x114>
    1ff0:	0f b6       	in	r0, 0x3f	; 63
    1ff2:	f8 94       	cli
    1ff4:	0f 92       	push	r0
    1ff6:	f7 01       	movw	r30, r14
    1ff8:	96 8d       	ldd	r25, Z+30	; 0x1e
    1ffa:	87 8d       	ldd	r24, Z+31	; 0x1f
    1ffc:	0f 90       	pop	r0
    1ffe:	0f be       	out	0x3f, r0	; 63
    2000:	98 13       	cpse	r25, r24
    2002:	0e c0       	rjmp	.+28     	; 0x2020 <xQueueGenericSend+0x10c>
    2004:	4e 81       	ldd	r20, Y+6	; 0x06
    2006:	5f 81       	ldd	r21, Y+7	; 0x07
    2008:	68 85       	ldd	r22, Y+8	; 0x08
    200a:	79 85       	ldd	r23, Y+9	; 0x09
    200c:	c6 01       	movw	r24, r12
    200e:	0e 94 da 18 	call	0x31b4	; 0x31b4 <vTaskPlaceOnEventList>
    2012:	c7 01       	movw	r24, r14
    2014:	c1 de       	rcall	.-638    	; 0x1d98 <prvUnlockQueue>
    2016:	ba d7       	rcall	.+3956   	; 0x2f8c <xTaskResumeAll>
    2018:	81 11       	cpse	r24, r1
    201a:	9c cf       	rjmp	.-200    	; 0x1f54 <xQueueGenericSend+0x40>
    201c:	71 dd       	rcall	.-1310   	; 0x1b00 <vPortYield>
    201e:	9a cf       	rjmp	.-204    	; 0x1f54 <xQueueGenericSend+0x40>
    2020:	c7 01       	movw	r24, r14
    2022:	ba de       	rcall	.-652    	; 0x1d98 <prvUnlockQueue>
    2024:	b3 d7       	rcall	.+3942   	; 0x2f8c <xTaskResumeAll>
    2026:	96 cf       	rjmp	.-212    	; 0x1f54 <xQueueGenericSend+0x40>
    2028:	c7 01       	movw	r24, r14
    202a:	b6 de       	rcall	.-660    	; 0x1d98 <prvUnlockQueue>
    202c:	af d7       	rcall	.+3934   	; 0x2f8c <xTaskResumeAll>
    202e:	80 e0       	ldi	r24, 0x00	; 0
    2030:	29 96       	adiw	r28, 0x09	; 9
    2032:	0f b6       	in	r0, 0x3f	; 63
    2034:	f8 94       	cli
    2036:	de bf       	out	0x3e, r29	; 62
    2038:	0f be       	out	0x3f, r0	; 63
    203a:	cd bf       	out	0x3d, r28	; 61
    203c:	df 91       	pop	r29
    203e:	cf 91       	pop	r28
    2040:	1f 91       	pop	r17
    2042:	0f 91       	pop	r16
    2044:	ff 90       	pop	r15
    2046:	ef 90       	pop	r14
    2048:	df 90       	pop	r13
    204a:	cf 90       	pop	r12
    204c:	bf 90       	pop	r11
    204e:	af 90       	pop	r10
    2050:	9f 90       	pop	r9
    2052:	08 95       	ret

00002054 <xQueueCreateMutex>:
    2054:	0f 93       	push	r16
    2056:	cf 93       	push	r28
    2058:	df 93       	push	r29
    205a:	48 2f       	mov	r20, r24
    205c:	60 e0       	ldi	r22, 0x00	; 0
    205e:	81 e0       	ldi	r24, 0x01	; 1
    2060:	2b df       	rcall	.-426    	; 0x1eb8 <xQueueGenericCreate>
    2062:	ec 01       	movw	r28, r24
    2064:	00 97       	sbiw	r24, 0x00	; 0
    2066:	61 f0       	breq	.+24     	; 0x2080 <xQueueCreateMutex+0x2c>
    2068:	1d 82       	std	Y+5, r1	; 0x05
    206a:	1c 82       	std	Y+4, r1	; 0x04
    206c:	19 82       	std	Y+1, r1	; 0x01
    206e:	18 82       	st	Y, r1
    2070:	1e 82       	std	Y+6, r1	; 0x06
    2072:	00 e0       	ldi	r16, 0x00	; 0
    2074:	20 e0       	ldi	r18, 0x00	; 0
    2076:	30 e0       	ldi	r19, 0x00	; 0
    2078:	a9 01       	movw	r20, r18
    207a:	60 e0       	ldi	r22, 0x00	; 0
    207c:	70 e0       	ldi	r23, 0x00	; 0
    207e:	4a df       	rcall	.-364    	; 0x1f14 <xQueueGenericSend>
    2080:	ce 01       	movw	r24, r28
    2082:	df 91       	pop	r29
    2084:	cf 91       	pop	r28
    2086:	0f 91       	pop	r16
    2088:	08 95       	ret

0000208a <xQueueGenericSendFromISR>:
    208a:	ef 92       	push	r14
    208c:	ff 92       	push	r15
    208e:	0f 93       	push	r16
    2090:	1f 93       	push	r17
    2092:	cf 93       	push	r28
    2094:	df 93       	push	r29
    2096:	8a 01       	movw	r16, r20
    2098:	fc 01       	movw	r30, r24
    209a:	56 8d       	ldd	r21, Z+30	; 0x1e
    209c:	37 8d       	ldd	r19, Z+31	; 0x1f
    209e:	53 17       	cp	r21, r19
    20a0:	10 f0       	brcs	.+4      	; 0x20a6 <xQueueGenericSendFromISR+0x1c>
    20a2:	22 30       	cpi	r18, 0x02	; 2
    20a4:	e9 f4       	brne	.+58     	; 0x20e0 <xQueueGenericSendFromISR+0x56>
    20a6:	42 2f       	mov	r20, r18
    20a8:	78 01       	movw	r14, r16
    20aa:	ec 01       	movw	r28, r24
    20ac:	1a a1       	ldd	r17, Y+34	; 0x22
    20ae:	fb dd       	rcall	.-1034   	; 0x1ca6 <prvCopyDataToQueue>
    20b0:	1f 3f       	cpi	r17, 0xFF	; 255
    20b2:	81 f4       	brne	.+32     	; 0x20d4 <xQueueGenericSendFromISR+0x4a>
    20b4:	8b 89       	ldd	r24, Y+19	; 0x13
    20b6:	88 23       	and	r24, r24
    20b8:	a9 f0       	breq	.+42     	; 0x20e4 <xQueueGenericSendFromISR+0x5a>
    20ba:	ce 01       	movw	r24, r28
    20bc:	43 96       	adiw	r24, 0x13	; 19
    20be:	0e 94 35 19 	call	0x326a	; 0x326a <xTaskRemoveFromEventList>
    20c2:	88 23       	and	r24, r24
    20c4:	89 f0       	breq	.+34     	; 0x20e8 <xQueueGenericSendFromISR+0x5e>
    20c6:	e1 14       	cp	r14, r1
    20c8:	f1 04       	cpc	r15, r1
    20ca:	81 f0       	breq	.+32     	; 0x20ec <xQueueGenericSendFromISR+0x62>
    20cc:	81 e0       	ldi	r24, 0x01	; 1
    20ce:	f7 01       	movw	r30, r14
    20d0:	80 83       	st	Z, r24
    20d2:	0d c0       	rjmp	.+26     	; 0x20ee <xQueueGenericSendFromISR+0x64>
    20d4:	ff 24       	eor	r15, r15
    20d6:	f3 94       	inc	r15
    20d8:	f1 0e       	add	r15, r17
    20da:	fa a2       	std	Y+34, r15	; 0x22
    20dc:	81 e0       	ldi	r24, 0x01	; 1
    20de:	07 c0       	rjmp	.+14     	; 0x20ee <xQueueGenericSendFromISR+0x64>
    20e0:	80 e0       	ldi	r24, 0x00	; 0
    20e2:	05 c0       	rjmp	.+10     	; 0x20ee <xQueueGenericSendFromISR+0x64>
    20e4:	81 e0       	ldi	r24, 0x01	; 1
    20e6:	03 c0       	rjmp	.+6      	; 0x20ee <xQueueGenericSendFromISR+0x64>
    20e8:	81 e0       	ldi	r24, 0x01	; 1
    20ea:	01 c0       	rjmp	.+2      	; 0x20ee <xQueueGenericSendFromISR+0x64>
    20ec:	81 e0       	ldi	r24, 0x01	; 1
    20ee:	df 91       	pop	r29
    20f0:	cf 91       	pop	r28
    20f2:	1f 91       	pop	r17
    20f4:	0f 91       	pop	r16
    20f6:	ff 90       	pop	r15
    20f8:	ef 90       	pop	r14
    20fa:	08 95       	ret

000020fc <xQueueReceive>:
    20fc:	9f 92       	push	r9
    20fe:	af 92       	push	r10
    2100:	bf 92       	push	r11
    2102:	cf 92       	push	r12
    2104:	df 92       	push	r13
    2106:	ef 92       	push	r14
    2108:	ff 92       	push	r15
    210a:	0f 93       	push	r16
    210c:	1f 93       	push	r17
    210e:	cf 93       	push	r28
    2110:	df 93       	push	r29
    2112:	cd b7       	in	r28, 0x3d	; 61
    2114:	de b7       	in	r29, 0x3e	; 62
    2116:	29 97       	sbiw	r28, 0x09	; 9
    2118:	0f b6       	in	r0, 0x3f	; 63
    211a:	f8 94       	cli
    211c:	de bf       	out	0x3e, r29	; 62
    211e:	0f be       	out	0x3f, r0	; 63
    2120:	cd bf       	out	0x3d, r28	; 61
    2122:	8c 01       	movw	r16, r24
    2124:	5b 01       	movw	r10, r22
    2126:	2e 83       	std	Y+6, r18	; 0x06
    2128:	3f 83       	std	Y+7, r19	; 0x07
    212a:	48 87       	std	Y+8, r20	; 0x08
    212c:	59 87       	std	Y+9, r21	; 0x09
    212e:	e1 2c       	mov	r14, r1
    2130:	99 24       	eor	r9, r9
    2132:	93 94       	inc	r9
    2134:	6c 01       	movw	r12, r24
    2136:	83 e1       	ldi	r24, 0x13	; 19
    2138:	c8 0e       	add	r12, r24
    213a:	d1 1c       	adc	r13, r1
    213c:	0f b6       	in	r0, 0x3f	; 63
    213e:	f8 94       	cli
    2140:	0f 92       	push	r0
    2142:	f8 01       	movw	r30, r16
    2144:	f6 8c       	ldd	r15, Z+30	; 0x1e
    2146:	ff 20       	and	r15, r15
    2148:	99 f0       	breq	.+38     	; 0x2170 <xQueueReceive+0x74>
    214a:	b5 01       	movw	r22, r10
    214c:	c8 01       	movw	r24, r16
    214e:	0a de       	rcall	.-1004   	; 0x1d64 <prvCopyDataFromQueue>
    2150:	fa 94       	dec	r15
    2152:	f8 01       	movw	r30, r16
    2154:	f6 8e       	std	Z+30, r15	; 0x1e
    2156:	80 85       	ldd	r24, Z+8	; 0x08
    2158:	88 23       	and	r24, r24
    215a:	31 f0       	breq	.+12     	; 0x2168 <xQueueReceive+0x6c>
    215c:	c8 01       	movw	r24, r16
    215e:	08 96       	adiw	r24, 0x08	; 8
    2160:	0e 94 35 19 	call	0x326a	; 0x326a <xTaskRemoveFromEventList>
    2164:	81 11       	cpse	r24, r1
    2166:	cc dc       	rcall	.-1640   	; 0x1b00 <vPortYield>
    2168:	0f 90       	pop	r0
    216a:	0f be       	out	0x3f, r0	; 63
    216c:	81 e0       	ldi	r24, 0x01	; 1
    216e:	4c c0       	rjmp	.+152    	; 0x2208 <__stack+0x9>
    2170:	8e 81       	ldd	r24, Y+6	; 0x06
    2172:	9f 81       	ldd	r25, Y+7	; 0x07
    2174:	a8 85       	ldd	r26, Y+8	; 0x08
    2176:	b9 85       	ldd	r27, Y+9	; 0x09
    2178:	89 2b       	or	r24, r25
    217a:	8a 2b       	or	r24, r26
    217c:	8b 2b       	or	r24, r27
    217e:	21 f4       	brne	.+8      	; 0x2188 <xQueueReceive+0x8c>
    2180:	0f 90       	pop	r0
    2182:	0f be       	out	0x3f, r0	; 63
    2184:	80 e0       	ldi	r24, 0x00	; 0
    2186:	40 c0       	rjmp	.+128    	; 0x2208 <__stack+0x9>
    2188:	e1 10       	cpse	r14, r1
    218a:	05 c0       	rjmp	.+10     	; 0x2196 <xQueueReceive+0x9a>
    218c:	ce 01       	movw	r24, r28
    218e:	01 96       	adiw	r24, 0x01	; 1
    2190:	0e 94 c1 19 	call	0x3382	; 0x3382 <vTaskInternalSetTimeOutState>
    2194:	e9 2c       	mov	r14, r9
    2196:	0f 90       	pop	r0
    2198:	0f be       	out	0x3f, r0	; 63
    219a:	0f d6       	rcall	.+3102   	; 0x2dba <vTaskSuspendAll>
    219c:	0f b6       	in	r0, 0x3f	; 63
    219e:	f8 94       	cli
    21a0:	0f 92       	push	r0
    21a2:	f8 01       	movw	r30, r16
    21a4:	81 a1       	ldd	r24, Z+33	; 0x21
    21a6:	8f 3f       	cpi	r24, 0xFF	; 255
    21a8:	09 f4       	brne	.+2      	; 0x21ac <xQueueReceive+0xb0>
    21aa:	11 a2       	std	Z+33, r1	; 0x21
    21ac:	f8 01       	movw	r30, r16
    21ae:	82 a1       	ldd	r24, Z+34	; 0x22
    21b0:	8f 3f       	cpi	r24, 0xFF	; 255
    21b2:	09 f4       	brne	.+2      	; 0x21b6 <xQueueReceive+0xba>
    21b4:	12 a2       	std	Z+34, r1	; 0x22
    21b6:	0f 90       	pop	r0
    21b8:	0f be       	out	0x3f, r0	; 63
    21ba:	be 01       	movw	r22, r28
    21bc:	6a 5f       	subi	r22, 0xFA	; 250
    21be:	7f 4f       	sbci	r23, 0xFF	; 255
    21c0:	ce 01       	movw	r24, r28
    21c2:	01 96       	adiw	r24, 0x01	; 1
    21c4:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <xTaskCheckForTimeOut>
    21c8:	81 11       	cpse	r24, r1
    21ca:	15 c0       	rjmp	.+42     	; 0x21f6 <xQueueReceive+0xfa>
    21cc:	c8 01       	movw	r24, r16
    21ce:	60 dd       	rcall	.-1344   	; 0x1c90 <prvIsQueueEmpty>
    21d0:	88 23       	and	r24, r24
    21d2:	69 f0       	breq	.+26     	; 0x21ee <xQueueReceive+0xf2>
    21d4:	4e 81       	ldd	r20, Y+6	; 0x06
    21d6:	5f 81       	ldd	r21, Y+7	; 0x07
    21d8:	68 85       	ldd	r22, Y+8	; 0x08
    21da:	79 85       	ldd	r23, Y+9	; 0x09
    21dc:	c6 01       	movw	r24, r12
    21de:	ea d7       	rcall	.+4052   	; 0x31b4 <vTaskPlaceOnEventList>
    21e0:	c8 01       	movw	r24, r16
    21e2:	da dd       	rcall	.-1100   	; 0x1d98 <prvUnlockQueue>
    21e4:	d3 d6       	rcall	.+3494   	; 0x2f8c <xTaskResumeAll>
    21e6:	81 11       	cpse	r24, r1
    21e8:	a9 cf       	rjmp	.-174    	; 0x213c <xQueueReceive+0x40>
    21ea:	8a dc       	rcall	.-1772   	; 0x1b00 <vPortYield>
    21ec:	a7 cf       	rjmp	.-178    	; 0x213c <xQueueReceive+0x40>
    21ee:	c8 01       	movw	r24, r16
    21f0:	d3 dd       	rcall	.-1114   	; 0x1d98 <prvUnlockQueue>
    21f2:	cc d6       	rcall	.+3480   	; 0x2f8c <xTaskResumeAll>
    21f4:	a3 cf       	rjmp	.-186    	; 0x213c <xQueueReceive+0x40>
    21f6:	c8 01       	movw	r24, r16
    21f8:	cf dd       	rcall	.-1122   	; 0x1d98 <prvUnlockQueue>
    21fa:	c8 d6       	rcall	.+3472   	; 0x2f8c <xTaskResumeAll>
    21fc:	c8 01       	movw	r24, r16
    21fe:	48 dd       	rcall	.-1392   	; 0x1c90 <prvIsQueueEmpty>
    2200:	88 23       	and	r24, r24
    2202:	09 f4       	brne	.+2      	; 0x2206 <__stack+0x7>
    2204:	9b cf       	rjmp	.-202    	; 0x213c <xQueueReceive+0x40>
    2206:	80 e0       	ldi	r24, 0x00	; 0
    2208:	29 96       	adiw	r28, 0x09	; 9
    220a:	0f b6       	in	r0, 0x3f	; 63
    220c:	f8 94       	cli
    220e:	de bf       	out	0x3e, r29	; 62
    2210:	0f be       	out	0x3f, r0	; 63
    2212:	cd bf       	out	0x3d, r28	; 61
    2214:	df 91       	pop	r29
    2216:	cf 91       	pop	r28
    2218:	1f 91       	pop	r17
    221a:	0f 91       	pop	r16
    221c:	ff 90       	pop	r15
    221e:	ef 90       	pop	r14
    2220:	df 90       	pop	r13
    2222:	cf 90       	pop	r12
    2224:	bf 90       	pop	r11
    2226:	af 90       	pop	r10
    2228:	9f 90       	pop	r9
    222a:	08 95       	ret

0000222c <xQueueSemaphoreTake>:
    222c:	bf 92       	push	r11
    222e:	cf 92       	push	r12
    2230:	df 92       	push	r13
    2232:	ef 92       	push	r14
    2234:	ff 92       	push	r15
    2236:	0f 93       	push	r16
    2238:	1f 93       	push	r17
    223a:	cf 93       	push	r28
    223c:	df 93       	push	r29
    223e:	cd b7       	in	r28, 0x3d	; 61
    2240:	de b7       	in	r29, 0x3e	; 62
    2242:	29 97       	sbiw	r28, 0x09	; 9
    2244:	0f b6       	in	r0, 0x3f	; 63
    2246:	f8 94       	cli
    2248:	de bf       	out	0x3e, r29	; 62
    224a:	0f be       	out	0x3f, r0	; 63
    224c:	cd bf       	out	0x3d, r28	; 61
    224e:	8c 01       	movw	r16, r24
    2250:	4e 83       	std	Y+6, r20	; 0x06
    2252:	5f 83       	std	Y+7, r21	; 0x07
    2254:	68 87       	std	Y+8, r22	; 0x08
    2256:	79 87       	std	Y+9, r23	; 0x09
    2258:	b1 2c       	mov	r11, r1
    225a:	d1 2c       	mov	r13, r1
    225c:	cc 24       	eor	r12, r12
    225e:	c3 94       	inc	r12
    2260:	7c 01       	movw	r14, r24
    2262:	83 e1       	ldi	r24, 0x13	; 19
    2264:	e8 0e       	add	r14, r24
    2266:	f1 1c       	adc	r15, r1
    2268:	0f b6       	in	r0, 0x3f	; 63
    226a:	f8 94       	cli
    226c:	0f 92       	push	r0
    226e:	d8 01       	movw	r26, r16
    2270:	5e 96       	adiw	r26, 0x1e	; 30
    2272:	8c 91       	ld	r24, X
    2274:	5e 97       	sbiw	r26, 0x1e	; 30
    2276:	88 23       	and	r24, r24
    2278:	d9 f0       	breq	.+54     	; 0x22b0 <xQueueSemaphoreTake+0x84>
    227a:	81 50       	subi	r24, 0x01	; 1
    227c:	5e 96       	adiw	r26, 0x1e	; 30
    227e:	8c 93       	st	X, r24
    2280:	5e 97       	sbiw	r26, 0x1e	; 30
    2282:	8d 91       	ld	r24, X+
    2284:	9c 91       	ld	r25, X
    2286:	89 2b       	or	r24, r25
    2288:	29 f4       	brne	.+10     	; 0x2294 <xQueueSemaphoreTake+0x68>
    228a:	0e 94 60 1b 	call	0x36c0	; 0x36c0 <pvTaskIncrementMutexHeldCount>
    228e:	f8 01       	movw	r30, r16
    2290:	95 83       	std	Z+5, r25	; 0x05
    2292:	84 83       	std	Z+4, r24	; 0x04
    2294:	d8 01       	movw	r26, r16
    2296:	18 96       	adiw	r26, 0x08	; 8
    2298:	8c 91       	ld	r24, X
    229a:	88 23       	and	r24, r24
    229c:	29 f0       	breq	.+10     	; 0x22a8 <xQueueSemaphoreTake+0x7c>
    229e:	c8 01       	movw	r24, r16
    22a0:	08 96       	adiw	r24, 0x08	; 8
    22a2:	e3 d7       	rcall	.+4038   	; 0x326a <xTaskRemoveFromEventList>
    22a4:	81 11       	cpse	r24, r1
    22a6:	2c dc       	rcall	.-1960   	; 0x1b00 <vPortYield>
    22a8:	0f 90       	pop	r0
    22aa:	0f be       	out	0x3f, r0	; 63
    22ac:	81 e0       	ldi	r24, 0x01	; 1
    22ae:	7a c0       	rjmp	.+244    	; 0x23a4 <xQueueSemaphoreTake+0x178>
    22b0:	8e 81       	ldd	r24, Y+6	; 0x06
    22b2:	9f 81       	ldd	r25, Y+7	; 0x07
    22b4:	a8 85       	ldd	r26, Y+8	; 0x08
    22b6:	b9 85       	ldd	r27, Y+9	; 0x09
    22b8:	89 2b       	or	r24, r25
    22ba:	8a 2b       	or	r24, r26
    22bc:	8b 2b       	or	r24, r27
    22be:	21 f4       	brne	.+8      	; 0x22c8 <xQueueSemaphoreTake+0x9c>
    22c0:	0f 90       	pop	r0
    22c2:	0f be       	out	0x3f, r0	; 63
    22c4:	80 e0       	ldi	r24, 0x00	; 0
    22c6:	6e c0       	rjmp	.+220    	; 0x23a4 <xQueueSemaphoreTake+0x178>
    22c8:	d1 10       	cpse	r13, r1
    22ca:	05 c0       	rjmp	.+10     	; 0x22d6 <xQueueSemaphoreTake+0xaa>
    22cc:	ce 01       	movw	r24, r28
    22ce:	01 96       	adiw	r24, 0x01	; 1
    22d0:	0e 94 c1 19 	call	0x3382	; 0x3382 <vTaskInternalSetTimeOutState>
    22d4:	dc 2c       	mov	r13, r12
    22d6:	0f 90       	pop	r0
    22d8:	0f be       	out	0x3f, r0	; 63
    22da:	6f d5       	rcall	.+2782   	; 0x2dba <vTaskSuspendAll>
    22dc:	0f b6       	in	r0, 0x3f	; 63
    22de:	f8 94       	cli
    22e0:	0f 92       	push	r0
    22e2:	f8 01       	movw	r30, r16
    22e4:	81 a1       	ldd	r24, Z+33	; 0x21
    22e6:	8f 3f       	cpi	r24, 0xFF	; 255
    22e8:	09 f4       	brne	.+2      	; 0x22ec <xQueueSemaphoreTake+0xc0>
    22ea:	11 a2       	std	Z+33, r1	; 0x21
    22ec:	d8 01       	movw	r26, r16
    22ee:	92 96       	adiw	r26, 0x22	; 34
    22f0:	8c 91       	ld	r24, X
    22f2:	92 97       	sbiw	r26, 0x22	; 34
    22f4:	8f 3f       	cpi	r24, 0xFF	; 255
    22f6:	11 f4       	brne	.+4      	; 0x22fc <xQueueSemaphoreTake+0xd0>
    22f8:	92 96       	adiw	r26, 0x22	; 34
    22fa:	1c 92       	st	X, r1
    22fc:	0f 90       	pop	r0
    22fe:	0f be       	out	0x3f, r0	; 63
    2300:	be 01       	movw	r22, r28
    2302:	6a 5f       	subi	r22, 0xFA	; 250
    2304:	7f 4f       	sbci	r23, 0xFF	; 255
    2306:	ce 01       	movw	r24, r28
    2308:	01 96       	adiw	r24, 0x01	; 1
    230a:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <xTaskCheckForTimeOut>
    230e:	81 11       	cpse	r24, r1
    2310:	24 c0       	rjmp	.+72     	; 0x235a <xQueueSemaphoreTake+0x12e>
    2312:	c8 01       	movw	r24, r16
    2314:	bd dc       	rcall	.-1670   	; 0x1c90 <prvIsQueueEmpty>
    2316:	88 23       	and	r24, r24
    2318:	e1 f0       	breq	.+56     	; 0x2352 <xQueueSemaphoreTake+0x126>
    231a:	f8 01       	movw	r30, r16
    231c:	80 81       	ld	r24, Z
    231e:	91 81       	ldd	r25, Z+1	; 0x01
    2320:	89 2b       	or	r24, r25
    2322:	51 f4       	brne	.+20     	; 0x2338 <xQueueSemaphoreTake+0x10c>
    2324:	0f b6       	in	r0, 0x3f	; 63
    2326:	f8 94       	cli
    2328:	0f 92       	push	r0
    232a:	84 81       	ldd	r24, Z+4	; 0x04
    232c:	95 81       	ldd	r25, Z+5	; 0x05
    232e:	0e 94 3e 1a 	call	0x347c	; 0x347c <xTaskPriorityInherit>
    2332:	b8 2e       	mov	r11, r24
    2334:	0f 90       	pop	r0
    2336:	0f be       	out	0x3f, r0	; 63
    2338:	4e 81       	ldd	r20, Y+6	; 0x06
    233a:	5f 81       	ldd	r21, Y+7	; 0x07
    233c:	68 85       	ldd	r22, Y+8	; 0x08
    233e:	79 85       	ldd	r23, Y+9	; 0x09
    2340:	c7 01       	movw	r24, r14
    2342:	38 d7       	rcall	.+3696   	; 0x31b4 <vTaskPlaceOnEventList>
    2344:	c8 01       	movw	r24, r16
    2346:	28 dd       	rcall	.-1456   	; 0x1d98 <prvUnlockQueue>
    2348:	21 d6       	rcall	.+3138   	; 0x2f8c <xTaskResumeAll>
    234a:	81 11       	cpse	r24, r1
    234c:	8d cf       	rjmp	.-230    	; 0x2268 <xQueueSemaphoreTake+0x3c>
    234e:	d8 db       	rcall	.-2128   	; 0x1b00 <vPortYield>
    2350:	8b cf       	rjmp	.-234    	; 0x2268 <xQueueSemaphoreTake+0x3c>
    2352:	c8 01       	movw	r24, r16
    2354:	21 dd       	rcall	.-1470   	; 0x1d98 <prvUnlockQueue>
    2356:	1a d6       	rcall	.+3124   	; 0x2f8c <xTaskResumeAll>
    2358:	87 cf       	rjmp	.-242    	; 0x2268 <xQueueSemaphoreTake+0x3c>
    235a:	c8 01       	movw	r24, r16
    235c:	1d dd       	rcall	.-1478   	; 0x1d98 <prvUnlockQueue>
    235e:	16 d6       	rcall	.+3116   	; 0x2f8c <xTaskResumeAll>
    2360:	c8 01       	movw	r24, r16
    2362:	96 dc       	rcall	.-1748   	; 0x1c90 <prvIsQueueEmpty>
    2364:	88 23       	and	r24, r24
    2366:	09 f4       	brne	.+2      	; 0x236a <xQueueSemaphoreTake+0x13e>
    2368:	7f cf       	rjmp	.-258    	; 0x2268 <xQueueSemaphoreTake+0x3c>
    236a:	bb 20       	and	r11, r11
    236c:	d1 f0       	breq	.+52     	; 0x23a2 <xQueueSemaphoreTake+0x176>
    236e:	0f b6       	in	r0, 0x3f	; 63
    2370:	f8 94       	cli
    2372:	0f 92       	push	r0
    2374:	f8 01       	movw	r30, r16
    2376:	83 89       	ldd	r24, Z+19	; 0x13
    2378:	88 23       	and	r24, r24
    237a:	39 f0       	breq	.+14     	; 0x238a <xQueueSemaphoreTake+0x15e>
    237c:	02 8c       	ldd	r0, Z+26	; 0x1a
    237e:	f3 8d       	ldd	r31, Z+27	; 0x1b
    2380:	e0 2d       	mov	r30, r0
    2382:	80 81       	ld	r24, Z
    2384:	64 e0       	ldi	r22, 0x04	; 4
    2386:	68 1b       	sub	r22, r24
    2388:	01 c0       	rjmp	.+2      	; 0x238c <xQueueSemaphoreTake+0x160>
    238a:	60 e0       	ldi	r22, 0x00	; 0
    238c:	d8 01       	movw	r26, r16
    238e:	14 96       	adiw	r26, 0x04	; 4
    2390:	8d 91       	ld	r24, X+
    2392:	9c 91       	ld	r25, X
    2394:	15 97       	sbiw	r26, 0x05	; 5
    2396:	0e 94 ec 1a 	call	0x35d8	; 0x35d8 <vTaskPriorityDisinheritAfterTimeout>
    239a:	0f 90       	pop	r0
    239c:	0f be       	out	0x3f, r0	; 63
    239e:	80 e0       	ldi	r24, 0x00	; 0
    23a0:	01 c0       	rjmp	.+2      	; 0x23a4 <xQueueSemaphoreTake+0x178>
    23a2:	80 e0       	ldi	r24, 0x00	; 0
    23a4:	29 96       	adiw	r28, 0x09	; 9
    23a6:	0f b6       	in	r0, 0x3f	; 63
    23a8:	f8 94       	cli
    23aa:	de bf       	out	0x3e, r29	; 62
    23ac:	0f be       	out	0x3f, r0	; 63
    23ae:	cd bf       	out	0x3d, r28	; 61
    23b0:	df 91       	pop	r29
    23b2:	cf 91       	pop	r28
    23b4:	1f 91       	pop	r17
    23b6:	0f 91       	pop	r16
    23b8:	ff 90       	pop	r15
    23ba:	ef 90       	pop	r14
    23bc:	df 90       	pop	r13
    23be:	cf 90       	pop	r12
    23c0:	bf 90       	pop	r11
    23c2:	08 95       	ret

000023c4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
    {
    23c4:	cf 93       	push	r28
    23c6:	df 93       	push	r29
    23c8:	ec 01       	movw	r28, r24
        will not actually cause the task to block, just place it on a blocked
        list.  It will not block until the scheduler is unlocked - at which
        time a yield will be performed.  If an item is added to the queue while
        the queue is locked, and the calling task blocks on the queue, then the
        calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    23ca:	0f b6       	in	r0, 0x3f	; 63
    23cc:	f8 94       	cli
    23ce:	0f 92       	push	r0
    23d0:	89 a1       	ldd	r24, Y+33	; 0x21
    23d2:	8f 3f       	cpi	r24, 0xFF	; 255
    23d4:	09 f4       	brne	.+2      	; 0x23d8 <vQueueWaitForMessageRestricted+0x14>
    23d6:	19 a2       	std	Y+33, r1	; 0x21
    23d8:	8a a1       	ldd	r24, Y+34	; 0x22
    23da:	8f 3f       	cpi	r24, 0xFF	; 255
    23dc:	09 f4       	brne	.+2      	; 0x23e0 <vQueueWaitForMessageRestricted+0x1c>
    23de:	1a a2       	std	Y+34, r1	; 0x22
    23e0:	0f 90       	pop	r0
    23e2:	0f be       	out	0x3f, r0	; 63
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    23e4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    23e6:	81 11       	cpse	r24, r1
    23e8:	03 c0       	rjmp	.+6      	; 0x23f0 <vQueueWaitForMessageRestricted+0x2c>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    23ea:	ce 01       	movw	r24, r28
    23ec:	43 96       	adiw	r24, 0x13	; 19
    23ee:	1d d7       	rcall	.+3642   	; 0x322a <vTaskPlaceOnEventListRestricted>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
        prvUnlockQueue( pxQueue );
    23f0:	ce 01       	movw	r24, r28
    23f2:	d2 dc       	rcall	.-1628   	; 0x1d98 <prvUnlockQueue>
    }
    23f4:	df 91       	pop	r29
    23f6:	cf 91       	pop	r28
    23f8:	08 95       	ret

000023fa <prvBytesInBuffer>:

    configASSERT( pxStreamBuffer );

    xReturn = prvBytesInBuffer( pxStreamBuffer );
    return xReturn;
}
    23fa:	fc 01       	movw	r30, r24
    23fc:	44 81       	ldd	r20, Z+4	; 0x04
    23fe:	55 81       	ldd	r21, Z+5	; 0x05
    2400:	22 81       	ldd	r18, Z+2	; 0x02
    2402:	33 81       	ldd	r19, Z+3	; 0x03
    2404:	24 0f       	add	r18, r20
    2406:	35 1f       	adc	r19, r21
    2408:	80 81       	ld	r24, Z
    240a:	91 81       	ldd	r25, Z+1	; 0x01
    240c:	b9 01       	movw	r22, r18
    240e:	68 1b       	sub	r22, r24
    2410:	79 0b       	sbc	r23, r25
    2412:	cb 01       	movw	r24, r22
    2414:	64 17       	cp	r22, r20
    2416:	75 07       	cpc	r23, r21
    2418:	10 f0       	brcs	.+4      	; 0x241e <prvBytesInBuffer+0x24>
    241a:	84 1b       	sub	r24, r20
    241c:	95 0b       	sbc	r25, r21
    241e:	08 95       	ret

00002420 <prvWriteBytesToBuffer>:
    2420:	af 92       	push	r10
    2422:	bf 92       	push	r11
    2424:	cf 92       	push	r12
    2426:	df 92       	push	r13
    2428:	ef 92       	push	r14
    242a:	ff 92       	push	r15
    242c:	0f 93       	push	r16
    242e:	1f 93       	push	r17
    2430:	cf 93       	push	r28
    2432:	df 93       	push	r29
    2434:	6c 01       	movw	r12, r24
    2436:	5b 01       	movw	r10, r22
    2438:	7a 01       	movw	r14, r20
    243a:	fc 01       	movw	r30, r24
    243c:	c2 81       	ldd	r28, Z+2	; 0x02
    243e:	d3 81       	ldd	r29, Z+3	; 0x03
    2440:	04 81       	ldd	r16, Z+4	; 0x04
    2442:	15 81       	ldd	r17, Z+5	; 0x05
    2444:	0c 1b       	sub	r16, r28
    2446:	1d 0b       	sbc	r17, r29
    2448:	40 17       	cp	r20, r16
    244a:	51 07       	cpc	r21, r17
    244c:	08 f4       	brcc	.+2      	; 0x2450 <prvWriteBytesToBuffer+0x30>
    244e:	8a 01       	movw	r16, r20
    2450:	f6 01       	movw	r30, r12
    2452:	84 85       	ldd	r24, Z+12	; 0x0c
    2454:	95 85       	ldd	r25, Z+13	; 0x0d
    2456:	a8 01       	movw	r20, r16
    2458:	b5 01       	movw	r22, r10
    245a:	8c 0f       	add	r24, r28
    245c:	9d 1f       	adc	r25, r29
    245e:	0e 94 42 31 	call	0x6284	; 0x6284 <memcpy>
    2462:	0e 15       	cp	r16, r14
    2464:	1f 05       	cpc	r17, r15
    2466:	58 f4       	brcc	.+22     	; 0x247e <prvWriteBytesToBuffer+0x5e>
    2468:	a7 01       	movw	r20, r14
    246a:	40 1b       	sub	r20, r16
    246c:	51 0b       	sbc	r21, r17
    246e:	b5 01       	movw	r22, r10
    2470:	60 0f       	add	r22, r16
    2472:	71 1f       	adc	r23, r17
    2474:	f6 01       	movw	r30, r12
    2476:	84 85       	ldd	r24, Z+12	; 0x0c
    2478:	95 85       	ldd	r25, Z+13	; 0x0d
    247a:	0e 94 42 31 	call	0x6284	; 0x6284 <memcpy>
    247e:	ce 01       	movw	r24, r28
    2480:	8e 0d       	add	r24, r14
    2482:	9f 1d       	adc	r25, r15
    2484:	f6 01       	movw	r30, r12
    2486:	24 81       	ldd	r18, Z+4	; 0x04
    2488:	35 81       	ldd	r19, Z+5	; 0x05
    248a:	82 17       	cp	r24, r18
    248c:	93 07       	cpc	r25, r19
    248e:	10 f0       	brcs	.+4      	; 0x2494 <prvWriteBytesToBuffer+0x74>
    2490:	82 1b       	sub	r24, r18
    2492:	93 0b       	sbc	r25, r19
    2494:	f6 01       	movw	r30, r12
    2496:	93 83       	std	Z+3, r25	; 0x03
    2498:	82 83       	std	Z+2, r24	; 0x02
    249a:	c7 01       	movw	r24, r14
    249c:	df 91       	pop	r29
    249e:	cf 91       	pop	r28
    24a0:	1f 91       	pop	r17
    24a2:	0f 91       	pop	r16
    24a4:	ff 90       	pop	r15
    24a6:	ef 90       	pop	r14
    24a8:	df 90       	pop	r13
    24aa:	cf 90       	pop	r12
    24ac:	bf 90       	pop	r11
    24ae:	af 90       	pop	r10
    24b0:	08 95       	ret

000024b2 <prvWriteMessageToBuffer>:
    24b2:	cf 92       	push	r12
    24b4:	df 92       	push	r13
    24b6:	ef 92       	push	r14
    24b8:	ff 92       	push	r15
    24ba:	0f 93       	push	r16
    24bc:	1f 93       	push	r17
    24be:	cf 93       	push	r28
    24c0:	df 93       	push	r29
    24c2:	1f 92       	push	r1
    24c4:	1f 92       	push	r1
    24c6:	cd b7       	in	r28, 0x3d	; 61
    24c8:	de b7       	in	r29, 0x3e	; 62
    24ca:	5a 83       	std	Y+2, r21	; 0x02
    24cc:	49 83       	std	Y+1, r20	; 0x01
    24ce:	21 15       	cp	r18, r1
    24d0:	31 05       	cpc	r19, r1
    24d2:	c9 f0       	breq	.+50     	; 0x2506 <prvWriteMessageToBuffer+0x54>
    24d4:	6b 01       	movw	r12, r22
    24d6:	7c 01       	movw	r14, r24
    24d8:	fc 01       	movw	r30, r24
    24da:	86 85       	ldd	r24, Z+14	; 0x0e
    24dc:	80 fd       	sbrc	r24, 0
    24de:	08 c0       	rjmp	.+16     	; 0x24f0 <prvWriteMessageToBuffer+0x3e>
    24e0:	ca 01       	movw	r24, r20
    24e2:	24 17       	cp	r18, r20
    24e4:	35 07       	cpc	r19, r21
    24e6:	08 f4       	brcc	.+2      	; 0x24ea <prvWriteMessageToBuffer+0x38>
    24e8:	c9 01       	movw	r24, r18
    24ea:	9a 83       	std	Y+2, r25	; 0x02
    24ec:	89 83       	std	Y+1, r24	; 0x01
    24ee:	11 c0       	rjmp	.+34     	; 0x2512 <prvWriteMessageToBuffer+0x60>
    24f0:	20 17       	cp	r18, r16
    24f2:	31 07       	cpc	r19, r17
    24f4:	58 f0       	brcs	.+22     	; 0x250c <prvWriteMessageToBuffer+0x5a>
    24f6:	42 e0       	ldi	r20, 0x02	; 2
    24f8:	50 e0       	ldi	r21, 0x00	; 0
    24fa:	be 01       	movw	r22, r28
    24fc:	6f 5f       	subi	r22, 0xFF	; 255
    24fe:	7f 4f       	sbci	r23, 0xFF	; 255
    2500:	c7 01       	movw	r24, r14
    2502:	8e df       	rcall	.-228    	; 0x2420 <prvWriteBytesToBuffer>
    2504:	06 c0       	rjmp	.+12     	; 0x2512 <prvWriteMessageToBuffer+0x60>
    2506:	80 e0       	ldi	r24, 0x00	; 0
    2508:	90 e0       	ldi	r25, 0x00	; 0
    250a:	08 c0       	rjmp	.+16     	; 0x251c <prvWriteMessageToBuffer+0x6a>
    250c:	80 e0       	ldi	r24, 0x00	; 0
    250e:	90 e0       	ldi	r25, 0x00	; 0
    2510:	05 c0       	rjmp	.+10     	; 0x251c <prvWriteMessageToBuffer+0x6a>
    2512:	49 81       	ldd	r20, Y+1	; 0x01
    2514:	5a 81       	ldd	r21, Y+2	; 0x02
    2516:	b6 01       	movw	r22, r12
    2518:	c7 01       	movw	r24, r14
    251a:	82 df       	rcall	.-252    	; 0x2420 <prvWriteBytesToBuffer>
    251c:	0f 90       	pop	r0
    251e:	0f 90       	pop	r0
    2520:	df 91       	pop	r29
    2522:	cf 91       	pop	r28
    2524:	1f 91       	pop	r17
    2526:	0f 91       	pop	r16
    2528:	ff 90       	pop	r15
    252a:	ef 90       	pop	r14
    252c:	df 90       	pop	r13
    252e:	cf 90       	pop	r12
    2530:	08 95       	ret

00002532 <prvReadBytesFromBuffer>:
    2532:	af 92       	push	r10
    2534:	bf 92       	push	r11
    2536:	cf 92       	push	r12
    2538:	df 92       	push	r13
    253a:	ef 92       	push	r14
    253c:	ff 92       	push	r15
    253e:	0f 93       	push	r16
    2540:	1f 93       	push	r17
    2542:	cf 93       	push	r28
    2544:	df 93       	push	r29
    2546:	7c 01       	movw	r14, r24
    2548:	5b 01       	movw	r10, r22
    254a:	e9 01       	movw	r28, r18
    254c:	42 17       	cp	r20, r18
    254e:	53 07       	cpc	r21, r19
    2550:	08 f4       	brcc	.+2      	; 0x2554 <prvReadBytesFromBuffer+0x22>
    2552:	ea 01       	movw	r28, r20
    2554:	20 97       	sbiw	r28, 0x00	; 0
    2556:	79 f1       	breq	.+94     	; 0x25b6 <prvReadBytesFromBuffer+0x84>
    2558:	f7 01       	movw	r30, r14
    255a:	00 81       	ld	r16, Z
    255c:	11 81       	ldd	r17, Z+1	; 0x01
    255e:	c4 80       	ldd	r12, Z+4	; 0x04
    2560:	d5 80       	ldd	r13, Z+5	; 0x05
    2562:	c0 1a       	sub	r12, r16
    2564:	d1 0a       	sbc	r13, r17
    2566:	cc 15       	cp	r28, r12
    2568:	dd 05       	cpc	r29, r13
    256a:	08 f4       	brcc	.+2      	; 0x256e <prvReadBytesFromBuffer+0x3c>
    256c:	6e 01       	movw	r12, r28
    256e:	f7 01       	movw	r30, r14
    2570:	64 85       	ldd	r22, Z+12	; 0x0c
    2572:	75 85       	ldd	r23, Z+13	; 0x0d
    2574:	60 0f       	add	r22, r16
    2576:	71 1f       	adc	r23, r17
    2578:	a6 01       	movw	r20, r12
    257a:	c5 01       	movw	r24, r10
    257c:	0e 94 42 31 	call	0x6284	; 0x6284 <memcpy>
    2580:	cc 16       	cp	r12, r28
    2582:	dd 06       	cpc	r13, r29
    2584:	58 f4       	brcc	.+22     	; 0x259c <prvReadBytesFromBuffer+0x6a>
    2586:	ae 01       	movw	r20, r28
    2588:	4c 19       	sub	r20, r12
    258a:	5d 09       	sbc	r21, r13
    258c:	f7 01       	movw	r30, r14
    258e:	64 85       	ldd	r22, Z+12	; 0x0c
    2590:	75 85       	ldd	r23, Z+13	; 0x0d
    2592:	c5 01       	movw	r24, r10
    2594:	8c 0d       	add	r24, r12
    2596:	9d 1d       	adc	r25, r13
    2598:	0e 94 42 31 	call	0x6284	; 0x6284 <memcpy>
    259c:	0c 0f       	add	r16, r28
    259e:	1d 1f       	adc	r17, r29
    25a0:	f7 01       	movw	r30, r14
    25a2:	84 81       	ldd	r24, Z+4	; 0x04
    25a4:	95 81       	ldd	r25, Z+5	; 0x05
    25a6:	08 17       	cp	r16, r24
    25a8:	19 07       	cpc	r17, r25
    25aa:	10 f0       	brcs	.+4      	; 0x25b0 <prvReadBytesFromBuffer+0x7e>
    25ac:	08 1b       	sub	r16, r24
    25ae:	19 0b       	sbc	r17, r25
    25b0:	f7 01       	movw	r30, r14
    25b2:	11 83       	std	Z+1, r17	; 0x01
    25b4:	00 83       	st	Z, r16
    25b6:	ce 01       	movw	r24, r28
    25b8:	df 91       	pop	r29
    25ba:	cf 91       	pop	r28
    25bc:	1f 91       	pop	r17
    25be:	0f 91       	pop	r16
    25c0:	ff 90       	pop	r15
    25c2:	ef 90       	pop	r14
    25c4:	df 90       	pop	r13
    25c6:	cf 90       	pop	r12
    25c8:	bf 90       	pop	r11
    25ca:	af 90       	pop	r10
    25cc:	08 95       	ret

000025ce <xStreamBufferGenericCreate>:
    25ce:	ef 92       	push	r14
    25d0:	ff 92       	push	r15
    25d2:	1f 93       	push	r17
    25d4:	cf 93       	push	r28
    25d6:	df 93       	push	r29
    25d8:	eb 01       	movw	r28, r22
    25da:	11 e0       	ldi	r17, 0x01	; 1
    25dc:	41 30       	cpi	r20, 0x01	; 1
    25de:	09 f0       	breq	.+2      	; 0x25e2 <xStreamBufferGenericCreate+0x14>
    25e0:	10 e0       	ldi	r17, 0x00	; 0
    25e2:	20 97       	sbiw	r28, 0x00	; 0
    25e4:	11 f4       	brne	.+4      	; 0x25ea <xStreamBufferGenericCreate+0x1c>
    25e6:	c1 e0       	ldi	r28, 0x01	; 1
    25e8:	d0 e0       	ldi	r29, 0x00	; 0
    25ea:	7c 01       	movw	r14, r24
    25ec:	2f ef       	ldi	r18, 0xFF	; 255
    25ee:	e2 1a       	sub	r14, r18
    25f0:	f2 0a       	sbc	r15, r18
    25f2:	41 96       	adiw	r24, 0x11	; 17
    25f4:	53 d8       	rcall	.-3930   	; 0x169c <pvPortMalloc>
    25f6:	00 97       	sbiw	r24, 0x00	; 0
    25f8:	81 f0       	breq	.+32     	; 0x261a <xStreamBufferGenericCreate+0x4c>
    25fa:	20 e1       	ldi	r18, 0x10	; 16
    25fc:	fc 01       	movw	r30, r24
    25fe:	11 92       	st	Z+, r1
    2600:	2a 95       	dec	r18
    2602:	e9 f7       	brne	.-6      	; 0x25fe <xStreamBufferGenericCreate+0x30>
    2604:	9c 01       	movw	r18, r24
    2606:	20 5f       	subi	r18, 0xF0	; 240
    2608:	3f 4f       	sbci	r19, 0xFF	; 255
    260a:	fc 01       	movw	r30, r24
    260c:	35 87       	std	Z+13, r19	; 0x0d
    260e:	24 87       	std	Z+12, r18	; 0x0c
    2610:	f5 82       	std	Z+5, r15	; 0x05
    2612:	e4 82       	std	Z+4, r14	; 0x04
    2614:	d7 83       	std	Z+7, r29	; 0x07
    2616:	c6 83       	std	Z+6, r28	; 0x06
    2618:	16 87       	std	Z+14, r17	; 0x0e
    261a:	df 91       	pop	r29
    261c:	cf 91       	pop	r28
    261e:	1f 91       	pop	r17
    2620:	ff 90       	pop	r15
    2622:	ef 90       	pop	r14
    2624:	08 95       	ret

00002626 <xStreamBufferReset>:
    2626:	cf 93       	push	r28
    2628:	df 93       	push	r29
    262a:	fc 01       	movw	r30, r24
    262c:	27 85       	ldd	r18, Z+15	; 0x0f
    262e:	0f b6       	in	r0, 0x3f	; 63
    2630:	f8 94       	cli
    2632:	0f 92       	push	r0
    2634:	80 85       	ldd	r24, Z+8	; 0x08
    2636:	91 85       	ldd	r25, Z+9	; 0x09
    2638:	89 2b       	or	r24, r25
    263a:	d1 f4       	brne	.+52     	; 0x2670 <xStreamBufferReset+0x4a>
    263c:	82 85       	ldd	r24, Z+10	; 0x0a
    263e:	93 85       	ldd	r25, Z+11	; 0x0b
    2640:	89 2b       	or	r24, r25
    2642:	c1 f4       	brne	.+48     	; 0x2674 <xStreamBufferReset+0x4e>
    2644:	86 85       	ldd	r24, Z+14	; 0x0e
    2646:	46 81       	ldd	r20, Z+6	; 0x06
    2648:	57 81       	ldd	r21, Z+7	; 0x07
    264a:	64 81       	ldd	r22, Z+4	; 0x04
    264c:	75 81       	ldd	r23, Z+5	; 0x05
    264e:	a4 85       	ldd	r26, Z+12	; 0x0c
    2650:	b5 85       	ldd	r27, Z+13	; 0x0d
    2652:	90 e1       	ldi	r25, 0x10	; 16
    2654:	ef 01       	movw	r28, r30
    2656:	19 92       	st	Y+, r1
    2658:	9a 95       	dec	r25
    265a:	e9 f7       	brne	.-6      	; 0x2656 <xStreamBufferReset+0x30>
    265c:	b5 87       	std	Z+13, r27	; 0x0d
    265e:	a4 87       	std	Z+12, r26	; 0x0c
    2660:	75 83       	std	Z+5, r23	; 0x05
    2662:	64 83       	std	Z+4, r22	; 0x04
    2664:	57 83       	std	Z+7, r21	; 0x07
    2666:	46 83       	std	Z+6, r20	; 0x06
    2668:	86 87       	std	Z+14, r24	; 0x0e
    266a:	27 87       	std	Z+15, r18	; 0x0f
    266c:	81 e0       	ldi	r24, 0x01	; 1
    266e:	03 c0       	rjmp	.+6      	; 0x2676 <xStreamBufferReset+0x50>
    2670:	80 e0       	ldi	r24, 0x00	; 0
    2672:	01 c0       	rjmp	.+2      	; 0x2676 <xStreamBufferReset+0x50>
    2674:	80 e0       	ldi	r24, 0x00	; 0
    2676:	0f 90       	pop	r0
    2678:	0f be       	out	0x3f, r0	; 63
    267a:	df 91       	pop	r29
    267c:	cf 91       	pop	r28
    267e:	08 95       	ret

00002680 <xStreamBufferSpacesAvailable>:
    2680:	fc 01       	movw	r30, r24
    2682:	24 81       	ldd	r18, Z+4	; 0x04
    2684:	35 81       	ldd	r19, Z+5	; 0x05
    2686:	80 81       	ld	r24, Z
    2688:	91 81       	ldd	r25, Z+1	; 0x01
    268a:	42 81       	ldd	r20, Z+2	; 0x02
    268c:	53 81       	ldd	r21, Z+3	; 0x03
    268e:	82 0f       	add	r24, r18
    2690:	93 1f       	adc	r25, r19
    2692:	01 97       	sbiw	r24, 0x01	; 1
    2694:	84 1b       	sub	r24, r20
    2696:	95 0b       	sbc	r25, r21
    2698:	82 17       	cp	r24, r18
    269a:	93 07       	cpc	r25, r19
    269c:	10 f0       	brcs	.+4      	; 0x26a2 <xStreamBufferSpacesAvailable+0x22>
    269e:	82 1b       	sub	r24, r18
    26a0:	93 0b       	sbc	r25, r19
    26a2:	08 95       	ret

000026a4 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void *pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    26a4:	2f 92       	push	r2
    26a6:	3f 92       	push	r3
    26a8:	4f 92       	push	r4
    26aa:	5f 92       	push	r5
    26ac:	6f 92       	push	r6
    26ae:	7f 92       	push	r7
    26b0:	8f 92       	push	r8
    26b2:	9f 92       	push	r9
    26b4:	af 92       	push	r10
    26b6:	bf 92       	push	r11
    26b8:	cf 92       	push	r12
    26ba:	df 92       	push	r13
    26bc:	ef 92       	push	r14
    26be:	ff 92       	push	r15
    26c0:	0f 93       	push	r16
    26c2:	1f 93       	push	r17
    26c4:	cf 93       	push	r28
    26c6:	df 93       	push	r29
    26c8:	cd b7       	in	r28, 0x3d	; 61
    26ca:	de b7       	in	r29, 0x3e	; 62
    26cc:	29 97       	sbiw	r28, 0x09	; 9
    26ce:	0f b6       	in	r0, 0x3f	; 63
    26d0:	f8 94       	cli
    26d2:	de bf       	out	0x3e, r29	; 62
    26d4:	0f be       	out	0x3f, r0	; 63
    26d6:	cd bf       	out	0x3d, r28	; 61
    26d8:	5c 01       	movw	r10, r24
    26da:	1b 01       	movw	r2, r22
    26dc:	2a 01       	movw	r4, r20
    26de:	0e 83       	std	Y+6, r16	; 0x06
    26e0:	1f 83       	std	Y+7, r17	; 0x07
    26e2:	28 87       	std	Y+8, r18	; 0x08
    26e4:	39 87       	std	Y+9, r19	; 0x09

    /* This send function is used to write to both message buffers and stream
    buffers.  If this is a message buffer then the space needed must be
    increased by the amount of bytes needed to store the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    26e6:	fc 01       	movw	r30, r24
    26e8:	86 85       	ldd	r24, Z+14	; 0x0e
    26ea:	80 ff       	sbrs	r24, 0
    26ec:	05 c0       	rjmp	.+10     	; 0x26f8 <xStreamBufferSend+0x54>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    26ee:	3a 01       	movw	r6, r20
    26f0:	f2 e0       	ldi	r31, 0x02	; 2
    26f2:	6f 0e       	add	r6, r31
    26f4:	71 1c       	adc	r7, r1
    26f6:	01 c0       	rjmp	.+2      	; 0x26fa <xStreamBufferSend+0x56>
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReturn, xSpace = 0;
size_t xRequiredSpace = xDataLengthBytes;
    26f8:	3a 01       	movw	r6, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    26fa:	8e 81       	ldd	r24, Y+6	; 0x06
    26fc:	9f 81       	ldd	r25, Y+7	; 0x07
    26fe:	a8 85       	ldd	r26, Y+8	; 0x08
    2700:	b9 85       	ldd	r27, Y+9	; 0x09
    2702:	89 2b       	or	r24, r25
    2704:	8a 2b       	or	r24, r26
    2706:	8b 2b       	or	r24, r27
    2708:	09 f4       	brne	.+2      	; 0x270c <xStreamBufferSend+0x68>
    270a:	34 c0       	rjmp	.+104    	; 0x2774 <xStreamBufferSend+0xd0>
    {
        vTaskSetTimeOutState( &xTimeOut );
    270c:	ce 01       	movw	r24, r28
    270e:	01 96       	adiw	r24, 0x01	; 1
    2710:	22 d6       	rcall	.+3140   	; 0x3356 <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
            buffer. */
            taskENTER_CRITICAL();
    2712:	0f b6       	in	r0, 0x3f	; 63
    2714:	f8 94       	cli
    2716:	0f 92       	push	r0
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    2718:	c5 01       	movw	r24, r10
    271a:	b2 df       	rcall	.-156    	; 0x2680 <xStreamBufferSpacesAvailable>
    271c:	4c 01       	movw	r8, r24

                if( xSpace < xRequiredSpace )
    271e:	86 15       	cp	r24, r6
    2720:	97 05       	cpc	r25, r7
    2722:	18 f5       	brcc	.+70     	; 0x276a <xStreamBufferSend+0xc6>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClear( NULL );
    2724:	80 e0       	ldi	r24, 0x00	; 0
    2726:	90 e0       	ldi	r25, 0x00	; 0
    2728:	0e 94 fd 1c 	call	0x39fa	; 0x39fa <xTaskNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    272c:	94 d6       	rcall	.+3368   	; 0x3456 <xTaskGetCurrentTaskHandle>
    272e:	f5 01       	movw	r30, r10
    2730:	93 87       	std	Z+11, r25	; 0x0b
    2732:	82 87       	std	Z+10, r24	; 0x0a
                {
                    taskEXIT_CRITICAL();
                    break;
                }
            }
            taskEXIT_CRITICAL();
    2734:	0f 90       	pop	r0
    2736:	0f be       	out	0x3f, r0	; 63

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    2738:	ce 80       	ldd	r12, Y+6	; 0x06
    273a:	df 80       	ldd	r13, Y+7	; 0x07
    273c:	e8 84       	ldd	r14, Y+8	; 0x08
    273e:	f9 84       	ldd	r15, Y+9	; 0x09
    2740:	00 e0       	ldi	r16, 0x00	; 0
    2742:	10 e0       	ldi	r17, 0x00	; 0
    2744:	20 e0       	ldi	r18, 0x00	; 0
    2746:	30 e0       	ldi	r19, 0x00	; 0
    2748:	a9 01       	movw	r20, r18
    274a:	60 e0       	ldi	r22, 0x00	; 0
    274c:	70 e0       	ldi	r23, 0x00	; 0
    274e:	cb 01       	movw	r24, r22
    2750:	c9 d7       	rcall	.+3986   	; 0x36e4 <xTaskNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
    2752:	f5 01       	movw	r30, r10
    2754:	13 86       	std	Z+11, r1	; 0x0b
    2756:	12 86       	std	Z+10, r1	; 0x0a

        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    2758:	be 01       	movw	r22, r28
    275a:	6a 5f       	subi	r22, 0xFA	; 250
    275c:	7f 4f       	sbci	r23, 0xFF	; 255
    275e:	ce 01       	movw	r24, r28
    2760:	01 96       	adiw	r24, 0x01	; 1
    2762:	20 d6       	rcall	.+3136   	; 0x33a4 <xTaskCheckForTimeOut>
    2764:	88 23       	and	r24, r24
    2766:	a9 f2       	breq	.-86     	; 0x2712 <xStreamBufferSend+0x6e>
    2768:	02 c0       	rjmp	.+4      	; 0x276e <xStreamBufferSend+0xca>
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
                }
                else
                {
                    taskEXIT_CRITICAL();
    276a:	0f 90       	pop	r0
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
    276c:	0f be       	out	0x3f, r0	; 63
    276e:	81 14       	cp	r8, r1
    2770:	91 04       	cpc	r9, r1
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    2772:	19 f4       	brne	.+6      	; 0x277a <xStreamBufferSend+0xd6>
    2774:	c5 01       	movw	r24, r10
    2776:	84 df       	rcall	.-248    	; 0x2680 <xStreamBufferSpacesAvailable>
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    2778:	4c 01       	movw	r8, r24
    277a:	83 01       	movw	r16, r6
    277c:	94 01       	movw	r18, r8
    277e:	a2 01       	movw	r20, r4
    2780:	b1 01       	movw	r22, r2
    2782:	c5 01       	movw	r24, r10
    2784:	96 de       	rcall	.-724    	; 0x24b2 <prvWriteMessageToBuffer>

    if( xReturn > ( size_t ) 0 )
    2786:	7c 01       	movw	r14, r24
    2788:	89 2b       	or	r24, r25
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    278a:	e1 f0       	breq	.+56     	; 0x27c4 <xStreamBufferSend+0x120>
    278c:	c5 01       	movw	r24, r10
    278e:	35 de       	rcall	.-918    	; 0x23fa <prvBytesInBuffer>
    2790:	f5 01       	movw	r30, r10
    2792:	26 81       	ldd	r18, Z+6	; 0x06
    2794:	37 81       	ldd	r19, Z+7	; 0x07
    2796:	82 17       	cp	r24, r18
    2798:	93 07       	cpc	r25, r19
        {
            sbSEND_COMPLETED( pxStreamBuffer );
    279a:	a0 f0       	brcs	.+40     	; 0x27c4 <xStreamBufferSend+0x120>
    279c:	0e d3       	rcall	.+1564   	; 0x2dba <vTaskSuspendAll>
    279e:	f5 01       	movw	r30, r10
    27a0:	80 85       	ldd	r24, Z+8	; 0x08
    27a2:	91 85       	ldd	r25, Z+9	; 0x09
    27a4:	89 2b       	or	r24, r25
    27a6:	69 f0       	breq	.+26     	; 0x27c2 <xStreamBufferSend+0x11e>
    27a8:	80 85       	ldd	r24, Z+8	; 0x08
    27aa:	91 85       	ldd	r25, Z+9	; 0x09
    27ac:	00 e0       	ldi	r16, 0x00	; 0
    27ae:	10 e0       	ldi	r17, 0x00	; 0
    27b0:	20 e0       	ldi	r18, 0x00	; 0
    27b2:	40 e0       	ldi	r20, 0x00	; 0
    27b4:	50 e0       	ldi	r21, 0x00	; 0
    27b6:	ba 01       	movw	r22, r20
    27b8:	0e 94 fc 1b 	call	0x37f8	; 0x37f8 <xTaskGenericNotify>
    27bc:	f5 01       	movw	r30, r10
    27be:	11 86       	std	Z+9, r1	; 0x09
    27c0:	10 86       	std	Z+8, r1	; 0x08
    27c2:	e4 d3       	rcall	.+1992   	; 0x2f8c <xTaskResumeAll>
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    27c4:	c7 01       	movw	r24, r14
    27c6:	29 96       	adiw	r28, 0x09	; 9
    27c8:	0f b6       	in	r0, 0x3f	; 63
    27ca:	f8 94       	cli
    27cc:	de bf       	out	0x3e, r29	; 62
    27ce:	0f be       	out	0x3f, r0	; 63
    27d0:	cd bf       	out	0x3d, r28	; 61
    27d2:	df 91       	pop	r29
    27d4:	cf 91       	pop	r28
    27d6:	1f 91       	pop	r17
    27d8:	0f 91       	pop	r16
    27da:	ff 90       	pop	r15
    27dc:	ef 90       	pop	r14
    27de:	df 90       	pop	r13
    27e0:	cf 90       	pop	r12
    27e2:	bf 90       	pop	r11
    27e4:	af 90       	pop	r10
    27e6:	9f 90       	pop	r9
    27e8:	8f 90       	pop	r8
    27ea:	7f 90       	pop	r7
    27ec:	6f 90       	pop	r6
    27ee:	5f 90       	pop	r5
    27f0:	4f 90       	pop	r4
    27f2:	3f 90       	pop	r3
    27f4:	2f 90       	pop	r2
    27f6:	08 95       	ret

000027f8 <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void *pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    27f8:	af 92       	push	r10
    27fa:	bf 92       	push	r11
    27fc:	cf 92       	push	r12
    27fe:	df 92       	push	r13
    2800:	ef 92       	push	r14
    2802:	ff 92       	push	r15
    2804:	0f 93       	push	r16
    2806:	1f 93       	push	r17
    2808:	cf 93       	push	r28
    280a:	df 93       	push	r29
    280c:	ec 01       	movw	r28, r24
    280e:	5b 01       	movw	r10, r22
    2810:	6a 01       	movw	r12, r20
    2812:	79 01       	movw	r14, r18

    /* This send function is used to write to both message buffers and stream
    buffers.  If this is a message buffer then the space needed must be
    increased by the amount of bytes needed to store the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    2814:	8e 85       	ldd	r24, Y+14	; 0x0e
    2816:	80 ff       	sbrs	r24, 0
    2818:	04 c0       	rjmp	.+8      	; 0x2822 <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    281a:	8a 01       	movw	r16, r20
    281c:	0e 5f       	subi	r16, 0xFE	; 254
    281e:	1f 4f       	sbci	r17, 0xFF	; 255
    2820:	01 c0       	rjmp	.+2      	; 0x2824 <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReturn, xSpace;
size_t xRequiredSpace = xDataLengthBytes;
    2822:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    2824:	ce 01       	movw	r24, r28
    2826:	2c df       	rcall	.-424    	; 0x2680 <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    2828:	9c 01       	movw	r18, r24
    282a:	a6 01       	movw	r20, r12
    282c:	b5 01       	movw	r22, r10
    282e:	ce 01       	movw	r24, r28
    2830:	40 de       	rcall	.-896    	; 0x24b2 <prvWriteMessageToBuffer>
    2832:	6c 01       	movw	r12, r24

    if( xReturn > ( size_t ) 0 )
    2834:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    2836:	b9 f0       	breq	.+46     	; 0x2866 <xStreamBufferSendFromISR+0x6e>
    2838:	ce 01       	movw	r24, r28
    283a:	df dd       	rcall	.-1090   	; 0x23fa <prvBytesInBuffer>
    283c:	2e 81       	ldd	r18, Y+6	; 0x06
    283e:	3f 81       	ldd	r19, Y+7	; 0x07
    2840:	82 17       	cp	r24, r18
    2842:	93 07       	cpc	r25, r19
    2844:	80 f0       	brcs	.+32     	; 0x2866 <xStreamBufferSendFromISR+0x6e>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    2846:	88 85       	ldd	r24, Y+8	; 0x08
    2848:	99 85       	ldd	r25, Y+9	; 0x09
    284a:	89 2b       	or	r24, r25
    284c:	61 f0       	breq	.+24     	; 0x2866 <xStreamBufferSendFromISR+0x6e>
    284e:	88 85       	ldd	r24, Y+8	; 0x08
    2850:	99 85       	ldd	r25, Y+9	; 0x09
    2852:	00 e0       	ldi	r16, 0x00	; 0
    2854:	10 e0       	ldi	r17, 0x00	; 0
    2856:	20 e0       	ldi	r18, 0x00	; 0
    2858:	40 e0       	ldi	r20, 0x00	; 0
    285a:	50 e0       	ldi	r21, 0x00	; 0
    285c:	ba 01       	movw	r22, r20
    285e:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <xTaskGenericNotifyFromISR>
    2862:	19 86       	std	Y+9, r1	; 0x09
    2864:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    2866:	c6 01       	movw	r24, r12
    2868:	df 91       	pop	r29
    286a:	cf 91       	pop	r28
    286c:	1f 91       	pop	r17
    286e:	0f 91       	pop	r16
    2870:	ff 90       	pop	r15
    2872:	ef 90       	pop	r14
    2874:	df 90       	pop	r13
    2876:	cf 90       	pop	r12
    2878:	bf 90       	pop	r11
    287a:	af 90       	pop	r10
    287c:	08 95       	ret

0000287e <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void *pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    287e:	4f 92       	push	r4
    2880:	5f 92       	push	r5
    2882:	6f 92       	push	r6
    2884:	7f 92       	push	r7
    2886:	8f 92       	push	r8
    2888:	9f 92       	push	r9
    288a:	af 92       	push	r10
    288c:	bf 92       	push	r11
    288e:	cf 92       	push	r12
    2890:	df 92       	push	r13
    2892:	ef 92       	push	r14
    2894:	ff 92       	push	r15
    2896:	0f 93       	push	r16
    2898:	1f 93       	push	r17
    289a:	cf 93       	push	r28
    289c:	df 93       	push	r29
    289e:	1f 92       	push	r1
    28a0:	1f 92       	push	r1
    28a2:	cd b7       	in	r28, 0x3d	; 61
    28a4:	de b7       	in	r29, 0x3e	; 62
    28a6:	5c 01       	movw	r10, r24
    28a8:	2b 01       	movw	r4, r22
    28aa:	3a 01       	movw	r6, r20
    28ac:	68 01       	movw	r12, r16
    28ae:	79 01       	movw	r14, r18
    /* This receive function is used by both message buffers, which store
    discrete messages, and stream buffers, which store a continuous stream of
    bytes.  Discrete messages include an additional
    sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    28b0:	fc 01       	movw	r30, r24
    28b2:	86 85       	ldd	r24, Z+14	; 0x0e
    28b4:	80 fd       	sbrc	r24, 0
    28b6:	03 c0       	rjmp	.+6      	; 0x28be <xStreamBufferReceive+0x40>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    28b8:	81 2c       	mov	r8, r1
    28ba:	91 2c       	mov	r9, r1
    28bc:	04 c0       	rjmp	.+8      	; 0x28c6 <xStreamBufferReceive+0x48>
    bytes.  Discrete messages include an additional
    sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    28be:	68 94       	set
    28c0:	88 24       	eor	r8, r8
    28c2:	81 f8       	bld	r8, 1
    28c4:	91 2c       	mov	r9, r1
    else
    {
        xBytesToStoreMessageLength = 0;
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    28c6:	c1 14       	cp	r12, r1
    28c8:	d1 04       	cpc	r13, r1
    28ca:	e1 04       	cpc	r14, r1
    28cc:	f1 04       	cpc	r15, r1
    28ce:	31 f1       	breq	.+76     	; 0x291c <xStreamBufferReceive+0x9e>
    {
        /* Checking if there is data and clearing the notification state must be
        performed atomically. */
        taskENTER_CRITICAL();
    28d0:	0f b6       	in	r0, 0x3f	; 63
    28d2:	f8 94       	cli
    28d4:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    28d6:	c5 01       	movw	r24, r10
    28d8:	90 dd       	rcall	.-1248   	; 0x23fa <prvBytesInBuffer>
    28da:	8c 01       	movw	r16, r24
            /* If this function was invoked by a message buffer read then
            xBytesToStoreMessageLength holds the number of bytes used to hold
            the length of the next discrete message.  If this function was
            invoked by a stream buffer read then xBytesToStoreMessageLength will
            be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    28dc:	88 16       	cp	r8, r24
    28de:	99 06       	cpc	r9, r25
    28e0:	40 f0       	brcs	.+16     	; 0x28f2 <xStreamBufferReceive+0x74>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    28e2:	80 e0       	ldi	r24, 0x00	; 0
    28e4:	90 e0       	ldi	r25, 0x00	; 0
    28e6:	0e 94 fd 1c 	call	0x39fa	; 0x39fa <xTaskNotifyStateClear>

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    28ea:	b5 d5       	rcall	.+2922   	; 0x3456 <xTaskGetCurrentTaskHandle>
    28ec:	f5 01       	movw	r30, r10
    28ee:	91 87       	std	Z+9, r25	; 0x09
    28f0:	80 87       	std	Z+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    28f2:	0f 90       	pop	r0
    28f4:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    28f6:	80 16       	cp	r8, r16
    28f8:	91 06       	cpc	r9, r17
    28fa:	b0 f0       	brcs	.+44     	; 0x2928 <xStreamBufferReceive+0xaa>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    28fc:	00 e0       	ldi	r16, 0x00	; 0
    28fe:	10 e0       	ldi	r17, 0x00	; 0
    2900:	20 e0       	ldi	r18, 0x00	; 0
    2902:	30 e0       	ldi	r19, 0x00	; 0
    2904:	a9 01       	movw	r20, r18
    2906:	60 e0       	ldi	r22, 0x00	; 0
    2908:	70 e0       	ldi	r23, 0x00	; 0
    290a:	cb 01       	movw	r24, r22
    290c:	eb d6       	rcall	.+3542   	; 0x36e4 <xTaskNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    290e:	f5 01       	movw	r30, r10
    2910:	11 86       	std	Z+9, r1	; 0x09

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    2912:	10 86       	std	Z+8, r1	; 0x08
    2914:	c5 01       	movw	r24, r10
    2916:	71 dd       	rcall	.-1310   	; 0x23fa <prvBytesInBuffer>
    2918:	8c 01       	movw	r16, r24
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    291a:	03 c0       	rjmp	.+6      	; 0x2922 <xStreamBufferReceive+0xa4>
    291c:	c5 01       	movw	r24, r10
    291e:	6d dd       	rcall	.-1318   	; 0x23fa <prvBytesInBuffer>
    2920:	8c 01       	movw	r16, r24
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
    holds the number of bytes used to store the message length) or a stream of
    bytes (where xBytesToStoreMessageLength is zero), the number of bytes
    available must be greater than xBytesToStoreMessageLength to be able to
    read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    2922:	80 16       	cp	r8, r16
    2924:	91 06       	cpc	r9, r17
    2926:	b8 f5       	brcc	.+110    	; 0x2996 <xStreamBufferReceive+0x118>
                                        size_t xBytesToStoreMessageLength )
{
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

    if( xBytesToStoreMessageLength != ( size_t ) 0 )
    2928:	81 14       	cp	r8, r1
    292a:	91 04       	cpc	r9, r1
    292c:	c1 f0       	breq	.+48     	; 0x295e <xStreamBufferReceive+0xe0>
    {
        /* A discrete message is being received.  First receive the length
        of the message.  A copy of the tail is stored so the buffer can be
        returned to its prior state if the length of the message is too
        large for the provided buffer. */
        xOriginalTail = pxStreamBuffer->xTail;
    292e:	f5 01       	movw	r30, r10
    2930:	e0 80       	ld	r14, Z
    2932:	f1 80       	ldd	r15, Z+1	; 0x01
        ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
    2934:	98 01       	movw	r18, r16
    2936:	a4 01       	movw	r20, r8
    2938:	be 01       	movw	r22, r28
    293a:	6f 5f       	subi	r22, 0xFF	; 255
    293c:	7f 4f       	sbci	r23, 0xFF	; 255
    293e:	c5 01       	movw	r24, r10
    2940:	f8 dd       	rcall	.-1040   	; 0x2532 <prvReadBytesFromBuffer>
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
    2942:	89 81       	ldd	r24, Y+1	; 0x01
    2944:	9a 81       	ldd	r25, Y+2	; 0x02

        /* Reduce the number of bytes available by the number of bytes just
        read out. */
        xBytesAvailable -= xBytesToStoreMessageLength;
    2946:	08 19       	sub	r16, r8
    2948:	19 09       	sbc	r17, r9

        /* Check there is enough space in the buffer provided by the
        user. */
        if( xNextMessageLength > xBufferLengthBytes )
    294a:	68 16       	cp	r6, r24
    294c:	79 06       	cpc	r7, r25
    294e:	30 f4       	brcc	.+12     	; 0x295c <xStreamBufferReceive+0xde>
        {
            /* The user has provided insufficient space to read the message
            so return the buffer to its previous state (so the length of
            the message is in the buffer again). */
            pxStreamBuffer->xTail = xOriginalTail;
    2950:	f5 01       	movw	r30, r10
    2952:	f1 82       	std	Z+1, r15	; 0x01
    2954:	e0 82       	st	Z, r14
            xNextMessageLength = 0;
    2956:	61 2c       	mov	r6, r1
    2958:	71 2c       	mov	r7, r1
        of the message.  A copy of the tail is stored so the buffer can be
        returned to its prior state if the length of the message is too
        large for the provided buffer. */
        xOriginalTail = pxStreamBuffer->xTail;
        ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
    295a:	01 c0       	rjmp	.+2      	; 0x295e <xStreamBufferReceive+0xe0>
        message), so read as many bytes as possible. */
        xNextMessageLength = xBufferLengthBytes;
    }

    /* Read the actual data. */
    xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
    295c:	3c 01       	movw	r6, r24
    295e:	98 01       	movw	r18, r16
    2960:	a3 01       	movw	r20, r6
    2962:	b2 01       	movw	r22, r4
    2964:	c5 01       	movw	r24, r10
    2966:	e5 dd       	rcall	.-1078   	; 0x2532 <prvReadBytesFromBuffer>
    if( xBytesAvailable > xBytesToStoreMessageLength )
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    2968:	7c 01       	movw	r14, r24
    296a:	89 2b       	or	r24, r25
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    296c:	b1 f0       	breq	.+44     	; 0x299a <xStreamBufferReceive+0x11c>
    296e:	25 d2       	rcall	.+1098   	; 0x2dba <vTaskSuspendAll>
    2970:	f5 01       	movw	r30, r10
    2972:	82 85       	ldd	r24, Z+10	; 0x0a
    2974:	93 85       	ldd	r25, Z+11	; 0x0b
    2976:	89 2b       	or	r24, r25
    2978:	61 f0       	breq	.+24     	; 0x2992 <xStreamBufferReceive+0x114>
    297a:	82 85       	ldd	r24, Z+10	; 0x0a
    297c:	93 85       	ldd	r25, Z+11	; 0x0b
    297e:	00 e0       	ldi	r16, 0x00	; 0
    2980:	10 e0       	ldi	r17, 0x00	; 0
    2982:	20 e0       	ldi	r18, 0x00	; 0
    2984:	40 e0       	ldi	r20, 0x00	; 0
    2986:	50 e0       	ldi	r21, 0x00	; 0
    2988:	ba 01       	movw	r22, r20
    298a:	36 d7       	rcall	.+3692   	; 0x37f8 <xTaskGenericNotify>
    298c:	f5 01       	movw	r30, r10
    298e:	13 86       	std	Z+11, r1	; 0x0b
    2990:	12 86       	std	Z+10, r1	; 0x0a
    2992:	fc d2       	rcall	.+1528   	; 0x2f8c <xTaskResumeAll>
    2994:	02 c0       	rjmp	.+4      	; 0x299a <xStreamBufferReceive+0x11c>
                             void *pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    2996:	e1 2c       	mov	r14, r1
    2998:	f1 2c       	mov	r15, r1
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    299a:	c7 01       	movw	r24, r14
    299c:	0f 90       	pop	r0
    299e:	0f 90       	pop	r0
    29a0:	df 91       	pop	r29
    29a2:	cf 91       	pop	r28
    29a4:	1f 91       	pop	r17
    29a6:	0f 91       	pop	r16
    29a8:	ff 90       	pop	r15
    29aa:	ef 90       	pop	r14
    29ac:	df 90       	pop	r13
    29ae:	cf 90       	pop	r12
    29b0:	bf 90       	pop	r11
    29b2:	af 90       	pop	r10
    29b4:	9f 90       	pop	r9
    29b6:	8f 90       	pop	r8
    29b8:	7f 90       	pop	r7
    29ba:	6f 90       	pop	r6
    29bc:	5f 90       	pop	r5
    29be:	4f 90       	pop	r4
    29c0:	08 95       	ret

000029c2 <prvResetNextTaskUnblockTime>:
    29c2:	e0 91 81 18 	lds	r30, 0x1881	; 0x801881 <pxDelayedTaskList>
    29c6:	f0 91 82 18 	lds	r31, 0x1882	; 0x801882 <pxDelayedTaskList+0x1>
    29ca:	80 81       	ld	r24, Z
    29cc:	81 11       	cpse	r24, r1
    29ce:	0c c0       	rjmp	.+24     	; 0x29e8 <prvResetNextTaskUnblockTime+0x26>
    29d0:	8f ef       	ldi	r24, 0xFF	; 255
    29d2:	9f ef       	ldi	r25, 0xFF	; 255
    29d4:	dc 01       	movw	r26, r24
    29d6:	80 93 4e 18 	sts	0x184E, r24	; 0x80184e <xNextTaskUnblockTime>
    29da:	90 93 4f 18 	sts	0x184F, r25	; 0x80184f <xNextTaskUnblockTime+0x1>
    29de:	a0 93 50 18 	sts	0x1850, r26	; 0x801850 <xNextTaskUnblockTime+0x2>
    29e2:	b0 93 51 18 	sts	0x1851, r27	; 0x801851 <xNextTaskUnblockTime+0x3>
    29e6:	08 95       	ret
    29e8:	e0 91 81 18 	lds	r30, 0x1881	; 0x801881 <pxDelayedTaskList>
    29ec:	f0 91 82 18 	lds	r31, 0x1882	; 0x801882 <pxDelayedTaskList+0x1>
    29f0:	07 80       	ldd	r0, Z+7	; 0x07
    29f2:	f0 85       	ldd	r31, Z+8	; 0x08
    29f4:	e0 2d       	mov	r30, r0
    29f6:	00 84       	ldd	r0, Z+8	; 0x08
    29f8:	f1 85       	ldd	r31, Z+9	; 0x09
    29fa:	e0 2d       	mov	r30, r0
    29fc:	82 81       	ldd	r24, Z+2	; 0x02
    29fe:	93 81       	ldd	r25, Z+3	; 0x03
    2a00:	a4 81       	ldd	r26, Z+4	; 0x04
    2a02:	b5 81       	ldd	r27, Z+5	; 0x05
    2a04:	80 93 4e 18 	sts	0x184E, r24	; 0x80184e <xNextTaskUnblockTime>
    2a08:	90 93 4f 18 	sts	0x184F, r25	; 0x80184f <xNextTaskUnblockTime+0x1>
    2a0c:	a0 93 50 18 	sts	0x1850, r26	; 0x801850 <xNextTaskUnblockTime+0x2>
    2a10:	b0 93 51 18 	sts	0x1851, r27	; 0x801851 <xNextTaskUnblockTime+0x3>
    2a14:	08 95       	ret

00002a16 <prvAddCurrentTaskToDelayedList>:
    2a16:	8f 92       	push	r8
    2a18:	9f 92       	push	r9
    2a1a:	af 92       	push	r10
    2a1c:	bf 92       	push	r11
    2a1e:	cf 92       	push	r12
    2a20:	df 92       	push	r13
    2a22:	ef 92       	push	r14
    2a24:	ff 92       	push	r15
    2a26:	cf 93       	push	r28
    2a28:	6b 01       	movw	r12, r22
    2a2a:	7c 01       	movw	r14, r24
    2a2c:	c4 2f       	mov	r28, r20
    2a2e:	80 90 58 18 	lds	r8, 0x1858	; 0x801858 <xTickCount>
    2a32:	90 90 59 18 	lds	r9, 0x1859	; 0x801859 <xTickCount+0x1>
    2a36:	a0 90 5a 18 	lds	r10, 0x185A	; 0x80185a <xTickCount+0x2>
    2a3a:	b0 90 5b 18 	lds	r11, 0x185B	; 0x80185b <xTickCount+0x3>
    2a3e:	80 91 c5 18 	lds	r24, 0x18C5	; 0x8018c5 <pxCurrentTCB>
    2a42:	90 91 c6 18 	lds	r25, 0x18C6	; 0x8018c6 <pxCurrentTCB+0x1>
    2a46:	02 96       	adiw	r24, 0x02	; 2
    2a48:	0e 94 ab 0c 	call	0x1956	; 0x1956 <uxListRemove>
    2a4c:	8f ef       	ldi	r24, 0xFF	; 255
    2a4e:	c8 16       	cp	r12, r24
    2a50:	d8 06       	cpc	r13, r24
    2a52:	e8 06       	cpc	r14, r24
    2a54:	f8 06       	cpc	r15, r24
    2a56:	69 f4       	brne	.+26     	; 0x2a72 <prvAddCurrentTaskToDelayedList+0x5c>
    2a58:	cc 23       	and	r28, r28
    2a5a:	59 f0       	breq	.+22     	; 0x2a72 <prvAddCurrentTaskToDelayedList+0x5c>
    2a5c:	60 91 c5 18 	lds	r22, 0x18C5	; 0x8018c5 <pxCurrentTCB>
    2a60:	70 91 c6 18 	lds	r23, 0x18C6	; 0x8018c6 <pxCurrentTCB+0x1>
    2a64:	6e 5f       	subi	r22, 0xFE	; 254
    2a66:	7f 4f       	sbci	r23, 0xFF	; 255
    2a68:	8d e5       	ldi	r24, 0x5D	; 93
    2a6a:	98 e1       	ldi	r25, 0x18	; 24
    2a6c:	0e 94 4d 0c 	call	0x189a	; 0x189a <vListInsertEnd>
    2a70:	3f c0       	rjmp	.+126    	; 0x2af0 <prvAddCurrentTaskToDelayedList+0xda>
    2a72:	c8 0c       	add	r12, r8
    2a74:	d9 1c       	adc	r13, r9
    2a76:	ea 1c       	adc	r14, r10
    2a78:	fb 1c       	adc	r15, r11
    2a7a:	e0 91 c5 18 	lds	r30, 0x18C5	; 0x8018c5 <pxCurrentTCB>
    2a7e:	f0 91 c6 18 	lds	r31, 0x18C6	; 0x8018c6 <pxCurrentTCB+0x1>
    2a82:	c2 82       	std	Z+2, r12	; 0x02
    2a84:	d3 82       	std	Z+3, r13	; 0x03
    2a86:	e4 82       	std	Z+4, r14	; 0x04
    2a88:	f5 82       	std	Z+5, r15	; 0x05
    2a8a:	c8 14       	cp	r12, r8
    2a8c:	d9 04       	cpc	r13, r9
    2a8e:	ea 04       	cpc	r14, r10
    2a90:	fb 04       	cpc	r15, r11
    2a92:	68 f4       	brcc	.+26     	; 0x2aae <prvAddCurrentTaskToDelayedList+0x98>
    2a94:	60 91 c5 18 	lds	r22, 0x18C5	; 0x8018c5 <pxCurrentTCB>
    2a98:	70 91 c6 18 	lds	r23, 0x18C6	; 0x8018c6 <pxCurrentTCB+0x1>
    2a9c:	80 91 7f 18 	lds	r24, 0x187F	; 0x80187f <pxOverflowDelayedTaskList>
    2aa0:	90 91 80 18 	lds	r25, 0x1880	; 0x801880 <pxOverflowDelayedTaskList+0x1>
    2aa4:	6e 5f       	subi	r22, 0xFE	; 254
    2aa6:	7f 4f       	sbci	r23, 0xFF	; 255
    2aa8:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <vListInsert>
    2aac:	21 c0       	rjmp	.+66     	; 0x2af0 <prvAddCurrentTaskToDelayedList+0xda>
    2aae:	60 91 c5 18 	lds	r22, 0x18C5	; 0x8018c5 <pxCurrentTCB>
    2ab2:	70 91 c6 18 	lds	r23, 0x18C6	; 0x8018c6 <pxCurrentTCB+0x1>
    2ab6:	80 91 81 18 	lds	r24, 0x1881	; 0x801881 <pxDelayedTaskList>
    2aba:	90 91 82 18 	lds	r25, 0x1882	; 0x801882 <pxDelayedTaskList+0x1>
    2abe:	6e 5f       	subi	r22, 0xFE	; 254
    2ac0:	7f 4f       	sbci	r23, 0xFF	; 255
    2ac2:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <vListInsert>
    2ac6:	80 91 4e 18 	lds	r24, 0x184E	; 0x80184e <xNextTaskUnblockTime>
    2aca:	90 91 4f 18 	lds	r25, 0x184F	; 0x80184f <xNextTaskUnblockTime+0x1>
    2ace:	a0 91 50 18 	lds	r26, 0x1850	; 0x801850 <xNextTaskUnblockTime+0x2>
    2ad2:	b0 91 51 18 	lds	r27, 0x1851	; 0x801851 <xNextTaskUnblockTime+0x3>
    2ad6:	c8 16       	cp	r12, r24
    2ad8:	d9 06       	cpc	r13, r25
    2ada:	ea 06       	cpc	r14, r26
    2adc:	fb 06       	cpc	r15, r27
    2ade:	40 f4       	brcc	.+16     	; 0x2af0 <prvAddCurrentTaskToDelayedList+0xda>
    2ae0:	c0 92 4e 18 	sts	0x184E, r12	; 0x80184e <xNextTaskUnblockTime>
    2ae4:	d0 92 4f 18 	sts	0x184F, r13	; 0x80184f <xNextTaskUnblockTime+0x1>
    2ae8:	e0 92 50 18 	sts	0x1850, r14	; 0x801850 <xNextTaskUnblockTime+0x2>
    2aec:	f0 92 51 18 	sts	0x1851, r15	; 0x801851 <xNextTaskUnblockTime+0x3>
    2af0:	cf 91       	pop	r28
    2af2:	ff 90       	pop	r15
    2af4:	ef 90       	pop	r14
    2af6:	df 90       	pop	r13
    2af8:	cf 90       	pop	r12
    2afa:	bf 90       	pop	r11
    2afc:	af 90       	pop	r10
    2afe:	9f 90       	pop	r9
    2b00:	8f 90       	pop	r8
    2b02:	08 95       	ret

00002b04 <xTaskCreate>:
    2b04:	4f 92       	push	r4
    2b06:	5f 92       	push	r5
    2b08:	6f 92       	push	r6
    2b0a:	7f 92       	push	r7
    2b0c:	8f 92       	push	r8
    2b0e:	9f 92       	push	r9
    2b10:	af 92       	push	r10
    2b12:	bf 92       	push	r11
    2b14:	cf 92       	push	r12
    2b16:	df 92       	push	r13
    2b18:	ef 92       	push	r14
    2b1a:	ff 92       	push	r15
    2b1c:	0f 93       	push	r16
    2b1e:	cf 93       	push	r28
    2b20:	df 93       	push	r29
    2b22:	4c 01       	movw	r8, r24
    2b24:	6b 01       	movw	r12, r22
    2b26:	5a 01       	movw	r10, r20
    2b28:	29 01       	movw	r4, r18
    2b2a:	ca 01       	movw	r24, r20
    2b2c:	0e 94 4e 0b 	call	0x169c	; 0x169c <pvPortMalloc>
    2b30:	3c 01       	movw	r6, r24
    2b32:	89 2b       	or	r24, r25
    2b34:	09 f4       	brne	.+2      	; 0x2b38 <xTaskCreate+0x34>
    2b36:	f4 c0       	rjmp	.+488    	; 0x2d20 <xTaskCreate+0x21c>
    2b38:	80 e3       	ldi	r24, 0x30	; 48
    2b3a:	90 e0       	ldi	r25, 0x00	; 0
    2b3c:	0e 94 4e 0b 	call	0x169c	; 0x169c <pvPortMalloc>
    2b40:	ec 01       	movw	r28, r24
    2b42:	89 2b       	or	r24, r25
    2b44:	99 f0       	breq	.+38     	; 0x2b6c <xTaskCreate+0x68>
    2b46:	7c 8e       	std	Y+28, r7	; 0x1c
    2b48:	6b 8e       	std	Y+27, r6	; 0x1b
    2b4a:	a5 01       	movw	r20, r10
    2b4c:	65 ea       	ldi	r22, 0xA5	; 165
    2b4e:	70 e0       	ldi	r23, 0x00	; 0
    2b50:	c3 01       	movw	r24, r6
    2b52:	0e 94 4b 31 	call	0x6296	; 0x6296 <memset>
    2b56:	21 e0       	ldi	r18, 0x01	; 1
    2b58:	a2 1a       	sub	r10, r18
    2b5a:	b1 08       	sbc	r11, r1
    2b5c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b5e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b60:	a8 0e       	add	r10, r24
    2b62:	b9 1e       	adc	r11, r25
    2b64:	c1 14       	cp	r12, r1
    2b66:	d1 04       	cpc	r13, r1
    2b68:	29 f4       	brne	.+10     	; 0x2b74 <xTaskCreate+0x70>
    2b6a:	20 c0       	rjmp	.+64     	; 0x2bac <xTaskCreate+0xa8>
    2b6c:	c3 01       	movw	r24, r6
    2b6e:	0e 94 07 0c 	call	0x180e	; 0x180e <vPortFree>
    2b72:	d6 c0       	rjmp	.+428    	; 0x2d20 <xTaskCreate+0x21c>
    2b74:	d6 01       	movw	r26, r12
    2b76:	8c 91       	ld	r24, X
    2b78:	8d 8f       	std	Y+29, r24	; 0x1d
    2b7a:	8c 91       	ld	r24, X
    2b7c:	88 23       	and	r24, r24
    2b7e:	a1 f0       	breq	.+40     	; 0x2ba8 <xTaskCreate+0xa4>
    2b80:	ae 01       	movw	r20, r28
    2b82:	42 5e       	subi	r20, 0xE2	; 226
    2b84:	5f 4f       	sbci	r21, 0xFF	; 255
    2b86:	f6 01       	movw	r30, r12
    2b88:	31 96       	adiw	r30, 0x01	; 1
    2b8a:	b8 e0       	ldi	r27, 0x08	; 8
    2b8c:	cb 0e       	add	r12, r27
    2b8e:	d1 1c       	adc	r13, r1
    2b90:	cf 01       	movw	r24, r30
    2b92:	21 91       	ld	r18, Z+
    2b94:	da 01       	movw	r26, r20
    2b96:	2d 93       	st	X+, r18
    2b98:	ad 01       	movw	r20, r26
    2b9a:	dc 01       	movw	r26, r24
    2b9c:	8c 91       	ld	r24, X
    2b9e:	88 23       	and	r24, r24
    2ba0:	19 f0       	breq	.+6      	; 0x2ba8 <xTaskCreate+0xa4>
    2ba2:	ec 15       	cp	r30, r12
    2ba4:	fd 05       	cpc	r31, r13
    2ba6:	a1 f7       	brne	.-24     	; 0x2b90 <xTaskCreate+0x8c>
    2ba8:	1c a2       	std	Y+36, r1	; 0x24
    2baa:	01 c0       	rjmp	.+2      	; 0x2bae <xTaskCreate+0xaa>
    2bac:	1d 8e       	std	Y+29, r1	; 0x1d
    2bae:	04 30       	cpi	r16, 0x04	; 4
    2bb0:	08 f0       	brcs	.+2      	; 0x2bb4 <xTaskCreate+0xb0>
    2bb2:	03 e0       	ldi	r16, 0x03	; 3
    2bb4:	0a 8f       	std	Y+26, r16	; 0x1a
    2bb6:	0f a3       	std	Y+39, r16	; 0x27
    2bb8:	18 a6       	std	Y+40, r1	; 0x28
    2bba:	6e 01       	movw	r12, r28
    2bbc:	b2 e0       	ldi	r27, 0x02	; 2
    2bbe:	cb 0e       	add	r12, r27
    2bc0:	d1 1c       	adc	r13, r1
    2bc2:	c6 01       	movw	r24, r12
    2bc4:	0e 94 49 0c 	call	0x1892	; 0x1892 <vListInitialiseItem>
    2bc8:	ce 01       	movw	r24, r28
    2bca:	0e 96       	adiw	r24, 0x0e	; 14
    2bcc:	0e 94 49 0c 	call	0x1892	; 0x1892 <vListInitialiseItem>
    2bd0:	db 87       	std	Y+11, r29	; 0x0b
    2bd2:	ca 87       	std	Y+10, r28	; 0x0a
    2bd4:	84 e0       	ldi	r24, 0x04	; 4
    2bd6:	90 e0       	ldi	r25, 0x00	; 0
    2bd8:	a0 e0       	ldi	r26, 0x00	; 0
    2bda:	b0 e0       	ldi	r27, 0x00	; 0
    2bdc:	80 1b       	sub	r24, r16
    2bde:	91 09       	sbc	r25, r1
    2be0:	a1 09       	sbc	r26, r1
    2be2:	b1 09       	sbc	r27, r1
    2be4:	8e 87       	std	Y+14, r24	; 0x0e
    2be6:	9f 87       	std	Y+15, r25	; 0x0f
    2be8:	a8 8b       	std	Y+16, r26	; 0x10
    2bea:	b9 8b       	std	Y+17, r27	; 0x11
    2bec:	df 8b       	std	Y+23, r29	; 0x17
    2bee:	ce 8b       	std	Y+22, r28	; 0x16
    2bf0:	1a a6       	std	Y+42, r1	; 0x2a
    2bf2:	19 a6       	std	Y+41, r1	; 0x29
    2bf4:	1b a6       	std	Y+43, r1	; 0x2b
    2bf6:	1c a6       	std	Y+44, r1	; 0x2c
    2bf8:	1d a6       	std	Y+45, r1	; 0x2d
    2bfa:	1e a6       	std	Y+46, r1	; 0x2e
    2bfc:	1f a6       	std	Y+47, r1	; 0x2f
    2bfe:	a2 01       	movw	r20, r4
    2c00:	b4 01       	movw	r22, r8
    2c02:	c5 01       	movw	r24, r10
    2c04:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <pxPortInitialiseStack>
    2c08:	99 83       	std	Y+1, r25	; 0x01
    2c0a:	88 83       	st	Y, r24
    2c0c:	e1 14       	cp	r14, r1
    2c0e:	f1 04       	cpc	r15, r1
    2c10:	19 f0       	breq	.+6      	; 0x2c18 <xTaskCreate+0x114>
    2c12:	f7 01       	movw	r30, r14
    2c14:	d1 83       	std	Z+1, r29	; 0x01
    2c16:	c0 83       	st	Z, r28
    2c18:	0f b6       	in	r0, 0x3f	; 63
    2c1a:	f8 94       	cli
    2c1c:	0f 92       	push	r0
    2c1e:	80 91 5c 18 	lds	r24, 0x185C	; 0x80185c <uxCurrentNumberOfTasks>
    2c22:	8f 5f       	subi	r24, 0xFF	; 255
    2c24:	80 93 5c 18 	sts	0x185C, r24	; 0x80185c <uxCurrentNumberOfTasks>
    2c28:	80 91 c5 18 	lds	r24, 0x18C5	; 0x8018c5 <pxCurrentTCB>
    2c2c:	90 91 c6 18 	lds	r25, 0x18C6	; 0x8018c6 <pxCurrentTCB+0x1>
    2c30:	89 2b       	or	r24, r25
    2c32:	d1 f5       	brne	.+116    	; 0x2ca8 <xTaskCreate+0x1a4>
    2c34:	d0 93 c6 18 	sts	0x18C6, r29	; 0x8018c6 <pxCurrentTCB+0x1>
    2c38:	c0 93 c5 18 	sts	0x18C5, r28	; 0x8018c5 <pxCurrentTCB>
    2c3c:	80 91 5c 18 	lds	r24, 0x185C	; 0x80185c <uxCurrentNumberOfTasks>
    2c40:	81 30       	cpi	r24, 0x01	; 1
    2c42:	09 f0       	breq	.+2      	; 0x2c46 <xTaskCreate+0x142>
    2c44:	41 c0       	rjmp	.+130    	; 0x2cc8 <xTaskCreate+0x1c4>
    2c46:	89 e9       	ldi	r24, 0x99	; 153
    2c48:	98 e1       	ldi	r25, 0x18	; 24
    2c4a:	0e 94 38 0c 	call	0x1870	; 0x1870 <vListInitialise>
    2c4e:	84 ea       	ldi	r24, 0xA4	; 164
    2c50:	98 e1       	ldi	r25, 0x18	; 24
    2c52:	0e 94 38 0c 	call	0x1870	; 0x1870 <vListInitialise>
    2c56:	8f ea       	ldi	r24, 0xAF	; 175
    2c58:	98 e1       	ldi	r25, 0x18	; 24
    2c5a:	0e 94 38 0c 	call	0x1870	; 0x1870 <vListInitialise>
    2c5e:	8a eb       	ldi	r24, 0xBA	; 186
    2c60:	98 e1       	ldi	r25, 0x18	; 24
    2c62:	0e 94 38 0c 	call	0x1870	; 0x1870 <vListInitialise>
    2c66:	8e e8       	ldi	r24, 0x8E	; 142
    2c68:	98 e1       	ldi	r25, 0x18	; 24
    2c6a:	0e 94 38 0c 	call	0x1870	; 0x1870 <vListInitialise>
    2c6e:	83 e8       	ldi	r24, 0x83	; 131
    2c70:	98 e1       	ldi	r25, 0x18	; 24
    2c72:	0e 94 38 0c 	call	0x1870	; 0x1870 <vListInitialise>
    2c76:	84 e7       	ldi	r24, 0x74	; 116
    2c78:	98 e1       	ldi	r25, 0x18	; 24
    2c7a:	0e 94 38 0c 	call	0x1870	; 0x1870 <vListInitialise>
    2c7e:	89 e6       	ldi	r24, 0x69	; 105
    2c80:	98 e1       	ldi	r25, 0x18	; 24
    2c82:	0e 94 38 0c 	call	0x1870	; 0x1870 <vListInitialise>
    2c86:	8d e5       	ldi	r24, 0x5D	; 93
    2c88:	98 e1       	ldi	r25, 0x18	; 24
    2c8a:	0e 94 38 0c 	call	0x1870	; 0x1870 <vListInitialise>
    2c8e:	8e e8       	ldi	r24, 0x8E	; 142
    2c90:	98 e1       	ldi	r25, 0x18	; 24
    2c92:	90 93 82 18 	sts	0x1882, r25	; 0x801882 <pxDelayedTaskList+0x1>
    2c96:	80 93 81 18 	sts	0x1881, r24	; 0x801881 <pxDelayedTaskList>
    2c9a:	83 e8       	ldi	r24, 0x83	; 131
    2c9c:	98 e1       	ldi	r25, 0x18	; 24
    2c9e:	90 93 80 18 	sts	0x1880, r25	; 0x801880 <pxOverflowDelayedTaskList+0x1>
    2ca2:	80 93 7f 18 	sts	0x187F, r24	; 0x80187f <pxOverflowDelayedTaskList>
    2ca6:	10 c0       	rjmp	.+32     	; 0x2cc8 <xTaskCreate+0x1c4>
    2ca8:	80 91 56 18 	lds	r24, 0x1856	; 0x801856 <xSchedulerRunning>
    2cac:	81 11       	cpse	r24, r1
    2cae:	0c c0       	rjmp	.+24     	; 0x2cc8 <xTaskCreate+0x1c4>
    2cb0:	e0 91 c5 18 	lds	r30, 0x18C5	; 0x8018c5 <pxCurrentTCB>
    2cb4:	f0 91 c6 18 	lds	r31, 0x18C6	; 0x8018c6 <pxCurrentTCB+0x1>
    2cb8:	92 8d       	ldd	r25, Z+26	; 0x1a
    2cba:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2cbc:	89 17       	cp	r24, r25
    2cbe:	20 f0       	brcs	.+8      	; 0x2cc8 <xTaskCreate+0x1c4>
    2cc0:	d0 93 c6 18 	sts	0x18C6, r29	; 0x8018c6 <pxCurrentTCB+0x1>
    2cc4:	c0 93 c5 18 	sts	0x18C5, r28	; 0x8018c5 <pxCurrentTCB>
    2cc8:	80 91 52 18 	lds	r24, 0x1852	; 0x801852 <uxTaskNumber>
    2ccc:	8f 5f       	subi	r24, 0xFF	; 255
    2cce:	80 93 52 18 	sts	0x1852, r24	; 0x801852 <uxTaskNumber>
    2cd2:	8d a3       	std	Y+37, r24	; 0x25
    2cd4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2cd6:	90 91 57 18 	lds	r25, 0x1857	; 0x801857 <uxTopReadyPriority>
    2cda:	98 17       	cp	r25, r24
    2cdc:	10 f4       	brcc	.+4      	; 0x2ce2 <xTaskCreate+0x1de>
    2cde:	80 93 57 18 	sts	0x1857, r24	; 0x801857 <uxTopReadyPriority>
    2ce2:	fb e0       	ldi	r31, 0x0B	; 11
    2ce4:	8f 9f       	mul	r24, r31
    2ce6:	c0 01       	movw	r24, r0
    2ce8:	11 24       	eor	r1, r1
    2cea:	b6 01       	movw	r22, r12
    2cec:	87 56       	subi	r24, 0x67	; 103
    2cee:	97 4e       	sbci	r25, 0xE7	; 231
    2cf0:	0e 94 4d 0c 	call	0x189a	; 0x189a <vListInsertEnd>
    2cf4:	0f 90       	pop	r0
    2cf6:	0f be       	out	0x3f, r0	; 63
    2cf8:	80 91 56 18 	lds	r24, 0x1856	; 0x801856 <xSchedulerRunning>
    2cfc:	88 23       	and	r24, r24
    2cfe:	61 f0       	breq	.+24     	; 0x2d18 <xTaskCreate+0x214>
    2d00:	e0 91 c5 18 	lds	r30, 0x18C5	; 0x8018c5 <pxCurrentTCB>
    2d04:	f0 91 c6 18 	lds	r31, 0x18C6	; 0x8018c6 <pxCurrentTCB+0x1>
    2d08:	92 8d       	ldd	r25, Z+26	; 0x1a
    2d0a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2d0c:	98 17       	cp	r25, r24
    2d0e:	30 f4       	brcc	.+12     	; 0x2d1c <xTaskCreate+0x218>
    2d10:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <vPortYield>
    2d14:	81 e0       	ldi	r24, 0x01	; 1
    2d16:	05 c0       	rjmp	.+10     	; 0x2d22 <xTaskCreate+0x21e>
    2d18:	81 e0       	ldi	r24, 0x01	; 1
    2d1a:	03 c0       	rjmp	.+6      	; 0x2d22 <xTaskCreate+0x21e>
    2d1c:	81 e0       	ldi	r24, 0x01	; 1
    2d1e:	01 c0       	rjmp	.+2      	; 0x2d22 <xTaskCreate+0x21e>
    2d20:	8f ef       	ldi	r24, 0xFF	; 255
    2d22:	df 91       	pop	r29
    2d24:	cf 91       	pop	r28
    2d26:	0f 91       	pop	r16
    2d28:	ff 90       	pop	r15
    2d2a:	ef 90       	pop	r14
    2d2c:	df 90       	pop	r13
    2d2e:	cf 90       	pop	r12
    2d30:	bf 90       	pop	r11
    2d32:	af 90       	pop	r10
    2d34:	9f 90       	pop	r9
    2d36:	8f 90       	pop	r8
    2d38:	7f 90       	pop	r7
    2d3a:	6f 90       	pop	r6
    2d3c:	5f 90       	pop	r5
    2d3e:	4f 90       	pop	r4
    2d40:	08 95       	ret

00002d42 <vTaskStartScheduler>:
    2d42:	ef 92       	push	r14
    2d44:	ff 92       	push	r15
    2d46:	0f 93       	push	r16
    2d48:	0f 2e       	mov	r0, r31
    2d4a:	fc e4       	ldi	r31, 0x4C	; 76
    2d4c:	ef 2e       	mov	r14, r31
    2d4e:	f8 e1       	ldi	r31, 0x18	; 24
    2d50:	ff 2e       	mov	r15, r31
    2d52:	f0 2d       	mov	r31, r0
    2d54:	00 e0       	ldi	r16, 0x00	; 0
    2d56:	20 e0       	ldi	r18, 0x00	; 0
    2d58:	30 e0       	ldi	r19, 0x00	; 0
    2d5a:	40 ec       	ldi	r20, 0xC0	; 192
    2d5c:	50 e0       	ldi	r21, 0x00	; 0
    2d5e:	6c ec       	ldi	r22, 0xCC	; 204
    2d60:	74 e0       	ldi	r23, 0x04	; 4
    2d62:	8d ec       	ldi	r24, 0xCD	; 205
    2d64:	90 e0       	ldi	r25, 0x00	; 0
    2d66:	ce de       	rcall	.-612    	; 0x2b04 <xTaskCreate>
    2d68:	81 30       	cpi	r24, 0x01	; 1
    2d6a:	19 f5       	brne	.+70     	; 0x2db2 <vTaskStartScheduler+0x70>
    2d6c:	cc d6       	rcall	.+3480   	; 0x3b06 <xTimerCreateTimerTask>
    2d6e:	81 30       	cpi	r24, 0x01	; 1
    2d70:	01 f5       	brne	.+64     	; 0x2db2 <vTaskStartScheduler+0x70>
    2d72:	f8 94       	cli
    2d74:	8f ef       	ldi	r24, 0xFF	; 255
    2d76:	9f ef       	ldi	r25, 0xFF	; 255
    2d78:	dc 01       	movw	r26, r24
    2d7a:	80 93 4e 18 	sts	0x184E, r24	; 0x80184e <xNextTaskUnblockTime>
    2d7e:	90 93 4f 18 	sts	0x184F, r25	; 0x80184f <xNextTaskUnblockTime+0x1>
    2d82:	a0 93 50 18 	sts	0x1850, r26	; 0x801850 <xNextTaskUnblockTime+0x2>
    2d86:	b0 93 51 18 	sts	0x1851, r27	; 0x801851 <xNextTaskUnblockTime+0x3>
    2d8a:	81 e0       	ldi	r24, 0x01	; 1
    2d8c:	80 93 56 18 	sts	0x1856, r24	; 0x801856 <xSchedulerRunning>
    2d90:	10 92 58 18 	sts	0x1858, r1	; 0x801858 <xTickCount>
    2d94:	10 92 59 18 	sts	0x1859, r1	; 0x801859 <xTickCount+0x1>
    2d98:	10 92 5a 18 	sts	0x185A, r1	; 0x80185a <xTickCount+0x2>
    2d9c:	10 92 5b 18 	sts	0x185B, r1	; 0x80185b <xTickCount+0x3>
    2da0:	e0 91 c5 18 	lds	r30, 0x18C5	; 0x8018c5 <pxCurrentTCB>
    2da4:	f0 91 c6 18 	lds	r31, 0x18C6	; 0x8018c6 <pxCurrentTCB+0x1>
    2da8:	81 a5       	ldd	r24, Z+41	; 0x29
    2daa:	0e 94 85 09 	call	0x130a	; 0x130a <task_switch_in>
    2dae:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <xPortStartScheduler>
    2db2:	0f 91       	pop	r16
    2db4:	ff 90       	pop	r15
    2db6:	ef 90       	pop	r14
    2db8:	08 95       	ret

00002dba <vTaskSuspendAll>:
    2dba:	80 91 4b 18 	lds	r24, 0x184B	; 0x80184b <uxSchedulerSuspended>
    2dbe:	8f 5f       	subi	r24, 0xFF	; 255
    2dc0:	80 93 4b 18 	sts	0x184B, r24	; 0x80184b <uxSchedulerSuspended>
    2dc4:	08 95       	ret

00002dc6 <xTaskGetTickCount>:
    2dc6:	0f b6       	in	r0, 0x3f	; 63
    2dc8:	f8 94       	cli
    2dca:	0f 92       	push	r0
    2dcc:	60 91 58 18 	lds	r22, 0x1858	; 0x801858 <xTickCount>
    2dd0:	70 91 59 18 	lds	r23, 0x1859	; 0x801859 <xTickCount+0x1>
    2dd4:	80 91 5a 18 	lds	r24, 0x185A	; 0x80185a <xTickCount+0x2>
    2dd8:	90 91 5b 18 	lds	r25, 0x185B	; 0x80185b <xTickCount+0x3>
    2ddc:	0f 90       	pop	r0
    2dde:	0f be       	out	0x3f, r0	; 63
    2de0:	08 95       	ret

00002de2 <xTaskIncrementTick>:
    2de2:	9f 92       	push	r9
    2de4:	af 92       	push	r10
    2de6:	bf 92       	push	r11
    2de8:	cf 92       	push	r12
    2dea:	df 92       	push	r13
    2dec:	ef 92       	push	r14
    2dee:	ff 92       	push	r15
    2df0:	0f 93       	push	r16
    2df2:	1f 93       	push	r17
    2df4:	cf 93       	push	r28
    2df6:	df 93       	push	r29
    2df8:	80 91 4b 18 	lds	r24, 0x184B	; 0x80184b <uxSchedulerSuspended>
    2dfc:	81 11       	cpse	r24, r1
    2dfe:	ad c0       	rjmp	.+346    	; 0x2f5a <xTaskIncrementTick+0x178>
    2e00:	c0 90 58 18 	lds	r12, 0x1858	; 0x801858 <xTickCount>
    2e04:	d0 90 59 18 	lds	r13, 0x1859	; 0x801859 <xTickCount+0x1>
    2e08:	e0 90 5a 18 	lds	r14, 0x185A	; 0x80185a <xTickCount+0x2>
    2e0c:	f0 90 5b 18 	lds	r15, 0x185B	; 0x80185b <xTickCount+0x3>
    2e10:	8f ef       	ldi	r24, 0xFF	; 255
    2e12:	c8 1a       	sub	r12, r24
    2e14:	d8 0a       	sbc	r13, r24
    2e16:	e8 0a       	sbc	r14, r24
    2e18:	f8 0a       	sbc	r15, r24
    2e1a:	c0 92 58 18 	sts	0x1858, r12	; 0x801858 <xTickCount>
    2e1e:	d0 92 59 18 	sts	0x1859, r13	; 0x801859 <xTickCount+0x1>
    2e22:	e0 92 5a 18 	sts	0x185A, r14	; 0x80185a <xTickCount+0x2>
    2e26:	f0 92 5b 18 	sts	0x185B, r15	; 0x80185b <xTickCount+0x3>
    2e2a:	c1 14       	cp	r12, r1
    2e2c:	d1 04       	cpc	r13, r1
    2e2e:	e1 04       	cpc	r14, r1
    2e30:	f1 04       	cpc	r15, r1
    2e32:	b1 f4       	brne	.+44     	; 0x2e60 <xTaskIncrementTick+0x7e>
    2e34:	80 91 81 18 	lds	r24, 0x1881	; 0x801881 <pxDelayedTaskList>
    2e38:	90 91 82 18 	lds	r25, 0x1882	; 0x801882 <pxDelayedTaskList+0x1>
    2e3c:	20 91 7f 18 	lds	r18, 0x187F	; 0x80187f <pxOverflowDelayedTaskList>
    2e40:	30 91 80 18 	lds	r19, 0x1880	; 0x801880 <pxOverflowDelayedTaskList+0x1>
    2e44:	30 93 82 18 	sts	0x1882, r19	; 0x801882 <pxDelayedTaskList+0x1>
    2e48:	20 93 81 18 	sts	0x1881, r18	; 0x801881 <pxDelayedTaskList>
    2e4c:	90 93 80 18 	sts	0x1880, r25	; 0x801880 <pxOverflowDelayedTaskList+0x1>
    2e50:	80 93 7f 18 	sts	0x187F, r24	; 0x80187f <pxOverflowDelayedTaskList>
    2e54:	80 91 53 18 	lds	r24, 0x1853	; 0x801853 <xNumOfOverflows>
    2e58:	8f 5f       	subi	r24, 0xFF	; 255
    2e5a:	80 93 53 18 	sts	0x1853, r24	; 0x801853 <xNumOfOverflows>
    2e5e:	b1 dd       	rcall	.-1182   	; 0x29c2 <prvResetNextTaskUnblockTime>
    2e60:	80 91 4e 18 	lds	r24, 0x184E	; 0x80184e <xNextTaskUnblockTime>
    2e64:	90 91 4f 18 	lds	r25, 0x184F	; 0x80184f <xNextTaskUnblockTime+0x1>
    2e68:	a0 91 50 18 	lds	r26, 0x1850	; 0x801850 <xNextTaskUnblockTime+0x2>
    2e6c:	b0 91 51 18 	lds	r27, 0x1851	; 0x801851 <xNextTaskUnblockTime+0x3>
    2e70:	c8 16       	cp	r12, r24
    2e72:	d9 06       	cpc	r13, r25
    2e74:	ea 06       	cpc	r14, r26
    2e76:	fb 06       	cpc	r15, r27
    2e78:	10 f4       	brcc	.+4      	; 0x2e7e <xTaskIncrementTick+0x9c>
    2e7a:	b1 2c       	mov	r11, r1
    2e7c:	5d c0       	rjmp	.+186    	; 0x2f38 <xTaskIncrementTick+0x156>
    2e7e:	b1 2c       	mov	r11, r1
    2e80:	0f 2e       	mov	r0, r31
    2e82:	fb e0       	ldi	r31, 0x0B	; 11
    2e84:	af 2e       	mov	r10, r31
    2e86:	f0 2d       	mov	r31, r0
    2e88:	99 24       	eor	r9, r9
    2e8a:	93 94       	inc	r9
    2e8c:	e0 91 81 18 	lds	r30, 0x1881	; 0x801881 <pxDelayedTaskList>
    2e90:	f0 91 82 18 	lds	r31, 0x1882	; 0x801882 <pxDelayedTaskList+0x1>
    2e94:	80 81       	ld	r24, Z
    2e96:	81 11       	cpse	r24, r1
    2e98:	0c c0       	rjmp	.+24     	; 0x2eb2 <xTaskIncrementTick+0xd0>
    2e9a:	8f ef       	ldi	r24, 0xFF	; 255
    2e9c:	9f ef       	ldi	r25, 0xFF	; 255
    2e9e:	dc 01       	movw	r26, r24
    2ea0:	80 93 4e 18 	sts	0x184E, r24	; 0x80184e <xNextTaskUnblockTime>
    2ea4:	90 93 4f 18 	sts	0x184F, r25	; 0x80184f <xNextTaskUnblockTime+0x1>
    2ea8:	a0 93 50 18 	sts	0x1850, r26	; 0x801850 <xNextTaskUnblockTime+0x2>
    2eac:	b0 93 51 18 	sts	0x1851, r27	; 0x801851 <xNextTaskUnblockTime+0x3>
    2eb0:	43 c0       	rjmp	.+134    	; 0x2f38 <xTaskIncrementTick+0x156>
    2eb2:	e0 91 81 18 	lds	r30, 0x1881	; 0x801881 <pxDelayedTaskList>
    2eb6:	f0 91 82 18 	lds	r31, 0x1882	; 0x801882 <pxDelayedTaskList+0x1>
    2eba:	07 80       	ldd	r0, Z+7	; 0x07
    2ebc:	f0 85       	ldd	r31, Z+8	; 0x08
    2ebe:	e0 2d       	mov	r30, r0
    2ec0:	c0 85       	ldd	r28, Z+8	; 0x08
    2ec2:	d1 85       	ldd	r29, Z+9	; 0x09
    2ec4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ec6:	9b 81       	ldd	r25, Y+3	; 0x03
    2ec8:	ac 81       	ldd	r26, Y+4	; 0x04
    2eca:	bd 81       	ldd	r27, Y+5	; 0x05
    2ecc:	c8 16       	cp	r12, r24
    2ece:	d9 06       	cpc	r13, r25
    2ed0:	ea 06       	cpc	r14, r26
    2ed2:	fb 06       	cpc	r15, r27
    2ed4:	48 f4       	brcc	.+18     	; 0x2ee8 <xTaskIncrementTick+0x106>
    2ed6:	80 93 4e 18 	sts	0x184E, r24	; 0x80184e <xNextTaskUnblockTime>
    2eda:	90 93 4f 18 	sts	0x184F, r25	; 0x80184f <xNextTaskUnblockTime+0x1>
    2ede:	a0 93 50 18 	sts	0x1850, r26	; 0x801850 <xNextTaskUnblockTime+0x2>
    2ee2:	b0 93 51 18 	sts	0x1851, r27	; 0x801851 <xNextTaskUnblockTime+0x3>
    2ee6:	28 c0       	rjmp	.+80     	; 0x2f38 <xTaskIncrementTick+0x156>
    2ee8:	8e 01       	movw	r16, r28
    2eea:	0e 5f       	subi	r16, 0xFE	; 254
    2eec:	1f 4f       	sbci	r17, 0xFF	; 255
    2eee:	c8 01       	movw	r24, r16
    2ef0:	0e 94 ab 0c 	call	0x1956	; 0x1956 <uxListRemove>
    2ef4:	88 8d       	ldd	r24, Y+24	; 0x18
    2ef6:	99 8d       	ldd	r25, Y+25	; 0x19
    2ef8:	89 2b       	or	r24, r25
    2efa:	21 f0       	breq	.+8      	; 0x2f04 <xTaskIncrementTick+0x122>
    2efc:	ce 01       	movw	r24, r28
    2efe:	0e 96       	adiw	r24, 0x0e	; 14
    2f00:	0e 94 ab 0c 	call	0x1956	; 0x1956 <uxListRemove>
    2f04:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2f06:	90 91 57 18 	lds	r25, 0x1857	; 0x801857 <uxTopReadyPriority>
    2f0a:	98 17       	cp	r25, r24
    2f0c:	10 f4       	brcc	.+4      	; 0x2f12 <xTaskIncrementTick+0x130>
    2f0e:	80 93 57 18 	sts	0x1857, r24	; 0x801857 <uxTopReadyPriority>
    2f12:	a8 9e       	mul	r10, r24
    2f14:	c0 01       	movw	r24, r0
    2f16:	11 24       	eor	r1, r1
    2f18:	b8 01       	movw	r22, r16
    2f1a:	87 56       	subi	r24, 0x67	; 103
    2f1c:	97 4e       	sbci	r25, 0xE7	; 231
    2f1e:	0e 94 4d 0c 	call	0x189a	; 0x189a <vListInsertEnd>
    2f22:	e0 91 c5 18 	lds	r30, 0x18C5	; 0x8018c5 <pxCurrentTCB>
    2f26:	f0 91 c6 18 	lds	r31, 0x18C6	; 0x8018c6 <pxCurrentTCB+0x1>
    2f2a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2f2c:	82 8d       	ldd	r24, Z+26	; 0x1a
    2f2e:	98 17       	cp	r25, r24
    2f30:	08 f4       	brcc	.+2      	; 0x2f34 <xTaskIncrementTick+0x152>
    2f32:	ac cf       	rjmp	.-168    	; 0x2e8c <xTaskIncrementTick+0xaa>
    2f34:	b9 2c       	mov	r11, r9
    2f36:	aa cf       	rjmp	.-172    	; 0x2e8c <xTaskIncrementTick+0xaa>
    2f38:	e0 91 c5 18 	lds	r30, 0x18C5	; 0x8018c5 <pxCurrentTCB>
    2f3c:	f0 91 c6 18 	lds	r31, 0x18C6	; 0x8018c6 <pxCurrentTCB+0x1>
    2f40:	e2 8d       	ldd	r30, Z+26	; 0x1a
    2f42:	8b e0       	ldi	r24, 0x0B	; 11
    2f44:	e8 9f       	mul	r30, r24
    2f46:	f0 01       	movw	r30, r0
    2f48:	11 24       	eor	r1, r1
    2f4a:	e7 56       	subi	r30, 0x67	; 103
    2f4c:	f7 4e       	sbci	r31, 0xE7	; 231
    2f4e:	80 81       	ld	r24, Z
    2f50:	82 30       	cpi	r24, 0x02	; 2
    2f52:	48 f0       	brcs	.+18     	; 0x2f66 <xTaskIncrementTick+0x184>
    2f54:	bb 24       	eor	r11, r11
    2f56:	b3 94       	inc	r11
    2f58:	06 c0       	rjmp	.+12     	; 0x2f66 <xTaskIncrementTick+0x184>
    2f5a:	80 91 55 18 	lds	r24, 0x1855	; 0x801855 <uxPendedTicks>
    2f5e:	8f 5f       	subi	r24, 0xFF	; 255
    2f60:	80 93 55 18 	sts	0x1855, r24	; 0x801855 <uxPendedTicks>
    2f64:	b1 2c       	mov	r11, r1
    2f66:	80 91 54 18 	lds	r24, 0x1854	; 0x801854 <xYieldPending>
    2f6a:	88 23       	and	r24, r24
    2f6c:	11 f0       	breq	.+4      	; 0x2f72 <xTaskIncrementTick+0x190>
    2f6e:	bb 24       	eor	r11, r11
    2f70:	b3 94       	inc	r11
    2f72:	8b 2d       	mov	r24, r11
    2f74:	df 91       	pop	r29
    2f76:	cf 91       	pop	r28
    2f78:	1f 91       	pop	r17
    2f7a:	0f 91       	pop	r16
    2f7c:	ff 90       	pop	r15
    2f7e:	ef 90       	pop	r14
    2f80:	df 90       	pop	r13
    2f82:	cf 90       	pop	r12
    2f84:	bf 90       	pop	r11
    2f86:	af 90       	pop	r10
    2f88:	9f 90       	pop	r9
    2f8a:	08 95       	ret

00002f8c <xTaskResumeAll>:
    2f8c:	cf 92       	push	r12
    2f8e:	df 92       	push	r13
    2f90:	ef 92       	push	r14
    2f92:	ff 92       	push	r15
    2f94:	0f 93       	push	r16
    2f96:	1f 93       	push	r17
    2f98:	cf 93       	push	r28
    2f9a:	df 93       	push	r29
    2f9c:	0f b6       	in	r0, 0x3f	; 63
    2f9e:	f8 94       	cli
    2fa0:	0f 92       	push	r0
    2fa2:	80 91 4b 18 	lds	r24, 0x184B	; 0x80184b <uxSchedulerSuspended>
    2fa6:	81 50       	subi	r24, 0x01	; 1
    2fa8:	80 93 4b 18 	sts	0x184B, r24	; 0x80184b <uxSchedulerSuspended>
    2fac:	80 91 4b 18 	lds	r24, 0x184B	; 0x80184b <uxSchedulerSuspended>
    2fb0:	81 11       	cpse	r24, r1
    2fb2:	5a c0       	rjmp	.+180    	; 0x3068 <xTaskResumeAll+0xdc>
    2fb4:	80 91 5c 18 	lds	r24, 0x185C	; 0x80185c <uxCurrentNumberOfTasks>
    2fb8:	81 11       	cpse	r24, r1
    2fba:	2c c0       	rjmp	.+88     	; 0x3014 <xTaskResumeAll+0x88>
    2fbc:	58 c0       	rjmp	.+176    	; 0x306e <xTaskResumeAll+0xe2>
    2fbe:	d7 01       	movw	r26, r14
    2fc0:	17 96       	adiw	r26, 0x07	; 7
    2fc2:	ed 91       	ld	r30, X+
    2fc4:	fc 91       	ld	r31, X
    2fc6:	18 97       	sbiw	r26, 0x08	; 8
    2fc8:	c0 85       	ldd	r28, Z+8	; 0x08
    2fca:	d1 85       	ldd	r29, Z+9	; 0x09
    2fcc:	ce 01       	movw	r24, r28
    2fce:	0e 96       	adiw	r24, 0x0e	; 14
    2fd0:	0e 94 ab 0c 	call	0x1956	; 0x1956 <uxListRemove>
    2fd4:	8e 01       	movw	r16, r28
    2fd6:	0e 5f       	subi	r16, 0xFE	; 254
    2fd8:	1f 4f       	sbci	r17, 0xFF	; 255
    2fda:	c8 01       	movw	r24, r16
    2fdc:	0e 94 ab 0c 	call	0x1956	; 0x1956 <uxListRemove>
    2fe0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2fe2:	90 91 57 18 	lds	r25, 0x1857	; 0x801857 <uxTopReadyPriority>
    2fe6:	98 17       	cp	r25, r24
    2fe8:	10 f4       	brcc	.+4      	; 0x2fee <xTaskResumeAll+0x62>
    2fea:	80 93 57 18 	sts	0x1857, r24	; 0x801857 <uxTopReadyPriority>
    2fee:	d8 9e       	mul	r13, r24
    2ff0:	c0 01       	movw	r24, r0
    2ff2:	11 24       	eor	r1, r1
    2ff4:	b8 01       	movw	r22, r16
    2ff6:	87 56       	subi	r24, 0x67	; 103
    2ff8:	97 4e       	sbci	r25, 0xE7	; 231
    2ffa:	0e 94 4d 0c 	call	0x189a	; 0x189a <vListInsertEnd>
    2ffe:	e0 91 c5 18 	lds	r30, 0x18C5	; 0x8018c5 <pxCurrentTCB>
    3002:	f0 91 c6 18 	lds	r31, 0x18C6	; 0x8018c6 <pxCurrentTCB+0x1>
    3006:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3008:	82 8d       	ldd	r24, Z+26	; 0x1a
    300a:	98 17       	cp	r25, r24
    300c:	88 f0       	brcs	.+34     	; 0x3030 <xTaskResumeAll+0xa4>
    300e:	c0 92 54 18 	sts	0x1854, r12	; 0x801854 <xYieldPending>
    3012:	0e c0       	rjmp	.+28     	; 0x3030 <xTaskResumeAll+0xa4>
    3014:	c0 e0       	ldi	r28, 0x00	; 0
    3016:	d0 e0       	ldi	r29, 0x00	; 0
    3018:	0f 2e       	mov	r0, r31
    301a:	f4 e7       	ldi	r31, 0x74	; 116
    301c:	ef 2e       	mov	r14, r31
    301e:	f8 e1       	ldi	r31, 0x18	; 24
    3020:	ff 2e       	mov	r15, r31
    3022:	f0 2d       	mov	r31, r0
    3024:	0f 2e       	mov	r0, r31
    3026:	fb e0       	ldi	r31, 0x0B	; 11
    3028:	df 2e       	mov	r13, r31
    302a:	f0 2d       	mov	r31, r0
    302c:	cc 24       	eor	r12, r12
    302e:	c3 94       	inc	r12
    3030:	f7 01       	movw	r30, r14
    3032:	80 81       	ld	r24, Z
    3034:	81 11       	cpse	r24, r1
    3036:	c3 cf       	rjmp	.-122    	; 0x2fbe <xTaskResumeAll+0x32>
    3038:	cd 2b       	or	r28, r29
    303a:	09 f0       	breq	.+2      	; 0x303e <xTaskResumeAll+0xb2>
    303c:	c2 dc       	rcall	.-1660   	; 0x29c2 <prvResetNextTaskUnblockTime>
    303e:	c0 91 55 18 	lds	r28, 0x1855	; 0x801855 <uxPendedTicks>
    3042:	cc 23       	and	r28, r28
    3044:	49 f0       	breq	.+18     	; 0x3058 <xTaskResumeAll+0xcc>
    3046:	d1 e0       	ldi	r29, 0x01	; 1
    3048:	cc de       	rcall	.-616    	; 0x2de2 <xTaskIncrementTick>
    304a:	81 11       	cpse	r24, r1
    304c:	d0 93 54 18 	sts	0x1854, r29	; 0x801854 <xYieldPending>
    3050:	c1 50       	subi	r28, 0x01	; 1
    3052:	d1 f7       	brne	.-12     	; 0x3048 <xTaskResumeAll+0xbc>
    3054:	10 92 55 18 	sts	0x1855, r1	; 0x801855 <uxPendedTicks>
    3058:	80 91 54 18 	lds	r24, 0x1854	; 0x801854 <xYieldPending>
    305c:	88 23       	and	r24, r24
    305e:	31 f0       	breq	.+12     	; 0x306c <xTaskResumeAll+0xe0>
    3060:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <vPortYield>
    3064:	81 e0       	ldi	r24, 0x01	; 1
    3066:	03 c0       	rjmp	.+6      	; 0x306e <xTaskResumeAll+0xe2>
    3068:	80 e0       	ldi	r24, 0x00	; 0
    306a:	01 c0       	rjmp	.+2      	; 0x306e <xTaskResumeAll+0xe2>
    306c:	80 e0       	ldi	r24, 0x00	; 0
    306e:	0f 90       	pop	r0
    3070:	0f be       	out	0x3f, r0	; 63
    3072:	df 91       	pop	r29
    3074:	cf 91       	pop	r28
    3076:	1f 91       	pop	r17
    3078:	0f 91       	pop	r16
    307a:	ff 90       	pop	r15
    307c:	ef 90       	pop	r14
    307e:	df 90       	pop	r13
    3080:	cf 90       	pop	r12
    3082:	08 95       	ret

00003084 <vTaskDelay>:
    3084:	cf 92       	push	r12
    3086:	df 92       	push	r13
    3088:	ef 92       	push	r14
    308a:	ff 92       	push	r15
    308c:	6b 01       	movw	r12, r22
    308e:	7c 01       	movw	r14, r24
    3090:	67 2b       	or	r22, r23
    3092:	68 2b       	or	r22, r24
    3094:	69 2b       	or	r22, r25
    3096:	41 f0       	breq	.+16     	; 0x30a8 <vTaskDelay+0x24>
    3098:	90 de       	rcall	.-736    	; 0x2dba <vTaskSuspendAll>
    309a:	40 e0       	ldi	r20, 0x00	; 0
    309c:	c7 01       	movw	r24, r14
    309e:	b6 01       	movw	r22, r12
    30a0:	ba dc       	rcall	.-1676   	; 0x2a16 <prvAddCurrentTaskToDelayedList>
    30a2:	74 df       	rcall	.-280    	; 0x2f8c <xTaskResumeAll>
    30a4:	81 11       	cpse	r24, r1
    30a6:	02 c0       	rjmp	.+4      	; 0x30ac <vTaskDelay+0x28>
    30a8:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <vPortYield>
    30ac:	ff 90       	pop	r15
    30ae:	ef 90       	pop	r14
    30b0:	df 90       	pop	r13
    30b2:	cf 90       	pop	r12
    30b4:	08 95       	ret

000030b6 <vTaskSwitchContext>:
    30b6:	80 91 4b 18 	lds	r24, 0x184B	; 0x80184b <uxSchedulerSuspended>
    30ba:	88 23       	and	r24, r24
    30bc:	21 f0       	breq	.+8      	; 0x30c6 <vTaskSwitchContext+0x10>
    30be:	81 e0       	ldi	r24, 0x01	; 1
    30c0:	80 93 54 18 	sts	0x1854, r24	; 0x801854 <xYieldPending>
    30c4:	08 95       	ret
    30c6:	10 92 54 18 	sts	0x1854, r1	; 0x801854 <xYieldPending>
    30ca:	e0 91 c5 18 	lds	r30, 0x18C5	; 0x8018c5 <pxCurrentTCB>
    30ce:	f0 91 c6 18 	lds	r31, 0x18C6	; 0x8018c6 <pxCurrentTCB+0x1>
    30d2:	81 a5       	ldd	r24, Z+41	; 0x29
    30d4:	0e 94 8f 09 	call	0x131e	; 0x131e <task_switch_out>
    30d8:	a0 91 c5 18 	lds	r26, 0x18C5	; 0x8018c5 <pxCurrentTCB>
    30dc:	b0 91 c6 18 	lds	r27, 0x18C6	; 0x8018c6 <pxCurrentTCB+0x1>
    30e0:	e0 91 c5 18 	lds	r30, 0x18C5	; 0x8018c5 <pxCurrentTCB>
    30e4:	f0 91 c6 18 	lds	r31, 0x18C6	; 0x8018c6 <pxCurrentTCB+0x1>
    30e8:	2d 91       	ld	r18, X+
    30ea:	3c 91       	ld	r19, X
    30ec:	83 8d       	ldd	r24, Z+27	; 0x1b
    30ee:	94 8d       	ldd	r25, Z+28	; 0x1c
    30f0:	82 17       	cp	r24, r18
    30f2:	93 07       	cpc	r25, r19
    30f4:	58 f0       	brcs	.+22     	; 0x310c <vTaskSwitchContext+0x56>
    30f6:	60 91 c5 18 	lds	r22, 0x18C5	; 0x8018c5 <pxCurrentTCB>
    30fa:	70 91 c6 18 	lds	r23, 0x18C6	; 0x8018c6 <pxCurrentTCB+0x1>
    30fe:	80 91 c5 18 	lds	r24, 0x18C5	; 0x8018c5 <pxCurrentTCB>
    3102:	90 91 c6 18 	lds	r25, 0x18C6	; 0x8018c6 <pxCurrentTCB+0x1>
    3106:	63 5e       	subi	r22, 0xE3	; 227
    3108:	7f 4f       	sbci	r23, 0xFF	; 255
    310a:	20 d6       	rcall	.+3136   	; 0x3d4c <vApplicationStackOverflowHook>
    310c:	80 91 57 18 	lds	r24, 0x1857	; 0x801857 <uxTopReadyPriority>
    3110:	28 2f       	mov	r18, r24
    3112:	30 e0       	ldi	r19, 0x00	; 0
    3114:	9b e0       	ldi	r25, 0x0B	; 11
    3116:	89 9f       	mul	r24, r25
    3118:	f0 01       	movw	r30, r0
    311a:	11 24       	eor	r1, r1
    311c:	e7 56       	subi	r30, 0x67	; 103
    311e:	f7 4e       	sbci	r31, 0xE7	; 231
    3120:	90 81       	ld	r25, Z
    3122:	91 11       	cpse	r25, r1
    3124:	0e c0       	rjmp	.+28     	; 0x3142 <vTaskSwitchContext+0x8c>
    3126:	4b e0       	ldi	r20, 0x0B	; 11
    3128:	81 50       	subi	r24, 0x01	; 1
    312a:	28 2f       	mov	r18, r24
    312c:	30 e0       	ldi	r19, 0x00	; 0
    312e:	42 9f       	mul	r20, r18
    3130:	f0 01       	movw	r30, r0
    3132:	43 9f       	mul	r20, r19
    3134:	f0 0d       	add	r31, r0
    3136:	11 24       	eor	r1, r1
    3138:	e7 56       	subi	r30, 0x67	; 103
    313a:	f7 4e       	sbci	r31, 0xE7	; 231
    313c:	90 81       	ld	r25, Z
    313e:	99 23       	and	r25, r25
    3140:	99 f3       	breq	.-26     	; 0x3128 <vTaskSwitchContext+0x72>
    3142:	9b e0       	ldi	r25, 0x0B	; 11
    3144:	92 9f       	mul	r25, r18
    3146:	a0 01       	movw	r20, r0
    3148:	93 9f       	mul	r25, r19
    314a:	50 0d       	add	r21, r0
    314c:	11 24       	eor	r1, r1
    314e:	da 01       	movw	r26, r20
    3150:	a7 56       	subi	r26, 0x67	; 103
    3152:	b7 4e       	sbci	r27, 0xE7	; 231
    3154:	11 96       	adiw	r26, 0x01	; 1
    3156:	ed 91       	ld	r30, X+
    3158:	fc 91       	ld	r31, X
    315a:	12 97       	sbiw	r26, 0x02	; 2
    315c:	04 80       	ldd	r0, Z+4	; 0x04
    315e:	f5 81       	ldd	r31, Z+5	; 0x05
    3160:	e0 2d       	mov	r30, r0
    3162:	12 96       	adiw	r26, 0x02	; 2
    3164:	fc 93       	st	X, r31
    3166:	ee 93       	st	-X, r30
    3168:	11 97       	sbiw	r26, 0x01	; 1
    316a:	44 56       	subi	r20, 0x64	; 100
    316c:	57 4e       	sbci	r21, 0xE7	; 231
    316e:	e4 17       	cp	r30, r20
    3170:	f5 07       	cpc	r31, r21
    3172:	29 f4       	brne	.+10     	; 0x317e <vTaskSwitchContext+0xc8>
    3174:	44 81       	ldd	r20, Z+4	; 0x04
    3176:	55 81       	ldd	r21, Z+5	; 0x05
    3178:	fd 01       	movw	r30, r26
    317a:	52 83       	std	Z+2, r21	; 0x02
    317c:	41 83       	std	Z+1, r20	; 0x01
    317e:	9b e0       	ldi	r25, 0x0B	; 11
    3180:	92 9f       	mul	r25, r18
    3182:	f0 01       	movw	r30, r0
    3184:	93 9f       	mul	r25, r19
    3186:	f0 0d       	add	r31, r0
    3188:	11 24       	eor	r1, r1
    318a:	e7 56       	subi	r30, 0x67	; 103
    318c:	f7 4e       	sbci	r31, 0xE7	; 231
    318e:	01 80       	ldd	r0, Z+1	; 0x01
    3190:	f2 81       	ldd	r31, Z+2	; 0x02
    3192:	e0 2d       	mov	r30, r0
    3194:	20 85       	ldd	r18, Z+8	; 0x08
    3196:	31 85       	ldd	r19, Z+9	; 0x09
    3198:	30 93 c6 18 	sts	0x18C6, r19	; 0x8018c6 <pxCurrentTCB+0x1>
    319c:	20 93 c5 18 	sts	0x18C5, r18	; 0x8018c5 <pxCurrentTCB>
    31a0:	80 93 57 18 	sts	0x1857, r24	; 0x801857 <uxTopReadyPriority>
    31a4:	e0 91 c5 18 	lds	r30, 0x18C5	; 0x8018c5 <pxCurrentTCB>
    31a8:	f0 91 c6 18 	lds	r31, 0x18C6	; 0x8018c6 <pxCurrentTCB+0x1>
    31ac:	81 a5       	ldd	r24, Z+41	; 0x29
    31ae:	0c 94 85 09 	jmp	0x130a	; 0x130a <task_switch_in>
    31b2:	08 95       	ret

000031b4 <vTaskPlaceOnEventList>:
    31b4:	cf 92       	push	r12
    31b6:	df 92       	push	r13
    31b8:	ef 92       	push	r14
    31ba:	ff 92       	push	r15
    31bc:	6a 01       	movw	r12, r20
    31be:	7b 01       	movw	r14, r22
    31c0:	60 91 c5 18 	lds	r22, 0x18C5	; 0x8018c5 <pxCurrentTCB>
    31c4:	70 91 c6 18 	lds	r23, 0x18C6	; 0x8018c6 <pxCurrentTCB+0x1>
    31c8:	62 5f       	subi	r22, 0xF2	; 242
    31ca:	7f 4f       	sbci	r23, 0xFF	; 255
    31cc:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <vListInsert>
    31d0:	41 e0       	ldi	r20, 0x01	; 1
    31d2:	c7 01       	movw	r24, r14
    31d4:	b6 01       	movw	r22, r12
    31d6:	1f dc       	rcall	.-1986   	; 0x2a16 <prvAddCurrentTaskToDelayedList>
    31d8:	ff 90       	pop	r15
    31da:	ef 90       	pop	r14
    31dc:	df 90       	pop	r13
    31de:	cf 90       	pop	r12
    31e0:	08 95       	ret

000031e2 <vTaskPlaceOnUnorderedEventList>:
    31e2:	cf 92       	push	r12
    31e4:	df 92       	push	r13
    31e6:	ef 92       	push	r14
    31e8:	ff 92       	push	r15
    31ea:	0f 93       	push	r16
    31ec:	1f 93       	push	r17
    31ee:	68 01       	movw	r12, r16
    31f0:	79 01       	movw	r14, r18
    31f2:	e0 91 c5 18 	lds	r30, 0x18C5	; 0x8018c5 <pxCurrentTCB>
    31f6:	f0 91 c6 18 	lds	r31, 0x18C6	; 0x8018c6 <pxCurrentTCB+0x1>
    31fa:	70 68       	ori	r23, 0x80	; 128
    31fc:	46 87       	std	Z+14, r20	; 0x0e
    31fe:	57 87       	std	Z+15, r21	; 0x0f
    3200:	60 8b       	std	Z+16, r22	; 0x10
    3202:	71 8b       	std	Z+17, r23	; 0x11
    3204:	60 91 c5 18 	lds	r22, 0x18C5	; 0x8018c5 <pxCurrentTCB>
    3208:	70 91 c6 18 	lds	r23, 0x18C6	; 0x8018c6 <pxCurrentTCB+0x1>
    320c:	62 5f       	subi	r22, 0xF2	; 242
    320e:	7f 4f       	sbci	r23, 0xFF	; 255
    3210:	0e 94 4d 0c 	call	0x189a	; 0x189a <vListInsertEnd>
    3214:	41 e0       	ldi	r20, 0x01	; 1
    3216:	c7 01       	movw	r24, r14
    3218:	b6 01       	movw	r22, r12
    321a:	fd db       	rcall	.-2054   	; 0x2a16 <prvAddCurrentTaskToDelayedList>
    321c:	1f 91       	pop	r17
    321e:	0f 91       	pop	r16
    3220:	ff 90       	pop	r15
    3222:	ef 90       	pop	r14
    3224:	df 90       	pop	r13
    3226:	cf 90       	pop	r12
    3228:	08 95       	ret

0000322a <vTaskPlaceOnEventListRestricted>:
    322a:	cf 92       	push	r12
    322c:	df 92       	push	r13
    322e:	ef 92       	push	r14
    3230:	ff 92       	push	r15
    3232:	cf 93       	push	r28
    3234:	6a 01       	movw	r12, r20
    3236:	7b 01       	movw	r14, r22
    3238:	c2 2f       	mov	r28, r18
    323a:	60 91 c5 18 	lds	r22, 0x18C5	; 0x8018c5 <pxCurrentTCB>
    323e:	70 91 c6 18 	lds	r23, 0x18C6	; 0x8018c6 <pxCurrentTCB+0x1>
    3242:	62 5f       	subi	r22, 0xF2	; 242
    3244:	7f 4f       	sbci	r23, 0xFF	; 255
    3246:	0e 94 4d 0c 	call	0x189a	; 0x189a <vListInsertEnd>
    324a:	cc 23       	and	r28, r28
    324c:	21 f0       	breq	.+8      	; 0x3256 <vTaskPlaceOnEventListRestricted+0x2c>
    324e:	cc 24       	eor	r12, r12
    3250:	ca 94       	dec	r12
    3252:	dc 2c       	mov	r13, r12
    3254:	76 01       	movw	r14, r12
    3256:	4c 2f       	mov	r20, r28
    3258:	c7 01       	movw	r24, r14
    325a:	b6 01       	movw	r22, r12
    325c:	dc db       	rcall	.-2120   	; 0x2a16 <prvAddCurrentTaskToDelayedList>
    325e:	cf 91       	pop	r28
    3260:	ff 90       	pop	r15
    3262:	ef 90       	pop	r14
    3264:	df 90       	pop	r13
    3266:	cf 90       	pop	r12
    3268:	08 95       	ret

0000326a <xTaskRemoveFromEventList>:
    326a:	0f 93       	push	r16
    326c:	1f 93       	push	r17
    326e:	cf 93       	push	r28
    3270:	df 93       	push	r29
    3272:	dc 01       	movw	r26, r24
    3274:	17 96       	adiw	r26, 0x07	; 7
    3276:	ed 91       	ld	r30, X+
    3278:	fc 91       	ld	r31, X
    327a:	18 97       	sbiw	r26, 0x08	; 8
    327c:	c0 85       	ldd	r28, Z+8	; 0x08
    327e:	d1 85       	ldd	r29, Z+9	; 0x09
    3280:	8e 01       	movw	r16, r28
    3282:	02 5f       	subi	r16, 0xF2	; 242
    3284:	1f 4f       	sbci	r17, 0xFF	; 255
    3286:	c8 01       	movw	r24, r16
    3288:	0e 94 ab 0c 	call	0x1956	; 0x1956 <uxListRemove>
    328c:	80 91 4b 18 	lds	r24, 0x184B	; 0x80184b <uxSchedulerSuspended>
    3290:	81 11       	cpse	r24, r1
    3292:	16 c0       	rjmp	.+44     	; 0x32c0 <xTaskRemoveFromEventList+0x56>
    3294:	0c 50       	subi	r16, 0x0C	; 12
    3296:	11 09       	sbc	r17, r1
    3298:	c8 01       	movw	r24, r16
    329a:	0e 94 ab 0c 	call	0x1956	; 0x1956 <uxListRemove>
    329e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    32a0:	90 91 57 18 	lds	r25, 0x1857	; 0x801857 <uxTopReadyPriority>
    32a4:	98 17       	cp	r25, r24
    32a6:	10 f4       	brcc	.+4      	; 0x32ac <xTaskRemoveFromEventList+0x42>
    32a8:	80 93 57 18 	sts	0x1857, r24	; 0x801857 <uxTopReadyPriority>
    32ac:	bb e0       	ldi	r27, 0x0B	; 11
    32ae:	8b 9f       	mul	r24, r27
    32b0:	c0 01       	movw	r24, r0
    32b2:	11 24       	eor	r1, r1
    32b4:	b8 01       	movw	r22, r16
    32b6:	87 56       	subi	r24, 0x67	; 103
    32b8:	97 4e       	sbci	r25, 0xE7	; 231
    32ba:	0e 94 4d 0c 	call	0x189a	; 0x189a <vListInsertEnd>
    32be:	05 c0       	rjmp	.+10     	; 0x32ca <xTaskRemoveFromEventList+0x60>
    32c0:	b8 01       	movw	r22, r16
    32c2:	84 e7       	ldi	r24, 0x74	; 116
    32c4:	98 e1       	ldi	r25, 0x18	; 24
    32c6:	0e 94 4d 0c 	call	0x189a	; 0x189a <vListInsertEnd>
    32ca:	e0 91 c5 18 	lds	r30, 0x18C5	; 0x8018c5 <pxCurrentTCB>
    32ce:	f0 91 c6 18 	lds	r31, 0x18C6	; 0x8018c6 <pxCurrentTCB+0x1>
    32d2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    32d4:	82 8d       	ldd	r24, Z+26	; 0x1a
    32d6:	89 17       	cp	r24, r25
    32d8:	20 f4       	brcc	.+8      	; 0x32e2 <xTaskRemoveFromEventList+0x78>
    32da:	81 e0       	ldi	r24, 0x01	; 1
    32dc:	80 93 54 18 	sts	0x1854, r24	; 0x801854 <xYieldPending>
    32e0:	01 c0       	rjmp	.+2      	; 0x32e4 <xTaskRemoveFromEventList+0x7a>
    32e2:	80 e0       	ldi	r24, 0x00	; 0
    32e4:	df 91       	pop	r29
    32e6:	cf 91       	pop	r28
    32e8:	1f 91       	pop	r17
    32ea:	0f 91       	pop	r16
    32ec:	08 95       	ret

000032ee <vTaskRemoveFromUnorderedEventList>:
    32ee:	0f 93       	push	r16
    32f0:	1f 93       	push	r17
    32f2:	cf 93       	push	r28
    32f4:	df 93       	push	r29
    32f6:	70 68       	ori	r23, 0x80	; 128
    32f8:	fc 01       	movw	r30, r24
    32fa:	40 83       	st	Z, r20
    32fc:	51 83       	std	Z+1, r21	; 0x01
    32fe:	62 83       	std	Z+2, r22	; 0x02
    3300:	73 83       	std	Z+3, r23	; 0x03
    3302:	c0 85       	ldd	r28, Z+8	; 0x08
    3304:	d1 85       	ldd	r29, Z+9	; 0x09
    3306:	0e 94 ab 0c 	call	0x1956	; 0x1956 <uxListRemove>
    330a:	8e 01       	movw	r16, r28
    330c:	0e 5f       	subi	r16, 0xFE	; 254
    330e:	1f 4f       	sbci	r17, 0xFF	; 255
    3310:	c8 01       	movw	r24, r16
    3312:	0e 94 ab 0c 	call	0x1956	; 0x1956 <uxListRemove>
    3316:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3318:	90 91 57 18 	lds	r25, 0x1857	; 0x801857 <uxTopReadyPriority>
    331c:	98 17       	cp	r25, r24
    331e:	10 f4       	brcc	.+4      	; 0x3324 <vTaskRemoveFromUnorderedEventList+0x36>
    3320:	80 93 57 18 	sts	0x1857, r24	; 0x801857 <uxTopReadyPriority>
    3324:	fb e0       	ldi	r31, 0x0B	; 11
    3326:	8f 9f       	mul	r24, r31
    3328:	c0 01       	movw	r24, r0
    332a:	11 24       	eor	r1, r1
    332c:	b8 01       	movw	r22, r16
    332e:	87 56       	subi	r24, 0x67	; 103
    3330:	97 4e       	sbci	r25, 0xE7	; 231
    3332:	0e 94 4d 0c 	call	0x189a	; 0x189a <vListInsertEnd>
    3336:	e0 91 c5 18 	lds	r30, 0x18C5	; 0x8018c5 <pxCurrentTCB>
    333a:	f0 91 c6 18 	lds	r31, 0x18C6	; 0x8018c6 <pxCurrentTCB+0x1>
    333e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3340:	82 8d       	ldd	r24, Z+26	; 0x1a
    3342:	89 17       	cp	r24, r25
    3344:	18 f4       	brcc	.+6      	; 0x334c <vTaskRemoveFromUnorderedEventList+0x5e>
    3346:	81 e0       	ldi	r24, 0x01	; 1
    3348:	80 93 54 18 	sts	0x1854, r24	; 0x801854 <xYieldPending>
    334c:	df 91       	pop	r29
    334e:	cf 91       	pop	r28
    3350:	1f 91       	pop	r17
    3352:	0f 91       	pop	r16
    3354:	08 95       	ret

00003356 <vTaskSetTimeOutState>:
    3356:	0f b6       	in	r0, 0x3f	; 63
    3358:	f8 94       	cli
    335a:	0f 92       	push	r0
    335c:	20 91 53 18 	lds	r18, 0x1853	; 0x801853 <xNumOfOverflows>
    3360:	fc 01       	movw	r30, r24
    3362:	20 83       	st	Z, r18
    3364:	40 91 58 18 	lds	r20, 0x1858	; 0x801858 <xTickCount>
    3368:	50 91 59 18 	lds	r21, 0x1859	; 0x801859 <xTickCount+0x1>
    336c:	60 91 5a 18 	lds	r22, 0x185A	; 0x80185a <xTickCount+0x2>
    3370:	70 91 5b 18 	lds	r23, 0x185B	; 0x80185b <xTickCount+0x3>
    3374:	41 83       	std	Z+1, r20	; 0x01
    3376:	52 83       	std	Z+2, r21	; 0x02
    3378:	63 83       	std	Z+3, r22	; 0x03
    337a:	74 83       	std	Z+4, r23	; 0x04
    337c:	0f 90       	pop	r0
    337e:	0f be       	out	0x3f, r0	; 63
    3380:	08 95       	ret

00003382 <vTaskInternalSetTimeOutState>:
    3382:	20 91 53 18 	lds	r18, 0x1853	; 0x801853 <xNumOfOverflows>
    3386:	fc 01       	movw	r30, r24
    3388:	20 83       	st	Z, r18
    338a:	40 91 58 18 	lds	r20, 0x1858	; 0x801858 <xTickCount>
    338e:	50 91 59 18 	lds	r21, 0x1859	; 0x801859 <xTickCount+0x1>
    3392:	60 91 5a 18 	lds	r22, 0x185A	; 0x80185a <xTickCount+0x2>
    3396:	70 91 5b 18 	lds	r23, 0x185B	; 0x80185b <xTickCount+0x3>
    339a:	41 83       	std	Z+1, r20	; 0x01
    339c:	52 83       	std	Z+2, r21	; 0x02
    339e:	63 83       	std	Z+3, r22	; 0x03
    33a0:	74 83       	std	Z+4, r23	; 0x04
    33a2:	08 95       	ret

000033a4 <xTaskCheckForTimeOut>:
    33a4:	cf 92       	push	r12
    33a6:	df 92       	push	r13
    33a8:	ef 92       	push	r14
    33aa:	ff 92       	push	r15
    33ac:	0f 93       	push	r16
    33ae:	1f 93       	push	r17
    33b0:	cf 93       	push	r28
    33b2:	df 93       	push	r29
    33b4:	fb 01       	movw	r30, r22
    33b6:	0f b6       	in	r0, 0x3f	; 63
    33b8:	f8 94       	cli
    33ba:	0f 92       	push	r0
    33bc:	40 91 58 18 	lds	r20, 0x1858	; 0x801858 <xTickCount>
    33c0:	50 91 59 18 	lds	r21, 0x1859	; 0x801859 <xTickCount+0x1>
    33c4:	60 91 5a 18 	lds	r22, 0x185A	; 0x80185a <xTickCount+0x2>
    33c8:	70 91 5b 18 	lds	r23, 0x185B	; 0x80185b <xTickCount+0x3>
    33cc:	00 81       	ld	r16, Z
    33ce:	11 81       	ldd	r17, Z+1	; 0x01
    33d0:	22 81       	ldd	r18, Z+2	; 0x02
    33d2:	33 81       	ldd	r19, Z+3	; 0x03
    33d4:	0f 3f       	cpi	r16, 0xFF	; 255
    33d6:	af ef       	ldi	r26, 0xFF	; 255
    33d8:	1a 07       	cpc	r17, r26
    33da:	2a 07       	cpc	r18, r26
    33dc:	3a 07       	cpc	r19, r26
    33de:	49 f1       	breq	.+82     	; 0x3432 <xTaskCheckForTimeOut+0x8e>
    33e0:	ec 01       	movw	r28, r24
    33e2:	c9 80       	ldd	r12, Y+1	; 0x01
    33e4:	da 80       	ldd	r13, Y+2	; 0x02
    33e6:	eb 80       	ldd	r14, Y+3	; 0x03
    33e8:	fc 80       	ldd	r15, Y+4	; 0x04
    33ea:	a0 91 53 18 	lds	r26, 0x1853	; 0x801853 <xNumOfOverflows>
    33ee:	b8 81       	ld	r27, Y
    33f0:	ba 17       	cp	r27, r26
    33f2:	29 f0       	breq	.+10     	; 0x33fe <xTaskCheckForTimeOut+0x5a>
    33f4:	4c 15       	cp	r20, r12
    33f6:	5d 05       	cpc	r21, r13
    33f8:	6e 05       	cpc	r22, r14
    33fa:	7f 05       	cpc	r23, r15
    33fc:	e0 f4       	brcc	.+56     	; 0x3436 <xTaskCheckForTimeOut+0x92>
    33fe:	4c 19       	sub	r20, r12
    3400:	5d 09       	sbc	r21, r13
    3402:	6e 09       	sbc	r22, r14
    3404:	7f 09       	sbc	r23, r15
    3406:	40 17       	cp	r20, r16
    3408:	51 07       	cpc	r21, r17
    340a:	62 07       	cpc	r22, r18
    340c:	73 07       	cpc	r23, r19
    340e:	58 f4       	brcc	.+22     	; 0x3426 <xTaskCheckForTimeOut+0x82>
    3410:	04 1b       	sub	r16, r20
    3412:	15 0b       	sbc	r17, r21
    3414:	26 0b       	sbc	r18, r22
    3416:	37 0b       	sbc	r19, r23
    3418:	00 83       	st	Z, r16
    341a:	11 83       	std	Z+1, r17	; 0x01
    341c:	22 83       	std	Z+2, r18	; 0x02
    341e:	33 83       	std	Z+3, r19	; 0x03
    3420:	b0 df       	rcall	.-160    	; 0x3382 <vTaskInternalSetTimeOutState>
    3422:	80 e0       	ldi	r24, 0x00	; 0
    3424:	09 c0       	rjmp	.+18     	; 0x3438 <xTaskCheckForTimeOut+0x94>
    3426:	10 82       	st	Z, r1
    3428:	11 82       	std	Z+1, r1	; 0x01
    342a:	12 82       	std	Z+2, r1	; 0x02
    342c:	13 82       	std	Z+3, r1	; 0x03
    342e:	81 e0       	ldi	r24, 0x01	; 1
    3430:	03 c0       	rjmp	.+6      	; 0x3438 <xTaskCheckForTimeOut+0x94>
    3432:	80 e0       	ldi	r24, 0x00	; 0
    3434:	01 c0       	rjmp	.+2      	; 0x3438 <xTaskCheckForTimeOut+0x94>
    3436:	81 e0       	ldi	r24, 0x01	; 1
    3438:	0f 90       	pop	r0
    343a:	0f be       	out	0x3f, r0	; 63
    343c:	df 91       	pop	r29
    343e:	cf 91       	pop	r28
    3440:	1f 91       	pop	r17
    3442:	0f 91       	pop	r16
    3444:	ff 90       	pop	r15
    3446:	ef 90       	pop	r14
    3448:	df 90       	pop	r13
    344a:	cf 90       	pop	r12
    344c:	08 95       	ret

0000344e <vTaskMissedYield>:
    344e:	81 e0       	ldi	r24, 0x01	; 1
    3450:	80 93 54 18 	sts	0x1854, r24	; 0x801854 <xYieldPending>
    3454:	08 95       	ret

00003456 <xTaskGetCurrentTaskHandle>:
    3456:	80 91 c5 18 	lds	r24, 0x18C5	; 0x8018c5 <pxCurrentTCB>
    345a:	90 91 c6 18 	lds	r25, 0x18C6	; 0x8018c6 <pxCurrentTCB+0x1>
    345e:	08 95       	ret

00003460 <xTaskGetSchedulerState>:
    3460:	80 91 56 18 	lds	r24, 0x1856	; 0x801856 <xSchedulerRunning>
    3464:	88 23       	and	r24, r24
    3466:	31 f0       	breq	.+12     	; 0x3474 <xTaskGetSchedulerState+0x14>
    3468:	80 91 4b 18 	lds	r24, 0x184B	; 0x80184b <uxSchedulerSuspended>
    346c:	88 23       	and	r24, r24
    346e:	21 f0       	breq	.+8      	; 0x3478 <xTaskGetSchedulerState+0x18>
    3470:	80 e0       	ldi	r24, 0x00	; 0
    3472:	08 95       	ret
    3474:	81 e0       	ldi	r24, 0x01	; 1
    3476:	08 95       	ret
    3478:	82 e0       	ldi	r24, 0x02	; 2
    347a:	08 95       	ret

0000347c <xTaskPriorityInherit>:
    347c:	0f 93       	push	r16
    347e:	1f 93       	push	r17
    3480:	cf 93       	push	r28
    3482:	df 93       	push	r29
    3484:	fc 01       	movw	r30, r24
    3486:	89 2b       	or	r24, r25
    3488:	09 f4       	brne	.+2      	; 0x348c <xTaskPriorityInherit+0x10>
    348a:	60 c0       	rjmp	.+192    	; 0x354c <xTaskPriorityInherit+0xd0>
    348c:	82 8d       	ldd	r24, Z+26	; 0x1a
    348e:	a0 91 c5 18 	lds	r26, 0x18C5	; 0x8018c5 <pxCurrentTCB>
    3492:	b0 91 c6 18 	lds	r27, 0x18C6	; 0x8018c6 <pxCurrentTCB+0x1>
    3496:	5a 96       	adiw	r26, 0x1a	; 26
    3498:	9c 91       	ld	r25, X
    349a:	89 17       	cp	r24, r25
    349c:	08 f0       	brcs	.+2      	; 0x34a0 <xTaskPriorityInherit+0x24>
    349e:	4a c0       	rjmp	.+148    	; 0x3534 <xTaskPriorityInherit+0xb8>
    34a0:	46 85       	ldd	r20, Z+14	; 0x0e
    34a2:	57 85       	ldd	r21, Z+15	; 0x0f
    34a4:	60 89       	ldd	r22, Z+16	; 0x10
    34a6:	71 89       	ldd	r23, Z+17	; 0x11
    34a8:	77 23       	and	r23, r23
    34aa:	94 f0       	brlt	.+36     	; 0x34d0 <xTaskPriorityInherit+0x54>
    34ac:	a0 91 c5 18 	lds	r26, 0x18C5	; 0x8018c5 <pxCurrentTCB>
    34b0:	b0 91 c6 18 	lds	r27, 0x18C6	; 0x8018c6 <pxCurrentTCB+0x1>
    34b4:	5a 96       	adiw	r26, 0x1a	; 26
    34b6:	9c 91       	ld	r25, X
    34b8:	44 e0       	ldi	r20, 0x04	; 4
    34ba:	50 e0       	ldi	r21, 0x00	; 0
    34bc:	60 e0       	ldi	r22, 0x00	; 0
    34be:	70 e0       	ldi	r23, 0x00	; 0
    34c0:	49 1b       	sub	r20, r25
    34c2:	51 09       	sbc	r21, r1
    34c4:	61 09       	sbc	r22, r1
    34c6:	71 09       	sbc	r23, r1
    34c8:	46 87       	std	Z+14, r20	; 0x0e
    34ca:	57 87       	std	Z+15, r21	; 0x0f
    34cc:	60 8b       	std	Z+16, r22	; 0x10
    34ce:	71 8b       	std	Z+17, r23	; 0x11
    34d0:	2b e0       	ldi	r18, 0x0B	; 11
    34d2:	82 9f       	mul	r24, r18
    34d4:	c0 01       	movw	r24, r0
    34d6:	11 24       	eor	r1, r1
    34d8:	87 56       	subi	r24, 0x67	; 103
    34da:	97 4e       	sbci	r25, 0xE7	; 231
    34dc:	24 85       	ldd	r18, Z+12	; 0x0c
    34de:	35 85       	ldd	r19, Z+13	; 0x0d
    34e0:	28 17       	cp	r18, r24
    34e2:	39 07       	cpc	r19, r25
    34e4:	f1 f4       	brne	.+60     	; 0x3522 <xTaskPriorityInherit+0xa6>
    34e6:	8f 01       	movw	r16, r30
    34e8:	ef 01       	movw	r28, r30
    34ea:	22 96       	adiw	r28, 0x02	; 2
    34ec:	ce 01       	movw	r24, r28
    34ee:	0e 94 ab 0c 	call	0x1956	; 0x1956 <uxListRemove>
    34f2:	e0 91 c5 18 	lds	r30, 0x18C5	; 0x8018c5 <pxCurrentTCB>
    34f6:	f0 91 c6 18 	lds	r31, 0x18C6	; 0x8018c6 <pxCurrentTCB+0x1>
    34fa:	82 8d       	ldd	r24, Z+26	; 0x1a
    34fc:	f8 01       	movw	r30, r16
    34fe:	82 8f       	std	Z+26, r24	; 0x1a
    3500:	90 91 57 18 	lds	r25, 0x1857	; 0x801857 <uxTopReadyPriority>
    3504:	98 17       	cp	r25, r24
    3506:	10 f4       	brcc	.+4      	; 0x350c <xTaskPriorityInherit+0x90>
    3508:	80 93 57 18 	sts	0x1857, r24	; 0x801857 <uxTopReadyPriority>
    350c:	fb e0       	ldi	r31, 0x0B	; 11
    350e:	8f 9f       	mul	r24, r31
    3510:	c0 01       	movw	r24, r0
    3512:	11 24       	eor	r1, r1
    3514:	be 01       	movw	r22, r28
    3516:	87 56       	subi	r24, 0x67	; 103
    3518:	97 4e       	sbci	r25, 0xE7	; 231
    351a:	0e 94 4d 0c 	call	0x189a	; 0x189a <vListInsertEnd>
    351e:	81 e0       	ldi	r24, 0x01	; 1
    3520:	16 c0       	rjmp	.+44     	; 0x354e <xTaskPriorityInherit+0xd2>
    3522:	a0 91 c5 18 	lds	r26, 0x18C5	; 0x8018c5 <pxCurrentTCB>
    3526:	b0 91 c6 18 	lds	r27, 0x18C6	; 0x8018c6 <pxCurrentTCB+0x1>
    352a:	5a 96       	adiw	r26, 0x1a	; 26
    352c:	8c 91       	ld	r24, X
    352e:	82 8f       	std	Z+26, r24	; 0x1a
    3530:	81 e0       	ldi	r24, 0x01	; 1
    3532:	0d c0       	rjmp	.+26     	; 0x354e <xTaskPriorityInherit+0xd2>
    3534:	a0 91 c5 18 	lds	r26, 0x18C5	; 0x8018c5 <pxCurrentTCB>
    3538:	b0 91 c6 18 	lds	r27, 0x18C6	; 0x8018c6 <pxCurrentTCB+0x1>
    353c:	81 e0       	ldi	r24, 0x01	; 1
    353e:	27 a1       	ldd	r18, Z+39	; 0x27
    3540:	5a 96       	adiw	r26, 0x1a	; 26
    3542:	9c 91       	ld	r25, X
    3544:	29 17       	cp	r18, r25
    3546:	18 f0       	brcs	.+6      	; 0x354e <xTaskPriorityInherit+0xd2>
    3548:	80 e0       	ldi	r24, 0x00	; 0
    354a:	01 c0       	rjmp	.+2      	; 0x354e <xTaskPriorityInherit+0xd2>
    354c:	80 e0       	ldi	r24, 0x00	; 0
    354e:	df 91       	pop	r29
    3550:	cf 91       	pop	r28
    3552:	1f 91       	pop	r17
    3554:	0f 91       	pop	r16
    3556:	08 95       	ret

00003558 <xTaskPriorityDisinherit>:
    3558:	0f 93       	push	r16
    355a:	1f 93       	push	r17
    355c:	cf 93       	push	r28
    355e:	df 93       	push	r29
    3560:	fc 01       	movw	r30, r24
    3562:	89 2b       	or	r24, r25
    3564:	79 f1       	breq	.+94     	; 0x35c4 <xTaskPriorityDisinherit+0x6c>
    3566:	80 a5       	ldd	r24, Z+40	; 0x28
    3568:	81 50       	subi	r24, 0x01	; 1
    356a:	80 a7       	std	Z+40, r24	; 0x28
    356c:	22 8d       	ldd	r18, Z+26	; 0x1a
    356e:	97 a1       	ldd	r25, Z+39	; 0x27
    3570:	29 17       	cp	r18, r25
    3572:	51 f1       	breq	.+84     	; 0x35c8 <xTaskPriorityDisinherit+0x70>
    3574:	81 11       	cpse	r24, r1
    3576:	2a c0       	rjmp	.+84     	; 0x35cc <xTaskPriorityDisinherit+0x74>
    3578:	ef 01       	movw	r28, r30
    357a:	8f 01       	movw	r16, r30
    357c:	0e 5f       	subi	r16, 0xFE	; 254
    357e:	1f 4f       	sbci	r17, 0xFF	; 255
    3580:	c8 01       	movw	r24, r16
    3582:	0e 94 ab 0c 	call	0x1956	; 0x1956 <uxListRemove>
    3586:	8f a1       	ldd	r24, Y+39	; 0x27
    3588:	8a 8f       	std	Y+26, r24	; 0x1a
    358a:	44 e0       	ldi	r20, 0x04	; 4
    358c:	50 e0       	ldi	r21, 0x00	; 0
    358e:	60 e0       	ldi	r22, 0x00	; 0
    3590:	70 e0       	ldi	r23, 0x00	; 0
    3592:	48 1b       	sub	r20, r24
    3594:	51 09       	sbc	r21, r1
    3596:	61 09       	sbc	r22, r1
    3598:	71 09       	sbc	r23, r1
    359a:	4e 87       	std	Y+14, r20	; 0x0e
    359c:	5f 87       	std	Y+15, r21	; 0x0f
    359e:	68 8b       	std	Y+16, r22	; 0x10
    35a0:	79 8b       	std	Y+17, r23	; 0x11
    35a2:	90 91 57 18 	lds	r25, 0x1857	; 0x801857 <uxTopReadyPriority>
    35a6:	98 17       	cp	r25, r24
    35a8:	10 f4       	brcc	.+4      	; 0x35ae <xTaskPriorityDisinherit+0x56>
    35aa:	80 93 57 18 	sts	0x1857, r24	; 0x801857 <uxTopReadyPriority>
    35ae:	2b e0       	ldi	r18, 0x0B	; 11
    35b0:	82 9f       	mul	r24, r18
    35b2:	c0 01       	movw	r24, r0
    35b4:	11 24       	eor	r1, r1
    35b6:	b8 01       	movw	r22, r16
    35b8:	87 56       	subi	r24, 0x67	; 103
    35ba:	97 4e       	sbci	r25, 0xE7	; 231
    35bc:	0e 94 4d 0c 	call	0x189a	; 0x189a <vListInsertEnd>
    35c0:	81 e0       	ldi	r24, 0x01	; 1
    35c2:	05 c0       	rjmp	.+10     	; 0x35ce <xTaskPriorityDisinherit+0x76>
    35c4:	80 e0       	ldi	r24, 0x00	; 0
    35c6:	03 c0       	rjmp	.+6      	; 0x35ce <xTaskPriorityDisinherit+0x76>
    35c8:	80 e0       	ldi	r24, 0x00	; 0
    35ca:	01 c0       	rjmp	.+2      	; 0x35ce <xTaskPriorityDisinherit+0x76>
    35cc:	80 e0       	ldi	r24, 0x00	; 0
    35ce:	df 91       	pop	r29
    35d0:	cf 91       	pop	r28
    35d2:	1f 91       	pop	r17
    35d4:	0f 91       	pop	r16
    35d6:	08 95       	ret

000035d8 <vTaskPriorityDisinheritAfterTimeout>:
    35d8:	0f 93       	push	r16
    35da:	1f 93       	push	r17
    35dc:	cf 93       	push	r28
    35de:	df 93       	push	r29
    35e0:	fc 01       	movw	r30, r24
    35e2:	89 2b       	or	r24, r25
    35e4:	09 f4       	brne	.+2      	; 0x35e8 <vTaskPriorityDisinheritAfterTimeout+0x10>
    35e6:	3f c0       	rjmp	.+126    	; 0x3666 <vTaskPriorityDisinheritAfterTimeout+0x8e>
    35e8:	87 a1       	ldd	r24, Z+39	; 0x27
    35ea:	86 17       	cp	r24, r22
    35ec:	08 f4       	brcc	.+2      	; 0x35f0 <vTaskPriorityDisinheritAfterTimeout+0x18>
    35ee:	86 2f       	mov	r24, r22
    35f0:	92 8d       	ldd	r25, Z+26	; 0x1a
    35f2:	98 17       	cp	r25, r24
    35f4:	c1 f1       	breq	.+112    	; 0x3666 <vTaskPriorityDisinheritAfterTimeout+0x8e>
    35f6:	20 a5       	ldd	r18, Z+40	; 0x28
    35f8:	21 30       	cpi	r18, 0x01	; 1
    35fa:	a9 f5       	brne	.+106    	; 0x3666 <vTaskPriorityDisinheritAfterTimeout+0x8e>
    35fc:	82 8f       	std	Z+26, r24	; 0x1a
    35fe:	46 85       	ldd	r20, Z+14	; 0x0e
    3600:	57 85       	ldd	r21, Z+15	; 0x0f
    3602:	60 89       	ldd	r22, Z+16	; 0x10
    3604:	71 89       	ldd	r23, Z+17	; 0x11
    3606:	77 23       	and	r23, r23
    3608:	64 f0       	brlt	.+24     	; 0x3622 <vTaskPriorityDisinheritAfterTimeout+0x4a>
    360a:	44 e0       	ldi	r20, 0x04	; 4
    360c:	50 e0       	ldi	r21, 0x00	; 0
    360e:	60 e0       	ldi	r22, 0x00	; 0
    3610:	70 e0       	ldi	r23, 0x00	; 0
    3612:	48 1b       	sub	r20, r24
    3614:	51 09       	sbc	r21, r1
    3616:	61 09       	sbc	r22, r1
    3618:	71 09       	sbc	r23, r1
    361a:	46 87       	std	Z+14, r20	; 0x0e
    361c:	57 87       	std	Z+15, r21	; 0x0f
    361e:	60 8b       	std	Z+16, r22	; 0x10
    3620:	71 8b       	std	Z+17, r23	; 0x11
    3622:	2b e0       	ldi	r18, 0x0B	; 11
    3624:	92 9f       	mul	r25, r18
    3626:	c0 01       	movw	r24, r0
    3628:	11 24       	eor	r1, r1
    362a:	87 56       	subi	r24, 0x67	; 103
    362c:	97 4e       	sbci	r25, 0xE7	; 231
    362e:	24 85       	ldd	r18, Z+12	; 0x0c
    3630:	35 85       	ldd	r19, Z+13	; 0x0d
    3632:	28 17       	cp	r18, r24
    3634:	39 07       	cpc	r19, r25
    3636:	b9 f4       	brne	.+46     	; 0x3666 <vTaskPriorityDisinheritAfterTimeout+0x8e>
    3638:	ef 01       	movw	r28, r30
    363a:	8f 01       	movw	r16, r30
    363c:	0e 5f       	subi	r16, 0xFE	; 254
    363e:	1f 4f       	sbci	r17, 0xFF	; 255
    3640:	c8 01       	movw	r24, r16
    3642:	0e 94 ab 0c 	call	0x1956	; 0x1956 <uxListRemove>
    3646:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3648:	90 91 57 18 	lds	r25, 0x1857	; 0x801857 <uxTopReadyPriority>
    364c:	98 17       	cp	r25, r24
    364e:	10 f4       	brcc	.+4      	; 0x3654 <vTaskPriorityDisinheritAfterTimeout+0x7c>
    3650:	80 93 57 18 	sts	0x1857, r24	; 0x801857 <uxTopReadyPriority>
    3654:	2b e0       	ldi	r18, 0x0B	; 11
    3656:	82 9f       	mul	r24, r18
    3658:	c0 01       	movw	r24, r0
    365a:	11 24       	eor	r1, r1
    365c:	b8 01       	movw	r22, r16
    365e:	87 56       	subi	r24, 0x67	; 103
    3660:	97 4e       	sbci	r25, 0xE7	; 231
    3662:	0e 94 4d 0c 	call	0x189a	; 0x189a <vListInsertEnd>
    3666:	df 91       	pop	r29
    3668:	cf 91       	pop	r28
    366a:	1f 91       	pop	r17
    366c:	0f 91       	pop	r16
    366e:	08 95       	ret

00003670 <uxTaskResetEventItemValue>:
    3670:	cf 92       	push	r12
    3672:	df 92       	push	r13
    3674:	ef 92       	push	r14
    3676:	ff 92       	push	r15
    3678:	e0 91 c5 18 	lds	r30, 0x18C5	; 0x8018c5 <pxCurrentTCB>
    367c:	f0 91 c6 18 	lds	r31, 0x18C6	; 0x8018c6 <pxCurrentTCB+0x1>
    3680:	66 85       	ldd	r22, Z+14	; 0x0e
    3682:	77 85       	ldd	r23, Z+15	; 0x0f
    3684:	80 89       	ldd	r24, Z+16	; 0x10
    3686:	91 89       	ldd	r25, Z+17	; 0x11
    3688:	e0 91 c5 18 	lds	r30, 0x18C5	; 0x8018c5 <pxCurrentTCB>
    368c:	f0 91 c6 18 	lds	r31, 0x18C6	; 0x8018c6 <pxCurrentTCB+0x1>
    3690:	a0 91 c5 18 	lds	r26, 0x18C5	; 0x8018c5 <pxCurrentTCB>
    3694:	b0 91 c6 18 	lds	r27, 0x18C6	; 0x8018c6 <pxCurrentTCB+0x1>
    3698:	5a 96       	adiw	r26, 0x1a	; 26
    369a:	2c 91       	ld	r18, X
    369c:	c1 2c       	mov	r12, r1
    369e:	d1 2c       	mov	r13, r1
    36a0:	76 01       	movw	r14, r12
    36a2:	68 94       	set
    36a4:	c2 f8       	bld	r12, 2
    36a6:	c2 1a       	sub	r12, r18
    36a8:	d1 08       	sbc	r13, r1
    36aa:	e1 08       	sbc	r14, r1
    36ac:	f1 08       	sbc	r15, r1
    36ae:	c6 86       	std	Z+14, r12	; 0x0e
    36b0:	d7 86       	std	Z+15, r13	; 0x0f
    36b2:	e0 8a       	std	Z+16, r14	; 0x10
    36b4:	f1 8a       	std	Z+17, r15	; 0x11
    36b6:	ff 90       	pop	r15
    36b8:	ef 90       	pop	r14
    36ba:	df 90       	pop	r13
    36bc:	cf 90       	pop	r12
    36be:	08 95       	ret

000036c0 <pvTaskIncrementMutexHeldCount>:
    36c0:	80 91 c5 18 	lds	r24, 0x18C5	; 0x8018c5 <pxCurrentTCB>
    36c4:	90 91 c6 18 	lds	r25, 0x18C6	; 0x8018c6 <pxCurrentTCB+0x1>
    36c8:	89 2b       	or	r24, r25
    36ca:	39 f0       	breq	.+14     	; 0x36da <pvTaskIncrementMutexHeldCount+0x1a>
    36cc:	e0 91 c5 18 	lds	r30, 0x18C5	; 0x8018c5 <pxCurrentTCB>
    36d0:	f0 91 c6 18 	lds	r31, 0x18C6	; 0x8018c6 <pxCurrentTCB+0x1>
    36d4:	80 a5       	ldd	r24, Z+40	; 0x28
    36d6:	8f 5f       	subi	r24, 0xFF	; 255
    36d8:	80 a7       	std	Z+40, r24	; 0x28
    36da:	80 91 c5 18 	lds	r24, 0x18C5	; 0x8018c5 <pxCurrentTCB>
    36de:	90 91 c6 18 	lds	r25, 0x18C6	; 0x8018c6 <pxCurrentTCB+0x1>
    36e2:	08 95       	ret

000036e4 <xTaskNotifyWait>:
    36e4:	4f 92       	push	r4
    36e6:	5f 92       	push	r5
    36e8:	6f 92       	push	r6
    36ea:	7f 92       	push	r7
    36ec:	8f 92       	push	r8
    36ee:	9f 92       	push	r9
    36f0:	af 92       	push	r10
    36f2:	bf 92       	push	r11
    36f4:	cf 92       	push	r12
    36f6:	df 92       	push	r13
    36f8:	ef 92       	push	r14
    36fa:	ff 92       	push	r15
    36fc:	0f 93       	push	r16
    36fe:	1f 93       	push	r17
    3700:	49 01       	movw	r8, r18
    3702:	5a 01       	movw	r10, r20
    3704:	0f b6       	in	r0, 0x3f	; 63
    3706:	f8 94       	cli
    3708:	0f 92       	push	r0
    370a:	e0 91 c5 18 	lds	r30, 0x18C5	; 0x8018c5 <pxCurrentTCB>
    370e:	f0 91 c6 18 	lds	r31, 0x18C6	; 0x8018c6 <pxCurrentTCB+0x1>
    3712:	27 a5       	ldd	r18, Z+47	; 0x2f
    3714:	22 30       	cpi	r18, 0x02	; 2
    3716:	39 f1       	breq	.+78     	; 0x3766 <xTaskNotifyWait+0x82>
    3718:	e0 91 c5 18 	lds	r30, 0x18C5	; 0x8018c5 <pxCurrentTCB>
    371c:	f0 91 c6 18 	lds	r31, 0x18C6	; 0x8018c6 <pxCurrentTCB+0x1>
    3720:	43 a4       	ldd	r4, Z+43	; 0x2b
    3722:	54 a4       	ldd	r5, Z+44	; 0x2c
    3724:	65 a4       	ldd	r6, Z+45	; 0x2d
    3726:	76 a4       	ldd	r7, Z+46	; 0x2e
    3728:	dc 01       	movw	r26, r24
    372a:	cb 01       	movw	r24, r22
    372c:	80 95       	com	r24
    372e:	90 95       	com	r25
    3730:	a0 95       	com	r26
    3732:	b0 95       	com	r27
    3734:	84 21       	and	r24, r4
    3736:	95 21       	and	r25, r5
    3738:	a6 21       	and	r26, r6
    373a:	b7 21       	and	r27, r7
    373c:	83 a7       	std	Z+43, r24	; 0x2b
    373e:	94 a7       	std	Z+44, r25	; 0x2c
    3740:	a5 a7       	std	Z+45, r26	; 0x2d
    3742:	b6 a7       	std	Z+46, r27	; 0x2e
    3744:	e0 91 c5 18 	lds	r30, 0x18C5	; 0x8018c5 <pxCurrentTCB>
    3748:	f0 91 c6 18 	lds	r31, 0x18C6	; 0x8018c6 <pxCurrentTCB+0x1>
    374c:	81 e0       	ldi	r24, 0x01	; 1
    374e:	87 a7       	std	Z+47, r24	; 0x2f
    3750:	c1 14       	cp	r12, r1
    3752:	d1 04       	cpc	r13, r1
    3754:	e1 04       	cpc	r14, r1
    3756:	f1 04       	cpc	r15, r1
    3758:	31 f0       	breq	.+12     	; 0x3766 <xTaskNotifyWait+0x82>
    375a:	41 e0       	ldi	r20, 0x01	; 1
    375c:	c7 01       	movw	r24, r14
    375e:	b6 01       	movw	r22, r12
    3760:	5a d9       	rcall	.-3404   	; 0x2a16 <prvAddCurrentTaskToDelayedList>
    3762:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <vPortYield>
    3766:	0f 90       	pop	r0
    3768:	0f be       	out	0x3f, r0	; 63
    376a:	0f b6       	in	r0, 0x3f	; 63
    376c:	f8 94       	cli
    376e:	0f 92       	push	r0
    3770:	01 15       	cp	r16, r1
    3772:	11 05       	cpc	r17, r1
    3774:	69 f0       	breq	.+26     	; 0x3790 <xTaskNotifyWait+0xac>
    3776:	e0 91 c5 18 	lds	r30, 0x18C5	; 0x8018c5 <pxCurrentTCB>
    377a:	f0 91 c6 18 	lds	r31, 0x18C6	; 0x8018c6 <pxCurrentTCB+0x1>
    377e:	83 a5       	ldd	r24, Z+43	; 0x2b
    3780:	94 a5       	ldd	r25, Z+44	; 0x2c
    3782:	a5 a5       	ldd	r26, Z+45	; 0x2d
    3784:	b6 a5       	ldd	r27, Z+46	; 0x2e
    3786:	f8 01       	movw	r30, r16
    3788:	80 83       	st	Z, r24
    378a:	91 83       	std	Z+1, r25	; 0x01
    378c:	a2 83       	std	Z+2, r26	; 0x02
    378e:	b3 83       	std	Z+3, r27	; 0x03
    3790:	e0 91 c5 18 	lds	r30, 0x18C5	; 0x8018c5 <pxCurrentTCB>
    3794:	f0 91 c6 18 	lds	r31, 0x18C6	; 0x8018c6 <pxCurrentTCB+0x1>
    3798:	87 a5       	ldd	r24, Z+47	; 0x2f
    379a:	82 30       	cpi	r24, 0x02	; 2
    379c:	b1 f4       	brne	.+44     	; 0x37ca <xTaskNotifyWait+0xe6>
    379e:	e0 91 c5 18 	lds	r30, 0x18C5	; 0x8018c5 <pxCurrentTCB>
    37a2:	f0 91 c6 18 	lds	r31, 0x18C6	; 0x8018c6 <pxCurrentTCB+0x1>
    37a6:	83 a5       	ldd	r24, Z+43	; 0x2b
    37a8:	94 a5       	ldd	r25, Z+44	; 0x2c
    37aa:	a5 a5       	ldd	r26, Z+45	; 0x2d
    37ac:	b6 a5       	ldd	r27, Z+46	; 0x2e
    37ae:	80 94       	com	r8
    37b0:	90 94       	com	r9
    37b2:	a0 94       	com	r10
    37b4:	b0 94       	com	r11
    37b6:	88 22       	and	r8, r24
    37b8:	99 22       	and	r9, r25
    37ba:	aa 22       	and	r10, r26
    37bc:	bb 22       	and	r11, r27
    37be:	83 a6       	std	Z+43, r8	; 0x2b
    37c0:	94 a6       	std	Z+44, r9	; 0x2c
    37c2:	a5 a6       	std	Z+45, r10	; 0x2d
    37c4:	b6 a6       	std	Z+46, r11	; 0x2e
    37c6:	81 e0       	ldi	r24, 0x01	; 1
    37c8:	01 c0       	rjmp	.+2      	; 0x37cc <xTaskNotifyWait+0xe8>
    37ca:	80 e0       	ldi	r24, 0x00	; 0
    37cc:	e0 91 c5 18 	lds	r30, 0x18C5	; 0x8018c5 <pxCurrentTCB>
    37d0:	f0 91 c6 18 	lds	r31, 0x18C6	; 0x8018c6 <pxCurrentTCB+0x1>
    37d4:	17 a6       	std	Z+47, r1	; 0x2f
    37d6:	0f 90       	pop	r0
    37d8:	0f be       	out	0x3f, r0	; 63
    37da:	1f 91       	pop	r17
    37dc:	0f 91       	pop	r16
    37de:	ff 90       	pop	r15
    37e0:	ef 90       	pop	r14
    37e2:	df 90       	pop	r13
    37e4:	cf 90       	pop	r12
    37e6:	bf 90       	pop	r11
    37e8:	af 90       	pop	r10
    37ea:	9f 90       	pop	r9
    37ec:	8f 90       	pop	r8
    37ee:	7f 90       	pop	r7
    37f0:	6f 90       	pop	r6
    37f2:	5f 90       	pop	r5
    37f4:	4f 90       	pop	r4
    37f6:	08 95       	ret

000037f8 <xTaskGenericNotify>:
    37f8:	0f 93       	push	r16
    37fa:	1f 93       	push	r17
    37fc:	cf 93       	push	r28
    37fe:	df 93       	push	r29
    3800:	fc 01       	movw	r30, r24
    3802:	0f b6       	in	r0, 0x3f	; 63
    3804:	f8 94       	cli
    3806:	0f 92       	push	r0
    3808:	01 15       	cp	r16, r1
    380a:	11 05       	cpc	r17, r1
    380c:	49 f0       	breq	.+18     	; 0x3820 <xTaskGenericNotify+0x28>
    380e:	83 a5       	ldd	r24, Z+43	; 0x2b
    3810:	94 a5       	ldd	r25, Z+44	; 0x2c
    3812:	a5 a5       	ldd	r26, Z+45	; 0x2d
    3814:	b6 a5       	ldd	r27, Z+46	; 0x2e
    3816:	e8 01       	movw	r28, r16
    3818:	88 83       	st	Y, r24
    381a:	99 83       	std	Y+1, r25	; 0x01
    381c:	aa 83       	std	Y+2, r26	; 0x02
    381e:	bb 83       	std	Y+3, r27	; 0x03
    3820:	87 a5       	ldd	r24, Z+47	; 0x2f
    3822:	92 e0       	ldi	r25, 0x02	; 2
    3824:	97 a7       	std	Z+47, r25	; 0x2f
    3826:	22 30       	cpi	r18, 0x02	; 2
    3828:	b1 f0       	breq	.+44     	; 0x3856 <xTaskGenericNotify+0x5e>
    382a:	18 f4       	brcc	.+6      	; 0x3832 <xTaskGenericNotify+0x3a>
    382c:	21 30       	cpi	r18, 0x01	; 1
    382e:	31 f0       	breq	.+12     	; 0x383c <xTaskGenericNotify+0x44>
    3830:	2a c0       	rjmp	.+84     	; 0x3886 <xTaskGenericNotify+0x8e>
    3832:	23 30       	cpi	r18, 0x03	; 3
    3834:	e9 f0       	breq	.+58     	; 0x3870 <xTaskGenericNotify+0x78>
    3836:	24 30       	cpi	r18, 0x04	; 4
    3838:	01 f1       	breq	.+64     	; 0x387a <xTaskGenericNotify+0x82>
    383a:	25 c0       	rjmp	.+74     	; 0x3886 <xTaskGenericNotify+0x8e>
    383c:	03 a5       	ldd	r16, Z+43	; 0x2b
    383e:	14 a5       	ldd	r17, Z+44	; 0x2c
    3840:	25 a5       	ldd	r18, Z+45	; 0x2d
    3842:	36 a5       	ldd	r19, Z+46	; 0x2e
    3844:	40 2b       	or	r20, r16
    3846:	51 2b       	or	r21, r17
    3848:	62 2b       	or	r22, r18
    384a:	73 2b       	or	r23, r19
    384c:	43 a7       	std	Z+43, r20	; 0x2b
    384e:	54 a7       	std	Z+44, r21	; 0x2c
    3850:	65 a7       	std	Z+45, r22	; 0x2d
    3852:	76 a7       	std	Z+46, r23	; 0x2e
    3854:	18 c0       	rjmp	.+48     	; 0x3886 <xTaskGenericNotify+0x8e>
    3856:	43 a5       	ldd	r20, Z+43	; 0x2b
    3858:	54 a5       	ldd	r21, Z+44	; 0x2c
    385a:	65 a5       	ldd	r22, Z+45	; 0x2d
    385c:	76 a5       	ldd	r23, Z+46	; 0x2e
    385e:	4f 5f       	subi	r20, 0xFF	; 255
    3860:	5f 4f       	sbci	r21, 0xFF	; 255
    3862:	6f 4f       	sbci	r22, 0xFF	; 255
    3864:	7f 4f       	sbci	r23, 0xFF	; 255
    3866:	43 a7       	std	Z+43, r20	; 0x2b
    3868:	54 a7       	std	Z+44, r21	; 0x2c
    386a:	65 a7       	std	Z+45, r22	; 0x2d
    386c:	76 a7       	std	Z+46, r23	; 0x2e
    386e:	0b c0       	rjmp	.+22     	; 0x3886 <xTaskGenericNotify+0x8e>
    3870:	43 a7       	std	Z+43, r20	; 0x2b
    3872:	54 a7       	std	Z+44, r21	; 0x2c
    3874:	65 a7       	std	Z+45, r22	; 0x2d
    3876:	76 a7       	std	Z+46, r23	; 0x2e
    3878:	06 c0       	rjmp	.+12     	; 0x3886 <xTaskGenericNotify+0x8e>
    387a:	82 30       	cpi	r24, 0x02	; 2
    387c:	49 f1       	breq	.+82     	; 0x38d0 <xTaskGenericNotify+0xd8>
    387e:	43 a7       	std	Z+43, r20	; 0x2b
    3880:	54 a7       	std	Z+44, r21	; 0x2c
    3882:	65 a7       	std	Z+45, r22	; 0x2d
    3884:	76 a7       	std	Z+46, r23	; 0x2e
    3886:	81 30       	cpi	r24, 0x01	; 1
    3888:	29 f5       	brne	.+74     	; 0x38d4 <xTaskGenericNotify+0xdc>
    388a:	ef 01       	movw	r28, r30
    388c:	8f 01       	movw	r16, r30
    388e:	0e 5f       	subi	r16, 0xFE	; 254
    3890:	1f 4f       	sbci	r17, 0xFF	; 255
    3892:	c8 01       	movw	r24, r16
    3894:	0e 94 ab 0c 	call	0x1956	; 0x1956 <uxListRemove>
    3898:	8a 8d       	ldd	r24, Y+26	; 0x1a
    389a:	90 91 57 18 	lds	r25, 0x1857	; 0x801857 <uxTopReadyPriority>
    389e:	98 17       	cp	r25, r24
    38a0:	10 f4       	brcc	.+4      	; 0x38a6 <xTaskGenericNotify+0xae>
    38a2:	80 93 57 18 	sts	0x1857, r24	; 0x801857 <uxTopReadyPriority>
    38a6:	2b e0       	ldi	r18, 0x0B	; 11
    38a8:	82 9f       	mul	r24, r18
    38aa:	c0 01       	movw	r24, r0
    38ac:	11 24       	eor	r1, r1
    38ae:	b8 01       	movw	r22, r16
    38b0:	87 56       	subi	r24, 0x67	; 103
    38b2:	97 4e       	sbci	r25, 0xE7	; 231
    38b4:	0e 94 4d 0c 	call	0x189a	; 0x189a <vListInsertEnd>
    38b8:	e0 91 c5 18 	lds	r30, 0x18C5	; 0x8018c5 <pxCurrentTCB>
    38bc:	f0 91 c6 18 	lds	r31, 0x18C6	; 0x8018c6 <pxCurrentTCB+0x1>
    38c0:	9a 8d       	ldd	r25, Y+26	; 0x1a
    38c2:	82 8d       	ldd	r24, Z+26	; 0x1a
    38c4:	89 17       	cp	r24, r25
    38c6:	40 f4       	brcc	.+16     	; 0x38d8 <xTaskGenericNotify+0xe0>
    38c8:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <vPortYield>
    38cc:	81 e0       	ldi	r24, 0x01	; 1
    38ce:	05 c0       	rjmp	.+10     	; 0x38da <xTaskGenericNotify+0xe2>
    38d0:	80 e0       	ldi	r24, 0x00	; 0
    38d2:	03 c0       	rjmp	.+6      	; 0x38da <xTaskGenericNotify+0xe2>
    38d4:	81 e0       	ldi	r24, 0x01	; 1
    38d6:	01 c0       	rjmp	.+2      	; 0x38da <xTaskGenericNotify+0xe2>
    38d8:	81 e0       	ldi	r24, 0x01	; 1
    38da:	0f 90       	pop	r0
    38dc:	0f be       	out	0x3f, r0	; 63
    38de:	df 91       	pop	r29
    38e0:	cf 91       	pop	r28
    38e2:	1f 91       	pop	r17
    38e4:	0f 91       	pop	r16
    38e6:	08 95       	ret

000038e8 <xTaskGenericNotifyFromISR>:
    38e8:	ef 92       	push	r14
    38ea:	ff 92       	push	r15
    38ec:	0f 93       	push	r16
    38ee:	1f 93       	push	r17
    38f0:	cf 93       	push	r28
    38f2:	df 93       	push	r29
    38f4:	fc 01       	movw	r30, r24
    38f6:	01 15       	cp	r16, r1
    38f8:	11 05       	cpc	r17, r1
    38fa:	49 f0       	breq	.+18     	; 0x390e <xTaskGenericNotifyFromISR+0x26>
    38fc:	83 a5       	ldd	r24, Z+43	; 0x2b
    38fe:	94 a5       	ldd	r25, Z+44	; 0x2c
    3900:	a5 a5       	ldd	r26, Z+45	; 0x2d
    3902:	b6 a5       	ldd	r27, Z+46	; 0x2e
    3904:	e8 01       	movw	r28, r16
    3906:	88 83       	st	Y, r24
    3908:	99 83       	std	Y+1, r25	; 0x01
    390a:	aa 83       	std	Y+2, r26	; 0x02
    390c:	bb 83       	std	Y+3, r27	; 0x03
    390e:	87 a5       	ldd	r24, Z+47	; 0x2f
    3910:	92 e0       	ldi	r25, 0x02	; 2
    3912:	97 a7       	std	Z+47, r25	; 0x2f
    3914:	22 30       	cpi	r18, 0x02	; 2
    3916:	b1 f0       	breq	.+44     	; 0x3944 <xTaskGenericNotifyFromISR+0x5c>
    3918:	18 f4       	brcc	.+6      	; 0x3920 <xTaskGenericNotifyFromISR+0x38>
    391a:	21 30       	cpi	r18, 0x01	; 1
    391c:	31 f0       	breq	.+12     	; 0x392a <xTaskGenericNotifyFromISR+0x42>
    391e:	2a c0       	rjmp	.+84     	; 0x3974 <xTaskGenericNotifyFromISR+0x8c>
    3920:	23 30       	cpi	r18, 0x03	; 3
    3922:	e9 f0       	breq	.+58     	; 0x395e <xTaskGenericNotifyFromISR+0x76>
    3924:	24 30       	cpi	r18, 0x04	; 4
    3926:	01 f1       	breq	.+64     	; 0x3968 <xTaskGenericNotifyFromISR+0x80>
    3928:	25 c0       	rjmp	.+74     	; 0x3974 <xTaskGenericNotifyFromISR+0x8c>
    392a:	03 a5       	ldd	r16, Z+43	; 0x2b
    392c:	14 a5       	ldd	r17, Z+44	; 0x2c
    392e:	25 a5       	ldd	r18, Z+45	; 0x2d
    3930:	36 a5       	ldd	r19, Z+46	; 0x2e
    3932:	40 2b       	or	r20, r16
    3934:	51 2b       	or	r21, r17
    3936:	62 2b       	or	r22, r18
    3938:	73 2b       	or	r23, r19
    393a:	43 a7       	std	Z+43, r20	; 0x2b
    393c:	54 a7       	std	Z+44, r21	; 0x2c
    393e:	65 a7       	std	Z+45, r22	; 0x2d
    3940:	76 a7       	std	Z+46, r23	; 0x2e
    3942:	18 c0       	rjmp	.+48     	; 0x3974 <xTaskGenericNotifyFromISR+0x8c>
    3944:	43 a5       	ldd	r20, Z+43	; 0x2b
    3946:	54 a5       	ldd	r21, Z+44	; 0x2c
    3948:	65 a5       	ldd	r22, Z+45	; 0x2d
    394a:	76 a5       	ldd	r23, Z+46	; 0x2e
    394c:	4f 5f       	subi	r20, 0xFF	; 255
    394e:	5f 4f       	sbci	r21, 0xFF	; 255
    3950:	6f 4f       	sbci	r22, 0xFF	; 255
    3952:	7f 4f       	sbci	r23, 0xFF	; 255
    3954:	43 a7       	std	Z+43, r20	; 0x2b
    3956:	54 a7       	std	Z+44, r21	; 0x2c
    3958:	65 a7       	std	Z+45, r22	; 0x2d
    395a:	76 a7       	std	Z+46, r23	; 0x2e
    395c:	0b c0       	rjmp	.+22     	; 0x3974 <xTaskGenericNotifyFromISR+0x8c>
    395e:	43 a7       	std	Z+43, r20	; 0x2b
    3960:	54 a7       	std	Z+44, r21	; 0x2c
    3962:	65 a7       	std	Z+45, r22	; 0x2d
    3964:	76 a7       	std	Z+46, r23	; 0x2e
    3966:	06 c0       	rjmp	.+12     	; 0x3974 <xTaskGenericNotifyFromISR+0x8c>
    3968:	82 30       	cpi	r24, 0x02	; 2
    396a:	d9 f1       	breq	.+118    	; 0x39e2 <xTaskGenericNotifyFromISR+0xfa>
    396c:	43 a7       	std	Z+43, r20	; 0x2b
    396e:	54 a7       	std	Z+44, r21	; 0x2c
    3970:	65 a7       	std	Z+45, r22	; 0x2d
    3972:	76 a7       	std	Z+46, r23	; 0x2e
    3974:	81 30       	cpi	r24, 0x01	; 1
    3976:	b9 f5       	brne	.+110    	; 0x39e6 <xTaskGenericNotifyFromISR+0xfe>
    3978:	ef 01       	movw	r28, r30
    397a:	80 91 4b 18 	lds	r24, 0x184B	; 0x80184b <uxSchedulerSuspended>
    397e:	81 11       	cpse	r24, r1
    3980:	17 c0       	rjmp	.+46     	; 0x39b0 <xTaskGenericNotifyFromISR+0xc8>
    3982:	8f 01       	movw	r16, r30
    3984:	0e 5f       	subi	r16, 0xFE	; 254
    3986:	1f 4f       	sbci	r17, 0xFF	; 255
    3988:	c8 01       	movw	r24, r16
    398a:	0e 94 ab 0c 	call	0x1956	; 0x1956 <uxListRemove>
    398e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3990:	90 91 57 18 	lds	r25, 0x1857	; 0x801857 <uxTopReadyPriority>
    3994:	98 17       	cp	r25, r24
    3996:	10 f4       	brcc	.+4      	; 0x399c <xTaskGenericNotifyFromISR+0xb4>
    3998:	80 93 57 18 	sts	0x1857, r24	; 0x801857 <uxTopReadyPriority>
    399c:	eb e0       	ldi	r30, 0x0B	; 11
    399e:	8e 9f       	mul	r24, r30
    39a0:	c0 01       	movw	r24, r0
    39a2:	11 24       	eor	r1, r1
    39a4:	b8 01       	movw	r22, r16
    39a6:	87 56       	subi	r24, 0x67	; 103
    39a8:	97 4e       	sbci	r25, 0xE7	; 231
    39aa:	0e 94 4d 0c 	call	0x189a	; 0x189a <vListInsertEnd>
    39ae:	07 c0       	rjmp	.+14     	; 0x39be <xTaskGenericNotifyFromISR+0xd6>
    39b0:	bf 01       	movw	r22, r30
    39b2:	62 5f       	subi	r22, 0xF2	; 242
    39b4:	7f 4f       	sbci	r23, 0xFF	; 255
    39b6:	84 e7       	ldi	r24, 0x74	; 116
    39b8:	98 e1       	ldi	r25, 0x18	; 24
    39ba:	0e 94 4d 0c 	call	0x189a	; 0x189a <vListInsertEnd>
    39be:	e0 91 c5 18 	lds	r30, 0x18C5	; 0x8018c5 <pxCurrentTCB>
    39c2:	f0 91 c6 18 	lds	r31, 0x18C6	; 0x8018c6 <pxCurrentTCB+0x1>
    39c6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    39c8:	82 8d       	ldd	r24, Z+26	; 0x1a
    39ca:	89 17       	cp	r24, r25
    39cc:	70 f4       	brcc	.+28     	; 0x39ea <xTaskGenericNotifyFromISR+0x102>
    39ce:	e1 14       	cp	r14, r1
    39d0:	f1 04       	cpc	r15, r1
    39d2:	19 f0       	breq	.+6      	; 0x39da <xTaskGenericNotifyFromISR+0xf2>
    39d4:	81 e0       	ldi	r24, 0x01	; 1
    39d6:	e7 01       	movw	r28, r14
    39d8:	88 83       	st	Y, r24
    39da:	81 e0       	ldi	r24, 0x01	; 1
    39dc:	80 93 54 18 	sts	0x1854, r24	; 0x801854 <xYieldPending>
    39e0:	05 c0       	rjmp	.+10     	; 0x39ec <xTaskGenericNotifyFromISR+0x104>
    39e2:	80 e0       	ldi	r24, 0x00	; 0
    39e4:	03 c0       	rjmp	.+6      	; 0x39ec <xTaskGenericNotifyFromISR+0x104>
    39e6:	81 e0       	ldi	r24, 0x01	; 1
    39e8:	01 c0       	rjmp	.+2      	; 0x39ec <xTaskGenericNotifyFromISR+0x104>
    39ea:	81 e0       	ldi	r24, 0x01	; 1
    39ec:	df 91       	pop	r29
    39ee:	cf 91       	pop	r28
    39f0:	1f 91       	pop	r17
    39f2:	0f 91       	pop	r16
    39f4:	ff 90       	pop	r15
    39f6:	ef 90       	pop	r14
    39f8:	08 95       	ret

000039fa <xTaskNotifyStateClear>:
    TCB_t *pxTCB;
    BaseType_t xReturn;

        /* If null is passed in here then it is the calling task that is having
        its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    39fa:	00 97       	sbiw	r24, 0x00	; 0
    39fc:	21 f4       	brne	.+8      	; 0x3a06 <xTaskNotifyStateClear+0xc>
    39fe:	80 91 c5 18 	lds	r24, 0x18C5	; 0x8018c5 <pxCurrentTCB>
    3a02:	90 91 c6 18 	lds	r25, 0x18C6	; 0x8018c6 <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    3a06:	0f b6       	in	r0, 0x3f	; 63
    3a08:	f8 94       	cli
    3a0a:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
    3a0c:	fc 01       	movw	r30, r24
    3a0e:	27 a5       	ldd	r18, Z+47	; 0x2f
    3a10:	22 30       	cpi	r18, 0x02	; 2
    3a12:	19 f4       	brne	.+6      	; 0x3a1a <xTaskNotifyStateClear+0x20>
            {
                pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    3a14:	17 a6       	std	Z+47, r1	; 0x2f
                xReturn = pdPASS;
    3a16:	81 e0       	ldi	r24, 0x01	; 1
    3a18:	01 c0       	rjmp	.+2      	; 0x3a1c <xTaskNotifyStateClear+0x22>
            }
            else
            {
                xReturn = pdFAIL;
    3a1a:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    3a1c:	0f 90       	pop	r0
    3a1e:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    3a20:	08 95       	ret

00003a22 <prvInsertTimerInActiveList>:
    3a22:	cf 92       	push	r12
    3a24:	df 92       	push	r13
    3a26:	ef 92       	push	r14
    3a28:	ff 92       	push	r15
    3a2a:	0f 93       	push	r16
    3a2c:	1f 93       	push	r17
    3a2e:	fc 01       	movw	r30, r24
    3a30:	42 83       	std	Z+2, r20	; 0x02
    3a32:	53 83       	std	Z+3, r21	; 0x03
    3a34:	64 83       	std	Z+4, r22	; 0x04
    3a36:	75 83       	std	Z+5, r23	; 0x05
    3a38:	93 87       	std	Z+11, r25	; 0x0b
    3a3a:	82 87       	std	Z+10, r24	; 0x0a
    3a3c:	04 17       	cp	r16, r20
    3a3e:	15 07       	cpc	r17, r21
    3a40:	26 07       	cpc	r18, r22
    3a42:	37 07       	cpc	r19, r23
    3a44:	c0 f0       	brcs	.+48     	; 0x3a76 <prvInsertTimerInActiveList+0x54>
    3a46:	0c 19       	sub	r16, r12
    3a48:	1d 09       	sbc	r17, r13
    3a4a:	2e 09       	sbc	r18, r14
    3a4c:	3f 09       	sbc	r19, r15
    3a4e:	86 85       	ldd	r24, Z+14	; 0x0e
    3a50:	97 85       	ldd	r25, Z+15	; 0x0f
    3a52:	a0 89       	ldd	r26, Z+16	; 0x10
    3a54:	b1 89       	ldd	r27, Z+17	; 0x11
    3a56:	08 17       	cp	r16, r24
    3a58:	19 07       	cpc	r17, r25
    3a5a:	2a 07       	cpc	r18, r26
    3a5c:	3b 07       	cpc	r19, r27
    3a5e:	00 f5       	brcc	.+64     	; 0x3aa0 <prvInsertTimerInActiveList+0x7e>
    3a60:	bf 01       	movw	r22, r30
    3a62:	6e 5f       	subi	r22, 0xFE	; 254
    3a64:	7f 4f       	sbci	r23, 0xFF	; 255
    3a66:	80 91 cf 18 	lds	r24, 0x18CF	; 0x8018cf <pxOverflowTimerList>
    3a6a:	90 91 d0 18 	lds	r25, 0x18D0	; 0x8018d0 <pxOverflowTimerList+0x1>
    3a6e:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <vListInsert>
    3a72:	80 e0       	ldi	r24, 0x00	; 0
    3a74:	18 c0       	rjmp	.+48     	; 0x3aa6 <prvInsertTimerInActiveList+0x84>
    3a76:	0c 15       	cp	r16, r12
    3a78:	1d 05       	cpc	r17, r13
    3a7a:	2e 05       	cpc	r18, r14
    3a7c:	3f 05       	cpc	r19, r15
    3a7e:	28 f4       	brcc	.+10     	; 0x3a8a <prvInsertTimerInActiveList+0x68>
    3a80:	4c 15       	cp	r20, r12
    3a82:	5d 05       	cpc	r21, r13
    3a84:	6e 05       	cpc	r22, r14
    3a86:	7f 05       	cpc	r23, r15
    3a88:	68 f4       	brcc	.+26     	; 0x3aa4 <prvInsertTimerInActiveList+0x82>
    3a8a:	bf 01       	movw	r22, r30
    3a8c:	6e 5f       	subi	r22, 0xFE	; 254
    3a8e:	7f 4f       	sbci	r23, 0xFF	; 255
    3a90:	80 91 d1 18 	lds	r24, 0x18D1	; 0x8018d1 <pxCurrentTimerList>
    3a94:	90 91 d2 18 	lds	r25, 0x18D2	; 0x8018d2 <pxCurrentTimerList+0x1>
    3a98:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <vListInsert>
    3a9c:	80 e0       	ldi	r24, 0x00	; 0
    3a9e:	03 c0       	rjmp	.+6      	; 0x3aa6 <prvInsertTimerInActiveList+0x84>
    3aa0:	81 e0       	ldi	r24, 0x01	; 1
    3aa2:	01 c0       	rjmp	.+2      	; 0x3aa6 <prvInsertTimerInActiveList+0x84>
    3aa4:	81 e0       	ldi	r24, 0x01	; 1
    3aa6:	1f 91       	pop	r17
    3aa8:	0f 91       	pop	r16
    3aaa:	ff 90       	pop	r15
    3aac:	ef 90       	pop	r14
    3aae:	df 90       	pop	r13
    3ab0:	cf 90       	pop	r12
    3ab2:	08 95       	ret

00003ab4 <prvCheckForValidListAndQueue>:
    3ab4:	0f b6       	in	r0, 0x3f	; 63
    3ab6:	f8 94       	cli
    3ab8:	0f 92       	push	r0
    3aba:	80 91 cd 18 	lds	r24, 0x18CD	; 0x8018cd <xTimerQueue>
    3abe:	90 91 ce 18 	lds	r25, 0x18CE	; 0x8018ce <xTimerQueue+0x1>
    3ac2:	89 2b       	or	r24, r25
    3ac4:	e9 f4       	brne	.+58     	; 0x3b00 <prvCheckForValidListAndQueue+0x4c>
    3ac6:	8e ed       	ldi	r24, 0xDE	; 222
    3ac8:	98 e1       	ldi	r25, 0x18	; 24
    3aca:	0e 94 38 0c 	call	0x1870	; 0x1870 <vListInitialise>
    3ace:	83 ed       	ldi	r24, 0xD3	; 211
    3ad0:	98 e1       	ldi	r25, 0x18	; 24
    3ad2:	0e 94 38 0c 	call	0x1870	; 0x1870 <vListInitialise>
    3ad6:	8e ed       	ldi	r24, 0xDE	; 222
    3ad8:	98 e1       	ldi	r25, 0x18	; 24
    3ada:	90 93 d2 18 	sts	0x18D2, r25	; 0x8018d2 <pxCurrentTimerList+0x1>
    3ade:	80 93 d1 18 	sts	0x18D1, r24	; 0x8018d1 <pxCurrentTimerList>
    3ae2:	83 ed       	ldi	r24, 0xD3	; 211
    3ae4:	98 e1       	ldi	r25, 0x18	; 24
    3ae6:	90 93 d0 18 	sts	0x18D0, r25	; 0x8018d0 <pxOverflowTimerList+0x1>
    3aea:	80 93 cf 18 	sts	0x18CF, r24	; 0x8018cf <pxOverflowTimerList>
    3aee:	40 e0       	ldi	r20, 0x00	; 0
    3af0:	67 e0       	ldi	r22, 0x07	; 7
    3af2:	8a e0       	ldi	r24, 0x0A	; 10
    3af4:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <xQueueGenericCreate>
    3af8:	90 93 ce 18 	sts	0x18CE, r25	; 0x8018ce <xTimerQueue+0x1>
    3afc:	80 93 cd 18 	sts	0x18CD, r24	; 0x8018cd <xTimerQueue>
    3b00:	0f 90       	pop	r0
    3b02:	0f be       	out	0x3f, r0	; 63
    3b04:	08 95       	ret

00003b06 <xTimerCreateTimerTask>:
    3b06:	ef 92       	push	r14
    3b08:	ff 92       	push	r15
    3b0a:	0f 93       	push	r16
    3b0c:	d3 df       	rcall	.-90     	; 0x3ab4 <prvCheckForValidListAndQueue>
    3b0e:	80 91 cd 18 	lds	r24, 0x18CD	; 0x8018cd <xTimerQueue>
    3b12:	90 91 ce 18 	lds	r25, 0x18CE	; 0x8018ce <xTimerQueue+0x1>
    3b16:	89 2b       	or	r24, r25
    3b18:	91 f0       	breq	.+36     	; 0x3b3e <xTimerCreateTimerTask+0x38>
    3b1a:	0f 2e       	mov	r0, r31
    3b1c:	fb ec       	ldi	r31, 0xCB	; 203
    3b1e:	ef 2e       	mov	r14, r31
    3b20:	f8 e1       	ldi	r31, 0x18	; 24
    3b22:	ff 2e       	mov	r15, r31
    3b24:	f0 2d       	mov	r31, r0
    3b26:	03 e0       	ldi	r16, 0x03	; 3
    3b28:	20 e0       	ldi	r18, 0x00	; 0
    3b2a:	30 e0       	ldi	r19, 0x00	; 0
    3b2c:	45 e5       	ldi	r20, 0x55	; 85
    3b2e:	50 e0       	ldi	r21, 0x00	; 0
    3b30:	61 ed       	ldi	r22, 0xD1	; 209
    3b32:	74 e0       	ldi	r23, 0x04	; 4
    3b34:	87 e0       	ldi	r24, 0x07	; 7
    3b36:	91 e0       	ldi	r25, 0x01	; 1
    3b38:	0e 94 82 15 	call	0x2b04	; 0x2b04 <xTaskCreate>
    3b3c:	01 c0       	rjmp	.+2      	; 0x3b40 <xTimerCreateTimerTask+0x3a>
    3b3e:	80 e0       	ldi	r24, 0x00	; 0
    3b40:	0f 91       	pop	r16
    3b42:	ff 90       	pop	r15
    3b44:	ef 90       	pop	r14
    3b46:	08 95       	ret

00003b48 <xTimerGenericCommand>:
    }
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    3b48:	8f 92       	push	r8
    3b4a:	9f 92       	push	r9
    3b4c:	af 92       	push	r10
    3b4e:	bf 92       	push	r11
    3b50:	cf 92       	push	r12
    3b52:	df 92       	push	r13
    3b54:	ef 92       	push	r14
    3b56:	ff 92       	push	r15
    3b58:	0f 93       	push	r16
    3b5a:	1f 93       	push	r17
    3b5c:	cf 93       	push	r28
    3b5e:	df 93       	push	r29
    3b60:	cd b7       	in	r28, 0x3d	; 61
    3b62:	de b7       	in	r29, 0x3e	; 62
    3b64:	27 97       	sbiw	r28, 0x07	; 7
    3b66:	0f b6       	in	r0, 0x3f	; 63
    3b68:	f8 94       	cli
    3b6a:	de bf       	out	0x3e, r29	; 62
    3b6c:	0f be       	out	0x3f, r0	; 63
    3b6e:	cd bf       	out	0x3d, r28	; 61

    configASSERT( xTimer );

    /* Send a message to the timer service task to perform a particular action
    on a particular timer definition. */
    if( xTimerQueue != NULL )
    3b70:	e0 91 cd 18 	lds	r30, 0x18CD	; 0x8018cd <xTimerQueue>
    3b74:	f0 91 ce 18 	lds	r31, 0x18CE	; 0x8018ce <xTimerQueue+0x1>
    3b78:	30 97       	sbiw	r30, 0x00	; 0
    3b7a:	81 f1       	breq	.+96     	; 0x3bdc <xTimerGenericCommand+0x94>
    {
        /* Send a command to the timer service task to start the xTimer timer. */
        xMessage.xMessageID = xCommandID;
    3b7c:	69 83       	std	Y+1, r22	; 0x01
        xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    3b7e:	2a 83       	std	Y+2, r18	; 0x02
    3b80:	3b 83       	std	Y+3, r19	; 0x03
    3b82:	4c 83       	std	Y+4, r20	; 0x04
    3b84:	5d 83       	std	Y+5, r21	; 0x05
        xMessage.u.xTimerParameters.pxTimer = xTimer;
    3b86:	9f 83       	std	Y+7, r25	; 0x07
    3b88:	8e 83       	std	Y+6, r24	; 0x06

        if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    3b8a:	66 30       	cpi	r22, 0x06	; 6
    3b8c:	f4 f4       	brge	.+60     	; 0x3bca <xTimerGenericCommand+0x82>
        {
            if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    3b8e:	68 dc       	rcall	.-1840   	; 0x3460 <xTaskGetSchedulerState>
    3b90:	82 30       	cpi	r24, 0x02	; 2
    3b92:	69 f4       	brne	.+26     	; 0x3bae <xTimerGenericCommand+0x66>
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    3b94:	00 e0       	ldi	r16, 0x00	; 0
    3b96:	a7 01       	movw	r20, r14
    3b98:	96 01       	movw	r18, r12
    3b9a:	be 01       	movw	r22, r28
    3b9c:	6f 5f       	subi	r22, 0xFF	; 255
    3b9e:	7f 4f       	sbci	r23, 0xFF	; 255
    3ba0:	80 91 cd 18 	lds	r24, 0x18CD	; 0x8018cd <xTimerQueue>
    3ba4:	90 91 ce 18 	lds	r25, 0x18CE	; 0x8018ce <xTimerQueue+0x1>
    3ba8:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <xQueueGenericSend>
    3bac:	18 c0       	rjmp	.+48     	; 0x3bde <xTimerGenericCommand+0x96>
            }
            else
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    3bae:	00 e0       	ldi	r16, 0x00	; 0
    3bb0:	20 e0       	ldi	r18, 0x00	; 0
    3bb2:	30 e0       	ldi	r19, 0x00	; 0
    3bb4:	a9 01       	movw	r20, r18
    3bb6:	be 01       	movw	r22, r28
    3bb8:	6f 5f       	subi	r22, 0xFF	; 255
    3bba:	7f 4f       	sbci	r23, 0xFF	; 255
    3bbc:	80 91 cd 18 	lds	r24, 0x18CD	; 0x8018cd <xTimerQueue>
    3bc0:	90 91 ce 18 	lds	r25, 0x18CE	; 0x8018ce <xTimerQueue+0x1>
    3bc4:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <xQueueGenericSend>
    3bc8:	0a c0       	rjmp	.+20     	; 0x3bde <xTimerGenericCommand+0x96>
            }
        }
        else
        {
            xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    3bca:	20 e0       	ldi	r18, 0x00	; 0
    3bcc:	a8 01       	movw	r20, r16
    3bce:	be 01       	movw	r22, r28
    3bd0:	6f 5f       	subi	r22, 0xFF	; 255
    3bd2:	7f 4f       	sbci	r23, 0xFF	; 255
    3bd4:	cf 01       	movw	r24, r30
    3bd6:	0e 94 45 10 	call	0x208a	; 0x208a <xQueueGenericSendFromISR>
    3bda:	01 c0       	rjmp	.+2      	; 0x3bde <xTimerGenericCommand+0x96>
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
    3bdc:	80 e0       	ldi	r24, 0x00	; 0
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xReturn;
}
    3bde:	27 96       	adiw	r28, 0x07	; 7
    3be0:	0f b6       	in	r0, 0x3f	; 63
    3be2:	f8 94       	cli
    3be4:	de bf       	out	0x3e, r29	; 62
    3be6:	0f be       	out	0x3f, r0	; 63
    3be8:	cd bf       	out	0x3d, r28	; 61
    3bea:	df 91       	pop	r29
    3bec:	cf 91       	pop	r28
    3bee:	1f 91       	pop	r17
    3bf0:	0f 91       	pop	r16
    3bf2:	ff 90       	pop	r15
    3bf4:	ef 90       	pop	r14
    3bf6:	df 90       	pop	r13
    3bf8:	cf 90       	pop	r12
    3bfa:	bf 90       	pop	r11
    3bfc:	af 90       	pop	r10
    3bfe:	9f 90       	pop	r9
    3c00:	8f 90       	pop	r8
    3c02:	08 95       	ret

00003c04 <prvSampleTimeNow>:
    return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    3c04:	2f 92       	push	r2
    3c06:	3f 92       	push	r3
    3c08:	4f 92       	push	r4
    3c0a:	5f 92       	push	r5
    3c0c:	6f 92       	push	r6
    3c0e:	7f 92       	push	r7
    3c10:	8f 92       	push	r8
    3c12:	9f 92       	push	r9
    3c14:	af 92       	push	r10
    3c16:	bf 92       	push	r11
    3c18:	cf 92       	push	r12
    3c1a:	df 92       	push	r13
    3c1c:	ef 92       	push	r14
    3c1e:	ff 92       	push	r15
    3c20:	0f 93       	push	r16
    3c22:	1f 93       	push	r17
    3c24:	cf 93       	push	r28
    3c26:	df 93       	push	r29
    3c28:	1c 01       	movw	r2, r24
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

    xTimeNow = xTaskGetTickCount();
    3c2a:	cd d8       	rcall	.-3686   	; 0x2dc6 <xTaskGetTickCount>
    3c2c:	2b 01       	movw	r4, r22
    3c2e:	3c 01       	movw	r6, r24

    if( xTimeNow < xLastTime )
    3c30:	80 91 c7 18 	lds	r24, 0x18C7	; 0x8018c7 <xLastTime.2432>
    3c34:	90 91 c8 18 	lds	r25, 0x18C8	; 0x8018c8 <xLastTime.2432+0x1>
    3c38:	a0 91 c9 18 	lds	r26, 0x18C9	; 0x8018c9 <xLastTime.2432+0x2>
    3c3c:	b0 91 ca 18 	lds	r27, 0x18CA	; 0x8018ca <xLastTime.2432+0x3>
    3c40:	48 16       	cp	r4, r24
    3c42:	59 06       	cpc	r5, r25
    3c44:	6a 06       	cpc	r6, r26
    3c46:	7b 06       	cpc	r7, r27
    3c48:	08 f0       	brcs	.+2      	; 0x3c4c <prvSampleTimeNow+0x48>
    3c4a:	53 c0       	rjmp	.+166    	; 0x3cf2 <prvSampleTimeNow+0xee>
    3c4c:	3b c0       	rjmp	.+118    	; 0x3cc4 <prvSampleTimeNow+0xc0>
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    {
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    3c4e:	07 80       	ldd	r0, Z+7	; 0x07
    3c50:	f0 85       	ldd	r31, Z+8	; 0x08
    3c52:	e0 2d       	mov	r30, r0
    3c54:	80 80       	ld	r8, Z
    3c56:	91 80       	ldd	r9, Z+1	; 0x01
    3c58:	a2 80       	ldd	r10, Z+2	; 0x02
    3c5a:	b3 80       	ldd	r11, Z+3	; 0x03

        /* Remove the timer from the list. */
        pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    3c5c:	c0 85       	ldd	r28, Z+8	; 0x08
    3c5e:	d1 85       	ldd	r29, Z+9	; 0x09
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3c60:	8e 01       	movw	r16, r28
    3c62:	0e 5f       	subi	r16, 0xFE	; 254
    3c64:	1f 4f       	sbci	r17, 0xFF	; 255
    3c66:	c8 01       	movw	r24, r16
    3c68:	0e 94 ab 0c 	call	0x1956	; 0x1956 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* Execute its callback, then send a command to restart the timer if
        it is an auto-reload timer.  It cannot be restarted here as the lists
        have not yet been switched. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3c6c:	ec 89       	ldd	r30, Y+20	; 0x14
    3c6e:	fd 89       	ldd	r31, Y+21	; 0x15
    3c70:	ce 01       	movw	r24, r28
    3c72:	19 95       	eicall

        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    3c74:	8f 89       	ldd	r24, Y+23	; 0x17
    3c76:	82 ff       	sbrs	r24, 2
    3c78:	25 c0       	rjmp	.+74     	; 0x3cc4 <prvSampleTimeNow+0xc0>
            the timer going into the same timer list then it has already expired
            and the timer should be re-inserted into the current list so it is
            processed again within this loop.  Otherwise a command should be sent
            to restart the timer to ensure it is only inserted into a list after
            the lists have been swapped. */
            xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    3c7a:	8e 85       	ldd	r24, Y+14	; 0x0e
    3c7c:	9f 85       	ldd	r25, Y+15	; 0x0f
    3c7e:	a8 89       	ldd	r26, Y+16	; 0x10
    3c80:	b9 89       	ldd	r27, Y+17	; 0x11
    3c82:	88 0d       	add	r24, r8
    3c84:	99 1d       	adc	r25, r9
    3c86:	aa 1d       	adc	r26, r10
    3c88:	bb 1d       	adc	r27, r11
            if( xReloadTime > xNextExpireTime )
    3c8a:	88 16       	cp	r8, r24
    3c8c:	99 06       	cpc	r9, r25
    3c8e:	aa 06       	cpc	r10, r26
    3c90:	bb 06       	cpc	r11, r27
    3c92:	70 f4       	brcc	.+28     	; 0x3cb0 <prvSampleTimeNow+0xac>
            {
                listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    3c94:	8a 83       	std	Y+2, r24	; 0x02
    3c96:	9b 83       	std	Y+3, r25	; 0x03
    3c98:	ac 83       	std	Y+4, r26	; 0x04
    3c9a:	bd 83       	std	Y+5, r27	; 0x05
                listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    3c9c:	db 87       	std	Y+11, r29	; 0x0b
    3c9e:	ca 87       	std	Y+10, r28	; 0x0a
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    3ca0:	b8 01       	movw	r22, r16
    3ca2:	80 91 d1 18 	lds	r24, 0x18D1	; 0x8018d1 <pxCurrentTimerList>
    3ca6:	90 91 d2 18 	lds	r25, 0x18D2	; 0x8018d2 <pxCurrentTimerList+0x1>
    3caa:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <vListInsert>
    3cae:	0a c0       	rjmp	.+20     	; 0x3cc4 <prvSampleTimeNow+0xc0>
            }
            else
            {
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    3cb0:	c1 2c       	mov	r12, r1
    3cb2:	d1 2c       	mov	r13, r1
    3cb4:	76 01       	movw	r14, r12
    3cb6:	00 e0       	ldi	r16, 0x00	; 0
    3cb8:	10 e0       	ldi	r17, 0x00	; 0
    3cba:	a5 01       	movw	r20, r10
    3cbc:	94 01       	movw	r18, r8
    3cbe:	60 e0       	ldi	r22, 0x00	; 0
    3cc0:	ce 01       	movw	r24, r28
    3cc2:	42 df       	rcall	.-380    	; 0x3b48 <xTimerGenericCommand>

    /* The tick count has overflowed.  The timer lists must be switched.
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    3cc4:	e0 91 d1 18 	lds	r30, 0x18D1	; 0x8018d1 <pxCurrentTimerList>
    3cc8:	f0 91 d2 18 	lds	r31, 0x18D2	; 0x8018d2 <pxCurrentTimerList+0x1>
    3ccc:	80 81       	ld	r24, Z
    3cce:	81 11       	cpse	r24, r1
    3cd0:	be cf       	rjmp	.-132    	; 0x3c4e <prvSampleTimeNow+0x4a>
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxTemp = pxCurrentTimerList;
    pxCurrentTimerList = pxOverflowTimerList;
    3cd2:	80 91 cf 18 	lds	r24, 0x18CF	; 0x8018cf <pxOverflowTimerList>
    3cd6:	90 91 d0 18 	lds	r25, 0x18D0	; 0x8018d0 <pxOverflowTimerList+0x1>
    3cda:	90 93 d2 18 	sts	0x18D2, r25	; 0x8018d2 <pxCurrentTimerList+0x1>
    3cde:	80 93 d1 18 	sts	0x18D1, r24	; 0x8018d1 <pxCurrentTimerList>
    pxOverflowTimerList = pxTemp;
    3ce2:	f0 93 d0 18 	sts	0x18D0, r31	; 0x8018d0 <pxOverflowTimerList+0x1>
    3ce6:	e0 93 cf 18 	sts	0x18CF, r30	; 0x8018cf <pxOverflowTimerList>
    xTimeNow = xTaskGetTickCount();

    if( xTimeNow < xLastTime )
    {
        prvSwitchTimerLists();
        *pxTimerListsWereSwitched = pdTRUE;
    3cea:	81 e0       	ldi	r24, 0x01	; 1
    3cec:	f1 01       	movw	r30, r2
    3cee:	80 83       	st	Z, r24
    3cf0:	02 c0       	rjmp	.+4      	; 0x3cf6 <prvSampleTimeNow+0xf2>
    }
    else
    {
        *pxTimerListsWereSwitched = pdFALSE;
    3cf2:	f1 01       	movw	r30, r2
    3cf4:	10 82       	st	Z, r1
    }

    xLastTime = xTimeNow;
    3cf6:	40 92 c7 18 	sts	0x18C7, r4	; 0x8018c7 <xLastTime.2432>
    3cfa:	50 92 c8 18 	sts	0x18C8, r5	; 0x8018c8 <xLastTime.2432+0x1>
    3cfe:	60 92 c9 18 	sts	0x18C9, r6	; 0x8018c9 <xLastTime.2432+0x2>
    3d02:	70 92 ca 18 	sts	0x18CA, r7	; 0x8018ca <xLastTime.2432+0x3>

    return xTimeNow;
}
    3d06:	c3 01       	movw	r24, r6
    3d08:	b2 01       	movw	r22, r4
    3d0a:	df 91       	pop	r29
    3d0c:	cf 91       	pop	r28
    3d0e:	1f 91       	pop	r17
    3d10:	0f 91       	pop	r16
    3d12:	ff 90       	pop	r15
    3d14:	ef 90       	pop	r14
    3d16:	df 90       	pop	r13
    3d18:	cf 90       	pop	r12
    3d1a:	bf 90       	pop	r11
    3d1c:	af 90       	pop	r10
    3d1e:	9f 90       	pop	r9
    3d20:	8f 90       	pop	r8
    3d22:	7f 90       	pop	r7
    3d24:	6f 90       	pop	r6
    3d26:	5f 90       	pop	r5
    3d28:	4f 90       	pop	r4
    3d2a:	3f 90       	pop	r3
    3d2c:	2f 90       	pop	r2
    3d2e:	08 95       	ret

00003d30 <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    3d30:	08 95       	ret

00003d32 <vApplicationMallocFailedHook>:
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    3d32:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    3d34:	2f 9a       	sbi	0x05, 7	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3d36:	2f ef       	ldi	r18, 0xFF	; 255
    3d38:	80 e7       	ldi	r24, 0x70	; 112
    3d3a:	92 e0       	ldi	r25, 0x02	; 2
    3d3c:	21 50       	subi	r18, 0x01	; 1
    3d3e:	80 40       	sbci	r24, 0x00	; 0
    3d40:	90 40       	sbci	r25, 0x00	; 0
    3d42:	e1 f7       	brne	.-8      	; 0x3d3c <vApplicationMallocFailedHook+0xa>
    3d44:	00 c0       	rjmp	.+0      	; 0x3d46 <vApplicationMallocFailedHook+0x14>
    3d46:	00 00       	nop
    for(;;)
    {
        _delay_ms(50);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED fast blink.
    3d48:	1f 9a       	sbi	0x03, 7	; 3
    3d4a:	f5 cf       	rjmp	.-22     	; 0x3d36 <vApplicationMallocFailedHook+0x4>

00003d4c <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook( TaskHandle_t xTask, portCHAR *pcTaskName ) __attribute__((weak));

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)), portCHAR *pcTaskName __attribute__((unused))  )
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    3d4c:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    3d4e:	2f 9a       	sbi	0x05, 7	; 5
    3d50:	2f ef       	ldi	r18, 0xFF	; 255
    3d52:	87 ea       	ldi	r24, 0xA7	; 167
    3d54:	91 e6       	ldi	r25, 0x61	; 97
    3d56:	21 50       	subi	r18, 0x01	; 1
    3d58:	80 40       	sbci	r24, 0x00	; 0
    3d5a:	90 40       	sbci	r25, 0x00	; 0
    3d5c:	e1 f7       	brne	.-8      	; 0x3d56 <vApplicationStackOverflowHook+0xa>
    3d5e:	00 c0       	rjmp	.+0      	; 0x3d60 <vApplicationStackOverflowHook+0x14>
    3d60:	00 00       	nop
    for(;;)
    {
        _delay_ms(2000);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED slow blink.
    3d62:	1f 9a       	sbi	0x03, 7	; 3
    3d64:	f5 cf       	rjmp	.-22     	; 0x3d50 <vApplicationStackOverflowHook+0x4>

00003d66 <create_tasks_and_semaphores>:
// Prototype for LoRaWAN handler
void lora_handler_create(UBaseType_t lora_handler_task_priority);

/*-----------------------------------------------------------*/
void create_tasks_and_semaphores(void)
{
    3d66:	8f 92       	push	r8
    3d68:	9f 92       	push	r9
    3d6a:	af 92       	push	r10
    3d6c:	bf 92       	push	r11
    3d6e:	cf 92       	push	r12
    3d70:	df 92       	push	r13
    3d72:	ef 92       	push	r14
    3d74:	ff 92       	push	r15
    3d76:	0f 93       	push	r16
    3d78:	1f 93       	push	r17
    3d7a:	cf 93       	push	r28
    3d7c:	df 93       	push	r29
	//xMessageBuffer = xMessageBufferCreate(100);
	//_semaphore = xSemaphoreCreateMutex();
	
	//_downlinkMessagebuffer = xMessageBufferCreate(sizeof(lora_payload_t)*2);
	
	configuration_create();
    3d7e:	0e 94 43 03 	call	0x686	; 0x686 <configuration_create>
	
	
	
	humAndTempReader_t humidityAndTemperature = humAndTempReader_create(TASK_HUMIDITY_SENSOR_PRIORITY, HUMIDITY_TASK_STACK, 
    3d82:	e0 90 49 1a 	lds	r14, 0x1A49	; 0x801a49 <readyEventGroup>
    3d86:	f0 90 4a 1a 	lds	r15, 0x1A4A	; 0x801a4a <readyEventGroup+0x1>
    3d8a:	40 91 63 1a 	lds	r20, 0x1A63	; 0x801a63 <startMeasureEventGroup>
    3d8e:	50 91 64 1a 	lds	r21, 0x1A64	; 0x801a64 <startMeasureEventGroup+0x1>
    3d92:	a1 2c       	mov	r10, r1
    3d94:	b1 2c       	mov	r11, r1
    3d96:	65 01       	movw	r12, r10
    3d98:	68 94       	set
    3d9a:	a4 f8       	bld	r10, 4
    3d9c:	01 e0       	ldi	r16, 0x01	; 1
    3d9e:	10 e0       	ldi	r17, 0x00	; 0
    3da0:	20 e0       	ldi	r18, 0x00	; 0
    3da2:	30 e0       	ldi	r19, 0x00	; 0
    3da4:	60 ec       	ldi	r22, 0xC0	; 192
    3da6:	82 e0       	ldi	r24, 0x02	; 2
    3da8:	0e 94 a8 06 	call	0xd50	; 0xd50 <humAndTempReader_create>
    3dac:	c8 2f       	mov	r28, r24
    3dae:	d9 2f       	mov	r29, r25
	startMeasureEventGroup, BIT_MEASURE_HUMIDITY, readyEventGroup, BIT_DONE_MEASURE_HUMIDITY);
	
	co2reader_t co2reader = co2Reader_create(TASK_CO2_SENSOR_PRIORITY, CO2_TASK_STACK, startMeasureEventGroup, BIT_MEASURE_CO2,
    3db0:	e0 90 49 1a 	lds	r14, 0x1A49	; 0x801a49 <readyEventGroup>
    3db4:	f0 90 4a 1a 	lds	r15, 0x1A4A	; 0x801a4a <readyEventGroup+0x1>
    3db8:	40 91 63 1a 	lds	r20, 0x1A63	; 0x801a63 <startMeasureEventGroup>
    3dbc:	50 91 64 1a 	lds	r21, 0x1A64	; 0x801a64 <startMeasureEventGroup+0x1>
    3dc0:	a1 2c       	mov	r10, r1
    3dc2:	b1 2c       	mov	r11, r1
    3dc4:	65 01       	movw	r12, r10
    3dc6:	68 94       	set
    3dc8:	a5 f8       	bld	r10, 5
    3dca:	08 e0       	ldi	r16, 0x08	; 8
    3dcc:	10 e0       	ldi	r17, 0x00	; 0
    3dce:	20 e0       	ldi	r18, 0x00	; 0
    3dd0:	30 e0       	ldi	r19, 0x00	; 0
    3dd2:	60 ec       	ldi	r22, 0xC0	; 192
    3dd4:	82 e0       	ldi	r24, 0x02	; 2
    3dd6:	0e 94 86 02 	call	0x50c	; 0x50c <co2Reader_create>
    3dda:	4c 01       	movw	r8, r24
	
	//co2reader_t co2reader = NULL;
	
	
	
	soundReader_t soundReader = soundReader_create(TASK_SOUND_SENSOR_PRIORITY, SOUND_TASK_STACK, startMeasureEventGroup, BIT_MEASURE_SOUND,
    3ddc:	e0 90 49 1a 	lds	r14, 0x1A49	; 0x801a49 <readyEventGroup>
    3de0:	f0 90 4a 1a 	lds	r15, 0x1A4A	; 0x801a4a <readyEventGroup+0x1>
    3de4:	40 91 63 1a 	lds	r20, 0x1A63	; 0x801a63 <startMeasureEventGroup>
    3de8:	50 91 64 1a 	lds	r21, 0x1A64	; 0x801a64 <startMeasureEventGroup+0x1>
    3dec:	a1 2c       	mov	r10, r1
    3dee:	b1 2c       	mov	r11, r1
    3df0:	65 01       	movw	r12, r10
    3df2:	68 94       	set
    3df4:	a6 f8       	bld	r10, 6
    3df6:	04 e0       	ldi	r16, 0x04	; 4
    3df8:	10 e0       	ldi	r17, 0x00	; 0
    3dfa:	20 e0       	ldi	r18, 0x00	; 0
    3dfc:	30 e0       	ldi	r19, 0x00	; 0
    3dfe:	60 ec       	ldi	r22, 0xC0	; 192
    3e00:	82 e0       	ldi	r24, 0x02	; 2
    3e02:	0e 94 88 07 	call	0xf10	; 0xf10 <soundReader_create>
    3e06:	18 2f       	mov	r17, r24
    3e08:	09 2f       	mov	r16, r25
	readyEventGroup, BIT_DONE_MEASURE_SOUND);	
	//soundReader_t soundReader = NULL;
	
	servo_initialise();
    3e0a:	0e 94 7b 07 	call	0xef6	; 0xef6 <servo_initialise>
	
	device_create(TASK_DEVICE_PRIORITY, DEVICE_TASK_STACK, startMeasureEventGroup, ALL_BIT_MEASURE,
    3e0e:	e0 90 49 1a 	lds	r14, 0x1A49	; 0x801a49 <readyEventGroup>
    3e12:	f0 90 4a 1a 	lds	r15, 0x1A4A	; 0x801a4a <readyEventGroup+0x1>
    3e16:	40 91 63 1a 	lds	r20, 0x1A63	; 0x801a63 <startMeasureEventGroup>
    3e1a:	50 91 64 1a 	lds	r21, 0x1A64	; 0x801a64 <startMeasureEventGroup+0x1>
    3e1e:	80 91 4c 1a 	lds	r24, 0x1A4C	; 0x801a4c <_controlMutex+0x1>
    3e22:	8f 93       	push	r24
    3e24:	80 91 4b 1a 	lds	r24, 0x1A4B	; 0x801a4b <_controlMutex>
    3e28:	8f 93       	push	r24
    3e2a:	80 91 46 1a 	lds	r24, 0x1A46	; 0x801a46 <xMessageBuffer+0x1>
    3e2e:	8f 93       	push	r24
    3e30:	80 91 45 1a 	lds	r24, 0x1A45	; 0x801a45 <xMessageBuffer>
    3e34:	8f 93       	push	r24
    3e36:	0f 93       	push	r16
    3e38:	1f 93       	push	r17
    3e3a:	df 93       	push	r29
    3e3c:	cf 93       	push	r28
    3e3e:	0f 2e       	mov	r0, r31
    3e40:	f0 e7       	ldi	r31, 0x70	; 112
    3e42:	af 2e       	mov	r10, r31
    3e44:	b1 2c       	mov	r11, r1
    3e46:	c1 2c       	mov	r12, r1
    3e48:	d1 2c       	mov	r13, r1
    3e4a:	f0 2d       	mov	r31, r0
    3e4c:	0d e0       	ldi	r16, 0x0D	; 13
    3e4e:	10 e0       	ldi	r17, 0x00	; 0
    3e50:	20 e0       	ldi	r18, 0x00	; 0
    3e52:	30 e0       	ldi	r19, 0x00	; 0
    3e54:	60 ec       	ldi	r22, 0xC0	; 192
    3e56:	84 e0       	ldi	r24, 0x04	; 4
    3e58:	0e 94 53 04 	call	0x8a6	; 0x8a6 <device_create>
	readyEventGroup, ALL_BIT_DONE_MEASURE, co2reader, humidityAndTemperature,soundReader, xMessageBuffer,_controlMutex);
	
	lora_UpLinkHandler_create(TASK_LORA_DRIVER_PRIORITY,xMessageBuffer,_controlMutex);
    3e5c:	40 91 4b 1a 	lds	r20, 0x1A4B	; 0x801a4b <_controlMutex>
    3e60:	50 91 4c 1a 	lds	r21, 0x1A4C	; 0x801a4c <_controlMutex+0x1>
    3e64:	60 91 45 1a 	lds	r22, 0x1A45	; 0x801a45 <xMessageBuffer>
    3e68:	70 91 46 1a 	lds	r23, 0x1A46	; 0x801a46 <xMessageBuffer+0x1>
    3e6c:	81 e0       	ldi	r24, 0x01	; 1
    3e6e:	0e 94 44 08 	call	0x1088	; 0x1088 <lora_UpLinkHandler_create>
	lora_DownLinkHandler_create(TASK_LORA_DRIVER_PRIORITYDOWN,_downlinkMessagebuffer);
    3e72:	60 91 47 1a 	lds	r22, 0x1A47	; 0x801a47 <_downlinkMessagebuffer>
    3e76:	70 91 48 1a 	lds	r23, 0x1A48	; 0x801a48 <_downlinkMessagebuffer+0x1>
    3e7a:	81 e0       	ldi	r24, 0x01	; 1
    3e7c:	0e 94 fe 05 	call	0xbfc	; 0xbfc <lora_DownLinkHandler_create>
}
    3e80:	8d b7       	in	r24, 0x3d	; 61
    3e82:	9e b7       	in	r25, 0x3e	; 62
    3e84:	08 96       	adiw	r24, 0x08	; 8
    3e86:	0f b6       	in	r0, 0x3f	; 63
    3e88:	f8 94       	cli
    3e8a:	9e bf       	out	0x3e, r25	; 62
    3e8c:	0f be       	out	0x3f, r0	; 63
    3e8e:	8d bf       	out	0x3d, r24	; 61
    3e90:	df 91       	pop	r29
    3e92:	cf 91       	pop	r28
    3e94:	1f 91       	pop	r17
    3e96:	0f 91       	pop	r16
    3e98:	ff 90       	pop	r15
    3e9a:	ef 90       	pop	r14
    3e9c:	df 90       	pop	r13
    3e9e:	cf 90       	pop	r12
    3ea0:	bf 90       	pop	r11
    3ea2:	af 90       	pop	r10
    3ea4:	9f 90       	pop	r9
    3ea6:	8f 90       	pop	r8
    3ea8:	08 95       	ret

00003eaa <initialiseSystem>:

/*-----------------------------------------------------------*/
void initialiseSystem()
{
	startMeasureEventGroup = xEventGroupCreate();
    3eaa:	0e 94 95 09 	call	0x132a	; 0x132a <xEventGroupCreate>
    3eae:	90 93 64 1a 	sts	0x1A64, r25	; 0x801a64 <startMeasureEventGroup+0x1>
    3eb2:	80 93 63 1a 	sts	0x1A63, r24	; 0x801a63 <startMeasureEventGroup>
	readyEventGroup = xEventGroupCreate();
    3eb6:	0e 94 95 09 	call	0x132a	; 0x132a <xEventGroupCreate>
    3eba:	90 93 4a 1a 	sts	0x1A4A, r25	; 0x801a4a <readyEventGroup+0x1>
    3ebe:	80 93 49 1a 	sts	0x1A49, r24	; 0x801a49 <readyEventGroup>

	xMessageBuffer = xMessageBufferCreate(100);
    3ec2:	41 e0       	ldi	r20, 0x01	; 1
    3ec4:	60 e0       	ldi	r22, 0x00	; 0
    3ec6:	70 e0       	ldi	r23, 0x00	; 0
    3ec8:	84 e6       	ldi	r24, 0x64	; 100
    3eca:	90 e0       	ldi	r25, 0x00	; 0
    3ecc:	0e 94 e7 12 	call	0x25ce	; 0x25ce <xStreamBufferGenericCreate>
    3ed0:	90 93 46 1a 	sts	0x1A46, r25	; 0x801a46 <xMessageBuffer+0x1>
    3ed4:	80 93 45 1a 	sts	0x1A45, r24	; 0x801a45 <xMessageBuffer>
	_controlMutex = xSemaphoreCreateMutex();
    3ed8:	81 e0       	ldi	r24, 0x01	; 1
    3eda:	0e 94 2a 10 	call	0x2054	; 0x2054 <xQueueCreateMutex>
    3ede:	90 93 4c 1a 	sts	0x1A4C, r25	; 0x801a4c <_controlMutex+0x1>
    3ee2:	80 93 4b 1a 	sts	0x1A4B, r24	; 0x801a4b <_controlMutex>
	_downlinkMessagebuffer = xMessageBufferCreate(sizeof(lora_payload_t)*2);
    3ee6:	41 e0       	ldi	r20, 0x01	; 1
    3ee8:	60 e0       	ldi	r22, 0x00	; 0
    3eea:	70 e0       	ldi	r23, 0x00	; 0
    3eec:	8c e2       	ldi	r24, 0x2C	; 44
    3eee:	90 e0       	ldi	r25, 0x00	; 0
    3ef0:	0e 94 e7 12 	call	0x25ce	; 0x25ce <xStreamBufferGenericCreate>
    3ef4:	90 93 48 1a 	sts	0x1A48, r25	; 0x801a48 <_downlinkMessagebuffer+0x1>
    3ef8:	80 93 47 1a 	sts	0x1A47, r24	; 0x801a47 <_downlinkMessagebuffer>
	// Set output ports for leds used in the example
	DDRA |= _BV(DDA0) | _BV(DDA7);
    3efc:	81 b1       	in	r24, 0x01	; 1
    3efe:	81 68       	ori	r24, 0x81	; 129
    3f00:	81 b9       	out	0x01, r24	; 1
	//// Initialise the trace-driver to be used together with the R2R-Network
	//trace_init();
	// Make it possible to use stdio on COM port 0 (USB) on Arduino board - Setting 57600,8,N,1
	stdioCreate(ser_USART0);
    3f02:	80 e0       	ldi	r24, 0x00	; 0
    3f04:	0e 94 8b 2b 	call	0x5716	; 0x5716 <stdioCreate>
	
	
	
	// vvvvvvvvvvvvvvvvv BELOW IS LoRaWAN initialisation vvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
	// Initialise the HAL layer and use 5 for LED driver priority
	hal_create(5);
    3f08:	85 e0       	ldi	r24, 0x05	; 5
    3f0a:	11 d0       	rcall	.+34     	; 0x3f2e <hal_create>
	// Initialise the LoRaWAN driver with a down-link buffer
	
	
	lora_driver_create(LORA_USART, _downlinkMessagebuffer);
    3f0c:	60 91 47 1a 	lds	r22, 0x1A47	; 0x801a47 <_downlinkMessagebuffer>
    3f10:	70 91 48 1a 	lds	r23, 0x1A48	; 0x801a48 <_downlinkMessagebuffer+0x1>
    3f14:	81 e0       	ldi	r24, 0x01	; 1
	// Create LoRaWAN task and start it up with priority 3 
	
	hih8120Create();
    3f16:	c3 d3       	rcall	.+1926   	; 0x469e <lora_driver_create>
    3f18:	69 c0       	rjmp	.+210    	; 0x3fec <hih8120Create>
    3f1a:	08 95       	ret

00003f1c <main>:
	
}
/*-----------------------------------------------------------*/
int main(void)
{
	initialiseSystem(); // Must be done as the very first thing!!
    3f1c:	c6 df       	rcall	.-116    	; 0x3eaa <initialiseSystem>
	create_tasks_and_semaphores();
    3f1e:	23 df       	rcall	.-442    	; 0x3d66 <create_tasks_and_semaphores>
    3f20:	89 ed       	ldi	r24, 0xD9	; 217
	printf("Program Started!!\n");
    3f22:	94 e0       	ldi	r25, 0x04	; 4
    3f24:	0e 94 b4 31 	call	0x6368	; 0x6368 <puts>
    3f28:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <vTaskStartScheduler>
	vTaskStartScheduler(); // Initialise and run the freeRTOS scheduler. Execution should never return from here.
    3f2c:	ff cf       	rjmp	.-2      	; 0x3f2c <main+0x10>

00003f2e <hal_create>:
    3f2e:	e5 e6       	ldi	r30, 0x65	; 101
    3f30:	fa e1       	ldi	r31, 0x1A	; 26
    3f32:	24 ea       	ldi	r18, 0xA4	; 164
    3f34:	36 e2       	ldi	r19, 0x26	; 38
    3f36:	31 83       	std	Z+1, r19	; 0x01
    3f38:	20 83       	st	Z, r18
    3f3a:	27 ea       	ldi	r18, 0xA7	; 167
    3f3c:	36 e2       	ldi	r19, 0x26	; 38
    3f3e:	33 83       	std	Z+3, r19	; 0x03
    3f40:	22 83       	std	Z+2, r18	; 0x02
    3f42:	22 eb       	ldi	r18, 0xB2	; 178
    3f44:	36 e2       	ldi	r19, 0x26	; 38
    3f46:	35 83       	std	Z+5, r19	; 0x05
    3f48:	24 83       	std	Z+4, r18	; 0x04
    3f4a:	26 eb       	ldi	r18, 0xB6	; 182
    3f4c:	36 e2       	ldi	r19, 0x26	; 38
    3f4e:	37 83       	std	Z+7, r19	; 0x07
    3f50:	26 83       	std	Z+6, r18	; 0x06
    3f52:	2c eb       	ldi	r18, 0xBC	; 188
    3f54:	36 e2       	ldi	r19, 0x26	; 38
    3f56:	31 87       	std	Z+9, r19	; 0x09
    3f58:	20 87       	std	Z+8, r18	; 0x08
    3f5a:	28 ec       	ldi	r18, 0xC8	; 200
    3f5c:	36 e2       	ldi	r19, 0x26	; 38
    3f5e:	33 87       	std	Z+11, r19	; 0x0b
    3f60:	22 87       	std	Z+10, r18	; 0x0a
    3f62:	2d ec       	ldi	r18, 0xCD	; 205
    3f64:	36 e2       	ldi	r19, 0x26	; 38
    3f66:	35 87       	std	Z+13, r19	; 0x0d
    3f68:	24 87       	std	Z+12, r18	; 0x0c
    3f6a:	29 ed       	ldi	r18, 0xD9	; 217
    3f6c:	36 e2       	ldi	r19, 0x26	; 38
    3f6e:	37 87       	std	Z+15, r19	; 0x0f
    3f70:	26 87       	std	Z+14, r18	; 0x0e
    3f72:	29 eb       	ldi	r18, 0xB9	; 185
    3f74:	36 e2       	ldi	r19, 0x26	; 38
    3f76:	31 8b       	std	Z+17, r19	; 0x11
    3f78:	20 8b       	std	Z+16, r18	; 0x10
    3f7a:	2e ed       	ldi	r18, 0xDE	; 222
    3f7c:	36 e2       	ldi	r19, 0x26	; 38
    3f7e:	33 8b       	std	Z+19, r19	; 0x13
    3f80:	22 8b       	std	Z+18, r18	; 0x12
    3f82:	2b ee       	ldi	r18, 0xEB	; 235
    3f84:	36 e2       	ldi	r19, 0x26	; 38
    3f86:	35 8b       	std	Z+21, r19	; 0x15
    3f88:	24 8b       	std	Z+20, r18	; 0x14
    3f8a:	68 2f       	mov	r22, r24
    3f8c:	cf 01       	movw	r24, r30
    3f8e:	53 c1       	rjmp	.+678    	; 0x4236 <led_create>
    3f90:	08 95       	ret

00003f92 <_hihTwiCallback>:
    3f92:	65 30       	cpi	r22, 0x05	; 5
    3f94:	f1 f4       	brne	.+60     	; 0x3fd2 <_hihTwiCallback+0x40>
    3f96:	fa 01       	movw	r30, r20
    3f98:	80 81       	ld	r24, Z
    3f9a:	8f 73       	andi	r24, 0x3F	; 63
    3f9c:	90 e0       	ldi	r25, 0x00	; 0
    3f9e:	98 2f       	mov	r25, r24
    3fa0:	88 27       	eor	r24, r24
    3fa2:	21 81       	ldd	r18, Z+1	; 0x01
    3fa4:	82 2b       	or	r24, r18
    3fa6:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <_hum+0x1>
    3faa:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <_hum>
    3fae:	82 81       	ldd	r24, Z+2	; 0x02
    3fb0:	f0 e4       	ldi	r31, 0x40	; 64
    3fb2:	8f 9f       	mul	r24, r31
    3fb4:	c0 01       	movw	r24, r0
    3fb6:	11 24       	eor	r1, r1
    3fb8:	fa 01       	movw	r30, r20
    3fba:	23 81       	ldd	r18, Z+3	; 0x03
    3fbc:	26 95       	lsr	r18
    3fbe:	26 95       	lsr	r18
    3fc0:	82 2b       	or	r24, r18
    3fc2:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <_temp+0x1>
    3fc6:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <_temp>
    3fca:	81 e0       	ldi	r24, 0x01	; 1
    3fcc:	80 93 e9 18 	sts	0x18E9, r24	; 0x8018e9 <_measuringIsReady>
    3fd0:	08 95       	ret
    3fd2:	64 30       	cpi	r22, 0x04	; 4
    3fd4:	51 f0       	breq	.+20     	; 0x3fea <_hihTwiCallback+0x58>
    3fd6:	80 e0       	ldi	r24, 0x00	; 0
    3fd8:	90 e4       	ldi	r25, 0x40	; 64
    3fda:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <_temp+0x1>
    3fde:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <_temp>
    3fe2:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <_hum+0x1>
    3fe6:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <_hum>
    3fea:	08 95       	ret

00003fec <hih8120Create>:
    3fec:	0f 93       	push	r16
    3fee:	1f 93       	push	r17
    3ff0:	09 ec       	ldi	r16, 0xC9	; 201
    3ff2:	1f e1       	ldi	r17, 0x1F	; 31
    3ff4:	20 e0       	ldi	r18, 0x00	; 0
    3ff6:	34 e2       	ldi	r19, 0x24	; 36
    3ff8:	44 ef       	ldi	r20, 0xF4	; 244
    3ffa:	50 e0       	ldi	r21, 0x00	; 0
    3ffc:	60 e0       	ldi	r22, 0x00	; 0
    3ffe:	87 e2       	ldi	r24, 0x27	; 39
    4000:	0e 94 c5 2b 	call	0x578a	; 0x578a <twiCreate>
    4004:	90 93 eb 18 	sts	0x18EB, r25	; 0x8018eb <_hih8120Handler+0x1>
    4008:	80 93 ea 18 	sts	0x18EA, r24	; 0x8018ea <_hih8120Handler>
    400c:	21 e0       	ldi	r18, 0x01	; 1
    400e:	89 2b       	or	r24, r25
    4010:	09 f0       	breq	.+2      	; 0x4014 <hih8120Create+0x28>
    4012:	20 e0       	ldi	r18, 0x00	; 0
    4014:	82 2f       	mov	r24, r18
    4016:	1f 91       	pop	r17
    4018:	0f 91       	pop	r16
    401a:	08 95       	ret

0000401c <hih8120IsReady>:
    401c:	80 91 e9 18 	lds	r24, 0x18E9	; 0x8018e9 <_measuringIsReady>
    4020:	08 95       	ret

00004022 <hih8120Wakeup>:
    4022:	80 91 ea 18 	lds	r24, 0x18EA	; 0x8018ea <_hih8120Handler>
    4026:	90 91 eb 18 	lds	r25, 0x18EB	; 0x8018eb <_hih8120Handler+0x1>
    402a:	00 97       	sbiw	r24, 0x00	; 0
    402c:	59 f0       	breq	.+22     	; 0x4044 <hih8120Wakeup+0x22>
    402e:	40 e0       	ldi	r20, 0x00	; 0
    4030:	60 e0       	ldi	r22, 0x00	; 0
    4032:	70 e0       	ldi	r23, 0x00	; 0
    4034:	0e 94 16 2c 	call	0x582c	; 0x582c <twiTransmit>
    4038:	84 30       	cpi	r24, 0x04	; 4
    403a:	31 f4       	brne	.+12     	; 0x4048 <hih8120Wakeup+0x26>
    403c:	10 92 e9 18 	sts	0x18E9, r1	; 0x8018e9 <_measuringIsReady>
    4040:	80 e0       	ldi	r24, 0x00	; 0
    4042:	08 95       	ret
    4044:	82 e0       	ldi	r24, 0x02	; 2
    4046:	08 95       	ret
    4048:	83 e0       	ldi	r24, 0x03	; 3
    404a:	08 95       	ret

0000404c <hih8120Meassure>:
    404c:	80 91 ea 18 	lds	r24, 0x18EA	; 0x8018ea <_hih8120Handler>
    4050:	90 91 eb 18 	lds	r25, 0x18EB	; 0x8018eb <_hih8120Handler+0x1>
    4054:	00 97       	sbiw	r24, 0x00	; 0
    4056:	39 f0       	breq	.+14     	; 0x4066 <hih8120Meassure+0x1a>
    4058:	64 e0       	ldi	r22, 0x04	; 4
    405a:	0e 94 62 2c 	call	0x58c4	; 0x58c4 <twiReceive>
    405e:	85 30       	cpi	r24, 0x05	; 5
    4060:	21 f0       	breq	.+8      	; 0x406a <hih8120Meassure+0x1e>
    4062:	83 e0       	ldi	r24, 0x03	; 3
    4064:	08 95       	ret
    4066:	82 e0       	ldi	r24, 0x02	; 2
    4068:	08 95       	ret
    406a:	80 e0       	ldi	r24, 0x00	; 0
    406c:	08 95       	ret

0000406e <hih8120GetHumidity>:
    406e:	60 91 0c 02 	lds	r22, 0x020C	; 0x80020c <_hum>
    4072:	70 91 0d 02 	lds	r23, 0x020D	; 0x80020d <_hum+0x1>
    4076:	80 e0       	ldi	r24, 0x00	; 0
    4078:	90 e0       	ldi	r25, 0x00	; 0
    407a:	0e 94 6c 2e 	call	0x5cd8	; 0x5cd8 <__floatunsisf>
    407e:	20 e0       	ldi	r18, 0x00	; 0
    4080:	30 e0       	ldi	r19, 0x00	; 0
    4082:	48 ec       	ldi	r20, 0xC8	; 200
    4084:	52 e4       	ldi	r21, 0x42	; 66
    4086:	0e 94 fa 2e 	call	0x5df4	; 0x5df4 <__mulsf3>
    408a:	20 e0       	ldi	r18, 0x00	; 0
    408c:	38 ef       	ldi	r19, 0xF8	; 248
    408e:	4f e7       	ldi	r20, 0x7F	; 127
    4090:	56 e4       	ldi	r21, 0x46	; 70
    4092:	0c 94 d3 2d 	jmp	0x5ba6	; 0x5ba6 <__divsf3>
    4096:	08 95       	ret

00004098 <hih8120GetHumidityPercent_x10>:
    4098:	ea df       	rcall	.-44     	; 0x406e <hih8120GetHumidity>
    409a:	20 e0       	ldi	r18, 0x00	; 0
    409c:	30 e0       	ldi	r19, 0x00	; 0
    409e:	40 e2       	ldi	r20, 0x20	; 32
    40a0:	51 e4       	ldi	r21, 0x41	; 65
    40a2:	0e 94 fa 2e 	call	0x5df4	; 0x5df4 <__mulsf3>
    40a6:	0e 94 40 2e 	call	0x5c80	; 0x5c80 <__fixunssfsi>
    40aa:	cb 01       	movw	r24, r22
    40ac:	08 95       	ret

000040ae <hih8120GetTemperature>:
    40ae:	60 91 0a 02 	lds	r22, 0x020A	; 0x80020a <_temp>
    40b2:	70 91 0b 02 	lds	r23, 0x020B	; 0x80020b <_temp+0x1>
    40b6:	80 e0       	ldi	r24, 0x00	; 0
    40b8:	90 e0       	ldi	r25, 0x00	; 0
    40ba:	0e 94 6c 2e 	call	0x5cd8	; 0x5cd8 <__floatunsisf>
    40be:	20 e0       	ldi	r18, 0x00	; 0
    40c0:	30 e0       	ldi	r19, 0x00	; 0
    40c2:	45 e2       	ldi	r20, 0x25	; 37
    40c4:	53 e4       	ldi	r21, 0x43	; 67
    40c6:	0e 94 fa 2e 	call	0x5df4	; 0x5df4 <__mulsf3>
    40ca:	20 e0       	ldi	r18, 0x00	; 0
    40cc:	38 ef       	ldi	r19, 0xF8	; 248
    40ce:	4f e7       	ldi	r20, 0x7F	; 127
    40d0:	56 e4       	ldi	r21, 0x46	; 70
    40d2:	0e 94 d3 2d 	call	0x5ba6	; 0x5ba6 <__divsf3>
    40d6:	20 e0       	ldi	r18, 0x00	; 0
    40d8:	30 e0       	ldi	r19, 0x00	; 0
    40da:	40 e2       	ldi	r20, 0x20	; 32
    40dc:	52 e4       	ldi	r21, 0x42	; 66
    40de:	0c 94 6e 2d 	jmp	0x5adc	; 0x5adc <__subsf3>
    40e2:	08 95       	ret

000040e4 <hih8120GetTemperature_x10>:
    40e4:	e4 df       	rcall	.-56     	; 0x40ae <hih8120GetTemperature>
    40e6:	20 e0       	ldi	r18, 0x00	; 0
    40e8:	30 e0       	ldi	r19, 0x00	; 0
    40ea:	40 e2       	ldi	r20, 0x20	; 32
    40ec:	51 e4       	ldi	r21, 0x41	; 65
    40ee:	0e 94 fa 2e 	call	0x5df4	; 0x5df4 <__mulsf3>
    40f2:	0e 94 3b 2e 	call	0x5c76	; 0x5c76 <__fixsfsi>
    40f6:	cb 01       	movw	r24, r22
    40f8:	08 95       	ret

000040fa <_turn_off>:
    40fa:	cf 93       	push	r28
    40fc:	df 93       	push	r29
    40fe:	90 e0       	ldi	r25, 0x00	; 0
    4100:	fc 01       	movw	r30, r24
    4102:	ee 0f       	add	r30, r30
    4104:	ff 1f       	adc	r31, r31
    4106:	e8 0f       	add	r30, r24
    4108:	f9 1f       	adc	r31, r25
    410a:	ee 0f       	add	r30, r30
    410c:	ff 1f       	adc	r31, r31
    410e:	e4 51       	subi	r30, 0x14	; 20
    4110:	f7 4e       	sbci	r31, 0xE7	; 231
    4112:	23 81       	ldd	r18, Z+3	; 0x03
    4114:	21 11       	cpse	r18, r1
    4116:	0a c0       	rjmp	.+20     	; 0x412c <_turn_off+0x32>
    4118:	ef 01       	movw	r28, r30
    411a:	e0 91 6d 1a 	lds	r30, 0x1A6D	; 0x801a6d <register_access+0x8>
    411e:	f0 91 6e 1a 	lds	r31, 0x1A6E	; 0x801a6e <register_access+0x9>
    4122:	6a 81       	ldd	r22, Y+2	; 0x02
    4124:	88 81       	ld	r24, Y
    4126:	99 81       	ldd	r25, Y+1	; 0x01
    4128:	19 95       	eicall
    412a:	12 c0       	rjmp	.+36     	; 0x4150 <_turn_off+0x56>
    412c:	dc 01       	movw	r26, r24
    412e:	aa 0f       	add	r26, r26
    4130:	bb 1f       	adc	r27, r27
    4132:	ed 01       	movw	r28, r26
    4134:	c8 0f       	add	r28, r24
    4136:	d9 1f       	adc	r29, r25
    4138:	cc 0f       	add	r28, r28
    413a:	dd 1f       	adc	r29, r29
    413c:	c4 51       	subi	r28, 0x14	; 20
    413e:	d7 4e       	sbci	r29, 0xE7	; 231
    4140:	e0 91 77 1a 	lds	r30, 0x1A77	; 0x801a77 <register_access+0x12>
    4144:	f0 91 78 1a 	lds	r31, 0x1A78	; 0x801a78 <register_access+0x13>
    4148:	6a 81       	ldd	r22, Y+2	; 0x02
    414a:	88 81       	ld	r24, Y
    414c:	99 81       	ldd	r25, Y+1	; 0x01
    414e:	19 95       	eicall
    4150:	df 91       	pop	r29
    4152:	cf 91       	pop	r28
    4154:	08 95       	ret

00004156 <_turn_on>:
    4156:	cf 93       	push	r28
    4158:	df 93       	push	r29
    415a:	90 e0       	ldi	r25, 0x00	; 0
    415c:	fc 01       	movw	r30, r24
    415e:	ee 0f       	add	r30, r30
    4160:	ff 1f       	adc	r31, r31
    4162:	e8 0f       	add	r30, r24
    4164:	f9 1f       	adc	r31, r25
    4166:	ee 0f       	add	r30, r30
    4168:	ff 1f       	adc	r31, r31
    416a:	e4 51       	subi	r30, 0x14	; 20
    416c:	f7 4e       	sbci	r31, 0xE7	; 231
    416e:	23 81       	ldd	r18, Z+3	; 0x03
    4170:	21 11       	cpse	r18, r1
    4172:	0a c0       	rjmp	.+20     	; 0x4188 <_turn_on+0x32>
    4174:	ef 01       	movw	r28, r30
    4176:	e0 91 77 1a 	lds	r30, 0x1A77	; 0x801a77 <register_access+0x12>
    417a:	f0 91 78 1a 	lds	r31, 0x1A78	; 0x801a78 <register_access+0x13>
    417e:	6a 81       	ldd	r22, Y+2	; 0x02
    4180:	88 81       	ld	r24, Y
    4182:	99 81       	ldd	r25, Y+1	; 0x01
    4184:	19 95       	eicall
    4186:	12 c0       	rjmp	.+36     	; 0x41ac <_turn_on+0x56>
    4188:	dc 01       	movw	r26, r24
    418a:	aa 0f       	add	r26, r26
    418c:	bb 1f       	adc	r27, r27
    418e:	ed 01       	movw	r28, r26
    4190:	c8 0f       	add	r28, r24
    4192:	d9 1f       	adc	r29, r25
    4194:	cc 0f       	add	r28, r28
    4196:	dd 1f       	adc	r29, r29
    4198:	c4 51       	subi	r28, 0x14	; 20
    419a:	d7 4e       	sbci	r29, 0xE7	; 231
    419c:	e0 91 6d 1a 	lds	r30, 0x1A6D	; 0x801a6d <register_access+0x8>
    41a0:	f0 91 6e 1a 	lds	r31, 0x1A6E	; 0x801a6e <register_access+0x9>
    41a4:	6a 81       	ldd	r22, Y+2	; 0x02
    41a6:	88 81       	ld	r24, Y
    41a8:	99 81       	ldd	r25, Y+1	; 0x01
    41aa:	19 95       	eicall
    41ac:	df 91       	pop	r29
    41ae:	cf 91       	pop	r28
    41b0:	08 95       	ret

000041b2 <_hal_led_task>:
    41b2:	0f 2e       	mov	r0, r31
    41b4:	f5 e6       	ldi	r31, 0x65	; 101
    41b6:	cf 2e       	mov	r12, r31
    41b8:	fa e1       	ldi	r31, 0x1A	; 26
    41ba:	df 2e       	mov	r13, r31
    41bc:	f0 2d       	mov	r31, r0
    41be:	04 e0       	ldi	r16, 0x04	; 4
    41c0:	cc ee       	ldi	r28, 0xEC	; 236
    41c2:	d8 e1       	ldi	r29, 0x18	; 24
    41c4:	10 e0       	ldi	r17, 0x00	; 0
    41c6:	8c 81       	ldd	r24, Y+4	; 0x04
    41c8:	81 30       	cpi	r24, 0x01	; 1
    41ca:	69 f0       	breq	.+26     	; 0x41e6 <_hal_led_task+0x34>
    41cc:	e8 f0       	brcs	.+58     	; 0x4208 <_hal_led_task+0x56>
    41ce:	82 30       	cpi	r24, 0x02	; 2
    41d0:	39 f5       	brne	.+78     	; 0x4220 <_hal_led_task+0x6e>
    41d2:	d6 01       	movw	r26, r12
    41d4:	1c 96       	adiw	r26, 0x0c	; 12
    41d6:	ed 91       	ld	r30, X+
    41d8:	fc 91       	ld	r31, X
    41da:	1d 97       	sbiw	r26, 0x0d	; 13
    41dc:	6a 81       	ldd	r22, Y+2	; 0x02
    41de:	88 81       	ld	r24, Y
    41e0:	99 81       	ldd	r25, Y+1	; 0x01
    41e2:	19 95       	eicall
    41e4:	1d c0       	rjmp	.+58     	; 0x4220 <_hal_led_task+0x6e>
    41e6:	8d 81       	ldd	r24, Y+5	; 0x05
    41e8:	8f 5f       	subi	r24, 0xFF	; 255
    41ea:	8a 30       	cpi	r24, 0x0A	; 10
    41ec:	10 f4       	brcc	.+4      	; 0x41f2 <_hal_led_task+0x40>
    41ee:	8d 83       	std	Y+5, r24	; 0x05
    41f0:	17 c0       	rjmp	.+46     	; 0x4220 <_hal_led_task+0x6e>
    41f2:	1d 82       	std	Y+5, r1	; 0x05
    41f4:	d6 01       	movw	r26, r12
    41f6:	1c 96       	adiw	r26, 0x0c	; 12
    41f8:	ed 91       	ld	r30, X+
    41fa:	fc 91       	ld	r31, X
    41fc:	1d 97       	sbiw	r26, 0x0d	; 13
    41fe:	6a 81       	ldd	r22, Y+2	; 0x02
    4200:	88 81       	ld	r24, Y
    4202:	99 81       	ldd	r25, Y+1	; 0x01
    4204:	19 95       	eicall
    4206:	0c c0       	rjmp	.+24     	; 0x4220 <_hal_led_task+0x6e>
    4208:	8d 81       	ldd	r24, Y+5	; 0x05
    420a:	88 23       	and	r24, r24
    420c:	31 f0       	breq	.+12     	; 0x421a <_hal_led_task+0x68>
    420e:	81 2f       	mov	r24, r17
    4210:	a2 df       	rcall	.-188    	; 0x4156 <_turn_on>
    4212:	8d 81       	ldd	r24, Y+5	; 0x05
    4214:	81 50       	subi	r24, 0x01	; 1
    4216:	8d 83       	std	Y+5, r24	; 0x05
    4218:	03 c0       	rjmp	.+6      	; 0x4220 <_hal_led_task+0x6e>
    421a:	0c 83       	std	Y+4, r16	; 0x04
    421c:	81 2f       	mov	r24, r17
    421e:	6d df       	rcall	.-294    	; 0x40fa <_turn_off>
    4220:	1f 5f       	subi	r17, 0xFF	; 255
    4222:	26 96       	adiw	r28, 0x06	; 6
    4224:	14 30       	cpi	r17, 0x04	; 4
    4226:	79 f6       	brne	.-98     	; 0x41c6 <_hal_led_task+0x14>
    4228:	65 e0       	ldi	r22, 0x05	; 5
    422a:	70 e0       	ldi	r23, 0x00	; 0
    422c:	80 e0       	ldi	r24, 0x00	; 0
    422e:	90 e0       	ldi	r25, 0x00	; 0
    4230:	0e 94 42 18 	call	0x3084	; 0x3084 <vTaskDelay>
    4234:	c5 cf       	rjmp	.-118    	; 0x41c0 <_hal_led_task+0xe>

00004236 <led_create>:
    4236:	cf 92       	push	r12
    4238:	df 92       	push	r13
    423a:	ef 92       	push	r14
    423c:	ff 92       	push	r15
    423e:	0f 93       	push	r16
    4240:	1f 93       	push	r17
    4242:	cf 93       	push	r28
    4244:	df 93       	push	r29
    4246:	06 2f       	mov	r16, r22
    4248:	0f 2e       	mov	r0, r31
    424a:	f5 e6       	ldi	r31, 0x65	; 101
    424c:	ef 2e       	mov	r14, r31
    424e:	fa e1       	ldi	r31, 0x1A	; 26
    4250:	ff 2e       	mov	r15, r31
    4252:	f0 2d       	mov	r31, r0
    4254:	d7 01       	movw	r26, r14
    4256:	18 96       	adiw	r26, 0x08	; 8
    4258:	ed 91       	ld	r30, X+
    425a:	fc 91       	ld	r31, X
    425c:	19 97       	sbiw	r26, 0x09	; 9
    425e:	66 e0       	ldi	r22, 0x06	; 6
    4260:	87 e2       	ldi	r24, 0x27	; 39
    4262:	90 e0       	ldi	r25, 0x00	; 0
    4264:	19 95       	eicall
    4266:	cc ee       	ldi	r28, 0xEC	; 236
    4268:	d8 e1       	ldi	r29, 0x18	; 24
    426a:	0f 2e       	mov	r0, r31
    426c:	f8 e2       	ldi	r31, 0x28	; 40
    426e:	cf 2e       	mov	r12, r31
    4270:	d1 2c       	mov	r13, r1
    4272:	f0 2d       	mov	r31, r0
    4274:	d9 82       	std	Y+1, r13	; 0x01
    4276:	c8 82       	st	Y, r12
    4278:	86 e0       	ldi	r24, 0x06	; 6
    427a:	8a 83       	std	Y+2, r24	; 0x02
    427c:	1b 82       	std	Y+3, r1	; 0x03
    427e:	14 e0       	ldi	r17, 0x04	; 4
    4280:	1c 83       	std	Y+4, r17	; 0x04
    4282:	80 e0       	ldi	r24, 0x00	; 0
    4284:	3a df       	rcall	.-396    	; 0x40fa <_turn_off>
    4286:	d7 01       	movw	r26, r14
    4288:	18 96       	adiw	r26, 0x08	; 8
    428a:	ed 91       	ld	r30, X+
    428c:	fc 91       	ld	r31, X
    428e:	19 97       	sbiw	r26, 0x09	; 9
    4290:	67 e0       	ldi	r22, 0x07	; 7
    4292:	87 e2       	ldi	r24, 0x27	; 39
    4294:	90 e0       	ldi	r25, 0x00	; 0
    4296:	19 95       	eicall
    4298:	df 82       	std	Y+7, r13	; 0x07
    429a:	ce 82       	std	Y+6, r12	; 0x06
    429c:	87 e0       	ldi	r24, 0x07	; 7
    429e:	88 87       	std	Y+8, r24	; 0x08
    42a0:	19 86       	std	Y+9, r1	; 0x09
    42a2:	1a 87       	std	Y+10, r17	; 0x0a
    42a4:	81 e0       	ldi	r24, 0x01	; 1
    42a6:	29 df       	rcall	.-430    	; 0x40fa <_turn_off>
    42a8:	d7 01       	movw	r26, r14
    42aa:	18 96       	adiw	r26, 0x08	; 8
    42ac:	ed 91       	ld	r30, X+
    42ae:	fc 91       	ld	r31, X
    42b0:	19 97       	sbiw	r26, 0x09	; 9
    42b2:	65 e0       	ldi	r22, 0x05	; 5
    42b4:	83 e3       	ldi	r24, 0x33	; 51
    42b6:	90 e0       	ldi	r25, 0x00	; 0
    42b8:	19 95       	eicall
    42ba:	d7 01       	movw	r26, r14
    42bc:	18 96       	adiw	r26, 0x08	; 8
    42be:	ed 91       	ld	r30, X+
    42c0:	fc 91       	ld	r31, X
    42c2:	19 97       	sbiw	r26, 0x09	; 9
    42c4:	61 e0       	ldi	r22, 0x01	; 1
    42c6:	84 e3       	ldi	r24, 0x34	; 52
    42c8:	90 e0       	ldi	r25, 0x00	; 0
    42ca:	19 95       	eicall
    42cc:	84 e3       	ldi	r24, 0x34	; 52
    42ce:	90 e0       	ldi	r25, 0x00	; 0
    42d0:	9d 87       	std	Y+13, r25	; 0x0d
    42d2:	8c 87       	std	Y+12, r24	; 0x0c
    42d4:	85 e0       	ldi	r24, 0x05	; 5
    42d6:	8e 87       	std	Y+14, r24	; 0x0e
    42d8:	1f 86       	std	Y+15, r1	; 0x0f
    42da:	18 8b       	std	Y+16, r17	; 0x10
    42dc:	82 e0       	ldi	r24, 0x02	; 2
    42de:	0d df       	rcall	.-486    	; 0x40fa <_turn_off>
    42e0:	d7 01       	movw	r26, r14
    42e2:	18 96       	adiw	r26, 0x08	; 8
    42e4:	ed 91       	ld	r30, X+
    42e6:	fc 91       	ld	r31, X
    42e8:	19 97       	sbiw	r26, 0x09	; 9
    42ea:	64 e0       	ldi	r22, 0x04	; 4
    42ec:	81 e0       	ldi	r24, 0x01	; 1
    42ee:	91 e0       	ldi	r25, 0x01	; 1
    42f0:	19 95       	eicall
    42f2:	d7 01       	movw	r26, r14
    42f4:	18 96       	adiw	r26, 0x08	; 8
    42f6:	ed 91       	ld	r30, X+
    42f8:	fc 91       	ld	r31, X
    42fa:	19 97       	sbiw	r26, 0x09	; 9
    42fc:	61 e0       	ldi	r22, 0x01	; 1
    42fe:	82 e0       	ldi	r24, 0x02	; 2
    4300:	91 e0       	ldi	r25, 0x01	; 1
    4302:	19 95       	eicall
    4304:	82 e0       	ldi	r24, 0x02	; 2
    4306:	91 e0       	ldi	r25, 0x01	; 1
    4308:	9b 8b       	std	Y+19, r25	; 0x13
    430a:	8a 8b       	std	Y+18, r24	; 0x12
    430c:	1c 8b       	std	Y+20, r17	; 0x14
    430e:	1d 8a       	std	Y+21, r1	; 0x15
    4310:	1e 8b       	std	Y+22, r17	; 0x16
    4312:	83 e0       	ldi	r24, 0x03	; 3
    4314:	f2 de       	rcall	.-540    	; 0x40fa <_turn_off>
    4316:	e1 2c       	mov	r14, r1
    4318:	f1 2c       	mov	r15, r1
    431a:	20 e0       	ldi	r18, 0x00	; 0
    431c:	30 e0       	ldi	r19, 0x00	; 0
    431e:	40 ec       	ldi	r20, 0xC0	; 192
    4320:	50 e0       	ldi	r21, 0x00	; 0
    4322:	6b ee       	ldi	r22, 0xEB	; 235
    4324:	74 e0       	ldi	r23, 0x04	; 4
    4326:	89 ed       	ldi	r24, 0xD9	; 217
    4328:	90 e2       	ldi	r25, 0x20	; 32
    432a:	0e 94 82 15 	call	0x2b04	; 0x2b04 <xTaskCreate>
    432e:	df 91       	pop	r29
    4330:	cf 91       	pop	r28
    4332:	1f 91       	pop	r17
    4334:	0f 91       	pop	r16
    4336:	ff 90       	pop	r15
    4338:	ef 90       	pop	r14
    433a:	df 90       	pop	r13
    433c:	cf 90       	pop	r12
    433e:	08 95       	ret

00004340 <led_slow_blink>:
    4340:	0f 93       	push	r16
    4342:	1f 93       	push	r17
    4344:	cf 93       	push	r28
    4346:	df 93       	push	r29
    4348:	c8 2f       	mov	r28, r24
    434a:	d0 e0       	ldi	r29, 0x00	; 0
    434c:	8e 01       	movw	r16, r28
    434e:	00 0f       	add	r16, r16
    4350:	11 1f       	adc	r17, r17
    4352:	d8 01       	movw	r26, r16
    4354:	ac 0f       	add	r26, r28
    4356:	bd 1f       	adc	r27, r29
    4358:	aa 0f       	add	r26, r26
    435a:	bb 1f       	adc	r27, r27
    435c:	a4 51       	subi	r26, 0x14	; 20
    435e:	b7 4e       	sbci	r27, 0xE7	; 231
    4360:	e0 91 71 1a 	lds	r30, 0x1A71	; 0x801a71 <register_access+0xc>
    4364:	f0 91 72 1a 	lds	r31, 0x1A72	; 0x801a72 <register_access+0xd>
    4368:	12 96       	adiw	r26, 0x02	; 2
    436a:	6c 91       	ld	r22, X
    436c:	12 97       	sbiw	r26, 0x02	; 2
    436e:	8d 91       	ld	r24, X+
    4370:	9c 91       	ld	r25, X
    4372:	19 95       	eicall
    4374:	c0 0f       	add	r28, r16
    4376:	d1 1f       	adc	r29, r17
    4378:	cc 0f       	add	r28, r28
    437a:	dd 1f       	adc	r29, r29
    437c:	c4 51       	subi	r28, 0x14	; 20
    437e:	d7 4e       	sbci	r29, 0xE7	; 231
    4380:	81 e0       	ldi	r24, 0x01	; 1
    4382:	8c 83       	std	Y+4, r24	; 0x04
    4384:	df 91       	pop	r29
    4386:	cf 91       	pop	r28
    4388:	1f 91       	pop	r17
    438a:	0f 91       	pop	r16
    438c:	08 95       	ret

0000438e <led_fast_blink>:
    438e:	0f 93       	push	r16
    4390:	1f 93       	push	r17
    4392:	cf 93       	push	r28
    4394:	df 93       	push	r29
    4396:	c8 2f       	mov	r28, r24
    4398:	d0 e0       	ldi	r29, 0x00	; 0
    439a:	8e 01       	movw	r16, r28
    439c:	00 0f       	add	r16, r16
    439e:	11 1f       	adc	r17, r17
    43a0:	d8 01       	movw	r26, r16
    43a2:	ac 0f       	add	r26, r28
    43a4:	bd 1f       	adc	r27, r29
    43a6:	aa 0f       	add	r26, r26
    43a8:	bb 1f       	adc	r27, r27
    43aa:	a4 51       	subi	r26, 0x14	; 20
    43ac:	b7 4e       	sbci	r27, 0xE7	; 231
    43ae:	e0 91 71 1a 	lds	r30, 0x1A71	; 0x801a71 <register_access+0xc>
    43b2:	f0 91 72 1a 	lds	r31, 0x1A72	; 0x801a72 <register_access+0xd>
    43b6:	12 96       	adiw	r26, 0x02	; 2
    43b8:	6c 91       	ld	r22, X
    43ba:	12 97       	sbiw	r26, 0x02	; 2
    43bc:	8d 91       	ld	r24, X+
    43be:	9c 91       	ld	r25, X
    43c0:	19 95       	eicall
    43c2:	c0 0f       	add	r28, r16
    43c4:	d1 1f       	adc	r29, r17
    43c6:	cc 0f       	add	r28, r28
    43c8:	dd 1f       	adc	r29, r29
    43ca:	c4 51       	subi	r28, 0x14	; 20
    43cc:	d7 4e       	sbci	r29, 0xE7	; 231
    43ce:	82 e0       	ldi	r24, 0x02	; 2
    43d0:	8c 83       	std	Y+4, r24	; 0x04
    43d2:	df 91       	pop	r29
    43d4:	cf 91       	pop	r28
    43d6:	1f 91       	pop	r17
    43d8:	0f 91       	pop	r16
    43da:	08 95       	ret

000043dc <led_led_on>:
    43dc:	28 2f       	mov	r18, r24
    43de:	30 e0       	ldi	r19, 0x00	; 0
    43e0:	f9 01       	movw	r30, r18
    43e2:	ee 0f       	add	r30, r30
    43e4:	ff 1f       	adc	r31, r31
    43e6:	e2 0f       	add	r30, r18
    43e8:	f3 1f       	adc	r31, r19
    43ea:	ee 0f       	add	r30, r30
    43ec:	ff 1f       	adc	r31, r31
    43ee:	e4 51       	subi	r30, 0x14	; 20
    43f0:	f7 4e       	sbci	r31, 0xE7	; 231
    43f2:	93 e0       	ldi	r25, 0x03	; 3
    43f4:	94 83       	std	Z+4, r25	; 0x04
    43f6:	af ce       	rjmp	.-674    	; 0x4156 <_turn_on>
    43f8:	08 95       	ret

000043fa <led_led_off>:
    43fa:	28 2f       	mov	r18, r24
    43fc:	30 e0       	ldi	r19, 0x00	; 0
    43fe:	f9 01       	movw	r30, r18
    4400:	ee 0f       	add	r30, r30
    4402:	ff 1f       	adc	r31, r31
    4404:	e2 0f       	add	r30, r18
    4406:	f3 1f       	adc	r31, r19
    4408:	ee 0f       	add	r30, r30
    440a:	ff 1f       	adc	r31, r31
    440c:	e4 51       	subi	r30, 0x14	; 20
    440e:	f7 4e       	sbci	r31, 0xE7	; 231
    4410:	94 e0       	ldi	r25, 0x04	; 4
    4412:	94 83       	std	Z+4, r25	; 0x04
    4414:	72 ce       	rjmp	.-796    	; 0x40fa <_turn_off>
    4416:	08 95       	ret

00004418 <led_long_puls>:
    4418:	90 e0       	ldi	r25, 0x00	; 0
    441a:	fc 01       	movw	r30, r24
    441c:	ee 0f       	add	r30, r30
    441e:	ff 1f       	adc	r31, r31
    4420:	df 01       	movw	r26, r30
    4422:	a8 0f       	add	r26, r24
    4424:	b9 1f       	adc	r27, r25
    4426:	aa 0f       	add	r26, r26
    4428:	bb 1f       	adc	r27, r27
    442a:	a4 51       	subi	r26, 0x14	; 20
    442c:	b7 4e       	sbci	r27, 0xE7	; 231
    442e:	24 e0       	ldi	r18, 0x04	; 4
    4430:	15 96       	adiw	r26, 0x05	; 5
    4432:	2c 93       	st	X, r18
    4434:	15 97       	sbiw	r26, 0x05	; 5
    4436:	fd 01       	movw	r30, r26
    4438:	14 82       	std	Z+4, r1	; 0x04
    443a:	08 95       	ret

0000443c <led_short_puls>:
    443c:	90 e0       	ldi	r25, 0x00	; 0
    443e:	fc 01       	movw	r30, r24
    4440:	ee 0f       	add	r30, r30
    4442:	ff 1f       	adc	r31, r31
    4444:	df 01       	movw	r26, r30
    4446:	a8 0f       	add	r26, r24
    4448:	b9 1f       	adc	r27, r25
    444a:	aa 0f       	add	r26, r26
    444c:	bb 1f       	adc	r27, r27
    444e:	a4 51       	subi	r26, 0x14	; 20
    4450:	b7 4e       	sbci	r27, 0xE7	; 231
    4452:	21 e0       	ldi	r18, 0x01	; 1
    4454:	15 96       	adiw	r26, 0x05	; 5
    4456:	2c 93       	st	X, r18
    4458:	15 97       	sbiw	r26, 0x05	; 5
    445a:	fd 01       	movw	r30, r26
    445c:	14 82       	std	Z+4, r1	; 0x04
    445e:	08 95       	ret

00004460 <_serial_call_back>:
    4460:	0f 93       	push	r16
    4462:	1f 93       	push	r17
    4464:	cf 93       	push	r28
    4466:	df 93       	push	r29
    4468:	1f 92       	push	r1
    446a:	1f 92       	push	r1
    446c:	cd b7       	in	r28, 0x3d	; 61
    446e:	de b7       	in	r29, 0x3e	; 62
    4470:	8c 01       	movw	r16, r24
    4472:	19 82       	std	Y+1, r1	; 0x01
    4474:	2d c0       	rjmp	.+90     	; 0x44d0 <_serial_call_back+0x70>
    4476:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <rec_buf_inp.2947>
    447a:	ec 32       	cpi	r30, 0x2C	; 44
    447c:	50 f4       	brcc	.+20     	; 0x4492 <_serial_call_back+0x32>
    447e:	81 e0       	ldi	r24, 0x01	; 1
    4480:	8e 0f       	add	r24, r30
    4482:	80 93 68 19 	sts	0x1968, r24	; 0x801968 <rec_buf_inp.2947>
    4486:	f0 e0       	ldi	r31, 0x00	; 0
    4488:	e6 56       	subi	r30, 0x66	; 102
    448a:	f6 4e       	sbci	r31, 0xE6	; 230
    448c:	8a 81       	ldd	r24, Y+2	; 0x02
    448e:	80 83       	st	Z, r24
    4490:	02 c0       	rjmp	.+4      	; 0x4496 <_serial_call_back+0x36>
    4492:	10 92 68 19 	sts	0x1968, r1	; 0x801968 <rec_buf_inp.2947>
    4496:	8a 81       	ldd	r24, Y+2	; 0x02
    4498:	8a 30       	cpi	r24, 0x0A	; 10
    449a:	d1 f4       	brne	.+52     	; 0x44d0 <_serial_call_back+0x70>
    449c:	40 91 68 19 	lds	r20, 0x1968	; 0x801968 <rec_buf_inp.2947>
    44a0:	50 e0       	ldi	r21, 0x00	; 0
    44a2:	fa 01       	movw	r30, r20
    44a4:	e8 56       	subi	r30, 0x68	; 104
    44a6:	f6 4e       	sbci	r31, 0xE6	; 230
    44a8:	10 82       	st	Z, r1
    44aa:	41 50       	subi	r20, 0x01	; 1
    44ac:	51 09       	sbc	r21, r1
    44ae:	9e 01       	movw	r18, r28
    44b0:	2f 5f       	subi	r18, 0xFF	; 255
    44b2:	3f 4f       	sbci	r19, 0xFF	; 255
    44b4:	6a e9       	ldi	r22, 0x9A	; 154
    44b6:	79 e1       	ldi	r23, 0x19	; 25
    44b8:	80 91 6b 19 	lds	r24, 0x196B	; 0x80196b <_serial_reply_buffer_handle>
    44bc:	90 91 6c 19 	lds	r25, 0x196C	; 0x80196c <_serial_reply_buffer_handle+0x1>
    44c0:	0e 94 fc 13 	call	0x27f8	; 0x27f8 <xStreamBufferSendFromISR>
    44c4:	89 81       	ldd	r24, Y+1	; 0x01
    44c6:	81 11       	cpse	r24, r1
    44c8:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <vPortYield>
    44cc:	10 92 68 19 	sts	0x1968, r1	; 0x801968 <rec_buf_inp.2947>
    44d0:	be 01       	movw	r22, r28
    44d2:	6e 5f       	subi	r22, 0xFE	; 254
    44d4:	7f 4f       	sbci	r23, 0xFF	; 255
    44d6:	c8 01       	movw	r24, r16
    44d8:	8c d6       	rcall	.+3352   	; 0x51f2 <serial_get_byte>
    44da:	88 23       	and	r24, r24
    44dc:	61 f2       	breq	.-104    	; 0x4476 <_serial_call_back+0x16>
    44de:	0f 90       	pop	r0
    44e0:	0f 90       	pop	r0
    44e2:	df 91       	pop	r29
    44e4:	cf 91       	pop	r28
    44e6:	1f 91       	pop	r17
    44e8:	0f 91       	pop	r16
    44ea:	08 95       	ret

000044ec <_upload_message>:
    44ec:	0f 93       	push	r16
    44ee:	1f 93       	push	r17
    44f0:	cf 93       	push	r28
    44f2:	df 93       	push	r29
    44f4:	8c 01       	movw	r16, r24
    44f6:	eb 01       	movw	r28, r22
    44f8:	80 91 6b 19 	lds	r24, 0x196B	; 0x80196b <_serial_reply_buffer_handle>
    44fc:	90 91 6c 19 	lds	r25, 0x196C	; 0x80196c <_serial_reply_buffer_handle+0x1>
    4500:	0e 94 13 13 	call	0x2626	; 0x2626 <xStreamBufferReset>
    4504:	b8 01       	movw	r22, r16
    4506:	84 e0       	ldi	r24, 0x04	; 4
    4508:	99 e1       	ldi	r25, 0x19	; 25
    450a:	0e 94 82 31 	call	0x6304	; 0x6304 <strcpy>
    450e:	20 97       	sbiw	r28, 0x00	; 0
    4510:	79 f0       	breq	.+30     	; 0x4530 <_upload_message+0x44>
    4512:	e4 e0       	ldi	r30, 0x04	; 4
    4514:	f9 e1       	ldi	r31, 0x19	; 25
    4516:	01 90       	ld	r0, Z+
    4518:	00 20       	and	r0, r0
    451a:	e9 f7       	brne	.-6      	; 0x4516 <_upload_message+0x2a>
    451c:	31 97       	sbiw	r30, 0x01	; 1
    451e:	80 e2       	ldi	r24, 0x20	; 32
    4520:	90 e0       	ldi	r25, 0x00	; 0
    4522:	91 83       	std	Z+1, r25	; 0x01
    4524:	80 83       	st	Z, r24
    4526:	be 01       	movw	r22, r28
    4528:	84 e0       	ldi	r24, 0x04	; 4
    452a:	99 e1       	ldi	r25, 0x19	; 25
    452c:	0e 94 77 31 	call	0x62ee	; 0x62ee <strcat>
    4530:	e4 e0       	ldi	r30, 0x04	; 4
    4532:	f9 e1       	ldi	r31, 0x19	; 25
    4534:	df 01       	movw	r26, r30
    4536:	0d 90       	ld	r0, X+
    4538:	00 20       	and	r0, r0
    453a:	e9 f7       	brne	.-6      	; 0x4536 <_upload_message+0x4a>
    453c:	11 97       	sbiw	r26, 0x01	; 1
    453e:	8d e0       	ldi	r24, 0x0D	; 13
    4540:	9a e0       	ldi	r25, 0x0A	; 10
    4542:	11 96       	adiw	r26, 0x01	; 1
    4544:	9c 93       	st	X, r25
    4546:	8e 93       	st	-X, r24
    4548:	12 96       	adiw	r26, 0x02	; 2
    454a:	1c 92       	st	X, r1
    454c:	01 90       	ld	r0, Z+
    454e:	00 20       	and	r0, r0
    4550:	e9 f7       	brne	.-6      	; 0x454c <_upload_message+0x60>
    4552:	31 97       	sbiw	r30, 0x01	; 1
    4554:	e4 50       	subi	r30, 0x04	; 4
    4556:	f9 41       	sbci	r31, 0x19	; 25
    4558:	ae 2f       	mov	r26, r30
    455a:	84 e0       	ldi	r24, 0x04	; 4
    455c:	99 e1       	ldi	r25, 0x19	; 25
    455e:	ac 01       	movw	r20, r24
    4560:	6a 2f       	mov	r22, r26
    4562:	80 91 6d 19 	lds	r24, 0x196D	; 0x80196d <_rn2483_serial>
    4566:	90 91 6e 19 	lds	r25, 0x196E	; 0x80196e <_rn2483_serial+0x1>
    456a:	f3 d5       	rcall	.+3046   	; 0x5152 <serial_send_bytes>
    456c:	81 11       	cpse	r24, r1
    456e:	11 c0       	rjmp	.+34     	; 0x4592 <_upload_message+0xa6>
    4570:	08 e2       	ldi	r16, 0x28	; 40
    4572:	15 e0       	ldi	r17, 0x05	; 5
    4574:	20 e0       	ldi	r18, 0x00	; 0
    4576:	30 e0       	ldi	r19, 0x00	; 0
    4578:	4d e2       	ldi	r20, 0x2D	; 45
    457a:	50 e0       	ldi	r21, 0x00	; 0
    457c:	64 ef       	ldi	r22, 0xF4	; 244
    457e:	79 e1       	ldi	r23, 0x19	; 25
    4580:	80 91 6b 19 	lds	r24, 0x196B	; 0x80196b <_serial_reply_buffer_handle>
    4584:	90 91 6c 19 	lds	r25, 0x196C	; 0x80196c <_serial_reply_buffer_handle+0x1>
    4588:	0e 94 3f 14 	call	0x287e	; 0x287e <xStreamBufferReceive>
    458c:	84 ef       	ldi	r24, 0xF4	; 244
    458e:	99 e1       	ldi	r25, 0x19	; 25
    4590:	02 c0       	rjmp	.+4      	; 0x4596 <_upload_message+0xaa>
    4592:	80 e0       	ldi	r24, 0x00	; 0
    4594:	90 e0       	ldi	r25, 0x00	; 0
    4596:	df 91       	pop	r29
    4598:	cf 91       	pop	r28
    459a:	1f 91       	pop	r17
    459c:	0f 91       	pop	r16
    459e:	08 95       	ret

000045a0 <_reply2return_code>:
    45a0:	2f 92       	push	r2
    45a2:	3f 92       	push	r3
    45a4:	4f 92       	push	r4
    45a6:	5f 92       	push	r5
    45a8:	6f 92       	push	r6
    45aa:	7f 92       	push	r7
    45ac:	8f 92       	push	r8
    45ae:	9f 92       	push	r9
    45b0:	af 92       	push	r10
    45b2:	bf 92       	push	r11
    45b4:	cf 92       	push	r12
    45b6:	df 92       	push	r13
    45b8:	ef 92       	push	r14
    45ba:	ff 92       	push	r15
    45bc:	0f 93       	push	r16
    45be:	1f 93       	push	r17
    45c0:	cf 93       	push	r28
    45c2:	df 93       	push	r29
    45c4:	5c 01       	movw	r10, r24
    45c6:	fc 01       	movw	r30, r24
    45c8:	01 90       	ld	r0, Z+
    45ca:	00 20       	and	r0, r0
    45cc:	e9 f7       	brne	.-6      	; 0x45c8 <_reply2return_code+0x28>
    45ce:	31 97       	sbiw	r30, 0x01	; 1
    45d0:	6f 01       	movw	r12, r30
    45d2:	c8 1a       	sub	r12, r24
    45d4:	d9 0a       	sbc	r13, r25
    45d6:	5c 2c       	mov	r5, r12
    45d8:	0f 2e       	mov	r0, r31
    45da:	fc e8       	ldi	r31, 0x8C	; 140
    45dc:	8f 2e       	mov	r8, r31
    45de:	f7 e0       	ldi	r31, 0x07	; 7
    45e0:	9f 2e       	mov	r9, r31
    45e2:	f0 2d       	mov	r31, r0
    45e4:	e1 2c       	mov	r14, r1
    45e6:	f1 2c       	mov	r15, r1
    45e8:	4c 2c       	mov	r4, r12
    45ea:	37 01       	movw	r6, r14
    45ec:	f4 01       	movw	r30, r8
    45ee:	01 81       	ldd	r16, Z+1	; 0x01
    45f0:	12 81       	ldd	r17, Z+2	; 0x02
    45f2:	e8 01       	movw	r28, r16
    45f4:	09 90       	ld	r0, Y+
    45f6:	00 20       	and	r0, r0
    45f8:	e9 f7       	brne	.-6      	; 0x45f4 <_reply2return_code+0x54>
    45fa:	21 97       	sbiw	r28, 0x01	; 1
    45fc:	c0 1b       	sub	r28, r16
    45fe:	d1 0b       	sbc	r29, r17
    4600:	3c 2e       	mov	r3, r28
    4602:	f9 e0       	ldi	r31, 0x09	; 9
    4604:	cf 16       	cp	r12, r31
    4606:	d1 04       	cpc	r13, r1
    4608:	58 f0       	brcs	.+22     	; 0x4620 <_reply2return_code+0x80>
    460a:	f4 01       	movw	r30, r8
    460c:	20 80       	ld	r2, Z
    460e:	fe e0       	ldi	r31, 0x0E	; 14
    4610:	2f 12       	cpse	r2, r31
    4612:	06 c0       	rjmp	.+12     	; 0x4620 <_reply2return_code+0x80>
    4614:	b8 01       	movw	r22, r16
    4616:	c5 01       	movw	r24, r10
    4618:	0e 94 52 31 	call	0x62a4	; 0x62a4 <strcasestr>
    461c:	89 2b       	or	r24, r25
    461e:	09 f5       	brne	.+66     	; 0x4662 <_reply2return_code+0xc2>
    4620:	44 2d       	mov	r20, r4
    4622:	35 14       	cp	r3, r5
    4624:	08 f4       	brcc	.+2      	; 0x4628 <_reply2return_code+0x88>
    4626:	4c 2f       	mov	r20, r28
    4628:	50 e0       	ldi	r21, 0x00	; 0
    462a:	b8 01       	movw	r22, r16
    462c:	c5 01       	movw	r24, r10
    462e:	0e 94 89 31 	call	0x6312	; 0x6312 <strncasecmp>
    4632:	89 2b       	or	r24, r25
    4634:	49 f4       	brne	.+18     	; 0x4648 <_reply2return_code+0xa8>
    4636:	f3 01       	movw	r30, r6
    4638:	ee 0f       	add	r30, r30
    463a:	ff 1f       	adc	r31, r31
    463c:	e6 0d       	add	r30, r6
    463e:	f7 1d       	adc	r31, r7
    4640:	e4 57       	subi	r30, 0x74	; 116
    4642:	f8 4f       	sbci	r31, 0xF8	; 248
    4644:	20 80       	ld	r2, Z
    4646:	0d c0       	rjmp	.+26     	; 0x4662 <_reply2return_code+0xc2>
    4648:	8f ef       	ldi	r24, 0xFF	; 255
    464a:	e8 1a       	sub	r14, r24
    464c:	f8 0a       	sbc	r15, r24
    464e:	e3 e0       	ldi	r30, 0x03	; 3
    4650:	8e 0e       	add	r8, r30
    4652:	91 1c       	adc	r9, r1
    4654:	f1 e1       	ldi	r31, 0x11	; 17
    4656:	ef 16       	cp	r14, r31
    4658:	f1 04       	cpc	r15, r1
    465a:	39 f6       	brne	.-114    	; 0x45ea <_reply2return_code+0x4a>
    465c:	68 94       	set
    465e:	22 24       	eor	r2, r2
    4660:	24 f8       	bld	r2, 4
    4662:	82 2d       	mov	r24, r2
    4664:	df 91       	pop	r29
    4666:	cf 91       	pop	r28
    4668:	1f 91       	pop	r17
    466a:	0f 91       	pop	r16
    466c:	ff 90       	pop	r15
    466e:	ef 90       	pop	r14
    4670:	df 90       	pop	r13
    4672:	cf 90       	pop	r12
    4674:	bf 90       	pop	r11
    4676:	af 90       	pop	r10
    4678:	9f 90       	pop	r9
    467a:	8f 90       	pop	r8
    467c:	7f 90       	pop	r7
    467e:	6f 90       	pop	r6
    4680:	5f 90       	pop	r5
    4682:	4f 90       	pop	r4
    4684:	3f 90       	pop	r3
    4686:	2f 90       	pop	r2
    4688:	08 95       	ret

0000468a <_upload_message_rc>:
    468a:	30 df       	rcall	.-416    	; 0x44ec <_upload_message>
    468c:	89 cf       	rjmp	.-238    	; 0x45a0 <_reply2return_code>
    468e:	08 95       	ret

00004690 <lora_driver_flush_buffers>:
    4690:	80 91 6b 19 	lds	r24, 0x196B	; 0x80196b <_serial_reply_buffer_handle>
    4694:	90 91 6c 19 	lds	r25, 0x196C	; 0x80196c <_serial_reply_buffer_handle+0x1>
    4698:	0c 94 13 13 	jmp	0x2626	; 0x2626 <xStreamBufferReset>
    469c:	08 95       	ret

0000469e <lora_driver_create>:
    469e:	8f 92       	push	r8
    46a0:	9f 92       	push	r9
    46a2:	af 92       	push	r10
    46a4:	cf 92       	push	r12
    46a6:	ef 92       	push	r14
    46a8:	0f 93       	push	r16
    46aa:	1f 93       	push	r17
    46ac:	cf 93       	push	r28
    46ae:	c8 2f       	mov	r28, r24
    46b0:	8b 01       	movw	r16, r22
    46b2:	41 e0       	ldi	r20, 0x01	; 1
    46b4:	60 e0       	ldi	r22, 0x00	; 0
    46b6:	70 e0       	ldi	r23, 0x00	; 0
    46b8:	88 ec       	ldi	r24, 0xC8	; 200
    46ba:	90 e0       	ldi	r25, 0x00	; 0
    46bc:	0e 94 e7 12 	call	0x25ce	; 0x25ce <xStreamBufferGenericCreate>
    46c0:	90 93 6c 19 	sts	0x196C, r25	; 0x80196c <_serial_reply_buffer_handle+0x1>
    46c4:	80 93 6b 19 	sts	0x196B, r24	; 0x80196b <_serial_reply_buffer_handle>
    46c8:	10 93 6a 19 	sts	0x196A, r17	; 0x80196a <_downlinkMessageBuffer+0x1>
    46cc:	00 93 69 19 	sts	0x1969, r16	; 0x801969 <_downlinkMessageBuffer>
    46d0:	0f 2e       	mov	r0, r31
    46d2:	f0 e3       	ldi	r31, 0x30	; 48
    46d4:	8f 2e       	mov	r8, r31
    46d6:	f2 e2       	ldi	r31, 0x22	; 34
    46d8:	9f 2e       	mov	r9, r31
    46da:	f0 2d       	mov	r31, r0
    46dc:	68 94       	set
    46de:	aa 24       	eor	r10, r10
    46e0:	a6 f8       	bld	r10, 6
    46e2:	68 94       	set
    46e4:	cc 24       	eor	r12, r12
    46e6:	c6 f8       	bld	r12, 6
    46e8:	e1 2c       	mov	r14, r1
    46ea:	00 e0       	ldi	r16, 0x00	; 0
    46ec:	23 e0       	ldi	r18, 0x03	; 3
    46ee:	40 e0       	ldi	r20, 0x00	; 0
    46f0:	51 ee       	ldi	r21, 0xE1	; 225
    46f2:	60 e0       	ldi	r22, 0x00	; 0
    46f4:	70 e0       	ldi	r23, 0x00	; 0
    46f6:	8c 2f       	mov	r24, r28
    46f8:	71 d4       	rcall	.+2274   	; 0x4fdc <serial_new_instance>
    46fa:	90 93 6e 19 	sts	0x196E, r25	; 0x80196e <_rn2483_serial+0x1>
    46fe:	80 93 6d 19 	sts	0x196D, r24	; 0x80196d <_rn2483_serial>
    4702:	e0 91 6d 1a 	lds	r30, 0x1A6D	; 0x801a6d <register_access+0x8>
    4706:	f0 91 6e 1a 	lds	r31, 0x1A6E	; 0x801a6e <register_access+0x9>
    470a:	64 e0       	ldi	r22, 0x04	; 4
    470c:	87 e0       	ldi	r24, 0x07	; 7
    470e:	91 e0       	ldi	r25, 0x01	; 1
    4710:	19 95       	eicall
    4712:	cf 91       	pop	r28
    4714:	1f 91       	pop	r17
    4716:	0f 91       	pop	r16
    4718:	ef 90       	pop	r14
    471a:	cf 90       	pop	r12
    471c:	af 90       	pop	r10
    471e:	9f 90       	pop	r9
    4720:	8f 90       	pop	r8
    4722:	08 95       	ret

00004724 <lora_driver_reset_rn2483>:
    4724:	88 23       	and	r24, r24
    4726:	49 f0       	breq	.+18     	; 0x473a <lora_driver_reset_rn2483+0x16>
    4728:	e0 91 77 1a 	lds	r30, 0x1A77	; 0x801a77 <register_access+0x12>
    472c:	f0 91 78 1a 	lds	r31, 0x1A78	; 0x801a78 <register_access+0x13>
    4730:	64 e0       	ldi	r22, 0x04	; 4
    4732:	88 e0       	ldi	r24, 0x08	; 8
    4734:	91 e0       	ldi	r25, 0x01	; 1
    4736:	19 95       	eicall
    4738:	08 95       	ret
    473a:	e0 91 6d 1a 	lds	r30, 0x1A6D	; 0x801a6d <register_access+0x8>
    473e:	f0 91 6e 1a 	lds	r31, 0x1A6E	; 0x801a6e <register_access+0x9>
    4742:	64 e0       	ldi	r22, 0x04	; 4
    4744:	88 e0       	ldi	r24, 0x08	; 8
    4746:	91 e0       	ldi	r25, 0x01	; 1
    4748:	19 95       	eicall
    474a:	08 95       	ret

0000474c <lora_driver_rn2483_factory_reset>:
    474c:	60 e0       	ldi	r22, 0x00	; 0
    474e:	70 e0       	ldi	r23, 0x00	; 0
    4750:	82 e1       	ldi	r24, 0x12	; 18
    4752:	95 e0       	ldi	r25, 0x05	; 5
    4754:	cb de       	rcall	.-618    	; 0x44ec <_upload_message>
    4756:	e4 ef       	ldi	r30, 0xF4	; 244
    4758:	f9 e1       	ldi	r31, 0x19	; 25
    475a:	01 90       	ld	r0, Z+
    475c:	00 20       	and	r0, r0
    475e:	e9 f7       	brne	.-6      	; 0x475a <lora_driver_rn2483_factory_reset+0xe>
    4760:	31 97       	sbiw	r30, 0x01	; 1
    4762:	e4 5f       	subi	r30, 0xF4	; 244
    4764:	f9 41       	sbci	r31, 0x19	; 25
    4766:	81 e0       	ldi	r24, 0x01	; 1
    4768:	75 97       	sbiw	r30, 0x15	; 21
    476a:	08 f0       	brcs	.+2      	; 0x476e <lora_driver_rn2483_factory_reset+0x22>
    476c:	80 e0       	ldi	r24, 0x00	; 0
    476e:	08 95       	ret

00004770 <lora_driver_get_rn2483_hweui>:
    4770:	cf 93       	push	r28
    4772:	df 93       	push	r29
    4774:	ec 01       	movw	r28, r24
    4776:	60 e0       	ldi	r22, 0x00	; 0
    4778:	70 e0       	ldi	r23, 0x00	; 0
    477a:	83 e2       	ldi	r24, 0x23	; 35
    477c:	95 e0       	ldi	r25, 0x05	; 5
    477e:	b6 de       	rcall	.-660    	; 0x44ec <_upload_message>
    4780:	e4 ef       	ldi	r30, 0xF4	; 244
    4782:	f9 e1       	ldi	r31, 0x19	; 25
    4784:	01 90       	ld	r0, Z+
    4786:	00 20       	and	r0, r0
    4788:	e9 f7       	brne	.-6      	; 0x4784 <lora_driver_get_rn2483_hweui+0x14>
    478a:	e5 50       	subi	r30, 0x05	; 5
    478c:	fa 41       	sbci	r31, 0x1A	; 26
    478e:	39 f4       	brne	.+14     	; 0x479e <lora_driver_get_rn2483_hweui+0x2e>
    4790:	64 ef       	ldi	r22, 0xF4	; 244
    4792:	79 e1       	ldi	r23, 0x19	; 25
    4794:	ce 01       	movw	r24, r28
    4796:	0e 94 82 31 	call	0x6304	; 0x6304 <strcpy>
    479a:	80 e0       	ldi	r24, 0x00	; 0
    479c:	02 c0       	rjmp	.+4      	; 0x47a2 <lora_driver_get_rn2483_hweui+0x32>
    479e:	18 82       	st	Y, r1
    47a0:	81 e0       	ldi	r24, 0x01	; 1
    47a2:	df 91       	pop	r29
    47a4:	cf 91       	pop	r28
    47a6:	08 95       	ret

000047a8 <lora_driver_set_device_identifier>:
    47a8:	fc 01       	movw	r30, r24
    47aa:	01 90       	ld	r0, Z+
    47ac:	00 20       	and	r0, r0
    47ae:	e9 f7       	brne	.-6      	; 0x47aa <lora_driver_set_device_identifier+0x2>
    47b0:	9f 01       	movw	r18, r30
    47b2:	21 51       	subi	r18, 0x11	; 17
    47b4:	31 09       	sbc	r19, r1
    47b6:	28 17       	cp	r18, r24
    47b8:	39 07       	cpc	r19, r25
    47ba:	29 f4       	brne	.+10     	; 0x47c6 <lora_driver_set_device_identifier+0x1e>
    47bc:	bc 01       	movw	r22, r24
    47be:	81 e5       	ldi	r24, 0x51	; 81
    47c0:	95 e0       	ldi	r25, 0x05	; 5
    47c2:	63 cf       	rjmp	.-314    	; 0x468a <_upload_message_rc>
    47c4:	08 95       	ret
    47c6:	89 e0       	ldi	r24, 0x09	; 9
    47c8:	08 95       	ret

000047ca <lora_driver_set_application_identifier>:
    47ca:	fc 01       	movw	r30, r24
    47cc:	01 90       	ld	r0, Z+
    47ce:	00 20       	and	r0, r0
    47d0:	e9 f7       	brne	.-6      	; 0x47cc <lora_driver_set_application_identifier+0x2>
    47d2:	9f 01       	movw	r18, r30
    47d4:	21 51       	subi	r18, 0x11	; 17
    47d6:	31 09       	sbc	r19, r1
    47d8:	28 17       	cp	r18, r24
    47da:	39 07       	cpc	r19, r25
    47dc:	29 f4       	brne	.+10     	; 0x47e8 <lora_driver_set_application_identifier+0x1e>
    47de:	bc 01       	movw	r22, r24
    47e0:	80 e6       	ldi	r24, 0x60	; 96
    47e2:	95 e0       	ldi	r25, 0x05	; 5
    47e4:	52 cf       	rjmp	.-348    	; 0x468a <_upload_message_rc>
    47e6:	08 95       	ret
    47e8:	89 e0       	ldi	r24, 0x09	; 9
    47ea:	08 95       	ret

000047ec <lora_driver_set_application_key>:
    47ec:	fc 01       	movw	r30, r24
    47ee:	01 90       	ld	r0, Z+
    47f0:	00 20       	and	r0, r0
    47f2:	e9 f7       	brne	.-6      	; 0x47ee <lora_driver_set_application_key+0x2>
    47f4:	9f 01       	movw	r18, r30
    47f6:	21 52       	subi	r18, 0x21	; 33
    47f8:	31 09       	sbc	r19, r1
    47fa:	28 17       	cp	r18, r24
    47fc:	39 07       	cpc	r19, r25
    47fe:	29 f4       	brne	.+10     	; 0x480a <lora_driver_set_application_key+0x1e>
    4800:	bc 01       	movw	r22, r24
    4802:	8f e6       	ldi	r24, 0x6F	; 111
    4804:	95 e0       	ldi	r25, 0x05	; 5
    4806:	41 cf       	rjmp	.-382    	; 0x468a <_upload_message_rc>
    4808:	08 95       	ret
    480a:	89 e0       	ldi	r24, 0x09	; 9
    480c:	08 95       	ret

0000480e <lora_driver_save_mac>:
    480e:	60 e0       	ldi	r22, 0x00	; 0
    4810:	70 e0       	ldi	r23, 0x00	; 0
    4812:	8e ea       	ldi	r24, 0xAE	; 174
    4814:	95 e0       	ldi	r25, 0x05	; 5
    4816:	39 cf       	rjmp	.-398    	; 0x468a <_upload_message_rc>
    4818:	08 95       	ret

0000481a <lora_driver_join>:
    481a:	0f 93       	push	r16
    481c:	1f 93       	push	r17
    481e:	e8 2f       	mov	r30, r24
    4820:	f0 e0       	ldi	r31, 0x00	; 0
    4822:	ee 0f       	add	r30, r30
    4824:	ff 1f       	adc	r31, r31
    4826:	e8 57       	subi	r30, 0x78	; 120
    4828:	f8 4f       	sbci	r31, 0xF8	; 248
    482a:	60 81       	ld	r22, Z
    482c:	71 81       	ldd	r23, Z+1	; 0x01
    482e:	87 eb       	ldi	r24, 0xB7	; 183
    4830:	95 e0       	ldi	r25, 0x05	; 5
    4832:	2b df       	rcall	.-426    	; 0x468a <_upload_message_rc>
    4834:	81 11       	cpse	r24, r1
    4836:	14 c0       	rjmp	.+40     	; 0x4860 <lora_driver_join+0x46>
    4838:	08 e2       	ldi	r16, 0x28	; 40
    483a:	15 e0       	ldi	r17, 0x05	; 5
    483c:	20 e0       	ldi	r18, 0x00	; 0
    483e:	30 e0       	ldi	r19, 0x00	; 0
    4840:	4d e2       	ldi	r20, 0x2D	; 45
    4842:	50 e0       	ldi	r21, 0x00	; 0
    4844:	64 ef       	ldi	r22, 0xF4	; 244
    4846:	79 e1       	ldi	r23, 0x19	; 25
    4848:	80 91 6b 19 	lds	r24, 0x196B	; 0x80196b <_serial_reply_buffer_handle>
    484c:	90 91 6c 19 	lds	r25, 0x196C	; 0x80196c <_serial_reply_buffer_handle+0x1>
    4850:	0e 94 3f 14 	call	0x287e	; 0x287e <xStreamBufferReceive>
    4854:	88 23       	and	r24, r24
    4856:	21 f0       	breq	.+8      	; 0x4860 <lora_driver_join+0x46>
    4858:	84 ef       	ldi	r24, 0xF4	; 244
    485a:	99 e1       	ldi	r25, 0x19	; 25
    485c:	a1 de       	rcall	.-702    	; 0x45a0 <_reply2return_code>
    485e:	03 c0       	rjmp	.+6      	; 0x4866 <lora_driver_join+0x4c>
    4860:	84 ef       	ldi	r24, 0xF4	; 244
    4862:	99 e1       	ldi	r25, 0x19	; 25
    4864:	9d de       	rcall	.-710    	; 0x45a0 <_reply2return_code>
    4866:	1f 91       	pop	r17
    4868:	0f 91       	pop	r16
    486a:	08 95       	ret

0000486c <lora_driver_sent_upload_message>:
    486c:	0f 93       	push	r16
    486e:	1f 93       	push	r17
    4870:	cf 93       	push	r28
    4872:	df 93       	push	r29
    4874:	1f 92       	push	r1
    4876:	cd b7       	in	r28, 0x3d	; 61
    4878:	de b7       	in	r29, 0x3e	; 62
    487a:	db 01       	movw	r26, r22
    487c:	11 96       	adiw	r26, 0x01	; 1
    487e:	9c 91       	ld	r25, X
    4880:	11 97       	sbiw	r26, 0x01	; 1
    4882:	95 31       	cpi	r25, 0x15	; 21
    4884:	08 f0       	brcs	.+2      	; 0x4888 <lora_driver_sent_upload_message+0x1c>
    4886:	b4 c0       	rjmp	.+360    	; 0x49f0 <lora_driver_sent_upload_message+0x184>
    4888:	99 23       	and	r25, r25
    488a:	81 f1       	breq	.+96     	; 0x48ec <lora_driver_sent_upload_message+0x80>
    488c:	60 e0       	ldi	r22, 0x00	; 0
    488e:	70 e0       	ldi	r23, 0x00	; 0
    4890:	27 2f       	mov	r18, r23
    4892:	30 e0       	ldi	r19, 0x00	; 0
    4894:	46 2f       	mov	r20, r22
    4896:	50 e0       	ldi	r21, 0x00	; 0
    4898:	fd 01       	movw	r30, r26
    489a:	e4 0f       	add	r30, r20
    489c:	f5 1f       	adc	r31, r21
    489e:	92 81       	ldd	r25, Z+2	; 0x02
    48a0:	92 95       	swap	r25
    48a2:	9f 70       	andi	r25, 0x0F	; 15
    48a4:	9a 30       	cpi	r25, 0x0A	; 10
    48a6:	10 f0       	brcs	.+4      	; 0x48ac <lora_driver_sent_upload_message+0x40>
    48a8:	99 5c       	subi	r25, 0xC9	; 201
    48aa:	01 c0       	rjmp	.+2      	; 0x48ae <lora_driver_sent_upload_message+0x42>
    48ac:	90 5d       	subi	r25, 0xD0	; 208
    48ae:	f9 01       	movw	r30, r18
    48b0:	eb 57       	subi	r30, 0x7B	; 123
    48b2:	f6 4e       	sbci	r31, 0xE6	; 230
    48b4:	90 83       	st	Z, r25
    48b6:	2f 5f       	subi	r18, 0xFF	; 255
    48b8:	3f 4f       	sbci	r19, 0xFF	; 255
    48ba:	fd 01       	movw	r30, r26
    48bc:	e4 0f       	add	r30, r20
    48be:	f5 1f       	adc	r31, r21
    48c0:	92 81       	ldd	r25, Z+2	; 0x02
    48c2:	9f 70       	andi	r25, 0x0F	; 15
    48c4:	49 2f       	mov	r20, r25
    48c6:	50 e0       	ldi	r21, 0x00	; 0
    48c8:	4a 30       	cpi	r20, 0x0A	; 10
    48ca:	51 05       	cpc	r21, r1
    48cc:	14 f0       	brlt	.+4      	; 0x48d2 <lora_driver_sent_upload_message+0x66>
    48ce:	99 5c       	subi	r25, 0xC9	; 201
    48d0:	01 c0       	rjmp	.+2      	; 0x48d4 <lora_driver_sent_upload_message+0x68>
    48d2:	90 5d       	subi	r25, 0xD0	; 208
    48d4:	f9 01       	movw	r30, r18
    48d6:	eb 57       	subi	r30, 0x7B	; 123
    48d8:	f6 4e       	sbci	r31, 0xE6	; 230
    48da:	90 83       	st	Z, r25
    48dc:	7e 5f       	subi	r23, 0xFE	; 254
    48de:	6f 5f       	subi	r22, 0xFF	; 255
    48e0:	11 96       	adiw	r26, 0x01	; 1
    48e2:	9c 91       	ld	r25, X
    48e4:	11 97       	sbiw	r26, 0x01	; 1
    48e6:	69 17       	cp	r22, r25
    48e8:	98 f2       	brcs	.-90     	; 0x4890 <lora_driver_sent_upload_message+0x24>
    48ea:	01 c0       	rjmp	.+2      	; 0x48ee <lora_driver_sent_upload_message+0x82>
    48ec:	70 e0       	ldi	r23, 0x00	; 0
    48ee:	e7 2f       	mov	r30, r23
    48f0:	f0 e0       	ldi	r31, 0x00	; 0
    48f2:	eb 57       	subi	r30, 0x7B	; 123
    48f4:	f6 4e       	sbci	r31, 0xE6	; 230
    48f6:	10 82       	st	Z, r1
    48f8:	4c 91       	ld	r20, X
    48fa:	81 11       	cpse	r24, r1
    48fc:	03 c0       	rjmp	.+6      	; 0x4904 <lora_driver_sent_upload_message+0x98>
    48fe:	80 ec       	ldi	r24, 0xC0	; 192
    4900:	95 e0       	ldi	r25, 0x05	; 5
    4902:	02 c0       	rjmp	.+4      	; 0x4908 <lora_driver_sent_upload_message+0x9c>
    4904:	82 ec       	ldi	r24, 0xC2	; 194
    4906:	95 e0       	ldi	r25, 0x05	; 5
    4908:	25 e8       	ldi	r18, 0x85	; 133
    490a:	39 e1       	ldi	r19, 0x19	; 25
    490c:	3f 93       	push	r19
    490e:	2f 93       	push	r18
    4910:	1f 92       	push	r1
    4912:	4f 93       	push	r20
    4914:	9f 93       	push	r25
    4916:	8f 93       	push	r24
    4918:	86 ec       	ldi	r24, 0xC6	; 198
    491a:	95 e0       	ldi	r25, 0x05	; 5
    491c:	9f 93       	push	r25
    491e:	8f 93       	push	r24
    4920:	87 ec       	ldi	r24, 0xC7	; 199
    4922:	99 e1       	ldi	r25, 0x19	; 25
    4924:	9f 93       	push	r25
    4926:	8f 93       	push	r24
    4928:	0e 94 e4 31 	call	0x63c8	; 0x63c8 <sprintf>
    492c:	60 e0       	ldi	r22, 0x00	; 0
    492e:	70 e0       	ldi	r23, 0x00	; 0
    4930:	87 ec       	ldi	r24, 0xC7	; 199
    4932:	99 e1       	ldi	r25, 0x19	; 25
    4934:	aa de       	rcall	.-684    	; 0x468a <_upload_message_rc>
    4936:	0f b6       	in	r0, 0x3f	; 63
    4938:	f8 94       	cli
    493a:	de bf       	out	0x3e, r29	; 62
    493c:	0f be       	out	0x3f, r0	; 63
    493e:	cd bf       	out	0x3d, r28	; 61
    4940:	81 11       	cpse	r24, r1
    4942:	59 c0       	rjmp	.+178    	; 0x49f6 <lora_driver_sent_upload_message+0x18a>
    4944:	08 e2       	ldi	r16, 0x28	; 40
    4946:	15 e0       	ldi	r17, 0x05	; 5
    4948:	20 e0       	ldi	r18, 0x00	; 0
    494a:	30 e0       	ldi	r19, 0x00	; 0
    494c:	4d e2       	ldi	r20, 0x2D	; 45
    494e:	50 e0       	ldi	r21, 0x00	; 0
    4950:	64 ef       	ldi	r22, 0xF4	; 244
    4952:	79 e1       	ldi	r23, 0x19	; 25
    4954:	80 91 6b 19 	lds	r24, 0x196B	; 0x80196b <_serial_reply_buffer_handle>
    4958:	90 91 6c 19 	lds	r25, 0x196C	; 0x80196c <_serial_reply_buffer_handle+0x1>
    495c:	0e 94 3f 14 	call	0x287e	; 0x287e <xStreamBufferReceive>
    4960:	88 23       	and	r24, r24
    4962:	09 f4       	brne	.+2      	; 0x4966 <lora_driver_sent_upload_message+0xfa>
    4964:	47 c0       	rjmp	.+142    	; 0x49f4 <lora_driver_sent_upload_message+0x188>
    4966:	84 ef       	ldi	r24, 0xF4	; 244
    4968:	99 e1       	ldi	r25, 0x19	; 25
    496a:	1a de       	rcall	.-972    	; 0x45a0 <_reply2return_code>
    496c:	8e 30       	cpi	r24, 0x0E	; 14
    496e:	09 f0       	breq	.+2      	; 0x4972 <lora_driver_sent_upload_message+0x106>
    4970:	42 c0       	rjmp	.+132    	; 0x49f6 <lora_driver_sent_upload_message+0x18a>
    4972:	87 e0       	ldi	r24, 0x07	; 7
    4974:	89 83       	std	Y+1, r24	; 0x01
    4976:	80 91 69 19 	lds	r24, 0x1969	; 0x801969 <_downlinkMessageBuffer>
    497a:	90 91 6a 19 	lds	r25, 0x196A	; 0x80196a <_downlinkMessageBuffer+0x1>
    497e:	89 2b       	or	r24, r25
    4980:	a9 f1       	breq	.+106    	; 0x49ec <lora_driver_sent_upload_message+0x180>
    4982:	be 01       	movw	r22, r28
    4984:	6f 5f       	subi	r22, 0xFF	; 255
    4986:	7f 4f       	sbci	r23, 0xFF	; 255
    4988:	84 ef       	ldi	r24, 0xF4	; 244
    498a:	99 e1       	ldi	r25, 0x19	; 25
    498c:	68 d1       	rcall	.+720    	; 0x4c5e <decode_port_no>
    498e:	80 93 6f 19 	sts	0x196F, r24	; 0x80196f <_downlink_payload>
    4992:	e9 81       	ldd	r30, Y+1	; 0x01
    4994:	f0 e0       	ldi	r31, 0x00	; 0
    4996:	ec 50       	subi	r30, 0x0C	; 12
    4998:	f6 4e       	sbci	r31, 0xE6	; 230
    499a:	df 01       	movw	r26, r30
    499c:	0d 90       	ld	r0, X+
    499e:	00 20       	and	r0, r0
    49a0:	e9 f7       	brne	.-6      	; 0x499c <lora_driver_sent_upload_message+0x130>
    49a2:	11 97       	sbiw	r26, 0x01	; 1
    49a4:	ae 1b       	sub	r26, r30
    49a6:	bf 0b       	sbc	r27, r31
    49a8:	aa 23       	and	r26, r26
    49aa:	91 f0       	breq	.+36     	; 0x49d0 <lora_driver_sent_upload_message+0x164>
    49ac:	bb 27       	eor	r27, r27
    49ae:	cd 01       	movw	r24, r26
    49b0:	01 97       	sbiw	r24, 0x01	; 1
    49b2:	9c 01       	movw	r18, r24
    49b4:	12 f4       	brpl	.+4      	; 0x49ba <lora_driver_sent_upload_message+0x14e>
    49b6:	2f 5f       	subi	r18, 0xFF	; 255
    49b8:	3f 4f       	sbci	r19, 0xFF	; 255
    49ba:	35 95       	asr	r19
    49bc:	27 95       	ror	r18
    49be:	20 93 70 19 	sts	0x1970, r18	; 0x801970 <_downlink_payload+0x1>
    49c2:	af 01       	movw	r20, r30
    49c4:	4f 5f       	subi	r20, 0xFF	; 255
    49c6:	5f 4f       	sbci	r21, 0xFF	; 255
    49c8:	64 e1       	ldi	r22, 0x14	; 20
    49ca:	81 e7       	ldi	r24, 0x71	; 113
    49cc:	99 e1       	ldi	r25, 0x19	; 25
    49ce:	73 d1       	rcall	.+742    	; 0x4cb6 <decode_hexadecimal_string_bytes>
    49d0:	01 e0       	ldi	r16, 0x01	; 1
    49d2:	10 e0       	ldi	r17, 0x00	; 0
    49d4:	20 e0       	ldi	r18, 0x00	; 0
    49d6:	30 e0       	ldi	r19, 0x00	; 0
    49d8:	46 e1       	ldi	r20, 0x16	; 22
    49da:	50 e0       	ldi	r21, 0x00	; 0
    49dc:	6f e6       	ldi	r22, 0x6F	; 111
    49de:	79 e1       	ldi	r23, 0x19	; 25
    49e0:	80 91 69 19 	lds	r24, 0x1969	; 0x801969 <_downlinkMessageBuffer>
    49e4:	90 91 6a 19 	lds	r25, 0x196A	; 0x80196a <_downlinkMessageBuffer+0x1>
    49e8:	0e 94 52 13 	call	0x26a4	; 0x26a4 <xStreamBufferSend>
    49ec:	8e e0       	ldi	r24, 0x0E	; 14
    49ee:	03 c0       	rjmp	.+6      	; 0x49f6 <lora_driver_sent_upload_message+0x18a>
    49f0:	84 e1       	ldi	r24, 0x14	; 20
    49f2:	01 c0       	rjmp	.+2      	; 0x49f6 <lora_driver_sent_upload_message+0x18a>
    49f4:	80 e0       	ldi	r24, 0x00	; 0
    49f6:	0f 90       	pop	r0
    49f8:	df 91       	pop	r29
    49fa:	cf 91       	pop	r28
    49fc:	1f 91       	pop	r17
    49fe:	0f 91       	pop	r16
    4a00:	08 95       	ret

00004a02 <lora_driver_set_adaptive_data_rate>:
    4a02:	81 30       	cpi	r24, 0x01	; 1
    4a04:	19 f0       	breq	.+6      	; 0x4a0c <lora_driver_set_adaptive_data_rate+0xa>
    4a06:	66 ed       	ldi	r22, 0xD6	; 214
    4a08:	75 e0       	ldi	r23, 0x05	; 5
    4a0a:	02 c0       	rjmp	.+4      	; 0x4a10 <lora_driver_set_adaptive_data_rate+0xe>
    4a0c:	6f ea       	ldi	r22, 0xAF	; 175
    4a0e:	76 e0       	ldi	r23, 0x06	; 6
    4a10:	8a ed       	ldi	r24, 0xDA	; 218
    4a12:	95 e0       	ldi	r25, 0x05	; 5
    4a14:	3a ce       	rjmp	.-908    	; 0x468a <_upload_message_rc>
    4a16:	08 95       	ret

00004a18 <lora_driver_set_receive_delay>:
    4a18:	9f 93       	push	r25
    4a1a:	8f 93       	push	r24
    4a1c:	8b e0       	ldi	r24, 0x0B	; 11
    4a1e:	96 e0       	ldi	r25, 0x06	; 6
    4a20:	9f 93       	push	r25
    4a22:	8f 93       	push	r24
    4a24:	87 ec       	ldi	r24, 0xC7	; 199
    4a26:	99 e1       	ldi	r25, 0x19	; 25
    4a28:	9f 93       	push	r25
    4a2a:	8f 93       	push	r24
    4a2c:	0e 94 e4 31 	call	0x63c8	; 0x63c8 <sprintf>
    4a30:	60 e0       	ldi	r22, 0x00	; 0
    4a32:	70 e0       	ldi	r23, 0x00	; 0
    4a34:	87 ec       	ldi	r24, 0xC7	; 199
    4a36:	99 e1       	ldi	r25, 0x19	; 25
    4a38:	28 de       	rcall	.-944    	; 0x468a <_upload_message_rc>
    4a3a:	0f 90       	pop	r0
    4a3c:	0f 90       	pop	r0
    4a3e:	0f 90       	pop	r0
    4a40:	0f 90       	pop	r0
    4a42:	0f 90       	pop	r0
    4a44:	0f 90       	pop	r0
    4a46:	08 95       	ret

00004a48 <lora_driver_configure_to_eu868>:
    4a48:	2f 92       	push	r2
    4a4a:	3f 92       	push	r3
    4a4c:	4f 92       	push	r4
    4a4e:	5f 92       	push	r5
    4a50:	6f 92       	push	r6
    4a52:	7f 92       	push	r7
    4a54:	8f 92       	push	r8
    4a56:	9f 92       	push	r9
    4a58:	af 92       	push	r10
    4a5a:	bf 92       	push	r11
    4a5c:	cf 92       	push	r12
    4a5e:	df 92       	push	r13
    4a60:	ef 92       	push	r14
    4a62:	ff 92       	push	r15
    4a64:	0f 93       	push	r16
    4a66:	1f 93       	push	r17
    4a68:	cf 93       	push	r28
    4a6a:	df 93       	push	r29
    4a6c:	cd b7       	in	r28, 0x3d	; 61
    4a6e:	de b7       	in	r29, 0x3e	; 62
    4a70:	a0 97       	sbiw	r28, 0x20	; 32
    4a72:	0f b6       	in	r0, 0x3f	; 63
    4a74:	f8 94       	cli
    4a76:	de bf       	out	0x3e, r29	; 62
    4a78:	0f be       	out	0x3f, r0	; 63
    4a7a:	cd bf       	out	0x3d, r28	; 61
    4a7c:	68 e3       	ldi	r22, 0x38	; 56
    4a7e:	76 e0       	ldi	r23, 0x06	; 6
    4a80:	84 e4       	ldi	r24, 0x44	; 68
    4a82:	96 e0       	ldi	r25, 0x06	; 6
    4a84:	33 dd       	rcall	.-1434   	; 0x44ec <_upload_message>
    4a86:	8c dd       	rcall	.-1256   	; 0x45a0 <_reply2return_code>
    4a88:	81 11       	cpse	r24, r1
    4a8a:	a3 c0       	rjmp	.+326    	; 0x4bd2 <lora_driver_configure_to_eu868+0x18a>
    4a8c:	80 e2       	ldi	r24, 0x20	; 32
    4a8e:	e5 e2       	ldi	r30, 0x25	; 37
    4a90:	f2 e0       	ldi	r31, 0x02	; 2
    4a92:	de 01       	movw	r26, r28
    4a94:	11 96       	adiw	r26, 0x01	; 1
    4a96:	01 90       	ld	r0, Z+
    4a98:	0d 92       	st	X+, r0
    4a9a:	8a 95       	dec	r24
    4a9c:	e1 f7       	brne	.-8      	; 0x4a96 <lora_driver_configure_to_eu868+0x4e>
    4a9e:	9e 01       	movw	r18, r28
    4aa0:	2f 5f       	subi	r18, 0xFF	; 255
    4aa2:	3f 4f       	sbci	r19, 0xFF	; 255
    4aa4:	69 01       	movw	r12, r18
    4aa6:	e1 2c       	mov	r14, r1
    4aa8:	f1 2c       	mov	r15, r1
    4aaa:	0f 2e       	mov	r0, r31
    4aac:	f0 e5       	ldi	r31, 0x50	; 80
    4aae:	af 2e       	mov	r10, r31
    4ab0:	f6 e0       	ldi	r31, 0x06	; 6
    4ab2:	bf 2e       	mov	r11, r31
    4ab4:	f0 2d       	mov	r31, r0
    4ab6:	07 ec       	ldi	r16, 0xC7	; 199
    4ab8:	19 e1       	ldi	r17, 0x19	; 25
    4aba:	0f 2e       	mov	r0, r31
    4abc:	f9 e6       	ldi	r31, 0x69	; 105
    4abe:	4f 2e       	mov	r4, r31
    4ac0:	f6 e0       	ldi	r31, 0x06	; 6
    4ac2:	5f 2e       	mov	r5, r31
    4ac4:	f0 2d       	mov	r31, r0
    4ac6:	0f 2e       	mov	r0, r31
    4ac8:	f0 e8       	ldi	r31, 0x80	; 128
    4aca:	8f 2e       	mov	r8, r31
    4acc:	f6 e0       	ldi	r31, 0x06	; 6
    4ace:	9f 2e       	mov	r9, r31
    4ad0:	f0 2d       	mov	r31, r0
    4ad2:	0f 2e       	mov	r0, r31
    4ad4:	fa e9       	ldi	r31, 0x9A	; 154
    4ad6:	6f 2e       	mov	r6, r31
    4ad8:	f6 e0       	ldi	r31, 0x06	; 6
    4ada:	7f 2e       	mov	r7, r31
    4adc:	f0 2d       	mov	r31, r0
    4ade:	3e 2c       	mov	r3, r14
    4ae0:	2f 2c       	mov	r2, r15
    4ae2:	ff 92       	push	r15
    4ae4:	ef 92       	push	r14
    4ae6:	bf 92       	push	r11
    4ae8:	af 92       	push	r10
    4aea:	1f 93       	push	r17
    4aec:	0f 93       	push	r16
    4aee:	0e 94 e4 31 	call	0x63c8	; 0x63c8 <sprintf>
    4af2:	60 e0       	ldi	r22, 0x00	; 0
    4af4:	70 e0       	ldi	r23, 0x00	; 0
    4af6:	c8 01       	movw	r24, r16
    4af8:	f9 dc       	rcall	.-1550   	; 0x44ec <_upload_message>
    4afa:	52 dd       	rcall	.-1372   	; 0x45a0 <_reply2return_code>
    4afc:	0f 90       	pop	r0
    4afe:	0f 90       	pop	r0
    4b00:	0f 90       	pop	r0
    4b02:	0f 90       	pop	r0
    4b04:	0f 90       	pop	r0
    4b06:	0f 90       	pop	r0
    4b08:	81 11       	cpse	r24, r1
    4b0a:	63 c0       	rjmp	.+198    	; 0x4bd2 <lora_driver_configure_to_eu868+0x18a>
    4b0c:	32 e0       	ldi	r19, 0x02	; 2
    4b0e:	3e 15       	cp	r19, r14
    4b10:	e8 f4       	brcc	.+58     	; 0x4b4c <lora_driver_configure_to_eu868+0x104>
    4b12:	f6 01       	movw	r30, r12
    4b14:	83 81       	ldd	r24, Z+3	; 0x03
    4b16:	8f 93       	push	r24
    4b18:	82 81       	ldd	r24, Z+2	; 0x02
    4b1a:	8f 93       	push	r24
    4b1c:	81 81       	ldd	r24, Z+1	; 0x01
    4b1e:	8f 93       	push	r24
    4b20:	80 81       	ld	r24, Z
    4b22:	8f 93       	push	r24
    4b24:	ff 92       	push	r15
    4b26:	ef 92       	push	r14
    4b28:	5f 92       	push	r5
    4b2a:	4f 92       	push	r4
    4b2c:	1f 93       	push	r17
    4b2e:	0f 93       	push	r16
    4b30:	0e 94 e4 31 	call	0x63c8	; 0x63c8 <sprintf>
    4b34:	60 e0       	ldi	r22, 0x00	; 0
    4b36:	70 e0       	ldi	r23, 0x00	; 0
    4b38:	c8 01       	movw	r24, r16
    4b3a:	d8 dc       	rcall	.-1616   	; 0x44ec <_upload_message>
    4b3c:	31 dd       	rcall	.-1438   	; 0x45a0 <_reply2return_code>
    4b3e:	0f b6       	in	r0, 0x3f	; 63
    4b40:	f8 94       	cli
    4b42:	de bf       	out	0x3e, r29	; 62
    4b44:	0f be       	out	0x3f, r0	; 63
    4b46:	cd bf       	out	0x3d, r28	; 61
    4b48:	81 11       	cpse	r24, r1
    4b4a:	43 c0       	rjmp	.+134    	; 0x4bd2 <lora_driver_configure_to_eu868+0x18a>
    4b4c:	2f 92       	push	r2
    4b4e:	3f 92       	push	r3
    4b50:	9f 92       	push	r9
    4b52:	8f 92       	push	r8
    4b54:	1f 93       	push	r17
    4b56:	0f 93       	push	r16
    4b58:	0e 94 e4 31 	call	0x63c8	; 0x63c8 <sprintf>
    4b5c:	60 e0       	ldi	r22, 0x00	; 0
    4b5e:	70 e0       	ldi	r23, 0x00	; 0
    4b60:	c8 01       	movw	r24, r16
    4b62:	c4 dc       	rcall	.-1656   	; 0x44ec <_upload_message>
    4b64:	1d dd       	rcall	.-1478   	; 0x45a0 <_reply2return_code>
    4b66:	0f 90       	pop	r0
    4b68:	0f 90       	pop	r0
    4b6a:	0f 90       	pop	r0
    4b6c:	0f 90       	pop	r0
    4b6e:	0f 90       	pop	r0
    4b70:	0f 90       	pop	r0
    4b72:	81 11       	cpse	r24, r1
    4b74:	2e c0       	rjmp	.+92     	; 0x4bd2 <lora_driver_configure_to_eu868+0x18a>
    4b76:	2f 92       	push	r2
    4b78:	3f 92       	push	r3
    4b7a:	7f 92       	push	r7
    4b7c:	6f 92       	push	r6
    4b7e:	1f 93       	push	r17
    4b80:	0f 93       	push	r16
    4b82:	0e 94 e4 31 	call	0x63c8	; 0x63c8 <sprintf>
    4b86:	60 e0       	ldi	r22, 0x00	; 0
    4b88:	70 e0       	ldi	r23, 0x00	; 0
    4b8a:	c8 01       	movw	r24, r16
    4b8c:	af dc       	rcall	.-1698   	; 0x44ec <_upload_message>
    4b8e:	08 dd       	rcall	.-1520   	; 0x45a0 <_reply2return_code>
    4b90:	0f 90       	pop	r0
    4b92:	0f 90       	pop	r0
    4b94:	0f 90       	pop	r0
    4b96:	0f 90       	pop	r0
    4b98:	0f 90       	pop	r0
    4b9a:	0f 90       	pop	r0
    4b9c:	81 11       	cpse	r24, r1
    4b9e:	19 c0       	rjmp	.+50     	; 0x4bd2 <lora_driver_configure_to_eu868+0x18a>
    4ba0:	3f ef       	ldi	r19, 0xFF	; 255
    4ba2:	e3 1a       	sub	r14, r19
    4ba4:	f3 0a       	sbc	r15, r19
    4ba6:	84 e0       	ldi	r24, 0x04	; 4
    4ba8:	c8 0e       	add	r12, r24
    4baa:	d1 1c       	adc	r13, r1
    4bac:	98 e0       	ldi	r25, 0x08	; 8
    4bae:	e9 16       	cp	r14, r25
    4bb0:	f1 04       	cpc	r15, r1
    4bb2:	09 f0       	breq	.+2      	; 0x4bb6 <lora_driver_configure_to_eu868+0x16e>
    4bb4:	94 cf       	rjmp	.-216    	; 0x4ade <lora_driver_configure_to_eu868+0x96>
    4bb6:	60 e0       	ldi	r22, 0x00	; 0
    4bb8:	70 e0       	ldi	r23, 0x00	; 0
    4bba:	82 eb       	ldi	r24, 0xB2	; 178
    4bbc:	96 e0       	ldi	r25, 0x06	; 6
    4bbe:	96 dc       	rcall	.-1748   	; 0x44ec <_upload_message>
    4bc0:	ef dc       	rcall	.-1570   	; 0x45a0 <_reply2return_code>
    4bc2:	81 11       	cpse	r24, r1
    4bc4:	06 c0       	rjmp	.+12     	; 0x4bd2 <lora_driver_configure_to_eu868+0x18a>
    4bc6:	60 e0       	ldi	r22, 0x00	; 0
    4bc8:	70 e0       	ldi	r23, 0x00	; 0
    4bca:	83 ec       	ldi	r24, 0xC3	; 195
    4bcc:	96 e0       	ldi	r25, 0x06	; 6
    4bce:	8e dc       	rcall	.-1764   	; 0x44ec <_upload_message>
    4bd0:	e7 dc       	rcall	.-1586   	; 0x45a0 <_reply2return_code>
    4bd2:	a0 96       	adiw	r28, 0x20	; 32
    4bd4:	0f b6       	in	r0, 0x3f	; 63
    4bd6:	f8 94       	cli
    4bd8:	de bf       	out	0x3e, r29	; 62
    4bda:	0f be       	out	0x3f, r0	; 63
    4bdc:	cd bf       	out	0x3d, r28	; 61
    4bde:	df 91       	pop	r29
    4be0:	cf 91       	pop	r28
    4be2:	1f 91       	pop	r17
    4be4:	0f 91       	pop	r16
    4be6:	ff 90       	pop	r15
    4be8:	ef 90       	pop	r14
    4bea:	df 90       	pop	r13
    4bec:	cf 90       	pop	r12
    4bee:	bf 90       	pop	r11
    4bf0:	af 90       	pop	r10
    4bf2:	9f 90       	pop	r9
    4bf4:	8f 90       	pop	r8
    4bf6:	7f 90       	pop	r7
    4bf8:	6f 90       	pop	r6
    4bfa:	5f 90       	pop	r5
    4bfc:	4f 90       	pop	r4
    4bfe:	3f 90       	pop	r3
    4c00:	2f 90       	pop	r2
    4c02:	08 95       	ret

00004c04 <lora_driver_set_otaa_identity>:
    4c04:	ef 92       	push	r14
    4c06:	ff 92       	push	r15
    4c08:	0f 93       	push	r16
    4c0a:	1f 93       	push	r17
    4c0c:	cf 93       	push	r28
    4c0e:	df 93       	push	r29
    4c10:	ec 01       	movw	r28, r24
    4c12:	8b 01       	movw	r16, r22
    4c14:	7a 01       	movw	r14, r20
    4c16:	81 e0       	ldi	r24, 0x01	; 1
    4c18:	f4 de       	rcall	.-536    	; 0x4a02 <lora_driver_set_adaptive_data_rate>
    4c1a:	81 11       	cpse	r24, r1
    4c1c:	0d c0       	rjmp	.+26     	; 0x4c38 <lora_driver_set_otaa_identity+0x34>
    4c1e:	ce 01       	movw	r24, r28
    4c20:	d4 dd       	rcall	.-1112   	; 0x47ca <lora_driver_set_application_identifier>
    4c22:	81 11       	cpse	r24, r1
    4c24:	09 c0       	rjmp	.+18     	; 0x4c38 <lora_driver_set_otaa_identity+0x34>
    4c26:	c8 01       	movw	r24, r16
    4c28:	e1 dd       	rcall	.-1086   	; 0x47ec <lora_driver_set_application_key>
    4c2a:	81 11       	cpse	r24, r1
    4c2c:	05 c0       	rjmp	.+10     	; 0x4c38 <lora_driver_set_otaa_identity+0x34>
    4c2e:	c7 01       	movw	r24, r14
    4c30:	bb dd       	rcall	.-1162   	; 0x47a8 <lora_driver_set_device_identifier>
    4c32:	81 11       	cpse	r24, r1
    4c34:	01 c0       	rjmp	.+2      	; 0x4c38 <lora_driver_set_otaa_identity+0x34>
    4c36:	eb dd       	rcall	.-1066   	; 0x480e <lora_driver_save_mac>
    4c38:	df 91       	pop	r29
    4c3a:	cf 91       	pop	r28
    4c3c:	1f 91       	pop	r17
    4c3e:	0f 91       	pop	r16
    4c40:	ff 90       	pop	r15
    4c42:	ef 90       	pop	r14
    4c44:	08 95       	ret

00004c46 <lora_driver_map_return_code_to_text>:
    4c46:	90 e0       	ldi	r25, 0x00	; 0
    4c48:	fc 01       	movw	r30, r24
    4c4a:	ee 0f       	add	r30, r30
    4c4c:	ff 1f       	adc	r31, r31
    4c4e:	8e 0f       	add	r24, r30
    4c50:	9f 1f       	adc	r25, r31
    4c52:	fc 01       	movw	r30, r24
    4c54:	e4 57       	subi	r30, 0x74	; 116
    4c56:	f8 4f       	sbci	r31, 0xF8	; 248
    4c58:	81 81       	ldd	r24, Z+1	; 0x01
    4c5a:	92 81       	ldd	r25, Z+2	; 0x02
    4c5c:	08 95       	ret

00004c5e <decode_port_no>:
    4c5e:	dc 01       	movw	r26, r24
    4c60:	00 97       	sbiw	r24, 0x00	; 0
    4c62:	29 f1       	breq	.+74     	; 0x4cae <decode_port_no+0x50>
    4c64:	fb 01       	movw	r30, r22
    4c66:	20 81       	ld	r18, Z
    4c68:	fc 01       	movw	r30, r24
    4c6a:	01 90       	ld	r0, Z+
    4c6c:	00 20       	and	r0, r0
    4c6e:	e9 f7       	brne	.-6      	; 0x4c6a <decode_port_no+0xc>
    4c70:	31 97       	sbiw	r30, 0x01	; 1
    4c72:	e8 1b       	sub	r30, r24
    4c74:	f9 0b       	sbc	r31, r25
    4c76:	82 2f       	mov	r24, r18
    4c78:	90 e0       	ldi	r25, 0x00	; 0
    4c7a:	e8 17       	cp	r30, r24
    4c7c:	f9 07       	cpc	r31, r25
    4c7e:	c8 f0       	brcs	.+50     	; 0x4cb2 <decode_port_no+0x54>
    4c80:	80 e0       	ldi	r24, 0x00	; 0
    4c82:	08 c0       	rjmp	.+16     	; 0x4c94 <decode_port_no+0x36>
    4c84:	88 0f       	add	r24, r24
    4c86:	38 2f       	mov	r19, r24
    4c88:	33 0f       	add	r19, r19
    4c8a:	33 0f       	add	r19, r19
    4c8c:	83 0f       	add	r24, r19
    4c8e:	80 53       	subi	r24, 0x30	; 48
    4c90:	89 0f       	add	r24, r25
    4c92:	2f 5f       	subi	r18, 0xFF	; 255
    4c94:	fd 01       	movw	r30, r26
    4c96:	e2 0f       	add	r30, r18
    4c98:	f1 1d       	adc	r31, r1
    4c9a:	90 81       	ld	r25, Z
    4c9c:	30 ed       	ldi	r19, 0xD0	; 208
    4c9e:	39 0f       	add	r19, r25
    4ca0:	3a 30       	cpi	r19, 0x0A	; 10
    4ca2:	10 f4       	brcc	.+4      	; 0x4ca8 <decode_port_no+0x4a>
    4ca4:	91 11       	cpse	r25, r1
    4ca6:	ee cf       	rjmp	.-36     	; 0x4c84 <decode_port_no+0x26>
    4ca8:	fb 01       	movw	r30, r22
    4caa:	20 83       	st	Z, r18
    4cac:	08 95       	ret
    4cae:	80 e0       	ldi	r24, 0x00	; 0
    4cb0:	08 95       	ret
    4cb2:	80 e0       	ldi	r24, 0x00	; 0
    4cb4:	08 95       	ret

00004cb6 <decode_hexadecimal_string_bytes>:
    4cb6:	0f 93       	push	r16
    4cb8:	1f 93       	push	r17
    4cba:	cf 93       	push	r28
    4cbc:	df 93       	push	r29
    4cbe:	dc 01       	movw	r26, r24
    4cc0:	ea 01       	movw	r28, r20
    4cc2:	20 97       	sbiw	r28, 0x00	; 0
    4cc4:	e1 f1       	breq	.+120    	; 0x4d3e <decode_hexadecimal_string_bytes+0x88>
    4cc6:	fa 01       	movw	r30, r20
    4cc8:	01 90       	ld	r0, Z+
    4cca:	00 20       	and	r0, r0
    4ccc:	e9 f7       	brne	.-6      	; 0x4cc8 <decode_hexadecimal_string_bytes+0x12>
    4cce:	31 97       	sbiw	r30, 0x01	; 1
    4cd0:	e4 1b       	sub	r30, r20
    4cd2:	f5 0b       	sbc	r31, r21
    4cd4:	32 97       	sbiw	r30, 0x02	; 2
    4cd6:	10 f5       	brcc	.+68     	; 0x4d1c <decode_hexadecimal_string_bytes+0x66>
    4cd8:	32 c0       	rjmp	.+100    	; 0x4d3e <decode_hexadecimal_string_bytes+0x88>
    4cda:	8d 01       	movw	r16, r26
    4cdc:	04 0f       	add	r16, r20
    4cde:	15 1f       	adc	r17, r21
    4ce0:	30 e0       	ldi	r19, 0x00	; 0
    4ce2:	ae 01       	movw	r20, r28
    4ce4:	42 0f       	add	r20, r18
    4ce6:	53 1f       	adc	r21, r19
    4ce8:	fa 01       	movw	r30, r20
    4cea:	90 81       	ld	r25, Z
    4cec:	91 34       	cpi	r25, 0x41	; 65
    4cee:	28 f0       	brcs	.+10     	; 0x4cfa <decode_hexadecimal_string_bytes+0x44>
    4cf0:	97 53       	subi	r25, 0x37	; 55
    4cf2:	59 2f       	mov	r21, r25
    4cf4:	52 95       	swap	r21
    4cf6:	50 7f       	andi	r21, 0xF0	; 240
    4cf8:	03 c0       	rjmp	.+6      	; 0x4d00 <decode_hexadecimal_string_bytes+0x4a>
    4cfa:	59 2f       	mov	r21, r25
    4cfc:	52 95       	swap	r21
    4cfe:	50 7f       	andi	r21, 0xF0	; 240
    4d00:	2c 0f       	add	r18, r28
    4d02:	3d 1f       	adc	r19, r29
    4d04:	f9 01       	movw	r30, r18
    4d06:	91 81       	ldd	r25, Z+1	; 0x01
    4d08:	91 34       	cpi	r25, 0x41	; 65
    4d0a:	10 f0       	brcs	.+4      	; 0x4d10 <decode_hexadecimal_string_bytes+0x5a>
    4d0c:	97 53       	subi	r25, 0x37	; 55
    4d0e:	01 c0       	rjmp	.+2      	; 0x4d12 <decode_hexadecimal_string_bytes+0x5c>
    4d10:	90 53       	subi	r25, 0x30	; 48
    4d12:	95 0f       	add	r25, r21
    4d14:	f8 01       	movw	r30, r16
    4d16:	90 83       	st	Z, r25
    4d18:	8f 5f       	subi	r24, 0xFF	; 255
    4d1a:	01 c0       	rjmp	.+2      	; 0x4d1e <decode_hexadecimal_string_bytes+0x68>
    4d1c:	80 e0       	ldi	r24, 0x00	; 0
    4d1e:	28 2f       	mov	r18, r24
    4d20:	22 0f       	add	r18, r18
    4d22:	48 2f       	mov	r20, r24
    4d24:	50 e0       	ldi	r21, 0x00	; 0
    4d26:	fe 01       	movw	r30, r28
    4d28:	01 90       	ld	r0, Z+
    4d2a:	00 20       	and	r0, r0
    4d2c:	e9 f7       	brne	.-6      	; 0x4d28 <decode_hexadecimal_string_bytes+0x72>
    4d2e:	31 97       	sbiw	r30, 0x01	; 1
    4d30:	ec 1b       	sub	r30, r28
    4d32:	fd 0b       	sbc	r31, r29
    4d34:	4e 17       	cp	r20, r30
    4d36:	5f 07       	cpc	r21, r31
    4d38:	10 f4       	brcc	.+4      	; 0x4d3e <decode_hexadecimal_string_bytes+0x88>
    4d3a:	86 13       	cpse	r24, r22
    4d3c:	ce cf       	rjmp	.-100    	; 0x4cda <decode_hexadecimal_string_bytes+0x24>
    4d3e:	df 91       	pop	r29
    4d40:	cf 91       	pop	r28
    4d42:	1f 91       	pop	r17
    4d44:	0f 91       	pop	r16
    4d46:	08 95       	ret

00004d48 <reg_read_register>:
    4d48:	fc 01       	movw	r30, r24
    4d4a:	80 81       	ld	r24, Z
    4d4c:	08 95       	ret

00004d4e <reg_read_bit>:
    4d4e:	fc 01       	movw	r30, r24
    4d50:	20 81       	ld	r18, Z
    4d52:	81 e0       	ldi	r24, 0x01	; 1
    4d54:	90 e0       	ldi	r25, 0x00	; 0
    4d56:	02 c0       	rjmp	.+4      	; 0x4d5c <reg_read_bit+0xe>
    4d58:	88 0f       	add	r24, r24
    4d5a:	99 1f       	adc	r25, r25
    4d5c:	6a 95       	dec	r22
    4d5e:	e2 f7       	brpl	.-8      	; 0x4d58 <reg_read_bit+0xa>
    4d60:	82 23       	and	r24, r18
    4d62:	08 95       	ret

00004d64 <reg_read_bits>:
    4d64:	fc 01       	movw	r30, r24
    4d66:	80 81       	ld	r24, Z
    4d68:	86 23       	and	r24, r22
    4d6a:	08 95       	ret

00004d6c <reg_set_register>:
    4d6c:	fc 01       	movw	r30, r24
    4d6e:	60 83       	st	Z, r22
    4d70:	08 95       	ret

00004d72 <reg_clear_register>:
    4d72:	fc 01       	movw	r30, r24
    4d74:	10 82       	st	Z, r1
    4d76:	08 95       	ret

00004d78 <reg_set_bit>:
    4d78:	fc 01       	movw	r30, r24
    4d7a:	40 81       	ld	r20, Z
    4d7c:	21 e0       	ldi	r18, 0x01	; 1
    4d7e:	30 e0       	ldi	r19, 0x00	; 0
    4d80:	02 c0       	rjmp	.+4      	; 0x4d86 <reg_set_bit+0xe>
    4d82:	22 0f       	add	r18, r18
    4d84:	33 1f       	adc	r19, r19
    4d86:	6a 95       	dec	r22
    4d88:	e2 f7       	brpl	.-8      	; 0x4d82 <reg_set_bit+0xa>
    4d8a:	24 2b       	or	r18, r20
    4d8c:	20 83       	st	Z, r18
    4d8e:	08 95       	ret

00004d90 <reg_set_bits>:
    4d90:	fc 01       	movw	r30, r24
    4d92:	20 81       	ld	r18, Z
    4d94:	62 2b       	or	r22, r18
    4d96:	60 83       	st	Z, r22
    4d98:	08 95       	ret

00004d9a <reg_toggle_bit>:
    4d9a:	fc 01       	movw	r30, r24
    4d9c:	40 81       	ld	r20, Z
    4d9e:	21 e0       	ldi	r18, 0x01	; 1
    4da0:	30 e0       	ldi	r19, 0x00	; 0
    4da2:	02 c0       	rjmp	.+4      	; 0x4da8 <reg_toggle_bit+0xe>
    4da4:	22 0f       	add	r18, r18
    4da6:	33 1f       	adc	r19, r19
    4da8:	6a 95       	dec	r22
    4daa:	e2 f7       	brpl	.-8      	; 0x4da4 <reg_toggle_bit+0xa>
    4dac:	24 27       	eor	r18, r20
    4dae:	20 83       	st	Z, r18
    4db0:	08 95       	ret

00004db2 <reg_toggle_bits>:
    4db2:	fc 01       	movw	r30, r24
    4db4:	20 81       	ld	r18, Z
    4db6:	62 27       	eor	r22, r18
    4db8:	60 83       	st	Z, r22
    4dba:	08 95       	ret

00004dbc <reg_clear_bit>:
    4dbc:	fc 01       	movw	r30, r24
    4dbe:	90 81       	ld	r25, Z
    4dc0:	21 e0       	ldi	r18, 0x01	; 1
    4dc2:	30 e0       	ldi	r19, 0x00	; 0
    4dc4:	02 c0       	rjmp	.+4      	; 0x4dca <reg_clear_bit+0xe>
    4dc6:	22 0f       	add	r18, r18
    4dc8:	33 1f       	adc	r19, r19
    4dca:	6a 95       	dec	r22
    4dcc:	e2 f7       	brpl	.-8      	; 0x4dc6 <reg_clear_bit+0xa>
    4dce:	20 95       	com	r18
    4dd0:	29 23       	and	r18, r25
    4dd2:	20 83       	st	Z, r18
    4dd4:	08 95       	ret

00004dd6 <reg_clear_bits>:
    4dd6:	fc 01       	movw	r30, r24
    4dd8:	90 81       	ld	r25, Z
    4dda:	60 95       	com	r22
    4ddc:	69 23       	and	r22, r25
    4dde:	60 83       	st	Z, r22
    4de0:	08 95       	ret

00004de2 <_serial_call_back>:
    4de2:	80 91 24 1a 	lds	r24, 0x1A24	; 0x801a24 <crc_sum.1941>
    4de6:	86 0f       	add	r24, r22
    4de8:	80 93 24 1a 	sts	0x1A24, r24	; 0x801a24 <crc_sum.1941>
    4dec:	90 91 27 1a 	lds	r25, 0x1A27	; 0x801a27 <_mh_state>
    4df0:	91 30       	cpi	r25, 0x01	; 1
    4df2:	79 f0       	breq	.+30     	; 0x4e12 <_serial_call_back+0x30>
    4df4:	28 f0       	brcs	.+10     	; 0x4e00 <_serial_call_back+0x1e>
    4df6:	92 30       	cpi	r25, 0x02	; 2
    4df8:	a9 f0       	breq	.+42     	; 0x4e24 <_serial_call_back+0x42>
    4dfa:	93 30       	cpi	r25, 0x03	; 3
    4dfc:	19 f1       	breq	.+70     	; 0x4e44 <_serial_call_back+0x62>
    4dfe:	08 95       	ret
    4e00:	6f 3f       	cpi	r22, 0xFF	; 255
    4e02:	09 f0       	breq	.+2      	; 0x4e06 <_serial_call_back+0x24>
    4e04:	48 c0       	rjmp	.+144    	; 0x4e96 <_serial_call_back+0xb4>
    4e06:	10 92 24 1a 	sts	0x1A24, r1	; 0x801a24 <crc_sum.1941>
    4e0a:	81 e0       	ldi	r24, 0x01	; 1
    4e0c:	80 93 27 1a 	sts	0x1A27, r24	; 0x801a27 <_mh_state>
    4e10:	08 95       	ret
    4e12:	66 38       	cpi	r22, 0x86	; 134
    4e14:	09 f0       	breq	.+2      	; 0x4e18 <_serial_call_back+0x36>
    4e16:	3f c0       	rjmp	.+126    	; 0x4e96 <_serial_call_back+0xb4>
    4e18:	10 92 23 1a 	sts	0x1A23, r1	; 0x801a23 <inDex.1939>
    4e1c:	82 e0       	ldi	r24, 0x02	; 2
    4e1e:	80 93 27 1a 	sts	0x1A27, r24	; 0x801a27 <_mh_state>
    4e22:	08 95       	ret
    4e24:	e0 91 23 1a 	lds	r30, 0x1A23	; 0x801a23 <inDex.1939>
    4e28:	81 e0       	ldi	r24, 0x01	; 1
    4e2a:	8e 0f       	add	r24, r30
    4e2c:	80 93 23 1a 	sts	0x1A23, r24	; 0x801a23 <inDex.1939>
    4e30:	f0 e0       	ldi	r31, 0x00	; 0
    4e32:	ef 5d       	subi	r30, 0xDF	; 223
    4e34:	f5 4e       	sbci	r31, 0xE5	; 229
    4e36:	60 83       	st	Z, r22
    4e38:	82 30       	cpi	r24, 0x02	; 2
    4e3a:	69 f5       	brne	.+90     	; 0x4e96 <_serial_call_back+0xb4>
    4e3c:	83 e0       	ldi	r24, 0x03	; 3
    4e3e:	80 93 27 1a 	sts	0x1A27, r24	; 0x801a27 <_mh_state>
    4e42:	08 95       	ret
    4e44:	90 91 23 1a 	lds	r25, 0x1A23	; 0x801a23 <inDex.1939>
    4e48:	21 e0       	ldi	r18, 0x01	; 1
    4e4a:	29 0f       	add	r18, r25
    4e4c:	20 93 23 1a 	sts	0x1A23, r18	; 0x801a23 <inDex.1939>
    4e50:	96 30       	cpi	r25, 0x06	; 6
    4e52:	09 f5       	brne	.+66     	; 0x4e96 <_serial_call_back+0xb4>
    4e54:	81 11       	cpse	r24, r1
    4e56:	0e c0       	rjmp	.+28     	; 0x4e74 <_serial_call_back+0x92>
    4e58:	e1 e2       	ldi	r30, 0x21	; 33
    4e5a:	fa e1       	ldi	r31, 0x1A	; 26
    4e5c:	80 81       	ld	r24, Z
    4e5e:	90 e0       	ldi	r25, 0x00	; 0
    4e60:	98 2f       	mov	r25, r24
    4e62:	88 27       	eor	r24, r24
    4e64:	21 81       	ldd	r18, Z+1	; 0x01
    4e66:	82 0f       	add	r24, r18
    4e68:	91 1d       	adc	r25, r1
    4e6a:	90 93 29 1a 	sts	0x1A29, r25	; 0x801a29 <_ppm+0x1>
    4e6e:	80 93 28 1a 	sts	0x1A28, r24	; 0x801a28 <_ppm>
    4e72:	04 c0       	rjmp	.+8      	; 0x4e7c <_serial_call_back+0x9a>
    4e74:	10 92 29 1a 	sts	0x1A29, r1	; 0x801a29 <_ppm+0x1>
    4e78:	10 92 28 1a 	sts	0x1A28, r1	; 0x801a28 <_ppm>
    4e7c:	10 92 27 1a 	sts	0x1A27, r1	; 0x801a27 <_mh_state>
    4e80:	e0 91 25 1a 	lds	r30, 0x1A25	; 0x801a25 <_app_call_back>
    4e84:	f0 91 26 1a 	lds	r31, 0x1A26	; 0x801a26 <_app_call_back+0x1>
    4e88:	30 97       	sbiw	r30, 0x00	; 0
    4e8a:	29 f0       	breq	.+10     	; 0x4e96 <_serial_call_back+0xb4>
    4e8c:	80 91 28 1a 	lds	r24, 0x1A28	; 0x801a28 <_ppm>
    4e90:	90 91 29 1a 	lds	r25, 0x1A29	; 0x801a29 <_ppm+0x1>
    4e94:	19 95       	eicall
    4e96:	08 95       	ret

00004e98 <mh_z19_create>:
    4e98:	8f 92       	push	r8
    4e9a:	9f 92       	push	r9
    4e9c:	af 92       	push	r10
    4e9e:	cf 92       	push	r12
    4ea0:	ef 92       	push	r14
    4ea2:	0f 93       	push	r16
    4ea4:	cf 93       	push	r28
    4ea6:	df 93       	push	r29
    4ea8:	eb 01       	movw	r28, r22
    4eaa:	0f 2e       	mov	r0, r31
    4eac:	f1 ef       	ldi	r31, 0xF1	; 241
    4eae:	8f 2e       	mov	r8, r31
    4eb0:	f6 e2       	ldi	r31, 0x26	; 38
    4eb2:	9f 2e       	mov	r9, r31
    4eb4:	f0 2d       	mov	r31, r0
    4eb6:	68 94       	set
    4eb8:	aa 24       	eor	r10, r10
    4eba:	a4 f8       	bld	r10, 4
    4ebc:	68 94       	set
    4ebe:	cc 24       	eor	r12, r12
    4ec0:	c4 f8       	bld	r12, 4
    4ec2:	e1 2c       	mov	r14, r1
    4ec4:	00 e0       	ldi	r16, 0x00	; 0
    4ec6:	23 e0       	ldi	r18, 0x03	; 3
    4ec8:	40 e8       	ldi	r20, 0x80	; 128
    4eca:	55 e2       	ldi	r21, 0x25	; 37
    4ecc:	60 e0       	ldi	r22, 0x00	; 0
    4ece:	70 e0       	ldi	r23, 0x00	; 0
    4ed0:	85 d0       	rcall	.+266    	; 0x4fdc <serial_new_instance>
    4ed2:	90 93 2b 1a 	sts	0x1A2B, r25	; 0x801a2b <_serial+0x1>
    4ed6:	80 93 2a 1a 	sts	0x1A2A, r24	; 0x801a2a <_serial>
    4eda:	d0 93 26 1a 	sts	0x1A26, r29	; 0x801a26 <_app_call_back+0x1>
    4ede:	c0 93 25 1a 	sts	0x1A25, r28	; 0x801a25 <_app_call_back>
    4ee2:	df 91       	pop	r29
    4ee4:	cf 91       	pop	r28
    4ee6:	0f 91       	pop	r16
    4ee8:	ef 90       	pop	r14
    4eea:	cf 90       	pop	r12
    4eec:	af 90       	pop	r10
    4eee:	9f 90       	pop	r9
    4ef0:	8f 90       	pop	r8
    4ef2:	08 95       	ret

00004ef4 <mh_z19_take_meassuring>:
    4ef4:	cf 93       	push	r28
    4ef6:	df 93       	push	r29
    4ef8:	cd b7       	in	r28, 0x3d	; 61
    4efa:	de b7       	in	r29, 0x3e	; 62
    4efc:	29 97       	sbiw	r28, 0x09	; 9
    4efe:	0f b6       	in	r0, 0x3f	; 63
    4f00:	f8 94       	cli
    4f02:	de bf       	out	0x3e, r29	; 62
    4f04:	0f be       	out	0x3f, r0	; 63
    4f06:	cd bf       	out	0x3d, r28	; 61
    4f08:	89 e0       	ldi	r24, 0x09	; 9
    4f0a:	e5 e4       	ldi	r30, 0x45	; 69
    4f0c:	f2 e0       	ldi	r31, 0x02	; 2
    4f0e:	9e 01       	movw	r18, r28
    4f10:	2f 5f       	subi	r18, 0xFF	; 255
    4f12:	3f 4f       	sbci	r19, 0xFF	; 255
    4f14:	d9 01       	movw	r26, r18
    4f16:	01 90       	ld	r0, Z+
    4f18:	0d 92       	st	X+, r0
    4f1a:	8a 95       	dec	r24
    4f1c:	e1 f7       	brne	.-8      	; 0x4f16 <mh_z19_take_meassuring+0x22>
    4f1e:	10 92 29 1a 	sts	0x1A29, r1	; 0x801a29 <_ppm+0x1>
    4f22:	10 92 28 1a 	sts	0x1A28, r1	; 0x801a28 <_ppm>
    4f26:	80 91 2a 1a 	lds	r24, 0x1A2A	; 0x801a2a <_serial>
    4f2a:	90 91 2b 1a 	lds	r25, 0x1A2B	; 0x801a2b <_serial+0x1>
    4f2e:	00 97       	sbiw	r24, 0x00	; 0
    4f30:	31 f0       	breq	.+12     	; 0x4f3e <mh_z19_take_meassuring+0x4a>
    4f32:	42 2f       	mov	r20, r18
    4f34:	53 2f       	mov	r21, r19
    4f36:	69 e0       	ldi	r22, 0x09	; 9
    4f38:	0c d1       	rcall	.+536    	; 0x5152 <serial_send_bytes>
    4f3a:	80 e0       	ldi	r24, 0x00	; 0
    4f3c:	01 c0       	rjmp	.+2      	; 0x4f40 <mh_z19_take_meassuring+0x4c>
    4f3e:	82 e0       	ldi	r24, 0x02	; 2
    4f40:	29 96       	adiw	r28, 0x09	; 9
    4f42:	0f b6       	in	r0, 0x3f	; 63
    4f44:	f8 94       	cli
    4f46:	de bf       	out	0x3e, r29	; 62
    4f48:	0f be       	out	0x3f, r0	; 63
    4f4a:	cd bf       	out	0x3d, r28	; 61
    4f4c:	df 91       	pop	r29
    4f4e:	cf 91       	pop	r28
    4f50:	08 95       	ret

00004f52 <mh_z19_get_co2_ppm>:
    4f52:	20 91 28 1a 	lds	r18, 0x1A28	; 0x801a28 <_ppm>
    4f56:	30 91 29 1a 	lds	r19, 0x1A29	; 0x801a29 <_ppm+0x1>
    4f5a:	21 15       	cp	r18, r1
    4f5c:	31 05       	cpc	r19, r1
    4f5e:	29 f4       	brne	.+10     	; 0x4f6a <mh_z19_get_co2_ppm+0x18>
    4f60:	fc 01       	movw	r30, r24
    4f62:	11 82       	std	Z+1, r1	; 0x01
    4f64:	10 82       	st	Z, r1
    4f66:	81 e0       	ldi	r24, 0x01	; 1
    4f68:	08 95       	ret
    4f6a:	fc 01       	movw	r30, r24
    4f6c:	31 83       	std	Z+1, r19	; 0x01
    4f6e:	20 83       	st	Z, r18
    4f70:	80 e0       	ldi	r24, 0x00	; 0
    4f72:	08 95       	ret

00004f74 <rcServoSet>:
    4f74:	65 36       	cpi	r22, 0x65	; 101
    4f76:	0c f0       	brlt	.+2      	; 0x4f7a <rcServoSet+0x6>
    4f78:	64 e6       	ldi	r22, 0x64	; 100
    4f7a:	6c 39       	cpi	r22, 0x9C	; 156
    4f7c:	0c f4       	brge	.+2      	; 0x4f80 <rcServoSet+0xc>
    4f7e:	6c e9       	ldi	r22, 0x9C	; 156
    4f80:	96 ef       	ldi	r25, 0xF6	; 246
    4f82:	69 02       	muls	r22, r25
    4f84:	b0 01       	movw	r22, r0
    4f86:	11 24       	eor	r1, r1
    4f88:	68 54       	subi	r22, 0x48	; 72
    4f8a:	74 4f       	sbci	r23, 0xF4	; 244
    4f8c:	81 11       	cpse	r24, r1
    4f8e:	05 c0       	rjmp	.+10     	; 0x4f9a <rcServoSet+0x26>
    4f90:	70 93 29 01 	sts	0x0129, r23	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
    4f94:	60 93 28 01 	sts	0x0128, r22	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
    4f98:	08 95       	ret
    4f9a:	70 93 2b 01 	sts	0x012B, r23	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
    4f9e:	60 93 2a 01 	sts	0x012A, r22	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
    4fa2:	08 95       	ret

00004fa4 <rcServoCreate>:
    4fa4:	ea e0       	ldi	r30, 0x0A	; 10
    4fa6:	f1 e0       	ldi	r31, 0x01	; 1
    4fa8:	80 81       	ld	r24, Z
    4faa:	88 61       	ori	r24, 0x18	; 24
    4fac:	80 83       	st	Z, r24
    4fae:	8f e3       	ldi	r24, 0x3F	; 63
    4fb0:	9c e9       	ldi	r25, 0x9C	; 156
    4fb2:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__TEXT_REGION_LENGTH__+0x700127>
    4fb6:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__TEXT_REGION_LENGTH__+0x700126>
    4fba:	60 e0       	ldi	r22, 0x00	; 0
    4fbc:	80 e0       	ldi	r24, 0x00	; 0
    4fbe:	da df       	rcall	.-76     	; 0x4f74 <rcServoSet>
    4fc0:	60 e0       	ldi	r22, 0x00	; 0
    4fc2:	81 e0       	ldi	r24, 0x01	; 1
    4fc4:	d7 df       	rcall	.-82     	; 0x4f74 <rcServoSet>
    4fc6:	e0 e2       	ldi	r30, 0x20	; 32
    4fc8:	f1 e0       	ldi	r31, 0x01	; 1
    4fca:	80 81       	ld	r24, Z
    4fcc:	82 6a       	ori	r24, 0xA2	; 162
    4fce:	80 83       	st	Z, r24
    4fd0:	e1 e2       	ldi	r30, 0x21	; 33
    4fd2:	f1 e0       	ldi	r31, 0x01	; 1
    4fd4:	80 81       	ld	r24, Z
    4fd6:	8a 61       	ori	r24, 0x1A	; 26
    4fd8:	80 83       	st	Z, r24
    4fda:	08 95       	ret

00004fdc <serial_new_instance>:
    4fdc:	2f 92       	push	r2
    4fde:	3f 92       	push	r3
    4fe0:	4f 92       	push	r4
    4fe2:	5f 92       	push	r5
    4fe4:	6f 92       	push	r6
    4fe6:	7f 92       	push	r7
    4fe8:	8f 92       	push	r8
    4fea:	9f 92       	push	r9
    4fec:	af 92       	push	r10
    4fee:	cf 92       	push	r12
    4ff0:	ef 92       	push	r14
    4ff2:	ff 92       	push	r15
    4ff4:	0f 93       	push	r16
    4ff6:	1f 93       	push	r17
    4ff8:	cf 93       	push	r28
    4ffa:	df 93       	push	r29
    4ffc:	cd b7       	in	r28, 0x3d	; 61
    4ffe:	de b7       	in	r29, 0x3e	; 62
    5000:	f8 2e       	mov	r15, r24
    5002:	2a 01       	movw	r4, r20
    5004:	3b 01       	movw	r6, r22
    5006:	88 e0       	ldi	r24, 0x08	; 8
    5008:	90 e0       	ldi	r25, 0x00	; 0
    500a:	c2 d7       	rcall	.+3972   	; 0x5f90 <malloc>
    500c:	8c 01       	movw	r16, r24
    500e:	8f 2d       	mov	r24, r15
    5010:	90 e0       	ldi	r25, 0x00	; 0
    5012:	88 0f       	add	r24, r24
    5014:	99 1f       	adc	r25, r25
    5016:	fc 01       	movw	r30, r24
    5018:	e4 5d       	subi	r30, 0xD4	; 212
    501a:	f5 4e       	sbci	r31, 0xE5	; 229
    501c:	11 83       	std	Z+1, r17	; 0x01
    501e:	00 83       	st	Z, r16
    5020:	fc 01       	movw	r30, r24
    5022:	e2 5f       	subi	r30, 0xF2	; 242
    5024:	fd 4f       	sbci	r31, 0xFD	; 253
    5026:	80 81       	ld	r24, Z
    5028:	91 81       	ldd	r25, Z+1	; 0x01
    502a:	d8 01       	movw	r26, r16
    502c:	8d 93       	st	X+, r24
    502e:	9c 93       	st	X, r25
    5030:	6c 2d       	mov	r22, r12
    5032:	70 e0       	ldi	r23, 0x00	; 0
    5034:	84 e0       	ldi	r24, 0x04	; 4
    5036:	90 e0       	ldi	r25, 0x00	; 0
    5038:	91 d7       	rcall	.+3874   	; 0x5f5c <calloc>
    503a:	1c 01       	movw	r2, r24
    503c:	61 e0       	ldi	r22, 0x01	; 1
    503e:	70 e0       	ldi	r23, 0x00	; 0
    5040:	86 e0       	ldi	r24, 0x06	; 6
    5042:	90 e0       	ldi	r25, 0x00	; 0
    5044:	8b d7       	rcall	.+3862   	; 0x5f5c <calloc>
    5046:	7c 01       	movw	r14, r24
    5048:	4c 2d       	mov	r20, r12
    504a:	b1 01       	movw	r22, r2
    504c:	2b d5       	rcall	.+2646   	; 0x5aa4 <fifo_init>
    504e:	f8 01       	movw	r30, r16
    5050:	f5 82       	std	Z+5, r15	; 0x05
    5052:	e4 82       	std	Z+4, r14	; 0x04
    5054:	6a 2d       	mov	r22, r10
    5056:	70 e0       	ldi	r23, 0x00	; 0
    5058:	84 e0       	ldi	r24, 0x04	; 4
    505a:	90 e0       	ldi	r25, 0x00	; 0
    505c:	7f d7       	rcall	.+3838   	; 0x5f5c <calloc>
    505e:	1c 01       	movw	r2, r24
    5060:	61 e0       	ldi	r22, 0x01	; 1
    5062:	70 e0       	ldi	r23, 0x00	; 0
    5064:	86 e0       	ldi	r24, 0x06	; 6
    5066:	90 e0       	ldi	r25, 0x00	; 0
    5068:	79 d7       	rcall	.+3826   	; 0x5f5c <calloc>
    506a:	7c 01       	movw	r14, r24
    506c:	4a 2d       	mov	r20, r10
    506e:	b1 01       	movw	r22, r2
    5070:	19 d5       	rcall	.+2610   	; 0x5aa4 <fifo_init>
    5072:	d8 01       	movw	r26, r16
    5074:	13 96       	adiw	r26, 0x03	; 3
    5076:	fc 92       	st	X, r15
    5078:	ee 92       	st	-X, r14
    507a:	12 97       	sbiw	r26, 0x02	; 2
    507c:	17 96       	adiw	r26, 0x07	; 7
    507e:	9c 92       	st	X, r9
    5080:	8e 92       	st	-X, r8
    5082:	16 97       	sbiw	r26, 0x06	; 6
    5084:	ff b6       	in	r15, 0x3f	; 63
    5086:	f8 94       	cli
    5088:	ed 91       	ld	r30, X+
    508a:	fc 91       	ld	r31, X
    508c:	11 97       	sbiw	r26, 0x01	; 1
    508e:	36 97       	sbiw	r30, 0x06	; 6
    5090:	80 81       	ld	r24, Z
    5092:	82 60       	ori	r24, 0x02	; 2
    5094:	80 83       	st	Z, r24
    5096:	8d 90       	ld	r8, X+
    5098:	9c 90       	ld	r9, X
    509a:	c3 01       	movw	r24, r6
    509c:	b2 01       	movw	r22, r4
    509e:	1c d6       	rcall	.+3128   	; 0x5cd8 <__floatunsisf>
    50a0:	20 e0       	ldi	r18, 0x00	; 0
    50a2:	30 e0       	ldi	r19, 0x00	; 0
    50a4:	40 e0       	ldi	r20, 0x00	; 0
    50a6:	51 e4       	ldi	r21, 0x41	; 65
    50a8:	a5 d6       	rcall	.+3402   	; 0x5df4 <__mulsf3>
    50aa:	9b 01       	movw	r18, r22
    50ac:	ac 01       	movw	r20, r24
    50ae:	60 e0       	ldi	r22, 0x00	; 0
    50b0:	74 e2       	ldi	r23, 0x24	; 36
    50b2:	84 e7       	ldi	r24, 0x74	; 116
    50b4:	9b e4       	ldi	r25, 0x4B	; 75
    50b6:	77 d5       	rcall	.+2798   	; 0x5ba6 <__divsf3>
    50b8:	20 e0       	ldi	r18, 0x00	; 0
    50ba:	30 e0       	ldi	r19, 0x00	; 0
    50bc:	40 e8       	ldi	r20, 0x80	; 128
    50be:	5f e3       	ldi	r21, 0x3F	; 63
    50c0:	0d d5       	rcall	.+2586   	; 0x5adc <__subsf3>
    50c2:	de d5       	rcall	.+3004   	; 0x5c80 <__fixunssfsi>
    50c4:	f4 01       	movw	r30, r8
    50c6:	32 97       	sbiw	r30, 0x02	; 2
    50c8:	60 83       	st	Z, r22
    50ca:	d8 01       	movw	r26, r16
    50cc:	ed 91       	ld	r30, X+
    50ce:	fc 91       	ld	r31, X
    50d0:	11 97       	sbiw	r26, 0x01	; 1
    50d2:	35 97       	sbiw	r30, 0x05	; 5
    50d4:	88 e9       	ldi	r24, 0x98	; 152
    50d6:	80 83       	st	Z, r24
    50d8:	ed 91       	ld	r30, X+
    50da:	fc 91       	ld	r31, X
    50dc:	34 97       	sbiw	r30, 0x04	; 4
    50de:	86 e0       	ldi	r24, 0x06	; 6
    50e0:	80 83       	st	Z, r24
    50e2:	ff be       	out	0x3f, r15	; 63
    50e4:	c8 01       	movw	r24, r16
    50e6:	df 91       	pop	r29
    50e8:	cf 91       	pop	r28
    50ea:	1f 91       	pop	r17
    50ec:	0f 91       	pop	r16
    50ee:	ff 90       	pop	r15
    50f0:	ef 90       	pop	r14
    50f2:	cf 90       	pop	r12
    50f4:	af 90       	pop	r10
    50f6:	9f 90       	pop	r9
    50f8:	8f 90       	pop	r8
    50fa:	7f 90       	pop	r7
    50fc:	6f 90       	pop	r6
    50fe:	5f 90       	pop	r5
    5100:	4f 90       	pop	r4
    5102:	3f 90       	pop	r3
    5104:	2f 90       	pop	r2
    5106:	08 95       	ret

00005108 <serial_send_byte>:
    5108:	cf 93       	push	r28
    510a:	df 93       	push	r29
    510c:	ec 01       	movw	r28, r24
    510e:	ea 81       	ldd	r30, Y+2	; 0x02
    5110:	fb 81       	ldd	r31, Y+3	; 0x03
    5112:	93 81       	ldd	r25, Z+3	; 0x03
    5114:	82 81       	ldd	r24, Z+2	; 0x02
    5116:	25 81       	ldd	r18, Z+5	; 0x05
    5118:	98 1b       	sub	r25, r24
    511a:	92 23       	and	r25, r18
    511c:	84 81       	ldd	r24, Z+4	; 0x04
    511e:	98 17       	cp	r25, r24
    5120:	a1 f0       	breq	.+40     	; 0x514a <serial_send_byte+0x42>
    5122:	93 81       	ldd	r25, Z+3	; 0x03
    5124:	26 95       	lsr	r18
    5126:	29 23       	and	r18, r25
    5128:	a0 81       	ld	r26, Z
    512a:	b1 81       	ldd	r27, Z+1	; 0x01
    512c:	a2 0f       	add	r26, r18
    512e:	b1 1d       	adc	r27, r1
    5130:	6c 93       	st	X, r22
    5132:	9f 5f       	subi	r25, 0xFF	; 255
    5134:	25 81       	ldd	r18, Z+5	; 0x05
    5136:	92 23       	and	r25, r18
    5138:	93 83       	std	Z+3, r25	; 0x03
    513a:	e8 81       	ld	r30, Y
    513c:	f9 81       	ldd	r31, Y+1	; 0x01
    513e:	35 97       	sbiw	r30, 0x05	; 5
    5140:	80 81       	ld	r24, Z
    5142:	80 62       	ori	r24, 0x20	; 32
    5144:	80 83       	st	Z, r24
    5146:	80 e0       	ldi	r24, 0x00	; 0
    5148:	01 c0       	rjmp	.+2      	; 0x514c <serial_send_byte+0x44>
    514a:	82 e0       	ldi	r24, 0x02	; 2
    514c:	df 91       	pop	r29
    514e:	cf 91       	pop	r28
    5150:	08 95       	ret

00005152 <serial_send_bytes>:
    5152:	ef 92       	push	r14
    5154:	ff 92       	push	r15
    5156:	0f 93       	push	r16
    5158:	1f 93       	push	r17
    515a:	cf 93       	push	r28
    515c:	df 93       	push	r29
    515e:	7c 01       	movw	r14, r24
    5160:	dc 01       	movw	r26, r24
    5162:	12 96       	adiw	r26, 0x02	; 2
    5164:	ed 91       	ld	r30, X+
    5166:	fc 91       	ld	r31, X
    5168:	13 97       	sbiw	r26, 0x03	; 3
    516a:	93 81       	ldd	r25, Z+3	; 0x03
    516c:	82 81       	ldd	r24, Z+2	; 0x02
    516e:	98 1b       	sub	r25, r24
    5170:	85 81       	ldd	r24, Z+5	; 0x05
    5172:	98 23       	and	r25, r24
    5174:	84 81       	ldd	r24, Z+4	; 0x04
    5176:	89 1b       	sub	r24, r25
    5178:	86 17       	cp	r24, r22
    517a:	98 f1       	brcs	.+102    	; 0x51e2 <serial_send_bytes+0x90>
    517c:	66 23       	and	r22, r22
    517e:	41 f1       	breq	.+80     	; 0x51d0 <serial_send_bytes+0x7e>
    5180:	84 2f       	mov	r24, r20
    5182:	95 2f       	mov	r25, r21
    5184:	dc 01       	movw	r26, r24
    5186:	61 50       	subi	r22, 0x01	; 1
    5188:	46 2f       	mov	r20, r22
    518a:	50 e0       	ldi	r21, 0x00	; 0
    518c:	4f 5f       	subi	r20, 0xFF	; 255
    518e:	5f 4f       	sbci	r21, 0xFF	; 255
    5190:	48 0f       	add	r20, r24
    5192:	59 1f       	adc	r21, r25
    5194:	e7 01       	movw	r28, r14
    5196:	ea 81       	ldd	r30, Y+2	; 0x02
    5198:	fb 81       	ldd	r31, Y+3	; 0x03
    519a:	93 81       	ldd	r25, Z+3	; 0x03
    519c:	82 81       	ldd	r24, Z+2	; 0x02
    519e:	25 81       	ldd	r18, Z+5	; 0x05
    51a0:	98 1b       	sub	r25, r24
    51a2:	92 23       	and	r25, r18
    51a4:	84 81       	ldd	r24, Z+4	; 0x04
    51a6:	98 17       	cp	r25, r24
    51a8:	79 f0       	breq	.+30     	; 0x51c8 <serial_send_bytes+0x76>
    51aa:	8c 91       	ld	r24, X
    51ac:	93 81       	ldd	r25, Z+3	; 0x03
    51ae:	26 95       	lsr	r18
    51b0:	29 23       	and	r18, r25
    51b2:	60 81       	ld	r22, Z
    51b4:	71 81       	ldd	r23, Z+1	; 0x01
    51b6:	8b 01       	movw	r16, r22
    51b8:	02 0f       	add	r16, r18
    51ba:	11 1d       	adc	r17, r1
    51bc:	e8 01       	movw	r28, r16
    51be:	88 83       	st	Y, r24
    51c0:	9f 5f       	subi	r25, 0xFF	; 255
    51c2:	85 81       	ldd	r24, Z+5	; 0x05
    51c4:	98 23       	and	r25, r24
    51c6:	93 83       	std	Z+3, r25	; 0x03
    51c8:	11 96       	adiw	r26, 0x01	; 1
    51ca:	a4 17       	cp	r26, r20
    51cc:	b5 07       	cpc	r27, r21
    51ce:	11 f7       	brne	.-60     	; 0x5194 <serial_send_bytes+0x42>
    51d0:	d7 01       	movw	r26, r14
    51d2:	ed 91       	ld	r30, X+
    51d4:	fc 91       	ld	r31, X
    51d6:	35 97       	sbiw	r30, 0x05	; 5
    51d8:	80 81       	ld	r24, Z
    51da:	80 62       	ori	r24, 0x20	; 32
    51dc:	80 83       	st	Z, r24
    51de:	80 e0       	ldi	r24, 0x00	; 0
    51e0:	01 c0       	rjmp	.+2      	; 0x51e4 <serial_send_bytes+0x92>
    51e2:	82 e0       	ldi	r24, 0x02	; 2
    51e4:	df 91       	pop	r29
    51e6:	cf 91       	pop	r28
    51e8:	1f 91       	pop	r17
    51ea:	0f 91       	pop	r16
    51ec:	ff 90       	pop	r15
    51ee:	ef 90       	pop	r14
    51f0:	08 95       	ret

000051f2 <serial_get_byte>:
    51f2:	dc 01       	movw	r26, r24
    51f4:	14 96       	adiw	r26, 0x04	; 4
    51f6:	ed 91       	ld	r30, X+
    51f8:	fc 91       	ld	r31, X
    51fa:	15 97       	sbiw	r26, 0x05	; 5
    51fc:	93 81       	ldd	r25, Z+3	; 0x03
    51fe:	82 81       	ldd	r24, Z+2	; 0x02
    5200:	98 17       	cp	r25, r24
    5202:	89 f0       	breq	.+34     	; 0x5226 <serial_get_byte+0x34>
    5204:	92 81       	ldd	r25, Z+2	; 0x02
    5206:	85 81       	ldd	r24, Z+5	; 0x05
    5208:	86 95       	lsr	r24
    520a:	89 23       	and	r24, r25
    520c:	a0 81       	ld	r26, Z
    520e:	b1 81       	ldd	r27, Z+1	; 0x01
    5210:	a8 0f       	add	r26, r24
    5212:	b1 1d       	adc	r27, r1
    5214:	8c 91       	ld	r24, X
    5216:	db 01       	movw	r26, r22
    5218:	8c 93       	st	X, r24
    521a:	9f 5f       	subi	r25, 0xFF	; 255
    521c:	85 81       	ldd	r24, Z+5	; 0x05
    521e:	98 23       	and	r25, r24
    5220:	92 83       	std	Z+2, r25	; 0x02
    5222:	80 e0       	ldi	r24, 0x00	; 0
    5224:	08 95       	ret
    5226:	83 e0       	ldi	r24, 0x03	; 3
    5228:	08 95       	ret

0000522a <__vector_25>:
    522a:	1f 92       	push	r1
    522c:	0f 92       	push	r0
    522e:	0f b6       	in	r0, 0x3f	; 63
    5230:	0f 92       	push	r0
    5232:	11 24       	eor	r1, r1
    5234:	0b b6       	in	r0, 0x3b	; 59
    5236:	0f 92       	push	r0
    5238:	2f 93       	push	r18
    523a:	3f 93       	push	r19
    523c:	4f 93       	push	r20
    523e:	5f 93       	push	r21
    5240:	6f 93       	push	r22
    5242:	7f 93       	push	r23
    5244:	8f 93       	push	r24
    5246:	9f 93       	push	r25
    5248:	af 93       	push	r26
    524a:	bf 93       	push	r27
    524c:	cf 93       	push	r28
    524e:	df 93       	push	r29
    5250:	ef 93       	push	r30
    5252:	ff 93       	push	r31
    5254:	a0 91 2c 1a 	lds	r26, 0x1A2C	; 0x801a2c <_ser_handle>
    5258:	b0 91 2d 1a 	lds	r27, 0x1A2D	; 0x801a2d <_ser_handle+0x1>
    525c:	10 97       	sbiw	r26, 0x00	; 0
    525e:	11 f1       	breq	.+68     	; 0x52a4 <__vector_25+0x7a>
    5260:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    5264:	14 96       	adiw	r26, 0x04	; 4
    5266:	ed 91       	ld	r30, X+
    5268:	fc 91       	ld	r31, X
    526a:	15 97       	sbiw	r26, 0x05	; 5
    526c:	93 81       	ldd	r25, Z+3	; 0x03
    526e:	82 81       	ldd	r24, Z+2	; 0x02
    5270:	25 81       	ldd	r18, Z+5	; 0x05
    5272:	98 1b       	sub	r25, r24
    5274:	92 23       	and	r25, r18
    5276:	84 81       	ldd	r24, Z+4	; 0x04
    5278:	98 17       	cp	r25, r24
    527a:	61 f0       	breq	.+24     	; 0x5294 <__vector_25+0x6a>
    527c:	83 81       	ldd	r24, Z+3	; 0x03
    527e:	26 95       	lsr	r18
    5280:	28 23       	and	r18, r24
    5282:	c0 81       	ld	r28, Z
    5284:	d1 81       	ldd	r29, Z+1	; 0x01
    5286:	c2 0f       	add	r28, r18
    5288:	d1 1d       	adc	r29, r1
    528a:	68 83       	st	Y, r22
    528c:	8f 5f       	subi	r24, 0xFF	; 255
    528e:	95 81       	ldd	r25, Z+5	; 0x05
    5290:	89 23       	and	r24, r25
    5292:	83 83       	std	Z+3, r24	; 0x03
    5294:	16 96       	adiw	r26, 0x06	; 6
    5296:	ed 91       	ld	r30, X+
    5298:	fc 91       	ld	r31, X
    529a:	17 97       	sbiw	r26, 0x07	; 7
    529c:	30 97       	sbiw	r30, 0x00	; 0
    529e:	11 f0       	breq	.+4      	; 0x52a4 <__vector_25+0x7a>
    52a0:	cd 01       	movw	r24, r26
    52a2:	19 95       	eicall
    52a4:	ff 91       	pop	r31
    52a6:	ef 91       	pop	r30
    52a8:	df 91       	pop	r29
    52aa:	cf 91       	pop	r28
    52ac:	bf 91       	pop	r27
    52ae:	af 91       	pop	r26
    52b0:	9f 91       	pop	r25
    52b2:	8f 91       	pop	r24
    52b4:	7f 91       	pop	r23
    52b6:	6f 91       	pop	r22
    52b8:	5f 91       	pop	r21
    52ba:	4f 91       	pop	r20
    52bc:	3f 91       	pop	r19
    52be:	2f 91       	pop	r18
    52c0:	0f 90       	pop	r0
    52c2:	0b be       	out	0x3b, r0	; 59
    52c4:	0f 90       	pop	r0
    52c6:	0f be       	out	0x3f, r0	; 63
    52c8:	0f 90       	pop	r0
    52ca:	1f 90       	pop	r1
    52cc:	18 95       	reti

000052ce <__vector_26>:
    52ce:	1f 92       	push	r1
    52d0:	0f 92       	push	r0
    52d2:	0f b6       	in	r0, 0x3f	; 63
    52d4:	0f 92       	push	r0
    52d6:	11 24       	eor	r1, r1
    52d8:	0b b6       	in	r0, 0x3b	; 59
    52da:	0f 92       	push	r0
    52dc:	2f 93       	push	r18
    52de:	8f 93       	push	r24
    52e0:	9f 93       	push	r25
    52e2:	af 93       	push	r26
    52e4:	bf 93       	push	r27
    52e6:	ef 93       	push	r30
    52e8:	ff 93       	push	r31
    52ea:	e0 91 2c 1a 	lds	r30, 0x1A2C	; 0x801a2c <_ser_handle>
    52ee:	f0 91 2d 1a 	lds	r31, 0x1A2D	; 0x801a2d <_ser_handle+0x1>
    52f2:	30 97       	sbiw	r30, 0x00	; 0
    52f4:	b9 f0       	breq	.+46     	; 0x5324 <__vector_26+0x56>
    52f6:	02 80       	ldd	r0, Z+2	; 0x02
    52f8:	f3 81       	ldd	r31, Z+3	; 0x03
    52fa:	e0 2d       	mov	r30, r0
    52fc:	93 81       	ldd	r25, Z+3	; 0x03
    52fe:	82 81       	ldd	r24, Z+2	; 0x02
    5300:	98 17       	cp	r25, r24
    5302:	b1 f0       	breq	.+44     	; 0x5330 <__vector_26+0x62>
    5304:	92 81       	ldd	r25, Z+2	; 0x02
    5306:	85 81       	ldd	r24, Z+5	; 0x05
    5308:	28 2f       	mov	r18, r24
    530a:	26 95       	lsr	r18
    530c:	29 23       	and	r18, r25
    530e:	a0 81       	ld	r26, Z
    5310:	b1 81       	ldd	r27, Z+1	; 0x01
    5312:	a2 0f       	add	r26, r18
    5314:	b1 1d       	adc	r27, r1
    5316:	2c 91       	ld	r18, X
    5318:	9f 5f       	subi	r25, 0xFF	; 255
    531a:	89 23       	and	r24, r25
    531c:	82 83       	std	Z+2, r24	; 0x02
    531e:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    5322:	0b c0       	rjmp	.+22     	; 0x533a <__vector_26+0x6c>
    5324:	e1 ec       	ldi	r30, 0xC1	; 193
    5326:	f0 e0       	ldi	r31, 0x00	; 0
    5328:	80 81       	ld	r24, Z
    532a:	8f 7d       	andi	r24, 0xDF	; 223
    532c:	80 83       	st	Z, r24
    532e:	05 c0       	rjmp	.+10     	; 0x533a <__vector_26+0x6c>
    5330:	e1 ec       	ldi	r30, 0xC1	; 193
    5332:	f0 e0       	ldi	r31, 0x00	; 0
    5334:	80 81       	ld	r24, Z
    5336:	8f 7d       	andi	r24, 0xDF	; 223
    5338:	80 83       	st	Z, r24
    533a:	ff 91       	pop	r31
    533c:	ef 91       	pop	r30
    533e:	bf 91       	pop	r27
    5340:	af 91       	pop	r26
    5342:	9f 91       	pop	r25
    5344:	8f 91       	pop	r24
    5346:	2f 91       	pop	r18
    5348:	0f 90       	pop	r0
    534a:	0b be       	out	0x3b, r0	; 59
    534c:	0f 90       	pop	r0
    534e:	0f be       	out	0x3f, r0	; 63
    5350:	0f 90       	pop	r0
    5352:	1f 90       	pop	r1
    5354:	18 95       	reti

00005356 <__vector_36>:
    5356:	1f 92       	push	r1
    5358:	0f 92       	push	r0
    535a:	0f b6       	in	r0, 0x3f	; 63
    535c:	0f 92       	push	r0
    535e:	11 24       	eor	r1, r1
    5360:	0b b6       	in	r0, 0x3b	; 59
    5362:	0f 92       	push	r0
    5364:	2f 93       	push	r18
    5366:	3f 93       	push	r19
    5368:	4f 93       	push	r20
    536a:	5f 93       	push	r21
    536c:	6f 93       	push	r22
    536e:	7f 93       	push	r23
    5370:	8f 93       	push	r24
    5372:	9f 93       	push	r25
    5374:	af 93       	push	r26
    5376:	bf 93       	push	r27
    5378:	cf 93       	push	r28
    537a:	df 93       	push	r29
    537c:	ef 93       	push	r30
    537e:	ff 93       	push	r31
    5380:	a0 91 2e 1a 	lds	r26, 0x1A2E	; 0x801a2e <_ser_handle+0x2>
    5384:	b0 91 2f 1a 	lds	r27, 0x1A2F	; 0x801a2f <_ser_handle+0x3>
    5388:	10 97       	sbiw	r26, 0x00	; 0
    538a:	11 f1       	breq	.+68     	; 0x53d0 <__vector_36+0x7a>
    538c:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    5390:	14 96       	adiw	r26, 0x04	; 4
    5392:	ed 91       	ld	r30, X+
    5394:	fc 91       	ld	r31, X
    5396:	15 97       	sbiw	r26, 0x05	; 5
    5398:	93 81       	ldd	r25, Z+3	; 0x03
    539a:	82 81       	ldd	r24, Z+2	; 0x02
    539c:	25 81       	ldd	r18, Z+5	; 0x05
    539e:	98 1b       	sub	r25, r24
    53a0:	92 23       	and	r25, r18
    53a2:	84 81       	ldd	r24, Z+4	; 0x04
    53a4:	98 17       	cp	r25, r24
    53a6:	61 f0       	breq	.+24     	; 0x53c0 <__vector_36+0x6a>
    53a8:	83 81       	ldd	r24, Z+3	; 0x03
    53aa:	26 95       	lsr	r18
    53ac:	28 23       	and	r18, r24
    53ae:	c0 81       	ld	r28, Z
    53b0:	d1 81       	ldd	r29, Z+1	; 0x01
    53b2:	c2 0f       	add	r28, r18
    53b4:	d1 1d       	adc	r29, r1
    53b6:	68 83       	st	Y, r22
    53b8:	8f 5f       	subi	r24, 0xFF	; 255
    53ba:	95 81       	ldd	r25, Z+5	; 0x05
    53bc:	89 23       	and	r24, r25
    53be:	83 83       	std	Z+3, r24	; 0x03
    53c0:	16 96       	adiw	r26, 0x06	; 6
    53c2:	ed 91       	ld	r30, X+
    53c4:	fc 91       	ld	r31, X
    53c6:	17 97       	sbiw	r26, 0x07	; 7
    53c8:	30 97       	sbiw	r30, 0x00	; 0
    53ca:	11 f0       	breq	.+4      	; 0x53d0 <__vector_36+0x7a>
    53cc:	cd 01       	movw	r24, r26
    53ce:	19 95       	eicall
    53d0:	ff 91       	pop	r31
    53d2:	ef 91       	pop	r30
    53d4:	df 91       	pop	r29
    53d6:	cf 91       	pop	r28
    53d8:	bf 91       	pop	r27
    53da:	af 91       	pop	r26
    53dc:	9f 91       	pop	r25
    53de:	8f 91       	pop	r24
    53e0:	7f 91       	pop	r23
    53e2:	6f 91       	pop	r22
    53e4:	5f 91       	pop	r21
    53e6:	4f 91       	pop	r20
    53e8:	3f 91       	pop	r19
    53ea:	2f 91       	pop	r18
    53ec:	0f 90       	pop	r0
    53ee:	0b be       	out	0x3b, r0	; 59
    53f0:	0f 90       	pop	r0
    53f2:	0f be       	out	0x3f, r0	; 63
    53f4:	0f 90       	pop	r0
    53f6:	1f 90       	pop	r1
    53f8:	18 95       	reti

000053fa <__vector_37>:
    53fa:	1f 92       	push	r1
    53fc:	0f 92       	push	r0
    53fe:	0f b6       	in	r0, 0x3f	; 63
    5400:	0f 92       	push	r0
    5402:	11 24       	eor	r1, r1
    5404:	0b b6       	in	r0, 0x3b	; 59
    5406:	0f 92       	push	r0
    5408:	2f 93       	push	r18
    540a:	8f 93       	push	r24
    540c:	9f 93       	push	r25
    540e:	af 93       	push	r26
    5410:	bf 93       	push	r27
    5412:	ef 93       	push	r30
    5414:	ff 93       	push	r31
    5416:	e0 91 2e 1a 	lds	r30, 0x1A2E	; 0x801a2e <_ser_handle+0x2>
    541a:	f0 91 2f 1a 	lds	r31, 0x1A2F	; 0x801a2f <_ser_handle+0x3>
    541e:	30 97       	sbiw	r30, 0x00	; 0
    5420:	b9 f0       	breq	.+46     	; 0x5450 <__vector_37+0x56>
    5422:	02 80       	ldd	r0, Z+2	; 0x02
    5424:	f3 81       	ldd	r31, Z+3	; 0x03
    5426:	e0 2d       	mov	r30, r0
    5428:	93 81       	ldd	r25, Z+3	; 0x03
    542a:	82 81       	ldd	r24, Z+2	; 0x02
    542c:	98 17       	cp	r25, r24
    542e:	b1 f0       	breq	.+44     	; 0x545c <__vector_37+0x62>
    5430:	92 81       	ldd	r25, Z+2	; 0x02
    5432:	85 81       	ldd	r24, Z+5	; 0x05
    5434:	28 2f       	mov	r18, r24
    5436:	26 95       	lsr	r18
    5438:	29 23       	and	r18, r25
    543a:	a0 81       	ld	r26, Z
    543c:	b1 81       	ldd	r27, Z+1	; 0x01
    543e:	a2 0f       	add	r26, r18
    5440:	b1 1d       	adc	r27, r1
    5442:	2c 91       	ld	r18, X
    5444:	9f 5f       	subi	r25, 0xFF	; 255
    5446:	89 23       	and	r24, r25
    5448:	82 83       	std	Z+2, r24	; 0x02
    544a:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    544e:	0b c0       	rjmp	.+22     	; 0x5466 <__vector_37+0x6c>
    5450:	e9 ec       	ldi	r30, 0xC9	; 201
    5452:	f0 e0       	ldi	r31, 0x00	; 0
    5454:	80 81       	ld	r24, Z
    5456:	8f 7d       	andi	r24, 0xDF	; 223
    5458:	80 83       	st	Z, r24
    545a:	05 c0       	rjmp	.+10     	; 0x5466 <__vector_37+0x6c>
    545c:	e9 ec       	ldi	r30, 0xC9	; 201
    545e:	f0 e0       	ldi	r31, 0x00	; 0
    5460:	80 81       	ld	r24, Z
    5462:	8f 7d       	andi	r24, 0xDF	; 223
    5464:	80 83       	st	Z, r24
    5466:	ff 91       	pop	r31
    5468:	ef 91       	pop	r30
    546a:	bf 91       	pop	r27
    546c:	af 91       	pop	r26
    546e:	9f 91       	pop	r25
    5470:	8f 91       	pop	r24
    5472:	2f 91       	pop	r18
    5474:	0f 90       	pop	r0
    5476:	0b be       	out	0x3b, r0	; 59
    5478:	0f 90       	pop	r0
    547a:	0f be       	out	0x3f, r0	; 63
    547c:	0f 90       	pop	r0
    547e:	1f 90       	pop	r1
    5480:	18 95       	reti

00005482 <__vector_51>:
    5482:	1f 92       	push	r1
    5484:	0f 92       	push	r0
    5486:	0f b6       	in	r0, 0x3f	; 63
    5488:	0f 92       	push	r0
    548a:	11 24       	eor	r1, r1
    548c:	0b b6       	in	r0, 0x3b	; 59
    548e:	0f 92       	push	r0
    5490:	2f 93       	push	r18
    5492:	3f 93       	push	r19
    5494:	4f 93       	push	r20
    5496:	5f 93       	push	r21
    5498:	6f 93       	push	r22
    549a:	7f 93       	push	r23
    549c:	8f 93       	push	r24
    549e:	9f 93       	push	r25
    54a0:	af 93       	push	r26
    54a2:	bf 93       	push	r27
    54a4:	cf 93       	push	r28
    54a6:	df 93       	push	r29
    54a8:	ef 93       	push	r30
    54aa:	ff 93       	push	r31
    54ac:	a0 91 30 1a 	lds	r26, 0x1A30	; 0x801a30 <_ser_handle+0x4>
    54b0:	b0 91 31 1a 	lds	r27, 0x1A31	; 0x801a31 <_ser_handle+0x5>
    54b4:	10 97       	sbiw	r26, 0x00	; 0
    54b6:	11 f1       	breq	.+68     	; 0x54fc <__vector_51+0x7a>
    54b8:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    54bc:	14 96       	adiw	r26, 0x04	; 4
    54be:	ed 91       	ld	r30, X+
    54c0:	fc 91       	ld	r31, X
    54c2:	15 97       	sbiw	r26, 0x05	; 5
    54c4:	93 81       	ldd	r25, Z+3	; 0x03
    54c6:	82 81       	ldd	r24, Z+2	; 0x02
    54c8:	25 81       	ldd	r18, Z+5	; 0x05
    54ca:	98 1b       	sub	r25, r24
    54cc:	92 23       	and	r25, r18
    54ce:	84 81       	ldd	r24, Z+4	; 0x04
    54d0:	98 17       	cp	r25, r24
    54d2:	61 f0       	breq	.+24     	; 0x54ec <__vector_51+0x6a>
    54d4:	83 81       	ldd	r24, Z+3	; 0x03
    54d6:	26 95       	lsr	r18
    54d8:	28 23       	and	r18, r24
    54da:	c0 81       	ld	r28, Z
    54dc:	d1 81       	ldd	r29, Z+1	; 0x01
    54de:	c2 0f       	add	r28, r18
    54e0:	d1 1d       	adc	r29, r1
    54e2:	68 83       	st	Y, r22
    54e4:	8f 5f       	subi	r24, 0xFF	; 255
    54e6:	95 81       	ldd	r25, Z+5	; 0x05
    54e8:	89 23       	and	r24, r25
    54ea:	83 83       	std	Z+3, r24	; 0x03
    54ec:	16 96       	adiw	r26, 0x06	; 6
    54ee:	ed 91       	ld	r30, X+
    54f0:	fc 91       	ld	r31, X
    54f2:	17 97       	sbiw	r26, 0x07	; 7
    54f4:	30 97       	sbiw	r30, 0x00	; 0
    54f6:	11 f0       	breq	.+4      	; 0x54fc <__vector_51+0x7a>
    54f8:	cd 01       	movw	r24, r26
    54fa:	19 95       	eicall
    54fc:	ff 91       	pop	r31
    54fe:	ef 91       	pop	r30
    5500:	df 91       	pop	r29
    5502:	cf 91       	pop	r28
    5504:	bf 91       	pop	r27
    5506:	af 91       	pop	r26
    5508:	9f 91       	pop	r25
    550a:	8f 91       	pop	r24
    550c:	7f 91       	pop	r23
    550e:	6f 91       	pop	r22
    5510:	5f 91       	pop	r21
    5512:	4f 91       	pop	r20
    5514:	3f 91       	pop	r19
    5516:	2f 91       	pop	r18
    5518:	0f 90       	pop	r0
    551a:	0b be       	out	0x3b, r0	; 59
    551c:	0f 90       	pop	r0
    551e:	0f be       	out	0x3f, r0	; 63
    5520:	0f 90       	pop	r0
    5522:	1f 90       	pop	r1
    5524:	18 95       	reti

00005526 <__vector_52>:
    5526:	1f 92       	push	r1
    5528:	0f 92       	push	r0
    552a:	0f b6       	in	r0, 0x3f	; 63
    552c:	0f 92       	push	r0
    552e:	11 24       	eor	r1, r1
    5530:	0b b6       	in	r0, 0x3b	; 59
    5532:	0f 92       	push	r0
    5534:	2f 93       	push	r18
    5536:	8f 93       	push	r24
    5538:	9f 93       	push	r25
    553a:	af 93       	push	r26
    553c:	bf 93       	push	r27
    553e:	ef 93       	push	r30
    5540:	ff 93       	push	r31
    5542:	e0 91 30 1a 	lds	r30, 0x1A30	; 0x801a30 <_ser_handle+0x4>
    5546:	f0 91 31 1a 	lds	r31, 0x1A31	; 0x801a31 <_ser_handle+0x5>
    554a:	30 97       	sbiw	r30, 0x00	; 0
    554c:	b9 f0       	breq	.+46     	; 0x557c <__vector_52+0x56>
    554e:	02 80       	ldd	r0, Z+2	; 0x02
    5550:	f3 81       	ldd	r31, Z+3	; 0x03
    5552:	e0 2d       	mov	r30, r0
    5554:	93 81       	ldd	r25, Z+3	; 0x03
    5556:	82 81       	ldd	r24, Z+2	; 0x02
    5558:	98 17       	cp	r25, r24
    555a:	b1 f0       	breq	.+44     	; 0x5588 <__vector_52+0x62>
    555c:	92 81       	ldd	r25, Z+2	; 0x02
    555e:	85 81       	ldd	r24, Z+5	; 0x05
    5560:	28 2f       	mov	r18, r24
    5562:	26 95       	lsr	r18
    5564:	29 23       	and	r18, r25
    5566:	a0 81       	ld	r26, Z
    5568:	b1 81       	ldd	r27, Z+1	; 0x01
    556a:	a2 0f       	add	r26, r18
    556c:	b1 1d       	adc	r27, r1
    556e:	2c 91       	ld	r18, X
    5570:	9f 5f       	subi	r25, 0xFF	; 255
    5572:	89 23       	and	r24, r25
    5574:	82 83       	std	Z+2, r24	; 0x02
    5576:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    557a:	0b c0       	rjmp	.+22     	; 0x5592 <__vector_52+0x6c>
    557c:	e1 ed       	ldi	r30, 0xD1	; 209
    557e:	f0 e0       	ldi	r31, 0x00	; 0
    5580:	80 81       	ld	r24, Z
    5582:	8f 7d       	andi	r24, 0xDF	; 223
    5584:	80 83       	st	Z, r24
    5586:	05 c0       	rjmp	.+10     	; 0x5592 <__vector_52+0x6c>
    5588:	e1 ed       	ldi	r30, 0xD1	; 209
    558a:	f0 e0       	ldi	r31, 0x00	; 0
    558c:	80 81       	ld	r24, Z
    558e:	8f 7d       	andi	r24, 0xDF	; 223
    5590:	80 83       	st	Z, r24
    5592:	ff 91       	pop	r31
    5594:	ef 91       	pop	r30
    5596:	bf 91       	pop	r27
    5598:	af 91       	pop	r26
    559a:	9f 91       	pop	r25
    559c:	8f 91       	pop	r24
    559e:	2f 91       	pop	r18
    55a0:	0f 90       	pop	r0
    55a2:	0b be       	out	0x3b, r0	; 59
    55a4:	0f 90       	pop	r0
    55a6:	0f be       	out	0x3f, r0	; 63
    55a8:	0f 90       	pop	r0
    55aa:	1f 90       	pop	r1
    55ac:	18 95       	reti

000055ae <__vector_54>:
    55ae:	1f 92       	push	r1
    55b0:	0f 92       	push	r0
    55b2:	0f b6       	in	r0, 0x3f	; 63
    55b4:	0f 92       	push	r0
    55b6:	11 24       	eor	r1, r1
    55b8:	0b b6       	in	r0, 0x3b	; 59
    55ba:	0f 92       	push	r0
    55bc:	2f 93       	push	r18
    55be:	3f 93       	push	r19
    55c0:	4f 93       	push	r20
    55c2:	5f 93       	push	r21
    55c4:	6f 93       	push	r22
    55c6:	7f 93       	push	r23
    55c8:	8f 93       	push	r24
    55ca:	9f 93       	push	r25
    55cc:	af 93       	push	r26
    55ce:	bf 93       	push	r27
    55d0:	cf 93       	push	r28
    55d2:	df 93       	push	r29
    55d4:	ef 93       	push	r30
    55d6:	ff 93       	push	r31
    55d8:	a0 91 32 1a 	lds	r26, 0x1A32	; 0x801a32 <_ser_handle+0x6>
    55dc:	b0 91 33 1a 	lds	r27, 0x1A33	; 0x801a33 <_ser_handle+0x7>
    55e0:	10 97       	sbiw	r26, 0x00	; 0
    55e2:	11 f1       	breq	.+68     	; 0x5628 <__vector_54+0x7a>
    55e4:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    55e8:	14 96       	adiw	r26, 0x04	; 4
    55ea:	ed 91       	ld	r30, X+
    55ec:	fc 91       	ld	r31, X
    55ee:	15 97       	sbiw	r26, 0x05	; 5
    55f0:	93 81       	ldd	r25, Z+3	; 0x03
    55f2:	82 81       	ldd	r24, Z+2	; 0x02
    55f4:	25 81       	ldd	r18, Z+5	; 0x05
    55f6:	98 1b       	sub	r25, r24
    55f8:	92 23       	and	r25, r18
    55fa:	84 81       	ldd	r24, Z+4	; 0x04
    55fc:	98 17       	cp	r25, r24
    55fe:	61 f0       	breq	.+24     	; 0x5618 <__vector_54+0x6a>
    5600:	83 81       	ldd	r24, Z+3	; 0x03
    5602:	26 95       	lsr	r18
    5604:	28 23       	and	r18, r24
    5606:	c0 81       	ld	r28, Z
    5608:	d1 81       	ldd	r29, Z+1	; 0x01
    560a:	c2 0f       	add	r28, r18
    560c:	d1 1d       	adc	r29, r1
    560e:	68 83       	st	Y, r22
    5610:	8f 5f       	subi	r24, 0xFF	; 255
    5612:	95 81       	ldd	r25, Z+5	; 0x05
    5614:	89 23       	and	r24, r25
    5616:	83 83       	std	Z+3, r24	; 0x03
    5618:	16 96       	adiw	r26, 0x06	; 6
    561a:	ed 91       	ld	r30, X+
    561c:	fc 91       	ld	r31, X
    561e:	17 97       	sbiw	r26, 0x07	; 7
    5620:	30 97       	sbiw	r30, 0x00	; 0
    5622:	11 f0       	breq	.+4      	; 0x5628 <__vector_54+0x7a>
    5624:	cd 01       	movw	r24, r26
    5626:	19 95       	eicall
    5628:	ff 91       	pop	r31
    562a:	ef 91       	pop	r30
    562c:	df 91       	pop	r29
    562e:	cf 91       	pop	r28
    5630:	bf 91       	pop	r27
    5632:	af 91       	pop	r26
    5634:	9f 91       	pop	r25
    5636:	8f 91       	pop	r24
    5638:	7f 91       	pop	r23
    563a:	6f 91       	pop	r22
    563c:	5f 91       	pop	r21
    563e:	4f 91       	pop	r20
    5640:	3f 91       	pop	r19
    5642:	2f 91       	pop	r18
    5644:	0f 90       	pop	r0
    5646:	0b be       	out	0x3b, r0	; 59
    5648:	0f 90       	pop	r0
    564a:	0f be       	out	0x3f, r0	; 63
    564c:	0f 90       	pop	r0
    564e:	1f 90       	pop	r1
    5650:	18 95       	reti

00005652 <__vector_55>:
    5652:	1f 92       	push	r1
    5654:	0f 92       	push	r0
    5656:	0f b6       	in	r0, 0x3f	; 63
    5658:	0f 92       	push	r0
    565a:	11 24       	eor	r1, r1
    565c:	0b b6       	in	r0, 0x3b	; 59
    565e:	0f 92       	push	r0
    5660:	2f 93       	push	r18
    5662:	8f 93       	push	r24
    5664:	9f 93       	push	r25
    5666:	af 93       	push	r26
    5668:	bf 93       	push	r27
    566a:	ef 93       	push	r30
    566c:	ff 93       	push	r31
    566e:	e0 91 32 1a 	lds	r30, 0x1A32	; 0x801a32 <_ser_handle+0x6>
    5672:	f0 91 33 1a 	lds	r31, 0x1A33	; 0x801a33 <_ser_handle+0x7>
    5676:	30 97       	sbiw	r30, 0x00	; 0
    5678:	b9 f0       	breq	.+46     	; 0x56a8 <__vector_55+0x56>
    567a:	02 80       	ldd	r0, Z+2	; 0x02
    567c:	f3 81       	ldd	r31, Z+3	; 0x03
    567e:	e0 2d       	mov	r30, r0
    5680:	93 81       	ldd	r25, Z+3	; 0x03
    5682:	82 81       	ldd	r24, Z+2	; 0x02
    5684:	98 17       	cp	r25, r24
    5686:	b1 f0       	breq	.+44     	; 0x56b4 <__vector_55+0x62>
    5688:	92 81       	ldd	r25, Z+2	; 0x02
    568a:	85 81       	ldd	r24, Z+5	; 0x05
    568c:	28 2f       	mov	r18, r24
    568e:	26 95       	lsr	r18
    5690:	29 23       	and	r18, r25
    5692:	a0 81       	ld	r26, Z
    5694:	b1 81       	ldd	r27, Z+1	; 0x01
    5696:	a2 0f       	add	r26, r18
    5698:	b1 1d       	adc	r27, r1
    569a:	2c 91       	ld	r18, X
    569c:	9f 5f       	subi	r25, 0xFF	; 255
    569e:	89 23       	and	r24, r25
    56a0:	82 83       	std	Z+2, r24	; 0x02
    56a2:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    56a6:	0b c0       	rjmp	.+22     	; 0x56be <__vector_55+0x6c>
    56a8:	e1 e3       	ldi	r30, 0x31	; 49
    56aa:	f1 e0       	ldi	r31, 0x01	; 1
    56ac:	80 81       	ld	r24, Z
    56ae:	8f 7d       	andi	r24, 0xDF	; 223
    56b0:	80 83       	st	Z, r24
    56b2:	05 c0       	rjmp	.+10     	; 0x56be <__vector_55+0x6c>
    56b4:	e1 e3       	ldi	r30, 0x31	; 49
    56b6:	f1 e0       	ldi	r31, 0x01	; 1
    56b8:	80 81       	ld	r24, Z
    56ba:	8f 7d       	andi	r24, 0xDF	; 223
    56bc:	80 83       	st	Z, r24
    56be:	ff 91       	pop	r31
    56c0:	ef 91       	pop	r30
    56c2:	bf 91       	pop	r27
    56c4:	af 91       	pop	r26
    56c6:	9f 91       	pop	r25
    56c8:	8f 91       	pop	r24
    56ca:	2f 91       	pop	r18
    56cc:	0f 90       	pop	r0
    56ce:	0b be       	out	0x3b, r0	; 59
    56d0:	0f 90       	pop	r0
    56d2:	0f be       	out	0x3f, r0	; 63
    56d4:	0f 90       	pop	r0
    56d6:	1f 90       	pop	r1
    56d8:	18 95       	reti

000056da <usart_getchar>:
    56da:	cf 93       	push	r28
    56dc:	df 93       	push	r29
    56de:	1f 92       	push	r1
    56e0:	cd b7       	in	r28, 0x3d	; 61
    56e2:	de b7       	in	r29, 0x3e	; 62
    56e4:	be 01       	movw	r22, r28
    56e6:	6f 5f       	subi	r22, 0xFF	; 255
    56e8:	7f 4f       	sbci	r23, 0xFF	; 255
    56ea:	80 91 34 1a 	lds	r24, 0x1A34	; 0x801a34 <_com_serial_instance>
    56ee:	90 91 35 1a 	lds	r25, 0x1A35	; 0x801a35 <_com_serial_instance+0x1>
    56f2:	7f dd       	rcall	.-1282   	; 0x51f2 <serial_get_byte>
    56f4:	81 11       	cpse	r24, r1
    56f6:	f6 cf       	rjmp	.-20     	; 0x56e4 <usart_getchar+0xa>
    56f8:	89 81       	ldd	r24, Y+1	; 0x01
    56fa:	90 e0       	ldi	r25, 0x00	; 0
    56fc:	0f 90       	pop	r0
    56fe:	df 91       	pop	r29
    5700:	cf 91       	pop	r28
    5702:	08 95       	ret

00005704 <usart_putchar>:
    5704:	68 2f       	mov	r22, r24
    5706:	80 91 34 1a 	lds	r24, 0x1A34	; 0x801a34 <_com_serial_instance>
    570a:	90 91 35 1a 	lds	r25, 0x1A35	; 0x801a35 <_com_serial_instance+0x1>
    570e:	fc dc       	rcall	.-1544   	; 0x5108 <serial_send_byte>
    5710:	80 e0       	ldi	r24, 0x00	; 0
    5712:	90 e0       	ldi	r25, 0x00	; 0
    5714:	08 95       	ret

00005716 <stdioCreate>:
    5716:	8f 92       	push	r8
    5718:	9f 92       	push	r9
    571a:	af 92       	push	r10
    571c:	cf 92       	push	r12
    571e:	ef 92       	push	r14
    5720:	0f 93       	push	r16
    5722:	81 2c       	mov	r8, r1
    5724:	91 2c       	mov	r9, r1
    5726:	68 94       	set
    5728:	aa 24       	eor	r10, r10
    572a:	a7 f8       	bld	r10, 7
    572c:	68 94       	set
    572e:	cc 24       	eor	r12, r12
    5730:	c7 f8       	bld	r12, 7
    5732:	e1 2c       	mov	r14, r1
    5734:	00 e0       	ldi	r16, 0x00	; 0
    5736:	23 e0       	ldi	r18, 0x03	; 3
    5738:	40 e0       	ldi	r20, 0x00	; 0
    573a:	51 ee       	ldi	r21, 0xE1	; 225
    573c:	60 e0       	ldi	r22, 0x00	; 0
    573e:	70 e0       	ldi	r23, 0x00	; 0
    5740:	4d dc       	rcall	.-1894   	; 0x4fdc <serial_new_instance>
    5742:	90 93 35 1a 	sts	0x1A35, r25	; 0x801a35 <_com_serial_instance+0x1>
    5746:	80 93 34 1a 	sts	0x1A34, r24	; 0x801a34 <_com_serial_instance>
    574a:	ef e7       	ldi	r30, 0x7F	; 127
    574c:	fa e1       	ldi	r31, 0x1A	; 26
    574e:	86 e1       	ldi	r24, 0x16	; 22
    5750:	92 e0       	ldi	r25, 0x02	; 2
    5752:	91 83       	std	Z+1, r25	; 0x01
    5754:	80 83       	st	Z, r24
    5756:	93 83       	std	Z+3, r25	; 0x03
    5758:	82 83       	std	Z+2, r24	; 0x02
    575a:	0f 91       	pop	r16
    575c:	ef 90       	pop	r14
    575e:	cf 90       	pop	r12
    5760:	af 90       	pop	r10
    5762:	9f 90       	pop	r9
    5764:	8f 90       	pop	r8
    5766:	08 95       	ret

00005768 <_initTwiInterface>:
    5768:	80 91 44 1a 	lds	r24, 0x1A44	; 0x801a44 <_twiIsInitiated>
    576c:	81 11       	cpse	r24, r1
    576e:	0c c0       	rjmp	.+24     	; 0x5788 <_initTwiInterface+0x20>
    5770:	8c e0       	ldi	r24, 0x0C	; 12
    5772:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    5776:	8f ef       	ldi	r24, 0xFF	; 255
    5778:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    577c:	84 e0       	ldi	r24, 0x04	; 4
    577e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    5782:	81 e0       	ldi	r24, 0x01	; 1
    5784:	80 93 44 1a 	sts	0x1A44, r24	; 0x801a44 <_twiIsInitiated>
    5788:	08 95       	ret

0000578a <twiCreate>:
    578a:	af 92       	push	r10
    578c:	bf 92       	push	r11
    578e:	cf 92       	push	r12
    5790:	df 92       	push	r13
    5792:	ef 92       	push	r14
    5794:	ff 92       	push	r15
    5796:	0f 93       	push	r16
    5798:	1f 93       	push	r17
    579a:	cf 93       	push	r28
    579c:	df 93       	push	r29
    579e:	a8 2e       	mov	r10, r24
    57a0:	b6 2e       	mov	r11, r22
    57a2:	69 01       	movw	r12, r18
    57a4:	7a 01       	movw	r14, r20
    57a6:	84 e0       	ldi	r24, 0x04	; 4
    57a8:	90 e0       	ldi	r25, 0x00	; 0
    57aa:	f2 d3       	rcall	.+2020   	; 0x5f90 <malloc>
    57ac:	ec 01       	movw	r28, r24
    57ae:	89 2b       	or	r24, r25
    57b0:	61 f1       	breq	.+88     	; 0x580a <twiCreate+0x80>
    57b2:	a8 82       	st	Y, r10
    57b4:	81 e0       	ldi	r24, 0x01	; 1
    57b6:	b8 12       	cpse	r11, r24
    57b8:	12 c0       	rjmp	.+36     	; 0x57de <twiCreate+0x54>
    57ba:	c7 01       	movw	r24, r14
    57bc:	b6 01       	movw	r22, r12
    57be:	20 ea       	ldi	r18, 0xA0	; 160
    57c0:	36 e8       	ldi	r19, 0x86	; 134
    57c2:	41 e0       	ldi	r20, 0x01	; 1
    57c4:	50 e0       	ldi	r21, 0x00	; 0
    57c6:	8c d3       	rcall	.+1816   	; 0x5ee0 <__udivmodsi4>
    57c8:	da 01       	movw	r26, r20
    57ca:	c9 01       	movw	r24, r18
    57cc:	40 97       	sbiw	r24, 0x10	; 16
    57ce:	a1 09       	sbc	r26, r1
    57d0:	b1 09       	sbc	r27, r1
    57d2:	b6 95       	lsr	r27
    57d4:	a7 95       	ror	r26
    57d6:	97 95       	ror	r25
    57d8:	87 95       	ror	r24
    57da:	89 83       	std	Y+1, r24	; 0x01
    57dc:	11 c0       	rjmp	.+34     	; 0x5800 <twiCreate+0x76>
    57de:	c7 01       	movw	r24, r14
    57e0:	b6 01       	movw	r22, r12
    57e2:	20 e8       	ldi	r18, 0x80	; 128
    57e4:	3a e1       	ldi	r19, 0x1A	; 26
    57e6:	46 e0       	ldi	r20, 0x06	; 6
    57e8:	50 e0       	ldi	r21, 0x00	; 0
    57ea:	7a d3       	rcall	.+1780   	; 0x5ee0 <__udivmodsi4>
    57ec:	da 01       	movw	r26, r20
    57ee:	c9 01       	movw	r24, r18
    57f0:	40 97       	sbiw	r24, 0x10	; 16
    57f2:	a1 09       	sbc	r26, r1
    57f4:	b1 09       	sbc	r27, r1
    57f6:	b6 95       	lsr	r27
    57f8:	a7 95       	ror	r26
    57fa:	97 95       	ror	r25
    57fc:	87 95       	ror	r24
    57fe:	89 83       	std	Y+1, r24	; 0x01
    5800:	1b 83       	std	Y+3, r17	; 0x03
    5802:	0a 83       	std	Y+2, r16	; 0x02
    5804:	8c 2f       	mov	r24, r28
    5806:	9d 2f       	mov	r25, r29
    5808:	02 c0       	rjmp	.+4      	; 0x580e <twiCreate+0x84>
    580a:	80 e0       	ldi	r24, 0x00	; 0
    580c:	90 e0       	ldi	r25, 0x00	; 0
    580e:	df 91       	pop	r29
    5810:	cf 91       	pop	r28
    5812:	1f 91       	pop	r17
    5814:	0f 91       	pop	r16
    5816:	ff 90       	pop	r15
    5818:	ef 90       	pop	r14
    581a:	df 90       	pop	r13
    581c:	cf 90       	pop	r12
    581e:	bf 90       	pop	r11
    5820:	af 90       	pop	r10
    5822:	08 95       	ret

00005824 <twiIsBusy>:
    5824:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    5828:	81 70       	andi	r24, 0x01	; 1
    582a:	08 95       	ret

0000582c <twiTransmit>:
    582c:	ff 92       	push	r15
    582e:	0f 93       	push	r16
    5830:	1f 93       	push	r17
    5832:	cf 93       	push	r28
    5834:	df 93       	push	r29
    5836:	00 97       	sbiw	r24, 0x00	; 0
    5838:	d1 f1       	breq	.+116    	; 0x58ae <twiTransmit+0x82>
    583a:	4a 30       	cpi	r20, 0x0A	; 10
    583c:	d0 f5       	brcc	.+116    	; 0x58b2 <twiTransmit+0x86>
    583e:	f4 2e       	mov	r15, r20
    5840:	8b 01       	movw	r16, r22
    5842:	ec 01       	movw	r28, r24
    5844:	ef df       	rcall	.-34     	; 0x5824 <twiIsBusy>
    5846:	81 11       	cpse	r24, r1
    5848:	36 c0       	rjmp	.+108    	; 0x58b6 <twiTransmit+0x8a>
    584a:	80 91 37 1a 	lds	r24, 0x1A37	; 0x801a37 <_twiCurrentHandler>
    584e:	90 91 38 1a 	lds	r25, 0x1A38	; 0x801a38 <_twiCurrentHandler+0x1>
    5852:	c8 17       	cp	r28, r24
    5854:	d9 07       	cpc	r29, r25
    5856:	41 f0       	breq	.+16     	; 0x5868 <twiTransmit+0x3c>
    5858:	87 df       	rcall	.-242    	; 0x5768 <_initTwiInterface>
    585a:	89 81       	ldd	r24, Y+1	; 0x01
    585c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    5860:	d0 93 38 1a 	sts	0x1A38, r29	; 0x801a38 <_twiCurrentHandler+0x1>
    5864:	c0 93 37 1a 	sts	0x1A37, r28	; 0x801a37 <_twiCurrentHandler>
    5868:	81 e0       	ldi	r24, 0x01	; 1
    586a:	8f 0d       	add	r24, r15
    586c:	80 93 39 1a 	sts	0x1A39, r24	; 0x801a39 <_twiMessageLen>
    5870:	88 81       	ld	r24, Y
    5872:	88 0f       	add	r24, r24
    5874:	80 93 3a 1a 	sts	0x1A3A, r24	; 0x801a3a <_twiMessageBuffer>
    5878:	ff 20       	and	r15, r15
    587a:	89 f0       	breq	.+34     	; 0x589e <twiTransmit+0x72>
    587c:	f8 01       	movw	r30, r16
    587e:	ab e3       	ldi	r26, 0x3B	; 59
    5880:	ba e1       	ldi	r27, 0x1A	; 26
    5882:	4f ef       	ldi	r20, 0xFF	; 255
    5884:	4f 0d       	add	r20, r15
    5886:	64 2f       	mov	r22, r20
    5888:	70 e0       	ldi	r23, 0x00	; 0
    588a:	cb 01       	movw	r24, r22
    588c:	01 96       	adiw	r24, 0x01	; 1
    588e:	b8 01       	movw	r22, r16
    5890:	68 0f       	add	r22, r24
    5892:	79 1f       	adc	r23, r25
    5894:	81 91       	ld	r24, Z+
    5896:	8d 93       	st	X+, r24
    5898:	e6 17       	cp	r30, r22
    589a:	f7 07       	cpc	r31, r23
    589c:	d9 f7       	brne	.-10     	; 0x5894 <twiTransmit+0x68>
    589e:	88 ef       	ldi	r24, 0xF8	; 248
    58a0:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <_twiCurrentState>
    58a4:	85 ea       	ldi	r24, 0xA5	; 165
    58a6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    58aa:	84 e0       	ldi	r24, 0x04	; 4
    58ac:	05 c0       	rjmp	.+10     	; 0x58b8 <twiTransmit+0x8c>
    58ae:	86 e0       	ldi	r24, 0x06	; 6
    58b0:	03 c0       	rjmp	.+6      	; 0x58b8 <twiTransmit+0x8c>
    58b2:	87 e0       	ldi	r24, 0x07	; 7
    58b4:	01 c0       	rjmp	.+2      	; 0x58b8 <twiTransmit+0x8c>
    58b6:	82 e0       	ldi	r24, 0x02	; 2
    58b8:	df 91       	pop	r29
    58ba:	cf 91       	pop	r28
    58bc:	1f 91       	pop	r17
    58be:	0f 91       	pop	r16
    58c0:	ff 90       	pop	r15
    58c2:	08 95       	ret

000058c4 <twiReceive>:
    58c4:	1f 93       	push	r17
    58c6:	cf 93       	push	r28
    58c8:	df 93       	push	r29
    58ca:	00 97       	sbiw	r24, 0x00	; 0
    58cc:	29 f1       	breq	.+74     	; 0x5918 <twiReceive+0x54>
    58ce:	6b 30       	cpi	r22, 0x0B	; 11
    58d0:	28 f5       	brcc	.+74     	; 0x591c <twiReceive+0x58>
    58d2:	16 2f       	mov	r17, r22
    58d4:	ec 01       	movw	r28, r24
    58d6:	a6 df       	rcall	.-180    	; 0x5824 <twiIsBusy>
    58d8:	81 11       	cpse	r24, r1
    58da:	22 c0       	rjmp	.+68     	; 0x5920 <twiReceive+0x5c>
    58dc:	80 91 37 1a 	lds	r24, 0x1A37	; 0x801a37 <_twiCurrentHandler>
    58e0:	90 91 38 1a 	lds	r25, 0x1A38	; 0x801a38 <_twiCurrentHandler+0x1>
    58e4:	c8 17       	cp	r28, r24
    58e6:	d9 07       	cpc	r29, r25
    58e8:	41 f0       	breq	.+16     	; 0x58fa <twiReceive+0x36>
    58ea:	3e df       	rcall	.-388    	; 0x5768 <_initTwiInterface>
    58ec:	89 81       	ldd	r24, Y+1	; 0x01
    58ee:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    58f2:	d0 93 38 1a 	sts	0x1A38, r29	; 0x801a38 <_twiCurrentHandler+0x1>
    58f6:	c0 93 37 1a 	sts	0x1A37, r28	; 0x801a37 <_twiCurrentHandler>
    58fa:	10 93 39 1a 	sts	0x1A39, r17	; 0x801a39 <_twiMessageLen>
    58fe:	88 81       	ld	r24, Y
    5900:	88 0f       	add	r24, r24
    5902:	81 60       	ori	r24, 0x01	; 1
    5904:	80 93 3a 1a 	sts	0x1A3A, r24	; 0x801a3a <_twiMessageBuffer>
    5908:	88 ef       	ldi	r24, 0xF8	; 248
    590a:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <_twiCurrentState>
    590e:	85 ea       	ldi	r24, 0xA5	; 165
    5910:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    5914:	85 e0       	ldi	r24, 0x05	; 5
    5916:	05 c0       	rjmp	.+10     	; 0x5922 <twiReceive+0x5e>
    5918:	86 e0       	ldi	r24, 0x06	; 6
    591a:	03 c0       	rjmp	.+6      	; 0x5922 <twiReceive+0x5e>
    591c:	87 e0       	ldi	r24, 0x07	; 7
    591e:	01 c0       	rjmp	.+2      	; 0x5922 <twiReceive+0x5e>
    5920:	82 e0       	ldi	r24, 0x02	; 2
    5922:	df 91       	pop	r29
    5924:	cf 91       	pop	r28
    5926:	1f 91       	pop	r17
    5928:	08 95       	ret

0000592a <__vector_39>:
    592a:	1f 92       	push	r1
    592c:	0f 92       	push	r0
    592e:	0f b6       	in	r0, 0x3f	; 63
    5930:	0f 92       	push	r0
    5932:	11 24       	eor	r1, r1
    5934:	0b b6       	in	r0, 0x3b	; 59
    5936:	0f 92       	push	r0
    5938:	2f 93       	push	r18
    593a:	3f 93       	push	r19
    593c:	4f 93       	push	r20
    593e:	5f 93       	push	r21
    5940:	6f 93       	push	r22
    5942:	7f 93       	push	r23
    5944:	8f 93       	push	r24
    5946:	9f 93       	push	r25
    5948:	af 93       	push	r26
    594a:	bf 93       	push	r27
    594c:	ef 93       	push	r30
    594e:	ff 93       	push	r31
    5950:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    5954:	8e 2f       	mov	r24, r30
    5956:	90 e0       	ldi	r25, 0x00	; 0
    5958:	fc 01       	movw	r30, r24
    595a:	38 97       	sbiw	r30, 0x08	; 8
    595c:	e1 35       	cpi	r30, 0x51	; 81
    595e:	f1 05       	cpc	r31, r1
    5960:	08 f0       	brcs	.+2      	; 0x5964 <__vector_39+0x3a>
    5962:	75 c0       	rjmp	.+234    	; 0x5a4e <__vector_39+0x124>
    5964:	88 27       	eor	r24, r24
    5966:	e4 58       	subi	r30, 0x84	; 132
    5968:	ff 4f       	sbci	r31, 0xFF	; 255
    596a:	8f 4f       	sbci	r24, 0xFF	; 255
    596c:	db c2       	rjmp	.+1462   	; 0x5f24 <__tablejump2__>
    596e:	10 92 36 1a 	sts	0x1A36, r1	; 0x801a36 <_index.1885>
    5972:	e0 91 36 1a 	lds	r30, 0x1A36	; 0x801a36 <_index.1885>
    5976:	80 91 39 1a 	lds	r24, 0x1A39	; 0x801a39 <_twiMessageLen>
    597a:	e8 17       	cp	r30, r24
    597c:	70 f4       	brcc	.+28     	; 0x599a <__vector_39+0x70>
    597e:	81 e0       	ldi	r24, 0x01	; 1
    5980:	8e 0f       	add	r24, r30
    5982:	80 93 36 1a 	sts	0x1A36, r24	; 0x801a36 <_index.1885>
    5986:	f0 e0       	ldi	r31, 0x00	; 0
    5988:	e6 5c       	subi	r30, 0xC6	; 198
    598a:	f5 4e       	sbci	r31, 0xE5	; 229
    598c:	80 81       	ld	r24, Z
    598e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    5992:	85 e8       	ldi	r24, 0x85	; 133
    5994:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    5998:	72 c0       	rjmp	.+228    	; 0x5a7e <__vector_39+0x154>
    599a:	84 e9       	ldi	r24, 0x94	; 148
    599c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    59a0:	80 91 37 1a 	lds	r24, 0x1A37	; 0x801a37 <_twiCurrentHandler>
    59a4:	90 91 38 1a 	lds	r25, 0x1A38	; 0x801a38 <_twiCurrentHandler+0x1>
    59a8:	dc 01       	movw	r26, r24
    59aa:	12 96       	adiw	r26, 0x02	; 2
    59ac:	ed 91       	ld	r30, X+
    59ae:	fc 91       	ld	r31, X
    59b0:	13 97       	sbiw	r26, 0x03	; 3
    59b2:	30 97       	sbiw	r30, 0x00	; 0
    59b4:	09 f4       	brne	.+2      	; 0x59b8 <__vector_39+0x8e>
    59b6:	63 c0       	rjmp	.+198    	; 0x5a7e <__vector_39+0x154>
    59b8:	20 e0       	ldi	r18, 0x00	; 0
    59ba:	40 e0       	ldi	r20, 0x00	; 0
    59bc:	50 e0       	ldi	r21, 0x00	; 0
    59be:	64 e0       	ldi	r22, 0x04	; 4
    59c0:	19 95       	eicall
    59c2:	5d c0       	rjmp	.+186    	; 0x5a7e <__vector_39+0x154>
    59c4:	e0 91 36 1a 	lds	r30, 0x1A36	; 0x801a36 <_index.1885>
    59c8:	81 e0       	ldi	r24, 0x01	; 1
    59ca:	8e 0f       	add	r24, r30
    59cc:	80 93 36 1a 	sts	0x1A36, r24	; 0x801a36 <_index.1885>
    59d0:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    59d4:	f0 e0       	ldi	r31, 0x00	; 0
    59d6:	e6 5c       	subi	r30, 0xC6	; 198
    59d8:	f5 4e       	sbci	r31, 0xE5	; 229
    59da:	80 83       	st	Z, r24
    59dc:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    59e0:	80 34       	cpi	r24, 0x40	; 64
    59e2:	11 f4       	brne	.+4      	; 0x59e8 <__vector_39+0xbe>
    59e4:	10 92 36 1a 	sts	0x1A36, r1	; 0x801a36 <_index.1885>
    59e8:	20 91 36 1a 	lds	r18, 0x1A36	; 0x801a36 <_index.1885>
    59ec:	30 e0       	ldi	r19, 0x00	; 0
    59ee:	80 91 39 1a 	lds	r24, 0x1A39	; 0x801a39 <_twiMessageLen>
    59f2:	90 e0       	ldi	r25, 0x00	; 0
    59f4:	01 97       	sbiw	r24, 0x01	; 1
    59f6:	28 17       	cp	r18, r24
    59f8:	39 07       	cpc	r19, r25
    59fa:	24 f4       	brge	.+8      	; 0x5a04 <__vector_39+0xda>
    59fc:	85 ec       	ldi	r24, 0xC5	; 197
    59fe:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    5a02:	3d c0       	rjmp	.+122    	; 0x5a7e <__vector_39+0x154>
    5a04:	85 e8       	ldi	r24, 0x85	; 133
    5a06:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    5a0a:	39 c0       	rjmp	.+114    	; 0x5a7e <__vector_39+0x154>
    5a0c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    5a10:	e0 91 36 1a 	lds	r30, 0x1A36	; 0x801a36 <_index.1885>
    5a14:	f0 e0       	ldi	r31, 0x00	; 0
    5a16:	e6 5c       	subi	r30, 0xC6	; 198
    5a18:	f5 4e       	sbci	r31, 0xE5	; 229
    5a1a:	80 83       	st	Z, r24
    5a1c:	84 e9       	ldi	r24, 0x94	; 148
    5a1e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    5a22:	80 91 37 1a 	lds	r24, 0x1A37	; 0x801a37 <_twiCurrentHandler>
    5a26:	90 91 38 1a 	lds	r25, 0x1A38	; 0x801a38 <_twiCurrentHandler+0x1>
    5a2a:	dc 01       	movw	r26, r24
    5a2c:	12 96       	adiw	r26, 0x02	; 2
    5a2e:	ed 91       	ld	r30, X+
    5a30:	fc 91       	ld	r31, X
    5a32:	13 97       	sbiw	r26, 0x03	; 3
    5a34:	30 97       	sbiw	r30, 0x00	; 0
    5a36:	19 f1       	breq	.+70     	; 0x5a7e <__vector_39+0x154>
    5a38:	20 91 39 1a 	lds	r18, 0x1A39	; 0x801a39 <_twiMessageLen>
    5a3c:	4a e3       	ldi	r20, 0x3A	; 58
    5a3e:	5a e1       	ldi	r21, 0x1A	; 26
    5a40:	65 e0       	ldi	r22, 0x05	; 5
    5a42:	19 95       	eicall
    5a44:	1c c0       	rjmp	.+56     	; 0x5a7e <__vector_39+0x154>
    5a46:	85 ea       	ldi	r24, 0xA5	; 165
    5a48:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    5a4c:	18 c0       	rjmp	.+48     	; 0x5a7e <__vector_39+0x154>
    5a4e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    5a52:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <_twiCurrentState>
    5a56:	84 e0       	ldi	r24, 0x04	; 4
    5a58:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    5a5c:	80 91 37 1a 	lds	r24, 0x1A37	; 0x801a37 <_twiCurrentHandler>
    5a60:	90 91 38 1a 	lds	r25, 0x1A38	; 0x801a38 <_twiCurrentHandler+0x1>
    5a64:	dc 01       	movw	r26, r24
    5a66:	12 96       	adiw	r26, 0x02	; 2
    5a68:	ed 91       	ld	r30, X+
    5a6a:	fc 91       	ld	r31, X
    5a6c:	13 97       	sbiw	r26, 0x03	; 3
    5a6e:	30 97       	sbiw	r30, 0x00	; 0
    5a70:	31 f0       	breq	.+12     	; 0x5a7e <__vector_39+0x154>
    5a72:	20 e0       	ldi	r18, 0x00	; 0
    5a74:	40 e0       	ldi	r20, 0x00	; 0
    5a76:	50 e0       	ldi	r21, 0x00	; 0
    5a78:	60 91 24 02 	lds	r22, 0x0224	; 0x800224 <_twiCurrentState>
    5a7c:	19 95       	eicall
    5a7e:	ff 91       	pop	r31
    5a80:	ef 91       	pop	r30
    5a82:	bf 91       	pop	r27
    5a84:	af 91       	pop	r26
    5a86:	9f 91       	pop	r25
    5a88:	8f 91       	pop	r24
    5a8a:	7f 91       	pop	r23
    5a8c:	6f 91       	pop	r22
    5a8e:	5f 91       	pop	r21
    5a90:	4f 91       	pop	r20
    5a92:	3f 91       	pop	r19
    5a94:	2f 91       	pop	r18
    5a96:	0f 90       	pop	r0
    5a98:	0b be       	out	0x3b, r0	; 59
    5a9a:	0f 90       	pop	r0
    5a9c:	0f be       	out	0x3f, r0	; 63
    5a9e:	0f 90       	pop	r0
    5aa0:	1f 90       	pop	r1
    5aa2:	18 95       	reti

00005aa4 <fifo_init>:
    5aa4:	fc 01       	movw	r30, r24
    5aa6:	41 11       	cpse	r20, r1
    5aa8:	01 c0       	rjmp	.+2      	; 0x5aac <fifo_init+0x8>
    5aaa:	e8 d3       	rcall	.+2000   	; 0x627c <abort>
    5aac:	84 2f       	mov	r24, r20
    5aae:	90 e0       	ldi	r25, 0x00	; 0
    5ab0:	9c 01       	movw	r18, r24
    5ab2:	21 50       	subi	r18, 0x01	; 1
    5ab4:	31 09       	sbc	r19, r1
    5ab6:	82 23       	and	r24, r18
    5ab8:	93 23       	and	r25, r19
    5aba:	89 2b       	or	r24, r25
    5abc:	09 f0       	breq	.+2      	; 0x5ac0 <fifo_init+0x1c>
    5abe:	de d3       	rcall	.+1980   	; 0x627c <abort>
    5ac0:	41 38       	cpi	r20, 0x81	; 129
    5ac2:	08 f0       	brcs	.+2      	; 0x5ac6 <fifo_init+0x22>
    5ac4:	db d3       	rcall	.+1974   	; 0x627c <abort>
    5ac6:	12 82       	std	Z+2, r1	; 0x02
    5ac8:	13 82       	std	Z+3, r1	; 0x03
    5aca:	44 83       	std	Z+4, r20	; 0x04
    5acc:	44 0f       	add	r20, r20
    5ace:	41 50       	subi	r20, 0x01	; 1
    5ad0:	45 83       	std	Z+5, r20	; 0x05
    5ad2:	71 83       	std	Z+1, r23	; 0x01
    5ad4:	60 83       	st	Z, r22
    5ad6:	80 e0       	ldi	r24, 0x00	; 0
    5ad8:	90 e0       	ldi	r25, 0x00	; 0
    5ada:	08 95       	ret

00005adc <__subsf3>:
    5adc:	50 58       	subi	r21, 0x80	; 128

00005ade <__addsf3>:
    5ade:	bb 27       	eor	r27, r27
    5ae0:	aa 27       	eor	r26, r26
    5ae2:	0e d0       	rcall	.+28     	; 0x5b00 <__addsf3x>
    5ae4:	4d c1       	rjmp	.+666    	; 0x5d80 <__fp_round>
    5ae6:	3e d1       	rcall	.+636    	; 0x5d64 <__fp_pscA>
    5ae8:	30 f0       	brcs	.+12     	; 0x5af6 <__addsf3+0x18>
    5aea:	43 d1       	rcall	.+646    	; 0x5d72 <__fp_pscB>
    5aec:	20 f0       	brcs	.+8      	; 0x5af6 <__addsf3+0x18>
    5aee:	31 f4       	brne	.+12     	; 0x5afc <__addsf3+0x1e>
    5af0:	9f 3f       	cpi	r25, 0xFF	; 255
    5af2:	11 f4       	brne	.+4      	; 0x5af8 <__addsf3+0x1a>
    5af4:	1e f4       	brtc	.+6      	; 0x5afc <__addsf3+0x1e>
    5af6:	33 c1       	rjmp	.+614    	; 0x5d5e <__fp_nan>
    5af8:	0e f4       	brtc	.+2      	; 0x5afc <__addsf3+0x1e>
    5afa:	e0 95       	com	r30
    5afc:	e7 fb       	bst	r30, 7
    5afe:	29 c1       	rjmp	.+594    	; 0x5d52 <__fp_inf>

00005b00 <__addsf3x>:
    5b00:	e9 2f       	mov	r30, r25
    5b02:	4f d1       	rcall	.+670    	; 0x5da2 <__fp_split3>
    5b04:	80 f3       	brcs	.-32     	; 0x5ae6 <__addsf3+0x8>
    5b06:	ba 17       	cp	r27, r26
    5b08:	62 07       	cpc	r22, r18
    5b0a:	73 07       	cpc	r23, r19
    5b0c:	84 07       	cpc	r24, r20
    5b0e:	95 07       	cpc	r25, r21
    5b10:	18 f0       	brcs	.+6      	; 0x5b18 <__addsf3x+0x18>
    5b12:	71 f4       	brne	.+28     	; 0x5b30 <__addsf3x+0x30>
    5b14:	9e f5       	brtc	.+102    	; 0x5b7c <__addsf3x+0x7c>
    5b16:	67 c1       	rjmp	.+718    	; 0x5de6 <__fp_zero>
    5b18:	0e f4       	brtc	.+2      	; 0x5b1c <__addsf3x+0x1c>
    5b1a:	e0 95       	com	r30
    5b1c:	0b 2e       	mov	r0, r27
    5b1e:	ba 2f       	mov	r27, r26
    5b20:	a0 2d       	mov	r26, r0
    5b22:	0b 01       	movw	r0, r22
    5b24:	b9 01       	movw	r22, r18
    5b26:	90 01       	movw	r18, r0
    5b28:	0c 01       	movw	r0, r24
    5b2a:	ca 01       	movw	r24, r20
    5b2c:	a0 01       	movw	r20, r0
    5b2e:	11 24       	eor	r1, r1
    5b30:	ff 27       	eor	r31, r31
    5b32:	59 1b       	sub	r21, r25
    5b34:	99 f0       	breq	.+38     	; 0x5b5c <__addsf3x+0x5c>
    5b36:	59 3f       	cpi	r21, 0xF9	; 249
    5b38:	50 f4       	brcc	.+20     	; 0x5b4e <__addsf3x+0x4e>
    5b3a:	50 3e       	cpi	r21, 0xE0	; 224
    5b3c:	68 f1       	brcs	.+90     	; 0x5b98 <__addsf3x+0x98>
    5b3e:	1a 16       	cp	r1, r26
    5b40:	f0 40       	sbci	r31, 0x00	; 0
    5b42:	a2 2f       	mov	r26, r18
    5b44:	23 2f       	mov	r18, r19
    5b46:	34 2f       	mov	r19, r20
    5b48:	44 27       	eor	r20, r20
    5b4a:	58 5f       	subi	r21, 0xF8	; 248
    5b4c:	f3 cf       	rjmp	.-26     	; 0x5b34 <__addsf3x+0x34>
    5b4e:	46 95       	lsr	r20
    5b50:	37 95       	ror	r19
    5b52:	27 95       	ror	r18
    5b54:	a7 95       	ror	r26
    5b56:	f0 40       	sbci	r31, 0x00	; 0
    5b58:	53 95       	inc	r21
    5b5a:	c9 f7       	brne	.-14     	; 0x5b4e <__addsf3x+0x4e>
    5b5c:	7e f4       	brtc	.+30     	; 0x5b7c <__addsf3x+0x7c>
    5b5e:	1f 16       	cp	r1, r31
    5b60:	ba 0b       	sbc	r27, r26
    5b62:	62 0b       	sbc	r22, r18
    5b64:	73 0b       	sbc	r23, r19
    5b66:	84 0b       	sbc	r24, r20
    5b68:	ba f0       	brmi	.+46     	; 0x5b98 <__addsf3x+0x98>
    5b6a:	91 50       	subi	r25, 0x01	; 1
    5b6c:	a1 f0       	breq	.+40     	; 0x5b96 <__addsf3x+0x96>
    5b6e:	ff 0f       	add	r31, r31
    5b70:	bb 1f       	adc	r27, r27
    5b72:	66 1f       	adc	r22, r22
    5b74:	77 1f       	adc	r23, r23
    5b76:	88 1f       	adc	r24, r24
    5b78:	c2 f7       	brpl	.-16     	; 0x5b6a <__addsf3x+0x6a>
    5b7a:	0e c0       	rjmp	.+28     	; 0x5b98 <__addsf3x+0x98>
    5b7c:	ba 0f       	add	r27, r26
    5b7e:	62 1f       	adc	r22, r18
    5b80:	73 1f       	adc	r23, r19
    5b82:	84 1f       	adc	r24, r20
    5b84:	48 f4       	brcc	.+18     	; 0x5b98 <__addsf3x+0x98>
    5b86:	87 95       	ror	r24
    5b88:	77 95       	ror	r23
    5b8a:	67 95       	ror	r22
    5b8c:	b7 95       	ror	r27
    5b8e:	f7 95       	ror	r31
    5b90:	9e 3f       	cpi	r25, 0xFE	; 254
    5b92:	08 f0       	brcs	.+2      	; 0x5b96 <__addsf3x+0x96>
    5b94:	b3 cf       	rjmp	.-154    	; 0x5afc <__addsf3+0x1e>
    5b96:	93 95       	inc	r25
    5b98:	88 0f       	add	r24, r24
    5b9a:	08 f0       	brcs	.+2      	; 0x5b9e <__addsf3x+0x9e>
    5b9c:	99 27       	eor	r25, r25
    5b9e:	ee 0f       	add	r30, r30
    5ba0:	97 95       	ror	r25
    5ba2:	87 95       	ror	r24
    5ba4:	08 95       	ret

00005ba6 <__divsf3>:
    5ba6:	0c d0       	rcall	.+24     	; 0x5bc0 <__divsf3x>
    5ba8:	eb c0       	rjmp	.+470    	; 0x5d80 <__fp_round>
    5baa:	e3 d0       	rcall	.+454    	; 0x5d72 <__fp_pscB>
    5bac:	40 f0       	brcs	.+16     	; 0x5bbe <__divsf3+0x18>
    5bae:	da d0       	rcall	.+436    	; 0x5d64 <__fp_pscA>
    5bb0:	30 f0       	brcs	.+12     	; 0x5bbe <__divsf3+0x18>
    5bb2:	21 f4       	brne	.+8      	; 0x5bbc <__divsf3+0x16>
    5bb4:	5f 3f       	cpi	r21, 0xFF	; 255
    5bb6:	19 f0       	breq	.+6      	; 0x5bbe <__divsf3+0x18>
    5bb8:	cc c0       	rjmp	.+408    	; 0x5d52 <__fp_inf>
    5bba:	51 11       	cpse	r21, r1
    5bbc:	15 c1       	rjmp	.+554    	; 0x5de8 <__fp_szero>
    5bbe:	cf c0       	rjmp	.+414    	; 0x5d5e <__fp_nan>

00005bc0 <__divsf3x>:
    5bc0:	f0 d0       	rcall	.+480    	; 0x5da2 <__fp_split3>
    5bc2:	98 f3       	brcs	.-26     	; 0x5baa <__divsf3+0x4>

00005bc4 <__divsf3_pse>:
    5bc4:	99 23       	and	r25, r25
    5bc6:	c9 f3       	breq	.-14     	; 0x5bba <__divsf3+0x14>
    5bc8:	55 23       	and	r21, r21
    5bca:	b1 f3       	breq	.-20     	; 0x5bb8 <__divsf3+0x12>
    5bcc:	95 1b       	sub	r25, r21
    5bce:	55 0b       	sbc	r21, r21
    5bd0:	bb 27       	eor	r27, r27
    5bd2:	aa 27       	eor	r26, r26
    5bd4:	62 17       	cp	r22, r18
    5bd6:	73 07       	cpc	r23, r19
    5bd8:	84 07       	cpc	r24, r20
    5bda:	38 f0       	brcs	.+14     	; 0x5bea <__divsf3_pse+0x26>
    5bdc:	9f 5f       	subi	r25, 0xFF	; 255
    5bde:	5f 4f       	sbci	r21, 0xFF	; 255
    5be0:	22 0f       	add	r18, r18
    5be2:	33 1f       	adc	r19, r19
    5be4:	44 1f       	adc	r20, r20
    5be6:	aa 1f       	adc	r26, r26
    5be8:	a9 f3       	breq	.-22     	; 0x5bd4 <__divsf3_pse+0x10>
    5bea:	33 d0       	rcall	.+102    	; 0x5c52 <__divsf3_pse+0x8e>
    5bec:	0e 2e       	mov	r0, r30
    5bee:	3a f0       	brmi	.+14     	; 0x5bfe <__divsf3_pse+0x3a>
    5bf0:	e0 e8       	ldi	r30, 0x80	; 128
    5bf2:	30 d0       	rcall	.+96     	; 0x5c54 <__divsf3_pse+0x90>
    5bf4:	91 50       	subi	r25, 0x01	; 1
    5bf6:	50 40       	sbci	r21, 0x00	; 0
    5bf8:	e6 95       	lsr	r30
    5bfa:	00 1c       	adc	r0, r0
    5bfc:	ca f7       	brpl	.-14     	; 0x5bf0 <__divsf3_pse+0x2c>
    5bfe:	29 d0       	rcall	.+82     	; 0x5c52 <__divsf3_pse+0x8e>
    5c00:	fe 2f       	mov	r31, r30
    5c02:	27 d0       	rcall	.+78     	; 0x5c52 <__divsf3_pse+0x8e>
    5c04:	66 0f       	add	r22, r22
    5c06:	77 1f       	adc	r23, r23
    5c08:	88 1f       	adc	r24, r24
    5c0a:	bb 1f       	adc	r27, r27
    5c0c:	26 17       	cp	r18, r22
    5c0e:	37 07       	cpc	r19, r23
    5c10:	48 07       	cpc	r20, r24
    5c12:	ab 07       	cpc	r26, r27
    5c14:	b0 e8       	ldi	r27, 0x80	; 128
    5c16:	09 f0       	breq	.+2      	; 0x5c1a <__divsf3_pse+0x56>
    5c18:	bb 0b       	sbc	r27, r27
    5c1a:	80 2d       	mov	r24, r0
    5c1c:	bf 01       	movw	r22, r30
    5c1e:	ff 27       	eor	r31, r31
    5c20:	93 58       	subi	r25, 0x83	; 131
    5c22:	5f 4f       	sbci	r21, 0xFF	; 255
    5c24:	2a f0       	brmi	.+10     	; 0x5c30 <__divsf3_pse+0x6c>
    5c26:	9e 3f       	cpi	r25, 0xFE	; 254
    5c28:	51 05       	cpc	r21, r1
    5c2a:	68 f0       	brcs	.+26     	; 0x5c46 <__divsf3_pse+0x82>
    5c2c:	92 c0       	rjmp	.+292    	; 0x5d52 <__fp_inf>
    5c2e:	dc c0       	rjmp	.+440    	; 0x5de8 <__fp_szero>
    5c30:	5f 3f       	cpi	r21, 0xFF	; 255
    5c32:	ec f3       	brlt	.-6      	; 0x5c2e <__divsf3_pse+0x6a>
    5c34:	98 3e       	cpi	r25, 0xE8	; 232
    5c36:	dc f3       	brlt	.-10     	; 0x5c2e <__divsf3_pse+0x6a>
    5c38:	86 95       	lsr	r24
    5c3a:	77 95       	ror	r23
    5c3c:	67 95       	ror	r22
    5c3e:	b7 95       	ror	r27
    5c40:	f7 95       	ror	r31
    5c42:	9f 5f       	subi	r25, 0xFF	; 255
    5c44:	c9 f7       	brne	.-14     	; 0x5c38 <__divsf3_pse+0x74>
    5c46:	88 0f       	add	r24, r24
    5c48:	91 1d       	adc	r25, r1
    5c4a:	96 95       	lsr	r25
    5c4c:	87 95       	ror	r24
    5c4e:	97 f9       	bld	r25, 7
    5c50:	08 95       	ret
    5c52:	e1 e0       	ldi	r30, 0x01	; 1
    5c54:	66 0f       	add	r22, r22
    5c56:	77 1f       	adc	r23, r23
    5c58:	88 1f       	adc	r24, r24
    5c5a:	bb 1f       	adc	r27, r27
    5c5c:	62 17       	cp	r22, r18
    5c5e:	73 07       	cpc	r23, r19
    5c60:	84 07       	cpc	r24, r20
    5c62:	ba 07       	cpc	r27, r26
    5c64:	20 f0       	brcs	.+8      	; 0x5c6e <__divsf3_pse+0xaa>
    5c66:	62 1b       	sub	r22, r18
    5c68:	73 0b       	sbc	r23, r19
    5c6a:	84 0b       	sbc	r24, r20
    5c6c:	ba 0b       	sbc	r27, r26
    5c6e:	ee 1f       	adc	r30, r30
    5c70:	88 f7       	brcc	.-30     	; 0x5c54 <__divsf3_pse+0x90>
    5c72:	e0 95       	com	r30
    5c74:	08 95       	ret

00005c76 <__fixsfsi>:
    5c76:	04 d0       	rcall	.+8      	; 0x5c80 <__fixunssfsi>
    5c78:	68 94       	set
    5c7a:	b1 11       	cpse	r27, r1
    5c7c:	b5 c0       	rjmp	.+362    	; 0x5de8 <__fp_szero>
    5c7e:	08 95       	ret

00005c80 <__fixunssfsi>:
    5c80:	98 d0       	rcall	.+304    	; 0x5db2 <__fp_splitA>
    5c82:	88 f0       	brcs	.+34     	; 0x5ca6 <__fixunssfsi+0x26>
    5c84:	9f 57       	subi	r25, 0x7F	; 127
    5c86:	90 f0       	brcs	.+36     	; 0x5cac <__fixunssfsi+0x2c>
    5c88:	b9 2f       	mov	r27, r25
    5c8a:	99 27       	eor	r25, r25
    5c8c:	b7 51       	subi	r27, 0x17	; 23
    5c8e:	a0 f0       	brcs	.+40     	; 0x5cb8 <__fixunssfsi+0x38>
    5c90:	d1 f0       	breq	.+52     	; 0x5cc6 <__fixunssfsi+0x46>
    5c92:	66 0f       	add	r22, r22
    5c94:	77 1f       	adc	r23, r23
    5c96:	88 1f       	adc	r24, r24
    5c98:	99 1f       	adc	r25, r25
    5c9a:	1a f0       	brmi	.+6      	; 0x5ca2 <__fixunssfsi+0x22>
    5c9c:	ba 95       	dec	r27
    5c9e:	c9 f7       	brne	.-14     	; 0x5c92 <__fixunssfsi+0x12>
    5ca0:	12 c0       	rjmp	.+36     	; 0x5cc6 <__fixunssfsi+0x46>
    5ca2:	b1 30       	cpi	r27, 0x01	; 1
    5ca4:	81 f0       	breq	.+32     	; 0x5cc6 <__fixunssfsi+0x46>
    5ca6:	9f d0       	rcall	.+318    	; 0x5de6 <__fp_zero>
    5ca8:	b1 e0       	ldi	r27, 0x01	; 1
    5caa:	08 95       	ret
    5cac:	9c c0       	rjmp	.+312    	; 0x5de6 <__fp_zero>
    5cae:	67 2f       	mov	r22, r23
    5cb0:	78 2f       	mov	r23, r24
    5cb2:	88 27       	eor	r24, r24
    5cb4:	b8 5f       	subi	r27, 0xF8	; 248
    5cb6:	39 f0       	breq	.+14     	; 0x5cc6 <__fixunssfsi+0x46>
    5cb8:	b9 3f       	cpi	r27, 0xF9	; 249
    5cba:	cc f3       	brlt	.-14     	; 0x5cae <__fixunssfsi+0x2e>
    5cbc:	86 95       	lsr	r24
    5cbe:	77 95       	ror	r23
    5cc0:	67 95       	ror	r22
    5cc2:	b3 95       	inc	r27
    5cc4:	d9 f7       	brne	.-10     	; 0x5cbc <__fixunssfsi+0x3c>
    5cc6:	3e f4       	brtc	.+14     	; 0x5cd6 <__fixunssfsi+0x56>
    5cc8:	90 95       	com	r25
    5cca:	80 95       	com	r24
    5ccc:	70 95       	com	r23
    5cce:	61 95       	neg	r22
    5cd0:	7f 4f       	sbci	r23, 0xFF	; 255
    5cd2:	8f 4f       	sbci	r24, 0xFF	; 255
    5cd4:	9f 4f       	sbci	r25, 0xFF	; 255
    5cd6:	08 95       	ret

00005cd8 <__floatunsisf>:
    5cd8:	e8 94       	clt
    5cda:	09 c0       	rjmp	.+18     	; 0x5cee <__floatsisf+0x12>

00005cdc <__floatsisf>:
    5cdc:	97 fb       	bst	r25, 7
    5cde:	3e f4       	brtc	.+14     	; 0x5cee <__floatsisf+0x12>
    5ce0:	90 95       	com	r25
    5ce2:	80 95       	com	r24
    5ce4:	70 95       	com	r23
    5ce6:	61 95       	neg	r22
    5ce8:	7f 4f       	sbci	r23, 0xFF	; 255
    5cea:	8f 4f       	sbci	r24, 0xFF	; 255
    5cec:	9f 4f       	sbci	r25, 0xFF	; 255
    5cee:	99 23       	and	r25, r25
    5cf0:	a9 f0       	breq	.+42     	; 0x5d1c <__floatsisf+0x40>
    5cf2:	f9 2f       	mov	r31, r25
    5cf4:	96 e9       	ldi	r25, 0x96	; 150
    5cf6:	bb 27       	eor	r27, r27
    5cf8:	93 95       	inc	r25
    5cfa:	f6 95       	lsr	r31
    5cfc:	87 95       	ror	r24
    5cfe:	77 95       	ror	r23
    5d00:	67 95       	ror	r22
    5d02:	b7 95       	ror	r27
    5d04:	f1 11       	cpse	r31, r1
    5d06:	f8 cf       	rjmp	.-16     	; 0x5cf8 <__floatsisf+0x1c>
    5d08:	fa f4       	brpl	.+62     	; 0x5d48 <__floatsisf+0x6c>
    5d0a:	bb 0f       	add	r27, r27
    5d0c:	11 f4       	brne	.+4      	; 0x5d12 <__floatsisf+0x36>
    5d0e:	60 ff       	sbrs	r22, 0
    5d10:	1b c0       	rjmp	.+54     	; 0x5d48 <__floatsisf+0x6c>
    5d12:	6f 5f       	subi	r22, 0xFF	; 255
    5d14:	7f 4f       	sbci	r23, 0xFF	; 255
    5d16:	8f 4f       	sbci	r24, 0xFF	; 255
    5d18:	9f 4f       	sbci	r25, 0xFF	; 255
    5d1a:	16 c0       	rjmp	.+44     	; 0x5d48 <__floatsisf+0x6c>
    5d1c:	88 23       	and	r24, r24
    5d1e:	11 f0       	breq	.+4      	; 0x5d24 <__floatsisf+0x48>
    5d20:	96 e9       	ldi	r25, 0x96	; 150
    5d22:	11 c0       	rjmp	.+34     	; 0x5d46 <__floatsisf+0x6a>
    5d24:	77 23       	and	r23, r23
    5d26:	21 f0       	breq	.+8      	; 0x5d30 <__floatsisf+0x54>
    5d28:	9e e8       	ldi	r25, 0x8E	; 142
    5d2a:	87 2f       	mov	r24, r23
    5d2c:	76 2f       	mov	r23, r22
    5d2e:	05 c0       	rjmp	.+10     	; 0x5d3a <__floatsisf+0x5e>
    5d30:	66 23       	and	r22, r22
    5d32:	71 f0       	breq	.+28     	; 0x5d50 <__floatsisf+0x74>
    5d34:	96 e8       	ldi	r25, 0x86	; 134
    5d36:	86 2f       	mov	r24, r22
    5d38:	70 e0       	ldi	r23, 0x00	; 0
    5d3a:	60 e0       	ldi	r22, 0x00	; 0
    5d3c:	2a f0       	brmi	.+10     	; 0x5d48 <__floatsisf+0x6c>
    5d3e:	9a 95       	dec	r25
    5d40:	66 0f       	add	r22, r22
    5d42:	77 1f       	adc	r23, r23
    5d44:	88 1f       	adc	r24, r24
    5d46:	da f7       	brpl	.-10     	; 0x5d3e <__floatsisf+0x62>
    5d48:	88 0f       	add	r24, r24
    5d4a:	96 95       	lsr	r25
    5d4c:	87 95       	ror	r24
    5d4e:	97 f9       	bld	r25, 7
    5d50:	08 95       	ret

00005d52 <__fp_inf>:
    5d52:	97 f9       	bld	r25, 7
    5d54:	9f 67       	ori	r25, 0x7F	; 127
    5d56:	80 e8       	ldi	r24, 0x80	; 128
    5d58:	70 e0       	ldi	r23, 0x00	; 0
    5d5a:	60 e0       	ldi	r22, 0x00	; 0
    5d5c:	08 95       	ret

00005d5e <__fp_nan>:
    5d5e:	9f ef       	ldi	r25, 0xFF	; 255
    5d60:	80 ec       	ldi	r24, 0xC0	; 192
    5d62:	08 95       	ret

00005d64 <__fp_pscA>:
    5d64:	00 24       	eor	r0, r0
    5d66:	0a 94       	dec	r0
    5d68:	16 16       	cp	r1, r22
    5d6a:	17 06       	cpc	r1, r23
    5d6c:	18 06       	cpc	r1, r24
    5d6e:	09 06       	cpc	r0, r25
    5d70:	08 95       	ret

00005d72 <__fp_pscB>:
    5d72:	00 24       	eor	r0, r0
    5d74:	0a 94       	dec	r0
    5d76:	12 16       	cp	r1, r18
    5d78:	13 06       	cpc	r1, r19
    5d7a:	14 06       	cpc	r1, r20
    5d7c:	05 06       	cpc	r0, r21
    5d7e:	08 95       	ret

00005d80 <__fp_round>:
    5d80:	09 2e       	mov	r0, r25
    5d82:	03 94       	inc	r0
    5d84:	00 0c       	add	r0, r0
    5d86:	11 f4       	brne	.+4      	; 0x5d8c <__fp_round+0xc>
    5d88:	88 23       	and	r24, r24
    5d8a:	52 f0       	brmi	.+20     	; 0x5da0 <__fp_round+0x20>
    5d8c:	bb 0f       	add	r27, r27
    5d8e:	40 f4       	brcc	.+16     	; 0x5da0 <__fp_round+0x20>
    5d90:	bf 2b       	or	r27, r31
    5d92:	11 f4       	brne	.+4      	; 0x5d98 <__fp_round+0x18>
    5d94:	60 ff       	sbrs	r22, 0
    5d96:	04 c0       	rjmp	.+8      	; 0x5da0 <__fp_round+0x20>
    5d98:	6f 5f       	subi	r22, 0xFF	; 255
    5d9a:	7f 4f       	sbci	r23, 0xFF	; 255
    5d9c:	8f 4f       	sbci	r24, 0xFF	; 255
    5d9e:	9f 4f       	sbci	r25, 0xFF	; 255
    5da0:	08 95       	ret

00005da2 <__fp_split3>:
    5da2:	57 fd       	sbrc	r21, 7
    5da4:	90 58       	subi	r25, 0x80	; 128
    5da6:	44 0f       	add	r20, r20
    5da8:	55 1f       	adc	r21, r21
    5daa:	59 f0       	breq	.+22     	; 0x5dc2 <__fp_splitA+0x10>
    5dac:	5f 3f       	cpi	r21, 0xFF	; 255
    5dae:	71 f0       	breq	.+28     	; 0x5dcc <__fp_splitA+0x1a>
    5db0:	47 95       	ror	r20

00005db2 <__fp_splitA>:
    5db2:	88 0f       	add	r24, r24
    5db4:	97 fb       	bst	r25, 7
    5db6:	99 1f       	adc	r25, r25
    5db8:	61 f0       	breq	.+24     	; 0x5dd2 <__fp_splitA+0x20>
    5dba:	9f 3f       	cpi	r25, 0xFF	; 255
    5dbc:	79 f0       	breq	.+30     	; 0x5ddc <__fp_splitA+0x2a>
    5dbe:	87 95       	ror	r24
    5dc0:	08 95       	ret
    5dc2:	12 16       	cp	r1, r18
    5dc4:	13 06       	cpc	r1, r19
    5dc6:	14 06       	cpc	r1, r20
    5dc8:	55 1f       	adc	r21, r21
    5dca:	f2 cf       	rjmp	.-28     	; 0x5db0 <__fp_split3+0xe>
    5dcc:	46 95       	lsr	r20
    5dce:	f1 df       	rcall	.-30     	; 0x5db2 <__fp_splitA>
    5dd0:	08 c0       	rjmp	.+16     	; 0x5de2 <__fp_splitA+0x30>
    5dd2:	16 16       	cp	r1, r22
    5dd4:	17 06       	cpc	r1, r23
    5dd6:	18 06       	cpc	r1, r24
    5dd8:	99 1f       	adc	r25, r25
    5dda:	f1 cf       	rjmp	.-30     	; 0x5dbe <__fp_splitA+0xc>
    5ddc:	86 95       	lsr	r24
    5dde:	71 05       	cpc	r23, r1
    5de0:	61 05       	cpc	r22, r1
    5de2:	08 94       	sec
    5de4:	08 95       	ret

00005de6 <__fp_zero>:
    5de6:	e8 94       	clt

00005de8 <__fp_szero>:
    5de8:	bb 27       	eor	r27, r27
    5dea:	66 27       	eor	r22, r22
    5dec:	77 27       	eor	r23, r23
    5dee:	cb 01       	movw	r24, r22
    5df0:	97 f9       	bld	r25, 7
    5df2:	08 95       	ret

00005df4 <__mulsf3>:
    5df4:	0b d0       	rcall	.+22     	; 0x5e0c <__mulsf3x>
    5df6:	c4 cf       	rjmp	.-120    	; 0x5d80 <__fp_round>
    5df8:	b5 df       	rcall	.-150    	; 0x5d64 <__fp_pscA>
    5dfa:	28 f0       	brcs	.+10     	; 0x5e06 <__mulsf3+0x12>
    5dfc:	ba df       	rcall	.-140    	; 0x5d72 <__fp_pscB>
    5dfe:	18 f0       	brcs	.+6      	; 0x5e06 <__mulsf3+0x12>
    5e00:	95 23       	and	r25, r21
    5e02:	09 f0       	breq	.+2      	; 0x5e06 <__mulsf3+0x12>
    5e04:	a6 cf       	rjmp	.-180    	; 0x5d52 <__fp_inf>
    5e06:	ab cf       	rjmp	.-170    	; 0x5d5e <__fp_nan>
    5e08:	11 24       	eor	r1, r1
    5e0a:	ee cf       	rjmp	.-36     	; 0x5de8 <__fp_szero>

00005e0c <__mulsf3x>:
    5e0c:	ca df       	rcall	.-108    	; 0x5da2 <__fp_split3>
    5e0e:	a0 f3       	brcs	.-24     	; 0x5df8 <__mulsf3+0x4>

00005e10 <__mulsf3_pse>:
    5e10:	95 9f       	mul	r25, r21
    5e12:	d1 f3       	breq	.-12     	; 0x5e08 <__mulsf3+0x14>
    5e14:	95 0f       	add	r25, r21
    5e16:	50 e0       	ldi	r21, 0x00	; 0
    5e18:	55 1f       	adc	r21, r21
    5e1a:	62 9f       	mul	r22, r18
    5e1c:	f0 01       	movw	r30, r0
    5e1e:	72 9f       	mul	r23, r18
    5e20:	bb 27       	eor	r27, r27
    5e22:	f0 0d       	add	r31, r0
    5e24:	b1 1d       	adc	r27, r1
    5e26:	63 9f       	mul	r22, r19
    5e28:	aa 27       	eor	r26, r26
    5e2a:	f0 0d       	add	r31, r0
    5e2c:	b1 1d       	adc	r27, r1
    5e2e:	aa 1f       	adc	r26, r26
    5e30:	64 9f       	mul	r22, r20
    5e32:	66 27       	eor	r22, r22
    5e34:	b0 0d       	add	r27, r0
    5e36:	a1 1d       	adc	r26, r1
    5e38:	66 1f       	adc	r22, r22
    5e3a:	82 9f       	mul	r24, r18
    5e3c:	22 27       	eor	r18, r18
    5e3e:	b0 0d       	add	r27, r0
    5e40:	a1 1d       	adc	r26, r1
    5e42:	62 1f       	adc	r22, r18
    5e44:	73 9f       	mul	r23, r19
    5e46:	b0 0d       	add	r27, r0
    5e48:	a1 1d       	adc	r26, r1
    5e4a:	62 1f       	adc	r22, r18
    5e4c:	83 9f       	mul	r24, r19
    5e4e:	a0 0d       	add	r26, r0
    5e50:	61 1d       	adc	r22, r1
    5e52:	22 1f       	adc	r18, r18
    5e54:	74 9f       	mul	r23, r20
    5e56:	33 27       	eor	r19, r19
    5e58:	a0 0d       	add	r26, r0
    5e5a:	61 1d       	adc	r22, r1
    5e5c:	23 1f       	adc	r18, r19
    5e5e:	84 9f       	mul	r24, r20
    5e60:	60 0d       	add	r22, r0
    5e62:	21 1d       	adc	r18, r1
    5e64:	82 2f       	mov	r24, r18
    5e66:	76 2f       	mov	r23, r22
    5e68:	6a 2f       	mov	r22, r26
    5e6a:	11 24       	eor	r1, r1
    5e6c:	9f 57       	subi	r25, 0x7F	; 127
    5e6e:	50 40       	sbci	r21, 0x00	; 0
    5e70:	8a f0       	brmi	.+34     	; 0x5e94 <__mulsf3_pse+0x84>
    5e72:	e1 f0       	breq	.+56     	; 0x5eac <__mulsf3_pse+0x9c>
    5e74:	88 23       	and	r24, r24
    5e76:	4a f0       	brmi	.+18     	; 0x5e8a <__mulsf3_pse+0x7a>
    5e78:	ee 0f       	add	r30, r30
    5e7a:	ff 1f       	adc	r31, r31
    5e7c:	bb 1f       	adc	r27, r27
    5e7e:	66 1f       	adc	r22, r22
    5e80:	77 1f       	adc	r23, r23
    5e82:	88 1f       	adc	r24, r24
    5e84:	91 50       	subi	r25, 0x01	; 1
    5e86:	50 40       	sbci	r21, 0x00	; 0
    5e88:	a9 f7       	brne	.-22     	; 0x5e74 <__mulsf3_pse+0x64>
    5e8a:	9e 3f       	cpi	r25, 0xFE	; 254
    5e8c:	51 05       	cpc	r21, r1
    5e8e:	70 f0       	brcs	.+28     	; 0x5eac <__mulsf3_pse+0x9c>
    5e90:	60 cf       	rjmp	.-320    	; 0x5d52 <__fp_inf>
    5e92:	aa cf       	rjmp	.-172    	; 0x5de8 <__fp_szero>
    5e94:	5f 3f       	cpi	r21, 0xFF	; 255
    5e96:	ec f3       	brlt	.-6      	; 0x5e92 <__mulsf3_pse+0x82>
    5e98:	98 3e       	cpi	r25, 0xE8	; 232
    5e9a:	dc f3       	brlt	.-10     	; 0x5e92 <__mulsf3_pse+0x82>
    5e9c:	86 95       	lsr	r24
    5e9e:	77 95       	ror	r23
    5ea0:	67 95       	ror	r22
    5ea2:	b7 95       	ror	r27
    5ea4:	f7 95       	ror	r31
    5ea6:	e7 95       	ror	r30
    5ea8:	9f 5f       	subi	r25, 0xFF	; 255
    5eaa:	c1 f7       	brne	.-16     	; 0x5e9c <__mulsf3_pse+0x8c>
    5eac:	fe 2b       	or	r31, r30
    5eae:	88 0f       	add	r24, r24
    5eb0:	91 1d       	adc	r25, r1
    5eb2:	96 95       	lsr	r25
    5eb4:	87 95       	ror	r24
    5eb6:	97 f9       	bld	r25, 7
    5eb8:	08 95       	ret

00005eba <__divmodhi4>:
    5eba:	97 fb       	bst	r25, 7
    5ebc:	07 2e       	mov	r0, r23
    5ebe:	16 f4       	brtc	.+4      	; 0x5ec4 <__divmodhi4+0xa>
    5ec0:	00 94       	com	r0
    5ec2:	06 d0       	rcall	.+12     	; 0x5ed0 <__divmodhi4_neg1>
    5ec4:	77 fd       	sbrc	r23, 7
    5ec6:	08 d0       	rcall	.+16     	; 0x5ed8 <__divmodhi4_neg2>
    5ec8:	35 d0       	rcall	.+106    	; 0x5f34 <__udivmodhi4>
    5eca:	07 fc       	sbrc	r0, 7
    5ecc:	05 d0       	rcall	.+10     	; 0x5ed8 <__divmodhi4_neg2>
    5ece:	3e f4       	brtc	.+14     	; 0x5ede <__divmodhi4_exit>

00005ed0 <__divmodhi4_neg1>:
    5ed0:	90 95       	com	r25
    5ed2:	81 95       	neg	r24
    5ed4:	9f 4f       	sbci	r25, 0xFF	; 255
    5ed6:	08 95       	ret

00005ed8 <__divmodhi4_neg2>:
    5ed8:	70 95       	com	r23
    5eda:	61 95       	neg	r22
    5edc:	7f 4f       	sbci	r23, 0xFF	; 255

00005ede <__divmodhi4_exit>:
    5ede:	08 95       	ret

00005ee0 <__udivmodsi4>:
    5ee0:	a1 e2       	ldi	r26, 0x21	; 33
    5ee2:	1a 2e       	mov	r1, r26
    5ee4:	aa 1b       	sub	r26, r26
    5ee6:	bb 1b       	sub	r27, r27
    5ee8:	fd 01       	movw	r30, r26
    5eea:	0d c0       	rjmp	.+26     	; 0x5f06 <__udivmodsi4_ep>

00005eec <__udivmodsi4_loop>:
    5eec:	aa 1f       	adc	r26, r26
    5eee:	bb 1f       	adc	r27, r27
    5ef0:	ee 1f       	adc	r30, r30
    5ef2:	ff 1f       	adc	r31, r31
    5ef4:	a2 17       	cp	r26, r18
    5ef6:	b3 07       	cpc	r27, r19
    5ef8:	e4 07       	cpc	r30, r20
    5efa:	f5 07       	cpc	r31, r21
    5efc:	20 f0       	brcs	.+8      	; 0x5f06 <__udivmodsi4_ep>
    5efe:	a2 1b       	sub	r26, r18
    5f00:	b3 0b       	sbc	r27, r19
    5f02:	e4 0b       	sbc	r30, r20
    5f04:	f5 0b       	sbc	r31, r21

00005f06 <__udivmodsi4_ep>:
    5f06:	66 1f       	adc	r22, r22
    5f08:	77 1f       	adc	r23, r23
    5f0a:	88 1f       	adc	r24, r24
    5f0c:	99 1f       	adc	r25, r25
    5f0e:	1a 94       	dec	r1
    5f10:	69 f7       	brne	.-38     	; 0x5eec <__udivmodsi4_loop>
    5f12:	60 95       	com	r22
    5f14:	70 95       	com	r23
    5f16:	80 95       	com	r24
    5f18:	90 95       	com	r25
    5f1a:	9b 01       	movw	r18, r22
    5f1c:	ac 01       	movw	r20, r24
    5f1e:	bd 01       	movw	r22, r26
    5f20:	cf 01       	movw	r24, r30
    5f22:	08 95       	ret

00005f24 <__tablejump2__>:
    5f24:	ee 0f       	add	r30, r30
    5f26:	ff 1f       	adc	r31, r31
    5f28:	88 1f       	adc	r24, r24
    5f2a:	8b bf       	out	0x3b, r24	; 59
    5f2c:	07 90       	elpm	r0, Z+
    5f2e:	f6 91       	elpm	r31, Z
    5f30:	e0 2d       	mov	r30, r0
    5f32:	19 94       	eijmp

00005f34 <__udivmodhi4>:
    5f34:	aa 1b       	sub	r26, r26
    5f36:	bb 1b       	sub	r27, r27
    5f38:	51 e1       	ldi	r21, 0x11	; 17
    5f3a:	07 c0       	rjmp	.+14     	; 0x5f4a <__udivmodhi4_ep>

00005f3c <__udivmodhi4_loop>:
    5f3c:	aa 1f       	adc	r26, r26
    5f3e:	bb 1f       	adc	r27, r27
    5f40:	a6 17       	cp	r26, r22
    5f42:	b7 07       	cpc	r27, r23
    5f44:	10 f0       	brcs	.+4      	; 0x5f4a <__udivmodhi4_ep>
    5f46:	a6 1b       	sub	r26, r22
    5f48:	b7 0b       	sbc	r27, r23

00005f4a <__udivmodhi4_ep>:
    5f4a:	88 1f       	adc	r24, r24
    5f4c:	99 1f       	adc	r25, r25
    5f4e:	5a 95       	dec	r21
    5f50:	a9 f7       	brne	.-22     	; 0x5f3c <__udivmodhi4_loop>
    5f52:	80 95       	com	r24
    5f54:	90 95       	com	r25
    5f56:	bc 01       	movw	r22, r24
    5f58:	cd 01       	movw	r24, r26
    5f5a:	08 95       	ret

00005f5c <calloc>:
    5f5c:	0f 93       	push	r16
    5f5e:	1f 93       	push	r17
    5f60:	cf 93       	push	r28
    5f62:	df 93       	push	r29
    5f64:	86 9f       	mul	r24, r22
    5f66:	80 01       	movw	r16, r0
    5f68:	87 9f       	mul	r24, r23
    5f6a:	10 0d       	add	r17, r0
    5f6c:	96 9f       	mul	r25, r22
    5f6e:	10 0d       	add	r17, r0
    5f70:	11 24       	eor	r1, r1
    5f72:	c8 01       	movw	r24, r16
    5f74:	0d d0       	rcall	.+26     	; 0x5f90 <malloc>
    5f76:	ec 01       	movw	r28, r24
    5f78:	00 97       	sbiw	r24, 0x00	; 0
    5f7a:	21 f0       	breq	.+8      	; 0x5f84 <calloc+0x28>
    5f7c:	a8 01       	movw	r20, r16
    5f7e:	60 e0       	ldi	r22, 0x00	; 0
    5f80:	70 e0       	ldi	r23, 0x00	; 0
    5f82:	89 d1       	rcall	.+786    	; 0x6296 <memset>
    5f84:	ce 01       	movw	r24, r28
    5f86:	df 91       	pop	r29
    5f88:	cf 91       	pop	r28
    5f8a:	1f 91       	pop	r17
    5f8c:	0f 91       	pop	r16
    5f8e:	08 95       	ret

00005f90 <malloc>:
    5f90:	0f 93       	push	r16
    5f92:	1f 93       	push	r17
    5f94:	cf 93       	push	r28
    5f96:	df 93       	push	r29
    5f98:	82 30       	cpi	r24, 0x02	; 2
    5f9a:	91 05       	cpc	r25, r1
    5f9c:	10 f4       	brcc	.+4      	; 0x5fa2 <malloc+0x12>
    5f9e:	82 e0       	ldi	r24, 0x02	; 2
    5fa0:	90 e0       	ldi	r25, 0x00	; 0
    5fa2:	e0 91 7d 1a 	lds	r30, 0x1A7D	; 0x801a7d <__flp>
    5fa6:	f0 91 7e 1a 	lds	r31, 0x1A7E	; 0x801a7e <__flp+0x1>
    5faa:	20 e0       	ldi	r18, 0x00	; 0
    5fac:	30 e0       	ldi	r19, 0x00	; 0
    5fae:	a0 e0       	ldi	r26, 0x00	; 0
    5fb0:	b0 e0       	ldi	r27, 0x00	; 0
    5fb2:	30 97       	sbiw	r30, 0x00	; 0
    5fb4:	19 f1       	breq	.+70     	; 0x5ffc <malloc+0x6c>
    5fb6:	40 81       	ld	r20, Z
    5fb8:	51 81       	ldd	r21, Z+1	; 0x01
    5fba:	02 81       	ldd	r16, Z+2	; 0x02
    5fbc:	13 81       	ldd	r17, Z+3	; 0x03
    5fbe:	48 17       	cp	r20, r24
    5fc0:	59 07       	cpc	r21, r25
    5fc2:	c8 f0       	brcs	.+50     	; 0x5ff6 <malloc+0x66>
    5fc4:	84 17       	cp	r24, r20
    5fc6:	95 07       	cpc	r25, r21
    5fc8:	69 f4       	brne	.+26     	; 0x5fe4 <malloc+0x54>
    5fca:	10 97       	sbiw	r26, 0x00	; 0
    5fcc:	31 f0       	breq	.+12     	; 0x5fda <malloc+0x4a>
    5fce:	12 96       	adiw	r26, 0x02	; 2
    5fd0:	0c 93       	st	X, r16
    5fd2:	12 97       	sbiw	r26, 0x02	; 2
    5fd4:	13 96       	adiw	r26, 0x03	; 3
    5fd6:	1c 93       	st	X, r17
    5fd8:	27 c0       	rjmp	.+78     	; 0x6028 <malloc+0x98>
    5fda:	00 93 7d 1a 	sts	0x1A7D, r16	; 0x801a7d <__flp>
    5fde:	10 93 7e 1a 	sts	0x1A7E, r17	; 0x801a7e <__flp+0x1>
    5fe2:	22 c0       	rjmp	.+68     	; 0x6028 <malloc+0x98>
    5fe4:	21 15       	cp	r18, r1
    5fe6:	31 05       	cpc	r19, r1
    5fe8:	19 f0       	breq	.+6      	; 0x5ff0 <malloc+0x60>
    5fea:	42 17       	cp	r20, r18
    5fec:	53 07       	cpc	r21, r19
    5fee:	18 f4       	brcc	.+6      	; 0x5ff6 <malloc+0x66>
    5ff0:	9a 01       	movw	r18, r20
    5ff2:	bd 01       	movw	r22, r26
    5ff4:	ef 01       	movw	r28, r30
    5ff6:	df 01       	movw	r26, r30
    5ff8:	f8 01       	movw	r30, r16
    5ffa:	db cf       	rjmp	.-74     	; 0x5fb2 <malloc+0x22>
    5ffc:	21 15       	cp	r18, r1
    5ffe:	31 05       	cpc	r19, r1
    6000:	f9 f0       	breq	.+62     	; 0x6040 <malloc+0xb0>
    6002:	28 1b       	sub	r18, r24
    6004:	39 0b       	sbc	r19, r25
    6006:	24 30       	cpi	r18, 0x04	; 4
    6008:	31 05       	cpc	r19, r1
    600a:	80 f4       	brcc	.+32     	; 0x602c <malloc+0x9c>
    600c:	8a 81       	ldd	r24, Y+2	; 0x02
    600e:	9b 81       	ldd	r25, Y+3	; 0x03
    6010:	61 15       	cp	r22, r1
    6012:	71 05       	cpc	r23, r1
    6014:	21 f0       	breq	.+8      	; 0x601e <malloc+0x8e>
    6016:	fb 01       	movw	r30, r22
    6018:	93 83       	std	Z+3, r25	; 0x03
    601a:	82 83       	std	Z+2, r24	; 0x02
    601c:	04 c0       	rjmp	.+8      	; 0x6026 <malloc+0x96>
    601e:	90 93 7e 1a 	sts	0x1A7E, r25	; 0x801a7e <__flp+0x1>
    6022:	80 93 7d 1a 	sts	0x1A7D, r24	; 0x801a7d <__flp>
    6026:	fe 01       	movw	r30, r28
    6028:	32 96       	adiw	r30, 0x02	; 2
    602a:	44 c0       	rjmp	.+136    	; 0x60b4 <malloc+0x124>
    602c:	fe 01       	movw	r30, r28
    602e:	e2 0f       	add	r30, r18
    6030:	f3 1f       	adc	r31, r19
    6032:	81 93       	st	Z+, r24
    6034:	91 93       	st	Z+, r25
    6036:	22 50       	subi	r18, 0x02	; 2
    6038:	31 09       	sbc	r19, r1
    603a:	39 83       	std	Y+1, r19	; 0x01
    603c:	28 83       	st	Y, r18
    603e:	3a c0       	rjmp	.+116    	; 0x60b4 <malloc+0x124>
    6040:	20 91 7b 1a 	lds	r18, 0x1A7B	; 0x801a7b <__brkval>
    6044:	30 91 7c 1a 	lds	r19, 0x1A7C	; 0x801a7c <__brkval+0x1>
    6048:	23 2b       	or	r18, r19
    604a:	41 f4       	brne	.+16     	; 0x605c <malloc+0xcc>
    604c:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    6050:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    6054:	30 93 7c 1a 	sts	0x1A7C, r19	; 0x801a7c <__brkval+0x1>
    6058:	20 93 7b 1a 	sts	0x1A7B, r18	; 0x801a7b <__brkval>
    605c:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    6060:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    6064:	21 15       	cp	r18, r1
    6066:	31 05       	cpc	r19, r1
    6068:	41 f4       	brne	.+16     	; 0x607a <malloc+0xea>
    606a:	2d b7       	in	r18, 0x3d	; 61
    606c:	3e b7       	in	r19, 0x3e	; 62
    606e:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    6072:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    6076:	24 1b       	sub	r18, r20
    6078:	35 0b       	sbc	r19, r21
    607a:	e0 91 7b 1a 	lds	r30, 0x1A7B	; 0x801a7b <__brkval>
    607e:	f0 91 7c 1a 	lds	r31, 0x1A7C	; 0x801a7c <__brkval+0x1>
    6082:	e2 17       	cp	r30, r18
    6084:	f3 07       	cpc	r31, r19
    6086:	a0 f4       	brcc	.+40     	; 0x60b0 <malloc+0x120>
    6088:	2e 1b       	sub	r18, r30
    608a:	3f 0b       	sbc	r19, r31
    608c:	28 17       	cp	r18, r24
    608e:	39 07       	cpc	r19, r25
    6090:	78 f0       	brcs	.+30     	; 0x60b0 <malloc+0x120>
    6092:	ac 01       	movw	r20, r24
    6094:	4e 5f       	subi	r20, 0xFE	; 254
    6096:	5f 4f       	sbci	r21, 0xFF	; 255
    6098:	24 17       	cp	r18, r20
    609a:	35 07       	cpc	r19, r21
    609c:	48 f0       	brcs	.+18     	; 0x60b0 <malloc+0x120>
    609e:	4e 0f       	add	r20, r30
    60a0:	5f 1f       	adc	r21, r31
    60a2:	50 93 7c 1a 	sts	0x1A7C, r21	; 0x801a7c <__brkval+0x1>
    60a6:	40 93 7b 1a 	sts	0x1A7B, r20	; 0x801a7b <__brkval>
    60aa:	81 93       	st	Z+, r24
    60ac:	91 93       	st	Z+, r25
    60ae:	02 c0       	rjmp	.+4      	; 0x60b4 <malloc+0x124>
    60b0:	e0 e0       	ldi	r30, 0x00	; 0
    60b2:	f0 e0       	ldi	r31, 0x00	; 0
    60b4:	cf 01       	movw	r24, r30
    60b6:	df 91       	pop	r29
    60b8:	cf 91       	pop	r28
    60ba:	1f 91       	pop	r17
    60bc:	0f 91       	pop	r16
    60be:	08 95       	ret

000060c0 <free>:
    60c0:	cf 93       	push	r28
    60c2:	df 93       	push	r29
    60c4:	00 97       	sbiw	r24, 0x00	; 0
    60c6:	09 f4       	brne	.+2      	; 0x60ca <free+0xa>
    60c8:	81 c0       	rjmp	.+258    	; 0x61cc <free+0x10c>
    60ca:	fc 01       	movw	r30, r24
    60cc:	32 97       	sbiw	r30, 0x02	; 2
    60ce:	13 82       	std	Z+3, r1	; 0x03
    60d0:	12 82       	std	Z+2, r1	; 0x02
    60d2:	a0 91 7d 1a 	lds	r26, 0x1A7D	; 0x801a7d <__flp>
    60d6:	b0 91 7e 1a 	lds	r27, 0x1A7E	; 0x801a7e <__flp+0x1>
    60da:	10 97       	sbiw	r26, 0x00	; 0
    60dc:	81 f4       	brne	.+32     	; 0x60fe <free+0x3e>
    60de:	20 81       	ld	r18, Z
    60e0:	31 81       	ldd	r19, Z+1	; 0x01
    60e2:	82 0f       	add	r24, r18
    60e4:	93 1f       	adc	r25, r19
    60e6:	20 91 7b 1a 	lds	r18, 0x1A7B	; 0x801a7b <__brkval>
    60ea:	30 91 7c 1a 	lds	r19, 0x1A7C	; 0x801a7c <__brkval+0x1>
    60ee:	28 17       	cp	r18, r24
    60f0:	39 07       	cpc	r19, r25
    60f2:	51 f5       	brne	.+84     	; 0x6148 <free+0x88>
    60f4:	f0 93 7c 1a 	sts	0x1A7C, r31	; 0x801a7c <__brkval+0x1>
    60f8:	e0 93 7b 1a 	sts	0x1A7B, r30	; 0x801a7b <__brkval>
    60fc:	67 c0       	rjmp	.+206    	; 0x61cc <free+0x10c>
    60fe:	ed 01       	movw	r28, r26
    6100:	20 e0       	ldi	r18, 0x00	; 0
    6102:	30 e0       	ldi	r19, 0x00	; 0
    6104:	ce 17       	cp	r28, r30
    6106:	df 07       	cpc	r29, r31
    6108:	40 f4       	brcc	.+16     	; 0x611a <free+0x5a>
    610a:	4a 81       	ldd	r20, Y+2	; 0x02
    610c:	5b 81       	ldd	r21, Y+3	; 0x03
    610e:	9e 01       	movw	r18, r28
    6110:	41 15       	cp	r20, r1
    6112:	51 05       	cpc	r21, r1
    6114:	f1 f0       	breq	.+60     	; 0x6152 <free+0x92>
    6116:	ea 01       	movw	r28, r20
    6118:	f5 cf       	rjmp	.-22     	; 0x6104 <free+0x44>
    611a:	d3 83       	std	Z+3, r29	; 0x03
    611c:	c2 83       	std	Z+2, r28	; 0x02
    611e:	40 81       	ld	r20, Z
    6120:	51 81       	ldd	r21, Z+1	; 0x01
    6122:	84 0f       	add	r24, r20
    6124:	95 1f       	adc	r25, r21
    6126:	c8 17       	cp	r28, r24
    6128:	d9 07       	cpc	r29, r25
    612a:	59 f4       	brne	.+22     	; 0x6142 <free+0x82>
    612c:	88 81       	ld	r24, Y
    612e:	99 81       	ldd	r25, Y+1	; 0x01
    6130:	84 0f       	add	r24, r20
    6132:	95 1f       	adc	r25, r21
    6134:	02 96       	adiw	r24, 0x02	; 2
    6136:	91 83       	std	Z+1, r25	; 0x01
    6138:	80 83       	st	Z, r24
    613a:	8a 81       	ldd	r24, Y+2	; 0x02
    613c:	9b 81       	ldd	r25, Y+3	; 0x03
    613e:	93 83       	std	Z+3, r25	; 0x03
    6140:	82 83       	std	Z+2, r24	; 0x02
    6142:	21 15       	cp	r18, r1
    6144:	31 05       	cpc	r19, r1
    6146:	29 f4       	brne	.+10     	; 0x6152 <free+0x92>
    6148:	f0 93 7e 1a 	sts	0x1A7E, r31	; 0x801a7e <__flp+0x1>
    614c:	e0 93 7d 1a 	sts	0x1A7D, r30	; 0x801a7d <__flp>
    6150:	3d c0       	rjmp	.+122    	; 0x61cc <free+0x10c>
    6152:	e9 01       	movw	r28, r18
    6154:	fb 83       	std	Y+3, r31	; 0x03
    6156:	ea 83       	std	Y+2, r30	; 0x02
    6158:	49 91       	ld	r20, Y+
    615a:	59 91       	ld	r21, Y+
    615c:	c4 0f       	add	r28, r20
    615e:	d5 1f       	adc	r29, r21
    6160:	ec 17       	cp	r30, r28
    6162:	fd 07       	cpc	r31, r29
    6164:	61 f4       	brne	.+24     	; 0x617e <free+0xbe>
    6166:	80 81       	ld	r24, Z
    6168:	91 81       	ldd	r25, Z+1	; 0x01
    616a:	84 0f       	add	r24, r20
    616c:	95 1f       	adc	r25, r21
    616e:	02 96       	adiw	r24, 0x02	; 2
    6170:	e9 01       	movw	r28, r18
    6172:	99 83       	std	Y+1, r25	; 0x01
    6174:	88 83       	st	Y, r24
    6176:	82 81       	ldd	r24, Z+2	; 0x02
    6178:	93 81       	ldd	r25, Z+3	; 0x03
    617a:	9b 83       	std	Y+3, r25	; 0x03
    617c:	8a 83       	std	Y+2, r24	; 0x02
    617e:	e0 e0       	ldi	r30, 0x00	; 0
    6180:	f0 e0       	ldi	r31, 0x00	; 0
    6182:	12 96       	adiw	r26, 0x02	; 2
    6184:	8d 91       	ld	r24, X+
    6186:	9c 91       	ld	r25, X
    6188:	13 97       	sbiw	r26, 0x03	; 3
    618a:	00 97       	sbiw	r24, 0x00	; 0
    618c:	19 f0       	breq	.+6      	; 0x6194 <free+0xd4>
    618e:	fd 01       	movw	r30, r26
    6190:	dc 01       	movw	r26, r24
    6192:	f7 cf       	rjmp	.-18     	; 0x6182 <free+0xc2>
    6194:	8d 91       	ld	r24, X+
    6196:	9c 91       	ld	r25, X
    6198:	11 97       	sbiw	r26, 0x01	; 1
    619a:	9d 01       	movw	r18, r26
    619c:	2e 5f       	subi	r18, 0xFE	; 254
    619e:	3f 4f       	sbci	r19, 0xFF	; 255
    61a0:	82 0f       	add	r24, r18
    61a2:	93 1f       	adc	r25, r19
    61a4:	20 91 7b 1a 	lds	r18, 0x1A7B	; 0x801a7b <__brkval>
    61a8:	30 91 7c 1a 	lds	r19, 0x1A7C	; 0x801a7c <__brkval+0x1>
    61ac:	28 17       	cp	r18, r24
    61ae:	39 07       	cpc	r19, r25
    61b0:	69 f4       	brne	.+26     	; 0x61cc <free+0x10c>
    61b2:	30 97       	sbiw	r30, 0x00	; 0
    61b4:	29 f4       	brne	.+10     	; 0x61c0 <free+0x100>
    61b6:	10 92 7e 1a 	sts	0x1A7E, r1	; 0x801a7e <__flp+0x1>
    61ba:	10 92 7d 1a 	sts	0x1A7D, r1	; 0x801a7d <__flp>
    61be:	02 c0       	rjmp	.+4      	; 0x61c4 <free+0x104>
    61c0:	13 82       	std	Z+3, r1	; 0x03
    61c2:	12 82       	std	Z+2, r1	; 0x02
    61c4:	b0 93 7c 1a 	sts	0x1A7C, r27	; 0x801a7c <__brkval+0x1>
    61c8:	a0 93 7b 1a 	sts	0x1A7B, r26	; 0x801a7b <__brkval>
    61cc:	df 91       	pop	r29
    61ce:	cf 91       	pop	r28
    61d0:	08 95       	ret

000061d2 <do_rand>:
    61d2:	8f 92       	push	r8
    61d4:	9f 92       	push	r9
    61d6:	af 92       	push	r10
    61d8:	bf 92       	push	r11
    61da:	cf 92       	push	r12
    61dc:	df 92       	push	r13
    61de:	ef 92       	push	r14
    61e0:	ff 92       	push	r15
    61e2:	cf 93       	push	r28
    61e4:	df 93       	push	r29
    61e6:	ec 01       	movw	r28, r24
    61e8:	68 81       	ld	r22, Y
    61ea:	79 81       	ldd	r23, Y+1	; 0x01
    61ec:	8a 81       	ldd	r24, Y+2	; 0x02
    61ee:	9b 81       	ldd	r25, Y+3	; 0x03
    61f0:	61 15       	cp	r22, r1
    61f2:	71 05       	cpc	r23, r1
    61f4:	81 05       	cpc	r24, r1
    61f6:	91 05       	cpc	r25, r1
    61f8:	21 f4       	brne	.+8      	; 0x6202 <do_rand+0x30>
    61fa:	64 e2       	ldi	r22, 0x24	; 36
    61fc:	79 ed       	ldi	r23, 0xD9	; 217
    61fe:	8b e5       	ldi	r24, 0x5B	; 91
    6200:	97 e0       	ldi	r25, 0x07	; 7
    6202:	2d e1       	ldi	r18, 0x1D	; 29
    6204:	33 ef       	ldi	r19, 0xF3	; 243
    6206:	41 e0       	ldi	r20, 0x01	; 1
    6208:	50 e0       	ldi	r21, 0x00	; 0
    620a:	b9 d3       	rcall	.+1906   	; 0x697e <__divmodsi4>
    620c:	49 01       	movw	r8, r18
    620e:	5a 01       	movw	r10, r20
    6210:	9b 01       	movw	r18, r22
    6212:	ac 01       	movw	r20, r24
    6214:	a7 ea       	ldi	r26, 0xA7	; 167
    6216:	b1 e4       	ldi	r27, 0x41	; 65
    6218:	ce d3       	rcall	.+1948   	; 0x69b6 <__muluhisi3>
    621a:	6b 01       	movw	r12, r22
    621c:	7c 01       	movw	r14, r24
    621e:	ac ee       	ldi	r26, 0xEC	; 236
    6220:	b4 ef       	ldi	r27, 0xF4	; 244
    6222:	a5 01       	movw	r20, r10
    6224:	94 01       	movw	r18, r8
    6226:	d3 d3       	rcall	.+1958   	; 0x69ce <__mulohisi3>
    6228:	dc 01       	movw	r26, r24
    622a:	cb 01       	movw	r24, r22
    622c:	8c 0d       	add	r24, r12
    622e:	9d 1d       	adc	r25, r13
    6230:	ae 1d       	adc	r26, r14
    6232:	bf 1d       	adc	r27, r15
    6234:	b7 ff       	sbrs	r27, 7
    6236:	03 c0       	rjmp	.+6      	; 0x623e <do_rand+0x6c>
    6238:	01 97       	sbiw	r24, 0x01	; 1
    623a:	a1 09       	sbc	r26, r1
    623c:	b0 48       	sbci	r27, 0x80	; 128
    623e:	88 83       	st	Y, r24
    6240:	99 83       	std	Y+1, r25	; 0x01
    6242:	aa 83       	std	Y+2, r26	; 0x02
    6244:	bb 83       	std	Y+3, r27	; 0x03
    6246:	9f 77       	andi	r25, 0x7F	; 127
    6248:	df 91       	pop	r29
    624a:	cf 91       	pop	r28
    624c:	ff 90       	pop	r15
    624e:	ef 90       	pop	r14
    6250:	df 90       	pop	r13
    6252:	cf 90       	pop	r12
    6254:	bf 90       	pop	r11
    6256:	af 90       	pop	r10
    6258:	9f 90       	pop	r9
    625a:	8f 90       	pop	r8
    625c:	08 95       	ret

0000625e <rand_r>:
    625e:	b9 cf       	rjmp	.-142    	; 0x61d2 <do_rand>

00006260 <rand>:
    6260:	86 e0       	ldi	r24, 0x06	; 6
    6262:	92 e0       	ldi	r25, 0x02	; 2
    6264:	b6 cf       	rjmp	.-148    	; 0x61d2 <do_rand>

00006266 <srand>:
    6266:	a0 e0       	ldi	r26, 0x00	; 0
    6268:	b0 e0       	ldi	r27, 0x00	; 0
    626a:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <next>
    626e:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <next+0x1>
    6272:	a0 93 08 02 	sts	0x0208, r26	; 0x800208 <next+0x2>
    6276:	b0 93 09 02 	sts	0x0209, r27	; 0x800209 <next+0x3>
    627a:	08 95       	ret

0000627c <abort>:
    627c:	81 e0       	ldi	r24, 0x01	; 1
    627e:	90 e0       	ldi	r25, 0x00	; 0
    6280:	f8 94       	cli
    6282:	b8 c3       	rjmp	.+1904   	; 0x69f4 <_exit>

00006284 <memcpy>:
    6284:	fb 01       	movw	r30, r22
    6286:	dc 01       	movw	r26, r24
    6288:	02 c0       	rjmp	.+4      	; 0x628e <memcpy+0xa>
    628a:	01 90       	ld	r0, Z+
    628c:	0d 92       	st	X+, r0
    628e:	41 50       	subi	r20, 0x01	; 1
    6290:	50 40       	sbci	r21, 0x00	; 0
    6292:	d8 f7       	brcc	.-10     	; 0x628a <memcpy+0x6>
    6294:	08 95       	ret

00006296 <memset>:
    6296:	dc 01       	movw	r26, r24
    6298:	01 c0       	rjmp	.+2      	; 0x629c <memset+0x6>
    629a:	6d 93       	st	X+, r22
    629c:	41 50       	subi	r20, 0x01	; 1
    629e:	50 40       	sbci	r21, 0x00	; 0
    62a0:	e0 f7       	brcc	.-8      	; 0x629a <memset+0x4>
    62a2:	08 95       	ret

000062a4 <strcasestr>:
    62a4:	fb 01       	movw	r30, r22
    62a6:	51 91       	ld	r21, Z+
    62a8:	55 23       	and	r21, r21
    62aa:	b1 f0       	breq	.+44     	; 0x62d8 <strcasestr+0x34>
    62ac:	bf 01       	movw	r22, r30
    62ae:	dc 01       	movw	r26, r24
    62b0:	05 2e       	mov	r0, r21
    62b2:	4d 91       	ld	r20, X+
    62b4:	44 23       	and	r20, r20
    62b6:	69 f0       	breq	.+26     	; 0x62d2 <strcasestr+0x2e>
    62b8:	10 d0       	rcall	.+32     	; 0x62da <strcasestr+0x36>
    62ba:	d9 f7       	brne	.-10     	; 0x62b2 <strcasestr+0xe>
    62bc:	cd 01       	movw	r24, r26
    62be:	01 90       	ld	r0, Z+
    62c0:	00 20       	and	r0, r0
    62c2:	49 f0       	breq	.+18     	; 0x62d6 <strcasestr+0x32>
    62c4:	4d 91       	ld	r20, X+
    62c6:	41 11       	cpse	r20, r1
    62c8:	08 d0       	rcall	.+16     	; 0x62da <strcasestr+0x36>
    62ca:	c9 f3       	breq	.-14     	; 0x62be <strcasestr+0x1a>
    62cc:	fb 01       	movw	r30, r22
    62ce:	41 11       	cpse	r20, r1
    62d0:	ee cf       	rjmp	.-36     	; 0x62ae <strcasestr+0xa>
    62d2:	81 e0       	ldi	r24, 0x01	; 1
    62d4:	90 e0       	ldi	r25, 0x00	; 0
    62d6:	01 97       	sbiw	r24, 0x01	; 1
    62d8:	08 95       	ret
    62da:	40 25       	eor	r20, r0
    62dc:	39 f0       	breq	.+14     	; 0x62ec <strcasestr+0x48>
    62de:	40 32       	cpi	r20, 0x20	; 32
    62e0:	29 f4       	brne	.+10     	; 0x62ec <strcasestr+0x48>
    62e2:	40 29       	or	r20, r0
    62e4:	4b 57       	subi	r20, 0x7B	; 123
    62e6:	46 5e       	subi	r20, 0xE6	; 230
    62e8:	08 f0       	brcs	.+2      	; 0x62ec <strcasestr+0x48>
    62ea:	18 94       	sez
    62ec:	08 95       	ret

000062ee <strcat>:
    62ee:	fb 01       	movw	r30, r22
    62f0:	dc 01       	movw	r26, r24
    62f2:	0d 90       	ld	r0, X+
    62f4:	00 20       	and	r0, r0
    62f6:	e9 f7       	brne	.-6      	; 0x62f2 <strcat+0x4>
    62f8:	11 97       	sbiw	r26, 0x01	; 1
    62fa:	01 90       	ld	r0, Z+
    62fc:	0d 92       	st	X+, r0
    62fe:	00 20       	and	r0, r0
    6300:	e1 f7       	brne	.-8      	; 0x62fa <strcat+0xc>
    6302:	08 95       	ret

00006304 <strcpy>:
    6304:	fb 01       	movw	r30, r22
    6306:	dc 01       	movw	r26, r24
    6308:	01 90       	ld	r0, Z+
    630a:	0d 92       	st	X+, r0
    630c:	00 20       	and	r0, r0
    630e:	e1 f7       	brne	.-8      	; 0x6308 <strcpy+0x4>
    6310:	08 95       	ret

00006312 <strncasecmp>:
    6312:	fb 01       	movw	r30, r22
    6314:	dc 01       	movw	r26, r24
    6316:	41 50       	subi	r20, 0x01	; 1
    6318:	50 40       	sbci	r21, 0x00	; 0
    631a:	88 f0       	brcs	.+34     	; 0x633e <strncasecmp+0x2c>
    631c:	8d 91       	ld	r24, X+
    631e:	81 34       	cpi	r24, 0x41	; 65
    6320:	1c f0       	brlt	.+6      	; 0x6328 <strncasecmp+0x16>
    6322:	8b 35       	cpi	r24, 0x5B	; 91
    6324:	0c f4       	brge	.+2      	; 0x6328 <strncasecmp+0x16>
    6326:	80 5e       	subi	r24, 0xE0	; 224
    6328:	61 91       	ld	r22, Z+
    632a:	61 34       	cpi	r22, 0x41	; 65
    632c:	1c f0       	brlt	.+6      	; 0x6334 <strncasecmp+0x22>
    632e:	6b 35       	cpi	r22, 0x5B	; 91
    6330:	0c f4       	brge	.+2      	; 0x6334 <strncasecmp+0x22>
    6332:	60 5e       	subi	r22, 0xE0	; 224
    6334:	86 1b       	sub	r24, r22
    6336:	61 11       	cpse	r22, r1
    6338:	71 f3       	breq	.-36     	; 0x6316 <strncasecmp+0x4>
    633a:	99 0b       	sbc	r25, r25
    633c:	08 95       	ret
    633e:	88 1b       	sub	r24, r24
    6340:	fc cf       	rjmp	.-8      	; 0x633a <strncasecmp+0x28>

00006342 <printf>:
    6342:	cf 93       	push	r28
    6344:	df 93       	push	r29
    6346:	cd b7       	in	r28, 0x3d	; 61
    6348:	de b7       	in	r29, 0x3e	; 62
    634a:	ae 01       	movw	r20, r28
    634c:	4a 5f       	subi	r20, 0xFA	; 250
    634e:	5f 4f       	sbci	r21, 0xFF	; 255
    6350:	fa 01       	movw	r30, r20
    6352:	61 91       	ld	r22, Z+
    6354:	71 91       	ld	r23, Z+
    6356:	af 01       	movw	r20, r30
    6358:	80 91 81 1a 	lds	r24, 0x1A81	; 0x801a81 <__iob+0x2>
    635c:	90 91 82 1a 	lds	r25, 0x1A82	; 0x801a82 <__iob+0x3>
    6360:	61 d0       	rcall	.+194    	; 0x6424 <vfprintf>
    6362:	df 91       	pop	r29
    6364:	cf 91       	pop	r28
    6366:	08 95       	ret

00006368 <puts>:
    6368:	0f 93       	push	r16
    636a:	1f 93       	push	r17
    636c:	cf 93       	push	r28
    636e:	df 93       	push	r29
    6370:	e0 91 81 1a 	lds	r30, 0x1A81	; 0x801a81 <__iob+0x2>
    6374:	f0 91 82 1a 	lds	r31, 0x1A82	; 0x801a82 <__iob+0x3>
    6378:	23 81       	ldd	r18, Z+3	; 0x03
    637a:	21 ff       	sbrs	r18, 1
    637c:	1b c0       	rjmp	.+54     	; 0x63b4 <puts+0x4c>
    637e:	8c 01       	movw	r16, r24
    6380:	d0 e0       	ldi	r29, 0x00	; 0
    6382:	c0 e0       	ldi	r28, 0x00	; 0
    6384:	f8 01       	movw	r30, r16
    6386:	81 91       	ld	r24, Z+
    6388:	8f 01       	movw	r16, r30
    638a:	60 91 81 1a 	lds	r22, 0x1A81	; 0x801a81 <__iob+0x2>
    638e:	70 91 82 1a 	lds	r23, 0x1A82	; 0x801a82 <__iob+0x3>
    6392:	db 01       	movw	r26, r22
    6394:	18 96       	adiw	r26, 0x08	; 8
    6396:	ed 91       	ld	r30, X+
    6398:	fc 91       	ld	r31, X
    639a:	19 97       	sbiw	r26, 0x09	; 9
    639c:	88 23       	and	r24, r24
    639e:	31 f0       	breq	.+12     	; 0x63ac <puts+0x44>
    63a0:	19 95       	eicall
    63a2:	89 2b       	or	r24, r25
    63a4:	79 f3       	breq	.-34     	; 0x6384 <puts+0x1c>
    63a6:	df ef       	ldi	r29, 0xFF	; 255
    63a8:	cf ef       	ldi	r28, 0xFF	; 255
    63aa:	ec cf       	rjmp	.-40     	; 0x6384 <puts+0x1c>
    63ac:	8a e0       	ldi	r24, 0x0A	; 10
    63ae:	19 95       	eicall
    63b0:	89 2b       	or	r24, r25
    63b2:	19 f0       	breq	.+6      	; 0x63ba <puts+0x52>
    63b4:	8f ef       	ldi	r24, 0xFF	; 255
    63b6:	9f ef       	ldi	r25, 0xFF	; 255
    63b8:	02 c0       	rjmp	.+4      	; 0x63be <puts+0x56>
    63ba:	8d 2f       	mov	r24, r29
    63bc:	9c 2f       	mov	r25, r28
    63be:	df 91       	pop	r29
    63c0:	cf 91       	pop	r28
    63c2:	1f 91       	pop	r17
    63c4:	0f 91       	pop	r16
    63c6:	08 95       	ret

000063c8 <sprintf>:
    63c8:	0f 93       	push	r16
    63ca:	1f 93       	push	r17
    63cc:	cf 93       	push	r28
    63ce:	df 93       	push	r29
    63d0:	cd b7       	in	r28, 0x3d	; 61
    63d2:	de b7       	in	r29, 0x3e	; 62
    63d4:	2e 97       	sbiw	r28, 0x0e	; 14
    63d6:	0f b6       	in	r0, 0x3f	; 63
    63d8:	f8 94       	cli
    63da:	de bf       	out	0x3e, r29	; 62
    63dc:	0f be       	out	0x3f, r0	; 63
    63de:	cd bf       	out	0x3d, r28	; 61
    63e0:	0e 89       	ldd	r16, Y+22	; 0x16
    63e2:	1f 89       	ldd	r17, Y+23	; 0x17
    63e4:	86 e0       	ldi	r24, 0x06	; 6
    63e6:	8c 83       	std	Y+4, r24	; 0x04
    63e8:	1a 83       	std	Y+2, r17	; 0x02
    63ea:	09 83       	std	Y+1, r16	; 0x01
    63ec:	8f ef       	ldi	r24, 0xFF	; 255
    63ee:	9f e7       	ldi	r25, 0x7F	; 127
    63f0:	9e 83       	std	Y+6, r25	; 0x06
    63f2:	8d 83       	std	Y+5, r24	; 0x05
    63f4:	ae 01       	movw	r20, r28
    63f6:	46 5e       	subi	r20, 0xE6	; 230
    63f8:	5f 4f       	sbci	r21, 0xFF	; 255
    63fa:	68 8d       	ldd	r22, Y+24	; 0x18
    63fc:	79 8d       	ldd	r23, Y+25	; 0x19
    63fe:	ce 01       	movw	r24, r28
    6400:	01 96       	adiw	r24, 0x01	; 1
    6402:	10 d0       	rcall	.+32     	; 0x6424 <vfprintf>
    6404:	ef 81       	ldd	r30, Y+7	; 0x07
    6406:	f8 85       	ldd	r31, Y+8	; 0x08
    6408:	e0 0f       	add	r30, r16
    640a:	f1 1f       	adc	r31, r17
    640c:	10 82       	st	Z, r1
    640e:	2e 96       	adiw	r28, 0x0e	; 14
    6410:	0f b6       	in	r0, 0x3f	; 63
    6412:	f8 94       	cli
    6414:	de bf       	out	0x3e, r29	; 62
    6416:	0f be       	out	0x3f, r0	; 63
    6418:	cd bf       	out	0x3d, r28	; 61
    641a:	df 91       	pop	r29
    641c:	cf 91       	pop	r28
    641e:	1f 91       	pop	r17
    6420:	0f 91       	pop	r16
    6422:	08 95       	ret

00006424 <vfprintf>:
    6424:	2f 92       	push	r2
    6426:	3f 92       	push	r3
    6428:	4f 92       	push	r4
    642a:	5f 92       	push	r5
    642c:	6f 92       	push	r6
    642e:	7f 92       	push	r7
    6430:	8f 92       	push	r8
    6432:	9f 92       	push	r9
    6434:	af 92       	push	r10
    6436:	bf 92       	push	r11
    6438:	cf 92       	push	r12
    643a:	df 92       	push	r13
    643c:	ef 92       	push	r14
    643e:	ff 92       	push	r15
    6440:	0f 93       	push	r16
    6442:	1f 93       	push	r17
    6444:	cf 93       	push	r28
    6446:	df 93       	push	r29
    6448:	cd b7       	in	r28, 0x3d	; 61
    644a:	de b7       	in	r29, 0x3e	; 62
    644c:	2b 97       	sbiw	r28, 0x0b	; 11
    644e:	0f b6       	in	r0, 0x3f	; 63
    6450:	f8 94       	cli
    6452:	de bf       	out	0x3e, r29	; 62
    6454:	0f be       	out	0x3f, r0	; 63
    6456:	cd bf       	out	0x3d, r28	; 61
    6458:	6c 01       	movw	r12, r24
    645a:	7b 01       	movw	r14, r22
    645c:	8a 01       	movw	r16, r20
    645e:	fc 01       	movw	r30, r24
    6460:	17 82       	std	Z+7, r1	; 0x07
    6462:	16 82       	std	Z+6, r1	; 0x06
    6464:	83 81       	ldd	r24, Z+3	; 0x03
    6466:	81 ff       	sbrs	r24, 1
    6468:	bf c1       	rjmp	.+894    	; 0x67e8 <vfprintf+0x3c4>
    646a:	ce 01       	movw	r24, r28
    646c:	01 96       	adiw	r24, 0x01	; 1
    646e:	3c 01       	movw	r6, r24
    6470:	f6 01       	movw	r30, r12
    6472:	93 81       	ldd	r25, Z+3	; 0x03
    6474:	f7 01       	movw	r30, r14
    6476:	93 fd       	sbrc	r25, 3
    6478:	85 91       	lpm	r24, Z+
    647a:	93 ff       	sbrs	r25, 3
    647c:	81 91       	ld	r24, Z+
    647e:	7f 01       	movw	r14, r30
    6480:	88 23       	and	r24, r24
    6482:	09 f4       	brne	.+2      	; 0x6486 <vfprintf+0x62>
    6484:	ad c1       	rjmp	.+858    	; 0x67e0 <vfprintf+0x3bc>
    6486:	85 32       	cpi	r24, 0x25	; 37
    6488:	39 f4       	brne	.+14     	; 0x6498 <vfprintf+0x74>
    648a:	93 fd       	sbrc	r25, 3
    648c:	85 91       	lpm	r24, Z+
    648e:	93 ff       	sbrs	r25, 3
    6490:	81 91       	ld	r24, Z+
    6492:	7f 01       	movw	r14, r30
    6494:	85 32       	cpi	r24, 0x25	; 37
    6496:	21 f4       	brne	.+8      	; 0x64a0 <vfprintf+0x7c>
    6498:	b6 01       	movw	r22, r12
    649a:	90 e0       	ldi	r25, 0x00	; 0
    649c:	d6 d1       	rcall	.+940    	; 0x684a <fputc>
    649e:	e8 cf       	rjmp	.-48     	; 0x6470 <vfprintf+0x4c>
    64a0:	91 2c       	mov	r9, r1
    64a2:	21 2c       	mov	r2, r1
    64a4:	31 2c       	mov	r3, r1
    64a6:	ff e1       	ldi	r31, 0x1F	; 31
    64a8:	f3 15       	cp	r31, r3
    64aa:	d8 f0       	brcs	.+54     	; 0x64e2 <vfprintf+0xbe>
    64ac:	8b 32       	cpi	r24, 0x2B	; 43
    64ae:	79 f0       	breq	.+30     	; 0x64ce <vfprintf+0xaa>
    64b0:	38 f4       	brcc	.+14     	; 0x64c0 <vfprintf+0x9c>
    64b2:	80 32       	cpi	r24, 0x20	; 32
    64b4:	79 f0       	breq	.+30     	; 0x64d4 <vfprintf+0xb0>
    64b6:	83 32       	cpi	r24, 0x23	; 35
    64b8:	a1 f4       	brne	.+40     	; 0x64e2 <vfprintf+0xbe>
    64ba:	23 2d       	mov	r18, r3
    64bc:	20 61       	ori	r18, 0x10	; 16
    64be:	1d c0       	rjmp	.+58     	; 0x64fa <vfprintf+0xd6>
    64c0:	8d 32       	cpi	r24, 0x2D	; 45
    64c2:	61 f0       	breq	.+24     	; 0x64dc <vfprintf+0xb8>
    64c4:	80 33       	cpi	r24, 0x30	; 48
    64c6:	69 f4       	brne	.+26     	; 0x64e2 <vfprintf+0xbe>
    64c8:	23 2d       	mov	r18, r3
    64ca:	21 60       	ori	r18, 0x01	; 1
    64cc:	16 c0       	rjmp	.+44     	; 0x64fa <vfprintf+0xd6>
    64ce:	83 2d       	mov	r24, r3
    64d0:	82 60       	ori	r24, 0x02	; 2
    64d2:	38 2e       	mov	r3, r24
    64d4:	e3 2d       	mov	r30, r3
    64d6:	e4 60       	ori	r30, 0x04	; 4
    64d8:	3e 2e       	mov	r3, r30
    64da:	2a c0       	rjmp	.+84     	; 0x6530 <vfprintf+0x10c>
    64dc:	f3 2d       	mov	r31, r3
    64de:	f8 60       	ori	r31, 0x08	; 8
    64e0:	1d c0       	rjmp	.+58     	; 0x651c <vfprintf+0xf8>
    64e2:	37 fc       	sbrc	r3, 7
    64e4:	2d c0       	rjmp	.+90     	; 0x6540 <vfprintf+0x11c>
    64e6:	20 ed       	ldi	r18, 0xD0	; 208
    64e8:	28 0f       	add	r18, r24
    64ea:	2a 30       	cpi	r18, 0x0A	; 10
    64ec:	40 f0       	brcs	.+16     	; 0x64fe <vfprintf+0xda>
    64ee:	8e 32       	cpi	r24, 0x2E	; 46
    64f0:	b9 f4       	brne	.+46     	; 0x6520 <vfprintf+0xfc>
    64f2:	36 fc       	sbrc	r3, 6
    64f4:	75 c1       	rjmp	.+746    	; 0x67e0 <vfprintf+0x3bc>
    64f6:	23 2d       	mov	r18, r3
    64f8:	20 64       	ori	r18, 0x40	; 64
    64fa:	32 2e       	mov	r3, r18
    64fc:	19 c0       	rjmp	.+50     	; 0x6530 <vfprintf+0x10c>
    64fe:	36 fe       	sbrs	r3, 6
    6500:	06 c0       	rjmp	.+12     	; 0x650e <vfprintf+0xea>
    6502:	8a e0       	ldi	r24, 0x0A	; 10
    6504:	98 9e       	mul	r9, r24
    6506:	20 0d       	add	r18, r0
    6508:	11 24       	eor	r1, r1
    650a:	92 2e       	mov	r9, r18
    650c:	11 c0       	rjmp	.+34     	; 0x6530 <vfprintf+0x10c>
    650e:	ea e0       	ldi	r30, 0x0A	; 10
    6510:	2e 9e       	mul	r2, r30
    6512:	20 0d       	add	r18, r0
    6514:	11 24       	eor	r1, r1
    6516:	22 2e       	mov	r2, r18
    6518:	f3 2d       	mov	r31, r3
    651a:	f0 62       	ori	r31, 0x20	; 32
    651c:	3f 2e       	mov	r3, r31
    651e:	08 c0       	rjmp	.+16     	; 0x6530 <vfprintf+0x10c>
    6520:	8c 36       	cpi	r24, 0x6C	; 108
    6522:	21 f4       	brne	.+8      	; 0x652c <vfprintf+0x108>
    6524:	83 2d       	mov	r24, r3
    6526:	80 68       	ori	r24, 0x80	; 128
    6528:	38 2e       	mov	r3, r24
    652a:	02 c0       	rjmp	.+4      	; 0x6530 <vfprintf+0x10c>
    652c:	88 36       	cpi	r24, 0x68	; 104
    652e:	41 f4       	brne	.+16     	; 0x6540 <vfprintf+0x11c>
    6530:	f7 01       	movw	r30, r14
    6532:	93 fd       	sbrc	r25, 3
    6534:	85 91       	lpm	r24, Z+
    6536:	93 ff       	sbrs	r25, 3
    6538:	81 91       	ld	r24, Z+
    653a:	7f 01       	movw	r14, r30
    653c:	81 11       	cpse	r24, r1
    653e:	b3 cf       	rjmp	.-154    	; 0x64a6 <vfprintf+0x82>
    6540:	98 2f       	mov	r25, r24
    6542:	9f 7d       	andi	r25, 0xDF	; 223
    6544:	95 54       	subi	r25, 0x45	; 69
    6546:	93 30       	cpi	r25, 0x03	; 3
    6548:	28 f4       	brcc	.+10     	; 0x6554 <vfprintf+0x130>
    654a:	0c 5f       	subi	r16, 0xFC	; 252
    654c:	1f 4f       	sbci	r17, 0xFF	; 255
    654e:	9f e3       	ldi	r25, 0x3F	; 63
    6550:	99 83       	std	Y+1, r25	; 0x01
    6552:	0d c0       	rjmp	.+26     	; 0x656e <vfprintf+0x14a>
    6554:	83 36       	cpi	r24, 0x63	; 99
    6556:	31 f0       	breq	.+12     	; 0x6564 <vfprintf+0x140>
    6558:	83 37       	cpi	r24, 0x73	; 115
    655a:	71 f0       	breq	.+28     	; 0x6578 <vfprintf+0x154>
    655c:	83 35       	cpi	r24, 0x53	; 83
    655e:	09 f0       	breq	.+2      	; 0x6562 <vfprintf+0x13e>
    6560:	55 c0       	rjmp	.+170    	; 0x660c <vfprintf+0x1e8>
    6562:	20 c0       	rjmp	.+64     	; 0x65a4 <vfprintf+0x180>
    6564:	f8 01       	movw	r30, r16
    6566:	80 81       	ld	r24, Z
    6568:	89 83       	std	Y+1, r24	; 0x01
    656a:	0e 5f       	subi	r16, 0xFE	; 254
    656c:	1f 4f       	sbci	r17, 0xFF	; 255
    656e:	88 24       	eor	r8, r8
    6570:	83 94       	inc	r8
    6572:	91 2c       	mov	r9, r1
    6574:	53 01       	movw	r10, r6
    6576:	12 c0       	rjmp	.+36     	; 0x659c <vfprintf+0x178>
    6578:	28 01       	movw	r4, r16
    657a:	f2 e0       	ldi	r31, 0x02	; 2
    657c:	4f 0e       	add	r4, r31
    657e:	51 1c       	adc	r5, r1
    6580:	f8 01       	movw	r30, r16
    6582:	a0 80       	ld	r10, Z
    6584:	b1 80       	ldd	r11, Z+1	; 0x01
    6586:	36 fe       	sbrs	r3, 6
    6588:	03 c0       	rjmp	.+6      	; 0x6590 <vfprintf+0x16c>
    658a:	69 2d       	mov	r22, r9
    658c:	70 e0       	ldi	r23, 0x00	; 0
    658e:	02 c0       	rjmp	.+4      	; 0x6594 <vfprintf+0x170>
    6590:	6f ef       	ldi	r22, 0xFF	; 255
    6592:	7f ef       	ldi	r23, 0xFF	; 255
    6594:	c5 01       	movw	r24, r10
    6596:	4e d1       	rcall	.+668    	; 0x6834 <strnlen>
    6598:	4c 01       	movw	r8, r24
    659a:	82 01       	movw	r16, r4
    659c:	f3 2d       	mov	r31, r3
    659e:	ff 77       	andi	r31, 0x7F	; 127
    65a0:	3f 2e       	mov	r3, r31
    65a2:	15 c0       	rjmp	.+42     	; 0x65ce <vfprintf+0x1aa>
    65a4:	28 01       	movw	r4, r16
    65a6:	22 e0       	ldi	r18, 0x02	; 2
    65a8:	42 0e       	add	r4, r18
    65aa:	51 1c       	adc	r5, r1
    65ac:	f8 01       	movw	r30, r16
    65ae:	a0 80       	ld	r10, Z
    65b0:	b1 80       	ldd	r11, Z+1	; 0x01
    65b2:	36 fe       	sbrs	r3, 6
    65b4:	03 c0       	rjmp	.+6      	; 0x65bc <vfprintf+0x198>
    65b6:	69 2d       	mov	r22, r9
    65b8:	70 e0       	ldi	r23, 0x00	; 0
    65ba:	02 c0       	rjmp	.+4      	; 0x65c0 <vfprintf+0x19c>
    65bc:	6f ef       	ldi	r22, 0xFF	; 255
    65be:	7f ef       	ldi	r23, 0xFF	; 255
    65c0:	c5 01       	movw	r24, r10
    65c2:	2d d1       	rcall	.+602    	; 0x681e <strnlen_P>
    65c4:	4c 01       	movw	r8, r24
    65c6:	f3 2d       	mov	r31, r3
    65c8:	f0 68       	ori	r31, 0x80	; 128
    65ca:	3f 2e       	mov	r3, r31
    65cc:	82 01       	movw	r16, r4
    65ce:	33 fc       	sbrc	r3, 3
    65d0:	19 c0       	rjmp	.+50     	; 0x6604 <vfprintf+0x1e0>
    65d2:	82 2d       	mov	r24, r2
    65d4:	90 e0       	ldi	r25, 0x00	; 0
    65d6:	88 16       	cp	r8, r24
    65d8:	99 06       	cpc	r9, r25
    65da:	a0 f4       	brcc	.+40     	; 0x6604 <vfprintf+0x1e0>
    65dc:	b6 01       	movw	r22, r12
    65de:	80 e2       	ldi	r24, 0x20	; 32
    65e0:	90 e0       	ldi	r25, 0x00	; 0
    65e2:	33 d1       	rcall	.+614    	; 0x684a <fputc>
    65e4:	2a 94       	dec	r2
    65e6:	f5 cf       	rjmp	.-22     	; 0x65d2 <vfprintf+0x1ae>
    65e8:	f5 01       	movw	r30, r10
    65ea:	37 fc       	sbrc	r3, 7
    65ec:	85 91       	lpm	r24, Z+
    65ee:	37 fe       	sbrs	r3, 7
    65f0:	81 91       	ld	r24, Z+
    65f2:	5f 01       	movw	r10, r30
    65f4:	b6 01       	movw	r22, r12
    65f6:	90 e0       	ldi	r25, 0x00	; 0
    65f8:	28 d1       	rcall	.+592    	; 0x684a <fputc>
    65fa:	21 10       	cpse	r2, r1
    65fc:	2a 94       	dec	r2
    65fe:	21 e0       	ldi	r18, 0x01	; 1
    6600:	82 1a       	sub	r8, r18
    6602:	91 08       	sbc	r9, r1
    6604:	81 14       	cp	r8, r1
    6606:	91 04       	cpc	r9, r1
    6608:	79 f7       	brne	.-34     	; 0x65e8 <vfprintf+0x1c4>
    660a:	e1 c0       	rjmp	.+450    	; 0x67ce <vfprintf+0x3aa>
    660c:	84 36       	cpi	r24, 0x64	; 100
    660e:	11 f0       	breq	.+4      	; 0x6614 <vfprintf+0x1f0>
    6610:	89 36       	cpi	r24, 0x69	; 105
    6612:	39 f5       	brne	.+78     	; 0x6662 <vfprintf+0x23e>
    6614:	f8 01       	movw	r30, r16
    6616:	37 fe       	sbrs	r3, 7
    6618:	07 c0       	rjmp	.+14     	; 0x6628 <vfprintf+0x204>
    661a:	60 81       	ld	r22, Z
    661c:	71 81       	ldd	r23, Z+1	; 0x01
    661e:	82 81       	ldd	r24, Z+2	; 0x02
    6620:	93 81       	ldd	r25, Z+3	; 0x03
    6622:	0c 5f       	subi	r16, 0xFC	; 252
    6624:	1f 4f       	sbci	r17, 0xFF	; 255
    6626:	08 c0       	rjmp	.+16     	; 0x6638 <vfprintf+0x214>
    6628:	60 81       	ld	r22, Z
    662a:	71 81       	ldd	r23, Z+1	; 0x01
    662c:	07 2e       	mov	r0, r23
    662e:	00 0c       	add	r0, r0
    6630:	88 0b       	sbc	r24, r24
    6632:	99 0b       	sbc	r25, r25
    6634:	0e 5f       	subi	r16, 0xFE	; 254
    6636:	1f 4f       	sbci	r17, 0xFF	; 255
    6638:	f3 2d       	mov	r31, r3
    663a:	ff 76       	andi	r31, 0x6F	; 111
    663c:	3f 2e       	mov	r3, r31
    663e:	97 ff       	sbrs	r25, 7
    6640:	09 c0       	rjmp	.+18     	; 0x6654 <vfprintf+0x230>
    6642:	90 95       	com	r25
    6644:	80 95       	com	r24
    6646:	70 95       	com	r23
    6648:	61 95       	neg	r22
    664a:	7f 4f       	sbci	r23, 0xFF	; 255
    664c:	8f 4f       	sbci	r24, 0xFF	; 255
    664e:	9f 4f       	sbci	r25, 0xFF	; 255
    6650:	f0 68       	ori	r31, 0x80	; 128
    6652:	3f 2e       	mov	r3, r31
    6654:	2a e0       	ldi	r18, 0x0A	; 10
    6656:	30 e0       	ldi	r19, 0x00	; 0
    6658:	a3 01       	movw	r20, r6
    665a:	33 d1       	rcall	.+614    	; 0x68c2 <__ultoa_invert>
    665c:	88 2e       	mov	r8, r24
    665e:	86 18       	sub	r8, r6
    6660:	44 c0       	rjmp	.+136    	; 0x66ea <vfprintf+0x2c6>
    6662:	85 37       	cpi	r24, 0x75	; 117
    6664:	31 f4       	brne	.+12     	; 0x6672 <vfprintf+0x24e>
    6666:	23 2d       	mov	r18, r3
    6668:	2f 7e       	andi	r18, 0xEF	; 239
    666a:	b2 2e       	mov	r11, r18
    666c:	2a e0       	ldi	r18, 0x0A	; 10
    666e:	30 e0       	ldi	r19, 0x00	; 0
    6670:	25 c0       	rjmp	.+74     	; 0x66bc <vfprintf+0x298>
    6672:	93 2d       	mov	r25, r3
    6674:	99 7f       	andi	r25, 0xF9	; 249
    6676:	b9 2e       	mov	r11, r25
    6678:	8f 36       	cpi	r24, 0x6F	; 111
    667a:	c1 f0       	breq	.+48     	; 0x66ac <vfprintf+0x288>
    667c:	18 f4       	brcc	.+6      	; 0x6684 <vfprintf+0x260>
    667e:	88 35       	cpi	r24, 0x58	; 88
    6680:	79 f0       	breq	.+30     	; 0x66a0 <vfprintf+0x27c>
    6682:	ae c0       	rjmp	.+348    	; 0x67e0 <vfprintf+0x3bc>
    6684:	80 37       	cpi	r24, 0x70	; 112
    6686:	19 f0       	breq	.+6      	; 0x668e <vfprintf+0x26a>
    6688:	88 37       	cpi	r24, 0x78	; 120
    668a:	21 f0       	breq	.+8      	; 0x6694 <vfprintf+0x270>
    668c:	a9 c0       	rjmp	.+338    	; 0x67e0 <vfprintf+0x3bc>
    668e:	e9 2f       	mov	r30, r25
    6690:	e0 61       	ori	r30, 0x10	; 16
    6692:	be 2e       	mov	r11, r30
    6694:	b4 fe       	sbrs	r11, 4
    6696:	0d c0       	rjmp	.+26     	; 0x66b2 <vfprintf+0x28e>
    6698:	fb 2d       	mov	r31, r11
    669a:	f4 60       	ori	r31, 0x04	; 4
    669c:	bf 2e       	mov	r11, r31
    669e:	09 c0       	rjmp	.+18     	; 0x66b2 <vfprintf+0x28e>
    66a0:	34 fe       	sbrs	r3, 4
    66a2:	0a c0       	rjmp	.+20     	; 0x66b8 <vfprintf+0x294>
    66a4:	29 2f       	mov	r18, r25
    66a6:	26 60       	ori	r18, 0x06	; 6
    66a8:	b2 2e       	mov	r11, r18
    66aa:	06 c0       	rjmp	.+12     	; 0x66b8 <vfprintf+0x294>
    66ac:	28 e0       	ldi	r18, 0x08	; 8
    66ae:	30 e0       	ldi	r19, 0x00	; 0
    66b0:	05 c0       	rjmp	.+10     	; 0x66bc <vfprintf+0x298>
    66b2:	20 e1       	ldi	r18, 0x10	; 16
    66b4:	30 e0       	ldi	r19, 0x00	; 0
    66b6:	02 c0       	rjmp	.+4      	; 0x66bc <vfprintf+0x298>
    66b8:	20 e1       	ldi	r18, 0x10	; 16
    66ba:	32 e0       	ldi	r19, 0x02	; 2
    66bc:	f8 01       	movw	r30, r16
    66be:	b7 fe       	sbrs	r11, 7
    66c0:	07 c0       	rjmp	.+14     	; 0x66d0 <vfprintf+0x2ac>
    66c2:	60 81       	ld	r22, Z
    66c4:	71 81       	ldd	r23, Z+1	; 0x01
    66c6:	82 81       	ldd	r24, Z+2	; 0x02
    66c8:	93 81       	ldd	r25, Z+3	; 0x03
    66ca:	0c 5f       	subi	r16, 0xFC	; 252
    66cc:	1f 4f       	sbci	r17, 0xFF	; 255
    66ce:	06 c0       	rjmp	.+12     	; 0x66dc <vfprintf+0x2b8>
    66d0:	60 81       	ld	r22, Z
    66d2:	71 81       	ldd	r23, Z+1	; 0x01
    66d4:	80 e0       	ldi	r24, 0x00	; 0
    66d6:	90 e0       	ldi	r25, 0x00	; 0
    66d8:	0e 5f       	subi	r16, 0xFE	; 254
    66da:	1f 4f       	sbci	r17, 0xFF	; 255
    66dc:	a3 01       	movw	r20, r6
    66de:	f1 d0       	rcall	.+482    	; 0x68c2 <__ultoa_invert>
    66e0:	88 2e       	mov	r8, r24
    66e2:	86 18       	sub	r8, r6
    66e4:	fb 2d       	mov	r31, r11
    66e6:	ff 77       	andi	r31, 0x7F	; 127
    66e8:	3f 2e       	mov	r3, r31
    66ea:	36 fe       	sbrs	r3, 6
    66ec:	0d c0       	rjmp	.+26     	; 0x6708 <vfprintf+0x2e4>
    66ee:	23 2d       	mov	r18, r3
    66f0:	2e 7f       	andi	r18, 0xFE	; 254
    66f2:	a2 2e       	mov	r10, r18
    66f4:	89 14       	cp	r8, r9
    66f6:	58 f4       	brcc	.+22     	; 0x670e <vfprintf+0x2ea>
    66f8:	34 fe       	sbrs	r3, 4
    66fa:	0b c0       	rjmp	.+22     	; 0x6712 <vfprintf+0x2ee>
    66fc:	32 fc       	sbrc	r3, 2
    66fe:	09 c0       	rjmp	.+18     	; 0x6712 <vfprintf+0x2ee>
    6700:	83 2d       	mov	r24, r3
    6702:	8e 7e       	andi	r24, 0xEE	; 238
    6704:	a8 2e       	mov	r10, r24
    6706:	05 c0       	rjmp	.+10     	; 0x6712 <vfprintf+0x2ee>
    6708:	b8 2c       	mov	r11, r8
    670a:	a3 2c       	mov	r10, r3
    670c:	03 c0       	rjmp	.+6      	; 0x6714 <vfprintf+0x2f0>
    670e:	b8 2c       	mov	r11, r8
    6710:	01 c0       	rjmp	.+2      	; 0x6714 <vfprintf+0x2f0>
    6712:	b9 2c       	mov	r11, r9
    6714:	a4 fe       	sbrs	r10, 4
    6716:	0f c0       	rjmp	.+30     	; 0x6736 <vfprintf+0x312>
    6718:	fe 01       	movw	r30, r28
    671a:	e8 0d       	add	r30, r8
    671c:	f1 1d       	adc	r31, r1
    671e:	80 81       	ld	r24, Z
    6720:	80 33       	cpi	r24, 0x30	; 48
    6722:	21 f4       	brne	.+8      	; 0x672c <vfprintf+0x308>
    6724:	9a 2d       	mov	r25, r10
    6726:	99 7e       	andi	r25, 0xE9	; 233
    6728:	a9 2e       	mov	r10, r25
    672a:	09 c0       	rjmp	.+18     	; 0x673e <vfprintf+0x31a>
    672c:	a2 fe       	sbrs	r10, 2
    672e:	06 c0       	rjmp	.+12     	; 0x673c <vfprintf+0x318>
    6730:	b3 94       	inc	r11
    6732:	b3 94       	inc	r11
    6734:	04 c0       	rjmp	.+8      	; 0x673e <vfprintf+0x31a>
    6736:	8a 2d       	mov	r24, r10
    6738:	86 78       	andi	r24, 0x86	; 134
    673a:	09 f0       	breq	.+2      	; 0x673e <vfprintf+0x31a>
    673c:	b3 94       	inc	r11
    673e:	a3 fc       	sbrc	r10, 3
    6740:	10 c0       	rjmp	.+32     	; 0x6762 <vfprintf+0x33e>
    6742:	a0 fe       	sbrs	r10, 0
    6744:	06 c0       	rjmp	.+12     	; 0x6752 <vfprintf+0x32e>
    6746:	b2 14       	cp	r11, r2
    6748:	80 f4       	brcc	.+32     	; 0x676a <vfprintf+0x346>
    674a:	28 0c       	add	r2, r8
    674c:	92 2c       	mov	r9, r2
    674e:	9b 18       	sub	r9, r11
    6750:	0d c0       	rjmp	.+26     	; 0x676c <vfprintf+0x348>
    6752:	b2 14       	cp	r11, r2
    6754:	58 f4       	brcc	.+22     	; 0x676c <vfprintf+0x348>
    6756:	b6 01       	movw	r22, r12
    6758:	80 e2       	ldi	r24, 0x20	; 32
    675a:	90 e0       	ldi	r25, 0x00	; 0
    675c:	76 d0       	rcall	.+236    	; 0x684a <fputc>
    675e:	b3 94       	inc	r11
    6760:	f8 cf       	rjmp	.-16     	; 0x6752 <vfprintf+0x32e>
    6762:	b2 14       	cp	r11, r2
    6764:	18 f4       	brcc	.+6      	; 0x676c <vfprintf+0x348>
    6766:	2b 18       	sub	r2, r11
    6768:	02 c0       	rjmp	.+4      	; 0x676e <vfprintf+0x34a>
    676a:	98 2c       	mov	r9, r8
    676c:	21 2c       	mov	r2, r1
    676e:	a4 fe       	sbrs	r10, 4
    6770:	0f c0       	rjmp	.+30     	; 0x6790 <vfprintf+0x36c>
    6772:	b6 01       	movw	r22, r12
    6774:	80 e3       	ldi	r24, 0x30	; 48
    6776:	90 e0       	ldi	r25, 0x00	; 0
    6778:	68 d0       	rcall	.+208    	; 0x684a <fputc>
    677a:	a2 fe       	sbrs	r10, 2
    677c:	16 c0       	rjmp	.+44     	; 0x67aa <vfprintf+0x386>
    677e:	a1 fc       	sbrc	r10, 1
    6780:	03 c0       	rjmp	.+6      	; 0x6788 <vfprintf+0x364>
    6782:	88 e7       	ldi	r24, 0x78	; 120
    6784:	90 e0       	ldi	r25, 0x00	; 0
    6786:	02 c0       	rjmp	.+4      	; 0x678c <vfprintf+0x368>
    6788:	88 e5       	ldi	r24, 0x58	; 88
    678a:	90 e0       	ldi	r25, 0x00	; 0
    678c:	b6 01       	movw	r22, r12
    678e:	0c c0       	rjmp	.+24     	; 0x67a8 <vfprintf+0x384>
    6790:	8a 2d       	mov	r24, r10
    6792:	86 78       	andi	r24, 0x86	; 134
    6794:	51 f0       	breq	.+20     	; 0x67aa <vfprintf+0x386>
    6796:	a1 fe       	sbrs	r10, 1
    6798:	02 c0       	rjmp	.+4      	; 0x679e <vfprintf+0x37a>
    679a:	8b e2       	ldi	r24, 0x2B	; 43
    679c:	01 c0       	rjmp	.+2      	; 0x67a0 <vfprintf+0x37c>
    679e:	80 e2       	ldi	r24, 0x20	; 32
    67a0:	a7 fc       	sbrc	r10, 7
    67a2:	8d e2       	ldi	r24, 0x2D	; 45
    67a4:	b6 01       	movw	r22, r12
    67a6:	90 e0       	ldi	r25, 0x00	; 0
    67a8:	50 d0       	rcall	.+160    	; 0x684a <fputc>
    67aa:	89 14       	cp	r8, r9
    67ac:	30 f4       	brcc	.+12     	; 0x67ba <vfprintf+0x396>
    67ae:	b6 01       	movw	r22, r12
    67b0:	80 e3       	ldi	r24, 0x30	; 48
    67b2:	90 e0       	ldi	r25, 0x00	; 0
    67b4:	4a d0       	rcall	.+148    	; 0x684a <fputc>
    67b6:	9a 94       	dec	r9
    67b8:	f8 cf       	rjmp	.-16     	; 0x67aa <vfprintf+0x386>
    67ba:	8a 94       	dec	r8
    67bc:	f3 01       	movw	r30, r6
    67be:	e8 0d       	add	r30, r8
    67c0:	f1 1d       	adc	r31, r1
    67c2:	80 81       	ld	r24, Z
    67c4:	b6 01       	movw	r22, r12
    67c6:	90 e0       	ldi	r25, 0x00	; 0
    67c8:	40 d0       	rcall	.+128    	; 0x684a <fputc>
    67ca:	81 10       	cpse	r8, r1
    67cc:	f6 cf       	rjmp	.-20     	; 0x67ba <vfprintf+0x396>
    67ce:	22 20       	and	r2, r2
    67d0:	09 f4       	brne	.+2      	; 0x67d4 <vfprintf+0x3b0>
    67d2:	4e ce       	rjmp	.-868    	; 0x6470 <vfprintf+0x4c>
    67d4:	b6 01       	movw	r22, r12
    67d6:	80 e2       	ldi	r24, 0x20	; 32
    67d8:	90 e0       	ldi	r25, 0x00	; 0
    67da:	37 d0       	rcall	.+110    	; 0x684a <fputc>
    67dc:	2a 94       	dec	r2
    67de:	f7 cf       	rjmp	.-18     	; 0x67ce <vfprintf+0x3aa>
    67e0:	f6 01       	movw	r30, r12
    67e2:	86 81       	ldd	r24, Z+6	; 0x06
    67e4:	97 81       	ldd	r25, Z+7	; 0x07
    67e6:	02 c0       	rjmp	.+4      	; 0x67ec <vfprintf+0x3c8>
    67e8:	8f ef       	ldi	r24, 0xFF	; 255
    67ea:	9f ef       	ldi	r25, 0xFF	; 255
    67ec:	2b 96       	adiw	r28, 0x0b	; 11
    67ee:	0f b6       	in	r0, 0x3f	; 63
    67f0:	f8 94       	cli
    67f2:	de bf       	out	0x3e, r29	; 62
    67f4:	0f be       	out	0x3f, r0	; 63
    67f6:	cd bf       	out	0x3d, r28	; 61
    67f8:	df 91       	pop	r29
    67fa:	cf 91       	pop	r28
    67fc:	1f 91       	pop	r17
    67fe:	0f 91       	pop	r16
    6800:	ff 90       	pop	r15
    6802:	ef 90       	pop	r14
    6804:	df 90       	pop	r13
    6806:	cf 90       	pop	r12
    6808:	bf 90       	pop	r11
    680a:	af 90       	pop	r10
    680c:	9f 90       	pop	r9
    680e:	8f 90       	pop	r8
    6810:	7f 90       	pop	r7
    6812:	6f 90       	pop	r6
    6814:	5f 90       	pop	r5
    6816:	4f 90       	pop	r4
    6818:	3f 90       	pop	r3
    681a:	2f 90       	pop	r2
    681c:	08 95       	ret

0000681e <strnlen_P>:
    681e:	fc 01       	movw	r30, r24
    6820:	05 90       	lpm	r0, Z+
    6822:	61 50       	subi	r22, 0x01	; 1
    6824:	70 40       	sbci	r23, 0x00	; 0
    6826:	01 10       	cpse	r0, r1
    6828:	d8 f7       	brcc	.-10     	; 0x6820 <strnlen_P+0x2>
    682a:	80 95       	com	r24
    682c:	90 95       	com	r25
    682e:	8e 0f       	add	r24, r30
    6830:	9f 1f       	adc	r25, r31
    6832:	08 95       	ret

00006834 <strnlen>:
    6834:	fc 01       	movw	r30, r24
    6836:	61 50       	subi	r22, 0x01	; 1
    6838:	70 40       	sbci	r23, 0x00	; 0
    683a:	01 90       	ld	r0, Z+
    683c:	01 10       	cpse	r0, r1
    683e:	d8 f7       	brcc	.-10     	; 0x6836 <strnlen+0x2>
    6840:	80 95       	com	r24
    6842:	90 95       	com	r25
    6844:	8e 0f       	add	r24, r30
    6846:	9f 1f       	adc	r25, r31
    6848:	08 95       	ret

0000684a <fputc>:
    684a:	0f 93       	push	r16
    684c:	1f 93       	push	r17
    684e:	cf 93       	push	r28
    6850:	df 93       	push	r29
    6852:	fb 01       	movw	r30, r22
    6854:	23 81       	ldd	r18, Z+3	; 0x03
    6856:	21 fd       	sbrc	r18, 1
    6858:	03 c0       	rjmp	.+6      	; 0x6860 <fputc+0x16>
    685a:	8f ef       	ldi	r24, 0xFF	; 255
    685c:	9f ef       	ldi	r25, 0xFF	; 255
    685e:	2c c0       	rjmp	.+88     	; 0x68b8 <fputc+0x6e>
    6860:	22 ff       	sbrs	r18, 2
    6862:	16 c0       	rjmp	.+44     	; 0x6890 <fputc+0x46>
    6864:	46 81       	ldd	r20, Z+6	; 0x06
    6866:	57 81       	ldd	r21, Z+7	; 0x07
    6868:	24 81       	ldd	r18, Z+4	; 0x04
    686a:	35 81       	ldd	r19, Z+5	; 0x05
    686c:	42 17       	cp	r20, r18
    686e:	53 07       	cpc	r21, r19
    6870:	44 f4       	brge	.+16     	; 0x6882 <fputc+0x38>
    6872:	a0 81       	ld	r26, Z
    6874:	b1 81       	ldd	r27, Z+1	; 0x01
    6876:	9d 01       	movw	r18, r26
    6878:	2f 5f       	subi	r18, 0xFF	; 255
    687a:	3f 4f       	sbci	r19, 0xFF	; 255
    687c:	31 83       	std	Z+1, r19	; 0x01
    687e:	20 83       	st	Z, r18
    6880:	8c 93       	st	X, r24
    6882:	26 81       	ldd	r18, Z+6	; 0x06
    6884:	37 81       	ldd	r19, Z+7	; 0x07
    6886:	2f 5f       	subi	r18, 0xFF	; 255
    6888:	3f 4f       	sbci	r19, 0xFF	; 255
    688a:	37 83       	std	Z+7, r19	; 0x07
    688c:	26 83       	std	Z+6, r18	; 0x06
    688e:	14 c0       	rjmp	.+40     	; 0x68b8 <fputc+0x6e>
    6890:	8b 01       	movw	r16, r22
    6892:	ec 01       	movw	r28, r24
    6894:	fb 01       	movw	r30, r22
    6896:	00 84       	ldd	r0, Z+8	; 0x08
    6898:	f1 85       	ldd	r31, Z+9	; 0x09
    689a:	e0 2d       	mov	r30, r0
    689c:	19 95       	eicall
    689e:	89 2b       	or	r24, r25
    68a0:	e1 f6       	brne	.-72     	; 0x685a <fputc+0x10>
    68a2:	d8 01       	movw	r26, r16
    68a4:	16 96       	adiw	r26, 0x06	; 6
    68a6:	8d 91       	ld	r24, X+
    68a8:	9c 91       	ld	r25, X
    68aa:	17 97       	sbiw	r26, 0x07	; 7
    68ac:	01 96       	adiw	r24, 0x01	; 1
    68ae:	17 96       	adiw	r26, 0x07	; 7
    68b0:	9c 93       	st	X, r25
    68b2:	8e 93       	st	-X, r24
    68b4:	16 97       	sbiw	r26, 0x06	; 6
    68b6:	ce 01       	movw	r24, r28
    68b8:	df 91       	pop	r29
    68ba:	cf 91       	pop	r28
    68bc:	1f 91       	pop	r17
    68be:	0f 91       	pop	r16
    68c0:	08 95       	ret

000068c2 <__ultoa_invert>:
    68c2:	fa 01       	movw	r30, r20
    68c4:	aa 27       	eor	r26, r26
    68c6:	28 30       	cpi	r18, 0x08	; 8
    68c8:	51 f1       	breq	.+84     	; 0x691e <__ultoa_invert+0x5c>
    68ca:	20 31       	cpi	r18, 0x10	; 16
    68cc:	81 f1       	breq	.+96     	; 0x692e <__ultoa_invert+0x6c>
    68ce:	e8 94       	clt
    68d0:	6f 93       	push	r22
    68d2:	6e 7f       	andi	r22, 0xFE	; 254
    68d4:	6e 5f       	subi	r22, 0xFE	; 254
    68d6:	7f 4f       	sbci	r23, 0xFF	; 255
    68d8:	8f 4f       	sbci	r24, 0xFF	; 255
    68da:	9f 4f       	sbci	r25, 0xFF	; 255
    68dc:	af 4f       	sbci	r26, 0xFF	; 255
    68de:	b1 e0       	ldi	r27, 0x01	; 1
    68e0:	3e d0       	rcall	.+124    	; 0x695e <__ultoa_invert+0x9c>
    68e2:	b4 e0       	ldi	r27, 0x04	; 4
    68e4:	3c d0       	rcall	.+120    	; 0x695e <__ultoa_invert+0x9c>
    68e6:	67 0f       	add	r22, r23
    68e8:	78 1f       	adc	r23, r24
    68ea:	89 1f       	adc	r24, r25
    68ec:	9a 1f       	adc	r25, r26
    68ee:	a1 1d       	adc	r26, r1
    68f0:	68 0f       	add	r22, r24
    68f2:	79 1f       	adc	r23, r25
    68f4:	8a 1f       	adc	r24, r26
    68f6:	91 1d       	adc	r25, r1
    68f8:	a1 1d       	adc	r26, r1
    68fa:	6a 0f       	add	r22, r26
    68fc:	71 1d       	adc	r23, r1
    68fe:	81 1d       	adc	r24, r1
    6900:	91 1d       	adc	r25, r1
    6902:	a1 1d       	adc	r26, r1
    6904:	20 d0       	rcall	.+64     	; 0x6946 <__ultoa_invert+0x84>
    6906:	09 f4       	brne	.+2      	; 0x690a <__ultoa_invert+0x48>
    6908:	68 94       	set
    690a:	3f 91       	pop	r19
    690c:	2a e0       	ldi	r18, 0x0A	; 10
    690e:	26 9f       	mul	r18, r22
    6910:	11 24       	eor	r1, r1
    6912:	30 19       	sub	r19, r0
    6914:	30 5d       	subi	r19, 0xD0	; 208
    6916:	31 93       	st	Z+, r19
    6918:	de f6       	brtc	.-74     	; 0x68d0 <__ultoa_invert+0xe>
    691a:	cf 01       	movw	r24, r30
    691c:	08 95       	ret
    691e:	46 2f       	mov	r20, r22
    6920:	47 70       	andi	r20, 0x07	; 7
    6922:	40 5d       	subi	r20, 0xD0	; 208
    6924:	41 93       	st	Z+, r20
    6926:	b3 e0       	ldi	r27, 0x03	; 3
    6928:	0f d0       	rcall	.+30     	; 0x6948 <__ultoa_invert+0x86>
    692a:	c9 f7       	brne	.-14     	; 0x691e <__ultoa_invert+0x5c>
    692c:	f6 cf       	rjmp	.-20     	; 0x691a <__ultoa_invert+0x58>
    692e:	46 2f       	mov	r20, r22
    6930:	4f 70       	andi	r20, 0x0F	; 15
    6932:	40 5d       	subi	r20, 0xD0	; 208
    6934:	4a 33       	cpi	r20, 0x3A	; 58
    6936:	18 f0       	brcs	.+6      	; 0x693e <__ultoa_invert+0x7c>
    6938:	49 5d       	subi	r20, 0xD9	; 217
    693a:	31 fd       	sbrc	r19, 1
    693c:	40 52       	subi	r20, 0x20	; 32
    693e:	41 93       	st	Z+, r20
    6940:	02 d0       	rcall	.+4      	; 0x6946 <__ultoa_invert+0x84>
    6942:	a9 f7       	brne	.-22     	; 0x692e <__ultoa_invert+0x6c>
    6944:	ea cf       	rjmp	.-44     	; 0x691a <__ultoa_invert+0x58>
    6946:	b4 e0       	ldi	r27, 0x04	; 4
    6948:	a6 95       	lsr	r26
    694a:	97 95       	ror	r25
    694c:	87 95       	ror	r24
    694e:	77 95       	ror	r23
    6950:	67 95       	ror	r22
    6952:	ba 95       	dec	r27
    6954:	c9 f7       	brne	.-14     	; 0x6948 <__ultoa_invert+0x86>
    6956:	00 97       	sbiw	r24, 0x00	; 0
    6958:	61 05       	cpc	r22, r1
    695a:	71 05       	cpc	r23, r1
    695c:	08 95       	ret
    695e:	9b 01       	movw	r18, r22
    6960:	ac 01       	movw	r20, r24
    6962:	0a 2e       	mov	r0, r26
    6964:	06 94       	lsr	r0
    6966:	57 95       	ror	r21
    6968:	47 95       	ror	r20
    696a:	37 95       	ror	r19
    696c:	27 95       	ror	r18
    696e:	ba 95       	dec	r27
    6970:	c9 f7       	brne	.-14     	; 0x6964 <__ultoa_invert+0xa2>
    6972:	62 0f       	add	r22, r18
    6974:	73 1f       	adc	r23, r19
    6976:	84 1f       	adc	r24, r20
    6978:	95 1f       	adc	r25, r21
    697a:	a0 1d       	adc	r26, r0
    697c:	08 95       	ret

0000697e <__divmodsi4>:
    697e:	05 2e       	mov	r0, r21
    6980:	97 fb       	bst	r25, 7
    6982:	16 f4       	brtc	.+4      	; 0x6988 <__divmodsi4+0xa>
    6984:	00 94       	com	r0
    6986:	0f d0       	rcall	.+30     	; 0x69a6 <__negsi2>
    6988:	57 fd       	sbrc	r21, 7
    698a:	05 d0       	rcall	.+10     	; 0x6996 <__divmodsi4_neg2>
    698c:	a9 da       	rcall	.-2734   	; 0x5ee0 <__udivmodsi4>
    698e:	07 fc       	sbrc	r0, 7
    6990:	02 d0       	rcall	.+4      	; 0x6996 <__divmodsi4_neg2>
    6992:	46 f4       	brtc	.+16     	; 0x69a4 <__divmodsi4_exit>
    6994:	08 c0       	rjmp	.+16     	; 0x69a6 <__negsi2>

00006996 <__divmodsi4_neg2>:
    6996:	50 95       	com	r21
    6998:	40 95       	com	r20
    699a:	30 95       	com	r19
    699c:	21 95       	neg	r18
    699e:	3f 4f       	sbci	r19, 0xFF	; 255
    69a0:	4f 4f       	sbci	r20, 0xFF	; 255
    69a2:	5f 4f       	sbci	r21, 0xFF	; 255

000069a4 <__divmodsi4_exit>:
    69a4:	08 95       	ret

000069a6 <__negsi2>:
    69a6:	90 95       	com	r25
    69a8:	80 95       	com	r24
    69aa:	70 95       	com	r23
    69ac:	61 95       	neg	r22
    69ae:	7f 4f       	sbci	r23, 0xFF	; 255
    69b0:	8f 4f       	sbci	r24, 0xFF	; 255
    69b2:	9f 4f       	sbci	r25, 0xFF	; 255
    69b4:	08 95       	ret

000069b6 <__muluhisi3>:
    69b6:	0f d0       	rcall	.+30     	; 0x69d6 <__umulhisi3>
    69b8:	a5 9f       	mul	r26, r21
    69ba:	90 0d       	add	r25, r0
    69bc:	b4 9f       	mul	r27, r20
    69be:	90 0d       	add	r25, r0
    69c0:	a4 9f       	mul	r26, r20
    69c2:	80 0d       	add	r24, r0
    69c4:	91 1d       	adc	r25, r1
    69c6:	11 24       	eor	r1, r1
    69c8:	08 95       	ret

000069ca <__mulshisi3>:
    69ca:	b7 ff       	sbrs	r27, 7
    69cc:	f4 cf       	rjmp	.-24     	; 0x69b6 <__muluhisi3>

000069ce <__mulohisi3>:
    69ce:	f3 df       	rcall	.-26     	; 0x69b6 <__muluhisi3>
    69d0:	82 1b       	sub	r24, r18
    69d2:	93 0b       	sbc	r25, r19
    69d4:	08 95       	ret

000069d6 <__umulhisi3>:
    69d6:	a2 9f       	mul	r26, r18
    69d8:	b0 01       	movw	r22, r0
    69da:	b3 9f       	mul	r27, r19
    69dc:	c0 01       	movw	r24, r0
    69de:	a3 9f       	mul	r26, r19
    69e0:	70 0d       	add	r23, r0
    69e2:	81 1d       	adc	r24, r1
    69e4:	11 24       	eor	r1, r1
    69e6:	91 1d       	adc	r25, r1
    69e8:	b2 9f       	mul	r27, r18
    69ea:	70 0d       	add	r23, r0
    69ec:	81 1d       	adc	r24, r1
    69ee:	11 24       	eor	r1, r1
    69f0:	91 1d       	adc	r25, r1
    69f2:	08 95       	ret

000069f4 <_exit>:
    69f4:	f8 94       	cli

000069f6 <__stop_program>:
    69f6:	ff cf       	rjmp	.-2      	; 0x69f6 <__stop_program>
