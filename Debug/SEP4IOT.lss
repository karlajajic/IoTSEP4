
SEP4IOT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000666  00800200  000069c8  00006a5c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000069c8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000012c7  00800866  00800866  000070c2  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000070c2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00007120  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000ca8  00000000  00000000  00007160  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000fc48  00000000  00000000  00007e08  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000418d  00000000  00000000  00017a50  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000077fa  00000000  00000000  0001bbdd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002b40  00000000  00000000  000233d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000487a  00000000  00000000  00025f18  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000e089  00000000  00000000  0002a792  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000c70  00000000  00000000  0003881b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	50 c2       	rjmp	.+1184   	; 0x4a2 <__ctors_end>
       2:	00 00       	nop
       4:	6f c2       	rjmp	.+1246   	; 0x4e4 <__bad_interrupt>
       6:	00 00       	nop
       8:	6d c2       	rjmp	.+1242   	; 0x4e4 <__bad_interrupt>
       a:	00 00       	nop
       c:	6b c2       	rjmp	.+1238   	; 0x4e4 <__bad_interrupt>
       e:	00 00       	nop
      10:	69 c2       	rjmp	.+1234   	; 0x4e4 <__bad_interrupt>
      12:	00 00       	nop
      14:	67 c2       	rjmp	.+1230   	; 0x4e4 <__bad_interrupt>
      16:	00 00       	nop
      18:	65 c2       	rjmp	.+1226   	; 0x4e4 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	63 c2       	rjmp	.+1222   	; 0x4e4 <__bad_interrupt>
      1e:	00 00       	nop
      20:	61 c2       	rjmp	.+1218   	; 0x4e4 <__bad_interrupt>
      22:	00 00       	nop
      24:	5f c2       	rjmp	.+1214   	; 0x4e4 <__bad_interrupt>
      26:	00 00       	nop
      28:	5d c2       	rjmp	.+1210   	; 0x4e4 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	5b c2       	rjmp	.+1206   	; 0x4e4 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 36 0e 	jmp	0x1c6c	; 0x1c6c <__vector_12>
      34:	57 c2       	rjmp	.+1198   	; 0x4e4 <__bad_interrupt>
      36:	00 00       	nop
      38:	55 c2       	rjmp	.+1194   	; 0x4e4 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	53 c2       	rjmp	.+1190   	; 0x4e4 <__bad_interrupt>
      3e:	00 00       	nop
      40:	51 c2       	rjmp	.+1186   	; 0x4e4 <__bad_interrupt>
      42:	00 00       	nop
      44:	4f c2       	rjmp	.+1182   	; 0x4e4 <__bad_interrupt>
      46:	00 00       	nop
      48:	4d c2       	rjmp	.+1178   	; 0x4e4 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	4b c2       	rjmp	.+1174   	; 0x4e4 <__bad_interrupt>
      4e:	00 00       	nop
      50:	49 c2       	rjmp	.+1170   	; 0x4e4 <__bad_interrupt>
      52:	00 00       	nop
      54:	47 c2       	rjmp	.+1166   	; 0x4e4 <__bad_interrupt>
      56:	00 00       	nop
      58:	45 c2       	rjmp	.+1162   	; 0x4e4 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	43 c2       	rjmp	.+1158   	; 0x4e4 <__bad_interrupt>
      5e:	00 00       	nop
      60:	41 c2       	rjmp	.+1154   	; 0x4e4 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 fd 28 	jmp	0x51fa	; 0x51fa <__vector_25>
      68:	0c 94 4f 29 	jmp	0x529e	; 0x529e <__vector_26>
      6c:	3b c2       	rjmp	.+1142   	; 0x4e4 <__bad_interrupt>
      6e:	00 00       	nop
      70:	39 c2       	rjmp	.+1138   	; 0x4e4 <__bad_interrupt>
      72:	00 00       	nop
      74:	37 c2       	rjmp	.+1134   	; 0x4e4 <__bad_interrupt>
      76:	00 00       	nop
      78:	35 c2       	rjmp	.+1130   	; 0x4e4 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	33 c2       	rjmp	.+1126   	; 0x4e4 <__bad_interrupt>
      7e:	00 00       	nop
      80:	31 c2       	rjmp	.+1122   	; 0x4e4 <__bad_interrupt>
      82:	00 00       	nop
      84:	2f c2       	rjmp	.+1118   	; 0x4e4 <__bad_interrupt>
      86:	00 00       	nop
      88:	2d c2       	rjmp	.+1114   	; 0x4e4 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	2b c2       	rjmp	.+1110   	; 0x4e4 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 93 29 	jmp	0x5326	; 0x5326 <__vector_36>
      94:	0c 94 e5 29 	jmp	0x53ca	; 0x53ca <__vector_37>
      98:	25 c2       	rjmp	.+1098   	; 0x4e4 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 7d 2c 	jmp	0x58fa	; 0x58fa <__vector_39>
      a0:	21 c2       	rjmp	.+1090   	; 0x4e4 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	1f c2       	rjmp	.+1086   	; 0x4e4 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	1d c2       	rjmp	.+1082   	; 0x4e4 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	1b c2       	rjmp	.+1078   	; 0x4e4 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	19 c2       	rjmp	.+1074   	; 0x4e4 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	17 c2       	rjmp	.+1070   	; 0x4e4 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	15 c2       	rjmp	.+1066   	; 0x4e4 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	13 c2       	rjmp	.+1062   	; 0x4e4 <__bad_interrupt>
      be:	00 00       	nop
      c0:	11 c2       	rjmp	.+1058   	; 0x4e4 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	0f c2       	rjmp	.+1054   	; 0x4e4 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	0d c2       	rjmp	.+1050   	; 0x4e4 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 29 2a 	jmp	0x5452	; 0x5452 <__vector_51>
      d0:	0c 94 7b 2a 	jmp	0x54f6	; 0x54f6 <__vector_52>
      d4:	07 c2       	rjmp	.+1038   	; 0x4e4 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 bf 2a 	jmp	0x557e	; 0x557e <__vector_54>
      dc:	0c 94 11 2b 	jmp	0x5622	; 0x5622 <__vector_55>
      e0:	01 c2       	rjmp	.+1026   	; 0x4e4 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	c6 01       	movw	r24, r12
      e6:	c6 01       	movw	r24, r12
      e8:	c6 01       	movw	r24, r12
      ea:	00 02       	muls	r16, r16
      ec:	08 02       	muls	r16, r24
      ee:	1e 02       	muls	r17, r30
      f0:	c6 01       	movw	r24, r12
      f2:	c6 01       	movw	r24, r12
      f4:	00 02       	muls	r16, r16
      f6:	08 02       	muls	r16, r24
      f8:	9f 2c       	mov	r9, r15
      fa:	0f 2d       	mov	r16, r15
      fc:	0f 2d       	mov	r16, r15
      fe:	0f 2d       	mov	r16, r15
     100:	0f 2d       	mov	r16, r15
     102:	0f 2d       	mov	r16, r15
     104:	0f 2d       	mov	r16, r15
     106:	0f 2d       	mov	r16, r15
     108:	9f 2c       	mov	r9, r15
     10a:	0f 2d       	mov	r16, r15
     10c:	0f 2d       	mov	r16, r15
     10e:	0f 2d       	mov	r16, r15
     110:	0f 2d       	mov	r16, r15
     112:	0f 2d       	mov	r16, r15
     114:	0f 2d       	mov	r16, r15
     116:	0f 2d       	mov	r16, r15
     118:	a1 2c       	mov	r10, r1
     11a:	0f 2d       	mov	r16, r15
     11c:	0f 2d       	mov	r16, r15
     11e:	0f 2d       	mov	r16, r15
     120:	0f 2d       	mov	r16, r15
     122:	0f 2d       	mov	r16, r15
     124:	0f 2d       	mov	r16, r15
     126:	0f 2d       	mov	r16, r15
     128:	0f 2d       	mov	r16, r15
     12a:	0f 2d       	mov	r16, r15
     12c:	0f 2d       	mov	r16, r15
     12e:	0f 2d       	mov	r16, r15
     130:	0f 2d       	mov	r16, r15
     132:	0f 2d       	mov	r16, r15
     134:	0f 2d       	mov	r16, r15
     136:	0f 2d       	mov	r16, r15
     138:	a1 2c       	mov	r10, r1
     13a:	0f 2d       	mov	r16, r15
     13c:	0f 2d       	mov	r16, r15
     13e:	0f 2d       	mov	r16, r15
     140:	0f 2d       	mov	r16, r15
     142:	0f 2d       	mov	r16, r15
     144:	0f 2d       	mov	r16, r15
     146:	0f 2d       	mov	r16, r15
     148:	0f 2d       	mov	r16, r15
     14a:	0f 2d       	mov	r16, r15
     14c:	0f 2d       	mov	r16, r15
     14e:	0f 2d       	mov	r16, r15
     150:	0f 2d       	mov	r16, r15
     152:	0f 2d       	mov	r16, r15
     154:	0f 2d       	mov	r16, r15
     156:	0f 2d       	mov	r16, r15
     158:	0b 2d       	mov	r16, r11
     15a:	0f 2d       	mov	r16, r15
     15c:	0f 2d       	mov	r16, r15
     15e:	0f 2d       	mov	r16, r15
     160:	0f 2d       	mov	r16, r15
     162:	0f 2d       	mov	r16, r15
     164:	0f 2d       	mov	r16, r15
     166:	0f 2d       	mov	r16, r15
     168:	d6 2c       	mov	r13, r6
     16a:	0f 2d       	mov	r16, r15
     16c:	0f 2d       	mov	r16, r15
     16e:	0f 2d       	mov	r16, r15
     170:	0f 2d       	mov	r16, r15
     172:	0f 2d       	mov	r16, r15
     174:	0f 2d       	mov	r16, r15
     176:	0f 2d       	mov	r16, r15
     178:	0f 2d       	mov	r16, r15
     17a:	0f 2d       	mov	r16, r15
     17c:	0f 2d       	mov	r16, r15
     17e:	0f 2d       	mov	r16, r15
     180:	0f 2d       	mov	r16, r15
     182:	0f 2d       	mov	r16, r15
     184:	0f 2d       	mov	r16, r15
     186:	0f 2d       	mov	r16, r15
     188:	ca 2c       	mov	r12, r10
     18a:	0f 2d       	mov	r16, r15
     18c:	0f 2d       	mov	r16, r15
     18e:	0f 2d       	mov	r16, r15
     190:	0f 2d       	mov	r16, r15
     192:	0f 2d       	mov	r16, r15
     194:	0f 2d       	mov	r16, r15
     196:	0f 2d       	mov	r16, r15
     198:	ee 2c       	mov	r14, r14

0000019a <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     19a:	0d e0       	ldi	r16, 0x0D	; 13
     19c:	19 e1       	ldi	r17, 0x19	; 25
     19e:	0f 2e       	mov	r0, r31
     1a0:	fd e3       	ldi	r31, 0x3D	; 61
     1a2:	ef 2e       	mov	r14, r31
     1a4:	f9 e1       	ldi	r31, 0x19	; 25
     1a6:	ff 2e       	mov	r15, r31
     1a8:	f0 2d       	mov	r31, r0
     1aa:	80 91 0c 19 	lds	r24, 0x190C	; 0x80190c <uxDeletedTasksWaitingCleanUp>
     1ae:	88 23       	and	r24, r24
     1b0:	29 f1       	breq	.+74     	; 0x1fc <prvIdleTask+0x62>
     1b2:	0f b6       	in	r0, 0x3f	; 63
     1b4:	f8 94       	cli
     1b6:	0f 92       	push	r0
     1b8:	d8 01       	movw	r26, r16
     1ba:	17 96       	adiw	r26, 0x07	; 7
     1bc:	ed 91       	ld	r30, X+
     1be:	fc 91       	ld	r31, X
     1c0:	18 97       	sbiw	r26, 0x08	; 8
     1c2:	c0 85       	ldd	r28, Z+8	; 0x08
     1c4:	d1 85       	ldd	r29, Z+9	; 0x09
     1c6:	ce 01       	movw	r24, r28
     1c8:	02 96       	adiw	r24, 0x02	; 2
     1ca:	0e 94 9b 0c 	call	0x1936	; 0x1936 <uxListRemove>
     1ce:	80 91 00 19 	lds	r24, 0x1900	; 0x801900 <uxCurrentNumberOfTasks>
     1d2:	81 50       	subi	r24, 0x01	; 1
     1d4:	80 93 00 19 	sts	0x1900, r24	; 0x801900 <uxCurrentNumberOfTasks>
     1d8:	80 91 0c 19 	lds	r24, 0x190C	; 0x80190c <uxDeletedTasksWaitingCleanUp>
     1dc:	81 50       	subi	r24, 0x01	; 1
     1de:	80 93 0c 19 	sts	0x190C, r24	; 0x80190c <uxDeletedTasksWaitingCleanUp>
     1e2:	0f 90       	pop	r0
     1e4:	0f be       	out	0x3f, r0	; 63
     1e6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     1e8:	9c 8d       	ldd	r25, Y+28	; 0x1c
     1ea:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <vPortFree>
     1ee:	ce 01       	movw	r24, r28
     1f0:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <vPortFree>
     1f4:	80 91 0c 19 	lds	r24, 0x190C	; 0x80190c <uxDeletedTasksWaitingCleanUp>
     1f8:	81 11       	cpse	r24, r1
     1fa:	db cf       	rjmp	.-74     	; 0x1b2 <prvIdleTask+0x18>
     1fc:	f7 01       	movw	r30, r14
     1fe:	80 81       	ld	r24, Z
     200:	82 30       	cpi	r24, 0x02	; 2
     202:	10 f0       	brcs	.+4      	; 0x208 <prvIdleTask+0x6e>
     204:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <vPortYield>
     208:	0e 94 88 1e 	call	0x3d10	; 0x3d10 <vApplicationIdleHook>
     20c:	ce cf       	rjmp	.-100    	; 0x1aa <prvIdleTask+0x10>

0000020e <prvTimerTask>:
            pxNewTimer->ucStatus = 0x00;
            prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
        }

        return pxNewTimer;
    }
     20e:	cf 93       	push	r28
     210:	df 93       	push	r29
     212:	cd b7       	in	r28, 0x3d	; 61
     214:	de b7       	in	r29, 0x3e	; 62
     216:	60 97       	sbiw	r28, 0x10	; 16
     218:	0f b6       	in	r0, 0x3f	; 63
     21a:	f8 94       	cli
     21c:	de bf       	out	0x3e, r29	; 62
     21e:	0f be       	out	0x3f, r0	; 63
     220:	cd bf       	out	0x3d, r28	; 61
     222:	ce 01       	movw	r24, r28
     224:	01 96       	adiw	r24, 0x01	; 1
     226:	9a 87       	std	Y+10, r25	; 0x0a
     228:	89 87       	std	Y+9, r24	; 0x09
     22a:	81 2c       	mov	r8, r1
     22c:	91 2c       	mov	r9, r1
     22e:	a1 2c       	mov	r10, r1
     230:	b1 2c       	mov	r11, r1
     232:	69 84       	ldd	r6, Y+9	; 0x09
     234:	7a 84       	ldd	r7, Y+10	; 0x0a
     236:	e0 91 75 19 	lds	r30, 0x1975	; 0x801975 <pxCurrentTimerList>
     23a:	f0 91 76 19 	lds	r31, 0x1976	; 0x801976 <pxCurrentTimerList+0x1>
     23e:	80 81       	ld	r24, Z
     240:	88 23       	and	r24, r24
     242:	09 f4       	brne	.+2      	; 0x246 <prvTimerTask+0x38>
     244:	14 c1       	rjmp	.+552    	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
     246:	07 80       	ldd	r0, Z+7	; 0x07
     248:	f0 85       	ldd	r31, Z+8	; 0x08
     24a:	e0 2d       	mov	r30, r0
     24c:	20 80       	ld	r2, Z
     24e:	31 80       	ldd	r3, Z+1	; 0x01
     250:	42 80       	ldd	r4, Z+2	; 0x02
     252:	53 80       	ldd	r5, Z+3	; 0x03
     254:	0e 94 cd 16 	call	0x2d9a	; 0x2d9a <vTaskSuspendAll>
     258:	ce 01       	movw	r24, r28
     25a:	01 96       	adiw	r24, 0x01	; 1
     25c:	0e 94 f2 1d 	call	0x3be4	; 0x3be4 <prvSampleTimeNow>
     260:	6b 87       	std	Y+11, r22	; 0x0b
     262:	7c 87       	std	Y+12, r23	; 0x0c
     264:	8d 87       	std	Y+13, r24	; 0x0d
     266:	9e 87       	std	Y+14, r25	; 0x0e
     268:	89 81       	ldd	r24, Y+1	; 0x01
     26a:	81 11       	cpse	r24, r1
     26c:	67 c0       	rjmp	.+206    	; 0x33c <prvTimerTask+0x12e>
     26e:	8b 85       	ldd	r24, Y+11	; 0x0b
     270:	9c 85       	ldd	r25, Y+12	; 0x0c
     272:	ad 85       	ldd	r26, Y+13	; 0x0d
     274:	be 85       	ldd	r27, Y+14	; 0x0e
     276:	82 15       	cp	r24, r2
     278:	93 05       	cpc	r25, r3
     27a:	a4 05       	cpc	r26, r4
     27c:	b5 05       	cpc	r27, r5
     27e:	08 f4       	brcc	.+2      	; 0x282 <prvTimerTask+0x74>
     280:	45 c0       	rjmp	.+138    	; 0x30c <prvTimerTask+0xfe>
     282:	0e 94 b6 17 	call	0x2f6c	; 0x2f6c <xTaskResumeAll>
     286:	e0 91 75 19 	lds	r30, 0x1975	; 0x801975 <pxCurrentTimerList>
     28a:	f0 91 76 19 	lds	r31, 0x1976	; 0x801976 <pxCurrentTimerList+0x1>
     28e:	07 80       	ldd	r0, Z+7	; 0x07
     290:	f0 85       	ldd	r31, Z+8	; 0x08
     292:	e0 2d       	mov	r30, r0
     294:	a0 85       	ldd	r26, Z+8	; 0x08
     296:	b1 85       	ldd	r27, Z+9	; 0x09
     298:	b8 8b       	std	Y+16, r27	; 0x10
     29a:	af 87       	std	Y+15, r26	; 0x0f
     29c:	cd 01       	movw	r24, r26
     29e:	02 96       	adiw	r24, 0x02	; 2
     2a0:	0e 94 9b 0c 	call	0x1936	; 0x1936 <uxListRemove>
     2a4:	ef 85       	ldd	r30, Y+15	; 0x0f
     2a6:	f8 89       	ldd	r31, Y+16	; 0x10
     2a8:	87 89       	ldd	r24, Z+23	; 0x17
     2aa:	82 ff       	sbrs	r24, 2
     2ac:	21 c0       	rjmp	.+66     	; 0x2f0 <prvTimerTask+0xe2>
     2ae:	46 85       	ldd	r20, Z+14	; 0x0e
     2b0:	57 85       	ldd	r21, Z+15	; 0x0f
     2b2:	60 89       	ldd	r22, Z+16	; 0x10
     2b4:	71 89       	ldd	r23, Z+17	; 0x11
     2b6:	42 0d       	add	r20, r2
     2b8:	53 1d       	adc	r21, r3
     2ba:	64 1d       	adc	r22, r4
     2bc:	75 1d       	adc	r23, r5
     2be:	72 01       	movw	r14, r4
     2c0:	61 01       	movw	r12, r2
     2c2:	0b 85       	ldd	r16, Y+11	; 0x0b
     2c4:	1c 85       	ldd	r17, Y+12	; 0x0c
     2c6:	2d 85       	ldd	r18, Y+13	; 0x0d
     2c8:	3e 85       	ldd	r19, Y+14	; 0x0e
     2ca:	cf 01       	movw	r24, r30
     2cc:	0e 94 01 1d 	call	0x3a02	; 0x3a02 <prvInsertTimerInActiveList>
     2d0:	88 23       	and	r24, r24
     2d2:	99 f0       	breq	.+38     	; 0x2fa <prvTimerTask+0xec>
     2d4:	c8 2c       	mov	r12, r8
     2d6:	d9 2c       	mov	r13, r9
     2d8:	ea 2c       	mov	r14, r10
     2da:	fb 2c       	mov	r15, r11
     2dc:	00 e0       	ldi	r16, 0x00	; 0
     2de:	10 e0       	ldi	r17, 0x00	; 0
     2e0:	a2 01       	movw	r20, r4
     2e2:	91 01       	movw	r18, r2
     2e4:	60 e0       	ldi	r22, 0x00	; 0
     2e6:	8f 85       	ldd	r24, Y+15	; 0x0f
     2e8:	98 89       	ldd	r25, Y+16	; 0x10
     2ea:	0e 94 94 1d 	call	0x3b28	; 0x3b28 <xTimerGenericCommand>
     2ee:	05 c0       	rjmp	.+10     	; 0x2fa <prvTimerTask+0xec>
     2f0:	8e 7f       	andi	r24, 0xFE	; 254
     2f2:	af 85       	ldd	r26, Y+15	; 0x0f
     2f4:	b8 89       	ldd	r27, Y+16	; 0x10
     2f6:	57 96       	adiw	r26, 0x17	; 23
     2f8:	8c 93       	st	X, r24
     2fa:	af 85       	ldd	r26, Y+15	; 0x0f
     2fc:	b8 89       	ldd	r27, Y+16	; 0x10
     2fe:	54 96       	adiw	r26, 0x14	; 20
     300:	ed 91       	ld	r30, X+
     302:	fc 91       	ld	r31, X
     304:	55 97       	sbiw	r26, 0x15	; 21
     306:	cd 01       	movw	r24, r26
     308:	19 95       	eicall
     30a:	a2 c0       	rjmp	.+324    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     30c:	20 e0       	ldi	r18, 0x00	; 0
     30e:	b2 01       	movw	r22, r4
     310:	a1 01       	movw	r20, r2
     312:	8b 85       	ldd	r24, Y+11	; 0x0b
     314:	9c 85       	ldd	r25, Y+12	; 0x0c
     316:	ad 85       	ldd	r26, Y+13	; 0x0d
     318:	be 85       	ldd	r27, Y+14	; 0x0e
     31a:	48 1b       	sub	r20, r24
     31c:	59 0b       	sbc	r21, r25
     31e:	6a 0b       	sbc	r22, r26
     320:	7b 0b       	sbc	r23, r27
     322:	80 91 71 19 	lds	r24, 0x1971	; 0x801971 <xTimerQueue>
     326:	90 91 72 19 	lds	r25, 0x1972	; 0x801972 <xTimerQueue+0x1>
     32a:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <vQueueWaitForMessageRestricted>
     32e:	0e 94 b6 17 	call	0x2f6c	; 0x2f6c <xTaskResumeAll>
     332:	81 11       	cpse	r24, r1
     334:	8d c0       	rjmp	.+282    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     336:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <vPortYield>
     33a:	8a c0       	rjmp	.+276    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     33c:	0e 94 b6 17 	call	0x2f6c	; 0x2f6c <xTaskResumeAll>
     340:	87 c0       	rjmp	.+270    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     342:	89 81       	ldd	r24, Y+1	; 0x01
     344:	88 23       	and	r24, r24
     346:	0c f4       	brge	.+2      	; 0x34a <prvTimerTask+0x13c>
     348:	83 c0       	rjmp	.+262    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     34a:	4e 80       	ldd	r4, Y+6	; 0x06
     34c:	5f 80       	ldd	r5, Y+7	; 0x07
     34e:	d2 01       	movw	r26, r4
     350:	1c 96       	adiw	r26, 0x0c	; 12
     352:	8d 91       	ld	r24, X+
     354:	9c 91       	ld	r25, X
     356:	1d 97       	sbiw	r26, 0x0d	; 13
     358:	89 2b       	or	r24, r25
     35a:	21 f0       	breq	.+8      	; 0x364 <prvTimerTask+0x156>
     35c:	c2 01       	movw	r24, r4
     35e:	02 96       	adiw	r24, 0x02	; 2
     360:	0e 94 9b 0c 	call	0x1936	; 0x1936 <uxListRemove>
     364:	ce 01       	movw	r24, r28
     366:	08 96       	adiw	r24, 0x08	; 8
     368:	0e 94 f2 1d 	call	0x3be4	; 0x3be4 <prvSampleTimeNow>
     36c:	8b 01       	movw	r16, r22
     36e:	9c 01       	movw	r18, r24
     370:	e9 81       	ldd	r30, Y+1	; 0x01
     372:	0e 2e       	mov	r0, r30
     374:	00 0c       	add	r0, r0
     376:	ff 0b       	sbc	r31, r31
     378:	ea 30       	cpi	r30, 0x0A	; 10
     37a:	f1 05       	cpc	r31, r1
     37c:	08 f0       	brcs	.+2      	; 0x380 <prvTimerTask+0x172>
     37e:	68 c0       	rjmp	.+208    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     380:	88 27       	eor	r24, r24
     382:	ee 58       	subi	r30, 0x8E	; 142
     384:	ff 4f       	sbci	r31, 0xFF	; 255
     386:	8f 4f       	sbci	r24, 0xFF	; 255
     388:	0c 94 7a 2f 	jmp	0x5ef4	; 0x5ef4 <__tablejump2__>
     38c:	f2 01       	movw	r30, r4
     38e:	87 89       	ldd	r24, Z+23	; 0x17
     390:	81 60       	ori	r24, 0x01	; 1
     392:	87 8b       	std	Z+23, r24	; 0x17
     394:	ca 80       	ldd	r12, Y+2	; 0x02
     396:	db 80       	ldd	r13, Y+3	; 0x03
     398:	ec 80       	ldd	r14, Y+4	; 0x04
     39a:	fd 80       	ldd	r15, Y+5	; 0x05
     39c:	46 85       	ldd	r20, Z+14	; 0x0e
     39e:	57 85       	ldd	r21, Z+15	; 0x0f
     3a0:	60 89       	ldd	r22, Z+16	; 0x10
     3a2:	71 89       	ldd	r23, Z+17	; 0x11
     3a4:	4c 0d       	add	r20, r12
     3a6:	5d 1d       	adc	r21, r13
     3a8:	6e 1d       	adc	r22, r14
     3aa:	7f 1d       	adc	r23, r15
     3ac:	c2 01       	movw	r24, r4
     3ae:	0e 94 01 1d 	call	0x3a02	; 0x3a02 <prvInsertTimerInActiveList>
     3b2:	88 23       	and	r24, r24
     3b4:	09 f4       	brne	.+2      	; 0x3b8 <prvTimerTask+0x1aa>
     3b6:	4c c0       	rjmp	.+152    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     3b8:	d2 01       	movw	r26, r4
     3ba:	54 96       	adiw	r26, 0x14	; 20
     3bc:	ed 91       	ld	r30, X+
     3be:	fc 91       	ld	r31, X
     3c0:	55 97       	sbiw	r26, 0x15	; 21
     3c2:	c2 01       	movw	r24, r4
     3c4:	19 95       	eicall
     3c6:	f2 01       	movw	r30, r4
     3c8:	87 89       	ldd	r24, Z+23	; 0x17
     3ca:	82 ff       	sbrs	r24, 2
     3cc:	41 c0       	rjmp	.+130    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     3ce:	4a 81       	ldd	r20, Y+2	; 0x02
     3d0:	5b 81       	ldd	r21, Y+3	; 0x03
     3d2:	6c 81       	ldd	r22, Y+4	; 0x04
     3d4:	7d 81       	ldd	r23, Y+5	; 0x05
     3d6:	86 85       	ldd	r24, Z+14	; 0x0e
     3d8:	97 85       	ldd	r25, Z+15	; 0x0f
     3da:	a0 89       	ldd	r26, Z+16	; 0x10
     3dc:	b1 89       	ldd	r27, Z+17	; 0x11
     3de:	9a 01       	movw	r18, r20
     3e0:	ab 01       	movw	r20, r22
     3e2:	28 0f       	add	r18, r24
     3e4:	39 1f       	adc	r19, r25
     3e6:	4a 1f       	adc	r20, r26
     3e8:	5b 1f       	adc	r21, r27
     3ea:	c8 2c       	mov	r12, r8
     3ec:	d9 2c       	mov	r13, r9
     3ee:	ea 2c       	mov	r14, r10
     3f0:	fb 2c       	mov	r15, r11
     3f2:	00 e0       	ldi	r16, 0x00	; 0
     3f4:	10 e0       	ldi	r17, 0x00	; 0
     3f6:	60 e0       	ldi	r22, 0x00	; 0
     3f8:	c2 01       	movw	r24, r4
     3fa:	0e 94 94 1d 	call	0x3b28	; 0x3b28 <xTimerGenericCommand>
     3fe:	28 c0       	rjmp	.+80     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     400:	d2 01       	movw	r26, r4
     402:	57 96       	adiw	r26, 0x17	; 23
     404:	8c 91       	ld	r24, X
     406:	57 97       	sbiw	r26, 0x17	; 23
     408:	8e 7f       	andi	r24, 0xFE	; 254
     40a:	57 96       	adiw	r26, 0x17	; 23
     40c:	8c 93       	st	X, r24
     40e:	20 c0       	rjmp	.+64     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     410:	f2 01       	movw	r30, r4
     412:	87 89       	ldd	r24, Z+23	; 0x17
     414:	81 60       	ori	r24, 0x01	; 1
     416:	87 8b       	std	Z+23, r24	; 0x17
     418:	4a 81       	ldd	r20, Y+2	; 0x02
     41a:	5b 81       	ldd	r21, Y+3	; 0x03
     41c:	6c 81       	ldd	r22, Y+4	; 0x04
     41e:	7d 81       	ldd	r23, Y+5	; 0x05
     420:	46 87       	std	Z+14, r20	; 0x0e
     422:	57 87       	std	Z+15, r21	; 0x0f
     424:	60 8b       	std	Z+16, r22	; 0x10
     426:	71 8b       	std	Z+17, r23	; 0x11
     428:	40 0f       	add	r20, r16
     42a:	51 1f       	adc	r21, r17
     42c:	62 1f       	adc	r22, r18
     42e:	73 1f       	adc	r23, r19
     430:	68 01       	movw	r12, r16
     432:	79 01       	movw	r14, r18
     434:	c2 01       	movw	r24, r4
     436:	0e 94 01 1d 	call	0x3a02	; 0x3a02 <prvInsertTimerInActiveList>
     43a:	0a c0       	rjmp	.+20     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     43c:	f2 01       	movw	r30, r4
     43e:	87 89       	ldd	r24, Z+23	; 0x17
     440:	81 fd       	sbrc	r24, 1
     442:	04 c0       	rjmp	.+8      	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
     444:	c2 01       	movw	r24, r4
     446:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <vPortFree>
     44a:	02 c0       	rjmp	.+4      	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     44c:	8e 7f       	andi	r24, 0xFE	; 254
     44e:	87 8b       	std	Z+23, r24	; 0x17
     450:	28 2d       	mov	r18, r8
     452:	39 2d       	mov	r19, r9
     454:	4a 2d       	mov	r20, r10
     456:	5b 2d       	mov	r21, r11
     458:	66 2d       	mov	r22, r6
     45a:	77 2d       	mov	r23, r7
     45c:	80 91 71 19 	lds	r24, 0x1971	; 0x801971 <xTimerQueue>
     460:	90 91 72 19 	lds	r25, 0x1972	; 0x801972 <xTimerQueue+0x1>
     464:	0e 94 6e 10 	call	0x20dc	; 0x20dc <xQueueReceive>
     468:	81 11       	cpse	r24, r1
     46a:	6b cf       	rjmp	.-298    	; 0x342 <prvTimerTask+0x134>
     46c:	e4 ce       	rjmp	.-568    	; 0x236 <prvTimerTask+0x28>
     46e:	0e 94 cd 16 	call	0x2d9a	; 0x2d9a <vTaskSuspendAll>
     472:	ce 01       	movw	r24, r28
     474:	01 96       	adiw	r24, 0x01	; 1
     476:	0e 94 f2 1d 	call	0x3be4	; 0x3be4 <prvSampleTimeNow>
     47a:	6b 87       	std	Y+11, r22	; 0x0b
     47c:	7c 87       	std	Y+12, r23	; 0x0c
     47e:	8d 87       	std	Y+13, r24	; 0x0d
     480:	9e 87       	std	Y+14, r25	; 0x0e
     482:	89 81       	ldd	r24, Y+1	; 0x01
     484:	81 11       	cpse	r24, r1
     486:	5a cf       	rjmp	.-332    	; 0x33c <prvTimerTask+0x12e>
     488:	e0 91 73 19 	lds	r30, 0x1973	; 0x801973 <pxOverflowTimerList>
     48c:	f0 91 74 19 	lds	r31, 0x1974	; 0x801974 <pxOverflowTimerList+0x1>
     490:	80 81       	ld	r24, Z
     492:	21 e0       	ldi	r18, 0x01	; 1
     494:	81 11       	cpse	r24, r1
     496:	20 e0       	ldi	r18, 0x00	; 0
     498:	28 2c       	mov	r2, r8
     49a:	39 2c       	mov	r3, r9
     49c:	4a 2c       	mov	r4, r10
     49e:	5b 2c       	mov	r5, r11
     4a0:	36 cf       	rjmp	.-404    	; 0x30e <prvTimerTask+0x100>

000004a2 <__ctors_end>:
     4a2:	11 24       	eor	r1, r1
     4a4:	1f be       	out	0x3f, r1	; 63
     4a6:	cf ef       	ldi	r28, 0xFF	; 255
     4a8:	d1 e2       	ldi	r29, 0x21	; 33
     4aa:	de bf       	out	0x3e, r29	; 62
     4ac:	cd bf       	out	0x3d, r28	; 61
     4ae:	00 e0       	ldi	r16, 0x00	; 0
     4b0:	0c bf       	out	0x3c, r16	; 60

000004b2 <__do_copy_data>:
     4b2:	18 e0       	ldi	r17, 0x08	; 8
     4b4:	a0 e0       	ldi	r26, 0x00	; 0
     4b6:	b2 e0       	ldi	r27, 0x02	; 2
     4b8:	e8 ec       	ldi	r30, 0xC8	; 200
     4ba:	f9 e6       	ldi	r31, 0x69	; 105
     4bc:	00 e0       	ldi	r16, 0x00	; 0
     4be:	0b bf       	out	0x3b, r16	; 59
     4c0:	02 c0       	rjmp	.+4      	; 0x4c6 <__do_copy_data+0x14>
     4c2:	07 90       	elpm	r0, Z+
     4c4:	0d 92       	st	X+, r0
     4c6:	a6 36       	cpi	r26, 0x66	; 102
     4c8:	b1 07       	cpc	r27, r17
     4ca:	d9 f7       	brne	.-10     	; 0x4c2 <__do_copy_data+0x10>

000004cc <__do_clear_bss>:
     4cc:	2b e1       	ldi	r18, 0x1B	; 27
     4ce:	a6 e6       	ldi	r26, 0x66	; 102
     4d0:	b8 e0       	ldi	r27, 0x08	; 8
     4d2:	01 c0       	rjmp	.+2      	; 0x4d6 <.do_clear_bss_start>

000004d4 <.do_clear_bss_loop>:
     4d4:	1d 92       	st	X+, r1

000004d6 <.do_clear_bss_start>:
     4d6:	ad 32       	cpi	r26, 0x2D	; 45
     4d8:	b2 07       	cpc	r27, r18
     4da:	e1 f7       	brne	.-8      	; 0x4d4 <.do_clear_bss_loop>
     4dc:	0e 94 76 1f 	call	0x3eec	; 0x3eec <main>
     4e0:	0c 94 e2 34 	jmp	0x69c4	; 0x69c4 <_exit>

000004e4 <__bad_interrupt>:
     4e4:	8d cd       	rjmp	.-1254   	; 0x0 <__vectors>

000004e6 <time>:
     4e6:	fc 01       	movw	r30, r24
     4e8:	0f b6       	in	r0, 0x3f	; 63
     4ea:	f8 94       	cli
     4ec:	60 91 29 1b 	lds	r22, 0x1B29	; 0x801b29 <__system_time>
     4f0:	70 91 2a 1b 	lds	r23, 0x1B2A	; 0x801b2a <__system_time+0x1>
     4f4:	80 91 2b 1b 	lds	r24, 0x1B2B	; 0x801b2b <__system_time+0x2>
     4f8:	90 91 2c 1b 	lds	r25, 0x1B2C	; 0x801b2c <__system_time+0x3>
     4fc:	0f be       	out	0x3f, r0	; 63
     4fe:	30 97       	sbiw	r30, 0x00	; 0
     500:	21 f0       	breq	.+8      	; 0x50a <time+0x24>
     502:	60 83       	st	Z, r22
     504:	71 83       	std	Z+1, r23	; 0x01
     506:	82 83       	std	Z+2, r24	; 0x02
     508:	93 83       	std	Z+3, r25	; 0x03
     50a:	08 95       	ret

0000050c <my_co2_call_back>:
		return;

	//delete will clear the allocated memory to the task + we need to remove everything else
	vTaskDelete(self->handleTask);
	vPortFree(self);
}
     50c:	08 95       	ret

0000050e <co2Reader_create>:
     50e:	2f 92       	push	r2
     510:	3f 92       	push	r3
     512:	4f 92       	push	r4
     514:	5f 92       	push	r5
     516:	6f 92       	push	r6
     518:	7f 92       	push	r7
     51a:	8f 92       	push	r8
     51c:	9f 92       	push	r9
     51e:	af 92       	push	r10
     520:	bf 92       	push	r11
     522:	cf 92       	push	r12
     524:	df 92       	push	r13
     526:	ef 92       	push	r14
     528:	ff 92       	push	r15
     52a:	0f 93       	push	r16
     52c:	1f 93       	push	r17
     52e:	cf 93       	push	r28
     530:	df 93       	push	r29
     532:	88 2e       	mov	r8, r24
     534:	96 2e       	mov	r9, r22
     536:	1a 01       	movw	r2, r20
     538:	28 01       	movw	r4, r16
     53a:	39 01       	movw	r6, r18
     53c:	87 01       	movw	r16, r14
     53e:	64 e0       	ldi	r22, 0x04	; 4
     540:	70 e0       	ldi	r23, 0x00	; 0
     542:	81 e0       	ldi	r24, 0x01	; 1
     544:	90 e0       	ldi	r25, 0x00	; 0
     546:	0e 94 96 2f 	call	0x5f2c	; 0x5f2c <calloc>
     54a:	ec 01       	movw	r28, r24
     54c:	00 97       	sbiw	r24, 0x00	; 0
     54e:	79 f1       	breq	.+94     	; 0x5ae <co2Reader_create+0xa0>
     550:	fc 01       	movw	r30, r24
     552:	11 92       	st	Z+, r1
     554:	11 92       	st	Z+, r1
     556:	7f 01       	movw	r14, r30
     558:	30 92 71 08 	sts	0x0871, r3	; 0x800871 <_startMeasureEventGroup+0x1>
     55c:	20 92 70 08 	sts	0x0870, r2	; 0x800870 <_startMeasureEventGroup>
     560:	40 92 6c 08 	sts	0x086C, r4	; 0x80086c <_startMeasureBit>
     564:	50 92 6d 08 	sts	0x086D, r5	; 0x80086d <_startMeasureBit+0x1>
     568:	60 92 6e 08 	sts	0x086E, r6	; 0x80086e <_startMeasureBit+0x2>
     56c:	70 92 6f 08 	sts	0x086F, r7	; 0x80086f <_startMeasureBit+0x3>
     570:	10 93 6b 08 	sts	0x086B, r17	; 0x80086b <_readyEventGroup+0x1>
     574:	00 93 6a 08 	sts	0x086A, r16	; 0x80086a <_readyEventGroup>
     578:	a0 92 66 08 	sts	0x0866, r10	; 0x800866 <__data_end>
     57c:	b0 92 67 08 	sts	0x0867, r11	; 0x800867 <__data_end+0x1>
     580:	c0 92 68 08 	sts	0x0868, r12	; 0x800868 <__data_end+0x2>
     584:	d0 92 69 08 	sts	0x0869, r13	; 0x800869 <__data_end+0x3>
     588:	66 e8       	ldi	r22, 0x86	; 134
     58a:	72 e0       	ldi	r23, 0x02	; 2
     58c:	83 e0       	ldi	r24, 0x03	; 3
     58e:	0e 94 34 27 	call	0x4e68	; 0x4e68 <mh_z19_create>
     592:	49 2d       	mov	r20, r9
     594:	50 e0       	ldi	r21, 0x00	; 0
     596:	08 2d       	mov	r16, r8
     598:	9e 01       	movw	r18, r28
     59a:	62 e7       	ldi	r22, 0x72	; 114
     59c:	72 e0       	ldi	r23, 0x02	; 2
     59e:	82 e4       	ldi	r24, 0x42	; 66
     5a0:	93 e0       	ldi	r25, 0x03	; 3
     5a2:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <xTaskCreate>
     5a6:	8c e7       	ldi	r24, 0x7C	; 124
     5a8:	92 e0       	ldi	r25, 0x02	; 2
     5aa:	0e 94 9c 31 	call	0x6338	; 0x6338 <puts>
     5ae:	ce 01       	movw	r24, r28
     5b0:	df 91       	pop	r29
     5b2:	cf 91       	pop	r28
     5b4:	1f 91       	pop	r17
     5b6:	0f 91       	pop	r16
     5b8:	ff 90       	pop	r15
     5ba:	ef 90       	pop	r14
     5bc:	df 90       	pop	r13
     5be:	cf 90       	pop	r12
     5c0:	bf 90       	pop	r11
     5c2:	af 90       	pop	r10
     5c4:	9f 90       	pop	r9
     5c6:	8f 90       	pop	r8
     5c8:	7f 90       	pop	r7
     5ca:	6f 90       	pop	r6
     5cc:	5f 90       	pop	r5
     5ce:	4f 90       	pop	r4
     5d0:	3f 90       	pop	r3
     5d2:	2f 90       	pop	r2
     5d4:	08 95       	ret

000005d6 <co2Reader_measure>:

//actual task, methods devided so that it is possible to test


void co2Reader_measure(co2reader_t self) {
     5d6:	cf 92       	push	r12
     5d8:	df 92       	push	r13
     5da:	ef 92       	push	r14
     5dc:	ff 92       	push	r15
     5de:	0f 93       	push	r16
     5e0:	1f 93       	push	r17
     5e2:	cf 93       	push	r28
     5e4:	df 93       	push	r29
     5e6:	ec 01       	movw	r28, r24
	
	EventBits_t uxBits = xEventGroupWaitBits(_startMeasureEventGroup, //eventGroup
     5e8:	40 91 6c 08 	lds	r20, 0x086C	; 0x80086c <_startMeasureBit>
     5ec:	50 91 6d 08 	lds	r21, 0x086D	; 0x80086d <_startMeasureBit+0x1>
     5f0:	60 91 6e 08 	lds	r22, 0x086E	; 0x80086e <_startMeasureBit+0x2>
     5f4:	70 91 6f 08 	lds	r23, 0x086F	; 0x80086f <_startMeasureBit+0x3>
     5f8:	cc 24       	eor	r12, r12
     5fa:	ca 94       	dec	r12
     5fc:	dc 2c       	mov	r13, r12
     5fe:	76 01       	movw	r14, r12
     600:	01 e0       	ldi	r16, 0x01	; 1
     602:	21 e0       	ldi	r18, 0x01	; 1
     604:	80 91 70 08 	lds	r24, 0x0870	; 0x800870 <_startMeasureEventGroup>
     608:	90 91 71 08 	lds	r25, 0x0871	; 0x800871 <_startMeasureEventGroup+0x1>
     60c:	91 d6       	rcall	.+3362   	; 0x1330 <xEventGroupWaitBits>
	_startMeasureBit, //bits it is interested in
	pdTRUE, //clears the bits
	pdTRUE, //waits for both bits to be set
	portMAX_DELAY); //wait

	if ((uxBits & (_startMeasureBit)) == (_startMeasureBit)) {
     60e:	00 91 6c 08 	lds	r16, 0x086C	; 0x80086c <_startMeasureBit>
     612:	10 91 6d 08 	lds	r17, 0x086D	; 0x80086d <_startMeasureBit+0x1>
     616:	20 91 6e 08 	lds	r18, 0x086E	; 0x80086e <_startMeasureBit+0x2>
     61a:	30 91 6f 08 	lds	r19, 0x086F	; 0x80086f <_startMeasureBit+0x3>
     61e:	dc 01       	movw	r26, r24
     620:	cb 01       	movw	r24, r22
     622:	80 23       	and	r24, r16
     624:	91 23       	and	r25, r17
     626:	a2 23       	and	r26, r18
     628:	b3 23       	and	r27, r19
     62a:	08 17       	cp	r16, r24
     62c:	19 07       	cpc	r17, r25
     62e:	2a 07       	cpc	r18, r26
     630:	3b 07       	cpc	r19, r27
     632:	f9 f4       	brne	.+62     	; 0x672 <co2Reader_measure+0x9c>

		
		mh_z19_return_code_t return_code_co2_measurement = mh_z19_take_meassuring();
     634:	0e 94 62 27 	call	0x4ec4	; 0x4ec4 <mh_z19_take_meassuring>
     638:	18 2f       	mov	r17, r24
		vTaskDelay(500);
     63a:	64 ef       	ldi	r22, 0xF4	; 244
     63c:	71 e0       	ldi	r23, 0x01	; 1
     63e:	80 e0       	ldi	r24, 0x00	; 0
     640:	90 e0       	ldi	r25, 0x00	; 0
     642:	0e 94 32 18 	call	0x3064	; 0x3064 <vTaskDelay>

		if(return_code_co2_measurement == MHZ19_OK) {
     646:	11 11       	cpse	r17, r1
     648:	03 c0       	rjmp	.+6      	; 0x650 <co2Reader_measure+0x7a>
			mh_z19_get_co2_ppm(&self->value);
     64a:	ce 01       	movw	r24, r28
     64c:	0e 94 91 27 	call	0x4f22	; 0x4f22 <mh_z19_get_co2_ppm>
			//safeprintln_int("[<] CO2: ", self->data);
		}
		//set done bit so that device knows measurement is done
		xEventGroupSetBits(_readyEventGroup, _readyBit);
     650:	40 91 66 08 	lds	r20, 0x0866	; 0x800866 <__data_end>
     654:	50 91 67 08 	lds	r21, 0x0867	; 0x800867 <__data_end+0x1>
     658:	60 91 68 08 	lds	r22, 0x0868	; 0x800868 <__data_end+0x2>
     65c:	70 91 69 08 	lds	r23, 0x0869	; 0x800869 <__data_end+0x3>
     660:	80 91 6a 08 	lds	r24, 0x086A	; 0x80086a <_readyEventGroup>
     664:	90 91 6b 08 	lds	r25, 0x086B	; 0x80086b <_readyEventGroup+0x1>
     668:	23 d7       	rcall	.+3654   	; 0x14b0 <xEventGroupSetBits>
		printf("co2 done bit set\n");
     66a:	83 e8       	ldi	r24, 0x83	; 131
     66c:	92 e0       	ldi	r25, 0x02	; 2
     66e:	0e 94 9c 31 	call	0x6338	; 0x6338 <puts>
	}
}
     672:	df 91       	pop	r29
     674:	cf 91       	pop	r28
     676:	1f 91       	pop	r17
     678:	0f 91       	pop	r16
     67a:	ff 90       	pop	r15
     67c:	ef 90       	pop	r14
     67e:	df 90       	pop	r13
     680:	cf 90       	pop	r12
     682:	08 95       	ret

00000684 <co2Reader_executeTask>:
typedef struct co2reader {
	uint16_t value;
	TaskHandle_t handleTask;
}co2reader;

void co2Reader_executeTask(void* self) {
     684:	ec 01       	movw	r28, r24
	for (;;) {
		co2Reader_measure((co2reader_t)self);
     686:	ce 01       	movw	r24, r28
     688:	a6 df       	rcall	.-180    	; 0x5d6 <co2Reader_measure>
     68a:	fd cf       	rjmp	.-6      	; 0x686 <co2Reader_executeTask+0x2>

0000068c <co2Reader_getCO2>:
	}
}

uint16_t co2Reader_getCO2(co2reader_t self) {
	return self->value;
}
     68c:	fc 01       	movw	r30, r24
     68e:	80 81       	ld	r24, Z
     690:	91 81       	ldd	r25, Z+1	; 0x01
     692:	08 95       	ret

00000694 <configuration_create>:
//it is created only once, before starting the scheduler + will never be destroyed
	_working = calloc(1, sizeof(bool));
	_ventilation = calloc(1, sizeof(bool));

	//by default, device should work, not to ventilate
	_working = true;
     694:	21 e0       	ldi	r18, 0x01	; 1
     696:	20 93 75 08 	sts	0x0875, r18	; 0x800875 <_working>
	_ventilation = false;
     69a:	10 92 74 08 	sts	0x0874, r1	; 0x800874 <_ventilation>

	_semaphore = semaphore;
     69e:	90 93 73 08 	sts	0x0873, r25	; 0x800873 <_semaphore+0x1>
     6a2:	80 93 72 08 	sts	0x0872, r24	; 0x800872 <_semaphore>
     6a6:	08 95       	ret

000006a8 <configuration_setWorking>:
}

//if the semaphore is initialized, take it and give it back, if not, just do the work 
void configuration_setWorking(bool value) {
     6a8:	0f 93       	push	r16
     6aa:	cf 93       	push	r28
	if (_semaphore != NULL) {
     6ac:	20 91 72 08 	lds	r18, 0x0872	; 0x800872 <_semaphore>
     6b0:	30 91 73 08 	lds	r19, 0x0873	; 0x800873 <_semaphore+0x1>
     6b4:	21 15       	cp	r18, r1
     6b6:	31 05       	cpc	r19, r1
     6b8:	b1 f0       	breq	.+44     	; 0x6e6 <configuration_setWorking+0x3e>
     6ba:	c8 2f       	mov	r28, r24
		xSemaphoreTake(_semaphore, portMAX_DELAY);
     6bc:	4f ef       	ldi	r20, 0xFF	; 255
     6be:	5f ef       	ldi	r21, 0xFF	; 255
     6c0:	ba 01       	movw	r22, r20
     6c2:	c9 01       	movw	r24, r18
     6c4:	0e 94 06 11 	call	0x220c	; 0x220c <xQueueSemaphoreTake>
		_working = value;
     6c8:	c0 93 75 08 	sts	0x0875, r28	; 0x800875 <_working>
		xSemaphoreGive(_semaphore);
     6cc:	00 e0       	ldi	r16, 0x00	; 0
     6ce:	20 e0       	ldi	r18, 0x00	; 0
     6d0:	30 e0       	ldi	r19, 0x00	; 0
     6d2:	a9 01       	movw	r20, r18
     6d4:	60 e0       	ldi	r22, 0x00	; 0
     6d6:	70 e0       	ldi	r23, 0x00	; 0
     6d8:	80 91 72 08 	lds	r24, 0x0872	; 0x800872 <_semaphore>
     6dc:	90 91 73 08 	lds	r25, 0x0873	; 0x800873 <_semaphore+0x1>
     6e0:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <xQueueGenericSend>
     6e4:	02 c0       	rjmp	.+4      	; 0x6ea <configuration_setWorking+0x42>
	}
	else _working = value;
     6e6:	80 93 75 08 	sts	0x0875, r24	; 0x800875 <_working>
}
     6ea:	cf 91       	pop	r28
     6ec:	0f 91       	pop	r16
     6ee:	08 95       	ret

000006f0 <configuration_getWorking>:

void configuration_getWorking(bool* working) {
     6f0:	0f 93       	push	r16
     6f2:	cf 93       	push	r28
     6f4:	df 93       	push	r29
	if (_semaphore != NULL) {
     6f6:	20 91 72 08 	lds	r18, 0x0872	; 0x800872 <_semaphore>
     6fa:	30 91 73 08 	lds	r19, 0x0873	; 0x800873 <_semaphore+0x1>
     6fe:	21 15       	cp	r18, r1
     700:	31 05       	cpc	r19, r1
     702:	b9 f0       	breq	.+46     	; 0x732 <configuration_getWorking+0x42>
     704:	ec 01       	movw	r28, r24
		xSemaphoreTake(_semaphore, portMAX_DELAY);
     706:	4f ef       	ldi	r20, 0xFF	; 255
     708:	5f ef       	ldi	r21, 0xFF	; 255
     70a:	ba 01       	movw	r22, r20
     70c:	c9 01       	movw	r24, r18
     70e:	0e 94 06 11 	call	0x220c	; 0x220c <xQueueSemaphoreTake>
		*working = _working;
     712:	80 91 75 08 	lds	r24, 0x0875	; 0x800875 <_working>
     716:	88 83       	st	Y, r24
		xSemaphoreGive(_semaphore);
     718:	00 e0       	ldi	r16, 0x00	; 0
     71a:	20 e0       	ldi	r18, 0x00	; 0
     71c:	30 e0       	ldi	r19, 0x00	; 0
     71e:	a9 01       	movw	r20, r18
     720:	60 e0       	ldi	r22, 0x00	; 0
     722:	70 e0       	ldi	r23, 0x00	; 0
     724:	80 91 72 08 	lds	r24, 0x0872	; 0x800872 <_semaphore>
     728:	90 91 73 08 	lds	r25, 0x0873	; 0x800873 <_semaphore+0x1>
     72c:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <xQueueGenericSend>
     730:	04 c0       	rjmp	.+8      	; 0x73a <configuration_getWorking+0x4a>
	}
	else *working = _working;
     732:	20 91 75 08 	lds	r18, 0x0875	; 0x800875 <_working>
     736:	fc 01       	movw	r30, r24
     738:	20 83       	st	Z, r18
}
     73a:	df 91       	pop	r29
     73c:	cf 91       	pop	r28
     73e:	0f 91       	pop	r16
     740:	08 95       	ret

00000742 <configuration_setVentilation>:

void configuration_setVentilation(bool value) {
     742:	0f 93       	push	r16
     744:	cf 93       	push	r28
	if (_semaphore != NULL) {
     746:	20 91 72 08 	lds	r18, 0x0872	; 0x800872 <_semaphore>
     74a:	30 91 73 08 	lds	r19, 0x0873	; 0x800873 <_semaphore+0x1>
     74e:	21 15       	cp	r18, r1
     750:	31 05       	cpc	r19, r1
     752:	b1 f0       	breq	.+44     	; 0x780 <configuration_setVentilation+0x3e>
     754:	c8 2f       	mov	r28, r24
		xSemaphoreTake(_semaphore, portMAX_DELAY);
     756:	4f ef       	ldi	r20, 0xFF	; 255
     758:	5f ef       	ldi	r21, 0xFF	; 255
     75a:	ba 01       	movw	r22, r20
     75c:	c9 01       	movw	r24, r18
     75e:	0e 94 06 11 	call	0x220c	; 0x220c <xQueueSemaphoreTake>
		_ventilation = value;
     762:	c0 93 74 08 	sts	0x0874, r28	; 0x800874 <_ventilation>
		xSemaphoreGive(_semaphore);
     766:	00 e0       	ldi	r16, 0x00	; 0
     768:	20 e0       	ldi	r18, 0x00	; 0
     76a:	30 e0       	ldi	r19, 0x00	; 0
     76c:	a9 01       	movw	r20, r18
     76e:	60 e0       	ldi	r22, 0x00	; 0
     770:	70 e0       	ldi	r23, 0x00	; 0
     772:	80 91 72 08 	lds	r24, 0x0872	; 0x800872 <_semaphore>
     776:	90 91 73 08 	lds	r25, 0x0873	; 0x800873 <_semaphore+0x1>
     77a:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <xQueueGenericSend>
     77e:	02 c0       	rjmp	.+4      	; 0x784 <configuration_setVentilation+0x42>
	}
	else _ventilation = value;
     780:	80 93 74 08 	sts	0x0874, r24	; 0x800874 <_ventilation>
}
     784:	cf 91       	pop	r28
     786:	0f 91       	pop	r16
     788:	08 95       	ret

0000078a <configuration_getVentilation>:

void configuration_getVentilation(bool* ventilation) {
     78a:	0f 93       	push	r16
     78c:	cf 93       	push	r28
     78e:	df 93       	push	r29
	if (_semaphore != NULL) {
     790:	20 91 72 08 	lds	r18, 0x0872	; 0x800872 <_semaphore>
     794:	30 91 73 08 	lds	r19, 0x0873	; 0x800873 <_semaphore+0x1>
     798:	21 15       	cp	r18, r1
     79a:	31 05       	cpc	r19, r1
     79c:	b9 f0       	breq	.+46     	; 0x7cc <configuration_getVentilation+0x42>
     79e:	ec 01       	movw	r28, r24
		xSemaphoreTake(_semaphore, portMAX_DELAY);
     7a0:	4f ef       	ldi	r20, 0xFF	; 255
     7a2:	5f ef       	ldi	r21, 0xFF	; 255
     7a4:	ba 01       	movw	r22, r20
     7a6:	c9 01       	movw	r24, r18
     7a8:	0e 94 06 11 	call	0x220c	; 0x220c <xQueueSemaphoreTake>
		*ventilation = _ventilation;
     7ac:	80 91 74 08 	lds	r24, 0x0874	; 0x800874 <_ventilation>
     7b0:	88 83       	st	Y, r24
		xSemaphoreGive(_semaphore);
     7b2:	00 e0       	ldi	r16, 0x00	; 0
     7b4:	20 e0       	ldi	r18, 0x00	; 0
     7b6:	30 e0       	ldi	r19, 0x00	; 0
     7b8:	a9 01       	movw	r20, r18
     7ba:	60 e0       	ldi	r22, 0x00	; 0
     7bc:	70 e0       	ldi	r23, 0x00	; 0
     7be:	80 91 72 08 	lds	r24, 0x0872	; 0x800872 <_semaphore>
     7c2:	90 91 73 08 	lds	r25, 0x0873	; 0x800873 <_semaphore+0x1>
     7c6:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <xQueueGenericSend>
     7ca:	04 c0       	rjmp	.+8      	; 0x7d4 <configuration_getVentilation+0x4a>
	}
	else *ventilation = _ventilation;
     7cc:	20 91 74 08 	lds	r18, 0x0874	; 0x800874 <_ventilation>
     7d0:	fc 01       	movw	r30, r24
     7d2:	20 83       	st	Z, r18
     7d4:	df 91       	pop	r29
     7d6:	cf 91       	pop	r28
     7d8:	0f 91       	pop	r16
     7da:	08 95       	ret

000007dc <currentCondition_create>:
	}
	
}

void currentCondition_destroy(currentCondition_t self) {
	vPortFree(self);
     7dc:	68 e0       	ldi	r22, 0x08	; 8
     7de:	70 e0       	ldi	r23, 0x00	; 0
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	90 e0       	ldi	r25, 0x00	; 0
     7e4:	0e 94 96 2f 	call	0x5f2c	; 0x5f2c <calloc>
     7e8:	00 97       	sbiw	r24, 0x00	; 0
     7ea:	49 f0       	breq	.+18     	; 0x7fe <currentCondition_create+0x22>
     7ec:	fc 01       	movw	r30, r24
     7ee:	13 82       	std	Z+3, r1	; 0x03
     7f0:	12 82       	std	Z+2, r1	; 0x02
     7f2:	15 82       	std	Z+5, r1	; 0x05
     7f4:	14 82       	std	Z+4, r1	; 0x04
     7f6:	11 82       	std	Z+1, r1	; 0x01
     7f8:	10 82       	st	Z, r1
     7fa:	17 82       	std	Z+7, r1	; 0x07
     7fc:	16 82       	std	Z+6, r1	; 0x06
     7fe:	08 95       	ret

00000800 <currentCondition_setCO2>:
     800:	00 97       	sbiw	r24, 0x00	; 0
     802:	49 f0       	breq	.+18     	; 0x816 <currentCondition_setCO2+0x16>
     804:	9b 01       	movw	r18, r22
     806:	28 5c       	subi	r18, 0xC8	; 200
     808:	31 09       	sbc	r19, r1
     80a:	29 34       	cpi	r18, 0x49	; 73
     80c:	36 42       	sbci	r19, 0x26	; 38
     80e:	18 f4       	brcc	.+6      	; 0x816 <currentCondition_setCO2+0x16>
     810:	fc 01       	movw	r30, r24
     812:	71 83       	std	Z+1, r23	; 0x01
     814:	60 83       	st	Z, r22
     816:	08 95       	ret

00000818 <currentCondition_setHumidity>:
     818:	00 97       	sbiw	r24, 0x00	; 0
     81a:	39 f0       	breq	.+14     	; 0x82a <currentCondition_setHumidity+0x12>
     81c:	69 3e       	cpi	r22, 0xE9	; 233
     81e:	23 e0       	ldi	r18, 0x03	; 3
     820:	72 07       	cpc	r23, r18
     822:	18 f4       	brcc	.+6      	; 0x82a <currentCondition_setHumidity+0x12>
     824:	fc 01       	movw	r30, r24
     826:	75 83       	std	Z+5, r23	; 0x05
     828:	64 83       	std	Z+4, r22	; 0x04
     82a:	08 95       	ret

0000082c <currentCondition_setTemperature>:
     82c:	00 97       	sbiw	r24, 0x00	; 0
     82e:	49 f0       	breq	.+18     	; 0x842 <currentCondition_setTemperature+0x16>
     830:	9b 01       	movw	r18, r22
     832:	20 57       	subi	r18, 0x70	; 112
     834:	3e 4f       	sbci	r19, 0xFE	; 254
     836:	27 3b       	cpi	r18, 0xB7	; 183
     838:	33 40       	sbci	r19, 0x03	; 3
     83a:	18 f4       	brcc	.+6      	; 0x842 <currentCondition_setTemperature+0x16>
     83c:	fc 01       	movw	r30, r24
     83e:	73 83       	std	Z+3, r23	; 0x03
     840:	62 83       	std	Z+2, r22	; 0x02
     842:	08 95       	ret

00000844 <currentCondition_setSound>:
     844:	00 97       	sbiw	r24, 0x00	; 0
     846:	31 f0       	breq	.+12     	; 0x854 <currentCondition_setSound+0x10>
     848:	67 39       	cpi	r22, 0x97	; 151
     84a:	71 05       	cpc	r23, r1
     84c:	18 f4       	brcc	.+6      	; 0x854 <currentCondition_setSound+0x10>
     84e:	fc 01       	movw	r30, r24
     850:	77 83       	std	Z+7, r23	; 0x07
     852:	66 83       	std	Z+6, r22	; 0x06
     854:	08 95       	ret

00000856 <getcurrentConditionPayload>:
}
lora_payload_t getcurrentConditionPayload(currentCondition_t self)
{
     856:	fc 01       	movw	r30, r24
     858:	db 01       	movw	r26, r22
	lora_payload_t payload;
	payload.port_no = 1;
	payload.len = 8;
	
	int16_t tempData = self->temperatureData;
     85a:	12 96       	adiw	r26, 0x02	; 2
     85c:	6c 91       	ld	r22, X
     85e:	12 97       	sbiw	r26, 0x02	; 2
     860:	13 96       	adiw	r26, 0x03	; 3
     862:	7c 91       	ld	r23, X
     864:	13 97       	sbiw	r26, 0x03	; 3
	
	payload.bytes[0] = tempData >> 8;
	payload.bytes[1] = tempData & 0xFF;

	payload.bytes[2] = self->humidityData >> 8;
     866:	14 96       	adiw	r26, 0x04	; 4
     868:	4c 91       	ld	r20, X
     86a:	14 97       	sbiw	r26, 0x04	; 4
     86c:	15 96       	adiw	r26, 0x05	; 5
     86e:	5c 91       	ld	r21, X
     870:	15 97       	sbiw	r26, 0x05	; 5
	payload.bytes[3] = self->humidityData & 0xFF;
	
	payload.bytes[4] = self->co2Data >> 8;
     872:	2c 91       	ld	r18, X
     874:	11 96       	adiw	r26, 0x01	; 1
     876:	3c 91       	ld	r19, X
     878:	11 97       	sbiw	r26, 0x01	; 1
	payload.bytes[5] = self->co2Data & 0xFF;
	
	payload.bytes[6] = self->soundData >> 8;
     87a:	16 96       	adiw	r26, 0x06	; 6
     87c:	8c 91       	ld	r24, X
     87e:	16 97       	sbiw	r26, 0x06	; 6
     880:	17 96       	adiw	r26, 0x07	; 7
     882:	9c 91       	ld	r25, X
	payload.bytes[7] = self->soundData & 0xFF;
	
	return payload;
     884:	a1 e0       	ldi	r26, 0x01	; 1
     886:	a0 83       	st	Z, r26
     888:	a8 e0       	ldi	r26, 0x08	; 8
     88a:	a1 83       	std	Z+1, r26	; 0x01
     88c:	72 83       	std	Z+2, r23	; 0x02
     88e:	63 83       	std	Z+3, r22	; 0x03
     890:	54 83       	std	Z+4, r21	; 0x04
     892:	45 83       	std	Z+5, r20	; 0x05
     894:	36 83       	std	Z+6, r19	; 0x06
     896:	27 83       	std	Z+7, r18	; 0x07
     898:	90 87       	std	Z+8, r25	; 0x08
     89a:	81 87       	std	Z+9, r24	; 0x09
	
}
     89c:	cf 01       	movw	r24, r30
     89e:	08 95       	ret

000008a0 <getSimplePayload>:
	
	uint16_t one = 0;
	payload.bytes[0] = one >> 8;
	payload.bytes[1] = one & 0xFF;
	
	return payload;
     8a0:	21 e0       	ldi	r18, 0x01	; 1
     8a2:	fc 01       	movw	r30, r24
     8a4:	20 83       	st	Z, r18
     8a6:	22 e0       	ldi	r18, 0x02	; 2
     8a8:	21 83       	std	Z+1, r18	; 0x01
     8aa:	12 82       	std	Z+2, r1	; 0x02
     8ac:	13 82       	std	Z+3, r1	; 0x03
     8ae:	08 95       	ret

000008b0 <device_create>:
		//vTaskDelay(5000);
	}
}

device_t device_create(UBaseType_t priority, UBaseType_t stack, EventGroupHandle_t startMeasureEventGroup, EventBits_t startMeasureBit,
EventGroupHandle_t readyEventGroup, EventBits_t readyBit, co2reader_t co2Reader, humAndTempReader_t humAndTempReader,soundReader_t soundReader, MessageBufferHandle_t uplinkMessageBuffer){
     8b0:	2f 92       	push	r2
     8b2:	3f 92       	push	r3
     8b4:	4f 92       	push	r4
     8b6:	5f 92       	push	r5
     8b8:	6f 92       	push	r6
     8ba:	7f 92       	push	r7
     8bc:	8f 92       	push	r8
     8be:	9f 92       	push	r9
     8c0:	af 92       	push	r10
     8c2:	bf 92       	push	r11
     8c4:	cf 92       	push	r12
     8c6:	df 92       	push	r13
     8c8:	ef 92       	push	r14
     8ca:	ff 92       	push	r15
     8cc:	0f 93       	push	r16
     8ce:	1f 93       	push	r17
     8d0:	cf 93       	push	r28
     8d2:	df 93       	push	r29
     8d4:	00 d0       	rcall	.+0      	; 0x8d6 <device_create+0x26>
     8d6:	1f 92       	push	r1
     8d8:	cd b7       	in	r28, 0x3d	; 61
     8da:	de b7       	in	r29, 0x3e	; 62
     8dc:	28 2e       	mov	r2, r24
     8de:	36 2e       	mov	r3, r22
     8e0:	5c 83       	std	Y+4, r21	; 0x04
     8e2:	4b 83       	std	Y+3, r20	; 0x03
     8e4:	28 01       	movw	r4, r16
     8e6:	39 01       	movw	r6, r18

	device_t _new_device = calloc(1, sizeof(device));
     8e8:	6a e0       	ldi	r22, 0x0A	; 10
     8ea:	70 e0       	ldi	r23, 0x00	; 0
     8ec:	81 e0       	ldi	r24, 0x01	; 1
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	0e 94 96 2f 	call	0x5f2c	; 0x5f2c <calloc>
     8f4:	9a 83       	std	Y+2, r25	; 0x02
     8f6:	89 83       	std	Y+1, r24	; 0x01
	if (_new_device == NULL)
     8f8:	00 97       	sbiw	r24, 0x00	; 0
     8fa:	09 f4       	brne	.+2      	; 0x8fe <device_create+0x4e>
     8fc:	42 c0       	rjmp	.+132    	; 0x982 <device_create+0xd2>
		return NULL;

	_new_device->co2reader = co2Reader;
     8fe:	fc 01       	movw	r30, r24
     900:	91 82       	std	Z+1, r9	; 0x01
     902:	80 82       	st	Z, r8
	_new_device->humAndTempReader = humAndTempReader;
     904:	8a 8d       	ldd	r24, Y+26	; 0x1a
     906:	9b 8d       	ldd	r25, Y+27	; 0x1b
     908:	93 83       	std	Z+3, r25	; 0x03
     90a:	82 83       	std	Z+2, r24	; 0x02
	_new_device->soundReader=soundReader;
     90c:	8c 8d       	ldd	r24, Y+28	; 0x1c
     90e:	9d 8d       	ldd	r25, Y+29	; 0x1d
     910:	95 83       	std	Z+5, r25	; 0x05
     912:	84 83       	std	Z+4, r24	; 0x04
	currentCondition_t currentCond = currentCondition_create();
     914:	63 df       	rcall	.-314    	; 0x7dc <currentCondition_create>
	_new_device->currentCondition = currentCond;
     916:	e9 81       	ldd	r30, Y+1	; 0x01
     918:	fa 81       	ldd	r31, Y+2	; 0x02
     91a:	97 83       	std	Z+7, r25	; 0x07
     91c:	86 83       	std	Z+6, r24	; 0x06

	_startMeasureEventGroup = startMeasureEventGroup;
     91e:	8b 81       	ldd	r24, Y+3	; 0x03
     920:	9c 81       	ldd	r25, Y+4	; 0x04
     922:	90 93 99 08 	sts	0x0899, r25	; 0x800899 <_startMeasureEventGroup+0x1>
     926:	80 93 98 08 	sts	0x0898, r24	; 0x800898 <_startMeasureEventGroup>
	_startMeasureBit = startMeasureBit;
     92a:	40 92 94 08 	sts	0x0894, r4	; 0x800894 <_startMeasureBit>
     92e:	50 92 95 08 	sts	0x0895, r5	; 0x800895 <_startMeasureBit+0x1>
     932:	60 92 96 08 	sts	0x0896, r6	; 0x800896 <_startMeasureBit+0x2>
     936:	70 92 97 08 	sts	0x0897, r7	; 0x800897 <_startMeasureBit+0x3>

	_readyEventGroup = readyEventGroup;
     93a:	f0 92 93 08 	sts	0x0893, r15	; 0x800893 <_readyEventGroup+0x1>
     93e:	e0 92 92 08 	sts	0x0892, r14	; 0x800892 <_readyEventGroup>
	_readyBit = readyBit;
     942:	a0 92 8e 08 	sts	0x088E, r10	; 0x80088e <_readyBit>
     946:	b0 92 8f 08 	sts	0x088F, r11	; 0x80088f <_readyBit+0x1>
     94a:	c0 92 90 08 	sts	0x0890, r12	; 0x800890 <_readyBit+0x2>
     94e:	d0 92 91 08 	sts	0x0891, r13	; 0x800891 <_readyBit+0x3>
	
	_uplinkmessageBuffer=uplinkMessageBuffer;
     952:	8e 8d       	ldd	r24, Y+30	; 0x1e
     954:	9f 8d       	ldd	r25, Y+31	; 0x1f
     956:	90 93 8d 08 	sts	0x088D, r25	; 0x80088d <_uplinkmessageBuffer+0x1>
     95a:	80 93 8c 08 	sts	0x088C, r24	; 0x80088c <_uplinkmessageBuffer>

	xTaskCreate(
     95e:	43 2d       	mov	r20, r3
     960:	50 e0       	ldi	r21, 0x00	; 0
     962:	7f 01       	movw	r14, r30
     964:	98 e0       	ldi	r25, 0x08	; 8
     966:	e9 0e       	add	r14, r25
     968:	f1 1c       	adc	r15, r1
     96a:	02 2d       	mov	r16, r2
     96c:	9f 01       	movw	r18, r30
     96e:	64 e9       	ldi	r22, 0x94	; 148
     970:	72 e0       	ldi	r23, 0x02	; 2
     972:	8e ee       	ldi	r24, 0xEE	; 238
     974:	95 e0       	ldi	r25, 0x05	; 5
     976:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <xTaskCreate>
		_new_device,
		priority,
		&_new_device->handleTask
	);

	printf("device up\n");
     97a:	8b e9       	ldi	r24, 0x9B	; 155
     97c:	92 e0       	ldi	r25, 0x02	; 2
     97e:	0e 94 9c 31 	call	0x6338	; 0x6338 <puts>

	return _new_device;
}
     982:	89 81       	ldd	r24, Y+1	; 0x01
     984:	9a 81       	ldd	r25, Y+2	; 0x02
     986:	0f 90       	pop	r0
     988:	0f 90       	pop	r0
     98a:	0f 90       	pop	r0
     98c:	0f 90       	pop	r0
     98e:	df 91       	pop	r29
     990:	cf 91       	pop	r28
     992:	1f 91       	pop	r17
     994:	0f 91       	pop	r16
     996:	ff 90       	pop	r15
     998:	ef 90       	pop	r14
     99a:	df 90       	pop	r13
     99c:	cf 90       	pop	r12
     99e:	bf 90       	pop	r11
     9a0:	af 90       	pop	r10
     9a2:	9f 90       	pop	r9
     9a4:	8f 90       	pop	r8
     9a6:	7f 90       	pop	r7
     9a8:	6f 90       	pop	r6
     9aa:	5f 90       	pop	r5
     9ac:	4f 90       	pop	r4
     9ae:	3f 90       	pop	r3
     9b0:	2f 90       	pop	r2
     9b2:	08 95       	ret

000009b4 <device_startMeasuring>:




void device_startMeasuring(device_t self) {
     9b4:	af 92       	push	r10
     9b6:	bf 92       	push	r11
     9b8:	cf 92       	push	r12
     9ba:	df 92       	push	r13
     9bc:	ef 92       	push	r14
     9be:	ff 92       	push	r15
     9c0:	0f 93       	push	r16
     9c2:	1f 93       	push	r17
     9c4:	cf 93       	push	r28
     9c6:	df 93       	push	r29
     9c8:	cd b7       	in	r28, 0x3d	; 61
     9ca:	de b7       	in	r29, 0x3e	; 62
     9cc:	66 97       	sbiw	r28, 0x16	; 22
     9ce:	0f b6       	in	r0, 0x3f	; 63
     9d0:	f8 94       	cli
     9d2:	de bf       	out	0x3e, r29	; 62
     9d4:	0f be       	out	0x3f, r0	; 63
     9d6:	cd bf       	out	0x3d, r28	; 61
     9d8:	5c 01       	movw	r10, r24
	//we should first check if device is on, get that from lora and add new eventBit 
	
	bool* works = pvPortMalloc(sizeof(bool));
     9da:	81 e0       	ldi	r24, 0x01	; 1
     9dc:	90 e0       	ldi	r25, 0x00	; 0
     9de:	4e d6       	rcall	.+3228   	; 0x167c <pvPortMalloc>
     9e0:	8c 01       	movw	r16, r24
	configuration_getWorking(works);
     9e2:	86 de       	rcall	.-756    	; 0x6f0 <configuration_getWorking>
     9e4:	f8 01       	movw	r30, r16
	if (*works == true)
     9e6:	80 81       	ld	r24, Z
     9e8:	88 23       	and	r24, r24
     9ea:	09 f4       	brne	.+2      	; 0x9ee <device_startMeasuring+0x3a>
     9ec:	c4 c0       	rjmp	.+392    	; 0xb76 <device_startMeasuring+0x1c2>
     9ee:	81 e0       	ldi	r24, 0x01	; 1
	{

		bool* ventilate = pvPortMalloc(sizeof(bool));
     9f0:	90 e0       	ldi	r25, 0x00	; 0
     9f2:	44 d6       	rcall	.+3208   	; 0x167c <pvPortMalloc>
     9f4:	8c 01       	movw	r16, r24
		configuration_getVentilation(ventilate);
     9f6:	c9 de       	rcall	.-622    	; 0x78a <configuration_getVentilation>
     9f8:	f8 01       	movw	r30, r16
		if(*ventilate == true)
     9fa:	80 81       	ld	r24, Z
     9fc:	88 23       	and	r24, r24
		{
			servo_open();
     9fe:	11 f0       	breq	.+4      	; 0xa04 <device_startMeasuring+0x50>
     a00:	7b d2       	rcall	.+1270   	; 0xef8 <servo_open>
     a02:	01 c0       	rjmp	.+2      	; 0xa06 <device_startMeasuring+0x52>
		} 
		else
		{
			servo_close();
     a04:	7e d2       	rcall	.+1276   	; 0xf02 <servo_close>
     a06:	40 91 94 08 	lds	r20, 0x0894	; 0x800894 <_startMeasureBit>
		}

	////tell sensors to start meassuring 
	xEventGroupSetBits(_startMeasureEventGroup, _startMeasureBit);
     a0a:	50 91 95 08 	lds	r21, 0x0895	; 0x800895 <_startMeasureBit+0x1>
     a0e:	60 91 96 08 	lds	r22, 0x0896	; 0x800896 <_startMeasureBit+0x2>
     a12:	70 91 97 08 	lds	r23, 0x0897	; 0x800897 <_startMeasureBit+0x3>
     a16:	80 91 98 08 	lds	r24, 0x0898	; 0x800898 <_startMeasureEventGroup>
     a1a:	90 91 99 08 	lds	r25, 0x0899	; 0x800899 <_startMeasureEventGroup+0x1>
     a1e:	48 d5       	rcall	.+2704   	; 0x14b0 <xEventGroupSetBits>
     a20:	85 ea       	ldi	r24, 0xA5	; 165
	printf("device has set bits\n");
     a22:	92 e0       	ldi	r25, 0x02	; 2
     a24:	0e 94 9c 31 	call	0x6338	; 0x6338 <puts>
     a28:	40 91 8e 08 	lds	r20, 0x088E	; 0x80088e <_readyBit>

	//wait for sensors to read data
	EventBits_t uxBits = xEventGroupWaitBits(_readyEventGroup, //eventGroup it is interested in
     a2c:	50 91 8f 08 	lds	r21, 0x088F	; 0x80088f <_readyBit+0x1>
     a30:	60 91 90 08 	lds	r22, 0x0890	; 0x800890 <_readyBit+0x2>
     a34:	70 91 91 08 	lds	r23, 0x0891	; 0x800891 <_readyBit+0x3>
     a38:	cc 24       	eor	r12, r12
     a3a:	ca 94       	dec	r12
     a3c:	dc 2c       	mov	r13, r12
     a3e:	76 01       	movw	r14, r12
     a40:	01 e0       	ldi	r16, 0x01	; 1
     a42:	21 e0       	ldi	r18, 0x01	; 1
     a44:	80 91 92 08 	lds	r24, 0x0892	; 0x800892 <_readyEventGroup>
     a48:	90 91 93 08 	lds	r25, 0x0893	; 0x800893 <_readyEventGroup+0x1>
     a4c:	71 d4       	rcall	.+2274   	; 0x1330 <xEventGroupWaitBits>
     a4e:	00 91 8e 08 	lds	r16, 0x088E	; 0x80088e <_readyBit>
		_readyBit, //bits it is interested in
		pdTRUE, //clears the bits 
		pdTRUE, //waits for both bits to be set
		portMAX_DELAY); //waits forever if needed
	
	if ((uxBits & (_readyBit)) == (_readyBit)) {
     a52:	10 91 8f 08 	lds	r17, 0x088F	; 0x80088f <_readyBit+0x1>
     a56:	20 91 90 08 	lds	r18, 0x0890	; 0x800890 <_readyBit+0x2>
     a5a:	30 91 91 08 	lds	r19, 0x0891	; 0x800891 <_readyBit+0x3>
     a5e:	dc 01       	movw	r26, r24
     a60:	cb 01       	movw	r24, r22
     a62:	80 23       	and	r24, r16
     a64:	91 23       	and	r25, r17
     a66:	a2 23       	and	r26, r18
     a68:	b3 23       	and	r27, r19
     a6a:	08 17       	cp	r16, r24
     a6c:	19 07       	cpc	r17, r25
     a6e:	2a 07       	cpc	r18, r26
     a70:	3b 07       	cpc	r19, r27
     a72:	09 f0       	breq	.+2      	; 0xa76 <device_startMeasuring+0xc2>
     a74:	a2 c0       	rjmp	.+324    	; 0xbba <device_startMeasuring+0x206>
		currentCondition_setCO2(self->currentCondition,co2Reader_getCO2(self->co2reader));
     a76:	f5 01       	movw	r30, r10
     a78:	80 81       	ld	r24, Z
     a7a:	91 81       	ldd	r25, Z+1	; 0x01
     a7c:	07 de       	rcall	.-1010   	; 0x68c <co2Reader_getCO2>
     a7e:	bc 01       	movw	r22, r24
     a80:	f5 01       	movw	r30, r10
     a82:	86 81       	ldd	r24, Z+6	; 0x06
     a84:	97 81       	ldd	r25, Z+7	; 0x07
     a86:	bc de       	rcall	.-648    	; 0x800 <currentCondition_setCO2>
		
		currentCondition_setSound(self->currentCondition,soundReader_getSound(self->soundReader));
     a88:	f5 01       	movw	r30, r10
     a8a:	84 81       	ldd	r24, Z+4	; 0x04
     a8c:	95 81       	ldd	r25, Z+5	; 0x05
     a8e:	f8 d2       	rcall	.+1520   	; 0x1080 <soundReader_getSound>
     a90:	bc 01       	movw	r22, r24
     a92:	f5 01       	movw	r30, r10
     a94:	86 81       	ldd	r24, Z+6	; 0x06
     a96:	97 81       	ldd	r25, Z+7	; 0x07
     a98:	d5 de       	rcall	.-598    	; 0x844 <currentCondition_setSound>
		
		currentCondition_setTemperature(self->currentCondition,humAndTempReader_getTemperature(self->humAndTempReader));
     a9a:	f5 01       	movw	r30, r10
     a9c:	82 81       	ldd	r24, Z+2	; 0x02
     a9e:	93 81       	ldd	r25, Z+3	; 0x03
     aa0:	24 d2       	rcall	.+1096   	; 0xeea <humAndTempReader_getTemperature>
     aa2:	bc 01       	movw	r22, r24
     aa4:	f5 01       	movw	r30, r10
     aa6:	86 81       	ldd	r24, Z+6	; 0x06
     aa8:	97 81       	ldd	r25, Z+7	; 0x07
     aaa:	c0 de       	rcall	.-640    	; 0x82c <currentCondition_setTemperature>
		
		int16_t humidity = humAndTempReader_getHumidity(self->humAndTempReader);
     aac:	f5 01       	movw	r30, r10
     aae:	82 81       	ldd	r24, Z+2	; 0x02
     ab0:	93 81       	ldd	r25, Z+3	; 0x03
     ab2:	17 d2       	rcall	.+1070   	; 0xee2 <humAndTempReader_getHumidity>
		currentCondition_setHumidity(self->currentCondition, humidity);
     ab4:	bc 01       	movw	r22, r24
     ab6:	f5 01       	movw	r30, r10
     ab8:	86 81       	ldd	r24, Z+6	; 0x06
     aba:	97 81       	ldd	r25, Z+7	; 0x07
     abc:	ad de       	rcall	.-678    	; 0x818 <currentCondition_setHumidity>
     abe:	89 eb       	ldi	r24, 0xB9	; 185
		
		printf("device got done bit\n");
     ac0:	92 e0       	ldi	r25, 0x02	; 2
     ac2:	0e 94 9c 31 	call	0x6338	; 0x6338 <puts>
		
		printf("CO2 is: %u\n", co2Reader_getCO2(self->co2reader));
     ac6:	f5 01       	movw	r30, r10
     ac8:	80 81       	ld	r24, Z
     aca:	91 81       	ldd	r25, Z+1	; 0x01
     acc:	df dd       	rcall	.-1090   	; 0x68c <co2Reader_getCO2>
     ace:	9f 93       	push	r25
     ad0:	8f 93       	push	r24
     ad2:	8d ec       	ldi	r24, 0xCD	; 205
     ad4:	92 e0       	ldi	r25, 0x02	; 2
     ad6:	9f 93       	push	r25
     ad8:	8f 93       	push	r24
     ada:	0e 94 89 31 	call	0x6312	; 0x6312 <printf>
		printf("Temperature is: %d\n", humAndTempReader_getTemperature(self->humAndTempReader));
     ade:	f5 01       	movw	r30, r10
     ae0:	82 81       	ldd	r24, Z+2	; 0x02
     ae2:	93 81       	ldd	r25, Z+3	; 0x03
     ae4:	02 d2       	rcall	.+1028   	; 0xeea <humAndTempReader_getTemperature>
     ae6:	9f 93       	push	r25
     ae8:	8f 93       	push	r24
     aea:	89 ed       	ldi	r24, 0xD9	; 217
     aec:	92 e0       	ldi	r25, 0x02	; 2
     aee:	9f 93       	push	r25
     af0:	8f 93       	push	r24
     af2:	0e 94 89 31 	call	0x6312	; 0x6312 <printf>
		printf("Humidity is: %u\n", humAndTempReader_getHumidity(self->humAndTempReader));
     af6:	f5 01       	movw	r30, r10
     af8:	82 81       	ldd	r24, Z+2	; 0x02
     afa:	93 81       	ldd	r25, Z+3	; 0x03
     afc:	f2 d1       	rcall	.+996    	; 0xee2 <humAndTempReader_getHumidity>
     afe:	9f 93       	push	r25
     b00:	8f 93       	push	r24
     b02:	8d ee       	ldi	r24, 0xED	; 237
     b04:	92 e0       	ldi	r25, 0x02	; 2
     b06:	9f 93       	push	r25
     b08:	8f 93       	push	r24
     b0a:	0e 94 89 31 	call	0x6312	; 0x6312 <printf>
		printf("Sound is: %u\n", soundReader_getSound(self->soundReader));
     b0e:	f5 01       	movw	r30, r10
     b10:	84 81       	ldd	r24, Z+4	; 0x04
     b12:	95 81       	ldd	r25, Z+5	; 0x05
     b14:	b5 d2       	rcall	.+1386   	; 0x1080 <soundReader_getSound>
     b16:	9f 93       	push	r25
     b18:	8f 93       	push	r24
     b1a:	8e ef       	ldi	r24, 0xFE	; 254
     b1c:	92 e0       	ldi	r25, 0x02	; 2
     b1e:	9f 93       	push	r25
     b20:	8f 93       	push	r24
     b22:	0e 94 89 31 	call	0x6312	; 0x6312 <printf>
     b26:	f5 01       	movw	r30, r10
		
		/*Perhaps loraPayload is not a good idea to be here*/
		_uplink_payload = getcurrentConditionPayload(self->currentCondition);
     b28:	66 81       	ldd	r22, Z+6	; 0x06
     b2a:	77 81       	ldd	r23, Z+7	; 0x07
     b2c:	ce 01       	movw	r24, r28
     b2e:	01 96       	adiw	r24, 0x01	; 1
     b30:	92 de       	rcall	.-732    	; 0x856 <getcurrentConditionPayload>
     b32:	86 e1       	ldi	r24, 0x16	; 22
     b34:	fe 01       	movw	r30, r28
     b36:	31 96       	adiw	r30, 0x01	; 1
     b38:	a6 e7       	ldi	r26, 0x76	; 118
     b3a:	b8 e0       	ldi	r27, 0x08	; 8
     b3c:	01 90       	ld	r0, Z+
     b3e:	0d 92       	st	X+, r0
     b40:	8a 95       	dec	r24
     b42:	e1 f7       	brne	.-8      	; 0xb3c <device_startMeasuring+0x188>
     b44:	0f ef       	ldi	r16, 0xFF	; 255
     b46:	1f ef       	ldi	r17, 0xFF	; 255
		
		xMessageBufferSend(_uplinkmessageBuffer,(void*) &_uplink_payload,sizeof(_uplink_payload),portMAX_DELAY);
     b48:	98 01       	movw	r18, r16
     b4a:	46 e1       	ldi	r20, 0x16	; 22
     b4c:	50 e0       	ldi	r21, 0x00	; 0
     b4e:	66 e7       	ldi	r22, 0x76	; 118
     b50:	78 e0       	ldi	r23, 0x08	; 8
     b52:	80 91 8c 08 	lds	r24, 0x088C	; 0x80088c <_uplinkmessageBuffer>
     b56:	90 91 8d 08 	lds	r25, 0x088D	; 0x80088d <_uplinkmessageBuffer+0x1>
     b5a:	0e 94 42 13 	call	0x2684	; 0x2684 <xStreamBufferSend>
     b5e:	60 ed       	ldi	r22, 0xD0	; 208
     b60:	77 e0       	ldi	r23, 0x07	; 7
		vTaskDelay(2000);
     b62:	80 e0       	ldi	r24, 0x00	; 0
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	0e 94 32 18 	call	0x3064	; 0x3064 <vTaskDelay>
     b6a:	0f b6       	in	r0, 0x3f	; 63
     b6c:	f8 94       	cli
     b6e:	de bf       	out	0x3e, r29	; 62
     b70:	0f be       	out	0x3f, r0	; 63
     b72:	cd bf       	out	0x3d, r28	; 61
     b74:	22 c0       	rjmp	.+68     	; 0xbba <device_startMeasuring+0x206>
     b76:	68 e8       	ldi	r22, 0x88	; 136
	//if the device is not on, wait a bit and check if anything is changed
	}
	else
	{
		//put 30 000 for 5 mins
		vTaskDelay(5000);
     b78:	73 e1       	ldi	r23, 0x13	; 19
     b7a:	80 e0       	ldi	r24, 0x00	; 0
     b7c:	90 e0       	ldi	r25, 0x00	; 0
     b7e:	0e 94 32 18 	call	0x3064	; 0x3064 <vTaskDelay>
     b82:	f5 01       	movw	r30, r10
		_uplink_payload = getSimplePayload(self->currentCondition);
     b84:	66 81       	ldd	r22, Z+6	; 0x06
     b86:	77 81       	ldd	r23, Z+7	; 0x07
     b88:	ce 01       	movw	r24, r28
     b8a:	01 96       	adiw	r24, 0x01	; 1
     b8c:	89 de       	rcall	.-750    	; 0x8a0 <getSimplePayload>
     b8e:	86 e1       	ldi	r24, 0x16	; 22
     b90:	fe 01       	movw	r30, r28
     b92:	31 96       	adiw	r30, 0x01	; 1
     b94:	a6 e7       	ldi	r26, 0x76	; 118
     b96:	b8 e0       	ldi	r27, 0x08	; 8
     b98:	01 90       	ld	r0, Z+
     b9a:	0d 92       	st	X+, r0
     b9c:	8a 95       	dec	r24
     b9e:	e1 f7       	brne	.-8      	; 0xb98 <device_startMeasuring+0x1e4>
     ba0:	0f ef       	ldi	r16, 0xFF	; 255
     ba2:	1f ef       	ldi	r17, 0xFF	; 255
		xMessageBufferSend(_uplinkmessageBuffer,(void*) &_uplink_payload,sizeof(_uplink_payload),portMAX_DELAY);
     ba4:	98 01       	movw	r18, r16
     ba6:	46 e1       	ldi	r20, 0x16	; 22
     ba8:	50 e0       	ldi	r21, 0x00	; 0
     baa:	66 e7       	ldi	r22, 0x76	; 118
     bac:	78 e0       	ldi	r23, 0x08	; 8
     bae:	80 91 8c 08 	lds	r24, 0x088C	; 0x80088c <_uplinkmessageBuffer>
     bb2:	90 91 8d 08 	lds	r25, 0x088D	; 0x80088d <_uplinkmessageBuffer+0x1>
     bb6:	0e 94 42 13 	call	0x2684	; 0x2684 <xStreamBufferSend>
     bba:	66 96       	adiw	r28, 0x16	; 22
     bbc:	0f b6       	in	r0, 0x3f	; 63
	} 
}
     bbe:	f8 94       	cli
     bc0:	de bf       	out	0x3e, r29	; 62
     bc2:	0f be       	out	0x3f, r0	; 63
     bc4:	cd bf       	out	0x3d, r28	; 61
     bc6:	df 91       	pop	r29
     bc8:	cf 91       	pop	r28
     bca:	1f 91       	pop	r17
     bcc:	0f 91       	pop	r16
     bce:	ff 90       	pop	r15
     bd0:	ef 90       	pop	r14
     bd2:	df 90       	pop	r13
     bd4:	cf 90       	pop	r12
     bd6:	bf 90       	pop	r11
     bd8:	af 90       	pop	r10
     bda:	08 95       	ret

00000bdc <device_executeTask>:
     bdc:	ec 01       	movw	r28, r24
     bde:	ce 01       	movw	r24, r28

//devided so we can test
void device_executeTask(void* self) {
	for (;;)
	{
		device_startMeasuring((device_t)self);
     be0:	e9 de       	rcall	.-558    	; 0x9b4 <device_startMeasuring>
     be2:	fd cf       	rjmp	.-6      	; 0xbde <device_executeTask+0x2>

00000be4 <lora_DownLinkHandler_create>:
		
	}
}

void lora_DownLinkHandler_create(UBaseType_t lora_handler_task_priority, MessageBufferHandle_t xMessageBuffer)
{
     be4:	ef 92       	push	r14
     be6:	ff 92       	push	r15
     be8:	0f 93       	push	r16
     bea:	9b 01       	movw	r18, r22
	
	//_isSet=isSet;
	xTaskCreate(
     bec:	e1 2c       	mov	r14, r1
     bee:	f1 2c       	mov	r15, r1
     bf0:	08 2f       	mov	r16, r24
     bf2:	48 e8       	ldi	r20, 0x88	; 136
     bf4:	51 e0       	ldi	r21, 0x01	; 1
     bf6:	6c e0       	ldi	r22, 0x0C	; 12
     bf8:	73 e0       	ldi	r23, 0x03	; 3
     bfa:	8c e9       	ldi	r24, 0x9C	; 156
     bfc:	96 e0       	ldi	r25, 0x06	; 6
     bfe:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <xTaskCreate>
	,  configMINIMAL_STACK_SIZE+200  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  xMessageBuffer
	,  lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
	
}
     c02:	0f 91       	pop	r16
     c04:	ff 90       	pop	r15
     c06:	ef 90       	pop	r14
     c08:	08 95       	ret

00000c0a <lora_DownLinkHandler_task>:


	void lora_DownLinkHandler_task(MessageBufferHandle_t xMessageBuffer)
	{
     c0a:	0f 93       	push	r16
     c0c:	1f 93       	push	r17
     c0e:	cf 93       	push	r28
     c10:	df 93       	push	r29
				
		//size_t xBytesReceived;
		//xBytesReceived = 
		xMessageBufferReceive(xMessageBuffer,(void*) &_downlink_payload,sizeof(lora_payload_t),portMAX_DELAY);
     c12:	0f ef       	ldi	r16, 0xFF	; 255
     c14:	1f ef       	ldi	r17, 0xFF	; 255
     c16:	98 01       	movw	r18, r16
     c18:	46 e1       	ldi	r20, 0x16	; 22
     c1a:	50 e0       	ldi	r21, 0x00	; 0
     c1c:	6a e9       	ldi	r22, 0x9A	; 154
     c1e:	78 e0       	ldi	r23, 0x08	; 8
     c20:	0e 94 2f 14 	call	0x285e	; 0x285e <xStreamBufferReceive>
		printf("PayLoad bytes are: %d, %d\n Payload lenght is %d\n", _downlink_payload.bytes[0] ,_downlink_payload.bytes[1],_downlink_payload.len);
     c24:	ca e9       	ldi	r28, 0x9A	; 154
     c26:	d8 e0       	ldi	r29, 0x08	; 8
     c28:	89 81       	ldd	r24, Y+1	; 0x01
     c2a:	1f 92       	push	r1
     c2c:	8f 93       	push	r24
     c2e:	8b 81       	ldd	r24, Y+3	; 0x03
     c30:	1f 92       	push	r1
     c32:	8f 93       	push	r24
     c34:	8a 81       	ldd	r24, Y+2	; 0x02
     c36:	1f 92       	push	r1
     c38:	8f 93       	push	r24
     c3a:	85 e1       	ldi	r24, 0x15	; 21
     c3c:	93 e0       	ldi	r25, 0x03	; 3
     c3e:	9f 93       	push	r25
     c40:	8f 93       	push	r24
     c42:	0e 94 89 31 	call	0x6312	; 0x6312 <printf>
		
		//Two bytes eg. 44/33
		if(_downlink_payload.len==2)
     c46:	8d b7       	in	r24, 0x3d	; 61
     c48:	9e b7       	in	r25, 0x3e	; 62
     c4a:	08 96       	adiw	r24, 0x08	; 8
     c4c:	0f b6       	in	r0, 0x3f	; 63
     c4e:	f8 94       	cli
     c50:	9e bf       	out	0x3e, r25	; 62
     c52:	0f be       	out	0x3f, r0	; 63
     c54:	8d bf       	out	0x3d, r24	; 61
     c56:	89 81       	ldd	r24, Y+1	; 0x01
     c58:	82 30       	cpi	r24, 0x02	; 2
     c5a:	09 f0       	breq	.+2      	; 0xc5e <lora_DownLinkHandler_task+0x54>
     c5c:	68 c0       	rjmp	.+208    	; 0xd2e <lora_DownLinkHandler_task+0x124>
		{
			uint8_t command = _downlink_payload.bytes[0] + _downlink_payload.bytes[1];
     c5e:	fe 01       	movw	r30, r28
     c60:	ca 81       	ldd	r28, Y+2	; 0x02
     c62:	83 81       	ldd	r24, Z+3	; 0x03
     c64:	c8 0f       	add	r28, r24
			bool* value = pvPortMalloc(sizeof(bool));
     c66:	81 e0       	ldi	r24, 0x01	; 1
     c68:	90 e0       	ldi	r25, 0x00	; 0
     c6a:	08 d5       	rcall	.+2576   	; 0x167c <pvPortMalloc>
     c6c:	8c 01       	movw	r16, r24
			
		
			switch(command)
     c6e:	c5 37       	cpi	r28, 0x75	; 117
     c70:	e9 f0       	breq	.+58     	; 0xcac <lora_DownLinkHandler_task+0xa2>
     c72:	18 f4       	brcc	.+6      	; 0xc7a <lora_DownLinkHandler_task+0x70>
     c74:	c4 37       	cpi	r28, 0x74	; 116
     c76:	39 f0       	breq	.+14     	; 0xc86 <lora_DownLinkHandler_task+0x7c>
     c78:	52 c0       	rjmp	.+164    	; 0xd1e <lora_DownLinkHandler_task+0x114>
     c7a:	c6 38       	cpi	r28, 0x86	; 134
     c7c:	51 f1       	breq	.+84     	; 0xcd2 <lora_DownLinkHandler_task+0xc8>
     c7e:	c7 38       	cpi	r28, 0x87	; 135
     c80:	09 f4       	brne	.+2      	; 0xc84 <lora_DownLinkHandler_task+0x7a>
     c82:	3a c0       	rjmp	.+116    	; 0xcf8 <lora_DownLinkHandler_task+0xee>
     c84:	4c c0       	rjmp	.+152    	; 0xd1e <lora_DownLinkHandler_task+0x114>
			{
			//D0
			case 0x74:
				configuration_setWorking(false);
     c86:	80 e0       	ldi	r24, 0x00	; 0
     c88:	0f dd       	rcall	.-1506   	; 0x6a8 <configuration_setWorking>
				configuration_getWorking(value);
     c8a:	c8 01       	movw	r24, r16
     c8c:	31 dd       	rcall	.-1438   	; 0x6f0 <configuration_getWorking>
     c8e:	f8 01       	movw	r30, r16
				printf("The bool for device is set to %d",*value);
     c90:	80 81       	ld	r24, Z
     c92:	1f 92       	push	r1
     c94:	8f 93       	push	r24
     c96:	86 e4       	ldi	r24, 0x46	; 70
     c98:	93 e0       	ldi	r25, 0x03	; 3
     c9a:	9f 93       	push	r25
     c9c:	8f 93       	push	r24
     c9e:	0e 94 89 31 	call	0x6312	; 0x6312 <printf>
     ca2:	0f 90       	pop	r0
				break;
     ca4:	0f 90       	pop	r0
     ca6:	0f 90       	pop	r0
     ca8:	0f 90       	pop	r0
     caa:	41 c0       	rjmp	.+130    	; 0xd2e <lora_DownLinkHandler_task+0x124>
			//D1
			case 0x75 :
				configuration_setWorking(true);
     cac:	81 e0       	ldi	r24, 0x01	; 1
     cae:	fc dc       	rcall	.-1544   	; 0x6a8 <configuration_setWorking>
				configuration_getWorking(value);
     cb0:	c8 01       	movw	r24, r16
     cb2:	1e dd       	rcall	.-1476   	; 0x6f0 <configuration_getWorking>
     cb4:	f8 01       	movw	r30, r16
				printf("The bool for device is set to %d",*value);
     cb6:	80 81       	ld	r24, Z
     cb8:	1f 92       	push	r1
     cba:	8f 93       	push	r24
     cbc:	86 e4       	ldi	r24, 0x46	; 70
     cbe:	93 e0       	ldi	r25, 0x03	; 3
     cc0:	9f 93       	push	r25
     cc2:	8f 93       	push	r24
     cc4:	0e 94 89 31 	call	0x6312	; 0x6312 <printf>
     cc8:	0f 90       	pop	r0
				break;
     cca:	0f 90       	pop	r0
     ccc:	0f 90       	pop	r0
     cce:	0f 90       	pop	r0
			//V0
			case 0x86:
				configuration_setVentilation(false);
     cd0:	2e c0       	rjmp	.+92     	; 0xd2e <lora_DownLinkHandler_task+0x124>
     cd2:	80 e0       	ldi	r24, 0x00	; 0
     cd4:	36 dd       	rcall	.-1428   	; 0x742 <configuration_setVentilation>
				configuration_getVentilation(value);
     cd6:	c8 01       	movw	r24, r16
     cd8:	58 dd       	rcall	.-1360   	; 0x78a <configuration_getVentilation>
     cda:	f8 01       	movw	r30, r16
				printf("The bool for ventilation is set to %d",*value);
     cdc:	80 81       	ld	r24, Z
     cde:	1f 92       	push	r1
     ce0:	8f 93       	push	r24
     ce2:	87 e6       	ldi	r24, 0x67	; 103
     ce4:	93 e0       	ldi	r25, 0x03	; 3
     ce6:	9f 93       	push	r25
     ce8:	8f 93       	push	r24
     cea:	0e 94 89 31 	call	0x6312	; 0x6312 <printf>
			break;
     cee:	0f 90       	pop	r0
     cf0:	0f 90       	pop	r0
     cf2:	0f 90       	pop	r0
     cf4:	0f 90       	pop	r0
			//V1
			case 0x87:
				configuration_setVentilation(true);
     cf6:	1b c0       	rjmp	.+54     	; 0xd2e <lora_DownLinkHandler_task+0x124>
     cf8:	81 e0       	ldi	r24, 0x01	; 1
     cfa:	23 dd       	rcall	.-1466   	; 0x742 <configuration_setVentilation>
				configuration_getVentilation(value);
     cfc:	c8 01       	movw	r24, r16
     cfe:	45 dd       	rcall	.-1398   	; 0x78a <configuration_getVentilation>
     d00:	f8 01       	movw	r30, r16
				printf("The bool for ventilation is set to %d",*value);
     d02:	80 81       	ld	r24, Z
     d04:	1f 92       	push	r1
     d06:	8f 93       	push	r24
     d08:	87 e6       	ldi	r24, 0x67	; 103
     d0a:	93 e0       	ldi	r25, 0x03	; 3
     d0c:	9f 93       	push	r25
     d0e:	8f 93       	push	r24
     d10:	0e 94 89 31 	call	0x6312	; 0x6312 <printf>
     d14:	0f 90       	pop	r0
				break;
     d16:	0f 90       	pop	r0
     d18:	0f 90       	pop	r0
     d1a:	0f 90       	pop	r0
     d1c:	08 c0       	rjmp	.+16     	; 0xd2e <lora_DownLinkHandler_task+0x124>
     d1e:	8d e8       	ldi	r24, 0x8D	; 141
			default:
				printf("Invalid command");
     d20:	93 e0       	ldi	r25, 0x03	; 3
     d22:	9f 93       	push	r25
     d24:	8f 93       	push	r24
     d26:	0e 94 89 31 	call	0x6312	; 0x6312 <printf>
     d2a:	0f 90       	pop	r0
				break;
     d2c:	0f 90       	pop	r0
     d2e:	df 91       	pop	r29
		}
	}
						
}
     d30:	cf 91       	pop	r28
     d32:	1f 91       	pop	r17
     d34:	0f 91       	pop	r16
     d36:	08 95       	ret

00000d38 <lora_DownLinkHandler_startTask>:
     d38:	ec 01       	movw	r28, r24
//int16_t temperature_setting; // Temperature

void lora_DownLinkHandler_startTask(void* xMessageBuffer){
	for(;;)
	{
		lora_DownLinkHandler_task((MessageBufferHandle_t)xMessageBuffer);
     d3a:	ce 01       	movw	r24, r28
     d3c:	66 df       	rcall	.-308    	; 0xc0a <lora_DownLinkHandler_task>
     d3e:	fd cf       	rjmp	.-6      	; 0xd3a <lora_DownLinkHandler_startTask+0x2>

00000d40 <humAndTempReader_create>:
void humAndTempReader_destroy(humAndTempReader_t self) {
	if (self == NULL)
	return;

	//delete will clear the allocated memory to the task + we need to remove everything else
	vTaskDelete(self->handleTask);
     d40:	2f 92       	push	r2
     d42:	3f 92       	push	r3
     d44:	4f 92       	push	r4
     d46:	5f 92       	push	r5
     d48:	6f 92       	push	r6
     d4a:	7f 92       	push	r7
     d4c:	8f 92       	push	r8
     d4e:	9f 92       	push	r9
     d50:	af 92       	push	r10
     d52:	bf 92       	push	r11
     d54:	cf 92       	push	r12
     d56:	df 92       	push	r13
     d58:	ef 92       	push	r14
     d5a:	ff 92       	push	r15
     d5c:	0f 93       	push	r16
     d5e:	1f 93       	push	r17
     d60:	cf 93       	push	r28
     d62:	df 93       	push	r29
     d64:	88 2e       	mov	r8, r24
     d66:	96 2e       	mov	r9, r22
     d68:	1a 01       	movw	r2, r20
     d6a:	28 01       	movw	r4, r16
     d6c:	39 01       	movw	r6, r18
     d6e:	66 e0       	ldi	r22, 0x06	; 6
     d70:	70 e0       	ldi	r23, 0x00	; 0
     d72:	81 e0       	ldi	r24, 0x01	; 1
     d74:	90 e0       	ldi	r25, 0x00	; 0
     d76:	0e 94 96 2f 	call	0x5f2c	; 0x5f2c <calloc>
     d7a:	ec 01       	movw	r28, r24
     d7c:	00 97       	sbiw	r24, 0x00	; 0
     d7e:	71 f1       	breq	.+92     	; 0xddc <humAndTempReader_create+0x9c>
     d80:	19 82       	std	Y+1, r1	; 0x01
     d82:	18 82       	st	Y, r1
     d84:	1b 82       	std	Y+3, r1	; 0x03
     d86:	1a 82       	std	Y+2, r1	; 0x02
     d88:	30 92 bb 08 	sts	0x08BB, r3	; 0x8008bb <_startMeasureEventGroup+0x1>
     d8c:	20 92 ba 08 	sts	0x08BA, r2	; 0x8008ba <_startMeasureEventGroup>
     d90:	40 92 b6 08 	sts	0x08B6, r4	; 0x8008b6 <_startMeasureBit>
     d94:	50 92 b7 08 	sts	0x08B7, r5	; 0x8008b7 <_startMeasureBit+0x1>
     d98:	60 92 b8 08 	sts	0x08B8, r6	; 0x8008b8 <_startMeasureBit+0x2>
     d9c:	70 92 b9 08 	sts	0x08B9, r7	; 0x8008b9 <_startMeasureBit+0x3>
     da0:	f0 92 b5 08 	sts	0x08B5, r15	; 0x8008b5 <_readyEventGroup+0x1>
     da4:	e0 92 b4 08 	sts	0x08B4, r14	; 0x8008b4 <_readyEventGroup>
     da8:	a0 92 b0 08 	sts	0x08B0, r10	; 0x8008b0 <_readyBit>
     dac:	b0 92 b1 08 	sts	0x08B1, r11	; 0x8008b1 <_readyBit+0x1>
     db0:	c0 92 b2 08 	sts	0x08B2, r12	; 0x8008b2 <_readyBit+0x2>
     db4:	d0 92 b3 08 	sts	0x08B3, r13	; 0x8008b3 <_readyBit+0x3>
     db8:	49 2d       	mov	r20, r9
     dba:	50 e0       	ldi	r21, 0x00	; 0
     dbc:	7c 01       	movw	r14, r24
     dbe:	84 e0       	ldi	r24, 0x04	; 4
     dc0:	e8 0e       	add	r14, r24
     dc2:	f1 1c       	adc	r15, r1
     dc4:	08 2d       	mov	r16, r8
     dc6:	9e 01       	movw	r18, r28
     dc8:	6d e9       	ldi	r22, 0x9D	; 157
     dca:	73 e0       	ldi	r23, 0x03	; 3
     dcc:	8d e6       	ldi	r24, 0x6D	; 109
     dce:	97 e0       	ldi	r25, 0x07	; 7
     dd0:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <xTaskCreate>
     dd4:	8e ea       	ldi	r24, 0xAE	; 174
     dd6:	93 e0       	ldi	r25, 0x03	; 3
     dd8:	0e 94 9c 31 	call	0x6338	; 0x6338 <puts>
     ddc:	ce 01       	movw	r24, r28
     dde:	df 91       	pop	r29
     de0:	cf 91       	pop	r28
     de2:	1f 91       	pop	r17
     de4:	0f 91       	pop	r16
     de6:	ff 90       	pop	r15
     de8:	ef 90       	pop	r14
     dea:	df 90       	pop	r13
     dec:	cf 90       	pop	r12
     dee:	bf 90       	pop	r11
     df0:	af 90       	pop	r10
     df2:	9f 90       	pop	r9
     df4:	8f 90       	pop	r8
     df6:	7f 90       	pop	r7
     df8:	6f 90       	pop	r6
     dfa:	5f 90       	pop	r5
     dfc:	4f 90       	pop	r4
     dfe:	3f 90       	pop	r3
     e00:	2f 90       	pop	r2
     e02:	08 95       	ret

00000e04 <humAndTempReader_measure>:
	//free(self);
}



void humAndTempReader_measure(humAndTempReader_t self) {//dummy
     e04:	cf 92       	push	r12
     e06:	df 92       	push	r13
     e08:	ef 92       	push	r14
     e0a:	ff 92       	push	r15
     e0c:	0f 93       	push	r16
     e0e:	1f 93       	push	r17
     e10:	cf 93       	push	r28
     e12:	df 93       	push	r29
     e14:	ec 01       	movw	r28, r24
	EventBits_t uxBits = xEventGroupWaitBits(_startMeasureEventGroup, //eventGroup
     e16:	40 91 b6 08 	lds	r20, 0x08B6	; 0x8008b6 <_startMeasureBit>
     e1a:	50 91 b7 08 	lds	r21, 0x08B7	; 0x8008b7 <_startMeasureBit+0x1>
     e1e:	60 91 b8 08 	lds	r22, 0x08B8	; 0x8008b8 <_startMeasureBit+0x2>
     e22:	70 91 b9 08 	lds	r23, 0x08B9	; 0x8008b9 <_startMeasureBit+0x3>
     e26:	cc 24       	eor	r12, r12
     e28:	ca 94       	dec	r12
     e2a:	dc 2c       	mov	r13, r12
     e2c:	76 01       	movw	r14, r12
     e2e:	01 e0       	ldi	r16, 0x01	; 1
     e30:	21 e0       	ldi	r18, 0x01	; 1
     e32:	80 91 ba 08 	lds	r24, 0x08BA	; 0x8008ba <_startMeasureEventGroup>
     e36:	90 91 bb 08 	lds	r25, 0x08BB	; 0x8008bb <_startMeasureEventGroup+0x1>
     e3a:	7a d2       	rcall	.+1268   	; 0x1330 <xEventGroupWaitBits>
	_startMeasureBit, //bits it is interested i
	pdTRUE, //clears the bits
	pdTRUE, //waits for both bits to be set
	portMAX_DELAY); //wait

	if ((uxBits & (_startMeasureBit)) == (_startMeasureBit)) {
     e3c:	00 91 b6 08 	lds	r16, 0x08B6	; 0x8008b6 <_startMeasureBit>
     e40:	10 91 b7 08 	lds	r17, 0x08B7	; 0x8008b7 <_startMeasureBit+0x1>
     e44:	20 91 b8 08 	lds	r18, 0x08B8	; 0x8008b8 <_startMeasureBit+0x2>
     e48:	30 91 b9 08 	lds	r19, 0x08B9	; 0x8008b9 <_startMeasureBit+0x3>
     e4c:	dc 01       	movw	r26, r24
     e4e:	cb 01       	movw	r24, r22
     e50:	80 23       	and	r24, r16
     e52:	91 23       	and	r25, r17
     e54:	a2 23       	and	r26, r18
     e56:	b3 23       	and	r27, r19
     e58:	08 17       	cp	r16, r24
     e5a:	19 07       	cpc	r17, r25
     e5c:	2a 07       	cpc	r18, r26
     e5e:	3b 07       	cpc	r19, r27
     e60:	99 f5       	brne	.+102    	; 0xec8 <humAndTempReader_measure+0xc4>
		hih8120Wakeup();
     e62:	0e 94 f9 1f 	call	0x3ff2	; 0x3ff2 <hih8120Wakeup>
		vTaskDelay(50);
     e66:	62 e3       	ldi	r22, 0x32	; 50
     e68:	70 e0       	ldi	r23, 0x00	; 0
     e6a:	80 e0       	ldi	r24, 0x00	; 0
     e6c:	90 e0       	ldi	r25, 0x00	; 0
     e6e:	0e 94 32 18 	call	0x3064	; 0x3064 <vTaskDelay>
		hih8120Meassure();
     e72:	0e 94 0e 20 	call	0x401c	; 0x401c <hih8120Meassure>
		vTaskDelay(5);
     e76:	65 e0       	ldi	r22, 0x05	; 5
     e78:	70 e0       	ldi	r23, 0x00	; 0
     e7a:	80 e0       	ldi	r24, 0x00	; 0
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	0e 94 32 18 	call	0x3064	; 0x3064 <vTaskDelay>
		if(hih8120IsReady())
     e82:	0e 94 f6 1f 	call	0x3fec	; 0x3fec <hih8120IsReady>
     e86:	88 23       	and	r24, r24
     e88:	61 f0       	breq	.+24     	; 0xea2 <humAndTempReader_measure+0x9e>
		{
			self->humidity = hih8120GetHumidityPercent_x10();
     e8a:	0e 94 34 20 	call	0x4068	; 0x4068 <hih8120GetHumidityPercent_x10>
     e8e:	99 83       	std	Y+1, r25	; 0x01
     e90:	88 83       	st	Y, r24
			self->temperature = hih8120GetTemperature_x10();
     e92:	0e 94 5a 20 	call	0x40b4	; 0x40b4 <hih8120GetTemperature_x10>
     e96:	9b 83       	std	Y+3, r25	; 0x03
     e98:	8a 83       	std	Y+2, r24	; 0x02
			printf("humidity and temperature done bit set\n");
     e9a:	8d ec       	ldi	r24, 0xCD	; 205
     e9c:	93 e0       	ldi	r25, 0x03	; 3
     e9e:	0e 94 9c 31 	call	0x6338	; 0x6338 <puts>
			
		}
		
		vTaskDelay(1000);
     ea2:	68 ee       	ldi	r22, 0xE8	; 232
     ea4:	73 e0       	ldi	r23, 0x03	; 3
     ea6:	80 e0       	ldi	r24, 0x00	; 0
     ea8:	90 e0       	ldi	r25, 0x00	; 0
     eaa:	0e 94 32 18 	call	0x3064	; 0x3064 <vTaskDelay>
		//set done bit so that device knows meassurement is done
		xEventGroupSetBits(_readyEventGroup, _readyBit);
     eae:	40 91 b0 08 	lds	r20, 0x08B0	; 0x8008b0 <_readyBit>
     eb2:	50 91 b1 08 	lds	r21, 0x08B1	; 0x8008b1 <_readyBit+0x1>
     eb6:	60 91 b2 08 	lds	r22, 0x08B2	; 0x8008b2 <_readyBit+0x2>
     eba:	70 91 b3 08 	lds	r23, 0x08B3	; 0x8008b3 <_readyBit+0x3>
     ebe:	80 91 b4 08 	lds	r24, 0x08B4	; 0x8008b4 <_readyEventGroup>
     ec2:	90 91 b5 08 	lds	r25, 0x08B5	; 0x8008b5 <_readyEventGroup+0x1>
     ec6:	f4 d2       	rcall	.+1512   	; 0x14b0 <xEventGroupSetBits>
	}
}
     ec8:	df 91       	pop	r29
     eca:	cf 91       	pop	r28
     ecc:	1f 91       	pop	r17
     ece:	0f 91       	pop	r16
     ed0:	ff 90       	pop	r15
     ed2:	ef 90       	pop	r14
     ed4:	df 90       	pop	r13
     ed6:	cf 90       	pop	r12
     ed8:	08 95       	ret

00000eda <humAndTempReader_executeTask>:
	int16_t temperature;
	TaskHandle_t handleTask;
}humidityAndTemperature;

//actual task, methods devided so that it is possible to test
void humAndTempReader_executeTask(void* self) {
     eda:	ec 01       	movw	r28, r24
	for (;;) {
		humAndTempReader_measure((humAndTempReader_t)self);
     edc:	ce 01       	movw	r24, r28
     ede:	92 df       	rcall	.-220    	; 0xe04 <humAndTempReader_measure>
     ee0:	fd cf       	rjmp	.-6      	; 0xedc <humAndTempReader_executeTask+0x2>

00000ee2 <humAndTempReader_getHumidity>:
	}
}

uint16_t humAndTempReader_getHumidity(humAndTempReader_t self){
	return self->humidity;
}
     ee2:	fc 01       	movw	r30, r24
     ee4:	80 81       	ld	r24, Z
     ee6:	91 81       	ldd	r25, Z+1	; 0x01
     ee8:	08 95       	ret

00000eea <humAndTempReader_getTemperature>:

int16_t humAndTempReader_getTemperature(humAndTempReader_t self){
	return self->temperature;
}
     eea:	fc 01       	movw	r30, r24
     eec:	82 81       	ldd	r24, Z+2	; 0x02
     eee:	93 81       	ldd	r25, Z+3	; 0x03
     ef0:	08 95       	ret

00000ef2 <servo_initialise>:
#include "Servo.h"


void servo_initialise()
{
	rcServoCreate();		
     ef2:	0c 94 ba 27 	jmp	0x4f74	; 0x4f74 <rcServoCreate>
     ef6:	08 95       	ret

00000ef8 <servo_open>:
	//printf("Servo is up\n");
}

void servo_open()
{
	rcServoSet(0, 100);
     ef8:	64 e6       	ldi	r22, 0x64	; 100
     efa:	80 e0       	ldi	r24, 0x00	; 0
     efc:	0c 94 a2 27 	jmp	0x4f44	; 0x4f44 <rcServoSet>
     f00:	08 95       	ret

00000f02 <servo_close>:
}
void servo_close()
{
	rcServoSet(0, -100);
     f02:	6c e9       	ldi	r22, 0x9C	; 156
     f04:	80 e0       	ldi	r24, 0x00	; 0
     f06:	0c 94 a2 27 	jmp	0x4f44	; 0x4f44 <rcServoSet>
     f0a:	08 95       	ret

00000f0c <soundReader_create>:
}



//	RETURN TO DESTROY METHODS
void soundReader_destroy(soundReader_t self) {
     f0c:	2f 92       	push	r2
     f0e:	3f 92       	push	r3
     f10:	4f 92       	push	r4
     f12:	5f 92       	push	r5
     f14:	6f 92       	push	r6
     f16:	7f 92       	push	r7
     f18:	8f 92       	push	r8
     f1a:	9f 92       	push	r9
     f1c:	af 92       	push	r10
     f1e:	bf 92       	push	r11
     f20:	cf 92       	push	r12
     f22:	df 92       	push	r13
     f24:	ef 92       	push	r14
     f26:	ff 92       	push	r15
     f28:	0f 93       	push	r16
     f2a:	1f 93       	push	r17
     f2c:	cf 93       	push	r28
     f2e:	df 93       	push	r29
     f30:	88 2e       	mov	r8, r24
     f32:	96 2e       	mov	r9, r22
     f34:	1a 01       	movw	r2, r20
     f36:	28 01       	movw	r4, r16
     f38:	39 01       	movw	r6, r18
     f3a:	64 e0       	ldi	r22, 0x04	; 4
     f3c:	70 e0       	ldi	r23, 0x00	; 0
     f3e:	81 e0       	ldi	r24, 0x01	; 1
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	0e 94 96 2f 	call	0x5f2c	; 0x5f2c <calloc>
     f46:	ec 01       	movw	r28, r24
     f48:	00 97       	sbiw	r24, 0x00	; 0
     f4a:	51 f1       	breq	.+84     	; 0xfa0 <soundReader_create+0x94>
     f4c:	fc 01       	movw	r30, r24
     f4e:	11 92       	st	Z+, r1
     f50:	11 92       	st	Z+, r1
     f52:	30 92 c7 08 	sts	0x08C7, r3	; 0x8008c7 <_startMeasureEventGroup+0x1>
     f56:	20 92 c6 08 	sts	0x08C6, r2	; 0x8008c6 <_startMeasureEventGroup>
     f5a:	40 92 c2 08 	sts	0x08C2, r4	; 0x8008c2 <_startMeasureBit>
     f5e:	50 92 c3 08 	sts	0x08C3, r5	; 0x8008c3 <_startMeasureBit+0x1>
     f62:	60 92 c4 08 	sts	0x08C4, r6	; 0x8008c4 <_startMeasureBit+0x2>
     f66:	70 92 c5 08 	sts	0x08C5, r7	; 0x8008c5 <_startMeasureBit+0x3>
     f6a:	f0 92 c1 08 	sts	0x08C1, r15	; 0x8008c1 <_readyEventGroup+0x1>
     f6e:	e0 92 c0 08 	sts	0x08C0, r14	; 0x8008c0 <_readyEventGroup>
     f72:	a0 92 bc 08 	sts	0x08BC, r10	; 0x8008bc <_readyBit>
     f76:	b0 92 bd 08 	sts	0x08BD, r11	; 0x8008bd <_readyBit+0x1>
     f7a:	c0 92 be 08 	sts	0x08BE, r12	; 0x8008be <_readyBit+0x2>
     f7e:	d0 92 bf 08 	sts	0x08BF, r13	; 0x8008bf <_readyBit+0x3>
     f82:	49 2d       	mov	r20, r9
     f84:	50 e0       	ldi	r21, 0x00	; 0
     f86:	7f 01       	movw	r14, r30
     f88:	08 2d       	mov	r16, r8
     f8a:	9c 01       	movw	r18, r24
     f8c:	63 ef       	ldi	r22, 0xF3	; 243
     f8e:	73 e0       	ldi	r23, 0x03	; 3
     f90:	8c e3       	ldi	r24, 0x3C	; 60
     f92:	98 e0       	ldi	r25, 0x08	; 8
     f94:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <xTaskCreate>
     f98:	8f ef       	ldi	r24, 0xFF	; 255
     f9a:	93 e0       	ldi	r25, 0x03	; 3
     f9c:	0e 94 9c 31 	call	0x6338	; 0x6338 <puts>
     fa0:	ce 01       	movw	r24, r28
     fa2:	df 91       	pop	r29
     fa4:	cf 91       	pop	r28
     fa6:	1f 91       	pop	r17
     fa8:	0f 91       	pop	r16
     faa:	ff 90       	pop	r15
     fac:	ef 90       	pop	r14
     fae:	df 90       	pop	r13
     fb0:	cf 90       	pop	r12
     fb2:	bf 90       	pop	r11
     fb4:	af 90       	pop	r10
     fb6:	9f 90       	pop	r9
     fb8:	8f 90       	pop	r8
     fba:	7f 90       	pop	r7
     fbc:	6f 90       	pop	r6
     fbe:	5f 90       	pop	r5
     fc0:	4f 90       	pop	r4
     fc2:	3f 90       	pop	r3
     fc4:	2f 90       	pop	r2
     fc6:	08 95       	ret

00000fc8 <soundReader_measure>:
}

//actual task, methods devided so that it is possible to test


void soundReader_measure(soundReader_t self) {
     fc8:	cf 92       	push	r12
     fca:	df 92       	push	r13
     fcc:	ef 92       	push	r14
     fce:	ff 92       	push	r15
     fd0:	0f 93       	push	r16
     fd2:	1f 93       	push	r17
     fd4:	cf 93       	push	r28
     fd6:	df 93       	push	r29
     fd8:	ec 01       	movw	r28, r24
	
	EventBits_t uxBits = xEventGroupWaitBits(_startMeasureEventGroup, //eventGroup
     fda:	40 91 c2 08 	lds	r20, 0x08C2	; 0x8008c2 <_startMeasureBit>
     fde:	50 91 c3 08 	lds	r21, 0x08C3	; 0x8008c3 <_startMeasureBit+0x1>
     fe2:	60 91 c4 08 	lds	r22, 0x08C4	; 0x8008c4 <_startMeasureBit+0x2>
     fe6:	70 91 c5 08 	lds	r23, 0x08C5	; 0x8008c5 <_startMeasureBit+0x3>
     fea:	cc 24       	eor	r12, r12
     fec:	ca 94       	dec	r12
     fee:	dc 2c       	mov	r13, r12
     ff0:	76 01       	movw	r14, r12
     ff2:	01 e0       	ldi	r16, 0x01	; 1
     ff4:	21 e0       	ldi	r18, 0x01	; 1
     ff6:	80 91 c6 08 	lds	r24, 0x08C6	; 0x8008c6 <_startMeasureEventGroup>
     ffa:	90 91 c7 08 	lds	r25, 0x08C7	; 0x8008c7 <_startMeasureEventGroup+0x1>
     ffe:	98 d1       	rcall	.+816    	; 0x1330 <xEventGroupWaitBits>
	_startMeasureBit, //bits it is interested in
	pdTRUE, //clears the bits
	pdTRUE, //waits for both bits to be set
	portMAX_DELAY); //wait

	if ((uxBits & (_startMeasureBit)) == (_startMeasureBit)) {
    1000:	00 91 c2 08 	lds	r16, 0x08C2	; 0x8008c2 <_startMeasureBit>
    1004:	10 91 c3 08 	lds	r17, 0x08C3	; 0x8008c3 <_startMeasureBit+0x1>
    1008:	20 91 c4 08 	lds	r18, 0x08C4	; 0x8008c4 <_startMeasureBit+0x2>
    100c:	30 91 c5 08 	lds	r19, 0x08C5	; 0x8008c5 <_startMeasureBit+0x3>
    1010:	dc 01       	movw	r26, r24
    1012:	cb 01       	movw	r24, r22
    1014:	80 23       	and	r24, r16
    1016:	91 23       	and	r25, r17
    1018:	a2 23       	and	r26, r18
    101a:	b3 23       	and	r27, r19
    101c:	08 17       	cp	r16, r24
    101e:	19 07       	cpc	r17, r25
    1020:	2a 07       	cpc	r18, r26
    1022:	3b 07       	cpc	r19, r27
    1024:	01 f5       	brne	.+64     	; 0x1066 <soundReader_measure+0x9e>

		
		srand(time(NULL));
    1026:	80 e0       	ldi	r24, 0x00	; 0
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	5d da       	rcall	.-2886   	; 0x4e6 <time>
    102c:	cb 01       	movw	r24, r22
    102e:	0e 94 1b 31 	call	0x6236	; 0x6236 <srand>
		self->value = rand()%105 + 15;
    1032:	0e 94 18 31 	call	0x6230	; 0x6230 <rand>
    1036:	69 e6       	ldi	r22, 0x69	; 105
    1038:	70 e0       	ldi	r23, 0x00	; 0
    103a:	0e 94 45 2f 	call	0x5e8a	; 0x5e8a <__divmodhi4>
    103e:	0f 96       	adiw	r24, 0x0f	; 15
    1040:	99 83       	std	Y+1, r25	; 0x01
    1042:	88 83       	st	Y, r24
		
		
		//set done bit so that device knows measurement is done
		xEventGroupSetBits(_readyEventGroup, _readyBit);
    1044:	40 91 bc 08 	lds	r20, 0x08BC	; 0x8008bc <_readyBit>
    1048:	50 91 bd 08 	lds	r21, 0x08BD	; 0x8008bd <_readyBit+0x1>
    104c:	60 91 be 08 	lds	r22, 0x08BE	; 0x8008be <_readyBit+0x2>
    1050:	70 91 bf 08 	lds	r23, 0x08BF	; 0x8008bf <_readyBit+0x3>
    1054:	80 91 c0 08 	lds	r24, 0x08C0	; 0x8008c0 <_readyEventGroup>
    1058:	90 91 c1 08 	lds	r25, 0x08C1	; 0x8008c1 <_readyEventGroup+0x1>
    105c:	29 d2       	rcall	.+1106   	; 0x14b0 <xEventGroupSetBits>
		printf("SoundReader done bit set\n");
    105e:	8e e0       	ldi	r24, 0x0E	; 14
    1060:	94 e0       	ldi	r25, 0x04	; 4
    1062:	0e 94 9c 31 	call	0x6338	; 0x6338 <puts>
	}
}
    1066:	df 91       	pop	r29
    1068:	cf 91       	pop	r28
    106a:	1f 91       	pop	r17
    106c:	0f 91       	pop	r16
    106e:	ff 90       	pop	r15
    1070:	ef 90       	pop	r14
    1072:	df 90       	pop	r13
    1074:	cf 90       	pop	r12
    1076:	08 95       	ret

00001078 <soundReader_executeTask>:
	TaskHandle_t handleTask;
}soundReader;



void soundReader_executeTask(void* self) {
    1078:	ec 01       	movw	r28, r24
	for (;;) {
		soundReader_measure((soundReader_t)self);
    107a:	ce 01       	movw	r24, r28
    107c:	a5 df       	rcall	.-182    	; 0xfc8 <soundReader_measure>
    107e:	fd cf       	rjmp	.-6      	; 0x107a <soundReader_executeTask+0x2>

00001080 <soundReader_getSound>:
	}
}

uint16_t soundReader_getSound(soundReader_t self) {
	return self->value;
}
    1080:	fc 01       	movw	r30, r24
    1082:	80 81       	ld	r24, Z
    1084:	91 81       	ldd	r25, Z+1	; 0x01
    1086:	08 95       	ret

00001088 <lora_UpLinkHandler_create>:
	}
}


void lora_UpLinkHandler_create(UBaseType_t lora_handler_task_priority, MessageBufferHandle_t xMessageBuffer)
{
    1088:	ef 92       	push	r14
    108a:	ff 92       	push	r15
    108c:	0f 93       	push	r16
    108e:	9b 01       	movw	r18, r22
	_buffer = xMessageBuffer;
	
	
	
	xTaskCreate(
    1090:	e1 2c       	mov	r14, r1
    1092:	f1 2c       	mov	r15, r1
    1094:	08 2f       	mov	r16, r24
    1096:	48 e8       	ldi	r20, 0x88	; 136
    1098:	51 e0       	ldi	r21, 0x01	; 1
    109a:	67 e2       	ldi	r22, 0x27	; 39
    109c:	74 e0       	ldi	r23, 0x04	; 4
    109e:	8b e6       	ldi	r24, 0x6B	; 107
    10a0:	99 e0       	ldi	r25, 0x09	; 9
    10a2:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <xTaskCreate>
	,  (const portCHAR *)"LRUpHand"  // A name just for humans
	,  configMINIMAL_STACK_SIZE+200  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  xMessageBuffer
	,  lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}
    10a6:	0f 91       	pop	r16
    10a8:	ff 90       	pop	r15
    10aa:	ef 90       	pop	r14
    10ac:	08 95       	ret

000010ae <lora_UpLinkHandler_task>:
	
	/*Receives message from message buffer shared between it and the application responsible for gathering the data
	--> Should be called every 5 minutes from application
	*/
	void lora_UpLinkHandler_task(MessageBufferHandle_t xMessageBuffer)
	{	
    10ae:	df 92       	push	r13
    10b0:	ef 92       	push	r14
    10b2:	ff 92       	push	r15
    10b4:	0f 93       	push	r16
    10b6:	1f 93       	push	r17
    10b8:	cf 93       	push	r28
    10ba:	df 93       	push	r29
    10bc:	7c 01       	movw	r14, r24
		size_t xBytesToSend;
		char rxData[50];
		if (!isSet)
    10be:	80 91 c8 08 	lds	r24, 0x08C8	; 0x8008c8 <isSet>
    10c2:	81 11       	cpse	r24, r1
    10c4:	cf c0       	rjmp	.+414    	; 0x1264 <lora_UpLinkHandler_task+0x1b6>
		{
			// Hardware reset of LoRaWAN transceiver
			lora_driver_reset_rn2483(1);
    10c6:	81 e0       	ldi	r24, 0x01	; 1
    10c8:	0e 94 7a 23 	call	0x46f4	; 0x46f4 <lora_driver_reset_rn2483>
			vTaskDelay(2);
    10cc:	62 e0       	ldi	r22, 0x02	; 2
    10ce:	70 e0       	ldi	r23, 0x00	; 0
    10d0:	80 e0       	ldi	r24, 0x00	; 0
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	0e 94 32 18 	call	0x3064	; 0x3064 <vTaskDelay>
			lora_driver_reset_rn2483(0);
    10d8:	80 e0       	ldi	r24, 0x00	; 0
    10da:	0e 94 7a 23 	call	0x46f4	; 0x46f4 <lora_driver_reset_rn2483>
			// Give it a chance to wakeup
			vTaskDelay(150);
    10de:	66 e9       	ldi	r22, 0x96	; 150
    10e0:	70 e0       	ldi	r23, 0x00	; 0
    10e2:	80 e0       	ldi	r24, 0x00	; 0
    10e4:	90 e0       	ldi	r25, 0x00	; 0
    10e6:	0e 94 32 18 	call	0x3064	; 0x3064 <vTaskDelay>

			lora_driver_flush_buffers(); // get rid of first version string from module after reset!
    10ea:	0e 94 30 23 	call	0x4660	; 0x4660 <lora_driver_flush_buffers>


static void _lora_setup(void)
{
	e_LoRa_return_code_t rc;
	led_slow_blink(led_ST2); // OPTIONAL: Led the green led blink slowly while we are setting up LoRa
    10ee:	81 e0       	ldi	r24, 0x01	; 1
    10f0:	0e 94 88 21 	call	0x4310	; 0x4310 <led_slow_blink>
	//The below code is required to be executed only once due to the fact that these MAC settings
	// can be stored inside of the tranciever
	//START ON ONE TIME USE CODE

	// Factory reset the transceiver
	printf("FactoryReset >%s<\n", lora_driver_map_return_code_to_text(lora_driver_rn2483_factory_reset()));
    10f4:	0e 94 8e 23 	call	0x471c	; 0x471c <lora_driver_rn2483_factory_reset>
    10f8:	0e 94 0b 26 	call	0x4c16	; 0x4c16 <lora_driver_map_return_code_to_text>
    10fc:	9f 93       	push	r25
    10fe:	8f 93       	push	r24
    1100:	80 e3       	ldi	r24, 0x30	; 48
    1102:	94 e0       	ldi	r25, 0x04	; 4
    1104:	9f 93       	push	r25
    1106:	8f 93       	push	r24
    1108:	0e 94 89 31 	call	0x6312	; 0x6312 <printf>
	
	// Configure to EU868 LoRaWAN standards
	printf("Configure to EU868 >%s<\n", lora_driver_map_return_code_to_text(lora_driver_configure_to_eu868()));
    110c:	0e 94 0c 25 	call	0x4a18	; 0x4a18 <lora_driver_configure_to_eu868>
    1110:	0e 94 0b 26 	call	0x4c16	; 0x4c16 <lora_driver_map_return_code_to_text>
    1114:	9f 93       	push	r25
    1116:	8f 93       	push	r24
    1118:	83 e4       	ldi	r24, 0x43	; 67
    111a:	94 e0       	ldi	r25, 0x04	; 4
    111c:	9f 93       	push	r25
    111e:	8f 93       	push	r24
    1120:	0e 94 89 31 	call	0x6312	; 0x6312 <printf>

	// Get the transceivers HW EUI
	rc = lora_driver_get_rn2483_hweui(_out_buf);
    1124:	8f ed       	ldi	r24, 0xDF	; 223
    1126:	98 e0       	ldi	r25, 0x08	; 8
    1128:	0e 94 a0 23 	call	0x4740	; 0x4740 <lora_driver_get_rn2483_hweui>
	printf("Get HWEUI >%s<: %s\n",lora_driver_map_return_code_to_text(rc), _out_buf);
    112c:	0e 94 0b 26 	call	0x4c16	; 0x4c16 <lora_driver_map_return_code_to_text>
    1130:	cf ed       	ldi	r28, 0xDF	; 223
    1132:	d8 e0       	ldi	r29, 0x08	; 8
    1134:	df 93       	push	r29
    1136:	cf 93       	push	r28
    1138:	9f 93       	push	r25
    113a:	8f 93       	push	r24
    113c:	8c e5       	ldi	r24, 0x5C	; 92
    113e:	94 e0       	ldi	r25, 0x04	; 4
    1140:	9f 93       	push	r25
    1142:	8f 93       	push	r24
    1144:	0e 94 89 31 	call	0x6312	; 0x6312 <printf>

	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_map_return_code_to_text(lora_driver_set_device_identifier(_out_buf)));
    1148:	ce 01       	movw	r24, r28
    114a:	0e 94 bc 23 	call	0x4778	; 0x4778 <lora_driver_set_device_identifier>
    114e:	0e 94 0b 26 	call	0x4c16	; 0x4c16 <lora_driver_map_return_code_to_text>
    1152:	9f 93       	push	r25
    1154:	8f 93       	push	r24
    1156:	df 93       	push	r29
    1158:	cf 93       	push	r28
    115a:	80 e7       	ldi	r24, 0x70	; 112
    115c:	94 e0       	ldi	r25, 0x04	; 4
    115e:	9f 93       	push	r25
    1160:	8f 93       	push	r24
    1162:	0e 94 89 31 	call	0x6312	; 0x6312 <printf>

	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_map_return_code_to_text(lora_driver_set_otaa_identity(LORA_appEUI,LORA_appKEY,_out_buf)));
    1166:	ae 01       	movw	r20, r28
    1168:	65 e8       	ldi	r22, 0x85	; 133
    116a:	74 e0       	ldi	r23, 0x04	; 4
    116c:	86 ea       	ldi	r24, 0xA6	; 166
    116e:	94 e0       	ldi	r25, 0x04	; 4
    1170:	0e 94 ea 25 	call	0x4bd4	; 0x4bd4 <lora_driver_set_otaa_identity>
    1174:	0e 94 0b 26 	call	0x4c16	; 0x4c16 <lora_driver_map_return_code_to_text>
    1178:	9f 93       	push	r25
    117a:	8f 93       	push	r24
    117c:	df 93       	push	r29
    117e:	cf 93       	push	r28
    1180:	85 e8       	ldi	r24, 0x85	; 133
    1182:	94 e0       	ldi	r25, 0x04	; 4
    1184:	9f 93       	push	r25
    1186:	8f 93       	push	r24
    1188:	86 ea       	ldi	r24, 0xA6	; 166
    118a:	94 e0       	ldi	r25, 0x04	; 4
    118c:	9f 93       	push	r25
    118e:	8f 93       	push	r24
    1190:	87 eb       	ldi	r24, 0xB7	; 183
    1192:	94 e0       	ldi	r25, 0x04	; 4
    1194:	9f 93       	push	r25
    1196:	8f 93       	push	r24
    1198:	0e 94 89 31 	call	0x6312	; 0x6312 <printf>

	// Save all the MAC settings in the transceiver
	printf("Save mac >%s<\n",lora_driver_map_return_code_to_text(lora_driver_save_mac()));
    119c:	0e 94 ef 23 	call	0x47de	; 0x47de <lora_driver_save_mac>
    11a0:	0e 94 0b 26 	call	0x4c16	; 0x4c16 <lora_driver_map_return_code_to_text>
    11a4:	9f 93       	push	r25
    11a6:	8f 93       	push	r24
    11a8:	8d ee       	ldi	r24, 0xED	; 237
    11aa:	94 e0       	ldi	r25, 0x04	; 4
    11ac:	9f 93       	push	r25
    11ae:	8f 93       	push	r24
    11b0:	0e 94 89 31 	call	0x6312	; 0x6312 <printf>

	//END OF ONE TIME USE CODE
	
	
	// Enable Adaptive Data Rate
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_map_return_code_to_text(lora_driver_set_adaptive_data_rate(LoRa_ON)));
    11b4:	8d b7       	in	r24, 0x3d	; 61
    11b6:	9e b7       	in	r25, 0x3e	; 62
    11b8:	82 96       	adiw	r24, 0x22	; 34
    11ba:	0f b6       	in	r0, 0x3f	; 63
    11bc:	f8 94       	cli
    11be:	9e bf       	out	0x3e, r25	; 62
    11c0:	0f be       	out	0x3f, r0	; 63
    11c2:	8d bf       	out	0x3d, r24	; 61
    11c4:	81 e0       	ldi	r24, 0x01	; 1
    11c6:	0e 94 e9 24 	call	0x49d2	; 0x49d2 <lora_driver_set_adaptive_data_rate>
    11ca:	0e 94 0b 26 	call	0x4c16	; 0x4c16 <lora_driver_map_return_code_to_text>
    11ce:	9f 93       	push	r25
    11d0:	8f 93       	push	r24
    11d2:	8c ef       	ldi	r24, 0xFC	; 252
    11d4:	94 e0       	ldi	r25, 0x04	; 4
    11d6:	9f 93       	push	r25
    11d8:	8f 93       	push	r24
    11da:	0e 94 89 31 	call	0x6312	; 0x6312 <printf>

	// Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	printf("Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_map_return_code_to_text(lora_driver_set_receive_delay(500)));
    11de:	84 ef       	ldi	r24, 0xF4	; 244
    11e0:	91 e0       	ldi	r25, 0x01	; 1
    11e2:	0e 94 f4 24 	call	0x49e8	; 0x49e8 <lora_driver_set_receive_delay>
    11e6:	0e 94 0b 26 	call	0x4c16	; 0x4c16 <lora_driver_map_return_code_to_text>
    11ea:	9f 93       	push	r25
    11ec:	8f 93       	push	r24
    11ee:	81 e0       	ldi	r24, 0x01	; 1
    11f0:	8f 93       	push	r24
    11f2:	84 ef       	ldi	r24, 0xF4	; 244
    11f4:	8f 93       	push	r24
    11f6:	8d e1       	ldi	r24, 0x1D	; 29
    11f8:	95 e0       	ldi	r25, 0x05	; 5
    11fa:	9f 93       	push	r25
    11fc:	8f 93       	push	r24
    11fe:	0e 94 89 31 	call	0x6312	; 0x6312 <printf>
    1202:	8d b7       	in	r24, 0x3d	; 61
    1204:	9e b7       	in	r25, 0x3e	; 62
    1206:	0a 96       	adiw	r24, 0x0a	; 10
    1208:	0f b6       	in	r0, 0x3f	; 63
    120a:	f8 94       	cli
    120c:	9e bf       	out	0x3e, r25	; 62
    120e:	0f be       	out	0x3f, r0	; 63
    1210:	8d bf       	out	0x3d, r24	; 61
    1212:	ca e0       	ldi	r28, 0x0A	; 10
    1214:	d0 e0       	ldi	r29, 0x00	; 0
	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
	
	do {
		rc = lora_driver_join(LoRa_OTAA);
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_map_return_code_to_text(rc));
    1216:	0d e3       	ldi	r16, 0x3D	; 61
    1218:	15 e0       	ldi	r17, 0x05	; 5

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
	
	do {
		rc = lora_driver_join(LoRa_OTAA);
    121a:	80 e0       	ldi	r24, 0x00	; 0
    121c:	0e 94 f5 23 	call	0x47ea	; 0x47ea <lora_driver_join>
    1220:	d8 2e       	mov	r13, r24
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_map_return_code_to_text(rc));
    1222:	0e 94 0b 26 	call	0x4c16	; 0x4c16 <lora_driver_map_return_code_to_text>
    1226:	9f 93       	push	r25
    1228:	8f 93       	push	r24
    122a:	df 93       	push	r29
    122c:	cf 93       	push	r28
    122e:	1f 93       	push	r17
    1230:	0f 93       	push	r16
    1232:	0e 94 89 31 	call	0x6312	; 0x6312 <printf>

		if ( rc != LoRa_ACCEPTED)
    1236:	0f 90       	pop	r0
    1238:	0f 90       	pop	r0
    123a:	0f 90       	pop	r0
    123c:	0f 90       	pop	r0
    123e:	0f 90       	pop	r0
    1240:	0f 90       	pop	r0
    1242:	88 e0       	ldi	r24, 0x08	; 8
    1244:	d8 16       	cp	r13, r24
    1246:	89 f1       	breq	.+98     	; 0x12aa <lora_UpLinkHandler_task+0x1fc>
		{
			// Make the red led pulse to tell something went wrong
			led_long_puls(led_ST1); // OPTIONAL
    1248:	80 e0       	ldi	r24, 0x00	; 0
    124a:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <led_long_puls>
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
    124e:	66 e3       	ldi	r22, 0x36	; 54
    1250:	71 e0       	ldi	r23, 0x01	; 1
    1252:	80 e0       	ldi	r24, 0x00	; 0
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	0e 94 32 18 	call	0x3064	; 0x3064 <vTaskDelay>
    125a:	21 97       	sbiw	r28, 0x01	; 1
		}
		else
		{
			break;
		}
	} while (--maxJoinTriesLeft);
    125c:	f1 f6       	brne	.-68     	; 0x121a <lora_UpLinkHandler_task+0x16c>
    125e:	2c c0       	rjmp	.+88     	; 0x12b8 <lora_UpLinkHandler_task+0x20a>
		led_fast_blink(led_ST1); // OPTIONAL

		// Lets stay here
		while (1)
		{
			taskYIELD();
    1260:	3f d4       	rcall	.+2174   	; 0x1ae0 <vPortYield>
    1262:	fe cf       	rjmp	.-4      	; 0x1260 <lora_UpLinkHandler_task+0x1b2>
			isSet=true;
		}
		

		
		xBytesToSend = xMessageBufferReceive(xMessageBuffer, (void*) &_uplink_payload,
    1264:	00 e0       	ldi	r16, 0x00	; 0
    1266:	10 e0       	ldi	r17, 0x00	; 0
    1268:	98 01       	movw	r18, r16
    126a:	42 e3       	ldi	r20, 0x32	; 50
    126c:	50 e0       	ldi	r21, 0x00	; 0
    126e:	69 ec       	ldi	r22, 0xC9	; 201
    1270:	78 e0       	ldi	r23, 0x08	; 8
    1272:	c7 01       	movw	r24, r14
    1274:	0e 94 2f 14 	call	0x285e	; 0x285e <xStreamBufferReceive>
		sizeof(rxData),0);
		if(xBytesToSend >= sizeof(uint8_t)*2)
    1278:	02 97       	sbiw	r24, 0x02	; 2
    127a:	28 f1       	brcs	.+74     	; 0x12c6 <lora_UpLinkHandler_task+0x218>
			//_uplink_payload = (_uplink_payload) &rxData;
			
			/**< Status led ST4 (BLUE)*/
			//Makes the led light up in a short period.
			
			led_short_puls(led_ST4);
    127c:	83 e0       	ldi	r24, 0x03	; 3
    127e:	0e 94 06 22 	call	0x440c	; 0x440c <led_short_puls>
			//printf("The temperature2 in upLink is: %d\n", _uplink_payload.bytes[1]);
			//printf("The humidity in upLink is: %u\n", _uplink_payload.bytes[2]);
			//printf("The humidity2 in upLink is: %u\n", _uplink_payload.bytes[3]);
			
			
			printf("Upload Message >%s<\n", lora_driver_map_return_code_to_text(lora_driver_sent_upload_message(false, &_uplink_payload)));
    1282:	69 ec       	ldi	r22, 0xC9	; 201
    1284:	78 e0       	ldi	r23, 0x08	; 8
    1286:	80 e0       	ldi	r24, 0x00	; 0
    1288:	0e 94 1e 24 	call	0x483c	; 0x483c <lora_driver_sent_upload_message>
    128c:	0e 94 0b 26 	call	0x4c16	; 0x4c16 <lora_driver_map_return_code_to_text>
    1290:	9f 93       	push	r25
    1292:	8f 93       	push	r24
    1294:	8d e5       	ldi	r24, 0x5D	; 93
    1296:	95 e0       	ldi	r25, 0x05	; 5
    1298:	9f 93       	push	r25
    129a:	8f 93       	push	r24
    129c:	0e 94 89 31 	call	0x6312	; 0x6312 <printf>
    12a0:	0f 90       	pop	r0
    12a2:	0f 90       	pop	r0
    12a4:	0f 90       	pop	r0
    12a6:	0f 90       	pop	r0
		}
	}
    12a8:	0e c0       	rjmp	.+28     	; 0x12c6 <lora_UpLinkHandler_task+0x218>

	if (rc == LoRa_ACCEPTED)
	{
		// Connected to LoRaWAN :-)
		// Make the green led steady
		led_led_on(led_ST2); // OPTIONAL
    12aa:	81 e0       	ldi	r24, 0x01	; 1
    12ac:	0e 94 d6 21 	call	0x43ac	; 0x43ac <led_led_on>
			vTaskDelay(150);

			lora_driver_flush_buffers(); // get rid of first version string from module after reset!

			_lora_setup();
			isSet=true;
    12b0:	81 e0       	ldi	r24, 0x01	; 1
    12b2:	80 93 c8 08 	sts	0x08C8, r24	; 0x8008c8 <isSet>
    12b6:	d6 cf       	rjmp	.-84     	; 0x1264 <lora_UpLinkHandler_task+0x1b6>
	}
	else
	{
		// Something went wrong
		// Turn off the green led
		led_led_off(led_ST2); // OPTIONAL
    12b8:	81 e0       	ldi	r24, 0x01	; 1
    12ba:	0e 94 e5 21 	call	0x43ca	; 0x43ca <led_led_off>
		// Make the red led blink fast to tell something went wrong
		led_fast_blink(led_ST1); // OPTIONAL
    12be:	80 e0       	ldi	r24, 0x00	; 0
    12c0:	0e 94 af 21 	call	0x435e	; 0x435e <led_fast_blink>
    12c4:	cd cf       	rjmp	.-102    	; 0x1260 <lora_UpLinkHandler_task+0x1b2>
			//printf("The humidity2 in upLink is: %u\n", _uplink_payload.bytes[3]);
			
			
			printf("Upload Message >%s<\n", lora_driver_map_return_code_to_text(lora_driver_sent_upload_message(false, &_uplink_payload)));
		}
	}
    12c6:	df 91       	pop	r29
    12c8:	cf 91       	pop	r28
    12ca:	1f 91       	pop	r17
    12cc:	0f 91       	pop	r16
    12ce:	ff 90       	pop	r15
    12d0:	ef 90       	pop	r14
    12d2:	df 90       	pop	r13
    12d4:	08 95       	ret

000012d6 <lora_UpLinkHandler_startTask>:
static bool isSet=false;

/*Check for the parameters*/


void lora_UpLinkHandler_startTask(void* xMessageBuffer){
    12d6:	ec 01       	movw	r28, r24
	for(;;)
	{
		lora_UpLinkHandler_task((MessageBufferHandle_t)xMessageBuffer);
    12d8:	ce 01       	movw	r24, r28
    12da:	e9 de       	rcall	.-558    	; 0x10ae <lora_UpLinkHandler_task>
		vTaskDelay(3000);
    12dc:	68 eb       	ldi	r22, 0xB8	; 184
    12de:	7b e0       	ldi	r23, 0x0B	; 11
    12e0:	80 e0       	ldi	r24, 0x00	; 0
    12e2:	90 e0       	ldi	r25, 0x00	; 0
    12e4:	0e 94 32 18 	call	0x3064	; 0x3064 <vTaskDelay>
    12e8:	f7 cf       	rjmp	.-18     	; 0x12d8 <lora_UpLinkHandler_startTask+0x2>

000012ea <task_switch_in>:
	void task_switch_in(uint8_t task_no) {
		 #ifdef HAL_DEFS_H_

		 #else
		 // Used on VIA MEGA Shield rev. 2.0.0
		 PORTK &= 0b11110000;
    12ea:	e8 e0       	ldi	r30, 0x08	; 8
    12ec:	f1 e0       	ldi	r31, 0x01	; 1
    12ee:	90 81       	ld	r25, Z
    12f0:	90 7f       	andi	r25, 0xF0	; 240
    12f2:	90 83       	st	Z, r25
		 PORTK |= (task_no & 0b00001111);
    12f4:	90 81       	ld	r25, Z
    12f6:	8f 70       	andi	r24, 0x0F	; 15
    12f8:	98 2b       	or	r25, r24
    12fa:	90 83       	st	Z, r25
    12fc:	08 95       	ret

000012fe <task_switch_out>:
	void task_switch_out(uint8_t task_no) {
		#ifdef HAL_DEFS_H_

		#else
		// Used on VIA MEGA Shield rev. 2.0.0
		PORTK &= 0b11110000;
    12fe:	e8 e0       	ldi	r30, 0x08	; 8
    1300:	f1 e0       	ldi	r31, 0x01	; 1
    1302:	80 81       	ld	r24, Z
    1304:	80 7f       	andi	r24, 0xF0	; 240
    1306:	80 83       	st	Z, r24
    1308:	08 95       	ret

0000130a <xEventGroupCreate>:
        uxReturn = pxEventBits->uxEventBits;
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
    130a:	cf 93       	push	r28
    130c:	df 93       	push	r29
    130e:	80 e1       	ldi	r24, 0x10	; 16
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	b4 d1       	rcall	.+872    	; 0x167c <pvPortMalloc>
    1314:	ec 01       	movw	r28, r24
    1316:	00 97       	sbiw	r24, 0x00	; 0
    1318:	39 f0       	breq	.+14     	; 0x1328 <xEventGroupCreate+0x1e>
    131a:	fc 01       	movw	r30, r24
    131c:	11 92       	st	Z+, r1
    131e:	11 92       	st	Z+, r1
    1320:	11 92       	st	Z+, r1
    1322:	11 92       	st	Z+, r1
    1324:	cf 01       	movw	r24, r30
    1326:	94 d2       	rcall	.+1320   	; 0x1850 <vListInitialise>
    1328:	ce 01       	movw	r24, r28
    132a:	df 91       	pop	r29
    132c:	cf 91       	pop	r28
    132e:	08 95       	ret

00001330 <xEventGroupWaitBits>:
    1330:	2f 92       	push	r2
    1332:	3f 92       	push	r3
    1334:	4f 92       	push	r4
    1336:	5f 92       	push	r5
    1338:	6f 92       	push	r6
    133a:	7f 92       	push	r7
    133c:	8f 92       	push	r8
    133e:	9f 92       	push	r9
    1340:	af 92       	push	r10
    1342:	bf 92       	push	r11
    1344:	cf 92       	push	r12
    1346:	df 92       	push	r13
    1348:	ef 92       	push	r14
    134a:	ff 92       	push	r15
    134c:	0f 93       	push	r16
    134e:	1f 93       	push	r17
    1350:	cf 93       	push	r28
    1352:	df 93       	push	r29
    1354:	ec 01       	movw	r28, r24
    1356:	4a 01       	movw	r8, r20
    1358:	5b 01       	movw	r10, r22
    135a:	62 2e       	mov	r6, r18
    135c:	70 2e       	mov	r7, r16
    135e:	0e 94 cd 16 	call	0x2d9a	; 0x2d9a <vTaskSuspendAll>
    1362:	28 80       	ld	r2, Y
    1364:	39 80       	ldd	r3, Y+1	; 0x01
    1366:	4a 80       	ldd	r4, Y+2	; 0x02
    1368:	5b 80       	ldd	r5, Y+3	; 0x03
    136a:	01 11       	cpse	r16, r1
    136c:	0d c0       	rjmp	.+26     	; 0x1388 <xEventGroupWaitBits+0x58>
    136e:	81 e0       	ldi	r24, 0x01	; 1
    1370:	b2 01       	movw	r22, r4
    1372:	a1 01       	movw	r20, r2
    1374:	48 21       	and	r20, r8
    1376:	59 21       	and	r21, r9
    1378:	6a 21       	and	r22, r10
    137a:	7b 21       	and	r23, r11
    137c:	45 2b       	or	r20, r21
    137e:	46 2b       	or	r20, r22
    1380:	47 2b       	or	r20, r23
    1382:	79 f4       	brne	.+30     	; 0x13a2 <xEventGroupWaitBits+0x72>
    1384:	80 e0       	ldi	r24, 0x00	; 0
    1386:	0d c0       	rjmp	.+26     	; 0x13a2 <xEventGroupWaitBits+0x72>
    1388:	81 e0       	ldi	r24, 0x01	; 1
    138a:	b2 01       	movw	r22, r4
    138c:	a1 01       	movw	r20, r2
    138e:	48 21       	and	r20, r8
    1390:	59 21       	and	r21, r9
    1392:	6a 21       	and	r22, r10
    1394:	7b 21       	and	r23, r11
    1396:	48 15       	cp	r20, r8
    1398:	59 05       	cpc	r21, r9
    139a:	6a 05       	cpc	r22, r10
    139c:	7b 05       	cpc	r23, r11
    139e:	09 f0       	breq	.+2      	; 0x13a2 <xEventGroupWaitBits+0x72>
    13a0:	80 e0       	ldi	r24, 0x00	; 0
    13a2:	88 23       	and	r24, r24
    13a4:	81 f0       	breq	.+32     	; 0x13c6 <xEventGroupWaitBits+0x96>
    13a6:	66 20       	and	r6, r6
    13a8:	09 f4       	brne	.+2      	; 0x13ac <xEventGroupWaitBits+0x7c>
    13aa:	6b c0       	rjmp	.+214    	; 0x1482 <xEventGroupWaitBits+0x152>
    13ac:	80 94       	com	r8
    13ae:	90 94       	com	r9
    13b0:	a0 94       	com	r10
    13b2:	b0 94       	com	r11
    13b4:	82 20       	and	r8, r2
    13b6:	93 20       	and	r9, r3
    13b8:	a4 20       	and	r10, r4
    13ba:	b5 20       	and	r11, r5
    13bc:	88 82       	st	Y, r8
    13be:	99 82       	std	Y+1, r9	; 0x01
    13c0:	aa 82       	std	Y+2, r10	; 0x02
    13c2:	bb 82       	std	Y+3, r11	; 0x03
    13c4:	5e c0       	rjmp	.+188    	; 0x1482 <xEventGroupWaitBits+0x152>
    13c6:	c1 14       	cp	r12, r1
    13c8:	d1 04       	cpc	r13, r1
    13ca:	e1 04       	cpc	r14, r1
    13cc:	f1 04       	cpc	r15, r1
    13ce:	09 f4       	brne	.+2      	; 0x13d2 <xEventGroupWaitBits+0xa2>
    13d0:	58 c0       	rjmp	.+176    	; 0x1482 <xEventGroupWaitBits+0x152>
    13d2:	66 20       	and	r6, r6
    13d4:	29 f0       	breq	.+10     	; 0x13e0 <xEventGroupWaitBits+0xb0>
    13d6:	40 e0       	ldi	r20, 0x00	; 0
    13d8:	50 e0       	ldi	r21, 0x00	; 0
    13da:	60 e0       	ldi	r22, 0x00	; 0
    13dc:	71 e0       	ldi	r23, 0x01	; 1
    13de:	03 c0       	rjmp	.+6      	; 0x13e6 <xEventGroupWaitBits+0xb6>
    13e0:	40 e0       	ldi	r20, 0x00	; 0
    13e2:	50 e0       	ldi	r21, 0x00	; 0
    13e4:	ba 01       	movw	r22, r20
    13e6:	71 10       	cpse	r7, r1
    13e8:	74 60       	ori	r23, 0x04	; 4
    13ea:	48 29       	or	r20, r8
    13ec:	59 29       	or	r21, r9
    13ee:	6a 29       	or	r22, r10
    13f0:	7b 29       	or	r23, r11
    13f2:	97 01       	movw	r18, r14
    13f4:	86 01       	movw	r16, r12
    13f6:	ce 01       	movw	r24, r28
    13f8:	04 96       	adiw	r24, 0x04	; 4
    13fa:	0e 94 e1 18 	call	0x31c2	; 0x31c2 <vTaskPlaceOnUnorderedEventList>
    13fe:	0e 94 b6 17 	call	0x2f6c	; 0x2f6c <xTaskResumeAll>
    1402:	81 11       	cpse	r24, r1
    1404:	01 c0       	rjmp	.+2      	; 0x1408 <xEventGroupWaitBits+0xd8>
    1406:	6c d3       	rcall	.+1752   	; 0x1ae0 <vPortYield>
    1408:	0e 94 28 1b 	call	0x3650	; 0x3650 <uxTaskResetEventItemValue>
    140c:	91 fd       	sbrc	r25, 1
    140e:	35 c0       	rjmp	.+106    	; 0x147a <xEventGroupWaitBits+0x14a>
    1410:	0f b6       	in	r0, 0x3f	; 63
    1412:	f8 94       	cli
    1414:	0f 92       	push	r0
    1416:	68 81       	ld	r22, Y
    1418:	79 81       	ldd	r23, Y+1	; 0x01
    141a:	8a 81       	ldd	r24, Y+2	; 0x02
    141c:	9b 81       	ldd	r25, Y+3	; 0x03
    141e:	71 10       	cpse	r7, r1
    1420:	0d c0       	rjmp	.+26     	; 0x143c <xEventGroupWaitBits+0x10c>
    1422:	21 e0       	ldi	r18, 0x01	; 1
    1424:	75 01       	movw	r14, r10
    1426:	64 01       	movw	r12, r8
    1428:	c6 22       	and	r12, r22
    142a:	d7 22       	and	r13, r23
    142c:	e8 22       	and	r14, r24
    142e:	f9 22       	and	r15, r25
    1430:	cd 28       	or	r12, r13
    1432:	ce 28       	or	r12, r14
    1434:	cf 28       	or	r12, r15
    1436:	79 f4       	brne	.+30     	; 0x1456 <xEventGroupWaitBits+0x126>
    1438:	20 e0       	ldi	r18, 0x00	; 0
    143a:	0d c0       	rjmp	.+26     	; 0x1456 <xEventGroupWaitBits+0x126>
    143c:	21 e0       	ldi	r18, 0x01	; 1
    143e:	75 01       	movw	r14, r10
    1440:	64 01       	movw	r12, r8
    1442:	c6 22       	and	r12, r22
    1444:	d7 22       	and	r13, r23
    1446:	e8 22       	and	r14, r24
    1448:	f9 22       	and	r15, r25
    144a:	c8 14       	cp	r12, r8
    144c:	d9 04       	cpc	r13, r9
    144e:	ea 04       	cpc	r14, r10
    1450:	fb 04       	cpc	r15, r11
    1452:	09 f0       	breq	.+2      	; 0x1456 <xEventGroupWaitBits+0x126>
    1454:	20 e0       	ldi	r18, 0x00	; 0
    1456:	22 23       	and	r18, r18
    1458:	71 f0       	breq	.+28     	; 0x1476 <xEventGroupWaitBits+0x146>
    145a:	66 20       	and	r6, r6
    145c:	61 f0       	breq	.+24     	; 0x1476 <xEventGroupWaitBits+0x146>
    145e:	80 94       	com	r8
    1460:	90 94       	com	r9
    1462:	a0 94       	com	r10
    1464:	b0 94       	com	r11
    1466:	86 22       	and	r8, r22
    1468:	97 22       	and	r9, r23
    146a:	a8 22       	and	r10, r24
    146c:	b9 22       	and	r11, r25
    146e:	88 82       	st	Y, r8
    1470:	99 82       	std	Y+1, r9	; 0x01
    1472:	aa 82       	std	Y+2, r10	; 0x02
    1474:	bb 82       	std	Y+3, r11	; 0x03
    1476:	0f 90       	pop	r0
    1478:	0f be       	out	0x3f, r0	; 63
    147a:	1b 01       	movw	r2, r22
    147c:	2c 01       	movw	r4, r24
    147e:	55 24       	eor	r5, r5
    1480:	02 c0       	rjmp	.+4      	; 0x1486 <xEventGroupWaitBits+0x156>
    1482:	0e 94 b6 17 	call	0x2f6c	; 0x2f6c <xTaskResumeAll>
    1486:	c2 01       	movw	r24, r4
    1488:	b1 01       	movw	r22, r2
    148a:	df 91       	pop	r29
    148c:	cf 91       	pop	r28
    148e:	1f 91       	pop	r17
    1490:	0f 91       	pop	r16
    1492:	ff 90       	pop	r15
    1494:	ef 90       	pop	r14
    1496:	df 90       	pop	r13
    1498:	cf 90       	pop	r12
    149a:	bf 90       	pop	r11
    149c:	af 90       	pop	r10
    149e:	9f 90       	pop	r9
    14a0:	8f 90       	pop	r8
    14a2:	7f 90       	pop	r7
    14a4:	6f 90       	pop	r6
    14a6:	5f 90       	pop	r5
    14a8:	4f 90       	pop	r4
    14aa:	3f 90       	pop	r3
    14ac:	2f 90       	pop	r2
    14ae:	08 95       	ret

000014b0 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
    14b0:	4f 92       	push	r4
    14b2:	5f 92       	push	r5
    14b4:	6f 92       	push	r6
    14b6:	7f 92       	push	r7
    14b8:	8f 92       	push	r8
    14ba:	9f 92       	push	r9
    14bc:	af 92       	push	r10
    14be:	bf 92       	push	r11
    14c0:	cf 92       	push	r12
    14c2:	df 92       	push	r13
    14c4:	ef 92       	push	r14
    14c6:	ff 92       	push	r15
    14c8:	0f 93       	push	r16
    14ca:	1f 93       	push	r17
    14cc:	cf 93       	push	r28
    14ce:	df 93       	push	r29
    14d0:	ec 01       	movw	r28, r24
    14d2:	6a 01       	movw	r12, r20
    14d4:	7b 01       	movw	r14, r22
    itself. */
    configASSERT( xEventGroup );
    configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

    pxList = &( pxEventBits->xTasksWaitingForBits );
    pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    14d6:	8c 01       	movw	r16, r24
    14d8:	09 5f       	subi	r16, 0xF9	; 249
    14da:	1f 4f       	sbci	r17, 0xFF	; 255
    vTaskSuspendAll();
    14dc:	0e 94 cd 16 	call	0x2d9a	; 0x2d9a <vTaskSuspendAll>
    {
        traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

        pxListItem = listGET_HEAD_ENTRY( pxList );
    14e0:	eb 85       	ldd	r30, Y+11	; 0x0b
    14e2:	fc 85       	ldd	r31, Y+12	; 0x0c

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;
    14e4:	88 81       	ld	r24, Y
    14e6:	99 81       	ldd	r25, Y+1	; 0x01
    14e8:	aa 81       	ldd	r26, Y+2	; 0x02
    14ea:	bb 81       	ldd	r27, Y+3	; 0x03
    14ec:	c8 2a       	or	r12, r24
    14ee:	d9 2a       	or	r13, r25
    14f0:	ea 2a       	or	r14, r26
    14f2:	fb 2a       	or	r15, r27
    14f4:	c8 82       	st	Y, r12
    14f6:	d9 82       	std	Y+1, r13	; 0x01
    14f8:	ea 82       	std	Y+2, r14	; 0x02
    14fa:	fb 82       	std	Y+3, r15	; 0x03

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
    14fc:	0e 17       	cp	r16, r30
    14fe:	1f 07       	cpc	r17, r31
    1500:	09 f4       	brne	.+2      	; 0x1504 <xEventGroupSetBits+0x54>
    1502:	45 c0       	rjmp	.+138    	; 0x158e <xEventGroupSetBits+0xde>
    1504:	c1 2c       	mov	r12, r1
    1506:	d1 2c       	mov	r13, r1
    1508:	76 01       	movw	r14, r12
            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
                {
                    xMatchFound = pdTRUE;
    150a:	99 24       	eor	r9, r9
    150c:	93 94       	inc	r9
    150e:	81 2c       	mov	r8, r1
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
    1510:	a4 80       	ldd	r10, Z+4	; 0x04
    1512:	b5 80       	ldd	r11, Z+5	; 0x05
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
    1514:	80 81       	ld	r24, Z
    1516:	91 81       	ldd	r25, Z+1	; 0x01
    1518:	a2 81       	ldd	r26, Z+2	; 0x02
    151a:	b3 81       	ldd	r27, Z+3	; 0x03
            xMatchFound = pdFALSE;

            /* Split the bits waited for from the control bits. */
            uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
            uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
    151c:	ac 01       	movw	r20, r24
    151e:	bd 01       	movw	r22, r26
    1520:	77 27       	eor	r23, r23

            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
    1522:	b2 fd       	sbrc	r27, 2
    1524:	0f c0       	rjmp	.+30     	; 0x1544 <xEventGroupSetBits+0x94>
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
                {
                    xMatchFound = pdTRUE;
    1526:	48 80       	ld	r4, Y
    1528:	59 80       	ldd	r5, Y+1	; 0x01
    152a:	6a 80       	ldd	r6, Y+2	; 0x02
    152c:	7b 80       	ldd	r7, Y+3	; 0x03
    152e:	44 22       	and	r4, r20
    1530:	55 22       	and	r5, r21
    1532:	66 22       	and	r6, r22
    1534:	77 22       	and	r7, r23
    1536:	29 2d       	mov	r18, r9
    1538:	45 28       	or	r4, r5
    153a:	46 28       	or	r4, r6
    153c:	47 28       	or	r4, r7
    153e:	89 f4       	brne	.+34     	; 0x1562 <xEventGroupSetBits+0xb2>
    1540:	28 2d       	mov	r18, r8
    1542:	0f c0       	rjmp	.+30     	; 0x1562 <xEventGroupSetBits+0xb2>
    1544:	48 80       	ld	r4, Y
    1546:	59 80       	ldd	r5, Y+1	; 0x01
    1548:	6a 80       	ldd	r6, Y+2	; 0x02
    154a:	7b 80       	ldd	r7, Y+3	; 0x03
    154c:	44 22       	and	r4, r20
    154e:	55 22       	and	r5, r21
    1550:	66 22       	and	r6, r22
    1552:	77 22       	and	r7, r23
    1554:	29 2d       	mov	r18, r9
    1556:	44 16       	cp	r4, r20
    1558:	55 06       	cpc	r5, r21
    155a:	66 06       	cpc	r6, r22
    155c:	77 06       	cpc	r7, r23
    155e:	09 f0       	breq	.+2      	; 0x1562 <xEventGroupSetBits+0xb2>
    1560:	28 2d       	mov	r18, r8
            else
            {
                /* Need all bits to be set, but not all the bits were set. */
            }

            if( xMatchFound != pdFALSE )
    1562:	22 23       	and	r18, r18
    1564:	71 f0       	breq	.+28     	; 0x1582 <xEventGroupSetBits+0xd2>
            {
                /* The bits match.  Should the bits be cleared on exit? */
                if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
    1566:	b0 ff       	sbrs	r27, 0
    1568:	04 c0       	rjmp	.+8      	; 0x1572 <xEventGroupSetBits+0xc2>
                {
                    uxBitsToClear |= uxBitsWaitedFor;
    156a:	c4 2a       	or	r12, r20
    156c:	d5 2a       	or	r13, r21
    156e:	e6 2a       	or	r14, r22
    1570:	f7 2a       	or	r15, r23
                /* Store the actual event flag value in the task's event list
                item before removing the task from the event list.  The
                eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                that is was unblocked due to its required bits matching, rather
                than because it timed out. */
                vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
    1572:	48 81       	ld	r20, Y
    1574:	59 81       	ldd	r21, Y+1	; 0x01
    1576:	6a 81       	ldd	r22, Y+2	; 0x02
    1578:	7b 81       	ldd	r23, Y+3	; 0x03
    157a:	72 60       	ori	r23, 0x02	; 2
    157c:	cf 01       	movw	r24, r30
    157e:	0e 94 67 19 	call	0x32ce	; 0x32ce <vTaskRemoveFromUnorderedEventList>
    1582:	ea 2d       	mov	r30, r10
    1584:	fb 2d       	mov	r31, r11

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
    1586:	0e 17       	cp	r16, r30
    1588:	1f 07       	cpc	r17, r31
    158a:	11 f6       	brne	.-124    	; 0x1510 <xEventGroupSetBits+0x60>
    158c:	03 c0       	rjmp	.+6      	; 0x1594 <xEventGroupSetBits+0xe4>
EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
    158e:	c1 2c       	mov	r12, r1
    1590:	d1 2c       	mov	r13, r1
    1592:	76 01       	movw	r14, r12
            pxListItem = pxNext;
        }

        /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
        bit was set in the control word. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
    1594:	c0 94       	com	r12
    1596:	d0 94       	com	r13
    1598:	e0 94       	com	r14
    159a:	f0 94       	com	r15
    159c:	88 81       	ld	r24, Y
    159e:	99 81       	ldd	r25, Y+1	; 0x01
    15a0:	aa 81       	ldd	r26, Y+2	; 0x02
    15a2:	bb 81       	ldd	r27, Y+3	; 0x03
    15a4:	c8 22       	and	r12, r24
    15a6:	d9 22       	and	r13, r25
    15a8:	ea 22       	and	r14, r26
    15aa:	fb 22       	and	r15, r27
    15ac:	c8 82       	st	Y, r12
    15ae:	d9 82       	std	Y+1, r13	; 0x01
    15b0:	ea 82       	std	Y+2, r14	; 0x02
    15b2:	fb 82       	std	Y+3, r15	; 0x03
    }
    ( void ) xTaskResumeAll();
    15b4:	0e 94 b6 17 	call	0x2f6c	; 0x2f6c <xTaskResumeAll>

    return pxEventBits->uxEventBits;
    15b8:	68 81       	ld	r22, Y
    15ba:	79 81       	ldd	r23, Y+1	; 0x01
    15bc:	8a 81       	ldd	r24, Y+2	; 0x02
    15be:	9b 81       	ldd	r25, Y+3	; 0x03
}
    15c0:	df 91       	pop	r29
    15c2:	cf 91       	pop	r28
    15c4:	1f 91       	pop	r17
    15c6:	0f 91       	pop	r16
    15c8:	ff 90       	pop	r15
    15ca:	ef 90       	pop	r14
    15cc:	df 90       	pop	r13
    15ce:	cf 90       	pop	r12
    15d0:	bf 90       	pop	r11
    15d2:	af 90       	pop	r10
    15d4:	9f 90       	pop	r9
    15d6:	8f 90       	pop	r8
    15d8:	7f 90       	pop	r7
    15da:	6f 90       	pop	r6
    15dc:	5f 90       	pop	r5
    15de:	4f 90       	pop	r4
    15e0:	08 95       	ret

000015e2 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
    15e2:	cf 93       	push	r28
    15e4:	df 93       	push	r29
    15e6:	dc 01       	movw	r26, r24
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
    15e8:	eb e4       	ldi	r30, 0x4B	; 75
    15ea:	f9 e0       	ldi	r31, 0x09	; 9
    15ec:	01 c0       	rjmp	.+2      	; 0x15f0 <prvInsertBlockIntoFreeList+0xe>
    15ee:	f9 01       	movw	r30, r18
    15f0:	20 81       	ld	r18, Z
    15f2:	31 81       	ldd	r19, Z+1	; 0x01
    15f4:	2a 17       	cp	r18, r26
    15f6:	3b 07       	cpc	r19, r27
    15f8:	d0 f3       	brcs	.-12     	; 0x15ee <prvInsertBlockIntoFreeList+0xc>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
    15fa:	82 81       	ldd	r24, Z+2	; 0x02
    15fc:	93 81       	ldd	r25, Z+3	; 0x03
    15fe:	af 01       	movw	r20, r30
    1600:	48 0f       	add	r20, r24
    1602:	59 1f       	adc	r21, r25
    1604:	a4 17       	cp	r26, r20
    1606:	b5 07       	cpc	r27, r21
    1608:	49 f4       	brne	.+18     	; 0x161c <prvInsertBlockIntoFreeList+0x3a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
    160a:	12 96       	adiw	r26, 0x02	; 2
    160c:	4d 91       	ld	r20, X+
    160e:	5c 91       	ld	r21, X
    1610:	13 97       	sbiw	r26, 0x03	; 3
    1612:	84 0f       	add	r24, r20
    1614:	95 1f       	adc	r25, r21
    1616:	93 83       	std	Z+3, r25	; 0x03
    1618:	82 83       	std	Z+2, r24	; 0x02
    161a:	df 01       	movw	r26, r30
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
    161c:	12 96       	adiw	r26, 0x02	; 2
    161e:	8d 91       	ld	r24, X+
    1620:	9c 91       	ld	r25, X
    1622:	13 97       	sbiw	r26, 0x03	; 3
    1624:	ed 01       	movw	r28, r26
    1626:	c8 0f       	add	r28, r24
    1628:	d9 1f       	adc	r29, r25
    162a:	2c 17       	cp	r18, r28
    162c:	3d 07       	cpc	r19, r29
    162e:	d9 f4       	brne	.+54     	; 0x1666 <prvInsertBlockIntoFreeList+0x84>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
    1630:	20 91 49 09 	lds	r18, 0x0949	; 0x800949 <pxEnd>
    1634:	30 91 4a 09 	lds	r19, 0x094A	; 0x80094a <pxEnd+0x1>
    1638:	c2 17       	cp	r28, r18
    163a:	d3 07       	cpc	r29, r19
    163c:	81 f0       	breq	.+32     	; 0x165e <prvInsertBlockIntoFreeList+0x7c>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
    163e:	2a 81       	ldd	r18, Y+2	; 0x02
    1640:	3b 81       	ldd	r19, Y+3	; 0x03
    1642:	82 0f       	add	r24, r18
    1644:	93 1f       	adc	r25, r19
    1646:	13 96       	adiw	r26, 0x03	; 3
    1648:	9c 93       	st	X, r25
    164a:	8e 93       	st	-X, r24
    164c:	12 97       	sbiw	r26, 0x02	; 2
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
    164e:	c0 81       	ld	r28, Z
    1650:	d1 81       	ldd	r29, Z+1	; 0x01
    1652:	88 81       	ld	r24, Y
    1654:	99 81       	ldd	r25, Y+1	; 0x01
    1656:	11 96       	adiw	r26, 0x01	; 1
    1658:	9c 93       	st	X, r25
    165a:	8e 93       	st	-X, r24
    165c:	07 c0       	rjmp	.+14     	; 0x166c <prvInsertBlockIntoFreeList+0x8a>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
    165e:	11 96       	adiw	r26, 0x01	; 1
    1660:	dc 93       	st	X, r29
    1662:	ce 93       	st	-X, r28
    1664:	03 c0       	rjmp	.+6      	; 0x166c <prvInsertBlockIntoFreeList+0x8a>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
    1666:	11 96       	adiw	r26, 0x01	; 1
    1668:	3c 93       	st	X, r19
    166a:	2e 93       	st	-X, r18

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
    166c:	ae 17       	cp	r26, r30
    166e:	bf 07       	cpc	r27, r31
    1670:	11 f0       	breq	.+4      	; 0x1676 <prvInsertBlockIntoFreeList+0x94>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
    1672:	b1 83       	std	Z+1, r27	; 0x01
    1674:	a0 83       	st	Z, r26
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    1676:	df 91       	pop	r29
    1678:	cf 91       	pop	r28
    167a:	08 95       	ret

0000167c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    167c:	cf 92       	push	r12
    167e:	df 92       	push	r13
    1680:	ef 92       	push	r14
    1682:	ff 92       	push	r15
    1684:	0f 93       	push	r16
    1686:	1f 93       	push	r17
    1688:	cf 93       	push	r28
    168a:	df 93       	push	r29
    168c:	ec 01       	movw	r28, r24
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
    168e:	0e 94 cd 16 	call	0x2d9a	; 0x2d9a <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
    1692:	80 91 49 09 	lds	r24, 0x0949	; 0x800949 <pxEnd>
    1696:	90 91 4a 09 	lds	r25, 0x094A	; 0x80094a <pxEnd+0x1>
    169a:	89 2b       	or	r24, r25
    169c:	41 f5       	brne	.+80     	; 0x16ee <pvPortMalloc+0x72>

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
    169e:	eb e4       	ldi	r30, 0x4B	; 75
    16a0:	f9 e0       	ldi	r31, 0x09	; 9
    16a2:	af e4       	ldi	r26, 0x4F	; 79
    16a4:	b9 e0       	ldi	r27, 0x09	; 9
    16a6:	b1 83       	std	Z+1, r27	; 0x01
    16a8:	a0 83       	st	Z, r26
	xStart.xBlockSize = ( size_t ) 0;
    16aa:	13 82       	std	Z+3, r1	; 0x03
    16ac:	12 82       	std	Z+2, r1	; 0x02
	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
	uxAddress -= xHeapStructSize;
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
	pxEnd = ( void * ) uxAddress;
    16ae:	eb ee       	ldi	r30, 0xEB	; 235
    16b0:	f8 e1       	ldi	r31, 0x18	; 24
    16b2:	f0 93 4a 09 	sts	0x094A, r31	; 0x80094a <pxEnd+0x1>
    16b6:	e0 93 49 09 	sts	0x0949, r30	; 0x800949 <pxEnd>
	pxEnd->xBlockSize = 0;
    16ba:	13 82       	std	Z+3, r1	; 0x03
    16bc:	12 82       	std	Z+2, r1	; 0x02
	pxEnd->pxNextFreeBlock = NULL;
    16be:	11 82       	std	Z+1, r1	; 0x01
    16c0:	10 82       	st	Z, r1

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
    16c2:	8c e9       	ldi	r24, 0x9C	; 156
    16c4:	9f e0       	ldi	r25, 0x0F	; 15
    16c6:	13 96       	adiw	r26, 0x03	; 3
    16c8:	9c 93       	st	X, r25
    16ca:	8e 93       	st	-X, r24
    16cc:	12 97       	sbiw	r26, 0x02	; 2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
    16ce:	ed 93       	st	X+, r30
    16d0:	fc 93       	st	X, r31

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
    16d2:	90 93 46 09 	sts	0x0946, r25	; 0x800946 <xMinimumEverFreeBytesRemaining+0x1>
    16d6:	80 93 45 09 	sts	0x0945, r24	; 0x800945 <xMinimumEverFreeBytesRemaining>
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
    16da:	90 93 48 09 	sts	0x0948, r25	; 0x800948 <xFreeBytesRemaining+0x1>
    16de:	80 93 47 09 	sts	0x0947, r24	; 0x800947 <xFreeBytesRemaining>

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
    16e2:	80 e0       	ldi	r24, 0x00	; 0
    16e4:	90 e8       	ldi	r25, 0x80	; 128
    16e6:	90 93 44 09 	sts	0x0944, r25	; 0x800944 <xBlockAllocatedBit+0x1>
    16ea:	80 93 43 09 	sts	0x0943, r24	; 0x800943 <xBlockAllocatedBit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
    16ee:	e0 90 43 09 	lds	r14, 0x0943	; 0x800943 <xBlockAllocatedBit>
    16f2:	f0 90 44 09 	lds	r15, 0x0944	; 0x800944 <xBlockAllocatedBit+0x1>
    16f6:	c7 01       	movw	r24, r14
    16f8:	8c 23       	and	r24, r28
    16fa:	9d 23       	and	r25, r29
    16fc:	89 2b       	or	r24, r25
    16fe:	09 f0       	breq	.+2      	; 0x1702 <pvPortMalloc+0x86>
    1700:	66 c0       	rjmp	.+204    	; 0x17ce <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
    1702:	20 97       	sbiw	r28, 0x00	; 0
    1704:	09 f4       	brne	.+2      	; 0x1708 <pvPortMalloc+0x8c>
    1706:	66 c0       	rjmp	.+204    	; 0x17d4 <pvPortMalloc+0x158>
			{
				xWantedSize += xHeapStructSize;
    1708:	ae 01       	movw	r20, r28
    170a:	4c 5f       	subi	r20, 0xFC	; 252
    170c:	5f 4f       	sbci	r21, 0xFF	; 255
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
    170e:	09 f4       	brne	.+2      	; 0x1712 <pvPortMalloc+0x96>
    1710:	5e c0       	rjmp	.+188    	; 0x17ce <pvPortMalloc+0x152>
    1712:	00 91 47 09 	lds	r16, 0x0947	; 0x800947 <xFreeBytesRemaining>
    1716:	10 91 48 09 	lds	r17, 0x0948	; 0x800948 <xFreeBytesRemaining+0x1>
    171a:	04 17       	cp	r16, r20
    171c:	15 07       	cpc	r17, r21
    171e:	08 f4       	brcc	.+2      	; 0x1722 <pvPortMalloc+0xa6>
    1720:	56 c0       	rjmp	.+172    	; 0x17ce <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
    1722:	c0 91 4b 09 	lds	r28, 0x094B	; 0x80094b <xStart>
    1726:	d0 91 4c 09 	lds	r29, 0x094C	; 0x80094c <xStart+0x1>

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
    172a:	eb e4       	ldi	r30, 0x4B	; 75
    172c:	f9 e0       	ldi	r31, 0x09	; 9
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    172e:	02 c0       	rjmp	.+4      	; 0x1734 <pvPortMalloc+0xb8>
    1730:	fe 01       	movw	r30, r28
				{
					pxPreviousBlock = pxBlock;
					pxBlock = pxBlock->pxNextFreeBlock;
    1732:	e9 01       	movw	r28, r18
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    1734:	2a 81       	ldd	r18, Y+2	; 0x02
    1736:	3b 81       	ldd	r19, Y+3	; 0x03
    1738:	24 17       	cp	r18, r20
    173a:	35 07       	cpc	r19, r21
    173c:	28 f4       	brcc	.+10     	; 0x1748 <pvPortMalloc+0xcc>
    173e:	28 81       	ld	r18, Y
    1740:	39 81       	ldd	r19, Y+1	; 0x01
    1742:	21 15       	cp	r18, r1
    1744:	31 05       	cpc	r19, r1
    1746:	a1 f7       	brne	.-24     	; 0x1730 <pvPortMalloc+0xb4>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
    1748:	80 91 49 09 	lds	r24, 0x0949	; 0x800949 <pxEnd>
    174c:	90 91 4a 09 	lds	r25, 0x094A	; 0x80094a <pxEnd+0x1>
    1750:	c8 17       	cp	r28, r24
    1752:	d9 07       	cpc	r29, r25
    1754:	e1 f1       	breq	.+120    	; 0x17ce <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
    1756:	c0 80       	ld	r12, Z
    1758:	d1 80       	ldd	r13, Z+1	; 0x01
    175a:	84 e0       	ldi	r24, 0x04	; 4
    175c:	c8 0e       	add	r12, r24
    175e:	d1 1c       	adc	r13, r1

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    1760:	88 81       	ld	r24, Y
    1762:	99 81       	ldd	r25, Y+1	; 0x01
    1764:	91 83       	std	Z+1, r25	; 0x01
    1766:	80 83       	st	Z, r24

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    1768:	2a 81       	ldd	r18, Y+2	; 0x02
    176a:	3b 81       	ldd	r19, Y+3	; 0x03
    176c:	24 1b       	sub	r18, r20
    176e:	35 0b       	sbc	r19, r21
    1770:	29 30       	cpi	r18, 0x09	; 9
    1772:	31 05       	cpc	r19, r1
    1774:	48 f0       	brcs	.+18     	; 0x1788 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
    1776:	ce 01       	movw	r24, r28
    1778:	84 0f       	add	r24, r20
    177a:	95 1f       	adc	r25, r21
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    177c:	fc 01       	movw	r30, r24
    177e:	33 83       	std	Z+3, r19	; 0x03
    1780:	22 83       	std	Z+2, r18	; 0x02
						pxBlock->xBlockSize = xWantedSize;
    1782:	5b 83       	std	Y+3, r21	; 0x03
    1784:	4a 83       	std	Y+2, r20	; 0x02

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
    1786:	2d df       	rcall	.-422    	; 0x15e2 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
    1788:	8a 81       	ldd	r24, Y+2	; 0x02
    178a:	9b 81       	ldd	r25, Y+3	; 0x03
    178c:	08 1b       	sub	r16, r24
    178e:	19 0b       	sbc	r17, r25
    1790:	10 93 48 09 	sts	0x0948, r17	; 0x800948 <xFreeBytesRemaining+0x1>
    1794:	00 93 47 09 	sts	0x0947, r16	; 0x800947 <xFreeBytesRemaining>

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
    1798:	20 91 45 09 	lds	r18, 0x0945	; 0x800945 <xMinimumEverFreeBytesRemaining>
    179c:	30 91 46 09 	lds	r19, 0x0946	; 0x800946 <xMinimumEverFreeBytesRemaining+0x1>
    17a0:	02 17       	cp	r16, r18
    17a2:	13 07       	cpc	r17, r19
    17a4:	20 f4       	brcc	.+8      	; 0x17ae <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
    17a6:	10 93 46 09 	sts	0x0946, r17	; 0x800946 <xMinimumEverFreeBytesRemaining+0x1>
    17aa:	00 93 45 09 	sts	0x0945, r16	; 0x800945 <xMinimumEverFreeBytesRemaining>
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
    17ae:	e8 2a       	or	r14, r24
    17b0:	f9 2a       	or	r15, r25
    17b2:	fb 82       	std	Y+3, r15	; 0x03
    17b4:	ea 82       	std	Y+2, r14	; 0x02
					pxBlock->pxNextFreeBlock = NULL;
    17b6:	19 82       	std	Y+1, r1	; 0x01
    17b8:	18 82       	st	Y, r1
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    17ba:	0e 94 b6 17 	call	0x2f6c	; 0x2f6c <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
    17be:	c1 14       	cp	r12, r1
    17c0:	d1 04       	cpc	r13, r1
    17c2:	59 f4       	brne	.+22     	; 0x17da <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
    17c4:	0e 94 89 1e 	call	0x3d12	; 0x3d12 <vApplicationMallocFailedHook>
    17c8:	c1 2c       	mov	r12, r1
    17ca:	d1 2c       	mov	r13, r1
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
    17cc:	06 c0       	rjmp	.+12     	; 0x17da <pvPortMalloc+0x15e>
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    17ce:	0e 94 b6 17 	call	0x2f6c	; 0x2f6c <xTaskResumeAll>
    17d2:	f8 cf       	rjmp	.-16     	; 0x17c4 <pvPortMalloc+0x148>
    17d4:	0e 94 b6 17 	call	0x2f6c	; 0x2f6c <xTaskResumeAll>
    17d8:	f5 cf       	rjmp	.-22     	; 0x17c4 <pvPortMalloc+0x148>
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
}
    17da:	c6 01       	movw	r24, r12
    17dc:	df 91       	pop	r29
    17de:	cf 91       	pop	r28
    17e0:	1f 91       	pop	r17
    17e2:	0f 91       	pop	r16
    17e4:	ff 90       	pop	r15
    17e6:	ef 90       	pop	r14
    17e8:	df 90       	pop	r13
    17ea:	cf 90       	pop	r12
    17ec:	08 95       	ret

000017ee <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    17ee:	cf 93       	push	r28
    17f0:	df 93       	push	r29
uint8_t *puc = ( uint8_t * ) pv;
BlockLink_t *pxLink;

	if( pv != NULL )
    17f2:	00 97       	sbiw	r24, 0x00	; 0
    17f4:	51 f1       	breq	.+84     	; 0x184a <vPortFree+0x5c>

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
		configASSERT( pxLink->pxNextFreeBlock == NULL );

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
    17f6:	fc 01       	movw	r30, r24
    17f8:	34 97       	sbiw	r30, 0x04	; 4
    17fa:	22 81       	ldd	r18, Z+2	; 0x02
    17fc:	33 81       	ldd	r19, Z+3	; 0x03
    17fe:	40 91 43 09 	lds	r20, 0x0943	; 0x800943 <xBlockAllocatedBit>
    1802:	50 91 44 09 	lds	r21, 0x0944	; 0x800944 <xBlockAllocatedBit+0x1>
    1806:	b9 01       	movw	r22, r18
    1808:	64 23       	and	r22, r20
    180a:	75 23       	and	r23, r21
    180c:	67 2b       	or	r22, r23
    180e:	e9 f0       	breq	.+58     	; 0x184a <vPortFree+0x5c>
		{
			if( pxLink->pxNextFreeBlock == NULL )
    1810:	60 81       	ld	r22, Z
    1812:	71 81       	ldd	r23, Z+1	; 0x01
    1814:	67 2b       	or	r22, r23
    1816:	c9 f4       	brne	.+50     	; 0x184a <vPortFree+0x5c>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
    1818:	ef 01       	movw	r28, r30
    181a:	40 95       	com	r20
    181c:	50 95       	com	r21
    181e:	24 23       	and	r18, r20
    1820:	35 23       	and	r19, r21
    1822:	33 83       	std	Z+3, r19	; 0x03
    1824:	22 83       	std	Z+2, r18	; 0x02

				vTaskSuspendAll();
    1826:	0e 94 cd 16 	call	0x2d9a	; 0x2d9a <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
    182a:	20 91 47 09 	lds	r18, 0x0947	; 0x800947 <xFreeBytesRemaining>
    182e:	30 91 48 09 	lds	r19, 0x0948	; 0x800948 <xFreeBytesRemaining+0x1>
    1832:	8a 81       	ldd	r24, Y+2	; 0x02
    1834:	9b 81       	ldd	r25, Y+3	; 0x03
    1836:	82 0f       	add	r24, r18
    1838:	93 1f       	adc	r25, r19
    183a:	90 93 48 09 	sts	0x0948, r25	; 0x800948 <xFreeBytesRemaining+0x1>
    183e:	80 93 47 09 	sts	0x0947, r24	; 0x800947 <xFreeBytesRemaining>
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
    1842:	ce 01       	movw	r24, r28
    1844:	ce de       	rcall	.-612    	; 0x15e2 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
    1846:	0e 94 b6 17 	call	0x2f6c	; 0x2f6c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
    184a:	df 91       	pop	r29
    184c:	cf 91       	pop	r28
    184e:	08 95       	ret

00001850 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    1850:	fc 01       	movw	r30, r24
    /* The list structure contains a list item which is used to mark the
    end of the list.  To initialise the list the list end is inserted
    as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );            /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1852:	03 96       	adiw	r24, 0x03	; 3
    1854:	92 83       	std	Z+2, r25	; 0x02
    1856:	81 83       	std	Z+1, r24	; 0x01

    /* The list end value is the highest possible value in the list to
    ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
    1858:	4f ef       	ldi	r20, 0xFF	; 255
    185a:	5f ef       	ldi	r21, 0xFF	; 255
    185c:	ba 01       	movw	r22, r20
    185e:	43 83       	std	Z+3, r20	; 0x03
    1860:	54 83       	std	Z+4, r21	; 0x04
    1862:	65 83       	std	Z+5, r22	; 0x05
    1864:	76 83       	std	Z+6, r23	; 0x06

    /* The list end next and previous pointers point to itself so we know
    when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );    /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1866:	90 87       	std	Z+8, r25	; 0x08
    1868:	87 83       	std	Z+7, r24	; 0x07
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    186a:	92 87       	std	Z+10, r25	; 0x0a
    186c:	81 87       	std	Z+9, r24	; 0x09

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    186e:	10 82       	st	Z, r1
    1870:	08 95       	ret

00001872 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
    1872:	fc 01       	movw	r30, r24
    1874:	13 86       	std	Z+11, r1	; 0x0b
    1876:	12 86       	std	Z+10, r1	; 0x0a
    1878:	08 95       	ret

0000187a <vListInsertEnd>:
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    187a:	cf 93       	push	r28
    187c:	df 93       	push	r29
    187e:	9c 01       	movw	r18, r24
    1880:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
    1882:	dc 01       	movw	r26, r24
    1884:	11 96       	adiw	r26, 0x01	; 1
    1886:	cd 91       	ld	r28, X+
    1888:	dc 91       	ld	r29, X
    188a:	12 97       	sbiw	r26, 0x02	; 2
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
    makes the new list item the last item to be removed by a call to
    listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
    188c:	d5 83       	std	Z+5, r29	; 0x05
    188e:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    1890:	8e 81       	ldd	r24, Y+6	; 0x06
    1892:	9f 81       	ldd	r25, Y+7	; 0x07
    1894:	97 83       	std	Z+7, r25	; 0x07
    1896:	86 83       	std	Z+6, r24	; 0x06

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
    1898:	8e 81       	ldd	r24, Y+6	; 0x06
    189a:	9f 81       	ldd	r25, Y+7	; 0x07
    189c:	dc 01       	movw	r26, r24
    189e:	15 96       	adiw	r26, 0x05	; 5
    18a0:	7c 93       	st	X, r23
    18a2:	6e 93       	st	-X, r22
    18a4:	14 97       	sbiw	r26, 0x04	; 4
    pxIndex->pxPrevious = pxNewListItem;
    18a6:	7f 83       	std	Y+7, r23	; 0x07
    18a8:	6e 83       	std	Y+6, r22	; 0x06

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
    18aa:	33 87       	std	Z+11, r19	; 0x0b
    18ac:	22 87       	std	Z+10, r18	; 0x0a

    ( pxList->uxNumberOfItems )++;
    18ae:	f9 01       	movw	r30, r18
    18b0:	80 81       	ld	r24, Z
    18b2:	8f 5f       	subi	r24, 0xFF	; 255
    18b4:	80 83       	st	Z, r24
}
    18b6:	df 91       	pop	r29
    18b8:	cf 91       	pop	r28
    18ba:	08 95       	ret

000018bc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    18bc:	0f 93       	push	r16
    18be:	1f 93       	push	r17
    18c0:	cf 93       	push	r28
    18c2:	df 93       	push	r29
    18c4:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    18c6:	08 81       	ld	r16, Y
    18c8:	19 81       	ldd	r17, Y+1	; 0x01
    18ca:	2a 81       	ldd	r18, Y+2	; 0x02
    18cc:	3b 81       	ldd	r19, Y+3	; 0x03
    new list item should be placed after it.  This ensures that TCBs which are
    stored in ready lists (all of which have the same xItemValue value) get a
    share of the CPU.  However, if the xItemValue is the same as the back marker
    the iteration loop below will not end.  Therefore the value is checked
    first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
    18ce:	0f 3f       	cpi	r16, 0xFF	; 255
    18d0:	4f ef       	ldi	r20, 0xFF	; 255
    18d2:	14 07       	cpc	r17, r20
    18d4:	24 07       	cpc	r18, r20
    18d6:	34 07       	cpc	r19, r20
    18d8:	21 f4       	brne	.+8      	; 0x18e2 <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
    18da:	fc 01       	movw	r30, r24
    18dc:	a1 85       	ldd	r26, Z+9	; 0x09
    18de:	b2 85       	ldd	r27, Z+10	; 0x0a
    18e0:	11 c0       	rjmp	.+34     	; 0x1904 <vListInsert+0x48>
            4) Using a queue or semaphore before it has been initialised or
               before the scheduler has been started (are interrupts firing
               before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
    18e2:	dc 01       	movw	r26, r24
    18e4:	13 96       	adiw	r26, 0x03	; 3
    18e6:	01 c0       	rjmp	.+2      	; 0x18ea <vListInsert+0x2e>
    18e8:	df 01       	movw	r26, r30
    18ea:	14 96       	adiw	r26, 0x04	; 4
    18ec:	ed 91       	ld	r30, X+
    18ee:	fc 91       	ld	r31, X
    18f0:	15 97       	sbiw	r26, 0x05	; 5
    18f2:	40 81       	ld	r20, Z
    18f4:	51 81       	ldd	r21, Z+1	; 0x01
    18f6:	62 81       	ldd	r22, Z+2	; 0x02
    18f8:	73 81       	ldd	r23, Z+3	; 0x03
    18fa:	04 17       	cp	r16, r20
    18fc:	15 07       	cpc	r17, r21
    18fe:	26 07       	cpc	r18, r22
    1900:	37 07       	cpc	r19, r23
    1902:	90 f7       	brcc	.-28     	; 0x18e8 <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
            insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
    1904:	14 96       	adiw	r26, 0x04	; 4
    1906:	ed 91       	ld	r30, X+
    1908:	fc 91       	ld	r31, X
    190a:	15 97       	sbiw	r26, 0x05	; 5
    190c:	fd 83       	std	Y+5, r31	; 0x05
    190e:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    1910:	d7 83       	std	Z+7, r29	; 0x07
    1912:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
    1914:	bf 83       	std	Y+7, r27	; 0x07
    1916:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
    1918:	15 96       	adiw	r26, 0x05	; 5
    191a:	dc 93       	st	X, r29
    191c:	ce 93       	st	-X, r28
    191e:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
    item later. */
    pxNewListItem->pxContainer = pxList;
    1920:	9b 87       	std	Y+11, r25	; 0x0b
    1922:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
    1924:	fc 01       	movw	r30, r24
    1926:	20 81       	ld	r18, Z
    1928:	2f 5f       	subi	r18, 0xFF	; 255
    192a:	20 83       	st	Z, r18
}
    192c:	df 91       	pop	r29
    192e:	cf 91       	pop	r28
    1930:	1f 91       	pop	r17
    1932:	0f 91       	pop	r16
    1934:	08 95       	ret

00001936 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    1936:	cf 93       	push	r28
    1938:	df 93       	push	r29
    193a:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
    193c:	a2 85       	ldd	r26, Z+10	; 0x0a
    193e:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    1940:	c4 81       	ldd	r28, Z+4	; 0x04
    1942:	d5 81       	ldd	r29, Z+5	; 0x05
    1944:	86 81       	ldd	r24, Z+6	; 0x06
    1946:	97 81       	ldd	r25, Z+7	; 0x07
    1948:	9f 83       	std	Y+7, r25	; 0x07
    194a:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    194c:	c6 81       	ldd	r28, Z+6	; 0x06
    194e:	d7 81       	ldd	r29, Z+7	; 0x07
    1950:	84 81       	ldd	r24, Z+4	; 0x04
    1952:	95 81       	ldd	r25, Z+5	; 0x05
    1954:	9d 83       	std	Y+5, r25	; 0x05
    1956:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
    1958:	11 96       	adiw	r26, 0x01	; 1
    195a:	8d 91       	ld	r24, X+
    195c:	9c 91       	ld	r25, X
    195e:	12 97       	sbiw	r26, 0x02	; 2
    1960:	e8 17       	cp	r30, r24
    1962:	f9 07       	cpc	r31, r25
    1964:	31 f4       	brne	.+12     	; 0x1972 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
    1966:	86 81       	ldd	r24, Z+6	; 0x06
    1968:	97 81       	ldd	r25, Z+7	; 0x07
    196a:	12 96       	adiw	r26, 0x02	; 2
    196c:	9c 93       	st	X, r25
    196e:	8e 93       	st	-X, r24
    1970:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
    1972:	13 86       	std	Z+11, r1	; 0x0b
    1974:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
    1976:	8c 91       	ld	r24, X
    1978:	81 50       	subi	r24, 0x01	; 1
    197a:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
    197c:	8c 91       	ld	r24, X
}
    197e:	df 91       	pop	r29
    1980:	cf 91       	pop	r28
    1982:	08 95       	ret

00001984 <pxPortInitialiseStack>:
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    1984:	31 e1       	ldi	r19, 0x11	; 17
    1986:	fc 01       	movw	r30, r24
    1988:	30 83       	st	Z, r19
    198a:	31 97       	sbiw	r30, 0x01	; 1
    198c:	22 e2       	ldi	r18, 0x22	; 34
    198e:	20 83       	st	Z, r18
    1990:	31 97       	sbiw	r30, 0x01	; 1
    1992:	a3 e3       	ldi	r26, 0x33	; 51
    1994:	a0 83       	st	Z, r26
    1996:	31 97       	sbiw	r30, 0x01	; 1
    1998:	60 83       	st	Z, r22
    199a:	31 97       	sbiw	r30, 0x01	; 1
    199c:	70 83       	st	Z, r23
    199e:	31 97       	sbiw	r30, 0x01	; 1
    19a0:	10 82       	st	Z, r1
    19a2:	31 97       	sbiw	r30, 0x01	; 1
    19a4:	10 82       	st	Z, r1
    19a6:	31 97       	sbiw	r30, 0x01	; 1
    19a8:	60 e8       	ldi	r22, 0x80	; 128
    19aa:	60 83       	st	Z, r22
    19ac:	31 97       	sbiw	r30, 0x01	; 1
    19ae:	10 82       	st	Z, r1
    19b0:	31 97       	sbiw	r30, 0x01	; 1
    19b2:	10 82       	st	Z, r1
    19b4:	31 97       	sbiw	r30, 0x01	; 1
    19b6:	10 82       	st	Z, r1
    19b8:	31 97       	sbiw	r30, 0x01	; 1
    19ba:	62 e0       	ldi	r22, 0x02	; 2
    19bc:	60 83       	st	Z, r22
    19be:	31 97       	sbiw	r30, 0x01	; 1
    19c0:	63 e0       	ldi	r22, 0x03	; 3
    19c2:	60 83       	st	Z, r22
    19c4:	31 97       	sbiw	r30, 0x01	; 1
    19c6:	64 e0       	ldi	r22, 0x04	; 4
    19c8:	60 83       	st	Z, r22
    19ca:	31 97       	sbiw	r30, 0x01	; 1
    19cc:	65 e0       	ldi	r22, 0x05	; 5
    19ce:	60 83       	st	Z, r22
    19d0:	31 97       	sbiw	r30, 0x01	; 1
    19d2:	66 e0       	ldi	r22, 0x06	; 6
    19d4:	60 83       	st	Z, r22
    19d6:	31 97       	sbiw	r30, 0x01	; 1
    19d8:	67 e0       	ldi	r22, 0x07	; 7
    19da:	60 83       	st	Z, r22
    19dc:	31 97       	sbiw	r30, 0x01	; 1
    19de:	68 e0       	ldi	r22, 0x08	; 8
    19e0:	60 83       	st	Z, r22
    19e2:	31 97       	sbiw	r30, 0x01	; 1
    19e4:	69 e0       	ldi	r22, 0x09	; 9
    19e6:	60 83       	st	Z, r22
    19e8:	31 97       	sbiw	r30, 0x01	; 1
    19ea:	60 e1       	ldi	r22, 0x10	; 16
    19ec:	60 83       	st	Z, r22
    19ee:	31 97       	sbiw	r30, 0x01	; 1
    19f0:	30 83       	st	Z, r19
    19f2:	31 97       	sbiw	r30, 0x01	; 1
    19f4:	32 e1       	ldi	r19, 0x12	; 18
    19f6:	30 83       	st	Z, r19
    19f8:	31 97       	sbiw	r30, 0x01	; 1
    19fa:	33 e1       	ldi	r19, 0x13	; 19
    19fc:	30 83       	st	Z, r19
    19fe:	31 97       	sbiw	r30, 0x01	; 1
    1a00:	34 e1       	ldi	r19, 0x14	; 20
    1a02:	30 83       	st	Z, r19
    1a04:	31 97       	sbiw	r30, 0x01	; 1
    1a06:	35 e1       	ldi	r19, 0x15	; 21
    1a08:	30 83       	st	Z, r19
    1a0a:	31 97       	sbiw	r30, 0x01	; 1
    1a0c:	36 e1       	ldi	r19, 0x16	; 22
    1a0e:	30 83       	st	Z, r19
    1a10:	31 97       	sbiw	r30, 0x01	; 1
    1a12:	37 e1       	ldi	r19, 0x17	; 23
    1a14:	30 83       	st	Z, r19
    1a16:	31 97       	sbiw	r30, 0x01	; 1
    1a18:	38 e1       	ldi	r19, 0x18	; 24
    1a1a:	30 83       	st	Z, r19
    1a1c:	31 97       	sbiw	r30, 0x01	; 1
    1a1e:	39 e1       	ldi	r19, 0x19	; 25
    1a20:	30 83       	st	Z, r19
    1a22:	31 97       	sbiw	r30, 0x01	; 1
    1a24:	30 e2       	ldi	r19, 0x20	; 32
    1a26:	30 83       	st	Z, r19
    1a28:	31 97       	sbiw	r30, 0x01	; 1
    1a2a:	31 e2       	ldi	r19, 0x21	; 33
    1a2c:	30 83       	st	Z, r19
    1a2e:	31 97       	sbiw	r30, 0x01	; 1
    1a30:	20 83       	st	Z, r18
    1a32:	31 97       	sbiw	r30, 0x01	; 1
    1a34:	23 e2       	ldi	r18, 0x23	; 35
    1a36:	20 83       	st	Z, r18
    1a38:	31 97       	sbiw	r30, 0x01	; 1
    1a3a:	40 83       	st	Z, r20
    1a3c:	31 97       	sbiw	r30, 0x01	; 1
    1a3e:	50 83       	st	Z, r21
    1a40:	31 97       	sbiw	r30, 0x01	; 1
    1a42:	26 e2       	ldi	r18, 0x26	; 38
    1a44:	20 83       	st	Z, r18
    1a46:	31 97       	sbiw	r30, 0x01	; 1
    1a48:	27 e2       	ldi	r18, 0x27	; 39
    1a4a:	20 83       	st	Z, r18
    1a4c:	31 97       	sbiw	r30, 0x01	; 1
    1a4e:	28 e2       	ldi	r18, 0x28	; 40
    1a50:	20 83       	st	Z, r18
    1a52:	31 97       	sbiw	r30, 0x01	; 1
    1a54:	29 e2       	ldi	r18, 0x29	; 41
    1a56:	20 83       	st	Z, r18
    1a58:	31 97       	sbiw	r30, 0x01	; 1
    1a5a:	20 e3       	ldi	r18, 0x30	; 48
    1a5c:	20 83       	st	Z, r18
    1a5e:	31 97       	sbiw	r30, 0x01	; 1
    1a60:	21 e3       	ldi	r18, 0x31	; 49
    1a62:	20 83       	st	Z, r18
    1a64:	89 97       	sbiw	r24, 0x29	; 41
    1a66:	08 95       	ret

00001a68 <xPortStartScheduler>:
    1a68:	a8 95       	wdr
    1a6a:	90 ec       	ldi	r25, 0xC0	; 192
    1a6c:	88 e1       	ldi	r24, 0x18	; 24
    1a6e:	0f b6       	in	r0, 0x3f	; 63
    1a70:	f8 94       	cli
    1a72:	a8 95       	wdr
    1a74:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    1a78:	0f be       	out	0x3f, r0	; 63
    1a7a:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    1a7e:	a0 91 69 19 	lds	r26, 0x1969	; 0x801969 <pxCurrentTCB>
    1a82:	b0 91 6a 19 	lds	r27, 0x196A	; 0x80196a <pxCurrentTCB+0x1>
    1a86:	cd 91       	ld	r28, X+
    1a88:	cd bf       	out	0x3d, r28	; 61
    1a8a:	dd 91       	ld	r29, X+
    1a8c:	de bf       	out	0x3e, r29	; 62
    1a8e:	ff 91       	pop	r31
    1a90:	ef 91       	pop	r30
    1a92:	df 91       	pop	r29
    1a94:	cf 91       	pop	r28
    1a96:	bf 91       	pop	r27
    1a98:	af 91       	pop	r26
    1a9a:	9f 91       	pop	r25
    1a9c:	8f 91       	pop	r24
    1a9e:	7f 91       	pop	r23
    1aa0:	6f 91       	pop	r22
    1aa2:	5f 91       	pop	r21
    1aa4:	4f 91       	pop	r20
    1aa6:	3f 91       	pop	r19
    1aa8:	2f 91       	pop	r18
    1aaa:	1f 91       	pop	r17
    1aac:	0f 91       	pop	r16
    1aae:	ff 90       	pop	r15
    1ab0:	ef 90       	pop	r14
    1ab2:	df 90       	pop	r13
    1ab4:	cf 90       	pop	r12
    1ab6:	bf 90       	pop	r11
    1ab8:	af 90       	pop	r10
    1aba:	9f 90       	pop	r9
    1abc:	8f 90       	pop	r8
    1abe:	7f 90       	pop	r7
    1ac0:	6f 90       	pop	r6
    1ac2:	5f 90       	pop	r5
    1ac4:	4f 90       	pop	r4
    1ac6:	3f 90       	pop	r3
    1ac8:	2f 90       	pop	r2
    1aca:	1f 90       	pop	r1
    1acc:	0f 90       	pop	r0
    1ace:	0c be       	out	0x3c, r0	; 60
    1ad0:	0f 90       	pop	r0
    1ad2:	0b be       	out	0x3b, r0	; 59
    1ad4:	0f 90       	pop	r0
    1ad6:	0f be       	out	0x3f, r0	; 63
    1ad8:	0f 90       	pop	r0
    1ada:	08 95       	ret
    1adc:	81 e0       	ldi	r24, 0x01	; 1
    1ade:	08 95       	ret

00001ae0 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYield( void )
{
    portSAVE_CONTEXT();
    1ae0:	0f 92       	push	r0
    1ae2:	0f b6       	in	r0, 0x3f	; 63
    1ae4:	f8 94       	cli
    1ae6:	0f 92       	push	r0
    1ae8:	0b b6       	in	r0, 0x3b	; 59
    1aea:	0f 92       	push	r0
    1aec:	0c b6       	in	r0, 0x3c	; 60
    1aee:	0f 92       	push	r0
    1af0:	1f 92       	push	r1
    1af2:	11 24       	eor	r1, r1
    1af4:	2f 92       	push	r2
    1af6:	3f 92       	push	r3
    1af8:	4f 92       	push	r4
    1afa:	5f 92       	push	r5
    1afc:	6f 92       	push	r6
    1afe:	7f 92       	push	r7
    1b00:	8f 92       	push	r8
    1b02:	9f 92       	push	r9
    1b04:	af 92       	push	r10
    1b06:	bf 92       	push	r11
    1b08:	cf 92       	push	r12
    1b0a:	df 92       	push	r13
    1b0c:	ef 92       	push	r14
    1b0e:	ff 92       	push	r15
    1b10:	0f 93       	push	r16
    1b12:	1f 93       	push	r17
    1b14:	2f 93       	push	r18
    1b16:	3f 93       	push	r19
    1b18:	4f 93       	push	r20
    1b1a:	5f 93       	push	r21
    1b1c:	6f 93       	push	r22
    1b1e:	7f 93       	push	r23
    1b20:	8f 93       	push	r24
    1b22:	9f 93       	push	r25
    1b24:	af 93       	push	r26
    1b26:	bf 93       	push	r27
    1b28:	cf 93       	push	r28
    1b2a:	df 93       	push	r29
    1b2c:	ef 93       	push	r30
    1b2e:	ff 93       	push	r31
    1b30:	a0 91 69 19 	lds	r26, 0x1969	; 0x801969 <pxCurrentTCB>
    1b34:	b0 91 6a 19 	lds	r27, 0x196A	; 0x80196a <pxCurrentTCB+0x1>
    1b38:	0d b6       	in	r0, 0x3d	; 61
    1b3a:	0d 92       	st	X+, r0
    1b3c:	0e b6       	in	r0, 0x3e	; 62
    1b3e:	0d 92       	st	X+, r0
    vTaskSwitchContext();
    1b40:	0e 94 4b 18 	call	0x3096	; 0x3096 <vTaskSwitchContext>
    portRESTORE_CONTEXT();
    1b44:	a0 91 69 19 	lds	r26, 0x1969	; 0x801969 <pxCurrentTCB>
    1b48:	b0 91 6a 19 	lds	r27, 0x196A	; 0x80196a <pxCurrentTCB+0x1>
    1b4c:	cd 91       	ld	r28, X+
    1b4e:	cd bf       	out	0x3d, r28	; 61
    1b50:	dd 91       	ld	r29, X+
    1b52:	de bf       	out	0x3e, r29	; 62
    1b54:	ff 91       	pop	r31
    1b56:	ef 91       	pop	r30
    1b58:	df 91       	pop	r29
    1b5a:	cf 91       	pop	r28
    1b5c:	bf 91       	pop	r27
    1b5e:	af 91       	pop	r26
    1b60:	9f 91       	pop	r25
    1b62:	8f 91       	pop	r24
    1b64:	7f 91       	pop	r23
    1b66:	6f 91       	pop	r22
    1b68:	5f 91       	pop	r21
    1b6a:	4f 91       	pop	r20
    1b6c:	3f 91       	pop	r19
    1b6e:	2f 91       	pop	r18
    1b70:	1f 91       	pop	r17
    1b72:	0f 91       	pop	r16
    1b74:	ff 90       	pop	r15
    1b76:	ef 90       	pop	r14
    1b78:	df 90       	pop	r13
    1b7a:	cf 90       	pop	r12
    1b7c:	bf 90       	pop	r11
    1b7e:	af 90       	pop	r10
    1b80:	9f 90       	pop	r9
    1b82:	8f 90       	pop	r8
    1b84:	7f 90       	pop	r7
    1b86:	6f 90       	pop	r6
    1b88:	5f 90       	pop	r5
    1b8a:	4f 90       	pop	r4
    1b8c:	3f 90       	pop	r3
    1b8e:	2f 90       	pop	r2
    1b90:	1f 90       	pop	r1
    1b92:	0f 90       	pop	r0
    1b94:	0c be       	out	0x3c, r0	; 60
    1b96:	0f 90       	pop	r0
    1b98:	0b be       	out	0x3b, r0	; 59
    1b9a:	0f 90       	pop	r0
    1b9c:	0f be       	out	0x3f, r0	; 63
    1b9e:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
    1ba0:	08 95       	ret

00001ba2 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
    1ba2:	0f 92       	push	r0
    1ba4:	0f b6       	in	r0, 0x3f	; 63
    1ba6:	f8 94       	cli
    1ba8:	0f 92       	push	r0
    1baa:	0b b6       	in	r0, 0x3b	; 59
    1bac:	0f 92       	push	r0
    1bae:	0c b6       	in	r0, 0x3c	; 60
    1bb0:	0f 92       	push	r0
    1bb2:	1f 92       	push	r1
    1bb4:	11 24       	eor	r1, r1
    1bb6:	2f 92       	push	r2
    1bb8:	3f 92       	push	r3
    1bba:	4f 92       	push	r4
    1bbc:	5f 92       	push	r5
    1bbe:	6f 92       	push	r6
    1bc0:	7f 92       	push	r7
    1bc2:	8f 92       	push	r8
    1bc4:	9f 92       	push	r9
    1bc6:	af 92       	push	r10
    1bc8:	bf 92       	push	r11
    1bca:	cf 92       	push	r12
    1bcc:	df 92       	push	r13
    1bce:	ef 92       	push	r14
    1bd0:	ff 92       	push	r15
    1bd2:	0f 93       	push	r16
    1bd4:	1f 93       	push	r17
    1bd6:	2f 93       	push	r18
    1bd8:	3f 93       	push	r19
    1bda:	4f 93       	push	r20
    1bdc:	5f 93       	push	r21
    1bde:	6f 93       	push	r22
    1be0:	7f 93       	push	r23
    1be2:	8f 93       	push	r24
    1be4:	9f 93       	push	r25
    1be6:	af 93       	push	r26
    1be8:	bf 93       	push	r27
    1bea:	cf 93       	push	r28
    1bec:	df 93       	push	r29
    1bee:	ef 93       	push	r30
    1bf0:	ff 93       	push	r31
    1bf2:	a0 91 69 19 	lds	r26, 0x1969	; 0x801969 <pxCurrentTCB>
    1bf6:	b0 91 6a 19 	lds	r27, 0x196A	; 0x80196a <pxCurrentTCB+0x1>
    1bfa:	0d b6       	in	r0, 0x3d	; 61
    1bfc:	0d 92       	st	X+, r0
    1bfe:	0e b6       	in	r0, 0x3e	; 62
    1c00:	0d 92       	st	X+, r0

    sleep_reset();        //     reset the sleep_mode() faster than sleep_disable();
    1c02:	13 be       	out	0x33, r1	; 51

    if( xTaskIncrementTick() != pdFALSE )
    1c04:	0e 94 e1 16 	call	0x2dc2	; 0x2dc2 <xTaskIncrementTick>
    1c08:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
    1c0a:	0e 94 4b 18 	call	0x3096	; 0x3096 <vTaskSwitchContext>
    }

    portRESTORE_CONTEXT();
    1c0e:	a0 91 69 19 	lds	r26, 0x1969	; 0x801969 <pxCurrentTCB>
    1c12:	b0 91 6a 19 	lds	r27, 0x196A	; 0x80196a <pxCurrentTCB+0x1>
    1c16:	cd 91       	ld	r28, X+
    1c18:	cd bf       	out	0x3d, r28	; 61
    1c1a:	dd 91       	ld	r29, X+
    1c1c:	de bf       	out	0x3e, r29	; 62
    1c1e:	ff 91       	pop	r31
    1c20:	ef 91       	pop	r30
    1c22:	df 91       	pop	r29
    1c24:	cf 91       	pop	r28
    1c26:	bf 91       	pop	r27
    1c28:	af 91       	pop	r26
    1c2a:	9f 91       	pop	r25
    1c2c:	8f 91       	pop	r24
    1c2e:	7f 91       	pop	r23
    1c30:	6f 91       	pop	r22
    1c32:	5f 91       	pop	r21
    1c34:	4f 91       	pop	r20
    1c36:	3f 91       	pop	r19
    1c38:	2f 91       	pop	r18
    1c3a:	1f 91       	pop	r17
    1c3c:	0f 91       	pop	r16
    1c3e:	ff 90       	pop	r15
    1c40:	ef 90       	pop	r14
    1c42:	df 90       	pop	r13
    1c44:	cf 90       	pop	r12
    1c46:	bf 90       	pop	r11
    1c48:	af 90       	pop	r10
    1c4a:	9f 90       	pop	r9
    1c4c:	8f 90       	pop	r8
    1c4e:	7f 90       	pop	r7
    1c50:	6f 90       	pop	r6
    1c52:	5f 90       	pop	r5
    1c54:	4f 90       	pop	r4
    1c56:	3f 90       	pop	r3
    1c58:	2f 90       	pop	r2
    1c5a:	1f 90       	pop	r1
    1c5c:	0f 90       	pop	r0
    1c5e:	0c be       	out	0x3c, r0	; 60
    1c60:	0f 90       	pop	r0
    1c62:	0b be       	out	0x3b, r0	; 59
    1c64:	0f 90       	pop	r0
    1c66:	0f be       	out	0x3f, r0	; 63
    1c68:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
    1c6a:	08 95       	ret

00001c6c <__vector_12>:
     */
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
//  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
    1c6c:	9a df       	rcall	.-204    	; 0x1ba2 <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
    1c6e:	18 95       	reti

00001c70 <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    1c70:	0f b6       	in	r0, 0x3f	; 63
    1c72:	f8 94       	cli
    1c74:	0f 92       	push	r0
    1c76:	fc 01       	movw	r30, r24
    1c78:	96 8d       	ldd	r25, Z+30	; 0x1e
    1c7a:	0f 90       	pop	r0
    1c7c:	0f be       	out	0x3f, r0	; 63
    1c7e:	81 e0       	ldi	r24, 0x01	; 1
    1c80:	91 11       	cpse	r25, r1
    1c82:	80 e0       	ldi	r24, 0x00	; 0
    1c84:	08 95       	ret

00001c86 <prvCopyDataToQueue>:
    1c86:	0f 93       	push	r16
    1c88:	1f 93       	push	r17
    1c8a:	cf 93       	push	r28
    1c8c:	df 93       	push	r29
    1c8e:	ec 01       	movw	r28, r24
    1c90:	04 2f       	mov	r16, r20
    1c92:	1e 8d       	ldd	r17, Y+30	; 0x1e
    1c94:	48 a1       	ldd	r20, Y+32	; 0x20
    1c96:	41 11       	cpse	r20, r1
    1c98:	0c c0       	rjmp	.+24     	; 0x1cb2 <prvCopyDataToQueue+0x2c>
    1c9a:	88 81       	ld	r24, Y
    1c9c:	99 81       	ldd	r25, Y+1	; 0x01
    1c9e:	89 2b       	or	r24, r25
    1ca0:	09 f0       	breq	.+2      	; 0x1ca4 <prvCopyDataToQueue+0x1e>
    1ca2:	42 c0       	rjmp	.+132    	; 0x1d28 <prvCopyDataToQueue+0xa2>
    1ca4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ca6:	9d 81       	ldd	r25, Y+5	; 0x05
    1ca8:	0e 94 9c 1a 	call	0x3538	; 0x3538 <xTaskPriorityDisinherit>
    1cac:	1d 82       	std	Y+5, r1	; 0x05
    1cae:	1c 82       	std	Y+4, r1	; 0x04
    1cb0:	42 c0       	rjmp	.+132    	; 0x1d36 <prvCopyDataToQueue+0xb0>
    1cb2:	01 11       	cpse	r16, r1
    1cb4:	17 c0       	rjmp	.+46     	; 0x1ce4 <prvCopyDataToQueue+0x5e>
    1cb6:	50 e0       	ldi	r21, 0x00	; 0
    1cb8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cba:	9b 81       	ldd	r25, Y+3	; 0x03
    1cbc:	0e 94 2a 31 	call	0x6254	; 0x6254 <memcpy>
    1cc0:	28 a1       	ldd	r18, Y+32	; 0x20
    1cc2:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc4:	9b 81       	ldd	r25, Y+3	; 0x03
    1cc6:	82 0f       	add	r24, r18
    1cc8:	91 1d       	adc	r25, r1
    1cca:	9b 83       	std	Y+3, r25	; 0x03
    1ccc:	8a 83       	std	Y+2, r24	; 0x02
    1cce:	2c 81       	ldd	r18, Y+4	; 0x04
    1cd0:	3d 81       	ldd	r19, Y+5	; 0x05
    1cd2:	82 17       	cp	r24, r18
    1cd4:	93 07       	cpc	r25, r19
    1cd6:	50 f1       	brcs	.+84     	; 0x1d2c <prvCopyDataToQueue+0xa6>
    1cd8:	88 81       	ld	r24, Y
    1cda:	99 81       	ldd	r25, Y+1	; 0x01
    1cdc:	9b 83       	std	Y+3, r25	; 0x03
    1cde:	8a 83       	std	Y+2, r24	; 0x02
    1ce0:	80 e0       	ldi	r24, 0x00	; 0
    1ce2:	29 c0       	rjmp	.+82     	; 0x1d36 <prvCopyDataToQueue+0xb0>
    1ce4:	50 e0       	ldi	r21, 0x00	; 0
    1ce6:	8e 81       	ldd	r24, Y+6	; 0x06
    1ce8:	9f 81       	ldd	r25, Y+7	; 0x07
    1cea:	0e 94 2a 31 	call	0x6254	; 0x6254 <memcpy>
    1cee:	88 a1       	ldd	r24, Y+32	; 0x20
    1cf0:	90 e0       	ldi	r25, 0x00	; 0
    1cf2:	91 95       	neg	r25
    1cf4:	81 95       	neg	r24
    1cf6:	91 09       	sbc	r25, r1
    1cf8:	2e 81       	ldd	r18, Y+6	; 0x06
    1cfa:	3f 81       	ldd	r19, Y+7	; 0x07
    1cfc:	28 0f       	add	r18, r24
    1cfe:	39 1f       	adc	r19, r25
    1d00:	3f 83       	std	Y+7, r19	; 0x07
    1d02:	2e 83       	std	Y+6, r18	; 0x06
    1d04:	48 81       	ld	r20, Y
    1d06:	59 81       	ldd	r21, Y+1	; 0x01
    1d08:	24 17       	cp	r18, r20
    1d0a:	35 07       	cpc	r19, r21
    1d0c:	30 f4       	brcc	.+12     	; 0x1d1a <prvCopyDataToQueue+0x94>
    1d0e:	2c 81       	ldd	r18, Y+4	; 0x04
    1d10:	3d 81       	ldd	r19, Y+5	; 0x05
    1d12:	82 0f       	add	r24, r18
    1d14:	93 1f       	adc	r25, r19
    1d16:	9f 83       	std	Y+7, r25	; 0x07
    1d18:	8e 83       	std	Y+6, r24	; 0x06
    1d1a:	02 30       	cpi	r16, 0x02	; 2
    1d1c:	49 f4       	brne	.+18     	; 0x1d30 <prvCopyDataToQueue+0xaa>
    1d1e:	11 23       	and	r17, r17
    1d20:	49 f0       	breq	.+18     	; 0x1d34 <prvCopyDataToQueue+0xae>
    1d22:	11 50       	subi	r17, 0x01	; 1
    1d24:	80 e0       	ldi	r24, 0x00	; 0
    1d26:	07 c0       	rjmp	.+14     	; 0x1d36 <prvCopyDataToQueue+0xb0>
    1d28:	80 e0       	ldi	r24, 0x00	; 0
    1d2a:	05 c0       	rjmp	.+10     	; 0x1d36 <prvCopyDataToQueue+0xb0>
    1d2c:	80 e0       	ldi	r24, 0x00	; 0
    1d2e:	03 c0       	rjmp	.+6      	; 0x1d36 <prvCopyDataToQueue+0xb0>
    1d30:	80 e0       	ldi	r24, 0x00	; 0
    1d32:	01 c0       	rjmp	.+2      	; 0x1d36 <prvCopyDataToQueue+0xb0>
    1d34:	80 e0       	ldi	r24, 0x00	; 0
    1d36:	1f 5f       	subi	r17, 0xFF	; 255
    1d38:	1e 8f       	std	Y+30, r17	; 0x1e
    1d3a:	df 91       	pop	r29
    1d3c:	cf 91       	pop	r28
    1d3e:	1f 91       	pop	r17
    1d40:	0f 91       	pop	r16
    1d42:	08 95       	ret

00001d44 <prvCopyDataFromQueue>:
    1d44:	fc 01       	movw	r30, r24
    1d46:	40 a1       	ldd	r20, Z+32	; 0x20
    1d48:	44 23       	and	r20, r20
    1d4a:	a9 f0       	breq	.+42     	; 0x1d76 <prvCopyDataFromQueue+0x32>
    1d4c:	50 e0       	ldi	r21, 0x00	; 0
    1d4e:	26 81       	ldd	r18, Z+6	; 0x06
    1d50:	37 81       	ldd	r19, Z+7	; 0x07
    1d52:	24 0f       	add	r18, r20
    1d54:	35 1f       	adc	r19, r21
    1d56:	37 83       	std	Z+7, r19	; 0x07
    1d58:	26 83       	std	Z+6, r18	; 0x06
    1d5a:	84 81       	ldd	r24, Z+4	; 0x04
    1d5c:	95 81       	ldd	r25, Z+5	; 0x05
    1d5e:	28 17       	cp	r18, r24
    1d60:	39 07       	cpc	r19, r25
    1d62:	20 f0       	brcs	.+8      	; 0x1d6c <prvCopyDataFromQueue+0x28>
    1d64:	80 81       	ld	r24, Z
    1d66:	91 81       	ldd	r25, Z+1	; 0x01
    1d68:	97 83       	std	Z+7, r25	; 0x07
    1d6a:	86 83       	std	Z+6, r24	; 0x06
    1d6c:	cb 01       	movw	r24, r22
    1d6e:	66 81       	ldd	r22, Z+6	; 0x06
    1d70:	77 81       	ldd	r23, Z+7	; 0x07
    1d72:	0c 94 2a 31 	jmp	0x6254	; 0x6254 <memcpy>
    1d76:	08 95       	ret

00001d78 <prvUnlockQueue>:
    1d78:	ef 92       	push	r14
    1d7a:	ff 92       	push	r15
    1d7c:	0f 93       	push	r16
    1d7e:	1f 93       	push	r17
    1d80:	cf 93       	push	r28
    1d82:	8c 01       	movw	r16, r24
    1d84:	0f b6       	in	r0, 0x3f	; 63
    1d86:	f8 94       	cli
    1d88:	0f 92       	push	r0
    1d8a:	fc 01       	movw	r30, r24
    1d8c:	c2 a1       	ldd	r28, Z+34	; 0x22
    1d8e:	1c 16       	cp	r1, r28
    1d90:	ac f4       	brge	.+42     	; 0x1dbc <prvUnlockQueue+0x44>
    1d92:	83 89       	ldd	r24, Z+19	; 0x13
    1d94:	81 11       	cpse	r24, r1
    1d96:	06 c0       	rjmp	.+12     	; 0x1da4 <prvUnlockQueue+0x2c>
    1d98:	11 c0       	rjmp	.+34     	; 0x1dbc <prvUnlockQueue+0x44>
    1d9a:	f8 01       	movw	r30, r16
    1d9c:	83 89       	ldd	r24, Z+19	; 0x13
    1d9e:	81 11       	cpse	r24, r1
    1da0:	05 c0       	rjmp	.+10     	; 0x1dac <prvUnlockQueue+0x34>
    1da2:	0c c0       	rjmp	.+24     	; 0x1dbc <prvUnlockQueue+0x44>
    1da4:	78 01       	movw	r14, r16
    1da6:	f3 e1       	ldi	r31, 0x13	; 19
    1da8:	ef 0e       	add	r14, r31
    1daa:	f1 1c       	adc	r15, r1
    1dac:	c7 01       	movw	r24, r14
    1dae:	0e 94 25 19 	call	0x324a	; 0x324a <xTaskRemoveFromEventList>
    1db2:	81 11       	cpse	r24, r1
    1db4:	0e 94 17 1a 	call	0x342e	; 0x342e <vTaskMissedYield>
    1db8:	c1 50       	subi	r28, 0x01	; 1
    1dba:	79 f7       	brne	.-34     	; 0x1d9a <prvUnlockQueue+0x22>
    1dbc:	8f ef       	ldi	r24, 0xFF	; 255
    1dbe:	f8 01       	movw	r30, r16
    1dc0:	82 a3       	std	Z+34, r24	; 0x22
    1dc2:	0f 90       	pop	r0
    1dc4:	0f be       	out	0x3f, r0	; 63
    1dc6:	0f b6       	in	r0, 0x3f	; 63
    1dc8:	f8 94       	cli
    1dca:	0f 92       	push	r0
    1dcc:	c1 a1       	ldd	r28, Z+33	; 0x21
    1dce:	1c 16       	cp	r1, r28
    1dd0:	ac f4       	brge	.+42     	; 0x1dfc <prvUnlockQueue+0x84>
    1dd2:	80 85       	ldd	r24, Z+8	; 0x08
    1dd4:	81 11       	cpse	r24, r1
    1dd6:	06 c0       	rjmp	.+12     	; 0x1de4 <prvUnlockQueue+0x6c>
    1dd8:	11 c0       	rjmp	.+34     	; 0x1dfc <prvUnlockQueue+0x84>
    1dda:	f8 01       	movw	r30, r16
    1ddc:	80 85       	ldd	r24, Z+8	; 0x08
    1dde:	81 11       	cpse	r24, r1
    1de0:	05 c0       	rjmp	.+10     	; 0x1dec <prvUnlockQueue+0x74>
    1de2:	0c c0       	rjmp	.+24     	; 0x1dfc <prvUnlockQueue+0x84>
    1de4:	78 01       	movw	r14, r16
    1de6:	f8 e0       	ldi	r31, 0x08	; 8
    1de8:	ef 0e       	add	r14, r31
    1dea:	f1 1c       	adc	r15, r1
    1dec:	c7 01       	movw	r24, r14
    1dee:	0e 94 25 19 	call	0x324a	; 0x324a <xTaskRemoveFromEventList>
    1df2:	81 11       	cpse	r24, r1
    1df4:	0e 94 17 1a 	call	0x342e	; 0x342e <vTaskMissedYield>
    1df8:	c1 50       	subi	r28, 0x01	; 1
    1dfa:	79 f7       	brne	.-34     	; 0x1dda <prvUnlockQueue+0x62>
    1dfc:	8f ef       	ldi	r24, 0xFF	; 255
    1dfe:	f8 01       	movw	r30, r16
    1e00:	81 a3       	std	Z+33, r24	; 0x21
    1e02:	0f 90       	pop	r0
    1e04:	0f be       	out	0x3f, r0	; 63
    1e06:	cf 91       	pop	r28
    1e08:	1f 91       	pop	r17
    1e0a:	0f 91       	pop	r16
    1e0c:	ff 90       	pop	r15
    1e0e:	ef 90       	pop	r14
    1e10:	08 95       	ret

00001e12 <xQueueGenericReset>:
    1e12:	cf 93       	push	r28
    1e14:	df 93       	push	r29
    1e16:	ec 01       	movw	r28, r24
    1e18:	0f b6       	in	r0, 0x3f	; 63
    1e1a:	f8 94       	cli
    1e1c:	0f 92       	push	r0
    1e1e:	e8 81       	ld	r30, Y
    1e20:	f9 81       	ldd	r31, Y+1	; 0x01
    1e22:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1e24:	28 a1       	ldd	r18, Y+32	; 0x20
    1e26:	90 e0       	ldi	r25, 0x00	; 0
    1e28:	30 e0       	ldi	r19, 0x00	; 0
    1e2a:	82 9f       	mul	r24, r18
    1e2c:	a0 01       	movw	r20, r0
    1e2e:	83 9f       	mul	r24, r19
    1e30:	50 0d       	add	r21, r0
    1e32:	92 9f       	mul	r25, r18
    1e34:	50 0d       	add	r21, r0
    1e36:	11 24       	eor	r1, r1
    1e38:	4e 0f       	add	r20, r30
    1e3a:	5f 1f       	adc	r21, r31
    1e3c:	5d 83       	std	Y+5, r21	; 0x05
    1e3e:	4c 83       	std	Y+4, r20	; 0x04
    1e40:	1e 8e       	std	Y+30, r1	; 0x1e
    1e42:	fb 83       	std	Y+3, r31	; 0x03
    1e44:	ea 83       	std	Y+2, r30	; 0x02
    1e46:	01 97       	sbiw	r24, 0x01	; 1
    1e48:	82 9f       	mul	r24, r18
    1e4a:	a0 01       	movw	r20, r0
    1e4c:	83 9f       	mul	r24, r19
    1e4e:	50 0d       	add	r21, r0
    1e50:	92 9f       	mul	r25, r18
    1e52:	50 0d       	add	r21, r0
    1e54:	11 24       	eor	r1, r1
    1e56:	cf 01       	movw	r24, r30
    1e58:	84 0f       	add	r24, r20
    1e5a:	95 1f       	adc	r25, r21
    1e5c:	9f 83       	std	Y+7, r25	; 0x07
    1e5e:	8e 83       	std	Y+6, r24	; 0x06
    1e60:	8f ef       	ldi	r24, 0xFF	; 255
    1e62:	89 a3       	std	Y+33, r24	; 0x21
    1e64:	8a a3       	std	Y+34, r24	; 0x22
    1e66:	61 11       	cpse	r22, r1
    1e68:	0b c0       	rjmp	.+22     	; 0x1e80 <xQueueGenericReset+0x6e>
    1e6a:	88 85       	ldd	r24, Y+8	; 0x08
    1e6c:	88 23       	and	r24, r24
    1e6e:	71 f0       	breq	.+28     	; 0x1e8c <xQueueGenericReset+0x7a>
    1e70:	ce 01       	movw	r24, r28
    1e72:	08 96       	adiw	r24, 0x08	; 8
    1e74:	0e 94 25 19 	call	0x324a	; 0x324a <xTaskRemoveFromEventList>
    1e78:	88 23       	and	r24, r24
    1e7a:	41 f0       	breq	.+16     	; 0x1e8c <xQueueGenericReset+0x7a>
    1e7c:	31 de       	rcall	.-926    	; 0x1ae0 <vPortYield>
    1e7e:	06 c0       	rjmp	.+12     	; 0x1e8c <xQueueGenericReset+0x7a>
    1e80:	ce 01       	movw	r24, r28
    1e82:	08 96       	adiw	r24, 0x08	; 8
    1e84:	e5 dc       	rcall	.-1590   	; 0x1850 <vListInitialise>
    1e86:	ce 01       	movw	r24, r28
    1e88:	43 96       	adiw	r24, 0x13	; 19
    1e8a:	e2 dc       	rcall	.-1596   	; 0x1850 <vListInitialise>
    1e8c:	0f 90       	pop	r0
    1e8e:	0f be       	out	0x3f, r0	; 63
    1e90:	81 e0       	ldi	r24, 0x01	; 1
    1e92:	df 91       	pop	r29
    1e94:	cf 91       	pop	r28
    1e96:	08 95       	ret

00001e98 <xQueueGenericCreate>:
    1e98:	ff 92       	push	r15
    1e9a:	0f 93       	push	r16
    1e9c:	1f 93       	push	r17
    1e9e:	cf 93       	push	r28
    1ea0:	df 93       	push	r29
    1ea2:	08 2f       	mov	r16, r24
    1ea4:	16 2f       	mov	r17, r22
    1ea6:	f4 2e       	mov	r15, r20
    1ea8:	66 23       	and	r22, r22
    1eaa:	b9 f0       	breq	.+46     	; 0x1eda <xQueueGenericCreate+0x42>
    1eac:	86 9f       	mul	r24, r22
    1eae:	c0 01       	movw	r24, r0
    1eb0:	11 24       	eor	r1, r1
    1eb2:	85 96       	adiw	r24, 0x25	; 37
    1eb4:	e3 db       	rcall	.-2106   	; 0x167c <pvPortMalloc>
    1eb6:	ec 01       	movw	r28, r24
    1eb8:	00 97       	sbiw	r24, 0x00	; 0
    1eba:	41 f4       	brne	.+16     	; 0x1ecc <xQueueGenericCreate+0x34>
    1ebc:	14 c0       	rjmp	.+40     	; 0x1ee6 <xQueueGenericCreate+0x4e>
    1ebe:	0f 8f       	std	Y+31, r16	; 0x1f
    1ec0:	18 a3       	std	Y+32, r17	; 0x20
    1ec2:	61 e0       	ldi	r22, 0x01	; 1
    1ec4:	ce 01       	movw	r24, r28
    1ec6:	a5 df       	rcall	.-182    	; 0x1e12 <xQueueGenericReset>
    1ec8:	fc a2       	std	Y+36, r15	; 0x24
    1eca:	0d c0       	rjmp	.+26     	; 0x1ee6 <xQueueGenericCreate+0x4e>
    1ecc:	85 96       	adiw	r24, 0x25	; 37
    1ece:	99 83       	std	Y+1, r25	; 0x01
    1ed0:	88 83       	st	Y, r24
    1ed2:	f5 cf       	rjmp	.-22     	; 0x1ebe <xQueueGenericCreate+0x26>
    1ed4:	d9 83       	std	Y+1, r29	; 0x01
    1ed6:	c8 83       	st	Y, r28
    1ed8:	f2 cf       	rjmp	.-28     	; 0x1ebe <xQueueGenericCreate+0x26>
    1eda:	85 e2       	ldi	r24, 0x25	; 37
    1edc:	90 e0       	ldi	r25, 0x00	; 0
    1ede:	ce db       	rcall	.-2148   	; 0x167c <pvPortMalloc>
    1ee0:	ec 01       	movw	r28, r24
    1ee2:	89 2b       	or	r24, r25
    1ee4:	b9 f7       	brne	.-18     	; 0x1ed4 <xQueueGenericCreate+0x3c>
    1ee6:	ce 01       	movw	r24, r28
    1ee8:	df 91       	pop	r29
    1eea:	cf 91       	pop	r28
    1eec:	1f 91       	pop	r17
    1eee:	0f 91       	pop	r16
    1ef0:	ff 90       	pop	r15
    1ef2:	08 95       	ret

00001ef4 <xQueueGenericSend>:
    1ef4:	9f 92       	push	r9
    1ef6:	af 92       	push	r10
    1ef8:	bf 92       	push	r11
    1efa:	cf 92       	push	r12
    1efc:	df 92       	push	r13
    1efe:	ef 92       	push	r14
    1f00:	ff 92       	push	r15
    1f02:	0f 93       	push	r16
    1f04:	1f 93       	push	r17
    1f06:	cf 93       	push	r28
    1f08:	df 93       	push	r29
    1f0a:	cd b7       	in	r28, 0x3d	; 61
    1f0c:	de b7       	in	r29, 0x3e	; 62
    1f0e:	29 97       	sbiw	r28, 0x09	; 9
    1f10:	0f b6       	in	r0, 0x3f	; 63
    1f12:	f8 94       	cli
    1f14:	de bf       	out	0x3e, r29	; 62
    1f16:	0f be       	out	0x3f, r0	; 63
    1f18:	cd bf       	out	0x3d, r28	; 61
    1f1a:	7c 01       	movw	r14, r24
    1f1c:	5b 01       	movw	r10, r22
    1f1e:	2e 83       	std	Y+6, r18	; 0x06
    1f20:	3f 83       	std	Y+7, r19	; 0x07
    1f22:	48 87       	std	Y+8, r20	; 0x08
    1f24:	59 87       	std	Y+9, r21	; 0x09
    1f26:	10 e0       	ldi	r17, 0x00	; 0
    1f28:	99 24       	eor	r9, r9
    1f2a:	93 94       	inc	r9
    1f2c:	6c 01       	movw	r12, r24
    1f2e:	88 e0       	ldi	r24, 0x08	; 8
    1f30:	c8 0e       	add	r12, r24
    1f32:	d1 1c       	adc	r13, r1
    1f34:	0f b6       	in	r0, 0x3f	; 63
    1f36:	f8 94       	cli
    1f38:	0f 92       	push	r0
    1f3a:	f7 01       	movw	r30, r14
    1f3c:	96 8d       	ldd	r25, Z+30	; 0x1e
    1f3e:	87 8d       	ldd	r24, Z+31	; 0x1f
    1f40:	98 17       	cp	r25, r24
    1f42:	10 f0       	brcs	.+4      	; 0x1f48 <xQueueGenericSend+0x54>
    1f44:	02 30       	cpi	r16, 0x02	; 2
    1f46:	b1 f4       	brne	.+44     	; 0x1f74 <xQueueGenericSend+0x80>
    1f48:	40 2f       	mov	r20, r16
    1f4a:	b5 01       	movw	r22, r10
    1f4c:	c7 01       	movw	r24, r14
    1f4e:	9b de       	rcall	.-714    	; 0x1c86 <prvCopyDataToQueue>
    1f50:	f7 01       	movw	r30, r14
    1f52:	93 89       	ldd	r25, Z+19	; 0x13
    1f54:	99 23       	and	r25, r25
    1f56:	41 f0       	breq	.+16     	; 0x1f68 <xQueueGenericSend+0x74>
    1f58:	c7 01       	movw	r24, r14
    1f5a:	43 96       	adiw	r24, 0x13	; 19
    1f5c:	0e 94 25 19 	call	0x324a	; 0x324a <xTaskRemoveFromEventList>
    1f60:	88 23       	and	r24, r24
    1f62:	21 f0       	breq	.+8      	; 0x1f6c <xQueueGenericSend+0x78>
    1f64:	bd dd       	rcall	.-1158   	; 0x1ae0 <vPortYield>
    1f66:	02 c0       	rjmp	.+4      	; 0x1f6c <xQueueGenericSend+0x78>
    1f68:	81 11       	cpse	r24, r1
    1f6a:	ba dd       	rcall	.-1164   	; 0x1ae0 <vPortYield>
    1f6c:	0f 90       	pop	r0
    1f6e:	0f be       	out	0x3f, r0	; 63
    1f70:	81 e0       	ldi	r24, 0x01	; 1
    1f72:	4e c0       	rjmp	.+156    	; 0x2010 <xQueueGenericSend+0x11c>
    1f74:	8e 81       	ldd	r24, Y+6	; 0x06
    1f76:	9f 81       	ldd	r25, Y+7	; 0x07
    1f78:	a8 85       	ldd	r26, Y+8	; 0x08
    1f7a:	b9 85       	ldd	r27, Y+9	; 0x09
    1f7c:	89 2b       	or	r24, r25
    1f7e:	8a 2b       	or	r24, r26
    1f80:	8b 2b       	or	r24, r27
    1f82:	21 f4       	brne	.+8      	; 0x1f8c <xQueueGenericSend+0x98>
    1f84:	0f 90       	pop	r0
    1f86:	0f be       	out	0x3f, r0	; 63
    1f88:	80 e0       	ldi	r24, 0x00	; 0
    1f8a:	42 c0       	rjmp	.+132    	; 0x2010 <xQueueGenericSend+0x11c>
    1f8c:	11 11       	cpse	r17, r1
    1f8e:	05 c0       	rjmp	.+10     	; 0x1f9a <xQueueGenericSend+0xa6>
    1f90:	ce 01       	movw	r24, r28
    1f92:	01 96       	adiw	r24, 0x01	; 1
    1f94:	0e 94 b1 19 	call	0x3362	; 0x3362 <vTaskInternalSetTimeOutState>
    1f98:	19 2d       	mov	r17, r9
    1f9a:	0f 90       	pop	r0
    1f9c:	0f be       	out	0x3f, r0	; 63
    1f9e:	fd d6       	rcall	.+3578   	; 0x2d9a <vTaskSuspendAll>
    1fa0:	0f b6       	in	r0, 0x3f	; 63
    1fa2:	f8 94       	cli
    1fa4:	0f 92       	push	r0
    1fa6:	f7 01       	movw	r30, r14
    1fa8:	81 a1       	ldd	r24, Z+33	; 0x21
    1faa:	8f 3f       	cpi	r24, 0xFF	; 255
    1fac:	09 f4       	brne	.+2      	; 0x1fb0 <xQueueGenericSend+0xbc>
    1fae:	11 a2       	std	Z+33, r1	; 0x21
    1fb0:	f7 01       	movw	r30, r14
    1fb2:	82 a1       	ldd	r24, Z+34	; 0x22
    1fb4:	8f 3f       	cpi	r24, 0xFF	; 255
    1fb6:	09 f4       	brne	.+2      	; 0x1fba <xQueueGenericSend+0xc6>
    1fb8:	12 a2       	std	Z+34, r1	; 0x22
    1fba:	0f 90       	pop	r0
    1fbc:	0f be       	out	0x3f, r0	; 63
    1fbe:	be 01       	movw	r22, r28
    1fc0:	6a 5f       	subi	r22, 0xFA	; 250
    1fc2:	7f 4f       	sbci	r23, 0xFF	; 255
    1fc4:	ce 01       	movw	r24, r28
    1fc6:	01 96       	adiw	r24, 0x01	; 1
    1fc8:	0e 94 c2 19 	call	0x3384	; 0x3384 <xTaskCheckForTimeOut>
    1fcc:	81 11       	cpse	r24, r1
    1fce:	1c c0       	rjmp	.+56     	; 0x2008 <xQueueGenericSend+0x114>
    1fd0:	0f b6       	in	r0, 0x3f	; 63
    1fd2:	f8 94       	cli
    1fd4:	0f 92       	push	r0
    1fd6:	f7 01       	movw	r30, r14
    1fd8:	96 8d       	ldd	r25, Z+30	; 0x1e
    1fda:	87 8d       	ldd	r24, Z+31	; 0x1f
    1fdc:	0f 90       	pop	r0
    1fde:	0f be       	out	0x3f, r0	; 63
    1fe0:	98 13       	cpse	r25, r24
    1fe2:	0e c0       	rjmp	.+28     	; 0x2000 <xQueueGenericSend+0x10c>
    1fe4:	4e 81       	ldd	r20, Y+6	; 0x06
    1fe6:	5f 81       	ldd	r21, Y+7	; 0x07
    1fe8:	68 85       	ldd	r22, Y+8	; 0x08
    1fea:	79 85       	ldd	r23, Y+9	; 0x09
    1fec:	c6 01       	movw	r24, r12
    1fee:	0e 94 ca 18 	call	0x3194	; 0x3194 <vTaskPlaceOnEventList>
    1ff2:	c7 01       	movw	r24, r14
    1ff4:	c1 de       	rcall	.-638    	; 0x1d78 <prvUnlockQueue>
    1ff6:	ba d7       	rcall	.+3956   	; 0x2f6c <xTaskResumeAll>
    1ff8:	81 11       	cpse	r24, r1
    1ffa:	9c cf       	rjmp	.-200    	; 0x1f34 <xQueueGenericSend+0x40>
    1ffc:	71 dd       	rcall	.-1310   	; 0x1ae0 <vPortYield>
    1ffe:	9a cf       	rjmp	.-204    	; 0x1f34 <xQueueGenericSend+0x40>
    2000:	c7 01       	movw	r24, r14
    2002:	ba de       	rcall	.-652    	; 0x1d78 <prvUnlockQueue>
    2004:	b3 d7       	rcall	.+3942   	; 0x2f6c <xTaskResumeAll>
    2006:	96 cf       	rjmp	.-212    	; 0x1f34 <xQueueGenericSend+0x40>
    2008:	c7 01       	movw	r24, r14
    200a:	b6 de       	rcall	.-660    	; 0x1d78 <prvUnlockQueue>
    200c:	af d7       	rcall	.+3934   	; 0x2f6c <xTaskResumeAll>
    200e:	80 e0       	ldi	r24, 0x00	; 0
    2010:	29 96       	adiw	r28, 0x09	; 9
    2012:	0f b6       	in	r0, 0x3f	; 63
    2014:	f8 94       	cli
    2016:	de bf       	out	0x3e, r29	; 62
    2018:	0f be       	out	0x3f, r0	; 63
    201a:	cd bf       	out	0x3d, r28	; 61
    201c:	df 91       	pop	r29
    201e:	cf 91       	pop	r28
    2020:	1f 91       	pop	r17
    2022:	0f 91       	pop	r16
    2024:	ff 90       	pop	r15
    2026:	ef 90       	pop	r14
    2028:	df 90       	pop	r13
    202a:	cf 90       	pop	r12
    202c:	bf 90       	pop	r11
    202e:	af 90       	pop	r10
    2030:	9f 90       	pop	r9
    2032:	08 95       	ret

00002034 <xQueueCreateMutex>:
    2034:	0f 93       	push	r16
    2036:	cf 93       	push	r28
    2038:	df 93       	push	r29
    203a:	48 2f       	mov	r20, r24
    203c:	60 e0       	ldi	r22, 0x00	; 0
    203e:	81 e0       	ldi	r24, 0x01	; 1
    2040:	2b df       	rcall	.-426    	; 0x1e98 <xQueueGenericCreate>
    2042:	ec 01       	movw	r28, r24
    2044:	00 97       	sbiw	r24, 0x00	; 0
    2046:	61 f0       	breq	.+24     	; 0x2060 <xQueueCreateMutex+0x2c>
    2048:	1d 82       	std	Y+5, r1	; 0x05
    204a:	1c 82       	std	Y+4, r1	; 0x04
    204c:	19 82       	std	Y+1, r1	; 0x01
    204e:	18 82       	st	Y, r1
    2050:	1e 82       	std	Y+6, r1	; 0x06
    2052:	00 e0       	ldi	r16, 0x00	; 0
    2054:	20 e0       	ldi	r18, 0x00	; 0
    2056:	30 e0       	ldi	r19, 0x00	; 0
    2058:	a9 01       	movw	r20, r18
    205a:	60 e0       	ldi	r22, 0x00	; 0
    205c:	70 e0       	ldi	r23, 0x00	; 0
    205e:	4a df       	rcall	.-364    	; 0x1ef4 <xQueueGenericSend>
    2060:	ce 01       	movw	r24, r28
    2062:	df 91       	pop	r29
    2064:	cf 91       	pop	r28
    2066:	0f 91       	pop	r16
    2068:	08 95       	ret

0000206a <xQueueGenericSendFromISR>:
    206a:	ef 92       	push	r14
    206c:	ff 92       	push	r15
    206e:	0f 93       	push	r16
    2070:	1f 93       	push	r17
    2072:	cf 93       	push	r28
    2074:	df 93       	push	r29
    2076:	8a 01       	movw	r16, r20
    2078:	fc 01       	movw	r30, r24
    207a:	56 8d       	ldd	r21, Z+30	; 0x1e
    207c:	37 8d       	ldd	r19, Z+31	; 0x1f
    207e:	53 17       	cp	r21, r19
    2080:	10 f0       	brcs	.+4      	; 0x2086 <xQueueGenericSendFromISR+0x1c>
    2082:	22 30       	cpi	r18, 0x02	; 2
    2084:	e9 f4       	brne	.+58     	; 0x20c0 <xQueueGenericSendFromISR+0x56>
    2086:	42 2f       	mov	r20, r18
    2088:	78 01       	movw	r14, r16
    208a:	ec 01       	movw	r28, r24
    208c:	1a a1       	ldd	r17, Y+34	; 0x22
    208e:	fb dd       	rcall	.-1034   	; 0x1c86 <prvCopyDataToQueue>
    2090:	1f 3f       	cpi	r17, 0xFF	; 255
    2092:	81 f4       	brne	.+32     	; 0x20b4 <xQueueGenericSendFromISR+0x4a>
    2094:	8b 89       	ldd	r24, Y+19	; 0x13
    2096:	88 23       	and	r24, r24
    2098:	a9 f0       	breq	.+42     	; 0x20c4 <xQueueGenericSendFromISR+0x5a>
    209a:	ce 01       	movw	r24, r28
    209c:	43 96       	adiw	r24, 0x13	; 19
    209e:	0e 94 25 19 	call	0x324a	; 0x324a <xTaskRemoveFromEventList>
    20a2:	88 23       	and	r24, r24
    20a4:	89 f0       	breq	.+34     	; 0x20c8 <xQueueGenericSendFromISR+0x5e>
    20a6:	e1 14       	cp	r14, r1
    20a8:	f1 04       	cpc	r15, r1
    20aa:	81 f0       	breq	.+32     	; 0x20cc <xQueueGenericSendFromISR+0x62>
    20ac:	81 e0       	ldi	r24, 0x01	; 1
    20ae:	f7 01       	movw	r30, r14
    20b0:	80 83       	st	Z, r24
    20b2:	0d c0       	rjmp	.+26     	; 0x20ce <xQueueGenericSendFromISR+0x64>
    20b4:	ff 24       	eor	r15, r15
    20b6:	f3 94       	inc	r15
    20b8:	f1 0e       	add	r15, r17
    20ba:	fa a2       	std	Y+34, r15	; 0x22
    20bc:	81 e0       	ldi	r24, 0x01	; 1
    20be:	07 c0       	rjmp	.+14     	; 0x20ce <xQueueGenericSendFromISR+0x64>
    20c0:	80 e0       	ldi	r24, 0x00	; 0
    20c2:	05 c0       	rjmp	.+10     	; 0x20ce <xQueueGenericSendFromISR+0x64>
    20c4:	81 e0       	ldi	r24, 0x01	; 1
    20c6:	03 c0       	rjmp	.+6      	; 0x20ce <xQueueGenericSendFromISR+0x64>
    20c8:	81 e0       	ldi	r24, 0x01	; 1
    20ca:	01 c0       	rjmp	.+2      	; 0x20ce <xQueueGenericSendFromISR+0x64>
    20cc:	81 e0       	ldi	r24, 0x01	; 1
    20ce:	df 91       	pop	r29
    20d0:	cf 91       	pop	r28
    20d2:	1f 91       	pop	r17
    20d4:	0f 91       	pop	r16
    20d6:	ff 90       	pop	r15
    20d8:	ef 90       	pop	r14
    20da:	08 95       	ret

000020dc <xQueueReceive>:
    20dc:	9f 92       	push	r9
    20de:	af 92       	push	r10
    20e0:	bf 92       	push	r11
    20e2:	cf 92       	push	r12
    20e4:	df 92       	push	r13
    20e6:	ef 92       	push	r14
    20e8:	ff 92       	push	r15
    20ea:	0f 93       	push	r16
    20ec:	1f 93       	push	r17
    20ee:	cf 93       	push	r28
    20f0:	df 93       	push	r29
    20f2:	cd b7       	in	r28, 0x3d	; 61
    20f4:	de b7       	in	r29, 0x3e	; 62
    20f6:	29 97       	sbiw	r28, 0x09	; 9
    20f8:	0f b6       	in	r0, 0x3f	; 63
    20fa:	f8 94       	cli
    20fc:	de bf       	out	0x3e, r29	; 62
    20fe:	0f be       	out	0x3f, r0	; 63
    2100:	cd bf       	out	0x3d, r28	; 61
    2102:	8c 01       	movw	r16, r24
    2104:	5b 01       	movw	r10, r22
    2106:	2e 83       	std	Y+6, r18	; 0x06
    2108:	3f 83       	std	Y+7, r19	; 0x07
    210a:	48 87       	std	Y+8, r20	; 0x08
    210c:	59 87       	std	Y+9, r21	; 0x09
    210e:	e1 2c       	mov	r14, r1
    2110:	99 24       	eor	r9, r9
    2112:	93 94       	inc	r9
    2114:	6c 01       	movw	r12, r24
    2116:	83 e1       	ldi	r24, 0x13	; 19
    2118:	c8 0e       	add	r12, r24
    211a:	d1 1c       	adc	r13, r1
    211c:	0f b6       	in	r0, 0x3f	; 63
    211e:	f8 94       	cli
    2120:	0f 92       	push	r0
    2122:	f8 01       	movw	r30, r16
    2124:	f6 8c       	ldd	r15, Z+30	; 0x1e
    2126:	ff 20       	and	r15, r15
    2128:	99 f0       	breq	.+38     	; 0x2150 <xQueueReceive+0x74>
    212a:	b5 01       	movw	r22, r10
    212c:	c8 01       	movw	r24, r16
    212e:	0a de       	rcall	.-1004   	; 0x1d44 <prvCopyDataFromQueue>
    2130:	fa 94       	dec	r15
    2132:	f8 01       	movw	r30, r16
    2134:	f6 8e       	std	Z+30, r15	; 0x1e
    2136:	80 85       	ldd	r24, Z+8	; 0x08
    2138:	88 23       	and	r24, r24
    213a:	31 f0       	breq	.+12     	; 0x2148 <xQueueReceive+0x6c>
    213c:	c8 01       	movw	r24, r16
    213e:	08 96       	adiw	r24, 0x08	; 8
    2140:	0e 94 25 19 	call	0x324a	; 0x324a <xTaskRemoveFromEventList>
    2144:	81 11       	cpse	r24, r1
    2146:	cc dc       	rcall	.-1640   	; 0x1ae0 <vPortYield>
    2148:	0f 90       	pop	r0
    214a:	0f be       	out	0x3f, r0	; 63
    214c:	81 e0       	ldi	r24, 0x01	; 1
    214e:	4c c0       	rjmp	.+152    	; 0x21e8 <xQueueReceive+0x10c>
    2150:	8e 81       	ldd	r24, Y+6	; 0x06
    2152:	9f 81       	ldd	r25, Y+7	; 0x07
    2154:	a8 85       	ldd	r26, Y+8	; 0x08
    2156:	b9 85       	ldd	r27, Y+9	; 0x09
    2158:	89 2b       	or	r24, r25
    215a:	8a 2b       	or	r24, r26
    215c:	8b 2b       	or	r24, r27
    215e:	21 f4       	brne	.+8      	; 0x2168 <xQueueReceive+0x8c>
    2160:	0f 90       	pop	r0
    2162:	0f be       	out	0x3f, r0	; 63
    2164:	80 e0       	ldi	r24, 0x00	; 0
    2166:	40 c0       	rjmp	.+128    	; 0x21e8 <xQueueReceive+0x10c>
    2168:	e1 10       	cpse	r14, r1
    216a:	05 c0       	rjmp	.+10     	; 0x2176 <xQueueReceive+0x9a>
    216c:	ce 01       	movw	r24, r28
    216e:	01 96       	adiw	r24, 0x01	; 1
    2170:	0e 94 b1 19 	call	0x3362	; 0x3362 <vTaskInternalSetTimeOutState>
    2174:	e9 2c       	mov	r14, r9
    2176:	0f 90       	pop	r0
    2178:	0f be       	out	0x3f, r0	; 63
    217a:	0f d6       	rcall	.+3102   	; 0x2d9a <vTaskSuspendAll>
    217c:	0f b6       	in	r0, 0x3f	; 63
    217e:	f8 94       	cli
    2180:	0f 92       	push	r0
    2182:	f8 01       	movw	r30, r16
    2184:	81 a1       	ldd	r24, Z+33	; 0x21
    2186:	8f 3f       	cpi	r24, 0xFF	; 255
    2188:	09 f4       	brne	.+2      	; 0x218c <xQueueReceive+0xb0>
    218a:	11 a2       	std	Z+33, r1	; 0x21
    218c:	f8 01       	movw	r30, r16
    218e:	82 a1       	ldd	r24, Z+34	; 0x22
    2190:	8f 3f       	cpi	r24, 0xFF	; 255
    2192:	09 f4       	brne	.+2      	; 0x2196 <xQueueReceive+0xba>
    2194:	12 a2       	std	Z+34, r1	; 0x22
    2196:	0f 90       	pop	r0
    2198:	0f be       	out	0x3f, r0	; 63
    219a:	be 01       	movw	r22, r28
    219c:	6a 5f       	subi	r22, 0xFA	; 250
    219e:	7f 4f       	sbci	r23, 0xFF	; 255
    21a0:	ce 01       	movw	r24, r28
    21a2:	01 96       	adiw	r24, 0x01	; 1
    21a4:	0e 94 c2 19 	call	0x3384	; 0x3384 <xTaskCheckForTimeOut>
    21a8:	81 11       	cpse	r24, r1
    21aa:	15 c0       	rjmp	.+42     	; 0x21d6 <xQueueReceive+0xfa>
    21ac:	c8 01       	movw	r24, r16
    21ae:	60 dd       	rcall	.-1344   	; 0x1c70 <prvIsQueueEmpty>
    21b0:	88 23       	and	r24, r24
    21b2:	69 f0       	breq	.+26     	; 0x21ce <xQueueReceive+0xf2>
    21b4:	4e 81       	ldd	r20, Y+6	; 0x06
    21b6:	5f 81       	ldd	r21, Y+7	; 0x07
    21b8:	68 85       	ldd	r22, Y+8	; 0x08
    21ba:	79 85       	ldd	r23, Y+9	; 0x09
    21bc:	c6 01       	movw	r24, r12
    21be:	ea d7       	rcall	.+4052   	; 0x3194 <vTaskPlaceOnEventList>
    21c0:	c8 01       	movw	r24, r16
    21c2:	da dd       	rcall	.-1100   	; 0x1d78 <prvUnlockQueue>
    21c4:	d3 d6       	rcall	.+3494   	; 0x2f6c <xTaskResumeAll>
    21c6:	81 11       	cpse	r24, r1
    21c8:	a9 cf       	rjmp	.-174    	; 0x211c <xQueueReceive+0x40>
    21ca:	8a dc       	rcall	.-1772   	; 0x1ae0 <vPortYield>
    21cc:	a7 cf       	rjmp	.-178    	; 0x211c <xQueueReceive+0x40>
    21ce:	c8 01       	movw	r24, r16
    21d0:	d3 dd       	rcall	.-1114   	; 0x1d78 <prvUnlockQueue>
    21d2:	cc d6       	rcall	.+3480   	; 0x2f6c <xTaskResumeAll>
    21d4:	a3 cf       	rjmp	.-186    	; 0x211c <xQueueReceive+0x40>
    21d6:	c8 01       	movw	r24, r16
    21d8:	cf dd       	rcall	.-1122   	; 0x1d78 <prvUnlockQueue>
    21da:	c8 d6       	rcall	.+3472   	; 0x2f6c <xTaskResumeAll>
    21dc:	c8 01       	movw	r24, r16
    21de:	48 dd       	rcall	.-1392   	; 0x1c70 <prvIsQueueEmpty>
    21e0:	88 23       	and	r24, r24
    21e2:	09 f4       	brne	.+2      	; 0x21e6 <xQueueReceive+0x10a>
    21e4:	9b cf       	rjmp	.-202    	; 0x211c <xQueueReceive+0x40>
    21e6:	80 e0       	ldi	r24, 0x00	; 0
    21e8:	29 96       	adiw	r28, 0x09	; 9
    21ea:	0f b6       	in	r0, 0x3f	; 63
    21ec:	f8 94       	cli
    21ee:	de bf       	out	0x3e, r29	; 62
    21f0:	0f be       	out	0x3f, r0	; 63
    21f2:	cd bf       	out	0x3d, r28	; 61
    21f4:	df 91       	pop	r29
    21f6:	cf 91       	pop	r28
    21f8:	1f 91       	pop	r17
    21fa:	0f 91       	pop	r16
    21fc:	ff 90       	pop	r15
    21fe:	ef 90       	pop	r14
    2200:	df 90       	pop	r13
    2202:	cf 90       	pop	r12
    2204:	bf 90       	pop	r11
    2206:	af 90       	pop	r10
    2208:	9f 90       	pop	r9
    220a:	08 95       	ret

0000220c <xQueueSemaphoreTake>:
    220c:	bf 92       	push	r11
    220e:	cf 92       	push	r12
    2210:	df 92       	push	r13
    2212:	ef 92       	push	r14
    2214:	ff 92       	push	r15
    2216:	0f 93       	push	r16
    2218:	1f 93       	push	r17
    221a:	cf 93       	push	r28
    221c:	df 93       	push	r29
    221e:	cd b7       	in	r28, 0x3d	; 61
    2220:	de b7       	in	r29, 0x3e	; 62
    2222:	29 97       	sbiw	r28, 0x09	; 9
    2224:	0f b6       	in	r0, 0x3f	; 63
    2226:	f8 94       	cli
    2228:	de bf       	out	0x3e, r29	; 62
    222a:	0f be       	out	0x3f, r0	; 63
    222c:	cd bf       	out	0x3d, r28	; 61
    222e:	8c 01       	movw	r16, r24
    2230:	4e 83       	std	Y+6, r20	; 0x06
    2232:	5f 83       	std	Y+7, r21	; 0x07
    2234:	68 87       	std	Y+8, r22	; 0x08
    2236:	79 87       	std	Y+9, r23	; 0x09
    2238:	b1 2c       	mov	r11, r1
    223a:	d1 2c       	mov	r13, r1
    223c:	cc 24       	eor	r12, r12
    223e:	c3 94       	inc	r12
    2240:	7c 01       	movw	r14, r24
    2242:	83 e1       	ldi	r24, 0x13	; 19
    2244:	e8 0e       	add	r14, r24
    2246:	f1 1c       	adc	r15, r1
    2248:	0f b6       	in	r0, 0x3f	; 63
    224a:	f8 94       	cli
    224c:	0f 92       	push	r0
    224e:	d8 01       	movw	r26, r16
    2250:	5e 96       	adiw	r26, 0x1e	; 30
    2252:	8c 91       	ld	r24, X
    2254:	5e 97       	sbiw	r26, 0x1e	; 30
    2256:	88 23       	and	r24, r24
    2258:	d9 f0       	breq	.+54     	; 0x2290 <xQueueSemaphoreTake+0x84>
    225a:	81 50       	subi	r24, 0x01	; 1
    225c:	5e 96       	adiw	r26, 0x1e	; 30
    225e:	8c 93       	st	X, r24
    2260:	5e 97       	sbiw	r26, 0x1e	; 30
    2262:	8d 91       	ld	r24, X+
    2264:	9c 91       	ld	r25, X
    2266:	89 2b       	or	r24, r25
    2268:	29 f4       	brne	.+10     	; 0x2274 <xQueueSemaphoreTake+0x68>
    226a:	0e 94 50 1b 	call	0x36a0	; 0x36a0 <pvTaskIncrementMutexHeldCount>
    226e:	f8 01       	movw	r30, r16
    2270:	95 83       	std	Z+5, r25	; 0x05
    2272:	84 83       	std	Z+4, r24	; 0x04
    2274:	d8 01       	movw	r26, r16
    2276:	18 96       	adiw	r26, 0x08	; 8
    2278:	8c 91       	ld	r24, X
    227a:	88 23       	and	r24, r24
    227c:	29 f0       	breq	.+10     	; 0x2288 <xQueueSemaphoreTake+0x7c>
    227e:	c8 01       	movw	r24, r16
    2280:	08 96       	adiw	r24, 0x08	; 8
    2282:	e3 d7       	rcall	.+4038   	; 0x324a <xTaskRemoveFromEventList>
    2284:	81 11       	cpse	r24, r1
    2286:	2c dc       	rcall	.-1960   	; 0x1ae0 <vPortYield>
    2288:	0f 90       	pop	r0
    228a:	0f be       	out	0x3f, r0	; 63
    228c:	81 e0       	ldi	r24, 0x01	; 1
    228e:	7a c0       	rjmp	.+244    	; 0x2384 <xQueueSemaphoreTake+0x178>
    2290:	8e 81       	ldd	r24, Y+6	; 0x06
    2292:	9f 81       	ldd	r25, Y+7	; 0x07
    2294:	a8 85       	ldd	r26, Y+8	; 0x08
    2296:	b9 85       	ldd	r27, Y+9	; 0x09
    2298:	89 2b       	or	r24, r25
    229a:	8a 2b       	or	r24, r26
    229c:	8b 2b       	or	r24, r27
    229e:	21 f4       	brne	.+8      	; 0x22a8 <xQueueSemaphoreTake+0x9c>
    22a0:	0f 90       	pop	r0
    22a2:	0f be       	out	0x3f, r0	; 63
    22a4:	80 e0       	ldi	r24, 0x00	; 0
    22a6:	6e c0       	rjmp	.+220    	; 0x2384 <xQueueSemaphoreTake+0x178>
    22a8:	d1 10       	cpse	r13, r1
    22aa:	05 c0       	rjmp	.+10     	; 0x22b6 <xQueueSemaphoreTake+0xaa>
    22ac:	ce 01       	movw	r24, r28
    22ae:	01 96       	adiw	r24, 0x01	; 1
    22b0:	0e 94 b1 19 	call	0x3362	; 0x3362 <vTaskInternalSetTimeOutState>
    22b4:	dc 2c       	mov	r13, r12
    22b6:	0f 90       	pop	r0
    22b8:	0f be       	out	0x3f, r0	; 63
    22ba:	6f d5       	rcall	.+2782   	; 0x2d9a <vTaskSuspendAll>
    22bc:	0f b6       	in	r0, 0x3f	; 63
    22be:	f8 94       	cli
    22c0:	0f 92       	push	r0
    22c2:	f8 01       	movw	r30, r16
    22c4:	81 a1       	ldd	r24, Z+33	; 0x21
    22c6:	8f 3f       	cpi	r24, 0xFF	; 255
    22c8:	09 f4       	brne	.+2      	; 0x22cc <xQueueSemaphoreTake+0xc0>
    22ca:	11 a2       	std	Z+33, r1	; 0x21
    22cc:	d8 01       	movw	r26, r16
    22ce:	92 96       	adiw	r26, 0x22	; 34
    22d0:	8c 91       	ld	r24, X
    22d2:	92 97       	sbiw	r26, 0x22	; 34
    22d4:	8f 3f       	cpi	r24, 0xFF	; 255
    22d6:	11 f4       	brne	.+4      	; 0x22dc <xQueueSemaphoreTake+0xd0>
    22d8:	92 96       	adiw	r26, 0x22	; 34
    22da:	1c 92       	st	X, r1
    22dc:	0f 90       	pop	r0
    22de:	0f be       	out	0x3f, r0	; 63
    22e0:	be 01       	movw	r22, r28
    22e2:	6a 5f       	subi	r22, 0xFA	; 250
    22e4:	7f 4f       	sbci	r23, 0xFF	; 255
    22e6:	ce 01       	movw	r24, r28
    22e8:	01 96       	adiw	r24, 0x01	; 1
    22ea:	0e 94 c2 19 	call	0x3384	; 0x3384 <xTaskCheckForTimeOut>
    22ee:	81 11       	cpse	r24, r1
    22f0:	24 c0       	rjmp	.+72     	; 0x233a <xQueueSemaphoreTake+0x12e>
    22f2:	c8 01       	movw	r24, r16
    22f4:	bd dc       	rcall	.-1670   	; 0x1c70 <prvIsQueueEmpty>
    22f6:	88 23       	and	r24, r24
    22f8:	e1 f0       	breq	.+56     	; 0x2332 <xQueueSemaphoreTake+0x126>
    22fa:	f8 01       	movw	r30, r16
    22fc:	80 81       	ld	r24, Z
    22fe:	91 81       	ldd	r25, Z+1	; 0x01
    2300:	89 2b       	or	r24, r25
    2302:	51 f4       	brne	.+20     	; 0x2318 <xQueueSemaphoreTake+0x10c>
    2304:	0f b6       	in	r0, 0x3f	; 63
    2306:	f8 94       	cli
    2308:	0f 92       	push	r0
    230a:	84 81       	ldd	r24, Z+4	; 0x04
    230c:	95 81       	ldd	r25, Z+5	; 0x05
    230e:	0e 94 2e 1a 	call	0x345c	; 0x345c <xTaskPriorityInherit>
    2312:	b8 2e       	mov	r11, r24
    2314:	0f 90       	pop	r0
    2316:	0f be       	out	0x3f, r0	; 63
    2318:	4e 81       	ldd	r20, Y+6	; 0x06
    231a:	5f 81       	ldd	r21, Y+7	; 0x07
    231c:	68 85       	ldd	r22, Y+8	; 0x08
    231e:	79 85       	ldd	r23, Y+9	; 0x09
    2320:	c7 01       	movw	r24, r14
    2322:	38 d7       	rcall	.+3696   	; 0x3194 <vTaskPlaceOnEventList>
    2324:	c8 01       	movw	r24, r16
    2326:	28 dd       	rcall	.-1456   	; 0x1d78 <prvUnlockQueue>
    2328:	21 d6       	rcall	.+3138   	; 0x2f6c <xTaskResumeAll>
    232a:	81 11       	cpse	r24, r1
    232c:	8d cf       	rjmp	.-230    	; 0x2248 <xQueueSemaphoreTake+0x3c>
    232e:	d8 db       	rcall	.-2128   	; 0x1ae0 <vPortYield>
    2330:	8b cf       	rjmp	.-234    	; 0x2248 <xQueueSemaphoreTake+0x3c>
    2332:	c8 01       	movw	r24, r16
    2334:	21 dd       	rcall	.-1470   	; 0x1d78 <prvUnlockQueue>
    2336:	1a d6       	rcall	.+3124   	; 0x2f6c <xTaskResumeAll>
    2338:	87 cf       	rjmp	.-242    	; 0x2248 <xQueueSemaphoreTake+0x3c>
    233a:	c8 01       	movw	r24, r16
    233c:	1d dd       	rcall	.-1478   	; 0x1d78 <prvUnlockQueue>
    233e:	16 d6       	rcall	.+3116   	; 0x2f6c <xTaskResumeAll>
    2340:	c8 01       	movw	r24, r16
    2342:	96 dc       	rcall	.-1748   	; 0x1c70 <prvIsQueueEmpty>
    2344:	88 23       	and	r24, r24
    2346:	09 f4       	brne	.+2      	; 0x234a <xQueueSemaphoreTake+0x13e>
    2348:	7f cf       	rjmp	.-258    	; 0x2248 <xQueueSemaphoreTake+0x3c>
    234a:	bb 20       	and	r11, r11
    234c:	d1 f0       	breq	.+52     	; 0x2382 <xQueueSemaphoreTake+0x176>
    234e:	0f b6       	in	r0, 0x3f	; 63
    2350:	f8 94       	cli
    2352:	0f 92       	push	r0
    2354:	f8 01       	movw	r30, r16
    2356:	83 89       	ldd	r24, Z+19	; 0x13
    2358:	88 23       	and	r24, r24
    235a:	39 f0       	breq	.+14     	; 0x236a <xQueueSemaphoreTake+0x15e>
    235c:	02 8c       	ldd	r0, Z+26	; 0x1a
    235e:	f3 8d       	ldd	r31, Z+27	; 0x1b
    2360:	e0 2d       	mov	r30, r0
    2362:	80 81       	ld	r24, Z
    2364:	64 e0       	ldi	r22, 0x04	; 4
    2366:	68 1b       	sub	r22, r24
    2368:	01 c0       	rjmp	.+2      	; 0x236c <xQueueSemaphoreTake+0x160>
    236a:	60 e0       	ldi	r22, 0x00	; 0
    236c:	d8 01       	movw	r26, r16
    236e:	14 96       	adiw	r26, 0x04	; 4
    2370:	8d 91       	ld	r24, X+
    2372:	9c 91       	ld	r25, X
    2374:	15 97       	sbiw	r26, 0x05	; 5
    2376:	0e 94 dc 1a 	call	0x35b8	; 0x35b8 <vTaskPriorityDisinheritAfterTimeout>
    237a:	0f 90       	pop	r0
    237c:	0f be       	out	0x3f, r0	; 63
    237e:	80 e0       	ldi	r24, 0x00	; 0
    2380:	01 c0       	rjmp	.+2      	; 0x2384 <xQueueSemaphoreTake+0x178>
    2382:	80 e0       	ldi	r24, 0x00	; 0
    2384:	29 96       	adiw	r28, 0x09	; 9
    2386:	0f b6       	in	r0, 0x3f	; 63
    2388:	f8 94       	cli
    238a:	de bf       	out	0x3e, r29	; 62
    238c:	0f be       	out	0x3f, r0	; 63
    238e:	cd bf       	out	0x3d, r28	; 61
    2390:	df 91       	pop	r29
    2392:	cf 91       	pop	r28
    2394:	1f 91       	pop	r17
    2396:	0f 91       	pop	r16
    2398:	ff 90       	pop	r15
    239a:	ef 90       	pop	r14
    239c:	df 90       	pop	r13
    239e:	cf 90       	pop	r12
    23a0:	bf 90       	pop	r11
    23a2:	08 95       	ret

000023a4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
    {
    23a4:	cf 93       	push	r28
    23a6:	df 93       	push	r29
    23a8:	ec 01       	movw	r28, r24
        will not actually cause the task to block, just place it on a blocked
        list.  It will not block until the scheduler is unlocked - at which
        time a yield will be performed.  If an item is added to the queue while
        the queue is locked, and the calling task blocks on the queue, then the
        calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    23aa:	0f b6       	in	r0, 0x3f	; 63
    23ac:	f8 94       	cli
    23ae:	0f 92       	push	r0
    23b0:	89 a1       	ldd	r24, Y+33	; 0x21
    23b2:	8f 3f       	cpi	r24, 0xFF	; 255
    23b4:	09 f4       	brne	.+2      	; 0x23b8 <vQueueWaitForMessageRestricted+0x14>
    23b6:	19 a2       	std	Y+33, r1	; 0x21
    23b8:	8a a1       	ldd	r24, Y+34	; 0x22
    23ba:	8f 3f       	cpi	r24, 0xFF	; 255
    23bc:	09 f4       	brne	.+2      	; 0x23c0 <vQueueWaitForMessageRestricted+0x1c>
    23be:	1a a2       	std	Y+34, r1	; 0x22
    23c0:	0f 90       	pop	r0
    23c2:	0f be       	out	0x3f, r0	; 63
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    23c4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    23c6:	81 11       	cpse	r24, r1
    23c8:	03 c0       	rjmp	.+6      	; 0x23d0 <vQueueWaitForMessageRestricted+0x2c>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    23ca:	ce 01       	movw	r24, r28
    23cc:	43 96       	adiw	r24, 0x13	; 19
    23ce:	1d d7       	rcall	.+3642   	; 0x320a <vTaskPlaceOnEventListRestricted>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
        prvUnlockQueue( pxQueue );
    23d0:	ce 01       	movw	r24, r28
    23d2:	d2 dc       	rcall	.-1628   	; 0x1d78 <prvUnlockQueue>
    }
    23d4:	df 91       	pop	r29
    23d6:	cf 91       	pop	r28
    23d8:	08 95       	ret

000023da <prvBytesInBuffer>:

    configASSERT( pxStreamBuffer );

    xReturn = prvBytesInBuffer( pxStreamBuffer );
    return xReturn;
}
    23da:	fc 01       	movw	r30, r24
    23dc:	44 81       	ldd	r20, Z+4	; 0x04
    23de:	55 81       	ldd	r21, Z+5	; 0x05
    23e0:	22 81       	ldd	r18, Z+2	; 0x02
    23e2:	33 81       	ldd	r19, Z+3	; 0x03
    23e4:	24 0f       	add	r18, r20
    23e6:	35 1f       	adc	r19, r21
    23e8:	80 81       	ld	r24, Z
    23ea:	91 81       	ldd	r25, Z+1	; 0x01
    23ec:	b9 01       	movw	r22, r18
    23ee:	68 1b       	sub	r22, r24
    23f0:	79 0b       	sbc	r23, r25
    23f2:	cb 01       	movw	r24, r22
    23f4:	64 17       	cp	r22, r20
    23f6:	75 07       	cpc	r23, r21
    23f8:	10 f0       	brcs	.+4      	; 0x23fe <prvBytesInBuffer+0x24>
    23fa:	84 1b       	sub	r24, r20
    23fc:	95 0b       	sbc	r25, r21
    23fe:	08 95       	ret

00002400 <prvWriteBytesToBuffer>:
    2400:	af 92       	push	r10
    2402:	bf 92       	push	r11
    2404:	cf 92       	push	r12
    2406:	df 92       	push	r13
    2408:	ef 92       	push	r14
    240a:	ff 92       	push	r15
    240c:	0f 93       	push	r16
    240e:	1f 93       	push	r17
    2410:	cf 93       	push	r28
    2412:	df 93       	push	r29
    2414:	6c 01       	movw	r12, r24
    2416:	5b 01       	movw	r10, r22
    2418:	7a 01       	movw	r14, r20
    241a:	fc 01       	movw	r30, r24
    241c:	c2 81       	ldd	r28, Z+2	; 0x02
    241e:	d3 81       	ldd	r29, Z+3	; 0x03
    2420:	04 81       	ldd	r16, Z+4	; 0x04
    2422:	15 81       	ldd	r17, Z+5	; 0x05
    2424:	0c 1b       	sub	r16, r28
    2426:	1d 0b       	sbc	r17, r29
    2428:	40 17       	cp	r20, r16
    242a:	51 07       	cpc	r21, r17
    242c:	08 f4       	brcc	.+2      	; 0x2430 <prvWriteBytesToBuffer+0x30>
    242e:	8a 01       	movw	r16, r20
    2430:	f6 01       	movw	r30, r12
    2432:	84 85       	ldd	r24, Z+12	; 0x0c
    2434:	95 85       	ldd	r25, Z+13	; 0x0d
    2436:	a8 01       	movw	r20, r16
    2438:	b5 01       	movw	r22, r10
    243a:	8c 0f       	add	r24, r28
    243c:	9d 1f       	adc	r25, r29
    243e:	0e 94 2a 31 	call	0x6254	; 0x6254 <memcpy>
    2442:	0e 15       	cp	r16, r14
    2444:	1f 05       	cpc	r17, r15
    2446:	58 f4       	brcc	.+22     	; 0x245e <prvWriteBytesToBuffer+0x5e>
    2448:	a7 01       	movw	r20, r14
    244a:	40 1b       	sub	r20, r16
    244c:	51 0b       	sbc	r21, r17
    244e:	b5 01       	movw	r22, r10
    2450:	60 0f       	add	r22, r16
    2452:	71 1f       	adc	r23, r17
    2454:	f6 01       	movw	r30, r12
    2456:	84 85       	ldd	r24, Z+12	; 0x0c
    2458:	95 85       	ldd	r25, Z+13	; 0x0d
    245a:	0e 94 2a 31 	call	0x6254	; 0x6254 <memcpy>
    245e:	ce 01       	movw	r24, r28
    2460:	8e 0d       	add	r24, r14
    2462:	9f 1d       	adc	r25, r15
    2464:	f6 01       	movw	r30, r12
    2466:	24 81       	ldd	r18, Z+4	; 0x04
    2468:	35 81       	ldd	r19, Z+5	; 0x05
    246a:	82 17       	cp	r24, r18
    246c:	93 07       	cpc	r25, r19
    246e:	10 f0       	brcs	.+4      	; 0x2474 <prvWriteBytesToBuffer+0x74>
    2470:	82 1b       	sub	r24, r18
    2472:	93 0b       	sbc	r25, r19
    2474:	f6 01       	movw	r30, r12
    2476:	93 83       	std	Z+3, r25	; 0x03
    2478:	82 83       	std	Z+2, r24	; 0x02
    247a:	c7 01       	movw	r24, r14
    247c:	df 91       	pop	r29
    247e:	cf 91       	pop	r28
    2480:	1f 91       	pop	r17
    2482:	0f 91       	pop	r16
    2484:	ff 90       	pop	r15
    2486:	ef 90       	pop	r14
    2488:	df 90       	pop	r13
    248a:	cf 90       	pop	r12
    248c:	bf 90       	pop	r11
    248e:	af 90       	pop	r10
    2490:	08 95       	ret

00002492 <prvWriteMessageToBuffer>:
    2492:	cf 92       	push	r12
    2494:	df 92       	push	r13
    2496:	ef 92       	push	r14
    2498:	ff 92       	push	r15
    249a:	0f 93       	push	r16
    249c:	1f 93       	push	r17
    249e:	cf 93       	push	r28
    24a0:	df 93       	push	r29
    24a2:	1f 92       	push	r1
    24a4:	1f 92       	push	r1
    24a6:	cd b7       	in	r28, 0x3d	; 61
    24a8:	de b7       	in	r29, 0x3e	; 62
    24aa:	5a 83       	std	Y+2, r21	; 0x02
    24ac:	49 83       	std	Y+1, r20	; 0x01
    24ae:	21 15       	cp	r18, r1
    24b0:	31 05       	cpc	r19, r1
    24b2:	c9 f0       	breq	.+50     	; 0x24e6 <prvWriteMessageToBuffer+0x54>
    24b4:	6b 01       	movw	r12, r22
    24b6:	7c 01       	movw	r14, r24
    24b8:	fc 01       	movw	r30, r24
    24ba:	86 85       	ldd	r24, Z+14	; 0x0e
    24bc:	80 fd       	sbrc	r24, 0
    24be:	08 c0       	rjmp	.+16     	; 0x24d0 <prvWriteMessageToBuffer+0x3e>
    24c0:	ca 01       	movw	r24, r20
    24c2:	24 17       	cp	r18, r20
    24c4:	35 07       	cpc	r19, r21
    24c6:	08 f4       	brcc	.+2      	; 0x24ca <prvWriteMessageToBuffer+0x38>
    24c8:	c9 01       	movw	r24, r18
    24ca:	9a 83       	std	Y+2, r25	; 0x02
    24cc:	89 83       	std	Y+1, r24	; 0x01
    24ce:	11 c0       	rjmp	.+34     	; 0x24f2 <prvWriteMessageToBuffer+0x60>
    24d0:	20 17       	cp	r18, r16
    24d2:	31 07       	cpc	r19, r17
    24d4:	58 f0       	brcs	.+22     	; 0x24ec <prvWriteMessageToBuffer+0x5a>
    24d6:	42 e0       	ldi	r20, 0x02	; 2
    24d8:	50 e0       	ldi	r21, 0x00	; 0
    24da:	be 01       	movw	r22, r28
    24dc:	6f 5f       	subi	r22, 0xFF	; 255
    24de:	7f 4f       	sbci	r23, 0xFF	; 255
    24e0:	c7 01       	movw	r24, r14
    24e2:	8e df       	rcall	.-228    	; 0x2400 <prvWriteBytesToBuffer>
    24e4:	06 c0       	rjmp	.+12     	; 0x24f2 <prvWriteMessageToBuffer+0x60>
    24e6:	80 e0       	ldi	r24, 0x00	; 0
    24e8:	90 e0       	ldi	r25, 0x00	; 0
    24ea:	08 c0       	rjmp	.+16     	; 0x24fc <prvWriteMessageToBuffer+0x6a>
    24ec:	80 e0       	ldi	r24, 0x00	; 0
    24ee:	90 e0       	ldi	r25, 0x00	; 0
    24f0:	05 c0       	rjmp	.+10     	; 0x24fc <prvWriteMessageToBuffer+0x6a>
    24f2:	49 81       	ldd	r20, Y+1	; 0x01
    24f4:	5a 81       	ldd	r21, Y+2	; 0x02
    24f6:	b6 01       	movw	r22, r12
    24f8:	c7 01       	movw	r24, r14
    24fa:	82 df       	rcall	.-252    	; 0x2400 <prvWriteBytesToBuffer>
    24fc:	0f 90       	pop	r0
    24fe:	0f 90       	pop	r0
    2500:	df 91       	pop	r29
    2502:	cf 91       	pop	r28
    2504:	1f 91       	pop	r17
    2506:	0f 91       	pop	r16
    2508:	ff 90       	pop	r15
    250a:	ef 90       	pop	r14
    250c:	df 90       	pop	r13
    250e:	cf 90       	pop	r12
    2510:	08 95       	ret

00002512 <prvReadBytesFromBuffer>:
    2512:	af 92       	push	r10
    2514:	bf 92       	push	r11
    2516:	cf 92       	push	r12
    2518:	df 92       	push	r13
    251a:	ef 92       	push	r14
    251c:	ff 92       	push	r15
    251e:	0f 93       	push	r16
    2520:	1f 93       	push	r17
    2522:	cf 93       	push	r28
    2524:	df 93       	push	r29
    2526:	7c 01       	movw	r14, r24
    2528:	5b 01       	movw	r10, r22
    252a:	e9 01       	movw	r28, r18
    252c:	42 17       	cp	r20, r18
    252e:	53 07       	cpc	r21, r19
    2530:	08 f4       	brcc	.+2      	; 0x2534 <prvReadBytesFromBuffer+0x22>
    2532:	ea 01       	movw	r28, r20
    2534:	20 97       	sbiw	r28, 0x00	; 0
    2536:	79 f1       	breq	.+94     	; 0x2596 <prvReadBytesFromBuffer+0x84>
    2538:	f7 01       	movw	r30, r14
    253a:	00 81       	ld	r16, Z
    253c:	11 81       	ldd	r17, Z+1	; 0x01
    253e:	c4 80       	ldd	r12, Z+4	; 0x04
    2540:	d5 80       	ldd	r13, Z+5	; 0x05
    2542:	c0 1a       	sub	r12, r16
    2544:	d1 0a       	sbc	r13, r17
    2546:	cc 15       	cp	r28, r12
    2548:	dd 05       	cpc	r29, r13
    254a:	08 f4       	brcc	.+2      	; 0x254e <prvReadBytesFromBuffer+0x3c>
    254c:	6e 01       	movw	r12, r28
    254e:	f7 01       	movw	r30, r14
    2550:	64 85       	ldd	r22, Z+12	; 0x0c
    2552:	75 85       	ldd	r23, Z+13	; 0x0d
    2554:	60 0f       	add	r22, r16
    2556:	71 1f       	adc	r23, r17
    2558:	a6 01       	movw	r20, r12
    255a:	c5 01       	movw	r24, r10
    255c:	0e 94 2a 31 	call	0x6254	; 0x6254 <memcpy>
    2560:	cc 16       	cp	r12, r28
    2562:	dd 06       	cpc	r13, r29
    2564:	58 f4       	brcc	.+22     	; 0x257c <prvReadBytesFromBuffer+0x6a>
    2566:	ae 01       	movw	r20, r28
    2568:	4c 19       	sub	r20, r12
    256a:	5d 09       	sbc	r21, r13
    256c:	f7 01       	movw	r30, r14
    256e:	64 85       	ldd	r22, Z+12	; 0x0c
    2570:	75 85       	ldd	r23, Z+13	; 0x0d
    2572:	c5 01       	movw	r24, r10
    2574:	8c 0d       	add	r24, r12
    2576:	9d 1d       	adc	r25, r13
    2578:	0e 94 2a 31 	call	0x6254	; 0x6254 <memcpy>
    257c:	0c 0f       	add	r16, r28
    257e:	1d 1f       	adc	r17, r29
    2580:	f7 01       	movw	r30, r14
    2582:	84 81       	ldd	r24, Z+4	; 0x04
    2584:	95 81       	ldd	r25, Z+5	; 0x05
    2586:	08 17       	cp	r16, r24
    2588:	19 07       	cpc	r17, r25
    258a:	10 f0       	brcs	.+4      	; 0x2590 <prvReadBytesFromBuffer+0x7e>
    258c:	08 1b       	sub	r16, r24
    258e:	19 0b       	sbc	r17, r25
    2590:	f7 01       	movw	r30, r14
    2592:	11 83       	std	Z+1, r17	; 0x01
    2594:	00 83       	st	Z, r16
    2596:	ce 01       	movw	r24, r28
    2598:	df 91       	pop	r29
    259a:	cf 91       	pop	r28
    259c:	1f 91       	pop	r17
    259e:	0f 91       	pop	r16
    25a0:	ff 90       	pop	r15
    25a2:	ef 90       	pop	r14
    25a4:	df 90       	pop	r13
    25a6:	cf 90       	pop	r12
    25a8:	bf 90       	pop	r11
    25aa:	af 90       	pop	r10
    25ac:	08 95       	ret

000025ae <xStreamBufferGenericCreate>:
    25ae:	ef 92       	push	r14
    25b0:	ff 92       	push	r15
    25b2:	1f 93       	push	r17
    25b4:	cf 93       	push	r28
    25b6:	df 93       	push	r29
    25b8:	eb 01       	movw	r28, r22
    25ba:	11 e0       	ldi	r17, 0x01	; 1
    25bc:	41 30       	cpi	r20, 0x01	; 1
    25be:	09 f0       	breq	.+2      	; 0x25c2 <xStreamBufferGenericCreate+0x14>
    25c0:	10 e0       	ldi	r17, 0x00	; 0
    25c2:	20 97       	sbiw	r28, 0x00	; 0
    25c4:	11 f4       	brne	.+4      	; 0x25ca <xStreamBufferGenericCreate+0x1c>
    25c6:	c1 e0       	ldi	r28, 0x01	; 1
    25c8:	d0 e0       	ldi	r29, 0x00	; 0
    25ca:	7c 01       	movw	r14, r24
    25cc:	2f ef       	ldi	r18, 0xFF	; 255
    25ce:	e2 1a       	sub	r14, r18
    25d0:	f2 0a       	sbc	r15, r18
    25d2:	41 96       	adiw	r24, 0x11	; 17
    25d4:	53 d8       	rcall	.-3930   	; 0x167c <pvPortMalloc>
    25d6:	00 97       	sbiw	r24, 0x00	; 0
    25d8:	81 f0       	breq	.+32     	; 0x25fa <xStreamBufferGenericCreate+0x4c>
    25da:	20 e1       	ldi	r18, 0x10	; 16
    25dc:	fc 01       	movw	r30, r24
    25de:	11 92       	st	Z+, r1
    25e0:	2a 95       	dec	r18
    25e2:	e9 f7       	brne	.-6      	; 0x25de <xStreamBufferGenericCreate+0x30>
    25e4:	9c 01       	movw	r18, r24
    25e6:	20 5f       	subi	r18, 0xF0	; 240
    25e8:	3f 4f       	sbci	r19, 0xFF	; 255
    25ea:	fc 01       	movw	r30, r24
    25ec:	35 87       	std	Z+13, r19	; 0x0d
    25ee:	24 87       	std	Z+12, r18	; 0x0c
    25f0:	f5 82       	std	Z+5, r15	; 0x05
    25f2:	e4 82       	std	Z+4, r14	; 0x04
    25f4:	d7 83       	std	Z+7, r29	; 0x07
    25f6:	c6 83       	std	Z+6, r28	; 0x06
    25f8:	16 87       	std	Z+14, r17	; 0x0e
    25fa:	df 91       	pop	r29
    25fc:	cf 91       	pop	r28
    25fe:	1f 91       	pop	r17
    2600:	ff 90       	pop	r15
    2602:	ef 90       	pop	r14
    2604:	08 95       	ret

00002606 <xStreamBufferReset>:
    2606:	cf 93       	push	r28
    2608:	df 93       	push	r29
    260a:	fc 01       	movw	r30, r24
    260c:	27 85       	ldd	r18, Z+15	; 0x0f
    260e:	0f b6       	in	r0, 0x3f	; 63
    2610:	f8 94       	cli
    2612:	0f 92       	push	r0
    2614:	80 85       	ldd	r24, Z+8	; 0x08
    2616:	91 85       	ldd	r25, Z+9	; 0x09
    2618:	89 2b       	or	r24, r25
    261a:	d1 f4       	brne	.+52     	; 0x2650 <xStreamBufferReset+0x4a>
    261c:	82 85       	ldd	r24, Z+10	; 0x0a
    261e:	93 85       	ldd	r25, Z+11	; 0x0b
    2620:	89 2b       	or	r24, r25
    2622:	c1 f4       	brne	.+48     	; 0x2654 <xStreamBufferReset+0x4e>
    2624:	86 85       	ldd	r24, Z+14	; 0x0e
    2626:	46 81       	ldd	r20, Z+6	; 0x06
    2628:	57 81       	ldd	r21, Z+7	; 0x07
    262a:	64 81       	ldd	r22, Z+4	; 0x04
    262c:	75 81       	ldd	r23, Z+5	; 0x05
    262e:	a4 85       	ldd	r26, Z+12	; 0x0c
    2630:	b5 85       	ldd	r27, Z+13	; 0x0d
    2632:	90 e1       	ldi	r25, 0x10	; 16
    2634:	ef 01       	movw	r28, r30
    2636:	19 92       	st	Y+, r1
    2638:	9a 95       	dec	r25
    263a:	e9 f7       	brne	.-6      	; 0x2636 <xStreamBufferReset+0x30>
    263c:	b5 87       	std	Z+13, r27	; 0x0d
    263e:	a4 87       	std	Z+12, r26	; 0x0c
    2640:	75 83       	std	Z+5, r23	; 0x05
    2642:	64 83       	std	Z+4, r22	; 0x04
    2644:	57 83       	std	Z+7, r21	; 0x07
    2646:	46 83       	std	Z+6, r20	; 0x06
    2648:	86 87       	std	Z+14, r24	; 0x0e
    264a:	27 87       	std	Z+15, r18	; 0x0f
    264c:	81 e0       	ldi	r24, 0x01	; 1
    264e:	03 c0       	rjmp	.+6      	; 0x2656 <xStreamBufferReset+0x50>
    2650:	80 e0       	ldi	r24, 0x00	; 0
    2652:	01 c0       	rjmp	.+2      	; 0x2656 <xStreamBufferReset+0x50>
    2654:	80 e0       	ldi	r24, 0x00	; 0
    2656:	0f 90       	pop	r0
    2658:	0f be       	out	0x3f, r0	; 63
    265a:	df 91       	pop	r29
    265c:	cf 91       	pop	r28
    265e:	08 95       	ret

00002660 <xStreamBufferSpacesAvailable>:
    2660:	fc 01       	movw	r30, r24
    2662:	24 81       	ldd	r18, Z+4	; 0x04
    2664:	35 81       	ldd	r19, Z+5	; 0x05
    2666:	80 81       	ld	r24, Z
    2668:	91 81       	ldd	r25, Z+1	; 0x01
    266a:	42 81       	ldd	r20, Z+2	; 0x02
    266c:	53 81       	ldd	r21, Z+3	; 0x03
    266e:	82 0f       	add	r24, r18
    2670:	93 1f       	adc	r25, r19
    2672:	01 97       	sbiw	r24, 0x01	; 1
    2674:	84 1b       	sub	r24, r20
    2676:	95 0b       	sbc	r25, r21
    2678:	82 17       	cp	r24, r18
    267a:	93 07       	cpc	r25, r19
    267c:	10 f0       	brcs	.+4      	; 0x2682 <xStreamBufferSpacesAvailable+0x22>
    267e:	82 1b       	sub	r24, r18
    2680:	93 0b       	sbc	r25, r19
    2682:	08 95       	ret

00002684 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void *pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    2684:	2f 92       	push	r2
    2686:	3f 92       	push	r3
    2688:	4f 92       	push	r4
    268a:	5f 92       	push	r5
    268c:	6f 92       	push	r6
    268e:	7f 92       	push	r7
    2690:	8f 92       	push	r8
    2692:	9f 92       	push	r9
    2694:	af 92       	push	r10
    2696:	bf 92       	push	r11
    2698:	cf 92       	push	r12
    269a:	df 92       	push	r13
    269c:	ef 92       	push	r14
    269e:	ff 92       	push	r15
    26a0:	0f 93       	push	r16
    26a2:	1f 93       	push	r17
    26a4:	cf 93       	push	r28
    26a6:	df 93       	push	r29
    26a8:	cd b7       	in	r28, 0x3d	; 61
    26aa:	de b7       	in	r29, 0x3e	; 62
    26ac:	29 97       	sbiw	r28, 0x09	; 9
    26ae:	0f b6       	in	r0, 0x3f	; 63
    26b0:	f8 94       	cli
    26b2:	de bf       	out	0x3e, r29	; 62
    26b4:	0f be       	out	0x3f, r0	; 63
    26b6:	cd bf       	out	0x3d, r28	; 61
    26b8:	5c 01       	movw	r10, r24
    26ba:	1b 01       	movw	r2, r22
    26bc:	2a 01       	movw	r4, r20
    26be:	0e 83       	std	Y+6, r16	; 0x06
    26c0:	1f 83       	std	Y+7, r17	; 0x07
    26c2:	28 87       	std	Y+8, r18	; 0x08
    26c4:	39 87       	std	Y+9, r19	; 0x09

    /* This send function is used to write to both message buffers and stream
    buffers.  If this is a message buffer then the space needed must be
    increased by the amount of bytes needed to store the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    26c6:	fc 01       	movw	r30, r24
    26c8:	86 85       	ldd	r24, Z+14	; 0x0e
    26ca:	80 ff       	sbrs	r24, 0
    26cc:	05 c0       	rjmp	.+10     	; 0x26d8 <xStreamBufferSend+0x54>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    26ce:	3a 01       	movw	r6, r20
    26d0:	f2 e0       	ldi	r31, 0x02	; 2
    26d2:	6f 0e       	add	r6, r31
    26d4:	71 1c       	adc	r7, r1
    26d6:	01 c0       	rjmp	.+2      	; 0x26da <xStreamBufferSend+0x56>
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReturn, xSpace = 0;
size_t xRequiredSpace = xDataLengthBytes;
    26d8:	3a 01       	movw	r6, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    26da:	8e 81       	ldd	r24, Y+6	; 0x06
    26dc:	9f 81       	ldd	r25, Y+7	; 0x07
    26de:	a8 85       	ldd	r26, Y+8	; 0x08
    26e0:	b9 85       	ldd	r27, Y+9	; 0x09
    26e2:	89 2b       	or	r24, r25
    26e4:	8a 2b       	or	r24, r26
    26e6:	8b 2b       	or	r24, r27
    26e8:	09 f4       	brne	.+2      	; 0x26ec <xStreamBufferSend+0x68>
    26ea:	34 c0       	rjmp	.+104    	; 0x2754 <xStreamBufferSend+0xd0>
    {
        vTaskSetTimeOutState( &xTimeOut );
    26ec:	ce 01       	movw	r24, r28
    26ee:	01 96       	adiw	r24, 0x01	; 1
    26f0:	22 d6       	rcall	.+3140   	; 0x3336 <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
            buffer. */
            taskENTER_CRITICAL();
    26f2:	0f b6       	in	r0, 0x3f	; 63
    26f4:	f8 94       	cli
    26f6:	0f 92       	push	r0
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    26f8:	c5 01       	movw	r24, r10
    26fa:	b2 df       	rcall	.-156    	; 0x2660 <xStreamBufferSpacesAvailable>
    26fc:	4c 01       	movw	r8, r24

                if( xSpace < xRequiredSpace )
    26fe:	86 15       	cp	r24, r6
    2700:	97 05       	cpc	r25, r7
    2702:	18 f5       	brcc	.+70     	; 0x274a <xStreamBufferSend+0xc6>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClear( NULL );
    2704:	80 e0       	ldi	r24, 0x00	; 0
    2706:	90 e0       	ldi	r25, 0x00	; 0
    2708:	0e 94 ed 1c 	call	0x39da	; 0x39da <xTaskNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    270c:	94 d6       	rcall	.+3368   	; 0x3436 <xTaskGetCurrentTaskHandle>
    270e:	f5 01       	movw	r30, r10
    2710:	93 87       	std	Z+11, r25	; 0x0b
    2712:	82 87       	std	Z+10, r24	; 0x0a
                {
                    taskEXIT_CRITICAL();
                    break;
                }
            }
            taskEXIT_CRITICAL();
    2714:	0f 90       	pop	r0
    2716:	0f be       	out	0x3f, r0	; 63

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    2718:	ce 80       	ldd	r12, Y+6	; 0x06
    271a:	df 80       	ldd	r13, Y+7	; 0x07
    271c:	e8 84       	ldd	r14, Y+8	; 0x08
    271e:	f9 84       	ldd	r15, Y+9	; 0x09
    2720:	00 e0       	ldi	r16, 0x00	; 0
    2722:	10 e0       	ldi	r17, 0x00	; 0
    2724:	20 e0       	ldi	r18, 0x00	; 0
    2726:	30 e0       	ldi	r19, 0x00	; 0
    2728:	a9 01       	movw	r20, r18
    272a:	60 e0       	ldi	r22, 0x00	; 0
    272c:	70 e0       	ldi	r23, 0x00	; 0
    272e:	cb 01       	movw	r24, r22
    2730:	c9 d7       	rcall	.+3986   	; 0x36c4 <xTaskNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
    2732:	f5 01       	movw	r30, r10
    2734:	13 86       	std	Z+11, r1	; 0x0b
    2736:	12 86       	std	Z+10, r1	; 0x0a

        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    2738:	be 01       	movw	r22, r28
    273a:	6a 5f       	subi	r22, 0xFA	; 250
    273c:	7f 4f       	sbci	r23, 0xFF	; 255
    273e:	ce 01       	movw	r24, r28
    2740:	01 96       	adiw	r24, 0x01	; 1
    2742:	20 d6       	rcall	.+3136   	; 0x3384 <xTaskCheckForTimeOut>
    2744:	88 23       	and	r24, r24
    2746:	a9 f2       	breq	.-86     	; 0x26f2 <xStreamBufferSend+0x6e>
    2748:	02 c0       	rjmp	.+4      	; 0x274e <xStreamBufferSend+0xca>
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
                }
                else
                {
                    taskEXIT_CRITICAL();
    274a:	0f 90       	pop	r0
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
    274c:	0f be       	out	0x3f, r0	; 63
    274e:	81 14       	cp	r8, r1
    2750:	91 04       	cpc	r9, r1
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    2752:	19 f4       	brne	.+6      	; 0x275a <xStreamBufferSend+0xd6>
    2754:	c5 01       	movw	r24, r10
    2756:	84 df       	rcall	.-248    	; 0x2660 <xStreamBufferSpacesAvailable>
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    2758:	4c 01       	movw	r8, r24
    275a:	83 01       	movw	r16, r6
    275c:	94 01       	movw	r18, r8
    275e:	a2 01       	movw	r20, r4
    2760:	b1 01       	movw	r22, r2
    2762:	c5 01       	movw	r24, r10
    2764:	96 de       	rcall	.-724    	; 0x2492 <prvWriteMessageToBuffer>

    if( xReturn > ( size_t ) 0 )
    2766:	7c 01       	movw	r14, r24
    2768:	89 2b       	or	r24, r25
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    276a:	e1 f0       	breq	.+56     	; 0x27a4 <xStreamBufferSend+0x120>
    276c:	c5 01       	movw	r24, r10
    276e:	35 de       	rcall	.-918    	; 0x23da <prvBytesInBuffer>
    2770:	f5 01       	movw	r30, r10
    2772:	26 81       	ldd	r18, Z+6	; 0x06
    2774:	37 81       	ldd	r19, Z+7	; 0x07
    2776:	82 17       	cp	r24, r18
    2778:	93 07       	cpc	r25, r19
        {
            sbSEND_COMPLETED( pxStreamBuffer );
    277a:	a0 f0       	brcs	.+40     	; 0x27a4 <xStreamBufferSend+0x120>
    277c:	0e d3       	rcall	.+1564   	; 0x2d9a <vTaskSuspendAll>
    277e:	f5 01       	movw	r30, r10
    2780:	80 85       	ldd	r24, Z+8	; 0x08
    2782:	91 85       	ldd	r25, Z+9	; 0x09
    2784:	89 2b       	or	r24, r25
    2786:	69 f0       	breq	.+26     	; 0x27a2 <xStreamBufferSend+0x11e>
    2788:	80 85       	ldd	r24, Z+8	; 0x08
    278a:	91 85       	ldd	r25, Z+9	; 0x09
    278c:	00 e0       	ldi	r16, 0x00	; 0
    278e:	10 e0       	ldi	r17, 0x00	; 0
    2790:	20 e0       	ldi	r18, 0x00	; 0
    2792:	40 e0       	ldi	r20, 0x00	; 0
    2794:	50 e0       	ldi	r21, 0x00	; 0
    2796:	ba 01       	movw	r22, r20
    2798:	0e 94 ec 1b 	call	0x37d8	; 0x37d8 <xTaskGenericNotify>
    279c:	f5 01       	movw	r30, r10
    279e:	11 86       	std	Z+9, r1	; 0x09
    27a0:	10 86       	std	Z+8, r1	; 0x08
    27a2:	e4 d3       	rcall	.+1992   	; 0x2f6c <xTaskResumeAll>
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    27a4:	c7 01       	movw	r24, r14
    27a6:	29 96       	adiw	r28, 0x09	; 9
    27a8:	0f b6       	in	r0, 0x3f	; 63
    27aa:	f8 94       	cli
    27ac:	de bf       	out	0x3e, r29	; 62
    27ae:	0f be       	out	0x3f, r0	; 63
    27b0:	cd bf       	out	0x3d, r28	; 61
    27b2:	df 91       	pop	r29
    27b4:	cf 91       	pop	r28
    27b6:	1f 91       	pop	r17
    27b8:	0f 91       	pop	r16
    27ba:	ff 90       	pop	r15
    27bc:	ef 90       	pop	r14
    27be:	df 90       	pop	r13
    27c0:	cf 90       	pop	r12
    27c2:	bf 90       	pop	r11
    27c4:	af 90       	pop	r10
    27c6:	9f 90       	pop	r9
    27c8:	8f 90       	pop	r8
    27ca:	7f 90       	pop	r7
    27cc:	6f 90       	pop	r6
    27ce:	5f 90       	pop	r5
    27d0:	4f 90       	pop	r4
    27d2:	3f 90       	pop	r3
    27d4:	2f 90       	pop	r2
    27d6:	08 95       	ret

000027d8 <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void *pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    27d8:	af 92       	push	r10
    27da:	bf 92       	push	r11
    27dc:	cf 92       	push	r12
    27de:	df 92       	push	r13
    27e0:	ef 92       	push	r14
    27e2:	ff 92       	push	r15
    27e4:	0f 93       	push	r16
    27e6:	1f 93       	push	r17
    27e8:	cf 93       	push	r28
    27ea:	df 93       	push	r29
    27ec:	ec 01       	movw	r28, r24
    27ee:	5b 01       	movw	r10, r22
    27f0:	6a 01       	movw	r12, r20
    27f2:	79 01       	movw	r14, r18

    /* This send function is used to write to both message buffers and stream
    buffers.  If this is a message buffer then the space needed must be
    increased by the amount of bytes needed to store the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    27f4:	8e 85       	ldd	r24, Y+14	; 0x0e
    27f6:	80 ff       	sbrs	r24, 0
    27f8:	04 c0       	rjmp	.+8      	; 0x2802 <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    27fa:	8a 01       	movw	r16, r20
    27fc:	0e 5f       	subi	r16, 0xFE	; 254
    27fe:	1f 4f       	sbci	r17, 0xFF	; 255
    2800:	01 c0       	rjmp	.+2      	; 0x2804 <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReturn, xSpace;
size_t xRequiredSpace = xDataLengthBytes;
    2802:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    2804:	ce 01       	movw	r24, r28
    2806:	2c df       	rcall	.-424    	; 0x2660 <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    2808:	9c 01       	movw	r18, r24
    280a:	a6 01       	movw	r20, r12
    280c:	b5 01       	movw	r22, r10
    280e:	ce 01       	movw	r24, r28
    2810:	40 de       	rcall	.-896    	; 0x2492 <prvWriteMessageToBuffer>
    2812:	6c 01       	movw	r12, r24

    if( xReturn > ( size_t ) 0 )
    2814:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    2816:	b9 f0       	breq	.+46     	; 0x2846 <xStreamBufferSendFromISR+0x6e>
    2818:	ce 01       	movw	r24, r28
    281a:	df dd       	rcall	.-1090   	; 0x23da <prvBytesInBuffer>
    281c:	2e 81       	ldd	r18, Y+6	; 0x06
    281e:	3f 81       	ldd	r19, Y+7	; 0x07
    2820:	82 17       	cp	r24, r18
    2822:	93 07       	cpc	r25, r19
    2824:	80 f0       	brcs	.+32     	; 0x2846 <xStreamBufferSendFromISR+0x6e>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    2826:	88 85       	ldd	r24, Y+8	; 0x08
    2828:	99 85       	ldd	r25, Y+9	; 0x09
    282a:	89 2b       	or	r24, r25
    282c:	61 f0       	breq	.+24     	; 0x2846 <xStreamBufferSendFromISR+0x6e>
    282e:	88 85       	ldd	r24, Y+8	; 0x08
    2830:	99 85       	ldd	r25, Y+9	; 0x09
    2832:	00 e0       	ldi	r16, 0x00	; 0
    2834:	10 e0       	ldi	r17, 0x00	; 0
    2836:	20 e0       	ldi	r18, 0x00	; 0
    2838:	40 e0       	ldi	r20, 0x00	; 0
    283a:	50 e0       	ldi	r21, 0x00	; 0
    283c:	ba 01       	movw	r22, r20
    283e:	0e 94 64 1c 	call	0x38c8	; 0x38c8 <xTaskGenericNotifyFromISR>
    2842:	19 86       	std	Y+9, r1	; 0x09
    2844:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    2846:	c6 01       	movw	r24, r12
    2848:	df 91       	pop	r29
    284a:	cf 91       	pop	r28
    284c:	1f 91       	pop	r17
    284e:	0f 91       	pop	r16
    2850:	ff 90       	pop	r15
    2852:	ef 90       	pop	r14
    2854:	df 90       	pop	r13
    2856:	cf 90       	pop	r12
    2858:	bf 90       	pop	r11
    285a:	af 90       	pop	r10
    285c:	08 95       	ret

0000285e <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void *pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    285e:	4f 92       	push	r4
    2860:	5f 92       	push	r5
    2862:	6f 92       	push	r6
    2864:	7f 92       	push	r7
    2866:	8f 92       	push	r8
    2868:	9f 92       	push	r9
    286a:	af 92       	push	r10
    286c:	bf 92       	push	r11
    286e:	cf 92       	push	r12
    2870:	df 92       	push	r13
    2872:	ef 92       	push	r14
    2874:	ff 92       	push	r15
    2876:	0f 93       	push	r16
    2878:	1f 93       	push	r17
    287a:	cf 93       	push	r28
    287c:	df 93       	push	r29
    287e:	1f 92       	push	r1
    2880:	1f 92       	push	r1
    2882:	cd b7       	in	r28, 0x3d	; 61
    2884:	de b7       	in	r29, 0x3e	; 62
    2886:	5c 01       	movw	r10, r24
    2888:	2b 01       	movw	r4, r22
    288a:	3a 01       	movw	r6, r20
    288c:	68 01       	movw	r12, r16
    288e:	79 01       	movw	r14, r18
    /* This receive function is used by both message buffers, which store
    discrete messages, and stream buffers, which store a continuous stream of
    bytes.  Discrete messages include an additional
    sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    2890:	fc 01       	movw	r30, r24
    2892:	86 85       	ldd	r24, Z+14	; 0x0e
    2894:	80 fd       	sbrc	r24, 0
    2896:	03 c0       	rjmp	.+6      	; 0x289e <xStreamBufferReceive+0x40>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    2898:	81 2c       	mov	r8, r1
    289a:	91 2c       	mov	r9, r1
    289c:	04 c0       	rjmp	.+8      	; 0x28a6 <xStreamBufferReceive+0x48>
    bytes.  Discrete messages include an additional
    sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    289e:	68 94       	set
    28a0:	88 24       	eor	r8, r8
    28a2:	81 f8       	bld	r8, 1
    28a4:	91 2c       	mov	r9, r1
    else
    {
        xBytesToStoreMessageLength = 0;
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    28a6:	c1 14       	cp	r12, r1
    28a8:	d1 04       	cpc	r13, r1
    28aa:	e1 04       	cpc	r14, r1
    28ac:	f1 04       	cpc	r15, r1
    28ae:	31 f1       	breq	.+76     	; 0x28fc <xStreamBufferReceive+0x9e>
    {
        /* Checking if there is data and clearing the notification state must be
        performed atomically. */
        taskENTER_CRITICAL();
    28b0:	0f b6       	in	r0, 0x3f	; 63
    28b2:	f8 94       	cli
    28b4:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    28b6:	c5 01       	movw	r24, r10
    28b8:	90 dd       	rcall	.-1248   	; 0x23da <prvBytesInBuffer>
    28ba:	8c 01       	movw	r16, r24
            /* If this function was invoked by a message buffer read then
            xBytesToStoreMessageLength holds the number of bytes used to hold
            the length of the next discrete message.  If this function was
            invoked by a stream buffer read then xBytesToStoreMessageLength will
            be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    28bc:	88 16       	cp	r8, r24
    28be:	99 06       	cpc	r9, r25
    28c0:	40 f0       	brcs	.+16     	; 0x28d2 <xStreamBufferReceive+0x74>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    28c2:	80 e0       	ldi	r24, 0x00	; 0
    28c4:	90 e0       	ldi	r25, 0x00	; 0
    28c6:	0e 94 ed 1c 	call	0x39da	; 0x39da <xTaskNotifyStateClear>

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    28ca:	b5 d5       	rcall	.+2922   	; 0x3436 <xTaskGetCurrentTaskHandle>
    28cc:	f5 01       	movw	r30, r10
    28ce:	91 87       	std	Z+9, r25	; 0x09
    28d0:	80 87       	std	Z+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    28d2:	0f 90       	pop	r0
    28d4:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    28d6:	80 16       	cp	r8, r16
    28d8:	91 06       	cpc	r9, r17
    28da:	b0 f0       	brcs	.+44     	; 0x2908 <xStreamBufferReceive+0xaa>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    28dc:	00 e0       	ldi	r16, 0x00	; 0
    28de:	10 e0       	ldi	r17, 0x00	; 0
    28e0:	20 e0       	ldi	r18, 0x00	; 0
    28e2:	30 e0       	ldi	r19, 0x00	; 0
    28e4:	a9 01       	movw	r20, r18
    28e6:	60 e0       	ldi	r22, 0x00	; 0
    28e8:	70 e0       	ldi	r23, 0x00	; 0
    28ea:	cb 01       	movw	r24, r22
    28ec:	eb d6       	rcall	.+3542   	; 0x36c4 <xTaskNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    28ee:	f5 01       	movw	r30, r10
    28f0:	11 86       	std	Z+9, r1	; 0x09

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    28f2:	10 86       	std	Z+8, r1	; 0x08
    28f4:	c5 01       	movw	r24, r10
    28f6:	71 dd       	rcall	.-1310   	; 0x23da <prvBytesInBuffer>
    28f8:	8c 01       	movw	r16, r24
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    28fa:	03 c0       	rjmp	.+6      	; 0x2902 <xStreamBufferReceive+0xa4>
    28fc:	c5 01       	movw	r24, r10
    28fe:	6d dd       	rcall	.-1318   	; 0x23da <prvBytesInBuffer>
    2900:	8c 01       	movw	r16, r24
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
    holds the number of bytes used to store the message length) or a stream of
    bytes (where xBytesToStoreMessageLength is zero), the number of bytes
    available must be greater than xBytesToStoreMessageLength to be able to
    read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    2902:	80 16       	cp	r8, r16
    2904:	91 06       	cpc	r9, r17
    2906:	b8 f5       	brcc	.+110    	; 0x2976 <xStreamBufferReceive+0x118>
                                        size_t xBytesToStoreMessageLength )
{
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

    if( xBytesToStoreMessageLength != ( size_t ) 0 )
    2908:	81 14       	cp	r8, r1
    290a:	91 04       	cpc	r9, r1
    290c:	c1 f0       	breq	.+48     	; 0x293e <xStreamBufferReceive+0xe0>
    {
        /* A discrete message is being received.  First receive the length
        of the message.  A copy of the tail is stored so the buffer can be
        returned to its prior state if the length of the message is too
        large for the provided buffer. */
        xOriginalTail = pxStreamBuffer->xTail;
    290e:	f5 01       	movw	r30, r10
    2910:	e0 80       	ld	r14, Z
    2912:	f1 80       	ldd	r15, Z+1	; 0x01
        ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
    2914:	98 01       	movw	r18, r16
    2916:	a4 01       	movw	r20, r8
    2918:	be 01       	movw	r22, r28
    291a:	6f 5f       	subi	r22, 0xFF	; 255
    291c:	7f 4f       	sbci	r23, 0xFF	; 255
    291e:	c5 01       	movw	r24, r10
    2920:	f8 dd       	rcall	.-1040   	; 0x2512 <prvReadBytesFromBuffer>
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
    2922:	89 81       	ldd	r24, Y+1	; 0x01
    2924:	9a 81       	ldd	r25, Y+2	; 0x02

        /* Reduce the number of bytes available by the number of bytes just
        read out. */
        xBytesAvailable -= xBytesToStoreMessageLength;
    2926:	08 19       	sub	r16, r8
    2928:	19 09       	sbc	r17, r9

        /* Check there is enough space in the buffer provided by the
        user. */
        if( xNextMessageLength > xBufferLengthBytes )
    292a:	68 16       	cp	r6, r24
    292c:	79 06       	cpc	r7, r25
    292e:	30 f4       	brcc	.+12     	; 0x293c <xStreamBufferReceive+0xde>
        {
            /* The user has provided insufficient space to read the message
            so return the buffer to its previous state (so the length of
            the message is in the buffer again). */
            pxStreamBuffer->xTail = xOriginalTail;
    2930:	f5 01       	movw	r30, r10
    2932:	f1 82       	std	Z+1, r15	; 0x01
    2934:	e0 82       	st	Z, r14
            xNextMessageLength = 0;
    2936:	61 2c       	mov	r6, r1
    2938:	71 2c       	mov	r7, r1
        of the message.  A copy of the tail is stored so the buffer can be
        returned to its prior state if the length of the message is too
        large for the provided buffer. */
        xOriginalTail = pxStreamBuffer->xTail;
        ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
    293a:	01 c0       	rjmp	.+2      	; 0x293e <xStreamBufferReceive+0xe0>
        message), so read as many bytes as possible. */
        xNextMessageLength = xBufferLengthBytes;
    }

    /* Read the actual data. */
    xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
    293c:	3c 01       	movw	r6, r24
    293e:	98 01       	movw	r18, r16
    2940:	a3 01       	movw	r20, r6
    2942:	b2 01       	movw	r22, r4
    2944:	c5 01       	movw	r24, r10
    2946:	e5 dd       	rcall	.-1078   	; 0x2512 <prvReadBytesFromBuffer>
    if( xBytesAvailable > xBytesToStoreMessageLength )
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    2948:	7c 01       	movw	r14, r24
    294a:	89 2b       	or	r24, r25
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    294c:	b1 f0       	breq	.+44     	; 0x297a <xStreamBufferReceive+0x11c>
    294e:	25 d2       	rcall	.+1098   	; 0x2d9a <vTaskSuspendAll>
    2950:	f5 01       	movw	r30, r10
    2952:	82 85       	ldd	r24, Z+10	; 0x0a
    2954:	93 85       	ldd	r25, Z+11	; 0x0b
    2956:	89 2b       	or	r24, r25
    2958:	61 f0       	breq	.+24     	; 0x2972 <xStreamBufferReceive+0x114>
    295a:	82 85       	ldd	r24, Z+10	; 0x0a
    295c:	93 85       	ldd	r25, Z+11	; 0x0b
    295e:	00 e0       	ldi	r16, 0x00	; 0
    2960:	10 e0       	ldi	r17, 0x00	; 0
    2962:	20 e0       	ldi	r18, 0x00	; 0
    2964:	40 e0       	ldi	r20, 0x00	; 0
    2966:	50 e0       	ldi	r21, 0x00	; 0
    2968:	ba 01       	movw	r22, r20
    296a:	36 d7       	rcall	.+3692   	; 0x37d8 <xTaskGenericNotify>
    296c:	f5 01       	movw	r30, r10
    296e:	13 86       	std	Z+11, r1	; 0x0b
    2970:	12 86       	std	Z+10, r1	; 0x0a
    2972:	fc d2       	rcall	.+1528   	; 0x2f6c <xTaskResumeAll>
    2974:	02 c0       	rjmp	.+4      	; 0x297a <xStreamBufferReceive+0x11c>
                             void *pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    2976:	e1 2c       	mov	r14, r1
    2978:	f1 2c       	mov	r15, r1
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    297a:	c7 01       	movw	r24, r14
    297c:	0f 90       	pop	r0
    297e:	0f 90       	pop	r0
    2980:	df 91       	pop	r29
    2982:	cf 91       	pop	r28
    2984:	1f 91       	pop	r17
    2986:	0f 91       	pop	r16
    2988:	ff 90       	pop	r15
    298a:	ef 90       	pop	r14
    298c:	df 90       	pop	r13
    298e:	cf 90       	pop	r12
    2990:	bf 90       	pop	r11
    2992:	af 90       	pop	r10
    2994:	9f 90       	pop	r9
    2996:	8f 90       	pop	r8
    2998:	7f 90       	pop	r7
    299a:	6f 90       	pop	r6
    299c:	5f 90       	pop	r5
    299e:	4f 90       	pop	r4
    29a0:	08 95       	ret

000029a2 <prvResetNextTaskUnblockTime>:
    29a2:	e0 91 25 19 	lds	r30, 0x1925	; 0x801925 <pxDelayedTaskList>
    29a6:	f0 91 26 19 	lds	r31, 0x1926	; 0x801926 <pxDelayedTaskList+0x1>
    29aa:	80 81       	ld	r24, Z
    29ac:	81 11       	cpse	r24, r1
    29ae:	0c c0       	rjmp	.+24     	; 0x29c8 <prvResetNextTaskUnblockTime+0x26>
    29b0:	8f ef       	ldi	r24, 0xFF	; 255
    29b2:	9f ef       	ldi	r25, 0xFF	; 255
    29b4:	dc 01       	movw	r26, r24
    29b6:	80 93 f2 18 	sts	0x18F2, r24	; 0x8018f2 <xNextTaskUnblockTime>
    29ba:	90 93 f3 18 	sts	0x18F3, r25	; 0x8018f3 <xNextTaskUnblockTime+0x1>
    29be:	a0 93 f4 18 	sts	0x18F4, r26	; 0x8018f4 <xNextTaskUnblockTime+0x2>
    29c2:	b0 93 f5 18 	sts	0x18F5, r27	; 0x8018f5 <xNextTaskUnblockTime+0x3>
    29c6:	08 95       	ret
    29c8:	e0 91 25 19 	lds	r30, 0x1925	; 0x801925 <pxDelayedTaskList>
    29cc:	f0 91 26 19 	lds	r31, 0x1926	; 0x801926 <pxDelayedTaskList+0x1>
    29d0:	07 80       	ldd	r0, Z+7	; 0x07
    29d2:	f0 85       	ldd	r31, Z+8	; 0x08
    29d4:	e0 2d       	mov	r30, r0
    29d6:	00 84       	ldd	r0, Z+8	; 0x08
    29d8:	f1 85       	ldd	r31, Z+9	; 0x09
    29da:	e0 2d       	mov	r30, r0
    29dc:	82 81       	ldd	r24, Z+2	; 0x02
    29de:	93 81       	ldd	r25, Z+3	; 0x03
    29e0:	a4 81       	ldd	r26, Z+4	; 0x04
    29e2:	b5 81       	ldd	r27, Z+5	; 0x05
    29e4:	80 93 f2 18 	sts	0x18F2, r24	; 0x8018f2 <xNextTaskUnblockTime>
    29e8:	90 93 f3 18 	sts	0x18F3, r25	; 0x8018f3 <xNextTaskUnblockTime+0x1>
    29ec:	a0 93 f4 18 	sts	0x18F4, r26	; 0x8018f4 <xNextTaskUnblockTime+0x2>
    29f0:	b0 93 f5 18 	sts	0x18F5, r27	; 0x8018f5 <xNextTaskUnblockTime+0x3>
    29f4:	08 95       	ret

000029f6 <prvAddCurrentTaskToDelayedList>:
    29f6:	8f 92       	push	r8
    29f8:	9f 92       	push	r9
    29fa:	af 92       	push	r10
    29fc:	bf 92       	push	r11
    29fe:	cf 92       	push	r12
    2a00:	df 92       	push	r13
    2a02:	ef 92       	push	r14
    2a04:	ff 92       	push	r15
    2a06:	cf 93       	push	r28
    2a08:	6b 01       	movw	r12, r22
    2a0a:	7c 01       	movw	r14, r24
    2a0c:	c4 2f       	mov	r28, r20
    2a0e:	80 90 fc 18 	lds	r8, 0x18FC	; 0x8018fc <xTickCount>
    2a12:	90 90 fd 18 	lds	r9, 0x18FD	; 0x8018fd <xTickCount+0x1>
    2a16:	a0 90 fe 18 	lds	r10, 0x18FE	; 0x8018fe <xTickCount+0x2>
    2a1a:	b0 90 ff 18 	lds	r11, 0x18FF	; 0x8018ff <xTickCount+0x3>
    2a1e:	80 91 69 19 	lds	r24, 0x1969	; 0x801969 <pxCurrentTCB>
    2a22:	90 91 6a 19 	lds	r25, 0x196A	; 0x80196a <pxCurrentTCB+0x1>
    2a26:	02 96       	adiw	r24, 0x02	; 2
    2a28:	0e 94 9b 0c 	call	0x1936	; 0x1936 <uxListRemove>
    2a2c:	8f ef       	ldi	r24, 0xFF	; 255
    2a2e:	c8 16       	cp	r12, r24
    2a30:	d8 06       	cpc	r13, r24
    2a32:	e8 06       	cpc	r14, r24
    2a34:	f8 06       	cpc	r15, r24
    2a36:	69 f4       	brne	.+26     	; 0x2a52 <prvAddCurrentTaskToDelayedList+0x5c>
    2a38:	cc 23       	and	r28, r28
    2a3a:	59 f0       	breq	.+22     	; 0x2a52 <prvAddCurrentTaskToDelayedList+0x5c>
    2a3c:	60 91 69 19 	lds	r22, 0x1969	; 0x801969 <pxCurrentTCB>
    2a40:	70 91 6a 19 	lds	r23, 0x196A	; 0x80196a <pxCurrentTCB+0x1>
    2a44:	6e 5f       	subi	r22, 0xFE	; 254
    2a46:	7f 4f       	sbci	r23, 0xFF	; 255
    2a48:	81 e0       	ldi	r24, 0x01	; 1
    2a4a:	99 e1       	ldi	r25, 0x19	; 25
    2a4c:	0e 94 3d 0c 	call	0x187a	; 0x187a <vListInsertEnd>
    2a50:	3f c0       	rjmp	.+126    	; 0x2ad0 <prvAddCurrentTaskToDelayedList+0xda>
    2a52:	c8 0c       	add	r12, r8
    2a54:	d9 1c       	adc	r13, r9
    2a56:	ea 1c       	adc	r14, r10
    2a58:	fb 1c       	adc	r15, r11
    2a5a:	e0 91 69 19 	lds	r30, 0x1969	; 0x801969 <pxCurrentTCB>
    2a5e:	f0 91 6a 19 	lds	r31, 0x196A	; 0x80196a <pxCurrentTCB+0x1>
    2a62:	c2 82       	std	Z+2, r12	; 0x02
    2a64:	d3 82       	std	Z+3, r13	; 0x03
    2a66:	e4 82       	std	Z+4, r14	; 0x04
    2a68:	f5 82       	std	Z+5, r15	; 0x05
    2a6a:	c8 14       	cp	r12, r8
    2a6c:	d9 04       	cpc	r13, r9
    2a6e:	ea 04       	cpc	r14, r10
    2a70:	fb 04       	cpc	r15, r11
    2a72:	68 f4       	brcc	.+26     	; 0x2a8e <prvAddCurrentTaskToDelayedList+0x98>
    2a74:	60 91 69 19 	lds	r22, 0x1969	; 0x801969 <pxCurrentTCB>
    2a78:	70 91 6a 19 	lds	r23, 0x196A	; 0x80196a <pxCurrentTCB+0x1>
    2a7c:	80 91 23 19 	lds	r24, 0x1923	; 0x801923 <pxOverflowDelayedTaskList>
    2a80:	90 91 24 19 	lds	r25, 0x1924	; 0x801924 <pxOverflowDelayedTaskList+0x1>
    2a84:	6e 5f       	subi	r22, 0xFE	; 254
    2a86:	7f 4f       	sbci	r23, 0xFF	; 255
    2a88:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <vListInsert>
    2a8c:	21 c0       	rjmp	.+66     	; 0x2ad0 <prvAddCurrentTaskToDelayedList+0xda>
    2a8e:	60 91 69 19 	lds	r22, 0x1969	; 0x801969 <pxCurrentTCB>
    2a92:	70 91 6a 19 	lds	r23, 0x196A	; 0x80196a <pxCurrentTCB+0x1>
    2a96:	80 91 25 19 	lds	r24, 0x1925	; 0x801925 <pxDelayedTaskList>
    2a9a:	90 91 26 19 	lds	r25, 0x1926	; 0x801926 <pxDelayedTaskList+0x1>
    2a9e:	6e 5f       	subi	r22, 0xFE	; 254
    2aa0:	7f 4f       	sbci	r23, 0xFF	; 255
    2aa2:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <vListInsert>
    2aa6:	80 91 f2 18 	lds	r24, 0x18F2	; 0x8018f2 <xNextTaskUnblockTime>
    2aaa:	90 91 f3 18 	lds	r25, 0x18F3	; 0x8018f3 <xNextTaskUnblockTime+0x1>
    2aae:	a0 91 f4 18 	lds	r26, 0x18F4	; 0x8018f4 <xNextTaskUnblockTime+0x2>
    2ab2:	b0 91 f5 18 	lds	r27, 0x18F5	; 0x8018f5 <xNextTaskUnblockTime+0x3>
    2ab6:	c8 16       	cp	r12, r24
    2ab8:	d9 06       	cpc	r13, r25
    2aba:	ea 06       	cpc	r14, r26
    2abc:	fb 06       	cpc	r15, r27
    2abe:	40 f4       	brcc	.+16     	; 0x2ad0 <prvAddCurrentTaskToDelayedList+0xda>
    2ac0:	c0 92 f2 18 	sts	0x18F2, r12	; 0x8018f2 <xNextTaskUnblockTime>
    2ac4:	d0 92 f3 18 	sts	0x18F3, r13	; 0x8018f3 <xNextTaskUnblockTime+0x1>
    2ac8:	e0 92 f4 18 	sts	0x18F4, r14	; 0x8018f4 <xNextTaskUnblockTime+0x2>
    2acc:	f0 92 f5 18 	sts	0x18F5, r15	; 0x8018f5 <xNextTaskUnblockTime+0x3>
    2ad0:	cf 91       	pop	r28
    2ad2:	ff 90       	pop	r15
    2ad4:	ef 90       	pop	r14
    2ad6:	df 90       	pop	r13
    2ad8:	cf 90       	pop	r12
    2ada:	bf 90       	pop	r11
    2adc:	af 90       	pop	r10
    2ade:	9f 90       	pop	r9
    2ae0:	8f 90       	pop	r8
    2ae2:	08 95       	ret

00002ae4 <xTaskCreate>:
    2ae4:	4f 92       	push	r4
    2ae6:	5f 92       	push	r5
    2ae8:	6f 92       	push	r6
    2aea:	7f 92       	push	r7
    2aec:	8f 92       	push	r8
    2aee:	9f 92       	push	r9
    2af0:	af 92       	push	r10
    2af2:	bf 92       	push	r11
    2af4:	cf 92       	push	r12
    2af6:	df 92       	push	r13
    2af8:	ef 92       	push	r14
    2afa:	ff 92       	push	r15
    2afc:	0f 93       	push	r16
    2afe:	cf 93       	push	r28
    2b00:	df 93       	push	r29
    2b02:	4c 01       	movw	r8, r24
    2b04:	6b 01       	movw	r12, r22
    2b06:	5a 01       	movw	r10, r20
    2b08:	29 01       	movw	r4, r18
    2b0a:	ca 01       	movw	r24, r20
    2b0c:	0e 94 3e 0b 	call	0x167c	; 0x167c <pvPortMalloc>
    2b10:	3c 01       	movw	r6, r24
    2b12:	89 2b       	or	r24, r25
    2b14:	09 f4       	brne	.+2      	; 0x2b18 <xTaskCreate+0x34>
    2b16:	f4 c0       	rjmp	.+488    	; 0x2d00 <xTaskCreate+0x21c>
    2b18:	80 e3       	ldi	r24, 0x30	; 48
    2b1a:	90 e0       	ldi	r25, 0x00	; 0
    2b1c:	0e 94 3e 0b 	call	0x167c	; 0x167c <pvPortMalloc>
    2b20:	ec 01       	movw	r28, r24
    2b22:	89 2b       	or	r24, r25
    2b24:	99 f0       	breq	.+38     	; 0x2b4c <xTaskCreate+0x68>
    2b26:	7c 8e       	std	Y+28, r7	; 0x1c
    2b28:	6b 8e       	std	Y+27, r6	; 0x1b
    2b2a:	a5 01       	movw	r20, r10
    2b2c:	65 ea       	ldi	r22, 0xA5	; 165
    2b2e:	70 e0       	ldi	r23, 0x00	; 0
    2b30:	c3 01       	movw	r24, r6
    2b32:	0e 94 33 31 	call	0x6266	; 0x6266 <memset>
    2b36:	21 e0       	ldi	r18, 0x01	; 1
    2b38:	a2 1a       	sub	r10, r18
    2b3a:	b1 08       	sbc	r11, r1
    2b3c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b3e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b40:	a8 0e       	add	r10, r24
    2b42:	b9 1e       	adc	r11, r25
    2b44:	c1 14       	cp	r12, r1
    2b46:	d1 04       	cpc	r13, r1
    2b48:	29 f4       	brne	.+10     	; 0x2b54 <xTaskCreate+0x70>
    2b4a:	20 c0       	rjmp	.+64     	; 0x2b8c <xTaskCreate+0xa8>
    2b4c:	c3 01       	movw	r24, r6
    2b4e:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <vPortFree>
    2b52:	d6 c0       	rjmp	.+428    	; 0x2d00 <xTaskCreate+0x21c>
    2b54:	d6 01       	movw	r26, r12
    2b56:	8c 91       	ld	r24, X
    2b58:	8d 8f       	std	Y+29, r24	; 0x1d
    2b5a:	8c 91       	ld	r24, X
    2b5c:	88 23       	and	r24, r24
    2b5e:	a1 f0       	breq	.+40     	; 0x2b88 <xTaskCreate+0xa4>
    2b60:	ae 01       	movw	r20, r28
    2b62:	42 5e       	subi	r20, 0xE2	; 226
    2b64:	5f 4f       	sbci	r21, 0xFF	; 255
    2b66:	f6 01       	movw	r30, r12
    2b68:	31 96       	adiw	r30, 0x01	; 1
    2b6a:	b8 e0       	ldi	r27, 0x08	; 8
    2b6c:	cb 0e       	add	r12, r27
    2b6e:	d1 1c       	adc	r13, r1
    2b70:	cf 01       	movw	r24, r30
    2b72:	21 91       	ld	r18, Z+
    2b74:	da 01       	movw	r26, r20
    2b76:	2d 93       	st	X+, r18
    2b78:	ad 01       	movw	r20, r26
    2b7a:	dc 01       	movw	r26, r24
    2b7c:	8c 91       	ld	r24, X
    2b7e:	88 23       	and	r24, r24
    2b80:	19 f0       	breq	.+6      	; 0x2b88 <xTaskCreate+0xa4>
    2b82:	ec 15       	cp	r30, r12
    2b84:	fd 05       	cpc	r31, r13
    2b86:	a1 f7       	brne	.-24     	; 0x2b70 <xTaskCreate+0x8c>
    2b88:	1c a2       	std	Y+36, r1	; 0x24
    2b8a:	01 c0       	rjmp	.+2      	; 0x2b8e <xTaskCreate+0xaa>
    2b8c:	1d 8e       	std	Y+29, r1	; 0x1d
    2b8e:	04 30       	cpi	r16, 0x04	; 4
    2b90:	08 f0       	brcs	.+2      	; 0x2b94 <xTaskCreate+0xb0>
    2b92:	03 e0       	ldi	r16, 0x03	; 3
    2b94:	0a 8f       	std	Y+26, r16	; 0x1a
    2b96:	0f a3       	std	Y+39, r16	; 0x27
    2b98:	18 a6       	std	Y+40, r1	; 0x28
    2b9a:	6e 01       	movw	r12, r28
    2b9c:	b2 e0       	ldi	r27, 0x02	; 2
    2b9e:	cb 0e       	add	r12, r27
    2ba0:	d1 1c       	adc	r13, r1
    2ba2:	c6 01       	movw	r24, r12
    2ba4:	0e 94 39 0c 	call	0x1872	; 0x1872 <vListInitialiseItem>
    2ba8:	ce 01       	movw	r24, r28
    2baa:	0e 96       	adiw	r24, 0x0e	; 14
    2bac:	0e 94 39 0c 	call	0x1872	; 0x1872 <vListInitialiseItem>
    2bb0:	db 87       	std	Y+11, r29	; 0x0b
    2bb2:	ca 87       	std	Y+10, r28	; 0x0a
    2bb4:	84 e0       	ldi	r24, 0x04	; 4
    2bb6:	90 e0       	ldi	r25, 0x00	; 0
    2bb8:	a0 e0       	ldi	r26, 0x00	; 0
    2bba:	b0 e0       	ldi	r27, 0x00	; 0
    2bbc:	80 1b       	sub	r24, r16
    2bbe:	91 09       	sbc	r25, r1
    2bc0:	a1 09       	sbc	r26, r1
    2bc2:	b1 09       	sbc	r27, r1
    2bc4:	8e 87       	std	Y+14, r24	; 0x0e
    2bc6:	9f 87       	std	Y+15, r25	; 0x0f
    2bc8:	a8 8b       	std	Y+16, r26	; 0x10
    2bca:	b9 8b       	std	Y+17, r27	; 0x11
    2bcc:	df 8b       	std	Y+23, r29	; 0x17
    2bce:	ce 8b       	std	Y+22, r28	; 0x16
    2bd0:	1a a6       	std	Y+42, r1	; 0x2a
    2bd2:	19 a6       	std	Y+41, r1	; 0x29
    2bd4:	1b a6       	std	Y+43, r1	; 0x2b
    2bd6:	1c a6       	std	Y+44, r1	; 0x2c
    2bd8:	1d a6       	std	Y+45, r1	; 0x2d
    2bda:	1e a6       	std	Y+46, r1	; 0x2e
    2bdc:	1f a6       	std	Y+47, r1	; 0x2f
    2bde:	a2 01       	movw	r20, r4
    2be0:	b4 01       	movw	r22, r8
    2be2:	c5 01       	movw	r24, r10
    2be4:	0e 94 c2 0c 	call	0x1984	; 0x1984 <pxPortInitialiseStack>
    2be8:	99 83       	std	Y+1, r25	; 0x01
    2bea:	88 83       	st	Y, r24
    2bec:	e1 14       	cp	r14, r1
    2bee:	f1 04       	cpc	r15, r1
    2bf0:	19 f0       	breq	.+6      	; 0x2bf8 <xTaskCreate+0x114>
    2bf2:	f7 01       	movw	r30, r14
    2bf4:	d1 83       	std	Z+1, r29	; 0x01
    2bf6:	c0 83       	st	Z, r28
    2bf8:	0f b6       	in	r0, 0x3f	; 63
    2bfa:	f8 94       	cli
    2bfc:	0f 92       	push	r0
    2bfe:	80 91 00 19 	lds	r24, 0x1900	; 0x801900 <uxCurrentNumberOfTasks>
    2c02:	8f 5f       	subi	r24, 0xFF	; 255
    2c04:	80 93 00 19 	sts	0x1900, r24	; 0x801900 <uxCurrentNumberOfTasks>
    2c08:	80 91 69 19 	lds	r24, 0x1969	; 0x801969 <pxCurrentTCB>
    2c0c:	90 91 6a 19 	lds	r25, 0x196A	; 0x80196a <pxCurrentTCB+0x1>
    2c10:	89 2b       	or	r24, r25
    2c12:	d1 f5       	brne	.+116    	; 0x2c88 <xTaskCreate+0x1a4>
    2c14:	d0 93 6a 19 	sts	0x196A, r29	; 0x80196a <pxCurrentTCB+0x1>
    2c18:	c0 93 69 19 	sts	0x1969, r28	; 0x801969 <pxCurrentTCB>
    2c1c:	80 91 00 19 	lds	r24, 0x1900	; 0x801900 <uxCurrentNumberOfTasks>
    2c20:	81 30       	cpi	r24, 0x01	; 1
    2c22:	09 f0       	breq	.+2      	; 0x2c26 <xTaskCreate+0x142>
    2c24:	41 c0       	rjmp	.+130    	; 0x2ca8 <xTaskCreate+0x1c4>
    2c26:	8d e3       	ldi	r24, 0x3D	; 61
    2c28:	99 e1       	ldi	r25, 0x19	; 25
    2c2a:	0e 94 28 0c 	call	0x1850	; 0x1850 <vListInitialise>
    2c2e:	88 e4       	ldi	r24, 0x48	; 72
    2c30:	99 e1       	ldi	r25, 0x19	; 25
    2c32:	0e 94 28 0c 	call	0x1850	; 0x1850 <vListInitialise>
    2c36:	83 e5       	ldi	r24, 0x53	; 83
    2c38:	99 e1       	ldi	r25, 0x19	; 25
    2c3a:	0e 94 28 0c 	call	0x1850	; 0x1850 <vListInitialise>
    2c3e:	8e e5       	ldi	r24, 0x5E	; 94
    2c40:	99 e1       	ldi	r25, 0x19	; 25
    2c42:	0e 94 28 0c 	call	0x1850	; 0x1850 <vListInitialise>
    2c46:	82 e3       	ldi	r24, 0x32	; 50
    2c48:	99 e1       	ldi	r25, 0x19	; 25
    2c4a:	0e 94 28 0c 	call	0x1850	; 0x1850 <vListInitialise>
    2c4e:	87 e2       	ldi	r24, 0x27	; 39
    2c50:	99 e1       	ldi	r25, 0x19	; 25
    2c52:	0e 94 28 0c 	call	0x1850	; 0x1850 <vListInitialise>
    2c56:	88 e1       	ldi	r24, 0x18	; 24
    2c58:	99 e1       	ldi	r25, 0x19	; 25
    2c5a:	0e 94 28 0c 	call	0x1850	; 0x1850 <vListInitialise>
    2c5e:	8d e0       	ldi	r24, 0x0D	; 13
    2c60:	99 e1       	ldi	r25, 0x19	; 25
    2c62:	0e 94 28 0c 	call	0x1850	; 0x1850 <vListInitialise>
    2c66:	81 e0       	ldi	r24, 0x01	; 1
    2c68:	99 e1       	ldi	r25, 0x19	; 25
    2c6a:	0e 94 28 0c 	call	0x1850	; 0x1850 <vListInitialise>
    2c6e:	82 e3       	ldi	r24, 0x32	; 50
    2c70:	99 e1       	ldi	r25, 0x19	; 25
    2c72:	90 93 26 19 	sts	0x1926, r25	; 0x801926 <pxDelayedTaskList+0x1>
    2c76:	80 93 25 19 	sts	0x1925, r24	; 0x801925 <pxDelayedTaskList>
    2c7a:	87 e2       	ldi	r24, 0x27	; 39
    2c7c:	99 e1       	ldi	r25, 0x19	; 25
    2c7e:	90 93 24 19 	sts	0x1924, r25	; 0x801924 <pxOverflowDelayedTaskList+0x1>
    2c82:	80 93 23 19 	sts	0x1923, r24	; 0x801923 <pxOverflowDelayedTaskList>
    2c86:	10 c0       	rjmp	.+32     	; 0x2ca8 <xTaskCreate+0x1c4>
    2c88:	80 91 fa 18 	lds	r24, 0x18FA	; 0x8018fa <xSchedulerRunning>
    2c8c:	81 11       	cpse	r24, r1
    2c8e:	0c c0       	rjmp	.+24     	; 0x2ca8 <xTaskCreate+0x1c4>
    2c90:	e0 91 69 19 	lds	r30, 0x1969	; 0x801969 <pxCurrentTCB>
    2c94:	f0 91 6a 19 	lds	r31, 0x196A	; 0x80196a <pxCurrentTCB+0x1>
    2c98:	92 8d       	ldd	r25, Z+26	; 0x1a
    2c9a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2c9c:	89 17       	cp	r24, r25
    2c9e:	20 f0       	brcs	.+8      	; 0x2ca8 <xTaskCreate+0x1c4>
    2ca0:	d0 93 6a 19 	sts	0x196A, r29	; 0x80196a <pxCurrentTCB+0x1>
    2ca4:	c0 93 69 19 	sts	0x1969, r28	; 0x801969 <pxCurrentTCB>
    2ca8:	80 91 f6 18 	lds	r24, 0x18F6	; 0x8018f6 <uxTaskNumber>
    2cac:	8f 5f       	subi	r24, 0xFF	; 255
    2cae:	80 93 f6 18 	sts	0x18F6, r24	; 0x8018f6 <uxTaskNumber>
    2cb2:	8d a3       	std	Y+37, r24	; 0x25
    2cb4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2cb6:	90 91 fb 18 	lds	r25, 0x18FB	; 0x8018fb <uxTopReadyPriority>
    2cba:	98 17       	cp	r25, r24
    2cbc:	10 f4       	brcc	.+4      	; 0x2cc2 <xTaskCreate+0x1de>
    2cbe:	80 93 fb 18 	sts	0x18FB, r24	; 0x8018fb <uxTopReadyPriority>
    2cc2:	fb e0       	ldi	r31, 0x0B	; 11
    2cc4:	8f 9f       	mul	r24, r31
    2cc6:	c0 01       	movw	r24, r0
    2cc8:	11 24       	eor	r1, r1
    2cca:	b6 01       	movw	r22, r12
    2ccc:	83 5c       	subi	r24, 0xC3	; 195
    2cce:	96 4e       	sbci	r25, 0xE6	; 230
    2cd0:	0e 94 3d 0c 	call	0x187a	; 0x187a <vListInsertEnd>
    2cd4:	0f 90       	pop	r0
    2cd6:	0f be       	out	0x3f, r0	; 63
    2cd8:	80 91 fa 18 	lds	r24, 0x18FA	; 0x8018fa <xSchedulerRunning>
    2cdc:	88 23       	and	r24, r24
    2cde:	61 f0       	breq	.+24     	; 0x2cf8 <xTaskCreate+0x214>
    2ce0:	e0 91 69 19 	lds	r30, 0x1969	; 0x801969 <pxCurrentTCB>
    2ce4:	f0 91 6a 19 	lds	r31, 0x196A	; 0x80196a <pxCurrentTCB+0x1>
    2ce8:	92 8d       	ldd	r25, Z+26	; 0x1a
    2cea:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2cec:	98 17       	cp	r25, r24
    2cee:	30 f4       	brcc	.+12     	; 0x2cfc <xTaskCreate+0x218>
    2cf0:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <vPortYield>
    2cf4:	81 e0       	ldi	r24, 0x01	; 1
    2cf6:	05 c0       	rjmp	.+10     	; 0x2d02 <xTaskCreate+0x21e>
    2cf8:	81 e0       	ldi	r24, 0x01	; 1
    2cfa:	03 c0       	rjmp	.+6      	; 0x2d02 <xTaskCreate+0x21e>
    2cfc:	81 e0       	ldi	r24, 0x01	; 1
    2cfe:	01 c0       	rjmp	.+2      	; 0x2d02 <xTaskCreate+0x21e>
    2d00:	8f ef       	ldi	r24, 0xFF	; 255
    2d02:	df 91       	pop	r29
    2d04:	cf 91       	pop	r28
    2d06:	0f 91       	pop	r16
    2d08:	ff 90       	pop	r15
    2d0a:	ef 90       	pop	r14
    2d0c:	df 90       	pop	r13
    2d0e:	cf 90       	pop	r12
    2d10:	bf 90       	pop	r11
    2d12:	af 90       	pop	r10
    2d14:	9f 90       	pop	r9
    2d16:	8f 90       	pop	r8
    2d18:	7f 90       	pop	r7
    2d1a:	6f 90       	pop	r6
    2d1c:	5f 90       	pop	r5
    2d1e:	4f 90       	pop	r4
    2d20:	08 95       	ret

00002d22 <vTaskStartScheduler>:
    2d22:	ef 92       	push	r14
    2d24:	ff 92       	push	r15
    2d26:	0f 93       	push	r16
    2d28:	0f 2e       	mov	r0, r31
    2d2a:	f0 ef       	ldi	r31, 0xF0	; 240
    2d2c:	ef 2e       	mov	r14, r31
    2d2e:	f8 e1       	ldi	r31, 0x18	; 24
    2d30:	ff 2e       	mov	r15, r31
    2d32:	f0 2d       	mov	r31, r0
    2d34:	00 e0       	ldi	r16, 0x00	; 0
    2d36:	20 e0       	ldi	r18, 0x00	; 0
    2d38:	30 e0       	ldi	r19, 0x00	; 0
    2d3a:	40 ec       	ldi	r20, 0xC0	; 192
    2d3c:	50 e0       	ldi	r21, 0x00	; 0
    2d3e:	62 e7       	ldi	r22, 0x72	; 114
    2d40:	75 e0       	ldi	r23, 0x05	; 5
    2d42:	8d ec       	ldi	r24, 0xCD	; 205
    2d44:	90 e0       	ldi	r25, 0x00	; 0
    2d46:	ce de       	rcall	.-612    	; 0x2ae4 <xTaskCreate>
    2d48:	81 30       	cpi	r24, 0x01	; 1
    2d4a:	19 f5       	brne	.+70     	; 0x2d92 <vTaskStartScheduler+0x70>
    2d4c:	cc d6       	rcall	.+3480   	; 0x3ae6 <xTimerCreateTimerTask>
    2d4e:	81 30       	cpi	r24, 0x01	; 1
    2d50:	01 f5       	brne	.+64     	; 0x2d92 <vTaskStartScheduler+0x70>
    2d52:	f8 94       	cli
    2d54:	8f ef       	ldi	r24, 0xFF	; 255
    2d56:	9f ef       	ldi	r25, 0xFF	; 255
    2d58:	dc 01       	movw	r26, r24
    2d5a:	80 93 f2 18 	sts	0x18F2, r24	; 0x8018f2 <xNextTaskUnblockTime>
    2d5e:	90 93 f3 18 	sts	0x18F3, r25	; 0x8018f3 <xNextTaskUnblockTime+0x1>
    2d62:	a0 93 f4 18 	sts	0x18F4, r26	; 0x8018f4 <xNextTaskUnblockTime+0x2>
    2d66:	b0 93 f5 18 	sts	0x18F5, r27	; 0x8018f5 <xNextTaskUnblockTime+0x3>
    2d6a:	81 e0       	ldi	r24, 0x01	; 1
    2d6c:	80 93 fa 18 	sts	0x18FA, r24	; 0x8018fa <xSchedulerRunning>
    2d70:	10 92 fc 18 	sts	0x18FC, r1	; 0x8018fc <xTickCount>
    2d74:	10 92 fd 18 	sts	0x18FD, r1	; 0x8018fd <xTickCount+0x1>
    2d78:	10 92 fe 18 	sts	0x18FE, r1	; 0x8018fe <xTickCount+0x2>
    2d7c:	10 92 ff 18 	sts	0x18FF, r1	; 0x8018ff <xTickCount+0x3>
    2d80:	e0 91 69 19 	lds	r30, 0x1969	; 0x801969 <pxCurrentTCB>
    2d84:	f0 91 6a 19 	lds	r31, 0x196A	; 0x80196a <pxCurrentTCB+0x1>
    2d88:	81 a5       	ldd	r24, Z+41	; 0x29
    2d8a:	0e 94 75 09 	call	0x12ea	; 0x12ea <task_switch_in>
    2d8e:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xPortStartScheduler>
    2d92:	0f 91       	pop	r16
    2d94:	ff 90       	pop	r15
    2d96:	ef 90       	pop	r14
    2d98:	08 95       	ret

00002d9a <vTaskSuspendAll>:
    2d9a:	80 91 ef 18 	lds	r24, 0x18EF	; 0x8018ef <uxSchedulerSuspended>
    2d9e:	8f 5f       	subi	r24, 0xFF	; 255
    2da0:	80 93 ef 18 	sts	0x18EF, r24	; 0x8018ef <uxSchedulerSuspended>
    2da4:	08 95       	ret

00002da6 <xTaskGetTickCount>:
    2da6:	0f b6       	in	r0, 0x3f	; 63
    2da8:	f8 94       	cli
    2daa:	0f 92       	push	r0
    2dac:	60 91 fc 18 	lds	r22, 0x18FC	; 0x8018fc <xTickCount>
    2db0:	70 91 fd 18 	lds	r23, 0x18FD	; 0x8018fd <xTickCount+0x1>
    2db4:	80 91 fe 18 	lds	r24, 0x18FE	; 0x8018fe <xTickCount+0x2>
    2db8:	90 91 ff 18 	lds	r25, 0x18FF	; 0x8018ff <xTickCount+0x3>
    2dbc:	0f 90       	pop	r0
    2dbe:	0f be       	out	0x3f, r0	; 63
    2dc0:	08 95       	ret

00002dc2 <xTaskIncrementTick>:
    2dc2:	9f 92       	push	r9
    2dc4:	af 92       	push	r10
    2dc6:	bf 92       	push	r11
    2dc8:	cf 92       	push	r12
    2dca:	df 92       	push	r13
    2dcc:	ef 92       	push	r14
    2dce:	ff 92       	push	r15
    2dd0:	0f 93       	push	r16
    2dd2:	1f 93       	push	r17
    2dd4:	cf 93       	push	r28
    2dd6:	df 93       	push	r29
    2dd8:	80 91 ef 18 	lds	r24, 0x18EF	; 0x8018ef <uxSchedulerSuspended>
    2ddc:	81 11       	cpse	r24, r1
    2dde:	ad c0       	rjmp	.+346    	; 0x2f3a <xTaskIncrementTick+0x178>
    2de0:	c0 90 fc 18 	lds	r12, 0x18FC	; 0x8018fc <xTickCount>
    2de4:	d0 90 fd 18 	lds	r13, 0x18FD	; 0x8018fd <xTickCount+0x1>
    2de8:	e0 90 fe 18 	lds	r14, 0x18FE	; 0x8018fe <xTickCount+0x2>
    2dec:	f0 90 ff 18 	lds	r15, 0x18FF	; 0x8018ff <xTickCount+0x3>
    2df0:	8f ef       	ldi	r24, 0xFF	; 255
    2df2:	c8 1a       	sub	r12, r24
    2df4:	d8 0a       	sbc	r13, r24
    2df6:	e8 0a       	sbc	r14, r24
    2df8:	f8 0a       	sbc	r15, r24
    2dfa:	c0 92 fc 18 	sts	0x18FC, r12	; 0x8018fc <xTickCount>
    2dfe:	d0 92 fd 18 	sts	0x18FD, r13	; 0x8018fd <xTickCount+0x1>
    2e02:	e0 92 fe 18 	sts	0x18FE, r14	; 0x8018fe <xTickCount+0x2>
    2e06:	f0 92 ff 18 	sts	0x18FF, r15	; 0x8018ff <xTickCount+0x3>
    2e0a:	c1 14       	cp	r12, r1
    2e0c:	d1 04       	cpc	r13, r1
    2e0e:	e1 04       	cpc	r14, r1
    2e10:	f1 04       	cpc	r15, r1
    2e12:	b1 f4       	brne	.+44     	; 0x2e40 <xTaskIncrementTick+0x7e>
    2e14:	80 91 25 19 	lds	r24, 0x1925	; 0x801925 <pxDelayedTaskList>
    2e18:	90 91 26 19 	lds	r25, 0x1926	; 0x801926 <pxDelayedTaskList+0x1>
    2e1c:	20 91 23 19 	lds	r18, 0x1923	; 0x801923 <pxOverflowDelayedTaskList>
    2e20:	30 91 24 19 	lds	r19, 0x1924	; 0x801924 <pxOverflowDelayedTaskList+0x1>
    2e24:	30 93 26 19 	sts	0x1926, r19	; 0x801926 <pxDelayedTaskList+0x1>
    2e28:	20 93 25 19 	sts	0x1925, r18	; 0x801925 <pxDelayedTaskList>
    2e2c:	90 93 24 19 	sts	0x1924, r25	; 0x801924 <pxOverflowDelayedTaskList+0x1>
    2e30:	80 93 23 19 	sts	0x1923, r24	; 0x801923 <pxOverflowDelayedTaskList>
    2e34:	80 91 f7 18 	lds	r24, 0x18F7	; 0x8018f7 <xNumOfOverflows>
    2e38:	8f 5f       	subi	r24, 0xFF	; 255
    2e3a:	80 93 f7 18 	sts	0x18F7, r24	; 0x8018f7 <xNumOfOverflows>
    2e3e:	b1 dd       	rcall	.-1182   	; 0x29a2 <prvResetNextTaskUnblockTime>
    2e40:	80 91 f2 18 	lds	r24, 0x18F2	; 0x8018f2 <xNextTaskUnblockTime>
    2e44:	90 91 f3 18 	lds	r25, 0x18F3	; 0x8018f3 <xNextTaskUnblockTime+0x1>
    2e48:	a0 91 f4 18 	lds	r26, 0x18F4	; 0x8018f4 <xNextTaskUnblockTime+0x2>
    2e4c:	b0 91 f5 18 	lds	r27, 0x18F5	; 0x8018f5 <xNextTaskUnblockTime+0x3>
    2e50:	c8 16       	cp	r12, r24
    2e52:	d9 06       	cpc	r13, r25
    2e54:	ea 06       	cpc	r14, r26
    2e56:	fb 06       	cpc	r15, r27
    2e58:	10 f4       	brcc	.+4      	; 0x2e5e <xTaskIncrementTick+0x9c>
    2e5a:	b1 2c       	mov	r11, r1
    2e5c:	5d c0       	rjmp	.+186    	; 0x2f18 <xTaskIncrementTick+0x156>
    2e5e:	b1 2c       	mov	r11, r1
    2e60:	0f 2e       	mov	r0, r31
    2e62:	fb e0       	ldi	r31, 0x0B	; 11
    2e64:	af 2e       	mov	r10, r31
    2e66:	f0 2d       	mov	r31, r0
    2e68:	99 24       	eor	r9, r9
    2e6a:	93 94       	inc	r9
    2e6c:	e0 91 25 19 	lds	r30, 0x1925	; 0x801925 <pxDelayedTaskList>
    2e70:	f0 91 26 19 	lds	r31, 0x1926	; 0x801926 <pxDelayedTaskList+0x1>
    2e74:	80 81       	ld	r24, Z
    2e76:	81 11       	cpse	r24, r1
    2e78:	0c c0       	rjmp	.+24     	; 0x2e92 <xTaskIncrementTick+0xd0>
    2e7a:	8f ef       	ldi	r24, 0xFF	; 255
    2e7c:	9f ef       	ldi	r25, 0xFF	; 255
    2e7e:	dc 01       	movw	r26, r24
    2e80:	80 93 f2 18 	sts	0x18F2, r24	; 0x8018f2 <xNextTaskUnblockTime>
    2e84:	90 93 f3 18 	sts	0x18F3, r25	; 0x8018f3 <xNextTaskUnblockTime+0x1>
    2e88:	a0 93 f4 18 	sts	0x18F4, r26	; 0x8018f4 <xNextTaskUnblockTime+0x2>
    2e8c:	b0 93 f5 18 	sts	0x18F5, r27	; 0x8018f5 <xNextTaskUnblockTime+0x3>
    2e90:	43 c0       	rjmp	.+134    	; 0x2f18 <xTaskIncrementTick+0x156>
    2e92:	e0 91 25 19 	lds	r30, 0x1925	; 0x801925 <pxDelayedTaskList>
    2e96:	f0 91 26 19 	lds	r31, 0x1926	; 0x801926 <pxDelayedTaskList+0x1>
    2e9a:	07 80       	ldd	r0, Z+7	; 0x07
    2e9c:	f0 85       	ldd	r31, Z+8	; 0x08
    2e9e:	e0 2d       	mov	r30, r0
    2ea0:	c0 85       	ldd	r28, Z+8	; 0x08
    2ea2:	d1 85       	ldd	r29, Z+9	; 0x09
    2ea4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ea6:	9b 81       	ldd	r25, Y+3	; 0x03
    2ea8:	ac 81       	ldd	r26, Y+4	; 0x04
    2eaa:	bd 81       	ldd	r27, Y+5	; 0x05
    2eac:	c8 16       	cp	r12, r24
    2eae:	d9 06       	cpc	r13, r25
    2eb0:	ea 06       	cpc	r14, r26
    2eb2:	fb 06       	cpc	r15, r27
    2eb4:	48 f4       	brcc	.+18     	; 0x2ec8 <xTaskIncrementTick+0x106>
    2eb6:	80 93 f2 18 	sts	0x18F2, r24	; 0x8018f2 <xNextTaskUnblockTime>
    2eba:	90 93 f3 18 	sts	0x18F3, r25	; 0x8018f3 <xNextTaskUnblockTime+0x1>
    2ebe:	a0 93 f4 18 	sts	0x18F4, r26	; 0x8018f4 <xNextTaskUnblockTime+0x2>
    2ec2:	b0 93 f5 18 	sts	0x18F5, r27	; 0x8018f5 <xNextTaskUnblockTime+0x3>
    2ec6:	28 c0       	rjmp	.+80     	; 0x2f18 <xTaskIncrementTick+0x156>
    2ec8:	8e 01       	movw	r16, r28
    2eca:	0e 5f       	subi	r16, 0xFE	; 254
    2ecc:	1f 4f       	sbci	r17, 0xFF	; 255
    2ece:	c8 01       	movw	r24, r16
    2ed0:	0e 94 9b 0c 	call	0x1936	; 0x1936 <uxListRemove>
    2ed4:	88 8d       	ldd	r24, Y+24	; 0x18
    2ed6:	99 8d       	ldd	r25, Y+25	; 0x19
    2ed8:	89 2b       	or	r24, r25
    2eda:	21 f0       	breq	.+8      	; 0x2ee4 <xTaskIncrementTick+0x122>
    2edc:	ce 01       	movw	r24, r28
    2ede:	0e 96       	adiw	r24, 0x0e	; 14
    2ee0:	0e 94 9b 0c 	call	0x1936	; 0x1936 <uxListRemove>
    2ee4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2ee6:	90 91 fb 18 	lds	r25, 0x18FB	; 0x8018fb <uxTopReadyPriority>
    2eea:	98 17       	cp	r25, r24
    2eec:	10 f4       	brcc	.+4      	; 0x2ef2 <xTaskIncrementTick+0x130>
    2eee:	80 93 fb 18 	sts	0x18FB, r24	; 0x8018fb <uxTopReadyPriority>
    2ef2:	a8 9e       	mul	r10, r24
    2ef4:	c0 01       	movw	r24, r0
    2ef6:	11 24       	eor	r1, r1
    2ef8:	b8 01       	movw	r22, r16
    2efa:	83 5c       	subi	r24, 0xC3	; 195
    2efc:	96 4e       	sbci	r25, 0xE6	; 230
    2efe:	0e 94 3d 0c 	call	0x187a	; 0x187a <vListInsertEnd>
    2f02:	e0 91 69 19 	lds	r30, 0x1969	; 0x801969 <pxCurrentTCB>
    2f06:	f0 91 6a 19 	lds	r31, 0x196A	; 0x80196a <pxCurrentTCB+0x1>
    2f0a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2f0c:	82 8d       	ldd	r24, Z+26	; 0x1a
    2f0e:	98 17       	cp	r25, r24
    2f10:	08 f4       	brcc	.+2      	; 0x2f14 <xTaskIncrementTick+0x152>
    2f12:	ac cf       	rjmp	.-168    	; 0x2e6c <xTaskIncrementTick+0xaa>
    2f14:	b9 2c       	mov	r11, r9
    2f16:	aa cf       	rjmp	.-172    	; 0x2e6c <xTaskIncrementTick+0xaa>
    2f18:	e0 91 69 19 	lds	r30, 0x1969	; 0x801969 <pxCurrentTCB>
    2f1c:	f0 91 6a 19 	lds	r31, 0x196A	; 0x80196a <pxCurrentTCB+0x1>
    2f20:	e2 8d       	ldd	r30, Z+26	; 0x1a
    2f22:	8b e0       	ldi	r24, 0x0B	; 11
    2f24:	e8 9f       	mul	r30, r24
    2f26:	f0 01       	movw	r30, r0
    2f28:	11 24       	eor	r1, r1
    2f2a:	e3 5c       	subi	r30, 0xC3	; 195
    2f2c:	f6 4e       	sbci	r31, 0xE6	; 230
    2f2e:	80 81       	ld	r24, Z
    2f30:	82 30       	cpi	r24, 0x02	; 2
    2f32:	48 f0       	brcs	.+18     	; 0x2f46 <xTaskIncrementTick+0x184>
    2f34:	bb 24       	eor	r11, r11
    2f36:	b3 94       	inc	r11
    2f38:	06 c0       	rjmp	.+12     	; 0x2f46 <xTaskIncrementTick+0x184>
    2f3a:	80 91 f9 18 	lds	r24, 0x18F9	; 0x8018f9 <uxPendedTicks>
    2f3e:	8f 5f       	subi	r24, 0xFF	; 255
    2f40:	80 93 f9 18 	sts	0x18F9, r24	; 0x8018f9 <uxPendedTicks>
    2f44:	b1 2c       	mov	r11, r1
    2f46:	80 91 f8 18 	lds	r24, 0x18F8	; 0x8018f8 <xYieldPending>
    2f4a:	88 23       	and	r24, r24
    2f4c:	11 f0       	breq	.+4      	; 0x2f52 <xTaskIncrementTick+0x190>
    2f4e:	bb 24       	eor	r11, r11
    2f50:	b3 94       	inc	r11
    2f52:	8b 2d       	mov	r24, r11
    2f54:	df 91       	pop	r29
    2f56:	cf 91       	pop	r28
    2f58:	1f 91       	pop	r17
    2f5a:	0f 91       	pop	r16
    2f5c:	ff 90       	pop	r15
    2f5e:	ef 90       	pop	r14
    2f60:	df 90       	pop	r13
    2f62:	cf 90       	pop	r12
    2f64:	bf 90       	pop	r11
    2f66:	af 90       	pop	r10
    2f68:	9f 90       	pop	r9
    2f6a:	08 95       	ret

00002f6c <xTaskResumeAll>:
    2f6c:	cf 92       	push	r12
    2f6e:	df 92       	push	r13
    2f70:	ef 92       	push	r14
    2f72:	ff 92       	push	r15
    2f74:	0f 93       	push	r16
    2f76:	1f 93       	push	r17
    2f78:	cf 93       	push	r28
    2f7a:	df 93       	push	r29
    2f7c:	0f b6       	in	r0, 0x3f	; 63
    2f7e:	f8 94       	cli
    2f80:	0f 92       	push	r0
    2f82:	80 91 ef 18 	lds	r24, 0x18EF	; 0x8018ef <uxSchedulerSuspended>
    2f86:	81 50       	subi	r24, 0x01	; 1
    2f88:	80 93 ef 18 	sts	0x18EF, r24	; 0x8018ef <uxSchedulerSuspended>
    2f8c:	80 91 ef 18 	lds	r24, 0x18EF	; 0x8018ef <uxSchedulerSuspended>
    2f90:	81 11       	cpse	r24, r1
    2f92:	5a c0       	rjmp	.+180    	; 0x3048 <xTaskResumeAll+0xdc>
    2f94:	80 91 00 19 	lds	r24, 0x1900	; 0x801900 <uxCurrentNumberOfTasks>
    2f98:	81 11       	cpse	r24, r1
    2f9a:	2c c0       	rjmp	.+88     	; 0x2ff4 <xTaskResumeAll+0x88>
    2f9c:	58 c0       	rjmp	.+176    	; 0x304e <xTaskResumeAll+0xe2>
    2f9e:	d7 01       	movw	r26, r14
    2fa0:	17 96       	adiw	r26, 0x07	; 7
    2fa2:	ed 91       	ld	r30, X+
    2fa4:	fc 91       	ld	r31, X
    2fa6:	18 97       	sbiw	r26, 0x08	; 8
    2fa8:	c0 85       	ldd	r28, Z+8	; 0x08
    2faa:	d1 85       	ldd	r29, Z+9	; 0x09
    2fac:	ce 01       	movw	r24, r28
    2fae:	0e 96       	adiw	r24, 0x0e	; 14
    2fb0:	0e 94 9b 0c 	call	0x1936	; 0x1936 <uxListRemove>
    2fb4:	8e 01       	movw	r16, r28
    2fb6:	0e 5f       	subi	r16, 0xFE	; 254
    2fb8:	1f 4f       	sbci	r17, 0xFF	; 255
    2fba:	c8 01       	movw	r24, r16
    2fbc:	0e 94 9b 0c 	call	0x1936	; 0x1936 <uxListRemove>
    2fc0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2fc2:	90 91 fb 18 	lds	r25, 0x18FB	; 0x8018fb <uxTopReadyPriority>
    2fc6:	98 17       	cp	r25, r24
    2fc8:	10 f4       	brcc	.+4      	; 0x2fce <xTaskResumeAll+0x62>
    2fca:	80 93 fb 18 	sts	0x18FB, r24	; 0x8018fb <uxTopReadyPriority>
    2fce:	d8 9e       	mul	r13, r24
    2fd0:	c0 01       	movw	r24, r0
    2fd2:	11 24       	eor	r1, r1
    2fd4:	b8 01       	movw	r22, r16
    2fd6:	83 5c       	subi	r24, 0xC3	; 195
    2fd8:	96 4e       	sbci	r25, 0xE6	; 230
    2fda:	0e 94 3d 0c 	call	0x187a	; 0x187a <vListInsertEnd>
    2fde:	e0 91 69 19 	lds	r30, 0x1969	; 0x801969 <pxCurrentTCB>
    2fe2:	f0 91 6a 19 	lds	r31, 0x196A	; 0x80196a <pxCurrentTCB+0x1>
    2fe6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2fe8:	82 8d       	ldd	r24, Z+26	; 0x1a
    2fea:	98 17       	cp	r25, r24
    2fec:	88 f0       	brcs	.+34     	; 0x3010 <xTaskResumeAll+0xa4>
    2fee:	c0 92 f8 18 	sts	0x18F8, r12	; 0x8018f8 <xYieldPending>
    2ff2:	0e c0       	rjmp	.+28     	; 0x3010 <xTaskResumeAll+0xa4>
    2ff4:	c0 e0       	ldi	r28, 0x00	; 0
    2ff6:	d0 e0       	ldi	r29, 0x00	; 0
    2ff8:	0f 2e       	mov	r0, r31
    2ffa:	f8 e1       	ldi	r31, 0x18	; 24
    2ffc:	ef 2e       	mov	r14, r31
    2ffe:	f9 e1       	ldi	r31, 0x19	; 25
    3000:	ff 2e       	mov	r15, r31
    3002:	f0 2d       	mov	r31, r0
    3004:	0f 2e       	mov	r0, r31
    3006:	fb e0       	ldi	r31, 0x0B	; 11
    3008:	df 2e       	mov	r13, r31
    300a:	f0 2d       	mov	r31, r0
    300c:	cc 24       	eor	r12, r12
    300e:	c3 94       	inc	r12
    3010:	f7 01       	movw	r30, r14
    3012:	80 81       	ld	r24, Z
    3014:	81 11       	cpse	r24, r1
    3016:	c3 cf       	rjmp	.-122    	; 0x2f9e <xTaskResumeAll+0x32>
    3018:	cd 2b       	or	r28, r29
    301a:	09 f0       	breq	.+2      	; 0x301e <xTaskResumeAll+0xb2>
    301c:	c2 dc       	rcall	.-1660   	; 0x29a2 <prvResetNextTaskUnblockTime>
    301e:	c0 91 f9 18 	lds	r28, 0x18F9	; 0x8018f9 <uxPendedTicks>
    3022:	cc 23       	and	r28, r28
    3024:	49 f0       	breq	.+18     	; 0x3038 <xTaskResumeAll+0xcc>
    3026:	d1 e0       	ldi	r29, 0x01	; 1
    3028:	cc de       	rcall	.-616    	; 0x2dc2 <xTaskIncrementTick>
    302a:	81 11       	cpse	r24, r1
    302c:	d0 93 f8 18 	sts	0x18F8, r29	; 0x8018f8 <xYieldPending>
    3030:	c1 50       	subi	r28, 0x01	; 1
    3032:	d1 f7       	brne	.-12     	; 0x3028 <xTaskResumeAll+0xbc>
    3034:	10 92 f9 18 	sts	0x18F9, r1	; 0x8018f9 <uxPendedTicks>
    3038:	80 91 f8 18 	lds	r24, 0x18F8	; 0x8018f8 <xYieldPending>
    303c:	88 23       	and	r24, r24
    303e:	31 f0       	breq	.+12     	; 0x304c <xTaskResumeAll+0xe0>
    3040:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <vPortYield>
    3044:	81 e0       	ldi	r24, 0x01	; 1
    3046:	03 c0       	rjmp	.+6      	; 0x304e <xTaskResumeAll+0xe2>
    3048:	80 e0       	ldi	r24, 0x00	; 0
    304a:	01 c0       	rjmp	.+2      	; 0x304e <xTaskResumeAll+0xe2>
    304c:	80 e0       	ldi	r24, 0x00	; 0
    304e:	0f 90       	pop	r0
    3050:	0f be       	out	0x3f, r0	; 63
    3052:	df 91       	pop	r29
    3054:	cf 91       	pop	r28
    3056:	1f 91       	pop	r17
    3058:	0f 91       	pop	r16
    305a:	ff 90       	pop	r15
    305c:	ef 90       	pop	r14
    305e:	df 90       	pop	r13
    3060:	cf 90       	pop	r12
    3062:	08 95       	ret

00003064 <vTaskDelay>:
    3064:	cf 92       	push	r12
    3066:	df 92       	push	r13
    3068:	ef 92       	push	r14
    306a:	ff 92       	push	r15
    306c:	6b 01       	movw	r12, r22
    306e:	7c 01       	movw	r14, r24
    3070:	67 2b       	or	r22, r23
    3072:	68 2b       	or	r22, r24
    3074:	69 2b       	or	r22, r25
    3076:	41 f0       	breq	.+16     	; 0x3088 <vTaskDelay+0x24>
    3078:	90 de       	rcall	.-736    	; 0x2d9a <vTaskSuspendAll>
    307a:	40 e0       	ldi	r20, 0x00	; 0
    307c:	c7 01       	movw	r24, r14
    307e:	b6 01       	movw	r22, r12
    3080:	ba dc       	rcall	.-1676   	; 0x29f6 <prvAddCurrentTaskToDelayedList>
    3082:	74 df       	rcall	.-280    	; 0x2f6c <xTaskResumeAll>
    3084:	81 11       	cpse	r24, r1
    3086:	02 c0       	rjmp	.+4      	; 0x308c <vTaskDelay+0x28>
    3088:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <vPortYield>
    308c:	ff 90       	pop	r15
    308e:	ef 90       	pop	r14
    3090:	df 90       	pop	r13
    3092:	cf 90       	pop	r12
    3094:	08 95       	ret

00003096 <vTaskSwitchContext>:
    3096:	80 91 ef 18 	lds	r24, 0x18EF	; 0x8018ef <uxSchedulerSuspended>
    309a:	88 23       	and	r24, r24
    309c:	21 f0       	breq	.+8      	; 0x30a6 <vTaskSwitchContext+0x10>
    309e:	81 e0       	ldi	r24, 0x01	; 1
    30a0:	80 93 f8 18 	sts	0x18F8, r24	; 0x8018f8 <xYieldPending>
    30a4:	08 95       	ret
    30a6:	10 92 f8 18 	sts	0x18F8, r1	; 0x8018f8 <xYieldPending>
    30aa:	e0 91 69 19 	lds	r30, 0x1969	; 0x801969 <pxCurrentTCB>
    30ae:	f0 91 6a 19 	lds	r31, 0x196A	; 0x80196a <pxCurrentTCB+0x1>
    30b2:	81 a5       	ldd	r24, Z+41	; 0x29
    30b4:	0e 94 7f 09 	call	0x12fe	; 0x12fe <task_switch_out>
    30b8:	a0 91 69 19 	lds	r26, 0x1969	; 0x801969 <pxCurrentTCB>
    30bc:	b0 91 6a 19 	lds	r27, 0x196A	; 0x80196a <pxCurrentTCB+0x1>
    30c0:	e0 91 69 19 	lds	r30, 0x1969	; 0x801969 <pxCurrentTCB>
    30c4:	f0 91 6a 19 	lds	r31, 0x196A	; 0x80196a <pxCurrentTCB+0x1>
    30c8:	2d 91       	ld	r18, X+
    30ca:	3c 91       	ld	r19, X
    30cc:	83 8d       	ldd	r24, Z+27	; 0x1b
    30ce:	94 8d       	ldd	r25, Z+28	; 0x1c
    30d0:	82 17       	cp	r24, r18
    30d2:	93 07       	cpc	r25, r19
    30d4:	58 f0       	brcs	.+22     	; 0x30ec <vTaskSwitchContext+0x56>
    30d6:	60 91 69 19 	lds	r22, 0x1969	; 0x801969 <pxCurrentTCB>
    30da:	70 91 6a 19 	lds	r23, 0x196A	; 0x80196a <pxCurrentTCB+0x1>
    30de:	80 91 69 19 	lds	r24, 0x1969	; 0x801969 <pxCurrentTCB>
    30e2:	90 91 6a 19 	lds	r25, 0x196A	; 0x80196a <pxCurrentTCB+0x1>
    30e6:	63 5e       	subi	r22, 0xE3	; 227
    30e8:	7f 4f       	sbci	r23, 0xFF	; 255
    30ea:	20 d6       	rcall	.+3136   	; 0x3d2c <vApplicationStackOverflowHook>
    30ec:	80 91 fb 18 	lds	r24, 0x18FB	; 0x8018fb <uxTopReadyPriority>
    30f0:	28 2f       	mov	r18, r24
    30f2:	30 e0       	ldi	r19, 0x00	; 0
    30f4:	9b e0       	ldi	r25, 0x0B	; 11
    30f6:	89 9f       	mul	r24, r25
    30f8:	f0 01       	movw	r30, r0
    30fa:	11 24       	eor	r1, r1
    30fc:	e3 5c       	subi	r30, 0xC3	; 195
    30fe:	f6 4e       	sbci	r31, 0xE6	; 230
    3100:	90 81       	ld	r25, Z
    3102:	91 11       	cpse	r25, r1
    3104:	0e c0       	rjmp	.+28     	; 0x3122 <vTaskSwitchContext+0x8c>
    3106:	4b e0       	ldi	r20, 0x0B	; 11
    3108:	81 50       	subi	r24, 0x01	; 1
    310a:	28 2f       	mov	r18, r24
    310c:	30 e0       	ldi	r19, 0x00	; 0
    310e:	42 9f       	mul	r20, r18
    3110:	f0 01       	movw	r30, r0
    3112:	43 9f       	mul	r20, r19
    3114:	f0 0d       	add	r31, r0
    3116:	11 24       	eor	r1, r1
    3118:	e3 5c       	subi	r30, 0xC3	; 195
    311a:	f6 4e       	sbci	r31, 0xE6	; 230
    311c:	90 81       	ld	r25, Z
    311e:	99 23       	and	r25, r25
    3120:	99 f3       	breq	.-26     	; 0x3108 <vTaskSwitchContext+0x72>
    3122:	9b e0       	ldi	r25, 0x0B	; 11
    3124:	92 9f       	mul	r25, r18
    3126:	a0 01       	movw	r20, r0
    3128:	93 9f       	mul	r25, r19
    312a:	50 0d       	add	r21, r0
    312c:	11 24       	eor	r1, r1
    312e:	da 01       	movw	r26, r20
    3130:	a3 5c       	subi	r26, 0xC3	; 195
    3132:	b6 4e       	sbci	r27, 0xE6	; 230
    3134:	11 96       	adiw	r26, 0x01	; 1
    3136:	ed 91       	ld	r30, X+
    3138:	fc 91       	ld	r31, X
    313a:	12 97       	sbiw	r26, 0x02	; 2
    313c:	04 80       	ldd	r0, Z+4	; 0x04
    313e:	f5 81       	ldd	r31, Z+5	; 0x05
    3140:	e0 2d       	mov	r30, r0
    3142:	12 96       	adiw	r26, 0x02	; 2
    3144:	fc 93       	st	X, r31
    3146:	ee 93       	st	-X, r30
    3148:	11 97       	sbiw	r26, 0x01	; 1
    314a:	40 5c       	subi	r20, 0xC0	; 192
    314c:	56 4e       	sbci	r21, 0xE6	; 230
    314e:	e4 17       	cp	r30, r20
    3150:	f5 07       	cpc	r31, r21
    3152:	29 f4       	brne	.+10     	; 0x315e <vTaskSwitchContext+0xc8>
    3154:	44 81       	ldd	r20, Z+4	; 0x04
    3156:	55 81       	ldd	r21, Z+5	; 0x05
    3158:	fd 01       	movw	r30, r26
    315a:	52 83       	std	Z+2, r21	; 0x02
    315c:	41 83       	std	Z+1, r20	; 0x01
    315e:	9b e0       	ldi	r25, 0x0B	; 11
    3160:	92 9f       	mul	r25, r18
    3162:	f0 01       	movw	r30, r0
    3164:	93 9f       	mul	r25, r19
    3166:	f0 0d       	add	r31, r0
    3168:	11 24       	eor	r1, r1
    316a:	e3 5c       	subi	r30, 0xC3	; 195
    316c:	f6 4e       	sbci	r31, 0xE6	; 230
    316e:	01 80       	ldd	r0, Z+1	; 0x01
    3170:	f2 81       	ldd	r31, Z+2	; 0x02
    3172:	e0 2d       	mov	r30, r0
    3174:	20 85       	ldd	r18, Z+8	; 0x08
    3176:	31 85       	ldd	r19, Z+9	; 0x09
    3178:	30 93 6a 19 	sts	0x196A, r19	; 0x80196a <pxCurrentTCB+0x1>
    317c:	20 93 69 19 	sts	0x1969, r18	; 0x801969 <pxCurrentTCB>
    3180:	80 93 fb 18 	sts	0x18FB, r24	; 0x8018fb <uxTopReadyPriority>
    3184:	e0 91 69 19 	lds	r30, 0x1969	; 0x801969 <pxCurrentTCB>
    3188:	f0 91 6a 19 	lds	r31, 0x196A	; 0x80196a <pxCurrentTCB+0x1>
    318c:	81 a5       	ldd	r24, Z+41	; 0x29
    318e:	0c 94 75 09 	jmp	0x12ea	; 0x12ea <task_switch_in>
    3192:	08 95       	ret

00003194 <vTaskPlaceOnEventList>:
    3194:	cf 92       	push	r12
    3196:	df 92       	push	r13
    3198:	ef 92       	push	r14
    319a:	ff 92       	push	r15
    319c:	6a 01       	movw	r12, r20
    319e:	7b 01       	movw	r14, r22
    31a0:	60 91 69 19 	lds	r22, 0x1969	; 0x801969 <pxCurrentTCB>
    31a4:	70 91 6a 19 	lds	r23, 0x196A	; 0x80196a <pxCurrentTCB+0x1>
    31a8:	62 5f       	subi	r22, 0xF2	; 242
    31aa:	7f 4f       	sbci	r23, 0xFF	; 255
    31ac:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <vListInsert>
    31b0:	41 e0       	ldi	r20, 0x01	; 1
    31b2:	c7 01       	movw	r24, r14
    31b4:	b6 01       	movw	r22, r12
    31b6:	1f dc       	rcall	.-1986   	; 0x29f6 <prvAddCurrentTaskToDelayedList>
    31b8:	ff 90       	pop	r15
    31ba:	ef 90       	pop	r14
    31bc:	df 90       	pop	r13
    31be:	cf 90       	pop	r12
    31c0:	08 95       	ret

000031c2 <vTaskPlaceOnUnorderedEventList>:
    31c2:	cf 92       	push	r12
    31c4:	df 92       	push	r13
    31c6:	ef 92       	push	r14
    31c8:	ff 92       	push	r15
    31ca:	0f 93       	push	r16
    31cc:	1f 93       	push	r17
    31ce:	68 01       	movw	r12, r16
    31d0:	79 01       	movw	r14, r18
    31d2:	e0 91 69 19 	lds	r30, 0x1969	; 0x801969 <pxCurrentTCB>
    31d6:	f0 91 6a 19 	lds	r31, 0x196A	; 0x80196a <pxCurrentTCB+0x1>
    31da:	70 68       	ori	r23, 0x80	; 128
    31dc:	46 87       	std	Z+14, r20	; 0x0e
    31de:	57 87       	std	Z+15, r21	; 0x0f
    31e0:	60 8b       	std	Z+16, r22	; 0x10
    31e2:	71 8b       	std	Z+17, r23	; 0x11
    31e4:	60 91 69 19 	lds	r22, 0x1969	; 0x801969 <pxCurrentTCB>
    31e8:	70 91 6a 19 	lds	r23, 0x196A	; 0x80196a <pxCurrentTCB+0x1>
    31ec:	62 5f       	subi	r22, 0xF2	; 242
    31ee:	7f 4f       	sbci	r23, 0xFF	; 255
    31f0:	0e 94 3d 0c 	call	0x187a	; 0x187a <vListInsertEnd>
    31f4:	41 e0       	ldi	r20, 0x01	; 1
    31f6:	c7 01       	movw	r24, r14
    31f8:	b6 01       	movw	r22, r12
    31fa:	fd db       	rcall	.-2054   	; 0x29f6 <prvAddCurrentTaskToDelayedList>
    31fc:	1f 91       	pop	r17
    31fe:	0f 91       	pop	r16
    3200:	ff 90       	pop	r15
    3202:	ef 90       	pop	r14
    3204:	df 90       	pop	r13
    3206:	cf 90       	pop	r12
    3208:	08 95       	ret

0000320a <vTaskPlaceOnEventListRestricted>:
    320a:	cf 92       	push	r12
    320c:	df 92       	push	r13
    320e:	ef 92       	push	r14
    3210:	ff 92       	push	r15
    3212:	cf 93       	push	r28
    3214:	6a 01       	movw	r12, r20
    3216:	7b 01       	movw	r14, r22
    3218:	c2 2f       	mov	r28, r18
    321a:	60 91 69 19 	lds	r22, 0x1969	; 0x801969 <pxCurrentTCB>
    321e:	70 91 6a 19 	lds	r23, 0x196A	; 0x80196a <pxCurrentTCB+0x1>
    3222:	62 5f       	subi	r22, 0xF2	; 242
    3224:	7f 4f       	sbci	r23, 0xFF	; 255
    3226:	0e 94 3d 0c 	call	0x187a	; 0x187a <vListInsertEnd>
    322a:	cc 23       	and	r28, r28
    322c:	21 f0       	breq	.+8      	; 0x3236 <vTaskPlaceOnEventListRestricted+0x2c>
    322e:	cc 24       	eor	r12, r12
    3230:	ca 94       	dec	r12
    3232:	dc 2c       	mov	r13, r12
    3234:	76 01       	movw	r14, r12
    3236:	4c 2f       	mov	r20, r28
    3238:	c7 01       	movw	r24, r14
    323a:	b6 01       	movw	r22, r12
    323c:	dc db       	rcall	.-2120   	; 0x29f6 <prvAddCurrentTaskToDelayedList>
    323e:	cf 91       	pop	r28
    3240:	ff 90       	pop	r15
    3242:	ef 90       	pop	r14
    3244:	df 90       	pop	r13
    3246:	cf 90       	pop	r12
    3248:	08 95       	ret

0000324a <xTaskRemoveFromEventList>:
    324a:	0f 93       	push	r16
    324c:	1f 93       	push	r17
    324e:	cf 93       	push	r28
    3250:	df 93       	push	r29
    3252:	dc 01       	movw	r26, r24
    3254:	17 96       	adiw	r26, 0x07	; 7
    3256:	ed 91       	ld	r30, X+
    3258:	fc 91       	ld	r31, X
    325a:	18 97       	sbiw	r26, 0x08	; 8
    325c:	c0 85       	ldd	r28, Z+8	; 0x08
    325e:	d1 85       	ldd	r29, Z+9	; 0x09
    3260:	8e 01       	movw	r16, r28
    3262:	02 5f       	subi	r16, 0xF2	; 242
    3264:	1f 4f       	sbci	r17, 0xFF	; 255
    3266:	c8 01       	movw	r24, r16
    3268:	0e 94 9b 0c 	call	0x1936	; 0x1936 <uxListRemove>
    326c:	80 91 ef 18 	lds	r24, 0x18EF	; 0x8018ef <uxSchedulerSuspended>
    3270:	81 11       	cpse	r24, r1
    3272:	16 c0       	rjmp	.+44     	; 0x32a0 <xTaskRemoveFromEventList+0x56>
    3274:	0c 50       	subi	r16, 0x0C	; 12
    3276:	11 09       	sbc	r17, r1
    3278:	c8 01       	movw	r24, r16
    327a:	0e 94 9b 0c 	call	0x1936	; 0x1936 <uxListRemove>
    327e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3280:	90 91 fb 18 	lds	r25, 0x18FB	; 0x8018fb <uxTopReadyPriority>
    3284:	98 17       	cp	r25, r24
    3286:	10 f4       	brcc	.+4      	; 0x328c <xTaskRemoveFromEventList+0x42>
    3288:	80 93 fb 18 	sts	0x18FB, r24	; 0x8018fb <uxTopReadyPriority>
    328c:	bb e0       	ldi	r27, 0x0B	; 11
    328e:	8b 9f       	mul	r24, r27
    3290:	c0 01       	movw	r24, r0
    3292:	11 24       	eor	r1, r1
    3294:	b8 01       	movw	r22, r16
    3296:	83 5c       	subi	r24, 0xC3	; 195
    3298:	96 4e       	sbci	r25, 0xE6	; 230
    329a:	0e 94 3d 0c 	call	0x187a	; 0x187a <vListInsertEnd>
    329e:	05 c0       	rjmp	.+10     	; 0x32aa <xTaskRemoveFromEventList+0x60>
    32a0:	b8 01       	movw	r22, r16
    32a2:	88 e1       	ldi	r24, 0x18	; 24
    32a4:	99 e1       	ldi	r25, 0x19	; 25
    32a6:	0e 94 3d 0c 	call	0x187a	; 0x187a <vListInsertEnd>
    32aa:	e0 91 69 19 	lds	r30, 0x1969	; 0x801969 <pxCurrentTCB>
    32ae:	f0 91 6a 19 	lds	r31, 0x196A	; 0x80196a <pxCurrentTCB+0x1>
    32b2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    32b4:	82 8d       	ldd	r24, Z+26	; 0x1a
    32b6:	89 17       	cp	r24, r25
    32b8:	20 f4       	brcc	.+8      	; 0x32c2 <xTaskRemoveFromEventList+0x78>
    32ba:	81 e0       	ldi	r24, 0x01	; 1
    32bc:	80 93 f8 18 	sts	0x18F8, r24	; 0x8018f8 <xYieldPending>
    32c0:	01 c0       	rjmp	.+2      	; 0x32c4 <xTaskRemoveFromEventList+0x7a>
    32c2:	80 e0       	ldi	r24, 0x00	; 0
    32c4:	df 91       	pop	r29
    32c6:	cf 91       	pop	r28
    32c8:	1f 91       	pop	r17
    32ca:	0f 91       	pop	r16
    32cc:	08 95       	ret

000032ce <vTaskRemoveFromUnorderedEventList>:
    32ce:	0f 93       	push	r16
    32d0:	1f 93       	push	r17
    32d2:	cf 93       	push	r28
    32d4:	df 93       	push	r29
    32d6:	70 68       	ori	r23, 0x80	; 128
    32d8:	fc 01       	movw	r30, r24
    32da:	40 83       	st	Z, r20
    32dc:	51 83       	std	Z+1, r21	; 0x01
    32de:	62 83       	std	Z+2, r22	; 0x02
    32e0:	73 83       	std	Z+3, r23	; 0x03
    32e2:	c0 85       	ldd	r28, Z+8	; 0x08
    32e4:	d1 85       	ldd	r29, Z+9	; 0x09
    32e6:	0e 94 9b 0c 	call	0x1936	; 0x1936 <uxListRemove>
    32ea:	8e 01       	movw	r16, r28
    32ec:	0e 5f       	subi	r16, 0xFE	; 254
    32ee:	1f 4f       	sbci	r17, 0xFF	; 255
    32f0:	c8 01       	movw	r24, r16
    32f2:	0e 94 9b 0c 	call	0x1936	; 0x1936 <uxListRemove>
    32f6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    32f8:	90 91 fb 18 	lds	r25, 0x18FB	; 0x8018fb <uxTopReadyPriority>
    32fc:	98 17       	cp	r25, r24
    32fe:	10 f4       	brcc	.+4      	; 0x3304 <vTaskRemoveFromUnorderedEventList+0x36>
    3300:	80 93 fb 18 	sts	0x18FB, r24	; 0x8018fb <uxTopReadyPriority>
    3304:	fb e0       	ldi	r31, 0x0B	; 11
    3306:	8f 9f       	mul	r24, r31
    3308:	c0 01       	movw	r24, r0
    330a:	11 24       	eor	r1, r1
    330c:	b8 01       	movw	r22, r16
    330e:	83 5c       	subi	r24, 0xC3	; 195
    3310:	96 4e       	sbci	r25, 0xE6	; 230
    3312:	0e 94 3d 0c 	call	0x187a	; 0x187a <vListInsertEnd>
    3316:	e0 91 69 19 	lds	r30, 0x1969	; 0x801969 <pxCurrentTCB>
    331a:	f0 91 6a 19 	lds	r31, 0x196A	; 0x80196a <pxCurrentTCB+0x1>
    331e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3320:	82 8d       	ldd	r24, Z+26	; 0x1a
    3322:	89 17       	cp	r24, r25
    3324:	18 f4       	brcc	.+6      	; 0x332c <vTaskRemoveFromUnorderedEventList+0x5e>
    3326:	81 e0       	ldi	r24, 0x01	; 1
    3328:	80 93 f8 18 	sts	0x18F8, r24	; 0x8018f8 <xYieldPending>
    332c:	df 91       	pop	r29
    332e:	cf 91       	pop	r28
    3330:	1f 91       	pop	r17
    3332:	0f 91       	pop	r16
    3334:	08 95       	ret

00003336 <vTaskSetTimeOutState>:
    3336:	0f b6       	in	r0, 0x3f	; 63
    3338:	f8 94       	cli
    333a:	0f 92       	push	r0
    333c:	20 91 f7 18 	lds	r18, 0x18F7	; 0x8018f7 <xNumOfOverflows>
    3340:	fc 01       	movw	r30, r24
    3342:	20 83       	st	Z, r18
    3344:	40 91 fc 18 	lds	r20, 0x18FC	; 0x8018fc <xTickCount>
    3348:	50 91 fd 18 	lds	r21, 0x18FD	; 0x8018fd <xTickCount+0x1>
    334c:	60 91 fe 18 	lds	r22, 0x18FE	; 0x8018fe <xTickCount+0x2>
    3350:	70 91 ff 18 	lds	r23, 0x18FF	; 0x8018ff <xTickCount+0x3>
    3354:	41 83       	std	Z+1, r20	; 0x01
    3356:	52 83       	std	Z+2, r21	; 0x02
    3358:	63 83       	std	Z+3, r22	; 0x03
    335a:	74 83       	std	Z+4, r23	; 0x04
    335c:	0f 90       	pop	r0
    335e:	0f be       	out	0x3f, r0	; 63
    3360:	08 95       	ret

00003362 <vTaskInternalSetTimeOutState>:
    3362:	20 91 f7 18 	lds	r18, 0x18F7	; 0x8018f7 <xNumOfOverflows>
    3366:	fc 01       	movw	r30, r24
    3368:	20 83       	st	Z, r18
    336a:	40 91 fc 18 	lds	r20, 0x18FC	; 0x8018fc <xTickCount>
    336e:	50 91 fd 18 	lds	r21, 0x18FD	; 0x8018fd <xTickCount+0x1>
    3372:	60 91 fe 18 	lds	r22, 0x18FE	; 0x8018fe <xTickCount+0x2>
    3376:	70 91 ff 18 	lds	r23, 0x18FF	; 0x8018ff <xTickCount+0x3>
    337a:	41 83       	std	Z+1, r20	; 0x01
    337c:	52 83       	std	Z+2, r21	; 0x02
    337e:	63 83       	std	Z+3, r22	; 0x03
    3380:	74 83       	std	Z+4, r23	; 0x04
    3382:	08 95       	ret

00003384 <xTaskCheckForTimeOut>:
    3384:	cf 92       	push	r12
    3386:	df 92       	push	r13
    3388:	ef 92       	push	r14
    338a:	ff 92       	push	r15
    338c:	0f 93       	push	r16
    338e:	1f 93       	push	r17
    3390:	cf 93       	push	r28
    3392:	df 93       	push	r29
    3394:	fb 01       	movw	r30, r22
    3396:	0f b6       	in	r0, 0x3f	; 63
    3398:	f8 94       	cli
    339a:	0f 92       	push	r0
    339c:	40 91 fc 18 	lds	r20, 0x18FC	; 0x8018fc <xTickCount>
    33a0:	50 91 fd 18 	lds	r21, 0x18FD	; 0x8018fd <xTickCount+0x1>
    33a4:	60 91 fe 18 	lds	r22, 0x18FE	; 0x8018fe <xTickCount+0x2>
    33a8:	70 91 ff 18 	lds	r23, 0x18FF	; 0x8018ff <xTickCount+0x3>
    33ac:	00 81       	ld	r16, Z
    33ae:	11 81       	ldd	r17, Z+1	; 0x01
    33b0:	22 81       	ldd	r18, Z+2	; 0x02
    33b2:	33 81       	ldd	r19, Z+3	; 0x03
    33b4:	0f 3f       	cpi	r16, 0xFF	; 255
    33b6:	af ef       	ldi	r26, 0xFF	; 255
    33b8:	1a 07       	cpc	r17, r26
    33ba:	2a 07       	cpc	r18, r26
    33bc:	3a 07       	cpc	r19, r26
    33be:	49 f1       	breq	.+82     	; 0x3412 <xTaskCheckForTimeOut+0x8e>
    33c0:	ec 01       	movw	r28, r24
    33c2:	c9 80       	ldd	r12, Y+1	; 0x01
    33c4:	da 80       	ldd	r13, Y+2	; 0x02
    33c6:	eb 80       	ldd	r14, Y+3	; 0x03
    33c8:	fc 80       	ldd	r15, Y+4	; 0x04
    33ca:	a0 91 f7 18 	lds	r26, 0x18F7	; 0x8018f7 <xNumOfOverflows>
    33ce:	b8 81       	ld	r27, Y
    33d0:	ba 17       	cp	r27, r26
    33d2:	29 f0       	breq	.+10     	; 0x33de <xTaskCheckForTimeOut+0x5a>
    33d4:	4c 15       	cp	r20, r12
    33d6:	5d 05       	cpc	r21, r13
    33d8:	6e 05       	cpc	r22, r14
    33da:	7f 05       	cpc	r23, r15
    33dc:	e0 f4       	brcc	.+56     	; 0x3416 <xTaskCheckForTimeOut+0x92>
    33de:	4c 19       	sub	r20, r12
    33e0:	5d 09       	sbc	r21, r13
    33e2:	6e 09       	sbc	r22, r14
    33e4:	7f 09       	sbc	r23, r15
    33e6:	40 17       	cp	r20, r16
    33e8:	51 07       	cpc	r21, r17
    33ea:	62 07       	cpc	r22, r18
    33ec:	73 07       	cpc	r23, r19
    33ee:	58 f4       	brcc	.+22     	; 0x3406 <xTaskCheckForTimeOut+0x82>
    33f0:	04 1b       	sub	r16, r20
    33f2:	15 0b       	sbc	r17, r21
    33f4:	26 0b       	sbc	r18, r22
    33f6:	37 0b       	sbc	r19, r23
    33f8:	00 83       	st	Z, r16
    33fa:	11 83       	std	Z+1, r17	; 0x01
    33fc:	22 83       	std	Z+2, r18	; 0x02
    33fe:	33 83       	std	Z+3, r19	; 0x03
    3400:	b0 df       	rcall	.-160    	; 0x3362 <vTaskInternalSetTimeOutState>
    3402:	80 e0       	ldi	r24, 0x00	; 0
    3404:	09 c0       	rjmp	.+18     	; 0x3418 <xTaskCheckForTimeOut+0x94>
    3406:	10 82       	st	Z, r1
    3408:	11 82       	std	Z+1, r1	; 0x01
    340a:	12 82       	std	Z+2, r1	; 0x02
    340c:	13 82       	std	Z+3, r1	; 0x03
    340e:	81 e0       	ldi	r24, 0x01	; 1
    3410:	03 c0       	rjmp	.+6      	; 0x3418 <xTaskCheckForTimeOut+0x94>
    3412:	80 e0       	ldi	r24, 0x00	; 0
    3414:	01 c0       	rjmp	.+2      	; 0x3418 <xTaskCheckForTimeOut+0x94>
    3416:	81 e0       	ldi	r24, 0x01	; 1
    3418:	0f 90       	pop	r0
    341a:	0f be       	out	0x3f, r0	; 63
    341c:	df 91       	pop	r29
    341e:	cf 91       	pop	r28
    3420:	1f 91       	pop	r17
    3422:	0f 91       	pop	r16
    3424:	ff 90       	pop	r15
    3426:	ef 90       	pop	r14
    3428:	df 90       	pop	r13
    342a:	cf 90       	pop	r12
    342c:	08 95       	ret

0000342e <vTaskMissedYield>:
    342e:	81 e0       	ldi	r24, 0x01	; 1
    3430:	80 93 f8 18 	sts	0x18F8, r24	; 0x8018f8 <xYieldPending>
    3434:	08 95       	ret

00003436 <xTaskGetCurrentTaskHandle>:
    3436:	80 91 69 19 	lds	r24, 0x1969	; 0x801969 <pxCurrentTCB>
    343a:	90 91 6a 19 	lds	r25, 0x196A	; 0x80196a <pxCurrentTCB+0x1>
    343e:	08 95       	ret

00003440 <xTaskGetSchedulerState>:
    3440:	80 91 fa 18 	lds	r24, 0x18FA	; 0x8018fa <xSchedulerRunning>
    3444:	88 23       	and	r24, r24
    3446:	31 f0       	breq	.+12     	; 0x3454 <xTaskGetSchedulerState+0x14>
    3448:	80 91 ef 18 	lds	r24, 0x18EF	; 0x8018ef <uxSchedulerSuspended>
    344c:	88 23       	and	r24, r24
    344e:	21 f0       	breq	.+8      	; 0x3458 <xTaskGetSchedulerState+0x18>
    3450:	80 e0       	ldi	r24, 0x00	; 0
    3452:	08 95       	ret
    3454:	81 e0       	ldi	r24, 0x01	; 1
    3456:	08 95       	ret
    3458:	82 e0       	ldi	r24, 0x02	; 2
    345a:	08 95       	ret

0000345c <xTaskPriorityInherit>:
    345c:	0f 93       	push	r16
    345e:	1f 93       	push	r17
    3460:	cf 93       	push	r28
    3462:	df 93       	push	r29
    3464:	fc 01       	movw	r30, r24
    3466:	89 2b       	or	r24, r25
    3468:	09 f4       	brne	.+2      	; 0x346c <xTaskPriorityInherit+0x10>
    346a:	60 c0       	rjmp	.+192    	; 0x352c <xTaskPriorityInherit+0xd0>
    346c:	82 8d       	ldd	r24, Z+26	; 0x1a
    346e:	a0 91 69 19 	lds	r26, 0x1969	; 0x801969 <pxCurrentTCB>
    3472:	b0 91 6a 19 	lds	r27, 0x196A	; 0x80196a <pxCurrentTCB+0x1>
    3476:	5a 96       	adiw	r26, 0x1a	; 26
    3478:	9c 91       	ld	r25, X
    347a:	89 17       	cp	r24, r25
    347c:	08 f0       	brcs	.+2      	; 0x3480 <xTaskPriorityInherit+0x24>
    347e:	4a c0       	rjmp	.+148    	; 0x3514 <xTaskPriorityInherit+0xb8>
    3480:	46 85       	ldd	r20, Z+14	; 0x0e
    3482:	57 85       	ldd	r21, Z+15	; 0x0f
    3484:	60 89       	ldd	r22, Z+16	; 0x10
    3486:	71 89       	ldd	r23, Z+17	; 0x11
    3488:	77 23       	and	r23, r23
    348a:	94 f0       	brlt	.+36     	; 0x34b0 <xTaskPriorityInherit+0x54>
    348c:	a0 91 69 19 	lds	r26, 0x1969	; 0x801969 <pxCurrentTCB>
    3490:	b0 91 6a 19 	lds	r27, 0x196A	; 0x80196a <pxCurrentTCB+0x1>
    3494:	5a 96       	adiw	r26, 0x1a	; 26
    3496:	9c 91       	ld	r25, X
    3498:	44 e0       	ldi	r20, 0x04	; 4
    349a:	50 e0       	ldi	r21, 0x00	; 0
    349c:	60 e0       	ldi	r22, 0x00	; 0
    349e:	70 e0       	ldi	r23, 0x00	; 0
    34a0:	49 1b       	sub	r20, r25
    34a2:	51 09       	sbc	r21, r1
    34a4:	61 09       	sbc	r22, r1
    34a6:	71 09       	sbc	r23, r1
    34a8:	46 87       	std	Z+14, r20	; 0x0e
    34aa:	57 87       	std	Z+15, r21	; 0x0f
    34ac:	60 8b       	std	Z+16, r22	; 0x10
    34ae:	71 8b       	std	Z+17, r23	; 0x11
    34b0:	2b e0       	ldi	r18, 0x0B	; 11
    34b2:	82 9f       	mul	r24, r18
    34b4:	c0 01       	movw	r24, r0
    34b6:	11 24       	eor	r1, r1
    34b8:	83 5c       	subi	r24, 0xC3	; 195
    34ba:	96 4e       	sbci	r25, 0xE6	; 230
    34bc:	24 85       	ldd	r18, Z+12	; 0x0c
    34be:	35 85       	ldd	r19, Z+13	; 0x0d
    34c0:	28 17       	cp	r18, r24
    34c2:	39 07       	cpc	r19, r25
    34c4:	f1 f4       	brne	.+60     	; 0x3502 <xTaskPriorityInherit+0xa6>
    34c6:	8f 01       	movw	r16, r30
    34c8:	ef 01       	movw	r28, r30
    34ca:	22 96       	adiw	r28, 0x02	; 2
    34cc:	ce 01       	movw	r24, r28
    34ce:	0e 94 9b 0c 	call	0x1936	; 0x1936 <uxListRemove>
    34d2:	e0 91 69 19 	lds	r30, 0x1969	; 0x801969 <pxCurrentTCB>
    34d6:	f0 91 6a 19 	lds	r31, 0x196A	; 0x80196a <pxCurrentTCB+0x1>
    34da:	82 8d       	ldd	r24, Z+26	; 0x1a
    34dc:	f8 01       	movw	r30, r16
    34de:	82 8f       	std	Z+26, r24	; 0x1a
    34e0:	90 91 fb 18 	lds	r25, 0x18FB	; 0x8018fb <uxTopReadyPriority>
    34e4:	98 17       	cp	r25, r24
    34e6:	10 f4       	brcc	.+4      	; 0x34ec <xTaskPriorityInherit+0x90>
    34e8:	80 93 fb 18 	sts	0x18FB, r24	; 0x8018fb <uxTopReadyPriority>
    34ec:	fb e0       	ldi	r31, 0x0B	; 11
    34ee:	8f 9f       	mul	r24, r31
    34f0:	c0 01       	movw	r24, r0
    34f2:	11 24       	eor	r1, r1
    34f4:	be 01       	movw	r22, r28
    34f6:	83 5c       	subi	r24, 0xC3	; 195
    34f8:	96 4e       	sbci	r25, 0xE6	; 230
    34fa:	0e 94 3d 0c 	call	0x187a	; 0x187a <vListInsertEnd>
    34fe:	81 e0       	ldi	r24, 0x01	; 1
    3500:	16 c0       	rjmp	.+44     	; 0x352e <xTaskPriorityInherit+0xd2>
    3502:	a0 91 69 19 	lds	r26, 0x1969	; 0x801969 <pxCurrentTCB>
    3506:	b0 91 6a 19 	lds	r27, 0x196A	; 0x80196a <pxCurrentTCB+0x1>
    350a:	5a 96       	adiw	r26, 0x1a	; 26
    350c:	8c 91       	ld	r24, X
    350e:	82 8f       	std	Z+26, r24	; 0x1a
    3510:	81 e0       	ldi	r24, 0x01	; 1
    3512:	0d c0       	rjmp	.+26     	; 0x352e <xTaskPriorityInherit+0xd2>
    3514:	a0 91 69 19 	lds	r26, 0x1969	; 0x801969 <pxCurrentTCB>
    3518:	b0 91 6a 19 	lds	r27, 0x196A	; 0x80196a <pxCurrentTCB+0x1>
    351c:	81 e0       	ldi	r24, 0x01	; 1
    351e:	27 a1       	ldd	r18, Z+39	; 0x27
    3520:	5a 96       	adiw	r26, 0x1a	; 26
    3522:	9c 91       	ld	r25, X
    3524:	29 17       	cp	r18, r25
    3526:	18 f0       	brcs	.+6      	; 0x352e <xTaskPriorityInherit+0xd2>
    3528:	80 e0       	ldi	r24, 0x00	; 0
    352a:	01 c0       	rjmp	.+2      	; 0x352e <xTaskPriorityInherit+0xd2>
    352c:	80 e0       	ldi	r24, 0x00	; 0
    352e:	df 91       	pop	r29
    3530:	cf 91       	pop	r28
    3532:	1f 91       	pop	r17
    3534:	0f 91       	pop	r16
    3536:	08 95       	ret

00003538 <xTaskPriorityDisinherit>:
    3538:	0f 93       	push	r16
    353a:	1f 93       	push	r17
    353c:	cf 93       	push	r28
    353e:	df 93       	push	r29
    3540:	fc 01       	movw	r30, r24
    3542:	89 2b       	or	r24, r25
    3544:	79 f1       	breq	.+94     	; 0x35a4 <xTaskPriorityDisinherit+0x6c>
    3546:	80 a5       	ldd	r24, Z+40	; 0x28
    3548:	81 50       	subi	r24, 0x01	; 1
    354a:	80 a7       	std	Z+40, r24	; 0x28
    354c:	22 8d       	ldd	r18, Z+26	; 0x1a
    354e:	97 a1       	ldd	r25, Z+39	; 0x27
    3550:	29 17       	cp	r18, r25
    3552:	51 f1       	breq	.+84     	; 0x35a8 <xTaskPriorityDisinherit+0x70>
    3554:	81 11       	cpse	r24, r1
    3556:	2a c0       	rjmp	.+84     	; 0x35ac <xTaskPriorityDisinherit+0x74>
    3558:	ef 01       	movw	r28, r30
    355a:	8f 01       	movw	r16, r30
    355c:	0e 5f       	subi	r16, 0xFE	; 254
    355e:	1f 4f       	sbci	r17, 0xFF	; 255
    3560:	c8 01       	movw	r24, r16
    3562:	0e 94 9b 0c 	call	0x1936	; 0x1936 <uxListRemove>
    3566:	8f a1       	ldd	r24, Y+39	; 0x27
    3568:	8a 8f       	std	Y+26, r24	; 0x1a
    356a:	44 e0       	ldi	r20, 0x04	; 4
    356c:	50 e0       	ldi	r21, 0x00	; 0
    356e:	60 e0       	ldi	r22, 0x00	; 0
    3570:	70 e0       	ldi	r23, 0x00	; 0
    3572:	48 1b       	sub	r20, r24
    3574:	51 09       	sbc	r21, r1
    3576:	61 09       	sbc	r22, r1
    3578:	71 09       	sbc	r23, r1
    357a:	4e 87       	std	Y+14, r20	; 0x0e
    357c:	5f 87       	std	Y+15, r21	; 0x0f
    357e:	68 8b       	std	Y+16, r22	; 0x10
    3580:	79 8b       	std	Y+17, r23	; 0x11
    3582:	90 91 fb 18 	lds	r25, 0x18FB	; 0x8018fb <uxTopReadyPriority>
    3586:	98 17       	cp	r25, r24
    3588:	10 f4       	brcc	.+4      	; 0x358e <xTaskPriorityDisinherit+0x56>
    358a:	80 93 fb 18 	sts	0x18FB, r24	; 0x8018fb <uxTopReadyPriority>
    358e:	2b e0       	ldi	r18, 0x0B	; 11
    3590:	82 9f       	mul	r24, r18
    3592:	c0 01       	movw	r24, r0
    3594:	11 24       	eor	r1, r1
    3596:	b8 01       	movw	r22, r16
    3598:	83 5c       	subi	r24, 0xC3	; 195
    359a:	96 4e       	sbci	r25, 0xE6	; 230
    359c:	0e 94 3d 0c 	call	0x187a	; 0x187a <vListInsertEnd>
    35a0:	81 e0       	ldi	r24, 0x01	; 1
    35a2:	05 c0       	rjmp	.+10     	; 0x35ae <xTaskPriorityDisinherit+0x76>
    35a4:	80 e0       	ldi	r24, 0x00	; 0
    35a6:	03 c0       	rjmp	.+6      	; 0x35ae <xTaskPriorityDisinherit+0x76>
    35a8:	80 e0       	ldi	r24, 0x00	; 0
    35aa:	01 c0       	rjmp	.+2      	; 0x35ae <xTaskPriorityDisinherit+0x76>
    35ac:	80 e0       	ldi	r24, 0x00	; 0
    35ae:	df 91       	pop	r29
    35b0:	cf 91       	pop	r28
    35b2:	1f 91       	pop	r17
    35b4:	0f 91       	pop	r16
    35b6:	08 95       	ret

000035b8 <vTaskPriorityDisinheritAfterTimeout>:
    35b8:	0f 93       	push	r16
    35ba:	1f 93       	push	r17
    35bc:	cf 93       	push	r28
    35be:	df 93       	push	r29
    35c0:	fc 01       	movw	r30, r24
    35c2:	89 2b       	or	r24, r25
    35c4:	09 f4       	brne	.+2      	; 0x35c8 <vTaskPriorityDisinheritAfterTimeout+0x10>
    35c6:	3f c0       	rjmp	.+126    	; 0x3646 <vTaskPriorityDisinheritAfterTimeout+0x8e>
    35c8:	87 a1       	ldd	r24, Z+39	; 0x27
    35ca:	86 17       	cp	r24, r22
    35cc:	08 f4       	brcc	.+2      	; 0x35d0 <vTaskPriorityDisinheritAfterTimeout+0x18>
    35ce:	86 2f       	mov	r24, r22
    35d0:	92 8d       	ldd	r25, Z+26	; 0x1a
    35d2:	98 17       	cp	r25, r24
    35d4:	c1 f1       	breq	.+112    	; 0x3646 <vTaskPriorityDisinheritAfterTimeout+0x8e>
    35d6:	20 a5       	ldd	r18, Z+40	; 0x28
    35d8:	21 30       	cpi	r18, 0x01	; 1
    35da:	a9 f5       	brne	.+106    	; 0x3646 <vTaskPriorityDisinheritAfterTimeout+0x8e>
    35dc:	82 8f       	std	Z+26, r24	; 0x1a
    35de:	46 85       	ldd	r20, Z+14	; 0x0e
    35e0:	57 85       	ldd	r21, Z+15	; 0x0f
    35e2:	60 89       	ldd	r22, Z+16	; 0x10
    35e4:	71 89       	ldd	r23, Z+17	; 0x11
    35e6:	77 23       	and	r23, r23
    35e8:	64 f0       	brlt	.+24     	; 0x3602 <vTaskPriorityDisinheritAfterTimeout+0x4a>
    35ea:	44 e0       	ldi	r20, 0x04	; 4
    35ec:	50 e0       	ldi	r21, 0x00	; 0
    35ee:	60 e0       	ldi	r22, 0x00	; 0
    35f0:	70 e0       	ldi	r23, 0x00	; 0
    35f2:	48 1b       	sub	r20, r24
    35f4:	51 09       	sbc	r21, r1
    35f6:	61 09       	sbc	r22, r1
    35f8:	71 09       	sbc	r23, r1
    35fa:	46 87       	std	Z+14, r20	; 0x0e
    35fc:	57 87       	std	Z+15, r21	; 0x0f
    35fe:	60 8b       	std	Z+16, r22	; 0x10
    3600:	71 8b       	std	Z+17, r23	; 0x11
    3602:	2b e0       	ldi	r18, 0x0B	; 11
    3604:	92 9f       	mul	r25, r18
    3606:	c0 01       	movw	r24, r0
    3608:	11 24       	eor	r1, r1
    360a:	83 5c       	subi	r24, 0xC3	; 195
    360c:	96 4e       	sbci	r25, 0xE6	; 230
    360e:	24 85       	ldd	r18, Z+12	; 0x0c
    3610:	35 85       	ldd	r19, Z+13	; 0x0d
    3612:	28 17       	cp	r18, r24
    3614:	39 07       	cpc	r19, r25
    3616:	b9 f4       	brne	.+46     	; 0x3646 <vTaskPriorityDisinheritAfterTimeout+0x8e>
    3618:	ef 01       	movw	r28, r30
    361a:	8f 01       	movw	r16, r30
    361c:	0e 5f       	subi	r16, 0xFE	; 254
    361e:	1f 4f       	sbci	r17, 0xFF	; 255
    3620:	c8 01       	movw	r24, r16
    3622:	0e 94 9b 0c 	call	0x1936	; 0x1936 <uxListRemove>
    3626:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3628:	90 91 fb 18 	lds	r25, 0x18FB	; 0x8018fb <uxTopReadyPriority>
    362c:	98 17       	cp	r25, r24
    362e:	10 f4       	brcc	.+4      	; 0x3634 <vTaskPriorityDisinheritAfterTimeout+0x7c>
    3630:	80 93 fb 18 	sts	0x18FB, r24	; 0x8018fb <uxTopReadyPriority>
    3634:	2b e0       	ldi	r18, 0x0B	; 11
    3636:	82 9f       	mul	r24, r18
    3638:	c0 01       	movw	r24, r0
    363a:	11 24       	eor	r1, r1
    363c:	b8 01       	movw	r22, r16
    363e:	83 5c       	subi	r24, 0xC3	; 195
    3640:	96 4e       	sbci	r25, 0xE6	; 230
    3642:	0e 94 3d 0c 	call	0x187a	; 0x187a <vListInsertEnd>
    3646:	df 91       	pop	r29
    3648:	cf 91       	pop	r28
    364a:	1f 91       	pop	r17
    364c:	0f 91       	pop	r16
    364e:	08 95       	ret

00003650 <uxTaskResetEventItemValue>:
    3650:	cf 92       	push	r12
    3652:	df 92       	push	r13
    3654:	ef 92       	push	r14
    3656:	ff 92       	push	r15
    3658:	e0 91 69 19 	lds	r30, 0x1969	; 0x801969 <pxCurrentTCB>
    365c:	f0 91 6a 19 	lds	r31, 0x196A	; 0x80196a <pxCurrentTCB+0x1>
    3660:	66 85       	ldd	r22, Z+14	; 0x0e
    3662:	77 85       	ldd	r23, Z+15	; 0x0f
    3664:	80 89       	ldd	r24, Z+16	; 0x10
    3666:	91 89       	ldd	r25, Z+17	; 0x11
    3668:	e0 91 69 19 	lds	r30, 0x1969	; 0x801969 <pxCurrentTCB>
    366c:	f0 91 6a 19 	lds	r31, 0x196A	; 0x80196a <pxCurrentTCB+0x1>
    3670:	a0 91 69 19 	lds	r26, 0x1969	; 0x801969 <pxCurrentTCB>
    3674:	b0 91 6a 19 	lds	r27, 0x196A	; 0x80196a <pxCurrentTCB+0x1>
    3678:	5a 96       	adiw	r26, 0x1a	; 26
    367a:	2c 91       	ld	r18, X
    367c:	c1 2c       	mov	r12, r1
    367e:	d1 2c       	mov	r13, r1
    3680:	76 01       	movw	r14, r12
    3682:	68 94       	set
    3684:	c2 f8       	bld	r12, 2
    3686:	c2 1a       	sub	r12, r18
    3688:	d1 08       	sbc	r13, r1
    368a:	e1 08       	sbc	r14, r1
    368c:	f1 08       	sbc	r15, r1
    368e:	c6 86       	std	Z+14, r12	; 0x0e
    3690:	d7 86       	std	Z+15, r13	; 0x0f
    3692:	e0 8a       	std	Z+16, r14	; 0x10
    3694:	f1 8a       	std	Z+17, r15	; 0x11
    3696:	ff 90       	pop	r15
    3698:	ef 90       	pop	r14
    369a:	df 90       	pop	r13
    369c:	cf 90       	pop	r12
    369e:	08 95       	ret

000036a0 <pvTaskIncrementMutexHeldCount>:
    36a0:	80 91 69 19 	lds	r24, 0x1969	; 0x801969 <pxCurrentTCB>
    36a4:	90 91 6a 19 	lds	r25, 0x196A	; 0x80196a <pxCurrentTCB+0x1>
    36a8:	89 2b       	or	r24, r25
    36aa:	39 f0       	breq	.+14     	; 0x36ba <pvTaskIncrementMutexHeldCount+0x1a>
    36ac:	e0 91 69 19 	lds	r30, 0x1969	; 0x801969 <pxCurrentTCB>
    36b0:	f0 91 6a 19 	lds	r31, 0x196A	; 0x80196a <pxCurrentTCB+0x1>
    36b4:	80 a5       	ldd	r24, Z+40	; 0x28
    36b6:	8f 5f       	subi	r24, 0xFF	; 255
    36b8:	80 a7       	std	Z+40, r24	; 0x28
    36ba:	80 91 69 19 	lds	r24, 0x1969	; 0x801969 <pxCurrentTCB>
    36be:	90 91 6a 19 	lds	r25, 0x196A	; 0x80196a <pxCurrentTCB+0x1>
    36c2:	08 95       	ret

000036c4 <xTaskNotifyWait>:
    36c4:	4f 92       	push	r4
    36c6:	5f 92       	push	r5
    36c8:	6f 92       	push	r6
    36ca:	7f 92       	push	r7
    36cc:	8f 92       	push	r8
    36ce:	9f 92       	push	r9
    36d0:	af 92       	push	r10
    36d2:	bf 92       	push	r11
    36d4:	cf 92       	push	r12
    36d6:	df 92       	push	r13
    36d8:	ef 92       	push	r14
    36da:	ff 92       	push	r15
    36dc:	0f 93       	push	r16
    36de:	1f 93       	push	r17
    36e0:	49 01       	movw	r8, r18
    36e2:	5a 01       	movw	r10, r20
    36e4:	0f b6       	in	r0, 0x3f	; 63
    36e6:	f8 94       	cli
    36e8:	0f 92       	push	r0
    36ea:	e0 91 69 19 	lds	r30, 0x1969	; 0x801969 <pxCurrentTCB>
    36ee:	f0 91 6a 19 	lds	r31, 0x196A	; 0x80196a <pxCurrentTCB+0x1>
    36f2:	27 a5       	ldd	r18, Z+47	; 0x2f
    36f4:	22 30       	cpi	r18, 0x02	; 2
    36f6:	39 f1       	breq	.+78     	; 0x3746 <xTaskNotifyWait+0x82>
    36f8:	e0 91 69 19 	lds	r30, 0x1969	; 0x801969 <pxCurrentTCB>
    36fc:	f0 91 6a 19 	lds	r31, 0x196A	; 0x80196a <pxCurrentTCB+0x1>
    3700:	43 a4       	ldd	r4, Z+43	; 0x2b
    3702:	54 a4       	ldd	r5, Z+44	; 0x2c
    3704:	65 a4       	ldd	r6, Z+45	; 0x2d
    3706:	76 a4       	ldd	r7, Z+46	; 0x2e
    3708:	dc 01       	movw	r26, r24
    370a:	cb 01       	movw	r24, r22
    370c:	80 95       	com	r24
    370e:	90 95       	com	r25
    3710:	a0 95       	com	r26
    3712:	b0 95       	com	r27
    3714:	84 21       	and	r24, r4
    3716:	95 21       	and	r25, r5
    3718:	a6 21       	and	r26, r6
    371a:	b7 21       	and	r27, r7
    371c:	83 a7       	std	Z+43, r24	; 0x2b
    371e:	94 a7       	std	Z+44, r25	; 0x2c
    3720:	a5 a7       	std	Z+45, r26	; 0x2d
    3722:	b6 a7       	std	Z+46, r27	; 0x2e
    3724:	e0 91 69 19 	lds	r30, 0x1969	; 0x801969 <pxCurrentTCB>
    3728:	f0 91 6a 19 	lds	r31, 0x196A	; 0x80196a <pxCurrentTCB+0x1>
    372c:	81 e0       	ldi	r24, 0x01	; 1
    372e:	87 a7       	std	Z+47, r24	; 0x2f
    3730:	c1 14       	cp	r12, r1
    3732:	d1 04       	cpc	r13, r1
    3734:	e1 04       	cpc	r14, r1
    3736:	f1 04       	cpc	r15, r1
    3738:	31 f0       	breq	.+12     	; 0x3746 <xTaskNotifyWait+0x82>
    373a:	41 e0       	ldi	r20, 0x01	; 1
    373c:	c7 01       	movw	r24, r14
    373e:	b6 01       	movw	r22, r12
    3740:	5a d9       	rcall	.-3404   	; 0x29f6 <prvAddCurrentTaskToDelayedList>
    3742:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <vPortYield>
    3746:	0f 90       	pop	r0
    3748:	0f be       	out	0x3f, r0	; 63
    374a:	0f b6       	in	r0, 0x3f	; 63
    374c:	f8 94       	cli
    374e:	0f 92       	push	r0
    3750:	01 15       	cp	r16, r1
    3752:	11 05       	cpc	r17, r1
    3754:	69 f0       	breq	.+26     	; 0x3770 <xTaskNotifyWait+0xac>
    3756:	e0 91 69 19 	lds	r30, 0x1969	; 0x801969 <pxCurrentTCB>
    375a:	f0 91 6a 19 	lds	r31, 0x196A	; 0x80196a <pxCurrentTCB+0x1>
    375e:	83 a5       	ldd	r24, Z+43	; 0x2b
    3760:	94 a5       	ldd	r25, Z+44	; 0x2c
    3762:	a5 a5       	ldd	r26, Z+45	; 0x2d
    3764:	b6 a5       	ldd	r27, Z+46	; 0x2e
    3766:	f8 01       	movw	r30, r16
    3768:	80 83       	st	Z, r24
    376a:	91 83       	std	Z+1, r25	; 0x01
    376c:	a2 83       	std	Z+2, r26	; 0x02
    376e:	b3 83       	std	Z+3, r27	; 0x03
    3770:	e0 91 69 19 	lds	r30, 0x1969	; 0x801969 <pxCurrentTCB>
    3774:	f0 91 6a 19 	lds	r31, 0x196A	; 0x80196a <pxCurrentTCB+0x1>
    3778:	87 a5       	ldd	r24, Z+47	; 0x2f
    377a:	82 30       	cpi	r24, 0x02	; 2
    377c:	b1 f4       	brne	.+44     	; 0x37aa <xTaskNotifyWait+0xe6>
    377e:	e0 91 69 19 	lds	r30, 0x1969	; 0x801969 <pxCurrentTCB>
    3782:	f0 91 6a 19 	lds	r31, 0x196A	; 0x80196a <pxCurrentTCB+0x1>
    3786:	83 a5       	ldd	r24, Z+43	; 0x2b
    3788:	94 a5       	ldd	r25, Z+44	; 0x2c
    378a:	a5 a5       	ldd	r26, Z+45	; 0x2d
    378c:	b6 a5       	ldd	r27, Z+46	; 0x2e
    378e:	80 94       	com	r8
    3790:	90 94       	com	r9
    3792:	a0 94       	com	r10
    3794:	b0 94       	com	r11
    3796:	88 22       	and	r8, r24
    3798:	99 22       	and	r9, r25
    379a:	aa 22       	and	r10, r26
    379c:	bb 22       	and	r11, r27
    379e:	83 a6       	std	Z+43, r8	; 0x2b
    37a0:	94 a6       	std	Z+44, r9	; 0x2c
    37a2:	a5 a6       	std	Z+45, r10	; 0x2d
    37a4:	b6 a6       	std	Z+46, r11	; 0x2e
    37a6:	81 e0       	ldi	r24, 0x01	; 1
    37a8:	01 c0       	rjmp	.+2      	; 0x37ac <xTaskNotifyWait+0xe8>
    37aa:	80 e0       	ldi	r24, 0x00	; 0
    37ac:	e0 91 69 19 	lds	r30, 0x1969	; 0x801969 <pxCurrentTCB>
    37b0:	f0 91 6a 19 	lds	r31, 0x196A	; 0x80196a <pxCurrentTCB+0x1>
    37b4:	17 a6       	std	Z+47, r1	; 0x2f
    37b6:	0f 90       	pop	r0
    37b8:	0f be       	out	0x3f, r0	; 63
    37ba:	1f 91       	pop	r17
    37bc:	0f 91       	pop	r16
    37be:	ff 90       	pop	r15
    37c0:	ef 90       	pop	r14
    37c2:	df 90       	pop	r13
    37c4:	cf 90       	pop	r12
    37c6:	bf 90       	pop	r11
    37c8:	af 90       	pop	r10
    37ca:	9f 90       	pop	r9
    37cc:	8f 90       	pop	r8
    37ce:	7f 90       	pop	r7
    37d0:	6f 90       	pop	r6
    37d2:	5f 90       	pop	r5
    37d4:	4f 90       	pop	r4
    37d6:	08 95       	ret

000037d8 <xTaskGenericNotify>:
    37d8:	0f 93       	push	r16
    37da:	1f 93       	push	r17
    37dc:	cf 93       	push	r28
    37de:	df 93       	push	r29
    37e0:	fc 01       	movw	r30, r24
    37e2:	0f b6       	in	r0, 0x3f	; 63
    37e4:	f8 94       	cli
    37e6:	0f 92       	push	r0
    37e8:	01 15       	cp	r16, r1
    37ea:	11 05       	cpc	r17, r1
    37ec:	49 f0       	breq	.+18     	; 0x3800 <xTaskGenericNotify+0x28>
    37ee:	83 a5       	ldd	r24, Z+43	; 0x2b
    37f0:	94 a5       	ldd	r25, Z+44	; 0x2c
    37f2:	a5 a5       	ldd	r26, Z+45	; 0x2d
    37f4:	b6 a5       	ldd	r27, Z+46	; 0x2e
    37f6:	e8 01       	movw	r28, r16
    37f8:	88 83       	st	Y, r24
    37fa:	99 83       	std	Y+1, r25	; 0x01
    37fc:	aa 83       	std	Y+2, r26	; 0x02
    37fe:	bb 83       	std	Y+3, r27	; 0x03
    3800:	87 a5       	ldd	r24, Z+47	; 0x2f
    3802:	92 e0       	ldi	r25, 0x02	; 2
    3804:	97 a7       	std	Z+47, r25	; 0x2f
    3806:	22 30       	cpi	r18, 0x02	; 2
    3808:	b1 f0       	breq	.+44     	; 0x3836 <xTaskGenericNotify+0x5e>
    380a:	18 f4       	brcc	.+6      	; 0x3812 <xTaskGenericNotify+0x3a>
    380c:	21 30       	cpi	r18, 0x01	; 1
    380e:	31 f0       	breq	.+12     	; 0x381c <xTaskGenericNotify+0x44>
    3810:	2a c0       	rjmp	.+84     	; 0x3866 <xTaskGenericNotify+0x8e>
    3812:	23 30       	cpi	r18, 0x03	; 3
    3814:	e9 f0       	breq	.+58     	; 0x3850 <xTaskGenericNotify+0x78>
    3816:	24 30       	cpi	r18, 0x04	; 4
    3818:	01 f1       	breq	.+64     	; 0x385a <xTaskGenericNotify+0x82>
    381a:	25 c0       	rjmp	.+74     	; 0x3866 <xTaskGenericNotify+0x8e>
    381c:	03 a5       	ldd	r16, Z+43	; 0x2b
    381e:	14 a5       	ldd	r17, Z+44	; 0x2c
    3820:	25 a5       	ldd	r18, Z+45	; 0x2d
    3822:	36 a5       	ldd	r19, Z+46	; 0x2e
    3824:	40 2b       	or	r20, r16
    3826:	51 2b       	or	r21, r17
    3828:	62 2b       	or	r22, r18
    382a:	73 2b       	or	r23, r19
    382c:	43 a7       	std	Z+43, r20	; 0x2b
    382e:	54 a7       	std	Z+44, r21	; 0x2c
    3830:	65 a7       	std	Z+45, r22	; 0x2d
    3832:	76 a7       	std	Z+46, r23	; 0x2e
    3834:	18 c0       	rjmp	.+48     	; 0x3866 <xTaskGenericNotify+0x8e>
    3836:	43 a5       	ldd	r20, Z+43	; 0x2b
    3838:	54 a5       	ldd	r21, Z+44	; 0x2c
    383a:	65 a5       	ldd	r22, Z+45	; 0x2d
    383c:	76 a5       	ldd	r23, Z+46	; 0x2e
    383e:	4f 5f       	subi	r20, 0xFF	; 255
    3840:	5f 4f       	sbci	r21, 0xFF	; 255
    3842:	6f 4f       	sbci	r22, 0xFF	; 255
    3844:	7f 4f       	sbci	r23, 0xFF	; 255
    3846:	43 a7       	std	Z+43, r20	; 0x2b
    3848:	54 a7       	std	Z+44, r21	; 0x2c
    384a:	65 a7       	std	Z+45, r22	; 0x2d
    384c:	76 a7       	std	Z+46, r23	; 0x2e
    384e:	0b c0       	rjmp	.+22     	; 0x3866 <xTaskGenericNotify+0x8e>
    3850:	43 a7       	std	Z+43, r20	; 0x2b
    3852:	54 a7       	std	Z+44, r21	; 0x2c
    3854:	65 a7       	std	Z+45, r22	; 0x2d
    3856:	76 a7       	std	Z+46, r23	; 0x2e
    3858:	06 c0       	rjmp	.+12     	; 0x3866 <xTaskGenericNotify+0x8e>
    385a:	82 30       	cpi	r24, 0x02	; 2
    385c:	49 f1       	breq	.+82     	; 0x38b0 <xTaskGenericNotify+0xd8>
    385e:	43 a7       	std	Z+43, r20	; 0x2b
    3860:	54 a7       	std	Z+44, r21	; 0x2c
    3862:	65 a7       	std	Z+45, r22	; 0x2d
    3864:	76 a7       	std	Z+46, r23	; 0x2e
    3866:	81 30       	cpi	r24, 0x01	; 1
    3868:	29 f5       	brne	.+74     	; 0x38b4 <xTaskGenericNotify+0xdc>
    386a:	ef 01       	movw	r28, r30
    386c:	8f 01       	movw	r16, r30
    386e:	0e 5f       	subi	r16, 0xFE	; 254
    3870:	1f 4f       	sbci	r17, 0xFF	; 255
    3872:	c8 01       	movw	r24, r16
    3874:	0e 94 9b 0c 	call	0x1936	; 0x1936 <uxListRemove>
    3878:	8a 8d       	ldd	r24, Y+26	; 0x1a
    387a:	90 91 fb 18 	lds	r25, 0x18FB	; 0x8018fb <uxTopReadyPriority>
    387e:	98 17       	cp	r25, r24
    3880:	10 f4       	brcc	.+4      	; 0x3886 <xTaskGenericNotify+0xae>
    3882:	80 93 fb 18 	sts	0x18FB, r24	; 0x8018fb <uxTopReadyPriority>
    3886:	2b e0       	ldi	r18, 0x0B	; 11
    3888:	82 9f       	mul	r24, r18
    388a:	c0 01       	movw	r24, r0
    388c:	11 24       	eor	r1, r1
    388e:	b8 01       	movw	r22, r16
    3890:	83 5c       	subi	r24, 0xC3	; 195
    3892:	96 4e       	sbci	r25, 0xE6	; 230
    3894:	0e 94 3d 0c 	call	0x187a	; 0x187a <vListInsertEnd>
    3898:	e0 91 69 19 	lds	r30, 0x1969	; 0x801969 <pxCurrentTCB>
    389c:	f0 91 6a 19 	lds	r31, 0x196A	; 0x80196a <pxCurrentTCB+0x1>
    38a0:	9a 8d       	ldd	r25, Y+26	; 0x1a
    38a2:	82 8d       	ldd	r24, Z+26	; 0x1a
    38a4:	89 17       	cp	r24, r25
    38a6:	40 f4       	brcc	.+16     	; 0x38b8 <xTaskGenericNotify+0xe0>
    38a8:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <vPortYield>
    38ac:	81 e0       	ldi	r24, 0x01	; 1
    38ae:	05 c0       	rjmp	.+10     	; 0x38ba <xTaskGenericNotify+0xe2>
    38b0:	80 e0       	ldi	r24, 0x00	; 0
    38b2:	03 c0       	rjmp	.+6      	; 0x38ba <xTaskGenericNotify+0xe2>
    38b4:	81 e0       	ldi	r24, 0x01	; 1
    38b6:	01 c0       	rjmp	.+2      	; 0x38ba <xTaskGenericNotify+0xe2>
    38b8:	81 e0       	ldi	r24, 0x01	; 1
    38ba:	0f 90       	pop	r0
    38bc:	0f be       	out	0x3f, r0	; 63
    38be:	df 91       	pop	r29
    38c0:	cf 91       	pop	r28
    38c2:	1f 91       	pop	r17
    38c4:	0f 91       	pop	r16
    38c6:	08 95       	ret

000038c8 <xTaskGenericNotifyFromISR>:
    38c8:	ef 92       	push	r14
    38ca:	ff 92       	push	r15
    38cc:	0f 93       	push	r16
    38ce:	1f 93       	push	r17
    38d0:	cf 93       	push	r28
    38d2:	df 93       	push	r29
    38d4:	fc 01       	movw	r30, r24
    38d6:	01 15       	cp	r16, r1
    38d8:	11 05       	cpc	r17, r1
    38da:	49 f0       	breq	.+18     	; 0x38ee <xTaskGenericNotifyFromISR+0x26>
    38dc:	83 a5       	ldd	r24, Z+43	; 0x2b
    38de:	94 a5       	ldd	r25, Z+44	; 0x2c
    38e0:	a5 a5       	ldd	r26, Z+45	; 0x2d
    38e2:	b6 a5       	ldd	r27, Z+46	; 0x2e
    38e4:	e8 01       	movw	r28, r16
    38e6:	88 83       	st	Y, r24
    38e8:	99 83       	std	Y+1, r25	; 0x01
    38ea:	aa 83       	std	Y+2, r26	; 0x02
    38ec:	bb 83       	std	Y+3, r27	; 0x03
    38ee:	87 a5       	ldd	r24, Z+47	; 0x2f
    38f0:	92 e0       	ldi	r25, 0x02	; 2
    38f2:	97 a7       	std	Z+47, r25	; 0x2f
    38f4:	22 30       	cpi	r18, 0x02	; 2
    38f6:	b1 f0       	breq	.+44     	; 0x3924 <xTaskGenericNotifyFromISR+0x5c>
    38f8:	18 f4       	brcc	.+6      	; 0x3900 <xTaskGenericNotifyFromISR+0x38>
    38fa:	21 30       	cpi	r18, 0x01	; 1
    38fc:	31 f0       	breq	.+12     	; 0x390a <xTaskGenericNotifyFromISR+0x42>
    38fe:	2a c0       	rjmp	.+84     	; 0x3954 <xTaskGenericNotifyFromISR+0x8c>
    3900:	23 30       	cpi	r18, 0x03	; 3
    3902:	e9 f0       	breq	.+58     	; 0x393e <xTaskGenericNotifyFromISR+0x76>
    3904:	24 30       	cpi	r18, 0x04	; 4
    3906:	01 f1       	breq	.+64     	; 0x3948 <xTaskGenericNotifyFromISR+0x80>
    3908:	25 c0       	rjmp	.+74     	; 0x3954 <xTaskGenericNotifyFromISR+0x8c>
    390a:	03 a5       	ldd	r16, Z+43	; 0x2b
    390c:	14 a5       	ldd	r17, Z+44	; 0x2c
    390e:	25 a5       	ldd	r18, Z+45	; 0x2d
    3910:	36 a5       	ldd	r19, Z+46	; 0x2e
    3912:	40 2b       	or	r20, r16
    3914:	51 2b       	or	r21, r17
    3916:	62 2b       	or	r22, r18
    3918:	73 2b       	or	r23, r19
    391a:	43 a7       	std	Z+43, r20	; 0x2b
    391c:	54 a7       	std	Z+44, r21	; 0x2c
    391e:	65 a7       	std	Z+45, r22	; 0x2d
    3920:	76 a7       	std	Z+46, r23	; 0x2e
    3922:	18 c0       	rjmp	.+48     	; 0x3954 <xTaskGenericNotifyFromISR+0x8c>
    3924:	43 a5       	ldd	r20, Z+43	; 0x2b
    3926:	54 a5       	ldd	r21, Z+44	; 0x2c
    3928:	65 a5       	ldd	r22, Z+45	; 0x2d
    392a:	76 a5       	ldd	r23, Z+46	; 0x2e
    392c:	4f 5f       	subi	r20, 0xFF	; 255
    392e:	5f 4f       	sbci	r21, 0xFF	; 255
    3930:	6f 4f       	sbci	r22, 0xFF	; 255
    3932:	7f 4f       	sbci	r23, 0xFF	; 255
    3934:	43 a7       	std	Z+43, r20	; 0x2b
    3936:	54 a7       	std	Z+44, r21	; 0x2c
    3938:	65 a7       	std	Z+45, r22	; 0x2d
    393a:	76 a7       	std	Z+46, r23	; 0x2e
    393c:	0b c0       	rjmp	.+22     	; 0x3954 <xTaskGenericNotifyFromISR+0x8c>
    393e:	43 a7       	std	Z+43, r20	; 0x2b
    3940:	54 a7       	std	Z+44, r21	; 0x2c
    3942:	65 a7       	std	Z+45, r22	; 0x2d
    3944:	76 a7       	std	Z+46, r23	; 0x2e
    3946:	06 c0       	rjmp	.+12     	; 0x3954 <xTaskGenericNotifyFromISR+0x8c>
    3948:	82 30       	cpi	r24, 0x02	; 2
    394a:	d9 f1       	breq	.+118    	; 0x39c2 <xTaskGenericNotifyFromISR+0xfa>
    394c:	43 a7       	std	Z+43, r20	; 0x2b
    394e:	54 a7       	std	Z+44, r21	; 0x2c
    3950:	65 a7       	std	Z+45, r22	; 0x2d
    3952:	76 a7       	std	Z+46, r23	; 0x2e
    3954:	81 30       	cpi	r24, 0x01	; 1
    3956:	b9 f5       	brne	.+110    	; 0x39c6 <xTaskGenericNotifyFromISR+0xfe>
    3958:	ef 01       	movw	r28, r30
    395a:	80 91 ef 18 	lds	r24, 0x18EF	; 0x8018ef <uxSchedulerSuspended>
    395e:	81 11       	cpse	r24, r1
    3960:	17 c0       	rjmp	.+46     	; 0x3990 <xTaskGenericNotifyFromISR+0xc8>
    3962:	8f 01       	movw	r16, r30
    3964:	0e 5f       	subi	r16, 0xFE	; 254
    3966:	1f 4f       	sbci	r17, 0xFF	; 255
    3968:	c8 01       	movw	r24, r16
    396a:	0e 94 9b 0c 	call	0x1936	; 0x1936 <uxListRemove>
    396e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3970:	90 91 fb 18 	lds	r25, 0x18FB	; 0x8018fb <uxTopReadyPriority>
    3974:	98 17       	cp	r25, r24
    3976:	10 f4       	brcc	.+4      	; 0x397c <xTaskGenericNotifyFromISR+0xb4>
    3978:	80 93 fb 18 	sts	0x18FB, r24	; 0x8018fb <uxTopReadyPriority>
    397c:	eb e0       	ldi	r30, 0x0B	; 11
    397e:	8e 9f       	mul	r24, r30
    3980:	c0 01       	movw	r24, r0
    3982:	11 24       	eor	r1, r1
    3984:	b8 01       	movw	r22, r16
    3986:	83 5c       	subi	r24, 0xC3	; 195
    3988:	96 4e       	sbci	r25, 0xE6	; 230
    398a:	0e 94 3d 0c 	call	0x187a	; 0x187a <vListInsertEnd>
    398e:	07 c0       	rjmp	.+14     	; 0x399e <xTaskGenericNotifyFromISR+0xd6>
    3990:	bf 01       	movw	r22, r30
    3992:	62 5f       	subi	r22, 0xF2	; 242
    3994:	7f 4f       	sbci	r23, 0xFF	; 255
    3996:	88 e1       	ldi	r24, 0x18	; 24
    3998:	99 e1       	ldi	r25, 0x19	; 25
    399a:	0e 94 3d 0c 	call	0x187a	; 0x187a <vListInsertEnd>
    399e:	e0 91 69 19 	lds	r30, 0x1969	; 0x801969 <pxCurrentTCB>
    39a2:	f0 91 6a 19 	lds	r31, 0x196A	; 0x80196a <pxCurrentTCB+0x1>
    39a6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    39a8:	82 8d       	ldd	r24, Z+26	; 0x1a
    39aa:	89 17       	cp	r24, r25
    39ac:	70 f4       	brcc	.+28     	; 0x39ca <xTaskGenericNotifyFromISR+0x102>
    39ae:	e1 14       	cp	r14, r1
    39b0:	f1 04       	cpc	r15, r1
    39b2:	19 f0       	breq	.+6      	; 0x39ba <xTaskGenericNotifyFromISR+0xf2>
    39b4:	81 e0       	ldi	r24, 0x01	; 1
    39b6:	e7 01       	movw	r28, r14
    39b8:	88 83       	st	Y, r24
    39ba:	81 e0       	ldi	r24, 0x01	; 1
    39bc:	80 93 f8 18 	sts	0x18F8, r24	; 0x8018f8 <xYieldPending>
    39c0:	05 c0       	rjmp	.+10     	; 0x39cc <xTaskGenericNotifyFromISR+0x104>
    39c2:	80 e0       	ldi	r24, 0x00	; 0
    39c4:	03 c0       	rjmp	.+6      	; 0x39cc <xTaskGenericNotifyFromISR+0x104>
    39c6:	81 e0       	ldi	r24, 0x01	; 1
    39c8:	01 c0       	rjmp	.+2      	; 0x39cc <xTaskGenericNotifyFromISR+0x104>
    39ca:	81 e0       	ldi	r24, 0x01	; 1
    39cc:	df 91       	pop	r29
    39ce:	cf 91       	pop	r28
    39d0:	1f 91       	pop	r17
    39d2:	0f 91       	pop	r16
    39d4:	ff 90       	pop	r15
    39d6:	ef 90       	pop	r14
    39d8:	08 95       	ret

000039da <xTaskNotifyStateClear>:
    TCB_t *pxTCB;
    BaseType_t xReturn;

        /* If null is passed in here then it is the calling task that is having
        its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    39da:	00 97       	sbiw	r24, 0x00	; 0
    39dc:	21 f4       	brne	.+8      	; 0x39e6 <xTaskNotifyStateClear+0xc>
    39de:	80 91 69 19 	lds	r24, 0x1969	; 0x801969 <pxCurrentTCB>
    39e2:	90 91 6a 19 	lds	r25, 0x196A	; 0x80196a <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    39e6:	0f b6       	in	r0, 0x3f	; 63
    39e8:	f8 94       	cli
    39ea:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
    39ec:	fc 01       	movw	r30, r24
    39ee:	27 a5       	ldd	r18, Z+47	; 0x2f
    39f0:	22 30       	cpi	r18, 0x02	; 2
    39f2:	19 f4       	brne	.+6      	; 0x39fa <xTaskNotifyStateClear+0x20>
            {
                pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    39f4:	17 a6       	std	Z+47, r1	; 0x2f
                xReturn = pdPASS;
    39f6:	81 e0       	ldi	r24, 0x01	; 1
    39f8:	01 c0       	rjmp	.+2      	; 0x39fc <xTaskNotifyStateClear+0x22>
            }
            else
            {
                xReturn = pdFAIL;
    39fa:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    39fc:	0f 90       	pop	r0
    39fe:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    3a00:	08 95       	ret

00003a02 <prvInsertTimerInActiveList>:
    3a02:	cf 92       	push	r12
    3a04:	df 92       	push	r13
    3a06:	ef 92       	push	r14
    3a08:	ff 92       	push	r15
    3a0a:	0f 93       	push	r16
    3a0c:	1f 93       	push	r17
    3a0e:	fc 01       	movw	r30, r24
    3a10:	42 83       	std	Z+2, r20	; 0x02
    3a12:	53 83       	std	Z+3, r21	; 0x03
    3a14:	64 83       	std	Z+4, r22	; 0x04
    3a16:	75 83       	std	Z+5, r23	; 0x05
    3a18:	93 87       	std	Z+11, r25	; 0x0b
    3a1a:	82 87       	std	Z+10, r24	; 0x0a
    3a1c:	04 17       	cp	r16, r20
    3a1e:	15 07       	cpc	r17, r21
    3a20:	26 07       	cpc	r18, r22
    3a22:	37 07       	cpc	r19, r23
    3a24:	c0 f0       	brcs	.+48     	; 0x3a56 <prvInsertTimerInActiveList+0x54>
    3a26:	0c 19       	sub	r16, r12
    3a28:	1d 09       	sbc	r17, r13
    3a2a:	2e 09       	sbc	r18, r14
    3a2c:	3f 09       	sbc	r19, r15
    3a2e:	86 85       	ldd	r24, Z+14	; 0x0e
    3a30:	97 85       	ldd	r25, Z+15	; 0x0f
    3a32:	a0 89       	ldd	r26, Z+16	; 0x10
    3a34:	b1 89       	ldd	r27, Z+17	; 0x11
    3a36:	08 17       	cp	r16, r24
    3a38:	19 07       	cpc	r17, r25
    3a3a:	2a 07       	cpc	r18, r26
    3a3c:	3b 07       	cpc	r19, r27
    3a3e:	00 f5       	brcc	.+64     	; 0x3a80 <prvInsertTimerInActiveList+0x7e>
    3a40:	bf 01       	movw	r22, r30
    3a42:	6e 5f       	subi	r22, 0xFE	; 254
    3a44:	7f 4f       	sbci	r23, 0xFF	; 255
    3a46:	80 91 73 19 	lds	r24, 0x1973	; 0x801973 <pxOverflowTimerList>
    3a4a:	90 91 74 19 	lds	r25, 0x1974	; 0x801974 <pxOverflowTimerList+0x1>
    3a4e:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <vListInsert>
    3a52:	80 e0       	ldi	r24, 0x00	; 0
    3a54:	18 c0       	rjmp	.+48     	; 0x3a86 <prvInsertTimerInActiveList+0x84>
    3a56:	0c 15       	cp	r16, r12
    3a58:	1d 05       	cpc	r17, r13
    3a5a:	2e 05       	cpc	r18, r14
    3a5c:	3f 05       	cpc	r19, r15
    3a5e:	28 f4       	brcc	.+10     	; 0x3a6a <prvInsertTimerInActiveList+0x68>
    3a60:	4c 15       	cp	r20, r12
    3a62:	5d 05       	cpc	r21, r13
    3a64:	6e 05       	cpc	r22, r14
    3a66:	7f 05       	cpc	r23, r15
    3a68:	68 f4       	brcc	.+26     	; 0x3a84 <prvInsertTimerInActiveList+0x82>
    3a6a:	bf 01       	movw	r22, r30
    3a6c:	6e 5f       	subi	r22, 0xFE	; 254
    3a6e:	7f 4f       	sbci	r23, 0xFF	; 255
    3a70:	80 91 75 19 	lds	r24, 0x1975	; 0x801975 <pxCurrentTimerList>
    3a74:	90 91 76 19 	lds	r25, 0x1976	; 0x801976 <pxCurrentTimerList+0x1>
    3a78:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <vListInsert>
    3a7c:	80 e0       	ldi	r24, 0x00	; 0
    3a7e:	03 c0       	rjmp	.+6      	; 0x3a86 <prvInsertTimerInActiveList+0x84>
    3a80:	81 e0       	ldi	r24, 0x01	; 1
    3a82:	01 c0       	rjmp	.+2      	; 0x3a86 <prvInsertTimerInActiveList+0x84>
    3a84:	81 e0       	ldi	r24, 0x01	; 1
    3a86:	1f 91       	pop	r17
    3a88:	0f 91       	pop	r16
    3a8a:	ff 90       	pop	r15
    3a8c:	ef 90       	pop	r14
    3a8e:	df 90       	pop	r13
    3a90:	cf 90       	pop	r12
    3a92:	08 95       	ret

00003a94 <prvCheckForValidListAndQueue>:
    3a94:	0f b6       	in	r0, 0x3f	; 63
    3a96:	f8 94       	cli
    3a98:	0f 92       	push	r0
    3a9a:	80 91 71 19 	lds	r24, 0x1971	; 0x801971 <xTimerQueue>
    3a9e:	90 91 72 19 	lds	r25, 0x1972	; 0x801972 <xTimerQueue+0x1>
    3aa2:	89 2b       	or	r24, r25
    3aa4:	e9 f4       	brne	.+58     	; 0x3ae0 <prvCheckForValidListAndQueue+0x4c>
    3aa6:	82 e8       	ldi	r24, 0x82	; 130
    3aa8:	99 e1       	ldi	r25, 0x19	; 25
    3aaa:	0e 94 28 0c 	call	0x1850	; 0x1850 <vListInitialise>
    3aae:	87 e7       	ldi	r24, 0x77	; 119
    3ab0:	99 e1       	ldi	r25, 0x19	; 25
    3ab2:	0e 94 28 0c 	call	0x1850	; 0x1850 <vListInitialise>
    3ab6:	82 e8       	ldi	r24, 0x82	; 130
    3ab8:	99 e1       	ldi	r25, 0x19	; 25
    3aba:	90 93 76 19 	sts	0x1976, r25	; 0x801976 <pxCurrentTimerList+0x1>
    3abe:	80 93 75 19 	sts	0x1975, r24	; 0x801975 <pxCurrentTimerList>
    3ac2:	87 e7       	ldi	r24, 0x77	; 119
    3ac4:	99 e1       	ldi	r25, 0x19	; 25
    3ac6:	90 93 74 19 	sts	0x1974, r25	; 0x801974 <pxOverflowTimerList+0x1>
    3aca:	80 93 73 19 	sts	0x1973, r24	; 0x801973 <pxOverflowTimerList>
    3ace:	40 e0       	ldi	r20, 0x00	; 0
    3ad0:	67 e0       	ldi	r22, 0x07	; 7
    3ad2:	8a e0       	ldi	r24, 0x0A	; 10
    3ad4:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <xQueueGenericCreate>
    3ad8:	90 93 72 19 	sts	0x1972, r25	; 0x801972 <xTimerQueue+0x1>
    3adc:	80 93 71 19 	sts	0x1971, r24	; 0x801971 <xTimerQueue>
    3ae0:	0f 90       	pop	r0
    3ae2:	0f be       	out	0x3f, r0	; 63
    3ae4:	08 95       	ret

00003ae6 <xTimerCreateTimerTask>:
    3ae6:	ef 92       	push	r14
    3ae8:	ff 92       	push	r15
    3aea:	0f 93       	push	r16
    3aec:	d3 df       	rcall	.-90     	; 0x3a94 <prvCheckForValidListAndQueue>
    3aee:	80 91 71 19 	lds	r24, 0x1971	; 0x801971 <xTimerQueue>
    3af2:	90 91 72 19 	lds	r25, 0x1972	; 0x801972 <xTimerQueue+0x1>
    3af6:	89 2b       	or	r24, r25
    3af8:	91 f0       	breq	.+36     	; 0x3b1e <xTimerCreateTimerTask+0x38>
    3afa:	0f 2e       	mov	r0, r31
    3afc:	ff e6       	ldi	r31, 0x6F	; 111
    3afe:	ef 2e       	mov	r14, r31
    3b00:	f9 e1       	ldi	r31, 0x19	; 25
    3b02:	ff 2e       	mov	r15, r31
    3b04:	f0 2d       	mov	r31, r0
    3b06:	03 e0       	ldi	r16, 0x03	; 3
    3b08:	20 e0       	ldi	r18, 0x00	; 0
    3b0a:	30 e0       	ldi	r19, 0x00	; 0
    3b0c:	45 e5       	ldi	r20, 0x55	; 85
    3b0e:	50 e0       	ldi	r21, 0x00	; 0
    3b10:	67 e7       	ldi	r22, 0x77	; 119
    3b12:	75 e0       	ldi	r23, 0x05	; 5
    3b14:	87 e0       	ldi	r24, 0x07	; 7
    3b16:	91 e0       	ldi	r25, 0x01	; 1
    3b18:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <xTaskCreate>
    3b1c:	01 c0       	rjmp	.+2      	; 0x3b20 <xTimerCreateTimerTask+0x3a>
    3b1e:	80 e0       	ldi	r24, 0x00	; 0
    3b20:	0f 91       	pop	r16
    3b22:	ff 90       	pop	r15
    3b24:	ef 90       	pop	r14
    3b26:	08 95       	ret

00003b28 <xTimerGenericCommand>:
    }
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    3b28:	8f 92       	push	r8
    3b2a:	9f 92       	push	r9
    3b2c:	af 92       	push	r10
    3b2e:	bf 92       	push	r11
    3b30:	cf 92       	push	r12
    3b32:	df 92       	push	r13
    3b34:	ef 92       	push	r14
    3b36:	ff 92       	push	r15
    3b38:	0f 93       	push	r16
    3b3a:	1f 93       	push	r17
    3b3c:	cf 93       	push	r28
    3b3e:	df 93       	push	r29
    3b40:	cd b7       	in	r28, 0x3d	; 61
    3b42:	de b7       	in	r29, 0x3e	; 62
    3b44:	27 97       	sbiw	r28, 0x07	; 7
    3b46:	0f b6       	in	r0, 0x3f	; 63
    3b48:	f8 94       	cli
    3b4a:	de bf       	out	0x3e, r29	; 62
    3b4c:	0f be       	out	0x3f, r0	; 63
    3b4e:	cd bf       	out	0x3d, r28	; 61

    configASSERT( xTimer );

    /* Send a message to the timer service task to perform a particular action
    on a particular timer definition. */
    if( xTimerQueue != NULL )
    3b50:	e0 91 71 19 	lds	r30, 0x1971	; 0x801971 <xTimerQueue>
    3b54:	f0 91 72 19 	lds	r31, 0x1972	; 0x801972 <xTimerQueue+0x1>
    3b58:	30 97       	sbiw	r30, 0x00	; 0
    3b5a:	81 f1       	breq	.+96     	; 0x3bbc <xTimerGenericCommand+0x94>
    {
        /* Send a command to the timer service task to start the xTimer timer. */
        xMessage.xMessageID = xCommandID;
    3b5c:	69 83       	std	Y+1, r22	; 0x01
        xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    3b5e:	2a 83       	std	Y+2, r18	; 0x02
    3b60:	3b 83       	std	Y+3, r19	; 0x03
    3b62:	4c 83       	std	Y+4, r20	; 0x04
    3b64:	5d 83       	std	Y+5, r21	; 0x05
        xMessage.u.xTimerParameters.pxTimer = xTimer;
    3b66:	9f 83       	std	Y+7, r25	; 0x07
    3b68:	8e 83       	std	Y+6, r24	; 0x06

        if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    3b6a:	66 30       	cpi	r22, 0x06	; 6
    3b6c:	f4 f4       	brge	.+60     	; 0x3baa <xTimerGenericCommand+0x82>
        {
            if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    3b6e:	68 dc       	rcall	.-1840   	; 0x3440 <xTaskGetSchedulerState>
    3b70:	82 30       	cpi	r24, 0x02	; 2
    3b72:	69 f4       	brne	.+26     	; 0x3b8e <xTimerGenericCommand+0x66>
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    3b74:	00 e0       	ldi	r16, 0x00	; 0
    3b76:	a7 01       	movw	r20, r14
    3b78:	96 01       	movw	r18, r12
    3b7a:	be 01       	movw	r22, r28
    3b7c:	6f 5f       	subi	r22, 0xFF	; 255
    3b7e:	7f 4f       	sbci	r23, 0xFF	; 255
    3b80:	80 91 71 19 	lds	r24, 0x1971	; 0x801971 <xTimerQueue>
    3b84:	90 91 72 19 	lds	r25, 0x1972	; 0x801972 <xTimerQueue+0x1>
    3b88:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <xQueueGenericSend>
    3b8c:	18 c0       	rjmp	.+48     	; 0x3bbe <xTimerGenericCommand+0x96>
            }
            else
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    3b8e:	00 e0       	ldi	r16, 0x00	; 0
    3b90:	20 e0       	ldi	r18, 0x00	; 0
    3b92:	30 e0       	ldi	r19, 0x00	; 0
    3b94:	a9 01       	movw	r20, r18
    3b96:	be 01       	movw	r22, r28
    3b98:	6f 5f       	subi	r22, 0xFF	; 255
    3b9a:	7f 4f       	sbci	r23, 0xFF	; 255
    3b9c:	80 91 71 19 	lds	r24, 0x1971	; 0x801971 <xTimerQueue>
    3ba0:	90 91 72 19 	lds	r25, 0x1972	; 0x801972 <xTimerQueue+0x1>
    3ba4:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <xQueueGenericSend>
    3ba8:	0a c0       	rjmp	.+20     	; 0x3bbe <xTimerGenericCommand+0x96>
            }
        }
        else
        {
            xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    3baa:	20 e0       	ldi	r18, 0x00	; 0
    3bac:	a8 01       	movw	r20, r16
    3bae:	be 01       	movw	r22, r28
    3bb0:	6f 5f       	subi	r22, 0xFF	; 255
    3bb2:	7f 4f       	sbci	r23, 0xFF	; 255
    3bb4:	cf 01       	movw	r24, r30
    3bb6:	0e 94 35 10 	call	0x206a	; 0x206a <xQueueGenericSendFromISR>
    3bba:	01 c0       	rjmp	.+2      	; 0x3bbe <xTimerGenericCommand+0x96>
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
    3bbc:	80 e0       	ldi	r24, 0x00	; 0
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xReturn;
}
    3bbe:	27 96       	adiw	r28, 0x07	; 7
    3bc0:	0f b6       	in	r0, 0x3f	; 63
    3bc2:	f8 94       	cli
    3bc4:	de bf       	out	0x3e, r29	; 62
    3bc6:	0f be       	out	0x3f, r0	; 63
    3bc8:	cd bf       	out	0x3d, r28	; 61
    3bca:	df 91       	pop	r29
    3bcc:	cf 91       	pop	r28
    3bce:	1f 91       	pop	r17
    3bd0:	0f 91       	pop	r16
    3bd2:	ff 90       	pop	r15
    3bd4:	ef 90       	pop	r14
    3bd6:	df 90       	pop	r13
    3bd8:	cf 90       	pop	r12
    3bda:	bf 90       	pop	r11
    3bdc:	af 90       	pop	r10
    3bde:	9f 90       	pop	r9
    3be0:	8f 90       	pop	r8
    3be2:	08 95       	ret

00003be4 <prvSampleTimeNow>:
    return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    3be4:	2f 92       	push	r2
    3be6:	3f 92       	push	r3
    3be8:	4f 92       	push	r4
    3bea:	5f 92       	push	r5
    3bec:	6f 92       	push	r6
    3bee:	7f 92       	push	r7
    3bf0:	8f 92       	push	r8
    3bf2:	9f 92       	push	r9
    3bf4:	af 92       	push	r10
    3bf6:	bf 92       	push	r11
    3bf8:	cf 92       	push	r12
    3bfa:	df 92       	push	r13
    3bfc:	ef 92       	push	r14
    3bfe:	ff 92       	push	r15
    3c00:	0f 93       	push	r16
    3c02:	1f 93       	push	r17
    3c04:	cf 93       	push	r28
    3c06:	df 93       	push	r29
    3c08:	1c 01       	movw	r2, r24
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

    xTimeNow = xTaskGetTickCount();
    3c0a:	cd d8       	rcall	.-3686   	; 0x2da6 <xTaskGetTickCount>
    3c0c:	2b 01       	movw	r4, r22
    3c0e:	3c 01       	movw	r6, r24

    if( xTimeNow < xLastTime )
    3c10:	80 91 6b 19 	lds	r24, 0x196B	; 0x80196b <xLastTime.2432>
    3c14:	90 91 6c 19 	lds	r25, 0x196C	; 0x80196c <xLastTime.2432+0x1>
    3c18:	a0 91 6d 19 	lds	r26, 0x196D	; 0x80196d <xLastTime.2432+0x2>
    3c1c:	b0 91 6e 19 	lds	r27, 0x196E	; 0x80196e <xLastTime.2432+0x3>
    3c20:	48 16       	cp	r4, r24
    3c22:	59 06       	cpc	r5, r25
    3c24:	6a 06       	cpc	r6, r26
    3c26:	7b 06       	cpc	r7, r27
    3c28:	08 f0       	brcs	.+2      	; 0x3c2c <prvSampleTimeNow+0x48>
    3c2a:	53 c0       	rjmp	.+166    	; 0x3cd2 <prvSampleTimeNow+0xee>
    3c2c:	3b c0       	rjmp	.+118    	; 0x3ca4 <prvSampleTimeNow+0xc0>
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    {
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    3c2e:	07 80       	ldd	r0, Z+7	; 0x07
    3c30:	f0 85       	ldd	r31, Z+8	; 0x08
    3c32:	e0 2d       	mov	r30, r0
    3c34:	80 80       	ld	r8, Z
    3c36:	91 80       	ldd	r9, Z+1	; 0x01
    3c38:	a2 80       	ldd	r10, Z+2	; 0x02
    3c3a:	b3 80       	ldd	r11, Z+3	; 0x03

        /* Remove the timer from the list. */
        pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    3c3c:	c0 85       	ldd	r28, Z+8	; 0x08
    3c3e:	d1 85       	ldd	r29, Z+9	; 0x09
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3c40:	8e 01       	movw	r16, r28
    3c42:	0e 5f       	subi	r16, 0xFE	; 254
    3c44:	1f 4f       	sbci	r17, 0xFF	; 255
    3c46:	c8 01       	movw	r24, r16
    3c48:	0e 94 9b 0c 	call	0x1936	; 0x1936 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* Execute its callback, then send a command to restart the timer if
        it is an auto-reload timer.  It cannot be restarted here as the lists
        have not yet been switched. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3c4c:	ec 89       	ldd	r30, Y+20	; 0x14
    3c4e:	fd 89       	ldd	r31, Y+21	; 0x15
    3c50:	ce 01       	movw	r24, r28
    3c52:	19 95       	eicall

        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    3c54:	8f 89       	ldd	r24, Y+23	; 0x17
    3c56:	82 ff       	sbrs	r24, 2
    3c58:	25 c0       	rjmp	.+74     	; 0x3ca4 <prvSampleTimeNow+0xc0>
            the timer going into the same timer list then it has already expired
            and the timer should be re-inserted into the current list so it is
            processed again within this loop.  Otherwise a command should be sent
            to restart the timer to ensure it is only inserted into a list after
            the lists have been swapped. */
            xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    3c5a:	8e 85       	ldd	r24, Y+14	; 0x0e
    3c5c:	9f 85       	ldd	r25, Y+15	; 0x0f
    3c5e:	a8 89       	ldd	r26, Y+16	; 0x10
    3c60:	b9 89       	ldd	r27, Y+17	; 0x11
    3c62:	88 0d       	add	r24, r8
    3c64:	99 1d       	adc	r25, r9
    3c66:	aa 1d       	adc	r26, r10
    3c68:	bb 1d       	adc	r27, r11
            if( xReloadTime > xNextExpireTime )
    3c6a:	88 16       	cp	r8, r24
    3c6c:	99 06       	cpc	r9, r25
    3c6e:	aa 06       	cpc	r10, r26
    3c70:	bb 06       	cpc	r11, r27
    3c72:	70 f4       	brcc	.+28     	; 0x3c90 <prvSampleTimeNow+0xac>
            {
                listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    3c74:	8a 83       	std	Y+2, r24	; 0x02
    3c76:	9b 83       	std	Y+3, r25	; 0x03
    3c78:	ac 83       	std	Y+4, r26	; 0x04
    3c7a:	bd 83       	std	Y+5, r27	; 0x05
                listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    3c7c:	db 87       	std	Y+11, r29	; 0x0b
    3c7e:	ca 87       	std	Y+10, r28	; 0x0a
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    3c80:	b8 01       	movw	r22, r16
    3c82:	80 91 75 19 	lds	r24, 0x1975	; 0x801975 <pxCurrentTimerList>
    3c86:	90 91 76 19 	lds	r25, 0x1976	; 0x801976 <pxCurrentTimerList+0x1>
    3c8a:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <vListInsert>
    3c8e:	0a c0       	rjmp	.+20     	; 0x3ca4 <prvSampleTimeNow+0xc0>
            }
            else
            {
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    3c90:	c1 2c       	mov	r12, r1
    3c92:	d1 2c       	mov	r13, r1
    3c94:	76 01       	movw	r14, r12
    3c96:	00 e0       	ldi	r16, 0x00	; 0
    3c98:	10 e0       	ldi	r17, 0x00	; 0
    3c9a:	a5 01       	movw	r20, r10
    3c9c:	94 01       	movw	r18, r8
    3c9e:	60 e0       	ldi	r22, 0x00	; 0
    3ca0:	ce 01       	movw	r24, r28
    3ca2:	42 df       	rcall	.-380    	; 0x3b28 <xTimerGenericCommand>

    /* The tick count has overflowed.  The timer lists must be switched.
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    3ca4:	e0 91 75 19 	lds	r30, 0x1975	; 0x801975 <pxCurrentTimerList>
    3ca8:	f0 91 76 19 	lds	r31, 0x1976	; 0x801976 <pxCurrentTimerList+0x1>
    3cac:	80 81       	ld	r24, Z
    3cae:	81 11       	cpse	r24, r1
    3cb0:	be cf       	rjmp	.-132    	; 0x3c2e <prvSampleTimeNow+0x4a>
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxTemp = pxCurrentTimerList;
    pxCurrentTimerList = pxOverflowTimerList;
    3cb2:	80 91 73 19 	lds	r24, 0x1973	; 0x801973 <pxOverflowTimerList>
    3cb6:	90 91 74 19 	lds	r25, 0x1974	; 0x801974 <pxOverflowTimerList+0x1>
    3cba:	90 93 76 19 	sts	0x1976, r25	; 0x801976 <pxCurrentTimerList+0x1>
    3cbe:	80 93 75 19 	sts	0x1975, r24	; 0x801975 <pxCurrentTimerList>
    pxOverflowTimerList = pxTemp;
    3cc2:	f0 93 74 19 	sts	0x1974, r31	; 0x801974 <pxOverflowTimerList+0x1>
    3cc6:	e0 93 73 19 	sts	0x1973, r30	; 0x801973 <pxOverflowTimerList>
    xTimeNow = xTaskGetTickCount();

    if( xTimeNow < xLastTime )
    {
        prvSwitchTimerLists();
        *pxTimerListsWereSwitched = pdTRUE;
    3cca:	81 e0       	ldi	r24, 0x01	; 1
    3ccc:	f1 01       	movw	r30, r2
    3cce:	80 83       	st	Z, r24
    3cd0:	02 c0       	rjmp	.+4      	; 0x3cd6 <prvSampleTimeNow+0xf2>
    }
    else
    {
        *pxTimerListsWereSwitched = pdFALSE;
    3cd2:	f1 01       	movw	r30, r2
    3cd4:	10 82       	st	Z, r1
    }

    xLastTime = xTimeNow;
    3cd6:	40 92 6b 19 	sts	0x196B, r4	; 0x80196b <xLastTime.2432>
    3cda:	50 92 6c 19 	sts	0x196C, r5	; 0x80196c <xLastTime.2432+0x1>
    3cde:	60 92 6d 19 	sts	0x196D, r6	; 0x80196d <xLastTime.2432+0x2>
    3ce2:	70 92 6e 19 	sts	0x196E, r7	; 0x80196e <xLastTime.2432+0x3>

    return xTimeNow;
}
    3ce6:	c3 01       	movw	r24, r6
    3ce8:	b2 01       	movw	r22, r4
    3cea:	df 91       	pop	r29
    3cec:	cf 91       	pop	r28
    3cee:	1f 91       	pop	r17
    3cf0:	0f 91       	pop	r16
    3cf2:	ff 90       	pop	r15
    3cf4:	ef 90       	pop	r14
    3cf6:	df 90       	pop	r13
    3cf8:	cf 90       	pop	r12
    3cfa:	bf 90       	pop	r11
    3cfc:	af 90       	pop	r10
    3cfe:	9f 90       	pop	r9
    3d00:	8f 90       	pop	r8
    3d02:	7f 90       	pop	r7
    3d04:	6f 90       	pop	r6
    3d06:	5f 90       	pop	r5
    3d08:	4f 90       	pop	r4
    3d0a:	3f 90       	pop	r3
    3d0c:	2f 90       	pop	r2
    3d0e:	08 95       	ret

00003d10 <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    3d10:	08 95       	ret

00003d12 <vApplicationMallocFailedHook>:
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    3d12:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    3d14:	2f 9a       	sbi	0x05, 7	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3d16:	2f ef       	ldi	r18, 0xFF	; 255
    3d18:	80 e7       	ldi	r24, 0x70	; 112
    3d1a:	92 e0       	ldi	r25, 0x02	; 2
    3d1c:	21 50       	subi	r18, 0x01	; 1
    3d1e:	80 40       	sbci	r24, 0x00	; 0
    3d20:	90 40       	sbci	r25, 0x00	; 0
    3d22:	e1 f7       	brne	.-8      	; 0x3d1c <vApplicationMallocFailedHook+0xa>
    3d24:	00 c0       	rjmp	.+0      	; 0x3d26 <vApplicationMallocFailedHook+0x14>
    3d26:	00 00       	nop
    for(;;)
    {
        _delay_ms(50);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED fast blink.
    3d28:	1f 9a       	sbi	0x03, 7	; 3
    3d2a:	f5 cf       	rjmp	.-22     	; 0x3d16 <vApplicationMallocFailedHook+0x4>

00003d2c <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook( TaskHandle_t xTask, portCHAR *pcTaskName ) __attribute__((weak));

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)), portCHAR *pcTaskName __attribute__((unused))  )
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    3d2c:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    3d2e:	2f 9a       	sbi	0x05, 7	; 5
    3d30:	2f ef       	ldi	r18, 0xFF	; 255
    3d32:	87 ea       	ldi	r24, 0xA7	; 167
    3d34:	91 e6       	ldi	r25, 0x61	; 97
    3d36:	21 50       	subi	r18, 0x01	; 1
    3d38:	80 40       	sbci	r24, 0x00	; 0
    3d3a:	90 40       	sbci	r25, 0x00	; 0
    3d3c:	e1 f7       	brne	.-8      	; 0x3d36 <vApplicationStackOverflowHook+0xa>
    3d3e:	00 c0       	rjmp	.+0      	; 0x3d40 <vApplicationStackOverflowHook+0x14>
    3d40:	00 00       	nop
    for(;;)
    {
        _delay_ms(2000);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED slow blink.
    3d42:	1f 9a       	sbi	0x03, 7	; 3
    3d44:	f5 cf       	rjmp	.-22     	; 0x3d30 <vApplicationStackOverflowHook+0x4>

00003d46 <create_tasks_and_semaphores>:
// Prototype for LoRaWAN handler
void lora_handler_create(UBaseType_t lora_handler_task_priority);

/*-----------------------------------------------------------*/
void create_tasks_and_semaphores(void)
{
    3d46:	8f 92       	push	r8
    3d48:	9f 92       	push	r9
    3d4a:	af 92       	push	r10
    3d4c:	bf 92       	push	r11
    3d4e:	cf 92       	push	r12
    3d50:	df 92       	push	r13
    3d52:	ef 92       	push	r14
    3d54:	ff 92       	push	r15
    3d56:	0f 93       	push	r16
    3d58:	1f 93       	push	r17
    3d5a:	cf 93       	push	r28
    3d5c:	df 93       	push	r29
	//xMessageBuffer = xMessageBufferCreate(100);
	//_semaphore = xSemaphoreCreateMutex();
	
	//_downlinkMessagebuffer = xMessageBufferCreate(sizeof(lora_payload_t)*2);
	
	configuration_create(_semaphore);
    3d5e:	80 91 eb 1a 	lds	r24, 0x1AEB	; 0x801aeb <_semaphore>
    3d62:	90 91 ec 1a 	lds	r25, 0x1AEC	; 0x801aec <_semaphore+0x1>
    3d66:	0e 94 4a 03 	call	0x694	; 0x694 <configuration_create>
	
	
	
	humAndTempReader_t humidityAndTemperature = humAndTempReader_create(TASK_HUMIDITY_SENSOR_PRIORITY, HUMIDITY_TASK_STACK, 
    3d6a:	e0 90 ef 1a 	lds	r14, 0x1AEF	; 0x801aef <readyEventGroup>
    3d6e:	f0 90 f0 1a 	lds	r15, 0x1AF0	; 0x801af0 <readyEventGroup+0x1>
    3d72:	40 91 07 1b 	lds	r20, 0x1B07	; 0x801b07 <startMeasureEventGroup>
    3d76:	50 91 08 1b 	lds	r21, 0x1B08	; 0x801b08 <startMeasureEventGroup+0x1>
    3d7a:	a1 2c       	mov	r10, r1
    3d7c:	b1 2c       	mov	r11, r1
    3d7e:	65 01       	movw	r12, r10
    3d80:	68 94       	set
    3d82:	a4 f8       	bld	r10, 4
    3d84:	01 e0       	ldi	r16, 0x01	; 1
    3d86:	10 e0       	ldi	r17, 0x00	; 0
    3d88:	20 e0       	ldi	r18, 0x00	; 0
    3d8a:	30 e0       	ldi	r19, 0x00	; 0
    3d8c:	60 ec       	ldi	r22, 0xC0	; 192
    3d8e:	82 e0       	ldi	r24, 0x02	; 2
    3d90:	0e 94 a0 06 	call	0xd40	; 0xd40 <humAndTempReader_create>
    3d94:	c8 2f       	mov	r28, r24
    3d96:	d9 2f       	mov	r29, r25
	startMeasureEventGroup, BIT_MEASURE_HUMIDITY, readyEventGroup, BIT_DONE_MEASURE_HUMIDITY);
	
	co2reader_t co2reader = co2Reader_create(TASK_CO2_SENSOR_PRIORITY, CO2_TASK_STACK, startMeasureEventGroup, BIT_MEASURE_CO2,
    3d98:	e0 90 ef 1a 	lds	r14, 0x1AEF	; 0x801aef <readyEventGroup>
    3d9c:	f0 90 f0 1a 	lds	r15, 0x1AF0	; 0x801af0 <readyEventGroup+0x1>
    3da0:	40 91 07 1b 	lds	r20, 0x1B07	; 0x801b07 <startMeasureEventGroup>
    3da4:	50 91 08 1b 	lds	r21, 0x1B08	; 0x801b08 <startMeasureEventGroup+0x1>
    3da8:	a1 2c       	mov	r10, r1
    3daa:	b1 2c       	mov	r11, r1
    3dac:	65 01       	movw	r12, r10
    3dae:	68 94       	set
    3db0:	a5 f8       	bld	r10, 5
    3db2:	08 e0       	ldi	r16, 0x08	; 8
    3db4:	10 e0       	ldi	r17, 0x00	; 0
    3db6:	20 e0       	ldi	r18, 0x00	; 0
    3db8:	30 e0       	ldi	r19, 0x00	; 0
    3dba:	68 e8       	ldi	r22, 0x88	; 136
    3dbc:	82 e0       	ldi	r24, 0x02	; 2
    3dbe:	0e 94 87 02 	call	0x50e	; 0x50e <co2Reader_create>
    3dc2:	4c 01       	movw	r8, r24
	
	//co2reader_t co2reader = NULL;
	
	
	
	soundReader_t soundReader = soundReader_create(TASK_SOUND_SENSOR_PRIORITY, SOUND_TASK_STACK, startMeasureEventGroup, BIT_MEASURE_SOUND,
    3dc4:	e0 90 ef 1a 	lds	r14, 0x1AEF	; 0x801aef <readyEventGroup>
    3dc8:	f0 90 f0 1a 	lds	r15, 0x1AF0	; 0x801af0 <readyEventGroup+0x1>
    3dcc:	40 91 07 1b 	lds	r20, 0x1B07	; 0x801b07 <startMeasureEventGroup>
    3dd0:	50 91 08 1b 	lds	r21, 0x1B08	; 0x801b08 <startMeasureEventGroup+0x1>
    3dd4:	a1 2c       	mov	r10, r1
    3dd6:	b1 2c       	mov	r11, r1
    3dd8:	65 01       	movw	r12, r10
    3dda:	68 94       	set
    3ddc:	a6 f8       	bld	r10, 6
    3dde:	04 e0       	ldi	r16, 0x04	; 4
    3de0:	10 e0       	ldi	r17, 0x00	; 0
    3de2:	20 e0       	ldi	r18, 0x00	; 0
    3de4:	30 e0       	ldi	r19, 0x00	; 0
    3de6:	60 ec       	ldi	r22, 0xC0	; 192
    3de8:	82 e0       	ldi	r24, 0x02	; 2
    3dea:	0e 94 86 07 	call	0xf0c	; 0xf0c <soundReader_create>
    3dee:	18 2f       	mov	r17, r24
    3df0:	09 2f       	mov	r16, r25
	readyEventGroup, BIT_DONE_MEASURE_SOUND);	
	//soundReader_t soundReader = NULL;
	
	servo_initialise();
    3df2:	0e 94 79 07 	call	0xef2	; 0xef2 <servo_initialise>
	
	device_create(TASK_DEVICE_PRIORITY, DEVICE_TASK_STACK, startMeasureEventGroup, ALL_BIT_MEASURE,
    3df6:	e0 90 ef 1a 	lds	r14, 0x1AEF	; 0x801aef <readyEventGroup>
    3dfa:	f0 90 f0 1a 	lds	r15, 0x1AF0	; 0x801af0 <readyEventGroup+0x1>
    3dfe:	40 91 07 1b 	lds	r20, 0x1B07	; 0x801b07 <startMeasureEventGroup>
    3e02:	50 91 08 1b 	lds	r21, 0x1B08	; 0x801b08 <startMeasureEventGroup+0x1>
    3e06:	80 91 ea 1a 	lds	r24, 0x1AEA	; 0x801aea <xMessageBuffer+0x1>
    3e0a:	8f 93       	push	r24
    3e0c:	80 91 e9 1a 	lds	r24, 0x1AE9	; 0x801ae9 <xMessageBuffer>
    3e10:	8f 93       	push	r24
    3e12:	0f 93       	push	r16
    3e14:	1f 93       	push	r17
    3e16:	df 93       	push	r29
    3e18:	cf 93       	push	r28
    3e1a:	0f 2e       	mov	r0, r31
    3e1c:	f0 e5       	ldi	r31, 0x50	; 80
    3e1e:	af 2e       	mov	r10, r31
    3e20:	b1 2c       	mov	r11, r1
    3e22:	c1 2c       	mov	r12, r1
    3e24:	d1 2c       	mov	r13, r1
    3e26:	f0 2d       	mov	r31, r0
    3e28:	05 e0       	ldi	r16, 0x05	; 5
    3e2a:	10 e0       	ldi	r17, 0x00	; 0
    3e2c:	20 e0       	ldi	r18, 0x00	; 0
    3e2e:	30 e0       	ldi	r19, 0x00	; 0
    3e30:	68 e8       	ldi	r22, 0x88	; 136
    3e32:	84 e0       	ldi	r24, 0x04	; 4
    3e34:	0e 94 58 04 	call	0x8b0	; 0x8b0 <device_create>
	readyEventGroup, ALL_BIT_DONE_MEASURE, co2reader, humidityAndTemperature,soundReader, xMessageBuffer);
	
	lora_UpLinkHandler_create(TASK_LORA_DRIVER_PRIORITY,xMessageBuffer);
    3e38:	60 91 e9 1a 	lds	r22, 0x1AE9	; 0x801ae9 <xMessageBuffer>
    3e3c:	70 91 ea 1a 	lds	r23, 0x1AEA	; 0x801aea <xMessageBuffer+0x1>
    3e40:	81 e0       	ldi	r24, 0x01	; 1
    3e42:	0e 94 44 08 	call	0x1088	; 0x1088 <lora_UpLinkHandler_create>
	lora_DownLinkHandler_create(TASK_LORA_DRIVER_PRIORITYDOWN,_downlinkMessagebuffer);
    3e46:	60 91 ed 1a 	lds	r22, 0x1AED	; 0x801aed <_downlinkMessagebuffer>
    3e4a:	70 91 ee 1a 	lds	r23, 0x1AEE	; 0x801aee <_downlinkMessagebuffer+0x1>
    3e4e:	81 e0       	ldi	r24, 0x01	; 1
    3e50:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <lora_DownLinkHandler_create>
}
    3e54:	0f 90       	pop	r0
    3e56:	0f 90       	pop	r0
    3e58:	0f 90       	pop	r0
    3e5a:	0f 90       	pop	r0
    3e5c:	0f 90       	pop	r0
    3e5e:	0f 90       	pop	r0
    3e60:	df 91       	pop	r29
    3e62:	cf 91       	pop	r28
    3e64:	1f 91       	pop	r17
    3e66:	0f 91       	pop	r16
    3e68:	ff 90       	pop	r15
    3e6a:	ef 90       	pop	r14
    3e6c:	df 90       	pop	r13
    3e6e:	cf 90       	pop	r12
    3e70:	bf 90       	pop	r11
    3e72:	af 90       	pop	r10
    3e74:	9f 90       	pop	r9
    3e76:	8f 90       	pop	r8
    3e78:	08 95       	ret

00003e7a <initialiseSystem>:

/*-----------------------------------------------------------*/
void initialiseSystem()
{
	startMeasureEventGroup = xEventGroupCreate();
    3e7a:	0e 94 85 09 	call	0x130a	; 0x130a <xEventGroupCreate>
    3e7e:	90 93 08 1b 	sts	0x1B08, r25	; 0x801b08 <startMeasureEventGroup+0x1>
    3e82:	80 93 07 1b 	sts	0x1B07, r24	; 0x801b07 <startMeasureEventGroup>
	readyEventGroup = xEventGroupCreate();
    3e86:	0e 94 85 09 	call	0x130a	; 0x130a <xEventGroupCreate>
    3e8a:	90 93 f0 1a 	sts	0x1AF0, r25	; 0x801af0 <readyEventGroup+0x1>
    3e8e:	80 93 ef 1a 	sts	0x1AEF, r24	; 0x801aef <readyEventGroup>

	xMessageBuffer = xMessageBufferCreate(100);
    3e92:	41 e0       	ldi	r20, 0x01	; 1
    3e94:	60 e0       	ldi	r22, 0x00	; 0
    3e96:	70 e0       	ldi	r23, 0x00	; 0
    3e98:	84 e6       	ldi	r24, 0x64	; 100
    3e9a:	90 e0       	ldi	r25, 0x00	; 0
    3e9c:	0e 94 d7 12 	call	0x25ae	; 0x25ae <xStreamBufferGenericCreate>
    3ea0:	90 93 ea 1a 	sts	0x1AEA, r25	; 0x801aea <xMessageBuffer+0x1>
    3ea4:	80 93 e9 1a 	sts	0x1AE9, r24	; 0x801ae9 <xMessageBuffer>
	_semaphore = xSemaphoreCreateMutex();
    3ea8:	81 e0       	ldi	r24, 0x01	; 1
    3eaa:	0e 94 1a 10 	call	0x2034	; 0x2034 <xQueueCreateMutex>
    3eae:	90 93 ec 1a 	sts	0x1AEC, r25	; 0x801aec <_semaphore+0x1>
    3eb2:	80 93 eb 1a 	sts	0x1AEB, r24	; 0x801aeb <_semaphore>
	_downlinkMessagebuffer = xMessageBufferCreate(sizeof(lora_payload_t)*2);
    3eb6:	41 e0       	ldi	r20, 0x01	; 1
    3eb8:	60 e0       	ldi	r22, 0x00	; 0
    3eba:	70 e0       	ldi	r23, 0x00	; 0
    3ebc:	8c e2       	ldi	r24, 0x2C	; 44
    3ebe:	90 e0       	ldi	r25, 0x00	; 0
    3ec0:	0e 94 d7 12 	call	0x25ae	; 0x25ae <xStreamBufferGenericCreate>
    3ec4:	90 93 ee 1a 	sts	0x1AEE, r25	; 0x801aee <_downlinkMessagebuffer+0x1>
    3ec8:	80 93 ed 1a 	sts	0x1AED, r24	; 0x801aed <_downlinkMessagebuffer>
	// Set output ports for leds used in the example
	DDRA |= _BV(DDA0) | _BV(DDA7);
    3ecc:	81 b1       	in	r24, 0x01	; 1
    3ece:	81 68       	ori	r24, 0x81	; 129
    3ed0:	81 b9       	out	0x01, r24	; 1
	//// Initialise the trace-driver to be used together with the R2R-Network
	//trace_init();
	// Make it possible to use stdio on COM port 0 (USB) on Arduino board - Setting 57600,8,N,1
	stdioCreate(ser_USART0);
    3ed2:	80 e0       	ldi	r24, 0x00	; 0
    3ed4:	0e 94 73 2b 	call	0x56e6	; 0x56e6 <stdioCreate>
	
	
	
	// vvvvvvvvvvvvvvvvv BELOW IS LoRaWAN initialisation vvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
	// Initialise the HAL layer and use 5 for LED driver priority
	hal_create(5);
    3ed8:	85 e0       	ldi	r24, 0x05	; 5
    3eda:	11 d0       	rcall	.+34     	; 0x3efe <hal_create>
	// Initialise the LoRaWAN driver with a down-link buffer
	
	
	lora_driver_create(LORA_USART, _downlinkMessagebuffer);
    3edc:	60 91 ed 1a 	lds	r22, 0x1AED	; 0x801aed <_downlinkMessagebuffer>
    3ee0:	70 91 ee 1a 	lds	r23, 0x1AEE	; 0x801aee <_downlinkMessagebuffer+0x1>
    3ee4:	81 e0       	ldi	r24, 0x01	; 1
	// Create LoRaWAN task and start it up with priority 3 
	
	hih8120Create();
    3ee6:	c3 d3       	rcall	.+1926   	; 0x466e <lora_driver_create>
    3ee8:	69 c0       	rjmp	.+210    	; 0x3fbc <hih8120Create>
    3eea:	08 95       	ret

00003eec <main>:
	
}
/*-----------------------------------------------------------*/
int main(void)
{
	initialiseSystem(); // Must be done as the very first thing!!
    3eec:	c6 df       	rcall	.-116    	; 0x3e7a <initialiseSystem>
	create_tasks_and_semaphores();
    3eee:	2b df       	rcall	.-426    	; 0x3d46 <create_tasks_and_semaphores>
    3ef0:	8f e7       	ldi	r24, 0x7F	; 127
	printf("Program Started!!\n");
    3ef2:	95 e0       	ldi	r25, 0x05	; 5
    3ef4:	0e 94 9c 31 	call	0x6338	; 0x6338 <puts>
    3ef8:	0e 94 91 16 	call	0x2d22	; 0x2d22 <vTaskStartScheduler>
	vTaskStartScheduler(); // Initialise and run the freeRTOS scheduler. Execution should never return from here.
    3efc:	ff cf       	rjmp	.-2      	; 0x3efc <main+0x10>

00003efe <hal_create>:
    3efe:	e9 e0       	ldi	r30, 0x09	; 9
    3f00:	fb e1       	ldi	r31, 0x1B	; 27
    3f02:	2c e8       	ldi	r18, 0x8C	; 140
    3f04:	36 e2       	ldi	r19, 0x26	; 38
    3f06:	31 83       	std	Z+1, r19	; 0x01
    3f08:	20 83       	st	Z, r18
    3f0a:	2f e8       	ldi	r18, 0x8F	; 143
    3f0c:	36 e2       	ldi	r19, 0x26	; 38
    3f0e:	33 83       	std	Z+3, r19	; 0x03
    3f10:	22 83       	std	Z+2, r18	; 0x02
    3f12:	2a e9       	ldi	r18, 0x9A	; 154
    3f14:	36 e2       	ldi	r19, 0x26	; 38
    3f16:	35 83       	std	Z+5, r19	; 0x05
    3f18:	24 83       	std	Z+4, r18	; 0x04
    3f1a:	2e e9       	ldi	r18, 0x9E	; 158
    3f1c:	36 e2       	ldi	r19, 0x26	; 38
    3f1e:	37 83       	std	Z+7, r19	; 0x07
    3f20:	26 83       	std	Z+6, r18	; 0x06
    3f22:	24 ea       	ldi	r18, 0xA4	; 164
    3f24:	36 e2       	ldi	r19, 0x26	; 38
    3f26:	31 87       	std	Z+9, r19	; 0x09
    3f28:	20 87       	std	Z+8, r18	; 0x08
    3f2a:	20 eb       	ldi	r18, 0xB0	; 176
    3f2c:	36 e2       	ldi	r19, 0x26	; 38
    3f2e:	33 87       	std	Z+11, r19	; 0x0b
    3f30:	22 87       	std	Z+10, r18	; 0x0a
    3f32:	25 eb       	ldi	r18, 0xB5	; 181
    3f34:	36 e2       	ldi	r19, 0x26	; 38
    3f36:	35 87       	std	Z+13, r19	; 0x0d
    3f38:	24 87       	std	Z+12, r18	; 0x0c
    3f3a:	21 ec       	ldi	r18, 0xC1	; 193
    3f3c:	36 e2       	ldi	r19, 0x26	; 38
    3f3e:	37 87       	std	Z+15, r19	; 0x0f
    3f40:	26 87       	std	Z+14, r18	; 0x0e
    3f42:	21 ea       	ldi	r18, 0xA1	; 161
    3f44:	36 e2       	ldi	r19, 0x26	; 38
    3f46:	31 8b       	std	Z+17, r19	; 0x11
    3f48:	20 8b       	std	Z+16, r18	; 0x10
    3f4a:	26 ec       	ldi	r18, 0xC6	; 198
    3f4c:	36 e2       	ldi	r19, 0x26	; 38
    3f4e:	33 8b       	std	Z+19, r19	; 0x13
    3f50:	22 8b       	std	Z+18, r18	; 0x12
    3f52:	23 ed       	ldi	r18, 0xD3	; 211
    3f54:	36 e2       	ldi	r19, 0x26	; 38
    3f56:	35 8b       	std	Z+21, r19	; 0x15
    3f58:	24 8b       	std	Z+20, r18	; 0x14
    3f5a:	68 2f       	mov	r22, r24
    3f5c:	cf 01       	movw	r24, r30
    3f5e:	53 c1       	rjmp	.+678    	; 0x4206 <led_create>
    3f60:	08 95       	ret

00003f62 <_hihTwiCallback>:
    3f62:	65 30       	cpi	r22, 0x05	; 5
    3f64:	f1 f4       	brne	.+60     	; 0x3fa2 <_hihTwiCallback+0x40>
    3f66:	fa 01       	movw	r30, r20
    3f68:	80 81       	ld	r24, Z
    3f6a:	8f 73       	andi	r24, 0x3F	; 63
    3f6c:	90 e0       	ldi	r25, 0x00	; 0
    3f6e:	98 2f       	mov	r25, r24
    3f70:	88 27       	eor	r24, r24
    3f72:	21 81       	ldd	r18, Z+1	; 0x01
    3f74:	82 2b       	or	r24, r18
    3f76:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <_hum+0x1>
    3f7a:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <_hum>
    3f7e:	82 81       	ldd	r24, Z+2	; 0x02
    3f80:	f0 e4       	ldi	r31, 0x40	; 64
    3f82:	8f 9f       	mul	r24, r31
    3f84:	c0 01       	movw	r24, r0
    3f86:	11 24       	eor	r1, r1
    3f88:	fa 01       	movw	r30, r20
    3f8a:	23 81       	ldd	r18, Z+3	; 0x03
    3f8c:	26 95       	lsr	r18
    3f8e:	26 95       	lsr	r18
    3f90:	82 2b       	or	r24, r18
    3f92:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <_temp+0x1>
    3f96:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <_temp>
    3f9a:	81 e0       	ldi	r24, 0x01	; 1
    3f9c:	80 93 8d 19 	sts	0x198D, r24	; 0x80198d <_measuringIsReady>
    3fa0:	08 95       	ret
    3fa2:	64 30       	cpi	r22, 0x04	; 4
    3fa4:	51 f0       	breq	.+20     	; 0x3fba <_hihTwiCallback+0x58>
    3fa6:	80 e0       	ldi	r24, 0x00	; 0
    3fa8:	90 e4       	ldi	r25, 0x40	; 64
    3faa:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <_temp+0x1>
    3fae:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <_temp>
    3fb2:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <_hum+0x1>
    3fb6:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <_hum>
    3fba:	08 95       	ret

00003fbc <hih8120Create>:
    3fbc:	0f 93       	push	r16
    3fbe:	1f 93       	push	r17
    3fc0:	01 eb       	ldi	r16, 0xB1	; 177
    3fc2:	1f e1       	ldi	r17, 0x1F	; 31
    3fc4:	20 e0       	ldi	r18, 0x00	; 0
    3fc6:	34 e2       	ldi	r19, 0x24	; 36
    3fc8:	44 ef       	ldi	r20, 0xF4	; 244
    3fca:	50 e0       	ldi	r21, 0x00	; 0
    3fcc:	60 e0       	ldi	r22, 0x00	; 0
    3fce:	87 e2       	ldi	r24, 0x27	; 39
    3fd0:	0e 94 ad 2b 	call	0x575a	; 0x575a <twiCreate>
    3fd4:	90 93 8f 19 	sts	0x198F, r25	; 0x80198f <_hih8120Handler+0x1>
    3fd8:	80 93 8e 19 	sts	0x198E, r24	; 0x80198e <_hih8120Handler>
    3fdc:	21 e0       	ldi	r18, 0x01	; 1
    3fde:	89 2b       	or	r24, r25
    3fe0:	09 f0       	breq	.+2      	; 0x3fe4 <hih8120Create+0x28>
    3fe2:	20 e0       	ldi	r18, 0x00	; 0
    3fe4:	82 2f       	mov	r24, r18
    3fe6:	1f 91       	pop	r17
    3fe8:	0f 91       	pop	r16
    3fea:	08 95       	ret

00003fec <hih8120IsReady>:
    3fec:	80 91 8d 19 	lds	r24, 0x198D	; 0x80198d <_measuringIsReady>
    3ff0:	08 95       	ret

00003ff2 <hih8120Wakeup>:
    3ff2:	80 91 8e 19 	lds	r24, 0x198E	; 0x80198e <_hih8120Handler>
    3ff6:	90 91 8f 19 	lds	r25, 0x198F	; 0x80198f <_hih8120Handler+0x1>
    3ffa:	00 97       	sbiw	r24, 0x00	; 0
    3ffc:	59 f0       	breq	.+22     	; 0x4014 <hih8120Wakeup+0x22>
    3ffe:	40 e0       	ldi	r20, 0x00	; 0
    4000:	60 e0       	ldi	r22, 0x00	; 0
    4002:	70 e0       	ldi	r23, 0x00	; 0
    4004:	0e 94 fe 2b 	call	0x57fc	; 0x57fc <twiTransmit>
    4008:	84 30       	cpi	r24, 0x04	; 4
    400a:	31 f4       	brne	.+12     	; 0x4018 <hih8120Wakeup+0x26>
    400c:	10 92 8d 19 	sts	0x198D, r1	; 0x80198d <_measuringIsReady>
    4010:	80 e0       	ldi	r24, 0x00	; 0
    4012:	08 95       	ret
    4014:	82 e0       	ldi	r24, 0x02	; 2
    4016:	08 95       	ret
    4018:	83 e0       	ldi	r24, 0x03	; 3
    401a:	08 95       	ret

0000401c <hih8120Meassure>:
    401c:	80 91 8e 19 	lds	r24, 0x198E	; 0x80198e <_hih8120Handler>
    4020:	90 91 8f 19 	lds	r25, 0x198F	; 0x80198f <_hih8120Handler+0x1>
    4024:	00 97       	sbiw	r24, 0x00	; 0
    4026:	39 f0       	breq	.+14     	; 0x4036 <hih8120Meassure+0x1a>
    4028:	64 e0       	ldi	r22, 0x04	; 4
    402a:	0e 94 4a 2c 	call	0x5894	; 0x5894 <twiReceive>
    402e:	85 30       	cpi	r24, 0x05	; 5
    4030:	21 f0       	breq	.+8      	; 0x403a <hih8120Meassure+0x1e>
    4032:	83 e0       	ldi	r24, 0x03	; 3
    4034:	08 95       	ret
    4036:	82 e0       	ldi	r24, 0x02	; 2
    4038:	08 95       	ret
    403a:	80 e0       	ldi	r24, 0x00	; 0
    403c:	08 95       	ret

0000403e <hih8120GetHumidity>:
    403e:	60 91 0c 02 	lds	r22, 0x020C	; 0x80020c <_hum>
    4042:	70 91 0d 02 	lds	r23, 0x020D	; 0x80020d <_hum+0x1>
    4046:	80 e0       	ldi	r24, 0x00	; 0
    4048:	90 e0       	ldi	r25, 0x00	; 0
    404a:	0e 94 54 2e 	call	0x5ca8	; 0x5ca8 <__floatunsisf>
    404e:	20 e0       	ldi	r18, 0x00	; 0
    4050:	30 e0       	ldi	r19, 0x00	; 0
    4052:	48 ec       	ldi	r20, 0xC8	; 200
    4054:	52 e4       	ldi	r21, 0x42	; 66
    4056:	0e 94 e2 2e 	call	0x5dc4	; 0x5dc4 <__mulsf3>
    405a:	20 e0       	ldi	r18, 0x00	; 0
    405c:	38 ef       	ldi	r19, 0xF8	; 248
    405e:	4f e7       	ldi	r20, 0x7F	; 127
    4060:	56 e4       	ldi	r21, 0x46	; 70
    4062:	0c 94 bb 2d 	jmp	0x5b76	; 0x5b76 <__divsf3>
    4066:	08 95       	ret

00004068 <hih8120GetHumidityPercent_x10>:
    4068:	ea df       	rcall	.-44     	; 0x403e <hih8120GetHumidity>
    406a:	20 e0       	ldi	r18, 0x00	; 0
    406c:	30 e0       	ldi	r19, 0x00	; 0
    406e:	40 e2       	ldi	r20, 0x20	; 32
    4070:	51 e4       	ldi	r21, 0x41	; 65
    4072:	0e 94 e2 2e 	call	0x5dc4	; 0x5dc4 <__mulsf3>
    4076:	0e 94 28 2e 	call	0x5c50	; 0x5c50 <__fixunssfsi>
    407a:	cb 01       	movw	r24, r22
    407c:	08 95       	ret

0000407e <hih8120GetTemperature>:
    407e:	60 91 0a 02 	lds	r22, 0x020A	; 0x80020a <_temp>
    4082:	70 91 0b 02 	lds	r23, 0x020B	; 0x80020b <_temp+0x1>
    4086:	80 e0       	ldi	r24, 0x00	; 0
    4088:	90 e0       	ldi	r25, 0x00	; 0
    408a:	0e 94 54 2e 	call	0x5ca8	; 0x5ca8 <__floatunsisf>
    408e:	20 e0       	ldi	r18, 0x00	; 0
    4090:	30 e0       	ldi	r19, 0x00	; 0
    4092:	45 e2       	ldi	r20, 0x25	; 37
    4094:	53 e4       	ldi	r21, 0x43	; 67
    4096:	0e 94 e2 2e 	call	0x5dc4	; 0x5dc4 <__mulsf3>
    409a:	20 e0       	ldi	r18, 0x00	; 0
    409c:	38 ef       	ldi	r19, 0xF8	; 248
    409e:	4f e7       	ldi	r20, 0x7F	; 127
    40a0:	56 e4       	ldi	r21, 0x46	; 70
    40a2:	0e 94 bb 2d 	call	0x5b76	; 0x5b76 <__divsf3>
    40a6:	20 e0       	ldi	r18, 0x00	; 0
    40a8:	30 e0       	ldi	r19, 0x00	; 0
    40aa:	40 e2       	ldi	r20, 0x20	; 32
    40ac:	52 e4       	ldi	r21, 0x42	; 66
    40ae:	0c 94 56 2d 	jmp	0x5aac	; 0x5aac <__subsf3>
    40b2:	08 95       	ret

000040b4 <hih8120GetTemperature_x10>:
    40b4:	e4 df       	rcall	.-56     	; 0x407e <hih8120GetTemperature>
    40b6:	20 e0       	ldi	r18, 0x00	; 0
    40b8:	30 e0       	ldi	r19, 0x00	; 0
    40ba:	40 e2       	ldi	r20, 0x20	; 32
    40bc:	51 e4       	ldi	r21, 0x41	; 65
    40be:	0e 94 e2 2e 	call	0x5dc4	; 0x5dc4 <__mulsf3>
    40c2:	0e 94 23 2e 	call	0x5c46	; 0x5c46 <__fixsfsi>
    40c6:	cb 01       	movw	r24, r22
    40c8:	08 95       	ret

000040ca <_turn_off>:
    40ca:	cf 93       	push	r28
    40cc:	df 93       	push	r29
    40ce:	90 e0       	ldi	r25, 0x00	; 0
    40d0:	fc 01       	movw	r30, r24
    40d2:	ee 0f       	add	r30, r30
    40d4:	ff 1f       	adc	r31, r31
    40d6:	e8 0f       	add	r30, r24
    40d8:	f9 1f       	adc	r31, r25
    40da:	ee 0f       	add	r30, r30
    40dc:	ff 1f       	adc	r31, r31
    40de:	e0 57       	subi	r30, 0x70	; 112
    40e0:	f6 4e       	sbci	r31, 0xE6	; 230
    40e2:	23 81       	ldd	r18, Z+3	; 0x03
    40e4:	21 11       	cpse	r18, r1
    40e6:	0a c0       	rjmp	.+20     	; 0x40fc <_turn_off+0x32>
    40e8:	ef 01       	movw	r28, r30
    40ea:	e0 91 11 1b 	lds	r30, 0x1B11	; 0x801b11 <register_access+0x8>
    40ee:	f0 91 12 1b 	lds	r31, 0x1B12	; 0x801b12 <register_access+0x9>
    40f2:	6a 81       	ldd	r22, Y+2	; 0x02
    40f4:	88 81       	ld	r24, Y
    40f6:	99 81       	ldd	r25, Y+1	; 0x01
    40f8:	19 95       	eicall
    40fa:	12 c0       	rjmp	.+36     	; 0x4120 <_turn_off+0x56>
    40fc:	dc 01       	movw	r26, r24
    40fe:	aa 0f       	add	r26, r26
    4100:	bb 1f       	adc	r27, r27
    4102:	ed 01       	movw	r28, r26
    4104:	c8 0f       	add	r28, r24
    4106:	d9 1f       	adc	r29, r25
    4108:	cc 0f       	add	r28, r28
    410a:	dd 1f       	adc	r29, r29
    410c:	c0 57       	subi	r28, 0x70	; 112
    410e:	d6 4e       	sbci	r29, 0xE6	; 230
    4110:	e0 91 1b 1b 	lds	r30, 0x1B1B	; 0x801b1b <register_access+0x12>
    4114:	f0 91 1c 1b 	lds	r31, 0x1B1C	; 0x801b1c <register_access+0x13>
    4118:	6a 81       	ldd	r22, Y+2	; 0x02
    411a:	88 81       	ld	r24, Y
    411c:	99 81       	ldd	r25, Y+1	; 0x01
    411e:	19 95       	eicall
    4120:	df 91       	pop	r29
    4122:	cf 91       	pop	r28
    4124:	08 95       	ret

00004126 <_turn_on>:
    4126:	cf 93       	push	r28
    4128:	df 93       	push	r29
    412a:	90 e0       	ldi	r25, 0x00	; 0
    412c:	fc 01       	movw	r30, r24
    412e:	ee 0f       	add	r30, r30
    4130:	ff 1f       	adc	r31, r31
    4132:	e8 0f       	add	r30, r24
    4134:	f9 1f       	adc	r31, r25
    4136:	ee 0f       	add	r30, r30
    4138:	ff 1f       	adc	r31, r31
    413a:	e0 57       	subi	r30, 0x70	; 112
    413c:	f6 4e       	sbci	r31, 0xE6	; 230
    413e:	23 81       	ldd	r18, Z+3	; 0x03
    4140:	21 11       	cpse	r18, r1
    4142:	0a c0       	rjmp	.+20     	; 0x4158 <_turn_on+0x32>
    4144:	ef 01       	movw	r28, r30
    4146:	e0 91 1b 1b 	lds	r30, 0x1B1B	; 0x801b1b <register_access+0x12>
    414a:	f0 91 1c 1b 	lds	r31, 0x1B1C	; 0x801b1c <register_access+0x13>
    414e:	6a 81       	ldd	r22, Y+2	; 0x02
    4150:	88 81       	ld	r24, Y
    4152:	99 81       	ldd	r25, Y+1	; 0x01
    4154:	19 95       	eicall
    4156:	12 c0       	rjmp	.+36     	; 0x417c <_turn_on+0x56>
    4158:	dc 01       	movw	r26, r24
    415a:	aa 0f       	add	r26, r26
    415c:	bb 1f       	adc	r27, r27
    415e:	ed 01       	movw	r28, r26
    4160:	c8 0f       	add	r28, r24
    4162:	d9 1f       	adc	r29, r25
    4164:	cc 0f       	add	r28, r28
    4166:	dd 1f       	adc	r29, r29
    4168:	c0 57       	subi	r28, 0x70	; 112
    416a:	d6 4e       	sbci	r29, 0xE6	; 230
    416c:	e0 91 11 1b 	lds	r30, 0x1B11	; 0x801b11 <register_access+0x8>
    4170:	f0 91 12 1b 	lds	r31, 0x1B12	; 0x801b12 <register_access+0x9>
    4174:	6a 81       	ldd	r22, Y+2	; 0x02
    4176:	88 81       	ld	r24, Y
    4178:	99 81       	ldd	r25, Y+1	; 0x01
    417a:	19 95       	eicall
    417c:	df 91       	pop	r29
    417e:	cf 91       	pop	r28
    4180:	08 95       	ret

00004182 <_hal_led_task>:
    4182:	0f 2e       	mov	r0, r31
    4184:	f9 e0       	ldi	r31, 0x09	; 9
    4186:	cf 2e       	mov	r12, r31
    4188:	fb e1       	ldi	r31, 0x1B	; 27
    418a:	df 2e       	mov	r13, r31
    418c:	f0 2d       	mov	r31, r0
    418e:	04 e0       	ldi	r16, 0x04	; 4
    4190:	c0 e9       	ldi	r28, 0x90	; 144
    4192:	d9 e1       	ldi	r29, 0x19	; 25
    4194:	10 e0       	ldi	r17, 0x00	; 0
    4196:	8c 81       	ldd	r24, Y+4	; 0x04
    4198:	81 30       	cpi	r24, 0x01	; 1
    419a:	69 f0       	breq	.+26     	; 0x41b6 <_hal_led_task+0x34>
    419c:	e8 f0       	brcs	.+58     	; 0x41d8 <_hal_led_task+0x56>
    419e:	82 30       	cpi	r24, 0x02	; 2
    41a0:	39 f5       	brne	.+78     	; 0x41f0 <_hal_led_task+0x6e>
    41a2:	d6 01       	movw	r26, r12
    41a4:	1c 96       	adiw	r26, 0x0c	; 12
    41a6:	ed 91       	ld	r30, X+
    41a8:	fc 91       	ld	r31, X
    41aa:	1d 97       	sbiw	r26, 0x0d	; 13
    41ac:	6a 81       	ldd	r22, Y+2	; 0x02
    41ae:	88 81       	ld	r24, Y
    41b0:	99 81       	ldd	r25, Y+1	; 0x01
    41b2:	19 95       	eicall
    41b4:	1d c0       	rjmp	.+58     	; 0x41f0 <_hal_led_task+0x6e>
    41b6:	8d 81       	ldd	r24, Y+5	; 0x05
    41b8:	8f 5f       	subi	r24, 0xFF	; 255
    41ba:	8a 30       	cpi	r24, 0x0A	; 10
    41bc:	10 f4       	brcc	.+4      	; 0x41c2 <_hal_led_task+0x40>
    41be:	8d 83       	std	Y+5, r24	; 0x05
    41c0:	17 c0       	rjmp	.+46     	; 0x41f0 <_hal_led_task+0x6e>
    41c2:	1d 82       	std	Y+5, r1	; 0x05
    41c4:	d6 01       	movw	r26, r12
    41c6:	1c 96       	adiw	r26, 0x0c	; 12
    41c8:	ed 91       	ld	r30, X+
    41ca:	fc 91       	ld	r31, X
    41cc:	1d 97       	sbiw	r26, 0x0d	; 13
    41ce:	6a 81       	ldd	r22, Y+2	; 0x02
    41d0:	88 81       	ld	r24, Y
    41d2:	99 81       	ldd	r25, Y+1	; 0x01
    41d4:	19 95       	eicall
    41d6:	0c c0       	rjmp	.+24     	; 0x41f0 <_hal_led_task+0x6e>
    41d8:	8d 81       	ldd	r24, Y+5	; 0x05
    41da:	88 23       	and	r24, r24
    41dc:	31 f0       	breq	.+12     	; 0x41ea <_hal_led_task+0x68>
    41de:	81 2f       	mov	r24, r17
    41e0:	a2 df       	rcall	.-188    	; 0x4126 <_turn_on>
    41e2:	8d 81       	ldd	r24, Y+5	; 0x05
    41e4:	81 50       	subi	r24, 0x01	; 1
    41e6:	8d 83       	std	Y+5, r24	; 0x05
    41e8:	03 c0       	rjmp	.+6      	; 0x41f0 <_hal_led_task+0x6e>
    41ea:	0c 83       	std	Y+4, r16	; 0x04
    41ec:	81 2f       	mov	r24, r17
    41ee:	6d df       	rcall	.-294    	; 0x40ca <_turn_off>
    41f0:	1f 5f       	subi	r17, 0xFF	; 255
    41f2:	26 96       	adiw	r28, 0x06	; 6
    41f4:	14 30       	cpi	r17, 0x04	; 4
    41f6:	79 f6       	brne	.-98     	; 0x4196 <_hal_led_task+0x14>
    41f8:	65 e0       	ldi	r22, 0x05	; 5
    41fa:	70 e0       	ldi	r23, 0x00	; 0
    41fc:	80 e0       	ldi	r24, 0x00	; 0
    41fe:	90 e0       	ldi	r25, 0x00	; 0
    4200:	0e 94 32 18 	call	0x3064	; 0x3064 <vTaskDelay>
    4204:	c5 cf       	rjmp	.-118    	; 0x4190 <_hal_led_task+0xe>

00004206 <led_create>:
    4206:	cf 92       	push	r12
    4208:	df 92       	push	r13
    420a:	ef 92       	push	r14
    420c:	ff 92       	push	r15
    420e:	0f 93       	push	r16
    4210:	1f 93       	push	r17
    4212:	cf 93       	push	r28
    4214:	df 93       	push	r29
    4216:	06 2f       	mov	r16, r22
    4218:	0f 2e       	mov	r0, r31
    421a:	f9 e0       	ldi	r31, 0x09	; 9
    421c:	ef 2e       	mov	r14, r31
    421e:	fb e1       	ldi	r31, 0x1B	; 27
    4220:	ff 2e       	mov	r15, r31
    4222:	f0 2d       	mov	r31, r0
    4224:	d7 01       	movw	r26, r14
    4226:	18 96       	adiw	r26, 0x08	; 8
    4228:	ed 91       	ld	r30, X+
    422a:	fc 91       	ld	r31, X
    422c:	19 97       	sbiw	r26, 0x09	; 9
    422e:	66 e0       	ldi	r22, 0x06	; 6
    4230:	87 e2       	ldi	r24, 0x27	; 39
    4232:	90 e0       	ldi	r25, 0x00	; 0
    4234:	19 95       	eicall
    4236:	c0 e9       	ldi	r28, 0x90	; 144
    4238:	d9 e1       	ldi	r29, 0x19	; 25
    423a:	0f 2e       	mov	r0, r31
    423c:	f8 e2       	ldi	r31, 0x28	; 40
    423e:	cf 2e       	mov	r12, r31
    4240:	d1 2c       	mov	r13, r1
    4242:	f0 2d       	mov	r31, r0
    4244:	d9 82       	std	Y+1, r13	; 0x01
    4246:	c8 82       	st	Y, r12
    4248:	86 e0       	ldi	r24, 0x06	; 6
    424a:	8a 83       	std	Y+2, r24	; 0x02
    424c:	1b 82       	std	Y+3, r1	; 0x03
    424e:	14 e0       	ldi	r17, 0x04	; 4
    4250:	1c 83       	std	Y+4, r17	; 0x04
    4252:	80 e0       	ldi	r24, 0x00	; 0
    4254:	3a df       	rcall	.-396    	; 0x40ca <_turn_off>
    4256:	d7 01       	movw	r26, r14
    4258:	18 96       	adiw	r26, 0x08	; 8
    425a:	ed 91       	ld	r30, X+
    425c:	fc 91       	ld	r31, X
    425e:	19 97       	sbiw	r26, 0x09	; 9
    4260:	67 e0       	ldi	r22, 0x07	; 7
    4262:	87 e2       	ldi	r24, 0x27	; 39
    4264:	90 e0       	ldi	r25, 0x00	; 0
    4266:	19 95       	eicall
    4268:	df 82       	std	Y+7, r13	; 0x07
    426a:	ce 82       	std	Y+6, r12	; 0x06
    426c:	87 e0       	ldi	r24, 0x07	; 7
    426e:	88 87       	std	Y+8, r24	; 0x08
    4270:	19 86       	std	Y+9, r1	; 0x09
    4272:	1a 87       	std	Y+10, r17	; 0x0a
    4274:	81 e0       	ldi	r24, 0x01	; 1
    4276:	29 df       	rcall	.-430    	; 0x40ca <_turn_off>
    4278:	d7 01       	movw	r26, r14
    427a:	18 96       	adiw	r26, 0x08	; 8
    427c:	ed 91       	ld	r30, X+
    427e:	fc 91       	ld	r31, X
    4280:	19 97       	sbiw	r26, 0x09	; 9
    4282:	65 e0       	ldi	r22, 0x05	; 5
    4284:	83 e3       	ldi	r24, 0x33	; 51
    4286:	90 e0       	ldi	r25, 0x00	; 0
    4288:	19 95       	eicall
    428a:	d7 01       	movw	r26, r14
    428c:	18 96       	adiw	r26, 0x08	; 8
    428e:	ed 91       	ld	r30, X+
    4290:	fc 91       	ld	r31, X
    4292:	19 97       	sbiw	r26, 0x09	; 9
    4294:	61 e0       	ldi	r22, 0x01	; 1
    4296:	84 e3       	ldi	r24, 0x34	; 52
    4298:	90 e0       	ldi	r25, 0x00	; 0
    429a:	19 95       	eicall
    429c:	84 e3       	ldi	r24, 0x34	; 52
    429e:	90 e0       	ldi	r25, 0x00	; 0
    42a0:	9d 87       	std	Y+13, r25	; 0x0d
    42a2:	8c 87       	std	Y+12, r24	; 0x0c
    42a4:	85 e0       	ldi	r24, 0x05	; 5
    42a6:	8e 87       	std	Y+14, r24	; 0x0e
    42a8:	1f 86       	std	Y+15, r1	; 0x0f
    42aa:	18 8b       	std	Y+16, r17	; 0x10
    42ac:	82 e0       	ldi	r24, 0x02	; 2
    42ae:	0d df       	rcall	.-486    	; 0x40ca <_turn_off>
    42b0:	d7 01       	movw	r26, r14
    42b2:	18 96       	adiw	r26, 0x08	; 8
    42b4:	ed 91       	ld	r30, X+
    42b6:	fc 91       	ld	r31, X
    42b8:	19 97       	sbiw	r26, 0x09	; 9
    42ba:	64 e0       	ldi	r22, 0x04	; 4
    42bc:	81 e0       	ldi	r24, 0x01	; 1
    42be:	91 e0       	ldi	r25, 0x01	; 1
    42c0:	19 95       	eicall
    42c2:	d7 01       	movw	r26, r14
    42c4:	18 96       	adiw	r26, 0x08	; 8
    42c6:	ed 91       	ld	r30, X+
    42c8:	fc 91       	ld	r31, X
    42ca:	19 97       	sbiw	r26, 0x09	; 9
    42cc:	61 e0       	ldi	r22, 0x01	; 1
    42ce:	82 e0       	ldi	r24, 0x02	; 2
    42d0:	91 e0       	ldi	r25, 0x01	; 1
    42d2:	19 95       	eicall
    42d4:	82 e0       	ldi	r24, 0x02	; 2
    42d6:	91 e0       	ldi	r25, 0x01	; 1
    42d8:	9b 8b       	std	Y+19, r25	; 0x13
    42da:	8a 8b       	std	Y+18, r24	; 0x12
    42dc:	1c 8b       	std	Y+20, r17	; 0x14
    42de:	1d 8a       	std	Y+21, r1	; 0x15
    42e0:	1e 8b       	std	Y+22, r17	; 0x16
    42e2:	83 e0       	ldi	r24, 0x03	; 3
    42e4:	f2 de       	rcall	.-540    	; 0x40ca <_turn_off>
    42e6:	e1 2c       	mov	r14, r1
    42e8:	f1 2c       	mov	r15, r1
    42ea:	20 e0       	ldi	r18, 0x00	; 0
    42ec:	30 e0       	ldi	r19, 0x00	; 0
    42ee:	40 ec       	ldi	r20, 0xC0	; 192
    42f0:	50 e0       	ldi	r21, 0x00	; 0
    42f2:	61 e9       	ldi	r22, 0x91	; 145
    42f4:	75 e0       	ldi	r23, 0x05	; 5
    42f6:	81 ec       	ldi	r24, 0xC1	; 193
    42f8:	90 e2       	ldi	r25, 0x20	; 32
    42fa:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <xTaskCreate>
    42fe:	df 91       	pop	r29
    4300:	cf 91       	pop	r28
    4302:	1f 91       	pop	r17
    4304:	0f 91       	pop	r16
    4306:	ff 90       	pop	r15
    4308:	ef 90       	pop	r14
    430a:	df 90       	pop	r13
    430c:	cf 90       	pop	r12
    430e:	08 95       	ret

00004310 <led_slow_blink>:
    4310:	0f 93       	push	r16
    4312:	1f 93       	push	r17
    4314:	cf 93       	push	r28
    4316:	df 93       	push	r29
    4318:	c8 2f       	mov	r28, r24
    431a:	d0 e0       	ldi	r29, 0x00	; 0
    431c:	8e 01       	movw	r16, r28
    431e:	00 0f       	add	r16, r16
    4320:	11 1f       	adc	r17, r17
    4322:	d8 01       	movw	r26, r16
    4324:	ac 0f       	add	r26, r28
    4326:	bd 1f       	adc	r27, r29
    4328:	aa 0f       	add	r26, r26
    432a:	bb 1f       	adc	r27, r27
    432c:	a0 57       	subi	r26, 0x70	; 112
    432e:	b6 4e       	sbci	r27, 0xE6	; 230
    4330:	e0 91 15 1b 	lds	r30, 0x1B15	; 0x801b15 <register_access+0xc>
    4334:	f0 91 16 1b 	lds	r31, 0x1B16	; 0x801b16 <register_access+0xd>
    4338:	12 96       	adiw	r26, 0x02	; 2
    433a:	6c 91       	ld	r22, X
    433c:	12 97       	sbiw	r26, 0x02	; 2
    433e:	8d 91       	ld	r24, X+
    4340:	9c 91       	ld	r25, X
    4342:	19 95       	eicall
    4344:	c0 0f       	add	r28, r16
    4346:	d1 1f       	adc	r29, r17
    4348:	cc 0f       	add	r28, r28
    434a:	dd 1f       	adc	r29, r29
    434c:	c0 57       	subi	r28, 0x70	; 112
    434e:	d6 4e       	sbci	r29, 0xE6	; 230
    4350:	81 e0       	ldi	r24, 0x01	; 1
    4352:	8c 83       	std	Y+4, r24	; 0x04
    4354:	df 91       	pop	r29
    4356:	cf 91       	pop	r28
    4358:	1f 91       	pop	r17
    435a:	0f 91       	pop	r16
    435c:	08 95       	ret

0000435e <led_fast_blink>:
    435e:	0f 93       	push	r16
    4360:	1f 93       	push	r17
    4362:	cf 93       	push	r28
    4364:	df 93       	push	r29
    4366:	c8 2f       	mov	r28, r24
    4368:	d0 e0       	ldi	r29, 0x00	; 0
    436a:	8e 01       	movw	r16, r28
    436c:	00 0f       	add	r16, r16
    436e:	11 1f       	adc	r17, r17
    4370:	d8 01       	movw	r26, r16
    4372:	ac 0f       	add	r26, r28
    4374:	bd 1f       	adc	r27, r29
    4376:	aa 0f       	add	r26, r26
    4378:	bb 1f       	adc	r27, r27
    437a:	a0 57       	subi	r26, 0x70	; 112
    437c:	b6 4e       	sbci	r27, 0xE6	; 230
    437e:	e0 91 15 1b 	lds	r30, 0x1B15	; 0x801b15 <register_access+0xc>
    4382:	f0 91 16 1b 	lds	r31, 0x1B16	; 0x801b16 <register_access+0xd>
    4386:	12 96       	adiw	r26, 0x02	; 2
    4388:	6c 91       	ld	r22, X
    438a:	12 97       	sbiw	r26, 0x02	; 2
    438c:	8d 91       	ld	r24, X+
    438e:	9c 91       	ld	r25, X
    4390:	19 95       	eicall
    4392:	c0 0f       	add	r28, r16
    4394:	d1 1f       	adc	r29, r17
    4396:	cc 0f       	add	r28, r28
    4398:	dd 1f       	adc	r29, r29
    439a:	c0 57       	subi	r28, 0x70	; 112
    439c:	d6 4e       	sbci	r29, 0xE6	; 230
    439e:	82 e0       	ldi	r24, 0x02	; 2
    43a0:	8c 83       	std	Y+4, r24	; 0x04
    43a2:	df 91       	pop	r29
    43a4:	cf 91       	pop	r28
    43a6:	1f 91       	pop	r17
    43a8:	0f 91       	pop	r16
    43aa:	08 95       	ret

000043ac <led_led_on>:
    43ac:	28 2f       	mov	r18, r24
    43ae:	30 e0       	ldi	r19, 0x00	; 0
    43b0:	f9 01       	movw	r30, r18
    43b2:	ee 0f       	add	r30, r30
    43b4:	ff 1f       	adc	r31, r31
    43b6:	e2 0f       	add	r30, r18
    43b8:	f3 1f       	adc	r31, r19
    43ba:	ee 0f       	add	r30, r30
    43bc:	ff 1f       	adc	r31, r31
    43be:	e0 57       	subi	r30, 0x70	; 112
    43c0:	f6 4e       	sbci	r31, 0xE6	; 230
    43c2:	93 e0       	ldi	r25, 0x03	; 3
    43c4:	94 83       	std	Z+4, r25	; 0x04
    43c6:	af ce       	rjmp	.-674    	; 0x4126 <_turn_on>
    43c8:	08 95       	ret

000043ca <led_led_off>:
    43ca:	28 2f       	mov	r18, r24
    43cc:	30 e0       	ldi	r19, 0x00	; 0
    43ce:	f9 01       	movw	r30, r18
    43d0:	ee 0f       	add	r30, r30
    43d2:	ff 1f       	adc	r31, r31
    43d4:	e2 0f       	add	r30, r18
    43d6:	f3 1f       	adc	r31, r19
    43d8:	ee 0f       	add	r30, r30
    43da:	ff 1f       	adc	r31, r31
    43dc:	e0 57       	subi	r30, 0x70	; 112
    43de:	f6 4e       	sbci	r31, 0xE6	; 230
    43e0:	94 e0       	ldi	r25, 0x04	; 4
    43e2:	94 83       	std	Z+4, r25	; 0x04
    43e4:	72 ce       	rjmp	.-796    	; 0x40ca <_turn_off>
    43e6:	08 95       	ret

000043e8 <led_long_puls>:
    43e8:	90 e0       	ldi	r25, 0x00	; 0
    43ea:	fc 01       	movw	r30, r24
    43ec:	ee 0f       	add	r30, r30
    43ee:	ff 1f       	adc	r31, r31
    43f0:	df 01       	movw	r26, r30
    43f2:	a8 0f       	add	r26, r24
    43f4:	b9 1f       	adc	r27, r25
    43f6:	aa 0f       	add	r26, r26
    43f8:	bb 1f       	adc	r27, r27
    43fa:	a0 57       	subi	r26, 0x70	; 112
    43fc:	b6 4e       	sbci	r27, 0xE6	; 230
    43fe:	24 e0       	ldi	r18, 0x04	; 4
    4400:	15 96       	adiw	r26, 0x05	; 5
    4402:	2c 93       	st	X, r18
    4404:	15 97       	sbiw	r26, 0x05	; 5
    4406:	fd 01       	movw	r30, r26
    4408:	14 82       	std	Z+4, r1	; 0x04
    440a:	08 95       	ret

0000440c <led_short_puls>:
    440c:	90 e0       	ldi	r25, 0x00	; 0
    440e:	fc 01       	movw	r30, r24
    4410:	ee 0f       	add	r30, r30
    4412:	ff 1f       	adc	r31, r31
    4414:	df 01       	movw	r26, r30
    4416:	a8 0f       	add	r26, r24
    4418:	b9 1f       	adc	r27, r25
    441a:	aa 0f       	add	r26, r26
    441c:	bb 1f       	adc	r27, r27
    441e:	a0 57       	subi	r26, 0x70	; 112
    4420:	b6 4e       	sbci	r27, 0xE6	; 230
    4422:	21 e0       	ldi	r18, 0x01	; 1
    4424:	15 96       	adiw	r26, 0x05	; 5
    4426:	2c 93       	st	X, r18
    4428:	15 97       	sbiw	r26, 0x05	; 5
    442a:	fd 01       	movw	r30, r26
    442c:	14 82       	std	Z+4, r1	; 0x04
    442e:	08 95       	ret

00004430 <_serial_call_back>:
    4430:	0f 93       	push	r16
    4432:	1f 93       	push	r17
    4434:	cf 93       	push	r28
    4436:	df 93       	push	r29
    4438:	1f 92       	push	r1
    443a:	1f 92       	push	r1
    443c:	cd b7       	in	r28, 0x3d	; 61
    443e:	de b7       	in	r29, 0x3e	; 62
    4440:	8c 01       	movw	r16, r24
    4442:	19 82       	std	Y+1, r1	; 0x01
    4444:	2d c0       	rjmp	.+90     	; 0x44a0 <_serial_call_back+0x70>
    4446:	e0 91 0c 1a 	lds	r30, 0x1A0C	; 0x801a0c <rec_buf_inp.2947>
    444a:	ec 32       	cpi	r30, 0x2C	; 44
    444c:	50 f4       	brcc	.+20     	; 0x4462 <_serial_call_back+0x32>
    444e:	81 e0       	ldi	r24, 0x01	; 1
    4450:	8e 0f       	add	r24, r30
    4452:	80 93 0c 1a 	sts	0x1A0C, r24	; 0x801a0c <rec_buf_inp.2947>
    4456:	f0 e0       	ldi	r31, 0x00	; 0
    4458:	e2 5c       	subi	r30, 0xC2	; 194
    445a:	f5 4e       	sbci	r31, 0xE5	; 229
    445c:	8a 81       	ldd	r24, Y+2	; 0x02
    445e:	80 83       	st	Z, r24
    4460:	02 c0       	rjmp	.+4      	; 0x4466 <_serial_call_back+0x36>
    4462:	10 92 0c 1a 	sts	0x1A0C, r1	; 0x801a0c <rec_buf_inp.2947>
    4466:	8a 81       	ldd	r24, Y+2	; 0x02
    4468:	8a 30       	cpi	r24, 0x0A	; 10
    446a:	d1 f4       	brne	.+52     	; 0x44a0 <_serial_call_back+0x70>
    446c:	40 91 0c 1a 	lds	r20, 0x1A0C	; 0x801a0c <rec_buf_inp.2947>
    4470:	50 e0       	ldi	r21, 0x00	; 0
    4472:	fa 01       	movw	r30, r20
    4474:	e4 5c       	subi	r30, 0xC4	; 196
    4476:	f5 4e       	sbci	r31, 0xE5	; 229
    4478:	10 82       	st	Z, r1
    447a:	41 50       	subi	r20, 0x01	; 1
    447c:	51 09       	sbc	r21, r1
    447e:	9e 01       	movw	r18, r28
    4480:	2f 5f       	subi	r18, 0xFF	; 255
    4482:	3f 4f       	sbci	r19, 0xFF	; 255
    4484:	6e e3       	ldi	r22, 0x3E	; 62
    4486:	7a e1       	ldi	r23, 0x1A	; 26
    4488:	80 91 0f 1a 	lds	r24, 0x1A0F	; 0x801a0f <_serial_reply_buffer_handle>
    448c:	90 91 10 1a 	lds	r25, 0x1A10	; 0x801a10 <_serial_reply_buffer_handle+0x1>
    4490:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <xStreamBufferSendFromISR>
    4494:	89 81       	ldd	r24, Y+1	; 0x01
    4496:	81 11       	cpse	r24, r1
    4498:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <vPortYield>
    449c:	10 92 0c 1a 	sts	0x1A0C, r1	; 0x801a0c <rec_buf_inp.2947>
    44a0:	be 01       	movw	r22, r28
    44a2:	6e 5f       	subi	r22, 0xFE	; 254
    44a4:	7f 4f       	sbci	r23, 0xFF	; 255
    44a6:	c8 01       	movw	r24, r16
    44a8:	8c d6       	rcall	.+3352   	; 0x51c2 <serial_get_byte>
    44aa:	88 23       	and	r24, r24
    44ac:	61 f2       	breq	.-104    	; 0x4446 <_serial_call_back+0x16>
    44ae:	0f 90       	pop	r0
    44b0:	0f 90       	pop	r0
    44b2:	df 91       	pop	r29
    44b4:	cf 91       	pop	r28
    44b6:	1f 91       	pop	r17
    44b8:	0f 91       	pop	r16
    44ba:	08 95       	ret

000044bc <_upload_message>:
    44bc:	0f 93       	push	r16
    44be:	1f 93       	push	r17
    44c0:	cf 93       	push	r28
    44c2:	df 93       	push	r29
    44c4:	8c 01       	movw	r16, r24
    44c6:	eb 01       	movw	r28, r22
    44c8:	80 91 0f 1a 	lds	r24, 0x1A0F	; 0x801a0f <_serial_reply_buffer_handle>
    44cc:	90 91 10 1a 	lds	r25, 0x1A10	; 0x801a10 <_serial_reply_buffer_handle+0x1>
    44d0:	0e 94 03 13 	call	0x2606	; 0x2606 <xStreamBufferReset>
    44d4:	b8 01       	movw	r22, r16
    44d6:	88 ea       	ldi	r24, 0xA8	; 168
    44d8:	99 e1       	ldi	r25, 0x19	; 25
    44da:	0e 94 6a 31 	call	0x62d4	; 0x62d4 <strcpy>
    44de:	20 97       	sbiw	r28, 0x00	; 0
    44e0:	79 f0       	breq	.+30     	; 0x4500 <_upload_message+0x44>
    44e2:	e8 ea       	ldi	r30, 0xA8	; 168
    44e4:	f9 e1       	ldi	r31, 0x19	; 25
    44e6:	01 90       	ld	r0, Z+
    44e8:	00 20       	and	r0, r0
    44ea:	e9 f7       	brne	.-6      	; 0x44e6 <_upload_message+0x2a>
    44ec:	31 97       	sbiw	r30, 0x01	; 1
    44ee:	80 e2       	ldi	r24, 0x20	; 32
    44f0:	90 e0       	ldi	r25, 0x00	; 0
    44f2:	91 83       	std	Z+1, r25	; 0x01
    44f4:	80 83       	st	Z, r24
    44f6:	be 01       	movw	r22, r28
    44f8:	88 ea       	ldi	r24, 0xA8	; 168
    44fa:	99 e1       	ldi	r25, 0x19	; 25
    44fc:	0e 94 5f 31 	call	0x62be	; 0x62be <strcat>
    4500:	e8 ea       	ldi	r30, 0xA8	; 168
    4502:	f9 e1       	ldi	r31, 0x19	; 25
    4504:	df 01       	movw	r26, r30
    4506:	0d 90       	ld	r0, X+
    4508:	00 20       	and	r0, r0
    450a:	e9 f7       	brne	.-6      	; 0x4506 <_upload_message+0x4a>
    450c:	11 97       	sbiw	r26, 0x01	; 1
    450e:	8d e0       	ldi	r24, 0x0D	; 13
    4510:	9a e0       	ldi	r25, 0x0A	; 10
    4512:	11 96       	adiw	r26, 0x01	; 1
    4514:	9c 93       	st	X, r25
    4516:	8e 93       	st	-X, r24
    4518:	12 96       	adiw	r26, 0x02	; 2
    451a:	1c 92       	st	X, r1
    451c:	01 90       	ld	r0, Z+
    451e:	00 20       	and	r0, r0
    4520:	e9 f7       	brne	.-6      	; 0x451c <_upload_message+0x60>
    4522:	31 97       	sbiw	r30, 0x01	; 1
    4524:	e8 5a       	subi	r30, 0xA8	; 168
    4526:	f9 41       	sbci	r31, 0x19	; 25
    4528:	ae 2f       	mov	r26, r30
    452a:	88 ea       	ldi	r24, 0xA8	; 168
    452c:	99 e1       	ldi	r25, 0x19	; 25
    452e:	ac 01       	movw	r20, r24
    4530:	6a 2f       	mov	r22, r26
    4532:	80 91 11 1a 	lds	r24, 0x1A11	; 0x801a11 <_rn2483_serial>
    4536:	90 91 12 1a 	lds	r25, 0x1A12	; 0x801a12 <_rn2483_serial+0x1>
    453a:	f3 d5       	rcall	.+3046   	; 0x5122 <serial_send_bytes>
    453c:	81 11       	cpse	r24, r1
    453e:	11 c0       	rjmp	.+34     	; 0x4562 <_upload_message+0xa6>
    4540:	08 e2       	ldi	r16, 0x28	; 40
    4542:	15 e0       	ldi	r17, 0x05	; 5
    4544:	20 e0       	ldi	r18, 0x00	; 0
    4546:	30 e0       	ldi	r19, 0x00	; 0
    4548:	4d e2       	ldi	r20, 0x2D	; 45
    454a:	50 e0       	ldi	r21, 0x00	; 0
    454c:	68 e9       	ldi	r22, 0x98	; 152
    454e:	7a e1       	ldi	r23, 0x1A	; 26
    4550:	80 91 0f 1a 	lds	r24, 0x1A0F	; 0x801a0f <_serial_reply_buffer_handle>
    4554:	90 91 10 1a 	lds	r25, 0x1A10	; 0x801a10 <_serial_reply_buffer_handle+0x1>
    4558:	0e 94 2f 14 	call	0x285e	; 0x285e <xStreamBufferReceive>
    455c:	88 e9       	ldi	r24, 0x98	; 152
    455e:	9a e1       	ldi	r25, 0x1A	; 26
    4560:	02 c0       	rjmp	.+4      	; 0x4566 <_upload_message+0xaa>
    4562:	80 e0       	ldi	r24, 0x00	; 0
    4564:	90 e0       	ldi	r25, 0x00	; 0
    4566:	df 91       	pop	r29
    4568:	cf 91       	pop	r28
    456a:	1f 91       	pop	r17
    456c:	0f 91       	pop	r16
    456e:	08 95       	ret

00004570 <_reply2return_code>:
    4570:	2f 92       	push	r2
    4572:	3f 92       	push	r3
    4574:	4f 92       	push	r4
    4576:	5f 92       	push	r5
    4578:	6f 92       	push	r6
    457a:	7f 92       	push	r7
    457c:	8f 92       	push	r8
    457e:	9f 92       	push	r9
    4580:	af 92       	push	r10
    4582:	bf 92       	push	r11
    4584:	cf 92       	push	r12
    4586:	df 92       	push	r13
    4588:	ef 92       	push	r14
    458a:	ff 92       	push	r15
    458c:	0f 93       	push	r16
    458e:	1f 93       	push	r17
    4590:	cf 93       	push	r28
    4592:	df 93       	push	r29
    4594:	5c 01       	movw	r10, r24
    4596:	fc 01       	movw	r30, r24
    4598:	01 90       	ld	r0, Z+
    459a:	00 20       	and	r0, r0
    459c:	e9 f7       	brne	.-6      	; 0x4598 <_reply2return_code+0x28>
    459e:	31 97       	sbiw	r30, 0x01	; 1
    45a0:	6f 01       	movw	r12, r30
    45a2:	c8 1a       	sub	r12, r24
    45a4:	d9 0a       	sbc	r13, r25
    45a6:	5c 2c       	mov	r5, r12
    45a8:	0f 2e       	mov	r0, r31
    45aa:	f2 e3       	ldi	r31, 0x32	; 50
    45ac:	8f 2e       	mov	r8, r31
    45ae:	f8 e0       	ldi	r31, 0x08	; 8
    45b0:	9f 2e       	mov	r9, r31
    45b2:	f0 2d       	mov	r31, r0
    45b4:	e1 2c       	mov	r14, r1
    45b6:	f1 2c       	mov	r15, r1
    45b8:	4c 2c       	mov	r4, r12
    45ba:	37 01       	movw	r6, r14
    45bc:	f4 01       	movw	r30, r8
    45be:	01 81       	ldd	r16, Z+1	; 0x01
    45c0:	12 81       	ldd	r17, Z+2	; 0x02
    45c2:	e8 01       	movw	r28, r16
    45c4:	09 90       	ld	r0, Y+
    45c6:	00 20       	and	r0, r0
    45c8:	e9 f7       	brne	.-6      	; 0x45c4 <_reply2return_code+0x54>
    45ca:	21 97       	sbiw	r28, 0x01	; 1
    45cc:	c0 1b       	sub	r28, r16
    45ce:	d1 0b       	sbc	r29, r17
    45d0:	3c 2e       	mov	r3, r28
    45d2:	f9 e0       	ldi	r31, 0x09	; 9
    45d4:	cf 16       	cp	r12, r31
    45d6:	d1 04       	cpc	r13, r1
    45d8:	58 f0       	brcs	.+22     	; 0x45f0 <_reply2return_code+0x80>
    45da:	f4 01       	movw	r30, r8
    45dc:	20 80       	ld	r2, Z
    45de:	fe e0       	ldi	r31, 0x0E	; 14
    45e0:	2f 12       	cpse	r2, r31
    45e2:	06 c0       	rjmp	.+12     	; 0x45f0 <_reply2return_code+0x80>
    45e4:	b8 01       	movw	r22, r16
    45e6:	c5 01       	movw	r24, r10
    45e8:	0e 94 3a 31 	call	0x6274	; 0x6274 <strcasestr>
    45ec:	89 2b       	or	r24, r25
    45ee:	09 f5       	brne	.+66     	; 0x4632 <_reply2return_code+0xc2>
    45f0:	44 2d       	mov	r20, r4
    45f2:	35 14       	cp	r3, r5
    45f4:	08 f4       	brcc	.+2      	; 0x45f8 <_reply2return_code+0x88>
    45f6:	4c 2f       	mov	r20, r28
    45f8:	50 e0       	ldi	r21, 0x00	; 0
    45fa:	b8 01       	movw	r22, r16
    45fc:	c5 01       	movw	r24, r10
    45fe:	0e 94 71 31 	call	0x62e2	; 0x62e2 <strncasecmp>
    4602:	89 2b       	or	r24, r25
    4604:	49 f4       	brne	.+18     	; 0x4618 <_reply2return_code+0xa8>
    4606:	f3 01       	movw	r30, r6
    4608:	ee 0f       	add	r30, r30
    460a:	ff 1f       	adc	r31, r31
    460c:	e6 0d       	add	r30, r6
    460e:	f7 1d       	adc	r31, r7
    4610:	ee 5c       	subi	r30, 0xCE	; 206
    4612:	f7 4f       	sbci	r31, 0xF7	; 247
    4614:	20 80       	ld	r2, Z
    4616:	0d c0       	rjmp	.+26     	; 0x4632 <_reply2return_code+0xc2>
    4618:	8f ef       	ldi	r24, 0xFF	; 255
    461a:	e8 1a       	sub	r14, r24
    461c:	f8 0a       	sbc	r15, r24
    461e:	e3 e0       	ldi	r30, 0x03	; 3
    4620:	8e 0e       	add	r8, r30
    4622:	91 1c       	adc	r9, r1
    4624:	f1 e1       	ldi	r31, 0x11	; 17
    4626:	ef 16       	cp	r14, r31
    4628:	f1 04       	cpc	r15, r1
    462a:	39 f6       	brne	.-114    	; 0x45ba <_reply2return_code+0x4a>
    462c:	68 94       	set
    462e:	22 24       	eor	r2, r2
    4630:	24 f8       	bld	r2, 4
    4632:	82 2d       	mov	r24, r2
    4634:	df 91       	pop	r29
    4636:	cf 91       	pop	r28
    4638:	1f 91       	pop	r17
    463a:	0f 91       	pop	r16
    463c:	ff 90       	pop	r15
    463e:	ef 90       	pop	r14
    4640:	df 90       	pop	r13
    4642:	cf 90       	pop	r12
    4644:	bf 90       	pop	r11
    4646:	af 90       	pop	r10
    4648:	9f 90       	pop	r9
    464a:	8f 90       	pop	r8
    464c:	7f 90       	pop	r7
    464e:	6f 90       	pop	r6
    4650:	5f 90       	pop	r5
    4652:	4f 90       	pop	r4
    4654:	3f 90       	pop	r3
    4656:	2f 90       	pop	r2
    4658:	08 95       	ret

0000465a <_upload_message_rc>:
    465a:	30 df       	rcall	.-416    	; 0x44bc <_upload_message>
    465c:	89 cf       	rjmp	.-238    	; 0x4570 <_reply2return_code>
    465e:	08 95       	ret

00004660 <lora_driver_flush_buffers>:
    4660:	80 91 0f 1a 	lds	r24, 0x1A0F	; 0x801a0f <_serial_reply_buffer_handle>
    4664:	90 91 10 1a 	lds	r25, 0x1A10	; 0x801a10 <_serial_reply_buffer_handle+0x1>
    4668:	0c 94 03 13 	jmp	0x2606	; 0x2606 <xStreamBufferReset>
    466c:	08 95       	ret

0000466e <lora_driver_create>:
    466e:	8f 92       	push	r8
    4670:	9f 92       	push	r9
    4672:	af 92       	push	r10
    4674:	cf 92       	push	r12
    4676:	ef 92       	push	r14
    4678:	0f 93       	push	r16
    467a:	1f 93       	push	r17
    467c:	cf 93       	push	r28
    467e:	c8 2f       	mov	r28, r24
    4680:	8b 01       	movw	r16, r22
    4682:	41 e0       	ldi	r20, 0x01	; 1
    4684:	60 e0       	ldi	r22, 0x00	; 0
    4686:	70 e0       	ldi	r23, 0x00	; 0
    4688:	88 ec       	ldi	r24, 0xC8	; 200
    468a:	90 e0       	ldi	r25, 0x00	; 0
    468c:	0e 94 d7 12 	call	0x25ae	; 0x25ae <xStreamBufferGenericCreate>
    4690:	90 93 10 1a 	sts	0x1A10, r25	; 0x801a10 <_serial_reply_buffer_handle+0x1>
    4694:	80 93 0f 1a 	sts	0x1A0F, r24	; 0x801a0f <_serial_reply_buffer_handle>
    4698:	10 93 0e 1a 	sts	0x1A0E, r17	; 0x801a0e <_downlinkMessageBuffer+0x1>
    469c:	00 93 0d 1a 	sts	0x1A0D, r16	; 0x801a0d <_downlinkMessageBuffer>
    46a0:	0f 2e       	mov	r0, r31
    46a2:	f8 e1       	ldi	r31, 0x18	; 24
    46a4:	8f 2e       	mov	r8, r31
    46a6:	f2 e2       	ldi	r31, 0x22	; 34
    46a8:	9f 2e       	mov	r9, r31
    46aa:	f0 2d       	mov	r31, r0
    46ac:	68 94       	set
    46ae:	aa 24       	eor	r10, r10
    46b0:	a6 f8       	bld	r10, 6
    46b2:	68 94       	set
    46b4:	cc 24       	eor	r12, r12
    46b6:	c6 f8       	bld	r12, 6
    46b8:	e1 2c       	mov	r14, r1
    46ba:	00 e0       	ldi	r16, 0x00	; 0
    46bc:	23 e0       	ldi	r18, 0x03	; 3
    46be:	40 e0       	ldi	r20, 0x00	; 0
    46c0:	51 ee       	ldi	r21, 0xE1	; 225
    46c2:	60 e0       	ldi	r22, 0x00	; 0
    46c4:	70 e0       	ldi	r23, 0x00	; 0
    46c6:	8c 2f       	mov	r24, r28
    46c8:	71 d4       	rcall	.+2274   	; 0x4fac <serial_new_instance>
    46ca:	90 93 12 1a 	sts	0x1A12, r25	; 0x801a12 <_rn2483_serial+0x1>
    46ce:	80 93 11 1a 	sts	0x1A11, r24	; 0x801a11 <_rn2483_serial>
    46d2:	e0 91 11 1b 	lds	r30, 0x1B11	; 0x801b11 <register_access+0x8>
    46d6:	f0 91 12 1b 	lds	r31, 0x1B12	; 0x801b12 <register_access+0x9>
    46da:	64 e0       	ldi	r22, 0x04	; 4
    46dc:	87 e0       	ldi	r24, 0x07	; 7
    46de:	91 e0       	ldi	r25, 0x01	; 1
    46e0:	19 95       	eicall
    46e2:	cf 91       	pop	r28
    46e4:	1f 91       	pop	r17
    46e6:	0f 91       	pop	r16
    46e8:	ef 90       	pop	r14
    46ea:	cf 90       	pop	r12
    46ec:	af 90       	pop	r10
    46ee:	9f 90       	pop	r9
    46f0:	8f 90       	pop	r8
    46f2:	08 95       	ret

000046f4 <lora_driver_reset_rn2483>:
    46f4:	88 23       	and	r24, r24
    46f6:	49 f0       	breq	.+18     	; 0x470a <lora_driver_reset_rn2483+0x16>
    46f8:	e0 91 1b 1b 	lds	r30, 0x1B1B	; 0x801b1b <register_access+0x12>
    46fc:	f0 91 1c 1b 	lds	r31, 0x1B1C	; 0x801b1c <register_access+0x13>
    4700:	64 e0       	ldi	r22, 0x04	; 4
    4702:	88 e0       	ldi	r24, 0x08	; 8
    4704:	91 e0       	ldi	r25, 0x01	; 1
    4706:	19 95       	eicall
    4708:	08 95       	ret
    470a:	e0 91 11 1b 	lds	r30, 0x1B11	; 0x801b11 <register_access+0x8>
    470e:	f0 91 12 1b 	lds	r31, 0x1B12	; 0x801b12 <register_access+0x9>
    4712:	64 e0       	ldi	r22, 0x04	; 4
    4714:	88 e0       	ldi	r24, 0x08	; 8
    4716:	91 e0       	ldi	r25, 0x01	; 1
    4718:	19 95       	eicall
    471a:	08 95       	ret

0000471c <lora_driver_rn2483_factory_reset>:
    471c:	60 e0       	ldi	r22, 0x00	; 0
    471e:	70 e0       	ldi	r23, 0x00	; 0
    4720:	88 eb       	ldi	r24, 0xB8	; 184
    4722:	95 e0       	ldi	r25, 0x05	; 5
    4724:	cb de       	rcall	.-618    	; 0x44bc <_upload_message>
    4726:	e8 e9       	ldi	r30, 0x98	; 152
    4728:	fa e1       	ldi	r31, 0x1A	; 26
    472a:	01 90       	ld	r0, Z+
    472c:	00 20       	and	r0, r0
    472e:	e9 f7       	brne	.-6      	; 0x472a <lora_driver_rn2483_factory_reset+0xe>
    4730:	31 97       	sbiw	r30, 0x01	; 1
    4732:	e8 59       	subi	r30, 0x98	; 152
    4734:	fa 41       	sbci	r31, 0x1A	; 26
    4736:	81 e0       	ldi	r24, 0x01	; 1
    4738:	75 97       	sbiw	r30, 0x15	; 21
    473a:	08 f0       	brcs	.+2      	; 0x473e <lora_driver_rn2483_factory_reset+0x22>
    473c:	80 e0       	ldi	r24, 0x00	; 0
    473e:	08 95       	ret

00004740 <lora_driver_get_rn2483_hweui>:
    4740:	cf 93       	push	r28
    4742:	df 93       	push	r29
    4744:	ec 01       	movw	r28, r24
    4746:	60 e0       	ldi	r22, 0x00	; 0
    4748:	70 e0       	ldi	r23, 0x00	; 0
    474a:	89 ec       	ldi	r24, 0xC9	; 201
    474c:	95 e0       	ldi	r25, 0x05	; 5
    474e:	b6 de       	rcall	.-660    	; 0x44bc <_upload_message>
    4750:	e8 e9       	ldi	r30, 0x98	; 152
    4752:	fa e1       	ldi	r31, 0x1A	; 26
    4754:	01 90       	ld	r0, Z+
    4756:	00 20       	and	r0, r0
    4758:	e9 f7       	brne	.-6      	; 0x4754 <lora_driver_get_rn2483_hweui+0x14>
    475a:	e9 5a       	subi	r30, 0xA9	; 169
    475c:	fa 41       	sbci	r31, 0x1A	; 26
    475e:	39 f4       	brne	.+14     	; 0x476e <lora_driver_get_rn2483_hweui+0x2e>
    4760:	68 e9       	ldi	r22, 0x98	; 152
    4762:	7a e1       	ldi	r23, 0x1A	; 26
    4764:	ce 01       	movw	r24, r28
    4766:	0e 94 6a 31 	call	0x62d4	; 0x62d4 <strcpy>
    476a:	80 e0       	ldi	r24, 0x00	; 0
    476c:	02 c0       	rjmp	.+4      	; 0x4772 <lora_driver_get_rn2483_hweui+0x32>
    476e:	18 82       	st	Y, r1
    4770:	81 e0       	ldi	r24, 0x01	; 1
    4772:	df 91       	pop	r29
    4774:	cf 91       	pop	r28
    4776:	08 95       	ret

00004778 <lora_driver_set_device_identifier>:
    4778:	fc 01       	movw	r30, r24
    477a:	01 90       	ld	r0, Z+
    477c:	00 20       	and	r0, r0
    477e:	e9 f7       	brne	.-6      	; 0x477a <lora_driver_set_device_identifier+0x2>
    4780:	9f 01       	movw	r18, r30
    4782:	21 51       	subi	r18, 0x11	; 17
    4784:	31 09       	sbc	r19, r1
    4786:	28 17       	cp	r18, r24
    4788:	39 07       	cpc	r19, r25
    478a:	29 f4       	brne	.+10     	; 0x4796 <lora_driver_set_device_identifier+0x1e>
    478c:	bc 01       	movw	r22, r24
    478e:	87 ef       	ldi	r24, 0xF7	; 247
    4790:	95 e0       	ldi	r25, 0x05	; 5
    4792:	63 cf       	rjmp	.-314    	; 0x465a <_upload_message_rc>
    4794:	08 95       	ret
    4796:	89 e0       	ldi	r24, 0x09	; 9
    4798:	08 95       	ret

0000479a <lora_driver_set_application_identifier>:
    479a:	fc 01       	movw	r30, r24
    479c:	01 90       	ld	r0, Z+
    479e:	00 20       	and	r0, r0
    47a0:	e9 f7       	brne	.-6      	; 0x479c <lora_driver_set_application_identifier+0x2>
    47a2:	9f 01       	movw	r18, r30
    47a4:	21 51       	subi	r18, 0x11	; 17
    47a6:	31 09       	sbc	r19, r1
    47a8:	28 17       	cp	r18, r24
    47aa:	39 07       	cpc	r19, r25
    47ac:	29 f4       	brne	.+10     	; 0x47b8 <lora_driver_set_application_identifier+0x1e>
    47ae:	bc 01       	movw	r22, r24
    47b0:	86 e0       	ldi	r24, 0x06	; 6
    47b2:	96 e0       	ldi	r25, 0x06	; 6
    47b4:	52 cf       	rjmp	.-348    	; 0x465a <_upload_message_rc>
    47b6:	08 95       	ret
    47b8:	89 e0       	ldi	r24, 0x09	; 9
    47ba:	08 95       	ret

000047bc <lora_driver_set_application_key>:
    47bc:	fc 01       	movw	r30, r24
    47be:	01 90       	ld	r0, Z+
    47c0:	00 20       	and	r0, r0
    47c2:	e9 f7       	brne	.-6      	; 0x47be <lora_driver_set_application_key+0x2>
    47c4:	9f 01       	movw	r18, r30
    47c6:	21 52       	subi	r18, 0x21	; 33
    47c8:	31 09       	sbc	r19, r1
    47ca:	28 17       	cp	r18, r24
    47cc:	39 07       	cpc	r19, r25
    47ce:	29 f4       	brne	.+10     	; 0x47da <lora_driver_set_application_key+0x1e>
    47d0:	bc 01       	movw	r22, r24
    47d2:	85 e1       	ldi	r24, 0x15	; 21
    47d4:	96 e0       	ldi	r25, 0x06	; 6
    47d6:	41 cf       	rjmp	.-382    	; 0x465a <_upload_message_rc>
    47d8:	08 95       	ret
    47da:	89 e0       	ldi	r24, 0x09	; 9
    47dc:	08 95       	ret

000047de <lora_driver_save_mac>:
    47de:	60 e0       	ldi	r22, 0x00	; 0
    47e0:	70 e0       	ldi	r23, 0x00	; 0
    47e2:	84 e5       	ldi	r24, 0x54	; 84
    47e4:	96 e0       	ldi	r25, 0x06	; 6
    47e6:	39 cf       	rjmp	.-398    	; 0x465a <_upload_message_rc>
    47e8:	08 95       	ret

000047ea <lora_driver_join>:
    47ea:	0f 93       	push	r16
    47ec:	1f 93       	push	r17
    47ee:	e8 2f       	mov	r30, r24
    47f0:	f0 e0       	ldi	r31, 0x00	; 0
    47f2:	ee 0f       	add	r30, r30
    47f4:	ff 1f       	adc	r31, r31
    47f6:	e2 5d       	subi	r30, 0xD2	; 210
    47f8:	f7 4f       	sbci	r31, 0xF7	; 247
    47fa:	60 81       	ld	r22, Z
    47fc:	71 81       	ldd	r23, Z+1	; 0x01
    47fe:	8d e5       	ldi	r24, 0x5D	; 93
    4800:	96 e0       	ldi	r25, 0x06	; 6
    4802:	2b df       	rcall	.-426    	; 0x465a <_upload_message_rc>
    4804:	81 11       	cpse	r24, r1
    4806:	14 c0       	rjmp	.+40     	; 0x4830 <lora_driver_join+0x46>
    4808:	08 e2       	ldi	r16, 0x28	; 40
    480a:	15 e0       	ldi	r17, 0x05	; 5
    480c:	20 e0       	ldi	r18, 0x00	; 0
    480e:	30 e0       	ldi	r19, 0x00	; 0
    4810:	4d e2       	ldi	r20, 0x2D	; 45
    4812:	50 e0       	ldi	r21, 0x00	; 0
    4814:	68 e9       	ldi	r22, 0x98	; 152
    4816:	7a e1       	ldi	r23, 0x1A	; 26
    4818:	80 91 0f 1a 	lds	r24, 0x1A0F	; 0x801a0f <_serial_reply_buffer_handle>
    481c:	90 91 10 1a 	lds	r25, 0x1A10	; 0x801a10 <_serial_reply_buffer_handle+0x1>
    4820:	0e 94 2f 14 	call	0x285e	; 0x285e <xStreamBufferReceive>
    4824:	88 23       	and	r24, r24
    4826:	21 f0       	breq	.+8      	; 0x4830 <lora_driver_join+0x46>
    4828:	88 e9       	ldi	r24, 0x98	; 152
    482a:	9a e1       	ldi	r25, 0x1A	; 26
    482c:	a1 de       	rcall	.-702    	; 0x4570 <_reply2return_code>
    482e:	03 c0       	rjmp	.+6      	; 0x4836 <lora_driver_join+0x4c>
    4830:	88 e9       	ldi	r24, 0x98	; 152
    4832:	9a e1       	ldi	r25, 0x1A	; 26
    4834:	9d de       	rcall	.-710    	; 0x4570 <_reply2return_code>
    4836:	1f 91       	pop	r17
    4838:	0f 91       	pop	r16
    483a:	08 95       	ret

0000483c <lora_driver_sent_upload_message>:
    483c:	0f 93       	push	r16
    483e:	1f 93       	push	r17
    4840:	cf 93       	push	r28
    4842:	df 93       	push	r29
    4844:	1f 92       	push	r1
    4846:	cd b7       	in	r28, 0x3d	; 61
    4848:	de b7       	in	r29, 0x3e	; 62
    484a:	db 01       	movw	r26, r22
    484c:	11 96       	adiw	r26, 0x01	; 1
    484e:	9c 91       	ld	r25, X
    4850:	11 97       	sbiw	r26, 0x01	; 1
    4852:	95 31       	cpi	r25, 0x15	; 21
    4854:	08 f0       	brcs	.+2      	; 0x4858 <lora_driver_sent_upload_message+0x1c>
    4856:	b4 c0       	rjmp	.+360    	; 0x49c0 <lora_driver_sent_upload_message+0x184>
    4858:	99 23       	and	r25, r25
    485a:	81 f1       	breq	.+96     	; 0x48bc <lora_driver_sent_upload_message+0x80>
    485c:	60 e0       	ldi	r22, 0x00	; 0
    485e:	70 e0       	ldi	r23, 0x00	; 0
    4860:	27 2f       	mov	r18, r23
    4862:	30 e0       	ldi	r19, 0x00	; 0
    4864:	46 2f       	mov	r20, r22
    4866:	50 e0       	ldi	r21, 0x00	; 0
    4868:	fd 01       	movw	r30, r26
    486a:	e4 0f       	add	r30, r20
    486c:	f5 1f       	adc	r31, r21
    486e:	92 81       	ldd	r25, Z+2	; 0x02
    4870:	92 95       	swap	r25
    4872:	9f 70       	andi	r25, 0x0F	; 15
    4874:	9a 30       	cpi	r25, 0x0A	; 10
    4876:	10 f0       	brcs	.+4      	; 0x487c <lora_driver_sent_upload_message+0x40>
    4878:	99 5c       	subi	r25, 0xC9	; 201
    487a:	01 c0       	rjmp	.+2      	; 0x487e <lora_driver_sent_upload_message+0x42>
    487c:	90 5d       	subi	r25, 0xD0	; 208
    487e:	f9 01       	movw	r30, r18
    4880:	e7 5d       	subi	r30, 0xD7	; 215
    4882:	f5 4e       	sbci	r31, 0xE5	; 229
    4884:	90 83       	st	Z, r25
    4886:	2f 5f       	subi	r18, 0xFF	; 255
    4888:	3f 4f       	sbci	r19, 0xFF	; 255
    488a:	fd 01       	movw	r30, r26
    488c:	e4 0f       	add	r30, r20
    488e:	f5 1f       	adc	r31, r21
    4890:	92 81       	ldd	r25, Z+2	; 0x02
    4892:	9f 70       	andi	r25, 0x0F	; 15
    4894:	49 2f       	mov	r20, r25
    4896:	50 e0       	ldi	r21, 0x00	; 0
    4898:	4a 30       	cpi	r20, 0x0A	; 10
    489a:	51 05       	cpc	r21, r1
    489c:	14 f0       	brlt	.+4      	; 0x48a2 <lora_driver_sent_upload_message+0x66>
    489e:	99 5c       	subi	r25, 0xC9	; 201
    48a0:	01 c0       	rjmp	.+2      	; 0x48a4 <lora_driver_sent_upload_message+0x68>
    48a2:	90 5d       	subi	r25, 0xD0	; 208
    48a4:	f9 01       	movw	r30, r18
    48a6:	e7 5d       	subi	r30, 0xD7	; 215
    48a8:	f5 4e       	sbci	r31, 0xE5	; 229
    48aa:	90 83       	st	Z, r25
    48ac:	7e 5f       	subi	r23, 0xFE	; 254
    48ae:	6f 5f       	subi	r22, 0xFF	; 255
    48b0:	11 96       	adiw	r26, 0x01	; 1
    48b2:	9c 91       	ld	r25, X
    48b4:	11 97       	sbiw	r26, 0x01	; 1
    48b6:	69 17       	cp	r22, r25
    48b8:	98 f2       	brcs	.-90     	; 0x4860 <lora_driver_sent_upload_message+0x24>
    48ba:	01 c0       	rjmp	.+2      	; 0x48be <lora_driver_sent_upload_message+0x82>
    48bc:	70 e0       	ldi	r23, 0x00	; 0
    48be:	e7 2f       	mov	r30, r23
    48c0:	f0 e0       	ldi	r31, 0x00	; 0
    48c2:	e7 5d       	subi	r30, 0xD7	; 215
    48c4:	f5 4e       	sbci	r31, 0xE5	; 229
    48c6:	10 82       	st	Z, r1
    48c8:	4c 91       	ld	r20, X
    48ca:	81 11       	cpse	r24, r1
    48cc:	03 c0       	rjmp	.+6      	; 0x48d4 <lora_driver_sent_upload_message+0x98>
    48ce:	86 e6       	ldi	r24, 0x66	; 102
    48d0:	96 e0       	ldi	r25, 0x06	; 6
    48d2:	02 c0       	rjmp	.+4      	; 0x48d8 <lora_driver_sent_upload_message+0x9c>
    48d4:	88 e6       	ldi	r24, 0x68	; 104
    48d6:	96 e0       	ldi	r25, 0x06	; 6
    48d8:	29 e2       	ldi	r18, 0x29	; 41
    48da:	3a e1       	ldi	r19, 0x1A	; 26
    48dc:	3f 93       	push	r19
    48de:	2f 93       	push	r18
    48e0:	1f 92       	push	r1
    48e2:	4f 93       	push	r20
    48e4:	9f 93       	push	r25
    48e6:	8f 93       	push	r24
    48e8:	8c e6       	ldi	r24, 0x6C	; 108
    48ea:	96 e0       	ldi	r25, 0x06	; 6
    48ec:	9f 93       	push	r25
    48ee:	8f 93       	push	r24
    48f0:	8b e6       	ldi	r24, 0x6B	; 107
    48f2:	9a e1       	ldi	r25, 0x1A	; 26
    48f4:	9f 93       	push	r25
    48f6:	8f 93       	push	r24
    48f8:	0e 94 cc 31 	call	0x6398	; 0x6398 <sprintf>
    48fc:	60 e0       	ldi	r22, 0x00	; 0
    48fe:	70 e0       	ldi	r23, 0x00	; 0
    4900:	8b e6       	ldi	r24, 0x6B	; 107
    4902:	9a e1       	ldi	r25, 0x1A	; 26
    4904:	aa de       	rcall	.-684    	; 0x465a <_upload_message_rc>
    4906:	0f b6       	in	r0, 0x3f	; 63
    4908:	f8 94       	cli
    490a:	de bf       	out	0x3e, r29	; 62
    490c:	0f be       	out	0x3f, r0	; 63
    490e:	cd bf       	out	0x3d, r28	; 61
    4910:	81 11       	cpse	r24, r1
    4912:	59 c0       	rjmp	.+178    	; 0x49c6 <lora_driver_sent_upload_message+0x18a>
    4914:	08 e2       	ldi	r16, 0x28	; 40
    4916:	15 e0       	ldi	r17, 0x05	; 5
    4918:	20 e0       	ldi	r18, 0x00	; 0
    491a:	30 e0       	ldi	r19, 0x00	; 0
    491c:	4d e2       	ldi	r20, 0x2D	; 45
    491e:	50 e0       	ldi	r21, 0x00	; 0
    4920:	68 e9       	ldi	r22, 0x98	; 152
    4922:	7a e1       	ldi	r23, 0x1A	; 26
    4924:	80 91 0f 1a 	lds	r24, 0x1A0F	; 0x801a0f <_serial_reply_buffer_handle>
    4928:	90 91 10 1a 	lds	r25, 0x1A10	; 0x801a10 <_serial_reply_buffer_handle+0x1>
    492c:	0e 94 2f 14 	call	0x285e	; 0x285e <xStreamBufferReceive>
    4930:	88 23       	and	r24, r24
    4932:	09 f4       	brne	.+2      	; 0x4936 <lora_driver_sent_upload_message+0xfa>
    4934:	47 c0       	rjmp	.+142    	; 0x49c4 <lora_driver_sent_upload_message+0x188>
    4936:	88 e9       	ldi	r24, 0x98	; 152
    4938:	9a e1       	ldi	r25, 0x1A	; 26
    493a:	1a de       	rcall	.-972    	; 0x4570 <_reply2return_code>
    493c:	8e 30       	cpi	r24, 0x0E	; 14
    493e:	09 f0       	breq	.+2      	; 0x4942 <lora_driver_sent_upload_message+0x106>
    4940:	42 c0       	rjmp	.+132    	; 0x49c6 <lora_driver_sent_upload_message+0x18a>
    4942:	87 e0       	ldi	r24, 0x07	; 7
    4944:	89 83       	std	Y+1, r24	; 0x01
    4946:	80 91 0d 1a 	lds	r24, 0x1A0D	; 0x801a0d <_downlinkMessageBuffer>
    494a:	90 91 0e 1a 	lds	r25, 0x1A0E	; 0x801a0e <_downlinkMessageBuffer+0x1>
    494e:	89 2b       	or	r24, r25
    4950:	a9 f1       	breq	.+106    	; 0x49bc <lora_driver_sent_upload_message+0x180>
    4952:	be 01       	movw	r22, r28
    4954:	6f 5f       	subi	r22, 0xFF	; 255
    4956:	7f 4f       	sbci	r23, 0xFF	; 255
    4958:	88 e9       	ldi	r24, 0x98	; 152
    495a:	9a e1       	ldi	r25, 0x1A	; 26
    495c:	68 d1       	rcall	.+720    	; 0x4c2e <decode_port_no>
    495e:	80 93 13 1a 	sts	0x1A13, r24	; 0x801a13 <_downlink_payload>
    4962:	e9 81       	ldd	r30, Y+1	; 0x01
    4964:	f0 e0       	ldi	r31, 0x00	; 0
    4966:	e8 56       	subi	r30, 0x68	; 104
    4968:	f5 4e       	sbci	r31, 0xE5	; 229
    496a:	df 01       	movw	r26, r30
    496c:	0d 90       	ld	r0, X+
    496e:	00 20       	and	r0, r0
    4970:	e9 f7       	brne	.-6      	; 0x496c <lora_driver_sent_upload_message+0x130>
    4972:	11 97       	sbiw	r26, 0x01	; 1
    4974:	ae 1b       	sub	r26, r30
    4976:	bf 0b       	sbc	r27, r31
    4978:	aa 23       	and	r26, r26
    497a:	91 f0       	breq	.+36     	; 0x49a0 <lora_driver_sent_upload_message+0x164>
    497c:	bb 27       	eor	r27, r27
    497e:	cd 01       	movw	r24, r26
    4980:	01 97       	sbiw	r24, 0x01	; 1
    4982:	9c 01       	movw	r18, r24
    4984:	12 f4       	brpl	.+4      	; 0x498a <lora_driver_sent_upload_message+0x14e>
    4986:	2f 5f       	subi	r18, 0xFF	; 255
    4988:	3f 4f       	sbci	r19, 0xFF	; 255
    498a:	35 95       	asr	r19
    498c:	27 95       	ror	r18
    498e:	20 93 14 1a 	sts	0x1A14, r18	; 0x801a14 <_downlink_payload+0x1>
    4992:	af 01       	movw	r20, r30
    4994:	4f 5f       	subi	r20, 0xFF	; 255
    4996:	5f 4f       	sbci	r21, 0xFF	; 255
    4998:	64 e1       	ldi	r22, 0x14	; 20
    499a:	85 e1       	ldi	r24, 0x15	; 21
    499c:	9a e1       	ldi	r25, 0x1A	; 26
    499e:	73 d1       	rcall	.+742    	; 0x4c86 <decode_hexadecimal_string_bytes>
    49a0:	01 e0       	ldi	r16, 0x01	; 1
    49a2:	10 e0       	ldi	r17, 0x00	; 0
    49a4:	20 e0       	ldi	r18, 0x00	; 0
    49a6:	30 e0       	ldi	r19, 0x00	; 0
    49a8:	46 e1       	ldi	r20, 0x16	; 22
    49aa:	50 e0       	ldi	r21, 0x00	; 0
    49ac:	63 e1       	ldi	r22, 0x13	; 19
    49ae:	7a e1       	ldi	r23, 0x1A	; 26
    49b0:	80 91 0d 1a 	lds	r24, 0x1A0D	; 0x801a0d <_downlinkMessageBuffer>
    49b4:	90 91 0e 1a 	lds	r25, 0x1A0E	; 0x801a0e <_downlinkMessageBuffer+0x1>
    49b8:	0e 94 42 13 	call	0x2684	; 0x2684 <xStreamBufferSend>
    49bc:	8e e0       	ldi	r24, 0x0E	; 14
    49be:	03 c0       	rjmp	.+6      	; 0x49c6 <lora_driver_sent_upload_message+0x18a>
    49c0:	84 e1       	ldi	r24, 0x14	; 20
    49c2:	01 c0       	rjmp	.+2      	; 0x49c6 <lora_driver_sent_upload_message+0x18a>
    49c4:	80 e0       	ldi	r24, 0x00	; 0
    49c6:	0f 90       	pop	r0
    49c8:	df 91       	pop	r29
    49ca:	cf 91       	pop	r28
    49cc:	1f 91       	pop	r17
    49ce:	0f 91       	pop	r16
    49d0:	08 95       	ret

000049d2 <lora_driver_set_adaptive_data_rate>:
    49d2:	81 30       	cpi	r24, 0x01	; 1
    49d4:	19 f0       	breq	.+6      	; 0x49dc <lora_driver_set_adaptive_data_rate+0xa>
    49d6:	6c e7       	ldi	r22, 0x7C	; 124
    49d8:	76 e0       	ldi	r23, 0x06	; 6
    49da:	02 c0       	rjmp	.+4      	; 0x49e0 <lora_driver_set_adaptive_data_rate+0xe>
    49dc:	65 e5       	ldi	r22, 0x55	; 85
    49de:	77 e0       	ldi	r23, 0x07	; 7
    49e0:	80 e8       	ldi	r24, 0x80	; 128
    49e2:	96 e0       	ldi	r25, 0x06	; 6
    49e4:	3a ce       	rjmp	.-908    	; 0x465a <_upload_message_rc>
    49e6:	08 95       	ret

000049e8 <lora_driver_set_receive_delay>:
    49e8:	9f 93       	push	r25
    49ea:	8f 93       	push	r24
    49ec:	81 eb       	ldi	r24, 0xB1	; 177
    49ee:	96 e0       	ldi	r25, 0x06	; 6
    49f0:	9f 93       	push	r25
    49f2:	8f 93       	push	r24
    49f4:	8b e6       	ldi	r24, 0x6B	; 107
    49f6:	9a e1       	ldi	r25, 0x1A	; 26
    49f8:	9f 93       	push	r25
    49fa:	8f 93       	push	r24
    49fc:	0e 94 cc 31 	call	0x6398	; 0x6398 <sprintf>
    4a00:	60 e0       	ldi	r22, 0x00	; 0
    4a02:	70 e0       	ldi	r23, 0x00	; 0
    4a04:	8b e6       	ldi	r24, 0x6B	; 107
    4a06:	9a e1       	ldi	r25, 0x1A	; 26
    4a08:	28 de       	rcall	.-944    	; 0x465a <_upload_message_rc>
    4a0a:	0f 90       	pop	r0
    4a0c:	0f 90       	pop	r0
    4a0e:	0f 90       	pop	r0
    4a10:	0f 90       	pop	r0
    4a12:	0f 90       	pop	r0
    4a14:	0f 90       	pop	r0
    4a16:	08 95       	ret

00004a18 <lora_driver_configure_to_eu868>:
    4a18:	2f 92       	push	r2
    4a1a:	3f 92       	push	r3
    4a1c:	4f 92       	push	r4
    4a1e:	5f 92       	push	r5
    4a20:	6f 92       	push	r6
    4a22:	7f 92       	push	r7
    4a24:	8f 92       	push	r8
    4a26:	9f 92       	push	r9
    4a28:	af 92       	push	r10
    4a2a:	bf 92       	push	r11
    4a2c:	cf 92       	push	r12
    4a2e:	df 92       	push	r13
    4a30:	ef 92       	push	r14
    4a32:	ff 92       	push	r15
    4a34:	0f 93       	push	r16
    4a36:	1f 93       	push	r17
    4a38:	cf 93       	push	r28
    4a3a:	df 93       	push	r29
    4a3c:	cd b7       	in	r28, 0x3d	; 61
    4a3e:	de b7       	in	r29, 0x3e	; 62
    4a40:	a0 97       	sbiw	r28, 0x20	; 32
    4a42:	0f b6       	in	r0, 0x3f	; 63
    4a44:	f8 94       	cli
    4a46:	de bf       	out	0x3e, r29	; 62
    4a48:	0f be       	out	0x3f, r0	; 63
    4a4a:	cd bf       	out	0x3d, r28	; 61
    4a4c:	6e ed       	ldi	r22, 0xDE	; 222
    4a4e:	76 e0       	ldi	r23, 0x06	; 6
    4a50:	8a ee       	ldi	r24, 0xEA	; 234
    4a52:	96 e0       	ldi	r25, 0x06	; 6
    4a54:	33 dd       	rcall	.-1434   	; 0x44bc <_upload_message>
    4a56:	8c dd       	rcall	.-1256   	; 0x4570 <_reply2return_code>
    4a58:	81 11       	cpse	r24, r1
    4a5a:	a3 c0       	rjmp	.+326    	; 0x4ba2 <lora_driver_configure_to_eu868+0x18a>
    4a5c:	80 e2       	ldi	r24, 0x20	; 32
    4a5e:	e5 e2       	ldi	r30, 0x25	; 37
    4a60:	f2 e0       	ldi	r31, 0x02	; 2
    4a62:	de 01       	movw	r26, r28
    4a64:	11 96       	adiw	r26, 0x01	; 1
    4a66:	01 90       	ld	r0, Z+
    4a68:	0d 92       	st	X+, r0
    4a6a:	8a 95       	dec	r24
    4a6c:	e1 f7       	brne	.-8      	; 0x4a66 <lora_driver_configure_to_eu868+0x4e>
    4a6e:	9e 01       	movw	r18, r28
    4a70:	2f 5f       	subi	r18, 0xFF	; 255
    4a72:	3f 4f       	sbci	r19, 0xFF	; 255
    4a74:	69 01       	movw	r12, r18
    4a76:	e1 2c       	mov	r14, r1
    4a78:	f1 2c       	mov	r15, r1
    4a7a:	0f 2e       	mov	r0, r31
    4a7c:	f6 ef       	ldi	r31, 0xF6	; 246
    4a7e:	af 2e       	mov	r10, r31
    4a80:	f6 e0       	ldi	r31, 0x06	; 6
    4a82:	bf 2e       	mov	r11, r31
    4a84:	f0 2d       	mov	r31, r0
    4a86:	0b e6       	ldi	r16, 0x6B	; 107
    4a88:	1a e1       	ldi	r17, 0x1A	; 26
    4a8a:	0f 2e       	mov	r0, r31
    4a8c:	ff e0       	ldi	r31, 0x0F	; 15
    4a8e:	4f 2e       	mov	r4, r31
    4a90:	f7 e0       	ldi	r31, 0x07	; 7
    4a92:	5f 2e       	mov	r5, r31
    4a94:	f0 2d       	mov	r31, r0
    4a96:	0f 2e       	mov	r0, r31
    4a98:	f6 e2       	ldi	r31, 0x26	; 38
    4a9a:	8f 2e       	mov	r8, r31
    4a9c:	f7 e0       	ldi	r31, 0x07	; 7
    4a9e:	9f 2e       	mov	r9, r31
    4aa0:	f0 2d       	mov	r31, r0
    4aa2:	0f 2e       	mov	r0, r31
    4aa4:	f0 e4       	ldi	r31, 0x40	; 64
    4aa6:	6f 2e       	mov	r6, r31
    4aa8:	f7 e0       	ldi	r31, 0x07	; 7
    4aaa:	7f 2e       	mov	r7, r31
    4aac:	f0 2d       	mov	r31, r0
    4aae:	3e 2c       	mov	r3, r14
    4ab0:	2f 2c       	mov	r2, r15
    4ab2:	ff 92       	push	r15
    4ab4:	ef 92       	push	r14
    4ab6:	bf 92       	push	r11
    4ab8:	af 92       	push	r10
    4aba:	1f 93       	push	r17
    4abc:	0f 93       	push	r16
    4abe:	0e 94 cc 31 	call	0x6398	; 0x6398 <sprintf>
    4ac2:	60 e0       	ldi	r22, 0x00	; 0
    4ac4:	70 e0       	ldi	r23, 0x00	; 0
    4ac6:	c8 01       	movw	r24, r16
    4ac8:	f9 dc       	rcall	.-1550   	; 0x44bc <_upload_message>
    4aca:	52 dd       	rcall	.-1372   	; 0x4570 <_reply2return_code>
    4acc:	0f 90       	pop	r0
    4ace:	0f 90       	pop	r0
    4ad0:	0f 90       	pop	r0
    4ad2:	0f 90       	pop	r0
    4ad4:	0f 90       	pop	r0
    4ad6:	0f 90       	pop	r0
    4ad8:	81 11       	cpse	r24, r1
    4ada:	63 c0       	rjmp	.+198    	; 0x4ba2 <lora_driver_configure_to_eu868+0x18a>
    4adc:	32 e0       	ldi	r19, 0x02	; 2
    4ade:	3e 15       	cp	r19, r14
    4ae0:	e8 f4       	brcc	.+58     	; 0x4b1c <lora_driver_configure_to_eu868+0x104>
    4ae2:	f6 01       	movw	r30, r12
    4ae4:	83 81       	ldd	r24, Z+3	; 0x03
    4ae6:	8f 93       	push	r24
    4ae8:	82 81       	ldd	r24, Z+2	; 0x02
    4aea:	8f 93       	push	r24
    4aec:	81 81       	ldd	r24, Z+1	; 0x01
    4aee:	8f 93       	push	r24
    4af0:	80 81       	ld	r24, Z
    4af2:	8f 93       	push	r24
    4af4:	ff 92       	push	r15
    4af6:	ef 92       	push	r14
    4af8:	5f 92       	push	r5
    4afa:	4f 92       	push	r4
    4afc:	1f 93       	push	r17
    4afe:	0f 93       	push	r16
    4b00:	0e 94 cc 31 	call	0x6398	; 0x6398 <sprintf>
    4b04:	60 e0       	ldi	r22, 0x00	; 0
    4b06:	70 e0       	ldi	r23, 0x00	; 0
    4b08:	c8 01       	movw	r24, r16
    4b0a:	d8 dc       	rcall	.-1616   	; 0x44bc <_upload_message>
    4b0c:	31 dd       	rcall	.-1438   	; 0x4570 <_reply2return_code>
    4b0e:	0f b6       	in	r0, 0x3f	; 63
    4b10:	f8 94       	cli
    4b12:	de bf       	out	0x3e, r29	; 62
    4b14:	0f be       	out	0x3f, r0	; 63
    4b16:	cd bf       	out	0x3d, r28	; 61
    4b18:	81 11       	cpse	r24, r1
    4b1a:	43 c0       	rjmp	.+134    	; 0x4ba2 <lora_driver_configure_to_eu868+0x18a>
    4b1c:	2f 92       	push	r2
    4b1e:	3f 92       	push	r3
    4b20:	9f 92       	push	r9
    4b22:	8f 92       	push	r8
    4b24:	1f 93       	push	r17
    4b26:	0f 93       	push	r16
    4b28:	0e 94 cc 31 	call	0x6398	; 0x6398 <sprintf>
    4b2c:	60 e0       	ldi	r22, 0x00	; 0
    4b2e:	70 e0       	ldi	r23, 0x00	; 0
    4b30:	c8 01       	movw	r24, r16
    4b32:	c4 dc       	rcall	.-1656   	; 0x44bc <_upload_message>
    4b34:	1d dd       	rcall	.-1478   	; 0x4570 <_reply2return_code>
    4b36:	0f 90       	pop	r0
    4b38:	0f 90       	pop	r0
    4b3a:	0f 90       	pop	r0
    4b3c:	0f 90       	pop	r0
    4b3e:	0f 90       	pop	r0
    4b40:	0f 90       	pop	r0
    4b42:	81 11       	cpse	r24, r1
    4b44:	2e c0       	rjmp	.+92     	; 0x4ba2 <lora_driver_configure_to_eu868+0x18a>
    4b46:	2f 92       	push	r2
    4b48:	3f 92       	push	r3
    4b4a:	7f 92       	push	r7
    4b4c:	6f 92       	push	r6
    4b4e:	1f 93       	push	r17
    4b50:	0f 93       	push	r16
    4b52:	0e 94 cc 31 	call	0x6398	; 0x6398 <sprintf>
    4b56:	60 e0       	ldi	r22, 0x00	; 0
    4b58:	70 e0       	ldi	r23, 0x00	; 0
    4b5a:	c8 01       	movw	r24, r16
    4b5c:	af dc       	rcall	.-1698   	; 0x44bc <_upload_message>
    4b5e:	08 dd       	rcall	.-1520   	; 0x4570 <_reply2return_code>
    4b60:	0f 90       	pop	r0
    4b62:	0f 90       	pop	r0
    4b64:	0f 90       	pop	r0
    4b66:	0f 90       	pop	r0
    4b68:	0f 90       	pop	r0
    4b6a:	0f 90       	pop	r0
    4b6c:	81 11       	cpse	r24, r1
    4b6e:	19 c0       	rjmp	.+50     	; 0x4ba2 <lora_driver_configure_to_eu868+0x18a>
    4b70:	3f ef       	ldi	r19, 0xFF	; 255
    4b72:	e3 1a       	sub	r14, r19
    4b74:	f3 0a       	sbc	r15, r19
    4b76:	84 e0       	ldi	r24, 0x04	; 4
    4b78:	c8 0e       	add	r12, r24
    4b7a:	d1 1c       	adc	r13, r1
    4b7c:	98 e0       	ldi	r25, 0x08	; 8
    4b7e:	e9 16       	cp	r14, r25
    4b80:	f1 04       	cpc	r15, r1
    4b82:	09 f0       	breq	.+2      	; 0x4b86 <lora_driver_configure_to_eu868+0x16e>
    4b84:	94 cf       	rjmp	.-216    	; 0x4aae <lora_driver_configure_to_eu868+0x96>
    4b86:	60 e0       	ldi	r22, 0x00	; 0
    4b88:	70 e0       	ldi	r23, 0x00	; 0
    4b8a:	88 e5       	ldi	r24, 0x58	; 88
    4b8c:	97 e0       	ldi	r25, 0x07	; 7
    4b8e:	96 dc       	rcall	.-1748   	; 0x44bc <_upload_message>
    4b90:	ef dc       	rcall	.-1570   	; 0x4570 <_reply2return_code>
    4b92:	81 11       	cpse	r24, r1
    4b94:	06 c0       	rjmp	.+12     	; 0x4ba2 <lora_driver_configure_to_eu868+0x18a>
    4b96:	60 e0       	ldi	r22, 0x00	; 0
    4b98:	70 e0       	ldi	r23, 0x00	; 0
    4b9a:	89 e6       	ldi	r24, 0x69	; 105
    4b9c:	97 e0       	ldi	r25, 0x07	; 7
    4b9e:	8e dc       	rcall	.-1764   	; 0x44bc <_upload_message>
    4ba0:	e7 dc       	rcall	.-1586   	; 0x4570 <_reply2return_code>
    4ba2:	a0 96       	adiw	r28, 0x20	; 32
    4ba4:	0f b6       	in	r0, 0x3f	; 63
    4ba6:	f8 94       	cli
    4ba8:	de bf       	out	0x3e, r29	; 62
    4baa:	0f be       	out	0x3f, r0	; 63
    4bac:	cd bf       	out	0x3d, r28	; 61
    4bae:	df 91       	pop	r29
    4bb0:	cf 91       	pop	r28
    4bb2:	1f 91       	pop	r17
    4bb4:	0f 91       	pop	r16
    4bb6:	ff 90       	pop	r15
    4bb8:	ef 90       	pop	r14
    4bba:	df 90       	pop	r13
    4bbc:	cf 90       	pop	r12
    4bbe:	bf 90       	pop	r11
    4bc0:	af 90       	pop	r10
    4bc2:	9f 90       	pop	r9
    4bc4:	8f 90       	pop	r8
    4bc6:	7f 90       	pop	r7
    4bc8:	6f 90       	pop	r6
    4bca:	5f 90       	pop	r5
    4bcc:	4f 90       	pop	r4
    4bce:	3f 90       	pop	r3
    4bd0:	2f 90       	pop	r2
    4bd2:	08 95       	ret

00004bd4 <lora_driver_set_otaa_identity>:
    4bd4:	ef 92       	push	r14
    4bd6:	ff 92       	push	r15
    4bd8:	0f 93       	push	r16
    4bda:	1f 93       	push	r17
    4bdc:	cf 93       	push	r28
    4bde:	df 93       	push	r29
    4be0:	ec 01       	movw	r28, r24
    4be2:	8b 01       	movw	r16, r22
    4be4:	7a 01       	movw	r14, r20
    4be6:	81 e0       	ldi	r24, 0x01	; 1
    4be8:	f4 de       	rcall	.-536    	; 0x49d2 <lora_driver_set_adaptive_data_rate>
    4bea:	81 11       	cpse	r24, r1
    4bec:	0d c0       	rjmp	.+26     	; 0x4c08 <lora_driver_set_otaa_identity+0x34>
    4bee:	ce 01       	movw	r24, r28
    4bf0:	d4 dd       	rcall	.-1112   	; 0x479a <lora_driver_set_application_identifier>
    4bf2:	81 11       	cpse	r24, r1
    4bf4:	09 c0       	rjmp	.+18     	; 0x4c08 <lora_driver_set_otaa_identity+0x34>
    4bf6:	c8 01       	movw	r24, r16
    4bf8:	e1 dd       	rcall	.-1086   	; 0x47bc <lora_driver_set_application_key>
    4bfa:	81 11       	cpse	r24, r1
    4bfc:	05 c0       	rjmp	.+10     	; 0x4c08 <lora_driver_set_otaa_identity+0x34>
    4bfe:	c7 01       	movw	r24, r14
    4c00:	bb dd       	rcall	.-1162   	; 0x4778 <lora_driver_set_device_identifier>
    4c02:	81 11       	cpse	r24, r1
    4c04:	01 c0       	rjmp	.+2      	; 0x4c08 <lora_driver_set_otaa_identity+0x34>
    4c06:	eb dd       	rcall	.-1066   	; 0x47de <lora_driver_save_mac>
    4c08:	df 91       	pop	r29
    4c0a:	cf 91       	pop	r28
    4c0c:	1f 91       	pop	r17
    4c0e:	0f 91       	pop	r16
    4c10:	ff 90       	pop	r15
    4c12:	ef 90       	pop	r14
    4c14:	08 95       	ret

00004c16 <lora_driver_map_return_code_to_text>:
    4c16:	90 e0       	ldi	r25, 0x00	; 0
    4c18:	fc 01       	movw	r30, r24
    4c1a:	ee 0f       	add	r30, r30
    4c1c:	ff 1f       	adc	r31, r31
    4c1e:	8e 0f       	add	r24, r30
    4c20:	9f 1f       	adc	r25, r31
    4c22:	fc 01       	movw	r30, r24
    4c24:	ee 5c       	subi	r30, 0xCE	; 206
    4c26:	f7 4f       	sbci	r31, 0xF7	; 247
    4c28:	81 81       	ldd	r24, Z+1	; 0x01
    4c2a:	92 81       	ldd	r25, Z+2	; 0x02
    4c2c:	08 95       	ret

00004c2e <decode_port_no>:
    4c2e:	dc 01       	movw	r26, r24
    4c30:	00 97       	sbiw	r24, 0x00	; 0
    4c32:	29 f1       	breq	.+74     	; 0x4c7e <decode_port_no+0x50>
    4c34:	fb 01       	movw	r30, r22
    4c36:	20 81       	ld	r18, Z
    4c38:	fc 01       	movw	r30, r24
    4c3a:	01 90       	ld	r0, Z+
    4c3c:	00 20       	and	r0, r0
    4c3e:	e9 f7       	brne	.-6      	; 0x4c3a <decode_port_no+0xc>
    4c40:	31 97       	sbiw	r30, 0x01	; 1
    4c42:	e8 1b       	sub	r30, r24
    4c44:	f9 0b       	sbc	r31, r25
    4c46:	82 2f       	mov	r24, r18
    4c48:	90 e0       	ldi	r25, 0x00	; 0
    4c4a:	e8 17       	cp	r30, r24
    4c4c:	f9 07       	cpc	r31, r25
    4c4e:	c8 f0       	brcs	.+50     	; 0x4c82 <decode_port_no+0x54>
    4c50:	80 e0       	ldi	r24, 0x00	; 0
    4c52:	08 c0       	rjmp	.+16     	; 0x4c64 <decode_port_no+0x36>
    4c54:	88 0f       	add	r24, r24
    4c56:	38 2f       	mov	r19, r24
    4c58:	33 0f       	add	r19, r19
    4c5a:	33 0f       	add	r19, r19
    4c5c:	83 0f       	add	r24, r19
    4c5e:	80 53       	subi	r24, 0x30	; 48
    4c60:	89 0f       	add	r24, r25
    4c62:	2f 5f       	subi	r18, 0xFF	; 255
    4c64:	fd 01       	movw	r30, r26
    4c66:	e2 0f       	add	r30, r18
    4c68:	f1 1d       	adc	r31, r1
    4c6a:	90 81       	ld	r25, Z
    4c6c:	30 ed       	ldi	r19, 0xD0	; 208
    4c6e:	39 0f       	add	r19, r25
    4c70:	3a 30       	cpi	r19, 0x0A	; 10
    4c72:	10 f4       	brcc	.+4      	; 0x4c78 <decode_port_no+0x4a>
    4c74:	91 11       	cpse	r25, r1
    4c76:	ee cf       	rjmp	.-36     	; 0x4c54 <decode_port_no+0x26>
    4c78:	fb 01       	movw	r30, r22
    4c7a:	20 83       	st	Z, r18
    4c7c:	08 95       	ret
    4c7e:	80 e0       	ldi	r24, 0x00	; 0
    4c80:	08 95       	ret
    4c82:	80 e0       	ldi	r24, 0x00	; 0
    4c84:	08 95       	ret

00004c86 <decode_hexadecimal_string_bytes>:
    4c86:	0f 93       	push	r16
    4c88:	1f 93       	push	r17
    4c8a:	cf 93       	push	r28
    4c8c:	df 93       	push	r29
    4c8e:	dc 01       	movw	r26, r24
    4c90:	ea 01       	movw	r28, r20
    4c92:	20 97       	sbiw	r28, 0x00	; 0
    4c94:	e1 f1       	breq	.+120    	; 0x4d0e <decode_hexadecimal_string_bytes+0x88>
    4c96:	fa 01       	movw	r30, r20
    4c98:	01 90       	ld	r0, Z+
    4c9a:	00 20       	and	r0, r0
    4c9c:	e9 f7       	brne	.-6      	; 0x4c98 <decode_hexadecimal_string_bytes+0x12>
    4c9e:	31 97       	sbiw	r30, 0x01	; 1
    4ca0:	e4 1b       	sub	r30, r20
    4ca2:	f5 0b       	sbc	r31, r21
    4ca4:	32 97       	sbiw	r30, 0x02	; 2
    4ca6:	10 f5       	brcc	.+68     	; 0x4cec <decode_hexadecimal_string_bytes+0x66>
    4ca8:	32 c0       	rjmp	.+100    	; 0x4d0e <decode_hexadecimal_string_bytes+0x88>
    4caa:	8d 01       	movw	r16, r26
    4cac:	04 0f       	add	r16, r20
    4cae:	15 1f       	adc	r17, r21
    4cb0:	30 e0       	ldi	r19, 0x00	; 0
    4cb2:	ae 01       	movw	r20, r28
    4cb4:	42 0f       	add	r20, r18
    4cb6:	53 1f       	adc	r21, r19
    4cb8:	fa 01       	movw	r30, r20
    4cba:	90 81       	ld	r25, Z
    4cbc:	91 34       	cpi	r25, 0x41	; 65
    4cbe:	28 f0       	brcs	.+10     	; 0x4cca <decode_hexadecimal_string_bytes+0x44>
    4cc0:	97 53       	subi	r25, 0x37	; 55
    4cc2:	59 2f       	mov	r21, r25
    4cc4:	52 95       	swap	r21
    4cc6:	50 7f       	andi	r21, 0xF0	; 240
    4cc8:	03 c0       	rjmp	.+6      	; 0x4cd0 <decode_hexadecimal_string_bytes+0x4a>
    4cca:	59 2f       	mov	r21, r25
    4ccc:	52 95       	swap	r21
    4cce:	50 7f       	andi	r21, 0xF0	; 240
    4cd0:	2c 0f       	add	r18, r28
    4cd2:	3d 1f       	adc	r19, r29
    4cd4:	f9 01       	movw	r30, r18
    4cd6:	91 81       	ldd	r25, Z+1	; 0x01
    4cd8:	91 34       	cpi	r25, 0x41	; 65
    4cda:	10 f0       	brcs	.+4      	; 0x4ce0 <decode_hexadecimal_string_bytes+0x5a>
    4cdc:	97 53       	subi	r25, 0x37	; 55
    4cde:	01 c0       	rjmp	.+2      	; 0x4ce2 <decode_hexadecimal_string_bytes+0x5c>
    4ce0:	90 53       	subi	r25, 0x30	; 48
    4ce2:	95 0f       	add	r25, r21
    4ce4:	f8 01       	movw	r30, r16
    4ce6:	90 83       	st	Z, r25
    4ce8:	8f 5f       	subi	r24, 0xFF	; 255
    4cea:	01 c0       	rjmp	.+2      	; 0x4cee <decode_hexadecimal_string_bytes+0x68>
    4cec:	80 e0       	ldi	r24, 0x00	; 0
    4cee:	28 2f       	mov	r18, r24
    4cf0:	22 0f       	add	r18, r18
    4cf2:	48 2f       	mov	r20, r24
    4cf4:	50 e0       	ldi	r21, 0x00	; 0
    4cf6:	fe 01       	movw	r30, r28
    4cf8:	01 90       	ld	r0, Z+
    4cfa:	00 20       	and	r0, r0
    4cfc:	e9 f7       	brne	.-6      	; 0x4cf8 <decode_hexadecimal_string_bytes+0x72>
    4cfe:	31 97       	sbiw	r30, 0x01	; 1
    4d00:	ec 1b       	sub	r30, r28
    4d02:	fd 0b       	sbc	r31, r29
    4d04:	4e 17       	cp	r20, r30
    4d06:	5f 07       	cpc	r21, r31
    4d08:	10 f4       	brcc	.+4      	; 0x4d0e <decode_hexadecimal_string_bytes+0x88>
    4d0a:	86 13       	cpse	r24, r22
    4d0c:	ce cf       	rjmp	.-100    	; 0x4caa <decode_hexadecimal_string_bytes+0x24>
    4d0e:	df 91       	pop	r29
    4d10:	cf 91       	pop	r28
    4d12:	1f 91       	pop	r17
    4d14:	0f 91       	pop	r16
    4d16:	08 95       	ret

00004d18 <reg_read_register>:
    4d18:	fc 01       	movw	r30, r24
    4d1a:	80 81       	ld	r24, Z
    4d1c:	08 95       	ret

00004d1e <reg_read_bit>:
    4d1e:	fc 01       	movw	r30, r24
    4d20:	20 81       	ld	r18, Z
    4d22:	81 e0       	ldi	r24, 0x01	; 1
    4d24:	90 e0       	ldi	r25, 0x00	; 0
    4d26:	02 c0       	rjmp	.+4      	; 0x4d2c <reg_read_bit+0xe>
    4d28:	88 0f       	add	r24, r24
    4d2a:	99 1f       	adc	r25, r25
    4d2c:	6a 95       	dec	r22
    4d2e:	e2 f7       	brpl	.-8      	; 0x4d28 <reg_read_bit+0xa>
    4d30:	82 23       	and	r24, r18
    4d32:	08 95       	ret

00004d34 <reg_read_bits>:
    4d34:	fc 01       	movw	r30, r24
    4d36:	80 81       	ld	r24, Z
    4d38:	86 23       	and	r24, r22
    4d3a:	08 95       	ret

00004d3c <reg_set_register>:
    4d3c:	fc 01       	movw	r30, r24
    4d3e:	60 83       	st	Z, r22
    4d40:	08 95       	ret

00004d42 <reg_clear_register>:
    4d42:	fc 01       	movw	r30, r24
    4d44:	10 82       	st	Z, r1
    4d46:	08 95       	ret

00004d48 <reg_set_bit>:
    4d48:	fc 01       	movw	r30, r24
    4d4a:	40 81       	ld	r20, Z
    4d4c:	21 e0       	ldi	r18, 0x01	; 1
    4d4e:	30 e0       	ldi	r19, 0x00	; 0
    4d50:	02 c0       	rjmp	.+4      	; 0x4d56 <reg_set_bit+0xe>
    4d52:	22 0f       	add	r18, r18
    4d54:	33 1f       	adc	r19, r19
    4d56:	6a 95       	dec	r22
    4d58:	e2 f7       	brpl	.-8      	; 0x4d52 <reg_set_bit+0xa>
    4d5a:	24 2b       	or	r18, r20
    4d5c:	20 83       	st	Z, r18
    4d5e:	08 95       	ret

00004d60 <reg_set_bits>:
    4d60:	fc 01       	movw	r30, r24
    4d62:	20 81       	ld	r18, Z
    4d64:	62 2b       	or	r22, r18
    4d66:	60 83       	st	Z, r22
    4d68:	08 95       	ret

00004d6a <reg_toggle_bit>:
    4d6a:	fc 01       	movw	r30, r24
    4d6c:	40 81       	ld	r20, Z
    4d6e:	21 e0       	ldi	r18, 0x01	; 1
    4d70:	30 e0       	ldi	r19, 0x00	; 0
    4d72:	02 c0       	rjmp	.+4      	; 0x4d78 <reg_toggle_bit+0xe>
    4d74:	22 0f       	add	r18, r18
    4d76:	33 1f       	adc	r19, r19
    4d78:	6a 95       	dec	r22
    4d7a:	e2 f7       	brpl	.-8      	; 0x4d74 <reg_toggle_bit+0xa>
    4d7c:	24 27       	eor	r18, r20
    4d7e:	20 83       	st	Z, r18
    4d80:	08 95       	ret

00004d82 <reg_toggle_bits>:
    4d82:	fc 01       	movw	r30, r24
    4d84:	20 81       	ld	r18, Z
    4d86:	62 27       	eor	r22, r18
    4d88:	60 83       	st	Z, r22
    4d8a:	08 95       	ret

00004d8c <reg_clear_bit>:
    4d8c:	fc 01       	movw	r30, r24
    4d8e:	90 81       	ld	r25, Z
    4d90:	21 e0       	ldi	r18, 0x01	; 1
    4d92:	30 e0       	ldi	r19, 0x00	; 0
    4d94:	02 c0       	rjmp	.+4      	; 0x4d9a <reg_clear_bit+0xe>
    4d96:	22 0f       	add	r18, r18
    4d98:	33 1f       	adc	r19, r19
    4d9a:	6a 95       	dec	r22
    4d9c:	e2 f7       	brpl	.-8      	; 0x4d96 <reg_clear_bit+0xa>
    4d9e:	20 95       	com	r18
    4da0:	29 23       	and	r18, r25
    4da2:	20 83       	st	Z, r18
    4da4:	08 95       	ret

00004da6 <reg_clear_bits>:
    4da6:	fc 01       	movw	r30, r24
    4da8:	90 81       	ld	r25, Z
    4daa:	60 95       	com	r22
    4dac:	69 23       	and	r22, r25
    4dae:	60 83       	st	Z, r22
    4db0:	08 95       	ret

00004db2 <_serial_call_back>:
    4db2:	80 91 c8 1a 	lds	r24, 0x1AC8	; 0x801ac8 <crc_sum.1941>
    4db6:	86 0f       	add	r24, r22
    4db8:	80 93 c8 1a 	sts	0x1AC8, r24	; 0x801ac8 <crc_sum.1941>
    4dbc:	90 91 cb 1a 	lds	r25, 0x1ACB	; 0x801acb <_mh_state>
    4dc0:	91 30       	cpi	r25, 0x01	; 1
    4dc2:	79 f0       	breq	.+30     	; 0x4de2 <_serial_call_back+0x30>
    4dc4:	28 f0       	brcs	.+10     	; 0x4dd0 <_serial_call_back+0x1e>
    4dc6:	92 30       	cpi	r25, 0x02	; 2
    4dc8:	a9 f0       	breq	.+42     	; 0x4df4 <_serial_call_back+0x42>
    4dca:	93 30       	cpi	r25, 0x03	; 3
    4dcc:	19 f1       	breq	.+70     	; 0x4e14 <_serial_call_back+0x62>
    4dce:	08 95       	ret
    4dd0:	6f 3f       	cpi	r22, 0xFF	; 255
    4dd2:	09 f0       	breq	.+2      	; 0x4dd6 <_serial_call_back+0x24>
    4dd4:	48 c0       	rjmp	.+144    	; 0x4e66 <_serial_call_back+0xb4>
    4dd6:	10 92 c8 1a 	sts	0x1AC8, r1	; 0x801ac8 <crc_sum.1941>
    4dda:	81 e0       	ldi	r24, 0x01	; 1
    4ddc:	80 93 cb 1a 	sts	0x1ACB, r24	; 0x801acb <_mh_state>
    4de0:	08 95       	ret
    4de2:	66 38       	cpi	r22, 0x86	; 134
    4de4:	09 f0       	breq	.+2      	; 0x4de8 <_serial_call_back+0x36>
    4de6:	3f c0       	rjmp	.+126    	; 0x4e66 <_serial_call_back+0xb4>
    4de8:	10 92 c7 1a 	sts	0x1AC7, r1	; 0x801ac7 <inDex.1939>
    4dec:	82 e0       	ldi	r24, 0x02	; 2
    4dee:	80 93 cb 1a 	sts	0x1ACB, r24	; 0x801acb <_mh_state>
    4df2:	08 95       	ret
    4df4:	e0 91 c7 1a 	lds	r30, 0x1AC7	; 0x801ac7 <inDex.1939>
    4df8:	81 e0       	ldi	r24, 0x01	; 1
    4dfa:	8e 0f       	add	r24, r30
    4dfc:	80 93 c7 1a 	sts	0x1AC7, r24	; 0x801ac7 <inDex.1939>
    4e00:	f0 e0       	ldi	r31, 0x00	; 0
    4e02:	eb 53       	subi	r30, 0x3B	; 59
    4e04:	f5 4e       	sbci	r31, 0xE5	; 229
    4e06:	60 83       	st	Z, r22
    4e08:	82 30       	cpi	r24, 0x02	; 2
    4e0a:	69 f5       	brne	.+90     	; 0x4e66 <_serial_call_back+0xb4>
    4e0c:	83 e0       	ldi	r24, 0x03	; 3
    4e0e:	80 93 cb 1a 	sts	0x1ACB, r24	; 0x801acb <_mh_state>
    4e12:	08 95       	ret
    4e14:	90 91 c7 1a 	lds	r25, 0x1AC7	; 0x801ac7 <inDex.1939>
    4e18:	21 e0       	ldi	r18, 0x01	; 1
    4e1a:	29 0f       	add	r18, r25
    4e1c:	20 93 c7 1a 	sts	0x1AC7, r18	; 0x801ac7 <inDex.1939>
    4e20:	96 30       	cpi	r25, 0x06	; 6
    4e22:	09 f5       	brne	.+66     	; 0x4e66 <_serial_call_back+0xb4>
    4e24:	81 11       	cpse	r24, r1
    4e26:	0e c0       	rjmp	.+28     	; 0x4e44 <_serial_call_back+0x92>
    4e28:	e5 ec       	ldi	r30, 0xC5	; 197
    4e2a:	fa e1       	ldi	r31, 0x1A	; 26
    4e2c:	80 81       	ld	r24, Z
    4e2e:	90 e0       	ldi	r25, 0x00	; 0
    4e30:	98 2f       	mov	r25, r24
    4e32:	88 27       	eor	r24, r24
    4e34:	21 81       	ldd	r18, Z+1	; 0x01
    4e36:	82 0f       	add	r24, r18
    4e38:	91 1d       	adc	r25, r1
    4e3a:	90 93 cd 1a 	sts	0x1ACD, r25	; 0x801acd <_ppm+0x1>
    4e3e:	80 93 cc 1a 	sts	0x1ACC, r24	; 0x801acc <_ppm>
    4e42:	04 c0       	rjmp	.+8      	; 0x4e4c <_serial_call_back+0x9a>
    4e44:	10 92 cd 1a 	sts	0x1ACD, r1	; 0x801acd <_ppm+0x1>
    4e48:	10 92 cc 1a 	sts	0x1ACC, r1	; 0x801acc <_ppm>
    4e4c:	10 92 cb 1a 	sts	0x1ACB, r1	; 0x801acb <_mh_state>
    4e50:	e0 91 c9 1a 	lds	r30, 0x1AC9	; 0x801ac9 <_app_call_back>
    4e54:	f0 91 ca 1a 	lds	r31, 0x1ACA	; 0x801aca <_app_call_back+0x1>
    4e58:	30 97       	sbiw	r30, 0x00	; 0
    4e5a:	29 f0       	breq	.+10     	; 0x4e66 <_serial_call_back+0xb4>
    4e5c:	80 91 cc 1a 	lds	r24, 0x1ACC	; 0x801acc <_ppm>
    4e60:	90 91 cd 1a 	lds	r25, 0x1ACD	; 0x801acd <_ppm+0x1>
    4e64:	19 95       	eicall
    4e66:	08 95       	ret

00004e68 <mh_z19_create>:
    4e68:	8f 92       	push	r8
    4e6a:	9f 92       	push	r9
    4e6c:	af 92       	push	r10
    4e6e:	cf 92       	push	r12
    4e70:	ef 92       	push	r14
    4e72:	0f 93       	push	r16
    4e74:	cf 93       	push	r28
    4e76:	df 93       	push	r29
    4e78:	eb 01       	movw	r28, r22
    4e7a:	0f 2e       	mov	r0, r31
    4e7c:	f9 ed       	ldi	r31, 0xD9	; 217
    4e7e:	8f 2e       	mov	r8, r31
    4e80:	f6 e2       	ldi	r31, 0x26	; 38
    4e82:	9f 2e       	mov	r9, r31
    4e84:	f0 2d       	mov	r31, r0
    4e86:	68 94       	set
    4e88:	aa 24       	eor	r10, r10
    4e8a:	a4 f8       	bld	r10, 4
    4e8c:	68 94       	set
    4e8e:	cc 24       	eor	r12, r12
    4e90:	c4 f8       	bld	r12, 4
    4e92:	e1 2c       	mov	r14, r1
    4e94:	00 e0       	ldi	r16, 0x00	; 0
    4e96:	23 e0       	ldi	r18, 0x03	; 3
    4e98:	40 e8       	ldi	r20, 0x80	; 128
    4e9a:	55 e2       	ldi	r21, 0x25	; 37
    4e9c:	60 e0       	ldi	r22, 0x00	; 0
    4e9e:	70 e0       	ldi	r23, 0x00	; 0
    4ea0:	85 d0       	rcall	.+266    	; 0x4fac <serial_new_instance>
    4ea2:	90 93 cf 1a 	sts	0x1ACF, r25	; 0x801acf <_serial+0x1>
    4ea6:	80 93 ce 1a 	sts	0x1ACE, r24	; 0x801ace <_serial>
    4eaa:	d0 93 ca 1a 	sts	0x1ACA, r29	; 0x801aca <_app_call_back+0x1>
    4eae:	c0 93 c9 1a 	sts	0x1AC9, r28	; 0x801ac9 <_app_call_back>
    4eb2:	df 91       	pop	r29
    4eb4:	cf 91       	pop	r28
    4eb6:	0f 91       	pop	r16
    4eb8:	ef 90       	pop	r14
    4eba:	cf 90       	pop	r12
    4ebc:	af 90       	pop	r10
    4ebe:	9f 90       	pop	r9
    4ec0:	8f 90       	pop	r8
    4ec2:	08 95       	ret

00004ec4 <mh_z19_take_meassuring>:
    4ec4:	cf 93       	push	r28
    4ec6:	df 93       	push	r29
    4ec8:	cd b7       	in	r28, 0x3d	; 61
    4eca:	de b7       	in	r29, 0x3e	; 62
    4ecc:	29 97       	sbiw	r28, 0x09	; 9
    4ece:	0f b6       	in	r0, 0x3f	; 63
    4ed0:	f8 94       	cli
    4ed2:	de bf       	out	0x3e, r29	; 62
    4ed4:	0f be       	out	0x3f, r0	; 63
    4ed6:	cd bf       	out	0x3d, r28	; 61
    4ed8:	89 e0       	ldi	r24, 0x09	; 9
    4eda:	e5 e4       	ldi	r30, 0x45	; 69
    4edc:	f2 e0       	ldi	r31, 0x02	; 2
    4ede:	9e 01       	movw	r18, r28
    4ee0:	2f 5f       	subi	r18, 0xFF	; 255
    4ee2:	3f 4f       	sbci	r19, 0xFF	; 255
    4ee4:	d9 01       	movw	r26, r18
    4ee6:	01 90       	ld	r0, Z+
    4ee8:	0d 92       	st	X+, r0
    4eea:	8a 95       	dec	r24
    4eec:	e1 f7       	brne	.-8      	; 0x4ee6 <mh_z19_take_meassuring+0x22>
    4eee:	10 92 cd 1a 	sts	0x1ACD, r1	; 0x801acd <_ppm+0x1>
    4ef2:	10 92 cc 1a 	sts	0x1ACC, r1	; 0x801acc <_ppm>
    4ef6:	80 91 ce 1a 	lds	r24, 0x1ACE	; 0x801ace <_serial>
    4efa:	90 91 cf 1a 	lds	r25, 0x1ACF	; 0x801acf <_serial+0x1>
    4efe:	00 97       	sbiw	r24, 0x00	; 0
    4f00:	31 f0       	breq	.+12     	; 0x4f0e <mh_z19_take_meassuring+0x4a>
    4f02:	42 2f       	mov	r20, r18
    4f04:	53 2f       	mov	r21, r19
    4f06:	69 e0       	ldi	r22, 0x09	; 9
    4f08:	0c d1       	rcall	.+536    	; 0x5122 <serial_send_bytes>
    4f0a:	80 e0       	ldi	r24, 0x00	; 0
    4f0c:	01 c0       	rjmp	.+2      	; 0x4f10 <mh_z19_take_meassuring+0x4c>
    4f0e:	82 e0       	ldi	r24, 0x02	; 2
    4f10:	29 96       	adiw	r28, 0x09	; 9
    4f12:	0f b6       	in	r0, 0x3f	; 63
    4f14:	f8 94       	cli
    4f16:	de bf       	out	0x3e, r29	; 62
    4f18:	0f be       	out	0x3f, r0	; 63
    4f1a:	cd bf       	out	0x3d, r28	; 61
    4f1c:	df 91       	pop	r29
    4f1e:	cf 91       	pop	r28
    4f20:	08 95       	ret

00004f22 <mh_z19_get_co2_ppm>:
    4f22:	20 91 cc 1a 	lds	r18, 0x1ACC	; 0x801acc <_ppm>
    4f26:	30 91 cd 1a 	lds	r19, 0x1ACD	; 0x801acd <_ppm+0x1>
    4f2a:	21 15       	cp	r18, r1
    4f2c:	31 05       	cpc	r19, r1
    4f2e:	29 f4       	brne	.+10     	; 0x4f3a <mh_z19_get_co2_ppm+0x18>
    4f30:	fc 01       	movw	r30, r24
    4f32:	11 82       	std	Z+1, r1	; 0x01
    4f34:	10 82       	st	Z, r1
    4f36:	81 e0       	ldi	r24, 0x01	; 1
    4f38:	08 95       	ret
    4f3a:	fc 01       	movw	r30, r24
    4f3c:	31 83       	std	Z+1, r19	; 0x01
    4f3e:	20 83       	st	Z, r18
    4f40:	80 e0       	ldi	r24, 0x00	; 0
    4f42:	08 95       	ret

00004f44 <rcServoSet>:
    4f44:	65 36       	cpi	r22, 0x65	; 101
    4f46:	0c f0       	brlt	.+2      	; 0x4f4a <rcServoSet+0x6>
    4f48:	64 e6       	ldi	r22, 0x64	; 100
    4f4a:	6c 39       	cpi	r22, 0x9C	; 156
    4f4c:	0c f4       	brge	.+2      	; 0x4f50 <rcServoSet+0xc>
    4f4e:	6c e9       	ldi	r22, 0x9C	; 156
    4f50:	96 ef       	ldi	r25, 0xF6	; 246
    4f52:	69 02       	muls	r22, r25
    4f54:	b0 01       	movw	r22, r0
    4f56:	11 24       	eor	r1, r1
    4f58:	68 54       	subi	r22, 0x48	; 72
    4f5a:	74 4f       	sbci	r23, 0xF4	; 244
    4f5c:	81 11       	cpse	r24, r1
    4f5e:	05 c0       	rjmp	.+10     	; 0x4f6a <rcServoSet+0x26>
    4f60:	70 93 29 01 	sts	0x0129, r23	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
    4f64:	60 93 28 01 	sts	0x0128, r22	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
    4f68:	08 95       	ret
    4f6a:	70 93 2b 01 	sts	0x012B, r23	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
    4f6e:	60 93 2a 01 	sts	0x012A, r22	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
    4f72:	08 95       	ret

00004f74 <rcServoCreate>:
    4f74:	ea e0       	ldi	r30, 0x0A	; 10
    4f76:	f1 e0       	ldi	r31, 0x01	; 1
    4f78:	80 81       	ld	r24, Z
    4f7a:	88 61       	ori	r24, 0x18	; 24
    4f7c:	80 83       	st	Z, r24
    4f7e:	8f e3       	ldi	r24, 0x3F	; 63
    4f80:	9c e9       	ldi	r25, 0x9C	; 156
    4f82:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__TEXT_REGION_LENGTH__+0x700127>
    4f86:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__TEXT_REGION_LENGTH__+0x700126>
    4f8a:	60 e0       	ldi	r22, 0x00	; 0
    4f8c:	80 e0       	ldi	r24, 0x00	; 0
    4f8e:	da df       	rcall	.-76     	; 0x4f44 <rcServoSet>
    4f90:	60 e0       	ldi	r22, 0x00	; 0
    4f92:	81 e0       	ldi	r24, 0x01	; 1
    4f94:	d7 df       	rcall	.-82     	; 0x4f44 <rcServoSet>
    4f96:	e0 e2       	ldi	r30, 0x20	; 32
    4f98:	f1 e0       	ldi	r31, 0x01	; 1
    4f9a:	80 81       	ld	r24, Z
    4f9c:	82 6a       	ori	r24, 0xA2	; 162
    4f9e:	80 83       	st	Z, r24
    4fa0:	e1 e2       	ldi	r30, 0x21	; 33
    4fa2:	f1 e0       	ldi	r31, 0x01	; 1
    4fa4:	80 81       	ld	r24, Z
    4fa6:	8a 61       	ori	r24, 0x1A	; 26
    4fa8:	80 83       	st	Z, r24
    4faa:	08 95       	ret

00004fac <serial_new_instance>:
    4fac:	2f 92       	push	r2
    4fae:	3f 92       	push	r3
    4fb0:	4f 92       	push	r4
    4fb2:	5f 92       	push	r5
    4fb4:	6f 92       	push	r6
    4fb6:	7f 92       	push	r7
    4fb8:	8f 92       	push	r8
    4fba:	9f 92       	push	r9
    4fbc:	af 92       	push	r10
    4fbe:	cf 92       	push	r12
    4fc0:	ef 92       	push	r14
    4fc2:	ff 92       	push	r15
    4fc4:	0f 93       	push	r16
    4fc6:	1f 93       	push	r17
    4fc8:	cf 93       	push	r28
    4fca:	df 93       	push	r29
    4fcc:	cd b7       	in	r28, 0x3d	; 61
    4fce:	de b7       	in	r29, 0x3e	; 62
    4fd0:	f8 2e       	mov	r15, r24
    4fd2:	2a 01       	movw	r4, r20
    4fd4:	3b 01       	movw	r6, r22
    4fd6:	88 e0       	ldi	r24, 0x08	; 8
    4fd8:	90 e0       	ldi	r25, 0x00	; 0
    4fda:	c2 d7       	rcall	.+3972   	; 0x5f60 <malloc>
    4fdc:	8c 01       	movw	r16, r24
    4fde:	8f 2d       	mov	r24, r15
    4fe0:	90 e0       	ldi	r25, 0x00	; 0
    4fe2:	88 0f       	add	r24, r24
    4fe4:	99 1f       	adc	r25, r25
    4fe6:	fc 01       	movw	r30, r24
    4fe8:	e0 53       	subi	r30, 0x30	; 48
    4fea:	f5 4e       	sbci	r31, 0xE5	; 229
    4fec:	11 83       	std	Z+1, r17	; 0x01
    4fee:	00 83       	st	Z, r16
    4ff0:	fc 01       	movw	r30, r24
    4ff2:	e2 5f       	subi	r30, 0xF2	; 242
    4ff4:	fd 4f       	sbci	r31, 0xFD	; 253
    4ff6:	80 81       	ld	r24, Z
    4ff8:	91 81       	ldd	r25, Z+1	; 0x01
    4ffa:	d8 01       	movw	r26, r16
    4ffc:	8d 93       	st	X+, r24
    4ffe:	9c 93       	st	X, r25
    5000:	6c 2d       	mov	r22, r12
    5002:	70 e0       	ldi	r23, 0x00	; 0
    5004:	84 e0       	ldi	r24, 0x04	; 4
    5006:	90 e0       	ldi	r25, 0x00	; 0
    5008:	91 d7       	rcall	.+3874   	; 0x5f2c <calloc>
    500a:	1c 01       	movw	r2, r24
    500c:	61 e0       	ldi	r22, 0x01	; 1
    500e:	70 e0       	ldi	r23, 0x00	; 0
    5010:	86 e0       	ldi	r24, 0x06	; 6
    5012:	90 e0       	ldi	r25, 0x00	; 0
    5014:	8b d7       	rcall	.+3862   	; 0x5f2c <calloc>
    5016:	7c 01       	movw	r14, r24
    5018:	4c 2d       	mov	r20, r12
    501a:	b1 01       	movw	r22, r2
    501c:	2b d5       	rcall	.+2646   	; 0x5a74 <fifo_init>
    501e:	f8 01       	movw	r30, r16
    5020:	f5 82       	std	Z+5, r15	; 0x05
    5022:	e4 82       	std	Z+4, r14	; 0x04
    5024:	6a 2d       	mov	r22, r10
    5026:	70 e0       	ldi	r23, 0x00	; 0
    5028:	84 e0       	ldi	r24, 0x04	; 4
    502a:	90 e0       	ldi	r25, 0x00	; 0
    502c:	7f d7       	rcall	.+3838   	; 0x5f2c <calloc>
    502e:	1c 01       	movw	r2, r24
    5030:	61 e0       	ldi	r22, 0x01	; 1
    5032:	70 e0       	ldi	r23, 0x00	; 0
    5034:	86 e0       	ldi	r24, 0x06	; 6
    5036:	90 e0       	ldi	r25, 0x00	; 0
    5038:	79 d7       	rcall	.+3826   	; 0x5f2c <calloc>
    503a:	7c 01       	movw	r14, r24
    503c:	4a 2d       	mov	r20, r10
    503e:	b1 01       	movw	r22, r2
    5040:	19 d5       	rcall	.+2610   	; 0x5a74 <fifo_init>
    5042:	d8 01       	movw	r26, r16
    5044:	13 96       	adiw	r26, 0x03	; 3
    5046:	fc 92       	st	X, r15
    5048:	ee 92       	st	-X, r14
    504a:	12 97       	sbiw	r26, 0x02	; 2
    504c:	17 96       	adiw	r26, 0x07	; 7
    504e:	9c 92       	st	X, r9
    5050:	8e 92       	st	-X, r8
    5052:	16 97       	sbiw	r26, 0x06	; 6
    5054:	ff b6       	in	r15, 0x3f	; 63
    5056:	f8 94       	cli
    5058:	ed 91       	ld	r30, X+
    505a:	fc 91       	ld	r31, X
    505c:	11 97       	sbiw	r26, 0x01	; 1
    505e:	36 97       	sbiw	r30, 0x06	; 6
    5060:	80 81       	ld	r24, Z
    5062:	82 60       	ori	r24, 0x02	; 2
    5064:	80 83       	st	Z, r24
    5066:	8d 90       	ld	r8, X+
    5068:	9c 90       	ld	r9, X
    506a:	c3 01       	movw	r24, r6
    506c:	b2 01       	movw	r22, r4
    506e:	1c d6       	rcall	.+3128   	; 0x5ca8 <__floatunsisf>
    5070:	20 e0       	ldi	r18, 0x00	; 0
    5072:	30 e0       	ldi	r19, 0x00	; 0
    5074:	40 e0       	ldi	r20, 0x00	; 0
    5076:	51 e4       	ldi	r21, 0x41	; 65
    5078:	a5 d6       	rcall	.+3402   	; 0x5dc4 <__mulsf3>
    507a:	9b 01       	movw	r18, r22
    507c:	ac 01       	movw	r20, r24
    507e:	60 e0       	ldi	r22, 0x00	; 0
    5080:	74 e2       	ldi	r23, 0x24	; 36
    5082:	84 e7       	ldi	r24, 0x74	; 116
    5084:	9b e4       	ldi	r25, 0x4B	; 75
    5086:	77 d5       	rcall	.+2798   	; 0x5b76 <__divsf3>
    5088:	20 e0       	ldi	r18, 0x00	; 0
    508a:	30 e0       	ldi	r19, 0x00	; 0
    508c:	40 e8       	ldi	r20, 0x80	; 128
    508e:	5f e3       	ldi	r21, 0x3F	; 63
    5090:	0d d5       	rcall	.+2586   	; 0x5aac <__subsf3>
    5092:	de d5       	rcall	.+3004   	; 0x5c50 <__fixunssfsi>
    5094:	f4 01       	movw	r30, r8
    5096:	32 97       	sbiw	r30, 0x02	; 2
    5098:	60 83       	st	Z, r22
    509a:	d8 01       	movw	r26, r16
    509c:	ed 91       	ld	r30, X+
    509e:	fc 91       	ld	r31, X
    50a0:	11 97       	sbiw	r26, 0x01	; 1
    50a2:	35 97       	sbiw	r30, 0x05	; 5
    50a4:	88 e9       	ldi	r24, 0x98	; 152
    50a6:	80 83       	st	Z, r24
    50a8:	ed 91       	ld	r30, X+
    50aa:	fc 91       	ld	r31, X
    50ac:	34 97       	sbiw	r30, 0x04	; 4
    50ae:	86 e0       	ldi	r24, 0x06	; 6
    50b0:	80 83       	st	Z, r24
    50b2:	ff be       	out	0x3f, r15	; 63
    50b4:	c8 01       	movw	r24, r16
    50b6:	df 91       	pop	r29
    50b8:	cf 91       	pop	r28
    50ba:	1f 91       	pop	r17
    50bc:	0f 91       	pop	r16
    50be:	ff 90       	pop	r15
    50c0:	ef 90       	pop	r14
    50c2:	cf 90       	pop	r12
    50c4:	af 90       	pop	r10
    50c6:	9f 90       	pop	r9
    50c8:	8f 90       	pop	r8
    50ca:	7f 90       	pop	r7
    50cc:	6f 90       	pop	r6
    50ce:	5f 90       	pop	r5
    50d0:	4f 90       	pop	r4
    50d2:	3f 90       	pop	r3
    50d4:	2f 90       	pop	r2
    50d6:	08 95       	ret

000050d8 <serial_send_byte>:
    50d8:	cf 93       	push	r28
    50da:	df 93       	push	r29
    50dc:	ec 01       	movw	r28, r24
    50de:	ea 81       	ldd	r30, Y+2	; 0x02
    50e0:	fb 81       	ldd	r31, Y+3	; 0x03
    50e2:	93 81       	ldd	r25, Z+3	; 0x03
    50e4:	82 81       	ldd	r24, Z+2	; 0x02
    50e6:	25 81       	ldd	r18, Z+5	; 0x05
    50e8:	98 1b       	sub	r25, r24
    50ea:	92 23       	and	r25, r18
    50ec:	84 81       	ldd	r24, Z+4	; 0x04
    50ee:	98 17       	cp	r25, r24
    50f0:	a1 f0       	breq	.+40     	; 0x511a <serial_send_byte+0x42>
    50f2:	93 81       	ldd	r25, Z+3	; 0x03
    50f4:	26 95       	lsr	r18
    50f6:	29 23       	and	r18, r25
    50f8:	a0 81       	ld	r26, Z
    50fa:	b1 81       	ldd	r27, Z+1	; 0x01
    50fc:	a2 0f       	add	r26, r18
    50fe:	b1 1d       	adc	r27, r1
    5100:	6c 93       	st	X, r22
    5102:	9f 5f       	subi	r25, 0xFF	; 255
    5104:	25 81       	ldd	r18, Z+5	; 0x05
    5106:	92 23       	and	r25, r18
    5108:	93 83       	std	Z+3, r25	; 0x03
    510a:	e8 81       	ld	r30, Y
    510c:	f9 81       	ldd	r31, Y+1	; 0x01
    510e:	35 97       	sbiw	r30, 0x05	; 5
    5110:	80 81       	ld	r24, Z
    5112:	80 62       	ori	r24, 0x20	; 32
    5114:	80 83       	st	Z, r24
    5116:	80 e0       	ldi	r24, 0x00	; 0
    5118:	01 c0       	rjmp	.+2      	; 0x511c <serial_send_byte+0x44>
    511a:	82 e0       	ldi	r24, 0x02	; 2
    511c:	df 91       	pop	r29
    511e:	cf 91       	pop	r28
    5120:	08 95       	ret

00005122 <serial_send_bytes>:
    5122:	ef 92       	push	r14
    5124:	ff 92       	push	r15
    5126:	0f 93       	push	r16
    5128:	1f 93       	push	r17
    512a:	cf 93       	push	r28
    512c:	df 93       	push	r29
    512e:	7c 01       	movw	r14, r24
    5130:	dc 01       	movw	r26, r24
    5132:	12 96       	adiw	r26, 0x02	; 2
    5134:	ed 91       	ld	r30, X+
    5136:	fc 91       	ld	r31, X
    5138:	13 97       	sbiw	r26, 0x03	; 3
    513a:	93 81       	ldd	r25, Z+3	; 0x03
    513c:	82 81       	ldd	r24, Z+2	; 0x02
    513e:	98 1b       	sub	r25, r24
    5140:	85 81       	ldd	r24, Z+5	; 0x05
    5142:	98 23       	and	r25, r24
    5144:	84 81       	ldd	r24, Z+4	; 0x04
    5146:	89 1b       	sub	r24, r25
    5148:	86 17       	cp	r24, r22
    514a:	98 f1       	brcs	.+102    	; 0x51b2 <serial_send_bytes+0x90>
    514c:	66 23       	and	r22, r22
    514e:	41 f1       	breq	.+80     	; 0x51a0 <serial_send_bytes+0x7e>
    5150:	84 2f       	mov	r24, r20
    5152:	95 2f       	mov	r25, r21
    5154:	dc 01       	movw	r26, r24
    5156:	61 50       	subi	r22, 0x01	; 1
    5158:	46 2f       	mov	r20, r22
    515a:	50 e0       	ldi	r21, 0x00	; 0
    515c:	4f 5f       	subi	r20, 0xFF	; 255
    515e:	5f 4f       	sbci	r21, 0xFF	; 255
    5160:	48 0f       	add	r20, r24
    5162:	59 1f       	adc	r21, r25
    5164:	e7 01       	movw	r28, r14
    5166:	ea 81       	ldd	r30, Y+2	; 0x02
    5168:	fb 81       	ldd	r31, Y+3	; 0x03
    516a:	93 81       	ldd	r25, Z+3	; 0x03
    516c:	82 81       	ldd	r24, Z+2	; 0x02
    516e:	25 81       	ldd	r18, Z+5	; 0x05
    5170:	98 1b       	sub	r25, r24
    5172:	92 23       	and	r25, r18
    5174:	84 81       	ldd	r24, Z+4	; 0x04
    5176:	98 17       	cp	r25, r24
    5178:	79 f0       	breq	.+30     	; 0x5198 <serial_send_bytes+0x76>
    517a:	8c 91       	ld	r24, X
    517c:	93 81       	ldd	r25, Z+3	; 0x03
    517e:	26 95       	lsr	r18
    5180:	29 23       	and	r18, r25
    5182:	60 81       	ld	r22, Z
    5184:	71 81       	ldd	r23, Z+1	; 0x01
    5186:	8b 01       	movw	r16, r22
    5188:	02 0f       	add	r16, r18
    518a:	11 1d       	adc	r17, r1
    518c:	e8 01       	movw	r28, r16
    518e:	88 83       	st	Y, r24
    5190:	9f 5f       	subi	r25, 0xFF	; 255
    5192:	85 81       	ldd	r24, Z+5	; 0x05
    5194:	98 23       	and	r25, r24
    5196:	93 83       	std	Z+3, r25	; 0x03
    5198:	11 96       	adiw	r26, 0x01	; 1
    519a:	a4 17       	cp	r26, r20
    519c:	b5 07       	cpc	r27, r21
    519e:	11 f7       	brne	.-60     	; 0x5164 <serial_send_bytes+0x42>
    51a0:	d7 01       	movw	r26, r14
    51a2:	ed 91       	ld	r30, X+
    51a4:	fc 91       	ld	r31, X
    51a6:	35 97       	sbiw	r30, 0x05	; 5
    51a8:	80 81       	ld	r24, Z
    51aa:	80 62       	ori	r24, 0x20	; 32
    51ac:	80 83       	st	Z, r24
    51ae:	80 e0       	ldi	r24, 0x00	; 0
    51b0:	01 c0       	rjmp	.+2      	; 0x51b4 <serial_send_bytes+0x92>
    51b2:	82 e0       	ldi	r24, 0x02	; 2
    51b4:	df 91       	pop	r29
    51b6:	cf 91       	pop	r28
    51b8:	1f 91       	pop	r17
    51ba:	0f 91       	pop	r16
    51bc:	ff 90       	pop	r15
    51be:	ef 90       	pop	r14
    51c0:	08 95       	ret

000051c2 <serial_get_byte>:
    51c2:	dc 01       	movw	r26, r24
    51c4:	14 96       	adiw	r26, 0x04	; 4
    51c6:	ed 91       	ld	r30, X+
    51c8:	fc 91       	ld	r31, X
    51ca:	15 97       	sbiw	r26, 0x05	; 5
    51cc:	93 81       	ldd	r25, Z+3	; 0x03
    51ce:	82 81       	ldd	r24, Z+2	; 0x02
    51d0:	98 17       	cp	r25, r24
    51d2:	89 f0       	breq	.+34     	; 0x51f6 <serial_get_byte+0x34>
    51d4:	92 81       	ldd	r25, Z+2	; 0x02
    51d6:	85 81       	ldd	r24, Z+5	; 0x05
    51d8:	86 95       	lsr	r24
    51da:	89 23       	and	r24, r25
    51dc:	a0 81       	ld	r26, Z
    51de:	b1 81       	ldd	r27, Z+1	; 0x01
    51e0:	a8 0f       	add	r26, r24
    51e2:	b1 1d       	adc	r27, r1
    51e4:	8c 91       	ld	r24, X
    51e6:	db 01       	movw	r26, r22
    51e8:	8c 93       	st	X, r24
    51ea:	9f 5f       	subi	r25, 0xFF	; 255
    51ec:	85 81       	ldd	r24, Z+5	; 0x05
    51ee:	98 23       	and	r25, r24
    51f0:	92 83       	std	Z+2, r25	; 0x02
    51f2:	80 e0       	ldi	r24, 0x00	; 0
    51f4:	08 95       	ret
    51f6:	83 e0       	ldi	r24, 0x03	; 3
    51f8:	08 95       	ret

000051fa <__vector_25>:
    51fa:	1f 92       	push	r1
    51fc:	0f 92       	push	r0
    51fe:	0f b6       	in	r0, 0x3f	; 63
    5200:	0f 92       	push	r0
    5202:	11 24       	eor	r1, r1
    5204:	0b b6       	in	r0, 0x3b	; 59
    5206:	0f 92       	push	r0
    5208:	2f 93       	push	r18
    520a:	3f 93       	push	r19
    520c:	4f 93       	push	r20
    520e:	5f 93       	push	r21
    5210:	6f 93       	push	r22
    5212:	7f 93       	push	r23
    5214:	8f 93       	push	r24
    5216:	9f 93       	push	r25
    5218:	af 93       	push	r26
    521a:	bf 93       	push	r27
    521c:	cf 93       	push	r28
    521e:	df 93       	push	r29
    5220:	ef 93       	push	r30
    5222:	ff 93       	push	r31
    5224:	a0 91 d0 1a 	lds	r26, 0x1AD0	; 0x801ad0 <_ser_handle>
    5228:	b0 91 d1 1a 	lds	r27, 0x1AD1	; 0x801ad1 <_ser_handle+0x1>
    522c:	10 97       	sbiw	r26, 0x00	; 0
    522e:	11 f1       	breq	.+68     	; 0x5274 <__vector_25+0x7a>
    5230:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    5234:	14 96       	adiw	r26, 0x04	; 4
    5236:	ed 91       	ld	r30, X+
    5238:	fc 91       	ld	r31, X
    523a:	15 97       	sbiw	r26, 0x05	; 5
    523c:	93 81       	ldd	r25, Z+3	; 0x03
    523e:	82 81       	ldd	r24, Z+2	; 0x02
    5240:	25 81       	ldd	r18, Z+5	; 0x05
    5242:	98 1b       	sub	r25, r24
    5244:	92 23       	and	r25, r18
    5246:	84 81       	ldd	r24, Z+4	; 0x04
    5248:	98 17       	cp	r25, r24
    524a:	61 f0       	breq	.+24     	; 0x5264 <__vector_25+0x6a>
    524c:	83 81       	ldd	r24, Z+3	; 0x03
    524e:	26 95       	lsr	r18
    5250:	28 23       	and	r18, r24
    5252:	c0 81       	ld	r28, Z
    5254:	d1 81       	ldd	r29, Z+1	; 0x01
    5256:	c2 0f       	add	r28, r18
    5258:	d1 1d       	adc	r29, r1
    525a:	68 83       	st	Y, r22
    525c:	8f 5f       	subi	r24, 0xFF	; 255
    525e:	95 81       	ldd	r25, Z+5	; 0x05
    5260:	89 23       	and	r24, r25
    5262:	83 83       	std	Z+3, r24	; 0x03
    5264:	16 96       	adiw	r26, 0x06	; 6
    5266:	ed 91       	ld	r30, X+
    5268:	fc 91       	ld	r31, X
    526a:	17 97       	sbiw	r26, 0x07	; 7
    526c:	30 97       	sbiw	r30, 0x00	; 0
    526e:	11 f0       	breq	.+4      	; 0x5274 <__vector_25+0x7a>
    5270:	cd 01       	movw	r24, r26
    5272:	19 95       	eicall
    5274:	ff 91       	pop	r31
    5276:	ef 91       	pop	r30
    5278:	df 91       	pop	r29
    527a:	cf 91       	pop	r28
    527c:	bf 91       	pop	r27
    527e:	af 91       	pop	r26
    5280:	9f 91       	pop	r25
    5282:	8f 91       	pop	r24
    5284:	7f 91       	pop	r23
    5286:	6f 91       	pop	r22
    5288:	5f 91       	pop	r21
    528a:	4f 91       	pop	r20
    528c:	3f 91       	pop	r19
    528e:	2f 91       	pop	r18
    5290:	0f 90       	pop	r0
    5292:	0b be       	out	0x3b, r0	; 59
    5294:	0f 90       	pop	r0
    5296:	0f be       	out	0x3f, r0	; 63
    5298:	0f 90       	pop	r0
    529a:	1f 90       	pop	r1
    529c:	18 95       	reti

0000529e <__vector_26>:
    529e:	1f 92       	push	r1
    52a0:	0f 92       	push	r0
    52a2:	0f b6       	in	r0, 0x3f	; 63
    52a4:	0f 92       	push	r0
    52a6:	11 24       	eor	r1, r1
    52a8:	0b b6       	in	r0, 0x3b	; 59
    52aa:	0f 92       	push	r0
    52ac:	2f 93       	push	r18
    52ae:	8f 93       	push	r24
    52b0:	9f 93       	push	r25
    52b2:	af 93       	push	r26
    52b4:	bf 93       	push	r27
    52b6:	ef 93       	push	r30
    52b8:	ff 93       	push	r31
    52ba:	e0 91 d0 1a 	lds	r30, 0x1AD0	; 0x801ad0 <_ser_handle>
    52be:	f0 91 d1 1a 	lds	r31, 0x1AD1	; 0x801ad1 <_ser_handle+0x1>
    52c2:	30 97       	sbiw	r30, 0x00	; 0
    52c4:	b9 f0       	breq	.+46     	; 0x52f4 <__vector_26+0x56>
    52c6:	02 80       	ldd	r0, Z+2	; 0x02
    52c8:	f3 81       	ldd	r31, Z+3	; 0x03
    52ca:	e0 2d       	mov	r30, r0
    52cc:	93 81       	ldd	r25, Z+3	; 0x03
    52ce:	82 81       	ldd	r24, Z+2	; 0x02
    52d0:	98 17       	cp	r25, r24
    52d2:	b1 f0       	breq	.+44     	; 0x5300 <__vector_26+0x62>
    52d4:	92 81       	ldd	r25, Z+2	; 0x02
    52d6:	85 81       	ldd	r24, Z+5	; 0x05
    52d8:	28 2f       	mov	r18, r24
    52da:	26 95       	lsr	r18
    52dc:	29 23       	and	r18, r25
    52de:	a0 81       	ld	r26, Z
    52e0:	b1 81       	ldd	r27, Z+1	; 0x01
    52e2:	a2 0f       	add	r26, r18
    52e4:	b1 1d       	adc	r27, r1
    52e6:	2c 91       	ld	r18, X
    52e8:	9f 5f       	subi	r25, 0xFF	; 255
    52ea:	89 23       	and	r24, r25
    52ec:	82 83       	std	Z+2, r24	; 0x02
    52ee:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    52f2:	0b c0       	rjmp	.+22     	; 0x530a <__vector_26+0x6c>
    52f4:	e1 ec       	ldi	r30, 0xC1	; 193
    52f6:	f0 e0       	ldi	r31, 0x00	; 0
    52f8:	80 81       	ld	r24, Z
    52fa:	8f 7d       	andi	r24, 0xDF	; 223
    52fc:	80 83       	st	Z, r24
    52fe:	05 c0       	rjmp	.+10     	; 0x530a <__vector_26+0x6c>
    5300:	e1 ec       	ldi	r30, 0xC1	; 193
    5302:	f0 e0       	ldi	r31, 0x00	; 0
    5304:	80 81       	ld	r24, Z
    5306:	8f 7d       	andi	r24, 0xDF	; 223
    5308:	80 83       	st	Z, r24
    530a:	ff 91       	pop	r31
    530c:	ef 91       	pop	r30
    530e:	bf 91       	pop	r27
    5310:	af 91       	pop	r26
    5312:	9f 91       	pop	r25
    5314:	8f 91       	pop	r24
    5316:	2f 91       	pop	r18
    5318:	0f 90       	pop	r0
    531a:	0b be       	out	0x3b, r0	; 59
    531c:	0f 90       	pop	r0
    531e:	0f be       	out	0x3f, r0	; 63
    5320:	0f 90       	pop	r0
    5322:	1f 90       	pop	r1
    5324:	18 95       	reti

00005326 <__vector_36>:
    5326:	1f 92       	push	r1
    5328:	0f 92       	push	r0
    532a:	0f b6       	in	r0, 0x3f	; 63
    532c:	0f 92       	push	r0
    532e:	11 24       	eor	r1, r1
    5330:	0b b6       	in	r0, 0x3b	; 59
    5332:	0f 92       	push	r0
    5334:	2f 93       	push	r18
    5336:	3f 93       	push	r19
    5338:	4f 93       	push	r20
    533a:	5f 93       	push	r21
    533c:	6f 93       	push	r22
    533e:	7f 93       	push	r23
    5340:	8f 93       	push	r24
    5342:	9f 93       	push	r25
    5344:	af 93       	push	r26
    5346:	bf 93       	push	r27
    5348:	cf 93       	push	r28
    534a:	df 93       	push	r29
    534c:	ef 93       	push	r30
    534e:	ff 93       	push	r31
    5350:	a0 91 d2 1a 	lds	r26, 0x1AD2	; 0x801ad2 <_ser_handle+0x2>
    5354:	b0 91 d3 1a 	lds	r27, 0x1AD3	; 0x801ad3 <_ser_handle+0x3>
    5358:	10 97       	sbiw	r26, 0x00	; 0
    535a:	11 f1       	breq	.+68     	; 0x53a0 <__vector_36+0x7a>
    535c:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    5360:	14 96       	adiw	r26, 0x04	; 4
    5362:	ed 91       	ld	r30, X+
    5364:	fc 91       	ld	r31, X
    5366:	15 97       	sbiw	r26, 0x05	; 5
    5368:	93 81       	ldd	r25, Z+3	; 0x03
    536a:	82 81       	ldd	r24, Z+2	; 0x02
    536c:	25 81       	ldd	r18, Z+5	; 0x05
    536e:	98 1b       	sub	r25, r24
    5370:	92 23       	and	r25, r18
    5372:	84 81       	ldd	r24, Z+4	; 0x04
    5374:	98 17       	cp	r25, r24
    5376:	61 f0       	breq	.+24     	; 0x5390 <__vector_36+0x6a>
    5378:	83 81       	ldd	r24, Z+3	; 0x03
    537a:	26 95       	lsr	r18
    537c:	28 23       	and	r18, r24
    537e:	c0 81       	ld	r28, Z
    5380:	d1 81       	ldd	r29, Z+1	; 0x01
    5382:	c2 0f       	add	r28, r18
    5384:	d1 1d       	adc	r29, r1
    5386:	68 83       	st	Y, r22
    5388:	8f 5f       	subi	r24, 0xFF	; 255
    538a:	95 81       	ldd	r25, Z+5	; 0x05
    538c:	89 23       	and	r24, r25
    538e:	83 83       	std	Z+3, r24	; 0x03
    5390:	16 96       	adiw	r26, 0x06	; 6
    5392:	ed 91       	ld	r30, X+
    5394:	fc 91       	ld	r31, X
    5396:	17 97       	sbiw	r26, 0x07	; 7
    5398:	30 97       	sbiw	r30, 0x00	; 0
    539a:	11 f0       	breq	.+4      	; 0x53a0 <__vector_36+0x7a>
    539c:	cd 01       	movw	r24, r26
    539e:	19 95       	eicall
    53a0:	ff 91       	pop	r31
    53a2:	ef 91       	pop	r30
    53a4:	df 91       	pop	r29
    53a6:	cf 91       	pop	r28
    53a8:	bf 91       	pop	r27
    53aa:	af 91       	pop	r26
    53ac:	9f 91       	pop	r25
    53ae:	8f 91       	pop	r24
    53b0:	7f 91       	pop	r23
    53b2:	6f 91       	pop	r22
    53b4:	5f 91       	pop	r21
    53b6:	4f 91       	pop	r20
    53b8:	3f 91       	pop	r19
    53ba:	2f 91       	pop	r18
    53bc:	0f 90       	pop	r0
    53be:	0b be       	out	0x3b, r0	; 59
    53c0:	0f 90       	pop	r0
    53c2:	0f be       	out	0x3f, r0	; 63
    53c4:	0f 90       	pop	r0
    53c6:	1f 90       	pop	r1
    53c8:	18 95       	reti

000053ca <__vector_37>:
    53ca:	1f 92       	push	r1
    53cc:	0f 92       	push	r0
    53ce:	0f b6       	in	r0, 0x3f	; 63
    53d0:	0f 92       	push	r0
    53d2:	11 24       	eor	r1, r1
    53d4:	0b b6       	in	r0, 0x3b	; 59
    53d6:	0f 92       	push	r0
    53d8:	2f 93       	push	r18
    53da:	8f 93       	push	r24
    53dc:	9f 93       	push	r25
    53de:	af 93       	push	r26
    53e0:	bf 93       	push	r27
    53e2:	ef 93       	push	r30
    53e4:	ff 93       	push	r31
    53e6:	e0 91 d2 1a 	lds	r30, 0x1AD2	; 0x801ad2 <_ser_handle+0x2>
    53ea:	f0 91 d3 1a 	lds	r31, 0x1AD3	; 0x801ad3 <_ser_handle+0x3>
    53ee:	30 97       	sbiw	r30, 0x00	; 0
    53f0:	b9 f0       	breq	.+46     	; 0x5420 <__vector_37+0x56>
    53f2:	02 80       	ldd	r0, Z+2	; 0x02
    53f4:	f3 81       	ldd	r31, Z+3	; 0x03
    53f6:	e0 2d       	mov	r30, r0
    53f8:	93 81       	ldd	r25, Z+3	; 0x03
    53fa:	82 81       	ldd	r24, Z+2	; 0x02
    53fc:	98 17       	cp	r25, r24
    53fe:	b1 f0       	breq	.+44     	; 0x542c <__vector_37+0x62>
    5400:	92 81       	ldd	r25, Z+2	; 0x02
    5402:	85 81       	ldd	r24, Z+5	; 0x05
    5404:	28 2f       	mov	r18, r24
    5406:	26 95       	lsr	r18
    5408:	29 23       	and	r18, r25
    540a:	a0 81       	ld	r26, Z
    540c:	b1 81       	ldd	r27, Z+1	; 0x01
    540e:	a2 0f       	add	r26, r18
    5410:	b1 1d       	adc	r27, r1
    5412:	2c 91       	ld	r18, X
    5414:	9f 5f       	subi	r25, 0xFF	; 255
    5416:	89 23       	and	r24, r25
    5418:	82 83       	std	Z+2, r24	; 0x02
    541a:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    541e:	0b c0       	rjmp	.+22     	; 0x5436 <__vector_37+0x6c>
    5420:	e9 ec       	ldi	r30, 0xC9	; 201
    5422:	f0 e0       	ldi	r31, 0x00	; 0
    5424:	80 81       	ld	r24, Z
    5426:	8f 7d       	andi	r24, 0xDF	; 223
    5428:	80 83       	st	Z, r24
    542a:	05 c0       	rjmp	.+10     	; 0x5436 <__vector_37+0x6c>
    542c:	e9 ec       	ldi	r30, 0xC9	; 201
    542e:	f0 e0       	ldi	r31, 0x00	; 0
    5430:	80 81       	ld	r24, Z
    5432:	8f 7d       	andi	r24, 0xDF	; 223
    5434:	80 83       	st	Z, r24
    5436:	ff 91       	pop	r31
    5438:	ef 91       	pop	r30
    543a:	bf 91       	pop	r27
    543c:	af 91       	pop	r26
    543e:	9f 91       	pop	r25
    5440:	8f 91       	pop	r24
    5442:	2f 91       	pop	r18
    5444:	0f 90       	pop	r0
    5446:	0b be       	out	0x3b, r0	; 59
    5448:	0f 90       	pop	r0
    544a:	0f be       	out	0x3f, r0	; 63
    544c:	0f 90       	pop	r0
    544e:	1f 90       	pop	r1
    5450:	18 95       	reti

00005452 <__vector_51>:
    5452:	1f 92       	push	r1
    5454:	0f 92       	push	r0
    5456:	0f b6       	in	r0, 0x3f	; 63
    5458:	0f 92       	push	r0
    545a:	11 24       	eor	r1, r1
    545c:	0b b6       	in	r0, 0x3b	; 59
    545e:	0f 92       	push	r0
    5460:	2f 93       	push	r18
    5462:	3f 93       	push	r19
    5464:	4f 93       	push	r20
    5466:	5f 93       	push	r21
    5468:	6f 93       	push	r22
    546a:	7f 93       	push	r23
    546c:	8f 93       	push	r24
    546e:	9f 93       	push	r25
    5470:	af 93       	push	r26
    5472:	bf 93       	push	r27
    5474:	cf 93       	push	r28
    5476:	df 93       	push	r29
    5478:	ef 93       	push	r30
    547a:	ff 93       	push	r31
    547c:	a0 91 d4 1a 	lds	r26, 0x1AD4	; 0x801ad4 <_ser_handle+0x4>
    5480:	b0 91 d5 1a 	lds	r27, 0x1AD5	; 0x801ad5 <_ser_handle+0x5>
    5484:	10 97       	sbiw	r26, 0x00	; 0
    5486:	11 f1       	breq	.+68     	; 0x54cc <__vector_51+0x7a>
    5488:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    548c:	14 96       	adiw	r26, 0x04	; 4
    548e:	ed 91       	ld	r30, X+
    5490:	fc 91       	ld	r31, X
    5492:	15 97       	sbiw	r26, 0x05	; 5
    5494:	93 81       	ldd	r25, Z+3	; 0x03
    5496:	82 81       	ldd	r24, Z+2	; 0x02
    5498:	25 81       	ldd	r18, Z+5	; 0x05
    549a:	98 1b       	sub	r25, r24
    549c:	92 23       	and	r25, r18
    549e:	84 81       	ldd	r24, Z+4	; 0x04
    54a0:	98 17       	cp	r25, r24
    54a2:	61 f0       	breq	.+24     	; 0x54bc <__vector_51+0x6a>
    54a4:	83 81       	ldd	r24, Z+3	; 0x03
    54a6:	26 95       	lsr	r18
    54a8:	28 23       	and	r18, r24
    54aa:	c0 81       	ld	r28, Z
    54ac:	d1 81       	ldd	r29, Z+1	; 0x01
    54ae:	c2 0f       	add	r28, r18
    54b0:	d1 1d       	adc	r29, r1
    54b2:	68 83       	st	Y, r22
    54b4:	8f 5f       	subi	r24, 0xFF	; 255
    54b6:	95 81       	ldd	r25, Z+5	; 0x05
    54b8:	89 23       	and	r24, r25
    54ba:	83 83       	std	Z+3, r24	; 0x03
    54bc:	16 96       	adiw	r26, 0x06	; 6
    54be:	ed 91       	ld	r30, X+
    54c0:	fc 91       	ld	r31, X
    54c2:	17 97       	sbiw	r26, 0x07	; 7
    54c4:	30 97       	sbiw	r30, 0x00	; 0
    54c6:	11 f0       	breq	.+4      	; 0x54cc <__vector_51+0x7a>
    54c8:	cd 01       	movw	r24, r26
    54ca:	19 95       	eicall
    54cc:	ff 91       	pop	r31
    54ce:	ef 91       	pop	r30
    54d0:	df 91       	pop	r29
    54d2:	cf 91       	pop	r28
    54d4:	bf 91       	pop	r27
    54d6:	af 91       	pop	r26
    54d8:	9f 91       	pop	r25
    54da:	8f 91       	pop	r24
    54dc:	7f 91       	pop	r23
    54de:	6f 91       	pop	r22
    54e0:	5f 91       	pop	r21
    54e2:	4f 91       	pop	r20
    54e4:	3f 91       	pop	r19
    54e6:	2f 91       	pop	r18
    54e8:	0f 90       	pop	r0
    54ea:	0b be       	out	0x3b, r0	; 59
    54ec:	0f 90       	pop	r0
    54ee:	0f be       	out	0x3f, r0	; 63
    54f0:	0f 90       	pop	r0
    54f2:	1f 90       	pop	r1
    54f4:	18 95       	reti

000054f6 <__vector_52>:
    54f6:	1f 92       	push	r1
    54f8:	0f 92       	push	r0
    54fa:	0f b6       	in	r0, 0x3f	; 63
    54fc:	0f 92       	push	r0
    54fe:	11 24       	eor	r1, r1
    5500:	0b b6       	in	r0, 0x3b	; 59
    5502:	0f 92       	push	r0
    5504:	2f 93       	push	r18
    5506:	8f 93       	push	r24
    5508:	9f 93       	push	r25
    550a:	af 93       	push	r26
    550c:	bf 93       	push	r27
    550e:	ef 93       	push	r30
    5510:	ff 93       	push	r31
    5512:	e0 91 d4 1a 	lds	r30, 0x1AD4	; 0x801ad4 <_ser_handle+0x4>
    5516:	f0 91 d5 1a 	lds	r31, 0x1AD5	; 0x801ad5 <_ser_handle+0x5>
    551a:	30 97       	sbiw	r30, 0x00	; 0
    551c:	b9 f0       	breq	.+46     	; 0x554c <__vector_52+0x56>
    551e:	02 80       	ldd	r0, Z+2	; 0x02
    5520:	f3 81       	ldd	r31, Z+3	; 0x03
    5522:	e0 2d       	mov	r30, r0
    5524:	93 81       	ldd	r25, Z+3	; 0x03
    5526:	82 81       	ldd	r24, Z+2	; 0x02
    5528:	98 17       	cp	r25, r24
    552a:	b1 f0       	breq	.+44     	; 0x5558 <__vector_52+0x62>
    552c:	92 81       	ldd	r25, Z+2	; 0x02
    552e:	85 81       	ldd	r24, Z+5	; 0x05
    5530:	28 2f       	mov	r18, r24
    5532:	26 95       	lsr	r18
    5534:	29 23       	and	r18, r25
    5536:	a0 81       	ld	r26, Z
    5538:	b1 81       	ldd	r27, Z+1	; 0x01
    553a:	a2 0f       	add	r26, r18
    553c:	b1 1d       	adc	r27, r1
    553e:	2c 91       	ld	r18, X
    5540:	9f 5f       	subi	r25, 0xFF	; 255
    5542:	89 23       	and	r24, r25
    5544:	82 83       	std	Z+2, r24	; 0x02
    5546:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    554a:	0b c0       	rjmp	.+22     	; 0x5562 <__vector_52+0x6c>
    554c:	e1 ed       	ldi	r30, 0xD1	; 209
    554e:	f0 e0       	ldi	r31, 0x00	; 0
    5550:	80 81       	ld	r24, Z
    5552:	8f 7d       	andi	r24, 0xDF	; 223
    5554:	80 83       	st	Z, r24
    5556:	05 c0       	rjmp	.+10     	; 0x5562 <__vector_52+0x6c>
    5558:	e1 ed       	ldi	r30, 0xD1	; 209
    555a:	f0 e0       	ldi	r31, 0x00	; 0
    555c:	80 81       	ld	r24, Z
    555e:	8f 7d       	andi	r24, 0xDF	; 223
    5560:	80 83       	st	Z, r24
    5562:	ff 91       	pop	r31
    5564:	ef 91       	pop	r30
    5566:	bf 91       	pop	r27
    5568:	af 91       	pop	r26
    556a:	9f 91       	pop	r25
    556c:	8f 91       	pop	r24
    556e:	2f 91       	pop	r18
    5570:	0f 90       	pop	r0
    5572:	0b be       	out	0x3b, r0	; 59
    5574:	0f 90       	pop	r0
    5576:	0f be       	out	0x3f, r0	; 63
    5578:	0f 90       	pop	r0
    557a:	1f 90       	pop	r1
    557c:	18 95       	reti

0000557e <__vector_54>:
    557e:	1f 92       	push	r1
    5580:	0f 92       	push	r0
    5582:	0f b6       	in	r0, 0x3f	; 63
    5584:	0f 92       	push	r0
    5586:	11 24       	eor	r1, r1
    5588:	0b b6       	in	r0, 0x3b	; 59
    558a:	0f 92       	push	r0
    558c:	2f 93       	push	r18
    558e:	3f 93       	push	r19
    5590:	4f 93       	push	r20
    5592:	5f 93       	push	r21
    5594:	6f 93       	push	r22
    5596:	7f 93       	push	r23
    5598:	8f 93       	push	r24
    559a:	9f 93       	push	r25
    559c:	af 93       	push	r26
    559e:	bf 93       	push	r27
    55a0:	cf 93       	push	r28
    55a2:	df 93       	push	r29
    55a4:	ef 93       	push	r30
    55a6:	ff 93       	push	r31
    55a8:	a0 91 d6 1a 	lds	r26, 0x1AD6	; 0x801ad6 <_ser_handle+0x6>
    55ac:	b0 91 d7 1a 	lds	r27, 0x1AD7	; 0x801ad7 <_ser_handle+0x7>
    55b0:	10 97       	sbiw	r26, 0x00	; 0
    55b2:	11 f1       	breq	.+68     	; 0x55f8 <__vector_54+0x7a>
    55b4:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    55b8:	14 96       	adiw	r26, 0x04	; 4
    55ba:	ed 91       	ld	r30, X+
    55bc:	fc 91       	ld	r31, X
    55be:	15 97       	sbiw	r26, 0x05	; 5
    55c0:	93 81       	ldd	r25, Z+3	; 0x03
    55c2:	82 81       	ldd	r24, Z+2	; 0x02
    55c4:	25 81       	ldd	r18, Z+5	; 0x05
    55c6:	98 1b       	sub	r25, r24
    55c8:	92 23       	and	r25, r18
    55ca:	84 81       	ldd	r24, Z+4	; 0x04
    55cc:	98 17       	cp	r25, r24
    55ce:	61 f0       	breq	.+24     	; 0x55e8 <__vector_54+0x6a>
    55d0:	83 81       	ldd	r24, Z+3	; 0x03
    55d2:	26 95       	lsr	r18
    55d4:	28 23       	and	r18, r24
    55d6:	c0 81       	ld	r28, Z
    55d8:	d1 81       	ldd	r29, Z+1	; 0x01
    55da:	c2 0f       	add	r28, r18
    55dc:	d1 1d       	adc	r29, r1
    55de:	68 83       	st	Y, r22
    55e0:	8f 5f       	subi	r24, 0xFF	; 255
    55e2:	95 81       	ldd	r25, Z+5	; 0x05
    55e4:	89 23       	and	r24, r25
    55e6:	83 83       	std	Z+3, r24	; 0x03
    55e8:	16 96       	adiw	r26, 0x06	; 6
    55ea:	ed 91       	ld	r30, X+
    55ec:	fc 91       	ld	r31, X
    55ee:	17 97       	sbiw	r26, 0x07	; 7
    55f0:	30 97       	sbiw	r30, 0x00	; 0
    55f2:	11 f0       	breq	.+4      	; 0x55f8 <__vector_54+0x7a>
    55f4:	cd 01       	movw	r24, r26
    55f6:	19 95       	eicall
    55f8:	ff 91       	pop	r31
    55fa:	ef 91       	pop	r30
    55fc:	df 91       	pop	r29
    55fe:	cf 91       	pop	r28
    5600:	bf 91       	pop	r27
    5602:	af 91       	pop	r26
    5604:	9f 91       	pop	r25
    5606:	8f 91       	pop	r24
    5608:	7f 91       	pop	r23
    560a:	6f 91       	pop	r22
    560c:	5f 91       	pop	r21
    560e:	4f 91       	pop	r20
    5610:	3f 91       	pop	r19
    5612:	2f 91       	pop	r18
    5614:	0f 90       	pop	r0
    5616:	0b be       	out	0x3b, r0	; 59
    5618:	0f 90       	pop	r0
    561a:	0f be       	out	0x3f, r0	; 63
    561c:	0f 90       	pop	r0
    561e:	1f 90       	pop	r1
    5620:	18 95       	reti

00005622 <__vector_55>:
    5622:	1f 92       	push	r1
    5624:	0f 92       	push	r0
    5626:	0f b6       	in	r0, 0x3f	; 63
    5628:	0f 92       	push	r0
    562a:	11 24       	eor	r1, r1
    562c:	0b b6       	in	r0, 0x3b	; 59
    562e:	0f 92       	push	r0
    5630:	2f 93       	push	r18
    5632:	8f 93       	push	r24
    5634:	9f 93       	push	r25
    5636:	af 93       	push	r26
    5638:	bf 93       	push	r27
    563a:	ef 93       	push	r30
    563c:	ff 93       	push	r31
    563e:	e0 91 d6 1a 	lds	r30, 0x1AD6	; 0x801ad6 <_ser_handle+0x6>
    5642:	f0 91 d7 1a 	lds	r31, 0x1AD7	; 0x801ad7 <_ser_handle+0x7>
    5646:	30 97       	sbiw	r30, 0x00	; 0
    5648:	b9 f0       	breq	.+46     	; 0x5678 <__vector_55+0x56>
    564a:	02 80       	ldd	r0, Z+2	; 0x02
    564c:	f3 81       	ldd	r31, Z+3	; 0x03
    564e:	e0 2d       	mov	r30, r0
    5650:	93 81       	ldd	r25, Z+3	; 0x03
    5652:	82 81       	ldd	r24, Z+2	; 0x02
    5654:	98 17       	cp	r25, r24
    5656:	b1 f0       	breq	.+44     	; 0x5684 <__vector_55+0x62>
    5658:	92 81       	ldd	r25, Z+2	; 0x02
    565a:	85 81       	ldd	r24, Z+5	; 0x05
    565c:	28 2f       	mov	r18, r24
    565e:	26 95       	lsr	r18
    5660:	29 23       	and	r18, r25
    5662:	a0 81       	ld	r26, Z
    5664:	b1 81       	ldd	r27, Z+1	; 0x01
    5666:	a2 0f       	add	r26, r18
    5668:	b1 1d       	adc	r27, r1
    566a:	2c 91       	ld	r18, X
    566c:	9f 5f       	subi	r25, 0xFF	; 255
    566e:	89 23       	and	r24, r25
    5670:	82 83       	std	Z+2, r24	; 0x02
    5672:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    5676:	0b c0       	rjmp	.+22     	; 0x568e <__vector_55+0x6c>
    5678:	e1 e3       	ldi	r30, 0x31	; 49
    567a:	f1 e0       	ldi	r31, 0x01	; 1
    567c:	80 81       	ld	r24, Z
    567e:	8f 7d       	andi	r24, 0xDF	; 223
    5680:	80 83       	st	Z, r24
    5682:	05 c0       	rjmp	.+10     	; 0x568e <__vector_55+0x6c>
    5684:	e1 e3       	ldi	r30, 0x31	; 49
    5686:	f1 e0       	ldi	r31, 0x01	; 1
    5688:	80 81       	ld	r24, Z
    568a:	8f 7d       	andi	r24, 0xDF	; 223
    568c:	80 83       	st	Z, r24
    568e:	ff 91       	pop	r31
    5690:	ef 91       	pop	r30
    5692:	bf 91       	pop	r27
    5694:	af 91       	pop	r26
    5696:	9f 91       	pop	r25
    5698:	8f 91       	pop	r24
    569a:	2f 91       	pop	r18
    569c:	0f 90       	pop	r0
    569e:	0b be       	out	0x3b, r0	; 59
    56a0:	0f 90       	pop	r0
    56a2:	0f be       	out	0x3f, r0	; 63
    56a4:	0f 90       	pop	r0
    56a6:	1f 90       	pop	r1
    56a8:	18 95       	reti

000056aa <usart_getchar>:
    56aa:	cf 93       	push	r28
    56ac:	df 93       	push	r29
    56ae:	1f 92       	push	r1
    56b0:	cd b7       	in	r28, 0x3d	; 61
    56b2:	de b7       	in	r29, 0x3e	; 62
    56b4:	be 01       	movw	r22, r28
    56b6:	6f 5f       	subi	r22, 0xFF	; 255
    56b8:	7f 4f       	sbci	r23, 0xFF	; 255
    56ba:	80 91 d8 1a 	lds	r24, 0x1AD8	; 0x801ad8 <_com_serial_instance>
    56be:	90 91 d9 1a 	lds	r25, 0x1AD9	; 0x801ad9 <_com_serial_instance+0x1>
    56c2:	7f dd       	rcall	.-1282   	; 0x51c2 <serial_get_byte>
    56c4:	81 11       	cpse	r24, r1
    56c6:	f6 cf       	rjmp	.-20     	; 0x56b4 <usart_getchar+0xa>
    56c8:	89 81       	ldd	r24, Y+1	; 0x01
    56ca:	90 e0       	ldi	r25, 0x00	; 0
    56cc:	0f 90       	pop	r0
    56ce:	df 91       	pop	r29
    56d0:	cf 91       	pop	r28
    56d2:	08 95       	ret

000056d4 <usart_putchar>:
    56d4:	68 2f       	mov	r22, r24
    56d6:	80 91 d8 1a 	lds	r24, 0x1AD8	; 0x801ad8 <_com_serial_instance>
    56da:	90 91 d9 1a 	lds	r25, 0x1AD9	; 0x801ad9 <_com_serial_instance+0x1>
    56de:	fc dc       	rcall	.-1544   	; 0x50d8 <serial_send_byte>
    56e0:	80 e0       	ldi	r24, 0x00	; 0
    56e2:	90 e0       	ldi	r25, 0x00	; 0
    56e4:	08 95       	ret

000056e6 <stdioCreate>:
    56e6:	8f 92       	push	r8
    56e8:	9f 92       	push	r9
    56ea:	af 92       	push	r10
    56ec:	cf 92       	push	r12
    56ee:	ef 92       	push	r14
    56f0:	0f 93       	push	r16
    56f2:	81 2c       	mov	r8, r1
    56f4:	91 2c       	mov	r9, r1
    56f6:	68 94       	set
    56f8:	aa 24       	eor	r10, r10
    56fa:	a7 f8       	bld	r10, 7
    56fc:	68 94       	set
    56fe:	cc 24       	eor	r12, r12
    5700:	c7 f8       	bld	r12, 7
    5702:	e1 2c       	mov	r14, r1
    5704:	00 e0       	ldi	r16, 0x00	; 0
    5706:	23 e0       	ldi	r18, 0x03	; 3
    5708:	40 e0       	ldi	r20, 0x00	; 0
    570a:	51 ee       	ldi	r21, 0xE1	; 225
    570c:	60 e0       	ldi	r22, 0x00	; 0
    570e:	70 e0       	ldi	r23, 0x00	; 0
    5710:	4d dc       	rcall	.-1894   	; 0x4fac <serial_new_instance>
    5712:	90 93 d9 1a 	sts	0x1AD9, r25	; 0x801ad9 <_com_serial_instance+0x1>
    5716:	80 93 d8 1a 	sts	0x1AD8, r24	; 0x801ad8 <_com_serial_instance>
    571a:	e3 e2       	ldi	r30, 0x23	; 35
    571c:	fb e1       	ldi	r31, 0x1B	; 27
    571e:	86 e1       	ldi	r24, 0x16	; 22
    5720:	92 e0       	ldi	r25, 0x02	; 2
    5722:	91 83       	std	Z+1, r25	; 0x01
    5724:	80 83       	st	Z, r24
    5726:	93 83       	std	Z+3, r25	; 0x03
    5728:	82 83       	std	Z+2, r24	; 0x02
    572a:	0f 91       	pop	r16
    572c:	ef 90       	pop	r14
    572e:	cf 90       	pop	r12
    5730:	af 90       	pop	r10
    5732:	9f 90       	pop	r9
    5734:	8f 90       	pop	r8
    5736:	08 95       	ret

00005738 <_initTwiInterface>:
    5738:	80 91 e8 1a 	lds	r24, 0x1AE8	; 0x801ae8 <_twiIsInitiated>
    573c:	81 11       	cpse	r24, r1
    573e:	0c c0       	rjmp	.+24     	; 0x5758 <_initTwiInterface+0x20>
    5740:	8c e0       	ldi	r24, 0x0C	; 12
    5742:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    5746:	8f ef       	ldi	r24, 0xFF	; 255
    5748:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    574c:	84 e0       	ldi	r24, 0x04	; 4
    574e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    5752:	81 e0       	ldi	r24, 0x01	; 1
    5754:	80 93 e8 1a 	sts	0x1AE8, r24	; 0x801ae8 <_twiIsInitiated>
    5758:	08 95       	ret

0000575a <twiCreate>:
    575a:	af 92       	push	r10
    575c:	bf 92       	push	r11
    575e:	cf 92       	push	r12
    5760:	df 92       	push	r13
    5762:	ef 92       	push	r14
    5764:	ff 92       	push	r15
    5766:	0f 93       	push	r16
    5768:	1f 93       	push	r17
    576a:	cf 93       	push	r28
    576c:	df 93       	push	r29
    576e:	a8 2e       	mov	r10, r24
    5770:	b6 2e       	mov	r11, r22
    5772:	69 01       	movw	r12, r18
    5774:	7a 01       	movw	r14, r20
    5776:	84 e0       	ldi	r24, 0x04	; 4
    5778:	90 e0       	ldi	r25, 0x00	; 0
    577a:	f2 d3       	rcall	.+2020   	; 0x5f60 <malloc>
    577c:	ec 01       	movw	r28, r24
    577e:	89 2b       	or	r24, r25
    5780:	61 f1       	breq	.+88     	; 0x57da <twiCreate+0x80>
    5782:	a8 82       	st	Y, r10
    5784:	81 e0       	ldi	r24, 0x01	; 1
    5786:	b8 12       	cpse	r11, r24
    5788:	12 c0       	rjmp	.+36     	; 0x57ae <twiCreate+0x54>
    578a:	c7 01       	movw	r24, r14
    578c:	b6 01       	movw	r22, r12
    578e:	20 ea       	ldi	r18, 0xA0	; 160
    5790:	36 e8       	ldi	r19, 0x86	; 134
    5792:	41 e0       	ldi	r20, 0x01	; 1
    5794:	50 e0       	ldi	r21, 0x00	; 0
    5796:	8c d3       	rcall	.+1816   	; 0x5eb0 <__udivmodsi4>
    5798:	da 01       	movw	r26, r20
    579a:	c9 01       	movw	r24, r18
    579c:	40 97       	sbiw	r24, 0x10	; 16
    579e:	a1 09       	sbc	r26, r1
    57a0:	b1 09       	sbc	r27, r1
    57a2:	b6 95       	lsr	r27
    57a4:	a7 95       	ror	r26
    57a6:	97 95       	ror	r25
    57a8:	87 95       	ror	r24
    57aa:	89 83       	std	Y+1, r24	; 0x01
    57ac:	11 c0       	rjmp	.+34     	; 0x57d0 <twiCreate+0x76>
    57ae:	c7 01       	movw	r24, r14
    57b0:	b6 01       	movw	r22, r12
    57b2:	20 e8       	ldi	r18, 0x80	; 128
    57b4:	3a e1       	ldi	r19, 0x1A	; 26
    57b6:	46 e0       	ldi	r20, 0x06	; 6
    57b8:	50 e0       	ldi	r21, 0x00	; 0
    57ba:	7a d3       	rcall	.+1780   	; 0x5eb0 <__udivmodsi4>
    57bc:	da 01       	movw	r26, r20
    57be:	c9 01       	movw	r24, r18
    57c0:	40 97       	sbiw	r24, 0x10	; 16
    57c2:	a1 09       	sbc	r26, r1
    57c4:	b1 09       	sbc	r27, r1
    57c6:	b6 95       	lsr	r27
    57c8:	a7 95       	ror	r26
    57ca:	97 95       	ror	r25
    57cc:	87 95       	ror	r24
    57ce:	89 83       	std	Y+1, r24	; 0x01
    57d0:	1b 83       	std	Y+3, r17	; 0x03
    57d2:	0a 83       	std	Y+2, r16	; 0x02
    57d4:	8c 2f       	mov	r24, r28
    57d6:	9d 2f       	mov	r25, r29
    57d8:	02 c0       	rjmp	.+4      	; 0x57de <twiCreate+0x84>
    57da:	80 e0       	ldi	r24, 0x00	; 0
    57dc:	90 e0       	ldi	r25, 0x00	; 0
    57de:	df 91       	pop	r29
    57e0:	cf 91       	pop	r28
    57e2:	1f 91       	pop	r17
    57e4:	0f 91       	pop	r16
    57e6:	ff 90       	pop	r15
    57e8:	ef 90       	pop	r14
    57ea:	df 90       	pop	r13
    57ec:	cf 90       	pop	r12
    57ee:	bf 90       	pop	r11
    57f0:	af 90       	pop	r10
    57f2:	08 95       	ret

000057f4 <twiIsBusy>:
    57f4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    57f8:	81 70       	andi	r24, 0x01	; 1
    57fa:	08 95       	ret

000057fc <twiTransmit>:
    57fc:	ff 92       	push	r15
    57fe:	0f 93       	push	r16
    5800:	1f 93       	push	r17
    5802:	cf 93       	push	r28
    5804:	df 93       	push	r29
    5806:	00 97       	sbiw	r24, 0x00	; 0
    5808:	d1 f1       	breq	.+116    	; 0x587e <twiTransmit+0x82>
    580a:	4a 30       	cpi	r20, 0x0A	; 10
    580c:	d0 f5       	brcc	.+116    	; 0x5882 <twiTransmit+0x86>
    580e:	f4 2e       	mov	r15, r20
    5810:	8b 01       	movw	r16, r22
    5812:	ec 01       	movw	r28, r24
    5814:	ef df       	rcall	.-34     	; 0x57f4 <twiIsBusy>
    5816:	81 11       	cpse	r24, r1
    5818:	36 c0       	rjmp	.+108    	; 0x5886 <twiTransmit+0x8a>
    581a:	80 91 db 1a 	lds	r24, 0x1ADB	; 0x801adb <_twiCurrentHandler>
    581e:	90 91 dc 1a 	lds	r25, 0x1ADC	; 0x801adc <_twiCurrentHandler+0x1>
    5822:	c8 17       	cp	r28, r24
    5824:	d9 07       	cpc	r29, r25
    5826:	41 f0       	breq	.+16     	; 0x5838 <twiTransmit+0x3c>
    5828:	87 df       	rcall	.-242    	; 0x5738 <_initTwiInterface>
    582a:	89 81       	ldd	r24, Y+1	; 0x01
    582c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    5830:	d0 93 dc 1a 	sts	0x1ADC, r29	; 0x801adc <_twiCurrentHandler+0x1>
    5834:	c0 93 db 1a 	sts	0x1ADB, r28	; 0x801adb <_twiCurrentHandler>
    5838:	81 e0       	ldi	r24, 0x01	; 1
    583a:	8f 0d       	add	r24, r15
    583c:	80 93 dd 1a 	sts	0x1ADD, r24	; 0x801add <_twiMessageLen>
    5840:	88 81       	ld	r24, Y
    5842:	88 0f       	add	r24, r24
    5844:	80 93 de 1a 	sts	0x1ADE, r24	; 0x801ade <_twiMessageBuffer>
    5848:	ff 20       	and	r15, r15
    584a:	89 f0       	breq	.+34     	; 0x586e <twiTransmit+0x72>
    584c:	f8 01       	movw	r30, r16
    584e:	af ed       	ldi	r26, 0xDF	; 223
    5850:	ba e1       	ldi	r27, 0x1A	; 26
    5852:	4f ef       	ldi	r20, 0xFF	; 255
    5854:	4f 0d       	add	r20, r15
    5856:	64 2f       	mov	r22, r20
    5858:	70 e0       	ldi	r23, 0x00	; 0
    585a:	cb 01       	movw	r24, r22
    585c:	01 96       	adiw	r24, 0x01	; 1
    585e:	b8 01       	movw	r22, r16
    5860:	68 0f       	add	r22, r24
    5862:	79 1f       	adc	r23, r25
    5864:	81 91       	ld	r24, Z+
    5866:	8d 93       	st	X+, r24
    5868:	e6 17       	cp	r30, r22
    586a:	f7 07       	cpc	r31, r23
    586c:	d9 f7       	brne	.-10     	; 0x5864 <twiTransmit+0x68>
    586e:	88 ef       	ldi	r24, 0xF8	; 248
    5870:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <_twiCurrentState>
    5874:	85 ea       	ldi	r24, 0xA5	; 165
    5876:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    587a:	84 e0       	ldi	r24, 0x04	; 4
    587c:	05 c0       	rjmp	.+10     	; 0x5888 <twiTransmit+0x8c>
    587e:	86 e0       	ldi	r24, 0x06	; 6
    5880:	03 c0       	rjmp	.+6      	; 0x5888 <twiTransmit+0x8c>
    5882:	87 e0       	ldi	r24, 0x07	; 7
    5884:	01 c0       	rjmp	.+2      	; 0x5888 <twiTransmit+0x8c>
    5886:	82 e0       	ldi	r24, 0x02	; 2
    5888:	df 91       	pop	r29
    588a:	cf 91       	pop	r28
    588c:	1f 91       	pop	r17
    588e:	0f 91       	pop	r16
    5890:	ff 90       	pop	r15
    5892:	08 95       	ret

00005894 <twiReceive>:
    5894:	1f 93       	push	r17
    5896:	cf 93       	push	r28
    5898:	df 93       	push	r29
    589a:	00 97       	sbiw	r24, 0x00	; 0
    589c:	29 f1       	breq	.+74     	; 0x58e8 <twiReceive+0x54>
    589e:	6b 30       	cpi	r22, 0x0B	; 11
    58a0:	28 f5       	brcc	.+74     	; 0x58ec <twiReceive+0x58>
    58a2:	16 2f       	mov	r17, r22
    58a4:	ec 01       	movw	r28, r24
    58a6:	a6 df       	rcall	.-180    	; 0x57f4 <twiIsBusy>
    58a8:	81 11       	cpse	r24, r1
    58aa:	22 c0       	rjmp	.+68     	; 0x58f0 <twiReceive+0x5c>
    58ac:	80 91 db 1a 	lds	r24, 0x1ADB	; 0x801adb <_twiCurrentHandler>
    58b0:	90 91 dc 1a 	lds	r25, 0x1ADC	; 0x801adc <_twiCurrentHandler+0x1>
    58b4:	c8 17       	cp	r28, r24
    58b6:	d9 07       	cpc	r29, r25
    58b8:	41 f0       	breq	.+16     	; 0x58ca <twiReceive+0x36>
    58ba:	3e df       	rcall	.-388    	; 0x5738 <_initTwiInterface>
    58bc:	89 81       	ldd	r24, Y+1	; 0x01
    58be:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    58c2:	d0 93 dc 1a 	sts	0x1ADC, r29	; 0x801adc <_twiCurrentHandler+0x1>
    58c6:	c0 93 db 1a 	sts	0x1ADB, r28	; 0x801adb <_twiCurrentHandler>
    58ca:	10 93 dd 1a 	sts	0x1ADD, r17	; 0x801add <_twiMessageLen>
    58ce:	88 81       	ld	r24, Y
    58d0:	88 0f       	add	r24, r24
    58d2:	81 60       	ori	r24, 0x01	; 1
    58d4:	80 93 de 1a 	sts	0x1ADE, r24	; 0x801ade <_twiMessageBuffer>
    58d8:	88 ef       	ldi	r24, 0xF8	; 248
    58da:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <_twiCurrentState>
    58de:	85 ea       	ldi	r24, 0xA5	; 165
    58e0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    58e4:	85 e0       	ldi	r24, 0x05	; 5
    58e6:	05 c0       	rjmp	.+10     	; 0x58f2 <twiReceive+0x5e>
    58e8:	86 e0       	ldi	r24, 0x06	; 6
    58ea:	03 c0       	rjmp	.+6      	; 0x58f2 <twiReceive+0x5e>
    58ec:	87 e0       	ldi	r24, 0x07	; 7
    58ee:	01 c0       	rjmp	.+2      	; 0x58f2 <twiReceive+0x5e>
    58f0:	82 e0       	ldi	r24, 0x02	; 2
    58f2:	df 91       	pop	r29
    58f4:	cf 91       	pop	r28
    58f6:	1f 91       	pop	r17
    58f8:	08 95       	ret

000058fa <__vector_39>:
    58fa:	1f 92       	push	r1
    58fc:	0f 92       	push	r0
    58fe:	0f b6       	in	r0, 0x3f	; 63
    5900:	0f 92       	push	r0
    5902:	11 24       	eor	r1, r1
    5904:	0b b6       	in	r0, 0x3b	; 59
    5906:	0f 92       	push	r0
    5908:	2f 93       	push	r18
    590a:	3f 93       	push	r19
    590c:	4f 93       	push	r20
    590e:	5f 93       	push	r21
    5910:	6f 93       	push	r22
    5912:	7f 93       	push	r23
    5914:	8f 93       	push	r24
    5916:	9f 93       	push	r25
    5918:	af 93       	push	r26
    591a:	bf 93       	push	r27
    591c:	ef 93       	push	r30
    591e:	ff 93       	push	r31
    5920:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    5924:	8e 2f       	mov	r24, r30
    5926:	90 e0       	ldi	r25, 0x00	; 0
    5928:	fc 01       	movw	r30, r24
    592a:	38 97       	sbiw	r30, 0x08	; 8
    592c:	e1 35       	cpi	r30, 0x51	; 81
    592e:	f1 05       	cpc	r31, r1
    5930:	08 f0       	brcs	.+2      	; 0x5934 <__vector_39+0x3a>
    5932:	75 c0       	rjmp	.+234    	; 0x5a1e <__vector_39+0x124>
    5934:	88 27       	eor	r24, r24
    5936:	e4 58       	subi	r30, 0x84	; 132
    5938:	ff 4f       	sbci	r31, 0xFF	; 255
    593a:	8f 4f       	sbci	r24, 0xFF	; 255
    593c:	db c2       	rjmp	.+1462   	; 0x5ef4 <__tablejump2__>
    593e:	10 92 da 1a 	sts	0x1ADA, r1	; 0x801ada <_index.1885>
    5942:	e0 91 da 1a 	lds	r30, 0x1ADA	; 0x801ada <_index.1885>
    5946:	80 91 dd 1a 	lds	r24, 0x1ADD	; 0x801add <_twiMessageLen>
    594a:	e8 17       	cp	r30, r24
    594c:	70 f4       	brcc	.+28     	; 0x596a <__vector_39+0x70>
    594e:	81 e0       	ldi	r24, 0x01	; 1
    5950:	8e 0f       	add	r24, r30
    5952:	80 93 da 1a 	sts	0x1ADA, r24	; 0x801ada <_index.1885>
    5956:	f0 e0       	ldi	r31, 0x00	; 0
    5958:	e2 52       	subi	r30, 0x22	; 34
    595a:	f5 4e       	sbci	r31, 0xE5	; 229
    595c:	80 81       	ld	r24, Z
    595e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    5962:	85 e8       	ldi	r24, 0x85	; 133
    5964:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    5968:	72 c0       	rjmp	.+228    	; 0x5a4e <__vector_39+0x154>
    596a:	84 e9       	ldi	r24, 0x94	; 148
    596c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    5970:	80 91 db 1a 	lds	r24, 0x1ADB	; 0x801adb <_twiCurrentHandler>
    5974:	90 91 dc 1a 	lds	r25, 0x1ADC	; 0x801adc <_twiCurrentHandler+0x1>
    5978:	dc 01       	movw	r26, r24
    597a:	12 96       	adiw	r26, 0x02	; 2
    597c:	ed 91       	ld	r30, X+
    597e:	fc 91       	ld	r31, X
    5980:	13 97       	sbiw	r26, 0x03	; 3
    5982:	30 97       	sbiw	r30, 0x00	; 0
    5984:	09 f4       	brne	.+2      	; 0x5988 <__vector_39+0x8e>
    5986:	63 c0       	rjmp	.+198    	; 0x5a4e <__vector_39+0x154>
    5988:	20 e0       	ldi	r18, 0x00	; 0
    598a:	40 e0       	ldi	r20, 0x00	; 0
    598c:	50 e0       	ldi	r21, 0x00	; 0
    598e:	64 e0       	ldi	r22, 0x04	; 4
    5990:	19 95       	eicall
    5992:	5d c0       	rjmp	.+186    	; 0x5a4e <__vector_39+0x154>
    5994:	e0 91 da 1a 	lds	r30, 0x1ADA	; 0x801ada <_index.1885>
    5998:	81 e0       	ldi	r24, 0x01	; 1
    599a:	8e 0f       	add	r24, r30
    599c:	80 93 da 1a 	sts	0x1ADA, r24	; 0x801ada <_index.1885>
    59a0:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    59a4:	f0 e0       	ldi	r31, 0x00	; 0
    59a6:	e2 52       	subi	r30, 0x22	; 34
    59a8:	f5 4e       	sbci	r31, 0xE5	; 229
    59aa:	80 83       	st	Z, r24
    59ac:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    59b0:	80 34       	cpi	r24, 0x40	; 64
    59b2:	11 f4       	brne	.+4      	; 0x59b8 <__vector_39+0xbe>
    59b4:	10 92 da 1a 	sts	0x1ADA, r1	; 0x801ada <_index.1885>
    59b8:	20 91 da 1a 	lds	r18, 0x1ADA	; 0x801ada <_index.1885>
    59bc:	30 e0       	ldi	r19, 0x00	; 0
    59be:	80 91 dd 1a 	lds	r24, 0x1ADD	; 0x801add <_twiMessageLen>
    59c2:	90 e0       	ldi	r25, 0x00	; 0
    59c4:	01 97       	sbiw	r24, 0x01	; 1
    59c6:	28 17       	cp	r18, r24
    59c8:	39 07       	cpc	r19, r25
    59ca:	24 f4       	brge	.+8      	; 0x59d4 <__vector_39+0xda>
    59cc:	85 ec       	ldi	r24, 0xC5	; 197
    59ce:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    59d2:	3d c0       	rjmp	.+122    	; 0x5a4e <__vector_39+0x154>
    59d4:	85 e8       	ldi	r24, 0x85	; 133
    59d6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    59da:	39 c0       	rjmp	.+114    	; 0x5a4e <__vector_39+0x154>
    59dc:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    59e0:	e0 91 da 1a 	lds	r30, 0x1ADA	; 0x801ada <_index.1885>
    59e4:	f0 e0       	ldi	r31, 0x00	; 0
    59e6:	e2 52       	subi	r30, 0x22	; 34
    59e8:	f5 4e       	sbci	r31, 0xE5	; 229
    59ea:	80 83       	st	Z, r24
    59ec:	84 e9       	ldi	r24, 0x94	; 148
    59ee:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    59f2:	80 91 db 1a 	lds	r24, 0x1ADB	; 0x801adb <_twiCurrentHandler>
    59f6:	90 91 dc 1a 	lds	r25, 0x1ADC	; 0x801adc <_twiCurrentHandler+0x1>
    59fa:	dc 01       	movw	r26, r24
    59fc:	12 96       	adiw	r26, 0x02	; 2
    59fe:	ed 91       	ld	r30, X+
    5a00:	fc 91       	ld	r31, X
    5a02:	13 97       	sbiw	r26, 0x03	; 3
    5a04:	30 97       	sbiw	r30, 0x00	; 0
    5a06:	19 f1       	breq	.+70     	; 0x5a4e <__vector_39+0x154>
    5a08:	20 91 dd 1a 	lds	r18, 0x1ADD	; 0x801add <_twiMessageLen>
    5a0c:	4e ed       	ldi	r20, 0xDE	; 222
    5a0e:	5a e1       	ldi	r21, 0x1A	; 26
    5a10:	65 e0       	ldi	r22, 0x05	; 5
    5a12:	19 95       	eicall
    5a14:	1c c0       	rjmp	.+56     	; 0x5a4e <__vector_39+0x154>
    5a16:	85 ea       	ldi	r24, 0xA5	; 165
    5a18:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    5a1c:	18 c0       	rjmp	.+48     	; 0x5a4e <__vector_39+0x154>
    5a1e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    5a22:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <_twiCurrentState>
    5a26:	84 e0       	ldi	r24, 0x04	; 4
    5a28:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    5a2c:	80 91 db 1a 	lds	r24, 0x1ADB	; 0x801adb <_twiCurrentHandler>
    5a30:	90 91 dc 1a 	lds	r25, 0x1ADC	; 0x801adc <_twiCurrentHandler+0x1>
    5a34:	dc 01       	movw	r26, r24
    5a36:	12 96       	adiw	r26, 0x02	; 2
    5a38:	ed 91       	ld	r30, X+
    5a3a:	fc 91       	ld	r31, X
    5a3c:	13 97       	sbiw	r26, 0x03	; 3
    5a3e:	30 97       	sbiw	r30, 0x00	; 0
    5a40:	31 f0       	breq	.+12     	; 0x5a4e <__vector_39+0x154>
    5a42:	20 e0       	ldi	r18, 0x00	; 0
    5a44:	40 e0       	ldi	r20, 0x00	; 0
    5a46:	50 e0       	ldi	r21, 0x00	; 0
    5a48:	60 91 24 02 	lds	r22, 0x0224	; 0x800224 <_twiCurrentState>
    5a4c:	19 95       	eicall
    5a4e:	ff 91       	pop	r31
    5a50:	ef 91       	pop	r30
    5a52:	bf 91       	pop	r27
    5a54:	af 91       	pop	r26
    5a56:	9f 91       	pop	r25
    5a58:	8f 91       	pop	r24
    5a5a:	7f 91       	pop	r23
    5a5c:	6f 91       	pop	r22
    5a5e:	5f 91       	pop	r21
    5a60:	4f 91       	pop	r20
    5a62:	3f 91       	pop	r19
    5a64:	2f 91       	pop	r18
    5a66:	0f 90       	pop	r0
    5a68:	0b be       	out	0x3b, r0	; 59
    5a6a:	0f 90       	pop	r0
    5a6c:	0f be       	out	0x3f, r0	; 63
    5a6e:	0f 90       	pop	r0
    5a70:	1f 90       	pop	r1
    5a72:	18 95       	reti

00005a74 <fifo_init>:
    5a74:	fc 01       	movw	r30, r24
    5a76:	41 11       	cpse	r20, r1
    5a78:	01 c0       	rjmp	.+2      	; 0x5a7c <fifo_init+0x8>
    5a7a:	e8 d3       	rcall	.+2000   	; 0x624c <abort>
    5a7c:	84 2f       	mov	r24, r20
    5a7e:	90 e0       	ldi	r25, 0x00	; 0
    5a80:	9c 01       	movw	r18, r24
    5a82:	21 50       	subi	r18, 0x01	; 1
    5a84:	31 09       	sbc	r19, r1
    5a86:	82 23       	and	r24, r18
    5a88:	93 23       	and	r25, r19
    5a8a:	89 2b       	or	r24, r25
    5a8c:	09 f0       	breq	.+2      	; 0x5a90 <fifo_init+0x1c>
    5a8e:	de d3       	rcall	.+1980   	; 0x624c <abort>
    5a90:	41 38       	cpi	r20, 0x81	; 129
    5a92:	08 f0       	brcs	.+2      	; 0x5a96 <fifo_init+0x22>
    5a94:	db d3       	rcall	.+1974   	; 0x624c <abort>
    5a96:	12 82       	std	Z+2, r1	; 0x02
    5a98:	13 82       	std	Z+3, r1	; 0x03
    5a9a:	44 83       	std	Z+4, r20	; 0x04
    5a9c:	44 0f       	add	r20, r20
    5a9e:	41 50       	subi	r20, 0x01	; 1
    5aa0:	45 83       	std	Z+5, r20	; 0x05
    5aa2:	71 83       	std	Z+1, r23	; 0x01
    5aa4:	60 83       	st	Z, r22
    5aa6:	80 e0       	ldi	r24, 0x00	; 0
    5aa8:	90 e0       	ldi	r25, 0x00	; 0
    5aaa:	08 95       	ret

00005aac <__subsf3>:
    5aac:	50 58       	subi	r21, 0x80	; 128

00005aae <__addsf3>:
    5aae:	bb 27       	eor	r27, r27
    5ab0:	aa 27       	eor	r26, r26
    5ab2:	0e d0       	rcall	.+28     	; 0x5ad0 <__addsf3x>
    5ab4:	4d c1       	rjmp	.+666    	; 0x5d50 <__fp_round>
    5ab6:	3e d1       	rcall	.+636    	; 0x5d34 <__fp_pscA>
    5ab8:	30 f0       	brcs	.+12     	; 0x5ac6 <__addsf3+0x18>
    5aba:	43 d1       	rcall	.+646    	; 0x5d42 <__fp_pscB>
    5abc:	20 f0       	brcs	.+8      	; 0x5ac6 <__addsf3+0x18>
    5abe:	31 f4       	brne	.+12     	; 0x5acc <__addsf3+0x1e>
    5ac0:	9f 3f       	cpi	r25, 0xFF	; 255
    5ac2:	11 f4       	brne	.+4      	; 0x5ac8 <__addsf3+0x1a>
    5ac4:	1e f4       	brtc	.+6      	; 0x5acc <__addsf3+0x1e>
    5ac6:	33 c1       	rjmp	.+614    	; 0x5d2e <__fp_nan>
    5ac8:	0e f4       	brtc	.+2      	; 0x5acc <__addsf3+0x1e>
    5aca:	e0 95       	com	r30
    5acc:	e7 fb       	bst	r30, 7
    5ace:	29 c1       	rjmp	.+594    	; 0x5d22 <__fp_inf>

00005ad0 <__addsf3x>:
    5ad0:	e9 2f       	mov	r30, r25
    5ad2:	4f d1       	rcall	.+670    	; 0x5d72 <__fp_split3>
    5ad4:	80 f3       	brcs	.-32     	; 0x5ab6 <__addsf3+0x8>
    5ad6:	ba 17       	cp	r27, r26
    5ad8:	62 07       	cpc	r22, r18
    5ada:	73 07       	cpc	r23, r19
    5adc:	84 07       	cpc	r24, r20
    5ade:	95 07       	cpc	r25, r21
    5ae0:	18 f0       	brcs	.+6      	; 0x5ae8 <__addsf3x+0x18>
    5ae2:	71 f4       	brne	.+28     	; 0x5b00 <__addsf3x+0x30>
    5ae4:	9e f5       	brtc	.+102    	; 0x5b4c <__addsf3x+0x7c>
    5ae6:	67 c1       	rjmp	.+718    	; 0x5db6 <__fp_zero>
    5ae8:	0e f4       	brtc	.+2      	; 0x5aec <__addsf3x+0x1c>
    5aea:	e0 95       	com	r30
    5aec:	0b 2e       	mov	r0, r27
    5aee:	ba 2f       	mov	r27, r26
    5af0:	a0 2d       	mov	r26, r0
    5af2:	0b 01       	movw	r0, r22
    5af4:	b9 01       	movw	r22, r18
    5af6:	90 01       	movw	r18, r0
    5af8:	0c 01       	movw	r0, r24
    5afa:	ca 01       	movw	r24, r20
    5afc:	a0 01       	movw	r20, r0
    5afe:	11 24       	eor	r1, r1
    5b00:	ff 27       	eor	r31, r31
    5b02:	59 1b       	sub	r21, r25
    5b04:	99 f0       	breq	.+38     	; 0x5b2c <__addsf3x+0x5c>
    5b06:	59 3f       	cpi	r21, 0xF9	; 249
    5b08:	50 f4       	brcc	.+20     	; 0x5b1e <__addsf3x+0x4e>
    5b0a:	50 3e       	cpi	r21, 0xE0	; 224
    5b0c:	68 f1       	brcs	.+90     	; 0x5b68 <__addsf3x+0x98>
    5b0e:	1a 16       	cp	r1, r26
    5b10:	f0 40       	sbci	r31, 0x00	; 0
    5b12:	a2 2f       	mov	r26, r18
    5b14:	23 2f       	mov	r18, r19
    5b16:	34 2f       	mov	r19, r20
    5b18:	44 27       	eor	r20, r20
    5b1a:	58 5f       	subi	r21, 0xF8	; 248
    5b1c:	f3 cf       	rjmp	.-26     	; 0x5b04 <__addsf3x+0x34>
    5b1e:	46 95       	lsr	r20
    5b20:	37 95       	ror	r19
    5b22:	27 95       	ror	r18
    5b24:	a7 95       	ror	r26
    5b26:	f0 40       	sbci	r31, 0x00	; 0
    5b28:	53 95       	inc	r21
    5b2a:	c9 f7       	brne	.-14     	; 0x5b1e <__addsf3x+0x4e>
    5b2c:	7e f4       	brtc	.+30     	; 0x5b4c <__addsf3x+0x7c>
    5b2e:	1f 16       	cp	r1, r31
    5b30:	ba 0b       	sbc	r27, r26
    5b32:	62 0b       	sbc	r22, r18
    5b34:	73 0b       	sbc	r23, r19
    5b36:	84 0b       	sbc	r24, r20
    5b38:	ba f0       	brmi	.+46     	; 0x5b68 <__addsf3x+0x98>
    5b3a:	91 50       	subi	r25, 0x01	; 1
    5b3c:	a1 f0       	breq	.+40     	; 0x5b66 <__addsf3x+0x96>
    5b3e:	ff 0f       	add	r31, r31
    5b40:	bb 1f       	adc	r27, r27
    5b42:	66 1f       	adc	r22, r22
    5b44:	77 1f       	adc	r23, r23
    5b46:	88 1f       	adc	r24, r24
    5b48:	c2 f7       	brpl	.-16     	; 0x5b3a <__addsf3x+0x6a>
    5b4a:	0e c0       	rjmp	.+28     	; 0x5b68 <__addsf3x+0x98>
    5b4c:	ba 0f       	add	r27, r26
    5b4e:	62 1f       	adc	r22, r18
    5b50:	73 1f       	adc	r23, r19
    5b52:	84 1f       	adc	r24, r20
    5b54:	48 f4       	brcc	.+18     	; 0x5b68 <__addsf3x+0x98>
    5b56:	87 95       	ror	r24
    5b58:	77 95       	ror	r23
    5b5a:	67 95       	ror	r22
    5b5c:	b7 95       	ror	r27
    5b5e:	f7 95       	ror	r31
    5b60:	9e 3f       	cpi	r25, 0xFE	; 254
    5b62:	08 f0       	brcs	.+2      	; 0x5b66 <__addsf3x+0x96>
    5b64:	b3 cf       	rjmp	.-154    	; 0x5acc <__addsf3+0x1e>
    5b66:	93 95       	inc	r25
    5b68:	88 0f       	add	r24, r24
    5b6a:	08 f0       	brcs	.+2      	; 0x5b6e <__addsf3x+0x9e>
    5b6c:	99 27       	eor	r25, r25
    5b6e:	ee 0f       	add	r30, r30
    5b70:	97 95       	ror	r25
    5b72:	87 95       	ror	r24
    5b74:	08 95       	ret

00005b76 <__divsf3>:
    5b76:	0c d0       	rcall	.+24     	; 0x5b90 <__divsf3x>
    5b78:	eb c0       	rjmp	.+470    	; 0x5d50 <__fp_round>
    5b7a:	e3 d0       	rcall	.+454    	; 0x5d42 <__fp_pscB>
    5b7c:	40 f0       	brcs	.+16     	; 0x5b8e <__divsf3+0x18>
    5b7e:	da d0       	rcall	.+436    	; 0x5d34 <__fp_pscA>
    5b80:	30 f0       	brcs	.+12     	; 0x5b8e <__divsf3+0x18>
    5b82:	21 f4       	brne	.+8      	; 0x5b8c <__divsf3+0x16>
    5b84:	5f 3f       	cpi	r21, 0xFF	; 255
    5b86:	19 f0       	breq	.+6      	; 0x5b8e <__divsf3+0x18>
    5b88:	cc c0       	rjmp	.+408    	; 0x5d22 <__fp_inf>
    5b8a:	51 11       	cpse	r21, r1
    5b8c:	15 c1       	rjmp	.+554    	; 0x5db8 <__fp_szero>
    5b8e:	cf c0       	rjmp	.+414    	; 0x5d2e <__fp_nan>

00005b90 <__divsf3x>:
    5b90:	f0 d0       	rcall	.+480    	; 0x5d72 <__fp_split3>
    5b92:	98 f3       	brcs	.-26     	; 0x5b7a <__divsf3+0x4>

00005b94 <__divsf3_pse>:
    5b94:	99 23       	and	r25, r25
    5b96:	c9 f3       	breq	.-14     	; 0x5b8a <__divsf3+0x14>
    5b98:	55 23       	and	r21, r21
    5b9a:	b1 f3       	breq	.-20     	; 0x5b88 <__divsf3+0x12>
    5b9c:	95 1b       	sub	r25, r21
    5b9e:	55 0b       	sbc	r21, r21
    5ba0:	bb 27       	eor	r27, r27
    5ba2:	aa 27       	eor	r26, r26
    5ba4:	62 17       	cp	r22, r18
    5ba6:	73 07       	cpc	r23, r19
    5ba8:	84 07       	cpc	r24, r20
    5baa:	38 f0       	brcs	.+14     	; 0x5bba <__divsf3_pse+0x26>
    5bac:	9f 5f       	subi	r25, 0xFF	; 255
    5bae:	5f 4f       	sbci	r21, 0xFF	; 255
    5bb0:	22 0f       	add	r18, r18
    5bb2:	33 1f       	adc	r19, r19
    5bb4:	44 1f       	adc	r20, r20
    5bb6:	aa 1f       	adc	r26, r26
    5bb8:	a9 f3       	breq	.-22     	; 0x5ba4 <__divsf3_pse+0x10>
    5bba:	33 d0       	rcall	.+102    	; 0x5c22 <__divsf3_pse+0x8e>
    5bbc:	0e 2e       	mov	r0, r30
    5bbe:	3a f0       	brmi	.+14     	; 0x5bce <__divsf3_pse+0x3a>
    5bc0:	e0 e8       	ldi	r30, 0x80	; 128
    5bc2:	30 d0       	rcall	.+96     	; 0x5c24 <__divsf3_pse+0x90>
    5bc4:	91 50       	subi	r25, 0x01	; 1
    5bc6:	50 40       	sbci	r21, 0x00	; 0
    5bc8:	e6 95       	lsr	r30
    5bca:	00 1c       	adc	r0, r0
    5bcc:	ca f7       	brpl	.-14     	; 0x5bc0 <__divsf3_pse+0x2c>
    5bce:	29 d0       	rcall	.+82     	; 0x5c22 <__divsf3_pse+0x8e>
    5bd0:	fe 2f       	mov	r31, r30
    5bd2:	27 d0       	rcall	.+78     	; 0x5c22 <__divsf3_pse+0x8e>
    5bd4:	66 0f       	add	r22, r22
    5bd6:	77 1f       	adc	r23, r23
    5bd8:	88 1f       	adc	r24, r24
    5bda:	bb 1f       	adc	r27, r27
    5bdc:	26 17       	cp	r18, r22
    5bde:	37 07       	cpc	r19, r23
    5be0:	48 07       	cpc	r20, r24
    5be2:	ab 07       	cpc	r26, r27
    5be4:	b0 e8       	ldi	r27, 0x80	; 128
    5be6:	09 f0       	breq	.+2      	; 0x5bea <__divsf3_pse+0x56>
    5be8:	bb 0b       	sbc	r27, r27
    5bea:	80 2d       	mov	r24, r0
    5bec:	bf 01       	movw	r22, r30
    5bee:	ff 27       	eor	r31, r31
    5bf0:	93 58       	subi	r25, 0x83	; 131
    5bf2:	5f 4f       	sbci	r21, 0xFF	; 255
    5bf4:	2a f0       	brmi	.+10     	; 0x5c00 <__divsf3_pse+0x6c>
    5bf6:	9e 3f       	cpi	r25, 0xFE	; 254
    5bf8:	51 05       	cpc	r21, r1
    5bfa:	68 f0       	brcs	.+26     	; 0x5c16 <__divsf3_pse+0x82>
    5bfc:	92 c0       	rjmp	.+292    	; 0x5d22 <__fp_inf>
    5bfe:	dc c0       	rjmp	.+440    	; 0x5db8 <__fp_szero>
    5c00:	5f 3f       	cpi	r21, 0xFF	; 255
    5c02:	ec f3       	brlt	.-6      	; 0x5bfe <__divsf3_pse+0x6a>
    5c04:	98 3e       	cpi	r25, 0xE8	; 232
    5c06:	dc f3       	brlt	.-10     	; 0x5bfe <__divsf3_pse+0x6a>
    5c08:	86 95       	lsr	r24
    5c0a:	77 95       	ror	r23
    5c0c:	67 95       	ror	r22
    5c0e:	b7 95       	ror	r27
    5c10:	f7 95       	ror	r31
    5c12:	9f 5f       	subi	r25, 0xFF	; 255
    5c14:	c9 f7       	brne	.-14     	; 0x5c08 <__divsf3_pse+0x74>
    5c16:	88 0f       	add	r24, r24
    5c18:	91 1d       	adc	r25, r1
    5c1a:	96 95       	lsr	r25
    5c1c:	87 95       	ror	r24
    5c1e:	97 f9       	bld	r25, 7
    5c20:	08 95       	ret
    5c22:	e1 e0       	ldi	r30, 0x01	; 1
    5c24:	66 0f       	add	r22, r22
    5c26:	77 1f       	adc	r23, r23
    5c28:	88 1f       	adc	r24, r24
    5c2a:	bb 1f       	adc	r27, r27
    5c2c:	62 17       	cp	r22, r18
    5c2e:	73 07       	cpc	r23, r19
    5c30:	84 07       	cpc	r24, r20
    5c32:	ba 07       	cpc	r27, r26
    5c34:	20 f0       	brcs	.+8      	; 0x5c3e <__divsf3_pse+0xaa>
    5c36:	62 1b       	sub	r22, r18
    5c38:	73 0b       	sbc	r23, r19
    5c3a:	84 0b       	sbc	r24, r20
    5c3c:	ba 0b       	sbc	r27, r26
    5c3e:	ee 1f       	adc	r30, r30
    5c40:	88 f7       	brcc	.-30     	; 0x5c24 <__divsf3_pse+0x90>
    5c42:	e0 95       	com	r30
    5c44:	08 95       	ret

00005c46 <__fixsfsi>:
    5c46:	04 d0       	rcall	.+8      	; 0x5c50 <__fixunssfsi>
    5c48:	68 94       	set
    5c4a:	b1 11       	cpse	r27, r1
    5c4c:	b5 c0       	rjmp	.+362    	; 0x5db8 <__fp_szero>
    5c4e:	08 95       	ret

00005c50 <__fixunssfsi>:
    5c50:	98 d0       	rcall	.+304    	; 0x5d82 <__fp_splitA>
    5c52:	88 f0       	brcs	.+34     	; 0x5c76 <__fixunssfsi+0x26>
    5c54:	9f 57       	subi	r25, 0x7F	; 127
    5c56:	90 f0       	brcs	.+36     	; 0x5c7c <__fixunssfsi+0x2c>
    5c58:	b9 2f       	mov	r27, r25
    5c5a:	99 27       	eor	r25, r25
    5c5c:	b7 51       	subi	r27, 0x17	; 23
    5c5e:	a0 f0       	brcs	.+40     	; 0x5c88 <__fixunssfsi+0x38>
    5c60:	d1 f0       	breq	.+52     	; 0x5c96 <__fixunssfsi+0x46>
    5c62:	66 0f       	add	r22, r22
    5c64:	77 1f       	adc	r23, r23
    5c66:	88 1f       	adc	r24, r24
    5c68:	99 1f       	adc	r25, r25
    5c6a:	1a f0       	brmi	.+6      	; 0x5c72 <__fixunssfsi+0x22>
    5c6c:	ba 95       	dec	r27
    5c6e:	c9 f7       	brne	.-14     	; 0x5c62 <__fixunssfsi+0x12>
    5c70:	12 c0       	rjmp	.+36     	; 0x5c96 <__fixunssfsi+0x46>
    5c72:	b1 30       	cpi	r27, 0x01	; 1
    5c74:	81 f0       	breq	.+32     	; 0x5c96 <__fixunssfsi+0x46>
    5c76:	9f d0       	rcall	.+318    	; 0x5db6 <__fp_zero>
    5c78:	b1 e0       	ldi	r27, 0x01	; 1
    5c7a:	08 95       	ret
    5c7c:	9c c0       	rjmp	.+312    	; 0x5db6 <__fp_zero>
    5c7e:	67 2f       	mov	r22, r23
    5c80:	78 2f       	mov	r23, r24
    5c82:	88 27       	eor	r24, r24
    5c84:	b8 5f       	subi	r27, 0xF8	; 248
    5c86:	39 f0       	breq	.+14     	; 0x5c96 <__fixunssfsi+0x46>
    5c88:	b9 3f       	cpi	r27, 0xF9	; 249
    5c8a:	cc f3       	brlt	.-14     	; 0x5c7e <__fixunssfsi+0x2e>
    5c8c:	86 95       	lsr	r24
    5c8e:	77 95       	ror	r23
    5c90:	67 95       	ror	r22
    5c92:	b3 95       	inc	r27
    5c94:	d9 f7       	brne	.-10     	; 0x5c8c <__fixunssfsi+0x3c>
    5c96:	3e f4       	brtc	.+14     	; 0x5ca6 <__fixunssfsi+0x56>
    5c98:	90 95       	com	r25
    5c9a:	80 95       	com	r24
    5c9c:	70 95       	com	r23
    5c9e:	61 95       	neg	r22
    5ca0:	7f 4f       	sbci	r23, 0xFF	; 255
    5ca2:	8f 4f       	sbci	r24, 0xFF	; 255
    5ca4:	9f 4f       	sbci	r25, 0xFF	; 255
    5ca6:	08 95       	ret

00005ca8 <__floatunsisf>:
    5ca8:	e8 94       	clt
    5caa:	09 c0       	rjmp	.+18     	; 0x5cbe <__floatsisf+0x12>

00005cac <__floatsisf>:
    5cac:	97 fb       	bst	r25, 7
    5cae:	3e f4       	brtc	.+14     	; 0x5cbe <__floatsisf+0x12>
    5cb0:	90 95       	com	r25
    5cb2:	80 95       	com	r24
    5cb4:	70 95       	com	r23
    5cb6:	61 95       	neg	r22
    5cb8:	7f 4f       	sbci	r23, 0xFF	; 255
    5cba:	8f 4f       	sbci	r24, 0xFF	; 255
    5cbc:	9f 4f       	sbci	r25, 0xFF	; 255
    5cbe:	99 23       	and	r25, r25
    5cc0:	a9 f0       	breq	.+42     	; 0x5cec <__floatsisf+0x40>
    5cc2:	f9 2f       	mov	r31, r25
    5cc4:	96 e9       	ldi	r25, 0x96	; 150
    5cc6:	bb 27       	eor	r27, r27
    5cc8:	93 95       	inc	r25
    5cca:	f6 95       	lsr	r31
    5ccc:	87 95       	ror	r24
    5cce:	77 95       	ror	r23
    5cd0:	67 95       	ror	r22
    5cd2:	b7 95       	ror	r27
    5cd4:	f1 11       	cpse	r31, r1
    5cd6:	f8 cf       	rjmp	.-16     	; 0x5cc8 <__floatsisf+0x1c>
    5cd8:	fa f4       	brpl	.+62     	; 0x5d18 <__floatsisf+0x6c>
    5cda:	bb 0f       	add	r27, r27
    5cdc:	11 f4       	brne	.+4      	; 0x5ce2 <__floatsisf+0x36>
    5cde:	60 ff       	sbrs	r22, 0
    5ce0:	1b c0       	rjmp	.+54     	; 0x5d18 <__floatsisf+0x6c>
    5ce2:	6f 5f       	subi	r22, 0xFF	; 255
    5ce4:	7f 4f       	sbci	r23, 0xFF	; 255
    5ce6:	8f 4f       	sbci	r24, 0xFF	; 255
    5ce8:	9f 4f       	sbci	r25, 0xFF	; 255
    5cea:	16 c0       	rjmp	.+44     	; 0x5d18 <__floatsisf+0x6c>
    5cec:	88 23       	and	r24, r24
    5cee:	11 f0       	breq	.+4      	; 0x5cf4 <__floatsisf+0x48>
    5cf0:	96 e9       	ldi	r25, 0x96	; 150
    5cf2:	11 c0       	rjmp	.+34     	; 0x5d16 <__floatsisf+0x6a>
    5cf4:	77 23       	and	r23, r23
    5cf6:	21 f0       	breq	.+8      	; 0x5d00 <__floatsisf+0x54>
    5cf8:	9e e8       	ldi	r25, 0x8E	; 142
    5cfa:	87 2f       	mov	r24, r23
    5cfc:	76 2f       	mov	r23, r22
    5cfe:	05 c0       	rjmp	.+10     	; 0x5d0a <__floatsisf+0x5e>
    5d00:	66 23       	and	r22, r22
    5d02:	71 f0       	breq	.+28     	; 0x5d20 <__floatsisf+0x74>
    5d04:	96 e8       	ldi	r25, 0x86	; 134
    5d06:	86 2f       	mov	r24, r22
    5d08:	70 e0       	ldi	r23, 0x00	; 0
    5d0a:	60 e0       	ldi	r22, 0x00	; 0
    5d0c:	2a f0       	brmi	.+10     	; 0x5d18 <__floatsisf+0x6c>
    5d0e:	9a 95       	dec	r25
    5d10:	66 0f       	add	r22, r22
    5d12:	77 1f       	adc	r23, r23
    5d14:	88 1f       	adc	r24, r24
    5d16:	da f7       	brpl	.-10     	; 0x5d0e <__floatsisf+0x62>
    5d18:	88 0f       	add	r24, r24
    5d1a:	96 95       	lsr	r25
    5d1c:	87 95       	ror	r24
    5d1e:	97 f9       	bld	r25, 7
    5d20:	08 95       	ret

00005d22 <__fp_inf>:
    5d22:	97 f9       	bld	r25, 7
    5d24:	9f 67       	ori	r25, 0x7F	; 127
    5d26:	80 e8       	ldi	r24, 0x80	; 128
    5d28:	70 e0       	ldi	r23, 0x00	; 0
    5d2a:	60 e0       	ldi	r22, 0x00	; 0
    5d2c:	08 95       	ret

00005d2e <__fp_nan>:
    5d2e:	9f ef       	ldi	r25, 0xFF	; 255
    5d30:	80 ec       	ldi	r24, 0xC0	; 192
    5d32:	08 95       	ret

00005d34 <__fp_pscA>:
    5d34:	00 24       	eor	r0, r0
    5d36:	0a 94       	dec	r0
    5d38:	16 16       	cp	r1, r22
    5d3a:	17 06       	cpc	r1, r23
    5d3c:	18 06       	cpc	r1, r24
    5d3e:	09 06       	cpc	r0, r25
    5d40:	08 95       	ret

00005d42 <__fp_pscB>:
    5d42:	00 24       	eor	r0, r0
    5d44:	0a 94       	dec	r0
    5d46:	12 16       	cp	r1, r18
    5d48:	13 06       	cpc	r1, r19
    5d4a:	14 06       	cpc	r1, r20
    5d4c:	05 06       	cpc	r0, r21
    5d4e:	08 95       	ret

00005d50 <__fp_round>:
    5d50:	09 2e       	mov	r0, r25
    5d52:	03 94       	inc	r0
    5d54:	00 0c       	add	r0, r0
    5d56:	11 f4       	brne	.+4      	; 0x5d5c <__fp_round+0xc>
    5d58:	88 23       	and	r24, r24
    5d5a:	52 f0       	brmi	.+20     	; 0x5d70 <__fp_round+0x20>
    5d5c:	bb 0f       	add	r27, r27
    5d5e:	40 f4       	brcc	.+16     	; 0x5d70 <__fp_round+0x20>
    5d60:	bf 2b       	or	r27, r31
    5d62:	11 f4       	brne	.+4      	; 0x5d68 <__fp_round+0x18>
    5d64:	60 ff       	sbrs	r22, 0
    5d66:	04 c0       	rjmp	.+8      	; 0x5d70 <__fp_round+0x20>
    5d68:	6f 5f       	subi	r22, 0xFF	; 255
    5d6a:	7f 4f       	sbci	r23, 0xFF	; 255
    5d6c:	8f 4f       	sbci	r24, 0xFF	; 255
    5d6e:	9f 4f       	sbci	r25, 0xFF	; 255
    5d70:	08 95       	ret

00005d72 <__fp_split3>:
    5d72:	57 fd       	sbrc	r21, 7
    5d74:	90 58       	subi	r25, 0x80	; 128
    5d76:	44 0f       	add	r20, r20
    5d78:	55 1f       	adc	r21, r21
    5d7a:	59 f0       	breq	.+22     	; 0x5d92 <__fp_splitA+0x10>
    5d7c:	5f 3f       	cpi	r21, 0xFF	; 255
    5d7e:	71 f0       	breq	.+28     	; 0x5d9c <__fp_splitA+0x1a>
    5d80:	47 95       	ror	r20

00005d82 <__fp_splitA>:
    5d82:	88 0f       	add	r24, r24
    5d84:	97 fb       	bst	r25, 7
    5d86:	99 1f       	adc	r25, r25
    5d88:	61 f0       	breq	.+24     	; 0x5da2 <__fp_splitA+0x20>
    5d8a:	9f 3f       	cpi	r25, 0xFF	; 255
    5d8c:	79 f0       	breq	.+30     	; 0x5dac <__fp_splitA+0x2a>
    5d8e:	87 95       	ror	r24
    5d90:	08 95       	ret
    5d92:	12 16       	cp	r1, r18
    5d94:	13 06       	cpc	r1, r19
    5d96:	14 06       	cpc	r1, r20
    5d98:	55 1f       	adc	r21, r21
    5d9a:	f2 cf       	rjmp	.-28     	; 0x5d80 <__fp_split3+0xe>
    5d9c:	46 95       	lsr	r20
    5d9e:	f1 df       	rcall	.-30     	; 0x5d82 <__fp_splitA>
    5da0:	08 c0       	rjmp	.+16     	; 0x5db2 <__fp_splitA+0x30>
    5da2:	16 16       	cp	r1, r22
    5da4:	17 06       	cpc	r1, r23
    5da6:	18 06       	cpc	r1, r24
    5da8:	99 1f       	adc	r25, r25
    5daa:	f1 cf       	rjmp	.-30     	; 0x5d8e <__fp_splitA+0xc>
    5dac:	86 95       	lsr	r24
    5dae:	71 05       	cpc	r23, r1
    5db0:	61 05       	cpc	r22, r1
    5db2:	08 94       	sec
    5db4:	08 95       	ret

00005db6 <__fp_zero>:
    5db6:	e8 94       	clt

00005db8 <__fp_szero>:
    5db8:	bb 27       	eor	r27, r27
    5dba:	66 27       	eor	r22, r22
    5dbc:	77 27       	eor	r23, r23
    5dbe:	cb 01       	movw	r24, r22
    5dc0:	97 f9       	bld	r25, 7
    5dc2:	08 95       	ret

00005dc4 <__mulsf3>:
    5dc4:	0b d0       	rcall	.+22     	; 0x5ddc <__mulsf3x>
    5dc6:	c4 cf       	rjmp	.-120    	; 0x5d50 <__fp_round>
    5dc8:	b5 df       	rcall	.-150    	; 0x5d34 <__fp_pscA>
    5dca:	28 f0       	brcs	.+10     	; 0x5dd6 <__mulsf3+0x12>
    5dcc:	ba df       	rcall	.-140    	; 0x5d42 <__fp_pscB>
    5dce:	18 f0       	brcs	.+6      	; 0x5dd6 <__mulsf3+0x12>
    5dd0:	95 23       	and	r25, r21
    5dd2:	09 f0       	breq	.+2      	; 0x5dd6 <__mulsf3+0x12>
    5dd4:	a6 cf       	rjmp	.-180    	; 0x5d22 <__fp_inf>
    5dd6:	ab cf       	rjmp	.-170    	; 0x5d2e <__fp_nan>
    5dd8:	11 24       	eor	r1, r1
    5dda:	ee cf       	rjmp	.-36     	; 0x5db8 <__fp_szero>

00005ddc <__mulsf3x>:
    5ddc:	ca df       	rcall	.-108    	; 0x5d72 <__fp_split3>
    5dde:	a0 f3       	brcs	.-24     	; 0x5dc8 <__mulsf3+0x4>

00005de0 <__mulsf3_pse>:
    5de0:	95 9f       	mul	r25, r21
    5de2:	d1 f3       	breq	.-12     	; 0x5dd8 <__mulsf3+0x14>
    5de4:	95 0f       	add	r25, r21
    5de6:	50 e0       	ldi	r21, 0x00	; 0
    5de8:	55 1f       	adc	r21, r21
    5dea:	62 9f       	mul	r22, r18
    5dec:	f0 01       	movw	r30, r0
    5dee:	72 9f       	mul	r23, r18
    5df0:	bb 27       	eor	r27, r27
    5df2:	f0 0d       	add	r31, r0
    5df4:	b1 1d       	adc	r27, r1
    5df6:	63 9f       	mul	r22, r19
    5df8:	aa 27       	eor	r26, r26
    5dfa:	f0 0d       	add	r31, r0
    5dfc:	b1 1d       	adc	r27, r1
    5dfe:	aa 1f       	adc	r26, r26
    5e00:	64 9f       	mul	r22, r20
    5e02:	66 27       	eor	r22, r22
    5e04:	b0 0d       	add	r27, r0
    5e06:	a1 1d       	adc	r26, r1
    5e08:	66 1f       	adc	r22, r22
    5e0a:	82 9f       	mul	r24, r18
    5e0c:	22 27       	eor	r18, r18
    5e0e:	b0 0d       	add	r27, r0
    5e10:	a1 1d       	adc	r26, r1
    5e12:	62 1f       	adc	r22, r18
    5e14:	73 9f       	mul	r23, r19
    5e16:	b0 0d       	add	r27, r0
    5e18:	a1 1d       	adc	r26, r1
    5e1a:	62 1f       	adc	r22, r18
    5e1c:	83 9f       	mul	r24, r19
    5e1e:	a0 0d       	add	r26, r0
    5e20:	61 1d       	adc	r22, r1
    5e22:	22 1f       	adc	r18, r18
    5e24:	74 9f       	mul	r23, r20
    5e26:	33 27       	eor	r19, r19
    5e28:	a0 0d       	add	r26, r0
    5e2a:	61 1d       	adc	r22, r1
    5e2c:	23 1f       	adc	r18, r19
    5e2e:	84 9f       	mul	r24, r20
    5e30:	60 0d       	add	r22, r0
    5e32:	21 1d       	adc	r18, r1
    5e34:	82 2f       	mov	r24, r18
    5e36:	76 2f       	mov	r23, r22
    5e38:	6a 2f       	mov	r22, r26
    5e3a:	11 24       	eor	r1, r1
    5e3c:	9f 57       	subi	r25, 0x7F	; 127
    5e3e:	50 40       	sbci	r21, 0x00	; 0
    5e40:	8a f0       	brmi	.+34     	; 0x5e64 <__mulsf3_pse+0x84>
    5e42:	e1 f0       	breq	.+56     	; 0x5e7c <__mulsf3_pse+0x9c>
    5e44:	88 23       	and	r24, r24
    5e46:	4a f0       	brmi	.+18     	; 0x5e5a <__mulsf3_pse+0x7a>
    5e48:	ee 0f       	add	r30, r30
    5e4a:	ff 1f       	adc	r31, r31
    5e4c:	bb 1f       	adc	r27, r27
    5e4e:	66 1f       	adc	r22, r22
    5e50:	77 1f       	adc	r23, r23
    5e52:	88 1f       	adc	r24, r24
    5e54:	91 50       	subi	r25, 0x01	; 1
    5e56:	50 40       	sbci	r21, 0x00	; 0
    5e58:	a9 f7       	brne	.-22     	; 0x5e44 <__mulsf3_pse+0x64>
    5e5a:	9e 3f       	cpi	r25, 0xFE	; 254
    5e5c:	51 05       	cpc	r21, r1
    5e5e:	70 f0       	brcs	.+28     	; 0x5e7c <__mulsf3_pse+0x9c>
    5e60:	60 cf       	rjmp	.-320    	; 0x5d22 <__fp_inf>
    5e62:	aa cf       	rjmp	.-172    	; 0x5db8 <__fp_szero>
    5e64:	5f 3f       	cpi	r21, 0xFF	; 255
    5e66:	ec f3       	brlt	.-6      	; 0x5e62 <__mulsf3_pse+0x82>
    5e68:	98 3e       	cpi	r25, 0xE8	; 232
    5e6a:	dc f3       	brlt	.-10     	; 0x5e62 <__mulsf3_pse+0x82>
    5e6c:	86 95       	lsr	r24
    5e6e:	77 95       	ror	r23
    5e70:	67 95       	ror	r22
    5e72:	b7 95       	ror	r27
    5e74:	f7 95       	ror	r31
    5e76:	e7 95       	ror	r30
    5e78:	9f 5f       	subi	r25, 0xFF	; 255
    5e7a:	c1 f7       	brne	.-16     	; 0x5e6c <__mulsf3_pse+0x8c>
    5e7c:	fe 2b       	or	r31, r30
    5e7e:	88 0f       	add	r24, r24
    5e80:	91 1d       	adc	r25, r1
    5e82:	96 95       	lsr	r25
    5e84:	87 95       	ror	r24
    5e86:	97 f9       	bld	r25, 7
    5e88:	08 95       	ret

00005e8a <__divmodhi4>:
    5e8a:	97 fb       	bst	r25, 7
    5e8c:	07 2e       	mov	r0, r23
    5e8e:	16 f4       	brtc	.+4      	; 0x5e94 <__divmodhi4+0xa>
    5e90:	00 94       	com	r0
    5e92:	06 d0       	rcall	.+12     	; 0x5ea0 <__divmodhi4_neg1>
    5e94:	77 fd       	sbrc	r23, 7
    5e96:	08 d0       	rcall	.+16     	; 0x5ea8 <__divmodhi4_neg2>
    5e98:	35 d0       	rcall	.+106    	; 0x5f04 <__udivmodhi4>
    5e9a:	07 fc       	sbrc	r0, 7
    5e9c:	05 d0       	rcall	.+10     	; 0x5ea8 <__divmodhi4_neg2>
    5e9e:	3e f4       	brtc	.+14     	; 0x5eae <__divmodhi4_exit>

00005ea0 <__divmodhi4_neg1>:
    5ea0:	90 95       	com	r25
    5ea2:	81 95       	neg	r24
    5ea4:	9f 4f       	sbci	r25, 0xFF	; 255
    5ea6:	08 95       	ret

00005ea8 <__divmodhi4_neg2>:
    5ea8:	70 95       	com	r23
    5eaa:	61 95       	neg	r22
    5eac:	7f 4f       	sbci	r23, 0xFF	; 255

00005eae <__divmodhi4_exit>:
    5eae:	08 95       	ret

00005eb0 <__udivmodsi4>:
    5eb0:	a1 e2       	ldi	r26, 0x21	; 33
    5eb2:	1a 2e       	mov	r1, r26
    5eb4:	aa 1b       	sub	r26, r26
    5eb6:	bb 1b       	sub	r27, r27
    5eb8:	fd 01       	movw	r30, r26
    5eba:	0d c0       	rjmp	.+26     	; 0x5ed6 <__udivmodsi4_ep>

00005ebc <__udivmodsi4_loop>:
    5ebc:	aa 1f       	adc	r26, r26
    5ebe:	bb 1f       	adc	r27, r27
    5ec0:	ee 1f       	adc	r30, r30
    5ec2:	ff 1f       	adc	r31, r31
    5ec4:	a2 17       	cp	r26, r18
    5ec6:	b3 07       	cpc	r27, r19
    5ec8:	e4 07       	cpc	r30, r20
    5eca:	f5 07       	cpc	r31, r21
    5ecc:	20 f0       	brcs	.+8      	; 0x5ed6 <__udivmodsi4_ep>
    5ece:	a2 1b       	sub	r26, r18
    5ed0:	b3 0b       	sbc	r27, r19
    5ed2:	e4 0b       	sbc	r30, r20
    5ed4:	f5 0b       	sbc	r31, r21

00005ed6 <__udivmodsi4_ep>:
    5ed6:	66 1f       	adc	r22, r22
    5ed8:	77 1f       	adc	r23, r23
    5eda:	88 1f       	adc	r24, r24
    5edc:	99 1f       	adc	r25, r25
    5ede:	1a 94       	dec	r1
    5ee0:	69 f7       	brne	.-38     	; 0x5ebc <__udivmodsi4_loop>
    5ee2:	60 95       	com	r22
    5ee4:	70 95       	com	r23
    5ee6:	80 95       	com	r24
    5ee8:	90 95       	com	r25
    5eea:	9b 01       	movw	r18, r22
    5eec:	ac 01       	movw	r20, r24
    5eee:	bd 01       	movw	r22, r26
    5ef0:	cf 01       	movw	r24, r30
    5ef2:	08 95       	ret

00005ef4 <__tablejump2__>:
    5ef4:	ee 0f       	add	r30, r30
    5ef6:	ff 1f       	adc	r31, r31
    5ef8:	88 1f       	adc	r24, r24
    5efa:	8b bf       	out	0x3b, r24	; 59
    5efc:	07 90       	elpm	r0, Z+
    5efe:	f6 91       	elpm	r31, Z
    5f00:	e0 2d       	mov	r30, r0
    5f02:	19 94       	eijmp

00005f04 <__udivmodhi4>:
    5f04:	aa 1b       	sub	r26, r26
    5f06:	bb 1b       	sub	r27, r27
    5f08:	51 e1       	ldi	r21, 0x11	; 17
    5f0a:	07 c0       	rjmp	.+14     	; 0x5f1a <__udivmodhi4_ep>

00005f0c <__udivmodhi4_loop>:
    5f0c:	aa 1f       	adc	r26, r26
    5f0e:	bb 1f       	adc	r27, r27
    5f10:	a6 17       	cp	r26, r22
    5f12:	b7 07       	cpc	r27, r23
    5f14:	10 f0       	brcs	.+4      	; 0x5f1a <__udivmodhi4_ep>
    5f16:	a6 1b       	sub	r26, r22
    5f18:	b7 0b       	sbc	r27, r23

00005f1a <__udivmodhi4_ep>:
    5f1a:	88 1f       	adc	r24, r24
    5f1c:	99 1f       	adc	r25, r25
    5f1e:	5a 95       	dec	r21
    5f20:	a9 f7       	brne	.-22     	; 0x5f0c <__udivmodhi4_loop>
    5f22:	80 95       	com	r24
    5f24:	90 95       	com	r25
    5f26:	bc 01       	movw	r22, r24
    5f28:	cd 01       	movw	r24, r26
    5f2a:	08 95       	ret

00005f2c <calloc>:
    5f2c:	0f 93       	push	r16
    5f2e:	1f 93       	push	r17
    5f30:	cf 93       	push	r28
    5f32:	df 93       	push	r29
    5f34:	86 9f       	mul	r24, r22
    5f36:	80 01       	movw	r16, r0
    5f38:	87 9f       	mul	r24, r23
    5f3a:	10 0d       	add	r17, r0
    5f3c:	96 9f       	mul	r25, r22
    5f3e:	10 0d       	add	r17, r0
    5f40:	11 24       	eor	r1, r1
    5f42:	c8 01       	movw	r24, r16
    5f44:	0d d0       	rcall	.+26     	; 0x5f60 <malloc>
    5f46:	ec 01       	movw	r28, r24
    5f48:	00 97       	sbiw	r24, 0x00	; 0
    5f4a:	21 f0       	breq	.+8      	; 0x5f54 <calloc+0x28>
    5f4c:	a8 01       	movw	r20, r16
    5f4e:	60 e0       	ldi	r22, 0x00	; 0
    5f50:	70 e0       	ldi	r23, 0x00	; 0
    5f52:	89 d1       	rcall	.+786    	; 0x6266 <memset>
    5f54:	ce 01       	movw	r24, r28
    5f56:	df 91       	pop	r29
    5f58:	cf 91       	pop	r28
    5f5a:	1f 91       	pop	r17
    5f5c:	0f 91       	pop	r16
    5f5e:	08 95       	ret

00005f60 <malloc>:
    5f60:	0f 93       	push	r16
    5f62:	1f 93       	push	r17
    5f64:	cf 93       	push	r28
    5f66:	df 93       	push	r29
    5f68:	82 30       	cpi	r24, 0x02	; 2
    5f6a:	91 05       	cpc	r25, r1
    5f6c:	10 f4       	brcc	.+4      	; 0x5f72 <malloc+0x12>
    5f6e:	82 e0       	ldi	r24, 0x02	; 2
    5f70:	90 e0       	ldi	r25, 0x00	; 0
    5f72:	e0 91 21 1b 	lds	r30, 0x1B21	; 0x801b21 <__flp>
    5f76:	f0 91 22 1b 	lds	r31, 0x1B22	; 0x801b22 <__flp+0x1>
    5f7a:	20 e0       	ldi	r18, 0x00	; 0
    5f7c:	30 e0       	ldi	r19, 0x00	; 0
    5f7e:	a0 e0       	ldi	r26, 0x00	; 0
    5f80:	b0 e0       	ldi	r27, 0x00	; 0
    5f82:	30 97       	sbiw	r30, 0x00	; 0
    5f84:	19 f1       	breq	.+70     	; 0x5fcc <malloc+0x6c>
    5f86:	40 81       	ld	r20, Z
    5f88:	51 81       	ldd	r21, Z+1	; 0x01
    5f8a:	02 81       	ldd	r16, Z+2	; 0x02
    5f8c:	13 81       	ldd	r17, Z+3	; 0x03
    5f8e:	48 17       	cp	r20, r24
    5f90:	59 07       	cpc	r21, r25
    5f92:	c8 f0       	brcs	.+50     	; 0x5fc6 <malloc+0x66>
    5f94:	84 17       	cp	r24, r20
    5f96:	95 07       	cpc	r25, r21
    5f98:	69 f4       	brne	.+26     	; 0x5fb4 <malloc+0x54>
    5f9a:	10 97       	sbiw	r26, 0x00	; 0
    5f9c:	31 f0       	breq	.+12     	; 0x5faa <malloc+0x4a>
    5f9e:	12 96       	adiw	r26, 0x02	; 2
    5fa0:	0c 93       	st	X, r16
    5fa2:	12 97       	sbiw	r26, 0x02	; 2
    5fa4:	13 96       	adiw	r26, 0x03	; 3
    5fa6:	1c 93       	st	X, r17
    5fa8:	27 c0       	rjmp	.+78     	; 0x5ff8 <malloc+0x98>
    5faa:	00 93 21 1b 	sts	0x1B21, r16	; 0x801b21 <__flp>
    5fae:	10 93 22 1b 	sts	0x1B22, r17	; 0x801b22 <__flp+0x1>
    5fb2:	22 c0       	rjmp	.+68     	; 0x5ff8 <malloc+0x98>
    5fb4:	21 15       	cp	r18, r1
    5fb6:	31 05       	cpc	r19, r1
    5fb8:	19 f0       	breq	.+6      	; 0x5fc0 <malloc+0x60>
    5fba:	42 17       	cp	r20, r18
    5fbc:	53 07       	cpc	r21, r19
    5fbe:	18 f4       	brcc	.+6      	; 0x5fc6 <malloc+0x66>
    5fc0:	9a 01       	movw	r18, r20
    5fc2:	bd 01       	movw	r22, r26
    5fc4:	ef 01       	movw	r28, r30
    5fc6:	df 01       	movw	r26, r30
    5fc8:	f8 01       	movw	r30, r16
    5fca:	db cf       	rjmp	.-74     	; 0x5f82 <malloc+0x22>
    5fcc:	21 15       	cp	r18, r1
    5fce:	31 05       	cpc	r19, r1
    5fd0:	f9 f0       	breq	.+62     	; 0x6010 <malloc+0xb0>
    5fd2:	28 1b       	sub	r18, r24
    5fd4:	39 0b       	sbc	r19, r25
    5fd6:	24 30       	cpi	r18, 0x04	; 4
    5fd8:	31 05       	cpc	r19, r1
    5fda:	80 f4       	brcc	.+32     	; 0x5ffc <malloc+0x9c>
    5fdc:	8a 81       	ldd	r24, Y+2	; 0x02
    5fde:	9b 81       	ldd	r25, Y+3	; 0x03
    5fe0:	61 15       	cp	r22, r1
    5fe2:	71 05       	cpc	r23, r1
    5fe4:	21 f0       	breq	.+8      	; 0x5fee <malloc+0x8e>
    5fe6:	fb 01       	movw	r30, r22
    5fe8:	93 83       	std	Z+3, r25	; 0x03
    5fea:	82 83       	std	Z+2, r24	; 0x02
    5fec:	04 c0       	rjmp	.+8      	; 0x5ff6 <malloc+0x96>
    5fee:	90 93 22 1b 	sts	0x1B22, r25	; 0x801b22 <__flp+0x1>
    5ff2:	80 93 21 1b 	sts	0x1B21, r24	; 0x801b21 <__flp>
    5ff6:	fe 01       	movw	r30, r28
    5ff8:	32 96       	adiw	r30, 0x02	; 2
    5ffa:	44 c0       	rjmp	.+136    	; 0x6084 <malloc+0x124>
    5ffc:	fe 01       	movw	r30, r28
    5ffe:	e2 0f       	add	r30, r18
    6000:	f3 1f       	adc	r31, r19
    6002:	81 93       	st	Z+, r24
    6004:	91 93       	st	Z+, r25
    6006:	22 50       	subi	r18, 0x02	; 2
    6008:	31 09       	sbc	r19, r1
    600a:	39 83       	std	Y+1, r19	; 0x01
    600c:	28 83       	st	Y, r18
    600e:	3a c0       	rjmp	.+116    	; 0x6084 <malloc+0x124>
    6010:	20 91 1f 1b 	lds	r18, 0x1B1F	; 0x801b1f <__brkval>
    6014:	30 91 20 1b 	lds	r19, 0x1B20	; 0x801b20 <__brkval+0x1>
    6018:	23 2b       	or	r18, r19
    601a:	41 f4       	brne	.+16     	; 0x602c <malloc+0xcc>
    601c:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    6020:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    6024:	30 93 20 1b 	sts	0x1B20, r19	; 0x801b20 <__brkval+0x1>
    6028:	20 93 1f 1b 	sts	0x1B1F, r18	; 0x801b1f <__brkval>
    602c:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    6030:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    6034:	21 15       	cp	r18, r1
    6036:	31 05       	cpc	r19, r1
    6038:	41 f4       	brne	.+16     	; 0x604a <malloc+0xea>
    603a:	2d b7       	in	r18, 0x3d	; 61
    603c:	3e b7       	in	r19, 0x3e	; 62
    603e:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    6042:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    6046:	24 1b       	sub	r18, r20
    6048:	35 0b       	sbc	r19, r21
    604a:	e0 91 1f 1b 	lds	r30, 0x1B1F	; 0x801b1f <__brkval>
    604e:	f0 91 20 1b 	lds	r31, 0x1B20	; 0x801b20 <__brkval+0x1>
    6052:	e2 17       	cp	r30, r18
    6054:	f3 07       	cpc	r31, r19
    6056:	a0 f4       	brcc	.+40     	; 0x6080 <malloc+0x120>
    6058:	2e 1b       	sub	r18, r30
    605a:	3f 0b       	sbc	r19, r31
    605c:	28 17       	cp	r18, r24
    605e:	39 07       	cpc	r19, r25
    6060:	78 f0       	brcs	.+30     	; 0x6080 <malloc+0x120>
    6062:	ac 01       	movw	r20, r24
    6064:	4e 5f       	subi	r20, 0xFE	; 254
    6066:	5f 4f       	sbci	r21, 0xFF	; 255
    6068:	24 17       	cp	r18, r20
    606a:	35 07       	cpc	r19, r21
    606c:	48 f0       	brcs	.+18     	; 0x6080 <malloc+0x120>
    606e:	4e 0f       	add	r20, r30
    6070:	5f 1f       	adc	r21, r31
    6072:	50 93 20 1b 	sts	0x1B20, r21	; 0x801b20 <__brkval+0x1>
    6076:	40 93 1f 1b 	sts	0x1B1F, r20	; 0x801b1f <__brkval>
    607a:	81 93       	st	Z+, r24
    607c:	91 93       	st	Z+, r25
    607e:	02 c0       	rjmp	.+4      	; 0x6084 <malloc+0x124>
    6080:	e0 e0       	ldi	r30, 0x00	; 0
    6082:	f0 e0       	ldi	r31, 0x00	; 0
    6084:	cf 01       	movw	r24, r30
    6086:	df 91       	pop	r29
    6088:	cf 91       	pop	r28
    608a:	1f 91       	pop	r17
    608c:	0f 91       	pop	r16
    608e:	08 95       	ret

00006090 <free>:
    6090:	cf 93       	push	r28
    6092:	df 93       	push	r29
    6094:	00 97       	sbiw	r24, 0x00	; 0
    6096:	09 f4       	brne	.+2      	; 0x609a <free+0xa>
    6098:	81 c0       	rjmp	.+258    	; 0x619c <free+0x10c>
    609a:	fc 01       	movw	r30, r24
    609c:	32 97       	sbiw	r30, 0x02	; 2
    609e:	13 82       	std	Z+3, r1	; 0x03
    60a0:	12 82       	std	Z+2, r1	; 0x02
    60a2:	a0 91 21 1b 	lds	r26, 0x1B21	; 0x801b21 <__flp>
    60a6:	b0 91 22 1b 	lds	r27, 0x1B22	; 0x801b22 <__flp+0x1>
    60aa:	10 97       	sbiw	r26, 0x00	; 0
    60ac:	81 f4       	brne	.+32     	; 0x60ce <free+0x3e>
    60ae:	20 81       	ld	r18, Z
    60b0:	31 81       	ldd	r19, Z+1	; 0x01
    60b2:	82 0f       	add	r24, r18
    60b4:	93 1f       	adc	r25, r19
    60b6:	20 91 1f 1b 	lds	r18, 0x1B1F	; 0x801b1f <__brkval>
    60ba:	30 91 20 1b 	lds	r19, 0x1B20	; 0x801b20 <__brkval+0x1>
    60be:	28 17       	cp	r18, r24
    60c0:	39 07       	cpc	r19, r25
    60c2:	51 f5       	brne	.+84     	; 0x6118 <free+0x88>
    60c4:	f0 93 20 1b 	sts	0x1B20, r31	; 0x801b20 <__brkval+0x1>
    60c8:	e0 93 1f 1b 	sts	0x1B1F, r30	; 0x801b1f <__brkval>
    60cc:	67 c0       	rjmp	.+206    	; 0x619c <free+0x10c>
    60ce:	ed 01       	movw	r28, r26
    60d0:	20 e0       	ldi	r18, 0x00	; 0
    60d2:	30 e0       	ldi	r19, 0x00	; 0
    60d4:	ce 17       	cp	r28, r30
    60d6:	df 07       	cpc	r29, r31
    60d8:	40 f4       	brcc	.+16     	; 0x60ea <free+0x5a>
    60da:	4a 81       	ldd	r20, Y+2	; 0x02
    60dc:	5b 81       	ldd	r21, Y+3	; 0x03
    60de:	9e 01       	movw	r18, r28
    60e0:	41 15       	cp	r20, r1
    60e2:	51 05       	cpc	r21, r1
    60e4:	f1 f0       	breq	.+60     	; 0x6122 <free+0x92>
    60e6:	ea 01       	movw	r28, r20
    60e8:	f5 cf       	rjmp	.-22     	; 0x60d4 <free+0x44>
    60ea:	d3 83       	std	Z+3, r29	; 0x03
    60ec:	c2 83       	std	Z+2, r28	; 0x02
    60ee:	40 81       	ld	r20, Z
    60f0:	51 81       	ldd	r21, Z+1	; 0x01
    60f2:	84 0f       	add	r24, r20
    60f4:	95 1f       	adc	r25, r21
    60f6:	c8 17       	cp	r28, r24
    60f8:	d9 07       	cpc	r29, r25
    60fa:	59 f4       	brne	.+22     	; 0x6112 <free+0x82>
    60fc:	88 81       	ld	r24, Y
    60fe:	99 81       	ldd	r25, Y+1	; 0x01
    6100:	84 0f       	add	r24, r20
    6102:	95 1f       	adc	r25, r21
    6104:	02 96       	adiw	r24, 0x02	; 2
    6106:	91 83       	std	Z+1, r25	; 0x01
    6108:	80 83       	st	Z, r24
    610a:	8a 81       	ldd	r24, Y+2	; 0x02
    610c:	9b 81       	ldd	r25, Y+3	; 0x03
    610e:	93 83       	std	Z+3, r25	; 0x03
    6110:	82 83       	std	Z+2, r24	; 0x02
    6112:	21 15       	cp	r18, r1
    6114:	31 05       	cpc	r19, r1
    6116:	29 f4       	brne	.+10     	; 0x6122 <free+0x92>
    6118:	f0 93 22 1b 	sts	0x1B22, r31	; 0x801b22 <__flp+0x1>
    611c:	e0 93 21 1b 	sts	0x1B21, r30	; 0x801b21 <__flp>
    6120:	3d c0       	rjmp	.+122    	; 0x619c <free+0x10c>
    6122:	e9 01       	movw	r28, r18
    6124:	fb 83       	std	Y+3, r31	; 0x03
    6126:	ea 83       	std	Y+2, r30	; 0x02
    6128:	49 91       	ld	r20, Y+
    612a:	59 91       	ld	r21, Y+
    612c:	c4 0f       	add	r28, r20
    612e:	d5 1f       	adc	r29, r21
    6130:	ec 17       	cp	r30, r28
    6132:	fd 07       	cpc	r31, r29
    6134:	61 f4       	brne	.+24     	; 0x614e <free+0xbe>
    6136:	80 81       	ld	r24, Z
    6138:	91 81       	ldd	r25, Z+1	; 0x01
    613a:	84 0f       	add	r24, r20
    613c:	95 1f       	adc	r25, r21
    613e:	02 96       	adiw	r24, 0x02	; 2
    6140:	e9 01       	movw	r28, r18
    6142:	99 83       	std	Y+1, r25	; 0x01
    6144:	88 83       	st	Y, r24
    6146:	82 81       	ldd	r24, Z+2	; 0x02
    6148:	93 81       	ldd	r25, Z+3	; 0x03
    614a:	9b 83       	std	Y+3, r25	; 0x03
    614c:	8a 83       	std	Y+2, r24	; 0x02
    614e:	e0 e0       	ldi	r30, 0x00	; 0
    6150:	f0 e0       	ldi	r31, 0x00	; 0
    6152:	12 96       	adiw	r26, 0x02	; 2
    6154:	8d 91       	ld	r24, X+
    6156:	9c 91       	ld	r25, X
    6158:	13 97       	sbiw	r26, 0x03	; 3
    615a:	00 97       	sbiw	r24, 0x00	; 0
    615c:	19 f0       	breq	.+6      	; 0x6164 <free+0xd4>
    615e:	fd 01       	movw	r30, r26
    6160:	dc 01       	movw	r26, r24
    6162:	f7 cf       	rjmp	.-18     	; 0x6152 <free+0xc2>
    6164:	8d 91       	ld	r24, X+
    6166:	9c 91       	ld	r25, X
    6168:	11 97       	sbiw	r26, 0x01	; 1
    616a:	9d 01       	movw	r18, r26
    616c:	2e 5f       	subi	r18, 0xFE	; 254
    616e:	3f 4f       	sbci	r19, 0xFF	; 255
    6170:	82 0f       	add	r24, r18
    6172:	93 1f       	adc	r25, r19
    6174:	20 91 1f 1b 	lds	r18, 0x1B1F	; 0x801b1f <__brkval>
    6178:	30 91 20 1b 	lds	r19, 0x1B20	; 0x801b20 <__brkval+0x1>
    617c:	28 17       	cp	r18, r24
    617e:	39 07       	cpc	r19, r25
    6180:	69 f4       	brne	.+26     	; 0x619c <free+0x10c>
    6182:	30 97       	sbiw	r30, 0x00	; 0
    6184:	29 f4       	brne	.+10     	; 0x6190 <free+0x100>
    6186:	10 92 22 1b 	sts	0x1B22, r1	; 0x801b22 <__flp+0x1>
    618a:	10 92 21 1b 	sts	0x1B21, r1	; 0x801b21 <__flp>
    618e:	02 c0       	rjmp	.+4      	; 0x6194 <free+0x104>
    6190:	13 82       	std	Z+3, r1	; 0x03
    6192:	12 82       	std	Z+2, r1	; 0x02
    6194:	b0 93 20 1b 	sts	0x1B20, r27	; 0x801b20 <__brkval+0x1>
    6198:	a0 93 1f 1b 	sts	0x1B1F, r26	; 0x801b1f <__brkval>
    619c:	df 91       	pop	r29
    619e:	cf 91       	pop	r28
    61a0:	08 95       	ret

000061a2 <do_rand>:
    61a2:	8f 92       	push	r8
    61a4:	9f 92       	push	r9
    61a6:	af 92       	push	r10
    61a8:	bf 92       	push	r11
    61aa:	cf 92       	push	r12
    61ac:	df 92       	push	r13
    61ae:	ef 92       	push	r14
    61b0:	ff 92       	push	r15
    61b2:	cf 93       	push	r28
    61b4:	df 93       	push	r29
    61b6:	ec 01       	movw	r28, r24
    61b8:	68 81       	ld	r22, Y
    61ba:	79 81       	ldd	r23, Y+1	; 0x01
    61bc:	8a 81       	ldd	r24, Y+2	; 0x02
    61be:	9b 81       	ldd	r25, Y+3	; 0x03
    61c0:	61 15       	cp	r22, r1
    61c2:	71 05       	cpc	r23, r1
    61c4:	81 05       	cpc	r24, r1
    61c6:	91 05       	cpc	r25, r1
    61c8:	21 f4       	brne	.+8      	; 0x61d2 <do_rand+0x30>
    61ca:	64 e2       	ldi	r22, 0x24	; 36
    61cc:	79 ed       	ldi	r23, 0xD9	; 217
    61ce:	8b e5       	ldi	r24, 0x5B	; 91
    61d0:	97 e0       	ldi	r25, 0x07	; 7
    61d2:	2d e1       	ldi	r18, 0x1D	; 29
    61d4:	33 ef       	ldi	r19, 0xF3	; 243
    61d6:	41 e0       	ldi	r20, 0x01	; 1
    61d8:	50 e0       	ldi	r21, 0x00	; 0
    61da:	b9 d3       	rcall	.+1906   	; 0x694e <__divmodsi4>
    61dc:	49 01       	movw	r8, r18
    61de:	5a 01       	movw	r10, r20
    61e0:	9b 01       	movw	r18, r22
    61e2:	ac 01       	movw	r20, r24
    61e4:	a7 ea       	ldi	r26, 0xA7	; 167
    61e6:	b1 e4       	ldi	r27, 0x41	; 65
    61e8:	ce d3       	rcall	.+1948   	; 0x6986 <__muluhisi3>
    61ea:	6b 01       	movw	r12, r22
    61ec:	7c 01       	movw	r14, r24
    61ee:	ac ee       	ldi	r26, 0xEC	; 236
    61f0:	b4 ef       	ldi	r27, 0xF4	; 244
    61f2:	a5 01       	movw	r20, r10
    61f4:	94 01       	movw	r18, r8
    61f6:	d3 d3       	rcall	.+1958   	; 0x699e <__mulohisi3>
    61f8:	dc 01       	movw	r26, r24
    61fa:	cb 01       	movw	r24, r22
    61fc:	8c 0d       	add	r24, r12
    61fe:	9d 1d       	adc	r25, r13
    6200:	ae 1d       	adc	r26, r14
    6202:	bf 1d       	adc	r27, r15
    6204:	b7 ff       	sbrs	r27, 7
    6206:	03 c0       	rjmp	.+6      	; 0x620e <do_rand+0x6c>
    6208:	01 97       	sbiw	r24, 0x01	; 1
    620a:	a1 09       	sbc	r26, r1
    620c:	b0 48       	sbci	r27, 0x80	; 128
    620e:	88 83       	st	Y, r24
    6210:	99 83       	std	Y+1, r25	; 0x01
    6212:	aa 83       	std	Y+2, r26	; 0x02
    6214:	bb 83       	std	Y+3, r27	; 0x03
    6216:	9f 77       	andi	r25, 0x7F	; 127
    6218:	df 91       	pop	r29
    621a:	cf 91       	pop	r28
    621c:	ff 90       	pop	r15
    621e:	ef 90       	pop	r14
    6220:	df 90       	pop	r13
    6222:	cf 90       	pop	r12
    6224:	bf 90       	pop	r11
    6226:	af 90       	pop	r10
    6228:	9f 90       	pop	r9
    622a:	8f 90       	pop	r8
    622c:	08 95       	ret

0000622e <rand_r>:
    622e:	b9 cf       	rjmp	.-142    	; 0x61a2 <do_rand>

00006230 <rand>:
    6230:	86 e0       	ldi	r24, 0x06	; 6
    6232:	92 e0       	ldi	r25, 0x02	; 2
    6234:	b6 cf       	rjmp	.-148    	; 0x61a2 <do_rand>

00006236 <srand>:
    6236:	a0 e0       	ldi	r26, 0x00	; 0
    6238:	b0 e0       	ldi	r27, 0x00	; 0
    623a:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <next>
    623e:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <next+0x1>
    6242:	a0 93 08 02 	sts	0x0208, r26	; 0x800208 <next+0x2>
    6246:	b0 93 09 02 	sts	0x0209, r27	; 0x800209 <next+0x3>
    624a:	08 95       	ret

0000624c <abort>:
    624c:	81 e0       	ldi	r24, 0x01	; 1
    624e:	90 e0       	ldi	r25, 0x00	; 0
    6250:	f8 94       	cli
    6252:	b8 c3       	rjmp	.+1904   	; 0x69c4 <_exit>

00006254 <memcpy>:
    6254:	fb 01       	movw	r30, r22
    6256:	dc 01       	movw	r26, r24
    6258:	02 c0       	rjmp	.+4      	; 0x625e <memcpy+0xa>
    625a:	01 90       	ld	r0, Z+
    625c:	0d 92       	st	X+, r0
    625e:	41 50       	subi	r20, 0x01	; 1
    6260:	50 40       	sbci	r21, 0x00	; 0
    6262:	d8 f7       	brcc	.-10     	; 0x625a <memcpy+0x6>
    6264:	08 95       	ret

00006266 <memset>:
    6266:	dc 01       	movw	r26, r24
    6268:	01 c0       	rjmp	.+2      	; 0x626c <memset+0x6>
    626a:	6d 93       	st	X+, r22
    626c:	41 50       	subi	r20, 0x01	; 1
    626e:	50 40       	sbci	r21, 0x00	; 0
    6270:	e0 f7       	brcc	.-8      	; 0x626a <memset+0x4>
    6272:	08 95       	ret

00006274 <strcasestr>:
    6274:	fb 01       	movw	r30, r22
    6276:	51 91       	ld	r21, Z+
    6278:	55 23       	and	r21, r21
    627a:	b1 f0       	breq	.+44     	; 0x62a8 <strcasestr+0x34>
    627c:	bf 01       	movw	r22, r30
    627e:	dc 01       	movw	r26, r24
    6280:	05 2e       	mov	r0, r21
    6282:	4d 91       	ld	r20, X+
    6284:	44 23       	and	r20, r20
    6286:	69 f0       	breq	.+26     	; 0x62a2 <strcasestr+0x2e>
    6288:	10 d0       	rcall	.+32     	; 0x62aa <strcasestr+0x36>
    628a:	d9 f7       	brne	.-10     	; 0x6282 <strcasestr+0xe>
    628c:	cd 01       	movw	r24, r26
    628e:	01 90       	ld	r0, Z+
    6290:	00 20       	and	r0, r0
    6292:	49 f0       	breq	.+18     	; 0x62a6 <strcasestr+0x32>
    6294:	4d 91       	ld	r20, X+
    6296:	41 11       	cpse	r20, r1
    6298:	08 d0       	rcall	.+16     	; 0x62aa <strcasestr+0x36>
    629a:	c9 f3       	breq	.-14     	; 0x628e <strcasestr+0x1a>
    629c:	fb 01       	movw	r30, r22
    629e:	41 11       	cpse	r20, r1
    62a0:	ee cf       	rjmp	.-36     	; 0x627e <strcasestr+0xa>
    62a2:	81 e0       	ldi	r24, 0x01	; 1
    62a4:	90 e0       	ldi	r25, 0x00	; 0
    62a6:	01 97       	sbiw	r24, 0x01	; 1
    62a8:	08 95       	ret
    62aa:	40 25       	eor	r20, r0
    62ac:	39 f0       	breq	.+14     	; 0x62bc <strcasestr+0x48>
    62ae:	40 32       	cpi	r20, 0x20	; 32
    62b0:	29 f4       	brne	.+10     	; 0x62bc <strcasestr+0x48>
    62b2:	40 29       	or	r20, r0
    62b4:	4b 57       	subi	r20, 0x7B	; 123
    62b6:	46 5e       	subi	r20, 0xE6	; 230
    62b8:	08 f0       	brcs	.+2      	; 0x62bc <strcasestr+0x48>
    62ba:	18 94       	sez
    62bc:	08 95       	ret

000062be <strcat>:
    62be:	fb 01       	movw	r30, r22
    62c0:	dc 01       	movw	r26, r24
    62c2:	0d 90       	ld	r0, X+
    62c4:	00 20       	and	r0, r0
    62c6:	e9 f7       	brne	.-6      	; 0x62c2 <strcat+0x4>
    62c8:	11 97       	sbiw	r26, 0x01	; 1
    62ca:	01 90       	ld	r0, Z+
    62cc:	0d 92       	st	X+, r0
    62ce:	00 20       	and	r0, r0
    62d0:	e1 f7       	brne	.-8      	; 0x62ca <strcat+0xc>
    62d2:	08 95       	ret

000062d4 <strcpy>:
    62d4:	fb 01       	movw	r30, r22
    62d6:	dc 01       	movw	r26, r24
    62d8:	01 90       	ld	r0, Z+
    62da:	0d 92       	st	X+, r0
    62dc:	00 20       	and	r0, r0
    62de:	e1 f7       	brne	.-8      	; 0x62d8 <strcpy+0x4>
    62e0:	08 95       	ret

000062e2 <strncasecmp>:
    62e2:	fb 01       	movw	r30, r22
    62e4:	dc 01       	movw	r26, r24
    62e6:	41 50       	subi	r20, 0x01	; 1
    62e8:	50 40       	sbci	r21, 0x00	; 0
    62ea:	88 f0       	brcs	.+34     	; 0x630e <strncasecmp+0x2c>
    62ec:	8d 91       	ld	r24, X+
    62ee:	81 34       	cpi	r24, 0x41	; 65
    62f0:	1c f0       	brlt	.+6      	; 0x62f8 <strncasecmp+0x16>
    62f2:	8b 35       	cpi	r24, 0x5B	; 91
    62f4:	0c f4       	brge	.+2      	; 0x62f8 <strncasecmp+0x16>
    62f6:	80 5e       	subi	r24, 0xE0	; 224
    62f8:	61 91       	ld	r22, Z+
    62fa:	61 34       	cpi	r22, 0x41	; 65
    62fc:	1c f0       	brlt	.+6      	; 0x6304 <strncasecmp+0x22>
    62fe:	6b 35       	cpi	r22, 0x5B	; 91
    6300:	0c f4       	brge	.+2      	; 0x6304 <strncasecmp+0x22>
    6302:	60 5e       	subi	r22, 0xE0	; 224
    6304:	86 1b       	sub	r24, r22
    6306:	61 11       	cpse	r22, r1
    6308:	71 f3       	breq	.-36     	; 0x62e6 <strncasecmp+0x4>
    630a:	99 0b       	sbc	r25, r25
    630c:	08 95       	ret
    630e:	88 1b       	sub	r24, r24
    6310:	fc cf       	rjmp	.-8      	; 0x630a <strncasecmp+0x28>

00006312 <printf>:
    6312:	cf 93       	push	r28
    6314:	df 93       	push	r29
    6316:	cd b7       	in	r28, 0x3d	; 61
    6318:	de b7       	in	r29, 0x3e	; 62
    631a:	ae 01       	movw	r20, r28
    631c:	4a 5f       	subi	r20, 0xFA	; 250
    631e:	5f 4f       	sbci	r21, 0xFF	; 255
    6320:	fa 01       	movw	r30, r20
    6322:	61 91       	ld	r22, Z+
    6324:	71 91       	ld	r23, Z+
    6326:	af 01       	movw	r20, r30
    6328:	80 91 25 1b 	lds	r24, 0x1B25	; 0x801b25 <__iob+0x2>
    632c:	90 91 26 1b 	lds	r25, 0x1B26	; 0x801b26 <__iob+0x3>
    6330:	61 d0       	rcall	.+194    	; 0x63f4 <vfprintf>
    6332:	df 91       	pop	r29
    6334:	cf 91       	pop	r28
    6336:	08 95       	ret

00006338 <puts>:
    6338:	0f 93       	push	r16
    633a:	1f 93       	push	r17
    633c:	cf 93       	push	r28
    633e:	df 93       	push	r29
    6340:	e0 91 25 1b 	lds	r30, 0x1B25	; 0x801b25 <__iob+0x2>
    6344:	f0 91 26 1b 	lds	r31, 0x1B26	; 0x801b26 <__iob+0x3>
    6348:	23 81       	ldd	r18, Z+3	; 0x03
    634a:	21 ff       	sbrs	r18, 1
    634c:	1b c0       	rjmp	.+54     	; 0x6384 <puts+0x4c>
    634e:	8c 01       	movw	r16, r24
    6350:	d0 e0       	ldi	r29, 0x00	; 0
    6352:	c0 e0       	ldi	r28, 0x00	; 0
    6354:	f8 01       	movw	r30, r16
    6356:	81 91       	ld	r24, Z+
    6358:	8f 01       	movw	r16, r30
    635a:	60 91 25 1b 	lds	r22, 0x1B25	; 0x801b25 <__iob+0x2>
    635e:	70 91 26 1b 	lds	r23, 0x1B26	; 0x801b26 <__iob+0x3>
    6362:	db 01       	movw	r26, r22
    6364:	18 96       	adiw	r26, 0x08	; 8
    6366:	ed 91       	ld	r30, X+
    6368:	fc 91       	ld	r31, X
    636a:	19 97       	sbiw	r26, 0x09	; 9
    636c:	88 23       	and	r24, r24
    636e:	31 f0       	breq	.+12     	; 0x637c <puts+0x44>
    6370:	19 95       	eicall
    6372:	89 2b       	or	r24, r25
    6374:	79 f3       	breq	.-34     	; 0x6354 <puts+0x1c>
    6376:	df ef       	ldi	r29, 0xFF	; 255
    6378:	cf ef       	ldi	r28, 0xFF	; 255
    637a:	ec cf       	rjmp	.-40     	; 0x6354 <puts+0x1c>
    637c:	8a e0       	ldi	r24, 0x0A	; 10
    637e:	19 95       	eicall
    6380:	89 2b       	or	r24, r25
    6382:	19 f0       	breq	.+6      	; 0x638a <puts+0x52>
    6384:	8f ef       	ldi	r24, 0xFF	; 255
    6386:	9f ef       	ldi	r25, 0xFF	; 255
    6388:	02 c0       	rjmp	.+4      	; 0x638e <puts+0x56>
    638a:	8d 2f       	mov	r24, r29
    638c:	9c 2f       	mov	r25, r28
    638e:	df 91       	pop	r29
    6390:	cf 91       	pop	r28
    6392:	1f 91       	pop	r17
    6394:	0f 91       	pop	r16
    6396:	08 95       	ret

00006398 <sprintf>:
    6398:	0f 93       	push	r16
    639a:	1f 93       	push	r17
    639c:	cf 93       	push	r28
    639e:	df 93       	push	r29
    63a0:	cd b7       	in	r28, 0x3d	; 61
    63a2:	de b7       	in	r29, 0x3e	; 62
    63a4:	2e 97       	sbiw	r28, 0x0e	; 14
    63a6:	0f b6       	in	r0, 0x3f	; 63
    63a8:	f8 94       	cli
    63aa:	de bf       	out	0x3e, r29	; 62
    63ac:	0f be       	out	0x3f, r0	; 63
    63ae:	cd bf       	out	0x3d, r28	; 61
    63b0:	0e 89       	ldd	r16, Y+22	; 0x16
    63b2:	1f 89       	ldd	r17, Y+23	; 0x17
    63b4:	86 e0       	ldi	r24, 0x06	; 6
    63b6:	8c 83       	std	Y+4, r24	; 0x04
    63b8:	1a 83       	std	Y+2, r17	; 0x02
    63ba:	09 83       	std	Y+1, r16	; 0x01
    63bc:	8f ef       	ldi	r24, 0xFF	; 255
    63be:	9f e7       	ldi	r25, 0x7F	; 127
    63c0:	9e 83       	std	Y+6, r25	; 0x06
    63c2:	8d 83       	std	Y+5, r24	; 0x05
    63c4:	ae 01       	movw	r20, r28
    63c6:	46 5e       	subi	r20, 0xE6	; 230
    63c8:	5f 4f       	sbci	r21, 0xFF	; 255
    63ca:	68 8d       	ldd	r22, Y+24	; 0x18
    63cc:	79 8d       	ldd	r23, Y+25	; 0x19
    63ce:	ce 01       	movw	r24, r28
    63d0:	01 96       	adiw	r24, 0x01	; 1
    63d2:	10 d0       	rcall	.+32     	; 0x63f4 <vfprintf>
    63d4:	ef 81       	ldd	r30, Y+7	; 0x07
    63d6:	f8 85       	ldd	r31, Y+8	; 0x08
    63d8:	e0 0f       	add	r30, r16
    63da:	f1 1f       	adc	r31, r17
    63dc:	10 82       	st	Z, r1
    63de:	2e 96       	adiw	r28, 0x0e	; 14
    63e0:	0f b6       	in	r0, 0x3f	; 63
    63e2:	f8 94       	cli
    63e4:	de bf       	out	0x3e, r29	; 62
    63e6:	0f be       	out	0x3f, r0	; 63
    63e8:	cd bf       	out	0x3d, r28	; 61
    63ea:	df 91       	pop	r29
    63ec:	cf 91       	pop	r28
    63ee:	1f 91       	pop	r17
    63f0:	0f 91       	pop	r16
    63f2:	08 95       	ret

000063f4 <vfprintf>:
    63f4:	2f 92       	push	r2
    63f6:	3f 92       	push	r3
    63f8:	4f 92       	push	r4
    63fa:	5f 92       	push	r5
    63fc:	6f 92       	push	r6
    63fe:	7f 92       	push	r7
    6400:	8f 92       	push	r8
    6402:	9f 92       	push	r9
    6404:	af 92       	push	r10
    6406:	bf 92       	push	r11
    6408:	cf 92       	push	r12
    640a:	df 92       	push	r13
    640c:	ef 92       	push	r14
    640e:	ff 92       	push	r15
    6410:	0f 93       	push	r16
    6412:	1f 93       	push	r17
    6414:	cf 93       	push	r28
    6416:	df 93       	push	r29
    6418:	cd b7       	in	r28, 0x3d	; 61
    641a:	de b7       	in	r29, 0x3e	; 62
    641c:	2b 97       	sbiw	r28, 0x0b	; 11
    641e:	0f b6       	in	r0, 0x3f	; 63
    6420:	f8 94       	cli
    6422:	de bf       	out	0x3e, r29	; 62
    6424:	0f be       	out	0x3f, r0	; 63
    6426:	cd bf       	out	0x3d, r28	; 61
    6428:	6c 01       	movw	r12, r24
    642a:	7b 01       	movw	r14, r22
    642c:	8a 01       	movw	r16, r20
    642e:	fc 01       	movw	r30, r24
    6430:	17 82       	std	Z+7, r1	; 0x07
    6432:	16 82       	std	Z+6, r1	; 0x06
    6434:	83 81       	ldd	r24, Z+3	; 0x03
    6436:	81 ff       	sbrs	r24, 1
    6438:	bf c1       	rjmp	.+894    	; 0x67b8 <vfprintf+0x3c4>
    643a:	ce 01       	movw	r24, r28
    643c:	01 96       	adiw	r24, 0x01	; 1
    643e:	3c 01       	movw	r6, r24
    6440:	f6 01       	movw	r30, r12
    6442:	93 81       	ldd	r25, Z+3	; 0x03
    6444:	f7 01       	movw	r30, r14
    6446:	93 fd       	sbrc	r25, 3
    6448:	85 91       	lpm	r24, Z+
    644a:	93 ff       	sbrs	r25, 3
    644c:	81 91       	ld	r24, Z+
    644e:	7f 01       	movw	r14, r30
    6450:	88 23       	and	r24, r24
    6452:	09 f4       	brne	.+2      	; 0x6456 <vfprintf+0x62>
    6454:	ad c1       	rjmp	.+858    	; 0x67b0 <vfprintf+0x3bc>
    6456:	85 32       	cpi	r24, 0x25	; 37
    6458:	39 f4       	brne	.+14     	; 0x6468 <vfprintf+0x74>
    645a:	93 fd       	sbrc	r25, 3
    645c:	85 91       	lpm	r24, Z+
    645e:	93 ff       	sbrs	r25, 3
    6460:	81 91       	ld	r24, Z+
    6462:	7f 01       	movw	r14, r30
    6464:	85 32       	cpi	r24, 0x25	; 37
    6466:	21 f4       	brne	.+8      	; 0x6470 <vfprintf+0x7c>
    6468:	b6 01       	movw	r22, r12
    646a:	90 e0       	ldi	r25, 0x00	; 0
    646c:	d6 d1       	rcall	.+940    	; 0x681a <fputc>
    646e:	e8 cf       	rjmp	.-48     	; 0x6440 <vfprintf+0x4c>
    6470:	91 2c       	mov	r9, r1
    6472:	21 2c       	mov	r2, r1
    6474:	31 2c       	mov	r3, r1
    6476:	ff e1       	ldi	r31, 0x1F	; 31
    6478:	f3 15       	cp	r31, r3
    647a:	d8 f0       	brcs	.+54     	; 0x64b2 <vfprintf+0xbe>
    647c:	8b 32       	cpi	r24, 0x2B	; 43
    647e:	79 f0       	breq	.+30     	; 0x649e <vfprintf+0xaa>
    6480:	38 f4       	brcc	.+14     	; 0x6490 <vfprintf+0x9c>
    6482:	80 32       	cpi	r24, 0x20	; 32
    6484:	79 f0       	breq	.+30     	; 0x64a4 <vfprintf+0xb0>
    6486:	83 32       	cpi	r24, 0x23	; 35
    6488:	a1 f4       	brne	.+40     	; 0x64b2 <vfprintf+0xbe>
    648a:	23 2d       	mov	r18, r3
    648c:	20 61       	ori	r18, 0x10	; 16
    648e:	1d c0       	rjmp	.+58     	; 0x64ca <vfprintf+0xd6>
    6490:	8d 32       	cpi	r24, 0x2D	; 45
    6492:	61 f0       	breq	.+24     	; 0x64ac <vfprintf+0xb8>
    6494:	80 33       	cpi	r24, 0x30	; 48
    6496:	69 f4       	brne	.+26     	; 0x64b2 <vfprintf+0xbe>
    6498:	23 2d       	mov	r18, r3
    649a:	21 60       	ori	r18, 0x01	; 1
    649c:	16 c0       	rjmp	.+44     	; 0x64ca <vfprintf+0xd6>
    649e:	83 2d       	mov	r24, r3
    64a0:	82 60       	ori	r24, 0x02	; 2
    64a2:	38 2e       	mov	r3, r24
    64a4:	e3 2d       	mov	r30, r3
    64a6:	e4 60       	ori	r30, 0x04	; 4
    64a8:	3e 2e       	mov	r3, r30
    64aa:	2a c0       	rjmp	.+84     	; 0x6500 <vfprintf+0x10c>
    64ac:	f3 2d       	mov	r31, r3
    64ae:	f8 60       	ori	r31, 0x08	; 8
    64b0:	1d c0       	rjmp	.+58     	; 0x64ec <vfprintf+0xf8>
    64b2:	37 fc       	sbrc	r3, 7
    64b4:	2d c0       	rjmp	.+90     	; 0x6510 <vfprintf+0x11c>
    64b6:	20 ed       	ldi	r18, 0xD0	; 208
    64b8:	28 0f       	add	r18, r24
    64ba:	2a 30       	cpi	r18, 0x0A	; 10
    64bc:	40 f0       	brcs	.+16     	; 0x64ce <vfprintf+0xda>
    64be:	8e 32       	cpi	r24, 0x2E	; 46
    64c0:	b9 f4       	brne	.+46     	; 0x64f0 <vfprintf+0xfc>
    64c2:	36 fc       	sbrc	r3, 6
    64c4:	75 c1       	rjmp	.+746    	; 0x67b0 <vfprintf+0x3bc>
    64c6:	23 2d       	mov	r18, r3
    64c8:	20 64       	ori	r18, 0x40	; 64
    64ca:	32 2e       	mov	r3, r18
    64cc:	19 c0       	rjmp	.+50     	; 0x6500 <vfprintf+0x10c>
    64ce:	36 fe       	sbrs	r3, 6
    64d0:	06 c0       	rjmp	.+12     	; 0x64de <vfprintf+0xea>
    64d2:	8a e0       	ldi	r24, 0x0A	; 10
    64d4:	98 9e       	mul	r9, r24
    64d6:	20 0d       	add	r18, r0
    64d8:	11 24       	eor	r1, r1
    64da:	92 2e       	mov	r9, r18
    64dc:	11 c0       	rjmp	.+34     	; 0x6500 <vfprintf+0x10c>
    64de:	ea e0       	ldi	r30, 0x0A	; 10
    64e0:	2e 9e       	mul	r2, r30
    64e2:	20 0d       	add	r18, r0
    64e4:	11 24       	eor	r1, r1
    64e6:	22 2e       	mov	r2, r18
    64e8:	f3 2d       	mov	r31, r3
    64ea:	f0 62       	ori	r31, 0x20	; 32
    64ec:	3f 2e       	mov	r3, r31
    64ee:	08 c0       	rjmp	.+16     	; 0x6500 <vfprintf+0x10c>
    64f0:	8c 36       	cpi	r24, 0x6C	; 108
    64f2:	21 f4       	brne	.+8      	; 0x64fc <vfprintf+0x108>
    64f4:	83 2d       	mov	r24, r3
    64f6:	80 68       	ori	r24, 0x80	; 128
    64f8:	38 2e       	mov	r3, r24
    64fa:	02 c0       	rjmp	.+4      	; 0x6500 <vfprintf+0x10c>
    64fc:	88 36       	cpi	r24, 0x68	; 104
    64fe:	41 f4       	brne	.+16     	; 0x6510 <vfprintf+0x11c>
    6500:	f7 01       	movw	r30, r14
    6502:	93 fd       	sbrc	r25, 3
    6504:	85 91       	lpm	r24, Z+
    6506:	93 ff       	sbrs	r25, 3
    6508:	81 91       	ld	r24, Z+
    650a:	7f 01       	movw	r14, r30
    650c:	81 11       	cpse	r24, r1
    650e:	b3 cf       	rjmp	.-154    	; 0x6476 <vfprintf+0x82>
    6510:	98 2f       	mov	r25, r24
    6512:	9f 7d       	andi	r25, 0xDF	; 223
    6514:	95 54       	subi	r25, 0x45	; 69
    6516:	93 30       	cpi	r25, 0x03	; 3
    6518:	28 f4       	brcc	.+10     	; 0x6524 <vfprintf+0x130>
    651a:	0c 5f       	subi	r16, 0xFC	; 252
    651c:	1f 4f       	sbci	r17, 0xFF	; 255
    651e:	9f e3       	ldi	r25, 0x3F	; 63
    6520:	99 83       	std	Y+1, r25	; 0x01
    6522:	0d c0       	rjmp	.+26     	; 0x653e <vfprintf+0x14a>
    6524:	83 36       	cpi	r24, 0x63	; 99
    6526:	31 f0       	breq	.+12     	; 0x6534 <vfprintf+0x140>
    6528:	83 37       	cpi	r24, 0x73	; 115
    652a:	71 f0       	breq	.+28     	; 0x6548 <vfprintf+0x154>
    652c:	83 35       	cpi	r24, 0x53	; 83
    652e:	09 f0       	breq	.+2      	; 0x6532 <vfprintf+0x13e>
    6530:	55 c0       	rjmp	.+170    	; 0x65dc <vfprintf+0x1e8>
    6532:	20 c0       	rjmp	.+64     	; 0x6574 <vfprintf+0x180>
    6534:	f8 01       	movw	r30, r16
    6536:	80 81       	ld	r24, Z
    6538:	89 83       	std	Y+1, r24	; 0x01
    653a:	0e 5f       	subi	r16, 0xFE	; 254
    653c:	1f 4f       	sbci	r17, 0xFF	; 255
    653e:	88 24       	eor	r8, r8
    6540:	83 94       	inc	r8
    6542:	91 2c       	mov	r9, r1
    6544:	53 01       	movw	r10, r6
    6546:	12 c0       	rjmp	.+36     	; 0x656c <vfprintf+0x178>
    6548:	28 01       	movw	r4, r16
    654a:	f2 e0       	ldi	r31, 0x02	; 2
    654c:	4f 0e       	add	r4, r31
    654e:	51 1c       	adc	r5, r1
    6550:	f8 01       	movw	r30, r16
    6552:	a0 80       	ld	r10, Z
    6554:	b1 80       	ldd	r11, Z+1	; 0x01
    6556:	36 fe       	sbrs	r3, 6
    6558:	03 c0       	rjmp	.+6      	; 0x6560 <vfprintf+0x16c>
    655a:	69 2d       	mov	r22, r9
    655c:	70 e0       	ldi	r23, 0x00	; 0
    655e:	02 c0       	rjmp	.+4      	; 0x6564 <vfprintf+0x170>
    6560:	6f ef       	ldi	r22, 0xFF	; 255
    6562:	7f ef       	ldi	r23, 0xFF	; 255
    6564:	c5 01       	movw	r24, r10
    6566:	4e d1       	rcall	.+668    	; 0x6804 <strnlen>
    6568:	4c 01       	movw	r8, r24
    656a:	82 01       	movw	r16, r4
    656c:	f3 2d       	mov	r31, r3
    656e:	ff 77       	andi	r31, 0x7F	; 127
    6570:	3f 2e       	mov	r3, r31
    6572:	15 c0       	rjmp	.+42     	; 0x659e <vfprintf+0x1aa>
    6574:	28 01       	movw	r4, r16
    6576:	22 e0       	ldi	r18, 0x02	; 2
    6578:	42 0e       	add	r4, r18
    657a:	51 1c       	adc	r5, r1
    657c:	f8 01       	movw	r30, r16
    657e:	a0 80       	ld	r10, Z
    6580:	b1 80       	ldd	r11, Z+1	; 0x01
    6582:	36 fe       	sbrs	r3, 6
    6584:	03 c0       	rjmp	.+6      	; 0x658c <vfprintf+0x198>
    6586:	69 2d       	mov	r22, r9
    6588:	70 e0       	ldi	r23, 0x00	; 0
    658a:	02 c0       	rjmp	.+4      	; 0x6590 <vfprintf+0x19c>
    658c:	6f ef       	ldi	r22, 0xFF	; 255
    658e:	7f ef       	ldi	r23, 0xFF	; 255
    6590:	c5 01       	movw	r24, r10
    6592:	2d d1       	rcall	.+602    	; 0x67ee <strnlen_P>
    6594:	4c 01       	movw	r8, r24
    6596:	f3 2d       	mov	r31, r3
    6598:	f0 68       	ori	r31, 0x80	; 128
    659a:	3f 2e       	mov	r3, r31
    659c:	82 01       	movw	r16, r4
    659e:	33 fc       	sbrc	r3, 3
    65a0:	19 c0       	rjmp	.+50     	; 0x65d4 <vfprintf+0x1e0>
    65a2:	82 2d       	mov	r24, r2
    65a4:	90 e0       	ldi	r25, 0x00	; 0
    65a6:	88 16       	cp	r8, r24
    65a8:	99 06       	cpc	r9, r25
    65aa:	a0 f4       	brcc	.+40     	; 0x65d4 <vfprintf+0x1e0>
    65ac:	b6 01       	movw	r22, r12
    65ae:	80 e2       	ldi	r24, 0x20	; 32
    65b0:	90 e0       	ldi	r25, 0x00	; 0
    65b2:	33 d1       	rcall	.+614    	; 0x681a <fputc>
    65b4:	2a 94       	dec	r2
    65b6:	f5 cf       	rjmp	.-22     	; 0x65a2 <vfprintf+0x1ae>
    65b8:	f5 01       	movw	r30, r10
    65ba:	37 fc       	sbrc	r3, 7
    65bc:	85 91       	lpm	r24, Z+
    65be:	37 fe       	sbrs	r3, 7
    65c0:	81 91       	ld	r24, Z+
    65c2:	5f 01       	movw	r10, r30
    65c4:	b6 01       	movw	r22, r12
    65c6:	90 e0       	ldi	r25, 0x00	; 0
    65c8:	28 d1       	rcall	.+592    	; 0x681a <fputc>
    65ca:	21 10       	cpse	r2, r1
    65cc:	2a 94       	dec	r2
    65ce:	21 e0       	ldi	r18, 0x01	; 1
    65d0:	82 1a       	sub	r8, r18
    65d2:	91 08       	sbc	r9, r1
    65d4:	81 14       	cp	r8, r1
    65d6:	91 04       	cpc	r9, r1
    65d8:	79 f7       	brne	.-34     	; 0x65b8 <vfprintf+0x1c4>
    65da:	e1 c0       	rjmp	.+450    	; 0x679e <vfprintf+0x3aa>
    65dc:	84 36       	cpi	r24, 0x64	; 100
    65de:	11 f0       	breq	.+4      	; 0x65e4 <vfprintf+0x1f0>
    65e0:	89 36       	cpi	r24, 0x69	; 105
    65e2:	39 f5       	brne	.+78     	; 0x6632 <vfprintf+0x23e>
    65e4:	f8 01       	movw	r30, r16
    65e6:	37 fe       	sbrs	r3, 7
    65e8:	07 c0       	rjmp	.+14     	; 0x65f8 <vfprintf+0x204>
    65ea:	60 81       	ld	r22, Z
    65ec:	71 81       	ldd	r23, Z+1	; 0x01
    65ee:	82 81       	ldd	r24, Z+2	; 0x02
    65f0:	93 81       	ldd	r25, Z+3	; 0x03
    65f2:	0c 5f       	subi	r16, 0xFC	; 252
    65f4:	1f 4f       	sbci	r17, 0xFF	; 255
    65f6:	08 c0       	rjmp	.+16     	; 0x6608 <vfprintf+0x214>
    65f8:	60 81       	ld	r22, Z
    65fa:	71 81       	ldd	r23, Z+1	; 0x01
    65fc:	07 2e       	mov	r0, r23
    65fe:	00 0c       	add	r0, r0
    6600:	88 0b       	sbc	r24, r24
    6602:	99 0b       	sbc	r25, r25
    6604:	0e 5f       	subi	r16, 0xFE	; 254
    6606:	1f 4f       	sbci	r17, 0xFF	; 255
    6608:	f3 2d       	mov	r31, r3
    660a:	ff 76       	andi	r31, 0x6F	; 111
    660c:	3f 2e       	mov	r3, r31
    660e:	97 ff       	sbrs	r25, 7
    6610:	09 c0       	rjmp	.+18     	; 0x6624 <vfprintf+0x230>
    6612:	90 95       	com	r25
    6614:	80 95       	com	r24
    6616:	70 95       	com	r23
    6618:	61 95       	neg	r22
    661a:	7f 4f       	sbci	r23, 0xFF	; 255
    661c:	8f 4f       	sbci	r24, 0xFF	; 255
    661e:	9f 4f       	sbci	r25, 0xFF	; 255
    6620:	f0 68       	ori	r31, 0x80	; 128
    6622:	3f 2e       	mov	r3, r31
    6624:	2a e0       	ldi	r18, 0x0A	; 10
    6626:	30 e0       	ldi	r19, 0x00	; 0
    6628:	a3 01       	movw	r20, r6
    662a:	33 d1       	rcall	.+614    	; 0x6892 <__ultoa_invert>
    662c:	88 2e       	mov	r8, r24
    662e:	86 18       	sub	r8, r6
    6630:	44 c0       	rjmp	.+136    	; 0x66ba <vfprintf+0x2c6>
    6632:	85 37       	cpi	r24, 0x75	; 117
    6634:	31 f4       	brne	.+12     	; 0x6642 <vfprintf+0x24e>
    6636:	23 2d       	mov	r18, r3
    6638:	2f 7e       	andi	r18, 0xEF	; 239
    663a:	b2 2e       	mov	r11, r18
    663c:	2a e0       	ldi	r18, 0x0A	; 10
    663e:	30 e0       	ldi	r19, 0x00	; 0
    6640:	25 c0       	rjmp	.+74     	; 0x668c <vfprintf+0x298>
    6642:	93 2d       	mov	r25, r3
    6644:	99 7f       	andi	r25, 0xF9	; 249
    6646:	b9 2e       	mov	r11, r25
    6648:	8f 36       	cpi	r24, 0x6F	; 111
    664a:	c1 f0       	breq	.+48     	; 0x667c <vfprintf+0x288>
    664c:	18 f4       	brcc	.+6      	; 0x6654 <vfprintf+0x260>
    664e:	88 35       	cpi	r24, 0x58	; 88
    6650:	79 f0       	breq	.+30     	; 0x6670 <vfprintf+0x27c>
    6652:	ae c0       	rjmp	.+348    	; 0x67b0 <vfprintf+0x3bc>
    6654:	80 37       	cpi	r24, 0x70	; 112
    6656:	19 f0       	breq	.+6      	; 0x665e <vfprintf+0x26a>
    6658:	88 37       	cpi	r24, 0x78	; 120
    665a:	21 f0       	breq	.+8      	; 0x6664 <vfprintf+0x270>
    665c:	a9 c0       	rjmp	.+338    	; 0x67b0 <vfprintf+0x3bc>
    665e:	e9 2f       	mov	r30, r25
    6660:	e0 61       	ori	r30, 0x10	; 16
    6662:	be 2e       	mov	r11, r30
    6664:	b4 fe       	sbrs	r11, 4
    6666:	0d c0       	rjmp	.+26     	; 0x6682 <vfprintf+0x28e>
    6668:	fb 2d       	mov	r31, r11
    666a:	f4 60       	ori	r31, 0x04	; 4
    666c:	bf 2e       	mov	r11, r31
    666e:	09 c0       	rjmp	.+18     	; 0x6682 <vfprintf+0x28e>
    6670:	34 fe       	sbrs	r3, 4
    6672:	0a c0       	rjmp	.+20     	; 0x6688 <vfprintf+0x294>
    6674:	29 2f       	mov	r18, r25
    6676:	26 60       	ori	r18, 0x06	; 6
    6678:	b2 2e       	mov	r11, r18
    667a:	06 c0       	rjmp	.+12     	; 0x6688 <vfprintf+0x294>
    667c:	28 e0       	ldi	r18, 0x08	; 8
    667e:	30 e0       	ldi	r19, 0x00	; 0
    6680:	05 c0       	rjmp	.+10     	; 0x668c <vfprintf+0x298>
    6682:	20 e1       	ldi	r18, 0x10	; 16
    6684:	30 e0       	ldi	r19, 0x00	; 0
    6686:	02 c0       	rjmp	.+4      	; 0x668c <vfprintf+0x298>
    6688:	20 e1       	ldi	r18, 0x10	; 16
    668a:	32 e0       	ldi	r19, 0x02	; 2
    668c:	f8 01       	movw	r30, r16
    668e:	b7 fe       	sbrs	r11, 7
    6690:	07 c0       	rjmp	.+14     	; 0x66a0 <vfprintf+0x2ac>
    6692:	60 81       	ld	r22, Z
    6694:	71 81       	ldd	r23, Z+1	; 0x01
    6696:	82 81       	ldd	r24, Z+2	; 0x02
    6698:	93 81       	ldd	r25, Z+3	; 0x03
    669a:	0c 5f       	subi	r16, 0xFC	; 252
    669c:	1f 4f       	sbci	r17, 0xFF	; 255
    669e:	06 c0       	rjmp	.+12     	; 0x66ac <vfprintf+0x2b8>
    66a0:	60 81       	ld	r22, Z
    66a2:	71 81       	ldd	r23, Z+1	; 0x01
    66a4:	80 e0       	ldi	r24, 0x00	; 0
    66a6:	90 e0       	ldi	r25, 0x00	; 0
    66a8:	0e 5f       	subi	r16, 0xFE	; 254
    66aa:	1f 4f       	sbci	r17, 0xFF	; 255
    66ac:	a3 01       	movw	r20, r6
    66ae:	f1 d0       	rcall	.+482    	; 0x6892 <__ultoa_invert>
    66b0:	88 2e       	mov	r8, r24
    66b2:	86 18       	sub	r8, r6
    66b4:	fb 2d       	mov	r31, r11
    66b6:	ff 77       	andi	r31, 0x7F	; 127
    66b8:	3f 2e       	mov	r3, r31
    66ba:	36 fe       	sbrs	r3, 6
    66bc:	0d c0       	rjmp	.+26     	; 0x66d8 <vfprintf+0x2e4>
    66be:	23 2d       	mov	r18, r3
    66c0:	2e 7f       	andi	r18, 0xFE	; 254
    66c2:	a2 2e       	mov	r10, r18
    66c4:	89 14       	cp	r8, r9
    66c6:	58 f4       	brcc	.+22     	; 0x66de <vfprintf+0x2ea>
    66c8:	34 fe       	sbrs	r3, 4
    66ca:	0b c0       	rjmp	.+22     	; 0x66e2 <vfprintf+0x2ee>
    66cc:	32 fc       	sbrc	r3, 2
    66ce:	09 c0       	rjmp	.+18     	; 0x66e2 <vfprintf+0x2ee>
    66d0:	83 2d       	mov	r24, r3
    66d2:	8e 7e       	andi	r24, 0xEE	; 238
    66d4:	a8 2e       	mov	r10, r24
    66d6:	05 c0       	rjmp	.+10     	; 0x66e2 <vfprintf+0x2ee>
    66d8:	b8 2c       	mov	r11, r8
    66da:	a3 2c       	mov	r10, r3
    66dc:	03 c0       	rjmp	.+6      	; 0x66e4 <vfprintf+0x2f0>
    66de:	b8 2c       	mov	r11, r8
    66e0:	01 c0       	rjmp	.+2      	; 0x66e4 <vfprintf+0x2f0>
    66e2:	b9 2c       	mov	r11, r9
    66e4:	a4 fe       	sbrs	r10, 4
    66e6:	0f c0       	rjmp	.+30     	; 0x6706 <vfprintf+0x312>
    66e8:	fe 01       	movw	r30, r28
    66ea:	e8 0d       	add	r30, r8
    66ec:	f1 1d       	adc	r31, r1
    66ee:	80 81       	ld	r24, Z
    66f0:	80 33       	cpi	r24, 0x30	; 48
    66f2:	21 f4       	brne	.+8      	; 0x66fc <vfprintf+0x308>
    66f4:	9a 2d       	mov	r25, r10
    66f6:	99 7e       	andi	r25, 0xE9	; 233
    66f8:	a9 2e       	mov	r10, r25
    66fa:	09 c0       	rjmp	.+18     	; 0x670e <vfprintf+0x31a>
    66fc:	a2 fe       	sbrs	r10, 2
    66fe:	06 c0       	rjmp	.+12     	; 0x670c <vfprintf+0x318>
    6700:	b3 94       	inc	r11
    6702:	b3 94       	inc	r11
    6704:	04 c0       	rjmp	.+8      	; 0x670e <vfprintf+0x31a>
    6706:	8a 2d       	mov	r24, r10
    6708:	86 78       	andi	r24, 0x86	; 134
    670a:	09 f0       	breq	.+2      	; 0x670e <vfprintf+0x31a>
    670c:	b3 94       	inc	r11
    670e:	a3 fc       	sbrc	r10, 3
    6710:	10 c0       	rjmp	.+32     	; 0x6732 <vfprintf+0x33e>
    6712:	a0 fe       	sbrs	r10, 0
    6714:	06 c0       	rjmp	.+12     	; 0x6722 <vfprintf+0x32e>
    6716:	b2 14       	cp	r11, r2
    6718:	80 f4       	brcc	.+32     	; 0x673a <vfprintf+0x346>
    671a:	28 0c       	add	r2, r8
    671c:	92 2c       	mov	r9, r2
    671e:	9b 18       	sub	r9, r11
    6720:	0d c0       	rjmp	.+26     	; 0x673c <vfprintf+0x348>
    6722:	b2 14       	cp	r11, r2
    6724:	58 f4       	brcc	.+22     	; 0x673c <vfprintf+0x348>
    6726:	b6 01       	movw	r22, r12
    6728:	80 e2       	ldi	r24, 0x20	; 32
    672a:	90 e0       	ldi	r25, 0x00	; 0
    672c:	76 d0       	rcall	.+236    	; 0x681a <fputc>
    672e:	b3 94       	inc	r11
    6730:	f8 cf       	rjmp	.-16     	; 0x6722 <vfprintf+0x32e>
    6732:	b2 14       	cp	r11, r2
    6734:	18 f4       	brcc	.+6      	; 0x673c <vfprintf+0x348>
    6736:	2b 18       	sub	r2, r11
    6738:	02 c0       	rjmp	.+4      	; 0x673e <vfprintf+0x34a>
    673a:	98 2c       	mov	r9, r8
    673c:	21 2c       	mov	r2, r1
    673e:	a4 fe       	sbrs	r10, 4
    6740:	0f c0       	rjmp	.+30     	; 0x6760 <vfprintf+0x36c>
    6742:	b6 01       	movw	r22, r12
    6744:	80 e3       	ldi	r24, 0x30	; 48
    6746:	90 e0       	ldi	r25, 0x00	; 0
    6748:	68 d0       	rcall	.+208    	; 0x681a <fputc>
    674a:	a2 fe       	sbrs	r10, 2
    674c:	16 c0       	rjmp	.+44     	; 0x677a <vfprintf+0x386>
    674e:	a1 fc       	sbrc	r10, 1
    6750:	03 c0       	rjmp	.+6      	; 0x6758 <vfprintf+0x364>
    6752:	88 e7       	ldi	r24, 0x78	; 120
    6754:	90 e0       	ldi	r25, 0x00	; 0
    6756:	02 c0       	rjmp	.+4      	; 0x675c <vfprintf+0x368>
    6758:	88 e5       	ldi	r24, 0x58	; 88
    675a:	90 e0       	ldi	r25, 0x00	; 0
    675c:	b6 01       	movw	r22, r12
    675e:	0c c0       	rjmp	.+24     	; 0x6778 <vfprintf+0x384>
    6760:	8a 2d       	mov	r24, r10
    6762:	86 78       	andi	r24, 0x86	; 134
    6764:	51 f0       	breq	.+20     	; 0x677a <vfprintf+0x386>
    6766:	a1 fe       	sbrs	r10, 1
    6768:	02 c0       	rjmp	.+4      	; 0x676e <vfprintf+0x37a>
    676a:	8b e2       	ldi	r24, 0x2B	; 43
    676c:	01 c0       	rjmp	.+2      	; 0x6770 <vfprintf+0x37c>
    676e:	80 e2       	ldi	r24, 0x20	; 32
    6770:	a7 fc       	sbrc	r10, 7
    6772:	8d e2       	ldi	r24, 0x2D	; 45
    6774:	b6 01       	movw	r22, r12
    6776:	90 e0       	ldi	r25, 0x00	; 0
    6778:	50 d0       	rcall	.+160    	; 0x681a <fputc>
    677a:	89 14       	cp	r8, r9
    677c:	30 f4       	brcc	.+12     	; 0x678a <vfprintf+0x396>
    677e:	b6 01       	movw	r22, r12
    6780:	80 e3       	ldi	r24, 0x30	; 48
    6782:	90 e0       	ldi	r25, 0x00	; 0
    6784:	4a d0       	rcall	.+148    	; 0x681a <fputc>
    6786:	9a 94       	dec	r9
    6788:	f8 cf       	rjmp	.-16     	; 0x677a <vfprintf+0x386>
    678a:	8a 94       	dec	r8
    678c:	f3 01       	movw	r30, r6
    678e:	e8 0d       	add	r30, r8
    6790:	f1 1d       	adc	r31, r1
    6792:	80 81       	ld	r24, Z
    6794:	b6 01       	movw	r22, r12
    6796:	90 e0       	ldi	r25, 0x00	; 0
    6798:	40 d0       	rcall	.+128    	; 0x681a <fputc>
    679a:	81 10       	cpse	r8, r1
    679c:	f6 cf       	rjmp	.-20     	; 0x678a <vfprintf+0x396>
    679e:	22 20       	and	r2, r2
    67a0:	09 f4       	brne	.+2      	; 0x67a4 <vfprintf+0x3b0>
    67a2:	4e ce       	rjmp	.-868    	; 0x6440 <vfprintf+0x4c>
    67a4:	b6 01       	movw	r22, r12
    67a6:	80 e2       	ldi	r24, 0x20	; 32
    67a8:	90 e0       	ldi	r25, 0x00	; 0
    67aa:	37 d0       	rcall	.+110    	; 0x681a <fputc>
    67ac:	2a 94       	dec	r2
    67ae:	f7 cf       	rjmp	.-18     	; 0x679e <vfprintf+0x3aa>
    67b0:	f6 01       	movw	r30, r12
    67b2:	86 81       	ldd	r24, Z+6	; 0x06
    67b4:	97 81       	ldd	r25, Z+7	; 0x07
    67b6:	02 c0       	rjmp	.+4      	; 0x67bc <vfprintf+0x3c8>
    67b8:	8f ef       	ldi	r24, 0xFF	; 255
    67ba:	9f ef       	ldi	r25, 0xFF	; 255
    67bc:	2b 96       	adiw	r28, 0x0b	; 11
    67be:	0f b6       	in	r0, 0x3f	; 63
    67c0:	f8 94       	cli
    67c2:	de bf       	out	0x3e, r29	; 62
    67c4:	0f be       	out	0x3f, r0	; 63
    67c6:	cd bf       	out	0x3d, r28	; 61
    67c8:	df 91       	pop	r29
    67ca:	cf 91       	pop	r28
    67cc:	1f 91       	pop	r17
    67ce:	0f 91       	pop	r16
    67d0:	ff 90       	pop	r15
    67d2:	ef 90       	pop	r14
    67d4:	df 90       	pop	r13
    67d6:	cf 90       	pop	r12
    67d8:	bf 90       	pop	r11
    67da:	af 90       	pop	r10
    67dc:	9f 90       	pop	r9
    67de:	8f 90       	pop	r8
    67e0:	7f 90       	pop	r7
    67e2:	6f 90       	pop	r6
    67e4:	5f 90       	pop	r5
    67e6:	4f 90       	pop	r4
    67e8:	3f 90       	pop	r3
    67ea:	2f 90       	pop	r2
    67ec:	08 95       	ret

000067ee <strnlen_P>:
    67ee:	fc 01       	movw	r30, r24
    67f0:	05 90       	lpm	r0, Z+
    67f2:	61 50       	subi	r22, 0x01	; 1
    67f4:	70 40       	sbci	r23, 0x00	; 0
    67f6:	01 10       	cpse	r0, r1
    67f8:	d8 f7       	brcc	.-10     	; 0x67f0 <strnlen_P+0x2>
    67fa:	80 95       	com	r24
    67fc:	90 95       	com	r25
    67fe:	8e 0f       	add	r24, r30
    6800:	9f 1f       	adc	r25, r31
    6802:	08 95       	ret

00006804 <strnlen>:
    6804:	fc 01       	movw	r30, r24
    6806:	61 50       	subi	r22, 0x01	; 1
    6808:	70 40       	sbci	r23, 0x00	; 0
    680a:	01 90       	ld	r0, Z+
    680c:	01 10       	cpse	r0, r1
    680e:	d8 f7       	brcc	.-10     	; 0x6806 <strnlen+0x2>
    6810:	80 95       	com	r24
    6812:	90 95       	com	r25
    6814:	8e 0f       	add	r24, r30
    6816:	9f 1f       	adc	r25, r31
    6818:	08 95       	ret

0000681a <fputc>:
    681a:	0f 93       	push	r16
    681c:	1f 93       	push	r17
    681e:	cf 93       	push	r28
    6820:	df 93       	push	r29
    6822:	fb 01       	movw	r30, r22
    6824:	23 81       	ldd	r18, Z+3	; 0x03
    6826:	21 fd       	sbrc	r18, 1
    6828:	03 c0       	rjmp	.+6      	; 0x6830 <fputc+0x16>
    682a:	8f ef       	ldi	r24, 0xFF	; 255
    682c:	9f ef       	ldi	r25, 0xFF	; 255
    682e:	2c c0       	rjmp	.+88     	; 0x6888 <fputc+0x6e>
    6830:	22 ff       	sbrs	r18, 2
    6832:	16 c0       	rjmp	.+44     	; 0x6860 <fputc+0x46>
    6834:	46 81       	ldd	r20, Z+6	; 0x06
    6836:	57 81       	ldd	r21, Z+7	; 0x07
    6838:	24 81       	ldd	r18, Z+4	; 0x04
    683a:	35 81       	ldd	r19, Z+5	; 0x05
    683c:	42 17       	cp	r20, r18
    683e:	53 07       	cpc	r21, r19
    6840:	44 f4       	brge	.+16     	; 0x6852 <fputc+0x38>
    6842:	a0 81       	ld	r26, Z
    6844:	b1 81       	ldd	r27, Z+1	; 0x01
    6846:	9d 01       	movw	r18, r26
    6848:	2f 5f       	subi	r18, 0xFF	; 255
    684a:	3f 4f       	sbci	r19, 0xFF	; 255
    684c:	31 83       	std	Z+1, r19	; 0x01
    684e:	20 83       	st	Z, r18
    6850:	8c 93       	st	X, r24
    6852:	26 81       	ldd	r18, Z+6	; 0x06
    6854:	37 81       	ldd	r19, Z+7	; 0x07
    6856:	2f 5f       	subi	r18, 0xFF	; 255
    6858:	3f 4f       	sbci	r19, 0xFF	; 255
    685a:	37 83       	std	Z+7, r19	; 0x07
    685c:	26 83       	std	Z+6, r18	; 0x06
    685e:	14 c0       	rjmp	.+40     	; 0x6888 <fputc+0x6e>
    6860:	8b 01       	movw	r16, r22
    6862:	ec 01       	movw	r28, r24
    6864:	fb 01       	movw	r30, r22
    6866:	00 84       	ldd	r0, Z+8	; 0x08
    6868:	f1 85       	ldd	r31, Z+9	; 0x09
    686a:	e0 2d       	mov	r30, r0
    686c:	19 95       	eicall
    686e:	89 2b       	or	r24, r25
    6870:	e1 f6       	brne	.-72     	; 0x682a <fputc+0x10>
    6872:	d8 01       	movw	r26, r16
    6874:	16 96       	adiw	r26, 0x06	; 6
    6876:	8d 91       	ld	r24, X+
    6878:	9c 91       	ld	r25, X
    687a:	17 97       	sbiw	r26, 0x07	; 7
    687c:	01 96       	adiw	r24, 0x01	; 1
    687e:	17 96       	adiw	r26, 0x07	; 7
    6880:	9c 93       	st	X, r25
    6882:	8e 93       	st	-X, r24
    6884:	16 97       	sbiw	r26, 0x06	; 6
    6886:	ce 01       	movw	r24, r28
    6888:	df 91       	pop	r29
    688a:	cf 91       	pop	r28
    688c:	1f 91       	pop	r17
    688e:	0f 91       	pop	r16
    6890:	08 95       	ret

00006892 <__ultoa_invert>:
    6892:	fa 01       	movw	r30, r20
    6894:	aa 27       	eor	r26, r26
    6896:	28 30       	cpi	r18, 0x08	; 8
    6898:	51 f1       	breq	.+84     	; 0x68ee <__ultoa_invert+0x5c>
    689a:	20 31       	cpi	r18, 0x10	; 16
    689c:	81 f1       	breq	.+96     	; 0x68fe <__ultoa_invert+0x6c>
    689e:	e8 94       	clt
    68a0:	6f 93       	push	r22
    68a2:	6e 7f       	andi	r22, 0xFE	; 254
    68a4:	6e 5f       	subi	r22, 0xFE	; 254
    68a6:	7f 4f       	sbci	r23, 0xFF	; 255
    68a8:	8f 4f       	sbci	r24, 0xFF	; 255
    68aa:	9f 4f       	sbci	r25, 0xFF	; 255
    68ac:	af 4f       	sbci	r26, 0xFF	; 255
    68ae:	b1 e0       	ldi	r27, 0x01	; 1
    68b0:	3e d0       	rcall	.+124    	; 0x692e <__ultoa_invert+0x9c>
    68b2:	b4 e0       	ldi	r27, 0x04	; 4
    68b4:	3c d0       	rcall	.+120    	; 0x692e <__ultoa_invert+0x9c>
    68b6:	67 0f       	add	r22, r23
    68b8:	78 1f       	adc	r23, r24
    68ba:	89 1f       	adc	r24, r25
    68bc:	9a 1f       	adc	r25, r26
    68be:	a1 1d       	adc	r26, r1
    68c0:	68 0f       	add	r22, r24
    68c2:	79 1f       	adc	r23, r25
    68c4:	8a 1f       	adc	r24, r26
    68c6:	91 1d       	adc	r25, r1
    68c8:	a1 1d       	adc	r26, r1
    68ca:	6a 0f       	add	r22, r26
    68cc:	71 1d       	adc	r23, r1
    68ce:	81 1d       	adc	r24, r1
    68d0:	91 1d       	adc	r25, r1
    68d2:	a1 1d       	adc	r26, r1
    68d4:	20 d0       	rcall	.+64     	; 0x6916 <__ultoa_invert+0x84>
    68d6:	09 f4       	brne	.+2      	; 0x68da <__ultoa_invert+0x48>
    68d8:	68 94       	set
    68da:	3f 91       	pop	r19
    68dc:	2a e0       	ldi	r18, 0x0A	; 10
    68de:	26 9f       	mul	r18, r22
    68e0:	11 24       	eor	r1, r1
    68e2:	30 19       	sub	r19, r0
    68e4:	30 5d       	subi	r19, 0xD0	; 208
    68e6:	31 93       	st	Z+, r19
    68e8:	de f6       	brtc	.-74     	; 0x68a0 <__ultoa_invert+0xe>
    68ea:	cf 01       	movw	r24, r30
    68ec:	08 95       	ret
    68ee:	46 2f       	mov	r20, r22
    68f0:	47 70       	andi	r20, 0x07	; 7
    68f2:	40 5d       	subi	r20, 0xD0	; 208
    68f4:	41 93       	st	Z+, r20
    68f6:	b3 e0       	ldi	r27, 0x03	; 3
    68f8:	0f d0       	rcall	.+30     	; 0x6918 <__ultoa_invert+0x86>
    68fa:	c9 f7       	brne	.-14     	; 0x68ee <__ultoa_invert+0x5c>
    68fc:	f6 cf       	rjmp	.-20     	; 0x68ea <__ultoa_invert+0x58>
    68fe:	46 2f       	mov	r20, r22
    6900:	4f 70       	andi	r20, 0x0F	; 15
    6902:	40 5d       	subi	r20, 0xD0	; 208
    6904:	4a 33       	cpi	r20, 0x3A	; 58
    6906:	18 f0       	brcs	.+6      	; 0x690e <__ultoa_invert+0x7c>
    6908:	49 5d       	subi	r20, 0xD9	; 217
    690a:	31 fd       	sbrc	r19, 1
    690c:	40 52       	subi	r20, 0x20	; 32
    690e:	41 93       	st	Z+, r20
    6910:	02 d0       	rcall	.+4      	; 0x6916 <__ultoa_invert+0x84>
    6912:	a9 f7       	brne	.-22     	; 0x68fe <__ultoa_invert+0x6c>
    6914:	ea cf       	rjmp	.-44     	; 0x68ea <__ultoa_invert+0x58>
    6916:	b4 e0       	ldi	r27, 0x04	; 4
    6918:	a6 95       	lsr	r26
    691a:	97 95       	ror	r25
    691c:	87 95       	ror	r24
    691e:	77 95       	ror	r23
    6920:	67 95       	ror	r22
    6922:	ba 95       	dec	r27
    6924:	c9 f7       	brne	.-14     	; 0x6918 <__ultoa_invert+0x86>
    6926:	00 97       	sbiw	r24, 0x00	; 0
    6928:	61 05       	cpc	r22, r1
    692a:	71 05       	cpc	r23, r1
    692c:	08 95       	ret
    692e:	9b 01       	movw	r18, r22
    6930:	ac 01       	movw	r20, r24
    6932:	0a 2e       	mov	r0, r26
    6934:	06 94       	lsr	r0
    6936:	57 95       	ror	r21
    6938:	47 95       	ror	r20
    693a:	37 95       	ror	r19
    693c:	27 95       	ror	r18
    693e:	ba 95       	dec	r27
    6940:	c9 f7       	brne	.-14     	; 0x6934 <__ultoa_invert+0xa2>
    6942:	62 0f       	add	r22, r18
    6944:	73 1f       	adc	r23, r19
    6946:	84 1f       	adc	r24, r20
    6948:	95 1f       	adc	r25, r21
    694a:	a0 1d       	adc	r26, r0
    694c:	08 95       	ret

0000694e <__divmodsi4>:
    694e:	05 2e       	mov	r0, r21
    6950:	97 fb       	bst	r25, 7
    6952:	16 f4       	brtc	.+4      	; 0x6958 <__divmodsi4+0xa>
    6954:	00 94       	com	r0
    6956:	0f d0       	rcall	.+30     	; 0x6976 <__negsi2>
    6958:	57 fd       	sbrc	r21, 7
    695a:	05 d0       	rcall	.+10     	; 0x6966 <__divmodsi4_neg2>
    695c:	a9 da       	rcall	.-2734   	; 0x5eb0 <__udivmodsi4>
    695e:	07 fc       	sbrc	r0, 7
    6960:	02 d0       	rcall	.+4      	; 0x6966 <__divmodsi4_neg2>
    6962:	46 f4       	brtc	.+16     	; 0x6974 <__divmodsi4_exit>
    6964:	08 c0       	rjmp	.+16     	; 0x6976 <__negsi2>

00006966 <__divmodsi4_neg2>:
    6966:	50 95       	com	r21
    6968:	40 95       	com	r20
    696a:	30 95       	com	r19
    696c:	21 95       	neg	r18
    696e:	3f 4f       	sbci	r19, 0xFF	; 255
    6970:	4f 4f       	sbci	r20, 0xFF	; 255
    6972:	5f 4f       	sbci	r21, 0xFF	; 255

00006974 <__divmodsi4_exit>:
    6974:	08 95       	ret

00006976 <__negsi2>:
    6976:	90 95       	com	r25
    6978:	80 95       	com	r24
    697a:	70 95       	com	r23
    697c:	61 95       	neg	r22
    697e:	7f 4f       	sbci	r23, 0xFF	; 255
    6980:	8f 4f       	sbci	r24, 0xFF	; 255
    6982:	9f 4f       	sbci	r25, 0xFF	; 255
    6984:	08 95       	ret

00006986 <__muluhisi3>:
    6986:	0f d0       	rcall	.+30     	; 0x69a6 <__umulhisi3>
    6988:	a5 9f       	mul	r26, r21
    698a:	90 0d       	add	r25, r0
    698c:	b4 9f       	mul	r27, r20
    698e:	90 0d       	add	r25, r0
    6990:	a4 9f       	mul	r26, r20
    6992:	80 0d       	add	r24, r0
    6994:	91 1d       	adc	r25, r1
    6996:	11 24       	eor	r1, r1
    6998:	08 95       	ret

0000699a <__mulshisi3>:
    699a:	b7 ff       	sbrs	r27, 7
    699c:	f4 cf       	rjmp	.-24     	; 0x6986 <__muluhisi3>

0000699e <__mulohisi3>:
    699e:	f3 df       	rcall	.-26     	; 0x6986 <__muluhisi3>
    69a0:	82 1b       	sub	r24, r18
    69a2:	93 0b       	sbc	r25, r19
    69a4:	08 95       	ret

000069a6 <__umulhisi3>:
    69a6:	a2 9f       	mul	r26, r18
    69a8:	b0 01       	movw	r22, r0
    69aa:	b3 9f       	mul	r27, r19
    69ac:	c0 01       	movw	r24, r0
    69ae:	a3 9f       	mul	r26, r19
    69b0:	70 0d       	add	r23, r0
    69b2:	81 1d       	adc	r24, r1
    69b4:	11 24       	eor	r1, r1
    69b6:	91 1d       	adc	r25, r1
    69b8:	b2 9f       	mul	r27, r18
    69ba:	70 0d       	add	r23, r0
    69bc:	81 1d       	adc	r24, r1
    69be:	11 24       	eor	r1, r1
    69c0:	91 1d       	adc	r25, r1
    69c2:	08 95       	ret

000069c4 <_exit>:
    69c4:	f8 94       	cli

000069c6 <__stop_program>:
    69c6:	ff cf       	rjmp	.-2      	; 0x69c6 <__stop_program>
